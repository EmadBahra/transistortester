
TransistorTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000032d8  0000338c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000032d8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007d  00800102  00800102  0000338e  2**0
                  ALLOC
  3 .eeprom       00000266  00810000  00810000  0000338e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         00000dbc  00000000  00000000  000035f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001d2  00000000  00000000  000043b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000040  00000000  00000000  00004582  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000063c  00000000  00000000  000045c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001ba8  00000000  00000000  00004bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000379  00000000  00000000  000067a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002b1f  00000000  00000000  00006b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000001e0  00000000  00000000  00009640  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000074b  00000000  00000000  00009820  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001001  00000000  00000000  00009f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00000093  00000000  00000000  0000af6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 ed       	ldi	r30, 0xD8	; 216
      7c:	f2 e3       	ldi	r31, 0x32	; 50
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 30       	cpi	r26, 0x02	; 2
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a2 e0       	ldi	r26, 0x02	; 2
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 37       	cpi	r26, 0x7F	; 127
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 a1 12 	call	0x2542	; 0x2542 <main>
      9e:	0c 94 6a 19 	jmp	0x32d4	; 0x32d4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_enable>:
  LCD_PORT &= 0xF0;
}

// genertes the Enable-Puls
void lcd_enable(void) {
   LCD_PORT |= (1<<LCD_EN1);
      a6:	5d 9a       	sbi	0x0b, 5	; 11
   wait10us();			// short break 
      a8:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <wait10us>
   // if problems occure, set the wait time to the value of datasheet of your display
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN1);
      ac:	5d 98       	cbi	0x0b, 5	; 11
}
      ae:	08 95       	ret

000000b0 <lcd_send>:
	}
#endif
}

//output to  LCD; 4-Bit-Modus
void lcd_send(unsigned char data) {
      b0:	df 93       	push	r29
      b2:	cf 93       	push	r28
      b4:	0f 92       	push	r0
      b6:	cd b7       	in	r28, 0x3d	; 61
      b8:	de b7       	in	r29, 0x3e	; 62
   // set upper Nibble
  LCD_PORT = (LCD_PORT & 0xF0) | ((data >> 4) & 0x0F);
      ba:	2b b1       	in	r18, 0x0b	; 11
      bc:	98 2f       	mov	r25, r24
      be:	92 95       	swap	r25
      c0:	9f 70       	andi	r25, 0x0F	; 15
      c2:	20 7f       	andi	r18, 0xF0	; 240
      c4:	92 2b       	or	r25, r18
      c6:	9b b9       	out	0x0b, r25	; 11
#if F_CPU < 2000000
  _delay_us(5);
#else
  wait5us();
      c8:	89 83       	std	Y+1, r24	; 0x01
      ca:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <wait5us>
#endif
  lcd_enable();
      ce:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_enable>
   // set lower Nibble 
  LCD_PORT = (LCD_PORT & 0xF0) | (data & 0x0F);
      d2:	9b b1       	in	r25, 0x0b	; 11
      d4:	89 81       	ldd	r24, Y+1	; 0x01
      d6:	8f 70       	andi	r24, 0x0F	; 15
      d8:	90 7f       	andi	r25, 0xF0	; 240
      da:	89 2b       	or	r24, r25
      dc:	8b b9       	out	0x0b, r24	; 11
#if F_CPU < 2000000
  _delay_us(5);
#else
  wait5us();
      de:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <wait5us>
#endif
  lcd_enable();
      e2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_enable>
  wait50us();
      e6:	0e 94 f6 17 	call	0x2fec	; 0x2fec <wait50us>
  LCD_PORT &= 0xF0;
      ea:	8b b1       	in	r24, 0x0b	; 11
      ec:	80 7f       	andi	r24, 0xF0	; 240
      ee:	8b b9       	out	0x0b, r24	; 11
}
      f0:	0f 90       	pop	r0
      f2:	cf 91       	pop	r28
      f4:	df 91       	pop	r29
      f6:	08 95       	ret

000000f8 <lcd_data>:
void lcd_space(void) {
   lcd_data(' ');
}

// sends data byte to the LCD 
void lcd_data(unsigned char temp1) {
      f8:	1f 93       	push	r17
      fa:	18 2f       	mov	r17, r24
 LCD_PORT |= (1<<LCD_RS);        // set RS to 1 
      fc:	5c 9a       	sbi	0x0b, 4	; 11
 lcd_send(temp1);
      fe:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_send>
#ifdef WITH_UART
 switch(temp1) {
     102:	18 30       	cpi	r17, 0x08	; 8
     104:	48 f4       	brcc	.+18     	; 0x118 <lcd_data+0x20>
     106:	16 30       	cpi	r17, 0x06	; 6
     108:	d0 f4       	brcc	.+52     	; 0x13e <lcd_data+0x46>
     10a:	12 30       	cpi	r17, 0x02	; 2
     10c:	71 f0       	breq	.+28     	; 0x12a <lcd_data+0x32>
     10e:	13 30       	cpi	r17, 0x03	; 3
     110:	89 f0       	breq	.+34     	; 0x134 <lcd_data+0x3c>
     112:	11 30       	cpi	r17, 0x01	; 1
     114:	d1 f4       	brne	.+52     	; 0x14a <lcd_data+0x52>
     116:	07 c0       	rjmp	.+14     	; 0x126 <lcd_data+0x2e>
     118:	14 3e       	cpi	r17, 0xE4	; 228
     11a:	a9 f0       	breq	.+42     	; 0x146 <lcd_data+0x4e>
     11c:	14 3f       	cpi	r17, 0xF4	; 244
     11e:	c1 f0       	breq	.+48     	; 0x150 <lcd_data+0x58>
     120:	11 3e       	cpi	r17, 0xE1	; 225
     122:	99 f4       	brne	.+38     	; 0x14a <lcd_data+0x52>
     124:	0e c0       	rjmp	.+28     	; 0x142 <lcd_data+0x4a>
    case LCD_CHAR_DIODE1:
    	uart_putc('>');
     126:	8e e3       	ldi	r24, 0x3E	; 62
     128:	06 c0       	rjmp	.+12     	; 0x136 <lcd_data+0x3e>
    	uart_putc('|');
    	break;
    case LCD_CHAR_DIODE2:
    	uart_putc('|');
     12a:	8c e7       	ldi	r24, 0x7C	; 124
     12c:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <uart_putc>
    	uart_putc('<');
     130:	8c e3       	ldi	r24, 0x3C	; 60
     132:	0c c0       	rjmp	.+24     	; 0x14c <lcd_data+0x54>
    	break;
    case LCD_CHAR_CAP:
    	uart_putc('|');
     134:	8c e7       	ldi	r24, 0x7C	; 124
     136:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <uart_putc>
    	uart_putc('|');
     13a:	8c e7       	ldi	r24, 0x7C	; 124
     13c:	07 c0       	rjmp	.+14     	; 0x14c <lcd_data+0x54>
    	break;
    case LCD_CHAR_RESIS1:
    case LCD_CHAR_RESIS2:
    	uart_putc('R');
     13e:	82 e5       	ldi	r24, 0x52	; 82
     140:	05 c0       	rjmp	.+10     	; 0x14c <lcd_data+0x54>
    	break;
    case 225:	//ä
    	uart_putc('ä');
     142:	84 ee       	ldi	r24, 0xE4	; 228
     144:	03 c0       	rjmp	.+6      	; 0x14c <lcd_data+0x54>
    	break;
    case 228:	//µ
    	uart_putc('µ');
     146:	85 eb       	ldi	r24, 0xB5	; 181
     148:	01 c0       	rjmp	.+2      	; 0x14c <lcd_data+0x54>
    	break;
    case 244:	//Omega
    	break;
    default:
    	uart_putc(temp1);
     14a:	81 2f       	mov	r24, r17
     14c:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <uart_putc>
 }
#endif
}
     150:	1f 91       	pop	r17
     152:	08 95       	ret

00000154 <lcd_space>:
   lcd_data(temp + '1');
}

// send space character to LCD
void lcd_space(void) {
   lcd_data(' ');
     154:	80 e2       	ldi	r24, 0x20	; 32
     156:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
}
     15a:	08 95       	ret

0000015c <lcd_testpin>:
 

// sends numeric character (Pin Number) to the LCD 
// from binary 0 we send ASCII 1 ....
void lcd_testpin(unsigned char temp) {
   lcd_data(temp + '1');
     15c:	8f 5c       	subi	r24, 0xCF	; 207
     15e:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
}
     162:	08 95       	ret

00000164 <uart_newline>:
}


#ifdef WITH_UART
void uart_newline(void) {
   uart_putc('\r');
     164:	8d e0       	ldi	r24, 0x0D	; 13
     166:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <uart_putc>
   uart_putc('\n');
     16a:	8a e0       	ldi	r24, 0x0A	; 10
     16c:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <uart_putc>
}
     170:	08 95       	ret

00000172 <lcd_command>:
#endif
}
 
// sends a command to the LCD
 
void lcd_command(unsigned char temp1) {
     172:	1f 93       	push	r17
     174:	18 2f       	mov	r17, r24
	LCD_PORT &= ~(1<<LCD_RS);        // set RS to 0 
     176:	5c 98       	cbi	0x0b, 4	; 11
	lcd_send(temp1);
     178:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_send>
#ifdef WITH_UART
	if((temp1 == 0x80) || (temp1 == 0xC0)) {
     17c:	10 38       	cpi	r17, 0x80	; 128
     17e:	11 f0       	breq	.+4      	; 0x184 <lcd_command+0x12>
     180:	10 3c       	cpi	r17, 0xC0	; 192
     182:	11 f4       	brne	.+4      	; 0x188 <lcd_command+0x16>
		uart_newline();
     184:	0e 94 b2 00 	call	0x164	; 0x164 <uart_newline>
	}
#endif
}
     188:	1f 91       	pop	r17
     18a:	08 95       	ret

0000018c <lcd_clear>:
}
 
// send the command to clear the display 
 
void lcd_clear(void) {
   lcd_command(CLEAR_DISPLAY);
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
   wait5ms();
     192:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <wait5ms>
#ifdef WITH_UART
   uart_newline();
     196:	0e 94 b2 00 	call	0x164	; 0x164 <uart_newline>
#endif
}
     19a:	08 95       	ret

0000019c <lcd_init>:
 
// Initialise: 
// Mustt be called first .
 
void lcd_init(void) {
   LCD_DDR = LCD_DDR | 0x0F | (1<<LCD_RS) | (1<<LCD_EN1);   // switch Port to output
     19c:	8a b1       	in	r24, 0x0a	; 10
     19e:	8f 63       	ori	r24, 0x3F	; 63
     1a0:	8a b9       	out	0x0a, r24	; 10
   // to initialise, send 3 times
          wait30ms();
     1a2:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <wait30ms>
   LCD_PORT = (LCD_PORT & 0xF0 & ~(1<<LCD_RS)) | 0x03;
     1a6:	8b b1       	in	r24, 0x0b	; 11
     1a8:	80 7e       	andi	r24, 0xE0	; 224
     1aa:	83 60       	ori	r24, 0x03	; 3
     1ac:	8b b9       	out	0x0b, r24	; 11
   lcd_enable();
     1ae:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_enable>

   wait5ms();
     1b2:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <wait5ms>
   lcd_enable();
     1b6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_enable>

   wait1ms();
     1ba:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <wait1ms>
   lcd_enable();
     1be:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_enable>
   wait1ms();
     1c2:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <wait1ms>
   LCD_PORT = (LCD_PORT & 0xF0 & ~(1<<LCD_RS)) | 0x02;
     1c6:	8b b1       	in	r24, 0x0b	; 11
     1c8:	80 7e       	andi	r24, 0xE0	; 224
     1ca:	82 60       	ori	r24, 0x02	; 2
     1cc:	8b b9       	out	0x0b, r24	; 11
   wait1ms();
     1ce:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <wait1ms>
   lcd_enable();
     1d2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_enable>
   wait1ms();
     1d6:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <wait1ms>

   // 4Bit / 2 rows / 5x7
   lcd_command(CMD_SetIFOptions | 0x08);
     1da:	88 e2       	ldi	r24, 0x28	; 40
     1dc:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>

   // Display on / Cursor off / no Blinking
   lcd_command(CMD_SetDisplayAndCursor | 0x04);
     1e0:	8c e0       	ldi	r24, 0x0C	; 12
     1e2:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>

   // increment / no Scroll    
   lcd_command(CMD_SetEntryMode | 0x02);	
     1e6:	86 e0       	ldi	r24, 0x06	; 6
     1e8:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
   lcd_clear();
     1ec:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clear>
}
     1f0:	08 95       	ret

000001f2 <lcd_string>:
#endif
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
     1f2:	ef 92       	push	r14
     1f4:	ff 92       	push	r15
     1f6:	cf 93       	push	r28
     1f8:	df 93       	push	r29
     1fa:	e8 2e       	mov	r14, r24
     1fc:	e7 01       	movw	r28, r14
     1fe:	7e 01       	movw	r14, r28
     200:	f9 2e       	mov	r15, r25
     202:	e7 01       	movw	r28, r14
    while(*data) {
     204:	02 c0       	rjmp	.+4      	; 0x20a <lcd_string+0x18>
        lcd_data(*data);
     206:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
    while(*data) {
     20a:	89 91       	ld	r24, Y+
     20c:	88 23       	and	r24, r24
     20e:	d9 f7       	brne	.-10     	; 0x206 <lcd_string+0x14>
        lcd_data(*data);
        data++;
    }
}
     210:	df 91       	pop	r29
     212:	cf 91       	pop	r28
     214:	ff 90       	pop	r15
     216:	ef 90       	pop	r14
     218:	08 95       	ret

0000021a <lcd_pgm_string>:

#ifdef AUTO_CAL
//Load string from PGM  and send to LCD 
void lcd_pgm_string(const unsigned char *data) {
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = pgm_read_byte(data);
     220:	fe 01       	movw	r30, r28
     222:	84 91       	lpm	r24, Z+
      if((cc==0) || (cc==128)) {
     224:	88 23       	and	r24, r24
     226:	31 f0       	breq	.+12     	; 0x234 <lcd_pgm_string+0x1a>
     228:	80 38       	cpi	r24, 0x80	; 128
     22a:	21 f0       	breq	.+8      	; 0x234 <lcd_pgm_string+0x1a>
         return;
      }
      lcd_data(cc);
     22c:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
      data++;
     230:	21 96       	adiw	r28, 0x01	; 1
   }
     232:	f6 cf       	rjmp	.-20     	; 0x220 <lcd_pgm_string+0x6>
}
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	08 95       	ret

0000023a <lcd_fix_string>:
#endif

//Load string from PGM or EEprom and send to LCD 
void lcd_fix_string(const unsigned char *data) {
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = MEM_read_byte(data);
     240:	ce 01       	movw	r24, r28
     242:	0e 94 29 19 	call	0x3252	; 0x3252 <__eerd_byte_m328p>
      if((cc==0) || (cc==128)) {
     246:	88 23       	and	r24, r24
     248:	31 f0       	breq	.+12     	; 0x256 <lcd_fix_string+0x1c>
     24a:	80 38       	cpi	r24, 0x80	; 128
     24c:	21 f0       	breq	.+8      	; 0x256 <lcd_fix_string+0x1c>
         return;
      }
      lcd_data(cc);
     24e:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
      data++;
     252:	21 96       	adiw	r28, 0x01	; 1
   }
     254:	f5 cf       	rjmp	.-22     	; 0x240 <lcd_fix_string+0x6>
}
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	08 95       	ret

0000025c <lcd_fix_customchar>:

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	8c 01       	movw	r16, r24
     266:	c0 e0       	ldi	r28, 0x00	; 0
     268:	d0 e0       	ldi	r29, 0x00	; 0
    for(uint8_t i=0;i<8;i++) {
        lcd_data(MEM_read_byte(chardata));
     26a:	c8 01       	movw	r24, r16
     26c:	8c 0f       	add	r24, r28
     26e:	9d 1f       	adc	r25, r29
     270:	0e 94 29 19 	call	0x3252	; 0x3252 <__eerd_byte_m328p>
     274:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
     278:	21 96       	adiw	r28, 0x01	; 1
   }
}

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
    for(uint8_t i=0;i<8;i++) {
     27a:	c8 30       	cpi	r28, 0x08	; 8
     27c:	d1 05       	cpc	r29, r1
     27e:	a9 f7       	brne	.-22     	; 0x26a <lcd_fix_customchar+0xe>
        lcd_data(MEM_read_byte(chardata));
        chardata++;
    }
}
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	1f 91       	pop	r17
     286:	0f 91       	pop	r16
     288:	08 95       	ret

0000028a <ChargePin10ms>:
#endif

//******************************************************************
#include "CheckPins.c"

void ChargePin10ms(uint8_t PinToCharge, uint8_t ChargeDirection) {
     28a:	df 93       	push	r29
     28c:	cf 93       	push	r28
     28e:	0f 92       	push	r0
     290:	cd b7       	in	r28, 0x3d	; 61
     292:	de b7       	in	r29, 0x3e	; 62
   //Will be used by discharge of MOSFET Gates or to load big capacities.
   //Parameters:
   //PinToCharge: specifies the pin as mask for R-Port
   //ChargeDirection: 0 = switch to GND (N-Kanal-FET), 1= switch to VCC(P-Kanal-FET)

   if(ChargeDirection&1) {
     294:	60 ff       	sbrs	r22, 0
     296:	03 c0       	rjmp	.+6      	; 0x29e <ChargePin10ms+0x14>
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
     298:	95 b1       	in	r25, 0x05	; 5
     29a:	98 2b       	or	r25, r24
     29c:	04 c0       	rjmp	.+8      	; 0x2a6 <ChargePin10ms+0x1c>
   } else {
      R_PORT &= ~PinToCharge; // or 0 (GND)
     29e:	25 b1       	in	r18, 0x05	; 5
     2a0:	98 2f       	mov	r25, r24
     2a2:	90 95       	com	r25
     2a4:	92 23       	and	r25, r18
     2a6:	95 b9       	out	0x05, r25	; 5
   }
   R_DDR |= PinToCharge;		//switch Pin to output, across R to GND or VCC
     2a8:	94 b1       	in	r25, 0x04	; 4
     2aa:	98 2b       	or	r25, r24
     2ac:	94 b9       	out	0x04, r25	; 4
   wait10ms();
     2ae:	89 83       	std	Y+1, r24	; 0x01
     2b0:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <wait10ms>
   // switch back Input, no current
   R_DDR &= ~PinToCharge;	// switch back to input
     2b4:	94 b1       	in	r25, 0x04	; 4
     2b6:	89 81       	ldd	r24, Y+1	; 0x01
     2b8:	80 95       	com	r24
     2ba:	98 23       	and	r25, r24
     2bc:	94 b9       	out	0x04, r25	; 4
   R_PORT &= ~PinToCharge;	// no Pull up
     2be:	95 b1       	in	r25, 0x05	; 5
     2c0:	98 23       	and	r25, r24
     2c2:	95 b9       	out	0x05, r25	; 5
}
     2c4:	0f 90       	pop	r0
     2c6:	cf 91       	pop	r28
     2c8:	df 91       	pop	r29
     2ca:	08 95       	ret

000002cc <CheckPins>:
//******************************************************************
void CheckPins(uint8_t HighPin, uint8_t LowPin, uint8_t TristatePin)
  {
     2cc:	2f 92       	push	r2
     2ce:	3f 92       	push	r3
     2d0:	4f 92       	push	r4
     2d2:	5f 92       	push	r5
     2d4:	6f 92       	push	r6
     2d6:	7f 92       	push	r7
     2d8:	8f 92       	push	r8
     2da:	9f 92       	push	r9
     2dc:	af 92       	push	r10
     2de:	bf 92       	push	r11
     2e0:	cf 92       	push	r12
     2e2:	df 92       	push	r13
     2e4:	ef 92       	push	r14
     2e6:	ff 92       	push	r15
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
     2ec:	df 93       	push	r29
     2ee:	cf 93       	push	r28
     2f0:	cd b7       	in	r28, 0x3d	; 61
     2f2:	de b7       	in	r29, 0x3e	; 62
     2f4:	65 97       	sbiw	r28, 0x15	; 21
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	f8 94       	cli
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	cd bf       	out	0x3d, r28	; 61
     300:	18 2f       	mov	r17, r24
     302:	36 2e       	mov	r3, r22
     304:	24 2e       	mov	r2, r20
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
     306:	a8 95       	wdr
//  #define RR680MI resis680mi
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = MEM_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
     308:	a6 2e       	mov	r10, r22
     30a:	bb 24       	eor	r11, r11
     30c:	c5 01       	movw	r24, r10
     30e:	85 5b       	subi	r24, 0xB5	; 181
     310:	9d 4f       	sbci	r25, 0xFD	; 253
     312:	0e 94 29 19 	call	0x3252	; 0x3252 <__eerd_byte_m328p>
     316:	8a 83       	std	Y+2, r24	; 0x02
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
  TriPinRL = MEM_read_byte(&PinRLtab[TristatePin]);	// intruction for TristatePin R_L
     318:	82 2d       	mov	r24, r2
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	85 5b       	subi	r24, 0xB5	; 181
     31e:	9d 4f       	sbci	r25, 0xFD	; 253
     320:	0e 94 29 19 	call	0x3252	; 0x3252 <__eerd_byte_m328p>
     324:	d8 2e       	mov	r13, r24
  TriPinRH = TriPinRL + TriPinRL;			// intruction for TristatePin R_H
     326:	08 2f       	mov	r16, r24
     328:	00 0f       	add	r16, r16
  HiPinRL = MEM_read_byte(&PinRLtab[HighPin]);		// intruction for HighPin R_L
     32a:	e1 2e       	mov	r14, r17
     32c:	ff 24       	eor	r15, r15
     32e:	c7 01       	movw	r24, r14
     330:	85 5b       	subi	r24, 0xB5	; 181
     332:	9d 4f       	sbci	r25, 0xFD	; 253
     334:	0e 94 29 19 	call	0x3252	; 0x3252 <__eerd_byte_m328p>
     338:	c8 2e       	mov	r12, r24
  HiPinRH = HiPinRL + HiPinRL;				// intruction for HighPin R_H
     33a:	28 2f       	mov	r18, r24
     33c:	22 0f       	add	r18, r18
     33e:	28 87       	std	Y+8, r18	; 0x08

  HiADCp = MEM_read_byte(&PinADCtab[HighPin]);		// intruction for ADC High-Pin 
     340:	c7 01       	movw	r24, r14
     342:	82 5b       	subi	r24, 0xB2	; 178
     344:	9d 4f       	sbci	r25, 0xFD	; 253
     346:	0e 94 29 19 	call	0x3252	; 0x3252 <__eerd_byte_m328p>
     34a:	89 83       	std	Y+1, r24	; 0x01
  LoADCp = MEM_read_byte(&PinADCtab[LowPin]);		// intruction for ADC Low-Pin
     34c:	c5 01       	movw	r24, r10
     34e:	82 5b       	subi	r24, 0xB2	; 178
     350:	9d 4f       	sbci	r25, 0xFD	; 253
     352:	0e 94 29 19 	call	0x3252	; 0x3252 <__eerd_byte_m328p>
  HiADCm = HiADCp | TXD_MSK;
     356:	39 81       	ldd	r19, Y+1	; 0x01
     358:	38 60       	ori	r19, 0x08	; 8
     35a:	39 83       	std	Y+1, r19	; 0x01
  HiADCp |= TXD_VAL;
  LoADCm = LoADCp | TXD_MSK;
     35c:	88 60       	ori	r24, 0x08	; 8
     35e:	8b 83       	std	Y+3, r24	; 0x03
  LoADCp |= TXD_VAL;

  //setting of Pins 
  R_PORT = 0;				//resistor-Port outputs to 0
     360:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//Low-Pin to output and across R_L to GND
     362:	8a 81       	ldd	r24, Y+2	; 0x02
     364:	84 b9       	out	0x04, r24	; 4
  ADC_DDR = HiADCm;		//High-Pin to output
     366:	37 b9       	out	0x07, r19	; 7
  ADC_PORT = HiADCp;		//High-Pin fix to Vcc
     368:	38 b9       	out	0x08, r19	; 8
  //for some MOSFET the gate (TristatePin) must be discharged
  ChargePin10ms(TriPinRL,0);		//discharge for N-Kanal
     36a:	8d 2d       	mov	r24, r13
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	0e 94 45 01 	call	0x28a	; 0x28a <ChargePin10ms>
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin 
     372:	83 2d       	mov	r24, r3
     374:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
     378:	9a 87       	std	Y+10, r25	; 0x0a
     37a:	89 87       	std	Y+9, r24	; 0x09
  if(adc.lp_otr >= 977) {		//no current now? 
     37c:	a3 e0       	ldi	r26, 0x03	; 3
     37e:	81 3d       	cpi	r24, 0xD1	; 209
     380:	9a 07       	cpc	r25, r26
     382:	48 f0       	brcs	.+18     	; 0x396 <CheckPins+0xca>
     ChargePin10ms(TriPinRL,1);	 	//else: discharge for P-channel (Gate to VCC)
     384:	8d 2d       	mov	r24, r13
     386:	61 e0       	ldi	r22, 0x01	; 1
     388:	0e 94 45 01 	call	0x28a	; 0x28a <ChargePin10ms>
     adc.lp_otr = ReadADC(LowPin);	//read voltage of Low-Pin again
     38c:	83 2d       	mov	r24, r3
     38e:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
     392:	9a 87       	std	Y+10, r25	; 0x0a
     394:	89 87       	std	Y+9, r24	; 0x09
  lcd_line2();
  lcd_clear_line();
  lcd_line2();
#endif

  if(adc.lp_otr > 92) {  //there is some current without TristatePin current 
     396:	e9 85       	ldd	r30, Y+9	; 0x09
     398:	fa 85       	ldd	r31, Y+10	; 0x0a
     39a:	ed 35       	cpi	r30, 0x5D	; 93
     39c:	f1 05       	cpc	r31, r1
     39e:	08 f4       	brcc	.+2      	; 0x3a2 <CheckPins+0xd6>
     3a0:	aa c0       	rjmp	.+340    	; 0x4f6 <CheckPins+0x22a>
     lcd_testpin(HighPin);
     lcd_space();
     wait1s();
#endif
     //Test if N-JFET or if self-conducting N-MOSFET
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
     3a2:	8a 81       	ldd	r24, Y+2	; 0x02
     3a4:	80 2b       	or	r24, r16
     3a6:	84 b9       	out	0x04, r24	; 4
     adc.lp1 = W20msReadADC(LowPin);	//measure voltage at the assumed Source 
     3a8:	83 2d       	mov	r24, r3
     3aa:	0e 94 03 18 	call	0x3006	; 0x3006 <W20msReadADC>
     3ae:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     3b0:	82 2d       	mov	r24, r2
     3b2:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
     3b6:	7c 01       	movw	r14, r24
     R_PORT = TriPinRH;			//switch R_H for Tristate-Pin (probably Gate) to VCC
     3b8:	05 b9       	out	0x05, r16	; 5
     adc.lp2 = W20msReadADC(LowPin);	//measure voltage at the assumed Source again
     3ba:	83 2d       	mov	r24, r3
     3bc:	0e 94 03 18 	call	0x3006	; 0x3006 <W20msReadADC>
     //If it is a self-conducting MOSFET or JFET, then must be: adc.lp2 > adc.lp1 
     if(adc.lp2>(adc.lp1+488)) {
     3c0:	95 01       	movw	r18, r10
     3c2:	28 51       	subi	r18, 0x18	; 24
     3c4:	3e 4f       	sbci	r19, 0xFE	; 254
     3c6:	28 17       	cp	r18, r24
     3c8:	39 07       	cpc	r19, r25
     3ca:	08 f0       	brcs	.+2      	; 0x3ce <CheckPins+0x102>
     3cc:	40 c0       	rjmp	.+128    	; 0x44e <CheckPins+0x182>
        //measure voltage at the  Gate, differ between MOSFET and JFET
        ADC_PORT = TXD_VAL;
     3ce:	88 e0       	ldi	r24, 0x08	; 8
     3d0:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = LoADCm;	//Low-Pin fix to GND
     3d2:	fb 81       	ldd	r31, Y+3	; 0x03
     3d4:	f7 b9       	out	0x07, r31	; 7
        R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     3d6:	80 2f       	mov	r24, r16
     3d8:	8c 29       	or	r24, r12
     3da:	84 b9       	out	0x04, r24	; 4
        R_PORT = TriPinRH | HiPinRL;	//switch R_L for High-Pin to VCC
     3dc:	85 b9       	out	0x05, r24	; 5
        adc.lp2 = W20msReadADC(TristatePin); //read voltage of assumed Gate 
     3de:	82 2d       	mov	r24, r2
     3e0:	0e 94 03 18 	call	0x3006	; 0x3006 <W20msReadADC>
        if(adc.lp2>3911) {  //MOSFET
     3e4:	2f e0       	ldi	r18, 0x0F	; 15
     3e6:	88 34       	cpi	r24, 0x48	; 72
     3e8:	92 07       	cpc	r25, r18
     3ea:	28 f0       	brcs	.+10     	; 0x3f6 <CheckPins+0x12a>
           PartFound = PART_FET;	//N-Kanal-MOSFET
     3ec:	83 e0       	ldi	r24, 0x03	; 3
     3ee:	80 93 09 01 	sts	0x0109, r24
           PartMode = PART_MODE_N_D_MOS; //Depletion-MOSFET
     3f2:	84 e0       	ldi	r24, 0x04	; 4
     3f4:	04 c0       	rjmp	.+8      	; 0x3fe <CheckPins+0x132>
        } else {  //JFET (pn-passage between Gate and Source is conducting )
           PartFound = PART_FET;	//N-Kanal-JFET
     3f6:	83 e0       	ldi	r24, 0x03	; 3
     3f8:	80 93 09 01 	sts	0x0109, r24
           PartMode = PART_MODE_N_JFET;
     3fc:	86 e0       	ldi	r24, 0x06	; 6
     3fe:	80 93 08 01 	sts	0x0108, r24
        }
//      if ((PartReady == 0) || (adc.lp1 > trans.uBE[0])) 
//      there is no way to find out the right Source / Drain
        trans.uBE[0] = adc.lp1;
     402:	b0 92 53 01 	sts	0x0153, r11
     406:	a0 92 52 01 	sts	0x0152, r10
        gthvoltage = adc.lp1 - adc.tp1;	//voltage GS (Source - Gate)
     40a:	c5 01       	movw	r24, r10
     40c:	8e 19       	sub	r24, r14
     40e:	9f 09       	sbc	r25, r15
     410:	90 93 5f 01 	sts	0x015F, r25
     414:	80 93 5e 01 	sts	0x015E, r24
        trans.uBE[1] = (unsigned int)(((unsigned long)adc.lp1 * 1000) / RR680MI); // Id 0.01mA
     418:	b5 01       	movw	r22, r10
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	28 ee       	ldi	r18, 0xE8	; 232
     420:	33 e0       	ldi	r19, 0x03	; 3
     422:	40 e0       	ldi	r20, 0x00	; 0
     424:	50 e0       	ldi	r21, 0x00	; 0
     426:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
     42a:	20 91 04 01 	lds	r18, 0x0104
     42e:	30 91 05 01 	lds	r19, 0x0105
     432:	40 e0       	ldi	r20, 0x00	; 0
     434:	50 e0       	ldi	r21, 0x00	; 0
     436:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
     43a:	30 93 55 01 	sts	0x0155, r19
     43e:	20 93 54 01 	sts	0x0154, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     442:	20 92 56 01 	sts	0x0156, r2
        trans.c = HighPin;
     446:	10 93 57 01 	sts	0x0157, r17
        trans.e = LowPin;
     44a:	30 92 58 01 	sts	0x0158, r3
     }

     ADC_PORT = TXD_VAL;		// direct outputs to GND
     44e:	88 e0       	ldi	r24, 0x08	; 8
     450:	88 b9       	out	0x08, r24	; 8

     //Test, if P-JFET or if self-conducting P-MOSFET
     ADC_DDR = LoADCm;		//switch Low-Pin (assumed Drain) direct to GND,
     452:	3b 81       	ldd	r19, Y+3	; 0x03
     454:	37 b9       	out	0x07, r19	; 7
				//R_H for Tristate-Pin (assumed Gate) is already switched to VCC
     R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     456:	80 2f       	mov	r24, r16
     458:	8c 29       	or	r24, r12
     45a:	84 b9       	out	0x04, r24	; 4
     R_PORT = TriPinRH | HiPinRL;	//High-Pin across R_L to Vcc
     45c:	85 b9       	out	0x05, r24	; 5
     adc.hp1 = W20msReadADC(HighPin);	//measure voltage at assumed Source 
     45e:	81 2f       	mov	r24, r17
     460:	0e 94 03 18 	call	0x3006	; 0x3006 <W20msReadADC>
     464:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     466:	82 2d       	mov	r24, r2
     468:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
     46c:	7c 01       	movw	r14, r24
     R_PORT = HiPinRL;			//switch R_H for Tristate-Pin (assumed Gate) to GND
     46e:	c5 b8       	out	0x05, r12	; 5
     adc.hp2 = W20msReadADC(HighPin);	//read voltage at assumed Source again
     470:	81 2f       	mov	r24, r17
     472:	0e 94 03 18 	call	0x3006	; 0x3006 <W20msReadADC>
     //if it is a self-conducting P_MOSFET or P-JFET , then must be:  adc.hp1 > adc.hp2 
     if(adc.hp1>(adc.hp2+488)) {
     476:	88 51       	subi	r24, 0x18	; 24
     478:	9e 4f       	sbci	r25, 0xFE	; 254
     47a:	8a 15       	cp	r24, r10
     47c:	9b 05       	cpc	r25, r11
     47e:	d8 f5       	brcc	.+118    	; 0x4f6 <CheckPins+0x22a>
        //read voltage at the Gate , to differ between MOSFET and JFET
        ADC_PORT = HiADCp;	//switch High-Pin directly to VCC
     480:	89 81       	ldd	r24, Y+1	; 0x01
     482:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = HiADCm;	//switch High-Pin to output
     484:	87 b9       	out	0x07, r24	; 7
        adc.tp2 = W20msReadADC(TristatePin); //read voltage at the assumed Gate 
     486:	82 2d       	mov	r24, r2
     488:	0e 94 03 18 	call	0x3006	; 0x3006 <W20msReadADC>
        if(adc.tp2<977) { 		//MOSFET
     48c:	a3 e0       	ldi	r26, 0x03	; 3
     48e:	81 3d       	cpi	r24, 0xD1	; 209
     490:	9a 07       	cpc	r25, r26
     492:	28 f4       	brcc	.+10     	; 0x49e <CheckPins+0x1d2>
           PartFound = PART_FET;	//P-Kanal-MOSFET
     494:	83 e0       	ldi	r24, 0x03	; 3
     496:	80 93 09 01 	sts	0x0109, r24
           PartMode = PART_MODE_P_D_MOS; //Depletion-MOSFET
     49a:	85 e0       	ldi	r24, 0x05	; 5
     49c:	04 c0       	rjmp	.+8      	; 0x4a6 <CheckPins+0x1da>
        } else { 			//JFET (pn-passage between Gate and Source is conducting)
           PartFound = PART_FET;	//P-Kanal-JFET
     49e:	83 e0       	ldi	r24, 0x03	; 3
     4a0:	80 93 09 01 	sts	0x0109, r24
           PartMode = PART_MODE_P_JFET;
     4a4:	87 e0       	ldi	r24, 0x07	; 7
     4a6:	80 93 08 01 	sts	0x0108, r24
        }
        gthvoltage = adc.tp1 - adc.hp1;		//voltage GS (Gate - Source)
     4aa:	ea 18       	sub	r14, r10
     4ac:	fb 08       	sbc	r15, r11
     4ae:	f0 92 5f 01 	sts	0x015F, r15
     4b2:	e0 92 5e 01 	sts	0x015E, r14
        trans.uBE[1] = (unsigned int)(((unsigned long)(ADCconfig.U_AVCC - adc.hp1) * 1000) / RR680PL); // Id 0.01mA
     4b6:	60 91 40 01 	lds	r22, 0x0140
     4ba:	70 91 41 01 	lds	r23, 0x0141
     4be:	6a 19       	sub	r22, r10
     4c0:	7b 09       	sbc	r23, r11
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	28 ee       	ldi	r18, 0xE8	; 232
     4c8:	33 e0       	ldi	r19, 0x03	; 3
     4ca:	40 e0       	ldi	r20, 0x00	; 0
     4cc:	50 e0       	ldi	r21, 0x00	; 0
     4ce:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
     4d2:	20 91 0b 01 	lds	r18, 0x010B
     4d6:	30 91 0c 01 	lds	r19, 0x010C
     4da:	40 e0       	ldi	r20, 0x00	; 0
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
     4e2:	30 93 55 01 	sts	0x0155, r19
     4e6:	20 93 54 01 	sts	0x0154, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     4ea:	20 92 56 01 	sts	0x0156, r2
        trans.c = LowPin;
     4ee:	30 92 57 01 	sts	0x0157, r3
        trans.e = HighPin;
     4f2:	10 93 58 01 	sts	0x0158, r17
  } // end component has current without TristatePin signal


#ifdef COMMON_COLLECTOR
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
     4f6:	88 e0       	ldi	r24, 0x08	; 8
     4f8:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;			// Collector direct to GND
     4fa:	bb 81       	ldd	r27, Y+3	; 0x03
     4fc:	b7 b9       	out	0x07, r27	; 7
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
     4fe:	c5 b8       	out	0x05, r12	; 5
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
     500:	ec 2d       	mov	r30, r12
     502:	ed 29       	or	r30, r13
     504:	eb 87       	std	Y+11, r30	; 0x0b
     506:	e4 b9       	out	0x04, r30	; 4
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     508:	a0 90 40 01 	lds	r10, 0x0140
     50c:	b0 90 41 01 	lds	r11, 0x0141
     510:	81 2f       	mov	r24, r17
     512:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
     516:	7c 01       	movw	r14, r24
  adc.tp1 = ReadADC(TristatePin);	// voltage at the base resistor
     518:	82 2d       	mov	r24, r2
     51a:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
     51e:	4c 01       	movw	r8, r24

  if (adc.tp1 < 10) {
     520:	8a 30       	cpi	r24, 0x0A	; 10
     522:	91 05       	cpc	r25, r1
     524:	68 f5       	brcc	.+90     	; 0x580 <CheckPins+0x2b4>
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
     526:	80 2f       	mov	r24, r16
     528:	8c 29       	or	r24, r12
     52a:	84 b9       	out	0x04, r24	; 4
     adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);
     52c:	a0 90 40 01 	lds	r10, 0x0140
     530:	b0 90 41 01 	lds	r11, 0x0141
     534:	81 2f       	mov	r24, r17
     536:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
     53a:	a8 1a       	sub	r10, r24
     53c:	b9 0a       	sbc	r11, r25
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
     53e:	82 2d       	mov	r24, r2
     540:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
     544:	4c 01       	movw	r8, r24
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     546:	25 01       	movw	r4, r10
     548:	66 24       	eor	r6, r6
     54a:	77 24       	eor	r7, r7
     54c:	20 91 0b 01 	lds	r18, 0x010B
     550:	30 91 0c 01 	lds	r19, 0x010C
     554:	40 e0       	ldi	r20, 0x00	; 0
     556:	50 e0       	ldi	r21, 0x00	; 0
     558:	60 e6       	ldi	r22, 0x60	; 96
     55a:	77 eb       	ldi	r23, 0xB7	; 183
     55c:	87 e4       	ldi	r24, 0x47	; 71
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
     564:	c3 01       	movw	r24, r6
     566:	b2 01       	movw	r22, r4
     568:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
     56c:	94 01       	movw	r18, r8
     56e:	40 e0       	ldi	r20, 0x00	; 0
     570:	50 e0       	ldi	r21, 0x00	; 0
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     572:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
     576:	2c 83       	std	Y+4, r18	; 0x04
     578:	3d 83       	std	Y+5, r19	; 0x05
     57a:	4e 83       	std	Y+6, r20	; 0x06
     57c:	5f 83       	std	Y+7, r21	; 0x07
     57e:	0f c0       	rjmp	.+30     	; 0x59e <CheckPins+0x2d2>
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
  ADC_DDR = LoADCm;			// Collector direct to GND
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     580:	ae 18       	sub	r10, r14
     582:	bf 08       	sbc	r11, r15
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
 #else
     c_hfe = ((adc.hp1 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
  } else {
     c_hfe = (unsigned long)((adc.hp1 - adc.tp1) / adc.tp1);
     584:	c5 01       	movw	r24, r10
     586:	88 19       	sub	r24, r8
     588:	99 09       	sbc	r25, r9
     58a:	b4 01       	movw	r22, r8
     58c:	0e 94 a1 18 	call	0x3142	; 0x3142 <__udivmodhi4>
     590:	cb 01       	movw	r24, r22
     592:	a0 e0       	ldi	r26, 0x00	; 0
     594:	b0 e0       	ldi	r27, 0x00	; 0
     596:	8c 83       	std	Y+4, r24	; 0x04
     598:	9d 83       	std	Y+5, r25	; 0x05
     59a:	ae 83       	std	Y+6, r26	; 0x06
     59c:	bf 83       	std	Y+7, r27	; 0x07
  }
#endif

  //set Pins again for circuit with common Emitter PNP
  R_DDR = LoPinRL;		//switch R_L port for Low-Pin to output (GND)
     59e:	9a 81       	ldd	r25, Y+2	; 0x02
     5a0:	94 b9       	out	0x04, r25	; 4
  R_PORT = 0;			//switch all resistor ports to GND
     5a2:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = HiADCm;		//switch High-Pin to output
     5a4:	a9 81       	ldd	r26, Y+1	; 0x01
     5a6:	a7 b9       	out	0x07, r26	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
     5a8:	a8 b9       	out	0x08, r26	; 8
  wait5ms();
     5aa:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <wait5ms>
  
  if(adc.lp_otr < 977) {
     5ae:	e9 85       	ldd	r30, Y+9	; 0x09
     5b0:	fa 85       	ldd	r31, Y+10	; 0x0a
     5b2:	23 e0       	ldi	r18, 0x03	; 3
     5b4:	e1 3d       	cpi	r30, 0xD1	; 209
     5b6:	f2 07       	cpc	r31, r18
     5b8:	08 f0       	brcs	.+2      	; 0x5bc <CheckPins+0x2f0>
     5ba:	a2 c2       	rjmp	.+1348   	; 0xb00 <__stack+0x201>
     lcd_testpin(HighPin);
     lcd_space();
     wait1s();
#endif
     //Test to PNP
     R_DDR = LoPinRL | TriPinRL;	//switch R_L port for Tristate-Pin to output (GND), for Test of PNP
     5bc:	3a 81       	ldd	r19, Y+2	; 0x02
     5be:	3d 29       	or	r19, r13
     5c0:	3f 87       	std	Y+15, r19	; 0x0f
     5c2:	34 b9       	out	0x04, r19	; 4
     adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin
     5c4:	83 2d       	mov	r24, r3
     5c6:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
     if(adc.lp1 > 3422) {
     5ca:	ad e0       	ldi	r26, 0x0D	; 13
     5cc:	8f 35       	cpi	r24, 0x5F	; 95
     5ce:	9a 07       	cpc	r25, r26
     5d0:	08 f4       	brcc	.+2      	; 0x5d4 <CheckPins+0x308>
     5d2:	e1 c0       	rjmp	.+450    	; 0x796 <CheckPins+0x4ca>
        //component has current => PNP-Transistor or equivalent
        //compute current amplification factor in both directions
        R_DDR = LoPinRL | TriPinRH;	//switch R_H port for Tristate-Pin (Base) to output (GND)
     5d4:	ba 81       	ldd	r27, Y+2	; 0x02
     5d6:	b0 2b       	or	r27, r16
     5d8:	b8 8b       	std	Y+16, r27	; 0x10
     5da:	b4 b9       	out	0x04, r27	; 4

        adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin (assumed Collector)
     5dc:	83 2d       	mov	r24, r3
     5de:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
     5e2:	9a 8b       	std	Y+18, r25	; 0x12
     5e4:	89 8b       	std	Y+17, r24	; 0x11
        adc.tp2 = ReadADC(TristatePin);	//measure voltage at TristatePin (Base) 
     5e6:	82 2d       	mov	r24, r2
     5e8:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
     5ec:	9d 8b       	std	Y+21, r25	; 0x15
     5ee:	8c 8b       	std	Y+20, r24	; 0x14
        //check, if Test is done before 
        if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     5f0:	80 91 09 01 	lds	r24, 0x0109
     5f4:	82 50       	subi	r24, 0x02	; 2
     5f6:	82 30       	cpi	r24, 0x02	; 2
     5f8:	18 f4       	brcc	.+6      	; 0x600 <CheckPins+0x334>
           PartReady = 1;
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	80 93 06 01 	sts	0x0106, r24
        }
        trans.uBE[PartReady] = ReadADC(HighPin) - adc.tp2;	// Base Emitter Voltage
     600:	e0 90 06 01 	lds	r14, 0x0106
     604:	ff 24       	eor	r15, r15
     606:	81 2f       	mov	r24, r17
     608:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
     60c:	f7 01       	movw	r30, r14
     60e:	ee 0f       	add	r30, r30
     610:	ff 1f       	adc	r31, r31
     612:	ee 5a       	subi	r30, 0xAE	; 174
     614:	fe 4f       	sbci	r31, 0xFE	; 254
     616:	2c 89       	ldd	r18, Y+20	; 0x14
     618:	3d 89       	ldd	r19, Y+21	; 0x15
     61a:	82 1b       	sub	r24, r18
     61c:	93 0b       	sbc	r25, r19
     61e:	91 83       	std	Z+1, r25	; 0x01
     620:	80 83       	st	Z, r24

        //compute current amplification factor for circuit with common Emitter
        //hFE = B = Collector current / Base current
        if(adc.tp2 < 53) {
     622:	25 33       	cpi	r18, 0x35	; 53
     624:	31 05       	cpc	r19, r1
     626:	20 f4       	brcc	.+8      	; 0x630 <CheckPins+0x364>
#if DebugOut == 5
           lcd_data('<');
           lcd_data('5');
           lcd_data('3');
#endif
           adc.tp2 = 53;
     628:	85 e3       	ldi	r24, 0x35	; 53
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	9d 8b       	std	Y+21, r25	; 0x15
     62e:	8c 8b       	std	Y+20, r24	; 0x14
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     630:	e0 90 06 01 	lds	r14, 0x0106
     634:	ff 24       	eor	r15, r15
     636:	a9 89       	ldd	r26, Y+17	; 0x11
     638:	ba 89       	ldd	r27, Y+18	; 0x12
     63a:	2d 01       	movw	r4, r26
     63c:	66 24       	eor	r6, r6
     63e:	77 24       	eor	r7, r7
     640:	20 91 04 01 	lds	r18, 0x0104
     644:	30 91 05 01 	lds	r19, 0x0105
     648:	40 e0       	ldi	r20, 0x00	; 0
     64a:	50 e0       	ldi	r21, 0x00	; 0
     64c:	60 e6       	ldi	r22, 0x60	; 96
     64e:	77 eb       	ldi	r23, 0xB7	; 183
     650:	87 e4       	ldi	r24, 0x47	; 71
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
     658:	c3 01       	movw	r24, r6
     65a:	b2 01       	movw	r22, r4
     65c:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
                 (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
     660:	ec 89       	ldd	r30, Y+20	; 0x14
     662:	fd 89       	ldd	r31, Y+21	; 0x15
     664:	9f 01       	movw	r18, r30
     666:	40 e0       	ldi	r20, 0x00	; 0
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
#endif
           adc.tp2 = 53;
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     66e:	f7 01       	movw	r30, r14
     670:	ee 0f       	add	r30, r30
     672:	ff 1f       	adc	r31, r31
     674:	ee 0f       	add	r30, r30
     676:	ff 1f       	adc	r31, r31
     678:	e6 5b       	subi	r30, 0xB6	; 182
     67a:	fe 4f       	sbci	r31, 0xFE	; 254
     67c:	20 83       	st	Z, r18
     67e:	31 83       	std	Z+1, r19	; 0x01
     680:	42 83       	std	Z+2, r20	; 0x02
     682:	53 83       	std	Z+3, r21	; 0x03
        trans.hfe[PartReady] = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
#ifdef COMMON_COLLECTOR
        //current amplification factor for common  Collector (Emitter follower)
        // c_hFE = (Emitter current - Base current) / Base current
        if (c_hfe > trans.hfe[PartReady]) {
     684:	8c 81       	ldd	r24, Y+4	; 0x04
     686:	9d 81       	ldd	r25, Y+5	; 0x05
     688:	ae 81       	ldd	r26, Y+6	; 0x06
     68a:	bf 81       	ldd	r27, Y+7	; 0x07
     68c:	28 17       	cp	r18, r24
     68e:	39 07       	cpc	r19, r25
     690:	4a 07       	cpc	r20, r26
     692:	5b 07       	cpc	r21, r27
     694:	98 f4       	brcc	.+38     	; 0x6bc <CheckPins+0x3f0>
           trans.hfe[PartReady] = c_hfe;
     696:	80 83       	st	Z, r24
     698:	91 83       	std	Z+1, r25	; 0x01
     69a:	a2 83       	std	Z+2, r26	; 0x02
     69c:	b3 83       	std	Z+3, r27	; 0x03
           trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.hp1 - adc.tp1;	// Base Emitter Voltage common collector
     69e:	f7 01       	movw	r30, r14
     6a0:	ee 0f       	add	r30, r30
     6a2:	ff 1f       	adc	r31, r31
     6a4:	ee 5a       	subi	r30, 0xAE	; 174
     6a6:	fe 4f       	sbci	r31, 0xFE	; 254
     6a8:	80 91 40 01 	lds	r24, 0x0140
     6ac:	90 91 41 01 	lds	r25, 0x0141
     6b0:	8a 19       	sub	r24, r10
     6b2:	9b 09       	sbc	r25, r11
     6b4:	88 19       	sub	r24, r8
     6b6:	99 09       	sbc	r25, r9
     6b8:	91 83       	std	Z+1, r25	; 0x01
     6ba:	80 83       	st	Z, r24
        }
#endif

 
        if(PartFound != PART_THYRISTOR) {
     6bc:	80 91 09 01 	lds	r24, 0x0109
     6c0:	85 30       	cpi	r24, 0x05	; 5
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <CheckPins+0x3fa>
     6c4:	68 c0       	rjmp	.+208    	; 0x796 <CheckPins+0x4ca>
           if(adc.tp2 > 977) {
     6c6:	ac 89       	ldd	r26, Y+20	; 0x14
     6c8:	bd 89       	ldd	r27, Y+21	; 0x15
     6ca:	e3 e0       	ldi	r30, 0x03	; 3
     6cc:	a2 3d       	cpi	r26, 0xD2	; 210
     6ce:	be 07       	cpc	r27, r30
     6d0:	30 f0       	brcs	.+12     	; 0x6de <CheckPins+0x412>
              //PNP-Transistor is found (Base voltage moves to VCC)
              PartFound = PART_TRANSISTOR;
     6d2:	82 e0       	ldi	r24, 0x02	; 2
     6d4:	80 93 09 01 	sts	0x0109, r24
              PartMode = PART_MODE_PNP;
     6d8:	80 93 08 01 	sts	0x0108, r24
     6dc:	56 c0       	rjmp	.+172    	; 0x78a <CheckPins+0x4be>
           } else {
              if((adc.lp_otr < 97) && (adc.lp1 > 2000)) {
     6de:	29 85       	ldd	r18, Y+9	; 0x09
     6e0:	3a 85       	ldd	r19, Y+10	; 0x0a
     6e2:	21 36       	cpi	r18, 0x61	; 97
     6e4:	31 05       	cpc	r19, r1
     6e6:	08 f0       	brcs	.+2      	; 0x6ea <CheckPins+0x41e>
     6e8:	50 c0       	rjmp	.+160    	; 0x78a <CheckPins+0x4be>
     6ea:	89 89       	ldd	r24, Y+17	; 0x11
     6ec:	9a 89       	ldd	r25, Y+18	; 0x12
     6ee:	a7 e0       	ldi	r26, 0x07	; 7
     6f0:	81 3d       	cpi	r24, 0xD1	; 209
     6f2:	9a 07       	cpc	r25, r26
     6f4:	08 f4       	brcc	.+2      	; 0x6f8 <CheckPins+0x42c>
     6f6:	49 c0       	rjmp	.+146    	; 0x78a <CheckPins+0x4be>
                 //is flow voltage low enough in the closed  state?
                 //(since D-Mode-FET would be by mistake detected as E-Mode )
        	 PartFound = PART_FET;		//P-Kanal-MOSFET if found (Basis/Gate moves not to VCC)
     6f8:	83 e0       	ldi	r24, 0x03	; 3
     6fa:	80 93 09 01 	sts	0x0109, r24
        	 PartMode = PART_MODE_P_E_MOS;
     6fe:	80 93 08 01 	sts	0x0108, r24
                 PinMSK = LoADCm & 7;
     702:	eb 80       	ldd	r14, Y+3	; 0x03
     704:	b7 e0       	ldi	r27, 0x07	; 7
     706:	eb 22       	and	r14, r27
        	 //measure the Gate threshold voltage
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
     708:	82 2d       	mov	r24, r2
     70a:	80 64       	ori	r24, 0x40	; 64
     70c:	80 93 7c 00 	sts	0x007C, r24
        	 gthvoltage = 1;		// round up ((1*4)/9)
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	90 93 5f 01 	sts	0x015F, r25
     718:	80 93 5e 01 	sts	0x015E, r24
        	 for(ii=0;ii<11;ii++) {
     71c:	40 e0       	ldi	r20, 0x00	; 0
        	    wdt_reset();
     71e:	a8 95       	wdr
        	    ChargePin10ms(TriPinRL,1);
     720:	8d 2d       	mov	r24, r13
     722:	61 e0       	ldi	r22, 0x01	; 1
     724:	4b 8b       	std	Y+19, r20	; 0x13
     726:	0e 94 45 01 	call	0x28a	; 0x28a <ChargePin10ms>
                    R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (Basis) to GND
     72a:	e8 89       	ldd	r30, Y+16	; 0x10
     72c:	e4 b9       	out	0x04, r30	; 4
     72e:	4b 89       	ldd	r20, Y+19	; 0x13
        	    while (!(ADC_PIN&PinMSK));  // Wait, until the MOSFET switches and Drain moves to VCC
     730:	86 b1       	in	r24, 0x06	; 6
     732:	8e 21       	and	r24, r14
     734:	e9 f3       	breq	.-6      	; 0x730 <CheckPins+0x464>
        	    R_DDR = LoPinRL;
     736:	fa 81       	ldd	r31, Y+2	; 0x02
     738:	f4 b9       	out	0x04, r31	; 4
        	    ADCSRA |= (1<<ADSC);	// Start Conversion
     73a:	80 91 7a 00 	lds	r24, 0x007A
     73e:	80 64       	ori	r24, 0x40	; 64
     740:	80 93 7a 00 	sts	0x007A, r24
        	    while (ADCSRA&(1<<ADSC));	// wait
     744:	80 91 7a 00 	lds	r24, 0x007A
     748:	86 fd       	sbrc	r24, 6
     74a:	fc cf       	rjmp	.-8      	; 0x744 <CheckPins+0x478>
      		    gthvoltage += (1023 - ADCW); // Add Tristatepin-Voltage
     74c:	20 91 78 00 	lds	r18, 0x0078
     750:	30 91 79 00 	lds	r19, 0x0079
     754:	80 91 5e 01 	lds	r24, 0x015E
     758:	90 91 5f 01 	lds	r25, 0x015F
     75c:	81 50       	subi	r24, 0x01	; 1
     75e:	9c 4f       	sbci	r25, 0xFC	; 252
     760:	82 1b       	sub	r24, r18
     762:	93 0b       	sbc	r25, r19
     764:	90 93 5f 01 	sts	0x015F, r25
     768:	80 93 5e 01 	sts	0x015E, r24
        	 PartMode = PART_MODE_P_E_MOS;
                 PinMSK = LoADCm & 7;
        	 //measure the Gate threshold voltage
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
        	 gthvoltage = 1;		// round up ((1*4)/9)
        	 for(ii=0;ii<11;ii++) {
     76c:	4f 5f       	subi	r20, 0xFF	; 255
     76e:	4b 30       	cpi	r20, 0x0B	; 11
     770:	b1 f6       	brne	.-84     	; 0x71e <CheckPins+0x452>
        	    R_DDR = LoPinRL;
        	    ADCSRA |= (1<<ADSC);	// Start Conversion
        	    while (ADCSRA&(1<<ADSC));	// wait
      		    gthvoltage += (1023 - ADCW); // Add Tristatepin-Voltage
                 }
                 gthvoltage *= 4;		// is equal to 44*ADCW
     772:	88 0f       	add	r24, r24
     774:	99 1f       	adc	r25, r25
     776:	88 0f       	add	r24, r24
     778:	99 1f       	adc	r25, r25
                 gthvoltage /= 9;		// gives resolution in mV
     77a:	69 e0       	ldi	r22, 0x09	; 9
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	0e 94 a1 18 	call	0x3142	; 0x3142 <__udivmodhi4>
     782:	70 93 5f 01 	sts	0x015F, r23
     786:	60 93 5e 01 	sts	0x015E, r22
              }
           }
           trans.b = TristatePin;
     78a:	20 92 56 01 	sts	0x0156, r2
           trans.c = LowPin;
     78e:	30 92 57 01 	sts	0x0157, r3
           trans.e = HighPin;
     792:	10 93 58 01 	sts	0x0158, r17
        }  // end if PartFound != PART_THYRISTOR
    } // end component has current => PNP

#ifdef COMMON_COLLECTOR
    // Low-Pin=RL- HighPin=VCC
    R_DDR = LoPinRL | TriPinRL;
     796:	2f 85       	ldd	r18, Y+15	; 0x0f
     798:	24 b9       	out	0x04, r18	; 4
    R_PORT = TriPinRL;			// TriPin=RL+  NPN with common Collector
     79a:	d5 b8       	out	0x05, r13	; 5
    adc.lp1 = W5msReadADC(LowPin);	// voltage at Emitter resistor
     79c:	83 2d       	mov	r24, r3
     79e:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
     7a2:	2c 01       	movw	r4, r24
    adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     7a4:	80 91 40 01 	lds	r24, 0x0140
     7a8:	90 91 41 01 	lds	r25, 0x0141
     7ac:	9a 8b       	std	Y+18, r25	; 0x12
     7ae:	89 8b       	std	Y+17, r24	; 0x11
     7b0:	82 2d       	mov	r24, r2
     7b2:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
     7b6:	a9 89       	ldd	r26, Y+17	; 0x11
     7b8:	ba 89       	ldd	r27, Y+18	; 0x12
     7ba:	a8 1b       	sub	r26, r24
     7bc:	b9 0b       	sbc	r27, r25
     7be:	ba 8b       	std	Y+18, r27	; 0x12
     7c0:	a9 8b       	std	Y+17, r26	; 0x11
    if (adc.tp1 < 10) {
     7c2:	aa 30       	cpi	r26, 0x0A	; 10
     7c4:	b1 05       	cpc	r27, r1
     7c6:	b0 f5       	brcc	.+108    	; 0x834 <CheckPins+0x568>
       R_DDR = LoPinRL | TriPinRH;
     7c8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ca:	80 2b       	or	r24, r16
     7cc:	84 b9       	out	0x04, r24	; 4
       R_PORT = TriPinRH;		// Tripin=RH+
     7ce:	05 b9       	out	0x05, r16	; 5
       adc.lp1 = W5msReadADC(LowPin);
     7d0:	83 2d       	mov	r24, r3
     7d2:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
     7d6:	2c 01       	movw	r4, r24
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     7d8:	e0 91 40 01 	lds	r30, 0x0140
     7dc:	f0 91 41 01 	lds	r31, 0x0141
     7e0:	fa 8b       	std	Y+18, r31	; 0x12
     7e2:	e9 8b       	std	Y+17, r30	; 0x11
     7e4:	82 2d       	mov	r24, r2
     7e6:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
     7ea:	29 89       	ldd	r18, Y+17	; 0x11
     7ec:	3a 89       	ldd	r19, Y+18	; 0x12
     7ee:	28 1b       	sub	r18, r24
     7f0:	39 0b       	sbc	r19, r25
     7f2:	3a 8b       	std	Y+18, r19	; 0x12
     7f4:	29 8b       	std	Y+17, r18	; 0x11
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     7f6:	42 01       	movw	r8, r4
     7f8:	aa 24       	eor	r10, r10
     7fa:	bb 24       	eor	r11, r11
     7fc:	20 91 04 01 	lds	r18, 0x0104
     800:	30 91 05 01 	lds	r19, 0x0105
     804:	40 e0       	ldi	r20, 0x00	; 0
     806:	50 e0       	ldi	r21, 0x00	; 0
     808:	60 e6       	ldi	r22, 0x60	; 96
     80a:	77 eb       	ldi	r23, 0xB7	; 183
     80c:	87 e4       	ldi	r24, 0x47	; 71
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
     814:	c5 01       	movw	r24, r10
     816:	b4 01       	movw	r22, r8
     818:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
     81c:	a9 89       	ldd	r26, Y+17	; 0x11
     81e:	ba 89       	ldd	r27, Y+18	; 0x12
     820:	9d 01       	movw	r18, r26
     822:	40 e0       	ldi	r20, 0x00	; 0
     824:	50 e0       	ldi	r21, 0x00	; 0
       R_DDR = LoPinRL | TriPinRH;
       R_PORT = TriPinRH;		// Tripin=RH+
       adc.lp1 = W5msReadADC(LowPin);
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     826:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
     82a:	2c 83       	std	Y+4, r18	; 0x04
     82c:	3d 83       	std	Y+5, r19	; 0x05
     82e:	4e 83       	std	Y+6, r20	; 0x06
     830:	5f 83       	std	Y+7, r21	; 0x07
     832:	0f c0       	rjmp	.+30     	; 0x852 <CheckPins+0x586>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
 #else
       c_hfe = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
    } else {
       c_hfe = (adc.lp1 - adc.tp1) / adc.tp1;
     834:	c2 01       	movw	r24, r4
     836:	e9 89       	ldd	r30, Y+17	; 0x11
     838:	fa 89       	ldd	r31, Y+18	; 0x12
     83a:	8e 1b       	sub	r24, r30
     83c:	9f 0b       	sbc	r25, r31
     83e:	bf 01       	movw	r22, r30
     840:	0e 94 a1 18 	call	0x3142	; 0x3142 <__udivmodhi4>
     844:	cb 01       	movw	r24, r22
     846:	a0 e0       	ldi	r26, 0x00	; 0
     848:	b0 e0       	ldi	r27, 0x00	; 0
     84a:	8c 83       	std	Y+4, r24	; 0x04
     84c:	9d 83       	std	Y+5, r25	; 0x05
     84e:	ae 83       	std	Y+6, r26	; 0x06
     850:	bf 83       	std	Y+7, r27	; 0x07
       lcd_string(utoa(adc.tp1,outval,10));
       wait1s();
#endif
#endif
    //Tristate (can be Base) to VCC, Test if NPN
    ADC_DDR = LoADCm;		//Low-Pin to output 0V
     852:	9b 81       	ldd	r25, Y+3	; 0x03
     854:	97 b9       	out	0x07, r25	; 7
    ADC_PORT = TXD_VAL;			//switch Low-Pin to GND
     856:	88 e0       	ldi	r24, 0x08	; 8
     858:	88 b9       	out	0x08, r24	; 8
    R_DDR = TriPinRL | HiPinRL;		//RL port for High-Pin and Tristate-Pin to output
     85a:	ab 85       	ldd	r26, Y+11	; 0x0b
     85c:	a4 b9       	out	0x04, r26	; 4
    R_PORT = TriPinRL | HiPinRL;	//RL port for High-Pin and Tristate-Pin to Vcc
     85e:	a5 b9       	out	0x05, r26	; 5
    adc.hp1 = W5msReadADC(HighPin);	//measure voltage at High-Pin  (Collector)
     860:	81 2f       	mov	r24, r17
     862:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
    if(adc.hp1 < 1600) {
     866:	b6 e0       	ldi	r27, 0x06	; 6
     868:	80 34       	cpi	r24, 0x40	; 64
     86a:	9b 07       	cpc	r25, r27
     86c:	08 f0       	brcs	.+2      	; 0x870 <CheckPins+0x5a4>
     86e:	44 c1       	rjmp	.+648    	; 0xaf8 <__stack+0x1f9>
       lcd_data('N');
       lcd_testpin(HighPin);
       lcd_space();
       wait1s();
#endif
       if(PartReady==1) {
     870:	80 91 06 01 	lds	r24, 0x0106
     874:	81 30       	cpi	r24, 0x01	; 1
     876:	09 f4       	brne	.+2      	; 0x87a <CheckPins+0x5ae>
     878:	ac c1       	rjmp	.+856    	; 0xbd2 <__stack+0x2d3>
          goto widmes;
       }

       //Test auf Thyristor:
       //Gate discharge
       ChargePin10ms(TriPinRL,0);	//Tristate-Pin (Gate) across R_L 10ms to GND
     87a:	8d 2d       	mov	r24, r13
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	0e 94 45 01 	call	0x28a	; 0x28a <ChargePin10ms>
       adc.hp3 = W5msReadADC(HighPin);	//read voltage at High-Pin (probably Anode) again
     882:	81 2f       	mov	r24, r17
     884:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
     888:	7c 01       	movw	r14, r24
					//current should still flow, if not,
					// no Thyristor or holding current to low 
		 	
       R_PORT = 0;			//switch R_L for High-Pin (probably Anode) to GND (turn off)
     88a:	15 b8       	out	0x05, r1	; 5
       wait5ms();
     88c:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <wait5ms>
       R_PORT = HiPinRL;		//switch R_L for High-Pin (probably Anode) again to VCC
     890:	c5 b8       	out	0x05, r12	; 5
       adc.hp2 = W5msReadADC(HighPin);	//measure voltage at the High-Pin (probably Anode) again
     892:	81 2f       	mov	r24, r17
     894:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
       if((adc.hp3 < 1600) && (adc.hp2 > 4400)) {
     898:	e0 e4       	ldi	r30, 0x40	; 64
     89a:	ee 16       	cp	r14, r30
     89c:	e6 e0       	ldi	r30, 0x06	; 6
     89e:	fe 06       	cpc	r15, r30
     8a0:	08 f0       	brcs	.+2      	; 0x8a4 <CheckPins+0x5d8>
     8a2:	42 c0       	rjmp	.+132    	; 0x928 <__stack+0x29>
     8a4:	f1 e1       	ldi	r31, 0x11	; 17
     8a6:	81 33       	cpi	r24, 0x31	; 49
     8a8:	9f 07       	cpc	r25, r31
     8aa:	f0 f1       	brcs	.+124    	; 0x928 <__stack+0x29>
          //if the holding current was switched off the thyristor must be switched off too. 
          //if Thyristor was still swiched on, if gate was switched off => Thyristor
          PartFound = PART_THYRISTOR;
     8ac:	85 e0       	ldi	r24, 0x05	; 5
     8ae:	80 93 09 01 	sts	0x0109, r24
          //Test if Triac
          R_DDR = 0;
     8b2:	14 b8       	out	0x04, r1	; 4
          R_PORT = 0;
     8b4:	15 b8       	out	0x05, r1	; 5
          ADC_PORT = LoADCp;	//Low-Pin fix to VCC
     8b6:	2b 81       	ldd	r18, Y+3	; 0x03
     8b8:	28 b9       	out	0x08, r18	; 8
          wait5ms();
     8ba:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <wait5ms>
          R_DDR = HiPinRL;		//switch R_L port HighPin to output (GND)
     8be:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) > 244) {
     8c0:	81 2f       	mov	r24, r17
     8c2:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
     8c6:	85 3f       	cpi	r24, 0xF5	; 245
     8c8:	91 05       	cpc	r25, r1
     8ca:	08 f0       	brcs	.+2      	; 0x8ce <CheckPins+0x602>
     8cc:	0f c1       	rjmp	.+542    	; 0xaec <__stack+0x1ed>
             goto savenresult;		//measure voltage at the  High-Pin (probably A2); if too high:
                                	//component has current => kein Triac
          }
          R_DDR = HiPinRL | TriPinRL;	//switch R_L port for TristatePin (Gate) to output (GND) => Triac should be triggered 
     8ce:	3b 85       	ldd	r19, Y+11	; 0x0b
     8d0:	34 b9       	out	0x04, r19	; 4
          if(W5msReadADC(TristatePin) < 977) {
     8d2:	82 2d       	mov	r24, r2
     8d4:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
     8d8:	a3 e0       	ldi	r26, 0x03	; 3
     8da:	81 3d       	cpi	r24, 0xD1	; 209
     8dc:	9a 07       	cpc	r25, r26
     8de:	08 f4       	brcc	.+2      	; 0x8e2 <CheckPins+0x616>
     8e0:	05 c1       	rjmp	.+522    	; 0xaec <__stack+0x1ed>
             goto savenresult; 		//measure voltage at the Tristate-Pin (probably Gate) ;
                              		// if to low, abort 
          }
          if(ReadADC(HighPin) < 733) {
     8e2:	81 2f       	mov	r24, r17
     8e4:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
     8e8:	b2 e0       	ldi	r27, 0x02	; 2
     8ea:	8d 3d       	cpi	r24, 0xDD	; 221
     8ec:	9b 07       	cpc	r25, r27
     8ee:	08 f4       	brcc	.+2      	; 0x8f2 <CheckPins+0x626>
     8f0:	fd c0       	rjmp	.+506    	; 0xaec <__stack+0x1ed>
             goto savenresult; 		//component has no current => no Triac => abort
          }
          R_DDR = HiPinRL;		//TristatePin (Gate) to input 
     8f2:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) < 733) {
     8f4:	81 2f       	mov	r24, r17
     8f6:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
     8fa:	e2 e0       	ldi	r30, 0x02	; 2
     8fc:	8d 3d       	cpi	r24, 0xDD	; 221
     8fe:	9e 07       	cpc	r25, r30
     900:	08 f4       	brcc	.+2      	; 0x904 <__stack+0x5>
     902:	f4 c0       	rjmp	.+488    	; 0xaec <__stack+0x1ed>
             goto savenresult; 		//component has no current without base current => no Triac => abort
          }
          R_PORT = HiPinRL;		//switch R_L port for HighPin to VCC => switch off holding current 
     904:	c5 b8       	out	0x05, r12	; 5
          wait5ms();
     906:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <wait5ms>
          R_PORT = 0;			//switch R_L port for HighPin again to GND; Triac should now switched off
     90a:	15 b8       	out	0x05, r1	; 5
          if(W5msReadADC(HighPin) > 244) {
     90c:	81 2f       	mov	r24, r17
     90e:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
     912:	85 3f       	cpi	r24, 0xF5	; 245
     914:	91 05       	cpc	r25, r1
     916:	08 f0       	brcs	.+2      	; 0x91a <__stack+0x1b>
     918:	e9 c0       	rjmp	.+466    	; 0xaec <__stack+0x1ed>
             goto savenresult;		//measure voltage at the High-Pin (probably A2) ;
                                	//if to high, component is not switched off => no Triac, abort
         }
         PartFound = PART_TRIAC;
     91a:	84 e0       	ldi	r24, 0x04	; 4
     91c:	80 93 09 01 	sts	0x0109, r24
         PartReady = 1;
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	80 93 06 01 	sts	0x0106, r24
         goto savenresult;
     926:	e2 c0       	rjmp	.+452    	; 0xaec <__stack+0x1ed>
        }
      //Test if NPN Transistor or MOSFET
      // ADC_DDR = LoADCm;	//Low-Pin to output 0V
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
     928:	0c 29       	or	r16, r12
     92a:	04 b9       	out	0x04, r16	; 4
      R_PORT = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to VCC
     92c:	05 b9       	out	0x05, r16	; 5
      wait50ms();
     92e:	0e 94 e7 17 	call	0x2fce	; 0x2fce <wait50ms>
      adc.hp2 = ADCconfig.U_AVCC - ReadADC(HighPin);	//measure the voltage at the collector resistor 
     932:	60 90 40 01 	lds	r6, 0x0140
     936:	70 90 41 01 	lds	r7, 0x0141
     93a:	81 2f       	mov	r24, r17
     93c:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
     940:	68 1a       	sub	r6, r24
     942:	79 0a       	sbc	r7, r25
      adc.tp2 = ADCconfig.U_AVCC - ReadADC(TristatePin);	//measure the voltage at the base resistor 
     944:	a0 90 40 01 	lds	r10, 0x0140
     948:	b0 90 41 01 	lds	r11, 0x0141
     94c:	82 2d       	mov	r24, r2
     94e:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
     952:	a8 1a       	sub	r10, r24
     954:	b9 0a       	sbc	r11, r25
       lcd_space();
       lcd_data('T');
       lcd_data('P');
       lcd_string(utoa(adc.tp2,outval,10));
#endif
      if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     956:	80 91 09 01 	lds	r24, 0x0109
     95a:	82 50       	subi	r24, 0x02	; 2
     95c:	82 30       	cpi	r24, 0x02	; 2
     95e:	18 f4       	brcc	.+6      	; 0x966 <__stack+0x67>
         PartReady = 1;	//check, if test is already done once
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	80 93 06 01 	sts	0x0106, r24
      }
      trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.tp2 - ReadADC(LowPin);
     966:	80 90 06 01 	lds	r8, 0x0106
     96a:	99 24       	eor	r9, r9
     96c:	e0 90 40 01 	lds	r14, 0x0140
     970:	f0 90 41 01 	lds	r15, 0x0141
     974:	ea 18       	sub	r14, r10
     976:	fb 08       	sbc	r15, r11
     978:	83 2d       	mov	r24, r3
     97a:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
     97e:	f4 01       	movw	r30, r8
     980:	ee 0f       	add	r30, r30
     982:	ff 1f       	adc	r31, r31
     984:	ee 5a       	subi	r30, 0xAE	; 174
     986:	fe 4f       	sbci	r31, 0xFE	; 254
     988:	e8 1a       	sub	r14, r24
     98a:	f9 0a       	sbc	r15, r25
     98c:	f1 82       	std	Z+1, r15	; 0x01
     98e:	e0 82       	st	Z, r14

      //compute current amplification factor for common Emitter
      //hFE = B = Collector current / Base current
      if(adc.tp2 < 53) {
     990:	f5 e3       	ldi	r31, 0x35	; 53
     992:	af 16       	cp	r10, r31
     994:	b1 04       	cpc	r11, r1
     996:	18 f4       	brcc	.+6      	; 0x99e <__stack+0x9f>
#if DebugOut == 5
         lcd_data('<');
         lcd_data('5');
         lcd_data('3');
#endif
         adc.tp2 = 53;
     998:	85 e3       	ldi	r24, 0x35	; 53
     99a:	a8 2e       	mov	r10, r24
     99c:	b1 2c       	mov	r11, r1
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     99e:	e0 90 06 01 	lds	r14, 0x0106
     9a2:	ff 24       	eor	r15, r15
     9a4:	c3 01       	movw	r24, r6
     9a6:	a0 e0       	ldi	r26, 0x00	; 0
     9a8:	b0 e0       	ldi	r27, 0x00	; 0
     9aa:	8b 87       	std	Y+11, r24	; 0x0b
     9ac:	9c 87       	std	Y+12, r25	; 0x0c
     9ae:	ad 87       	std	Y+13, r26	; 0x0d
     9b0:	be 87       	std	Y+14, r27	; 0x0e
     9b2:	20 91 0b 01 	lds	r18, 0x010B
     9b6:	30 91 0c 01 	lds	r19, 0x010C
     9ba:	40 e0       	ldi	r20, 0x00	; 0
     9bc:	50 e0       	ldi	r21, 0x00	; 0
     9be:	60 e6       	ldi	r22, 0x60	; 96
     9c0:	77 eb       	ldi	r23, 0xB7	; 183
     9c2:	87 e4       	ldi	r24, 0x47	; 71
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
     9ca:	6b 85       	ldd	r22, Y+11	; 0x0b
     9cc:	7c 85       	ldd	r23, Y+12	; 0x0c
     9ce:	8d 85       	ldd	r24, Y+13	; 0x0d
     9d0:	9e 85       	ldd	r25, Y+14	; 0x0e
     9d2:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp2;	
     9d6:	95 01       	movw	r18, r10
     9d8:	40 e0       	ldi	r20, 0x00	; 0
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
#endif
         adc.tp2 = 53;
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     9e0:	f7 01       	movw	r30, r14
     9e2:	ee 0f       	add	r30, r30
     9e4:	ff 1f       	adc	r31, r31
     9e6:	ee 0f       	add	r30, r30
     9e8:	ff 1f       	adc	r31, r31
     9ea:	e6 5b       	subi	r30, 0xB6	; 182
     9ec:	fe 4f       	sbci	r31, 0xFE	; 254
     9ee:	20 83       	st	Z, r18
     9f0:	31 83       	std	Z+1, r19	; 0x01
     9f2:	42 83       	std	Z+2, r20	; 0x02
     9f4:	53 83       	std	Z+3, r21	; 0x03
      trans.hfe[PartReady] = ((adc.hp2 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
#endif
#ifdef COMMON_COLLECTOR
       //compare current amplification factor for common Collector (Emitter follower)
       // hFE = (Emitterstrom - Basisstrom) / Basisstrom
       if (c_hfe >  trans.hfe[PartReady]) {
     9f6:	8c 81       	ldd	r24, Y+4	; 0x04
     9f8:	9d 81       	ldd	r25, Y+5	; 0x05
     9fa:	ae 81       	ldd	r26, Y+6	; 0x06
     9fc:	bf 81       	ldd	r27, Y+7	; 0x07
     9fe:	28 17       	cp	r18, r24
     a00:	39 07       	cpc	r19, r25
     a02:	4a 07       	cpc	r20, r26
     a04:	5b 07       	cpc	r21, r27
     a06:	a8 f4       	brcc	.+42     	; 0xa32 <__stack+0x133>
          trans.hfe[PartReady] = c_hfe;
     a08:	80 83       	st	Z, r24
     a0a:	91 83       	std	Z+1, r25	; 0x01
     a0c:	a2 83       	std	Z+2, r26	; 0x02
     a0e:	b3 83       	std	Z+3, r27	; 0x03
          trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.lp1 - adc.tp1;
     a10:	f7 01       	movw	r30, r14
     a12:	ee 0f       	add	r30, r30
     a14:	ff 1f       	adc	r31, r31
     a16:	ee 5a       	subi	r30, 0xAE	; 174
     a18:	fe 4f       	sbci	r31, 0xFE	; 254
     a1a:	80 91 40 01 	lds	r24, 0x0140
     a1e:	90 91 41 01 	lds	r25, 0x0141
     a22:	84 19       	sub	r24, r4
     a24:	95 09       	sbc	r25, r5
     a26:	a9 89       	ldd	r26, Y+17	; 0x11
     a28:	ba 89       	ldd	r27, Y+18	; 0x12
     a2a:	8a 1b       	sub	r24, r26
     a2c:	9b 0b       	sbc	r25, r27
     a2e:	91 83       	std	Z+1, r25	; 0x01
     a30:	80 83       	st	Z, r24
       }
#endif

      if(adc.tp2 > 2557) {		// Basis-voltage R_H is low enough
     a32:	be ef       	ldi	r27, 0xFE	; 254
     a34:	ab 16       	cp	r10, r27
     a36:	b9 e0       	ldi	r27, 0x09	; 9
     a38:	bb 06       	cpc	r11, r27
     a3a:	38 f0       	brcs	.+14     	; 0xa4a <__stack+0x14b>
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
     a3c:	82 e0       	ldi	r24, 0x02	; 2
     a3e:	80 93 09 01 	sts	0x0109, r24
         PartMode = PART_MODE_NPN;
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	80 93 08 01 	sts	0x0108, r24
     a48:	51 c0       	rjmp	.+162    	; 0xaec <__stack+0x1ed>
      } else { // Basis has low current
         if((adc.lp_otr < 97) && (adc.hp2 > 3400)) {
     a4a:	e9 85       	ldd	r30, Y+9	; 0x09
     a4c:	fa 85       	ldd	r31, Y+10	; 0x0a
     a4e:	e1 36       	cpi	r30, 0x61	; 97
     a50:	f1 05       	cpc	r31, r1
     a52:	08 f0       	brcs	.+2      	; 0xa56 <__stack+0x157>
     a54:	4b c0       	rjmp	.+150    	; 0xaec <__stack+0x1ed>
     a56:	f9 e4       	ldi	r31, 0x49	; 73
     a58:	6f 16       	cp	r6, r31
     a5a:	fd e0       	ldi	r31, 0x0D	; 13
     a5c:	7f 06       	cpc	r7, r31
     a5e:	08 f4       	brcc	.+2      	; 0xa62 <__stack+0x163>
     a60:	45 c0       	rjmp	.+138    	; 0xaec <__stack+0x1ed>
            //if flow voltage in switched off mode low enough?
            //(since D-Mode-FET will be detected in error as E-Mode )
            PartFound = PART_FET;	//N-Kanal-MOSFET is found (Basis/Gate will Not be pulled down)
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	80 93 09 01 	sts	0x0109, r24
            PartMode = PART_MODE_N_E_MOS;
     a68:	82 e0       	ldi	r24, 0x02	; 2
     a6a:	80 93 08 01 	sts	0x0108, r24
            lcd_line3();
            lcd_data('N');
            lcd_data('F');
            wait1s();
#endif
            PinMSK = HiADCm & 7;
     a6e:	e9 80       	ldd	r14, Y+1	; 0x01
     a70:	27 e0       	ldi	r18, 0x07	; 7
     a72:	e2 22       	and	r14, r18
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
     a74:	82 2d       	mov	r24, r2
     a76:	80 64       	ori	r24, 0x40	; 64
     a78:	80 93 7c 00 	sts	0x007C, r24
            gthvoltage = 1;			// round up ((1*4)/9)
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	90 93 5f 01 	sts	0x015F, r25
     a84:	80 93 5e 01 	sts	0x015E, r24
     a88:	eb e0       	ldi	r30, 0x0B	; 11
     a8a:	ae 2e       	mov	r10, r30
            for(ii=0;ii<11;ii++) {
            	wdt_reset();
     a8c:	a8 95       	wdr
            	ChargePin10ms(TriPinRL,0);	// discharge Gate 10ms with RL 
     a8e:	8d 2d       	mov	r24, r13
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	0e 94 45 01 	call	0x28a	; 0x28a <ChargePin10ms>
                R_DDR = HiPinRL | TriPinRH;	// slowly charge Gate 
     a96:	04 b9       	out	0x04, r16	; 4
                R_PORT = HiPinRL | TriPinRH;
     a98:	05 b9       	out	0x05, r16	; 5
            	while ((ADC_PIN&PinMSK));  // Wait, until the MOSFET switch and Drain moved to low 
     a9a:	86 b1       	in	r24, 0x06	; 6
     a9c:	8e 21       	and	r24, r14
     a9e:	e9 f7       	brne	.-6      	; 0xa9a <__stack+0x19b>
                R_DDR = HiPinRL;
     aa0:	c4 b8       	out	0x04, r12	; 4
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
     aa2:	80 91 7a 00 	lds	r24, 0x007A
     aa6:	80 64       	ori	r24, 0x40	; 64
     aa8:	80 93 7a 00 	sts	0x007A, r24
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
     aac:	80 91 7a 00 	lds	r24, 0x007A
     ab0:	86 fd       	sbrc	r24, 6
     ab2:	fc cf       	rjmp	.-8      	; 0xaac <__stack+0x1ad>
            	gthvoltage += ADCW;		// add result of ADC
     ab4:	80 91 78 00 	lds	r24, 0x0078
     ab8:	90 91 79 00 	lds	r25, 0x0079
     abc:	20 91 5e 01 	lds	r18, 0x015E
     ac0:	30 91 5f 01 	lds	r19, 0x015F
     ac4:	82 0f       	add	r24, r18
     ac6:	93 1f       	adc	r25, r19
     ac8:	90 93 5f 01 	sts	0x015F, r25
     acc:	80 93 5e 01 	sts	0x015E, r24
     ad0:	aa 94       	dec	r10
#endif
            PinMSK = HiADCm & 7;
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
            gthvoltage = 1;			// round up ((1*4)/9)
            for(ii=0;ii<11;ii++) {
     ad2:	e1 f6       	brne	.-72     	; 0xa8c <__stack+0x18d>
            	gthvoltage += ADCW;		// add result of ADC
#if DebugOut == 5
                lcd_data('.');
#endif
            }
            gthvoltage *= 4;	//is equal to 44 * ADCW
     ad4:	88 0f       	add	r24, r24
     ad6:	99 1f       	adc	r25, r25
     ad8:	88 0f       	add	r24, r24
     ada:	99 1f       	adc	r25, r25
            gthvoltage /= 9;	//scale to mV
     adc:	69 e0       	ldi	r22, 0x09	; 9
     ade:	70 e0       	ldi	r23, 0x00	; 0
     ae0:	0e 94 a1 18 	call	0x3142	; 0x3142 <__udivmodhi4>
     ae4:	70 93 5f 01 	sts	0x015F, r23
     ae8:	60 93 5e 01 	sts	0x015E, r22
         }
      }
savenresult:
      trans.b = TristatePin;	// save Pin-constellation
     aec:	20 92 56 01 	sts	0x0156, r2
      trans.c = HighPin;
     af0:	10 93 57 01 	sts	0x0157, r17
      trans.e = LowPin;
     af4:	30 92 58 01 	sts	0x0158, r3
   } // end component conduct => npn
   ADC_DDR = TXD_MSK;		// switch all ADC-Ports to input
     af8:	88 e0       	ldi	r24, 0x08	; 8
     afa:	87 b9       	out	0x07, r24	; 7
   ADC_PORT = TXD_VAL;		// switch all ADC-Ports to 0 (no Pull up)
     afc:	88 b9       	out	0x08, r24	; 8
   //Fertig
   //end das component has no connection between HighPin and LowPin
   goto widmes;
     afe:	69 c0       	rjmp	.+210    	; 0xbd2 <__stack+0x2d3>
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
     b00:	88 e0       	ldi	r24, 0x08	; 8
     b02:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;	//Low-Pin fix to GND
     b04:	3b 81       	ldd	r19, Y+3	; 0x03
     b06:	37 b9       	out	0x07, r19	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     b08:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
     b0a:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
     b0c:	8d 2d       	mov	r24, r13
     b0e:	61 e0       	ldi	r22, 0x01	; 1
     b10:	0e 94 45 01 	call	0x28a	; 0x28a <ChargePin10ms>
  adc.lp_otr = W5msReadADC(HighPin) - ReadADC(LowPin);
     b14:	81 2f       	mov	r24, r17
     b16:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
     b1a:	4c 01       	movw	r8, r24
     b1c:	83 2d       	mov	r24, r3
     b1e:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
     b22:	88 1a       	sub	r8, r24
     b24:	99 0a       	sbc	r9, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
     b26:	88 85       	ldd	r24, Y+8	; 0x08
     b28:	84 b9       	out	0x04, r24	; 4
  R_PORT = HiPinRH;
     b2a:	85 b9       	out	0x05, r24	; 5
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
     b2c:	81 2f       	mov	r24, r17
     b2e:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
     b32:	5c 01       	movw	r10, r24

  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     b34:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
     b36:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
     b38:	8d 2d       	mov	r24, r13
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	0e 94 45 01 	call	0x28a	; 0x28a <ChargePin10ms>
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
     b40:	81 2f       	mov	r24, r17
     b42:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
     b46:	7c 01       	movw	r14, r24
     b48:	83 2d       	mov	r24, r3
     b4a:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
     b4e:	e8 1a       	sub	r14, r24
     b50:	f9 0a       	sbc	r15, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
     b52:	98 85       	ldd	r25, Y+8	; 0x08
     b54:	94 b9       	out	0x04, r25	; 4
  R_PORT = HiPinRH;
     b56:	95 b9       	out	0x05, r25	; 5
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
     b58:	81 2f       	mov	r24, r17
     b5a:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
     b5e:	e8 14       	cp	r14, r8
     b60:	f9 04       	cpc	r15, r9
     b62:	18 f0       	brcs	.+6      	; 0xb6a <__stack+0x26b>
  R_PORT = HiPinRL;
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
  R_PORT = HiPinRH;
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
     b64:	a8 2e       	mov	r10, r24
     b66:	b9 2e       	mov	r11, r25
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
     b68:	47 01       	movw	r8, r14
  lcd_string(utoa(adc.hp3,outval,10));
  lcd_space();
  wait1s();
#endif

  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
     b6a:	c4 01       	movw	r24, r8
     b6c:	87 59       	subi	r24, 0x97	; 151
     b6e:	90 40       	sbci	r25, 0x00	; 0
     b70:	a1 e1       	ldi	r26, 0x11	; 17
     b72:	89 38       	cpi	r24, 0x89	; 137
     b74:	9a 07       	cpc	r25, r26
     b76:	68 f5       	brcc	.+90     	; 0xbd2 <__stack+0x2d3>
     b78:	c5 01       	movw	r24, r10
     b7a:	63 e0       	ldi	r22, 0x03	; 3
     b7c:	96 95       	lsr	r25
     b7e:	87 95       	ror	r24
     b80:	6a 95       	dec	r22
     b82:	e1 f7       	brne	.-8      	; 0xb7c <__stack+0x27d>
     b84:	8a 0d       	add	r24, r10
     b86:	9b 1d       	adc	r25, r11
     b88:	88 15       	cp	r24, r8
     b8a:	99 05       	cpc	r25, r9
     b8c:	10 f5       	brcc	.+68     	; 0xbd2 <__stack+0x2d3>
     b8e:	53 e0       	ldi	r21, 0x03	; 3
     b90:	aa 0c       	add	r10, r10
     b92:	bb 1c       	adc	r11, r11
     b94:	5a 95       	dec	r21
     b96:	e1 f7       	brne	.-8      	; 0xb90 <__stack+0x291>
     b98:	8a 14       	cp	r8, r10
     b9a:	9b 04       	cpc	r9, r11
     b9c:	d0 f4       	brcc	.+52     	; 0xbd2 <__stack+0x2d3>
     //voltage is above 0,15V and below 4,64V => Ok
     if((PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
     b9e:	80 91 09 01 	lds	r24, 0x0109
     ba2:	88 23       	and	r24, r24
     ba4:	11 f0       	breq	.+4      	; 0xbaa <__stack+0x2ab>
     ba6:	86 30       	cpi	r24, 0x06	; 6
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__stack+0x2b1>
        PartFound = PART_DIODE;	//mark for diode only, if no other component is found
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	80 93 09 01 	sts	0x0109, r24
				//since there is a problem with Transistors with a protection diode
#if DebugOut == 4
        lcd_data('D');
#endif
     }
     diodes[NumOfDiodes].Anode = HighPin;
     bb0:	80 91 07 01 	lds	r24, 0x0107
     bb4:	e8 2f       	mov	r30, r24
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	ee 0f       	add	r30, r30
     bba:	ff 1f       	adc	r31, r31
     bbc:	ee 0f       	add	r30, r30
     bbe:	ff 1f       	adc	r31, r31
     bc0:	ed 59       	subi	r30, 0x9D	; 157
     bc2:	fe 4f       	sbci	r31, 0xFE	; 254
     bc4:	10 83       	st	Z, r17
     diodes[NumOfDiodes].Cathode = LowPin;
     bc6:	31 82       	std	Z+1, r3	; 0x01
     diodes[NumOfDiodes].Voltage = adc.hp1;	// voltage in Millivolt 
     bc8:	93 82       	std	Z+3, r9	; 0x03
     bca:	82 82       	std	Z+2, r8	; 0x02
     NumOfDiodes++;
     bcc:	8f 5f       	subi	r24, 0xFF	; 255
     bce:	80 93 07 01 	sts	0x0107, r24
#endif

widmes:
#ifdef R_MESS
  // resistor measurement
  wdt_reset();
     bd2:	a8 95       	wdr
// U_SCALE can be set to 4 for better resolution of ReadADC result
 #if U_SCALE != 1
  ADCconfig.U_AVCC *= U_SCALE;	// scale to higher resolution, mV scale is not required
     bd4:	80 91 40 01 	lds	r24, 0x0140
     bd8:	90 91 41 01 	lds	r25, 0x0141
     bdc:	88 0f       	add	r24, r24
     bde:	99 1f       	adc	r25, r25
     be0:	88 0f       	add	r24, r24
     be2:	99 1f       	adc	r25, r25
     be4:	90 93 41 01 	sts	0x0141, r25
     be8:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.U_Bandgap *= U_SCALE;
     bec:	80 91 3e 01 	lds	r24, 0x013E
     bf0:	90 91 3f 01 	lds	r25, 0x013F
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	90 93 3f 01 	sts	0x013F, r25
     c00:	80 93 3e 01 	sts	0x013E, r24
 #endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = R_ANZ_MESS;	// switch to special number of repetitions
     c04:	8e eb       	ldi	r24, 0xBE	; 190
     c06:	80 93 3c 01 	sts	0x013C, r24
#endif
  ADC_PORT = TXD_VAL;
     c0a:	88 e0       	ldi	r24, 0x08	; 8
     c0c:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
     c0e:	bb 81       	ldd	r27, Y+3	; 0x03
     c10:	b7 b9       	out	0x07, r27	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     c12:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;	
     c14:	c5 b8       	out	0x05, r12	; 5
  adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     c16:	83 2d       	mov	r24, r3
     c18:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
     c1c:	5c 01       	movw	r10, r24
  adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     c1e:	81 2f       	mov	r24, r17
     c20:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
     c24:	2c 01       	movw	r4, r24
  if (adc.tp1 > adc.hp1) {
     adc.tp1 = adc.hp1;
  }
  R_PORT = 0;
     c26:	15 b8       	out	0x05, r1	; 5
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (GND)
     c28:	e8 85       	ldd	r30, Y+8	; 0x08
     c2a:	e4 b9       	out	0x04, r30	; 4
  adc.hp2 = W5msReadADC(HighPin);	// read voltage, should be down
     c2c:	81 2f       	mov	r24, r17
     c2e:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
  if (adc.hp2 > (20*U_SCALE)) {
     c32:	81 35       	cpi	r24, 0x51	; 81
     c34:	91 05       	cpc	r25, r1
     c36:	08 f0       	brcs	.+2      	; 0xc3a <__stack+0x33b>
     c38:	88 c1       	rjmp	.+784    	; 0xf4a <__stack+0x64b>
     lcd_string(utoa(adc.hp2, outval, 10));
     lcd_space();
 #endif
     goto testend;
  }
  R_PORT = HiPinRH;		//switch R_H for High-Pin to VCC
     c3a:	f8 85       	ldd	r31, Y+8	; 0x08
     c3c:	f5 b9       	out	0x05, r31	; 5
  adc.hp2 = W5msReadADC(HighPin);	// voltage at resistor Rx with R_H
     c3e:	81 2f       	mov	r24, r17
     c40:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
     c44:	6c 01       	movw	r12, r24

  ADC_DDR = HiADCm;		//switch High-Pin to output
     c46:	29 81       	ldd	r18, Y+1	; 0x01
     c48:	27 b9       	out	0x07, r18	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
     c4a:	28 b9       	out	0x08, r18	; 8
  R_PORT = 0;
     c4c:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
     c4e:	3a 81       	ldd	r19, Y+2	; 0x02
     c50:	34 b9       	out	0x04, r19	; 4
  adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     c52:	81 2f       	mov	r24, r17
     c54:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
     c58:	4c 01       	movw	r8, r24
  adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     c5a:	83 2d       	mov	r24, r3
     c5c:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
     c60:	7c 01       	movw	r14, r24
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = MEM_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	88 0f       	add	r24, r24
  adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
  adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
  if (adc.tp2 < adc.lp1) {
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
     c66:	84 b9       	out	0x04, r24	; 4
  adc.lp2 = W5msReadADC(LowPin);
     c68:	83 2d       	mov	r24, r3
     c6a:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
     c6e:	3c 01       	movw	r6, r24
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
     c70:	80 ec       	ldi	r24, 0xC0	; 192
     c72:	48 16       	cp	r4, r24
     c74:	84 e4       	ldi	r24, 0x44	; 68
     c76:	58 06       	cpc	r5, r24
     c78:	30 f4       	brcc	.+12     	; 0xc86 <__stack+0x387>
     c7a:	95 e8       	ldi	r25, 0x85	; 133
     c7c:	c9 16       	cp	r12, r25
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	d9 06       	cpc	r13, r25
     c82:	38 f0       	brcs	.+14     	; 0xc92 <__stack+0x393>
     c84:	62 c1       	rjmp	.+708    	; 0xf4a <__stack+0x64b>
     lcd_data('F');
 #endif
     goto testend; 
  }
//    if((adc.hp2 + (adc.hp2 / 61)) < adc.hp1)
  if (adc.hp2 < (4972*U_SCALE)) { 
     c86:	a0 eb       	ldi	r26, 0xB0	; 176
     c88:	ca 16       	cp	r12, r26
     c8a:	ad e4       	ldi	r26, 0x4D	; 77
     c8c:	da 06       	cpc	r13, r26
     c8e:	08 f0       	brcs	.+2      	; 0xc92 <__stack+0x393>
     c90:	5c c1       	rjmp	.+696    	; 0xf4a <__stack+0x64b>
     // voltage breaks down with low test current and it is not nearly shorted  => resistor
//     if (adc.lp1 < 120) { // take measurement with R_H 
     if (adc.lp1 < (169*U_SCALE)) { // take measurement with R_H 
     c92:	b4 ea       	ldi	r27, 0xA4	; 164
     c94:	eb 16       	cp	r14, r27
     c96:	b2 e0       	ldi	r27, 0x02	; 2
     c98:	fb 06       	cpc	r15, r27
     c9a:	08 f0       	brcs	.+2      	; 0xc9e <__stack+0x39f>
     c9c:	76 c0       	rjmp	.+236    	; 0xd8a <__stack+0x48b>
        ii = 'H';
        if (adc.lp2 < (38*U_SCALE)) {
     c9e:	e8 e9       	ldi	r30, 0x98	; 152
     ca0:	6e 16       	cp	r6, r30
     ca2:	71 04       	cpc	r7, r1
     ca4:	08 f4       	brcc	.+2      	; 0xca8 <__stack+0x3a9>
     ca6:	51 c1       	rjmp	.+674    	; 0xf4a <__stack+0x64b>
        }
        // two measurements with R_H resistors (470k) are made:
        // lirx1 (measurement at HighPin)
//        ukorr = (int)(ADCconfig.U_AVCC - adc.hp2) / (ADCconfig.U_AVCC/(7*U_SCALE)) + (2*U_SCALE);
//        adc.hp2 += ukorr;
        lirx1 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)adc.hp2 / ((ADCconfig.U_AVCC*U_SCALE) - adc.hp2);
     ca8:	e0 90 40 01 	lds	r14, 0x0140
     cac:	f0 90 41 01 	lds	r15, 0x0141
     cb0:	b6 01       	movw	r22, r12
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	28 e9       	ldi	r18, 0x98	; 152
     cb8:	37 eb       	ldi	r19, 0xB7	; 183
     cba:	40 e0       	ldi	r20, 0x00	; 0
     cbc:	50 e0       	ldi	r21, 0x00	; 0
     cbe:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
     cc2:	97 01       	movw	r18, r14
     cc4:	22 0f       	add	r18, r18
     cc6:	33 1f       	adc	r19, r19
     cc8:	22 0f       	add	r18, r18
     cca:	33 1f       	adc	r19, r19
     ccc:	2c 19       	sub	r18, r12
     cce:	3d 09       	sbc	r19, r13
     cd0:	40 e0       	ldi	r20, 0x00	; 0
     cd2:	50 e0       	ldi	r21, 0x00	; 0
     cd4:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
     cd8:	49 01       	movw	r8, r18
     cda:	5a 01       	movw	r10, r20
        // lirx2 (measurement at LowPin)
//        ukorr = (int)(ADCconfig.U_AVCC/2 - adc.lp2) / (ADCconfig.U_AVCC/(12*U_SCALE));
//        adc.lp2 += ukorr;
        lirx2 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)(ADCconfig.U_AVCC - adc.lp2) / adc.lp2;
     cdc:	e6 18       	sub	r14, r6
     cde:	f7 08       	sbc	r15, r7
     ce0:	b7 01       	movw	r22, r14
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	28 e9       	ldi	r18, 0x98	; 152
     ce8:	37 eb       	ldi	r19, 0xB7	; 183
     cea:	40 e0       	ldi	r20, 0x00	; 0
     cec:	50 e0       	ldi	r21, 0x00	; 0
     cee:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
     cf2:	93 01       	movw	r18, r6
     cf4:	40 e0       	ldi	r20, 0x00	; 0
     cf6:	50 e0       	ldi	r21, 0x00	; 0
     cf8:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
#define FAKT_LOW 2		//resolution is about twice as good
#else
#define FAKT_LOW 4		//resolution is about four times better
#endif
#ifdef AUTOSCALE_ADC
        if (adc.hp2 < U_INT_LIMIT) {
     cfc:	f8 e7       	ldi	r31, 0x78	; 120
     cfe:	cf 16       	cp	r12, r31
     d00:	ff e0       	ldi	r31, 0x0F	; 15
     d02:	df 06       	cpc	r13, r31
     d04:	70 f4       	brcc	.+28     	; 0xd22 <__stack+0x423>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_H measurements
     d06:	c5 01       	movw	r24, r10
     d08:	b4 01       	movw	r22, r8
     d0a:	b2 e0       	ldi	r27, 0x02	; 2
     d0c:	66 0f       	add	r22, r22
     d0e:	77 1f       	adc	r23, r23
     d10:	88 1f       	adc	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	ba 95       	dec	r27
     d16:	d1 f7       	brne	.-12     	; 0xd0c <__stack+0x40d>
     d18:	62 0f       	add	r22, r18
     d1a:	73 1f       	adc	r23, r19
     d1c:	84 1f       	adc	r24, r20
     d1e:	95 1f       	adc	r25, r21
     d20:	12 c0       	rjmp	.+36     	; 0xd46 <__stack+0x447>
        } else if (adc.lp2 < U_INT_LIMIT){
     d22:	88 e7       	ldi	r24, 0x78	; 120
     d24:	68 16       	cp	r6, r24
     d26:	8f e0       	ldi	r24, 0x0F	; 15
     d28:	78 06       	cpc	r7, r24
     d2a:	a0 f4       	brcc	.+40     	; 0xd54 <__stack+0x455>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
     d2c:	ca 01       	movw	r24, r20
     d2e:	b9 01       	movw	r22, r18
     d30:	a2 e0       	ldi	r26, 0x02	; 2
     d32:	66 0f       	add	r22, r22
     d34:	77 1f       	adc	r23, r23
     d36:	88 1f       	adc	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	aa 95       	dec	r26
     d3c:	d1 f7       	brne	.-12     	; 0xd32 <__stack+0x433>
     d3e:	68 0d       	add	r22, r8
     d40:	79 1d       	adc	r23, r9
     d42:	8a 1d       	adc	r24, r10
     d44:	9b 1d       	adc	r25, r11
     d46:	25 e0       	ldi	r18, 0x05	; 5
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	40 e0       	ldi	r20, 0x00	; 0
     d4c:	50 e0       	ldi	r21, 0x00	; 0
     d4e:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
     d52:	08 c0       	rjmp	.+16     	; 0xd64 <__stack+0x465>
        } else 
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_H measurements
     d54:	28 0d       	add	r18, r8
     d56:	39 1d       	adc	r19, r9
     d58:	4a 1d       	adc	r20, r10
     d5a:	5b 1d       	adc	r21, r11
     d5c:	56 95       	lsr	r21
     d5e:	47 95       	ror	r20
     d60:	37 95       	ror	r19
     d62:	27 95       	ror	r18
        }
        lrx1 *= 100;
     d64:	ca 01       	movw	r24, r20
     d66:	b9 01       	movw	r22, r18
     d68:	24 e6       	ldi	r18, 0x64	; 100
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	40 e0       	ldi	r20, 0x00	; 0
     d6e:	50 e0       	ldi	r21, 0x00	; 0
     d70:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
     d74:	6b 01       	movw	r12, r22
     d76:	7c 01       	movw	r14, r24
        lrx1 += RH_OFFSET;			// add constant for correction of systematic error
     d78:	8c ea       	ldi	r24, 0xAC	; 172
     d7a:	9d e0       	ldi	r25, 0x0D	; 13
     d7c:	a0 e0       	ldi	r26, 0x00	; 0
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	c8 0e       	add	r12, r24
     d82:	d9 1e       	adc	r13, r25
     d84:	ea 1e       	adc	r14, r26
     d86:	fb 1e       	adc	r15, r27
     d88:	77 c0       	rjmp	.+238    	; 0xe78 <__stack+0x579>
     d8a:	c2 01       	movw	r24, r4
     d8c:	a4 14       	cp	r10, r4
     d8e:	b5 04       	cpc	r11, r5
     d90:	08 f4       	brcc	.+2      	; 0xd94 <__stack+0x495>
     d92:	c5 01       	movw	r24, r10
     d94:	67 01       	movw	r12, r14
     d96:	e8 14       	cp	r14, r8
     d98:	f9 04       	cpc	r15, r9
     d9a:	08 f4       	brcc	.+2      	; 0xd9e <__stack+0x49f>
     d9c:	64 01       	movw	r12, r8
     d9e:	3c 01       	movw	r6, r24
     da0:	84 15       	cp	r24, r4
     da2:	95 05       	cpc	r25, r5
     da4:	08 f4       	brcc	.+2      	; 0xda8 <__stack+0x4a9>
     da6:	32 01       	movw	r6, r4
        // lirx1 (measurement at HighPin)
#if 1
        if (adc.tp1 > adc.hp1) {
           adc.hp1 = adc.tp1;		//diff negativ is illegal
        }
        lirx1 =(unsigned long)RR680PL * (unsigned long)(adc.hp1 - adc.tp1) / (ADCconfig.U_AVCC - adc.hp1);
     da8:	b3 01       	movw	r22, r6
     daa:	68 1b       	sub	r22, r24
     dac:	79 0b       	sbc	r23, r25
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	20 91 0b 01 	lds	r18, 0x010B
     db6:	30 91 0c 01 	lds	r19, 0x010C
     dba:	40 e0       	ldi	r20, 0x00	; 0
     dbc:	50 e0       	ldi	r21, 0x00	; 0
     dbe:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
     dc2:	20 91 40 01 	lds	r18, 0x0140
     dc6:	30 91 41 01 	lds	r19, 0x0141
     dca:	26 19       	sub	r18, r6
     dcc:	37 09       	sbc	r19, r7
     dce:	40 e0       	ldi	r20, 0x00	; 0
     dd0:	50 e0       	ldi	r21, 0x00	; 0
     dd2:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
     dd6:	49 01       	movw	r8, r18
     dd8:	5a 01       	movw	r10, r20
     dda:	26 01       	movw	r4, r12
     ddc:	ec 14       	cp	r14, r12
     dde:	fd 04       	cpc	r15, r13
     de0:	08 f4       	brcc	.+2      	; 0xde4 <__stack+0x4e5>
     de2:	27 01       	movw	r4, r14
        if (adc.tp2 < adc.lp1) {
           adc.lp1 = adc.tp2;		//diff negativ is illegal
        }
        // lirx2 (Measurement at LowPin)
        lirx2 =(unsigned long)RR680MI * (unsigned long)(adc.tp2 -adc.lp1) / adc.lp1;
     de4:	c4 18       	sub	r12, r4
     de6:	d5 08       	sbc	r13, r5
     de8:	b6 01       	movw	r22, r12
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	20 91 04 01 	lds	r18, 0x0104
     df2:	30 91 05 01 	lds	r19, 0x0105
     df6:	40 e0       	ldi	r20, 0x00	; 0
     df8:	50 e0       	ldi	r21, 0x00	; 0
     dfa:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
     dfe:	92 01       	movw	r18, r4
     e00:	40 e0       	ldi	r20, 0x00	; 0
     e02:	50 e0       	ldi	r21, 0x00	; 0
     e04:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
        if (lirx2 > (RR680PL - R_L_VAL))  lirx2 -= (RR680PL - R_L_VAL);
        else     lirx2 = 0;
#endif

#ifdef AUTOSCALE_ADC
        if (adc.hp1 < U_INT_LIMIT) {
     e08:	98 e7       	ldi	r25, 0x78	; 120
     e0a:	69 16       	cp	r6, r25
     e0c:	9f e0       	ldi	r25, 0x0F	; 15
     e0e:	79 06       	cpc	r7, r25
     e10:	70 f4       	brcc	.+28     	; 0xe2e <__stack+0x52f>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_L measurements
     e12:	c5 01       	movw	r24, r10
     e14:	b4 01       	movw	r22, r8
     e16:	e2 e0       	ldi	r30, 0x02	; 2
     e18:	66 0f       	add	r22, r22
     e1a:	77 1f       	adc	r23, r23
     e1c:	88 1f       	adc	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	ea 95       	dec	r30
     e22:	d1 f7       	brne	.-12     	; 0xe18 <__stack+0x519>
     e24:	62 0f       	add	r22, r18
     e26:	73 1f       	adc	r23, r19
     e28:	84 1f       	adc	r24, r20
     e2a:	95 1f       	adc	r25, r21
     e2c:	12 c0       	rjmp	.+36     	; 0xe52 <__stack+0x553>
        } else if (adc.lp1 < U_INT_LIMIT) {
     e2e:	a8 e7       	ldi	r26, 0x78	; 120
     e30:	4a 16       	cp	r4, r26
     e32:	af e0       	ldi	r26, 0x0F	; 15
     e34:	5a 06       	cpc	r5, r26
     e36:	b0 f4       	brcc	.+44     	; 0xe64 <__stack+0x565>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
     e38:	ca 01       	movw	r24, r20
     e3a:	b9 01       	movw	r22, r18
     e3c:	52 e0       	ldi	r21, 0x02	; 2
     e3e:	66 0f       	add	r22, r22
     e40:	77 1f       	adc	r23, r23
     e42:	88 1f       	adc	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	5a 95       	dec	r21
     e48:	d1 f7       	brne	.-12     	; 0xe3e <__stack+0x53f>
     e4a:	68 0d       	add	r22, r8
     e4c:	79 1d       	adc	r23, r9
     e4e:	8a 1d       	adc	r24, r10
     e50:	9b 1d       	adc	r25, r11
     e52:	25 e0       	ldi	r18, 0x05	; 5
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	40 e0       	ldi	r20, 0x00	; 0
     e58:	50 e0       	ldi	r21, 0x00	; 0
     e5a:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
     e5e:	69 01       	movw	r12, r18
     e60:	7a 01       	movw	r14, r20
     e62:	0a c0       	rjmp	.+20     	; 0xe78 <__stack+0x579>
        } else
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_L measurements
     e64:	69 01       	movw	r12, r18
     e66:	7a 01       	movw	r14, r20
     e68:	c8 0c       	add	r12, r8
     e6a:	d9 1c       	adc	r13, r9
     e6c:	ea 1c       	adc	r14, r10
     e6e:	fb 1c       	adc	r15, r11
     e70:	f6 94       	lsr	r15
     e72:	e7 94       	ror	r14
     e74:	d7 94       	ror	r13
     e76:	c7 94       	ror	r12
  lcd_line4();
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
     e78:	80 91 09 01 	lds	r24, 0x0109
     e7c:	82 30       	cpi	r24, 0x02	; 2
     e7e:	18 f0       	brcs	.+6      	; 0xe86 <__stack+0x587>
     e80:	86 30       	cpi	r24, 0x06	; 6
     e82:	09 f0       	breq	.+2      	; 0xe86 <__stack+0x587>
     e84:	62 c0       	rjmp	.+196    	; 0xf4a <__stack+0x64b>
        for (ii=0; ii<ResistorsFound; ii++) {
     e86:	50 91 59 01 	lds	r21, 0x0159
     e8a:	40 e0       	ldi	r20, 0x00	; 0
           // search measurements with inverse polarity 
           thisR = &resis[ii];
           if (thisR->rt != TristatePin) {
     e8c:	8b e0       	ldi	r24, 0x0B	; 11
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	3e c0       	rjmp	.+124    	; 0xf0e <__stack+0x60f>
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
           // search measurements with inverse polarity 
           thisR = &resis[ii];
     e92:	24 2f       	mov	r18, r20
     e94:	30 e0       	ldi	r19, 0x00	; 0
           if (thisR->rt != TristatePin) {
     e96:	28 9f       	mul	r18, r24
     e98:	f0 01       	movw	r30, r0
     e9a:	29 9f       	mul	r18, r25
     e9c:	f0 0d       	add	r31, r0
     e9e:	38 9f       	mul	r19, r24
     ea0:	f0 0d       	add	r31, r0
     ea2:	11 24       	eor	r1, r1
     ea4:	e5 5e       	subi	r30, 0xE5	; 229
     ea6:	fe 4f       	sbci	r31, 0xFE	; 254
     ea8:	22 85       	ldd	r18, Z+10	; 0x0a
     eaa:	22 15       	cp	r18, r2
     eac:	11 f0       	breq	.+4      	; 0xeb2 <__stack+0x5b3>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
     eae:	4f 5f       	subi	r20, 0xFF	; 255
     eb0:	2e c0       	rjmp	.+92     	; 0xf0e <__stack+0x60f>
           if (thisR->rt != TristatePin) {
              continue;
           }
           // must be measurement with inverse polarity 
           // resolution is 0.1 Ohm, 1 Ohm = 10 !
           lirx1 = (labs((long)lrx1 - (long)thisR->rx) * 10) / (lrx1 + thisR->rx + 100);
     eb2:	80 80       	ld	r8, Z
     eb4:	91 80       	ldd	r9, Z+1	; 0x01
     eb6:	a2 80       	ldd	r10, Z+2	; 0x02
     eb8:	b3 80       	ldd	r11, Z+3	; 0x03
     eba:	c7 01       	movw	r24, r14
     ebc:	b6 01       	movw	r22, r12
     ebe:	68 19       	sub	r22, r8
     ec0:	79 09       	sbc	r23, r9
     ec2:	8a 09       	sbc	r24, r10
     ec4:	9b 09       	sbc	r25, r11
     ec6:	97 ff       	sbrs	r25, 7
     ec8:	07 c0       	rjmp	.+14     	; 0xed8 <__stack+0x5d9>
     eca:	90 95       	com	r25
     ecc:	80 95       	com	r24
     ece:	70 95       	com	r23
     ed0:	61 95       	neg	r22
     ed2:	7f 4f       	sbci	r23, 0xFF	; 255
     ed4:	8f 4f       	sbci	r24, 0xFF	; 255
     ed6:	9f 4f       	sbci	r25, 0xFF	; 255
     ed8:	2a e0       	ldi	r18, 0x0A	; 10
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	40 e0       	ldi	r20, 0x00	; 0
     ede:	50 e0       	ldi	r21, 0x00	; 0
     ee0:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
     ee4:	a5 01       	movw	r20, r10
     ee6:	94 01       	movw	r18, r8
     ee8:	2c 59       	subi	r18, 0x9C	; 156
     eea:	3f 4f       	sbci	r19, 0xFF	; 255
     eec:	4f 4f       	sbci	r20, 0xFF	; 255
     eee:	5f 4f       	sbci	r21, 0xFF	; 255
     ef0:	2c 0d       	add	r18, r12
     ef2:	3d 1d       	adc	r19, r13
     ef4:	4e 1d       	adc	r20, r14
     ef6:	5f 1d       	adc	r21, r15
     ef8:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
           if (lirx1  > 0) {
     efc:	21 15       	cp	r18, r1
     efe:	31 05       	cpc	r19, r1
     f00:	41 05       	cpc	r20, r1
     f02:	51 05       	cpc	r21, r1
     f04:	11 f5       	brne	.+68     	; 0xf4a <__stack+0x64b>
              DisplayValue(lirx1,-1,LCD_CHAR_OMEGA,3)
              lcd_space();
 #endif
              goto testend; // <10% mismatch
           }
           PartFound = PART_RESISTOR;
     f06:	86 e0       	ldi	r24, 0x06	; 6
     f08:	80 93 09 01 	sts	0x0109, r24
           goto testend;
     f0c:	1e c0       	rjmp	.+60     	; 0xf4a <__stack+0x64b>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
     f0e:	45 17       	cp	r20, r21
     f10:	08 f4       	brcc	.+2      	; 0xf14 <__stack+0x615>
     f12:	bf cf       	rjmp	.-130    	; 0xe92 <__stack+0x593>
           }
           PartFound = PART_RESISTOR;
           goto testend;
        } // end for
        // no same resistor with the same Tristate-Pin found, new one
        thisR = &resis[ResistorsFound];		// pointer to a free resistor structure
     f14:	25 2f       	mov	r18, r21
     f16:	30 e0       	ldi	r19, 0x00	; 0
        thisR->rx = lrx1;		// save resistor value
     f18:	8b e0       	ldi	r24, 0x0B	; 11
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	28 9f       	mul	r18, r24
     f1e:	f0 01       	movw	r30, r0
     f20:	29 9f       	mul	r18, r25
     f22:	f0 0d       	add	r31, r0
     f24:	38 9f       	mul	r19, r24
     f26:	f0 0d       	add	r31, r0
     f28:	11 24       	eor	r1, r1
     f2a:	e5 5e       	subi	r30, 0xE5	; 229
     f2c:	fe 4f       	sbci	r31, 0xFE	; 254
     f2e:	c0 82       	st	Z, r12
     f30:	d1 82       	std	Z+1, r13	; 0x01
     f32:	e2 82       	std	Z+2, r14	; 0x02
     f34:	f3 82       	std	Z+3, r15	; 0x03
#if FLASHEND > 0x1fff
        thisR->lx = 0;			// no inductance
     f36:	14 82       	std	Z+4, r1	; 0x04
     f38:	15 82       	std	Z+5, r1	; 0x05
     f3a:	16 82       	std	Z+6, r1	; 0x06
     f3c:	17 82       	std	Z+7, r1	; 0x07
#endif
        thisR->ra = LowPin;		// save Pin numbers
     f3e:	30 86       	std	Z+8, r3	; 0x08
        thisR->rb = HighPin;
     f40:	11 87       	std	Z+9, r17	; 0x09
        thisR->rt = TristatePin;	// Tristate is saved for easier search of inverse measurement
     f42:	22 86       	std	Z+10, r2	; 0x0a
        ResistorsFound++;			// 1 more resistor found
     f44:	5f 5f       	subi	r21, 0xFF	; 255
     f46:	50 93 59 01 	sts	0x0159, r21
     }
  }
#endif
  testend:
#if U_SCALE != 1
  ADCconfig.U_AVCC /= U_SCALE;		// scale back to mV resolution
     f4a:	80 91 40 01 	lds	r24, 0x0140
     f4e:	90 91 41 01 	lds	r25, 0x0141
     f52:	96 95       	lsr	r25
     f54:	87 95       	ror	r24
     f56:	96 95       	lsr	r25
     f58:	87 95       	ror	r24
     f5a:	90 93 41 01 	sts	0x0141, r25
     f5e:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.U_Bandgap /= U_SCALE;
     f62:	80 91 3e 01 	lds	r24, 0x013E
     f66:	90 91 3f 01 	lds	r25, 0x013F
     f6a:	96 95       	lsr	r25
     f6c:	87 95       	ror	r24
     f6e:	96 95       	lsr	r25
     f70:	87 95       	ror	r24
     f72:	90 93 3f 01 	sts	0x013F, r25
     f76:	80 93 3e 01 	sts	0x013E, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = ANZ_MESS;		// switch back to standard number of repetition
     f7a:	89 e1       	ldi	r24, 0x19	; 25
     f7c:	80 93 3c 01 	sts	0x013C, r24
#ifdef DebugOut
#if DebugOut < 10
  wait2s();
#endif
#endif
  ADC_DDR = TXD_MSK;		// all ADC-Pins Input
     f80:	88 e0       	ldi	r24, 0x08	; 8
     f82:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// all ADC outputs to Ground, keine Pull up
     f84:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// all resistor-outputs to Input
     f86:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// all resistor-outputs to Ground, no Pull up
     f88:	15 b8       	out	0x05, r1	; 5
} // end CheckPins()
     f8a:	65 96       	adiw	r28, 0x15	; 21
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14
     fa2:	df 90       	pop	r13
     fa4:	cf 90       	pop	r12
     fa6:	bf 90       	pop	r11
     fa8:	af 90       	pop	r10
     faa:	9f 90       	pop	r9
     fac:	8f 90       	pop	r8
     fae:	7f 90       	pop	r7
     fb0:	6f 90       	pop	r6
     fb2:	5f 90       	pop	r5
     fb4:	4f 90       	pop	r4
     fb6:	3f 90       	pop	r3
     fb8:	2f 90       	pop	r2
     fba:	08 95       	ret

00000fbc <EntladePins>:

// first discharge any charge of capacitors
void EntladePins() {
     fbc:	af 92       	push	r10
     fbe:	bf 92       	push	r11
     fc0:	cf 92       	push	r12
     fc2:	df 92       	push	r13
     fc4:	ef 92       	push	r14
     fc6:	ff 92       	push	r15
     fc8:	0f 93       	push	r16
     fca:	1f 93       	push	r17
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	ba e0       	ldi	r27, 0x0A	; 10
     fd2:	cb 2e       	mov	r12, r27
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     fd4:	a8 e0       	ldi	r26, 0x08	; 8
     fd6:	da 2e       	mov	r13, r26
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     R_PORT = 0;			// R-outputs auf 0
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     fd8:	fa e2       	ldi	r31, 0x2A	; 42
     fda:	af 2e       	mov	r10, r31
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     fdc:	e5 e1       	ldi	r30, 0x15	; 21
     fde:	be 2e       	mov	r11, r30
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     fe0:	d7 b8       	out	0x07, r13	; 7
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     fe2:	d8 b8       	out	0x08, r13	; 8
     R_PORT = 0;			// R-outputs auf 0
     fe4:	15 b8       	out	0x05, r1	; 5
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     fe6:	a4 b8       	out	0x04, r10	; 4
     adcmv[0] = W5msReadADC(PC0);	// which voltage has Pin 1?
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
     fee:	8c 01       	movw	r16, r24
     adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
     ff6:	ec 01       	movw	r28, r24
     adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     ff8:	82 e0       	ldi	r24, 0x02	; 2
     ffa:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
     if ((PartFound == PART_CELL) || (adcmv[0] < CAP_EMPTY_LEVEL) & (adcmv[1] < CAP_EMPTY_LEVEL) & (adcmv[2] < CAP_EMPTY_LEVEL)) {
     ffe:	20 91 09 01 	lds	r18, 0x0109
    1002:	28 30       	cpi	r18, 0x08	; 8
    1004:	c1 f0       	breq	.+48     	; 0x1036 <EntladePins+0x7a>
    1006:	41 e0       	ldi	r20, 0x01	; 1
    1008:	c4 30       	cpi	r28, 0x04	; 4
    100a:	d1 05       	cpc	r29, r1
    100c:	08 f0       	brcs	.+2      	; 0x1010 <EntladePins+0x54>
    100e:	40 e0       	ldi	r20, 0x00	; 0
    1010:	21 e0       	ldi	r18, 0x01	; 1
    1012:	04 30       	cpi	r16, 0x04	; 4
    1014:	11 05       	cpc	r17, r1
    1016:	08 f0       	brcs	.+2      	; 0x101a <EntladePins+0x5e>
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	42 23       	and	r20, r18
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	21 e0       	ldi	r18, 0x01	; 1
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	84 30       	cpi	r24, 0x04	; 4
    1024:	91 05       	cpc	r25, r1
    1026:	10 f0       	brcs	.+4      	; 0x102c <EntladePins+0x70>
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	24 23       	and	r18, r20
    102e:	35 23       	and	r19, r21
    1030:	21 15       	cp	r18, r1
    1032:	31 05       	cpc	r19, r1
    1034:	21 f0       	breq	.+8      	; 0x103e <EntladePins+0x82>
        ADC_DDR = TXD_MSK;		// switch all ADC-Pins to input
    1036:	88 e0       	ldi	r24, 0x08	; 8
    1038:	87 b9       	out	0x07, r24	; 7
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
    103a:	14 b8       	out	0x04, r1	; 4
        return;
    103c:	4f c0       	rjmp	.+158    	; 0x10dc <EntladePins+0x120>
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
    103e:	23 e0       	ldi	r18, 0x03	; 3
    1040:	08 3e       	cpi	r16, 0xE8	; 232
    1042:	12 07       	cpc	r17, r18
    1044:	10 f0       	brcs	.+4      	; 0x104a <EntladePins+0x8e>
  uint8_t lop_cnt;		// loop counter
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
    1046:	28 e0       	ldi	r18, 0x08	; 8
    1048:	01 c0       	rjmp	.+2      	; 0x104c <EntladePins+0x90>
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
        return;
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
        adc_gnd |= (1<<PC0);	//Pin 1 directly to GND
    104a:	29 e0       	ldi	r18, 0x09	; 9
     }
     if (adcmv[1] < 1000) {
    104c:	33 e0       	ldi	r19, 0x03	; 3
    104e:	c8 3e       	cpi	r28, 0xE8	; 232
    1050:	d3 07       	cpc	r29, r19
    1052:	08 f4       	brcc	.+2      	; 0x1056 <EntladePins+0x9a>
        adc_gnd |= (1<<PC1);	//Pin 2 directly to GND
    1054:	22 60       	ori	r18, 0x02	; 2
     }
     if (adcmv[2] < 1000) {
    1056:	33 e0       	ldi	r19, 0x03	; 3
    1058:	88 3e       	cpi	r24, 0xE8	; 232
    105a:	93 07       	cpc	r25, r19
    105c:	08 f4       	brcc	.+2      	; 0x1060 <EntladePins+0xa4>
        adc_gnd |= (1<<PC2);	//Pin 3 directly to  GND
    105e:	24 60       	ori	r18, 0x04	; 4
     }
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time
    1060:	27 b9       	out	0x07, r18	; 7

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
    1062:	b4 b8       	out	0x04, r11	; 4
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    1064:	c0 e0       	ldi	r28, 0x00	; 0
    1066:	d0 e0       	ldi	r29, 0x00	; 0
        wdt_reset();
    1068:	a8 95       	wdr
        adcmv[0] = W20msReadADC(PC0);	// which voltage has Pin 1?
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	0e 94 03 18 	call	0x3006	; 0x3006 <W20msReadADC>
    1070:	7c 01       	movw	r14, r24
        adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
    1078:	8c 01       	movw	r16, r24
        adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
    107a:	82 e0       	ldi	r24, 0x02	; 2
    107c:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
        if (adcmv[0] < 1300) {
    1080:	24 e1       	ldi	r18, 0x14	; 20
    1082:	e2 16       	cp	r14, r18
    1084:	25 e0       	ldi	r18, 0x05	; 5
    1086:	f2 06       	cpc	r15, r18
    1088:	08 f4       	brcc	.+2      	; 0x108c <EntladePins+0xd0>
           ADC_DDR |= (1<<PC0);	// below 1.3V , switch directly with ADC-Port to GND
    108a:	38 9a       	sbi	0x07, 0	; 7
        }
        if (adcmv[1] < 1300) {
    108c:	35 e0       	ldi	r19, 0x05	; 5
    108e:	04 31       	cpi	r16, 0x14	; 20
    1090:	13 07       	cpc	r17, r19
    1092:	08 f4       	brcc	.+2      	; 0x1096 <EntladePins+0xda>
           ADC_DDR |= (1<<PC1);	// below 1.3V, switch directly with ADC-Port to GND
    1094:	39 9a       	sbi	0x07, 1	; 7
        }
        if (adcmv[2] < 1300) {
    1096:	25 e0       	ldi	r18, 0x05	; 5
    1098:	84 31       	cpi	r24, 0x14	; 20
    109a:	92 07       	cpc	r25, r18
    109c:	08 f4       	brcc	.+2      	; 0x10a0 <EntladePins+0xe4>
           ADC_DDR |= (1<<PC2);	// below 1.3V, switch directly with ADC-Port to GND
    109e:	3a 9a       	sbi	0x07, 2	; 7
        }
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
    10a0:	36 e0       	ldi	r19, 0x06	; 6
    10a2:	e3 16       	cp	r14, r19
    10a4:	f1 04       	cpc	r15, r1
    10a6:	30 f4       	brcc	.+12     	; 0x10b4 <EntladePins+0xf8>
    10a8:	06 30       	cpi	r16, 0x06	; 6
    10aa:	11 05       	cpc	r17, r1
    10ac:	18 f4       	brcc	.+6      	; 0x10b4 <EntladePins+0xf8>
    10ae:	86 30       	cpi	r24, 0x06	; 6
    10b0:	91 05       	cpc	r25, r1
    10b2:	38 f0       	brcs	.+14     	; 0x10c2 <EntladePins+0x106>

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    10b4:	21 96       	adiw	r28, 0x01	; 1
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	c4 3f       	cpi	r28, 0xF4	; 244
    10ba:	d8 07       	cpc	r29, r24
    10bc:	a9 f6       	brne	.-86     	; 0x1068 <EntladePins+0xac>
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
           break;
        }
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
    10be:	d0 92 09 01 	sts	0x0109, r13

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    10c2:	00 e0       	ldi	r16, 0x00	; 0
    10c4:	10 e0       	ldi	r17, 0x00	; 0
    10c6:	04 c0       	rjmp	.+8      	; 0x10d0 <EntladePins+0x114>
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
    10c8:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <wait1ms>
    10cc:	0f 5f       	subi	r16, 0xFF	; 255
    10ce:	1f 4f       	sbci	r17, 0xFF	; 255
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
    10d0:	0c 17       	cp	r16, r28
    10d2:	1d 07       	cpc	r17, r29
    10d4:	c8 f3       	brcs	.-14     	; 0x10c8 <EntladePins+0x10c>
    10d6:	ca 94       	dec	r12
  unsigned int clr_cnt;		// Clear Counter
  uint8_t lop_cnt;		// loop counter
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
    10d8:	09 f0       	breq	.+2      	; 0x10dc <EntladePins+0x120>
    10da:	82 cf       	rjmp	.-252    	; 0xfe0 <EntladePins+0x24>
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     }
  } // end while
 }
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	ff 90       	pop	r15
    10e6:	ef 90       	pop	r14
    10e8:	df 90       	pop	r13
    10ea:	cf 90       	pop	r12
    10ec:	bf 90       	pop	r11
    10ee:	af 90       	pop	r10
    10f0:	08 95       	ret

000010f2 <ReadInductance>:

unsigned long CombineII2Long( unsigned int ovcnt16, unsigned int tmpcnt); //tricky function to build unsigned long from two unsigned int values


//=================================================================
void ReadInductance(void) {
    10f2:	2f 92       	push	r2
    10f4:	3f 92       	push	r3
    10f6:	4f 92       	push	r4
    10f8:	5f 92       	push	r5
    10fa:	6f 92       	push	r6
    10fc:	7f 92       	push	r7
    10fe:	8f 92       	push	r8
    1100:	9f 92       	push	r9
    1102:	af 92       	push	r10
    1104:	bf 92       	push	r11
    1106:	cf 92       	push	r12
    1108:	df 92       	push	r13
    110a:	ef 92       	push	r14
    110c:	ff 92       	push	r15
    110e:	0f 93       	push	r16
    1110:	1f 93       	push	r17
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	00 d0       	rcall	.+0      	; 0x1118 <ReadInductance+0x26>
    1118:	0f 92       	push	r0
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
  uint8_t found;
  uint8_t LowPin;
  uint8_t HighPin;


  if(PartFound != PART_RESISTOR) {
    111e:	80 91 09 01 	lds	r24, 0x0109
    1122:	86 30       	cpi	r24, 0x06	; 6
    1124:	09 f0       	breq	.+2      	; 0x1128 <ReadInductance+0x36>
    1126:	4f c1       	rjmp	.+670    	; 0x13c6 <ReadInductance+0x2d4>
    1128:	ff 24       	eor	r15, r15
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx < 28000) {
    112a:	0b e0       	ldi	r16, 0x0B	; 11
    112c:	20 2e       	mov	r2, r16
    112e:	31 2c       	mov	r3, r1
        for (count=0;count<2;count++) {
           // Try two times
           HiADC = MEM_read_byte(&PinADCtab[HighPin]);
           R_PORT = 0;		// switch R_L to GND
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_PORT =   TXD_VAL;		// switch ADC-Port to GND
    1130:	18 e0       	ldi	r17, 0x08	; 8
    1132:	e1 2e       	mov	r14, r17
    1134:	40 c1       	rjmp	.+640    	; 0x13b6 <ReadInductance+0x2c4>

  if(PartFound != PART_RESISTOR) {
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx < 28000) {
    1136:	4f 2c       	mov	r4, r15
    1138:	55 24       	eor	r5, r5
    113a:	42 9c       	mul	r4, r2
    113c:	f0 01       	movw	r30, r0
    113e:	43 9c       	mul	r4, r3
    1140:	f0 0d       	add	r31, r0
    1142:	52 9c       	mul	r5, r2
    1144:	f0 0d       	add	r31, r0
    1146:	11 24       	eor	r1, r1
    1148:	e5 5e       	subi	r30, 0xE5	; 229
    114a:	fe 4f       	sbci	r31, 0xFE	; 254
    114c:	80 81       	ld	r24, Z
    114e:	91 81       	ldd	r25, Z+1	; 0x01
    1150:	a2 81       	ldd	r26, Z+2	; 0x02
    1152:	b3 81       	ldd	r27, Z+3	; 0x03
    1154:	80 36       	cpi	r24, 0x60	; 96
    1156:	2d e6       	ldi	r18, 0x6D	; 109
    1158:	92 07       	cpc	r25, r18
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	a2 07       	cpc	r26, r18
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	b2 07       	cpc	r27, r18
    1162:	08 f0       	brcs	.+2      	; 0x1166 <ReadInductance+0x74>
    1164:	27 c1       	rjmp	.+590    	; 0x13b4 <ReadInductance+0x2c2>
 
        LowPin = resis[found].ra;
    1166:	10 85       	ldd	r17, Z+8	; 0x08
        HighPin = resis[found].rb;
    1168:	01 85       	ldd	r16, Z+9	; 0x09
        LoPinR_L = MEM_read_byte(&PinRLtab[LowPin]);	//R_L mask for HighPin R_L load
    116a:	81 2f       	mov	r24, r17
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	85 5b       	subi	r24, 0xB5	; 181
    1170:	9d 4f       	sbci	r25, 0xFD	; 253
    1172:	0e 94 29 19 	call	0x3252	; 0x3252 <__eerd_byte_m328p>
    1176:	68 2e       	mov	r6, r24
        LoPinR_H = LoPinR_L + LoPinR_L;	//double for LowPin R_H load

      //==================================================================================
      // Measurement of Inductance values
      // setup Analog Comparator
        ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    1178:	80 e4       	ldi	r24, 0x40	; 64
    117a:	80 93 7b 00 	sts	0x007B, r24
        ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    117e:	94 e5       	ldi	r25, 0x54	; 84
    1180:	90 bf       	out	0x30, r25	; 48
        ADMUX = (1<<REFS0) | LowPin;			// switch Mux to High-Pin
    1182:	10 64       	ori	r17, 0x40	; 64
    1184:	10 93 7c 00 	sts	0x007C, r17
        ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    1188:	e6 e1       	ldi	r30, 0x16	; 22
    118a:	e0 93 7a 00 	sts	0x007A, r30
        for (count=0;count<2;count++) {
    118e:	aa 24       	eor	r10, r10
           // Try two times
           HiADC = MEM_read_byte(&PinADCtab[HighPin]);
    1190:	10 e0       	ldi	r17, 0x00	; 0
    1192:	02 5b       	subi	r16, 0xB2	; 178
    1194:	1d 4f       	sbci	r17, 0xFD	; 253
    1196:	c8 01       	movw	r24, r16
    1198:	0e 94 29 19 	call	0x3252	; 0x3252 <__eerd_byte_m328p>
           R_PORT = 0;		// switch R_L to GND
    119c:	15 b8       	out	0x05, r1	; 5
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
    119e:	64 b8       	out	0x04, r6	; 4
           ADC_PORT =   TXD_VAL;		// switch ADC-Port to GND
    11a0:	e8 b8       	out	0x08, r14	; 8
           ADC_DDR = HiADC | TXD_MSK;		// switch HiADC Pin to GND, 
    11a2:	88 60       	ori	r24, 0x08	; 8
    11a4:	87 b9       	out	0x07, r24	; 7
           wait10ms();
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <wait10ms>
      
         // setup Counter1
           ovcnt16 = 0;
           TCCR1A = 0;			// set Counter1 to normal Mode
    11ac:	10 92 80 00 	sts	0x0080, r1
           TCNT1 = 0;			//set Counter to 0
    11b0:	10 92 85 00 	sts	0x0085, r1
    11b4:	10 92 84 00 	sts	0x0084, r1
           TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// mega88
    11b8:	f7 e2       	ldi	r31, 0x27	; 39
    11ba:	f6 bb       	out	0x16, r31	; 22
           HiADC |= TXD_VAL;
           if (count == 0 ) {
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	aa 20       	and	r10, r10
    11c0:	29 f4       	brne	.+10     	; 0x11cc <ReadInductance+0xda>
              //first start counter, then start current
              TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    11c2:	21 e8       	ldi	r18, 0x81	; 129
    11c4:	20 93 81 00 	sts	0x0081, r18
              ADC_PORT = HiADC;		// switch ADC-Port to VCC
    11c8:	88 b9       	out	0x08, r24	; 8
    11ca:	09 c0       	rjmp	.+18     	; 0x11de <ReadInductance+0xec>
           } else {
              //first start current, then start counter with delay
              //parasitic capacity of coil can cause high current at the beginning
              ADC_PORT = HiADC;		// switch ADC-Port to VCC
    11cc:	88 b9       	out	0x08, r24	; 8
              wdt_reset();			// delay
    11ce:	a8 95       	wdr
      #if F_CPU >= 8000000UL
              wdt_reset();			// delay
    11d0:	a8 95       	wdr
              wdt_reset();			// delay
    11d2:	a8 95       	wdr
      #endif
              TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
    11d4:	80 e2       	ldi	r24, 0x20	; 32
    11d6:	86 bb       	out	0x16, r24	; 22
              TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    11d8:	91 e8       	ldi	r25, 0x81	; 129
    11da:	90 93 81 00 	sts	0x0081, r25
      // setup Analog Comparator
        ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
        ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
        ADMUX = (1<<REFS0) | LowPin;			// switch Mux to High-Pin
        ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
        for (count=0;count<2;count++) {
    11de:	cc 24       	eor	r12, r12
    11e0:	dd 24       	eor	r13, r13
           }
      
         //******************************
           while(1) {
              // Wait, until  Input Capture is set
              ii = TI1_INT_FLAGS;		//read Timer flags
    11e2:	26 b3       	in	r18, 0x16	; 22
              if (ii & (1<<ICF1))  {
    11e4:	25 fd       	sbrc	r18, 5
    11e6:	0c c0       	rjmp	.+24     	; 0x1200 <ReadInductance+0x10e>
                 break;
              }
              if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    11e8:	20 ff       	sbrs	r18, 0
    11ea:	fb cf       	rjmp	.-10     	; 0x11e2 <ReadInductance+0xf0>
                 TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    11ec:	e1 e0       	ldi	r30, 0x01	; 1
    11ee:	e6 bb       	out	0x16, r30	; 22
                 wdt_reset();
    11f0:	a8 95       	wdr
                 ovcnt16++;
    11f2:	08 94       	sec
    11f4:	c1 1c       	adc	r12, r1
    11f6:	d1 1c       	adc	r13, r1
                 if(ovcnt16 == (F_CPU/500000)) {
    11f8:	f0 e1       	ldi	r31, 0x10	; 16
    11fa:	cf 16       	cp	r12, r31
    11fc:	d1 04       	cpc	r13, r1
    11fe:	89 f7       	brne	.-30     	; 0x11e2 <ReadInductance+0xf0>
                    break; 	//Timeout for Charging, above 0.13 s
                 }
              }
           }
           TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    1200:	10 92 81 00 	sts	0x0081, r1
           TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    1204:	80 e2       	ldi	r24, 0x20	; 32
    1206:	86 bb       	out	0x16, r24	; 22
           tmpint = ICR1;		// get previous Input Capture Counter flag
    1208:	60 91 86 00 	lds	r22, 0x0086
    120c:	70 91 87 00 	lds	r23, 0x0087
         // check actual counter, if an additional overflow must be added
           if((TCNT1 > tmpint) && (ii & (1<<TOV1))) {
    1210:	80 91 84 00 	lds	r24, 0x0084
    1214:	90 91 85 00 	lds	r25, 0x0085
    1218:	68 17       	cp	r22, r24
    121a:	79 07       	cpc	r23, r25
    121c:	38 f4       	brcc	.+14     	; 0x122c <ReadInductance+0x13a>
    121e:	20 ff       	sbrs	r18, 0
    1220:	05 c0       	rjmp	.+10     	; 0x122c <ReadInductance+0x13a>
              // this OV was not counted, but was before the Input Capture
              TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    1222:	91 e0       	ldi	r25, 0x01	; 1
    1224:	96 bb       	out	0x16, r25	; 22
              ovcnt16++;
    1226:	08 94       	sec
    1228:	c1 1c       	adc	r12, r1
    122a:	d1 1c       	adc	r13, r1
           }
           if (count == 0) {
    122c:	aa 20       	and	r10, r10
    122e:	61 f4       	brne	.+24     	; 0x1248 <ReadInductance+0x156>
              cval_uncorrected = CombineII2Long(ovcnt16, tmpint);
    1230:	c6 01       	movw	r24, r12
    1232:	0e 94 02 18 	call	0x3004	; 0x3004 <CombineII2Long>
    1236:	60 93 5a 01 	sts	0x015A, r22
    123a:	70 93 5b 01 	sts	0x015B, r23
    123e:	80 93 5c 01 	sts	0x015C, r24
    1242:	90 93 5d 01 	sts	0x015D, r25
    1246:	0b c0       	rjmp	.+22     	; 0x125e <ReadInductance+0x16c>
           } else  {
              cval = CombineII2Long(ovcnt16, tmpint);
    1248:	c6 01       	movw	r24, r12
    124a:	0e 94 02 18 	call	0x3004	; 0x3004 <CombineII2Long>
    124e:	60 93 7b 01 	sts	0x017B, r22
    1252:	70 93 7c 01 	sts	0x017C, r23
    1256:	80 93 7d 01 	sts	0x017D, r24
    125a:	90 93 7e 01 	sts	0x017E, r25
      // setup Analog Comparator
        ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
        ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
        ADMUX = (1<<REFS0) | LowPin;			// switch Mux to High-Pin
        ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
        for (count=0;count<2;count++) {
    125e:	a3 94       	inc	r10
    1260:	ea 2d       	mov	r30, r10
    1262:	e2 30       	cpi	r30, 0x02	; 2
    1264:	09 f0       	breq	.+2      	; 0x1268 <ReadInductance+0x176>
    1266:	97 cf       	rjmp	.-210    	; 0x1196 <ReadInductance+0xa4>
              cval_uncorrected = CombineII2Long(ovcnt16, tmpint);
           } else  {
              cval = CombineII2Long(ovcnt16, tmpint);
           }
        }  //end for
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    1268:	f6 e9       	ldi	r31, 0x96	; 150
    126a:	f0 93 7a 00 	sts	0x007A, r31
        ADC_PORT = TXD_VAL;		// switch ADC Port to GND
    126e:	e8 b8       	out	0x08, r14	; 8
        wait10ms();
    1270:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <wait10ms>
        if ((ovcnt16 >= (F_CPU/500000)) || (cval < cval_uncorrected)) {
    1274:	20 e1       	ldi	r18, 0x10	; 16
    1276:	c2 16       	cp	r12, r18
    1278:	d1 04       	cpc	r13, r1
    127a:	a8 f4       	brcc	.+42     	; 0x12a6 <ReadInductance+0x1b4>
    127c:	20 91 7b 01 	lds	r18, 0x017B
    1280:	30 91 7c 01 	lds	r19, 0x017C
    1284:	40 91 7d 01 	lds	r20, 0x017D
    1288:	50 91 7e 01 	lds	r21, 0x017E
    128c:	80 91 5a 01 	lds	r24, 0x015A
    1290:	90 91 5b 01 	lds	r25, 0x015B
    1294:	a0 91 5c 01 	lds	r26, 0x015C
    1298:	b0 91 5d 01 	lds	r27, 0x015D
    129c:	28 17       	cp	r18, r24
    129e:	39 07       	cpc	r19, r25
    12a0:	4a 07       	cpc	r20, r26
    12a2:	5b 07       	cpc	r21, r27
    12a4:	98 f4       	brcc	.+38     	; 0x12cc <ReadInductance+0x1da>
           // no transition is detected at the second test or same transition
           cval = cval_uncorrected - 6;
    12a6:	80 91 5a 01 	lds	r24, 0x015A
    12aa:	90 91 5b 01 	lds	r25, 0x015B
    12ae:	a0 91 5c 01 	lds	r26, 0x015C
    12b2:	b0 91 5d 01 	lds	r27, 0x015D
    12b6:	06 97       	sbiw	r24, 0x06	; 6
    12b8:	a1 09       	sbc	r26, r1
    12ba:	b1 09       	sbc	r27, r1
    12bc:	80 93 7b 01 	sts	0x017B, r24
    12c0:	90 93 7c 01 	sts	0x017C, r25
    12c4:	a0 93 7d 01 	sts	0x017D, r26
    12c8:	b0 93 7e 01 	sts	0x017E, r27
        }
           
        total_r = (RR680MI + resis[0].rx + RR680PL - R_L_VAL);
    12cc:	00 91 04 01 	lds	r16, 0x0104
    12d0:	10 91 05 01 	lds	r17, 0x0105
    12d4:	80 91 0b 01 	lds	r24, 0x010B
    12d8:	90 91 0c 01 	lds	r25, 0x010C
    12dc:	80 0f       	add	r24, r16
    12de:	91 1f       	adc	r25, r17
    12e0:	80 59       	subi	r24, 0x90	; 144
    12e2:	9a 41       	sbci	r25, 0x1A	; 26
    12e4:	20 91 1b 01 	lds	r18, 0x011B
    12e8:	30 91 1c 01 	lds	r19, 0x011C
    12ec:	82 0f       	add	r24, r18
    12ee:	93 1f       	adc	r25, r19
        umax = ((unsigned long)RR680MI * (unsigned long)ADCconfig.U_AVCC) / total_r;
    12f0:	3c 01       	movw	r6, r24
    12f2:	88 24       	eor	r8, r8
    12f4:	99 24       	eor	r9, r9
        // Voltage of comparator in % of umax
        #ifdef AUTO_CAL
        per_ref = (unsigned long)(ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset))) * 100 / umax;
    12f6:	8d e5       	ldi	r24, 0x5D	; 93
    12f8:	92 e0       	ldi	r25, 0x02	; 2
    12fa:	0e 94 31 19 	call	0x3262	; 0x3262 <__eerd_word_m328p>
    12fe:	60 91 42 01 	lds	r22, 0x0142
    1302:	70 91 43 01 	lds	r23, 0x0143
    1306:	68 0f       	add	r22, r24
    1308:	79 1f       	adc	r23, r25
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	24 e6       	ldi	r18, 0x64	; 100
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	40 e0       	ldi	r20, 0x00	; 0
    1314:	50 e0       	ldi	r21, 0x00	; 0
    1316:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
    131a:	5b 01       	movw	r10, r22
    131c:	6c 01       	movw	r12, r24
           // no transition is detected at the second test or same transition
           cval = cval_uncorrected - 6;
        }
           
        total_r = (RR680MI + resis[0].rx + RR680PL - R_L_VAL);
        umax = ((unsigned long)RR680MI * (unsigned long)ADCconfig.U_AVCC) / total_r;
    131e:	60 91 40 01 	lds	r22, 0x0140
    1322:	70 91 41 01 	lds	r23, 0x0141
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	98 01       	movw	r18, r16
    132c:	40 e0       	ldi	r20, 0x00	; 0
    132e:	50 e0       	ldi	r21, 0x00	; 0
    1330:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
    1334:	a4 01       	movw	r20, r8
    1336:	93 01       	movw	r18, r6
    1338:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
        // Voltage of comparator in % of umax
        #ifdef AUTO_CAL
        per_ref = (unsigned long)(ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset))) * 100 / umax;
    133c:	40 e0       	ldi	r20, 0x00	; 0
    133e:	50 e0       	ldi	r21, 0x00	; 0
    1340:	c6 01       	movw	r24, r12
    1342:	b5 01       	movw	r22, r10
    1344:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
        #else
        per_ref = (unsigned long)(ref_mv + REF_C_KORR) * 100 / umax;
        #endif
        per_ref = (uint8_t)MEM2_read_byte(&LogTab[per_ref]);
    1348:	82 2f       	mov	r24, r18
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	86 5a       	subi	r24, 0xA6	; 166
    134e:	9f 4f       	sbci	r25, 0xFF	; 255
    1350:	0e 94 29 19 	call	0x3252	; 0x3252 <__eerd_byte_m328p>
    1354:	18 2f       	mov	r17, r24
        resis[found].lx = (cval * total_r ) / ((unsigned int)per_ref * (F_CPU/100000));
    1356:	42 9c       	mul	r4, r2
    1358:	c0 01       	movw	r24, r0
    135a:	43 9c       	mul	r4, r3
    135c:	90 0d       	add	r25, r0
    135e:	52 9c       	mul	r5, r2
    1360:	90 0d       	add	r25, r0
    1362:	11 24       	eor	r1, r1
    1364:	85 5e       	subi	r24, 0xE5	; 229
    1366:	9e 4f       	sbci	r25, 0xFE	; 254
    1368:	9b 83       	std	Y+3, r25	; 0x03
    136a:	8a 83       	std	Y+2, r24	; 0x02
    136c:	20 91 7b 01 	lds	r18, 0x017B
    1370:	30 91 7c 01 	lds	r19, 0x017C
    1374:	40 91 7d 01 	lds	r20, 0x017D
    1378:	50 91 7e 01 	lds	r21, 0x017E
    137c:	c4 01       	movw	r24, r8
    137e:	b3 01       	movw	r22, r6
    1380:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
    1384:	5b 01       	movw	r10, r22
    1386:	6c 01       	movw	r12, r24
    1388:	61 2f       	mov	r22, r17
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	20 e5       	ldi	r18, 0x50	; 80
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	40 e0       	ldi	r20, 0x00	; 0
    1396:	50 e0       	ldi	r21, 0x00	; 0
    1398:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
    139c:	9b 01       	movw	r18, r22
    139e:	ac 01       	movw	r20, r24
    13a0:	c6 01       	movw	r24, r12
    13a2:	b5 01       	movw	r22, r10
    13a4:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
    13a8:	ea 81       	ldd	r30, Y+2	; 0x02
    13aa:	fb 81       	ldd	r31, Y+3	; 0x03
    13ac:	24 83       	std	Z+4, r18	; 0x04
    13ae:	35 83       	std	Z+5, r19	; 0x05
    13b0:	46 83       	std	Z+6, r20	; 0x06
    13b2:	57 83       	std	Z+7, r21	; 0x07


  if(PartFound != PART_RESISTOR) {
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
    13b4:	f3 94       	inc	r15
    13b6:	80 91 59 01 	lds	r24, 0x0159
    13ba:	f8 16       	cp	r15, r24
    13bc:	08 f4       	brcc	.+2      	; 0x13c0 <ReadInductance+0x2ce>
    13be:	bb ce       	rjmp	.-650    	; 0x1136 <ReadInductance+0x44>
     }
  }
  // all resistors measured

  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    13c0:	88 e0       	ldi	r24, 0x08	; 8
    13c2:	87 b9       	out	0x07, r24	; 7
  R_DDR = 0;			// switch all resistor ports to input
    13c4:	14 b8       	out	0x04, r1	; 4
  return;
 } // end ReadInductance()
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	1f 91       	pop	r17
    13d2:	0f 91       	pop	r16
    13d4:	ff 90       	pop	r15
    13d6:	ef 90       	pop	r14
    13d8:	df 90       	pop	r13
    13da:	cf 90       	pop	r12
    13dc:	bf 90       	pop	r11
    13de:	af 90       	pop	r10
    13e0:	9f 90       	pop	r9
    13e2:	8f 90       	pop	r8
    13e4:	7f 90       	pop	r7
    13e6:	6f 90       	pop	r6
    13e8:	5f 90       	pop	r5
    13ea:	4f 90       	pop	r4
    13ec:	3f 90       	pop	r3
    13ee:	2f 90       	pop	r2
    13f0:	08 95       	ret

000013f2 <getRLmultip>:
#include "ReadCapacity.c"
#if FLASHEND > 0x1fff
#include "ReadInductance.c"
#endif

unsigned int getRLmultip(unsigned int cvolt) {
    13f2:	ff 92       	push	r15
    13f4:	0f 93       	push	r16
    13f6:	1f 93       	push	r17
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29

  unsigned int uvolt;
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;
  if (cvolt >= RL_Tab_Beginn) {
    13fc:	21 e0       	ldi	r18, 0x01	; 1
    13fe:	8c 32       	cpi	r24, 0x2C	; 44
    1400:	92 07       	cpc	r25, r18
    1402:	18 f0       	brcs	.+6      	; 0x140a <getRLmultip+0x18>
     uvolt = cvolt - RL_Tab_Beginn;
    1404:	8c 52       	subi	r24, 0x2C	; 44
    1406:	91 40       	sbci	r25, 0x01	; 1
    1408:	02 c0       	rjmp	.+4      	; 0x140e <getRLmultip+0x1c>
  } else {
     uvolt = 0;		// limit to begin of table
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = uvolt / RL_Tab_Abstand;
    140e:	69 e1       	ldi	r22, 0x19	; 25
    1410:	70 e0       	ldi	r23, 0x00	; 0
    1412:	0e 94 a1 18 	call	0x3142	; 0x3142 <__udivmodhi4>
  tabres = uvolt % RL_Tab_Abstand;
    1416:	f8 2e       	mov	r15, r24
  tabres = RL_Tab_Abstand - tabres;
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
    1418:	6d 32       	cpi	r22, 0x2D	; 45
    141a:	08 f0       	brcs	.+2      	; 0x141e <getRLmultip+0x2c>
    141c:	6c e2       	ldi	r22, 0x2C	; 44
    141e:	c6 2f       	mov	r28, r22
    1420:	d0 e0       	ldi	r29, 0x00	; 0
    1422:	ce 01       	movw	r24, r28
    1424:	88 0f       	add	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	80 50       	subi	r24, 0x00	; 0
    142a:	90 40       	sbci	r25, 0x00	; 0
    142c:	0e 94 31 19 	call	0x3262	; 0x3262 <__eerd_word_m328p>
    1430:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RLtab[tabind+1]);
    1432:	ce 01       	movw	r24, r28
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	8e 5f       	subi	r24, 0xFE	; 254
    143a:	9f 4f       	sbci	r25, 0xFF	; 255
    143c:	0e 94 31 19 	call	0x3262	; 0x3262 <__eerd_word_m328p>
    1440:	9c 01       	movw	r18, r24
  } else {
     uvolt = 0;		// limit to begin of table
  }
  tabind = uvolt / RL_Tab_Abstand;
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
    1442:	49 e1       	ldi	r20, 0x19	; 25
    1444:	4f 19       	sub	r20, r15
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
    1446:	50 e0       	ldi	r21, 0x00	; 0
    1448:	08 1b       	sub	r16, r24
    144a:	19 0b       	sbc	r17, r25
    144c:	40 9f       	mul	r20, r16
    144e:	c0 01       	movw	r24, r0
    1450:	41 9f       	mul	r20, r17
    1452:	90 0d       	add	r25, r0
    1454:	50 9f       	mul	r21, r16
    1456:	90 0d       	add	r25, r0
    1458:	11 24       	eor	r1, r1
    145a:	0c 96       	adiw	r24, 0x0c	; 12
    145c:	69 e1       	ldi	r22, 0x19	; 25
    145e:	70 e0       	ldi	r23, 0x00	; 0
    1460:	0e 94 a1 18 	call	0x3142	; 0x3142 <__udivmodhi4>
    1464:	62 0f       	add	r22, r18
    1466:	73 1f       	adc	r23, r19
}
    1468:	cb 01       	movw	r24, r22
    146a:	df 91       	pop	r29
    146c:	cf 91       	pop	r28
    146e:	1f 91       	pop	r17
    1470:	0f 91       	pop	r16
    1472:	ff 90       	pop	r15
    1474:	08 95       	ret

00001476 <Scale_C_with_vcc>:

void Scale_C_with_vcc(void) {
    1476:	8f 92       	push	r8
    1478:	9f 92       	push	r9
    147a:	af 92       	push	r10
    147c:	bf 92       	push	r11
    147e:	df 92       	push	r13
    1480:	ef 92       	push	r14
    1482:	ff 92       	push	r15
    1484:	0f 93       	push	r16
    1486:	1f 93       	push	r17
    1488:	e0 90 7b 01 	lds	r14, 0x017B
    148c:	f0 90 7c 01 	lds	r15, 0x017C
    1490:	00 91 7d 01 	lds	r16, 0x017D
    1494:	10 91 7e 01 	lds	r17, 0x017E
    1498:	d0 90 49 01 	lds	r13, 0x0149
   while (cval > 1000000) {
      cval /= 10;
    149c:	4a e0       	ldi	r20, 0x0A	; 10
    149e:	84 2e       	mov	r8, r20
    14a0:	91 2c       	mov	r9, r1
    14a2:	a1 2c       	mov	r10, r1
    14a4:	b1 2c       	mov	r11, r1
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cval > 1000000) {
    14a6:	08 c0       	rjmp	.+16     	; 0x14b8 <Scale_C_with_vcc+0x42>
      cval /= 10;
    14a8:	c8 01       	movw	r24, r16
    14aa:	b7 01       	movw	r22, r14
    14ac:	a5 01       	movw	r20, r10
    14ae:	94 01       	movw	r18, r8
    14b0:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
    14b4:	79 01       	movw	r14, r18
    14b6:	8a 01       	movw	r16, r20
    14b8:	8d 2d       	mov	r24, r13
    14ba:	d3 94       	inc	r13
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cval > 1000000) {
    14bc:	91 e4       	ldi	r25, 0x41	; 65
    14be:	e9 16       	cp	r14, r25
    14c0:	92 e4       	ldi	r25, 0x42	; 66
    14c2:	f9 06       	cpc	r15, r25
    14c4:	9f e0       	ldi	r25, 0x0F	; 15
    14c6:	09 07       	cpc	r16, r25
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	19 07       	cpc	r17, r25
    14cc:	68 f7       	brcc	.-38     	; 0x14a8 <Scale_C_with_vcc+0x32>
    14ce:	80 93 49 01 	sts	0x0149, r24
      cval /= 10;
      cpre ++;          // prevent overflow
   }
   cval *= ADCconfig.U_AVCC;	// scale with measured voltage
    14d2:	20 91 40 01 	lds	r18, 0x0140
    14d6:	30 91 41 01 	lds	r19, 0x0141
    14da:	40 e0       	ldi	r20, 0x00	; 0
    14dc:	50 e0       	ldi	r21, 0x00	; 0
    14de:	c8 01       	movw	r24, r16
    14e0:	b7 01       	movw	r22, r14
    14e2:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
   cval /= U_VCC;               // Factors are computed for U_VCC
    14e6:	28 e8       	ldi	r18, 0x88	; 136
    14e8:	33 e1       	ldi	r19, 0x13	; 19
    14ea:	40 e0       	ldi	r20, 0x00	; 0
    14ec:	50 e0       	ldi	r21, 0x00	; 0
    14ee:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
    14f2:	20 93 7b 01 	sts	0x017B, r18
    14f6:	30 93 7c 01 	sts	0x017C, r19
    14fa:	40 93 7d 01 	sts	0x017D, r20
    14fe:	50 93 7e 01 	sts	0x017E, r21
}
    1502:	1f 91       	pop	r17
    1504:	0f 91       	pop	r16
    1506:	ff 90       	pop	r15
    1508:	ef 90       	pop	r14
    150a:	df 90       	pop	r13
    150c:	bf 90       	pop	r11
    150e:	af 90       	pop	r10
    1510:	9f 90       	pop	r9
    1512:	8f 90       	pop	r8
    1514:	08 95       	ret

00001516 <ReadCapacity>:

unsigned long CombineII2Long( unsigned int ovcnt16, unsigned int tmpcnt); //tricky function to build unsigned long from two unsigned int values


//=================================================================
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    1516:	9f 92       	push	r9
    1518:	af 92       	push	r10
    151a:	bf 92       	push	r11
    151c:	cf 92       	push	r12
    151e:	df 92       	push	r13
    1520:	ef 92       	push	r14
    1522:	ff 92       	push	r15
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	18 2f       	mov	r17, r24
    152e:	96 2e       	mov	r9, r22
  uint8_t HiPinR_L, HiPinR_H;
  uint8_t LoADC;
  uint8_t ii;

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
    1530:	88 0f       	add	r24, r24
    1532:	81 0f       	add	r24, r17
    1534:	86 0f       	add	r24, r22
    1536:	81 50       	subi	r24, 0x01	; 1
    1538:	80 93 48 01 	sts	0x0148, r24
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    153c:	86 2f       	mov	r24, r22
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	82 5b       	subi	r24, 0xB2	; 178
    1542:	9d 4f       	sbci	r25, 0xFD	; 253
    1544:	0e 94 29 19 	call	0x3252	; 0x3252 <__eerd_byte_m328p>
    1548:	c8 2e       	mov	r12, r24
  HiPinR_L = MEM_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
    154a:	21 2f       	mov	r18, r17
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	c9 01       	movw	r24, r18
    1550:	85 5b       	subi	r24, 0xB5	; 181
    1552:	9d 4f       	sbci	r25, 0xFD	; 253
    1554:	0e 94 29 19 	call	0x3252	; 0x3252 <__eerd_byte_m328p>
    1558:	08 2f       	mov	r16, r24
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load

  if(PartFound == PART_CAPACITOR) {
    155a:	80 91 09 01 	lds	r24, 0x0109
    155e:	87 30       	cpi	r24, 0x07	; 7
    1560:	09 f4       	brne	.+2      	; 0x1564 <ReadCapacity+0x4e>
    1562:	f7 c1       	rjmp	.+1006   	; 0x1952 <ReadCapacity+0x43c>
     lcd_string(ultoa(cval,outval,10));
     wait2s();
#endif
     return;	//We have found a capacitor already
  }
  if(PartFound == PART_RESISTOR) {
    1564:	86 30       	cpi	r24, 0x06	; 6
    1566:	09 f4       	brne	.+2      	; 0x156a <ReadCapacity+0x54>
    1568:	f4 c1       	rjmp	.+1000   	; 0x1952 <ReadCapacity+0x43c>
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    156a:	90 91 07 01 	lds	r25, 0x0107
    156e:	e3 e6       	ldi	r30, 0x63	; 99
    1570:	f1 e0       	ldi	r31, 0x01	; 1
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	0f c0       	rjmp	.+30     	; 0x1594 <ReadCapacity+0x7e>
     if ((diodes[ii].Cathode == LowPin) && (diodes[ii].Anode == HighPin) && (diodes[ii].Voltage < 1500)) {
    1576:	21 81       	ldd	r18, Z+1	; 0x01
    1578:	29 15       	cp	r18, r9
    157a:	51 f4       	brne	.+20     	; 0x1590 <ReadCapacity+0x7a>
    157c:	20 81       	ld	r18, Z
    157e:	21 17       	cp	r18, r17
    1580:	39 f4       	brne	.+14     	; 0x1590 <ReadCapacity+0x7a>
    1582:	22 81       	ldd	r18, Z+2	; 0x02
    1584:	33 81       	ldd	r19, Z+3	; 0x03
    1586:	45 e0       	ldi	r20, 0x05	; 5
    1588:	2c 3d       	cpi	r18, 0xDC	; 220
    158a:	34 07       	cpc	r19, r20
    158c:	08 f4       	brcc	.+2      	; 0x1590 <ReadCapacity+0x7a>
    158e:	e1 c1       	rjmp	.+962    	; 0x1952 <ReadCapacity+0x43c>
     return;	//We have found a capacitor already
  }
  if(PartFound == PART_RESISTOR) {
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    1590:	8f 5f       	subi	r24, 0xFF	; 255
    1592:	34 96       	adiw	r30, 0x04	; 4
    1594:	89 17       	cp	r24, r25
    1596:	78 f3       	brcs	.-34     	; 0x1576 <ReadCapacity+0x60>

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    1598:	88 e0       	ldi	r24, 0x08	; 8
    159a:	c8 2a       	or	r12, r24
     if ((diodes[ii].Cathode == LowPin) && (diodes[ii].Anode == HighPin) && (diodes[ii].Voltage < 1500)) {
        return;
     }
  }
  
  EntladePins();			// discharge capacitor
    159c:	0e 94 de 07 	call	0xfbc	; 0xfbc <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    15a0:	88 e0       	ldi	r24, 0x08	; 8
    15a2:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    15a4:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    15a6:	c7 b8       	out	0x07, r12	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    15a8:	04 b9       	out	0x04, r16	; 4
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    15aa:	81 2f       	mov	r24, r17
    15ac:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
    15b0:	5c 01       	movw	r10, r24
// ******** should adcv[0] be measured without current???
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    15b2:	c0 e0       	ldi	r28, 0x00	; 0
    15b4:	d0 e0       	ldi	r29, 0x00	; 0
     ChargePin10ms(HiPinR_L,1);		//HighPin with R_L 10ms to VCC ,then currentless
    15b6:	80 2f       	mov	r24, r16
    15b8:	61 e0       	ldi	r22, 0x01	; 1
    15ba:	0e 94 45 01 	call	0x28a	; 0x28a <ChargePin10ms>
     wait500us();			//wait a little time
    15be:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <wait500us>
     wdt_reset();
    15c2:	a8 95       	wdr
     // read voltage without current, is already charged enough?
     adcv[2] = ReadADC(HighPin) - adcv[0];
    15c4:	81 2f       	mov	r24, r17
    15c6:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
    15ca:	7c 01       	movw	r14, r24
    15cc:	ea 18       	sub	r14, r10
    15ce:	fb 08       	sbc	r15, r11
     if ((ovcnt16 == 126) && (adcv[2] < 75)) {
    15d0:	ce 37       	cpi	r28, 0x7E	; 126
    15d2:	d1 05       	cpc	r29, r1
    15d4:	21 f4       	brne	.+8      	; 0x15de <ReadCapacity+0xc8>
    15d6:	9b e4       	ldi	r25, 0x4B	; 75
    15d8:	e9 16       	cp	r14, r25
    15da:	f1 04       	cpc	r15, r1
    15dc:	50 f0       	brcs	.+20     	; 0x15f2 <ReadCapacity+0xdc>
        // 300mV can not be reached well-timed 
        break;		// don't try to load any more
     }
     if (adcv[2] > 300) {
    15de:	2d e2       	ldi	r18, 0x2D	; 45
    15e0:	e2 16       	cp	r14, r18
    15e2:	21 e0       	ldi	r18, 0x01	; 1
    15e4:	f2 06       	cpc	r15, r18
    15e6:	28 f4       	brcc	.+10     	; 0x15f2 <ReadCapacity+0xdc>
  R_PORT = 0;				// switch R-Port to GND
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    15e8:	21 96       	adiw	r28, 0x01	; 1
    15ea:	31 e0       	ldi	r19, 0x01	; 1
    15ec:	c4 3f       	cpi	r28, 0xF4	; 244
    15ee:	d3 07       	cpc	r29, r19
    15f0:	11 f7       	brne	.-60     	; 0x15b6 <ReadCapacity+0xa0>
     }
  }
  // wait 5ms and read voltage again, does the capacitor keep the voltage?
//  adcv[1] = W5msReadADC(HighPin) - adcv[0];
//  wdt_reset();
  cpre = -12;			//default unit is pF
    15f2:	84 ef       	ldi	r24, 0xF4	; 244
    15f4:	80 93 49 01 	sts	0x0149, r24
  if (adcv[2] < 301) {
    15f8:	4d e2       	ldi	r20, 0x2D	; 45
    15fa:	e4 16       	cp	r14, r20
    15fc:	41 e0       	ldi	r20, 0x01	; 1
    15fe:	f4 06       	cpc	r15, r20
    1600:	08 f4       	brcc	.+2      	; 0x1604 <ReadCapacity+0xee>
    1602:	a2 c1       	rjmp	.+836    	; 0x1948 <ReadCapacity+0x432>
     wait1s();
#endif
     goto keinC;		// was never charged enough, >100mF or shorted
  }
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    1604:	20 97       	sbiw	r28, 0x00	; 0
    1606:	31 f4       	brne	.+12     	; 0x1614 <ReadCapacity+0xfe>
    1608:	85 e1       	ldi	r24, 0x15	; 21
    160a:	e8 16       	cp	r14, r24
    160c:	85 e0       	ldi	r24, 0x05	; 5
    160e:	f8 06       	cpc	r15, r24
    1610:	08 f0       	brcs	.+2      	; 0x1614 <ReadCapacity+0xfe>
    1612:	67 c0       	rjmp	.+206    	; 0x16e2 <ReadCapacity+0x1cc>
     goto messe_mit_rh;		// Voltage of more than 1300mV is reached in one pulse, to fast loaded
  }
  // Capacity is more than about 50µF
  cpre = -9;		// switch units to nF 
    1614:	87 ef       	ldi	r24, 0xF7	; 247
    1616:	80 93 49 01 	sts	0x0149, r24
  }
  cval_uncorrected = ovcnt16 + 1;
  cval_uncorrected *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the same time which is required for loading
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    161a:	cc 24       	eor	r12, r12
    161c:	dd 24       	eor	r13, r13
     wait10ms();
    161e:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <wait10ms>
     adcv[3] = ReadADC(HighPin) - adcv[0]; // read voltage again, is discharged only a little bit ?
    1622:	81 2f       	mov	r24, r17
    1624:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
    1628:	8a 19       	sub	r24, r10
    162a:	9b 09       	sbc	r25, r11
     wdt_reset();
    162c:	a8 95       	wdr
  }
  cval_uncorrected = ovcnt16 + 1;
  cval_uncorrected *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the same time which is required for loading
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    162e:	08 94       	sec
    1630:	c1 1c       	adc	r12, r1
    1632:	d1 1c       	adc	r13, r1
    1634:	cc 15       	cp	r28, r12
    1636:	dd 05       	cpc	r29, r13
    1638:	90 f7       	brcc	.-28     	; 0x161e <ReadCapacity+0x108>
     wait10ms();
     adcv[3] = ReadADC(HighPin) - adcv[0]; // read voltage again, is discharged only a little bit ?
     wdt_reset();
  }
  if (adcv[2] > adcv[3]) {
    163a:	8e 15       	cp	r24, r14
    163c:	9f 05       	cpc	r25, r15
    163e:	48 f4       	brcc	.+18     	; 0x1652 <ReadCapacity+0x13c>
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];
    1640:	97 01       	movw	r18, r14
    1642:	28 1b       	sub	r18, r24
    1644:	39 0b       	sbc	r19, r25
    1646:	c9 01       	movw	r24, r18
  } else {
     adcv[3] = 0;
  }
  if (adcv[3] > 100) {
    1648:	25 36       	cpi	r18, 0x65	; 101
    164a:	31 05       	cpc	r19, r1
    164c:	08 f0       	brcs	.+2      	; 0x1650 <ReadCapacity+0x13a>
    164e:	7c c1       	rjmp	.+760    	; 0x1948 <ReadCapacity+0x432>
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <ReadCapacity+0x140>
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];
  } else {
     adcv[3] = 0;
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	90 e0       	ldi	r25, 0x00	; 0
     lcd_space();
     wait1s();
 #endif
     goto keinC;		// capacitor does not keep the voltage about 5ms
  }
  cval_uncorrected = ovcnt16 + 1;
    1656:	21 96       	adiw	r28, 0x01	; 1
    1658:	5e 01       	movw	r10, r28
    165a:	cc 24       	eor	r12, r12
    165c:	dd 24       	eor	r13, r13
    165e:	a0 92 5a 01 	sts	0x015A, r10
    1662:	b0 92 5b 01 	sts	0x015B, r11
    1666:	c0 92 5c 01 	sts	0x015C, r12
    166a:	d0 92 5d 01 	sts	0x015D, r13
  // compute factor with load voltage + lost voltage during the voltage load time
  cval_uncorrected *= getRLmultip(adcv[2]+adcv[3]);	// get factor to convert time to capacity from table
    166e:	8e 0d       	add	r24, r14
    1670:	9f 1d       	adc	r25, r15
    1672:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <getRLmultip>
    1676:	bc 01       	movw	r22, r24
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	a6 01       	movw	r20, r12
    167e:	95 01       	movw	r18, r10
    1680:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
    1684:	60 93 5a 01 	sts	0x015A, r22
    1688:	70 93 5b 01 	sts	0x015B, r23
    168c:	80 93 5c 01 	sts	0x015C, r24
    1690:	90 93 5d 01 	sts	0x015D, r25
#endif
   cval = cval_uncorrected;		// set result to uncorrected
    1694:	60 93 7b 01 	sts	0x017B, r22
    1698:	70 93 7c 01 	sts	0x017C, r23
    169c:	80 93 7d 01 	sts	0x017D, r24
    16a0:	90 93 7e 01 	sts	0x017E, r25
   Scale_C_with_vcc();
    16a4:	0e 94 3b 0a 	call	0x1476	; 0x1476 <Scale_C_with_vcc>
   // cval for this type is at least 40000nF, so the last digit will be never shown
   cval *= (1000 - C_H_KORR);	// correct with C_H_KORR with 0.1% resolution, but prevent overflow
    16a8:	60 91 7b 01 	lds	r22, 0x017B
    16ac:	70 91 7c 01 	lds	r23, 0x017C
    16b0:	80 91 7d 01 	lds	r24, 0x017D
    16b4:	90 91 7e 01 	lds	r25, 0x017E
    16b8:	28 ee       	ldi	r18, 0xE8	; 232
    16ba:	33 e0       	ldi	r19, 0x03	; 3
    16bc:	40 e0       	ldi	r20, 0x00	; 0
    16be:	50 e0       	ldi	r21, 0x00	; 0
    16c0:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
   cval /= 100;
    16c4:	24 e6       	ldi	r18, 0x64	; 100
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	50 e0       	ldi	r21, 0x00	; 0
    16cc:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
    16d0:	20 93 7b 01 	sts	0x017B, r18
    16d4:	30 93 7c 01 	sts	0x017C, r19
    16d8:	40 93 7d 01 	sts	0x017D, r20
    16dc:	50 93 7e 01 	sts	0x017E, r21
   DisplaValue(cval,cpre,'F',4);
   lcd_space();
   lcd_string(utoa(ovcnt16,outval,10));
   wait3s();
#endif
   goto checkDiodes;
    16e0:	24 c1       	rjmp	.+584    	; 0x192a <ReadCapacity+0x414>
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
  HiPinR_L = MEM_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load
    16e2:	e0 2e       	mov	r14, r16
    16e4:	ee 0c       	add	r14, r14

//==================================================================================
// Measurement of little capacity values
messe_mit_rh:
  //little capacity value, about  < 50 µF
  EntladePins();			// discharge capacitor
    16e6:	0e 94 de 07 	call	0xfbc	; 0xfbc <EntladePins>
  //measure with the R_H (470kOhm) resistor 
  R_PORT = 0;		// R_DDR ist HiPinR_L
    16ea:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = (1<<TP1) | (1<<TP2) | (1<<TP3) | (1<<TxD);	//switch all Pins to output
    16ec:	8f e0       	ldi	r24, 0x0F	; 15
    16ee:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		//switch all ADC Pins to GND
    16f0:	88 e0       	ldi	r24, 0x08	; 8
    16f2:	88 b9       	out	0x08, r24	; 8
  R_DDR = HiPinR_H;   		// switch R_H resistor port for HighPin to output (GND)
    16f4:	e4 b8       	out	0x04, r14	; 4
// setup Analog Comparator
  ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    16f6:	80 e4       	ldi	r24, 0x40	; 64
    16f8:	80 93 7b 00 	sts	0x007B, r24
  ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    16fc:	84 e5       	ldi	r24, 0x54	; 84
    16fe:	80 bf       	out	0x30, r24	; 48
  ADMUX = (1<<REFS0) | HighPin;			// switch Mux to High-Pin
    1700:	81 2f       	mov	r24, r17
    1702:	80 64       	ori	r24, 0x40	; 64
    1704:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    1708:	86 e1       	ldi	r24, 0x16	; 22
    170a:	80 93 7a 00 	sts	0x007A, r24
  wait200us();
    170e:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <wait200us>

  ovcnt16 = 0;
// setup Counter1
  TCCR1A = 0;			// set Counter1 to normal Mode
    1712:	10 92 80 00 	sts	0x0080, r1
  TCNT1 = 0;			//set Counter to 0
    1716:	10 92 85 00 	sts	0x0085, r1
    171a:	10 92 84 00 	sts	0x0084, r1
  TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// mega88
    171e:	87 e2       	ldi	r24, 0x27	; 39
    1720:	86 bb       	out	0x16, r24	; 22
  R_PORT = HiPinR_H;           	// switch R_H resistor port for HighPin to VCC
    1722:	e5 b8       	out	0x05, r14	; 5
  if(PartFound == PART_FET) {
    1724:	80 91 09 01 	lds	r24, 0x0109
    1728:	83 30       	cpi	r24, 0x03	; 3
    172a:	79 f4       	brne	.+30     	; 0x174a <ReadCapacity+0x234>
     // charge capacitor with R_H resistor
     TCCR1B = (1<<CS10);	//Start counter 1MHz or 8MHz
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = (((1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK) & ~(1<<HighPin));	// release only HighPin ADC port
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	01 2e       	mov	r0, r17
    1738:	02 c0       	rjmp	.+4      	; 0x173e <ReadCapacity+0x228>
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	0a 94       	dec	r0
    1740:	e2 f7       	brpl	.-8      	; 0x173a <ReadCapacity+0x224>
    1742:	80 95       	com	r24
    1744:	8f 70       	andi	r24, 0x0F	; 15
    1746:	87 b9       	out	0x07, r24	; 7
    1748:	04 c0       	rjmp	.+8      	; 0x1752 <ReadCapacity+0x23c>
  } else {
     TCCR1B =  (1<<CS10);	//start counter 1MHz or 8MHz
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
    1750:	c7 b8       	out	0x07, r12	; 7
     ii = TI1_INT_FLAGS;		//read Timer flags
     if (ii & (1<<ICF1))  {
        break;
     }
     if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
        TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    1752:	81 e0       	ldi	r24, 0x01	; 1
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
  }
//******************************
  while(1) {
     // Wait, until  Input Capture is set
     ii = TI1_INT_FLAGS;		//read Timer flags
    1754:	26 b3       	in	r18, 0x16	; 22
     if (ii & (1<<ICF1))  {
    1756:	25 fd       	sbrc	r18, 5
    1758:	09 c0       	rjmp	.+18     	; 0x176c <ReadCapacity+0x256>
        break;
     }
     if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    175a:	20 ff       	sbrs	r18, 0
    175c:	fb cf       	rjmp	.-10     	; 0x1754 <ReadCapacity+0x23e>
        TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    175e:	86 bb       	out	0x16, r24	; 22
        wdt_reset();
    1760:	a8 95       	wdr
        ovcnt16++;
    1762:	21 96       	adiw	r28, 0x01	; 1
        if(ovcnt16 == (F_CPU/5000)) {
    1764:	36 e0       	ldi	r19, 0x06	; 6
    1766:	c0 34       	cpi	r28, 0x40	; 64
    1768:	d3 07       	cpc	r29, r19
    176a:	a1 f7       	brne	.-24     	; 0x1754 <ReadCapacity+0x23e>
           break; 	//Timeout for Charging, above 12 s
        }
     }
  }
  TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    176c:	10 92 81 00 	sts	0x0081, r1
  TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    1770:	80 e2       	ldi	r24, 0x20	; 32
    1772:	86 bb       	out	0x16, r24	; 22
  tmpint = ICR1;		// get previous Input Capture Counter flag
    1774:	e0 90 86 00 	lds	r14, 0x0086
    1778:	f0 90 87 00 	lds	r15, 0x0087
// check actual counter, if an additional overflow must be added
  if((TCNT1 > tmpint) && (ii & (1<<TOV1))) {
    177c:	80 91 84 00 	lds	r24, 0x0084
    1780:	90 91 85 00 	lds	r25, 0x0085
    1784:	e8 16       	cp	r14, r24
    1786:	f9 06       	cpc	r15, r25
    1788:	28 f4       	brcc	.+10     	; 0x1794 <ReadCapacity+0x27e>
    178a:	20 ff       	sbrs	r18, 0
    178c:	03 c0       	rjmp	.+6      	; 0x1794 <ReadCapacity+0x27e>
     // this OV was not counted, but was before the Input Capture
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	86 bb       	out	0x16, r24	; 22
     ovcnt16++;
    1792:	21 96       	adiw	r28, 0x01	; 1
  }
//############################################################
  ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    1794:	86 e9       	ldi	r24, 0x96	; 150
    1796:	80 93 7a 00 	sts	0x007A, r24
  R_DDR = 0;			// switch R_H resistor port for input
    179a:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// switch R_H resistor port pull up for HighPin off
    179c:	15 b8       	out	0x05, r1	; 5
  load_diff = ReadADC(HighPin) + REF_C_KORR - ref_mv;	// build difference of capacitor voltage to Reference Voltage
    179e:	81 2f       	mov	r24, r17
    17a0:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
    17a4:	20 91 42 01 	lds	r18, 0x0142
    17a8:	30 91 43 01 	lds	r19, 0x0143
    17ac:	82 1b       	sub	r24, r18
    17ae:	93 0b       	sbc	r25, r19
    17b0:	0c 96       	adiw	r24, 0x0c	; 12
    17b2:	90 93 62 01 	sts	0x0162, r25
    17b6:	80 93 61 01 	sts	0x0161, r24
//############################################################
  if (ovcnt16 >= (F_CPU/10000)) {
    17ba:	43 e0       	ldi	r20, 0x03	; 3
    17bc:	c0 32       	cpi	r28, 0x20	; 32
    17be:	d4 07       	cpc	r29, r20
    17c0:	08 f0       	brcs	.+2      	; 0x17c4 <ReadCapacity+0x2ae>
    17c2:	c2 c0       	rjmp	.+388    	; 0x1948 <ReadCapacity+0x432>
     goto keinC;	// no normal end
  }
  cval_uncorrected = CombineII2Long(ovcnt16, tmpint);
    17c4:	ce 01       	movw	r24, r28
    17c6:	b7 01       	movw	r22, r14
    17c8:	0e 94 02 18 	call	0x3004	; 0x3004 <CombineII2Long>
    17cc:	60 93 5a 01 	sts	0x015A, r22
    17d0:	70 93 5b 01 	sts	0x015B, r23
    17d4:	80 93 5c 01 	sts	0x015C, r24
    17d8:	90 93 5d 01 	sts	0x015D, r25

  cpre = -12;			// cval unit is pF 
    17dc:	24 ef       	ldi	r18, 0xF4	; 244
    17de:	20 93 49 01 	sts	0x0149, r18
  if (ovcnt16 > 65) {
    17e2:	c2 34       	cpi	r28, 0x42	; 66
    17e4:	d1 05       	cpc	r29, r1
    17e6:	88 f0       	brcs	.+34     	; 0x180a <ReadCapacity+0x2f4>
     cval_uncorrected /= 100;	// switch to next unit
    17e8:	24 e6       	ldi	r18, 0x64	; 100
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	40 e0       	ldi	r20, 0x00	; 0
    17ee:	50 e0       	ldi	r21, 0x00	; 0
    17f0:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
    17f4:	20 93 5a 01 	sts	0x015A, r18
    17f8:	30 93 5b 01 	sts	0x015B, r19
    17fc:	40 93 5c 01 	sts	0x015C, r20
    1800:	50 93 5d 01 	sts	0x015D, r21
     cpre += 2;			// set unit, prevent overflow
    1804:	86 ef       	ldi	r24, 0xF6	; 246
    1806:	80 93 49 01 	sts	0x0149, r24
  }
  cval_uncorrected *= RHmultip;		// 708
    180a:	60 91 00 01 	lds	r22, 0x0100
    180e:	70 91 01 01 	lds	r23, 0x0101
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	20 91 5a 01 	lds	r18, 0x015A
    181a:	30 91 5b 01 	lds	r19, 0x015B
    181e:	40 91 5c 01 	lds	r20, 0x015C
    1822:	50 91 5d 01 	lds	r21, 0x015D
    1826:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
  cval_uncorrected /= (F_CPU / 10000);	// divide by 100 (@ 1MHz clock), 800 (@ 8MHz clock)
    182a:	20 e2       	ldi	r18, 0x20	; 32
    182c:	33 e0       	ldi	r19, 0x03	; 3
    182e:	40 e0       	ldi	r20, 0x00	; 0
    1830:	50 e0       	ldi	r21, 0x00	; 0
    1832:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
    1836:	20 93 5a 01 	sts	0x015A, r18
    183a:	30 93 5b 01 	sts	0x015B, r19
    183e:	40 93 5c 01 	sts	0x015C, r20
    1842:	50 93 5d 01 	sts	0x015D, r21
  cval = cval_uncorrected;		// set the corrected cval
    1846:	20 93 7b 01 	sts	0x017B, r18
    184a:	30 93 7c 01 	sts	0x017C, r19
    184e:	40 93 7d 01 	sts	0x017D, r20
    1852:	50 93 7e 01 	sts	0x017E, r21
  Scale_C_with_vcc();
    1856:	0e 94 3b 0a 	call	0x1476	; 0x1476 <Scale_C_with_vcc>
  if (cpre == -12) {
    185a:	80 91 49 01 	lds	r24, 0x0149
    185e:	84 3f       	cpi	r24, 0xF4	; 244
    1860:	09 f0       	breq	.+2      	; 0x1864 <ReadCapacity+0x34e>
    1862:	55 c0       	rjmp	.+170    	; 0x190e <ReadCapacity+0x3f8>
#if COMP_SLEW1 > COMP_SLEW2
     if (cval < COMP_SLEW1) {
    1864:	c0 90 7b 01 	lds	r12, 0x017B
    1868:	d0 90 7c 01 	lds	r13, 0x017C
    186c:	e0 90 7d 01 	lds	r14, 0x017D
    1870:	f0 90 7e 01 	lds	r15, 0x017E
    1874:	80 ea       	ldi	r24, 0xA0	; 160
    1876:	c8 16       	cp	r12, r24
    1878:	8f e0       	ldi	r24, 0x0F	; 15
    187a:	d8 06       	cpc	r13, r24
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	e8 06       	cpc	r14, r24
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	f8 06       	cpc	r15, r24
    1884:	c0 f4       	brcc	.+48     	; 0x18b6 <ReadCapacity+0x3a0>
        // add slew rate dependent offset
        cval += (COMP_SLEW1 / (cval+COMP_SLEW2 ));
    1886:	a7 01       	movw	r20, r14
    1888:	96 01       	movw	r18, r12
    188a:	2c 54       	subi	r18, 0x4C	; 76
    188c:	3f 4f       	sbci	r19, 0xFF	; 255
    188e:	4f 4f       	sbci	r20, 0xFF	; 255
    1890:	5f 4f       	sbci	r21, 0xFF	; 255
    1892:	60 ea       	ldi	r22, 0xA0	; 160
    1894:	7f e0       	ldi	r23, 0x0F	; 15
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
    189e:	2c 0d       	add	r18, r12
    18a0:	3d 1d       	adc	r19, r13
    18a2:	4e 1d       	adc	r20, r14
    18a4:	5f 1d       	adc	r21, r15
    18a6:	20 93 7b 01 	sts	0x017B, r18
    18aa:	30 93 7c 01 	sts	0x017C, r19
    18ae:	40 93 7d 01 	sts	0x017D, r20
    18b2:	50 93 7e 01 	sts	0x017E, r21
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    18b6:	80 91 48 01 	lds	r24, 0x0148
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	81 5a       	subi	r24, 0xA1	; 161
    18be:	9d 4f       	sbci	r25, 0xFD	; 253
    18c0:	0e 94 29 19 	call	0x3252	; 0x3252 <__eerd_byte_m328p>
     if (cval > tmpint) {
    18c4:	20 91 7b 01 	lds	r18, 0x017B
    18c8:	30 91 7c 01 	lds	r19, 0x017C
    18cc:	40 91 7d 01 	lds	r20, 0x017D
    18d0:	50 91 7e 01 	lds	r21, 0x017E
        cval += (COMP_SLEW1 / (cval+COMP_SLEW2 ));
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    18d4:	90 e0       	ldi	r25, 0x00	; 0
     if (cval > tmpint) {
    18d6:	a0 e0       	ldi	r26, 0x00	; 0
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	82 17       	cp	r24, r18
    18dc:	93 07       	cpc	r25, r19
    18de:	a4 07       	cpc	r26, r20
    18e0:	b5 07       	cpc	r27, r21
    18e2:	68 f4       	brcc	.+26     	; 0x18fe <ReadCapacity+0x3e8>
         cval -= tmpint;		//subtract zero offset (pF)
    18e4:	28 1b       	sub	r18, r24
    18e6:	39 0b       	sbc	r19, r25
    18e8:	4a 0b       	sbc	r20, r26
    18ea:	5b 0b       	sbc	r21, r27
    18ec:	20 93 7b 01 	sts	0x017B, r18
    18f0:	30 93 7c 01 	sts	0x017C, r19
    18f4:	40 93 7d 01 	sts	0x017D, r20
    18f8:	50 93 7e 01 	sts	0x017E, r21
    18fc:	08 c0       	rjmp	.+16     	; 0x190e <ReadCapacity+0x3f8>
     } else {
         cval = 0;			//unsigned long may not reach negativ value
    18fe:	10 92 7b 01 	sts	0x017B, r1
    1902:	10 92 7c 01 	sts	0x017C, r1
    1906:	10 92 7d 01 	sts	0x017D, r1
    190a:	10 92 7e 01 	sts	0x017E, r1
  lcd_testpin(HighPin);
  lcd_space();
  DisplayValue(cval,cpre,'F',4);
  wait3s();
#endif
  R_DDR = HiPinR_L; 		//switch R_L for High-Pin to GND
    190e:	04 b9       	out	0x04, r16	; 4
#if F_CPU < 2000001
   if(cval < 50)
#else 
   if(cval < 25)
    1910:	80 91 7b 01 	lds	r24, 0x017B
    1914:	90 91 7c 01 	lds	r25, 0x017C
    1918:	a0 91 7d 01 	lds	r26, 0x017D
    191c:	b0 91 7e 01 	lds	r27, 0x017E
    1920:	89 31       	cpi	r24, 0x19	; 25
    1922:	91 05       	cpc	r25, r1
    1924:	a1 05       	cpc	r26, r1
    1926:	b1 05       	cpc	r27, r1
    1928:	78 f0       	brcs	.+30     	; 0x1948 <ReadCapacity+0x432>
#endif
      goto keinC;	//capacity to low, < 70pF @1MHz (35pF @8MHz)
   }
   // end low capacity 
checkDiodes:
   if((NumOfDiodes > 0)  && (PartFound != PART_FET)) {
    192a:	80 91 07 01 	lds	r24, 0x0107
    192e:	88 23       	and	r24, r24
    1930:	21 f0       	breq	.+8      	; 0x193a <ReadCapacity+0x424>
    1932:	80 91 09 01 	lds	r24, 0x0109
    1936:	83 30       	cpi	r24, 0x03	; 3
    1938:	39 f4       	brne	.+14     	; 0x1948 <ReadCapacity+0x432>
      wait1s();
#endif
      // nearly shure, that there is one or more diodes in reverse direction,
      // which would be wrongly detected as capacitor 
   } else {
      PartFound = PART_CAPACITOR;	//capacitor is found
    193a:	87 e0       	ldi	r24, 0x07	; 7
    193c:	80 93 09 01 	sts	0x0109, r24
      ca = LowPin;			// save LowPin
    1940:	90 92 60 01 	sts	0x0160, r9
      cb = HighPin;		// save HighPin
    1944:	10 93 0a 01 	sts	0x010A, r17
keinC:
  // discharge capacitor again
//  EntladePins();		// discharge capacitors
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    1948:	88 e0       	ldi	r24, 0x08	; 8
    194a:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GNG, no pull up
    194c:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    194e:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    1950:	15 b8       	out	0x05, r1	; 5
  return;
 } // end ReadCapacity()
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	1f 91       	pop	r17
    1958:	0f 91       	pop	r16
    195a:	ff 90       	pop	r15
    195c:	ef 90       	pop	r14
    195e:	df 90       	pop	r13
    1960:	cf 90       	pop	r12
    1962:	bf 90       	pop	r11
    1964:	af 90       	pop	r10
    1966:	9f 90       	pop	r9
    1968:	08 95       	ret

0000196a <RefVoltage>:

#endif

#ifdef AUTO_RH
void RefVoltage(void) {
    196a:	ff 92       	push	r15
    196c:	0f 93       	push	r16
    196e:	1f 93       	push	r17
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;

  #ifdef AUTO_CAL
  referenz = ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset));
    1974:	8d e5       	ldi	r24, 0x5D	; 93
    1976:	92 e0       	ldi	r25, 0x02	; 2
    1978:	0e 94 31 19 	call	0x3262	; 0x3262 <__eerd_word_m328p>
    197c:	20 91 42 01 	lds	r18, 0x0142
    1980:	30 91 43 01 	lds	r19, 0x0143
    1984:	28 0f       	add	r18, r24
    1986:	39 1f       	adc	r19, r25
  #else
  referenz = ref_mv + REF_C_KORR;
  #endif
  if (referenz >= Ref_Tab_Beginn) {
    1988:	83 e0       	ldi	r24, 0x03	; 3
    198a:	28 3e       	cpi	r18, 0xE8	; 232
    198c:	38 07       	cpc	r19, r24
    198e:	20 f0       	brcs	.+8      	; 0x1998 <RefVoltage+0x2e>
     referenz -= Ref_Tab_Beginn;
    1990:	c9 01       	movw	r24, r18
    1992:	88 5e       	subi	r24, 0xE8	; 232
    1994:	93 40       	sbci	r25, 0x03	; 3
    1996:	02 c0       	rjmp	.+4      	; 0x199c <RefVoltage+0x32>
  } else  {
     referenz = 0;		// limit to begin of table
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = referenz / Ref_Tab_Abstand;
    199c:	62 e3       	ldi	r22, 0x32	; 50
    199e:	70 e0       	ldi	r23, 0x00	; 0
    19a0:	0e 94 a1 18 	call	0x3142	; 0x3142 <__udivmodhi4>
  tabres = referenz % Ref_Tab_Abstand;
    19a4:	f8 2e       	mov	r15, r24
  tabres = Ref_Tab_Abstand-tabres;
  if (tabind > 7) {
     tabind = 7;		// limit to end of table
  }
  // interpolate the table of factors
  y1 = MEM_read_word(&RHtab[tabind]);
    19a6:	68 30       	cpi	r22, 0x08	; 8
    19a8:	08 f0       	brcs	.+2      	; 0x19ac <RefVoltage+0x42>
    19aa:	67 e0       	ldi	r22, 0x07	; 7
    19ac:	c6 2f       	mov	r28, r22
    19ae:	d0 e0       	ldi	r29, 0x00	; 0
    19b0:	ce 01       	movw	r24, r28
    19b2:	88 0f       	add	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	8a 54       	subi	r24, 0x4A	; 74
    19b8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ba:	0e 94 31 19 	call	0x3262	; 0x3262 <__eerd_word_m328p>
    19be:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RHtab[tabind+1]);
    19c0:	ce 01       	movw	r24, r28
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	88 54       	subi	r24, 0x48	; 72
    19c8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ca:	0e 94 31 19 	call	0x3262	; 0x3262 <__eerd_word_m328p>
    19ce:	9c 01       	movw	r18, r24
  } else  {
     referenz = 0;		// limit to begin of table
  }
  tabind = referenz / Ref_Tab_Abstand;
  tabres = referenz % Ref_Tab_Abstand;
  tabres = Ref_Tab_Abstand-tabres;
    19d0:	42 e3       	ldi	r20, 0x32	; 50
    19d2:	4f 19       	sub	r20, r15
  }
  // interpolate the table of factors
  y1 = MEM_read_word(&RHtab[tabind]);
  y2 = MEM_read_word(&RHtab[tabind+1]);
  // RHmultip is the interpolated factor to compute capacity from load time with 470k
  RHmultip = ((y1 - y2) * tabres + (Ref_Tab_Abstand/2)) / Ref_Tab_Abstand + y2;
    19d4:	50 e0       	ldi	r21, 0x00	; 0
    19d6:	08 1b       	sub	r16, r24
    19d8:	19 0b       	sbc	r17, r25
    19da:	40 9f       	mul	r20, r16
    19dc:	c0 01       	movw	r24, r0
    19de:	41 9f       	mul	r20, r17
    19e0:	90 0d       	add	r25, r0
    19e2:	50 9f       	mul	r21, r16
    19e4:	90 0d       	add	r25, r0
    19e6:	11 24       	eor	r1, r1
    19e8:	49 96       	adiw	r24, 0x19	; 25
    19ea:	62 e3       	ldi	r22, 0x32	; 50
    19ec:	70 e0       	ldi	r23, 0x00	; 0
    19ee:	0e 94 a1 18 	call	0x3142	; 0x3142 <__udivmodhi4>
    19f2:	62 0f       	add	r22, r18
    19f4:	73 1f       	adc	r23, r19
    19f6:	70 93 01 01 	sts	0x0101, r23
    19fa:	60 93 00 01 	sts	0x0100, r22
 }
    19fe:	df 91       	pop	r29
    1a00:	cf 91       	pop	r28
    1a02:	1f 91       	pop	r17
    1a04:	0f 91       	pop	r16
    1a06:	ff 90       	pop	r15
    1a08:	08 95       	ret

00001a0a <lcd_clear_line>:
#endif

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
    1a0a:	1f 93       	push	r17
    1a0c:	14 e1       	ldi	r17, 0x14	; 20
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    lcd_space();
    1a0e:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_space>
    1a12:	11 50       	subi	r17, 0x01	; 1

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    1a14:	e1 f7       	brne	.-8      	; 0x1a0e <lcd_clear_line+0x4>
    lcd_space();
 }
}
    1a16:	1f 91       	pop	r17
    1a18:	08 95       	ret

00001a1a <DisplayValue>:
 *    e.g: p = 10^-12 -> -12
 *  - unit character (0 = none)
 *  digits = 2, 3 or 4
 */
void DisplayValue(unsigned long Value, int8_t Exponent, unsigned char Unit, unsigned char digits)
{
    1a1a:	2f 92       	push	r2
    1a1c:	3f 92       	push	r3
    1a1e:	4f 92       	push	r4
    1a20:	5f 92       	push	r5
    1a22:	7f 92       	push	r7
    1a24:	8f 92       	push	r8
    1a26:	9f 92       	push	r9
    1a28:	af 92       	push	r10
    1a2a:	bf 92       	push	r11
    1a2c:	cf 92       	push	r12
    1a2e:	df 92       	push	r13
    1a30:	ef 92       	push	r14
    1a32:	ff 92       	push	r15
    1a34:	0f 93       	push	r16
    1a36:	1f 93       	push	r17
    1a38:	df 93       	push	r29
    1a3a:	cf 93       	push	r28
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	2f 97       	sbiw	r28, 0x0f	; 15
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	de bf       	out	0x3e, r29	; 62
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	cd bf       	out	0x3d, r28	; 61
    1a4c:	6b 01       	movw	r12, r22
    1a4e:	7c 01       	movw	r14, r24
    1a50:	14 2f       	mov	r17, r20
    1a52:	72 2e       	mov	r7, r18
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
    1a54:	03 30       	cpi	r16, 0x03	; 3
    1a56:	29 f0       	breq	.+10     	; 0x1a62 <DisplayValue+0x48>
  if (digits == 4) Limit = 10000;
    1a58:	04 30       	cpi	r16, 0x04	; 4
    1a5a:	31 f0       	breq	.+12     	; 0x1a68 <DisplayValue+0x4e>
  uint8_t           Offset;		/* exponent of offset to next 10^3 step */
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
    1a5c:	84 e6       	ldi	r24, 0x64	; 100
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	14 c0       	rjmp	.+40     	; 0x1a8a <DisplayValue+0x70>
  if (digits == 3) Limit = 1000;
    1a62:	88 ee       	ldi	r24, 0xE8	; 232
    1a64:	93 e0       	ldi	r25, 0x03	; 3
    1a66:	11 c0       	rjmp	.+34     	; 0x1a8a <DisplayValue+0x70>
  if (digits == 4) Limit = 10000;
    1a68:	80 e1       	ldi	r24, 0x10	; 16
    1a6a:	97 e2       	ldi	r25, 0x27	; 39
    1a6c:	0e c0       	rjmp	.+28     	; 0x1a8a <DisplayValue+0x70>
  while (Value >= Limit)
  {
    Value += 5;				/* for automagic rounding */
    1a6e:	c7 01       	movw	r24, r14
    1a70:	b6 01       	movw	r22, r12
    1a72:	6b 5f       	subi	r22, 0xFB	; 251
    1a74:	7f 4f       	sbci	r23, 0xFF	; 255
    1a76:	8f 4f       	sbci	r24, 0xFF	; 255
    1a78:	9f 4f       	sbci	r25, 0xFF	; 255
    Value = Value / 10;			/* scale down by 10^1 */
    1a7a:	a5 01       	movw	r20, r10
    1a7c:	94 01       	movw	r18, r8
    1a7e:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
    1a82:	69 01       	movw	r12, r18
    1a84:	7a 01       	movw	r14, r20
    Exponent++;				/* increase exponent by 1 */
    1a86:	1f 5f       	subi	r17, 0xFF	; 255
    1a88:	08 c0       	rjmp	.+16     	; 0x1a9a <DisplayValue+0x80>


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
  if (digits == 4) Limit = 10000;
  while (Value >= Limit)
    1a8a:	1c 01       	movw	r2, r24
    1a8c:	44 24       	eor	r4, r4
    1a8e:	55 24       	eor	r5, r5
  {
    Value += 5;				/* for automagic rounding */
    Value = Value / 10;			/* scale down by 10^1 */
    1a90:	7a e0       	ldi	r23, 0x0A	; 10
    1a92:	87 2e       	mov	r8, r23
    1a94:	91 2c       	mov	r9, r1
    1a96:	a1 2c       	mov	r10, r1
    1a98:	b1 2c       	mov	r11, r1


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
  if (digits == 4) Limit = 10000;
  while (Value >= Limit)
    1a9a:	c2 14       	cp	r12, r2
    1a9c:	d3 04       	cpc	r13, r3
    1a9e:	e4 04       	cpc	r14, r4
    1aa0:	f5 04       	cpc	r15, r5
    1aa2:	28 f7       	brcc	.-54     	; 0x1a6e <DisplayValue+0x54>


  /*
   *  determine prefix
   */
  Length = Exponent + 12;
    1aa4:	81 2f       	mov	r24, r17
    1aa6:	84 5f       	subi	r24, 0xF4	; 244
    1aa8:	83 31       	cpi	r24, 0x13	; 19
    1aaa:	08 f0       	brcs	.+2      	; 0x1aae <DisplayValue+0x94>
    1aac:	82 e1       	ldi	r24, 0x12	; 18
  if (Length <  0) Length = 0;		/* Limit to minimum prefix */
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
  Index = Length / 3;
    1aae:	23 e0       	ldi	r18, 0x03	; 3
  Offset = Length % 3;
    1ab0:	62 2f       	mov	r22, r18
    1ab2:	0e 94 95 18 	call	0x312a	; 0x312a <__udivmodqi4>
    1ab6:	19 2f       	mov	r17, r25
    if (Offset > 0)
    1ab8:	99 23       	and	r25, r25
    1aba:	19 f0       	breq	.+6      	; 0x1ac2 <DisplayValue+0xa8>
    {
      Index++;				/* adjust index for exponent offset, take next prefix */
    1abc:	8f 5f       	subi	r24, 0xFF	; 255
      Offset = 3 - Offset;		/* reverse value (1 or 2) */
    1abe:	29 1b       	sub	r18, r25
    1ac0:	12 2f       	mov	r17, r18
    }
  Prefix = MEM_read_byte((uint8_t *)(&PrefixTab[Index]));   /* look up prefix in table */
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	8a 5a       	subi	r24, 0xAA	; 170
    1ac6:	9d 4f       	sbci	r25, 0xFD	; 253
    1ac8:	0e 94 29 19 	call	0x3252	; 0x3252 <__eerd_byte_m328p>
    1acc:	b8 2e       	mov	r11, r24
  /*
   *  display value
   */

  /* convert value into string */
  utoa((unsigned int)Value, OutBuffer, 10);
    1ace:	c6 01       	movw	r24, r12
    1ad0:	6e 01       	movw	r12, r28
    1ad2:	08 94       	sec
    1ad4:	c1 1c       	adc	r12, r1
    1ad6:	d1 1c       	adc	r13, r1
    1ad8:	b6 01       	movw	r22, r12
    1ada:	4a e0       	ldi	r20, 0x0A	; 10
    1adc:	50 e0       	ldi	r21, 0x00	; 0
    1ade:	0e 94 13 19 	call	0x3226	; 0x3226 <utoa>
  Length = strlen(OutBuffer);
    1ae2:	f6 01       	movw	r30, r12
    1ae4:	01 90       	ld	r0, Z+
    1ae6:	00 20       	and	r0, r0
    1ae8:	e9 f7       	brne	.-6      	; 0x1ae4 <DisplayValue+0xca>
    1aea:	31 97       	sbiw	r30, 0x01	; 1
    1aec:	2e 2e       	mov	r2, r30
    1aee:	2c 18       	sub	r2, r12

  /* position of dot */
  Exponent = Length - Offset;		/* calculate position */
    1af0:	82 2c       	mov	r8, r2
    1af2:	81 1a       	sub	r8, r17

  if (Exponent <= 0)			/* we have to prepend "0." */
    1af4:	18 14       	cp	r1, r8
    1af6:	44 f0       	brlt	.+16     	; 0x1b08 <DisplayValue+0xee>
  {
    /* 0: factor 10 / -1: factor 100 */
//    lcd_data('0');
    lcd_data('.');
    1af8:	8e e2       	ldi	r24, 0x2E	; 46
    1afa:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
    if (Exponent < 0) lcd_data('0');	/* extra 0 for factor 100 */
    1afe:	88 20       	and	r8, r8
    1b00:	19 f0       	breq	.+6      	; 0x1b08 <DisplayValue+0xee>
    1b02:	80 e3       	ldi	r24, 0x30	; 48
    1b04:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
  }

  if (Offset == 0) Exponent = -1;	/* disable dot if not needed */
    1b08:	11 23       	and	r17, r17
    1b0a:	11 f4       	brne	.+4      	; 0x1b10 <DisplayValue+0xf6>
    1b0c:	88 24       	eor	r8, r8
    1b0e:	8a 94       	dec	r8
    1b10:	6e 01       	movw	r12, r28
    1b12:	08 94       	sec
    1b14:	c1 1c       	adc	r12, r1
    1b16:	d1 1c       	adc	r13, r1
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    1b18:	00 e0       	ldi	r16, 0x00	; 0
    1b1a:	10 e0       	ldi	r17, 0x00	; 0
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    Index++;				/* next one */
    if (Index == Exponent) {
    1b1c:	99 24       	eor	r9, r9
    1b1e:	87 fc       	sbrc	r8, 7
    1b20:	90 94       	com	r9
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    1b22:	0d c0       	rjmp	.+26     	; 0x1b3e <DisplayValue+0x124>
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    1b24:	0f 5f       	subi	r16, 0xFF	; 255
    1b26:	1f 4f       	sbci	r17, 0xFF	; 255
    1b28:	f6 01       	movw	r30, r12
    1b2a:	81 91       	ld	r24, Z+
    1b2c:	6f 01       	movw	r12, r30
    1b2e:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
    Index++;				/* next one */
    if (Index == Exponent) {
    1b32:	08 15       	cp	r16, r8
    1b34:	19 05       	cpc	r17, r9
    1b36:	19 f4       	brne	.+6      	; 0x1b3e <DisplayValue+0x124>
      lcd_data('.');			/* display dot */
    1b38:	8e e2       	ldi	r24, 0x2E	; 46
    1b3a:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    1b3e:	02 15       	cp	r16, r2
    1b40:	88 f3       	brcs	.-30     	; 0x1b24 <DisplayValue+0x10a>
      lcd_data('.');			/* display dot */
    }
  }

  /* display prefix and unit */
  if (Prefix != 0) lcd_data(Prefix);
    1b42:	bb 20       	and	r11, r11
    1b44:	19 f0       	breq	.+6      	; 0x1b4c <DisplayValue+0x132>
    1b46:	8b 2d       	mov	r24, r11
    1b48:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
  if (Unit) lcd_data(Unit);
    1b4c:	77 20       	and	r7, r7
    1b4e:	19 f0       	breq	.+6      	; 0x1b56 <DisplayValue+0x13c>
    1b50:	87 2d       	mov	r24, r7
    1b52:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
}
    1b56:	2f 96       	adiw	r28, 0x0f	; 15
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	1f 91       	pop	r17
    1b68:	0f 91       	pop	r16
    1b6a:	ff 90       	pop	r15
    1b6c:	ef 90       	pop	r14
    1b6e:	df 90       	pop	r13
    1b70:	cf 90       	pop	r12
    1b72:	bf 90       	pop	r11
    1b74:	af 90       	pop	r10
    1b76:	9f 90       	pop	r9
    1b78:	8f 90       	pop	r8
    1b7a:	7f 90       	pop	r7
    1b7c:	5f 90       	pop	r5
    1b7e:	4f 90       	pop	r4
    1b80:	3f 90       	pop	r3
    1b82:	2f 90       	pop	r2
    1b84:	08 95       	ret

00001b86 <RvalOut>:
   }
}

#ifdef R_MESS
  #define AUSGABE_FUNKTION
void RvalOut(uint8_t ii) {	
    1b86:	0f 93       	push	r16
   // output of resistor value

   DisplayValue(resis[ii].rx,-1,LCD_CHAR_OMEGA,4);
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	2b e0       	ldi	r18, 0x0B	; 11
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	82 9f       	mul	r24, r18
    1b90:	f0 01       	movw	r30, r0
    1b92:	83 9f       	mul	r24, r19
    1b94:	f0 0d       	add	r31, r0
    1b96:	92 9f       	mul	r25, r18
    1b98:	f0 0d       	add	r31, r0
    1b9a:	11 24       	eor	r1, r1
    1b9c:	e5 5e       	subi	r30, 0xE5	; 229
    1b9e:	fe 4f       	sbci	r31, 0xFE	; 254
    1ba0:	60 81       	ld	r22, Z
    1ba2:	71 81       	ldd	r23, Z+1	; 0x01
    1ba4:	82 81       	ldd	r24, Z+2	; 0x02
    1ba6:	93 81       	ldd	r25, Z+3	; 0x03
    1ba8:	4f ef       	ldi	r20, 0xFF	; 255
    1baa:	24 ef       	ldi	r18, 0xF4	; 244
    1bac:	04 e0       	ldi	r16, 0x04	; 4
    1bae:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DisplayValue>
   lcd_space();
    1bb2:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_space>
 }
    1bb6:	0f 91       	pop	r16
    1bb8:	08 95       	ret

00001bba <mVAusgabe>:
   lcd_line2(); 				//2. row
   lcd_fix_string(Uf);			//"Uf="
   mVAusgabe(bcdnum >> 4);
   mVAusgabe(bcdnum & 0x0f);
}
void mVAusgabe(uint8_t nn) {
    1bba:	0f 93       	push	r16
   if (nn < 3) {
    1bbc:	83 30       	cpi	r24, 0x03	; 3
    1bbe:	98 f4       	brcc	.+38     	; 0x1be6 <mVAusgabe+0x2c>
      // Output in mV units
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
    1bc0:	e8 2f       	mov	r30, r24
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	ee 0f       	add	r30, r30
    1bc6:	ff 1f       	adc	r31, r31
    1bc8:	ee 0f       	add	r30, r30
    1bca:	ff 1f       	adc	r31, r31
    1bcc:	ed 59       	subi	r30, 0x9D	; 157
    1bce:	fe 4f       	sbci	r31, 0xFE	; 254
    1bd0:	62 81       	ldd	r22, Z+2	; 0x02
    1bd2:	73 81       	ldd	r23, Z+3	; 0x03
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	4d ef       	ldi	r20, 0xFD	; 253
    1bda:	26 e5       	ldi	r18, 0x56	; 86
    1bdc:	03 e0       	ldi	r16, 0x03	; 3
    1bde:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DisplayValue>
      lcd_space();
    1be2:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_space>
   }
}
    1be6:	0f 91       	pop	r16
    1be8:	08 95       	ret

00001bea <UfAusgabe>:
// output of flux voltage for 1-2 diodes in row 2
// bcdnum = Numbers of both Diodes:
// higher 4 Bit  number of first Diode
// lower 4 Bit  number of second Diode (Structure diodes[nn])
// if number >= 3  no output is done
void UfAusgabe(uint8_t bcdnum) {
    1bea:	1f 93       	push	r17
    1bec:	18 2f       	mov	r17, r24

   lcd_line2(); 				//2. row
    1bee:	80 ec       	ldi	r24, 0xC0	; 192
    1bf0:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
   lcd_fix_string(Uf);			//"Uf="
    1bf4:	82 e9       	ldi	r24, 0x92	; 146
    1bf6:	91 e0       	ldi	r25, 0x01	; 1
    1bf8:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
   mVAusgabe(bcdnum >> 4);
    1bfc:	81 2f       	mov	r24, r17
    1bfe:	82 95       	swap	r24
    1c00:	8f 70       	andi	r24, 0x0F	; 15
    1c02:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <mVAusgabe>
   mVAusgabe(bcdnum & 0x0f);
    1c06:	81 2f       	mov	r24, r17
    1c08:	8f 70       	andi	r24, 0x0F	; 15
    1c0a:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <mVAusgabe>
}
    1c0e:	1f 91       	pop	r17
    1c10:	08 95       	ret

00001c12 <AutoCheck>:
void AutoCheck(void) {
    1c12:	2f 92       	push	r2
    1c14:	3f 92       	push	r3
    1c16:	4f 92       	push	r4
    1c18:	5f 92       	push	r5
    1c1a:	6f 92       	push	r6
    1c1c:	7f 92       	push	r7
    1c1e:	8f 92       	push	r8
    1c20:	9f 92       	push	r9
    1c22:	af 92       	push	r10
    1c24:	bf 92       	push	r11
    1c26:	cf 92       	push	r12
    1c28:	df 92       	push	r13
    1c2a:	ef 92       	push	r14
    1c2c:	ff 92       	push	r15
    1c2e:	0f 93       	push	r16
    1c30:	1f 93       	push	r17
    1c32:	df 93       	push	r29
    1c34:	cf 93       	push	r28
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
    1c3a:	2e 97       	sbiw	r28, 0x0e	; 14
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	f8 94       	cli
    1c40:	de bf       	out	0x3e, r29	; 62
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	cd bf       	out	0x3d, r28	; 61

#ifdef AUTO_CAL
  uint8_t cap_found;	// counter for found capacitor
  int8_t udiff2;
#endif
  ADC_PORT = TXD_VAL;
    1c46:	88 e0       	ldi	r24, 0x08	; 8
    1c48:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = TXD_MSK;
    1c4a:	87 b9       	out	0x07, r24	; 7
  R_PORT = (1<<(TP1*2));		//Pin 1 over RL to +
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	85 b9       	out	0x05, r24	; 5
  R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//Pin 2 over RL to -
    1c50:	85 e0       	ldi	r24, 0x05	; 5
    1c52:	84 b9       	out	0x04, r24	; 4
  adcmv[0] = W5msReadADC(PC0);		// voltage at Pin 1
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
    1c5a:	8c 01       	movw	r16, r24
    1c5c:	9a 83       	std	Y+2, r25	; 0x02
    1c5e:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = ReadADC(PC1);		// voltage at Pin 2
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
    1c66:	7c 01       	movw	r14, r24
    1c68:	9c 83       	std	Y+4, r25	; 0x04
    1c6a:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = ReadADC(PC2);		// voltage at Pin 3
    1c6c:	82 e0       	ldi	r24, 0x02	; 2
    1c6e:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
    1c72:	9c 01       	movw	r18, r24
    1c74:	9e 83       	std	Y+6, r25	; 0x06
    1c76:	8d 83       	std	Y+5, r24	; 0x05
  if (abs((int)(adcmv[1] - adcmv[0])) > 20) {
    1c78:	e0 1a       	sub	r14, r16
    1c7a:	f1 0a       	sbc	r15, r17
    1c7c:	f7 fe       	sbrs	r15, 7
    1c7e:	04 c0       	rjmp	.+8      	; 0x1c88 <AutoCheck+0x76>
    1c80:	f0 94       	com	r15
    1c82:	e1 94       	neg	r14
    1c84:	f1 08       	sbc	r15, r1
    1c86:	f3 94       	inc	r15
    1c88:	85 e1       	ldi	r24, 0x15	; 21
    1c8a:	e8 16       	cp	r14, r24
    1c8c:	f1 04       	cpc	r15, r1
    1c8e:	0c f0       	brlt	.+2      	; 0x1c92 <AutoCheck+0x80>
    1c90:	3f c4       	rjmp	.+2174   	; 0x2510 <AutoCheck+0x8fe>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[2] - adcmv[0])) > 20) {
    1c92:	20 1b       	sub	r18, r16
    1c94:	31 0b       	sbc	r19, r17
    1c96:	37 ff       	sbrs	r19, 7
    1c98:	03 c0       	rjmp	.+6      	; 0x1ca0 <AutoCheck+0x8e>
    1c9a:	30 95       	com	r19
    1c9c:	21 95       	neg	r18
    1c9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca0:	25 31       	cpi	r18, 0x15	; 21
    1ca2:	31 05       	cpc	r19, r1
    1ca4:	0c f0       	brlt	.+2      	; 0x1ca8 <AutoCheck+0x96>
    1ca6:	34 c4       	rjmp	.+2152   	; 0x2510 <AutoCheck+0x8fe>
     return;				//difference to big, no selftest
  }
  if (abs((int)((adcmv[0]*2) - ADCconfig.U_AVCC)) > 60) {
    1ca8:	00 0f       	add	r16, r16
    1caa:	11 1f       	adc	r17, r17
    1cac:	80 91 40 01 	lds	r24, 0x0140
    1cb0:	90 91 41 01 	lds	r25, 0x0141
    1cb4:	08 1b       	sub	r16, r24
    1cb6:	19 0b       	sbc	r17, r25
    1cb8:	17 ff       	sbrs	r17, 7
    1cba:	03 c0       	rjmp	.+6      	; 0x1cc2 <AutoCheck+0xb0>
    1cbc:	10 95       	com	r17
    1cbe:	01 95       	neg	r16
    1cc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc2:	0d 33       	cpi	r16, 0x3D	; 61
    1cc4:	11 05       	cpc	r17, r1
    1cc6:	0c f0       	brlt	.+2      	; 0x1cca <AutoCheck+0xb8>
    1cc8:	23 c4       	rjmp	.+2118   	; 0x2510 <AutoCheck+0x8fe>
     return;				//difference to big, no selftest
  }
  R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//Pin 3 over RL to - (Pin 1 over RL to +)
    1cca:	81 e1       	ldi	r24, 0x11	; 17
    1ccc:	84 b9       	out	0x04, r24	; 4
  adcmv[0] = W5msReadADC(PC0);		// voltage at Pin 1
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
    1cd4:	8c 01       	movw	r16, r24
    1cd6:	9a 83       	std	Y+2, r25	; 0x02
    1cd8:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = ReadADC(PC1);		// voltage at Pin 2
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
    1ce0:	7c 01       	movw	r14, r24
    1ce2:	9c 83       	std	Y+4, r25	; 0x04
    1ce4:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = ReadADC(PC2);		// voltage at Pin 3
    1ce6:	82 e0       	ldi	r24, 0x02	; 2
    1ce8:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
    1cec:	9c 01       	movw	r18, r24
    1cee:	9e 83       	std	Y+6, r25	; 0x06
    1cf0:	8d 83       	std	Y+5, r24	; 0x05
  if (abs((int)(adcmv[1] - adcmv[0])) > 20) {
    1cf2:	e0 1a       	sub	r14, r16
    1cf4:	f1 0a       	sbc	r15, r17
    1cf6:	f7 fe       	sbrs	r15, 7
    1cf8:	04 c0       	rjmp	.+8      	; 0x1d02 <AutoCheck+0xf0>
    1cfa:	f0 94       	com	r15
    1cfc:	e1 94       	neg	r14
    1cfe:	f1 08       	sbc	r15, r1
    1d00:	f3 94       	inc	r15
    1d02:	e5 e1       	ldi	r30, 0x15	; 21
    1d04:	ee 16       	cp	r14, r30
    1d06:	f1 04       	cpc	r15, r1
    1d08:	0c f0       	brlt	.+2      	; 0x1d0c <AutoCheck+0xfa>
    1d0a:	02 c4       	rjmp	.+2052   	; 0x2510 <AutoCheck+0x8fe>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[2] - adcmv[0])) > 20) {
    1d0c:	20 1b       	sub	r18, r16
    1d0e:	31 0b       	sbc	r19, r17
    1d10:	37 ff       	sbrs	r19, 7
    1d12:	03 c0       	rjmp	.+6      	; 0x1d1a <AutoCheck+0x108>
    1d14:	30 95       	com	r19
    1d16:	21 95       	neg	r18
    1d18:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1a:	25 31       	cpi	r18, 0x15	; 21
    1d1c:	31 05       	cpc	r19, r1
    1d1e:	0c f0       	brlt	.+2      	; 0x1d22 <AutoCheck+0x110>
    1d20:	f7 c3       	rjmp	.+2030   	; 0x2510 <AutoCheck+0x8fe>
     return;				//difference to big, no selftest
  }
  if (abs((int)((adcmv[0]*2) - ADCconfig.U_AVCC)) > 60) {
    1d22:	00 0f       	add	r16, r16
    1d24:	11 1f       	adc	r17, r17
    1d26:	80 91 40 01 	lds	r24, 0x0140
    1d2a:	90 91 41 01 	lds	r25, 0x0141
    1d2e:	08 1b       	sub	r16, r24
    1d30:	19 0b       	sbc	r17, r25
    1d32:	17 ff       	sbrs	r17, 7
    1d34:	03 c0       	rjmp	.+6      	; 0x1d3c <AutoCheck+0x12a>
    1d36:	10 95       	com	r17
    1d38:	01 95       	neg	r16
    1d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3c:	0d 33       	cpi	r16, 0x3D	; 61
    1d3e:	11 05       	cpc	r17, r1
    1d40:	0c f0       	brlt	.+2      	; 0x1d44 <AutoCheck+0x132>
    1d42:	e6 c3       	rjmp	.+1996   	; 0x2510 <AutoCheck+0x8fe>
     return;				//difference to big, no selftest
  }
#ifdef WITH_SELFTEST
  lcd_clear();
    1d44:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clear>
  lcd_line1();
    1d48:	80 e8       	ldi	r24, 0x80	; 128
    1d4a:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
    1d4e:	88 e3       	ldi	r24, 0x38	; 56
    1d50:	91 e0       	ldi	r25, 0x01	; 1
    1d52:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
  wait1s();
    1d56:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <wait1000ms>
    1d5a:	44 24       	eor	r4, r4
    1d5c:	55 24       	eor	r5, r5
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    1d5e:	11 e0       	ldi	r17, 0x01	; 1
           adcmv[2] = W20msReadADC(TP3);
           lcd_fix2_string(RH1L);	// "RH_Lo="
        }
                                        //############################################
        if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to VCC
    1d60:	72 e0       	ldi	r23, 0x02	; 2
    1d62:	a7 2e       	mov	r10, r23
           R_PORT = 2<<(TP1*2);
           adcmv[0] = W20msReadADC(TP1) - ADCconfig.U_AVCC;
           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to VCC
    1d64:	68 e0       	ldi	r22, 0x08	; 8
    1d66:	c6 2e       	mov	r12, r22
           R_PORT = 2<<(TP2*2);
           adcmv[1] = W20msReadADC(TP2) - ADCconfig.U_AVCC;
           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to VCC
    1d68:	50 e2       	ldi	r21, 0x20	; 32
    1d6a:	b5 2e       	mov	r11, r21
           lcd_string(utoa(RHmultip, outval, 10));
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
    1d6c:	45 e0       	ldi	r20, 0x05	; 5
    1d6e:	f4 2e       	mov	r15, r20
           adcmv[0] = W20msReadADC(TP1);
           adcmv[0] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1d70:	3c e3       	ldi	r19, 0x3C	; 60
    1d72:	63 2e       	mov	r6, r19
    1d74:	39 ec       	ldi	r19, 0xC9	; 201
    1d76:	73 2e       	mov	r7, r19
    1d78:	3f ef       	ldi	r19, 0xFF	; 255
    1d7a:	83 2e       	mov	r8, r19
    1d7c:	3f ef       	ldi	r19, 0xFF	; 255
    1d7e:	93 2e       	mov	r9, r19
    1d80:	50 c1       	rjmp	.+672    	; 0x2022 <AutoCheck+0x410>
  wait1s();
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
        lcd_line2();			//Cursor to column 1, row 2
    1d82:	80 ec       	ldi	r24, 0xC0	; 192
    1d84:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
        lcd_clear_line();		// clear total line
    1d88:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    1d8c:	80 e8       	ldi	r24, 0x80	; 128
    1d8e:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
        lcd_clear_line();		// clear total line
    1d92:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    1d96:	80 e8       	ldi	r24, 0x80	; 128
    1d98:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
        lcd_data('T');			//output the Testmode "T"
    1d9c:	84 e5       	ldi	r24, 0x54	; 84
    1d9e:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
        lcd_string(utoa(tt, outval, 10));	//output Test number
    1da2:	c2 01       	movw	r24, r4
    1da4:	6f e0       	ldi	r22, 0x0F	; 15
    1da6:	71 e0       	ldi	r23, 0x01	; 1
    1da8:	4a e0       	ldi	r20, 0x0A	; 10
    1daa:	50 e0       	ldi	r21, 0x00	; 0
    1dac:	0e 94 13 19 	call	0x3226	; 0x3226 <utoa>
    1db0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_string>
        lcd_space();
    1db4:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_space>
                                        //############################################
        if (tt == 1) {   // output of reference voltage and factors for capacity measurement
    1db8:	fe 2d       	mov	r31, r14
    1dba:	f1 30       	cpi	r31, 0x01	; 1
    1dbc:	21 f5       	brne	.+72     	; 0x1e06 <AutoCheck+0x1f4>
           ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    1dbe:	2e eb       	ldi	r18, 0xBE	; 190
    1dc0:	20 93 3c 01 	sts	0x013C, r18
 #ifdef WITH_AUTO_REF
           (void) ReadADC(0x0e);	// read reference voltage 
           ref_mv = W5msReadADC(0x0e);	// read reference voltage 
           RefVoltage();		//compute RHmultip = f(reference voltage)
 #endif
           lcd_fix2_string(URefT);	//"URef="
    1dc4:	8b ec       	ldi	r24, 0xCB	; 203
    1dc6:	91 e0       	ldi	r25, 0x01	; 1
    1dc8:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
           DisplayValue(ref_mv,-3,'V',4);
    1dcc:	60 91 42 01 	lds	r22, 0x0142
    1dd0:	70 91 43 01 	lds	r23, 0x0143
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	4d ef       	ldi	r20, 0xFD	; 253
    1dda:	26 e5       	ldi	r18, 0x56	; 86
    1ddc:	04 e0       	ldi	r16, 0x04	; 4
    1dde:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DisplayValue>
           lcd_line2();			//Cursor to column 1, row 2
    1de2:	80 ec       	ldi	r24, 0xC0	; 192
    1de4:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
           lcd_fix2_string(RHfakt);	//"RHf="
    1de8:	80 ed       	ldi	r24, 0xD0	; 208
    1dea:	91 e0       	ldi	r25, 0x01	; 1
    1dec:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
           lcd_string(utoa(RHmultip, outval, 10));
    1df0:	80 91 00 01 	lds	r24, 0x0100
    1df4:	90 91 01 01 	lds	r25, 0x0101
    1df8:	6f e0       	ldi	r22, 0x0F	; 15
    1dfa:	71 e0       	ldi	r23, 0x01	; 1
    1dfc:	4a e0       	ldi	r20, 0x0A	; 10
    1dfe:	50 e0       	ldi	r21, 0x00	; 0
    1e00:	0e 94 13 19 	call	0x3226	; 0x3226 <utoa>
    1e04:	f5 c0       	rjmp	.+490    	; 0x1ff0 <AutoCheck+0x3de>
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
    1e06:	8e 2d       	mov	r24, r14
    1e08:	82 30       	cpi	r24, 0x02	; 2
    1e0a:	09 f0       	breq	.+2      	; 0x1e0e <AutoCheck+0x1fc>
    1e0c:	52 c0       	rjmp	.+164    	; 0x1eb2 <AutoCheck+0x2a0>
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	85 b9       	out	0x05, r24	; 5
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
    1e12:	f4 b8       	out	0x04, r15	; 4
           adcmv[0] = W20msReadADC(TP1);
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	0e 94 03 18 	call	0x3006	; 0x3006 <W20msReadADC>
    1e1a:	8c 01       	movw	r16, r24
           adcmv[0] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1e1c:	60 91 40 01 	lds	r22, 0x0140
    1e20:	70 91 41 01 	lds	r23, 0x0141
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	28 e5       	ldi	r18, 0x58	; 88
    1e2a:	3b e1       	ldi	r19, 0x1B	; 27
    1e2c:	40 e0       	ldi	r20, 0x00	; 0
    1e2e:	50 e0       	ldi	r21, 0x00	; 0
    1e30:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
    1e34:	a4 01       	movw	r20, r8
    1e36:	93 01       	movw	r18, r6
    1e38:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__divmodsi4>
    1e3c:	02 0f       	add	r16, r18
    1e3e:	13 1f       	adc	r17, r19
    1e40:	1a 83       	std	Y+2, r17	; 0x02
    1e42:	09 83       	std	Y+1, r16	; 0x01
           R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//RL3 to -
    1e44:	34 b8       	out	0x04, r3	; 4
           adcmv[1] = W20msReadADC(TP1);
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	0e 94 03 18 	call	0x3006	; 0x3006 <W20msReadADC>
    1e4c:	8c 01       	movw	r16, r24
           adcmv[1] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1e4e:	60 91 40 01 	lds	r22, 0x0140
    1e52:	70 91 41 01 	lds	r23, 0x0141
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	28 e5       	ldi	r18, 0x58	; 88
    1e5c:	3b e1       	ldi	r19, 0x1B	; 27
    1e5e:	40 e0       	ldi	r20, 0x00	; 0
    1e60:	50 e0       	ldi	r21, 0x00	; 0
    1e62:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
    1e66:	a4 01       	movw	r20, r8
    1e68:	93 01       	movw	r18, r6
    1e6a:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__divmodsi4>
    1e6e:	02 0f       	add	r16, r18
    1e70:	13 1f       	adc	r17, r19
    1e72:	1c 83       	std	Y+4, r17	; 0x04
    1e74:	0b 83       	std	Y+3, r16	; 0x03
           R_PORT = 1<<(TP2*2);		//RL2 to VCC
    1e76:	25 b8       	out	0x05, r2	; 5
           R_DDR = (1<<(TP2*2)) | (1<<(TP3*2));	//RL3 to -
    1e78:	e4 e1       	ldi	r30, 0x14	; 20
    1e7a:	e4 b9       	out	0x04, r30	; 4
           adcmv[2] = W20msReadADC(TP2);
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	0e 94 03 18 	call	0x3006	; 0x3006 <W20msReadADC>
    1e82:	8c 01       	movw	r16, r24
           adcmv[2] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1e84:	60 91 40 01 	lds	r22, 0x0140
    1e88:	70 91 41 01 	lds	r23, 0x0141
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	28 e5       	ldi	r18, 0x58	; 88
    1e92:	3b e1       	ldi	r19, 0x1B	; 27
    1e94:	40 e0       	ldi	r20, 0x00	; 0
    1e96:	50 e0       	ldi	r21, 0x00	; 0
    1e98:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
    1e9c:	a4 01       	movw	r20, r8
    1e9e:	93 01       	movw	r18, r6
    1ea0:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__divmodsi4>
    1ea4:	02 0f       	add	r16, r18
    1ea6:	13 1f       	adc	r17, r19
    1ea8:	1e 83       	std	Y+6, r17	; 0x06
    1eaa:	0d 83       	std	Y+5, r16	; 0x05
           lcd_fix2_string(RLRL);	// "RLRL"
    1eac:	8d ed       	ldi	r24, 0xDD	; 221
    1eae:	91 e0       	ldi	r25, 0x01	; 1
    1eb0:	49 c0       	rjmp	.+146    	; 0x1f44 <AutoCheck+0x332>
        }
                                        //############################################
        if (tt == 3) { // how equal are the RH resistors
    1eb2:	fe 2d       	mov	r31, r14
    1eb4:	f3 30       	cpi	r31, 0x03	; 3
    1eb6:	41 f5       	brne	.+80     	; 0x1f08 <AutoCheck+0x2f6>
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    1eb8:	a5 b8       	out	0x05, r10	; 5
           R_DDR = (2<<(TP1*2)) | (2<<(TP2*2));	//RH2 to -
    1eba:	2a e0       	ldi	r18, 0x0A	; 10
    1ebc:	24 b9       	out	0x04, r18	; 4
           adcmv[0] = W20msReadADC(TP1);
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	0e 94 03 18 	call	0x3006	; 0x3006 <W20msReadADC>
           adcmv[3] = ADCconfig.U_AVCC / 2;
    1ec4:	00 91 40 01 	lds	r16, 0x0140
    1ec8:	10 91 41 01 	lds	r17, 0x0141
    1ecc:	16 95       	lsr	r17
    1ece:	07 95       	ror	r16
    1ed0:	18 87       	std	Y+8, r17	; 0x08
    1ed2:	0f 83       	std	Y+7, r16	; 0x07
           adcmv[0] -= adcmv[3];
    1ed4:	80 1b       	sub	r24, r16
    1ed6:	91 0b       	sbc	r25, r17
    1ed8:	9a 83       	std	Y+2, r25	; 0x02
    1eda:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (2<<(TP1*2)) | (2<<(TP3*2));	//RH3 to -
    1edc:	82 e2       	ldi	r24, 0x22	; 34
    1ede:	84 b9       	out	0x04, r24	; 4
           adcmv[1] = W20msReadADC(TP1);
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	0e 94 03 18 	call	0x3006	; 0x3006 <W20msReadADC>
           adcmv[1] -= adcmv[3];
    1ee6:	80 1b       	sub	r24, r16
    1ee8:	91 0b       	sbc	r25, r17
    1eea:	9c 83       	std	Y+4, r25	; 0x04
    1eec:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 2<<(TP2*2);		//RL2 to VCC
    1eee:	c5 b8       	out	0x05, r12	; 5
           R_DDR = (2<<(TP2*2)) | (2<<(TP3*2));	//RH3 to -
    1ef0:	e8 e2       	ldi	r30, 0x28	; 40
    1ef2:	e4 b9       	out	0x04, r30	; 4
           adcmv[2] = W20msReadADC(TP2);
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	0e 94 03 18 	call	0x3006	; 0x3006 <W20msReadADC>
           adcmv[2] -= adcmv[3];
    1efa:	80 1b       	sub	r24, r16
    1efc:	91 0b       	sbc	r25, r17
    1efe:	9e 83       	std	Y+6, r25	; 0x06
    1f00:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RHRH);	// "RHRH"
    1f02:	8b ee       	ldi	r24, 0xEB	; 235
    1f04:	91 e0       	ldi	r25, 0x01	; 1
    1f06:	1e c0       	rjmp	.+60     	; 0x1f44 <AutoCheck+0x332>
        }
                                        //############################################
        if (tt == 4) { // Text release probes
    1f08:	fe 2d       	mov	r31, r14
    1f0a:	f4 30       	cpi	r31, 0x04	; 4
    1f0c:	19 f4       	brne	.+6      	; 0x1f14 <AutoCheck+0x302>
           lcd_fix2_string(RELPROBE);	// "Release Probes"
    1f0e:	88 e4       	ldi	r24, 0x48	; 72
    1f10:	91 e0       	ldi	r25, 0x01	; 1
    1f12:	18 c0       	rjmp	.+48     	; 0x1f44 <AutoCheck+0x332>
        }
                                        //############################################
        if (tt == 5) { // can we switch the ADC pins to GND across R_H resistor?
    1f14:	2e 2d       	mov	r18, r14
    1f16:	25 30       	cpi	r18, 0x05	; 5
    1f18:	c1 f4       	brne	.+48     	; 0x1f4a <AutoCheck+0x338>
           R_PORT = 0;
    1f1a:	15 b8       	out	0x05, r1	; 5
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to GND
    1f1c:	a4 b8       	out	0x04, r10	; 4
           adcmv[0] = W20msReadADC(TP1);
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	0e 94 03 18 	call	0x3006	; 0x3006 <W20msReadADC>
    1f24:	9a 83       	std	Y+2, r25	; 0x02
    1f26:	89 83       	std	Y+1, r24	; 0x01

           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to GND
    1f28:	c4 b8       	out	0x04, r12	; 4
           adcmv[1] = W20msReadADC(TP2);
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	0e 94 03 18 	call	0x3006	; 0x3006 <W20msReadADC>
    1f30:	9c 83       	std	Y+4, r25	; 0x04
    1f32:	8b 83       	std	Y+3, r24	; 0x03

           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1f34:	b4 b8       	out	0x04, r11	; 4
           adcmv[2] = W20msReadADC(TP3);
    1f36:	82 e0       	ldi	r24, 0x02	; 2
    1f38:	0e 94 03 18 	call	0x3006	; 0x3006 <W20msReadADC>
    1f3c:	9e 83       	std	Y+6, r25	; 0x06
    1f3e:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RH1L);	// "RH_Lo="
    1f40:	85 ed       	ldi	r24, 0xD5	; 213
    1f42:	91 e0       	ldi	r25, 0x01	; 1
    1f44:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
    1f48:	30 c0       	rjmp	.+96     	; 0x1faa <AutoCheck+0x398>
        }
                                        //############################################
        if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
    1f4a:	8e 2d       	mov	r24, r14
    1f4c:	86 30       	cpi	r24, 0x06	; 6
    1f4e:	51 f5       	brne	.+84     	; 0x1fa4 <AutoCheck+0x392>
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to VCC
    1f50:	a4 b8       	out	0x04, r10	; 4
           R_PORT = 2<<(TP1*2);
    1f52:	a5 b8       	out	0x05, r10	; 5
           adcmv[0] = W20msReadADC(TP1) - ADCconfig.U_AVCC;
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	0e 94 03 18 	call	0x3006	; 0x3006 <W20msReadADC>
    1f5a:	20 91 40 01 	lds	r18, 0x0140
    1f5e:	30 91 41 01 	lds	r19, 0x0141
    1f62:	82 1b       	sub	r24, r18
    1f64:	93 0b       	sbc	r25, r19
    1f66:	9a 83       	std	Y+2, r25	; 0x02
    1f68:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to VCC
    1f6a:	c4 b8       	out	0x04, r12	; 4
           R_PORT = 2<<(TP2*2);
    1f6c:	c5 b8       	out	0x05, r12	; 5
           adcmv[1] = W20msReadADC(TP2) - ADCconfig.U_AVCC;
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	0e 94 03 18 	call	0x3006	; 0x3006 <W20msReadADC>
    1f74:	20 91 40 01 	lds	r18, 0x0140
    1f78:	30 91 41 01 	lds	r19, 0x0141
    1f7c:	82 1b       	sub	r24, r18
    1f7e:	93 0b       	sbc	r25, r19
    1f80:	9c 83       	std	Y+4, r25	; 0x04
    1f82:	8b 83       	std	Y+3, r24	; 0x03
           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to VCC
    1f84:	b4 b8       	out	0x04, r11	; 4
           R_PORT = 2<<(TP3*2);
    1f86:	b5 b8       	out	0x05, r11	; 5
           adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
    1f88:	82 e0       	ldi	r24, 0x02	; 2
    1f8a:	0e 94 03 18 	call	0x3006	; 0x3006 <W20msReadADC>
    1f8e:	20 91 40 01 	lds	r18, 0x0140
    1f92:	30 91 41 01 	lds	r19, 0x0141
    1f96:	82 1b       	sub	r24, r18
    1f98:	93 0b       	sbc	r25, r19
    1f9a:	9e 83       	std	Y+6, r25	; 0x06
    1f9c:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RH1H);	// "RH_Hi="
    1f9e:	89 ed       	ldi	r24, 0xD9	; 217
    1fa0:	91 e0       	ldi	r25, 0x01	; 1
    1fa2:	d0 cf       	rjmp	.-96     	; 0x1f44 <AutoCheck+0x332>
        }
                                        //############################################
        if (tt > 1) {	// output 3 voltages 
    1fa4:	ee 2d       	mov	r30, r14
    1fa6:	e1 30       	cpi	r30, 0x01	; 1
    1fa8:	29 f1       	breq	.+74     	; 0x1ff4 <AutoCheck+0x3e2>
           lcd_line2();			//Cursor to column 1, row 2
    1faa:	80 ec       	ldi	r24, 0xC0	; 192
    1fac:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
           lcd_string(itoa(adcmv[0], outval, 10));	//output voltage 1
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb4:	6f e0       	ldi	r22, 0x0F	; 15
    1fb6:	71 e0       	ldi	r23, 0x01	; 1
    1fb8:	4a e0       	ldi	r20, 0x0A	; 10
    1fba:	50 e0       	ldi	r21, 0x00	; 0
    1fbc:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <itoa>
    1fc0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_string>
           lcd_space();
    1fc4:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_space>
           lcd_string(itoa(adcmv[1], outval, 10));	//output voltage 2
    1fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fca:	9c 81       	ldd	r25, Y+4	; 0x04
    1fcc:	6f e0       	ldi	r22, 0x0F	; 15
    1fce:	71 e0       	ldi	r23, 0x01	; 1
    1fd0:	4a e0       	ldi	r20, 0x0A	; 10
    1fd2:	50 e0       	ldi	r21, 0x00	; 0
    1fd4:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <itoa>
    1fd8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_string>
           lcd_space();
    1fdc:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_space>
           lcd_string(itoa(adcmv[2], outval, 10));	//output voltage 3
    1fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe4:	6f e0       	ldi	r22, 0x0F	; 15
    1fe6:	71 e0       	ldi	r23, 0x01	; 1
    1fe8:	4a e0       	ldi	r20, 0x0A	; 10
    1fea:	50 e0       	ldi	r21, 0x00	; 0
    1fec:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <itoa>
    1ff0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_string>
        }
        ADC_DDR =  TXD_MSK;		// all-Pins to Input
    1ff4:	c7 b8       	out	0x07, r12	; 7
        ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
    1ff6:	c8 b8       	out	0x08, r12	; 8
        R_DDR = 0;			// all R-Ports to Input
    1ff8:	14 b8       	out	0x04, r1	; 4
        R_PORT = 0;
    1ffa:	15 b8       	out	0x05, r1	; 5
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    1ffc:	4f 9b       	sbis	0x09, 7	; 9
    1ffe:	0b c0       	rjmp	.+22     	; 0x2016 <AutoCheck+0x404>
	   // if key is pressed, don't repeat
           break;
        }
        wait500ms();
    2000:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <wait500ms>
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    2004:	4f 9b       	sbis	0x09, 7	; 9
    2006:	07 c0       	rjmp	.+14     	; 0x2016 <AutoCheck+0x404>
	   // if key is pressed, don't repeat
           break;
        }
        wait500ms();
    2008:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <wait500ms>
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
  wait1s();
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
    200c:	d3 94       	inc	r13
    200e:	fd 2d       	mov	r31, r13
    2010:	f4 30       	cpi	r31, 0x04	; 4
    2012:	09 f0       	breq	.+2      	; 0x2016 <AutoCheck+0x404>
    2014:	b6 ce       	rjmp	.-660    	; 0x1d82 <AutoCheck+0x170>
    2016:	1e 2d       	mov	r17, r14
	   // if key is pressed, don't repeat
           break;
        }
        wait500ms();
     } //end for ww
     wait1s();
    2018:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <wait1000ms>
  lcd_line1();
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
  wait1s();
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    201c:	1f 5f       	subi	r17, 0xFF	; 255
    201e:	17 30       	cpi	r17, 0x07	; 7
    2020:	51 f0       	breq	.+20     	; 0x2036 <AutoCheck+0x424>
void AutoCheck(void) {
    2022:	dd 24       	eor	r13, r13
        lcd_line2();			//Cursor to column 1, row 2
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_data('T');			//output the Testmode "T"
    2024:	08 94       	sec
    2026:	41 1c       	adc	r4, r1
    2028:	51 1c       	adc	r5, r1
        if (tt == 2) { // how equal are the RL resistors? 
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
           adcmv[0] = W20msReadADC(TP1);
           adcmv[0] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
           R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//RL3 to -
    202a:	b1 e1       	ldi	r27, 0x11	; 17
    202c:	3b 2e       	mov	r3, r27
           adcmv[1] = W20msReadADC(TP1);
           adcmv[1] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
           R_PORT = 1<<(TP2*2);		//RL2 to VCC
    202e:	a4 e0       	ldi	r26, 0x04	; 4
    2030:	2a 2e       	mov	r2, r26
    2032:	e1 2e       	mov	r14, r17
    2034:	a6 ce       	rjmp	.-692    	; 0x1d82 <AutoCheck+0x170>
     wait1s();
  } //end for tt
#endif

  // measurement of internal resistance of the ADC port outputs switched to GND
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    2036:	f9 e0       	ldi	r31, 0x09	; 9
    2038:	cf 2e       	mov	r12, r31
    203a:	c7 b8       	out	0x07, r12	; 7
  R_PORT = 1<<(TP1*2);		//R_L-PORT 1 to VCC
    203c:	dd 24       	eor	r13, r13
    203e:	d3 94       	inc	r13
    2040:	d5 b8       	out	0x05, r13	; 5
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to VCC
    2042:	d4 b8       	out	0x04, r13	; 4
  adcmv[0] = W5msReadADC(TP1);
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
    204a:	7c 01       	movw	r14, r24

  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin 2 to output 0V
    204c:	ea e0       	ldi	r30, 0x0A	; 10
    204e:	6e 2e       	mov	r6, r30
    2050:	67 b8       	out	0x07, r6	; 7
  R_PORT =  1<<(TP2*2);	//R_L-PORT 2 to VCC
    2052:	74 e0       	ldi	r23, 0x04	; 4
    2054:	87 2e       	mov	r8, r23
    2056:	85 b8       	out	0x05, r8	; 5
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to VCC
    2058:	84 b8       	out	0x04, r8	; 4
  adcmv[1] = W5msReadADC(TP2);
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
    2060:	8c 01       	movw	r16, r24

  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin 3 to output 0V
    2062:	6c e0       	ldi	r22, 0x0C	; 12
    2064:	a6 2e       	mov	r10, r22
    2066:	a7 b8       	out	0x07, r10	; 7
  R_PORT =  1<<(TP3*2);	//R_L-PORT 3 to VCC
    2068:	50 e1       	ldi	r21, 0x10	; 16
    206a:	b5 2e       	mov	r11, r21
    206c:	b5 b8       	out	0x05, r11	; 5
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to VCC
    206e:	b4 b8       	out	0x04, r11	; 4
  adcmv[2] = W5msReadADC(TP3);
    2070:	82 e0       	ldi	r24, 0x02	; 2
    2072:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
  sum_rm = (adcmv[0] + adcmv[1] + adcmv[2]); //add all three values
    2076:	0e 0d       	add	r16, r14
    2078:	1f 1d       	adc	r17, r15
    207a:	08 0f       	add	r16, r24
    207c:	19 1f       	adc	r17, r25

  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
    207e:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
    2080:	c8 b8       	out	0x08, r12	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    2082:	c7 b8       	out	0x07, r12	; 7
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
    2084:	d4 b8       	out	0x04, r13	; 4
  adcmv[0] = ADCconfig.U_AVCC - W5msReadADC(TP1);
    2086:	c0 90 40 01 	lds	r12, 0x0140
    208a:	d0 90 41 01 	lds	r13, 0x0141
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
    2094:	c8 1a       	sub	r12, r24
    2096:	d9 0a       	sbc	r13, r25
    2098:	da 82       	std	Y+2, r13	; 0x02
    209a:	c9 82       	std	Y+1, r12	; 0x01
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
    209c:	68 b8       	out	0x08, r6	; 8
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
    209e:	67 b8       	out	0x07, r6	; 7
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
    20a0:	84 b8       	out	0x04, r8	; 4
  adcmv[1] = ADCconfig.U_AVCC - W5msReadADC(TP2);
    20a2:	e0 90 40 01 	lds	r14, 0x0140
    20a6:	f0 90 41 01 	lds	r15, 0x0141
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
    20b0:	e8 1a       	sub	r14, r24
    20b2:	f9 0a       	sbc	r15, r25
    20b4:	fc 82       	std	Y+4, r15	; 0x04
    20b6:	eb 82       	std	Y+3, r14	; 0x03

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
    20b8:	a8 b8       	out	0x08, r10	; 8
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
    20ba:	a7 b8       	out	0x07, r10	; 7
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
    20bc:	b4 b8       	out	0x04, r11	; 4
  adcmv[2] = ADCconfig.U_AVCC - W5msReadADC(TP3);
    20be:	a0 90 40 01 	lds	r10, 0x0140
    20c2:	b0 90 41 01 	lds	r11, 0x0141
    20c6:	82 e0       	ldi	r24, 0x02	; 2
    20c8:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>

  sum_c0 = (adcmv[0] + adcmv[1] + adcmv[2]);
    20cc:	ec 0c       	add	r14, r12
    20ce:	fd 1c       	adc	r15, r13
  adcmv[1] = ADCconfig.U_AVCC - W5msReadADC(TP2);

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
  adcmv[2] = ADCconfig.U_AVCC - W5msReadADC(TP3);
    20d0:	a8 1a       	sub	r10, r24
    20d2:	b9 0a       	sbc	r11, r25

  sum_c0 = (adcmv[0] + adcmv[1] + adcmv[2]);
    20d4:	ea 0c       	add	r14, r10
    20d6:	fb 1c       	adc	r15, r11
  u680 = ((ADCconfig.U_AVCC * 3) - sum_rm - sum_c0);	//three times the voltage at the 680 Ohm
    20d8:	80 91 40 01 	lds	r24, 0x0140
    20dc:	90 91 41 01 	lds	r25, 0x0141
    20e0:	5c 01       	movw	r10, r24
    20e2:	aa 0c       	add	r10, r10
    20e4:	bb 1c       	adc	r11, r11
    20e6:	a8 0e       	add	r10, r24
    20e8:	b9 1e       	adc	r11, r25
    20ea:	a0 1a       	sub	r10, r16
    20ec:	b1 0a       	sbc	r11, r17
    20ee:	ae 18       	sub	r10, r14
    20f0:	bf 08       	sbc	r11, r15
  pin_rm = (unsigned long)((unsigned long)sum_rm * (unsigned long)R_L_VAL) / (unsigned long)u680;
    20f2:	cc 24       	eor	r12, r12
    20f4:	dd 24       	eor	r13, r13
    20f6:	b8 01       	movw	r22, r16
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	20 e9       	ldi	r18, 0x90	; 144
    20fe:	3a e1       	ldi	r19, 0x1A	; 26
    2100:	40 e0       	ldi	r20, 0x00	; 0
    2102:	50 e0       	ldi	r21, 0x00	; 0
    2104:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
    2108:	a6 01       	movw	r20, r12
    210a:	95 01       	movw	r18, r10
    210c:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
    2110:	49 01       	movw	r8, r18
  adcmv[2] = pin_rm;	// for last output in row 2
    2112:	3e 83       	std	Y+6, r19	; 0x06
    2114:	2d 83       	std	Y+5, r18	; 0x05
  pin_rp = (unsigned long)((unsigned long)sum_c0 * (unsigned long)R_L_VAL) / (unsigned long)u680;
    2116:	b7 01       	movw	r22, r14
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	20 e9       	ldi	r18, 0x90	; 144
    211e:	3a e1       	ldi	r19, 0x1A	; 26
    2120:	40 e0       	ldi	r20, 0x00	; 0
    2122:	50 e0       	ldi	r21, 0x00	; 0
    2124:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
    2128:	a6 01       	movw	r20, r12
    212a:	95 01       	movw	r18, r10
    212c:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
    2130:	79 01       	movw	r14, r18
  lcd_clear();
    2132:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clear>
  lcd_fix_string(RIHI);	// "RiHi="
    2136:	89 ef       	ldi	r24, 0xF9	; 249
    2138:	91 e0       	ldi	r25, 0x01	; 1
    213a:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
  DisplayValue(pin_rp,-1,LCD_CHAR_OMEGA,3);
    213e:	b7 01       	movw	r22, r14
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	4f ef       	ldi	r20, 0xFF	; 255
    2146:	24 ef       	ldi	r18, 0xF4	; 244
    2148:	03 e0       	ldi	r16, 0x03	; 3
    214a:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DisplayValue>
  lcd_line2();
    214e:	80 ec       	ldi	r24, 0xC0	; 192
    2150:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
  lcd_fix_string(RILO);	// "RiLo="
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	92 e0       	ldi	r25, 0x02	; 2
    2158:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
  DisplayValue(pin_rm,-1,LCD_CHAR_OMEGA,3);
    215c:	b4 01       	movw	r22, r8
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	4f ef       	ldi	r20, 0xFF	; 255
    2164:	24 ef       	ldi	r18, 0xF4	; 244
    2166:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DisplayValue>
  wait2s();			//wait 2 seconds
    216a:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <wait2s>
#ifdef AUTO_CAL
  if ((pin_rp < 280) && (pin_rm < 250)) {
    216e:	28 e1       	ldi	r18, 0x18	; 24
    2170:	e2 16       	cp	r14, r18
    2172:	21 e0       	ldi	r18, 0x01	; 1
    2174:	f2 06       	cpc	r15, r18
    2176:	90 f4       	brcc	.+36     	; 0x219c <AutoCheck+0x58a>
    2178:	8a ef       	ldi	r24, 0xFA	; 250
    217a:	88 16       	cp	r8, r24
    217c:	91 04       	cpc	r9, r1
    217e:	70 f4       	brcc	.+28     	; 0x219c <AutoCheck+0x58a>
     // rp is below 28 Ohm and rm is below 25 Ohm
     (void) eeprom_write_word((uint16_t *)(&R680pl), pin_rp+R_L_VAL);  //hold VCC resistance value in EEprom
    2180:	b7 01       	movw	r22, r14
    2182:	60 57       	subi	r22, 0x70	; 112
    2184:	75 4e       	sbci	r23, 0xE5	; 229
    2186:	81 e5       	ldi	r24, 0x51	; 81
    2188:	92 e0       	ldi	r25, 0x02	; 2
    218a:	0e 94 45 19 	call	0x328a	; 0x328a <__eewr_word_m328p>
     (void) eeprom_write_word((uint16_t *)(&R680mi), pin_rm+R_L_VAL);  //hold GND resistance value in EEprom
    218e:	b4 01       	movw	r22, r8
    2190:	60 57       	subi	r22, 0x70	; 112
    2192:	75 4e       	sbci	r23, 0xE5	; 229
    2194:	83 e5       	ldi	r24, 0x53	; 83
    2196:	92 e0       	ldi	r25, 0x02	; 2
    2198:	0e 94 45 19 	call	0x328a	; 0x328a <__eewr_word_m328p>
  }
#endif

#ifdef C_MESS
  //measure Zero offset for Capacity measurement
  adcmv[3] = 0;
    219c:	18 86       	std	Y+8, r1	; 0x08
    219e:	1f 82       	std	Y+7, r1	; 0x07
  PartFound = PART_NONE;
    21a0:	10 92 09 01 	sts	0x0109, r1
  ReadCapacity(TP3, TP1);
    21a4:	82 e0       	ldi	r24, 0x02	; 2
    21a6:	60 e0       	ldi	r22, 0x00	; 0
    21a8:	0e 94 8b 0a 	call	0x1516	; 0x1516 <ReadCapacity>
  adcmv[5] = (unsigned int) cval_uncorrected;	//save capacity value of empty Pin 1:3
    21ac:	e0 90 5a 01 	lds	r14, 0x015A
    21b0:	f0 90 5b 01 	lds	r15, 0x015B
    21b4:	fc 86       	std	Y+12, r15	; 0x0c
    21b6:	eb 86       	std	Y+11, r14	; 0x0b
  ReadCapacity(TP3, TP2);
    21b8:	82 e0       	ldi	r24, 0x02	; 2
    21ba:	61 e0       	ldi	r22, 0x01	; 1
    21bc:	0e 94 8b 0a 	call	0x1516	; 0x1516 <ReadCapacity>
  adcmv[6] = (unsigned int) cval_uncorrected;	//save capacity value of empty Pin 2:3
    21c0:	00 91 5a 01 	lds	r16, 0x015A
    21c4:	10 91 5b 01 	lds	r17, 0x015B
    21c8:	1e 87       	std	Y+14, r17	; 0x0e
    21ca:	0d 87       	std	Y+13, r16	; 0x0d
  ReadCapacity(TP2, TP1);
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	0e 94 8b 0a 	call	0x1516	; 0x1516 <ReadCapacity>
  adcmv[2] = (unsigned int) cval_uncorrected;	//save capacity value of empty Pin 1:2
    21d4:	c0 90 5a 01 	lds	r12, 0x015A
    21d8:	d0 90 5b 01 	lds	r13, 0x015B
    21dc:	de 82       	std	Y+6, r13	; 0x06
    21de:	cd 82       	std	Y+5, r12	; 0x05
  ReadCapacity(TP1, TP3);
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	62 e0       	ldi	r22, 0x02	; 2
    21e4:	0e 94 8b 0a 	call	0x1516	; 0x1516 <ReadCapacity>
  adcmv[1] = (unsigned int) cval_uncorrected;	//save capacity value of empty Pin 3:1
    21e8:	80 91 5a 01 	lds	r24, 0x015A
    21ec:	90 91 5b 01 	lds	r25, 0x015B
    21f0:	9c 83       	std	Y+4, r25	; 0x04
    21f2:	8b 83       	std	Y+3, r24	; 0x03
  ReadCapacity(TP2, TP3);
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	62 e0       	ldi	r22, 0x02	; 2
    21f8:	0e 94 8b 0a 	call	0x1516	; 0x1516 <ReadCapacity>
  adcmv[4] = (unsigned int) cval_uncorrected;	//save capacity value of empty Pin 3:2
    21fc:	80 91 5a 01 	lds	r24, 0x015A
    2200:	90 91 5b 01 	lds	r25, 0x015B
    2204:	9a 87       	std	Y+10, r25	; 0x0a
    2206:	89 87       	std	Y+9, r24	; 0x09
  ReadCapacity(TP1, TP2);
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	61 e0       	ldi	r22, 0x01	; 1
    220c:	0e 94 8b 0a 	call	0x1516	; 0x1516 <ReadCapacity>
  adcmv[0] = (unsigned int) cval_uncorrected;	//save capacity value of empty Pin 2:1
    2210:	80 91 5a 01 	lds	r24, 0x015A
    2214:	90 91 5b 01 	lds	r25, 0x015B
    2218:	9a 83       	std	Y+2, r25	; 0x02
    221a:	89 83       	std	Y+1, r24	; 0x01
  lcd_clear();
    221c:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clear>
  lcd_data('C');
    2220:	83 e4       	ldi	r24, 0x43	; 67
    2222:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
  lcd_data('0');
    2226:	80 e3       	ldi	r24, 0x30	; 48
    2228:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
  lcd_space();
    222c:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_space>
  lcd_string(itoa(adcmv[5], outval, 10));	//output cap0 1:3
    2230:	c7 01       	movw	r24, r14
    2232:	6f e0       	ldi	r22, 0x0F	; 15
    2234:	71 e0       	ldi	r23, 0x01	; 1
    2236:	4a e0       	ldi	r20, 0x0A	; 10
    2238:	50 e0       	ldi	r21, 0x00	; 0
    223a:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <itoa>
    223e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_string>
  lcd_space();
    2242:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_space>
  lcd_string(itoa(adcmv[6], outval, 10));	//output cap0 2:3
    2246:	c8 01       	movw	r24, r16
    2248:	6f e0       	ldi	r22, 0x0F	; 15
    224a:	71 e0       	ldi	r23, 0x01	; 1
    224c:	4a e0       	ldi	r20, 0x0A	; 10
    224e:	50 e0       	ldi	r21, 0x00	; 0
    2250:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <itoa>
    2254:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_string>
  lcd_space();
    2258:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_space>
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
    225c:	b6 01       	movw	r22, r12
    225e:	88 27       	eor	r24, r24
    2260:	77 fd       	sbrc	r23, 7
    2262:	80 95       	com	r24
    2264:	98 2f       	mov	r25, r24
    2266:	44 ef       	ldi	r20, 0xF4	; 244
    2268:	26 e4       	ldi	r18, 0x46	; 70
    226a:	03 e0       	ldi	r16, 0x03	; 3
    226c:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DisplayValue>
    2270:	8e 01       	movw	r16, r28
    2272:	0f 5f       	subi	r16, 0xFF	; 255
    2274:	1f 4f       	sbci	r17, 0xFF	; 255
void AutoCheck(void) {
    2276:	ce 01       	movw	r24, r28
    2278:	0f 96       	adiw	r24, 0x0f	; 15
    227a:	f8 01       	movw	r30, r16
  lcd_string(itoa(adcmv[6], outval, 10));	//output cap0 2:3
  lcd_space();
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
    227c:	21 91       	ld	r18, Z+
    227e:	31 91       	ld	r19, Z+
    2280:	27 34       	cpi	r18, 0x47	; 71
    2282:	31 05       	cpc	r19, r1
    2284:	b4 f4       	brge	.+44     	; 0x22b2 <AutoCheck+0x6a0>
  lcd_space();
  lcd_string(itoa(adcmv[6], outval, 10));	//output cap0 2:3
  lcd_space();
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
    2286:	e8 17       	cp	r30, r24
    2288:	f9 07       	cpc	r31, r25
    228a:	c1 f7       	brne	.-16     	; 0x227c <AutoCheck+0x66a>
    228c:	ee 24       	eor	r14, r14
    228e:	ff 24       	eor	r15, r15
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
    2290:	f8 01       	movw	r30, r16
    2292:	60 81       	ld	r22, Z
    2294:	0e 5f       	subi	r16, 0xFE	; 254
    2296:	1f 4f       	sbci	r17, 0xFF	; 255
    2298:	6e 5e       	subi	r22, 0xEE	; 238
    229a:	c7 01       	movw	r24, r14
    229c:	81 5a       	subi	r24, 0xA1	; 161
    229e:	9d 4f       	sbci	r25, 0xFD	; 253
    22a0:	0e 94 37 19 	call	0x326e	; 0x326e <__eewr_byte_m328p>
    22a4:	08 94       	sec
    22a6:	e1 1c       	adc	r14, r1
    22a8:	f1 1c       	adc	r15, r1
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
    22aa:	f7 e0       	ldi	r31, 0x07	; 7
    22ac:	ef 16       	cp	r14, r31
    22ae:	f1 04       	cpc	r15, r1
    22b0:	79 f7       	brne	.-34     	; 0x2290 <AutoCheck+0x67e>
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
  }
no_c0save:
 #endif
 wait2s();		//wait 2 seconds
    22b2:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <wait2s>
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
    22b6:	10 e0       	ldi	r17, 0x00	; 0
 for (ww=0;ww<64;ww++) {
    22b8:	00 e0       	ldi	r16, 0x00	; 0
     lcd_clear();
    22ba:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clear>
     lcd_data('1');
    22be:	81 e3       	ldi	r24, 0x31	; 49
    22c0:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
     lcd_fix_string(CapZeich);	// "-||-"
    22c4:	81 ea       	ldi	r24, 0xA1	; 161
    22c6:	91 e0       	ldi	r25, 0x01	; 1
    22c8:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
     lcd_data('3');
    22cc:	83 e3       	ldi	r24, 0x33	; 51
    22ce:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
     lcd_fix_string(MinCap);	// " >100nF!"
    22d2:	8d e0       	ldi	r24, 0x0D	; 13
    22d4:	92 e0       	ldi	r25, 0x02	; 2
    22d6:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
     PartFound = PART_NONE;
    22da:	10 92 09 01 	sts	0x0109, r1
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
    22de:	82 e0       	ldi	r24, 0x02	; 2
    22e0:	60 e0       	ldi	r22, 0x00	; 0
    22e2:	0e 94 8b 0a 	call	0x1516	; 0x1516 <ReadCapacity>
     if (((cpre == -12) && (cval > 95000)) || ((cpre == -10) && (cval < 300000))) {
    22e6:	80 91 49 01 	lds	r24, 0x0149
    22ea:	84 3f       	cpi	r24, 0xF4	; 244
    22ec:	89 f4       	brne	.+34     	; 0x2310 <AutoCheck+0x6fe>
    22ee:	80 91 7b 01 	lds	r24, 0x017B
    22f2:	90 91 7c 01 	lds	r25, 0x017C
    22f6:	a0 91 7d 01 	lds	r26, 0x017D
    22fa:	b0 91 7e 01 	lds	r27, 0x017E
    22fe:	89 31       	cpi	r24, 0x19	; 25
    2300:	23 e7       	ldi	r18, 0x73	; 115
    2302:	92 07       	cpc	r25, r18
    2304:	21 e0       	ldi	r18, 0x01	; 1
    2306:	a2 07       	cpc	r26, r18
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	b2 07       	cpc	r27, r18
    230c:	a8 f4       	brcc	.+42     	; 0x2338 <AutoCheck+0x726>
    230e:	bc c0       	rjmp	.+376    	; 0x2488 <AutoCheck+0x876>
    2310:	86 3f       	cpi	r24, 0xF6	; 246
    2312:	09 f0       	breq	.+2      	; 0x2316 <AutoCheck+0x704>
    2314:	b9 c0       	rjmp	.+370    	; 0x2488 <AutoCheck+0x876>
    2316:	80 91 7b 01 	lds	r24, 0x017B
    231a:	90 91 7c 01 	lds	r25, 0x017C
    231e:	a0 91 7d 01 	lds	r26, 0x017D
    2322:	b0 91 7e 01 	lds	r27, 0x017E
    2326:	80 3e       	cpi	r24, 0xE0	; 224
    2328:	e3 e9       	ldi	r30, 0x93	; 147
    232a:	9e 07       	cpc	r25, r30
    232c:	e4 e0       	ldi	r30, 0x04	; 4
    232e:	ae 07       	cpc	r26, r30
    2330:	e0 e0       	ldi	r30, 0x00	; 0
    2332:	be 07       	cpc	r27, r30
    2334:	08 f0       	brcs	.+2      	; 0x2338 <AutoCheck+0x726>
    2336:	a8 c0       	rjmp	.+336    	; 0x2488 <AutoCheck+0x876>
        cap_found++;
    2338:	1f 5f       	subi	r17, 0xFF	; 255
     } else {
        cap_found = 0;		// wait for stable connection
     }
     if (cap_found > 1) {
    233a:	12 30       	cpi	r17, 0x02	; 2
    233c:	09 f0       	breq	.+2      	; 0x2340 <AutoCheck+0x72e>
    233e:	a5 c0       	rjmp	.+330    	; 0x248a <AutoCheck+0x878>
        // value of capacitor is correct
        (void) eeprom_write_word((uint16_t *)(&ref_offset), load_diff);	// hold zero offset + slew rate dependend offset
    2340:	60 91 61 01 	lds	r22, 0x0161
    2344:	70 91 62 01 	lds	r23, 0x0162
    2348:	8d e5       	ldi	r24, 0x5D	; 93
    234a:	92 e0       	ldi	r25, 0x02	; 2
    234c:	0e 94 45 19 	call	0x328a	; 0x328a <__eewr_word_m328p>
        lcd_clear();
    2350:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clear>
        lcd_fix_string(REF_Cstr);	// "REF_C="
    2354:	85 e1       	ldi	r24, 0x15	; 21
    2356:	92 e0       	ldi	r25, 0x02	; 2
    2358:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
        lcd_string(itoa(load_diff, outval, 10));	//output REF_C_KORR
    235c:	80 91 61 01 	lds	r24, 0x0161
    2360:	90 91 62 01 	lds	r25, 0x0162
    2364:	6f e0       	ldi	r22, 0x0F	; 15
    2366:	71 e0       	ldi	r23, 0x01	; 1
    2368:	4a e0       	ldi	r20, 0x0A	; 10
    236a:	50 e0       	ldi	r21, 0x00	; 0
    236c:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <itoa>
    2370:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_string>
  #ifdef AUTOSCALE_ADC
        ADC_PORT =  TXD_VAL;	//ADC-Port 1 to GND
    2374:	88 e0       	ldi	r24, 0x08	; 8
    2376:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    2378:	89 e0       	ldi	r24, 0x09	; 9
    237a:	87 b9       	out	0x07, r24	; 7
        R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    237c:	80 e2       	ldi	r24, 0x20	; 32
    237e:	84 b9       	out	0x04, r24	; 4
        do {
           adcmv[0] = ReadADC(TP3);
    2380:	82 e0       	ldi	r24, 0x02	; 2
    2382:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
        } while (adcmv[0] > 980);
    2386:	f3 e0       	ldi	r31, 0x03	; 3
    2388:	85 3d       	cpi	r24, 0xD5	; 213
    238a:	9f 07       	cpc	r25, r31
    238c:	cc f7       	brge	.-14     	; 0x2380 <AutoCheck+0x76e>
        R_DDR = 0;		//all Pins to input 
    238e:	14 b8       	out	0x04, r1	; 4
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    2390:	10 92 3f 01 	sts	0x013F, r1
    2394:	10 92 3e 01 	sts	0x013E, r1
        adcmv[0] = ReadADC(TP3);  // get cap voltage with VCC reference
    2398:	82 e0       	ldi	r24, 0x02	; 2
    239a:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
    239e:	4c 01       	movw	r8, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    23a0:	85 e5       	ldi	r24, 0x55	; 85
    23a2:	92 e0       	ldi	r25, 0x02	; 2
    23a4:	0e 94 29 19 	call	0x3252	; 0x3252 <__eerd_byte_m328p>
    23a8:	99 27       	eor	r25, r25
    23aa:	87 fd       	sbrc	r24, 7
    23ac:	90 95       	com	r25
    23ae:	20 91 42 01 	lds	r18, 0x0142
    23b2:	30 91 43 01 	lds	r19, 0x0143
    23b6:	82 0f       	add	r24, r18
    23b8:	93 1f       	adc	r25, r19
    23ba:	90 93 3f 01 	sts	0x013F, r25
    23be:	80 93 3e 01 	sts	0x013E, r24
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
    23c2:	82 e0       	ldi	r24, 0x02	; 2
    23c4:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
    23c8:	8c 01       	movw	r16, r24
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    23ca:	10 92 3f 01 	sts	0x013F, r1
    23ce:	10 92 3e 01 	sts	0x013E, r1
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
    23d2:	82 e0       	ldi	r24, 0x02	; 2
    23d4:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
    23d8:	5c 01       	movw	r10, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    23da:	c0 90 42 01 	lds	r12, 0x0142
    23de:	d0 90 43 01 	lds	r13, 0x0143
    23e2:	85 e5       	ldi	r24, 0x55	; 85
    23e4:	92 e0       	ldi	r25, 0x02	; 2
    23e6:	0e 94 29 19 	call	0x3252	; 0x3252 <__eerd_byte_m328p>
    23ea:	99 27       	eor	r25, r25
    23ec:	87 fd       	sbrc	r24, 7
    23ee:	90 95       	com	r25
    23f0:	8c 0d       	add	r24, r12
    23f2:	9d 1d       	adc	r25, r13
    23f4:	90 93 3f 01 	sts	0x013F, r25
    23f8:	80 93 3e 01 	sts	0x013E, r24
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    23fc:	85 e5       	ldi	r24, 0x55	; 85
    23fe:	92 e0       	ldi	r25, 0x02	; 2
    2400:	0e 94 29 19 	call	0x3252	; 0x3252 <__eerd_byte_m328p>
    2404:	68 2e       	mov	r6, r24
        lcd_line2();
    2406:	80 ec       	ldi	r24, 0xC0	; 192
    2408:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
        lcd_fix_string(REF_Rstr);	// "REF_R="
    240c:	8c e1       	ldi	r24, 0x1C	; 28
    240e:	92 e0       	ldi	r25, 0x02	; 2
    2410:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    2414:	85 e5       	ldi	r24, 0x55	; 85
    2416:	92 e0       	ldi	r25, 0x02	; 2
    2418:	0e 94 29 19 	call	0x3252	; 0x3252 <__eerd_byte_m328p>
        ADCconfig.U_Bandgap = ADC_internal_reference;
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
        ADCconfig.U_Bandgap = ADC_internal_reference;
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    241c:	33 e0       	ldi	r19, 0x03	; 3
    241e:	e3 2e       	mov	r14, r19
    2420:	e8 0e       	add	r14, r24
    2422:	a8 0c       	add	r10, r8
    2424:	b9 1c       	adc	r11, r9
    2426:	a0 1a       	sub	r10, r16
    2428:	b1 0a       	sbc	r11, r17
    242a:	a0 1a       	sub	r10, r16
    242c:	b1 0a       	sbc	r11, r17
    242e:	b5 01       	movw	r22, r10
    2430:	88 27       	eor	r24, r24
    2432:	77 fd       	sbrc	r23, 7
    2434:	80 95       	com	r24
    2436:	98 2f       	mov	r25, r24
    2438:	26 2d       	mov	r18, r6
    243a:	33 27       	eor	r19, r19
    243c:	27 fd       	sbrc	r18, 7
    243e:	30 95       	com	r19
    2440:	2c 0d       	add	r18, r12
    2442:	3d 1d       	adc	r19, r13
    2444:	40 e0       	ldi	r20, 0x00	; 0
    2446:	50 e0       	ldi	r21, 0x00	; 0
    2448:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
    244c:	00 0f       	add	r16, r16
    244e:	11 1f       	adc	r17, r17
    2450:	98 01       	movw	r18, r16
    2452:	44 27       	eor	r20, r20
    2454:	37 fd       	sbrc	r19, 7
    2456:	40 95       	com	r20
    2458:	54 2f       	mov	r21, r20
    245a:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__divmodsi4>
        lcd_line2();
        lcd_fix_string(REF_Rstr);	// "REF_R="
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    245e:	e2 0e       	add	r14, r18
        (void) eeprom_write_byte((uint8_t *)(&RefDiff), (uint8_t)udiff2);	// hold offset for true reference Voltage
    2460:	85 e5       	ldi	r24, 0x55	; 85
    2462:	92 e0       	ldi	r25, 0x02	; 2
    2464:	6e 2d       	mov	r22, r14
    2466:	0e 94 37 19 	call	0x326e	; 0x326e <__eewr_byte_m328p>
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
    246a:	8e 2d       	mov	r24, r14
    246c:	99 27       	eor	r25, r25
    246e:	87 fd       	sbrc	r24, 7
    2470:	90 95       	com	r25
    2472:	6f e0       	ldi	r22, 0x0F	; 15
    2474:	71 e0       	ldi	r23, 0x01	; 1
    2476:	4a e0       	ldi	r20, 0x0A	; 10
    2478:	50 e0       	ldi	r21, 0x00	; 0
    247a:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <itoa>
    247e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_string>
  #endif
        wait4s();
    2482:	0e 94 dd 17 	call	0x2fba	; 0x2fba <wait4s>
        break;
    2486:	07 c0       	rjmp	.+14     	; 0x2496 <AutoCheck+0x884>
     lcd_data('3');
     lcd_fix_string(MinCap);	// " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     if (((cpre == -12) && (cval > 95000)) || ((cpre == -10) && (cval < 300000))) {
    2488:	10 e0       	ldi	r17, 0x00	; 0
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
  #endif
        wait4s();
        break;
     }
     wait200ms();			// wait additional time
    248a:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <wait200ms>
 wait2s();		//wait 2 seconds
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
    248e:	0f 5f       	subi	r16, 0xFF	; 255
    2490:	00 34       	cpi	r16, 0x40	; 64
    2492:	09 f0       	breq	.+2      	; 0x2496 <AutoCheck+0x884>
    2494:	12 cf       	rjmp	.-476    	; 0x22ba <AutoCheck+0x6a8>
  }

 #endif
#endif

  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    2496:	89 e1       	ldi	r24, 0x19	; 25
    2498:	80 93 3c 01 	sts	0x013C, r24
  lcd_clear();
    249c:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clear>
//  lcd_line1();
  lcd_line2();
    24a0:	80 ec       	ldi	r24, 0xC0	; 192
    24a2:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
  lcd_fix_string(VERSION);	//"Version ..."
    24a6:	8d eb       	ldi	r24, 0xBD	; 189
    24a8:	91 e0       	ldi	r25, 0x01	; 1
    24aa:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
  lcd_line1();
    24ae:	80 e8       	ldi	r24, 0x80	; 128
    24b0:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
  lcd_fix_string(ATE);		//"Selftest End"
    24b4:	86 e5       	ldi	r24, 0x56	; 86
    24b6:	91 e0       	ldi	r25, 0x01	; 1
    24b8:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
#ifdef FREQUENCY_50HZ
  lcd_fix_string(T50HZ);	//" 50Hz"
    24bc:	87 e0       	ldi	r24, 0x07	; 7
    24be:	92 e0       	ldi	r25, 0x02	; 2
    24c0:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
  ADC_PORT = TXD_VAL;
    24c4:	88 e0       	ldi	r24, 0x08	; 8
    24c6:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	// Pin 1 to GND
    24c8:	89 e0       	ldi	r24, 0x09	; 9
    24ca:	87 b9       	out	0x07, r24	; 7
  R_DDR = (1<<(TP3*2)) | (1<<(TP2*2));
    24cc:	84 e1       	ldi	r24, 0x14	; 20
    24ce:	84 b9       	out	0x04, r24	; 4
  for(ww=0;ww<30;ww++) {	// repeat the signal up to 30 times (1 minute)
    24d0:	10 e0       	ldi	r17, 0x00	; 0
     for (ii=0;ii<100;ii++) {	// for 2 s generate 50 Hz
         R_PORT = (1<<(TP2*2));	// Pin 2 over R_L to VCC, Pin 3 over R_L to GND
    24d2:	b4 e0       	ldi	r27, 0x04	; 4
    24d4:	eb 2e       	mov	r14, r27
         wait10ms();
         R_PORT = (1<<(TP3*2));	// Pin 3 over R_L to VCC, Pin 2 over R_L to GND
    24d6:	00 e1       	ldi	r16, 0x10	; 16
  lcd_fix_string(T50HZ);	//" 50Hz"
  ADC_PORT = TXD_VAL;
  ADC_DDR = 1<<TP1 | TXD_MSK;	// Pin 1 to GND
  R_DDR = (1<<(TP3*2)) | (1<<(TP2*2));
  for(ww=0;ww<30;ww++) {	// repeat the signal up to 30 times (1 minute)
     for (ii=0;ii<100;ii++) {	// for 2 s generate 50 Hz
    24d8:	10 92 47 01 	sts	0x0147, r1
    24dc:	0c c0       	rjmp	.+24     	; 0x24f6 <AutoCheck+0x8e4>
         R_PORT = (1<<(TP2*2));	// Pin 2 over R_L to VCC, Pin 3 over R_L to GND
    24de:	e5 b8       	out	0x05, r14	; 5
         wait10ms();
    24e0:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <wait10ms>
         R_PORT = (1<<(TP3*2));	// Pin 3 over R_L to VCC, Pin 2 over R_L to GND
    24e4:	05 b9       	out	0x05, r16	; 5
         wait10ms();
    24e6:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <wait10ms>
         wdt_reset();
    24ea:	a8 95       	wdr
  lcd_fix_string(T50HZ);	//" 50Hz"
  ADC_PORT = TXD_VAL;
  ADC_DDR = 1<<TP1 | TXD_MSK;	// Pin 1 to GND
  R_DDR = (1<<(TP3*2)) | (1<<(TP2*2));
  for(ww=0;ww<30;ww++) {	// repeat the signal up to 30 times (1 minute)
     for (ii=0;ii<100;ii++) {	// for 2 s generate 50 Hz
    24ec:	80 91 47 01 	lds	r24, 0x0147
    24f0:	8f 5f       	subi	r24, 0xFF	; 255
    24f2:	80 93 47 01 	sts	0x0147, r24
    24f6:	80 91 47 01 	lds	r24, 0x0147
    24fa:	84 36       	cpi	r24, 0x64	; 100
    24fc:	80 f3       	brcs	.-32     	; 0x24de <AutoCheck+0x8cc>
         wait10ms();
         R_PORT = (1<<(TP3*2));	// Pin 3 over R_L to VCC, Pin 2 over R_L to GND
         wait10ms();
         wdt_reset();
     }
     if (!(ON_PIN_REG & (1<<RST_PIN))) {
    24fe:	4f 9b       	sbis	0x09, 7	; 9
    2500:	03 c0       	rjmp	.+6      	; 0x2508 <AutoCheck+0x8f6>
#ifdef FREQUENCY_50HZ
  lcd_fix_string(T50HZ);	//" 50Hz"
  ADC_PORT = TXD_VAL;
  ADC_DDR = 1<<TP1 | TXD_MSK;	// Pin 1 to GND
  R_DDR = (1<<(TP3*2)) | (1<<(TP2*2));
  for(ww=0;ww<30;ww++) {	// repeat the signal up to 30 times (1 minute)
    2502:	1f 5f       	subi	r17, 0xFF	; 255
    2504:	1e 31       	cpi	r17, 0x1E	; 30
    2506:	41 f7       	brne	.-48     	; 0x24d8 <AutoCheck+0x8c6>
        // if key is pressed, don't repeat
        break;
     }
  }
#endif
 PartFound = PART_NONE;
    2508:	10 92 09 01 	sts	0x0109, r1
 wait1s();			//wait 1 seconds
    250c:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <wait1000ms>
 } 
    2510:	2e 96       	adiw	r28, 0x0e	; 14
    2512:	0f b6       	in	r0, 0x3f	; 63
    2514:	f8 94       	cli
    2516:	de bf       	out	0x3e, r29	; 62
    2518:	0f be       	out	0x3f, r0	; 63
    251a:	cd bf       	out	0x3d, r28	; 61
    251c:	cf 91       	pop	r28
    251e:	df 91       	pop	r29
    2520:	1f 91       	pop	r17
    2522:	0f 91       	pop	r16
    2524:	ff 90       	pop	r15
    2526:	ef 90       	pop	r14
    2528:	df 90       	pop	r13
    252a:	cf 90       	pop	r12
    252c:	bf 90       	pop	r11
    252e:	af 90       	pop	r10
    2530:	9f 90       	pop	r9
    2532:	8f 90       	pop	r8
    2534:	7f 90       	pop	r7
    2536:	6f 90       	pop	r6
    2538:	5f 90       	pop	r5
    253a:	4f 90       	pop	r4
    253c:	3f 90       	pop	r3
    253e:	2f 90       	pop	r2
    2540:	08 95       	ret

00002542 <main>:
//#define DebugOut 5		// if set, output of Transistor checks in row 2+3
//#define DebugOut 10		// if set, output of capacity measurements (ReadCapacity) in row 3+4 
#include "Transistortester.h"

//begin of transistortester program
int main(void) {
    2542:	0f 93       	push	r16
    2544:	1f 93       	push	r17
    2546:	cf 93       	push	r28
    2548:	df 93       	push	r29
  //switch on
  ON_DDR = (1<<ON_PIN);
    254a:	80 e4       	ldi	r24, 0x40	; 64
    254c:	8a b9       	out	0x0a, r24	; 10
  ON_PORT = (1<<ON_PIN) | (1<<RST_PIN);	//power on and Pullup for the Reset-Pin
    254e:	80 ec       	ldi	r24, 0xC0	; 192
    2550:	8b b9       	out	0x0b, r24	; 11
  uint8_t tmp;
  //ADC-Init
  ADCSRA = (1<<ADEN) | AUTO_CLOCK_DIV;	//prescaler=8 or 64 (if 8Mhz clock)
    2552:	86 e8       	ldi	r24, 0x86	; 134
    2554:	80 93 7a 00 	sts	0x007A, r24
// #define WDRF_HOME MCU_STATUS_REG
 #define WDRF_HOME MCUCSR
#else
 #define WDRF_HOME MCUSR
#endif
  tmp = (WDRF_HOME & (1<<WDRF));	// save Watch Dog Flag
    2558:	14 b7       	in	r17, 0x34	; 52
  WDRF_HOME &= ~(1<<WDRF);	 	//reset Watch Dog flag
    255a:	84 b7       	in	r24, 0x34	; 52
    255c:	87 7f       	andi	r24, 0xF7	; 247
    255e:	84 bf       	out	0x34, r24	; 52
  wdt_disable();			// disable Watch Dog
    2560:	88 e1       	ldi	r24, 0x18	; 24
    2562:	0f b6       	in	r0, 0x3f	; 63
    2564:	f8 94       	cli
    2566:	80 93 60 00 	sts	0x0060, r24
    256a:	10 92 60 00 	sts	0x0060, r1
    256e:	0f be       	out	0x3f, r0	; 63
  lcd_init();				//initialize LCD
    2570:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_init>
	
//  ADC_PORT = TXD_VAL;
//  ADC_DDR = TXD_MSK;
  if(tmp) { 
    2574:	13 ff       	sbrs	r17, 3
    2576:	0a c0       	rjmp	.+20     	; 0x258c <main+0x4a>
     // check if  Watchdog-Event 
     // this happens, if the Watchdog is not reset for 2s
     // can happen, if any loop in the Program doen't finish.
     lcd_line1();
    2578:	80 e8       	ldi	r24, 0x80	; 128
    257a:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
     lcd_fix_string(TestTimedOut);	//Output Timeout
    257e:	8f e2       	ldi	r24, 0x2F	; 47
    2580:	91 e0       	ldi	r25, 0x01	; 1
    2582:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
     wait3s();				//wait for 3 s
    2586:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <wait3s>
    258a:	ee c0       	rjmp	.+476    	; 0x2768 <main+0x226>
     ON_PORT = 0;			//shut off!
     return 0;
  }
  LCDLoadCustomChar(LCD_CHAR_DIODE1);	//Custom-Character Diode symbol
    258c:	88 e4       	ldi	r24, 0x48	; 72
    258e:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
  lcd_fix_customchar(DiodeIcon1);	//load Character  >|
    2592:	83 e2       	ldi	r24, 0x23	; 35
    2594:	92 e0       	ldi	r25, 0x02	; 2
    2596:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_DIODE2);	//Custom-Character 
    259a:	80 e5       	ldi	r24, 0x50	; 80
    259c:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
  lcd_fix_customchar(DiodeIcon2);	//load Character  |<
    25a0:	8b e2       	ldi	r24, 0x2B	; 43
    25a2:	92 e0       	ldi	r25, 0x02	; 2
    25a4:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_fix_customchar>
#ifdef C_MESS
  LCDLoadCustomChar(LCD_CHAR_CAP);	//Custom-Character  Capacitor symbol
    25a8:	88 e5       	ldi	r24, 0x58	; 88
    25aa:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
  lcd_fix_customchar(CapIcon);		//load Character  ||
    25ae:	83 e3       	ldi	r24, 0x33	; 51
    25b0:	92 e0       	ldi	r25, 0x02	; 2
    25b2:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_fix_customchar>
#endif
#ifdef R_MESS
  LCDLoadCustomChar(LCD_CHAR_RESIS1);	//Custom-Character Resistor symbol
    25b6:	80 e7       	ldi	r24, 0x70	; 112
    25b8:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
  lcd_fix_customchar(ResIcon1);		//load Character  [
    25bc:	8b e3       	ldi	r24, 0x3B	; 59
    25be:	92 e0       	ldi	r25, 0x02	; 2
    25c0:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS2);	//Custom-Character 
    25c4:	88 e7       	ldi	r24, 0x78	; 120
    25c6:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
  lcd_fix_customchar(ResIcon2);		//load Character  ]
    25ca:	83 e4       	ldi	r24, 0x43	; 67
    25cc:	92 e0       	ldi	r25, 0x02	; 2
    25ce:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_fix_customchar>
#endif
#ifdef PULLUP_DISABLE
 #ifdef __AVR_ATmega8__
  SFIOR = (1<<PUD);		// disable Pull-Up Resistors mega8
 #else
  MCUCR = (1<<PUD);		// disable Pull-Up Resistors mega168 family
    25d2:	80 e1       	ldi	r24, 0x10	; 16
    25d4:	85 bf       	out	0x35, r24	; 53
 #endif
#endif

#if POWER_OFF+0 > 1
  // tester display time selection
  display_time = OFF_WAIT_TIME;		// LONG_WAIT_TIME for single mode, else SHORT_WAIT_TIME
    25d6:	88 eb       	ldi	r24, 0xB8	; 184
    25d8:	9b e0       	ldi	r25, 0x0B	; 11
    25da:	90 93 03 01 	sts	0x0103, r25
    25de:	80 93 02 01 	sts	0x0102, r24
  if (!(ON_PIN_REG & (1<<RST_PIN))) {
    25e2:	4f 99       	sbic	0x09, 7	; 9
    25e4:	0a c0       	rjmp	.+20     	; 0x25fa <main+0xb8>
     // if power button is pressed ...
     wait300ms();			// wait to catch a long key press
    25e6:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <wait300ms>
     if (!(ON_PIN_REG & (1<<RST_PIN))) {
    25ea:	4f 99       	sbic	0x09, 7	; 9
    25ec:	06 c0       	rjmp	.+12     	; 0x25fa <main+0xb8>
        // check if power button is still pressed
        display_time = LONG_WAIT_TIME;	// ... set long time display anyway
    25ee:	80 e1       	ldi	r24, 0x10	; 16
    25f0:	97 e2       	ldi	r25, 0x27	; 39
    25f2:	90 93 03 01 	sts	0x0103, r25
    25f6:	80 93 02 01 	sts	0x0102, r24
  }
#else
  #define display_time OFF_WAIT_TIME
#endif

  empty_count = 0;
    25fa:	10 92 46 01 	sts	0x0146, r1
  mess_count = 0;
    25fe:	10 92 0e 01 	sts	0x010E, r1


//*****************************************************************
//Entry: if start key is pressed before shut down
start:
  PartFound = PART_NONE;
    2602:	10 92 09 01 	sts	0x0109, r1
  NumOfDiodes = 0;
    2606:	10 92 07 01 	sts	0x0107, r1
  PartReady = 0;
    260a:	10 92 06 01 	sts	0x0106, r1
  PartMode = 0;
    260e:	10 92 08 01 	sts	0x0108, r1
  WithReference = 0;		// no precision reference voltage
    2612:	10 92 45 01 	sts	0x0145, r1
  lcd_clear();
    2616:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clear>
  ADC_DDR = TXD_MSK;		//activate Software-UART 
    261a:	88 e0       	ldi	r24, 0x08	; 8
    261c:	87 b9       	out	0x07, r24	; 7
#ifdef AUTO_CAL
  resis680pl = eeprom_read_word(&R680pl);
    261e:	81 e5       	ldi	r24, 0x51	; 81
    2620:	92 e0       	ldi	r25, 0x02	; 2
    2622:	0e 94 31 19 	call	0x3262	; 0x3262 <__eerd_word_m328p>
    2626:	90 93 0c 01 	sts	0x010C, r25
    262a:	80 93 0b 01 	sts	0x010B, r24
  resis680mi = eeprom_read_word(&R680mi);
    262e:	83 e5       	ldi	r24, 0x53	; 83
    2630:	92 e0       	ldi	r25, 0x02	; 2
    2632:	0e 94 31 19 	call	0x3262	; 0x3262 <__eerd_word_m328p>
    2636:	90 93 05 01 	sts	0x0105, r25
    263a:	80 93 04 01 	sts	0x0104, r24
#endif

#ifdef R_MESS
  ResistorsFound = 0;
    263e:	10 92 59 01 	sts	0x0159, r1
#endif
#ifdef C_MESS
  ca = 0;
    2642:	10 92 60 01 	sts	0x0160, r1
  cb = 0;
    2646:	10 92 0a 01 	sts	0x010A, r1
#endif
#ifdef WITH_UART
  uart_newline();		// start of new measurement
    264a:	0e 94 b2 00 	call	0x164	; 0x164 <uart_newline>
#endif
  ADCconfig.RefFlag = 0;
    264e:	10 92 3d 01 	sts	0x013D, r1
  ADCconfig.U_AVCC = U_VCC;	// set initial VCC Voltage
    2652:	88 e8       	ldi	r24, 0x88	; 136
    2654:	93 e1       	ldi	r25, 0x13	; 19
    2656:	90 93 41 01 	sts	0x0141, r25
    265a:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.Samples = 190;		// set number of ADC samples near to max
    265e:	8e eb       	ldi	r24, 0xBE	; 190
    2660:	80 93 3c 01 	sts	0x013C, r24
  ChargePin10ms((1<<TPREF),0);	// shorten 2.5V reference voltage
    2664:	80 e1       	ldi	r24, 0x10	; 16
    2666:	60 e0       	ldi	r22, 0x00	; 0
    2668:	0e 94 45 01 	call	0x28a	; 0x28a <ChargePin10ms>
  trans.uBE[1] = W5msReadADC(TPREF); // read voltage of precision reference
    266c:	84 e0       	ldi	r24, 0x04	; 4
    266e:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
    2672:	ec 01       	movw	r28, r24
    2674:	90 93 55 01 	sts	0x0155, r25
    2678:	80 93 54 01 	sts	0x0154, r24
  if ((trans.uBE[1] > 2250) && (trans.uBE[1] < 2750)) {
    267c:	8b 5c       	subi	r24, 0xCB	; 203
    267e:	98 40       	sbci	r25, 0x08	; 8
    2680:	21 e0       	ldi	r18, 0x01	; 1
    2682:	83 3f       	cpi	r24, 0xF3	; 243
    2684:	92 07       	cpc	r25, r18
    2686:	c0 f4       	brcc	.+48     	; 0x26b8 <main+0x176>
     // precision voltage reference connected, update U_AVCC
     WithReference = 1;
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	80 93 45 01 	sts	0x0145, r24
     ADCconfig.U_AVCC = (unsigned long)((unsigned long)ADCconfig.U_AVCC * 2495) / trans.uBE[1];
    268e:	60 91 40 01 	lds	r22, 0x0140
    2692:	70 91 41 01 	lds	r23, 0x0141
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	2f eb       	ldi	r18, 0xBF	; 191
    269c:	39 e0       	ldi	r19, 0x09	; 9
    269e:	40 e0       	ldi	r20, 0x00	; 0
    26a0:	50 e0       	ldi	r21, 0x00	; 0
    26a2:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
    26a6:	9e 01       	movw	r18, r28
    26a8:	40 e0       	ldi	r20, 0x00	; 0
    26aa:	50 e0       	ldi	r21, 0x00	; 0
    26ac:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
    26b0:	30 93 41 01 	sts	0x0141, r19
    26b4:	20 93 40 01 	sts	0x0140, r18
  }
  lcd_line1();	//1. row 
    26b8:	80 e8       	ldi	r24, 0x80	; 128
    26ba:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
  
#ifdef WITH_AUTO_REF
  (void) ReadADC(0x0e);		// read Reference-voltage 
  ref_mv = W20msReadADC(0x0e);	// read Reference-voltage
#else
  ref_mv = DEFAULT_BAND_GAP;	// set to default Reference Voltage
    26be:	8e e2       	ldi	r24, 0x2E	; 46
    26c0:	94 e0       	ldi	r25, 0x04	; 4
    26c2:	90 93 43 01 	sts	0x0143, r25
    26c6:	80 93 42 01 	sts	0x0142, r24
#endif
  ADCconfig.U_Bandgap = ADC_internal_reference;	// set internal reference voltage for ADC
    26ca:	85 e5       	ldi	r24, 0x55	; 85
    26cc:	92 e0       	ldi	r25, 0x02	; 2
    26ce:	0e 94 29 19 	call	0x3252	; 0x3252 <__eerd_byte_m328p>
    26d2:	99 27       	eor	r25, r25
    26d4:	87 fd       	sbrc	r24, 7
    26d6:	90 95       	com	r25
    26d8:	82 5d       	subi	r24, 0xD2	; 210
    26da:	9b 4f       	sbci	r25, 0xFB	; 251
    26dc:	90 93 3f 01 	sts	0x013F, r25
    26e0:	80 93 3e 01 	sts	0x013E, r24
  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    26e4:	89 e1       	ldi	r24, 0x19	; 25
    26e6:	80 93 3c 01 	sts	0x013C, r24

#ifdef BAT_CHECK
  // Battery check is selected
  ReadADC(TPBAT);	//Dummy-Readout
    26ea:	85 e0       	ldi	r24, 0x05	; 5
    26ec:	0e 94 09 18 	call	0x3012	; 0x3012 <ReadADC>
  trans.uBE[0] = W5msReadADC(TPBAT); 	//with 5V reference
    26f0:	85 e0       	ldi	r24, 0x05	; 5
    26f2:	0e 94 07 18 	call	0x300e	; 0x300e <W5msReadADC>
    26f6:	90 93 53 01 	sts	0x0153, r25
    26fa:	80 93 52 01 	sts	0x0152, r24
  lcd_fix_string(Bat);		//output: "Bat. "
    26fe:	83 e6       	ldi	r24, 0x63	; 99
    2700:	91 e0       	ldi	r25, 0x01	; 1
    2702:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
 #ifdef BAT_OUT
  // display Battery voltage
  // The divisor to get the voltage in 0.01V units is ((10*33)/133) witch is about 2.4812
  // A good result can be get with multiply by 4 and divide by 10 (about 0.75%).
  cval = (trans.uBE[0]*4)/10+((BAT_OUT+5)/10); // usually output only 2 digits
    2706:	80 91 52 01 	lds	r24, 0x0152
    270a:	90 91 53 01 	lds	r25, 0x0153
    270e:	88 0f       	add	r24, r24
    2710:	99 1f       	adc	r25, r25
    2712:	88 0f       	add	r24, r24
    2714:	99 1f       	adc	r25, r25
    2716:	6a e0       	ldi	r22, 0x0A	; 10
    2718:	70 e0       	ldi	r23, 0x00	; 0
    271a:	0e 94 a1 18 	call	0x3142	; 0x3142 <__udivmodhi4>
    271e:	61 5f       	subi	r22, 0xF1	; 241
    2720:	7f 4f       	sbci	r23, 0xFF	; 255
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	60 93 7b 01 	sts	0x017B, r22
    272a:	70 93 7c 01 	sts	0x017C, r23
    272e:	80 93 7d 01 	sts	0x017D, r24
    2732:	90 93 7e 01 	sts	0x017E, r25
  DisplayValue(cval,-2,'V',2);		// Display 2 Digits of this 10mV units
    2736:	4e ef       	ldi	r20, 0xFE	; 254
    2738:	26 e5       	ldi	r18, 0x56	; 86
    273a:	02 e0       	ldi	r16, 0x02	; 2
    273c:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DisplayValue>
  lcd_space();
    2740:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_space>
 #warning "Battery POOR level is set for 7805 regulator"
 #define WARN_LEVEL (((unsigned long)7300*(unsigned long)33)/133)
 #define POOR_LEVEL (((unsigned long)6300*(unsigned long)33)/133)
 #endif
  // check the battery voltage
  if (trans.uBE[0] <  WARN_LEVEL) {
    2744:	80 91 52 01 	lds	r24, 0x0152
    2748:	90 91 53 01 	lds	r25, 0x0153
    274c:	27 e0       	ldi	r18, 0x07	; 7
    274e:	8c 32       	cpi	r24, 0x2C	; 44
    2750:	92 07       	cpc	r25, r18
    2752:	a8 f4       	brcc	.+42     	; 0x277e <main+0x23c>
     //Vcc < 7,3V; show Warning 
     if(trans.uBE[0] < POOR_LEVEL) {	
    2754:	26 e0       	ldi	r18, 0x06	; 6
    2756:	83 33       	cpi	r24, 0x33	; 51
    2758:	92 07       	cpc	r25, r18
    275a:	70 f4       	brcc	.+28     	; 0x2778 <main+0x236>
        //Vcc <6,3V; no proper operation is possible
        lcd_fix_string(BatEmpty);	//Battery empty!
    275c:	88 ed       	ldi	r24, 0xD8	; 216
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
        wait2s();
    2764:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <wait2s>
        PORTD = 0;			//switch power off
    2768:	1b b8       	out	0x0b, r1	; 11
  }
#else
  goto start;	// POWER_OFF not selected, repeat measurement
#endif
  return 0;
}   // end main
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	df 91       	pop	r29
    2770:	cf 91       	pop	r28
    2772:	1f 91       	pop	r17
    2774:	0f 91       	pop	r16
    2776:	08 95       	ret
        lcd_fix_string(BatEmpty);	//Battery empty!
        wait2s();
        PORTD = 0;			//switch power off
        return 0;
     }
     lcd_fix_string(BatWeak);		//Battery weak
    2778:	83 ed       	ldi	r24, 0xD3	; 211
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	02 c0       	rjmp	.+4      	; 0x2782 <main+0x240>
  } else { // Battery-voltage OK
     lcd_fix_string(OK); 		// "OK"
    277e:	89 e6       	ldi	r24, 0x69	; 105
    2780:	91 e0       	ldi	r25, 0x01	; 1
    2782:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
  }
#else
  lcd_fix_string(VERSION);		// if no Battery check, Version .. in row 1
#endif
#ifdef WDT_enabled
  wdt_enable(WDTO_2S);		//Watchdog on
    2786:	2f e0       	ldi	r18, 0x0F	; 15
    2788:	88 e1       	ldi	r24, 0x18	; 24
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	0f b6       	in	r0, 0x3f	; 63
    278e:	f8 94       	cli
    2790:	a8 95       	wdr
    2792:	80 93 60 00 	sts	0x0060, r24
    2796:	0f be       	out	0x3f, r0	; 63
    2798:	20 93 60 00 	sts	0x0060, r18
#endif

//  wait1s();			// add mor time for reading batterie voltage
  // begin tests
#ifdef AUTO_RH
  RefVoltage();			//compute RHmultip = f(reference voltage)
    279c:	0e 94 b5 0c 	call	0x196a	; 0x196a <RefVoltage>
#endif

  lcd_line2();			//LCD position row2, column 1
    27a0:	80 ec       	ldi	r24, 0xC0	; 192
    27a2:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
  if (WithReference) {
    27a6:	80 91 45 01 	lds	r24, 0x0145
    27aa:	88 23       	and	r24, r24
    27ac:	69 f0       	breq	.+26     	; 0x27c8 <main+0x286>
     DisplayValue(ADCconfig.U_AVCC,-3,'V',3);	// Display 3 Digits of this mV units
    27ae:	60 91 40 01 	lds	r22, 0x0140
    27b2:	70 91 41 01 	lds	r23, 0x0141
    27b6:	80 e0       	ldi	r24, 0x00	; 0
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	4d ef       	ldi	r20, 0xFD	; 253
    27bc:	26 e5       	ldi	r18, 0x56	; 86
    27be:	03 e0       	ldi	r16, 0x03	; 3
    27c0:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DisplayValue>
     lcd_space();
    27c4:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_space>
  }
  lcd_fix_string(TestRunning);		//String: testing...
    27c8:	88 ec       	ldi	r24, 0xC8	; 200
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
  lcd_string(itoa((int)(trans.uBE[0] - 289), outval, 10));	//output temperature
  lcd_data(LCD_CHAR_DEGREE);
  lcd_data('C');
#endif
#ifndef DebugOut
  lcd_line2();			//LCD position row 2, column 1
    27d0:	80 ec       	ldi	r24, 0xC0	; 192
    27d2:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
#endif
#ifdef C_MESS
  #define AUSGABE_FUNKTION
  EntladePins();		// discharge all capacitors!
    27d6:	0e 94 de 07 	call	0xfbc	; 0xfbc <EntladePins>
  if(PartFound == PART_CELL) {
    27da:	80 91 09 01 	lds	r24, 0x0109
    27de:	88 30       	cpi	r24, 0x08	; 8
    27e0:	39 f4       	brne	.+14     	; 0x27f0 <main+0x2ae>
    lcd_clear();
    27e2:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clear>
//    lcd_line1();
    lcd_fix_string(Cell_str);	// display "Cell!"
    27e6:	85 ea       	ldi	r24, 0xA5	; 165
    27e8:	91 e0       	ldi	r25, 0x01	; 1
    27ea:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
    goto end2;
    27ee:	8d c3       	rjmp	.+1818   	; 0x2f0a <main+0x9c8>
  }
#endif

#ifdef CHECK_CALL
  AutoCheck();			//check, if selftest should be done
    27f0:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <AutoCheck>
  CheckPins(TP2, TP1, TP3);
  CheckPins(TP2, TP3, TP1);
  CheckPins(TP3, TP2, TP1);
  CheckPins(TP3, TP1, TP2);
#else
  CheckPins(TP1, TP2, TP3);
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	61 e0       	ldi	r22, 0x01	; 1
    27f8:	42 e0       	ldi	r20, 0x02	; 2
    27fa:	0e 94 66 01 	call	0x2cc	; 0x2cc <CheckPins>
  CheckPins(TP2, TP1, TP3);
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	60 e0       	ldi	r22, 0x00	; 0
    2802:	42 e0       	ldi	r20, 0x02	; 2
    2804:	0e 94 66 01 	call	0x2cc	; 0x2cc <CheckPins>

  CheckPins(TP1, TP3, TP2);
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	62 e0       	ldi	r22, 0x02	; 2
    280c:	41 e0       	ldi	r20, 0x01	; 1
    280e:	0e 94 66 01 	call	0x2cc	; 0x2cc <CheckPins>
  CheckPins(TP3, TP1, TP2);
    2812:	82 e0       	ldi	r24, 0x02	; 2
    2814:	60 e0       	ldi	r22, 0x00	; 0
    2816:	41 e0       	ldi	r20, 0x01	; 1
    2818:	0e 94 66 01 	call	0x2cc	; 0x2cc <CheckPins>

  CheckPins(TP2, TP3, TP1);
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	62 e0       	ldi	r22, 0x02	; 2
    2820:	40 e0       	ldi	r20, 0x00	; 0
    2822:	0e 94 66 01 	call	0x2cc	; 0x2cc <CheckPins>
  CheckPins(TP3, TP2, TP1);
    2826:	82 e0       	ldi	r24, 0x02	; 2
    2828:	61 e0       	ldi	r22, 0x01	; 1
    282a:	40 e0       	ldi	r20, 0x00	; 0
    282c:	0e 94 66 01 	call	0x2cc	; 0x2cc <CheckPins>
#endif
  
#ifdef C_MESS
  //separate check if is is a capacitor
  if(((PartFound == PART_NONE) || (PartFound == PART_RESISTOR) || (PartFound == PART_DIODE)) ) {
    2830:	80 91 09 01 	lds	r24, 0x0109
    2834:	88 23       	and	r24, r24
    2836:	21 f0       	breq	.+8      	; 0x2840 <main+0x2fe>
    2838:	86 30       	cpi	r24, 0x06	; 6
    283a:	11 f0       	breq	.+4      	; 0x2840 <main+0x2fe>
    283c:	81 30       	cpi	r24, 0x01	; 1
    283e:	81 f4       	brne	.+32     	; 0x2860 <main+0x31e>
     EntladePins();		// discharge capacities
    2840:	0e 94 de 07 	call	0xfbc	; 0xfbc <EntladePins>
     //measurement of capacities in all 3 combinations
     ReadCapacity(TP3, TP1);
    2844:	82 e0       	ldi	r24, 0x02	; 2
    2846:	60 e0       	ldi	r22, 0x00	; 0
    2848:	0e 94 8b 0a 	call	0x1516	; 0x1516 <ReadCapacity>
     ReadCapacity(TP3, TP2);
    284c:	82 e0       	ldi	r24, 0x02	; 2
    284e:	61 e0       	ldi	r22, 0x01	; 1
    2850:	0e 94 8b 0a 	call	0x1516	; 0x1516 <ReadCapacity>
     ReadCapacity(TP2, TP1);
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	60 e0       	ldi	r22, 0x00	; 0
    2858:	0e 94 8b 0a 	call	0x1516	; 0x1516 <ReadCapacity>

#if FLASHEND > 0x1fff
     ReadInductance();			// measure inductance
    285c:	0e 94 79 08 	call	0x10f2	; 0x10f2 <ReadInductance>
#endif
  }
#endif
  //All checks are done, output result to display
  lcd_clear();
    2860:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clear>
//  lcd_line1();
  if(PartFound == PART_DIODE) {
    2864:	80 91 09 01 	lds	r24, 0x0109
    2868:	81 30       	cpi	r24, 0x01	; 1
    286a:	09 f0       	breq	.+2      	; 0x286e <main+0x32c>
    286c:	ff c0       	rjmp	.+510    	; 0x2a6c <main+0x52a>
     if(NumOfDiodes == 1) {		//single Diode
    286e:	90 91 07 01 	lds	r25, 0x0107
    2872:	91 30       	cpi	r25, 0x01	; 1
    2874:	49 f5       	brne	.+82     	; 0x28c8 <main+0x386>
        lcd_fix_string(Diode);		//"Diode: "
    2876:	8d ee       	ldi	r24, 0xED	; 237
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
        lcd_testpin(diodes[0].Anode);
    287e:	80 91 63 01 	lds	r24, 0x0163
    2882:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
        lcd_fix_string(AnKat);		//"->|-"
    2886:	8b ea       	ldi	r24, 0xAB	; 171
    2888:	91 e0       	ldi	r25, 0x01	; 1
    288a:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
        lcd_testpin(diodes[0].Cathode);
    288e:	80 91 64 01 	lds	r24, 0x0164
    2892:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
        UfAusgabe(0x70);
    2896:	80 e7       	ldi	r24, 0x70	; 112
    2898:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <UfAusgabe>
#ifdef C_MESS
        lcd_fix_string(GateCap);		//"C="
    289c:	86 e7       	ldi	r24, 0x76	; 118
    289e:	91 e0       	ldi	r25, 0x01	; 1
    28a0:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
        ReadCapacity(diodes[0].Cathode,diodes[0].Anode);	// Capacity opposite flow direction
    28a4:	80 91 64 01 	lds	r24, 0x0164
    28a8:	60 91 63 01 	lds	r22, 0x0163
    28ac:	0e 94 8b 0a 	call	0x1516	; 0x1516 <ReadCapacity>
        DisplayValue(cval,cpre,'F',3);
    28b0:	60 91 7b 01 	lds	r22, 0x017B
    28b4:	70 91 7c 01 	lds	r23, 0x017C
    28b8:	80 91 7d 01 	lds	r24, 0x017D
    28bc:	90 91 7e 01 	lds	r25, 0x017E
    28c0:	40 91 49 01 	lds	r20, 0x0149
    28c4:	26 e4       	ldi	r18, 0x46	; 70
    28c6:	a6 c2       	rjmp	.+1356   	; 0x2e14 <main+0x8d2>
#endif
        goto end;
     } else if(NumOfDiodes == 2) { // double diode
    28c8:	92 30       	cpi	r25, 0x02	; 2
    28ca:	09 f0       	breq	.+2      	; 0x28ce <main+0x38c>
    28cc:	4c c0       	rjmp	.+152    	; 0x2966 <main+0x424>
        lcd_data('2');
    28ce:	82 e3       	ldi	r24, 0x32	; 50
    28d0:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
        lcd_fix_string(Dioden);		//"diodes "
    28d4:	83 eb       	ldi	r24, 0xB3	; 179
    28d6:	91 e0       	ldi	r25, 0x01	; 1
    28d8:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
        if(diodes[0].Anode == diodes[1].Anode) { //Common Anode
    28dc:	90 91 63 01 	lds	r25, 0x0163
    28e0:	20 91 67 01 	lds	r18, 0x0167
    28e4:	92 17       	cp	r25, r18
    28e6:	59 f4       	brne	.+22     	; 0x28fe <main+0x3bc>
           lcd_testpin(diodes[0].Cathode);
    28e8:	80 91 64 01 	lds	r24, 0x0164
    28ec:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    28f0:	8f ea       	ldi	r24, 0xAF	; 175
    28f2:	91 e0       	ldi	r25, 0x01	; 1
    28f4:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    28f8:	80 91 63 01 	lds	r24, 0x0163
    28fc:	2b c0       	rjmp	.+86     	; 0x2954 <main+0x412>
           lcd_fix_string(AnKat);	//"->|-"
           lcd_testpin(diodes[1].Cathode);
           UfAusgabe(0x01);
           goto end;
        } else if(diodes[0].Cathode == diodes[1].Cathode) { //Common Cathode
    28fe:	30 91 64 01 	lds	r19, 0x0164
    2902:	80 91 68 01 	lds	r24, 0x0168
    2906:	38 17       	cp	r19, r24
    2908:	b9 f4       	brne	.+46     	; 0x2938 <main+0x3f6>
           lcd_testpin(diodes[0].Anode);
    290a:	89 2f       	mov	r24, r25
    290c:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2910:	8b ea       	ldi	r24, 0xAB	; 171
    2912:	91 e0       	ldi	r25, 0x01	; 1
    2914:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
	   lcd_testpin(diodes[0].Cathode);
    2918:	80 91 64 01 	lds	r24, 0x0164
    291c:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    2920:	8f ea       	ldi	r24, 0xAF	; 175
    2922:	91 e0       	ldi	r25, 0x01	; 1
    2924:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
           lcd_testpin(diodes[1].Anode);
    2928:	80 91 67 01 	lds	r24, 0x0167
    292c:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
           UfAusgabe(0x01);
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <UfAusgabe>
           goto end;
    2936:	e2 c2       	rjmp	.+1476   	; 0x2efc <main+0x9ba>
          }
        else if ((diodes[0].Cathode == diodes[1].Anode) && (diodes[1].Cathode == diodes[0].Anode)) {
    2938:	32 17       	cp	r19, r18
    293a:	09 f0       	breq	.+2      	; 0x293e <main+0x3fc>
    293c:	ad c2       	rjmp	.+1370   	; 0x2e98 <main+0x956>
    293e:	89 17       	cp	r24, r25
    2940:	09 f0       	breq	.+2      	; 0x2944 <main+0x402>
    2942:	aa c2       	rjmp	.+1364   	; 0x2e98 <main+0x956>
           //Antiparallel
           lcd_testpin(diodes[0].Anode);
    2944:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2948:	8b ea       	ldi	r24, 0xAB	; 171
    294a:	91 e0       	ldi	r25, 0x01	; 1
    294c:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
           lcd_testpin(diodes[0].Cathode);
    2950:	80 91 64 01 	lds	r24, 0x0164
    2954:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2958:	8b ea       	ldi	r24, 0xAB	; 171
    295a:	91 e0       	ldi	r25, 0x01	; 1
    295c:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
           lcd_testpin(diodes[1].Cathode);
    2960:	80 91 68 01 	lds	r24, 0x0168
    2964:	e3 cf       	rjmp	.-58     	; 0x292c <main+0x3ea>
           UfAusgabe(0x01);
           goto end;
        }
     } else if(NumOfDiodes == 3) {
    2966:	93 30       	cpi	r25, 0x03	; 3
    2968:	09 f0       	breq	.+2      	; 0x296c <main+0x42a>
    296a:	96 c2       	rjmp	.+1324   	; 0x2e98 <main+0x956>
        //Serial of 2 Diodes; was detected as 3 Diodes 
        trans.b = 3;
    296c:	90 93 56 01 	sts	0x0156, r25
        trans.c = 3;
    2970:	90 93 57 01 	sts	0x0157, r25
        /* Check for any constallation of 2 serial diodes:
          Only once the pin No of anyone Cathode is identical of another anode.
          two diodes in series is additionally detected as third big diode.
        */
        if(diodes[0].Cathode == diodes[1].Anode)
    2974:	50 91 64 01 	lds	r21, 0x0164
    2978:	90 91 67 01 	lds	r25, 0x0167
    297c:	59 17       	cp	r21, r25
    297e:	21 f4       	brne	.+8      	; 0x2988 <main+0x446>
          {
           trans.b = 0;
    2980:	10 92 56 01 	sts	0x0156, r1
           trans.c = 1;
    2984:	80 93 57 01 	sts	0x0157, r24
          }
        if(diodes[0].Anode == diodes[1].Cathode)
    2988:	40 91 63 01 	lds	r20, 0x0163
    298c:	30 91 68 01 	lds	r19, 0x0168
    2990:	43 17       	cp	r20, r19
    2992:	29 f4       	brne	.+10     	; 0x299e <main+0x45c>
          {
           trans.b = 1;
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	80 93 56 01 	sts	0x0156, r24
           trans.c = 0;
    299a:	10 92 57 01 	sts	0x0157, r1
          }
        if(diodes[0].Cathode == diodes[2].Anode)
    299e:	20 91 6b 01 	lds	r18, 0x016B
    29a2:	52 17       	cp	r21, r18
    29a4:	29 f4       	brne	.+10     	; 0x29b0 <main+0x46e>
          {
           trans.b = 0;
    29a6:	10 92 56 01 	sts	0x0156, r1
           trans.c = 2;
    29aa:	82 e0       	ldi	r24, 0x02	; 2
    29ac:	80 93 57 01 	sts	0x0157, r24
          }
        if(diodes[0].Anode == diodes[2].Cathode)
    29b0:	80 91 6c 01 	lds	r24, 0x016C
    29b4:	48 17       	cp	r20, r24
    29b6:	29 f4       	brne	.+10     	; 0x29c2 <main+0x480>
          {
           trans.b = 2;
    29b8:	42 e0       	ldi	r20, 0x02	; 2
    29ba:	40 93 56 01 	sts	0x0156, r20
           trans.c = 0;
    29be:	10 92 57 01 	sts	0x0157, r1
          }
        if(diodes[1].Cathode == diodes[2].Anode)
    29c2:	32 17       	cp	r19, r18
    29c4:	31 f4       	brne	.+12     	; 0x29d2 <main+0x490>
          {
           trans.b = 1;
    29c6:	21 e0       	ldi	r18, 0x01	; 1
    29c8:	20 93 56 01 	sts	0x0156, r18
           trans.c = 2;
    29cc:	22 e0       	ldi	r18, 0x02	; 2
    29ce:	20 93 57 01 	sts	0x0157, r18
          }
        if(diodes[1].Anode == diodes[2].Cathode)
    29d2:	98 17       	cp	r25, r24
    29d4:	31 f4       	brne	.+12     	; 0x29e2 <main+0x4a0>
          {
           trans.b = 2;
    29d6:	82 e0       	ldi	r24, 0x02	; 2
    29d8:	80 93 56 01 	sts	0x0156, r24
           trans.c = 1;
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	80 93 57 01 	sts	0x0157, r24
        lcd_testpin(diodes[2].Cathode);
        lcd_space();
        lcd_string(utoa(diodes[2].Voltage, outval, 10));
        lcd_line1();
#endif
        if((trans.b<3) && (trans.c<3)) {
    29e2:	80 91 56 01 	lds	r24, 0x0156
    29e6:	83 30       	cpi	r24, 0x03	; 3
    29e8:	08 f0       	brcs	.+2      	; 0x29ec <main+0x4aa>
    29ea:	56 c2       	rjmp	.+1196   	; 0x2e98 <main+0x956>
    29ec:	80 91 57 01 	lds	r24, 0x0157
    29f0:	83 30       	cpi	r24, 0x03	; 3
    29f2:	08 f0       	brcs	.+2      	; 0x29f6 <main+0x4b4>
    29f4:	51 c2       	rjmp	.+1186   	; 0x2e98 <main+0x956>
           lcd_data('3');
    29f6:	83 e3       	ldi	r24, 0x33	; 51
    29f8:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
           lcd_fix_string(Dioden);	//"Diodes "
    29fc:	83 eb       	ldi	r24, 0xB3	; 179
    29fe:	91 e0       	ldi	r25, 0x01	; 1
    2a00:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Anode);
    2a04:	e0 91 56 01 	lds	r30, 0x0156
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	ee 0f       	add	r30, r30
    2a0c:	ff 1f       	adc	r31, r31
    2a0e:	ee 0f       	add	r30, r30
    2a10:	ff 1f       	adc	r31, r31
    2a12:	ed 59       	subi	r30, 0x9D	; 157
    2a14:	fe 4f       	sbci	r31, 0xFE	; 254
    2a16:	80 81       	ld	r24, Z
    2a18:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2a1c:	8b ea       	ldi	r24, 0xAB	; 171
    2a1e:	91 e0       	ldi	r25, 0x01	; 1
    2a20:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Cathode);
    2a24:	e0 91 56 01 	lds	r30, 0x0156
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	ee 0f       	add	r30, r30
    2a2c:	ff 1f       	adc	r31, r31
    2a2e:	ee 0f       	add	r30, r30
    2a30:	ff 1f       	adc	r31, r31
    2a32:	ed 59       	subi	r30, 0x9D	; 157
    2a34:	fe 4f       	sbci	r31, 0xFE	; 254
    2a36:	81 81       	ldd	r24, Z+1	; 0x01
    2a38:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2a3c:	8b ea       	ldi	r24, 0xAB	; 171
    2a3e:	91 e0       	ldi	r25, 0x01	; 1
    2a40:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
           lcd_testpin(diodes[trans.c].Cathode);
    2a44:	e0 91 57 01 	lds	r30, 0x0157
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	ee 0f       	add	r30, r30
    2a4c:	ff 1f       	adc	r31, r31
    2a4e:	ee 0f       	add	r30, r30
    2a50:	ff 1f       	adc	r31, r31
    2a52:	ed 59       	subi	r30, 0x9D	; 157
    2a54:	fe 4f       	sbci	r31, 0xFE	; 254
    2a56:	81 81       	ldd	r24, Z+1	; 0x01
    2a58:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
           UfAusgabe( (trans.b<<4)|trans.c);
    2a5c:	80 91 56 01 	lds	r24, 0x0156
    2a60:	82 95       	swap	r24
    2a62:	80 7f       	andi	r24, 0xF0	; 240
    2a64:	90 91 57 01 	lds	r25, 0x0157
    2a68:	89 2b       	or	r24, r25
    2a6a:	63 cf       	rjmp	.-314    	; 0x2932 <main+0x3f0>
           goto end;
        }
     }
     // end (PartFound == PART_DIODE)
  } else if (PartFound == PART_TRANSISTOR) {
    2a6c:	82 30       	cpi	r24, 0x02	; 2
    2a6e:	09 f0       	breq	.+2      	; 0x2a72 <main+0x530>
    2a70:	7f c0       	rjmp	.+254    	; 0x2b70 <main+0x62e>
    if(PartReady != 0) {
    2a72:	80 91 06 01 	lds	r24, 0x0106
    2a76:	88 23       	and	r24, r24
    2a78:	71 f1       	breq	.+92     	; 0x2ad6 <main+0x594>
       if((trans.hfe[0]>trans.hfe[1])) {
    2a7a:	80 91 4e 01 	lds	r24, 0x014E
    2a7e:	90 91 4f 01 	lds	r25, 0x014F
    2a82:	a0 91 50 01 	lds	r26, 0x0150
    2a86:	b0 91 51 01 	lds	r27, 0x0151
    2a8a:	20 91 4a 01 	lds	r18, 0x014A
    2a8e:	30 91 4b 01 	lds	r19, 0x014B
    2a92:	40 91 4c 01 	lds	r20, 0x014C
    2a96:	50 91 4d 01 	lds	r21, 0x014D
    2a9a:	82 17       	cp	r24, r18
    2a9c:	93 07       	cpc	r25, r19
    2a9e:	a4 07       	cpc	r26, r20
    2aa0:	b5 07       	cpc	r27, r21
    2aa2:	48 f4       	brcc	.+18     	; 0x2ab6 <main+0x574>
          //if the amplification factor was higher at first testr: swap C and E !
          tmp = trans.c;
    2aa4:	80 91 57 01 	lds	r24, 0x0157
          trans.c = trans.e;
    2aa8:	90 91 58 01 	lds	r25, 0x0158
    2aac:	90 93 57 01 	sts	0x0157, r25
          trans.e = tmp;
    2ab0:	80 93 58 01 	sts	0x0158, r24
    2ab4:	10 c0       	rjmp	.+32     	; 0x2ad6 <main+0x594>
       } else {
          trans.hfe[0] = trans.hfe[1];
    2ab6:	80 93 4a 01 	sts	0x014A, r24
    2aba:	90 93 4b 01 	sts	0x014B, r25
    2abe:	a0 93 4c 01 	sts	0x014C, r26
    2ac2:	b0 93 4d 01 	sts	0x014D, r27
          trans.uBE[0] = trans.uBE[1];
    2ac6:	80 91 54 01 	lds	r24, 0x0154
    2aca:	90 91 55 01 	lds	r25, 0x0155
    2ace:	90 93 53 01 	sts	0x0153, r25
    2ad2:	80 93 52 01 	sts	0x0152, r24
       }
    }

    if(PartMode == PART_MODE_NPN) {
    2ad6:	80 91 08 01 	lds	r24, 0x0108
    2ada:	81 30       	cpi	r24, 0x01	; 1
    2adc:	19 f4       	brne	.+6      	; 0x2ae4 <main+0x5a2>
       lcd_fix_string(NPN);		//"NPN "
    2ade:	8c e7       	ldi	r24, 0x7C	; 124
    2ae0:	91 e0       	ldi	r25, 0x01	; 1
    2ae2:	02 c0       	rjmp	.+4      	; 0x2ae8 <main+0x5a6>
    } else {
       lcd_fix_string(PNP);		//"PNP "
    2ae4:	81 e8       	ldi	r24, 0x81	; 129
    2ae6:	91 e0       	ldi	r25, 0x01	; 1
    2ae8:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
    }
    if(NumOfDiodes > 2) {	//Transistor with protection diode
    2aec:	80 91 07 01 	lds	r24, 0x0107
    2af0:	83 30       	cpi	r24, 0x03	; 3
    2af2:	58 f0       	brcs	.+22     	; 0x2b0a <main+0x5c8>
       if(PartMode == PART_MODE_NPN) {
    2af4:	80 91 08 01 	lds	r24, 0x0108
    2af8:	81 30       	cpi	r24, 0x01	; 1
    2afa:	19 f4       	brne	.+6      	; 0x2b02 <main+0x5c0>
          lcd_fix_string(AnKat);	//"->|-"
    2afc:	8b ea       	ldi	r24, 0xAB	; 171
    2afe:	91 e0       	ldi	r25, 0x01	; 1
    2b00:	02 c0       	rjmp	.+4      	; 0x2b06 <main+0x5c4>
       } else {
          lcd_fix_string(KatAn);	//"-|<-"
    2b02:	8f ea       	ldi	r24, 0xAF	; 175
    2b04:	91 e0       	ldi	r25, 0x01	; 1
    2b06:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
       }
    }
    lcd_fix_string(ebcstr);		//" EBC="
    2b0a:	86 e8       	ldi	r24, 0x86	; 134
    2b0c:	91 e0       	ldi	r25, 0x01	; 1
    2b0e:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
    lcd_testpin(trans.e);
    2b12:	80 91 58 01 	lds	r24, 0x0158
    2b16:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
    lcd_testpin(trans.b);
    2b1a:	80 91 56 01 	lds	r24, 0x0156
    2b1e:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
    lcd_testpin(trans.c);
    2b22:	80 91 57 01 	lds	r24, 0x0157
    2b26:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
    lcd_line2(); //2. row 
    2b2a:	80 ec       	ldi	r24, 0xC0	; 192
    2b2c:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
    lcd_fix_string(hfestr);		//"B="  (hFE)
    2b30:	89 e7       	ldi	r24, 0x79	; 121
    2b32:	91 e0       	ldi	r25, 0x01	; 1
    2b34:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
    DisplayValue(trans.hfe[0],0,0,3);
    2b38:	60 91 4a 01 	lds	r22, 0x014A
    2b3c:	70 91 4b 01 	lds	r23, 0x014B
    2b40:	80 91 4c 01 	lds	r24, 0x014C
    2b44:	90 91 4d 01 	lds	r25, 0x014D
    2b48:	40 e0       	ldi	r20, 0x00	; 0
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	03 e0       	ldi	r16, 0x03	; 3
    2b4e:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DisplayValue>
    lcd_space();
    2b52:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_space>

    lcd_fix_string(Uf);		//"Uf="
    2b56:	82 e9       	ldi	r24, 0x92	; 146
    2b58:	91 e0       	ldi	r25, 0x01	; 1
    2b5a:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
    DisplayValue(trans.uBE[0],-3,'V',3);
    2b5e:	60 91 52 01 	lds	r22, 0x0152
    2b62:	70 91 53 01 	lds	r23, 0x0153
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	4d ef       	ldi	r20, 0xFD	; 253
    2b6c:	26 e5       	ldi	r18, 0x56	; 86
    2b6e:	91 c1       	rjmp	.+802    	; 0x2e92 <main+0x950>
    goto end;
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    2b70:	83 30       	cpi	r24, 0x03	; 3
    2b72:	09 f0       	breq	.+2      	; 0x2b76 <main+0x634>
    2b74:	82 c0       	rjmp	.+260    	; 0x2c7a <main+0x738>
    if(PartMode&1) {
    2b76:	80 91 08 01 	lds	r24, 0x0108
    2b7a:	80 ff       	sbrs	r24, 0
    2b7c:	02 c0       	rjmp	.+4      	; 0x2b82 <main+0x640>
       //N-Kanal
       lcd_data('P');			//P-channel
    2b7e:	80 e5       	ldi	r24, 0x50	; 80
    2b80:	01 c0       	rjmp	.+2      	; 0x2b84 <main+0x642>
    } else {
       lcd_data('N');			//N-channel
    2b82:	8e e4       	ldi	r24, 0x4E	; 78
    2b84:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
    }
    lcd_data('-');
    2b88:	8d e2       	ldi	r24, 0x2D	; 45
    2b8a:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>

    tmp = PartMode/2;
    2b8e:	80 91 08 01 	lds	r24, 0x0108
    2b92:	86 95       	lsr	r24
    if (tmp == (PART_MODE_N_D_MOS/2)) {
    2b94:	82 30       	cpi	r24, 0x02	; 2
    2b96:	11 f4       	brne	.+4      	; 0x2b9c <main+0x65a>
       lcd_data('D');			// N-D
    2b98:	84 e4       	ldi	r24, 0x44	; 68
    2b9a:	03 c0       	rjmp	.+6      	; 0x2ba2 <main+0x660>
    }
    if (tmp == (PART_MODE_N_E_MOS/2)) {
    2b9c:	81 30       	cpi	r24, 0x01	; 1
    2b9e:	21 f4       	brne	.+8      	; 0x2ba8 <main+0x666>
       lcd_data('E');			// N-E
    2ba0:	85 e4       	ldi	r24, 0x45	; 69
    2ba2:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
    2ba6:	05 c0       	rjmp	.+10     	; 0x2bb2 <main+0x670>
    }
    if (tmp == (PART_MODE_N_JFET/2)) {
    2ba8:	83 30       	cpi	r24, 0x03	; 3
    2baa:	19 f4       	brne	.+6      	; 0x2bb2 <main+0x670>
       lcd_fix_string(jfet);		//"JFET"
    2bac:	81 e7       	ldi	r24, 0x71	; 113
    2bae:	91 e0       	ldi	r25, 0x01	; 1
    2bb0:	02 c0       	rjmp	.+4      	; 0x2bb6 <main+0x674>
    } else {
       lcd_fix_string(mosfet);		//"-MOS "
    2bb2:	8c e6       	ldi	r24, 0x6C	; 108
    2bb4:	91 e0       	ldi	r25, 0x01	; 1
    2bb6:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
    }
    lcd_fix_string(gds);		//"GDS="
    2bba:	8c e8       	ldi	r24, 0x8C	; 140
    2bbc:	91 e0       	ldi	r25, 0x01	; 1
    2bbe:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
    lcd_testpin(trans.b);
    2bc2:	80 91 56 01 	lds	r24, 0x0156
    2bc6:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
    lcd_testpin(trans.c);
    2bca:	80 91 57 01 	lds	r24, 0x0157
    2bce:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
    lcd_testpin(trans.e);
    2bd2:	80 91 58 01 	lds	r24, 0x0158
    2bd6:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
    if((NumOfDiodes > 0) && (PartMode < PART_MODE_N_D_MOS)) {
    2bda:	80 91 07 01 	lds	r24, 0x0107
    2bde:	88 23       	and	r24, r24
    2be0:	59 f0       	breq	.+22     	; 0x2bf8 <main+0x6b6>
    2be2:	80 91 08 01 	lds	r24, 0x0108
    2be6:	84 30       	cpi	r24, 0x04	; 4
    2be8:	38 f4       	brcc	.+14     	; 0x2bf8 <main+0x6b6>
       //MOSFET with protection diode; only with enhancement-FETs
       if (PartMode&1) {
    2bea:	80 ff       	sbrs	r24, 0
    2bec:	02 c0       	rjmp	.+4      	; 0x2bf2 <main+0x6b0>
          lcd_data(LCD_CHAR_DIODE1);	//show Diode symbol >|
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	01 c0       	rjmp	.+2      	; 0x2bf4 <main+0x6b2>
       } else {
          lcd_data(LCD_CHAR_DIODE2);	//show Diode symbol |<
    2bf2:	82 e0       	ldi	r24, 0x02	; 2
    2bf4:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
       }
    }
    lcd_line2();			//2. Row
    2bf8:	80 ec       	ldi	r24, 0xC0	; 192
    2bfa:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
    if(PartMode < PART_MODE_N_D_MOS) {	//enhancement-MOSFET
    2bfe:	80 91 08 01 	lds	r24, 0x0108
    2c02:	84 30       	cpi	r24, 0x04	; 4
    2c04:	d8 f4       	brcc	.+54     	; 0x2c3c <main+0x6fa>
 #ifdef C_MESS	//Gate capacity
       lcd_fix_string(GateCap);		//"C="
    2c06:	86 e7       	ldi	r24, 0x76	; 118
    2c08:	91 e0       	ldi	r25, 0x01	; 1
    2c0a:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
       ReadCapacity(trans.b,trans.e);	//measure capacity
    2c0e:	80 91 56 01 	lds	r24, 0x0156
    2c12:	60 91 58 01 	lds	r22, 0x0158
    2c16:	0e 94 8b 0a 	call	0x1516	; 0x1516 <ReadCapacity>
       DisplayValue(cval,cpre,'F',3);
    2c1a:	60 91 7b 01 	lds	r22, 0x017B
    2c1e:	70 91 7c 01 	lds	r23, 0x017C
    2c22:	80 91 7d 01 	lds	r24, 0x017D
    2c26:	90 91 7e 01 	lds	r25, 0x017E
    2c2a:	40 91 49 01 	lds	r20, 0x0149
    2c2e:	26 e4       	ldi	r18, 0x46	; 70
    2c30:	03 e0       	ldi	r16, 0x03	; 3
    2c32:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DisplayValue>
 #endif
       lcd_fix_string(vt);		// "Vt="
    2c36:	86 e9       	ldi	r24, 0x96	; 150
    2c38:	91 e0       	ldi	r25, 0x01	; 1
    2c3a:	13 c0       	rjmp	.+38     	; 0x2c62 <main+0x720>
    } else {
       lcd_data('I');
    2c3c:	89 e4       	ldi	r24, 0x49	; 73
    2c3e:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
       lcd_data('=');
    2c42:	8d e3       	ldi	r24, 0x3D	; 61
    2c44:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
       DisplayValue(trans.uBE[1],-5,'A',2);
    2c48:	60 91 54 01 	lds	r22, 0x0154
    2c4c:	70 91 55 01 	lds	r23, 0x0155
    2c50:	80 e0       	ldi	r24, 0x00	; 0
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	4b ef       	ldi	r20, 0xFB	; 251
    2c56:	21 e4       	ldi	r18, 0x41	; 65
    2c58:	02 e0       	ldi	r16, 0x02	; 2
    2c5a:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DisplayValue>
       lcd_fix_string(Vgs_str);		// " Vgs="
    2c5e:	8b e9       	ldi	r24, 0x9B	; 155
    2c60:	91 e0       	ldi	r25, 0x01	; 1
    2c62:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
    }
    //Gate-threshold voltage
    DisplayValue(gthvoltage,-3,'V',2);
    2c66:	60 91 5e 01 	lds	r22, 0x015E
    2c6a:	70 91 5f 01 	lds	r23, 0x015F
    2c6e:	80 e0       	ldi	r24, 0x00	; 0
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	4d ef       	ldi	r20, 0xFD	; 253
    2c74:	26 e5       	ldi	r18, 0x56	; 86
    2c76:	02 e0       	ldi	r16, 0x02	; 2
    2c78:	0c c1       	rjmp	.+536    	; 0x2e92 <main+0x950>
    goto end;
    // end (PartFound == PART_FET)
  } else if (PartFound == PART_THYRISTOR) {
    2c7a:	85 30       	cpi	r24, 0x05	; 5
    2c7c:	19 f4       	brne	.+6      	; 0x2c84 <main+0x742>
    lcd_fix_string(Thyristor);		//"Thyristor"
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	91 e0       	ldi	r25, 0x01	; 1
    2c82:	04 c0       	rjmp	.+8      	; 0x2c8c <main+0x74a>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    2c84:	84 30       	cpi	r24, 0x04	; 4
    2c86:	c1 f4       	brne	.+48     	; 0x2cb8 <main+0x776>
    lcd_fix_string(Triac);		//"Triac"
    2c88:	8a ef       	ldi	r24, 0xFA	; 250
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
  mess_count = 0;
  goto end2;


gakAusgabe:
  lcd_line2(); //2. row 
    2c90:	80 ec       	ldi	r24, 0xC0	; 192
    2c92:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
  lcd_fix_string(GAK);		//"GAK="
    2c96:	85 ef       	ldi	r24, 0xF5	; 245
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
  lcd_testpin(trans.b);
    2c9e:	80 91 56 01 	lds	r24, 0x0156
    2ca2:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
  lcd_testpin(trans.c);
    2ca6:	80 91 57 01 	lds	r24, 0x0157
    2caa:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
  lcd_testpin(trans.e);
    2cae:	80 91 58 01 	lds	r24, 0x0158
    2cb2:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
    2cb6:	22 c1       	rjmp	.+580    	; 0x2efc <main+0x9ba>
  } else if (PartFound == PART_TRIAC) {
    lcd_fix_string(Triac);		//"Triac"
    goto gakAusgabe;
  }
 #ifdef R_MESS	//resistor measurement is wanted
  else if(PartFound == PART_RESISTOR) {
    2cb8:	86 30       	cpi	r24, 0x06	; 6
    2cba:	09 f0       	breq	.+2      	; 0x2cbe <main+0x77c>
    2cbc:	cd c0       	rjmp	.+410    	; 0x2e58 <main+0x916>
    if (ResistorsFound == 1) { // single resistor
    2cbe:	60 91 59 01 	lds	r22, 0x0159
    2cc2:	61 30       	cpi	r22, 0x01	; 1
    2cc4:	69 f4       	brne	.+26     	; 0x2ce0 <main+0x79e>
       lcd_testpin(resis[0].rb);  	//Pin-number 1
    2cc6:	80 91 24 01 	lds	r24, 0x0124
    2cca:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
       lcd_fix_string(Resistor_str);
    2cce:	88 eb       	ldi	r24, 0xB8	; 184
    2cd0:	91 e0       	ldi	r25, 0x01	; 1
    2cd2:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
       lcd_testpin(resis[0].ra);		//Pin-number 2
    2cd6:	80 91 23 01 	lds	r24, 0x0123
    2cda:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
    2cde:	80 c0       	rjmp	.+256    	; 0x2de0 <main+0x89e>
    } else { // R-Max suchen
       ii = 0;
    2ce0:	10 92 47 01 	sts	0x0147, r1
       if (resis[1].rx > resis[0].rx)
    2ce4:	20 91 26 01 	lds	r18, 0x0126
    2ce8:	30 91 27 01 	lds	r19, 0x0127
    2cec:	40 91 28 01 	lds	r20, 0x0128
    2cf0:	50 91 29 01 	lds	r21, 0x0129
    2cf4:	80 91 1b 01 	lds	r24, 0x011B
    2cf8:	90 91 1c 01 	lds	r25, 0x011C
    2cfc:	a0 91 1d 01 	lds	r26, 0x011D
    2d00:	b0 91 1e 01 	lds	r27, 0x011E
    2d04:	82 17       	cp	r24, r18
    2d06:	93 07       	cpc	r25, r19
    2d08:	a4 07       	cpc	r26, r20
    2d0a:	b5 07       	cpc	r27, r21
    2d0c:	18 f4       	brcc	.+6      	; 0x2d14 <main+0x7d2>
          ii = 1;
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	80 93 47 01 	sts	0x0147, r24
       if (ResistorsFound == 2) {
    2d14:	62 30       	cpi	r22, 0x02	; 2
    2d16:	19 f4       	brne	.+6      	; 0x2d1e <main+0x7dc>
          ii = 2;
    2d18:	60 93 47 01 	sts	0x0147, r22
    2d1c:	22 c0       	rjmp	.+68     	; 0x2d62 <main+0x820>
       } else {
          if (resis[2].rx > resis[ii].rx) {
    2d1e:	20 91 47 01 	lds	r18, 0x0147
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	8b e0       	ldi	r24, 0x0B	; 11
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	28 9f       	mul	r18, r24
    2d2a:	f0 01       	movw	r30, r0
    2d2c:	29 9f       	mul	r18, r25
    2d2e:	f0 0d       	add	r31, r0
    2d30:	38 9f       	mul	r19, r24
    2d32:	f0 0d       	add	r31, r0
    2d34:	11 24       	eor	r1, r1
    2d36:	e5 5e       	subi	r30, 0xE5	; 229
    2d38:	fe 4f       	sbci	r31, 0xFE	; 254
    2d3a:	20 91 31 01 	lds	r18, 0x0131
    2d3e:	30 91 32 01 	lds	r19, 0x0132
    2d42:	40 91 33 01 	lds	r20, 0x0133
    2d46:	50 91 34 01 	lds	r21, 0x0134
    2d4a:	80 81       	ld	r24, Z
    2d4c:	91 81       	ldd	r25, Z+1	; 0x01
    2d4e:	a2 81       	ldd	r26, Z+2	; 0x02
    2d50:	b3 81       	ldd	r27, Z+3	; 0x03
    2d52:	82 17       	cp	r24, r18
    2d54:	93 07       	cpc	r25, r19
    2d56:	a4 07       	cpc	r26, r20
    2d58:	b5 07       	cpc	r27, r21
    2d5a:	18 f4       	brcc	.+6      	; 0x2d62 <main+0x820>
             ii = 2;
    2d5c:	82 e0       	ldi	r24, 0x02	; 2
    2d5e:	80 93 47 01 	sts	0x0147, r24
          }
       }

       if (ii == 0) {
    2d62:	80 91 47 01 	lds	r24, 0x0147
    2d66:	88 23       	and	r24, r24
    2d68:	89 f4       	brne	.+34     	; 0x2d8c <main+0x84a>
          lcd_data('1');
    2d6a:	81 e3       	ldi	r24, 0x31	; 49
    2d6c:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    2d70:	88 eb       	ldi	r24, 0xB8	; 184
    2d72:	91 e0       	ldi	r25, 0x01	; 1
    2d74:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
          lcd_data('3');
    2d78:	83 e3       	ldi	r24, 0x33	; 51
    2d7a:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    2d7e:	88 eb       	ldi	r24, 0xB8	; 184
    2d80:	91 e0       	ldi	r25, 0x01	; 1
    2d82:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
          lcd_data('2');
    2d86:	82 e3       	ldi	r24, 0x32	; 50
    2d88:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
       }
       if (ii == 1) {
    2d8c:	80 91 47 01 	lds	r24, 0x0147
    2d90:	81 30       	cpi	r24, 0x01	; 1
    2d92:	89 f4       	brne	.+34     	; 0x2db6 <main+0x874>
          lcd_data('1');
    2d94:	81 e3       	ldi	r24, 0x31	; 49
    2d96:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    2d9a:	88 eb       	ldi	r24, 0xB8	; 184
    2d9c:	91 e0       	ldi	r25, 0x01	; 1
    2d9e:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
          lcd_data('2');
    2da2:	82 e3       	ldi	r24, 0x32	; 50
    2da4:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    2da8:	88 eb       	ldi	r24, 0xB8	; 184
    2daa:	91 e0       	ldi	r25, 0x01	; 1
    2dac:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
          lcd_data('3');
    2db0:	83 e3       	ldi	r24, 0x33	; 51
    2db2:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
       }
       if (ii == 2) {
    2db6:	80 91 47 01 	lds	r24, 0x0147
    2dba:	82 30       	cpi	r24, 0x02	; 2
    2dbc:	89 f4       	brne	.+34     	; 0x2de0 <main+0x89e>
          lcd_data('2');
    2dbe:	82 e3       	ldi	r24, 0x32	; 50
    2dc0:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    2dc4:	88 eb       	ldi	r24, 0xB8	; 184
    2dc6:	91 e0       	ldi	r25, 0x01	; 1
    2dc8:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
          lcd_data('1');
    2dcc:	81 e3       	ldi	r24, 0x31	; 49
    2dce:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    2dd2:	88 eb       	ldi	r24, 0xB8	; 184
    2dd4:	91 e0       	ldi	r25, 0x01	; 1
    2dd6:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
          lcd_data('3');
    2dda:	83 e3       	ldi	r24, 0x33	; 51
    2ddc:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
       }
    }
    lcd_line2(); //2. row 
    2de0:	80 ec       	ldi	r24, 0xC0	; 192
    2de2:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
    if (ResistorsFound == 1) {
    2de6:	80 91 59 01 	lds	r24, 0x0159
    2dea:	81 30       	cpi	r24, 0x01	; 1
    2dec:	a9 f4       	brne	.+42     	; 0x2e18 <main+0x8d6>
       RvalOut(0);
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <RvalOut>
#if FLASHEND > 0x1fff
       if (resis[0].lx != 0) {
    2df4:	60 91 1f 01 	lds	r22, 0x011F
    2df8:	70 91 20 01 	lds	r23, 0x0120
    2dfc:	80 91 21 01 	lds	r24, 0x0121
    2e00:	90 91 22 01 	lds	r25, 0x0122
    2e04:	61 15       	cp	r22, r1
    2e06:	71 05       	cpc	r23, r1
    2e08:	81 05       	cpc	r24, r1
    2e0a:	91 05       	cpc	r25, r1
    2e0c:	09 f4       	brne	.+2      	; 0x2e10 <main+0x8ce>
    2e0e:	76 c0       	rjmp	.+236    	; 0x2efc <main+0x9ba>
	  // resistor have also Inductance
          DisplayValue(resis[0].lx,-4,'H',3);	// output inductance
    2e10:	4c ef       	ldi	r20, 0xFC	; 252
    2e12:	28 e4       	ldi	r18, 0x48	; 72
    2e14:	03 e0       	ldi	r16, 0x03	; 3
    2e16:	3d c0       	rjmp	.+122    	; 0x2e92 <main+0x950>
       }
#endif
    } else {
       // output resistor values in right order
       if (ii == 0) {
    2e18:	80 91 47 01 	lds	r24, 0x0147
    2e1c:	88 23       	and	r24, r24
    2e1e:	31 f4       	brne	.+12     	; 0x2e2c <main+0x8ea>
          RvalOut(1);
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <RvalOut>
          RvalOut(2);
    2e26:	82 e0       	ldi	r24, 0x02	; 2
    2e28:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <RvalOut>
       }
       if (ii == 1) {
    2e2c:	80 91 47 01 	lds	r24, 0x0147
    2e30:	81 30       	cpi	r24, 0x01	; 1
    2e32:	31 f4       	brne	.+12     	; 0x2e40 <main+0x8fe>
          RvalOut(0);
    2e34:	80 e0       	ldi	r24, 0x00	; 0
    2e36:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <RvalOut>
          RvalOut(2);
    2e3a:	82 e0       	ldi	r24, 0x02	; 2
    2e3c:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <RvalOut>
       }
       if (ii == 2) {
    2e40:	80 91 47 01 	lds	r24, 0x0147
    2e44:	82 30       	cpi	r24, 0x02	; 2
    2e46:	09 f0       	breq	.+2      	; 0x2e4a <main+0x908>
    2e48:	59 c0       	rjmp	.+178    	; 0x2efc <main+0x9ba>
          RvalOut(0);
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <RvalOut>
          RvalOut(1);
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <RvalOut>
    2e56:	52 c0       	rjmp	.+164    	; 0x2efc <main+0x9ba>
  } // end (PartFound == PART_RESISTOR)
#endif

#ifdef C_MESS
//capacity measurement is wanted
  else if(PartFound == PART_CAPACITOR) {
    2e58:	87 30       	cpi	r24, 0x07	; 7
    2e5a:	f1 f4       	brne	.+60     	; 0x2e98 <main+0x956>
//     lcd_fix_string(Capacitor);
     lcd_testpin(ca);			//Pin number 1
    2e5c:	80 91 60 01 	lds	r24, 0x0160
    2e60:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
     lcd_fix_string(CapZeich);		// capacitor sign
    2e64:	81 ea       	ldi	r24, 0xA1	; 161
    2e66:	91 e0       	ldi	r25, 0x01	; 1
    2e68:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
     lcd_testpin(cb);			//Pin number 2
    2e6c:	80 91 0a 01 	lds	r24, 0x010A
    2e70:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
     lcd_line2(); 				//2. row 
    2e74:	80 ec       	ldi	r24, 0xC0	; 192
    2e76:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
     DisplayValue(cval,cpre,'F',4);
    2e7a:	60 91 7b 01 	lds	r22, 0x017B
    2e7e:	70 91 7c 01 	lds	r23, 0x017C
    2e82:	80 91 7d 01 	lds	r24, 0x017D
    2e86:	90 91 7e 01 	lds	r25, 0x017E
    2e8a:	40 91 49 01 	lds	r20, 0x0149
    2e8e:	26 e4       	ldi	r18, 0x46	; 70
    2e90:	04 e0       	ldi	r16, 0x04	; 4
    2e92:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DisplayValue>
     goto end;
    2e96:	32 c0       	rjmp	.+100    	; 0x2efc <main+0x9ba>
  }
#endif
  if(NumOfDiodes == 0) { //no diodes are found
    2e98:	80 91 07 01 	lds	r24, 0x0107
    2e9c:	88 23       	and	r24, r24
    2e9e:	71 f4       	brne	.+28     	; 0x2ebc <main+0x97a>
     lcd_fix_string(TestFailed1); 	//"Kein,unbek. oder"
    2ea0:	83 e1       	ldi	r24, 0x13	; 19
    2ea2:	91 e0       	ldi	r25, 0x01	; 1
    2ea4:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
     lcd_line2(); //2. row 
    2ea8:	80 ec       	ldi	r24, 0xC0	; 192
    2eaa:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
     lcd_fix_string(TestFailed2); 	//"defektes "
    2eae:	8f ed       	ldi	r24, 0xDF	; 223
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
     lcd_fix_string(Bauteil);		//"Bauteil"
    2eb6:	88 ee       	ldi	r24, 0xE8	; 232
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	16 c0       	rjmp	.+44     	; 0x2ee8 <main+0x9a6>
  } else {
     lcd_fix_string(Bauteil);		//"Bauteil"
    2ebc:	88 ee       	ldi	r24, 0xE8	; 232
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
     lcd_fix_string(Unknown); 		//" unbek."
    2ec4:	8a e0       	ldi	r24, 0x0A	; 10
    2ec6:	91 e0       	ldi	r25, 0x01	; 1
    2ec8:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
     lcd_line2(); //2. row 
    2ecc:	80 ec       	ldi	r24, 0xC0	; 192
    2ece:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
     lcd_fix_string(OrBroken); 		//"oder defekt "
    2ed2:	83 e2       	ldi	r24, 0x23	; 35
    2ed4:	91 e0       	ldi	r25, 0x01	; 1
    2ed6:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
     lcd_data(NumOfDiodes + '0');
    2eda:	80 91 07 01 	lds	r24, 0x0107
    2ede:	80 5d       	subi	r24, 0xD0	; 208
    2ee0:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
     lcd_fix_string(AnKat);		//"->|-"
    2ee4:	8b ea       	ldi	r24, 0xAB	; 171
    2ee6:	91 e0       	ldi	r25, 0x01	; 1
    2ee8:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
  }
  empty_count++;
    2eec:	80 91 46 01 	lds	r24, 0x0146
    2ef0:	8f 5f       	subi	r24, 0xFF	; 255
    2ef2:	80 93 46 01 	sts	0x0146, r24
  mess_count = 0;
    2ef6:	10 92 0e 01 	sts	0x010E, r1
  goto end2;
    2efa:	07 c0       	rjmp	.+14     	; 0x2f0a <main+0x9c8>
  lcd_testpin(trans.b);
  lcd_testpin(trans.c);
  lcd_testpin(trans.e);
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 end:
  empty_count = 0;		// reset counter, if part is found
    2efc:	10 92 46 01 	sts	0x0146, r1
  mess_count++;			// count measurements
    2f00:	80 91 0e 01 	lds	r24, 0x010E
    2f04:	8f 5f       	subi	r24, 0xFF	; 255
    2f06:	80 93 0e 01 	sts	0x010E, r24

 end2:
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
    2f0a:	4f 9b       	sbis	0x09, 7	; 9
    2f0c:	fe cf       	rjmp	.-4      	; 0x2f0a <main+0x9c8>
  wait200ms();
    2f0e:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <wait200ms>
// wait 10 seconds or 3 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage++) {
    2f12:	10 92 5f 01 	sts	0x015F, r1
    2f16:	10 92 5e 01 	sts	0x015E, r1
    2f1a:	0e c0       	rjmp	.+28     	; 0x2f38 <main+0x9f6>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    2f1c:	4f 9b       	sbis	0x09, 7	; 9
    2f1e:	71 cb       	rjmp	.-2334   	; 0x2602 <main+0xc0>
        // If the key is pressed again... 
        // goto start of measurement 
        goto start;
     }
     wdt_reset();
    2f20:	a8 95       	wdr
     wait1ms();
    2f22:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <wait1ms>

 end2:
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
  wait200ms();
// wait 10 seconds or 3 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage++) {
    2f26:	80 91 5e 01 	lds	r24, 0x015E
    2f2a:	90 91 5f 01 	lds	r25, 0x015F
    2f2e:	01 96       	adiw	r24, 0x01	; 1
    2f30:	90 93 5f 01 	sts	0x015F, r25
    2f34:	80 93 5e 01 	sts	0x015E, r24
    2f38:	20 91 5e 01 	lds	r18, 0x015E
    2f3c:	30 91 5f 01 	lds	r19, 0x015F
    2f40:	80 91 02 01 	lds	r24, 0x0102
    2f44:	90 91 03 01 	lds	r25, 0x0103
    2f48:	28 17       	cp	r18, r24
    2f4a:	39 07       	cpc	r19, r25
    2f4c:	38 f3       	brcs	.-50     	; 0x2f1c <main+0x9da>
  #define POWER2_OFF 255
 #else
  #define POWER2_OFF POWER_OFF*2
 #endif
 #if POWER_OFF+0 > 1
  if ((empty_count < POWER_OFF) && (mess_count < POWER2_OFF)) {
    2f4e:	80 91 46 01 	lds	r24, 0x0146
    2f52:	85 30       	cpi	r24, 0x05	; 5
    2f54:	28 f4       	brcc	.+10     	; 0x2f60 <main+0xa1e>
    2f56:	80 91 0e 01 	lds	r24, 0x010E
    2f5a:	8a 30       	cpi	r24, 0x0A	; 10
    2f5c:	08 f4       	brcc	.+2      	; 0x2f60 <main+0xa1e>
    2f5e:	51 cb       	rjmp	.-2398   	; 0x2602 <main+0xc0>
     goto start;			// repeat measurement POWER_OFF times
  }
 #endif
  // only one Measurement requested, shut off
  wdt_disable();			//Watchdog off
    2f60:	88 e1       	ldi	r24, 0x18	; 24
    2f62:	0f b6       	in	r0, 0x3f	; 63
    2f64:	f8 94       	cli
    2f66:	80 93 60 00 	sts	0x0060, r24
    2f6a:	10 92 60 00 	sts	0x0060, r1
    2f6e:	0f be       	out	0x3f, r0	; 63
  ON_PORT &= ~(1<<ON_PIN);		//switch off power
    2f70:	5e 98       	cbi	0x0b, 6	; 11
  //never ending loop 
  while(1) {
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    2f72:	4f 99       	sbic	0x09, 7	; 9
    2f74:	fe cf       	rjmp	.-4      	; 0x2f72 <main+0xa30>
    2f76:	45 cb       	rjmp	.-2422   	; 0x2602 <main+0xc0>

00002f78 <uart_putc>:
    2f78:	2f 93       	push	r18
    2f7a:	5f b7       	in	r21, 0x3f	; 63
    2f7c:	2f 93       	push	r18
    2f7e:	2a e0       	ldi	r18, 0x0A	; 10
    2f80:	80 95       	com	r24
    2f82:	08 94       	sec

00002f84 <putchar0>:
    2f84:	10 f4       	brcc	.+4      	; 0x2f8a <putchar1>
    2f86:	43 98       	cbi	0x08, 3	; 8
    2f88:	02 c0       	rjmp	.+4      	; 0x2f8e <putchar2>

00002f8a <putchar1>:
    2f8a:	43 9a       	sbi	0x08, 3	; 8
	...

00002f8e <putchar2>:
    2f8e:	08 d0       	rcall	.+16     	; 0x2fa0 <UART_delay>
    2f90:	07 d0       	rcall	.+14     	; 0x2fa0 <UART_delay>
    2f92:	86 95       	lsr	r24
    2f94:	2a 95       	dec	r18
    2f96:	b1 f7       	brne	.-20     	; 0x2f84 <putchar0>
    2f98:	2f 91       	pop	r18
    2f9a:	5f bf       	out	0x3f, r21	; 63
    2f9c:	2f 91       	pop	r18
    2f9e:	08 95       	ret

00002fa0 <UART_delay>:
    2fa0:	5f 93       	push	r21
    2fa2:	5f b7       	in	r21, 0x3f	; 63
    2fa4:	5f 93       	push	r21
    2fa6:	00 00       	nop
    2fa8:	5e e3       	ldi	r21, 0x3E	; 62

00002faa <UART_delay1>:
    2faa:	5a 95       	dec	r21
    2fac:	f1 f7       	brne	.-4      	; 0x2faa <UART_delay1>
    2fae:	00 00       	nop
    2fb0:	5f 91       	pop	r21
    2fb2:	5f bf       	out	0x3f, r21	; 63
    2fb4:	5f 91       	pop	r21
    2fb6:	08 95       	ret

00002fb8 <wait5s>:
    2fb8:	03 d0       	rcall	.+6      	; 0x2fc0 <wait1000ms>

00002fba <wait4s>:
    2fba:	02 d0       	rcall	.+4      	; 0x2fc0 <wait1000ms>

00002fbc <wait3s>:
    2fbc:	01 d0       	rcall	.+2      	; 0x2fc0 <wait1000ms>

00002fbe <wait2s>:
    2fbe:	00 d0       	rcall	.+0      	; 0x2fc0 <wait1000ms>

00002fc0 <wait1000ms>:
    2fc0:	00 d0       	rcall	.+0      	; 0x2fc2 <wait500ms>

00002fc2 <wait500ms>:
    2fc2:	03 d0       	rcall	.+6      	; 0x2fca <wait100ms>

00002fc4 <wait400ms>:
    2fc4:	02 d0       	rcall	.+4      	; 0x2fca <wait100ms>

00002fc6 <wait300ms>:
    2fc6:	01 d0       	rcall	.+2      	; 0x2fca <wait100ms>

00002fc8 <wait200ms>:
    2fc8:	00 d0       	rcall	.+0      	; 0x2fca <wait100ms>

00002fca <wait100ms>:
    2fca:	a8 95       	wdr
    2fcc:	00 d0       	rcall	.+0      	; 0x2fce <wait50ms>

00002fce <wait50ms>:
    2fce:	03 d0       	rcall	.+6      	; 0x2fd6 <wait10ms>

00002fd0 <wait40ms>:
    2fd0:	02 d0       	rcall	.+4      	; 0x2fd6 <wait10ms>

00002fd2 <wait30ms>:
    2fd2:	01 d0       	rcall	.+2      	; 0x2fd6 <wait10ms>

00002fd4 <wait20ms>:
    2fd4:	00 d0       	rcall	.+0      	; 0x2fd6 <wait10ms>

00002fd6 <wait10ms>:
    2fd6:	00 d0       	rcall	.+0      	; 0x2fd8 <wait5ms>

00002fd8 <wait5ms>:
    2fd8:	03 d0       	rcall	.+6      	; 0x2fe0 <wait1ms>

00002fda <wait4ms>:
    2fda:	02 d0       	rcall	.+4      	; 0x2fe0 <wait1ms>

00002fdc <wait3ms>:
    2fdc:	01 d0       	rcall	.+2      	; 0x2fe0 <wait1ms>

00002fde <wait2ms>:
    2fde:	00 d0       	rcall	.+0      	; 0x2fe0 <wait1ms>

00002fe0 <wait1ms>:
    2fe0:	00 d0       	rcall	.+0      	; 0x2fe2 <wait500us>

00002fe2 <wait500us>:
    2fe2:	03 d0       	rcall	.+6      	; 0x2fea <wait100us>

00002fe4 <wait400us>:
    2fe4:	02 d0       	rcall	.+4      	; 0x2fea <wait100us>

00002fe6 <wait300us>:
    2fe6:	01 d0       	rcall	.+2      	; 0x2fea <wait100us>

00002fe8 <wait200us>:
    2fe8:	00 d0       	rcall	.+0      	; 0x2fea <wait100us>

00002fea <wait100us>:
    2fea:	00 d0       	rcall	.+0      	; 0x2fec <wait50us>

00002fec <wait50us>:
    2fec:	03 d0       	rcall	.+6      	; 0x2ff4 <wait10us>

00002fee <wait40us>:
    2fee:	02 d0       	rcall	.+4      	; 0x2ff4 <wait10us>

00002ff0 <wait30us>:
    2ff0:	01 d0       	rcall	.+2      	; 0x2ff4 <wait10us>

00002ff2 <wait20us>:
    2ff2:	00 d0       	rcall	.+0      	; 0x2ff4 <wait10us>

00002ff4 <wait10us>:
    2ff4:	00 d0       	rcall	.+0      	; 0x2ff6 <wait5us>

00002ff6 <wait5us>:
    2ff6:	03 d0       	rcall	.+6      	; 0x2ffe <wait1us>

00002ff8 <wait4us>:
    2ff8:	02 d0       	rcall	.+4      	; 0x2ffe <wait1us>

00002ffa <wait3us>:
    2ffa:	01 d0       	rcall	.+2      	; 0x2ffe <wait1us>

00002ffc <wait2us>:
    2ffc:	00 d0       	rcall	.+0      	; 0x2ffe <wait1us>

00002ffe <wait1us>:
    2ffe:	00 00       	nop
    3000:	08 95       	ret

00003002 <CombineBI2Long>:
    3002:	99 27       	eor	r25, r25

00003004 <CombineII2Long>:
    3004:	08 95       	ret

00003006 <W20msReadADC>:
    3006:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <wait10ms>

0000300a <W10msReadADC>:
    300a:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <wait5ms>

0000300e <W5msReadADC>:
    300e:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <wait5ms>

00003012 <ReadADC>:
    3012:	1f 93       	push	r17
    3014:	18 2f       	mov	r17, r24
    3016:	10 64       	ori	r17, 0x40	; 64

00003018 <get_sample>:
    3018:	10 93 7c 00 	sts	0x007C, r17
    301c:	e1 2f       	mov	r30, r17
    301e:	e0 78       	andi	r30, 0x80	; 128
    3020:	80 91 3d 01 	lds	r24, 0x013D
    3024:	e8 17       	cp	r30, r24
    3026:	69 f0       	breq	.+26     	; 0x3042 <r2aa2>
    3028:	0e 94 f5 17 	call	0x2fea	; 0x2fea <wait100us>
    302c:	80 91 7a 00 	lds	r24, 0x007A
    3030:	80 64       	ori	r24, 0x40	; 64
    3032:	80 93 7a 00 	sts	0x007A, r24

00003036 <wadc1>:
    3036:	80 91 7a 00 	lds	r24, 0x007A
    303a:	86 fd       	sbrc	r24, 6
    303c:	fc cf       	rjmp	.-8      	; 0x3036 <wadc1>
    303e:	e0 93 3d 01 	sts	0x013D, r30

00003042 <r2aa2>:
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	a9 01       	movw	r20, r18
    3048:	e0 e0       	ldi	r30, 0x00	; 0
    304a:	20 c0       	rjmp	.+64     	; 0x308c <r2ae8>

0000304c <Loop>:
    304c:	80 91 7a 00 	lds	r24, 0x007A
    3050:	80 64       	ori	r24, 0x40	; 64
    3052:	80 93 7a 00 	sts	0x007A, r24

00003056 <wadc2>:
    3056:	80 91 7a 00 	lds	r24, 0x007A
    305a:	86 fd       	sbrc	r24, 6
    305c:	fc cf       	rjmp	.-8      	; 0x3056 <wadc2>
    305e:	60 91 78 00 	lds	r22, 0x0078
    3062:	70 91 79 00 	lds	r23, 0x0079
    3066:	26 0f       	add	r18, r22
    3068:	37 1f       	adc	r19, r23
    306a:	41 1d       	adc	r20, r1
    306c:	51 1d       	adc	r21, r1
    306e:	e4 30       	cpi	r30, 0x04	; 4
    3070:	61 f4       	brne	.+24     	; 0x308a <r2ae6>
    3072:	80 91 3f 01 	lds	r24, 0x013F
    3076:	80 30       	cpi	r24, 0x00	; 0
    3078:	41 f0       	breq	.+16     	; 0x308a <r2ae6>
    307a:	84 e0       	ldi	r24, 0x04	; 4
    307c:	20 30       	cpi	r18, 0x00	; 0
    307e:	38 07       	cpc	r19, r24
    3080:	20 f4       	brcc	.+8      	; 0x308a <r2ae6>
    3082:	17 fd       	sbrc	r17, 7
    3084:	02 c0       	rjmp	.+4      	; 0x308a <r2ae6>
    3086:	10 68       	ori	r17, 0x80	; 128
    3088:	c7 cf       	rjmp	.-114    	; 0x3018 <get_sample>

0000308a <r2ae6>:
    308a:	ef 5f       	subi	r30, 0xFF	; 255

0000308c <r2ae8>:
    308c:	80 91 3c 01 	lds	r24, 0x013C
    3090:	e8 17       	cp	r30, r24
    3092:	e0 f2       	brcs	.-72     	; 0x304c <Loop>
    3094:	17 ff       	sbrs	r17, 7
    3096:	05 c0       	rjmp	.+10     	; 0x30a2 <r2afe>
    3098:	60 91 3e 01 	lds	r22, 0x013E
    309c:	70 91 3f 01 	lds	r23, 0x013F
    30a0:	04 c0       	rjmp	.+8      	; 0x30aa <r2b02>

000030a2 <r2afe>:
    30a2:	60 91 40 01 	lds	r22, 0x0140
    30a6:	70 91 41 01 	lds	r23, 0x0141

000030aa <r2b02>:
    30aa:	80 e0       	ldi	r24, 0x00	; 0
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	0e 94 76 18 	call	0x30ec	; 0x30ec <__mulsi3>
    30b2:	2f ef       	ldi	r18, 0xFF	; 255
    30b4:	33 e0       	ldi	r19, 0x03	; 3
    30b6:	41 e0       	ldi	r20, 0x01	; 1
    30b8:	62 0f       	add	r22, r18
    30ba:	74 1f       	adc	r23, r20
    30bc:	81 1d       	adc	r24, r1
    30be:	91 1d       	adc	r25, r1
    30c0:	40 e0       	ldi	r20, 0x00	; 0
    30c2:	50 e0       	ldi	r21, 0x00	; 0
    30c4:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
    30c8:	b9 01       	movw	r22, r18
    30ca:	ca 01       	movw	r24, r20
    30cc:	20 91 3c 01 	lds	r18, 0x013C
    30d0:	32 2f       	mov	r19, r18
    30d2:	35 95       	asr	r19
    30d4:	63 0f       	add	r22, r19
    30d6:	71 1d       	adc	r23, r1
    30d8:	81 1d       	adc	r24, r1
    30da:	91 1d       	adc	r25, r1
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	40 e0       	ldi	r20, 0x00	; 0
    30e0:	50 e0       	ldi	r21, 0x00	; 0
    30e2:	0e 94 b5 18 	call	0x316a	; 0x316a <__udivmodsi4>
    30e6:	c9 01       	movw	r24, r18
    30e8:	1f 91       	pop	r17
    30ea:	08 95       	ret

000030ec <__mulsi3>:
    30ec:	62 9f       	mul	r22, r18
    30ee:	d0 01       	movw	r26, r0
    30f0:	73 9f       	mul	r23, r19
    30f2:	f0 01       	movw	r30, r0
    30f4:	82 9f       	mul	r24, r18
    30f6:	e0 0d       	add	r30, r0
    30f8:	f1 1d       	adc	r31, r1
    30fa:	64 9f       	mul	r22, r20
    30fc:	e0 0d       	add	r30, r0
    30fe:	f1 1d       	adc	r31, r1
    3100:	92 9f       	mul	r25, r18
    3102:	f0 0d       	add	r31, r0
    3104:	83 9f       	mul	r24, r19
    3106:	f0 0d       	add	r31, r0
    3108:	74 9f       	mul	r23, r20
    310a:	f0 0d       	add	r31, r0
    310c:	65 9f       	mul	r22, r21
    310e:	f0 0d       	add	r31, r0
    3110:	99 27       	eor	r25, r25
    3112:	72 9f       	mul	r23, r18
    3114:	b0 0d       	add	r27, r0
    3116:	e1 1d       	adc	r30, r1
    3118:	f9 1f       	adc	r31, r25
    311a:	63 9f       	mul	r22, r19
    311c:	b0 0d       	add	r27, r0
    311e:	e1 1d       	adc	r30, r1
    3120:	f9 1f       	adc	r31, r25
    3122:	bd 01       	movw	r22, r26
    3124:	cf 01       	movw	r24, r30
    3126:	11 24       	eor	r1, r1
    3128:	08 95       	ret

0000312a <__udivmodqi4>:
    312a:	99 1b       	sub	r25, r25
    312c:	79 e0       	ldi	r23, 0x09	; 9
    312e:	04 c0       	rjmp	.+8      	; 0x3138 <__udivmodqi4_ep>

00003130 <__udivmodqi4_loop>:
    3130:	99 1f       	adc	r25, r25
    3132:	96 17       	cp	r25, r22
    3134:	08 f0       	brcs	.+2      	; 0x3138 <__udivmodqi4_ep>
    3136:	96 1b       	sub	r25, r22

00003138 <__udivmodqi4_ep>:
    3138:	88 1f       	adc	r24, r24
    313a:	7a 95       	dec	r23
    313c:	c9 f7       	brne	.-14     	; 0x3130 <__udivmodqi4_loop>
    313e:	80 95       	com	r24
    3140:	08 95       	ret

00003142 <__udivmodhi4>:
    3142:	aa 1b       	sub	r26, r26
    3144:	bb 1b       	sub	r27, r27
    3146:	51 e1       	ldi	r21, 0x11	; 17
    3148:	07 c0       	rjmp	.+14     	; 0x3158 <__udivmodhi4_ep>

0000314a <__udivmodhi4_loop>:
    314a:	aa 1f       	adc	r26, r26
    314c:	bb 1f       	adc	r27, r27
    314e:	a6 17       	cp	r26, r22
    3150:	b7 07       	cpc	r27, r23
    3152:	10 f0       	brcs	.+4      	; 0x3158 <__udivmodhi4_ep>
    3154:	a6 1b       	sub	r26, r22
    3156:	b7 0b       	sbc	r27, r23

00003158 <__udivmodhi4_ep>:
    3158:	88 1f       	adc	r24, r24
    315a:	99 1f       	adc	r25, r25
    315c:	5a 95       	dec	r21
    315e:	a9 f7       	brne	.-22     	; 0x314a <__udivmodhi4_loop>
    3160:	80 95       	com	r24
    3162:	90 95       	com	r25
    3164:	bc 01       	movw	r22, r24
    3166:	cd 01       	movw	r24, r26
    3168:	08 95       	ret

0000316a <__udivmodsi4>:
    316a:	a1 e2       	ldi	r26, 0x21	; 33
    316c:	1a 2e       	mov	r1, r26
    316e:	aa 1b       	sub	r26, r26
    3170:	bb 1b       	sub	r27, r27
    3172:	fd 01       	movw	r30, r26
    3174:	0d c0       	rjmp	.+26     	; 0x3190 <__udivmodsi4_ep>

00003176 <__udivmodsi4_loop>:
    3176:	aa 1f       	adc	r26, r26
    3178:	bb 1f       	adc	r27, r27
    317a:	ee 1f       	adc	r30, r30
    317c:	ff 1f       	adc	r31, r31
    317e:	a2 17       	cp	r26, r18
    3180:	b3 07       	cpc	r27, r19
    3182:	e4 07       	cpc	r30, r20
    3184:	f5 07       	cpc	r31, r21
    3186:	20 f0       	brcs	.+8      	; 0x3190 <__udivmodsi4_ep>
    3188:	a2 1b       	sub	r26, r18
    318a:	b3 0b       	sbc	r27, r19
    318c:	e4 0b       	sbc	r30, r20
    318e:	f5 0b       	sbc	r31, r21

00003190 <__udivmodsi4_ep>:
    3190:	66 1f       	adc	r22, r22
    3192:	77 1f       	adc	r23, r23
    3194:	88 1f       	adc	r24, r24
    3196:	99 1f       	adc	r25, r25
    3198:	1a 94       	dec	r1
    319a:	69 f7       	brne	.-38     	; 0x3176 <__udivmodsi4_loop>
    319c:	60 95       	com	r22
    319e:	70 95       	com	r23
    31a0:	80 95       	com	r24
    31a2:	90 95       	com	r25
    31a4:	9b 01       	movw	r18, r22
    31a6:	ac 01       	movw	r20, r24
    31a8:	bd 01       	movw	r22, r26
    31aa:	cf 01       	movw	r24, r30
    31ac:	08 95       	ret

000031ae <__divmodsi4>:
    31ae:	97 fb       	bst	r25, 7
    31b0:	09 2e       	mov	r0, r25
    31b2:	05 26       	eor	r0, r21
    31b4:	0e d0       	rcall	.+28     	; 0x31d2 <__divmodsi4_neg1>
    31b6:	57 fd       	sbrc	r21, 7
    31b8:	04 d0       	rcall	.+8      	; 0x31c2 <__divmodsi4_neg2>
    31ba:	d7 df       	rcall	.-82     	; 0x316a <__udivmodsi4>
    31bc:	0a d0       	rcall	.+20     	; 0x31d2 <__divmodsi4_neg1>
    31be:	00 1c       	adc	r0, r0
    31c0:	38 f4       	brcc	.+14     	; 0x31d0 <__divmodsi4_exit>

000031c2 <__divmodsi4_neg2>:
    31c2:	50 95       	com	r21
    31c4:	40 95       	com	r20
    31c6:	30 95       	com	r19
    31c8:	21 95       	neg	r18
    31ca:	3f 4f       	sbci	r19, 0xFF	; 255
    31cc:	4f 4f       	sbci	r20, 0xFF	; 255
    31ce:	5f 4f       	sbci	r21, 0xFF	; 255

000031d0 <__divmodsi4_exit>:
    31d0:	08 95       	ret

000031d2 <__divmodsi4_neg1>:
    31d2:	f6 f7       	brtc	.-4      	; 0x31d0 <__divmodsi4_exit>
    31d4:	90 95       	com	r25
    31d6:	80 95       	com	r24
    31d8:	70 95       	com	r23
    31da:	61 95       	neg	r22
    31dc:	7f 4f       	sbci	r23, 0xFF	; 255
    31de:	8f 4f       	sbci	r24, 0xFF	; 255
    31e0:	9f 4f       	sbci	r25, 0xFF	; 255
    31e2:	08 95       	ret

000031e4 <itoa>:
    31e4:	fb 01       	movw	r30, r22
    31e6:	9f 01       	movw	r18, r30
    31e8:	e8 94       	clt
    31ea:	42 30       	cpi	r20, 0x02	; 2
    31ec:	c4 f0       	brlt	.+48     	; 0x321e <itoa+0x3a>
    31ee:	45 32       	cpi	r20, 0x25	; 37
    31f0:	b4 f4       	brge	.+44     	; 0x321e <itoa+0x3a>
    31f2:	4a 30       	cpi	r20, 0x0A	; 10
    31f4:	29 f4       	brne	.+10     	; 0x3200 <itoa+0x1c>
    31f6:	97 fb       	bst	r25, 7
    31f8:	1e f4       	brtc	.+6      	; 0x3200 <itoa+0x1c>
    31fa:	90 95       	com	r25
    31fc:	81 95       	neg	r24
    31fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3200:	64 2f       	mov	r22, r20
    3202:	77 27       	eor	r23, r23
    3204:	0e 94 a1 18 	call	0x3142	; 0x3142 <__udivmodhi4>
    3208:	80 5d       	subi	r24, 0xD0	; 208
    320a:	8a 33       	cpi	r24, 0x3A	; 58
    320c:	0c f0       	brlt	.+2      	; 0x3210 <itoa+0x2c>
    320e:	89 5d       	subi	r24, 0xD9	; 217
    3210:	81 93       	st	Z+, r24
    3212:	cb 01       	movw	r24, r22
    3214:	00 97       	sbiw	r24, 0x00	; 0
    3216:	a1 f7       	brne	.-24     	; 0x3200 <itoa+0x1c>
    3218:	16 f4       	brtc	.+4      	; 0x321e <itoa+0x3a>
    321a:	5d e2       	ldi	r21, 0x2D	; 45
    321c:	51 93       	st	Z+, r21
    321e:	10 82       	st	Z, r1
    3220:	c9 01       	movw	r24, r18
    3222:	0c 94 4a 19 	jmp	0x3294	; 0x3294 <strrev>

00003226 <utoa>:
    3226:	fb 01       	movw	r30, r22
    3228:	9f 01       	movw	r18, r30
    322a:	42 30       	cpi	r20, 0x02	; 2
    322c:	74 f0       	brlt	.+28     	; 0x324a <utoa+0x24>
    322e:	45 32       	cpi	r20, 0x25	; 37
    3230:	64 f4       	brge	.+24     	; 0x324a <utoa+0x24>
    3232:	64 2f       	mov	r22, r20
    3234:	77 27       	eor	r23, r23
    3236:	0e 94 a1 18 	call	0x3142	; 0x3142 <__udivmodhi4>
    323a:	80 5d       	subi	r24, 0xD0	; 208
    323c:	8a 33       	cpi	r24, 0x3A	; 58
    323e:	0c f0       	brlt	.+2      	; 0x3242 <utoa+0x1c>
    3240:	89 5d       	subi	r24, 0xD9	; 217
    3242:	81 93       	st	Z+, r24
    3244:	cb 01       	movw	r24, r22
    3246:	00 97       	sbiw	r24, 0x00	; 0
    3248:	a1 f7       	brne	.-24     	; 0x3232 <utoa+0xc>
    324a:	10 82       	st	Z, r1
    324c:	c9 01       	movw	r24, r18
    324e:	0c 94 4a 19 	jmp	0x3294	; 0x3294 <strrev>

00003252 <__eerd_byte_m328p>:
    3252:	f9 99       	sbic	0x1f, 1	; 31
    3254:	fe cf       	rjmp	.-4      	; 0x3252 <__eerd_byte_m328p>
    3256:	92 bd       	out	0x22, r25	; 34
    3258:	81 bd       	out	0x21, r24	; 33
    325a:	f8 9a       	sbi	0x1f, 0	; 31
    325c:	99 27       	eor	r25, r25
    325e:	80 b5       	in	r24, 0x20	; 32
    3260:	08 95       	ret

00003262 <__eerd_word_m328p>:
    3262:	a8 e1       	ldi	r26, 0x18	; 24
    3264:	b0 e0       	ldi	r27, 0x00	; 0
    3266:	42 e0       	ldi	r20, 0x02	; 2
    3268:	50 e0       	ldi	r21, 0x00	; 0
    326a:	0c 94 5c 19 	jmp	0x32b8	; 0x32b8 <__eerd_blraw_m328p>

0000326e <__eewr_byte_m328p>:
    326e:	26 2f       	mov	r18, r22

00003270 <__eewr_r18_m328p>:
    3270:	f9 99       	sbic	0x1f, 1	; 31
    3272:	fe cf       	rjmp	.-4      	; 0x3270 <__eewr_r18_m328p>
    3274:	1f ba       	out	0x1f, r1	; 31
    3276:	92 bd       	out	0x22, r25	; 34
    3278:	81 bd       	out	0x21, r24	; 33
    327a:	20 bd       	out	0x20, r18	; 32
    327c:	0f b6       	in	r0, 0x3f	; 63
    327e:	f8 94       	cli
    3280:	fa 9a       	sbi	0x1f, 2	; 31
    3282:	f9 9a       	sbi	0x1f, 1	; 31
    3284:	0f be       	out	0x3f, r0	; 63
    3286:	01 96       	adiw	r24, 0x01	; 1
    3288:	08 95       	ret

0000328a <__eewr_word_m328p>:
    328a:	0e 94 37 19 	call	0x326e	; 0x326e <__eewr_byte_m328p>
    328e:	27 2f       	mov	r18, r23
    3290:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__eewr_r18_m328p>

00003294 <strrev>:
    3294:	dc 01       	movw	r26, r24
    3296:	fc 01       	movw	r30, r24
    3298:	67 2f       	mov	r22, r23
    329a:	71 91       	ld	r23, Z+
    329c:	77 23       	and	r23, r23
    329e:	e1 f7       	brne	.-8      	; 0x3298 <strrev+0x4>
    32a0:	32 97       	sbiw	r30, 0x02	; 2
    32a2:	04 c0       	rjmp	.+8      	; 0x32ac <strrev+0x18>
    32a4:	7c 91       	ld	r23, X
    32a6:	6d 93       	st	X+, r22
    32a8:	70 83       	st	Z, r23
    32aa:	62 91       	ld	r22, -Z
    32ac:	ae 17       	cp	r26, r30
    32ae:	bf 07       	cpc	r27, r31
    32b0:	c8 f3       	brcs	.-14     	; 0x32a4 <strrev+0x10>
    32b2:	08 95       	ret

000032b4 <__eerd_block_m328p>:
    32b4:	dc 01       	movw	r26, r24
    32b6:	cb 01       	movw	r24, r22

000032b8 <__eerd_blraw_m328p>:
    32b8:	fc 01       	movw	r30, r24
    32ba:	f9 99       	sbic	0x1f, 1	; 31
    32bc:	fe cf       	rjmp	.-4      	; 0x32ba <__eerd_blraw_m328p+0x2>
    32be:	06 c0       	rjmp	.+12     	; 0x32cc <__eerd_blraw_m328p+0x14>
    32c0:	f2 bd       	out	0x22, r31	; 34
    32c2:	e1 bd       	out	0x21, r30	; 33
    32c4:	f8 9a       	sbi	0x1f, 0	; 31
    32c6:	31 96       	adiw	r30, 0x01	; 1
    32c8:	00 b4       	in	r0, 0x20	; 32
    32ca:	0d 92       	st	X+, r0
    32cc:	41 50       	subi	r20, 0x01	; 1
    32ce:	50 40       	sbci	r21, 0x00	; 0
    32d0:	b8 f7       	brcc	.-18     	; 0x32c0 <__eerd_blraw_m328p+0x8>
    32d2:	08 95       	ret

000032d4 <_exit>:
    32d4:	f8 94       	cli

000032d6 <__stop_program>:
    32d6:	ff cf       	rjmp	.-2      	; 0x32d6 <__stop_program>
