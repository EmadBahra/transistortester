
TransistorTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00003f46  00003ffa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f46  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  00800102  00800102  00003ffc  2**0
                  ALLOC
  3 .eeprom       000001d6  00810000  00810000  00003ffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         00000dbc  00000000  00000000  000041d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001d2  00000000  00000000  00004f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000000c0  00000000  00000000  00005162  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000778  00000000  00000000  00005222  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002dd5  00000000  00000000  0000599a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000008ad  00000000  00000000  0000876f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000033fc  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000002b0  00000000  00000000  0000c418  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000943  00000000  00000000  0000c6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001872  00000000  00000000  0000d00b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 0000021f  00000000  00000000  0000e87d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 88 00 	jmp	0x110	; 0x110 <__ctors_end>
       4:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
       8:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
       c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      10:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      14:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      18:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      1c:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__vector_7>
      20:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      24:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      28:	0c 94 fa 17 	jmp	0x2ff4	; 0x2ff4 <__vector_10>
      2c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      30:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      34:	0c 94 e3 17 	jmp	0x2fc6	; 0x2fc6 <__vector_13>
      38:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      3c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      40:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      44:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      48:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      4c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      50:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      54:	0c 94 af 01 	jmp	0x35e	; 0x35e <__vector_21>
      58:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      5c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      60:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      64:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>

00000068 <LogTab>:
      68:	00 00 14 00 29 00 3e 00 53 00 69 00 80 00 97 00     ....).>.S.i.....
      78:	ae 00 c6 00 df 00 f8 00 12 01 2d 01 49 01 65 01     ..........-.I.e.
      88:	82 01 a0 01 be 01 de 01 ff 01 21 02 44 02 68 02     ..........!.D.h.
      98:	8e 02 b5 02 de 02 09 03 35 03 64 03 94 03 c8 03     ........5.d.....
      a8:	fe 03 37 04 73 04 b4 04 f9 04 43 05 93 05 ea 05     ..7.s.....C.....
      b8:	49 06 b3 06 29 07 ae 07 48 08 ff 08 de 09           I...)...H.....

000000c6 <RHtab>:
      c6:	ba 03 87 03 58 03 2e 03 07 03 e4 02 c3 02 a4 02     ....X...........
      d6:	88 02                                               ..

000000d8 <VERSION_str>:
      d8:	56 65 72 73 69 6f 6e 20 31 2e 30 37 6b 00           Version 1.07k.

000000e6 <URefT>:
      e6:	52 65 66 3d 00                                      Ref=.

000000eb <RHfakt>:
      eb:	52 48 66 3d 00                                      RHf=.

000000f0 <R0_str>:
      f0:	52 30 3d 00                                         R0=.

000000f4 <MinCap_str>:
      f4:	20 3e 31 30 30 6e 46 00                              >100nF.

000000fc <REF_C_str>:
      fc:	52 45 46 5f 43 3d 00                                REF_C=.

00000103 <REF_R_str>:
     103:	52 45 46 5f 52 3d 00                                REF_R=.

0000010a <PinRLtab>:
     10a:	01 04 10                                            ...

0000010d <PinADCtab>:
     10d:	01 02 04                                            ...

00000110 <__ctors_end>:
     110:	11 24       	eor	r1, r1
     112:	1f be       	out	0x3f, r1	; 63
     114:	cf ef       	ldi	r28, 0xFF	; 255
     116:	d4 e0       	ldi	r29, 0x04	; 4
     118:	de bf       	out	0x3e, r29	; 62
     11a:	cd bf       	out	0x3d, r28	; 61

0000011c <__do_copy_data>:
     11c:	11 e0       	ldi	r17, 0x01	; 1
     11e:	a0 e0       	ldi	r26, 0x00	; 0
     120:	b1 e0       	ldi	r27, 0x01	; 1
     122:	e6 e4       	ldi	r30, 0x46	; 70
     124:	ff e3       	ldi	r31, 0x3F	; 63
     126:	02 c0       	rjmp	.+4      	; 0x12c <__do_copy_data+0x10>
     128:	05 90       	lpm	r0, Z+
     12a:	0d 92       	st	X+, r0
     12c:	a2 30       	cpi	r26, 0x02	; 2
     12e:	b1 07       	cpc	r27, r17
     130:	d9 f7       	brne	.-10     	; 0x128 <__do_copy_data+0xc>

00000132 <__do_clear_bss>:
     132:	11 e0       	ldi	r17, 0x01	; 1
     134:	a2 e0       	ldi	r26, 0x02	; 2
     136:	b1 e0       	ldi	r27, 0x01	; 1
     138:	01 c0       	rjmp	.+2      	; 0x13c <.do_clear_bss_start>

0000013a <.do_clear_bss_loop>:
     13a:	1d 92       	st	X+, r1

0000013c <.do_clear_bss_start>:
     13c:	a0 39       	cpi	r26, 0x90	; 144
     13e:	b1 07       	cpc	r27, r17
     140:	e1 f7       	brne	.-8      	; 0x13a <.do_clear_bss_loop>
     142:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <main>
     146:	0c 94 a1 1f 	jmp	0x3f42	; 0x3f42 <_exit>

0000014a <__bad_interrupt>:
     14a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014e <lcd_data>:
void lcd_space(void) {
   lcd_data(' ');
}

// sends data byte to the LCD 
void lcd_data(unsigned char temp1) {
     14e:	1f 93       	push	r17
     150:	18 2f       	mov	r17, r24
 lcd_write_data(temp1);		// set RS to 1
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	61 2f       	mov	r22, r17
     156:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
     15a:	0e 94 77 14 	call	0x28ee	; 0x28ee <wait50us>
#ifdef WITH_UART
 switch(temp1) {
     15e:	18 30       	cpi	r17, 0x08	; 8
     160:	48 f4       	brcc	.+18     	; 0x174 <lcd_data+0x26>
     162:	16 30       	cpi	r17, 0x06	; 6
     164:	c0 f4       	brcc	.+48     	; 0x196 <lcd_data+0x48>
     166:	12 30       	cpi	r17, 0x02	; 2
     168:	61 f0       	breq	.+24     	; 0x182 <lcd_data+0x34>
     16a:	13 30       	cpi	r17, 0x03	; 3
     16c:	79 f0       	breq	.+30     	; 0x18c <lcd_data+0x3e>
     16e:	11 30       	cpi	r17, 0x01	; 1
     170:	f1 f4       	brne	.+60     	; 0x1ae <lcd_data+0x60>
     172:	05 c0       	rjmp	.+10     	; 0x17e <lcd_data+0x30>
     174:	14 3e       	cpi	r17, 0xE4	; 228
     176:	89 f0       	breq	.+34     	; 0x19a <lcd_data+0x4c>
     178:	14 3f       	cpi	r17, 0xF4	; 244
     17a:	c9 f4       	brne	.+50     	; 0x1ae <lcd_data+0x60>
     17c:	10 c0       	rjmp	.+32     	; 0x19e <lcd_data+0x50>
    case LCD_CHAR_DIODE1:
    	uart_putc('>');
     17e:	8e e3       	ldi	r24, 0x3E	; 62
     180:	06 c0       	rjmp	.+12     	; 0x18e <lcd_data+0x40>
    	uart_putc('|');
    	break;
    case LCD_CHAR_DIODE2:
    	uart_putc('|');
     182:	8c e7       	ldi	r24, 0x7C	; 124
     184:	0e 94 48 14 	call	0x2890	; 0x2890 <uart_putc>
    	uart_putc('<');
     188:	8c e3       	ldi	r24, 0x3C	; 60
     18a:	12 c0       	rjmp	.+36     	; 0x1b0 <lcd_data+0x62>
    	break;
    case LCD_CHAR_CAP:
    	uart_putc('|');
     18c:	8c e7       	ldi	r24, 0x7C	; 124
     18e:	0e 94 48 14 	call	0x2890	; 0x2890 <uart_putc>
    	uart_putc('|');
     192:	8c e7       	ldi	r24, 0x7C	; 124
     194:	0d c0       	rjmp	.+26     	; 0x1b0 <lcd_data+0x62>
    	break;
    case LCD_CHAR_RESIS1:
    case LCD_CHAR_RESIS2:
    	uart_putc('R');
     196:	82 e5       	ldi	r24, 0x52	; 82
     198:	0b c0       	rjmp	.+22     	; 0x1b0 <lcd_data+0x62>
//    case LCD_CHAR_DEGREE:	// degree sign
//    	uart_putc(0xf8);	// codepage 437 or 850 has degree
//    	break;
    case LCD_CHAR_U:		//µ
//    	uart_putc(0xe6);	// codepage 437 or 850 has my
    	uart_putc('u');		// better use the ASCII u
     19a:	85 e7       	ldi	r24, 0x75	; 117
     19c:	09 c0       	rjmp	.+18     	; 0x1b0 <lcd_data+0x62>
    	break;
    case LCD_CHAR_OMEGA:	//Omega
//	uart_putc(0xea);	// only codepage 437 has Omega
        uart_putc('O');
     19e:	8f e4       	ldi	r24, 0x4F	; 79
     1a0:	0e 94 48 14 	call	0x2890	; 0x2890 <uart_putc>
        uart_putc('h');
     1a4:	88 e6       	ldi	r24, 0x68	; 104
     1a6:	0e 94 48 14 	call	0x2890	; 0x2890 <uart_putc>
        uart_putc('m');
     1aa:	8d e6       	ldi	r24, 0x6D	; 109
     1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <lcd_data+0x62>
    	break;
    default:
    	uart_putc(temp1);
     1ae:	81 2f       	mov	r24, r17
     1b0:	0e 94 48 14 	call	0x2890	; 0x2890 <uart_putc>
 }
#endif
}
     1b4:	1f 91       	pop	r17
     1b6:	08 95       	ret

000001b8 <lcd_space>:
   lcd_data(temp + '1');
}

// send space character to LCD
void lcd_space(void) {
   lcd_data(' ');
     1b8:	80 e2       	ldi	r24, 0x20	; 32
     1ba:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
}
     1be:	08 95       	ret

000001c0 <lcd_testpin>:
 

// sends numeric character (Pin Number) to the LCD 
// from binary 0 we send ASCII 1 ....
void lcd_testpin(unsigned char temp) {
   lcd_data(temp + '1');
     1c0:	8f 5c       	subi	r24, 0xCF	; 207
     1c2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
}
     1c6:	08 95       	ret

000001c8 <uart_newline>:
}


#ifdef WITH_UART
void uart_newline(void) {
   uart_putc('\r');
     1c8:	8d e0       	ldi	r24, 0x0D	; 13
     1ca:	0e 94 48 14 	call	0x2890	; 0x2890 <uart_putc>
   uart_putc('\n');
     1ce:	8a e0       	ldi	r24, 0x0A	; 10
     1d0:	0e 94 48 14 	call	0x2890	; 0x2890 <uart_putc>
}
     1d4:	08 95       	ret

000001d6 <lcd_command>:
#endif
}
 
// sends a command to the LCD
 
void lcd_command(unsigned char temp1) {
     1d6:	1f 93       	push	r17
     1d8:	18 2f       	mov	r17, r24
        lcd_write_cmd(temp1);		// set RS to 0
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	61 2f       	mov	r22, r17
     1de:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
     1e2:	0e 94 77 14 	call	0x28ee	; 0x28ee <wait50us>
#ifdef WITH_UART
	if((temp1 == 0x80) || (temp1 == 0xC0)) {
     1e6:	10 38       	cpi	r17, 0x80	; 128
     1e8:	11 f0       	breq	.+4      	; 0x1ee <lcd_command+0x18>
     1ea:	10 3c       	cpi	r17, 0xC0	; 192
     1ec:	11 f4       	brne	.+4      	; 0x1f2 <lcd_command+0x1c>
		uart_newline();
     1ee:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <uart_newline>
	}
#endif
}
     1f2:	1f 91       	pop	r17
     1f4:	08 95       	ret

000001f6 <lcd_clear>:
}
 
// send the command to clear the display 
 
void lcd_clear(void) {
   lcd_command(CLEAR_DISPLAY);
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
   wait_about10ms();
     1fc:	82 e0       	ldi	r24, 0x02	; 2
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>
#ifdef WITH_UART
   uart_newline();
     204:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <uart_newline>
#endif
   lcd_line1();			// set cursor to Line1 Column 1, (only for OLED-Display)
     208:	80 e8       	ldi	r24, 0x80	; 128
     20a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
}
     20e:	08 95       	ret

00000210 <lcd_init>:
 
// Initialise: 
// Must be called first .
 
void lcd_init(void) {
   wait_about30ms();
     210:	86 e0       	ldi	r24, 0x06	; 6
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>
   // to initialise, send 3 times to be shure to be in 8 Bit mode
   lcd_write_init(1);
     218:	80 e8       	ldi	r24, 0x80	; 128
     21a:	60 e3       	ldi	r22, 0x30	; 48
     21c:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
   wait_about5ms();
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>
   
   lcd_write_init(1);
     228:	80 e8       	ldi	r24, 0x80	; 128
     22a:	60 e3       	ldi	r22, 0x30	; 48
     22c:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
   wait1ms();
     230:	0e 94 71 14 	call	0x28e2	; 0x28e2 <wait1ms>

   lcd_write_init(1);
     234:	80 e8       	ldi	r24, 0x80	; 128
     236:	60 e3       	ldi	r22, 0x30	; 48
     238:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
   wait1ms();
     23c:	0e 94 71 14 	call	0x28e2	; 0x28e2 <wait1ms>

   lcd_write_init(0);		// switch to 4 Bit mode
     240:	80 e8       	ldi	r24, 0x80	; 128
     242:	60 e2       	ldi	r22, 0x20	; 32
     244:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
   wait_about10ms();
     248:	82 e0       	ldi	r24, 0x02	; 2
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>

   // 4Bit / 2 rows / 5x7
   lcd_command(CMD_SetIFOptions | 0x08);
     250:	88 e2       	ldi	r24, 0x28	; 40
     252:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>

   // Display on / Cursor off / no Blinking
   lcd_command(CMD_SetDisplayAndCursor | 0x04);
     256:	8c e0       	ldi	r24, 0x0C	; 12
     258:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>

   // increment / no Scroll    
   lcd_command(CMD_SetEntryMode | 0x02);	
     25c:	86 e0       	ldi	r24, 0x06	; 6
     25e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
   lcd_clear();
     262:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
}
     266:	08 95       	ret

00000268 <lcd_string>:
#endif
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
     268:	ef 92       	push	r14
     26a:	ff 92       	push	r15
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	e8 2e       	mov	r14, r24
     272:	e7 01       	movw	r28, r14
     274:	7e 01       	movw	r14, r28
     276:	f9 2e       	mov	r15, r25
     278:	e7 01       	movw	r28, r14
    while(*data) {
     27a:	02 c0       	rjmp	.+4      	; 0x280 <lcd_string+0x18>
        lcd_data(*data);
     27c:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
    while(*data) {
     280:	89 91       	ld	r24, Y+
     282:	88 23       	and	r24, r24
     284:	d9 f7       	brne	.-10     	; 0x27c <lcd_string+0x14>
        lcd_data(*data);
        data++;
    }
}
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	ff 90       	pop	r15
     28c:	ef 90       	pop	r14
     28e:	08 95       	ret

00000290 <lcd_pgm_string>:

#ifdef use_lcd_pgm
//Load string from PGM  and send to LCD 
void lcd_pgm_string(const unsigned char *data) {
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = pgm_read_byte(data);
     296:	fe 01       	movw	r30, r28
     298:	84 91       	lpm	r24, Z+
      if((cc==0) || (cc==128)) {
     29a:	88 23       	and	r24, r24
     29c:	31 f0       	breq	.+12     	; 0x2aa <lcd_pgm_string+0x1a>
     29e:	80 38       	cpi	r24, 0x80	; 128
     2a0:	21 f0       	breq	.+8      	; 0x2aa <lcd_pgm_string+0x1a>
         return;
      }
      lcd_data(cc);
     2a2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
      data++;
     2a6:	21 96       	adiw	r28, 0x01	; 1
   }
     2a8:	f6 cf       	rjmp	.-20     	; 0x296 <lcd_pgm_string+0x6>
}
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	08 95       	ret

000002b0 <lcd_fix_string>:
#endif

//Load string from PGM or EEprom and send to LCD 
void lcd_fix_string(const unsigned char *data) {
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = MEM_read_byte(data);
     2b6:	ce 01       	movw	r24, r28
     2b8:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__eerd_byte_m168>
      if((cc==0) || (cc==128)) {
     2bc:	88 23       	and	r24, r24
     2be:	31 f0       	breq	.+12     	; 0x2cc <lcd_fix_string+0x1c>
     2c0:	80 38       	cpi	r24, 0x80	; 128
     2c2:	21 f0       	breq	.+8      	; 0x2cc <lcd_fix_string+0x1c>
         return;
      }
      lcd_data(cc);
     2c4:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
      data++;
     2c8:	21 96       	adiw	r28, 0x01	; 1
   }
     2ca:	f5 cf       	rjmp	.-22     	; 0x2b6 <lcd_fix_string+0x6>
}
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	08 95       	ret

000002d2 <lcd_fix_customchar>:

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
     2d2:	0f 93       	push	r16
     2d4:	1f 93       	push	r17
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	8c 01       	movw	r16, r24
     2dc:	c0 e0       	ldi	r28, 0x00	; 0
     2de:	d0 e0       	ldi	r29, 0x00	; 0
    for(uint8_t i=0;i<8;i++) {
        lcd_data(MEM_read_byte(chardata));
     2e0:	c8 01       	movw	r24, r16
     2e2:	8c 0f       	add	r24, r28
     2e4:	9d 1f       	adc	r25, r29
     2e6:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__eerd_byte_m168>
     2ea:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
     2ee:	21 96       	adiw	r28, 0x01	; 1
   }
}

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
    for(uint8_t i=0;i<8;i++) {
     2f0:	c8 30       	cpi	r28, 0x08	; 8
     2f2:	d1 05       	cpc	r29, r1
     2f4:	a9 f7       	brne	.-22     	; 0x2e0 <lcd_fix_customchar+0xe>
        lcd_data(MEM_read_byte(chardata));
        chardata++;
    }
}
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	1f 91       	pop	r17
     2fc:	0f 91       	pop	r16
     2fe:	08 95       	ret

00000300 <_lcd_hw_write>:
     300:	5d 9a       	sbi	0x0b, 5	; 11
     302:	55 9a       	sbi	0x0a, 5	; 10
     304:	5c 98       	cbi	0x0b, 4	; 11
     306:	54 9a       	sbi	0x0a, 4	; 10
     308:	80 fd       	sbrc	r24, 0
     30a:	5c 9a       	sbi	0x0b, 4	; 11
     30c:	58 98       	cbi	0x0b, 0	; 11
     30e:	59 98       	cbi	0x0b, 1	; 11
     310:	5a 98       	cbi	0x0b, 2	; 11
     312:	5b 98       	cbi	0x0b, 3	; 11
     314:	64 fd       	sbrc	r22, 4
     316:	58 9a       	sbi	0x0b, 0	; 11
     318:	50 9a       	sbi	0x0a, 0	; 10
     31a:	65 fd       	sbrc	r22, 5
     31c:	59 9a       	sbi	0x0b, 1	; 11
     31e:	51 9a       	sbi	0x0a, 1	; 10
     320:	66 fd       	sbrc	r22, 6
     322:	5a 9a       	sbi	0x0b, 2	; 11
     324:	52 9a       	sbi	0x0a, 2	; 10
     326:	67 fd       	sbrc	r22, 7
     328:	5b 9a       	sbi	0x0b, 3	; 11
     32a:	53 9a       	sbi	0x0a, 3	; 10
     32c:	00 00       	nop
     32e:	5d 98       	cbi	0x0b, 5	; 11
     330:	0e 94 80 14 	call	0x2900	; 0x2900 <wait1us>
     334:	87 fd       	sbrc	r24, 7
     336:	11 c0       	rjmp	.+34     	; 0x35a <_lcd_hw_write_exit>
     338:	5d 9a       	sbi	0x0b, 5	; 11
     33a:	58 98       	cbi	0x0b, 0	; 11
     33c:	59 98       	cbi	0x0b, 1	; 11
     33e:	5a 98       	cbi	0x0b, 2	; 11
     340:	5b 98       	cbi	0x0b, 3	; 11
     342:	60 fd       	sbrc	r22, 0
     344:	58 9a       	sbi	0x0b, 0	; 11
     346:	61 fd       	sbrc	r22, 1
     348:	59 9a       	sbi	0x0b, 1	; 11
     34a:	62 fd       	sbrc	r22, 2
     34c:	5a 9a       	sbi	0x0b, 2	; 11
     34e:	63 fd       	sbrc	r22, 3
     350:	5b 9a       	sbi	0x0b, 3	; 11
     352:	00 00       	nop
     354:	5d 98       	cbi	0x0b, 5	; 11
     356:	0e 94 80 14 	call	0x2900	; 0x2900 <wait1us>

0000035a <_lcd_hw_write_exit>:
     35a:	08 95       	ret

0000035c <__vector_7>:
#define MAIN_C
#include "Transistortester.h"

#ifndef INHIBIT_SLEEP_MODE
  // prepare sleep mode
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
     35c:	18 95       	reti

0000035e <__vector_21>:
  EMPTY_INTERRUPT(ADC_vect);
     35e:	18 95       	reti

00000360 <EntladePins>:
   R_DDR &= ~PinToCharge;	// switch back to input
   R_PORT &= ~PinToCharge;	// no Pull up
}

// first discharge any charge of capacitors
void EntladePins() {
     360:	af 92       	push	r10
     362:	bf 92       	push	r11
     364:	cf 92       	push	r12
     366:	df 92       	push	r13
     368:	ef 92       	push	r14
     36a:	ff 92       	push	r15
     36c:	0f 93       	push	r16
     36e:	1f 93       	push	r17
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	3a e0       	ldi	r19, 0x0A	; 10
     376:	c3 2e       	mov	r12, r19
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     378:	28 e0       	ldi	r18, 0x08	; 8
     37a:	d2 2e       	mov	r13, r18
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     R_PORT = 0;			// R-outputs auf 0
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     37c:	9a e2       	ldi	r25, 0x2A	; 42
     37e:	a9 2e       	mov	r10, r25
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     380:	85 e1       	ldi	r24, 0x15	; 21
     382:	b8 2e       	mov	r11, r24
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     384:	d7 b8       	out	0x07, r13	; 7
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     386:	d8 b8       	out	0x08, r13	; 8
     R_PORT = 0;			// R-outputs auf 0
     388:	15 b8       	out	0x05, r1	; 5
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     38a:	a4 b8       	out	0x04, r10	; 4
     adcmv[0] = W5msReadADC(PC0);	// which voltage has Pin 1?
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
     392:	8c 01       	movw	r16, r24
     adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
     39a:	ec 01       	movw	r28, r24
     adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     39c:	82 e0       	ldi	r24, 0x02	; 2
     39e:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
     if ((PartFound == PART_CELL) || (adcmv[0] < CAP_EMPTY_LEVEL) & (adcmv[1] < CAP_EMPTY_LEVEL) & (adcmv[2] < CAP_EMPTY_LEVEL)) {
     3a2:	20 91 07 01 	lds	r18, 0x0107
     3a6:	28 30       	cpi	r18, 0x08	; 8
     3a8:	c1 f0       	breq	.+48     	; 0x3da <EntladePins+0x7a>
     3aa:	41 e0       	ldi	r20, 0x01	; 1
     3ac:	c4 30       	cpi	r28, 0x04	; 4
     3ae:	d1 05       	cpc	r29, r1
     3b0:	08 f0       	brcs	.+2      	; 0x3b4 <EntladePins+0x54>
     3b2:	40 e0       	ldi	r20, 0x00	; 0
     3b4:	21 e0       	ldi	r18, 0x01	; 1
     3b6:	04 30       	cpi	r16, 0x04	; 4
     3b8:	11 05       	cpc	r17, r1
     3ba:	08 f0       	brcs	.+2      	; 0x3be <EntladePins+0x5e>
     3bc:	20 e0       	ldi	r18, 0x00	; 0
     3be:	42 23       	and	r20, r18
     3c0:	50 e0       	ldi	r21, 0x00	; 0
     3c2:	21 e0       	ldi	r18, 0x01	; 1
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	84 30       	cpi	r24, 0x04	; 4
     3c8:	91 05       	cpc	r25, r1
     3ca:	10 f0       	brcs	.+4      	; 0x3d0 <EntladePins+0x70>
     3cc:	20 e0       	ldi	r18, 0x00	; 0
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	24 23       	and	r18, r20
     3d2:	35 23       	and	r19, r21
     3d4:	21 15       	cp	r18, r1
     3d6:	31 05       	cpc	r19, r1
     3d8:	21 f0       	breq	.+8      	; 0x3e2 <EntladePins+0x82>
        ADC_DDR = TXD_MSK;		// switch all ADC-Pins to input
     3da:	88 e0       	ldi	r24, 0x08	; 8
     3dc:	87 b9       	out	0x07, r24	; 7
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
     3de:	14 b8       	out	0x04, r1	; 4
        return;			// all is discharged
     3e0:	4f c0       	rjmp	.+158    	; 0x480 <EntladePins+0x120>
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
     3e2:	23 e0       	ldi	r18, 0x03	; 3
     3e4:	08 3e       	cpi	r16, 0xE8	; 232
     3e6:	12 07       	cpc	r17, r18
     3e8:	10 f0       	brcs	.+4      	; 0x3ee <EntladePins+0x8e>
  uint8_t lop_cnt;		// loop counter
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     3ea:	28 e0       	ldi	r18, 0x08	; 8
     3ec:	01 c0       	rjmp	.+2      	; 0x3f0 <EntladePins+0x90>
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
        return;			// all is discharged
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
        adc_gnd |= (1<<PC0);	//Pin 1 directly to GND
     3ee:	29 e0       	ldi	r18, 0x09	; 9
     }
     if (adcmv[1] < 1000) {
     3f0:	33 e0       	ldi	r19, 0x03	; 3
     3f2:	c8 3e       	cpi	r28, 0xE8	; 232
     3f4:	d3 07       	cpc	r29, r19
     3f6:	08 f4       	brcc	.+2      	; 0x3fa <EntladePins+0x9a>
        adc_gnd |= (1<<PC1);	//Pin 2 directly to GND
     3f8:	22 60       	ori	r18, 0x02	; 2
     }
     if (adcmv[2] < 1000) {
     3fa:	33 e0       	ldi	r19, 0x03	; 3
     3fc:	88 3e       	cpi	r24, 0xE8	; 232
     3fe:	93 07       	cpc	r25, r19
     400:	08 f4       	brcc	.+2      	; 0x404 <EntladePins+0xa4>
        adc_gnd |= (1<<PC2);	//Pin 3 directly to  GND
     402:	24 60       	ori	r18, 0x04	; 4
     }
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time
     404:	27 b9       	out	0x07, r18	; 7

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     406:	b4 b8       	out	0x04, r11	; 4
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     408:	c0 e0       	ldi	r28, 0x00	; 0
     40a:	d0 e0       	ldi	r29, 0x00	; 0
        wdt_reset();
     40c:	a8 95       	wdr
        adcmv[0] = W20msReadADC(PC0);	// which voltage has Pin 1?
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	0e 94 b2 1a 	call	0x3564	; 0x3564 <W20msReadADC>
     414:	7c 01       	movw	r14, r24
        adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
     41c:	8c 01       	movw	r16, r24
        adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     41e:	82 e0       	ldi	r24, 0x02	; 2
     420:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
        if (adcmv[0] < 1300) {
     424:	24 e1       	ldi	r18, 0x14	; 20
     426:	e2 16       	cp	r14, r18
     428:	25 e0       	ldi	r18, 0x05	; 5
     42a:	f2 06       	cpc	r15, r18
     42c:	08 f4       	brcc	.+2      	; 0x430 <EntladePins+0xd0>
           ADC_DDR |= (1<<PC0);	// below 1.3V , switch directly with ADC-Port to GND
     42e:	38 9a       	sbi	0x07, 0	; 7
        }
        if (adcmv[1] < 1300) {
     430:	35 e0       	ldi	r19, 0x05	; 5
     432:	04 31       	cpi	r16, 0x14	; 20
     434:	13 07       	cpc	r17, r19
     436:	08 f4       	brcc	.+2      	; 0x43a <EntladePins+0xda>
           ADC_DDR |= (1<<PC1);	// below 1.3V, switch directly with ADC-Port to GND
     438:	39 9a       	sbi	0x07, 1	; 7
        }
        if (adcmv[2] < 1300) {
     43a:	25 e0       	ldi	r18, 0x05	; 5
     43c:	84 31       	cpi	r24, 0x14	; 20
     43e:	92 07       	cpc	r25, r18
     440:	08 f4       	brcc	.+2      	; 0x444 <EntladePins+0xe4>
           ADC_DDR |= (1<<PC2);	// below 1.3V, switch directly with ADC-Port to GND
     442:	3a 9a       	sbi	0x07, 2	; 7
        }
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
     444:	36 e0       	ldi	r19, 0x06	; 6
     446:	e3 16       	cp	r14, r19
     448:	f1 04       	cpc	r15, r1
     44a:	30 f4       	brcc	.+12     	; 0x458 <EntladePins+0xf8>
     44c:	06 30       	cpi	r16, 0x06	; 6
     44e:	11 05       	cpc	r17, r1
     450:	18 f4       	brcc	.+6      	; 0x458 <EntladePins+0xf8>
     452:	86 30       	cpi	r24, 0x06	; 6
     454:	91 05       	cpc	r25, r1
     456:	38 f0       	brcs	.+14     	; 0x466 <EntladePins+0x106>

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     458:	21 96       	adiw	r28, 0x01	; 1
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	c4 3f       	cpi	r28, 0xF4	; 244
     45e:	d8 07       	cpc	r29, r24
     460:	a9 f6       	brne	.-86     	; 0x40c <EntladePins+0xac>
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
           break;
        }
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
     462:	d0 92 07 01 	sts	0x0107, r13

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     466:	00 e0       	ldi	r16, 0x00	; 0
     468:	10 e0       	ldi	r17, 0x00	; 0
     46a:	04 c0       	rjmp	.+8      	; 0x474 <EntladePins+0x114>
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     46c:	0e 94 71 14 	call	0x28e2	; 0x28e2 <wait1ms>
     470:	0f 5f       	subi	r16, 0xFF	; 255
     472:	1f 4f       	sbci	r17, 0xFF	; 255
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
     474:	0c 17       	cp	r16, r28
     476:	1d 07       	cpc	r17, r29
     478:	c8 f3       	brcs	.-14     	; 0x46c <EntladePins+0x10c>
     47a:	ca 94       	dec	r12
  unsigned int clr_cnt;		// Clear Counter
  uint8_t lop_cnt;		// loop counter
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     47c:	09 f0       	breq	.+2      	; 0x480 <EntladePins+0x120>
     47e:	82 cf       	rjmp	.-252    	; 0x384 <EntladePins+0x24>
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     }
  } // end for lop_cnt
 }
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	1f 91       	pop	r17
     486:	0f 91       	pop	r16
     488:	ff 90       	pop	r15
     48a:	ef 90       	pop	r14
     48c:	df 90       	pop	r13
     48e:	cf 90       	pop	r12
     490:	bf 90       	pop	r11
     492:	af 90       	pop	r10
     494:	08 95       	ret

00000496 <RefVoltage>:
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;

  #ifdef AUTO_CAL
  referenz = ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset));
     496:	89 ec       	ldi	r24, 0xC9	; 201
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <__eerd_word_m168>
     49e:	20 91 44 01 	lds	r18, 0x0144
     4a2:	30 91 45 01 	lds	r19, 0x0145
     4a6:	28 0f       	add	r18, r24
     4a8:	39 1f       	adc	r19, r25
  #else
  referenz = ref_mv + REF_C_KORR;
  #endif
  if (referenz >= Ref_Tab_Beginn) {
     4aa:	83 e0       	ldi	r24, 0x03	; 3
     4ac:	28 3e       	cpi	r18, 0xE8	; 232
     4ae:	38 07       	cpc	r19, r24
     4b0:	20 f0       	brcs	.+8      	; 0x4ba <RefVoltage+0x24>
     referenz -= Ref_Tab_Beginn;
     4b2:	c9 01       	movw	r24, r18
     4b4:	88 5e       	subi	r24, 0xE8	; 232
     4b6:	93 40       	sbci	r25, 0x03	; 3
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <RefVoltage+0x28>
  } else  {
     referenz = 0;		// limit to begin of table
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = referenz / Ref_Tab_Abstand;
     4be:	62 e3       	ldi	r22, 0x32	; 50
     4c0:	70 e0       	ldi	r23, 0x00	; 0
     4c2:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <__udivmodhi4>
  tabres = Ref_Tab_Abstand-tabres;
  if (tabind > 7) {
     tabind = 7;		// limit to end of table
  }
  // interpolate the table of factors
  y1 = pgm_read_word(&RHtab[tabind]);
     4c6:	68 30       	cpi	r22, 0x08	; 8
     4c8:	08 f0       	brcs	.+2      	; 0x4cc <RefVoltage+0x36>
     4ca:	67 e0       	ldi	r22, 0x07	; 7
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	fb 01       	movw	r30, r22
     4d0:	ee 0f       	add	r30, r30
     4d2:	ff 1f       	adc	r31, r31
     4d4:	ea 53       	subi	r30, 0x3A	; 58
     4d6:	ff 4f       	sbci	r31, 0xFF	; 255
     4d8:	45 91       	lpm	r20, Z+
     4da:	54 91       	lpm	r21, Z+
  y2 = pgm_read_word(&RHtab[tabind+1]);
     4dc:	fb 01       	movw	r30, r22
     4de:	ee 0f       	add	r30, r30
     4e0:	ff 1f       	adc	r31, r31
     4e2:	e8 53       	subi	r30, 0x38	; 56
     4e4:	ff 4f       	sbci	r31, 0xFF	; 255
     4e6:	25 91       	lpm	r18, Z+
     4e8:	34 91       	lpm	r19, Z+
  } else  {
     referenz = 0;		// limit to begin of table
  }
  tabind = referenz / Ref_Tab_Abstand;
  tabres = referenz % Ref_Tab_Abstand;
  tabres = Ref_Tab_Abstand-tabres;
     4ea:	62 e3       	ldi	r22, 0x32	; 50
     4ec:	68 1b       	sub	r22, r24
  }
  // interpolate the table of factors
  y1 = pgm_read_word(&RHtab[tabind]);
  y2 = pgm_read_word(&RHtab[tabind+1]);
  // RHmultip is the interpolated factor to compute capacity from load time with 470k
  RHmultip = ((y1 - y2) * tabres + (Ref_Tab_Abstand/2)) / Ref_Tab_Abstand + y2;
     4ee:	70 e0       	ldi	r23, 0x00	; 0
     4f0:	42 1b       	sub	r20, r18
     4f2:	53 0b       	sbc	r21, r19
     4f4:	64 9f       	mul	r22, r20
     4f6:	c0 01       	movw	r24, r0
     4f8:	65 9f       	mul	r22, r21
     4fa:	90 0d       	add	r25, r0
     4fc:	74 9f       	mul	r23, r20
     4fe:	90 0d       	add	r25, r0
     500:	11 24       	eor	r1, r1
     502:	49 96       	adiw	r24, 0x19	; 25
     504:	62 e3       	ldi	r22, 0x32	; 50
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <__udivmodhi4>
     50c:	62 0f       	add	r22, r18
     50e:	73 1f       	adc	r23, r19
     510:	70 93 01 01 	sts	0x0101, r23
     514:	60 93 00 01 	sts	0x0100, r22
 }
     518:	08 95       	ret

0000051a <lcd_clear_line>:
#endif

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
     51a:	1f 93       	push	r17
     51c:	14 e1       	ldi	r17, 0x14	; 20
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    lcd_space();
     51e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
     522:	11 50       	subi	r17, 0x01	; 1

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
     524:	e1 f7       	brne	.-8      	; 0x51e <lcd_clear_line+0x4>
    lcd_space();
 }
}
     526:	1f 91       	pop	r17
     528:	08 95       	ret

0000052a <DisplayValue>:
 *    e.g: p = 10^-12 -> -12
 *  - unit character (0 = none)
 *  digits = 2, 3 or 4
 */
void DisplayValue(unsigned long Value, int8_t Exponent, unsigned char Unit, unsigned char digits)
{
     52a:	2f 92       	push	r2
     52c:	3f 92       	push	r3
     52e:	4f 92       	push	r4
     530:	5f 92       	push	r5
     532:	7f 92       	push	r7
     534:	8f 92       	push	r8
     536:	9f 92       	push	r9
     538:	af 92       	push	r10
     53a:	bf 92       	push	r11
     53c:	cf 92       	push	r12
     53e:	df 92       	push	r13
     540:	ef 92       	push	r14
     542:	ff 92       	push	r15
     544:	0f 93       	push	r16
     546:	1f 93       	push	r17
     548:	df 93       	push	r29
     54a:	cf 93       	push	r28
     54c:	cd b7       	in	r28, 0x3d	; 61
     54e:	de b7       	in	r29, 0x3e	; 62
     550:	2f 97       	sbiw	r28, 0x0f	; 15
     552:	0f b6       	in	r0, 0x3f	; 63
     554:	f8 94       	cli
     556:	de bf       	out	0x3e, r29	; 62
     558:	0f be       	out	0x3f, r0	; 63
     55a:	cd bf       	out	0x3d, r28	; 61
     55c:	6b 01       	movw	r12, r22
     55e:	7c 01       	movw	r14, r24
     560:	14 2f       	mov	r17, r20
     562:	72 2e       	mov	r7, r18
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
     564:	03 30       	cpi	r16, 0x03	; 3
     566:	29 f0       	breq	.+10     	; 0x572 <DisplayValue+0x48>
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
     568:	04 30       	cpi	r16, 0x04	; 4
     56a:	31 f0       	breq	.+12     	; 0x578 <DisplayValue+0x4e>
  uint8_t           Offset;		/* exponent of offset to next 10^3 step */
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
     56c:	84 e6       	ldi	r24, 0x64	; 100
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	14 c0       	rjmp	.+40     	; 0x59a <DisplayValue+0x70>
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
     572:	88 ee       	ldi	r24, 0xE8	; 232
     574:	93 e0       	ldi	r25, 0x03	; 3
     576:	11 c0       	rjmp	.+34     	; 0x59a <DisplayValue+0x70>
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
     578:	80 e1       	ldi	r24, 0x10	; 16
     57a:	97 e2       	ldi	r25, 0x27	; 39
     57c:	0e c0       	rjmp	.+28     	; 0x59a <DisplayValue+0x70>
  while (Value >= Limit)
  {
    Value += 5;				/* for automatic rounding */
     57e:	c7 01       	movw	r24, r14
     580:	b6 01       	movw	r22, r12
     582:	6b 5f       	subi	r22, 0xFB	; 251
     584:	7f 4f       	sbci	r23, 0xFF	; 255
     586:	8f 4f       	sbci	r24, 0xFF	; 255
     588:	9f 4f       	sbci	r25, 0xFF	; 255
    Value = Value / 10;			/* scale down by 10^1 */
     58a:	a5 01       	movw	r20, r10
     58c:	94 01       	movw	r18, r8
     58e:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
     592:	69 01       	movw	r12, r18
     594:	7a 01       	movw	r14, r20
    Exponent++;				/* increase exponent by 1 */
     596:	1f 5f       	subi	r17, 0xFF	; 255
     598:	08 c0       	rjmp	.+16     	; 0x5aa <DisplayValue+0x80>


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
  while (Value >= Limit)
     59a:	1c 01       	movw	r2, r24
     59c:	44 24       	eor	r4, r4
     59e:	55 24       	eor	r5, r5
  {
    Value += 5;				/* for automatic rounding */
    Value = Value / 10;			/* scale down by 10^1 */
     5a0:	ba e0       	ldi	r27, 0x0A	; 10
     5a2:	8b 2e       	mov	r8, r27
     5a4:	91 2c       	mov	r9, r1
     5a6:	a1 2c       	mov	r10, r1
     5a8:	b1 2c       	mov	r11, r1


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
  while (Value >= Limit)
     5aa:	c2 14       	cp	r12, r2
     5ac:	d3 04       	cpc	r13, r3
     5ae:	e4 04       	cpc	r14, r4
     5b0:	f5 04       	cpc	r15, r5
     5b2:	28 f7       	brcc	.-54     	; 0x57e <DisplayValue+0x54>


  /*
   *  determine prefix
   */
  Length = Exponent + 12;
     5b4:	81 2f       	mov	r24, r17
     5b6:	84 5f       	subi	r24, 0xF4	; 244
     5b8:	83 31       	cpi	r24, 0x13	; 19
     5ba:	08 f0       	brcs	.+2      	; 0x5be <DisplayValue+0x94>
     5bc:	82 e1       	ldi	r24, 0x12	; 18
  if (Length <  0) Length = 0;		/* Limit to minimum prefix */
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
  Index = Length / 3;
     5be:	23 e0       	ldi	r18, 0x03	; 3
  Offset = Length % 3;
     5c0:	62 2f       	mov	r22, r18
     5c2:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <__udivmodqi4>
     5c6:	19 2f       	mov	r17, r25
  if (Offset > 0)
     5c8:	99 23       	and	r25, r25
     5ca:	19 f0       	breq	.+6      	; 0x5d2 <DisplayValue+0xa8>
    {
      Index++;				/* adjust index for exponent offset, take next prefix */
     5cc:	8f 5f       	subi	r24, 0xFF	; 255
      Offset = 3 - Offset;		/* reverse value (1 or 2) */
     5ce:	29 1b       	sub	r18, r25
     5d0:	12 2f       	mov	r17, r18
    { /* use no nano */
      Index++;				/* use mikro instead of nano */
      Offset += 3;			/* can be 3,4 or 5 */
    }
#endif
  Prefix = MEM_read_byte((uint8_t *)(&PrefixTab[Index]));   /* look up prefix in table */
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	8e 53       	subi	r24, 0x3E	; 62
     5d6:	9e 4f       	sbci	r25, 0xFE	; 254
     5d8:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__eerd_byte_m168>
     5dc:	b8 2e       	mov	r11, r24
  /*
   *  display value
   */

  /* convert value into string */
  utoa((unsigned int)Value, OutBuffer, 10);
     5de:	c6 01       	movw	r24, r12
     5e0:	6e 01       	movw	r12, r28
     5e2:	08 94       	sec
     5e4:	c1 1c       	adc	r12, r1
     5e6:	d1 1c       	adc	r13, r1
     5e8:	b6 01       	movw	r22, r12
     5ea:	4a e0       	ldi	r20, 0x0A	; 10
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <utoa>
  Length = strlen(OutBuffer);
     5f2:	f6 01       	movw	r30, r12
     5f4:	01 90       	ld	r0, Z+
     5f6:	00 20       	and	r0, r0
     5f8:	e9 f7       	brne	.-6      	; 0x5f4 <DisplayValue+0xca>
     5fa:	31 97       	sbiw	r30, 0x01	; 1
     5fc:	2e 2e       	mov	r2, r30
     5fe:	2c 18       	sub	r2, r12

  /* position of dot */
  Exponent = Length - Offset;		/* calculate position */
     600:	82 2c       	mov	r8, r2
     602:	81 1a       	sub	r8, r17

  if (Exponent <= 0)			/* we have to prepend "0." */
     604:	18 14       	cp	r1, r8
     606:	44 f0       	brlt	.+16     	; 0x618 <DisplayValue+0xee>
  {
    /* 0: factor 10 / -1: factor 100 */
//    lcd_data('0');
    lcd_data('.');
     608:	8e e2       	ldi	r24, 0x2E	; 46
     60a:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
      {
       lcd_data('0');	/* extra 0 for factor 10 */
       Exponent++;
      }
#else
    if (Exponent < 0) lcd_data('0');	/* extra 0 for factor 100 */
     60e:	88 20       	and	r8, r8
     610:	19 f0       	breq	.+6      	; 0x618 <DisplayValue+0xee>
     612:	80 e3       	ldi	r24, 0x30	; 48
     614:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
#endif
  }

  if (Offset == 0) Exponent = -1;	/* disable dot if not needed */
     618:	11 23       	and	r17, r17
     61a:	11 f4       	brne	.+4      	; 0x620 <DisplayValue+0xf6>
     61c:	88 24       	eor	r8, r8
     61e:	8a 94       	dec	r8
     620:	6e 01       	movw	r12, r28
     622:	08 94       	sec
     624:	c1 1c       	adc	r12, r1
     626:	d1 1c       	adc	r13, r1
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     628:	00 e0       	ldi	r16, 0x00	; 0
     62a:	10 e0       	ldi	r17, 0x00	; 0
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    Index++;				/* next one */
    if (Index == Exponent) {
     62c:	99 24       	eor	r9, r9
     62e:	87 fc       	sbrc	r8, 7
     630:	90 94       	com	r9
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     632:	0d c0       	rjmp	.+26     	; 0x64e <DisplayValue+0x124>
  {
    lcd_data(OutBuffer[Index]);		/* display char */
     634:	0f 5f       	subi	r16, 0xFF	; 255
     636:	1f 4f       	sbci	r17, 0xFF	; 255
     638:	f6 01       	movw	r30, r12
     63a:	81 91       	ld	r24, Z+
     63c:	6f 01       	movw	r12, r30
     63e:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
    Index++;				/* next one */
    if (Index == Exponent) {
     642:	08 15       	cp	r16, r8
     644:	19 05       	cpc	r17, r9
     646:	19 f4       	brne	.+6      	; 0x64e <DisplayValue+0x124>
      lcd_data('.');			/* display dot */
     648:	8e e2       	ldi	r24, 0x2E	; 46
     64a:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     64e:	02 15       	cp	r16, r2
     650:	88 f3       	brcs	.-30     	; 0x634 <DisplayValue+0x10a>
      lcd_data('.');			/* display dot */
    }
  }

  /* display prefix and unit */
  if (Prefix != 0) lcd_data(Prefix);
     652:	bb 20       	and	r11, r11
     654:	19 f0       	breq	.+6      	; 0x65c <DisplayValue+0x132>
     656:	8b 2d       	mov	r24, r11
     658:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
  if (Unit) lcd_data(Unit);
     65c:	77 20       	and	r7, r7
     65e:	19 f0       	breq	.+6      	; 0x666 <DisplayValue+0x13c>
     660:	87 2d       	mov	r24, r7
     662:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
}
     666:	2f 96       	adiw	r28, 0x0f	; 15
     668:	0f b6       	in	r0, 0x3f	; 63
     66a:	f8 94       	cli
     66c:	de bf       	out	0x3e, r29	; 62
     66e:	0f be       	out	0x3f, r0	; 63
     670:	cd bf       	out	0x3d, r28	; 61
     672:	cf 91       	pop	r28
     674:	df 91       	pop	r29
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	ff 90       	pop	r15
     67c:	ef 90       	pop	r14
     67e:	df 90       	pop	r13
     680:	cf 90       	pop	r12
     682:	bf 90       	pop	r11
     684:	af 90       	pop	r10
     686:	9f 90       	pop	r9
     688:	8f 90       	pop	r8
     68a:	7f 90       	pop	r7
     68c:	5f 90       	pop	r5
     68e:	4f 90       	pop	r4
     690:	3f 90       	pop	r3
     692:	2f 90       	pop	r2
     694:	08 95       	ret

00000696 <RvalOut>:
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
      lcd_space();
   }
}

void RvalOut(uint8_t ii) {	
     696:	0f 93       	push	r16
   // output of resistor value
#if FLASHEND > 0x1fff
   uint16_t rr;
   if ((resis[ii].rx < 100) && (resis[0].lx == 0)) {
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	fc 01       	movw	r30, r24
     69c:	ee 0f       	add	r30, r30
     69e:	ff 1f       	adc	r31, r31
     6a0:	e8 0f       	add	r30, r24
     6a2:	f9 1f       	adc	r31, r25
     6a4:	ee 0f       	add	r30, r30
     6a6:	ff 1f       	adc	r31, r31
     6a8:	ee 0f       	add	r30, r30
     6aa:	ff 1f       	adc	r31, r31
     6ac:	e8 5e       	subi	r30, 0xE8	; 232
     6ae:	fe 4f       	sbci	r31, 0xFE	; 254
     6b0:	60 81       	ld	r22, Z
     6b2:	71 81       	ldd	r23, Z+1	; 0x01
     6b4:	82 81       	ldd	r24, Z+2	; 0x02
     6b6:	93 81       	ldd	r25, Z+3	; 0x03
     6b8:	64 36       	cpi	r22, 0x64	; 100
     6ba:	71 05       	cpc	r23, r1
     6bc:	81 05       	cpc	r24, r1
     6be:	91 05       	cpc	r25, r1
     6c0:	c0 f4       	brcc	.+48     	; 0x6f2 <RvalOut+0x5c>
     6c2:	20 91 1c 01 	lds	r18, 0x011C
     6c6:	30 91 1d 01 	lds	r19, 0x011D
     6ca:	40 91 1e 01 	lds	r20, 0x011E
     6ce:	50 91 1f 01 	lds	r21, 0x011F
     6d2:	21 15       	cp	r18, r1
     6d4:	31 05       	cpc	r19, r1
     6d6:	41 05       	cpc	r20, r1
     6d8:	51 05       	cpc	r21, r1
     6da:	59 f4       	brne	.+22     	; 0x6f2 <RvalOut+0x5c>
      rr = GetESR(resis[ii].ra,resis[ii].rb);
     6dc:	81 85       	ldd	r24, Z+9	; 0x09
     6de:	62 85       	ldd	r22, Z+10	; 0x0a
     6e0:	0e 94 24 1b 	call	0x3648	; 0x3648 <GetESR>
      DisplayValue(rr,-2,LCD_CHAR_OMEGA,3);
     6e4:	bc 01       	movw	r22, r24
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	4e ef       	ldi	r20, 0xFE	; 254
     6ec:	24 ef       	ldi	r18, 0xF4	; 244
     6ee:	03 e0       	ldi	r16, 0x03	; 3
     6f0:	03 c0       	rjmp	.+6      	; 0x6f8 <RvalOut+0x62>
   } else {
      DisplayValue(resis[ii].rx,-1,LCD_CHAR_OMEGA,4);
     6f2:	4f ef       	ldi	r20, 0xFF	; 255
     6f4:	24 ef       	ldi	r18, 0xF4	; 244
     6f6:	04 e0       	ldi	r16, 0x04	; 4
     6f8:	0e 94 95 02 	call	0x52a	; 0x52a <DisplayValue>
   }
#else
   DisplayValue(resis[ii].rx,-1,LCD_CHAR_OMEGA,4);
#endif
   lcd_space();
     6fc:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
 }
     700:	0f 91       	pop	r16
     702:	08 95       	ret

00000704 <mVAusgabe>:
   lcd_line2(); 				//2. row
   lcd_fix_string(Uf_str);			//"Uf="
   mVAusgabe(bcdnum >> 4);
   mVAusgabe(bcdnum & 0x0f);
}
void mVAusgabe(uint8_t nn) {
     704:	0f 93       	push	r16
   if (nn < 3) {
     706:	83 30       	cpi	r24, 0x03	; 3
     708:	98 f4       	brcc	.+38     	; 0x730 <mVAusgabe+0x2c>
      // Output in mV units
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
     70a:	e8 2f       	mov	r30, r24
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	ee 0f       	add	r30, r30
     710:	ff 1f       	adc	r31, r31
     712:	ee 0f       	add	r30, r30
     714:	ff 1f       	adc	r31, r31
     716:	e8 58       	subi	r30, 0x88	; 136
     718:	fe 4f       	sbci	r31, 0xFE	; 254
     71a:	62 81       	ldd	r22, Z+2	; 0x02
     71c:	73 81       	ldd	r23, Z+3	; 0x03
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	4d ef       	ldi	r20, 0xFD	; 253
     724:	26 e5       	ldi	r18, 0x56	; 86
     726:	03 e0       	ldi	r16, 0x03	; 3
     728:	0e 94 95 02 	call	0x52a	; 0x52a <DisplayValue>
      lcd_space();
     72c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
   }
}
     730:	0f 91       	pop	r16
     732:	08 95       	ret

00000734 <UfAusgabe>:
// output of flux voltage for 1-2 diodes in row 2
// bcdnum = Numbers of both Diodes:
// higher 4 Bit  number of first Diode
// lower 4 Bit  number of second Diode (Structure diodes[nn])
// if number >= 3  no output is done
void UfAusgabe(uint8_t bcdnum) {
     734:	1f 93       	push	r17
     736:	18 2f       	mov	r17, r24

   lcd_line2(); 				//2. row
     738:	80 ec       	ldi	r24, 0xC0	; 192
     73a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
   lcd_fix_string(Uf_str);			//"Uf="
     73e:	86 e1       	ldi	r24, 0x16	; 22
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
   mVAusgabe(bcdnum >> 4);
     746:	81 2f       	mov	r24, r17
     748:	82 95       	swap	r24
     74a:	8f 70       	andi	r24, 0x0F	; 15
     74c:	0e 94 82 03 	call	0x704	; 0x704 <mVAusgabe>
   mVAusgabe(bcdnum & 0x0f);
     750:	81 2f       	mov	r24, r17
     752:	8f 70       	andi	r24, 0x0F	; 15
     754:	0e 94 82 03 	call	0x704	; 0x704 <mVAusgabe>
}
     758:	1f 91       	pop	r17
     75a:	08 95       	ret

0000075c <sleep_5ms>:
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
      pause = 0;
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     75c:	42 e0       	ldi	r20, 0x02	; 2
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     75e:	1c c0       	rjmp	.+56     	; 0x798 <sleep_5ms+0x3c>
  {
 #if 3000 > RESTART_DELAY_US
   if (pause > 1)
     760:	82 30       	cpi	r24, 0x02	; 2
     762:	91 05       	cpc	r25, r1
     764:	18 f0       	brcs	.+6      	; 0x76c <sleep_5ms+0x10>
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
      pause -= 2;
     766:	02 97       	sbiw	r24, 0x02	; 2
  {
 #if 3000 > RESTART_DELAY_US
   if (pause > 1)
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
     768:	3e e3       	ldi	r19, 0x3E	; 62
     76a:	03 c0       	rjmp	.+6      	; 0x772 <sleep_5ms+0x16>
      pause -= 2;
     } else {
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
     76c:	37 e1       	ldi	r19, 0x17	; 23
      pause = 0;
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	90 e0       	ldi	r25, 0x00	; 0
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
     772:	20 91 b2 00 	lds	r18, 0x00B2
     776:	23 0f       	add	r18, r19
     778:	20 93 b3 00 	sts	0x00B3, r18
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     77c:	40 93 70 00 	sts	0x0070, r20
   set_sleep_mode(SLEEP_MODE_PWR_SAVE);
     780:	23 b7       	in	r18, 0x33	; 51
     782:	21 7f       	andi	r18, 0xF1	; 241
     784:	26 60       	ori	r18, 0x06	; 6
     786:	23 bf       	out	0x33, r18	; 51
//   set_sleep_mode(SLEEP_MODE_IDLE);
   sleep_mode();
     788:	23 b7       	in	r18, 0x33	; 51
     78a:	21 60       	ori	r18, 0x01	; 1
     78c:	23 bf       	out	0x33, r18	; 51
     78e:	88 95       	sleep
     790:	23 b7       	in	r18, 0x33	; 51
     792:	2e 7f       	andi	r18, 0xFE	; 254
     794:	23 bf       	out	0x33, r18	; 51
// wake up after output compare match interrupt
 #else
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
 #endif
   wdt_reset();
     796:	a8 95       	wdr
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     798:	00 97       	sbiw	r24, 0x00	; 0
     79a:	11 f7       	brne	.-60     	; 0x760 <sleep_5ms+0x4>
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
 #endif
   wdt_reset();
  }
TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
     79c:	10 92 70 00 	sts	0x0070, r1
}
     7a0:	08 95       	ret

000007a2 <ChargePin10ms>:
 }

//******************************************************************
#include "CheckPins.c"

void ChargePin10ms(uint8_t PinToCharge, uint8_t ChargeDirection) {
     7a2:	1f 93       	push	r17
     7a4:	18 2f       	mov	r17, r24
   //Will be used by discharge of MOSFET Gates or to load big capacities.
   //Parameters:
   //PinToCharge: specifies the pin as mask for R-Port
   //ChargeDirection: 0 = switch to GND (N-Kanal-FET), 1= switch to VCC(P-Kanal-FET)

   if(ChargeDirection&1) {
     7a6:	60 ff       	sbrs	r22, 0
     7a8:	03 c0       	rjmp	.+6      	; 0x7b0 <ChargePin10ms+0xe>
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
     7aa:	85 b1       	in	r24, 0x05	; 5
     7ac:	81 2b       	or	r24, r17
     7ae:	03 c0       	rjmp	.+6      	; 0x7b6 <ChargePin10ms+0x14>
   } else {
      R_PORT &= ~PinToCharge; // or 0 (GND)
     7b0:	95 b1       	in	r25, 0x05	; 5
     7b2:	80 95       	com	r24
     7b4:	89 23       	and	r24, r25
     7b6:	85 b9       	out	0x05, r24	; 5
   }
   R_DDR |= PinToCharge;		//switch Pin to output, across R to GND or VCC
     7b8:	84 b1       	in	r24, 0x04	; 4
     7ba:	81 2b       	or	r24, r17
     7bc:	84 b9       	out	0x04, r24	; 4
   wait_about10ms();			// wait about 10ms
     7be:	82 e0       	ldi	r24, 0x02	; 2
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>
   // switch back Input, no current
   R_DDR &= ~PinToCharge;	// switch back to input
     7c6:	84 b1       	in	r24, 0x04	; 4
     7c8:	10 95       	com	r17
     7ca:	81 23       	and	r24, r17
     7cc:	84 b9       	out	0x04, r24	; 4
   R_PORT &= ~PinToCharge;	// no Pull up
     7ce:	85 b1       	in	r24, 0x05	; 5
     7d0:	81 23       	and	r24, r17
     7d2:	85 b9       	out	0x05, r24	; 5
}
     7d4:	1f 91       	pop	r17
     7d6:	08 95       	ret

000007d8 <CheckPins>:
//******************************************************************
void CheckPins(uint8_t HighPin, uint8_t LowPin, uint8_t TristatePin)
  {
     7d8:	2f 92       	push	r2
     7da:	3f 92       	push	r3
     7dc:	4f 92       	push	r4
     7de:	5f 92       	push	r5
     7e0:	6f 92       	push	r6
     7e2:	7f 92       	push	r7
     7e4:	8f 92       	push	r8
     7e6:	9f 92       	push	r9
     7e8:	af 92       	push	r10
     7ea:	bf 92       	push	r11
     7ec:	cf 92       	push	r12
     7ee:	df 92       	push	r13
     7f0:	ef 92       	push	r14
     7f2:	ff 92       	push	r15
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	df 93       	push	r29
     7fa:	cf 93       	push	r28
     7fc:	cd b7       	in	r28, 0x3d	; 61
     7fe:	de b7       	in	r29, 0x3e	; 62
     800:	66 97       	sbiw	r28, 0x16	; 22
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	f8 94       	cli
     806:	de bf       	out	0x3e, r29	; 62
     808:	0f be       	out	0x3f, r0	; 63
     80a:	cd bf       	out	0x3d, r28	; 61
     80c:	18 2f       	mov	r17, r24
     80e:	36 2e       	mov	r3, r22
     810:	24 2e       	mov	r2, r20
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
     812:	a8 95       	wdr
//  #define RR680MI resis680mi
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = pgm_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
     814:	86 2f       	mov	r24, r22
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	fc 01       	movw	r30, r24
     81a:	e6 5f       	subi	r30, 0xF6	; 246
     81c:	fe 4f       	sbci	r31, 0xFE	; 254
     81e:	24 91       	lpm	r18, Z+
     820:	2b 83       	std	Y+3, r18	; 0x03
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
  TriPinRL = pgm_read_byte(&PinRLtab[TristatePin]);	// intruction for TristatePin R_L
     822:	e4 2f       	mov	r30, r20
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	e6 5f       	subi	r30, 0xF6	; 246
     828:	fe 4f       	sbci	r31, 0xFE	; 254
     82a:	d4 90       	lpm	r13, Z+
  TriPinRH = TriPinRL + TriPinRL;			// intruction for TristatePin R_H
     82c:	0d 2d       	mov	r16, r13
     82e:	00 0f       	add	r16, r16
  HiPinRL = pgm_read_byte(&PinRLtab[HighPin]);		// intruction for HighPin R_L
     830:	21 2f       	mov	r18, r17
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	f9 01       	movw	r30, r18
     836:	e6 5f       	subi	r30, 0xF6	; 246
     838:	fe 4f       	sbci	r31, 0xFE	; 254
     83a:	c4 90       	lpm	r12, Z+
  HiPinRH = HiPinRL + HiPinRL;				// intruction for HighPin R_H
     83c:	4c 2d       	mov	r20, r12
     83e:	44 0f       	add	r20, r20
     840:	48 87       	std	Y+8, r20	; 0x08

  HiADCp = pgm_read_byte(&PinADCtab[HighPin]);		// intruction for ADC High-Pin 
     842:	23 5f       	subi	r18, 0xF3	; 243
     844:	3e 4f       	sbci	r19, 0xFE	; 254
     846:	f9 01       	movw	r30, r18
     848:	f4 91       	lpm	r31, Z+
     84a:	f9 83       	std	Y+1, r31	; 0x01
  LoADCp = pgm_read_byte(&PinADCtab[LowPin]);		// intruction for ADC Low-Pin
     84c:	83 5f       	subi	r24, 0xF3	; 243
     84e:	9e 4f       	sbci	r25, 0xFE	; 254
     850:	fc 01       	movw	r30, r24
     852:	f4 91       	lpm	r31, Z+
  HiADCm = HiADCp | TXD_MSK;
     854:	29 81       	ldd	r18, Y+1	; 0x01
     856:	28 60       	ori	r18, 0x08	; 8
     858:	29 83       	std	Y+1, r18	; 0x01
  HiADCp |= TXD_VAL;
  LoADCm = LoADCp | TXD_MSK;
     85a:	f8 60       	ori	r31, 0x08	; 8
     85c:	fa 83       	std	Y+2, r31	; 0x02
  LoADCp |= TXD_VAL;

  //setting of Pins 
  R_PORT = 0;				//resistor-Port outputs to 0
     85e:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//Low-Pin to output and across R_L to GND
     860:	3b 81       	ldd	r19, Y+3	; 0x03
     862:	34 b9       	out	0x04, r19	; 4
  ADC_DDR = HiADCm;		//High-Pin to output
     864:	27 b9       	out	0x07, r18	; 7
  ADC_PORT = HiADCp;		//High-Pin fix to Vcc
     866:	28 b9       	out	0x08, r18	; 8
  //for some MOSFET the gate (TristatePin) must be discharged
  ChargePin10ms(TriPinRL,0);		//discharge for N-Kanal
     868:	8d 2d       	mov	r24, r13
     86a:	60 e0       	ldi	r22, 0x00	; 0
     86c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <ChargePin10ms>
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin 
     870:	83 2d       	mov	r24, r3
     872:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
     876:	9a 87       	std	Y+10, r25	; 0x0a
     878:	89 87       	std	Y+9, r24	; 0x09
  if(adc.lp_otr >= 977) {		//no current now? 
     87a:	43 e0       	ldi	r20, 0x03	; 3
     87c:	81 3d       	cpi	r24, 0xD1	; 209
     87e:	94 07       	cpc	r25, r20
     880:	48 f0       	brcs	.+18     	; 0x894 <CheckPins+0xbc>
     ChargePin10ms(TriPinRL,1);	 	//else: discharge for P-channel (Gate to VCC)
     882:	8d 2d       	mov	r24, r13
     884:	61 e0       	ldi	r22, 0x01	; 1
     886:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <ChargePin10ms>
     adc.lp_otr = ReadADC(LowPin);	//read voltage of Low-Pin again
     88a:	83 2d       	mov	r24, r3
     88c:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
     890:	9a 87       	std	Y+10, r25	; 0x0a
     892:	89 87       	std	Y+9, r24	; 0x09
  lcd_line2();
  lcd_clear_line();
  lcd_line2();
#endif

  if(adc.lp_otr > 92) {  //there is some current without TristatePin current 
     894:	89 85       	ldd	r24, Y+9	; 0x09
     896:	9a 85       	ldd	r25, Y+10	; 0x0a
     898:	8d 35       	cpi	r24, 0x5D	; 93
     89a:	91 05       	cpc	r25, r1
     89c:	08 f4       	brcc	.+2      	; 0x8a0 <CheckPins+0xc8>
     89e:	aa c0       	rjmp	.+340    	; 0x9f4 <CheckPins+0x21c>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test if N-JFET or if self-conducting N-MOSFET
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
     8a0:	8b 81       	ldd	r24, Y+3	; 0x03
     8a2:	80 2b       	or	r24, r16
     8a4:	84 b9       	out	0x04, r24	; 4
     adc.lp1 = W20msReadADC(LowPin);	//measure voltage at the assumed Source 
     8a6:	83 2d       	mov	r24, r3
     8a8:	0e 94 b2 1a 	call	0x3564	; 0x3564 <W20msReadADC>
     8ac:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     8ae:	82 2d       	mov	r24, r2
     8b0:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
     8b4:	7c 01       	movw	r14, r24
     R_PORT = TriPinRH;			//switch R_H for Tristate-Pin (probably Gate) to VCC
     8b6:	05 b9       	out	0x05, r16	; 5
     adc.lp2 = W20msReadADC(LowPin);	//measure voltage at the assumed Source again
     8b8:	83 2d       	mov	r24, r3
     8ba:	0e 94 b2 1a 	call	0x3564	; 0x3564 <W20msReadADC>
     //If it is a self-conducting MOSFET or JFET, then must be: adc.lp2 > adc.lp1 
     if(adc.lp2>(adc.lp1+488)) {
     8be:	95 01       	movw	r18, r10
     8c0:	28 51       	subi	r18, 0x18	; 24
     8c2:	3e 4f       	sbci	r19, 0xFE	; 254
     8c4:	28 17       	cp	r18, r24
     8c6:	39 07       	cpc	r19, r25
     8c8:	08 f0       	brcs	.+2      	; 0x8cc <CheckPins+0xf4>
     8ca:	40 c0       	rjmp	.+128    	; 0x94c <CheckPins+0x174>
        //measure voltage at the  Gate, differ between MOSFET and JFET
        ADC_PORT = TXD_VAL;
     8cc:	88 e0       	ldi	r24, 0x08	; 8
     8ce:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = LoADCm;	//Low-Pin fix to GND
     8d0:	9a 81       	ldd	r25, Y+2	; 0x02
     8d2:	97 b9       	out	0x07, r25	; 7
        R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     8d4:	80 2f       	mov	r24, r16
     8d6:	8c 29       	or	r24, r12
     8d8:	84 b9       	out	0x04, r24	; 4
        R_PORT = TriPinRH | HiPinRL;	//switch R_L for High-Pin to VCC
     8da:	85 b9       	out	0x05, r24	; 5
        adc.lp2 = W20msReadADC(TristatePin); //read voltage of assumed Gate 
     8dc:	82 2d       	mov	r24, r2
     8de:	0e 94 b2 1a 	call	0x3564	; 0x3564 <W20msReadADC>
        if(adc.lp2>3911) {  //MOSFET
     8e2:	af e0       	ldi	r26, 0x0F	; 15
     8e4:	88 34       	cpi	r24, 0x48	; 72
     8e6:	9a 07       	cpc	r25, r26
     8e8:	28 f0       	brcs	.+10     	; 0x8f4 <CheckPins+0x11c>
           PartFound = PART_FET;	//N-Kanal-MOSFET
     8ea:	83 e0       	ldi	r24, 0x03	; 3
     8ec:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_N_D_MOS; //Depletion-MOSFET
     8f0:	84 e0       	ldi	r24, 0x04	; 4
     8f2:	04 c0       	rjmp	.+8      	; 0x8fc <CheckPins+0x124>
        } else {  //JFET (pn-passage between Gate and Source is conducting )
           PartFound = PART_FET;	//N-Kanal-JFET
     8f4:	83 e0       	ldi	r24, 0x03	; 3
     8f6:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_N_JFET;
     8fa:	86 e0       	ldi	r24, 0x06	; 6
     8fc:	80 93 06 01 	sts	0x0106, r24
        }
//      if ((PartReady == 0) || (adc.lp1 > trans.uBE[0])) 
//      there is no way to find out the right Source / Drain
        trans.uBE[0] = adc.lp1;
     900:	b0 92 58 01 	sts	0x0158, r11
     904:	a0 92 57 01 	sts	0x0157, r10
        gthvoltage = adc.lp1 - adc.tp1;	//voltage GS (Source - Gate)
     908:	c5 01       	movw	r24, r10
     90a:	8e 19       	sub	r24, r14
     90c:	9f 09       	sbc	r25, r15
     90e:	90 93 60 01 	sts	0x0160, r25
     912:	80 93 5f 01 	sts	0x015F, r24
        trans.uBE[1] = (unsigned int)(((unsigned long)adc.lp1 * 1000) / RR680MI); // Id 0.01mA
     916:	b5 01       	movw	r22, r10
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	28 ee       	ldi	r18, 0xE8	; 232
     91e:	33 e0       	ldi	r19, 0x03	; 3
     920:	40 e0       	ldi	r20, 0x00	; 0
     922:	50 e0       	ldi	r21, 0x00	; 0
     924:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
     928:	20 91 02 01 	lds	r18, 0x0102
     92c:	30 91 03 01 	lds	r19, 0x0103
     930:	40 e0       	ldi	r20, 0x00	; 0
     932:	50 e0       	ldi	r21, 0x00	; 0
     934:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
     938:	30 93 5a 01 	sts	0x015A, r19
     93c:	20 93 59 01 	sts	0x0159, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     940:	20 92 5b 01 	sts	0x015B, r2
        trans.c = HighPin;
     944:	10 93 5c 01 	sts	0x015C, r17
        trans.e = LowPin;
     948:	30 92 5d 01 	sts	0x015D, r3
     }

     ADC_PORT = TXD_VAL;		// direct outputs to GND
     94c:	88 e0       	ldi	r24, 0x08	; 8
     94e:	88 b9       	out	0x08, r24	; 8

     //Test, if P-JFET or if self-conducting P-MOSFET
     ADC_DDR = LoADCm;		//switch Low-Pin (assumed Drain) direct to GND,
     950:	ba 81       	ldd	r27, Y+2	; 0x02
     952:	b7 b9       	out	0x07, r27	; 7
				//R_H for Tristate-Pin (assumed Gate) is already switched to VCC
     R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     954:	80 2f       	mov	r24, r16
     956:	8c 29       	or	r24, r12
     958:	84 b9       	out	0x04, r24	; 4
     R_PORT = TriPinRH | HiPinRL;	//High-Pin across R_L to Vcc
     95a:	85 b9       	out	0x05, r24	; 5
     adc.hp1 = W20msReadADC(HighPin);	//measure voltage at assumed Source 
     95c:	81 2f       	mov	r24, r17
     95e:	0e 94 b2 1a 	call	0x3564	; 0x3564 <W20msReadADC>
     962:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     964:	82 2d       	mov	r24, r2
     966:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
     96a:	7c 01       	movw	r14, r24
     R_PORT = HiPinRL;			//switch R_H for Tristate-Pin (assumed Gate) to GND
     96c:	c5 b8       	out	0x05, r12	; 5
     adc.hp2 = W20msReadADC(HighPin);	//read voltage at assumed Source again
     96e:	81 2f       	mov	r24, r17
     970:	0e 94 b2 1a 	call	0x3564	; 0x3564 <W20msReadADC>
     //if it is a self-conducting P_MOSFET or P-JFET , then must be:  adc.hp1 > adc.hp2 
     if(adc.hp1>(adc.hp2+488)) {
     974:	88 51       	subi	r24, 0x18	; 24
     976:	9e 4f       	sbci	r25, 0xFE	; 254
     978:	8a 15       	cp	r24, r10
     97a:	9b 05       	cpc	r25, r11
     97c:	d8 f5       	brcc	.+118    	; 0x9f4 <CheckPins+0x21c>
        //read voltage at the Gate , to differ between MOSFET and JFET
        ADC_PORT = HiADCp;	//switch High-Pin directly to VCC
     97e:	e9 81       	ldd	r30, Y+1	; 0x01
     980:	e8 b9       	out	0x08, r30	; 8
        ADC_DDR = HiADCm;	//switch High-Pin to output
     982:	e7 b9       	out	0x07, r30	; 7
        adc.tp2 = W20msReadADC(TristatePin); //read voltage at the assumed Gate 
     984:	82 2d       	mov	r24, r2
     986:	0e 94 b2 1a 	call	0x3564	; 0x3564 <W20msReadADC>
        if(adc.tp2<977) { 		//MOSFET
     98a:	f3 e0       	ldi	r31, 0x03	; 3
     98c:	81 3d       	cpi	r24, 0xD1	; 209
     98e:	9f 07       	cpc	r25, r31
     990:	28 f4       	brcc	.+10     	; 0x99c <CheckPins+0x1c4>
           PartFound = PART_FET;	//P-Kanal-MOSFET
     992:	83 e0       	ldi	r24, 0x03	; 3
     994:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_D_MOS; //Depletion-MOSFET
     998:	85 e0       	ldi	r24, 0x05	; 5
     99a:	04 c0       	rjmp	.+8      	; 0x9a4 <CheckPins+0x1cc>
        } else { 			//JFET (pn-passage between Gate and Source is conducting)
           PartFound = PART_FET;	//P-Kanal-JFET
     99c:	83 e0       	ldi	r24, 0x03	; 3
     99e:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_JFET;
     9a2:	87 e0       	ldi	r24, 0x07	; 7
     9a4:	80 93 06 01 	sts	0x0106, r24
        }
        gthvoltage = adc.tp1 - adc.hp1;		//voltage GS (Gate - Source)
     9a8:	ea 18       	sub	r14, r10
     9aa:	fb 08       	sbc	r15, r11
     9ac:	f0 92 60 01 	sts	0x0160, r15
     9b0:	e0 92 5f 01 	sts	0x015F, r14
        trans.uBE[1] = (unsigned int)(((unsigned long)(ADCconfig.U_AVCC - adc.hp1) * 1000) / RR680PL); // Id 0.01mA
     9b4:	60 91 40 01 	lds	r22, 0x0140
     9b8:	70 91 41 01 	lds	r23, 0x0141
     9bc:	6a 19       	sub	r22, r10
     9be:	7b 09       	sbc	r23, r11
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	28 ee       	ldi	r18, 0xE8	; 232
     9c6:	33 e0       	ldi	r19, 0x03	; 3
     9c8:	40 e0       	ldi	r20, 0x00	; 0
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
     9d0:	20 91 08 01 	lds	r18, 0x0108
     9d4:	30 91 09 01 	lds	r19, 0x0109
     9d8:	40 e0       	ldi	r20, 0x00	; 0
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
     9e0:	30 93 5a 01 	sts	0x015A, r19
     9e4:	20 93 59 01 	sts	0x0159, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     9e8:	20 92 5b 01 	sts	0x015B, r2
        trans.c = LowPin;
     9ec:	30 92 5c 01 	sts	0x015C, r3
        trans.e = HighPin;
     9f0:	10 93 5d 01 	sts	0x015D, r17
  } // end component has current without TristatePin signal


#ifdef COMMON_COLLECTOR
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
     9f4:	88 e0       	ldi	r24, 0x08	; 8
     9f6:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;			// Collector direct to GND
     9f8:	2a 81       	ldd	r18, Y+2	; 0x02
     9fa:	27 b9       	out	0x07, r18	; 7
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
     9fc:	c5 b8       	out	0x05, r12	; 5
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
     9fe:	3c 2d       	mov	r19, r12
     a00:	3d 29       	or	r19, r13
     a02:	3b 87       	std	Y+11, r19	; 0x0b
     a04:	34 b9       	out	0x04, r19	; 4
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     a06:	a0 90 40 01 	lds	r10, 0x0140
     a0a:	b0 90 41 01 	lds	r11, 0x0141
     a0e:	81 2f       	mov	r24, r17
     a10:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
     a14:	7c 01       	movw	r14, r24
  adc.tp1 = ReadADC(TristatePin);	// voltage at the base resistor
     a16:	82 2d       	mov	r24, r2
     a18:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
     a1c:	4c 01       	movw	r8, r24

  if (adc.tp1 < 10) {
     a1e:	8a 30       	cpi	r24, 0x0A	; 10
     a20:	91 05       	cpc	r25, r1
     a22:	68 f5       	brcc	.+90     	; 0xa7e <CheckPins+0x2a6>
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
     a24:	80 2f       	mov	r24, r16
     a26:	8c 29       	or	r24, r12
     a28:	84 b9       	out	0x04, r24	; 4
     adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);
     a2a:	a0 90 40 01 	lds	r10, 0x0140
     a2e:	b0 90 41 01 	lds	r11, 0x0141
     a32:	81 2f       	mov	r24, r17
     a34:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
     a38:	a8 1a       	sub	r10, r24
     a3a:	b9 0a       	sbc	r11, r25
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
     a3c:	82 2d       	mov	r24, r2
     a3e:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
     a42:	4c 01       	movw	r8, r24
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     a44:	25 01       	movw	r4, r10
     a46:	66 24       	eor	r6, r6
     a48:	77 24       	eor	r7, r7
     a4a:	20 91 08 01 	lds	r18, 0x0108
     a4e:	30 91 09 01 	lds	r19, 0x0109
     a52:	40 e0       	ldi	r20, 0x00	; 0
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	60 e6       	ldi	r22, 0x60	; 96
     a58:	77 eb       	ldi	r23, 0xB7	; 183
     a5a:	87 e4       	ldi	r24, 0x47	; 71
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
     a62:	c3 01       	movw	r24, r6
     a64:	b2 01       	movw	r22, r4
     a66:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
     a6a:	94 01       	movw	r18, r8
     a6c:	40 e0       	ldi	r20, 0x00	; 0
     a6e:	50 e0       	ldi	r21, 0x00	; 0
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     a70:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
     a74:	2c 83       	std	Y+4, r18	; 0x04
     a76:	3d 83       	std	Y+5, r19	; 0x05
     a78:	4e 83       	std	Y+6, r20	; 0x06
     a7a:	5f 83       	std	Y+7, r21	; 0x07
     a7c:	0f c0       	rjmp	.+30     	; 0xa9c <CheckPins+0x2c4>
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
  ADC_DDR = LoADCm;			// Collector direct to GND
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     a7e:	ae 18       	sub	r10, r14
     a80:	bf 08       	sbc	r11, r15
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
 #else
     c_hfe = ((adc.hp1 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
  } else {
     c_hfe = (unsigned long)((adc.hp1 - adc.tp1) / adc.tp1);
     a82:	c5 01       	movw	r24, r10
     a84:	88 19       	sub	r24, r8
     a86:	99 09       	sbc	r25, r9
     a88:	b4 01       	movw	r22, r8
     a8a:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <__udivmodhi4>
     a8e:	cb 01       	movw	r24, r22
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	8c 83       	std	Y+4, r24	; 0x04
     a96:	9d 83       	std	Y+5, r25	; 0x05
     a98:	ae 83       	std	Y+6, r26	; 0x06
     a9a:	bf 83       	std	Y+7, r27	; 0x07
  }
#endif

  //set Pins again for circuit with common Emitter PNP
  R_DDR = LoPinRL;		//switch R_L port for Low-Pin to output (GND)
     a9c:	9b 81       	ldd	r25, Y+3	; 0x03
     a9e:	94 b9       	out	0x04, r25	; 4
  R_PORT = 0;			//switch all resistor ports to GND
     aa0:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = HiADCm;		//switch High-Pin to output
     aa2:	a9 81       	ldd	r26, Y+1	; 0x01
     aa4:	a7 b9       	out	0x07, r26	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
     aa6:	a8 b9       	out	0x08, r26	; 8
  wait_about5ms();
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>
  
  if(adc.lp_otr < 977) {
     ab0:	e9 85       	ldd	r30, Y+9	; 0x09
     ab2:	fa 85       	ldd	r31, Y+10	; 0x0a
     ab4:	23 e0       	ldi	r18, 0x03	; 3
     ab6:	e1 3d       	cpi	r30, 0xD1	; 209
     ab8:	f2 07       	cpc	r31, r18
     aba:	08 f0       	brcs	.+2      	; 0xabe <CheckPins+0x2e6>
     abc:	ab c2       	rjmp	.+1366   	; 0x1014 <CheckPins+0x83c>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test to PNP
     R_DDR = LoPinRL | TriPinRL;	//switch R_L port for Tristate-Pin to output (GND), for Test of PNP
     abe:	3b 81       	ldd	r19, Y+3	; 0x03
     ac0:	3d 29       	or	r19, r13
     ac2:	3f 87       	std	Y+15, r19	; 0x0f
     ac4:	34 b9       	out	0x04, r19	; 4
     adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin
     ac6:	83 2d       	mov	r24, r3
     ac8:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
     if(adc.lp1 > 3422) {
     acc:	4d e0       	ldi	r20, 0x0D	; 13
     ace:	8f 35       	cpi	r24, 0x5F	; 95
     ad0:	94 07       	cpc	r25, r20
     ad2:	08 f4       	brcc	.+2      	; 0xad6 <CheckPins+0x2fe>
     ad4:	e1 c0       	rjmp	.+450    	; 0xc98 <CheckPins+0x4c0>
        //component has current => PNP-Transistor or equivalent
        //compute current amplification factor in both directions
        R_DDR = LoPinRL | TriPinRH;	//switch R_H port for Tristate-Pin (Base) to output (GND)
     ad6:	8b 81       	ldd	r24, Y+3	; 0x03
     ad8:	80 2b       	or	r24, r16
     ada:	88 8b       	std	Y+16, r24	; 0x10
     adc:	84 b9       	out	0x04, r24	; 4

        adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin (assumed Collector)
     ade:	83 2d       	mov	r24, r3
     ae0:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
     ae4:	9a 8b       	std	Y+18, r25	; 0x12
     ae6:	89 8b       	std	Y+17, r24	; 0x11
        adc.tp2 = ReadADC(TristatePin);	//measure voltage at TristatePin (Base) 
     ae8:	82 2d       	mov	r24, r2
     aea:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
     aee:	9d 8b       	std	Y+21, r25	; 0x15
     af0:	8c 8b       	std	Y+20, r24	; 0x14
        //check, if Test is done before 
        if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     af2:	80 91 07 01 	lds	r24, 0x0107
     af6:	82 50       	subi	r24, 0x02	; 2
     af8:	82 30       	cpi	r24, 0x02	; 2
     afa:	18 f4       	brcc	.+6      	; 0xb02 <CheckPins+0x32a>
           PartReady = 1;
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	80 93 04 01 	sts	0x0104, r24
        }
        trans.uBE[PartReady] = ReadADC(HighPin) - adc.tp2;	// Base Emitter Voltage
     b02:	e0 90 04 01 	lds	r14, 0x0104
     b06:	ff 24       	eor	r15, r15
     b08:	81 2f       	mov	r24, r17
     b0a:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
     b0e:	f7 01       	movw	r30, r14
     b10:	ee 0f       	add	r30, r30
     b12:	ff 1f       	adc	r31, r31
     b14:	e9 5a       	subi	r30, 0xA9	; 169
     b16:	fe 4f       	sbci	r31, 0xFE	; 254
     b18:	ac 89       	ldd	r26, Y+20	; 0x14
     b1a:	bd 89       	ldd	r27, Y+21	; 0x15
     b1c:	8a 1b       	sub	r24, r26
     b1e:	9b 0b       	sbc	r25, r27
     b20:	91 83       	std	Z+1, r25	; 0x01
     b22:	80 83       	st	Z, r24

        //compute current amplification factor for circuit with common Emitter
        //hFE = B = Collector current / Base current
        if(adc.tp2 < 53) {
     b24:	a5 33       	cpi	r26, 0x35	; 53
     b26:	b1 05       	cpc	r27, r1
     b28:	20 f4       	brcc	.+8      	; 0xb32 <CheckPins+0x35a>
#if DebugOut == 5
           lcd_data('<');
           lcd_data('5');
           lcd_data('3');
#endif
           adc.tp2 = 53;
     b2a:	e5 e3       	ldi	r30, 0x35	; 53
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	fd 8b       	std	Y+21, r31	; 0x15
     b30:	ec 8b       	std	Y+20, r30	; 0x14
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     b32:	e0 90 04 01 	lds	r14, 0x0104
     b36:	ff 24       	eor	r15, r15
     b38:	29 89       	ldd	r18, Y+17	; 0x11
     b3a:	3a 89       	ldd	r19, Y+18	; 0x12
     b3c:	29 01       	movw	r4, r18
     b3e:	66 24       	eor	r6, r6
     b40:	77 24       	eor	r7, r7
     b42:	20 91 02 01 	lds	r18, 0x0102
     b46:	30 91 03 01 	lds	r19, 0x0103
     b4a:	40 e0       	ldi	r20, 0x00	; 0
     b4c:	50 e0       	ldi	r21, 0x00	; 0
     b4e:	60 e6       	ldi	r22, 0x60	; 96
     b50:	77 eb       	ldi	r23, 0xB7	; 183
     b52:	87 e4       	ldi	r24, 0x47	; 71
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
     b5a:	c3 01       	movw	r24, r6
     b5c:	b2 01       	movw	r22, r4
     b5e:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
                 (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
     b62:	ac 89       	ldd	r26, Y+20	; 0x14
     b64:	bd 89       	ldd	r27, Y+21	; 0x15
     b66:	9d 01       	movw	r18, r26
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
#endif
           adc.tp2 = 53;
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     b70:	f7 01       	movw	r30, r14
     b72:	ee 0f       	add	r30, r30
     b74:	ff 1f       	adc	r31, r31
     b76:	ee 0f       	add	r30, r30
     b78:	ff 1f       	adc	r31, r31
     b7a:	e1 5b       	subi	r30, 0xB1	; 177
     b7c:	fe 4f       	sbci	r31, 0xFE	; 254
     b7e:	20 83       	st	Z, r18
     b80:	31 83       	std	Z+1, r19	; 0x01
     b82:	42 83       	std	Z+2, r20	; 0x02
     b84:	53 83       	std	Z+3, r21	; 0x03
        trans.hfe[PartReady] = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
#ifdef COMMON_COLLECTOR
        //current amplification factor for common  Collector (Emitter follower)
        // c_hFE = (Emitter current - Base current) / Base current
        if (c_hfe > trans.hfe[PartReady]) {
     b86:	8c 81       	ldd	r24, Y+4	; 0x04
     b88:	9d 81       	ldd	r25, Y+5	; 0x05
     b8a:	ae 81       	ldd	r26, Y+6	; 0x06
     b8c:	bf 81       	ldd	r27, Y+7	; 0x07
     b8e:	28 17       	cp	r18, r24
     b90:	39 07       	cpc	r19, r25
     b92:	4a 07       	cpc	r20, r26
     b94:	5b 07       	cpc	r21, r27
     b96:	98 f4       	brcc	.+38     	; 0xbbe <CheckPins+0x3e6>
           trans.hfe[PartReady] = c_hfe;
     b98:	80 83       	st	Z, r24
     b9a:	91 83       	std	Z+1, r25	; 0x01
     b9c:	a2 83       	std	Z+2, r26	; 0x02
     b9e:	b3 83       	std	Z+3, r27	; 0x03
           trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.hp1 - adc.tp1;	// Base Emitter Voltage common collector
     ba0:	f7 01       	movw	r30, r14
     ba2:	ee 0f       	add	r30, r30
     ba4:	ff 1f       	adc	r31, r31
     ba6:	e9 5a       	subi	r30, 0xA9	; 169
     ba8:	fe 4f       	sbci	r31, 0xFE	; 254
     baa:	80 91 40 01 	lds	r24, 0x0140
     bae:	90 91 41 01 	lds	r25, 0x0141
     bb2:	8a 19       	sub	r24, r10
     bb4:	9b 09       	sbc	r25, r11
     bb6:	88 19       	sub	r24, r8
     bb8:	99 09       	sbc	r25, r9
     bba:	91 83       	std	Z+1, r25	; 0x01
     bbc:	80 83       	st	Z, r24
        }
#endif

 
        if(PartFound != PART_THYRISTOR) {
     bbe:	80 91 07 01 	lds	r24, 0x0107
     bc2:	85 30       	cpi	r24, 0x05	; 5
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <CheckPins+0x3f0>
     bc6:	68 c0       	rjmp	.+208    	; 0xc98 <CheckPins+0x4c0>
           if(adc.tp2 > 977) {
     bc8:	ac 89       	ldd	r26, Y+20	; 0x14
     bca:	bd 89       	ldd	r27, Y+21	; 0x15
     bcc:	e3 e0       	ldi	r30, 0x03	; 3
     bce:	a2 3d       	cpi	r26, 0xD2	; 210
     bd0:	be 07       	cpc	r27, r30
     bd2:	30 f0       	brcs	.+12     	; 0xbe0 <CheckPins+0x408>
              //PNP-Transistor is found (Base voltage moves to VCC)
              PartFound = PART_TRANSISTOR;
     bd4:	82 e0       	ldi	r24, 0x02	; 2
     bd6:	80 93 07 01 	sts	0x0107, r24
              PartMode = PART_MODE_PNP;
     bda:	80 93 06 01 	sts	0x0106, r24
     bde:	56 c0       	rjmp	.+172    	; 0xc8c <CheckPins+0x4b4>
           } else {
              if((adc.lp_otr < 97) && (adc.lp1 > 2000)) {
     be0:	29 85       	ldd	r18, Y+9	; 0x09
     be2:	3a 85       	ldd	r19, Y+10	; 0x0a
     be4:	21 36       	cpi	r18, 0x61	; 97
     be6:	31 05       	cpc	r19, r1
     be8:	08 f0       	brcs	.+2      	; 0xbec <CheckPins+0x414>
     bea:	50 c0       	rjmp	.+160    	; 0xc8c <CheckPins+0x4b4>
     bec:	89 89       	ldd	r24, Y+17	; 0x11
     bee:	9a 89       	ldd	r25, Y+18	; 0x12
     bf0:	a7 e0       	ldi	r26, 0x07	; 7
     bf2:	81 3d       	cpi	r24, 0xD1	; 209
     bf4:	9a 07       	cpc	r25, r26
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <CheckPins+0x422>
     bf8:	49 c0       	rjmp	.+146    	; 0xc8c <CheckPins+0x4b4>
                 //is flow voltage low enough in the closed  state?
                 //(since D-Mode-FET would be by mistake detected as E-Mode )
        	 PartFound = PART_FET;		//P-Kanal-MOSFET is found (Basis/Gate moves not to VCC)
     bfa:	83 e0       	ldi	r24, 0x03	; 3
     bfc:	80 93 07 01 	sts	0x0107, r24
        	 PartMode = PART_MODE_P_E_MOS;
     c00:	80 93 06 01 	sts	0x0106, r24
        	 //measure the Gate threshold voltage
                 //Switching of Drain is monitored with digital input
                 // Low level is specified up to 0.3 * VCC
                 // High level is specified above 0.6 * VCC
                 PinMSK = LoADCm & 7;
     c04:	ea 80       	ldd	r14, Y+2	; 0x02
     c06:	b7 e0       	ldi	r27, 0x07	; 7
     c08:	eb 22       	and	r14, r27
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
     c0a:	82 2d       	mov	r24, r2
     c0c:	80 64       	ori	r24, 0x40	; 64
     c0e:	80 93 7c 00 	sts	0x007C, r24
        	 gthvoltage = 1;			// round up ((1*4)/9)
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	90 93 60 01 	sts	0x0160, r25
     c1a:	80 93 5f 01 	sts	0x015F, r24
        	 for(ii=0;ii<11;ii++) {
     c1e:	40 e0       	ldi	r20, 0x00	; 0
        	    wdt_reset();
     c20:	a8 95       	wdr
        	    ChargePin10ms(TriPinRL,1);
     c22:	8d 2d       	mov	r24, r13
     c24:	61 e0       	ldi	r22, 0x01	; 1
     c26:	4e 8b       	std	Y+22, r20	; 0x16
     c28:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <ChargePin10ms>
                    R_DDR = LoPinRL | TriPinRH;		//switch R_H for Tristate-Pin (Basis) to GND
     c2c:	e8 89       	ldd	r30, Y+16	; 0x10
     c2e:	e4 b9       	out	0x04, r30	; 4
     c30:	4e 89       	ldd	r20, Y+22	; 0x16
        	    while (!(ADC_PIN&PinMSK));		// Wait, until the MOSFET switches and Drain moves to VCC
     c32:	86 b1       	in	r24, 0x06	; 6
     c34:	8e 21       	and	r24, r14
     c36:	e9 f3       	breq	.-6      	; 0xc32 <CheckPins+0x45a>
                    			// 1 is detected with more than 2.5V (up to 2.57V) with tests of mega168 and mega328
        	    R_DDR = LoPinRL;
     c38:	fb 81       	ldd	r31, Y+3	; 0x03
     c3a:	f4 b9       	out	0x04, r31	; 4
        	    ADCSRA |= (1<<ADSC);		// Start Conversion
     c3c:	80 91 7a 00 	lds	r24, 0x007A
     c40:	80 64       	ori	r24, 0x40	; 64
     c42:	80 93 7a 00 	sts	0x007A, r24
        	    while (ADCSRA&(1<<ADSC));		// wait
     c46:	80 91 7a 00 	lds	r24, 0x007A
     c4a:	86 fd       	sbrc	r24, 6
     c4c:	fc cf       	rjmp	.-8      	; 0xc46 <CheckPins+0x46e>
      		    gthvoltage += (1023 - ADCW);	// Add Tristatepin-Voltage
     c4e:	20 91 78 00 	lds	r18, 0x0078
     c52:	30 91 79 00 	lds	r19, 0x0079
     c56:	80 91 5f 01 	lds	r24, 0x015F
     c5a:	90 91 60 01 	lds	r25, 0x0160
     c5e:	81 50       	subi	r24, 0x01	; 1
     c60:	9c 4f       	sbci	r25, 0xFC	; 252
     c62:	82 1b       	sub	r24, r18
     c64:	93 0b       	sbc	r25, r19
     c66:	90 93 60 01 	sts	0x0160, r25
     c6a:	80 93 5f 01 	sts	0x015F, r24
                 // Low level is specified up to 0.3 * VCC
                 // High level is specified above 0.6 * VCC
                 PinMSK = LoADCm & 7;
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
        	 gthvoltage = 1;			// round up ((1*4)/9)
        	 for(ii=0;ii<11;ii++) {
     c6e:	4f 5f       	subi	r20, 0xFF	; 255
     c70:	4b 30       	cpi	r20, 0x0B	; 11
     c72:	b1 f6       	brne	.-84     	; 0xc20 <CheckPins+0x448>
        	    R_DDR = LoPinRL;
        	    ADCSRA |= (1<<ADSC);		// Start Conversion
        	    while (ADCSRA&(1<<ADSC));		// wait
      		    gthvoltage += (1023 - ADCW);	// Add Tristatepin-Voltage
                 }
                 gthvoltage *= 4;		// is equal to 44*ADCW
     c74:	88 0f       	add	r24, r24
     c76:	99 1f       	adc	r25, r25
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
                 gthvoltage /= 9;		// gives resolution in mV
     c7c:	69 e0       	ldi	r22, 0x09	; 9
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <__udivmodhi4>
     c84:	70 93 60 01 	sts	0x0160, r23
     c88:	60 93 5f 01 	sts	0x015F, r22
              }
           }
           trans.b = TristatePin;
     c8c:	20 92 5b 01 	sts	0x015B, r2
           trans.c = LowPin;
     c90:	30 92 5c 01 	sts	0x015C, r3
           trans.e = HighPin;
     c94:	10 93 5d 01 	sts	0x015D, r17
        }  // end if PartFound != PART_THYRISTOR
    } // end component has current => PNP

#ifdef COMMON_COLLECTOR
    // Low-Pin=RL- HighPin=VCC
    R_DDR = LoPinRL | TriPinRL;
     c98:	2f 85       	ldd	r18, Y+15	; 0x0f
     c9a:	24 b9       	out	0x04, r18	; 4
    R_PORT = TriPinRL;			// TriPin=RL+  NPN with common Collector
     c9c:	d5 b8       	out	0x05, r13	; 5
    adc.lp1 = W5msReadADC(LowPin);	// voltage at Emitter resistor
     c9e:	83 2d       	mov	r24, r3
     ca0:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
     ca4:	2c 01       	movw	r4, r24
    adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     ca6:	80 91 40 01 	lds	r24, 0x0140
     caa:	90 91 41 01 	lds	r25, 0x0141
     cae:	9a 8b       	std	Y+18, r25	; 0x12
     cb0:	89 8b       	std	Y+17, r24	; 0x11
     cb2:	82 2d       	mov	r24, r2
     cb4:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
     cb8:	a9 89       	ldd	r26, Y+17	; 0x11
     cba:	ba 89       	ldd	r27, Y+18	; 0x12
     cbc:	a8 1b       	sub	r26, r24
     cbe:	b9 0b       	sbc	r27, r25
     cc0:	ba 8b       	std	Y+18, r27	; 0x12
     cc2:	a9 8b       	std	Y+17, r26	; 0x11
    if (adc.tp1 < 10) {
     cc4:	aa 30       	cpi	r26, 0x0A	; 10
     cc6:	b1 05       	cpc	r27, r1
     cc8:	b0 f5       	brcc	.+108    	; 0xd36 <CheckPins+0x55e>
       R_DDR = LoPinRL | TriPinRH;
     cca:	8b 81       	ldd	r24, Y+3	; 0x03
     ccc:	80 2b       	or	r24, r16
     cce:	84 b9       	out	0x04, r24	; 4
       R_PORT = TriPinRH;		// Tripin=RH+
     cd0:	05 b9       	out	0x05, r16	; 5
       adc.lp1 = W5msReadADC(LowPin);
     cd2:	83 2d       	mov	r24, r3
     cd4:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
     cd8:	2c 01       	movw	r4, r24
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     cda:	e0 91 40 01 	lds	r30, 0x0140
     cde:	f0 91 41 01 	lds	r31, 0x0141
     ce2:	fa 8b       	std	Y+18, r31	; 0x12
     ce4:	e9 8b       	std	Y+17, r30	; 0x11
     ce6:	82 2d       	mov	r24, r2
     ce8:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
     cec:	29 89       	ldd	r18, Y+17	; 0x11
     cee:	3a 89       	ldd	r19, Y+18	; 0x12
     cf0:	28 1b       	sub	r18, r24
     cf2:	39 0b       	sbc	r19, r25
     cf4:	3a 8b       	std	Y+18, r19	; 0x12
     cf6:	29 8b       	std	Y+17, r18	; 0x11
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     cf8:	42 01       	movw	r8, r4
     cfa:	aa 24       	eor	r10, r10
     cfc:	bb 24       	eor	r11, r11
     cfe:	20 91 02 01 	lds	r18, 0x0102
     d02:	30 91 03 01 	lds	r19, 0x0103
     d06:	40 e0       	ldi	r20, 0x00	; 0
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	60 e6       	ldi	r22, 0x60	; 96
     d0c:	77 eb       	ldi	r23, 0xB7	; 183
     d0e:	87 e4       	ldi	r24, 0x47	; 71
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
     d16:	c5 01       	movw	r24, r10
     d18:	b4 01       	movw	r22, r8
     d1a:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
     d1e:	a9 89       	ldd	r26, Y+17	; 0x11
     d20:	ba 89       	ldd	r27, Y+18	; 0x12
     d22:	9d 01       	movw	r18, r26
     d24:	40 e0       	ldi	r20, 0x00	; 0
     d26:	50 e0       	ldi	r21, 0x00	; 0
       R_DDR = LoPinRL | TriPinRH;
       R_PORT = TriPinRH;		// Tripin=RH+
       adc.lp1 = W5msReadADC(LowPin);
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     d28:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
     d2c:	2c 83       	std	Y+4, r18	; 0x04
     d2e:	3d 83       	std	Y+5, r19	; 0x05
     d30:	4e 83       	std	Y+6, r20	; 0x06
     d32:	5f 83       	std	Y+7, r21	; 0x07
     d34:	0f c0       	rjmp	.+30     	; 0xd54 <CheckPins+0x57c>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
 #else
       c_hfe = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
    } else {
       c_hfe = (adc.lp1 - adc.tp1) / adc.tp1;
     d36:	c2 01       	movw	r24, r4
     d38:	e9 89       	ldd	r30, Y+17	; 0x11
     d3a:	fa 89       	ldd	r31, Y+18	; 0x12
     d3c:	8e 1b       	sub	r24, r30
     d3e:	9f 0b       	sbc	r25, r31
     d40:	bf 01       	movw	r22, r30
     d42:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <__udivmodhi4>
     d46:	cb 01       	movw	r24, r22
     d48:	a0 e0       	ldi	r26, 0x00	; 0
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	8c 83       	std	Y+4, r24	; 0x04
     d4e:	9d 83       	std	Y+5, r25	; 0x05
     d50:	ae 83       	std	Y+6, r26	; 0x06
     d52:	bf 83       	std	Y+7, r27	; 0x07
       lcd_string(utoa(adc.tp1,outval,10));
       wait_about1s();
#endif
#endif
    //Tristate (can be Base) to VCC, Test if NPN
    ADC_DDR = LoADCm;		//Low-Pin to output 0V
     d54:	9a 81       	ldd	r25, Y+2	; 0x02
     d56:	97 b9       	out	0x07, r25	; 7
    ADC_PORT = TXD_VAL;			//switch Low-Pin to GND
     d58:	88 e0       	ldi	r24, 0x08	; 8
     d5a:	88 b9       	out	0x08, r24	; 8
    R_DDR = TriPinRL | HiPinRL;		//RL port for High-Pin and Tristate-Pin to output
     d5c:	ab 85       	ldd	r26, Y+11	; 0x0b
     d5e:	a4 b9       	out	0x04, r26	; 4
    R_PORT = TriPinRL | HiPinRL;	//RL port for High-Pin and Tristate-Pin to Vcc
     d60:	a5 b9       	out	0x05, r26	; 5
    adc.hp1 = W5msReadADC(HighPin);	//measure voltage at High-Pin  (Collector)
     d62:	81 2f       	mov	r24, r17
     d64:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
    if(adc.hp1 < 1600) {
     d68:	b6 e0       	ldi	r27, 0x06	; 6
     d6a:	80 34       	cpi	r24, 0x40	; 64
     d6c:	9b 07       	cpc	r25, r27
     d6e:	08 f0       	brcs	.+2      	; 0xd72 <CheckPins+0x59a>
     d70:	4d c1       	rjmp	.+666    	; 0x100c <CheckPins+0x834>
       lcd_data('N');
       lcd_testpin(HighPin);
       lcd_space();
       wait_about1s();
#endif
       if(PartReady==1) {
     d72:	80 91 04 01 	lds	r24, 0x0104
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	09 f4       	brne	.+2      	; 0xd7c <CheckPins+0x5a4>
     d7a:	b5 c1       	rjmp	.+874    	; 0x10e6 <CheckPins+0x90e>
          goto widmes;
       }

       //Test auf Thyristor:
       //Gate discharge
       ChargePin10ms(TriPinRL,0);	//Tristate-Pin (Gate) across R_L 10ms to GND
     d7c:	8d 2d       	mov	r24, r13
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <ChargePin10ms>
       adc.hp3 = W5msReadADC(HighPin);	//read voltage at High-Pin (probably Anode) again
     d84:	81 2f       	mov	r24, r17
     d86:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
     d8a:	7c 01       	movw	r14, r24
					//current should still flow, if not,
					// no Thyristor or holding current to low 
		 	
       R_PORT = 0;			//switch R_L for High-Pin (probably Anode) to GND (turn off)
     d8c:	15 b8       	out	0x05, r1	; 5
       wait_about5ms();
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>
       R_PORT = HiPinRL;		//switch R_L for High-Pin (probably Anode) again to VCC
     d96:	c5 b8       	out	0x05, r12	; 5
       adc.hp2 = W5msReadADC(HighPin);	//measure voltage at the High-Pin (probably Anode) again
     d98:	81 2f       	mov	r24, r17
     d9a:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
       if((adc.hp3 < 1600) && (adc.hp2 > 4400)) {
     d9e:	e0 e4       	ldi	r30, 0x40	; 64
     da0:	ee 16       	cp	r14, r30
     da2:	e6 e0       	ldi	r30, 0x06	; 6
     da4:	fe 06       	cpc	r15, r30
     da6:	08 f0       	brcs	.+2      	; 0xdaa <CheckPins+0x5d2>
     da8:	47 c0       	rjmp	.+142    	; 0xe38 <CheckPins+0x660>
     daa:	f1 e1       	ldi	r31, 0x11	; 17
     dac:	81 33       	cpi	r24, 0x31	; 49
     dae:	9f 07       	cpc	r25, r31
     db0:	08 f4       	brcc	.+2      	; 0xdb4 <CheckPins+0x5dc>
     db2:	42 c0       	rjmp	.+132    	; 0xe38 <CheckPins+0x660>
          //if the holding current was switched off the thyristor must be switched off too. 
          //if Thyristor was still swiched on, if gate was switched off => Thyristor
          PartFound = PART_THYRISTOR;
     db4:	85 e0       	ldi	r24, 0x05	; 5
     db6:	80 93 07 01 	sts	0x0107, r24
          //Test if Triac
          R_DDR = 0;
     dba:	14 b8       	out	0x04, r1	; 4
          R_PORT = 0;
     dbc:	15 b8       	out	0x05, r1	; 5
          ADC_PORT = LoADCp;	//Low-Pin fix to VCC
     dbe:	2a 81       	ldd	r18, Y+2	; 0x02
     dc0:	28 b9       	out	0x08, r18	; 8
          wait_about5ms();
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>
          R_DDR = HiPinRL;		//switch R_L port HighPin to output (GND)
     dca:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) > 244) {
     dcc:	81 2f       	mov	r24, r17
     dce:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
     dd2:	85 3f       	cpi	r24, 0xF5	; 245
     dd4:	91 05       	cpc	r25, r1
     dd6:	08 f0       	brcs	.+2      	; 0xdda <CheckPins+0x602>
     dd8:	13 c1       	rjmp	.+550    	; 0x1000 <CheckPins+0x828>
             goto savenresult;		//measure voltage at the  High-Pin (probably A2); if too high:
                                	//component has current => kein Triac
          }
          R_DDR = HiPinRL | TriPinRL;	//switch R_L port for TristatePin (Gate) to output (GND) => Triac should be triggered 
     dda:	3b 85       	ldd	r19, Y+11	; 0x0b
     ddc:	34 b9       	out	0x04, r19	; 4
          if(W5msReadADC(TristatePin) < 977) {
     dde:	82 2d       	mov	r24, r2
     de0:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
     de4:	43 e0       	ldi	r20, 0x03	; 3
     de6:	81 3d       	cpi	r24, 0xD1	; 209
     de8:	94 07       	cpc	r25, r20
     dea:	08 f4       	brcc	.+2      	; 0xdee <CheckPins+0x616>
     dec:	09 c1       	rjmp	.+530    	; 0x1000 <CheckPins+0x828>
             goto savenresult; 		//measure voltage at the Tristate-Pin (probably Gate) ;
                              		// if to low, abort 
          }
          if(ReadADC(HighPin) < 733) {
     dee:	81 2f       	mov	r24, r17
     df0:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
     df4:	a2 e0       	ldi	r26, 0x02	; 2
     df6:	8d 3d       	cpi	r24, 0xDD	; 221
     df8:	9a 07       	cpc	r25, r26
     dfa:	08 f4       	brcc	.+2      	; 0xdfe <CheckPins+0x626>
     dfc:	01 c1       	rjmp	.+514    	; 0x1000 <CheckPins+0x828>
             goto savenresult; 		//component has no current => no Triac => abort
          }
          R_DDR = HiPinRL;		//TristatePin (Gate) to input 
     dfe:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) < 733) {
     e00:	81 2f       	mov	r24, r17
     e02:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
     e06:	b2 e0       	ldi	r27, 0x02	; 2
     e08:	8d 3d       	cpi	r24, 0xDD	; 221
     e0a:	9b 07       	cpc	r25, r27
     e0c:	08 f4       	brcc	.+2      	; 0xe10 <CheckPins+0x638>
     e0e:	f8 c0       	rjmp	.+496    	; 0x1000 <CheckPins+0x828>
             goto savenresult; 		//component has no current without base current => no Triac => abort
          }
          R_PORT = HiPinRL;		//switch R_L port for HighPin to VCC => switch off holding current 
     e10:	c5 b8       	out	0x05, r12	; 5
          wait_about5ms();
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>
          R_PORT = 0;			//switch R_L port for HighPin again to GND; Triac should now switched off
     e1a:	15 b8       	out	0x05, r1	; 5
          if(W5msReadADC(HighPin) > 244) {
     e1c:	81 2f       	mov	r24, r17
     e1e:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
     e22:	85 3f       	cpi	r24, 0xF5	; 245
     e24:	91 05       	cpc	r25, r1
     e26:	08 f0       	brcs	.+2      	; 0xe2a <CheckPins+0x652>
     e28:	eb c0       	rjmp	.+470    	; 0x1000 <CheckPins+0x828>
             goto savenresult;		//measure voltage at the High-Pin (probably A2) ;
                                	//if to high, component is not switched off => no Triac, abort
         }
         PartFound = PART_TRIAC;
     e2a:	84 e0       	ldi	r24, 0x04	; 4
     e2c:	80 93 07 01 	sts	0x0107, r24
         PartReady = 1;
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	80 93 04 01 	sts	0x0104, r24
         goto savenresult;
     e36:	e4 c0       	rjmp	.+456    	; 0x1000 <CheckPins+0x828>
        }
      //Test if NPN Transistor or MOSFET
      // ADC_DDR = LoADCm;	//Low-Pin to output 0V
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
     e38:	0c 29       	or	r16, r12
     e3a:	04 b9       	out	0x04, r16	; 4
      R_PORT = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to VCC
     e3c:	05 b9       	out	0x05, r16	; 5
      wait_about50ms();
     e3e:	8a e0       	ldi	r24, 0x0A	; 10
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>
      adc.hp2 = ADCconfig.U_AVCC - ReadADC(HighPin);	//measure the voltage at the collector resistor 
     e46:	60 90 40 01 	lds	r6, 0x0140
     e4a:	70 90 41 01 	lds	r7, 0x0141
     e4e:	81 2f       	mov	r24, r17
     e50:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
     e54:	68 1a       	sub	r6, r24
     e56:	79 0a       	sbc	r7, r25
      adc.tp2 = ADCconfig.U_AVCC - ReadADC(TristatePin);	//measure the voltage at the base resistor 
     e58:	a0 90 40 01 	lds	r10, 0x0140
     e5c:	b0 90 41 01 	lds	r11, 0x0141
     e60:	82 2d       	mov	r24, r2
     e62:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
     e66:	a8 1a       	sub	r10, r24
     e68:	b9 0a       	sbc	r11, r25
       lcd_space();
       lcd_data('T');
       lcd_data('P');
       lcd_string(utoa(adc.tp2,outval,10));
#endif
      if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     e6a:	80 91 07 01 	lds	r24, 0x0107
     e6e:	82 50       	subi	r24, 0x02	; 2
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	18 f4       	brcc	.+6      	; 0xe7a <CheckPins+0x6a2>
         PartReady = 1;	//check, if test is already done once
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	80 93 04 01 	sts	0x0104, r24
      }
      trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.tp2 - ReadADC(LowPin);
     e7a:	80 90 04 01 	lds	r8, 0x0104
     e7e:	99 24       	eor	r9, r9
     e80:	e0 90 40 01 	lds	r14, 0x0140
     e84:	f0 90 41 01 	lds	r15, 0x0141
     e88:	ea 18       	sub	r14, r10
     e8a:	fb 08       	sbc	r15, r11
     e8c:	83 2d       	mov	r24, r3
     e8e:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
     e92:	f4 01       	movw	r30, r8
     e94:	ee 0f       	add	r30, r30
     e96:	ff 1f       	adc	r31, r31
     e98:	e9 5a       	subi	r30, 0xA9	; 169
     e9a:	fe 4f       	sbci	r31, 0xFE	; 254
     e9c:	e8 1a       	sub	r14, r24
     e9e:	f9 0a       	sbc	r15, r25
     ea0:	f1 82       	std	Z+1, r15	; 0x01
     ea2:	e0 82       	st	Z, r14

      //compute current amplification factor for common Emitter
      //hFE = B = Collector current / Base current
      if(adc.tp2 < 53) {
     ea4:	e5 e3       	ldi	r30, 0x35	; 53
     ea6:	ae 16       	cp	r10, r30
     ea8:	b1 04       	cpc	r11, r1
     eaa:	18 f4       	brcc	.+6      	; 0xeb2 <CheckPins+0x6da>
#if DebugOut == 5
         lcd_data('<');
         lcd_data('5');
         lcd_data('3');
#endif
         adc.tp2 = 53;
     eac:	85 e3       	ldi	r24, 0x35	; 53
     eae:	a8 2e       	mov	r10, r24
     eb0:	b1 2c       	mov	r11, r1
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     eb2:	e0 90 04 01 	lds	r14, 0x0104
     eb6:	ff 24       	eor	r15, r15
     eb8:	c3 01       	movw	r24, r6
     eba:	a0 e0       	ldi	r26, 0x00	; 0
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	8b 87       	std	Y+11, r24	; 0x0b
     ec0:	9c 87       	std	Y+12, r25	; 0x0c
     ec2:	ad 87       	std	Y+13, r26	; 0x0d
     ec4:	be 87       	std	Y+14, r27	; 0x0e
     ec6:	20 91 08 01 	lds	r18, 0x0108
     eca:	30 91 09 01 	lds	r19, 0x0109
     ece:	40 e0       	ldi	r20, 0x00	; 0
     ed0:	50 e0       	ldi	r21, 0x00	; 0
     ed2:	60 e6       	ldi	r22, 0x60	; 96
     ed4:	77 eb       	ldi	r23, 0xB7	; 183
     ed6:	87 e4       	ldi	r24, 0x47	; 71
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
     ede:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee6:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp2;	
     eea:	95 01       	movw	r18, r10
     eec:	40 e0       	ldi	r20, 0x00	; 0
     eee:	50 e0       	ldi	r21, 0x00	; 0
     ef0:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
#endif
         adc.tp2 = 53;
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     ef4:	f7 01       	movw	r30, r14
     ef6:	ee 0f       	add	r30, r30
     ef8:	ff 1f       	adc	r31, r31
     efa:	ee 0f       	add	r30, r30
     efc:	ff 1f       	adc	r31, r31
     efe:	e1 5b       	subi	r30, 0xB1	; 177
     f00:	fe 4f       	sbci	r31, 0xFE	; 254
     f02:	20 83       	st	Z, r18
     f04:	31 83       	std	Z+1, r19	; 0x01
     f06:	42 83       	std	Z+2, r20	; 0x02
     f08:	53 83       	std	Z+3, r21	; 0x03
      trans.hfe[PartReady] = ((adc.hp2 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
#endif
#ifdef COMMON_COLLECTOR
       //compare current amplification factor for common Collector (Emitter follower)
       // hFE = (Emitterstrom - Basisstrom) / Basisstrom
       if (c_hfe >  trans.hfe[PartReady]) {
     f0a:	8c 81       	ldd	r24, Y+4	; 0x04
     f0c:	9d 81       	ldd	r25, Y+5	; 0x05
     f0e:	ae 81       	ldd	r26, Y+6	; 0x06
     f10:	bf 81       	ldd	r27, Y+7	; 0x07
     f12:	28 17       	cp	r18, r24
     f14:	39 07       	cpc	r19, r25
     f16:	4a 07       	cpc	r20, r26
     f18:	5b 07       	cpc	r21, r27
     f1a:	a8 f4       	brcc	.+42     	; 0xf46 <CheckPins+0x76e>
          trans.hfe[PartReady] = c_hfe;
     f1c:	80 83       	st	Z, r24
     f1e:	91 83       	std	Z+1, r25	; 0x01
     f20:	a2 83       	std	Z+2, r26	; 0x02
     f22:	b3 83       	std	Z+3, r27	; 0x03
          trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.lp1 - adc.tp1;
     f24:	f7 01       	movw	r30, r14
     f26:	ee 0f       	add	r30, r30
     f28:	ff 1f       	adc	r31, r31
     f2a:	e9 5a       	subi	r30, 0xA9	; 169
     f2c:	fe 4f       	sbci	r31, 0xFE	; 254
     f2e:	80 91 40 01 	lds	r24, 0x0140
     f32:	90 91 41 01 	lds	r25, 0x0141
     f36:	84 19       	sub	r24, r4
     f38:	95 09       	sbc	r25, r5
     f3a:	a9 89       	ldd	r26, Y+17	; 0x11
     f3c:	ba 89       	ldd	r27, Y+18	; 0x12
     f3e:	8a 1b       	sub	r24, r26
     f40:	9b 0b       	sbc	r25, r27
     f42:	91 83       	std	Z+1, r25	; 0x01
     f44:	80 83       	st	Z, r24
       }
#endif

      if(adc.tp2 > 2557) {		// Basis-voltage R_H is low enough
     f46:	be ef       	ldi	r27, 0xFE	; 254
     f48:	ab 16       	cp	r10, r27
     f4a:	b9 e0       	ldi	r27, 0x09	; 9
     f4c:	bb 06       	cpc	r11, r27
     f4e:	38 f0       	brcs	.+14     	; 0xf5e <CheckPins+0x786>
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
     f50:	82 e0       	ldi	r24, 0x02	; 2
     f52:	80 93 07 01 	sts	0x0107, r24
         PartMode = PART_MODE_NPN;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	80 93 06 01 	sts	0x0106, r24
     f5c:	51 c0       	rjmp	.+162    	; 0x1000 <CheckPins+0x828>
      } else { // Basis has low current
         if((adc.lp_otr < 97) && (adc.hp2 > 3400)) {
     f5e:	e9 85       	ldd	r30, Y+9	; 0x09
     f60:	fa 85       	ldd	r31, Y+10	; 0x0a
     f62:	e1 36       	cpi	r30, 0x61	; 97
     f64:	f1 05       	cpc	r31, r1
     f66:	08 f0       	brcs	.+2      	; 0xf6a <CheckPins+0x792>
     f68:	4b c0       	rjmp	.+150    	; 0x1000 <CheckPins+0x828>
     f6a:	f9 e4       	ldi	r31, 0x49	; 73
     f6c:	6f 16       	cp	r6, r31
     f6e:	fd e0       	ldi	r31, 0x0D	; 13
     f70:	7f 06       	cpc	r7, r31
     f72:	08 f4       	brcc	.+2      	; 0xf76 <CheckPins+0x79e>
     f74:	45 c0       	rjmp	.+138    	; 0x1000 <CheckPins+0x828>
            //if flow voltage in switched off mode low enough?
            //(since D-Mode-FET will be detected in error as E-Mode )
            PartFound = PART_FET;	//N-Kanal-MOSFET is found (Basis/Gate will Not be pulled down)
     f76:	83 e0       	ldi	r24, 0x03	; 3
     f78:	80 93 07 01 	sts	0x0107, r24
            PartMode = PART_MODE_N_E_MOS;
     f7c:	82 e0       	ldi	r24, 0x02	; 2
     f7e:	80 93 06 01 	sts	0x0106, r24
            wait_about1s();
#endif
            //Switching of Drain is monitored with digital input
            // Low level is specified up to 0.3 * VCC
            // High level is specified above 0.6 * VCC
            PinMSK = HiADCm & 7;
     f82:	e9 80       	ldd	r14, Y+1	; 0x01
     f84:	27 e0       	ldi	r18, 0x07	; 7
     f86:	e2 22       	and	r14, r18
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
     f88:	82 2d       	mov	r24, r2
     f8a:	80 64       	ori	r24, 0x40	; 64
     f8c:	80 93 7c 00 	sts	0x007C, r24
            gthvoltage = 1;			// round up ((1*4)/9)
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	90 93 60 01 	sts	0x0160, r25
     f98:	80 93 5f 01 	sts	0x015F, r24
     f9c:	7b e0       	ldi	r23, 0x0B	; 11
     f9e:	a7 2e       	mov	r10, r23
            for(ii=0;ii<11;ii++) {
            	wdt_reset();
     fa0:	a8 95       	wdr
            	ChargePin10ms(TriPinRL,0);	// discharge Gate 10ms with RL 
     fa2:	8d 2d       	mov	r24, r13
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <ChargePin10ms>
                R_DDR = HiPinRL | TriPinRH;	// slowly charge Gate 
     faa:	04 b9       	out	0x04, r16	; 4
                R_PORT = HiPinRL | TriPinRH;
     fac:	05 b9       	out	0x05, r16	; 5
            	while ((ADC_PIN&PinMSK));	// Wait, until the MOSFET switch and Drain moved to low 
     fae:	86 b1       	in	r24, 0x06	; 6
     fb0:	8e 21       	and	r24, r14
     fb2:	e9 f7       	brne	.-6      	; 0xfae <CheckPins+0x7d6>
                		// 0 is detected with input voltage of 2.12V to 2.24V (tested with mega168 & mega328)
                R_DDR = HiPinRL;		// switch off current
     fb4:	c4 b8       	out	0x04, r12	; 4
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
     fb6:	80 91 7a 00 	lds	r24, 0x007A
     fba:	80 64       	ori	r24, 0x40	; 64
     fbc:	80 93 7a 00 	sts	0x007A, r24
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
     fc0:	80 91 7a 00 	lds	r24, 0x007A
     fc4:	86 fd       	sbrc	r24, 6
     fc6:	fc cf       	rjmp	.-8      	; 0xfc0 <CheckPins+0x7e8>
            	gthvoltage += ADCW;		// add result of ADC
     fc8:	80 91 78 00 	lds	r24, 0x0078
     fcc:	90 91 79 00 	lds	r25, 0x0079
     fd0:	20 91 5f 01 	lds	r18, 0x015F
     fd4:	30 91 60 01 	lds	r19, 0x0160
     fd8:	82 0f       	add	r24, r18
     fda:	93 1f       	adc	r25, r19
     fdc:	90 93 60 01 	sts	0x0160, r25
     fe0:	80 93 5f 01 	sts	0x015F, r24
     fe4:	aa 94       	dec	r10
            // High level is specified above 0.6 * VCC
            PinMSK = HiADCm & 7;
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
            gthvoltage = 1;			// round up ((1*4)/9)
            for(ii=0;ii<11;ii++) {
     fe6:	e1 f6       	brne	.-72     	; 0xfa0 <CheckPins+0x7c8>
                R_DDR = HiPinRL;		// switch off current
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
            	gthvoltage += ADCW;		// add result of ADC
            }
            gthvoltage *= 4;	//is equal to 44 * ADCW
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
            gthvoltage /= 9;	//scale to mV
     ff0:	69 e0       	ldi	r22, 0x09	; 9
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <__udivmodhi4>
     ff8:	70 93 60 01 	sts	0x0160, r23
     ffc:	60 93 5f 01 	sts	0x015F, r22
         }
      }
savenresult:
      trans.b = TristatePin;	// save Pin-constellation
    1000:	20 92 5b 01 	sts	0x015B, r2
      trans.c = HighPin;
    1004:	10 93 5c 01 	sts	0x015C, r17
      trans.e = LowPin;
    1008:	30 92 5d 01 	sts	0x015D, r3
   } // end component conduct => npn
   ADC_DDR = TXD_MSK;		// switch all ADC-Ports to input
    100c:	88 e0       	ldi	r24, 0x08	; 8
    100e:	87 b9       	out	0x07, r24	; 7
   ADC_PORT = TXD_VAL;		// switch all ADC-Ports to 0 (no Pull up)
    1010:	88 b9       	out	0x08, r24	; 8
   //Fertig
   //end das component has no connection between HighPin and LowPin
   goto widmes;
    1012:	69 c0       	rjmp	.+210    	; 0x10e6 <CheckPins+0x90e>
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
    1014:	88 e0       	ldi	r24, 0x08	; 8
    1016:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;	//Low-Pin fix to GND
    1018:	3a 81       	ldd	r19, Y+2	; 0x02
    101a:	37 b9       	out	0x07, r19	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    101c:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
    101e:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
    1020:	8d 2d       	mov	r24, r13
    1022:	61 e0       	ldi	r22, 0x01	; 1
    1024:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <ChargePin10ms>
  adc.lp_otr = W5msReadADC(HighPin) - ReadADC(LowPin);
    1028:	81 2f       	mov	r24, r17
    102a:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
    102e:	4c 01       	movw	r8, r24
    1030:	83 2d       	mov	r24, r3
    1032:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
    1036:	88 1a       	sub	r8, r24
    1038:	99 0a       	sbc	r9, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
    103a:	48 85       	ldd	r20, Y+8	; 0x08
    103c:	44 b9       	out	0x04, r20	; 4
  R_PORT = HiPinRH;
    103e:	45 b9       	out	0x05, r20	; 5
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
    1040:	81 2f       	mov	r24, r17
    1042:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
    1046:	5c 01       	movw	r10, r24

  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    1048:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
    104a:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
    104c:	8d 2d       	mov	r24, r13
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <ChargePin10ms>
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
    1054:	81 2f       	mov	r24, r17
    1056:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
    105a:	7c 01       	movw	r14, r24
    105c:	83 2d       	mov	r24, r3
    105e:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
    1062:	e8 1a       	sub	r14, r24
    1064:	f9 0a       	sbc	r15, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
    1066:	88 85       	ldd	r24, Y+8	; 0x08
    1068:	84 b9       	out	0x04, r24	; 4
  R_PORT = HiPinRH;
    106a:	85 b9       	out	0x05, r24	; 5
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
    106c:	81 2f       	mov	r24, r17
    106e:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
    1072:	e8 14       	cp	r14, r8
    1074:	f9 04       	cpc	r15, r9
    1076:	18 f0       	brcs	.+6      	; 0x107e <CheckPins+0x8a6>
  R_PORT = HiPinRL;
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
  R_PORT = HiPinRH;
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
    1078:	a8 2e       	mov	r10, r24
    107a:	b9 2e       	mov	r11, r25
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
    107c:	47 01       	movw	r8, r14
  lcd_string(utoa(adc.hp3,outval,10));
  lcd_space();
  wait_about1s();
#endif

  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
    107e:	c4 01       	movw	r24, r8
    1080:	87 59       	subi	r24, 0x97	; 151
    1082:	90 40       	sbci	r25, 0x00	; 0
    1084:	a1 e1       	ldi	r26, 0x11	; 17
    1086:	89 38       	cpi	r24, 0x89	; 137
    1088:	9a 07       	cpc	r25, r26
    108a:	68 f5       	brcc	.+90     	; 0x10e6 <CheckPins+0x90e>
    108c:	c5 01       	movw	r24, r10
    108e:	53 e0       	ldi	r21, 0x03	; 3
    1090:	96 95       	lsr	r25
    1092:	87 95       	ror	r24
    1094:	5a 95       	dec	r21
    1096:	e1 f7       	brne	.-8      	; 0x1090 <CheckPins+0x8b8>
    1098:	8a 0d       	add	r24, r10
    109a:	9b 1d       	adc	r25, r11
    109c:	88 15       	cp	r24, r8
    109e:	99 05       	cpc	r25, r9
    10a0:	10 f5       	brcc	.+68     	; 0x10e6 <CheckPins+0x90e>
    10a2:	43 e0       	ldi	r20, 0x03	; 3
    10a4:	aa 0c       	add	r10, r10
    10a6:	bb 1c       	adc	r11, r11
    10a8:	4a 95       	dec	r20
    10aa:	e1 f7       	brne	.-8      	; 0x10a4 <CheckPins+0x8cc>
    10ac:	8a 14       	cp	r8, r10
    10ae:	9b 04       	cpc	r9, r11
    10b0:	d0 f4       	brcc	.+52     	; 0x10e6 <CheckPins+0x90e>
     //voltage is above 0,15V and below 4,64V => Ok
     if((PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
    10b2:	80 91 07 01 	lds	r24, 0x0107
    10b6:	88 23       	and	r24, r24
    10b8:	11 f0       	breq	.+4      	; 0x10be <CheckPins+0x8e6>
    10ba:	86 30       	cpi	r24, 0x06	; 6
    10bc:	19 f4       	brne	.+6      	; 0x10c4 <CheckPins+0x8ec>
        PartFound = PART_DIODE;	//mark for diode only, if no other component is found
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	80 93 07 01 	sts	0x0107, r24
				//since there is a problem with Transistors with a protection diode
#if DebugOut == 4
        lcd_data('D');
#endif
     }
     diodes[NumOfDiodes].Anode = HighPin;
    10c4:	80 91 05 01 	lds	r24, 0x0105
    10c8:	e8 2f       	mov	r30, r24
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	ee 0f       	add	r30, r30
    10ce:	ff 1f       	adc	r31, r31
    10d0:	ee 0f       	add	r30, r30
    10d2:	ff 1f       	adc	r31, r31
    10d4:	e8 58       	subi	r30, 0x88	; 136
    10d6:	fe 4f       	sbci	r31, 0xFE	; 254
    10d8:	10 83       	st	Z, r17
     diodes[NumOfDiodes].Cathode = LowPin;
    10da:	31 82       	std	Z+1, r3	; 0x01
     diodes[NumOfDiodes].Voltage = adc.hp1;	// voltage in Millivolt 
    10dc:	93 82       	std	Z+3, r9	; 0x03
    10de:	82 82       	std	Z+2, r8	; 0x02
     NumOfDiodes++;
    10e0:	8f 5f       	subi	r24, 0xFF	; 255
    10e2:	80 93 05 01 	sts	0x0105, r24
#if DebugOut == 4
  lcd_data(NumOfDiodes+'0');
#endif

widmes:
  if (NumOfDiodes > 0) goto clean_ports;
    10e6:	80 91 05 01 	lds	r24, 0x0105
    10ea:	88 23       	and	r24, r24
    10ec:	09 f0       	breq	.+2      	; 0x10f0 <CheckPins+0x918>
    10ee:	12 c2       	rjmp	.+1060   	; 0x1514 <CheckPins+0xd3c>
  // resistor measurement
  wdt_reset();
    10f0:	a8 95       	wdr
// U_SCALE can be set to 4 for better resolution of ReadADC result
#if U_SCALE != 1
  ADCconfig.U_AVCC *= U_SCALE;	// scale to higher resolution, mV scale is not required
    10f2:	80 91 40 01 	lds	r24, 0x0140
    10f6:	90 91 41 01 	lds	r25, 0x0141
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	90 93 41 01 	sts	0x0141, r25
    1106:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.U_Bandgap *= U_SCALE;
    110a:	80 91 3e 01 	lds	r24, 0x013E
    110e:	90 91 3f 01 	lds	r25, 0x013F
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	90 93 3f 01 	sts	0x013F, r25
    111e:	80 93 3e 01 	sts	0x013E, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = R_ANZ_MESS;	// switch to special number of repetitions
    1122:	8e eb       	ldi	r24, 0xBE	; 190
    1124:	80 93 3c 01 	sts	0x013C, r24
#endif
  #define MAX_REPEAT (700 / (5 + R_ANZ_MESS/8))
  ADC_PORT = TXD_VAL;
    1128:	88 e0       	ldi	r24, 0x08	; 8
    112a:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
    112c:	ba 81       	ldd	r27, Y+2	; 0x02
    112e:	b7 b9       	out	0x07, r27	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    1130:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;	
    1132:	c5 b8       	out	0x05, r12	; 5
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
    1134:	ee 24       	eor	r14, r14
    1136:	ff 24       	eor	r15, r15
  for (ii=1;ii<MAX_REPEAT;ii++) {
    1138:	21 e0       	ldi	r18, 0x01	; 1
    113a:	01 c0       	rjmp	.+2      	; 0x113e <CheckPins+0x966>
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    113c:	7c 01       	movw	r14, r24
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
    113e:	83 2d       	mov	r24, r3
    1140:	2b 8b       	std	Y+19, r18	; 0x13
    1142:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
    1146:	08 2f       	mov	r16, r24
    1148:	49 2e       	mov	r4, r25
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    114a:	81 2f       	mov	r24, r17
    114c:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
     udiff = adc.hp1 - adc.hp2;
    1150:	ac 01       	movw	r20, r24
    1152:	4e 19       	sub	r20, r14
    1154:	5f 09       	sbc	r21, r15
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    1156:	2b 89       	ldd	r18, Y+19	; 0x13
    1158:	57 ff       	sbrs	r21, 7
    115a:	03 c0       	rjmp	.+6      	; 0x1162 <CheckPins+0x98a>
    115c:	50 95       	com	r21
    115e:	41 95       	neg	r20
    1160:	5f 4f       	sbci	r21, 0xFF	; 255
    1162:	43 30       	cpi	r20, 0x03	; 3
    1164:	51 05       	cpc	r21, r1
    1166:	84 f4       	brge	.+32     	; 0x1188 <CheckPins+0x9b0>
    1168:	ac 01       	movw	r20, r24
  adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
#endif
  if (adc.tp1 > adc.hp1) {
     adc.tp1 = adc.hp1;
  }
  R_PORT = 0;
    116a:	15 b8       	out	0x05, r1	; 5
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (GND)
    116c:	e8 85       	ldd	r30, Y+8	; 0x08
    116e:	e4 b9       	out	0x04, r30	; 4
  adc.hp2 = W5msReadADC(HighPin);	// read voltage, should be down
    1170:	81 2f       	mov	r24, r17
    1172:	4e 8b       	std	Y+22, r20	; 0x16
    1174:	5b 8b       	std	Y+19, r21	; 0x13
    1176:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
  if (adc.hp2 > (20*U_SCALE)) {
    117a:	4e 89       	ldd	r20, Y+22	; 0x16
    117c:	5b 89       	ldd	r21, Y+19	; 0x13
    117e:	81 35       	cpi	r24, 0x51	; 81
    1180:	91 05       	cpc	r25, r1
    1182:	08 f0       	brcs	.+2      	; 0x1186 <CheckPins+0x9ae>
    1184:	ac c1       	rjmp	.+856    	; 0x14de <CheckPins+0xd06>
    1186:	05 c0       	rjmp	.+10     	; 0x1192 <CheckPins+0x9ba>
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     udiff = adc.hp1 - adc.hp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.hp2 = adc.hp1;
     wdt_reset();
    1188:	a8 95       	wdr
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    118a:	2f 5f       	subi	r18, 0xFF	; 255
    118c:	29 31       	cpi	r18, 0x19	; 25
    118e:	b1 f6       	brne	.-84     	; 0x113c <CheckPins+0x964>
    1190:	a6 c1       	rjmp	.+844    	; 0x14de <CheckPins+0xd06>
     lcd_string(utoa(adc.hp2, outval, 10));
     lcd_space();
#endif
     goto testend;
  }
  R_PORT = HiPinRH;		//switch R_H for High-Pin to VCC
    1192:	f8 85       	ldd	r31, Y+8	; 0x08
    1194:	f5 b9       	out	0x05, r31	; 5
  adc.hp2 = W5msReadADC(HighPin);	// voltage at resistor Rx with R_H
    1196:	81 2f       	mov	r24, r17
    1198:	4e 8b       	std	Y+22, r20	; 0x16
    119a:	5b 8b       	std	Y+19, r21	; 0x13
    119c:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
    11a0:	7c 01       	movw	r14, r24

  ADC_DDR = HiADCm;		//switch High-Pin to output
    11a2:	29 81       	ldd	r18, Y+1	; 0x01
    11a4:	27 b9       	out	0x07, r18	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
    11a6:	28 b9       	out	0x08, r18	; 8
  R_PORT = 0;
    11a8:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
    11aa:	3b 81       	ldd	r19, Y+3	; 0x03
    11ac:	34 b9       	out	0x04, r19	; 4
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
    11ae:	aa 24       	eor	r10, r10
    11b0:	bb 24       	eor	r11, r11
  for (ii=1;ii<MAX_REPEAT;ii++) {
    11b2:	21 e0       	ldi	r18, 0x01	; 1
    11b4:	4e 89       	ldd	r20, Y+22	; 0x16
    11b6:	5b 89       	ldd	r21, Y+19	; 0x13
    11b8:	3a 01       	movw	r6, r20
    11ba:	01 c0       	rjmp	.+2      	; 0x11be <CheckPins+0x9e6>
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    11bc:	56 01       	movw	r10, r12
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
    11be:	81 2f       	mov	r24, r17
    11c0:	2b 8b       	std	Y+19, r18	; 0x13
    11c2:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
    11c6:	4c 01       	movw	r8, r24
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    11c8:	83 2d       	mov	r24, r3
    11ca:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
    11ce:	6c 01       	movw	r12, r24
     udiff = adc.lp1 - adc.lp2;
    11d0:	8a 19       	sub	r24, r10
    11d2:	9b 09       	sbc	r25, r11
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    11d4:	2b 89       	ldd	r18, Y+19	; 0x13
    11d6:	97 ff       	sbrs	r25, 7
    11d8:	03 c0       	rjmp	.+6      	; 0x11e0 <CheckPins+0xa08>
    11da:	90 95       	com	r25
    11dc:	81 95       	neg	r24
    11de:	9f 4f       	sbci	r25, 0xFF	; 255
    11e0:	83 30       	cpi	r24, 0x03	; 3
    11e2:	91 05       	cpc	r25, r1
    11e4:	8c f4       	brge	.+34     	; 0x1208 <CheckPins+0xa30>
    11e6:	a3 01       	movw	r20, r6
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = pgm_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	88 0f       	add	r24, r24
  adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
#endif
  if (adc.tp2 < adc.lp1) {
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
    11ec:	84 b9       	out	0x04, r24	; 4
  adc.lp2 = W5msReadADC(LowPin);
    11ee:	83 2d       	mov	r24, r3
    11f0:	6e 8a       	std	Y+22, r6	; 0x16
    11f2:	5b 8b       	std	Y+19, r21	; 0x13
    11f4:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
    11f8:	3c 01       	movw	r6, r24
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    11fa:	4e 89       	ldd	r20, Y+22	; 0x16
    11fc:	5b 89       	ldd	r21, Y+19	; 0x13
    11fe:	84 e4       	ldi	r24, 0x44	; 68
    1200:	40 3c       	cpi	r20, 0xC0	; 192
    1202:	58 07       	cpc	r21, r24
    1204:	30 f0       	brcs	.+12     	; 0x1212 <CheckPins+0xa3a>
    1206:	0c c0       	rjmp	.+24     	; 0x1220 <CheckPins+0xa48>
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     udiff = adc.lp1 - adc.lp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.lp2 = adc.lp1;
     wdt_reset();
    1208:	a8 95       	wdr
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
  R_PORT = 0;
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    120a:	2f 5f       	subi	r18, 0xFF	; 255
    120c:	29 31       	cpi	r18, 0x19	; 25
    120e:	b1 f6       	brne	.-84     	; 0x11bc <CheckPins+0x9e4>
    1210:	66 c1       	rjmp	.+716    	; 0x14de <CheckPins+0xd06>
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
  adc.lp2 = W5msReadADC(LowPin);
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    1212:	95 e8       	ldi	r25, 0x85	; 133
    1214:	e9 16       	cp	r14, r25
    1216:	91 e0       	ldi	r25, 0x01	; 1
    1218:	f9 06       	cpc	r15, r25
    121a:	08 f0       	brcs	.+2      	; 0x121e <CheckPins+0xa46>
    121c:	60 c1       	rjmp	.+704    	; 0x14de <CheckPins+0xd06>
    121e:	06 c0       	rjmp	.+12     	; 0x122c <CheckPins+0xa54>
     lcd_data('F');
#endif
     goto testend; 
  }
//    if((adc.hp2 + (adc.hp2 / 61)) < adc.hp1)
  if (adc.hp2 < (4972*U_SCALE)) { 
    1220:	a0 eb       	ldi	r26, 0xB0	; 176
    1222:	ea 16       	cp	r14, r26
    1224:	ad e4       	ldi	r26, 0x4D	; 77
    1226:	fa 06       	cpc	r15, r26
    1228:	08 f0       	brcs	.+2      	; 0x122c <CheckPins+0xa54>
    122a:	59 c1       	rjmp	.+690    	; 0x14de <CheckPins+0xd06>
     // voltage breaks down with low test current and it is not nearly shorted  => resistor
//     if (adc.lp1 < 120) { // take measurement with R_H 
     if (adc.lp1 < (169*U_SCALE)) { // take measurement with R_H 
    122c:	b4 ea       	ldi	r27, 0xA4	; 164
    122e:	cb 16       	cp	r12, r27
    1230:	b2 e0       	ldi	r27, 0x02	; 2
    1232:	db 06       	cpc	r13, r27
    1234:	08 f0       	brcs	.+2      	; 0x1238 <CheckPins+0xa60>
    1236:	72 c0       	rjmp	.+228    	; 0x131c <CheckPins+0xb44>
        ii = 'H';
        if (adc.lp2 < (38*U_SCALE)) {
    1238:	e8 e9       	ldi	r30, 0x98	; 152
    123a:	6e 16       	cp	r6, r30
    123c:	71 04       	cpc	r7, r1
    123e:	08 f4       	brcc	.+2      	; 0x1242 <CheckPins+0xa6a>
    1240:	4e c1       	rjmp	.+668    	; 0x14de <CheckPins+0xd06>
           // measurement > 60MOhm to big resistance
           goto testend;
        }
        // two measurements with R_H resistors (470k) are made:
        // lirx1 (measurement at HighPin)
        lirx1 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)adc.hp2 / (ADCconfig.U_AVCC - adc.hp2);
    1242:	80 90 40 01 	lds	r8, 0x0140
    1246:	90 90 41 01 	lds	r9, 0x0141
    124a:	b7 01       	movw	r22, r14
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	28 e9       	ldi	r18, 0x98	; 152
    1252:	37 eb       	ldi	r19, 0xB7	; 183
    1254:	40 e0       	ldi	r20, 0x00	; 0
    1256:	50 e0       	ldi	r21, 0x00	; 0
    1258:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
    125c:	94 01       	movw	r18, r8
    125e:	2e 19       	sub	r18, r14
    1260:	3f 09       	sbc	r19, r15
    1262:	40 e0       	ldi	r20, 0x00	; 0
    1264:	50 e0       	ldi	r21, 0x00	; 0
    1266:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
    126a:	59 01       	movw	r10, r18
    126c:	6a 01       	movw	r12, r20
        // lirx2 (measurement at LowPin)
        lirx2 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)(ADCconfig.U_AVCC - adc.lp2) / adc.lp2;
    126e:	86 18       	sub	r8, r6
    1270:	97 08       	sbc	r9, r7
    1272:	b4 01       	movw	r22, r8
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	28 e9       	ldi	r18, 0x98	; 152
    127a:	37 eb       	ldi	r19, 0xB7	; 183
    127c:	40 e0       	ldi	r20, 0x00	; 0
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
    1284:	93 01       	movw	r18, r6
    1286:	40 e0       	ldi	r20, 0x00	; 0
    1288:	50 e0       	ldi	r21, 0x00	; 0
    128a:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
#define FAKT_LOW 2		//resolution is about twice as good
#else
#define FAKT_LOW 4		//resolution is about four times better
#endif
#ifdef AUTOSCALE_ADC
        if (adc.hp2 < U_INT_LIMIT) {
    128e:	f8 e7       	ldi	r31, 0x78	; 120
    1290:	ef 16       	cp	r14, r31
    1292:	ff e0       	ldi	r31, 0x0F	; 15
    1294:	ff 06       	cpc	r15, r31
    1296:	70 f4       	brcc	.+28     	; 0x12b4 <CheckPins+0xadc>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    1298:	c6 01       	movw	r24, r12
    129a:	b5 01       	movw	r22, r10
    129c:	b2 e0       	ldi	r27, 0x02	; 2
    129e:	66 0f       	add	r22, r22
    12a0:	77 1f       	adc	r23, r23
    12a2:	88 1f       	adc	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	ba 95       	dec	r27
    12a8:	d1 f7       	brne	.-12     	; 0x129e <CheckPins+0xac6>
    12aa:	62 0f       	add	r22, r18
    12ac:	73 1f       	adc	r23, r19
    12ae:	84 1f       	adc	r24, r20
    12b0:	95 1f       	adc	r25, r21
    12b2:	12 c0       	rjmp	.+36     	; 0x12d8 <CheckPins+0xb00>
        } else if (adc.lp2 < U_INT_LIMIT){
    12b4:	88 e7       	ldi	r24, 0x78	; 120
    12b6:	68 16       	cp	r6, r24
    12b8:	8f e0       	ldi	r24, 0x0F	; 15
    12ba:	78 06       	cpc	r7, r24
    12bc:	a0 f4       	brcc	.+40     	; 0x12e6 <CheckPins+0xb0e>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    12be:	ca 01       	movw	r24, r20
    12c0:	b9 01       	movw	r22, r18
    12c2:	a2 e0       	ldi	r26, 0x02	; 2
    12c4:	66 0f       	add	r22, r22
    12c6:	77 1f       	adc	r23, r23
    12c8:	88 1f       	adc	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	aa 95       	dec	r26
    12ce:	d1 f7       	brne	.-12     	; 0x12c4 <CheckPins+0xaec>
    12d0:	6a 0d       	add	r22, r10
    12d2:	7b 1d       	adc	r23, r11
    12d4:	8c 1d       	adc	r24, r12
    12d6:	9d 1d       	adc	r25, r13
    12d8:	25 e0       	ldi	r18, 0x05	; 5
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	40 e0       	ldi	r20, 0x00	; 0
    12de:	50 e0       	ldi	r21, 0x00	; 0
    12e0:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
    12e4:	08 c0       	rjmp	.+16     	; 0x12f6 <CheckPins+0xb1e>
        } else 
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_H measurements
    12e6:	2a 0d       	add	r18, r10
    12e8:	3b 1d       	adc	r19, r11
    12ea:	4c 1d       	adc	r20, r12
    12ec:	5d 1d       	adc	r21, r13
    12ee:	56 95       	lsr	r21
    12f0:	47 95       	ror	r20
    12f2:	37 95       	ror	r19
    12f4:	27 95       	ror	r18
        }
        lrx1 *= 100;
    12f6:	ca 01       	movw	r24, r20
    12f8:	b9 01       	movw	r22, r18
    12fa:	24 e6       	ldi	r18, 0x64	; 100
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	40 e0       	ldi	r20, 0x00	; 0
    1300:	50 e0       	ldi	r21, 0x00	; 0
    1302:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
    1306:	6b 01       	movw	r12, r22
    1308:	7c 01       	movw	r14, r24
        lrx1 += RH_OFFSET;			// add constant for correction of systematic error
    130a:	8c ea       	ldi	r24, 0xAC	; 172
    130c:	9d e0       	ldi	r25, 0x0D	; 13
    130e:	a0 e0       	ldi	r26, 0x00	; 0
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	c8 0e       	add	r12, r24
    1314:	d9 1e       	adc	r13, r25
    1316:	ea 1e       	adc	r14, r26
    1318:	fb 1e       	adc	r15, r27
    131a:	78 c0       	rjmp	.+240    	; 0x140c <CheckPins+0xc34>
    131c:	80 2f       	mov	r24, r16
    131e:	94 2d       	mov	r25, r4
    1320:	48 17       	cp	r20, r24
    1322:	59 07       	cpc	r21, r25
    1324:	08 f4       	brcc	.+2      	; 0x1328 <CheckPins+0xb50>
    1326:	ca 01       	movw	r24, r20
    1328:	76 01       	movw	r14, r12
    132a:	c8 14       	cp	r12, r8
    132c:	d9 04       	cpc	r13, r9
    132e:	08 f4       	brcc	.+2      	; 0x1332 <CheckPins+0xb5a>
    1330:	74 01       	movw	r14, r8
    1332:	3c 01       	movw	r6, r24
    1334:	84 17       	cp	r24, r20
    1336:	95 07       	cpc	r25, r21
    1338:	08 f4       	brcc	.+2      	; 0x133c <CheckPins+0xb64>
    133a:	3a 01       	movw	r6, r20
        // two measurements with R_L resistors (680) are made:
        // lirx1 (measurement at HighPin)
        if (adc.tp1 > adc.hp1) {
           adc.hp1 = adc.tp1;		//diff negativ is illegal
        }
        lirx1 =(unsigned long)RR680PL * (unsigned long)(adc.hp1 - adc.tp1) / (ADCconfig.U_AVCC - adc.hp1);
    133c:	b3 01       	movw	r22, r6
    133e:	68 1b       	sub	r22, r24
    1340:	79 0b       	sbc	r23, r25
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	20 91 08 01 	lds	r18, 0x0108
    134a:	30 91 09 01 	lds	r19, 0x0109
    134e:	40 e0       	ldi	r20, 0x00	; 0
    1350:	50 e0       	ldi	r21, 0x00	; 0
    1352:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
    1356:	20 91 40 01 	lds	r18, 0x0140
    135a:	30 91 41 01 	lds	r19, 0x0141
    135e:	26 19       	sub	r18, r6
    1360:	37 09       	sbc	r19, r7
    1362:	40 e0       	ldi	r20, 0x00	; 0
    1364:	50 e0       	ldi	r21, 0x00	; 0
    1366:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
    136a:	49 01       	movw	r8, r18
    136c:	5a 01       	movw	r10, r20
    136e:	27 01       	movw	r4, r14
    1370:	ce 14       	cp	r12, r14
    1372:	df 04       	cpc	r13, r15
    1374:	08 f4       	brcc	.+2      	; 0x1378 <CheckPins+0xba0>
    1376:	26 01       	movw	r4, r12
        if (adc.tp2 < adc.lp1) {
           adc.lp1 = adc.tp2;		//diff negativ is illegal
        }
        // lirx2 (Measurement at LowPin)
        lirx2 =(unsigned long)RR680MI * (unsigned long)(adc.tp2 -adc.lp1) / adc.lp1;
    1378:	e4 18       	sub	r14, r4
    137a:	f5 08       	sbc	r15, r5
    137c:	b7 01       	movw	r22, r14
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	20 91 02 01 	lds	r18, 0x0102
    1386:	30 91 03 01 	lds	r19, 0x0103
    138a:	40 e0       	ldi	r20, 0x00	; 0
    138c:	50 e0       	ldi	r21, 0x00	; 0
    138e:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
    1392:	92 01       	movw	r18, r4
    1394:	40 e0       	ldi	r20, 0x00	; 0
    1396:	50 e0       	ldi	r21, 0x00	; 0
    1398:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
//     lrx1 =(unsigned long)R_L_VAL * (unsigned long)adc.hp1 / (adc.hp3 - adc.hp1);

#ifdef AUTOSCALE_ADC
        if (adc.hp1 < U_INT_LIMIT) {
    139c:	98 e7       	ldi	r25, 0x78	; 120
    139e:	69 16       	cp	r6, r25
    13a0:	9f e0       	ldi	r25, 0x0F	; 15
    13a2:	79 06       	cpc	r7, r25
    13a4:	70 f4       	brcc	.+28     	; 0x13c2 <CheckPins+0xbea>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    13a6:	c5 01       	movw	r24, r10
    13a8:	b4 01       	movw	r22, r8
    13aa:	e2 e0       	ldi	r30, 0x02	; 2
    13ac:	66 0f       	add	r22, r22
    13ae:	77 1f       	adc	r23, r23
    13b0:	88 1f       	adc	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	ea 95       	dec	r30
    13b6:	d1 f7       	brne	.-12     	; 0x13ac <CheckPins+0xbd4>
    13b8:	62 0f       	add	r22, r18
    13ba:	73 1f       	adc	r23, r19
    13bc:	84 1f       	adc	r24, r20
    13be:	95 1f       	adc	r25, r21
    13c0:	12 c0       	rjmp	.+36     	; 0x13e6 <CheckPins+0xc0e>
        } else if (adc.lp1 < U_INT_LIMIT) {
    13c2:	a8 e7       	ldi	r26, 0x78	; 120
    13c4:	4a 16       	cp	r4, r26
    13c6:	af e0       	ldi	r26, 0x0F	; 15
    13c8:	5a 06       	cpc	r5, r26
    13ca:	b0 f4       	brcc	.+44     	; 0x13f8 <CheckPins+0xc20>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    13cc:	ca 01       	movw	r24, r20
    13ce:	b9 01       	movw	r22, r18
    13d0:	22 e0       	ldi	r18, 0x02	; 2
    13d2:	66 0f       	add	r22, r22
    13d4:	77 1f       	adc	r23, r23
    13d6:	88 1f       	adc	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	2a 95       	dec	r18
    13dc:	d1 f7       	brne	.-12     	; 0x13d2 <CheckPins+0xbfa>
    13de:	68 0d       	add	r22, r8
    13e0:	79 1d       	adc	r23, r9
    13e2:	8a 1d       	adc	r24, r10
    13e4:	9b 1d       	adc	r25, r11
    13e6:	25 e0       	ldi	r18, 0x05	; 5
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	40 e0       	ldi	r20, 0x00	; 0
    13ec:	50 e0       	ldi	r21, 0x00	; 0
    13ee:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
    13f2:	69 01       	movw	r12, r18
    13f4:	7a 01       	movw	r14, r20
    13f6:	0a c0       	rjmp	.+20     	; 0x140c <CheckPins+0xc34>
        } else
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_L measurements
    13f8:	69 01       	movw	r12, r18
    13fa:	7a 01       	movw	r14, r20
    13fc:	c8 0c       	add	r12, r8
    13fe:	d9 1c       	adc	r13, r9
    1400:	ea 1c       	adc	r14, r10
    1402:	fb 1c       	adc	r15, r11
    1404:	f6 94       	lsr	r15
    1406:	e7 94       	ror	r14
    1408:	d7 94       	ror	r13
    140a:	c7 94       	ror	r12
  lcd_line4();
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
    140c:	80 91 07 01 	lds	r24, 0x0107
    1410:	82 30       	cpi	r24, 0x02	; 2
    1412:	18 f0       	brcs	.+6      	; 0x141a <CheckPins+0xc42>
    1414:	86 30       	cpi	r24, 0x06	; 6
    1416:	09 f0       	breq	.+2      	; 0x141a <CheckPins+0xc42>
    1418:	62 c0       	rjmp	.+196    	; 0x14de <CheckPins+0xd06>
        for (ii=0; ii<ResistorsFound; ii++) {
    141a:	30 91 5e 01 	lds	r19, 0x015E
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	40 c0       	rjmp	.+128    	; 0x14a2 <CheckPins+0xcca>
           // search measurements with inverse polarity 
           thisR = &resis[ii];
    1422:	82 2f       	mov	r24, r18
    1424:	90 e0       	ldi	r25, 0x00	; 0
           if (thisR->rt != TristatePin) {
    1426:	fc 01       	movw	r30, r24
    1428:	ee 0f       	add	r30, r30
    142a:	ff 1f       	adc	r31, r31
    142c:	e8 0f       	add	r30, r24
    142e:	f9 1f       	adc	r31, r25
    1430:	ee 0f       	add	r30, r30
    1432:	ff 1f       	adc	r31, r31
    1434:	ee 0f       	add	r30, r30
    1436:	ff 1f       	adc	r31, r31
    1438:	e8 5e       	subi	r30, 0xE8	; 232
    143a:	fe 4f       	sbci	r31, 0xFE	; 254
    143c:	83 85       	ldd	r24, Z+11	; 0x0b
    143e:	82 15       	cp	r24, r2
    1440:	11 f0       	breq	.+4      	; 0x1446 <CheckPins+0xc6e>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    1442:	2f 5f       	subi	r18, 0xFF	; 255
    1444:	2e c0       	rjmp	.+92     	; 0x14a2 <CheckPins+0xcca>
           if (thisR->rt != TristatePin) {
              continue;
           }
           // must be measurement with inverse polarity 
           // resolution is 0.1 Ohm, 1 Ohm = 10 !
           lirx1 = (labs((long)lrx1 - (long)thisR->rx) * 10) / (lrx1 + thisR->rx + 100);
    1446:	80 80       	ld	r8, Z
    1448:	91 80       	ldd	r9, Z+1	; 0x01
    144a:	a2 80       	ldd	r10, Z+2	; 0x02
    144c:	b3 80       	ldd	r11, Z+3	; 0x03
    144e:	c7 01       	movw	r24, r14
    1450:	b6 01       	movw	r22, r12
    1452:	68 19       	sub	r22, r8
    1454:	79 09       	sbc	r23, r9
    1456:	8a 09       	sbc	r24, r10
    1458:	9b 09       	sbc	r25, r11
    145a:	97 ff       	sbrs	r25, 7
    145c:	07 c0       	rjmp	.+14     	; 0x146c <CheckPins+0xc94>
    145e:	90 95       	com	r25
    1460:	80 95       	com	r24
    1462:	70 95       	com	r23
    1464:	61 95       	neg	r22
    1466:	7f 4f       	sbci	r23, 0xFF	; 255
    1468:	8f 4f       	sbci	r24, 0xFF	; 255
    146a:	9f 4f       	sbci	r25, 0xFF	; 255
    146c:	2a e0       	ldi	r18, 0x0A	; 10
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	50 e0       	ldi	r21, 0x00	; 0
    1474:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
    1478:	a5 01       	movw	r20, r10
    147a:	94 01       	movw	r18, r8
    147c:	2c 59       	subi	r18, 0x9C	; 156
    147e:	3f 4f       	sbci	r19, 0xFF	; 255
    1480:	4f 4f       	sbci	r20, 0xFF	; 255
    1482:	5f 4f       	sbci	r21, 0xFF	; 255
    1484:	2c 0d       	add	r18, r12
    1486:	3d 1d       	adc	r19, r13
    1488:	4e 1d       	adc	r20, r14
    148a:	5f 1d       	adc	r21, r15
    148c:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
           if (lirx1  > 0) {
    1490:	21 15       	cp	r18, r1
    1492:	31 05       	cpc	r19, r1
    1494:	41 05       	cpc	r20, r1
    1496:	51 05       	cpc	r21, r1
    1498:	11 f5       	brne	.+68     	; 0x14de <CheckPins+0xd06>
              DisplayValue(lirx1,-1,LCD_CHAR_OMEGA,3)
              lcd_space();
#endif
              goto testend; // <10% mismatch
           }
           PartFound = PART_RESISTOR;
    149a:	86 e0       	ldi	r24, 0x06	; 6
    149c:	80 93 07 01 	sts	0x0107, r24
           goto testend;
    14a0:	1e c0       	rjmp	.+60     	; 0x14de <CheckPins+0xd06>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    14a2:	23 17       	cp	r18, r19
    14a4:	08 f4       	brcc	.+2      	; 0x14a8 <CheckPins+0xcd0>
    14a6:	bd cf       	rjmp	.-134    	; 0x1422 <CheckPins+0xc4a>
           }
           PartFound = PART_RESISTOR;
           goto testend;
        } // end for
        // no same resistor with the same Tristate-Pin found, new one
        thisR = &resis[ResistorsFound];		// pointer to a free resistor structure
    14a8:	83 2f       	mov	r24, r19
    14aa:	90 e0       	ldi	r25, 0x00	; 0
        thisR->rx = lrx1;		// save resistor value
    14ac:	fc 01       	movw	r30, r24
    14ae:	ee 0f       	add	r30, r30
    14b0:	ff 1f       	adc	r31, r31
    14b2:	e8 0f       	add	r30, r24
    14b4:	f9 1f       	adc	r31, r25
    14b6:	ee 0f       	add	r30, r30
    14b8:	ff 1f       	adc	r31, r31
    14ba:	ee 0f       	add	r30, r30
    14bc:	ff 1f       	adc	r31, r31
    14be:	e8 5e       	subi	r30, 0xE8	; 232
    14c0:	fe 4f       	sbci	r31, 0xFE	; 254
    14c2:	c0 82       	st	Z, r12
    14c4:	d1 82       	std	Z+1, r13	; 0x01
    14c6:	e2 82       	std	Z+2, r14	; 0x02
    14c8:	f3 82       	std	Z+3, r15	; 0x03
#if FLASHEND > 0x1fff
        thisR->lx = 0;			// no inductance
    14ca:	14 82       	std	Z+4, r1	; 0x04
    14cc:	15 82       	std	Z+5, r1	; 0x05
    14ce:	16 82       	std	Z+6, r1	; 0x06
    14d0:	17 82       	std	Z+7, r1	; 0x07
#endif
        thisR->ra = LowPin;		// save Pin numbers
    14d2:	31 86       	std	Z+9, r3	; 0x09
        thisR->rb = HighPin;
    14d4:	12 87       	std	Z+10, r17	; 0x0a
        thisR->rt = TristatePin;	// Tristate is saved for easier search of inverse measurement
    14d6:	23 86       	std	Z+11, r2	; 0x0b
        ResistorsFound++;			// 1 more resistor found
    14d8:	3f 5f       	subi	r19, 0xFF	; 255
    14da:	30 93 5e 01 	sts	0x015E, r19
#endif
     }
  }
  testend:
#if U_SCALE != 1
  ADCconfig.U_AVCC /= U_SCALE;		// scale back to mV resolution
    14de:	80 91 40 01 	lds	r24, 0x0140
    14e2:	90 91 41 01 	lds	r25, 0x0141
    14e6:	96 95       	lsr	r25
    14e8:	87 95       	ror	r24
    14ea:	96 95       	lsr	r25
    14ec:	87 95       	ror	r24
    14ee:	90 93 41 01 	sts	0x0141, r25
    14f2:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.U_Bandgap /= U_SCALE;
    14f6:	80 91 3e 01 	lds	r24, 0x013E
    14fa:	90 91 3f 01 	lds	r25, 0x013F
    14fe:	96 95       	lsr	r25
    1500:	87 95       	ror	r24
    1502:	96 95       	lsr	r25
    1504:	87 95       	ror	r24
    1506:	90 93 3f 01 	sts	0x013F, r25
    150a:	80 93 3e 01 	sts	0x013E, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = ANZ_MESS;		// switch back to standard number of repetition
    150e:	89 e1       	ldi	r24, 0x19	; 25
    1510:	80 93 3c 01 	sts	0x013C, r24
#if DebugOut < 10
  wait_about2s();
#endif
#endif
 clean_ports:
  ADC_DDR = TXD_MSK;		// all ADC-Pins Input
    1514:	88 e0       	ldi	r24, 0x08	; 8
    1516:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// all ADC outputs to Ground, keine Pull up
    1518:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// all resistor-outputs to Input
    151a:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// all resistor-outputs to Ground, no Pull up
    151c:	15 b8       	out	0x05, r1	; 5
} // end CheckPins()
    151e:	66 96       	adiw	r28, 0x16	; 22
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	f8 94       	cli
    1524:	de bf       	out	0x3e, r29	; 62
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	cd bf       	out	0x3d, r28	; 61
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	1f 91       	pop	r17
    1530:	0f 91       	pop	r16
    1532:	ff 90       	pop	r15
    1534:	ef 90       	pop	r14
    1536:	df 90       	pop	r13
    1538:	cf 90       	pop	r12
    153a:	bf 90       	pop	r11
    153c:	af 90       	pop	r10
    153e:	9f 90       	pop	r9
    1540:	8f 90       	pop	r8
    1542:	7f 90       	pop	r7
    1544:	6f 90       	pop	r6
    1546:	5f 90       	pop	r5
    1548:	4f 90       	pop	r4
    154a:	3f 90       	pop	r3
    154c:	2f 90       	pop	r2
    154e:	08 95       	ret

00001550 <PinLayout>:
TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
}
#endif

// show the Pin Layout of the device 
void PinLayout(char pin1, char pin2, char pin3) {
    1550:	ff 92       	push	r15
    1552:	0f 93       	push	r16
    1554:	1f 93       	push	r17
    1556:	18 2f       	mov	r17, r24
    1558:	06 2f       	mov	r16, r22
    155a:	f4 2e       	mov	r15, r20
// pin1-3 is EBC or SGD or CGA
#ifndef EBC_STYLE
   // Layout with 123= style
   lcd_fix_string(N123_str);		//" 123="
    155c:	80 e1       	ldi	r24, 0x10	; 16
    155e:	91 e0       	ldi	r25, 0x01	; 1
    1560:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
   for (ii=0;ii<3;ii++) {
    1564:	10 92 4b 01 	sts	0x014B, r1
    1568:	1e c0       	rjmp	.+60     	; 0x15a6 <PinLayout+0x56>
       if (ii == trans.e)  lcd_data(pin1);	// Output Character in right order
    156a:	90 91 5d 01 	lds	r25, 0x015D
    156e:	89 17       	cp	r24, r25
    1570:	19 f4       	brne	.+6      	; 0x1578 <PinLayout+0x28>
    1572:	81 2f       	mov	r24, r17
    1574:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       if (ii == trans.b)  lcd_data(pin2);
    1578:	90 91 4b 01 	lds	r25, 0x014B
    157c:	80 91 5b 01 	lds	r24, 0x015B
    1580:	98 17       	cp	r25, r24
    1582:	19 f4       	brne	.+6      	; 0x158a <PinLayout+0x3a>
    1584:	80 2f       	mov	r24, r16
    1586:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       if (ii == trans.c)  lcd_data(pin3);
    158a:	90 91 4b 01 	lds	r25, 0x014B
    158e:	80 91 5c 01 	lds	r24, 0x015C
    1592:	98 17       	cp	r25, r24
    1594:	19 f4       	brne	.+6      	; 0x159c <PinLayout+0x4c>
    1596:	8f 2d       	mov	r24, r15
    1598:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
void PinLayout(char pin1, char pin2, char pin3) {
// pin1-3 is EBC or SGD or CGA
#ifndef EBC_STYLE
   // Layout with 123= style
   lcd_fix_string(N123_str);		//" 123="
   for (ii=0;ii<3;ii++) {
    159c:	80 91 4b 01 	lds	r24, 0x014B
    15a0:	8f 5f       	subi	r24, 0xFF	; 255
    15a2:	80 93 4b 01 	sts	0x014B, r24
    15a6:	80 91 4b 01 	lds	r24, 0x014B
    15aa:	83 30       	cpi	r24, 0x03	; 3
    15ac:	f0 f2       	brcs	.-68     	; 0x156a <PinLayout+0x1a>
   lcd_testpin(trans.e);
   lcd_testpin(trans.b);
   lcd_testpin(trans.c);
 #endif
#endif
}
    15ae:	1f 91       	pop	r17
    15b0:	0f 91       	pop	r16
    15b2:	ff 90       	pop	r15
    15b4:	08 95       	ret

000015b6 <ShortedProbes>:
 *  - 0 if not shorted
 *  - 1 if shorted
 */

uint8_t ShortedProbes(uint8_t Probe1, uint8_t Probe2)
{
    15b6:	0f 93       	push	r16
    15b8:	1f 93       	push	r17
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	0f 92       	push	r0
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
   *  Set up a voltage divider between the two probes:
   *  - Probe1: Rl pull-up
   *  - Probe2: Rl pull-down
   */

  R_PORT = pgm_read_byte(&PinRLtab[Probe1]);
    15c4:	e8 2f       	mov	r30, r24
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	e6 5f       	subi	r30, 0xF6	; 246
    15ca:	fe 4f       	sbci	r31, 0xFE	; 254
    15cc:	94 91       	lpm	r25, Z+
    15ce:	95 b9       	out	0x05, r25	; 5
  R_DDR = pgm_read_byte(&PinRLtab[Probe1]) | pgm_read_byte(&PinRLtab[Probe2]);
    15d0:	e6 2f       	mov	r30, r22
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	e6 5f       	subi	r30, 0xF6	; 246
    15d6:	fe 4f       	sbci	r31, 0xFE	; 254
    15d8:	e4 91       	lpm	r30, Z+
    15da:	e9 2b       	or	r30, r25
    15dc:	e4 b9       	out	0x04, r30	; 4

  /* read voltages */
  U1 = ReadADC(Probe1);
    15de:	69 83       	std	Y+1, r22	; 0x01
    15e0:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
    15e4:	8c 01       	movw	r16, r24
  U2 = ReadADC(Probe2);
    15e6:	69 81       	ldd	r22, Y+1	; 0x01
    15e8:	86 2f       	mov	r24, r22
    15ea:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
    15ee:	ac 01       	movw	r20, r24
  /*
   *  We expect both probe voltages to be about the same and
   *  to be half of Vcc (allowed difference +/- 20mV).
   */

  URH = ADCconfig.U_AVCC / 2;
    15f0:	20 91 40 01 	lds	r18, 0x0140
    15f4:	30 91 41 01 	lds	r19, 0x0141
    15f8:	36 95       	lsr	r19
    15fa:	27 95       	ror	r18
  if ((U1 > URH - 20) && (U1 < URH + 20))
    15fc:	c9 01       	movw	r24, r18
    15fe:	44 97       	sbiw	r24, 0x14	; 20
    1600:	80 17       	cp	r24, r16
    1602:	91 07       	cpc	r25, r17
    1604:	60 f4       	brcc	.+24     	; 0x161e <ShortedProbes+0x68>
    1606:	2c 5e       	subi	r18, 0xEC	; 236
    1608:	3f 4f       	sbci	r19, 0xFF	; 255
    160a:	02 17       	cp	r16, r18
    160c:	13 07       	cpc	r17, r19
    160e:	38 f4       	brcc	.+14     	; 0x161e <ShortedProbes+0x68>
  {
    if ((U2 > URH - 20) && (U2 < URH + 20))
    1610:	84 17       	cp	r24, r20
    1612:	95 07       	cpc	r25, r21
    1614:	20 f4       	brcc	.+8      	; 0x161e <ShortedProbes+0x68>
 *  - 1 if shorted
 */

uint8_t ShortedProbes(uint8_t Probe1, uint8_t Probe2)
{
  uint8_t           Flag1 = 0;      /* return value */
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	42 17       	cp	r20, r18
    161a:	53 07       	cpc	r21, r19
    161c:	08 f0       	brcs	.+2      	; 0x1620 <ShortedProbes+0x6a>
    161e:	80 e0       	ldi	r24, 0x00	; 0
      Flag1 = 1;
    }
  }

  /* reset port */
  R_DDR = 0;
    1620:	14 b8       	out	0x04, r1	; 4

  return Flag1;
}
    1622:	0f 90       	pop	r0
    1624:	cf 91       	pop	r28
    1626:	df 91       	pop	r29
    1628:	1f 91       	pop	r17
    162a:	0f 91       	pop	r16
    162c:	08 95       	ret

0000162e <AllProbesShorted>:
 *  - 0 if no probes are short-circuited
 *  - number of probe pairs short-circuited (3 = all)
 */

uint8_t AllProbesShorted(void)
{
    162e:	1f 93       	push	r17
  uint8_t           Flag2;      /* return value */

  /* check all possible combinations */
  Flag2 = ShortedProbes(TP1, TP2);
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	61 e0       	ldi	r22, 0x01	; 1
    1634:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <ShortedProbes>
    1638:	18 2f       	mov	r17, r24
  Flag2 += ShortedProbes(TP1, TP3);
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	62 e0       	ldi	r22, 0x02	; 2
    163e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <ShortedProbes>
    1642:	18 0f       	add	r17, r24
  Flag2 += ShortedProbes(TP2, TP3);
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	62 e0       	ldi	r22, 0x02	; 2
    1648:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <ShortedProbes>

  return Flag2;
}
    164c:	81 0f       	add	r24, r17
    164e:	1f 91       	pop	r17
    1650:	08 95       	ret

00001652 <AutoCheck>:
void AutoCheck(void) {
    1652:	2f 92       	push	r2
    1654:	3f 92       	push	r3
    1656:	4f 92       	push	r4
    1658:	5f 92       	push	r5
    165a:	6f 92       	push	r6
    165c:	7f 92       	push	r7
    165e:	8f 92       	push	r8
    1660:	9f 92       	push	r9
    1662:	af 92       	push	r10
    1664:	bf 92       	push	r11
    1666:	cf 92       	push	r12
    1668:	df 92       	push	r13
    166a:	ef 92       	push	r14
    166c:	ff 92       	push	r15
    166e:	0f 93       	push	r16
    1670:	1f 93       	push	r17
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	2e 97       	sbiw	r28, 0x0e	; 14
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	cd bf       	out	0x3d, r28	; 61
  #ifdef AUTOSCALE_ADC
  int8_t udiff;		// difference between ADC Voltage with VCC or Bandgap reference
  int8_t udiff2;
  #endif
 #endif
  ADC_PORT = TXD_VAL;
    1686:	88 e0       	ldi	r24, 0x08	; 8
    1688:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = TXD_MSK;
    168a:	87 b9       	out	0x07, r24	; 7
  #define RequireShortedProbes
  if (AllProbesShorted() != 3) return;
    168c:	0e 94 17 0b 	call	0x162e	; 0x162e <AllProbesShorted>
    1690:	83 30       	cpi	r24, 0x03	; 3
    1692:	09 f0       	breq	.+2      	; 0x1696 <AutoCheck+0x44>
    1694:	e8 c3       	rjmp	.+2000   	; 0x1e66 <AutoCheck+0x814>
  lcd_clear();
    1696:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_fix_string(SELFTEST);		// "Selftest mode.."
    169a:	85 ec       	ldi	r24, 0xC5	; 197
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>

  lcd_line2();
    16a2:	80 ec       	ldi	r24, 0xC0	; 192
    16a4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix2_string(R0_str);		// "R0="
    16a8:	80 ef       	ldi	r24, 0xF0	; 240
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[2]), (int8_t)0);	// clear zero offset
    16b0:	84 ed       	ldi	r24, 0xD4	; 212
    16b2:	91 e0       	ldi	r25, 0x01	; 1
    16b4:	60 e0       	ldi	r22, 0x00	; 0
    16b6:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__eewr_byte_m168>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (int8_t)0);	// clear zero offset
    16ba:	85 ed       	ldi	r24, 0xD5	; 213
    16bc:	91 e0       	ldi	r25, 0x01	; 1
    16be:	60 e0       	ldi	r22, 0x00	; 0
    16c0:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__eewr_byte_m168>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)0);	// clear zero offset
    16c4:	83 ed       	ldi	r24, 0xD3	; 211
    16c6:	91 e0       	ldi	r25, 0x01	; 1
    16c8:	60 e0       	ldi	r22, 0x00	; 0
    16ca:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__eewr_byte_m168>

  adcmv[0] = GetESR(TP3, TP1);
    16ce:	82 e0       	ldi	r24, 0x02	; 2
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	0e 94 24 1b 	call	0x3648	; 0x3648 <GetESR>
    16d6:	7c 01       	movw	r14, r24
    16d8:	9a 83       	std	Y+2, r25	; 0x02
    16da:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = GetESR(TP3, TP2);
    16dc:	82 e0       	ldi	r24, 0x02	; 2
    16de:	61 e0       	ldi	r22, 0x01	; 1
    16e0:	0e 94 24 1b 	call	0x3648	; 0x3648 <GetESR>
    16e4:	6c 01       	movw	r12, r24
    16e6:	9c 83       	std	Y+4, r25	; 0x04
    16e8:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = GetESR(TP2, TP1);
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	60 e0       	ldi	r22, 0x00	; 0
    16ee:	0e 94 24 1b 	call	0x3648	; 0x3648 <GetESR>
    16f2:	5c 01       	movw	r10, r24
    16f4:	9e 83       	std	Y+6, r25	; 0x06
    16f6:	8d 83       	std	Y+5, r24	; 0x05
  DisplayValue(adcmv[0],-2,' ',3);
    16f8:	b7 01       	movw	r22, r14
    16fa:	88 27       	eor	r24, r24
    16fc:	77 fd       	sbrc	r23, 7
    16fe:	80 95       	com	r24
    1700:	98 2f       	mov	r25, r24
    1702:	4e ef       	ldi	r20, 0xFE	; 254
    1704:	20 e2       	ldi	r18, 0x20	; 32
    1706:	03 e0       	ldi	r16, 0x03	; 3
    1708:	0e 94 95 02 	call	0x52a	; 0x52a <DisplayValue>
  DisplayValue(adcmv[1],-2,' ',3);
    170c:	b6 01       	movw	r22, r12
    170e:	88 27       	eor	r24, r24
    1710:	77 fd       	sbrc	r23, 7
    1712:	80 95       	com	r24
    1714:	98 2f       	mov	r25, r24
    1716:	4e ef       	ldi	r20, 0xFE	; 254
    1718:	20 e2       	ldi	r18, 0x20	; 32
    171a:	0e 94 95 02 	call	0x52a	; 0x52a <DisplayValue>
  DisplayValue(adcmv[2],-2,LCD_CHAR_OMEGA,3);
    171e:	b5 01       	movw	r22, r10
    1720:	88 27       	eor	r24, r24
    1722:	77 fd       	sbrc	r23, 7
    1724:	80 95       	com	r24
    1726:	98 2f       	mov	r25, r24
    1728:	4e ef       	ldi	r20, 0xFE	; 254
    172a:	24 ef       	ldi	r18, 0xF4	; 244
    172c:	0e 94 95 02 	call	0x52a	; 0x52a <DisplayValue>
  if (adcmv[0] < 60) {
    1730:	2c e3       	ldi	r18, 0x3C	; 60
    1732:	e2 16       	cp	r14, r18
    1734:	f1 04       	cpc	r15, r1
    1736:	2c f4       	brge	.+10     	; 0x1742 <AutoCheck+0xf0>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[2]), (int8_t)adcmv[0]);	// fix zero offset
    1738:	84 ed       	ldi	r24, 0xD4	; 212
    173a:	91 e0       	ldi	r25, 0x01	; 1
    173c:	6e 2d       	mov	r22, r14
    173e:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__eewr_byte_m168>
  }
  if (adcmv[1] < 60) {
    1742:	8c e3       	ldi	r24, 0x3C	; 60
    1744:	c8 16       	cp	r12, r24
    1746:	d1 04       	cpc	r13, r1
    1748:	2c f4       	brge	.+10     	; 0x1754 <AutoCheck+0x102>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (int8_t)adcmv[1]);	// fix zero offset
    174a:	85 ed       	ldi	r24, 0xD5	; 213
    174c:	91 e0       	ldi	r25, 0x01	; 1
    174e:	6c 2d       	mov	r22, r12
    1750:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__eewr_byte_m168>
  }
  if (adcmv[2] < 60) {
    1754:	ec e3       	ldi	r30, 0x3C	; 60
    1756:	ae 16       	cp	r10, r30
    1758:	b1 04       	cpc	r11, r1
    175a:	2c f4       	brge	.+10     	; 0x1766 <AutoCheck+0x114>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
    175c:	83 ed       	ldi	r24, 0xD3	; 211
    175e:	91 e0       	ldi	r25, 0x01	; 1
    1760:	6a 2d       	mov	r22, r10
    1762:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__eewr_byte_m168>
void AutoCheck(void) {
    1766:	10 e0       	ldi	r17, 0x00	; 0
  }
  if (adcmv[2] < 60) {
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
  }
  for(tt=0;tt<12;tt++) {
     wait_about500ms();
    1768:	84 e6       	ldi	r24, 0x64	; 100
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    1770:	4f 9b       	sbis	0x09, 7	; 9
    1772:	7b c1       	rjmp	.+758    	; 0x1a6a <AutoCheck+0x418>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (int8_t)adcmv[1]);	// fix zero offset
  }
  if (adcmv[2] < 60) {
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
  }
  for(tt=0;tt<12;tt++) {
    1774:	1f 5f       	subi	r17, 0xFF	; 255
    1776:	1c 30       	cpi	r17, 0x0C	; 12
    1778:	b9 f7       	brne	.-18     	; 0x1768 <AutoCheck+0x116>
    177a:	77 c1       	rjmp	.+750    	; 0x1a6a <AutoCheck+0x418>

 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
        lcd_line2();			//Cursor to column 1, row 2
    177c:	80 ec       	ldi	r24, 0xC0	; 192
    177e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_clear_line();		// clear total line
    1782:	0e 94 8d 02 	call	0x51a	; 0x51a <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    1786:	80 e8       	ldi	r24, 0x80	; 128
    1788:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_clear_line();		// clear total line
    178c:	0e 94 8d 02 	call	0x51a	; 0x51a <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    1790:	80 e8       	ldi	r24, 0x80	; 128
    1792:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_data('T');			//output the Testmode "T"
    1796:	84 e5       	ldi	r24, 0x54	; 84
    1798:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
        lcd_string(utoa(tt, outval, 10));	//output Test number
    179c:	8c 2d       	mov	r24, r12
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	6c e0       	ldi	r22, 0x0C	; 12
    17a2:	71 e0       	ldi	r23, 0x01	; 1
    17a4:	4a e0       	ldi	r20, 0x0A	; 10
    17a6:	50 e0       	ldi	r21, 0x00	; 0
    17a8:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <utoa>
    17ac:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
        lcd_space();
    17b0:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
                                        //############################################
        if (tt == 1) {   // output of reference voltage and factors for capacity measurement
    17b4:	fc 2d       	mov	r31, r12
    17b6:	f1 30       	cpi	r31, 0x01	; 1
    17b8:	41 f5       	brne	.+80     	; 0x180a <AutoCheck+0x1b8>
           Calibrate_UR();		// get Reference voltage, Pin resistance
    17ba:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <Calibrate_UR>
           lcd_fix2_string(URefT);	//"URef="
    17be:	86 ee       	ldi	r24, 0xE6	; 230
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
           DisplayValue(ref_mv,-3,'V',4);
    17c6:	60 91 44 01 	lds	r22, 0x0144
    17ca:	70 91 45 01 	lds	r23, 0x0145
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	4d ef       	ldi	r20, 0xFD	; 253
    17d4:	26 e5       	ldi	r18, 0x56	; 86
    17d6:	04 e0       	ldi	r16, 0x04	; 4
    17d8:	0e 94 95 02 	call	0x52a	; 0x52a <DisplayValue>
           lcd_line2();			//Cursor to column 1, row 2
    17dc:	80 ec       	ldi	r24, 0xC0	; 192
    17de:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
           lcd_fix2_string(RHfakt);	//"RHf="
    17e2:	8b ee       	ldi	r24, 0xEB	; 235
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
           lcd_string(utoa(RHmultip, outval, 10));
    17ea:	80 91 00 01 	lds	r24, 0x0100
    17ee:	90 91 01 01 	lds	r25, 0x0101
    17f2:	6c e0       	ldi	r22, 0x0C	; 12
    17f4:	71 e0       	ldi	r23, 0x01	; 1
    17f6:	4a e0       	ldi	r20, 0x0A	; 10
    17f8:	50 e0       	ldi	r21, 0x00	; 0
    17fa:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <utoa>
    17fe:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
           ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    1802:	2e eb       	ldi	r18, 0xBE	; 190
    1804:	20 93 3c 01 	sts	0x013C, r18
    1808:	12 c1       	rjmp	.+548    	; 0x1a2e <AutoCheck+0x3dc>
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
    180a:	8c 2d       	mov	r24, r12
    180c:	82 30       	cpi	r24, 0x02	; 2
    180e:	99 f5       	brne	.+102    	; 0x1876 <AutoCheck+0x224>
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1810:	60 91 40 01 	lds	r22, 0x0140
    1814:	70 91 41 01 	lds	r23, 0x0141
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	2e e4       	ldi	r18, 0x4E	; 78
    181e:	3b e1       	ldi	r19, 0x1B	; 27
    1820:	40 e0       	ldi	r20, 0x00	; 0
    1822:	50 e0       	ldi	r21, 0x00	; 0
    1824:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
    1828:	a4 01       	movw	r20, r8
    182a:	93 01       	movw	r18, r6
    182c:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <__divmodsi4>
    1830:	89 01       	movw	r16, r18
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	85 b9       	out	0x05, r24	; 5
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
    1836:	e5 e0       	ldi	r30, 0x05	; 5
    1838:	e4 b9       	out	0x04, r30	; 4
           adcmv[0] = W20msReadADC(TP1);
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	0e 94 b2 1a 	call	0x3564	; 0x3564 <W20msReadADC>
           adcmv[0] -= u680;
    1840:	80 1b       	sub	r24, r16
    1842:	91 0b       	sbc	r25, r17
    1844:	9a 83       	std	Y+2, r25	; 0x02
    1846:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//RL3 to -
    1848:	f1 e1       	ldi	r31, 0x11	; 17
    184a:	f4 b9       	out	0x04, r31	; 4
           adcmv[1] = W20msReadADC(TP1);
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	0e 94 b2 1a 	call	0x3564	; 0x3564 <W20msReadADC>
           adcmv[1] -= u680;
    1852:	80 1b       	sub	r24, r16
    1854:	91 0b       	sbc	r25, r17
    1856:	9c 83       	std	Y+4, r25	; 0x04
    1858:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 1<<(TP2*2);		//RL2 to VCC
    185a:	24 e0       	ldi	r18, 0x04	; 4
    185c:	25 b9       	out	0x05, r18	; 5
           R_DDR = (1<<(TP2*2)) | (1<<(TP3*2));	//RL3 to -
    185e:	84 e1       	ldi	r24, 0x14	; 20
    1860:	84 b9       	out	0x04, r24	; 4
           adcmv[2] = W20msReadADC(TP2);
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	0e 94 b2 1a 	call	0x3564	; 0x3564 <W20msReadADC>
           adcmv[2] -= u680;
    1868:	80 1b       	sub	r24, r16
    186a:	91 0b       	sbc	r25, r17
    186c:	9e 83       	std	Y+6, r25	; 0x06
    186e:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RLRL);	// "RLRL"
    1870:	8f e5       	ldi	r24, 0x5F	; 95
    1872:	91 e0       	ldi	r25, 0x01	; 1
    1874:	b1 c0       	rjmp	.+354    	; 0x19d8 <AutoCheck+0x386>
        }
                                        //############################################
        if (tt == 3) { // how equal are the RH resistors
    1876:	ec 2d       	mov	r30, r12
    1878:	e3 30       	cpi	r30, 0x03	; 3
    187a:	41 f5       	brne	.+80     	; 0x18cc <AutoCheck+0x27a>
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    187c:	f5 b8       	out	0x05, r15	; 5
           R_DDR = (2<<(TP1*2)) | (2<<(TP2*2));	//RH2 to -
    187e:	fa e0       	ldi	r31, 0x0A	; 10
    1880:	f4 b9       	out	0x04, r31	; 4
           adcmv[0] = W20msReadADC(TP1);
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	0e 94 b2 1a 	call	0x3564	; 0x3564 <W20msReadADC>
           adcmv[3] = ADCconfig.U_AVCC / 2;
    1888:	00 91 40 01 	lds	r16, 0x0140
    188c:	10 91 41 01 	lds	r17, 0x0141
    1890:	16 95       	lsr	r17
    1892:	07 95       	ror	r16
    1894:	18 87       	std	Y+8, r17	; 0x08
    1896:	0f 83       	std	Y+7, r16	; 0x07
           adcmv[0] -= adcmv[3];
    1898:	80 1b       	sub	r24, r16
    189a:	91 0b       	sbc	r25, r17
    189c:	9a 83       	std	Y+2, r25	; 0x02
    189e:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (2<<(TP1*2)) | (2<<(TP3*2));	//RH3 to -
    18a0:	22 e2       	ldi	r18, 0x22	; 34
    18a2:	24 b9       	out	0x04, r18	; 4
           adcmv[1] = W20msReadADC(TP1);
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	0e 94 b2 1a 	call	0x3564	; 0x3564 <W20msReadADC>
           adcmv[1] -= adcmv[3];
    18aa:	80 1b       	sub	r24, r16
    18ac:	91 0b       	sbc	r25, r17
    18ae:	9c 83       	std	Y+4, r25	; 0x04
    18b0:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 2<<(TP2*2);		//RL2 to VCC
    18b2:	e5 b8       	out	0x05, r14	; 5
           R_DDR = (2<<(TP2*2)) | (2<<(TP3*2));	//RH3 to -
    18b4:	88 e2       	ldi	r24, 0x28	; 40
    18b6:	84 b9       	out	0x04, r24	; 4
           adcmv[2] = W20msReadADC(TP2);
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	0e 94 b2 1a 	call	0x3564	; 0x3564 <W20msReadADC>
           adcmv[2] -= adcmv[3];
    18be:	80 1b       	sub	r24, r16
    18c0:	91 0b       	sbc	r25, r17
    18c2:	9e 83       	std	Y+6, r25	; 0x06
    18c4:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RHRH);	// "RHRH"
    18c6:	8d e6       	ldi	r24, 0x6D	; 109
    18c8:	91 e0       	ldi	r25, 0x01	; 1
    18ca:	86 c0       	rjmp	.+268    	; 0x19d8 <AutoCheck+0x386>
        }
                                        //############################################
        if (tt == 4) { // Text release probes
    18cc:	ec 2d       	mov	r30, r12
    18ce:	e4 30       	cpi	r30, 0x04	; 4
    18d0:	51 f4       	brne	.+20     	; 0x18e6 <AutoCheck+0x294>
           lcd_fix_string(RELPROBE);	// "Release Probes"
    18d2:	85 ed       	ldi	r24, 0xD5	; 213
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           if (AllProbesShorted() != 0) ww = MAX_REP-2;
    18da:	0e 94 17 0b 	call	0x162e	; 0x162e <AllProbesShorted>
    18de:	88 23       	and	r24, r24
    18e0:	09 f0       	breq	.+2      	; 0x18e4 <AutoCheck+0x292>
    18e2:	be c2       	rjmp	.+1404   	; 0x1e60 <AutoCheck+0x80e>
    18e4:	7f c0       	rjmp	.+254    	; 0x19e4 <AutoCheck+0x392>
        }
                                        //############################################
        if (tt == 5) { // can we switch the ADC pins to GND across R_H resistor?
    18e6:	fc 2d       	mov	r31, r12
    18e8:	f5 30       	cpi	r31, 0x05	; 5
    18ea:	b1 f4       	brne	.+44     	; 0x1918 <AutoCheck+0x2c6>
           R_PORT = 0;
    18ec:	15 b8       	out	0x05, r1	; 5
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to GND
    18ee:	f4 b8       	out	0x04, r15	; 4
           adcmv[0] = W20msReadADC(TP1);
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	0e 94 b2 1a 	call	0x3564	; 0x3564 <W20msReadADC>
    18f6:	9a 83       	std	Y+2, r25	; 0x02
    18f8:	89 83       	std	Y+1, r24	; 0x01

           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to GND
    18fa:	e4 b8       	out	0x04, r14	; 4
           adcmv[1] = W20msReadADC(TP2);
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	0e 94 b2 1a 	call	0x3564	; 0x3564 <W20msReadADC>
    1902:	9c 83       	std	Y+4, r25	; 0x04
    1904:	8b 83       	std	Y+3, r24	; 0x03

           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1906:	b4 b8       	out	0x04, r11	; 4
           adcmv[2] = W20msReadADC(TP3);
    1908:	82 e0       	ldi	r24, 0x02	; 2
    190a:	0e 94 b2 1a 	call	0x3564	; 0x3564 <W20msReadADC>
    190e:	9e 83       	std	Y+6, r25	; 0x06
    1910:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RH1L);	// "RH_Lo="
    1912:	87 e5       	ldi	r24, 0x57	; 87
    1914:	91 e0       	ldi	r25, 0x01	; 1
    1916:	60 c0       	rjmp	.+192    	; 0x19d8 <AutoCheck+0x386>
        }
                                        //############################################
        if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
    1918:	2c 2d       	mov	r18, r12
    191a:	26 30       	cpi	r18, 0x06	; 6
    191c:	51 f5       	brne	.+84     	; 0x1972 <AutoCheck+0x320>
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to VCC
    191e:	f4 b8       	out	0x04, r15	; 4
           R_PORT = 2<<(TP1*2);
    1920:	f5 b8       	out	0x05, r15	; 5
           adcmv[0] = W20msReadADC(TP1) - ADCconfig.U_AVCC;
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	0e 94 b2 1a 	call	0x3564	; 0x3564 <W20msReadADC>
    1928:	20 91 40 01 	lds	r18, 0x0140
    192c:	30 91 41 01 	lds	r19, 0x0141
    1930:	82 1b       	sub	r24, r18
    1932:	93 0b       	sbc	r25, r19
    1934:	9a 83       	std	Y+2, r25	; 0x02
    1936:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to VCC
    1938:	e4 b8       	out	0x04, r14	; 4
           R_PORT = 2<<(TP2*2);
    193a:	e5 b8       	out	0x05, r14	; 5
           adcmv[1] = W20msReadADC(TP2) - ADCconfig.U_AVCC;
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	0e 94 b2 1a 	call	0x3564	; 0x3564 <W20msReadADC>
    1942:	20 91 40 01 	lds	r18, 0x0140
    1946:	30 91 41 01 	lds	r19, 0x0141
    194a:	82 1b       	sub	r24, r18
    194c:	93 0b       	sbc	r25, r19
    194e:	9c 83       	std	Y+4, r25	; 0x04
    1950:	8b 83       	std	Y+3, r24	; 0x03
           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to VCC
    1952:	b4 b8       	out	0x04, r11	; 4
           R_PORT = 2<<(TP3*2);
    1954:	b5 b8       	out	0x05, r11	; 5
           adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
    1956:	82 e0       	ldi	r24, 0x02	; 2
    1958:	0e 94 b2 1a 	call	0x3564	; 0x3564 <W20msReadADC>
    195c:	20 91 40 01 	lds	r18, 0x0140
    1960:	30 91 41 01 	lds	r19, 0x0141
    1964:	82 1b       	sub	r24, r18
    1966:	93 0b       	sbc	r25, r19
    1968:	9e 83       	std	Y+6, r25	; 0x06
    196a:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RH1H);	// "RH_Hi="
    196c:	8b e5       	ldi	r24, 0x5B	; 91
    196e:	91 e0       	ldi	r25, 0x01	; 1
    1970:	33 c0       	rjmp	.+102    	; 0x19d8 <AutoCheck+0x386>
        }
        if (tt == 7) { // can we switch the ADC pins to VCC across the R_H resistor?
    1972:	8c 2d       	mov	r24, r12
    1974:	87 30       	cpi	r24, 0x07	; 7
    1976:	99 f5       	brne	.+102    	; 0x19de <AutoCheck+0x38c>
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_H_VAL*100));
    1978:	60 91 40 01 	lds	r22, 0x0140
    197c:	70 91 41 01 	lds	r23, 0x0141
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	2e e4       	ldi	r18, 0x4E	; 78
    1986:	3b e1       	ldi	r19, 0x1B	; 27
    1988:	40 e0       	ldi	r20, 0x00	; 0
    198a:	50 e0       	ldi	r21, 0x00	; 0
    198c:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
    1990:	a2 01       	movw	r20, r4
    1992:	91 01       	movw	r18, r2
    1994:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <__divmodsi4>
    1998:	89 01       	movw	r16, r18
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    199a:	f5 b8       	out	0x05, r15	; 5
           R_DDR = (2<<(TP1*2)) | (1<<(TP1*2));	//RH1 to +, RL1 to -
    199c:	e3 e0       	ldi	r30, 0x03	; 3
    199e:	e4 b9       	out	0x04, r30	; 4
           adcmv[0] = W20msReadADC(TP1);
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	0e 94 b2 1a 	call	0x3564	; 0x3564 <W20msReadADC>
           adcmv[0] -= u680;
    19a6:	80 1b       	sub	r24, r16
    19a8:	91 0b       	sbc	r25, r17
    19aa:	9a 83       	std	Y+2, r25	; 0x02
    19ac:	89 83       	std	Y+1, r24	; 0x01
           R_PORT = 2<<(TP2*2);		//RH2 to VCC
    19ae:	e5 b8       	out	0x05, r14	; 5
           R_DDR = (2<<(TP2*2)) | (1<<(TP2*2));	//RH2 to +, RL2 to -
    19b0:	fc e0       	ldi	r31, 0x0C	; 12
    19b2:	f4 b9       	out	0x04, r31	; 4
           adcmv[1] = W20msReadADC(TP2);
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	0e 94 b2 1a 	call	0x3564	; 0x3564 <W20msReadADC>
           adcmv[1] -= u680;
    19ba:	80 1b       	sub	r24, r16
    19bc:	91 0b       	sbc	r25, r17
    19be:	9c 83       	std	Y+4, r25	; 0x04
    19c0:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 2<<(TP3*2);		//RH3 to VCC
    19c2:	b5 b8       	out	0x05, r11	; 5
           R_DDR = (2<<(TP3*2)) | (1<<(TP3*2));	//RH3 to +, RL3 to -
    19c4:	d4 b8       	out	0x04, r13	; 4
           adcmv[2] = W20msReadADC(TP3);
    19c6:	82 e0       	ldi	r24, 0x02	; 2
    19c8:	0e 94 b2 1a 	call	0x3564	; 0x3564 <W20msReadADC>
           adcmv[2] -= u680;
    19cc:	80 1b       	sub	r24, r16
    19ce:	91 0b       	sbc	r25, r17
    19d0:	9e 83       	std	Y+6, r25	; 0x06
    19d2:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RHRL);	// "RH/RL"
    19d4:	8b e7       	ldi	r24, 0x7B	; 123
    19d6:	91 e0       	ldi	r25, 0x01	; 1
    19d8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    19dc:	03 c0       	rjmp	.+6      	; 0x19e4 <AutoCheck+0x392>
        }
                                        //############################################
        if (tt > 1) {	// output 3 voltages 
    19de:	2c 2d       	mov	r18, r12
    19e0:	21 30       	cpi	r18, 0x01	; 1
    19e2:	29 f1       	breq	.+74     	; 0x1a2e <AutoCheck+0x3dc>
           lcd_line2();			//Cursor to column 1, row 2
    19e4:	80 ec       	ldi	r24, 0xC0	; 192
    19e6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
           lcd_string(itoa(adcmv[0], outval, 10));	//output voltage 1
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	9a 81       	ldd	r25, Y+2	; 0x02
    19ee:	6c e0       	ldi	r22, 0x0C	; 12
    19f0:	71 e0       	ldi	r23, 0x01	; 1
    19f2:	4a e0       	ldi	r20, 0x0A	; 10
    19f4:	50 e0       	ldi	r21, 0x00	; 0
    19f6:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <itoa>
    19fa:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
           lcd_space();
    19fe:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
           lcd_string(itoa(adcmv[1], outval, 10));	//output voltage 2
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	9c 81       	ldd	r25, Y+4	; 0x04
    1a06:	6c e0       	ldi	r22, 0x0C	; 12
    1a08:	71 e0       	ldi	r23, 0x01	; 1
    1a0a:	4a e0       	ldi	r20, 0x0A	; 10
    1a0c:	50 e0       	ldi	r21, 0x00	; 0
    1a0e:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <itoa>
    1a12:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
           lcd_space();
    1a16:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
           lcd_string(itoa(adcmv[2], outval, 10));	//output voltage 3
    1a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1e:	6c e0       	ldi	r22, 0x0C	; 12
    1a20:	71 e0       	ldi	r23, 0x01	; 1
    1a22:	4a e0       	ldi	r20, 0x0A	; 10
    1a24:	50 e0       	ldi	r21, 0x00	; 0
    1a26:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <itoa>
    1a2a:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
        }
        ADC_DDR =  TXD_MSK;		// all-Pins to Input
    1a2e:	e7 b8       	out	0x07, r14	; 7
        ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
    1a30:	e8 b8       	out	0x08, r14	; 8
        R_DDR = 0;			// all R-Ports to Input
    1a32:	14 b8       	out	0x04, r1	; 4
        R_PORT = 0;
    1a34:	15 b8       	out	0x05, r1	; 5
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    1a36:	4f 9b       	sbis	0x09, 7	; 9
    1a38:	0f c0       	rjmp	.+30     	; 0x1a58 <AutoCheck+0x406>
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
    1a3a:	84 e6       	ldi	r24, 0x64	; 100
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    1a42:	4f 9b       	sbis	0x09, 7	; 9
    1a44:	09 c0       	rjmp	.+18     	; 0x1a58 <AutoCheck+0x406>
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
    1a46:	84 e6       	ldi	r24, 0x64	; 100
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>
  } /* end for tt */

 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
    1a4e:	a3 94       	inc	r10
    1a50:	8a 2d       	mov	r24, r10
    1a52:	84 30       	cpi	r24, 0x04	; 4
    1a54:	08 f4       	brcc	.+2      	; 0x1a58 <AutoCheck+0x406>
    1a56:	92 ce       	rjmp	.-732    	; 0x177c <AutoCheck+0x12a>
    1a58:	1c 2d       	mov	r17, r12
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
     } //end for ww
     wait_about1s();
    1a5a:	88 ec       	ldi	r24, 0xC8	; 200
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>
     }
  } /* end for tt */

 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    1a62:	1f 5f       	subi	r17, 0xFF	; 255
    1a64:	18 30       	cpi	r17, 0x08	; 8
    1a66:	89 f4       	brne	.+34     	; 0x1a8a <AutoCheck+0x438>
    1a68:	19 c0       	rjmp	.+50     	; 0x1a9c <AutoCheck+0x44a>
  if (adcmv[2] < 60) {
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
  }
  for(tt=0;tt<12;tt++) {
     wait_about500ms();
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    1a6a:	11 e0       	ldi	r17, 0x01	; 1
           R_PORT = 2<<(TP3*2);
           adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
           lcd_fix_string(RH1H);	// "RH_Hi="
        }
        if (tt == 7) { // can we switch the ADC pins to VCC across the R_H resistor?
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_H_VAL*100));
    1a6c:	6e ea       	ldi	r22, 0xAE	; 174
    1a6e:	26 2e       	mov	r2, r22
    1a70:	62 ed       	ldi	r22, 0xD2	; 210
    1a72:	36 2e       	mov	r3, r22
    1a74:	67 e4       	ldi	r22, 0x47	; 71
    1a76:	46 2e       	mov	r4, r22
    1a78:	51 2c       	mov	r5, r1
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    1a7a:	52 e0       	ldi	r21, 0x02	; 2
    1a7c:	f5 2e       	mov	r15, r21
           R_DDR = (2<<(TP1*2)) | (1<<(TP1*2));	//RH1 to +, RL1 to -
           adcmv[0] = W20msReadADC(TP1);
           adcmv[0] -= u680;
           R_PORT = 2<<(TP2*2);		//RH2 to VCC
    1a7e:	48 e0       	ldi	r20, 0x08	; 8
    1a80:	e4 2e       	mov	r14, r20
           R_DDR = (2<<(TP2*2)) | (1<<(TP2*2));	//RH2 to +, RL2 to -
           adcmv[1] = W20msReadADC(TP2);
           adcmv[1] -= u680;
           R_PORT = 2<<(TP3*2);		//RH3 to VCC
    1a82:	30 e2       	ldi	r19, 0x20	; 32
    1a84:	b3 2e       	mov	r11, r19
           R_DDR = (2<<(TP3*2)) | (1<<(TP3*2));	//RH3 to +, RL3 to -
    1a86:	20 e3       	ldi	r18, 0x30	; 48
    1a88:	d2 2e       	mov	r13, r18
void AutoCheck(void) {
    1a8a:	aa 24       	eor	r10, r10
           lcd_string(utoa(RHmultip, outval, 10));
           ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1a8c:	9a eb       	ldi	r25, 0xBA	; 186
    1a8e:	69 2e       	mov	r6, r25
    1a90:	96 e3       	ldi	r25, 0x36	; 54
    1a92:	79 2e       	mov	r7, r25
    1a94:	81 2c       	mov	r8, r1
    1a96:	91 2c       	mov	r9, r1
    1a98:	c1 2e       	mov	r12, r17
    1a9a:	70 ce       	rjmp	.-800    	; 0x177c <AutoCheck+0x12a>
        wait_about500ms();
     } //end for ww
     wait_about1s();
  } //end for tt

  lcd_clear();
    1a9c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_fix_string(RIHI);	// "RiHi="
    1aa0:	81 e8       	ldi	r24, 0x81	; 129
    1aa2:	91 e0       	ldi	r25, 0x01	; 1
    1aa4:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  DisplayValue(RRpinPL,-1,LCD_CHAR_OMEGA,3);
    1aa8:	60 91 42 01 	lds	r22, 0x0142
    1aac:	70 91 43 01 	lds	r23, 0x0143
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	4f ef       	ldi	r20, 0xFF	; 255
    1ab6:	24 ef       	ldi	r18, 0xF4	; 244
    1ab8:	03 e0       	ldi	r16, 0x03	; 3
    1aba:	0e 94 95 02 	call	0x52a	; 0x52a <DisplayValue>
  lcd_line2();
    1abe:	80 ec       	ldi	r24, 0xC0	; 192
    1ac0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(RILO);	// "RiLo="
    1ac4:	88 e8       	ldi	r24, 0x88	; 136
    1ac6:	91 e0       	ldi	r25, 0x01	; 1
    1ac8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  DisplayValue(RRpinMI,-1,LCD_CHAR_OMEGA,3);
    1acc:	60 91 47 01 	lds	r22, 0x0147
    1ad0:	70 91 48 01 	lds	r23, 0x0148
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	4f ef       	ldi	r20, 0xFF	; 255
    1ada:	24 ef       	ldi	r18, 0xF4	; 244
    1adc:	0e 94 95 02 	call	0x52a	; 0x52a <DisplayValue>
  wait_about2s();			//wait 2 seconds
    1ae0:	80 e9       	ldi	r24, 0x90	; 144
    1ae2:	91 e0       	ldi	r25, 0x01	; 1
    1ae4:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>

  //measure Zero offset for Capacity measurement
  adcmv[3] = 0;
    1ae8:	18 86       	std	Y+8, r1	; 0x08
    1aea:	1f 82       	std	Y+7, r1	; 0x07
  PartFound = PART_NONE;
    1aec:	10 92 07 01 	sts	0x0107, r1
  ReadCapacity(TP3, TP1);
    1af0:	82 e0       	ldi	r24, 0x02	; 2
    1af2:	60 e0       	ldi	r22, 0x00	; 0
    1af4:	0e 94 14 15 	call	0x2a28	; 0x2a28 <ReadCapacity>
  adcmv[5] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:3
    1af8:	00 91 6a 01 	lds	r16, 0x016A
    1afc:	10 91 6b 01 	lds	r17, 0x016B
    1b00:	1c 87       	std	Y+12, r17	; 0x0c
    1b02:	0b 87       	std	Y+11, r16	; 0x0b
  ReadCapacity(TP3, TP2);
    1b04:	82 e0       	ldi	r24, 0x02	; 2
    1b06:	61 e0       	ldi	r22, 0x01	; 1
    1b08:	0e 94 14 15 	call	0x2a28	; 0x2a28 <ReadCapacity>
  adcmv[6] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:3
    1b0c:	e0 90 6a 01 	lds	r14, 0x016A
    1b10:	f0 90 6b 01 	lds	r15, 0x016B
    1b14:	fe 86       	std	Y+14, r15	; 0x0e
    1b16:	ed 86       	std	Y+13, r14	; 0x0d
  ReadCapacity(TP2, TP1);
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	60 e0       	ldi	r22, 0x00	; 0
    1b1c:	0e 94 14 15 	call	0x2a28	; 0x2a28 <ReadCapacity>
  adcmv[2] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:2
    1b20:	c0 90 6a 01 	lds	r12, 0x016A
    1b24:	d0 90 6b 01 	lds	r13, 0x016B
    1b28:	de 82       	std	Y+6, r13	; 0x06
    1b2a:	cd 82       	std	Y+5, r12	; 0x05
  ReadCapacity(TP1, TP3);
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	62 e0       	ldi	r22, 0x02	; 2
    1b30:	0e 94 14 15 	call	0x2a28	; 0x2a28 <ReadCapacity>
  adcmv[1] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:1
    1b34:	80 91 6a 01 	lds	r24, 0x016A
    1b38:	90 91 6b 01 	lds	r25, 0x016B
    1b3c:	9c 83       	std	Y+4, r25	; 0x04
    1b3e:	8b 83       	std	Y+3, r24	; 0x03
  ReadCapacity(TP2, TP3);
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	62 e0       	ldi	r22, 0x02	; 2
    1b44:	0e 94 14 15 	call	0x2a28	; 0x2a28 <ReadCapacity>
  adcmv[4] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:2
    1b48:	80 91 6a 01 	lds	r24, 0x016A
    1b4c:	90 91 6b 01 	lds	r25, 0x016B
    1b50:	9a 87       	std	Y+10, r25	; 0x0a
    1b52:	89 87       	std	Y+9, r24	; 0x09
  ReadCapacity(TP1, TP2);
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	61 e0       	ldi	r22, 0x01	; 1
    1b58:	0e 94 14 15 	call	0x2a28	; 0x2a28 <ReadCapacity>
  adcmv[0] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:1
    1b5c:	80 91 6a 01 	lds	r24, 0x016A
    1b60:	90 91 6b 01 	lds	r25, 0x016B
    1b64:	9a 83       	std	Y+2, r25	; 0x02
    1b66:	89 83       	std	Y+1, r24	; 0x01
  lcd_clear();
    1b68:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_fix_string(C0_str);			//output "C0 "
    1b6c:	8f e8       	ldi	r24, 0x8F	; 143
    1b6e:	91 e0       	ldi	r25, 0x01	; 1
    1b70:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
    1b74:	b8 01       	movw	r22, r16
    1b76:	88 27       	eor	r24, r24
    1b78:	77 fd       	sbrc	r23, 7
    1b7a:	80 95       	com	r24
    1b7c:	98 2f       	mov	r25, r24
    1b7e:	40 e0       	ldi	r20, 0x00	; 0
    1b80:	20 e2       	ldi	r18, 0x20	; 32
    1b82:	03 e0       	ldi	r16, 0x03	; 3
    1b84:	0e 94 95 02 	call	0x52a	; 0x52a <DisplayValue>
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
    1b88:	b7 01       	movw	r22, r14
    1b8a:	88 27       	eor	r24, r24
    1b8c:	77 fd       	sbrc	r23, 7
    1b8e:	80 95       	com	r24
    1b90:	98 2f       	mov	r25, r24
    1b92:	40 e0       	ldi	r20, 0x00	; 0
    1b94:	20 e2       	ldi	r18, 0x20	; 32
    1b96:	0e 94 95 02 	call	0x52a	; 0x52a <DisplayValue>
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
    1b9a:	b6 01       	movw	r22, r12
    1b9c:	88 27       	eor	r24, r24
    1b9e:	77 fd       	sbrc	r23, 7
    1ba0:	80 95       	com	r24
    1ba2:	98 2f       	mov	r25, r24
    1ba4:	44 ef       	ldi	r20, 0xF4	; 244
    1ba6:	26 e4       	ldi	r18, 0x46	; 70
    1ba8:	0e 94 95 02 	call	0x52a	; 0x52a <DisplayValue>
    1bac:	8e 01       	movw	r16, r28
    1bae:	0f 5f       	subi	r16, 0xFF	; 255
    1bb0:	1f 4f       	sbci	r17, 0xFF	; 255
void AutoCheck(void) {
    1bb2:	ce 01       	movw	r24, r28
    1bb4:	0f 96       	adiw	r24, 0x0f	; 15
    1bb6:	f8 01       	movw	r30, r16
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
    1bb8:	21 91       	ld	r18, Z+
    1bba:	31 91       	ld	r19, Z+
    1bbc:	27 34       	cpi	r18, 0x47	; 71
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	ec f4       	brge	.+58     	; 0x1bfc <AutoCheck+0x5aa>
  lcd_fix_string(C0_str);			//output "C0 "
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
    1bc2:	e8 17       	cp	r30, r24
    1bc4:	f9 07       	cpc	r31, r25
    1bc6:	c1 f7       	brne	.-16     	; 0x1bb8 <AutoCheck+0x566>
    1bc8:	ee 24       	eor	r14, r14
    1bca:	ff 24       	eor	r15, r15
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
    1bcc:	f8 01       	movw	r30, r16
    1bce:	60 81       	ld	r22, Z
    1bd0:	0e 5f       	subi	r16, 0xFE	; 254
    1bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd4:	61 5f       	subi	r22, 0xF1	; 241
    1bd6:	c7 01       	movw	r24, r14
    1bd8:	85 53       	subi	r24, 0x35	; 53
    1bda:	9e 4f       	sbci	r25, 0xFE	; 254
    1bdc:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__eewr_byte_m168>
    1be0:	08 94       	sec
    1be2:	e1 1c       	adc	r14, r1
    1be4:	f1 1c       	adc	r15, r1
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
    1be6:	f7 e0       	ldi	r31, 0x07	; 7
    1be8:	ef 16       	cp	r14, r31
    1bea:	f1 04       	cpc	r15, r1
    1bec:	79 f7       	brne	.-34     	; 0x1bcc <AutoCheck+0x57a>
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
  }
  lcd_line2();
    1bee:	80 ec       	ldi	r24, 0xC0	; 192
    1bf0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(OK_str);		// output "OK"
    1bf4:	83 ef       	ldi	r24, 0xF3	; 243
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
no_c0save:
 #endif
 wait_about2s();		//wait 2 seconds
    1bfc:	80 e9       	ldi	r24, 0x90	; 144
    1bfe:	91 e0       	ldi	r25, 0x01	; 1
    1c00:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
    1c04:	10 e0       	ldi	r17, 0x00	; 0
 for (ww=0;ww<64;ww++) {
    1c06:	cc 24       	eor	r12, r12
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
    1c08:	8a e0       	ldi	r24, 0x0A	; 10
    1c0a:	88 2e       	mov	r8, r24
    1c0c:	91 2c       	mov	r9, r1
    1c0e:	a1 2c       	mov	r10, r1
    1c10:	b1 2c       	mov	r11, r1
     lcd_data('3');
     lcd_fix2_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1c12:	02 e6       	ldi	r16, 0x62	; 98
    1c14:	e0 2e       	mov	r14, r16
    1c16:	01 e0       	ldi	r16, 0x01	; 1
    1c18:	f0 2e       	mov	r15, r16
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
     lcd_clear();
    1c1a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
     lcd_data('1');
    1c1e:	81 e3       	ldi	r24, 0x31	; 49
    1c20:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
     lcd_fix_string(CapZeich);	// "-||-"
    1c24:	85 e2       	ldi	r24, 0x25	; 37
    1c26:	91 e0       	ldi	r25, 0x01	; 1
    1c28:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_data('3');
    1c2c:	83 e3       	ldi	r24, 0x33	; 51
    1c2e:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
     lcd_fix2_string(MinCap_str); // " >100nF!"
    1c32:	84 ef       	ldi	r24, 0xF4	; 244
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
     PartFound = PART_NONE;
    1c3a:	10 92 07 01 	sts	0x0107, r1
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
    1c3e:	82 e0       	ldi	r24, 0x02	; 2
    1c40:	60 e0       	ldi	r22, 0x00	; 0
    1c42:	0e 94 14 15 	call	0x2a28	; 0x2a28 <ReadCapacity>
    1c46:	20 91 62 01 	lds	r18, 0x0162
    1c4a:	30 91 63 01 	lds	r19, 0x0163
    1c4e:	40 91 64 01 	lds	r20, 0x0164
    1c52:	50 91 65 01 	lds	r21, 0x0165
    1c56:	00 91 74 01 	lds	r16, 0x0174
     while (cap.cpre < -9) {
    1c5a:	07 c0       	rjmp	.+14     	; 0x1c6a <AutoCheck+0x618>
        cap.cpre++;
        cap.cval /= 10;
    1c5c:	ca 01       	movw	r24, r20
    1c5e:	b9 01       	movw	r22, r18
    1c60:	a5 01       	movw	r20, r10
    1c62:	94 01       	movw	r18, r8
    1c64:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
    1c68:	0f 5f       	subi	r16, 0xFF	; 255
     lcd_data('3');
     lcd_fix2_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1c6a:	07 3f       	cpi	r16, 0xF7	; 247
    1c6c:	bc f3       	brlt	.-18     	; 0x1c5c <AutoCheck+0x60a>
    1c6e:	00 93 74 01 	sts	0x0174, r16
    1c72:	20 93 62 01 	sts	0x0162, r18
    1c76:	f7 01       	movw	r30, r14
    1c78:	31 83       	std	Z+1, r19	; 0x01
    1c7a:	42 83       	std	Z+2, r20	; 0x02
    1c7c:	53 83       	std	Z+3, r21	; 0x03
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1c7e:	07 3f       	cpi	r16, 0xF7	; 247
    1c80:	09 f0       	breq	.+2      	; 0x1c84 <AutoCheck+0x632>
    1c82:	b9 c0       	rjmp	.+370    	; 0x1df6 <AutoCheck+0x7a4>
    1c84:	20 36       	cpi	r18, 0x60	; 96
    1c86:	31 05       	cpc	r19, r1
    1c88:	41 05       	cpc	r20, r1
    1c8a:	51 05       	cpc	r21, r1
    1c8c:	08 f4       	brcc	.+2      	; 0x1c90 <AutoCheck+0x63e>
    1c8e:	b3 c0       	rjmp	.+358    	; 0x1df6 <AutoCheck+0x7a4>
    1c90:	20 3f       	cpi	r18, 0xF0	; 240
    1c92:	f5 e5       	ldi	r31, 0x55	; 85
    1c94:	3f 07       	cpc	r19, r31
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	4f 07       	cpc	r20, r31
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	5f 07       	cpc	r21, r31
    1c9e:	08 f0       	brcs	.+2      	; 0x1ca2 <AutoCheck+0x650>
    1ca0:	aa c0       	rjmp	.+340    	; 0x1df6 <AutoCheck+0x7a4>
        cap_found++;
    1ca2:	1f 5f       	subi	r17, 0xFF	; 255
     } else {
        cap_found = 0;		// wait for stable connection
     }
     if (cap_found > 1) {
    1ca4:	12 30       	cpi	r17, 0x02	; 2
    1ca6:	09 f0       	breq	.+2      	; 0x1caa <AutoCheck+0x658>
    1ca8:	a7 c0       	rjmp	.+334    	; 0x1df8 <AutoCheck+0x7a6>
        // value of capacitor is correct
        (void) eeprom_write_word((uint16_t *)(&ref_offset), load_diff);	// hold zero offset + slew rate dependend offset
    1caa:	60 91 76 01 	lds	r22, 0x0176
    1cae:	70 91 77 01 	lds	r23, 0x0177
    1cb2:	89 ec       	ldi	r24, 0xC9	; 201
    1cb4:	91 e0       	ldi	r25, 0x01	; 1
    1cb6:	0e 94 7c 1f 	call	0x3ef8	; 0x3ef8 <__eewr_word_m168>
        lcd_clear();
    1cba:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
        lcd_fix2_string(REF_C_str);	// "REF_C="
    1cbe:	8c ef       	ldi	r24, 0xFC	; 252
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
        lcd_string(itoa(load_diff, outval, 10));	//output REF_C_KORR
    1cc6:	80 91 76 01 	lds	r24, 0x0176
    1cca:	90 91 77 01 	lds	r25, 0x0177
    1cce:	6c e0       	ldi	r22, 0x0C	; 12
    1cd0:	71 e0       	ldi	r23, 0x01	; 1
    1cd2:	4a e0       	ldi	r20, 0x0A	; 10
    1cd4:	50 e0       	ldi	r21, 0x00	; 0
    1cd6:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <itoa>
    1cda:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
        wait_about1s();
        }
//#######################################
#endif
  #ifdef AUTOSCALE_ADC
        ADC_PORT =  TXD_VAL;	//ADC-Port 1 to GND
    1cde:	88 e0       	ldi	r24, 0x08	; 8
    1ce0:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    1ce2:	89 e0       	ldi	r24, 0x09	; 9
    1ce4:	87 b9       	out	0x07, r24	; 7
        R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1ce6:	80 e2       	ldi	r24, 0x20	; 32
    1ce8:	84 b9       	out	0x04, r24	; 4
        do {
           adcmv[0] = ReadADC(TP3);
    1cea:	82 e0       	ldi	r24, 0x02	; 2
    1cec:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
        } while (adcmv[0] > 980);
    1cf0:	23 e0       	ldi	r18, 0x03	; 3
    1cf2:	85 3d       	cpi	r24, 0xD5	; 213
    1cf4:	92 07       	cpc	r25, r18
    1cf6:	cc f7       	brge	.-14     	; 0x1cea <AutoCheck+0x698>
        R_DDR = 0;		//all Pins to input 
    1cf8:	14 b8       	out	0x04, r1	; 4
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1cfa:	10 92 3f 01 	sts	0x013F, r1
    1cfe:	10 92 3e 01 	sts	0x013E, r1
        adcmv[0] = ReadADC(TP3);  // get cap voltage with VCC reference
    1d02:	82 e0       	ldi	r24, 0x02	; 2
    1d04:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
    1d08:	4c 01       	movw	r8, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1d0a:	81 ec       	ldi	r24, 0xC1	; 193
    1d0c:	91 e0       	ldi	r25, 0x01	; 1
    1d0e:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__eerd_byte_m168>
    1d12:	99 27       	eor	r25, r25
    1d14:	87 fd       	sbrc	r24, 7
    1d16:	90 95       	com	r25
    1d18:	20 91 44 01 	lds	r18, 0x0144
    1d1c:	30 91 45 01 	lds	r19, 0x0145
    1d20:	82 0f       	add	r24, r18
    1d22:	93 1f       	adc	r25, r19
    1d24:	90 93 3f 01 	sts	0x013F, r25
    1d28:	80 93 3e 01 	sts	0x013E, r24
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
    1d2c:	82 e0       	ldi	r24, 0x02	; 2
    1d2e:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
    1d32:	8c 01       	movw	r16, r24
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1d34:	10 92 3f 01 	sts	0x013F, r1
    1d38:	10 92 3e 01 	sts	0x013E, r1
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
    1d3c:	82 e0       	ldi	r24, 0x02	; 2
    1d3e:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
    1d42:	5c 01       	movw	r10, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1d44:	c0 90 44 01 	lds	r12, 0x0144
    1d48:	d0 90 45 01 	lds	r13, 0x0145
    1d4c:	81 ec       	ldi	r24, 0xC1	; 193
    1d4e:	91 e0       	ldi	r25, 0x01	; 1
    1d50:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__eerd_byte_m168>
    1d54:	99 27       	eor	r25, r25
    1d56:	87 fd       	sbrc	r24, 7
    1d58:	90 95       	com	r25
    1d5a:	8c 0d       	add	r24, r12
    1d5c:	9d 1d       	adc	r25, r13
    1d5e:	90 93 3f 01 	sts	0x013F, r25
    1d62:	80 93 3e 01 	sts	0x013E, r24
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1d66:	81 ec       	ldi	r24, 0xC1	; 193
    1d68:	91 e0       	ldi	r25, 0x01	; 1
    1d6a:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__eerd_byte_m168>
    1d6e:	e8 2e       	mov	r14, r24
        lcd_line2();
    1d70:	80 ec       	ldi	r24, 0xC0	; 192
    1d72:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_fix2_string(REF_R_str);	// "REF_R="
    1d76:	83 e0       	ldi	r24, 0x03	; 3
    1d78:	91 e0       	ldi	r25, 0x01	; 1
    1d7a:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1d7e:	81 ec       	ldi	r24, 0xC1	; 193
    1d80:	91 e0       	ldi	r25, 0x01	; 1
    1d82:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__eerd_byte_m168>
        ADCconfig.U_Bandgap = ADC_internal_reference;
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
        ADCconfig.U_Bandgap = ADC_internal_reference;
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1d86:	b3 e0       	ldi	r27, 0x03	; 3
    1d88:	fb 2e       	mov	r15, r27
    1d8a:	f8 0e       	add	r15, r24
    1d8c:	a8 0c       	add	r10, r8
    1d8e:	b9 1c       	adc	r11, r9
    1d90:	a0 1a       	sub	r10, r16
    1d92:	b1 0a       	sbc	r11, r17
    1d94:	a0 1a       	sub	r10, r16
    1d96:	b1 0a       	sbc	r11, r17
    1d98:	b5 01       	movw	r22, r10
    1d9a:	88 27       	eor	r24, r24
    1d9c:	77 fd       	sbrc	r23, 7
    1d9e:	80 95       	com	r24
    1da0:	98 2f       	mov	r25, r24
    1da2:	2e 2d       	mov	r18, r14
    1da4:	33 27       	eor	r19, r19
    1da6:	27 fd       	sbrc	r18, 7
    1da8:	30 95       	com	r19
    1daa:	2c 0d       	add	r18, r12
    1dac:	3d 1d       	adc	r19, r13
    1dae:	40 e0       	ldi	r20, 0x00	; 0
    1db0:	50 e0       	ldi	r21, 0x00	; 0
    1db2:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
    1db6:	00 0f       	add	r16, r16
    1db8:	11 1f       	adc	r17, r17
    1dba:	98 01       	movw	r18, r16
    1dbc:	44 27       	eor	r20, r20
    1dbe:	37 fd       	sbrc	r19, 7
    1dc0:	40 95       	com	r20
    1dc2:	54 2f       	mov	r21, r20
    1dc4:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <__divmodsi4>
        lcd_line2();
        lcd_fix2_string(REF_R_str);	// "REF_R="
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1dc8:	f2 0e       	add	r15, r18
        (void) eeprom_write_byte((uint8_t *)(&RefDiff), (uint8_t)udiff2);	// hold offset for true reference Voltage
    1dca:	81 ec       	ldi	r24, 0xC1	; 193
    1dcc:	91 e0       	ldi	r25, 0x01	; 1
    1dce:	6f 2d       	mov	r22, r15
    1dd0:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__eewr_byte_m168>
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
    1dd4:	8f 2d       	mov	r24, r15
    1dd6:	99 27       	eor	r25, r25
    1dd8:	87 fd       	sbrc	r24, 7
    1dda:	90 95       	com	r25
    1ddc:	6c e0       	ldi	r22, 0x0C	; 12
    1dde:	71 e0       	ldi	r23, 0x01	; 1
    1de0:	4a e0       	ldi	r20, 0x0A	; 10
    1de2:	50 e0       	ldi	r21, 0x00	; 0
    1de4:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <itoa>
    1de8:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
  #endif
        wait_about4s();
    1dec:	80 e2       	ldi	r24, 0x20	; 32
    1dee:	93 e0       	ldi	r25, 0x03	; 3
    1df0:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>
        break;
    1df4:	1b c0       	rjmp	.+54     	; 0x1e2c <AutoCheck+0x7da>
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1df6:	10 e0       	ldi	r17, 0x00	; 0
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
  #endif
        wait_about4s();
        break;
     }
     lcd_line2();
    1df8:	80 ec       	ldi	r24, 0xC0	; 192
    1dfa:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     DisplayValue(cap.cval,cap.cpre,'F',4);
    1dfe:	60 91 62 01 	lds	r22, 0x0162
    1e02:	70 91 63 01 	lds	r23, 0x0163
    1e06:	80 91 64 01 	lds	r24, 0x0164
    1e0a:	90 91 65 01 	lds	r25, 0x0165
    1e0e:	40 91 74 01 	lds	r20, 0x0174
    1e12:	26 e4       	ldi	r18, 0x46	; 70
    1e14:	04 e0       	ldi	r16, 0x04	; 4
    1e16:	0e 94 95 02 	call	0x52a	; 0x52a <DisplayValue>
     wait_about200ms();			// wait additional time
    1e1a:	88 e2       	ldi	r24, 0x28	; 40
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>
 wait_about2s();		//wait 2 seconds
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
    1e22:	c3 94       	inc	r12
    1e24:	8c 2d       	mov	r24, r12
    1e26:	80 34       	cpi	r24, 0x40	; 64
    1e28:	09 f0       	breq	.+2      	; 0x1e2c <AutoCheck+0x7da>
    1e2a:	f7 ce       	rjmp	.-530    	; 0x1c1a <AutoCheck+0x5c8>
     wait_about200ms();			// wait additional time
  } // end for ww
 #endif


  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    1e2c:	89 e1       	ldi	r24, 0x19	; 25
    1e2e:	80 93 3c 01 	sts	0x013C, r24
  lcd_clear();
    1e32:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_line2();
    1e36:	80 ec       	ldi	r24, 0xC0	; 192
    1e38:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix2_string(VERSION_str);	//"Version ..."
    1e3c:	88 ed       	ldi	r24, 0xD8	; 216
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
  lcd_line1();
    1e44:	80 e8       	ldi	r24, 0x80	; 128
    1e46:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(ATE);		//"Selftest End"
    1e4a:	84 ee       	ldi	r24, 0xE4	; 228
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        // if key is pressed, don't repeat
        break;
     }
  }
 #endif
 PartFound = PART_NONE;
    1e52:	10 92 07 01 	sts	0x0107, r1
 wait_about1s();			//wait 1 seconds
    1e56:	88 ec       	ldi	r24, 0xC8	; 200
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>
    1e5e:	03 c0       	rjmp	.+6      	; 0x1e66 <AutoCheck+0x814>
           lcd_fix_string(RHRH);	// "RHRH"
        }
                                        //############################################
        if (tt == 4) { // Text release probes
           lcd_fix_string(RELPROBE);	// "Release Probes"
           if (AllProbesShorted() != 0) ww = MAX_REP-2;
    1e60:	f2 e0       	ldi	r31, 0x02	; 2
    1e62:	af 2e       	mov	r10, r31
    1e64:	bf cd       	rjmp	.-1154   	; 0x19e4 <AutoCheck+0x392>
  }
 #endif
 PartFound = PART_NONE;
 wait_about1s();			//wait 1 seconds
#endif
 } 
    1e66:	2e 96       	adiw	r28, 0x0e	; 14
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	de bf       	out	0x3e, r29	; 62
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	cd bf       	out	0x3d, r28	; 61
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	1f 91       	pop	r17
    1e78:	0f 91       	pop	r16
    1e7a:	ff 90       	pop	r15
    1e7c:	ef 90       	pop	r14
    1e7e:	df 90       	pop	r13
    1e80:	cf 90       	pop	r12
    1e82:	bf 90       	pop	r11
    1e84:	af 90       	pop	r10
    1e86:	9f 90       	pop	r9
    1e88:	8f 90       	pop	r8
    1e8a:	7f 90       	pop	r7
    1e8c:	6f 90       	pop	r6
    1e8e:	5f 90       	pop	r5
    1e90:	4f 90       	pop	r4
    1e92:	3f 90       	pop	r3
    1e94:	2f 90       	pop	r2
    1e96:	08 95       	ret

00001e98 <main>:
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
  EMPTY_INTERRUPT(ADC_vect);
#endif

//begin of transistortester program
int main(void) {
    1e98:	0f 93       	push	r16
    1e9a:	1f 93       	push	r17
  //switch on
  ON_DDR = (1<<ON_PIN);			// switch to output
    1e9c:	80 e4       	ldi	r24, 0x40	; 64
    1e9e:	8a b9       	out	0x0a, r24	; 10
#ifdef PULLUP_DISABLE
  ON_PORT = (1<<ON_PIN); 		// switch power on 
    1ea0:	8b b9       	out	0x0b, r24	; 11
#else
  ON_PORT = (1<<ON_PIN)|(1<<RST_PIN); 	// switch power on , enable internal Pullup for Start-Pin
#endif
  uint8_t tmp;
  //ADC-Init
  ADCSRA = (1<<ADEN) | AUTO_CLOCK_DIV;	//prescaler=8 or 64 (if 8Mhz clock)
    1ea2:	86 e8       	ldi	r24, 0x86	; 134
    1ea4:	80 93 7a 00 	sts	0x007A, r24
// #define WDRF_HOME MCU_STATUS_REG
 #define WDRF_HOME MCUCSR
#else
 #define WDRF_HOME MCUSR
#endif
  tmp = (WDRF_HOME & (1<<WDRF));	// save Watch Dog Flag
    1ea8:	14 b7       	in	r17, 0x34	; 52
  WDRF_HOME &= ~(1<<WDRF);	 	//reset Watch Dog flag
    1eaa:	84 b7       	in	r24, 0x34	; 52
    1eac:	87 7f       	andi	r24, 0xF7	; 247
    1eae:	84 bf       	out	0x34, r24	; 52
  wdt_disable();			// disable Watch Dog
    1eb0:	88 e1       	ldi	r24, 0x18	; 24
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	80 93 60 00 	sts	0x0060, r24
    1eba:	10 92 60 00 	sts	0x0060, r1
    1ebe:	0f be       	out	0x3f, r0	; 63
#ifndef INHIBIT_SLEEP_MODE
  // switch off unused Parts
  PRR = (1<<PRTWI) | (1<<PRTIM0) | (1<<PRSPI) | (1<<PRUSART0);
    1ec0:	86 ea       	ldi	r24, 0xA6	; 166
    1ec2:	80 93 64 00 	sts	0x0064, r24
  DIDR0 = (1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D);	
    1ec6:	88 e3       	ldi	r24, 0x38	; 56
    1ec8:	80 93 7e 00 	sts	0x007E, r24
  TCCR2A = (0<<WGM21) | (0<<WGM20);		// Counter 2 normal mode
    1ecc:	10 92 b0 00 	sts	0x00B0, r1
 #if F_CPU == 4000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (0<<CS20);	//prescaler 256, 64us @ 2MHz
  #define T2_PERIOD 64
 #endif 
 #if F_CPU >= 8000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (1<<CS20);	//prescaler 1024, 128us @ 8MHz, 64us @ 16MHz
    1ed0:	87 e0       	ldi	r24, 0x07	; 7
    1ed2:	80 93 b1 00 	sts	0x00B1, r24
  #define T2_PERIOD (1024 / (F_CPU / 1000000UL));	/* set to 128 or 64 us */
 #endif 
  sei();				// enable interrupts
    1ed6:	78 94       	sei
#endif
  lcd_init();				//initialize LCD
    1ed8:	0e 94 08 01 	call	0x210	; 0x210 <lcd_init>
	
//  ADC_PORT = TXD_VAL;
//  ADC_DDR = TXD_MSK;
  if(tmp) { 
    1edc:	13 ff       	sbrs	r17, 3
    1ede:	0a c0       	rjmp	.+20     	; 0x1ef4 <main+0x5c>
     // check if  Watchdog-Event 
     // this happens, if the Watchdog is not reset for 2s
     // can happen, if any loop in the Program doen't finish.
     lcd_line1();
    1ee0:	80 e8       	ldi	r24, 0x80	; 128
    1ee2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     lcd_fix_string(TestTimedOut);	//Output Timeout
    1ee6:	8c eb       	ldi	r24, 0xBC	; 188
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     wait_about3s();				//wait for 3 s
    1eee:	88 e5       	ldi	r24, 0x58	; 88
    1ef0:	92 e0       	ldi	r25, 0x02	; 2
    1ef2:	92 c0       	rjmp	.+292    	; 0x2018 <main+0x180>
     ON_PORT = 0;			//shut off!
//     ON_DDR = (1<<ON_PIN);		//switch to GND
     return 0;
  }
  LCDLoadCustomChar(LCD_CHAR_DIODE1);	//Custom-Character Diode symbol
    1ef4:	88 e4       	ldi	r24, 0x48	; 72
    1ef6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(DiodeIcon1);	//load Character  >|
    1efa:	89 e9       	ldi	r24, 0x99	; 153
    1efc:	91 e0       	ldi	r25, 0x01	; 1
    1efe:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_DIODE2);	//Custom-Character 
    1f02:	80 e5       	ldi	r24, 0x50	; 80
    1f04:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(DiodeIcon2);	//load Character  |<
    1f08:	81 ea       	ldi	r24, 0xA1	; 161
    1f0a:	91 e0       	ldi	r25, 0x01	; 1
    1f0c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_CAP);	//Custom-Character  Capacitor symbol
    1f10:	88 e5       	ldi	r24, 0x58	; 88
    1f12:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(CapIcon);		//load Character  ||
    1f16:	89 ea       	ldi	r24, 0xA9	; 169
    1f18:	91 e0       	ldi	r25, 0x01	; 1
    1f1a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS1);	//Custom-Character Resistor symbol
    1f1e:	88 e7       	ldi	r24, 0x78	; 120
    1f20:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(ResIcon1);		//load Character  [
    1f24:	81 eb       	ldi	r24, 0xB1	; 177
    1f26:	91 e0       	ldi	r25, 0x01	; 1
    1f28:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS2);	//Custom-Character 
    1f2c:	80 e7       	ldi	r24, 0x70	; 112
    1f2e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(ResIcon2);		//load Character  ]
    1f32:	89 eb       	ldi	r24, 0xB9	; 185
    1f34:	91 e0       	ldi	r25, 0x01	; 1
    1f36:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_fix_customchar>
#endif
#ifdef PULLUP_DISABLE
 #ifdef __AVR_ATmega8__
  SFIOR = (1<<PUD);		// disable Pull-Up Resistors mega8
 #else
  MCUCR = (1<<PUD);		// disable Pull-Up Resistors mega168 family
    1f3a:	80 e1       	ldi	r24, 0x10	; 16
    1f3c:	85 bf       	out	0x35, r24	; 53
  }
#else
  #define display_time OFF_WAIT_TIME
#endif

  empty_count = 0;
    1f3e:	10 92 4a 01 	sts	0x014A, r1
  mess_count = 0;
    1f42:	10 92 0b 01 	sts	0x010B, r1


//*****************************************************************
//Entry: if start key is pressed before shut down
start:
  PartFound = PART_NONE;	// no part found
    1f46:	10 92 07 01 	sts	0x0107, r1
  NumOfDiodes = 0;		// Number of diodes = 0
    1f4a:	10 92 05 01 	sts	0x0105, r1
  PartReady = 0;
    1f4e:	10 92 04 01 	sts	0x0104, r1
  PartMode = 0;
    1f52:	10 92 06 01 	sts	0x0106, r1
  WithReference = 0;		// no precision reference voltage
    1f56:	10 92 49 01 	sts	0x0149, r1
  lcd_clear();
    1f5a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  ADC_DDR = TXD_MSK;		//activate Software-UART 
    1f5e:	88 e0       	ldi	r24, 0x08	; 8
    1f60:	87 b9       	out	0x07, r24	; 7
  ResistorsFound = 0;		// no resistors found
    1f62:	10 92 5e 01 	sts	0x015E, r1
  cap.ca = 0;
    1f66:	10 92 72 01 	sts	0x0172, r1
  cap.cb = 0;
    1f6a:	10 92 73 01 	sts	0x0173, r1
#ifdef WITH_UART
  uart_newline();		// start of new measurement
    1f6e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <uart_newline>
#endif
  ADCconfig.RefFlag = 0;
    1f72:	10 92 3d 01 	sts	0x013D, r1
  Calibrate_UR();		// get Ref Voltages and Pin resistance
    1f76:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <Calibrate_UR>
  lcd_line1();	//1. row 
    1f7a:	80 e8       	ldi	r24, 0x80	; 128
    1f7c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  
  ADCconfig.U_Bandgap = ADC_internal_reference;	// set internal reference voltage for ADC
    1f80:	81 ec       	ldi	r24, 0xC1	; 193
    1f82:	91 e0       	ldi	r25, 0x01	; 1
    1f84:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__eerd_byte_m168>
    1f88:	99 27       	eor	r25, r25
    1f8a:	87 fd       	sbrc	r24, 7
    1f8c:	90 95       	com	r25
    1f8e:	20 91 44 01 	lds	r18, 0x0144
    1f92:	30 91 45 01 	lds	r19, 0x0145
    1f96:	82 0f       	add	r24, r18
    1f98:	93 1f       	adc	r25, r19
    1f9a:	90 93 3f 01 	sts	0x013F, r25
    1f9e:	80 93 3e 01 	sts	0x013E, r24

#ifdef BAT_CHECK
  // Battery check is selected
  ReadADC(TPBAT);	//Dummy-Readout
    1fa2:	85 e0       	ldi	r24, 0x05	; 5
    1fa4:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
  trans.uBE[0] = W5msReadADC(TPBAT); 	//with 5V reference
    1fa8:	85 e0       	ldi	r24, 0x05	; 5
    1faa:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
    1fae:	90 93 58 01 	sts	0x0158, r25
    1fb2:	80 93 57 01 	sts	0x0157, r24
  lcd_fix_string(Bat_str);		//output: "Bat. "
    1fb6:	8d ee       	ldi	r24, 0xED	; 237
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  // display Battery voltage
  // The divisor to get the voltage in 0.01V units is ((10*33)/133) witch is about 2.4812
  // A good result can be get with multiply by 4 and divide by 10 (about 0.75%).
//  cap.cval = (trans.uBE[0]*4)/10+((BAT_OUT+5)/10); // usually output only 2 digits
//  DisplayValue(cap.cval,-2,'V',2);		// Display 2 Digits of this 10mV units
  cap.cval = (trans.uBE[0]*4)+BAT_OUT;		// usually output only 2 digits
    1fbe:	60 91 57 01 	lds	r22, 0x0157
    1fc2:	70 91 58 01 	lds	r23, 0x0158
    1fc6:	66 0f       	add	r22, r22
    1fc8:	77 1f       	adc	r23, r23
    1fca:	66 0f       	add	r22, r22
    1fcc:	77 1f       	adc	r23, r23
    1fce:	6a 56       	subi	r22, 0x6A	; 106
    1fd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	60 93 62 01 	sts	0x0162, r22
    1fda:	70 93 63 01 	sts	0x0163, r23
    1fde:	80 93 64 01 	sts	0x0164, r24
    1fe2:	90 93 65 01 	sts	0x0165, r25
  DisplayValue(cap.cval,-3,'V',2);		// Display 2 Digits of this 10mV units
    1fe6:	4d ef       	ldi	r20, 0xFD	; 253
    1fe8:	26 e5       	ldi	r18, 0x56	; 86
    1fea:	02 e0       	ldi	r16, 0x02	; 2
    1fec:	0e 94 95 02 	call	0x52a	; 0x52a <DisplayValue>
  lcd_space();
    1ff0:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
  // less than 1.3 V only .1V difference to Warn-Level
  #define WARN_LEVEL (((unsigned long)(BAT_POOR+100)*(unsigned long)33)/133)
 #endif
 #define POOR_LEVEL (((unsigned long)(BAT_POOR)*(unsigned long)33)/133)
  // check the battery voltage
  if (trans.uBE[0] <  WARN_LEVEL) {
    1ff4:	80 91 57 01 	lds	r24, 0x0157
    1ff8:	90 91 58 01 	lds	r25, 0x0158
    1ffc:	26 e0       	ldi	r18, 0x06	; 6
    1ffe:	8a 3f       	cpi	r24, 0xFA	; 250
    2000:	92 07       	cpc	r25, r18
    2002:	a8 f4       	brcc	.+42     	; 0x202e <main+0x196>
     //Vcc < 7,3V; show Warning 
     if(trans.uBE[0] < POOR_LEVEL) {	
    2004:	26 e0       	ldi	r18, 0x06	; 6
    2006:	83 33       	cpi	r24, 0x33	; 51
    2008:	92 07       	cpc	r25, r18
    200a:	70 f4       	brcc	.+28     	; 0x2028 <main+0x190>
        //Vcc <6,3V; no proper operation is possible
        lcd_fix_string(BatEmpty);	//Battery empty!
    200c:	8a e6       	ldi	r24, 0x6A	; 106
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        wait_about2s();
    2014:	80 e9       	ldi	r24, 0x90	; 144
    2016:	91 e0       	ldi	r25, 0x01	; 1
    2018:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>
        PORTD = 0;			//switch power off
    201c:	1b b8       	out	0x0b, r1	; 11
  }
#else
  goto start;	// POWER_OFF not selected, repeat measurement
#endif
  return 0;
}   // end main
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	1f 91       	pop	r17
    2024:	0f 91       	pop	r16
    2026:	08 95       	ret
        lcd_fix_string(BatEmpty);	//Battery empty!
        wait_about2s();
        PORTD = 0;			//switch power off
        return 0;
     }
     lcd_fix_string(BatWeak);		//Battery weak
    2028:	85 e6       	ldi	r24, 0x65	; 101
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	02 c0       	rjmp	.+4      	; 0x2032 <main+0x19a>
  } else { // Battery-voltage OK
     lcd_fix_string(OK_str); 		// "OK"
    202e:	83 ef       	ldi	r24, 0xF3	; 243
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  }
#else
  lcd_fix2_string(VERSION_str);		// if no Battery check, Version .. in row 1
#endif
#ifdef WDT_enabled
  wdt_enable(WDTO_2S);		//Watchdog on
    2036:	2f e0       	ldi	r18, 0x0F	; 15
    2038:	88 e1       	ldi	r24, 0x18	; 24
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	0f b6       	in	r0, 0x3f	; 63
    203e:	f8 94       	cli
    2040:	a8 95       	wdr
    2042:	80 93 60 00 	sts	0x0060, r24
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	20 93 60 00 	sts	0x0060, r18
#endif

//  wait_about1s();			// add more time for reading batterie voltage
  // begin tests
#ifdef AUTO_RH
  RefVoltage();			//compute RHmultip = f(reference voltage)
    204c:	0e 94 4b 02 	call	0x496	; 0x496 <RefVoltage>
#endif
#if FLASHEND > 0x1fff
  if (WithReference) {
    2050:	80 91 49 01 	lds	r24, 0x0149
    2054:	88 23       	and	r24, r24
    2056:	f1 f0       	breq	.+60     	; 0x2094 <main+0x1fc>
     /* 2.5V precision reference is checked OK */
     if ((mess_count == 0) && (empty_count == 0)) {
    2058:	80 91 0b 01 	lds	r24, 0x010B
    205c:	88 23       	and	r24, r24
    205e:	d1 f4       	brne	.+52     	; 0x2094 <main+0x1fc>
    2060:	80 91 4a 01 	lds	r24, 0x014A
    2064:	88 23       	and	r24, r24
    2066:	b1 f4       	brne	.+44     	; 0x2094 <main+0x1fc>
         /* display VCC= only first time */
         lcd_line2();
    2068:	80 ec       	ldi	r24, 0xC0	; 192
    206a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
         lcd_fix_string(VCC_str);		// VCC=
    206e:	8f e2       	ldi	r24, 0x2F	; 47
    2070:	91 e0       	ldi	r25, 0x01	; 1
    2072:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
         DisplayValue(ADCconfig.U_AVCC,-3,'V',3);	// Display 3 Digits of this mV units
    2076:	60 91 40 01 	lds	r22, 0x0140
    207a:	70 91 41 01 	lds	r23, 0x0141
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	4d ef       	ldi	r20, 0xFD	; 253
    2084:	26 e5       	ldi	r18, 0x56	; 86
    2086:	03 e0       	ldi	r16, 0x03	; 3
    2088:	0e 94 95 02 	call	0x52a	; 0x52a <DisplayValue>
//         lcd_space();
//         DisplayValue(RRpinMI,-1,LCD_CHAR_OMEGA,4);
         wait_about1s();
    208c:	88 ec       	ldi	r24, 0xC8	; 200
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>
     DisplayValue(trans.uBE[1]*10,-3,'V',3);	// Display 3 Digits of this mV units
     wait_about300ms();
  }
#endif

  lcd_line2();			//LCD position row2, column 1
    2094:	80 ec       	ldi	r24, 0xC0	; 192
    2096:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(TestRunning);		//String: testing...
    209a:	8a e5       	ldi	r24, 0x5A	; 90
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
#ifndef DebugOut
  lcd_line2();			//LCD position row 2, column 1
    20a2:	80 ec       	ldi	r24, 0xC0	; 192
    20a4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
#endif
  EntladePins();		// discharge all capacitors!
    20a8:	0e 94 b0 01 	call	0x360	; 0x360 <EntladePins>
  if(PartFound == PART_CELL) {
    20ac:	80 91 07 01 	lds	r24, 0x0107
    20b0:	88 30       	cpi	r24, 0x08	; 8
    20b2:	39 f4       	brne	.+14     	; 0x20c2 <main+0x22a>
    lcd_clear();
    20b4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
    lcd_fix_string(Cell_str);	// display "Cell!"
    20b8:	89 e2       	ldi	r24, 0x29	; 41
    20ba:	91 e0       	ldi	r25, 0x01	; 1
    20bc:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    goto end2;
    20c0:	b9 c3       	rjmp	.+1906   	; 0x2834 <main+0x99c>
  }

#ifdef CHECK_CALL
  AutoCheck();			//check, if selftest should be done
    20c2:	0e 94 29 0b 	call	0x1652	; 0x1652 <AutoCheck>
#endif
     
  // check all 6 combinations for the 3 pins 
//         High  Low  Tri
  CheckPins(TP1, TP2, TP3);
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	61 e0       	ldi	r22, 0x01	; 1
    20ca:	42 e0       	ldi	r20, 0x02	; 2
    20cc:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <CheckPins>
  CheckPins(TP2, TP1, TP3);
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	60 e0       	ldi	r22, 0x00	; 0
    20d4:	42 e0       	ldi	r20, 0x02	; 2
    20d6:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <CheckPins>

  CheckPins(TP1, TP3, TP2);
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	62 e0       	ldi	r22, 0x02	; 2
    20de:	41 e0       	ldi	r20, 0x01	; 1
    20e0:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <CheckPins>
  CheckPins(TP3, TP1, TP2);
    20e4:	82 e0       	ldi	r24, 0x02	; 2
    20e6:	60 e0       	ldi	r22, 0x00	; 0
    20e8:	41 e0       	ldi	r20, 0x01	; 1
    20ea:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <CheckPins>

  CheckPins(TP2, TP3, TP1);
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	62 e0       	ldi	r22, 0x02	; 2
    20f2:	40 e0       	ldi	r20, 0x00	; 0
    20f4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <CheckPins>
  CheckPins(TP3, TP2, TP1);
    20f8:	82 e0       	ldi	r24, 0x02	; 2
    20fa:	61 e0       	ldi	r22, 0x01	; 1
    20fc:	40 e0       	ldi	r20, 0x00	; 0
    20fe:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <CheckPins>
  
  //separate check if is is a capacitor
  if(((PartFound == PART_NONE) || (PartFound == PART_RESISTOR) || (PartFound == PART_DIODE)) ) {
    2102:	80 91 07 01 	lds	r24, 0x0107
    2106:	88 23       	and	r24, r24
    2108:	21 f0       	breq	.+8      	; 0x2112 <main+0x27a>
    210a:	86 30       	cpi	r24, 0x06	; 6
    210c:	11 f0       	breq	.+4      	; 0x2112 <main+0x27a>
    210e:	81 30       	cpi	r24, 0x01	; 1
    2110:	d9 f4       	brne	.+54     	; 0x2148 <main+0x2b0>
     EntladePins();		// discharge capacities
    2112:	0e 94 b0 01 	call	0x360	; 0x360 <EntladePins>
     //measurement of capacities in all 3 combinations
     cap.cval_max = 0;		// set max to zero
    2116:	10 92 66 01 	sts	0x0166, r1
    211a:	10 92 67 01 	sts	0x0167, r1
    211e:	10 92 68 01 	sts	0x0168, r1
    2122:	10 92 69 01 	sts	0x0169, r1
     cap.cpre_max = -12;	// set max to pF unit
    2126:	84 ef       	ldi	r24, 0xF4	; 244
    2128:	80 93 75 01 	sts	0x0175, r24
     ReadCapacity(TP3, TP1);
    212c:	82 e0       	ldi	r24, 0x02	; 2
    212e:	60 e0       	ldi	r22, 0x00	; 0
    2130:	0e 94 14 15 	call	0x2a28	; 0x2a28 <ReadCapacity>
     ReadCapacity(TP3, TP2);
    2134:	82 e0       	ldi	r24, 0x02	; 2
    2136:	61 e0       	ldi	r22, 0x01	; 1
    2138:	0e 94 14 15 	call	0x2a28	; 0x2a28 <ReadCapacity>
     ReadCapacity(TP2, TP1);
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	60 e0       	ldi	r22, 0x00	; 0
    2140:	0e 94 14 15 	call	0x2a28	; 0x2a28 <ReadCapacity>

#if FLASHEND > 0x1fff
     ReadInductance();			// measure inductance
    2144:	0e 94 2f 18 	call	0x305e	; 0x305e <ReadInductance>
#endif
  }
  //All checks are done, output result to display
  lcd_clear();
    2148:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  if(PartFound == PART_DIODE) {
    214c:	80 91 07 01 	lds	r24, 0x0107
    2150:	81 30       	cpi	r24, 0x01	; 1
    2152:	09 f0       	breq	.+2      	; 0x2156 <main+0x2be>
    2154:	0e c1       	rjmp	.+540    	; 0x2372 <main+0x4da>
     if(NumOfDiodes == 1) {		//single Diode
    2156:	90 91 05 01 	lds	r25, 0x0105
    215a:	91 30       	cpi	r25, 0x01	; 1
    215c:	c1 f5       	brne	.+112    	; 0x21ce <main+0x336>
        lcd_fix_string(Diode);		//"Diode: "
    215e:	8f e7       	ldi	r24, 0x7F	; 127
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_fix_string(KatAn);	//"-|<-"
           lcd_testpin(diodes[0].Anode);
        }
 #else
        // the higher test pin number is right side
        if (diodes[0].Anode < diodes[0].Cathode) {
    2166:	90 91 78 01 	lds	r25, 0x0178
    216a:	80 91 79 01 	lds	r24, 0x0179
    216e:	98 17       	cp	r25, r24
    2170:	50 f4       	brcc	.+20     	; 0x2186 <main+0x2ee>
           lcd_testpin(diodes[0].Anode);
    2172:	89 2f       	mov	r24, r25
    2174:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2178:	85 e4       	ldi	r24, 0x45	; 69
    217a:	91 e0       	ldi	r25, 0x01	; 1
    217c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[0].Cathode);
    2180:	80 91 79 01 	lds	r24, 0x0179
    2184:	08 c0       	rjmp	.+16     	; 0x2196 <main+0x2fe>
        } else {
           lcd_testpin(diodes[0].Cathode);
    2186:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    218a:	89 e4       	ldi	r24, 0x49	; 73
    218c:	91 e0       	ldi	r25, 0x01	; 1
    218e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    2192:	80 91 78 01 	lds	r24, 0x0178
    2196:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
        // too less memory to sort the pins
        lcd_testpin(diodes[0].Anode);
        lcd_fix_string(AnKat);		//"->|-"
        lcd_testpin(diodes[0].Cathode);
#endif
        UfAusgabe(0x70);
    219a:	80 e7       	ldi	r24, 0x70	; 112
    219c:	0e 94 9a 03 	call	0x734	; 0x734 <UfAusgabe>
        lcd_fix_string(GateCap_str);	//"C="
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	91 e0       	ldi	r25, 0x01	; 1
    21a4:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        ReadCapacity(diodes[0].Cathode,diodes[0].Anode);	// Capacity opposite flow direction
    21a8:	80 91 79 01 	lds	r24, 0x0179
    21ac:	60 91 78 01 	lds	r22, 0x0178
    21b0:	0e 94 14 15 	call	0x2a28	; 0x2a28 <ReadCapacity>
        DisplayValue(cap.cval,cap.cpre,'F',3);
    21b4:	60 91 62 01 	lds	r22, 0x0162
    21b8:	70 91 63 01 	lds	r23, 0x0163
    21bc:	80 91 64 01 	lds	r24, 0x0164
    21c0:	90 91 65 01 	lds	r25, 0x0165
    21c4:	40 91 74 01 	lds	r20, 0x0174
    21c8:	26 e4       	ldi	r18, 0x46	; 70
    21ca:	03 e0       	ldi	r16, 0x03	; 3
    21cc:	51 c1       	rjmp	.+674    	; 0x2470 <main+0x5d8>
        goto end;
     } else if(NumOfDiodes == 2) { // double diode
    21ce:	92 30       	cpi	r25, 0x02	; 2
    21d0:	09 f0       	breq	.+2      	; 0x21d4 <main+0x33c>
    21d2:	4c c0       	rjmp	.+152    	; 0x226c <main+0x3d4>
        lcd_data('2');
    21d4:	82 e3       	ldi	r24, 0x32	; 50
    21d6:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
        lcd_fix_string(Dioden);		//"diodes "
    21da:	8d e4       	ldi	r24, 0x4D	; 77
    21dc:	91 e0       	ldi	r25, 0x01	; 1
    21de:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        if(diodes[0].Anode == diodes[1].Anode) { //Common Anode
    21e2:	90 91 78 01 	lds	r25, 0x0178
    21e6:	20 91 7c 01 	lds	r18, 0x017C
    21ea:	92 17       	cp	r25, r18
    21ec:	59 f4       	brne	.+22     	; 0x2204 <main+0x36c>
           lcd_testpin(diodes[0].Cathode);
    21ee:	80 91 79 01 	lds	r24, 0x0179
    21f2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    21f6:	89 e4       	ldi	r24, 0x49	; 73
    21f8:	91 e0       	ldi	r25, 0x01	; 1
    21fa:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    21fe:	80 91 78 01 	lds	r24, 0x0178
    2202:	2b c0       	rjmp	.+86     	; 0x225a <main+0x3c2>
           lcd_fix_string(AnKat);	//"->|-"
           lcd_testpin(diodes[1].Cathode);
           UfAusgabe(0x01);
           goto end;
        } else if(diodes[0].Cathode == diodes[1].Cathode) { //Common Cathode
    2204:	30 91 79 01 	lds	r19, 0x0179
    2208:	80 91 7d 01 	lds	r24, 0x017D
    220c:	38 17       	cp	r19, r24
    220e:	b9 f4       	brne	.+46     	; 0x223e <main+0x3a6>
           lcd_testpin(diodes[0].Anode);
    2210:	89 2f       	mov	r24, r25
    2212:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2216:	85 e4       	ldi	r24, 0x45	; 69
    2218:	91 e0       	ldi	r25, 0x01	; 1
    221a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
	   lcd_testpin(diodes[0].Cathode);
    221e:	80 91 79 01 	lds	r24, 0x0179
    2222:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    2226:	89 e4       	ldi	r24, 0x49	; 73
    2228:	91 e0       	ldi	r25, 0x01	; 1
    222a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[1].Anode);
    222e:	80 91 7c 01 	lds	r24, 0x017C
    2232:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           UfAusgabe(0x01);
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	0e 94 9a 03 	call	0x734	; 0x734 <UfAusgabe>
           goto end;
    223c:	f4 c2       	rjmp	.+1512   	; 0x2826 <main+0x98e>
          }
        else if ((diodes[0].Cathode == diodes[1].Anode) && (diodes[1].Cathode == diodes[0].Anode)) {
    223e:	32 17       	cp	r19, r18
    2240:	09 f0       	breq	.+2      	; 0x2244 <main+0x3ac>
    2242:	bf c2       	rjmp	.+1406   	; 0x27c2 <main+0x92a>
    2244:	89 17       	cp	r24, r25
    2246:	09 f0       	breq	.+2      	; 0x224a <main+0x3b2>
    2248:	bc c2       	rjmp	.+1400   	; 0x27c2 <main+0x92a>
           //Antiparallel
           lcd_testpin(diodes[0].Anode);
    224a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    224e:	85 e4       	ldi	r24, 0x45	; 69
    2250:	91 e0       	ldi	r25, 0x01	; 1
    2252:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[0].Cathode);
    2256:	80 91 79 01 	lds	r24, 0x0179
    225a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    225e:	85 e4       	ldi	r24, 0x45	; 69
    2260:	91 e0       	ldi	r25, 0x01	; 1
    2262:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[1].Cathode);
    2266:	80 91 7d 01 	lds	r24, 0x017D
    226a:	e3 cf       	rjmp	.-58     	; 0x2232 <main+0x39a>
           UfAusgabe(0x01);
           goto end;
        }
     } else if(NumOfDiodes == 3) {
    226c:	93 30       	cpi	r25, 0x03	; 3
    226e:	09 f0       	breq	.+2      	; 0x2272 <main+0x3da>
    2270:	a8 c2       	rjmp	.+1360   	; 0x27c2 <main+0x92a>
        //Serial of 2 Diodes; was detected as 3 Diodes 
        trans.b = 3;
    2272:	90 93 5b 01 	sts	0x015B, r25
        trans.c = 3;
    2276:	90 93 5c 01 	sts	0x015C, r25
        /* Check for any constallation of 2 serial diodes:
          Only once the pin No of anyone Cathode is identical of another anode.
          two diodes in series is additionally detected as third big diode.
        */
        if(diodes[0].Cathode == diodes[1].Anode)
    227a:	50 91 79 01 	lds	r21, 0x0179
    227e:	90 91 7c 01 	lds	r25, 0x017C
    2282:	59 17       	cp	r21, r25
    2284:	21 f4       	brne	.+8      	; 0x228e <main+0x3f6>
          {
           trans.b = 0;
    2286:	10 92 5b 01 	sts	0x015B, r1
           trans.c = 1;
    228a:	80 93 5c 01 	sts	0x015C, r24
          }
        if(diodes[0].Anode == diodes[1].Cathode)
    228e:	40 91 78 01 	lds	r20, 0x0178
    2292:	30 91 7d 01 	lds	r19, 0x017D
    2296:	43 17       	cp	r20, r19
    2298:	29 f4       	brne	.+10     	; 0x22a4 <main+0x40c>
          {
           trans.b = 1;
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	80 93 5b 01 	sts	0x015B, r24
           trans.c = 0;
    22a0:	10 92 5c 01 	sts	0x015C, r1
          }
        if(diodes[0].Cathode == diodes[2].Anode)
    22a4:	20 91 80 01 	lds	r18, 0x0180
    22a8:	52 17       	cp	r21, r18
    22aa:	29 f4       	brne	.+10     	; 0x22b6 <main+0x41e>
          {
           trans.b = 0;
    22ac:	10 92 5b 01 	sts	0x015B, r1
           trans.c = 2;
    22b0:	82 e0       	ldi	r24, 0x02	; 2
    22b2:	80 93 5c 01 	sts	0x015C, r24
          }
        if(diodes[0].Anode == diodes[2].Cathode)
    22b6:	80 91 81 01 	lds	r24, 0x0181
    22ba:	48 17       	cp	r20, r24
    22bc:	29 f4       	brne	.+10     	; 0x22c8 <main+0x430>
          {
           trans.b = 2;
    22be:	42 e0       	ldi	r20, 0x02	; 2
    22c0:	40 93 5b 01 	sts	0x015B, r20
           trans.c = 0;
    22c4:	10 92 5c 01 	sts	0x015C, r1
          }
        if(diodes[1].Cathode == diodes[2].Anode)
    22c8:	32 17       	cp	r19, r18
    22ca:	31 f4       	brne	.+12     	; 0x22d8 <main+0x440>
          {
           trans.b = 1;
    22cc:	21 e0       	ldi	r18, 0x01	; 1
    22ce:	20 93 5b 01 	sts	0x015B, r18
           trans.c = 2;
    22d2:	22 e0       	ldi	r18, 0x02	; 2
    22d4:	20 93 5c 01 	sts	0x015C, r18
          }
        if(diodes[1].Anode == diodes[2].Cathode)
    22d8:	98 17       	cp	r25, r24
    22da:	31 f4       	brne	.+12     	; 0x22e8 <main+0x450>
          {
           trans.b = 2;
    22dc:	82 e0       	ldi	r24, 0x02	; 2
    22de:	80 93 5b 01 	sts	0x015B, r24
           trans.c = 1;
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	80 93 5c 01 	sts	0x015C, r24
        lcd_testpin(diodes[2].Cathode);
        lcd_space();
        lcd_string(utoa(diodes[2].Voltage, outval, 10));
        lcd_line1();
#endif
        if((trans.b<3) && (trans.c<3)) {
    22e8:	80 91 5b 01 	lds	r24, 0x015B
    22ec:	83 30       	cpi	r24, 0x03	; 3
    22ee:	08 f0       	brcs	.+2      	; 0x22f2 <main+0x45a>
    22f0:	68 c2       	rjmp	.+1232   	; 0x27c2 <main+0x92a>
    22f2:	80 91 5c 01 	lds	r24, 0x015C
    22f6:	83 30       	cpi	r24, 0x03	; 3
    22f8:	08 f0       	brcs	.+2      	; 0x22fc <main+0x464>
    22fa:	63 c2       	rjmp	.+1222   	; 0x27c2 <main+0x92a>
           lcd_data('3');
    22fc:	83 e3       	ldi	r24, 0x33	; 51
    22fe:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
           lcd_fix_string(Dioden);	//"Diodes "
    2302:	8d e4       	ldi	r24, 0x4D	; 77
    2304:	91 e0       	ldi	r25, 0x01	; 1
    2306:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Anode);
    230a:	e0 91 5b 01 	lds	r30, 0x015B
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	ee 0f       	add	r30, r30
    2312:	ff 1f       	adc	r31, r31
    2314:	ee 0f       	add	r30, r30
    2316:	ff 1f       	adc	r31, r31
    2318:	e8 58       	subi	r30, 0x88	; 136
    231a:	fe 4f       	sbci	r31, 0xFE	; 254
    231c:	80 81       	ld	r24, Z
    231e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2322:	85 e4       	ldi	r24, 0x45	; 69
    2324:	91 e0       	ldi	r25, 0x01	; 1
    2326:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Cathode);
    232a:	e0 91 5b 01 	lds	r30, 0x015B
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	ee 0f       	add	r30, r30
    2332:	ff 1f       	adc	r31, r31
    2334:	ee 0f       	add	r30, r30
    2336:	ff 1f       	adc	r31, r31
    2338:	e8 58       	subi	r30, 0x88	; 136
    233a:	fe 4f       	sbci	r31, 0xFE	; 254
    233c:	81 81       	ldd	r24, Z+1	; 0x01
    233e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2342:	85 e4       	ldi	r24, 0x45	; 69
    2344:	91 e0       	ldi	r25, 0x01	; 1
    2346:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[trans.c].Cathode);
    234a:	e0 91 5c 01 	lds	r30, 0x015C
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	ee 0f       	add	r30, r30
    2352:	ff 1f       	adc	r31, r31
    2354:	ee 0f       	add	r30, r30
    2356:	ff 1f       	adc	r31, r31
    2358:	e8 58       	subi	r30, 0x88	; 136
    235a:	fe 4f       	sbci	r31, 0xFE	; 254
    235c:	81 81       	ldd	r24, Z+1	; 0x01
    235e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           UfAusgabe( (trans.b<<4)|trans.c);
    2362:	80 91 5b 01 	lds	r24, 0x015B
    2366:	82 95       	swap	r24
    2368:	80 7f       	andi	r24, 0xF0	; 240
    236a:	90 91 5c 01 	lds	r25, 0x015C
    236e:	89 2b       	or	r24, r25
    2370:	63 cf       	rjmp	.-314    	; 0x2238 <main+0x3a0>
           goto end;
        }
     }
     // end (PartFound == PART_DIODE)
  } else if (PartFound == PART_TRANSISTOR) {
    2372:	82 30       	cpi	r24, 0x02	; 2
    2374:	09 f0       	breq	.+2      	; 0x2378 <main+0x4e0>
    2376:	7f c0       	rjmp	.+254    	; 0x2476 <main+0x5de>
    if(PartReady != 0) {
    2378:	80 91 04 01 	lds	r24, 0x0104
    237c:	88 23       	and	r24, r24
    237e:	71 f1       	breq	.+92     	; 0x23dc <main+0x544>
       if((trans.hfe[0]>trans.hfe[1])) {
    2380:	80 91 53 01 	lds	r24, 0x0153
    2384:	90 91 54 01 	lds	r25, 0x0154
    2388:	a0 91 55 01 	lds	r26, 0x0155
    238c:	b0 91 56 01 	lds	r27, 0x0156
    2390:	20 91 4f 01 	lds	r18, 0x014F
    2394:	30 91 50 01 	lds	r19, 0x0150
    2398:	40 91 51 01 	lds	r20, 0x0151
    239c:	50 91 52 01 	lds	r21, 0x0152
    23a0:	82 17       	cp	r24, r18
    23a2:	93 07       	cpc	r25, r19
    23a4:	a4 07       	cpc	r26, r20
    23a6:	b5 07       	cpc	r27, r21
    23a8:	48 f4       	brcc	.+18     	; 0x23bc <main+0x524>
          //if the amplification factor was higher at first testr: swap C and E !
          tmp = trans.c;
    23aa:	80 91 5c 01 	lds	r24, 0x015C
          trans.c = trans.e;
    23ae:	90 91 5d 01 	lds	r25, 0x015D
    23b2:	90 93 5c 01 	sts	0x015C, r25
          trans.e = tmp;
    23b6:	80 93 5d 01 	sts	0x015D, r24
    23ba:	10 c0       	rjmp	.+32     	; 0x23dc <main+0x544>
       } else {
          trans.hfe[0] = trans.hfe[1];
    23bc:	80 93 4f 01 	sts	0x014F, r24
    23c0:	90 93 50 01 	sts	0x0150, r25
    23c4:	a0 93 51 01 	sts	0x0151, r26
    23c8:	b0 93 52 01 	sts	0x0152, r27
          trans.uBE[0] = trans.uBE[1];
    23cc:	80 91 59 01 	lds	r24, 0x0159
    23d0:	90 91 5a 01 	lds	r25, 0x015A
    23d4:	90 93 58 01 	sts	0x0158, r25
    23d8:	80 93 57 01 	sts	0x0157, r24
       }
    }

    if(PartMode == PART_MODE_NPN) {
    23dc:	80 91 06 01 	lds	r24, 0x0106
    23e0:	81 30       	cpi	r24, 0x01	; 1
    23e2:	19 f4       	brne	.+6      	; 0x23ea <main+0x552>
       lcd_fix_string(NPN_str);		//"NPN "
    23e4:	86 e0       	ldi	r24, 0x06	; 6
    23e6:	91 e0       	ldi	r25, 0x01	; 1
    23e8:	02 c0       	rjmp	.+4      	; 0x23ee <main+0x556>
    } else {
       lcd_fix_string(PNP_str);		//"PNP "
    23ea:	8b e0       	ldi	r24, 0x0B	; 11
    23ec:	91 e0       	ldi	r25, 0x01	; 1
    23ee:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    }
    if( NumOfDiodes > 2) {	//Transistor with protection diode
    23f2:	80 91 05 01 	lds	r24, 0x0105
    23f6:	83 30       	cpi	r24, 0x03	; 3
    23f8:	a0 f0       	brcs	.+40     	; 0x2422 <main+0x58a>
       // Layout with EBC= style
       if(PartMode == PART_MODE_NPN)
 #endif
#else
       // Layout with 123= style
       if (((PartMode == PART_MODE_NPN) && (trans.c > trans.e)) || ((PartMode != PART_MODE_NPN) && (trans.c < trans.e)))
    23fa:	20 91 06 01 	lds	r18, 0x0106
    23fe:	90 91 5c 01 	lds	r25, 0x015C
    2402:	80 91 5d 01 	lds	r24, 0x015D
    2406:	21 30       	cpi	r18, 0x01	; 1
    2408:	19 f4       	brne	.+6      	; 0x2410 <main+0x578>
    240a:	89 17       	cp	r24, r25
    240c:	18 f0       	brcs	.+6      	; 0x2414 <main+0x57c>
    240e:	05 c0       	rjmp	.+10     	; 0x241a <main+0x582>
    2410:	98 17       	cp	r25, r24
    2412:	18 f4       	brcc	.+6      	; 0x241a <main+0x582>
#endif
       {
          lcd_fix_string(AnKat);	//"->|-"
    2414:	85 e4       	ldi	r24, 0x45	; 69
    2416:	91 e0       	ldi	r25, 0x01	; 1
    2418:	02 c0       	rjmp	.+4      	; 0x241e <main+0x586>
       } else {
          lcd_fix_string(KatAn);	//"-|<-"
    241a:	89 e4       	ldi	r24, 0x49	; 73
    241c:	91 e0       	ldi	r25, 0x01	; 1
    241e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
       }
    }
    PinLayout('E','B','C'); 		//  EBC= or 123=...
    2422:	85 e4       	ldi	r24, 0x45	; 69
    2424:	62 e4       	ldi	r22, 0x42	; 66
    2426:	43 e4       	ldi	r20, 0x43	; 67
    2428:	0e 94 a8 0a 	call	0x1550	; 0x1550 <PinLayout>
    lcd_line2(); //2. row 
    242c:	80 ec       	ldi	r24, 0xC0	; 192
    242e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
    lcd_fix_string(hfe_str);		//"B="  (hFE)
    2432:	83 e0       	ldi	r24, 0x03	; 3
    2434:	91 e0       	ldi	r25, 0x01	; 1
    2436:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    DisplayValue(trans.hfe[0],0,0,3);
    243a:	60 91 4f 01 	lds	r22, 0x014F
    243e:	70 91 50 01 	lds	r23, 0x0150
    2442:	80 91 51 01 	lds	r24, 0x0151
    2446:	90 91 52 01 	lds	r25, 0x0152
    244a:	40 e0       	ldi	r20, 0x00	; 0
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	03 e0       	ldi	r16, 0x03	; 3
    2450:	0e 94 95 02 	call	0x52a	; 0x52a <DisplayValue>
    lcd_space();
    2454:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>

    lcd_fix_string(Uf_str);		//"Uf="
    2458:	86 e1       	ldi	r24, 0x16	; 22
    245a:	91 e0       	ldi	r25, 0x01	; 1
    245c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    DisplayValue(trans.uBE[0],-3,'V',3);
    2460:	60 91 57 01 	lds	r22, 0x0157
    2464:	70 91 58 01 	lds	r23, 0x0158
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	4d ef       	ldi	r20, 0xFD	; 253
    246e:	26 e5       	ldi	r18, 0x56	; 86
    2470:	0e 94 95 02 	call	0x52a	; 0x52a <DisplayValue>
    goto end;
    2474:	d8 c1       	rjmp	.+944    	; 0x2826 <main+0x98e>
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    2476:	83 30       	cpi	r24, 0x03	; 3
    2478:	09 f0       	breq	.+2      	; 0x247c <main+0x5e4>
    247a:	7f c0       	rjmp	.+254    	; 0x257a <main+0x6e2>
    if(PartMode&1) {
    247c:	80 91 06 01 	lds	r24, 0x0106
    2480:	80 ff       	sbrs	r24, 0
    2482:	02 c0       	rjmp	.+4      	; 0x2488 <main+0x5f0>
       lcd_data('P');			//P-channel
    2484:	80 e5       	ldi	r24, 0x50	; 80
    2486:	01 c0       	rjmp	.+2      	; 0x248a <main+0x5f2>
    } else {
       lcd_data('N');			//N-channel
    2488:	8e e4       	ldi	r24, 0x4E	; 78
    248a:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
    }
    lcd_data('-');
    248e:	8d e2       	ldi	r24, 0x2D	; 45
    2490:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>

    tmp = PartMode/2;
    2494:	80 91 06 01 	lds	r24, 0x0106
    2498:	86 95       	lsr	r24
    if (tmp == (PART_MODE_N_D_MOS/2)) {
    249a:	82 30       	cpi	r24, 0x02	; 2
    249c:	11 f4       	brne	.+4      	; 0x24a2 <main+0x60a>
       lcd_data('D');			// N-D
    249e:	84 e4       	ldi	r24, 0x44	; 68
    24a0:	03 c0       	rjmp	.+6      	; 0x24a8 <main+0x610>
    }
    if (tmp == (PART_MODE_N_E_MOS/2)) {
    24a2:	81 30       	cpi	r24, 0x01	; 1
    24a4:	21 f4       	brne	.+8      	; 0x24ae <main+0x616>
       lcd_data('E');			// N-E
    24a6:	85 e4       	ldi	r24, 0x45	; 69
    24a8:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
    24ac:	05 c0       	rjmp	.+10     	; 0x24b8 <main+0x620>
    }
    if (tmp == (PART_MODE_N_JFET/2)) {
    24ae:	83 30       	cpi	r24, 0x03	; 3
    24b0:	19 f4       	brne	.+6      	; 0x24b8 <main+0x620>
       lcd_fix_string(jfet_str);	//"JFET"
    24b2:	8b ef       	ldi	r24, 0xFB	; 251
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	02 c0       	rjmp	.+4      	; 0x24bc <main+0x624>
    } else {
       lcd_fix_string(mosfet_str);	//"-MOS "
    24b8:	86 ef       	ldi	r24, 0xF6	; 246
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    }
    PinLayout('S','G','D'); 		//  SGD= or 123=...
    24c0:	83 e5       	ldi	r24, 0x53	; 83
    24c2:	67 e4       	ldi	r22, 0x47	; 71
    24c4:	44 e4       	ldi	r20, 0x44	; 68
    24c6:	0e 94 a8 0a 	call	0x1550	; 0x1550 <PinLayout>
    if((NumOfDiodes > 0) && (PartMode < PART_MODE_N_D_MOS)) {
    24ca:	80 91 05 01 	lds	r24, 0x0105
    24ce:	88 23       	and	r24, r24
    24d0:	a1 f0       	breq	.+40     	; 0x24fa <main+0x662>
    24d2:	20 91 06 01 	lds	r18, 0x0106
    24d6:	24 30       	cpi	r18, 0x04	; 4
    24d8:	80 f4       	brcc	.+32     	; 0x24fa <main+0x662>
    24da:	90 91 5c 01 	lds	r25, 0x015C
    24de:	80 91 5d 01 	lds	r24, 0x015D
       // Layout with SGD= style
       if (PartMode&1) /* N or P MOS */
 #endif
#else
       // layout with 123= style
       if (((PartMode&1) && (trans.c < trans.e)) || ((!(PartMode&1)) && (trans.c > trans.e)))
    24e2:	20 ff       	sbrs	r18, 0
    24e4:	03 c0       	rjmp	.+6      	; 0x24ec <main+0x654>
    24e6:	98 17       	cp	r25, r24
    24e8:	18 f0       	brcs	.+6      	; 0x24f0 <main+0x658>
    24ea:	04 c0       	rjmp	.+8      	; 0x24f4 <main+0x65c>
    24ec:	89 17       	cp	r24, r25
    24ee:	10 f4       	brcc	.+4      	; 0x24f4 <main+0x65c>
#endif
       {
          lcd_data(LCD_CHAR_DIODE1);	//show Diode symbol >|
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	01 c0       	rjmp	.+2      	; 0x24f6 <main+0x65e>
       } else {
          lcd_data(LCD_CHAR_DIODE2);	//show Diode symbol |<
    24f4:	82 e0       	ldi	r24, 0x02	; 2
    24f6:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       }
    }
    lcd_line2();			//2. Row
    24fa:	80 ec       	ldi	r24, 0xC0	; 192
    24fc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
    if(PartMode < PART_MODE_N_D_MOS) {	//enhancement-MOSFET
    2500:	80 91 06 01 	lds	r24, 0x0106
    2504:	84 30       	cpi	r24, 0x04	; 4
    2506:	d8 f4       	brcc	.+54     	; 0x253e <main+0x6a6>
	//Gate capacity
       lcd_fix_string(GateCap_str);		//"C="
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	91 e0       	ldi	r25, 0x01	; 1
    250c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
       ReadCapacity(trans.b,trans.e);	//measure capacity
    2510:	80 91 5b 01 	lds	r24, 0x015B
    2514:	60 91 5d 01 	lds	r22, 0x015D
    2518:	0e 94 14 15 	call	0x2a28	; 0x2a28 <ReadCapacity>
       DisplayValue(cap.cval,cap.cpre,'F',3);
    251c:	60 91 62 01 	lds	r22, 0x0162
    2520:	70 91 63 01 	lds	r23, 0x0163
    2524:	80 91 64 01 	lds	r24, 0x0164
    2528:	90 91 65 01 	lds	r25, 0x0165
    252c:	40 91 74 01 	lds	r20, 0x0174
    2530:	26 e4       	ldi	r18, 0x46	; 70
    2532:	03 e0       	ldi	r16, 0x03	; 3
    2534:	0e 94 95 02 	call	0x52a	; 0x52a <DisplayValue>
       lcd_fix_string(vt_str);		// "Vt="
    2538:	8a e1       	ldi	r24, 0x1A	; 26
    253a:	91 e0       	ldi	r25, 0x01	; 1
    253c:	13 c0       	rjmp	.+38     	; 0x2564 <main+0x6cc>
    } else {
       lcd_data('I');
    253e:	89 e4       	ldi	r24, 0x49	; 73
    2540:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       lcd_data('=');
    2544:	8d e3       	ldi	r24, 0x3D	; 61
    2546:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       DisplayValue(trans.uBE[1],-5,'A',2);
    254a:	60 91 59 01 	lds	r22, 0x0159
    254e:	70 91 5a 01 	lds	r23, 0x015A
    2552:	80 e0       	ldi	r24, 0x00	; 0
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	4b ef       	ldi	r20, 0xFB	; 251
    2558:	21 e4       	ldi	r18, 0x41	; 65
    255a:	02 e0       	ldi	r16, 0x02	; 2
    255c:	0e 94 95 02 	call	0x52a	; 0x52a <DisplayValue>
       lcd_fix_string(Vgs_str);		// " Vgs="
    2560:	8f e1       	ldi	r24, 0x1F	; 31
    2562:	91 e0       	ldi	r25, 0x01	; 1
    2564:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    }
    //Gate-threshold voltage
    DisplayValue(gthvoltage,-3,'V',3);
    2568:	60 91 5f 01 	lds	r22, 0x015F
    256c:	70 91 60 01 	lds	r23, 0x0160
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	4d ef       	ldi	r20, 0xFD	; 253
    2576:	26 e5       	ldi	r18, 0x56	; 86
    2578:	28 ce       	rjmp	.-944    	; 0x21ca <main+0x332>
    goto end;
    // end (PartFound == PART_FET)
  } else if (PartFound == PART_THYRISTOR) {
    257a:	85 30       	cpi	r24, 0x05	; 5
    257c:	19 f4       	brne	.+6      	; 0x2584 <main+0x6ec>
    lcd_fix_string(Thyristor);		//"Thyristor"
    257e:	8d e8       	ldi	r24, 0x8D	; 141
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	04 c0       	rjmp	.+8      	; 0x258c <main+0x6f4>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    2584:	84 30       	cpi	r24, 0x04	; 4
    2586:	69 f4       	brne	.+26     	; 0x25a2 <main+0x70a>
    lcd_fix_string(Triac);		//"Triac"
    2588:	87 e8       	ldi	r24, 0x87	; 135
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  mess_count = 0;
  goto end2;


gakAusgabe:
  lcd_line2(); //2. row 
    2590:	80 ec       	ldi	r24, 0xC0	; 192
    2592:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  PinLayout(Cathode_char,'G','A'); 	// CGA= or 123=...
    2596:	83 e4       	ldi	r24, 0x43	; 67
    2598:	67 e4       	ldi	r22, 0x47	; 71
    259a:	41 e4       	ldi	r20, 0x41	; 65
    259c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <PinLayout>
    25a0:	42 c1       	rjmp	.+644    	; 0x2826 <main+0x98e>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    lcd_fix_string(Triac);		//"Triac"
    goto gakAusgabe;
  }
  else if(PartFound == PART_RESISTOR) {
    25a2:	86 30       	cpi	r24, 0x06	; 6
    25a4:	09 f0       	breq	.+2      	; 0x25a8 <main+0x710>
    25a6:	b9 c0       	rjmp	.+370    	; 0x271a <main+0x882>
    if (ResistorsFound == 1) { // single resistor
    25a8:	60 91 5e 01 	lds	r22, 0x015E
    25ac:	61 30       	cpi	r22, 0x01	; 1
    25ae:	69 f4       	brne	.+26     	; 0x25ca <main+0x732>
       lcd_testpin(resis[0].rb);  	//Pin-number 1
    25b0:	80 91 22 01 	lds	r24, 0x0122
    25b4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
       lcd_fix_string(Resistor_str);
    25b8:	82 e5       	ldi	r24, 0x52	; 82
    25ba:	91 e0       	ldi	r25, 0x01	; 1
    25bc:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
       lcd_testpin(resis[0].ra);		//Pin-number 2
    25c0:	80 91 21 01 	lds	r24, 0x0121
    25c4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
    25c8:	61 c0       	rjmp	.+194    	; 0x268c <main+0x7f4>
    } else { // R-Max suchen
       ii = 0;
    25ca:	10 92 4b 01 	sts	0x014B, r1
       if (resis[1].rx > resis[0].rx)
    25ce:	20 91 24 01 	lds	r18, 0x0124
    25d2:	30 91 25 01 	lds	r19, 0x0125
    25d6:	40 91 26 01 	lds	r20, 0x0126
    25da:	50 91 27 01 	lds	r21, 0x0127
    25de:	80 91 18 01 	lds	r24, 0x0118
    25e2:	90 91 19 01 	lds	r25, 0x0119
    25e6:	a0 91 1a 01 	lds	r26, 0x011A
    25ea:	b0 91 1b 01 	lds	r27, 0x011B
    25ee:	82 17       	cp	r24, r18
    25f0:	93 07       	cpc	r25, r19
    25f2:	a4 07       	cpc	r26, r20
    25f4:	b5 07       	cpc	r27, r21
    25f6:	18 f4       	brcc	.+6      	; 0x25fe <main+0x766>
          ii = 1;
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	80 93 4b 01 	sts	0x014B, r24
       if (ResistorsFound == 2) {
    25fe:	62 30       	cpi	r22, 0x02	; 2
    2600:	19 f4       	brne	.+6      	; 0x2608 <main+0x770>
          ii = 2;
    2602:	60 93 4b 01 	sts	0x014B, r22
    2606:	22 c0       	rjmp	.+68     	; 0x264c <main+0x7b4>
       } else {
          if (resis[2].rx > resis[ii].rx) {
    2608:	80 91 4b 01 	lds	r24, 0x014B
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	fc 01       	movw	r30, r24
    2610:	ee 0f       	add	r30, r30
    2612:	ff 1f       	adc	r31, r31
    2614:	e8 0f       	add	r30, r24
    2616:	f9 1f       	adc	r31, r25
    2618:	ee 0f       	add	r30, r30
    261a:	ff 1f       	adc	r31, r31
    261c:	ee 0f       	add	r30, r30
    261e:	ff 1f       	adc	r31, r31
    2620:	e8 5e       	subi	r30, 0xE8	; 232
    2622:	fe 4f       	sbci	r31, 0xFE	; 254
    2624:	20 91 30 01 	lds	r18, 0x0130
    2628:	30 91 31 01 	lds	r19, 0x0131
    262c:	40 91 32 01 	lds	r20, 0x0132
    2630:	50 91 33 01 	lds	r21, 0x0133
    2634:	80 81       	ld	r24, Z
    2636:	91 81       	ldd	r25, Z+1	; 0x01
    2638:	a2 81       	ldd	r26, Z+2	; 0x02
    263a:	b3 81       	ldd	r27, Z+3	; 0x03
    263c:	82 17       	cp	r24, r18
    263e:	93 07       	cpc	r25, r19
    2640:	a4 07       	cpc	r26, r20
    2642:	b5 07       	cpc	r27, r21
    2644:	18 f4       	brcc	.+6      	; 0x264c <main+0x7b4>
             ii = 2;
    2646:	82 e0       	ldi	r24, 0x02	; 2
    2648:	80 93 4b 01 	sts	0x014B, r24
       }
       char x = '1';
       char y = '3';
       char z = '2';
   
       if (ii == 1) {
    264c:	80 91 4b 01 	lds	r24, 0x014B
    2650:	81 30       	cpi	r24, 0x01	; 1
    2652:	29 f0       	breq	.+10     	; 0x265e <main+0x7c6>
          // x = '1';
          y = '2';
          z = '3';
       }
       if (ii == 2) {
    2654:	82 30       	cpi	r24, 0x02	; 2
    2656:	39 f0       	breq	.+14     	; 0x2666 <main+0x7ce>
             ii = 2;
          }
       }
       char x = '1';
       char y = '3';
       char z = '2';
    2658:	12 e3       	ldi	r17, 0x32	; 50
          if (resis[2].rx > resis[ii].rx) {
             ii = 2;
          }
       }
       char x = '1';
       char y = '3';
    265a:	03 e3       	ldi	r16, 0x33	; 51
    265c:	02 c0       	rjmp	.+4      	; 0x2662 <main+0x7ca>
       char z = '2';
   
       if (ii == 1) {
          // x = '1';
          y = '2';
          z = '3';
    265e:	13 e3       	ldi	r17, 0x33	; 51
       char y = '3';
       char z = '2';
   
       if (ii == 1) {
          // x = '1';
          y = '2';
    2660:	02 e3       	ldi	r16, 0x32	; 50
       } else {
          if (resis[2].rx > resis[ii].rx) {
             ii = 2;
          }
       }
       char x = '1';
    2662:	81 e3       	ldi	r24, 0x31	; 49
    2664:	03 c0       	rjmp	.+6      	; 0x266c <main+0x7d4>
          z = '3';
       }
       if (ii == 2) {
          x = '2';
          y = '1';
          z = '3';
    2666:	13 e3       	ldi	r17, 0x33	; 51
          y = '2';
          z = '3';
       }
       if (ii == 2) {
          x = '2';
          y = '1';
    2668:	01 e3       	ldi	r16, 0x31	; 49
          // x = '1';
          y = '2';
          z = '3';
       }
       if (ii == 2) {
          x = '2';
    266a:	82 e3       	ldi	r24, 0x32	; 50
          y = '1';
          z = '3';
       }
       lcd_data(x);
    266c:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       lcd_fix_string(Resistor_str);    // -[=]-
    2670:	82 e5       	ldi	r24, 0x52	; 82
    2672:	91 e0       	ldi	r25, 0x01	; 1
    2674:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
       lcd_data(y);
    2678:	80 2f       	mov	r24, r16
    267a:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       lcd_fix_string(Resistor_str);    // -[=]-
    267e:	82 e5       	ldi	r24, 0x52	; 82
    2680:	91 e0       	ldi	r25, 0x01	; 1
    2682:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
       lcd_data(z);
    2686:	81 2f       	mov	r24, r17
    2688:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
    }
    lcd_line2(); //2. row 
    268c:	80 ec       	ldi	r24, 0xC0	; 192
    268e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
    if (ResistorsFound == 1) {
    2692:	80 91 5e 01 	lds	r24, 0x015E
    2696:	81 30       	cpi	r24, 0x01	; 1
    2698:	01 f5       	brne	.+64     	; 0x26da <main+0x842>
       RvalOut(0);
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	0e 94 4b 03 	call	0x696	; 0x696 <RvalOut>
#if FLASHEND > 0x1fff
       if (resis[0].lx != 0) {
    26a0:	80 91 1c 01 	lds	r24, 0x011C
    26a4:	90 91 1d 01 	lds	r25, 0x011D
    26a8:	a0 91 1e 01 	lds	r26, 0x011E
    26ac:	b0 91 1f 01 	lds	r27, 0x011F
    26b0:	00 97       	sbiw	r24, 0x00	; 0
    26b2:	a1 05       	cpc	r26, r1
    26b4:	b1 05       	cpc	r27, r1
    26b6:	09 f4       	brne	.+2      	; 0x26ba <main+0x822>
    26b8:	b6 c0       	rjmp	.+364    	; 0x2826 <main+0x98e>
	  // resistor have also Inductance
          lcd_fix_string(Lis_str);	// "L="
    26ba:	82 e4       	ldi	r24, 0x42	; 66
    26bc:	91 e0       	ldi	r25, 0x01	; 1
    26be:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
          DisplayValue(resis[0].lx,resis[0].lpre,'H',3);	// output inductance
    26c2:	60 91 1c 01 	lds	r22, 0x011C
    26c6:	70 91 1d 01 	lds	r23, 0x011D
    26ca:	80 91 1e 01 	lds	r24, 0x011E
    26ce:	90 91 1f 01 	lds	r25, 0x011F
    26d2:	40 91 20 01 	lds	r20, 0x0120
    26d6:	28 e4       	ldi	r18, 0x48	; 72
    26d8:	78 cd       	rjmp	.-1296   	; 0x21ca <main+0x332>
       }
#endif
    } else {
       // output resistor values in right order
       if (ii == 0) {
    26da:	80 91 4b 01 	lds	r24, 0x014B
    26de:	88 23       	and	r24, r24
    26e0:	31 f4       	brne	.+12     	; 0x26ee <main+0x856>
          RvalOut(1);
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	0e 94 4b 03 	call	0x696	; 0x696 <RvalOut>
          RvalOut(2);
    26e8:	82 e0       	ldi	r24, 0x02	; 2
    26ea:	0e 94 4b 03 	call	0x696	; 0x696 <RvalOut>
       }
       if (ii == 1) {
    26ee:	80 91 4b 01 	lds	r24, 0x014B
    26f2:	81 30       	cpi	r24, 0x01	; 1
    26f4:	31 f4       	brne	.+12     	; 0x2702 <main+0x86a>
          RvalOut(0);
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	0e 94 4b 03 	call	0x696	; 0x696 <RvalOut>
          RvalOut(2);
    26fc:	82 e0       	ldi	r24, 0x02	; 2
    26fe:	0e 94 4b 03 	call	0x696	; 0x696 <RvalOut>
       }
       if (ii == 2) {
    2702:	80 91 4b 01 	lds	r24, 0x014B
    2706:	82 30       	cpi	r24, 0x02	; 2
    2708:	09 f0       	breq	.+2      	; 0x270c <main+0x874>
    270a:	8d c0       	rjmp	.+282    	; 0x2826 <main+0x98e>
          RvalOut(0);
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	0e 94 4b 03 	call	0x696	; 0x696 <RvalOut>
          RvalOut(1);
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	0e 94 4b 03 	call	0x696	; 0x696 <RvalOut>
    2718:	86 c0       	rjmp	.+268    	; 0x2826 <main+0x98e>
    goto end;

  } // end (PartFound == PART_RESISTOR)

//capacity measurement is wanted
  else if(PartFound == PART_CAPACITOR) {
    271a:	87 30       	cpi	r24, 0x07	; 7
    271c:	09 f0       	breq	.+2      	; 0x2720 <main+0x888>
    271e:	51 c0       	rjmp	.+162    	; 0x27c2 <main+0x92a>
//     lcd_fix_string(Capacitor);
     lcd_testpin(cap.ca);		//Pin number 1
    2720:	80 91 72 01 	lds	r24, 0x0172
    2724:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
     lcd_fix_string(CapZeich);		// capacitor sign
    2728:	85 e2       	ldi	r24, 0x25	; 37
    272a:	91 e0       	ldi	r25, 0x01	; 1
    272c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_testpin(cap.cb);		//Pin number 2
    2730:	80 91 73 01 	lds	r24, 0x0173
    2734:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
#if FLASHEND > 0x1fff
     GetVloss();			// get Voltage loss of capacitor
    2738:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <GetVloss>
     if (cap.v_loss != 0) {
    273c:	80 91 70 01 	lds	r24, 0x0170
    2740:	90 91 71 01 	lds	r25, 0x0171
    2744:	00 97       	sbiw	r24, 0x00	; 0
    2746:	79 f0       	breq	.+30     	; 0x2766 <main+0x8ce>
        lcd_fix_string(VLOSS_str);	// "  Vloss="
    2748:	8a e3       	ldi	r24, 0x3A	; 58
    274a:	91 e0       	ldi	r25, 0x01	; 1
    274c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        DisplayValue(cap.v_loss,-1,'%',2);
    2750:	60 91 70 01 	lds	r22, 0x0170
    2754:	70 91 71 01 	lds	r23, 0x0171
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	4f ef       	ldi	r20, 0xFF	; 255
    275e:	25 e2       	ldi	r18, 0x25	; 37
    2760:	02 e0       	ldi	r16, 0x02	; 2
    2762:	0e 94 95 02 	call	0x52a	; 0x52a <DisplayValue>
     }
#endif
     lcd_line2(); 			//2. row 
    2766:	80 ec       	ldi	r24, 0xC0	; 192
    2768:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     DisplayValue(cap.cval_max,cap.cpre_max,'F',4);
    276c:	60 91 66 01 	lds	r22, 0x0166
    2770:	70 91 67 01 	lds	r23, 0x0167
    2774:	80 91 68 01 	lds	r24, 0x0168
    2778:	90 91 69 01 	lds	r25, 0x0169
    277c:	40 91 75 01 	lds	r20, 0x0175
    2780:	26 e4       	ldi	r18, 0x46	; 70
    2782:	04 e0       	ldi	r16, 0x04	; 4
    2784:	0e 94 95 02 	call	0x52a	; 0x52a <DisplayValue>
#if FLASHEND > 0x1fff
     cap.esr = GetESR(cap.cb, cap.ca);		// get ESR of capacitor
    2788:	80 91 73 01 	lds	r24, 0x0173
    278c:	60 91 72 01 	lds	r22, 0x0172
    2790:	0e 94 24 1b 	call	0x3648	; 0x3648 <GetESR>
    2794:	90 93 6f 01 	sts	0x016F, r25
    2798:	80 93 6e 01 	sts	0x016E, r24
     if ( cap.esr < 65530) {
    279c:	2f ef       	ldi	r18, 0xFF	; 255
    279e:	8a 3f       	cpi	r24, 0xFA	; 250
    27a0:	92 07       	cpc	r25, r18
    27a2:	08 f0       	brcs	.+2      	; 0x27a6 <main+0x90e>
    27a4:	40 c0       	rjmp	.+128    	; 0x2826 <main+0x98e>
        lcd_fix_string(ESR_str);
    27a6:	84 e3       	ldi	r24, 0x34	; 52
    27a8:	91 e0       	ldi	r25, 0x01	; 1
    27aa:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        DisplayValue(cap.esr,-2,LCD_CHAR_OMEGA,2);
    27ae:	60 91 6e 01 	lds	r22, 0x016E
    27b2:	70 91 6f 01 	lds	r23, 0x016F
    27b6:	80 e0       	ldi	r24, 0x00	; 0
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	4e ef       	ldi	r20, 0xFE	; 254
    27bc:	24 ef       	ldi	r18, 0xF4	; 244
    27be:	02 e0       	ldi	r16, 0x02	; 2
    27c0:	57 ce       	rjmp	.-850    	; 0x2470 <main+0x5d8>
     }
#endif
     goto end;
  }
  if(NumOfDiodes == 0) { //no diodes are found
    27c2:	80 91 05 01 	lds	r24, 0x0105
    27c6:	88 23       	and	r24, r24
    27c8:	71 f4       	brne	.+28     	; 0x27e6 <main+0x94e>
     lcd_fix_string(TestFailed1); 	//"Kein,unbek. oder"
    27ca:	80 ea       	ldi	r24, 0xA0	; 160
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_line2(); //2. row 
    27d2:	80 ec       	ldi	r24, 0xC0	; 192
    27d4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     lcd_fix_string(TestFailed2); 	//"defektes "
    27d8:	81 e7       	ldi	r24, 0x71	; 113
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_fix_string(Bauteil);		//"Bauteil"
    27e0:	8a e7       	ldi	r24, 0x7A	; 122
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	16 c0       	rjmp	.+44     	; 0x2812 <main+0x97a>
  } else {
     lcd_fix_string(Bauteil);		//"Bauteil"
    27e6:	8a e7       	ldi	r24, 0x7A	; 122
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_fix_string(Unknown); 		//" unbek."
    27ee:	87 e9       	ldi	r24, 0x97	; 151
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_line2(); //2. row 
    27f6:	80 ec       	ldi	r24, 0xC0	; 192
    27f8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     lcd_fix_string(OrBroken); 		//"oder defekt "
    27fc:	80 eb       	ldi	r24, 0xB0	; 176
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_data(NumOfDiodes + '0');
    2804:	80 91 05 01 	lds	r24, 0x0105
    2808:	80 5d       	subi	r24, 0xD0	; 208
    280a:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
     lcd_fix_string(AnKat);		//"->|-"
    280e:	85 e4       	ldi	r24, 0x45	; 69
    2810:	91 e0       	ldi	r25, 0x01	; 1
    2812:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  }
  empty_count++;
    2816:	80 91 4a 01 	lds	r24, 0x014A
    281a:	8f 5f       	subi	r24, 0xFF	; 255
    281c:	80 93 4a 01 	sts	0x014A, r24
  mess_count = 0;
    2820:	10 92 0b 01 	sts	0x010B, r1
  goto end2;
    2824:	07 c0       	rjmp	.+14     	; 0x2834 <main+0x99c>
gakAusgabe:
  lcd_line2(); //2. row 
  PinLayout(Cathode_char,'G','A'); 	// CGA= or 123=...
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 end:
  empty_count = 0;		// reset counter, if part is found
    2826:	10 92 4a 01 	sts	0x014A, r1
  mess_count++;			// count measurements
    282a:	80 91 0b 01 	lds	r24, 0x010B
    282e:	8f 5f       	subi	r24, 0xFF	; 255
    2830:	80 93 0b 01 	sts	0x010B, r24

 end2:
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND, release relay
    2834:	88 e1       	ldi	r24, 0x18	; 24
    2836:	87 b9       	out	0x07, r24	; 7
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
    2838:	4f 9b       	sbis	0x09, 7	; 9
    283a:	fe cf       	rjmp	.-4      	; 0x2838 <main+0x9a0>
  wait_about200ms();
    283c:	88 e2       	ldi	r24, 0x28	; 40
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>
// wait 14 seconds or 5 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage+=10) {
    2844:	10 92 60 01 	sts	0x0160, r1
    2848:	10 92 5f 01 	sts	0x015F, r1
    284c:	10 c0       	rjmp	.+32     	; 0x286e <main+0x9d6>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    284e:	4f 9b       	sbis	0x09, 7	; 9
    2850:	7a cb       	rjmp	.-2316   	; 0x1f46 <main+0xae>
        // If the key is pressed again... 
        // goto start of measurement 
        goto start;
     }
     wdt_reset();
    2852:	a8 95       	wdr
     wait_about10ms();
    2854:	82 e0       	ldi	r24, 0x02	; 2
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>
 end2:
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND, release relay
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
  wait_about200ms();
// wait 14 seconds or 5 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage+=10) {
    285c:	80 91 5f 01 	lds	r24, 0x015F
    2860:	90 91 60 01 	lds	r25, 0x0160
    2864:	0a 96       	adiw	r24, 0x0a	; 10
    2866:	90 93 60 01 	sts	0x0160, r25
    286a:	80 93 5f 01 	sts	0x015F, r24
    286e:	80 91 5f 01 	lds	r24, 0x015F
    2872:	90 91 60 01 	lds	r25, 0x0160
    2876:	2d e6       	ldi	r18, 0x6D	; 109
    2878:	80 36       	cpi	r24, 0x60	; 96
    287a:	92 07       	cpc	r25, r18
    287c:	40 f3       	brcs	.-48     	; 0x284e <main+0x9b6>
     goto start;			// repeat measurement POWER_OFF times
  }
 #endif
  // only one Measurement requested, shut off
//  MCUSR = 0;
  ON_PORT &= ~(1<<ON_PIN);		//switch off power
    287e:	5e 98       	cbi	0x0b, 6	; 11
  //never ending loop 
  while(1) {
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    2880:	4f 9b       	sbis	0x09, 7	; 9
    2882:	61 cb       	rjmp	.-2366   	; 0x1f46 <main+0xae>
        // The statement is only reached if no auto off equipment is installed
        goto start;
     }
     wdt_reset();
    2884:	a8 95       	wdr
     wait_about10ms();
    2886:	82 e0       	ldi	r24, 0x02	; 2
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>
  }
    288e:	f8 cf       	rjmp	.-16     	; 0x2880 <main+0x9e8>

00002890 <uart_putc>:
    2890:	2f 93       	push	r18
    2892:	5f b7       	in	r21, 0x3f	; 63
    2894:	2f 93       	push	r18
    2896:	2a e0       	ldi	r18, 0x0A	; 10
    2898:	80 95       	com	r24
    289a:	08 94       	sec

0000289c <putchar0>:
    289c:	10 f4       	brcc	.+4      	; 0x28a2 <putchar1>
    289e:	43 98       	cbi	0x08, 3	; 8
    28a0:	02 c0       	rjmp	.+4      	; 0x28a6 <putchar2>

000028a2 <putchar1>:
    28a2:	43 9a       	sbi	0x08, 3	; 8
	...

000028a6 <putchar2>:
    28a6:	22 d0       	rcall	.+68     	; 0x28ec <wait100us>
    28a8:	29 d0       	rcall	.+82     	; 0x28fc <wait3us>
    28aa:	86 95       	lsr	r24
    28ac:	2a 95       	dec	r18
    28ae:	b1 f7       	brne	.-20     	; 0x289c <putchar0>
    28b0:	2f 91       	pop	r18
    28b2:	5f bf       	out	0x3f, r21	; 63
    28b4:	2f 91       	pop	r18
    28b6:	08 95       	ret

000028b8 <UART_delay1>:
    28b8:	08 95       	ret

000028ba <wait5s>:
    28ba:	03 d0       	rcall	.+6      	; 0x28c2 <wait1000ms>

000028bc <wait4s>:
    28bc:	02 d0       	rcall	.+4      	; 0x28c2 <wait1000ms>

000028be <wait3s>:
    28be:	01 d0       	rcall	.+2      	; 0x28c2 <wait1000ms>

000028c0 <wait2s>:
    28c0:	00 d0       	rcall	.+0      	; 0x28c2 <wait1000ms>

000028c2 <wait1000ms>:
    28c2:	00 d0       	rcall	.+0      	; 0x28c4 <wait500ms>

000028c4 <wait500ms>:
    28c4:	03 d0       	rcall	.+6      	; 0x28cc <wait100ms>

000028c6 <wait400ms>:
    28c6:	02 d0       	rcall	.+4      	; 0x28cc <wait100ms>

000028c8 <wait300ms>:
    28c8:	01 d0       	rcall	.+2      	; 0x28cc <wait100ms>

000028ca <wait200ms>:
    28ca:	00 d0       	rcall	.+0      	; 0x28cc <wait100ms>

000028cc <wait100ms>:
    28cc:	a8 95       	wdr
    28ce:	00 d0       	rcall	.+0      	; 0x28d0 <wait50ms>

000028d0 <wait50ms>:
    28d0:	03 d0       	rcall	.+6      	; 0x28d8 <wait10ms>

000028d2 <wait40ms>:
    28d2:	02 d0       	rcall	.+4      	; 0x28d8 <wait10ms>

000028d4 <wait30ms>:
    28d4:	01 d0       	rcall	.+2      	; 0x28d8 <wait10ms>

000028d6 <wait20ms>:
    28d6:	00 d0       	rcall	.+0      	; 0x28d8 <wait10ms>

000028d8 <wait10ms>:
    28d8:	00 d0       	rcall	.+0      	; 0x28da <wait5ms>

000028da <wait5ms>:
    28da:	03 d0       	rcall	.+6      	; 0x28e2 <wait1ms>

000028dc <wait4ms>:
    28dc:	02 d0       	rcall	.+4      	; 0x28e2 <wait1ms>

000028de <wait3ms>:
    28de:	01 d0       	rcall	.+2      	; 0x28e2 <wait1ms>

000028e0 <wait2ms>:
    28e0:	00 d0       	rcall	.+0      	; 0x28e2 <wait1ms>

000028e2 <wait1ms>:
    28e2:	00 d0       	rcall	.+0      	; 0x28e4 <wait500us>

000028e4 <wait500us>:
    28e4:	03 d0       	rcall	.+6      	; 0x28ec <wait100us>

000028e6 <wait400us>:
    28e6:	02 d0       	rcall	.+4      	; 0x28ec <wait100us>

000028e8 <wait300us>:
    28e8:	01 d0       	rcall	.+2      	; 0x28ec <wait100us>

000028ea <wait200us>:
    28ea:	00 d0       	rcall	.+0      	; 0x28ec <wait100us>

000028ec <wait100us>:
    28ec:	00 d0       	rcall	.+0      	; 0x28ee <wait50us>

000028ee <wait50us>:
    28ee:	03 d0       	rcall	.+6      	; 0x28f6 <wait10us>

000028f0 <wait40us>:
    28f0:	02 d0       	rcall	.+4      	; 0x28f6 <wait10us>

000028f2 <wait30us>:
    28f2:	01 d0       	rcall	.+2      	; 0x28f6 <wait10us>

000028f4 <wait20us>:
    28f4:	00 d0       	rcall	.+0      	; 0x28f6 <wait10us>

000028f6 <wait10us>:
    28f6:	00 d0       	rcall	.+0      	; 0x28f8 <wait5us>

000028f8 <wait5us>:
    28f8:	03 d0       	rcall	.+6      	; 0x2900 <wait1us>

000028fa <wait4us>:
    28fa:	02 d0       	rcall	.+4      	; 0x2900 <wait1us>

000028fc <wait3us>:
    28fc:	01 d0       	rcall	.+2      	; 0x2900 <wait1us>

000028fe <wait2us>:
    28fe:	00 d0       	rcall	.+0      	; 0x2900 <wait1us>

00002900 <wait1us>:
    2900:	00 00       	nop
    2902:	08 95       	ret

00002904 <getRLmultip>:
  R_DDR = 0;			// switch all resistor ports to input
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
  return;
 } // end ReadCapacity()

unsigned int getRLmultip(unsigned int cvolt) {
    2904:	ff 92       	push	r15
    2906:	0f 93       	push	r16
    2908:	1f 93       	push	r17
    290a:	cf 93       	push	r28
    290c:	df 93       	push	r29

  unsigned int uvolt;
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;
  if (cvolt >= RL_Tab_Beginn) {
    290e:	21 e0       	ldi	r18, 0x01	; 1
    2910:	8c 32       	cpi	r24, 0x2C	; 44
    2912:	92 07       	cpc	r25, r18
    2914:	18 f0       	brcs	.+6      	; 0x291c <getRLmultip+0x18>
     uvolt = cvolt - RL_Tab_Beginn;
    2916:	8c 52       	subi	r24, 0x2C	; 44
    2918:	91 40       	sbci	r25, 0x01	; 1
    291a:	02 c0       	rjmp	.+4      	; 0x2920 <getRLmultip+0x1c>
  } else {
     uvolt = 0;			// limit to begin of table
    291c:	80 e0       	ldi	r24, 0x00	; 0
    291e:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = uvolt / RL_Tab_Abstand;
    2920:	69 e1       	ldi	r22, 0x19	; 25
    2922:	70 e0       	ldi	r23, 0x00	; 0
    2924:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <__udivmodhi4>
  tabres = uvolt % RL_Tab_Abstand;
    2928:	f8 2e       	mov	r15, r24
  tabres = RL_Tab_Abstand - tabres;
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
    292a:	6d 32       	cpi	r22, 0x2D	; 45
    292c:	08 f0       	brcs	.+2      	; 0x2930 <getRLmultip+0x2c>
    292e:	6c e2       	ldi	r22, 0x2C	; 44
    2930:	c6 2f       	mov	r28, r22
    2932:	d0 e0       	ldi	r29, 0x00	; 0
    2934:	ce 01       	movw	r24, r28
    2936:	88 0f       	add	r24, r24
    2938:	99 1f       	adc	r25, r25
    293a:	80 50       	subi	r24, 0x00	; 0
    293c:	90 40       	sbci	r25, 0x00	; 0
    293e:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <__eerd_word_m168>
    2942:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RLtab[tabind+1]);
    2944:	ce 01       	movw	r24, r28
    2946:	88 0f       	add	r24, r24
    2948:	99 1f       	adc	r25, r25
    294a:	8e 5f       	subi	r24, 0xFE	; 254
    294c:	9f 4f       	sbci	r25, 0xFF	; 255
    294e:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <__eerd_word_m168>
    2952:	9c 01       	movw	r18, r24
  } else {
     uvolt = 0;			// limit to begin of table
  }
  tabind = uvolt / RL_Tab_Abstand;
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
    2954:	49 e1       	ldi	r20, 0x19	; 25
    2956:	4f 19       	sub	r20, r15
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
    2958:	50 e0       	ldi	r21, 0x00	; 0
    295a:	08 1b       	sub	r16, r24
    295c:	19 0b       	sbc	r17, r25
    295e:	40 9f       	mul	r20, r16
    2960:	c0 01       	movw	r24, r0
    2962:	41 9f       	mul	r20, r17
    2964:	90 0d       	add	r25, r0
    2966:	50 9f       	mul	r21, r16
    2968:	90 0d       	add	r25, r0
    296a:	11 24       	eor	r1, r1
    296c:	0c 96       	adiw	r24, 0x0c	; 12
    296e:	69 e1       	ldi	r22, 0x19	; 25
    2970:	70 e0       	ldi	r23, 0x00	; 0
    2972:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <__udivmodhi4>
    2976:	62 0f       	add	r22, r18
    2978:	73 1f       	adc	r23, r19
}
    297a:	cb 01       	movw	r24, r22
    297c:	df 91       	pop	r29
    297e:	cf 91       	pop	r28
    2980:	1f 91       	pop	r17
    2982:	0f 91       	pop	r16
    2984:	ff 90       	pop	r15
    2986:	08 95       	ret

00002988 <Scale_C_with_vcc>:

void Scale_C_with_vcc(void) {
    2988:	8f 92       	push	r8
    298a:	9f 92       	push	r9
    298c:	af 92       	push	r10
    298e:	bf 92       	push	r11
    2990:	df 92       	push	r13
    2992:	ef 92       	push	r14
    2994:	ff 92       	push	r15
    2996:	0f 93       	push	r16
    2998:	1f 93       	push	r17
    299a:	e0 90 62 01 	lds	r14, 0x0162
    299e:	f0 90 63 01 	lds	r15, 0x0163
    29a2:	00 91 64 01 	lds	r16, 0x0164
    29a6:	10 91 65 01 	lds	r17, 0x0165
    29aa:	d0 90 74 01 	lds	r13, 0x0174
   while (cap.cval > 100000) {
      cap.cval /= 10;
    29ae:	4a e0       	ldi	r20, 0x0A	; 10
    29b0:	84 2e       	mov	r8, r20
    29b2:	91 2c       	mov	r9, r1
    29b4:	a1 2c       	mov	r10, r1
    29b6:	b1 2c       	mov	r11, r1
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    29b8:	08 c0       	rjmp	.+16     	; 0x29ca <Scale_C_with_vcc+0x42>
      cap.cval /= 10;
    29ba:	c8 01       	movw	r24, r16
    29bc:	b7 01       	movw	r22, r14
    29be:	a5 01       	movw	r20, r10
    29c0:	94 01       	movw	r18, r8
    29c2:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
    29c6:	79 01       	movw	r14, r18
    29c8:	8a 01       	movw	r16, r20
    29ca:	8d 2d       	mov	r24, r13
    29cc:	d3 94       	inc	r13
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    29ce:	91 ea       	ldi	r25, 0xA1	; 161
    29d0:	e9 16       	cp	r14, r25
    29d2:	96 e8       	ldi	r25, 0x86	; 134
    29d4:	f9 06       	cpc	r15, r25
    29d6:	91 e0       	ldi	r25, 0x01	; 1
    29d8:	09 07       	cpc	r16, r25
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	19 07       	cpc	r17, r25
    29de:	68 f7       	brcc	.-38     	; 0x29ba <Scale_C_with_vcc+0x32>
    29e0:	80 93 74 01 	sts	0x0174, r24
      cap.cval /= 10;
      cap.cpre ++;			// prevent overflow
   }
   cap.cval *= ADCconfig.U_AVCC;	// scale with measured voltage
    29e4:	20 91 40 01 	lds	r18, 0x0140
    29e8:	30 91 41 01 	lds	r19, 0x0141
    29ec:	40 e0       	ldi	r20, 0x00	; 0
    29ee:	50 e0       	ldi	r21, 0x00	; 0
    29f0:	c8 01       	movw	r24, r16
    29f2:	b7 01       	movw	r22, r14
    29f4:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
    29f8:	28 e8       	ldi	r18, 0x88	; 136
    29fa:	33 e1       	ldi	r19, 0x13	; 19
    29fc:	40 e0       	ldi	r20, 0x00	; 0
    29fe:	50 e0       	ldi	r21, 0x00	; 0
    2a00:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
    2a04:	20 93 62 01 	sts	0x0162, r18
    2a08:	30 93 63 01 	sts	0x0163, r19
    2a0c:	40 93 64 01 	sts	0x0164, r20
    2a10:	50 93 65 01 	sts	0x0165, r21
}
    2a14:	1f 91       	pop	r17
    2a16:	0f 91       	pop	r16
    2a18:	ff 90       	pop	r15
    2a1a:	ef 90       	pop	r14
    2a1c:	df 90       	pop	r13
    2a1e:	bf 90       	pop	r11
    2a20:	af 90       	pop	r10
    2a22:	9f 90       	pop	r9
    2a24:	8f 90       	pop	r8
    2a26:	08 95       	ret

00002a28 <ReadCapacity>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    2a28:	8f 92       	push	r8
    2a2a:	9f 92       	push	r9
    2a2c:	af 92       	push	r10
    2a2e:	bf 92       	push	r11
    2a30:	cf 92       	push	r12
    2a32:	df 92       	push	r13
    2a34:	ef 92       	push	r14
    2a36:	ff 92       	push	r15
    2a38:	0f 93       	push	r16
    2a3a:	1f 93       	push	r17
    2a3c:	cf 93       	push	r28
    2a3e:	df 93       	push	r29
    2a40:	18 2f       	mov	r17, r24
    2a42:	06 2f       	mov	r16, r22
#if FLASHEND > 0x1fff
  unsigned int vloss;	// lost voltage after load pulse in 0.1% 
#endif

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
    2a44:	88 0f       	add	r24, r24
    2a46:	81 0f       	add	r24, r17
    2a48:	86 0f       	add	r24, r22
    2a4a:	81 50       	subi	r24, 0x01	; 1
    2a4c:	80 93 4c 01 	sts	0x014C, r24
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2a50:	e6 2f       	mov	r30, r22
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	e3 5f       	subi	r30, 0xF3	; 243
    2a56:	fe 4f       	sbci	r31, 0xFE	; 254
    2a58:	24 91       	lpm	r18, Z+
  HiPinR_L = pgm_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
    2a5a:	e1 2f       	mov	r30, r17
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	e6 5f       	subi	r30, 0xF6	; 246
    2a60:	fe 4f       	sbci	r31, 0xFE	; 254
    2a62:	c4 90       	lpm	r12, Z+
  lcd_testpin(LowPin);
  lcd_data('C');
  lcd_testpin(HighPin);
  lcd_space();
#endif
  if(PartFound == PART_RESISTOR) {
    2a64:	80 91 07 01 	lds	r24, 0x0107
    2a68:	86 30       	cpi	r24, 0x06	; 6
    2a6a:	09 f4       	brne	.+2      	; 0x2a6e <ReadCapacity+0x46>
    2a6c:	9f c2       	rjmp	.+1342   	; 0x2fac <ReadCapacity+0x584>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    2a6e:	40 91 05 01 	lds	r20, 0x0105
    2a72:	a8 e7       	ldi	r26, 0x78	; 120
    2a74:	b1 e0       	ldi	r27, 0x01	; 1
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	13 c0       	rjmp	.+38     	; 0x2aa0 <ReadCapacity+0x78>
     if ((diodes[ii].Cathode == LowPin) && (diodes[ii].Anode == HighPin) && (diodes[ii].Voltage < 1500)) {
    2a7a:	11 96       	adiw	r26, 0x01	; 1
    2a7c:	8c 91       	ld	r24, X
    2a7e:	11 97       	sbiw	r26, 0x01	; 1
    2a80:	80 17       	cp	r24, r16
    2a82:	61 f4       	brne	.+24     	; 0x2a9c <ReadCapacity+0x74>
    2a84:	8c 91       	ld	r24, X
    2a86:	81 17       	cp	r24, r17
    2a88:	49 f4       	brne	.+18     	; 0x2a9c <ReadCapacity+0x74>
    2a8a:	12 96       	adiw	r26, 0x02	; 2
    2a8c:	8d 91       	ld	r24, X+
    2a8e:	9c 91       	ld	r25, X
    2a90:	13 97       	sbiw	r26, 0x03	; 3
    2a92:	55 e0       	ldi	r21, 0x05	; 5
    2a94:	8c 3d       	cpi	r24, 0xDC	; 220
    2a96:	95 07       	cpc	r25, r21
    2a98:	08 f4       	brcc	.+2      	; 0x2a9c <ReadCapacity+0x74>
    2a9a:	88 c2       	rjmp	.+1296   	; 0x2fac <ReadCapacity+0x584>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    2a9c:	3f 5f       	subi	r19, 0xFF	; 255
    2a9e:	14 96       	adiw	r26, 0x04	; 4
    2aa0:	34 17       	cp	r19, r20
    2aa2:	58 f3       	brcs	.-42     	; 0x2a7a <ReadCapacity+0x52>

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2aa4:	58 e0       	ldi	r21, 0x08	; 8
    2aa6:	85 2e       	mov	r8, r21
    2aa8:	82 2a       	or	r8, r18
        return;
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
    2aaa:	10 92 6f 01 	sts	0x016F, r1
    2aae:	10 92 6e 01 	sts	0x016E, r1
  vloss = 0;				// set lost voltage to zero
#endif
  cap.cval = 0;				// set capacity value to zero
    2ab2:	10 92 62 01 	sts	0x0162, r1
    2ab6:	10 92 63 01 	sts	0x0163, r1
    2aba:	10 92 64 01 	sts	0x0164, r1
    2abe:	10 92 65 01 	sts	0x0165, r1
  cap.cpre = -12;			//default unit is pF
    2ac2:	84 ef       	ldi	r24, 0xF4	; 244
    2ac4:	80 93 74 01 	sts	0x0174, r24
  EntladePins();			// discharge capacitor
    2ac8:	0e 94 b0 01 	call	0x360	; 0x360 <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    2acc:	88 e0       	ldi	r24, 0x08	; 8
    2ace:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    2ad0:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    2ad2:	87 b8       	out	0x07, r8	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    2ad4:	c4 b8       	out	0x04, r12	; 4
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    2ad6:	81 2f       	mov	r24, r17
    2ad8:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
    2adc:	7c 01       	movw	r14, r24
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2ade:	10 92 4e 01 	sts	0x014E, r1
    2ae2:	10 92 4d 01 	sts	0x014D, r1
  EntladePins();			// discharge capacitor
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
  R_PORT = 0;				// switch R-Port to GND
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    2ae6:	ec 01       	movw	r28, r24
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2ae8:	2d c0       	rjmp	.+90     	; 0x2b44 <ReadCapacity+0x11c>
     R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    2aea:	c5 b8       	out	0x05, r12	; 5
     R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    2aec:	c4 b8       	out	0x04, r12	; 4
     wait10ms();			// wait exactly 10ms, do not sleep
    2aee:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <wait10ms>
     R_DDR = 0;				// switch back to input
    2af2:	14 b8       	out	0x04, r1	; 4
     R_PORT = 0;			// no Pull up
    2af4:	15 b8       	out	0x05, r1	; 5
     wait500us();			//wait a little time
    2af6:	0e 94 72 14 	call	0x28e4	; 0x28e4 <wait500us>
     wdt_reset();
    2afa:	a8 95       	wdr
     // read voltage without current, is already charged enough?
     adcv[2] = ReadADC(HighPin);
    2afc:	81 2f       	mov	r24, r17
    2afe:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
     if (adcv[2] > adcv[0]) {
    2b02:	e8 16       	cp	r14, r24
    2b04:	f9 06       	cpc	r15, r25
    2b06:	20 f4       	brcc	.+8      	; 0x2b10 <ReadCapacity+0xe8>
        adcv[2] -= adcv[0];		//difference to beginning voltage
    2b08:	ec 01       	movw	r28, r24
    2b0a:	ce 19       	sub	r28, r14
    2b0c:	df 09       	sbc	r29, r15
    2b0e:	02 c0       	rjmp	.+4      	; 0x2b14 <ReadCapacity+0xec>
     } else {
        adcv[2] = 0;			// voltage is lower or same as beginning voltage
    2b10:	c0 e0       	ldi	r28, 0x00	; 0
    2b12:	d0 e0       	ldi	r29, 0x00	; 0
     }
     if ((ovcnt16 == 126) && (adcv[2] < 75)) {
    2b14:	80 91 4d 01 	lds	r24, 0x014D
    2b18:	90 91 4e 01 	lds	r25, 0x014E
    2b1c:	8e 37       	cpi	r24, 0x7E	; 126
    2b1e:	91 05       	cpc	r25, r1
    2b20:	21 f4       	brne	.+8      	; 0x2b2a <ReadCapacity+0x102>
    2b22:	cb 34       	cpi	r28, 0x4B	; 75
    2b24:	d1 05       	cpc	r29, r1
    2b26:	08 f4       	brcc	.+2      	; 0x2b2a <ReadCapacity+0x102>
    2b28:	3c c2       	rjmp	.+1144   	; 0x2fa2 <ReadCapacity+0x57a>
        // 300mV can not be reached well-timed 
        break;		// don't try to load any more
     }
     if (adcv[2] > 300) {
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	cd 32       	cpi	r28, 0x2D	; 45
    2b2e:	d8 07       	cpc	r29, r24
    2b30:	b0 f4       	brcc	.+44     	; 0x2b5e <ReadCapacity+0x136>
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2b32:	80 91 4d 01 	lds	r24, 0x014D
    2b36:	90 91 4e 01 	lds	r25, 0x014E
    2b3a:	01 96       	adiw	r24, 0x01	; 1
    2b3c:	90 93 4e 01 	sts	0x014E, r25
    2b40:	80 93 4d 01 	sts	0x014D, r24
    2b44:	80 91 4d 01 	lds	r24, 0x014D
    2b48:	90 91 4e 01 	lds	r25, 0x014E
    2b4c:	21 e0       	ldi	r18, 0x01	; 1
    2b4e:	84 3f       	cpi	r24, 0xF4	; 244
    2b50:	92 07       	cpc	r25, r18
    2b52:	58 f2       	brcs	.-106    	; 0x2aea <ReadCapacity+0xc2>
     }
  }
  // wait 5ms and read voltage again, does the capacitor keep the voltage?
//  adcv[1] = W5msReadADC(HighPin) - adcv[0];
//  wdt_reset();
  if (adcv[2] < 301) {
    2b54:	51 e0       	ldi	r21, 0x01	; 1
    2b56:	cd 32       	cpi	r28, 0x2D	; 45
    2b58:	d5 07       	cpc	r29, r21
    2b5a:	08 f4       	brcc	.+2      	; 0x2b5e <ReadCapacity+0x136>
    2b5c:	22 c2       	rjmp	.+1092   	; 0x2fa2 <ReadCapacity+0x57a>
#if DebugOut == 10
  DisplayValue(ovcnt16,0,' ',4);
  DisplayValue(adcv[2],-3,'V',4);
#endif
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    2b5e:	80 91 4d 01 	lds	r24, 0x014D
    2b62:	90 91 4e 01 	lds	r25, 0x014E
    2b66:	00 97       	sbiw	r24, 0x00	; 0
    2b68:	29 f4       	brne	.+10     	; 0x2b74 <ReadCapacity+0x14c>
    2b6a:	85 e0       	ldi	r24, 0x05	; 5
    2b6c:	c5 31       	cpi	r28, 0x15	; 21
    2b6e:	d8 07       	cpc	r29, r24
    2b70:	08 f0       	brcs	.+2      	; 0x2b74 <ReadCapacity+0x14c>
    2b72:	8b c0       	rjmp	.+278    	; 0x2c8a <ReadCapacity+0x262>
     goto messe_mit_rh;		// Voltage of more than 1300mV is reached in one pulse, to fast loaded
  }
  // Capacity is more than about 50µF
  cap.cpre = -9;		// switch units to nF 
    2b74:	87 ef       	ldi	r24, 0xF7	; 247
    2b76:	80 93 74 01 	sts	0x0174, r24
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2b7a:	ce 01       	movw	r24, r28
    2b7c:	cc 24       	eor	r12, r12
    2b7e:	dd 24       	eor	r13, r13
    2b80:	09 c0       	rjmp	.+18     	; 0x2b94 <ReadCapacity+0x16c>
     wait5ms();
    2b82:	0e 94 6d 14 	call	0x28da	; 0x28da <wait5ms>
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
    2b86:	81 2f       	mov	r24, r17
    2b88:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
     wdt_reset();
    2b8c:	a8 95       	wdr
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2b8e:	08 94       	sec
    2b90:	c1 1c       	adc	r12, r1
    2b92:	d1 1c       	adc	r13, r1
    2b94:	20 91 4d 01 	lds	r18, 0x014D
    2b98:	30 91 4e 01 	lds	r19, 0x014E
    2b9c:	2c 15       	cp	r18, r12
    2b9e:	3d 05       	cpc	r19, r13
    2ba0:	80 f7       	brcc	.-32     	; 0x2b82 <ReadCapacity+0x15a>
     wait5ms();
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
    2ba2:	e8 16       	cp	r14, r24
    2ba4:	f9 06       	cpc	r15, r25
    2ba6:	30 f4       	brcc	.+12     	; 0x2bb4 <ReadCapacity+0x18c>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    2ba8:	8e 19       	sub	r24, r14
    2baa:	9f 09       	sbc	r25, r15
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    2bac:	8c 17       	cp	r24, r28
    2bae:	9d 07       	cpc	r25, r29
    2bb0:	e0 f4       	brcc	.+56     	; 0x2bea <ReadCapacity+0x1c2>
    2bb2:	02 c0       	rjmp	.+4      	; 0x2bb8 <ReadCapacity+0x190>
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
    2bb8:	7e 01       	movw	r14, r28
    2bba:	e8 1a       	sub	r14, r24
    2bbc:	f9 0a       	sbc	r15, r25
  } else {
     adcv[3] = 0;			// no lost voltage
  }
#if FLASHEND > 0x1fff
  // compute equivalent parallel resistance from voltage drop
  if (adcv[3] > 0) {
    2bbe:	b9 f0       	breq	.+46     	; 0x2bee <ReadCapacity+0x1c6>
     // there is any voltage drop (adcv[3]) !
     // adcv[2] is the loaded voltage.
     vloss = (unsigned long)(adcv[3] * 1000UL) / adcv[2];
  }
#endif
  if (adcv[3] > 100) {
    2bc0:	25 e6       	ldi	r18, 0x65	; 101
    2bc2:	e2 16       	cp	r14, r18
    2bc4:	f1 04       	cpc	r15, r1
    2bc6:	08 f0       	brcs	.+2      	; 0x2bca <ReadCapacity+0x1a2>
    2bc8:	ec c1       	rjmp	.+984    	; 0x2fa2 <ReadCapacity+0x57a>
#if FLASHEND > 0x1fff
  // compute equivalent parallel resistance from voltage drop
  if (adcv[3] > 0) {
     // there is any voltage drop (adcv[3]) !
     // adcv[2] is the loaded voltage.
     vloss = (unsigned long)(adcv[3] * 1000UL) / adcv[2];
    2bca:	b7 01       	movw	r22, r14
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	28 ee       	ldi	r18, 0xE8	; 232
    2bd2:	33 e0       	ldi	r19, 0x03	; 3
    2bd4:	40 e0       	ldi	r20, 0x00	; 0
    2bd6:	50 e0       	ldi	r21, 0x00	; 0
    2bd8:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
    2bdc:	9e 01       	movw	r18, r28
    2bde:	40 e0       	ldi	r20, 0x00	; 0
    2be0:	50 e0       	ldi	r21, 0x00	; 0
    2be2:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
    2be6:	69 01       	movw	r12, r18
    2be8:	04 c0       	rjmp	.+8      	; 0x2bf2 <ReadCapacity+0x1ca>
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    2bea:	ee 24       	eor	r14, r14
    2bec:	ff 24       	eor	r15, r15
  } else {
     adcv[3] = 0;			// no lost voltage
  }
#if FLASHEND > 0x1fff
  // compute equivalent parallel resistance from voltage drop
  if (adcv[3] > 0) {
    2bee:	cc 24       	eor	r12, r12
    2bf0:	dd 24       	eor	r13, r13
     lcd_space();
     wait_about1s();
 #endif
     goto keinC;			// capacitor does not keep the voltage about 5ms
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
    2bf2:	80 90 4d 01 	lds	r8, 0x014D
    2bf6:	90 90 4e 01 	lds	r9, 0x014E
    2bfa:	08 94       	sec
    2bfc:	81 1c       	adc	r8, r1
    2bfe:	91 1c       	adc	r9, r1
    2c00:	aa 24       	eor	r10, r10
    2c02:	bb 24       	eor	r11, r11
    2c04:	80 92 6a 01 	sts	0x016A, r8
    2c08:	90 92 6b 01 	sts	0x016B, r9
    2c0c:	a0 92 6c 01 	sts	0x016C, r10
    2c10:	b0 92 6d 01 	sts	0x016D, r11
  // compute factor with load voltage + lost voltage during the voltage load time
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]+adcv[3]);	// get factor to convert time to capacity from table
    2c14:	c7 01       	movw	r24, r14
    2c16:	8c 0f       	add	r24, r28
    2c18:	9d 1f       	adc	r25, r29
    2c1a:	0e 94 82 14 	call	0x2904	; 0x2904 <getRLmultip>
    2c1e:	bc 01       	movw	r22, r24
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	a5 01       	movw	r20, r10
    2c26:	94 01       	movw	r18, r8
    2c28:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
    2c2c:	60 93 6a 01 	sts	0x016A, r22
    2c30:	70 93 6b 01 	sts	0x016B, r23
    2c34:	80 93 6c 01 	sts	0x016C, r24
    2c38:	90 93 6d 01 	sts	0x016D, r25
#endif
   cap.cval = cap.cval_uncorrected.dw;	// set result to uncorrected
    2c3c:	60 93 62 01 	sts	0x0162, r22
    2c40:	70 93 63 01 	sts	0x0163, r23
    2c44:	80 93 64 01 	sts	0x0164, r24
    2c48:	90 93 65 01 	sts	0x0165, r25
   Scale_C_with_vcc();
    2c4c:	0e 94 c4 14 	call	0x2988	; 0x2988 <Scale_C_with_vcc>
   // cap.cval for this type is at least 40000nF, so the last digit will be never shown
   cap.cval *= (1000 - C_H_KORR);	// correct with C_H_KORR with 0.1% resolution, but prevent overflow
    2c50:	60 91 62 01 	lds	r22, 0x0162
    2c54:	70 91 63 01 	lds	r23, 0x0163
    2c58:	80 91 64 01 	lds	r24, 0x0164
    2c5c:	90 91 65 01 	lds	r25, 0x0165
    2c60:	28 ee       	ldi	r18, 0xE8	; 232
    2c62:	33 e0       	ldi	r19, 0x03	; 3
    2c64:	40 e0       	ldi	r20, 0x00	; 0
    2c66:	50 e0       	ldi	r21, 0x00	; 0
    2c68:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
   cap.cval /= 100;
    2c6c:	24 e6       	ldi	r18, 0x64	; 100
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	40 e0       	ldi	r20, 0x00	; 0
    2c72:	50 e0       	ldi	r21, 0x00	; 0
    2c74:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
    2c78:	20 93 62 01 	sts	0x0162, r18
    2c7c:	30 93 63 01 	sts	0x0163, r19
    2c80:	40 93 64 01 	sts	0x0164, r20
    2c84:	50 93 65 01 	sts	0x0165, r21
   DisplayValue(cap.cval,cap.cpre,'F',4);
   lcd_space();
   lcd_string(utoa(ovcnt16,outval,10));
   wait_about3s();
#endif
   goto checkDiodes;
    2c88:	4d c1       	rjmp	.+666    	; 0x2f24 <ReadCapacity+0x4fc>
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
  HiPinR_L = pgm_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load
    2c8a:	ec 2c       	mov	r14, r12
    2c8c:	ee 0c       	add	r14, r14

//==================================================================================
// Measurement of little capacity values
messe_mit_rh:
  //little capacity value, about  < 50 µF
  EntladePins();			// discharge capacitor
    2c8e:	0e 94 b0 01 	call	0x360	; 0x360 <EntladePins>
  //measure with the R_H (470kOhm) resistor 
  R_PORT = 0;		// R_DDR ist HiPinR_L
    2c92:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = (1<<TP1) | (1<<TP2) | (1<<TP3) | (1<<TxD);	//switch all Pins to output
    2c94:	8f e0       	ldi	r24, 0x0F	; 15
    2c96:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		//switch all ADC Pins to GND
    2c98:	88 e0       	ldi	r24, 0x08	; 8
    2c9a:	88 b9       	out	0x08, r24	; 8
  R_DDR = HiPinR_H;   		// switch R_H resistor port for HighPin to output (GND)
    2c9c:	e4 b8       	out	0x04, r14	; 4
// setup Analog Comparator
  ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    2c9e:	80 e4       	ldi	r24, 0x40	; 64
    2ca0:	80 93 7b 00 	sts	0x007B, r24
  ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    2ca4:	84 e5       	ldi	r24, 0x54	; 84
    2ca6:	80 bf       	out	0x30, r24	; 48
  ADMUX = (1<<REFS0) | HighPin;			// switch Mux to High-Pin
    2ca8:	81 2f       	mov	r24, r17
    2caa:	80 64       	ori	r24, 0x40	; 64
    2cac:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    2cb0:	86 e1       	ldi	r24, 0x16	; 22
    2cb2:	80 93 7a 00 	sts	0x007A, r24
  wait200us();			//wait for bandgap to start up
    2cb6:	0e 94 75 14 	call	0x28ea	; 0x28ea <wait200us>

// setup Counter1
  ovcnt16 = 0;
    2cba:	10 92 4e 01 	sts	0x014E, r1
    2cbe:	10 92 4d 01 	sts	0x014D, r1
  TCCR1A = 0;			// set Counter1 to normal Mode
    2cc2:	10 92 80 00 	sts	0x0080, r1
  TCNT1 = 0;			//set Counter to 0
    2cc6:	10 92 85 00 	sts	0x0085, r1
    2cca:	10 92 84 00 	sts	0x0084, r1
  TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// clear interrupt flags
    2cce:	87 e2       	ldi	r24, 0x27	; 39
    2cd0:	86 bb       	out	0x16, r24	; 22
#ifndef INHIBIT_SLEEP_MODE
  TIMSK1 = (1<<TOIE1) | (1<<ICIE1);	// enable Timer overflow interrupt and input capture interrupt
    2cd2:	81 e2       	ldi	r24, 0x21	; 33
    2cd4:	80 93 6f 00 	sts	0x006F, r24
  unfinished = 1;
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	80 93 61 01 	sts	0x0161, r24
#endif
  R_PORT = HiPinR_H;           	// switch R_H resistor port for HighPin to VCC
    2cde:	e5 b8       	out	0x05, r14	; 5
  if(PartFound == PART_FET) {
    2ce0:	90 91 07 01 	lds	r25, 0x0107
    2ce4:	93 30       	cpi	r25, 0x03	; 3
    2ce6:	71 f4       	brne	.+28     	; 0x2d04 <ReadCapacity+0x2dc>
     // charge capacitor with R_H resistor
     TCCR1B = (1<<CS10);	//Start counter 1MHz or 8MHz
    2ce8:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = (((1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK) & ~(1<<HighPin));	// release only HighPin ADC port
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	01 2e       	mov	r0, r17
    2cf2:	02 c0       	rjmp	.+4      	; 0x2cf8 <ReadCapacity+0x2d0>
    2cf4:	88 0f       	add	r24, r24
    2cf6:	99 1f       	adc	r25, r25
    2cf8:	0a 94       	dec	r0
    2cfa:	e2 f7       	brpl	.-8      	; 0x2cf4 <ReadCapacity+0x2cc>
    2cfc:	80 95       	com	r24
    2cfe:	8f 70       	andi	r24, 0x0F	; 15
    2d00:	87 b9       	out	0x07, r24	; 7
    2d02:	17 c0       	rjmp	.+46     	; 0x2d32 <ReadCapacity+0x30a>
  } else {
     TCCR1B =  (1<<CS10);	//start counter 1MHz or 8MHz
    2d04:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
    2d08:	87 b8       	out	0x07, r8	; 7
    2d0a:	13 c0       	rjmp	.+38     	; 0x2d32 <ReadCapacity+0x30a>
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
     ovcnt16++;
  }
#else
  while(unfinished) {
    set_sleep_mode(SLEEP_MODE_IDLE);
    2d0c:	83 b7       	in	r24, 0x33	; 51
    2d0e:	81 7f       	andi	r24, 0xF1	; 241
    2d10:	83 bf       	out	0x33, r24	; 51
    sleep_mode();       /* wait for interrupt */
    2d12:	83 b7       	in	r24, 0x33	; 51
    2d14:	81 60       	ori	r24, 0x01	; 1
    2d16:	83 bf       	out	0x33, r24	; 51
    2d18:	88 95       	sleep
    2d1a:	83 b7       	in	r24, 0x33	; 51
    2d1c:	8e 7f       	andi	r24, 0xFE	; 254
    2d1e:	83 bf       	out	0x33, r24	; 51
    wdt_reset();
    2d20:	a8 95       	wdr
    if(ovcnt16 == (F_CPU/5000)) {
    2d22:	80 91 4d 01 	lds	r24, 0x014D
    2d26:	90 91 4e 01 	lds	r25, 0x014E
    2d2a:	56 e0       	ldi	r21, 0x06	; 6
    2d2c:	80 34       	cpi	r24, 0x40	; 64
    2d2e:	95 07       	cpc	r25, r21
    2d30:	21 f0       	breq	.+8      	; 0x2d3a <ReadCapacity+0x312>
     // this OV was not counted, but was before the Input Capture
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
     ovcnt16++;
  }
#else
  while(unfinished) {
    2d32:	80 91 61 01 	lds	r24, 0x0161
    2d36:	88 23       	and	r24, r24
    2d38:	49 f7       	brne	.-46     	; 0x2d0c <ReadCapacity+0x2e4>
    wdt_reset();
    if(ovcnt16 == (F_CPU/5000)) {
       break; 		//Timeout for Charging, above 12 s
    }
  }
  TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    2d3a:	10 92 81 00 	sts	0x0081, r1
  tmpint = ICR1;		// get previous Input Capture Counter flag
    2d3e:	c0 91 86 00 	lds	r28, 0x0086
    2d42:	d0 91 87 00 	lds	r29, 0x0087
  TIMSK1 = (0<<TOIE1) | (0<<ICIE1);	// disable Timer overflow interrupt and input capture interrupt
    2d46:	10 92 6f 00 	sts	0x006F, r1
  if (TCNT1 < tmpint) {
    2d4a:	80 91 84 00 	lds	r24, 0x0084
    2d4e:	90 91 85 00 	lds	r25, 0x0085
    2d52:	8c 17       	cp	r24, r28
    2d54:	9d 07       	cpc	r25, r29
    2d56:	48 f4       	brcc	.+18     	; 0x2d6a <ReadCapacity+0x342>
     ovcnt16--;			// one ov to much
    2d58:	80 91 4d 01 	lds	r24, 0x014D
    2d5c:	90 91 4e 01 	lds	r25, 0x014E
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	90 93 4e 01 	sts	0x014E, r25
    2d66:	80 93 4d 01 	sts	0x014D, r24
  }

#endif
//############################################################
  ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    2d6a:	86 e9       	ldi	r24, 0x96	; 150
    2d6c:	80 93 7a 00 	sts	0x007A, r24
  R_DDR = 0;			// switch R_H resistor port for input
    2d70:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// switch R_H resistor port pull up for HighPin off
    2d72:	15 b8       	out	0x05, r1	; 5
  adcv[2] = ReadADC(HighPin);   // get loaded voltage
    2d74:	81 2f       	mov	r24, r17
    2d76:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
  load_diff = adcv[2] + REF_C_KORR - ref_mv;	// build difference of capacitor voltage to Reference Voltage
    2d7a:	20 91 44 01 	lds	r18, 0x0144
    2d7e:	30 91 45 01 	lds	r19, 0x0145
    2d82:	82 1b       	sub	r24, r18
    2d84:	93 0b       	sbc	r25, r19
    2d86:	0c 96       	adiw	r24, 0x0c	; 12
    2d88:	90 93 77 01 	sts	0x0177, r25
    2d8c:	80 93 76 01 	sts	0x0176, r24
//############################################################
  if (ovcnt16 >= (F_CPU/10000)) {
    2d90:	80 91 4d 01 	lds	r24, 0x014D
    2d94:	90 91 4e 01 	lds	r25, 0x014E
    2d98:	23 e0       	ldi	r18, 0x03	; 3
    2d9a:	80 32       	cpi	r24, 0x20	; 32
    2d9c:	92 07       	cpc	r25, r18
    2d9e:	08 f0       	brcs	.+2      	; 0x2da2 <ReadCapacity+0x37a>
    2da0:	00 c1       	rjmp	.+512    	; 0x2fa2 <ReadCapacity+0x57a>
     goto keinC;	// no normal end
  }
//  cap.cval_uncorrected = CombineII2Long(ovcnt16, tmpint);
  cap.cval_uncorrected.w[1] = ovcnt16;
    2da2:	80 91 4d 01 	lds	r24, 0x014D
    2da6:	90 91 4e 01 	lds	r25, 0x014E
    2daa:	90 93 6d 01 	sts	0x016D, r25
    2dae:	80 93 6c 01 	sts	0x016C, r24
  cap.cval_uncorrected.w[0] = tmpint;
    2db2:	d0 93 6b 01 	sts	0x016B, r29
    2db6:	c0 93 6a 01 	sts	0x016A, r28

  cap.cpre = -12;			// cap.cval unit is pF 
    2dba:	84 ef       	ldi	r24, 0xF4	; 244
    2dbc:	80 93 74 01 	sts	0x0174, r24
  if (ovcnt16 > 65) {
    2dc0:	80 91 4d 01 	lds	r24, 0x014D
    2dc4:	90 91 4e 01 	lds	r25, 0x014E
    2dc8:	82 34       	cpi	r24, 0x42	; 66
    2dca:	91 05       	cpc	r25, r1
    2dcc:	c8 f0       	brcs	.+50     	; 0x2e00 <ReadCapacity+0x3d8>
     cap.cval_uncorrected.dw /= 100;	// switch to next unit
    2dce:	60 91 6a 01 	lds	r22, 0x016A
    2dd2:	70 91 6b 01 	lds	r23, 0x016B
    2dd6:	80 91 6c 01 	lds	r24, 0x016C
    2dda:	90 91 6d 01 	lds	r25, 0x016D
    2dde:	24 e6       	ldi	r18, 0x64	; 100
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	40 e0       	ldi	r20, 0x00	; 0
    2de4:	50 e0       	ldi	r21, 0x00	; 0
    2de6:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
    2dea:	20 93 6a 01 	sts	0x016A, r18
    2dee:	30 93 6b 01 	sts	0x016B, r19
    2df2:	40 93 6c 01 	sts	0x016C, r20
    2df6:	50 93 6d 01 	sts	0x016D, r21
     cap.cpre += 2;			// set unit, prevent overflow
    2dfa:	86 ef       	ldi	r24, 0xF6	; 246
    2dfc:	80 93 74 01 	sts	0x0174, r24
  }
  cap.cval_uncorrected.dw *= RHmultip;		// 708
    2e00:	60 91 00 01 	lds	r22, 0x0100
    2e04:	70 91 01 01 	lds	r23, 0x0101
    2e08:	80 e0       	ldi	r24, 0x00	; 0
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	20 91 6a 01 	lds	r18, 0x016A
    2e10:	30 91 6b 01 	lds	r19, 0x016B
    2e14:	40 91 6c 01 	lds	r20, 0x016C
    2e18:	50 91 6d 01 	lds	r21, 0x016D
    2e1c:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
  cap.cval_uncorrected.dw /= (F_CPU / 10000);	// divide by 100 (@ 1MHz clock), 800 (@ 8MHz clock)
    2e20:	20 e2       	ldi	r18, 0x20	; 32
    2e22:	33 e0       	ldi	r19, 0x03	; 3
    2e24:	40 e0       	ldi	r20, 0x00	; 0
    2e26:	50 e0       	ldi	r21, 0x00	; 0
    2e28:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
    2e2c:	20 93 6a 01 	sts	0x016A, r18
    2e30:	30 93 6b 01 	sts	0x016B, r19
    2e34:	40 93 6c 01 	sts	0x016C, r20
    2e38:	50 93 6d 01 	sts	0x016D, r21
  cap.cval = cap.cval_uncorrected.dw;		// set the corrected cap.cval
    2e3c:	e2 e6       	ldi	r30, 0x62	; 98
    2e3e:	f1 e0       	ldi	r31, 0x01	; 1
    2e40:	20 93 62 01 	sts	0x0162, r18
    2e44:	31 83       	std	Z+1, r19	; 0x01
    2e46:	42 83       	std	Z+2, r20	; 0x02
    2e48:	53 83       	std	Z+3, r21	; 0x03
  Scale_C_with_vcc();
    2e4a:	0e 94 c4 14 	call	0x2988	; 0x2988 <Scale_C_with_vcc>
  if (cap.cpre == -12) {
    2e4e:	80 91 74 01 	lds	r24, 0x0174
    2e52:	84 3f       	cpi	r24, 0xF4	; 244
    2e54:	09 f0       	breq	.+2      	; 0x2e58 <ReadCapacity+0x430>
    2e56:	55 c0       	rjmp	.+170    	; 0x2f02 <ReadCapacity+0x4da>
#if COMP_SLEW1 > COMP_SLEW2
     if (cap.cval < COMP_SLEW1) {
    2e58:	80 90 62 01 	lds	r8, 0x0162
    2e5c:	90 90 63 01 	lds	r9, 0x0163
    2e60:	a0 90 64 01 	lds	r10, 0x0164
    2e64:	b0 90 65 01 	lds	r11, 0x0165
    2e68:	50 ea       	ldi	r21, 0xA0	; 160
    2e6a:	85 16       	cp	r8, r21
    2e6c:	5f e0       	ldi	r21, 0x0F	; 15
    2e6e:	95 06       	cpc	r9, r21
    2e70:	50 e0       	ldi	r21, 0x00	; 0
    2e72:	a5 06       	cpc	r10, r21
    2e74:	50 e0       	ldi	r21, 0x00	; 0
    2e76:	b5 06       	cpc	r11, r21
    2e78:	c0 f4       	brcc	.+48     	; 0x2eaa <ReadCapacity+0x482>
        // add slew rate dependent offset
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
    2e7a:	a5 01       	movw	r20, r10
    2e7c:	94 01       	movw	r18, r8
    2e7e:	24 52       	subi	r18, 0x24	; 36
    2e80:	3f 4f       	sbci	r19, 0xFF	; 255
    2e82:	4f 4f       	sbci	r20, 0xFF	; 255
    2e84:	5f 4f       	sbci	r21, 0xFF	; 255
    2e86:	60 ea       	ldi	r22, 0xA0	; 160
    2e88:	7f e0       	ldi	r23, 0x0F	; 15
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
    2e92:	28 0d       	add	r18, r8
    2e94:	39 1d       	adc	r19, r9
    2e96:	4a 1d       	adc	r20, r10
    2e98:	5b 1d       	adc	r21, r11
    2e9a:	20 93 62 01 	sts	0x0162, r18
    2e9e:	30 93 63 01 	sts	0x0163, r19
    2ea2:	40 93 64 01 	sts	0x0164, r20
    2ea6:	50 93 65 01 	sts	0x0165, r21
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2eaa:	80 91 4c 01 	lds	r24, 0x014C
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	85 53       	subi	r24, 0x35	; 53
    2eb2:	9e 4f       	sbci	r25, 0xFE	; 254
    2eb4:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__eerd_byte_m168>
     if (cap.cval > tmpint) {
    2eb8:	20 91 62 01 	lds	r18, 0x0162
    2ebc:	30 91 63 01 	lds	r19, 0x0163
    2ec0:	40 91 64 01 	lds	r20, 0x0164
    2ec4:	50 91 65 01 	lds	r21, 0x0165
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
     if (cap.cval > tmpint) {
    2eca:	a0 e0       	ldi	r26, 0x00	; 0
    2ecc:	b0 e0       	ldi	r27, 0x00	; 0
    2ece:	82 17       	cp	r24, r18
    2ed0:	93 07       	cpc	r25, r19
    2ed2:	a4 07       	cpc	r26, r20
    2ed4:	b5 07       	cpc	r27, r21
    2ed6:	68 f4       	brcc	.+26     	; 0x2ef2 <ReadCapacity+0x4ca>
         cap.cval -= tmpint;		//subtract zero offset (pF)
    2ed8:	28 1b       	sub	r18, r24
    2eda:	39 0b       	sbc	r19, r25
    2edc:	4a 0b       	sbc	r20, r26
    2ede:	5b 0b       	sbc	r21, r27
    2ee0:	20 93 62 01 	sts	0x0162, r18
    2ee4:	30 93 63 01 	sts	0x0163, r19
    2ee8:	40 93 64 01 	sts	0x0164, r20
    2eec:	50 93 65 01 	sts	0x0165, r21
    2ef0:	08 c0       	rjmp	.+16     	; 0x2f02 <ReadCapacity+0x4da>
     } else {
         cap.cval = 0;			//unsigned long may not reach negativ value
    2ef2:	10 92 62 01 	sts	0x0162, r1
    2ef6:	10 92 63 01 	sts	0x0163, r1
    2efa:	10 92 64 01 	sts	0x0164, r1
    2efe:	10 92 65 01 	sts	0x0165, r1
  lcd_testpin(HighPin);
  lcd_space();
  DisplayValue(cap.cval,cap.cpre,'F',4);
  wait_about3s();
#endif
  R_DDR = HiPinR_L; 		//switch R_L for High-Pin to GND
    2f02:	c4 b8       	out	0x04, r12	; 4
#if F_CPU < 2000001
   if(cap.cval < 50)
#else 
   if(cap.cval < 25)
    2f04:	80 91 62 01 	lds	r24, 0x0162
    2f08:	90 91 63 01 	lds	r25, 0x0163
    2f0c:	a0 91 64 01 	lds	r26, 0x0164
    2f10:	b0 91 65 01 	lds	r27, 0x0165
    2f14:	89 31       	cpi	r24, 0x19	; 25
    2f16:	91 05       	cpc	r25, r1
    2f18:	a1 05       	cpc	r26, r1
    2f1a:	b1 05       	cpc	r27, r1
    2f1c:	08 f4       	brcc	.+2      	; 0x2f20 <ReadCapacity+0x4f8>
    2f1e:	41 c0       	rjmp	.+130    	; 0x2fa2 <ReadCapacity+0x57a>
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
  vloss = 0;				// set lost voltage to zero
    2f20:	cc 24       	eor	r12, r12
    2f22:	dd 24       	eor	r13, r13
#endif
      goto keinC;	//capacity to low, < 70pF @1MHz (35pF @8MHz)
   }
   // end low capacity 
checkDiodes:
   if((NumOfDiodes > 0)  && (PartFound != PART_FET)) {
    2f24:	80 91 05 01 	lds	r24, 0x0105
    2f28:	88 23       	and	r24, r24
    2f2a:	21 f0       	breq	.+8      	; 0x2f34 <ReadCapacity+0x50c>
    2f2c:	80 91 07 01 	lds	r24, 0x0107
    2f30:	83 30       	cpi	r24, 0x03	; 3
    2f32:	b9 f5       	brne	.+110    	; 0x2fa2 <ReadCapacity+0x57a>
      wait_about1s();
#endif
      // nearly shure, that there is one or more diodes in reverse direction,
      // which would be wrongly detected as capacitor 
   } else {
      PartFound = PART_CAPACITOR;	//capacitor is found
    2f34:	87 e0       	ldi	r24, 0x07	; 7
    2f36:	80 93 07 01 	sts	0x0107, r24
      if ((cap.cpre > cap.cpre_max) || ((cap.cpre == cap.cpre_max) && (cap.cval > cap.cval_max))) {
    2f3a:	60 91 74 01 	lds	r22, 0x0174
    2f3e:	80 91 75 01 	lds	r24, 0x0175
    2f42:	86 17       	cp	r24, r22
    2f44:	bc f0       	brlt	.+46     	; 0x2f74 <ReadCapacity+0x54c>
    2f46:	68 17       	cp	r22, r24
    2f48:	61 f5       	brne	.+88     	; 0x2fa2 <ReadCapacity+0x57a>
    2f4a:	20 91 62 01 	lds	r18, 0x0162
    2f4e:	30 91 63 01 	lds	r19, 0x0163
    2f52:	40 91 64 01 	lds	r20, 0x0164
    2f56:	50 91 65 01 	lds	r21, 0x0165
    2f5a:	80 91 66 01 	lds	r24, 0x0166
    2f5e:	90 91 67 01 	lds	r25, 0x0167
    2f62:	a0 91 68 01 	lds	r26, 0x0168
    2f66:	b0 91 69 01 	lds	r27, 0x0169
    2f6a:	82 17       	cp	r24, r18
    2f6c:	93 07       	cpc	r25, r19
    2f6e:	a4 07       	cpc	r26, r20
    2f70:	b5 07       	cpc	r27, r21
    2f72:	b8 f4       	brcc	.+46     	; 0x2fa2 <ReadCapacity+0x57a>
         // we have found a greater one
         cap.cval_max = cap.cval;
    2f74:	e2 e6       	ldi	r30, 0x62	; 98
    2f76:	f1 e0       	ldi	r31, 0x01	; 1
    2f78:	80 91 62 01 	lds	r24, 0x0162
    2f7c:	90 91 63 01 	lds	r25, 0x0163
    2f80:	a0 91 64 01 	lds	r26, 0x0164
    2f84:	b0 91 65 01 	lds	r27, 0x0165
    2f88:	80 93 66 01 	sts	0x0166, r24
    2f8c:	90 93 67 01 	sts	0x0167, r25
    2f90:	a0 93 68 01 	sts	0x0168, r26
    2f94:	b0 93 69 01 	sts	0x0169, r27
         cap.cpre_max = cap.cpre;
    2f98:	63 8b       	std	Z+19, r22	; 0x13
#if FLASHEND > 0x1fff
         cap.v_loss = vloss;		// lost voltage in 0.01%
    2f9a:	d7 86       	std	Z+15, r13	; 0x0f
    2f9c:	c6 86       	std	Z+14, r12	; 0x0e
#endif
         cap.ca = LowPin;		// save LowPin
    2f9e:	00 8b       	std	Z+16, r16	; 0x10
         cap.cb = HighPin;		// save HighPin
    2fa0:	11 8b       	std	Z+17, r17	; 0x11
keinC:
  // discharge capacitor again
//  EntladePins();		// discharge capacitors
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    2fa2:	88 e0       	ldi	r24, 0x08	; 8
    2fa4:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    2fa6:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    2fa8:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    2faa:	15 b8       	out	0x05, r1	; 5
  return;
 } // end ReadCapacity()
    2fac:	df 91       	pop	r29
    2fae:	cf 91       	pop	r28
    2fb0:	1f 91       	pop	r17
    2fb2:	0f 91       	pop	r16
    2fb4:	ff 90       	pop	r15
    2fb6:	ef 90       	pop	r14
    2fb8:	df 90       	pop	r13
    2fba:	cf 90       	pop	r12
    2fbc:	bf 90       	pop	r11
    2fbe:	af 90       	pop	r10
    2fc0:	9f 90       	pop	r9
    2fc2:	8f 90       	pop	r8
    2fc4:	08 95       	ret

00002fc6 <__vector_13>:
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
}
#ifndef INHIBIT_SLEEP_MODE

 ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    2fc6:	1f 92       	push	r1
    2fc8:	0f 92       	push	r0
    2fca:	0f b6       	in	r0, 0x3f	; 63
    2fcc:	0f 92       	push	r0
    2fce:	11 24       	eor	r1, r1
    2fd0:	8f 93       	push	r24
    2fd2:	9f 93       	push	r25
 ovcnt16++;				// count overflow
    2fd4:	80 91 4d 01 	lds	r24, 0x014D
    2fd8:	90 91 4e 01 	lds	r25, 0x014E
    2fdc:	01 96       	adiw	r24, 0x01	; 1
    2fde:	90 93 4e 01 	sts	0x014E, r25
    2fe2:	80 93 4d 01 	sts	0x014D, r24
}
    2fe6:	9f 91       	pop	r25
    2fe8:	8f 91       	pop	r24
    2fea:	0f 90       	pop	r0
    2fec:	0f be       	out	0x3f, r0	; 63
    2fee:	0f 90       	pop	r0
    2ff0:	1f 90       	pop	r1
    2ff2:	18 95       	reti

00002ff4 <__vector_10>:
 ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    2ff4:	1f 92       	push	r1
    2ff6:	0f 92       	push	r0
    2ff8:	0f b6       	in	r0, 0x3f	; 63
    2ffa:	0f 92       	push	r0
    2ffc:	11 24       	eor	r1, r1
 unfinished = 0;			// clear unfinished flag
    2ffe:	10 92 61 01 	sts	0x0161, r1
}
    3002:	0f 90       	pop	r0
    3004:	0f be       	out	0x3f, r0	; 63
    3006:	0f 90       	pop	r0
    3008:	1f 90       	pop	r1
    300a:	18 95       	reti

0000300c <get_log>:
 } // end ReadInductance()


#if FLASHEND > 0x1fff
// get_log interpolate a table with the function -log(1 - (permil/1000))
uint16_t get_log(uint16_t permil) {
    300c:	cf 93       	push	r28
    300e:	df 93       	push	r29
  uint16_t y1, y2;			// table values
  uint16_t result;			// result of interpolation
  uint8_t tabind;			// index to table value
  uint8_t tabres;			// distance to lower table value, fraction of Log_Tab_Distance

  tabind = permil / Log_Tab_Distance;	// index to table
    3010:	24 e1       	ldi	r18, 0x14	; 20
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	b9 01       	movw	r22, r18
    3016:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <__udivmodhi4>
    301a:	dc 01       	movw	r26, r24
  tabres = permil % Log_Tab_Distance;	// fraction of table distance
  // interpolate the table of factors
  y1 = pgm_read_word(&LogTab[tabind]);	// get the lower table value
    301c:	70 e0       	ldi	r23, 0x00	; 0
    301e:	fb 01       	movw	r30, r22
    3020:	ee 0f       	add	r30, r30
    3022:	ff 1f       	adc	r31, r31
    3024:	e8 59       	subi	r30, 0x98	; 152
    3026:	ff 4f       	sbci	r31, 0xFF	; 255
    3028:	c5 91       	lpm	r28, Z+
    302a:	d4 91       	lpm	r29, Z+
  y2 = pgm_read_word(&LogTab[tabind+1]); // get the higher table value
    302c:	fb 01       	movw	r30, r22
    302e:	ee 0f       	add	r30, r30
    3030:	ff 1f       	adc	r31, r31
    3032:	e6 59       	subi	r30, 0x96	; 150
    3034:	ff 4f       	sbci	r31, 0xFF	; 255
    3036:	45 91       	lpm	r20, Z+
    3038:	54 91       	lpm	r21, Z+
  result = ((y2 - y1) * tabres ) / Log_Tab_Distance + y1; // interpolate
    303a:	4c 1b       	sub	r20, r28
    303c:	5d 0b       	sbc	r21, r29
    303e:	4a 9f       	mul	r20, r26
    3040:	c0 01       	movw	r24, r0
    3042:	4b 9f       	mul	r20, r27
    3044:	90 0d       	add	r25, r0
    3046:	5a 9f       	mul	r21, r26
    3048:	90 0d       	add	r25, r0
    304a:	11 24       	eor	r1, r1
    304c:	b9 01       	movw	r22, r18
    304e:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <__udivmodhi4>
    3052:	6c 0f       	add	r22, r28
    3054:	7d 1f       	adc	r23, r29
  return(result);
 }
    3056:	cb 01       	movw	r24, r22
    3058:	df 91       	pop	r29
    305a:	cf 91       	pop	r28
    305c:	08 95       	ret

0000305e <ReadInductance>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadInductance(void) {
    305e:	2f 92       	push	r2
    3060:	3f 92       	push	r3
    3062:	4f 92       	push	r4
    3064:	5f 92       	push	r5
    3066:	6f 92       	push	r6
    3068:	7f 92       	push	r7
    306a:	8f 92       	push	r8
    306c:	9f 92       	push	r9
    306e:	af 92       	push	r10
    3070:	bf 92       	push	r11
    3072:	cf 92       	push	r12
    3074:	df 92       	push	r13
    3076:	ef 92       	push	r14
    3078:	ff 92       	push	r15
    307a:	0f 93       	push	r16
    307c:	1f 93       	push	r17
    307e:	df 93       	push	r29
    3080:	cf 93       	push	r28
    3082:	cd b7       	in	r28, 0x3d	; 61
    3084:	de b7       	in	r29, 0x3e	; 62
    3086:	68 97       	sbiw	r28, 0x18	; 24
    3088:	0f b6       	in	r0, 0x3f	; 63
    308a:	f8 94       	cli
    308c:	de bf       	out	0x3e, r29	; 62
    308e:	0f be       	out	0x3f, r0	; 63
    3090:	cd bf       	out	0x3d, r28	; 61
  int8_t ukorr;		// correction of comparator voltage
  uint8_t nr_pol1;	// number of successfull inductance measurement with polarity 1
  uint8_t nr_pol2;	// number of successfull inductance measurement with polarity 2


  if(PartFound != PART_RESISTOR) {
    3092:	80 91 07 01 	lds	r24, 0x0107
    3096:	86 30       	cpi	r24, 0x06	; 6
    3098:	09 f0       	breq	.+2      	; 0x309c <ReadInductance+0x3e>
    309a:	4b c2       	rjmp	.+1174   	; 0x3532 <ReadInductance+0x4d4>
     return;	//We have found no resistor  
  }
  if (ResistorsFound != 1) {
    309c:	80 91 5e 01 	lds	r24, 0x015E
    30a0:	81 30       	cpi	r24, 0x01	; 1
    30a2:	09 f0       	breq	.+2      	; 0x30a6 <ReadInductance+0x48>
    30a4:	46 c2       	rjmp	.+1164   	; 0x3532 <ReadInductance+0x4d4>
     return;	// do not search for inductance, more than 1 resistor
  }
//  for (found=0;found<ResistorsFound;found++) {
//     if (resis[found].rx > 21000) continue;
     if (resis[found].rx > 21000) return;
    30a6:	80 91 18 01 	lds	r24, 0x0118
    30aa:	90 91 19 01 	lds	r25, 0x0119
    30ae:	a0 91 1a 01 	lds	r26, 0x011A
    30b2:	b0 91 1b 01 	lds	r27, 0x011B
    30b6:	89 30       	cpi	r24, 0x09	; 9
    30b8:	22 e5       	ldi	r18, 0x52	; 82
    30ba:	92 07       	cpc	r25, r18
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	a2 07       	cpc	r26, r18
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	b2 07       	cpc	r27, r18
    30c4:	08 f0       	brcs	.+2      	; 0x30c8 <ReadInductance+0x6a>
    30c6:	35 c2       	rjmp	.+1130   	; 0x3532 <ReadInductance+0x4d4>
    30c8:	99 24       	eor	r9, r9
    30ca:	80 91 21 01 	lds	r24, 0x0121
    30ce:	40 90 22 01 	lds	r4, 0x0122

     // we can check for Inductance, if resistance is below 2100 Ohm
     for (count=0;count<4;count++) {
        // Try four times (different direction and with delayed counter start)
        if (count < 2) {
    30d2:	99 2d       	mov	r25, r9
    30d4:	92 30       	cpi	r25, 0x02	; 2
    30d6:	10 f4       	brcc	.+4      	; 0x30dc <ReadInductance+0x7e>
           // first and second pass, direction 1
           LowPin = resis[found].ra;
    30d8:	88 2e       	mov	r8, r24
    30da:	02 c0       	rjmp	.+4      	; 0x30e0 <ReadInductance+0x82>
           HighPin = resis[found].rb;
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    30dc:	84 2c       	mov	r8, r4
           HighPin = resis[found].ra;
    30de:	48 2e       	mov	r4, r24
        }
        HiADC = pgm_read_byte(&PinADCtab[HighPin]);
    30e0:	e4 2d       	mov	r30, r4
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	e3 5f       	subi	r30, 0xF3	; 243
    30e6:	fe 4f       	sbci	r31, 0xFE	; 254
    30e8:	24 91       	lpm	r18, Z+
        LoPinR_L = pgm_read_byte(&PinRLtab[LowPin]);	//R_L mask for HighPin R_L load
    30ea:	e8 2d       	mov	r30, r8
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	e6 5f       	subi	r30, 0xF6	; 246
    30f0:	fe 4f       	sbci	r31, 0xFE	; 254
    30f2:	e4 91       	lpm	r30, Z+
        //==================================================================================
        // Measurement of Inductance values
        R_PORT = 0;		// switch R port to GND
    30f4:	15 b8       	out	0x05, r1	; 5
        ADC_PORT =   TXD_VAL;		// switch ADC-Port to GND
    30f6:	a8 e0       	ldi	r26, 0x08	; 8
    30f8:	a8 b9       	out	0x08, r26	; 8
        if ((resis[found].rx < 240) && ((count & 0x01) == 0)) {
    30fa:	80 91 18 01 	lds	r24, 0x0118
    30fe:	90 91 19 01 	lds	r25, 0x0119
    3102:	a0 91 1a 01 	lds	r26, 0x011A
    3106:	b0 91 1b 01 	lds	r27, 0x011B
    310a:	80 3f       	cpi	r24, 0xF0	; 240
    310c:	91 05       	cpc	r25, r1
    310e:	a1 05       	cpc	r26, r1
    3110:	b1 05       	cpc	r27, r1
    3112:	b8 f4       	brcc	.+46     	; 0x3142 <ReadInductance+0xe4>
    3114:	90 fc       	sbrc	r9, 0
    3116:	15 c0       	rjmp	.+42     	; 0x3142 <ReadInductance+0xe4>
           // we can use PinR_L for measurement
           mess_r = RR680MI - R_L_VAL;			// use only pin output resistance
    3118:	a0 90 02 01 	lds	r10, 0x0102
    311c:	b0 90 03 01 	lds	r11, 0x0103
    3120:	80 e7       	ldi	r24, 0x70	; 112
    3122:	95 ee       	ldi	r25, 0xE5	; 229
    3124:	a8 0e       	add	r10, r24
    3126:	b9 1e       	adc	r11, r25
           ADC_DDR = HiADC | (1<<LowPin) | TXD_MSK;	// switch HiADC and Low Pin to GND, 
    3128:	32 2f       	mov	r19, r18
    312a:	38 60       	ori	r19, 0x08	; 8
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	08 2c       	mov	r0, r8
    3132:	02 c0       	rjmp	.+4      	; 0x3138 <ReadInductance+0xda>
    3134:	88 0f       	add	r24, r24
    3136:	99 1f       	adc	r25, r25
    3138:	0a 94       	dec	r0
    313a:	e2 f7       	brpl	.-8      	; 0x3134 <ReadInductance+0xd6>
    313c:	38 2b       	or	r19, r24
    313e:	37 b9       	out	0x07, r19	; 7
    3140:	08 c0       	rjmp	.+16     	; 0x3152 <ReadInductance+0xf4>
        } else {
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
    3142:	e4 b9       	out	0x04, r30	; 4
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
    3144:	82 2f       	mov	r24, r18
    3146:	88 60       	ori	r24, 0x08	; 8
    3148:	87 b9       	out	0x07, r24	; 7
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
    314a:	a0 90 02 01 	lds	r10, 0x0102
    314e:	b0 90 03 01 	lds	r11, 0x0103
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    3152:	30 e0       	ldi	r19, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    3154:	88 2d       	mov	r24, r8
    3156:	28 8f       	std	Y+24, r18	; 0x18
    3158:	3f 8b       	std	Y+23, r19	; 0x17
    315a:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W10msReadADC>
    315e:	6c 01       	movw	r12, r24
            total_r =  ReadADC(HighPin);
    3160:	84 2d       	mov	r24, r4
    3162:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
    3166:	ac 01       	movw	r20, r24
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    3168:	28 8d       	ldd	r18, Y+24	; 0x18
    316a:	3f 89       	ldd	r19, Y+23	; 0x17
    316c:	92 e0       	ldi	r25, 0x02	; 2
    316e:	c9 16       	cp	r12, r25
    3170:	d1 04       	cpc	r13, r1
    3172:	18 f4       	brcc	.+6      	; 0x317a <ReadInductance+0x11c>
    3174:	42 30       	cpi	r20, 0x02	; 2
    3176:	51 05       	cpc	r21, r1
    3178:	18 f0       	brcs	.+6      	; 0x3180 <ReadInductance+0x122>
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    317a:	3f 5f       	subi	r19, 0xFF	; 255
    317c:	34 31       	cpi	r19, 0x14	; 20
    317e:	51 f7       	brne	.-44     	; 0x3154 <ReadInductance+0xf6>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
        // setup Analog Comparator
        ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    3180:	a0 e4       	ldi	r26, 0x40	; 64
    3182:	a0 93 7b 00 	sts	0x007B, r26
        ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    3186:	b4 e5       	ldi	r27, 0x54	; 84
    3188:	b0 bf       	out	0x30, r27	; 48
        ADMUX = (1<<REFS0) | LowPin;			// switch Mux to Low-Pin
    318a:	88 2d       	mov	r24, r8
    318c:	80 64       	ori	r24, 0x40	; 64
    318e:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    3192:	86 e1       	ldi	r24, 0x16	; 22
    3194:	80 93 7a 00 	sts	0x007A, r24
   
      // setup Counter1
        timeconstant.w[1] = 0;		// set ov counter to 0
    3198:	00 e0       	ldi	r16, 0x00	; 0
    319a:	10 e0       	ldi	r17, 0x00	; 0
        TCCR1A = 0;			// set Counter1 to normal Mode
    319c:	10 92 80 00 	sts	0x0080, r1
        TCNT1 = 0;			//set Counter to 0
    31a0:	10 92 85 00 	sts	0x0085, r1
    31a4:	10 92 84 00 	sts	0x0084, r1
        TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// reset TIFR or TIFR1
    31a8:	97 e2       	ldi	r25, 0x27	; 39
    31aa:	96 bb       	out	0x16, r25	; 22
        HiADC |= TXD_VAL;
    31ac:	28 60       	ori	r18, 0x08	; 8
        wait200us();			// wait for bandgap to start up
    31ae:	28 8f       	std	Y+24, r18	; 0x18
    31b0:	0e 94 75 14 	call	0x28ea	; 0x28ea <wait200us>
        if ((count & 0x01) == 0 ) {
    31b4:	29 2c       	mov	r2, r9
    31b6:	33 24       	eor	r3, r3
    31b8:	d1 01       	movw	r26, r2
    31ba:	a1 70       	andi	r26, 0x01	; 1
    31bc:	b0 70       	andi	r27, 0x00	; 0
    31be:	ba 8b       	std	Y+18, r27	; 0x12
    31c0:	a9 8b       	std	Y+17, r26	; 0x11
    31c2:	28 8d       	ldd	r18, Y+24	; 0x18
    31c4:	90 fc       	sbrc	r9, 0
    31c6:	05 c0       	rjmp	.+10     	; 0x31d2 <ReadInductance+0x174>
           //first start counter, then start current
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    31c8:	b1 e8       	ldi	r27, 0x81	; 129
    31ca:	b0 93 81 00 	sts	0x0081, r27
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    31ce:	28 b9       	out	0x08, r18	; 8
    31d0:	08 c0       	rjmp	.+16     	; 0x31e2 <ReadInductance+0x184>
        } else {
           //first start current, then start counter with delay
           //parasitic capacity of coil can cause high current at the beginning
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    31d2:	28 b9       	out	0x08, r18	; 8
      #if F_CPU >= 8000000UL
           wait3us();		// ignore current peak from capacity
    31d4:	0e 94 7e 14 	call	0x28fc	; 0x28fc <wait3us>
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
    31d8:	20 e2       	ldi	r18, 0x20	; 32
    31da:	26 bb       	out	0x16, r18	; 22
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    31dc:	81 e8       	ldi	r24, 0x81	; 129
    31de:	80 93 81 00 	sts	0x0081, r24
    31e2:	c8 01       	movw	r24, r16
        }
      
      //******************************
        while(1) {
           // Wait, until  Input Capture is set
           ii = TI1_INT_FLAGS;		//read Timer flags
    31e4:	46 b3       	in	r20, 0x16	; 22
           if (ii & (1<<ICF1))  {
    31e6:	45 ff       	sbrs	r20, 5
    31e8:	02 c0       	rjmp	.+4      	; 0x31ee <ReadInductance+0x190>
    31ea:	8c 01       	movw	r16, r24
    31ec:	0b c0       	rjmp	.+22     	; 0x3204 <ReadInductance+0x1a6>
              break;
           }
           if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    31ee:	40 ff       	sbrs	r20, 0
    31f0:	f9 cf       	rjmp	.-14     	; 0x31e4 <ReadInductance+0x186>
              TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    31f2:	a1 e0       	ldi	r26, 0x01	; 1
    31f4:	a6 bb       	out	0x16, r26	; 22
              wdt_reset();
    31f6:	a8 95       	wdr
    31f8:	01 96       	adiw	r24, 0x01	; 1
              timeconstant.w[1]++;		// count one OV
              if(timeconstant.w[1] == (F_CPU/100000UL)) {
    31fa:	80 35       	cpi	r24, 0x50	; 80
    31fc:	91 05       	cpc	r25, r1
    31fe:	91 f7       	brne	.-28     	; 0x31e4 <ReadInductance+0x186>
    3200:	00 e5       	ldi	r16, 0x50	; 80
    3202:	10 e0       	ldi	r17, 0x00	; 0
                 break; 	//Timeout for Charging, above 0.13 s
              }
           }
        }
        TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    3204:	10 92 81 00 	sts	0x0081, r1
        TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    3208:	b0 e2       	ldi	r27, 0x20	; 32
    320a:	b6 bb       	out	0x16, r27	; 22
        timeconstant.w[0] = ICR1;		// get previous Input Capture Counter flag
    320c:	20 91 86 00 	lds	r18, 0x0086
    3210:	30 91 87 00 	lds	r19, 0x0087
    3214:	79 01       	movw	r14, r18
      // check actual counter, if an additional overflow must be added
        if((TCNT1 > timeconstant.w[0]) && (ii & (1<<TOV1))) {
    3216:	80 91 84 00 	lds	r24, 0x0084
    321a:	90 91 85 00 	lds	r25, 0x0085
    321e:	28 17       	cp	r18, r24
    3220:	39 07       	cpc	r19, r25
    3222:	30 f4       	brcc	.+12     	; 0x3230 <ReadInductance+0x1d2>
    3224:	40 ff       	sbrs	r20, 0
    3226:	04 c0       	rjmp	.+8      	; 0x3230 <ReadInductance+0x1d2>
           // this OV was not counted, but was before the Input Capture
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    3228:	21 e0       	ldi	r18, 0x01	; 1
    322a:	26 bb       	out	0x16, r18	; 22
           timeconstant.w[1]++;			// count one additional OV
    322c:	0f 5f       	subi	r16, 0xFF	; 255
    322e:	1f 4f       	sbci	r17, 0xFF	; 255
        }

        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    3230:	88 e0       	ldi	r24, 0x08	; 8
    3232:	88 b9       	out	0x08, r24	; 8
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    3234:	96 e9       	ldi	r25, 0x96	; 150
    3236:	90 93 7a 00 	sts	0x007A, r25
        for (ii=0;ii<20;ii++) {
    323a:	20 e0       	ldi	r18, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    323c:	88 2d       	mov	r24, r8
    323e:	28 8f       	std	Y+24, r18	; 0x18
    3240:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W10msReadADC>
    3244:	6c 01       	movw	r12, r24
            total_r =  ReadADC(HighPin);
    3246:	84 2d       	mov	r24, r4
    3248:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    324c:	28 8d       	ldd	r18, Y+24	; 0x18
    324e:	a2 e0       	ldi	r26, 0x02	; 2
    3250:	ca 16       	cp	r12, r26
    3252:	d1 04       	cpc	r13, r1
    3254:	18 f4       	brcc	.+6      	; 0x325c <ReadInductance+0x1fe>
    3256:	82 30       	cpi	r24, 0x02	; 2
    3258:	91 05       	cpc	r25, r1
    325a:	18 f0       	brcs	.+6      	; 0x3262 <ReadInductance+0x204>
           timeconstant.w[1]++;			// count one additional OV
        }

        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
        for (ii=0;ii<20;ii++) {
    325c:	2f 5f       	subi	r18, 0xFF	; 255
    325e:	24 31       	cpi	r18, 0x14	; 20
    3260:	69 f7       	brne	.-38     	; 0x323c <ReadInductance+0x1de>
//  #undef CNT_ZERO_42
//  #undef CNT_ZERO_720
//  #define CNT_ZERO_42 7
//  #define CNT_ZERO_720 10
//#endif
        total_r = (mess_r + resis[found].rx + RRpinMI);
    3262:	c0 90 18 01 	lds	r12, 0x0118
    3266:	d0 90 19 01 	lds	r13, 0x0119
    326a:	80 91 47 01 	lds	r24, 0x0147
    326e:	90 91 48 01 	lds	r25, 0x0148
    3272:	c8 0e       	add	r12, r24
    3274:	d9 1e       	adc	r13, r25
    3276:	ca 0c       	add	r12, r10
    3278:	db 1c       	adc	r13, r11
//        if (total_r > 7000) cnt_diff = 1;
//        if (total_r > 14000) cnt_diff = 2;
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
        // Voltage of comparator in % of umax
     #ifdef AUTO_CAL
        tmpint = (ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset))) ;
    327a:	89 ec       	ldi	r24, 0xC9	; 201
    327c:	91 e0       	ldi	r25, 0x01	; 1
    327e:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <__eerd_word_m168>
    3282:	20 91 44 01 	lds	r18, 0x0144
    3286:	30 91 45 01 	lds	r19, 0x0145
    328a:	28 0f       	add	r18, r24
    328c:	39 1f       	adc	r19, r25
     #else
        tmpint = (ref_mv + REF_C_KORR);
     #endif
        if (mess_r < R_L_VAL) {
    328e:	b0 e9       	ldi	r27, 0x90	; 144
    3290:	ab 16       	cp	r10, r27
    3292:	ba e1       	ldi	r27, 0x1A	; 26
    3294:	bb 06       	cpc	r11, r27
    3296:	b8 f4       	brcc	.+46     	; 0x32c6 <ReadInductance+0x268>
           // measurement without 680 Ohm
           cnt_diff = CNT_ZERO_42;
           if (timeconstant.dw < 225) {
    3298:	81 ee       	ldi	r24, 0xE1	; 225
    329a:	e8 16       	cp	r14, r24
    329c:	f1 04       	cpc	r15, r1
    329e:	01 05       	cpc	r16, r1
    32a0:	11 05       	cpc	r17, r1
    32a2:	38 f4       	brcc	.+14     	; 0x32b2 <ReadInductance+0x254>
              ukorr = (timeconstant.w[0] / 5) - 20;
    32a4:	c7 01       	movw	r24, r14
    32a6:	65 e0       	ldi	r22, 0x05	; 5
    32a8:	70 e0       	ldi	r23, 0x00	; 0
    32aa:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <__udivmodhi4>
    32ae:	64 51       	subi	r22, 0x14	; 20
    32b0:	01 c0       	rjmp	.+2      	; 0x32b4 <ReadInductance+0x256>
           } else {
              ukorr = 25;
    32b2:	69 e1       	ldi	r22, 0x19	; 25
           }
           tmpint -= (((REF_L_KORR * 10) / 10) + ukorr);
    32b4:	28 52       	subi	r18, 0x28	; 40
    32b6:	30 40       	sbci	r19, 0x00	; 0
    32b8:	77 27       	eor	r23, r23
    32ba:	67 fd       	sbrc	r22, 7
    32bc:	70 95       	com	r23
    32be:	26 1b       	sub	r18, r22
    32c0:	37 0b       	sbc	r19, r23
     #else
        tmpint = (ref_mv + REF_C_KORR);
     #endif
        if (mess_r < R_L_VAL) {
           // measurement without 680 Ohm
           cnt_diff = CNT_ZERO_42;
    32c2:	66 e0       	ldi	r22, 0x06	; 6
    32c4:	08 c0       	rjmp	.+16     	; 0x32d6 <ReadInductance+0x278>
//#endif
        total_r = (mess_r + resis[found].rx + RRpinMI);
//        cnt_diff = 0;
//        if (total_r > 7000) cnt_diff = 1;
//        if (total_r > 14000) cnt_diff = 2;
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
    32c6:	c6 01       	movw	r24, r12
    32c8:	60 eb       	ldi	r22, 0xB0	; 176
    32ca:	76 e3       	ldi	r23, 0x36	; 54
    32cc:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <__udivmodhi4>
           }
           tmpint -= (((REF_L_KORR * 10) / 10) + ukorr);
        } else {
           // measurement with 680 Ohm resistor
           // if 680 Ohm resistor is used, use REF_L_KORR for correction
           cnt_diff += CNT_ZERO_720;
    32d0:	69 5f       	subi	r22, 0xF9	; 249
           tmpint += REF_L_KORR;
    32d2:	28 5d       	subi	r18, 0xD8	; 216
    32d4:	3f 4f       	sbci	r19, 0xFF	; 255
        }
        if (timeconstant.dw > cnt_diff) timeconstant.dw -= cnt_diff;
    32d6:	70 e0       	ldi	r23, 0x00	; 0
    32d8:	80 e0       	ldi	r24, 0x00	; 0
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	6e 15       	cp	r22, r14
    32de:	7f 05       	cpc	r23, r15
    32e0:	80 07       	cpc	r24, r16
    32e2:	91 07       	cpc	r25, r17
    32e4:	28 f4       	brcc	.+10     	; 0x32f0 <ReadInductance+0x292>
    32e6:	e6 1a       	sub	r14, r22
    32e8:	f7 0a       	sbc	r15, r23
    32ea:	08 0b       	sbc	r16, r24
    32ec:	19 0b       	sbc	r17, r25
    32ee:	03 c0       	rjmp	.+6      	; 0x32f6 <ReadInductance+0x298>
        else          timeconstant.dw = 0;
    32f0:	ee 24       	eor	r14, r14
    32f2:	ff 24       	eor	r15, r15
    32f4:	87 01       	movw	r16, r14
       
        if ((count&0x01) == 1) {
    32f6:	a9 89       	ldd	r26, Y+17	; 0x11
    32f8:	ba 89       	ldd	r27, Y+18	; 0x12
    32fa:	10 97       	sbiw	r26, 0x00	; 0
    32fc:	41 f0       	breq	.+16     	; 0x330e <ReadInductance+0x2b0>
           // second pass with delayed counter start
           timeconstant.dw += (3 * (F_CPU/1000000UL))+10;
    32fe:	82 e2       	ldi	r24, 0x22	; 34
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	a0 e0       	ldi	r26, 0x00	; 0
    3304:	b0 e0       	ldi	r27, 0x00	; 0
    3306:	e8 0e       	add	r14, r24
    3308:	f9 1e       	adc	r15, r25
    330a:	0a 1f       	adc	r16, r26
    330c:	1b 1f       	adc	r17, r27
        }
        if (timeconstant.w[1] >= (F_CPU/100000UL)) timeconstant.dw = 0; // no transition found
    330e:	00 35       	cpi	r16, 0x50	; 80
    3310:	11 05       	cpc	r17, r1
    3312:	18 f0       	brcs	.+6      	; 0x331a <ReadInductance+0x2bc>
    3314:	ee 24       	eor	r14, r14
    3316:	ff 24       	eor	r15, r15
    3318:	87 01       	movw	r16, r14
        if (timeconstant.dw > 10) {
    331a:	9b e0       	ldi	r25, 0x0B	; 11
    331c:	e9 16       	cp	r14, r25
    331e:	f1 04       	cpc	r15, r1
    3320:	01 05       	cpc	r16, r1
    3322:	11 05       	cpc	r17, r1
    3324:	28 f0       	brcs	.+10     	; 0x3330 <ReadInductance+0x2d2>
           timeconstant.dw -= 1;
    3326:	08 94       	sec
    3328:	e1 08       	sbc	r14, r1
    332a:	f1 08       	sbc	r15, r1
    332c:	01 09       	sbc	r16, r1
    332e:	11 09       	sbc	r17, r1
        }
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    3330:	c6 01       	movw	r24, r12
    3332:	a0 e0       	ldi	r26, 0x00	; 0
    3334:	b0 e0       	ldi	r27, 0x00	; 0
    3336:	8b 8b       	std	Y+19, r24	; 0x13
    3338:	9c 8b       	std	Y+20, r25	; 0x14
    333a:	ad 8b       	std	Y+21, r26	; 0x15
    333c:	be 8b       	std	Y+22, r27	; 0x16
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    333e:	b9 01       	movw	r22, r18
    3340:	80 e0       	ldi	r24, 0x00	; 0
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	28 ee       	ldi	r18, 0xE8	; 232
    3346:	33 e0       	ldi	r19, 0x03	; 3
    3348:	40 e0       	ldi	r20, 0x00	; 0
    334a:	50 e0       	ldi	r21, 0x00	; 0
    334c:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
    3350:	2b 01       	movw	r4, r22
    3352:	3c 01       	movw	r6, r24
        if (timeconstant.w[1] >= (F_CPU/100000UL)) timeconstant.dw = 0; // no transition found
        if (timeconstant.dw > 10) {
           timeconstant.dw -= 1;
        }
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    3354:	b5 01       	movw	r22, r10
    3356:	80 e0       	ldi	r24, 0x00	; 0
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	20 91 40 01 	lds	r18, 0x0140
    335e:	30 91 41 01 	lds	r19, 0x0141
    3362:	40 e0       	ldi	r20, 0x00	; 0
    3364:	50 e0       	ldi	r21, 0x00	; 0
    3366:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
    336a:	2b 89       	ldd	r18, Y+19	; 0x13
    336c:	3c 89       	ldd	r19, Y+20	; 0x14
    336e:	4d 89       	ldd	r20, Y+21	; 0x15
    3370:	5e 89       	ldd	r21, Y+22	; 0x16
    3372:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    3376:	40 e0       	ldi	r20, 0x00	; 0
    3378:	50 e0       	ldi	r21, 0x00	; 0
    337a:	c3 01       	movw	r24, r6
    337c:	b2 01       	movw	r22, r4
    337e:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
//        per_ref2 = (uint8_t)MEM2_read_byte(&LogTab[per_ref1]);	// -log(1 - per_ref1/100)
        per_ref2 = get_log(per_ref1);		// -log(1 - per_ref1/1000)
    3382:	c9 01       	movw	r24, r18
    3384:	0e 94 06 18 	call	0x300c	; 0x300c <get_log>
    3388:	6c 01       	movw	r12, r24
          }
#endif
/* ********************************************************* */
        // lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    338a:	6b 89       	ldd	r22, Y+19	; 0x13
    338c:	7c 89       	ldd	r23, Y+20	; 0x14
    338e:	8d 89       	ldd	r24, Y+21	; 0x15
    3390:	9e 89       	ldd	r25, Y+22	; 0x16
    3392:	a8 01       	movw	r20, r16
    3394:	97 01       	movw	r18, r14
    3396:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
    339a:	2b 01       	movw	r4, r22
    339c:	3c 01       	movw	r6, r24
             wait_about2s();
          }
#endif
/* ********************************************************* */
        // lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
    339e:	b6 01       	movw	r22, r12
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	e3 e0       	ldi	r30, 0x03	; 3
    33a6:	66 0f       	add	r22, r22
    33a8:	77 1f       	adc	r23, r23
    33aa:	88 1f       	adc	r24, r24
    33ac:	99 1f       	adc	r25, r25
    33ae:	ea 95       	dec	r30
    33b0:	d1 f7       	brne	.-12     	; 0x33a6 <ReadInductance+0x348>
    33b2:	6b 5f       	subi	r22, 0xFB	; 251
    33b4:	7f 4f       	sbci	r23, 0xFF	; 255
    33b6:	8f 4f       	sbci	r24, 0xFF	; 255
    33b8:	9f 4f       	sbci	r25, 0xFF	; 255
    33ba:	2a e0       	ldi	r18, 0x0A	; 10
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	40 e0       	ldi	r20, 0x00	; 0
    33c0:	50 e0       	ldi	r21, 0x00	; 0
    33c2:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    33c6:	40 e0       	ldi	r20, 0x00	; 0
    33c8:	50 e0       	ldi	r21, 0x00	; 0
    33ca:	c3 01       	movw	r24, r6
    33cc:	b2 01       	movw	r22, r4
    33ce:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
    33d2:	f1 01       	movw	r30, r2
    33d4:	ee 0f       	add	r30, r30
    33d6:	ff 1f       	adc	r31, r31
    33d8:	ee 0f       	add	r30, r30
    33da:	ff 1f       	adc	r31, r31
    33dc:	a1 e0       	ldi	r26, 0x01	; 1
    33de:	b0 e0       	ldi	r27, 0x00	; 0
    33e0:	ac 0f       	add	r26, r28
    33e2:	bd 1f       	adc	r27, r29
    33e4:	ea 0f       	add	r30, r26
    33e6:	fb 1f       	adc	r31, r27
    33e8:	20 83       	st	Z, r18
    33ea:	31 83       	std	Z+1, r19	; 0x01
    33ec:	42 83       	std	Z+2, r20	; 0x02
    33ee:	53 83       	std	Z+3, r21	; 0x03
        if (((count&0x01) == 0) && (timeconstant.dw > ((F_CPU/1000000UL)+3))) {
    33f0:	89 89       	ldd	r24, Y+17	; 0x11
    33f2:	9a 89       	ldd	r25, Y+18	; 0x12
    33f4:	00 97       	sbiw	r24, 0x00	; 0
    33f6:	99 f4       	brne	.+38     	; 0x341e <ReadInductance+0x3c0>
    33f8:	9c e0       	ldi	r25, 0x0C	; 12
    33fa:	e9 16       	cp	r14, r25
    33fc:	f1 04       	cpc	r15, r1
    33fe:	01 05       	cpc	r16, r1
    3400:	11 05       	cpc	r17, r1
    3402:	68 f0       	brcs	.+26     	; 0x341e <ReadInductance+0x3c0>
           // transition is found, measurement with delayed counter start is not necessary
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
    3404:	f1 01       	movw	r30, r2
    3406:	31 96       	adiw	r30, 0x01	; 1
    3408:	ee 0f       	add	r30, r30
    340a:	ff 1f       	adc	r31, r31
    340c:	ee 0f       	add	r30, r30
    340e:	ff 1f       	adc	r31, r31
    3410:	ea 0f       	add	r30, r26
    3412:	fb 1f       	adc	r31, r27
    3414:	20 83       	st	Z, r18
    3416:	31 83       	std	Z+1, r19	; 0x01
    3418:	42 83       	std	Z+2, r20	; 0x02
    341a:	53 83       	std	Z+3, r21	; 0x03
           count++;		// skip the delayed measurement
    341c:	93 94       	inc	r9
        }
        wdt_reset();
    341e:	a8 95       	wdr
//  for (found=0;found<ResistorsFound;found++) {
//     if (resis[found].rx > 21000) continue;
     if (resis[found].rx > 21000) return;

     // we can check for Inductance, if resistance is below 2100 Ohm
     for (count=0;count<4;count++) {
    3420:	93 94       	inc	r9
    3422:	a9 2d       	mov	r26, r9
    3424:	a4 30       	cpi	r26, 0x04	; 4
    3426:	08 f4       	brcc	.+2      	; 0x342a <ReadInductance+0x3cc>
    3428:	50 ce       	rjmp	.-864    	; 0x30ca <ReadInductance+0x6c>
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
           count++;		// skip the delayed measurement
        }
        wdt_reset();
     }  //end for count
     ADC_PORT = TXD_VAL;		// switch ADC Port to GND
    342a:	88 e0       	ldi	r24, 0x08	; 8
    342c:	88 b9       	out	0x08, r24	; 8
     wait_about20ms();
    342e:	84 e0       	ldi	r24, 0x04	; 4
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>
        resis[found].lx = inductance[0];
     }
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];		// other polarity, delayed start
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
#else
     nr_pol1 = 0;
    3436:	61 e0       	ldi	r22, 0x01	; 1
    3438:	2d 81       	ldd	r18, Y+5	; 0x05
    343a:	3e 81       	ldd	r19, Y+6	; 0x06
    343c:	4f 81       	ldd	r20, Y+7	; 0x07
    343e:	58 85       	ldd	r21, Y+8	; 0x08
    3440:	89 81       	ldd	r24, Y+1	; 0x01
    3442:	9a 81       	ldd	r25, Y+2	; 0x02
    3444:	ab 81       	ldd	r26, Y+3	; 0x03
    3446:	bc 81       	ldd	r27, Y+4	; 0x04
    3448:	82 17       	cp	r24, r18
    344a:	93 07       	cpc	r25, r19
    344c:	a4 07       	cpc	r26, r20
    344e:	b5 07       	cpc	r27, r21
    3450:	08 f0       	brcs	.+2      	; 0x3454 <ReadInductance+0x3f6>
    3452:	60 e0       	ldi	r22, 0x00	; 0
     if (inductance[1] > inductance[0]) { nr_pol1 = 1; } 
     nr_pol2 = 2;
     if (inductance[3] > inductance[2]) { nr_pol2 = 3; } 
    3454:	2d 85       	ldd	r18, Y+13	; 0x0d
    3456:	3e 85       	ldd	r19, Y+14	; 0x0e
    3458:	4f 85       	ldd	r20, Y+15	; 0x0f
    345a:	58 89       	ldd	r21, Y+16	; 0x10
    345c:	89 85       	ldd	r24, Y+9	; 0x09
    345e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3460:	ab 85       	ldd	r26, Y+11	; 0x0b
    3462:	bc 85       	ldd	r27, Y+12	; 0x0c
    3464:	82 17       	cp	r24, r18
    3466:	93 07       	cpc	r25, r19
    3468:	a4 07       	cpc	r26, r20
    346a:	b5 07       	cpc	r27, r21
    346c:	10 f0       	brcs	.+4      	; 0x3472 <ReadInductance+0x414>
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];		// other polarity, delayed start
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
#else
     nr_pol1 = 0;
     if (inductance[1] > inductance[0]) { nr_pol1 = 1; } 
     nr_pol2 = 2;
    346e:	72 e0       	ldi	r23, 0x02	; 2
    3470:	01 c0       	rjmp	.+2      	; 0x3474 <ReadInductance+0x416>
     if (inductance[3] > inductance[2]) { nr_pol2 = 3; } 
    3472:	73 e0       	ldi	r23, 0x03	; 3
     if (inductance[nr_pol2] < inductance[nr_pol1]) nr_pol1 = nr_pol2;
    3474:	a7 2f       	mov	r26, r23
    3476:	b0 e0       	ldi	r27, 0x00	; 0
    3478:	aa 0f       	add	r26, r26
    347a:	bb 1f       	adc	r27, r27
    347c:	aa 0f       	add	r26, r26
    347e:	bb 1f       	adc	r27, r27
    3480:	ce 01       	movw	r24, r28
    3482:	01 96       	adiw	r24, 0x01	; 1
    3484:	a8 0f       	add	r26, r24
    3486:	b9 1f       	adc	r27, r25
    3488:	e6 2f       	mov	r30, r22
    348a:	f0 e0       	ldi	r31, 0x00	; 0
    348c:	ee 0f       	add	r30, r30
    348e:	ff 1f       	adc	r31, r31
    3490:	ee 0f       	add	r30, r30
    3492:	ff 1f       	adc	r31, r31
    3494:	e8 0f       	add	r30, r24
    3496:	f9 1f       	adc	r31, r25
    3498:	2d 91       	ld	r18, X+
    349a:	3d 91       	ld	r19, X+
    349c:	4d 91       	ld	r20, X+
    349e:	5c 91       	ld	r21, X
    34a0:	80 81       	ld	r24, Z
    34a2:	91 81       	ldd	r25, Z+1	; 0x01
    34a4:	a2 81       	ldd	r26, Z+2	; 0x02
    34a6:	b3 81       	ldd	r27, Z+3	; 0x03
    34a8:	28 17       	cp	r18, r24
    34aa:	39 07       	cpc	r19, r25
    34ac:	4a 07       	cpc	r20, r26
    34ae:	5b 07       	cpc	r21, r27
    34b0:	08 f4       	brcc	.+2      	; 0x34b4 <ReadInductance+0x456>
    34b2:	67 2f       	mov	r22, r23
     resis[found].lx = inductance[nr_pol1];
    34b4:	26 2f       	mov	r18, r22
    34b6:	30 e0       	ldi	r19, 0x00	; 0
    34b8:	f9 01       	movw	r30, r18
    34ba:	ee 0f       	add	r30, r30
    34bc:	ff 1f       	adc	r31, r31
    34be:	ee 0f       	add	r30, r30
    34c0:	ff 1f       	adc	r31, r31
    34c2:	ec 0f       	add	r30, r28
    34c4:	fd 1f       	adc	r31, r29
    34c6:	61 81       	ldd	r22, Z+1	; 0x01
    34c8:	72 81       	ldd	r23, Z+2	; 0x02
    34ca:	83 81       	ldd	r24, Z+3	; 0x03
    34cc:	94 81       	ldd	r25, Z+4	; 0x04
    34ce:	60 93 1c 01 	sts	0x011C, r22
    34d2:	70 93 1d 01 	sts	0x011D, r23
    34d6:	80 93 1e 01 	sts	0x011E, r24
    34da:	90 93 1f 01 	sts	0x011F, r25
     resis[found].lpre = -5;	// 10 uH units
    34de:	4b ef       	ldi	r20, 0xFB	; 251
    34e0:	40 93 20 01 	sts	0x0120, r20
     if (((nr_pol1 & 1) == 1) || (resis[found].rx >= 240)) {
    34e4:	20 fd       	sbrc	r18, 0
    34e6:	0d c0       	rjmp	.+26     	; 0x3502 <ReadInductance+0x4a4>
    34e8:	20 91 18 01 	lds	r18, 0x0118
    34ec:	30 91 19 01 	lds	r19, 0x0119
    34f0:	40 91 1a 01 	lds	r20, 0x011A
    34f4:	50 91 1b 01 	lds	r21, 0x011B
    34f8:	20 3f       	cpi	r18, 0xF0	; 240
    34fa:	31 05       	cpc	r19, r1
    34fc:	41 05       	cpc	r20, r1
    34fe:	51 05       	cpc	r21, r1
    3500:	a8 f0       	brcs	.+42     	; 0x352c <ReadInductance+0x4ce>
        // with 680 Ohm resistor total_r is more than 7460
        resis[found].lpre = -4;	// 100 uH units
    3502:	2c ef       	ldi	r18, 0xFC	; 252
    3504:	20 93 20 01 	sts	0x0120, r18
        resis[found].lx = (resis[found].lx + 5) / 10;
    3508:	6b 5f       	subi	r22, 0xFB	; 251
    350a:	7f 4f       	sbci	r23, 0xFF	; 255
    350c:	8f 4f       	sbci	r24, 0xFF	; 255
    350e:	9f 4f       	sbci	r25, 0xFF	; 255
    3510:	2a e0       	ldi	r18, 0x0A	; 10
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	40 e0       	ldi	r20, 0x00	; 0
    3516:	50 e0       	ldi	r21, 0x00	; 0
    3518:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
    351c:	20 93 1c 01 	sts	0x011C, r18
    3520:	30 93 1d 01 	sts	0x011D, r19
    3524:	40 93 1e 01 	sts	0x011E, r20
    3528:	50 93 1f 01 	sts	0x011F, r21
     } 
#endif
//  } // end loop for all resistors

  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    352c:	88 e0       	ldi	r24, 0x08	; 8
    352e:	87 b9       	out	0x07, r24	; 7
  R_DDR = 0;			// switch all resistor ports to input
    3530:	14 b8       	out	0x04, r1	; 4
#endif
  return;
 } // end ReadInductance()
    3532:	68 96       	adiw	r28, 0x18	; 24
    3534:	0f b6       	in	r0, 0x3f	; 63
    3536:	f8 94       	cli
    3538:	de bf       	out	0x3e, r29	; 62
    353a:	0f be       	out	0x3f, r0	; 63
    353c:	cd bf       	out	0x3d, r28	; 61
    353e:	cf 91       	pop	r28
    3540:	df 91       	pop	r29
    3542:	1f 91       	pop	r17
    3544:	0f 91       	pop	r16
    3546:	ff 90       	pop	r15
    3548:	ef 90       	pop	r14
    354a:	df 90       	pop	r13
    354c:	cf 90       	pop	r12
    354e:	bf 90       	pop	r11
    3550:	af 90       	pop	r10
    3552:	9f 90       	pop	r9
    3554:	8f 90       	pop	r8
    3556:	7f 90       	pop	r7
    3558:	6f 90       	pop	r6
    355a:	5f 90       	pop	r5
    355c:	4f 90       	pop	r4
    355e:	3f 90       	pop	r3
    3560:	2f 90       	pop	r2
    3562:	08 95       	ret

00003564 <W20msReadADC>:
    3564:	8f 93       	push	r24
    3566:	84 e0       	ldi	r24, 0x04	; 4
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>
    356e:	0b c0       	rjmp	.+22     	; 0x3586 <to_read>

00003570 <W10msReadADC>:
    3570:	8f 93       	push	r24
    3572:	82 e0       	ldi	r24, 0x02	; 2
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>
    357a:	05 c0       	rjmp	.+10     	; 0x3586 <to_read>

0000357c <W5msReadADC>:
    357c:	8f 93       	push	r24
    357e:	81 e0       	ldi	r24, 0x01	; 1
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	0e 94 ae 03 	call	0x75c	; 0x75c <sleep_5ms>

00003586 <to_read>:
    3586:	8f 91       	pop	r24

00003588 <ReadADC>:
    3588:	1f 93       	push	r17
    358a:	18 2f       	mov	r17, r24
    358c:	10 64       	ori	r17, 0x40	; 64

0000358e <get_sample>:
    358e:	10 93 7c 00 	sts	0x007C, r17
    3592:	e1 2f       	mov	r30, r17
    3594:	e0 78       	andi	r30, 0x80	; 128
    3596:	80 91 3d 01 	lds	r24, 0x013D
    359a:	e8 17       	cp	r30, r24
    359c:	61 f0       	breq	.+24     	; 0x35b6 <r2aa2>
    359e:	0e 94 76 14 	call	0x28ec	; 0x28ec <wait100us>
    35a2:	8e e9       	ldi	r24, 0x9E	; 158
    35a4:	80 93 7a 00 	sts	0x007A, r24
    35a8:	83 e0       	ldi	r24, 0x03	; 3
    35aa:	83 bf       	out	0x33, r24	; 51
    35ac:	88 95       	sleep
    35ae:	82 e0       	ldi	r24, 0x02	; 2
    35b0:	83 bf       	out	0x33, r24	; 51
    35b2:	e0 93 3d 01 	sts	0x013D, r30

000035b6 <r2aa2>:
    35b6:	20 e0       	ldi	r18, 0x00	; 0
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	a9 01       	movw	r20, r18
    35bc:	e0 e0       	ldi	r30, 0x00	; 0
    35be:	1f c0       	rjmp	.+62     	; 0x35fe <r2ae8>

000035c0 <Loop>:
    35c0:	8e e9       	ldi	r24, 0x9E	; 158
    35c2:	80 93 7a 00 	sts	0x007A, r24
    35c6:	83 e0       	ldi	r24, 0x03	; 3
    35c8:	83 bf       	out	0x33, r24	; 51
    35ca:	88 95       	sleep
    35cc:	82 e0       	ldi	r24, 0x02	; 2
    35ce:	83 bf       	out	0x33, r24	; 51
    35d0:	60 91 78 00 	lds	r22, 0x0078
    35d4:	70 91 79 00 	lds	r23, 0x0079
    35d8:	26 0f       	add	r18, r22
    35da:	37 1f       	adc	r19, r23
    35dc:	41 1d       	adc	r20, r1
    35de:	51 1d       	adc	r21, r1
    35e0:	e4 30       	cpi	r30, 0x04	; 4
    35e2:	61 f4       	brne	.+24     	; 0x35fc <r2ae6>
    35e4:	80 91 3f 01 	lds	r24, 0x013F
    35e8:	80 30       	cpi	r24, 0x00	; 0
    35ea:	41 f0       	breq	.+16     	; 0x35fc <r2ae6>
    35ec:	84 e0       	ldi	r24, 0x04	; 4
    35ee:	20 30       	cpi	r18, 0x00	; 0
    35f0:	38 07       	cpc	r19, r24
    35f2:	20 f4       	brcc	.+8      	; 0x35fc <r2ae6>
    35f4:	17 fd       	sbrc	r17, 7
    35f6:	02 c0       	rjmp	.+4      	; 0x35fc <r2ae6>
    35f8:	10 68       	ori	r17, 0x80	; 128
    35fa:	c9 cf       	rjmp	.-110    	; 0x358e <get_sample>

000035fc <r2ae6>:
    35fc:	ef 5f       	subi	r30, 0xFF	; 255

000035fe <r2ae8>:
    35fe:	80 91 3c 01 	lds	r24, 0x013C
    3602:	e8 17       	cp	r30, r24
    3604:	e8 f2       	brcs	.-70     	; 0x35c0 <Loop>
    3606:	17 ff       	sbrs	r17, 7
    3608:	05 c0       	rjmp	.+10     	; 0x3614 <r2afe>
    360a:	60 91 3e 01 	lds	r22, 0x013E
    360e:	70 91 3f 01 	lds	r23, 0x013F
    3612:	04 c0       	rjmp	.+8      	; 0x361c <r2b02>

00003614 <r2afe>:
    3614:	60 91 40 01 	lds	r22, 0x0140
    3618:	70 91 41 01 	lds	r23, 0x0141

0000361c <r2b02>:
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
    3624:	2f ef       	ldi	r18, 0xFF	; 255
    3626:	33 e0       	ldi	r19, 0x03	; 3
    3628:	40 e0       	ldi	r20, 0x00	; 0
    362a:	50 e0       	ldi	r21, 0x00	; 0
    362c:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
    3630:	b9 01       	movw	r22, r18
    3632:	ca 01       	movw	r24, r20
    3634:	20 91 3c 01 	lds	r18, 0x013C
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	40 e0       	ldi	r20, 0x00	; 0
    363c:	50 e0       	ldi	r21, 0x00	; 0
    363e:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
    3642:	c9 01       	movw	r24, r18
    3644:	1f 91       	pop	r17
    3646:	08 95       	ret

00003648 <GetESR>:
    3648:	2f 92       	push	r2
    364a:	3f 92       	push	r3
    364c:	4f 92       	push	r4
    364e:	5f 92       	push	r5
    3650:	6f 92       	push	r6
    3652:	7f 92       	push	r7
    3654:	8f 92       	push	r8
    3656:	9f 92       	push	r9
    3658:	af 92       	push	r10
    365a:	bf 92       	push	r11
    365c:	cf 92       	push	r12
    365e:	df 92       	push	r13
    3660:	ef 92       	push	r14
    3662:	ff 92       	push	r15
    3664:	0f 93       	push	r16
    3666:	1f 93       	push	r17
    3668:	df 93       	push	r29
    366a:	cf 93       	push	r28
    366c:	cd b7       	in	r28, 0x3d	; 61
    366e:	de b7       	in	r29, 0x3e	; 62
    3670:	6a 97       	sbiw	r28, 0x1a	; 26
    3672:	0f b6       	in	r0, 0x3f	; 63
    3674:	f8 94       	cli
    3676:	de bf       	out	0x3e, r29	; 62
    3678:	0f be       	out	0x3f, r0	; 63
    367a:	cd bf       	out	0x3d, r28	; 61
    367c:	66 2e       	mov	r6, r22
    367e:	b8 2e       	mov	r11, r24
    3680:	86 0f       	add	r24, r22
    3682:	89 83       	std	Y+1, r24	; 0x01
    3684:	20 91 07 01 	lds	r18, 0x0107
    3688:	27 30       	cpi	r18, 0x07	; 7
    368a:	19 f5       	brne	.+70     	; 0x36d2 <ad_35e4>
    368c:	20 91 66 01 	lds	r18, 0x0166
    3690:	30 91 67 01 	lds	r19, 0x0167
    3694:	40 91 68 01 	lds	r20, 0x0168
    3698:	50 91 69 01 	lds	r21, 0x0169
    369c:	10 91 75 01 	lds	r17, 0x0175
    36a0:	09 c0       	rjmp	.+18     	; 0x36b4 <ad_35ba>

000036a2 <ad_35ac>:
    36a2:	ca 01       	movw	r24, r20
    36a4:	b9 01       	movw	r22, r18
    36a6:	2a e0       	ldi	r18, 0x0A	; 10
    36a8:	31 2d       	mov	r19, r1
    36aa:	41 2d       	mov	r20, r1
    36ac:	51 2d       	mov	r21, r1
    36ae:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
    36b2:	1f 5f       	subi	r17, 0xFF	; 255

000036b4 <ad_35ba>:
    36b4:	17 3f       	cpi	r17, 0xF7	; 247
    36b6:	ac f3       	brlt	.-22     	; 0x36a2 <ad_35ac>
    36b8:	2c 8b       	std	Y+20, r18	; 0x14
    36ba:	3d 8b       	std	Y+21, r19	; 0x15
    36bc:	4e 8b       	std	Y+22, r20	; 0x16
    36be:	5f 8b       	std	Y+23, r21	; 0x17
    36c0:	24 3b       	cpi	r18, 0xB4	; 180
    36c2:	60 e0       	ldi	r22, 0x00	; 0
    36c4:	36 07       	cpc	r19, r22
    36c6:	41 05       	cpc	r20, r1
    36c8:	51 05       	cpc	r21, r1
    36ca:	18 f4       	brcc	.+6      	; 0x36d2 <ad_35e4>
    36cc:	8f ef       	ldi	r24, 0xFF	; 255
    36ce:	9f ef       	ldi	r25, 0xFF	; 255
    36d0:	6e c1       	rjmp	.+732    	; 0x39ae <ad_exit>

000036d2 <ad_35e4>:
    36d2:	26 ed       	ldi	r18, 0xD6	; 214
    36d4:	a2 2e       	mov	r10, r18
    36d6:	02 c0       	rjmp	.+4      	; 0x36dc <ad_3604>

000036d8 <ad_35fe>:
    36d8:	94 ed       	ldi	r25, 0xD4	; 212
    36da:	a9 2e       	mov	r10, r25

000036dc <ad_3604>:
    36dc:	ed e0       	ldi	r30, 0x0D	; 13
    36de:	f1 e0       	ldi	r31, 0x01	; 1
    36e0:	e6 0d       	add	r30, r6
    36e2:	f1 1d       	adc	r31, r1
    36e4:	85 91       	lpm	r24, Z+
    36e6:	88 60       	ori	r24, 0x08	; 8
    36e8:	8e 87       	std	Y+14, r24	; 0x0e
    36ea:	ed e0       	ldi	r30, 0x0D	; 13
    36ec:	f1 e0       	ldi	r31, 0x01	; 1
    36ee:	eb 0d       	add	r30, r11
    36f0:	f1 1d       	adc	r31, r1
    36f2:	85 91       	lpm	r24, Z+
    36f4:	88 60       	ori	r24, 0x08	; 8
    36f6:	8f 87       	std	Y+15, r24	; 0x0f
    36f8:	ea e0       	ldi	r30, 0x0A	; 10
    36fa:	f1 e0       	ldi	r31, 0x01	; 1
    36fc:	e6 0d       	add	r30, r6
    36fe:	f1 1d       	adc	r31, r1
    3700:	75 90       	lpm	r7, Z+
    3702:	ea e0       	ldi	r30, 0x0A	; 10
    3704:	f1 e0       	ldi	r31, 0x01	; 1
    3706:	eb 0d       	add	r30, r11
    3708:	f1 1d       	adc	r31, r1
    370a:	c5 90       	lpm	r12, Z+
    370c:	90 ec       	ldi	r25, 0xC0	; 192
    370e:	69 2a       	or	r6, r25
    3710:	b9 2a       	or	r11, r25
    3712:	81 e0       	ldi	r24, 0x01	; 1
    3714:	e8 2e       	mov	r14, r24
    3716:	f1 2c       	mov	r15, r1
    3718:	01 2d       	mov	r16, r1
    371a:	11 2d       	mov	r17, r1
    371c:	8e 83       	std	Y+6, r24	; 0x06
    371e:	1f 82       	std	Y+7, r1	; 0x07
    3720:	18 86       	std	Y+8, r1	; 0x08
    3722:	19 86       	std	Y+9, r1	; 0x09
    3724:	1a 86       	std	Y+10, r1	; 0x0a
    3726:	1b 86       	std	Y+11, r1	; 0x0b
    3728:	1c 86       	std	Y+12, r1	; 0x0c
    372a:	1d 86       	std	Y+13, r1	; 0x0d
    372c:	0e 94 b0 01 	call	0x360	; 0x360 <EntladePins>
    3730:	88 e0       	ldi	r24, 0x08	; 8
    3732:	88 b9       	out	0x08, r24	; 8
    3734:	60 92 7c 00 	sts	0x007C, r6
    3738:	0e 94 76 14 	call	0x28ec	; 0x28ec <wait100us>
    373c:	3f 85       	ldd	r19, Y+15	; 0x0f
    373e:	37 b9       	out	0x07, r19	; 7
    3740:	75 b8       	out	0x05, r7	; 5
    3742:	74 b8       	out	0x04, r7	; 4
    3744:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <wait10us>
    3748:	0e 94 7f 14 	call	0x28fe	; 0x28fe <wait2us>
    374c:	15 b8       	out	0x05, r1	; 5
    374e:	14 b8       	out	0x04, r1	; 4
    3750:	dd 24       	eor	r13, r13
    3752:	b4 ed       	ldi	r27, 0xD4	; 212
    3754:	9b 2e       	mov	r9, r27
    3756:	a6 ed       	ldi	r26, 0xD6	; 214
    3758:	8a 2e       	mov	r8, r26

0000375a <ad_3692>:
    375a:	3e 85       	ldd	r19, Y+14	; 0x0e
    375c:	37 b9       	out	0x07, r19	; 7
    375e:	75 b8       	out	0x05, r7	; 5
    3760:	74 b8       	out	0x04, r7	; 4
    3762:	60 92 7c 00 	sts	0x007C, r6
    3766:	a8 95       	wdr
    3768:	a0 92 7a 00 	sts	0x007A, r10
    376c:	80 91 7a 00 	lds	r24, 0x007A
    3770:	86 fd       	sbrc	r24, 6
    3772:	fc cf       	rjmp	.-8      	; 0x376c <ad_3692+0x12>
    3774:	a0 92 7a 00 	sts	0x007A, r10
    3778:	80 91 7a 00 	lds	r24, 0x007A
    377c:	86 fd       	sbrc	r24, 6
    377e:	fc cf       	rjmp	.-8      	; 0x3778 <ad_3692+0x1e>
    3780:	20 90 78 00 	lds	r2, 0x0078
    3784:	30 90 79 00 	lds	r3, 0x0079
    3788:	b0 92 7c 00 	sts	0x007C, r11
    378c:	a0 92 7a 00 	sts	0x007A, r10
    3790:	80 91 7a 00 	lds	r24, 0x007A
    3794:	86 fd       	sbrc	r24, 6
    3796:	fc cf       	rjmp	.-8      	; 0x3790 <ad_3692+0x36>
    3798:	80 92 7a 00 	sts	0x007A, r8
    379c:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <wait5us>
    37a0:	c5 b8       	out	0x05, r12	; 5
    37a2:	c4 b8       	out	0x04, r12	; 4
    37a4:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <wait20us>
    37a8:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <wait5us>
    37ac:	0e 94 80 14 	call	0x2900	; 0x2900 <wait1us>
    37b0:	8f 93       	push	r24
    37b2:	8f 91       	pop	r24
    37b4:	a8 95       	wdr
    37b6:	a8 95       	wdr
    37b8:	14 b8       	out	0x04, r1	; 4
    37ba:	15 b8       	out	0x05, r1	; 5

000037bc <ad_370c>:
    37bc:	80 91 7a 00 	lds	r24, 0x007A
    37c0:	86 fd       	sbrc	r24, 6
    37c2:	fc cf       	rjmp	.-8      	; 0x37bc <ad_370c>
    37c4:	20 91 78 00 	lds	r18, 0x0078
    37c8:	30 91 79 00 	lds	r19, 0x0079
    37cc:	28 8b       	std	Y+16, r18	; 0x10
    37ce:	39 8b       	std	Y+17, r19	; 0x11
    37d0:	3f 85       	ldd	r19, Y+15	; 0x0f
    37d2:	37 b9       	out	0x07, r19	; 7
    37d4:	c5 b8       	out	0x05, r12	; 5
    37d6:	c4 b8       	out	0x04, r12	; 4
    37d8:	a8 95       	wdr
    37da:	b0 92 7c 00 	sts	0x007C, r11
    37de:	a0 92 7a 00 	sts	0x007A, r10
    37e2:	80 91 7a 00 	lds	r24, 0x007A
    37e6:	86 fd       	sbrc	r24, 6
    37e8:	fc cf       	rjmp	.-8      	; 0x37e2 <ad_370c+0x26>
    37ea:	a0 92 7a 00 	sts	0x007A, r10
    37ee:	80 91 7a 00 	lds	r24, 0x007A
    37f2:	86 fd       	sbrc	r24, 6
    37f4:	fc cf       	rjmp	.-8      	; 0x37ee <ad_370c+0x32>
    37f6:	60 91 78 00 	lds	r22, 0x0078
    37fa:	70 91 79 00 	lds	r23, 0x0079
    37fe:	60 92 7c 00 	sts	0x007C, r6
    3802:	a0 92 7a 00 	sts	0x007A, r10
    3806:	80 91 7a 00 	lds	r24, 0x007A
    380a:	86 fd       	sbrc	r24, 6
    380c:	fc cf       	rjmp	.-8      	; 0x3806 <ad_370c+0x4a>
    380e:	80 92 7a 00 	sts	0x007A, r8
    3812:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <wait5us>
    3816:	75 b8       	out	0x05, r7	; 5
    3818:	74 b8       	out	0x04, r7	; 4
    381a:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <wait20us>
    381e:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <wait5us>
    3822:	0e 94 80 14 	call	0x2900	; 0x2900 <wait1us>
    3826:	8f 93       	push	r24
    3828:	8f 91       	pop	r24
    382a:	a8 95       	wdr
    382c:	a8 95       	wdr
    382e:	14 b8       	out	0x04, r1	; 4
    3830:	15 b8       	out	0x05, r1	; 5

00003832 <ad_37f4>:
    3832:	80 91 7a 00 	lds	r24, 0x007A
    3836:	86 fd       	sbrc	r24, 6
    3838:	fc cf       	rjmp	.-8      	; 0x3832 <ad_37f4>
    383a:	40 91 78 00 	lds	r20, 0x0078
    383e:	50 91 79 00 	lds	r21, 0x0079
    3842:	14 b8       	out	0x04, r1	; 4
    3844:	cb 01       	movw	r24, r22
    3846:	82 0d       	add	r24, r2
    3848:	93 1d       	adc	r25, r3
    384a:	e8 0e       	add	r14, r24
    384c:	f9 1e       	adc	r15, r25
    384e:	01 1d       	adc	r16, r1
    3850:	11 1d       	adc	r17, r1
    3852:	ea 82       	std	Y+2, r14	; 0x02
    3854:	fb 82       	std	Y+3, r15	; 0x03
    3856:	0c 83       	std	Y+4, r16	; 0x04
    3858:	1d 83       	std	Y+5, r17	; 0x05
    385a:	88 89       	ldd	r24, Y+16	; 0x10
    385c:	99 89       	ldd	r25, Y+17	; 0x11
    385e:	84 0f       	add	r24, r20
    3860:	95 1f       	adc	r25, r21
    3862:	2e 81       	ldd	r18, Y+6	; 0x06
    3864:	3f 81       	ldd	r19, Y+7	; 0x07
    3866:	68 85       	ldd	r22, Y+8	; 0x08
    3868:	79 85       	ldd	r23, Y+9	; 0x09
    386a:	28 0f       	add	r18, r24
    386c:	39 1f       	adc	r19, r25
    386e:	61 1d       	adc	r22, r1
    3870:	71 1d       	adc	r23, r1
    3872:	2e 83       	std	Y+6, r18	; 0x06
    3874:	3f 83       	std	Y+7, r19	; 0x07
    3876:	68 87       	std	Y+8, r22	; 0x08
    3878:	79 87       	std	Y+9, r23	; 0x09
    387a:	24 e6       	ldi	r18, 0x64	; 100
    387c:	24 17       	cp	r18, r20
    387e:	15 06       	cpc	r1, r21
    3880:	50 f0       	brcs	.+20     	; 0x3896 <is_ok1>
    3882:	75 b8       	out	0x05, r7	; 5
    3884:	74 b8       	out	0x04, r7	; 4
    3886:	0e 94 7f 14 	call	0x28fe	; 0x28fe <wait2us>
    388a:	14 b8       	out	0x04, r1	; 4
    388c:	15 b8       	out	0x05, r1	; 5
    388e:	8e e3       	ldi	r24, 0x3E	; 62
    3890:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
    3894:	21 c0       	rjmp	.+66     	; 0x38d8 <is_ok2>

00003896 <is_ok1>:
    3896:	48 3e       	cpi	r20, 0xE8	; 232
    3898:	73 e0       	ldi	r23, 0x03	; 3
    389a:	57 07       	cpc	r21, r23
    389c:	18 f0       	brcs	.+6      	; 0x38a4 <is_ok1b>
    389e:	8b e2       	ldi	r24, 0x2B	; 43
    38a0:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>

000038a4 <is_ok1b>:
    38a4:	88 89       	ldd	r24, Y+16	; 0x10
    38a6:	99 89       	ldd	r25, Y+17	; 0x11
    38a8:	28 17       	cp	r18, r24
    38aa:	19 06       	cpc	r1, r25
    38ac:	a8 f0       	brcs	.+42     	; 0x38d8 <is_ok2>
    38ae:	3e 85       	ldd	r19, Y+14	; 0x0e
    38b0:	37 b9       	out	0x07, r19	; 7
    38b2:	c5 b8       	out	0x05, r12	; 5
    38b4:	c4 b8       	out	0x04, r12	; 4
    38b6:	0e 94 7f 14 	call	0x28fe	; 0x28fe <wait2us>
    38ba:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <wait20us>
    38be:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <wait5us>
    38c2:	0e 94 80 14 	call	0x2900	; 0x2900 <wait1us>
    38c6:	8f 93       	push	r24
    38c8:	8f 91       	pop	r24
    38ca:	a8 95       	wdr
    38cc:	a8 95       	wdr
    38ce:	14 b8       	out	0x04, r1	; 4
    38d0:	15 b8       	out	0x05, r1	; 5
    38d2:	8c e3       	ldi	r24, 0x3C	; 60
    38d4:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>

000038d8 <is_ok2>:
    38d8:	88 3e       	cpi	r24, 0xE8	; 232
    38da:	73 e0       	ldi	r23, 0x03	; 3
    38dc:	97 07       	cpc	r25, r23
    38de:	18 f0       	brcs	.+6      	; 0x38e6 <is_ok2b>
    38e0:	83 e2       	ldi	r24, 0x23	; 35
    38e2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>

000038e6 <is_ok2b>:
    38e6:	d3 94       	inc	r13
    38e8:	5d 2d       	mov	r21, r13
    38ea:	5f 3f       	cpi	r21, 0xFF	; 255
    38ec:	09 f0       	breq	.+2      	; 0x38f0 <ad_38ac>
    38ee:	35 cf       	rjmp	.-406    	; 0x375a <ad_3692>

000038f0 <ad_38ac>:
    38f0:	40 90 47 01 	lds	r4, 0x0147
    38f4:	50 90 48 01 	lds	r5, 0x0148
    38f8:	44 0c       	add	r4, r4
    38fa:	55 1c       	adc	r5, r5
    38fc:	92 01       	movw	r18, r4
    38fe:	e4 e0       	ldi	r30, 0x04	; 4

00003900 <ad_3924>:
    3900:	24 0d       	add	r18, r4
    3902:	35 1d       	adc	r19, r5
    3904:	ea 95       	dec	r30
    3906:	e1 f7       	brne	.-8      	; 0x3900 <ad_3924>
    3908:	29 01       	movw	r4, r18
    390a:	57 01       	movw	r10, r14
    390c:	68 01       	movw	r12, r16
    390e:	6e 80       	ldd	r6, Y+6	; 0x06
    3910:	7f 80       	ldd	r7, Y+7	; 0x07
    3912:	88 84       	ldd	r8, Y+8	; 0x08
    3914:	99 84       	ldd	r9, Y+9	; 0x09
    3916:	20 91 07 01 	lds	r18, 0x0107
    391a:	27 30       	cpi	r18, 0x07	; 7
    391c:	c1 f4       	brne	.+48     	; 0x394e <no_sub>
    391e:	6c 89       	ldd	r22, Y+20	; 0x14
    3920:	7d 89       	ldd	r23, Y+21	; 0x15
    3922:	8e 89       	ldd	r24, Y+22	; 0x16
    3924:	9f 89       	ldd	r25, Y+23	; 0x17
    3926:	9b 01       	movw	r18, r22
    3928:	ac 01       	movw	r20, r24
    392a:	6d 5e       	subi	r22, 0xED	; 237
    392c:	7f 4f       	sbci	r23, 0xFF	; 255
    392e:	8f 4f       	sbci	r24, 0xFF	; 255
    3930:	9f 4f       	sbci	r25, 0xFF	; 255
    3932:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
    3936:	9b 01       	movw	r18, r22
    3938:	ac 01       	movw	r20, r24
    393a:	66 e3       	ldi	r22, 0x36	; 54
    393c:	79 e2       	ldi	r23, 0x29	; 41
    393e:	86 e8       	ldi	r24, 0x86	; 134
    3940:	9a e1       	ldi	r25, 0x1A	; 26
    3942:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
    3946:	62 1a       	sub	r6, r18
    3948:	73 0a       	sbc	r7, r19
    394a:	84 0a       	sbc	r8, r20
    394c:	95 0a       	sbc	r9, r21

0000394e <no_sub>:
    394e:	a6 14       	cp	r10, r6
    3950:	b7 04       	cpc	r11, r7
    3952:	c8 04       	cpc	r12, r8
    3954:	d9 04       	cpc	r13, r9
    3956:	28 f4       	brcc	.+10     	; 0x3962 <ad_396c>
    3958:	6a 18       	sub	r6, r10
    395a:	7b 08       	sbc	r7, r11
    395c:	8c 08       	sbc	r8, r12
    395e:	9d 08       	sbc	r9, r13
    3960:	03 c0       	rjmp	.+6      	; 0x3968 <ad_3972>

00003962 <ad_396c>:
    3962:	66 24       	eor	r6, r6
    3964:	77 24       	eor	r7, r7
    3966:	43 01       	movw	r8, r6

00003968 <ad_3972>:
    3968:	b2 01       	movw	r22, r4
    396a:	80 e0       	ldi	r24, 0x00	; 0
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	93 01       	movw	r18, r6
    3970:	a4 01       	movw	r20, r8
    3972:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
    3976:	95 01       	movw	r18, r10
    3978:	a6 01       	movw	r20, r12
    397a:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
    397e:	82 ed       	ldi	r24, 0xD2	; 210
    3980:	91 e0       	ldi	r25, 0x01	; 1
    3982:	79 81       	ldd	r23, Y+1	; 0x01
    3984:	87 0f       	add	r24, r23
    3986:	91 1d       	adc	r25, r1
    3988:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__eerd_byte_m168>
    398c:	68 2e       	mov	r6, r24
    398e:	c9 01       	movw	r24, r18
    3990:	60 e1       	ldi	r22, 0x10	; 16
    3992:	70 e0       	ldi	r23, 0x00	; 0
    3994:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <__udivmodhi4>
    3998:	26 0f       	add	r18, r22
    399a:	37 1f       	adc	r19, r23
    399c:	c9 01       	movw	r24, r18
    399e:	68 16       	cp	r6, r24
    39a0:	19 06       	cpc	r1, r25
    39a2:	18 f4       	brcc	.+6      	; 0x39aa <esr_too_less>
    39a4:	86 19       	sub	r24, r6
    39a6:	91 09       	sbc	r25, r1
    39a8:	02 c0       	rjmp	.+4      	; 0x39ae <ad_exit>

000039aa <esr_too_less>:
    39aa:	81 2d       	mov	r24, r1
    39ac:	91 2d       	mov	r25, r1

000039ae <ad_exit>:
    39ae:	6a 96       	adiw	r28, 0x1a	; 26
    39b0:	0f b6       	in	r0, 0x3f	; 63
    39b2:	f8 94       	cli
    39b4:	de bf       	out	0x3e, r29	; 62
    39b6:	0f be       	out	0x3f, r0	; 63
    39b8:	cd bf       	out	0x3d, r28	; 61
    39ba:	cf 91       	pop	r28
    39bc:	df 91       	pop	r29
    39be:	1f 91       	pop	r17
    39c0:	0f 91       	pop	r16
    39c2:	ff 90       	pop	r15
    39c4:	ef 90       	pop	r14
    39c6:	df 90       	pop	r13
    39c8:	cf 90       	pop	r12
    39ca:	bf 90       	pop	r11
    39cc:	af 90       	pop	r10
    39ce:	9f 90       	pop	r9
    39d0:	8f 90       	pop	r8
    39d2:	7f 90       	pop	r7
    39d4:	6f 90       	pop	r6
    39d6:	5f 90       	pop	r5
    39d8:	4f 90       	pop	r4
    39da:	3f 90       	pop	r3
    39dc:	2f 90       	pop	r2
    39de:	08 95       	ret

000039e0 <GetVloss>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void GetVloss() {
    39e0:	cf 92       	push	r12
    39e2:	df 92       	push	r13
    39e4:	ef 92       	push	r14
    39e6:	ff 92       	push	r15
    39e8:	0f 93       	push	r16
    39ea:	1f 93       	push	r17
    39ec:	cf 93       	push	r28
    39ee:	df 93       	push	r29
  } lval;
  uint8_t ii;
  uint8_t HiPinR_L;
  uint8_t LoADC;

  if (cap.v_loss > 0) return;		// Voltage loss is already known
    39f0:	80 91 70 01 	lds	r24, 0x0170
    39f4:	90 91 71 01 	lds	r25, 0x0171
    39f8:	00 97       	sbiw	r24, 0x00	; 0
    39fa:	09 f0       	breq	.+2      	; 0x39fe <GetVloss+0x1e>
    39fc:	a2 c0       	rjmp	.+324    	; 0x3b42 <GetVloss+0x162>
  LoADC = pgm_read_byte(&PinADCtab[cap.ca]) | TXD_MSK;
    39fe:	e0 91 72 01 	lds	r30, 0x0172
    3a02:	f0 e0       	ldi	r31, 0x00	; 0
    3a04:	e3 5f       	subi	r30, 0xF3	; 243
    3a06:	fe 4f       	sbci	r31, 0xFE	; 254
    3a08:	04 91       	lpm	r16, Z+
    3a0a:	08 60       	ori	r16, 0x08	; 8
  HiPinR_L = pgm_read_byte(&PinRLtab[cap.cb]);	//R_L mask for HighPin R_L load
    3a0c:	e0 91 73 01 	lds	r30, 0x0173
    3a10:	f0 e0       	ldi	r31, 0x00	; 0
    3a12:	e6 5f       	subi	r30, 0xF6	; 246
    3a14:	fe 4f       	sbci	r31, 0xFE	; 254
    3a16:	14 91       	lpm	r17, Z+

  EntladePins();			// discharge capacitor
    3a18:	0e 94 b0 01 	call	0x360	; 0x360 <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    3a1c:	88 e0       	ldi	r24, 0x08	; 8
    3a1e:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    3a20:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    3a22:	07 b9       	out	0x07, r16	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    3a24:	14 b9       	out	0x04, r17	; 4
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
    3a26:	80 91 73 01 	lds	r24, 0x0173
    3a2a:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
    3a2e:	ec 01       	movw	r28, r24
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
    3a30:	00 91 75 01 	lds	r16, 0x0175
    3a34:	08 3f       	cpi	r16, 0xF8	; 248
    3a36:	0c f0       	brlt	.+2      	; 0x3a3a <GetVloss+0x5a>
    3a38:	84 c0       	rjmp	.+264    	; 0x3b42 <GetVloss+0x162>
  lval.dw = cap.cval_max;
    3a3a:	20 91 66 01 	lds	r18, 0x0166
    3a3e:	30 91 67 01 	lds	r19, 0x0167
    3a42:	40 91 68 01 	lds	r20, 0x0168
    3a46:	50 91 69 01 	lds	r21, 0x0169
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    3a4a:	04 5f       	subi	r16, 0xF4	; 244
     lval.dw = (lval.dw + 5) / 10;
    3a4c:	8a e0       	ldi	r24, 0x0A	; 10
    3a4e:	c8 2e       	mov	r12, r24
    3a50:	d1 2c       	mov	r13, r1
    3a52:	e1 2c       	mov	r14, r1
    3a54:	f1 2c       	mov	r15, r1
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
  lval.dw = cap.cval_max;
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    3a56:	0b c0       	rjmp	.+22     	; 0x3a6e <GetVloss+0x8e>
     lval.dw = (lval.dw + 5) / 10;
    3a58:	ca 01       	movw	r24, r20
    3a5a:	b9 01       	movw	r22, r18
    3a5c:	6b 5f       	subi	r22, 0xFB	; 251
    3a5e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a60:	8f 4f       	sbci	r24, 0xFF	; 255
    3a62:	9f 4f       	sbci	r25, 0xFF	; 255
    3a64:	a7 01       	movw	r20, r14
    3a66:	96 01       	movw	r18, r12
    3a68:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
  lval.dw = cap.cval_max;
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    3a6c:	0f 5f       	subi	r16, 0xFF	; 255
    3a6e:	04 30       	cpi	r16, 0x04	; 4
    3a70:	98 f3       	brcs	.-26     	; 0x3a58 <GetVloss+0x78>
    3a72:	79 01       	movw	r14, r18
     lval.dw = (lval.dw + 5) / 10;
  }
//  if ((lval.dw == 0) || (lval.dw > 500)) {
  if ((lval.dw == 0) || (lval.dw > 5000)) {
    3a74:	21 50       	subi	r18, 0x01	; 1
    3a76:	30 40       	sbci	r19, 0x00	; 0
    3a78:	40 40       	sbci	r20, 0x00	; 0
    3a7a:	50 40       	sbci	r21, 0x00	; 0
    3a7c:	28 38       	cpi	r18, 0x88	; 136
    3a7e:	83 e1       	ldi	r24, 0x13	; 19
    3a80:	38 07       	cpc	r19, r24
    3a82:	80 e0       	ldi	r24, 0x00	; 0
    3a84:	48 07       	cpc	r20, r24
    3a86:	80 e0       	ldi	r24, 0x00	; 0
    3a88:	58 07       	cpc	r21, r24
    3a8a:	08 f0       	brcs	.+2      	; 0x3a8e <GetVloss+0xae>
    3a8c:	5a c0       	rjmp	.+180    	; 0x3b42 <GetVloss+0x162>
     /* capacity more than 50uF, Voltage loss is already measured  */
     return;
  }
  R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    3a8e:	15 b9       	out	0x05, r17	; 5
  R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    3a90:	14 b9       	out	0x04, r17	; 4
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    3a92:	00 e0       	ldi	r16, 0x00	; 0
    3a94:	10 e0       	ldi	r17, 0x00	; 0
    3a96:	04 c0       	rjmp	.+8      	; 0x3aa0 <GetVloss+0xc0>
//     wait50us();			// wait exactly 50us
     wait5us();			// wait exactly 5us
    3a98:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <wait5us>
     /* capacity more than 50uF, Voltage loss is already measured  */
     return;
  }
  R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
  R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    3a9c:	0e 5f       	subi	r16, 0xFE	; 254
    3a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    3aa0:	67 01       	movw	r12, r14
    3aa2:	0e 15       	cp	r16, r14
    3aa4:	1f 05       	cpc	r17, r15
    3aa6:	c0 f3       	brcs	.-16     	; 0x3a98 <GetVloss+0xb8>
//     wait50us();			// wait exactly 50us
     wait5us();			// wait exactly 5us
  }
  R_DDR = 0;				// switch back to input
    3aa8:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// no Pull up
    3aaa:	15 b8       	out	0x05, r1	; 5
 // wait10us();			//wait a little time
  wdt_reset();
    3aac:	a8 95       	wdr
  // read voltage without current
  ADCconfig.Samples = 5;		// set ADC to only 5 samples
    3aae:	85 e0       	ldi	r24, 0x05	; 5
    3ab0:	80 93 3c 01 	sts	0x013C, r24
  adcv[2] = ReadADC(cap.cb);
    3ab4:	80 91 73 01 	lds	r24, 0x0173
    3ab8:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
  if (adcv[2] > adcv[0]) {
    3abc:	c8 17       	cp	r28, r24
    3abe:	d9 07       	cpc	r29, r25
    3ac0:	20 f4       	brcc	.+8      	; 0x3aca <GetVloss+0xea>
     adcv[2] -= adcv[0];		//difference to beginning voltage
    3ac2:	8c 01       	movw	r16, r24
    3ac4:	0c 1b       	sub	r16, r28
    3ac6:	1d 0b       	sbc	r17, r29
    3ac8:	02 c0       	rjmp	.+4      	; 0x3ace <GetVloss+0xee>
  } else {
     adcv[2] = 0;			// voltage is lower or same as beginning voltage
    3aca:	00 e0       	ldi	r16, 0x00	; 0
    3acc:	10 e0       	ldi	r17, 0x00	; 0
  }
  // wait 2x the time which was required for loading
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    3ace:	ee 24       	eor	r14, r14
    3ad0:	ff 24       	eor	r15, r15
    3ad2:	05 c0       	rjmp	.+10     	; 0x3ade <GetVloss+0xfe>
//     wait50us();
     wait5us();
    3ad4:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <wait5us>
     adcv[2] -= adcv[0];		//difference to beginning voltage
  } else {
     adcv[2] = 0;			// voltage is lower or same as beginning voltage
  }
  // wait 2x the time which was required for loading
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    3ad8:	08 94       	sec
    3ada:	e1 1c       	adc	r14, r1
    3adc:	f1 1c       	adc	r15, r1
    3ade:	ec 14       	cp	r14, r12
    3ae0:	fd 04       	cpc	r15, r13
    3ae2:	c0 f3       	brcs	.-16     	; 0x3ad4 <GetVloss+0xf4>
//     wait50us();
     wait5us();
  }
  adcv[3] = ReadADC(cap.cb);	// read voltage again, is discharged only a little bit ?
    3ae4:	80 91 73 01 	lds	r24, 0x0173
    3ae8:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
  ADCconfig.Samples = ANZ_MESS;		// set ADC back to configured No. of samples
    3aec:	29 e1       	ldi	r18, 0x19	; 25
    3aee:	20 93 3c 01 	sts	0x013C, r18
  wdt_reset();
    3af2:	a8 95       	wdr
  if (adcv[3] > adcv[0]) {
    3af4:	c8 17       	cp	r28, r24
    3af6:	d9 07       	cpc	r29, r25
    3af8:	18 f4       	brcc	.+6      	; 0x3b00 <GetVloss+0x120>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    3afa:	8c 1b       	sub	r24, r28
    3afc:	9d 0b       	sbc	r25, r29
    3afe:	02 c0       	rjmp	.+4      	; 0x3b04 <GetVloss+0x124>
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    3b00:	80 e0       	ldi	r24, 0x00	; 0
    3b02:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
    3b04:	80 17       	cp	r24, r16
    3b06:	91 07       	cpc	r25, r17
    3b08:	a8 f4       	brcc	.+42     	; 0x3b34 <GetVloss+0x154>
     // build difference to load voltage
     adcv[1] = adcv[2] - adcv[3];	// lost voltage during load time wait
    3b0a:	b8 01       	movw	r22, r16
    3b0c:	68 1b       	sub	r22, r24
    3b0e:	79 0b       	sbc	r23, r25
  } else {
     adcv[1] = 0;			// no lost voltage
  }
  // compute voltage drop as part from loaded voltage
  if (adcv[1] > 0) {
    3b10:	89 f0       	breq	.+34     	; 0x3b34 <GetVloss+0x154>
     // there is any voltage drop (adcv[1]) !
     // adcv[2] is the loaded voltage.
     cap.v_loss = (unsigned long)(adcv[1] * 500UL) / adcv[2];
    3b12:	80 e0       	ldi	r24, 0x00	; 0
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	24 ef       	ldi	r18, 0xF4	; 244
    3b18:	31 e0       	ldi	r19, 0x01	; 1
    3b1a:	40 e0       	ldi	r20, 0x00	; 0
    3b1c:	50 e0       	ldi	r21, 0x00	; 0
    3b1e:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
    3b22:	98 01       	movw	r18, r16
    3b24:	40 e0       	ldi	r20, 0x00	; 0
    3b26:	50 e0       	ldi	r21, 0x00	; 0
    3b28:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
    3b2c:	30 93 71 01 	sts	0x0171, r19
    3b30:	20 93 70 01 	sts	0x0170, r18
  lcd_line4();
  DisplayValue(lval.w[0],0,'x',4);
#endif

  // discharge capacitor again
  EntladePins();		// discharge capacitors
    3b34:	0e 94 b0 01 	call	0x360	; 0x360 <EntladePins>
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    3b38:	88 e0       	ldi	r24, 0x08	; 8
    3b3a:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    3b3c:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    3b3e:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    3b40:	15 b8       	out	0x05, r1	; 5
#endif
  return;
 } // end GetVdrop()
    3b42:	df 91       	pop	r29
    3b44:	cf 91       	pop	r28
    3b46:	1f 91       	pop	r17
    3b48:	0f 91       	pop	r16
    3b4a:	ff 90       	pop	r15
    3b4c:	ef 90       	pop	r14
    3b4e:	df 90       	pop	r13
    3b50:	cf 90       	pop	r12
    3b52:	08 95       	ret

00003b54 <Calibrate_UR>:
#include "Transistortester.h"
void Calibrate_UR(void) {
    3b54:	8f 92       	push	r8
    3b56:	9f 92       	push	r9
    3b58:	af 92       	push	r10
    3b5a:	bf 92       	push	r11
    3b5c:	cf 92       	push	r12
    3b5e:	df 92       	push	r13
    3b60:	ef 92       	push	r14
    3b62:	ff 92       	push	r15
    3b64:	0f 93       	push	r16
    3b66:	1f 93       	push	r17
    3b68:	cf 93       	push	r28
    3b6a:	df 93       	push	r29
  uint16_t u680;	// 3 * (Voltage at 680 Ohm)
 #endif


                                        //############################################
  ADCconfig.U_AVCC = U_VCC;     // set initial VCC Voltage
    3b6c:	88 e8       	ldi	r24, 0x88	; 136
    3b6e:	93 e1       	ldi	r25, 0x13	; 19
    3b70:	90 93 41 01 	sts	0x0141, r25
    3b74:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    3b78:	8e eb       	ldi	r24, 0xBE	; 190
    3b7a:	80 93 3c 01 	sts	0x013C, r24
#if FLASHEND > 0x1fff
  ADC_PORT = TXD_VAL;                   // switch to 0V
    3b7e:	08 e0       	ldi	r16, 0x08	; 8
    3b80:	08 b9       	out	0x08, r16	; 8
  ADC_DDR = (1<<TPREF) | TXD_MSK;       // switch pin with 2.5V reference to GND
    3b82:	88 e1       	ldi	r24, 0x18	; 24
    3b84:	87 b9       	out	0x07, r24	; 7
  wait1ms();
    3b86:	0e 94 71 14 	call	0x28e2	; 0x28e2 <wait1ms>
  ADC_DDR =  TXD_MSK;   // switch pin with reference back to input
    3b8a:	07 b9       	out	0x07, r16	; 7
  trans.uBE[1] = W5msReadADC(TPREF); // read voltage of 2.5V precision reference
    3b8c:	84 e0       	ldi	r24, 0x04	; 4
    3b8e:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
    3b92:	ec 01       	movw	r28, r24
    3b94:	90 93 5a 01 	sts	0x015A, r25
    3b98:	80 93 59 01 	sts	0x0159, r24
  if ((trans.uBE[1] > 2250) && (trans.uBE[1] < 2750)) {
    3b9c:	8b 5c       	subi	r24, 0xCB	; 203
    3b9e:	98 40       	sbci	r25, 0x08	; 8
    3ba0:	21 e0       	ldi	r18, 0x01	; 1
    3ba2:	83 3f       	cpi	r24, 0xF3	; 243
    3ba4:	92 07       	cpc	r25, r18
    3ba6:	c0 f4       	brcc	.+48     	; 0x3bd8 <Calibrate_UR+0x84>
     // precision voltage reference connected, update U_AVCC
     WithReference = 1;
    3ba8:	81 e0       	ldi	r24, 0x01	; 1
    3baa:	80 93 49 01 	sts	0x0149, r24
     ADCconfig.U_AVCC = (unsigned long)((unsigned long)ADCconfig.U_AVCC * 2495) / trans.uBE[1];
    3bae:	60 91 40 01 	lds	r22, 0x0140
    3bb2:	70 91 41 01 	lds	r23, 0x0141
    3bb6:	80 e0       	ldi	r24, 0x00	; 0
    3bb8:	90 e0       	ldi	r25, 0x00	; 0
    3bba:	2f eb       	ldi	r18, 0xBF	; 191
    3bbc:	39 e0       	ldi	r19, 0x09	; 9
    3bbe:	40 e0       	ldi	r20, 0x00	; 0
    3bc0:	50 e0       	ldi	r21, 0x00	; 0
    3bc2:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
    3bc6:	9e 01       	movw	r18, r28
    3bc8:	40 e0       	ldi	r20, 0x00	; 0
    3bca:	50 e0       	ldi	r21, 0x00	; 0
    3bcc:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
    3bd0:	30 93 41 01 	sts	0x0141, r19
    3bd4:	20 93 40 01 	sts	0x0140, r18
  }
#endif
 #ifdef WITH_AUTO_REF
  (void) ReadADC(MUX_INT_REF);	// read reference voltage 
    3bd8:	8e e0       	ldi	r24, 0x0E	; 14
    3bda:	0e 94 c4 1a 	call	0x3588	; 0x3588 <ReadADC>
  ref_mv = W5msReadADC(MUX_INT_REF);	// read reference voltage 
    3bde:	8e e0       	ldi	r24, 0x0E	; 14
    3be0:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
    3be4:	90 93 45 01 	sts	0x0145, r25
    3be8:	80 93 44 01 	sts	0x0144, r24
  RefVoltage();		//compute RHmultip = f(reference voltage)
    3bec:	0e 94 4b 02 	call	0x496	; 0x496 <RefVoltage>
 #else
  ref_mv = DEFAULT_BAND_GAP;    // set to default Reference Voltage
 #endif
  ADCconfig.U_Bandgap = ADC_internal_reference; // set internal reference voltage for ADC
    3bf0:	81 ec       	ldi	r24, 0xC1	; 193
    3bf2:	91 e0       	ldi	r25, 0x01	; 1
    3bf4:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__eerd_byte_m168>
    3bf8:	99 27       	eor	r25, r25
    3bfa:	87 fd       	sbrc	r24, 7
    3bfc:	90 95       	com	r25
    3bfe:	20 91 44 01 	lds	r18, 0x0144
    3c02:	30 91 45 01 	lds	r19, 0x0145
    3c06:	82 0f       	add	r24, r18
    3c08:	93 1f       	adc	r25, r19
    3c0a:	90 93 3f 01 	sts	0x013F, r25
    3c0e:	80 93 3e 01 	sts	0x013E, r24
                                        //############################################

 #ifdef AUTO_CAL
  // measurement of internal resistance of the ADC port outputs switched to GND
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    3c12:	79 e0       	ldi	r23, 0x09	; 9
    3c14:	d7 2e       	mov	r13, r23
    3c16:	d7 b8       	out	0x07, r13	; 7
  R_PORT = 1<<(TP1*2);		//R_L-PORT 1 to VCC
    3c18:	aa 24       	eor	r10, r10
    3c1a:	a3 94       	inc	r10
    3c1c:	a5 b8       	out	0x05, r10	; 5
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to VCC
    3c1e:	a4 b8       	out	0x04, r10	; 4
  sum_rm = W5msReadADC(TP1);
    3c20:	80 e0       	ldi	r24, 0x00	; 0
    3c22:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
    3c26:	8c 01       	movw	r16, r24

  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin 2 to output 0V
    3c28:	6a e0       	ldi	r22, 0x0A	; 10
    3c2a:	86 2e       	mov	r8, r22
    3c2c:	87 b8       	out	0x07, r8	; 7
  R_PORT =  1<<(TP2*2);		//R_L-PORT 2 to VCC
    3c2e:	54 e0       	ldi	r21, 0x04	; 4
    3c30:	c5 2e       	mov	r12, r21
    3c32:	c5 b8       	out	0x05, r12	; 5
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to VCC
    3c34:	c4 b8       	out	0x04, r12	; 4
  sum_rm += W5msReadADC(TP2);
    3c36:	81 e0       	ldi	r24, 0x01	; 1
    3c38:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
    3c3c:	08 0f       	add	r16, r24
    3c3e:	19 1f       	adc	r17, r25

  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin 3 to output 0V
    3c40:	4c e0       	ldi	r20, 0x0C	; 12
    3c42:	f4 2e       	mov	r15, r20
    3c44:	f7 b8       	out	0x07, r15	; 7
  R_PORT =  1<<(TP3*2);		//R_L-PORT 3 to VCC
    3c46:	30 e1       	ldi	r19, 0x10	; 16
    3c48:	e3 2e       	mov	r14, r19
    3c4a:	e5 b8       	out	0x05, r14	; 5
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to VCC
    3c4c:	e4 b8       	out	0x04, r14	; 4
  sum_rm += W5msReadADC(TP3);	//add all three values
    3c4e:	82 e0       	ldi	r24, 0x02	; 2
    3c50:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
    3c54:	08 0f       	add	r16, r24
    3c56:	19 1f       	adc	r17, r25

  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
    3c58:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
    3c5a:	d8 b8       	out	0x08, r13	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    3c5c:	d7 b8       	out	0x07, r13	; 7
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
    3c5e:	a4 b8       	out	0x04, r10	; 4
  sum_rp = ADCconfig.U_AVCC - W5msReadADC(TP1);
    3c60:	c0 91 40 01 	lds	r28, 0x0140
    3c64:	d0 91 41 01 	lds	r29, 0x0141
    3c68:	80 e0       	ldi	r24, 0x00	; 0
    3c6a:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
    3c6e:	5c 01       	movw	r10, r24
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
    3c70:	88 b8       	out	0x08, r8	; 8
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
    3c72:	87 b8       	out	0x07, r8	; 7
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
    3c74:	c4 b8       	out	0x04, r12	; 4
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP2);
    3c76:	c0 90 40 01 	lds	r12, 0x0140
    3c7a:	d0 90 41 01 	lds	r13, 0x0141
    3c7e:	81 e0       	ldi	r24, 0x01	; 1
    3c80:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
    3c84:	4c 01       	movw	r8, r24

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
    3c86:	f8 b8       	out	0x08, r15	; 8
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
    3c88:	f7 b8       	out	0x07, r15	; 7
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
    3c8a:	e4 b8       	out	0x04, r14	; 4
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP3);
    3c8c:	e0 90 40 01 	lds	r14, 0x0140
    3c90:	f0 90 41 01 	lds	r15, 0x0141
    3c94:	82 e0       	ldi	r24, 0x02	; 2
    3c96:	0e 94 be 1a 	call	0x357c	; 0x357c <W5msReadADC>
  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
  sum_rp = ADCconfig.U_AVCC - W5msReadADC(TP1);
    3c9a:	cc 0d       	add	r28, r12
    3c9c:	dd 1d       	adc	r29, r13
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP2);
    3c9e:	ce 0d       	add	r28, r14
    3ca0:	df 1d       	adc	r29, r15
    3ca2:	c8 1b       	sub	r28, r24
    3ca4:	d9 0b       	sbc	r29, r25

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP3);
    3ca6:	ca 19       	sub	r28, r10
    3ca8:	db 09       	sbc	r29, r11
    3caa:	c8 19       	sub	r28, r8
    3cac:	d9 09       	sbc	r29, r9

  u680 = ((ADCconfig.U_AVCC * 3) - sum_rm - sum_rp);	//three times the voltage at the 680 Ohm
    3cae:	80 91 40 01 	lds	r24, 0x0140
    3cb2:	90 91 41 01 	lds	r25, 0x0141
    3cb6:	6c 01       	movw	r12, r24
    3cb8:	cc 0c       	add	r12, r12
    3cba:	dd 1c       	adc	r13, r13
    3cbc:	c8 0e       	add	r12, r24
    3cbe:	d9 1e       	adc	r13, r25
    3cc0:	c0 1a       	sub	r12, r16
    3cc2:	d1 0a       	sbc	r13, r17
    3cc4:	cc 1a       	sub	r12, r28
    3cc6:	dd 0a       	sbc	r13, r29
  pin_rmi = (unsigned long)((unsigned long)sum_rm * (unsigned long)R_L_VAL) / (unsigned long)u680;
    3cc8:	ee 24       	eor	r14, r14
    3cca:	ff 24       	eor	r15, r15
    3ccc:	b8 01       	movw	r22, r16
    3cce:	80 e0       	ldi	r24, 0x00	; 0
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	20 e9       	ldi	r18, 0x90	; 144
    3cd4:	3a e1       	ldi	r19, 0x1A	; 26
    3cd6:	40 e0       	ldi	r20, 0x00	; 0
    3cd8:	50 e0       	ldi	r21, 0x00	; 0
    3cda:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
    3cde:	a7 01       	movw	r20, r14
    3ce0:	96 01       	movw	r18, r12
    3ce2:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
    3ce6:	89 01       	movw	r16, r18
    3ce8:	30 93 48 01 	sts	0x0148, r19
    3cec:	20 93 47 01 	sts	0x0147, r18
//  adcmv[2] = pin_rm;	// for last output in row 2
  pin_rpl = (unsigned long)((unsigned long)sum_rp * (unsigned long)R_L_VAL) / (unsigned long)u680;
    3cf0:	be 01       	movw	r22, r28
    3cf2:	80 e0       	ldi	r24, 0x00	; 0
    3cf4:	90 e0       	ldi	r25, 0x00	; 0
    3cf6:	20 e9       	ldi	r18, 0x90	; 144
    3cf8:	3a e1       	ldi	r19, 0x1A	; 26
    3cfa:	40 e0       	ldi	r20, 0x00	; 0
    3cfc:	50 e0       	ldi	r21, 0x00	; 0
    3cfe:	0e 94 ad 1e 	call	0x3d5a	; 0x3d5a <__mulsi3>
    3d02:	a7 01       	movw	r20, r14
    3d04:	96 01       	movw	r18, r12
    3d06:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodsi4>
    3d0a:	c9 01       	movw	r24, r18
    3d0c:	30 93 43 01 	sts	0x0143, r19
    3d10:	20 93 42 01 	sts	0x0142, r18
  if ((pin_rpl < 280) && (pin_rmi < 250)) {
    3d14:	21 e0       	ldi	r18, 0x01	; 1
    3d16:	88 31       	cpi	r24, 0x18	; 24
    3d18:	92 07       	cpc	r25, r18
    3d1a:	78 f4       	brcc	.+30     	; 0x3d3a <Calibrate_UR+0x1e6>
    3d1c:	0a 3f       	cpi	r16, 0xFA	; 250
    3d1e:	11 05       	cpc	r17, r1
    3d20:	60 f4       	brcc	.+24     	; 0x3d3a <Calibrate_UR+0x1e6>
     // rp is below 28 Ohm and rm is below 25 Ohm
     resis680pl = pin_rpl + R_L_VAL;
    3d22:	80 57       	subi	r24, 0x70	; 112
    3d24:	95 4e       	sbci	r25, 0xE5	; 229
    3d26:	90 93 09 01 	sts	0x0109, r25
    3d2a:	80 93 08 01 	sts	0x0108, r24
     resis680mi = pin_rmi + R_L_VAL;
    3d2e:	00 57       	subi	r16, 0x70	; 112
    3d30:	15 4e       	sbci	r17, 0xE5	; 229
    3d32:	10 93 03 01 	sts	0x0103, r17
    3d36:	00 93 02 01 	sts	0x0102, r16
  }
#endif

  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    3d3a:	89 e1       	ldi	r24, 0x19	; 25
    3d3c:	80 93 3c 01 	sts	0x013C, r24
 } 
    3d40:	df 91       	pop	r29
    3d42:	cf 91       	pop	r28
    3d44:	1f 91       	pop	r17
    3d46:	0f 91       	pop	r16
    3d48:	ff 90       	pop	r15
    3d4a:	ef 90       	pop	r14
    3d4c:	df 90       	pop	r13
    3d4e:	cf 90       	pop	r12
    3d50:	bf 90       	pop	r11
    3d52:	af 90       	pop	r10
    3d54:	9f 90       	pop	r9
    3d56:	8f 90       	pop	r8
    3d58:	08 95       	ret

00003d5a <__mulsi3>:
    3d5a:	62 9f       	mul	r22, r18
    3d5c:	d0 01       	movw	r26, r0
    3d5e:	73 9f       	mul	r23, r19
    3d60:	f0 01       	movw	r30, r0
    3d62:	82 9f       	mul	r24, r18
    3d64:	e0 0d       	add	r30, r0
    3d66:	f1 1d       	adc	r31, r1
    3d68:	64 9f       	mul	r22, r20
    3d6a:	e0 0d       	add	r30, r0
    3d6c:	f1 1d       	adc	r31, r1
    3d6e:	92 9f       	mul	r25, r18
    3d70:	f0 0d       	add	r31, r0
    3d72:	83 9f       	mul	r24, r19
    3d74:	f0 0d       	add	r31, r0
    3d76:	74 9f       	mul	r23, r20
    3d78:	f0 0d       	add	r31, r0
    3d7a:	65 9f       	mul	r22, r21
    3d7c:	f0 0d       	add	r31, r0
    3d7e:	99 27       	eor	r25, r25
    3d80:	72 9f       	mul	r23, r18
    3d82:	b0 0d       	add	r27, r0
    3d84:	e1 1d       	adc	r30, r1
    3d86:	f9 1f       	adc	r31, r25
    3d88:	63 9f       	mul	r22, r19
    3d8a:	b0 0d       	add	r27, r0
    3d8c:	e1 1d       	adc	r30, r1
    3d8e:	f9 1f       	adc	r31, r25
    3d90:	bd 01       	movw	r22, r26
    3d92:	cf 01       	movw	r24, r30
    3d94:	11 24       	eor	r1, r1
    3d96:	08 95       	ret

00003d98 <__udivmodqi4>:
    3d98:	99 1b       	sub	r25, r25
    3d9a:	79 e0       	ldi	r23, 0x09	; 9
    3d9c:	04 c0       	rjmp	.+8      	; 0x3da6 <__udivmodqi4_ep>

00003d9e <__udivmodqi4_loop>:
    3d9e:	99 1f       	adc	r25, r25
    3da0:	96 17       	cp	r25, r22
    3da2:	08 f0       	brcs	.+2      	; 0x3da6 <__udivmodqi4_ep>
    3da4:	96 1b       	sub	r25, r22

00003da6 <__udivmodqi4_ep>:
    3da6:	88 1f       	adc	r24, r24
    3da8:	7a 95       	dec	r23
    3daa:	c9 f7       	brne	.-14     	; 0x3d9e <__udivmodqi4_loop>
    3dac:	80 95       	com	r24
    3dae:	08 95       	ret

00003db0 <__udivmodhi4>:
    3db0:	aa 1b       	sub	r26, r26
    3db2:	bb 1b       	sub	r27, r27
    3db4:	51 e1       	ldi	r21, 0x11	; 17
    3db6:	07 c0       	rjmp	.+14     	; 0x3dc6 <__udivmodhi4_ep>

00003db8 <__udivmodhi4_loop>:
    3db8:	aa 1f       	adc	r26, r26
    3dba:	bb 1f       	adc	r27, r27
    3dbc:	a6 17       	cp	r26, r22
    3dbe:	b7 07       	cpc	r27, r23
    3dc0:	10 f0       	brcs	.+4      	; 0x3dc6 <__udivmodhi4_ep>
    3dc2:	a6 1b       	sub	r26, r22
    3dc4:	b7 0b       	sbc	r27, r23

00003dc6 <__udivmodhi4_ep>:
    3dc6:	88 1f       	adc	r24, r24
    3dc8:	99 1f       	adc	r25, r25
    3dca:	5a 95       	dec	r21
    3dcc:	a9 f7       	brne	.-22     	; 0x3db8 <__udivmodhi4_loop>
    3dce:	80 95       	com	r24
    3dd0:	90 95       	com	r25
    3dd2:	bc 01       	movw	r22, r24
    3dd4:	cd 01       	movw	r24, r26
    3dd6:	08 95       	ret

00003dd8 <__udivmodsi4>:
    3dd8:	a1 e2       	ldi	r26, 0x21	; 33
    3dda:	1a 2e       	mov	r1, r26
    3ddc:	aa 1b       	sub	r26, r26
    3dde:	bb 1b       	sub	r27, r27
    3de0:	fd 01       	movw	r30, r26
    3de2:	0d c0       	rjmp	.+26     	; 0x3dfe <__udivmodsi4_ep>

00003de4 <__udivmodsi4_loop>:
    3de4:	aa 1f       	adc	r26, r26
    3de6:	bb 1f       	adc	r27, r27
    3de8:	ee 1f       	adc	r30, r30
    3dea:	ff 1f       	adc	r31, r31
    3dec:	a2 17       	cp	r26, r18
    3dee:	b3 07       	cpc	r27, r19
    3df0:	e4 07       	cpc	r30, r20
    3df2:	f5 07       	cpc	r31, r21
    3df4:	20 f0       	brcs	.+8      	; 0x3dfe <__udivmodsi4_ep>
    3df6:	a2 1b       	sub	r26, r18
    3df8:	b3 0b       	sbc	r27, r19
    3dfa:	e4 0b       	sbc	r30, r20
    3dfc:	f5 0b       	sbc	r31, r21

00003dfe <__udivmodsi4_ep>:
    3dfe:	66 1f       	adc	r22, r22
    3e00:	77 1f       	adc	r23, r23
    3e02:	88 1f       	adc	r24, r24
    3e04:	99 1f       	adc	r25, r25
    3e06:	1a 94       	dec	r1
    3e08:	69 f7       	brne	.-38     	; 0x3de4 <__udivmodsi4_loop>
    3e0a:	60 95       	com	r22
    3e0c:	70 95       	com	r23
    3e0e:	80 95       	com	r24
    3e10:	90 95       	com	r25
    3e12:	9b 01       	movw	r18, r22
    3e14:	ac 01       	movw	r20, r24
    3e16:	bd 01       	movw	r22, r26
    3e18:	cf 01       	movw	r24, r30
    3e1a:	08 95       	ret

00003e1c <__divmodsi4>:
    3e1c:	97 fb       	bst	r25, 7
    3e1e:	09 2e       	mov	r0, r25
    3e20:	05 26       	eor	r0, r21
    3e22:	0e d0       	rcall	.+28     	; 0x3e40 <__divmodsi4_neg1>
    3e24:	57 fd       	sbrc	r21, 7
    3e26:	04 d0       	rcall	.+8      	; 0x3e30 <__divmodsi4_neg2>
    3e28:	d7 df       	rcall	.-82     	; 0x3dd8 <__udivmodsi4>
    3e2a:	0a d0       	rcall	.+20     	; 0x3e40 <__divmodsi4_neg1>
    3e2c:	00 1c       	adc	r0, r0
    3e2e:	38 f4       	brcc	.+14     	; 0x3e3e <__divmodsi4_exit>

00003e30 <__divmodsi4_neg2>:
    3e30:	50 95       	com	r21
    3e32:	40 95       	com	r20
    3e34:	30 95       	com	r19
    3e36:	21 95       	neg	r18
    3e38:	3f 4f       	sbci	r19, 0xFF	; 255
    3e3a:	4f 4f       	sbci	r20, 0xFF	; 255
    3e3c:	5f 4f       	sbci	r21, 0xFF	; 255

00003e3e <__divmodsi4_exit>:
    3e3e:	08 95       	ret

00003e40 <__divmodsi4_neg1>:
    3e40:	f6 f7       	brtc	.-4      	; 0x3e3e <__divmodsi4_exit>
    3e42:	90 95       	com	r25
    3e44:	80 95       	com	r24
    3e46:	70 95       	com	r23
    3e48:	61 95       	neg	r22
    3e4a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e4c:	8f 4f       	sbci	r24, 0xFF	; 255
    3e4e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e50:	08 95       	ret

00003e52 <itoa>:
    3e52:	fb 01       	movw	r30, r22
    3e54:	9f 01       	movw	r18, r30
    3e56:	e8 94       	clt
    3e58:	42 30       	cpi	r20, 0x02	; 2
    3e5a:	c4 f0       	brlt	.+48     	; 0x3e8c <itoa+0x3a>
    3e5c:	45 32       	cpi	r20, 0x25	; 37
    3e5e:	b4 f4       	brge	.+44     	; 0x3e8c <itoa+0x3a>
    3e60:	4a 30       	cpi	r20, 0x0A	; 10
    3e62:	29 f4       	brne	.+10     	; 0x3e6e <itoa+0x1c>
    3e64:	97 fb       	bst	r25, 7
    3e66:	1e f4       	brtc	.+6      	; 0x3e6e <itoa+0x1c>
    3e68:	90 95       	com	r25
    3e6a:	81 95       	neg	r24
    3e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e6e:	64 2f       	mov	r22, r20
    3e70:	77 27       	eor	r23, r23
    3e72:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <__udivmodhi4>
    3e76:	80 5d       	subi	r24, 0xD0	; 208
    3e78:	8a 33       	cpi	r24, 0x3A	; 58
    3e7a:	0c f0       	brlt	.+2      	; 0x3e7e <itoa+0x2c>
    3e7c:	89 5d       	subi	r24, 0xD9	; 217
    3e7e:	81 93       	st	Z+, r24
    3e80:	cb 01       	movw	r24, r22
    3e82:	00 97       	sbiw	r24, 0x00	; 0
    3e84:	a1 f7       	brne	.-24     	; 0x3e6e <itoa+0x1c>
    3e86:	16 f4       	brtc	.+4      	; 0x3e8c <itoa+0x3a>
    3e88:	5d e2       	ldi	r21, 0x2D	; 45
    3e8a:	51 93       	st	Z+, r21
    3e8c:	10 82       	st	Z, r1
    3e8e:	c9 01       	movw	r24, r18
    3e90:	0c 94 81 1f 	jmp	0x3f02	; 0x3f02 <strrev>

00003e94 <utoa>:
    3e94:	fb 01       	movw	r30, r22
    3e96:	9f 01       	movw	r18, r30
    3e98:	42 30       	cpi	r20, 0x02	; 2
    3e9a:	74 f0       	brlt	.+28     	; 0x3eb8 <utoa+0x24>
    3e9c:	45 32       	cpi	r20, 0x25	; 37
    3e9e:	64 f4       	brge	.+24     	; 0x3eb8 <utoa+0x24>
    3ea0:	64 2f       	mov	r22, r20
    3ea2:	77 27       	eor	r23, r23
    3ea4:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <__udivmodhi4>
    3ea8:	80 5d       	subi	r24, 0xD0	; 208
    3eaa:	8a 33       	cpi	r24, 0x3A	; 58
    3eac:	0c f0       	brlt	.+2      	; 0x3eb0 <utoa+0x1c>
    3eae:	89 5d       	subi	r24, 0xD9	; 217
    3eb0:	81 93       	st	Z+, r24
    3eb2:	cb 01       	movw	r24, r22
    3eb4:	00 97       	sbiw	r24, 0x00	; 0
    3eb6:	a1 f7       	brne	.-24     	; 0x3ea0 <utoa+0xc>
    3eb8:	10 82       	st	Z, r1
    3eba:	c9 01       	movw	r24, r18
    3ebc:	0c 94 81 1f 	jmp	0x3f02	; 0x3f02 <strrev>

00003ec0 <__eerd_byte_m168>:
    3ec0:	f9 99       	sbic	0x1f, 1	; 31
    3ec2:	fe cf       	rjmp	.-4      	; 0x3ec0 <__eerd_byte_m168>
    3ec4:	92 bd       	out	0x22, r25	; 34
    3ec6:	81 bd       	out	0x21, r24	; 33
    3ec8:	f8 9a       	sbi	0x1f, 0	; 31
    3eca:	99 27       	eor	r25, r25
    3ecc:	80 b5       	in	r24, 0x20	; 32
    3ece:	08 95       	ret

00003ed0 <__eerd_word_m168>:
    3ed0:	a8 e1       	ldi	r26, 0x18	; 24
    3ed2:	b0 e0       	ldi	r27, 0x00	; 0
    3ed4:	42 e0       	ldi	r20, 0x02	; 2
    3ed6:	50 e0       	ldi	r21, 0x00	; 0
    3ed8:	0c 94 93 1f 	jmp	0x3f26	; 0x3f26 <__eerd_blraw_m168>

00003edc <__eewr_byte_m168>:
    3edc:	26 2f       	mov	r18, r22

00003ede <__eewr_r18_m168>:
    3ede:	f9 99       	sbic	0x1f, 1	; 31
    3ee0:	fe cf       	rjmp	.-4      	; 0x3ede <__eewr_r18_m168>
    3ee2:	1f ba       	out	0x1f, r1	; 31
    3ee4:	92 bd       	out	0x22, r25	; 34
    3ee6:	81 bd       	out	0x21, r24	; 33
    3ee8:	20 bd       	out	0x20, r18	; 32
    3eea:	0f b6       	in	r0, 0x3f	; 63
    3eec:	f8 94       	cli
    3eee:	fa 9a       	sbi	0x1f, 2	; 31
    3ef0:	f9 9a       	sbi	0x1f, 1	; 31
    3ef2:	0f be       	out	0x3f, r0	; 63
    3ef4:	01 96       	adiw	r24, 0x01	; 1
    3ef6:	08 95       	ret

00003ef8 <__eewr_word_m168>:
    3ef8:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__eewr_byte_m168>
    3efc:	27 2f       	mov	r18, r23
    3efe:	0c 94 6f 1f 	jmp	0x3ede	; 0x3ede <__eewr_r18_m168>

00003f02 <strrev>:
    3f02:	dc 01       	movw	r26, r24
    3f04:	fc 01       	movw	r30, r24
    3f06:	67 2f       	mov	r22, r23
    3f08:	71 91       	ld	r23, Z+
    3f0a:	77 23       	and	r23, r23
    3f0c:	e1 f7       	brne	.-8      	; 0x3f06 <strrev+0x4>
    3f0e:	32 97       	sbiw	r30, 0x02	; 2
    3f10:	04 c0       	rjmp	.+8      	; 0x3f1a <strrev+0x18>
    3f12:	7c 91       	ld	r23, X
    3f14:	6d 93       	st	X+, r22
    3f16:	70 83       	st	Z, r23
    3f18:	62 91       	ld	r22, -Z
    3f1a:	ae 17       	cp	r26, r30
    3f1c:	bf 07       	cpc	r27, r31
    3f1e:	c8 f3       	brcs	.-14     	; 0x3f12 <strrev+0x10>
    3f20:	08 95       	ret

00003f22 <__eerd_block_m168>:
    3f22:	dc 01       	movw	r26, r24
    3f24:	cb 01       	movw	r24, r22

00003f26 <__eerd_blraw_m168>:
    3f26:	fc 01       	movw	r30, r24
    3f28:	f9 99       	sbic	0x1f, 1	; 31
    3f2a:	fe cf       	rjmp	.-4      	; 0x3f28 <__eerd_blraw_m168+0x2>
    3f2c:	06 c0       	rjmp	.+12     	; 0x3f3a <__eerd_blraw_m168+0x14>
    3f2e:	f2 bd       	out	0x22, r31	; 34
    3f30:	e1 bd       	out	0x21, r30	; 33
    3f32:	f8 9a       	sbi	0x1f, 0	; 31
    3f34:	31 96       	adiw	r30, 0x01	; 1
    3f36:	00 b4       	in	r0, 0x20	; 32
    3f38:	0d 92       	st	X+, r0
    3f3a:	41 50       	subi	r20, 0x01	; 1
    3f3c:	50 40       	sbci	r21, 0x00	; 0
    3f3e:	b8 f7       	brcc	.-18     	; 0x3f2e <__eerd_blraw_m168+0x8>
    3f40:	08 95       	ret

00003f42 <_exit>:
    3f42:	f8 94       	cli

00003f44 <__stop_program>:
    3f44:	ff cf       	rjmp	.-2      	; 0x3f44 <__stop_program>
