
TransistorTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00003db0  00003e64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003db0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000082  00800102  00800102  00003e66  2**0
                  ALLOC
  3 .eeprom       000001c1  00810000  00810000  00003e66  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         00000dbc  00000000  00000000  00004028  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001d2  00000000  00000000  00004de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000000c0  00000000  00000000  00004fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000711  00000000  00000000  00005076  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000027fd  00000000  00000000  00005787  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000007bc  00000000  00000000  00007f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000360b  00000000  00000000  00008740  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000280  00000000  00000000  0000bd4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000894  00000000  00000000  0000bfcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000133a  00000000  00000000  0000c860  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 0000021a  00000000  00000000  0000db9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__ctors_end>
       4:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
       8:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
       c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      10:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      14:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      18:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      1c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__vector_7>
      20:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      24:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      28:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      2c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      30:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      34:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      38:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      3c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      40:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      44:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      48:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      4c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      50:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      54:	0c 94 aa 01 	jmp	0x354	; 0x354 <__vector_21>
      58:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      5c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      60:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      64:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>

00000068 <LogTab>:
      68:	00 01 02 03 04 05 06 07 08 09 0b 0c 0d 0e 0f 10     ................
      78:	11 13 14 15 16 18 19 1a 1b 1d 1e 1f 21 22 24 25     ............!"$%
      88:	27 28 2a 2b 2d 2e 30 31 33 35 36 38 3a 3c 3e 3f     '(*+-.013568:<>?
      98:	41 43 45 47 49 4c 4e 50 52 54 57 59 5c 5e 61 63     ACEGILNPRTWY\^ac
      a8:	66 69 6c 6f 72 75 78 7c 7f 83 87 8b 8f 93 97 9c     filorux|........
      b8:	a1 a6 ab b1 b7 be c5 cc d4 dd e6 f1                 ............

000000c4 <SELFTEST>:
      c4:	53 65 6c 66 74 65 73 74 20 6d 6f 64 65 2e 2e 00     Selftest mode...

000000d4 <RELPROBE>:
      d4:	69 73 6f 6c 61 74 65 20 50 72 6f 62 65 21 00        isolate Probe!.

000000e3 <URefT>:
      e3:	52 65 66 3d 00                                      Ref=.

000000e8 <RHfakt>:
      e8:	52 48 66 3d 00                                      RHf=.

000000ed <RH1L>:
      ed:	52 48 2d 00                                         RH-.

000000f1 <RH1H>:
      f1:	52 48 2b 00                                         RH+.

000000f5 <RLRL>:
      f5:	2b 52 4c 2d 20 31 32 20 31 33 20 32 33 00           +RL- 12 13 23.

00000103 <RHRH>:
     103:	2b 52 48 2d 20 31 32 20 31 33 20 32 33 00           +RH- 12 13 23.

00000111 <RHRL>:
     111:	52 48 2f 52 4c 00                                   RH/RL.

00000117 <T50HZ>:
     117:	20 35 30 48 7a 00 00                                 50Hz..

0000011e <__ctors_end>:
     11e:	11 24       	eor	r1, r1
     120:	1f be       	out	0x3f, r1	; 63
     122:	cf ef       	ldi	r28, 0xFF	; 255
     124:	d4 e0       	ldi	r29, 0x04	; 4
     126:	de bf       	out	0x3e, r29	; 62
     128:	cd bf       	out	0x3d, r28	; 61

0000012a <__do_copy_data>:
     12a:	11 e0       	ldi	r17, 0x01	; 1
     12c:	a0 e0       	ldi	r26, 0x00	; 0
     12e:	b1 e0       	ldi	r27, 0x01	; 1
     130:	e0 eb       	ldi	r30, 0xB0	; 176
     132:	fd e3       	ldi	r31, 0x3D	; 61
     134:	02 c0       	rjmp	.+4      	; 0x13a <__do_copy_data+0x10>
     136:	05 90       	lpm	r0, Z+
     138:	0d 92       	st	X+, r0
     13a:	a2 30       	cpi	r26, 0x02	; 2
     13c:	b1 07       	cpc	r27, r17
     13e:	d9 f7       	brne	.-10     	; 0x136 <__do_copy_data+0xc>

00000140 <__do_clear_bss>:
     140:	11 e0       	ldi	r17, 0x01	; 1
     142:	a2 e0       	ldi	r26, 0x02	; 2
     144:	b1 e0       	ldi	r27, 0x01	; 1
     146:	01 c0       	rjmp	.+2      	; 0x14a <.do_clear_bss_start>

00000148 <.do_clear_bss_loop>:
     148:	1d 92       	st	X+, r1

0000014a <.do_clear_bss_start>:
     14a:	a4 38       	cpi	r26, 0x84	; 132
     14c:	b1 07       	cpc	r27, r17
     14e:	e1 f7       	brne	.-8      	; 0x148 <.do_clear_bss_loop>
     150:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <main>
     154:	0c 94 d6 1e 	jmp	0x3dac	; 0x3dac <_exit>

00000158 <__bad_interrupt>:
     158:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000015c <lcd_data>:
void lcd_space(void) {
   lcd_data(' ');
}

// sends data byte to the LCD 
void lcd_data(unsigned char temp1) {
     15c:	1f 93       	push	r17
     15e:	18 2f       	mov	r17, r24
 lcd_write_data(temp1);		// set RS to 1
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	61 2f       	mov	r22, r17
     164:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
     168:	0e 94 23 15 	call	0x2a46	; 0x2a46 <wait50us>
#ifdef WITH_UART
 switch(temp1) {
     16c:	18 30       	cpi	r17, 0x08	; 8
     16e:	48 f4       	brcc	.+18     	; 0x182 <lcd_data+0x26>
     170:	16 30       	cpi	r17, 0x06	; 6
     172:	d0 f4       	brcc	.+52     	; 0x1a8 <lcd_data+0x4c>
     174:	12 30       	cpi	r17, 0x02	; 2
     176:	71 f0       	breq	.+28     	; 0x194 <lcd_data+0x38>
     178:	13 30       	cpi	r17, 0x03	; 3
     17a:	89 f0       	breq	.+34     	; 0x19e <lcd_data+0x42>
     17c:	11 30       	cpi	r17, 0x01	; 1
     17e:	d1 f4       	brne	.+52     	; 0x1b4 <lcd_data+0x58>
     180:	07 c0       	rjmp	.+14     	; 0x190 <lcd_data+0x34>
     182:	14 3e       	cpi	r17, 0xE4	; 228
     184:	a9 f0       	breq	.+42     	; 0x1b0 <lcd_data+0x54>
     186:	14 3f       	cpi	r17, 0xF4	; 244
     188:	c1 f0       	breq	.+48     	; 0x1ba <lcd_data+0x5e>
     18a:	11 3e       	cpi	r17, 0xE1	; 225
     18c:	99 f4       	brne	.+38     	; 0x1b4 <lcd_data+0x58>
     18e:	0e c0       	rjmp	.+28     	; 0x1ac <lcd_data+0x50>
    case LCD_CHAR_DIODE1:
    	uart_putc('>');
     190:	8e e3       	ldi	r24, 0x3E	; 62
     192:	06 c0       	rjmp	.+12     	; 0x1a0 <lcd_data+0x44>
    	uart_putc('|');
    	break;
    case LCD_CHAR_DIODE2:
    	uart_putc('|');
     194:	8c e7       	ldi	r24, 0x7C	; 124
     196:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <uart_putc>
    	uart_putc('<');
     19a:	8c e3       	ldi	r24, 0x3C	; 60
     19c:	0c c0       	rjmp	.+24     	; 0x1b6 <lcd_data+0x5a>
    	break;
    case LCD_CHAR_CAP:
    	uart_putc('|');
     19e:	8c e7       	ldi	r24, 0x7C	; 124
     1a0:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <uart_putc>
    	uart_putc('|');
     1a4:	8c e7       	ldi	r24, 0x7C	; 124
     1a6:	07 c0       	rjmp	.+14     	; 0x1b6 <lcd_data+0x5a>
    	break;
    case LCD_CHAR_RESIS1:
    case LCD_CHAR_RESIS2:
    	uart_putc('R');
     1a8:	82 e5       	ldi	r24, 0x52	; 82
     1aa:	05 c0       	rjmp	.+10     	; 0x1b6 <lcd_data+0x5a>
    	break;
    case 225:	//ä
    	uart_putc('ä');
     1ac:	84 ee       	ldi	r24, 0xE4	; 228
     1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <lcd_data+0x5a>
    	break;
    case 228:	//µ
    	uart_putc('µ');
     1b0:	85 eb       	ldi	r24, 0xB5	; 181
     1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <lcd_data+0x5a>
    	break;
    case 244:	//Omega
    	break;
    default:
    	uart_putc(temp1);
     1b4:	81 2f       	mov	r24, r17
     1b6:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <uart_putc>
 }
#endif
}
     1ba:	1f 91       	pop	r17
     1bc:	08 95       	ret

000001be <lcd_space>:
   lcd_data(temp + '1');
}

// send space character to LCD
void lcd_space(void) {
   lcd_data(' ');
     1be:	80 e2       	ldi	r24, 0x20	; 32
     1c0:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
}
     1c4:	08 95       	ret

000001c6 <lcd_testpin>:
 

// sends numeric character (Pin Number) to the LCD 
// from binary 0 we send ASCII 1 ....
void lcd_testpin(unsigned char temp) {
   lcd_data(temp + '1');
     1c6:	8f 5c       	subi	r24, 0xCF	; 207
     1c8:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
}
     1cc:	08 95       	ret

000001ce <uart_newline>:
}


#ifdef WITH_UART
void uart_newline(void) {
   uart_putc('\r');
     1ce:	8d e0       	ldi	r24, 0x0D	; 13
     1d0:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <uart_putc>
   uart_putc('\n');
     1d4:	8a e0       	ldi	r24, 0x0A	; 10
     1d6:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <uart_putc>
}
     1da:	08 95       	ret

000001dc <lcd_command>:
#endif
}
 
// sends a command to the LCD
 
void lcd_command(unsigned char temp1) {
     1dc:	1f 93       	push	r17
     1de:	18 2f       	mov	r17, r24
        lcd_write_cmd(temp1);		// set RS to 0
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	61 2f       	mov	r22, r17
     1e4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
     1e8:	0e 94 23 15 	call	0x2a46	; 0x2a46 <wait50us>
#ifdef WITH_UART
	if((temp1 == 0x80) || (temp1 == 0xC0)) {
     1ec:	10 38       	cpi	r17, 0x80	; 128
     1ee:	11 f0       	breq	.+4      	; 0x1f4 <lcd_command+0x18>
     1f0:	10 3c       	cpi	r17, 0xC0	; 192
     1f2:	11 f4       	brne	.+4      	; 0x1f8 <lcd_command+0x1c>
		uart_newline();
     1f4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <uart_newline>
	}
#endif
}
     1f8:	1f 91       	pop	r17
     1fa:	08 95       	ret

000001fc <lcd_clear>:
}
 
// send the command to clear the display 
 
void lcd_clear(void) {
   lcd_command(CLEAR_DISPLAY);
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
   wait10ms();
     202:	0e 94 18 15 	call	0x2a30	; 0x2a30 <wait10ms>
#ifdef WITH_UART
   uart_newline();
     206:	0e 94 e7 00 	call	0x1ce	; 0x1ce <uart_newline>
#endif
   lcd_line1();			// set cursor to Line1 Column 1, (only for OLED-Display)
     20a:	80 e8       	ldi	r24, 0x80	; 128
     20c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
}
     210:	08 95       	ret

00000212 <lcd_init>:
 
// Initialise: 
// Must be called first .
 
void lcd_init(void) {
   wait30ms();
     212:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <wait30ms>
   // to initialise, send 3 times to be shure to be in 8 Bit mode
   lcd_write_init(1);
     216:	80 e8       	ldi	r24, 0x80	; 128
     218:	60 e3       	ldi	r22, 0x30	; 48
     21a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait5ms();
     21e:	0e 94 19 15 	call	0x2a32	; 0x2a32 <wait5ms>
   
   lcd_write_init(1);
     222:	80 e8       	ldi	r24, 0x80	; 128
     224:	60 e3       	ldi	r22, 0x30	; 48
     226:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait1ms();
     22a:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <wait1ms>

   lcd_write_init(1);
     22e:	80 e8       	ldi	r24, 0x80	; 128
     230:	60 e3       	ldi	r22, 0x30	; 48
     232:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait1ms();
     236:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <wait1ms>

   lcd_write_init(0);		// switch to 4 Bit mode
     23a:	80 e8       	ldi	r24, 0x80	; 128
     23c:	60 e2       	ldi	r22, 0x20	; 32
     23e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait10ms();
     242:	0e 94 18 15 	call	0x2a30	; 0x2a30 <wait10ms>

   // 4Bit / 2 rows / 5x7
   lcd_command(CMD_SetIFOptions | 0x08);
     246:	88 e2       	ldi	r24, 0x28	; 40
     248:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>

   // Display on / Cursor off / no Blinking
   lcd_command(CMD_SetDisplayAndCursor | 0x04);
     24c:	8c e0       	ldi	r24, 0x0C	; 12
     24e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>

   // increment / no Scroll    
   lcd_command(CMD_SetEntryMode | 0x02);	
     252:	86 e0       	ldi	r24, 0x06	; 6
     254:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
   lcd_clear();
     258:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_clear>
}
     25c:	08 95       	ret

0000025e <lcd_string>:
#endif
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
     25e:	ef 92       	push	r14
     260:	ff 92       	push	r15
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	e8 2e       	mov	r14, r24
     268:	e7 01       	movw	r28, r14
     26a:	7e 01       	movw	r14, r28
     26c:	f9 2e       	mov	r15, r25
     26e:	e7 01       	movw	r28, r14
    while(*data) {
     270:	02 c0       	rjmp	.+4      	; 0x276 <lcd_string+0x18>
        lcd_data(*data);
     272:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
    while(*data) {
     276:	89 91       	ld	r24, Y+
     278:	88 23       	and	r24, r24
     27a:	d9 f7       	brne	.-10     	; 0x272 <lcd_string+0x14>
        lcd_data(*data);
        data++;
    }
}
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	ff 90       	pop	r15
     282:	ef 90       	pop	r14
     284:	08 95       	ret

00000286 <lcd_pgm_string>:

#ifdef use_lcd_pgm
//Load string from PGM  and send to LCD 
void lcd_pgm_string(const unsigned char *data) {
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = pgm_read_byte(data);
     28c:	fe 01       	movw	r30, r28
     28e:	84 91       	lpm	r24, Z+
      if((cc==0) || (cc==128)) {
     290:	88 23       	and	r24, r24
     292:	31 f0       	breq	.+12     	; 0x2a0 <lcd_pgm_string+0x1a>
     294:	80 38       	cpi	r24, 0x80	; 128
     296:	21 f0       	breq	.+8      	; 0x2a0 <lcd_pgm_string+0x1a>
         return;
      }
      lcd_data(cc);
     298:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
      data++;
     29c:	21 96       	adiw	r28, 0x01	; 1
   }
     29e:	f6 cf       	rjmp	.-20     	; 0x28c <lcd_pgm_string+0x6>
}
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <lcd_fix_string>:
#endif

//Load string from PGM or EEprom and send to LCD 
void lcd_fix_string(const unsigned char *data) {
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = MEM_read_byte(data);
     2ac:	ce 01       	movw	r24, r28
     2ae:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__eerd_byte_m168>
      if((cc==0) || (cc==128)) {
     2b2:	88 23       	and	r24, r24
     2b4:	31 f0       	breq	.+12     	; 0x2c2 <lcd_fix_string+0x1c>
     2b6:	80 38       	cpi	r24, 0x80	; 128
     2b8:	21 f0       	breq	.+8      	; 0x2c2 <lcd_fix_string+0x1c>
         return;
      }
      lcd_data(cc);
     2ba:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
      data++;
     2be:	21 96       	adiw	r28, 0x01	; 1
   }
     2c0:	f5 cf       	rjmp	.-22     	; 0x2ac <lcd_fix_string+0x6>
}
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	08 95       	ret

000002c8 <lcd_fix_customchar>:

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	8c 01       	movw	r16, r24
     2d2:	c0 e0       	ldi	r28, 0x00	; 0
     2d4:	d0 e0       	ldi	r29, 0x00	; 0
    for(uint8_t i=0;i<8;i++) {
        lcd_data(MEM_read_byte(chardata));
     2d6:	c8 01       	movw	r24, r16
     2d8:	8c 0f       	add	r24, r28
     2da:	9d 1f       	adc	r25, r29
     2dc:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__eerd_byte_m168>
     2e0:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
     2e4:	21 96       	adiw	r28, 0x01	; 1
   }
}

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
    for(uint8_t i=0;i<8;i++) {
     2e6:	c8 30       	cpi	r28, 0x08	; 8
     2e8:	d1 05       	cpc	r29, r1
     2ea:	a9 f7       	brne	.-22     	; 0x2d6 <lcd_fix_customchar+0xe>
        lcd_data(MEM_read_byte(chardata));
        chardata++;
    }
}
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	0f 91       	pop	r16
     2f4:	08 95       	ret

000002f6 <_lcd_hw_write>:
     2f6:	5d 9a       	sbi	0x0b, 5	; 11
     2f8:	55 9a       	sbi	0x0a, 5	; 10
     2fa:	5c 98       	cbi	0x0b, 4	; 11
     2fc:	54 9a       	sbi	0x0a, 4	; 10
     2fe:	80 fd       	sbrc	r24, 0
     300:	5c 9a       	sbi	0x0b, 4	; 11
     302:	58 98       	cbi	0x0b, 0	; 11
     304:	59 98       	cbi	0x0b, 1	; 11
     306:	5a 98       	cbi	0x0b, 2	; 11
     308:	5b 98       	cbi	0x0b, 3	; 11
     30a:	64 fd       	sbrc	r22, 4
     30c:	58 9a       	sbi	0x0b, 0	; 11
     30e:	50 9a       	sbi	0x0a, 0	; 10
     310:	65 fd       	sbrc	r22, 5
     312:	59 9a       	sbi	0x0b, 1	; 11
     314:	51 9a       	sbi	0x0a, 1	; 10
     316:	66 fd       	sbrc	r22, 6
     318:	5a 9a       	sbi	0x0b, 2	; 11
     31a:	52 9a       	sbi	0x0a, 2	; 10
     31c:	67 fd       	sbrc	r22, 7
     31e:	5b 9a       	sbi	0x0b, 3	; 11
     320:	53 9a       	sbi	0x0a, 3	; 10
     322:	00 00       	nop
     324:	5d 98       	cbi	0x0b, 5	; 11
     326:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <wait1us>
     32a:	87 fd       	sbrc	r24, 7
     32c:	11 c0       	rjmp	.+34     	; 0x350 <_lcd_hw_write_exit>
     32e:	5d 9a       	sbi	0x0b, 5	; 11
     330:	58 98       	cbi	0x0b, 0	; 11
     332:	59 98       	cbi	0x0b, 1	; 11
     334:	5a 98       	cbi	0x0b, 2	; 11
     336:	5b 98       	cbi	0x0b, 3	; 11
     338:	60 fd       	sbrc	r22, 0
     33a:	58 9a       	sbi	0x0b, 0	; 11
     33c:	61 fd       	sbrc	r22, 1
     33e:	59 9a       	sbi	0x0b, 1	; 11
     340:	62 fd       	sbrc	r22, 2
     342:	5a 9a       	sbi	0x0b, 2	; 11
     344:	63 fd       	sbrc	r22, 3
     346:	5b 9a       	sbi	0x0b, 3	; 11
     348:	00 00       	nop
     34a:	5d 98       	cbi	0x0b, 5	; 11
     34c:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <wait1us>

00000350 <_lcd_hw_write_exit>:
     350:	08 95       	ret

00000352 <__vector_7>:
#define MAIN_C
#include "Transistortester.h"

#ifndef __AVR_ATmega8__
  // prepare sleep mode
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
     352:	18 95       	reti

00000354 <__vector_21>:
  EMPTY_INTERRUPT(ADC_vect);
     354:	18 95       	reti

00000356 <EntladePins>:
   R_DDR &= ~PinToCharge;	// switch back to input
   R_PORT &= ~PinToCharge;	// no Pull up
}

// first discharge any charge of capacitors
void EntladePins() {
     356:	af 92       	push	r10
     358:	bf 92       	push	r11
     35a:	cf 92       	push	r12
     35c:	df 92       	push	r13
     35e:	ef 92       	push	r14
     360:	ff 92       	push	r15
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	3a e0       	ldi	r19, 0x0A	; 10
     36c:	c3 2e       	mov	r12, r19
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     36e:	28 e0       	ldi	r18, 0x08	; 8
     370:	d2 2e       	mov	r13, r18
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     R_PORT = 0;			// R-outputs auf 0
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     372:	9a e2       	ldi	r25, 0x2A	; 42
     374:	a9 2e       	mov	r10, r25
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     376:	85 e1       	ldi	r24, 0x15	; 21
     378:	b8 2e       	mov	r11, r24
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     37a:	d7 b8       	out	0x07, r13	; 7
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     37c:	d8 b8       	out	0x08, r13	; 8
     R_PORT = 0;			// R-outputs auf 0
     37e:	15 b8       	out	0x05, r1	; 5
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     380:	a4 b8       	out	0x04, r10	; 4
     adcmv[0] = W5msReadADC(PC0);	// which voltage has Pin 1?
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
     388:	8c 01       	movw	r16, r24
     adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
     390:	ec 01       	movw	r28, r24
     adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     392:	82 e0       	ldi	r24, 0x02	; 2
     394:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
     if ((PartFound == PART_CELL) || (adcmv[0] < CAP_EMPTY_LEVEL) & (adcmv[1] < CAP_EMPTY_LEVEL) & (adcmv[2] < CAP_EMPTY_LEVEL)) {
     398:	20 91 07 01 	lds	r18, 0x0107
     39c:	28 30       	cpi	r18, 0x08	; 8
     39e:	c1 f0       	breq	.+48     	; 0x3d0 <EntladePins+0x7a>
     3a0:	41 e0       	ldi	r20, 0x01	; 1
     3a2:	c4 30       	cpi	r28, 0x04	; 4
     3a4:	d1 05       	cpc	r29, r1
     3a6:	08 f0       	brcs	.+2      	; 0x3aa <EntladePins+0x54>
     3a8:	40 e0       	ldi	r20, 0x00	; 0
     3aa:	21 e0       	ldi	r18, 0x01	; 1
     3ac:	04 30       	cpi	r16, 0x04	; 4
     3ae:	11 05       	cpc	r17, r1
     3b0:	08 f0       	brcs	.+2      	; 0x3b4 <EntladePins+0x5e>
     3b2:	20 e0       	ldi	r18, 0x00	; 0
     3b4:	42 23       	and	r20, r18
     3b6:	50 e0       	ldi	r21, 0x00	; 0
     3b8:	21 e0       	ldi	r18, 0x01	; 1
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	84 30       	cpi	r24, 0x04	; 4
     3be:	91 05       	cpc	r25, r1
     3c0:	10 f0       	brcs	.+4      	; 0x3c6 <EntladePins+0x70>
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	24 23       	and	r18, r20
     3c8:	35 23       	and	r19, r21
     3ca:	21 15       	cp	r18, r1
     3cc:	31 05       	cpc	r19, r1
     3ce:	21 f0       	breq	.+8      	; 0x3d8 <EntladePins+0x82>
        ADC_DDR = TXD_MSK;		// switch all ADC-Pins to input
     3d0:	88 e0       	ldi	r24, 0x08	; 8
     3d2:	87 b9       	out	0x07, r24	; 7
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
     3d4:	14 b8       	out	0x04, r1	; 4
        return;			// all is discharged
     3d6:	4f c0       	rjmp	.+158    	; 0x476 <EntladePins+0x120>
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
     3d8:	23 e0       	ldi	r18, 0x03	; 3
     3da:	08 3e       	cpi	r16, 0xE8	; 232
     3dc:	12 07       	cpc	r17, r18
     3de:	10 f0       	brcs	.+4      	; 0x3e4 <EntladePins+0x8e>
  uint8_t lop_cnt;		// loop counter
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     3e0:	28 e0       	ldi	r18, 0x08	; 8
     3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <EntladePins+0x90>
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
        return;			// all is discharged
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
        adc_gnd |= (1<<PC0);	//Pin 1 directly to GND
     3e4:	29 e0       	ldi	r18, 0x09	; 9
     }
     if (adcmv[1] < 1000) {
     3e6:	33 e0       	ldi	r19, 0x03	; 3
     3e8:	c8 3e       	cpi	r28, 0xE8	; 232
     3ea:	d3 07       	cpc	r29, r19
     3ec:	08 f4       	brcc	.+2      	; 0x3f0 <EntladePins+0x9a>
        adc_gnd |= (1<<PC1);	//Pin 2 directly to GND
     3ee:	22 60       	ori	r18, 0x02	; 2
     }
     if (adcmv[2] < 1000) {
     3f0:	33 e0       	ldi	r19, 0x03	; 3
     3f2:	88 3e       	cpi	r24, 0xE8	; 232
     3f4:	93 07       	cpc	r25, r19
     3f6:	08 f4       	brcc	.+2      	; 0x3fa <EntladePins+0xa4>
        adc_gnd |= (1<<PC2);	//Pin 3 directly to  GND
     3f8:	24 60       	ori	r18, 0x04	; 4
     }
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time
     3fa:	27 b9       	out	0x07, r18	; 7

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     3fc:	b4 b8       	out	0x04, r11	; 4
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     3fe:	c0 e0       	ldi	r28, 0x00	; 0
     400:	d0 e0       	ldi	r29, 0x00	; 0
        wdt_reset();
     402:	a8 95       	wdr
        adcmv[0] = W20msReadADC(PC0);	// which voltage has Pin 1?
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	0e 94 57 1b 	call	0x36ae	; 0x36ae <W20msReadADC>
     40a:	7c 01       	movw	r14, r24
        adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
     412:	8c 01       	movw	r16, r24
        adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     414:	82 e0       	ldi	r24, 0x02	; 2
     416:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
        if (adcmv[0] < 1300) {
     41a:	24 e1       	ldi	r18, 0x14	; 20
     41c:	e2 16       	cp	r14, r18
     41e:	25 e0       	ldi	r18, 0x05	; 5
     420:	f2 06       	cpc	r15, r18
     422:	08 f4       	brcc	.+2      	; 0x426 <EntladePins+0xd0>
           ADC_DDR |= (1<<PC0);	// below 1.3V , switch directly with ADC-Port to GND
     424:	38 9a       	sbi	0x07, 0	; 7
        }
        if (adcmv[1] < 1300) {
     426:	35 e0       	ldi	r19, 0x05	; 5
     428:	04 31       	cpi	r16, 0x14	; 20
     42a:	13 07       	cpc	r17, r19
     42c:	08 f4       	brcc	.+2      	; 0x430 <EntladePins+0xda>
           ADC_DDR |= (1<<PC1);	// below 1.3V, switch directly with ADC-Port to GND
     42e:	39 9a       	sbi	0x07, 1	; 7
        }
        if (adcmv[2] < 1300) {
     430:	25 e0       	ldi	r18, 0x05	; 5
     432:	84 31       	cpi	r24, 0x14	; 20
     434:	92 07       	cpc	r25, r18
     436:	08 f4       	brcc	.+2      	; 0x43a <EntladePins+0xe4>
           ADC_DDR |= (1<<PC2);	// below 1.3V, switch directly with ADC-Port to GND
     438:	3a 9a       	sbi	0x07, 2	; 7
        }
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
     43a:	36 e0       	ldi	r19, 0x06	; 6
     43c:	e3 16       	cp	r14, r19
     43e:	f1 04       	cpc	r15, r1
     440:	30 f4       	brcc	.+12     	; 0x44e <EntladePins+0xf8>
     442:	06 30       	cpi	r16, 0x06	; 6
     444:	11 05       	cpc	r17, r1
     446:	18 f4       	brcc	.+6      	; 0x44e <EntladePins+0xf8>
     448:	86 30       	cpi	r24, 0x06	; 6
     44a:	91 05       	cpc	r25, r1
     44c:	38 f0       	brcs	.+14     	; 0x45c <EntladePins+0x106>

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     44e:	21 96       	adiw	r28, 0x01	; 1
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	c4 3f       	cpi	r28, 0xF4	; 244
     454:	d8 07       	cpc	r29, r24
     456:	a9 f6       	brne	.-86     	; 0x402 <EntladePins+0xac>
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
           break;
        }
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
     458:	d0 92 07 01 	sts	0x0107, r13

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     45c:	00 e0       	ldi	r16, 0x00	; 0
     45e:	10 e0       	ldi	r17, 0x00	; 0
     460:	04 c0       	rjmp	.+8      	; 0x46a <EntladePins+0x114>
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     462:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <wait1ms>
     466:	0f 5f       	subi	r16, 0xFF	; 255
     468:	1f 4f       	sbci	r17, 0xFF	; 255
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
     46a:	0c 17       	cp	r16, r28
     46c:	1d 07       	cpc	r17, r29
     46e:	c8 f3       	brcs	.-14     	; 0x462 <EntladePins+0x10c>
     470:	ca 94       	dec	r12
  unsigned int clr_cnt;		// Clear Counter
  uint8_t lop_cnt;		// loop counter
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     472:	09 f0       	breq	.+2      	; 0x476 <EntladePins+0x120>
     474:	82 cf       	rjmp	.-252    	; 0x37a <EntladePins+0x24>
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     }
  } // end while
 }
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	1f 91       	pop	r17
     47c:	0f 91       	pop	r16
     47e:	ff 90       	pop	r15
     480:	ef 90       	pop	r14
     482:	df 90       	pop	r13
     484:	cf 90       	pop	r12
     486:	bf 90       	pop	r11
     488:	af 90       	pop	r10
     48a:	08 95       	ret

0000048c <RefVoltage>:



#ifdef AUTO_RH
void RefVoltage(void) {
     48c:	ff 92       	push	r15
     48e:	0f 93       	push	r16
     490:	1f 93       	push	r17
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;

  #ifdef AUTO_CAL
  referenz = ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset));
     496:	87 eb       	ldi	r24, 0xB7	; 183
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__eerd_word_m168>
     49e:	20 91 3f 01 	lds	r18, 0x013F
     4a2:	30 91 40 01 	lds	r19, 0x0140
     4a6:	28 0f       	add	r18, r24
     4a8:	39 1f       	adc	r19, r25
  #else
  referenz = ref_mv + REF_C_KORR;
  #endif
  if (referenz >= Ref_Tab_Beginn) {
     4aa:	83 e0       	ldi	r24, 0x03	; 3
     4ac:	28 3e       	cpi	r18, 0xE8	; 232
     4ae:	38 07       	cpc	r19, r24
     4b0:	20 f0       	brcs	.+8      	; 0x4ba <RefVoltage+0x2e>
     referenz -= Ref_Tab_Beginn;
     4b2:	c9 01       	movw	r24, r18
     4b4:	88 5e       	subi	r24, 0xE8	; 232
     4b6:	93 40       	sbci	r25, 0x03	; 3
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <RefVoltage+0x32>
  } else  {
     referenz = 0;		// limit to begin of table
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = referenz / Ref_Tab_Abstand;
     4be:	62 e3       	ldi	r22, 0x32	; 50
     4c0:	70 e0       	ldi	r23, 0x00	; 0
     4c2:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <__udivmodhi4>
  tabres = referenz % Ref_Tab_Abstand;
     4c6:	f8 2e       	mov	r15, r24
  tabres = Ref_Tab_Abstand-tabres;
  if (tabind > 7) {
     tabind = 7;		// limit to end of table
  }
  // interpolate the table of factors
  y1 = MEM_read_word(&RHtab[tabind]);
     4c8:	68 30       	cpi	r22, 0x08	; 8
     4ca:	08 f0       	brcs	.+2      	; 0x4ce <RefVoltage+0x42>
     4cc:	67 e0       	ldi	r22, 0x07	; 7
     4ce:	c6 2f       	mov	r28, r22
     4d0:	d0 e0       	ldi	r29, 0x00	; 0
     4d2:	ce 01       	movw	r24, r28
     4d4:	88 0f       	add	r24, r24
     4d6:	99 1f       	adc	r25, r25
     4d8:	86 5a       	subi	r24, 0xA6	; 166
     4da:	9f 4f       	sbci	r25, 0xFF	; 255
     4dc:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__eerd_word_m168>
     4e0:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RHtab[tabind+1]);
     4e2:	ce 01       	movw	r24, r28
     4e4:	88 0f       	add	r24, r24
     4e6:	99 1f       	adc	r25, r25
     4e8:	84 5a       	subi	r24, 0xA4	; 164
     4ea:	9f 4f       	sbci	r25, 0xFF	; 255
     4ec:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__eerd_word_m168>
     4f0:	9c 01       	movw	r18, r24
  } else  {
     referenz = 0;		// limit to begin of table
  }
  tabind = referenz / Ref_Tab_Abstand;
  tabres = referenz % Ref_Tab_Abstand;
  tabres = Ref_Tab_Abstand-tabres;
     4f2:	42 e3       	ldi	r20, 0x32	; 50
     4f4:	4f 19       	sub	r20, r15
  }
  // interpolate the table of factors
  y1 = MEM_read_word(&RHtab[tabind]);
  y2 = MEM_read_word(&RHtab[tabind+1]);
  // RHmultip is the interpolated factor to compute capacity from load time with 470k
  RHmultip = ((y1 - y2) * tabres + (Ref_Tab_Abstand/2)) / Ref_Tab_Abstand + y2;
     4f6:	50 e0       	ldi	r21, 0x00	; 0
     4f8:	08 1b       	sub	r16, r24
     4fa:	19 0b       	sbc	r17, r25
     4fc:	40 9f       	mul	r20, r16
     4fe:	c0 01       	movw	r24, r0
     500:	41 9f       	mul	r20, r17
     502:	90 0d       	add	r25, r0
     504:	50 9f       	mul	r21, r16
     506:	90 0d       	add	r25, r0
     508:	11 24       	eor	r1, r1
     50a:	49 96       	adiw	r24, 0x19	; 25
     50c:	62 e3       	ldi	r22, 0x32	; 50
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <__udivmodhi4>
     514:	62 0f       	add	r22, r18
     516:	73 1f       	adc	r23, r19
     518:	70 93 01 01 	sts	0x0101, r23
     51c:	60 93 00 01 	sts	0x0100, r22
 }
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	1f 91       	pop	r17
     526:	0f 91       	pop	r16
     528:	ff 90       	pop	r15
     52a:	08 95       	ret

0000052c <lcd_clear_line>:
#endif

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
     52c:	1f 93       	push	r17
     52e:	14 e1       	ldi	r17, 0x14	; 20
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    lcd_space();
     530:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_space>
     534:	11 50       	subi	r17, 0x01	; 1

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
     536:	e1 f7       	brne	.-8      	; 0x530 <lcd_clear_line+0x4>
    lcd_space();
 }
}
     538:	1f 91       	pop	r17
     53a:	08 95       	ret

0000053c <DisplayValue>:
 *    e.g: p = 10^-12 -> -12
 *  - unit character (0 = none)
 *  digits = 2, 3 or 4
 */
void DisplayValue(unsigned long Value, int8_t Exponent, unsigned char Unit, unsigned char digits)
{
     53c:	2f 92       	push	r2
     53e:	3f 92       	push	r3
     540:	4f 92       	push	r4
     542:	5f 92       	push	r5
     544:	7f 92       	push	r7
     546:	8f 92       	push	r8
     548:	9f 92       	push	r9
     54a:	af 92       	push	r10
     54c:	bf 92       	push	r11
     54e:	cf 92       	push	r12
     550:	df 92       	push	r13
     552:	ef 92       	push	r14
     554:	ff 92       	push	r15
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
     55a:	df 93       	push	r29
     55c:	cf 93       	push	r28
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
     562:	2f 97       	sbiw	r28, 0x0f	; 15
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	f8 94       	cli
     568:	de bf       	out	0x3e, r29	; 62
     56a:	0f be       	out	0x3f, r0	; 63
     56c:	cd bf       	out	0x3d, r28	; 61
     56e:	6b 01       	movw	r12, r22
     570:	7c 01       	movw	r14, r24
     572:	14 2f       	mov	r17, r20
     574:	72 2e       	mov	r7, r18
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
     576:	03 30       	cpi	r16, 0x03	; 3
     578:	29 f0       	breq	.+10     	; 0x584 <DisplayValue+0x48>
  if (digits == 4) Limit = 10000;
     57a:	04 30       	cpi	r16, 0x04	; 4
     57c:	31 f0       	breq	.+12     	; 0x58a <DisplayValue+0x4e>
  uint8_t           Offset;		/* exponent of offset to next 10^3 step */
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
     57e:	84 e6       	ldi	r24, 0x64	; 100
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	14 c0       	rjmp	.+40     	; 0x5ac <DisplayValue+0x70>
  if (digits == 3) Limit = 1000;
     584:	88 ee       	ldi	r24, 0xE8	; 232
     586:	93 e0       	ldi	r25, 0x03	; 3
     588:	11 c0       	rjmp	.+34     	; 0x5ac <DisplayValue+0x70>
  if (digits == 4) Limit = 10000;
     58a:	80 e1       	ldi	r24, 0x10	; 16
     58c:	97 e2       	ldi	r25, 0x27	; 39
     58e:	0e c0       	rjmp	.+28     	; 0x5ac <DisplayValue+0x70>
  while (Value >= Limit)
  {
    Value += 5;				/* for automagic rounding */
     590:	c7 01       	movw	r24, r14
     592:	b6 01       	movw	r22, r12
     594:	6b 5f       	subi	r22, 0xFB	; 251
     596:	7f 4f       	sbci	r23, 0xFF	; 255
     598:	8f 4f       	sbci	r24, 0xFF	; 255
     59a:	9f 4f       	sbci	r25, 0xFF	; 255
    Value = Value / 10;			/* scale down by 10^1 */
     59c:	a5 01       	movw	r20, r10
     59e:	94 01       	movw	r18, r8
     5a0:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
     5a4:	69 01       	movw	r12, r18
     5a6:	7a 01       	movw	r14, r20
    Exponent++;				/* increase exponent by 1 */
     5a8:	1f 5f       	subi	r17, 0xFF	; 255
     5aa:	08 c0       	rjmp	.+16     	; 0x5bc <DisplayValue+0x80>


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
  if (digits == 4) Limit = 10000;
  while (Value >= Limit)
     5ac:	1c 01       	movw	r2, r24
     5ae:	44 24       	eor	r4, r4
     5b0:	55 24       	eor	r5, r5
  {
    Value += 5;				/* for automagic rounding */
    Value = Value / 10;			/* scale down by 10^1 */
     5b2:	6a e0       	ldi	r22, 0x0A	; 10
     5b4:	86 2e       	mov	r8, r22
     5b6:	91 2c       	mov	r9, r1
     5b8:	a1 2c       	mov	r10, r1
     5ba:	b1 2c       	mov	r11, r1


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
  if (digits == 4) Limit = 10000;
  while (Value >= Limit)
     5bc:	c2 14       	cp	r12, r2
     5be:	d3 04       	cpc	r13, r3
     5c0:	e4 04       	cpc	r14, r4
     5c2:	f5 04       	cpc	r15, r5
     5c4:	28 f7       	brcc	.-54     	; 0x590 <DisplayValue+0x54>


  /*
   *  determine prefix
   */
  Length = Exponent + 12;
     5c6:	81 2f       	mov	r24, r17
     5c8:	84 5f       	subi	r24, 0xF4	; 244
     5ca:	83 31       	cpi	r24, 0x13	; 19
     5cc:	08 f0       	brcs	.+2      	; 0x5d0 <DisplayValue+0x94>
     5ce:	82 e1       	ldi	r24, 0x12	; 18
  if (Length <  0) Length = 0;		/* Limit to minimum prefix */
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
  Index = Length / 3;
     5d0:	23 e0       	ldi	r18, 0x03	; 3
  Offset = Length % 3;
     5d2:	62 2f       	mov	r22, r18
     5d4:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <__udivmodqi4>
     5d8:	19 2f       	mov	r17, r25
    if (Offset > 0)
     5da:	99 23       	and	r25, r25
     5dc:	19 f0       	breq	.+6      	; 0x5e4 <DisplayValue+0xa8>
    {
      Index++;				/* adjust index for exponent offset, take next prefix */
     5de:	8f 5f       	subi	r24, 0xFF	; 255
      Offset = 3 - Offset;		/* reverse value (1 or 2) */
     5e0:	29 1b       	sub	r18, r25
     5e2:	12 2f       	mov	r17, r18
    }
  Prefix = MEM_read_byte((uint8_t *)(&PrefixTab[Index]));   /* look up prefix in table */
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	80 55       	subi	r24, 0x50	; 80
     5e8:	9e 4f       	sbci	r25, 0xFE	; 254
     5ea:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__eerd_byte_m168>
     5ee:	b8 2e       	mov	r11, r24
  /*
   *  display value
   */

  /* convert value into string */
  utoa((unsigned int)Value, OutBuffer, 10);
     5f0:	c6 01       	movw	r24, r12
     5f2:	6e 01       	movw	r12, r28
     5f4:	08 94       	sec
     5f6:	c1 1c       	adc	r12, r1
     5f8:	d1 1c       	adc	r13, r1
     5fa:	b6 01       	movw	r22, r12
     5fc:	4a e0       	ldi	r20, 0x0A	; 10
     5fe:	50 e0       	ldi	r21, 0x00	; 0
     600:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <utoa>
  Length = strlen(OutBuffer);
     604:	f6 01       	movw	r30, r12
     606:	01 90       	ld	r0, Z+
     608:	00 20       	and	r0, r0
     60a:	e9 f7       	brne	.-6      	; 0x606 <DisplayValue+0xca>
     60c:	31 97       	sbiw	r30, 0x01	; 1
     60e:	2e 2e       	mov	r2, r30
     610:	2c 18       	sub	r2, r12

  /* position of dot */
  Exponent = Length - Offset;		/* calculate position */
     612:	82 2c       	mov	r8, r2
     614:	81 1a       	sub	r8, r17

  if (Exponent <= 0)			/* we have to prepend "0." */
     616:	18 14       	cp	r1, r8
     618:	44 f0       	brlt	.+16     	; 0x62a <DisplayValue+0xee>
  {
    /* 0: factor 10 / -1: factor 100 */
//    lcd_data('0');
    lcd_data('.');
     61a:	8e e2       	ldi	r24, 0x2E	; 46
     61c:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
    if (Exponent < 0) lcd_data('0');	/* extra 0 for factor 100 */
     620:	88 20       	and	r8, r8
     622:	19 f0       	breq	.+6      	; 0x62a <DisplayValue+0xee>
     624:	80 e3       	ldi	r24, 0x30	; 48
     626:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
  }

  if (Offset == 0) Exponent = -1;	/* disable dot if not needed */
     62a:	11 23       	and	r17, r17
     62c:	11 f4       	brne	.+4      	; 0x632 <DisplayValue+0xf6>
     62e:	88 24       	eor	r8, r8
     630:	8a 94       	dec	r8
     632:	6e 01       	movw	r12, r28
     634:	08 94       	sec
     636:	c1 1c       	adc	r12, r1
     638:	d1 1c       	adc	r13, r1
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     63a:	00 e0       	ldi	r16, 0x00	; 0
     63c:	10 e0       	ldi	r17, 0x00	; 0
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    Index++;				/* next one */
    if (Index == Exponent) {
     63e:	99 24       	eor	r9, r9
     640:	87 fc       	sbrc	r8, 7
     642:	90 94       	com	r9
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     644:	0d c0       	rjmp	.+26     	; 0x660 <DisplayValue+0x124>
  {
    lcd_data(OutBuffer[Index]);		/* display char */
     646:	0f 5f       	subi	r16, 0xFF	; 255
     648:	1f 4f       	sbci	r17, 0xFF	; 255
     64a:	f6 01       	movw	r30, r12
     64c:	81 91       	ld	r24, Z+
     64e:	6f 01       	movw	r12, r30
     650:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
    Index++;				/* next one */
    if (Index == Exponent) {
     654:	08 15       	cp	r16, r8
     656:	19 05       	cpc	r17, r9
     658:	19 f4       	brne	.+6      	; 0x660 <DisplayValue+0x124>
      lcd_data('.');			/* display dot */
     65a:	8e e2       	ldi	r24, 0x2E	; 46
     65c:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     660:	02 15       	cp	r16, r2
     662:	88 f3       	brcs	.-30     	; 0x646 <DisplayValue+0x10a>
      lcd_data('.');			/* display dot */
    }
  }

  /* display prefix and unit */
  if (Prefix != 0) lcd_data(Prefix);
     664:	bb 20       	and	r11, r11
     666:	19 f0       	breq	.+6      	; 0x66e <DisplayValue+0x132>
     668:	8b 2d       	mov	r24, r11
     66a:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
  if (Unit) lcd_data(Unit);
     66e:	77 20       	and	r7, r7
     670:	19 f0       	breq	.+6      	; 0x678 <DisplayValue+0x13c>
     672:	87 2d       	mov	r24, r7
     674:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
}
     678:	2f 96       	adiw	r28, 0x0f	; 15
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	f8 94       	cli
     67e:	de bf       	out	0x3e, r29	; 62
     680:	0f be       	out	0x3f, r0	; 63
     682:	cd bf       	out	0x3d, r28	; 61
     684:	cf 91       	pop	r28
     686:	df 91       	pop	r29
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	ff 90       	pop	r15
     68e:	ef 90       	pop	r14
     690:	df 90       	pop	r13
     692:	cf 90       	pop	r12
     694:	bf 90       	pop	r11
     696:	af 90       	pop	r10
     698:	9f 90       	pop	r9
     69a:	8f 90       	pop	r8
     69c:	7f 90       	pop	r7
     69e:	5f 90       	pop	r5
     6a0:	4f 90       	pop	r4
     6a2:	3f 90       	pop	r3
     6a4:	2f 90       	pop	r2
     6a6:	08 95       	ret

000006a8 <RvalOut>:
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
      lcd_space();
   }
}

void RvalOut(uint8_t ii) {	
     6a8:	0f 93       	push	r16
   // output of resistor value

   DisplayValue(resis[ii].rx,-1,LCD_CHAR_OMEGA,4);
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	2b e0       	ldi	r18, 0x0B	; 11
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	82 9f       	mul	r24, r18
     6b2:	f0 01       	movw	r30, r0
     6b4:	83 9f       	mul	r24, r19
     6b6:	f0 0d       	add	r31, r0
     6b8:	92 9f       	mul	r25, r18
     6ba:	f0 0d       	add	r31, r0
     6bc:	11 24       	eor	r1, r1
     6be:	e8 5e       	subi	r30, 0xE8	; 232
     6c0:	fe 4f       	sbci	r31, 0xFE	; 254
     6c2:	60 81       	ld	r22, Z
     6c4:	71 81       	ldd	r23, Z+1	; 0x01
     6c6:	82 81       	ldd	r24, Z+2	; 0x02
     6c8:	93 81       	ldd	r25, Z+3	; 0x03
     6ca:	4f ef       	ldi	r20, 0xFF	; 255
     6cc:	24 ef       	ldi	r18, 0xF4	; 244
     6ce:	04 e0       	ldi	r16, 0x04	; 4
     6d0:	0e 94 9e 02 	call	0x53c	; 0x53c <DisplayValue>
   lcd_space();
     6d4:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_space>
 }
     6d8:	0f 91       	pop	r16
     6da:	08 95       	ret

000006dc <mVAusgabe>:
   lcd_line2(); 				//2. row
   lcd_fix_string(Uf_str);			//"Uf="
   mVAusgabe(bcdnum >> 4);
   mVAusgabe(bcdnum & 0x0f);
}
void mVAusgabe(uint8_t nn) {
     6dc:	0f 93       	push	r16
   if (nn < 3) {
     6de:	83 30       	cpi	r24, 0x03	; 3
     6e0:	98 f4       	brcc	.+38     	; 0x708 <mVAusgabe+0x2c>
      // Output in mV units
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
     6e2:	e8 2f       	mov	r30, r24
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	ee 0f       	add	r30, r30
     6e8:	ff 1f       	adc	r31, r31
     6ea:	ee 0f       	add	r30, r30
     6ec:	ff 1f       	adc	r31, r31
     6ee:	e4 59       	subi	r30, 0x94	; 148
     6f0:	fe 4f       	sbci	r31, 0xFE	; 254
     6f2:	62 81       	ldd	r22, Z+2	; 0x02
     6f4:	73 81       	ldd	r23, Z+3	; 0x03
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	4d ef       	ldi	r20, 0xFD	; 253
     6fc:	26 e5       	ldi	r18, 0x56	; 86
     6fe:	03 e0       	ldi	r16, 0x03	; 3
     700:	0e 94 9e 02 	call	0x53c	; 0x53c <DisplayValue>
      lcd_space();
     704:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_space>
   }
}
     708:	0f 91       	pop	r16
     70a:	08 95       	ret

0000070c <UfAusgabe>:
// output of flux voltage for 1-2 diodes in row 2
// bcdnum = Numbers of both Diodes:
// higher 4 Bit  number of first Diode
// lower 4 Bit  number of second Diode (Structure diodes[nn])
// if number >= 3  no output is done
void UfAusgabe(uint8_t bcdnum) {
     70c:	1f 93       	push	r17
     70e:	18 2f       	mov	r17, r24

   lcd_line2(); 				//2. row
     710:	80 ec       	ldi	r24, 0xC0	; 192
     712:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
   lcd_fix_string(Uf_str);			//"Uf="
     716:	8e e0       	ldi	r24, 0x0E	; 14
     718:	91 e0       	ldi	r25, 0x01	; 1
     71a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
   mVAusgabe(bcdnum >> 4);
     71e:	81 2f       	mov	r24, r17
     720:	82 95       	swap	r24
     722:	8f 70       	andi	r24, 0x0F	; 15
     724:	0e 94 6e 03 	call	0x6dc	; 0x6dc <mVAusgabe>
   mVAusgabe(bcdnum & 0x0f);
     728:	81 2f       	mov	r24, r17
     72a:	8f 70       	andi	r24, 0x0F	; 15
     72c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <mVAusgabe>
}
     730:	1f 91       	pop	r17
     732:	08 95       	ret

00000734 <sleep_5ms>:
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
      pause = 0;
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     734:	42 e0       	ldi	r20, 0x02	; 2
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     736:	1c c0       	rjmp	.+56     	; 0x770 <sleep_5ms+0x3c>
  {
#if 3000 > RESTART_DELAY_US
   if (pause > 1)
     738:	82 30       	cpi	r24, 0x02	; 2
     73a:	91 05       	cpc	r25, r1
     73c:	18 f0       	brcs	.+6      	; 0x744 <sleep_5ms+0x10>
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
      pause -= 2;
     73e:	02 97       	sbiw	r24, 0x02	; 2
  {
#if 3000 > RESTART_DELAY_US
   if (pause > 1)
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
     740:	3e e3       	ldi	r19, 0x3E	; 62
     742:	03 c0       	rjmp	.+6      	; 0x74a <sleep_5ms+0x16>
      pause -= 2;
     } else {
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
     744:	37 e1       	ldi	r19, 0x17	; 23
      pause = 0;
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	90 e0       	ldi	r25, 0x00	; 0
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
     74a:	20 91 b2 00 	lds	r18, 0x00B2
     74e:	23 0f       	add	r18, r19
     750:	20 93 b3 00 	sts	0x00B3, r18
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     754:	40 93 70 00 	sts	0x0070, r20
//   set_sleep_mode(SLEEP_MODE_PWR_SAVE);
   set_sleep_mode(SLEEP_MODE_PWR_SAVE);
     758:	23 b7       	in	r18, 0x33	; 51
     75a:	21 7f       	andi	r18, 0xF1	; 241
     75c:	26 60       	ori	r18, 0x06	; 6
     75e:	23 bf       	out	0x33, r18	; 51
//   set_sleep_mode(SLEEP_MODE_IDLE);
   sleep_mode();
     760:	23 b7       	in	r18, 0x33	; 51
     762:	21 60       	ori	r18, 0x01	; 1
     764:	23 bf       	out	0x33, r18	; 51
     766:	88 95       	sleep
     768:	23 b7       	in	r18, 0x33	; 51
     76a:	2e 7f       	andi	r18, 0xFE	; 254
     76c:	23 bf       	out	0x33, r18	; 51
// wake up after output compare match interrupt
#else
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
#endif
   wdt_reset();
     76e:	a8 95       	wdr
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     770:	00 97       	sbiw	r24, 0x00	; 0
     772:	11 f7       	brne	.-60     	; 0x738 <sleep_5ms+0x4>
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
#endif
   wdt_reset();
  }
TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
     774:	10 92 70 00 	sts	0x0070, r1
}
     778:	08 95       	ret

0000077a <ChargePin10ms>:
 }

//******************************************************************
#include "CheckPins.c"

void ChargePin10ms(uint8_t PinToCharge, uint8_t ChargeDirection) {
     77a:	1f 93       	push	r17
     77c:	18 2f       	mov	r17, r24
   //Will be used by discharge of MOSFET Gates or to load big capacities.
   //Parameters:
   //PinToCharge: specifies the pin as mask for R-Port
   //ChargeDirection: 0 = switch to GND (N-Kanal-FET), 1= switch to VCC(P-Kanal-FET)

   if(ChargeDirection&1) {
     77e:	60 ff       	sbrs	r22, 0
     780:	03 c0       	rjmp	.+6      	; 0x788 <ChargePin10ms+0xe>
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
     782:	85 b1       	in	r24, 0x05	; 5
     784:	81 2b       	or	r24, r17
     786:	03 c0       	rjmp	.+6      	; 0x78e <ChargePin10ms+0x14>
   } else {
      R_PORT &= ~PinToCharge; // or 0 (GND)
     788:	95 b1       	in	r25, 0x05	; 5
     78a:	80 95       	com	r24
     78c:	89 23       	and	r24, r25
     78e:	85 b9       	out	0x05, r24	; 5
   }
   R_DDR |= PinToCharge;		//switch Pin to output, across R to GND or VCC
     790:	84 b1       	in	r24, 0x04	; 4
     792:	81 2b       	or	r24, r17
     794:	84 b9       	out	0x04, r24	; 4
   wait_about10ms();			// wait about 10ms
     796:	82 e0       	ldi	r24, 0x02	; 2
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 9a 03 	call	0x734	; 0x734 <sleep_5ms>
   // switch back Input, no current
   R_DDR &= ~PinToCharge;	// switch back to input
     79e:	84 b1       	in	r24, 0x04	; 4
     7a0:	10 95       	com	r17
     7a2:	81 23       	and	r24, r17
     7a4:	84 b9       	out	0x04, r24	; 4
   R_PORT &= ~PinToCharge;	// no Pull up
     7a6:	85 b1       	in	r24, 0x05	; 5
     7a8:	81 23       	and	r24, r17
     7aa:	85 b9       	out	0x05, r24	; 5
}
     7ac:	1f 91       	pop	r17
     7ae:	08 95       	ret

000007b0 <CheckPins>:
//******************************************************************
void CheckPins(uint8_t HighPin, uint8_t LowPin, uint8_t TristatePin)
  {
     7b0:	2f 92       	push	r2
     7b2:	3f 92       	push	r3
     7b4:	4f 92       	push	r4
     7b6:	5f 92       	push	r5
     7b8:	6f 92       	push	r6
     7ba:	7f 92       	push	r7
     7bc:	8f 92       	push	r8
     7be:	9f 92       	push	r9
     7c0:	af 92       	push	r10
     7c2:	bf 92       	push	r11
     7c4:	cf 92       	push	r12
     7c6:	df 92       	push	r13
     7c8:	ef 92       	push	r14
     7ca:	ff 92       	push	r15
     7cc:	0f 93       	push	r16
     7ce:	1f 93       	push	r17
     7d0:	df 93       	push	r29
     7d2:	cf 93       	push	r28
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
     7d8:	66 97       	sbiw	r28, 0x16	; 22
     7da:	0f b6       	in	r0, 0x3f	; 63
     7dc:	f8 94       	cli
     7de:	de bf       	out	0x3e, r29	; 62
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	cd bf       	out	0x3d, r28	; 61
     7e4:	18 2f       	mov	r17, r24
     7e6:	36 2e       	mov	r3, r22
     7e8:	24 2e       	mov	r2, r20
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
     7ea:	a8 95       	wdr
//  #define RR680MI resis680mi
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = MEM_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
     7ec:	a6 2e       	mov	r10, r22
     7ee:	bb 24       	eor	r11, r11
     7f0:	c5 01       	movw	r24, r10
     7f2:	8b 55       	subi	r24, 0x5B	; 91
     7f4:	9e 4f       	sbci	r25, 0xFE	; 254
     7f6:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__eerd_byte_m168>
     7fa:	8a 83       	std	Y+2, r24	; 0x02
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
  TriPinRL = MEM_read_byte(&PinRLtab[TristatePin]);	// intruction for TristatePin R_L
     7fc:	82 2d       	mov	r24, r2
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	8b 55       	subi	r24, 0x5B	; 91
     802:	9e 4f       	sbci	r25, 0xFE	; 254
     804:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__eerd_byte_m168>
     808:	d8 2e       	mov	r13, r24
  TriPinRH = TriPinRL + TriPinRL;			// intruction for TristatePin R_H
     80a:	08 2f       	mov	r16, r24
     80c:	00 0f       	add	r16, r16
  HiPinRL = MEM_read_byte(&PinRLtab[HighPin]);		// intruction for HighPin R_L
     80e:	e1 2e       	mov	r14, r17
     810:	ff 24       	eor	r15, r15
     812:	c7 01       	movw	r24, r14
     814:	8b 55       	subi	r24, 0x5B	; 91
     816:	9e 4f       	sbci	r25, 0xFE	; 254
     818:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__eerd_byte_m168>
     81c:	c8 2e       	mov	r12, r24
  HiPinRH = HiPinRL + HiPinRL;				// intruction for HighPin R_H
     81e:	28 2f       	mov	r18, r24
     820:	22 0f       	add	r18, r18
     822:	28 87       	std	Y+8, r18	; 0x08

  HiADCp = MEM_read_byte(&PinADCtab[HighPin]);		// intruction for ADC High-Pin 
     824:	c7 01       	movw	r24, r14
     826:	88 55       	subi	r24, 0x58	; 88
     828:	9e 4f       	sbci	r25, 0xFE	; 254
     82a:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__eerd_byte_m168>
     82e:	89 83       	std	Y+1, r24	; 0x01
  LoADCp = MEM_read_byte(&PinADCtab[LowPin]);		// intruction for ADC Low-Pin
     830:	c5 01       	movw	r24, r10
     832:	88 55       	subi	r24, 0x58	; 88
     834:	9e 4f       	sbci	r25, 0xFE	; 254
     836:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__eerd_byte_m168>
  HiADCm = HiADCp | TXD_MSK;
     83a:	39 81       	ldd	r19, Y+1	; 0x01
     83c:	38 60       	ori	r19, 0x08	; 8
     83e:	39 83       	std	Y+1, r19	; 0x01
  HiADCp |= TXD_VAL;
  LoADCm = LoADCp | TXD_MSK;
     840:	88 60       	ori	r24, 0x08	; 8
     842:	8b 83       	std	Y+3, r24	; 0x03
  LoADCp |= TXD_VAL;

  //setting of Pins 
  R_PORT = 0;				//resistor-Port outputs to 0
     844:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//Low-Pin to output and across R_L to GND
     846:	8a 81       	ldd	r24, Y+2	; 0x02
     848:	84 b9       	out	0x04, r24	; 4
  ADC_DDR = HiADCm;		//High-Pin to output
     84a:	37 b9       	out	0x07, r19	; 7
  ADC_PORT = HiADCp;		//High-Pin fix to Vcc
     84c:	38 b9       	out	0x08, r19	; 8
  //for some MOSFET the gate (TristatePin) must be discharged
  ChargePin10ms(TriPinRL,0);		//discharge for N-Kanal
     84e:	8d 2d       	mov	r24, r13
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	0e 94 bd 03 	call	0x77a	; 0x77a <ChargePin10ms>
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin 
     856:	83 2d       	mov	r24, r3
     858:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
     85c:	9a 87       	std	Y+10, r25	; 0x0a
     85e:	89 87       	std	Y+9, r24	; 0x09
  if(adc.lp_otr >= 977) {		//no current now? 
     860:	a3 e0       	ldi	r26, 0x03	; 3
     862:	81 3d       	cpi	r24, 0xD1	; 209
     864:	9a 07       	cpc	r25, r26
     866:	48 f0       	brcs	.+18     	; 0x87a <CheckPins+0xca>
     ChargePin10ms(TriPinRL,1);	 	//else: discharge for P-channel (Gate to VCC)
     868:	8d 2d       	mov	r24, r13
     86a:	61 e0       	ldi	r22, 0x01	; 1
     86c:	0e 94 bd 03 	call	0x77a	; 0x77a <ChargePin10ms>
     adc.lp_otr = ReadADC(LowPin);	//read voltage of Low-Pin again
     870:	83 2d       	mov	r24, r3
     872:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
     876:	9a 87       	std	Y+10, r25	; 0x0a
     878:	89 87       	std	Y+9, r24	; 0x09
  lcd_line2();
  lcd_clear_line();
  lcd_line2();
#endif

  if(adc.lp_otr > 92) {  //there is some current without TristatePin current 
     87a:	e9 85       	ldd	r30, Y+9	; 0x09
     87c:	fa 85       	ldd	r31, Y+10	; 0x0a
     87e:	ed 35       	cpi	r30, 0x5D	; 93
     880:	f1 05       	cpc	r31, r1
     882:	08 f4       	brcc	.+2      	; 0x886 <CheckPins+0xd6>
     884:	aa c0       	rjmp	.+340    	; 0x9da <CheckPins+0x22a>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test if N-JFET or if self-conducting N-MOSFET
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
     886:	8a 81       	ldd	r24, Y+2	; 0x02
     888:	80 2b       	or	r24, r16
     88a:	84 b9       	out	0x04, r24	; 4
     adc.lp1 = W20msReadADC(LowPin);	//measure voltage at the assumed Source 
     88c:	83 2d       	mov	r24, r3
     88e:	0e 94 57 1b 	call	0x36ae	; 0x36ae <W20msReadADC>
     892:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     894:	82 2d       	mov	r24, r2
     896:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
     89a:	7c 01       	movw	r14, r24
     R_PORT = TriPinRH;			//switch R_H for Tristate-Pin (probably Gate) to VCC
     89c:	05 b9       	out	0x05, r16	; 5
     adc.lp2 = W20msReadADC(LowPin);	//measure voltage at the assumed Source again
     89e:	83 2d       	mov	r24, r3
     8a0:	0e 94 57 1b 	call	0x36ae	; 0x36ae <W20msReadADC>
     //If it is a self-conducting MOSFET or JFET, then must be: adc.lp2 > adc.lp1 
     if(adc.lp2>(adc.lp1+488)) {
     8a4:	95 01       	movw	r18, r10
     8a6:	28 51       	subi	r18, 0x18	; 24
     8a8:	3e 4f       	sbci	r19, 0xFE	; 254
     8aa:	28 17       	cp	r18, r24
     8ac:	39 07       	cpc	r19, r25
     8ae:	08 f0       	brcs	.+2      	; 0x8b2 <CheckPins+0x102>
     8b0:	40 c0       	rjmp	.+128    	; 0x932 <CheckPins+0x182>
        //measure voltage at the  Gate, differ between MOSFET and JFET
        ADC_PORT = TXD_VAL;
     8b2:	88 e0       	ldi	r24, 0x08	; 8
     8b4:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = LoADCm;	//Low-Pin fix to GND
     8b6:	fb 81       	ldd	r31, Y+3	; 0x03
     8b8:	f7 b9       	out	0x07, r31	; 7
        R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     8ba:	80 2f       	mov	r24, r16
     8bc:	8c 29       	or	r24, r12
     8be:	84 b9       	out	0x04, r24	; 4
        R_PORT = TriPinRH | HiPinRL;	//switch R_L for High-Pin to VCC
     8c0:	85 b9       	out	0x05, r24	; 5
        adc.lp2 = W20msReadADC(TristatePin); //read voltage of assumed Gate 
     8c2:	82 2d       	mov	r24, r2
     8c4:	0e 94 57 1b 	call	0x36ae	; 0x36ae <W20msReadADC>
        if(adc.lp2>3911) {  //MOSFET
     8c8:	2f e0       	ldi	r18, 0x0F	; 15
     8ca:	88 34       	cpi	r24, 0x48	; 72
     8cc:	92 07       	cpc	r25, r18
     8ce:	28 f0       	brcs	.+10     	; 0x8da <CheckPins+0x12a>
           PartFound = PART_FET;	//N-Kanal-MOSFET
     8d0:	83 e0       	ldi	r24, 0x03	; 3
     8d2:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_N_D_MOS; //Depletion-MOSFET
     8d6:	84 e0       	ldi	r24, 0x04	; 4
     8d8:	04 c0       	rjmp	.+8      	; 0x8e2 <CheckPins+0x132>
        } else {  //JFET (pn-passage between Gate and Source is conducting )
           PartFound = PART_FET;	//N-Kanal-JFET
     8da:	83 e0       	ldi	r24, 0x03	; 3
     8dc:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_N_JFET;
     8e0:	86 e0       	ldi	r24, 0x06	; 6
     8e2:	80 93 06 01 	sts	0x0106, r24
        }
//      if ((PartReady == 0) || (adc.lp1 > trans.uBE[0])) 
//      there is no way to find out the right Source / Drain
        trans.uBE[0] = adc.lp1;
     8e6:	b0 92 4f 01 	sts	0x014F, r11
     8ea:	a0 92 4e 01 	sts	0x014E, r10
        gthvoltage = adc.lp1 - adc.tp1;	//voltage GS (Source - Gate)
     8ee:	c5 01       	movw	r24, r10
     8f0:	8e 19       	sub	r24, r14
     8f2:	9f 09       	sbc	r25, r15
     8f4:	90 93 57 01 	sts	0x0157, r25
     8f8:	80 93 56 01 	sts	0x0156, r24
        trans.uBE[1] = (unsigned int)(((unsigned long)adc.lp1 * 1000) / RR680MI); // Id 0.01mA
     8fc:	b5 01       	movw	r22, r10
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	28 ee       	ldi	r18, 0xE8	; 232
     904:	33 e0       	ldi	r19, 0x03	; 3
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	50 e0       	ldi	r21, 0x00	; 0
     90a:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
     90e:	20 91 02 01 	lds	r18, 0x0102
     912:	30 91 03 01 	lds	r19, 0x0103
     916:	40 e0       	ldi	r20, 0x00	; 0
     918:	50 e0       	ldi	r21, 0x00	; 0
     91a:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
     91e:	30 93 51 01 	sts	0x0151, r19
     922:	20 93 50 01 	sts	0x0150, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     926:	20 92 52 01 	sts	0x0152, r2
        trans.c = HighPin;
     92a:	10 93 53 01 	sts	0x0153, r17
        trans.e = LowPin;
     92e:	30 92 54 01 	sts	0x0154, r3
     }

     ADC_PORT = TXD_VAL;		// direct outputs to GND
     932:	88 e0       	ldi	r24, 0x08	; 8
     934:	88 b9       	out	0x08, r24	; 8

     //Test, if P-JFET or if self-conducting P-MOSFET
     ADC_DDR = LoADCm;		//switch Low-Pin (assumed Drain) direct to GND,
     936:	3b 81       	ldd	r19, Y+3	; 0x03
     938:	37 b9       	out	0x07, r19	; 7
				//R_H for Tristate-Pin (assumed Gate) is already switched to VCC
     R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     93a:	80 2f       	mov	r24, r16
     93c:	8c 29       	or	r24, r12
     93e:	84 b9       	out	0x04, r24	; 4
     R_PORT = TriPinRH | HiPinRL;	//High-Pin across R_L to Vcc
     940:	85 b9       	out	0x05, r24	; 5
     adc.hp1 = W20msReadADC(HighPin);	//measure voltage at assumed Source 
     942:	81 2f       	mov	r24, r17
     944:	0e 94 57 1b 	call	0x36ae	; 0x36ae <W20msReadADC>
     948:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     94a:	82 2d       	mov	r24, r2
     94c:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
     950:	7c 01       	movw	r14, r24
     R_PORT = HiPinRL;			//switch R_H for Tristate-Pin (assumed Gate) to GND
     952:	c5 b8       	out	0x05, r12	; 5
     adc.hp2 = W20msReadADC(HighPin);	//read voltage at assumed Source again
     954:	81 2f       	mov	r24, r17
     956:	0e 94 57 1b 	call	0x36ae	; 0x36ae <W20msReadADC>
     //if it is a self-conducting P_MOSFET or P-JFET , then must be:  adc.hp1 > adc.hp2 
     if(adc.hp1>(adc.hp2+488)) {
     95a:	88 51       	subi	r24, 0x18	; 24
     95c:	9e 4f       	sbci	r25, 0xFE	; 254
     95e:	8a 15       	cp	r24, r10
     960:	9b 05       	cpc	r25, r11
     962:	d8 f5       	brcc	.+118    	; 0x9da <CheckPins+0x22a>
        //read voltage at the Gate , to differ between MOSFET and JFET
        ADC_PORT = HiADCp;	//switch High-Pin directly to VCC
     964:	89 81       	ldd	r24, Y+1	; 0x01
     966:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = HiADCm;	//switch High-Pin to output
     968:	87 b9       	out	0x07, r24	; 7
        adc.tp2 = W20msReadADC(TristatePin); //read voltage at the assumed Gate 
     96a:	82 2d       	mov	r24, r2
     96c:	0e 94 57 1b 	call	0x36ae	; 0x36ae <W20msReadADC>
        if(adc.tp2<977) { 		//MOSFET
     970:	a3 e0       	ldi	r26, 0x03	; 3
     972:	81 3d       	cpi	r24, 0xD1	; 209
     974:	9a 07       	cpc	r25, r26
     976:	28 f4       	brcc	.+10     	; 0x982 <CheckPins+0x1d2>
           PartFound = PART_FET;	//P-Kanal-MOSFET
     978:	83 e0       	ldi	r24, 0x03	; 3
     97a:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_D_MOS; //Depletion-MOSFET
     97e:	85 e0       	ldi	r24, 0x05	; 5
     980:	04 c0       	rjmp	.+8      	; 0x98a <CheckPins+0x1da>
        } else { 			//JFET (pn-passage between Gate and Source is conducting)
           PartFound = PART_FET;	//P-Kanal-JFET
     982:	83 e0       	ldi	r24, 0x03	; 3
     984:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_JFET;
     988:	87 e0       	ldi	r24, 0x07	; 7
     98a:	80 93 06 01 	sts	0x0106, r24
        }
        gthvoltage = adc.tp1 - adc.hp1;		//voltage GS (Gate - Source)
     98e:	ea 18       	sub	r14, r10
     990:	fb 08       	sbc	r15, r11
     992:	f0 92 57 01 	sts	0x0157, r15
     996:	e0 92 56 01 	sts	0x0156, r14
        trans.uBE[1] = (unsigned int)(((unsigned long)(ADCconfig.U_AVCC - adc.hp1) * 1000) / RR680PL); // Id 0.01mA
     99a:	60 91 3d 01 	lds	r22, 0x013D
     99e:	70 91 3e 01 	lds	r23, 0x013E
     9a2:	6a 19       	sub	r22, r10
     9a4:	7b 09       	sbc	r23, r11
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	28 ee       	ldi	r18, 0xE8	; 232
     9ac:	33 e0       	ldi	r19, 0x03	; 3
     9ae:	40 e0       	ldi	r20, 0x00	; 0
     9b0:	50 e0       	ldi	r21, 0x00	; 0
     9b2:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
     9b6:	20 91 08 01 	lds	r18, 0x0108
     9ba:	30 91 09 01 	lds	r19, 0x0109
     9be:	40 e0       	ldi	r20, 0x00	; 0
     9c0:	50 e0       	ldi	r21, 0x00	; 0
     9c2:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
     9c6:	30 93 51 01 	sts	0x0151, r19
     9ca:	20 93 50 01 	sts	0x0150, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     9ce:	20 92 52 01 	sts	0x0152, r2
        trans.c = LowPin;
     9d2:	30 92 53 01 	sts	0x0153, r3
        trans.e = HighPin;
     9d6:	10 93 54 01 	sts	0x0154, r17
  } // end component has current without TristatePin signal


#ifdef COMMON_COLLECTOR
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
     9da:	88 e0       	ldi	r24, 0x08	; 8
     9dc:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;			// Collector direct to GND
     9de:	bb 81       	ldd	r27, Y+3	; 0x03
     9e0:	b7 b9       	out	0x07, r27	; 7
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
     9e2:	c5 b8       	out	0x05, r12	; 5
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
     9e4:	ec 2d       	mov	r30, r12
     9e6:	ed 29       	or	r30, r13
     9e8:	eb 87       	std	Y+11, r30	; 0x0b
     9ea:	e4 b9       	out	0x04, r30	; 4
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     9ec:	a0 90 3d 01 	lds	r10, 0x013D
     9f0:	b0 90 3e 01 	lds	r11, 0x013E
     9f4:	81 2f       	mov	r24, r17
     9f6:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
     9fa:	7c 01       	movw	r14, r24
  adc.tp1 = ReadADC(TristatePin);	// voltage at the base resistor
     9fc:	82 2d       	mov	r24, r2
     9fe:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
     a02:	4c 01       	movw	r8, r24

  if (adc.tp1 < 10) {
     a04:	8a 30       	cpi	r24, 0x0A	; 10
     a06:	91 05       	cpc	r25, r1
     a08:	68 f5       	brcc	.+90     	; 0xa64 <CheckPins+0x2b4>
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
     a0a:	80 2f       	mov	r24, r16
     a0c:	8c 29       	or	r24, r12
     a0e:	84 b9       	out	0x04, r24	; 4
     adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);
     a10:	a0 90 3d 01 	lds	r10, 0x013D
     a14:	b0 90 3e 01 	lds	r11, 0x013E
     a18:	81 2f       	mov	r24, r17
     a1a:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
     a1e:	a8 1a       	sub	r10, r24
     a20:	b9 0a       	sbc	r11, r25
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
     a22:	82 2d       	mov	r24, r2
     a24:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
     a28:	4c 01       	movw	r8, r24
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     a2a:	25 01       	movw	r4, r10
     a2c:	66 24       	eor	r6, r6
     a2e:	77 24       	eor	r7, r7
     a30:	20 91 08 01 	lds	r18, 0x0108
     a34:	30 91 09 01 	lds	r19, 0x0109
     a38:	40 e0       	ldi	r20, 0x00	; 0
     a3a:	50 e0       	ldi	r21, 0x00	; 0
     a3c:	60 e6       	ldi	r22, 0x60	; 96
     a3e:	77 eb       	ldi	r23, 0xB7	; 183
     a40:	87 e4       	ldi	r24, 0x47	; 71
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
     a48:	c3 01       	movw	r24, r6
     a4a:	b2 01       	movw	r22, r4
     a4c:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
     a50:	94 01       	movw	r18, r8
     a52:	40 e0       	ldi	r20, 0x00	; 0
     a54:	50 e0       	ldi	r21, 0x00	; 0
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     a56:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
     a5a:	2c 83       	std	Y+4, r18	; 0x04
     a5c:	3d 83       	std	Y+5, r19	; 0x05
     a5e:	4e 83       	std	Y+6, r20	; 0x06
     a60:	5f 83       	std	Y+7, r21	; 0x07
     a62:	0f c0       	rjmp	.+30     	; 0xa82 <CheckPins+0x2d2>
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
  ADC_DDR = LoADCm;			// Collector direct to GND
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     a64:	ae 18       	sub	r10, r14
     a66:	bf 08       	sbc	r11, r15
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
 #else
     c_hfe = ((adc.hp1 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
  } else {
     c_hfe = (unsigned long)((adc.hp1 - adc.tp1) / adc.tp1);
     a68:	c5 01       	movw	r24, r10
     a6a:	88 19       	sub	r24, r8
     a6c:	99 09       	sbc	r25, r9
     a6e:	b4 01       	movw	r22, r8
     a70:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <__udivmodhi4>
     a74:	cb 01       	movw	r24, r22
     a76:	a0 e0       	ldi	r26, 0x00	; 0
     a78:	b0 e0       	ldi	r27, 0x00	; 0
     a7a:	8c 83       	std	Y+4, r24	; 0x04
     a7c:	9d 83       	std	Y+5, r25	; 0x05
     a7e:	ae 83       	std	Y+6, r26	; 0x06
     a80:	bf 83       	std	Y+7, r27	; 0x07
  }
#endif

  //set Pins again for circuit with common Emitter PNP
  R_DDR = LoPinRL;		//switch R_L port for Low-Pin to output (GND)
     a82:	9a 81       	ldd	r25, Y+2	; 0x02
     a84:	94 b9       	out	0x04, r25	; 4
  R_PORT = 0;			//switch all resistor ports to GND
     a86:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = HiADCm;		//switch High-Pin to output
     a88:	a9 81       	ldd	r26, Y+1	; 0x01
     a8a:	a7 b9       	out	0x07, r26	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
     a8c:	a8 b9       	out	0x08, r26	; 8
  wait_about5ms();
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e 94 9a 03 	call	0x734	; 0x734 <sleep_5ms>
  
  if(adc.lp_otr < 977) {
     a96:	e9 85       	ldd	r30, Y+9	; 0x09
     a98:	fa 85       	ldd	r31, Y+10	; 0x0a
     a9a:	23 e0       	ldi	r18, 0x03	; 3
     a9c:	e1 3d       	cpi	r30, 0xD1	; 209
     a9e:	f2 07       	cpc	r31, r18
     aa0:	08 f0       	brcs	.+2      	; 0xaa4 <CheckPins+0x2f4>
     aa2:	ab c2       	rjmp	.+1366   	; 0xffa <CheckPins+0x84a>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test to PNP
     R_DDR = LoPinRL | TriPinRL;	//switch R_L port for Tristate-Pin to output (GND), for Test of PNP
     aa4:	3a 81       	ldd	r19, Y+2	; 0x02
     aa6:	3d 29       	or	r19, r13
     aa8:	3f 87       	std	Y+15, r19	; 0x0f
     aaa:	34 b9       	out	0x04, r19	; 4
     adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin
     aac:	83 2d       	mov	r24, r3
     aae:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
     if(adc.lp1 > 3422) {
     ab2:	ad e0       	ldi	r26, 0x0D	; 13
     ab4:	8f 35       	cpi	r24, 0x5F	; 95
     ab6:	9a 07       	cpc	r25, r26
     ab8:	08 f4       	brcc	.+2      	; 0xabc <CheckPins+0x30c>
     aba:	e1 c0       	rjmp	.+450    	; 0xc7e <CheckPins+0x4ce>
        //component has current => PNP-Transistor or equivalent
        //compute current amplification factor in both directions
        R_DDR = LoPinRL | TriPinRH;	//switch R_H port for Tristate-Pin (Base) to output (GND)
     abc:	ba 81       	ldd	r27, Y+2	; 0x02
     abe:	b0 2b       	or	r27, r16
     ac0:	b8 8b       	std	Y+16, r27	; 0x10
     ac2:	b4 b9       	out	0x04, r27	; 4

        adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin (assumed Collector)
     ac4:	83 2d       	mov	r24, r3
     ac6:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
     aca:	9a 8b       	std	Y+18, r25	; 0x12
     acc:	89 8b       	std	Y+17, r24	; 0x11
        adc.tp2 = ReadADC(TristatePin);	//measure voltage at TristatePin (Base) 
     ace:	82 2d       	mov	r24, r2
     ad0:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
     ad4:	9d 8b       	std	Y+21, r25	; 0x15
     ad6:	8c 8b       	std	Y+20, r24	; 0x14
        //check, if Test is done before 
        if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     ad8:	80 91 07 01 	lds	r24, 0x0107
     adc:	82 50       	subi	r24, 0x02	; 2
     ade:	82 30       	cpi	r24, 0x02	; 2
     ae0:	18 f4       	brcc	.+6      	; 0xae8 <CheckPins+0x338>
           PartReady = 1;
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	80 93 04 01 	sts	0x0104, r24
        }
        trans.uBE[PartReady] = ReadADC(HighPin) - adc.tp2;	// Base Emitter Voltage
     ae8:	e0 90 04 01 	lds	r14, 0x0104
     aec:	ff 24       	eor	r15, r15
     aee:	81 2f       	mov	r24, r17
     af0:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
     af4:	f7 01       	movw	r30, r14
     af6:	ee 0f       	add	r30, r30
     af8:	ff 1f       	adc	r31, r31
     afa:	e2 5b       	subi	r30, 0xB2	; 178
     afc:	fe 4f       	sbci	r31, 0xFE	; 254
     afe:	2c 89       	ldd	r18, Y+20	; 0x14
     b00:	3d 89       	ldd	r19, Y+21	; 0x15
     b02:	82 1b       	sub	r24, r18
     b04:	93 0b       	sbc	r25, r19
     b06:	91 83       	std	Z+1, r25	; 0x01
     b08:	80 83       	st	Z, r24

        //compute current amplification factor for circuit with common Emitter
        //hFE = B = Collector current / Base current
        if(adc.tp2 < 53) {
     b0a:	25 33       	cpi	r18, 0x35	; 53
     b0c:	31 05       	cpc	r19, r1
     b0e:	20 f4       	brcc	.+8      	; 0xb18 <CheckPins+0x368>
#if DebugOut == 5
           lcd_data('<');
           lcd_data('5');
           lcd_data('3');
#endif
           adc.tp2 = 53;
     b10:	85 e3       	ldi	r24, 0x35	; 53
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	9d 8b       	std	Y+21, r25	; 0x15
     b16:	8c 8b       	std	Y+20, r24	; 0x14
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     b18:	e0 90 04 01 	lds	r14, 0x0104
     b1c:	ff 24       	eor	r15, r15
     b1e:	a9 89       	ldd	r26, Y+17	; 0x11
     b20:	ba 89       	ldd	r27, Y+18	; 0x12
     b22:	2d 01       	movw	r4, r26
     b24:	66 24       	eor	r6, r6
     b26:	77 24       	eor	r7, r7
     b28:	20 91 02 01 	lds	r18, 0x0102
     b2c:	30 91 03 01 	lds	r19, 0x0103
     b30:	40 e0       	ldi	r20, 0x00	; 0
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	60 e6       	ldi	r22, 0x60	; 96
     b36:	77 eb       	ldi	r23, 0xB7	; 183
     b38:	87 e4       	ldi	r24, 0x47	; 71
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
     b40:	c3 01       	movw	r24, r6
     b42:	b2 01       	movw	r22, r4
     b44:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
                 (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
     b48:	ec 89       	ldd	r30, Y+20	; 0x14
     b4a:	fd 89       	ldd	r31, Y+21	; 0x15
     b4c:	9f 01       	movw	r18, r30
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
#endif
           adc.tp2 = 53;
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     b56:	f7 01       	movw	r30, r14
     b58:	ee 0f       	add	r30, r30
     b5a:	ff 1f       	adc	r31, r31
     b5c:	ee 0f       	add	r30, r30
     b5e:	ff 1f       	adc	r31, r31
     b60:	ea 5b       	subi	r30, 0xBA	; 186
     b62:	fe 4f       	sbci	r31, 0xFE	; 254
     b64:	20 83       	st	Z, r18
     b66:	31 83       	std	Z+1, r19	; 0x01
     b68:	42 83       	std	Z+2, r20	; 0x02
     b6a:	53 83       	std	Z+3, r21	; 0x03
        trans.hfe[PartReady] = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
#ifdef COMMON_COLLECTOR
        //current amplification factor for common  Collector (Emitter follower)
        // c_hFE = (Emitter current - Base current) / Base current
        if (c_hfe > trans.hfe[PartReady]) {
     b6c:	8c 81       	ldd	r24, Y+4	; 0x04
     b6e:	9d 81       	ldd	r25, Y+5	; 0x05
     b70:	ae 81       	ldd	r26, Y+6	; 0x06
     b72:	bf 81       	ldd	r27, Y+7	; 0x07
     b74:	28 17       	cp	r18, r24
     b76:	39 07       	cpc	r19, r25
     b78:	4a 07       	cpc	r20, r26
     b7a:	5b 07       	cpc	r21, r27
     b7c:	98 f4       	brcc	.+38     	; 0xba4 <CheckPins+0x3f4>
           trans.hfe[PartReady] = c_hfe;
     b7e:	80 83       	st	Z, r24
     b80:	91 83       	std	Z+1, r25	; 0x01
     b82:	a2 83       	std	Z+2, r26	; 0x02
     b84:	b3 83       	std	Z+3, r27	; 0x03
           trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.hp1 - adc.tp1;	// Base Emitter Voltage common collector
     b86:	f7 01       	movw	r30, r14
     b88:	ee 0f       	add	r30, r30
     b8a:	ff 1f       	adc	r31, r31
     b8c:	e2 5b       	subi	r30, 0xB2	; 178
     b8e:	fe 4f       	sbci	r31, 0xFE	; 254
     b90:	80 91 3d 01 	lds	r24, 0x013D
     b94:	90 91 3e 01 	lds	r25, 0x013E
     b98:	8a 19       	sub	r24, r10
     b9a:	9b 09       	sbc	r25, r11
     b9c:	88 19       	sub	r24, r8
     b9e:	99 09       	sbc	r25, r9
     ba0:	91 83       	std	Z+1, r25	; 0x01
     ba2:	80 83       	st	Z, r24
        }
#endif

 
        if(PartFound != PART_THYRISTOR) {
     ba4:	80 91 07 01 	lds	r24, 0x0107
     ba8:	85 30       	cpi	r24, 0x05	; 5
     baa:	09 f4       	brne	.+2      	; 0xbae <CheckPins+0x3fe>
     bac:	68 c0       	rjmp	.+208    	; 0xc7e <CheckPins+0x4ce>
           if(adc.tp2 > 977) {
     bae:	ac 89       	ldd	r26, Y+20	; 0x14
     bb0:	bd 89       	ldd	r27, Y+21	; 0x15
     bb2:	e3 e0       	ldi	r30, 0x03	; 3
     bb4:	a2 3d       	cpi	r26, 0xD2	; 210
     bb6:	be 07       	cpc	r27, r30
     bb8:	30 f0       	brcs	.+12     	; 0xbc6 <CheckPins+0x416>
              //PNP-Transistor is found (Base voltage moves to VCC)
              PartFound = PART_TRANSISTOR;
     bba:	82 e0       	ldi	r24, 0x02	; 2
     bbc:	80 93 07 01 	sts	0x0107, r24
              PartMode = PART_MODE_PNP;
     bc0:	80 93 06 01 	sts	0x0106, r24
     bc4:	56 c0       	rjmp	.+172    	; 0xc72 <CheckPins+0x4c2>
           } else {
              if((adc.lp_otr < 97) && (adc.lp1 > 2000)) {
     bc6:	29 85       	ldd	r18, Y+9	; 0x09
     bc8:	3a 85       	ldd	r19, Y+10	; 0x0a
     bca:	21 36       	cpi	r18, 0x61	; 97
     bcc:	31 05       	cpc	r19, r1
     bce:	08 f0       	brcs	.+2      	; 0xbd2 <CheckPins+0x422>
     bd0:	50 c0       	rjmp	.+160    	; 0xc72 <CheckPins+0x4c2>
     bd2:	89 89       	ldd	r24, Y+17	; 0x11
     bd4:	9a 89       	ldd	r25, Y+18	; 0x12
     bd6:	a7 e0       	ldi	r26, 0x07	; 7
     bd8:	81 3d       	cpi	r24, 0xD1	; 209
     bda:	9a 07       	cpc	r25, r26
     bdc:	08 f4       	brcc	.+2      	; 0xbe0 <CheckPins+0x430>
     bde:	49 c0       	rjmp	.+146    	; 0xc72 <CheckPins+0x4c2>
                 //is flow voltage low enough in the closed  state?
                 //(since D-Mode-FET would be by mistake detected as E-Mode )
        	 PartFound = PART_FET;		//P-Kanal-MOSFET is found (Basis/Gate moves not to VCC)
     be0:	83 e0       	ldi	r24, 0x03	; 3
     be2:	80 93 07 01 	sts	0x0107, r24
        	 PartMode = PART_MODE_P_E_MOS;
     be6:	80 93 06 01 	sts	0x0106, r24
                 }
#else
                 //Switching of Drain is monitored with digital input
                 // Low level is specified up to 0.3 * VCC
                 // High level is specified above 0.6 * VCC
                 PinMSK = LoADCm & 7;
     bea:	eb 80       	ldd	r14, Y+3	; 0x03
     bec:	b7 e0       	ldi	r27, 0x07	; 7
     bee:	eb 22       	and	r14, r27
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
     bf0:	82 2d       	mov	r24, r2
     bf2:	80 64       	ori	r24, 0x40	; 64
     bf4:	80 93 7c 00 	sts	0x007C, r24
        	 gthvoltage = 1;			// round up ((1*4)/9)
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	90 93 57 01 	sts	0x0157, r25
     c00:	80 93 56 01 	sts	0x0156, r24
        	 for(ii=0;ii<11;ii++) {
     c04:	40 e0       	ldi	r20, 0x00	; 0
        	    wdt_reset();
     c06:	a8 95       	wdr
        	    ChargePin10ms(TriPinRL,1);
     c08:	8d 2d       	mov	r24, r13
     c0a:	61 e0       	ldi	r22, 0x01	; 1
     c0c:	4e 8b       	std	Y+22, r20	; 0x16
     c0e:	0e 94 bd 03 	call	0x77a	; 0x77a <ChargePin10ms>
                    R_DDR = LoPinRL | TriPinRH;		//switch R_H for Tristate-Pin (Basis) to GND
     c12:	e8 89       	ldd	r30, Y+16	; 0x10
     c14:	e4 b9       	out	0x04, r30	; 4
     c16:	4e 89       	ldd	r20, Y+22	; 0x16
        	    while (!(ADC_PIN&PinMSK));		// Wait, until the MOSFET switches and Drain moves to VCC
     c18:	86 b1       	in	r24, 0x06	; 6
     c1a:	8e 21       	and	r24, r14
     c1c:	e9 f3       	breq	.-6      	; 0xc18 <CheckPins+0x468>
                    			// 1 is detected with more than 2.5V (up to 2.57V) with tests of mega168 and mega328
        	    R_DDR = LoPinRL;
     c1e:	fa 81       	ldd	r31, Y+2	; 0x02
     c20:	f4 b9       	out	0x04, r31	; 4
        	    ADCSRA |= (1<<ADSC);		// Start Conversion
     c22:	80 91 7a 00 	lds	r24, 0x007A
     c26:	80 64       	ori	r24, 0x40	; 64
     c28:	80 93 7a 00 	sts	0x007A, r24
        	    while (ADCSRA&(1<<ADSC));		// wait
     c2c:	80 91 7a 00 	lds	r24, 0x007A
     c30:	86 fd       	sbrc	r24, 6
     c32:	fc cf       	rjmp	.-8      	; 0xc2c <CheckPins+0x47c>
      		    gthvoltage += (1023 - ADCW);	// Add Tristatepin-Voltage
     c34:	20 91 78 00 	lds	r18, 0x0078
     c38:	30 91 79 00 	lds	r19, 0x0079
     c3c:	80 91 56 01 	lds	r24, 0x0156
     c40:	90 91 57 01 	lds	r25, 0x0157
     c44:	81 50       	subi	r24, 0x01	; 1
     c46:	9c 4f       	sbci	r25, 0xFC	; 252
     c48:	82 1b       	sub	r24, r18
     c4a:	93 0b       	sbc	r25, r19
     c4c:	90 93 57 01 	sts	0x0157, r25
     c50:	80 93 56 01 	sts	0x0156, r24
                 // Low level is specified up to 0.3 * VCC
                 // High level is specified above 0.6 * VCC
                 PinMSK = LoADCm & 7;
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
        	 gthvoltage = 1;			// round up ((1*4)/9)
        	 for(ii=0;ii<11;ii++) {
     c54:	4f 5f       	subi	r20, 0xFF	; 255
     c56:	4b 30       	cpi	r20, 0x0B	; 11
     c58:	b1 f6       	brne	.-84     	; 0xc06 <CheckPins+0x456>
        	    ADCSRA |= (1<<ADSC);		// Start Conversion
        	    while (ADCSRA&(1<<ADSC));		// wait
      		    gthvoltage += (1023 - ADCW);	// Add Tristatepin-Voltage
                 }
#endif
                 gthvoltage *= 4;		// is equal to 44*ADCW
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
                 gthvoltage /= 9;		// gives resolution in mV
     c62:	69 e0       	ldi	r22, 0x09	; 9
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <__udivmodhi4>
     c6a:	70 93 57 01 	sts	0x0157, r23
     c6e:	60 93 56 01 	sts	0x0156, r22
              }
           }
           trans.b = TristatePin;
     c72:	20 92 52 01 	sts	0x0152, r2
           trans.c = LowPin;
     c76:	30 92 53 01 	sts	0x0153, r3
           trans.e = HighPin;
     c7a:	10 93 54 01 	sts	0x0154, r17
        }  // end if PartFound != PART_THYRISTOR
    } // end component has current => PNP

#ifdef COMMON_COLLECTOR
    // Low-Pin=RL- HighPin=VCC
    R_DDR = LoPinRL | TriPinRL;
     c7e:	2f 85       	ldd	r18, Y+15	; 0x0f
     c80:	24 b9       	out	0x04, r18	; 4
    R_PORT = TriPinRL;			// TriPin=RL+  NPN with common Collector
     c82:	d5 b8       	out	0x05, r13	; 5
    adc.lp1 = W5msReadADC(LowPin);	// voltage at Emitter resistor
     c84:	83 2d       	mov	r24, r3
     c86:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
     c8a:	2c 01       	movw	r4, r24
    adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     c8c:	80 91 3d 01 	lds	r24, 0x013D
     c90:	90 91 3e 01 	lds	r25, 0x013E
     c94:	9a 8b       	std	Y+18, r25	; 0x12
     c96:	89 8b       	std	Y+17, r24	; 0x11
     c98:	82 2d       	mov	r24, r2
     c9a:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
     c9e:	a9 89       	ldd	r26, Y+17	; 0x11
     ca0:	ba 89       	ldd	r27, Y+18	; 0x12
     ca2:	a8 1b       	sub	r26, r24
     ca4:	b9 0b       	sbc	r27, r25
     ca6:	ba 8b       	std	Y+18, r27	; 0x12
     ca8:	a9 8b       	std	Y+17, r26	; 0x11
    if (adc.tp1 < 10) {
     caa:	aa 30       	cpi	r26, 0x0A	; 10
     cac:	b1 05       	cpc	r27, r1
     cae:	b0 f5       	brcc	.+108    	; 0xd1c <CheckPins+0x56c>
       R_DDR = LoPinRL | TriPinRH;
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	80 2b       	or	r24, r16
     cb4:	84 b9       	out	0x04, r24	; 4
       R_PORT = TriPinRH;		// Tripin=RH+
     cb6:	05 b9       	out	0x05, r16	; 5
       adc.lp1 = W5msReadADC(LowPin);
     cb8:	83 2d       	mov	r24, r3
     cba:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
     cbe:	2c 01       	movw	r4, r24
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     cc0:	e0 91 3d 01 	lds	r30, 0x013D
     cc4:	f0 91 3e 01 	lds	r31, 0x013E
     cc8:	fa 8b       	std	Y+18, r31	; 0x12
     cca:	e9 8b       	std	Y+17, r30	; 0x11
     ccc:	82 2d       	mov	r24, r2
     cce:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
     cd2:	29 89       	ldd	r18, Y+17	; 0x11
     cd4:	3a 89       	ldd	r19, Y+18	; 0x12
     cd6:	28 1b       	sub	r18, r24
     cd8:	39 0b       	sbc	r19, r25
     cda:	3a 8b       	std	Y+18, r19	; 0x12
     cdc:	29 8b       	std	Y+17, r18	; 0x11
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     cde:	42 01       	movw	r8, r4
     ce0:	aa 24       	eor	r10, r10
     ce2:	bb 24       	eor	r11, r11
     ce4:	20 91 02 01 	lds	r18, 0x0102
     ce8:	30 91 03 01 	lds	r19, 0x0103
     cec:	40 e0       	ldi	r20, 0x00	; 0
     cee:	50 e0       	ldi	r21, 0x00	; 0
     cf0:	60 e6       	ldi	r22, 0x60	; 96
     cf2:	77 eb       	ldi	r23, 0xB7	; 183
     cf4:	87 e4       	ldi	r24, 0x47	; 71
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
     cfc:	c5 01       	movw	r24, r10
     cfe:	b4 01       	movw	r22, r8
     d00:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
     d04:	a9 89       	ldd	r26, Y+17	; 0x11
     d06:	ba 89       	ldd	r27, Y+18	; 0x12
     d08:	9d 01       	movw	r18, r26
     d0a:	40 e0       	ldi	r20, 0x00	; 0
     d0c:	50 e0       	ldi	r21, 0x00	; 0
       R_DDR = LoPinRL | TriPinRH;
       R_PORT = TriPinRH;		// Tripin=RH+
       adc.lp1 = W5msReadADC(LowPin);
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     d0e:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
     d12:	2c 83       	std	Y+4, r18	; 0x04
     d14:	3d 83       	std	Y+5, r19	; 0x05
     d16:	4e 83       	std	Y+6, r20	; 0x06
     d18:	5f 83       	std	Y+7, r21	; 0x07
     d1a:	0f c0       	rjmp	.+30     	; 0xd3a <CheckPins+0x58a>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
 #else
       c_hfe = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
    } else {
       c_hfe = (adc.lp1 - adc.tp1) / adc.tp1;
     d1c:	c2 01       	movw	r24, r4
     d1e:	e9 89       	ldd	r30, Y+17	; 0x11
     d20:	fa 89       	ldd	r31, Y+18	; 0x12
     d22:	8e 1b       	sub	r24, r30
     d24:	9f 0b       	sbc	r25, r31
     d26:	bf 01       	movw	r22, r30
     d28:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <__udivmodhi4>
     d2c:	cb 01       	movw	r24, r22
     d2e:	a0 e0       	ldi	r26, 0x00	; 0
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	8c 83       	std	Y+4, r24	; 0x04
     d34:	9d 83       	std	Y+5, r25	; 0x05
     d36:	ae 83       	std	Y+6, r26	; 0x06
     d38:	bf 83       	std	Y+7, r27	; 0x07
       lcd_string(utoa(adc.tp1,outval,10));
       wait_about1s();
#endif
#endif
    //Tristate (can be Base) to VCC, Test if NPN
    ADC_DDR = LoADCm;		//Low-Pin to output 0V
     d3a:	9b 81       	ldd	r25, Y+3	; 0x03
     d3c:	97 b9       	out	0x07, r25	; 7
    ADC_PORT = TXD_VAL;			//switch Low-Pin to GND
     d3e:	88 e0       	ldi	r24, 0x08	; 8
     d40:	88 b9       	out	0x08, r24	; 8
    R_DDR = TriPinRL | HiPinRL;		//RL port for High-Pin and Tristate-Pin to output
     d42:	ab 85       	ldd	r26, Y+11	; 0x0b
     d44:	a4 b9       	out	0x04, r26	; 4
    R_PORT = TriPinRL | HiPinRL;	//RL port for High-Pin and Tristate-Pin to Vcc
     d46:	a5 b9       	out	0x05, r26	; 5
    adc.hp1 = W5msReadADC(HighPin);	//measure voltage at High-Pin  (Collector)
     d48:	81 2f       	mov	r24, r17
     d4a:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
    if(adc.hp1 < 1600) {
     d4e:	b6 e0       	ldi	r27, 0x06	; 6
     d50:	80 34       	cpi	r24, 0x40	; 64
     d52:	9b 07       	cpc	r25, r27
     d54:	08 f0       	brcs	.+2      	; 0xd58 <CheckPins+0x5a8>
     d56:	4d c1       	rjmp	.+666    	; 0xff2 <CheckPins+0x842>
       lcd_data('N');
       lcd_testpin(HighPin);
       lcd_space();
       wait_about1s();
#endif
       if(PartReady==1) {
     d58:	80 91 04 01 	lds	r24, 0x0104
     d5c:	81 30       	cpi	r24, 0x01	; 1
     d5e:	09 f4       	brne	.+2      	; 0xd62 <CheckPins+0x5b2>
     d60:	b5 c1       	rjmp	.+874    	; 0x10cc <CheckPins+0x91c>
          goto widmes;
       }

       //Test auf Thyristor:
       //Gate discharge
       ChargePin10ms(TriPinRL,0);	//Tristate-Pin (Gate) across R_L 10ms to GND
     d62:	8d 2d       	mov	r24, r13
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	0e 94 bd 03 	call	0x77a	; 0x77a <ChargePin10ms>
       adc.hp3 = W5msReadADC(HighPin);	//read voltage at High-Pin (probably Anode) again
     d6a:	81 2f       	mov	r24, r17
     d6c:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
     d70:	7c 01       	movw	r14, r24
					//current should still flow, if not,
					// no Thyristor or holding current to low 
		 	
       R_PORT = 0;			//switch R_L for High-Pin (probably Anode) to GND (turn off)
     d72:	15 b8       	out	0x05, r1	; 5
       wait_about5ms();
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	0e 94 9a 03 	call	0x734	; 0x734 <sleep_5ms>
       R_PORT = HiPinRL;		//switch R_L for High-Pin (probably Anode) again to VCC
     d7c:	c5 b8       	out	0x05, r12	; 5
       adc.hp2 = W5msReadADC(HighPin);	//measure voltage at the High-Pin (probably Anode) again
     d7e:	81 2f       	mov	r24, r17
     d80:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
       if((adc.hp3 < 1600) && (adc.hp2 > 4400)) {
     d84:	e0 e4       	ldi	r30, 0x40	; 64
     d86:	ee 16       	cp	r14, r30
     d88:	e6 e0       	ldi	r30, 0x06	; 6
     d8a:	fe 06       	cpc	r15, r30
     d8c:	08 f0       	brcs	.+2      	; 0xd90 <CheckPins+0x5e0>
     d8e:	47 c0       	rjmp	.+142    	; 0xe1e <CheckPins+0x66e>
     d90:	f1 e1       	ldi	r31, 0x11	; 17
     d92:	81 33       	cpi	r24, 0x31	; 49
     d94:	9f 07       	cpc	r25, r31
     d96:	08 f4       	brcc	.+2      	; 0xd9a <CheckPins+0x5ea>
     d98:	42 c0       	rjmp	.+132    	; 0xe1e <CheckPins+0x66e>
          //if the holding current was switched off the thyristor must be switched off too. 
          //if Thyristor was still swiched on, if gate was switched off => Thyristor
          PartFound = PART_THYRISTOR;
     d9a:	85 e0       	ldi	r24, 0x05	; 5
     d9c:	80 93 07 01 	sts	0x0107, r24
          //Test if Triac
          R_DDR = 0;
     da0:	14 b8       	out	0x04, r1	; 4
          R_PORT = 0;
     da2:	15 b8       	out	0x05, r1	; 5
          ADC_PORT = LoADCp;	//Low-Pin fix to VCC
     da4:	2b 81       	ldd	r18, Y+3	; 0x03
     da6:	28 b9       	out	0x08, r18	; 8
          wait_about5ms();
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0e 94 9a 03 	call	0x734	; 0x734 <sleep_5ms>
          R_DDR = HiPinRL;		//switch R_L port HighPin to output (GND)
     db0:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) > 244) {
     db2:	81 2f       	mov	r24, r17
     db4:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
     db8:	85 3f       	cpi	r24, 0xF5	; 245
     dba:	91 05       	cpc	r25, r1
     dbc:	08 f0       	brcs	.+2      	; 0xdc0 <CheckPins+0x610>
     dbe:	13 c1       	rjmp	.+550    	; 0xfe6 <CheckPins+0x836>
             goto savenresult;		//measure voltage at the  High-Pin (probably A2); if too high:
                                	//component has current => kein Triac
          }
          R_DDR = HiPinRL | TriPinRL;	//switch R_L port for TristatePin (Gate) to output (GND) => Triac should be triggered 
     dc0:	3b 85       	ldd	r19, Y+11	; 0x0b
     dc2:	34 b9       	out	0x04, r19	; 4
          if(W5msReadADC(TristatePin) < 977) {
     dc4:	82 2d       	mov	r24, r2
     dc6:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
     dca:	a3 e0       	ldi	r26, 0x03	; 3
     dcc:	81 3d       	cpi	r24, 0xD1	; 209
     dce:	9a 07       	cpc	r25, r26
     dd0:	08 f4       	brcc	.+2      	; 0xdd4 <CheckPins+0x624>
     dd2:	09 c1       	rjmp	.+530    	; 0xfe6 <CheckPins+0x836>
             goto savenresult; 		//measure voltage at the Tristate-Pin (probably Gate) ;
                              		// if to low, abort 
          }
          if(ReadADC(HighPin) < 733) {
     dd4:	81 2f       	mov	r24, r17
     dd6:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
     dda:	b2 e0       	ldi	r27, 0x02	; 2
     ddc:	8d 3d       	cpi	r24, 0xDD	; 221
     dde:	9b 07       	cpc	r25, r27
     de0:	08 f4       	brcc	.+2      	; 0xde4 <CheckPins+0x634>
     de2:	01 c1       	rjmp	.+514    	; 0xfe6 <CheckPins+0x836>
             goto savenresult; 		//component has no current => no Triac => abort
          }
          R_DDR = HiPinRL;		//TristatePin (Gate) to input 
     de4:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) < 733) {
     de6:	81 2f       	mov	r24, r17
     de8:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
     dec:	e2 e0       	ldi	r30, 0x02	; 2
     dee:	8d 3d       	cpi	r24, 0xDD	; 221
     df0:	9e 07       	cpc	r25, r30
     df2:	08 f4       	brcc	.+2      	; 0xdf6 <CheckPins+0x646>
     df4:	f8 c0       	rjmp	.+496    	; 0xfe6 <CheckPins+0x836>
             goto savenresult; 		//component has no current without base current => no Triac => abort
          }
          R_PORT = HiPinRL;		//switch R_L port for HighPin to VCC => switch off holding current 
     df6:	c5 b8       	out	0x05, r12	; 5
          wait_about5ms();
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	0e 94 9a 03 	call	0x734	; 0x734 <sleep_5ms>
          R_PORT = 0;			//switch R_L port for HighPin again to GND; Triac should now switched off
     e00:	15 b8       	out	0x05, r1	; 5
          if(W5msReadADC(HighPin) > 244) {
     e02:	81 2f       	mov	r24, r17
     e04:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
     e08:	85 3f       	cpi	r24, 0xF5	; 245
     e0a:	91 05       	cpc	r25, r1
     e0c:	08 f0       	brcs	.+2      	; 0xe10 <CheckPins+0x660>
     e0e:	eb c0       	rjmp	.+470    	; 0xfe6 <CheckPins+0x836>
             goto savenresult;		//measure voltage at the High-Pin (probably A2) ;
                                	//if to high, component is not switched off => no Triac, abort
         }
         PartFound = PART_TRIAC;
     e10:	84 e0       	ldi	r24, 0x04	; 4
     e12:	80 93 07 01 	sts	0x0107, r24
         PartReady = 1;
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	80 93 04 01 	sts	0x0104, r24
         goto savenresult;
     e1c:	e4 c0       	rjmp	.+456    	; 0xfe6 <CheckPins+0x836>
        }
      //Test if NPN Transistor or MOSFET
      // ADC_DDR = LoADCm;	//Low-Pin to output 0V
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
     e1e:	0c 29       	or	r16, r12
     e20:	04 b9       	out	0x04, r16	; 4
      R_PORT = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to VCC
     e22:	05 b9       	out	0x05, r16	; 5
      wait_about50ms();
     e24:	8a e0       	ldi	r24, 0x0A	; 10
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 9a 03 	call	0x734	; 0x734 <sleep_5ms>
      adc.hp2 = ADCconfig.U_AVCC - ReadADC(HighPin);	//measure the voltage at the collector resistor 
     e2c:	60 90 3d 01 	lds	r6, 0x013D
     e30:	70 90 3e 01 	lds	r7, 0x013E
     e34:	81 2f       	mov	r24, r17
     e36:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
     e3a:	68 1a       	sub	r6, r24
     e3c:	79 0a       	sbc	r7, r25
      adc.tp2 = ADCconfig.U_AVCC - ReadADC(TristatePin);	//measure the voltage at the base resistor 
     e3e:	a0 90 3d 01 	lds	r10, 0x013D
     e42:	b0 90 3e 01 	lds	r11, 0x013E
     e46:	82 2d       	mov	r24, r2
     e48:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
     e4c:	a8 1a       	sub	r10, r24
     e4e:	b9 0a       	sbc	r11, r25
       lcd_space();
       lcd_data('T');
       lcd_data('P');
       lcd_string(utoa(adc.tp2,outval,10));
#endif
      if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     e50:	80 91 07 01 	lds	r24, 0x0107
     e54:	82 50       	subi	r24, 0x02	; 2
     e56:	82 30       	cpi	r24, 0x02	; 2
     e58:	18 f4       	brcc	.+6      	; 0xe60 <CheckPins+0x6b0>
         PartReady = 1;	//check, if test is already done once
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	80 93 04 01 	sts	0x0104, r24
      }
      trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.tp2 - ReadADC(LowPin);
     e60:	80 90 04 01 	lds	r8, 0x0104
     e64:	99 24       	eor	r9, r9
     e66:	e0 90 3d 01 	lds	r14, 0x013D
     e6a:	f0 90 3e 01 	lds	r15, 0x013E
     e6e:	ea 18       	sub	r14, r10
     e70:	fb 08       	sbc	r15, r11
     e72:	83 2d       	mov	r24, r3
     e74:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
     e78:	f4 01       	movw	r30, r8
     e7a:	ee 0f       	add	r30, r30
     e7c:	ff 1f       	adc	r31, r31
     e7e:	e2 5b       	subi	r30, 0xB2	; 178
     e80:	fe 4f       	sbci	r31, 0xFE	; 254
     e82:	e8 1a       	sub	r14, r24
     e84:	f9 0a       	sbc	r15, r25
     e86:	f1 82       	std	Z+1, r15	; 0x01
     e88:	e0 82       	st	Z, r14

      //compute current amplification factor for common Emitter
      //hFE = B = Collector current / Base current
      if(adc.tp2 < 53) {
     e8a:	f5 e3       	ldi	r31, 0x35	; 53
     e8c:	af 16       	cp	r10, r31
     e8e:	b1 04       	cpc	r11, r1
     e90:	18 f4       	brcc	.+6      	; 0xe98 <CheckPins+0x6e8>
#if DebugOut == 5
         lcd_data('<');
         lcd_data('5');
         lcd_data('3');
#endif
         adc.tp2 = 53;
     e92:	75 e3       	ldi	r23, 0x35	; 53
     e94:	a7 2e       	mov	r10, r23
     e96:	b1 2c       	mov	r11, r1
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     e98:	e0 90 04 01 	lds	r14, 0x0104
     e9c:	ff 24       	eor	r15, r15
     e9e:	c3 01       	movw	r24, r6
     ea0:	a0 e0       	ldi	r26, 0x00	; 0
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	8b 87       	std	Y+11, r24	; 0x0b
     ea6:	9c 87       	std	Y+12, r25	; 0x0c
     ea8:	ad 87       	std	Y+13, r26	; 0x0d
     eaa:	be 87       	std	Y+14, r27	; 0x0e
     eac:	20 91 08 01 	lds	r18, 0x0108
     eb0:	30 91 09 01 	lds	r19, 0x0109
     eb4:	40 e0       	ldi	r20, 0x00	; 0
     eb6:	50 e0       	ldi	r21, 0x00	; 0
     eb8:	60 e6       	ldi	r22, 0x60	; 96
     eba:	77 eb       	ldi	r23, 0xB7	; 183
     ebc:	87 e4       	ldi	r24, 0x47	; 71
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
     ec4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ec6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ec8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eca:	9e 85       	ldd	r25, Y+14	; 0x0e
     ecc:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp2;	
     ed0:	95 01       	movw	r18, r10
     ed2:	40 e0       	ldi	r20, 0x00	; 0
     ed4:	50 e0       	ldi	r21, 0x00	; 0
     ed6:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
#endif
         adc.tp2 = 53;
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     eda:	f7 01       	movw	r30, r14
     edc:	ee 0f       	add	r30, r30
     ede:	ff 1f       	adc	r31, r31
     ee0:	ee 0f       	add	r30, r30
     ee2:	ff 1f       	adc	r31, r31
     ee4:	ea 5b       	subi	r30, 0xBA	; 186
     ee6:	fe 4f       	sbci	r31, 0xFE	; 254
     ee8:	20 83       	st	Z, r18
     eea:	31 83       	std	Z+1, r19	; 0x01
     eec:	42 83       	std	Z+2, r20	; 0x02
     eee:	53 83       	std	Z+3, r21	; 0x03
      trans.hfe[PartReady] = ((adc.hp2 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
#endif
#ifdef COMMON_COLLECTOR
       //compare current amplification factor for common Collector (Emitter follower)
       // hFE = (Emitterstrom - Basisstrom) / Basisstrom
       if (c_hfe >  trans.hfe[PartReady]) {
     ef0:	8c 81       	ldd	r24, Y+4	; 0x04
     ef2:	9d 81       	ldd	r25, Y+5	; 0x05
     ef4:	ae 81       	ldd	r26, Y+6	; 0x06
     ef6:	bf 81       	ldd	r27, Y+7	; 0x07
     ef8:	28 17       	cp	r18, r24
     efa:	39 07       	cpc	r19, r25
     efc:	4a 07       	cpc	r20, r26
     efe:	5b 07       	cpc	r21, r27
     f00:	a8 f4       	brcc	.+42     	; 0xf2c <CheckPins+0x77c>
          trans.hfe[PartReady] = c_hfe;
     f02:	80 83       	st	Z, r24
     f04:	91 83       	std	Z+1, r25	; 0x01
     f06:	a2 83       	std	Z+2, r26	; 0x02
     f08:	b3 83       	std	Z+3, r27	; 0x03
          trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.lp1 - adc.tp1;
     f0a:	f7 01       	movw	r30, r14
     f0c:	ee 0f       	add	r30, r30
     f0e:	ff 1f       	adc	r31, r31
     f10:	e2 5b       	subi	r30, 0xB2	; 178
     f12:	fe 4f       	sbci	r31, 0xFE	; 254
     f14:	80 91 3d 01 	lds	r24, 0x013D
     f18:	90 91 3e 01 	lds	r25, 0x013E
     f1c:	84 19       	sub	r24, r4
     f1e:	95 09       	sbc	r25, r5
     f20:	a9 89       	ldd	r26, Y+17	; 0x11
     f22:	ba 89       	ldd	r27, Y+18	; 0x12
     f24:	8a 1b       	sub	r24, r26
     f26:	9b 0b       	sbc	r25, r27
     f28:	91 83       	std	Z+1, r25	; 0x01
     f2a:	80 83       	st	Z, r24
       }
#endif

      if(adc.tp2 > 2557) {		// Basis-voltage R_H is low enough
     f2c:	be ef       	ldi	r27, 0xFE	; 254
     f2e:	ab 16       	cp	r10, r27
     f30:	b9 e0       	ldi	r27, 0x09	; 9
     f32:	bb 06       	cpc	r11, r27
     f34:	38 f0       	brcs	.+14     	; 0xf44 <CheckPins+0x794>
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
     f36:	82 e0       	ldi	r24, 0x02	; 2
     f38:	80 93 07 01 	sts	0x0107, r24
         PartMode = PART_MODE_NPN;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	80 93 06 01 	sts	0x0106, r24
     f42:	51 c0       	rjmp	.+162    	; 0xfe6 <CheckPins+0x836>
      } else { // Basis has low current
         if((adc.lp_otr < 97) && (adc.hp2 > 3400)) {
     f44:	e9 85       	ldd	r30, Y+9	; 0x09
     f46:	fa 85       	ldd	r31, Y+10	; 0x0a
     f48:	e1 36       	cpi	r30, 0x61	; 97
     f4a:	f1 05       	cpc	r31, r1
     f4c:	08 f0       	brcs	.+2      	; 0xf50 <CheckPins+0x7a0>
     f4e:	4b c0       	rjmp	.+150    	; 0xfe6 <CheckPins+0x836>
     f50:	f9 e4       	ldi	r31, 0x49	; 73
     f52:	6f 16       	cp	r6, r31
     f54:	fd e0       	ldi	r31, 0x0D	; 13
     f56:	7f 06       	cpc	r7, r31
     f58:	08 f4       	brcc	.+2      	; 0xf5c <CheckPins+0x7ac>
     f5a:	45 c0       	rjmp	.+138    	; 0xfe6 <CheckPins+0x836>
            //if flow voltage in switched off mode low enough?
            //(since D-Mode-FET will be detected in error as E-Mode )
            PartFound = PART_FET;	//N-Kanal-MOSFET is found (Basis/Gate will Not be pulled down)
     f5c:	83 e0       	ldi	r24, 0x03	; 3
     f5e:	80 93 07 01 	sts	0x0107, r24
            PartMode = PART_MODE_N_E_MOS;
     f62:	82 e0       	ldi	r24, 0x02	; 2
     f64:	80 93 06 01 	sts	0x0106, r24
            }
#else
            //Switching of Drain is monitored with digital input
            // Low level is specified up to 0.3 * VCC
            // High level is specified above 0.6 * VCC
            PinMSK = HiADCm & 7;
     f68:	e9 80       	ldd	r14, Y+1	; 0x01
     f6a:	27 e0       	ldi	r18, 0x07	; 7
     f6c:	e2 22       	and	r14, r18
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
     f6e:	82 2d       	mov	r24, r2
     f70:	80 64       	ori	r24, 0x40	; 64
     f72:	80 93 7c 00 	sts	0x007C, r24
            gthvoltage = 1;			// round up ((1*4)/9)
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	90 93 57 01 	sts	0x0157, r25
     f7e:	80 93 56 01 	sts	0x0156, r24
     f82:	4b e0       	ldi	r20, 0x0B	; 11
     f84:	a4 2e       	mov	r10, r20
            for(ii=0;ii<11;ii++) {
            	wdt_reset();
     f86:	a8 95       	wdr
            	ChargePin10ms(TriPinRL,0);	// discharge Gate 10ms with RL 
     f88:	8d 2d       	mov	r24, r13
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	0e 94 bd 03 	call	0x77a	; 0x77a <ChargePin10ms>
                R_DDR = HiPinRL | TriPinRH;	// slowly charge Gate 
     f90:	04 b9       	out	0x04, r16	; 4
                R_PORT = HiPinRL | TriPinRH;
     f92:	05 b9       	out	0x05, r16	; 5
            	while ((ADC_PIN&PinMSK));	// Wait, until the MOSFET switch and Drain moved to low 
     f94:	86 b1       	in	r24, 0x06	; 6
     f96:	8e 21       	and	r24, r14
     f98:	e9 f7       	brne	.-6      	; 0xf94 <CheckPins+0x7e4>
                		// 0 is detected with input voltage of 2.12V to 2.24V (tested with mega168 & mega328)
                R_DDR = HiPinRL;		// switch off current
     f9a:	c4 b8       	out	0x04, r12	; 4
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
     f9c:	80 91 7a 00 	lds	r24, 0x007A
     fa0:	80 64       	ori	r24, 0x40	; 64
     fa2:	80 93 7a 00 	sts	0x007A, r24
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
     fa6:	80 91 7a 00 	lds	r24, 0x007A
     faa:	86 fd       	sbrc	r24, 6
     fac:	fc cf       	rjmp	.-8      	; 0xfa6 <CheckPins+0x7f6>
            	gthvoltage += ADCW;		// add result of ADC
     fae:	80 91 78 00 	lds	r24, 0x0078
     fb2:	90 91 79 00 	lds	r25, 0x0079
     fb6:	20 91 56 01 	lds	r18, 0x0156
     fba:	30 91 57 01 	lds	r19, 0x0157
     fbe:	82 0f       	add	r24, r18
     fc0:	93 1f       	adc	r25, r19
     fc2:	90 93 57 01 	sts	0x0157, r25
     fc6:	80 93 56 01 	sts	0x0156, r24
     fca:	aa 94       	dec	r10
            // High level is specified above 0.6 * VCC
            PinMSK = HiADCm & 7;
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
            gthvoltage = 1;			// round up ((1*4)/9)
            for(ii=0;ii<11;ii++) {
     fcc:	e1 f6       	brne	.-72     	; 0xf86 <CheckPins+0x7d6>
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
            	gthvoltage += ADCW;		// add result of ADC
            }
#endif
            gthvoltage *= 4;	//is equal to 44 * ADCW
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
            gthvoltage /= 9;	//scale to mV
     fd6:	69 e0       	ldi	r22, 0x09	; 9
     fd8:	70 e0       	ldi	r23, 0x00	; 0
     fda:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <__udivmodhi4>
     fde:	70 93 57 01 	sts	0x0157, r23
     fe2:	60 93 56 01 	sts	0x0156, r22
         }
      }
savenresult:
      trans.b = TristatePin;	// save Pin-constellation
     fe6:	20 92 52 01 	sts	0x0152, r2
      trans.c = HighPin;
     fea:	10 93 53 01 	sts	0x0153, r17
      trans.e = LowPin;
     fee:	30 92 54 01 	sts	0x0154, r3
   } // end component conduct => npn
   ADC_DDR = TXD_MSK;		// switch all ADC-Ports to input
     ff2:	88 e0       	ldi	r24, 0x08	; 8
     ff4:	87 b9       	out	0x07, r24	; 7
   ADC_PORT = TXD_VAL;		// switch all ADC-Ports to 0 (no Pull up)
     ff6:	88 b9       	out	0x08, r24	; 8
   //Fertig
   //end das component has no connection between HighPin and LowPin
   goto widmes;
     ff8:	69 c0       	rjmp	.+210    	; 0x10cc <CheckPins+0x91c>
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
     ffa:	88 e0       	ldi	r24, 0x08	; 8
     ffc:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;	//Low-Pin fix to GND
     ffe:	3b 81       	ldd	r19, Y+3	; 0x03
    1000:	37 b9       	out	0x07, r19	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    1002:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
    1004:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
    1006:	8d 2d       	mov	r24, r13
    1008:	61 e0       	ldi	r22, 0x01	; 1
    100a:	0e 94 bd 03 	call	0x77a	; 0x77a <ChargePin10ms>
  adc.lp_otr = W5msReadADC(HighPin) - ReadADC(LowPin);
    100e:	81 2f       	mov	r24, r17
    1010:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
    1014:	4c 01       	movw	r8, r24
    1016:	83 2d       	mov	r24, r3
    1018:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
    101c:	88 1a       	sub	r8, r24
    101e:	99 0a       	sbc	r9, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
    1020:	88 85       	ldd	r24, Y+8	; 0x08
    1022:	84 b9       	out	0x04, r24	; 4
  R_PORT = HiPinRH;
    1024:	85 b9       	out	0x05, r24	; 5
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
    1026:	81 2f       	mov	r24, r17
    1028:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
    102c:	5c 01       	movw	r10, r24

  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    102e:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
    1030:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
    1032:	8d 2d       	mov	r24, r13
    1034:	60 e0       	ldi	r22, 0x00	; 0
    1036:	0e 94 bd 03 	call	0x77a	; 0x77a <ChargePin10ms>
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
    103a:	81 2f       	mov	r24, r17
    103c:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
    1040:	7c 01       	movw	r14, r24
    1042:	83 2d       	mov	r24, r3
    1044:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
    1048:	e8 1a       	sub	r14, r24
    104a:	f9 0a       	sbc	r15, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
    104c:	98 85       	ldd	r25, Y+8	; 0x08
    104e:	94 b9       	out	0x04, r25	; 4
  R_PORT = HiPinRH;
    1050:	95 b9       	out	0x05, r25	; 5
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
    1052:	81 2f       	mov	r24, r17
    1054:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
    1058:	e8 14       	cp	r14, r8
    105a:	f9 04       	cpc	r15, r9
    105c:	18 f0       	brcs	.+6      	; 0x1064 <CheckPins+0x8b4>
  R_PORT = HiPinRL;
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
  R_PORT = HiPinRH;
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
    105e:	a8 2e       	mov	r10, r24
    1060:	b9 2e       	mov	r11, r25
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
    1062:	47 01       	movw	r8, r14
  lcd_string(utoa(adc.hp3,outval,10));
  lcd_space();
  wait_about1s();
#endif

  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
    1064:	c4 01       	movw	r24, r8
    1066:	87 59       	subi	r24, 0x97	; 151
    1068:	90 40       	sbci	r25, 0x00	; 0
    106a:	a1 e1       	ldi	r26, 0x11	; 17
    106c:	89 38       	cpi	r24, 0x89	; 137
    106e:	9a 07       	cpc	r25, r26
    1070:	68 f5       	brcc	.+90     	; 0x10cc <CheckPins+0x91c>
    1072:	c5 01       	movw	r24, r10
    1074:	23 e0       	ldi	r18, 0x03	; 3
    1076:	96 95       	lsr	r25
    1078:	87 95       	ror	r24
    107a:	2a 95       	dec	r18
    107c:	e1 f7       	brne	.-8      	; 0x1076 <CheckPins+0x8c6>
    107e:	8a 0d       	add	r24, r10
    1080:	9b 1d       	adc	r25, r11
    1082:	88 15       	cp	r24, r8
    1084:	99 05       	cpc	r25, r9
    1086:	10 f5       	brcc	.+68     	; 0x10cc <CheckPins+0x91c>
    1088:	03 e0       	ldi	r16, 0x03	; 3
    108a:	aa 0c       	add	r10, r10
    108c:	bb 1c       	adc	r11, r11
    108e:	0a 95       	dec	r16
    1090:	e1 f7       	brne	.-8      	; 0x108a <CheckPins+0x8da>
    1092:	8a 14       	cp	r8, r10
    1094:	9b 04       	cpc	r9, r11
    1096:	d0 f4       	brcc	.+52     	; 0x10cc <CheckPins+0x91c>
     //voltage is above 0,15V and below 4,64V => Ok
     if((PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
    1098:	80 91 07 01 	lds	r24, 0x0107
    109c:	88 23       	and	r24, r24
    109e:	11 f0       	breq	.+4      	; 0x10a4 <CheckPins+0x8f4>
    10a0:	86 30       	cpi	r24, 0x06	; 6
    10a2:	19 f4       	brne	.+6      	; 0x10aa <CheckPins+0x8fa>
        PartFound = PART_DIODE;	//mark for diode only, if no other component is found
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	80 93 07 01 	sts	0x0107, r24
				//since there is a problem with Transistors with a protection diode
#if DebugOut == 4
        lcd_data('D');
#endif
     }
     diodes[NumOfDiodes].Anode = HighPin;
    10aa:	80 91 05 01 	lds	r24, 0x0105
    10ae:	e8 2f       	mov	r30, r24
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	ee 0f       	add	r30, r30
    10b4:	ff 1f       	adc	r31, r31
    10b6:	ee 0f       	add	r30, r30
    10b8:	ff 1f       	adc	r31, r31
    10ba:	e4 59       	subi	r30, 0x94	; 148
    10bc:	fe 4f       	sbci	r31, 0xFE	; 254
    10be:	10 83       	st	Z, r17
     diodes[NumOfDiodes].Cathode = LowPin;
    10c0:	31 82       	std	Z+1, r3	; 0x01
     diodes[NumOfDiodes].Voltage = adc.hp1;	// voltage in Millivolt 
    10c2:	93 82       	std	Z+3, r9	; 0x03
    10c4:	82 82       	std	Z+2, r8	; 0x02
     NumOfDiodes++;
    10c6:	8f 5f       	subi	r24, 0xFF	; 255
    10c8:	80 93 05 01 	sts	0x0105, r24
#if DebugOut == 4
  lcd_data(NumOfDiodes+'0');
#endif

widmes:
  if (NumOfDiodes > 0) goto clean_ports;
    10cc:	80 91 05 01 	lds	r24, 0x0105
    10d0:	88 23       	and	r24, r24
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <CheckPins+0x926>
    10d4:	12 c2       	rjmp	.+1060   	; 0x14fa <CheckPins+0xd4a>
  // resistor measurement
  wdt_reset();
    10d6:	a8 95       	wdr
// U_SCALE can be set to 4 for better resolution of ReadADC result
#if U_SCALE != 1
  ADCconfig.U_AVCC *= U_SCALE;	// scale to higher resolution, mV scale is not required
    10d8:	80 91 3d 01 	lds	r24, 0x013D
    10dc:	90 91 3e 01 	lds	r25, 0x013E
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	90 93 3e 01 	sts	0x013E, r25
    10ec:	80 93 3d 01 	sts	0x013D, r24
  ADCconfig.U_Bandgap *= U_SCALE;
    10f0:	80 91 3b 01 	lds	r24, 0x013B
    10f4:	90 91 3c 01 	lds	r25, 0x013C
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	90 93 3c 01 	sts	0x013C, r25
    1104:	80 93 3b 01 	sts	0x013B, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = R_ANZ_MESS;	// switch to special number of repetitions
    1108:	8e eb       	ldi	r24, 0xBE	; 190
    110a:	80 93 39 01 	sts	0x0139, r24
#endif
  #define MAX_REPEAT (700 / (5 + R_ANZ_MESS/8))
  ADC_PORT = TXD_VAL;
    110e:	88 e0       	ldi	r24, 0x08	; 8
    1110:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
    1112:	bb 81       	ldd	r27, Y+3	; 0x03
    1114:	b7 b9       	out	0x07, r27	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    1116:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;	
    1118:	c5 b8       	out	0x05, r12	; 5
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
    111a:	ee 24       	eor	r14, r14
    111c:	ff 24       	eor	r15, r15
  for (ii=1;ii<MAX_REPEAT;ii++) {
    111e:	21 e0       	ldi	r18, 0x01	; 1
    1120:	01 c0       	rjmp	.+2      	; 0x1124 <CheckPins+0x974>
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    1122:	7c 01       	movw	r14, r24
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
    1124:	83 2d       	mov	r24, r3
    1126:	2b 8b       	std	Y+19, r18	; 0x13
    1128:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
    112c:	08 2f       	mov	r16, r24
    112e:	49 2e       	mov	r4, r25
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    1130:	81 2f       	mov	r24, r17
    1132:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
     udiff = adc.hp1 - adc.hp2;
    1136:	ac 01       	movw	r20, r24
    1138:	4e 19       	sub	r20, r14
    113a:	5f 09       	sbc	r21, r15
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    113c:	2b 89       	ldd	r18, Y+19	; 0x13
    113e:	57 ff       	sbrs	r21, 7
    1140:	03 c0       	rjmp	.+6      	; 0x1148 <CheckPins+0x998>
    1142:	50 95       	com	r21
    1144:	41 95       	neg	r20
    1146:	5f 4f       	sbci	r21, 0xFF	; 255
    1148:	43 30       	cpi	r20, 0x03	; 3
    114a:	51 05       	cpc	r21, r1
    114c:	84 f4       	brge	.+32     	; 0x116e <CheckPins+0x9be>
    114e:	ac 01       	movw	r20, r24
  adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
#endif
  if (adc.tp1 > adc.hp1) {
     adc.tp1 = adc.hp1;
  }
  R_PORT = 0;
    1150:	15 b8       	out	0x05, r1	; 5
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (GND)
    1152:	e8 85       	ldd	r30, Y+8	; 0x08
    1154:	e4 b9       	out	0x04, r30	; 4
  adc.hp2 = W5msReadADC(HighPin);	// read voltage, should be down
    1156:	81 2f       	mov	r24, r17
    1158:	4e 8b       	std	Y+22, r20	; 0x16
    115a:	5b 8b       	std	Y+19, r21	; 0x13
    115c:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
  if (adc.hp2 > (20*U_SCALE)) {
    1160:	4e 89       	ldd	r20, Y+22	; 0x16
    1162:	5b 89       	ldd	r21, Y+19	; 0x13
    1164:	81 35       	cpi	r24, 0x51	; 81
    1166:	91 05       	cpc	r25, r1
    1168:	08 f0       	brcs	.+2      	; 0x116c <CheckPins+0x9bc>
    116a:	ac c1       	rjmp	.+856    	; 0x14c4 <CheckPins+0xd14>
    116c:	05 c0       	rjmp	.+10     	; 0x1178 <CheckPins+0x9c8>
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     udiff = adc.hp1 - adc.hp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.hp2 = adc.hp1;
     wdt_reset();
    116e:	a8 95       	wdr
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    1170:	2f 5f       	subi	r18, 0xFF	; 255
    1172:	29 31       	cpi	r18, 0x19	; 25
    1174:	b1 f6       	brne	.-84     	; 0x1122 <CheckPins+0x972>
    1176:	a6 c1       	rjmp	.+844    	; 0x14c4 <CheckPins+0xd14>
     lcd_string(utoa(adc.hp2, outval, 10));
     lcd_space();
#endif
     goto testend;
  }
  R_PORT = HiPinRH;		//switch R_H for High-Pin to VCC
    1178:	f8 85       	ldd	r31, Y+8	; 0x08
    117a:	f5 b9       	out	0x05, r31	; 5
  adc.hp2 = W5msReadADC(HighPin);	// voltage at resistor Rx with R_H
    117c:	81 2f       	mov	r24, r17
    117e:	4e 8b       	std	Y+22, r20	; 0x16
    1180:	5b 8b       	std	Y+19, r21	; 0x13
    1182:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
    1186:	7c 01       	movw	r14, r24

  ADC_DDR = HiADCm;		//switch High-Pin to output
    1188:	29 81       	ldd	r18, Y+1	; 0x01
    118a:	27 b9       	out	0x07, r18	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
    118c:	28 b9       	out	0x08, r18	; 8
  R_PORT = 0;
    118e:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
    1190:	3a 81       	ldd	r19, Y+2	; 0x02
    1192:	34 b9       	out	0x04, r19	; 4
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
    1194:	aa 24       	eor	r10, r10
    1196:	bb 24       	eor	r11, r11
  for (ii=1;ii<MAX_REPEAT;ii++) {
    1198:	21 e0       	ldi	r18, 0x01	; 1
    119a:	4e 89       	ldd	r20, Y+22	; 0x16
    119c:	5b 89       	ldd	r21, Y+19	; 0x13
    119e:	3a 01       	movw	r6, r20
    11a0:	01 c0       	rjmp	.+2      	; 0x11a4 <CheckPins+0x9f4>
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    11a2:	56 01       	movw	r10, r12
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
    11a4:	81 2f       	mov	r24, r17
    11a6:	2b 8b       	std	Y+19, r18	; 0x13
    11a8:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
    11ac:	4c 01       	movw	r8, r24
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    11ae:	83 2d       	mov	r24, r3
    11b0:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
    11b4:	6c 01       	movw	r12, r24
     udiff = adc.lp1 - adc.lp2;
    11b6:	8a 19       	sub	r24, r10
    11b8:	9b 09       	sbc	r25, r11
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    11ba:	2b 89       	ldd	r18, Y+19	; 0x13
    11bc:	97 ff       	sbrs	r25, 7
    11be:	03 c0       	rjmp	.+6      	; 0x11c6 <CheckPins+0xa16>
    11c0:	90 95       	com	r25
    11c2:	81 95       	neg	r24
    11c4:	9f 4f       	sbci	r25, 0xFF	; 255
    11c6:	83 30       	cpi	r24, 0x03	; 3
    11c8:	91 05       	cpc	r25, r1
    11ca:	8c f4       	brge	.+34     	; 0x11ee <CheckPins+0xa3e>
    11cc:	a3 01       	movw	r20, r6
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = MEM_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	88 0f       	add	r24, r24
  adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
#endif
  if (adc.tp2 < adc.lp1) {
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
    11d2:	84 b9       	out	0x04, r24	; 4
  adc.lp2 = W5msReadADC(LowPin);
    11d4:	83 2d       	mov	r24, r3
    11d6:	6e 8a       	std	Y+22, r6	; 0x16
    11d8:	5b 8b       	std	Y+19, r21	; 0x13
    11da:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
    11de:	3c 01       	movw	r6, r24
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    11e0:	4e 89       	ldd	r20, Y+22	; 0x16
    11e2:	5b 89       	ldd	r21, Y+19	; 0x13
    11e4:	84 e4       	ldi	r24, 0x44	; 68
    11e6:	40 3c       	cpi	r20, 0xC0	; 192
    11e8:	58 07       	cpc	r21, r24
    11ea:	30 f0       	brcs	.+12     	; 0x11f8 <CheckPins+0xa48>
    11ec:	0c c0       	rjmp	.+24     	; 0x1206 <CheckPins+0xa56>
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     udiff = adc.lp1 - adc.lp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.lp2 = adc.lp1;
     wdt_reset();
    11ee:	a8 95       	wdr
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
  R_PORT = 0;
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    11f0:	2f 5f       	subi	r18, 0xFF	; 255
    11f2:	29 31       	cpi	r18, 0x19	; 25
    11f4:	b1 f6       	brne	.-84     	; 0x11a2 <CheckPins+0x9f2>
    11f6:	66 c1       	rjmp	.+716    	; 0x14c4 <CheckPins+0xd14>
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
  adc.lp2 = W5msReadADC(LowPin);
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    11f8:	95 e8       	ldi	r25, 0x85	; 133
    11fa:	e9 16       	cp	r14, r25
    11fc:	91 e0       	ldi	r25, 0x01	; 1
    11fe:	f9 06       	cpc	r15, r25
    1200:	08 f0       	brcs	.+2      	; 0x1204 <CheckPins+0xa54>
    1202:	60 c1       	rjmp	.+704    	; 0x14c4 <CheckPins+0xd14>
    1204:	06 c0       	rjmp	.+12     	; 0x1212 <CheckPins+0xa62>
     lcd_data('F');
#endif
     goto testend; 
  }
//    if((adc.hp2 + (adc.hp2 / 61)) < adc.hp1)
  if (adc.hp2 < (4972*U_SCALE)) { 
    1206:	a0 eb       	ldi	r26, 0xB0	; 176
    1208:	ea 16       	cp	r14, r26
    120a:	ad e4       	ldi	r26, 0x4D	; 77
    120c:	fa 06       	cpc	r15, r26
    120e:	08 f0       	brcs	.+2      	; 0x1212 <CheckPins+0xa62>
    1210:	59 c1       	rjmp	.+690    	; 0x14c4 <CheckPins+0xd14>
     // voltage breaks down with low test current and it is not nearly shorted  => resistor
//     if (adc.lp1 < 120) { // take measurement with R_H 
     if (adc.lp1 < (169*U_SCALE)) { // take measurement with R_H 
    1212:	b4 ea       	ldi	r27, 0xA4	; 164
    1214:	cb 16       	cp	r12, r27
    1216:	b2 e0       	ldi	r27, 0x02	; 2
    1218:	db 06       	cpc	r13, r27
    121a:	08 f0       	brcs	.+2      	; 0x121e <CheckPins+0xa6e>
    121c:	72 c0       	rjmp	.+228    	; 0x1302 <CheckPins+0xb52>
        ii = 'H';
        if (adc.lp2 < (38*U_SCALE)) {
    121e:	e8 e9       	ldi	r30, 0x98	; 152
    1220:	6e 16       	cp	r6, r30
    1222:	71 04       	cpc	r7, r1
    1224:	08 f4       	brcc	.+2      	; 0x1228 <CheckPins+0xa78>
    1226:	4e c1       	rjmp	.+668    	; 0x14c4 <CheckPins+0xd14>
           // measurement > 60MOhm to big resistance
           goto testend;
        }
        // two measurements with R_H resistors (470k) are made:
        // lirx1 (measurement at HighPin)
        lirx1 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)adc.hp2 / (ADCconfig.U_AVCC - adc.hp2);
    1228:	80 90 3d 01 	lds	r8, 0x013D
    122c:	90 90 3e 01 	lds	r9, 0x013E
    1230:	b7 01       	movw	r22, r14
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	28 e9       	ldi	r18, 0x98	; 152
    1238:	37 eb       	ldi	r19, 0xB7	; 183
    123a:	40 e0       	ldi	r20, 0x00	; 0
    123c:	50 e0       	ldi	r21, 0x00	; 0
    123e:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
    1242:	94 01       	movw	r18, r8
    1244:	2e 19       	sub	r18, r14
    1246:	3f 09       	sbc	r19, r15
    1248:	40 e0       	ldi	r20, 0x00	; 0
    124a:	50 e0       	ldi	r21, 0x00	; 0
    124c:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
    1250:	59 01       	movw	r10, r18
    1252:	6a 01       	movw	r12, r20
        // lirx2 (measurement at LowPin)
        lirx2 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)(ADCconfig.U_AVCC - adc.lp2) / adc.lp2;
    1254:	86 18       	sub	r8, r6
    1256:	97 08       	sbc	r9, r7
    1258:	b4 01       	movw	r22, r8
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	28 e9       	ldi	r18, 0x98	; 152
    1260:	37 eb       	ldi	r19, 0xB7	; 183
    1262:	40 e0       	ldi	r20, 0x00	; 0
    1264:	50 e0       	ldi	r21, 0x00	; 0
    1266:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
    126a:	93 01       	movw	r18, r6
    126c:	40 e0       	ldi	r20, 0x00	; 0
    126e:	50 e0       	ldi	r21, 0x00	; 0
    1270:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
#define FAKT_LOW 2		//resolution is about twice as good
#else
#define FAKT_LOW 4		//resolution is about four times better
#endif
#ifdef AUTOSCALE_ADC
        if (adc.hp2 < U_INT_LIMIT) {
    1274:	f8 e7       	ldi	r31, 0x78	; 120
    1276:	ef 16       	cp	r14, r31
    1278:	ff e0       	ldi	r31, 0x0F	; 15
    127a:	ff 06       	cpc	r15, r31
    127c:	70 f4       	brcc	.+28     	; 0x129a <CheckPins+0xaea>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    127e:	c6 01       	movw	r24, r12
    1280:	b5 01       	movw	r22, r10
    1282:	e2 e0       	ldi	r30, 0x02	; 2
    1284:	66 0f       	add	r22, r22
    1286:	77 1f       	adc	r23, r23
    1288:	88 1f       	adc	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	ea 95       	dec	r30
    128e:	d1 f7       	brne	.-12     	; 0x1284 <CheckPins+0xad4>
    1290:	62 0f       	add	r22, r18
    1292:	73 1f       	adc	r23, r19
    1294:	84 1f       	adc	r24, r20
    1296:	95 1f       	adc	r25, r21
    1298:	12 c0       	rjmp	.+36     	; 0x12be <CheckPins+0xb0e>
        } else if (adc.lp2 < U_INT_LIMIT){
    129a:	88 e7       	ldi	r24, 0x78	; 120
    129c:	68 16       	cp	r6, r24
    129e:	8f e0       	ldi	r24, 0x0F	; 15
    12a0:	78 06       	cpc	r7, r24
    12a2:	a0 f4       	brcc	.+40     	; 0x12cc <CheckPins+0xb1c>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    12a4:	ca 01       	movw	r24, r20
    12a6:	b9 01       	movw	r22, r18
    12a8:	22 e0       	ldi	r18, 0x02	; 2
    12aa:	66 0f       	add	r22, r22
    12ac:	77 1f       	adc	r23, r23
    12ae:	88 1f       	adc	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	2a 95       	dec	r18
    12b4:	d1 f7       	brne	.-12     	; 0x12aa <CheckPins+0xafa>
    12b6:	6a 0d       	add	r22, r10
    12b8:	7b 1d       	adc	r23, r11
    12ba:	8c 1d       	adc	r24, r12
    12bc:	9d 1d       	adc	r25, r13
    12be:	25 e0       	ldi	r18, 0x05	; 5
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 e0       	ldi	r20, 0x00	; 0
    12c4:	50 e0       	ldi	r21, 0x00	; 0
    12c6:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
    12ca:	08 c0       	rjmp	.+16     	; 0x12dc <CheckPins+0xb2c>
        } else 
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_H measurements
    12cc:	2a 0d       	add	r18, r10
    12ce:	3b 1d       	adc	r19, r11
    12d0:	4c 1d       	adc	r20, r12
    12d2:	5d 1d       	adc	r21, r13
    12d4:	56 95       	lsr	r21
    12d6:	47 95       	ror	r20
    12d8:	37 95       	ror	r19
    12da:	27 95       	ror	r18
        }
        lrx1 *= 100;
    12dc:	ca 01       	movw	r24, r20
    12de:	b9 01       	movw	r22, r18
    12e0:	24 e6       	ldi	r18, 0x64	; 100
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
    12ec:	6b 01       	movw	r12, r22
    12ee:	7c 01       	movw	r14, r24
        lrx1 += RH_OFFSET;			// add constant for correction of systematic error
    12f0:	8c ea       	ldi	r24, 0xAC	; 172
    12f2:	9d e0       	ldi	r25, 0x0D	; 13
    12f4:	a0 e0       	ldi	r26, 0x00	; 0
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	c8 0e       	add	r12, r24
    12fa:	d9 1e       	adc	r13, r25
    12fc:	ea 1e       	adc	r14, r26
    12fe:	fb 1e       	adc	r15, r27
    1300:	78 c0       	rjmp	.+240    	; 0x13f2 <CheckPins+0xc42>
    1302:	80 2f       	mov	r24, r16
    1304:	94 2d       	mov	r25, r4
    1306:	48 17       	cp	r20, r24
    1308:	59 07       	cpc	r21, r25
    130a:	08 f4       	brcc	.+2      	; 0x130e <CheckPins+0xb5e>
    130c:	ca 01       	movw	r24, r20
    130e:	76 01       	movw	r14, r12
    1310:	c8 14       	cp	r12, r8
    1312:	d9 04       	cpc	r13, r9
    1314:	08 f4       	brcc	.+2      	; 0x1318 <CheckPins+0xb68>
    1316:	74 01       	movw	r14, r8
    1318:	3c 01       	movw	r6, r24
    131a:	84 17       	cp	r24, r20
    131c:	95 07       	cpc	r25, r21
    131e:	08 f4       	brcc	.+2      	; 0x1322 <CheckPins+0xb72>
    1320:	3a 01       	movw	r6, r20
        // two measurements with R_L resistors (680) are made:
        // lirx1 (measurement at HighPin)
        if (adc.tp1 > adc.hp1) {
           adc.hp1 = adc.tp1;		//diff negativ is illegal
        }
        lirx1 =(unsigned long)RR680PL * (unsigned long)(adc.hp1 - adc.tp1) / (ADCconfig.U_AVCC - adc.hp1);
    1322:	b3 01       	movw	r22, r6
    1324:	68 1b       	sub	r22, r24
    1326:	79 0b       	sbc	r23, r25
    1328:	80 e0       	ldi	r24, 0x00	; 0
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	20 91 08 01 	lds	r18, 0x0108
    1330:	30 91 09 01 	lds	r19, 0x0109
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	50 e0       	ldi	r21, 0x00	; 0
    1338:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
    133c:	20 91 3d 01 	lds	r18, 0x013D
    1340:	30 91 3e 01 	lds	r19, 0x013E
    1344:	26 19       	sub	r18, r6
    1346:	37 09       	sbc	r19, r7
    1348:	40 e0       	ldi	r20, 0x00	; 0
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
    1350:	49 01       	movw	r8, r18
    1352:	5a 01       	movw	r10, r20
    1354:	27 01       	movw	r4, r14
    1356:	ce 14       	cp	r12, r14
    1358:	df 04       	cpc	r13, r15
    135a:	08 f4       	brcc	.+2      	; 0x135e <CheckPins+0xbae>
    135c:	26 01       	movw	r4, r12
        if (adc.tp2 < adc.lp1) {
           adc.lp1 = adc.tp2;		//diff negativ is illegal
        }
        // lirx2 (Measurement at LowPin)
        lirx2 =(unsigned long)RR680MI * (unsigned long)(adc.tp2 -adc.lp1) / adc.lp1;
    135e:	e4 18       	sub	r14, r4
    1360:	f5 08       	sbc	r15, r5
    1362:	b7 01       	movw	r22, r14
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	20 91 02 01 	lds	r18, 0x0102
    136c:	30 91 03 01 	lds	r19, 0x0103
    1370:	40 e0       	ldi	r20, 0x00	; 0
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
    1378:	92 01       	movw	r18, r4
    137a:	40 e0       	ldi	r20, 0x00	; 0
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
//     lrx1 =(unsigned long)R_L_VAL * (unsigned long)adc.hp1 / (adc.hp3 - adc.hp1);

#ifdef AUTOSCALE_ADC
        if (adc.hp1 < U_INT_LIMIT) {
    1382:	98 e7       	ldi	r25, 0x78	; 120
    1384:	69 16       	cp	r6, r25
    1386:	9f e0       	ldi	r25, 0x0F	; 15
    1388:	79 06       	cpc	r7, r25
    138a:	70 f4       	brcc	.+28     	; 0x13a8 <CheckPins+0xbf8>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    138c:	c5 01       	movw	r24, r10
    138e:	b4 01       	movw	r22, r8
    1390:	02 e0       	ldi	r16, 0x02	; 2
    1392:	66 0f       	add	r22, r22
    1394:	77 1f       	adc	r23, r23
    1396:	88 1f       	adc	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	0a 95       	dec	r16
    139c:	d1 f7       	brne	.-12     	; 0x1392 <CheckPins+0xbe2>
    139e:	62 0f       	add	r22, r18
    13a0:	73 1f       	adc	r23, r19
    13a2:	84 1f       	adc	r24, r20
    13a4:	95 1f       	adc	r25, r21
    13a6:	12 c0       	rjmp	.+36     	; 0x13cc <CheckPins+0xc1c>
        } else if (adc.lp1 < U_INT_LIMIT) {
    13a8:	a8 e7       	ldi	r26, 0x78	; 120
    13aa:	4a 16       	cp	r4, r26
    13ac:	af e0       	ldi	r26, 0x0F	; 15
    13ae:	5a 06       	cpc	r5, r26
    13b0:	b0 f4       	brcc	.+44     	; 0x13de <CheckPins+0xc2e>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    13b2:	ca 01       	movw	r24, r20
    13b4:	b9 01       	movw	r22, r18
    13b6:	b2 e0       	ldi	r27, 0x02	; 2
    13b8:	66 0f       	add	r22, r22
    13ba:	77 1f       	adc	r23, r23
    13bc:	88 1f       	adc	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	ba 95       	dec	r27
    13c2:	d1 f7       	brne	.-12     	; 0x13b8 <CheckPins+0xc08>
    13c4:	68 0d       	add	r22, r8
    13c6:	79 1d       	adc	r23, r9
    13c8:	8a 1d       	adc	r24, r10
    13ca:	9b 1d       	adc	r25, r11
    13cc:	25 e0       	ldi	r18, 0x05	; 5
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	50 e0       	ldi	r21, 0x00	; 0
    13d4:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
    13d8:	69 01       	movw	r12, r18
    13da:	7a 01       	movw	r14, r20
    13dc:	0a c0       	rjmp	.+20     	; 0x13f2 <CheckPins+0xc42>
        } else
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_L measurements
    13de:	69 01       	movw	r12, r18
    13e0:	7a 01       	movw	r14, r20
    13e2:	c8 0c       	add	r12, r8
    13e4:	d9 1c       	adc	r13, r9
    13e6:	ea 1c       	adc	r14, r10
    13e8:	fb 1c       	adc	r15, r11
    13ea:	f6 94       	lsr	r15
    13ec:	e7 94       	ror	r14
    13ee:	d7 94       	ror	r13
    13f0:	c7 94       	ror	r12
  lcd_line4();
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
    13f2:	80 91 07 01 	lds	r24, 0x0107
    13f6:	82 30       	cpi	r24, 0x02	; 2
    13f8:	18 f0       	brcs	.+6      	; 0x1400 <CheckPins+0xc50>
    13fa:	86 30       	cpi	r24, 0x06	; 6
    13fc:	09 f0       	breq	.+2      	; 0x1400 <CheckPins+0xc50>
    13fe:	62 c0       	rjmp	.+196    	; 0x14c4 <CheckPins+0xd14>
        for (ii=0; ii<ResistorsFound; ii++) {
    1400:	50 91 55 01 	lds	r21, 0x0155
    1404:	40 e0       	ldi	r20, 0x00	; 0
           // search measurements with inverse polarity 
           thisR = &resis[ii];
           if (thisR->rt != TristatePin) {
    1406:	8b e0       	ldi	r24, 0x0B	; 11
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	3e c0       	rjmp	.+124    	; 0x1488 <CheckPins+0xcd8>
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
           // search measurements with inverse polarity 
           thisR = &resis[ii];
    140c:	24 2f       	mov	r18, r20
    140e:	30 e0       	ldi	r19, 0x00	; 0
           if (thisR->rt != TristatePin) {
    1410:	28 9f       	mul	r18, r24
    1412:	f0 01       	movw	r30, r0
    1414:	29 9f       	mul	r18, r25
    1416:	f0 0d       	add	r31, r0
    1418:	38 9f       	mul	r19, r24
    141a:	f0 0d       	add	r31, r0
    141c:	11 24       	eor	r1, r1
    141e:	e8 5e       	subi	r30, 0xE8	; 232
    1420:	fe 4f       	sbci	r31, 0xFE	; 254
    1422:	22 85       	ldd	r18, Z+10	; 0x0a
    1424:	22 15       	cp	r18, r2
    1426:	11 f0       	breq	.+4      	; 0x142c <CheckPins+0xc7c>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    1428:	4f 5f       	subi	r20, 0xFF	; 255
    142a:	2e c0       	rjmp	.+92     	; 0x1488 <CheckPins+0xcd8>
           if (thisR->rt != TristatePin) {
              continue;
           }
           // must be measurement with inverse polarity 
           // resolution is 0.1 Ohm, 1 Ohm = 10 !
           lirx1 = (labs((long)lrx1 - (long)thisR->rx) * 10) / (lrx1 + thisR->rx + 100);
    142c:	80 80       	ld	r8, Z
    142e:	91 80       	ldd	r9, Z+1	; 0x01
    1430:	a2 80       	ldd	r10, Z+2	; 0x02
    1432:	b3 80       	ldd	r11, Z+3	; 0x03
    1434:	c7 01       	movw	r24, r14
    1436:	b6 01       	movw	r22, r12
    1438:	68 19       	sub	r22, r8
    143a:	79 09       	sbc	r23, r9
    143c:	8a 09       	sbc	r24, r10
    143e:	9b 09       	sbc	r25, r11
    1440:	97 ff       	sbrs	r25, 7
    1442:	07 c0       	rjmp	.+14     	; 0x1452 <CheckPins+0xca2>
    1444:	90 95       	com	r25
    1446:	80 95       	com	r24
    1448:	70 95       	com	r23
    144a:	61 95       	neg	r22
    144c:	7f 4f       	sbci	r23, 0xFF	; 255
    144e:	8f 4f       	sbci	r24, 0xFF	; 255
    1450:	9f 4f       	sbci	r25, 0xFF	; 255
    1452:	2a e0       	ldi	r18, 0x0A	; 10
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	40 e0       	ldi	r20, 0x00	; 0
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
    145e:	a5 01       	movw	r20, r10
    1460:	94 01       	movw	r18, r8
    1462:	2c 59       	subi	r18, 0x9C	; 156
    1464:	3f 4f       	sbci	r19, 0xFF	; 255
    1466:	4f 4f       	sbci	r20, 0xFF	; 255
    1468:	5f 4f       	sbci	r21, 0xFF	; 255
    146a:	2c 0d       	add	r18, r12
    146c:	3d 1d       	adc	r19, r13
    146e:	4e 1d       	adc	r20, r14
    1470:	5f 1d       	adc	r21, r15
    1472:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
           if (lirx1  > 0) {
    1476:	21 15       	cp	r18, r1
    1478:	31 05       	cpc	r19, r1
    147a:	41 05       	cpc	r20, r1
    147c:	51 05       	cpc	r21, r1
    147e:	11 f5       	brne	.+68     	; 0x14c4 <CheckPins+0xd14>
              DisplayValue(lirx1,-1,LCD_CHAR_OMEGA,3)
              lcd_space();
#endif
              goto testend; // <10% mismatch
           }
           PartFound = PART_RESISTOR;
    1480:	86 e0       	ldi	r24, 0x06	; 6
    1482:	80 93 07 01 	sts	0x0107, r24
           goto testend;
    1486:	1e c0       	rjmp	.+60     	; 0x14c4 <CheckPins+0xd14>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    1488:	45 17       	cp	r20, r21
    148a:	08 f4       	brcc	.+2      	; 0x148e <CheckPins+0xcde>
    148c:	bf cf       	rjmp	.-130    	; 0x140c <CheckPins+0xc5c>
           }
           PartFound = PART_RESISTOR;
           goto testend;
        } // end for
        // no same resistor with the same Tristate-Pin found, new one
        thisR = &resis[ResistorsFound];		// pointer to a free resistor structure
    148e:	25 2f       	mov	r18, r21
    1490:	30 e0       	ldi	r19, 0x00	; 0
        thisR->rx = lrx1;		// save resistor value
    1492:	8b e0       	ldi	r24, 0x0B	; 11
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	28 9f       	mul	r18, r24
    1498:	f0 01       	movw	r30, r0
    149a:	29 9f       	mul	r18, r25
    149c:	f0 0d       	add	r31, r0
    149e:	38 9f       	mul	r19, r24
    14a0:	f0 0d       	add	r31, r0
    14a2:	11 24       	eor	r1, r1
    14a4:	e8 5e       	subi	r30, 0xE8	; 232
    14a6:	fe 4f       	sbci	r31, 0xFE	; 254
    14a8:	c0 82       	st	Z, r12
    14aa:	d1 82       	std	Z+1, r13	; 0x01
    14ac:	e2 82       	std	Z+2, r14	; 0x02
    14ae:	f3 82       	std	Z+3, r15	; 0x03
#if FLASHEND > 0x1fff
        thisR->lx = 0;			// no inductance
    14b0:	14 82       	std	Z+4, r1	; 0x04
    14b2:	15 82       	std	Z+5, r1	; 0x05
    14b4:	16 82       	std	Z+6, r1	; 0x06
    14b6:	17 82       	std	Z+7, r1	; 0x07
#endif
        thisR->ra = LowPin;		// save Pin numbers
    14b8:	30 86       	std	Z+8, r3	; 0x08
        thisR->rb = HighPin;
    14ba:	11 87       	std	Z+9, r17	; 0x09
        thisR->rt = TristatePin;	// Tristate is saved for easier search of inverse measurement
    14bc:	22 86       	std	Z+10, r2	; 0x0a
        ResistorsFound++;			// 1 more resistor found
    14be:	5f 5f       	subi	r21, 0xFF	; 255
    14c0:	50 93 55 01 	sts	0x0155, r21
#endif
     }
  }
  testend:
#if U_SCALE != 1
  ADCconfig.U_AVCC /= U_SCALE;		// scale back to mV resolution
    14c4:	80 91 3d 01 	lds	r24, 0x013D
    14c8:	90 91 3e 01 	lds	r25, 0x013E
    14cc:	96 95       	lsr	r25
    14ce:	87 95       	ror	r24
    14d0:	96 95       	lsr	r25
    14d2:	87 95       	ror	r24
    14d4:	90 93 3e 01 	sts	0x013E, r25
    14d8:	80 93 3d 01 	sts	0x013D, r24
  ADCconfig.U_Bandgap /= U_SCALE;
    14dc:	80 91 3b 01 	lds	r24, 0x013B
    14e0:	90 91 3c 01 	lds	r25, 0x013C
    14e4:	96 95       	lsr	r25
    14e6:	87 95       	ror	r24
    14e8:	96 95       	lsr	r25
    14ea:	87 95       	ror	r24
    14ec:	90 93 3c 01 	sts	0x013C, r25
    14f0:	80 93 3b 01 	sts	0x013B, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = ANZ_MESS;		// switch back to standard number of repetition
    14f4:	89 e1       	ldi	r24, 0x19	; 25
    14f6:	80 93 39 01 	sts	0x0139, r24
#if DebugOut < 10
  wait_about2s();
#endif
#endif
 clean_ports:
  ADC_DDR = TXD_MSK;		// all ADC-Pins Input
    14fa:	88 e0       	ldi	r24, 0x08	; 8
    14fc:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// all ADC outputs to Ground, keine Pull up
    14fe:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// all resistor-outputs to Input
    1500:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// all resistor-outputs to Ground, no Pull up
    1502:	15 b8       	out	0x05, r1	; 5
} // end CheckPins()
    1504:	66 96       	adiw	r28, 0x16	; 22
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	de bf       	out	0x3e, r29	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	cd bf       	out	0x3d, r28	; 61
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	ff 90       	pop	r15
    151a:	ef 90       	pop	r14
    151c:	df 90       	pop	r13
    151e:	cf 90       	pop	r12
    1520:	bf 90       	pop	r11
    1522:	af 90       	pop	r10
    1524:	9f 90       	pop	r9
    1526:	8f 90       	pop	r8
    1528:	7f 90       	pop	r7
    152a:	6f 90       	pop	r6
    152c:	5f 90       	pop	r5
    152e:	4f 90       	pop	r4
    1530:	3f 90       	pop	r3
    1532:	2f 90       	pop	r2
    1534:	08 95       	ret

00001536 <AutoCheck>:
void AutoCheck(void) {
    1536:	2f 92       	push	r2
    1538:	3f 92       	push	r3
    153a:	4f 92       	push	r4
    153c:	5f 92       	push	r5
    153e:	6f 92       	push	r6
    1540:	7f 92       	push	r7
    1542:	8f 92       	push	r8
    1544:	9f 92       	push	r9
    1546:	af 92       	push	r10
    1548:	bf 92       	push	r11
    154a:	cf 92       	push	r12
    154c:	df 92       	push	r13
    154e:	ef 92       	push	r14
    1550:	ff 92       	push	r15
    1552:	0f 93       	push	r16
    1554:	1f 93       	push	r17
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	2e 97       	sbiw	r28, 0x0e	; 14
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	de bf       	out	0x3e, r29	; 62
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	cd bf       	out	0x3d, r28	; 61

#ifdef AUTO_CAL
  uint8_t cap_found;	// counter for found capacitor
  int8_t udiff2;
#endif
  ADC_PORT = TXD_VAL;
    156a:	88 e0       	ldi	r24, 0x08	; 8
    156c:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = TXD_MSK;
    156e:	87 b9       	out	0x07, r24	; 7
  R_PORT = (1<<(TP1*2));		//Pin 1 over RL to +
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	85 b9       	out	0x05, r24	; 5
  R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//Pin 2 over RL to -
    1574:	85 e0       	ldi	r24, 0x05	; 5
    1576:	84 b9       	out	0x04, r24	; 4
  adcmv[0] = W5msReadADC(PC0);		// voltage at Pin 1
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
    157e:	8c 01       	movw	r16, r24
    1580:	9a 83       	std	Y+2, r25	; 0x02
    1582:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = ReadADC(PC1);		// voltage at Pin 2
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
    158a:	7c 01       	movw	r14, r24
    158c:	9c 83       	std	Y+4, r25	; 0x04
    158e:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = ReadADC(PC2);		// voltage at Pin 3
    1590:	82 e0       	ldi	r24, 0x02	; 2
    1592:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
    1596:	9c 01       	movw	r18, r24
    1598:	9e 83       	std	Y+6, r25	; 0x06
    159a:	8d 83       	std	Y+5, r24	; 0x05
  if (abs((int)(adcmv[1] - adcmv[0])) > 20) {
    159c:	e0 1a       	sub	r14, r16
    159e:	f1 0a       	sbc	r15, r17
    15a0:	f7 fe       	sbrs	r15, 7
    15a2:	04 c0       	rjmp	.+8      	; 0x15ac <AutoCheck+0x76>
    15a4:	f0 94       	com	r15
    15a6:	e1 94       	neg	r14
    15a8:	f1 08       	sbc	r15, r1
    15aa:	f3 94       	inc	r15
    15ac:	85 e1       	ldi	r24, 0x15	; 21
    15ae:	e8 16       	cp	r14, r24
    15b0:	f1 04       	cpc	r15, r1
    15b2:	0c f0       	brlt	.+2      	; 0x15b6 <AutoCheck+0x80>
    15b4:	69 c4       	rjmp	.+2258   	; 0x1e88 <AutoCheck+0x952>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[2] - adcmv[0])) > 20) {
    15b6:	20 1b       	sub	r18, r16
    15b8:	31 0b       	sbc	r19, r17
    15ba:	37 ff       	sbrs	r19, 7
    15bc:	03 c0       	rjmp	.+6      	; 0x15c4 <AutoCheck+0x8e>
    15be:	30 95       	com	r19
    15c0:	21 95       	neg	r18
    15c2:	3f 4f       	sbci	r19, 0xFF	; 255
    15c4:	25 31       	cpi	r18, 0x15	; 21
    15c6:	31 05       	cpc	r19, r1
    15c8:	0c f0       	brlt	.+2      	; 0x15cc <AutoCheck+0x96>
    15ca:	5e c4       	rjmp	.+2236   	; 0x1e88 <AutoCheck+0x952>
     return;				//difference to big, no selftest
  }
  if (abs((int)((adcmv[0]*2) - ADCconfig.U_AVCC)) > 60) {
    15cc:	00 0f       	add	r16, r16
    15ce:	11 1f       	adc	r17, r17
    15d0:	80 91 3d 01 	lds	r24, 0x013D
    15d4:	90 91 3e 01 	lds	r25, 0x013E
    15d8:	08 1b       	sub	r16, r24
    15da:	19 0b       	sbc	r17, r25
    15dc:	17 ff       	sbrs	r17, 7
    15de:	03 c0       	rjmp	.+6      	; 0x15e6 <AutoCheck+0xb0>
    15e0:	10 95       	com	r17
    15e2:	01 95       	neg	r16
    15e4:	1f 4f       	sbci	r17, 0xFF	; 255
    15e6:	0d 33       	cpi	r16, 0x3D	; 61
    15e8:	11 05       	cpc	r17, r1
    15ea:	0c f0       	brlt	.+2      	; 0x15ee <AutoCheck+0xb8>
    15ec:	4d c4       	rjmp	.+2202   	; 0x1e88 <AutoCheck+0x952>
     return;				//difference to big, no selftest
  }
  R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//Pin 3 over RL to - (Pin 1 over RL to +)
    15ee:	81 e1       	ldi	r24, 0x11	; 17
    15f0:	84 b9       	out	0x04, r24	; 4
  adcmv[0] = W5msReadADC(PC0);		// voltage at Pin 1
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
    15f8:	8c 01       	movw	r16, r24
    15fa:	9a 83       	std	Y+2, r25	; 0x02
    15fc:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = ReadADC(PC1);		// voltage at Pin 2
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
    1604:	7c 01       	movw	r14, r24
    1606:	9c 83       	std	Y+4, r25	; 0x04
    1608:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = ReadADC(PC2);		// voltage at Pin 3
    160a:	82 e0       	ldi	r24, 0x02	; 2
    160c:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
    1610:	9c 01       	movw	r18, r24
    1612:	9e 83       	std	Y+6, r25	; 0x06
    1614:	8d 83       	std	Y+5, r24	; 0x05
  if (abs((int)(adcmv[1] - adcmv[0])) > 20) {
    1616:	e0 1a       	sub	r14, r16
    1618:	f1 0a       	sbc	r15, r17
    161a:	f7 fe       	sbrs	r15, 7
    161c:	04 c0       	rjmp	.+8      	; 0x1626 <AutoCheck+0xf0>
    161e:	f0 94       	com	r15
    1620:	e1 94       	neg	r14
    1622:	f1 08       	sbc	r15, r1
    1624:	f3 94       	inc	r15
    1626:	e5 e1       	ldi	r30, 0x15	; 21
    1628:	ee 16       	cp	r14, r30
    162a:	f1 04       	cpc	r15, r1
    162c:	0c f0       	brlt	.+2      	; 0x1630 <AutoCheck+0xfa>
    162e:	2c c4       	rjmp	.+2136   	; 0x1e88 <AutoCheck+0x952>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[2] - adcmv[0])) > 20) {
    1630:	20 1b       	sub	r18, r16
    1632:	31 0b       	sbc	r19, r17
    1634:	37 ff       	sbrs	r19, 7
    1636:	03 c0       	rjmp	.+6      	; 0x163e <AutoCheck+0x108>
    1638:	30 95       	com	r19
    163a:	21 95       	neg	r18
    163c:	3f 4f       	sbci	r19, 0xFF	; 255
    163e:	25 31       	cpi	r18, 0x15	; 21
    1640:	31 05       	cpc	r19, r1
    1642:	0c f0       	brlt	.+2      	; 0x1646 <AutoCheck+0x110>
    1644:	21 c4       	rjmp	.+2114   	; 0x1e88 <AutoCheck+0x952>
     return;				//difference to big, no selftest
  }
  if (abs((int)((adcmv[0]*2) - ADCconfig.U_AVCC)) > 60) {
    1646:	00 0f       	add	r16, r16
    1648:	11 1f       	adc	r17, r17
    164a:	80 91 3d 01 	lds	r24, 0x013D
    164e:	90 91 3e 01 	lds	r25, 0x013E
    1652:	08 1b       	sub	r16, r24
    1654:	19 0b       	sbc	r17, r25
    1656:	17 ff       	sbrs	r17, 7
    1658:	03 c0       	rjmp	.+6      	; 0x1660 <AutoCheck+0x12a>
    165a:	10 95       	com	r17
    165c:	01 95       	neg	r16
    165e:	1f 4f       	sbci	r17, 0xFF	; 255
    1660:	0d 33       	cpi	r16, 0x3D	; 61
    1662:	11 05       	cpc	r17, r1
    1664:	0c f0       	brlt	.+2      	; 0x1668 <AutoCheck+0x132>
    1666:	10 c4       	rjmp	.+2080   	; 0x1e88 <AutoCheck+0x952>
     return;				//difference to big, no selftest
  }
#ifdef WITH_SELFTEST
  lcd_clear();
    1668:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_clear>
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
    166c:	84 ec       	ldi	r24, 0xC4	; 196
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
  wait_about1s();
    1674:	88 ec       	ldi	r24, 0xC8	; 200
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	0e 94 9a 03 	call	0x734	; 0x734 <sleep_5ms>
    167c:	66 24       	eor	r6, r6
    167e:	77 24       	eor	r7, r7
 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    1680:	11 e0       	ldi	r17, 0x01	; 1
           adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
           lcd_fix2_string(RH1H);	// "RH_Hi="
        }
        if (tt == 7) { // can we switch the ADC pins to VCC across the R_H resistor?
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_H_VAL*100));
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    1682:	e2 e0       	ldi	r30, 0x02	; 2
    1684:	ce 2e       	mov	r12, r30
           R_DDR = (2<<(TP1*2)) | (1<<(TP1*2));	//RH1 to +, RL1 to -
           adcmv[0] = W20msReadADC(TP1);
           adcmv[0] -= u680;
           R_PORT = 2<<(TP2*2);		//RH2 to VCC
    1686:	78 e0       	ldi	r23, 0x08	; 8
    1688:	e7 2e       	mov	r14, r23
           R_DDR = (2<<(TP2*2)) | (1<<(TP2*2));	//RH2 to +, RL2 to -
           adcmv[1] = W20msReadADC(TP2);
           adcmv[1] -= u680;
           R_PORT = 2<<(TP3*2);		//RH3 to VCC
    168a:	60 e2       	ldi	r22, 0x20	; 32
    168c:	f6 2e       	mov	r15, r22
           R_DDR = (2<<(TP3*2)) | (1<<(TP3*2));	//RH3 to +, RL3 to -
    168e:	50 e3       	ldi	r21, 0x30	; 48
    1690:	b5 2e       	mov	r11, r21
    1692:	74 c1       	rjmp	.+744    	; 0x197c <AutoCheck+0x446>
  wait_about1s();
 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
        lcd_line2();			//Cursor to column 1, row 2
    1694:	80 ec       	ldi	r24, 0xC0	; 192
    1696:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
        lcd_clear_line();		// clear total line
    169a:	0e 94 96 02 	call	0x52c	; 0x52c <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    169e:	80 e8       	ldi	r24, 0x80	; 128
    16a0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
        lcd_clear_line();		// clear total line
    16a4:	0e 94 96 02 	call	0x52c	; 0x52c <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    16a8:	80 e8       	ldi	r24, 0x80	; 128
    16aa:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
        lcd_data('T');			//output the Testmode "T"
    16ae:	84 e5       	ldi	r24, 0x54	; 84
    16b0:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
        lcd_string(utoa(tt, outval, 10));	//output Test number
    16b4:	c3 01       	movw	r24, r6
    16b6:	6c e0       	ldi	r22, 0x0C	; 12
    16b8:	71 e0       	ldi	r23, 0x01	; 1
    16ba:	4a e0       	ldi	r20, 0x0A	; 10
    16bc:	50 e0       	ldi	r21, 0x00	; 0
    16be:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <utoa>
    16c2:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_string>
        lcd_space();
    16c6:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_space>
                                        //############################################
        if (tt == 1) {   // output of reference voltage and factors for capacity measurement
    16ca:	fd 2d       	mov	r31, r13
    16cc:	f1 30       	cpi	r31, 0x01	; 1
    16ce:	81 f5       	brne	.+96     	; 0x1730 <AutoCheck+0x1fa>
           ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    16d0:	8e eb       	ldi	r24, 0xBE	; 190
    16d2:	80 93 39 01 	sts	0x0139, r24
 #ifdef WITH_AUTO_REF
           (void) ReadADC(MUX_INT_REF);	// read reference voltage 
    16d6:	8e e0       	ldi	r24, 0x0E	; 14
    16d8:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
           ref_mv = W5msReadADC(MUX_INT_REF);	// read reference voltage 
    16dc:	8e e0       	ldi	r24, 0x0E	; 14
    16de:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
    16e2:	90 93 40 01 	sts	0x0140, r25
    16e6:	80 93 3f 01 	sts	0x013F, r24
           RefVoltage();		//compute RHmultip = f(reference voltage)
    16ea:	0e 94 46 02 	call	0x48c	; 0x48c <RefVoltage>
 #endif
           lcd_fix2_string(URefT);	//"URef="
    16ee:	83 ee       	ldi	r24, 0xE3	; 227
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
           DisplayValue(ref_mv,-3,'V',4);
    16f6:	60 91 3f 01 	lds	r22, 0x013F
    16fa:	70 91 40 01 	lds	r23, 0x0140
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	4d ef       	ldi	r20, 0xFD	; 253
    1704:	26 e5       	ldi	r18, 0x56	; 86
    1706:	04 e0       	ldi	r16, 0x04	; 4
    1708:	0e 94 9e 02 	call	0x53c	; 0x53c <DisplayValue>
           lcd_line2();			//Cursor to column 1, row 2
    170c:	80 ec       	ldi	r24, 0xC0	; 192
    170e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
           lcd_fix2_string(RHfakt);	//"RHf="
    1712:	88 ee       	ldi	r24, 0xE8	; 232
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
           lcd_string(utoa(RHmultip, outval, 10));
    171a:	80 91 00 01 	lds	r24, 0x0100
    171e:	90 91 01 01 	lds	r25, 0x0101
    1722:	6c e0       	ldi	r22, 0x0C	; 12
    1724:	71 e0       	ldi	r23, 0x01	; 1
    1726:	4a e0       	ldi	r20, 0x0A	; 10
    1728:	50 e0       	ldi	r21, 0x00	; 0
    172a:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <utoa>
    172e:	09 c1       	rjmp	.+530    	; 0x1942 <AutoCheck+0x40c>
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
    1730:	2d 2d       	mov	r18, r13
    1732:	22 30       	cpi	r18, 0x02	; 2
    1734:	99 f5       	brne	.+102    	; 0x179c <AutoCheck+0x266>
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1736:	60 91 3d 01 	lds	r22, 0x013D
    173a:	70 91 3e 01 	lds	r23, 0x013E
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	2e e4       	ldi	r18, 0x4E	; 78
    1744:	3b e1       	ldi	r19, 0x1B	; 27
    1746:	40 e0       	ldi	r20, 0x00	; 0
    1748:	50 e0       	ldi	r21, 0x00	; 0
    174a:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
    174e:	a2 01       	movw	r20, r4
    1750:	91 01       	movw	r18, r2
    1752:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <__divmodsi4>
    1756:	89 01       	movw	r16, r18
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	85 b9       	out	0x05, r24	; 5
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
    175c:	85 e0       	ldi	r24, 0x05	; 5
    175e:	84 b9       	out	0x04, r24	; 4
           adcmv[0] = W20msReadADC(TP1);
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	0e 94 57 1b 	call	0x36ae	; 0x36ae <W20msReadADC>
           adcmv[0] -= u680;
    1766:	80 1b       	sub	r24, r16
    1768:	91 0b       	sbc	r25, r17
    176a:	9a 83       	std	Y+2, r25	; 0x02
    176c:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//RL3 to -
    176e:	e1 e1       	ldi	r30, 0x11	; 17
    1770:	e4 b9       	out	0x04, r30	; 4
           adcmv[1] = W20msReadADC(TP1);
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	0e 94 57 1b 	call	0x36ae	; 0x36ae <W20msReadADC>
           adcmv[1] -= u680;
    1778:	80 1b       	sub	r24, r16
    177a:	91 0b       	sbc	r25, r17
    177c:	9c 83       	std	Y+4, r25	; 0x04
    177e:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 1<<(TP2*2);		//RL2 to VCC
    1780:	f4 e0       	ldi	r31, 0x04	; 4
    1782:	f5 b9       	out	0x05, r31	; 5
           R_DDR = (1<<(TP2*2)) | (1<<(TP3*2));	//RL3 to -
    1784:	24 e1       	ldi	r18, 0x14	; 20
    1786:	24 b9       	out	0x04, r18	; 4
           adcmv[2] = W20msReadADC(TP2);
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	0e 94 57 1b 	call	0x36ae	; 0x36ae <W20msReadADC>
           adcmv[2] -= u680;
    178e:	80 1b       	sub	r24, r16
    1790:	91 0b       	sbc	r25, r17
    1792:	9e 83       	std	Y+6, r25	; 0x06
    1794:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RLRL);	// "RLRL"
    1796:	85 ef       	ldi	r24, 0xF5	; 245
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	74 c0       	rjmp	.+232    	; 0x1884 <AutoCheck+0x34e>
        }
                                        //############################################
        if (tt == 3) { // how equal are the RH resistors
    179c:	8d 2d       	mov	r24, r13
    179e:	83 30       	cpi	r24, 0x03	; 3
    17a0:	31 f5       	brne	.+76     	; 0x17ee <AutoCheck+0x2b8>
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    17a2:	c5 b8       	out	0x05, r12	; 5
           R_DDR = (2<<(TP1*2)) | (2<<(TP2*2));	//RH2 to -
    17a4:	94 b8       	out	0x04, r9	; 4
           adcmv[0] = W20msReadADC(TP1);
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	0e 94 57 1b 	call	0x36ae	; 0x36ae <W20msReadADC>
           adcmv[3] = ADCconfig.U_AVCC / 2;
    17ac:	00 91 3d 01 	lds	r16, 0x013D
    17b0:	10 91 3e 01 	lds	r17, 0x013E
    17b4:	16 95       	lsr	r17
    17b6:	07 95       	ror	r16
    17b8:	18 87       	std	Y+8, r17	; 0x08
    17ba:	0f 83       	std	Y+7, r16	; 0x07
           adcmv[0] -= adcmv[3];
    17bc:	80 1b       	sub	r24, r16
    17be:	91 0b       	sbc	r25, r17
    17c0:	9a 83       	std	Y+2, r25	; 0x02
    17c2:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (2<<(TP1*2)) | (2<<(TP3*2));	//RH3 to -
    17c4:	84 b8       	out	0x04, r8	; 4
           adcmv[1] = W20msReadADC(TP1);
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	0e 94 57 1b 	call	0x36ae	; 0x36ae <W20msReadADC>
           adcmv[1] -= adcmv[3];
    17cc:	80 1b       	sub	r24, r16
    17ce:	91 0b       	sbc	r25, r17
    17d0:	9c 83       	std	Y+4, r25	; 0x04
    17d2:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 2<<(TP2*2);		//RL2 to VCC
    17d4:	e5 b8       	out	0x05, r14	; 5
           R_DDR = (2<<(TP2*2)) | (2<<(TP3*2));	//RH3 to -
    17d6:	e8 e2       	ldi	r30, 0x28	; 40
    17d8:	e4 b9       	out	0x04, r30	; 4
           adcmv[2] = W20msReadADC(TP2);
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	0e 94 57 1b 	call	0x36ae	; 0x36ae <W20msReadADC>
           adcmv[2] -= adcmv[3];
    17e0:	80 1b       	sub	r24, r16
    17e2:	91 0b       	sbc	r25, r17
    17e4:	9e 83       	std	Y+6, r25	; 0x06
    17e6:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RHRH);	// "RHRH"
    17e8:	83 e0       	ldi	r24, 0x03	; 3
    17ea:	91 e0       	ldi	r25, 0x01	; 1
    17ec:	4b c0       	rjmp	.+150    	; 0x1884 <AutoCheck+0x34e>
        }
                                        //############################################
        if (tt == 4) { // Text release probes
    17ee:	fd 2d       	mov	r31, r13
    17f0:	f4 30       	cpi	r31, 0x04	; 4
    17f2:	19 f4       	brne	.+6      	; 0x17fa <AutoCheck+0x2c4>
           lcd_fix2_string(RELPROBE);	// "Release Probes"
    17f4:	84 ed       	ldi	r24, 0xD4	; 212
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	45 c0       	rjmp	.+138    	; 0x1884 <AutoCheck+0x34e>
        }
                                        //############################################
        if (tt == 5) { // can we switch the ADC pins to GND across R_H resistor?
    17fa:	2d 2d       	mov	r18, r13
    17fc:	25 30       	cpi	r18, 0x05	; 5
    17fe:	b1 f4       	brne	.+44     	; 0x182c <AutoCheck+0x2f6>
           R_PORT = 0;
    1800:	15 b8       	out	0x05, r1	; 5
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to GND
    1802:	c4 b8       	out	0x04, r12	; 4
           adcmv[0] = W20msReadADC(TP1);
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	0e 94 57 1b 	call	0x36ae	; 0x36ae <W20msReadADC>
    180a:	9a 83       	std	Y+2, r25	; 0x02
    180c:	89 83       	std	Y+1, r24	; 0x01

           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to GND
    180e:	e4 b8       	out	0x04, r14	; 4
           adcmv[1] = W20msReadADC(TP2);
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	0e 94 57 1b 	call	0x36ae	; 0x36ae <W20msReadADC>
    1816:	9c 83       	std	Y+4, r25	; 0x04
    1818:	8b 83       	std	Y+3, r24	; 0x03

           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    181a:	f4 b8       	out	0x04, r15	; 4
           adcmv[2] = W20msReadADC(TP3);
    181c:	82 e0       	ldi	r24, 0x02	; 2
    181e:	0e 94 57 1b 	call	0x36ae	; 0x36ae <W20msReadADC>
    1822:	9e 83       	std	Y+6, r25	; 0x06
    1824:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RH1L);	// "RH_Lo="
    1826:	8d ee       	ldi	r24, 0xED	; 237
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	2c c0       	rjmp	.+88     	; 0x1884 <AutoCheck+0x34e>
        }
                                        //############################################
        if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
    182c:	8d 2d       	mov	r24, r13
    182e:	86 30       	cpi	r24, 0x06	; 6
    1830:	61 f5       	brne	.+88     	; 0x188a <AutoCheck+0x354>
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to VCC
    1832:	c4 b8       	out	0x04, r12	; 4
           R_PORT = 2<<(TP1*2);
    1834:	c5 b8       	out	0x05, r12	; 5
           adcmv[0] = W20msReadADC(TP1) - ADCconfig.U_AVCC;
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	0e 94 57 1b 	call	0x36ae	; 0x36ae <W20msReadADC>
    183c:	20 91 3d 01 	lds	r18, 0x013D
    1840:	30 91 3e 01 	lds	r19, 0x013E
    1844:	82 1b       	sub	r24, r18
    1846:	93 0b       	sbc	r25, r19
    1848:	9a 83       	std	Y+2, r25	; 0x02
    184a:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to VCC
    184c:	e4 b8       	out	0x04, r14	; 4
           R_PORT = 2<<(TP2*2);
    184e:	e5 b8       	out	0x05, r14	; 5
           adcmv[1] = W20msReadADC(TP2) - ADCconfig.U_AVCC;
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	0e 94 57 1b 	call	0x36ae	; 0x36ae <W20msReadADC>
    1856:	20 91 3d 01 	lds	r18, 0x013D
    185a:	30 91 3e 01 	lds	r19, 0x013E
    185e:	82 1b       	sub	r24, r18
    1860:	93 0b       	sbc	r25, r19
    1862:	9c 83       	std	Y+4, r25	; 0x04
    1864:	8b 83       	std	Y+3, r24	; 0x03
           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to VCC
    1866:	f4 b8       	out	0x04, r15	; 4
           R_PORT = 2<<(TP3*2);
    1868:	f5 b8       	out	0x05, r15	; 5
           adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
    186a:	82 e0       	ldi	r24, 0x02	; 2
    186c:	0e 94 57 1b 	call	0x36ae	; 0x36ae <W20msReadADC>
    1870:	20 91 3d 01 	lds	r18, 0x013D
    1874:	30 91 3e 01 	lds	r19, 0x013E
    1878:	82 1b       	sub	r24, r18
    187a:	93 0b       	sbc	r25, r19
    187c:	9e 83       	std	Y+6, r25	; 0x06
    187e:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RH1H);	// "RH_Hi="
    1880:	81 ef       	ldi	r24, 0xF1	; 241
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
    1888:	39 c0       	rjmp	.+114    	; 0x18fc <AutoCheck+0x3c6>
        }
        if (tt == 7) { // can we switch the ADC pins to VCC across the R_H resistor?
    188a:	ed 2d       	mov	r30, r13
    188c:	e7 30       	cpi	r30, 0x07	; 7
    188e:	99 f5       	brne	.+102    	; 0x18f6 <AutoCheck+0x3c0>
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_H_VAL*100));
    1890:	60 91 3d 01 	lds	r22, 0x013D
    1894:	70 91 3e 01 	lds	r23, 0x013E
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	2e e4       	ldi	r18, 0x4E	; 78
    189e:	3b e1       	ldi	r19, 0x1B	; 27
    18a0:	40 e0       	ldi	r20, 0x00	; 0
    18a2:	50 e0       	ldi	r21, 0x00	; 0
    18a4:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
    18a8:	2e ea       	ldi	r18, 0xAE	; 174
    18aa:	32 ed       	ldi	r19, 0xD2	; 210
    18ac:	47 e4       	ldi	r20, 0x47	; 71
    18ae:	50 e0       	ldi	r21, 0x00	; 0
    18b0:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <__divmodsi4>
    18b4:	89 01       	movw	r16, r18
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    18b6:	c5 b8       	out	0x05, r12	; 5
           R_DDR = (2<<(TP1*2)) | (1<<(TP1*2));	//RH1 to +, RL1 to -
    18b8:	f3 e0       	ldi	r31, 0x03	; 3
    18ba:	f4 b9       	out	0x04, r31	; 4
           adcmv[0] = W20msReadADC(TP1);
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	0e 94 57 1b 	call	0x36ae	; 0x36ae <W20msReadADC>
           adcmv[0] -= u680;
    18c2:	80 1b       	sub	r24, r16
    18c4:	91 0b       	sbc	r25, r17
    18c6:	9a 83       	std	Y+2, r25	; 0x02
    18c8:	89 83       	std	Y+1, r24	; 0x01
           R_PORT = 2<<(TP2*2);		//RH2 to VCC
    18ca:	e5 b8       	out	0x05, r14	; 5
           R_DDR = (2<<(TP2*2)) | (1<<(TP2*2));	//RH2 to +, RL2 to -
    18cc:	2c e0       	ldi	r18, 0x0C	; 12
    18ce:	24 b9       	out	0x04, r18	; 4
           adcmv[1] = W20msReadADC(TP2);
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	0e 94 57 1b 	call	0x36ae	; 0x36ae <W20msReadADC>
           adcmv[1] -= u680;
    18d6:	80 1b       	sub	r24, r16
    18d8:	91 0b       	sbc	r25, r17
    18da:	9c 83       	std	Y+4, r25	; 0x04
    18dc:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 2<<(TP3*2);		//RH3 to VCC
    18de:	f5 b8       	out	0x05, r15	; 5
           R_DDR = (2<<(TP3*2)) | (1<<(TP3*2));	//RH3 to +, RL3 to -
    18e0:	b4 b8       	out	0x04, r11	; 4
           adcmv[2] = W20msReadADC(TP3);
    18e2:	82 e0       	ldi	r24, 0x02	; 2
    18e4:	0e 94 57 1b 	call	0x36ae	; 0x36ae <W20msReadADC>
           adcmv[2] -= u680;
    18e8:	80 1b       	sub	r24, r16
    18ea:	91 0b       	sbc	r25, r17
    18ec:	9e 83       	std	Y+6, r25	; 0x06
    18ee:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RHRL);	// "RH/RL"
    18f0:	81 e1       	ldi	r24, 0x11	; 17
    18f2:	91 e0       	ldi	r25, 0x01	; 1
    18f4:	c7 cf       	rjmp	.-114    	; 0x1884 <AutoCheck+0x34e>
        }
                                        //############################################
        if (tt > 1) {	// output 3 voltages 
    18f6:	8d 2d       	mov	r24, r13
    18f8:	81 30       	cpi	r24, 0x01	; 1
    18fa:	29 f1       	breq	.+74     	; 0x1946 <AutoCheck+0x410>
           lcd_line2();			//Cursor to column 1, row 2
    18fc:	80 ec       	ldi	r24, 0xC0	; 192
    18fe:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
           lcd_string(itoa(adcmv[0], outval, 10));	//output voltage 1
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	9a 81       	ldd	r25, Y+2	; 0x02
    1906:	6c e0       	ldi	r22, 0x0C	; 12
    1908:	71 e0       	ldi	r23, 0x01	; 1
    190a:	4a e0       	ldi	r20, 0x0A	; 10
    190c:	50 e0       	ldi	r21, 0x00	; 0
    190e:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <itoa>
    1912:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_string>
           lcd_space();
    1916:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_space>
           lcd_string(itoa(adcmv[1], outval, 10));	//output voltage 2
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	9c 81       	ldd	r25, Y+4	; 0x04
    191e:	6c e0       	ldi	r22, 0x0C	; 12
    1920:	71 e0       	ldi	r23, 0x01	; 1
    1922:	4a e0       	ldi	r20, 0x0A	; 10
    1924:	50 e0       	ldi	r21, 0x00	; 0
    1926:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <itoa>
    192a:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_string>
           lcd_space();
    192e:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_space>
           lcd_string(itoa(adcmv[2], outval, 10));	//output voltage 3
    1932:	8d 81       	ldd	r24, Y+5	; 0x05
    1934:	9e 81       	ldd	r25, Y+6	; 0x06
    1936:	6c e0       	ldi	r22, 0x0C	; 12
    1938:	71 e0       	ldi	r23, 0x01	; 1
    193a:	4a e0       	ldi	r20, 0x0A	; 10
    193c:	50 e0       	ldi	r21, 0x00	; 0
    193e:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <itoa>
    1942:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_string>
        }
        ADC_DDR =  TXD_MSK;		// all-Pins to Input
    1946:	e7 b8       	out	0x07, r14	; 7
        ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
    1948:	e8 b8       	out	0x08, r14	; 8
        R_DDR = 0;			// all R-Ports to Input
    194a:	14 b8       	out	0x04, r1	; 4
        R_PORT = 0;
    194c:	15 b8       	out	0x05, r1	; 5
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    194e:	4f 9b       	sbis	0x09, 7	; 9
    1950:	0d c0       	rjmp	.+26     	; 0x196c <AutoCheck+0x436>
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
    1952:	84 e6       	ldi	r24, 0x64	; 100
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	0e 94 9a 03 	call	0x734	; 0x734 <sleep_5ms>
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    195a:	4f 9b       	sbis	0x09, 7	; 9
    195c:	07 c0       	rjmp	.+14     	; 0x196c <AutoCheck+0x436>
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
    195e:	84 e6       	ldi	r24, 0x64	; 100
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	0e 94 9a 03 	call	0x734	; 0x734 <sleep_5ms>
    1966:	aa 94       	dec	r10
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
  wait_about1s();
 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
    1968:	09 f0       	breq	.+2      	; 0x196c <AutoCheck+0x436>
    196a:	94 ce       	rjmp	.-728    	; 0x1694 <AutoCheck+0x15e>
    196c:	1d 2d       	mov	r17, r13
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
     } //end for ww
     wait_about1s();
    196e:	88 ec       	ldi	r24, 0xC8	; 200
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	0e 94 9a 03 	call	0x734	; 0x734 <sleep_5ms>
  lcd_clear();
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
  wait_about1s();
 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    1976:	1f 5f       	subi	r17, 0xFF	; 255
    1978:	18 30       	cpi	r17, 0x08	; 8
    197a:	91 f0       	breq	.+36     	; 0x19a0 <AutoCheck+0x46a>
void AutoCheck(void) {
    197c:	34 e0       	ldi	r19, 0x04	; 4
    197e:	d3 2e       	mov	r13, r19
        lcd_line2();			//Cursor to column 1, row 2
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_data('T');			//output the Testmode "T"
    1980:	08 94       	sec
    1982:	61 1c       	adc	r6, r1
    1984:	71 1c       	adc	r7, r1
           lcd_fix2_string(RLRL);	// "RLRL"
        }
                                        //############################################
        if (tt == 3) { // how equal are the RH resistors
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
           R_DDR = (2<<(TP1*2)) | (2<<(TP2*2));	//RH2 to -
    1986:	2a e0       	ldi	r18, 0x0A	; 10
    1988:	92 2e       	mov	r9, r18
           adcmv[0] = W20msReadADC(TP1);
           adcmv[3] = ADCconfig.U_AVCC / 2;
           adcmv[0] -= adcmv[3];
           R_DDR = (2<<(TP1*2)) | (2<<(TP3*2));	//RH3 to -
    198a:	92 e2       	ldi	r25, 0x22	; 34
    198c:	89 2e       	mov	r8, r25
           lcd_fix2_string(RHfakt);	//"RHf="
           lcd_string(utoa(RHmultip, outval, 10));
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    198e:	8a eb       	ldi	r24, 0xBA	; 186
    1990:	28 2e       	mov	r2, r24
    1992:	86 e3       	ldi	r24, 0x36	; 54
    1994:	38 2e       	mov	r3, r24
    1996:	41 2c       	mov	r4, r1
    1998:	51 2c       	mov	r5, r1
    199a:	ad 2c       	mov	r10, r13
    199c:	d1 2e       	mov	r13, r17
    199e:	7a ce       	rjmp	.-780    	; 0x1694 <AutoCheck+0x15e>
     wait_about1s();
  } //end for tt
#endif

  // measurement of internal resistance of the ADC port outputs switched to GND
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    19a0:	09 e0       	ldi	r16, 0x09	; 9
    19a2:	c0 2e       	mov	r12, r16
    19a4:	c7 b8       	out	0x07, r12	; 7
  R_PORT = 1<<(TP1*2);		//R_L-PORT 1 to VCC
    19a6:	dd 24       	eor	r13, r13
    19a8:	d3 94       	inc	r13
    19aa:	d5 b8       	out	0x05, r13	; 5
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to VCC
    19ac:	d4 b8       	out	0x04, r13	; 4
  adcmv[0] = W5msReadADC(TP1);
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
    19b4:	7c 01       	movw	r14, r24

  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin 2 to output 0V
    19b6:	1a e0       	ldi	r17, 0x0A	; 10
    19b8:	61 2e       	mov	r6, r17
    19ba:	67 b8       	out	0x07, r6	; 7
  R_PORT =  1<<(TP2*2);	//R_L-PORT 2 to VCC
    19bc:	b4 e0       	ldi	r27, 0x04	; 4
    19be:	8b 2e       	mov	r8, r27
    19c0:	85 b8       	out	0x05, r8	; 5
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to VCC
    19c2:	84 b8       	out	0x04, r8	; 4
  adcmv[1] = W5msReadADC(TP2);
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
    19ca:	8c 01       	movw	r16, r24

  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin 3 to output 0V
    19cc:	ac e0       	ldi	r26, 0x0C	; 12
    19ce:	9a 2e       	mov	r9, r26
    19d0:	97 b8       	out	0x07, r9	; 7
  R_PORT =  1<<(TP3*2);	//R_L-PORT 3 to VCC
    19d2:	f0 e1       	ldi	r31, 0x10	; 16
    19d4:	af 2e       	mov	r10, r31
    19d6:	a5 b8       	out	0x05, r10	; 5
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to VCC
    19d8:	a4 b8       	out	0x04, r10	; 4
  adcmv[2] = W5msReadADC(TP3);
    19da:	82 e0       	ldi	r24, 0x02	; 2
    19dc:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
  sum_rm = (adcmv[0] + adcmv[1] + adcmv[2]); //add all three values
    19e0:	0e 0d       	add	r16, r14
    19e2:	1f 1d       	adc	r17, r15
    19e4:	08 0f       	add	r16, r24
    19e6:	19 1f       	adc	r17, r25

  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
    19e8:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
    19ea:	c8 b8       	out	0x08, r12	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    19ec:	c7 b8       	out	0x07, r12	; 7
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
    19ee:	d4 b8       	out	0x04, r13	; 4
  adcmv[0] = ADCconfig.U_AVCC - W5msReadADC(TP1);
    19f0:	c0 90 3d 01 	lds	r12, 0x013D
    19f4:	d0 90 3e 01 	lds	r13, 0x013E
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
    19fe:	c8 1a       	sub	r12, r24
    1a00:	d9 0a       	sbc	r13, r25
    1a02:	da 82       	std	Y+2, r13	; 0x02
    1a04:	c9 82       	std	Y+1, r12	; 0x01
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
    1a06:	68 b8       	out	0x08, r6	; 8
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
    1a08:	67 b8       	out	0x07, r6	; 7
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
    1a0a:	84 b8       	out	0x04, r8	; 4
  adcmv[1] = ADCconfig.U_AVCC - W5msReadADC(TP2);
    1a0c:	e0 90 3d 01 	lds	r14, 0x013D
    1a10:	f0 90 3e 01 	lds	r15, 0x013E
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
    1a1a:	e8 1a       	sub	r14, r24
    1a1c:	f9 0a       	sbc	r15, r25
    1a1e:	fc 82       	std	Y+4, r15	; 0x04
    1a20:	eb 82       	std	Y+3, r14	; 0x03

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
    1a22:	98 b8       	out	0x08, r9	; 8
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
    1a24:	97 b8       	out	0x07, r9	; 7
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
    1a26:	a4 b8       	out	0x04, r10	; 4
  adcmv[2] = ADCconfig.U_AVCC - W5msReadADC(TP3);
    1a28:	a0 90 3d 01 	lds	r10, 0x013D
    1a2c:	b0 90 3e 01 	lds	r11, 0x013E
    1a30:	82 e0       	ldi	r24, 0x02	; 2
    1a32:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>

  sum_c0 = (adcmv[0] + adcmv[1] + adcmv[2]);
    1a36:	ec 0c       	add	r14, r12
    1a38:	fd 1c       	adc	r15, r13
  adcmv[1] = ADCconfig.U_AVCC - W5msReadADC(TP2);

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
  adcmv[2] = ADCconfig.U_AVCC - W5msReadADC(TP3);
    1a3a:	a8 1a       	sub	r10, r24
    1a3c:	b9 0a       	sbc	r11, r25

  sum_c0 = (adcmv[0] + adcmv[1] + adcmv[2]);
    1a3e:	ea 0c       	add	r14, r10
    1a40:	fb 1c       	adc	r15, r11
  u680 = ((ADCconfig.U_AVCC * 3) - sum_rm - sum_c0);	//three times the voltage at the 680 Ohm
    1a42:	80 91 3d 01 	lds	r24, 0x013D
    1a46:	90 91 3e 01 	lds	r25, 0x013E
    1a4a:	5c 01       	movw	r10, r24
    1a4c:	aa 0c       	add	r10, r10
    1a4e:	bb 1c       	adc	r11, r11
    1a50:	a8 0e       	add	r10, r24
    1a52:	b9 1e       	adc	r11, r25
    1a54:	a0 1a       	sub	r10, r16
    1a56:	b1 0a       	sbc	r11, r17
    1a58:	ae 18       	sub	r10, r14
    1a5a:	bf 08       	sbc	r11, r15
  pin_rm = (unsigned long)((unsigned long)sum_rm * (unsigned long)R_L_VAL) / (unsigned long)u680;
    1a5c:	cc 24       	eor	r12, r12
    1a5e:	dd 24       	eor	r13, r13
    1a60:	b8 01       	movw	r22, r16
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	20 e9       	ldi	r18, 0x90	; 144
    1a68:	3a e1       	ldi	r19, 0x1A	; 26
    1a6a:	40 e0       	ldi	r20, 0x00	; 0
    1a6c:	50 e0       	ldi	r21, 0x00	; 0
    1a6e:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
    1a72:	a6 01       	movw	r20, r12
    1a74:	95 01       	movw	r18, r10
    1a76:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
    1a7a:	49 01       	movw	r8, r18
  adcmv[2] = pin_rm;	// for last output in row 2
    1a7c:	3e 83       	std	Y+6, r19	; 0x06
    1a7e:	2d 83       	std	Y+5, r18	; 0x05
  pin_rp = (unsigned long)((unsigned long)sum_c0 * (unsigned long)R_L_VAL) / (unsigned long)u680;
    1a80:	b7 01       	movw	r22, r14
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	20 e9       	ldi	r18, 0x90	; 144
    1a88:	3a e1       	ldi	r19, 0x1A	; 26
    1a8a:	40 e0       	ldi	r20, 0x00	; 0
    1a8c:	50 e0       	ldi	r21, 0x00	; 0
    1a8e:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
    1a92:	a6 01       	movw	r20, r12
    1a94:	95 01       	movw	r18, r10
    1a96:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
    1a9a:	79 01       	movw	r14, r18
  lcd_clear();
    1a9c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_clear>
  lcd_fix_string(RIHI);	// "RiHi="
    1aa0:	85 e5       	ldi	r24, 0x55	; 85
    1aa2:	91 e0       	ldi	r25, 0x01	; 1
    1aa4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  DisplayValue(pin_rp,-1,LCD_CHAR_OMEGA,3);
    1aa8:	b7 01       	movw	r22, r14
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	4f ef       	ldi	r20, 0xFF	; 255
    1ab0:	24 ef       	ldi	r18, 0xF4	; 244
    1ab2:	03 e0       	ldi	r16, 0x03	; 3
    1ab4:	0e 94 9e 02 	call	0x53c	; 0x53c <DisplayValue>
  lcd_line2();
    1ab8:	80 ec       	ldi	r24, 0xC0	; 192
    1aba:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
  lcd_fix_string(RILO);	// "RiLo="
    1abe:	8c e5       	ldi	r24, 0x5C	; 92
    1ac0:	91 e0       	ldi	r25, 0x01	; 1
    1ac2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  DisplayValue(pin_rm,-1,LCD_CHAR_OMEGA,3);
    1ac6:	b4 01       	movw	r22, r8
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	4f ef       	ldi	r20, 0xFF	; 255
    1ace:	24 ef       	ldi	r18, 0xF4	; 244
    1ad0:	0e 94 9e 02 	call	0x53c	; 0x53c <DisplayValue>
  wait_about2s();			//wait 2 seconds
    1ad4:	80 e9       	ldi	r24, 0x90	; 144
    1ad6:	91 e0       	ldi	r25, 0x01	; 1
    1ad8:	0e 94 9a 03 	call	0x734	; 0x734 <sleep_5ms>
#ifdef AUTO_CAL
  if ((pin_rp < 280) && (pin_rm < 250)) {
    1adc:	e8 e1       	ldi	r30, 0x18	; 24
    1ade:	ee 16       	cp	r14, r30
    1ae0:	e1 e0       	ldi	r30, 0x01	; 1
    1ae2:	fe 06       	cpc	r15, r30
    1ae4:	90 f4       	brcc	.+36     	; 0x1b0a <AutoCheck+0x5d4>
    1ae6:	fa ef       	ldi	r31, 0xFA	; 250
    1ae8:	8f 16       	cp	r8, r31
    1aea:	91 04       	cpc	r9, r1
    1aec:	70 f4       	brcc	.+28     	; 0x1b0a <AutoCheck+0x5d4>
     // rp is below 28 Ohm and rm is below 25 Ohm
     (void) eeprom_write_word((uint16_t *)(&R680pl), pin_rp+R_L_VAL);  //hold VCC resistance value in EEprom
    1aee:	b7 01       	movw	r22, r14
    1af0:	60 57       	subi	r22, 0x70	; 112
    1af2:	75 4e       	sbci	r23, 0xE5	; 229
    1af4:	8b ea       	ldi	r24, 0xAB	; 171
    1af6:	91 e0       	ldi	r25, 0x01	; 1
    1af8:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <__eewr_word_m168>
     (void) eeprom_write_word((uint16_t *)(&R680mi), pin_rm+R_L_VAL);  //hold GND resistance value in EEprom
    1afc:	b4 01       	movw	r22, r8
    1afe:	60 57       	subi	r22, 0x70	; 112
    1b00:	75 4e       	sbci	r23, 0xE5	; 229
    1b02:	8d ea       	ldi	r24, 0xAD	; 173
    1b04:	91 e0       	ldi	r25, 0x01	; 1
    1b06:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <__eewr_word_m168>
  }
#endif

  //measure Zero offset for Capacity measurement
  adcmv[3] = 0;
    1b0a:	18 86       	std	Y+8, r1	; 0x08
    1b0c:	1f 82       	std	Y+7, r1	; 0x07
  PartFound = PART_NONE;
    1b0e:	10 92 07 01 	sts	0x0107, r1
  ReadCapacity(TP3, TP1);
    1b12:	82 e0       	ldi	r24, 0x02	; 2
    1b14:	60 e0       	ldi	r22, 0x00	; 0
    1b16:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <ReadCapacity>
  adcmv[5] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:3
    1b1a:	00 91 60 01 	lds	r16, 0x0160
    1b1e:	10 91 61 01 	lds	r17, 0x0161
    1b22:	1c 87       	std	Y+12, r17	; 0x0c
    1b24:	0b 87       	std	Y+11, r16	; 0x0b
  ReadCapacity(TP3, TP2);
    1b26:	82 e0       	ldi	r24, 0x02	; 2
    1b28:	61 e0       	ldi	r22, 0x01	; 1
    1b2a:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <ReadCapacity>
  adcmv[6] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:3
    1b2e:	e0 90 60 01 	lds	r14, 0x0160
    1b32:	f0 90 61 01 	lds	r15, 0x0161
    1b36:	fe 86       	std	Y+14, r15	; 0x0e
    1b38:	ed 86       	std	Y+13, r14	; 0x0d
  ReadCapacity(TP2, TP1);
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	60 e0       	ldi	r22, 0x00	; 0
    1b3e:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <ReadCapacity>
  adcmv[2] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:2
    1b42:	c0 90 60 01 	lds	r12, 0x0160
    1b46:	d0 90 61 01 	lds	r13, 0x0161
    1b4a:	de 82       	std	Y+6, r13	; 0x06
    1b4c:	cd 82       	std	Y+5, r12	; 0x05
  ReadCapacity(TP1, TP3);
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	62 e0       	ldi	r22, 0x02	; 2
    1b52:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <ReadCapacity>
  adcmv[1] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:1
    1b56:	80 91 60 01 	lds	r24, 0x0160
    1b5a:	90 91 61 01 	lds	r25, 0x0161
    1b5e:	9c 83       	std	Y+4, r25	; 0x04
    1b60:	8b 83       	std	Y+3, r24	; 0x03
  ReadCapacity(TP2, TP3);
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	62 e0       	ldi	r22, 0x02	; 2
    1b66:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <ReadCapacity>
  adcmv[4] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:2
    1b6a:	80 91 60 01 	lds	r24, 0x0160
    1b6e:	90 91 61 01 	lds	r25, 0x0161
    1b72:	9a 87       	std	Y+10, r25	; 0x0a
    1b74:	89 87       	std	Y+9, r24	; 0x09
  ReadCapacity(TP1, TP2);
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	61 e0       	ldi	r22, 0x01	; 1
    1b7a:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <ReadCapacity>
  adcmv[0] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:1
    1b7e:	80 91 60 01 	lds	r24, 0x0160
    1b82:	90 91 61 01 	lds	r25, 0x0161
    1b86:	9a 83       	std	Y+2, r25	; 0x02
    1b88:	89 83       	std	Y+1, r24	; 0x01
  lcd_clear();
    1b8a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_clear>
  lcd_fix_string(C0_str);			//output "C0 "
    1b8e:	83 e6       	ldi	r24, 0x63	; 99
    1b90:	91 e0       	ldi	r25, 0x01	; 1
    1b92:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
    1b96:	b8 01       	movw	r22, r16
    1b98:	88 27       	eor	r24, r24
    1b9a:	77 fd       	sbrc	r23, 7
    1b9c:	80 95       	com	r24
    1b9e:	98 2f       	mov	r25, r24
    1ba0:	40 e0       	ldi	r20, 0x00	; 0
    1ba2:	20 e2       	ldi	r18, 0x20	; 32
    1ba4:	03 e0       	ldi	r16, 0x03	; 3
    1ba6:	0e 94 9e 02 	call	0x53c	; 0x53c <DisplayValue>
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
    1baa:	b7 01       	movw	r22, r14
    1bac:	88 27       	eor	r24, r24
    1bae:	77 fd       	sbrc	r23, 7
    1bb0:	80 95       	com	r24
    1bb2:	98 2f       	mov	r25, r24
    1bb4:	40 e0       	ldi	r20, 0x00	; 0
    1bb6:	20 e2       	ldi	r18, 0x20	; 32
    1bb8:	0e 94 9e 02 	call	0x53c	; 0x53c <DisplayValue>
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
    1bbc:	b6 01       	movw	r22, r12
    1bbe:	88 27       	eor	r24, r24
    1bc0:	77 fd       	sbrc	r23, 7
    1bc2:	80 95       	com	r24
    1bc4:	98 2f       	mov	r25, r24
    1bc6:	44 ef       	ldi	r20, 0xF4	; 244
    1bc8:	26 e4       	ldi	r18, 0x46	; 70
    1bca:	0e 94 9e 02 	call	0x53c	; 0x53c <DisplayValue>
    1bce:	8e 01       	movw	r16, r28
    1bd0:	0f 5f       	subi	r16, 0xFF	; 255
    1bd2:	1f 4f       	sbci	r17, 0xFF	; 255
void AutoCheck(void) {
    1bd4:	ce 01       	movw	r24, r28
    1bd6:	0f 96       	adiw	r24, 0x0f	; 15
    1bd8:	f8 01       	movw	r30, r16
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
#ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
    1bda:	21 91       	ld	r18, Z+
    1bdc:	31 91       	ld	r19, Z+
    1bde:	27 34       	cpi	r18, 0x47	; 71
    1be0:	31 05       	cpc	r19, r1
    1be2:	ec f4       	brge	.+58     	; 0x1c1e <AutoCheck+0x6e8>
  lcd_fix_string(C0_str);			//output "C0 "
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
#ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
    1be4:	e8 17       	cp	r30, r24
    1be6:	f9 07       	cpc	r31, r25
    1be8:	c1 f7       	brne	.-16     	; 0x1bda <AutoCheck+0x6a4>
    1bea:	ee 24       	eor	r14, r14
    1bec:	ff 24       	eor	r15, r15
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
    1bee:	f8 01       	movw	r30, r16
    1bf0:	60 81       	ld	r22, Z
    1bf2:	0e 5f       	subi	r16, 0xFE	; 254
    1bf4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf6:	61 5f       	subi	r22, 0xF1	; 241
    1bf8:	c7 01       	movw	r24, r14
    1bfa:	87 54       	subi	r24, 0x47	; 71
    1bfc:	9e 4f       	sbci	r25, 0xFE	; 254
    1bfe:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <__eewr_byte_m168>
    1c02:	08 94       	sec
    1c04:	e1 1c       	adc	r14, r1
    1c06:	f1 1c       	adc	r15, r1
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
#ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
    1c08:	f7 e0       	ldi	r31, 0x07	; 7
    1c0a:	ef 16       	cp	r14, r31
    1c0c:	f1 04       	cpc	r15, r1
    1c0e:	79 f7       	brne	.-34     	; 0x1bee <AutoCheck+0x6b8>
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
  }
  lcd_line2();
    1c10:	80 ec       	ldi	r24, 0xC0	; 192
    1c12:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
  lcd_fix_string(OK_str);		// output "OK"
    1c16:	8b ee       	ldi	r24, 0xEB	; 235
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
no_c0save:
#endif
 wait_about2s();		//wait 2 seconds
    1c1e:	80 e9       	ldi	r24, 0x90	; 144
    1c20:	91 e0       	ldi	r25, 0x01	; 1
    1c22:	0e 94 9a 03 	call	0x734	; 0x734 <sleep_5ms>
    1c26:	70 e4       	ldi	r23, 0x40	; 64
    1c28:	c7 2e       	mov	r12, r23
 
#ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
    1c2a:	10 e0       	ldi	r17, 0x00	; 0
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
    1c2c:	6a e0       	ldi	r22, 0x0A	; 10
    1c2e:	86 2e       	mov	r8, r22
    1c30:	91 2c       	mov	r9, r1
    1c32:	a1 2c       	mov	r10, r1
    1c34:	b1 2c       	mov	r11, r1
     lcd_data('3');
     lcd_fix_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1c36:	58 e5       	ldi	r21, 0x58	; 88
    1c38:	e5 2e       	mov	r14, r21
    1c3a:	51 e0       	ldi	r21, 0x01	; 1
    1c3c:	f5 2e       	mov	r15, r21
 
#ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
     lcd_clear();
    1c3e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_clear>
     lcd_data('1');
    1c42:	81 e3       	ldi	r24, 0x31	; 49
    1c44:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
     lcd_fix_string(CapZeich);	// "-||-"
    1c48:	8d e1       	ldi	r24, 0x1D	; 29
    1c4a:	91 e0       	ldi	r25, 0x01	; 1
    1c4c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_data('3');
    1c50:	83 e3       	ldi	r24, 0x33	; 51
    1c52:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
     lcd_fix_string(MinCap_str); // " >100nF!"
    1c56:	87 e6       	ldi	r24, 0x67	; 103
    1c58:	91 e0       	ldi	r25, 0x01	; 1
    1c5a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     PartFound = PART_NONE;
    1c5e:	10 92 07 01 	sts	0x0107, r1
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
    1c62:	82 e0       	ldi	r24, 0x02	; 2
    1c64:	60 e0       	ldi	r22, 0x00	; 0
    1c66:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <ReadCapacity>
    1c6a:	20 91 58 01 	lds	r18, 0x0158
    1c6e:	30 91 59 01 	lds	r19, 0x0159
    1c72:	40 91 5a 01 	lds	r20, 0x015A
    1c76:	50 91 5b 01 	lds	r21, 0x015B
    1c7a:	00 91 68 01 	lds	r16, 0x0168
     while (cap.cpre < -9) {
    1c7e:	07 c0       	rjmp	.+14     	; 0x1c8e <AutoCheck+0x758>
        cap.cpre++;
        cap.cval /= 10;
    1c80:	ca 01       	movw	r24, r20
    1c82:	b9 01       	movw	r22, r18
    1c84:	a5 01       	movw	r20, r10
    1c86:	94 01       	movw	r18, r8
    1c88:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
    1c8c:	0f 5f       	subi	r16, 0xFF	; 255
     lcd_data('3');
     lcd_fix_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1c8e:	07 3f       	cpi	r16, 0xF7	; 247
    1c90:	bc f3       	brlt	.-18     	; 0x1c80 <AutoCheck+0x74a>
    1c92:	00 93 68 01 	sts	0x0168, r16
    1c96:	20 93 58 01 	sts	0x0158, r18
    1c9a:	f7 01       	movw	r30, r14
    1c9c:	31 83       	std	Z+1, r19	; 0x01
    1c9e:	42 83       	std	Z+2, r20	; 0x02
    1ca0:	53 83       	std	Z+3, r21	; 0x03
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1ca2:	07 3f       	cpi	r16, 0xF7	; 247
    1ca4:	09 f0       	breq	.+2      	; 0x1ca8 <AutoCheck+0x772>
    1ca6:	be c0       	rjmp	.+380    	; 0x1e24 <AutoCheck+0x8ee>
    1ca8:	20 36       	cpi	r18, 0x60	; 96
    1caa:	31 05       	cpc	r19, r1
    1cac:	41 05       	cpc	r20, r1
    1cae:	51 05       	cpc	r21, r1
    1cb0:	08 f4       	brcc	.+2      	; 0x1cb4 <AutoCheck+0x77e>
    1cb2:	b8 c0       	rjmp	.+368    	; 0x1e24 <AutoCheck+0x8ee>
    1cb4:	20 3f       	cpi	r18, 0xF0	; 240
    1cb6:	f5 e5       	ldi	r31, 0x55	; 85
    1cb8:	3f 07       	cpc	r19, r31
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	4f 07       	cpc	r20, r31
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	5f 07       	cpc	r21, r31
    1cc2:	08 f0       	brcs	.+2      	; 0x1cc6 <AutoCheck+0x790>
    1cc4:	af c0       	rjmp	.+350    	; 0x1e24 <AutoCheck+0x8ee>
        cap_found++;
    1cc6:	1f 5f       	subi	r17, 0xFF	; 255
     } else {
        cap_found = 0;		// wait for stable connection
     }
     if (cap_found > 1) {
    1cc8:	12 30       	cpi	r17, 0x02	; 2
    1cca:	09 f0       	breq	.+2      	; 0x1cce <AutoCheck+0x798>
    1ccc:	ac c0       	rjmp	.+344    	; 0x1e26 <AutoCheck+0x8f0>
        // value of capacitor is correct
        (void) eeprom_write_word((uint16_t *)(&ref_offset), load_diff);	// hold zero offset + slew rate dependend offset
    1cce:	60 91 6a 01 	lds	r22, 0x016A
    1cd2:	70 91 6b 01 	lds	r23, 0x016B
    1cd6:	87 eb       	ldi	r24, 0xB7	; 183
    1cd8:	91 e0       	ldi	r25, 0x01	; 1
    1cda:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <__eewr_word_m168>
        lcd_clear();
    1cde:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_clear>
        lcd_fix_string(REF_C_str);	// "REF_C="
    1ce2:	8f e6       	ldi	r24, 0x6F	; 111
    1ce4:	91 e0       	ldi	r25, 0x01	; 1
    1ce6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        lcd_string(itoa(load_diff, outval, 10));	//output REF_C_KORR
    1cea:	80 91 6a 01 	lds	r24, 0x016A
    1cee:	90 91 6b 01 	lds	r25, 0x016B
    1cf2:	6c e0       	ldi	r22, 0x0C	; 12
    1cf4:	71 e0       	ldi	r23, 0x01	; 1
    1cf6:	4a e0       	ldi	r20, 0x0A	; 10
    1cf8:	50 e0       	ldi	r21, 0x00	; 0
    1cfa:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <itoa>
    1cfe:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_string>
        eeprom_write_byte((uint8_t *)(&EE_ESR_ZERO), (uint8_t)ESR_ZERO); // set to initial zero offset
    1d02:	80 ec       	ldi	r24, 0xC0	; 192
    1d04:	91 e0       	ldi	r25, 0x01	; 1
    1d06:	6d e1       	ldi	r22, 0x1D	; 29
    1d08:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <__eewr_byte_m168>
        wait_about1s();
        }
//#######################################
#endif
 #ifdef AUTOSCALE_ADC
        ADC_PORT =  TXD_VAL;	//ADC-Port 1 to GND
    1d0c:	88 e0       	ldi	r24, 0x08	; 8
    1d0e:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    1d10:	89 e0       	ldi	r24, 0x09	; 9
    1d12:	87 b9       	out	0x07, r24	; 7
        R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1d14:	80 e2       	ldi	r24, 0x20	; 32
    1d16:	84 b9       	out	0x04, r24	; 4
        do {
           adcmv[0] = ReadADC(TP3);
    1d18:	82 e0       	ldi	r24, 0x02	; 2
    1d1a:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
        } while (adcmv[0] > 980);
    1d1e:	23 e0       	ldi	r18, 0x03	; 3
    1d20:	85 3d       	cpi	r24, 0xD5	; 213
    1d22:	92 07       	cpc	r25, r18
    1d24:	cc f7       	brge	.-14     	; 0x1d18 <AutoCheck+0x7e2>
        R_DDR = 0;		//all Pins to input 
    1d26:	14 b8       	out	0x04, r1	; 4
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1d28:	10 92 3c 01 	sts	0x013C, r1
    1d2c:	10 92 3b 01 	sts	0x013B, r1
        adcmv[0] = ReadADC(TP3);  // get cap voltage with VCC reference
    1d30:	82 e0       	ldi	r24, 0x02	; 2
    1d32:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
    1d36:	4c 01       	movw	r8, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1d38:	8f ea       	ldi	r24, 0xAF	; 175
    1d3a:	91 e0       	ldi	r25, 0x01	; 1
    1d3c:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__eerd_byte_m168>
    1d40:	99 27       	eor	r25, r25
    1d42:	87 fd       	sbrc	r24, 7
    1d44:	90 95       	com	r25
    1d46:	20 91 3f 01 	lds	r18, 0x013F
    1d4a:	30 91 40 01 	lds	r19, 0x0140
    1d4e:	82 0f       	add	r24, r18
    1d50:	93 1f       	adc	r25, r19
    1d52:	90 93 3c 01 	sts	0x013C, r25
    1d56:	80 93 3b 01 	sts	0x013B, r24
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
    1d5a:	82 e0       	ldi	r24, 0x02	; 2
    1d5c:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
    1d60:	8c 01       	movw	r16, r24
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1d62:	10 92 3c 01 	sts	0x013C, r1
    1d66:	10 92 3b 01 	sts	0x013B, r1
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
    1d6a:	82 e0       	ldi	r24, 0x02	; 2
    1d6c:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
    1d70:	5c 01       	movw	r10, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1d72:	c0 90 3f 01 	lds	r12, 0x013F
    1d76:	d0 90 40 01 	lds	r13, 0x0140
    1d7a:	8f ea       	ldi	r24, 0xAF	; 175
    1d7c:	91 e0       	ldi	r25, 0x01	; 1
    1d7e:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__eerd_byte_m168>
    1d82:	99 27       	eor	r25, r25
    1d84:	87 fd       	sbrc	r24, 7
    1d86:	90 95       	com	r25
    1d88:	8c 0d       	add	r24, r12
    1d8a:	9d 1d       	adc	r25, r13
    1d8c:	90 93 3c 01 	sts	0x013C, r25
    1d90:	80 93 3b 01 	sts	0x013B, r24
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1d94:	8f ea       	ldi	r24, 0xAF	; 175
    1d96:	91 e0       	ldi	r25, 0x01	; 1
    1d98:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__eerd_byte_m168>
    1d9c:	f8 2e       	mov	r15, r24
        lcd_line2();
    1d9e:	80 ec       	ldi	r24, 0xC0	; 192
    1da0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
        lcd_fix_string(REF_R_str);	// "REF_R="
    1da4:	86 e7       	ldi	r24, 0x76	; 118
    1da6:	91 e0       	ldi	r25, 0x01	; 1
    1da8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1dac:	8f ea       	ldi	r24, 0xAF	; 175
    1dae:	91 e0       	ldi	r25, 0x01	; 1
    1db0:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__eerd_byte_m168>
        ADCconfig.U_Bandgap = ADC_internal_reference;
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
        ADCconfig.U_Bandgap = ADC_internal_reference;
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1db4:	43 e0       	ldi	r20, 0x03	; 3
    1db6:	e4 2e       	mov	r14, r20
    1db8:	e8 0e       	add	r14, r24
    1dba:	a8 0c       	add	r10, r8
    1dbc:	b9 1c       	adc	r11, r9
    1dbe:	a0 1a       	sub	r10, r16
    1dc0:	b1 0a       	sbc	r11, r17
    1dc2:	a0 1a       	sub	r10, r16
    1dc4:	b1 0a       	sbc	r11, r17
    1dc6:	b5 01       	movw	r22, r10
    1dc8:	88 27       	eor	r24, r24
    1dca:	77 fd       	sbrc	r23, 7
    1dcc:	80 95       	com	r24
    1dce:	98 2f       	mov	r25, r24
    1dd0:	2f 2d       	mov	r18, r15
    1dd2:	33 27       	eor	r19, r19
    1dd4:	27 fd       	sbrc	r18, 7
    1dd6:	30 95       	com	r19
    1dd8:	2c 0d       	add	r18, r12
    1dda:	3d 1d       	adc	r19, r13
    1ddc:	40 e0       	ldi	r20, 0x00	; 0
    1dde:	50 e0       	ldi	r21, 0x00	; 0
    1de0:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
    1de4:	00 0f       	add	r16, r16
    1de6:	11 1f       	adc	r17, r17
    1de8:	98 01       	movw	r18, r16
    1dea:	44 27       	eor	r20, r20
    1dec:	37 fd       	sbrc	r19, 7
    1dee:	40 95       	com	r20
    1df0:	54 2f       	mov	r21, r20
    1df2:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <__divmodsi4>
        lcd_line2();
        lcd_fix_string(REF_R_str);	// "REF_R="
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1df6:	e2 0e       	add	r14, r18
        (void) eeprom_write_byte((uint8_t *)(&RefDiff), (uint8_t)udiff2);	// hold offset for true reference Voltage
    1df8:	8f ea       	ldi	r24, 0xAF	; 175
    1dfa:	91 e0       	ldi	r25, 0x01	; 1
    1dfc:	6e 2d       	mov	r22, r14
    1dfe:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <__eewr_byte_m168>
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
    1e02:	8e 2d       	mov	r24, r14
    1e04:	99 27       	eor	r25, r25
    1e06:	87 fd       	sbrc	r24, 7
    1e08:	90 95       	com	r25
    1e0a:	6c e0       	ldi	r22, 0x0C	; 12
    1e0c:	71 e0       	ldi	r23, 0x01	; 1
    1e0e:	4a e0       	ldi	r20, 0x0A	; 10
    1e10:	50 e0       	ldi	r21, 0x00	; 0
    1e12:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <itoa>
    1e16:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_string>
 #endif
        wait_about4s();
    1e1a:	80 e2       	ldi	r24, 0x20	; 32
    1e1c:	93 e0       	ldi	r25, 0x03	; 3
    1e1e:	0e 94 9a 03 	call	0x734	; 0x734 <sleep_5ms>
        break;
    1e22:	19 c0       	rjmp	.+50     	; 0x1e56 <AutoCheck+0x920>
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1e24:	10 e0       	ldi	r17, 0x00	; 0
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
 #endif
        wait_about4s();
        break;
     }
     lcd_line2();
    1e26:	80 ec       	ldi	r24, 0xC0	; 192
    1e28:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
     DisplayValue(cap.cval,cap.cpre,'F',4);
    1e2c:	60 91 58 01 	lds	r22, 0x0158
    1e30:	70 91 59 01 	lds	r23, 0x0159
    1e34:	80 91 5a 01 	lds	r24, 0x015A
    1e38:	90 91 5b 01 	lds	r25, 0x015B
    1e3c:	40 91 68 01 	lds	r20, 0x0168
    1e40:	26 e4       	ldi	r18, 0x46	; 70
    1e42:	04 e0       	ldi	r16, 0x04	; 4
    1e44:	0e 94 9e 02 	call	0x53c	; 0x53c <DisplayValue>
     wait_about200ms();			// wait additional time
    1e48:	88 e2       	ldi	r24, 0x28	; 40
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	0e 94 9a 03 	call	0x734	; 0x734 <sleep_5ms>
    1e50:	ca 94       	dec	r12
 wait_about2s();		//wait 2 seconds
 
#ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
    1e52:	09 f0       	breq	.+2      	; 0x1e56 <AutoCheck+0x920>
    1e54:	f4 ce       	rjmp	.-536    	; 0x1c3e <AutoCheck+0x708>
     wait_about200ms();			// wait additional time
  } // end for ww

#endif

  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    1e56:	89 e1       	ldi	r24, 0x19	; 25
    1e58:	80 93 39 01 	sts	0x0139, r24
  lcd_clear();
    1e5c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_clear>
  lcd_line2();
    1e60:	80 ec       	ldi	r24, 0xC0	; 192
    1e62:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
  lcd_fix_string(VERSION_str);	//"Version ..."
    1e66:	87 e4       	ldi	r24, 0x47	; 71
    1e68:	91 e0       	ldi	r25, 0x01	; 1
    1e6a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  lcd_line1();
    1e6e:	80 e8       	ldi	r24, 0x80	; 128
    1e70:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
  lcd_fix_string(ATE);		//"Selftest End"
    1e74:	8c ed       	ldi	r24, 0xDC	; 220
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        // if key is pressed, don't repeat
        break;
     }
  }
#endif
 PartFound = PART_NONE;
    1e7c:	10 92 07 01 	sts	0x0107, r1
 wait_about1s();			//wait 1 seconds
    1e80:	88 ec       	ldi	r24, 0xC8	; 200
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	0e 94 9a 03 	call	0x734	; 0x734 <sleep_5ms>
 } 
    1e88:	2e 96       	adiw	r28, 0x0e	; 14
    1e8a:	0f b6       	in	r0, 0x3f	; 63
    1e8c:	f8 94       	cli
    1e8e:	de bf       	out	0x3e, r29	; 62
    1e90:	0f be       	out	0x3f, r0	; 63
    1e92:	cd bf       	out	0x3d, r28	; 61
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	1f 91       	pop	r17
    1e9a:	0f 91       	pop	r16
    1e9c:	ff 90       	pop	r15
    1e9e:	ef 90       	pop	r14
    1ea0:	df 90       	pop	r13
    1ea2:	cf 90       	pop	r12
    1ea4:	bf 90       	pop	r11
    1ea6:	af 90       	pop	r10
    1ea8:	9f 90       	pop	r9
    1eaa:	8f 90       	pop	r8
    1eac:	7f 90       	pop	r7
    1eae:	6f 90       	pop	r6
    1eb0:	5f 90       	pop	r5
    1eb2:	4f 90       	pop	r4
    1eb4:	3f 90       	pop	r3
    1eb6:	2f 90       	pop	r2
    1eb8:	08 95       	ret

00001eba <main>:
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
  EMPTY_INTERRUPT(ADC_vect);
#endif

//begin of transistortester program
int main(void) {
    1eba:	0f 93       	push	r16
    1ebc:	1f 93       	push	r17
    1ebe:	cf 93       	push	r28
    1ec0:	df 93       	push	r29
  //switch on
#ifndef EXTREF2PD6
  // Switch on directly only without the PC4-PD6 connection.
  // With this connection the PD6 (AIN0) is connected to the external 2.5V reference voltage
  // and should never be switched to VCC directly.
  ON_DDR = (1<<ON_PIN);
    1ec2:	10 e4       	ldi	r17, 0x40	; 64
    1ec4:	1a b9       	out	0x0a, r17	; 10
#endif
#ifdef PULLUP_DISABLE
  ON_PORT = (1<<ON_PIN); 		// switch power on 
    1ec6:	1b b9       	out	0x0b, r17	; 11
#else
  ON_PORT = (1<<ON_PIN)|(1<<RST_PIN); 	// switch power on , enable internal Pullup for Start-Pin
#endif
  uint8_t tmp;
  //ADC-Init
  ADCSRA = (1<<ADEN) | AUTO_CLOCK_DIV;	//prescaler=8 or 64 (if 8Mhz clock)
    1ec8:	86 e8       	ldi	r24, 0x86	; 134
    1eca:	80 93 7a 00 	sts	0x007A, r24
// #define WDRF_HOME MCU_STATUS_REG
 #define WDRF_HOME MCUCSR
#else
 #define WDRF_HOME MCUSR
#endif
  tmp = (WDRF_HOME & (1<<WDRF));	// save Watch Dog Flag
    1ece:	04 b7       	in	r16, 0x34	; 52
  WDRF_HOME &= ~(1<<WDRF);	 	//reset Watch Dog flag
    1ed0:	84 b7       	in	r24, 0x34	; 52
    1ed2:	87 7f       	andi	r24, 0xF7	; 247
    1ed4:	84 bf       	out	0x34, r24	; 52
  wdt_disable();			// disable Watch Dog
    1ed6:	88 e1       	ldi	r24, 0x18	; 24
    1ed8:	0f b6       	in	r0, 0x3f	; 63
    1eda:	f8 94       	cli
    1edc:	80 93 60 00 	sts	0x0060, r24
    1ee0:	10 92 60 00 	sts	0x0060, r1
    1ee4:	0f be       	out	0x3f, r0	; 63
#ifndef __AVR_ATmega8__
  // switch off unused Parts
  PRR = (1<<PRTWI) | (1<<PRTIM0) | (1<<PRSPI) | (1<<PRUSART0);
    1ee6:	86 ea       	ldi	r24, 0xA6	; 166
    1ee8:	80 93 64 00 	sts	0x0064, r24
  DIDR0 = (1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D);	
    1eec:	88 e3       	ldi	r24, 0x38	; 56
    1eee:	80 93 7e 00 	sts	0x007E, r24
  TCCR2A = (0<<WGM21) | (0<<WGM20);		// Counter 2 normal mode
    1ef2:	10 92 b0 00 	sts	0x00B0, r1
 #if F_CPU == 4000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (0<<CS20);	//prescaler 256, 64us @ 2MHz
  #define T2_PERIOD 64
 #endif 
 #if F_CPU >= 8000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (1<<CS20);	//prescaler 1024, 128us @ 8MHz, 64us @ 16MHz
    1ef6:	87 e0       	ldi	r24, 0x07	; 7
    1ef8:	80 93 b1 00 	sts	0x00B1, r24
  #define T2_PERIOD (1024 / (F_CPU / 1000000UL));	/* set to 128 or 64 us */
 #endif 
  sei();				// enable interrupts
    1efc:	78 94       	sei
#endif
  lcd_init();				//initialize LCD
    1efe:	0e 94 09 01 	call	0x212	; 0x212 <lcd_init>
	
//  ADC_PORT = TXD_VAL;
//  ADC_DDR = TXD_MSK;
  if(tmp) { 
    1f02:	03 ff       	sbrs	r16, 3
    1f04:	0e c0       	rjmp	.+28     	; 0x1f22 <main+0x68>
     // check if  Watchdog-Event 
     // this happens, if the Watchdog is not reset for 2s
     // can happen, if any loop in the Program doen't finish.
     lcd_line1();
    1f06:	80 e8       	ldi	r24, 0x80	; 128
    1f08:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
     lcd_fix_string(TestTimedOut);	//Output Timeout
    1f0c:	83 ed       	ldi	r24, 0xD3	; 211
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     wait_about3s();				//wait for 3 s
    1f14:	88 e5       	ldi	r24, 0x58	; 88
    1f16:	92 e0       	ldi	r25, 0x02	; 2
    1f18:	0e 94 9a 03 	call	0x734	; 0x734 <sleep_5ms>
     ON_PORT = 0;			//shut off!
    1f1c:	1b b8       	out	0x0b, r1	; 11
     ON_DDR = (1<<ON_PIN);		//switch to GND
    1f1e:	1a b9       	out	0x0a, r17	; 10
     return 0;
    1f20:	51 c5       	rjmp	.+2722   	; 0x29c4 <main+0xb0a>
  }
  LCDLoadCustomChar(LCD_CHAR_DIODE1);	//Custom-Character Diode symbol
    1f22:	88 e4       	ldi	r24, 0x48	; 72
    1f24:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
  lcd_fix_customchar(DiodeIcon1);	//load Character  >|
    1f28:	8d e7       	ldi	r24, 0x7D	; 125
    1f2a:	91 e0       	ldi	r25, 0x01	; 1
    1f2c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_DIODE2);	//Custom-Character 
    1f30:	80 e5       	ldi	r24, 0x50	; 80
    1f32:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
  lcd_fix_customchar(DiodeIcon2);	//load Character  |<
    1f36:	85 e8       	ldi	r24, 0x85	; 133
    1f38:	91 e0       	ldi	r25, 0x01	; 1
    1f3a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_CAP);	//Custom-Character  Capacitor symbol
    1f3e:	88 e5       	ldi	r24, 0x58	; 88
    1f40:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
  lcd_fix_customchar(CapIcon);		//load Character  ||
    1f44:	8d e8       	ldi	r24, 0x8D	; 141
    1f46:	91 e0       	ldi	r25, 0x01	; 1
    1f48:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS1);	//Custom-Character Resistor symbol
    1f4c:	88 e7       	ldi	r24, 0x78	; 120
    1f4e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
  lcd_fix_customchar(ResIcon1);		//load Character  [
    1f52:	85 e9       	ldi	r24, 0x95	; 149
    1f54:	91 e0       	ldi	r25, 0x01	; 1
    1f56:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS2);	//Custom-Character 
    1f5a:	80 e7       	ldi	r24, 0x70	; 112
    1f5c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
  lcd_fix_customchar(ResIcon2);		//load Character  ]
    1f60:	8d e9       	ldi	r24, 0x9D	; 157
    1f62:	91 e0       	ldi	r25, 0x01	; 1
    1f64:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
#endif
#ifdef PULLUP_DISABLE
 #ifdef __AVR_ATmega8__
  SFIOR = (1<<PUD);		// disable Pull-Up Resistors mega8
 #else
  MCUCR = (1<<PUD);		// disable Pull-Up Resistors mega168 family
    1f68:	80 e1       	ldi	r24, 0x10	; 16
    1f6a:	85 bf       	out	0x35, r24	; 53
  }
#else
  #define display_time OFF_WAIT_TIME
#endif

  empty_count = 0;
    1f6c:	10 92 43 01 	sts	0x0143, r1
  mess_count = 0;
    1f70:	10 92 0b 01 	sts	0x010B, r1


//*****************************************************************
//Entry: if start key is pressed before shut down
start:
  PartFound = PART_NONE;
    1f74:	10 92 07 01 	sts	0x0107, r1
  NumOfDiodes = 0;
    1f78:	10 92 05 01 	sts	0x0105, r1
  PartReady = 0;
    1f7c:	10 92 04 01 	sts	0x0104, r1
  PartMode = 0;
    1f80:	10 92 06 01 	sts	0x0106, r1
  WithReference = 0;		// no precision reference voltage
    1f84:	10 92 42 01 	sts	0x0142, r1
  lcd_clear();
    1f88:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_clear>
  ADC_DDR = TXD_MSK;		//activate Software-UART 
    1f8c:	18 e0       	ldi	r17, 0x08	; 8
    1f8e:	17 b9       	out	0x07, r17	; 7
#ifdef AUTO_CAL
  resis680pl = eeprom_read_word(&R680pl);
    1f90:	8b ea       	ldi	r24, 0xAB	; 171
    1f92:	91 e0       	ldi	r25, 0x01	; 1
    1f94:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__eerd_word_m168>
    1f98:	90 93 09 01 	sts	0x0109, r25
    1f9c:	80 93 08 01 	sts	0x0108, r24
  resis680mi = eeprom_read_word(&R680mi);
    1fa0:	8d ea       	ldi	r24, 0xAD	; 173
    1fa2:	91 e0       	ldi	r25, 0x01	; 1
    1fa4:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__eerd_word_m168>
    1fa8:	90 93 03 01 	sts	0x0103, r25
    1fac:	80 93 02 01 	sts	0x0102, r24
#endif

  ResistorsFound = 0;
    1fb0:	10 92 55 01 	sts	0x0155, r1
  cap.ca = 0;
    1fb4:	10 92 66 01 	sts	0x0166, r1
  cap.cb = 0;
    1fb8:	10 92 67 01 	sts	0x0167, r1
#ifdef WITH_UART
  uart_newline();		// start of new measurement
    1fbc:	0e 94 e7 00 	call	0x1ce	; 0x1ce <uart_newline>
#endif
  ADCconfig.RefFlag = 0;
    1fc0:	10 92 3a 01 	sts	0x013A, r1
  ADCconfig.U_AVCC = U_VCC;	// set initial VCC Voltage
    1fc4:	88 e8       	ldi	r24, 0x88	; 136
    1fc6:	93 e1       	ldi	r25, 0x13	; 19
    1fc8:	90 93 3e 01 	sts	0x013E, r25
    1fcc:	80 93 3d 01 	sts	0x013D, r24
  ADCconfig.Samples = 190;		// set number of ADC samples near to max
    1fd0:	8e eb       	ldi	r24, 0xBE	; 190
    1fd2:	80 93 39 01 	sts	0x0139, r24
  ADC_PORT = TXD_VAL;
    1fd6:	18 b9       	out	0x08, r17	; 8
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND
    1fd8:	88 e1       	ldi	r24, 0x18	; 24
    1fda:	87 b9       	out	0x07, r24	; 7
  wait1ms();
    1fdc:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <wait1ms>
  ADC_DDR =  TXD_MSK; 	// switch pin with reference back to input
    1fe0:	17 b9       	out	0x07, r17	; 7
#if FLASHEND > 0x1fff
  trans.uBE[1] = W5msReadADC(TPREF); // read voltage of 2.5V precision reference
    1fe2:	84 e0       	ldi	r24, 0x04	; 4
    1fe4:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
    1fe8:	ec 01       	movw	r28, r24
    1fea:	90 93 51 01 	sts	0x0151, r25
    1fee:	80 93 50 01 	sts	0x0150, r24
  if ((trans.uBE[1] > 2250) && (trans.uBE[1] < 2750)) {
    1ff2:	8b 5c       	subi	r24, 0xCB	; 203
    1ff4:	98 40       	sbci	r25, 0x08	; 8
    1ff6:	21 e0       	ldi	r18, 0x01	; 1
    1ff8:	83 3f       	cpi	r24, 0xF3	; 243
    1ffa:	92 07       	cpc	r25, r18
    1ffc:	c0 f4       	brcc	.+48     	; 0x202e <main+0x174>
     // precision voltage reference connected, update U_AVCC
     WithReference = 1;
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	80 93 42 01 	sts	0x0142, r24
     ADCconfig.U_AVCC = (unsigned long)((unsigned long)ADCconfig.U_AVCC * 2495) / trans.uBE[1];
    2004:	60 91 3d 01 	lds	r22, 0x013D
    2008:	70 91 3e 01 	lds	r23, 0x013E
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	2f eb       	ldi	r18, 0xBF	; 191
    2012:	39 e0       	ldi	r19, 0x09	; 9
    2014:	40 e0       	ldi	r20, 0x00	; 0
    2016:	50 e0       	ldi	r21, 0x00	; 0
    2018:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
    201c:	9e 01       	movw	r18, r28
    201e:	40 e0       	ldi	r20, 0x00	; 0
    2020:	50 e0       	ldi	r21, 0x00	; 0
    2022:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
    2026:	30 93 3e 01 	sts	0x013E, r19
    202a:	20 93 3d 01 	sts	0x013D, r18
  }
#endif
  lcd_line1();	//1. row 
    202e:	80 e8       	ldi	r24, 0x80	; 128
    2030:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
  
#ifdef WITH_AUTO_REF
  (void) ReadADC(MUX_INT_REF);		// read Reference-voltage 
    2034:	8e e0       	ldi	r24, 0x0E	; 14
    2036:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
  ref_mv = W20msReadADC(MUX_INT_REF);	// read Reference-voltage
    203a:	8e e0       	ldi	r24, 0x0E	; 14
    203c:	0e 94 57 1b 	call	0x36ae	; 0x36ae <W20msReadADC>
    2040:	ec 01       	movw	r28, r24
    2042:	90 93 40 01 	sts	0x0140, r25
    2046:	80 93 3f 01 	sts	0x013F, r24
#else
  ref_mv = DEFAULT_BAND_GAP;	// set to default Reference Voltage
#endif
  ADCconfig.U_Bandgap = ADC_internal_reference;	// set internal reference voltage for ADC
    204a:	8f ea       	ldi	r24, 0xAF	; 175
    204c:	91 e0       	ldi	r25, 0x01	; 1
    204e:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__eerd_byte_m168>
    2052:	99 27       	eor	r25, r25
    2054:	87 fd       	sbrc	r24, 7
    2056:	90 95       	com	r25
    2058:	8c 0f       	add	r24, r28
    205a:	9d 1f       	adc	r25, r29
    205c:	90 93 3c 01 	sts	0x013C, r25
    2060:	80 93 3b 01 	sts	0x013B, r24
  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    2064:	89 e1       	ldi	r24, 0x19	; 25
    2066:	80 93 39 01 	sts	0x0139, r24

#ifdef BAT_CHECK
  // Battery check is selected
  ReadADC(TPBAT);	//Dummy-Readout
    206a:	85 e0       	ldi	r24, 0x05	; 5
    206c:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
  trans.uBE[0] = W5msReadADC(TPBAT); 	//with 5V reference
    2070:	85 e0       	ldi	r24, 0x05	; 5
    2072:	0e 94 41 1b 	call	0x3682	; 0x3682 <W5msReadADC>
    2076:	90 93 4f 01 	sts	0x014F, r25
    207a:	80 93 4e 01 	sts	0x014E, r24
  lcd_fix_string(Bat_str);		//output: "Bat. "
    207e:	85 ee       	ldi	r24, 0xE5	; 229
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
 #ifdef BAT_OUT
  // display Battery voltage
  // The divisor to get the voltage in 0.01V units is ((10*33)/133) witch is about 2.4812
  // A good result can be get with multiply by 4 and divide by 10 (about 0.75%).
  cap.cval = (trans.uBE[0]*4)/10+((BAT_OUT+5)/10); // usually output only 2 digits
    2086:	80 91 4e 01 	lds	r24, 0x014E
    208a:	90 91 4f 01 	lds	r25, 0x014F
    208e:	88 0f       	add	r24, r24
    2090:	99 1f       	adc	r25, r25
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	6a e0       	ldi	r22, 0x0A	; 10
    2098:	70 e0       	ldi	r23, 0x00	; 0
    209a:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <__udivmodhi4>
    209e:	61 5f       	subi	r22, 0xF1	; 241
    20a0:	7f 4f       	sbci	r23, 0xFF	; 255
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	60 93 58 01 	sts	0x0158, r22
    20aa:	70 93 59 01 	sts	0x0159, r23
    20ae:	80 93 5a 01 	sts	0x015A, r24
    20b2:	90 93 5b 01 	sts	0x015B, r25
  DisplayValue(cap.cval,-2,'V',2);		// Display 2 Digits of this 10mV units
    20b6:	4e ef       	ldi	r20, 0xFE	; 254
    20b8:	26 e5       	ldi	r18, 0x56	; 86
    20ba:	02 e0       	ldi	r16, 0x02	; 2
    20bc:	0e 94 9e 02 	call	0x53c	; 0x53c <DisplayValue>
  lcd_space();
    20c0:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_space>
  // less than 3.0 V only .2V difference to Warn-Level
  #define WARN_LEVEL (((unsigned long)(BAT_POOR*100+200)*(unsigned long)33)/133)
 #endif
 #define POOR_LEVEL (((unsigned long)(BAT_POOR*100)*(unsigned long)33)/133)
  // check the battery voltage
  if (trans.uBE[0] <  WARN_LEVEL) {
    20c4:	80 91 4e 01 	lds	r24, 0x014E
    20c8:	90 91 4f 01 	lds	r25, 0x014F
    20cc:	26 e0       	ldi	r18, 0x06	; 6
    20ce:	8a 3f       	cpi	r24, 0xFA	; 250
    20d0:	92 07       	cpc	r25, r18
    20d2:	88 f4       	brcc	.+34     	; 0x20f6 <main+0x23c>
     //Vcc < 7,3V; show Warning 
     if(trans.uBE[0] < POOR_LEVEL) {	
    20d4:	26 e0       	ldi	r18, 0x06	; 6
    20d6:	83 33       	cpi	r24, 0x33	; 51
    20d8:	92 07       	cpc	r25, r18
    20da:	50 f4       	brcc	.+20     	; 0x20f0 <main+0x236>
        //Vcc <6,3V; no proper operation is possible
        lcd_fix_string(BatEmpty);	//Battery empty!
    20dc:	8c e7       	ldi	r24, 0x7C	; 124
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        wait_about2s();
    20e4:	80 e9       	ldi	r24, 0x90	; 144
    20e6:	91 e0       	ldi	r25, 0x01	; 1
    20e8:	0e 94 9a 03 	call	0x734	; 0x734 <sleep_5ms>
        PORTD = 0;			//switch power off
    20ec:	1b b8       	out	0x0b, r1	; 11
        return 0;
    20ee:	6a c4       	rjmp	.+2260   	; 0x29c4 <main+0xb0a>
     }
     lcd_fix_string(BatWeak);		//Battery weak
    20f0:	87 e7       	ldi	r24, 0x77	; 119
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <main+0x240>
  } else { // Battery-voltage OK
     lcd_fix_string(OK_str); 		// "OK"
    20f6:	8b ee       	ldi	r24, 0xEB	; 235
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  }
#else
  lcd_fix_string(VERSION_str);		// if no Battery check, Version .. in row 1
#endif
#ifdef WDT_enabled
  wdt_enable(WDTO_2S);		//Watchdog on
    20fe:	2f e0       	ldi	r18, 0x0F	; 15
    2100:	88 e1       	ldi	r24, 0x18	; 24
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	f8 94       	cli
    2108:	a8 95       	wdr
    210a:	80 93 60 00 	sts	0x0060, r24
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	20 93 60 00 	sts	0x0060, r18
#endif

//  wait_about1s();			// add more time for reading batterie voltage
  // begin tests
#ifdef AUTO_RH
  RefVoltage();			//compute RHmultip = f(reference voltage)
    2114:	0e 94 46 02 	call	0x48c	; 0x48c <RefVoltage>
#endif
#if FLASHEND > 0x1fff
  if (WithReference) {
    2118:	80 91 42 01 	lds	r24, 0x0142
    211c:	88 23       	and	r24, r24
    211e:	f1 f0       	breq	.+60     	; 0x215c <main+0x2a2>
     /* 2.5V precision reference is checked OK */
     if ((mess_count == 0) && (empty_count == 0)) {
    2120:	80 91 0b 01 	lds	r24, 0x010B
    2124:	88 23       	and	r24, r24
    2126:	d1 f4       	brne	.+52     	; 0x215c <main+0x2a2>
    2128:	80 91 43 01 	lds	r24, 0x0143
    212c:	88 23       	and	r24, r24
    212e:	b1 f4       	brne	.+44     	; 0x215c <main+0x2a2>
         /* display VCC= only first time */
         lcd_line2();
    2130:	80 ec       	ldi	r24, 0xC0	; 192
    2132:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
         lcd_fix_string(VCC_str);		// VCC=
    2136:	87 e2       	ldi	r24, 0x27	; 39
    2138:	91 e0       	ldi	r25, 0x01	; 1
    213a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
         DisplayValue(ADCconfig.U_AVCC,-3,'V',3);	// Display 3 Digits of this mV units
    213e:	60 91 3d 01 	lds	r22, 0x013D
    2142:	70 91 3e 01 	lds	r23, 0x013E
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	4d ef       	ldi	r20, 0xFD	; 253
    214c:	26 e5       	ldi	r18, 0x56	; 86
    214e:	03 e0       	ldi	r16, 0x03	; 3
    2150:	0e 94 9e 02 	call	0x53c	; 0x53c <DisplayValue>
         wait_about1s();
    2154:	88 ec       	ldi	r24, 0xC8	; 200
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	0e 94 9a 03 	call	0x734	; 0x734 <sleep_5ms>
     }
  }
#endif

  lcd_line2();			//LCD position row2, column 1
    215c:	80 ec       	ldi	r24, 0xC0	; 192
    215e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
  lcd_fix_string(TestRunning);		//String: testing...
    2162:	8c e6       	ldi	r24, 0x6C	; 108
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
#ifndef DebugOut
  lcd_line2();			//LCD position row 2, column 1
    216a:	80 ec       	ldi	r24, 0xC0	; 192
    216c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
#endif
  EntladePins();		// discharge all capacitors!
    2170:	0e 94 ab 01 	call	0x356	; 0x356 <EntladePins>
  if(PartFound == PART_CELL) {
    2174:	80 91 07 01 	lds	r24, 0x0107
    2178:	88 30       	cpi	r24, 0x08	; 8
    217a:	39 f4       	brne	.+14     	; 0x218a <main+0x2d0>
    lcd_clear();
    217c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_clear>
    lcd_fix_string(Cell_str);	// display "Cell!"
    2180:	81 e2       	ldi	r24, 0x21	; 33
    2182:	91 e0       	ldi	r25, 0x01	; 1
    2184:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    goto end2;
    2188:	ea c3       	rjmp	.+2004   	; 0x295e <main+0xaa4>
  }

#ifdef CHECK_CALL
  AutoCheck();			//check, if selftest should be done
    218a:	0e 94 9b 0a 	call	0x1536	; 0x1536 <AutoCheck>
#endif
     
  // check all 6 combinations for the 3 pins 
//         High  Low  Tri
  CheckPins(TP1, TP2, TP3);
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	61 e0       	ldi	r22, 0x01	; 1
    2192:	42 e0       	ldi	r20, 0x02	; 2
    2194:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <CheckPins>
  CheckPins(TP2, TP1, TP3);
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	60 e0       	ldi	r22, 0x00	; 0
    219c:	42 e0       	ldi	r20, 0x02	; 2
    219e:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <CheckPins>

  CheckPins(TP1, TP3, TP2);
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	62 e0       	ldi	r22, 0x02	; 2
    21a6:	41 e0       	ldi	r20, 0x01	; 1
    21a8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <CheckPins>
  CheckPins(TP3, TP1, TP2);
    21ac:	82 e0       	ldi	r24, 0x02	; 2
    21ae:	60 e0       	ldi	r22, 0x00	; 0
    21b0:	41 e0       	ldi	r20, 0x01	; 1
    21b2:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <CheckPins>

  CheckPins(TP2, TP3, TP1);
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	62 e0       	ldi	r22, 0x02	; 2
    21ba:	40 e0       	ldi	r20, 0x00	; 0
    21bc:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <CheckPins>
  CheckPins(TP3, TP2, TP1);
    21c0:	82 e0       	ldi	r24, 0x02	; 2
    21c2:	61 e0       	ldi	r22, 0x01	; 1
    21c4:	40 e0       	ldi	r20, 0x00	; 0
    21c6:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <CheckPins>
  
  //separate check if is is a capacitor
  if(((PartFound == PART_NONE) || (PartFound == PART_RESISTOR) || (PartFound == PART_DIODE)) ) {
    21ca:	80 91 07 01 	lds	r24, 0x0107
    21ce:	88 23       	and	r24, r24
    21d0:	21 f0       	breq	.+8      	; 0x21da <main+0x320>
    21d2:	86 30       	cpi	r24, 0x06	; 6
    21d4:	11 f0       	breq	.+4      	; 0x21da <main+0x320>
    21d6:	81 30       	cpi	r24, 0x01	; 1
    21d8:	d9 f4       	brne	.+54     	; 0x2210 <main+0x356>
     EntladePins();		// discharge capacities
    21da:	0e 94 ab 01 	call	0x356	; 0x356 <EntladePins>
     //measurement of capacities in all 3 combinations
     cap.cval_max = 0;		// set max to zero
    21de:	10 92 5c 01 	sts	0x015C, r1
    21e2:	10 92 5d 01 	sts	0x015D, r1
    21e6:	10 92 5e 01 	sts	0x015E, r1
    21ea:	10 92 5f 01 	sts	0x015F, r1
     cap.cpre_max = -12;	// set max to pF unit
    21ee:	84 ef       	ldi	r24, 0xF4	; 244
    21f0:	80 93 69 01 	sts	0x0169, r24
     ReadCapacity(TP3, TP1);
    21f4:	82 e0       	ldi	r24, 0x02	; 2
    21f6:	60 e0       	ldi	r22, 0x00	; 0
    21f8:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <ReadCapacity>
     ReadCapacity(TP3, TP2);
    21fc:	82 e0       	ldi	r24, 0x02	; 2
    21fe:	61 e0       	ldi	r22, 0x01	; 1
    2200:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <ReadCapacity>
     ReadCapacity(TP2, TP1);
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	60 e0       	ldi	r22, 0x00	; 0
    2208:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <ReadCapacity>

#if FLASHEND > 0x1fff
     ReadInductance();			// measure inductance
    220c:	0e 94 2f 18 	call	0x305e	; 0x305e <ReadInductance>
#endif
  }
  //All checks are done, output result to display
  lcd_clear();
    2210:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_clear>
  if(PartFound == PART_DIODE) {
    2214:	80 91 07 01 	lds	r24, 0x0107
    2218:	81 30       	cpi	r24, 0x01	; 1
    221a:	09 f0       	breq	.+2      	; 0x221e <main+0x364>
    221c:	ff c0       	rjmp	.+510    	; 0x241c <main+0x562>
     if(NumOfDiodes == 1) {		//single Diode
    221e:	90 91 05 01 	lds	r25, 0x0105
    2222:	91 30       	cpi	r25, 0x01	; 1
    2224:	49 f5       	brne	.+82     	; 0x2278 <main+0x3be>
        lcd_fix_string(Diode);		//"Diode: "
    2226:	81 e9       	ldi	r24, 0x91	; 145
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        lcd_testpin(diodes[0].Anode);
    222e:	80 91 6c 01 	lds	r24, 0x016C
    2232:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
        lcd_fix_string(AnKat);		//"->|-"
    2236:	85 e3       	ldi	r24, 0x35	; 53
    2238:	91 e0       	ldi	r25, 0x01	; 1
    223a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        lcd_testpin(diodes[0].Cathode);
    223e:	80 91 6d 01 	lds	r24, 0x016D
    2242:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
        UfAusgabe(0x70);
    2246:	80 e7       	ldi	r24, 0x70	; 112
    2248:	0e 94 86 03 	call	0x70c	; 0x70c <UfAusgabe>
        lcd_fix_string(GateCap_str);	//"C="
    224c:	88 ef       	ldi	r24, 0xF8	; 248
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        ReadCapacity(diodes[0].Cathode,diodes[0].Anode);	// Capacity opposite flow direction
    2254:	80 91 6d 01 	lds	r24, 0x016D
    2258:	60 91 6c 01 	lds	r22, 0x016C
    225c:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <ReadCapacity>
        DisplayValue(cap.cval,cap.cpre,'F',3);
    2260:	60 91 58 01 	lds	r22, 0x0158
    2264:	70 91 59 01 	lds	r23, 0x0159
    2268:	80 91 5a 01 	lds	r24, 0x015A
    226c:	90 91 5b 01 	lds	r25, 0x015B
    2270:	40 91 68 01 	lds	r20, 0x0168
    2274:	26 e4       	ldi	r18, 0x46	; 70
    2276:	f4 c2       	rjmp	.+1512   	; 0x2860 <main+0x9a6>
        goto end;
     } else if(NumOfDiodes == 2) { // double diode
    2278:	92 30       	cpi	r25, 0x02	; 2
    227a:	09 f0       	breq	.+2      	; 0x227e <main+0x3c4>
    227c:	4c c0       	rjmp	.+152    	; 0x2316 <main+0x45c>
        lcd_data('2');
    227e:	82 e3       	ldi	r24, 0x32	; 50
    2280:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
        lcd_fix_string(Dioden);		//"diodes "
    2284:	8d e3       	ldi	r24, 0x3D	; 61
    2286:	91 e0       	ldi	r25, 0x01	; 1
    2288:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        if(diodes[0].Anode == diodes[1].Anode) { //Common Anode
    228c:	90 91 6c 01 	lds	r25, 0x016C
    2290:	20 91 70 01 	lds	r18, 0x0170
    2294:	92 17       	cp	r25, r18
    2296:	59 f4       	brne	.+22     	; 0x22ae <main+0x3f4>
           lcd_testpin(diodes[0].Cathode);
    2298:	80 91 6d 01 	lds	r24, 0x016D
    229c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    22a0:	89 e3       	ldi	r24, 0x39	; 57
    22a2:	91 e0       	ldi	r25, 0x01	; 1
    22a4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    22a8:	80 91 6c 01 	lds	r24, 0x016C
    22ac:	2b c0       	rjmp	.+86     	; 0x2304 <main+0x44a>
           lcd_fix_string(AnKat);	//"->|-"
           lcd_testpin(diodes[1].Cathode);
           UfAusgabe(0x01);
           goto end;
        } else if(diodes[0].Cathode == diodes[1].Cathode) { //Common Cathode
    22ae:	30 91 6d 01 	lds	r19, 0x016D
    22b2:	80 91 71 01 	lds	r24, 0x0171
    22b6:	38 17       	cp	r19, r24
    22b8:	b9 f4       	brne	.+46     	; 0x22e8 <main+0x42e>
           lcd_testpin(diodes[0].Anode);
    22ba:	89 2f       	mov	r24, r25
    22bc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    22c0:	85 e3       	ldi	r24, 0x35	; 53
    22c2:	91 e0       	ldi	r25, 0x01	; 1
    22c4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
	   lcd_testpin(diodes[0].Cathode);
    22c8:	80 91 6d 01 	lds	r24, 0x016D
    22cc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    22d0:	89 e3       	ldi	r24, 0x39	; 57
    22d2:	91 e0       	ldi	r25, 0x01	; 1
    22d4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[1].Anode);
    22d8:	80 91 70 01 	lds	r24, 0x0170
    22dc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
           UfAusgabe(0x01);
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	0e 94 86 03 	call	0x70c	; 0x70c <UfAusgabe>
           goto end;
    22e6:	34 c3       	rjmp	.+1640   	; 0x2950 <main+0xa96>
          }
        else if ((diodes[0].Cathode == diodes[1].Anode) && (diodes[1].Cathode == diodes[0].Anode)) {
    22e8:	32 17       	cp	r19, r18
    22ea:	09 f0       	breq	.+2      	; 0x22ee <main+0x434>
    22ec:	ff c2       	rjmp	.+1534   	; 0x28ec <main+0xa32>
    22ee:	89 17       	cp	r24, r25
    22f0:	09 f0       	breq	.+2      	; 0x22f4 <main+0x43a>
    22f2:	fc c2       	rjmp	.+1528   	; 0x28ec <main+0xa32>
           //Antiparallel
           lcd_testpin(diodes[0].Anode);
    22f4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    22f8:	85 e3       	ldi	r24, 0x35	; 53
    22fa:	91 e0       	ldi	r25, 0x01	; 1
    22fc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[0].Cathode);
    2300:	80 91 6d 01 	lds	r24, 0x016D
    2304:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2308:	85 e3       	ldi	r24, 0x35	; 53
    230a:	91 e0       	ldi	r25, 0x01	; 1
    230c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[1].Cathode);
    2310:	80 91 71 01 	lds	r24, 0x0171
    2314:	e3 cf       	rjmp	.-58     	; 0x22dc <main+0x422>
           UfAusgabe(0x01);
           goto end;
        }
     } else if(NumOfDiodes == 3) {
    2316:	93 30       	cpi	r25, 0x03	; 3
    2318:	09 f0       	breq	.+2      	; 0x231c <main+0x462>
    231a:	e8 c2       	rjmp	.+1488   	; 0x28ec <main+0xa32>
        //Serial of 2 Diodes; was detected as 3 Diodes 
        trans.b = 3;
    231c:	90 93 52 01 	sts	0x0152, r25
        trans.c = 3;
    2320:	90 93 53 01 	sts	0x0153, r25
        /* Check for any constallation of 2 serial diodes:
          Only once the pin No of anyone Cathode is identical of another anode.
          two diodes in series is additionally detected as third big diode.
        */
        if(diodes[0].Cathode == diodes[1].Anode)
    2324:	50 91 6d 01 	lds	r21, 0x016D
    2328:	90 91 70 01 	lds	r25, 0x0170
    232c:	59 17       	cp	r21, r25
    232e:	21 f4       	brne	.+8      	; 0x2338 <main+0x47e>
          {
           trans.b = 0;
    2330:	10 92 52 01 	sts	0x0152, r1
           trans.c = 1;
    2334:	80 93 53 01 	sts	0x0153, r24
          }
        if(diodes[0].Anode == diodes[1].Cathode)
    2338:	40 91 6c 01 	lds	r20, 0x016C
    233c:	30 91 71 01 	lds	r19, 0x0171
    2340:	43 17       	cp	r20, r19
    2342:	29 f4       	brne	.+10     	; 0x234e <main+0x494>
          {
           trans.b = 1;
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	80 93 52 01 	sts	0x0152, r24
           trans.c = 0;
    234a:	10 92 53 01 	sts	0x0153, r1
          }
        if(diodes[0].Cathode == diodes[2].Anode)
    234e:	20 91 74 01 	lds	r18, 0x0174
    2352:	52 17       	cp	r21, r18
    2354:	29 f4       	brne	.+10     	; 0x2360 <main+0x4a6>
          {
           trans.b = 0;
    2356:	10 92 52 01 	sts	0x0152, r1
           trans.c = 2;
    235a:	82 e0       	ldi	r24, 0x02	; 2
    235c:	80 93 53 01 	sts	0x0153, r24
          }
        if(diodes[0].Anode == diodes[2].Cathode)
    2360:	80 91 75 01 	lds	r24, 0x0175
    2364:	48 17       	cp	r20, r24
    2366:	29 f4       	brne	.+10     	; 0x2372 <main+0x4b8>
          {
           trans.b = 2;
    2368:	42 e0       	ldi	r20, 0x02	; 2
    236a:	40 93 52 01 	sts	0x0152, r20
           trans.c = 0;
    236e:	10 92 53 01 	sts	0x0153, r1
          }
        if(diodes[1].Cathode == diodes[2].Anode)
    2372:	32 17       	cp	r19, r18
    2374:	31 f4       	brne	.+12     	; 0x2382 <main+0x4c8>
          {
           trans.b = 1;
    2376:	21 e0       	ldi	r18, 0x01	; 1
    2378:	20 93 52 01 	sts	0x0152, r18
           trans.c = 2;
    237c:	22 e0       	ldi	r18, 0x02	; 2
    237e:	20 93 53 01 	sts	0x0153, r18
          }
        if(diodes[1].Anode == diodes[2].Cathode)
    2382:	98 17       	cp	r25, r24
    2384:	31 f4       	brne	.+12     	; 0x2392 <main+0x4d8>
          {
           trans.b = 2;
    2386:	82 e0       	ldi	r24, 0x02	; 2
    2388:	80 93 52 01 	sts	0x0152, r24
           trans.c = 1;
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	80 93 53 01 	sts	0x0153, r24
        lcd_testpin(diodes[2].Cathode);
        lcd_space();
        lcd_string(utoa(diodes[2].Voltage, outval, 10));
        lcd_line1();
#endif
        if((trans.b<3) && (trans.c<3)) {
    2392:	80 91 52 01 	lds	r24, 0x0152
    2396:	83 30       	cpi	r24, 0x03	; 3
    2398:	08 f0       	brcs	.+2      	; 0x239c <main+0x4e2>
    239a:	a8 c2       	rjmp	.+1360   	; 0x28ec <main+0xa32>
    239c:	80 91 53 01 	lds	r24, 0x0153
    23a0:	83 30       	cpi	r24, 0x03	; 3
    23a2:	08 f0       	brcs	.+2      	; 0x23a6 <main+0x4ec>
    23a4:	a3 c2       	rjmp	.+1350   	; 0x28ec <main+0xa32>
           lcd_data('3');
    23a6:	83 e3       	ldi	r24, 0x33	; 51
    23a8:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
           lcd_fix_string(Dioden);	//"Diodes "
    23ac:	8d e3       	ldi	r24, 0x3D	; 61
    23ae:	91 e0       	ldi	r25, 0x01	; 1
    23b0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Anode);
    23b4:	e0 91 52 01 	lds	r30, 0x0152
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	ee 0f       	add	r30, r30
    23bc:	ff 1f       	adc	r31, r31
    23be:	ee 0f       	add	r30, r30
    23c0:	ff 1f       	adc	r31, r31
    23c2:	e4 59       	subi	r30, 0x94	; 148
    23c4:	fe 4f       	sbci	r31, 0xFE	; 254
    23c6:	80 81       	ld	r24, Z
    23c8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    23cc:	85 e3       	ldi	r24, 0x35	; 53
    23ce:	91 e0       	ldi	r25, 0x01	; 1
    23d0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Cathode);
    23d4:	e0 91 52 01 	lds	r30, 0x0152
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	ee 0f       	add	r30, r30
    23dc:	ff 1f       	adc	r31, r31
    23de:	ee 0f       	add	r30, r30
    23e0:	ff 1f       	adc	r31, r31
    23e2:	e4 59       	subi	r30, 0x94	; 148
    23e4:	fe 4f       	sbci	r31, 0xFE	; 254
    23e6:	81 81       	ldd	r24, Z+1	; 0x01
    23e8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    23ec:	85 e3       	ldi	r24, 0x35	; 53
    23ee:	91 e0       	ldi	r25, 0x01	; 1
    23f0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[trans.c].Cathode);
    23f4:	e0 91 53 01 	lds	r30, 0x0153
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	ee 0f       	add	r30, r30
    23fc:	ff 1f       	adc	r31, r31
    23fe:	ee 0f       	add	r30, r30
    2400:	ff 1f       	adc	r31, r31
    2402:	e4 59       	subi	r30, 0x94	; 148
    2404:	fe 4f       	sbci	r31, 0xFE	; 254
    2406:	81 81       	ldd	r24, Z+1	; 0x01
    2408:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
           UfAusgabe( (trans.b<<4)|trans.c);
    240c:	80 91 52 01 	lds	r24, 0x0152
    2410:	82 95       	swap	r24
    2412:	80 7f       	andi	r24, 0xF0	; 240
    2414:	90 91 53 01 	lds	r25, 0x0153
    2418:	89 2b       	or	r24, r25
    241a:	63 cf       	rjmp	.-314    	; 0x22e2 <main+0x428>
           goto end;
        }
     }
     // end (PartFound == PART_DIODE)
  } else if (PartFound == PART_TRANSISTOR) {
    241c:	82 30       	cpi	r24, 0x02	; 2
    241e:	09 f0       	breq	.+2      	; 0x2422 <main+0x568>
    2420:	a1 c0       	rjmp	.+322    	; 0x2564 <main+0x6aa>
    if(PartReady != 0) {
    2422:	80 91 04 01 	lds	r24, 0x0104
    2426:	88 23       	and	r24, r24
    2428:	71 f1       	breq	.+92     	; 0x2486 <main+0x5cc>
       if((trans.hfe[0]>trans.hfe[1])) {
    242a:	80 91 4a 01 	lds	r24, 0x014A
    242e:	90 91 4b 01 	lds	r25, 0x014B
    2432:	a0 91 4c 01 	lds	r26, 0x014C
    2436:	b0 91 4d 01 	lds	r27, 0x014D
    243a:	20 91 46 01 	lds	r18, 0x0146
    243e:	30 91 47 01 	lds	r19, 0x0147
    2442:	40 91 48 01 	lds	r20, 0x0148
    2446:	50 91 49 01 	lds	r21, 0x0149
    244a:	82 17       	cp	r24, r18
    244c:	93 07       	cpc	r25, r19
    244e:	a4 07       	cpc	r26, r20
    2450:	b5 07       	cpc	r27, r21
    2452:	48 f4       	brcc	.+18     	; 0x2466 <main+0x5ac>
          //if the amplification factor was higher at first testr: swap C and E !
          tmp = trans.c;
    2454:	80 91 53 01 	lds	r24, 0x0153
          trans.c = trans.e;
    2458:	90 91 54 01 	lds	r25, 0x0154
    245c:	90 93 53 01 	sts	0x0153, r25
          trans.e = tmp;
    2460:	80 93 54 01 	sts	0x0154, r24
    2464:	10 c0       	rjmp	.+32     	; 0x2486 <main+0x5cc>
       } else {
          trans.hfe[0] = trans.hfe[1];
    2466:	80 93 46 01 	sts	0x0146, r24
    246a:	90 93 47 01 	sts	0x0147, r25
    246e:	a0 93 48 01 	sts	0x0148, r26
    2472:	b0 93 49 01 	sts	0x0149, r27
          trans.uBE[0] = trans.uBE[1];
    2476:	80 91 50 01 	lds	r24, 0x0150
    247a:	90 91 51 01 	lds	r25, 0x0151
    247e:	90 93 4f 01 	sts	0x014F, r25
    2482:	80 93 4e 01 	sts	0x014E, r24
       }
    }

    if(PartMode == PART_MODE_NPN) {
    2486:	80 91 06 01 	lds	r24, 0x0106
    248a:	81 30       	cpi	r24, 0x01	; 1
    248c:	19 f4       	brne	.+6      	; 0x2494 <main+0x5da>
       lcd_fix_string(NPN_str);		//"NPN "
    248e:	8e ef       	ldi	r24, 0xFE	; 254
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	02 c0       	rjmp	.+4      	; 0x2498 <main+0x5de>
    } else {
       lcd_fix_string(PNP_str);		//"PNP "
    2494:	83 e0       	ldi	r24, 0x03	; 3
    2496:	91 e0       	ldi	r25, 0x01	; 1
    2498:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    }
    if( NumOfDiodes > 2) {	//Transistor with protection diode
    249c:	80 91 05 01 	lds	r24, 0x0105
    24a0:	83 30       	cpi	r24, 0x03	; 3
    24a2:	a0 f0       	brcs	.+40     	; 0x24cc <main+0x612>
#ifdef EBC_STYLE
       if(PartMode == PART_MODE_NPN)
#else
       if (((PartMode == PART_MODE_NPN) && (trans.c > trans.e)) || ((PartMode != PART_MODE_NPN) && (trans.c < trans.e)))
    24a4:	20 91 06 01 	lds	r18, 0x0106
    24a8:	90 91 53 01 	lds	r25, 0x0153
    24ac:	80 91 54 01 	lds	r24, 0x0154
    24b0:	21 30       	cpi	r18, 0x01	; 1
    24b2:	19 f4       	brne	.+6      	; 0x24ba <main+0x600>
    24b4:	89 17       	cp	r24, r25
    24b6:	18 f0       	brcs	.+6      	; 0x24be <main+0x604>
    24b8:	05 c0       	rjmp	.+10     	; 0x24c4 <main+0x60a>
    24ba:	98 17       	cp	r25, r24
    24bc:	18 f4       	brcc	.+6      	; 0x24c4 <main+0x60a>
#endif
       {
          lcd_fix_string(AnKat);	//"->|-"
    24be:	85 e3       	ldi	r24, 0x35	; 53
    24c0:	91 e0       	ldi	r25, 0x01	; 1
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <main+0x60e>
       } else {
          lcd_fix_string(KatAn);	//"-|<-"
    24c4:	89 e3       	ldi	r24, 0x39	; 57
    24c6:	91 e0       	ldi	r25, 0x01	; 1
    24c8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    lcd_fix_string(EBC_str);		//" EBC="
    lcd_testpin(trans.e);
    lcd_testpin(trans.b);
    lcd_testpin(trans.c);
#else
    lcd_fix_string(N123_str);		//" 123="
    24cc:	88 e0       	ldi	r24, 0x08	; 8
    24ce:	91 e0       	ldi	r25, 0x01	; 1
    24d0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    for (ii=0;ii<3;ii++) {
    24d4:	10 92 44 01 	sts	0x0144, r1
    24d8:	1e c0       	rjmp	.+60     	; 0x2516 <main+0x65c>
        if (ii == trans.e)  lcd_data('E');	// Output Character in right order
    24da:	90 91 54 01 	lds	r25, 0x0154
    24de:	89 17       	cp	r24, r25
    24e0:	19 f4       	brne	.+6      	; 0x24e8 <main+0x62e>
    24e2:	85 e4       	ldi	r24, 0x45	; 69
    24e4:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
        if (ii == trans.b)  lcd_data('B');
    24e8:	90 91 44 01 	lds	r25, 0x0144
    24ec:	80 91 52 01 	lds	r24, 0x0152
    24f0:	98 17       	cp	r25, r24
    24f2:	19 f4       	brne	.+6      	; 0x24fa <main+0x640>
    24f4:	82 e4       	ldi	r24, 0x42	; 66
    24f6:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
        if (ii == trans.c)  lcd_data('C');
    24fa:	90 91 44 01 	lds	r25, 0x0144
    24fe:	80 91 53 01 	lds	r24, 0x0153
    2502:	98 17       	cp	r25, r24
    2504:	19 f4       	brne	.+6      	; 0x250c <main+0x652>
    2506:	83 e4       	ldi	r24, 0x43	; 67
    2508:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
    lcd_testpin(trans.e);
    lcd_testpin(trans.b);
    lcd_testpin(trans.c);
#else
    lcd_fix_string(N123_str);		//" 123="
    for (ii=0;ii<3;ii++) {
    250c:	80 91 44 01 	lds	r24, 0x0144
    2510:	8f 5f       	subi	r24, 0xFF	; 255
    2512:	80 93 44 01 	sts	0x0144, r24
    2516:	80 91 44 01 	lds	r24, 0x0144
    251a:	83 30       	cpi	r24, 0x03	; 3
    251c:	f0 f2       	brcs	.-68     	; 0x24da <main+0x620>
        if (ii == trans.e)  lcd_data('E');	// Output Character in right order
        if (ii == trans.b)  lcd_data('B');
        if (ii == trans.c)  lcd_data('C');
    }
#endif
    lcd_line2(); //2. row 
    251e:	80 ec       	ldi	r24, 0xC0	; 192
    2520:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
    lcd_fix_string(hfe_str);		//"B="  (hFE)
    2524:	8b ef       	ldi	r24, 0xFB	; 251
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    DisplayValue(trans.hfe[0],0,0,3);
    252c:	60 91 46 01 	lds	r22, 0x0146
    2530:	70 91 47 01 	lds	r23, 0x0147
    2534:	80 91 48 01 	lds	r24, 0x0148
    2538:	90 91 49 01 	lds	r25, 0x0149
    253c:	40 e0       	ldi	r20, 0x00	; 0
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	03 e0       	ldi	r16, 0x03	; 3
    2542:	0e 94 9e 02 	call	0x53c	; 0x53c <DisplayValue>
    lcd_space();
    2546:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_space>

    lcd_fix_string(Uf_str);		//"Uf="
    254a:	8e e0       	ldi	r24, 0x0E	; 14
    254c:	91 e0       	ldi	r25, 0x01	; 1
    254e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    DisplayValue(trans.uBE[0],-3,'V',3);
    2552:	60 91 4e 01 	lds	r22, 0x014E
    2556:	70 91 4f 01 	lds	r23, 0x014F
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	4d ef       	ldi	r20, 0xFD	; 253
    2560:	26 e5       	ldi	r18, 0x56	; 86
    2562:	7f c1       	rjmp	.+766    	; 0x2862 <main+0x9a8>
    goto end;
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    2564:	83 30       	cpi	r24, 0x03	; 3
    2566:	09 f0       	breq	.+2      	; 0x256a <main+0x6b0>
    2568:	a3 c0       	rjmp	.+326    	; 0x26b0 <main+0x7f6>
    if(PartMode&1) {
    256a:	80 91 06 01 	lds	r24, 0x0106
    256e:	80 ff       	sbrs	r24, 0
    2570:	02 c0       	rjmp	.+4      	; 0x2576 <main+0x6bc>
       //N-Kanal
       lcd_data('P');			//P-channel
    2572:	80 e5       	ldi	r24, 0x50	; 80
    2574:	01 c0       	rjmp	.+2      	; 0x2578 <main+0x6be>
    } else {
       lcd_data('N');			//N-channel
    2576:	8e e4       	ldi	r24, 0x4E	; 78
    2578:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
    }
    lcd_data('-');
    257c:	8d e2       	ldi	r24, 0x2D	; 45
    257e:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>

    tmp = PartMode/2;
    2582:	80 91 06 01 	lds	r24, 0x0106
    2586:	86 95       	lsr	r24
    if (tmp == (PART_MODE_N_D_MOS/2)) {
    2588:	82 30       	cpi	r24, 0x02	; 2
    258a:	11 f4       	brne	.+4      	; 0x2590 <main+0x6d6>
       lcd_data('D');			// N-D
    258c:	84 e4       	ldi	r24, 0x44	; 68
    258e:	03 c0       	rjmp	.+6      	; 0x2596 <main+0x6dc>
    }
    if (tmp == (PART_MODE_N_E_MOS/2)) {
    2590:	81 30       	cpi	r24, 0x01	; 1
    2592:	21 f4       	brne	.+8      	; 0x259c <main+0x6e2>
       lcd_data('E');			// N-E
    2594:	85 e4       	ldi	r24, 0x45	; 69
    2596:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
    259a:	05 c0       	rjmp	.+10     	; 0x25a6 <main+0x6ec>
    }
    if (tmp == (PART_MODE_N_JFET/2)) {
    259c:	83 30       	cpi	r24, 0x03	; 3
    259e:	19 f4       	brne	.+6      	; 0x25a6 <main+0x6ec>
       lcd_fix_string(jfet_str);	//"JFET"
    25a0:	83 ef       	ldi	r24, 0xF3	; 243
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	02 c0       	rjmp	.+4      	; 0x25aa <main+0x6f0>
    } else {
       lcd_fix_string(mosfet_str);	//"-MOS "
    25a6:	8e ee       	ldi	r24, 0xEE	; 238
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    lcd_fix_string(GDS_str);		//"GDS="
    lcd_testpin(trans.b);
    lcd_testpin(trans.c);
    lcd_testpin(trans.e);
#else
    lcd_fix_string(N123_str);		//" 123="
    25ae:	88 e0       	ldi	r24, 0x08	; 8
    25b0:	91 e0       	ldi	r25, 0x01	; 1
    25b2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    for (ii=0;ii<3;ii++) {
    25b6:	10 92 44 01 	sts	0x0144, r1
    25ba:	1e c0       	rjmp	.+60     	; 0x25f8 <main+0x73e>
        if (ii == trans.e)  lcd_data('S');	// Output Character in right order
    25bc:	90 91 54 01 	lds	r25, 0x0154
    25c0:	89 17       	cp	r24, r25
    25c2:	19 f4       	brne	.+6      	; 0x25ca <main+0x710>
    25c4:	83 e5       	ldi	r24, 0x53	; 83
    25c6:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
        if (ii == trans.b)  lcd_data('G');
    25ca:	90 91 44 01 	lds	r25, 0x0144
    25ce:	80 91 52 01 	lds	r24, 0x0152
    25d2:	98 17       	cp	r25, r24
    25d4:	19 f4       	brne	.+6      	; 0x25dc <main+0x722>
    25d6:	87 e4       	ldi	r24, 0x47	; 71
    25d8:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
        if (ii == trans.c)  lcd_data('D');
    25dc:	90 91 44 01 	lds	r25, 0x0144
    25e0:	80 91 53 01 	lds	r24, 0x0153
    25e4:	98 17       	cp	r25, r24
    25e6:	19 f4       	brne	.+6      	; 0x25ee <main+0x734>
    25e8:	84 e4       	ldi	r24, 0x44	; 68
    25ea:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
    lcd_testpin(trans.b);
    lcd_testpin(trans.c);
    lcd_testpin(trans.e);
#else
    lcd_fix_string(N123_str);		//" 123="
    for (ii=0;ii<3;ii++) {
    25ee:	80 91 44 01 	lds	r24, 0x0144
    25f2:	8f 5f       	subi	r24, 0xFF	; 255
    25f4:	80 93 44 01 	sts	0x0144, r24
    25f8:	80 91 44 01 	lds	r24, 0x0144
    25fc:	83 30       	cpi	r24, 0x03	; 3
    25fe:	f0 f2       	brcs	.-68     	; 0x25bc <main+0x702>
        if (ii == trans.e)  lcd_data('S');	// Output Character in right order
        if (ii == trans.b)  lcd_data('G');
        if (ii == trans.c)  lcd_data('D');
    }
#endif
    if((NumOfDiodes > 0) && (PartMode < PART_MODE_N_D_MOS)) {
    2600:	80 91 05 01 	lds	r24, 0x0105
    2604:	88 23       	and	r24, r24
    2606:	a1 f0       	breq	.+40     	; 0x2630 <main+0x776>
    2608:	20 91 06 01 	lds	r18, 0x0106
    260c:	24 30       	cpi	r18, 0x04	; 4
    260e:	80 f4       	brcc	.+32     	; 0x2630 <main+0x776>
    2610:	90 91 53 01 	lds	r25, 0x0153
    2614:	80 91 54 01 	lds	r24, 0x0154
       //MOSFET with protection diode; only with enhancement-FETs
#ifdef EBC_STYLE
       if (PartMode&1)
#else
       if (((PartMode&1) && (trans.c < trans.e)) || ((!(PartMode&1)) && (trans.c > trans.e)))
    2618:	20 ff       	sbrs	r18, 0
    261a:	03 c0       	rjmp	.+6      	; 0x2622 <main+0x768>
    261c:	98 17       	cp	r25, r24
    261e:	18 f0       	brcs	.+6      	; 0x2626 <main+0x76c>
    2620:	04 c0       	rjmp	.+8      	; 0x262a <main+0x770>
    2622:	89 17       	cp	r24, r25
    2624:	10 f4       	brcc	.+4      	; 0x262a <main+0x770>
#endif
       {
          lcd_data(LCD_CHAR_DIODE1);	//show Diode symbol >|
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	01 c0       	rjmp	.+2      	; 0x262c <main+0x772>
       } else {
          lcd_data(LCD_CHAR_DIODE2);	//show Diode symbol |<
    262a:	82 e0       	ldi	r24, 0x02	; 2
    262c:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
       }
    }
    lcd_line2();			//2. Row
    2630:	80 ec       	ldi	r24, 0xC0	; 192
    2632:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
    if(PartMode < PART_MODE_N_D_MOS) {	//enhancement-MOSFET
    2636:	80 91 06 01 	lds	r24, 0x0106
    263a:	84 30       	cpi	r24, 0x04	; 4
    263c:	d8 f4       	brcc	.+54     	; 0x2674 <main+0x7ba>
	//Gate capacity
       lcd_fix_string(GateCap_str);		//"C="
    263e:	88 ef       	ldi	r24, 0xF8	; 248
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       ReadCapacity(trans.b,trans.e);	//measure capacity
    2646:	80 91 52 01 	lds	r24, 0x0152
    264a:	60 91 54 01 	lds	r22, 0x0154
    264e:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <ReadCapacity>
       DisplayValue(cap.cval,cap.cpre,'F',3);
    2652:	60 91 58 01 	lds	r22, 0x0158
    2656:	70 91 59 01 	lds	r23, 0x0159
    265a:	80 91 5a 01 	lds	r24, 0x015A
    265e:	90 91 5b 01 	lds	r25, 0x015B
    2662:	40 91 68 01 	lds	r20, 0x0168
    2666:	26 e4       	ldi	r18, 0x46	; 70
    2668:	03 e0       	ldi	r16, 0x03	; 3
    266a:	0e 94 9e 02 	call	0x53c	; 0x53c <DisplayValue>
       lcd_fix_string(vt_str);		// "Vt="
    266e:	82 e1       	ldi	r24, 0x12	; 18
    2670:	91 e0       	ldi	r25, 0x01	; 1
    2672:	13 c0       	rjmp	.+38     	; 0x269a <main+0x7e0>
    } else {
       lcd_data('I');
    2674:	89 e4       	ldi	r24, 0x49	; 73
    2676:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
       lcd_data('=');
    267a:	8d e3       	ldi	r24, 0x3D	; 61
    267c:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
       DisplayValue(trans.uBE[1],-5,'A',2);
    2680:	60 91 50 01 	lds	r22, 0x0150
    2684:	70 91 51 01 	lds	r23, 0x0151
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	4b ef       	ldi	r20, 0xFB	; 251
    268e:	21 e4       	ldi	r18, 0x41	; 65
    2690:	02 e0       	ldi	r16, 0x02	; 2
    2692:	0e 94 9e 02 	call	0x53c	; 0x53c <DisplayValue>
       lcd_fix_string(Vgs_str);		// " Vgs="
    2696:	87 e1       	ldi	r24, 0x17	; 23
    2698:	91 e0       	ldi	r25, 0x01	; 1
    269a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    }
    //Gate-threshold voltage
    DisplayValue(gthvoltage,-3,'V',3);
    269e:	60 91 56 01 	lds	r22, 0x0156
    26a2:	70 91 57 01 	lds	r23, 0x0157
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	4d ef       	ldi	r20, 0xFD	; 253
    26ac:	26 e5       	ldi	r18, 0x56	; 86
    26ae:	d8 c0       	rjmp	.+432    	; 0x2860 <main+0x9a6>
    goto end;
    // end (PartFound == PART_FET)
  } else if (PartFound == PART_THYRISTOR) {
    26b0:	85 30       	cpi	r24, 0x05	; 5
    26b2:	19 f4       	brne	.+6      	; 0x26ba <main+0x800>
    lcd_fix_string(Thyristor);		//"Thyristor"
    26b4:	84 ea       	ldi	r24, 0xA4	; 164
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	04 c0       	rjmp	.+8      	; 0x26c2 <main+0x808>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    26ba:	84 30       	cpi	r24, 0x04	; 4
    26bc:	c1 f4       	brne	.+48     	; 0x26ee <main+0x834>
    lcd_fix_string(Triac);		//"Triac"
    26be:	8e e9       	ldi	r24, 0x9E	; 158
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  mess_count = 0;
  goto end2;


gakAusgabe:
  lcd_line2(); //2. row 
    26c6:	80 ec       	ldi	r24, 0xC0	; 192
    26c8:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
  lcd_fix_string(GAK);		//"GAK="
    26cc:	89 e9       	ldi	r24, 0x99	; 153
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  lcd_testpin(trans.b);
    26d4:	80 91 52 01 	lds	r24, 0x0152
    26d8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
  lcd_testpin(trans.c);
    26dc:	80 91 53 01 	lds	r24, 0x0153
    26e0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
  lcd_testpin(trans.e);
    26e4:	80 91 54 01 	lds	r24, 0x0154
    26e8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
    26ec:	31 c1       	rjmp	.+610    	; 0x2950 <main+0xa96>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    lcd_fix_string(Triac);		//"Triac"
    goto gakAusgabe;
  }
  else if(PartFound == PART_RESISTOR) {
    26ee:	86 30       	cpi	r24, 0x06	; 6
    26f0:	09 f0       	breq	.+2      	; 0x26f4 <main+0x83a>
    26f2:	da c0       	rjmp	.+436    	; 0x28a8 <main+0x9ee>
    if (ResistorsFound == 1) { // single resistor
    26f4:	60 91 55 01 	lds	r22, 0x0155
    26f8:	61 30       	cpi	r22, 0x01	; 1
    26fa:	69 f4       	brne	.+26     	; 0x2716 <main+0x85c>
       lcd_testpin(resis[0].rb);  	//Pin-number 1
    26fc:	80 91 21 01 	lds	r24, 0x0121
    2700:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
       lcd_fix_string(Resistor_str);
    2704:	82 e4       	ldi	r24, 0x42	; 66
    2706:	91 e0       	ldi	r25, 0x01	; 1
    2708:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       lcd_testpin(resis[0].ra);		//Pin-number 2
    270c:	80 91 20 01 	lds	r24, 0x0120
    2710:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
    2714:	80 c0       	rjmp	.+256    	; 0x2816 <main+0x95c>
    } else { // R-Max suchen
       ii = 0;
    2716:	10 92 44 01 	sts	0x0144, r1
       if (resis[1].rx > resis[0].rx)
    271a:	20 91 23 01 	lds	r18, 0x0123
    271e:	30 91 24 01 	lds	r19, 0x0124
    2722:	40 91 25 01 	lds	r20, 0x0125
    2726:	50 91 26 01 	lds	r21, 0x0126
    272a:	80 91 18 01 	lds	r24, 0x0118
    272e:	90 91 19 01 	lds	r25, 0x0119
    2732:	a0 91 1a 01 	lds	r26, 0x011A
    2736:	b0 91 1b 01 	lds	r27, 0x011B
    273a:	82 17       	cp	r24, r18
    273c:	93 07       	cpc	r25, r19
    273e:	a4 07       	cpc	r26, r20
    2740:	b5 07       	cpc	r27, r21
    2742:	18 f4       	brcc	.+6      	; 0x274a <main+0x890>
          ii = 1;
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	80 93 44 01 	sts	0x0144, r24
       if (ResistorsFound == 2) {
    274a:	62 30       	cpi	r22, 0x02	; 2
    274c:	19 f4       	brne	.+6      	; 0x2754 <main+0x89a>
          ii = 2;
    274e:	60 93 44 01 	sts	0x0144, r22
    2752:	22 c0       	rjmp	.+68     	; 0x2798 <main+0x8de>
       } else {
          if (resis[2].rx > resis[ii].rx) {
    2754:	20 91 44 01 	lds	r18, 0x0144
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	8b e0       	ldi	r24, 0x0B	; 11
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	28 9f       	mul	r18, r24
    2760:	f0 01       	movw	r30, r0
    2762:	29 9f       	mul	r18, r25
    2764:	f0 0d       	add	r31, r0
    2766:	38 9f       	mul	r19, r24
    2768:	f0 0d       	add	r31, r0
    276a:	11 24       	eor	r1, r1
    276c:	e8 5e       	subi	r30, 0xE8	; 232
    276e:	fe 4f       	sbci	r31, 0xFE	; 254
    2770:	20 91 2e 01 	lds	r18, 0x012E
    2774:	30 91 2f 01 	lds	r19, 0x012F
    2778:	40 91 30 01 	lds	r20, 0x0130
    277c:	50 91 31 01 	lds	r21, 0x0131
    2780:	80 81       	ld	r24, Z
    2782:	91 81       	ldd	r25, Z+1	; 0x01
    2784:	a2 81       	ldd	r26, Z+2	; 0x02
    2786:	b3 81       	ldd	r27, Z+3	; 0x03
    2788:	82 17       	cp	r24, r18
    278a:	93 07       	cpc	r25, r19
    278c:	a4 07       	cpc	r26, r20
    278e:	b5 07       	cpc	r27, r21
    2790:	18 f4       	brcc	.+6      	; 0x2798 <main+0x8de>
             ii = 2;
    2792:	82 e0       	ldi	r24, 0x02	; 2
    2794:	80 93 44 01 	sts	0x0144, r24
          }
       }

       if (ii == 0) {
    2798:	80 91 44 01 	lds	r24, 0x0144
    279c:	88 23       	and	r24, r24
    279e:	89 f4       	brne	.+34     	; 0x27c2 <main+0x908>
          lcd_data('1');
    27a0:	81 e3       	ldi	r24, 0x31	; 49
    27a2:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    27a6:	82 e4       	ldi	r24, 0x42	; 66
    27a8:	91 e0       	ldi	r25, 0x01	; 1
    27aa:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
          lcd_data('3');
    27ae:	83 e3       	ldi	r24, 0x33	; 51
    27b0:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    27b4:	82 e4       	ldi	r24, 0x42	; 66
    27b6:	91 e0       	ldi	r25, 0x01	; 1
    27b8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
          lcd_data('2');
    27bc:	82 e3       	ldi	r24, 0x32	; 50
    27be:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
       }
       if (ii == 1) {
    27c2:	80 91 44 01 	lds	r24, 0x0144
    27c6:	81 30       	cpi	r24, 0x01	; 1
    27c8:	89 f4       	brne	.+34     	; 0x27ec <main+0x932>
          lcd_data('1');
    27ca:	81 e3       	ldi	r24, 0x31	; 49
    27cc:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    27d0:	82 e4       	ldi	r24, 0x42	; 66
    27d2:	91 e0       	ldi	r25, 0x01	; 1
    27d4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
          lcd_data('2');
    27d8:	82 e3       	ldi	r24, 0x32	; 50
    27da:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    27de:	82 e4       	ldi	r24, 0x42	; 66
    27e0:	91 e0       	ldi	r25, 0x01	; 1
    27e2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
          lcd_data('3');
    27e6:	83 e3       	ldi	r24, 0x33	; 51
    27e8:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
       }
       if (ii == 2) {
    27ec:	80 91 44 01 	lds	r24, 0x0144
    27f0:	82 30       	cpi	r24, 0x02	; 2
    27f2:	89 f4       	brne	.+34     	; 0x2816 <main+0x95c>
          lcd_data('2');
    27f4:	82 e3       	ldi	r24, 0x32	; 50
    27f6:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    27fa:	82 e4       	ldi	r24, 0x42	; 66
    27fc:	91 e0       	ldi	r25, 0x01	; 1
    27fe:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
          lcd_data('1');
    2802:	81 e3       	ldi	r24, 0x31	; 49
    2804:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    2808:	82 e4       	ldi	r24, 0x42	; 66
    280a:	91 e0       	ldi	r25, 0x01	; 1
    280c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
          lcd_data('3');
    2810:	83 e3       	ldi	r24, 0x33	; 51
    2812:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
       }
    }
    lcd_line2(); //2. row 
    2816:	80 ec       	ldi	r24, 0xC0	; 192
    2818:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
    if (ResistorsFound == 1) {
    281c:	80 91 55 01 	lds	r24, 0x0155
    2820:	81 30       	cpi	r24, 0x01	; 1
    2822:	11 f5       	brne	.+68     	; 0x2868 <main+0x9ae>
       RvalOut(0);
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	0e 94 54 03 	call	0x6a8	; 0x6a8 <RvalOut>
#if FLASHEND > 0x1fff
       if (resis[0].lx != 0) {
    282a:	80 91 1c 01 	lds	r24, 0x011C
    282e:	90 91 1d 01 	lds	r25, 0x011D
    2832:	a0 91 1e 01 	lds	r26, 0x011E
    2836:	b0 91 1f 01 	lds	r27, 0x011F
    283a:	00 97       	sbiw	r24, 0x00	; 0
    283c:	a1 05       	cpc	r26, r1
    283e:	b1 05       	cpc	r27, r1
    2840:	09 f4       	brne	.+2      	; 0x2844 <main+0x98a>
    2842:	86 c0       	rjmp	.+268    	; 0x2950 <main+0xa96>
	  // resistor have also Inductance
          lcd_fix_string(Lis_str);	// "L="
    2844:	82 e3       	ldi	r24, 0x32	; 50
    2846:	91 e0       	ldi	r25, 0x01	; 1
    2848:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
          DisplayValue(resis[0].lx,-5,'H',3);	// output inductance
    284c:	60 91 1c 01 	lds	r22, 0x011C
    2850:	70 91 1d 01 	lds	r23, 0x011D
    2854:	80 91 1e 01 	lds	r24, 0x011E
    2858:	90 91 1f 01 	lds	r25, 0x011F
    285c:	4b ef       	ldi	r20, 0xFB	; 251
    285e:	28 e4       	ldi	r18, 0x48	; 72
    2860:	03 e0       	ldi	r16, 0x03	; 3
    2862:	0e 94 9e 02 	call	0x53c	; 0x53c <DisplayValue>
    2866:	74 c0       	rjmp	.+232    	; 0x2950 <main+0xa96>
       }
#endif
    } else {
       // output resistor values in right order
       if (ii == 0) {
    2868:	80 91 44 01 	lds	r24, 0x0144
    286c:	88 23       	and	r24, r24
    286e:	31 f4       	brne	.+12     	; 0x287c <main+0x9c2>
          RvalOut(1);
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	0e 94 54 03 	call	0x6a8	; 0x6a8 <RvalOut>
          RvalOut(2);
    2876:	82 e0       	ldi	r24, 0x02	; 2
    2878:	0e 94 54 03 	call	0x6a8	; 0x6a8 <RvalOut>
       }
       if (ii == 1) {
    287c:	80 91 44 01 	lds	r24, 0x0144
    2880:	81 30       	cpi	r24, 0x01	; 1
    2882:	31 f4       	brne	.+12     	; 0x2890 <main+0x9d6>
          RvalOut(0);
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	0e 94 54 03 	call	0x6a8	; 0x6a8 <RvalOut>
          RvalOut(2);
    288a:	82 e0       	ldi	r24, 0x02	; 2
    288c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <RvalOut>
       }
       if (ii == 2) {
    2890:	80 91 44 01 	lds	r24, 0x0144
    2894:	82 30       	cpi	r24, 0x02	; 2
    2896:	09 f0       	breq	.+2      	; 0x289a <main+0x9e0>
    2898:	5b c0       	rjmp	.+182    	; 0x2950 <main+0xa96>
          RvalOut(0);
    289a:	80 e0       	ldi	r24, 0x00	; 0
    289c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <RvalOut>
          RvalOut(1);
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <RvalOut>
    28a6:	54 c0       	rjmp	.+168    	; 0x2950 <main+0xa96>
    goto end;

  } // end (PartFound == PART_RESISTOR)

//capacity measurement is wanted
  else if(PartFound == PART_CAPACITOR) {
    28a8:	87 30       	cpi	r24, 0x07	; 7
    28aa:	01 f5       	brne	.+64     	; 0x28ec <main+0xa32>
//     lcd_fix_string(Capacitor);
     lcd_testpin(cap.ca);		//Pin number 1
    28ac:	80 91 66 01 	lds	r24, 0x0166
    28b0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
     lcd_fix_string(CapZeich);		// capacitor sign
    28b4:	8d e1       	ldi	r24, 0x1D	; 29
    28b6:	91 e0       	ldi	r25, 0x01	; 1
    28b8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
//#if FLASHEND > 0x1fff
//     lcd_fix_string(Resistor_str);	// -[=]-
//#endif
     lcd_testpin(cap.cb);		//Pin number 2
    28bc:	80 91 67 01 	lds	r24, 0x0167
    28c0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
     lcd_line2(); 			//2. row 
    28c4:	80 ec       	ldi	r24, 0xC0	; 192
    28c6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
     DisplayValue(cap.cval_max,cap.cpre_max,'F',4);
    28ca:	60 91 5c 01 	lds	r22, 0x015C
    28ce:	70 91 5d 01 	lds	r23, 0x015D
    28d2:	80 91 5e 01 	lds	r24, 0x015E
    28d6:	90 91 5f 01 	lds	r25, 0x015F
    28da:	40 91 69 01 	lds	r20, 0x0169
    28de:	26 e4       	ldi	r18, 0x46	; 70
    28e0:	04 e0       	ldi	r16, 0x04	; 4
    28e2:	0e 94 9e 02 	call	0x53c	; 0x53c <DisplayValue>
#if FLASHEND > 0x1fff
     GetESR();				// get ESR of capacitor
    28e6:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <GetESR>
#endif
     goto end;
    28ea:	32 c0       	rjmp	.+100    	; 0x2950 <main+0xa96>
  }
  if(NumOfDiodes == 0) { //no diodes are found
    28ec:	80 91 05 01 	lds	r24, 0x0105
    28f0:	88 23       	and	r24, r24
    28f2:	71 f4       	brne	.+28     	; 0x2910 <main+0xa56>
     lcd_fix_string(TestFailed1); 	//"Kein,unbek. oder"
    28f4:	87 eb       	ldi	r24, 0xB7	; 183
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_line2(); //2. row 
    28fc:	80 ec       	ldi	r24, 0xC0	; 192
    28fe:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
     lcd_fix_string(TestFailed2); 	//"defektes "
    2902:	83 e8       	ldi	r24, 0x83	; 131
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_fix_string(Bauteil);		//"Bauteil"
    290a:	8c e8       	ldi	r24, 0x8C	; 140
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	16 c0       	rjmp	.+44     	; 0x293c <main+0xa82>
  } else {
     lcd_fix_string(Bauteil);		//"Bauteil"
    2910:	8c e8       	ldi	r24, 0x8C	; 140
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_fix_string(Unknown); 		//" unbek."
    2918:	8e ea       	ldi	r24, 0xAE	; 174
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_line2(); //2. row 
    2920:	80 ec       	ldi	r24, 0xC0	; 192
    2922:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
     lcd_fix_string(OrBroken); 		//"oder defekt "
    2926:	87 ec       	ldi	r24, 0xC7	; 199
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_data(NumOfDiodes + '0');
    292e:	80 91 05 01 	lds	r24, 0x0105
    2932:	80 5d       	subi	r24, 0xD0	; 208
    2934:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
     lcd_fix_string(AnKat);		//"->|-"
    2938:	85 e3       	ldi	r24, 0x35	; 53
    293a:	91 e0       	ldi	r25, 0x01	; 1
    293c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  }
  empty_count++;
    2940:	80 91 43 01 	lds	r24, 0x0143
    2944:	8f 5f       	subi	r24, 0xFF	; 255
    2946:	80 93 43 01 	sts	0x0143, r24
  mess_count = 0;
    294a:	10 92 0b 01 	sts	0x010B, r1
  goto end2;
    294e:	07 c0       	rjmp	.+14     	; 0x295e <main+0xaa4>
  lcd_testpin(trans.b);
  lcd_testpin(trans.c);
  lcd_testpin(trans.e);
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 end:
  empty_count = 0;		// reset counter, if part is found
    2950:	10 92 43 01 	sts	0x0143, r1
  mess_count++;			// count measurements
    2954:	80 91 0b 01 	lds	r24, 0x010B
    2958:	8f 5f       	subi	r24, 0xFF	; 255
    295a:	80 93 0b 01 	sts	0x010B, r24

 end2:
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND, release relay
    295e:	88 e1       	ldi	r24, 0x18	; 24
    2960:	87 b9       	out	0x07, r24	; 7
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
    2962:	4f 9b       	sbis	0x09, 7	; 9
    2964:	fe cf       	rjmp	.-4      	; 0x2962 <main+0xaa8>
  wait_about200ms();
    2966:	88 e2       	ldi	r24, 0x28	; 40
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	0e 94 9a 03 	call	0x734	; 0x734 <sleep_5ms>
// wait 14 seconds or 5 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage+=10) {
    296e:	10 92 57 01 	sts	0x0157, r1
    2972:	10 92 56 01 	sts	0x0156, r1
    2976:	10 c0       	rjmp	.+32     	; 0x2998 <main+0xade>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    2978:	4f 9b       	sbis	0x09, 7	; 9
    297a:	fc ca       	rjmp	.-2568   	; 0x1f74 <main+0xba>
        // If the key is pressed again... 
        // goto start of measurement 
        goto start;
     }
     wdt_reset();
    297c:	a8 95       	wdr
     wait_about10ms();
    297e:	82 e0       	ldi	r24, 0x02	; 2
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	0e 94 9a 03 	call	0x734	; 0x734 <sleep_5ms>
 end2:
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND, release relay
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
  wait_about200ms();
// wait 14 seconds or 5 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage+=10) {
    2986:	80 91 56 01 	lds	r24, 0x0156
    298a:	90 91 57 01 	lds	r25, 0x0157
    298e:	0a 96       	adiw	r24, 0x0a	; 10
    2990:	90 93 57 01 	sts	0x0157, r25
    2994:	80 93 56 01 	sts	0x0156, r24
    2998:	80 91 56 01 	lds	r24, 0x0156
    299c:	90 91 57 01 	lds	r25, 0x0157
    29a0:	26 e3       	ldi	r18, 0x36	; 54
    29a2:	80 3b       	cpi	r24, 0xB0	; 176
    29a4:	92 07       	cpc	r25, r18
    29a6:	40 f3       	brcs	.-48     	; 0x2978 <main+0xabe>
  if ((empty_count < POWER_OFF) && (mess_count < POWER2_OFF)) {
     goto start;			// repeat measurement POWER_OFF times
  }
 #endif
  // only one Measurement requested, shut off
  wdt_disable();			//Watchdog off
    29a8:	88 e1       	ldi	r24, 0x18	; 24
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	f8 94       	cli
    29ae:	80 93 60 00 	sts	0x0060, r24
    29b2:	10 92 60 00 	sts	0x0060, r1
    29b6:	0f be       	out	0x3f, r0	; 63
  ON_PORT &= ~(1<<ON_PIN);		//switch off power
    29b8:	5e 98       	cbi	0x0b, 6	; 11
  ON_DDR = (1<<ON_PIN);			//switch to GND
    29ba:	80 e4       	ldi	r24, 0x40	; 64
    29bc:	8a b9       	out	0x0a, r24	; 10
  //never ending loop 
  while(1) {
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    29be:	4f 99       	sbic	0x09, 7	; 9
    29c0:	fe cf       	rjmp	.-4      	; 0x29be <main+0xb04>
    29c2:	d8 ca       	rjmp	.-2640   	; 0x1f74 <main+0xba>
  }
#else
  goto start;	// POWER_OFF not selected, repeat measurement
#endif
  return 0;
}   // end main
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	df 91       	pop	r29
    29ca:	cf 91       	pop	r28
    29cc:	1f 91       	pop	r17
    29ce:	0f 91       	pop	r16
    29d0:	08 95       	ret

000029d2 <uart_putc>:
    29d2:	2f 93       	push	r18
    29d4:	5f b7       	in	r21, 0x3f	; 63
    29d6:	2f 93       	push	r18
    29d8:	2a e0       	ldi	r18, 0x0A	; 10
    29da:	80 95       	com	r24
    29dc:	08 94       	sec

000029de <putchar0>:
    29de:	10 f4       	brcc	.+4      	; 0x29e4 <putchar1>
    29e0:	43 98       	cbi	0x08, 3	; 8
    29e2:	02 c0       	rjmp	.+4      	; 0x29e8 <putchar2>

000029e4 <putchar1>:
    29e4:	43 9a       	sbi	0x08, 3	; 8
	...

000029e8 <putchar2>:
    29e8:	08 d0       	rcall	.+16     	; 0x29fa <UART_delay>
    29ea:	07 d0       	rcall	.+14     	; 0x29fa <UART_delay>
    29ec:	86 95       	lsr	r24
    29ee:	2a 95       	dec	r18
    29f0:	b1 f7       	brne	.-20     	; 0x29de <putchar0>
    29f2:	2f 91       	pop	r18
    29f4:	5f bf       	out	0x3f, r21	; 63
    29f6:	2f 91       	pop	r18
    29f8:	08 95       	ret

000029fa <UART_delay>:
    29fa:	5f 93       	push	r21
    29fc:	5f b7       	in	r21, 0x3f	; 63
    29fe:	5f 93       	push	r21
    2a00:	00 00       	nop
    2a02:	5e e3       	ldi	r21, 0x3E	; 62

00002a04 <UART_delay1>:
    2a04:	5a 95       	dec	r21
    2a06:	f1 f7       	brne	.-4      	; 0x2a04 <UART_delay1>
    2a08:	00 00       	nop
    2a0a:	5f 91       	pop	r21
    2a0c:	5f bf       	out	0x3f, r21	; 63
    2a0e:	5f 91       	pop	r21
    2a10:	08 95       	ret

00002a12 <wait5s>:
    2a12:	03 d0       	rcall	.+6      	; 0x2a1a <wait1000ms>

00002a14 <wait4s>:
    2a14:	02 d0       	rcall	.+4      	; 0x2a1a <wait1000ms>

00002a16 <wait3s>:
    2a16:	01 d0       	rcall	.+2      	; 0x2a1a <wait1000ms>

00002a18 <wait2s>:
    2a18:	00 d0       	rcall	.+0      	; 0x2a1a <wait1000ms>

00002a1a <wait1000ms>:
    2a1a:	00 d0       	rcall	.+0      	; 0x2a1c <wait500ms>

00002a1c <wait500ms>:
    2a1c:	03 d0       	rcall	.+6      	; 0x2a24 <wait100ms>

00002a1e <wait400ms>:
    2a1e:	02 d0       	rcall	.+4      	; 0x2a24 <wait100ms>

00002a20 <wait300ms>:
    2a20:	01 d0       	rcall	.+2      	; 0x2a24 <wait100ms>

00002a22 <wait200ms>:
    2a22:	00 d0       	rcall	.+0      	; 0x2a24 <wait100ms>

00002a24 <wait100ms>:
    2a24:	a8 95       	wdr
    2a26:	00 d0       	rcall	.+0      	; 0x2a28 <wait50ms>

00002a28 <wait50ms>:
    2a28:	03 d0       	rcall	.+6      	; 0x2a30 <wait10ms>

00002a2a <wait40ms>:
    2a2a:	02 d0       	rcall	.+4      	; 0x2a30 <wait10ms>

00002a2c <wait30ms>:
    2a2c:	01 d0       	rcall	.+2      	; 0x2a30 <wait10ms>

00002a2e <wait20ms>:
    2a2e:	00 d0       	rcall	.+0      	; 0x2a30 <wait10ms>

00002a30 <wait10ms>:
    2a30:	00 d0       	rcall	.+0      	; 0x2a32 <wait5ms>

00002a32 <wait5ms>:
    2a32:	03 d0       	rcall	.+6      	; 0x2a3a <wait1ms>

00002a34 <wait4ms>:
    2a34:	02 d0       	rcall	.+4      	; 0x2a3a <wait1ms>

00002a36 <wait3ms>:
    2a36:	01 d0       	rcall	.+2      	; 0x2a3a <wait1ms>

00002a38 <wait2ms>:
    2a38:	00 d0       	rcall	.+0      	; 0x2a3a <wait1ms>

00002a3a <wait1ms>:
    2a3a:	00 d0       	rcall	.+0      	; 0x2a3c <wait500us>

00002a3c <wait500us>:
    2a3c:	03 d0       	rcall	.+6      	; 0x2a44 <wait100us>

00002a3e <wait400us>:
    2a3e:	02 d0       	rcall	.+4      	; 0x2a44 <wait100us>

00002a40 <wait300us>:
    2a40:	01 d0       	rcall	.+2      	; 0x2a44 <wait100us>

00002a42 <wait200us>:
    2a42:	00 d0       	rcall	.+0      	; 0x2a44 <wait100us>

00002a44 <wait100us>:
    2a44:	00 d0       	rcall	.+0      	; 0x2a46 <wait50us>

00002a46 <wait50us>:
    2a46:	03 d0       	rcall	.+6      	; 0x2a4e <wait10us>

00002a48 <wait40us>:
    2a48:	02 d0       	rcall	.+4      	; 0x2a4e <wait10us>

00002a4a <wait30us>:
    2a4a:	01 d0       	rcall	.+2      	; 0x2a4e <wait10us>

00002a4c <wait20us>:
    2a4c:	00 d0       	rcall	.+0      	; 0x2a4e <wait10us>

00002a4e <wait10us>:
    2a4e:	00 d0       	rcall	.+0      	; 0x2a50 <wait5us>

00002a50 <wait5us>:
    2a50:	03 d0       	rcall	.+6      	; 0x2a58 <wait1us>

00002a52 <wait4us>:
    2a52:	02 d0       	rcall	.+4      	; 0x2a58 <wait1us>

00002a54 <wait3us>:
    2a54:	01 d0       	rcall	.+2      	; 0x2a58 <wait1us>

00002a56 <wait2us>:
    2a56:	00 d0       	rcall	.+0      	; 0x2a58 <wait1us>

00002a58 <wait1us>:
    2a58:	00 00       	nop
    2a5a:	08 95       	ret

00002a5c <getRLmultip>:
  R_DDR = 0;			// switch all resistor ports to input
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
  return;
 } // end ReadCapacity()

unsigned int getRLmultip(unsigned int cvolt) {
    2a5c:	ff 92       	push	r15
    2a5e:	0f 93       	push	r16
    2a60:	1f 93       	push	r17
    2a62:	cf 93       	push	r28
    2a64:	df 93       	push	r29

  unsigned int uvolt;
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;
  if (cvolt >= RL_Tab_Beginn) {
    2a66:	21 e0       	ldi	r18, 0x01	; 1
    2a68:	8c 32       	cpi	r24, 0x2C	; 44
    2a6a:	92 07       	cpc	r25, r18
    2a6c:	18 f0       	brcs	.+6      	; 0x2a74 <getRLmultip+0x18>
     uvolt = cvolt - RL_Tab_Beginn;
    2a6e:	8c 52       	subi	r24, 0x2C	; 44
    2a70:	91 40       	sbci	r25, 0x01	; 1
    2a72:	02 c0       	rjmp	.+4      	; 0x2a78 <getRLmultip+0x1c>
  } else {
     uvolt = 0;			// limit to begin of table
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = uvolt / RL_Tab_Abstand;
    2a78:	69 e1       	ldi	r22, 0x19	; 25
    2a7a:	70 e0       	ldi	r23, 0x00	; 0
    2a7c:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <__udivmodhi4>
  tabres = uvolt % RL_Tab_Abstand;
    2a80:	f8 2e       	mov	r15, r24
  tabres = RL_Tab_Abstand - tabres;
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
    2a82:	6d 32       	cpi	r22, 0x2D	; 45
    2a84:	08 f0       	brcs	.+2      	; 0x2a88 <getRLmultip+0x2c>
    2a86:	6c e2       	ldi	r22, 0x2C	; 44
    2a88:	c6 2f       	mov	r28, r22
    2a8a:	d0 e0       	ldi	r29, 0x00	; 0
    2a8c:	ce 01       	movw	r24, r28
    2a8e:	88 0f       	add	r24, r24
    2a90:	99 1f       	adc	r25, r25
    2a92:	80 50       	subi	r24, 0x00	; 0
    2a94:	90 40       	sbci	r25, 0x00	; 0
    2a96:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__eerd_word_m168>
    2a9a:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RLtab[tabind+1]);
    2a9c:	ce 01       	movw	r24, r28
    2a9e:	88 0f       	add	r24, r24
    2aa0:	99 1f       	adc	r25, r25
    2aa2:	8e 5f       	subi	r24, 0xFE	; 254
    2aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    2aa6:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__eerd_word_m168>
    2aaa:	9c 01       	movw	r18, r24
  } else {
     uvolt = 0;			// limit to begin of table
  }
  tabind = uvolt / RL_Tab_Abstand;
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
    2aac:	49 e1       	ldi	r20, 0x19	; 25
    2aae:	4f 19       	sub	r20, r15
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
    2ab0:	50 e0       	ldi	r21, 0x00	; 0
    2ab2:	08 1b       	sub	r16, r24
    2ab4:	19 0b       	sbc	r17, r25
    2ab6:	40 9f       	mul	r20, r16
    2ab8:	c0 01       	movw	r24, r0
    2aba:	41 9f       	mul	r20, r17
    2abc:	90 0d       	add	r25, r0
    2abe:	50 9f       	mul	r21, r16
    2ac0:	90 0d       	add	r25, r0
    2ac2:	11 24       	eor	r1, r1
    2ac4:	0c 96       	adiw	r24, 0x0c	; 12
    2ac6:	69 e1       	ldi	r22, 0x19	; 25
    2ac8:	70 e0       	ldi	r23, 0x00	; 0
    2aca:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <__udivmodhi4>
    2ace:	62 0f       	add	r22, r18
    2ad0:	73 1f       	adc	r23, r19
}
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	df 91       	pop	r29
    2ad6:	cf 91       	pop	r28
    2ad8:	1f 91       	pop	r17
    2ada:	0f 91       	pop	r16
    2adc:	ff 90       	pop	r15
    2ade:	08 95       	ret

00002ae0 <Scale_C_with_vcc>:

void Scale_C_with_vcc(void) {
    2ae0:	8f 92       	push	r8
    2ae2:	9f 92       	push	r9
    2ae4:	af 92       	push	r10
    2ae6:	bf 92       	push	r11
    2ae8:	df 92       	push	r13
    2aea:	ef 92       	push	r14
    2aec:	ff 92       	push	r15
    2aee:	0f 93       	push	r16
    2af0:	1f 93       	push	r17
    2af2:	e0 90 58 01 	lds	r14, 0x0158
    2af6:	f0 90 59 01 	lds	r15, 0x0159
    2afa:	00 91 5a 01 	lds	r16, 0x015A
    2afe:	10 91 5b 01 	lds	r17, 0x015B
    2b02:	d0 90 68 01 	lds	r13, 0x0168
   while (cap.cval > 100000) {
      cap.cval /= 10;
    2b06:	4a e0       	ldi	r20, 0x0A	; 10
    2b08:	84 2e       	mov	r8, r20
    2b0a:	91 2c       	mov	r9, r1
    2b0c:	a1 2c       	mov	r10, r1
    2b0e:	b1 2c       	mov	r11, r1
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    2b10:	08 c0       	rjmp	.+16     	; 0x2b22 <Scale_C_with_vcc+0x42>
      cap.cval /= 10;
    2b12:	c8 01       	movw	r24, r16
    2b14:	b7 01       	movw	r22, r14
    2b16:	a5 01       	movw	r20, r10
    2b18:	94 01       	movw	r18, r8
    2b1a:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
    2b1e:	79 01       	movw	r14, r18
    2b20:	8a 01       	movw	r16, r20
    2b22:	8d 2d       	mov	r24, r13
    2b24:	d3 94       	inc	r13
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    2b26:	91 ea       	ldi	r25, 0xA1	; 161
    2b28:	e9 16       	cp	r14, r25
    2b2a:	96 e8       	ldi	r25, 0x86	; 134
    2b2c:	f9 06       	cpc	r15, r25
    2b2e:	91 e0       	ldi	r25, 0x01	; 1
    2b30:	09 07       	cpc	r16, r25
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	19 07       	cpc	r17, r25
    2b36:	68 f7       	brcc	.-38     	; 0x2b12 <Scale_C_with_vcc+0x32>
    2b38:	80 93 68 01 	sts	0x0168, r24
      cap.cval /= 10;
      cap.cpre ++;			// prevent overflow
   }
   cap.cval *= ADCconfig.U_AVCC;	// scale with measured voltage
    2b3c:	20 91 3d 01 	lds	r18, 0x013D
    2b40:	30 91 3e 01 	lds	r19, 0x013E
    2b44:	40 e0       	ldi	r20, 0x00	; 0
    2b46:	50 e0       	ldi	r21, 0x00	; 0
    2b48:	c8 01       	movw	r24, r16
    2b4a:	b7 01       	movw	r22, r14
    2b4c:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
    2b50:	28 e8       	ldi	r18, 0x88	; 136
    2b52:	33 e1       	ldi	r19, 0x13	; 19
    2b54:	40 e0       	ldi	r20, 0x00	; 0
    2b56:	50 e0       	ldi	r21, 0x00	; 0
    2b58:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
    2b5c:	20 93 58 01 	sts	0x0158, r18
    2b60:	30 93 59 01 	sts	0x0159, r19
    2b64:	40 93 5a 01 	sts	0x015A, r20
    2b68:	50 93 5b 01 	sts	0x015B, r21
}
    2b6c:	1f 91       	pop	r17
    2b6e:	0f 91       	pop	r16
    2b70:	ff 90       	pop	r15
    2b72:	ef 90       	pop	r14
    2b74:	df 90       	pop	r13
    2b76:	bf 90       	pop	r11
    2b78:	af 90       	pop	r10
    2b7a:	9f 90       	pop	r9
    2b7c:	8f 90       	pop	r8
    2b7e:	08 95       	ret

00002b80 <ReadCapacity>:
#include "config.h"
#include "Transistortester.h"


//=================================================================
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    2b80:	9f 92       	push	r9
    2b82:	af 92       	push	r10
    2b84:	bf 92       	push	r11
    2b86:	cf 92       	push	r12
    2b88:	df 92       	push	r13
    2b8a:	ef 92       	push	r14
    2b8c:	ff 92       	push	r15
    2b8e:	0f 93       	push	r16
    2b90:	1f 93       	push	r17
    2b92:	cf 93       	push	r28
    2b94:	df 93       	push	r29
    2b96:	18 2f       	mov	r17, r24
    2b98:	96 2e       	mov	r9, r22
  uint8_t HiPinR_L, HiPinR_H;
  uint8_t LoADC;
  uint8_t ii;

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
    2b9a:	88 0f       	add	r24, r24
    2b9c:	81 0f       	add	r24, r17
    2b9e:	86 0f       	add	r24, r22
    2ba0:	81 50       	subi	r24, 0x01	; 1
    2ba2:	80 93 45 01 	sts	0x0145, r24
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2ba6:	86 2f       	mov	r24, r22
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	88 55       	subi	r24, 0x58	; 88
    2bac:	9e 4f       	sbci	r25, 0xFE	; 254
    2bae:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__eerd_byte_m168>
    2bb2:	a8 2e       	mov	r10, r24
  HiPinR_L = MEM_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
    2bb4:	21 2f       	mov	r18, r17
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	c9 01       	movw	r24, r18
    2bba:	8b 55       	subi	r24, 0x5B	; 91
    2bbc:	9e 4f       	sbci	r25, 0xFE	; 254
    2bbe:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__eerd_byte_m168>
    2bc2:	08 2f       	mov	r16, r24
//     DisplayValue(cap.cval,cap.cpre,'F',3);
//     wait_about2s();
//#endif
//     return;	//We have found a capacitor already
//  }
  if(PartFound == PART_RESISTOR) {
    2bc4:	80 91 07 01 	lds	r24, 0x0107
    2bc8:	86 30       	cpi	r24, 0x06	; 6
    2bca:	09 f4       	brne	.+2      	; 0x2bce <ReadCapacity+0x4e>
    2bcc:	3c c2       	rjmp	.+1144   	; 0x3046 <ReadCapacity+0x4c6>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    2bce:	90 91 05 01 	lds	r25, 0x0105
    2bd2:	ec e6       	ldi	r30, 0x6C	; 108
    2bd4:	f1 e0       	ldi	r31, 0x01	; 1
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	0f c0       	rjmp	.+30     	; 0x2bf8 <ReadCapacity+0x78>
     if ((diodes[ii].Cathode == LowPin) && (diodes[ii].Anode == HighPin) && (diodes[ii].Voltage < 1500)) {
    2bda:	21 81       	ldd	r18, Z+1	; 0x01
    2bdc:	29 15       	cp	r18, r9
    2bde:	51 f4       	brne	.+20     	; 0x2bf4 <ReadCapacity+0x74>
    2be0:	20 81       	ld	r18, Z
    2be2:	21 17       	cp	r18, r17
    2be4:	39 f4       	brne	.+14     	; 0x2bf4 <ReadCapacity+0x74>
    2be6:	22 81       	ldd	r18, Z+2	; 0x02
    2be8:	33 81       	ldd	r19, Z+3	; 0x03
    2bea:	45 e0       	ldi	r20, 0x05	; 5
    2bec:	2c 3d       	cpi	r18, 0xDC	; 220
    2bee:	34 07       	cpc	r19, r20
    2bf0:	08 f4       	brcc	.+2      	; 0x2bf4 <ReadCapacity+0x74>
    2bf2:	29 c2       	rjmp	.+1106   	; 0x3046 <ReadCapacity+0x4c6>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    2bf4:	8f 5f       	subi	r24, 0xFF	; 255
    2bf6:	34 96       	adiw	r30, 0x04	; 4
    2bf8:	89 17       	cp	r24, r25
    2bfa:	78 f3       	brcs	.-34     	; 0x2bda <ReadCapacity+0x5a>

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2bfc:	88 e0       	ldi	r24, 0x08	; 8
    2bfe:	a8 2a       	or	r10, r24
        return;
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
    2c00:	10 92 65 01 	sts	0x0165, r1
    2c04:	10 92 64 01 	sts	0x0164, r1
#endif
  cap.cval = 0;				// set capacity value to zero
    2c08:	10 92 58 01 	sts	0x0158, r1
    2c0c:	10 92 59 01 	sts	0x0159, r1
    2c10:	10 92 5a 01 	sts	0x015A, r1
    2c14:	10 92 5b 01 	sts	0x015B, r1
  cap.cpre = -12;			//default unit is pF
    2c18:	84 ef       	ldi	r24, 0xF4	; 244
    2c1a:	80 93 68 01 	sts	0x0168, r24
  EntladePins();			// discharge capacitor
    2c1e:	0e 94 ab 01 	call	0x356	; 0x356 <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    2c22:	88 e0       	ldi	r24, 0x08	; 8
    2c24:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    2c26:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    2c28:	a7 b8       	out	0x07, r10	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    2c2a:	04 b9       	out	0x04, r16	; 4
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    2c2c:	81 2f       	mov	r24, r17
    2c2e:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
    2c32:	6c 01       	movw	r12, r24
// ******** should adcv[0] be measured without current???
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2c34:	c0 e0       	ldi	r28, 0x00	; 0
    2c36:	d0 e0       	ldi	r29, 0x00	; 0
     R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    2c38:	05 b9       	out	0x05, r16	; 5
     R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    2c3a:	04 b9       	out	0x04, r16	; 4
     wait10ms();			// wait exactly 10ms, do not sleep
    2c3c:	0e 94 18 15 	call	0x2a30	; 0x2a30 <wait10ms>
     R_DDR = 0;				// switch back to input
    2c40:	14 b8       	out	0x04, r1	; 4
     R_PORT = 0;			// no Pull up
    2c42:	15 b8       	out	0x05, r1	; 5
     wait500us();			//wait a little time
    2c44:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <wait500us>
     wdt_reset();
    2c48:	a8 95       	wdr
     // read voltage without current, is already charged enough?
     adcv[2] = ReadADC(HighPin);
    2c4a:	81 2f       	mov	r24, r17
    2c4c:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
    2c50:	7c 01       	movw	r14, r24
     if (adcv[2] > adcv[0]) {
    2c52:	c8 16       	cp	r12, r24
    2c54:	d9 06       	cpc	r13, r25
    2c56:	18 f4       	brcc	.+6      	; 0x2c5e <ReadCapacity+0xde>
        adcv[2] -= adcv[0];		//difference to beginning voltage
    2c58:	ec 18       	sub	r14, r12
    2c5a:	fd 08       	sbc	r15, r13
    2c5c:	02 c0       	rjmp	.+4      	; 0x2c62 <ReadCapacity+0xe2>
     } else {
        adcv[2] = 0;			// voltage is lower or same as beginning voltage
    2c5e:	ee 24       	eor	r14, r14
    2c60:	ff 24       	eor	r15, r15
     }
     if ((ovcnt16 == 126) && (adcv[2] < 75)) {
    2c62:	ce 37       	cpi	r28, 0x7E	; 126
    2c64:	d1 05       	cpc	r29, r1
    2c66:	29 f4       	brne	.+10     	; 0x2c72 <ReadCapacity+0xf2>
    2c68:	9b e4       	ldi	r25, 0x4B	; 75
    2c6a:	e9 16       	cp	r14, r25
    2c6c:	f1 04       	cpc	r15, r1
    2c6e:	08 f4       	brcc	.+2      	; 0x2c72 <ReadCapacity+0xf2>
    2c70:	e5 c1       	rjmp	.+970    	; 0x303c <ReadCapacity+0x4bc>
        // 300mV can not be reached well-timed 
        break;		// don't try to load any more
     }
     if (adcv[2] > 300) {
    2c72:	2d e2       	ldi	r18, 0x2D	; 45
    2c74:	e2 16       	cp	r14, r18
    2c76:	21 e0       	ldi	r18, 0x01	; 1
    2c78:	f2 06       	cpc	r15, r18
    2c7a:	18 f0       	brcs	.+6      	; 0x2c82 <ReadCapacity+0x102>
#if DebugOut == 10
  DisplayValue(ovcnt16,0,' ',4);
  DisplayValue(adcv[2],-3,'V',4);
#endif
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    2c7c:	20 97       	sbiw	r28, 0x00	; 0
    2c7e:	39 f0       	breq	.+14     	; 0x2c8e <ReadCapacity+0x10e>
    2c80:	0c c0       	rjmp	.+24     	; 0x2c9a <ReadCapacity+0x11a>
  R_PORT = 0;				// switch R-Port to GND
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2c82:	21 96       	adiw	r28, 0x01	; 1
    2c84:	31 e0       	ldi	r19, 0x01	; 1
    2c86:	c4 3f       	cpi	r28, 0xF4	; 244
    2c88:	d3 07       	cpc	r29, r19
    2c8a:	b1 f6       	brne	.-84     	; 0x2c38 <ReadCapacity+0xb8>
    2c8c:	d7 c1       	rjmp	.+942    	; 0x303c <ReadCapacity+0x4bc>
#if DebugOut == 10
  DisplayValue(ovcnt16,0,' ',4);
  DisplayValue(adcv[2],-3,'V',4);
#endif
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    2c8e:	45 e1       	ldi	r20, 0x15	; 21
    2c90:	e4 16       	cp	r14, r20
    2c92:	45 e0       	ldi	r20, 0x05	; 5
    2c94:	f4 06       	cpc	r15, r20
    2c96:	08 f0       	brcs	.+2      	; 0x2c9a <ReadCapacity+0x11a>
    2c98:	6d c0       	rjmp	.+218    	; 0x2d74 <ReadCapacity+0x1f4>
     goto messe_mit_rh;		// Voltage of more than 1300mV is reached in one pulse, to fast loaded
  }
  // Capacity is more than about 50µF
  cap.cpre = -9;		// switch units to nF 
    2c9a:	87 ef       	ldi	r24, 0xF7	; 247
    2c9c:	80 93 68 01 	sts	0x0168, r24
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the same time which is required for loading
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2ca0:	aa 24       	eor	r10, r10
    2ca2:	bb 24       	eor	r11, r11
     wait5ms();
    2ca4:	0e 94 19 15 	call	0x2a32	; 0x2a32 <wait5ms>
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
    2ca8:	81 2f       	mov	r24, r17
    2caa:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
     wdt_reset();
    2cae:	a8 95       	wdr
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the same time which is required for loading
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2cb0:	08 94       	sec
    2cb2:	a1 1c       	adc	r10, r1
    2cb4:	b1 1c       	adc	r11, r1
    2cb6:	ca 15       	cp	r28, r10
    2cb8:	db 05       	cpc	r29, r11
    2cba:	a0 f7       	brcc	.-24     	; 0x2ca4 <ReadCapacity+0x124>
     wait5ms();
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
    2cbc:	c8 16       	cp	r12, r24
    2cbe:	d9 06       	cpc	r13, r25
    2cc0:	30 f4       	brcc	.+12     	; 0x2cce <ReadCapacity+0x14e>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    2cc2:	8c 19       	sub	r24, r12
    2cc4:	9d 09       	sbc	r25, r13
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    2cc6:	8e 15       	cp	r24, r14
    2cc8:	9f 05       	cpc	r25, r15
    2cca:	60 f4       	brcc	.+24     	; 0x2ce4 <ReadCapacity+0x164>
    2ccc:	02 c0       	rjmp	.+4      	; 0x2cd2 <ReadCapacity+0x152>
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    2cce:	80 e0       	ldi	r24, 0x00	; 0
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
    2cd2:	97 01       	movw	r18, r14
    2cd4:	28 1b       	sub	r18, r24
    2cd6:	39 0b       	sbc	r19, r25
    2cd8:	c9 01       	movw	r24, r18
  } else {
     adcv[3] = 0;			// no lost voltage
  }
  if (adcv[3] > 100) {
    2cda:	25 36       	cpi	r18, 0x65	; 101
    2cdc:	31 05       	cpc	r19, r1
    2cde:	08 f0       	brcs	.+2      	; 0x2ce2 <ReadCapacity+0x162>
    2ce0:	ad c1       	rjmp	.+858    	; 0x303c <ReadCapacity+0x4bc>
    2ce2:	02 c0       	rjmp	.+4      	; 0x2ce8 <ReadCapacity+0x168>
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
  } else {
     adcv[3] = 0;			// no lost voltage
    2ce4:	80 e0       	ldi	r24, 0x00	; 0
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
     lcd_space();
     wait_about1s();
 #endif
     goto keinC;			// capacitor does not keep the voltage about 5ms
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
    2ce8:	21 96       	adiw	r28, 0x01	; 1
    2cea:	5e 01       	movw	r10, r28
    2cec:	cc 24       	eor	r12, r12
    2cee:	dd 24       	eor	r13, r13
    2cf0:	a0 92 60 01 	sts	0x0160, r10
    2cf4:	b0 92 61 01 	sts	0x0161, r11
    2cf8:	c0 92 62 01 	sts	0x0162, r12
    2cfc:	d0 92 63 01 	sts	0x0163, r13
  // compute factor with load voltage + lost voltage during the voltage load time
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]+adcv[3]);	// get factor to convert time to capacity from table
    2d00:	8e 0d       	add	r24, r14
    2d02:	9f 1d       	adc	r25, r15
    2d04:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <getRLmultip>
    2d08:	bc 01       	movw	r22, r24
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	a6 01       	movw	r20, r12
    2d10:	95 01       	movw	r18, r10
    2d12:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
    2d16:	60 93 60 01 	sts	0x0160, r22
    2d1a:	70 93 61 01 	sts	0x0161, r23
    2d1e:	80 93 62 01 	sts	0x0162, r24
    2d22:	90 93 63 01 	sts	0x0163, r25
#endif
   cap.cval = cap.cval_uncorrected.dw;	// set result to uncorrected
    2d26:	60 93 58 01 	sts	0x0158, r22
    2d2a:	70 93 59 01 	sts	0x0159, r23
    2d2e:	80 93 5a 01 	sts	0x015A, r24
    2d32:	90 93 5b 01 	sts	0x015B, r25
   Scale_C_with_vcc();
    2d36:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <Scale_C_with_vcc>
   // cap.cval for this type is at least 40000nF, so the last digit will be never shown
   cap.cval *= (1000 - C_H_KORR);	// correct with C_H_KORR with 0.1% resolution, but prevent overflow
    2d3a:	60 91 58 01 	lds	r22, 0x0158
    2d3e:	70 91 59 01 	lds	r23, 0x0159
    2d42:	80 91 5a 01 	lds	r24, 0x015A
    2d46:	90 91 5b 01 	lds	r25, 0x015B
    2d4a:	28 ee       	ldi	r18, 0xE8	; 232
    2d4c:	33 e0       	ldi	r19, 0x03	; 3
    2d4e:	40 e0       	ldi	r20, 0x00	; 0
    2d50:	50 e0       	ldi	r21, 0x00	; 0
    2d52:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
   cap.cval /= 100;
    2d56:	24 e6       	ldi	r18, 0x64	; 100
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	40 e0       	ldi	r20, 0x00	; 0
    2d5c:	50 e0       	ldi	r21, 0x00	; 0
    2d5e:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
    2d62:	20 93 58 01 	sts	0x0158, r18
    2d66:	30 93 59 01 	sts	0x0159, r19
    2d6a:	40 93 5a 01 	sts	0x015A, r20
    2d6e:	50 93 5b 01 	sts	0x015B, r21
   DisplayValue(cap.cval,cap.cpre,'F',4);
   lcd_space();
   lcd_string(utoa(ovcnt16,outval,10));
   wait_about3s();
#endif
   goto checkDiodes;
    2d72:	27 c1       	rjmp	.+590    	; 0x2fc2 <ReadCapacity+0x442>
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
  HiPinR_L = MEM_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load
    2d74:	e0 2e       	mov	r14, r16
    2d76:	ee 0c       	add	r14, r14

//==================================================================================
// Measurement of little capacity values
messe_mit_rh:
  //little capacity value, about  < 50 µF
  EntladePins();			// discharge capacitor
    2d78:	0e 94 ab 01 	call	0x356	; 0x356 <EntladePins>
  //measure with the R_H (470kOhm) resistor 
  R_PORT = 0;		// R_DDR ist HiPinR_L
    2d7c:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = (1<<TP1) | (1<<TP2) | (1<<TP3) | (1<<TxD);	//switch all Pins to output
    2d7e:	8f e0       	ldi	r24, 0x0F	; 15
    2d80:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		//switch all ADC Pins to GND
    2d82:	88 e0       	ldi	r24, 0x08	; 8
    2d84:	88 b9       	out	0x08, r24	; 8
  R_DDR = HiPinR_H;   		// switch R_H resistor port for HighPin to output (GND)
    2d86:	e4 b8       	out	0x04, r14	; 4
// setup Analog Comparator
  ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    2d88:	80 e4       	ldi	r24, 0x40	; 64
    2d8a:	80 93 7b 00 	sts	0x007B, r24
  ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    2d8e:	84 e5       	ldi	r24, 0x54	; 84
    2d90:	80 bf       	out	0x30, r24	; 48
  ADMUX = (1<<REFS0) | HighPin;			// switch Mux to High-Pin
    2d92:	81 2f       	mov	r24, r17
    2d94:	80 64       	ori	r24, 0x40	; 64
    2d96:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    2d9a:	86 e1       	ldi	r24, 0x16	; 22
    2d9c:	80 93 7a 00 	sts	0x007A, r24
  wait200us();			//wait for bandgap to start up
    2da0:	0e 94 21 15 	call	0x2a42	; 0x2a42 <wait200us>

  ovcnt16 = 0;
// setup Counter1
  TCCR1A = 0;			// set Counter1 to normal Mode
    2da4:	10 92 80 00 	sts	0x0080, r1
  TCNT1 = 0;			//set Counter to 0
    2da8:	10 92 85 00 	sts	0x0085, r1
    2dac:	10 92 84 00 	sts	0x0084, r1
  TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// mega88
    2db0:	87 e2       	ldi	r24, 0x27	; 39
    2db2:	86 bb       	out	0x16, r24	; 22
  R_PORT = HiPinR_H;           	// switch R_H resistor port for HighPin to VCC
    2db4:	e5 b8       	out	0x05, r14	; 5
  if(PartFound == PART_FET) {
    2db6:	80 91 07 01 	lds	r24, 0x0107
    2dba:	83 30       	cpi	r24, 0x03	; 3
    2dbc:	79 f4       	brne	.+30     	; 0x2ddc <ReadCapacity+0x25c>
     // charge capacitor with R_H resistor
     TCCR1B = (1<<CS10);	//Start counter 1MHz or 8MHz
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = (((1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK) & ~(1<<HighPin));	// release only HighPin ADC port
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	01 2e       	mov	r0, r17
    2dca:	02 c0       	rjmp	.+4      	; 0x2dd0 <ReadCapacity+0x250>
    2dcc:	88 0f       	add	r24, r24
    2dce:	99 1f       	adc	r25, r25
    2dd0:	0a 94       	dec	r0
    2dd2:	e2 f7       	brpl	.-8      	; 0x2dcc <ReadCapacity+0x24c>
    2dd4:	80 95       	com	r24
    2dd6:	8f 70       	andi	r24, 0x0F	; 15
    2dd8:	87 b9       	out	0x07, r24	; 7
    2dda:	04 c0       	rjmp	.+8      	; 0x2de4 <ReadCapacity+0x264>
  } else {
     TCCR1B =  (1<<CS10);	//start counter 1MHz or 8MHz
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
    2de2:	a7 b8       	out	0x07, r10	; 7
     ii = TI1_INT_FLAGS;	//read Timer flags
     if (ii & (1<<ICF1))  {
        break;
     }
     if((ii & (1<<TOV1))) {	// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
        TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    2de4:	81 e0       	ldi	r24, 0x01	; 1
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
  }
//******************************
  while(1) {
     // Wait, until  Input Capture is set
     ii = TI1_INT_FLAGS;	//read Timer flags
    2de6:	26 b3       	in	r18, 0x16	; 22
     if (ii & (1<<ICF1))  {
    2de8:	25 fd       	sbrc	r18, 5
    2dea:	09 c0       	rjmp	.+18     	; 0x2dfe <ReadCapacity+0x27e>
        break;
     }
     if((ii & (1<<TOV1))) {	// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    2dec:	20 ff       	sbrs	r18, 0
    2dee:	fb cf       	rjmp	.-10     	; 0x2de6 <ReadCapacity+0x266>
        TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    2df0:	86 bb       	out	0x16, r24	; 22
        wdt_reset();
    2df2:	a8 95       	wdr
        ovcnt16++;
    2df4:	21 96       	adiw	r28, 0x01	; 1
        if(ovcnt16 == (F_CPU/5000)) {
    2df6:	36 e0       	ldi	r19, 0x06	; 6
    2df8:	c0 34       	cpi	r28, 0x40	; 64
    2dfa:	d3 07       	cpc	r29, r19
    2dfc:	a1 f7       	brne	.-24     	; 0x2de6 <ReadCapacity+0x266>
           break; 		//Timeout for Charging, above 12 s
        }
     }
  }
  TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    2dfe:	10 92 81 00 	sts	0x0081, r1
  TI1_INT_FLAGS = (1<<ICF1);		// Reset Input Capture
    2e02:	80 e2       	ldi	r24, 0x20	; 32
    2e04:	86 bb       	out	0x16, r24	; 22
  tmpint = ICR1;		// get previous Input Capture Counter flag
    2e06:	e0 90 86 00 	lds	r14, 0x0086
    2e0a:	f0 90 87 00 	lds	r15, 0x0087
// check actual counter, if an additional overflow must be added
  if((TCNT1 > tmpint) && (ii & (1<<TOV1))) {
    2e0e:	80 91 84 00 	lds	r24, 0x0084
    2e12:	90 91 85 00 	lds	r25, 0x0085
    2e16:	e8 16       	cp	r14, r24
    2e18:	f9 06       	cpc	r15, r25
    2e1a:	28 f4       	brcc	.+10     	; 0x2e26 <ReadCapacity+0x2a6>
    2e1c:	20 ff       	sbrs	r18, 0
    2e1e:	03 c0       	rjmp	.+6      	; 0x2e26 <ReadCapacity+0x2a6>
     // this OV was not counted, but was before the Input Capture
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	86 bb       	out	0x16, r24	; 22
     ovcnt16++;
    2e24:	21 96       	adiw	r28, 0x01	; 1
  }
//############################################################
  ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    2e26:	86 e9       	ldi	r24, 0x96	; 150
    2e28:	80 93 7a 00 	sts	0x007A, r24
  R_DDR = 0;			// switch R_H resistor port for input
    2e2c:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// switch R_H resistor port pull up for HighPin off
    2e2e:	15 b8       	out	0x05, r1	; 5
  load_diff = ReadADC(HighPin) + REF_C_KORR - ref_mv;	// build difference of capacitor voltage to Reference Voltage
    2e30:	81 2f       	mov	r24, r17
    2e32:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
    2e36:	20 91 3f 01 	lds	r18, 0x013F
    2e3a:	30 91 40 01 	lds	r19, 0x0140
    2e3e:	82 1b       	sub	r24, r18
    2e40:	93 0b       	sbc	r25, r19
    2e42:	0c 96       	adiw	r24, 0x0c	; 12
    2e44:	90 93 6b 01 	sts	0x016B, r25
    2e48:	80 93 6a 01 	sts	0x016A, r24
//############################################################
  if (ovcnt16 >= (F_CPU/10000)) {
    2e4c:	43 e0       	ldi	r20, 0x03	; 3
    2e4e:	c0 32       	cpi	r28, 0x20	; 32
    2e50:	d4 07       	cpc	r29, r20
    2e52:	08 f0       	brcs	.+2      	; 0x2e56 <ReadCapacity+0x2d6>
    2e54:	f3 c0       	rjmp	.+486    	; 0x303c <ReadCapacity+0x4bc>
     goto keinC;	// no normal end
  }
//  cap.cval_uncorrected = CombineII2Long(ovcnt16, tmpint);
  cap.cval_uncorrected.w[1] = ovcnt16;
    2e56:	d0 93 63 01 	sts	0x0163, r29
    2e5a:	c0 93 62 01 	sts	0x0162, r28
  cap.cval_uncorrected.w[0] = tmpint;
    2e5e:	f0 92 61 01 	sts	0x0161, r15
    2e62:	e0 92 60 01 	sts	0x0160, r14

  cap.cpre = -12;			// cap.cval unit is pF 
    2e66:	84 ef       	ldi	r24, 0xF4	; 244
    2e68:	80 93 68 01 	sts	0x0168, r24
  if (ovcnt16 > 65) {
    2e6c:	c2 34       	cpi	r28, 0x42	; 66
    2e6e:	d1 05       	cpc	r29, r1
    2e70:	c8 f0       	brcs	.+50     	; 0x2ea4 <ReadCapacity+0x324>
     cap.cval_uncorrected.dw /= 100;	// switch to next unit
    2e72:	60 91 60 01 	lds	r22, 0x0160
    2e76:	70 91 61 01 	lds	r23, 0x0161
    2e7a:	80 91 62 01 	lds	r24, 0x0162
    2e7e:	90 91 63 01 	lds	r25, 0x0163
    2e82:	24 e6       	ldi	r18, 0x64	; 100
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	40 e0       	ldi	r20, 0x00	; 0
    2e88:	50 e0       	ldi	r21, 0x00	; 0
    2e8a:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
    2e8e:	20 93 60 01 	sts	0x0160, r18
    2e92:	30 93 61 01 	sts	0x0161, r19
    2e96:	40 93 62 01 	sts	0x0162, r20
    2e9a:	50 93 63 01 	sts	0x0163, r21
     cap.cpre += 2;			// set unit, prevent overflow
    2e9e:	86 ef       	ldi	r24, 0xF6	; 246
    2ea0:	80 93 68 01 	sts	0x0168, r24
  }
  cap.cval_uncorrected.dw *= RHmultip;		// 708
    2ea4:	60 91 00 01 	lds	r22, 0x0100
    2ea8:	70 91 01 01 	lds	r23, 0x0101
    2eac:	80 e0       	ldi	r24, 0x00	; 0
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	20 91 60 01 	lds	r18, 0x0160
    2eb4:	30 91 61 01 	lds	r19, 0x0161
    2eb8:	40 91 62 01 	lds	r20, 0x0162
    2ebc:	50 91 63 01 	lds	r21, 0x0163
    2ec0:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
  cap.cval_uncorrected.dw /= (F_CPU / 10000);	// divide by 100 (@ 1MHz clock), 800 (@ 8MHz clock)
    2ec4:	20 e2       	ldi	r18, 0x20	; 32
    2ec6:	33 e0       	ldi	r19, 0x03	; 3
    2ec8:	40 e0       	ldi	r20, 0x00	; 0
    2eca:	50 e0       	ldi	r21, 0x00	; 0
    2ecc:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
    2ed0:	20 93 60 01 	sts	0x0160, r18
    2ed4:	30 93 61 01 	sts	0x0161, r19
    2ed8:	40 93 62 01 	sts	0x0162, r20
    2edc:	50 93 63 01 	sts	0x0163, r21
  cap.cval = cap.cval_uncorrected.dw;		// set the corrected cap.cval
    2ee0:	e8 e5       	ldi	r30, 0x58	; 88
    2ee2:	f1 e0       	ldi	r31, 0x01	; 1
    2ee4:	20 93 58 01 	sts	0x0158, r18
    2ee8:	31 83       	std	Z+1, r19	; 0x01
    2eea:	42 83       	std	Z+2, r20	; 0x02
    2eec:	53 83       	std	Z+3, r21	; 0x03
  Scale_C_with_vcc();
    2eee:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <Scale_C_with_vcc>
  if (cap.cpre == -12) {
    2ef2:	80 91 68 01 	lds	r24, 0x0168
    2ef6:	84 3f       	cpi	r24, 0xF4	; 244
    2ef8:	09 f0       	breq	.+2      	; 0x2efc <ReadCapacity+0x37c>
    2efa:	55 c0       	rjmp	.+170    	; 0x2fa6 <ReadCapacity+0x426>
#if COMP_SLEW1 > COMP_SLEW2
     if (cap.cval < COMP_SLEW1) {
    2efc:	c0 90 58 01 	lds	r12, 0x0158
    2f00:	d0 90 59 01 	lds	r13, 0x0159
    2f04:	e0 90 5a 01 	lds	r14, 0x015A
    2f08:	f0 90 5b 01 	lds	r15, 0x015B
    2f0c:	80 ea       	ldi	r24, 0xA0	; 160
    2f0e:	c8 16       	cp	r12, r24
    2f10:	8f e0       	ldi	r24, 0x0F	; 15
    2f12:	d8 06       	cpc	r13, r24
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	e8 06       	cpc	r14, r24
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	f8 06       	cpc	r15, r24
    2f1c:	c0 f4       	brcc	.+48     	; 0x2f4e <ReadCapacity+0x3ce>
        // add slew rate dependent offset
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
    2f1e:	a7 01       	movw	r20, r14
    2f20:	96 01       	movw	r18, r12
    2f22:	24 52       	subi	r18, 0x24	; 36
    2f24:	3f 4f       	sbci	r19, 0xFF	; 255
    2f26:	4f 4f       	sbci	r20, 0xFF	; 255
    2f28:	5f 4f       	sbci	r21, 0xFF	; 255
    2f2a:	60 ea       	ldi	r22, 0xA0	; 160
    2f2c:	7f e0       	ldi	r23, 0x0F	; 15
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
    2f36:	2c 0d       	add	r18, r12
    2f38:	3d 1d       	adc	r19, r13
    2f3a:	4e 1d       	adc	r20, r14
    2f3c:	5f 1d       	adc	r21, r15
    2f3e:	20 93 58 01 	sts	0x0158, r18
    2f42:	30 93 59 01 	sts	0x0159, r19
    2f46:	40 93 5a 01 	sts	0x015A, r20
    2f4a:	50 93 5b 01 	sts	0x015B, r21
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2f4e:	80 91 45 01 	lds	r24, 0x0145
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	87 54       	subi	r24, 0x47	; 71
    2f56:	9e 4f       	sbci	r25, 0xFE	; 254
    2f58:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__eerd_byte_m168>
     if (cap.cval > tmpint) {
    2f5c:	20 91 58 01 	lds	r18, 0x0158
    2f60:	30 91 59 01 	lds	r19, 0x0159
    2f64:	40 91 5a 01 	lds	r20, 0x015A
    2f68:	50 91 5b 01 	lds	r21, 0x015B
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
     if (cap.cval > tmpint) {
    2f6e:	a0 e0       	ldi	r26, 0x00	; 0
    2f70:	b0 e0       	ldi	r27, 0x00	; 0
    2f72:	82 17       	cp	r24, r18
    2f74:	93 07       	cpc	r25, r19
    2f76:	a4 07       	cpc	r26, r20
    2f78:	b5 07       	cpc	r27, r21
    2f7a:	68 f4       	brcc	.+26     	; 0x2f96 <ReadCapacity+0x416>
         cap.cval -= tmpint;		//subtract zero offset (pF)
    2f7c:	28 1b       	sub	r18, r24
    2f7e:	39 0b       	sbc	r19, r25
    2f80:	4a 0b       	sbc	r20, r26
    2f82:	5b 0b       	sbc	r21, r27
    2f84:	20 93 58 01 	sts	0x0158, r18
    2f88:	30 93 59 01 	sts	0x0159, r19
    2f8c:	40 93 5a 01 	sts	0x015A, r20
    2f90:	50 93 5b 01 	sts	0x015B, r21
    2f94:	08 c0       	rjmp	.+16     	; 0x2fa6 <ReadCapacity+0x426>
     } else {
         cap.cval = 0;			//unsigned long may not reach negativ value
    2f96:	10 92 58 01 	sts	0x0158, r1
    2f9a:	10 92 59 01 	sts	0x0159, r1
    2f9e:	10 92 5a 01 	sts	0x015A, r1
    2fa2:	10 92 5b 01 	sts	0x015B, r1
  lcd_testpin(HighPin);
  lcd_space();
  DisplayValue(cap.cval,cap.cpre,'F',4);
  wait_about3s();
#endif
  R_DDR = HiPinR_L; 		//switch R_L for High-Pin to GND
    2fa6:	04 b9       	out	0x04, r16	; 4
#if F_CPU < 2000001
   if(cap.cval < 50)
#else 
   if(cap.cval < 25)
    2fa8:	80 91 58 01 	lds	r24, 0x0158
    2fac:	90 91 59 01 	lds	r25, 0x0159
    2fb0:	a0 91 5a 01 	lds	r26, 0x015A
    2fb4:	b0 91 5b 01 	lds	r27, 0x015B
    2fb8:	89 31       	cpi	r24, 0x19	; 25
    2fba:	91 05       	cpc	r25, r1
    2fbc:	a1 05       	cpc	r26, r1
    2fbe:	b1 05       	cpc	r27, r1
    2fc0:	e8 f1       	brcs	.+122    	; 0x303c <ReadCapacity+0x4bc>
//   if (ovcnt16 > (6 * ((unsigned long)F_CPU/1000000))) {	// above 3 uF
//      GetESR(HighPin,LowPin);
//   }
#endif
checkDiodes:
   if((NumOfDiodes > 0)  && (PartFound != PART_FET)) {
    2fc2:	80 91 05 01 	lds	r24, 0x0105
    2fc6:	88 23       	and	r24, r24
    2fc8:	21 f0       	breq	.+8      	; 0x2fd2 <ReadCapacity+0x452>
    2fca:	80 91 07 01 	lds	r24, 0x0107
    2fce:	83 30       	cpi	r24, 0x03	; 3
    2fd0:	a9 f5       	brne	.+106    	; 0x303c <ReadCapacity+0x4bc>
      wait_about1s();
#endif
      // nearly shure, that there is one or more diodes in reverse direction,
      // which would be wrongly detected as capacitor 
   } else {
      PartFound = PART_CAPACITOR;	//capacitor is found
    2fd2:	87 e0       	ldi	r24, 0x07	; 7
    2fd4:	80 93 07 01 	sts	0x0107, r24
      if ((cap.cpre > cap.cpre_max) || ((cap.cpre == cap.cpre_max) && (cap.cval > cap.cval_max))) {
    2fd8:	60 91 68 01 	lds	r22, 0x0168
    2fdc:	80 91 69 01 	lds	r24, 0x0169
    2fe0:	86 17       	cp	r24, r22
    2fe2:	bc f0       	brlt	.+46     	; 0x3012 <ReadCapacity+0x492>
    2fe4:	68 17       	cp	r22, r24
    2fe6:	51 f5       	brne	.+84     	; 0x303c <ReadCapacity+0x4bc>
    2fe8:	20 91 58 01 	lds	r18, 0x0158
    2fec:	30 91 59 01 	lds	r19, 0x0159
    2ff0:	40 91 5a 01 	lds	r20, 0x015A
    2ff4:	50 91 5b 01 	lds	r21, 0x015B
    2ff8:	80 91 5c 01 	lds	r24, 0x015C
    2ffc:	90 91 5d 01 	lds	r25, 0x015D
    3000:	a0 91 5e 01 	lds	r26, 0x015E
    3004:	b0 91 5f 01 	lds	r27, 0x015F
    3008:	82 17       	cp	r24, r18
    300a:	93 07       	cpc	r25, r19
    300c:	a4 07       	cpc	r26, r20
    300e:	b5 07       	cpc	r27, r21
    3010:	a8 f4       	brcc	.+42     	; 0x303c <ReadCapacity+0x4bc>
         // we have found a greater one
         cap.cval_max = cap.cval;
    3012:	e8 e5       	ldi	r30, 0x58	; 88
    3014:	f1 e0       	ldi	r31, 0x01	; 1
    3016:	80 91 58 01 	lds	r24, 0x0158
    301a:	90 91 59 01 	lds	r25, 0x0159
    301e:	a0 91 5a 01 	lds	r26, 0x015A
    3022:	b0 91 5b 01 	lds	r27, 0x015B
    3026:	80 93 5c 01 	sts	0x015C, r24
    302a:	90 93 5d 01 	sts	0x015D, r25
    302e:	a0 93 5e 01 	sts	0x015E, r26
    3032:	b0 93 5f 01 	sts	0x015F, r27
         cap.cpre_max = cap.cpre;
    3036:	61 8b       	std	Z+17, r22	; 0x11
         cap.ca = LowPin;		// save LowPin
    3038:	96 86       	std	Z+14, r9	; 0x0e
         cap.cb = HighPin;		// save HighPin
    303a:	17 87       	std	Z+15, r17	; 0x0f
keinC:
  // discharge capacitor again
//  EntladePins();		// discharge capacitors
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    303c:	88 e0       	ldi	r24, 0x08	; 8
    303e:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    3040:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    3042:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    3044:	15 b8       	out	0x05, r1	; 5
  return;
 } // end ReadCapacity()
    3046:	df 91       	pop	r29
    3048:	cf 91       	pop	r28
    304a:	1f 91       	pop	r17
    304c:	0f 91       	pop	r16
    304e:	ff 90       	pop	r15
    3050:	ef 90       	pop	r14
    3052:	df 90       	pop	r13
    3054:	cf 90       	pop	r12
    3056:	bf 90       	pop	r11
    3058:	af 90       	pop	r10
    305a:	9f 90       	pop	r9
    305c:	08 95       	ret

0000305e <ReadInductance>:
#include "config.h"
#include "Transistortester.h"


//=================================================================
void ReadInductance(void) {
    305e:	2f 92       	push	r2
    3060:	3f 92       	push	r3
    3062:	4f 92       	push	r4
    3064:	5f 92       	push	r5
    3066:	6f 92       	push	r6
    3068:	7f 92       	push	r7
    306a:	8f 92       	push	r8
    306c:	9f 92       	push	r9
    306e:	af 92       	push	r10
    3070:	bf 92       	push	r11
    3072:	cf 92       	push	r12
    3074:	df 92       	push	r13
    3076:	ef 92       	push	r14
    3078:	ff 92       	push	r15
    307a:	0f 93       	push	r16
    307c:	1f 93       	push	r17
    307e:	df 93       	push	r29
    3080:	cf 93       	push	r28
    3082:	cd b7       	in	r28, 0x3d	; 61
    3084:	de b7       	in	r29, 0x3e	; 62
    3086:	6e 97       	sbiw	r28, 0x1e	; 30
    3088:	0f b6       	in	r0, 0x3f	; 63
    308a:	f8 94       	cli
    308c:	de bf       	out	0x3e, r29	; 62
    308e:	0f be       	out	0x3f, r0	; 63
    3090:	cd bf       	out	0x3d, r28	; 61
  uint8_t found;	// variable used for searching resistors 
  uint8_t LowPin;	// number of pin with low voltage
  uint8_t HighPin;	// number of pin with high voltage 


  if(PartFound != PART_RESISTOR) {
    3092:	80 91 07 01 	lds	r24, 0x0107
    3096:	86 30       	cpi	r24, 0x06	; 6
    3098:	09 f0       	breq	.+2      	; 0x309c <ReadInductance+0x3e>
    309a:	5f c2       	rjmp	.+1214   	; 0x355a <ReadInductance+0x4fc>
    309c:	19 8a       	std	Y+17, r1	; 0x11
    309e:	54 c2       	rjmp	.+1192   	; 0x3548 <ReadInductance+0x4ea>
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 21000) continue;
    30a0:	29 89       	ldd	r18, Y+17	; 0x11
    30a2:	22 2e       	mov	r2, r18
    30a4:	33 24       	eor	r3, r3
    30a6:	8b e0       	ldi	r24, 0x0B	; 11
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	28 9e       	mul	r2, r24
    30ac:	f0 01       	movw	r30, r0
    30ae:	29 9e       	mul	r2, r25
    30b0:	f0 0d       	add	r31, r0
    30b2:	38 9e       	mul	r3, r24
    30b4:	f0 0d       	add	r31, r0
    30b6:	11 24       	eor	r1, r1
    30b8:	e8 5e       	subi	r30, 0xE8	; 232
    30ba:	fe 4f       	sbci	r31, 0xFE	; 254
    30bc:	80 81       	ld	r24, Z
    30be:	91 81       	ldd	r25, Z+1	; 0x01
    30c0:	a2 81       	ldd	r26, Z+2	; 0x02
    30c2:	b3 81       	ldd	r27, Z+3	; 0x03
    30c4:	89 30       	cpi	r24, 0x09	; 9
    30c6:	22 e5       	ldi	r18, 0x52	; 82
    30c8:	92 07       	cpc	r25, r18
    30ca:	20 e0       	ldi	r18, 0x00	; 0
    30cc:	a2 07       	cpc	r26, r18
    30ce:	20 e0       	ldi	r18, 0x00	; 0
    30d0:	b2 07       	cpc	r27, r18
    30d2:	08 f0       	brcs	.+2      	; 0x30d6 <ReadInductance+0x78>
    30d4:	36 c2       	rjmp	.+1132   	; 0x3542 <ReadInductance+0x4e4>
    30d6:	ff 24       	eor	r15, r15
           // first and second pass, direction 1
           LowPin = resis[found].ra;
           HighPin = resis[found].rb;
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    30d8:	5f 01       	movw	r10, r30
    30da:	cf 01       	movw	r24, r30
    30dc:	09 96       	adiw	r24, 0x09	; 9
    30de:	9d 8b       	std	Y+21, r25	; 0x15
    30e0:	8c 8b       	std	Y+20, r24	; 0x14
           HighPin = resis[found].ra;
    30e2:	38 96       	adiw	r30, 0x08	; 8
    30e4:	ff 8b       	std	Y+23, r31	; 0x17
    30e6:	ee 8b       	std	Y+22, r30	; 0x16
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    30e8:	3d 8e       	std	Y+29, r3	; 0x1d
    30ea:	2c 8e       	std	Y+28, r2	; 0x1c
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 21000) continue;
     // we can check for Inductance, if resistance is below 2800 Ohm
     for (count=0;count<4;count++) {
        // Try four times (different direction and with delayed counter start)
        if (count < 2) {
    30ec:	ff 2d       	mov	r31, r15
    30ee:	f2 30       	cpi	r31, 0x02	; 2
    30f0:	30 f4       	brcc	.+12     	; 0x30fe <ReadInductance+0xa0>
           // first and second pass, direction 1
           LowPin = resis[found].ra;
    30f2:	ee 89       	ldd	r30, Y+22	; 0x16
    30f4:	ff 89       	ldd	r31, Y+23	; 0x17
    30f6:	e0 80       	ld	r14, Z
           HighPin = resis[found].rb;
    30f8:	ec 89       	ldd	r30, Y+20	; 0x14
    30fa:	fd 89       	ldd	r31, Y+21	; 0x15
    30fc:	05 c0       	rjmp	.+10     	; 0x3108 <ReadInductance+0xaa>
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    30fe:	ec 89       	ldd	r30, Y+20	; 0x14
    3100:	fd 89       	ldd	r31, Y+21	; 0x15
    3102:	e0 80       	ld	r14, Z
           HighPin = resis[found].ra;
    3104:	ee 89       	ldd	r30, Y+22	; 0x16
    3106:	ff 89       	ldd	r31, Y+23	; 0x17
    3108:	70 80       	ld	r7, Z
        }
        HiADC = MEM_read_byte(&PinADCtab[HighPin]);
    310a:	87 2d       	mov	r24, r7
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	88 55       	subi	r24, 0x58	; 88
    3110:	9e 4f       	sbci	r25, 0xFE	; 254
    3112:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__eerd_byte_m168>
    3116:	88 2e       	mov	r8, r24
        LoPinR_L = MEM_read_byte(&PinRLtab[LowPin]);	//R_L mask for HighPin R_L load
    3118:	8e 2d       	mov	r24, r14
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	8b 55       	subi	r24, 0x5B	; 91
    311e:	9e 4f       	sbci	r25, 0xFE	; 254
    3120:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__eerd_byte_m168>
        //==================================================================================
        // Measurement of Inductance values
        R_PORT = 0;		// switch R port to GND
    3124:	15 b8       	out	0x05, r1	; 5
        ADC_PORT =   TXD_VAL;		// switch ADC-Port to GND
    3126:	f8 e0       	ldi	r31, 0x08	; 8
    3128:	f8 b9       	out	0x08, r31	; 8
        if ((resis[found].rx < 240) && ((count & 0x01) == 0)) {
    312a:	f5 01       	movw	r30, r10
    312c:	20 81       	ld	r18, Z
    312e:	31 81       	ldd	r19, Z+1	; 0x01
    3130:	42 81       	ldd	r20, Z+2	; 0x02
    3132:	53 81       	ldd	r21, Z+3	; 0x03
    3134:	20 3f       	cpi	r18, 0xF0	; 240
    3136:	31 05       	cpc	r19, r1
    3138:	41 05       	cpc	r20, r1
    313a:	51 05       	cpc	r21, r1
    313c:	a8 f4       	brcc	.+42     	; 0x3168 <ReadInductance+0x10a>
    313e:	f0 fc       	sbrc	r15, 0
    3140:	13 c0       	rjmp	.+38     	; 0x3168 <ReadInductance+0x10a>
           // we can use PinR_L for measurement
           mess_r = RR680MI - R_L_VAL;
    3142:	00 91 02 01 	lds	r16, 0x0102
    3146:	10 91 03 01 	lds	r17, 0x0103
    314a:	00 59       	subi	r16, 0x90	; 144
    314c:	1a 41       	sbci	r17, 0x1A	; 26
           ADC_DDR = HiADC | (1<<LowPin) | TXD_MSK;	// switch HiADC and Low Pin to GND, 
    314e:	28 2d       	mov	r18, r8
    3150:	28 60       	ori	r18, 0x08	; 8
    3152:	81 e0       	ldi	r24, 0x01	; 1
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	0e 2c       	mov	r0, r14
    3158:	02 c0       	rjmp	.+4      	; 0x315e <ReadInductance+0x100>
    315a:	88 0f       	add	r24, r24
    315c:	99 1f       	adc	r25, r25
    315e:	0a 94       	dec	r0
    3160:	e2 f7       	brpl	.-8      	; 0x315a <ReadInductance+0xfc>
    3162:	28 2b       	or	r18, r24
    3164:	27 b9       	out	0x07, r18	; 7
    3166:	08 c0       	rjmp	.+16     	; 0x3178 <ReadInductance+0x11a>
        } else {
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
    3168:	84 b9       	out	0x04, r24	; 4
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
    316a:	88 2d       	mov	r24, r8
    316c:	88 60       	ori	r24, 0x08	; 8
    316e:	87 b9       	out	0x07, r24	; 7
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
    3170:	00 91 02 01 	lds	r16, 0x0102
    3174:	10 91 03 01 	lds	r17, 0x0103
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    3178:	20 e0       	ldi	r18, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    317a:	8e 2d       	mov	r24, r14
    317c:	2e 8f       	std	Y+30, r18	; 0x1e
    317e:	0e 94 4c 1b 	call	0x3698	; 0x3698 <W10msReadADC>
    3182:	6c 01       	movw	r12, r24
            total_r =  ReadADC(HighPin);
    3184:	87 2d       	mov	r24, r7
    3186:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    318a:	2e 8d       	ldd	r18, Y+30	; 0x1e
    318c:	f2 e0       	ldi	r31, 0x02	; 2
    318e:	cf 16       	cp	r12, r31
    3190:	d1 04       	cpc	r13, r1
    3192:	18 f4       	brcc	.+6      	; 0x319a <ReadInductance+0x13c>
    3194:	82 30       	cpi	r24, 0x02	; 2
    3196:	91 05       	cpc	r25, r1
    3198:	18 f0       	brcs	.+6      	; 0x31a0 <ReadInductance+0x142>
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    319a:	2f 5f       	subi	r18, 0xFF	; 255
    319c:	24 31       	cpi	r18, 0x14	; 20
    319e:	69 f7       	brne	.-38     	; 0x317a <ReadInductance+0x11c>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
        // setup Analog Comparator
        ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    31a0:	20 e4       	ldi	r18, 0x40	; 64
    31a2:	20 93 7b 00 	sts	0x007B, r18
        ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    31a6:	34 e5       	ldi	r19, 0x54	; 84
    31a8:	30 bf       	out	0x30, r19	; 48
        ADMUX = (1<<REFS0) | LowPin;			// switch Mux to Low-Pin
    31aa:	8e 2d       	mov	r24, r14
    31ac:	80 64       	ori	r24, 0x40	; 64
    31ae:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    31b2:	86 e1       	ldi	r24, 0x16	; 22
    31b4:	80 93 7a 00 	sts	0x007A, r24
   
      // setup Counter1
        ovcnt16 = 0;
        TCCR1A = 0;			// set Counter1 to normal Mode
    31b8:	10 92 80 00 	sts	0x0080, r1
        TCNT1 = 0;			//set Counter to 0
    31bc:	10 92 85 00 	sts	0x0085, r1
    31c0:	10 92 84 00 	sts	0x0084, r1
        TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// reset TIFR or TIFR1
    31c4:	97 e2       	ldi	r25, 0x27	; 39
    31c6:	96 bb       	out	0x16, r25	; 22
        HiADC |= TXD_VAL;
    31c8:	e8 e0       	ldi	r30, 0x08	; 8
    31ca:	8e 2a       	or	r8, r30
        wait200us();			// wait for bandgap to start up
    31cc:	0e 94 21 15 	call	0x2a42	; 0x2a42 <wait200us>
        if ((count & 0x01) == 0 ) {
    31d0:	2f 2c       	mov	r2, r15
    31d2:	33 24       	eor	r3, r3
    31d4:	91 01       	movw	r18, r2
    31d6:	21 70       	andi	r18, 0x01	; 1
    31d8:	30 70       	andi	r19, 0x00	; 0
    31da:	3b 8b       	std	Y+19, r19	; 0x13
    31dc:	2a 8b       	std	Y+18, r18	; 0x12
    31de:	f0 fc       	sbrc	r15, 0
    31e0:	05 c0       	rjmp	.+10     	; 0x31ec <ReadInductance+0x18e>
           //first start counter, then start current
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    31e2:	31 e8       	ldi	r19, 0x81	; 129
    31e4:	30 93 81 00 	sts	0x0081, r19
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    31e8:	88 b8       	out	0x08, r8	; 8
    31ea:	08 c0       	rjmp	.+16     	; 0x31fc <ReadInductance+0x19e>
        } else {
           //first start current, then start counter with delay
           //parasitic capacity of coil can cause high current at the beginning
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    31ec:	88 b8       	out	0x08, r8	; 8
      #if F_CPU >= 8000000UL
           wait3us();		// ignore current peak from capacity
    31ee:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <wait3us>
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
    31f2:	80 e2       	ldi	r24, 0x20	; 32
    31f4:	86 bb       	out	0x16, r24	; 22
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    31f6:	91 e8       	ldi	r25, 0x81	; 129
    31f8:	90 93 81 00 	sts	0x0081, r25
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    31fc:	cc 24       	eor	r12, r12
    31fe:	dd 24       	eor	r13, r13
        }
      
      //******************************
        while(1) {
           // Wait, until  Input Capture is set
           ii = TI1_INT_FLAGS;		//read Timer flags
    3200:	26 b3       	in	r18, 0x16	; 22
           if (ii & (1<<ICF1))  {
    3202:	25 fd       	sbrc	r18, 5
    3204:	0c c0       	rjmp	.+24     	; 0x321e <ReadInductance+0x1c0>
              break;
           }
           if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    3206:	20 ff       	sbrs	r18, 0
    3208:	fb cf       	rjmp	.-10     	; 0x3200 <ReadInductance+0x1a2>
              TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    320a:	e1 e0       	ldi	r30, 0x01	; 1
    320c:	e6 bb       	out	0x16, r30	; 22
              wdt_reset();
    320e:	a8 95       	wdr
              ovcnt16++;
    3210:	08 94       	sec
    3212:	c1 1c       	adc	r12, r1
    3214:	d1 1c       	adc	r13, r1
              if(ovcnt16 == (F_CPU/100000)) {
    3216:	f0 e5       	ldi	r31, 0x50	; 80
    3218:	cf 16       	cp	r12, r31
    321a:	d1 04       	cpc	r13, r1
    321c:	89 f7       	brne	.-30     	; 0x3200 <ReadInductance+0x1a2>
                 break; 	//Timeout for Charging, above 0.13 s
              }
           }
        }
        TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    321e:	10 92 81 00 	sts	0x0081, r1
        TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    3222:	30 e2       	ldi	r19, 0x20	; 32
    3224:	36 bb       	out	0x16, r19	; 22
        tmpint = ICR1;		// get previous Input Capture Counter flag
    3226:	80 90 86 00 	lds	r8, 0x0086
    322a:	90 90 87 00 	lds	r9, 0x0087
      // check actual counter, if an additional overflow must be added
        if((TCNT1 > tmpint) && (ii & (1<<TOV1))) {
    322e:	80 91 84 00 	lds	r24, 0x0084
    3232:	90 91 85 00 	lds	r25, 0x0085
    3236:	88 16       	cp	r8, r24
    3238:	99 06       	cpc	r9, r25
    323a:	38 f4       	brcc	.+14     	; 0x324a <ReadInductance+0x1ec>
    323c:	20 ff       	sbrs	r18, 0
    323e:	05 c0       	rjmp	.+10     	; 0x324a <ReadInductance+0x1ec>
           // this OV was not counted, but was before the Input Capture
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    3240:	81 e0       	ldi	r24, 0x01	; 1
    3242:	86 bb       	out	0x16, r24	; 22
           ovcnt16++;
    3244:	08 94       	sec
    3246:	c1 1c       	adc	r12, r1
    3248:	d1 1c       	adc	r13, r1
        }
        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    324a:	98 e0       	ldi	r25, 0x08	; 8
    324c:	98 b9       	out	0x08, r25	; 8
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    324e:	e6 e9       	ldi	r30, 0x96	; 150
    3250:	e0 93 7a 00 	sts	0x007A, r30
        for (ii=0;ii<20;ii++) {
    3254:	40 e0       	ldi	r20, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    3256:	8e 2d       	mov	r24, r14
    3258:	4e 8f       	std	Y+30, r20	; 0x1e
    325a:	0e 94 4c 1b 	call	0x3698	; 0x3698 <W10msReadADC>
    325e:	2c 01       	movw	r4, r24
            total_r =  ReadADC(HighPin);
    3260:	87 2d       	mov	r24, r7
    3262:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    3266:	4e 8d       	ldd	r20, Y+30	; 0x1e
    3268:	f2 e0       	ldi	r31, 0x02	; 2
    326a:	4f 16       	cp	r4, r31
    326c:	51 04       	cpc	r5, r1
    326e:	18 f4       	brcc	.+6      	; 0x3276 <ReadInductance+0x218>
    3270:	82 30       	cpi	r24, 0x02	; 2
    3272:	91 05       	cpc	r25, r1
    3274:	18 f0       	brcs	.+6      	; 0x327c <ReadInductance+0x21e>
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
           ovcnt16++;
        }
        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
        for (ii=0;ii<20;ii++) {
    3276:	4f 5f       	subi	r20, 0xFF	; 255
    3278:	44 31       	cpi	r20, 0x14	; 20
    327a:	69 f7       	brne	.-38     	; 0x3256 <ReadInductance+0x1f8>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
//      cap.cval_uncorrected.dw = CombineII2Long(ovcnt16, tmpint);
        cap.cval_uncorrected.w[1] = ovcnt16;
    327c:	d0 92 63 01 	sts	0x0163, r13
    3280:	c0 92 62 01 	sts	0x0162, r12
        cap.cval_uncorrected.w[0] = tmpint;
    3284:	90 92 61 01 	sts	0x0161, r9
    3288:	80 92 60 01 	sts	0x0160, r8
  #define CNT_ZERO_42 4
  #define CNT_ZERO_720 10
#endif
        // Voltage of comparator in % of umax
        #ifdef AUTO_CAL
        tmpint = (ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset))) ;
    328c:	87 eb       	ldi	r24, 0xB7	; 183
    328e:	91 e0       	ldi	r25, 0x01	; 1
    3290:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <__eerd_word_m168>
    3294:	60 91 3f 01 	lds	r22, 0x013F
    3298:	70 91 40 01 	lds	r23, 0x0140
    329c:	68 0f       	add	r22, r24
    329e:	79 1f       	adc	r23, r25
    32a0:	80 91 60 01 	lds	r24, 0x0160
    32a4:	90 91 61 01 	lds	r25, 0x0161
    32a8:	a0 91 62 01 	lds	r26, 0x0162
    32ac:	b0 91 63 01 	lds	r27, 0x0163
        #else
        tmpint = (ref_mv + REF_C_KORR);
        #endif
        if (mess_r < R_L_VAL) {
    32b0:	2a e1       	ldi	r18, 0x1A	; 26
    32b2:	00 39       	cpi	r16, 0x90	; 144
    32b4:	12 07       	cpc	r17, r18
    32b6:	90 f4       	brcc	.+36     	; 0x32dc <ReadInductance+0x27e>
           // measurement without 680 Ohm
           if (cap.cval_uncorrected.dw > CNT_ZERO_42) cap.cval_uncorrected.dw -= CNT_ZERO_42;
    32b8:	87 30       	cpi	r24, 0x07	; 7
    32ba:	91 05       	cpc	r25, r1
    32bc:	a1 05       	cpc	r26, r1
    32be:	b1 05       	cpc	r27, r1
    32c0:	20 f0       	brcs	.+8      	; 0x32ca <ReadInductance+0x26c>
    32c2:	06 97       	sbiw	r24, 0x06	; 6
    32c4:	a1 09       	sbc	r26, r1
    32c6:	b1 09       	sbc	r27, r1
    32c8:	34 c0       	rjmp	.+104    	; 0x3332 <ReadInductance+0x2d4>
           else          cap.cval_uncorrected.dw = 0;
    32ca:	10 92 60 01 	sts	0x0160, r1
    32ce:	10 92 61 01 	sts	0x0161, r1
    32d2:	10 92 62 01 	sts	0x0162, r1
    32d6:	10 92 63 01 	sts	0x0163, r1
    32da:	33 c0       	rjmp	.+102    	; 0x3342 <ReadInductance+0x2e4>
        } else {
           // measurement with 680 Ohm resistor
           // if 680 Ohm resistor is used, use REF_L_KORR for correction
           tmpint += REF_L_KORR;
    32dc:	6e 5c       	subi	r22, 0xCE	; 206
    32de:	7f 4f       	sbci	r23, 0xFF	; 255
           if (cap.cval_uncorrected.dw > CNT_ZERO_720) cap.cval_uncorrected.dw -= CNT_ZERO_720;
    32e0:	88 30       	cpi	r24, 0x08	; 8
    32e2:	91 05       	cpc	r25, r1
    32e4:	a1 05       	cpc	r26, r1
    32e6:	b1 05       	cpc	r27, r1
    32e8:	60 f0       	brcs	.+24     	; 0x3302 <ReadInductance+0x2a4>
    32ea:	07 97       	sbiw	r24, 0x07	; 7
    32ec:	a1 09       	sbc	r26, r1
    32ee:	b1 09       	sbc	r27, r1
    32f0:	80 93 60 01 	sts	0x0160, r24
    32f4:	90 93 61 01 	sts	0x0161, r25
    32f8:	a0 93 62 01 	sts	0x0162, r26
    32fc:	b0 93 63 01 	sts	0x0163, r27
    3300:	08 c0       	rjmp	.+16     	; 0x3312 <ReadInductance+0x2b4>
           else          cap.cval_uncorrected.dw = 0;
    3302:	10 92 60 01 	sts	0x0160, r1
    3306:	10 92 61 01 	sts	0x0161, r1
    330a:	10 92 62 01 	sts	0x0162, r1
    330e:	10 92 63 01 	sts	0x0163, r1
           if (cap.cval_uncorrected.dw > 12) cap.cval_uncorrected.dw -= 1;
    3312:	80 91 60 01 	lds	r24, 0x0160
    3316:	90 91 61 01 	lds	r25, 0x0161
    331a:	a0 91 62 01 	lds	r26, 0x0162
    331e:	b0 91 63 01 	lds	r27, 0x0163
    3322:	8d 30       	cpi	r24, 0x0D	; 13
    3324:	91 05       	cpc	r25, r1
    3326:	a1 05       	cpc	r26, r1
    3328:	b1 05       	cpc	r27, r1
    332a:	58 f0       	brcs	.+22     	; 0x3342 <ReadInductance+0x2e4>
    332c:	01 97       	sbiw	r24, 0x01	; 1
    332e:	a1 09       	sbc	r26, r1
    3330:	b1 09       	sbc	r27, r1
    3332:	80 93 60 01 	sts	0x0160, r24
    3336:	90 93 61 01 	sts	0x0161, r25
    333a:	a0 93 62 01 	sts	0x0162, r26
    333e:	b0 93 63 01 	sts	0x0163, r27
        }
        if ((count&0x01) == 1) {
    3342:	8a 89       	ldd	r24, Y+18	; 0x12
    3344:	9b 89       	ldd	r25, Y+19	; 0x13
    3346:	00 97       	sbiw	r24, 0x00	; 0
    3348:	99 f0       	breq	.+38     	; 0x3370 <ReadInductance+0x312>
           // second pass with delayed counter start
           cap.cval_uncorrected.dw += (3 * (F_CPU/1000000))+10;
    334a:	80 91 60 01 	lds	r24, 0x0160
    334e:	90 91 61 01 	lds	r25, 0x0161
    3352:	a0 91 62 01 	lds	r26, 0x0162
    3356:	b0 91 63 01 	lds	r27, 0x0163
    335a:	82 96       	adiw	r24, 0x22	; 34
    335c:	a1 1d       	adc	r26, r1
    335e:	b1 1d       	adc	r27, r1
    3360:	80 93 60 01 	sts	0x0160, r24
    3364:	90 93 61 01 	sts	0x0161, r25
    3368:	a0 93 62 01 	sts	0x0162, r26
    336c:	b0 93 63 01 	sts	0x0163, r27
        }
        if (ovcnt16 >= (F_CPU/100000)) cap.cval_uncorrected.dw = 0; // no transition found
    3370:	90 e5       	ldi	r25, 0x50	; 80
    3372:	c9 16       	cp	r12, r25
    3374:	d1 04       	cpc	r13, r1
    3376:	40 f0       	brcs	.+16     	; 0x3388 <ReadInductance+0x32a>
    3378:	10 92 60 01 	sts	0x0160, r1
    337c:	10 92 61 01 	sts	0x0161, r1
    3380:	10 92 62 01 	sts	0x0162, r1
    3384:	10 92 63 01 	sts	0x0163, r1
        total_r = (mess_r + resis[found].rx + RR680PL - R_L_VAL);
    3388:	80 91 08 01 	lds	r24, 0x0108
    338c:	90 91 09 01 	lds	r25, 0x0109
    3390:	80 59       	subi	r24, 0x90	; 144
    3392:	9a 41       	sbci	r25, 0x1A	; 26
    3394:	f5 01       	movw	r30, r10
    3396:	20 81       	ld	r18, Z
    3398:	31 81       	ldd	r19, Z+1	; 0x01
    339a:	82 0f       	add	r24, r18
    339c:	93 1f       	adc	r25, r19
    339e:	80 0f       	add	r24, r16
    33a0:	91 1f       	adc	r25, r17
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    33a2:	2c 01       	movw	r4, r24
    33a4:	66 24       	eor	r6, r6
    33a6:	77 24       	eor	r7, r7
        per_ref = ((unsigned long)tmpint * 100) / umax;
    33a8:	80 e0       	ldi	r24, 0x00	; 0
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	24 e6       	ldi	r18, 0x64	; 100
    33ae:	30 e0       	ldi	r19, 0x00	; 0
    33b0:	40 e0       	ldi	r20, 0x00	; 0
    33b2:	50 e0       	ldi	r21, 0x00	; 0
    33b4:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
    33b8:	68 8f       	std	Y+24, r22	; 0x18
    33ba:	79 8f       	std	Y+25, r23	; 0x19
    33bc:	8a 8f       	std	Y+26, r24	; 0x1a
    33be:	9b 8f       	std	Y+27, r25	; 0x1b
           cap.cval_uncorrected.dw += (3 * (F_CPU/1000000))+10;
        }
        if (ovcnt16 >= (F_CPU/100000)) cap.cval_uncorrected.dw = 0; // no transition found
        total_r = (mess_r + resis[found].rx + RR680PL - R_L_VAL);
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    33c0:	b8 01       	movw	r22, r16
    33c2:	80 e0       	ldi	r24, 0x00	; 0
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	20 91 3d 01 	lds	r18, 0x013D
    33ca:	30 91 3e 01 	lds	r19, 0x013E
    33ce:	40 e0       	ldi	r20, 0x00	; 0
    33d0:	50 e0       	ldi	r21, 0x00	; 0
    33d2:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
    33d6:	a3 01       	movw	r20, r6
    33d8:	92 01       	movw	r18, r4
    33da:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
        per_ref = ((unsigned long)tmpint * 100) / umax;
    33de:	40 e0       	ldi	r20, 0x00	; 0
    33e0:	50 e0       	ldi	r21, 0x00	; 0
    33e2:	68 8d       	ldd	r22, Y+24	; 0x18
    33e4:	79 8d       	ldd	r23, Y+25	; 0x19
    33e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    33e8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    33ea:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
        per_ref = (uint8_t)MEM2_read_byte(&LogTab[per_ref]);	// -log(1 - per_ref/100)
    33ee:	e2 2f       	mov	r30, r18
    33f0:	f0 e0       	ldi	r31, 0x00	; 0
    33f2:	e8 59       	subi	r30, 0x98	; 152
    33f4:	ff 4f       	sbci	r31, 0xFF	; 255
    33f6:	04 91       	lpm	r16, Z+
        // lx in 0.01mH units,  L = Tau * R
        inductance[count] = (cap.cval_uncorrected.dw * total_r ) / ((unsigned int)per_ref * (F_CPU/1000000));
    33f8:	20 91 60 01 	lds	r18, 0x0160
    33fc:	30 91 61 01 	lds	r19, 0x0161
    3400:	40 91 62 01 	lds	r20, 0x0162
    3404:	50 91 63 01 	lds	r21, 0x0163
    3408:	c3 01       	movw	r24, r6
    340a:	b2 01       	movw	r22, r4
    340c:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
    3410:	20 2f       	mov	r18, r16
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	40 e0       	ldi	r20, 0x00	; 0
    3416:	50 e0       	ldi	r21, 0x00	; 0
    3418:	e3 e0       	ldi	r30, 0x03	; 3
    341a:	22 0f       	add	r18, r18
    341c:	33 1f       	adc	r19, r19
    341e:	44 1f       	adc	r20, r20
    3420:	55 1f       	adc	r21, r21
    3422:	ea 95       	dec	r30
    3424:	d1 f7       	brne	.-12     	; 0x341a <ReadInductance+0x3bc>
    3426:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
    342a:	f1 01       	movw	r30, r2
    342c:	ee 0f       	add	r30, r30
    342e:	ff 1f       	adc	r31, r31
    3430:	ee 0f       	add	r30, r30
    3432:	ff 1f       	adc	r31, r31
    3434:	81 e0       	ldi	r24, 0x01	; 1
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	8c 0f       	add	r24, r28
    343a:	9d 1f       	adc	r25, r29
    343c:	e8 0f       	add	r30, r24
    343e:	f9 1f       	adc	r31, r25
    3440:	20 83       	st	Z, r18
    3442:	31 83       	std	Z+1, r19	; 0x01
    3444:	42 83       	std	Z+2, r20	; 0x02
    3446:	53 83       	std	Z+3, r21	; 0x03
        if (((count&0x01) == 0) && (inductance[count] > (F_CPU/1000000))) {
    3448:	ea 89       	ldd	r30, Y+18	; 0x12
    344a:	fb 89       	ldd	r31, Y+19	; 0x13
    344c:	30 97       	sbiw	r30, 0x00	; 0
    344e:	91 f4       	brne	.+36     	; 0x3474 <ReadInductance+0x416>
    3450:	29 30       	cpi	r18, 0x09	; 9
    3452:	31 05       	cpc	r19, r1
    3454:	41 05       	cpc	r20, r1
    3456:	51 05       	cpc	r21, r1
    3458:	68 f0       	brcs	.+26     	; 0x3474 <ReadInductance+0x416>
           // transition is found, measurement with delayed counter start is not necessary
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
    345a:	f1 01       	movw	r30, r2
    345c:	31 96       	adiw	r30, 0x01	; 1
    345e:	ee 0f       	add	r30, r30
    3460:	ff 1f       	adc	r31, r31
    3462:	ee 0f       	add	r30, r30
    3464:	ff 1f       	adc	r31, r31
    3466:	e8 0f       	add	r30, r24
    3468:	f9 1f       	adc	r31, r25
    346a:	20 83       	st	Z, r18
    346c:	31 83       	std	Z+1, r19	; 0x01
    346e:	42 83       	std	Z+2, r20	; 0x02
    3470:	53 83       	std	Z+3, r21	; 0x03
           count++;		// skip the delayed measurement
    3472:	f3 94       	inc	r15
        }
        wdt_reset();
    3474:	a8 95       	wdr
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 21000) continue;
     // we can check for Inductance, if resistance is below 2800 Ohm
     for (count=0;count<4;count++) {
    3476:	f3 94       	inc	r15
    3478:	ff 2d       	mov	r31, r15
    347a:	f4 30       	cpi	r31, 0x04	; 4
    347c:	08 f4       	brcc	.+2      	; 0x3480 <ReadInductance+0x422>
    347e:	36 ce       	rjmp	.-916    	; 0x30ec <ReadInductance+0x8e>
    3480:	2c 8c       	ldd	r2, Y+28	; 0x1c
    3482:	3d 8c       	ldd	r3, Y+29	; 0x1d
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
           count++;		// skip the delayed measurement
        }
        wdt_reset();
     }  //end for count
     ADC_PORT = TXD_VAL;		// switch ADC Port to GND
    3484:	28 e0       	ldi	r18, 0x08	; 8
    3486:	28 b9       	out	0x08, r18	; 8
     wait_about20ms();
    3488:	84 e0       	ldi	r24, 0x04	; 4
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	0e 94 9a 03 	call	0x734	; 0x734 <sleep_5ms>
     if (inductance[1] > inductance[0]) {
    3490:	2d 81       	ldd	r18, Y+5	; 0x05
    3492:	3e 81       	ldd	r19, Y+6	; 0x06
    3494:	4f 81       	ldd	r20, Y+7	; 0x07
    3496:	58 85       	ldd	r21, Y+8	; 0x08
    3498:	89 81       	ldd	r24, Y+1	; 0x01
    349a:	9a 81       	ldd	r25, Y+2	; 0x02
    349c:	ab 81       	ldd	r26, Y+3	; 0x03
    349e:	bc 81       	ldd	r27, Y+4	; 0x04
    34a0:	82 17       	cp	r24, r18
    34a2:	93 07       	cpc	r25, r19
    34a4:	a4 07       	cpc	r26, r20
    34a6:	b5 07       	cpc	r27, r21
    34a8:	80 f4       	brcc	.+32     	; 0x34ca <ReadInductance+0x46c>
        resis[found].lx = inductance[1];	// use value found with delayed counter start
    34aa:	8b e0       	ldi	r24, 0x0B	; 11
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	28 9e       	mul	r2, r24
    34b0:	f0 01       	movw	r30, r0
    34b2:	29 9e       	mul	r2, r25
    34b4:	f0 0d       	add	r31, r0
    34b6:	38 9e       	mul	r3, r24
    34b8:	f0 0d       	add	r31, r0
    34ba:	11 24       	eor	r1, r1
    34bc:	e8 5e       	subi	r30, 0xE8	; 232
    34be:	fe 4f       	sbci	r31, 0xFE	; 254
    34c0:	24 83       	std	Z+4, r18	; 0x04
    34c2:	35 83       	std	Z+5, r19	; 0x05
    34c4:	46 83       	std	Z+6, r20	; 0x06
    34c6:	57 83       	std	Z+7, r21	; 0x07
    34c8:	0f c0       	rjmp	.+30     	; 0x34e8 <ReadInductance+0x48a>
     } else {
        resis[found].lx = inductance[0];
    34ca:	2b e0       	ldi	r18, 0x0B	; 11
    34cc:	30 e0       	ldi	r19, 0x00	; 0
    34ce:	22 9e       	mul	r2, r18
    34d0:	f0 01       	movw	r30, r0
    34d2:	23 9e       	mul	r2, r19
    34d4:	f0 0d       	add	r31, r0
    34d6:	32 9e       	mul	r3, r18
    34d8:	f0 0d       	add	r31, r0
    34da:	11 24       	eor	r1, r1
    34dc:	e8 5e       	subi	r30, 0xE8	; 232
    34de:	fe 4f       	sbci	r31, 0xFE	; 254
    34e0:	84 83       	std	Z+4, r24	; 0x04
    34e2:	95 83       	std	Z+5, r25	; 0x05
    34e4:	a6 83       	std	Z+6, r26	; 0x06
    34e6:	b7 83       	std	Z+7, r27	; 0x07
     }
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];
    34e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    34ec:	af 85       	ldd	r26, Y+15	; 0x0f
    34ee:	b8 89       	ldd	r27, Y+16	; 0x10
    34f0:	29 85       	ldd	r18, Y+9	; 0x09
    34f2:	3a 85       	ldd	r19, Y+10	; 0x0a
    34f4:	4b 85       	ldd	r20, Y+11	; 0x0b
    34f6:	5c 85       	ldd	r21, Y+12	; 0x0c
    34f8:	28 17       	cp	r18, r24
    34fa:	39 07       	cpc	r19, r25
    34fc:	4a 07       	cpc	r20, r26
    34fe:	5b 07       	cpc	r21, r27
    3500:	20 f4       	brcc	.+8      	; 0x350a <ReadInductance+0x4ac>
    3502:	89 87       	std	Y+9, r24	; 0x09
    3504:	9a 87       	std	Y+10, r25	; 0x0a
    3506:	ab 87       	std	Y+11, r26	; 0x0b
    3508:	bc 87       	std	Y+12, r27	; 0x0c
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
    350a:	89 85       	ldd	r24, Y+9	; 0x09
    350c:	9a 85       	ldd	r25, Y+10	; 0x0a
    350e:	ab 85       	ldd	r26, Y+11	; 0x0b
    3510:	bc 85       	ldd	r27, Y+12	; 0x0c
    3512:	2b e0       	ldi	r18, 0x0B	; 11
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	22 9e       	mul	r2, r18
    3518:	f0 01       	movw	r30, r0
    351a:	23 9e       	mul	r2, r19
    351c:	f0 0d       	add	r31, r0
    351e:	32 9e       	mul	r3, r18
    3520:	f0 0d       	add	r31, r0
    3522:	11 24       	eor	r1, r1
    3524:	e8 5e       	subi	r30, 0xE8	; 232
    3526:	fe 4f       	sbci	r31, 0xFE	; 254
    3528:	24 81       	ldd	r18, Z+4	; 0x04
    352a:	35 81       	ldd	r19, Z+5	; 0x05
    352c:	46 81       	ldd	r20, Z+6	; 0x06
    352e:	57 81       	ldd	r21, Z+7	; 0x07
    3530:	82 17       	cp	r24, r18
    3532:	93 07       	cpc	r25, r19
    3534:	a4 07       	cpc	r26, r20
    3536:	b5 07       	cpc	r27, r21
    3538:	20 f4       	brcc	.+8      	; 0x3542 <ReadInductance+0x4e4>
    353a:	84 83       	std	Z+4, r24	; 0x04
    353c:	95 83       	std	Z+5, r25	; 0x05
    353e:	a6 83       	std	Z+6, r26	; 0x06
    3540:	b7 83       	std	Z+7, r27	; 0x07


  if(PartFound != PART_RESISTOR) {
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
    3542:	39 89       	ldd	r19, Y+17	; 0x11
    3544:	3f 5f       	subi	r19, 0xFF	; 255
    3546:	39 8b       	std	Y+17, r19	; 0x11
    3548:	80 91 55 01 	lds	r24, 0x0155
    354c:	99 89       	ldd	r25, Y+17	; 0x11
    354e:	98 17       	cp	r25, r24
    3550:	08 f4       	brcc	.+2      	; 0x3554 <ReadInductance+0x4f6>
    3552:	a6 cd       	rjmp	.-1204   	; 0x30a0 <ReadInductance+0x42>
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
  } // end loop for all resistors

  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    3554:	88 e0       	ldi	r24, 0x08	; 8
    3556:	87 b9       	out	0x07, r24	; 7
  R_DDR = 0;			// switch all resistor ports to input
    3558:	14 b8       	out	0x04, r1	; 4
#endif
  return;
 } // end ReadInductance()
    355a:	6e 96       	adiw	r28, 0x1e	; 30
    355c:	0f b6       	in	r0, 0x3f	; 63
    355e:	f8 94       	cli
    3560:	de bf       	out	0x3e, r29	; 62
    3562:	0f be       	out	0x3f, r0	; 63
    3564:	cd bf       	out	0x3d, r28	; 61
    3566:	cf 91       	pop	r28
    3568:	df 91       	pop	r29
    356a:	1f 91       	pop	r17
    356c:	0f 91       	pop	r16
    356e:	ff 90       	pop	r15
    3570:	ef 90       	pop	r14
    3572:	df 90       	pop	r13
    3574:	cf 90       	pop	r12
    3576:	bf 90       	pop	r11
    3578:	af 90       	pop	r10
    357a:	9f 90       	pop	r9
    357c:	8f 90       	pop	r8
    357e:	7f 90       	pop	r7
    3580:	6f 90       	pop	r6
    3582:	5f 90       	pop	r5
    3584:	4f 90       	pop	r4
    3586:	3f 90       	pop	r3
    3588:	2f 90       	pop	r2
    358a:	08 95       	ret

0000358c <ReadADC>:
  uint16_t U_AVCC;		// Voltage of AVCC
} ADCconfig;
*/


unsigned int ReadADC (uint8_t Probe) {
    358c:	df 92       	push	r13
    358e:	ef 92       	push	r14
    3590:	ff 92       	push	r15
    3592:	0f 93       	push	r16
    3594:	1f 93       	push	r17
 unsigned int U; /* return value (mV) */
 uint8_t Samples; /* loop counter */
 unsigned long Value; /* ADC value */
 Probe |= (1 << REFS0); /* use internal reference anyway */
    3596:	18 2f       	mov	r17, r24
    3598:	10 64       	ori	r17, 0x40	; 64
#endif
#ifdef __AVR_ATmega8__
    ADCSRA |= (1 << ADSC); /* start conversion */
    while (ADCSRA & (1 << ADSC)); /* wait until conversion is done */
#else
    ADCSRA = (1<<ADEN) | (1<<ADIF) | (1<<ADIE) | AUTO_CLOCK_DIV; //enable ADC and Interrupt
    359a:	0e e9       	ldi	r16, 0x9E	; 158
 unsigned int U; /* return value (mV) */
 uint8_t Samples; /* loop counter */
 unsigned long Value; /* ADC value */
 Probe |= (1 << REFS0); /* use internal reference anyway */
sample:
 ADMUX = Probe; /* set input channel and U reference */
    359c:	10 93 7c 00 	sts	0x007C, r17
#ifdef AUTOSCALE_ADC
 /* if voltage reference changed run a dummy conversion */
 Samples = Probe & (1 << REFS1); /* get REFS1 bit flag */
    35a0:	80 e8       	ldi	r24, 0x80	; 128
    35a2:	e8 2e       	mov	r14, r24
    35a4:	e1 22       	and	r14, r17
 if (Samples != ADCconfig.RefFlag) {
    35a6:	80 91 3a 01 	lds	r24, 0x013A
    35aa:	e8 16       	cp	r14, r24
    35ac:	89 f0       	breq	.+34     	; 0x35d0 <ReadADC+0x44>
#ifdef NO_AREF_CAP
    wait100us(); /* time for voltage stabilization */
    35ae:	0e 94 22 15 	call	0x2a44	; 0x2a44 <wait100us>
#endif
#ifdef __AVR_ATmega8__
    ADCSRA |= (1 << ADSC); /* start conversion */
    while (ADCSRA & (1 << ADSC)); /* wait until conversion is done */
#else
    ADCSRA = (1<<ADEN) | (1<<ADIF) | (1<<ADIE) | AUTO_CLOCK_DIV; //enable ADC and Interrupt
    35b2:	00 93 7a 00 	sts	0x007A, r16
    set_sleep_mode(SLEEP_MODE_ADC);
    35b6:	83 b7       	in	r24, 0x33	; 51
    35b8:	81 7f       	andi	r24, 0xF1	; 241
    35ba:	82 60       	ori	r24, 0x02	; 2
    35bc:	83 bf       	out	0x33, r24	; 51
    sleep_mode();	/* Start ADC, return, if ADC has finished */
    35be:	83 b7       	in	r24, 0x33	; 51
    35c0:	81 60       	ori	r24, 0x01	; 1
    35c2:	83 bf       	out	0x33, r24	; 51
    35c4:	88 95       	sleep
    35c6:	83 b7       	in	r24, 0x33	; 51
    35c8:	8e 7f       	andi	r24, 0xFE	; 254
    35ca:	83 bf       	out	0x33, r24	; 51
#endif
    ADCconfig.RefFlag = Samples; /* update flag */
    35cc:	e0 92 3a 01 	sts	0x013A, r14
  uint16_t U_AVCC;		// Voltage of AVCC
} ADCconfig;
*/


unsigned int ReadADC (uint8_t Probe) {
    35d0:	20 e0       	ldi	r18, 0x00	; 0
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	a9 01       	movw	r20, r18
    35d6:	e0 e0       	ldi	r30, 0x00	; 0
    35d8:	2a c0       	rjmp	.+84     	; 0x362e <ReadADC+0xa2>
 while (Samples < ADCconfig.Samples) /* take samples */ {
#ifdef __AVR_ATmega8__
    ADCSRA |= (1 << ADSC); /* start conversion */
    while (ADCSRA & (1 << ADSC)); /* wait until conversion is done */
#else
    ADCSRA = (1<<ADEN) | (1<<ADIF) | (1<<ADIE) | AUTO_CLOCK_DIV; //enable ADC and Interrupt
    35da:	00 93 7a 00 	sts	0x007A, r16
    set_sleep_mode(SLEEP_MODE_ADC);
    35de:	83 b7       	in	r24, 0x33	; 51
    35e0:	81 7f       	andi	r24, 0xF1	; 241
    35e2:	82 60       	ori	r24, 0x02	; 2
    35e4:	83 bf       	out	0x33, r24	; 51
    sleep_mode();	/* Start ADC, return, if ADC has finished */
    35e6:	83 b7       	in	r24, 0x33	; 51
    35e8:	81 60       	ori	r24, 0x01	; 1
    35ea:	83 bf       	out	0x33, r24	; 51
    35ec:	88 95       	sleep
    35ee:	83 b7       	in	r24, 0x33	; 51
    35f0:	8e 7f       	andi	r24, 0xFE	; 254
    35f2:	83 bf       	out	0x33, r24	; 51
#endif
    Value += ADCW; /* add ADC reading */
    35f4:	60 91 78 00 	lds	r22, 0x0078
    35f8:	70 91 79 00 	lds	r23, 0x0079
    35fc:	80 e0       	ldi	r24, 0x00	; 0
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	26 0f       	add	r18, r22
    3602:	37 1f       	adc	r19, r23
    3604:	48 1f       	adc	r20, r24
    3606:	59 1f       	adc	r21, r25
#ifdef AUTOSCALE_ADC
    /* auto-switch voltage reference for low readings */
    if ((Samples == 4) && (ADCconfig.U_Bandgap > 255) && ((uint16_t)Value < 1024) && !(Probe & (1 << REFS1))) {
    3608:	e4 30       	cpi	r30, 0x04	; 4
    360a:	81 f4       	brne	.+32     	; 0x362c <ReadADC+0xa0>
    360c:	60 91 3b 01 	lds	r22, 0x013B
    3610:	70 91 3c 01 	lds	r23, 0x013C
    3614:	6f 3f       	cpi	r22, 0xFF	; 255
    3616:	71 05       	cpc	r23, r1
    3618:	49 f0       	breq	.+18     	; 0x362c <ReadADC+0xa0>
    361a:	40 f0       	brcs	.+16     	; 0x362c <ReadADC+0xa0>
    361c:	84 e0       	ldi	r24, 0x04	; 4
    361e:	20 30       	cpi	r18, 0x00	; 0
    3620:	38 07       	cpc	r19, r24
    3622:	20 f4       	brcc	.+8      	; 0x362c <ReadADC+0xa0>
    3624:	17 fd       	sbrc	r17, 7
    3626:	02 c0       	rjmp	.+4      	; 0x362c <ReadADC+0xa0>
       Probe |= (1 << REFS1); /* select internal bandgap reference */
    3628:	10 68       	ori	r17, 0x80	; 128
#if PROCESSOR_TYP == 1280
       Probe &= ~(1 << REFS0);	/* ATmega640/1280/2560 1.1V Reference with REFS0=0 */
#endif
       goto sample; /* re-run sampling */
    362a:	b8 cf       	rjmp	.-144    	; 0x359c <ReadADC+0x10>
    }
#endif
    Samples++; /* one more done */
    362c:	ef 5f       	subi	r30, 0xFF	; 255
 }
#endif
 /* * sample ADC readings */
 Value = 0UL; /* reset sampling variable */
 Samples = 0; /* number of samples to take */
 while (Samples < ADCconfig.Samples) /* take samples */ {
    362e:	d0 90 39 01 	lds	r13, 0x0139
    3632:	ed 15       	cp	r30, r13
    3634:	90 f2       	brcs	.-92     	; 0x35da <ReadADC+0x4e>
    Samples++; /* one more done */
 }
#ifdef AUTOSCALE_ADC
 /* * convert ADC reading to voltage * - single sample: U = ADC reading * U_ref / 1024 */
 /* get voltage of reference used */
 if (Probe & (1 << REFS1)) U = ADCconfig.U_Bandgap; /* bandgap reference */
    3636:	17 ff       	sbrs	r17, 7
    3638:	05 c0       	rjmp	.+10     	; 0x3644 <ReadADC+0xb8>
    363a:	60 91 3b 01 	lds	r22, 0x013B
    363e:	70 91 3c 01 	lds	r23, 0x013C
    3642:	04 c0       	rjmp	.+8      	; 0x364c <ReadADC+0xc0>
 else U = ADCconfig.U_AVCC; /* Vcc reference */
    3644:	60 91 3d 01 	lds	r22, 0x013D
    3648:	70 91 3e 01 	lds	r23, 0x013E
#else
 U = ADCconfig.U_AVCC; /* Vcc reference */
#endif
 /* convert to voltage; */
 Value *= U; /* ADC readings * U_ref */
    364c:	80 e0       	ldi	r24, 0x00	; 0
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
 Value /= 1023; /* / 1024 for 10bit ADC */
    3654:	2f ef       	ldi	r18, 0xFF	; 255
    3656:	33 e0       	ldi	r19, 0x03	; 3
    3658:	40 e0       	ldi	r20, 0x00	; 0
    365a:	50 e0       	ldi	r21, 0x00	; 0
    365c:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
    3660:	79 01       	movw	r14, r18
    3662:	8a 01       	movw	r16, r20
 /* de-sample to get average voltage */
 Value /= ADCconfig.Samples;
    3664:	2d 2d       	mov	r18, r13
    3666:	30 e0       	ldi	r19, 0x00	; 0
    3668:	40 e0       	ldi	r20, 0x00	; 0
    366a:	50 e0       	ldi	r21, 0x00	; 0
    366c:	c8 01       	movw	r24, r16
    366e:	b7 01       	movw	r22, r14
    3670:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
 U = (unsigned int)Value;
 return U;
//   return ((unsigned int)(Value / (1023 * (unsigned long)ADCconfig.Samples)));
}
    3674:	c9 01       	movw	r24, r18
    3676:	1f 91       	pop	r17
    3678:	0f 91       	pop	r16
    367a:	ff 90       	pop	r15
    367c:	ef 90       	pop	r14
    367e:	df 90       	pop	r13
    3680:	08 95       	ret

00003682 <W5msReadADC>:
unsigned int W5msReadADC (uint8_t Probe) {
    3682:	1f 93       	push	r17
    3684:	18 2f       	mov	r17, r24
  wait_about5ms();
    3686:	81 e0       	ldi	r24, 0x01	; 1
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	0e 94 9a 03 	call	0x734	; 0x734 <sleep_5ms>
  return (ReadADC(Probe));
    368e:	81 2f       	mov	r24, r17
    3690:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
}
    3694:	1f 91       	pop	r17
    3696:	08 95       	ret

00003698 <W10msReadADC>:
unsigned int W10msReadADC (uint8_t Probe) {
    3698:	1f 93       	push	r17
    369a:	18 2f       	mov	r17, r24
  wait_about10ms();
    369c:	82 e0       	ldi	r24, 0x02	; 2
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	0e 94 9a 03 	call	0x734	; 0x734 <sleep_5ms>
  return (ReadADC(Probe));
    36a4:	81 2f       	mov	r24, r17
    36a6:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
}
    36aa:	1f 91       	pop	r17
    36ac:	08 95       	ret

000036ae <W20msReadADC>:
unsigned int W20msReadADC (uint8_t Probe) {
    36ae:	1f 93       	push	r17
    36b0:	18 2f       	mov	r17, r24
  wait_about20ms();
    36b2:	84 e0       	ldi	r24, 0x04	; 4
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	0e 94 9a 03 	call	0x734	; 0x734 <sleep_5ms>
  return (ReadADC(Probe));
    36ba:	81 2f       	mov	r24, r17
    36bc:	0e 94 c6 1a 	call	0x358c	; 0x358c <ReadADC>
}
    36c0:	1f 91       	pop	r17
    36c2:	08 95       	ret

000036c4 <GetESR>:
#include "Transistortester.h"

#define MAX_CNT 128

//=================================================================
void GetESR() {
    36c4:	2f 92       	push	r2
    36c6:	3f 92       	push	r3
    36c8:	4f 92       	push	r4
    36ca:	5f 92       	push	r5
    36cc:	6f 92       	push	r6
    36ce:	7f 92       	push	r7
    36d0:	8f 92       	push	r8
    36d2:	9f 92       	push	r9
    36d4:	af 92       	push	r10
    36d6:	bf 92       	push	r11
    36d8:	cf 92       	push	r12
    36da:	df 92       	push	r13
    36dc:	ef 92       	push	r14
    36de:	ff 92       	push	r15
    36e0:	0f 93       	push	r16
    36e2:	1f 93       	push	r17
    36e4:	df 93       	push	r29
    36e6:	cf 93       	push	r28
    36e8:	cd b7       	in	r28, 0x3d	; 61
    36ea:	de b7       	in	r29, 0x3e	; 62
    36ec:	60 97       	sbiw	r28, 0x10	; 16
    36ee:	0f b6       	in	r0, 0x3f	; 63
    36f0:	f8 94       	cli
    36f2:	de bf       	out	0x3e, r29	; 62
    36f4:	0f be       	out	0x3f, r0	; 63
    36f6:	cd bf       	out	0x3d, r28	; 61
   esr0 = (int8_t)eeprom_read_byte(&EE_ESR_ZERO);
   sumvolt[0] += (((long)sumvolt[0] * esr0) / ((RR680MI - R_L_VAL) * 10)); // subtract 0.23 Ohm from ESR
   if (sumvolt[1] > sumvolt[0]) {
      sumvolt[1] -= sumvolt[0];		// difference HighPin - LowPin Voltage with current
   } else {
      sumvolt[1] = 0;
    36f8:	20 91 5c 01 	lds	r18, 0x015C
    36fc:	30 91 5d 01 	lds	r19, 0x015D
    3700:	40 91 5e 01 	lds	r20, 0x015E
    3704:	50 91 5f 01 	lds	r21, 0x015F
    3708:	10 91 69 01 	lds	r17, 0x0169
  uint8_t LoADC;		// used to switch Lowpin directly to GND or VCC
  uint8_t ii,jj;		// tempory values
  int8_t esr0;			// used for ESR zero correction

  while (cap.cpre_max < -9) { // set cval to nF unit
      cap.cval_max /= 10;		// reduce value by factor ten
    370c:	6a e0       	ldi	r22, 0x0A	; 10
    370e:	a6 2e       	mov	r10, r22
    3710:	b1 2c       	mov	r11, r1
    3712:	c1 2c       	mov	r12, r1
    3714:	d1 2c       	mov	r13, r1
  uint8_t LoPinR_L;		// used to switch 680 Ohm to LowPin
  uint8_t LoADC;		// used to switch Lowpin directly to GND or VCC
  uint8_t ii,jj;		// tempory values
  int8_t esr0;			// used for ESR zero correction

  while (cap.cpre_max < -9) { // set cval to nF unit
    3716:	07 c0       	rjmp	.+14     	; 0x3726 <GetESR+0x62>
      cap.cval_max /= 10;		// reduce value by factor ten
    3718:	ca 01       	movw	r24, r20
    371a:	b9 01       	movw	r22, r18
    371c:	a6 01       	movw	r20, r12
    371e:	95 01       	movw	r18, r10
    3720:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
    3724:	1f 5f       	subi	r17, 0xFF	; 255
  uint8_t LoPinR_L;		// used to switch 680 Ohm to LowPin
  uint8_t LoADC;		// used to switch Lowpin directly to GND or VCC
  uint8_t ii,jj;		// tempory values
  int8_t esr0;			// used for ESR zero correction

  while (cap.cpre_max < -9) { // set cval to nF unit
    3726:	17 3f       	cpi	r17, 0xF7	; 247
    3728:	bc f3       	brlt	.-18     	; 0x3718 <GetESR+0x54>
    372a:	20 93 5c 01 	sts	0x015C, r18
    372e:	30 93 5d 01 	sts	0x015D, r19
    3732:	40 93 5e 01 	sts	0x015E, r20
    3736:	50 93 5f 01 	sts	0x015F, r21
    373a:	10 93 69 01 	sts	0x0169, r17
      cap.cval_max /= 10;		// reduce value by factor ten
      cap.cpre_max++;		// take next decimal prefix
  }
  if (cap.cval_max < 1800) return;			//capacity lower than 1.8 uF
    373e:	28 30       	cpi	r18, 0x08	; 8
    3740:	67 e0       	ldi	r22, 0x07	; 7
    3742:	36 07       	cpc	r19, r22
    3744:	60 e0       	ldi	r22, 0x00	; 0
    3746:	46 07       	cpc	r20, r22
    3748:	60 e0       	ldi	r22, 0x00	; 0
    374a:	56 07       	cpc	r21, r22
    374c:	08 f4       	brcc	.+2      	; 0x3750 <GetESR+0x8c>
    374e:	21 c2       	rjmp	.+1090   	; 0x3b92 <GetESR+0x4ce>
  lcd_fix_string(ESR_str);		// " ESR="
    3750:	8c e2       	ldi	r24, 0x2C	; 44
    3752:	91 e0       	ldi	r25, 0x01	; 1
    3754:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  LoADC = MEM_read_byte(&PinADCtab[cap.ca]) | TXD_MSK;
    3758:	00 91 66 01 	lds	r16, 0x0166
    375c:	10 e0       	ldi	r17, 0x00	; 0
    375e:	c8 01       	movw	r24, r16
    3760:	88 55       	subi	r24, 0x58	; 88
    3762:	9e 4f       	sbci	r25, 0xFE	; 254
    3764:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__eerd_byte_m168>
    3768:	98 e0       	ldi	r25, 0x08	; 8
    376a:	c9 2e       	mov	r12, r25
    376c:	c8 2a       	or	r12, r24
  HiADC = MEM_read_byte(&PinADCtab[cap.cb]) | TXD_MSK;
    376e:	80 91 67 01 	lds	r24, 0x0167
    3772:	e8 2e       	mov	r14, r24
    3774:	ff 24       	eor	r15, r15
    3776:	c7 01       	movw	r24, r14
    3778:	88 55       	subi	r24, 0x58	; 88
    377a:	9e 4f       	sbci	r25, 0xFE	; 254
    377c:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__eerd_byte_m168>
    3780:	b8 e0       	ldi	r27, 0x08	; 8
    3782:	bb 2e       	mov	r11, r27
    3784:	b8 2a       	or	r11, r24
  LoPinR_L = MEM_read_byte(&PinRLtab[cap.ca]);  //R_L mask for LowPin R_L load
    3786:	c8 01       	movw	r24, r16
    3788:	8b 55       	subi	r24, 0x5B	; 91
    378a:	9e 4f       	sbci	r25, 0xFE	; 254
    378c:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__eerd_byte_m168>
    3790:	a8 2e       	mov	r10, r24
  HiPinR_L = MEM_read_byte(&PinRLtab[cap.cb]);	//R_L mask for HighPin R_L load
    3792:	c7 01       	movw	r24, r14
    3794:	8b 55       	subi	r24, 0x5B	; 91
    3796:	9e 4f       	sbci	r25, 0xFE	; 254
    3798:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__eerd_byte_m168>
    379c:	d8 2e       	mov	r13, r24
// Measurement of ESR of capacitors AC Mode
   sumvolt[0] = 1;		// set sum of LowPin voltage to 1 to prevent divide by zero
   sumvolt[1] = 1;		// clear sum of HighPin voltage with current
                                // offset is about (x*10*200)/34000 in 0.01 Ohm units
   sumvolt[2] = 0;		// clear sum of HighPin voltage without current
   EntladePins();	// discharge capacitor
    379e:	0e 94 ab 01 	call	0x356	; 0x356 <EntladePins>
   ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    37a2:	88 e0       	ldi	r24, 0x08	; 8
    37a4:	88 b9       	out	0x08, r24	; 8
  LoPinR_L = MEM_read_byte(&PinRLtab[cap.ca]);  //R_L mask for LowPin R_L load
  HiPinR_L = MEM_read_byte(&PinRLtab[cap.cb]);	//R_L mask for HighPin R_L load


// Measurement of ESR of capacitors AC Mode
   sumvolt[0] = 1;		// set sum of LowPin voltage to 1 to prevent divide by zero
    37a6:	a1 e0       	ldi	r26, 0x01	; 1
    37a8:	ea 2e       	mov	r14, r26
    37aa:	f1 2c       	mov	r15, r1
    37ac:	01 2d       	mov	r16, r1
    37ae:	11 2d       	mov	r17, r1
   sumvolt[1] = 1;		// clear sum of HighPin voltage with current
    37b0:	81 e0       	ldi	r24, 0x01	; 1
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	a0 e0       	ldi	r26, 0x00	; 0
    37b6:	b0 e0       	ldi	r27, 0x00	; 0
    37b8:	89 83       	std	Y+1, r24	; 0x01
    37ba:	9a 83       	std	Y+2, r25	; 0x02
    37bc:	ab 83       	std	Y+3, r26	; 0x03
    37be:	bc 83       	std	Y+4, r27	; 0x04
                                // offset is about (x*10*200)/34000 in 0.01 Ohm units
   sumvolt[2] = 0;		// clear sum of HighPin voltage without current
    37c0:	1d 82       	std	Y+5, r1	; 0x05
    37c2:	1e 82       	std	Y+6, r1	; 0x06
    37c4:	1f 82       	std	Y+7, r1	; 0x07
    37c6:	18 86       	std	Y+8, r1	; 0x08
   EntladePins();	// discharge capacitor
   ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
// measurement frequency is given by sum of ADC-Reads < 680 Hz
   // ADC Sample and Hold (SH) is done 1.5 ADC clock number after starting 
   for(ii=0;ii<MAX_CNT;ii++) {
    37c8:	66 24       	eor	r6, r6
      ADC_DDR = LoADC;				// switch Low-Pin to output (GND)
    37ca:	c7 b8       	out	0x07, r12	; 7
       ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);	// switch ADC to LowPin, Internal Ref. 
    37cc:	80 91 66 01 	lds	r24, 0x0166
    37d0:	80 6c       	ori	r24, 0xC0	; 192
    37d2:	80 93 7c 00 	sts	0x007C, r24
       ADCSRA |= (1<<ADSC);				// Start Conversion
    37d6:	80 91 7a 00 	lds	r24, 0x007A
    37da:	80 64       	ori	r24, 0x40	; 64
    37dc:	80 93 7a 00 	sts	0x007A, r24
       while (ADCSRA&(1<<ADSC));	// wait dummy read , sync with ADC-clock
    37e0:	80 91 7a 00 	lds	r24, 0x007A
    37e4:	86 fd       	sbrc	r24, 6
    37e6:	fc cf       	rjmp	.-8      	; 0x37e0 <GetESR+0x11c>
      while (1) {
         R_PORT = HiPinR_L;			// switch R-Port to VCC
    37e8:	d5 b8       	out	0x05, r13	; 5
         R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (VCC)
    37ea:	d4 b8       	out	0x04, r13	; 4
          ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);      // switch ADC to LowPin, Internal Ref. 
    37ec:	80 91 66 01 	lds	r24, 0x0166
    37f0:	80 6c       	ori	r24, 0xC0	; 192
    37f2:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    37f6:	80 91 7a 00 	lds	r24, 0x007A
    37fa:	80 64       	ori	r24, 0x40	; 64
    37fc:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    3800:	80 91 7a 00 	lds	r24, 0x007A
    3804:	86 fd       	sbrc	r24, 6
    3806:	fc cf       	rjmp	.-8      	; 0x3800 <GetESR+0x13c>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    3808:	80 91 7a 00 	lds	r24, 0x007A
    380c:	80 64       	ori	r24, 0x40	; 64
    380e:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    3812:	80 91 7a 00 	lds	r24, 0x007A
    3816:	86 fd       	sbrc	r24, 6
    3818:	fc cf       	rjmp	.-8      	; 0x3812 <GetESR+0x14e>
         adcv[0] = ADCW;			// Voltage LowPin with current
    381a:	20 90 78 00 	lds	r2, 0x0078
    381e:	30 90 79 00 	lds	r3, 0x0079
          ADMUX = cap.cb | (1<<REFS1) | (1<<REFS0);      // switch ADC to HighPin, Internal Ref. 
    3822:	80 91 67 01 	lds	r24, 0x0167
    3826:	80 6c       	ori	r24, 0xC0	; 192
    3828:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    382c:	80 91 7a 00 	lds	r24, 0x007A
    3830:	80 64       	ori	r24, 0x40	; 64
    3832:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    3836:	80 91 7a 00 	lds	r24, 0x007A
    383a:	86 fd       	sbrc	r24, 6
    383c:	fc cf       	rjmp	.-8      	; 0x3836 <GetESR+0x172>
         ADCSRA |= (1<<ADSC);			// Start Conversion, real start is rising edge of ADC clock
    383e:	80 91 7a 00 	lds	r24, 0x007A
    3842:	80 64       	ori	r24, 0x40	; 64
    3844:	80 93 7a 00 	sts	0x007A, r24
         wait10us();				// 2.5 ADC clocks = 20 us
    3848:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <wait10us>
         wait5us();			
    384c:	0e 94 28 15 	call	0x2a50	; 0x2a50 <wait5us>
         wait3us();				// with only 17 us delay the voltage goes down before SH
    3850:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <wait3us>
         wdt_reset();
    3854:	a8 95       	wdr
         wdt_reset();
    3856:	a8 95       	wdr
         wdt_reset();
    3858:	a8 95       	wdr
         wdt_reset();
    385a:	a8 95       	wdr
         wdt_reset();
    385c:	a8 95       	wdr
         wdt_reset();
    385e:	a8 95       	wdr
//         wdt_reset();				// with wdt_reset the timing can be adjusted,
						// when time is too short, voltage is down before SH of ADC
						// when time is too long, capacitor will be overloaded.
						// That will cause too high voltage without current.
         R_DDR = 0;				// switch current off,  SH is 1.5 ADC clock behind start
    3860:	14 b8       	out	0x04, r1	; 4
         while (ADCSRA&(1<<ADSC));		// wait for conversion finished
    3862:	80 91 7a 00 	lds	r24, 0x007A
    3866:	86 fd       	sbrc	r24, 6
    3868:	fc cf       	rjmp	.-8      	; 0x3862 <GetESR+0x19e>
         adcv[1] = ADCW;			// Voltage HighPin with current
    386a:	20 91 78 00 	lds	r18, 0x0078
    386e:	30 91 79 00 	lds	r19, 0x0079
         R_PORT = 0;
    3872:	15 b8       	out	0x05, r1	; 5
          ADCSRA |= (1<<ADSC);			// Start Conversion
    3874:	80 91 7a 00 	lds	r24, 0x007A
    3878:	80 64       	ori	r24, 0x40	; 64
    387a:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read
    387e:	80 91 7a 00 	lds	r24, 0x007A
    3882:	86 fd       	sbrc	r24, 6
    3884:	fc cf       	rjmp	.-8      	; 0x387e <GetESR+0x1ba>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    3886:	80 91 7a 00 	lds	r24, 0x007A
    388a:	80 64       	ori	r24, 0x40	; 64
    388c:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    3890:	80 91 7a 00 	lds	r24, 0x007A
    3894:	86 fd       	sbrc	r24, 6
    3896:	fc cf       	rjmp	.-8      	; 0x3890 <GetESR+0x1cc>
         adcv[2] = ADCW;			// Voltage HighPin without current
    3898:	80 91 78 00 	lds	r24, 0x0078
    389c:	90 91 79 00 	lds	r25, 0x0079
         if (adcv[2] > 2) break;
    38a0:	83 30       	cpi	r24, 0x03	; 3
    38a2:	91 05       	cpc	r25, r1
    38a4:	10 f4       	brcc	.+4      	; 0x38aa <GetESR+0x1e6>
         wdt_reset();
    38a6:	a8 95       	wdr
      }
    38a8:	9f cf       	rjmp	.-194    	; 0x37e8 <GetESR+0x124>
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
    38aa:	44 24       	eor	r4, r4
    38ac:	55 24       	eor	r5, r5
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    38ae:	a9 01       	movw	r20, r18
    38b0:	60 e0       	ldi	r22, 0x00	; 0
    38b2:	70 e0       	ldi	r23, 0x00	; 0
    38b4:	49 87       	std	Y+9, r20	; 0x09
    38b6:	5a 87       	std	Y+10, r21	; 0x0a
    38b8:	6b 87       	std	Y+11, r22	; 0x0b
    38ba:	7c 87       	std	Y+12, r23	; 0x0c
      sumvolt[2] += adcv[2]; 			// capacitor voltage without current
    38bc:	9c 01       	movw	r18, r24
    38be:	40 e0       	ldi	r20, 0x00	; 0
    38c0:	50 e0       	ldi	r21, 0x00	; 0
    38c2:	2d 87       	std	Y+13, r18	; 0x0d
    38c4:	3e 87       	std	Y+14, r19	; 0x0e
    38c6:	4f 87       	std	Y+15, r20	; 0x0f
    38c8:	58 8b       	std	Y+16, r21	; 0x10
      ADC_DDR = HiADC;				// switch High Pin to GND
    38ca:	b7 b8       	out	0x07, r11	; 7
       ADCSRA |= (1<<ADSC);			// Start Conversion
    38cc:	80 91 7a 00 	lds	r24, 0x007A
    38d0:	80 64       	ori	r24, 0x40	; 64
    38d2:	80 93 7a 00 	sts	0x007A, r24
       while (ADCSRA&(1<<ADSC));		// wait dummy read
    38d6:	80 91 7a 00 	lds	r24, 0x007A
    38da:	86 fd       	sbrc	r24, 6
    38dc:	fc cf       	rjmp	.-8      	; 0x38d6 <GetESR+0x212>
      while (1) {
         R_PORT = LoPinR_L;
    38de:	a5 b8       	out	0x05, r10	; 5
         R_DDR = LoPinR_L;			// switch LowPin with 680 Ohm to VCC
    38e0:	a4 b8       	out	0x04, r10	; 4
         wdt_reset();
    38e2:	a8 95       	wdr
          ADMUX = cap.cb | (1<<REFS1) | (1<<REFS0);      // switch ADC to HighPin, Internal Ref. 
    38e4:	80 91 67 01 	lds	r24, 0x0167
    38e8:	80 6c       	ori	r24, 0xC0	; 192
    38ea:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    38ee:	80 91 7a 00 	lds	r24, 0x007A
    38f2:	80 64       	ori	r24, 0x40	; 64
    38f4:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    38f8:	80 91 7a 00 	lds	r24, 0x007A
    38fc:	86 fd       	sbrc	r24, 6
    38fe:	fc cf       	rjmp	.-8      	; 0x38f8 <GetESR+0x234>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    3900:	80 91 7a 00 	lds	r24, 0x007A
    3904:	80 64       	ori	r24, 0x40	; 64
    3906:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    390a:	80 91 7a 00 	lds	r24, 0x007A
    390e:	86 fd       	sbrc	r24, 6
    3910:	fc cf       	rjmp	.-8      	; 0x390a <GetESR+0x246>
         adcv[0] = ADCW;			// Voltage HighPin with current
    3912:	80 90 78 00 	lds	r8, 0x0078
    3916:	90 90 79 00 	lds	r9, 0x0079
          ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);      // switch ADC to LowPin, Internal Ref. 
    391a:	80 91 66 01 	lds	r24, 0x0166
    391e:	80 6c       	ori	r24, 0xC0	; 192
    3920:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    3924:	80 91 7a 00 	lds	r24, 0x007A
    3928:	80 64       	ori	r24, 0x40	; 64
    392a:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    392e:	80 91 7a 00 	lds	r24, 0x007A
    3932:	86 fd       	sbrc	r24, 6
    3934:	fc cf       	rjmp	.-8      	; 0x392e <GetESR+0x26a>
         ADCSRA |= (1<<ADSC);			// Start Conversion, real start is rising edge of ADC clock
    3936:	80 91 7a 00 	lds	r24, 0x007A
    393a:	80 64       	ori	r24, 0x40	; 64
    393c:	80 93 7a 00 	sts	0x007A, r24
         wait10us();				// 2.5 ADC clocks = 20 us
    3940:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <wait10us>
         wait5us();			
    3944:	0e 94 28 15 	call	0x2a50	; 0x2a50 <wait5us>
         wait3us();				// with only 17 us delay the voltage goes down before SH
    3948:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <wait3us>
         wdt_reset();
    394c:	a8 95       	wdr
         wdt_reset();
    394e:	a8 95       	wdr
         wdt_reset();
    3950:	a8 95       	wdr
         wdt_reset();
    3952:	a8 95       	wdr
         wdt_reset();
    3954:	a8 95       	wdr
         wdt_reset();
    3956:	a8 95       	wdr
//         wdt_reset();				// with wdt_reset the timing can be adjusted,
						// when time is too short, voltage is down before SH of ADC
						// when time is too long, capacitor will be overloaded.
						// That will cause too high voltage without current.
         R_DDR = 0;				// switch current off, SH is 1.5 ADC clock ticks behind start
    3958:	14 b8       	out	0x04, r1	; 4
         while (ADCSRA&(1<<ADSC));		// wait for conversion finished
    395a:	80 91 7a 00 	lds	r24, 0x007A
    395e:	86 fd       	sbrc	r24, 6
    3960:	fc cf       	rjmp	.-8      	; 0x395a <GetESR+0x296>
         adcv[1] = ADCW;			//  Voltage LowPin with current
    3962:	40 91 78 00 	lds	r20, 0x0078
    3966:	50 91 79 00 	lds	r21, 0x0079
         R_PORT = 0;
    396a:	15 b8       	out	0x05, r1	; 5
          ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);      // switch ADC to LowPin, Internal Ref. 
    396c:	80 91 66 01 	lds	r24, 0x0166
    3970:	80 6c       	ori	r24, 0xC0	; 192
    3972:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);		// Start Conversion
    3976:	80 91 7a 00 	lds	r24, 0x007A
    397a:	80 64       	ori	r24, 0x40	; 64
    397c:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read
    3980:	80 91 7a 00 	lds	r24, 0x007A
    3984:	86 fd       	sbrc	r24, 6
    3986:	fc cf       	rjmp	.-8      	; 0x3980 <GetESR+0x2bc>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    3988:	80 91 7a 00 	lds	r24, 0x007A
    398c:	80 64       	ori	r24, 0x40	; 64
    398e:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    3992:	80 91 7a 00 	lds	r24, 0x007A
    3996:	86 fd       	sbrc	r24, 6
    3998:	fc cf       	rjmp	.-8      	; 0x3992 <GetESR+0x2ce>
         adcv[2] = ADCW;			// Voltage LowPin without current
    399a:	20 91 78 00 	lds	r18, 0x0078
    399e:	30 91 79 00 	lds	r19, 0x0079
         if (adcv[2] > 2) break;
    39a2:	23 30       	cpi	r18, 0x03	; 3
    39a4:	31 05       	cpc	r19, r1
    39a6:	10 f4       	brcc	.+4      	; 0x39ac <GetESR+0x2e8>
         wdt_reset();
    39a8:	a8 95       	wdr
      }
    39aa:	99 cf       	rjmp	.-206    	; 0x38de <GetESR+0x21a>
      R_DDR = 0;				// switch current off
    39ac:	14 b8       	out	0x04, r1	; 4
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
    39ae:	c4 01       	movw	r24, r8
    39b0:	a0 e0       	ldi	r26, 0x00	; 0
    39b2:	b0 e0       	ldi	r27, 0x00	; 0
         while (ADCSRA&(1<<ADSC));		// wait
         adcv[2] = ADCW;			// Voltage HighPin without current
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
    39b4:	82 0d       	add	r24, r2
    39b6:	93 1d       	adc	r25, r3
    39b8:	a4 1d       	adc	r26, r4
    39ba:	b5 1d       	adc	r27, r5
         adcv[2] = ADCW;			// Voltage LowPin without current
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      R_DDR = 0;				// switch current off
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
    39bc:	e8 0e       	add	r14, r24
    39be:	f9 1e       	adc	r15, r25
    39c0:	0a 1f       	adc	r16, r26
    39c2:	1b 1f       	adc	r17, r27
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    39c4:	ca 01       	movw	r24, r20
    39c6:	a0 e0       	ldi	r26, 0x00	; 0
    39c8:	b0 e0       	ldi	r27, 0x00	; 0
         adcv[2] = ADCW;			// Voltage HighPin without current
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    39ca:	49 85       	ldd	r20, Y+9	; 0x09
    39cc:	5a 85       	ldd	r21, Y+10	; 0x0a
    39ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    39d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    39d2:	84 0f       	add	r24, r20
    39d4:	95 1f       	adc	r25, r21
    39d6:	a6 1f       	adc	r26, r22
    39d8:	b7 1f       	adc	r27, r23
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      R_DDR = 0;				// switch current off
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    39da:	49 81       	ldd	r20, Y+1	; 0x01
    39dc:	5a 81       	ldd	r21, Y+2	; 0x02
    39de:	6b 81       	ldd	r22, Y+3	; 0x03
    39e0:	7c 81       	ldd	r23, Y+4	; 0x04
    39e2:	48 0f       	add	r20, r24
    39e4:	59 1f       	adc	r21, r25
    39e6:	6a 1f       	adc	r22, r26
    39e8:	7b 1f       	adc	r23, r27
    39ea:	49 83       	std	Y+1, r20	; 0x01
    39ec:	5a 83       	std	Y+2, r21	; 0x02
    39ee:	6b 83       	std	Y+3, r22	; 0x03
    39f0:	7c 83       	std	Y+4, r23	; 0x04
      sumvolt[2] += adcv[2];			// add  HighPin voltages without current
    39f2:	40 e0       	ldi	r20, 0x00	; 0
    39f4:	50 e0       	ldi	r21, 0x00	; 0
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
      sumvolt[2] += adcv[2]; 			// capacitor voltage without current
    39f6:	6d 85       	ldd	r22, Y+13	; 0x0d
    39f8:	7e 85       	ldd	r23, Y+14	; 0x0e
    39fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    39fc:	98 89       	ldd	r25, Y+16	; 0x10
    39fe:	26 0f       	add	r18, r22
    3a00:	37 1f       	adc	r19, r23
    3a02:	48 1f       	adc	r20, r24
    3a04:	59 1f       	adc	r21, r25
         wdt_reset();
      }
      R_DDR = 0;				// switch current off
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
      sumvolt[2] += adcv[2];			// add  HighPin voltages without current
    3a06:	8d 81       	ldd	r24, Y+5	; 0x05
    3a08:	9e 81       	ldd	r25, Y+6	; 0x06
    3a0a:	af 81       	ldd	r26, Y+7	; 0x07
    3a0c:	b8 85       	ldd	r27, Y+8	; 0x08
    3a0e:	82 0f       	add	r24, r18
    3a10:	93 1f       	adc	r25, r19
    3a12:	a4 1f       	adc	r26, r20
    3a14:	b5 1f       	adc	r27, r21
    3a16:	8d 83       	std	Y+5, r24	; 0x05
    3a18:	9e 83       	std	Y+6, r25	; 0x06
    3a1a:	af 83       	std	Y+7, r26	; 0x07
    3a1c:	b8 87       	std	Y+8, r27	; 0x08
   sumvolt[2] = 0;		// clear sum of HighPin voltage without current
   EntladePins();	// discharge capacitor
   ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
// measurement frequency is given by sum of ADC-Reads < 680 Hz
   // ADC Sample and Hold (SH) is done 1.5 ADC clock number after starting 
   for(ii=0;ii<MAX_CNT;ii++) {
    3a1e:	63 94       	inc	r6
    3a20:	96 2d       	mov	r25, r6
    3a22:	90 38       	cpi	r25, 0x80	; 128
    3a24:	09 f0       	breq	.+2      	; 0x3a28 <GetESR+0x364>
    3a26:	d1 ce       	rjmp	.-606    	; 0x37ca <GetESR+0x106>
   } // end for
   // we need to compensate the time delay between reading the LowPin Voltage and the
   // HighPin Voltage, which is usually 2 * 14 * 8 us = 224 us.
   // With the loading of the capacitor the current will sink, so we get a too high voltage at
   // the LowPin. The velocity of degration is inversely proportional to time constant (represented by capacity value).
   sumvolt[0] -= (sumvolt[0] * 150UL)  / cap.cval_max;
    3a28:	c8 01       	movw	r24, r16
    3a2a:	b7 01       	movw	r22, r14
    3a2c:	26 e9       	ldi	r18, 0x96	; 150
    3a2e:	30 e0       	ldi	r19, 0x00	; 0
    3a30:	40 e0       	ldi	r20, 0x00	; 0
    3a32:	50 e0       	ldi	r21, 0x00	; 0
    3a34:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
    3a38:	20 91 5c 01 	lds	r18, 0x015C
    3a3c:	30 91 5d 01 	lds	r19, 0x015D
    3a40:	40 91 5e 01 	lds	r20, 0x015E
    3a44:	50 91 5f 01 	lds	r21, 0x015F
    3a48:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
    3a4c:	57 01       	movw	r10, r14
    3a4e:	68 01       	movw	r12, r16
    3a50:	a2 1a       	sub	r10, r18
    3a52:	b3 0a       	sbc	r11, r19
    3a54:	c4 0a       	sbc	r12, r20
    3a56:	d5 0a       	sbc	r13, r21
   esr0 = (int8_t)eeprom_read_byte(&EE_ESR_ZERO);
    3a58:	80 ec       	ldi	r24, 0xC0	; 192
    3a5a:	91 e0       	ldi	r25, 0x01	; 1
    3a5c:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <__eerd_byte_m168>
    3a60:	28 2e       	mov	r2, r24
   sumvolt[0] += (((long)sumvolt[0] * esr0) / ((RR680MI - R_L_VAL) * 10)); // subtract 0.23 Ohm from ESR
    3a62:	40 90 02 01 	lds	r4, 0x0102
    3a66:	50 90 03 01 	lds	r5, 0x0103
    3a6a:	68 2f       	mov	r22, r24
    3a6c:	77 27       	eor	r23, r23
    3a6e:	67 fd       	sbrc	r22, 7
    3a70:	70 95       	com	r23
    3a72:	87 2f       	mov	r24, r23
    3a74:	97 2f       	mov	r25, r23
    3a76:	a6 01       	movw	r20, r12
    3a78:	95 01       	movw	r18, r10
    3a7a:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
    3a7e:	92 01       	movw	r18, r4
    3a80:	22 0f       	add	r18, r18
    3a82:	33 1f       	adc	r19, r19
    3a84:	a2 01       	movw	r20, r4
    3a86:	e3 e0       	ldi	r30, 0x03	; 3
    3a88:	44 0f       	add	r20, r20
    3a8a:	55 1f       	adc	r21, r21
    3a8c:	ea 95       	dec	r30
    3a8e:	e1 f7       	brne	.-8      	; 0x3a88 <GetESR+0x3c4>
    3a90:	24 0f       	add	r18, r20
    3a92:	35 1f       	adc	r19, r21
    3a94:	20 5a       	subi	r18, 0xA0	; 160
    3a96:	39 40       	sbci	r19, 0x09	; 9
    3a98:	40 e0       	ldi	r20, 0x00	; 0
    3a9a:	50 e0       	ldi	r21, 0x00	; 0
    3a9c:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <__divmodsi4>
    3aa0:	79 01       	movw	r14, r18
    3aa2:	8a 01       	movw	r16, r20
    3aa4:	ea 0c       	add	r14, r10
    3aa6:	fb 1c       	adc	r15, r11
    3aa8:	0c 1d       	adc	r16, r12
    3aaa:	1d 1d       	adc	r17, r13
   if (sumvolt[1] > sumvolt[0]) {
    3aac:	29 81       	ldd	r18, Y+1	; 0x01
    3aae:	3a 81       	ldd	r19, Y+2	; 0x02
    3ab0:	4b 81       	ldd	r20, Y+3	; 0x03
    3ab2:	5c 81       	ldd	r21, Y+4	; 0x04
    3ab4:	e2 16       	cp	r14, r18
    3ab6:	f3 06       	cpc	r15, r19
    3ab8:	04 07       	cpc	r16, r20
    3aba:	15 07       	cpc	r17, r21
    3abc:	38 f4       	brcc	.+14     	; 0x3acc <GetESR+0x408>
      sumvolt[1] -= sumvolt[0];		// difference HighPin - LowPin Voltage with current
    3abe:	59 01       	movw	r10, r18
    3ac0:	6a 01       	movw	r12, r20
    3ac2:	ae 18       	sub	r10, r14
    3ac4:	bf 08       	sbc	r11, r15
    3ac6:	c0 0a       	sbc	r12, r16
    3ac8:	d1 0a       	sbc	r13, r17
    3aca:	03 c0       	rjmp	.+6      	; 0x3ad2 <GetESR+0x40e>
   } else {
      sumvolt[1] = 0;
    3acc:	aa 24       	eor	r10, r10
    3ace:	bb 24       	eor	r11, r11
    3ad0:	65 01       	movw	r12, r10
   }
   sumvolt[2] = (sumvolt[2] * 980) / 1000;	// scale down the voltage without current with 98.0%
    3ad2:	6d 81       	ldd	r22, Y+5	; 0x05
    3ad4:	7e 81       	ldd	r23, Y+6	; 0x06
    3ad6:	8f 81       	ldd	r24, Y+7	; 0x07
    3ad8:	98 85       	ldd	r25, Y+8	; 0x08
    3ada:	24 ed       	ldi	r18, 0xD4	; 212
    3adc:	33 e0       	ldi	r19, 0x03	; 3
    3ade:	40 e0       	ldi	r20, 0x00	; 0
    3ae0:	50 e0       	ldi	r21, 0x00	; 0
    3ae2:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
    3ae6:	28 ee       	ldi	r18, 0xE8	; 232
    3ae8:	33 e0       	ldi	r19, 0x03	; 3
    3aea:	40 e0       	ldi	r20, 0x00	; 0
    3aec:	50 e0       	ldi	r21, 0x00	; 0
    3aee:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
    3af2:	39 01       	movw	r6, r18
    3af4:	4a 01       	movw	r8, r20
    3af6:	b2 01       	movw	r22, r4
    3af8:	60 59       	subi	r22, 0x90	; 144
    3afa:	7a 41       	sbci	r23, 0x1A	; 26
   jj = 0;
   if (sumvolt[1] >= sumvolt[2]) {
    3afc:	a2 16       	cp	r10, r18
    3afe:	b3 06       	cpc	r11, r19
    3b00:	c4 06       	cpc	r12, r20
    3b02:	d5 06       	cpc	r13, r21
    3b04:	08 f1       	brcs	.+66     	; 0x3b48 <GetESR+0x484>
      // mean voltage at the capacitor is higher with current
      // sumvolt[0] is the sum of voltages at LowPin, caused by output resistance of Port
      // (RR680MI - R_L_VAL) is the port output resistance in 0.1 Ohm units.
      // we scale up the difference voltage with 10 to get 0.01 Ohm units of ESR
      cap.esr = ((sumvolt[1] - sumvolt[2]) * 10 * (unsigned long)(RR680MI - R_L_VAL)) / sumvolt[0];
    3b06:	80 e0       	ldi	r24, 0x00	; 0
    3b08:	90 e0       	ldi	r25, 0x00	; 0
    3b0a:	2a e0       	ldi	r18, 0x0A	; 10
    3b0c:	30 e0       	ldi	r19, 0x00	; 0
    3b0e:	40 e0       	ldi	r20, 0x00	; 0
    3b10:	50 e0       	ldi	r21, 0x00	; 0
    3b12:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
    3b16:	a6 01       	movw	r20, r12
    3b18:	95 01       	movw	r18, r10
    3b1a:	26 19       	sub	r18, r6
    3b1c:	37 09       	sbc	r19, r7
    3b1e:	48 09       	sbc	r20, r8
    3b20:	59 09       	sbc	r21, r9
    3b22:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
    3b26:	a8 01       	movw	r20, r16
    3b28:	97 01       	movw	r18, r14
    3b2a:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
    3b2e:	30 93 65 01 	sts	0x0165, r19
    3b32:	20 93 64 01 	sts	0x0164, r18
      DisplayValue(cap.esr,-2,LCD_CHAR_OMEGA,2);
    3b36:	b9 01       	movw	r22, r18
    3b38:	80 e0       	ldi	r24, 0x00	; 0
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	4e ef       	ldi	r20, 0xFE	; 254
    3b3e:	24 ef       	ldi	r18, 0xF4	; 244
    3b40:	02 e0       	ldi	r16, 0x02	; 2
    3b42:	0e 94 9e 02 	call	0x53c	; 0x53c <DisplayValue>
    3b46:	25 c0       	rjmp	.+74     	; 0x3b92 <GetESR+0x4ce>
   } else {
      jj = ((sumvolt[2] - sumvolt[1]) * 10 * (unsigned long)(RR680MI - R_L_VAL)) / sumvolt[0];
    3b48:	80 e0       	ldi	r24, 0x00	; 0
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	2a e0       	ldi	r18, 0x0A	; 10
    3b4e:	30 e0       	ldi	r19, 0x00	; 0
    3b50:	40 e0       	ldi	r20, 0x00	; 0
    3b52:	50 e0       	ldi	r21, 0x00	; 0
    3b54:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
    3b58:	a4 01       	movw	r20, r8
    3b5a:	93 01       	movw	r18, r6
    3b5c:	2a 19       	sub	r18, r10
    3b5e:	3b 09       	sbc	r19, r11
    3b60:	4c 09       	sbc	r20, r12
    3b62:	5d 09       	sbc	r21, r13
    3b64:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__mulsi3>
    3b68:	a8 01       	movw	r20, r16
    3b6a:	97 01       	movw	r18, r14
    3b6c:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__udivmodsi4>
    3b70:	12 2f       	mov	r17, r18
      lcd_data('0');
    3b72:	80 e3       	ldi	r24, 0x30	; 48
    3b74:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
      if ((jj < 100) && (jj > 0)) {
    3b78:	81 2f       	mov	r24, r17
    3b7a:	81 50       	subi	r24, 0x01	; 1
    3b7c:	83 36       	cpi	r24, 0x63	; 99
    3b7e:	48 f4       	brcc	.+18     	; 0x3b92 <GetESR+0x4ce>
         lcd_data('?');			// mark ESR zero correction
    3b80:	8f e3       	ldi	r24, 0x3F	; 63
    3b82:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
         esr0 -= jj;			// correct ESR_ZERO by negative resistance
    3b86:	62 2d       	mov	r22, r2
    3b88:	61 1b       	sub	r22, r17
         eeprom_write_byte((uint8_t *)(&EE_ESR_ZERO), (int8_t)esr0);       // fix new zero offset 
    3b8a:	80 ec       	ldi	r24, 0xC0	; 192
    3b8c:	91 e0       	ldi	r25, 0x01	; 1
    3b8e:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <__eewr_byte_m168>
//   lcd_line3();
//   DisplayValue(jj,0,' ',4);	// correction for ESR_ZERO
//   DisplayValue(1000+esr0,0,' ',4);	// new ESR_ZERO
#endif
  return;
}
    3b92:	60 96       	adiw	r28, 0x10	; 16
    3b94:	0f b6       	in	r0, 0x3f	; 63
    3b96:	f8 94       	cli
    3b98:	de bf       	out	0x3e, r29	; 62
    3b9a:	0f be       	out	0x3f, r0	; 63
    3b9c:	cd bf       	out	0x3d, r28	; 61
    3b9e:	cf 91       	pop	r28
    3ba0:	df 91       	pop	r29
    3ba2:	1f 91       	pop	r17
    3ba4:	0f 91       	pop	r16
    3ba6:	ff 90       	pop	r15
    3ba8:	ef 90       	pop	r14
    3baa:	df 90       	pop	r13
    3bac:	cf 90       	pop	r12
    3bae:	bf 90       	pop	r11
    3bb0:	af 90       	pop	r10
    3bb2:	9f 90       	pop	r9
    3bb4:	8f 90       	pop	r8
    3bb6:	7f 90       	pop	r7
    3bb8:	6f 90       	pop	r6
    3bba:	5f 90       	pop	r5
    3bbc:	4f 90       	pop	r4
    3bbe:	3f 90       	pop	r3
    3bc0:	2f 90       	pop	r2
    3bc2:	08 95       	ret

00003bc4 <__mulsi3>:
    3bc4:	62 9f       	mul	r22, r18
    3bc6:	d0 01       	movw	r26, r0
    3bc8:	73 9f       	mul	r23, r19
    3bca:	f0 01       	movw	r30, r0
    3bcc:	82 9f       	mul	r24, r18
    3bce:	e0 0d       	add	r30, r0
    3bd0:	f1 1d       	adc	r31, r1
    3bd2:	64 9f       	mul	r22, r20
    3bd4:	e0 0d       	add	r30, r0
    3bd6:	f1 1d       	adc	r31, r1
    3bd8:	92 9f       	mul	r25, r18
    3bda:	f0 0d       	add	r31, r0
    3bdc:	83 9f       	mul	r24, r19
    3bde:	f0 0d       	add	r31, r0
    3be0:	74 9f       	mul	r23, r20
    3be2:	f0 0d       	add	r31, r0
    3be4:	65 9f       	mul	r22, r21
    3be6:	f0 0d       	add	r31, r0
    3be8:	99 27       	eor	r25, r25
    3bea:	72 9f       	mul	r23, r18
    3bec:	b0 0d       	add	r27, r0
    3bee:	e1 1d       	adc	r30, r1
    3bf0:	f9 1f       	adc	r31, r25
    3bf2:	63 9f       	mul	r22, r19
    3bf4:	b0 0d       	add	r27, r0
    3bf6:	e1 1d       	adc	r30, r1
    3bf8:	f9 1f       	adc	r31, r25
    3bfa:	bd 01       	movw	r22, r26
    3bfc:	cf 01       	movw	r24, r30
    3bfe:	11 24       	eor	r1, r1
    3c00:	08 95       	ret

00003c02 <__udivmodqi4>:
    3c02:	99 1b       	sub	r25, r25
    3c04:	79 e0       	ldi	r23, 0x09	; 9
    3c06:	04 c0       	rjmp	.+8      	; 0x3c10 <__udivmodqi4_ep>

00003c08 <__udivmodqi4_loop>:
    3c08:	99 1f       	adc	r25, r25
    3c0a:	96 17       	cp	r25, r22
    3c0c:	08 f0       	brcs	.+2      	; 0x3c10 <__udivmodqi4_ep>
    3c0e:	96 1b       	sub	r25, r22

00003c10 <__udivmodqi4_ep>:
    3c10:	88 1f       	adc	r24, r24
    3c12:	7a 95       	dec	r23
    3c14:	c9 f7       	brne	.-14     	; 0x3c08 <__udivmodqi4_loop>
    3c16:	80 95       	com	r24
    3c18:	08 95       	ret

00003c1a <__udivmodhi4>:
    3c1a:	aa 1b       	sub	r26, r26
    3c1c:	bb 1b       	sub	r27, r27
    3c1e:	51 e1       	ldi	r21, 0x11	; 17
    3c20:	07 c0       	rjmp	.+14     	; 0x3c30 <__udivmodhi4_ep>

00003c22 <__udivmodhi4_loop>:
    3c22:	aa 1f       	adc	r26, r26
    3c24:	bb 1f       	adc	r27, r27
    3c26:	a6 17       	cp	r26, r22
    3c28:	b7 07       	cpc	r27, r23
    3c2a:	10 f0       	brcs	.+4      	; 0x3c30 <__udivmodhi4_ep>
    3c2c:	a6 1b       	sub	r26, r22
    3c2e:	b7 0b       	sbc	r27, r23

00003c30 <__udivmodhi4_ep>:
    3c30:	88 1f       	adc	r24, r24
    3c32:	99 1f       	adc	r25, r25
    3c34:	5a 95       	dec	r21
    3c36:	a9 f7       	brne	.-22     	; 0x3c22 <__udivmodhi4_loop>
    3c38:	80 95       	com	r24
    3c3a:	90 95       	com	r25
    3c3c:	bc 01       	movw	r22, r24
    3c3e:	cd 01       	movw	r24, r26
    3c40:	08 95       	ret

00003c42 <__udivmodsi4>:
    3c42:	a1 e2       	ldi	r26, 0x21	; 33
    3c44:	1a 2e       	mov	r1, r26
    3c46:	aa 1b       	sub	r26, r26
    3c48:	bb 1b       	sub	r27, r27
    3c4a:	fd 01       	movw	r30, r26
    3c4c:	0d c0       	rjmp	.+26     	; 0x3c68 <__udivmodsi4_ep>

00003c4e <__udivmodsi4_loop>:
    3c4e:	aa 1f       	adc	r26, r26
    3c50:	bb 1f       	adc	r27, r27
    3c52:	ee 1f       	adc	r30, r30
    3c54:	ff 1f       	adc	r31, r31
    3c56:	a2 17       	cp	r26, r18
    3c58:	b3 07       	cpc	r27, r19
    3c5a:	e4 07       	cpc	r30, r20
    3c5c:	f5 07       	cpc	r31, r21
    3c5e:	20 f0       	brcs	.+8      	; 0x3c68 <__udivmodsi4_ep>
    3c60:	a2 1b       	sub	r26, r18
    3c62:	b3 0b       	sbc	r27, r19
    3c64:	e4 0b       	sbc	r30, r20
    3c66:	f5 0b       	sbc	r31, r21

00003c68 <__udivmodsi4_ep>:
    3c68:	66 1f       	adc	r22, r22
    3c6a:	77 1f       	adc	r23, r23
    3c6c:	88 1f       	adc	r24, r24
    3c6e:	99 1f       	adc	r25, r25
    3c70:	1a 94       	dec	r1
    3c72:	69 f7       	brne	.-38     	; 0x3c4e <__udivmodsi4_loop>
    3c74:	60 95       	com	r22
    3c76:	70 95       	com	r23
    3c78:	80 95       	com	r24
    3c7a:	90 95       	com	r25
    3c7c:	9b 01       	movw	r18, r22
    3c7e:	ac 01       	movw	r20, r24
    3c80:	bd 01       	movw	r22, r26
    3c82:	cf 01       	movw	r24, r30
    3c84:	08 95       	ret

00003c86 <__divmodsi4>:
    3c86:	97 fb       	bst	r25, 7
    3c88:	09 2e       	mov	r0, r25
    3c8a:	05 26       	eor	r0, r21
    3c8c:	0e d0       	rcall	.+28     	; 0x3caa <__divmodsi4_neg1>
    3c8e:	57 fd       	sbrc	r21, 7
    3c90:	04 d0       	rcall	.+8      	; 0x3c9a <__divmodsi4_neg2>
    3c92:	d7 df       	rcall	.-82     	; 0x3c42 <__udivmodsi4>
    3c94:	0a d0       	rcall	.+20     	; 0x3caa <__divmodsi4_neg1>
    3c96:	00 1c       	adc	r0, r0
    3c98:	38 f4       	brcc	.+14     	; 0x3ca8 <__divmodsi4_exit>

00003c9a <__divmodsi4_neg2>:
    3c9a:	50 95       	com	r21
    3c9c:	40 95       	com	r20
    3c9e:	30 95       	com	r19
    3ca0:	21 95       	neg	r18
    3ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ca4:	4f 4f       	sbci	r20, 0xFF	; 255
    3ca6:	5f 4f       	sbci	r21, 0xFF	; 255

00003ca8 <__divmodsi4_exit>:
    3ca8:	08 95       	ret

00003caa <__divmodsi4_neg1>:
    3caa:	f6 f7       	brtc	.-4      	; 0x3ca8 <__divmodsi4_exit>
    3cac:	90 95       	com	r25
    3cae:	80 95       	com	r24
    3cb0:	70 95       	com	r23
    3cb2:	61 95       	neg	r22
    3cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    3cb6:	8f 4f       	sbci	r24, 0xFF	; 255
    3cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    3cba:	08 95       	ret

00003cbc <itoa>:
    3cbc:	fb 01       	movw	r30, r22
    3cbe:	9f 01       	movw	r18, r30
    3cc0:	e8 94       	clt
    3cc2:	42 30       	cpi	r20, 0x02	; 2
    3cc4:	c4 f0       	brlt	.+48     	; 0x3cf6 <itoa+0x3a>
    3cc6:	45 32       	cpi	r20, 0x25	; 37
    3cc8:	b4 f4       	brge	.+44     	; 0x3cf6 <itoa+0x3a>
    3cca:	4a 30       	cpi	r20, 0x0A	; 10
    3ccc:	29 f4       	brne	.+10     	; 0x3cd8 <itoa+0x1c>
    3cce:	97 fb       	bst	r25, 7
    3cd0:	1e f4       	brtc	.+6      	; 0x3cd8 <itoa+0x1c>
    3cd2:	90 95       	com	r25
    3cd4:	81 95       	neg	r24
    3cd6:	9f 4f       	sbci	r25, 0xFF	; 255
    3cd8:	64 2f       	mov	r22, r20
    3cda:	77 27       	eor	r23, r23
    3cdc:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <__udivmodhi4>
    3ce0:	80 5d       	subi	r24, 0xD0	; 208
    3ce2:	8a 33       	cpi	r24, 0x3A	; 58
    3ce4:	0c f0       	brlt	.+2      	; 0x3ce8 <itoa+0x2c>
    3ce6:	89 5d       	subi	r24, 0xD9	; 217
    3ce8:	81 93       	st	Z+, r24
    3cea:	cb 01       	movw	r24, r22
    3cec:	00 97       	sbiw	r24, 0x00	; 0
    3cee:	a1 f7       	brne	.-24     	; 0x3cd8 <itoa+0x1c>
    3cf0:	16 f4       	brtc	.+4      	; 0x3cf6 <itoa+0x3a>
    3cf2:	5d e2       	ldi	r21, 0x2D	; 45
    3cf4:	51 93       	st	Z+, r21
    3cf6:	10 82       	st	Z, r1
    3cf8:	c9 01       	movw	r24, r18
    3cfa:	0c 94 b6 1e 	jmp	0x3d6c	; 0x3d6c <strrev>

00003cfe <utoa>:
    3cfe:	fb 01       	movw	r30, r22
    3d00:	9f 01       	movw	r18, r30
    3d02:	42 30       	cpi	r20, 0x02	; 2
    3d04:	74 f0       	brlt	.+28     	; 0x3d22 <utoa+0x24>
    3d06:	45 32       	cpi	r20, 0x25	; 37
    3d08:	64 f4       	brge	.+24     	; 0x3d22 <utoa+0x24>
    3d0a:	64 2f       	mov	r22, r20
    3d0c:	77 27       	eor	r23, r23
    3d0e:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <__udivmodhi4>
    3d12:	80 5d       	subi	r24, 0xD0	; 208
    3d14:	8a 33       	cpi	r24, 0x3A	; 58
    3d16:	0c f0       	brlt	.+2      	; 0x3d1a <utoa+0x1c>
    3d18:	89 5d       	subi	r24, 0xD9	; 217
    3d1a:	81 93       	st	Z+, r24
    3d1c:	cb 01       	movw	r24, r22
    3d1e:	00 97       	sbiw	r24, 0x00	; 0
    3d20:	a1 f7       	brne	.-24     	; 0x3d0a <utoa+0xc>
    3d22:	10 82       	st	Z, r1
    3d24:	c9 01       	movw	r24, r18
    3d26:	0c 94 b6 1e 	jmp	0x3d6c	; 0x3d6c <strrev>

00003d2a <__eerd_byte_m168>:
    3d2a:	f9 99       	sbic	0x1f, 1	; 31
    3d2c:	fe cf       	rjmp	.-4      	; 0x3d2a <__eerd_byte_m168>
    3d2e:	92 bd       	out	0x22, r25	; 34
    3d30:	81 bd       	out	0x21, r24	; 33
    3d32:	f8 9a       	sbi	0x1f, 0	; 31
    3d34:	99 27       	eor	r25, r25
    3d36:	80 b5       	in	r24, 0x20	; 32
    3d38:	08 95       	ret

00003d3a <__eerd_word_m168>:
    3d3a:	a8 e1       	ldi	r26, 0x18	; 24
    3d3c:	b0 e0       	ldi	r27, 0x00	; 0
    3d3e:	42 e0       	ldi	r20, 0x02	; 2
    3d40:	50 e0       	ldi	r21, 0x00	; 0
    3d42:	0c 94 c8 1e 	jmp	0x3d90	; 0x3d90 <__eerd_blraw_m168>

00003d46 <__eewr_byte_m168>:
    3d46:	26 2f       	mov	r18, r22

00003d48 <__eewr_r18_m168>:
    3d48:	f9 99       	sbic	0x1f, 1	; 31
    3d4a:	fe cf       	rjmp	.-4      	; 0x3d48 <__eewr_r18_m168>
    3d4c:	1f ba       	out	0x1f, r1	; 31
    3d4e:	92 bd       	out	0x22, r25	; 34
    3d50:	81 bd       	out	0x21, r24	; 33
    3d52:	20 bd       	out	0x20, r18	; 32
    3d54:	0f b6       	in	r0, 0x3f	; 63
    3d56:	f8 94       	cli
    3d58:	fa 9a       	sbi	0x1f, 2	; 31
    3d5a:	f9 9a       	sbi	0x1f, 1	; 31
    3d5c:	0f be       	out	0x3f, r0	; 63
    3d5e:	01 96       	adiw	r24, 0x01	; 1
    3d60:	08 95       	ret

00003d62 <__eewr_word_m168>:
    3d62:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <__eewr_byte_m168>
    3d66:	27 2f       	mov	r18, r23
    3d68:	0c 94 a4 1e 	jmp	0x3d48	; 0x3d48 <__eewr_r18_m168>

00003d6c <strrev>:
    3d6c:	dc 01       	movw	r26, r24
    3d6e:	fc 01       	movw	r30, r24
    3d70:	67 2f       	mov	r22, r23
    3d72:	71 91       	ld	r23, Z+
    3d74:	77 23       	and	r23, r23
    3d76:	e1 f7       	brne	.-8      	; 0x3d70 <strrev+0x4>
    3d78:	32 97       	sbiw	r30, 0x02	; 2
    3d7a:	04 c0       	rjmp	.+8      	; 0x3d84 <strrev+0x18>
    3d7c:	7c 91       	ld	r23, X
    3d7e:	6d 93       	st	X+, r22
    3d80:	70 83       	st	Z, r23
    3d82:	62 91       	ld	r22, -Z
    3d84:	ae 17       	cp	r26, r30
    3d86:	bf 07       	cpc	r27, r31
    3d88:	c8 f3       	brcs	.-14     	; 0x3d7c <strrev+0x10>
    3d8a:	08 95       	ret

00003d8c <__eerd_block_m168>:
    3d8c:	dc 01       	movw	r26, r24
    3d8e:	cb 01       	movw	r24, r22

00003d90 <__eerd_blraw_m168>:
    3d90:	fc 01       	movw	r30, r24
    3d92:	f9 99       	sbic	0x1f, 1	; 31
    3d94:	fe cf       	rjmp	.-4      	; 0x3d92 <__eerd_blraw_m168+0x2>
    3d96:	06 c0       	rjmp	.+12     	; 0x3da4 <__eerd_blraw_m168+0x14>
    3d98:	f2 bd       	out	0x22, r31	; 34
    3d9a:	e1 bd       	out	0x21, r30	; 33
    3d9c:	f8 9a       	sbi	0x1f, 0	; 31
    3d9e:	31 96       	adiw	r30, 0x01	; 1
    3da0:	00 b4       	in	r0, 0x20	; 32
    3da2:	0d 92       	st	X+, r0
    3da4:	41 50       	subi	r20, 0x01	; 1
    3da6:	50 40       	sbci	r21, 0x00	; 0
    3da8:	b8 f7       	brcc	.-18     	; 0x3d98 <__eerd_blraw_m168+0x8>
    3daa:	08 95       	ret

00003dac <_exit>:
    3dac:	f8 94       	cli

00003dae <__stop_program>:
    3dae:	ff cf       	rjmp	.-2      	; 0x3dae <__stop_program>
