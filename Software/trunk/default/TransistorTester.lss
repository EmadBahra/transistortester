
TransistorTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000351c  000035d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000351c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007d  00800102  00800102  000035d2  2**0
                  ALLOC
  3 .eeprom       00000266  00810000  00810000  000035d2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         00000dbc  00000000  00000000  00003838  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001d2  00000000  00000000  000045f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000040  00000000  00000000  000047c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000063c  00000000  00000000  00004806  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001bd5  00000000  00000000  00004e42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000379  00000000  00000000  00006a17  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002cb7  00000000  00000000  00006d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000001e0  00000000  00000000  00009a48  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000754  00000000  00000000  00009c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000010f9  00000000  00000000  0000a37c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00000093  00000000  00000000  0000b475  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e1       	ldi	r30, 0x1C	; 28
      7c:	f5 e3       	ldi	r31, 0x35	; 53
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 30       	cpi	r26, 0x02	; 2
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a2 e0       	ldi	r26, 0x02	; 2
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 37       	cpi	r26, 0x7F	; 127
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 c3 13 	call	0x2786	; 0x2786 <main>
      9e:	0c 94 8c 1a 	jmp	0x3518	; 0x3518 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_enable>:
  LCD_PORT &= 0xF0;
}

// genertes the Enable-Puls
void lcd_enable(void) {
   LCD_PORT |= (1<<LCD_EN1);
      a6:	5d 9a       	sbi	0x0b, 5	; 11
   wait10us();			// short break 
      a8:	0e 94 1c 19 	call	0x3238	; 0x3238 <wait10us>
   // if problems occure, set the wait time to the value of datasheet of your display
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN1);
      ac:	5d 98       	cbi	0x0b, 5	; 11
}
      ae:	08 95       	ret

000000b0 <lcd_send>:
	}
#endif
}

//output to  LCD; 4-Bit-Modus
void lcd_send(unsigned char data) {
      b0:	df 93       	push	r29
      b2:	cf 93       	push	r28
      b4:	0f 92       	push	r0
      b6:	cd b7       	in	r28, 0x3d	; 61
      b8:	de b7       	in	r29, 0x3e	; 62
   // set upper Nibble
  LCD_PORT = (LCD_PORT & 0xF0) | ((data >> 4) & 0x0F);
      ba:	2b b1       	in	r18, 0x0b	; 11
      bc:	98 2f       	mov	r25, r24
      be:	92 95       	swap	r25
      c0:	9f 70       	andi	r25, 0x0F	; 15
      c2:	20 7f       	andi	r18, 0xF0	; 240
      c4:	92 2b       	or	r25, r18
      c6:	9b b9       	out	0x0b, r25	; 11
#if F_CPU < 2000000
  _delay_us(5);
#else
  wait5us();
      c8:	89 83       	std	Y+1, r24	; 0x01
      ca:	0e 94 1d 19 	call	0x323a	; 0x323a <wait5us>
#endif
  lcd_enable();
      ce:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_enable>
   // set lower Nibble 
  LCD_PORT = (LCD_PORT & 0xF0) | (data & 0x0F);
      d2:	9b b1       	in	r25, 0x0b	; 11
      d4:	89 81       	ldd	r24, Y+1	; 0x01
      d6:	8f 70       	andi	r24, 0x0F	; 15
      d8:	90 7f       	andi	r25, 0xF0	; 240
      da:	89 2b       	or	r24, r25
      dc:	8b b9       	out	0x0b, r24	; 11
#if F_CPU < 2000000
  _delay_us(5);
#else
  wait5us();
      de:	0e 94 1d 19 	call	0x323a	; 0x323a <wait5us>
#endif
  lcd_enable();
      e2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_enable>
  wait50us();
      e6:	0e 94 18 19 	call	0x3230	; 0x3230 <wait50us>
  LCD_PORT &= 0xF0;
      ea:	8b b1       	in	r24, 0x0b	; 11
      ec:	80 7f       	andi	r24, 0xF0	; 240
      ee:	8b b9       	out	0x0b, r24	; 11
}
      f0:	0f 90       	pop	r0
      f2:	cf 91       	pop	r28
      f4:	df 91       	pop	r29
      f6:	08 95       	ret

000000f8 <lcd_data>:
void lcd_space(void) {
   lcd_data(' ');
}

// sends data byte to the LCD 
void lcd_data(unsigned char temp1) {
      f8:	1f 93       	push	r17
      fa:	18 2f       	mov	r17, r24
 LCD_PORT |= (1<<LCD_RS);        // set RS to 1 
      fc:	5c 9a       	sbi	0x0b, 4	; 11
 lcd_send(temp1);
      fe:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_send>
#ifdef WITH_UART
 switch(temp1) {
     102:	18 30       	cpi	r17, 0x08	; 8
     104:	48 f4       	brcc	.+18     	; 0x118 <lcd_data+0x20>
     106:	16 30       	cpi	r17, 0x06	; 6
     108:	d0 f4       	brcc	.+52     	; 0x13e <lcd_data+0x46>
     10a:	12 30       	cpi	r17, 0x02	; 2
     10c:	71 f0       	breq	.+28     	; 0x12a <lcd_data+0x32>
     10e:	13 30       	cpi	r17, 0x03	; 3
     110:	89 f0       	breq	.+34     	; 0x134 <lcd_data+0x3c>
     112:	11 30       	cpi	r17, 0x01	; 1
     114:	d1 f4       	brne	.+52     	; 0x14a <lcd_data+0x52>
     116:	07 c0       	rjmp	.+14     	; 0x126 <lcd_data+0x2e>
     118:	14 3e       	cpi	r17, 0xE4	; 228
     11a:	a9 f0       	breq	.+42     	; 0x146 <lcd_data+0x4e>
     11c:	14 3f       	cpi	r17, 0xF4	; 244
     11e:	c1 f0       	breq	.+48     	; 0x150 <lcd_data+0x58>
     120:	11 3e       	cpi	r17, 0xE1	; 225
     122:	99 f4       	brne	.+38     	; 0x14a <lcd_data+0x52>
     124:	0e c0       	rjmp	.+28     	; 0x142 <lcd_data+0x4a>
    case LCD_CHAR_DIODE1:
    	uart_putc('>');
     126:	8e e3       	ldi	r24, 0x3E	; 62
     128:	06 c0       	rjmp	.+12     	; 0x136 <lcd_data+0x3e>
    	uart_putc('|');
    	break;
    case LCD_CHAR_DIODE2:
    	uart_putc('|');
     12a:	8c e7       	ldi	r24, 0x7C	; 124
     12c:	0e 94 de 18 	call	0x31bc	; 0x31bc <uart_putc>
    	uart_putc('<');
     130:	8c e3       	ldi	r24, 0x3C	; 60
     132:	0c c0       	rjmp	.+24     	; 0x14c <lcd_data+0x54>
    	break;
    case LCD_CHAR_CAP:
    	uart_putc('|');
     134:	8c e7       	ldi	r24, 0x7C	; 124
     136:	0e 94 de 18 	call	0x31bc	; 0x31bc <uart_putc>
    	uart_putc('|');
     13a:	8c e7       	ldi	r24, 0x7C	; 124
     13c:	07 c0       	rjmp	.+14     	; 0x14c <lcd_data+0x54>
    	break;
    case LCD_CHAR_RESIS1:
    case LCD_CHAR_RESIS2:
    	uart_putc('R');
     13e:	82 e5       	ldi	r24, 0x52	; 82
     140:	05 c0       	rjmp	.+10     	; 0x14c <lcd_data+0x54>
    	break;
    case 225:	//ä
    	uart_putc('ä');
     142:	84 ee       	ldi	r24, 0xE4	; 228
     144:	03 c0       	rjmp	.+6      	; 0x14c <lcd_data+0x54>
    	break;
    case 228:	//µ
    	uart_putc('µ');
     146:	85 eb       	ldi	r24, 0xB5	; 181
     148:	01 c0       	rjmp	.+2      	; 0x14c <lcd_data+0x54>
    	break;
    case 244:	//Omega
    	break;
    default:
    	uart_putc(temp1);
     14a:	81 2f       	mov	r24, r17
     14c:	0e 94 de 18 	call	0x31bc	; 0x31bc <uart_putc>
 }
#endif
}
     150:	1f 91       	pop	r17
     152:	08 95       	ret

00000154 <lcd_space>:
   lcd_data(temp + '1');
}

// send space character to LCD
void lcd_space(void) {
   lcd_data(' ');
     154:	80 e2       	ldi	r24, 0x20	; 32
     156:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
}
     15a:	08 95       	ret

0000015c <lcd_testpin>:
 

// sends numeric character (Pin Number) to the LCD 
// from binary 0 we send ASCII 1 ....
void lcd_testpin(unsigned char temp) {
   lcd_data(temp + '1');
     15c:	8f 5c       	subi	r24, 0xCF	; 207
     15e:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
}
     162:	08 95       	ret

00000164 <uart_newline>:
}


#ifdef WITH_UART
void uart_newline(void) {
   uart_putc('\r');
     164:	8d e0       	ldi	r24, 0x0D	; 13
     166:	0e 94 de 18 	call	0x31bc	; 0x31bc <uart_putc>
   uart_putc('\n');
     16a:	8a e0       	ldi	r24, 0x0A	; 10
     16c:	0e 94 de 18 	call	0x31bc	; 0x31bc <uart_putc>
}
     170:	08 95       	ret

00000172 <lcd_command>:
#endif
}
 
// sends a command to the LCD
 
void lcd_command(unsigned char temp1) {
     172:	1f 93       	push	r17
     174:	18 2f       	mov	r17, r24
	LCD_PORT &= ~(1<<LCD_RS);        // set RS to 0 
     176:	5c 98       	cbi	0x0b, 4	; 11
	lcd_send(temp1);
     178:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_send>
#ifdef WITH_UART
	if((temp1 == 0x80) || (temp1 == 0xC0)) {
     17c:	10 38       	cpi	r17, 0x80	; 128
     17e:	11 f0       	breq	.+4      	; 0x184 <lcd_command+0x12>
     180:	10 3c       	cpi	r17, 0xC0	; 192
     182:	11 f4       	brne	.+4      	; 0x188 <lcd_command+0x16>
		uart_newline();
     184:	0e 94 b2 00 	call	0x164	; 0x164 <uart_newline>
	}
#endif
}
     188:	1f 91       	pop	r17
     18a:	08 95       	ret

0000018c <lcd_clear>:
}
 
// send the command to clear the display 
 
void lcd_clear(void) {
   lcd_command(CLEAR_DISPLAY);
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
   wait5ms();
     192:	0e 94 0e 19 	call	0x321c	; 0x321c <wait5ms>
#ifdef WITH_UART
   uart_newline();
     196:	0e 94 b2 00 	call	0x164	; 0x164 <uart_newline>
#endif
}
     19a:	08 95       	ret

0000019c <lcd_init>:
 
// Initialise: 
// Mustt be called first .
 
void lcd_init(void) {
   LCD_DDR = LCD_DDR | 0x0F | (1<<LCD_RS) | (1<<LCD_EN1);   // switch Port to output
     19c:	8a b1       	in	r24, 0x0a	; 10
     19e:	8f 63       	ori	r24, 0x3F	; 63
     1a0:	8a b9       	out	0x0a, r24	; 10
   // to initialise, send 3 times
          wait30ms();
     1a2:	0e 94 0b 19 	call	0x3216	; 0x3216 <wait30ms>
   LCD_PORT = (LCD_PORT & 0xF0 & ~(1<<LCD_RS)) | 0x03;
     1a6:	8b b1       	in	r24, 0x0b	; 11
     1a8:	80 7e       	andi	r24, 0xE0	; 224
     1aa:	83 60       	ori	r24, 0x03	; 3
     1ac:	8b b9       	out	0x0b, r24	; 11
   lcd_enable();
     1ae:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_enable>

   wait5ms();
     1b2:	0e 94 0e 19 	call	0x321c	; 0x321c <wait5ms>
   lcd_enable();
     1b6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_enable>

   wait1ms();
     1ba:	0e 94 12 19 	call	0x3224	; 0x3224 <wait1ms>
   lcd_enable();
     1be:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_enable>
   wait1ms();
     1c2:	0e 94 12 19 	call	0x3224	; 0x3224 <wait1ms>
   LCD_PORT = (LCD_PORT & 0xF0 & ~(1<<LCD_RS)) | 0x02;
     1c6:	8b b1       	in	r24, 0x0b	; 11
     1c8:	80 7e       	andi	r24, 0xE0	; 224
     1ca:	82 60       	ori	r24, 0x02	; 2
     1cc:	8b b9       	out	0x0b, r24	; 11
   wait1ms();
     1ce:	0e 94 12 19 	call	0x3224	; 0x3224 <wait1ms>
   lcd_enable();
     1d2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_enable>
   wait1ms();
     1d6:	0e 94 12 19 	call	0x3224	; 0x3224 <wait1ms>

   // 4Bit / 2 rows / 5x7
   lcd_command(CMD_SetIFOptions | 0x08);
     1da:	88 e2       	ldi	r24, 0x28	; 40
     1dc:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>

   // Display on / Cursor off / no Blinking
   lcd_command(CMD_SetDisplayAndCursor | 0x04);
     1e0:	8c e0       	ldi	r24, 0x0C	; 12
     1e2:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>

   // increment / no Scroll    
   lcd_command(CMD_SetEntryMode | 0x02);	
     1e6:	86 e0       	ldi	r24, 0x06	; 6
     1e8:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
   lcd_clear();
     1ec:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clear>
}
     1f0:	08 95       	ret

000001f2 <lcd_string>:
#endif
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
     1f2:	ef 92       	push	r14
     1f4:	ff 92       	push	r15
     1f6:	cf 93       	push	r28
     1f8:	df 93       	push	r29
     1fa:	e8 2e       	mov	r14, r24
     1fc:	e7 01       	movw	r28, r14
     1fe:	7e 01       	movw	r14, r28
     200:	f9 2e       	mov	r15, r25
     202:	e7 01       	movw	r28, r14
    while(*data) {
     204:	02 c0       	rjmp	.+4      	; 0x20a <lcd_string+0x18>
        lcd_data(*data);
     206:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
    while(*data) {
     20a:	89 91       	ld	r24, Y+
     20c:	88 23       	and	r24, r24
     20e:	d9 f7       	brne	.-10     	; 0x206 <lcd_string+0x14>
        lcd_data(*data);
        data++;
    }
}
     210:	df 91       	pop	r29
     212:	cf 91       	pop	r28
     214:	ff 90       	pop	r15
     216:	ef 90       	pop	r14
     218:	08 95       	ret

0000021a <lcd_pgm_string>:

#ifdef AUTO_CAL
//Load string from PGM  and send to LCD 
void lcd_pgm_string(const unsigned char *data) {
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = pgm_read_byte(data);
     220:	fe 01       	movw	r30, r28
     222:	84 91       	lpm	r24, Z+
      if((cc==0) || (cc==128)) {
     224:	88 23       	and	r24, r24
     226:	31 f0       	breq	.+12     	; 0x234 <lcd_pgm_string+0x1a>
     228:	80 38       	cpi	r24, 0x80	; 128
     22a:	21 f0       	breq	.+8      	; 0x234 <lcd_pgm_string+0x1a>
         return;
      }
      lcd_data(cc);
     22c:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
      data++;
     230:	21 96       	adiw	r28, 0x01	; 1
   }
     232:	f6 cf       	rjmp	.-20     	; 0x220 <lcd_pgm_string+0x6>
}
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	08 95       	ret

0000023a <lcd_fix_string>:
#endif

//Load string from PGM or EEprom and send to LCD 
void lcd_fix_string(const unsigned char *data) {
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = MEM_read_byte(data);
     240:	ce 01       	movw	r24, r28
     242:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__eerd_byte_m328p>
      if((cc==0) || (cc==128)) {
     246:	88 23       	and	r24, r24
     248:	31 f0       	breq	.+12     	; 0x256 <lcd_fix_string+0x1c>
     24a:	80 38       	cpi	r24, 0x80	; 128
     24c:	21 f0       	breq	.+8      	; 0x256 <lcd_fix_string+0x1c>
         return;
      }
      lcd_data(cc);
     24e:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
      data++;
     252:	21 96       	adiw	r28, 0x01	; 1
   }
     254:	f5 cf       	rjmp	.-22     	; 0x240 <lcd_fix_string+0x6>
}
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	08 95       	ret

0000025c <lcd_fix_customchar>:

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	8c 01       	movw	r16, r24
     266:	c0 e0       	ldi	r28, 0x00	; 0
     268:	d0 e0       	ldi	r29, 0x00	; 0
    for(uint8_t i=0;i<8;i++) {
        lcd_data(MEM_read_byte(chardata));
     26a:	c8 01       	movw	r24, r16
     26c:	8c 0f       	add	r24, r28
     26e:	9d 1f       	adc	r25, r29
     270:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__eerd_byte_m328p>
     274:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
     278:	21 96       	adiw	r28, 0x01	; 1
   }
}

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
    for(uint8_t i=0;i<8;i++) {
     27a:	c8 30       	cpi	r28, 0x08	; 8
     27c:	d1 05       	cpc	r29, r1
     27e:	a9 f7       	brne	.-22     	; 0x26a <lcd_fix_customchar+0xe>
        lcd_data(MEM_read_byte(chardata));
        chardata++;
    }
}
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	1f 91       	pop	r17
     286:	0f 91       	pop	r16
     288:	08 95       	ret

0000028a <ChargePin10ms>:
#endif

//******************************************************************
#include "CheckPins.c"

void ChargePin10ms(uint8_t PinToCharge, uint8_t ChargeDirection) {
     28a:	df 93       	push	r29
     28c:	cf 93       	push	r28
     28e:	0f 92       	push	r0
     290:	cd b7       	in	r28, 0x3d	; 61
     292:	de b7       	in	r29, 0x3e	; 62
   //Will be used by discharge of MOSFET Gates or to load big capacities.
   //Parameters:
   //PinToCharge: specifies the pin as mask for R-Port
   //ChargeDirection: 0 = switch to GND (N-Kanal-FET), 1= switch to VCC(P-Kanal-FET)

   if(ChargeDirection&1) {
     294:	60 ff       	sbrs	r22, 0
     296:	03 c0       	rjmp	.+6      	; 0x29e <ChargePin10ms+0x14>
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
     298:	95 b1       	in	r25, 0x05	; 5
     29a:	98 2b       	or	r25, r24
     29c:	04 c0       	rjmp	.+8      	; 0x2a6 <ChargePin10ms+0x1c>
   } else {
      R_PORT &= ~PinToCharge; // or 0 (GND)
     29e:	25 b1       	in	r18, 0x05	; 5
     2a0:	98 2f       	mov	r25, r24
     2a2:	90 95       	com	r25
     2a4:	92 23       	and	r25, r18
     2a6:	95 b9       	out	0x05, r25	; 5
   }
   R_DDR |= PinToCharge;		//switch Pin to output, across R to GND or VCC
     2a8:	94 b1       	in	r25, 0x04	; 4
     2aa:	98 2b       	or	r25, r24
     2ac:	94 b9       	out	0x04, r25	; 4
   wait10ms();
     2ae:	89 83       	std	Y+1, r24	; 0x01
     2b0:	0e 94 0d 19 	call	0x321a	; 0x321a <wait10ms>
   // switch back Input, no current
   R_DDR &= ~PinToCharge;	// switch back to input
     2b4:	94 b1       	in	r25, 0x04	; 4
     2b6:	89 81       	ldd	r24, Y+1	; 0x01
     2b8:	80 95       	com	r24
     2ba:	98 23       	and	r25, r24
     2bc:	94 b9       	out	0x04, r25	; 4
   R_PORT &= ~PinToCharge;	// no Pull up
     2be:	95 b1       	in	r25, 0x05	; 5
     2c0:	98 23       	and	r25, r24
     2c2:	95 b9       	out	0x05, r25	; 5
}
     2c4:	0f 90       	pop	r0
     2c6:	cf 91       	pop	r28
     2c8:	df 91       	pop	r29
     2ca:	08 95       	ret

000002cc <CheckPins>:
//******************************************************************
void CheckPins(uint8_t HighPin, uint8_t LowPin, uint8_t TristatePin)
  {
     2cc:	2f 92       	push	r2
     2ce:	3f 92       	push	r3
     2d0:	4f 92       	push	r4
     2d2:	5f 92       	push	r5
     2d4:	6f 92       	push	r6
     2d6:	7f 92       	push	r7
     2d8:	8f 92       	push	r8
     2da:	9f 92       	push	r9
     2dc:	af 92       	push	r10
     2de:	bf 92       	push	r11
     2e0:	cf 92       	push	r12
     2e2:	df 92       	push	r13
     2e4:	ef 92       	push	r14
     2e6:	ff 92       	push	r15
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
     2ec:	df 93       	push	r29
     2ee:	cf 93       	push	r28
     2f0:	cd b7       	in	r28, 0x3d	; 61
     2f2:	de b7       	in	r29, 0x3e	; 62
     2f4:	66 97       	sbiw	r28, 0x16	; 22
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	f8 94       	cli
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	cd bf       	out	0x3d, r28	; 61
     300:	18 2f       	mov	r17, r24
     302:	06 2f       	mov	r16, r22
     304:	49 83       	std	Y+1, r20	; 0x01
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
     306:	a8 95       	wdr
//  #define RR680MI resis680mi
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = MEM_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
     308:	a6 2e       	mov	r10, r22
     30a:	bb 24       	eor	r11, r11
     30c:	c5 01       	movw	r24, r10
     30e:	85 5b       	subi	r24, 0xB5	; 181
     310:	9d 4f       	sbci	r25, 0xFD	; 253
     312:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__eerd_byte_m328p>
     316:	8c 83       	std	Y+4, r24	; 0x04
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
  TriPinRL = MEM_read_byte(&PinRLtab[TristatePin]);	// intruction for TristatePin R_L
     318:	29 81       	ldd	r18, Y+1	; 0x01
     31a:	82 2f       	mov	r24, r18
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	85 5b       	subi	r24, 0xB5	; 181
     320:	9d 4f       	sbci	r25, 0xFD	; 253
     322:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__eerd_byte_m328p>
     326:	8a 83       	std	Y+2, r24	; 0x02
  TriPinRH = TriPinRL + TriPinRL;			// intruction for TristatePin R_H
     328:	d8 2e       	mov	r13, r24
     32a:	dd 0c       	add	r13, r13
  HiPinRL = MEM_read_byte(&PinRLtab[HighPin]);		// intruction for HighPin R_L
     32c:	e1 2e       	mov	r14, r17
     32e:	ff 24       	eor	r15, r15
     330:	c7 01       	movw	r24, r14
     332:	85 5b       	subi	r24, 0xB5	; 181
     334:	9d 4f       	sbci	r25, 0xFD	; 253
     336:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__eerd_byte_m328p>
     33a:	c8 2e       	mov	r12, r24
  HiPinRH = HiPinRL + HiPinRL;				// intruction for HighPin R_H
     33c:	38 2f       	mov	r19, r24
     33e:	33 0f       	add	r19, r19
     340:	3a 87       	std	Y+10, r19	; 0x0a

  HiADCp = MEM_read_byte(&PinADCtab[HighPin]);		// intruction for ADC High-Pin 
     342:	c7 01       	movw	r24, r14
     344:	82 5b       	subi	r24, 0xB2	; 178
     346:	9d 4f       	sbci	r25, 0xFD	; 253
     348:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__eerd_byte_m328p>
     34c:	8b 83       	std	Y+3, r24	; 0x03
  LoADCp = MEM_read_byte(&PinADCtab[LowPin]);		// intruction for ADC Low-Pin
     34e:	c5 01       	movw	r24, r10
     350:	82 5b       	subi	r24, 0xB2	; 178
     352:	9d 4f       	sbci	r25, 0xFD	; 253
     354:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__eerd_byte_m328p>
  HiADCm = HiADCp | TXD_MSK;
     358:	9b 81       	ldd	r25, Y+3	; 0x03
     35a:	98 60       	ori	r25, 0x08	; 8
     35c:	9b 83       	std	Y+3, r25	; 0x03
  HiADCp |= TXD_VAL;
  LoADCm = LoADCp | TXD_MSK;
     35e:	88 60       	ori	r24, 0x08	; 8
     360:	8d 83       	std	Y+5, r24	; 0x05
  LoADCp |= TXD_VAL;

  //setting of Pins 
  R_PORT = 0;				//resistor-Port outputs to 0
     362:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//Low-Pin to output and across R_L to GND
     364:	ac 81       	ldd	r26, Y+4	; 0x04
     366:	a4 b9       	out	0x04, r26	; 4
  ADC_DDR = HiADCm;		//High-Pin to output
     368:	97 b9       	out	0x07, r25	; 7
  ADC_PORT = HiADCp;		//High-Pin fix to Vcc
     36a:	98 b9       	out	0x08, r25	; 8
  //for some MOSFET the gate (TristatePin) must be discharged
  ChargePin10ms(TriPinRL,0);		//discharge for N-Kanal
     36c:	8a 81       	ldd	r24, Y+2	; 0x02
     36e:	60 e0       	ldi	r22, 0x00	; 0
     370:	0e 94 45 01 	call	0x28a	; 0x28a <ChargePin10ms>
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin 
     374:	80 2f       	mov	r24, r16
     376:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
     37a:	9c 87       	std	Y+12, r25	; 0x0c
     37c:	8b 87       	std	Y+11, r24	; 0x0b
  if(adc.lp_otr >= 977) {		//no current now? 
     37e:	b3 e0       	ldi	r27, 0x03	; 3
     380:	81 3d       	cpi	r24, 0xD1	; 209
     382:	9b 07       	cpc	r25, r27
     384:	48 f0       	brcs	.+18     	; 0x398 <CheckPins+0xcc>
     ChargePin10ms(TriPinRL,1);	 	//else: discharge for P-channel (Gate to VCC)
     386:	8a 81       	ldd	r24, Y+2	; 0x02
     388:	61 e0       	ldi	r22, 0x01	; 1
     38a:	0e 94 45 01 	call	0x28a	; 0x28a <ChargePin10ms>
     adc.lp_otr = ReadADC(LowPin);	//read voltage of Low-Pin again
     38e:	80 2f       	mov	r24, r16
     390:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
     394:	9c 87       	std	Y+12, r25	; 0x0c
     396:	8b 87       	std	Y+11, r24	; 0x0b
  lcd_line2();
  lcd_clear_line();
  lcd_line2();
#endif

  if(adc.lp_otr > 92) {  //there is some current without TristatePin current 
     398:	eb 85       	ldd	r30, Y+11	; 0x0b
     39a:	fc 85       	ldd	r31, Y+12	; 0x0c
     39c:	ed 35       	cpi	r30, 0x5D	; 93
     39e:	f1 05       	cpc	r31, r1
     3a0:	08 f4       	brcc	.+2      	; 0x3a4 <CheckPins+0xd8>
     3a2:	ac c0       	rjmp	.+344    	; 0x4fc <CheckPins+0x230>
     lcd_testpin(HighPin);
     lcd_space();
     wait1s();
#endif
     //Test if N-JFET or if self-conducting N-MOSFET
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
     3a4:	8c 81       	ldd	r24, Y+4	; 0x04
     3a6:	8d 29       	or	r24, r13
     3a8:	84 b9       	out	0x04, r24	; 4
     adc.lp1 = W20msReadADC(LowPin);	//measure voltage at the assumed Source 
     3aa:	80 2f       	mov	r24, r16
     3ac:	0e 94 25 19 	call	0x324a	; 0x324a <W20msReadADC>
     3b0:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     3b2:	89 81       	ldd	r24, Y+1	; 0x01
     3b4:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
     3b8:	7c 01       	movw	r14, r24
     R_PORT = TriPinRH;			//switch R_H for Tristate-Pin (probably Gate) to VCC
     3ba:	d5 b8       	out	0x05, r13	; 5
     adc.lp2 = W20msReadADC(LowPin);	//measure voltage at the assumed Source again
     3bc:	80 2f       	mov	r24, r16
     3be:	0e 94 25 19 	call	0x324a	; 0x324a <W20msReadADC>
     //If it is a self-conducting MOSFET or JFET, then must be: adc.lp2 > adc.lp1 
     if(adc.lp2>(adc.lp1+488)) {
     3c2:	95 01       	movw	r18, r10
     3c4:	28 51       	subi	r18, 0x18	; 24
     3c6:	3e 4f       	sbci	r19, 0xFE	; 254
     3c8:	28 17       	cp	r18, r24
     3ca:	39 07       	cpc	r19, r25
     3cc:	08 f0       	brcs	.+2      	; 0x3d0 <CheckPins+0x104>
     3ce:	41 c0       	rjmp	.+130    	; 0x452 <CheckPins+0x186>
        //measure voltage at the  Gate, differ between MOSFET and JFET
        ADC_PORT = TXD_VAL;
     3d0:	88 e0       	ldi	r24, 0x08	; 8
     3d2:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = LoADCm;	//Low-Pin fix to GND
     3d4:	fd 81       	ldd	r31, Y+5	; 0x05
     3d6:	f7 b9       	out	0x07, r31	; 7
        R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     3d8:	8d 2d       	mov	r24, r13
     3da:	8c 29       	or	r24, r12
     3dc:	84 b9       	out	0x04, r24	; 4
        R_PORT = TriPinRH | HiPinRL;	//switch R_L for High-Pin to VCC
     3de:	85 b9       	out	0x05, r24	; 5
        adc.lp2 = W20msReadADC(TristatePin); //read voltage of assumed Gate 
     3e0:	89 81       	ldd	r24, Y+1	; 0x01
     3e2:	0e 94 25 19 	call	0x324a	; 0x324a <W20msReadADC>
        if(adc.lp2>3911) {  //MOSFET
     3e6:	2f e0       	ldi	r18, 0x0F	; 15
     3e8:	88 34       	cpi	r24, 0x48	; 72
     3ea:	92 07       	cpc	r25, r18
     3ec:	28 f0       	brcs	.+10     	; 0x3f8 <CheckPins+0x12c>
           PartFound = PART_FET;	//N-Kanal-MOSFET
     3ee:	83 e0       	ldi	r24, 0x03	; 3
     3f0:	80 93 09 01 	sts	0x0109, r24
           PartMode = PART_MODE_N_D_MOS; //Depletion-MOSFET
     3f4:	84 e0       	ldi	r24, 0x04	; 4
     3f6:	04 c0       	rjmp	.+8      	; 0x400 <CheckPins+0x134>
        } else {  //JFET (pn-passage between Gate and Source is conducting )
           PartFound = PART_FET;	//N-Kanal-JFET
     3f8:	83 e0       	ldi	r24, 0x03	; 3
     3fa:	80 93 09 01 	sts	0x0109, r24
           PartMode = PART_MODE_N_JFET;
     3fe:	86 e0       	ldi	r24, 0x06	; 6
     400:	80 93 08 01 	sts	0x0108, r24
        }
//      if ((PartReady == 0) || (adc.lp1 > trans.uBE[0])) 
//      there is no way to find out the right Source / Drain
        trans.uBE[0] = adc.lp1;
     404:	b0 92 53 01 	sts	0x0153, r11
     408:	a0 92 52 01 	sts	0x0152, r10
        gthvoltage = adc.lp1 - adc.tp1;	//voltage GS (Source - Gate)
     40c:	c5 01       	movw	r24, r10
     40e:	8e 19       	sub	r24, r14
     410:	9f 09       	sbc	r25, r15
     412:	90 93 5f 01 	sts	0x015F, r25
     416:	80 93 5e 01 	sts	0x015E, r24
        trans.uBE[1] = (unsigned int)(((unsigned long)adc.lp1 * 1000) / RR680MI); // Id 0.01mA
     41a:	b5 01       	movw	r22, r10
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	28 ee       	ldi	r18, 0xE8	; 232
     422:	33 e0       	ldi	r19, 0x03	; 3
     424:	40 e0       	ldi	r20, 0x00	; 0
     426:	50 e0       	ldi	r21, 0x00	; 0
     428:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsi3>
     42c:	20 91 04 01 	lds	r18, 0x0104
     430:	30 91 05 01 	lds	r19, 0x0105
     434:	40 e0       	ldi	r20, 0x00	; 0
     436:	50 e0       	ldi	r21, 0x00	; 0
     438:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
     43c:	30 93 55 01 	sts	0x0155, r19
     440:	20 93 54 01 	sts	0x0154, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     444:	39 81       	ldd	r19, Y+1	; 0x01
     446:	30 93 56 01 	sts	0x0156, r19
        trans.c = HighPin;
     44a:	10 93 57 01 	sts	0x0157, r17
        trans.e = LowPin;
     44e:	00 93 58 01 	sts	0x0158, r16
     }

     ADC_PORT = TXD_VAL;		// direct outputs to GND
     452:	88 e0       	ldi	r24, 0x08	; 8
     454:	88 b9       	out	0x08, r24	; 8

     //Test, if P-JFET or if self-conducting P-MOSFET
     ADC_DDR = LoADCm;		//switch Low-Pin (assumed Drain) direct to GND,
     456:	8d 81       	ldd	r24, Y+5	; 0x05
     458:	87 b9       	out	0x07, r24	; 7
				//R_H for Tristate-Pin (assumed Gate) is already switched to VCC
     R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     45a:	8d 2d       	mov	r24, r13
     45c:	8c 29       	or	r24, r12
     45e:	84 b9       	out	0x04, r24	; 4
     R_PORT = TriPinRH | HiPinRL;	//High-Pin across R_L to Vcc
     460:	85 b9       	out	0x05, r24	; 5
     adc.hp1 = W20msReadADC(HighPin);	//measure voltage at assumed Source 
     462:	81 2f       	mov	r24, r17
     464:	0e 94 25 19 	call	0x324a	; 0x324a <W20msReadADC>
     468:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     46a:	89 81       	ldd	r24, Y+1	; 0x01
     46c:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
     470:	7c 01       	movw	r14, r24
     R_PORT = HiPinRL;			//switch R_H for Tristate-Pin (assumed Gate) to GND
     472:	c5 b8       	out	0x05, r12	; 5
     adc.hp2 = W20msReadADC(HighPin);	//read voltage at assumed Source again
     474:	81 2f       	mov	r24, r17
     476:	0e 94 25 19 	call	0x324a	; 0x324a <W20msReadADC>
     //if it is a self-conducting P_MOSFET or P-JFET , then must be:  adc.hp1 > adc.hp2 
     if(adc.hp1>(adc.hp2+488)) {
     47a:	88 51       	subi	r24, 0x18	; 24
     47c:	9e 4f       	sbci	r25, 0xFE	; 254
     47e:	8a 15       	cp	r24, r10
     480:	9b 05       	cpc	r25, r11
     482:	e0 f5       	brcc	.+120    	; 0x4fc <CheckPins+0x230>
        //read voltage at the Gate , to differ between MOSFET and JFET
        ADC_PORT = HiADCp;	//switch High-Pin directly to VCC
     484:	9b 81       	ldd	r25, Y+3	; 0x03
     486:	98 b9       	out	0x08, r25	; 8
        ADC_DDR = HiADCm;	//switch High-Pin to output
     488:	97 b9       	out	0x07, r25	; 7
        adc.tp2 = W20msReadADC(TristatePin); //read voltage at the assumed Gate 
     48a:	89 81       	ldd	r24, Y+1	; 0x01
     48c:	0e 94 25 19 	call	0x324a	; 0x324a <W20msReadADC>
        if(adc.tp2<977) { 		//MOSFET
     490:	a3 e0       	ldi	r26, 0x03	; 3
     492:	81 3d       	cpi	r24, 0xD1	; 209
     494:	9a 07       	cpc	r25, r26
     496:	28 f4       	brcc	.+10     	; 0x4a2 <CheckPins+0x1d6>
           PartFound = PART_FET;	//P-Kanal-MOSFET
     498:	83 e0       	ldi	r24, 0x03	; 3
     49a:	80 93 09 01 	sts	0x0109, r24
           PartMode = PART_MODE_P_D_MOS; //Depletion-MOSFET
     49e:	85 e0       	ldi	r24, 0x05	; 5
     4a0:	04 c0       	rjmp	.+8      	; 0x4aa <CheckPins+0x1de>
        } else { 			//JFET (pn-passage between Gate and Source is conducting)
           PartFound = PART_FET;	//P-Kanal-JFET
     4a2:	83 e0       	ldi	r24, 0x03	; 3
     4a4:	80 93 09 01 	sts	0x0109, r24
           PartMode = PART_MODE_P_JFET;
     4a8:	87 e0       	ldi	r24, 0x07	; 7
     4aa:	80 93 08 01 	sts	0x0108, r24
        }
        gthvoltage = adc.tp1 - adc.hp1;		//voltage GS (Gate - Source)
     4ae:	ea 18       	sub	r14, r10
     4b0:	fb 08       	sbc	r15, r11
     4b2:	f0 92 5f 01 	sts	0x015F, r15
     4b6:	e0 92 5e 01 	sts	0x015E, r14
        trans.uBE[1] = (unsigned int)(((unsigned long)(ADCconfig.U_AVCC - adc.hp1) * 1000) / RR680PL); // Id 0.01mA
     4ba:	60 91 40 01 	lds	r22, 0x0140
     4be:	70 91 41 01 	lds	r23, 0x0141
     4c2:	6a 19       	sub	r22, r10
     4c4:	7b 09       	sbc	r23, r11
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	28 ee       	ldi	r18, 0xE8	; 232
     4cc:	33 e0       	ldi	r19, 0x03	; 3
     4ce:	40 e0       	ldi	r20, 0x00	; 0
     4d0:	50 e0       	ldi	r21, 0x00	; 0
     4d2:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsi3>
     4d6:	20 91 0b 01 	lds	r18, 0x010B
     4da:	30 91 0c 01 	lds	r19, 0x010C
     4de:	40 e0       	ldi	r20, 0x00	; 0
     4e0:	50 e0       	ldi	r21, 0x00	; 0
     4e2:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
     4e6:	30 93 55 01 	sts	0x0155, r19
     4ea:	20 93 54 01 	sts	0x0154, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     4ee:	b9 81       	ldd	r27, Y+1	; 0x01
     4f0:	b0 93 56 01 	sts	0x0156, r27
        trans.c = LowPin;
     4f4:	00 93 57 01 	sts	0x0157, r16
        trans.e = HighPin;
     4f8:	10 93 58 01 	sts	0x0158, r17
  } // end component has current without TristatePin signal


#ifdef COMMON_COLLECTOR
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
     4fc:	88 e0       	ldi	r24, 0x08	; 8
     4fe:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;			// Collector direct to GND
     500:	ed 81       	ldd	r30, Y+5	; 0x05
     502:	e7 b9       	out	0x07, r30	; 7
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
     504:	c5 b8       	out	0x05, r12	; 5
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
     506:	fa 81       	ldd	r31, Y+2	; 0x02
     508:	fc 29       	or	r31, r12
     50a:	f9 8b       	std	Y+17, r31	; 0x11
     50c:	f4 b9       	out	0x04, r31	; 4
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     50e:	a0 90 40 01 	lds	r10, 0x0140
     512:	b0 90 41 01 	lds	r11, 0x0141
     516:	81 2f       	mov	r24, r17
     518:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
     51c:	7c 01       	movw	r14, r24
  adc.tp1 = ReadADC(TristatePin);	// voltage at the base resistor
     51e:	89 81       	ldd	r24, Y+1	; 0x01
     520:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
     524:	4c 01       	movw	r8, r24

  if (adc.tp1 < 10) {
     526:	8a 30       	cpi	r24, 0x0A	; 10
     528:	91 05       	cpc	r25, r1
     52a:	68 f5       	brcc	.+90     	; 0x586 <CheckPins+0x2ba>
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
     52c:	8d 2d       	mov	r24, r13
     52e:	8c 29       	or	r24, r12
     530:	84 b9       	out	0x04, r24	; 4
     adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);
     532:	a0 90 40 01 	lds	r10, 0x0140
     536:	b0 90 41 01 	lds	r11, 0x0141
     53a:	81 2f       	mov	r24, r17
     53c:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
     540:	a8 1a       	sub	r10, r24
     542:	b9 0a       	sbc	r11, r25
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
     54a:	4c 01       	movw	r8, r24
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     54c:	25 01       	movw	r4, r10
     54e:	66 24       	eor	r6, r6
     550:	77 24       	eor	r7, r7
     552:	20 91 0b 01 	lds	r18, 0x010B
     556:	30 91 0c 01 	lds	r19, 0x010C
     55a:	40 e0       	ldi	r20, 0x00	; 0
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	60 e6       	ldi	r22, 0x60	; 96
     560:	77 eb       	ldi	r23, 0xB7	; 183
     562:	87 e4       	ldi	r24, 0x47	; 71
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
     56a:	c3 01       	movw	r24, r6
     56c:	b2 01       	movw	r22, r4
     56e:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
     572:	94 01       	movw	r18, r8
     574:	40 e0       	ldi	r20, 0x00	; 0
     576:	50 e0       	ldi	r21, 0x00	; 0
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     578:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
     57c:	2e 83       	std	Y+6, r18	; 0x06
     57e:	3f 83       	std	Y+7, r19	; 0x07
     580:	48 87       	std	Y+8, r20	; 0x08
     582:	59 87       	std	Y+9, r21	; 0x09
     584:	0f c0       	rjmp	.+30     	; 0x5a4 <CheckPins+0x2d8>
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
  ADC_DDR = LoADCm;			// Collector direct to GND
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     586:	ae 18       	sub	r10, r14
     588:	bf 08       	sbc	r11, r15
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
 #else
     c_hfe = ((adc.hp1 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
  } else {
     c_hfe = (unsigned long)((adc.hp1 - adc.tp1) / adc.tp1);
     58a:	c5 01       	movw	r24, r10
     58c:	88 19       	sub	r24, r8
     58e:	99 09       	sbc	r25, r9
     590:	b4 01       	movw	r22, r8
     592:	0e 94 c3 19 	call	0x3386	; 0x3386 <__udivmodhi4>
     596:	cb 01       	movw	r24, r22
     598:	a0 e0       	ldi	r26, 0x00	; 0
     59a:	b0 e0       	ldi	r27, 0x00	; 0
     59c:	8e 83       	std	Y+6, r24	; 0x06
     59e:	9f 83       	std	Y+7, r25	; 0x07
     5a0:	a8 87       	std	Y+8, r26	; 0x08
     5a2:	b9 87       	std	Y+9, r27	; 0x09
  }
#endif

  //set Pins again for circuit with common Emitter PNP
  R_DDR = LoPinRL;		//switch R_L port for Low-Pin to output (GND)
     5a4:	9c 81       	ldd	r25, Y+4	; 0x04
     5a6:	94 b9       	out	0x04, r25	; 4
  R_PORT = 0;			//switch all resistor ports to GND
     5a8:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = HiADCm;		//switch High-Pin to output
     5aa:	ab 81       	ldd	r26, Y+3	; 0x03
     5ac:	a7 b9       	out	0x07, r26	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
     5ae:	a8 b9       	out	0x08, r26	; 8
  wait5ms();
     5b0:	0e 94 0e 19 	call	0x321c	; 0x321c <wait5ms>
  
  if(adc.lp_otr < 977) {
     5b4:	eb 85       	ldd	r30, Y+11	; 0x0b
     5b6:	fc 85       	ldd	r31, Y+12	; 0x0c
     5b8:	23 e0       	ldi	r18, 0x03	; 3
     5ba:	e1 3d       	cpi	r30, 0xD1	; 209
     5bc:	f2 07       	cpc	r31, r18
     5be:	08 f0       	brcs	.+2      	; 0x5c2 <CheckPins+0x2f6>
     5c0:	a3 c2       	rjmp	.+1350   	; 0xb08 <__stack+0x209>
     lcd_testpin(HighPin);
     lcd_space();
     wait1s();
#endif
     //Test to PNP
     R_DDR = LoPinRL | TriPinRL;	//switch R_L port for Tristate-Pin to output (GND), for Test of PNP
     5c2:	3a 81       	ldd	r19, Y+2	; 0x02
     5c4:	8c 81       	ldd	r24, Y+4	; 0x04
     5c6:	38 2b       	or	r19, r24
     5c8:	3d 87       	std	Y+13, r19	; 0x0d
     5ca:	34 b9       	out	0x04, r19	; 4
     adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin
     5cc:	80 2f       	mov	r24, r16
     5ce:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
     if(adc.lp1 > 3422) {
     5d2:	ad e0       	ldi	r26, 0x0D	; 13
     5d4:	8f 35       	cpi	r24, 0x5F	; 95
     5d6:	9a 07       	cpc	r25, r26
     5d8:	08 f4       	brcc	.+2      	; 0x5dc <CheckPins+0x310>
     5da:	de c0       	rjmp	.+444    	; 0x798 <CheckPins+0x4cc>
        //component has current => PNP-Transistor or equivalent
        //compute current amplification factor in both directions
        R_DDR = LoPinRL | TriPinRH;	//switch R_H port for Tristate-Pin (Base) to output (GND)
     5dc:	bc 81       	ldd	r27, Y+4	; 0x04
     5de:	bd 29       	or	r27, r13
     5e0:	ba 8b       	std	Y+18, r27	; 0x12
     5e2:	b4 b9       	out	0x04, r27	; 4

        adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin (assumed Collector)
     5e4:	80 2f       	mov	r24, r16
     5e6:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
     5ea:	1c 01       	movw	r2, r24
        adc.tp2 = ReadADC(TristatePin);	//measure voltage at TristatePin (Base) 
     5ec:	89 81       	ldd	r24, Y+1	; 0x01
     5ee:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
     5f2:	9d 8b       	std	Y+21, r25	; 0x15
     5f4:	8c 8b       	std	Y+20, r24	; 0x14
        //check, if Test is done before 
        if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     5f6:	80 91 09 01 	lds	r24, 0x0109
     5fa:	82 50       	subi	r24, 0x02	; 2
     5fc:	82 30       	cpi	r24, 0x02	; 2
     5fe:	18 f4       	brcc	.+6      	; 0x606 <CheckPins+0x33a>
           PartReady = 1;
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	80 93 06 01 	sts	0x0106, r24
        }
        trans.uBE[PartReady] = ReadADC(HighPin) - adc.tp2;	// Base Emitter Voltage
     606:	e0 90 06 01 	lds	r14, 0x0106
     60a:	ff 24       	eor	r15, r15
     60c:	81 2f       	mov	r24, r17
     60e:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
     612:	f7 01       	movw	r30, r14
     614:	ee 0f       	add	r30, r30
     616:	ff 1f       	adc	r31, r31
     618:	ee 5a       	subi	r30, 0xAE	; 174
     61a:	fe 4f       	sbci	r31, 0xFE	; 254
     61c:	2c 89       	ldd	r18, Y+20	; 0x14
     61e:	3d 89       	ldd	r19, Y+21	; 0x15
     620:	82 1b       	sub	r24, r18
     622:	93 0b       	sbc	r25, r19
     624:	91 83       	std	Z+1, r25	; 0x01
     626:	80 83       	st	Z, r24

        //compute current amplification factor for circuit with common Emitter
        //hFE = B = Collector current / Base current
        if(adc.tp2 < 53) {
     628:	25 33       	cpi	r18, 0x35	; 53
     62a:	31 05       	cpc	r19, r1
     62c:	20 f4       	brcc	.+8      	; 0x636 <CheckPins+0x36a>
#if DebugOut == 5
           lcd_data('<');
           lcd_data('5');
           lcd_data('3');
#endif
           adc.tp2 = 53;
     62e:	85 e3       	ldi	r24, 0x35	; 53
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	9d 8b       	std	Y+21, r25	; 0x15
     634:	8c 8b       	std	Y+20, r24	; 0x14
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     636:	e0 90 06 01 	lds	r14, 0x0106
     63a:	ff 24       	eor	r15, r15
     63c:	21 01       	movw	r4, r2
     63e:	66 24       	eor	r6, r6
     640:	77 24       	eor	r7, r7
     642:	20 91 04 01 	lds	r18, 0x0104
     646:	30 91 05 01 	lds	r19, 0x0105
     64a:	40 e0       	ldi	r20, 0x00	; 0
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	60 e6       	ldi	r22, 0x60	; 96
     650:	77 eb       	ldi	r23, 0xB7	; 183
     652:	87 e4       	ldi	r24, 0x47	; 71
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
     65a:	c3 01       	movw	r24, r6
     65c:	b2 01       	movw	r22, r4
     65e:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsi3>
                 (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
     662:	ac 89       	ldd	r26, Y+20	; 0x14
     664:	bd 89       	ldd	r27, Y+21	; 0x15
     666:	9d 01       	movw	r18, r26
     668:	40 e0       	ldi	r20, 0x00	; 0
     66a:	50 e0       	ldi	r21, 0x00	; 0
     66c:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
#endif
           adc.tp2 = 53;
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     670:	f7 01       	movw	r30, r14
     672:	ee 0f       	add	r30, r30
     674:	ff 1f       	adc	r31, r31
     676:	ee 0f       	add	r30, r30
     678:	ff 1f       	adc	r31, r31
     67a:	e6 5b       	subi	r30, 0xB6	; 182
     67c:	fe 4f       	sbci	r31, 0xFE	; 254
     67e:	20 83       	st	Z, r18
     680:	31 83       	std	Z+1, r19	; 0x01
     682:	42 83       	std	Z+2, r20	; 0x02
     684:	53 83       	std	Z+3, r21	; 0x03
        trans.hfe[PartReady] = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
#ifdef COMMON_COLLECTOR
        //current amplification factor for common  Collector (Emitter follower)
        // c_hFE = (Emitter current - Base current) / Base current
        if (c_hfe > trans.hfe[PartReady]) {
     686:	8e 81       	ldd	r24, Y+6	; 0x06
     688:	9f 81       	ldd	r25, Y+7	; 0x07
     68a:	a8 85       	ldd	r26, Y+8	; 0x08
     68c:	b9 85       	ldd	r27, Y+9	; 0x09
     68e:	28 17       	cp	r18, r24
     690:	39 07       	cpc	r19, r25
     692:	4a 07       	cpc	r20, r26
     694:	5b 07       	cpc	r21, r27
     696:	98 f4       	brcc	.+38     	; 0x6be <CheckPins+0x3f2>
           trans.hfe[PartReady] = c_hfe;
     698:	80 83       	st	Z, r24
     69a:	91 83       	std	Z+1, r25	; 0x01
     69c:	a2 83       	std	Z+2, r26	; 0x02
     69e:	b3 83       	std	Z+3, r27	; 0x03
           trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.hp1 - adc.tp1;	// Base Emitter Voltage common collector
     6a0:	f7 01       	movw	r30, r14
     6a2:	ee 0f       	add	r30, r30
     6a4:	ff 1f       	adc	r31, r31
     6a6:	ee 5a       	subi	r30, 0xAE	; 174
     6a8:	fe 4f       	sbci	r31, 0xFE	; 254
     6aa:	80 91 40 01 	lds	r24, 0x0140
     6ae:	90 91 41 01 	lds	r25, 0x0141
     6b2:	8a 19       	sub	r24, r10
     6b4:	9b 09       	sbc	r25, r11
     6b6:	88 19       	sub	r24, r8
     6b8:	99 09       	sbc	r25, r9
     6ba:	91 83       	std	Z+1, r25	; 0x01
     6bc:	80 83       	st	Z, r24
        }
#endif

 
        if(PartFound != PART_THYRISTOR) {
     6be:	80 91 09 01 	lds	r24, 0x0109
     6c2:	85 30       	cpi	r24, 0x05	; 5
     6c4:	09 f4       	brne	.+2      	; 0x6c8 <CheckPins+0x3fc>
     6c6:	68 c0       	rjmp	.+208    	; 0x798 <CheckPins+0x4cc>
           if(adc.tp2 > 977) {
     6c8:	ac 89       	ldd	r26, Y+20	; 0x14
     6ca:	bd 89       	ldd	r27, Y+21	; 0x15
     6cc:	e3 e0       	ldi	r30, 0x03	; 3
     6ce:	a2 3d       	cpi	r26, 0xD2	; 210
     6d0:	be 07       	cpc	r27, r30
     6d2:	30 f0       	brcs	.+12     	; 0x6e0 <CheckPins+0x414>
              //PNP-Transistor is found (Base voltage moves to VCC)
              PartFound = PART_TRANSISTOR;
     6d4:	82 e0       	ldi	r24, 0x02	; 2
     6d6:	80 93 09 01 	sts	0x0109, r24
              PartMode = PART_MODE_PNP;
     6da:	80 93 08 01 	sts	0x0108, r24
     6de:	55 c0       	rjmp	.+170    	; 0x78a <CheckPins+0x4be>
           } else {
              if((adc.lp_otr < 97) && (adc.lp1 > 2000)) {
     6e0:	2b 85       	ldd	r18, Y+11	; 0x0b
     6e2:	3c 85       	ldd	r19, Y+12	; 0x0c
     6e4:	21 36       	cpi	r18, 0x61	; 97
     6e6:	31 05       	cpc	r19, r1
     6e8:	08 f0       	brcs	.+2      	; 0x6ec <CheckPins+0x420>
     6ea:	4f c0       	rjmp	.+158    	; 0x78a <CheckPins+0x4be>
     6ec:	31 ed       	ldi	r19, 0xD1	; 209
     6ee:	23 16       	cp	r2, r19
     6f0:	37 e0       	ldi	r19, 0x07	; 7
     6f2:	33 06       	cpc	r3, r19
     6f4:	08 f4       	brcc	.+2      	; 0x6f8 <CheckPins+0x42c>
     6f6:	49 c0       	rjmp	.+146    	; 0x78a <CheckPins+0x4be>
                 //is flow voltage low enough in the closed  state?
                 //(since D-Mode-FET would be by mistake detected as E-Mode )
        	 PartFound = PART_FET;		//P-Kanal-MOSFET if found (Basis/Gate moves not to VCC)
     6f8:	83 e0       	ldi	r24, 0x03	; 3
     6fa:	80 93 09 01 	sts	0x0109, r24
        	 PartMode = PART_MODE_P_E_MOS;
     6fe:	80 93 08 01 	sts	0x0108, r24
                 PinMSK = LoADCm & 7;
     702:	ed 80       	ldd	r14, Y+5	; 0x05
     704:	87 e0       	ldi	r24, 0x07	; 7
     706:	e8 22       	and	r14, r24
        	 //measure the Gate threshold voltage
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
     708:	89 81       	ldd	r24, Y+1	; 0x01
     70a:	80 64       	ori	r24, 0x40	; 64
     70c:	80 93 7c 00 	sts	0x007C, r24
        	 gthvoltage = 1;		// round up ((1*4)/9)
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	90 93 5f 01 	sts	0x015F, r25
     718:	80 93 5e 01 	sts	0x015E, r24
        	 for(ii=0;ii<11;ii++) {
     71c:	40 e0       	ldi	r20, 0x00	; 0
        	    wdt_reset();
     71e:	a8 95       	wdr
        	    ChargePin10ms(TriPinRL,1);
     720:	8a 81       	ldd	r24, Y+2	; 0x02
     722:	61 e0       	ldi	r22, 0x01	; 1
     724:	4e 8b       	std	Y+22, r20	; 0x16
     726:	0e 94 45 01 	call	0x28a	; 0x28a <ChargePin10ms>
                    R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (Basis) to GND
     72a:	9a 89       	ldd	r25, Y+18	; 0x12
     72c:	94 b9       	out	0x04, r25	; 4
     72e:	4e 89       	ldd	r20, Y+22	; 0x16
        	    while (!(ADC_PIN&PinMSK));  // Wait, until the MOSFET switches and Drain moves to VCC
     730:	86 b1       	in	r24, 0x06	; 6
     732:	8e 21       	and	r24, r14
     734:	e9 f3       	breq	.-6      	; 0x730 <CheckPins+0x464>
        	    R_DDR = LoPinRL;
     736:	ac 81       	ldd	r26, Y+4	; 0x04
     738:	a4 b9       	out	0x04, r26	; 4
        	    ADCSRA |= (1<<ADSC);	// Start Conversion
     73a:	80 91 7a 00 	lds	r24, 0x007A
     73e:	80 64       	ori	r24, 0x40	; 64
     740:	80 93 7a 00 	sts	0x007A, r24
        	    while (ADCSRA&(1<<ADSC));	// wait
     744:	80 91 7a 00 	lds	r24, 0x007A
     748:	86 fd       	sbrc	r24, 6
     74a:	fc cf       	rjmp	.-8      	; 0x744 <CheckPins+0x478>
      		    gthvoltage += (1023 - ADCW); // Add Tristatepin-Voltage
     74c:	20 91 78 00 	lds	r18, 0x0078
     750:	30 91 79 00 	lds	r19, 0x0079
     754:	80 91 5e 01 	lds	r24, 0x015E
     758:	90 91 5f 01 	lds	r25, 0x015F
     75c:	81 50       	subi	r24, 0x01	; 1
     75e:	9c 4f       	sbci	r25, 0xFC	; 252
     760:	82 1b       	sub	r24, r18
     762:	93 0b       	sbc	r25, r19
     764:	90 93 5f 01 	sts	0x015F, r25
     768:	80 93 5e 01 	sts	0x015E, r24
        	 PartMode = PART_MODE_P_E_MOS;
                 PinMSK = LoADCm & 7;
        	 //measure the Gate threshold voltage
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
        	 gthvoltage = 1;		// round up ((1*4)/9)
        	 for(ii=0;ii<11;ii++) {
     76c:	4f 5f       	subi	r20, 0xFF	; 255
     76e:	4b 30       	cpi	r20, 0x0B	; 11
     770:	b1 f6       	brne	.-84     	; 0x71e <CheckPins+0x452>
        	    R_DDR = LoPinRL;
        	    ADCSRA |= (1<<ADSC);	// Start Conversion
        	    while (ADCSRA&(1<<ADSC));	// wait
      		    gthvoltage += (1023 - ADCW); // Add Tristatepin-Voltage
                 }
                 gthvoltage *= 4;		// is equal to 44*ADCW
     772:	88 0f       	add	r24, r24
     774:	99 1f       	adc	r25, r25
     776:	88 0f       	add	r24, r24
     778:	99 1f       	adc	r25, r25
                 gthvoltage /= 9;		// gives resolution in mV
     77a:	69 e0       	ldi	r22, 0x09	; 9
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	0e 94 c3 19 	call	0x3386	; 0x3386 <__udivmodhi4>
     782:	70 93 5f 01 	sts	0x015F, r23
     786:	60 93 5e 01 	sts	0x015E, r22
              }
           }
           trans.b = TristatePin;
     78a:	b9 81       	ldd	r27, Y+1	; 0x01
     78c:	b0 93 56 01 	sts	0x0156, r27
           trans.c = LowPin;
     790:	00 93 57 01 	sts	0x0157, r16
           trans.e = HighPin;
     794:	10 93 58 01 	sts	0x0158, r17
        }  // end if PartFound != PART_THYRISTOR
    } // end component has current => PNP

#ifdef COMMON_COLLECTOR
    // Low-Pin=RL- HighPin=VCC
    R_DDR = LoPinRL | TriPinRL;
     798:	ed 85       	ldd	r30, Y+13	; 0x0d
     79a:	e4 b9       	out	0x04, r30	; 4
    R_PORT = TriPinRL;			// TriPin=RL+  NPN with common Collector
     79c:	fa 81       	ldd	r31, Y+2	; 0x02
     79e:	f5 b9       	out	0x05, r31	; 5
    adc.lp1 = W5msReadADC(LowPin);	// voltage at Emitter resistor
     7a0:	80 2f       	mov	r24, r16
     7a2:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
     7a6:	9f 83       	std	Y+7, r25	; 0x07
     7a8:	8e 83       	std	Y+6, r24	; 0x06
    adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     7aa:	20 91 40 01 	lds	r18, 0x0140
     7ae:	30 91 41 01 	lds	r19, 0x0141
     7b2:	3d 8b       	std	Y+21, r19	; 0x15
     7b4:	2c 8b       	std	Y+20, r18	; 0x14
     7b6:	89 81       	ldd	r24, Y+1	; 0x01
     7b8:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
     7bc:	ac 89       	ldd	r26, Y+20	; 0x14
     7be:	bd 89       	ldd	r27, Y+21	; 0x15
     7c0:	a8 1b       	sub	r26, r24
     7c2:	b9 0b       	sbc	r27, r25
     7c4:	bd 8b       	std	Y+21, r27	; 0x15
     7c6:	ac 8b       	std	Y+20, r26	; 0x14
    if (adc.tp1 < 10) {
     7c8:	aa 30       	cpi	r26, 0x0A	; 10
     7ca:	b1 05       	cpc	r27, r1
     7cc:	c8 f5       	brcc	.+114    	; 0x840 <CheckPins+0x574>
       R_DDR = LoPinRL | TriPinRH;
     7ce:	8c 81       	ldd	r24, Y+4	; 0x04
     7d0:	8d 29       	or	r24, r13
     7d2:	84 b9       	out	0x04, r24	; 4
       R_PORT = TriPinRH;		// Tripin=RH+
     7d4:	d5 b8       	out	0x05, r13	; 5
       adc.lp1 = W5msReadADC(LowPin);
     7d6:	80 2f       	mov	r24, r16
     7d8:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
     7dc:	9f 83       	std	Y+7, r25	; 0x07
     7de:	8e 83       	std	Y+6, r24	; 0x06
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     7e0:	e0 91 40 01 	lds	r30, 0x0140
     7e4:	f0 91 41 01 	lds	r31, 0x0141
     7e8:	fd 8b       	std	Y+21, r31	; 0x15
     7ea:	ec 8b       	std	Y+20, r30	; 0x14
     7ec:	89 81       	ldd	r24, Y+1	; 0x01
     7ee:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
     7f2:	2c 89       	ldd	r18, Y+20	; 0x14
     7f4:	3d 89       	ldd	r19, Y+21	; 0x15
     7f6:	28 1b       	sub	r18, r24
     7f8:	39 0b       	sbc	r19, r25
     7fa:	3d 8b       	std	Y+21, r19	; 0x15
     7fc:	2c 8b       	std	Y+20, r18	; 0x14
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     7fe:	8e 81       	ldd	r24, Y+6	; 0x06
     800:	9f 81       	ldd	r25, Y+7	; 0x07
     802:	4c 01       	movw	r8, r24
     804:	aa 24       	eor	r10, r10
     806:	bb 24       	eor	r11, r11
     808:	20 91 04 01 	lds	r18, 0x0104
     80c:	30 91 05 01 	lds	r19, 0x0105
     810:	40 e0       	ldi	r20, 0x00	; 0
     812:	50 e0       	ldi	r21, 0x00	; 0
     814:	60 e6       	ldi	r22, 0x60	; 96
     816:	77 eb       	ldi	r23, 0xB7	; 183
     818:	87 e4       	ldi	r24, 0x47	; 71
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
     820:	c5 01       	movw	r24, r10
     822:	b4 01       	movw	r22, r8
     824:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsi3>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
     828:	ac 89       	ldd	r26, Y+20	; 0x14
     82a:	bd 89       	ldd	r27, Y+21	; 0x15
     82c:	9d 01       	movw	r18, r26
     82e:	40 e0       	ldi	r20, 0x00	; 0
     830:	50 e0       	ldi	r21, 0x00	; 0
       R_DDR = LoPinRL | TriPinRH;
       R_PORT = TriPinRH;		// Tripin=RH+
       adc.lp1 = W5msReadADC(LowPin);
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     832:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
     836:	2d 87       	std	Y+13, r18	; 0x0d
     838:	3e 87       	std	Y+14, r19	; 0x0e
     83a:	4f 87       	std	Y+15, r20	; 0x0f
     83c:	58 8b       	std	Y+16, r21	; 0x10
     83e:	10 c0       	rjmp	.+32     	; 0x860 <CheckPins+0x594>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
 #else
       c_hfe = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
    } else {
       c_hfe = (adc.lp1 - adc.tp1) / adc.tp1;
     840:	8e 81       	ldd	r24, Y+6	; 0x06
     842:	9f 81       	ldd	r25, Y+7	; 0x07
     844:	ec 89       	ldd	r30, Y+20	; 0x14
     846:	fd 89       	ldd	r31, Y+21	; 0x15
     848:	8e 1b       	sub	r24, r30
     84a:	9f 0b       	sbc	r25, r31
     84c:	bf 01       	movw	r22, r30
     84e:	0e 94 c3 19 	call	0x3386	; 0x3386 <__udivmodhi4>
     852:	cb 01       	movw	r24, r22
     854:	a0 e0       	ldi	r26, 0x00	; 0
     856:	b0 e0       	ldi	r27, 0x00	; 0
     858:	8d 87       	std	Y+13, r24	; 0x0d
     85a:	9e 87       	std	Y+14, r25	; 0x0e
     85c:	af 87       	std	Y+15, r26	; 0x0f
     85e:	b8 8b       	std	Y+16, r27	; 0x10
       lcd_string(utoa(adc.tp1,outval,10));
       wait1s();
#endif
#endif
    //Tristate (can be Base) to VCC, Test if NPN
    ADC_DDR = LoADCm;		//Low-Pin to output 0V
     860:	9d 81       	ldd	r25, Y+5	; 0x05
     862:	97 b9       	out	0x07, r25	; 7
    ADC_PORT = TXD_VAL;			//switch Low-Pin to GND
     864:	88 e0       	ldi	r24, 0x08	; 8
     866:	88 b9       	out	0x08, r24	; 8
    R_DDR = TriPinRL | HiPinRL;		//RL port for High-Pin and Tristate-Pin to output
     868:	a9 89       	ldd	r26, Y+17	; 0x11
     86a:	a4 b9       	out	0x04, r26	; 4
    R_PORT = TriPinRL | HiPinRL;	//RL port for High-Pin and Tristate-Pin to Vcc
     86c:	a5 b9       	out	0x05, r26	; 5
    adc.hp1 = W5msReadADC(HighPin);	//measure voltage at High-Pin  (Collector)
     86e:	81 2f       	mov	r24, r17
     870:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
    if(adc.hp1 < 1600) {
     874:	b6 e0       	ldi	r27, 0x06	; 6
     876:	80 34       	cpi	r24, 0x40	; 64
     878:	9b 07       	cpc	r25, r27
     87a:	08 f0       	brcs	.+2      	; 0x87e <CheckPins+0x5b2>
     87c:	41 c1       	rjmp	.+642    	; 0xb00 <__stack+0x201>
       lcd_data('N');
       lcd_testpin(HighPin);
       lcd_space();
       wait1s();
#endif
       if(PartReady==1) {
     87e:	80 91 06 01 	lds	r24, 0x0106
     882:	81 30       	cpi	r24, 0x01	; 1
     884:	09 f4       	brne	.+2      	; 0x888 <CheckPins+0x5bc>
     886:	a9 c1       	rjmp	.+850    	; 0xbda <__stack+0x2db>
          goto widmes;
       }

       //Test auf Thyristor:
       //Gate discharge
       ChargePin10ms(TriPinRL,0);	//Tristate-Pin (Gate) across R_L 10ms to GND
     888:	8a 81       	ldd	r24, Y+2	; 0x02
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	0e 94 45 01 	call	0x28a	; 0x28a <ChargePin10ms>
       adc.hp3 = W5msReadADC(HighPin);	//read voltage at High-Pin (probably Anode) again
     890:	81 2f       	mov	r24, r17
     892:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
     896:	7c 01       	movw	r14, r24
					//current should still flow, if not,
					// no Thyristor or holding current to low 
		 	
       R_PORT = 0;			//switch R_L for High-Pin (probably Anode) to GND (turn off)
     898:	15 b8       	out	0x05, r1	; 5
       wait5ms();
     89a:	0e 94 0e 19 	call	0x321c	; 0x321c <wait5ms>
       R_PORT = HiPinRL;		//switch R_L for High-Pin (probably Anode) again to VCC
     89e:	c5 b8       	out	0x05, r12	; 5
       adc.hp2 = W5msReadADC(HighPin);	//measure voltage at the High-Pin (probably Anode) again
     8a0:	81 2f       	mov	r24, r17
     8a2:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
       if((adc.hp3 < 1600) && (adc.hp2 > 4400)) {
     8a6:	e0 e4       	ldi	r30, 0x40	; 64
     8a8:	ee 16       	cp	r14, r30
     8aa:	e6 e0       	ldi	r30, 0x06	; 6
     8ac:	fe 06       	cpc	r15, r30
     8ae:	08 f0       	brcs	.+2      	; 0x8b2 <CheckPins+0x5e6>
     8b0:	42 c0       	rjmp	.+132    	; 0x936 <__stack+0x37>
     8b2:	f1 e1       	ldi	r31, 0x11	; 17
     8b4:	81 33       	cpi	r24, 0x31	; 49
     8b6:	9f 07       	cpc	r25, r31
     8b8:	f0 f1       	brcs	.+124    	; 0x936 <__stack+0x37>
          //if the holding current was switched off the thyristor must be switched off too. 
          //if Thyristor was still swiched on, if gate was switched off => Thyristor
          PartFound = PART_THYRISTOR;
     8ba:	85 e0       	ldi	r24, 0x05	; 5
     8bc:	80 93 09 01 	sts	0x0109, r24
          //Test if Triac
          R_DDR = 0;
     8c0:	14 b8       	out	0x04, r1	; 4
          R_PORT = 0;
     8c2:	15 b8       	out	0x05, r1	; 5
          ADC_PORT = LoADCp;	//Low-Pin fix to VCC
     8c4:	2d 81       	ldd	r18, Y+5	; 0x05
     8c6:	28 b9       	out	0x08, r18	; 8
          wait5ms();
     8c8:	0e 94 0e 19 	call	0x321c	; 0x321c <wait5ms>
          R_DDR = HiPinRL;		//switch R_L port HighPin to output (GND)
     8cc:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) > 244) {
     8ce:	81 2f       	mov	r24, r17
     8d0:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
     8d4:	85 3f       	cpi	r24, 0xF5	; 245
     8d6:	91 05       	cpc	r25, r1
     8d8:	08 f0       	brcs	.+2      	; 0x8dc <CheckPins+0x610>
     8da:	0b c1       	rjmp	.+534    	; 0xaf2 <__stack+0x1f3>
             goto savenresult;		//measure voltage at the  High-Pin (probably A2); if too high:
                                	//component has current => kein Triac
          }
          R_DDR = HiPinRL | TriPinRL;	//switch R_L port for TristatePin (Gate) to output (GND) => Triac should be triggered 
     8dc:	39 89       	ldd	r19, Y+17	; 0x11
     8de:	34 b9       	out	0x04, r19	; 4
          if(W5msReadADC(TristatePin) < 977) {
     8e0:	89 81       	ldd	r24, Y+1	; 0x01
     8e2:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
     8e6:	a3 e0       	ldi	r26, 0x03	; 3
     8e8:	81 3d       	cpi	r24, 0xD1	; 209
     8ea:	9a 07       	cpc	r25, r26
     8ec:	08 f4       	brcc	.+2      	; 0x8f0 <CheckPins+0x624>
     8ee:	01 c1       	rjmp	.+514    	; 0xaf2 <__stack+0x1f3>
             goto savenresult; 		//measure voltage at the Tristate-Pin (probably Gate) ;
                              		// if to low, abort 
          }
          if(ReadADC(HighPin) < 733) {
     8f0:	81 2f       	mov	r24, r17
     8f2:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
     8f6:	b2 e0       	ldi	r27, 0x02	; 2
     8f8:	8d 3d       	cpi	r24, 0xDD	; 221
     8fa:	9b 07       	cpc	r25, r27
     8fc:	08 f4       	brcc	.+2      	; 0x900 <__stack+0x1>
     8fe:	f9 c0       	rjmp	.+498    	; 0xaf2 <__stack+0x1f3>
             goto savenresult; 		//component has no current => no Triac => abort
          }
          R_DDR = HiPinRL;		//TristatePin (Gate) to input 
     900:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) < 733) {
     902:	81 2f       	mov	r24, r17
     904:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
     908:	e2 e0       	ldi	r30, 0x02	; 2
     90a:	8d 3d       	cpi	r24, 0xDD	; 221
     90c:	9e 07       	cpc	r25, r30
     90e:	08 f4       	brcc	.+2      	; 0x912 <__stack+0x13>
     910:	f0 c0       	rjmp	.+480    	; 0xaf2 <__stack+0x1f3>
             goto savenresult; 		//component has no current without base current => no Triac => abort
          }
          R_PORT = HiPinRL;		//switch R_L port for HighPin to VCC => switch off holding current 
     912:	c5 b8       	out	0x05, r12	; 5
          wait5ms();
     914:	0e 94 0e 19 	call	0x321c	; 0x321c <wait5ms>
          R_PORT = 0;			//switch R_L port for HighPin again to GND; Triac should now switched off
     918:	15 b8       	out	0x05, r1	; 5
          if(W5msReadADC(HighPin) > 244) {
     91a:	81 2f       	mov	r24, r17
     91c:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
     920:	85 3f       	cpi	r24, 0xF5	; 245
     922:	91 05       	cpc	r25, r1
     924:	08 f0       	brcs	.+2      	; 0x928 <__stack+0x29>
     926:	e5 c0       	rjmp	.+458    	; 0xaf2 <__stack+0x1f3>
             goto savenresult;		//measure voltage at the High-Pin (probably A2) ;
                                	//if to high, component is not switched off => no Triac, abort
         }
         PartFound = PART_TRIAC;
     928:	84 e0       	ldi	r24, 0x04	; 4
     92a:	80 93 09 01 	sts	0x0109, r24
         PartReady = 1;
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	80 93 06 01 	sts	0x0106, r24
         goto savenresult;
     934:	de c0       	rjmp	.+444    	; 0xaf2 <__stack+0x1f3>
        }
      //Test if NPN Transistor or MOSFET
      // ADC_DDR = LoADCm;	//Low-Pin to output 0V
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
     936:	dc 28       	or	r13, r12
     938:	d4 b8       	out	0x04, r13	; 4
      R_PORT = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to VCC
     93a:	d5 b8       	out	0x05, r13	; 5
      wait50ms();
     93c:	0e 94 09 19 	call	0x3212	; 0x3212 <wait50ms>
      adc.hp2 = ADCconfig.U_AVCC - ReadADC(HighPin);	//measure the voltage at the collector resistor 
     940:	60 90 40 01 	lds	r6, 0x0140
     944:	70 90 41 01 	lds	r7, 0x0141
     948:	81 2f       	mov	r24, r17
     94a:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
     94e:	68 1a       	sub	r6, r24
     950:	79 0a       	sbc	r7, r25
      adc.tp2 = ADCconfig.U_AVCC - ReadADC(TristatePin);	//measure the voltage at the base resistor 
     952:	a0 90 40 01 	lds	r10, 0x0140
     956:	b0 90 41 01 	lds	r11, 0x0141
     95a:	89 81       	ldd	r24, Y+1	; 0x01
     95c:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
     960:	a8 1a       	sub	r10, r24
     962:	b9 0a       	sbc	r11, r25
       lcd_space();
       lcd_data('T');
       lcd_data('P');
       lcd_string(utoa(adc.tp2,outval,10));
#endif
      if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     964:	80 91 09 01 	lds	r24, 0x0109
     968:	82 50       	subi	r24, 0x02	; 2
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	18 f4       	brcc	.+6      	; 0x974 <__stack+0x75>
         PartReady = 1;	//check, if test is already done once
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	80 93 06 01 	sts	0x0106, r24
      }
      trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.tp2 - ReadADC(LowPin);
     974:	80 90 06 01 	lds	r8, 0x0106
     978:	99 24       	eor	r9, r9
     97a:	e0 90 40 01 	lds	r14, 0x0140
     97e:	f0 90 41 01 	lds	r15, 0x0141
     982:	ea 18       	sub	r14, r10
     984:	fb 08       	sbc	r15, r11
     986:	80 2f       	mov	r24, r16
     988:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
     98c:	f4 01       	movw	r30, r8
     98e:	ee 0f       	add	r30, r30
     990:	ff 1f       	adc	r31, r31
     992:	ee 5a       	subi	r30, 0xAE	; 174
     994:	fe 4f       	sbci	r31, 0xFE	; 254
     996:	e8 1a       	sub	r14, r24
     998:	f9 0a       	sbc	r15, r25
     99a:	f1 82       	std	Z+1, r15	; 0x01
     99c:	e0 82       	st	Z, r14

      //compute current amplification factor for common Emitter
      //hFE = B = Collector current / Base current
      if(adc.tp2 < 53) {
     99e:	f5 e3       	ldi	r31, 0x35	; 53
     9a0:	af 16       	cp	r10, r31
     9a2:	b1 04       	cpc	r11, r1
     9a4:	18 f4       	brcc	.+6      	; 0x9ac <__stack+0xad>
#if DebugOut == 5
         lcd_data('<');
         lcd_data('5');
         lcd_data('3');
#endif
         adc.tp2 = 53;
     9a6:	25 e3       	ldi	r18, 0x35	; 53
     9a8:	a2 2e       	mov	r10, r18
     9aa:	b1 2c       	mov	r11, r1
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     9ac:	e0 90 06 01 	lds	r14, 0x0106
     9b0:	ff 24       	eor	r15, r15
     9b2:	13 01       	movw	r2, r6
     9b4:	44 24       	eor	r4, r4
     9b6:	55 24       	eor	r5, r5
     9b8:	20 91 0b 01 	lds	r18, 0x010B
     9bc:	30 91 0c 01 	lds	r19, 0x010C
     9c0:	40 e0       	ldi	r20, 0x00	; 0
     9c2:	50 e0       	ldi	r21, 0x00	; 0
     9c4:	60 e6       	ldi	r22, 0x60	; 96
     9c6:	77 eb       	ldi	r23, 0xB7	; 183
     9c8:	87 e4       	ldi	r24, 0x47	; 71
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
     9d0:	c2 01       	movw	r24, r4
     9d2:	b1 01       	movw	r22, r2
     9d4:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp2;	
     9d8:	95 01       	movw	r18, r10
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	50 e0       	ldi	r21, 0x00	; 0
     9de:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
#endif
         adc.tp2 = 53;
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     9e2:	f7 01       	movw	r30, r14
     9e4:	ee 0f       	add	r30, r30
     9e6:	ff 1f       	adc	r31, r31
     9e8:	ee 0f       	add	r30, r30
     9ea:	ff 1f       	adc	r31, r31
     9ec:	e6 5b       	subi	r30, 0xB6	; 182
     9ee:	fe 4f       	sbci	r31, 0xFE	; 254
     9f0:	20 83       	st	Z, r18
     9f2:	31 83       	std	Z+1, r19	; 0x01
     9f4:	42 83       	std	Z+2, r20	; 0x02
     9f6:	53 83       	std	Z+3, r21	; 0x03
      trans.hfe[PartReady] = ((adc.hp2 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
#endif
#ifdef COMMON_COLLECTOR
       //compare current amplification factor for common Collector (Emitter follower)
       // hFE = (Emitterstrom - Basisstrom) / Basisstrom
       if (c_hfe >  trans.hfe[PartReady]) {
     9f8:	8d 85       	ldd	r24, Y+13	; 0x0d
     9fa:	9e 85       	ldd	r25, Y+14	; 0x0e
     9fc:	af 85       	ldd	r26, Y+15	; 0x0f
     9fe:	b8 89       	ldd	r27, Y+16	; 0x10
     a00:	28 17       	cp	r18, r24
     a02:	39 07       	cpc	r19, r25
     a04:	4a 07       	cpc	r20, r26
     a06:	5b 07       	cpc	r21, r27
     a08:	b8 f4       	brcc	.+46     	; 0xa38 <__stack+0x139>
          trans.hfe[PartReady] = c_hfe;
     a0a:	80 83       	st	Z, r24
     a0c:	91 83       	std	Z+1, r25	; 0x01
     a0e:	a2 83       	std	Z+2, r26	; 0x02
     a10:	b3 83       	std	Z+3, r27	; 0x03
          trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.lp1 - adc.tp1;
     a12:	f7 01       	movw	r30, r14
     a14:	ee 0f       	add	r30, r30
     a16:	ff 1f       	adc	r31, r31
     a18:	ee 5a       	subi	r30, 0xAE	; 174
     a1a:	fe 4f       	sbci	r31, 0xFE	; 254
     a1c:	80 91 40 01 	lds	r24, 0x0140
     a20:	90 91 41 01 	lds	r25, 0x0141
     a24:	ae 81       	ldd	r26, Y+6	; 0x06
     a26:	bf 81       	ldd	r27, Y+7	; 0x07
     a28:	8a 1b       	sub	r24, r26
     a2a:	9b 0b       	sbc	r25, r27
     a2c:	2c 89       	ldd	r18, Y+20	; 0x14
     a2e:	3d 89       	ldd	r19, Y+21	; 0x15
     a30:	82 1b       	sub	r24, r18
     a32:	93 0b       	sbc	r25, r19
     a34:	91 83       	std	Z+1, r25	; 0x01
     a36:	80 83       	st	Z, r24
       }
#endif

      if(adc.tp2 > 2557) {		// Basis-voltage R_H is low enough
     a38:	3e ef       	ldi	r19, 0xFE	; 254
     a3a:	a3 16       	cp	r10, r19
     a3c:	39 e0       	ldi	r19, 0x09	; 9
     a3e:	b3 06       	cpc	r11, r19
     a40:	38 f0       	brcs	.+14     	; 0xa50 <__stack+0x151>
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
     a42:	82 e0       	ldi	r24, 0x02	; 2
     a44:	80 93 09 01 	sts	0x0109, r24
         PartMode = PART_MODE_NPN;
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	80 93 08 01 	sts	0x0108, r24
     a4e:	51 c0       	rjmp	.+162    	; 0xaf2 <__stack+0x1f3>
      } else { // Basis has low current
         if((adc.lp_otr < 97) && (adc.hp2 > 3400)) {
     a50:	8b 85       	ldd	r24, Y+11	; 0x0b
     a52:	9c 85       	ldd	r25, Y+12	; 0x0c
     a54:	81 36       	cpi	r24, 0x61	; 97
     a56:	91 05       	cpc	r25, r1
     a58:	08 f0       	brcs	.+2      	; 0xa5c <__stack+0x15d>
     a5a:	4b c0       	rjmp	.+150    	; 0xaf2 <__stack+0x1f3>
     a5c:	99 e4       	ldi	r25, 0x49	; 73
     a5e:	69 16       	cp	r6, r25
     a60:	9d e0       	ldi	r25, 0x0D	; 13
     a62:	79 06       	cpc	r7, r25
     a64:	08 f4       	brcc	.+2      	; 0xa68 <__stack+0x169>
     a66:	45 c0       	rjmp	.+138    	; 0xaf2 <__stack+0x1f3>
            //if flow voltage in switched off mode low enough?
            //(since D-Mode-FET will be detected in error as E-Mode )
            PartFound = PART_FET;	//N-Kanal-MOSFET is found (Basis/Gate will Not be pulled down)
     a68:	83 e0       	ldi	r24, 0x03	; 3
     a6a:	80 93 09 01 	sts	0x0109, r24
            PartMode = PART_MODE_N_E_MOS;
     a6e:	82 e0       	ldi	r24, 0x02	; 2
     a70:	80 93 08 01 	sts	0x0108, r24
            lcd_line3();
            lcd_data('N');
            lcd_data('F');
            wait1s();
#endif
            PinMSK = HiADCm & 7;
     a74:	eb 80       	ldd	r14, Y+3	; 0x03
     a76:	a7 e0       	ldi	r26, 0x07	; 7
     a78:	ea 22       	and	r14, r26
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
     a7a:	89 81       	ldd	r24, Y+1	; 0x01
     a7c:	80 64       	ori	r24, 0x40	; 64
     a7e:	80 93 7c 00 	sts	0x007C, r24
            gthvoltage = 1;			// round up ((1*4)/9)
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	90 93 5f 01 	sts	0x015F, r25
     a8a:	80 93 5e 01 	sts	0x015E, r24
     a8e:	bb e0       	ldi	r27, 0x0B	; 11
     a90:	ab 2e       	mov	r10, r27
            for(ii=0;ii<11;ii++) {
            	wdt_reset();
     a92:	a8 95       	wdr
            	ChargePin10ms(TriPinRL,0);	// discharge Gate 10ms with RL 
     a94:	8a 81       	ldd	r24, Y+2	; 0x02
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	0e 94 45 01 	call	0x28a	; 0x28a <ChargePin10ms>
                R_DDR = HiPinRL | TriPinRH;	// slowly charge Gate 
     a9c:	d4 b8       	out	0x04, r13	; 4
                R_PORT = HiPinRL | TriPinRH;
     a9e:	d5 b8       	out	0x05, r13	; 5
            	while ((ADC_PIN&PinMSK));  // Wait, until the MOSFET switch and Drain moved to low 
     aa0:	86 b1       	in	r24, 0x06	; 6
     aa2:	8e 21       	and	r24, r14
     aa4:	e9 f7       	brne	.-6      	; 0xaa0 <__stack+0x1a1>
                R_DDR = HiPinRL;
     aa6:	c4 b8       	out	0x04, r12	; 4
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
     aa8:	80 91 7a 00 	lds	r24, 0x007A
     aac:	80 64       	ori	r24, 0x40	; 64
     aae:	80 93 7a 00 	sts	0x007A, r24
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
     ab2:	80 91 7a 00 	lds	r24, 0x007A
     ab6:	86 fd       	sbrc	r24, 6
     ab8:	fc cf       	rjmp	.-8      	; 0xab2 <__stack+0x1b3>
            	gthvoltage += ADCW;		// add result of ADC
     aba:	80 91 78 00 	lds	r24, 0x0078
     abe:	90 91 79 00 	lds	r25, 0x0079
     ac2:	20 91 5e 01 	lds	r18, 0x015E
     ac6:	30 91 5f 01 	lds	r19, 0x015F
     aca:	82 0f       	add	r24, r18
     acc:	93 1f       	adc	r25, r19
     ace:	90 93 5f 01 	sts	0x015F, r25
     ad2:	80 93 5e 01 	sts	0x015E, r24
     ad6:	aa 94       	dec	r10
#endif
            PinMSK = HiADCm & 7;
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
            gthvoltage = 1;			// round up ((1*4)/9)
            for(ii=0;ii<11;ii++) {
     ad8:	e1 f6       	brne	.-72     	; 0xa92 <__stack+0x193>
            	gthvoltage += ADCW;		// add result of ADC
#if DebugOut == 5
                lcd_data('.');
#endif
            }
            gthvoltage *= 4;	//is equal to 44 * ADCW
     ada:	88 0f       	add	r24, r24
     adc:	99 1f       	adc	r25, r25
     ade:	88 0f       	add	r24, r24
     ae0:	99 1f       	adc	r25, r25
            gthvoltage /= 9;	//scale to mV
     ae2:	69 e0       	ldi	r22, 0x09	; 9
     ae4:	70 e0       	ldi	r23, 0x00	; 0
     ae6:	0e 94 c3 19 	call	0x3386	; 0x3386 <__udivmodhi4>
     aea:	70 93 5f 01 	sts	0x015F, r23
     aee:	60 93 5e 01 	sts	0x015E, r22
         }
      }
savenresult:
      trans.b = TristatePin;	// save Pin-constellation
     af2:	b9 81       	ldd	r27, Y+1	; 0x01
     af4:	b0 93 56 01 	sts	0x0156, r27
      trans.c = HighPin;
     af8:	10 93 57 01 	sts	0x0157, r17
      trans.e = LowPin;
     afc:	00 93 58 01 	sts	0x0158, r16
   } // end component conduct => npn
   ADC_DDR = TXD_MSK;		// switch all ADC-Ports to input
     b00:	88 e0       	ldi	r24, 0x08	; 8
     b02:	87 b9       	out	0x07, r24	; 7
   ADC_PORT = TXD_VAL;		// switch all ADC-Ports to 0 (no Pull up)
     b04:	88 b9       	out	0x08, r24	; 8
   //Fertig
   //end das component has no connection between HighPin and LowPin
   goto widmes;
     b06:	69 c0       	rjmp	.+210    	; 0xbda <__stack+0x2db>
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
     b08:	88 e0       	ldi	r24, 0x08	; 8
     b0a:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;	//Low-Pin fix to GND
     b0c:	ed 81       	ldd	r30, Y+5	; 0x05
     b0e:	e7 b9       	out	0x07, r30	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     b10:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
     b12:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
     b14:	8a 81       	ldd	r24, Y+2	; 0x02
     b16:	61 e0       	ldi	r22, 0x01	; 1
     b18:	0e 94 45 01 	call	0x28a	; 0x28a <ChargePin10ms>
  adc.lp_otr = W5msReadADC(HighPin) - ReadADC(LowPin);
     b1c:	81 2f       	mov	r24, r17
     b1e:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
     b22:	4c 01       	movw	r8, r24
     b24:	80 2f       	mov	r24, r16
     b26:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
     b2a:	88 1a       	sub	r8, r24
     b2c:	99 0a       	sbc	r9, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
     b2e:	fa 85       	ldd	r31, Y+10	; 0x0a
     b30:	f4 b9       	out	0x04, r31	; 4
  R_PORT = HiPinRH;
     b32:	f5 b9       	out	0x05, r31	; 5
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
     b34:	81 2f       	mov	r24, r17
     b36:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
     b3a:	5c 01       	movw	r10, r24

  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     b3c:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
     b3e:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
     b40:	8a 81       	ldd	r24, Y+2	; 0x02
     b42:	60 e0       	ldi	r22, 0x00	; 0
     b44:	0e 94 45 01 	call	0x28a	; 0x28a <ChargePin10ms>
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
     b48:	81 2f       	mov	r24, r17
     b4a:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
     b4e:	7c 01       	movw	r14, r24
     b50:	80 2f       	mov	r24, r16
     b52:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
     b56:	e8 1a       	sub	r14, r24
     b58:	f9 0a       	sbc	r15, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
     b5a:	2a 85       	ldd	r18, Y+10	; 0x0a
     b5c:	24 b9       	out	0x04, r18	; 4
  R_PORT = HiPinRH;
     b5e:	25 b9       	out	0x05, r18	; 5
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
     b60:	81 2f       	mov	r24, r17
     b62:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
     b66:	e8 14       	cp	r14, r8
     b68:	f9 04       	cpc	r15, r9
     b6a:	18 f0       	brcs	.+6      	; 0xb72 <__stack+0x273>
  R_PORT = HiPinRL;
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
  R_PORT = HiPinRH;
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
     b6c:	a8 2e       	mov	r10, r24
     b6e:	b9 2e       	mov	r11, r25
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
     b70:	47 01       	movw	r8, r14
  lcd_string(utoa(adc.hp3,outval,10));
  lcd_space();
  wait1s();
#endif

  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
     b72:	c4 01       	movw	r24, r8
     b74:	87 59       	subi	r24, 0x97	; 151
     b76:	90 40       	sbci	r25, 0x00	; 0
     b78:	31 e1       	ldi	r19, 0x11	; 17
     b7a:	89 38       	cpi	r24, 0x89	; 137
     b7c:	93 07       	cpc	r25, r19
     b7e:	68 f5       	brcc	.+90     	; 0xbda <__stack+0x2db>
     b80:	c5 01       	movw	r24, r10
     b82:	f3 e0       	ldi	r31, 0x03	; 3
     b84:	96 95       	lsr	r25
     b86:	87 95       	ror	r24
     b88:	fa 95       	dec	r31
     b8a:	e1 f7       	brne	.-8      	; 0xb84 <__stack+0x285>
     b8c:	8a 0d       	add	r24, r10
     b8e:	9b 1d       	adc	r25, r11
     b90:	88 15       	cp	r24, r8
     b92:	99 05       	cpc	r25, r9
     b94:	10 f5       	brcc	.+68     	; 0xbda <__stack+0x2db>
     b96:	e3 e0       	ldi	r30, 0x03	; 3
     b98:	aa 0c       	add	r10, r10
     b9a:	bb 1c       	adc	r11, r11
     b9c:	ea 95       	dec	r30
     b9e:	e1 f7       	brne	.-8      	; 0xb98 <__stack+0x299>
     ba0:	8a 14       	cp	r8, r10
     ba2:	9b 04       	cpc	r9, r11
     ba4:	d0 f4       	brcc	.+52     	; 0xbda <__stack+0x2db>
     //voltage is above 0,15V and below 4,64V => Ok
     if((PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
     ba6:	80 91 09 01 	lds	r24, 0x0109
     baa:	88 23       	and	r24, r24
     bac:	11 f0       	breq	.+4      	; 0xbb2 <__stack+0x2b3>
     bae:	86 30       	cpi	r24, 0x06	; 6
     bb0:	19 f4       	brne	.+6      	; 0xbb8 <__stack+0x2b9>
        PartFound = PART_DIODE;	//mark for diode only, if no other component is found
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	80 93 09 01 	sts	0x0109, r24
				//since there is a problem with Transistors with a protection diode
#if DebugOut == 4
        lcd_data('D');
#endif
     }
     diodes[NumOfDiodes].Anode = HighPin;
     bb8:	80 91 07 01 	lds	r24, 0x0107
     bbc:	e8 2f       	mov	r30, r24
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	ee 0f       	add	r30, r30
     bc2:	ff 1f       	adc	r31, r31
     bc4:	ee 0f       	add	r30, r30
     bc6:	ff 1f       	adc	r31, r31
     bc8:	ed 59       	subi	r30, 0x9D	; 157
     bca:	fe 4f       	sbci	r31, 0xFE	; 254
     bcc:	10 83       	st	Z, r17
     diodes[NumOfDiodes].Cathode = LowPin;
     bce:	01 83       	std	Z+1, r16	; 0x01
     diodes[NumOfDiodes].Voltage = adc.hp1;	// voltage in Millivolt 
     bd0:	93 82       	std	Z+3, r9	; 0x03
     bd2:	82 82       	std	Z+2, r8	; 0x02
     NumOfDiodes++;
     bd4:	8f 5f       	subi	r24, 0xFF	; 255
     bd6:	80 93 07 01 	sts	0x0107, r24
#endif

widmes:
#ifdef R_MESS
  // resistor measurement
  wdt_reset();
     bda:	a8 95       	wdr
// U_SCALE can be set to 4 for better resolution of ReadADC result
 #if U_SCALE != 1
  ADCconfig.U_AVCC *= U_SCALE;	// scale to higher resolution, mV scale is not required
     bdc:	80 91 40 01 	lds	r24, 0x0140
     be0:	90 91 41 01 	lds	r25, 0x0141
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	90 93 41 01 	sts	0x0141, r25
     bf0:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.U_Bandgap *= U_SCALE;
     bf4:	80 91 3e 01 	lds	r24, 0x013E
     bf8:	90 91 3f 01 	lds	r25, 0x013F
     bfc:	88 0f       	add	r24, r24
     bfe:	99 1f       	adc	r25, r25
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	90 93 3f 01 	sts	0x013F, r25
     c08:	80 93 3e 01 	sts	0x013E, r24
 #endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = R_ANZ_MESS;	// switch to special number of repetitions
     c0c:	8e eb       	ldi	r24, 0xBE	; 190
     c0e:	80 93 3c 01 	sts	0x013C, r24
#endif
  #define MAX_REPEAT (700 / (5 + R_ANZ_MESS/8))
  ADC_PORT = TXD_VAL;
     c12:	88 e0       	ldi	r24, 0x08	; 8
     c14:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
     c16:	8d 81       	ldd	r24, Y+5	; 0x05
     c18:	87 b9       	out	0x07, r24	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     c1a:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;	
     c1c:	c5 b8       	out	0x05, r12	; 5
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
  for (ii=1;ii<MAX_REPEAT;ii++) {
     c22:	21 e0       	ldi	r18, 0x01	; 1
     c24:	01 c0       	rjmp	.+2      	; 0xc28 <__stack+0x329>
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     c26:	7c 01       	movw	r14, r24
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     c28:	80 2f       	mov	r24, r16
     c2a:	2b 8b       	std	Y+19, r18	; 0x13
     c2c:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
     c30:	48 2e       	mov	r4, r24
     c32:	69 2e       	mov	r6, r25
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     c34:	81 2f       	mov	r24, r17
     c36:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
     udiff = adc.hp1 - adc.hp2;
     c3a:	ac 01       	movw	r20, r24
     c3c:	4e 19       	sub	r20, r14
     c3e:	5f 09       	sbc	r21, r15
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     c40:	2b 89       	ldd	r18, Y+19	; 0x13
     c42:	57 ff       	sbrs	r21, 7
     c44:	03 c0       	rjmp	.+6      	; 0xc4c <__stack+0x34d>
     c46:	50 95       	com	r21
     c48:	41 95       	neg	r20
     c4a:	5f 4f       	sbci	r21, 0xFF	; 255
     c4c:	43 30       	cpi	r20, 0x03	; 3
     c4e:	51 05       	cpc	r21, r1
     c50:	84 f4       	brge	.+32     	; 0xc72 <__stack+0x373>
     c52:	ac 01       	movw	r20, r24
  adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
#endif
  if (adc.tp1 > adc.hp1) {
     adc.tp1 = adc.hp1;
  }
  R_PORT = 0;
     c54:	15 b8       	out	0x05, r1	; 5
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (GND)
     c56:	9a 85       	ldd	r25, Y+10	; 0x0a
     c58:	94 b9       	out	0x04, r25	; 4
  adc.hp2 = W5msReadADC(HighPin);	// read voltage, should be down
     c5a:	81 2f       	mov	r24, r17
     c5c:	4e 8b       	std	Y+22, r20	; 0x16
     c5e:	5b 8b       	std	Y+19, r21	; 0x13
     c60:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
  if (adc.hp2 > (20*U_SCALE)) {
     c64:	4e 89       	ldd	r20, Y+22	; 0x16
     c66:	5b 89       	ldd	r21, Y+19	; 0x13
     c68:	81 35       	cpi	r24, 0x51	; 81
     c6a:	91 05       	cpc	r25, r1
     c6c:	08 f0       	brcs	.+2      	; 0xc70 <__stack+0x371>
     c6e:	b3 c1       	rjmp	.+870    	; 0xfd6 <__stack+0x6d7>
     c70:	05 c0       	rjmp	.+10     	; 0xc7c <__stack+0x37d>
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     udiff = adc.hp1 - adc.hp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.hp2 = adc.hp1;
     wdt_reset();
     c72:	a8 95       	wdr
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     c74:	2f 5f       	subi	r18, 0xFF	; 255
     c76:	29 31       	cpi	r18, 0x19	; 25
     c78:	b1 f6       	brne	.-84     	; 0xc26 <__stack+0x327>
     c7a:	ad c1       	rjmp	.+858    	; 0xfd6 <__stack+0x6d7>
     lcd_string(utoa(adc.hp2, outval, 10));
     lcd_space();
 #endif
     goto testend;
  }
  R_PORT = HiPinRH;		//switch R_H for High-Pin to VCC
     c7c:	aa 85       	ldd	r26, Y+10	; 0x0a
     c7e:	a5 b9       	out	0x05, r26	; 5
  adc.hp2 = W5msReadADC(HighPin);	// voltage at resistor Rx with R_H
     c80:	81 2f       	mov	r24, r17
     c82:	4e 8b       	std	Y+22, r20	; 0x16
     c84:	5b 8b       	std	Y+19, r21	; 0x13
     c86:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
     c8a:	7c 01       	movw	r14, r24

  ADC_DDR = HiADCm;		//switch High-Pin to output
     c8c:	bb 81       	ldd	r27, Y+3	; 0x03
     c8e:	b7 b9       	out	0x07, r27	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
     c90:	b8 b9       	out	0x08, r27	; 8
  R_PORT = 0;
     c92:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
     c94:	ec 81       	ldd	r30, Y+4	; 0x04
     c96:	e4 b9       	out	0x04, r30	; 4
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
     c98:	aa 24       	eor	r10, r10
     c9a:	bb 24       	eor	r11, r11
  for (ii=1;ii<MAX_REPEAT;ii++) {
     c9c:	21 e0       	ldi	r18, 0x01	; 1
     c9e:	4e 89       	ldd	r20, Y+22	; 0x16
     ca0:	5b 89       	ldd	r21, Y+19	; 0x13
     ca2:	4a 01       	movw	r8, r20
     ca4:	01 c0       	rjmp	.+2      	; 0xca8 <__stack+0x3a9>
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     ca6:	56 01       	movw	r10, r12
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     ca8:	81 2f       	mov	r24, r17
     caa:	2b 8b       	std	Y+19, r18	; 0x13
     cac:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
     cb0:	78 2e       	mov	r7, r24
     cb2:	29 2e       	mov	r2, r25
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     cb4:	80 2f       	mov	r24, r16
     cb6:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
     cba:	6c 01       	movw	r12, r24
     udiff = adc.lp1 - adc.lp2;
     cbc:	8a 19       	sub	r24, r10
     cbe:	9b 09       	sbc	r25, r11
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     cc0:	2b 89       	ldd	r18, Y+19	; 0x13
     cc2:	97 ff       	sbrs	r25, 7
     cc4:	03 c0       	rjmp	.+6      	; 0xccc <__stack+0x3cd>
     cc6:	90 95       	com	r25
     cc8:	81 95       	neg	r24
     cca:	9f 4f       	sbci	r25, 0xFF	; 255
     ccc:	83 30       	cpi	r24, 0x03	; 3
     cce:	91 05       	cpc	r25, r1
     cd0:	8c f4       	brge	.+34     	; 0xcf4 <__stack+0x3f5>
     cd2:	a4 01       	movw	r20, r8
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = MEM_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
     cd4:	8c 81       	ldd	r24, Y+4	; 0x04
     cd6:	88 0f       	add	r24, r24
  adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
#endif
  if (adc.tp2 < adc.lp1) {
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
     cd8:	84 b9       	out	0x04, r24	; 4
  adc.lp2 = W5msReadADC(LowPin);
     cda:	80 2f       	mov	r24, r16
     cdc:	8e 8a       	std	Y+22, r8	; 0x16
     cde:	5b 8b       	std	Y+19, r21	; 0x13
     ce0:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
     ce4:	4c 01       	movw	r8, r24
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
     ce6:	4e 89       	ldd	r20, Y+22	; 0x16
     ce8:	5b 89       	ldd	r21, Y+19	; 0x13
     cea:	f4 e4       	ldi	r31, 0x44	; 68
     cec:	40 3c       	cpi	r20, 0xC0	; 192
     cee:	5f 07       	cpc	r21, r31
     cf0:	30 f0       	brcs	.+12     	; 0xcfe <__stack+0x3ff>
     cf2:	0b c0       	rjmp	.+22     	; 0xd0a <__stack+0x40b>
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     udiff = adc.lp1 - adc.lp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.lp2 = adc.lp1;
     wdt_reset();
     cf4:	a8 95       	wdr
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
  R_PORT = 0;
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     cf6:	2f 5f       	subi	r18, 0xFF	; 255
     cf8:	29 31       	cpi	r18, 0x19	; 25
     cfa:	a9 f6       	brne	.-86     	; 0xca6 <__stack+0x3a7>
     cfc:	6c c1       	rjmp	.+728    	; 0xfd6 <__stack+0x6d7>
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
  adc.lp2 = W5msReadADC(LowPin);
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
     cfe:	25 e8       	ldi	r18, 0x85	; 133
     d00:	e2 16       	cp	r14, r18
     d02:	21 e0       	ldi	r18, 0x01	; 1
     d04:	f2 06       	cpc	r15, r18
     d06:	38 f0       	brcs	.+14     	; 0xd16 <__stack+0x417>
     d08:	66 c1       	rjmp	.+716    	; 0xfd6 <__stack+0x6d7>
     lcd_data('F');
 #endif
     goto testend; 
  }
//    if((adc.hp2 + (adc.hp2 / 61)) < adc.hp1)
  if (adc.hp2 < (4972*U_SCALE)) { 
     d0a:	30 eb       	ldi	r19, 0xB0	; 176
     d0c:	e3 16       	cp	r14, r19
     d0e:	3d e4       	ldi	r19, 0x4D	; 77
     d10:	f3 06       	cpc	r15, r19
     d12:	08 f0       	brcs	.+2      	; 0xd16 <__stack+0x417>
     d14:	60 c1       	rjmp	.+704    	; 0xfd6 <__stack+0x6d7>
     // voltage breaks down with low test current and it is not nearly shorted  => resistor
//     if (adc.lp1 < 120) { // take measurement with R_H 
     if (adc.lp1 < (169*U_SCALE)) { // take measurement with R_H 
     d16:	84 ea       	ldi	r24, 0xA4	; 164
     d18:	c8 16       	cp	r12, r24
     d1a:	82 e0       	ldi	r24, 0x02	; 2
     d1c:	d8 06       	cpc	r13, r24
     d1e:	08 f0       	brcs	.+2      	; 0xd22 <__stack+0x423>
     d20:	76 c0       	rjmp	.+236    	; 0xe0e <__stack+0x50f>
        ii = 'H';
        if (adc.lp2 < (38*U_SCALE)) {
     d22:	98 e9       	ldi	r25, 0x98	; 152
     d24:	89 16       	cp	r8, r25
     d26:	91 04       	cpc	r9, r1
     d28:	08 f4       	brcc	.+2      	; 0xd2c <__stack+0x42d>
     d2a:	55 c1       	rjmp	.+682    	; 0xfd6 <__stack+0x6d7>
        }
        // two measurements with R_H resistors (470k) are made:
        // lirx1 (measurement at HighPin)
//        ukorr = (int)(ADCconfig.U_AVCC - adc.hp2) / (ADCconfig.U_AVCC/(7*U_SCALE)) + (2*U_SCALE);
//        adc.hp2 += ukorr;
        lirx1 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)adc.hp2 / ((ADCconfig.U_AVCC*U_SCALE) - adc.hp2);
     d2c:	60 90 40 01 	lds	r6, 0x0140
     d30:	70 90 41 01 	lds	r7, 0x0141
     d34:	b7 01       	movw	r22, r14
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	28 e9       	ldi	r18, 0x98	; 152
     d3c:	37 eb       	ldi	r19, 0xB7	; 183
     d3e:	40 e0       	ldi	r20, 0x00	; 0
     d40:	50 e0       	ldi	r21, 0x00	; 0
     d42:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsi3>
     d46:	93 01       	movw	r18, r6
     d48:	22 0f       	add	r18, r18
     d4a:	33 1f       	adc	r19, r19
     d4c:	22 0f       	add	r18, r18
     d4e:	33 1f       	adc	r19, r19
     d50:	2e 19       	sub	r18, r14
     d52:	3f 09       	sbc	r19, r15
     d54:	40 e0       	ldi	r20, 0x00	; 0
     d56:	50 e0       	ldi	r21, 0x00	; 0
     d58:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
     d5c:	59 01       	movw	r10, r18
     d5e:	6a 01       	movw	r12, r20
        // lirx2 (measurement at LowPin)
//        ukorr = (int)(ADCconfig.U_AVCC/2 - adc.lp2) / (ADCconfig.U_AVCC/(12*U_SCALE));
//        adc.lp2 += ukorr;
        lirx2 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)(ADCconfig.U_AVCC - adc.lp2) / adc.lp2;
     d60:	68 18       	sub	r6, r8
     d62:	79 08       	sbc	r7, r9
     d64:	b3 01       	movw	r22, r6
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	28 e9       	ldi	r18, 0x98	; 152
     d6c:	37 eb       	ldi	r19, 0xB7	; 183
     d6e:	40 e0       	ldi	r20, 0x00	; 0
     d70:	50 e0       	ldi	r21, 0x00	; 0
     d72:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsi3>
     d76:	94 01       	movw	r18, r8
     d78:	40 e0       	ldi	r20, 0x00	; 0
     d7a:	50 e0       	ldi	r21, 0x00	; 0
     d7c:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
#define FAKT_LOW 2		//resolution is about twice as good
#else
#define FAKT_LOW 4		//resolution is about four times better
#endif
#ifdef AUTOSCALE_ADC
        if (adc.hp2 < U_INT_LIMIT) {
     d80:	a8 e7       	ldi	r26, 0x78	; 120
     d82:	ea 16       	cp	r14, r26
     d84:	af e0       	ldi	r26, 0x0F	; 15
     d86:	fa 06       	cpc	r15, r26
     d88:	70 f4       	brcc	.+28     	; 0xda6 <__stack+0x4a7>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_H measurements
     d8a:	c6 01       	movw	r24, r12
     d8c:	b5 01       	movw	r22, r10
     d8e:	b2 e0       	ldi	r27, 0x02	; 2
     d90:	66 0f       	add	r22, r22
     d92:	77 1f       	adc	r23, r23
     d94:	88 1f       	adc	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	ba 95       	dec	r27
     d9a:	d1 f7       	brne	.-12     	; 0xd90 <__stack+0x491>
     d9c:	62 0f       	add	r22, r18
     d9e:	73 1f       	adc	r23, r19
     da0:	84 1f       	adc	r24, r20
     da2:	95 1f       	adc	r25, r21
     da4:	12 c0       	rjmp	.+36     	; 0xdca <__stack+0x4cb>
        } else if (adc.lp2 < U_INT_LIMIT){
     da6:	b8 e7       	ldi	r27, 0x78	; 120
     da8:	8b 16       	cp	r8, r27
     daa:	bf e0       	ldi	r27, 0x0F	; 15
     dac:	9b 06       	cpc	r9, r27
     dae:	a0 f4       	brcc	.+40     	; 0xdd8 <__stack+0x4d9>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
     db0:	ca 01       	movw	r24, r20
     db2:	b9 01       	movw	r22, r18
     db4:	a2 e0       	ldi	r26, 0x02	; 2
     db6:	66 0f       	add	r22, r22
     db8:	77 1f       	adc	r23, r23
     dba:	88 1f       	adc	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	aa 95       	dec	r26
     dc0:	d1 f7       	brne	.-12     	; 0xdb6 <__stack+0x4b7>
     dc2:	6a 0d       	add	r22, r10
     dc4:	7b 1d       	adc	r23, r11
     dc6:	8c 1d       	adc	r24, r12
     dc8:	9d 1d       	adc	r25, r13
     dca:	25 e0       	ldi	r18, 0x05	; 5
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 e0       	ldi	r20, 0x00	; 0
     dd0:	50 e0       	ldi	r21, 0x00	; 0
     dd2:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
     dd6:	08 c0       	rjmp	.+16     	; 0xde8 <__stack+0x4e9>
        } else 
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_H measurements
     dd8:	2a 0d       	add	r18, r10
     dda:	3b 1d       	adc	r19, r11
     ddc:	4c 1d       	adc	r20, r12
     dde:	5d 1d       	adc	r21, r13
     de0:	56 95       	lsr	r21
     de2:	47 95       	ror	r20
     de4:	37 95       	ror	r19
     de6:	27 95       	ror	r18
        }
        lrx1 *= 100;
     de8:	ca 01       	movw	r24, r20
     dea:	b9 01       	movw	r22, r18
     dec:	24 e6       	ldi	r18, 0x64	; 100
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	40 e0       	ldi	r20, 0x00	; 0
     df2:	50 e0       	ldi	r21, 0x00	; 0
     df4:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsi3>
     df8:	6b 01       	movw	r12, r22
     dfa:	7c 01       	movw	r14, r24
        lrx1 += RH_OFFSET;			// add constant for correction of systematic error
     dfc:	8c ea       	ldi	r24, 0xAC	; 172
     dfe:	9d e0       	ldi	r25, 0x0D	; 13
     e00:	a0 e0       	ldi	r26, 0x00	; 0
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	c8 0e       	add	r12, r24
     e06:	d9 1e       	adc	r13, r25
     e08:	ea 1e       	adc	r14, r26
     e0a:	fb 1e       	adc	r15, r27
     e0c:	79 c0       	rjmp	.+242    	; 0xf00 <__stack+0x601>
     e0e:	84 2d       	mov	r24, r4
     e10:	96 2d       	mov	r25, r6
     e12:	48 17       	cp	r20, r24
     e14:	59 07       	cpc	r21, r25
     e16:	08 f4       	brcc	.+2      	; 0xe1a <__stack+0x51b>
     e18:	ca 01       	movw	r24, r20
     e1a:	e7 2c       	mov	r14, r7
     e1c:	f2 2c       	mov	r15, r2
     e1e:	ec 14       	cp	r14, r12
     e20:	fd 04       	cpc	r15, r13
     e22:	08 f4       	brcc	.+2      	; 0xe26 <__stack+0x527>
     e24:	76 01       	movw	r14, r12
     e26:	3c 01       	movw	r6, r24
     e28:	84 17       	cp	r24, r20
     e2a:	95 07       	cpc	r25, r21
     e2c:	08 f4       	brcc	.+2      	; 0xe30 <__stack+0x531>
     e2e:	3a 01       	movw	r6, r20
        // lirx1 (measurement at HighPin)
#if 1
        if (adc.tp1 > adc.hp1) {
           adc.hp1 = adc.tp1;		//diff negativ is illegal
        }
        lirx1 =(unsigned long)RR680PL * (unsigned long)(adc.hp1 - adc.tp1) / (ADCconfig.U_AVCC - adc.hp1);
     e30:	b3 01       	movw	r22, r6
     e32:	68 1b       	sub	r22, r24
     e34:	79 0b       	sbc	r23, r25
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	20 91 0b 01 	lds	r18, 0x010B
     e3e:	30 91 0c 01 	lds	r19, 0x010C
     e42:	40 e0       	ldi	r20, 0x00	; 0
     e44:	50 e0       	ldi	r21, 0x00	; 0
     e46:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsi3>
     e4a:	20 91 40 01 	lds	r18, 0x0140
     e4e:	30 91 41 01 	lds	r19, 0x0141
     e52:	26 19       	sub	r18, r6
     e54:	37 09       	sbc	r19, r7
     e56:	40 e0       	ldi	r20, 0x00	; 0
     e58:	50 e0       	ldi	r21, 0x00	; 0
     e5a:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
     e5e:	49 01       	movw	r8, r18
     e60:	5a 01       	movw	r10, r20
     e62:	27 01       	movw	r4, r14
     e64:	ce 14       	cp	r12, r14
     e66:	df 04       	cpc	r13, r15
     e68:	08 f4       	brcc	.+2      	; 0xe6c <__stack+0x56d>
     e6a:	26 01       	movw	r4, r12
        if (adc.tp2 < adc.lp1) {
           adc.lp1 = adc.tp2;		//diff negativ is illegal
        }
        // lirx2 (Measurement at LowPin)
        lirx2 =(unsigned long)RR680MI * (unsigned long)(adc.tp2 -adc.lp1) / adc.lp1;
     e6c:	e4 18       	sub	r14, r4
     e6e:	f5 08       	sbc	r15, r5
     e70:	b7 01       	movw	r22, r14
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	20 91 04 01 	lds	r18, 0x0104
     e7a:	30 91 05 01 	lds	r19, 0x0105
     e7e:	40 e0       	ldi	r20, 0x00	; 0
     e80:	50 e0       	ldi	r21, 0x00	; 0
     e82:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsi3>
     e86:	92 01       	movw	r18, r4
     e88:	40 e0       	ldi	r20, 0x00	; 0
     e8a:	50 e0       	ldi	r21, 0x00	; 0
     e8c:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
        if (lirx2 > (RR680PL - R_L_VAL))  lirx2 -= (RR680PL - R_L_VAL);
        else     lirx2 = 0;
#endif

#ifdef AUTOSCALE_ADC
        if (adc.hp1 < U_INT_LIMIT) {
     e90:	98 e7       	ldi	r25, 0x78	; 120
     e92:	69 16       	cp	r6, r25
     e94:	9f e0       	ldi	r25, 0x0F	; 15
     e96:	79 06       	cpc	r7, r25
     e98:	70 f4       	brcc	.+28     	; 0xeb6 <__stack+0x5b7>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_L measurements
     e9a:	c5 01       	movw	r24, r10
     e9c:	b4 01       	movw	r22, r8
     e9e:	e2 e0       	ldi	r30, 0x02	; 2
     ea0:	66 0f       	add	r22, r22
     ea2:	77 1f       	adc	r23, r23
     ea4:	88 1f       	adc	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	ea 95       	dec	r30
     eaa:	d1 f7       	brne	.-12     	; 0xea0 <__stack+0x5a1>
     eac:	62 0f       	add	r22, r18
     eae:	73 1f       	adc	r23, r19
     eb0:	84 1f       	adc	r24, r20
     eb2:	95 1f       	adc	r25, r21
     eb4:	12 c0       	rjmp	.+36     	; 0xeda <__stack+0x5db>
        } else if (adc.lp1 < U_INT_LIMIT) {
     eb6:	a8 e7       	ldi	r26, 0x78	; 120
     eb8:	4a 16       	cp	r4, r26
     eba:	af e0       	ldi	r26, 0x0F	; 15
     ebc:	5a 06       	cpc	r5, r26
     ebe:	b0 f4       	brcc	.+44     	; 0xeec <__stack+0x5ed>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
     ec0:	ca 01       	movw	r24, r20
     ec2:	b9 01       	movw	r22, r18
     ec4:	52 e0       	ldi	r21, 0x02	; 2
     ec6:	66 0f       	add	r22, r22
     ec8:	77 1f       	adc	r23, r23
     eca:	88 1f       	adc	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	5a 95       	dec	r21
     ed0:	d1 f7       	brne	.-12     	; 0xec6 <__stack+0x5c7>
     ed2:	68 0d       	add	r22, r8
     ed4:	79 1d       	adc	r23, r9
     ed6:	8a 1d       	adc	r24, r10
     ed8:	9b 1d       	adc	r25, r11
     eda:	25 e0       	ldi	r18, 0x05	; 5
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	40 e0       	ldi	r20, 0x00	; 0
     ee0:	50 e0       	ldi	r21, 0x00	; 0
     ee2:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
     ee6:	69 01       	movw	r12, r18
     ee8:	7a 01       	movw	r14, r20
     eea:	0a c0       	rjmp	.+20     	; 0xf00 <__stack+0x601>
        } else
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_L measurements
     eec:	69 01       	movw	r12, r18
     eee:	7a 01       	movw	r14, r20
     ef0:	c8 0c       	add	r12, r8
     ef2:	d9 1c       	adc	r13, r9
     ef4:	ea 1c       	adc	r14, r10
     ef6:	fb 1c       	adc	r15, r11
     ef8:	f6 94       	lsr	r15
     efa:	e7 94       	ror	r14
     efc:	d7 94       	ror	r13
     efe:	c7 94       	ror	r12
  lcd_line4();
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
     f00:	80 91 09 01 	lds	r24, 0x0109
     f04:	82 30       	cpi	r24, 0x02	; 2
     f06:	18 f0       	brcs	.+6      	; 0xf0e <__stack+0x60f>
     f08:	86 30       	cpi	r24, 0x06	; 6
     f0a:	09 f0       	breq	.+2      	; 0xf0e <__stack+0x60f>
     f0c:	64 c0       	rjmp	.+200    	; 0xfd6 <__stack+0x6d7>
        for (ii=0; ii<ResistorsFound; ii++) {
     f0e:	50 91 59 01 	lds	r21, 0x0159
     f12:	40 e0       	ldi	r20, 0x00	; 0
           // search measurements with inverse polarity 
           thisR = &resis[ii];
           if (thisR->rt != TristatePin) {
     f14:	8b e0       	ldi	r24, 0x0B	; 11
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	3f c0       	rjmp	.+126    	; 0xf98 <__stack+0x699>
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
           // search measurements with inverse polarity 
           thisR = &resis[ii];
     f1a:	24 2f       	mov	r18, r20
     f1c:	30 e0       	ldi	r19, 0x00	; 0
           if (thisR->rt != TristatePin) {
     f1e:	28 9f       	mul	r18, r24
     f20:	f0 01       	movw	r30, r0
     f22:	29 9f       	mul	r18, r25
     f24:	f0 0d       	add	r31, r0
     f26:	38 9f       	mul	r19, r24
     f28:	f0 0d       	add	r31, r0
     f2a:	11 24       	eor	r1, r1
     f2c:	e5 5e       	subi	r30, 0xE5	; 229
     f2e:	fe 4f       	sbci	r31, 0xFE	; 254
     f30:	22 85       	ldd	r18, Z+10	; 0x0a
     f32:	b9 81       	ldd	r27, Y+1	; 0x01
     f34:	2b 17       	cp	r18, r27
     f36:	11 f0       	breq	.+4      	; 0xf3c <__stack+0x63d>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
     f38:	4f 5f       	subi	r20, 0xFF	; 255
     f3a:	2e c0       	rjmp	.+92     	; 0xf98 <__stack+0x699>
           if (thisR->rt != TristatePin) {
              continue;
           }
           // must be measurement with inverse polarity 
           // resolution is 0.1 Ohm, 1 Ohm = 10 !
           lirx1 = (labs((long)lrx1 - (long)thisR->rx) * 10) / (lrx1 + thisR->rx + 100);
     f3c:	80 80       	ld	r8, Z
     f3e:	91 80       	ldd	r9, Z+1	; 0x01
     f40:	a2 80       	ldd	r10, Z+2	; 0x02
     f42:	b3 80       	ldd	r11, Z+3	; 0x03
     f44:	c7 01       	movw	r24, r14
     f46:	b6 01       	movw	r22, r12
     f48:	68 19       	sub	r22, r8
     f4a:	79 09       	sbc	r23, r9
     f4c:	8a 09       	sbc	r24, r10
     f4e:	9b 09       	sbc	r25, r11
     f50:	97 ff       	sbrs	r25, 7
     f52:	07 c0       	rjmp	.+14     	; 0xf62 <__stack+0x663>
     f54:	90 95       	com	r25
     f56:	80 95       	com	r24
     f58:	70 95       	com	r23
     f5a:	61 95       	neg	r22
     f5c:	7f 4f       	sbci	r23, 0xFF	; 255
     f5e:	8f 4f       	sbci	r24, 0xFF	; 255
     f60:	9f 4f       	sbci	r25, 0xFF	; 255
     f62:	2a e0       	ldi	r18, 0x0A	; 10
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	40 e0       	ldi	r20, 0x00	; 0
     f68:	50 e0       	ldi	r21, 0x00	; 0
     f6a:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsi3>
     f6e:	a5 01       	movw	r20, r10
     f70:	94 01       	movw	r18, r8
     f72:	2c 59       	subi	r18, 0x9C	; 156
     f74:	3f 4f       	sbci	r19, 0xFF	; 255
     f76:	4f 4f       	sbci	r20, 0xFF	; 255
     f78:	5f 4f       	sbci	r21, 0xFF	; 255
     f7a:	2c 0d       	add	r18, r12
     f7c:	3d 1d       	adc	r19, r13
     f7e:	4e 1d       	adc	r20, r14
     f80:	5f 1d       	adc	r21, r15
     f82:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
           if (lirx1  > 0) {
     f86:	21 15       	cp	r18, r1
     f88:	31 05       	cpc	r19, r1
     f8a:	41 05       	cpc	r20, r1
     f8c:	51 05       	cpc	r21, r1
     f8e:	19 f5       	brne	.+70     	; 0xfd6 <__stack+0x6d7>
              DisplayValue(lirx1,-1,LCD_CHAR_OMEGA,3)
              lcd_space();
 #endif
              goto testend; // <10% mismatch
           }
           PartFound = PART_RESISTOR;
     f90:	86 e0       	ldi	r24, 0x06	; 6
     f92:	80 93 09 01 	sts	0x0109, r24
           goto testend;
     f96:	1f c0       	rjmp	.+62     	; 0xfd6 <__stack+0x6d7>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
     f98:	45 17       	cp	r20, r21
     f9a:	08 f4       	brcc	.+2      	; 0xf9e <__stack+0x69f>
     f9c:	be cf       	rjmp	.-132    	; 0xf1a <__stack+0x61b>
           }
           PartFound = PART_RESISTOR;
           goto testend;
        } // end for
        // no same resistor with the same Tristate-Pin found, new one
        thisR = &resis[ResistorsFound];		// pointer to a free resistor structure
     f9e:	25 2f       	mov	r18, r21
     fa0:	30 e0       	ldi	r19, 0x00	; 0
        thisR->rx = lrx1;		// save resistor value
     fa2:	8b e0       	ldi	r24, 0x0B	; 11
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	28 9f       	mul	r18, r24
     fa8:	f0 01       	movw	r30, r0
     faa:	29 9f       	mul	r18, r25
     fac:	f0 0d       	add	r31, r0
     fae:	38 9f       	mul	r19, r24
     fb0:	f0 0d       	add	r31, r0
     fb2:	11 24       	eor	r1, r1
     fb4:	e5 5e       	subi	r30, 0xE5	; 229
     fb6:	fe 4f       	sbci	r31, 0xFE	; 254
     fb8:	c0 82       	st	Z, r12
     fba:	d1 82       	std	Z+1, r13	; 0x01
     fbc:	e2 82       	std	Z+2, r14	; 0x02
     fbe:	f3 82       	std	Z+3, r15	; 0x03
#if FLASHEND > 0x1fff
        thisR->lx = 0;			// no inductance
     fc0:	14 82       	std	Z+4, r1	; 0x04
     fc2:	15 82       	std	Z+5, r1	; 0x05
     fc4:	16 82       	std	Z+6, r1	; 0x06
     fc6:	17 82       	std	Z+7, r1	; 0x07
#endif
        thisR->ra = LowPin;		// save Pin numbers
     fc8:	00 87       	std	Z+8, r16	; 0x08
        thisR->rb = HighPin;
     fca:	11 87       	std	Z+9, r17	; 0x09
        thisR->rt = TristatePin;	// Tristate is saved for easier search of inverse measurement
     fcc:	29 81       	ldd	r18, Y+1	; 0x01
     fce:	22 87       	std	Z+10, r18	; 0x0a
        ResistorsFound++;			// 1 more resistor found
     fd0:	5f 5f       	subi	r21, 0xFF	; 255
     fd2:	50 93 59 01 	sts	0x0159, r21
     }
  }
#endif
  testend:
#if U_SCALE != 1
  ADCconfig.U_AVCC /= U_SCALE;		// scale back to mV resolution
     fd6:	80 91 40 01 	lds	r24, 0x0140
     fda:	90 91 41 01 	lds	r25, 0x0141
     fde:	96 95       	lsr	r25
     fe0:	87 95       	ror	r24
     fe2:	96 95       	lsr	r25
     fe4:	87 95       	ror	r24
     fe6:	90 93 41 01 	sts	0x0141, r25
     fea:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.U_Bandgap /= U_SCALE;
     fee:	80 91 3e 01 	lds	r24, 0x013E
     ff2:	90 91 3f 01 	lds	r25, 0x013F
     ff6:	96 95       	lsr	r25
     ff8:	87 95       	ror	r24
     ffa:	96 95       	lsr	r25
     ffc:	87 95       	ror	r24
     ffe:	90 93 3f 01 	sts	0x013F, r25
    1002:	80 93 3e 01 	sts	0x013E, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = ANZ_MESS;		// switch back to standard number of repetition
    1006:	89 e1       	ldi	r24, 0x19	; 25
    1008:	80 93 3c 01 	sts	0x013C, r24
#ifdef DebugOut
#if DebugOut < 10
  wait2s();
#endif
#endif
  ADC_DDR = TXD_MSK;		// all ADC-Pins Input
    100c:	88 e0       	ldi	r24, 0x08	; 8
    100e:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// all ADC outputs to Ground, keine Pull up
    1010:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// all resistor-outputs to Input
    1012:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// all resistor-outputs to Ground, no Pull up
    1014:	15 b8       	out	0x05, r1	; 5
} // end CheckPins()
    1016:	66 96       	adiw	r28, 0x16	; 22
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	ff 90       	pop	r15
    102c:	ef 90       	pop	r14
    102e:	df 90       	pop	r13
    1030:	cf 90       	pop	r12
    1032:	bf 90       	pop	r11
    1034:	af 90       	pop	r10
    1036:	9f 90       	pop	r9
    1038:	8f 90       	pop	r8
    103a:	7f 90       	pop	r7
    103c:	6f 90       	pop	r6
    103e:	5f 90       	pop	r5
    1040:	4f 90       	pop	r4
    1042:	3f 90       	pop	r3
    1044:	2f 90       	pop	r2
    1046:	08 95       	ret

00001048 <EntladePins>:

// first discharge any charge of capacitors
void EntladePins() {
    1048:	af 92       	push	r10
    104a:	bf 92       	push	r11
    104c:	cf 92       	push	r12
    104e:	df 92       	push	r13
    1050:	ef 92       	push	r14
    1052:	ff 92       	push	r15
    1054:	0f 93       	push	r16
    1056:	1f 93       	push	r17
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	ba e0       	ldi	r27, 0x0A	; 10
    105e:	cb 2e       	mov	r12, r27
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
    1060:	a8 e0       	ldi	r26, 0x08	; 8
    1062:	da 2e       	mov	r13, r26
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     R_PORT = 0;			// R-outputs auf 0
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
    1064:	fa e2       	ldi	r31, 0x2A	; 42
    1066:	af 2e       	mov	r10, r31
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
    1068:	e5 e1       	ldi	r30, 0x15	; 21
    106a:	be 2e       	mov	r11, r30
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
    106c:	d7 b8       	out	0x07, r13	; 7
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
    106e:	d8 b8       	out	0x08, r13	; 8
     R_PORT = 0;			// R-outputs auf 0
    1070:	15 b8       	out	0x05, r1	; 5
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
    1072:	a4 b8       	out	0x04, r10	; 4
     adcmv[0] = W5msReadADC(PC0);	// which voltage has Pin 1?
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
    107a:	8c 01       	movw	r16, r24
     adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
    1082:	ec 01       	movw	r28, r24
     adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
     if ((PartFound == PART_CELL) || (adcmv[0] < CAP_EMPTY_LEVEL) & (adcmv[1] < CAP_EMPTY_LEVEL) & (adcmv[2] < CAP_EMPTY_LEVEL)) {
    108a:	20 91 09 01 	lds	r18, 0x0109
    108e:	28 30       	cpi	r18, 0x08	; 8
    1090:	c1 f0       	breq	.+48     	; 0x10c2 <EntladePins+0x7a>
    1092:	41 e0       	ldi	r20, 0x01	; 1
    1094:	c4 30       	cpi	r28, 0x04	; 4
    1096:	d1 05       	cpc	r29, r1
    1098:	08 f0       	brcs	.+2      	; 0x109c <EntladePins+0x54>
    109a:	40 e0       	ldi	r20, 0x00	; 0
    109c:	21 e0       	ldi	r18, 0x01	; 1
    109e:	04 30       	cpi	r16, 0x04	; 4
    10a0:	11 05       	cpc	r17, r1
    10a2:	08 f0       	brcs	.+2      	; 0x10a6 <EntladePins+0x5e>
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	42 23       	and	r20, r18
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	21 e0       	ldi	r18, 0x01	; 1
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	84 30       	cpi	r24, 0x04	; 4
    10b0:	91 05       	cpc	r25, r1
    10b2:	10 f0       	brcs	.+4      	; 0x10b8 <EntladePins+0x70>
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	24 23       	and	r18, r20
    10ba:	35 23       	and	r19, r21
    10bc:	21 15       	cp	r18, r1
    10be:	31 05       	cpc	r19, r1
    10c0:	21 f0       	breq	.+8      	; 0x10ca <EntladePins+0x82>
        ADC_DDR = TXD_MSK;		// switch all ADC-Pins to input
    10c2:	88 e0       	ldi	r24, 0x08	; 8
    10c4:	87 b9       	out	0x07, r24	; 7
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
    10c6:	14 b8       	out	0x04, r1	; 4
        return;
    10c8:	4f c0       	rjmp	.+158    	; 0x1168 <EntladePins+0x120>
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
    10ca:	23 e0       	ldi	r18, 0x03	; 3
    10cc:	08 3e       	cpi	r16, 0xE8	; 232
    10ce:	12 07       	cpc	r17, r18
    10d0:	10 f0       	brcs	.+4      	; 0x10d6 <EntladePins+0x8e>
  uint8_t lop_cnt;		// loop counter
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
    10d2:	28 e0       	ldi	r18, 0x08	; 8
    10d4:	01 c0       	rjmp	.+2      	; 0x10d8 <EntladePins+0x90>
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
        return;
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
        adc_gnd |= (1<<PC0);	//Pin 1 directly to GND
    10d6:	29 e0       	ldi	r18, 0x09	; 9
     }
     if (adcmv[1] < 1000) {
    10d8:	33 e0       	ldi	r19, 0x03	; 3
    10da:	c8 3e       	cpi	r28, 0xE8	; 232
    10dc:	d3 07       	cpc	r29, r19
    10de:	08 f4       	brcc	.+2      	; 0x10e2 <EntladePins+0x9a>
        adc_gnd |= (1<<PC1);	//Pin 2 directly to GND
    10e0:	22 60       	ori	r18, 0x02	; 2
     }
     if (adcmv[2] < 1000) {
    10e2:	33 e0       	ldi	r19, 0x03	; 3
    10e4:	88 3e       	cpi	r24, 0xE8	; 232
    10e6:	93 07       	cpc	r25, r19
    10e8:	08 f4       	brcc	.+2      	; 0x10ec <EntladePins+0xa4>
        adc_gnd |= (1<<PC2);	//Pin 3 directly to  GND
    10ea:	24 60       	ori	r18, 0x04	; 4
     }
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time
    10ec:	27 b9       	out	0x07, r18	; 7

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
    10ee:	b4 b8       	out	0x04, r11	; 4
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    10f0:	c0 e0       	ldi	r28, 0x00	; 0
    10f2:	d0 e0       	ldi	r29, 0x00	; 0
        wdt_reset();
    10f4:	a8 95       	wdr
        adcmv[0] = W20msReadADC(PC0);	// which voltage has Pin 1?
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	0e 94 25 19 	call	0x324a	; 0x324a <W20msReadADC>
    10fc:	7c 01       	movw	r14, r24
        adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
    1104:	8c 01       	movw	r16, r24
        adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
    1106:	82 e0       	ldi	r24, 0x02	; 2
    1108:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
        if (adcmv[0] < 1300) {
    110c:	24 e1       	ldi	r18, 0x14	; 20
    110e:	e2 16       	cp	r14, r18
    1110:	25 e0       	ldi	r18, 0x05	; 5
    1112:	f2 06       	cpc	r15, r18
    1114:	08 f4       	brcc	.+2      	; 0x1118 <EntladePins+0xd0>
           ADC_DDR |= (1<<PC0);	// below 1.3V , switch directly with ADC-Port to GND
    1116:	38 9a       	sbi	0x07, 0	; 7
        }
        if (adcmv[1] < 1300) {
    1118:	35 e0       	ldi	r19, 0x05	; 5
    111a:	04 31       	cpi	r16, 0x14	; 20
    111c:	13 07       	cpc	r17, r19
    111e:	08 f4       	brcc	.+2      	; 0x1122 <EntladePins+0xda>
           ADC_DDR |= (1<<PC1);	// below 1.3V, switch directly with ADC-Port to GND
    1120:	39 9a       	sbi	0x07, 1	; 7
        }
        if (adcmv[2] < 1300) {
    1122:	25 e0       	ldi	r18, 0x05	; 5
    1124:	84 31       	cpi	r24, 0x14	; 20
    1126:	92 07       	cpc	r25, r18
    1128:	08 f4       	brcc	.+2      	; 0x112c <EntladePins+0xe4>
           ADC_DDR |= (1<<PC2);	// below 1.3V, switch directly with ADC-Port to GND
    112a:	3a 9a       	sbi	0x07, 2	; 7
        }
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
    112c:	36 e0       	ldi	r19, 0x06	; 6
    112e:	e3 16       	cp	r14, r19
    1130:	f1 04       	cpc	r15, r1
    1132:	30 f4       	brcc	.+12     	; 0x1140 <EntladePins+0xf8>
    1134:	06 30       	cpi	r16, 0x06	; 6
    1136:	11 05       	cpc	r17, r1
    1138:	18 f4       	brcc	.+6      	; 0x1140 <EntladePins+0xf8>
    113a:	86 30       	cpi	r24, 0x06	; 6
    113c:	91 05       	cpc	r25, r1
    113e:	38 f0       	brcs	.+14     	; 0x114e <EntladePins+0x106>

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    1140:	21 96       	adiw	r28, 0x01	; 1
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	c4 3f       	cpi	r28, 0xF4	; 244
    1146:	d8 07       	cpc	r29, r24
    1148:	a9 f6       	brne	.-86     	; 0x10f4 <EntladePins+0xac>
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
           break;
        }
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
    114a:	d0 92 09 01 	sts	0x0109, r13

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    114e:	00 e0       	ldi	r16, 0x00	; 0
    1150:	10 e0       	ldi	r17, 0x00	; 0
    1152:	04 c0       	rjmp	.+8      	; 0x115c <EntladePins+0x114>
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
    1154:	0e 94 12 19 	call	0x3224	; 0x3224 <wait1ms>
    1158:	0f 5f       	subi	r16, 0xFF	; 255
    115a:	1f 4f       	sbci	r17, 0xFF	; 255
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
    115c:	0c 17       	cp	r16, r28
    115e:	1d 07       	cpc	r17, r29
    1160:	c8 f3       	brcs	.-14     	; 0x1154 <EntladePins+0x10c>
    1162:	ca 94       	dec	r12
  unsigned int clr_cnt;		// Clear Counter
  uint8_t lop_cnt;		// loop counter
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
    1164:	09 f0       	breq	.+2      	; 0x1168 <EntladePins+0x120>
    1166:	82 cf       	rjmp	.-252    	; 0x106c <EntladePins+0x24>
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     }
  } // end while
 }
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	ff 90       	pop	r15
    1172:	ef 90       	pop	r14
    1174:	df 90       	pop	r13
    1176:	cf 90       	pop	r12
    1178:	bf 90       	pop	r11
    117a:	af 90       	pop	r10
    117c:	08 95       	ret

0000117e <ReadInductance>:

unsigned long CombineII2Long( unsigned int ovcnt16, unsigned int tmpcnt); //tricky function to build unsigned long from two unsigned int values


//=================================================================
void ReadInductance(void) {
    117e:	2f 92       	push	r2
    1180:	3f 92       	push	r3
    1182:	4f 92       	push	r4
    1184:	5f 92       	push	r5
    1186:	6f 92       	push	r6
    1188:	7f 92       	push	r7
    118a:	8f 92       	push	r8
    118c:	9f 92       	push	r9
    118e:	af 92       	push	r10
    1190:	bf 92       	push	r11
    1192:	cf 92       	push	r12
    1194:	df 92       	push	r13
    1196:	ef 92       	push	r14
    1198:	ff 92       	push	r15
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	a0 97       	sbiw	r28, 0x20	; 32
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
  uint8_t found;	// variable used for searching resistors 
  uint8_t LowPin;	// number of pin with low voltage
  uint8_t HighPin;	// number of pin with high voltage 


  if(PartFound != PART_RESISTOR) {
    11b2:	80 91 09 01 	lds	r24, 0x0109
    11b6:	86 30       	cpi	r24, 0x06	; 6
    11b8:	09 f0       	breq	.+2      	; 0x11bc <ReadInductance+0x3e>
    11ba:	24 c2       	rjmp	.+1096   	; 0x1604 <ReadInductance+0x486>
    11bc:	19 8a       	std	Y+17, r1	; 0x11
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 28000) continue;
    11be:	ab e0       	ldi	r26, 0x0B	; 11
    11c0:	2a 2e       	mov	r2, r26
    11c2:	31 2c       	mov	r3, r1
    11c4:	16 c2       	rjmp	.+1068   	; 0x15f2 <ReadInductance+0x474>
    11c6:	29 89       	ldd	r18, Y+17	; 0x11
    11c8:	62 2e       	mov	r6, r18
    11ca:	77 24       	eor	r7, r7
    11cc:	62 9c       	mul	r6, r2
    11ce:	f0 01       	movw	r30, r0
    11d0:	63 9c       	mul	r6, r3
    11d2:	f0 0d       	add	r31, r0
    11d4:	72 9c       	mul	r7, r2
    11d6:	f0 0d       	add	r31, r0
    11d8:	11 24       	eor	r1, r1
    11da:	e5 5e       	subi	r30, 0xE5	; 229
    11dc:	fe 4f       	sbci	r31, 0xFE	; 254
    11de:	80 81       	ld	r24, Z
    11e0:	91 81       	ldd	r25, Z+1	; 0x01
    11e2:	a2 81       	ldd	r26, Z+2	; 0x02
    11e4:	b3 81       	ldd	r27, Z+3	; 0x03
    11e6:	81 36       	cpi	r24, 0x61	; 97
    11e8:	3d e6       	ldi	r19, 0x6D	; 109
    11ea:	93 07       	cpc	r25, r19
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	a3 07       	cpc	r26, r19
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	b3 07       	cpc	r27, r19
    11f4:	08 f0       	brcs	.+2      	; 0x11f8 <ReadInductance+0x7a>
    11f6:	fa c1       	rjmp	.+1012   	; 0x15ec <ReadInductance+0x46e>
    11f8:	ff 24       	eor	r15, r15
           // first and second pass, direction 1
           LowPin = resis[found].ra;
           HighPin = resis[found].rb;
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    11fa:	fb 8b       	std	Y+19, r31	; 0x13
    11fc:	ea 8b       	std	Y+18, r30	; 0x12
    11fe:	39 96       	adiw	r30, 0x09	; 9
    1200:	fb 8f       	std	Y+27, r31	; 0x1b
    1202:	ea 8f       	std	Y+26, r30	; 0x1a
           HighPin = resis[found].ra;
    1204:	4a 89       	ldd	r20, Y+18	; 0x12
    1206:	5b 89       	ldd	r21, Y+19	; 0x13
    1208:	48 5f       	subi	r20, 0xF8	; 248
    120a:	5f 4f       	sbci	r21, 0xFF	; 255
    120c:	5d 8f       	std	Y+29, r21	; 0x1d
    120e:	4c 8f       	std	Y+28, r20	; 0x1c
           // this OV was not counted, but was before the Input Capture
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
           ovcnt16++;
        }
        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    1210:	7f 8e       	std	Y+31, r7	; 0x1f
    1212:	6e 8e       	std	Y+30, r6	; 0x1e
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 28000) continue;
     // we can check for Inductance, if resistance is below 2800 Ohm
     for (count=0;count<4;count++) {
        // Try four times (different direction and with delayed counter start)
        if (count < 2) {
    1214:	5f 2d       	mov	r21, r15
    1216:	52 30       	cpi	r21, 0x02	; 2
    1218:	30 f4       	brcc	.+12     	; 0x1226 <ReadInductance+0xa8>
           // first and second pass, direction 1
           LowPin = resis[found].ra;
    121a:	ec 8d       	ldd	r30, Y+28	; 0x1c
    121c:	fd 8d       	ldd	r31, Y+29	; 0x1d
    121e:	e0 80       	ld	r14, Z
           HighPin = resis[found].rb;
    1220:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1222:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1224:	05 c0       	rjmp	.+10     	; 0x1230 <ReadInductance+0xb2>
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    1226:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1228:	fb 8d       	ldd	r31, Y+27	; 0x1b
    122a:	e0 80       	ld	r14, Z
           HighPin = resis[found].ra;
    122c:	ec 8d       	ldd	r30, Y+28	; 0x1c
    122e:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1230:	80 80       	ld	r8, Z
        }
        HiADC = MEM_read_byte(&PinADCtab[HighPin]);
    1232:	88 2d       	mov	r24, r8
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	82 5b       	subi	r24, 0xB2	; 178
    1238:	9d 4f       	sbci	r25, 0xFD	; 253
    123a:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__eerd_byte_m328p>
    123e:	a8 2e       	mov	r10, r24
        LoPinR_L = MEM_read_byte(&PinRLtab[LowPin]);	//R_L mask for HighPin R_L load
    1240:	8e 2d       	mov	r24, r14
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	85 5b       	subi	r24, 0xB5	; 181
    1246:	9d 4f       	sbci	r25, 0xFD	; 253
    1248:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__eerd_byte_m328p>
        //==================================================================================
        // Measurement of Inductance values
        R_PORT = 0;		// switch R port to GND
    124c:	15 b8       	out	0x05, r1	; 5
        ADC_PORT =   TXD_VAL;		// switch ADC-Port to GND
    124e:	f8 e0       	ldi	r31, 0x08	; 8
    1250:	f8 b9       	out	0x08, r31	; 8
        if ((resis[found].rx < 80) && ((count & 0x01) == 0)) {
    1252:	ea 89       	ldd	r30, Y+18	; 0x12
    1254:	fb 89       	ldd	r31, Y+19	; 0x13
    1256:	20 81       	ld	r18, Z
    1258:	31 81       	ldd	r19, Z+1	; 0x01
    125a:	42 81       	ldd	r20, Z+2	; 0x02
    125c:	53 81       	ldd	r21, Z+3	; 0x03
    125e:	20 35       	cpi	r18, 0x50	; 80
    1260:	31 05       	cpc	r19, r1
    1262:	41 05       	cpc	r20, r1
    1264:	51 05       	cpc	r21, r1
    1266:	b8 f4       	brcc	.+46     	; 0x1296 <ReadInductance+0x118>
    1268:	f0 fc       	sbrc	r15, 0
    126a:	15 c0       	rjmp	.+42     	; 0x1296 <ReadInductance+0x118>
           // we can use PinR_L for measurement
           mess_r = RR680MI - R_L_VAL;
    126c:	c0 90 04 01 	lds	r12, 0x0104
    1270:	d0 90 05 01 	lds	r13, 0x0105
    1274:	20 e7       	ldi	r18, 0x70	; 112
    1276:	35 ee       	ldi	r19, 0xE5	; 229
    1278:	c2 0e       	add	r12, r18
    127a:	d3 1e       	adc	r13, r19
           ADC_DDR = HiADC | (1<<LowPin) | TXD_MSK;	// switch HiADC and Low Pin to GND, 
    127c:	2a 2d       	mov	r18, r10
    127e:	28 60       	ori	r18, 0x08	; 8
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	0e 2c       	mov	r0, r14
    1286:	02 c0       	rjmp	.+4      	; 0x128c <ReadInductance+0x10e>
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	0a 94       	dec	r0
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <ReadInductance+0x10a>
    1290:	28 2b       	or	r18, r24
    1292:	27 b9       	out	0x07, r18	; 7
    1294:	08 c0       	rjmp	.+16     	; 0x12a6 <ReadInductance+0x128>
        } else {
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
    1296:	84 b9       	out	0x04, r24	; 4
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
    1298:	8a 2d       	mov	r24, r10
    129a:	88 60       	ori	r24, 0x08	; 8
    129c:	87 b9       	out	0x07, r24	; 7
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
    129e:	c0 90 04 01 	lds	r12, 0x0104
    12a2:	d0 90 05 01 	lds	r13, 0x0105

  if(PartFound != PART_RESISTOR) {
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 28000) continue;
    12a6:	f4 e1       	ldi	r31, 0x14	; 20
    12a8:	7f 2e       	mov	r7, r31
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    12aa:	8e 2d       	mov	r24, r14
    12ac:	0e 94 27 19 	call	0x324e	; 0x324e <W10msReadADC>
    12b0:	8c 01       	movw	r16, r24
            total_r =  ReadADC(HighPin);
    12b2:	88 2d       	mov	r24, r8
    12b4:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    12b8:	02 30       	cpi	r16, 0x02	; 2
    12ba:	11 05       	cpc	r17, r1
    12bc:	18 f4       	brcc	.+6      	; 0x12c4 <ReadInductance+0x146>
    12be:	82 30       	cpi	r24, 0x02	; 2
    12c0:	91 05       	cpc	r25, r1
    12c2:	10 f0       	brcs	.+4      	; 0x12c8 <ReadInductance+0x14a>
    12c4:	7a 94       	dec	r7
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    12c6:	89 f7       	brne	.-30     	; 0x12aa <ReadInductance+0x12c>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
        // setup Analog Comparator
        ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    12c8:	30 e4       	ldi	r19, 0x40	; 64
    12ca:	30 93 7b 00 	sts	0x007B, r19
        ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    12ce:	44 e5       	ldi	r20, 0x54	; 84
    12d0:	40 bf       	out	0x30, r20	; 48
        ADMUX = (1<<REFS0) | LowPin;			// switch Mux to Low-Pin
    12d2:	8e 2d       	mov	r24, r14
    12d4:	80 64       	ori	r24, 0x40	; 64
    12d6:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    12da:	56 e1       	ldi	r21, 0x16	; 22
    12dc:	50 93 7a 00 	sts	0x007A, r21
   
      // setup Counter1
        ovcnt16 = 0;
        TCCR1A = 0;			// set Counter1 to normal Mode
    12e0:	10 92 80 00 	sts	0x0080, r1
        TCNT1 = 0;			//set Counter to 0
    12e4:	10 92 85 00 	sts	0x0085, r1
    12e8:	10 92 84 00 	sts	0x0084, r1
        TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// mega88
    12ec:	87 e2       	ldi	r24, 0x27	; 39
    12ee:	86 bb       	out	0x16, r24	; 22
        HiADC |= TXD_VAL;
    12f0:	0a 2d       	mov	r16, r10
    12f2:	08 60       	ori	r16, 0x08	; 8
        wait200us();			// wait for bandgap to start up
    12f4:	0e 94 16 19 	call	0x322c	; 0x322c <wait200us>
        if ((count & 0x01) == 0 ) {
    12f8:	4f 2c       	mov	r4, r15
    12fa:	55 24       	eor	r5, r5
    12fc:	f2 01       	movw	r30, r4
    12fe:	e1 70       	andi	r30, 0x01	; 1
    1300:	f0 70       	andi	r31, 0x00	; 0
    1302:	fd 8b       	std	Y+21, r31	; 0x15
    1304:	ec 8b       	std	Y+20, r30	; 0x14
    1306:	f0 fc       	sbrc	r15, 0
    1308:	05 c0       	rjmp	.+10     	; 0x1314 <ReadInductance+0x196>
           //first start counter, then start current
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    130a:	f1 e8       	ldi	r31, 0x81	; 129
    130c:	f0 93 81 00 	sts	0x0081, r31
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    1310:	08 b9       	out	0x08, r16	; 8
    1312:	08 c0       	rjmp	.+16     	; 0x1324 <ReadInductance+0x1a6>
        } else {
           //first start current, then start counter with delay
           //parasitic capacity of coil can cause high current at the beginning
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    1314:	08 b9       	out	0x08, r16	; 8
      #if F_CPU >= 8000000UL
           wait3us();		// ignore current peak from capacity
    1316:	0e 94 1f 19 	call	0x323e	; 0x323e <wait3us>
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
    131a:	20 e2       	ldi	r18, 0x20	; 32
    131c:	26 bb       	out	0x16, r18	; 22
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    131e:	31 e8       	ldi	r19, 0x81	; 129
    1320:	30 93 81 00 	sts	0x0081, r19

  if(PartFound != PART_RESISTOR) {
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 28000) continue;
    1324:	00 e0       	ldi	r16, 0x00	; 0
    1326:	10 e0       	ldi	r17, 0x00	; 0
        }
      
      //******************************
        while(1) {
           // Wait, until  Input Capture is set
           ii = TI1_INT_FLAGS;		//read Timer flags
    1328:	26 b3       	in	r18, 0x16	; 22
           if (ii & (1<<ICF1))  {
    132a:	25 fd       	sbrc	r18, 5
    132c:	0a c0       	rjmp	.+20     	; 0x1342 <ReadInductance+0x1c4>
              break;
           }
           if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    132e:	20 ff       	sbrs	r18, 0
    1330:	fb cf       	rjmp	.-10     	; 0x1328 <ReadInductance+0x1aa>
              TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    1332:	41 e0       	ldi	r20, 0x01	; 1
    1334:	46 bb       	out	0x16, r20	; 22
              wdt_reset();
    1336:	a8 95       	wdr
              ovcnt16++;
    1338:	0f 5f       	subi	r16, 0xFF	; 255
    133a:	1f 4f       	sbci	r17, 0xFF	; 255
              if(ovcnt16 == (F_CPU/100000)) {
    133c:	00 35       	cpi	r16, 0x50	; 80
    133e:	11 05       	cpc	r17, r1
    1340:	99 f7       	brne	.-26     	; 0x1328 <ReadInductance+0x1aa>
                 break; 	//Timeout for Charging, above 0.13 s
              }
           }
        }
        TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    1342:	10 92 81 00 	sts	0x0081, r1
        TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    1346:	50 e2       	ldi	r21, 0x20	; 32
    1348:	56 bb       	out	0x16, r21	; 22
        tmpint = ICR1;		// get previous Input Capture Counter flag
    134a:	a0 90 86 00 	lds	r10, 0x0086
    134e:	b0 90 87 00 	lds	r11, 0x0087
      // check actual counter, if an additional overflow must be added
        if((TCNT1 > tmpint) && (ii & (1<<TOV1))) {
    1352:	80 91 84 00 	lds	r24, 0x0084
    1356:	90 91 85 00 	lds	r25, 0x0085
    135a:	a8 16       	cp	r10, r24
    135c:	b9 06       	cpc	r11, r25
    135e:	30 f4       	brcc	.+12     	; 0x136c <ReadInductance+0x1ee>
    1360:	20 ff       	sbrs	r18, 0
    1362:	04 c0       	rjmp	.+8      	; 0x136c <ReadInductance+0x1ee>
           // this OV was not counted, but was before the Input Capture
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	86 bb       	out	0x16, r24	; 22
           ovcnt16++;
    1368:	0f 5f       	subi	r16, 0xFF	; 255
    136a:	1f 4f       	sbci	r17, 0xFF	; 255
        }
        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    136c:	98 e0       	ldi	r25, 0x08	; 8
    136e:	98 b9       	out	0x08, r25	; 8
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    1370:	e6 e9       	ldi	r30, 0x96	; 150
    1372:	e0 93 7a 00 	sts	0x007A, r30
        for (ii=0;ii<20;ii++) {
    1376:	40 e0       	ldi	r20, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    1378:	8e 2d       	mov	r24, r14
    137a:	48 a3       	std	Y+32, r20	; 0x20
    137c:	0e 94 27 19 	call	0x324e	; 0x324e <W10msReadADC>
    1380:	3c 01       	movw	r6, r24
            total_r =  ReadADC(HighPin);
    1382:	88 2d       	mov	r24, r8
    1384:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    1388:	48 a1       	ldd	r20, Y+32	; 0x20
    138a:	f2 e0       	ldi	r31, 0x02	; 2
    138c:	6f 16       	cp	r6, r31
    138e:	71 04       	cpc	r7, r1
    1390:	18 f4       	brcc	.+6      	; 0x1398 <ReadInductance+0x21a>
    1392:	82 30       	cpi	r24, 0x02	; 2
    1394:	91 05       	cpc	r25, r1
    1396:	18 f0       	brcs	.+6      	; 0x139e <ReadInductance+0x220>
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
           ovcnt16++;
        }
        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
        for (ii=0;ii<20;ii++) {
    1398:	4f 5f       	subi	r20, 0xFF	; 255
    139a:	44 31       	cpi	r20, 0x14	; 20
    139c:	69 f7       	brne	.-38     	; 0x1378 <ReadInductance+0x1fa>
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
        cval = CombineII2Long(ovcnt16, tmpint);
    139e:	c8 01       	movw	r24, r16
    13a0:	b5 01       	movw	r22, r10
    13a2:	0e 94 24 19 	call	0x3248	; 0x3248 <CombineII2Long>
        if (cval > 6) cval -= 6;
    13a6:	67 30       	cpi	r22, 0x07	; 7
    13a8:	71 05       	cpc	r23, r1
    13aa:	81 05       	cpc	r24, r1
    13ac:	91 05       	cpc	r25, r1
    13ae:	68 f0       	brcs	.+26     	; 0x13ca <ReadInductance+0x24c>
    13b0:	66 50       	subi	r22, 0x06	; 6
    13b2:	70 40       	sbci	r23, 0x00	; 0
    13b4:	80 40       	sbci	r24, 0x00	; 0
    13b6:	90 40       	sbci	r25, 0x00	; 0
    13b8:	60 93 7b 01 	sts	0x017B, r22
    13bc:	70 93 7c 01 	sts	0x017C, r23
    13c0:	80 93 7d 01 	sts	0x017D, r24
    13c4:	90 93 7e 01 	sts	0x017E, r25
    13c8:	08 c0       	rjmp	.+16     	; 0x13da <ReadInductance+0x25c>
        else          cval = 0;
    13ca:	10 92 7b 01 	sts	0x017B, r1
    13ce:	10 92 7c 01 	sts	0x017C, r1
    13d2:	10 92 7d 01 	sts	0x017D, r1
    13d6:	10 92 7e 01 	sts	0x017E, r1
        if ((count&0x01) == 1) {
    13da:	2c 89       	ldd	r18, Y+20	; 0x14
    13dc:	3d 89       	ldd	r19, Y+21	; 0x15
    13de:	21 15       	cp	r18, r1
    13e0:	31 05       	cpc	r19, r1
    13e2:	99 f0       	breq	.+38     	; 0x140a <ReadInductance+0x28c>
           // second pass with delayed counter start
           cval += (3 * (F_CPU/1000000))+10;
    13e4:	80 91 7b 01 	lds	r24, 0x017B
    13e8:	90 91 7c 01 	lds	r25, 0x017C
    13ec:	a0 91 7d 01 	lds	r26, 0x017D
    13f0:	b0 91 7e 01 	lds	r27, 0x017E
    13f4:	82 96       	adiw	r24, 0x22	; 34
    13f6:	a1 1d       	adc	r26, r1
    13f8:	b1 1d       	adc	r27, r1
    13fa:	80 93 7b 01 	sts	0x017B, r24
    13fe:	90 93 7c 01 	sts	0x017C, r25
    1402:	a0 93 7d 01 	sts	0x017D, r26
    1406:	b0 93 7e 01 	sts	0x017E, r27
        }
        if (ovcnt16 >= (F_CPU/100000)) cval = 0; // no transition found
    140a:	00 35       	cpi	r16, 0x50	; 80
    140c:	11 05       	cpc	r17, r1
    140e:	40 f0       	brcs	.+16     	; 0x1420 <ReadInductance+0x2a2>
    1410:	10 92 7b 01 	sts	0x017B, r1
    1414:	10 92 7c 01 	sts	0x017C, r1
    1418:	10 92 7d 01 	sts	0x017D, r1
    141c:	10 92 7e 01 	sts	0x017E, r1
        total_r = (mess_r + resis[0].rx + RR680PL - R_L_VAL);
    1420:	80 91 0b 01 	lds	r24, 0x010B
    1424:	90 91 0c 01 	lds	r25, 0x010C
    1428:	80 59       	subi	r24, 0x90	; 144
    142a:	9a 41       	sbci	r25, 0x1A	; 26
    142c:	20 91 1b 01 	lds	r18, 0x011B
    1430:	30 91 1c 01 	lds	r19, 0x011C
    1434:	82 0f       	add	r24, r18
    1436:	93 1f       	adc	r25, r19
    1438:	8c 0d       	add	r24, r12
    143a:	9d 1d       	adc	r25, r13
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    143c:	9c 01       	movw	r18, r24
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	50 e0       	ldi	r21, 0x00	; 0
    1442:	2e 8b       	std	Y+22, r18	; 0x16
    1444:	3f 8b       	std	Y+23, r19	; 0x17
    1446:	48 8f       	std	Y+24, r20	; 0x18
    1448:	59 8f       	std	Y+25, r21	; 0x19
        // Voltage of comparator in % of umax
        #ifdef AUTO_CAL
        per_ref = ((unsigned long)(ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset))) * 100) / umax;
    144a:	8d e5       	ldi	r24, 0x5D	; 93
    144c:	92 e0       	ldi	r25, 0x02	; 2
    144e:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__eerd_word_m328p>
    1452:	60 91 42 01 	lds	r22, 0x0142
    1456:	70 91 43 01 	lds	r23, 0x0143
    145a:	68 0f       	add	r22, r24
    145c:	79 1f       	adc	r23, r25
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	24 e6       	ldi	r18, 0x64	; 100
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	40 e0       	ldi	r20, 0x00	; 0
    1468:	50 e0       	ldi	r21, 0x00	; 0
    146a:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsi3>
    146e:	4b 01       	movw	r8, r22
    1470:	5c 01       	movw	r10, r24
           cval += (3 * (F_CPU/1000000))+10;
        }
        if (ovcnt16 >= (F_CPU/100000)) cval = 0; // no transition found
        total_r = (mess_r + resis[0].rx + RR680PL - R_L_VAL);
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    1472:	b6 01       	movw	r22, r12
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	20 91 40 01 	lds	r18, 0x0140
    147c:	30 91 41 01 	lds	r19, 0x0141
    1480:	40 e0       	ldi	r20, 0x00	; 0
    1482:	50 e0       	ldi	r21, 0x00	; 0
    1484:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsi3>
    1488:	2e 89       	ldd	r18, Y+22	; 0x16
    148a:	3f 89       	ldd	r19, Y+23	; 0x17
    148c:	48 8d       	ldd	r20, Y+24	; 0x18
    148e:	59 8d       	ldd	r21, Y+25	; 0x19
    1490:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
        // Voltage of comparator in % of umax
        #ifdef AUTO_CAL
        per_ref = ((unsigned long)(ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset))) * 100) / umax;
    1494:	40 e0       	ldi	r20, 0x00	; 0
    1496:	50 e0       	ldi	r21, 0x00	; 0
    1498:	c5 01       	movw	r24, r10
    149a:	b4 01       	movw	r22, r8
    149c:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
        #else
        per_ref = ((unsigned long)(ref_mv + REF_C_KORR) * 100) / umax;
        #endif
        per_ref = (uint8_t)MEM2_read_byte(&LogTab[per_ref]);	// -log(1 - per_ref/100)
    14a0:	82 2f       	mov	r24, r18
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	86 5a       	subi	r24, 0xA6	; 166
    14a6:	9f 4f       	sbci	r25, 0xFF	; 255
    14a8:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__eerd_byte_m328p>
    14ac:	08 2f       	mov	r16, r24
        // lx in 0.01mH units,  L = Tau * R
        inductance[count] = (cval * total_r ) / ((unsigned int)per_ref * (F_CPU/1000000));
    14ae:	20 91 7b 01 	lds	r18, 0x017B
    14b2:	30 91 7c 01 	lds	r19, 0x017C
    14b6:	40 91 7d 01 	lds	r20, 0x017D
    14ba:	50 91 7e 01 	lds	r21, 0x017E
    14be:	6e 89       	ldd	r22, Y+22	; 0x16
    14c0:	7f 89       	ldd	r23, Y+23	; 0x17
    14c2:	88 8d       	ldd	r24, Y+24	; 0x18
    14c4:	99 8d       	ldd	r25, Y+25	; 0x19
    14c6:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsi3>
    14ca:	20 2f       	mov	r18, r16
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	40 e0       	ldi	r20, 0x00	; 0
    14d0:	50 e0       	ldi	r21, 0x00	; 0
    14d2:	e3 e0       	ldi	r30, 0x03	; 3
    14d4:	22 0f       	add	r18, r18
    14d6:	33 1f       	adc	r19, r19
    14d8:	44 1f       	adc	r20, r20
    14da:	55 1f       	adc	r21, r21
    14dc:	ea 95       	dec	r30
    14de:	d1 f7       	brne	.-12     	; 0x14d4 <ReadInductance+0x356>
    14e0:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
    14e4:	f2 01       	movw	r30, r4
    14e6:	ee 0f       	add	r30, r30
    14e8:	ff 1f       	adc	r31, r31
    14ea:	ee 0f       	add	r30, r30
    14ec:	ff 1f       	adc	r31, r31
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	8c 0f       	add	r24, r28
    14f4:	9d 1f       	adc	r25, r29
    14f6:	e8 0f       	add	r30, r24
    14f8:	f9 1f       	adc	r31, r25
    14fa:	20 83       	st	Z, r18
    14fc:	31 83       	std	Z+1, r19	; 0x01
    14fe:	42 83       	std	Z+2, r20	; 0x02
    1500:	53 83       	std	Z+3, r21	; 0x03
        if (((count&0x01) == 0) && (inductance[count] > (F_CPU/1000000))) {
    1502:	ec 89       	ldd	r30, Y+20	; 0x14
    1504:	fd 89       	ldd	r31, Y+21	; 0x15
    1506:	30 97       	sbiw	r30, 0x00	; 0
    1508:	91 f4       	brne	.+36     	; 0x152e <ReadInductance+0x3b0>
    150a:	29 30       	cpi	r18, 0x09	; 9
    150c:	31 05       	cpc	r19, r1
    150e:	41 05       	cpc	r20, r1
    1510:	51 05       	cpc	r21, r1
    1512:	68 f0       	brcs	.+26     	; 0x152e <ReadInductance+0x3b0>
           // transition is found, measurement with delayed counter start is not necessary
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
    1514:	f2 01       	movw	r30, r4
    1516:	31 96       	adiw	r30, 0x01	; 1
    1518:	ee 0f       	add	r30, r30
    151a:	ff 1f       	adc	r31, r31
    151c:	ee 0f       	add	r30, r30
    151e:	ff 1f       	adc	r31, r31
    1520:	e8 0f       	add	r30, r24
    1522:	f9 1f       	adc	r31, r25
    1524:	20 83       	st	Z, r18
    1526:	31 83       	std	Z+1, r19	; 0x01
    1528:	42 83       	std	Z+2, r20	; 0x02
    152a:	53 83       	std	Z+3, r21	; 0x03
           count++;		// skip the delayed measurement
    152c:	f3 94       	inc	r15
        }
        wdt_reset();
    152e:	a8 95       	wdr
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 28000) continue;
     // we can check for Inductance, if resistance is below 2800 Ohm
     for (count=0;count<4;count++) {
    1530:	f3 94       	inc	r15
    1532:	ff 2d       	mov	r31, r15
    1534:	f4 30       	cpi	r31, 0x04	; 4
    1536:	08 f4       	brcc	.+2      	; 0x153a <ReadInductance+0x3bc>
    1538:	6d ce       	rjmp	.-806    	; 0x1214 <ReadInductance+0x96>
    153a:	6e 8c       	ldd	r6, Y+30	; 0x1e
    153c:	7f 8c       	ldd	r7, Y+31	; 0x1f
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
           count++;		// skip the delayed measurement
        }
        wdt_reset();
     }  //end for count
     ADC_PORT = TXD_VAL;		// switch ADC Port to GND
    153e:	28 e0       	ldi	r18, 0x08	; 8
    1540:	28 b9       	out	0x08, r18	; 8
     wait20ms();
    1542:	0e 94 0c 19 	call	0x3218	; 0x3218 <wait20ms>
     if (inductance[1] > inductance[0]) {
    1546:	2d 81       	ldd	r18, Y+5	; 0x05
    1548:	3e 81       	ldd	r19, Y+6	; 0x06
    154a:	4f 81       	ldd	r20, Y+7	; 0x07
    154c:	58 85       	ldd	r21, Y+8	; 0x08
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	9a 81       	ldd	r25, Y+2	; 0x02
    1552:	ab 81       	ldd	r26, Y+3	; 0x03
    1554:	bc 81       	ldd	r27, Y+4	; 0x04
    1556:	82 17       	cp	r24, r18
    1558:	93 07       	cpc	r25, r19
    155a:	a4 07       	cpc	r26, r20
    155c:	b5 07       	cpc	r27, r21
    155e:	70 f4       	brcc	.+28     	; 0x157c <ReadInductance+0x3fe>
        resis[found].lx = inductance[1];	// use value found with delayed counter start
    1560:	62 9c       	mul	r6, r2
    1562:	f0 01       	movw	r30, r0
    1564:	63 9c       	mul	r6, r3
    1566:	f0 0d       	add	r31, r0
    1568:	72 9c       	mul	r7, r2
    156a:	f0 0d       	add	r31, r0
    156c:	11 24       	eor	r1, r1
    156e:	e5 5e       	subi	r30, 0xE5	; 229
    1570:	fe 4f       	sbci	r31, 0xFE	; 254
    1572:	24 83       	std	Z+4, r18	; 0x04
    1574:	35 83       	std	Z+5, r19	; 0x05
    1576:	46 83       	std	Z+6, r20	; 0x06
    1578:	57 83       	std	Z+7, r21	; 0x07
    157a:	0d c0       	rjmp	.+26     	; 0x1596 <ReadInductance+0x418>
     } else {
        resis[found].lx = inductance[0];
    157c:	62 9c       	mul	r6, r2
    157e:	f0 01       	movw	r30, r0
    1580:	63 9c       	mul	r6, r3
    1582:	f0 0d       	add	r31, r0
    1584:	72 9c       	mul	r7, r2
    1586:	f0 0d       	add	r31, r0
    1588:	11 24       	eor	r1, r1
    158a:	e5 5e       	subi	r30, 0xE5	; 229
    158c:	fe 4f       	sbci	r31, 0xFE	; 254
    158e:	84 83       	std	Z+4, r24	; 0x04
    1590:	95 83       	std	Z+5, r25	; 0x05
    1592:	a6 83       	std	Z+6, r26	; 0x06
    1594:	b7 83       	std	Z+7, r27	; 0x07
     }
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];
    1596:	8d 85       	ldd	r24, Y+13	; 0x0d
    1598:	9e 85       	ldd	r25, Y+14	; 0x0e
    159a:	af 85       	ldd	r26, Y+15	; 0x0f
    159c:	b8 89       	ldd	r27, Y+16	; 0x10
    159e:	29 85       	ldd	r18, Y+9	; 0x09
    15a0:	3a 85       	ldd	r19, Y+10	; 0x0a
    15a2:	4b 85       	ldd	r20, Y+11	; 0x0b
    15a4:	5c 85       	ldd	r21, Y+12	; 0x0c
    15a6:	28 17       	cp	r18, r24
    15a8:	39 07       	cpc	r19, r25
    15aa:	4a 07       	cpc	r20, r26
    15ac:	5b 07       	cpc	r21, r27
    15ae:	20 f4       	brcc	.+8      	; 0x15b8 <ReadInductance+0x43a>
    15b0:	89 87       	std	Y+9, r24	; 0x09
    15b2:	9a 87       	std	Y+10, r25	; 0x0a
    15b4:	ab 87       	std	Y+11, r26	; 0x0b
    15b6:	bc 87       	std	Y+12, r27	; 0x0c
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
    15b8:	89 85       	ldd	r24, Y+9	; 0x09
    15ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    15bc:	ab 85       	ldd	r26, Y+11	; 0x0b
    15be:	bc 85       	ldd	r27, Y+12	; 0x0c
    15c0:	62 9c       	mul	r6, r2
    15c2:	f0 01       	movw	r30, r0
    15c4:	63 9c       	mul	r6, r3
    15c6:	f0 0d       	add	r31, r0
    15c8:	72 9c       	mul	r7, r2
    15ca:	f0 0d       	add	r31, r0
    15cc:	11 24       	eor	r1, r1
    15ce:	e5 5e       	subi	r30, 0xE5	; 229
    15d0:	fe 4f       	sbci	r31, 0xFE	; 254
    15d2:	24 81       	ldd	r18, Z+4	; 0x04
    15d4:	35 81       	ldd	r19, Z+5	; 0x05
    15d6:	46 81       	ldd	r20, Z+6	; 0x06
    15d8:	57 81       	ldd	r21, Z+7	; 0x07
    15da:	82 17       	cp	r24, r18
    15dc:	93 07       	cpc	r25, r19
    15de:	a4 07       	cpc	r26, r20
    15e0:	b5 07       	cpc	r27, r21
    15e2:	20 f4       	brcc	.+8      	; 0x15ec <ReadInductance+0x46e>
    15e4:	84 83       	std	Z+4, r24	; 0x04
    15e6:	95 83       	std	Z+5, r25	; 0x05
    15e8:	a6 83       	std	Z+6, r26	; 0x06
    15ea:	b7 83       	std	Z+7, r27	; 0x07


  if(PartFound != PART_RESISTOR) {
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
    15ec:	39 89       	ldd	r19, Y+17	; 0x11
    15ee:	3f 5f       	subi	r19, 0xFF	; 255
    15f0:	39 8b       	std	Y+17, r19	; 0x11
    15f2:	80 91 59 01 	lds	r24, 0x0159
    15f6:	49 89       	ldd	r20, Y+17	; 0x11
    15f8:	48 17       	cp	r20, r24
    15fa:	08 f4       	brcc	.+2      	; 0x15fe <ReadInductance+0x480>
    15fc:	e4 cd       	rjmp	.-1080   	; 0x11c6 <ReadInductance+0x48>
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
  } // end loop for all resistors

  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    15fe:	88 e0       	ldi	r24, 0x08	; 8
    1600:	87 b9       	out	0x07, r24	; 7
  R_DDR = 0;			// switch all resistor ports to input
    1602:	14 b8       	out	0x04, r1	; 4
  return;
 } // end ReadInductance()
    1604:	a0 96       	adiw	r28, 0x20	; 32
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	f8 94       	cli
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	cd bf       	out	0x3d, r28	; 61
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	1f 91       	pop	r17
    1616:	0f 91       	pop	r16
    1618:	ff 90       	pop	r15
    161a:	ef 90       	pop	r14
    161c:	df 90       	pop	r13
    161e:	cf 90       	pop	r12
    1620:	bf 90       	pop	r11
    1622:	af 90       	pop	r10
    1624:	9f 90       	pop	r9
    1626:	8f 90       	pop	r8
    1628:	7f 90       	pop	r7
    162a:	6f 90       	pop	r6
    162c:	5f 90       	pop	r5
    162e:	4f 90       	pop	r4
    1630:	3f 90       	pop	r3
    1632:	2f 90       	pop	r2
    1634:	08 95       	ret

00001636 <getRLmultip>:
#include "ReadCapacity.c"
#if FLASHEND > 0x1fff
#include "ReadInductance.c"
#endif

unsigned int getRLmultip(unsigned int cvolt) {
    1636:	ff 92       	push	r15
    1638:	0f 93       	push	r16
    163a:	1f 93       	push	r17
    163c:	cf 93       	push	r28
    163e:	df 93       	push	r29

  unsigned int uvolt;
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;
  if (cvolt >= RL_Tab_Beginn) {
    1640:	21 e0       	ldi	r18, 0x01	; 1
    1642:	8c 32       	cpi	r24, 0x2C	; 44
    1644:	92 07       	cpc	r25, r18
    1646:	18 f0       	brcs	.+6      	; 0x164e <getRLmultip+0x18>
     uvolt = cvolt - RL_Tab_Beginn;
    1648:	8c 52       	subi	r24, 0x2C	; 44
    164a:	91 40       	sbci	r25, 0x01	; 1
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <getRLmultip+0x1c>
  } else {
     uvolt = 0;		// limit to begin of table
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = uvolt / RL_Tab_Abstand;
    1652:	69 e1       	ldi	r22, 0x19	; 25
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	0e 94 c3 19 	call	0x3386	; 0x3386 <__udivmodhi4>
  tabres = uvolt % RL_Tab_Abstand;
    165a:	f8 2e       	mov	r15, r24
  tabres = RL_Tab_Abstand - tabres;
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
    165c:	6d 32       	cpi	r22, 0x2D	; 45
    165e:	08 f0       	brcs	.+2      	; 0x1662 <getRLmultip+0x2c>
    1660:	6c e2       	ldi	r22, 0x2C	; 44
    1662:	c6 2f       	mov	r28, r22
    1664:	d0 e0       	ldi	r29, 0x00	; 0
    1666:	ce 01       	movw	r24, r28
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	80 50       	subi	r24, 0x00	; 0
    166e:	90 40       	sbci	r25, 0x00	; 0
    1670:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__eerd_word_m328p>
    1674:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RLtab[tabind+1]);
    1676:	ce 01       	movw	r24, r28
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	8e 5f       	subi	r24, 0xFE	; 254
    167e:	9f 4f       	sbci	r25, 0xFF	; 255
    1680:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__eerd_word_m328p>
    1684:	9c 01       	movw	r18, r24
  } else {
     uvolt = 0;		// limit to begin of table
  }
  tabind = uvolt / RL_Tab_Abstand;
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
    1686:	49 e1       	ldi	r20, 0x19	; 25
    1688:	4f 19       	sub	r20, r15
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
    168a:	50 e0       	ldi	r21, 0x00	; 0
    168c:	08 1b       	sub	r16, r24
    168e:	19 0b       	sbc	r17, r25
    1690:	40 9f       	mul	r20, r16
    1692:	c0 01       	movw	r24, r0
    1694:	41 9f       	mul	r20, r17
    1696:	90 0d       	add	r25, r0
    1698:	50 9f       	mul	r21, r16
    169a:	90 0d       	add	r25, r0
    169c:	11 24       	eor	r1, r1
    169e:	0c 96       	adiw	r24, 0x0c	; 12
    16a0:	69 e1       	ldi	r22, 0x19	; 25
    16a2:	70 e0       	ldi	r23, 0x00	; 0
    16a4:	0e 94 c3 19 	call	0x3386	; 0x3386 <__udivmodhi4>
    16a8:	62 0f       	add	r22, r18
    16aa:	73 1f       	adc	r23, r19
}
    16ac:	cb 01       	movw	r24, r22
    16ae:	df 91       	pop	r29
    16b0:	cf 91       	pop	r28
    16b2:	1f 91       	pop	r17
    16b4:	0f 91       	pop	r16
    16b6:	ff 90       	pop	r15
    16b8:	08 95       	ret

000016ba <Scale_C_with_vcc>:

void Scale_C_with_vcc(void) {
    16ba:	8f 92       	push	r8
    16bc:	9f 92       	push	r9
    16be:	af 92       	push	r10
    16c0:	bf 92       	push	r11
    16c2:	df 92       	push	r13
    16c4:	ef 92       	push	r14
    16c6:	ff 92       	push	r15
    16c8:	0f 93       	push	r16
    16ca:	1f 93       	push	r17
    16cc:	e0 90 7b 01 	lds	r14, 0x017B
    16d0:	f0 90 7c 01 	lds	r15, 0x017C
    16d4:	00 91 7d 01 	lds	r16, 0x017D
    16d8:	10 91 7e 01 	lds	r17, 0x017E
    16dc:	d0 90 49 01 	lds	r13, 0x0149
   while (cval > 100000) {
      cval /= 10;
    16e0:	8a e0       	ldi	r24, 0x0A	; 10
    16e2:	88 2e       	mov	r8, r24
    16e4:	91 2c       	mov	r9, r1
    16e6:	a1 2c       	mov	r10, r1
    16e8:	b1 2c       	mov	r11, r1
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cval > 100000) {
    16ea:	08 c0       	rjmp	.+16     	; 0x16fc <Scale_C_with_vcc+0x42>
      cval /= 10;
    16ec:	c8 01       	movw	r24, r16
    16ee:	b7 01       	movw	r22, r14
    16f0:	a5 01       	movw	r20, r10
    16f2:	94 01       	movw	r18, r8
    16f4:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
    16f8:	79 01       	movw	r14, r18
    16fa:	8a 01       	movw	r16, r20
    16fc:	8d 2d       	mov	r24, r13
    16fe:	d3 94       	inc	r13
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cval > 100000) {
    1700:	91 ea       	ldi	r25, 0xA1	; 161
    1702:	e9 16       	cp	r14, r25
    1704:	96 e8       	ldi	r25, 0x86	; 134
    1706:	f9 06       	cpc	r15, r25
    1708:	91 e0       	ldi	r25, 0x01	; 1
    170a:	09 07       	cpc	r16, r25
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	19 07       	cpc	r17, r25
    1710:	68 f7       	brcc	.-38     	; 0x16ec <Scale_C_with_vcc+0x32>
    1712:	80 93 49 01 	sts	0x0149, r24
      cval /= 10;
      cpre ++;          // prevent overflow
   }
   cval *= ADCconfig.U_AVCC;	// scale with measured voltage
    1716:	20 91 40 01 	lds	r18, 0x0140
    171a:	30 91 41 01 	lds	r19, 0x0141
    171e:	40 e0       	ldi	r20, 0x00	; 0
    1720:	50 e0       	ldi	r21, 0x00	; 0
    1722:	c8 01       	movw	r24, r16
    1724:	b7 01       	movw	r22, r14
    1726:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsi3>
   cval /= U_VCC;               // Factors are computed for U_VCC
    172a:	28 e8       	ldi	r18, 0x88	; 136
    172c:	33 e1       	ldi	r19, 0x13	; 19
    172e:	40 e0       	ldi	r20, 0x00	; 0
    1730:	50 e0       	ldi	r21, 0x00	; 0
    1732:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
    1736:	20 93 7b 01 	sts	0x017B, r18
    173a:	30 93 7c 01 	sts	0x017C, r19
    173e:	40 93 7d 01 	sts	0x017D, r20
    1742:	50 93 7e 01 	sts	0x017E, r21
}
    1746:	1f 91       	pop	r17
    1748:	0f 91       	pop	r16
    174a:	ff 90       	pop	r15
    174c:	ef 90       	pop	r14
    174e:	df 90       	pop	r13
    1750:	bf 90       	pop	r11
    1752:	af 90       	pop	r10
    1754:	9f 90       	pop	r9
    1756:	8f 90       	pop	r8
    1758:	08 95       	ret

0000175a <ReadCapacity>:

unsigned long CombineII2Long( unsigned int ovcnt16, unsigned int tmpcnt); //tricky function to build unsigned long from two unsigned int values


//=================================================================
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    175a:	9f 92       	push	r9
    175c:	af 92       	push	r10
    175e:	bf 92       	push	r11
    1760:	cf 92       	push	r12
    1762:	df 92       	push	r13
    1764:	ef 92       	push	r14
    1766:	ff 92       	push	r15
    1768:	0f 93       	push	r16
    176a:	1f 93       	push	r17
    176c:	cf 93       	push	r28
    176e:	df 93       	push	r29
    1770:	18 2f       	mov	r17, r24
    1772:	96 2e       	mov	r9, r22
  uint8_t HiPinR_L, HiPinR_H;
  uint8_t LoADC;
  uint8_t ii;

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
    1774:	88 0f       	add	r24, r24
    1776:	81 0f       	add	r24, r17
    1778:	86 0f       	add	r24, r22
    177a:	81 50       	subi	r24, 0x01	; 1
    177c:	80 93 48 01 	sts	0x0148, r24
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    1780:	86 2f       	mov	r24, r22
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	82 5b       	subi	r24, 0xB2	; 178
    1786:	9d 4f       	sbci	r25, 0xFD	; 253
    1788:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__eerd_byte_m328p>
    178c:	c8 2e       	mov	r12, r24
  HiPinR_L = MEM_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
    178e:	21 2f       	mov	r18, r17
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	c9 01       	movw	r24, r18
    1794:	85 5b       	subi	r24, 0xB5	; 181
    1796:	9d 4f       	sbci	r25, 0xFD	; 253
    1798:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__eerd_byte_m328p>
    179c:	08 2f       	mov	r16, r24
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load

  if(PartFound == PART_CAPACITOR) {
    179e:	80 91 09 01 	lds	r24, 0x0109
    17a2:	87 30       	cpi	r24, 0x07	; 7
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <ReadCapacity+0x4e>
    17a6:	f7 c1       	rjmp	.+1006   	; 0x1b96 <ReadCapacity+0x43c>
     lcd_string(ultoa(cval,outval,10));
     wait2s();
#endif
     return;	//We have found a capacitor already
  }
  if(PartFound == PART_RESISTOR) {
    17a8:	86 30       	cpi	r24, 0x06	; 6
    17aa:	09 f4       	brne	.+2      	; 0x17ae <ReadCapacity+0x54>
    17ac:	f4 c1       	rjmp	.+1000   	; 0x1b96 <ReadCapacity+0x43c>
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    17ae:	90 91 07 01 	lds	r25, 0x0107
    17b2:	e3 e6       	ldi	r30, 0x63	; 99
    17b4:	f1 e0       	ldi	r31, 0x01	; 1
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	0f c0       	rjmp	.+30     	; 0x17d8 <ReadCapacity+0x7e>
     if ((diodes[ii].Cathode == LowPin) && (diodes[ii].Anode == HighPin) && (diodes[ii].Voltage < 1500)) {
    17ba:	21 81       	ldd	r18, Z+1	; 0x01
    17bc:	29 15       	cp	r18, r9
    17be:	51 f4       	brne	.+20     	; 0x17d4 <ReadCapacity+0x7a>
    17c0:	20 81       	ld	r18, Z
    17c2:	21 17       	cp	r18, r17
    17c4:	39 f4       	brne	.+14     	; 0x17d4 <ReadCapacity+0x7a>
    17c6:	22 81       	ldd	r18, Z+2	; 0x02
    17c8:	33 81       	ldd	r19, Z+3	; 0x03
    17ca:	45 e0       	ldi	r20, 0x05	; 5
    17cc:	2c 3d       	cpi	r18, 0xDC	; 220
    17ce:	34 07       	cpc	r19, r20
    17d0:	08 f4       	brcc	.+2      	; 0x17d4 <ReadCapacity+0x7a>
    17d2:	e1 c1       	rjmp	.+962    	; 0x1b96 <ReadCapacity+0x43c>
     return;	//We have found a capacitor already
  }
  if(PartFound == PART_RESISTOR) {
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    17d4:	8f 5f       	subi	r24, 0xFF	; 255
    17d6:	34 96       	adiw	r30, 0x04	; 4
    17d8:	89 17       	cp	r24, r25
    17da:	78 f3       	brcs	.-34     	; 0x17ba <ReadCapacity+0x60>

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    17dc:	88 e0       	ldi	r24, 0x08	; 8
    17de:	c8 2a       	or	r12, r24
     if ((diodes[ii].Cathode == LowPin) && (diodes[ii].Anode == HighPin) && (diodes[ii].Voltage < 1500)) {
        return;
     }
  }
  
  EntladePins();			// discharge capacitor
    17e0:	0e 94 24 08 	call	0x1048	; 0x1048 <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    17e4:	88 e0       	ldi	r24, 0x08	; 8
    17e6:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    17e8:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    17ea:	c7 b8       	out	0x07, r12	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    17ec:	04 b9       	out	0x04, r16	; 4
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    17ee:	81 2f       	mov	r24, r17
    17f0:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
    17f4:	5c 01       	movw	r10, r24
// ******** should adcv[0] be measured without current???
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    17f6:	c0 e0       	ldi	r28, 0x00	; 0
    17f8:	d0 e0       	ldi	r29, 0x00	; 0
     ChargePin10ms(HiPinR_L,1);		//HighPin with R_L 10ms to VCC ,then currentless
    17fa:	80 2f       	mov	r24, r16
    17fc:	61 e0       	ldi	r22, 0x01	; 1
    17fe:	0e 94 45 01 	call	0x28a	; 0x28a <ChargePin10ms>
     wait500us();			//wait a little time
    1802:	0e 94 13 19 	call	0x3226	; 0x3226 <wait500us>
     wdt_reset();
    1806:	a8 95       	wdr
     // read voltage without current, is already charged enough?
     adcv[2] = ReadADC(HighPin) - adcv[0];
    1808:	81 2f       	mov	r24, r17
    180a:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
    180e:	7c 01       	movw	r14, r24
    1810:	ea 18       	sub	r14, r10
    1812:	fb 08       	sbc	r15, r11
     if ((ovcnt16 == 126) && (adcv[2] < 75)) {
    1814:	ce 37       	cpi	r28, 0x7E	; 126
    1816:	d1 05       	cpc	r29, r1
    1818:	21 f4       	brne	.+8      	; 0x1822 <ReadCapacity+0xc8>
    181a:	9b e4       	ldi	r25, 0x4B	; 75
    181c:	e9 16       	cp	r14, r25
    181e:	f1 04       	cpc	r15, r1
    1820:	50 f0       	brcs	.+20     	; 0x1836 <ReadCapacity+0xdc>
        // 300mV can not be reached well-timed 
        break;		// don't try to load any more
     }
     if (adcv[2] > 300) {
    1822:	2d e2       	ldi	r18, 0x2D	; 45
    1824:	e2 16       	cp	r14, r18
    1826:	21 e0       	ldi	r18, 0x01	; 1
    1828:	f2 06       	cpc	r15, r18
    182a:	28 f4       	brcc	.+10     	; 0x1836 <ReadCapacity+0xdc>
  R_PORT = 0;				// switch R-Port to GND
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    182c:	21 96       	adiw	r28, 0x01	; 1
    182e:	31 e0       	ldi	r19, 0x01	; 1
    1830:	c4 3f       	cpi	r28, 0xF4	; 244
    1832:	d3 07       	cpc	r29, r19
    1834:	11 f7       	brne	.-60     	; 0x17fa <ReadCapacity+0xa0>
     }
  }
  // wait 5ms and read voltage again, does the capacitor keep the voltage?
//  adcv[1] = W5msReadADC(HighPin) - adcv[0];
//  wdt_reset();
  cpre = -12;			//default unit is pF
    1836:	84 ef       	ldi	r24, 0xF4	; 244
    1838:	80 93 49 01 	sts	0x0149, r24
  if (adcv[2] < 301) {
    183c:	4d e2       	ldi	r20, 0x2D	; 45
    183e:	e4 16       	cp	r14, r20
    1840:	41 e0       	ldi	r20, 0x01	; 1
    1842:	f4 06       	cpc	r15, r20
    1844:	08 f4       	brcc	.+2      	; 0x1848 <ReadCapacity+0xee>
    1846:	a2 c1       	rjmp	.+836    	; 0x1b8c <ReadCapacity+0x432>
     wait1s();
#endif
     goto keinC;		// was never charged enough, >100mF or shorted
  }
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    1848:	20 97       	sbiw	r28, 0x00	; 0
    184a:	31 f4       	brne	.+12     	; 0x1858 <ReadCapacity+0xfe>
    184c:	85 e1       	ldi	r24, 0x15	; 21
    184e:	e8 16       	cp	r14, r24
    1850:	85 e0       	ldi	r24, 0x05	; 5
    1852:	f8 06       	cpc	r15, r24
    1854:	08 f0       	brcs	.+2      	; 0x1858 <ReadCapacity+0xfe>
    1856:	67 c0       	rjmp	.+206    	; 0x1926 <ReadCapacity+0x1cc>
     goto messe_mit_rh;		// Voltage of more than 1300mV is reached in one pulse, to fast loaded
  }
  // Capacity is more than about 50µF
  cpre = -9;		// switch units to nF 
    1858:	87 ef       	ldi	r24, 0xF7	; 247
    185a:	80 93 49 01 	sts	0x0149, r24
  }
  cval_uncorrected = ovcnt16 + 1;
  cval_uncorrected *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the same time which is required for loading
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    185e:	cc 24       	eor	r12, r12
    1860:	dd 24       	eor	r13, r13
     wait10ms();
    1862:	0e 94 0d 19 	call	0x321a	; 0x321a <wait10ms>
     adcv[3] = ReadADC(HighPin) - adcv[0]; // read voltage again, is discharged only a little bit ?
    1866:	81 2f       	mov	r24, r17
    1868:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
    186c:	8a 19       	sub	r24, r10
    186e:	9b 09       	sbc	r25, r11
     wdt_reset();
    1870:	a8 95       	wdr
  }
  cval_uncorrected = ovcnt16 + 1;
  cval_uncorrected *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the same time which is required for loading
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    1872:	08 94       	sec
    1874:	c1 1c       	adc	r12, r1
    1876:	d1 1c       	adc	r13, r1
    1878:	cc 15       	cp	r28, r12
    187a:	dd 05       	cpc	r29, r13
    187c:	90 f7       	brcc	.-28     	; 0x1862 <ReadCapacity+0x108>
     wait10ms();
     adcv[3] = ReadADC(HighPin) - adcv[0]; // read voltage again, is discharged only a little bit ?
     wdt_reset();
  }
  if (adcv[2] > adcv[3]) {
    187e:	8e 15       	cp	r24, r14
    1880:	9f 05       	cpc	r25, r15
    1882:	48 f4       	brcc	.+18     	; 0x1896 <ReadCapacity+0x13c>
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];
    1884:	97 01       	movw	r18, r14
    1886:	28 1b       	sub	r18, r24
    1888:	39 0b       	sbc	r19, r25
    188a:	c9 01       	movw	r24, r18
  } else {
     adcv[3] = 0;
  }
  if (adcv[3] > 100) {
    188c:	25 36       	cpi	r18, 0x65	; 101
    188e:	31 05       	cpc	r19, r1
    1890:	08 f0       	brcs	.+2      	; 0x1894 <ReadCapacity+0x13a>
    1892:	7c c1       	rjmp	.+760    	; 0x1b8c <ReadCapacity+0x432>
    1894:	02 c0       	rjmp	.+4      	; 0x189a <ReadCapacity+0x140>
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];
  } else {
     adcv[3] = 0;
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	90 e0       	ldi	r25, 0x00	; 0
     lcd_space();
     wait1s();
 #endif
     goto keinC;		// capacitor does not keep the voltage about 5ms
  }
  cval_uncorrected = ovcnt16 + 1;
    189a:	21 96       	adiw	r28, 0x01	; 1
    189c:	5e 01       	movw	r10, r28
    189e:	cc 24       	eor	r12, r12
    18a0:	dd 24       	eor	r13, r13
    18a2:	a0 92 5a 01 	sts	0x015A, r10
    18a6:	b0 92 5b 01 	sts	0x015B, r11
    18aa:	c0 92 5c 01 	sts	0x015C, r12
    18ae:	d0 92 5d 01 	sts	0x015D, r13
  // compute factor with load voltage + lost voltage during the voltage load time
  cval_uncorrected *= getRLmultip(adcv[2]+adcv[3]);	// get factor to convert time to capacity from table
    18b2:	8e 0d       	add	r24, r14
    18b4:	9f 1d       	adc	r25, r15
    18b6:	0e 94 1b 0b 	call	0x1636	; 0x1636 <getRLmultip>
    18ba:	bc 01       	movw	r22, r24
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	a6 01       	movw	r20, r12
    18c2:	95 01       	movw	r18, r10
    18c4:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsi3>
    18c8:	60 93 5a 01 	sts	0x015A, r22
    18cc:	70 93 5b 01 	sts	0x015B, r23
    18d0:	80 93 5c 01 	sts	0x015C, r24
    18d4:	90 93 5d 01 	sts	0x015D, r25
#endif
   cval = cval_uncorrected;		// set result to uncorrected
    18d8:	60 93 7b 01 	sts	0x017B, r22
    18dc:	70 93 7c 01 	sts	0x017C, r23
    18e0:	80 93 7d 01 	sts	0x017D, r24
    18e4:	90 93 7e 01 	sts	0x017E, r25
   Scale_C_with_vcc();
    18e8:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <Scale_C_with_vcc>
   // cval for this type is at least 40000nF, so the last digit will be never shown
   cval *= (1000 - C_H_KORR);	// correct with C_H_KORR with 0.1% resolution, but prevent overflow
    18ec:	60 91 7b 01 	lds	r22, 0x017B
    18f0:	70 91 7c 01 	lds	r23, 0x017C
    18f4:	80 91 7d 01 	lds	r24, 0x017D
    18f8:	90 91 7e 01 	lds	r25, 0x017E
    18fc:	28 ee       	ldi	r18, 0xE8	; 232
    18fe:	33 e0       	ldi	r19, 0x03	; 3
    1900:	40 e0       	ldi	r20, 0x00	; 0
    1902:	50 e0       	ldi	r21, 0x00	; 0
    1904:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsi3>
   cval /= 100;
    1908:	24 e6       	ldi	r18, 0x64	; 100
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e0       	ldi	r20, 0x00	; 0
    190e:	50 e0       	ldi	r21, 0x00	; 0
    1910:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
    1914:	20 93 7b 01 	sts	0x017B, r18
    1918:	30 93 7c 01 	sts	0x017C, r19
    191c:	40 93 7d 01 	sts	0x017D, r20
    1920:	50 93 7e 01 	sts	0x017E, r21
   DisplayValue(cval,cpre,'F',4);
   lcd_space();
   lcd_string(utoa(ovcnt16,outval,10));
   wait3s();
#endif
   goto checkDiodes;
    1924:	24 c1       	rjmp	.+584    	; 0x1b6e <ReadCapacity+0x414>
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
  HiPinR_L = MEM_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load
    1926:	e0 2e       	mov	r14, r16
    1928:	ee 0c       	add	r14, r14

//==================================================================================
// Measurement of little capacity values
messe_mit_rh:
  //little capacity value, about  < 50 µF
  EntladePins();			// discharge capacitor
    192a:	0e 94 24 08 	call	0x1048	; 0x1048 <EntladePins>
  //measure with the R_H (470kOhm) resistor 
  R_PORT = 0;		// R_DDR ist HiPinR_L
    192e:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = (1<<TP1) | (1<<TP2) | (1<<TP3) | (1<<TxD);	//switch all Pins to output
    1930:	8f e0       	ldi	r24, 0x0F	; 15
    1932:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		//switch all ADC Pins to GND
    1934:	88 e0       	ldi	r24, 0x08	; 8
    1936:	88 b9       	out	0x08, r24	; 8
  R_DDR = HiPinR_H;   		// switch R_H resistor port for HighPin to output (GND)
    1938:	e4 b8       	out	0x04, r14	; 4
// setup Analog Comparator
  ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    193a:	80 e4       	ldi	r24, 0x40	; 64
    193c:	80 93 7b 00 	sts	0x007B, r24
  ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    1940:	84 e5       	ldi	r24, 0x54	; 84
    1942:	80 bf       	out	0x30, r24	; 48
  ADMUX = (1<<REFS0) | HighPin;			// switch Mux to High-Pin
    1944:	81 2f       	mov	r24, r17
    1946:	80 64       	ori	r24, 0x40	; 64
    1948:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    194c:	86 e1       	ldi	r24, 0x16	; 22
    194e:	80 93 7a 00 	sts	0x007A, r24
  wait200us();			//wait for bandgap to start up
    1952:	0e 94 16 19 	call	0x322c	; 0x322c <wait200us>

  ovcnt16 = 0;
// setup Counter1
  TCCR1A = 0;			// set Counter1 to normal Mode
    1956:	10 92 80 00 	sts	0x0080, r1
  TCNT1 = 0;			//set Counter to 0
    195a:	10 92 85 00 	sts	0x0085, r1
    195e:	10 92 84 00 	sts	0x0084, r1
  TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// mega88
    1962:	87 e2       	ldi	r24, 0x27	; 39
    1964:	86 bb       	out	0x16, r24	; 22
  R_PORT = HiPinR_H;           	// switch R_H resistor port for HighPin to VCC
    1966:	e5 b8       	out	0x05, r14	; 5
  if(PartFound == PART_FET) {
    1968:	80 91 09 01 	lds	r24, 0x0109
    196c:	83 30       	cpi	r24, 0x03	; 3
    196e:	79 f4       	brne	.+30     	; 0x198e <ReadCapacity+0x234>
     // charge capacitor with R_H resistor
     TCCR1B = (1<<CS10);	//Start counter 1MHz or 8MHz
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = (((1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK) & ~(1<<HighPin));	// release only HighPin ADC port
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	01 2e       	mov	r0, r17
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <ReadCapacity+0x228>
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	0a 94       	dec	r0
    1984:	e2 f7       	brpl	.-8      	; 0x197e <ReadCapacity+0x224>
    1986:	80 95       	com	r24
    1988:	8f 70       	andi	r24, 0x0F	; 15
    198a:	87 b9       	out	0x07, r24	; 7
    198c:	04 c0       	rjmp	.+8      	; 0x1996 <ReadCapacity+0x23c>
  } else {
     TCCR1B =  (1<<CS10);	//start counter 1MHz or 8MHz
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
    1994:	c7 b8       	out	0x07, r12	; 7
     ii = TI1_INT_FLAGS;		//read Timer flags
     if (ii & (1<<ICF1))  {
        break;
     }
     if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
        TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    1996:	81 e0       	ldi	r24, 0x01	; 1
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
  }
//******************************
  while(1) {
     // Wait, until  Input Capture is set
     ii = TI1_INT_FLAGS;		//read Timer flags
    1998:	26 b3       	in	r18, 0x16	; 22
     if (ii & (1<<ICF1))  {
    199a:	25 fd       	sbrc	r18, 5
    199c:	09 c0       	rjmp	.+18     	; 0x19b0 <ReadCapacity+0x256>
        break;
     }
     if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    199e:	20 ff       	sbrs	r18, 0
    19a0:	fb cf       	rjmp	.-10     	; 0x1998 <ReadCapacity+0x23e>
        TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    19a2:	86 bb       	out	0x16, r24	; 22
        wdt_reset();
    19a4:	a8 95       	wdr
        ovcnt16++;
    19a6:	21 96       	adiw	r28, 0x01	; 1
        if(ovcnt16 == (F_CPU/5000)) {
    19a8:	36 e0       	ldi	r19, 0x06	; 6
    19aa:	c0 34       	cpi	r28, 0x40	; 64
    19ac:	d3 07       	cpc	r29, r19
    19ae:	a1 f7       	brne	.-24     	; 0x1998 <ReadCapacity+0x23e>
           break; 	//Timeout for Charging, above 12 s
        }
     }
  }
  TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    19b0:	10 92 81 00 	sts	0x0081, r1
  TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    19b4:	80 e2       	ldi	r24, 0x20	; 32
    19b6:	86 bb       	out	0x16, r24	; 22
  tmpint = ICR1;		// get previous Input Capture Counter flag
    19b8:	e0 90 86 00 	lds	r14, 0x0086
    19bc:	f0 90 87 00 	lds	r15, 0x0087
// check actual counter, if an additional overflow must be added
  if((TCNT1 > tmpint) && (ii & (1<<TOV1))) {
    19c0:	80 91 84 00 	lds	r24, 0x0084
    19c4:	90 91 85 00 	lds	r25, 0x0085
    19c8:	e8 16       	cp	r14, r24
    19ca:	f9 06       	cpc	r15, r25
    19cc:	28 f4       	brcc	.+10     	; 0x19d8 <ReadCapacity+0x27e>
    19ce:	20 ff       	sbrs	r18, 0
    19d0:	03 c0       	rjmp	.+6      	; 0x19d8 <ReadCapacity+0x27e>
     // this OV was not counted, but was before the Input Capture
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	86 bb       	out	0x16, r24	; 22
     ovcnt16++;
    19d6:	21 96       	adiw	r28, 0x01	; 1
  }
//############################################################
  ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    19d8:	86 e9       	ldi	r24, 0x96	; 150
    19da:	80 93 7a 00 	sts	0x007A, r24
  R_DDR = 0;			// switch R_H resistor port for input
    19de:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// switch R_H resistor port pull up for HighPin off
    19e0:	15 b8       	out	0x05, r1	; 5
  load_diff = ReadADC(HighPin) + REF_C_KORR - ref_mv;	// build difference of capacitor voltage to Reference Voltage
    19e2:	81 2f       	mov	r24, r17
    19e4:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
    19e8:	20 91 42 01 	lds	r18, 0x0142
    19ec:	30 91 43 01 	lds	r19, 0x0143
    19f0:	82 1b       	sub	r24, r18
    19f2:	93 0b       	sbc	r25, r19
    19f4:	0c 96       	adiw	r24, 0x0c	; 12
    19f6:	90 93 62 01 	sts	0x0162, r25
    19fa:	80 93 61 01 	sts	0x0161, r24
//############################################################
  if (ovcnt16 >= (F_CPU/10000)) {
    19fe:	43 e0       	ldi	r20, 0x03	; 3
    1a00:	c0 32       	cpi	r28, 0x20	; 32
    1a02:	d4 07       	cpc	r29, r20
    1a04:	08 f0       	brcs	.+2      	; 0x1a08 <ReadCapacity+0x2ae>
    1a06:	c2 c0       	rjmp	.+388    	; 0x1b8c <ReadCapacity+0x432>
     goto keinC;	// no normal end
  }
  cval_uncorrected = CombineII2Long(ovcnt16, tmpint);
    1a08:	ce 01       	movw	r24, r28
    1a0a:	b7 01       	movw	r22, r14
    1a0c:	0e 94 24 19 	call	0x3248	; 0x3248 <CombineII2Long>
    1a10:	60 93 5a 01 	sts	0x015A, r22
    1a14:	70 93 5b 01 	sts	0x015B, r23
    1a18:	80 93 5c 01 	sts	0x015C, r24
    1a1c:	90 93 5d 01 	sts	0x015D, r25

  cpre = -12;			// cval unit is pF 
    1a20:	24 ef       	ldi	r18, 0xF4	; 244
    1a22:	20 93 49 01 	sts	0x0149, r18
  if (ovcnt16 > 65) {
    1a26:	c2 34       	cpi	r28, 0x42	; 66
    1a28:	d1 05       	cpc	r29, r1
    1a2a:	88 f0       	brcs	.+34     	; 0x1a4e <ReadCapacity+0x2f4>
     cval_uncorrected /= 100;	// switch to next unit
    1a2c:	24 e6       	ldi	r18, 0x64	; 100
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	40 e0       	ldi	r20, 0x00	; 0
    1a32:	50 e0       	ldi	r21, 0x00	; 0
    1a34:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
    1a38:	20 93 5a 01 	sts	0x015A, r18
    1a3c:	30 93 5b 01 	sts	0x015B, r19
    1a40:	40 93 5c 01 	sts	0x015C, r20
    1a44:	50 93 5d 01 	sts	0x015D, r21
     cpre += 2;			// set unit, prevent overflow
    1a48:	86 ef       	ldi	r24, 0xF6	; 246
    1a4a:	80 93 49 01 	sts	0x0149, r24
  }
  cval_uncorrected *= RHmultip;		// 708
    1a4e:	60 91 00 01 	lds	r22, 0x0100
    1a52:	70 91 01 01 	lds	r23, 0x0101
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	20 91 5a 01 	lds	r18, 0x015A
    1a5e:	30 91 5b 01 	lds	r19, 0x015B
    1a62:	40 91 5c 01 	lds	r20, 0x015C
    1a66:	50 91 5d 01 	lds	r21, 0x015D
    1a6a:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsi3>
  cval_uncorrected /= (F_CPU / 10000);	// divide by 100 (@ 1MHz clock), 800 (@ 8MHz clock)
    1a6e:	20 e2       	ldi	r18, 0x20	; 32
    1a70:	33 e0       	ldi	r19, 0x03	; 3
    1a72:	40 e0       	ldi	r20, 0x00	; 0
    1a74:	50 e0       	ldi	r21, 0x00	; 0
    1a76:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
    1a7a:	20 93 5a 01 	sts	0x015A, r18
    1a7e:	30 93 5b 01 	sts	0x015B, r19
    1a82:	40 93 5c 01 	sts	0x015C, r20
    1a86:	50 93 5d 01 	sts	0x015D, r21
  cval = cval_uncorrected;		// set the corrected cval
    1a8a:	20 93 7b 01 	sts	0x017B, r18
    1a8e:	30 93 7c 01 	sts	0x017C, r19
    1a92:	40 93 7d 01 	sts	0x017D, r20
    1a96:	50 93 7e 01 	sts	0x017E, r21
  Scale_C_with_vcc();
    1a9a:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <Scale_C_with_vcc>
  if (cpre == -12) {
    1a9e:	80 91 49 01 	lds	r24, 0x0149
    1aa2:	84 3f       	cpi	r24, 0xF4	; 244
    1aa4:	09 f0       	breq	.+2      	; 0x1aa8 <ReadCapacity+0x34e>
    1aa6:	55 c0       	rjmp	.+170    	; 0x1b52 <ReadCapacity+0x3f8>
#if COMP_SLEW1 > COMP_SLEW2
     if (cval < COMP_SLEW1) {
    1aa8:	c0 90 7b 01 	lds	r12, 0x017B
    1aac:	d0 90 7c 01 	lds	r13, 0x017C
    1ab0:	e0 90 7d 01 	lds	r14, 0x017D
    1ab4:	f0 90 7e 01 	lds	r15, 0x017E
    1ab8:	80 ea       	ldi	r24, 0xA0	; 160
    1aba:	c8 16       	cp	r12, r24
    1abc:	8f e0       	ldi	r24, 0x0F	; 15
    1abe:	d8 06       	cpc	r13, r24
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	e8 06       	cpc	r14, r24
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	f8 06       	cpc	r15, r24
    1ac8:	c0 f4       	brcc	.+48     	; 0x1afa <ReadCapacity+0x3a0>
        // add slew rate dependent offset
        cval += (COMP_SLEW1 / (cval+COMP_SLEW2 ));
    1aca:	a7 01       	movw	r20, r14
    1acc:	96 01       	movw	r18, r12
    1ace:	2c 54       	subi	r18, 0x4C	; 76
    1ad0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad2:	4f 4f       	sbci	r20, 0xFF	; 255
    1ad4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad6:	60 ea       	ldi	r22, 0xA0	; 160
    1ad8:	7f e0       	ldi	r23, 0x0F	; 15
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
    1ae2:	2c 0d       	add	r18, r12
    1ae4:	3d 1d       	adc	r19, r13
    1ae6:	4e 1d       	adc	r20, r14
    1ae8:	5f 1d       	adc	r21, r15
    1aea:	20 93 7b 01 	sts	0x017B, r18
    1aee:	30 93 7c 01 	sts	0x017C, r19
    1af2:	40 93 7d 01 	sts	0x017D, r20
    1af6:	50 93 7e 01 	sts	0x017E, r21
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    1afa:	80 91 48 01 	lds	r24, 0x0148
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	81 5a       	subi	r24, 0xA1	; 161
    1b02:	9d 4f       	sbci	r25, 0xFD	; 253
    1b04:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__eerd_byte_m328p>
     if (cval > tmpint) {
    1b08:	20 91 7b 01 	lds	r18, 0x017B
    1b0c:	30 91 7c 01 	lds	r19, 0x017C
    1b10:	40 91 7d 01 	lds	r20, 0x017D
    1b14:	50 91 7e 01 	lds	r21, 0x017E
        cval += (COMP_SLEW1 / (cval+COMP_SLEW2 ));
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    1b18:	90 e0       	ldi	r25, 0x00	; 0
     if (cval > tmpint) {
    1b1a:	a0 e0       	ldi	r26, 0x00	; 0
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	82 17       	cp	r24, r18
    1b20:	93 07       	cpc	r25, r19
    1b22:	a4 07       	cpc	r26, r20
    1b24:	b5 07       	cpc	r27, r21
    1b26:	68 f4       	brcc	.+26     	; 0x1b42 <ReadCapacity+0x3e8>
         cval -= tmpint;		//subtract zero offset (pF)
    1b28:	28 1b       	sub	r18, r24
    1b2a:	39 0b       	sbc	r19, r25
    1b2c:	4a 0b       	sbc	r20, r26
    1b2e:	5b 0b       	sbc	r21, r27
    1b30:	20 93 7b 01 	sts	0x017B, r18
    1b34:	30 93 7c 01 	sts	0x017C, r19
    1b38:	40 93 7d 01 	sts	0x017D, r20
    1b3c:	50 93 7e 01 	sts	0x017E, r21
    1b40:	08 c0       	rjmp	.+16     	; 0x1b52 <ReadCapacity+0x3f8>
     } else {
         cval = 0;			//unsigned long may not reach negativ value
    1b42:	10 92 7b 01 	sts	0x017B, r1
    1b46:	10 92 7c 01 	sts	0x017C, r1
    1b4a:	10 92 7d 01 	sts	0x017D, r1
    1b4e:	10 92 7e 01 	sts	0x017E, r1
  lcd_testpin(HighPin);
  lcd_space();
  DisplayValue(cval,cpre,'F',4);
  wait3s();
#endif
  R_DDR = HiPinR_L; 		//switch R_L for High-Pin to GND
    1b52:	04 b9       	out	0x04, r16	; 4
#if F_CPU < 2000001
   if(cval < 50)
#else 
   if(cval < 25)
    1b54:	80 91 7b 01 	lds	r24, 0x017B
    1b58:	90 91 7c 01 	lds	r25, 0x017C
    1b5c:	a0 91 7d 01 	lds	r26, 0x017D
    1b60:	b0 91 7e 01 	lds	r27, 0x017E
    1b64:	89 31       	cpi	r24, 0x19	; 25
    1b66:	91 05       	cpc	r25, r1
    1b68:	a1 05       	cpc	r26, r1
    1b6a:	b1 05       	cpc	r27, r1
    1b6c:	78 f0       	brcs	.+30     	; 0x1b8c <ReadCapacity+0x432>
#endif
      goto keinC;	//capacity to low, < 70pF @1MHz (35pF @8MHz)
   }
   // end low capacity 
checkDiodes:
   if((NumOfDiodes > 0)  && (PartFound != PART_FET)) {
    1b6e:	80 91 07 01 	lds	r24, 0x0107
    1b72:	88 23       	and	r24, r24
    1b74:	21 f0       	breq	.+8      	; 0x1b7e <ReadCapacity+0x424>
    1b76:	80 91 09 01 	lds	r24, 0x0109
    1b7a:	83 30       	cpi	r24, 0x03	; 3
    1b7c:	39 f4       	brne	.+14     	; 0x1b8c <ReadCapacity+0x432>
      wait1s();
#endif
      // nearly shure, that there is one or more diodes in reverse direction,
      // which would be wrongly detected as capacitor 
   } else {
      PartFound = PART_CAPACITOR;	//capacitor is found
    1b7e:	87 e0       	ldi	r24, 0x07	; 7
    1b80:	80 93 09 01 	sts	0x0109, r24
      ca = LowPin;			// save LowPin
    1b84:	90 92 60 01 	sts	0x0160, r9
      cb = HighPin;		// save HighPin
    1b88:	10 93 0a 01 	sts	0x010A, r17
keinC:
  // discharge capacitor again
//  EntladePins();		// discharge capacitors
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    1b8c:	88 e0       	ldi	r24, 0x08	; 8
    1b8e:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GNG, no pull up
    1b90:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    1b92:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    1b94:	15 b8       	out	0x05, r1	; 5
  return;
 } // end ReadCapacity()
    1b96:	df 91       	pop	r29
    1b98:	cf 91       	pop	r28
    1b9a:	1f 91       	pop	r17
    1b9c:	0f 91       	pop	r16
    1b9e:	ff 90       	pop	r15
    1ba0:	ef 90       	pop	r14
    1ba2:	df 90       	pop	r13
    1ba4:	cf 90       	pop	r12
    1ba6:	bf 90       	pop	r11
    1ba8:	af 90       	pop	r10
    1baa:	9f 90       	pop	r9
    1bac:	08 95       	ret

00001bae <RefVoltage>:

#endif

#ifdef AUTO_RH
void RefVoltage(void) {
    1bae:	ff 92       	push	r15
    1bb0:	0f 93       	push	r16
    1bb2:	1f 93       	push	r17
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;

  #ifdef AUTO_CAL
  referenz = ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset));
    1bb8:	8d e5       	ldi	r24, 0x5D	; 93
    1bba:	92 e0       	ldi	r25, 0x02	; 2
    1bbc:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__eerd_word_m328p>
    1bc0:	20 91 42 01 	lds	r18, 0x0142
    1bc4:	30 91 43 01 	lds	r19, 0x0143
    1bc8:	28 0f       	add	r18, r24
    1bca:	39 1f       	adc	r19, r25
  #else
  referenz = ref_mv + REF_C_KORR;
  #endif
  if (referenz >= Ref_Tab_Beginn) {
    1bcc:	83 e0       	ldi	r24, 0x03	; 3
    1bce:	28 3e       	cpi	r18, 0xE8	; 232
    1bd0:	38 07       	cpc	r19, r24
    1bd2:	20 f0       	brcs	.+8      	; 0x1bdc <RefVoltage+0x2e>
     referenz -= Ref_Tab_Beginn;
    1bd4:	c9 01       	movw	r24, r18
    1bd6:	88 5e       	subi	r24, 0xE8	; 232
    1bd8:	93 40       	sbci	r25, 0x03	; 3
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <RefVoltage+0x32>
  } else  {
     referenz = 0;		// limit to begin of table
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = referenz / Ref_Tab_Abstand;
    1be0:	62 e3       	ldi	r22, 0x32	; 50
    1be2:	70 e0       	ldi	r23, 0x00	; 0
    1be4:	0e 94 c3 19 	call	0x3386	; 0x3386 <__udivmodhi4>
  tabres = referenz % Ref_Tab_Abstand;
    1be8:	f8 2e       	mov	r15, r24
  tabres = Ref_Tab_Abstand-tabres;
  if (tabind > 7) {
     tabind = 7;		// limit to end of table
  }
  // interpolate the table of factors
  y1 = MEM_read_word(&RHtab[tabind]);
    1bea:	68 30       	cpi	r22, 0x08	; 8
    1bec:	08 f0       	brcs	.+2      	; 0x1bf0 <RefVoltage+0x42>
    1bee:	67 e0       	ldi	r22, 0x07	; 7
    1bf0:	c6 2f       	mov	r28, r22
    1bf2:	d0 e0       	ldi	r29, 0x00	; 0
    1bf4:	ce 01       	movw	r24, r28
    1bf6:	88 0f       	add	r24, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	8a 54       	subi	r24, 0x4A	; 74
    1bfc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bfe:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__eerd_word_m328p>
    1c02:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RHtab[tabind+1]);
    1c04:	ce 01       	movw	r24, r28
    1c06:	88 0f       	add	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	88 54       	subi	r24, 0x48	; 72
    1c0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c0e:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__eerd_word_m328p>
    1c12:	9c 01       	movw	r18, r24
  } else  {
     referenz = 0;		// limit to begin of table
  }
  tabind = referenz / Ref_Tab_Abstand;
  tabres = referenz % Ref_Tab_Abstand;
  tabres = Ref_Tab_Abstand-tabres;
    1c14:	42 e3       	ldi	r20, 0x32	; 50
    1c16:	4f 19       	sub	r20, r15
  }
  // interpolate the table of factors
  y1 = MEM_read_word(&RHtab[tabind]);
  y2 = MEM_read_word(&RHtab[tabind+1]);
  // RHmultip is the interpolated factor to compute capacity from load time with 470k
  RHmultip = ((y1 - y2) * tabres + (Ref_Tab_Abstand/2)) / Ref_Tab_Abstand + y2;
    1c18:	50 e0       	ldi	r21, 0x00	; 0
    1c1a:	08 1b       	sub	r16, r24
    1c1c:	19 0b       	sbc	r17, r25
    1c1e:	40 9f       	mul	r20, r16
    1c20:	c0 01       	movw	r24, r0
    1c22:	41 9f       	mul	r20, r17
    1c24:	90 0d       	add	r25, r0
    1c26:	50 9f       	mul	r21, r16
    1c28:	90 0d       	add	r25, r0
    1c2a:	11 24       	eor	r1, r1
    1c2c:	49 96       	adiw	r24, 0x19	; 25
    1c2e:	62 e3       	ldi	r22, 0x32	; 50
    1c30:	70 e0       	ldi	r23, 0x00	; 0
    1c32:	0e 94 c3 19 	call	0x3386	; 0x3386 <__udivmodhi4>
    1c36:	62 0f       	add	r22, r18
    1c38:	73 1f       	adc	r23, r19
    1c3a:	70 93 01 01 	sts	0x0101, r23
    1c3e:	60 93 00 01 	sts	0x0100, r22
 }
    1c42:	df 91       	pop	r29
    1c44:	cf 91       	pop	r28
    1c46:	1f 91       	pop	r17
    1c48:	0f 91       	pop	r16
    1c4a:	ff 90       	pop	r15
    1c4c:	08 95       	ret

00001c4e <lcd_clear_line>:
#endif

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
    1c4e:	1f 93       	push	r17
    1c50:	14 e1       	ldi	r17, 0x14	; 20
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    lcd_space();
    1c52:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_space>
    1c56:	11 50       	subi	r17, 0x01	; 1

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    1c58:	e1 f7       	brne	.-8      	; 0x1c52 <lcd_clear_line+0x4>
    lcd_space();
 }
}
    1c5a:	1f 91       	pop	r17
    1c5c:	08 95       	ret

00001c5e <DisplayValue>:
 *    e.g: p = 10^-12 -> -12
 *  - unit character (0 = none)
 *  digits = 2, 3 or 4
 */
void DisplayValue(unsigned long Value, int8_t Exponent, unsigned char Unit, unsigned char digits)
{
    1c5e:	2f 92       	push	r2
    1c60:	3f 92       	push	r3
    1c62:	4f 92       	push	r4
    1c64:	5f 92       	push	r5
    1c66:	7f 92       	push	r7
    1c68:	8f 92       	push	r8
    1c6a:	9f 92       	push	r9
    1c6c:	af 92       	push	r10
    1c6e:	bf 92       	push	r11
    1c70:	cf 92       	push	r12
    1c72:	df 92       	push	r13
    1c74:	ef 92       	push	r14
    1c76:	ff 92       	push	r15
    1c78:	0f 93       	push	r16
    1c7a:	1f 93       	push	r17
    1c7c:	df 93       	push	r29
    1c7e:	cf 93       	push	r28
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	2f 97       	sbiw	r28, 0x0f	; 15
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	de bf       	out	0x3e, r29	; 62
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	cd bf       	out	0x3d, r28	; 61
    1c90:	6b 01       	movw	r12, r22
    1c92:	7c 01       	movw	r14, r24
    1c94:	14 2f       	mov	r17, r20
    1c96:	72 2e       	mov	r7, r18
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
    1c98:	03 30       	cpi	r16, 0x03	; 3
    1c9a:	29 f0       	breq	.+10     	; 0x1ca6 <DisplayValue+0x48>
  if (digits == 4) Limit = 10000;
    1c9c:	04 30       	cpi	r16, 0x04	; 4
    1c9e:	31 f0       	breq	.+12     	; 0x1cac <DisplayValue+0x4e>
  uint8_t           Offset;		/* exponent of offset to next 10^3 step */
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
    1ca0:	84 e6       	ldi	r24, 0x64	; 100
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	14 c0       	rjmp	.+40     	; 0x1cce <DisplayValue+0x70>
  if (digits == 3) Limit = 1000;
    1ca6:	88 ee       	ldi	r24, 0xE8	; 232
    1ca8:	93 e0       	ldi	r25, 0x03	; 3
    1caa:	11 c0       	rjmp	.+34     	; 0x1cce <DisplayValue+0x70>
  if (digits == 4) Limit = 10000;
    1cac:	80 e1       	ldi	r24, 0x10	; 16
    1cae:	97 e2       	ldi	r25, 0x27	; 39
    1cb0:	0e c0       	rjmp	.+28     	; 0x1cce <DisplayValue+0x70>
  while (Value >= Limit)
  {
    Value += 5;				/* for automagic rounding */
    1cb2:	c7 01       	movw	r24, r14
    1cb4:	b6 01       	movw	r22, r12
    1cb6:	6b 5f       	subi	r22, 0xFB	; 251
    1cb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cba:	8f 4f       	sbci	r24, 0xFF	; 255
    1cbc:	9f 4f       	sbci	r25, 0xFF	; 255
    Value = Value / 10;			/* scale down by 10^1 */
    1cbe:	a5 01       	movw	r20, r10
    1cc0:	94 01       	movw	r18, r8
    1cc2:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
    1cc6:	69 01       	movw	r12, r18
    1cc8:	7a 01       	movw	r14, r20
    Exponent++;				/* increase exponent by 1 */
    1cca:	1f 5f       	subi	r17, 0xFF	; 255
    1ccc:	08 c0       	rjmp	.+16     	; 0x1cde <DisplayValue+0x80>


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
  if (digits == 4) Limit = 10000;
  while (Value >= Limit)
    1cce:	1c 01       	movw	r2, r24
    1cd0:	44 24       	eor	r4, r4
    1cd2:	55 24       	eor	r5, r5
  {
    Value += 5;				/* for automagic rounding */
    Value = Value / 10;			/* scale down by 10^1 */
    1cd4:	4a e0       	ldi	r20, 0x0A	; 10
    1cd6:	84 2e       	mov	r8, r20
    1cd8:	91 2c       	mov	r9, r1
    1cda:	a1 2c       	mov	r10, r1
    1cdc:	b1 2c       	mov	r11, r1


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
  if (digits == 4) Limit = 10000;
  while (Value >= Limit)
    1cde:	c2 14       	cp	r12, r2
    1ce0:	d3 04       	cpc	r13, r3
    1ce2:	e4 04       	cpc	r14, r4
    1ce4:	f5 04       	cpc	r15, r5
    1ce6:	28 f7       	brcc	.-54     	; 0x1cb2 <DisplayValue+0x54>


  /*
   *  determine prefix
   */
  Length = Exponent + 12;
    1ce8:	81 2f       	mov	r24, r17
    1cea:	84 5f       	subi	r24, 0xF4	; 244
    1cec:	83 31       	cpi	r24, 0x13	; 19
    1cee:	08 f0       	brcs	.+2      	; 0x1cf2 <DisplayValue+0x94>
    1cf0:	82 e1       	ldi	r24, 0x12	; 18
  if (Length <  0) Length = 0;		/* Limit to minimum prefix */
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
  Index = Length / 3;
    1cf2:	23 e0       	ldi	r18, 0x03	; 3
  Offset = Length % 3;
    1cf4:	62 2f       	mov	r22, r18
    1cf6:	0e 94 b7 19 	call	0x336e	; 0x336e <__udivmodqi4>
    1cfa:	19 2f       	mov	r17, r25
    if (Offset > 0)
    1cfc:	99 23       	and	r25, r25
    1cfe:	19 f0       	breq	.+6      	; 0x1d06 <DisplayValue+0xa8>
    {
      Index++;				/* adjust index for exponent offset, take next prefix */
    1d00:	8f 5f       	subi	r24, 0xFF	; 255
      Offset = 3 - Offset;		/* reverse value (1 or 2) */
    1d02:	29 1b       	sub	r18, r25
    1d04:	12 2f       	mov	r17, r18
    }
  Prefix = MEM_read_byte((uint8_t *)(&PrefixTab[Index]));   /* look up prefix in table */
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	8a 5a       	subi	r24, 0xAA	; 170
    1d0a:	9d 4f       	sbci	r25, 0xFD	; 253
    1d0c:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__eerd_byte_m328p>
    1d10:	b8 2e       	mov	r11, r24
  /*
   *  display value
   */

  /* convert value into string */
  utoa((unsigned int)Value, OutBuffer, 10);
    1d12:	c6 01       	movw	r24, r12
    1d14:	6e 01       	movw	r12, r28
    1d16:	08 94       	sec
    1d18:	c1 1c       	adc	r12, r1
    1d1a:	d1 1c       	adc	r13, r1
    1d1c:	b6 01       	movw	r22, r12
    1d1e:	4a e0       	ldi	r20, 0x0A	; 10
    1d20:	50 e0       	ldi	r21, 0x00	; 0
    1d22:	0e 94 35 1a 	call	0x346a	; 0x346a <utoa>
  Length = strlen(OutBuffer);
    1d26:	f6 01       	movw	r30, r12
    1d28:	01 90       	ld	r0, Z+
    1d2a:	00 20       	and	r0, r0
    1d2c:	e9 f7       	brne	.-6      	; 0x1d28 <DisplayValue+0xca>
    1d2e:	31 97       	sbiw	r30, 0x01	; 1
    1d30:	2e 2e       	mov	r2, r30
    1d32:	2c 18       	sub	r2, r12

  /* position of dot */
  Exponent = Length - Offset;		/* calculate position */
    1d34:	82 2c       	mov	r8, r2
    1d36:	81 1a       	sub	r8, r17

  if (Exponent <= 0)			/* we have to prepend "0." */
    1d38:	18 14       	cp	r1, r8
    1d3a:	44 f0       	brlt	.+16     	; 0x1d4c <DisplayValue+0xee>
  {
    /* 0: factor 10 / -1: factor 100 */
//    lcd_data('0');
    lcd_data('.');
    1d3c:	8e e2       	ldi	r24, 0x2E	; 46
    1d3e:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
    if (Exponent < 0) lcd_data('0');	/* extra 0 for factor 100 */
    1d42:	88 20       	and	r8, r8
    1d44:	19 f0       	breq	.+6      	; 0x1d4c <DisplayValue+0xee>
    1d46:	80 e3       	ldi	r24, 0x30	; 48
    1d48:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
  }

  if (Offset == 0) Exponent = -1;	/* disable dot if not needed */
    1d4c:	11 23       	and	r17, r17
    1d4e:	11 f4       	brne	.+4      	; 0x1d54 <DisplayValue+0xf6>
    1d50:	88 24       	eor	r8, r8
    1d52:	8a 94       	dec	r8
    1d54:	6e 01       	movw	r12, r28
    1d56:	08 94       	sec
    1d58:	c1 1c       	adc	r12, r1
    1d5a:	d1 1c       	adc	r13, r1
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    1d5c:	00 e0       	ldi	r16, 0x00	; 0
    1d5e:	10 e0       	ldi	r17, 0x00	; 0
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    Index++;				/* next one */
    if (Index == Exponent) {
    1d60:	99 24       	eor	r9, r9
    1d62:	87 fc       	sbrc	r8, 7
    1d64:	90 94       	com	r9
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    1d66:	0d c0       	rjmp	.+26     	; 0x1d82 <DisplayValue+0x124>
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    1d68:	0f 5f       	subi	r16, 0xFF	; 255
    1d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6c:	f6 01       	movw	r30, r12
    1d6e:	81 91       	ld	r24, Z+
    1d70:	6f 01       	movw	r12, r30
    1d72:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
    Index++;				/* next one */
    if (Index == Exponent) {
    1d76:	08 15       	cp	r16, r8
    1d78:	19 05       	cpc	r17, r9
    1d7a:	19 f4       	brne	.+6      	; 0x1d82 <DisplayValue+0x124>
      lcd_data('.');			/* display dot */
    1d7c:	8e e2       	ldi	r24, 0x2E	; 46
    1d7e:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    1d82:	02 15       	cp	r16, r2
    1d84:	88 f3       	brcs	.-30     	; 0x1d68 <DisplayValue+0x10a>
      lcd_data('.');			/* display dot */
    }
  }

  /* display prefix and unit */
  if (Prefix != 0) lcd_data(Prefix);
    1d86:	bb 20       	and	r11, r11
    1d88:	19 f0       	breq	.+6      	; 0x1d90 <DisplayValue+0x132>
    1d8a:	8b 2d       	mov	r24, r11
    1d8c:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
  if (Unit) lcd_data(Unit);
    1d90:	77 20       	and	r7, r7
    1d92:	19 f0       	breq	.+6      	; 0x1d9a <DisplayValue+0x13c>
    1d94:	87 2d       	mov	r24, r7
    1d96:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
}
    1d9a:	2f 96       	adiw	r28, 0x0f	; 15
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	de bf       	out	0x3e, r29	; 62
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	cd bf       	out	0x3d, r28	; 61
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	1f 91       	pop	r17
    1dac:	0f 91       	pop	r16
    1dae:	ff 90       	pop	r15
    1db0:	ef 90       	pop	r14
    1db2:	df 90       	pop	r13
    1db4:	cf 90       	pop	r12
    1db6:	bf 90       	pop	r11
    1db8:	af 90       	pop	r10
    1dba:	9f 90       	pop	r9
    1dbc:	8f 90       	pop	r8
    1dbe:	7f 90       	pop	r7
    1dc0:	5f 90       	pop	r5
    1dc2:	4f 90       	pop	r4
    1dc4:	3f 90       	pop	r3
    1dc6:	2f 90       	pop	r2
    1dc8:	08 95       	ret

00001dca <RvalOut>:
   }
}

#ifdef R_MESS
  #define AUSGABE_FUNKTION
void RvalOut(uint8_t ii) {	
    1dca:	0f 93       	push	r16
   // output of resistor value

   DisplayValue(resis[ii].rx,-1,LCD_CHAR_OMEGA,4);
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	2b e0       	ldi	r18, 0x0B	; 11
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	82 9f       	mul	r24, r18
    1dd4:	f0 01       	movw	r30, r0
    1dd6:	83 9f       	mul	r24, r19
    1dd8:	f0 0d       	add	r31, r0
    1dda:	92 9f       	mul	r25, r18
    1ddc:	f0 0d       	add	r31, r0
    1dde:	11 24       	eor	r1, r1
    1de0:	e5 5e       	subi	r30, 0xE5	; 229
    1de2:	fe 4f       	sbci	r31, 0xFE	; 254
    1de4:	60 81       	ld	r22, Z
    1de6:	71 81       	ldd	r23, Z+1	; 0x01
    1de8:	82 81       	ldd	r24, Z+2	; 0x02
    1dea:	93 81       	ldd	r25, Z+3	; 0x03
    1dec:	4f ef       	ldi	r20, 0xFF	; 255
    1dee:	24 ef       	ldi	r18, 0xF4	; 244
    1df0:	04 e0       	ldi	r16, 0x04	; 4
    1df2:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DisplayValue>
   lcd_space();
    1df6:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_space>
 }
    1dfa:	0f 91       	pop	r16
    1dfc:	08 95       	ret

00001dfe <mVAusgabe>:
   lcd_line2(); 				//2. row
   lcd_fix_string(Uf);			//"Uf="
   mVAusgabe(bcdnum >> 4);
   mVAusgabe(bcdnum & 0x0f);
}
void mVAusgabe(uint8_t nn) {
    1dfe:	0f 93       	push	r16
   if (nn < 3) {
    1e00:	83 30       	cpi	r24, 0x03	; 3
    1e02:	98 f4       	brcc	.+38     	; 0x1e2a <mVAusgabe+0x2c>
      // Output in mV units
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
    1e04:	e8 2f       	mov	r30, r24
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	ee 0f       	add	r30, r30
    1e0a:	ff 1f       	adc	r31, r31
    1e0c:	ee 0f       	add	r30, r30
    1e0e:	ff 1f       	adc	r31, r31
    1e10:	ed 59       	subi	r30, 0x9D	; 157
    1e12:	fe 4f       	sbci	r31, 0xFE	; 254
    1e14:	62 81       	ldd	r22, Z+2	; 0x02
    1e16:	73 81       	ldd	r23, Z+3	; 0x03
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	4d ef       	ldi	r20, 0xFD	; 253
    1e1e:	26 e5       	ldi	r18, 0x56	; 86
    1e20:	03 e0       	ldi	r16, 0x03	; 3
    1e22:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DisplayValue>
      lcd_space();
    1e26:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_space>
   }
}
    1e2a:	0f 91       	pop	r16
    1e2c:	08 95       	ret

00001e2e <UfAusgabe>:
// output of flux voltage for 1-2 diodes in row 2
// bcdnum = Numbers of both Diodes:
// higher 4 Bit  number of first Diode
// lower 4 Bit  number of second Diode (Structure diodes[nn])
// if number >= 3  no output is done
void UfAusgabe(uint8_t bcdnum) {
    1e2e:	1f 93       	push	r17
    1e30:	18 2f       	mov	r17, r24

   lcd_line2(); 				//2. row
    1e32:	80 ec       	ldi	r24, 0xC0	; 192
    1e34:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
   lcd_fix_string(Uf);			//"Uf="
    1e38:	82 e9       	ldi	r24, 0x92	; 146
    1e3a:	91 e0       	ldi	r25, 0x01	; 1
    1e3c:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
   mVAusgabe(bcdnum >> 4);
    1e40:	81 2f       	mov	r24, r17
    1e42:	82 95       	swap	r24
    1e44:	8f 70       	andi	r24, 0x0F	; 15
    1e46:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <mVAusgabe>
   mVAusgabe(bcdnum & 0x0f);
    1e4a:	81 2f       	mov	r24, r17
    1e4c:	8f 70       	andi	r24, 0x0F	; 15
    1e4e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <mVAusgabe>
}
    1e52:	1f 91       	pop	r17
    1e54:	08 95       	ret

00001e56 <AutoCheck>:
void AutoCheck(void) {
    1e56:	2f 92       	push	r2
    1e58:	3f 92       	push	r3
    1e5a:	4f 92       	push	r4
    1e5c:	5f 92       	push	r5
    1e5e:	6f 92       	push	r6
    1e60:	7f 92       	push	r7
    1e62:	8f 92       	push	r8
    1e64:	9f 92       	push	r9
    1e66:	af 92       	push	r10
    1e68:	bf 92       	push	r11
    1e6a:	cf 92       	push	r12
    1e6c:	df 92       	push	r13
    1e6e:	ef 92       	push	r14
    1e70:	ff 92       	push	r15
    1e72:	0f 93       	push	r16
    1e74:	1f 93       	push	r17
    1e76:	df 93       	push	r29
    1e78:	cf 93       	push	r28
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
    1e7e:	2e 97       	sbiw	r28, 0x0e	; 14
    1e80:	0f b6       	in	r0, 0x3f	; 63
    1e82:	f8 94       	cli
    1e84:	de bf       	out	0x3e, r29	; 62
    1e86:	0f be       	out	0x3f, r0	; 63
    1e88:	cd bf       	out	0x3d, r28	; 61

#ifdef AUTO_CAL
  uint8_t cap_found;	// counter for found capacitor
  int8_t udiff2;
#endif
  ADC_PORT = TXD_VAL;
    1e8a:	88 e0       	ldi	r24, 0x08	; 8
    1e8c:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = TXD_MSK;
    1e8e:	87 b9       	out	0x07, r24	; 7
  R_PORT = (1<<(TP1*2));		//Pin 1 over RL to +
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	85 b9       	out	0x05, r24	; 5
  R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//Pin 2 over RL to -
    1e94:	85 e0       	ldi	r24, 0x05	; 5
    1e96:	84 b9       	out	0x04, r24	; 4
  adcmv[0] = W5msReadADC(PC0);		// voltage at Pin 1
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
    1e9e:	8c 01       	movw	r16, r24
    1ea0:	9a 83       	std	Y+2, r25	; 0x02
    1ea2:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = ReadADC(PC1);		// voltage at Pin 2
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
    1eaa:	7c 01       	movw	r14, r24
    1eac:	9c 83       	std	Y+4, r25	; 0x04
    1eae:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = ReadADC(PC2);		// voltage at Pin 3
    1eb0:	82 e0       	ldi	r24, 0x02	; 2
    1eb2:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
    1eb6:	9c 01       	movw	r18, r24
    1eb8:	9e 83       	std	Y+6, r25	; 0x06
    1eba:	8d 83       	std	Y+5, r24	; 0x05
  if (abs((int)(adcmv[1] - adcmv[0])) > 20) {
    1ebc:	e0 1a       	sub	r14, r16
    1ebe:	f1 0a       	sbc	r15, r17
    1ec0:	f7 fe       	sbrs	r15, 7
    1ec2:	04 c0       	rjmp	.+8      	; 0x1ecc <AutoCheck+0x76>
    1ec4:	f0 94       	com	r15
    1ec6:	e1 94       	neg	r14
    1ec8:	f1 08       	sbc	r15, r1
    1eca:	f3 94       	inc	r15
    1ecc:	85 e1       	ldi	r24, 0x15	; 21
    1ece:	e8 16       	cp	r14, r24
    1ed0:	f1 04       	cpc	r15, r1
    1ed2:	0c f0       	brlt	.+2      	; 0x1ed6 <AutoCheck+0x80>
    1ed4:	3f c4       	rjmp	.+2174   	; 0x2754 <AutoCheck+0x8fe>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[2] - adcmv[0])) > 20) {
    1ed6:	20 1b       	sub	r18, r16
    1ed8:	31 0b       	sbc	r19, r17
    1eda:	37 ff       	sbrs	r19, 7
    1edc:	03 c0       	rjmp	.+6      	; 0x1ee4 <AutoCheck+0x8e>
    1ede:	30 95       	com	r19
    1ee0:	21 95       	neg	r18
    1ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee4:	25 31       	cpi	r18, 0x15	; 21
    1ee6:	31 05       	cpc	r19, r1
    1ee8:	0c f0       	brlt	.+2      	; 0x1eec <AutoCheck+0x96>
    1eea:	34 c4       	rjmp	.+2152   	; 0x2754 <AutoCheck+0x8fe>
     return;				//difference to big, no selftest
  }
  if (abs((int)((adcmv[0]*2) - ADCconfig.U_AVCC)) > 60) {
    1eec:	00 0f       	add	r16, r16
    1eee:	11 1f       	adc	r17, r17
    1ef0:	80 91 40 01 	lds	r24, 0x0140
    1ef4:	90 91 41 01 	lds	r25, 0x0141
    1ef8:	08 1b       	sub	r16, r24
    1efa:	19 0b       	sbc	r17, r25
    1efc:	17 ff       	sbrs	r17, 7
    1efe:	03 c0       	rjmp	.+6      	; 0x1f06 <AutoCheck+0xb0>
    1f00:	10 95       	com	r17
    1f02:	01 95       	neg	r16
    1f04:	1f 4f       	sbci	r17, 0xFF	; 255
    1f06:	0d 33       	cpi	r16, 0x3D	; 61
    1f08:	11 05       	cpc	r17, r1
    1f0a:	0c f0       	brlt	.+2      	; 0x1f0e <AutoCheck+0xb8>
    1f0c:	23 c4       	rjmp	.+2118   	; 0x2754 <AutoCheck+0x8fe>
     return;				//difference to big, no selftest
  }
  R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//Pin 3 over RL to - (Pin 1 over RL to +)
    1f0e:	81 e1       	ldi	r24, 0x11	; 17
    1f10:	84 b9       	out	0x04, r24	; 4
  adcmv[0] = W5msReadADC(PC0);		// voltage at Pin 1
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
    1f18:	8c 01       	movw	r16, r24
    1f1a:	9a 83       	std	Y+2, r25	; 0x02
    1f1c:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = ReadADC(PC1);		// voltage at Pin 2
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
    1f24:	7c 01       	movw	r14, r24
    1f26:	9c 83       	std	Y+4, r25	; 0x04
    1f28:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = ReadADC(PC2);		// voltage at Pin 3
    1f2a:	82 e0       	ldi	r24, 0x02	; 2
    1f2c:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
    1f30:	9c 01       	movw	r18, r24
    1f32:	9e 83       	std	Y+6, r25	; 0x06
    1f34:	8d 83       	std	Y+5, r24	; 0x05
  if (abs((int)(adcmv[1] - adcmv[0])) > 20) {
    1f36:	e0 1a       	sub	r14, r16
    1f38:	f1 0a       	sbc	r15, r17
    1f3a:	f7 fe       	sbrs	r15, 7
    1f3c:	04 c0       	rjmp	.+8      	; 0x1f46 <AutoCheck+0xf0>
    1f3e:	f0 94       	com	r15
    1f40:	e1 94       	neg	r14
    1f42:	f1 08       	sbc	r15, r1
    1f44:	f3 94       	inc	r15
    1f46:	e5 e1       	ldi	r30, 0x15	; 21
    1f48:	ee 16       	cp	r14, r30
    1f4a:	f1 04       	cpc	r15, r1
    1f4c:	0c f0       	brlt	.+2      	; 0x1f50 <AutoCheck+0xfa>
    1f4e:	02 c4       	rjmp	.+2052   	; 0x2754 <AutoCheck+0x8fe>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[2] - adcmv[0])) > 20) {
    1f50:	20 1b       	sub	r18, r16
    1f52:	31 0b       	sbc	r19, r17
    1f54:	37 ff       	sbrs	r19, 7
    1f56:	03 c0       	rjmp	.+6      	; 0x1f5e <AutoCheck+0x108>
    1f58:	30 95       	com	r19
    1f5a:	21 95       	neg	r18
    1f5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f5e:	25 31       	cpi	r18, 0x15	; 21
    1f60:	31 05       	cpc	r19, r1
    1f62:	0c f0       	brlt	.+2      	; 0x1f66 <AutoCheck+0x110>
    1f64:	f7 c3       	rjmp	.+2030   	; 0x2754 <AutoCheck+0x8fe>
     return;				//difference to big, no selftest
  }
  if (abs((int)((adcmv[0]*2) - ADCconfig.U_AVCC)) > 60) {
    1f66:	00 0f       	add	r16, r16
    1f68:	11 1f       	adc	r17, r17
    1f6a:	80 91 40 01 	lds	r24, 0x0140
    1f6e:	90 91 41 01 	lds	r25, 0x0141
    1f72:	08 1b       	sub	r16, r24
    1f74:	19 0b       	sbc	r17, r25
    1f76:	17 ff       	sbrs	r17, 7
    1f78:	03 c0       	rjmp	.+6      	; 0x1f80 <AutoCheck+0x12a>
    1f7a:	10 95       	com	r17
    1f7c:	01 95       	neg	r16
    1f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f80:	0d 33       	cpi	r16, 0x3D	; 61
    1f82:	11 05       	cpc	r17, r1
    1f84:	0c f0       	brlt	.+2      	; 0x1f88 <AutoCheck+0x132>
    1f86:	e6 c3       	rjmp	.+1996   	; 0x2754 <AutoCheck+0x8fe>
     return;				//difference to big, no selftest
  }
#ifdef WITH_SELFTEST
  lcd_clear();
    1f88:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clear>
  lcd_line1();
    1f8c:	80 e8       	ldi	r24, 0x80	; 128
    1f8e:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
    1f92:	88 e3       	ldi	r24, 0x38	; 56
    1f94:	91 e0       	ldi	r25, 0x01	; 1
    1f96:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
  wait1s();
    1f9a:	0e 94 02 19 	call	0x3204	; 0x3204 <wait1000ms>
    1f9e:	44 24       	eor	r4, r4
    1fa0:	55 24       	eor	r5, r5
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    1fa2:	11 e0       	ldi	r17, 0x01	; 1
           adcmv[2] = W20msReadADC(TP3);
           lcd_fix2_string(RH1L);	// "RH_Lo="
        }
                                        //############################################
        if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to VCC
    1fa4:	b2 e0       	ldi	r27, 0x02	; 2
    1fa6:	ab 2e       	mov	r10, r27
           R_PORT = 2<<(TP1*2);
           adcmv[0] = W20msReadADC(TP1) - ADCconfig.U_AVCC;
           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to VCC
    1fa8:	a8 e0       	ldi	r26, 0x08	; 8
    1faa:	ca 2e       	mov	r12, r26
           R_PORT = 2<<(TP2*2);
           adcmv[1] = W20msReadADC(TP2) - ADCconfig.U_AVCC;
           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to VCC
    1fac:	f0 e2       	ldi	r31, 0x20	; 32
    1fae:	bf 2e       	mov	r11, r31
           lcd_string(utoa(RHmultip, outval, 10));
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
    1fb0:	e5 e0       	ldi	r30, 0x05	; 5
    1fb2:	fe 2e       	mov	r15, r30
           adcmv[0] = W20msReadADC(TP1);
           adcmv[0] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1fb4:	7c e3       	ldi	r23, 0x3C	; 60
    1fb6:	67 2e       	mov	r6, r23
    1fb8:	79 ec       	ldi	r23, 0xC9	; 201
    1fba:	77 2e       	mov	r7, r23
    1fbc:	7f ef       	ldi	r23, 0xFF	; 255
    1fbe:	87 2e       	mov	r8, r23
    1fc0:	7f ef       	ldi	r23, 0xFF	; 255
    1fc2:	97 2e       	mov	r9, r23
    1fc4:	50 c1       	rjmp	.+672    	; 0x2266 <AutoCheck+0x410>
  wait1s();
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
        lcd_line2();			//Cursor to column 1, row 2
    1fc6:	80 ec       	ldi	r24, 0xC0	; 192
    1fc8:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
        lcd_clear_line();		// clear total line
    1fcc:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    1fd0:	80 e8       	ldi	r24, 0x80	; 128
    1fd2:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
        lcd_clear_line();		// clear total line
    1fd6:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    1fda:	80 e8       	ldi	r24, 0x80	; 128
    1fdc:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
        lcd_data('T');			//output the Testmode "T"
    1fe0:	84 e5       	ldi	r24, 0x54	; 84
    1fe2:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
        lcd_string(utoa(tt, outval, 10));	//output Test number
    1fe6:	c2 01       	movw	r24, r4
    1fe8:	6f e0       	ldi	r22, 0x0F	; 15
    1fea:	71 e0       	ldi	r23, 0x01	; 1
    1fec:	4a e0       	ldi	r20, 0x0A	; 10
    1fee:	50 e0       	ldi	r21, 0x00	; 0
    1ff0:	0e 94 35 1a 	call	0x346a	; 0x346a <utoa>
    1ff4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_string>
        lcd_space();
    1ff8:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_space>
                                        //############################################
        if (tt == 1) {   // output of reference voltage and factors for capacity measurement
    1ffc:	fe 2d       	mov	r31, r14
    1ffe:	f1 30       	cpi	r31, 0x01	; 1
    2000:	21 f5       	brne	.+72     	; 0x204a <AutoCheck+0x1f4>
           ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    2002:	2e eb       	ldi	r18, 0xBE	; 190
    2004:	20 93 3c 01 	sts	0x013C, r18
 #ifdef WITH_AUTO_REF
           (void) ReadADC(0x0e);	// read reference voltage 
           ref_mv = W5msReadADC(0x0e);	// read reference voltage 
           RefVoltage();		//compute RHmultip = f(reference voltage)
 #endif
           lcd_fix2_string(URefT);	//"URef="
    2008:	8b ec       	ldi	r24, 0xCB	; 203
    200a:	91 e0       	ldi	r25, 0x01	; 1
    200c:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
           DisplayValue(ref_mv,-3,'V',4);
    2010:	60 91 42 01 	lds	r22, 0x0142
    2014:	70 91 43 01 	lds	r23, 0x0143
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	4d ef       	ldi	r20, 0xFD	; 253
    201e:	26 e5       	ldi	r18, 0x56	; 86
    2020:	04 e0       	ldi	r16, 0x04	; 4
    2022:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DisplayValue>
           lcd_line2();			//Cursor to column 1, row 2
    2026:	80 ec       	ldi	r24, 0xC0	; 192
    2028:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
           lcd_fix2_string(RHfakt);	//"RHf="
    202c:	80 ed       	ldi	r24, 0xD0	; 208
    202e:	91 e0       	ldi	r25, 0x01	; 1
    2030:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
           lcd_string(utoa(RHmultip, outval, 10));
    2034:	80 91 00 01 	lds	r24, 0x0100
    2038:	90 91 01 01 	lds	r25, 0x0101
    203c:	6f e0       	ldi	r22, 0x0F	; 15
    203e:	71 e0       	ldi	r23, 0x01	; 1
    2040:	4a e0       	ldi	r20, 0x0A	; 10
    2042:	50 e0       	ldi	r21, 0x00	; 0
    2044:	0e 94 35 1a 	call	0x346a	; 0x346a <utoa>
    2048:	f5 c0       	rjmp	.+490    	; 0x2234 <AutoCheck+0x3de>
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
    204a:	8e 2d       	mov	r24, r14
    204c:	82 30       	cpi	r24, 0x02	; 2
    204e:	09 f0       	breq	.+2      	; 0x2052 <AutoCheck+0x1fc>
    2050:	52 c0       	rjmp	.+164    	; 0x20f6 <AutoCheck+0x2a0>
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	85 b9       	out	0x05, r24	; 5
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
    2056:	f4 b8       	out	0x04, r15	; 4
           adcmv[0] = W20msReadADC(TP1);
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	0e 94 25 19 	call	0x324a	; 0x324a <W20msReadADC>
    205e:	8c 01       	movw	r16, r24
           adcmv[0] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    2060:	60 91 40 01 	lds	r22, 0x0140
    2064:	70 91 41 01 	lds	r23, 0x0141
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	28 e5       	ldi	r18, 0x58	; 88
    206e:	3b e1       	ldi	r19, 0x1B	; 27
    2070:	40 e0       	ldi	r20, 0x00	; 0
    2072:	50 e0       	ldi	r21, 0x00	; 0
    2074:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsi3>
    2078:	a4 01       	movw	r20, r8
    207a:	93 01       	movw	r18, r6
    207c:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__divmodsi4>
    2080:	02 0f       	add	r16, r18
    2082:	13 1f       	adc	r17, r19
    2084:	1a 83       	std	Y+2, r17	; 0x02
    2086:	09 83       	std	Y+1, r16	; 0x01
           R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//RL3 to -
    2088:	34 b8       	out	0x04, r3	; 4
           adcmv[1] = W20msReadADC(TP1);
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	0e 94 25 19 	call	0x324a	; 0x324a <W20msReadADC>
    2090:	8c 01       	movw	r16, r24
           adcmv[1] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    2092:	60 91 40 01 	lds	r22, 0x0140
    2096:	70 91 41 01 	lds	r23, 0x0141
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	28 e5       	ldi	r18, 0x58	; 88
    20a0:	3b e1       	ldi	r19, 0x1B	; 27
    20a2:	40 e0       	ldi	r20, 0x00	; 0
    20a4:	50 e0       	ldi	r21, 0x00	; 0
    20a6:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsi3>
    20aa:	a4 01       	movw	r20, r8
    20ac:	93 01       	movw	r18, r6
    20ae:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__divmodsi4>
    20b2:	02 0f       	add	r16, r18
    20b4:	13 1f       	adc	r17, r19
    20b6:	1c 83       	std	Y+4, r17	; 0x04
    20b8:	0b 83       	std	Y+3, r16	; 0x03
           R_PORT = 1<<(TP2*2);		//RL2 to VCC
    20ba:	25 b8       	out	0x05, r2	; 5
           R_DDR = (1<<(TP2*2)) | (1<<(TP3*2));	//RL3 to -
    20bc:	e4 e1       	ldi	r30, 0x14	; 20
    20be:	e4 b9       	out	0x04, r30	; 4
           adcmv[2] = W20msReadADC(TP2);
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	0e 94 25 19 	call	0x324a	; 0x324a <W20msReadADC>
    20c6:	8c 01       	movw	r16, r24
           adcmv[2] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    20c8:	60 91 40 01 	lds	r22, 0x0140
    20cc:	70 91 41 01 	lds	r23, 0x0141
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	28 e5       	ldi	r18, 0x58	; 88
    20d6:	3b e1       	ldi	r19, 0x1B	; 27
    20d8:	40 e0       	ldi	r20, 0x00	; 0
    20da:	50 e0       	ldi	r21, 0x00	; 0
    20dc:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsi3>
    20e0:	a4 01       	movw	r20, r8
    20e2:	93 01       	movw	r18, r6
    20e4:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__divmodsi4>
    20e8:	02 0f       	add	r16, r18
    20ea:	13 1f       	adc	r17, r19
    20ec:	1e 83       	std	Y+6, r17	; 0x06
    20ee:	0d 83       	std	Y+5, r16	; 0x05
           lcd_fix2_string(RLRL);	// "RLRL"
    20f0:	8d ed       	ldi	r24, 0xDD	; 221
    20f2:	91 e0       	ldi	r25, 0x01	; 1
    20f4:	49 c0       	rjmp	.+146    	; 0x2188 <AutoCheck+0x332>
        }
                                        //############################################
        if (tt == 3) { // how equal are the RH resistors
    20f6:	fe 2d       	mov	r31, r14
    20f8:	f3 30       	cpi	r31, 0x03	; 3
    20fa:	41 f5       	brne	.+80     	; 0x214c <AutoCheck+0x2f6>
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    20fc:	a5 b8       	out	0x05, r10	; 5
           R_DDR = (2<<(TP1*2)) | (2<<(TP2*2));	//RH2 to -
    20fe:	2a e0       	ldi	r18, 0x0A	; 10
    2100:	24 b9       	out	0x04, r18	; 4
           adcmv[0] = W20msReadADC(TP1);
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	0e 94 25 19 	call	0x324a	; 0x324a <W20msReadADC>
           adcmv[3] = ADCconfig.U_AVCC / 2;
    2108:	00 91 40 01 	lds	r16, 0x0140
    210c:	10 91 41 01 	lds	r17, 0x0141
    2110:	16 95       	lsr	r17
    2112:	07 95       	ror	r16
    2114:	18 87       	std	Y+8, r17	; 0x08
    2116:	0f 83       	std	Y+7, r16	; 0x07
           adcmv[0] -= adcmv[3];
    2118:	80 1b       	sub	r24, r16
    211a:	91 0b       	sbc	r25, r17
    211c:	9a 83       	std	Y+2, r25	; 0x02
    211e:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (2<<(TP1*2)) | (2<<(TP3*2));	//RH3 to -
    2120:	82 e2       	ldi	r24, 0x22	; 34
    2122:	84 b9       	out	0x04, r24	; 4
           adcmv[1] = W20msReadADC(TP1);
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	0e 94 25 19 	call	0x324a	; 0x324a <W20msReadADC>
           adcmv[1] -= adcmv[3];
    212a:	80 1b       	sub	r24, r16
    212c:	91 0b       	sbc	r25, r17
    212e:	9c 83       	std	Y+4, r25	; 0x04
    2130:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 2<<(TP2*2);		//RL2 to VCC
    2132:	c5 b8       	out	0x05, r12	; 5
           R_DDR = (2<<(TP2*2)) | (2<<(TP3*2));	//RH3 to -
    2134:	e8 e2       	ldi	r30, 0x28	; 40
    2136:	e4 b9       	out	0x04, r30	; 4
           adcmv[2] = W20msReadADC(TP2);
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	0e 94 25 19 	call	0x324a	; 0x324a <W20msReadADC>
           adcmv[2] -= adcmv[3];
    213e:	80 1b       	sub	r24, r16
    2140:	91 0b       	sbc	r25, r17
    2142:	9e 83       	std	Y+6, r25	; 0x06
    2144:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RHRH);	// "RHRH"
    2146:	8b ee       	ldi	r24, 0xEB	; 235
    2148:	91 e0       	ldi	r25, 0x01	; 1
    214a:	1e c0       	rjmp	.+60     	; 0x2188 <AutoCheck+0x332>
        }
                                        //############################################
        if (tt == 4) { // Text release probes
    214c:	fe 2d       	mov	r31, r14
    214e:	f4 30       	cpi	r31, 0x04	; 4
    2150:	19 f4       	brne	.+6      	; 0x2158 <AutoCheck+0x302>
           lcd_fix2_string(RELPROBE);	// "Release Probes"
    2152:	88 e4       	ldi	r24, 0x48	; 72
    2154:	91 e0       	ldi	r25, 0x01	; 1
    2156:	18 c0       	rjmp	.+48     	; 0x2188 <AutoCheck+0x332>
        }
                                        //############################################
        if (tt == 5) { // can we switch the ADC pins to GND across R_H resistor?
    2158:	2e 2d       	mov	r18, r14
    215a:	25 30       	cpi	r18, 0x05	; 5
    215c:	c1 f4       	brne	.+48     	; 0x218e <AutoCheck+0x338>
           R_PORT = 0;
    215e:	15 b8       	out	0x05, r1	; 5
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to GND
    2160:	a4 b8       	out	0x04, r10	; 4
           adcmv[0] = W20msReadADC(TP1);
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	0e 94 25 19 	call	0x324a	; 0x324a <W20msReadADC>
    2168:	9a 83       	std	Y+2, r25	; 0x02
    216a:	89 83       	std	Y+1, r24	; 0x01

           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to GND
    216c:	c4 b8       	out	0x04, r12	; 4
           adcmv[1] = W20msReadADC(TP2);
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	0e 94 25 19 	call	0x324a	; 0x324a <W20msReadADC>
    2174:	9c 83       	std	Y+4, r25	; 0x04
    2176:	8b 83       	std	Y+3, r24	; 0x03

           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    2178:	b4 b8       	out	0x04, r11	; 4
           adcmv[2] = W20msReadADC(TP3);
    217a:	82 e0       	ldi	r24, 0x02	; 2
    217c:	0e 94 25 19 	call	0x324a	; 0x324a <W20msReadADC>
    2180:	9e 83       	std	Y+6, r25	; 0x06
    2182:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RH1L);	// "RH_Lo="
    2184:	85 ed       	ldi	r24, 0xD5	; 213
    2186:	91 e0       	ldi	r25, 0x01	; 1
    2188:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
    218c:	30 c0       	rjmp	.+96     	; 0x21ee <AutoCheck+0x398>
        }
                                        //############################################
        if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
    218e:	8e 2d       	mov	r24, r14
    2190:	86 30       	cpi	r24, 0x06	; 6
    2192:	51 f5       	brne	.+84     	; 0x21e8 <AutoCheck+0x392>
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to VCC
    2194:	a4 b8       	out	0x04, r10	; 4
           R_PORT = 2<<(TP1*2);
    2196:	a5 b8       	out	0x05, r10	; 5
           adcmv[0] = W20msReadADC(TP1) - ADCconfig.U_AVCC;
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	0e 94 25 19 	call	0x324a	; 0x324a <W20msReadADC>
    219e:	20 91 40 01 	lds	r18, 0x0140
    21a2:	30 91 41 01 	lds	r19, 0x0141
    21a6:	82 1b       	sub	r24, r18
    21a8:	93 0b       	sbc	r25, r19
    21aa:	9a 83       	std	Y+2, r25	; 0x02
    21ac:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to VCC
    21ae:	c4 b8       	out	0x04, r12	; 4
           R_PORT = 2<<(TP2*2);
    21b0:	c5 b8       	out	0x05, r12	; 5
           adcmv[1] = W20msReadADC(TP2) - ADCconfig.U_AVCC;
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	0e 94 25 19 	call	0x324a	; 0x324a <W20msReadADC>
    21b8:	20 91 40 01 	lds	r18, 0x0140
    21bc:	30 91 41 01 	lds	r19, 0x0141
    21c0:	82 1b       	sub	r24, r18
    21c2:	93 0b       	sbc	r25, r19
    21c4:	9c 83       	std	Y+4, r25	; 0x04
    21c6:	8b 83       	std	Y+3, r24	; 0x03
           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to VCC
    21c8:	b4 b8       	out	0x04, r11	; 4
           R_PORT = 2<<(TP3*2);
    21ca:	b5 b8       	out	0x05, r11	; 5
           adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
    21cc:	82 e0       	ldi	r24, 0x02	; 2
    21ce:	0e 94 25 19 	call	0x324a	; 0x324a <W20msReadADC>
    21d2:	20 91 40 01 	lds	r18, 0x0140
    21d6:	30 91 41 01 	lds	r19, 0x0141
    21da:	82 1b       	sub	r24, r18
    21dc:	93 0b       	sbc	r25, r19
    21de:	9e 83       	std	Y+6, r25	; 0x06
    21e0:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RH1H);	// "RH_Hi="
    21e2:	89 ed       	ldi	r24, 0xD9	; 217
    21e4:	91 e0       	ldi	r25, 0x01	; 1
    21e6:	d0 cf       	rjmp	.-96     	; 0x2188 <AutoCheck+0x332>
        }
                                        //############################################
        if (tt > 1) {	// output 3 voltages 
    21e8:	ee 2d       	mov	r30, r14
    21ea:	e1 30       	cpi	r30, 0x01	; 1
    21ec:	29 f1       	breq	.+74     	; 0x2238 <AutoCheck+0x3e2>
           lcd_line2();			//Cursor to column 1, row 2
    21ee:	80 ec       	ldi	r24, 0xC0	; 192
    21f0:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
           lcd_string(itoa(adcmv[0], outval, 10));	//output voltage 1
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	9a 81       	ldd	r25, Y+2	; 0x02
    21f8:	6f e0       	ldi	r22, 0x0F	; 15
    21fa:	71 e0       	ldi	r23, 0x01	; 1
    21fc:	4a e0       	ldi	r20, 0x0A	; 10
    21fe:	50 e0       	ldi	r21, 0x00	; 0
    2200:	0e 94 14 1a 	call	0x3428	; 0x3428 <itoa>
    2204:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_string>
           lcd_space();
    2208:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_space>
           lcd_string(itoa(adcmv[1], outval, 10));	//output voltage 2
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	9c 81       	ldd	r25, Y+4	; 0x04
    2210:	6f e0       	ldi	r22, 0x0F	; 15
    2212:	71 e0       	ldi	r23, 0x01	; 1
    2214:	4a e0       	ldi	r20, 0x0A	; 10
    2216:	50 e0       	ldi	r21, 0x00	; 0
    2218:	0e 94 14 1a 	call	0x3428	; 0x3428 <itoa>
    221c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_string>
           lcd_space();
    2220:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_space>
           lcd_string(itoa(adcmv[2], outval, 10));	//output voltage 3
    2224:	8d 81       	ldd	r24, Y+5	; 0x05
    2226:	9e 81       	ldd	r25, Y+6	; 0x06
    2228:	6f e0       	ldi	r22, 0x0F	; 15
    222a:	71 e0       	ldi	r23, 0x01	; 1
    222c:	4a e0       	ldi	r20, 0x0A	; 10
    222e:	50 e0       	ldi	r21, 0x00	; 0
    2230:	0e 94 14 1a 	call	0x3428	; 0x3428 <itoa>
    2234:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_string>
        }
        ADC_DDR =  TXD_MSK;		// all-Pins to Input
    2238:	c7 b8       	out	0x07, r12	; 7
        ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
    223a:	c8 b8       	out	0x08, r12	; 8
        R_DDR = 0;			// all R-Ports to Input
    223c:	14 b8       	out	0x04, r1	; 4
        R_PORT = 0;
    223e:	15 b8       	out	0x05, r1	; 5
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    2240:	4f 9b       	sbis	0x09, 7	; 9
    2242:	0b c0       	rjmp	.+22     	; 0x225a <AutoCheck+0x404>
	   // if key is pressed, don't repeat
           break;
        }
        wait500ms();
    2244:	0e 94 03 19 	call	0x3206	; 0x3206 <wait500ms>
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    2248:	4f 9b       	sbis	0x09, 7	; 9
    224a:	07 c0       	rjmp	.+14     	; 0x225a <AutoCheck+0x404>
	   // if key is pressed, don't repeat
           break;
        }
        wait500ms();
    224c:	0e 94 03 19 	call	0x3206	; 0x3206 <wait500ms>
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
  wait1s();
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
    2250:	d3 94       	inc	r13
    2252:	fd 2d       	mov	r31, r13
    2254:	f4 30       	cpi	r31, 0x04	; 4
    2256:	09 f0       	breq	.+2      	; 0x225a <AutoCheck+0x404>
    2258:	b6 ce       	rjmp	.-660    	; 0x1fc6 <AutoCheck+0x170>
    225a:	1e 2d       	mov	r17, r14
	   // if key is pressed, don't repeat
           break;
        }
        wait500ms();
     } //end for ww
     wait1s();
    225c:	0e 94 02 19 	call	0x3204	; 0x3204 <wait1000ms>
  lcd_line1();
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
  wait1s();
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    2260:	1f 5f       	subi	r17, 0xFF	; 255
    2262:	17 30       	cpi	r17, 0x07	; 7
    2264:	51 f0       	breq	.+20     	; 0x227a <AutoCheck+0x424>
void AutoCheck(void) {
    2266:	dd 24       	eor	r13, r13
        lcd_line2();			//Cursor to column 1, row 2
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_data('T');			//output the Testmode "T"
    2268:	08 94       	sec
    226a:	41 1c       	adc	r4, r1
    226c:	51 1c       	adc	r5, r1
        if (tt == 2) { // how equal are the RL resistors? 
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
           adcmv[0] = W20msReadADC(TP1);
           adcmv[0] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
           R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//RL3 to -
    226e:	51 e1       	ldi	r21, 0x11	; 17
    2270:	35 2e       	mov	r3, r21
           adcmv[1] = W20msReadADC(TP1);
           adcmv[1] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
           R_PORT = 1<<(TP2*2);		//RL2 to VCC
    2272:	44 e0       	ldi	r20, 0x04	; 4
    2274:	24 2e       	mov	r2, r20
    2276:	e1 2e       	mov	r14, r17
    2278:	a6 ce       	rjmp	.-692    	; 0x1fc6 <AutoCheck+0x170>
     wait1s();
  } //end for tt
#endif

  // measurement of internal resistance of the ADC port outputs switched to GND
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    227a:	39 e0       	ldi	r19, 0x09	; 9
    227c:	c3 2e       	mov	r12, r19
    227e:	c7 b8       	out	0x07, r12	; 7
  R_PORT = 1<<(TP1*2);		//R_L-PORT 1 to VCC
    2280:	dd 24       	eor	r13, r13
    2282:	d3 94       	inc	r13
    2284:	d5 b8       	out	0x05, r13	; 5
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to VCC
    2286:	d4 b8       	out	0x04, r13	; 4
  adcmv[0] = W5msReadADC(TP1);
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
    228e:	7c 01       	movw	r14, r24

  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin 2 to output 0V
    2290:	2a e0       	ldi	r18, 0x0A	; 10
    2292:	62 2e       	mov	r6, r18
    2294:	67 b8       	out	0x07, r6	; 7
  R_PORT =  1<<(TP2*2);	//R_L-PORT 2 to VCC
    2296:	94 e0       	ldi	r25, 0x04	; 4
    2298:	89 2e       	mov	r8, r25
    229a:	85 b8       	out	0x05, r8	; 5
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to VCC
    229c:	84 b8       	out	0x04, r8	; 4
  adcmv[1] = W5msReadADC(TP2);
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
    22a4:	8c 01       	movw	r16, r24

  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin 3 to output 0V
    22a6:	8c e0       	ldi	r24, 0x0C	; 12
    22a8:	a8 2e       	mov	r10, r24
    22aa:	a7 b8       	out	0x07, r10	; 7
  R_PORT =  1<<(TP3*2);	//R_L-PORT 3 to VCC
    22ac:	b0 e1       	ldi	r27, 0x10	; 16
    22ae:	bb 2e       	mov	r11, r27
    22b0:	b5 b8       	out	0x05, r11	; 5
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to VCC
    22b2:	b4 b8       	out	0x04, r11	; 4
  adcmv[2] = W5msReadADC(TP3);
    22b4:	82 e0       	ldi	r24, 0x02	; 2
    22b6:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
  sum_rm = (adcmv[0] + adcmv[1] + adcmv[2]); //add all three values
    22ba:	0e 0d       	add	r16, r14
    22bc:	1f 1d       	adc	r17, r15
    22be:	08 0f       	add	r16, r24
    22c0:	19 1f       	adc	r17, r25

  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
    22c2:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
    22c4:	c8 b8       	out	0x08, r12	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    22c6:	c7 b8       	out	0x07, r12	; 7
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
    22c8:	d4 b8       	out	0x04, r13	; 4
  adcmv[0] = ADCconfig.U_AVCC - W5msReadADC(TP1);
    22ca:	c0 90 40 01 	lds	r12, 0x0140
    22ce:	d0 90 41 01 	lds	r13, 0x0141
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
    22d8:	c8 1a       	sub	r12, r24
    22da:	d9 0a       	sbc	r13, r25
    22dc:	da 82       	std	Y+2, r13	; 0x02
    22de:	c9 82       	std	Y+1, r12	; 0x01
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
    22e0:	68 b8       	out	0x08, r6	; 8
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
    22e2:	67 b8       	out	0x07, r6	; 7
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
    22e4:	84 b8       	out	0x04, r8	; 4
  adcmv[1] = ADCconfig.U_AVCC - W5msReadADC(TP2);
    22e6:	e0 90 40 01 	lds	r14, 0x0140
    22ea:	f0 90 41 01 	lds	r15, 0x0141
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
    22f4:	e8 1a       	sub	r14, r24
    22f6:	f9 0a       	sbc	r15, r25
    22f8:	fc 82       	std	Y+4, r15	; 0x04
    22fa:	eb 82       	std	Y+3, r14	; 0x03

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
    22fc:	a8 b8       	out	0x08, r10	; 8
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
    22fe:	a7 b8       	out	0x07, r10	; 7
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
    2300:	b4 b8       	out	0x04, r11	; 4
  adcmv[2] = ADCconfig.U_AVCC - W5msReadADC(TP3);
    2302:	a0 90 40 01 	lds	r10, 0x0140
    2306:	b0 90 41 01 	lds	r11, 0x0141
    230a:	82 e0       	ldi	r24, 0x02	; 2
    230c:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>

  sum_c0 = (adcmv[0] + adcmv[1] + adcmv[2]);
    2310:	ec 0c       	add	r14, r12
    2312:	fd 1c       	adc	r15, r13
  adcmv[1] = ADCconfig.U_AVCC - W5msReadADC(TP2);

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
  adcmv[2] = ADCconfig.U_AVCC - W5msReadADC(TP3);
    2314:	a8 1a       	sub	r10, r24
    2316:	b9 0a       	sbc	r11, r25

  sum_c0 = (adcmv[0] + adcmv[1] + adcmv[2]);
    2318:	ea 0c       	add	r14, r10
    231a:	fb 1c       	adc	r15, r11
  u680 = ((ADCconfig.U_AVCC * 3) - sum_rm - sum_c0);	//three times the voltage at the 680 Ohm
    231c:	80 91 40 01 	lds	r24, 0x0140
    2320:	90 91 41 01 	lds	r25, 0x0141
    2324:	5c 01       	movw	r10, r24
    2326:	aa 0c       	add	r10, r10
    2328:	bb 1c       	adc	r11, r11
    232a:	a8 0e       	add	r10, r24
    232c:	b9 1e       	adc	r11, r25
    232e:	a0 1a       	sub	r10, r16
    2330:	b1 0a       	sbc	r11, r17
    2332:	ae 18       	sub	r10, r14
    2334:	bf 08       	sbc	r11, r15
  pin_rm = (unsigned long)((unsigned long)sum_rm * (unsigned long)R_L_VAL) / (unsigned long)u680;
    2336:	cc 24       	eor	r12, r12
    2338:	dd 24       	eor	r13, r13
    233a:	b8 01       	movw	r22, r16
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	20 e9       	ldi	r18, 0x90	; 144
    2342:	3a e1       	ldi	r19, 0x1A	; 26
    2344:	40 e0       	ldi	r20, 0x00	; 0
    2346:	50 e0       	ldi	r21, 0x00	; 0
    2348:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsi3>
    234c:	a6 01       	movw	r20, r12
    234e:	95 01       	movw	r18, r10
    2350:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
    2354:	49 01       	movw	r8, r18
  adcmv[2] = pin_rm;	// for last output in row 2
    2356:	3e 83       	std	Y+6, r19	; 0x06
    2358:	2d 83       	std	Y+5, r18	; 0x05
  pin_rp = (unsigned long)((unsigned long)sum_c0 * (unsigned long)R_L_VAL) / (unsigned long)u680;
    235a:	b7 01       	movw	r22, r14
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	20 e9       	ldi	r18, 0x90	; 144
    2362:	3a e1       	ldi	r19, 0x1A	; 26
    2364:	40 e0       	ldi	r20, 0x00	; 0
    2366:	50 e0       	ldi	r21, 0x00	; 0
    2368:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsi3>
    236c:	a6 01       	movw	r20, r12
    236e:	95 01       	movw	r18, r10
    2370:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
    2374:	79 01       	movw	r14, r18
  lcd_clear();
    2376:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clear>
  lcd_fix_string(RIHI);	// "RiHi="
    237a:	89 ef       	ldi	r24, 0xF9	; 249
    237c:	91 e0       	ldi	r25, 0x01	; 1
    237e:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
  DisplayValue(pin_rp,-1,LCD_CHAR_OMEGA,3);
    2382:	b7 01       	movw	r22, r14
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	4f ef       	ldi	r20, 0xFF	; 255
    238a:	24 ef       	ldi	r18, 0xF4	; 244
    238c:	03 e0       	ldi	r16, 0x03	; 3
    238e:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DisplayValue>
  lcd_line2();
    2392:	80 ec       	ldi	r24, 0xC0	; 192
    2394:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
  lcd_fix_string(RILO);	// "RiLo="
    2398:	80 e0       	ldi	r24, 0x00	; 0
    239a:	92 e0       	ldi	r25, 0x02	; 2
    239c:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
  DisplayValue(pin_rm,-1,LCD_CHAR_OMEGA,3);
    23a0:	b4 01       	movw	r22, r8
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	4f ef       	ldi	r20, 0xFF	; 255
    23a8:	24 ef       	ldi	r18, 0xF4	; 244
    23aa:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DisplayValue>
  wait2s();			//wait 2 seconds
    23ae:	0e 94 01 19 	call	0x3202	; 0x3202 <wait2s>
#ifdef AUTO_CAL
  if ((pin_rp < 280) && (pin_rm < 250)) {
    23b2:	28 e1       	ldi	r18, 0x18	; 24
    23b4:	e2 16       	cp	r14, r18
    23b6:	21 e0       	ldi	r18, 0x01	; 1
    23b8:	f2 06       	cpc	r15, r18
    23ba:	90 f4       	brcc	.+36     	; 0x23e0 <AutoCheck+0x58a>
    23bc:	8a ef       	ldi	r24, 0xFA	; 250
    23be:	88 16       	cp	r8, r24
    23c0:	91 04       	cpc	r9, r1
    23c2:	70 f4       	brcc	.+28     	; 0x23e0 <AutoCheck+0x58a>
     // rp is below 28 Ohm and rm is below 25 Ohm
     (void) eeprom_write_word((uint16_t *)(&R680pl), pin_rp+R_L_VAL);  //hold VCC resistance value in EEprom
    23c4:	b7 01       	movw	r22, r14
    23c6:	60 57       	subi	r22, 0x70	; 112
    23c8:	75 4e       	sbci	r23, 0xE5	; 229
    23ca:	81 e5       	ldi	r24, 0x51	; 81
    23cc:	92 e0       	ldi	r25, 0x02	; 2
    23ce:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__eewr_word_m328p>
     (void) eeprom_write_word((uint16_t *)(&R680mi), pin_rm+R_L_VAL);  //hold GND resistance value in EEprom
    23d2:	b4 01       	movw	r22, r8
    23d4:	60 57       	subi	r22, 0x70	; 112
    23d6:	75 4e       	sbci	r23, 0xE5	; 229
    23d8:	83 e5       	ldi	r24, 0x53	; 83
    23da:	92 e0       	ldi	r25, 0x02	; 2
    23dc:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__eewr_word_m328p>
  }
#endif

#ifdef C_MESS
  //measure Zero offset for Capacity measurement
  adcmv[3] = 0;
    23e0:	18 86       	std	Y+8, r1	; 0x08
    23e2:	1f 82       	std	Y+7, r1	; 0x07
  PartFound = PART_NONE;
    23e4:	10 92 09 01 	sts	0x0109, r1
  ReadCapacity(TP3, TP1);
    23e8:	82 e0       	ldi	r24, 0x02	; 2
    23ea:	60 e0       	ldi	r22, 0x00	; 0
    23ec:	0e 94 ad 0b 	call	0x175a	; 0x175a <ReadCapacity>
  adcmv[5] = (unsigned int) cval_uncorrected;	//save capacity value of empty Pin 1:3
    23f0:	e0 90 5a 01 	lds	r14, 0x015A
    23f4:	f0 90 5b 01 	lds	r15, 0x015B
    23f8:	fc 86       	std	Y+12, r15	; 0x0c
    23fa:	eb 86       	std	Y+11, r14	; 0x0b
  ReadCapacity(TP3, TP2);
    23fc:	82 e0       	ldi	r24, 0x02	; 2
    23fe:	61 e0       	ldi	r22, 0x01	; 1
    2400:	0e 94 ad 0b 	call	0x175a	; 0x175a <ReadCapacity>
  adcmv[6] = (unsigned int) cval_uncorrected;	//save capacity value of empty Pin 2:3
    2404:	00 91 5a 01 	lds	r16, 0x015A
    2408:	10 91 5b 01 	lds	r17, 0x015B
    240c:	1e 87       	std	Y+14, r17	; 0x0e
    240e:	0d 87       	std	Y+13, r16	; 0x0d
  ReadCapacity(TP2, TP1);
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	60 e0       	ldi	r22, 0x00	; 0
    2414:	0e 94 ad 0b 	call	0x175a	; 0x175a <ReadCapacity>
  adcmv[2] = (unsigned int) cval_uncorrected;	//save capacity value of empty Pin 1:2
    2418:	c0 90 5a 01 	lds	r12, 0x015A
    241c:	d0 90 5b 01 	lds	r13, 0x015B
    2420:	de 82       	std	Y+6, r13	; 0x06
    2422:	cd 82       	std	Y+5, r12	; 0x05
  ReadCapacity(TP1, TP3);
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	62 e0       	ldi	r22, 0x02	; 2
    2428:	0e 94 ad 0b 	call	0x175a	; 0x175a <ReadCapacity>
  adcmv[1] = (unsigned int) cval_uncorrected;	//save capacity value of empty Pin 3:1
    242c:	80 91 5a 01 	lds	r24, 0x015A
    2430:	90 91 5b 01 	lds	r25, 0x015B
    2434:	9c 83       	std	Y+4, r25	; 0x04
    2436:	8b 83       	std	Y+3, r24	; 0x03
  ReadCapacity(TP2, TP3);
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	62 e0       	ldi	r22, 0x02	; 2
    243c:	0e 94 ad 0b 	call	0x175a	; 0x175a <ReadCapacity>
  adcmv[4] = (unsigned int) cval_uncorrected;	//save capacity value of empty Pin 3:2
    2440:	80 91 5a 01 	lds	r24, 0x015A
    2444:	90 91 5b 01 	lds	r25, 0x015B
    2448:	9a 87       	std	Y+10, r25	; 0x0a
    244a:	89 87       	std	Y+9, r24	; 0x09
  ReadCapacity(TP1, TP2);
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	61 e0       	ldi	r22, 0x01	; 1
    2450:	0e 94 ad 0b 	call	0x175a	; 0x175a <ReadCapacity>
  adcmv[0] = (unsigned int) cval_uncorrected;	//save capacity value of empty Pin 2:1
    2454:	80 91 5a 01 	lds	r24, 0x015A
    2458:	90 91 5b 01 	lds	r25, 0x015B
    245c:	9a 83       	std	Y+2, r25	; 0x02
    245e:	89 83       	std	Y+1, r24	; 0x01
  lcd_clear();
    2460:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clear>
  lcd_data('C');
    2464:	83 e4       	ldi	r24, 0x43	; 67
    2466:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
  lcd_data('0');
    246a:	80 e3       	ldi	r24, 0x30	; 48
    246c:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
  lcd_space();
    2470:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_space>
  lcd_string(itoa(adcmv[5], outval, 10));	//output cap0 1:3
    2474:	c7 01       	movw	r24, r14
    2476:	6f e0       	ldi	r22, 0x0F	; 15
    2478:	71 e0       	ldi	r23, 0x01	; 1
    247a:	4a e0       	ldi	r20, 0x0A	; 10
    247c:	50 e0       	ldi	r21, 0x00	; 0
    247e:	0e 94 14 1a 	call	0x3428	; 0x3428 <itoa>
    2482:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_string>
  lcd_space();
    2486:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_space>
  lcd_string(itoa(adcmv[6], outval, 10));	//output cap0 2:3
    248a:	c8 01       	movw	r24, r16
    248c:	6f e0       	ldi	r22, 0x0F	; 15
    248e:	71 e0       	ldi	r23, 0x01	; 1
    2490:	4a e0       	ldi	r20, 0x0A	; 10
    2492:	50 e0       	ldi	r21, 0x00	; 0
    2494:	0e 94 14 1a 	call	0x3428	; 0x3428 <itoa>
    2498:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_string>
  lcd_space();
    249c:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_space>
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
    24a0:	b6 01       	movw	r22, r12
    24a2:	88 27       	eor	r24, r24
    24a4:	77 fd       	sbrc	r23, 7
    24a6:	80 95       	com	r24
    24a8:	98 2f       	mov	r25, r24
    24aa:	44 ef       	ldi	r20, 0xF4	; 244
    24ac:	26 e4       	ldi	r18, 0x46	; 70
    24ae:	03 e0       	ldi	r16, 0x03	; 3
    24b0:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DisplayValue>
    24b4:	8e 01       	movw	r16, r28
    24b6:	0f 5f       	subi	r16, 0xFF	; 255
    24b8:	1f 4f       	sbci	r17, 0xFF	; 255
void AutoCheck(void) {
    24ba:	ce 01       	movw	r24, r28
    24bc:	0f 96       	adiw	r24, 0x0f	; 15
    24be:	f8 01       	movw	r30, r16
  lcd_string(itoa(adcmv[6], outval, 10));	//output cap0 2:3
  lcd_space();
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
    24c0:	21 91       	ld	r18, Z+
    24c2:	31 91       	ld	r19, Z+
    24c4:	27 34       	cpi	r18, 0x47	; 71
    24c6:	31 05       	cpc	r19, r1
    24c8:	b4 f4       	brge	.+44     	; 0x24f6 <AutoCheck+0x6a0>
  lcd_space();
  lcd_string(itoa(adcmv[6], outval, 10));	//output cap0 2:3
  lcd_space();
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
    24ca:	e8 17       	cp	r30, r24
    24cc:	f9 07       	cpc	r31, r25
    24ce:	c1 f7       	brne	.-16     	; 0x24c0 <AutoCheck+0x66a>
    24d0:	ee 24       	eor	r14, r14
    24d2:	ff 24       	eor	r15, r15
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
    24d4:	f8 01       	movw	r30, r16
    24d6:	60 81       	ld	r22, Z
    24d8:	0e 5f       	subi	r16, 0xFE	; 254
    24da:	1f 4f       	sbci	r17, 0xFF	; 255
    24dc:	6e 5e       	subi	r22, 0xEE	; 238
    24de:	c7 01       	movw	r24, r14
    24e0:	81 5a       	subi	r24, 0xA1	; 161
    24e2:	9d 4f       	sbci	r25, 0xFD	; 253
    24e4:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <__eewr_byte_m328p>
    24e8:	08 94       	sec
    24ea:	e1 1c       	adc	r14, r1
    24ec:	f1 1c       	adc	r15, r1
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
    24ee:	f7 e0       	ldi	r31, 0x07	; 7
    24f0:	ef 16       	cp	r14, r31
    24f2:	f1 04       	cpc	r15, r1
    24f4:	79 f7       	brne	.-34     	; 0x24d4 <AutoCheck+0x67e>
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
  }
no_c0save:
 #endif
 wait2s();		//wait 2 seconds
    24f6:	0e 94 01 19 	call	0x3202	; 0x3202 <wait2s>
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
    24fa:	10 e0       	ldi	r17, 0x00	; 0
 for (ww=0;ww<64;ww++) {
    24fc:	00 e0       	ldi	r16, 0x00	; 0
     lcd_clear();
    24fe:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clear>
     lcd_data('1');
    2502:	81 e3       	ldi	r24, 0x31	; 49
    2504:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
     lcd_fix_string(CapZeich);	// "-||-"
    2508:	81 ea       	ldi	r24, 0xA1	; 161
    250a:	91 e0       	ldi	r25, 0x01	; 1
    250c:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
     lcd_data('3');
    2510:	83 e3       	ldi	r24, 0x33	; 51
    2512:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
     lcd_fix_string(MinCap);	// " >100nF!"
    2516:	8d e0       	ldi	r24, 0x0D	; 13
    2518:	92 e0       	ldi	r25, 0x02	; 2
    251a:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
     PartFound = PART_NONE;
    251e:	10 92 09 01 	sts	0x0109, r1
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
    2522:	82 e0       	ldi	r24, 0x02	; 2
    2524:	60 e0       	ldi	r22, 0x00	; 0
    2526:	0e 94 ad 0b 	call	0x175a	; 0x175a <ReadCapacity>
     if (((cpre == -12) && (cval > 95000)) || ((cpre == -10) && (cval < 300000))) {
    252a:	80 91 49 01 	lds	r24, 0x0149
    252e:	84 3f       	cpi	r24, 0xF4	; 244
    2530:	89 f4       	brne	.+34     	; 0x2554 <AutoCheck+0x6fe>
    2532:	80 91 7b 01 	lds	r24, 0x017B
    2536:	90 91 7c 01 	lds	r25, 0x017C
    253a:	a0 91 7d 01 	lds	r26, 0x017D
    253e:	b0 91 7e 01 	lds	r27, 0x017E
    2542:	89 31       	cpi	r24, 0x19	; 25
    2544:	23 e7       	ldi	r18, 0x73	; 115
    2546:	92 07       	cpc	r25, r18
    2548:	21 e0       	ldi	r18, 0x01	; 1
    254a:	a2 07       	cpc	r26, r18
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	b2 07       	cpc	r27, r18
    2550:	a8 f4       	brcc	.+42     	; 0x257c <AutoCheck+0x726>
    2552:	bc c0       	rjmp	.+376    	; 0x26cc <AutoCheck+0x876>
    2554:	86 3f       	cpi	r24, 0xF6	; 246
    2556:	09 f0       	breq	.+2      	; 0x255a <AutoCheck+0x704>
    2558:	b9 c0       	rjmp	.+370    	; 0x26cc <AutoCheck+0x876>
    255a:	80 91 7b 01 	lds	r24, 0x017B
    255e:	90 91 7c 01 	lds	r25, 0x017C
    2562:	a0 91 7d 01 	lds	r26, 0x017D
    2566:	b0 91 7e 01 	lds	r27, 0x017E
    256a:	80 3e       	cpi	r24, 0xE0	; 224
    256c:	e3 e9       	ldi	r30, 0x93	; 147
    256e:	9e 07       	cpc	r25, r30
    2570:	e4 e0       	ldi	r30, 0x04	; 4
    2572:	ae 07       	cpc	r26, r30
    2574:	e0 e0       	ldi	r30, 0x00	; 0
    2576:	be 07       	cpc	r27, r30
    2578:	08 f0       	brcs	.+2      	; 0x257c <AutoCheck+0x726>
    257a:	a8 c0       	rjmp	.+336    	; 0x26cc <AutoCheck+0x876>
        cap_found++;
    257c:	1f 5f       	subi	r17, 0xFF	; 255
     } else {
        cap_found = 0;		// wait for stable connection
     }
     if (cap_found > 1) {
    257e:	12 30       	cpi	r17, 0x02	; 2
    2580:	09 f0       	breq	.+2      	; 0x2584 <AutoCheck+0x72e>
    2582:	a5 c0       	rjmp	.+330    	; 0x26ce <AutoCheck+0x878>
        // value of capacitor is correct
        (void) eeprom_write_word((uint16_t *)(&ref_offset), load_diff);	// hold zero offset + slew rate dependend offset
    2584:	60 91 61 01 	lds	r22, 0x0161
    2588:	70 91 62 01 	lds	r23, 0x0162
    258c:	8d e5       	ldi	r24, 0x5D	; 93
    258e:	92 e0       	ldi	r25, 0x02	; 2
    2590:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__eewr_word_m328p>
        lcd_clear();
    2594:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clear>
        lcd_fix_string(REF_Cstr);	// "REF_C="
    2598:	85 e1       	ldi	r24, 0x15	; 21
    259a:	92 e0       	ldi	r25, 0x02	; 2
    259c:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
        lcd_string(itoa(load_diff, outval, 10));	//output REF_C_KORR
    25a0:	80 91 61 01 	lds	r24, 0x0161
    25a4:	90 91 62 01 	lds	r25, 0x0162
    25a8:	6f e0       	ldi	r22, 0x0F	; 15
    25aa:	71 e0       	ldi	r23, 0x01	; 1
    25ac:	4a e0       	ldi	r20, 0x0A	; 10
    25ae:	50 e0       	ldi	r21, 0x00	; 0
    25b0:	0e 94 14 1a 	call	0x3428	; 0x3428 <itoa>
    25b4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_string>
  #ifdef AUTOSCALE_ADC
        ADC_PORT =  TXD_VAL;	//ADC-Port 1 to GND
    25b8:	88 e0       	ldi	r24, 0x08	; 8
    25ba:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    25bc:	89 e0       	ldi	r24, 0x09	; 9
    25be:	87 b9       	out	0x07, r24	; 7
        R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    25c0:	80 e2       	ldi	r24, 0x20	; 32
    25c2:	84 b9       	out	0x04, r24	; 4
        do {
           adcmv[0] = ReadADC(TP3);
    25c4:	82 e0       	ldi	r24, 0x02	; 2
    25c6:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
        } while (adcmv[0] > 980);
    25ca:	f3 e0       	ldi	r31, 0x03	; 3
    25cc:	85 3d       	cpi	r24, 0xD5	; 213
    25ce:	9f 07       	cpc	r25, r31
    25d0:	cc f7       	brge	.-14     	; 0x25c4 <AutoCheck+0x76e>
        R_DDR = 0;		//all Pins to input 
    25d2:	14 b8       	out	0x04, r1	; 4
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    25d4:	10 92 3f 01 	sts	0x013F, r1
    25d8:	10 92 3e 01 	sts	0x013E, r1
        adcmv[0] = ReadADC(TP3);  // get cap voltage with VCC reference
    25dc:	82 e0       	ldi	r24, 0x02	; 2
    25de:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
    25e2:	4c 01       	movw	r8, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    25e4:	85 e5       	ldi	r24, 0x55	; 85
    25e6:	92 e0       	ldi	r25, 0x02	; 2
    25e8:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__eerd_byte_m328p>
    25ec:	99 27       	eor	r25, r25
    25ee:	87 fd       	sbrc	r24, 7
    25f0:	90 95       	com	r25
    25f2:	20 91 42 01 	lds	r18, 0x0142
    25f6:	30 91 43 01 	lds	r19, 0x0143
    25fa:	82 0f       	add	r24, r18
    25fc:	93 1f       	adc	r25, r19
    25fe:	90 93 3f 01 	sts	0x013F, r25
    2602:	80 93 3e 01 	sts	0x013E, r24
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
    2606:	82 e0       	ldi	r24, 0x02	; 2
    2608:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
    260c:	8c 01       	movw	r16, r24
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    260e:	10 92 3f 01 	sts	0x013F, r1
    2612:	10 92 3e 01 	sts	0x013E, r1
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
    2616:	82 e0       	ldi	r24, 0x02	; 2
    2618:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
    261c:	5c 01       	movw	r10, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    261e:	c0 90 42 01 	lds	r12, 0x0142
    2622:	d0 90 43 01 	lds	r13, 0x0143
    2626:	85 e5       	ldi	r24, 0x55	; 85
    2628:	92 e0       	ldi	r25, 0x02	; 2
    262a:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__eerd_byte_m328p>
    262e:	99 27       	eor	r25, r25
    2630:	87 fd       	sbrc	r24, 7
    2632:	90 95       	com	r25
    2634:	8c 0d       	add	r24, r12
    2636:	9d 1d       	adc	r25, r13
    2638:	90 93 3f 01 	sts	0x013F, r25
    263c:	80 93 3e 01 	sts	0x013E, r24
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    2640:	85 e5       	ldi	r24, 0x55	; 85
    2642:	92 e0       	ldi	r25, 0x02	; 2
    2644:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__eerd_byte_m328p>
    2648:	68 2e       	mov	r6, r24
        lcd_line2();
    264a:	80 ec       	ldi	r24, 0xC0	; 192
    264c:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
        lcd_fix_string(REF_Rstr);	// "REF_R="
    2650:	8c e1       	ldi	r24, 0x1C	; 28
    2652:	92 e0       	ldi	r25, 0x02	; 2
    2654:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    2658:	85 e5       	ldi	r24, 0x55	; 85
    265a:	92 e0       	ldi	r25, 0x02	; 2
    265c:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__eerd_byte_m328p>
        ADCconfig.U_Bandgap = ADC_internal_reference;
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
        ADCconfig.U_Bandgap = ADC_internal_reference;
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    2660:	f3 e0       	ldi	r31, 0x03	; 3
    2662:	ef 2e       	mov	r14, r31
    2664:	e8 0e       	add	r14, r24
    2666:	a8 0c       	add	r10, r8
    2668:	b9 1c       	adc	r11, r9
    266a:	a0 1a       	sub	r10, r16
    266c:	b1 0a       	sbc	r11, r17
    266e:	a0 1a       	sub	r10, r16
    2670:	b1 0a       	sbc	r11, r17
    2672:	b5 01       	movw	r22, r10
    2674:	88 27       	eor	r24, r24
    2676:	77 fd       	sbrc	r23, 7
    2678:	80 95       	com	r24
    267a:	98 2f       	mov	r25, r24
    267c:	26 2d       	mov	r18, r6
    267e:	33 27       	eor	r19, r19
    2680:	27 fd       	sbrc	r18, 7
    2682:	30 95       	com	r19
    2684:	2c 0d       	add	r18, r12
    2686:	3d 1d       	adc	r19, r13
    2688:	40 e0       	ldi	r20, 0x00	; 0
    268a:	50 e0       	ldi	r21, 0x00	; 0
    268c:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsi3>
    2690:	00 0f       	add	r16, r16
    2692:	11 1f       	adc	r17, r17
    2694:	98 01       	movw	r18, r16
    2696:	44 27       	eor	r20, r20
    2698:	37 fd       	sbrc	r19, 7
    269a:	40 95       	com	r20
    269c:	54 2f       	mov	r21, r20
    269e:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__divmodsi4>
        lcd_line2();
        lcd_fix_string(REF_Rstr);	// "REF_R="
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    26a2:	e2 0e       	add	r14, r18
        (void) eeprom_write_byte((uint8_t *)(&RefDiff), (uint8_t)udiff2);	// hold offset for true reference Voltage
    26a4:	85 e5       	ldi	r24, 0x55	; 85
    26a6:	92 e0       	ldi	r25, 0x02	; 2
    26a8:	6e 2d       	mov	r22, r14
    26aa:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <__eewr_byte_m328p>
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
    26ae:	8e 2d       	mov	r24, r14
    26b0:	99 27       	eor	r25, r25
    26b2:	87 fd       	sbrc	r24, 7
    26b4:	90 95       	com	r25
    26b6:	6f e0       	ldi	r22, 0x0F	; 15
    26b8:	71 e0       	ldi	r23, 0x01	; 1
    26ba:	4a e0       	ldi	r20, 0x0A	; 10
    26bc:	50 e0       	ldi	r21, 0x00	; 0
    26be:	0e 94 14 1a 	call	0x3428	; 0x3428 <itoa>
    26c2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_string>
  #endif
        wait4s();
    26c6:	0e 94 ff 18 	call	0x31fe	; 0x31fe <wait4s>
        break;
    26ca:	07 c0       	rjmp	.+14     	; 0x26da <AutoCheck+0x884>
     lcd_data('3');
     lcd_fix_string(MinCap);	// " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     if (((cpre == -12) && (cval > 95000)) || ((cpre == -10) && (cval < 300000))) {
    26cc:	10 e0       	ldi	r17, 0x00	; 0
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
  #endif
        wait4s();
        break;
     }
     wait200ms();			// wait additional time
    26ce:	0e 94 06 19 	call	0x320c	; 0x320c <wait200ms>
 wait2s();		//wait 2 seconds
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
    26d2:	0f 5f       	subi	r16, 0xFF	; 255
    26d4:	00 34       	cpi	r16, 0x40	; 64
    26d6:	09 f0       	breq	.+2      	; 0x26da <AutoCheck+0x884>
    26d8:	12 cf       	rjmp	.-476    	; 0x24fe <AutoCheck+0x6a8>
  }

 #endif
#endif

  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    26da:	89 e1       	ldi	r24, 0x19	; 25
    26dc:	80 93 3c 01 	sts	0x013C, r24
  lcd_clear();
    26e0:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clear>
//  lcd_line1();
  lcd_line2();
    26e4:	80 ec       	ldi	r24, 0xC0	; 192
    26e6:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
  lcd_fix_string(VERSION);	//"Version ..."
    26ea:	8d eb       	ldi	r24, 0xBD	; 189
    26ec:	91 e0       	ldi	r25, 0x01	; 1
    26ee:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
  lcd_line1();
    26f2:	80 e8       	ldi	r24, 0x80	; 128
    26f4:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
  lcd_fix_string(ATE);		//"Selftest End"
    26f8:	86 e5       	ldi	r24, 0x56	; 86
    26fa:	91 e0       	ldi	r25, 0x01	; 1
    26fc:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
#ifdef FREQUENCY_50HZ
  lcd_fix_string(T50HZ);	//" 50Hz"
    2700:	87 e0       	ldi	r24, 0x07	; 7
    2702:	92 e0       	ldi	r25, 0x02	; 2
    2704:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
  ADC_PORT = TXD_VAL;
    2708:	88 e0       	ldi	r24, 0x08	; 8
    270a:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	// Pin 1 to GND
    270c:	89 e0       	ldi	r24, 0x09	; 9
    270e:	87 b9       	out	0x07, r24	; 7
  R_DDR = (1<<(TP3*2)) | (1<<(TP2*2));
    2710:	84 e1       	ldi	r24, 0x14	; 20
    2712:	84 b9       	out	0x04, r24	; 4
  for(ww=0;ww<30;ww++) {	// repeat the signal up to 30 times (1 minute)
    2714:	10 e0       	ldi	r17, 0x00	; 0
     for (ii=0;ii<100;ii++) {	// for 2 s generate 50 Hz
         R_PORT = (1<<(TP2*2));	// Pin 2 over R_L to VCC, Pin 3 over R_L to GND
    2716:	64 e0       	ldi	r22, 0x04	; 4
    2718:	e6 2e       	mov	r14, r22
         wait10ms();
         R_PORT = (1<<(TP3*2));	// Pin 3 over R_L to VCC, Pin 2 over R_L to GND
    271a:	00 e1       	ldi	r16, 0x10	; 16
  lcd_fix_string(T50HZ);	//" 50Hz"
  ADC_PORT = TXD_VAL;
  ADC_DDR = 1<<TP1 | TXD_MSK;	// Pin 1 to GND
  R_DDR = (1<<(TP3*2)) | (1<<(TP2*2));
  for(ww=0;ww<30;ww++) {	// repeat the signal up to 30 times (1 minute)
     for (ii=0;ii<100;ii++) {	// for 2 s generate 50 Hz
    271c:	10 92 47 01 	sts	0x0147, r1
    2720:	0c c0       	rjmp	.+24     	; 0x273a <AutoCheck+0x8e4>
         R_PORT = (1<<(TP2*2));	// Pin 2 over R_L to VCC, Pin 3 over R_L to GND
    2722:	e5 b8       	out	0x05, r14	; 5
         wait10ms();
    2724:	0e 94 0d 19 	call	0x321a	; 0x321a <wait10ms>
         R_PORT = (1<<(TP3*2));	// Pin 3 over R_L to VCC, Pin 2 over R_L to GND
    2728:	05 b9       	out	0x05, r16	; 5
         wait10ms();
    272a:	0e 94 0d 19 	call	0x321a	; 0x321a <wait10ms>
         wdt_reset();
    272e:	a8 95       	wdr
  lcd_fix_string(T50HZ);	//" 50Hz"
  ADC_PORT = TXD_VAL;
  ADC_DDR = 1<<TP1 | TXD_MSK;	// Pin 1 to GND
  R_DDR = (1<<(TP3*2)) | (1<<(TP2*2));
  for(ww=0;ww<30;ww++) {	// repeat the signal up to 30 times (1 minute)
     for (ii=0;ii<100;ii++) {	// for 2 s generate 50 Hz
    2730:	80 91 47 01 	lds	r24, 0x0147
    2734:	8f 5f       	subi	r24, 0xFF	; 255
    2736:	80 93 47 01 	sts	0x0147, r24
    273a:	80 91 47 01 	lds	r24, 0x0147
    273e:	84 36       	cpi	r24, 0x64	; 100
    2740:	80 f3       	brcs	.-32     	; 0x2722 <AutoCheck+0x8cc>
         wait10ms();
         R_PORT = (1<<(TP3*2));	// Pin 3 over R_L to VCC, Pin 2 over R_L to GND
         wait10ms();
         wdt_reset();
     }
     if (!(ON_PIN_REG & (1<<RST_PIN))) {
    2742:	4f 9b       	sbis	0x09, 7	; 9
    2744:	03 c0       	rjmp	.+6      	; 0x274c <AutoCheck+0x8f6>
#ifdef FREQUENCY_50HZ
  lcd_fix_string(T50HZ);	//" 50Hz"
  ADC_PORT = TXD_VAL;
  ADC_DDR = 1<<TP1 | TXD_MSK;	// Pin 1 to GND
  R_DDR = (1<<(TP3*2)) | (1<<(TP2*2));
  for(ww=0;ww<30;ww++) {	// repeat the signal up to 30 times (1 minute)
    2746:	1f 5f       	subi	r17, 0xFF	; 255
    2748:	1e 31       	cpi	r17, 0x1E	; 30
    274a:	41 f7       	brne	.-48     	; 0x271c <AutoCheck+0x8c6>
        // if key is pressed, don't repeat
        break;
     }
  }
#endif
 PartFound = PART_NONE;
    274c:	10 92 09 01 	sts	0x0109, r1
 wait1s();			//wait 1 seconds
    2750:	0e 94 02 19 	call	0x3204	; 0x3204 <wait1000ms>
 } 
    2754:	2e 96       	adiw	r28, 0x0e	; 14
    2756:	0f b6       	in	r0, 0x3f	; 63
    2758:	f8 94       	cli
    275a:	de bf       	out	0x3e, r29	; 62
    275c:	0f be       	out	0x3f, r0	; 63
    275e:	cd bf       	out	0x3d, r28	; 61
    2760:	cf 91       	pop	r28
    2762:	df 91       	pop	r29
    2764:	1f 91       	pop	r17
    2766:	0f 91       	pop	r16
    2768:	ff 90       	pop	r15
    276a:	ef 90       	pop	r14
    276c:	df 90       	pop	r13
    276e:	cf 90       	pop	r12
    2770:	bf 90       	pop	r11
    2772:	af 90       	pop	r10
    2774:	9f 90       	pop	r9
    2776:	8f 90       	pop	r8
    2778:	7f 90       	pop	r7
    277a:	6f 90       	pop	r6
    277c:	5f 90       	pop	r5
    277e:	4f 90       	pop	r4
    2780:	3f 90       	pop	r3
    2782:	2f 90       	pop	r2
    2784:	08 95       	ret

00002786 <main>:
//#define DebugOut 5		// if set, output of Transistor checks in row 2+3
//#define DebugOut 10		// if set, output of capacity measurements (ReadCapacity) in row 3+4 
#include "Transistortester.h"

//begin of transistortester program
int main(void) {
    2786:	0f 93       	push	r16
    2788:	1f 93       	push	r17
    278a:	cf 93       	push	r28
    278c:	df 93       	push	r29
  //switch on
  ON_DDR = (1<<ON_PIN);
    278e:	80 e4       	ldi	r24, 0x40	; 64
    2790:	8a b9       	out	0x0a, r24	; 10
  ON_PORT = (1<<ON_PIN) | (1<<RST_PIN);	//power on and Pullup for the Reset-Pin
    2792:	80 ec       	ldi	r24, 0xC0	; 192
    2794:	8b b9       	out	0x0b, r24	; 11
  uint8_t tmp;
  //ADC-Init
  ADCSRA = (1<<ADEN) | AUTO_CLOCK_DIV;	//prescaler=8 or 64 (if 8Mhz clock)
    2796:	86 e8       	ldi	r24, 0x86	; 134
    2798:	80 93 7a 00 	sts	0x007A, r24
// #define WDRF_HOME MCU_STATUS_REG
 #define WDRF_HOME MCUCSR
#else
 #define WDRF_HOME MCUSR
#endif
  tmp = (WDRF_HOME & (1<<WDRF));	// save Watch Dog Flag
    279c:	14 b7       	in	r17, 0x34	; 52
  WDRF_HOME &= ~(1<<WDRF);	 	//reset Watch Dog flag
    279e:	84 b7       	in	r24, 0x34	; 52
    27a0:	87 7f       	andi	r24, 0xF7	; 247
    27a2:	84 bf       	out	0x34, r24	; 52
  wdt_disable();			// disable Watch Dog
    27a4:	88 e1       	ldi	r24, 0x18	; 24
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	80 93 60 00 	sts	0x0060, r24
    27ae:	10 92 60 00 	sts	0x0060, r1
    27b2:	0f be       	out	0x3f, r0	; 63
  lcd_init();				//initialize LCD
    27b4:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_init>
	
//  ADC_PORT = TXD_VAL;
//  ADC_DDR = TXD_MSK;
  if(tmp) { 
    27b8:	13 ff       	sbrs	r17, 3
    27ba:	0a c0       	rjmp	.+20     	; 0x27d0 <main+0x4a>
     // check if  Watchdog-Event 
     // this happens, if the Watchdog is not reset for 2s
     // can happen, if any loop in the Program doen't finish.
     lcd_line1();
    27bc:	80 e8       	ldi	r24, 0x80	; 128
    27be:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
     lcd_fix_string(TestTimedOut);	//Output Timeout
    27c2:	8f e2       	ldi	r24, 0x2F	; 47
    27c4:	91 e0       	ldi	r25, 0x01	; 1
    27c6:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
     wait3s();				//wait for 3 s
    27ca:	0e 94 00 19 	call	0x3200	; 0x3200 <wait3s>
    27ce:	ee c0       	rjmp	.+476    	; 0x29ac <main+0x226>
     ON_PORT = 0;			//shut off!
     return 0;
  }
  LCDLoadCustomChar(LCD_CHAR_DIODE1);	//Custom-Character Diode symbol
    27d0:	88 e4       	ldi	r24, 0x48	; 72
    27d2:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
  lcd_fix_customchar(DiodeIcon1);	//load Character  >|
    27d6:	83 e2       	ldi	r24, 0x23	; 35
    27d8:	92 e0       	ldi	r25, 0x02	; 2
    27da:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_DIODE2);	//Custom-Character 
    27de:	80 e5       	ldi	r24, 0x50	; 80
    27e0:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
  lcd_fix_customchar(DiodeIcon2);	//load Character  |<
    27e4:	8b e2       	ldi	r24, 0x2B	; 43
    27e6:	92 e0       	ldi	r25, 0x02	; 2
    27e8:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_fix_customchar>
#ifdef C_MESS
  LCDLoadCustomChar(LCD_CHAR_CAP);	//Custom-Character  Capacitor symbol
    27ec:	88 e5       	ldi	r24, 0x58	; 88
    27ee:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
  lcd_fix_customchar(CapIcon);		//load Character  ||
    27f2:	83 e3       	ldi	r24, 0x33	; 51
    27f4:	92 e0       	ldi	r25, 0x02	; 2
    27f6:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_fix_customchar>
#endif
#ifdef R_MESS
  LCDLoadCustomChar(LCD_CHAR_RESIS1);	//Custom-Character Resistor symbol
    27fa:	80 e7       	ldi	r24, 0x70	; 112
    27fc:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
  lcd_fix_customchar(ResIcon1);		//load Character  [
    2800:	8b e3       	ldi	r24, 0x3B	; 59
    2802:	92 e0       	ldi	r25, 0x02	; 2
    2804:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS2);	//Custom-Character 
    2808:	88 e7       	ldi	r24, 0x78	; 120
    280a:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
  lcd_fix_customchar(ResIcon2);		//load Character  ]
    280e:	83 e4       	ldi	r24, 0x43	; 67
    2810:	92 e0       	ldi	r25, 0x02	; 2
    2812:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_fix_customchar>
#endif
#ifdef PULLUP_DISABLE
 #ifdef __AVR_ATmega8__
  SFIOR = (1<<PUD);		// disable Pull-Up Resistors mega8
 #else
  MCUCR = (1<<PUD);		// disable Pull-Up Resistors mega168 family
    2816:	80 e1       	ldi	r24, 0x10	; 16
    2818:	85 bf       	out	0x35, r24	; 53
 #endif
#endif

#if POWER_OFF+0 > 1
  // tester display time selection
  display_time = OFF_WAIT_TIME;		// LONG_WAIT_TIME for single mode, else SHORT_WAIT_TIME
    281a:	88 eb       	ldi	r24, 0xB8	; 184
    281c:	9b e0       	ldi	r25, 0x0B	; 11
    281e:	90 93 03 01 	sts	0x0103, r25
    2822:	80 93 02 01 	sts	0x0102, r24
  if (!(ON_PIN_REG & (1<<RST_PIN))) {
    2826:	4f 99       	sbic	0x09, 7	; 9
    2828:	0a c0       	rjmp	.+20     	; 0x283e <main+0xb8>
     // if power button is pressed ...
     wait300ms();			// wait to catch a long key press
    282a:	0e 94 05 19 	call	0x320a	; 0x320a <wait300ms>
     if (!(ON_PIN_REG & (1<<RST_PIN))) {
    282e:	4f 99       	sbic	0x09, 7	; 9
    2830:	06 c0       	rjmp	.+12     	; 0x283e <main+0xb8>
        // check if power button is still pressed
        display_time = LONG_WAIT_TIME;	// ... set long time display anyway
    2832:	80 e1       	ldi	r24, 0x10	; 16
    2834:	97 e2       	ldi	r25, 0x27	; 39
    2836:	90 93 03 01 	sts	0x0103, r25
    283a:	80 93 02 01 	sts	0x0102, r24
  }
#else
  #define display_time OFF_WAIT_TIME
#endif

  empty_count = 0;
    283e:	10 92 46 01 	sts	0x0146, r1
  mess_count = 0;
    2842:	10 92 0e 01 	sts	0x010E, r1


//*****************************************************************
//Entry: if start key is pressed before shut down
start:
  PartFound = PART_NONE;
    2846:	10 92 09 01 	sts	0x0109, r1
  NumOfDiodes = 0;
    284a:	10 92 07 01 	sts	0x0107, r1
  PartReady = 0;
    284e:	10 92 06 01 	sts	0x0106, r1
  PartMode = 0;
    2852:	10 92 08 01 	sts	0x0108, r1
  WithReference = 0;		// no precision reference voltage
    2856:	10 92 45 01 	sts	0x0145, r1
  lcd_clear();
    285a:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clear>
  ADC_DDR = TXD_MSK;		//activate Software-UART 
    285e:	88 e0       	ldi	r24, 0x08	; 8
    2860:	87 b9       	out	0x07, r24	; 7
#ifdef AUTO_CAL
  resis680pl = eeprom_read_word(&R680pl);
    2862:	81 e5       	ldi	r24, 0x51	; 81
    2864:	92 e0       	ldi	r25, 0x02	; 2
    2866:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__eerd_word_m328p>
    286a:	90 93 0c 01 	sts	0x010C, r25
    286e:	80 93 0b 01 	sts	0x010B, r24
  resis680mi = eeprom_read_word(&R680mi);
    2872:	83 e5       	ldi	r24, 0x53	; 83
    2874:	92 e0       	ldi	r25, 0x02	; 2
    2876:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__eerd_word_m328p>
    287a:	90 93 05 01 	sts	0x0105, r25
    287e:	80 93 04 01 	sts	0x0104, r24
#endif

#ifdef R_MESS
  ResistorsFound = 0;
    2882:	10 92 59 01 	sts	0x0159, r1
#endif
#ifdef C_MESS
  ca = 0;
    2886:	10 92 60 01 	sts	0x0160, r1
  cb = 0;
    288a:	10 92 0a 01 	sts	0x010A, r1
#endif
#ifdef WITH_UART
  uart_newline();		// start of new measurement
    288e:	0e 94 b2 00 	call	0x164	; 0x164 <uart_newline>
#endif
  ADCconfig.RefFlag = 0;
    2892:	10 92 3d 01 	sts	0x013D, r1
  ADCconfig.U_AVCC = U_VCC;	// set initial VCC Voltage
    2896:	88 e8       	ldi	r24, 0x88	; 136
    2898:	93 e1       	ldi	r25, 0x13	; 19
    289a:	90 93 41 01 	sts	0x0141, r25
    289e:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.Samples = 190;		// set number of ADC samples near to max
    28a2:	8e eb       	ldi	r24, 0xBE	; 190
    28a4:	80 93 3c 01 	sts	0x013C, r24
  ChargePin10ms((1<<TPREF),0);	// shorten 2.5V reference voltage
    28a8:	80 e1       	ldi	r24, 0x10	; 16
    28aa:	60 e0       	ldi	r22, 0x00	; 0
    28ac:	0e 94 45 01 	call	0x28a	; 0x28a <ChargePin10ms>
  trans.uBE[1] = W5msReadADC(TPREF); // read voltage of precision reference
    28b0:	84 e0       	ldi	r24, 0x04	; 4
    28b2:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
    28b6:	ec 01       	movw	r28, r24
    28b8:	90 93 55 01 	sts	0x0155, r25
    28bc:	80 93 54 01 	sts	0x0154, r24
  if ((trans.uBE[1] > 2250) && (trans.uBE[1] < 2750)) {
    28c0:	8b 5c       	subi	r24, 0xCB	; 203
    28c2:	98 40       	sbci	r25, 0x08	; 8
    28c4:	21 e0       	ldi	r18, 0x01	; 1
    28c6:	83 3f       	cpi	r24, 0xF3	; 243
    28c8:	92 07       	cpc	r25, r18
    28ca:	c0 f4       	brcc	.+48     	; 0x28fc <main+0x176>
     // precision voltage reference connected, update U_AVCC
     WithReference = 1;
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	80 93 45 01 	sts	0x0145, r24
     ADCconfig.U_AVCC = (unsigned long)((unsigned long)ADCconfig.U_AVCC * 2495) / trans.uBE[1];
    28d2:	60 91 40 01 	lds	r22, 0x0140
    28d6:	70 91 41 01 	lds	r23, 0x0141
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	2f eb       	ldi	r18, 0xBF	; 191
    28e0:	39 e0       	ldi	r19, 0x09	; 9
    28e2:	40 e0       	ldi	r20, 0x00	; 0
    28e4:	50 e0       	ldi	r21, 0x00	; 0
    28e6:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsi3>
    28ea:	9e 01       	movw	r18, r28
    28ec:	40 e0       	ldi	r20, 0x00	; 0
    28ee:	50 e0       	ldi	r21, 0x00	; 0
    28f0:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
    28f4:	30 93 41 01 	sts	0x0141, r19
    28f8:	20 93 40 01 	sts	0x0140, r18
  }
  lcd_line1();	//1. row 
    28fc:	80 e8       	ldi	r24, 0x80	; 128
    28fe:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
  
#ifdef WITH_AUTO_REF
  (void) ReadADC(0x0e);		// read Reference-voltage 
  ref_mv = W20msReadADC(0x0e);	// read Reference-voltage
#else
  ref_mv = DEFAULT_BAND_GAP;	// set to default Reference Voltage
    2902:	8e e2       	ldi	r24, 0x2E	; 46
    2904:	94 e0       	ldi	r25, 0x04	; 4
    2906:	90 93 43 01 	sts	0x0143, r25
    290a:	80 93 42 01 	sts	0x0142, r24
#endif
  ADCconfig.U_Bandgap = ADC_internal_reference;	// set internal reference voltage for ADC
    290e:	85 e5       	ldi	r24, 0x55	; 85
    2910:	92 e0       	ldi	r25, 0x02	; 2
    2912:	0e 94 4b 1a 	call	0x3496	; 0x3496 <__eerd_byte_m328p>
    2916:	99 27       	eor	r25, r25
    2918:	87 fd       	sbrc	r24, 7
    291a:	90 95       	com	r25
    291c:	82 5d       	subi	r24, 0xD2	; 210
    291e:	9b 4f       	sbci	r25, 0xFB	; 251
    2920:	90 93 3f 01 	sts	0x013F, r25
    2924:	80 93 3e 01 	sts	0x013E, r24
  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    2928:	89 e1       	ldi	r24, 0x19	; 25
    292a:	80 93 3c 01 	sts	0x013C, r24

#ifdef BAT_CHECK
  // Battery check is selected
  ReadADC(TPBAT);	//Dummy-Readout
    292e:	85 e0       	ldi	r24, 0x05	; 5
    2930:	0e 94 2b 19 	call	0x3256	; 0x3256 <ReadADC>
  trans.uBE[0] = W5msReadADC(TPBAT); 	//with 5V reference
    2934:	85 e0       	ldi	r24, 0x05	; 5
    2936:	0e 94 29 19 	call	0x3252	; 0x3252 <W5msReadADC>
    293a:	90 93 53 01 	sts	0x0153, r25
    293e:	80 93 52 01 	sts	0x0152, r24
  lcd_fix_string(Bat);		//output: "Bat. "
    2942:	83 e6       	ldi	r24, 0x63	; 99
    2944:	91 e0       	ldi	r25, 0x01	; 1
    2946:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
 #ifdef BAT_OUT
  // display Battery voltage
  // The divisor to get the voltage in 0.01V units is ((10*33)/133) witch is about 2.4812
  // A good result can be get with multiply by 4 and divide by 10 (about 0.75%).
  cval = (trans.uBE[0]*4)/10+((BAT_OUT+5)/10); // usually output only 2 digits
    294a:	80 91 52 01 	lds	r24, 0x0152
    294e:	90 91 53 01 	lds	r25, 0x0153
    2952:	88 0f       	add	r24, r24
    2954:	99 1f       	adc	r25, r25
    2956:	88 0f       	add	r24, r24
    2958:	99 1f       	adc	r25, r25
    295a:	6a e0       	ldi	r22, 0x0A	; 10
    295c:	70 e0       	ldi	r23, 0x00	; 0
    295e:	0e 94 c3 19 	call	0x3386	; 0x3386 <__udivmodhi4>
    2962:	61 5f       	subi	r22, 0xF1	; 241
    2964:	7f 4f       	sbci	r23, 0xFF	; 255
    2966:	80 e0       	ldi	r24, 0x00	; 0
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	60 93 7b 01 	sts	0x017B, r22
    296e:	70 93 7c 01 	sts	0x017C, r23
    2972:	80 93 7d 01 	sts	0x017D, r24
    2976:	90 93 7e 01 	sts	0x017E, r25
  DisplayValue(cval,-2,'V',2);		// Display 2 Digits of this 10mV units
    297a:	4e ef       	ldi	r20, 0xFE	; 254
    297c:	26 e5       	ldi	r18, 0x56	; 86
    297e:	02 e0       	ldi	r16, 0x02	; 2
    2980:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DisplayValue>
  lcd_space();
    2984:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_space>
 #warning "Battery POOR level is set for 7805 regulator"
 #define WARN_LEVEL (((unsigned long)7300*(unsigned long)33)/133)
 #define POOR_LEVEL (((unsigned long)6300*(unsigned long)33)/133)
 #endif
  // check the battery voltage
  if (trans.uBE[0] <  WARN_LEVEL) {
    2988:	80 91 52 01 	lds	r24, 0x0152
    298c:	90 91 53 01 	lds	r25, 0x0153
    2990:	27 e0       	ldi	r18, 0x07	; 7
    2992:	8c 32       	cpi	r24, 0x2C	; 44
    2994:	92 07       	cpc	r25, r18
    2996:	a8 f4       	brcc	.+42     	; 0x29c2 <main+0x23c>
     //Vcc < 7,3V; show Warning 
     if(trans.uBE[0] < POOR_LEVEL) {	
    2998:	26 e0       	ldi	r18, 0x06	; 6
    299a:	83 33       	cpi	r24, 0x33	; 51
    299c:	92 07       	cpc	r25, r18
    299e:	70 f4       	brcc	.+28     	; 0x29bc <main+0x236>
        //Vcc <6,3V; no proper operation is possible
        lcd_fix_string(BatEmpty);	//Battery empty!
    29a0:	88 ed       	ldi	r24, 0xD8	; 216
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
        wait2s();
    29a8:	0e 94 01 19 	call	0x3202	; 0x3202 <wait2s>
        PORTD = 0;			//switch power off
    29ac:	1b b8       	out	0x0b, r1	; 11
  }
#else
  goto start;	// POWER_OFF not selected, repeat measurement
#endif
  return 0;
}   // end main
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	df 91       	pop	r29
    29b4:	cf 91       	pop	r28
    29b6:	1f 91       	pop	r17
    29b8:	0f 91       	pop	r16
    29ba:	08 95       	ret
        lcd_fix_string(BatEmpty);	//Battery empty!
        wait2s();
        PORTD = 0;			//switch power off
        return 0;
     }
     lcd_fix_string(BatWeak);		//Battery weak
    29bc:	83 ed       	ldi	r24, 0xD3	; 211
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	02 c0       	rjmp	.+4      	; 0x29c6 <main+0x240>
  } else { // Battery-voltage OK
     lcd_fix_string(OK); 		// "OK"
    29c2:	89 e6       	ldi	r24, 0x69	; 105
    29c4:	91 e0       	ldi	r25, 0x01	; 1
    29c6:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
  }
#else
  lcd_fix_string(VERSION);		// if no Battery check, Version .. in row 1
#endif
#ifdef WDT_enabled
  wdt_enable(WDTO_2S);		//Watchdog on
    29ca:	2f e0       	ldi	r18, 0x0F	; 15
    29cc:	88 e1       	ldi	r24, 0x18	; 24
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	0f b6       	in	r0, 0x3f	; 63
    29d2:	f8 94       	cli
    29d4:	a8 95       	wdr
    29d6:	80 93 60 00 	sts	0x0060, r24
    29da:	0f be       	out	0x3f, r0	; 63
    29dc:	20 93 60 00 	sts	0x0060, r18
#endif

//  wait1s();			// add mor time for reading batterie voltage
  // begin tests
#ifdef AUTO_RH
  RefVoltage();			//compute RHmultip = f(reference voltage)
    29e0:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <RefVoltage>
#endif

  lcd_line2();			//LCD position row2, column 1
    29e4:	80 ec       	ldi	r24, 0xC0	; 192
    29e6:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
  if (WithReference) {
    29ea:	80 91 45 01 	lds	r24, 0x0145
    29ee:	88 23       	and	r24, r24
    29f0:	69 f0       	breq	.+26     	; 0x2a0c <main+0x286>
     DisplayValue(ADCconfig.U_AVCC,-3,'V',3);	// Display 3 Digits of this mV units
    29f2:	60 91 40 01 	lds	r22, 0x0140
    29f6:	70 91 41 01 	lds	r23, 0x0141
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	4d ef       	ldi	r20, 0xFD	; 253
    2a00:	26 e5       	ldi	r18, 0x56	; 86
    2a02:	03 e0       	ldi	r16, 0x03	; 3
    2a04:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DisplayValue>
     lcd_space();
    2a08:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_space>
  }
  lcd_fix_string(TestRunning);		//String: testing...
    2a0c:	88 ec       	ldi	r24, 0xC8	; 200
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
  lcd_string(itoa((int)(trans.uBE[0] - 289), outval, 10));	//output temperature
  lcd_data(LCD_CHAR_DEGREE);
  lcd_data('C');
#endif
#ifndef DebugOut
  lcd_line2();			//LCD position row 2, column 1
    2a14:	80 ec       	ldi	r24, 0xC0	; 192
    2a16:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
#endif
#ifdef C_MESS
  #define AUSGABE_FUNKTION
  EntladePins();		// discharge all capacitors!
    2a1a:	0e 94 24 08 	call	0x1048	; 0x1048 <EntladePins>
  if(PartFound == PART_CELL) {
    2a1e:	80 91 09 01 	lds	r24, 0x0109
    2a22:	88 30       	cpi	r24, 0x08	; 8
    2a24:	39 f4       	brne	.+14     	; 0x2a34 <main+0x2ae>
    lcd_clear();
    2a26:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clear>
//    lcd_line1();
    lcd_fix_string(Cell_str);	// display "Cell!"
    2a2a:	85 ea       	ldi	r24, 0xA5	; 165
    2a2c:	91 e0       	ldi	r25, 0x01	; 1
    2a2e:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
    goto end2;
    2a32:	8d c3       	rjmp	.+1818   	; 0x314e <main+0x9c8>
  }
#endif

#ifdef CHECK_CALL
  AutoCheck();			//check, if selftest should be done
    2a34:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <AutoCheck>
  CheckPins(TP2, TP1, TP3);
  CheckPins(TP2, TP3, TP1);
  CheckPins(TP3, TP2, TP1);
  CheckPins(TP3, TP1, TP2);
#else
  CheckPins(TP1, TP2, TP3);
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	61 e0       	ldi	r22, 0x01	; 1
    2a3c:	42 e0       	ldi	r20, 0x02	; 2
    2a3e:	0e 94 66 01 	call	0x2cc	; 0x2cc <CheckPins>
  CheckPins(TP2, TP1, TP3);
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	60 e0       	ldi	r22, 0x00	; 0
    2a46:	42 e0       	ldi	r20, 0x02	; 2
    2a48:	0e 94 66 01 	call	0x2cc	; 0x2cc <CheckPins>

  CheckPins(TP1, TP3, TP2);
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	62 e0       	ldi	r22, 0x02	; 2
    2a50:	41 e0       	ldi	r20, 0x01	; 1
    2a52:	0e 94 66 01 	call	0x2cc	; 0x2cc <CheckPins>
  CheckPins(TP3, TP1, TP2);
    2a56:	82 e0       	ldi	r24, 0x02	; 2
    2a58:	60 e0       	ldi	r22, 0x00	; 0
    2a5a:	41 e0       	ldi	r20, 0x01	; 1
    2a5c:	0e 94 66 01 	call	0x2cc	; 0x2cc <CheckPins>

  CheckPins(TP2, TP3, TP1);
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	62 e0       	ldi	r22, 0x02	; 2
    2a64:	40 e0       	ldi	r20, 0x00	; 0
    2a66:	0e 94 66 01 	call	0x2cc	; 0x2cc <CheckPins>
  CheckPins(TP3, TP2, TP1);
    2a6a:	82 e0       	ldi	r24, 0x02	; 2
    2a6c:	61 e0       	ldi	r22, 0x01	; 1
    2a6e:	40 e0       	ldi	r20, 0x00	; 0
    2a70:	0e 94 66 01 	call	0x2cc	; 0x2cc <CheckPins>
#endif
  
#ifdef C_MESS
  //separate check if is is a capacitor
  if(((PartFound == PART_NONE) || (PartFound == PART_RESISTOR) || (PartFound == PART_DIODE)) ) {
    2a74:	80 91 09 01 	lds	r24, 0x0109
    2a78:	88 23       	and	r24, r24
    2a7a:	21 f0       	breq	.+8      	; 0x2a84 <main+0x2fe>
    2a7c:	86 30       	cpi	r24, 0x06	; 6
    2a7e:	11 f0       	breq	.+4      	; 0x2a84 <main+0x2fe>
    2a80:	81 30       	cpi	r24, 0x01	; 1
    2a82:	81 f4       	brne	.+32     	; 0x2aa4 <main+0x31e>
     EntladePins();		// discharge capacities
    2a84:	0e 94 24 08 	call	0x1048	; 0x1048 <EntladePins>
     //measurement of capacities in all 3 combinations
     ReadCapacity(TP3, TP1);
    2a88:	82 e0       	ldi	r24, 0x02	; 2
    2a8a:	60 e0       	ldi	r22, 0x00	; 0
    2a8c:	0e 94 ad 0b 	call	0x175a	; 0x175a <ReadCapacity>
     ReadCapacity(TP3, TP2);
    2a90:	82 e0       	ldi	r24, 0x02	; 2
    2a92:	61 e0       	ldi	r22, 0x01	; 1
    2a94:	0e 94 ad 0b 	call	0x175a	; 0x175a <ReadCapacity>
     ReadCapacity(TP2, TP1);
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	60 e0       	ldi	r22, 0x00	; 0
    2a9c:	0e 94 ad 0b 	call	0x175a	; 0x175a <ReadCapacity>

#if FLASHEND > 0x1fff
     ReadInductance();			// measure inductance
    2aa0:	0e 94 bf 08 	call	0x117e	; 0x117e <ReadInductance>
#endif
  }
#endif
  //All checks are done, output result to display
  lcd_clear();
    2aa4:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_clear>
//  lcd_line1();
  if(PartFound == PART_DIODE) {
    2aa8:	80 91 09 01 	lds	r24, 0x0109
    2aac:	81 30       	cpi	r24, 0x01	; 1
    2aae:	09 f0       	breq	.+2      	; 0x2ab2 <main+0x32c>
    2ab0:	ff c0       	rjmp	.+510    	; 0x2cb0 <main+0x52a>
     if(NumOfDiodes == 1) {		//single Diode
    2ab2:	90 91 07 01 	lds	r25, 0x0107
    2ab6:	91 30       	cpi	r25, 0x01	; 1
    2ab8:	49 f5       	brne	.+82     	; 0x2b0c <main+0x386>
        lcd_fix_string(Diode);		//"Diode: "
    2aba:	8d ee       	ldi	r24, 0xED	; 237
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
        lcd_testpin(diodes[0].Anode);
    2ac2:	80 91 63 01 	lds	r24, 0x0163
    2ac6:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
        lcd_fix_string(AnKat);		//"->|-"
    2aca:	8b ea       	ldi	r24, 0xAB	; 171
    2acc:	91 e0       	ldi	r25, 0x01	; 1
    2ace:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
        lcd_testpin(diodes[0].Cathode);
    2ad2:	80 91 64 01 	lds	r24, 0x0164
    2ad6:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
        UfAusgabe(0x70);
    2ada:	80 e7       	ldi	r24, 0x70	; 112
    2adc:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <UfAusgabe>
#ifdef C_MESS
        lcd_fix_string(GateCap);		//"C="
    2ae0:	86 e7       	ldi	r24, 0x76	; 118
    2ae2:	91 e0       	ldi	r25, 0x01	; 1
    2ae4:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
        ReadCapacity(diodes[0].Cathode,diodes[0].Anode);	// Capacity opposite flow direction
    2ae8:	80 91 64 01 	lds	r24, 0x0164
    2aec:	60 91 63 01 	lds	r22, 0x0163
    2af0:	0e 94 ad 0b 	call	0x175a	; 0x175a <ReadCapacity>
        DisplayValue(cval,cpre,'F',3);
    2af4:	60 91 7b 01 	lds	r22, 0x017B
    2af8:	70 91 7c 01 	lds	r23, 0x017C
    2afc:	80 91 7d 01 	lds	r24, 0x017D
    2b00:	90 91 7e 01 	lds	r25, 0x017E
    2b04:	40 91 49 01 	lds	r20, 0x0149
    2b08:	26 e4       	ldi	r18, 0x46	; 70
    2b0a:	a6 c2       	rjmp	.+1356   	; 0x3058 <main+0x8d2>
#endif
        goto end;
     } else if(NumOfDiodes == 2) { // double diode
    2b0c:	92 30       	cpi	r25, 0x02	; 2
    2b0e:	09 f0       	breq	.+2      	; 0x2b12 <main+0x38c>
    2b10:	4c c0       	rjmp	.+152    	; 0x2baa <main+0x424>
        lcd_data('2');
    2b12:	82 e3       	ldi	r24, 0x32	; 50
    2b14:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
        lcd_fix_string(Dioden);		//"diodes "
    2b18:	83 eb       	ldi	r24, 0xB3	; 179
    2b1a:	91 e0       	ldi	r25, 0x01	; 1
    2b1c:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
        if(diodes[0].Anode == diodes[1].Anode) { //Common Anode
    2b20:	90 91 63 01 	lds	r25, 0x0163
    2b24:	20 91 67 01 	lds	r18, 0x0167
    2b28:	92 17       	cp	r25, r18
    2b2a:	59 f4       	brne	.+22     	; 0x2b42 <main+0x3bc>
           lcd_testpin(diodes[0].Cathode);
    2b2c:	80 91 64 01 	lds	r24, 0x0164
    2b30:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    2b34:	8f ea       	ldi	r24, 0xAF	; 175
    2b36:	91 e0       	ldi	r25, 0x01	; 1
    2b38:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    2b3c:	80 91 63 01 	lds	r24, 0x0163
    2b40:	2b c0       	rjmp	.+86     	; 0x2b98 <main+0x412>
           lcd_fix_string(AnKat);	//"->|-"
           lcd_testpin(diodes[1].Cathode);
           UfAusgabe(0x01);
           goto end;
        } else if(diodes[0].Cathode == diodes[1].Cathode) { //Common Cathode
    2b42:	30 91 64 01 	lds	r19, 0x0164
    2b46:	80 91 68 01 	lds	r24, 0x0168
    2b4a:	38 17       	cp	r19, r24
    2b4c:	b9 f4       	brne	.+46     	; 0x2b7c <main+0x3f6>
           lcd_testpin(diodes[0].Anode);
    2b4e:	89 2f       	mov	r24, r25
    2b50:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2b54:	8b ea       	ldi	r24, 0xAB	; 171
    2b56:	91 e0       	ldi	r25, 0x01	; 1
    2b58:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
	   lcd_testpin(diodes[0].Cathode);
    2b5c:	80 91 64 01 	lds	r24, 0x0164
    2b60:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    2b64:	8f ea       	ldi	r24, 0xAF	; 175
    2b66:	91 e0       	ldi	r25, 0x01	; 1
    2b68:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
           lcd_testpin(diodes[1].Anode);
    2b6c:	80 91 67 01 	lds	r24, 0x0167
    2b70:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
           UfAusgabe(0x01);
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <UfAusgabe>
           goto end;
    2b7a:	e2 c2       	rjmp	.+1476   	; 0x3140 <main+0x9ba>
          }
        else if ((diodes[0].Cathode == diodes[1].Anode) && (diodes[1].Cathode == diodes[0].Anode)) {
    2b7c:	32 17       	cp	r19, r18
    2b7e:	09 f0       	breq	.+2      	; 0x2b82 <main+0x3fc>
    2b80:	ad c2       	rjmp	.+1370   	; 0x30dc <main+0x956>
    2b82:	89 17       	cp	r24, r25
    2b84:	09 f0       	breq	.+2      	; 0x2b88 <main+0x402>
    2b86:	aa c2       	rjmp	.+1364   	; 0x30dc <main+0x956>
           //Antiparallel
           lcd_testpin(diodes[0].Anode);
    2b88:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2b8c:	8b ea       	ldi	r24, 0xAB	; 171
    2b8e:	91 e0       	ldi	r25, 0x01	; 1
    2b90:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
           lcd_testpin(diodes[0].Cathode);
    2b94:	80 91 64 01 	lds	r24, 0x0164
    2b98:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2b9c:	8b ea       	ldi	r24, 0xAB	; 171
    2b9e:	91 e0       	ldi	r25, 0x01	; 1
    2ba0:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
           lcd_testpin(diodes[1].Cathode);
    2ba4:	80 91 68 01 	lds	r24, 0x0168
    2ba8:	e3 cf       	rjmp	.-58     	; 0x2b70 <main+0x3ea>
           UfAusgabe(0x01);
           goto end;
        }
     } else if(NumOfDiodes == 3) {
    2baa:	93 30       	cpi	r25, 0x03	; 3
    2bac:	09 f0       	breq	.+2      	; 0x2bb0 <main+0x42a>
    2bae:	96 c2       	rjmp	.+1324   	; 0x30dc <main+0x956>
        //Serial of 2 Diodes; was detected as 3 Diodes 
        trans.b = 3;
    2bb0:	90 93 56 01 	sts	0x0156, r25
        trans.c = 3;
    2bb4:	90 93 57 01 	sts	0x0157, r25
        /* Check for any constallation of 2 serial diodes:
          Only once the pin No of anyone Cathode is identical of another anode.
          two diodes in series is additionally detected as third big diode.
        */
        if(diodes[0].Cathode == diodes[1].Anode)
    2bb8:	50 91 64 01 	lds	r21, 0x0164
    2bbc:	90 91 67 01 	lds	r25, 0x0167
    2bc0:	59 17       	cp	r21, r25
    2bc2:	21 f4       	brne	.+8      	; 0x2bcc <main+0x446>
          {
           trans.b = 0;
    2bc4:	10 92 56 01 	sts	0x0156, r1
           trans.c = 1;
    2bc8:	80 93 57 01 	sts	0x0157, r24
          }
        if(diodes[0].Anode == diodes[1].Cathode)
    2bcc:	40 91 63 01 	lds	r20, 0x0163
    2bd0:	30 91 68 01 	lds	r19, 0x0168
    2bd4:	43 17       	cp	r20, r19
    2bd6:	29 f4       	brne	.+10     	; 0x2be2 <main+0x45c>
          {
           trans.b = 1;
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	80 93 56 01 	sts	0x0156, r24
           trans.c = 0;
    2bde:	10 92 57 01 	sts	0x0157, r1
          }
        if(diodes[0].Cathode == diodes[2].Anode)
    2be2:	20 91 6b 01 	lds	r18, 0x016B
    2be6:	52 17       	cp	r21, r18
    2be8:	29 f4       	brne	.+10     	; 0x2bf4 <main+0x46e>
          {
           trans.b = 0;
    2bea:	10 92 56 01 	sts	0x0156, r1
           trans.c = 2;
    2bee:	82 e0       	ldi	r24, 0x02	; 2
    2bf0:	80 93 57 01 	sts	0x0157, r24
          }
        if(diodes[0].Anode == diodes[2].Cathode)
    2bf4:	80 91 6c 01 	lds	r24, 0x016C
    2bf8:	48 17       	cp	r20, r24
    2bfa:	29 f4       	brne	.+10     	; 0x2c06 <main+0x480>
          {
           trans.b = 2;
    2bfc:	42 e0       	ldi	r20, 0x02	; 2
    2bfe:	40 93 56 01 	sts	0x0156, r20
           trans.c = 0;
    2c02:	10 92 57 01 	sts	0x0157, r1
          }
        if(diodes[1].Cathode == diodes[2].Anode)
    2c06:	32 17       	cp	r19, r18
    2c08:	31 f4       	brne	.+12     	; 0x2c16 <main+0x490>
          {
           trans.b = 1;
    2c0a:	21 e0       	ldi	r18, 0x01	; 1
    2c0c:	20 93 56 01 	sts	0x0156, r18
           trans.c = 2;
    2c10:	22 e0       	ldi	r18, 0x02	; 2
    2c12:	20 93 57 01 	sts	0x0157, r18
          }
        if(diodes[1].Anode == diodes[2].Cathode)
    2c16:	98 17       	cp	r25, r24
    2c18:	31 f4       	brne	.+12     	; 0x2c26 <main+0x4a0>
          {
           trans.b = 2;
    2c1a:	82 e0       	ldi	r24, 0x02	; 2
    2c1c:	80 93 56 01 	sts	0x0156, r24
           trans.c = 1;
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	80 93 57 01 	sts	0x0157, r24
        lcd_testpin(diodes[2].Cathode);
        lcd_space();
        lcd_string(utoa(diodes[2].Voltage, outval, 10));
        lcd_line1();
#endif
        if((trans.b<3) && (trans.c<3)) {
    2c26:	80 91 56 01 	lds	r24, 0x0156
    2c2a:	83 30       	cpi	r24, 0x03	; 3
    2c2c:	08 f0       	brcs	.+2      	; 0x2c30 <main+0x4aa>
    2c2e:	56 c2       	rjmp	.+1196   	; 0x30dc <main+0x956>
    2c30:	80 91 57 01 	lds	r24, 0x0157
    2c34:	83 30       	cpi	r24, 0x03	; 3
    2c36:	08 f0       	brcs	.+2      	; 0x2c3a <main+0x4b4>
    2c38:	51 c2       	rjmp	.+1186   	; 0x30dc <main+0x956>
           lcd_data('3');
    2c3a:	83 e3       	ldi	r24, 0x33	; 51
    2c3c:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
           lcd_fix_string(Dioden);	//"Diodes "
    2c40:	83 eb       	ldi	r24, 0xB3	; 179
    2c42:	91 e0       	ldi	r25, 0x01	; 1
    2c44:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Anode);
    2c48:	e0 91 56 01 	lds	r30, 0x0156
    2c4c:	f0 e0       	ldi	r31, 0x00	; 0
    2c4e:	ee 0f       	add	r30, r30
    2c50:	ff 1f       	adc	r31, r31
    2c52:	ee 0f       	add	r30, r30
    2c54:	ff 1f       	adc	r31, r31
    2c56:	ed 59       	subi	r30, 0x9D	; 157
    2c58:	fe 4f       	sbci	r31, 0xFE	; 254
    2c5a:	80 81       	ld	r24, Z
    2c5c:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2c60:	8b ea       	ldi	r24, 0xAB	; 171
    2c62:	91 e0       	ldi	r25, 0x01	; 1
    2c64:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Cathode);
    2c68:	e0 91 56 01 	lds	r30, 0x0156
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	ee 0f       	add	r30, r30
    2c70:	ff 1f       	adc	r31, r31
    2c72:	ee 0f       	add	r30, r30
    2c74:	ff 1f       	adc	r31, r31
    2c76:	ed 59       	subi	r30, 0x9D	; 157
    2c78:	fe 4f       	sbci	r31, 0xFE	; 254
    2c7a:	81 81       	ldd	r24, Z+1	; 0x01
    2c7c:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2c80:	8b ea       	ldi	r24, 0xAB	; 171
    2c82:	91 e0       	ldi	r25, 0x01	; 1
    2c84:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
           lcd_testpin(diodes[trans.c].Cathode);
    2c88:	e0 91 57 01 	lds	r30, 0x0157
    2c8c:	f0 e0       	ldi	r31, 0x00	; 0
    2c8e:	ee 0f       	add	r30, r30
    2c90:	ff 1f       	adc	r31, r31
    2c92:	ee 0f       	add	r30, r30
    2c94:	ff 1f       	adc	r31, r31
    2c96:	ed 59       	subi	r30, 0x9D	; 157
    2c98:	fe 4f       	sbci	r31, 0xFE	; 254
    2c9a:	81 81       	ldd	r24, Z+1	; 0x01
    2c9c:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
           UfAusgabe( (trans.b<<4)|trans.c);
    2ca0:	80 91 56 01 	lds	r24, 0x0156
    2ca4:	82 95       	swap	r24
    2ca6:	80 7f       	andi	r24, 0xF0	; 240
    2ca8:	90 91 57 01 	lds	r25, 0x0157
    2cac:	89 2b       	or	r24, r25
    2cae:	63 cf       	rjmp	.-314    	; 0x2b76 <main+0x3f0>
           goto end;
        }
     }
     // end (PartFound == PART_DIODE)
  } else if (PartFound == PART_TRANSISTOR) {
    2cb0:	82 30       	cpi	r24, 0x02	; 2
    2cb2:	09 f0       	breq	.+2      	; 0x2cb6 <main+0x530>
    2cb4:	7f c0       	rjmp	.+254    	; 0x2db4 <main+0x62e>
    if(PartReady != 0) {
    2cb6:	80 91 06 01 	lds	r24, 0x0106
    2cba:	88 23       	and	r24, r24
    2cbc:	71 f1       	breq	.+92     	; 0x2d1a <main+0x594>
       if((trans.hfe[0]>trans.hfe[1])) {
    2cbe:	80 91 4e 01 	lds	r24, 0x014E
    2cc2:	90 91 4f 01 	lds	r25, 0x014F
    2cc6:	a0 91 50 01 	lds	r26, 0x0150
    2cca:	b0 91 51 01 	lds	r27, 0x0151
    2cce:	20 91 4a 01 	lds	r18, 0x014A
    2cd2:	30 91 4b 01 	lds	r19, 0x014B
    2cd6:	40 91 4c 01 	lds	r20, 0x014C
    2cda:	50 91 4d 01 	lds	r21, 0x014D
    2cde:	82 17       	cp	r24, r18
    2ce0:	93 07       	cpc	r25, r19
    2ce2:	a4 07       	cpc	r26, r20
    2ce4:	b5 07       	cpc	r27, r21
    2ce6:	48 f4       	brcc	.+18     	; 0x2cfa <main+0x574>
          //if the amplification factor was higher at first testr: swap C and E !
          tmp = trans.c;
    2ce8:	80 91 57 01 	lds	r24, 0x0157
          trans.c = trans.e;
    2cec:	90 91 58 01 	lds	r25, 0x0158
    2cf0:	90 93 57 01 	sts	0x0157, r25
          trans.e = tmp;
    2cf4:	80 93 58 01 	sts	0x0158, r24
    2cf8:	10 c0       	rjmp	.+32     	; 0x2d1a <main+0x594>
       } else {
          trans.hfe[0] = trans.hfe[1];
    2cfa:	80 93 4a 01 	sts	0x014A, r24
    2cfe:	90 93 4b 01 	sts	0x014B, r25
    2d02:	a0 93 4c 01 	sts	0x014C, r26
    2d06:	b0 93 4d 01 	sts	0x014D, r27
          trans.uBE[0] = trans.uBE[1];
    2d0a:	80 91 54 01 	lds	r24, 0x0154
    2d0e:	90 91 55 01 	lds	r25, 0x0155
    2d12:	90 93 53 01 	sts	0x0153, r25
    2d16:	80 93 52 01 	sts	0x0152, r24
       }
    }

    if(PartMode == PART_MODE_NPN) {
    2d1a:	80 91 08 01 	lds	r24, 0x0108
    2d1e:	81 30       	cpi	r24, 0x01	; 1
    2d20:	19 f4       	brne	.+6      	; 0x2d28 <main+0x5a2>
       lcd_fix_string(NPN);		//"NPN "
    2d22:	8c e7       	ldi	r24, 0x7C	; 124
    2d24:	91 e0       	ldi	r25, 0x01	; 1
    2d26:	02 c0       	rjmp	.+4      	; 0x2d2c <main+0x5a6>
    } else {
       lcd_fix_string(PNP);		//"PNP "
    2d28:	81 e8       	ldi	r24, 0x81	; 129
    2d2a:	91 e0       	ldi	r25, 0x01	; 1
    2d2c:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
    }
    if(NumOfDiodes > 2) {	//Transistor with protection diode
    2d30:	80 91 07 01 	lds	r24, 0x0107
    2d34:	83 30       	cpi	r24, 0x03	; 3
    2d36:	58 f0       	brcs	.+22     	; 0x2d4e <main+0x5c8>
       if(PartMode == PART_MODE_NPN) {
    2d38:	80 91 08 01 	lds	r24, 0x0108
    2d3c:	81 30       	cpi	r24, 0x01	; 1
    2d3e:	19 f4       	brne	.+6      	; 0x2d46 <main+0x5c0>
          lcd_fix_string(AnKat);	//"->|-"
    2d40:	8b ea       	ldi	r24, 0xAB	; 171
    2d42:	91 e0       	ldi	r25, 0x01	; 1
    2d44:	02 c0       	rjmp	.+4      	; 0x2d4a <main+0x5c4>
       } else {
          lcd_fix_string(KatAn);	//"-|<-"
    2d46:	8f ea       	ldi	r24, 0xAF	; 175
    2d48:	91 e0       	ldi	r25, 0x01	; 1
    2d4a:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
       }
    }
    lcd_fix_string(ebcstr);		//" EBC="
    2d4e:	86 e8       	ldi	r24, 0x86	; 134
    2d50:	91 e0       	ldi	r25, 0x01	; 1
    2d52:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
    lcd_testpin(trans.e);
    2d56:	80 91 58 01 	lds	r24, 0x0158
    2d5a:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
    lcd_testpin(trans.b);
    2d5e:	80 91 56 01 	lds	r24, 0x0156
    2d62:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
    lcd_testpin(trans.c);
    2d66:	80 91 57 01 	lds	r24, 0x0157
    2d6a:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
    lcd_line2(); //2. row 
    2d6e:	80 ec       	ldi	r24, 0xC0	; 192
    2d70:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
    lcd_fix_string(hfestr);		//"B="  (hFE)
    2d74:	89 e7       	ldi	r24, 0x79	; 121
    2d76:	91 e0       	ldi	r25, 0x01	; 1
    2d78:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
    DisplayValue(trans.hfe[0],0,0,3);
    2d7c:	60 91 4a 01 	lds	r22, 0x014A
    2d80:	70 91 4b 01 	lds	r23, 0x014B
    2d84:	80 91 4c 01 	lds	r24, 0x014C
    2d88:	90 91 4d 01 	lds	r25, 0x014D
    2d8c:	40 e0       	ldi	r20, 0x00	; 0
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	03 e0       	ldi	r16, 0x03	; 3
    2d92:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DisplayValue>
    lcd_space();
    2d96:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_space>

    lcd_fix_string(Uf);		//"Uf="
    2d9a:	82 e9       	ldi	r24, 0x92	; 146
    2d9c:	91 e0       	ldi	r25, 0x01	; 1
    2d9e:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
    DisplayValue(trans.uBE[0],-3,'V',3);
    2da2:	60 91 52 01 	lds	r22, 0x0152
    2da6:	70 91 53 01 	lds	r23, 0x0153
    2daa:	80 e0       	ldi	r24, 0x00	; 0
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	4d ef       	ldi	r20, 0xFD	; 253
    2db0:	26 e5       	ldi	r18, 0x56	; 86
    2db2:	91 c1       	rjmp	.+802    	; 0x30d6 <main+0x950>
    goto end;
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    2db4:	83 30       	cpi	r24, 0x03	; 3
    2db6:	09 f0       	breq	.+2      	; 0x2dba <main+0x634>
    2db8:	82 c0       	rjmp	.+260    	; 0x2ebe <main+0x738>
    if(PartMode&1) {
    2dba:	80 91 08 01 	lds	r24, 0x0108
    2dbe:	80 ff       	sbrs	r24, 0
    2dc0:	02 c0       	rjmp	.+4      	; 0x2dc6 <main+0x640>
       //N-Kanal
       lcd_data('P');			//P-channel
    2dc2:	80 e5       	ldi	r24, 0x50	; 80
    2dc4:	01 c0       	rjmp	.+2      	; 0x2dc8 <main+0x642>
    } else {
       lcd_data('N');			//N-channel
    2dc6:	8e e4       	ldi	r24, 0x4E	; 78
    2dc8:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
    }
    lcd_data('-');
    2dcc:	8d e2       	ldi	r24, 0x2D	; 45
    2dce:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>

    tmp = PartMode/2;
    2dd2:	80 91 08 01 	lds	r24, 0x0108
    2dd6:	86 95       	lsr	r24
    if (tmp == (PART_MODE_N_D_MOS/2)) {
    2dd8:	82 30       	cpi	r24, 0x02	; 2
    2dda:	11 f4       	brne	.+4      	; 0x2de0 <main+0x65a>
       lcd_data('D');			// N-D
    2ddc:	84 e4       	ldi	r24, 0x44	; 68
    2dde:	03 c0       	rjmp	.+6      	; 0x2de6 <main+0x660>
    }
    if (tmp == (PART_MODE_N_E_MOS/2)) {
    2de0:	81 30       	cpi	r24, 0x01	; 1
    2de2:	21 f4       	brne	.+8      	; 0x2dec <main+0x666>
       lcd_data('E');			// N-E
    2de4:	85 e4       	ldi	r24, 0x45	; 69
    2de6:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
    2dea:	05 c0       	rjmp	.+10     	; 0x2df6 <main+0x670>
    }
    if (tmp == (PART_MODE_N_JFET/2)) {
    2dec:	83 30       	cpi	r24, 0x03	; 3
    2dee:	19 f4       	brne	.+6      	; 0x2df6 <main+0x670>
       lcd_fix_string(jfet);		//"JFET"
    2df0:	81 e7       	ldi	r24, 0x71	; 113
    2df2:	91 e0       	ldi	r25, 0x01	; 1
    2df4:	02 c0       	rjmp	.+4      	; 0x2dfa <main+0x674>
    } else {
       lcd_fix_string(mosfet);		//"-MOS "
    2df6:	8c e6       	ldi	r24, 0x6C	; 108
    2df8:	91 e0       	ldi	r25, 0x01	; 1
    2dfa:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
    }
    lcd_fix_string(gds);		//"GDS="
    2dfe:	8c e8       	ldi	r24, 0x8C	; 140
    2e00:	91 e0       	ldi	r25, 0x01	; 1
    2e02:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
    lcd_testpin(trans.b);
    2e06:	80 91 56 01 	lds	r24, 0x0156
    2e0a:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
    lcd_testpin(trans.c);
    2e0e:	80 91 57 01 	lds	r24, 0x0157
    2e12:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
    lcd_testpin(trans.e);
    2e16:	80 91 58 01 	lds	r24, 0x0158
    2e1a:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
    if((NumOfDiodes > 0) && (PartMode < PART_MODE_N_D_MOS)) {
    2e1e:	80 91 07 01 	lds	r24, 0x0107
    2e22:	88 23       	and	r24, r24
    2e24:	59 f0       	breq	.+22     	; 0x2e3c <main+0x6b6>
    2e26:	80 91 08 01 	lds	r24, 0x0108
    2e2a:	84 30       	cpi	r24, 0x04	; 4
    2e2c:	38 f4       	brcc	.+14     	; 0x2e3c <main+0x6b6>
       //MOSFET with protection diode; only with enhancement-FETs
       if (PartMode&1) {
    2e2e:	80 ff       	sbrs	r24, 0
    2e30:	02 c0       	rjmp	.+4      	; 0x2e36 <main+0x6b0>
          lcd_data(LCD_CHAR_DIODE1);	//show Diode symbol >|
    2e32:	81 e0       	ldi	r24, 0x01	; 1
    2e34:	01 c0       	rjmp	.+2      	; 0x2e38 <main+0x6b2>
       } else {
          lcd_data(LCD_CHAR_DIODE2);	//show Diode symbol |<
    2e36:	82 e0       	ldi	r24, 0x02	; 2
    2e38:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
       }
    }
    lcd_line2();			//2. Row
    2e3c:	80 ec       	ldi	r24, 0xC0	; 192
    2e3e:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
    if(PartMode < PART_MODE_N_D_MOS) {	//enhancement-MOSFET
    2e42:	80 91 08 01 	lds	r24, 0x0108
    2e46:	84 30       	cpi	r24, 0x04	; 4
    2e48:	d8 f4       	brcc	.+54     	; 0x2e80 <main+0x6fa>
 #ifdef C_MESS	//Gate capacity
       lcd_fix_string(GateCap);		//"C="
    2e4a:	86 e7       	ldi	r24, 0x76	; 118
    2e4c:	91 e0       	ldi	r25, 0x01	; 1
    2e4e:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
       ReadCapacity(trans.b,trans.e);	//measure capacity
    2e52:	80 91 56 01 	lds	r24, 0x0156
    2e56:	60 91 58 01 	lds	r22, 0x0158
    2e5a:	0e 94 ad 0b 	call	0x175a	; 0x175a <ReadCapacity>
       DisplayValue(cval,cpre,'F',3);
    2e5e:	60 91 7b 01 	lds	r22, 0x017B
    2e62:	70 91 7c 01 	lds	r23, 0x017C
    2e66:	80 91 7d 01 	lds	r24, 0x017D
    2e6a:	90 91 7e 01 	lds	r25, 0x017E
    2e6e:	40 91 49 01 	lds	r20, 0x0149
    2e72:	26 e4       	ldi	r18, 0x46	; 70
    2e74:	03 e0       	ldi	r16, 0x03	; 3
    2e76:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DisplayValue>
 #endif
       lcd_fix_string(vt);		// "Vt="
    2e7a:	86 e9       	ldi	r24, 0x96	; 150
    2e7c:	91 e0       	ldi	r25, 0x01	; 1
    2e7e:	13 c0       	rjmp	.+38     	; 0x2ea6 <main+0x720>
    } else {
       lcd_data('I');
    2e80:	89 e4       	ldi	r24, 0x49	; 73
    2e82:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
       lcd_data('=');
    2e86:	8d e3       	ldi	r24, 0x3D	; 61
    2e88:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
       DisplayValue(trans.uBE[1],-5,'A',2);
    2e8c:	60 91 54 01 	lds	r22, 0x0154
    2e90:	70 91 55 01 	lds	r23, 0x0155
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	4b ef       	ldi	r20, 0xFB	; 251
    2e9a:	21 e4       	ldi	r18, 0x41	; 65
    2e9c:	02 e0       	ldi	r16, 0x02	; 2
    2e9e:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DisplayValue>
       lcd_fix_string(Vgs_str);		// " Vgs="
    2ea2:	8b e9       	ldi	r24, 0x9B	; 155
    2ea4:	91 e0       	ldi	r25, 0x01	; 1
    2ea6:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
    }
    //Gate-threshold voltage
    DisplayValue(gthvoltage,-3,'V',2);
    2eaa:	60 91 5e 01 	lds	r22, 0x015E
    2eae:	70 91 5f 01 	lds	r23, 0x015F
    2eb2:	80 e0       	ldi	r24, 0x00	; 0
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	4d ef       	ldi	r20, 0xFD	; 253
    2eb8:	26 e5       	ldi	r18, 0x56	; 86
    2eba:	02 e0       	ldi	r16, 0x02	; 2
    2ebc:	0c c1       	rjmp	.+536    	; 0x30d6 <main+0x950>
    goto end;
    // end (PartFound == PART_FET)
  } else if (PartFound == PART_THYRISTOR) {
    2ebe:	85 30       	cpi	r24, 0x05	; 5
    2ec0:	19 f4       	brne	.+6      	; 0x2ec8 <main+0x742>
    lcd_fix_string(Thyristor);		//"Thyristor"
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	91 e0       	ldi	r25, 0x01	; 1
    2ec6:	04 c0       	rjmp	.+8      	; 0x2ed0 <main+0x74a>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    2ec8:	84 30       	cpi	r24, 0x04	; 4
    2eca:	c1 f4       	brne	.+48     	; 0x2efc <main+0x776>
    lcd_fix_string(Triac);		//"Triac"
    2ecc:	8a ef       	ldi	r24, 0xFA	; 250
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
  mess_count = 0;
  goto end2;


gakAusgabe:
  lcd_line2(); //2. row 
    2ed4:	80 ec       	ldi	r24, 0xC0	; 192
    2ed6:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
  lcd_fix_string(GAK);		//"GAK="
    2eda:	85 ef       	ldi	r24, 0xF5	; 245
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
  lcd_testpin(trans.b);
    2ee2:	80 91 56 01 	lds	r24, 0x0156
    2ee6:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
  lcd_testpin(trans.c);
    2eea:	80 91 57 01 	lds	r24, 0x0157
    2eee:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
  lcd_testpin(trans.e);
    2ef2:	80 91 58 01 	lds	r24, 0x0158
    2ef6:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
    2efa:	22 c1       	rjmp	.+580    	; 0x3140 <main+0x9ba>
  } else if (PartFound == PART_TRIAC) {
    lcd_fix_string(Triac);		//"Triac"
    goto gakAusgabe;
  }
 #ifdef R_MESS	//resistor measurement is wanted
  else if(PartFound == PART_RESISTOR) {
    2efc:	86 30       	cpi	r24, 0x06	; 6
    2efe:	09 f0       	breq	.+2      	; 0x2f02 <main+0x77c>
    2f00:	cd c0       	rjmp	.+410    	; 0x309c <main+0x916>
    if (ResistorsFound == 1) { // single resistor
    2f02:	60 91 59 01 	lds	r22, 0x0159
    2f06:	61 30       	cpi	r22, 0x01	; 1
    2f08:	69 f4       	brne	.+26     	; 0x2f24 <main+0x79e>
       lcd_testpin(resis[0].rb);  	//Pin-number 1
    2f0a:	80 91 24 01 	lds	r24, 0x0124
    2f0e:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
       lcd_fix_string(Resistor_str);
    2f12:	88 eb       	ldi	r24, 0xB8	; 184
    2f14:	91 e0       	ldi	r25, 0x01	; 1
    2f16:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
       lcd_testpin(resis[0].ra);		//Pin-number 2
    2f1a:	80 91 23 01 	lds	r24, 0x0123
    2f1e:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
    2f22:	80 c0       	rjmp	.+256    	; 0x3024 <main+0x89e>
    } else { // R-Max suchen
       ii = 0;
    2f24:	10 92 47 01 	sts	0x0147, r1
       if (resis[1].rx > resis[0].rx)
    2f28:	20 91 26 01 	lds	r18, 0x0126
    2f2c:	30 91 27 01 	lds	r19, 0x0127
    2f30:	40 91 28 01 	lds	r20, 0x0128
    2f34:	50 91 29 01 	lds	r21, 0x0129
    2f38:	80 91 1b 01 	lds	r24, 0x011B
    2f3c:	90 91 1c 01 	lds	r25, 0x011C
    2f40:	a0 91 1d 01 	lds	r26, 0x011D
    2f44:	b0 91 1e 01 	lds	r27, 0x011E
    2f48:	82 17       	cp	r24, r18
    2f4a:	93 07       	cpc	r25, r19
    2f4c:	a4 07       	cpc	r26, r20
    2f4e:	b5 07       	cpc	r27, r21
    2f50:	18 f4       	brcc	.+6      	; 0x2f58 <main+0x7d2>
          ii = 1;
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	80 93 47 01 	sts	0x0147, r24
       if (ResistorsFound == 2) {
    2f58:	62 30       	cpi	r22, 0x02	; 2
    2f5a:	19 f4       	brne	.+6      	; 0x2f62 <main+0x7dc>
          ii = 2;
    2f5c:	60 93 47 01 	sts	0x0147, r22
    2f60:	22 c0       	rjmp	.+68     	; 0x2fa6 <main+0x820>
       } else {
          if (resis[2].rx > resis[ii].rx) {
    2f62:	20 91 47 01 	lds	r18, 0x0147
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	8b e0       	ldi	r24, 0x0B	; 11
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	28 9f       	mul	r18, r24
    2f6e:	f0 01       	movw	r30, r0
    2f70:	29 9f       	mul	r18, r25
    2f72:	f0 0d       	add	r31, r0
    2f74:	38 9f       	mul	r19, r24
    2f76:	f0 0d       	add	r31, r0
    2f78:	11 24       	eor	r1, r1
    2f7a:	e5 5e       	subi	r30, 0xE5	; 229
    2f7c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f7e:	20 91 31 01 	lds	r18, 0x0131
    2f82:	30 91 32 01 	lds	r19, 0x0132
    2f86:	40 91 33 01 	lds	r20, 0x0133
    2f8a:	50 91 34 01 	lds	r21, 0x0134
    2f8e:	80 81       	ld	r24, Z
    2f90:	91 81       	ldd	r25, Z+1	; 0x01
    2f92:	a2 81       	ldd	r26, Z+2	; 0x02
    2f94:	b3 81       	ldd	r27, Z+3	; 0x03
    2f96:	82 17       	cp	r24, r18
    2f98:	93 07       	cpc	r25, r19
    2f9a:	a4 07       	cpc	r26, r20
    2f9c:	b5 07       	cpc	r27, r21
    2f9e:	18 f4       	brcc	.+6      	; 0x2fa6 <main+0x820>
             ii = 2;
    2fa0:	82 e0       	ldi	r24, 0x02	; 2
    2fa2:	80 93 47 01 	sts	0x0147, r24
          }
       }

       if (ii == 0) {
    2fa6:	80 91 47 01 	lds	r24, 0x0147
    2faa:	88 23       	and	r24, r24
    2fac:	89 f4       	brne	.+34     	; 0x2fd0 <main+0x84a>
          lcd_data('1');
    2fae:	81 e3       	ldi	r24, 0x31	; 49
    2fb0:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    2fb4:	88 eb       	ldi	r24, 0xB8	; 184
    2fb6:	91 e0       	ldi	r25, 0x01	; 1
    2fb8:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
          lcd_data('3');
    2fbc:	83 e3       	ldi	r24, 0x33	; 51
    2fbe:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    2fc2:	88 eb       	ldi	r24, 0xB8	; 184
    2fc4:	91 e0       	ldi	r25, 0x01	; 1
    2fc6:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
          lcd_data('2');
    2fca:	82 e3       	ldi	r24, 0x32	; 50
    2fcc:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
       }
       if (ii == 1) {
    2fd0:	80 91 47 01 	lds	r24, 0x0147
    2fd4:	81 30       	cpi	r24, 0x01	; 1
    2fd6:	89 f4       	brne	.+34     	; 0x2ffa <main+0x874>
          lcd_data('1');
    2fd8:	81 e3       	ldi	r24, 0x31	; 49
    2fda:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    2fde:	88 eb       	ldi	r24, 0xB8	; 184
    2fe0:	91 e0       	ldi	r25, 0x01	; 1
    2fe2:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
          lcd_data('2');
    2fe6:	82 e3       	ldi	r24, 0x32	; 50
    2fe8:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    2fec:	88 eb       	ldi	r24, 0xB8	; 184
    2fee:	91 e0       	ldi	r25, 0x01	; 1
    2ff0:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
          lcd_data('3');
    2ff4:	83 e3       	ldi	r24, 0x33	; 51
    2ff6:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
       }
       if (ii == 2) {
    2ffa:	80 91 47 01 	lds	r24, 0x0147
    2ffe:	82 30       	cpi	r24, 0x02	; 2
    3000:	89 f4       	brne	.+34     	; 0x3024 <main+0x89e>
          lcd_data('2');
    3002:	82 e3       	ldi	r24, 0x32	; 50
    3004:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    3008:	88 eb       	ldi	r24, 0xB8	; 184
    300a:	91 e0       	ldi	r25, 0x01	; 1
    300c:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
          lcd_data('1');
    3010:	81 e3       	ldi	r24, 0x31	; 49
    3012:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    3016:	88 eb       	ldi	r24, 0xB8	; 184
    3018:	91 e0       	ldi	r25, 0x01	; 1
    301a:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
          lcd_data('3');
    301e:	83 e3       	ldi	r24, 0x33	; 51
    3020:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
       }
    }
    lcd_line2(); //2. row 
    3024:	80 ec       	ldi	r24, 0xC0	; 192
    3026:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
    if (ResistorsFound == 1) {
    302a:	80 91 59 01 	lds	r24, 0x0159
    302e:	81 30       	cpi	r24, 0x01	; 1
    3030:	a9 f4       	brne	.+42     	; 0x305c <main+0x8d6>
       RvalOut(0);
    3032:	80 e0       	ldi	r24, 0x00	; 0
    3034:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <RvalOut>
#if FLASHEND > 0x1fff
       if (resis[0].lx != 0) {
    3038:	60 91 1f 01 	lds	r22, 0x011F
    303c:	70 91 20 01 	lds	r23, 0x0120
    3040:	80 91 21 01 	lds	r24, 0x0121
    3044:	90 91 22 01 	lds	r25, 0x0122
    3048:	61 15       	cp	r22, r1
    304a:	71 05       	cpc	r23, r1
    304c:	81 05       	cpc	r24, r1
    304e:	91 05       	cpc	r25, r1
    3050:	09 f4       	brne	.+2      	; 0x3054 <main+0x8ce>
    3052:	76 c0       	rjmp	.+236    	; 0x3140 <main+0x9ba>
	  // resistor have also Inductance
          DisplayValue(resis[0].lx,-5,'H',3);	// output inductance
    3054:	4b ef       	ldi	r20, 0xFB	; 251
    3056:	28 e4       	ldi	r18, 0x48	; 72
    3058:	03 e0       	ldi	r16, 0x03	; 3
    305a:	3d c0       	rjmp	.+122    	; 0x30d6 <main+0x950>
       }
#endif
    } else {
       // output resistor values in right order
       if (ii == 0) {
    305c:	80 91 47 01 	lds	r24, 0x0147
    3060:	88 23       	and	r24, r24
    3062:	31 f4       	brne	.+12     	; 0x3070 <main+0x8ea>
          RvalOut(1);
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <RvalOut>
          RvalOut(2);
    306a:	82 e0       	ldi	r24, 0x02	; 2
    306c:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <RvalOut>
       }
       if (ii == 1) {
    3070:	80 91 47 01 	lds	r24, 0x0147
    3074:	81 30       	cpi	r24, 0x01	; 1
    3076:	31 f4       	brne	.+12     	; 0x3084 <main+0x8fe>
          RvalOut(0);
    3078:	80 e0       	ldi	r24, 0x00	; 0
    307a:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <RvalOut>
          RvalOut(2);
    307e:	82 e0       	ldi	r24, 0x02	; 2
    3080:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <RvalOut>
       }
       if (ii == 2) {
    3084:	80 91 47 01 	lds	r24, 0x0147
    3088:	82 30       	cpi	r24, 0x02	; 2
    308a:	09 f0       	breq	.+2      	; 0x308e <main+0x908>
    308c:	59 c0       	rjmp	.+178    	; 0x3140 <main+0x9ba>
          RvalOut(0);
    308e:	80 e0       	ldi	r24, 0x00	; 0
    3090:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <RvalOut>
          RvalOut(1);
    3094:	81 e0       	ldi	r24, 0x01	; 1
    3096:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <RvalOut>
    309a:	52 c0       	rjmp	.+164    	; 0x3140 <main+0x9ba>
  } // end (PartFound == PART_RESISTOR)
#endif

#ifdef C_MESS
//capacity measurement is wanted
  else if(PartFound == PART_CAPACITOR) {
    309c:	87 30       	cpi	r24, 0x07	; 7
    309e:	f1 f4       	brne	.+60     	; 0x30dc <main+0x956>
//     lcd_fix_string(Capacitor);
     lcd_testpin(ca);			//Pin number 1
    30a0:	80 91 60 01 	lds	r24, 0x0160
    30a4:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
     lcd_fix_string(CapZeich);		// capacitor sign
    30a8:	81 ea       	ldi	r24, 0xA1	; 161
    30aa:	91 e0       	ldi	r25, 0x01	; 1
    30ac:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
     lcd_testpin(cb);			//Pin number 2
    30b0:	80 91 0a 01 	lds	r24, 0x010A
    30b4:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_testpin>
     lcd_line2(); 				//2. row 
    30b8:	80 ec       	ldi	r24, 0xC0	; 192
    30ba:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
     DisplayValue(cval,cpre,'F',4);
    30be:	60 91 7b 01 	lds	r22, 0x017B
    30c2:	70 91 7c 01 	lds	r23, 0x017C
    30c6:	80 91 7d 01 	lds	r24, 0x017D
    30ca:	90 91 7e 01 	lds	r25, 0x017E
    30ce:	40 91 49 01 	lds	r20, 0x0149
    30d2:	26 e4       	ldi	r18, 0x46	; 70
    30d4:	04 e0       	ldi	r16, 0x04	; 4
    30d6:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <DisplayValue>
     goto end;
    30da:	32 c0       	rjmp	.+100    	; 0x3140 <main+0x9ba>
  }
#endif
  if(NumOfDiodes == 0) { //no diodes are found
    30dc:	80 91 07 01 	lds	r24, 0x0107
    30e0:	88 23       	and	r24, r24
    30e2:	71 f4       	brne	.+28     	; 0x3100 <main+0x97a>
     lcd_fix_string(TestFailed1); 	//"Kein,unbek. oder"
    30e4:	83 e1       	ldi	r24, 0x13	; 19
    30e6:	91 e0       	ldi	r25, 0x01	; 1
    30e8:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
     lcd_line2(); //2. row 
    30ec:	80 ec       	ldi	r24, 0xC0	; 192
    30ee:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
     lcd_fix_string(TestFailed2); 	//"defektes "
    30f2:	8f ed       	ldi	r24, 0xDF	; 223
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
     lcd_fix_string(Bauteil);		//"Bauteil"
    30fa:	88 ee       	ldi	r24, 0xE8	; 232
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	16 c0       	rjmp	.+44     	; 0x312c <main+0x9a6>
  } else {
     lcd_fix_string(Bauteil);		//"Bauteil"
    3100:	88 ee       	ldi	r24, 0xE8	; 232
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
     lcd_fix_string(Unknown); 		//" unbek."
    3108:	8a e0       	ldi	r24, 0x0A	; 10
    310a:	91 e0       	ldi	r25, 0x01	; 1
    310c:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
     lcd_line2(); //2. row 
    3110:	80 ec       	ldi	r24, 0xC0	; 192
    3112:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_command>
     lcd_fix_string(OrBroken); 		//"oder defekt "
    3116:	83 e2       	ldi	r24, 0x23	; 35
    3118:	91 e0       	ldi	r25, 0x01	; 1
    311a:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
     lcd_data(NumOfDiodes + '0');
    311e:	80 91 07 01 	lds	r24, 0x0107
    3122:	80 5d       	subi	r24, 0xD0	; 208
    3124:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
     lcd_fix_string(AnKat);		//"->|-"
    3128:	8b ea       	ldi	r24, 0xAB	; 171
    312a:	91 e0       	ldi	r25, 0x01	; 1
    312c:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_fix_string>
  }
  empty_count++;
    3130:	80 91 46 01 	lds	r24, 0x0146
    3134:	8f 5f       	subi	r24, 0xFF	; 255
    3136:	80 93 46 01 	sts	0x0146, r24
  mess_count = 0;
    313a:	10 92 0e 01 	sts	0x010E, r1
  goto end2;
    313e:	07 c0       	rjmp	.+14     	; 0x314e <main+0x9c8>
  lcd_testpin(trans.b);
  lcd_testpin(trans.c);
  lcd_testpin(trans.e);
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 end:
  empty_count = 0;		// reset counter, if part is found
    3140:	10 92 46 01 	sts	0x0146, r1
  mess_count++;			// count measurements
    3144:	80 91 0e 01 	lds	r24, 0x010E
    3148:	8f 5f       	subi	r24, 0xFF	; 255
    314a:	80 93 0e 01 	sts	0x010E, r24

 end2:
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
    314e:	4f 9b       	sbis	0x09, 7	; 9
    3150:	fe cf       	rjmp	.-4      	; 0x314e <main+0x9c8>
  wait200ms();
    3152:	0e 94 06 19 	call	0x320c	; 0x320c <wait200ms>
// wait 10 seconds or 3 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage++) {
    3156:	10 92 5f 01 	sts	0x015F, r1
    315a:	10 92 5e 01 	sts	0x015E, r1
    315e:	0e c0       	rjmp	.+28     	; 0x317c <main+0x9f6>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    3160:	4f 9b       	sbis	0x09, 7	; 9
    3162:	71 cb       	rjmp	.-2334   	; 0x2846 <main+0xc0>
        // If the key is pressed again... 
        // goto start of measurement 
        goto start;
     }
     wdt_reset();
    3164:	a8 95       	wdr
     wait1ms();
    3166:	0e 94 12 19 	call	0x3224	; 0x3224 <wait1ms>

 end2:
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
  wait200ms();
// wait 10 seconds or 3 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage++) {
    316a:	80 91 5e 01 	lds	r24, 0x015E
    316e:	90 91 5f 01 	lds	r25, 0x015F
    3172:	01 96       	adiw	r24, 0x01	; 1
    3174:	90 93 5f 01 	sts	0x015F, r25
    3178:	80 93 5e 01 	sts	0x015E, r24
    317c:	20 91 5e 01 	lds	r18, 0x015E
    3180:	30 91 5f 01 	lds	r19, 0x015F
    3184:	80 91 02 01 	lds	r24, 0x0102
    3188:	90 91 03 01 	lds	r25, 0x0103
    318c:	28 17       	cp	r18, r24
    318e:	39 07       	cpc	r19, r25
    3190:	38 f3       	brcs	.-50     	; 0x3160 <main+0x9da>
  #define POWER2_OFF 255
 #else
  #define POWER2_OFF POWER_OFF*2
 #endif
 #if POWER_OFF+0 > 1
  if ((empty_count < POWER_OFF) && (mess_count < POWER2_OFF)) {
    3192:	80 91 46 01 	lds	r24, 0x0146
    3196:	85 30       	cpi	r24, 0x05	; 5
    3198:	28 f4       	brcc	.+10     	; 0x31a4 <main+0xa1e>
    319a:	80 91 0e 01 	lds	r24, 0x010E
    319e:	8a 30       	cpi	r24, 0x0A	; 10
    31a0:	08 f4       	brcc	.+2      	; 0x31a4 <main+0xa1e>
    31a2:	51 cb       	rjmp	.-2398   	; 0x2846 <main+0xc0>
     goto start;			// repeat measurement POWER_OFF times
  }
 #endif
  // only one Measurement requested, shut off
  wdt_disable();			//Watchdog off
    31a4:	88 e1       	ldi	r24, 0x18	; 24
    31a6:	0f b6       	in	r0, 0x3f	; 63
    31a8:	f8 94       	cli
    31aa:	80 93 60 00 	sts	0x0060, r24
    31ae:	10 92 60 00 	sts	0x0060, r1
    31b2:	0f be       	out	0x3f, r0	; 63
  ON_PORT &= ~(1<<ON_PIN);		//switch off power
    31b4:	5e 98       	cbi	0x0b, 6	; 11
  //never ending loop 
  while(1) {
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    31b6:	4f 99       	sbic	0x09, 7	; 9
    31b8:	fe cf       	rjmp	.-4      	; 0x31b6 <main+0xa30>
    31ba:	45 cb       	rjmp	.-2422   	; 0x2846 <main+0xc0>

000031bc <uart_putc>:
    31bc:	2f 93       	push	r18
    31be:	5f b7       	in	r21, 0x3f	; 63
    31c0:	2f 93       	push	r18
    31c2:	2a e0       	ldi	r18, 0x0A	; 10
    31c4:	80 95       	com	r24
    31c6:	08 94       	sec

000031c8 <putchar0>:
    31c8:	10 f4       	brcc	.+4      	; 0x31ce <putchar1>
    31ca:	43 98       	cbi	0x08, 3	; 8
    31cc:	02 c0       	rjmp	.+4      	; 0x31d2 <putchar2>

000031ce <putchar1>:
    31ce:	43 9a       	sbi	0x08, 3	; 8
	...

000031d2 <putchar2>:
    31d2:	08 d0       	rcall	.+16     	; 0x31e4 <UART_delay>
    31d4:	07 d0       	rcall	.+14     	; 0x31e4 <UART_delay>
    31d6:	86 95       	lsr	r24
    31d8:	2a 95       	dec	r18
    31da:	b1 f7       	brne	.-20     	; 0x31c8 <putchar0>
    31dc:	2f 91       	pop	r18
    31de:	5f bf       	out	0x3f, r21	; 63
    31e0:	2f 91       	pop	r18
    31e2:	08 95       	ret

000031e4 <UART_delay>:
    31e4:	5f 93       	push	r21
    31e6:	5f b7       	in	r21, 0x3f	; 63
    31e8:	5f 93       	push	r21
    31ea:	00 00       	nop
    31ec:	5e e3       	ldi	r21, 0x3E	; 62

000031ee <UART_delay1>:
    31ee:	5a 95       	dec	r21
    31f0:	f1 f7       	brne	.-4      	; 0x31ee <UART_delay1>
    31f2:	00 00       	nop
    31f4:	5f 91       	pop	r21
    31f6:	5f bf       	out	0x3f, r21	; 63
    31f8:	5f 91       	pop	r21
    31fa:	08 95       	ret

000031fc <wait5s>:
    31fc:	03 d0       	rcall	.+6      	; 0x3204 <wait1000ms>

000031fe <wait4s>:
    31fe:	02 d0       	rcall	.+4      	; 0x3204 <wait1000ms>

00003200 <wait3s>:
    3200:	01 d0       	rcall	.+2      	; 0x3204 <wait1000ms>

00003202 <wait2s>:
    3202:	00 d0       	rcall	.+0      	; 0x3204 <wait1000ms>

00003204 <wait1000ms>:
    3204:	00 d0       	rcall	.+0      	; 0x3206 <wait500ms>

00003206 <wait500ms>:
    3206:	03 d0       	rcall	.+6      	; 0x320e <wait100ms>

00003208 <wait400ms>:
    3208:	02 d0       	rcall	.+4      	; 0x320e <wait100ms>

0000320a <wait300ms>:
    320a:	01 d0       	rcall	.+2      	; 0x320e <wait100ms>

0000320c <wait200ms>:
    320c:	00 d0       	rcall	.+0      	; 0x320e <wait100ms>

0000320e <wait100ms>:
    320e:	a8 95       	wdr
    3210:	00 d0       	rcall	.+0      	; 0x3212 <wait50ms>

00003212 <wait50ms>:
    3212:	03 d0       	rcall	.+6      	; 0x321a <wait10ms>

00003214 <wait40ms>:
    3214:	02 d0       	rcall	.+4      	; 0x321a <wait10ms>

00003216 <wait30ms>:
    3216:	01 d0       	rcall	.+2      	; 0x321a <wait10ms>

00003218 <wait20ms>:
    3218:	00 d0       	rcall	.+0      	; 0x321a <wait10ms>

0000321a <wait10ms>:
    321a:	00 d0       	rcall	.+0      	; 0x321c <wait5ms>

0000321c <wait5ms>:
    321c:	03 d0       	rcall	.+6      	; 0x3224 <wait1ms>

0000321e <wait4ms>:
    321e:	02 d0       	rcall	.+4      	; 0x3224 <wait1ms>

00003220 <wait3ms>:
    3220:	01 d0       	rcall	.+2      	; 0x3224 <wait1ms>

00003222 <wait2ms>:
    3222:	00 d0       	rcall	.+0      	; 0x3224 <wait1ms>

00003224 <wait1ms>:
    3224:	00 d0       	rcall	.+0      	; 0x3226 <wait500us>

00003226 <wait500us>:
    3226:	03 d0       	rcall	.+6      	; 0x322e <wait100us>

00003228 <wait400us>:
    3228:	02 d0       	rcall	.+4      	; 0x322e <wait100us>

0000322a <wait300us>:
    322a:	01 d0       	rcall	.+2      	; 0x322e <wait100us>

0000322c <wait200us>:
    322c:	00 d0       	rcall	.+0      	; 0x322e <wait100us>

0000322e <wait100us>:
    322e:	00 d0       	rcall	.+0      	; 0x3230 <wait50us>

00003230 <wait50us>:
    3230:	03 d0       	rcall	.+6      	; 0x3238 <wait10us>

00003232 <wait40us>:
    3232:	02 d0       	rcall	.+4      	; 0x3238 <wait10us>

00003234 <wait30us>:
    3234:	01 d0       	rcall	.+2      	; 0x3238 <wait10us>

00003236 <wait20us>:
    3236:	00 d0       	rcall	.+0      	; 0x3238 <wait10us>

00003238 <wait10us>:
    3238:	00 d0       	rcall	.+0      	; 0x323a <wait5us>

0000323a <wait5us>:
    323a:	03 d0       	rcall	.+6      	; 0x3242 <wait1us>

0000323c <wait4us>:
    323c:	02 d0       	rcall	.+4      	; 0x3242 <wait1us>

0000323e <wait3us>:
    323e:	01 d0       	rcall	.+2      	; 0x3242 <wait1us>

00003240 <wait2us>:
    3240:	00 d0       	rcall	.+0      	; 0x3242 <wait1us>

00003242 <wait1us>:
    3242:	00 00       	nop
    3244:	08 95       	ret

00003246 <CombineBI2Long>:
    3246:	99 27       	eor	r25, r25

00003248 <CombineII2Long>:
    3248:	08 95       	ret

0000324a <W20msReadADC>:
    324a:	0e 94 0d 19 	call	0x321a	; 0x321a <wait10ms>

0000324e <W10msReadADC>:
    324e:	0e 94 0e 19 	call	0x321c	; 0x321c <wait5ms>

00003252 <W5msReadADC>:
    3252:	0e 94 0e 19 	call	0x321c	; 0x321c <wait5ms>

00003256 <ReadADC>:
    3256:	1f 93       	push	r17
    3258:	18 2f       	mov	r17, r24
    325a:	10 64       	ori	r17, 0x40	; 64

0000325c <get_sample>:
    325c:	10 93 7c 00 	sts	0x007C, r17
    3260:	e1 2f       	mov	r30, r17
    3262:	e0 78       	andi	r30, 0x80	; 128
    3264:	80 91 3d 01 	lds	r24, 0x013D
    3268:	e8 17       	cp	r30, r24
    326a:	69 f0       	breq	.+26     	; 0x3286 <r2aa2>
    326c:	0e 94 17 19 	call	0x322e	; 0x322e <wait100us>
    3270:	80 91 7a 00 	lds	r24, 0x007A
    3274:	80 64       	ori	r24, 0x40	; 64
    3276:	80 93 7a 00 	sts	0x007A, r24

0000327a <wadc1>:
    327a:	80 91 7a 00 	lds	r24, 0x007A
    327e:	86 fd       	sbrc	r24, 6
    3280:	fc cf       	rjmp	.-8      	; 0x327a <wadc1>
    3282:	e0 93 3d 01 	sts	0x013D, r30

00003286 <r2aa2>:
    3286:	20 e0       	ldi	r18, 0x00	; 0
    3288:	30 e0       	ldi	r19, 0x00	; 0
    328a:	a9 01       	movw	r20, r18
    328c:	e0 e0       	ldi	r30, 0x00	; 0
    328e:	20 c0       	rjmp	.+64     	; 0x32d0 <r2ae8>

00003290 <Loop>:
    3290:	80 91 7a 00 	lds	r24, 0x007A
    3294:	80 64       	ori	r24, 0x40	; 64
    3296:	80 93 7a 00 	sts	0x007A, r24

0000329a <wadc2>:
    329a:	80 91 7a 00 	lds	r24, 0x007A
    329e:	86 fd       	sbrc	r24, 6
    32a0:	fc cf       	rjmp	.-8      	; 0x329a <wadc2>
    32a2:	60 91 78 00 	lds	r22, 0x0078
    32a6:	70 91 79 00 	lds	r23, 0x0079
    32aa:	26 0f       	add	r18, r22
    32ac:	37 1f       	adc	r19, r23
    32ae:	41 1d       	adc	r20, r1
    32b0:	51 1d       	adc	r21, r1
    32b2:	e4 30       	cpi	r30, 0x04	; 4
    32b4:	61 f4       	brne	.+24     	; 0x32ce <r2ae6>
    32b6:	80 91 3f 01 	lds	r24, 0x013F
    32ba:	80 30       	cpi	r24, 0x00	; 0
    32bc:	41 f0       	breq	.+16     	; 0x32ce <r2ae6>
    32be:	84 e0       	ldi	r24, 0x04	; 4
    32c0:	20 30       	cpi	r18, 0x00	; 0
    32c2:	38 07       	cpc	r19, r24
    32c4:	20 f4       	brcc	.+8      	; 0x32ce <r2ae6>
    32c6:	17 fd       	sbrc	r17, 7
    32c8:	02 c0       	rjmp	.+4      	; 0x32ce <r2ae6>
    32ca:	10 68       	ori	r17, 0x80	; 128
    32cc:	c7 cf       	rjmp	.-114    	; 0x325c <get_sample>

000032ce <r2ae6>:
    32ce:	ef 5f       	subi	r30, 0xFF	; 255

000032d0 <r2ae8>:
    32d0:	80 91 3c 01 	lds	r24, 0x013C
    32d4:	e8 17       	cp	r30, r24
    32d6:	e0 f2       	brcs	.-72     	; 0x3290 <Loop>
    32d8:	17 ff       	sbrs	r17, 7
    32da:	05 c0       	rjmp	.+10     	; 0x32e6 <r2afe>
    32dc:	60 91 3e 01 	lds	r22, 0x013E
    32e0:	70 91 3f 01 	lds	r23, 0x013F
    32e4:	04 c0       	rjmp	.+8      	; 0x32ee <r2b02>

000032e6 <r2afe>:
    32e6:	60 91 40 01 	lds	r22, 0x0140
    32ea:	70 91 41 01 	lds	r23, 0x0141

000032ee <r2b02>:
    32ee:	80 e0       	ldi	r24, 0x00	; 0
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsi3>
    32f6:	2f ef       	ldi	r18, 0xFF	; 255
    32f8:	33 e0       	ldi	r19, 0x03	; 3
    32fa:	41 e0       	ldi	r20, 0x01	; 1
    32fc:	62 0f       	add	r22, r18
    32fe:	74 1f       	adc	r23, r20
    3300:	81 1d       	adc	r24, r1
    3302:	91 1d       	adc	r25, r1
    3304:	40 e0       	ldi	r20, 0x00	; 0
    3306:	50 e0       	ldi	r21, 0x00	; 0
    3308:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
    330c:	b9 01       	movw	r22, r18
    330e:	ca 01       	movw	r24, r20
    3310:	20 91 3c 01 	lds	r18, 0x013C
    3314:	32 2f       	mov	r19, r18
    3316:	35 95       	asr	r19
    3318:	63 0f       	add	r22, r19
    331a:	71 1d       	adc	r23, r1
    331c:	81 1d       	adc	r24, r1
    331e:	91 1d       	adc	r25, r1
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	40 e0       	ldi	r20, 0x00	; 0
    3324:	50 e0       	ldi	r21, 0x00	; 0
    3326:	0e 94 d7 19 	call	0x33ae	; 0x33ae <__udivmodsi4>
    332a:	c9 01       	movw	r24, r18
    332c:	1f 91       	pop	r17
    332e:	08 95       	ret

00003330 <__mulsi3>:
    3330:	62 9f       	mul	r22, r18
    3332:	d0 01       	movw	r26, r0
    3334:	73 9f       	mul	r23, r19
    3336:	f0 01       	movw	r30, r0
    3338:	82 9f       	mul	r24, r18
    333a:	e0 0d       	add	r30, r0
    333c:	f1 1d       	adc	r31, r1
    333e:	64 9f       	mul	r22, r20
    3340:	e0 0d       	add	r30, r0
    3342:	f1 1d       	adc	r31, r1
    3344:	92 9f       	mul	r25, r18
    3346:	f0 0d       	add	r31, r0
    3348:	83 9f       	mul	r24, r19
    334a:	f0 0d       	add	r31, r0
    334c:	74 9f       	mul	r23, r20
    334e:	f0 0d       	add	r31, r0
    3350:	65 9f       	mul	r22, r21
    3352:	f0 0d       	add	r31, r0
    3354:	99 27       	eor	r25, r25
    3356:	72 9f       	mul	r23, r18
    3358:	b0 0d       	add	r27, r0
    335a:	e1 1d       	adc	r30, r1
    335c:	f9 1f       	adc	r31, r25
    335e:	63 9f       	mul	r22, r19
    3360:	b0 0d       	add	r27, r0
    3362:	e1 1d       	adc	r30, r1
    3364:	f9 1f       	adc	r31, r25
    3366:	bd 01       	movw	r22, r26
    3368:	cf 01       	movw	r24, r30
    336a:	11 24       	eor	r1, r1
    336c:	08 95       	ret

0000336e <__udivmodqi4>:
    336e:	99 1b       	sub	r25, r25
    3370:	79 e0       	ldi	r23, 0x09	; 9
    3372:	04 c0       	rjmp	.+8      	; 0x337c <__udivmodqi4_ep>

00003374 <__udivmodqi4_loop>:
    3374:	99 1f       	adc	r25, r25
    3376:	96 17       	cp	r25, r22
    3378:	08 f0       	brcs	.+2      	; 0x337c <__udivmodqi4_ep>
    337a:	96 1b       	sub	r25, r22

0000337c <__udivmodqi4_ep>:
    337c:	88 1f       	adc	r24, r24
    337e:	7a 95       	dec	r23
    3380:	c9 f7       	brne	.-14     	; 0x3374 <__udivmodqi4_loop>
    3382:	80 95       	com	r24
    3384:	08 95       	ret

00003386 <__udivmodhi4>:
    3386:	aa 1b       	sub	r26, r26
    3388:	bb 1b       	sub	r27, r27
    338a:	51 e1       	ldi	r21, 0x11	; 17
    338c:	07 c0       	rjmp	.+14     	; 0x339c <__udivmodhi4_ep>

0000338e <__udivmodhi4_loop>:
    338e:	aa 1f       	adc	r26, r26
    3390:	bb 1f       	adc	r27, r27
    3392:	a6 17       	cp	r26, r22
    3394:	b7 07       	cpc	r27, r23
    3396:	10 f0       	brcs	.+4      	; 0x339c <__udivmodhi4_ep>
    3398:	a6 1b       	sub	r26, r22
    339a:	b7 0b       	sbc	r27, r23

0000339c <__udivmodhi4_ep>:
    339c:	88 1f       	adc	r24, r24
    339e:	99 1f       	adc	r25, r25
    33a0:	5a 95       	dec	r21
    33a2:	a9 f7       	brne	.-22     	; 0x338e <__udivmodhi4_loop>
    33a4:	80 95       	com	r24
    33a6:	90 95       	com	r25
    33a8:	bc 01       	movw	r22, r24
    33aa:	cd 01       	movw	r24, r26
    33ac:	08 95       	ret

000033ae <__udivmodsi4>:
    33ae:	a1 e2       	ldi	r26, 0x21	; 33
    33b0:	1a 2e       	mov	r1, r26
    33b2:	aa 1b       	sub	r26, r26
    33b4:	bb 1b       	sub	r27, r27
    33b6:	fd 01       	movw	r30, r26
    33b8:	0d c0       	rjmp	.+26     	; 0x33d4 <__udivmodsi4_ep>

000033ba <__udivmodsi4_loop>:
    33ba:	aa 1f       	adc	r26, r26
    33bc:	bb 1f       	adc	r27, r27
    33be:	ee 1f       	adc	r30, r30
    33c0:	ff 1f       	adc	r31, r31
    33c2:	a2 17       	cp	r26, r18
    33c4:	b3 07       	cpc	r27, r19
    33c6:	e4 07       	cpc	r30, r20
    33c8:	f5 07       	cpc	r31, r21
    33ca:	20 f0       	brcs	.+8      	; 0x33d4 <__udivmodsi4_ep>
    33cc:	a2 1b       	sub	r26, r18
    33ce:	b3 0b       	sbc	r27, r19
    33d0:	e4 0b       	sbc	r30, r20
    33d2:	f5 0b       	sbc	r31, r21

000033d4 <__udivmodsi4_ep>:
    33d4:	66 1f       	adc	r22, r22
    33d6:	77 1f       	adc	r23, r23
    33d8:	88 1f       	adc	r24, r24
    33da:	99 1f       	adc	r25, r25
    33dc:	1a 94       	dec	r1
    33de:	69 f7       	brne	.-38     	; 0x33ba <__udivmodsi4_loop>
    33e0:	60 95       	com	r22
    33e2:	70 95       	com	r23
    33e4:	80 95       	com	r24
    33e6:	90 95       	com	r25
    33e8:	9b 01       	movw	r18, r22
    33ea:	ac 01       	movw	r20, r24
    33ec:	bd 01       	movw	r22, r26
    33ee:	cf 01       	movw	r24, r30
    33f0:	08 95       	ret

000033f2 <__divmodsi4>:
    33f2:	97 fb       	bst	r25, 7
    33f4:	09 2e       	mov	r0, r25
    33f6:	05 26       	eor	r0, r21
    33f8:	0e d0       	rcall	.+28     	; 0x3416 <__divmodsi4_neg1>
    33fa:	57 fd       	sbrc	r21, 7
    33fc:	04 d0       	rcall	.+8      	; 0x3406 <__divmodsi4_neg2>
    33fe:	d7 df       	rcall	.-82     	; 0x33ae <__udivmodsi4>
    3400:	0a d0       	rcall	.+20     	; 0x3416 <__divmodsi4_neg1>
    3402:	00 1c       	adc	r0, r0
    3404:	38 f4       	brcc	.+14     	; 0x3414 <__divmodsi4_exit>

00003406 <__divmodsi4_neg2>:
    3406:	50 95       	com	r21
    3408:	40 95       	com	r20
    340a:	30 95       	com	r19
    340c:	21 95       	neg	r18
    340e:	3f 4f       	sbci	r19, 0xFF	; 255
    3410:	4f 4f       	sbci	r20, 0xFF	; 255
    3412:	5f 4f       	sbci	r21, 0xFF	; 255

00003414 <__divmodsi4_exit>:
    3414:	08 95       	ret

00003416 <__divmodsi4_neg1>:
    3416:	f6 f7       	brtc	.-4      	; 0x3414 <__divmodsi4_exit>
    3418:	90 95       	com	r25
    341a:	80 95       	com	r24
    341c:	70 95       	com	r23
    341e:	61 95       	neg	r22
    3420:	7f 4f       	sbci	r23, 0xFF	; 255
    3422:	8f 4f       	sbci	r24, 0xFF	; 255
    3424:	9f 4f       	sbci	r25, 0xFF	; 255
    3426:	08 95       	ret

00003428 <itoa>:
    3428:	fb 01       	movw	r30, r22
    342a:	9f 01       	movw	r18, r30
    342c:	e8 94       	clt
    342e:	42 30       	cpi	r20, 0x02	; 2
    3430:	c4 f0       	brlt	.+48     	; 0x3462 <itoa+0x3a>
    3432:	45 32       	cpi	r20, 0x25	; 37
    3434:	b4 f4       	brge	.+44     	; 0x3462 <itoa+0x3a>
    3436:	4a 30       	cpi	r20, 0x0A	; 10
    3438:	29 f4       	brne	.+10     	; 0x3444 <itoa+0x1c>
    343a:	97 fb       	bst	r25, 7
    343c:	1e f4       	brtc	.+6      	; 0x3444 <itoa+0x1c>
    343e:	90 95       	com	r25
    3440:	81 95       	neg	r24
    3442:	9f 4f       	sbci	r25, 0xFF	; 255
    3444:	64 2f       	mov	r22, r20
    3446:	77 27       	eor	r23, r23
    3448:	0e 94 c3 19 	call	0x3386	; 0x3386 <__udivmodhi4>
    344c:	80 5d       	subi	r24, 0xD0	; 208
    344e:	8a 33       	cpi	r24, 0x3A	; 58
    3450:	0c f0       	brlt	.+2      	; 0x3454 <itoa+0x2c>
    3452:	89 5d       	subi	r24, 0xD9	; 217
    3454:	81 93       	st	Z+, r24
    3456:	cb 01       	movw	r24, r22
    3458:	00 97       	sbiw	r24, 0x00	; 0
    345a:	a1 f7       	brne	.-24     	; 0x3444 <itoa+0x1c>
    345c:	16 f4       	brtc	.+4      	; 0x3462 <itoa+0x3a>
    345e:	5d e2       	ldi	r21, 0x2D	; 45
    3460:	51 93       	st	Z+, r21
    3462:	10 82       	st	Z, r1
    3464:	c9 01       	movw	r24, r18
    3466:	0c 94 6c 1a 	jmp	0x34d8	; 0x34d8 <strrev>

0000346a <utoa>:
    346a:	fb 01       	movw	r30, r22
    346c:	9f 01       	movw	r18, r30
    346e:	42 30       	cpi	r20, 0x02	; 2
    3470:	74 f0       	brlt	.+28     	; 0x348e <utoa+0x24>
    3472:	45 32       	cpi	r20, 0x25	; 37
    3474:	64 f4       	brge	.+24     	; 0x348e <utoa+0x24>
    3476:	64 2f       	mov	r22, r20
    3478:	77 27       	eor	r23, r23
    347a:	0e 94 c3 19 	call	0x3386	; 0x3386 <__udivmodhi4>
    347e:	80 5d       	subi	r24, 0xD0	; 208
    3480:	8a 33       	cpi	r24, 0x3A	; 58
    3482:	0c f0       	brlt	.+2      	; 0x3486 <utoa+0x1c>
    3484:	89 5d       	subi	r24, 0xD9	; 217
    3486:	81 93       	st	Z+, r24
    3488:	cb 01       	movw	r24, r22
    348a:	00 97       	sbiw	r24, 0x00	; 0
    348c:	a1 f7       	brne	.-24     	; 0x3476 <utoa+0xc>
    348e:	10 82       	st	Z, r1
    3490:	c9 01       	movw	r24, r18
    3492:	0c 94 6c 1a 	jmp	0x34d8	; 0x34d8 <strrev>

00003496 <__eerd_byte_m328p>:
    3496:	f9 99       	sbic	0x1f, 1	; 31
    3498:	fe cf       	rjmp	.-4      	; 0x3496 <__eerd_byte_m328p>
    349a:	92 bd       	out	0x22, r25	; 34
    349c:	81 bd       	out	0x21, r24	; 33
    349e:	f8 9a       	sbi	0x1f, 0	; 31
    34a0:	99 27       	eor	r25, r25
    34a2:	80 b5       	in	r24, 0x20	; 32
    34a4:	08 95       	ret

000034a6 <__eerd_word_m328p>:
    34a6:	a8 e1       	ldi	r26, 0x18	; 24
    34a8:	b0 e0       	ldi	r27, 0x00	; 0
    34aa:	42 e0       	ldi	r20, 0x02	; 2
    34ac:	50 e0       	ldi	r21, 0x00	; 0
    34ae:	0c 94 7e 1a 	jmp	0x34fc	; 0x34fc <__eerd_blraw_m328p>

000034b2 <__eewr_byte_m328p>:
    34b2:	26 2f       	mov	r18, r22

000034b4 <__eewr_r18_m328p>:
    34b4:	f9 99       	sbic	0x1f, 1	; 31
    34b6:	fe cf       	rjmp	.-4      	; 0x34b4 <__eewr_r18_m328p>
    34b8:	1f ba       	out	0x1f, r1	; 31
    34ba:	92 bd       	out	0x22, r25	; 34
    34bc:	81 bd       	out	0x21, r24	; 33
    34be:	20 bd       	out	0x20, r18	; 32
    34c0:	0f b6       	in	r0, 0x3f	; 63
    34c2:	f8 94       	cli
    34c4:	fa 9a       	sbi	0x1f, 2	; 31
    34c6:	f9 9a       	sbi	0x1f, 1	; 31
    34c8:	0f be       	out	0x3f, r0	; 63
    34ca:	01 96       	adiw	r24, 0x01	; 1
    34cc:	08 95       	ret

000034ce <__eewr_word_m328p>:
    34ce:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <__eewr_byte_m328p>
    34d2:	27 2f       	mov	r18, r23
    34d4:	0c 94 5a 1a 	jmp	0x34b4	; 0x34b4 <__eewr_r18_m328p>

000034d8 <strrev>:
    34d8:	dc 01       	movw	r26, r24
    34da:	fc 01       	movw	r30, r24
    34dc:	67 2f       	mov	r22, r23
    34de:	71 91       	ld	r23, Z+
    34e0:	77 23       	and	r23, r23
    34e2:	e1 f7       	brne	.-8      	; 0x34dc <strrev+0x4>
    34e4:	32 97       	sbiw	r30, 0x02	; 2
    34e6:	04 c0       	rjmp	.+8      	; 0x34f0 <strrev+0x18>
    34e8:	7c 91       	ld	r23, X
    34ea:	6d 93       	st	X+, r22
    34ec:	70 83       	st	Z, r23
    34ee:	62 91       	ld	r22, -Z
    34f0:	ae 17       	cp	r26, r30
    34f2:	bf 07       	cpc	r27, r31
    34f4:	c8 f3       	brcs	.-14     	; 0x34e8 <strrev+0x10>
    34f6:	08 95       	ret

000034f8 <__eerd_block_m328p>:
    34f8:	dc 01       	movw	r26, r24
    34fa:	cb 01       	movw	r24, r22

000034fc <__eerd_blraw_m328p>:
    34fc:	fc 01       	movw	r30, r24
    34fe:	f9 99       	sbic	0x1f, 1	; 31
    3500:	fe cf       	rjmp	.-4      	; 0x34fe <__eerd_blraw_m328p+0x2>
    3502:	06 c0       	rjmp	.+12     	; 0x3510 <__eerd_blraw_m328p+0x14>
    3504:	f2 bd       	out	0x22, r31	; 34
    3506:	e1 bd       	out	0x21, r30	; 33
    3508:	f8 9a       	sbi	0x1f, 0	; 31
    350a:	31 96       	adiw	r30, 0x01	; 1
    350c:	00 b4       	in	r0, 0x20	; 32
    350e:	0d 92       	st	X+, r0
    3510:	41 50       	subi	r20, 0x01	; 1
    3512:	50 40       	sbci	r21, 0x00	; 0
    3514:	b8 f7       	brcc	.-18     	; 0x3504 <__eerd_blraw_m328p+0x8>
    3516:	08 95       	ret

00003518 <_exit>:
    3518:	f8 94       	cli

0000351a <__stop_program>:
    351a:	ff cf       	rjmp	.-2      	; 0x351a <__stop_program>
