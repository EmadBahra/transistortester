
TransistorTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00003c2e  00003ce2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c2e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000084  00800102  00800102  00003ce4  2**0
                  ALLOC
  3 .eeprom       000001cb  00810000  00810000  00003ce4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         00000dbc  00000000  00000000  00003eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001d2  00000000  00000000  00004c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000000a0  00000000  00000000  00004e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000006a7  00000000  00000000  00004ede  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002510  00000000  00000000  00005585  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000696  00000000  00000000  00007a95  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003237  00000000  00000000  0000812b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000200  00000000  00000000  0000b364  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000082a  00000000  00000000  0000b564  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001178  00000000  00000000  0000bd8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 000001af  00000000  00000000  0000cf06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__ctors_end>
       4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
       8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
       c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      10:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      14:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      18:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      1c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      20:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      24:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      28:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      2c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      30:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      34:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      38:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      3c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      40:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      44:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      48:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      4c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      50:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      54:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      58:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      5c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      60:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      64:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>

00000068 <LogTab>:
      68:	00 01 02 03 04 05 06 07 08 09 0b 0c 0d 0e 0f 10     ................
      78:	11 13 14 15 16 18 19 1a 1b 1d 1e 1f 21 22 24 25     ............!"$%
      88:	27 28 2a 2b 2d 2e 30 31 33 35 36 38 3a 3c 3e 3f     '(*+-.013568:<>?
      98:	41 43 45 47 49 4c 4e 50 52 54 57 59 5c 5e 61 63     ACEGILNPRTWY\^ac
      a8:	66 69 6c 6f 72 75 78 7c 7f 83 87 8b 8f 93 97 9c     filorux|........
      b8:	a1 a6 ab b1 b7 be c5 cc d4 dd e6 f1                 ............

000000c4 <SELFTEST>:
      c4:	53 65 6c 66 74 65 73 74 20 6d 6f 64 65 2e 2e 00     Selftest mode...

000000d4 <RELPROBE>:
      d4:	69 73 6f 6c 61 74 65 20 70 72 6f 62 65 00           isolate probe.

000000e2 <URefT>:
      e2:	52 65 66 3d 00                                      Ref=.

000000e7 <RHfakt>:
      e7:	52 48 66 3d 00                                      RHf=.

000000ec <RH1L>:
      ec:	52 48 2d 00                                         RH-.

000000f0 <RH1H>:
      f0:	52 48 2b 00                                         RH+.

000000f4 <RLRL>:
      f4:	2b 52 4c 2d 20 31 32 20 31 33 20 32 33 00           +RL- 12 13 23.

00000102 <RHRH>:
     102:	2b 52 48 2d 20 31 32 20 31 33 20 32 33 00           +RH- 12 13 23.

00000110 <T50HZ>:
     110:	20 35 30 48 7a 00                                    50Hz.

00000116 <__ctors_end>:
     116:	11 24       	eor	r1, r1
     118:	1f be       	out	0x3f, r1	; 63
     11a:	cf ef       	ldi	r28, 0xFF	; 255
     11c:	d4 e0       	ldi	r29, 0x04	; 4
     11e:	de bf       	out	0x3e, r29	; 62
     120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
     122:	11 e0       	ldi	r17, 0x01	; 1
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b1 e0       	ldi	r27, 0x01	; 1
     128:	ee e2       	ldi	r30, 0x2E	; 46
     12a:	fc e3       	ldi	r31, 0x3C	; 60
     12c:	02 c0       	rjmp	.+4      	; 0x132 <__do_copy_data+0x10>
     12e:	05 90       	lpm	r0, Z+
     130:	0d 92       	st	X+, r0
     132:	a2 30       	cpi	r26, 0x02	; 2
     134:	b1 07       	cpc	r27, r17
     136:	d9 f7       	brne	.-10     	; 0x12e <__do_copy_data+0xc>

00000138 <__do_clear_bss>:
     138:	11 e0       	ldi	r17, 0x01	; 1
     13a:	a2 e0       	ldi	r26, 0x02	; 2
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	01 c0       	rjmp	.+2      	; 0x142 <.do_clear_bss_start>

00000140 <.do_clear_bss_loop>:
     140:	1d 92       	st	X+, r1

00000142 <.do_clear_bss_start>:
     142:	a6 38       	cpi	r26, 0x86	; 134
     144:	b1 07       	cpc	r27, r17
     146:	e1 f7       	brne	.-8      	; 0x140 <.do_clear_bss_loop>
     148:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <main>
     14c:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <_exit>

00000150 <__bad_interrupt>:
     150:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000154 <lcd_data>:
void lcd_space(void) {
   lcd_data(' ');
}

// sends data byte to the LCD 
void lcd_data(unsigned char temp1) {
     154:	1f 93       	push	r17
     156:	18 2f       	mov	r17, r24
 lcd_write_data(temp1);		// set RS to 1
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	61 2f       	mov	r22, r17
     15c:	0e 94 77 01 	call	0x2ee	; 0x2ee <_lcd_hw_write>
     160:	0e 94 87 14 	call	0x290e	; 0x290e <wait50us>
#ifdef WITH_UART
 switch(temp1) {
     164:	18 30       	cpi	r17, 0x08	; 8
     166:	48 f4       	brcc	.+18     	; 0x17a <lcd_data+0x26>
     168:	16 30       	cpi	r17, 0x06	; 6
     16a:	d0 f4       	brcc	.+52     	; 0x1a0 <lcd_data+0x4c>
     16c:	12 30       	cpi	r17, 0x02	; 2
     16e:	71 f0       	breq	.+28     	; 0x18c <lcd_data+0x38>
     170:	13 30       	cpi	r17, 0x03	; 3
     172:	89 f0       	breq	.+34     	; 0x196 <lcd_data+0x42>
     174:	11 30       	cpi	r17, 0x01	; 1
     176:	d1 f4       	brne	.+52     	; 0x1ac <lcd_data+0x58>
     178:	07 c0       	rjmp	.+14     	; 0x188 <lcd_data+0x34>
     17a:	14 3e       	cpi	r17, 0xE4	; 228
     17c:	a9 f0       	breq	.+42     	; 0x1a8 <lcd_data+0x54>
     17e:	14 3f       	cpi	r17, 0xF4	; 244
     180:	c1 f0       	breq	.+48     	; 0x1b2 <lcd_data+0x5e>
     182:	11 3e       	cpi	r17, 0xE1	; 225
     184:	99 f4       	brne	.+38     	; 0x1ac <lcd_data+0x58>
     186:	0e c0       	rjmp	.+28     	; 0x1a4 <lcd_data+0x50>
    case LCD_CHAR_DIODE1:
    	uart_putc('>');
     188:	8e e3       	ldi	r24, 0x3E	; 62
     18a:	06 c0       	rjmp	.+12     	; 0x198 <lcd_data+0x44>
    	uart_putc('|');
    	break;
    case LCD_CHAR_DIODE2:
    	uart_putc('|');
     18c:	8c e7       	ldi	r24, 0x7C	; 124
     18e:	0e 94 4d 14 	call	0x289a	; 0x289a <uart_putc>
    	uart_putc('<');
     192:	8c e3       	ldi	r24, 0x3C	; 60
     194:	0c c0       	rjmp	.+24     	; 0x1ae <lcd_data+0x5a>
    	break;
    case LCD_CHAR_CAP:
    	uart_putc('|');
     196:	8c e7       	ldi	r24, 0x7C	; 124
     198:	0e 94 4d 14 	call	0x289a	; 0x289a <uart_putc>
    	uart_putc('|');
     19c:	8c e7       	ldi	r24, 0x7C	; 124
     19e:	07 c0       	rjmp	.+14     	; 0x1ae <lcd_data+0x5a>
    	break;
    case LCD_CHAR_RESIS1:
    case LCD_CHAR_RESIS2:
    	uart_putc('R');
     1a0:	82 e5       	ldi	r24, 0x52	; 82
     1a2:	05 c0       	rjmp	.+10     	; 0x1ae <lcd_data+0x5a>
    	break;
    case 225:	//ä
    	uart_putc('ä');
     1a4:	84 ee       	ldi	r24, 0xE4	; 228
     1a6:	03 c0       	rjmp	.+6      	; 0x1ae <lcd_data+0x5a>
    	break;
    case 228:	//µ
    	uart_putc('µ');
     1a8:	85 eb       	ldi	r24, 0xB5	; 181
     1aa:	01 c0       	rjmp	.+2      	; 0x1ae <lcd_data+0x5a>
    	break;
    case 244:	//Omega
    	break;
    default:
    	uart_putc(temp1);
     1ac:	81 2f       	mov	r24, r17
     1ae:	0e 94 4d 14 	call	0x289a	; 0x289a <uart_putc>
 }
#endif
}
     1b2:	1f 91       	pop	r17
     1b4:	08 95       	ret

000001b6 <lcd_space>:
   lcd_data(temp + '1');
}

// send space character to LCD
void lcd_space(void) {
   lcd_data(' ');
     1b6:	80 e2       	ldi	r24, 0x20	; 32
     1b8:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
}
     1bc:	08 95       	ret

000001be <lcd_testpin>:
 

// sends numeric character (Pin Number) to the LCD 
// from binary 0 we send ASCII 1 ....
void lcd_testpin(unsigned char temp) {
   lcd_data(temp + '1');
     1be:	8f 5c       	subi	r24, 0xCF	; 207
     1c0:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
}
     1c4:	08 95       	ret

000001c6 <uart_newline>:
}


#ifdef WITH_UART
void uart_newline(void) {
   uart_putc('\r');
     1c6:	8d e0       	ldi	r24, 0x0D	; 13
     1c8:	0e 94 4d 14 	call	0x289a	; 0x289a <uart_putc>
   uart_putc('\n');
     1cc:	8a e0       	ldi	r24, 0x0A	; 10
     1ce:	0e 94 4d 14 	call	0x289a	; 0x289a <uart_putc>
}
     1d2:	08 95       	ret

000001d4 <lcd_command>:
#endif
}
 
// sends a command to the LCD
 
void lcd_command(unsigned char temp1) {
     1d4:	1f 93       	push	r17
     1d6:	18 2f       	mov	r17, r24
        lcd_write_cmd(temp1);		// set RS to 0
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	61 2f       	mov	r22, r17
     1dc:	0e 94 77 01 	call	0x2ee	; 0x2ee <_lcd_hw_write>
     1e0:	0e 94 87 14 	call	0x290e	; 0x290e <wait50us>
#ifdef WITH_UART
	if((temp1 == 0x80) || (temp1 == 0xC0)) {
     1e4:	10 38       	cpi	r17, 0x80	; 128
     1e6:	11 f0       	breq	.+4      	; 0x1ec <lcd_command+0x18>
     1e8:	10 3c       	cpi	r17, 0xC0	; 192
     1ea:	11 f4       	brne	.+4      	; 0x1f0 <lcd_command+0x1c>
		uart_newline();
     1ec:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <uart_newline>
	}
#endif
}
     1f0:	1f 91       	pop	r17
     1f2:	08 95       	ret

000001f4 <lcd_clear>:
}
 
// send the command to clear the display 
 
void lcd_clear(void) {
   lcd_command(CLEAR_DISPLAY);
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
   wait10ms();
     1fa:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <wait10ms>
#ifdef WITH_UART
   uart_newline();
     1fe:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <uart_newline>
#endif
   lcd_line1();			// set cursor to Line1 Column 1, (only for OLED-Display)
     202:	80 e8       	ldi	r24, 0x80	; 128
     204:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
}
     208:	08 95       	ret

0000020a <lcd_init>:
 
// Initialise: 
// Must be called first .
 
void lcd_init(void) {
   wait30ms();
     20a:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <wait30ms>
   // to initialise, send 3 times to be shure to be in 8 Bit mode
   lcd_write_init(1);
     20e:	80 e8       	ldi	r24, 0x80	; 128
     210:	60 e3       	ldi	r22, 0x30	; 48
     212:	0e 94 77 01 	call	0x2ee	; 0x2ee <_lcd_hw_write>
   wait5ms();
     216:	0e 94 7d 14 	call	0x28fa	; 0x28fa <wait5ms>
   
   lcd_write_init(1);
     21a:	80 e8       	ldi	r24, 0x80	; 128
     21c:	60 e3       	ldi	r22, 0x30	; 48
     21e:	0e 94 77 01 	call	0x2ee	; 0x2ee <_lcd_hw_write>
   wait1ms();
     222:	0e 94 81 14 	call	0x2902	; 0x2902 <wait1ms>

   lcd_write_init(1);
     226:	80 e8       	ldi	r24, 0x80	; 128
     228:	60 e3       	ldi	r22, 0x30	; 48
     22a:	0e 94 77 01 	call	0x2ee	; 0x2ee <_lcd_hw_write>
   wait1ms();
     22e:	0e 94 81 14 	call	0x2902	; 0x2902 <wait1ms>

   lcd_write_init(0);		// switch to 4 Bit mode
     232:	80 e8       	ldi	r24, 0x80	; 128
     234:	60 e2       	ldi	r22, 0x20	; 32
     236:	0e 94 77 01 	call	0x2ee	; 0x2ee <_lcd_hw_write>
   wait10ms();
     23a:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <wait10ms>

   // 4Bit / 2 rows / 5x7
   lcd_command(CMD_SetIFOptions | 0x08);
     23e:	88 e2       	ldi	r24, 0x28	; 40
     240:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>

   // Display on / Cursor off / no Blinking
   lcd_command(CMD_SetDisplayAndCursor | 0x04);
     244:	8c e0       	ldi	r24, 0x0C	; 12
     246:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>

   // increment / no Scroll    
   lcd_command(CMD_SetEntryMode | 0x02);	
     24a:	86 e0       	ldi	r24, 0x06	; 6
     24c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
   lcd_clear();
     250:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_clear>
}
     254:	08 95       	ret

00000256 <lcd_string>:
#endif
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
     256:	ef 92       	push	r14
     258:	ff 92       	push	r15
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	e8 2e       	mov	r14, r24
     260:	e7 01       	movw	r28, r14
     262:	7e 01       	movw	r14, r28
     264:	f9 2e       	mov	r15, r25
     266:	e7 01       	movw	r28, r14
    while(*data) {
     268:	02 c0       	rjmp	.+4      	; 0x26e <lcd_string+0x18>
        lcd_data(*data);
     26a:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
    while(*data) {
     26e:	89 91       	ld	r24, Y+
     270:	88 23       	and	r24, r24
     272:	d9 f7       	brne	.-10     	; 0x26a <lcd_string+0x14>
        lcd_data(*data);
        data++;
    }
}
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	ff 90       	pop	r15
     27a:	ef 90       	pop	r14
     27c:	08 95       	ret

0000027e <lcd_pgm_string>:

#ifdef use_lcd_pgm
//Load string from PGM  and send to LCD 
void lcd_pgm_string(const unsigned char *data) {
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = pgm_read_byte(data);
     284:	fe 01       	movw	r30, r28
     286:	84 91       	lpm	r24, Z+
      if((cc==0) || (cc==128)) {
     288:	88 23       	and	r24, r24
     28a:	31 f0       	breq	.+12     	; 0x298 <lcd_pgm_string+0x1a>
     28c:	80 38       	cpi	r24, 0x80	; 128
     28e:	21 f0       	breq	.+8      	; 0x298 <lcd_pgm_string+0x1a>
         return;
      }
      lcd_data(cc);
     290:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
      data++;
     294:	21 96       	adiw	r28, 0x01	; 1
   }
     296:	f6 cf       	rjmp	.-20     	; 0x284 <lcd_pgm_string+0x6>
}
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	08 95       	ret

0000029e <lcd_fix_string>:
#endif

//Load string from PGM or EEprom and send to LCD 
void lcd_fix_string(const unsigned char *data) {
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = MEM_read_byte(data);
     2a4:	ce 01       	movw	r24, r28
     2a6:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__eerd_byte_m168>
      if((cc==0) || (cc==128)) {
     2aa:	88 23       	and	r24, r24
     2ac:	31 f0       	breq	.+12     	; 0x2ba <lcd_fix_string+0x1c>
     2ae:	80 38       	cpi	r24, 0x80	; 128
     2b0:	21 f0       	breq	.+8      	; 0x2ba <lcd_fix_string+0x1c>
         return;
      }
      lcd_data(cc);
     2b2:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
      data++;
     2b6:	21 96       	adiw	r28, 0x01	; 1
   }
     2b8:	f5 cf       	rjmp	.-22     	; 0x2a4 <lcd_fix_string+0x6>
}
     2ba:	df 91       	pop	r29
     2bc:	cf 91       	pop	r28
     2be:	08 95       	ret

000002c0 <lcd_fix_customchar>:

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	8c 01       	movw	r16, r24
     2ca:	c0 e0       	ldi	r28, 0x00	; 0
     2cc:	d0 e0       	ldi	r29, 0x00	; 0
    for(uint8_t i=0;i<8;i++) {
        lcd_data(MEM_read_byte(chardata));
     2ce:	c8 01       	movw	r24, r16
     2d0:	8c 0f       	add	r24, r28
     2d2:	9d 1f       	adc	r25, r29
     2d4:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__eerd_byte_m168>
     2d8:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
     2dc:	21 96       	adiw	r28, 0x01	; 1
   }
}

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
    for(uint8_t i=0;i<8;i++) {
     2de:	c8 30       	cpi	r28, 0x08	; 8
     2e0:	d1 05       	cpc	r29, r1
     2e2:	a9 f7       	brne	.-22     	; 0x2ce <lcd_fix_customchar+0xe>
        lcd_data(MEM_read_byte(chardata));
        chardata++;
    }
}
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	08 95       	ret

000002ee <_lcd_hw_write>:
     2ee:	5d 9a       	sbi	0x0b, 5	; 11
     2f0:	55 9a       	sbi	0x0a, 5	; 10
     2f2:	5c 98       	cbi	0x0b, 4	; 11
     2f4:	54 9a       	sbi	0x0a, 4	; 10
     2f6:	80 fd       	sbrc	r24, 0
     2f8:	5c 9a       	sbi	0x0b, 4	; 11
     2fa:	58 98       	cbi	0x0b, 0	; 11
     2fc:	59 98       	cbi	0x0b, 1	; 11
     2fe:	5a 98       	cbi	0x0b, 2	; 11
     300:	5b 98       	cbi	0x0b, 3	; 11
     302:	64 fd       	sbrc	r22, 4
     304:	58 9a       	sbi	0x0b, 0	; 11
     306:	50 9a       	sbi	0x0a, 0	; 10
     308:	65 fd       	sbrc	r22, 5
     30a:	59 9a       	sbi	0x0b, 1	; 11
     30c:	51 9a       	sbi	0x0a, 1	; 10
     30e:	66 fd       	sbrc	r22, 6
     310:	5a 9a       	sbi	0x0b, 2	; 11
     312:	52 9a       	sbi	0x0a, 2	; 10
     314:	67 fd       	sbrc	r22, 7
     316:	5b 9a       	sbi	0x0b, 3	; 11
     318:	53 9a       	sbi	0x0a, 3	; 10
     31a:	00 00       	nop
     31c:	5d 98       	cbi	0x0b, 5	; 11
     31e:	0e 94 90 14 	call	0x2920	; 0x2920 <wait1us>
     322:	87 fd       	sbrc	r24, 7
     324:	11 c0       	rjmp	.+34     	; 0x348 <_lcd_hw_write_exit>
     326:	5d 9a       	sbi	0x0b, 5	; 11
     328:	58 98       	cbi	0x0b, 0	; 11
     32a:	59 98       	cbi	0x0b, 1	; 11
     32c:	5a 98       	cbi	0x0b, 2	; 11
     32e:	5b 98       	cbi	0x0b, 3	; 11
     330:	60 fd       	sbrc	r22, 0
     332:	58 9a       	sbi	0x0b, 0	; 11
     334:	61 fd       	sbrc	r22, 1
     336:	59 9a       	sbi	0x0b, 1	; 11
     338:	62 fd       	sbrc	r22, 2
     33a:	5a 9a       	sbi	0x0b, 2	; 11
     33c:	63 fd       	sbrc	r22, 3
     33e:	5b 9a       	sbi	0x0b, 3	; 11
     340:	00 00       	nop
     342:	5d 98       	cbi	0x0b, 5	; 11
     344:	0e 94 90 14 	call	0x2920	; 0x2920 <wait1us>

00000348 <_lcd_hw_write_exit>:
     348:	08 95       	ret

0000034a <ChargePin10ms>:
 }

//******************************************************************
#include "CheckPins.c"

void ChargePin10ms(uint8_t PinToCharge, uint8_t ChargeDirection) {
     34a:	df 93       	push	r29
     34c:	cf 93       	push	r28
     34e:	0f 92       	push	r0
     350:	cd b7       	in	r28, 0x3d	; 61
     352:	de b7       	in	r29, 0x3e	; 62
   //Will be used by discharge of MOSFET Gates or to load big capacities.
   //Parameters:
   //PinToCharge: specifies the pin as mask for R-Port
   //ChargeDirection: 0 = switch to GND (N-Kanal-FET), 1= switch to VCC(P-Kanal-FET)

   if(ChargeDirection&1) {
     354:	60 ff       	sbrs	r22, 0
     356:	03 c0       	rjmp	.+6      	; 0x35e <ChargePin10ms+0x14>
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
     358:	95 b1       	in	r25, 0x05	; 5
     35a:	98 2b       	or	r25, r24
     35c:	04 c0       	rjmp	.+8      	; 0x366 <ChargePin10ms+0x1c>
   } else {
      R_PORT &= ~PinToCharge; // or 0 (GND)
     35e:	25 b1       	in	r18, 0x05	; 5
     360:	98 2f       	mov	r25, r24
     362:	90 95       	com	r25
     364:	92 23       	and	r25, r18
     366:	95 b9       	out	0x05, r25	; 5
   }
   R_DDR |= PinToCharge;		//switch Pin to output, across R to GND or VCC
     368:	94 b1       	in	r25, 0x04	; 4
     36a:	98 2b       	or	r25, r24
     36c:	94 b9       	out	0x04, r25	; 4
   wait10ms();
     36e:	89 83       	std	Y+1, r24	; 0x01
     370:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <wait10ms>
   // switch back Input, no current
   R_DDR &= ~PinToCharge;	// switch back to input
     374:	94 b1       	in	r25, 0x04	; 4
     376:	89 81       	ldd	r24, Y+1	; 0x01
     378:	80 95       	com	r24
     37a:	98 23       	and	r25, r24
     37c:	94 b9       	out	0x04, r25	; 4
   R_PORT &= ~PinToCharge;	// no Pull up
     37e:	95 b1       	in	r25, 0x05	; 5
     380:	98 23       	and	r25, r24
     382:	95 b9       	out	0x05, r25	; 5
}
     384:	0f 90       	pop	r0
     386:	cf 91       	pop	r28
     388:	df 91       	pop	r29
     38a:	08 95       	ret

0000038c <CheckPins>:
//******************************************************************
void CheckPins(uint8_t HighPin, uint8_t LowPin, uint8_t TristatePin)
  {
     38c:	2f 92       	push	r2
     38e:	3f 92       	push	r3
     390:	4f 92       	push	r4
     392:	5f 92       	push	r5
     394:	6f 92       	push	r6
     396:	7f 92       	push	r7
     398:	8f 92       	push	r8
     39a:	9f 92       	push	r9
     39c:	af 92       	push	r10
     39e:	bf 92       	push	r11
     3a0:	cf 92       	push	r12
     3a2:	df 92       	push	r13
     3a4:	ef 92       	push	r14
     3a6:	ff 92       	push	r15
     3a8:	0f 93       	push	r16
     3aa:	1f 93       	push	r17
     3ac:	df 93       	push	r29
     3ae:	cf 93       	push	r28
     3b0:	cd b7       	in	r28, 0x3d	; 61
     3b2:	de b7       	in	r29, 0x3e	; 62
     3b4:	66 97       	sbiw	r28, 0x16	; 22
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	f8 94       	cli
     3ba:	de bf       	out	0x3e, r29	; 62
     3bc:	0f be       	out	0x3f, r0	; 63
     3be:	cd bf       	out	0x3d, r28	; 61
     3c0:	18 2f       	mov	r17, r24
     3c2:	36 2e       	mov	r3, r22
     3c4:	24 2e       	mov	r2, r20
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
     3c6:	a8 95       	wdr
//  #define RR680MI resis680mi
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = MEM_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
     3c8:	a6 2e       	mov	r10, r22
     3ca:	bb 24       	eor	r11, r11
     3cc:	c5 01       	movw	r24, r10
     3ce:	81 55       	subi	r24, 0x51	; 81
     3d0:	9e 4f       	sbci	r25, 0xFE	; 254
     3d2:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__eerd_byte_m168>
     3d6:	8a 83       	std	Y+2, r24	; 0x02
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
  TriPinRL = MEM_read_byte(&PinRLtab[TristatePin]);	// intruction for TristatePin R_L
     3d8:	82 2d       	mov	r24, r2
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	81 55       	subi	r24, 0x51	; 81
     3de:	9e 4f       	sbci	r25, 0xFE	; 254
     3e0:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__eerd_byte_m168>
     3e4:	d8 2e       	mov	r13, r24
  TriPinRH = TriPinRL + TriPinRL;			// intruction for TristatePin R_H
     3e6:	08 2f       	mov	r16, r24
     3e8:	00 0f       	add	r16, r16
  HiPinRL = MEM_read_byte(&PinRLtab[HighPin]);		// intruction for HighPin R_L
     3ea:	e1 2e       	mov	r14, r17
     3ec:	ff 24       	eor	r15, r15
     3ee:	c7 01       	movw	r24, r14
     3f0:	81 55       	subi	r24, 0x51	; 81
     3f2:	9e 4f       	sbci	r25, 0xFE	; 254
     3f4:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__eerd_byte_m168>
     3f8:	c8 2e       	mov	r12, r24
  HiPinRH = HiPinRL + HiPinRL;				// intruction for HighPin R_H
     3fa:	28 2f       	mov	r18, r24
     3fc:	22 0f       	add	r18, r18
     3fe:	28 87       	std	Y+8, r18	; 0x08

  HiADCp = MEM_read_byte(&PinADCtab[HighPin]);		// intruction for ADC High-Pin 
     400:	c7 01       	movw	r24, r14
     402:	8e 54       	subi	r24, 0x4E	; 78
     404:	9e 4f       	sbci	r25, 0xFE	; 254
     406:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__eerd_byte_m168>
     40a:	89 83       	std	Y+1, r24	; 0x01
  LoADCp = MEM_read_byte(&PinADCtab[LowPin]);		// intruction for ADC Low-Pin
     40c:	c5 01       	movw	r24, r10
     40e:	8e 54       	subi	r24, 0x4E	; 78
     410:	9e 4f       	sbci	r25, 0xFE	; 254
     412:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__eerd_byte_m168>
  HiADCm = HiADCp | TXD_MSK;
     416:	39 81       	ldd	r19, Y+1	; 0x01
     418:	38 60       	ori	r19, 0x08	; 8
     41a:	39 83       	std	Y+1, r19	; 0x01
  HiADCp |= TXD_VAL;
  LoADCm = LoADCp | TXD_MSK;
     41c:	88 60       	ori	r24, 0x08	; 8
     41e:	8b 83       	std	Y+3, r24	; 0x03
  LoADCp |= TXD_VAL;

  //setting of Pins 
  R_PORT = 0;				//resistor-Port outputs to 0
     420:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//Low-Pin to output and across R_L to GND
     422:	8a 81       	ldd	r24, Y+2	; 0x02
     424:	84 b9       	out	0x04, r24	; 4
  ADC_DDR = HiADCm;		//High-Pin to output
     426:	37 b9       	out	0x07, r19	; 7
  ADC_PORT = HiADCp;		//High-Pin fix to Vcc
     428:	38 b9       	out	0x08, r19	; 8
  //for some MOSFET the gate (TristatePin) must be discharged
  ChargePin10ms(TriPinRL,0);		//discharge for N-Kanal
     42a:	8d 2d       	mov	r24, r13
     42c:	60 e0       	ldi	r22, 0x00	; 0
     42e:	0e 94 a5 01 	call	0x34a	; 0x34a <ChargePin10ms>
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin 
     432:	83 2d       	mov	r24, r3
     434:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
     438:	9a 87       	std	Y+10, r25	; 0x0a
     43a:	89 87       	std	Y+9, r24	; 0x09
  if(adc.lp_otr >= 977) {		//no current now? 
     43c:	a3 e0       	ldi	r26, 0x03	; 3
     43e:	81 3d       	cpi	r24, 0xD1	; 209
     440:	9a 07       	cpc	r25, r26
     442:	48 f0       	brcs	.+18     	; 0x456 <CheckPins+0xca>
     ChargePin10ms(TriPinRL,1);	 	//else: discharge for P-channel (Gate to VCC)
     444:	8d 2d       	mov	r24, r13
     446:	61 e0       	ldi	r22, 0x01	; 1
     448:	0e 94 a5 01 	call	0x34a	; 0x34a <ChargePin10ms>
     adc.lp_otr = ReadADC(LowPin);	//read voltage of Low-Pin again
     44c:	83 2d       	mov	r24, r3
     44e:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
     452:	9a 87       	std	Y+10, r25	; 0x0a
     454:	89 87       	std	Y+9, r24	; 0x09
  lcd_line2();
  lcd_clear_line();
  lcd_line2();
#endif

  if(adc.lp_otr > 92) {  //there is some current without TristatePin current 
     456:	e9 85       	ldd	r30, Y+9	; 0x09
     458:	fa 85       	ldd	r31, Y+10	; 0x0a
     45a:	ed 35       	cpi	r30, 0x5D	; 93
     45c:	f1 05       	cpc	r31, r1
     45e:	08 f4       	brcc	.+2      	; 0x462 <CheckPins+0xd6>
     460:	aa c0       	rjmp	.+340    	; 0x5b6 <__stack+0xb7>
     lcd_testpin(HighPin);
     lcd_space();
     wait1s();
#endif
     //Test if N-JFET or if self-conducting N-MOSFET
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
     462:	8a 81       	ldd	r24, Y+2	; 0x02
     464:	80 2b       	or	r24, r16
     466:	84 b9       	out	0x04, r24	; 4
     adc.lp1 = W20msReadADC(LowPin);	//measure voltage at the assumed Source 
     468:	83 2d       	mov	r24, r3
     46a:	0e 94 2e 1a 	call	0x345c	; 0x345c <W20msReadADC>
     46e:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     470:	82 2d       	mov	r24, r2
     472:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
     476:	7c 01       	movw	r14, r24
     R_PORT = TriPinRH;			//switch R_H for Tristate-Pin (probably Gate) to VCC
     478:	05 b9       	out	0x05, r16	; 5
     adc.lp2 = W20msReadADC(LowPin);	//measure voltage at the assumed Source again
     47a:	83 2d       	mov	r24, r3
     47c:	0e 94 2e 1a 	call	0x345c	; 0x345c <W20msReadADC>
     //If it is a self-conducting MOSFET or JFET, then must be: adc.lp2 > adc.lp1 
     if(adc.lp2>(adc.lp1+488)) {
     480:	95 01       	movw	r18, r10
     482:	28 51       	subi	r18, 0x18	; 24
     484:	3e 4f       	sbci	r19, 0xFE	; 254
     486:	28 17       	cp	r18, r24
     488:	39 07       	cpc	r19, r25
     48a:	08 f0       	brcs	.+2      	; 0x48e <CheckPins+0x102>
     48c:	40 c0       	rjmp	.+128    	; 0x50e <__stack+0xf>
        //measure voltage at the  Gate, differ between MOSFET and JFET
        ADC_PORT = TXD_VAL;
     48e:	88 e0       	ldi	r24, 0x08	; 8
     490:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = LoADCm;	//Low-Pin fix to GND
     492:	fb 81       	ldd	r31, Y+3	; 0x03
     494:	f7 b9       	out	0x07, r31	; 7
        R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     496:	80 2f       	mov	r24, r16
     498:	8c 29       	or	r24, r12
     49a:	84 b9       	out	0x04, r24	; 4
        R_PORT = TriPinRH | HiPinRL;	//switch R_L for High-Pin to VCC
     49c:	85 b9       	out	0x05, r24	; 5
        adc.lp2 = W20msReadADC(TristatePin); //read voltage of assumed Gate 
     49e:	82 2d       	mov	r24, r2
     4a0:	0e 94 2e 1a 	call	0x345c	; 0x345c <W20msReadADC>
        if(adc.lp2>3911) {  //MOSFET
     4a4:	2f e0       	ldi	r18, 0x0F	; 15
     4a6:	88 34       	cpi	r24, 0x48	; 72
     4a8:	92 07       	cpc	r25, r18
     4aa:	28 f0       	brcs	.+10     	; 0x4b6 <CheckPins+0x12a>
           PartFound = PART_FET;	//N-Kanal-MOSFET
     4ac:	83 e0       	ldi	r24, 0x03	; 3
     4ae:	80 93 09 01 	sts	0x0109, r24
           PartMode = PART_MODE_N_D_MOS; //Depletion-MOSFET
     4b2:	84 e0       	ldi	r24, 0x04	; 4
     4b4:	04 c0       	rjmp	.+8      	; 0x4be <CheckPins+0x132>
        } else {  //JFET (pn-passage between Gate and Source is conducting )
           PartFound = PART_FET;	//N-Kanal-JFET
     4b6:	83 e0       	ldi	r24, 0x03	; 3
     4b8:	80 93 09 01 	sts	0x0109, r24
           PartMode = PART_MODE_N_JFET;
     4bc:	86 e0       	ldi	r24, 0x06	; 6
     4be:	80 93 08 01 	sts	0x0108, r24
        }
//      if ((PartReady == 0) || (adc.lp1 > trans.uBE[0])) 
//      there is no way to find out the right Source / Drain
        trans.uBE[0] = adc.lp1;
     4c2:	b0 92 51 01 	sts	0x0151, r11
     4c6:	a0 92 50 01 	sts	0x0150, r10
        gthvoltage = adc.lp1 - adc.tp1;	//voltage GS (Source - Gate)
     4ca:	c5 01       	movw	r24, r10
     4cc:	8e 19       	sub	r24, r14
     4ce:	9f 09       	sbc	r25, r15
     4d0:	90 93 59 01 	sts	0x0159, r25
     4d4:	80 93 58 01 	sts	0x0158, r24
        trans.uBE[1] = (unsigned int)(((unsigned long)adc.lp1 * 1000) / RR680MI); // Id 0.01mA
     4d8:	b5 01       	movw	r22, r10
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	28 ee       	ldi	r18, 0xE8	; 232
     4e0:	33 e0       	ldi	r19, 0x03	; 3
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
     4ea:	20 91 04 01 	lds	r18, 0x0104
     4ee:	30 91 05 01 	lds	r19, 0x0105
     4f2:	40 e0       	ldi	r20, 0x00	; 0
     4f4:	50 e0       	ldi	r21, 0x00	; 0
     4f6:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
     4fa:	30 93 53 01 	sts	0x0153, r19
     4fe:	20 93 52 01 	sts	0x0152, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     502:	20 92 54 01 	sts	0x0154, r2
        trans.c = HighPin;
     506:	10 93 55 01 	sts	0x0155, r17
        trans.e = LowPin;
     50a:	30 92 56 01 	sts	0x0156, r3
     }

     ADC_PORT = TXD_VAL;		// direct outputs to GND
     50e:	88 e0       	ldi	r24, 0x08	; 8
     510:	88 b9       	out	0x08, r24	; 8

     //Test, if P-JFET or if self-conducting P-MOSFET
     ADC_DDR = LoADCm;		//switch Low-Pin (assumed Drain) direct to GND,
     512:	3b 81       	ldd	r19, Y+3	; 0x03
     514:	37 b9       	out	0x07, r19	; 7
				//R_H for Tristate-Pin (assumed Gate) is already switched to VCC
     R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     516:	80 2f       	mov	r24, r16
     518:	8c 29       	or	r24, r12
     51a:	84 b9       	out	0x04, r24	; 4
     R_PORT = TriPinRH | HiPinRL;	//High-Pin across R_L to Vcc
     51c:	85 b9       	out	0x05, r24	; 5
     adc.hp1 = W20msReadADC(HighPin);	//measure voltage at assumed Source 
     51e:	81 2f       	mov	r24, r17
     520:	0e 94 2e 1a 	call	0x345c	; 0x345c <W20msReadADC>
     524:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     526:	82 2d       	mov	r24, r2
     528:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
     52c:	7c 01       	movw	r14, r24
     R_PORT = HiPinRL;			//switch R_H for Tristate-Pin (assumed Gate) to GND
     52e:	c5 b8       	out	0x05, r12	; 5
     adc.hp2 = W20msReadADC(HighPin);	//read voltage at assumed Source again
     530:	81 2f       	mov	r24, r17
     532:	0e 94 2e 1a 	call	0x345c	; 0x345c <W20msReadADC>
     //if it is a self-conducting P_MOSFET or P-JFET , then must be:  adc.hp1 > adc.hp2 
     if(adc.hp1>(adc.hp2+488)) {
     536:	88 51       	subi	r24, 0x18	; 24
     538:	9e 4f       	sbci	r25, 0xFE	; 254
     53a:	8a 15       	cp	r24, r10
     53c:	9b 05       	cpc	r25, r11
     53e:	d8 f5       	brcc	.+118    	; 0x5b6 <__stack+0xb7>
        //read voltage at the Gate , to differ between MOSFET and JFET
        ADC_PORT = HiADCp;	//switch High-Pin directly to VCC
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = HiADCm;	//switch High-Pin to output
     544:	87 b9       	out	0x07, r24	; 7
        adc.tp2 = W20msReadADC(TristatePin); //read voltage at the assumed Gate 
     546:	82 2d       	mov	r24, r2
     548:	0e 94 2e 1a 	call	0x345c	; 0x345c <W20msReadADC>
        if(adc.tp2<977) { 		//MOSFET
     54c:	a3 e0       	ldi	r26, 0x03	; 3
     54e:	81 3d       	cpi	r24, 0xD1	; 209
     550:	9a 07       	cpc	r25, r26
     552:	28 f4       	brcc	.+10     	; 0x55e <__stack+0x5f>
           PartFound = PART_FET;	//P-Kanal-MOSFET
     554:	83 e0       	ldi	r24, 0x03	; 3
     556:	80 93 09 01 	sts	0x0109, r24
           PartMode = PART_MODE_P_D_MOS; //Depletion-MOSFET
     55a:	85 e0       	ldi	r24, 0x05	; 5
     55c:	04 c0       	rjmp	.+8      	; 0x566 <__stack+0x67>
        } else { 			//JFET (pn-passage between Gate and Source is conducting)
           PartFound = PART_FET;	//P-Kanal-JFET
     55e:	83 e0       	ldi	r24, 0x03	; 3
     560:	80 93 09 01 	sts	0x0109, r24
           PartMode = PART_MODE_P_JFET;
     564:	87 e0       	ldi	r24, 0x07	; 7
     566:	80 93 08 01 	sts	0x0108, r24
        }
        gthvoltage = adc.tp1 - adc.hp1;		//voltage GS (Gate - Source)
     56a:	ea 18       	sub	r14, r10
     56c:	fb 08       	sbc	r15, r11
     56e:	f0 92 59 01 	sts	0x0159, r15
     572:	e0 92 58 01 	sts	0x0158, r14
        trans.uBE[1] = (unsigned int)(((unsigned long)(ADCconfig.U_AVCC - adc.hp1) * 1000) / RR680PL); // Id 0.01mA
     576:	60 91 3f 01 	lds	r22, 0x013F
     57a:	70 91 40 01 	lds	r23, 0x0140
     57e:	6a 19       	sub	r22, r10
     580:	7b 09       	sbc	r23, r11
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	28 ee       	ldi	r18, 0xE8	; 232
     588:	33 e0       	ldi	r19, 0x03	; 3
     58a:	40 e0       	ldi	r20, 0x00	; 0
     58c:	50 e0       	ldi	r21, 0x00	; 0
     58e:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
     592:	20 91 0a 01 	lds	r18, 0x010A
     596:	30 91 0b 01 	lds	r19, 0x010B
     59a:	40 e0       	ldi	r20, 0x00	; 0
     59c:	50 e0       	ldi	r21, 0x00	; 0
     59e:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
     5a2:	30 93 53 01 	sts	0x0153, r19
     5a6:	20 93 52 01 	sts	0x0152, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     5aa:	20 92 54 01 	sts	0x0154, r2
        trans.c = LowPin;
     5ae:	30 92 55 01 	sts	0x0155, r3
        trans.e = HighPin;
     5b2:	10 93 56 01 	sts	0x0156, r17
  } // end component has current without TristatePin signal


#ifdef COMMON_COLLECTOR
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
     5b6:	88 e0       	ldi	r24, 0x08	; 8
     5b8:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;			// Collector direct to GND
     5ba:	bb 81       	ldd	r27, Y+3	; 0x03
     5bc:	b7 b9       	out	0x07, r27	; 7
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
     5be:	c5 b8       	out	0x05, r12	; 5
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
     5c0:	ec 2d       	mov	r30, r12
     5c2:	ed 29       	or	r30, r13
     5c4:	eb 87       	std	Y+11, r30	; 0x0b
     5c6:	e4 b9       	out	0x04, r30	; 4
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     5c8:	a0 90 3f 01 	lds	r10, 0x013F
     5cc:	b0 90 40 01 	lds	r11, 0x0140
     5d0:	81 2f       	mov	r24, r17
     5d2:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
     5d6:	7c 01       	movw	r14, r24
  adc.tp1 = ReadADC(TristatePin);	// voltage at the base resistor
     5d8:	82 2d       	mov	r24, r2
     5da:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
     5de:	4c 01       	movw	r8, r24

  if (adc.tp1 < 10) {
     5e0:	8a 30       	cpi	r24, 0x0A	; 10
     5e2:	91 05       	cpc	r25, r1
     5e4:	68 f5       	brcc	.+90     	; 0x640 <__stack+0x141>
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
     5e6:	80 2f       	mov	r24, r16
     5e8:	8c 29       	or	r24, r12
     5ea:	84 b9       	out	0x04, r24	; 4
     adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);
     5ec:	a0 90 3f 01 	lds	r10, 0x013F
     5f0:	b0 90 40 01 	lds	r11, 0x0140
     5f4:	81 2f       	mov	r24, r17
     5f6:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
     5fa:	a8 1a       	sub	r10, r24
     5fc:	b9 0a       	sbc	r11, r25
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
     5fe:	82 2d       	mov	r24, r2
     600:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
     604:	4c 01       	movw	r8, r24
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     606:	25 01       	movw	r4, r10
     608:	66 24       	eor	r6, r6
     60a:	77 24       	eor	r7, r7
     60c:	20 91 0a 01 	lds	r18, 0x010A
     610:	30 91 0b 01 	lds	r19, 0x010B
     614:	40 e0       	ldi	r20, 0x00	; 0
     616:	50 e0       	ldi	r21, 0x00	; 0
     618:	60 e6       	ldi	r22, 0x60	; 96
     61a:	77 eb       	ldi	r23, 0xB7	; 183
     61c:	87 e4       	ldi	r24, 0x47	; 71
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
     624:	c3 01       	movw	r24, r6
     626:	b2 01       	movw	r22, r4
     628:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
     62c:	94 01       	movw	r18, r8
     62e:	40 e0       	ldi	r20, 0x00	; 0
     630:	50 e0       	ldi	r21, 0x00	; 0
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     632:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
     636:	2c 83       	std	Y+4, r18	; 0x04
     638:	3d 83       	std	Y+5, r19	; 0x05
     63a:	4e 83       	std	Y+6, r20	; 0x06
     63c:	5f 83       	std	Y+7, r21	; 0x07
     63e:	0f c0       	rjmp	.+30     	; 0x65e <__stack+0x15f>
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
  ADC_DDR = LoADCm;			// Collector direct to GND
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     640:	ae 18       	sub	r10, r14
     642:	bf 08       	sbc	r11, r15
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
 #else
     c_hfe = ((adc.hp1 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
  } else {
     c_hfe = (unsigned long)((adc.hp1 - adc.tp1) / adc.tp1);
     644:	c5 01       	movw	r24, r10
     646:	88 19       	sub	r24, r8
     648:	99 09       	sbc	r25, r9
     64a:	b4 01       	movw	r22, r8
     64c:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <__udivmodhi4>
     650:	cb 01       	movw	r24, r22
     652:	a0 e0       	ldi	r26, 0x00	; 0
     654:	b0 e0       	ldi	r27, 0x00	; 0
     656:	8c 83       	std	Y+4, r24	; 0x04
     658:	9d 83       	std	Y+5, r25	; 0x05
     65a:	ae 83       	std	Y+6, r26	; 0x06
     65c:	bf 83       	std	Y+7, r27	; 0x07
  }
#endif

  //set Pins again for circuit with common Emitter PNP
  R_DDR = LoPinRL;		//switch R_L port for Low-Pin to output (GND)
     65e:	9a 81       	ldd	r25, Y+2	; 0x02
     660:	94 b9       	out	0x04, r25	; 4
  R_PORT = 0;			//switch all resistor ports to GND
     662:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = HiADCm;		//switch High-Pin to output
     664:	a9 81       	ldd	r26, Y+1	; 0x01
     666:	a7 b9       	out	0x07, r26	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
     668:	a8 b9       	out	0x08, r26	; 8
  wait5ms();
     66a:	0e 94 7d 14 	call	0x28fa	; 0x28fa <wait5ms>
  
  if(adc.lp_otr < 977) {
     66e:	e9 85       	ldd	r30, Y+9	; 0x09
     670:	fa 85       	ldd	r31, Y+10	; 0x0a
     672:	23 e0       	ldi	r18, 0x03	; 3
     674:	e1 3d       	cpi	r30, 0xD1	; 209
     676:	f2 07       	cpc	r31, r18
     678:	08 f0       	brcs	.+2      	; 0x67c <__stack+0x17d>
     67a:	a2 c2       	rjmp	.+1348   	; 0xbc0 <__stack+0x6c1>
     lcd_testpin(HighPin);
     lcd_space();
     wait1s();
#endif
     //Test to PNP
     R_DDR = LoPinRL | TriPinRL;	//switch R_L port for Tristate-Pin to output (GND), for Test of PNP
     67c:	3a 81       	ldd	r19, Y+2	; 0x02
     67e:	3d 29       	or	r19, r13
     680:	3f 87       	std	Y+15, r19	; 0x0f
     682:	34 b9       	out	0x04, r19	; 4
     adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin
     684:	83 2d       	mov	r24, r3
     686:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
     if(adc.lp1 > 3422) {
     68a:	ad e0       	ldi	r26, 0x0D	; 13
     68c:	8f 35       	cpi	r24, 0x5F	; 95
     68e:	9a 07       	cpc	r25, r26
     690:	08 f4       	brcc	.+2      	; 0x694 <__stack+0x195>
     692:	e1 c0       	rjmp	.+450    	; 0x856 <__stack+0x357>
        //component has current => PNP-Transistor or equivalent
        //compute current amplification factor in both directions
        R_DDR = LoPinRL | TriPinRH;	//switch R_H port for Tristate-Pin (Base) to output (GND)
     694:	ba 81       	ldd	r27, Y+2	; 0x02
     696:	b0 2b       	or	r27, r16
     698:	b8 8b       	std	Y+16, r27	; 0x10
     69a:	b4 b9       	out	0x04, r27	; 4

        adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin (assumed Collector)
     69c:	83 2d       	mov	r24, r3
     69e:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
     6a2:	9a 8b       	std	Y+18, r25	; 0x12
     6a4:	89 8b       	std	Y+17, r24	; 0x11
        adc.tp2 = ReadADC(TristatePin);	//measure voltage at TristatePin (Base) 
     6a6:	82 2d       	mov	r24, r2
     6a8:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
     6ac:	9d 8b       	std	Y+21, r25	; 0x15
     6ae:	8c 8b       	std	Y+20, r24	; 0x14
        //check, if Test is done before 
        if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     6b0:	80 91 09 01 	lds	r24, 0x0109
     6b4:	82 50       	subi	r24, 0x02	; 2
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	18 f4       	brcc	.+6      	; 0x6c0 <__stack+0x1c1>
           PartReady = 1;
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	80 93 06 01 	sts	0x0106, r24
        }
        trans.uBE[PartReady] = ReadADC(HighPin) - adc.tp2;	// Base Emitter Voltage
     6c0:	e0 90 06 01 	lds	r14, 0x0106
     6c4:	ff 24       	eor	r15, r15
     6c6:	81 2f       	mov	r24, r17
     6c8:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
     6cc:	f7 01       	movw	r30, r14
     6ce:	ee 0f       	add	r30, r30
     6d0:	ff 1f       	adc	r31, r31
     6d2:	e0 5b       	subi	r30, 0xB0	; 176
     6d4:	fe 4f       	sbci	r31, 0xFE	; 254
     6d6:	2c 89       	ldd	r18, Y+20	; 0x14
     6d8:	3d 89       	ldd	r19, Y+21	; 0x15
     6da:	82 1b       	sub	r24, r18
     6dc:	93 0b       	sbc	r25, r19
     6de:	91 83       	std	Z+1, r25	; 0x01
     6e0:	80 83       	st	Z, r24

        //compute current amplification factor for circuit with common Emitter
        //hFE = B = Collector current / Base current
        if(adc.tp2 < 53) {
     6e2:	25 33       	cpi	r18, 0x35	; 53
     6e4:	31 05       	cpc	r19, r1
     6e6:	20 f4       	brcc	.+8      	; 0x6f0 <__stack+0x1f1>
#if DebugOut == 5
           lcd_data('<');
           lcd_data('5');
           lcd_data('3');
#endif
           adc.tp2 = 53;
     6e8:	85 e3       	ldi	r24, 0x35	; 53
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	9d 8b       	std	Y+21, r25	; 0x15
     6ee:	8c 8b       	std	Y+20, r24	; 0x14
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     6f0:	e0 90 06 01 	lds	r14, 0x0106
     6f4:	ff 24       	eor	r15, r15
     6f6:	a9 89       	ldd	r26, Y+17	; 0x11
     6f8:	ba 89       	ldd	r27, Y+18	; 0x12
     6fa:	2d 01       	movw	r4, r26
     6fc:	66 24       	eor	r6, r6
     6fe:	77 24       	eor	r7, r7
     700:	20 91 04 01 	lds	r18, 0x0104
     704:	30 91 05 01 	lds	r19, 0x0105
     708:	40 e0       	ldi	r20, 0x00	; 0
     70a:	50 e0       	ldi	r21, 0x00	; 0
     70c:	60 e6       	ldi	r22, 0x60	; 96
     70e:	77 eb       	ldi	r23, 0xB7	; 183
     710:	87 e4       	ldi	r24, 0x47	; 71
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
     718:	c3 01       	movw	r24, r6
     71a:	b2 01       	movw	r22, r4
     71c:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
                 (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
     720:	ec 89       	ldd	r30, Y+20	; 0x14
     722:	fd 89       	ldd	r31, Y+21	; 0x15
     724:	9f 01       	movw	r18, r30
     726:	40 e0       	ldi	r20, 0x00	; 0
     728:	50 e0       	ldi	r21, 0x00	; 0
     72a:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
#endif
           adc.tp2 = 53;
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     72e:	f7 01       	movw	r30, r14
     730:	ee 0f       	add	r30, r30
     732:	ff 1f       	adc	r31, r31
     734:	ee 0f       	add	r30, r30
     736:	ff 1f       	adc	r31, r31
     738:	e8 5b       	subi	r30, 0xB8	; 184
     73a:	fe 4f       	sbci	r31, 0xFE	; 254
     73c:	20 83       	st	Z, r18
     73e:	31 83       	std	Z+1, r19	; 0x01
     740:	42 83       	std	Z+2, r20	; 0x02
     742:	53 83       	std	Z+3, r21	; 0x03
        trans.hfe[PartReady] = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
#ifdef COMMON_COLLECTOR
        //current amplification factor for common  Collector (Emitter follower)
        // c_hFE = (Emitter current - Base current) / Base current
        if (c_hfe > trans.hfe[PartReady]) {
     744:	8c 81       	ldd	r24, Y+4	; 0x04
     746:	9d 81       	ldd	r25, Y+5	; 0x05
     748:	ae 81       	ldd	r26, Y+6	; 0x06
     74a:	bf 81       	ldd	r27, Y+7	; 0x07
     74c:	28 17       	cp	r18, r24
     74e:	39 07       	cpc	r19, r25
     750:	4a 07       	cpc	r20, r26
     752:	5b 07       	cpc	r21, r27
     754:	98 f4       	brcc	.+38     	; 0x77c <__stack+0x27d>
           trans.hfe[PartReady] = c_hfe;
     756:	80 83       	st	Z, r24
     758:	91 83       	std	Z+1, r25	; 0x01
     75a:	a2 83       	std	Z+2, r26	; 0x02
     75c:	b3 83       	std	Z+3, r27	; 0x03
           trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.hp1 - adc.tp1;	// Base Emitter Voltage common collector
     75e:	f7 01       	movw	r30, r14
     760:	ee 0f       	add	r30, r30
     762:	ff 1f       	adc	r31, r31
     764:	e0 5b       	subi	r30, 0xB0	; 176
     766:	fe 4f       	sbci	r31, 0xFE	; 254
     768:	80 91 3f 01 	lds	r24, 0x013F
     76c:	90 91 40 01 	lds	r25, 0x0140
     770:	8a 19       	sub	r24, r10
     772:	9b 09       	sbc	r25, r11
     774:	88 19       	sub	r24, r8
     776:	99 09       	sbc	r25, r9
     778:	91 83       	std	Z+1, r25	; 0x01
     77a:	80 83       	st	Z, r24
        }
#endif

 
        if(PartFound != PART_THYRISTOR) {
     77c:	80 91 09 01 	lds	r24, 0x0109
     780:	85 30       	cpi	r24, 0x05	; 5
     782:	09 f4       	brne	.+2      	; 0x786 <__stack+0x287>
     784:	68 c0       	rjmp	.+208    	; 0x856 <__stack+0x357>
           if(adc.tp2 > 977) {
     786:	ac 89       	ldd	r26, Y+20	; 0x14
     788:	bd 89       	ldd	r27, Y+21	; 0x15
     78a:	e3 e0       	ldi	r30, 0x03	; 3
     78c:	a2 3d       	cpi	r26, 0xD2	; 210
     78e:	be 07       	cpc	r27, r30
     790:	30 f0       	brcs	.+12     	; 0x79e <__stack+0x29f>
              //PNP-Transistor is found (Base voltage moves to VCC)
              PartFound = PART_TRANSISTOR;
     792:	82 e0       	ldi	r24, 0x02	; 2
     794:	80 93 09 01 	sts	0x0109, r24
              PartMode = PART_MODE_PNP;
     798:	80 93 08 01 	sts	0x0108, r24
     79c:	56 c0       	rjmp	.+172    	; 0x84a <__stack+0x34b>
           } else {
              if((adc.lp_otr < 97) && (adc.lp1 > 2000)) {
     79e:	29 85       	ldd	r18, Y+9	; 0x09
     7a0:	3a 85       	ldd	r19, Y+10	; 0x0a
     7a2:	21 36       	cpi	r18, 0x61	; 97
     7a4:	31 05       	cpc	r19, r1
     7a6:	08 f0       	brcs	.+2      	; 0x7aa <__stack+0x2ab>
     7a8:	50 c0       	rjmp	.+160    	; 0x84a <__stack+0x34b>
     7aa:	89 89       	ldd	r24, Y+17	; 0x11
     7ac:	9a 89       	ldd	r25, Y+18	; 0x12
     7ae:	a7 e0       	ldi	r26, 0x07	; 7
     7b0:	81 3d       	cpi	r24, 0xD1	; 209
     7b2:	9a 07       	cpc	r25, r26
     7b4:	08 f4       	brcc	.+2      	; 0x7b8 <__stack+0x2b9>
     7b6:	49 c0       	rjmp	.+146    	; 0x84a <__stack+0x34b>
                 //is flow voltage low enough in the closed  state?
                 //(since D-Mode-FET would be by mistake detected as E-Mode )
        	 PartFound = PART_FET;		//P-Kanal-MOSFET if found (Basis/Gate moves not to VCC)
     7b8:	83 e0       	ldi	r24, 0x03	; 3
     7ba:	80 93 09 01 	sts	0x0109, r24
        	 PartMode = PART_MODE_P_E_MOS;
     7be:	80 93 08 01 	sts	0x0108, r24
                 PinMSK = LoADCm & 7;
     7c2:	eb 80       	ldd	r14, Y+3	; 0x03
     7c4:	b7 e0       	ldi	r27, 0x07	; 7
     7c6:	eb 22       	and	r14, r27
        	 //measure the Gate threshold voltage
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
     7c8:	82 2d       	mov	r24, r2
     7ca:	80 64       	ori	r24, 0x40	; 64
     7cc:	80 93 7c 00 	sts	0x007C, r24
        	 gthvoltage = 1;		// round up ((1*4)/9)
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	90 93 59 01 	sts	0x0159, r25
     7d8:	80 93 58 01 	sts	0x0158, r24
        	 for(ii=0;ii<11;ii++) {
     7dc:	40 e0       	ldi	r20, 0x00	; 0
        	    wdt_reset();
     7de:	a8 95       	wdr
        	    ChargePin10ms(TriPinRL,1);
     7e0:	8d 2d       	mov	r24, r13
     7e2:	61 e0       	ldi	r22, 0x01	; 1
     7e4:	4e 8b       	std	Y+22, r20	; 0x16
     7e6:	0e 94 a5 01 	call	0x34a	; 0x34a <ChargePin10ms>
                    R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (Basis) to GND
     7ea:	e8 89       	ldd	r30, Y+16	; 0x10
     7ec:	e4 b9       	out	0x04, r30	; 4
     7ee:	4e 89       	ldd	r20, Y+22	; 0x16
        	    while (!(ADC_PIN&PinMSK));  // Wait, until the MOSFET switches and Drain moves to VCC
     7f0:	86 b1       	in	r24, 0x06	; 6
     7f2:	8e 21       	and	r24, r14
     7f4:	e9 f3       	breq	.-6      	; 0x7f0 <__stack+0x2f1>
        	    R_DDR = LoPinRL;
     7f6:	fa 81       	ldd	r31, Y+2	; 0x02
     7f8:	f4 b9       	out	0x04, r31	; 4
        	    ADCSRA |= (1<<ADSC);	// Start Conversion
     7fa:	80 91 7a 00 	lds	r24, 0x007A
     7fe:	80 64       	ori	r24, 0x40	; 64
     800:	80 93 7a 00 	sts	0x007A, r24
        	    while (ADCSRA&(1<<ADSC));	// wait
     804:	80 91 7a 00 	lds	r24, 0x007A
     808:	86 fd       	sbrc	r24, 6
     80a:	fc cf       	rjmp	.-8      	; 0x804 <__stack+0x305>
      		    gthvoltage += (1023 - ADCW); // Add Tristatepin-Voltage
     80c:	20 91 78 00 	lds	r18, 0x0078
     810:	30 91 79 00 	lds	r19, 0x0079
     814:	80 91 58 01 	lds	r24, 0x0158
     818:	90 91 59 01 	lds	r25, 0x0159
     81c:	81 50       	subi	r24, 0x01	; 1
     81e:	9c 4f       	sbci	r25, 0xFC	; 252
     820:	82 1b       	sub	r24, r18
     822:	93 0b       	sbc	r25, r19
     824:	90 93 59 01 	sts	0x0159, r25
     828:	80 93 58 01 	sts	0x0158, r24
        	 PartMode = PART_MODE_P_E_MOS;
                 PinMSK = LoADCm & 7;
        	 //measure the Gate threshold voltage
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
        	 gthvoltage = 1;		// round up ((1*4)/9)
        	 for(ii=0;ii<11;ii++) {
     82c:	4f 5f       	subi	r20, 0xFF	; 255
     82e:	4b 30       	cpi	r20, 0x0B	; 11
     830:	b1 f6       	brne	.-84     	; 0x7de <__stack+0x2df>
        	    R_DDR = LoPinRL;
        	    ADCSRA |= (1<<ADSC);	// Start Conversion
        	    while (ADCSRA&(1<<ADSC));	// wait
      		    gthvoltage += (1023 - ADCW); // Add Tristatepin-Voltage
                 }
                 gthvoltage *= 4;		// is equal to 44*ADCW
     832:	88 0f       	add	r24, r24
     834:	99 1f       	adc	r25, r25
     836:	88 0f       	add	r24, r24
     838:	99 1f       	adc	r25, r25
                 gthvoltage /= 9;		// gives resolution in mV
     83a:	69 e0       	ldi	r22, 0x09	; 9
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <__udivmodhi4>
     842:	70 93 59 01 	sts	0x0159, r23
     846:	60 93 58 01 	sts	0x0158, r22
              }
           }
           trans.b = TristatePin;
     84a:	20 92 54 01 	sts	0x0154, r2
           trans.c = LowPin;
     84e:	30 92 55 01 	sts	0x0155, r3
           trans.e = HighPin;
     852:	10 93 56 01 	sts	0x0156, r17
        }  // end if PartFound != PART_THYRISTOR
    } // end component has current => PNP

#ifdef COMMON_COLLECTOR
    // Low-Pin=RL- HighPin=VCC
    R_DDR = LoPinRL | TriPinRL;
     856:	2f 85       	ldd	r18, Y+15	; 0x0f
     858:	24 b9       	out	0x04, r18	; 4
    R_PORT = TriPinRL;			// TriPin=RL+  NPN with common Collector
     85a:	d5 b8       	out	0x05, r13	; 5
    adc.lp1 = W5msReadADC(LowPin);	// voltage at Emitter resistor
     85c:	83 2d       	mov	r24, r3
     85e:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
     862:	2c 01       	movw	r4, r24
    adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     864:	80 91 3f 01 	lds	r24, 0x013F
     868:	90 91 40 01 	lds	r25, 0x0140
     86c:	9a 8b       	std	Y+18, r25	; 0x12
     86e:	89 8b       	std	Y+17, r24	; 0x11
     870:	82 2d       	mov	r24, r2
     872:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
     876:	a9 89       	ldd	r26, Y+17	; 0x11
     878:	ba 89       	ldd	r27, Y+18	; 0x12
     87a:	a8 1b       	sub	r26, r24
     87c:	b9 0b       	sbc	r27, r25
     87e:	ba 8b       	std	Y+18, r27	; 0x12
     880:	a9 8b       	std	Y+17, r26	; 0x11
    if (adc.tp1 < 10) {
     882:	aa 30       	cpi	r26, 0x0A	; 10
     884:	b1 05       	cpc	r27, r1
     886:	b0 f5       	brcc	.+108    	; 0x8f4 <__stack+0x3f5>
       R_DDR = LoPinRL | TriPinRH;
     888:	8a 81       	ldd	r24, Y+2	; 0x02
     88a:	80 2b       	or	r24, r16
     88c:	84 b9       	out	0x04, r24	; 4
       R_PORT = TriPinRH;		// Tripin=RH+
     88e:	05 b9       	out	0x05, r16	; 5
       adc.lp1 = W5msReadADC(LowPin);
     890:	83 2d       	mov	r24, r3
     892:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
     896:	2c 01       	movw	r4, r24
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     898:	e0 91 3f 01 	lds	r30, 0x013F
     89c:	f0 91 40 01 	lds	r31, 0x0140
     8a0:	fa 8b       	std	Y+18, r31	; 0x12
     8a2:	e9 8b       	std	Y+17, r30	; 0x11
     8a4:	82 2d       	mov	r24, r2
     8a6:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
     8aa:	29 89       	ldd	r18, Y+17	; 0x11
     8ac:	3a 89       	ldd	r19, Y+18	; 0x12
     8ae:	28 1b       	sub	r18, r24
     8b0:	39 0b       	sbc	r19, r25
     8b2:	3a 8b       	std	Y+18, r19	; 0x12
     8b4:	29 8b       	std	Y+17, r18	; 0x11
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     8b6:	42 01       	movw	r8, r4
     8b8:	aa 24       	eor	r10, r10
     8ba:	bb 24       	eor	r11, r11
     8bc:	20 91 04 01 	lds	r18, 0x0104
     8c0:	30 91 05 01 	lds	r19, 0x0105
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	60 e6       	ldi	r22, 0x60	; 96
     8ca:	77 eb       	ldi	r23, 0xB7	; 183
     8cc:	87 e4       	ldi	r24, 0x47	; 71
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
     8d4:	c5 01       	movw	r24, r10
     8d6:	b4 01       	movw	r22, r8
     8d8:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
     8dc:	a9 89       	ldd	r26, Y+17	; 0x11
     8de:	ba 89       	ldd	r27, Y+18	; 0x12
     8e0:	9d 01       	movw	r18, r26
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	50 e0       	ldi	r21, 0x00	; 0
       R_DDR = LoPinRL | TriPinRH;
       R_PORT = TriPinRH;		// Tripin=RH+
       adc.lp1 = W5msReadADC(LowPin);
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     8e6:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
     8ea:	2c 83       	std	Y+4, r18	; 0x04
     8ec:	3d 83       	std	Y+5, r19	; 0x05
     8ee:	4e 83       	std	Y+6, r20	; 0x06
     8f0:	5f 83       	std	Y+7, r21	; 0x07
     8f2:	0f c0       	rjmp	.+30     	; 0x912 <__stack+0x413>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
 #else
       c_hfe = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
    } else {
       c_hfe = (adc.lp1 - adc.tp1) / adc.tp1;
     8f4:	c2 01       	movw	r24, r4
     8f6:	e9 89       	ldd	r30, Y+17	; 0x11
     8f8:	fa 89       	ldd	r31, Y+18	; 0x12
     8fa:	8e 1b       	sub	r24, r30
     8fc:	9f 0b       	sbc	r25, r31
     8fe:	bf 01       	movw	r22, r30
     900:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <__udivmodhi4>
     904:	cb 01       	movw	r24, r22
     906:	a0 e0       	ldi	r26, 0x00	; 0
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	8c 83       	std	Y+4, r24	; 0x04
     90c:	9d 83       	std	Y+5, r25	; 0x05
     90e:	ae 83       	std	Y+6, r26	; 0x06
     910:	bf 83       	std	Y+7, r27	; 0x07
       lcd_string(utoa(adc.tp1,outval,10));
       wait1s();
#endif
#endif
    //Tristate (can be Base) to VCC, Test if NPN
    ADC_DDR = LoADCm;		//Low-Pin to output 0V
     912:	9b 81       	ldd	r25, Y+3	; 0x03
     914:	97 b9       	out	0x07, r25	; 7
    ADC_PORT = TXD_VAL;			//switch Low-Pin to GND
     916:	88 e0       	ldi	r24, 0x08	; 8
     918:	88 b9       	out	0x08, r24	; 8
    R_DDR = TriPinRL | HiPinRL;		//RL port for High-Pin and Tristate-Pin to output
     91a:	ab 85       	ldd	r26, Y+11	; 0x0b
     91c:	a4 b9       	out	0x04, r26	; 4
    R_PORT = TriPinRL | HiPinRL;	//RL port for High-Pin and Tristate-Pin to Vcc
     91e:	a5 b9       	out	0x05, r26	; 5
    adc.hp1 = W5msReadADC(HighPin);	//measure voltage at High-Pin  (Collector)
     920:	81 2f       	mov	r24, r17
     922:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
    if(adc.hp1 < 1600) {
     926:	b6 e0       	ldi	r27, 0x06	; 6
     928:	80 34       	cpi	r24, 0x40	; 64
     92a:	9b 07       	cpc	r25, r27
     92c:	08 f0       	brcs	.+2      	; 0x930 <__stack+0x431>
     92e:	44 c1       	rjmp	.+648    	; 0xbb8 <__stack+0x6b9>
       lcd_data('N');
       lcd_testpin(HighPin);
       lcd_space();
       wait1s();
#endif
       if(PartReady==1) {
     930:	80 91 06 01 	lds	r24, 0x0106
     934:	81 30       	cpi	r24, 0x01	; 1
     936:	09 f4       	brne	.+2      	; 0x93a <__stack+0x43b>
     938:	ac c1       	rjmp	.+856    	; 0xc92 <__stack+0x793>
          goto widmes;
       }

       //Test auf Thyristor:
       //Gate discharge
       ChargePin10ms(TriPinRL,0);	//Tristate-Pin (Gate) across R_L 10ms to GND
     93a:	8d 2d       	mov	r24, r13
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	0e 94 a5 01 	call	0x34a	; 0x34a <ChargePin10ms>
       adc.hp3 = W5msReadADC(HighPin);	//read voltage at High-Pin (probably Anode) again
     942:	81 2f       	mov	r24, r17
     944:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
     948:	7c 01       	movw	r14, r24
					//current should still flow, if not,
					// no Thyristor or holding current to low 
		 	
       R_PORT = 0;			//switch R_L for High-Pin (probably Anode) to GND (turn off)
     94a:	15 b8       	out	0x05, r1	; 5
       wait5ms();
     94c:	0e 94 7d 14 	call	0x28fa	; 0x28fa <wait5ms>
       R_PORT = HiPinRL;		//switch R_L for High-Pin (probably Anode) again to VCC
     950:	c5 b8       	out	0x05, r12	; 5
       adc.hp2 = W5msReadADC(HighPin);	//measure voltage at the High-Pin (probably Anode) again
     952:	81 2f       	mov	r24, r17
     954:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
       if((adc.hp3 < 1600) && (adc.hp2 > 4400)) {
     958:	e0 e4       	ldi	r30, 0x40	; 64
     95a:	ee 16       	cp	r14, r30
     95c:	e6 e0       	ldi	r30, 0x06	; 6
     95e:	fe 06       	cpc	r15, r30
     960:	08 f0       	brcs	.+2      	; 0x964 <__stack+0x465>
     962:	42 c0       	rjmp	.+132    	; 0x9e8 <__stack+0x4e9>
     964:	f1 e1       	ldi	r31, 0x11	; 17
     966:	81 33       	cpi	r24, 0x31	; 49
     968:	9f 07       	cpc	r25, r31
     96a:	f0 f1       	brcs	.+124    	; 0x9e8 <__stack+0x4e9>
          //if the holding current was switched off the thyristor must be switched off too. 
          //if Thyristor was still swiched on, if gate was switched off => Thyristor
          PartFound = PART_THYRISTOR;
     96c:	85 e0       	ldi	r24, 0x05	; 5
     96e:	80 93 09 01 	sts	0x0109, r24
          //Test if Triac
          R_DDR = 0;
     972:	14 b8       	out	0x04, r1	; 4
          R_PORT = 0;
     974:	15 b8       	out	0x05, r1	; 5
          ADC_PORT = LoADCp;	//Low-Pin fix to VCC
     976:	2b 81       	ldd	r18, Y+3	; 0x03
     978:	28 b9       	out	0x08, r18	; 8
          wait5ms();
     97a:	0e 94 7d 14 	call	0x28fa	; 0x28fa <wait5ms>
          R_DDR = HiPinRL;		//switch R_L port HighPin to output (GND)
     97e:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) > 244) {
     980:	81 2f       	mov	r24, r17
     982:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
     986:	85 3f       	cpi	r24, 0xF5	; 245
     988:	91 05       	cpc	r25, r1
     98a:	08 f0       	brcs	.+2      	; 0x98e <__stack+0x48f>
     98c:	0f c1       	rjmp	.+542    	; 0xbac <__stack+0x6ad>
             goto savenresult;		//measure voltage at the  High-Pin (probably A2); if too high:
                                	//component has current => kein Triac
          }
          R_DDR = HiPinRL | TriPinRL;	//switch R_L port for TristatePin (Gate) to output (GND) => Triac should be triggered 
     98e:	3b 85       	ldd	r19, Y+11	; 0x0b
     990:	34 b9       	out	0x04, r19	; 4
          if(W5msReadADC(TristatePin) < 977) {
     992:	82 2d       	mov	r24, r2
     994:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
     998:	a3 e0       	ldi	r26, 0x03	; 3
     99a:	81 3d       	cpi	r24, 0xD1	; 209
     99c:	9a 07       	cpc	r25, r26
     99e:	08 f4       	brcc	.+2      	; 0x9a2 <__stack+0x4a3>
     9a0:	05 c1       	rjmp	.+522    	; 0xbac <__stack+0x6ad>
             goto savenresult; 		//measure voltage at the Tristate-Pin (probably Gate) ;
                              		// if to low, abort 
          }
          if(ReadADC(HighPin) < 733) {
     9a2:	81 2f       	mov	r24, r17
     9a4:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
     9a8:	b2 e0       	ldi	r27, 0x02	; 2
     9aa:	8d 3d       	cpi	r24, 0xDD	; 221
     9ac:	9b 07       	cpc	r25, r27
     9ae:	08 f4       	brcc	.+2      	; 0x9b2 <__stack+0x4b3>
     9b0:	fd c0       	rjmp	.+506    	; 0xbac <__stack+0x6ad>
             goto savenresult; 		//component has no current => no Triac => abort
          }
          R_DDR = HiPinRL;		//TristatePin (Gate) to input 
     9b2:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) < 733) {
     9b4:	81 2f       	mov	r24, r17
     9b6:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
     9ba:	e2 e0       	ldi	r30, 0x02	; 2
     9bc:	8d 3d       	cpi	r24, 0xDD	; 221
     9be:	9e 07       	cpc	r25, r30
     9c0:	08 f4       	brcc	.+2      	; 0x9c4 <__stack+0x4c5>
     9c2:	f4 c0       	rjmp	.+488    	; 0xbac <__stack+0x6ad>
             goto savenresult; 		//component has no current without base current => no Triac => abort
          }
          R_PORT = HiPinRL;		//switch R_L port for HighPin to VCC => switch off holding current 
     9c4:	c5 b8       	out	0x05, r12	; 5
          wait5ms();
     9c6:	0e 94 7d 14 	call	0x28fa	; 0x28fa <wait5ms>
          R_PORT = 0;			//switch R_L port for HighPin again to GND; Triac should now switched off
     9ca:	15 b8       	out	0x05, r1	; 5
          if(W5msReadADC(HighPin) > 244) {
     9cc:	81 2f       	mov	r24, r17
     9ce:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
     9d2:	85 3f       	cpi	r24, 0xF5	; 245
     9d4:	91 05       	cpc	r25, r1
     9d6:	08 f0       	brcs	.+2      	; 0x9da <__stack+0x4db>
     9d8:	e9 c0       	rjmp	.+466    	; 0xbac <__stack+0x6ad>
             goto savenresult;		//measure voltage at the High-Pin (probably A2) ;
                                	//if to high, component is not switched off => no Triac, abort
         }
         PartFound = PART_TRIAC;
     9da:	84 e0       	ldi	r24, 0x04	; 4
     9dc:	80 93 09 01 	sts	0x0109, r24
         PartReady = 1;
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	80 93 06 01 	sts	0x0106, r24
         goto savenresult;
     9e6:	e2 c0       	rjmp	.+452    	; 0xbac <__stack+0x6ad>
        }
      //Test if NPN Transistor or MOSFET
      // ADC_DDR = LoADCm;	//Low-Pin to output 0V
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
     9e8:	0c 29       	or	r16, r12
     9ea:	04 b9       	out	0x04, r16	; 4
      R_PORT = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to VCC
     9ec:	05 b9       	out	0x05, r16	; 5
      wait50ms();
     9ee:	0e 94 78 14 	call	0x28f0	; 0x28f0 <wait50ms>
      adc.hp2 = ADCconfig.U_AVCC - ReadADC(HighPin);	//measure the voltage at the collector resistor 
     9f2:	60 90 3f 01 	lds	r6, 0x013F
     9f6:	70 90 40 01 	lds	r7, 0x0140
     9fa:	81 2f       	mov	r24, r17
     9fc:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
     a00:	68 1a       	sub	r6, r24
     a02:	79 0a       	sbc	r7, r25
      adc.tp2 = ADCconfig.U_AVCC - ReadADC(TristatePin);	//measure the voltage at the base resistor 
     a04:	a0 90 3f 01 	lds	r10, 0x013F
     a08:	b0 90 40 01 	lds	r11, 0x0140
     a0c:	82 2d       	mov	r24, r2
     a0e:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
     a12:	a8 1a       	sub	r10, r24
     a14:	b9 0a       	sbc	r11, r25
       lcd_space();
       lcd_data('T');
       lcd_data('P');
       lcd_string(utoa(adc.tp2,outval,10));
#endif
      if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     a16:	80 91 09 01 	lds	r24, 0x0109
     a1a:	82 50       	subi	r24, 0x02	; 2
     a1c:	82 30       	cpi	r24, 0x02	; 2
     a1e:	18 f4       	brcc	.+6      	; 0xa26 <__stack+0x527>
         PartReady = 1;	//check, if test is already done once
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	80 93 06 01 	sts	0x0106, r24
      }
      trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.tp2 - ReadADC(LowPin);
     a26:	80 90 06 01 	lds	r8, 0x0106
     a2a:	99 24       	eor	r9, r9
     a2c:	e0 90 3f 01 	lds	r14, 0x013F
     a30:	f0 90 40 01 	lds	r15, 0x0140
     a34:	ea 18       	sub	r14, r10
     a36:	fb 08       	sbc	r15, r11
     a38:	83 2d       	mov	r24, r3
     a3a:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
     a3e:	f4 01       	movw	r30, r8
     a40:	ee 0f       	add	r30, r30
     a42:	ff 1f       	adc	r31, r31
     a44:	e0 5b       	subi	r30, 0xB0	; 176
     a46:	fe 4f       	sbci	r31, 0xFE	; 254
     a48:	e8 1a       	sub	r14, r24
     a4a:	f9 0a       	sbc	r15, r25
     a4c:	f1 82       	std	Z+1, r15	; 0x01
     a4e:	e0 82       	st	Z, r14

      //compute current amplification factor for common Emitter
      //hFE = B = Collector current / Base current
      if(adc.tp2 < 53) {
     a50:	f5 e3       	ldi	r31, 0x35	; 53
     a52:	af 16       	cp	r10, r31
     a54:	b1 04       	cpc	r11, r1
     a56:	18 f4       	brcc	.+6      	; 0xa5e <__stack+0x55f>
#if DebugOut == 5
         lcd_data('<');
         lcd_data('5');
         lcd_data('3');
#endif
         adc.tp2 = 53;
     a58:	85 e3       	ldi	r24, 0x35	; 53
     a5a:	a8 2e       	mov	r10, r24
     a5c:	b1 2c       	mov	r11, r1
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     a5e:	e0 90 06 01 	lds	r14, 0x0106
     a62:	ff 24       	eor	r15, r15
     a64:	c3 01       	movw	r24, r6
     a66:	a0 e0       	ldi	r26, 0x00	; 0
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	8b 87       	std	Y+11, r24	; 0x0b
     a6c:	9c 87       	std	Y+12, r25	; 0x0c
     a6e:	ad 87       	std	Y+13, r26	; 0x0d
     a70:	be 87       	std	Y+14, r27	; 0x0e
     a72:	20 91 0a 01 	lds	r18, 0x010A
     a76:	30 91 0b 01 	lds	r19, 0x010B
     a7a:	40 e0       	ldi	r20, 0x00	; 0
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	60 e6       	ldi	r22, 0x60	; 96
     a80:	77 eb       	ldi	r23, 0xB7	; 183
     a82:	87 e4       	ldi	r24, 0x47	; 71
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
     a8a:	6b 85       	ldd	r22, Y+11	; 0x0b
     a8c:	7c 85       	ldd	r23, Y+12	; 0x0c
     a8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     a90:	9e 85       	ldd	r25, Y+14	; 0x0e
     a92:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp2;	
     a96:	95 01       	movw	r18, r10
     a98:	40 e0       	ldi	r20, 0x00	; 0
     a9a:	50 e0       	ldi	r21, 0x00	; 0
     a9c:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
#endif
         adc.tp2 = 53;
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     aa0:	f7 01       	movw	r30, r14
     aa2:	ee 0f       	add	r30, r30
     aa4:	ff 1f       	adc	r31, r31
     aa6:	ee 0f       	add	r30, r30
     aa8:	ff 1f       	adc	r31, r31
     aaa:	e8 5b       	subi	r30, 0xB8	; 184
     aac:	fe 4f       	sbci	r31, 0xFE	; 254
     aae:	20 83       	st	Z, r18
     ab0:	31 83       	std	Z+1, r19	; 0x01
     ab2:	42 83       	std	Z+2, r20	; 0x02
     ab4:	53 83       	std	Z+3, r21	; 0x03
      trans.hfe[PartReady] = ((adc.hp2 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
#endif
#ifdef COMMON_COLLECTOR
       //compare current amplification factor for common Collector (Emitter follower)
       // hFE = (Emitterstrom - Basisstrom) / Basisstrom
       if (c_hfe >  trans.hfe[PartReady]) {
     ab6:	8c 81       	ldd	r24, Y+4	; 0x04
     ab8:	9d 81       	ldd	r25, Y+5	; 0x05
     aba:	ae 81       	ldd	r26, Y+6	; 0x06
     abc:	bf 81       	ldd	r27, Y+7	; 0x07
     abe:	28 17       	cp	r18, r24
     ac0:	39 07       	cpc	r19, r25
     ac2:	4a 07       	cpc	r20, r26
     ac4:	5b 07       	cpc	r21, r27
     ac6:	a8 f4       	brcc	.+42     	; 0xaf2 <__stack+0x5f3>
          trans.hfe[PartReady] = c_hfe;
     ac8:	80 83       	st	Z, r24
     aca:	91 83       	std	Z+1, r25	; 0x01
     acc:	a2 83       	std	Z+2, r26	; 0x02
     ace:	b3 83       	std	Z+3, r27	; 0x03
          trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.lp1 - adc.tp1;
     ad0:	f7 01       	movw	r30, r14
     ad2:	ee 0f       	add	r30, r30
     ad4:	ff 1f       	adc	r31, r31
     ad6:	e0 5b       	subi	r30, 0xB0	; 176
     ad8:	fe 4f       	sbci	r31, 0xFE	; 254
     ada:	80 91 3f 01 	lds	r24, 0x013F
     ade:	90 91 40 01 	lds	r25, 0x0140
     ae2:	84 19       	sub	r24, r4
     ae4:	95 09       	sbc	r25, r5
     ae6:	a9 89       	ldd	r26, Y+17	; 0x11
     ae8:	ba 89       	ldd	r27, Y+18	; 0x12
     aea:	8a 1b       	sub	r24, r26
     aec:	9b 0b       	sbc	r25, r27
     aee:	91 83       	std	Z+1, r25	; 0x01
     af0:	80 83       	st	Z, r24
       }
#endif

      if(adc.tp2 > 2557) {		// Basis-voltage R_H is low enough
     af2:	be ef       	ldi	r27, 0xFE	; 254
     af4:	ab 16       	cp	r10, r27
     af6:	b9 e0       	ldi	r27, 0x09	; 9
     af8:	bb 06       	cpc	r11, r27
     afa:	38 f0       	brcs	.+14     	; 0xb0a <__stack+0x60b>
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
     afc:	82 e0       	ldi	r24, 0x02	; 2
     afe:	80 93 09 01 	sts	0x0109, r24
         PartMode = PART_MODE_NPN;
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	80 93 08 01 	sts	0x0108, r24
     b08:	51 c0       	rjmp	.+162    	; 0xbac <__stack+0x6ad>
      } else { // Basis has low current
         if((adc.lp_otr < 97) && (adc.hp2 > 3400)) {
     b0a:	e9 85       	ldd	r30, Y+9	; 0x09
     b0c:	fa 85       	ldd	r31, Y+10	; 0x0a
     b0e:	e1 36       	cpi	r30, 0x61	; 97
     b10:	f1 05       	cpc	r31, r1
     b12:	08 f0       	brcs	.+2      	; 0xb16 <__stack+0x617>
     b14:	4b c0       	rjmp	.+150    	; 0xbac <__stack+0x6ad>
     b16:	f9 e4       	ldi	r31, 0x49	; 73
     b18:	6f 16       	cp	r6, r31
     b1a:	fd e0       	ldi	r31, 0x0D	; 13
     b1c:	7f 06       	cpc	r7, r31
     b1e:	08 f4       	brcc	.+2      	; 0xb22 <__stack+0x623>
     b20:	45 c0       	rjmp	.+138    	; 0xbac <__stack+0x6ad>
            //if flow voltage in switched off mode low enough?
            //(since D-Mode-FET will be detected in error as E-Mode )
            PartFound = PART_FET;	//N-Kanal-MOSFET is found (Basis/Gate will Not be pulled down)
     b22:	83 e0       	ldi	r24, 0x03	; 3
     b24:	80 93 09 01 	sts	0x0109, r24
            PartMode = PART_MODE_N_E_MOS;
     b28:	82 e0       	ldi	r24, 0x02	; 2
     b2a:	80 93 08 01 	sts	0x0108, r24
            lcd_line3();
            lcd_data('N');
            lcd_data('F');
            wait1s();
#endif
            PinMSK = HiADCm & 7;
     b2e:	e9 80       	ldd	r14, Y+1	; 0x01
     b30:	27 e0       	ldi	r18, 0x07	; 7
     b32:	e2 22       	and	r14, r18
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
     b34:	82 2d       	mov	r24, r2
     b36:	80 64       	ori	r24, 0x40	; 64
     b38:	80 93 7c 00 	sts	0x007C, r24
            gthvoltage = 1;			// round up ((1*4)/9)
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	90 93 59 01 	sts	0x0159, r25
     b44:	80 93 58 01 	sts	0x0158, r24
     b48:	7b e0       	ldi	r23, 0x0B	; 11
     b4a:	a7 2e       	mov	r10, r23
            for(ii=0;ii<11;ii++) {
            	wdt_reset();
     b4c:	a8 95       	wdr
            	ChargePin10ms(TriPinRL,0);	// discharge Gate 10ms with RL 
     b4e:	8d 2d       	mov	r24, r13
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	0e 94 a5 01 	call	0x34a	; 0x34a <ChargePin10ms>
                R_DDR = HiPinRL | TriPinRH;	// slowly charge Gate 
     b56:	04 b9       	out	0x04, r16	; 4
                R_PORT = HiPinRL | TriPinRH;
     b58:	05 b9       	out	0x05, r16	; 5
            	while ((ADC_PIN&PinMSK));  // Wait, until the MOSFET switch and Drain moved to low 
     b5a:	86 b1       	in	r24, 0x06	; 6
     b5c:	8e 21       	and	r24, r14
     b5e:	e9 f7       	brne	.-6      	; 0xb5a <__stack+0x65b>
                R_DDR = HiPinRL;
     b60:	c4 b8       	out	0x04, r12	; 4
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
     b62:	80 91 7a 00 	lds	r24, 0x007A
     b66:	80 64       	ori	r24, 0x40	; 64
     b68:	80 93 7a 00 	sts	0x007A, r24
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
     b6c:	80 91 7a 00 	lds	r24, 0x007A
     b70:	86 fd       	sbrc	r24, 6
     b72:	fc cf       	rjmp	.-8      	; 0xb6c <__stack+0x66d>
            	gthvoltage += ADCW;		// add result of ADC
     b74:	80 91 78 00 	lds	r24, 0x0078
     b78:	90 91 79 00 	lds	r25, 0x0079
     b7c:	20 91 58 01 	lds	r18, 0x0158
     b80:	30 91 59 01 	lds	r19, 0x0159
     b84:	82 0f       	add	r24, r18
     b86:	93 1f       	adc	r25, r19
     b88:	90 93 59 01 	sts	0x0159, r25
     b8c:	80 93 58 01 	sts	0x0158, r24
     b90:	aa 94       	dec	r10
#endif
            PinMSK = HiADCm & 7;
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
            gthvoltage = 1;			// round up ((1*4)/9)
            for(ii=0;ii<11;ii++) {
     b92:	e1 f6       	brne	.-72     	; 0xb4c <__stack+0x64d>
            	gthvoltage += ADCW;		// add result of ADC
#if DebugOut == 5
                lcd_data('.');
#endif
            }
            gthvoltage *= 4;	//is equal to 44 * ADCW
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	88 0f       	add	r24, r24
     b9a:	99 1f       	adc	r25, r25
            gthvoltage /= 9;	//scale to mV
     b9c:	69 e0       	ldi	r22, 0x09	; 9
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <__udivmodhi4>
     ba4:	70 93 59 01 	sts	0x0159, r23
     ba8:	60 93 58 01 	sts	0x0158, r22
         }
      }
savenresult:
      trans.b = TristatePin;	// save Pin-constellation
     bac:	20 92 54 01 	sts	0x0154, r2
      trans.c = HighPin;
     bb0:	10 93 55 01 	sts	0x0155, r17
      trans.e = LowPin;
     bb4:	30 92 56 01 	sts	0x0156, r3
   } // end component conduct => npn
   ADC_DDR = TXD_MSK;		// switch all ADC-Ports to input
     bb8:	88 e0       	ldi	r24, 0x08	; 8
     bba:	87 b9       	out	0x07, r24	; 7
   ADC_PORT = TXD_VAL;		// switch all ADC-Ports to 0 (no Pull up)
     bbc:	88 b9       	out	0x08, r24	; 8
   //Fertig
   //end das component has no connection between HighPin and LowPin
   goto widmes;
     bbe:	69 c0       	rjmp	.+210    	; 0xc92 <__stack+0x793>
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
     bc0:	88 e0       	ldi	r24, 0x08	; 8
     bc2:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;	//Low-Pin fix to GND
     bc4:	3b 81       	ldd	r19, Y+3	; 0x03
     bc6:	37 b9       	out	0x07, r19	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     bc8:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
     bca:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
     bcc:	8d 2d       	mov	r24, r13
     bce:	61 e0       	ldi	r22, 0x01	; 1
     bd0:	0e 94 a5 01 	call	0x34a	; 0x34a <ChargePin10ms>
  adc.lp_otr = W5msReadADC(HighPin) - ReadADC(LowPin);
     bd4:	81 2f       	mov	r24, r17
     bd6:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
     bda:	4c 01       	movw	r8, r24
     bdc:	83 2d       	mov	r24, r3
     bde:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
     be2:	88 1a       	sub	r8, r24
     be4:	99 0a       	sbc	r9, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
     be6:	88 85       	ldd	r24, Y+8	; 0x08
     be8:	84 b9       	out	0x04, r24	; 4
  R_PORT = HiPinRH;
     bea:	85 b9       	out	0x05, r24	; 5
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
     bec:	81 2f       	mov	r24, r17
     bee:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
     bf2:	5c 01       	movw	r10, r24

  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     bf4:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
     bf6:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
     bf8:	8d 2d       	mov	r24, r13
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	0e 94 a5 01 	call	0x34a	; 0x34a <ChargePin10ms>
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
     c00:	81 2f       	mov	r24, r17
     c02:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
     c06:	7c 01       	movw	r14, r24
     c08:	83 2d       	mov	r24, r3
     c0a:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
     c0e:	e8 1a       	sub	r14, r24
     c10:	f9 0a       	sbc	r15, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
     c12:	98 85       	ldd	r25, Y+8	; 0x08
     c14:	94 b9       	out	0x04, r25	; 4
  R_PORT = HiPinRH;
     c16:	95 b9       	out	0x05, r25	; 5
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
     c18:	81 2f       	mov	r24, r17
     c1a:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
     c1e:	e8 14       	cp	r14, r8
     c20:	f9 04       	cpc	r15, r9
     c22:	18 f0       	brcs	.+6      	; 0xc2a <__stack+0x72b>
  R_PORT = HiPinRL;
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
  R_PORT = HiPinRH;
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
     c24:	a8 2e       	mov	r10, r24
     c26:	b9 2e       	mov	r11, r25
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
     c28:	47 01       	movw	r8, r14
  lcd_string(utoa(adc.hp3,outval,10));
  lcd_space();
  wait1s();
#endif

  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
     c2a:	c4 01       	movw	r24, r8
     c2c:	87 59       	subi	r24, 0x97	; 151
     c2e:	90 40       	sbci	r25, 0x00	; 0
     c30:	a1 e1       	ldi	r26, 0x11	; 17
     c32:	89 38       	cpi	r24, 0x89	; 137
     c34:	9a 07       	cpc	r25, r26
     c36:	68 f5       	brcc	.+90     	; 0xc92 <__stack+0x793>
     c38:	c5 01       	movw	r24, r10
     c3a:	53 e0       	ldi	r21, 0x03	; 3
     c3c:	96 95       	lsr	r25
     c3e:	87 95       	ror	r24
     c40:	5a 95       	dec	r21
     c42:	e1 f7       	brne	.-8      	; 0xc3c <__stack+0x73d>
     c44:	8a 0d       	add	r24, r10
     c46:	9b 1d       	adc	r25, r11
     c48:	88 15       	cp	r24, r8
     c4a:	99 05       	cpc	r25, r9
     c4c:	10 f5       	brcc	.+68     	; 0xc92 <__stack+0x793>
     c4e:	43 e0       	ldi	r20, 0x03	; 3
     c50:	aa 0c       	add	r10, r10
     c52:	bb 1c       	adc	r11, r11
     c54:	4a 95       	dec	r20
     c56:	e1 f7       	brne	.-8      	; 0xc50 <__stack+0x751>
     c58:	8a 14       	cp	r8, r10
     c5a:	9b 04       	cpc	r9, r11
     c5c:	d0 f4       	brcc	.+52     	; 0xc92 <__stack+0x793>
     //voltage is above 0,15V and below 4,64V => Ok
     if((PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
     c5e:	80 91 09 01 	lds	r24, 0x0109
     c62:	88 23       	and	r24, r24
     c64:	11 f0       	breq	.+4      	; 0xc6a <__stack+0x76b>
     c66:	86 30       	cpi	r24, 0x06	; 6
     c68:	19 f4       	brne	.+6      	; 0xc70 <__stack+0x771>
        PartFound = PART_DIODE;	//mark for diode only, if no other component is found
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	80 93 09 01 	sts	0x0109, r24
				//since there is a problem with Transistors with a protection diode
#if DebugOut == 4
        lcd_data('D');
#endif
     }
     diodes[NumOfDiodes].Anode = HighPin;
     c70:	80 91 07 01 	lds	r24, 0x0107
     c74:	e8 2f       	mov	r30, r24
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	ee 0f       	add	r30, r30
     c7a:	ff 1f       	adc	r31, r31
     c7c:	ee 0f       	add	r30, r30
     c7e:	ff 1f       	adc	r31, r31
     c80:	e2 59       	subi	r30, 0x92	; 146
     c82:	fe 4f       	sbci	r31, 0xFE	; 254
     c84:	10 83       	st	Z, r17
     diodes[NumOfDiodes].Cathode = LowPin;
     c86:	31 82       	std	Z+1, r3	; 0x01
     diodes[NumOfDiodes].Voltage = adc.hp1;	// voltage in Millivolt 
     c88:	93 82       	std	Z+3, r9	; 0x03
     c8a:	82 82       	std	Z+2, r8	; 0x02
     NumOfDiodes++;
     c8c:	8f 5f       	subi	r24, 0xFF	; 255
     c8e:	80 93 07 01 	sts	0x0107, r24
#if DebugOut == 4
  lcd_data(NumOfDiodes+'0');
#endif

widmes:
  if (NumOfDiodes > 0) goto clean_ports;
     c92:	80 91 07 01 	lds	r24, 0x0107
     c96:	88 23       	and	r24, r24
     c98:	09 f0       	breq	.+2      	; 0xc9c <__stack+0x79d>
     c9a:	12 c2       	rjmp	.+1060   	; 0x10c0 <__stack+0xbc1>
  // resistor measurement
  wdt_reset();
     c9c:	a8 95       	wdr
// U_SCALE can be set to 4 for better resolution of ReadADC result
#if U_SCALE != 1
  ADCconfig.U_AVCC *= U_SCALE;	// scale to higher resolution, mV scale is not required
     c9e:	80 91 3f 01 	lds	r24, 0x013F
     ca2:	90 91 40 01 	lds	r25, 0x0140
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	90 93 40 01 	sts	0x0140, r25
     cb2:	80 93 3f 01 	sts	0x013F, r24
  ADCconfig.U_Bandgap *= U_SCALE;
     cb6:	80 91 3d 01 	lds	r24, 0x013D
     cba:	90 91 3e 01 	lds	r25, 0x013E
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	90 93 3e 01 	sts	0x013E, r25
     cca:	80 93 3d 01 	sts	0x013D, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = R_ANZ_MESS;	// switch to special number of repetitions
     cce:	8e eb       	ldi	r24, 0xBE	; 190
     cd0:	80 93 3b 01 	sts	0x013B, r24
#endif
  #define MAX_REPEAT (700 / (5 + R_ANZ_MESS/8))
  ADC_PORT = TXD_VAL;
     cd4:	88 e0       	ldi	r24, 0x08	; 8
     cd6:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
     cd8:	bb 81       	ldd	r27, Y+3	; 0x03
     cda:	b7 b9       	out	0x07, r27	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     cdc:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;	
     cde:	c5 b8       	out	0x05, r12	; 5
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
     ce0:	ee 24       	eor	r14, r14
     ce2:	ff 24       	eor	r15, r15
  for (ii=1;ii<MAX_REPEAT;ii++) {
     ce4:	21 e0       	ldi	r18, 0x01	; 1
     ce6:	01 c0       	rjmp	.+2      	; 0xcea <__stack+0x7eb>
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     ce8:	7c 01       	movw	r14, r24
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     cea:	83 2d       	mov	r24, r3
     cec:	2b 8b       	std	Y+19, r18	; 0x13
     cee:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
     cf2:	08 2f       	mov	r16, r24
     cf4:	49 2e       	mov	r4, r25
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     cf6:	81 2f       	mov	r24, r17
     cf8:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
     udiff = adc.hp1 - adc.hp2;
     cfc:	ac 01       	movw	r20, r24
     cfe:	4e 19       	sub	r20, r14
     d00:	5f 09       	sbc	r21, r15
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     d02:	2b 89       	ldd	r18, Y+19	; 0x13
     d04:	57 ff       	sbrs	r21, 7
     d06:	03 c0       	rjmp	.+6      	; 0xd0e <__stack+0x80f>
     d08:	50 95       	com	r21
     d0a:	41 95       	neg	r20
     d0c:	5f 4f       	sbci	r21, 0xFF	; 255
     d0e:	43 30       	cpi	r20, 0x03	; 3
     d10:	51 05       	cpc	r21, r1
     d12:	84 f4       	brge	.+32     	; 0xd34 <__stack+0x835>
     d14:	ac 01       	movw	r20, r24
  adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
#endif
  if (adc.tp1 > adc.hp1) {
     adc.tp1 = adc.hp1;
  }
  R_PORT = 0;
     d16:	15 b8       	out	0x05, r1	; 5
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (GND)
     d18:	e8 85       	ldd	r30, Y+8	; 0x08
     d1a:	e4 b9       	out	0x04, r30	; 4
  adc.hp2 = W5msReadADC(HighPin);	// read voltage, should be down
     d1c:	81 2f       	mov	r24, r17
     d1e:	4e 8b       	std	Y+22, r20	; 0x16
     d20:	5b 8b       	std	Y+19, r21	; 0x13
     d22:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
  if (adc.hp2 > (20*U_SCALE)) {
     d26:	4e 89       	ldd	r20, Y+22	; 0x16
     d28:	5b 89       	ldd	r21, Y+19	; 0x13
     d2a:	81 35       	cpi	r24, 0x51	; 81
     d2c:	91 05       	cpc	r25, r1
     d2e:	08 f0       	brcs	.+2      	; 0xd32 <__stack+0x833>
     d30:	ac c1       	rjmp	.+856    	; 0x108a <__stack+0xb8b>
     d32:	05 c0       	rjmp	.+10     	; 0xd3e <__stack+0x83f>
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     udiff = adc.hp1 - adc.hp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.hp2 = adc.hp1;
     wdt_reset();
     d34:	a8 95       	wdr
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     d36:	2f 5f       	subi	r18, 0xFF	; 255
     d38:	29 31       	cpi	r18, 0x19	; 25
     d3a:	b1 f6       	brne	.-84     	; 0xce8 <__stack+0x7e9>
     d3c:	a6 c1       	rjmp	.+844    	; 0x108a <__stack+0xb8b>
     lcd_string(utoa(adc.hp2, outval, 10));
     lcd_space();
#endif
     goto testend;
  }
  R_PORT = HiPinRH;		//switch R_H for High-Pin to VCC
     d3e:	f8 85       	ldd	r31, Y+8	; 0x08
     d40:	f5 b9       	out	0x05, r31	; 5
  adc.hp2 = W5msReadADC(HighPin);	// voltage at resistor Rx with R_H
     d42:	81 2f       	mov	r24, r17
     d44:	4e 8b       	std	Y+22, r20	; 0x16
     d46:	5b 8b       	std	Y+19, r21	; 0x13
     d48:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
     d4c:	7c 01       	movw	r14, r24

  ADC_DDR = HiADCm;		//switch High-Pin to output
     d4e:	29 81       	ldd	r18, Y+1	; 0x01
     d50:	27 b9       	out	0x07, r18	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
     d52:	28 b9       	out	0x08, r18	; 8
  R_PORT = 0;
     d54:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
     d56:	3a 81       	ldd	r19, Y+2	; 0x02
     d58:	34 b9       	out	0x04, r19	; 4
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
     d5a:	aa 24       	eor	r10, r10
     d5c:	bb 24       	eor	r11, r11
  for (ii=1;ii<MAX_REPEAT;ii++) {
     d5e:	21 e0       	ldi	r18, 0x01	; 1
     d60:	4e 89       	ldd	r20, Y+22	; 0x16
     d62:	5b 89       	ldd	r21, Y+19	; 0x13
     d64:	3a 01       	movw	r6, r20
     d66:	01 c0       	rjmp	.+2      	; 0xd6a <__stack+0x86b>
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     d68:	56 01       	movw	r10, r12
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     d6a:	81 2f       	mov	r24, r17
     d6c:	2b 8b       	std	Y+19, r18	; 0x13
     d6e:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
     d72:	4c 01       	movw	r8, r24
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     d74:	83 2d       	mov	r24, r3
     d76:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
     d7a:	6c 01       	movw	r12, r24
     udiff = adc.lp1 - adc.lp2;
     d7c:	8a 19       	sub	r24, r10
     d7e:	9b 09       	sbc	r25, r11
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     d80:	2b 89       	ldd	r18, Y+19	; 0x13
     d82:	97 ff       	sbrs	r25, 7
     d84:	03 c0       	rjmp	.+6      	; 0xd8c <__stack+0x88d>
     d86:	90 95       	com	r25
     d88:	81 95       	neg	r24
     d8a:	9f 4f       	sbci	r25, 0xFF	; 255
     d8c:	83 30       	cpi	r24, 0x03	; 3
     d8e:	91 05       	cpc	r25, r1
     d90:	8c f4       	brge	.+34     	; 0xdb4 <__stack+0x8b5>
     d92:	a3 01       	movw	r20, r6
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = MEM_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	88 0f       	add	r24, r24
  adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
#endif
  if (adc.tp2 < adc.lp1) {
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
     d98:	84 b9       	out	0x04, r24	; 4
  adc.lp2 = W5msReadADC(LowPin);
     d9a:	83 2d       	mov	r24, r3
     d9c:	6e 8a       	std	Y+22, r6	; 0x16
     d9e:	5b 8b       	std	Y+19, r21	; 0x13
     da0:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
     da4:	3c 01       	movw	r6, r24
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
     da6:	4e 89       	ldd	r20, Y+22	; 0x16
     da8:	5b 89       	ldd	r21, Y+19	; 0x13
     daa:	84 e4       	ldi	r24, 0x44	; 68
     dac:	40 3c       	cpi	r20, 0xC0	; 192
     dae:	58 07       	cpc	r21, r24
     db0:	30 f0       	brcs	.+12     	; 0xdbe <__stack+0x8bf>
     db2:	0c c0       	rjmp	.+24     	; 0xdcc <__stack+0x8cd>
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     udiff = adc.lp1 - adc.lp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.lp2 = adc.lp1;
     wdt_reset();
     db4:	a8 95       	wdr
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
  R_PORT = 0;
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     db6:	2f 5f       	subi	r18, 0xFF	; 255
     db8:	29 31       	cpi	r18, 0x19	; 25
     dba:	b1 f6       	brne	.-84     	; 0xd68 <__stack+0x869>
     dbc:	66 c1       	rjmp	.+716    	; 0x108a <__stack+0xb8b>
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
  adc.lp2 = W5msReadADC(LowPin);
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
     dbe:	95 e8       	ldi	r25, 0x85	; 133
     dc0:	e9 16       	cp	r14, r25
     dc2:	91 e0       	ldi	r25, 0x01	; 1
     dc4:	f9 06       	cpc	r15, r25
     dc6:	08 f0       	brcs	.+2      	; 0xdca <__stack+0x8cb>
     dc8:	60 c1       	rjmp	.+704    	; 0x108a <__stack+0xb8b>
     dca:	06 c0       	rjmp	.+12     	; 0xdd8 <__stack+0x8d9>
     lcd_data('F');
#endif
     goto testend; 
  }
//    if((adc.hp2 + (adc.hp2 / 61)) < adc.hp1)
  if (adc.hp2 < (4972*U_SCALE)) { 
     dcc:	a0 eb       	ldi	r26, 0xB0	; 176
     dce:	ea 16       	cp	r14, r26
     dd0:	ad e4       	ldi	r26, 0x4D	; 77
     dd2:	fa 06       	cpc	r15, r26
     dd4:	08 f0       	brcs	.+2      	; 0xdd8 <__stack+0x8d9>
     dd6:	59 c1       	rjmp	.+690    	; 0x108a <__stack+0xb8b>
     // voltage breaks down with low test current and it is not nearly shorted  => resistor
//     if (adc.lp1 < 120) { // take measurement with R_H 
     if (adc.lp1 < (169*U_SCALE)) { // take measurement with R_H 
     dd8:	b4 ea       	ldi	r27, 0xA4	; 164
     dda:	cb 16       	cp	r12, r27
     ddc:	b2 e0       	ldi	r27, 0x02	; 2
     dde:	db 06       	cpc	r13, r27
     de0:	08 f0       	brcs	.+2      	; 0xde4 <__stack+0x8e5>
     de2:	72 c0       	rjmp	.+228    	; 0xec8 <__stack+0x9c9>
        ii = 'H';
        if (adc.lp2 < (38*U_SCALE)) {
     de4:	e8 e9       	ldi	r30, 0x98	; 152
     de6:	6e 16       	cp	r6, r30
     de8:	71 04       	cpc	r7, r1
     dea:	08 f4       	brcc	.+2      	; 0xdee <__stack+0x8ef>
     dec:	4e c1       	rjmp	.+668    	; 0x108a <__stack+0xb8b>
           // measurement > 60MOhm to big resistance
           goto testend;
        }
        // two measurements with R_H resistors (470k) are made:
        // lirx1 (measurement at HighPin)
        lirx1 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)adc.hp2 / (ADCconfig.U_AVCC - adc.hp2);
     dee:	80 90 3f 01 	lds	r8, 0x013F
     df2:	90 90 40 01 	lds	r9, 0x0140
     df6:	b7 01       	movw	r22, r14
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	28 e9       	ldi	r18, 0x98	; 152
     dfe:	37 eb       	ldi	r19, 0xB7	; 183
     e00:	40 e0       	ldi	r20, 0x00	; 0
     e02:	50 e0       	ldi	r21, 0x00	; 0
     e04:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
     e08:	94 01       	movw	r18, r8
     e0a:	2e 19       	sub	r18, r14
     e0c:	3f 09       	sbc	r19, r15
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	50 e0       	ldi	r21, 0x00	; 0
     e12:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
     e16:	59 01       	movw	r10, r18
     e18:	6a 01       	movw	r12, r20
        // lirx2 (measurement at LowPin)
        lirx2 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)(ADCconfig.U_AVCC - adc.lp2) / adc.lp2;
     e1a:	86 18       	sub	r8, r6
     e1c:	97 08       	sbc	r9, r7
     e1e:	b4 01       	movw	r22, r8
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	28 e9       	ldi	r18, 0x98	; 152
     e26:	37 eb       	ldi	r19, 0xB7	; 183
     e28:	40 e0       	ldi	r20, 0x00	; 0
     e2a:	50 e0       	ldi	r21, 0x00	; 0
     e2c:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
     e30:	93 01       	movw	r18, r6
     e32:	40 e0       	ldi	r20, 0x00	; 0
     e34:	50 e0       	ldi	r21, 0x00	; 0
     e36:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
#define FAKT_LOW 2		//resolution is about twice as good
#else
#define FAKT_LOW 4		//resolution is about four times better
#endif
#ifdef AUTOSCALE_ADC
        if (adc.hp2 < U_INT_LIMIT) {
     e3a:	f8 e7       	ldi	r31, 0x78	; 120
     e3c:	ef 16       	cp	r14, r31
     e3e:	ff e0       	ldi	r31, 0x0F	; 15
     e40:	ff 06       	cpc	r15, r31
     e42:	70 f4       	brcc	.+28     	; 0xe60 <__stack+0x961>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_H measurements
     e44:	c6 01       	movw	r24, r12
     e46:	b5 01       	movw	r22, r10
     e48:	b2 e0       	ldi	r27, 0x02	; 2
     e4a:	66 0f       	add	r22, r22
     e4c:	77 1f       	adc	r23, r23
     e4e:	88 1f       	adc	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	ba 95       	dec	r27
     e54:	d1 f7       	brne	.-12     	; 0xe4a <__stack+0x94b>
     e56:	62 0f       	add	r22, r18
     e58:	73 1f       	adc	r23, r19
     e5a:	84 1f       	adc	r24, r20
     e5c:	95 1f       	adc	r25, r21
     e5e:	12 c0       	rjmp	.+36     	; 0xe84 <__stack+0x985>
        } else if (adc.lp2 < U_INT_LIMIT){
     e60:	88 e7       	ldi	r24, 0x78	; 120
     e62:	68 16       	cp	r6, r24
     e64:	8f e0       	ldi	r24, 0x0F	; 15
     e66:	78 06       	cpc	r7, r24
     e68:	a0 f4       	brcc	.+40     	; 0xe92 <__stack+0x993>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
     e6a:	ca 01       	movw	r24, r20
     e6c:	b9 01       	movw	r22, r18
     e6e:	a2 e0       	ldi	r26, 0x02	; 2
     e70:	66 0f       	add	r22, r22
     e72:	77 1f       	adc	r23, r23
     e74:	88 1f       	adc	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	aa 95       	dec	r26
     e7a:	d1 f7       	brne	.-12     	; 0xe70 <__stack+0x971>
     e7c:	6a 0d       	add	r22, r10
     e7e:	7b 1d       	adc	r23, r11
     e80:	8c 1d       	adc	r24, r12
     e82:	9d 1d       	adc	r25, r13
     e84:	25 e0       	ldi	r18, 0x05	; 5
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	40 e0       	ldi	r20, 0x00	; 0
     e8a:	50 e0       	ldi	r21, 0x00	; 0
     e8c:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
     e90:	08 c0       	rjmp	.+16     	; 0xea2 <__stack+0x9a3>
        } else 
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_H measurements
     e92:	2a 0d       	add	r18, r10
     e94:	3b 1d       	adc	r19, r11
     e96:	4c 1d       	adc	r20, r12
     e98:	5d 1d       	adc	r21, r13
     e9a:	56 95       	lsr	r21
     e9c:	47 95       	ror	r20
     e9e:	37 95       	ror	r19
     ea0:	27 95       	ror	r18
        }
        lrx1 *= 100;
     ea2:	ca 01       	movw	r24, r20
     ea4:	b9 01       	movw	r22, r18
     ea6:	24 e6       	ldi	r18, 0x64	; 100
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	50 e0       	ldi	r21, 0x00	; 0
     eae:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
     eb2:	6b 01       	movw	r12, r22
     eb4:	7c 01       	movw	r14, r24
        lrx1 += RH_OFFSET;			// add constant for correction of systematic error
     eb6:	8c ea       	ldi	r24, 0xAC	; 172
     eb8:	9d e0       	ldi	r25, 0x0D	; 13
     eba:	a0 e0       	ldi	r26, 0x00	; 0
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	c8 0e       	add	r12, r24
     ec0:	d9 1e       	adc	r13, r25
     ec2:	ea 1e       	adc	r14, r26
     ec4:	fb 1e       	adc	r15, r27
     ec6:	78 c0       	rjmp	.+240    	; 0xfb8 <__stack+0xab9>
     ec8:	80 2f       	mov	r24, r16
     eca:	94 2d       	mov	r25, r4
     ecc:	48 17       	cp	r20, r24
     ece:	59 07       	cpc	r21, r25
     ed0:	08 f4       	brcc	.+2      	; 0xed4 <__stack+0x9d5>
     ed2:	ca 01       	movw	r24, r20
     ed4:	76 01       	movw	r14, r12
     ed6:	c8 14       	cp	r12, r8
     ed8:	d9 04       	cpc	r13, r9
     eda:	08 f4       	brcc	.+2      	; 0xede <__stack+0x9df>
     edc:	74 01       	movw	r14, r8
     ede:	3c 01       	movw	r6, r24
     ee0:	84 17       	cp	r24, r20
     ee2:	95 07       	cpc	r25, r21
     ee4:	08 f4       	brcc	.+2      	; 0xee8 <__stack+0x9e9>
     ee6:	3a 01       	movw	r6, r20
        // two measurements with R_L resistors (680) are made:
        // lirx1 (measurement at HighPin)
        if (adc.tp1 > adc.hp1) {
           adc.hp1 = adc.tp1;		//diff negativ is illegal
        }
        lirx1 =(unsigned long)RR680PL * (unsigned long)(adc.hp1 - adc.tp1) / (ADCconfig.U_AVCC - adc.hp1);
     ee8:	b3 01       	movw	r22, r6
     eea:	68 1b       	sub	r22, r24
     eec:	79 0b       	sbc	r23, r25
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	20 91 0a 01 	lds	r18, 0x010A
     ef6:	30 91 0b 01 	lds	r19, 0x010B
     efa:	40 e0       	ldi	r20, 0x00	; 0
     efc:	50 e0       	ldi	r21, 0x00	; 0
     efe:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
     f02:	20 91 3f 01 	lds	r18, 0x013F
     f06:	30 91 40 01 	lds	r19, 0x0140
     f0a:	26 19       	sub	r18, r6
     f0c:	37 09       	sbc	r19, r7
     f0e:	40 e0       	ldi	r20, 0x00	; 0
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
     f16:	49 01       	movw	r8, r18
     f18:	5a 01       	movw	r10, r20
     f1a:	27 01       	movw	r4, r14
     f1c:	ce 14       	cp	r12, r14
     f1e:	df 04       	cpc	r13, r15
     f20:	08 f4       	brcc	.+2      	; 0xf24 <__stack+0xa25>
     f22:	26 01       	movw	r4, r12
        if (adc.tp2 < adc.lp1) {
           adc.lp1 = adc.tp2;		//diff negativ is illegal
        }
        // lirx2 (Measurement at LowPin)
        lirx2 =(unsigned long)RR680MI * (unsigned long)(adc.tp2 -adc.lp1) / adc.lp1;
     f24:	e4 18       	sub	r14, r4
     f26:	f5 08       	sbc	r15, r5
     f28:	b7 01       	movw	r22, r14
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	20 91 04 01 	lds	r18, 0x0104
     f32:	30 91 05 01 	lds	r19, 0x0105
     f36:	40 e0       	ldi	r20, 0x00	; 0
     f38:	50 e0       	ldi	r21, 0x00	; 0
     f3a:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
     f3e:	92 01       	movw	r18, r4
     f40:	40 e0       	ldi	r20, 0x00	; 0
     f42:	50 e0       	ldi	r21, 0x00	; 0
     f44:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
//     lrx1 =(unsigned long)R_L_VAL * (unsigned long)adc.hp1 / (adc.hp3 - adc.hp1);

#ifdef AUTOSCALE_ADC
        if (adc.hp1 < U_INT_LIMIT) {
     f48:	98 e7       	ldi	r25, 0x78	; 120
     f4a:	69 16       	cp	r6, r25
     f4c:	9f e0       	ldi	r25, 0x0F	; 15
     f4e:	79 06       	cpc	r7, r25
     f50:	70 f4       	brcc	.+28     	; 0xf6e <__stack+0xa6f>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_L measurements
     f52:	c5 01       	movw	r24, r10
     f54:	b4 01       	movw	r22, r8
     f56:	e2 e0       	ldi	r30, 0x02	; 2
     f58:	66 0f       	add	r22, r22
     f5a:	77 1f       	adc	r23, r23
     f5c:	88 1f       	adc	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	ea 95       	dec	r30
     f62:	d1 f7       	brne	.-12     	; 0xf58 <__stack+0xa59>
     f64:	62 0f       	add	r22, r18
     f66:	73 1f       	adc	r23, r19
     f68:	84 1f       	adc	r24, r20
     f6a:	95 1f       	adc	r25, r21
     f6c:	12 c0       	rjmp	.+36     	; 0xf92 <__stack+0xa93>
        } else if (adc.lp1 < U_INT_LIMIT) {
     f6e:	a8 e7       	ldi	r26, 0x78	; 120
     f70:	4a 16       	cp	r4, r26
     f72:	af e0       	ldi	r26, 0x0F	; 15
     f74:	5a 06       	cpc	r5, r26
     f76:	b0 f4       	brcc	.+44     	; 0xfa4 <__stack+0xaa5>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
     f78:	ca 01       	movw	r24, r20
     f7a:	b9 01       	movw	r22, r18
     f7c:	52 e0       	ldi	r21, 0x02	; 2
     f7e:	66 0f       	add	r22, r22
     f80:	77 1f       	adc	r23, r23
     f82:	88 1f       	adc	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	5a 95       	dec	r21
     f88:	d1 f7       	brne	.-12     	; 0xf7e <__stack+0xa7f>
     f8a:	68 0d       	add	r22, r8
     f8c:	79 1d       	adc	r23, r9
     f8e:	8a 1d       	adc	r24, r10
     f90:	9b 1d       	adc	r25, r11
     f92:	25 e0       	ldi	r18, 0x05	; 5
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	40 e0       	ldi	r20, 0x00	; 0
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
     f9e:	69 01       	movw	r12, r18
     fa0:	7a 01       	movw	r14, r20
     fa2:	0a c0       	rjmp	.+20     	; 0xfb8 <__stack+0xab9>
        } else
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_L measurements
     fa4:	69 01       	movw	r12, r18
     fa6:	7a 01       	movw	r14, r20
     fa8:	c8 0c       	add	r12, r8
     faa:	d9 1c       	adc	r13, r9
     fac:	ea 1c       	adc	r14, r10
     fae:	fb 1c       	adc	r15, r11
     fb0:	f6 94       	lsr	r15
     fb2:	e7 94       	ror	r14
     fb4:	d7 94       	ror	r13
     fb6:	c7 94       	ror	r12
  lcd_line4();
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
     fb8:	80 91 09 01 	lds	r24, 0x0109
     fbc:	82 30       	cpi	r24, 0x02	; 2
     fbe:	18 f0       	brcs	.+6      	; 0xfc6 <__stack+0xac7>
     fc0:	86 30       	cpi	r24, 0x06	; 6
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <__stack+0xac7>
     fc4:	62 c0       	rjmp	.+196    	; 0x108a <__stack+0xb8b>
        for (ii=0; ii<ResistorsFound; ii++) {
     fc6:	50 91 57 01 	lds	r21, 0x0157
     fca:	40 e0       	ldi	r20, 0x00	; 0
           // search measurements with inverse polarity 
           thisR = &resis[ii];
           if (thisR->rt != TristatePin) {
     fcc:	8b e0       	ldi	r24, 0x0B	; 11
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	3e c0       	rjmp	.+124    	; 0x104e <__stack+0xb4f>
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
           // search measurements with inverse polarity 
           thisR = &resis[ii];
     fd2:	24 2f       	mov	r18, r20
     fd4:	30 e0       	ldi	r19, 0x00	; 0
           if (thisR->rt != TristatePin) {
     fd6:	28 9f       	mul	r18, r24
     fd8:	f0 01       	movw	r30, r0
     fda:	29 9f       	mul	r18, r25
     fdc:	f0 0d       	add	r31, r0
     fde:	38 9f       	mul	r19, r24
     fe0:	f0 0d       	add	r31, r0
     fe2:	11 24       	eor	r1, r1
     fe4:	e6 5e       	subi	r30, 0xE6	; 230
     fe6:	fe 4f       	sbci	r31, 0xFE	; 254
     fe8:	22 85       	ldd	r18, Z+10	; 0x0a
     fea:	22 15       	cp	r18, r2
     fec:	11 f0       	breq	.+4      	; 0xff2 <__stack+0xaf3>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
     fee:	4f 5f       	subi	r20, 0xFF	; 255
     ff0:	2e c0       	rjmp	.+92     	; 0x104e <__stack+0xb4f>
           if (thisR->rt != TristatePin) {
              continue;
           }
           // must be measurement with inverse polarity 
           // resolution is 0.1 Ohm, 1 Ohm = 10 !
           lirx1 = (labs((long)lrx1 - (long)thisR->rx) * 10) / (lrx1 + thisR->rx + 100);
     ff2:	80 80       	ld	r8, Z
     ff4:	91 80       	ldd	r9, Z+1	; 0x01
     ff6:	a2 80       	ldd	r10, Z+2	; 0x02
     ff8:	b3 80       	ldd	r11, Z+3	; 0x03
     ffa:	c7 01       	movw	r24, r14
     ffc:	b6 01       	movw	r22, r12
     ffe:	68 19       	sub	r22, r8
    1000:	79 09       	sbc	r23, r9
    1002:	8a 09       	sbc	r24, r10
    1004:	9b 09       	sbc	r25, r11
    1006:	97 ff       	sbrs	r25, 7
    1008:	07 c0       	rjmp	.+14     	; 0x1018 <__stack+0xb19>
    100a:	90 95       	com	r25
    100c:	80 95       	com	r24
    100e:	70 95       	com	r23
    1010:	61 95       	neg	r22
    1012:	7f 4f       	sbci	r23, 0xFF	; 255
    1014:	8f 4f       	sbci	r24, 0xFF	; 255
    1016:	9f 4f       	sbci	r25, 0xFF	; 255
    1018:	2a e0       	ldi	r18, 0x0A	; 10
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 e0       	ldi	r20, 0x00	; 0
    101e:	50 e0       	ldi	r21, 0x00	; 0
    1020:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
    1024:	a5 01       	movw	r20, r10
    1026:	94 01       	movw	r18, r8
    1028:	2c 59       	subi	r18, 0x9C	; 156
    102a:	3f 4f       	sbci	r19, 0xFF	; 255
    102c:	4f 4f       	sbci	r20, 0xFF	; 255
    102e:	5f 4f       	sbci	r21, 0xFF	; 255
    1030:	2c 0d       	add	r18, r12
    1032:	3d 1d       	adc	r19, r13
    1034:	4e 1d       	adc	r20, r14
    1036:	5f 1d       	adc	r21, r15
    1038:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
           if (lirx1  > 0) {
    103c:	21 15       	cp	r18, r1
    103e:	31 05       	cpc	r19, r1
    1040:	41 05       	cpc	r20, r1
    1042:	51 05       	cpc	r21, r1
    1044:	11 f5       	brne	.+68     	; 0x108a <__stack+0xb8b>
              DisplayValue(lirx1,-1,LCD_CHAR_OMEGA,3)
              lcd_space();
#endif
              goto testend; // <10% mismatch
           }
           PartFound = PART_RESISTOR;
    1046:	86 e0       	ldi	r24, 0x06	; 6
    1048:	80 93 09 01 	sts	0x0109, r24
           goto testend;
    104c:	1e c0       	rjmp	.+60     	; 0x108a <__stack+0xb8b>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    104e:	45 17       	cp	r20, r21
    1050:	08 f4       	brcc	.+2      	; 0x1054 <__stack+0xb55>
    1052:	bf cf       	rjmp	.-130    	; 0xfd2 <__stack+0xad3>
           }
           PartFound = PART_RESISTOR;
           goto testend;
        } // end for
        // no same resistor with the same Tristate-Pin found, new one
        thisR = &resis[ResistorsFound];		// pointer to a free resistor structure
    1054:	25 2f       	mov	r18, r21
    1056:	30 e0       	ldi	r19, 0x00	; 0
        thisR->rx = lrx1;		// save resistor value
    1058:	8b e0       	ldi	r24, 0x0B	; 11
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	28 9f       	mul	r18, r24
    105e:	f0 01       	movw	r30, r0
    1060:	29 9f       	mul	r18, r25
    1062:	f0 0d       	add	r31, r0
    1064:	38 9f       	mul	r19, r24
    1066:	f0 0d       	add	r31, r0
    1068:	11 24       	eor	r1, r1
    106a:	e6 5e       	subi	r30, 0xE6	; 230
    106c:	fe 4f       	sbci	r31, 0xFE	; 254
    106e:	c0 82       	st	Z, r12
    1070:	d1 82       	std	Z+1, r13	; 0x01
    1072:	e2 82       	std	Z+2, r14	; 0x02
    1074:	f3 82       	std	Z+3, r15	; 0x03
#if FLASHEND > 0x1fff
        thisR->lx = 0;			// no inductance
    1076:	14 82       	std	Z+4, r1	; 0x04
    1078:	15 82       	std	Z+5, r1	; 0x05
    107a:	16 82       	std	Z+6, r1	; 0x06
    107c:	17 82       	std	Z+7, r1	; 0x07
#endif
        thisR->ra = LowPin;		// save Pin numbers
    107e:	30 86       	std	Z+8, r3	; 0x08
        thisR->rb = HighPin;
    1080:	11 87       	std	Z+9, r17	; 0x09
        thisR->rt = TristatePin;	// Tristate is saved for easier search of inverse measurement
    1082:	22 86       	std	Z+10, r2	; 0x0a
        ResistorsFound++;			// 1 more resistor found
    1084:	5f 5f       	subi	r21, 0xFF	; 255
    1086:	50 93 57 01 	sts	0x0157, r21
#endif
     }
  }
  testend:
#if U_SCALE != 1
  ADCconfig.U_AVCC /= U_SCALE;		// scale back to mV resolution
    108a:	80 91 3f 01 	lds	r24, 0x013F
    108e:	90 91 40 01 	lds	r25, 0x0140
    1092:	96 95       	lsr	r25
    1094:	87 95       	ror	r24
    1096:	96 95       	lsr	r25
    1098:	87 95       	ror	r24
    109a:	90 93 40 01 	sts	0x0140, r25
    109e:	80 93 3f 01 	sts	0x013F, r24
  ADCconfig.U_Bandgap /= U_SCALE;
    10a2:	80 91 3d 01 	lds	r24, 0x013D
    10a6:	90 91 3e 01 	lds	r25, 0x013E
    10aa:	96 95       	lsr	r25
    10ac:	87 95       	ror	r24
    10ae:	96 95       	lsr	r25
    10b0:	87 95       	ror	r24
    10b2:	90 93 3e 01 	sts	0x013E, r25
    10b6:	80 93 3d 01 	sts	0x013D, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = ANZ_MESS;		// switch back to standard number of repetition
    10ba:	89 e1       	ldi	r24, 0x19	; 25
    10bc:	80 93 3b 01 	sts	0x013B, r24
#if DebugOut < 10
  wait2s();
#endif
#endif
 clean_ports:
  ADC_DDR = TXD_MSK;		// all ADC-Pins Input
    10c0:	88 e0       	ldi	r24, 0x08	; 8
    10c2:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// all ADC outputs to Ground, keine Pull up
    10c4:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// all resistor-outputs to Input
    10c6:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// all resistor-outputs to Ground, no Pull up
    10c8:	15 b8       	out	0x05, r1	; 5
} // end CheckPins()
    10ca:	66 96       	adiw	r28, 0x16	; 22
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	1f 91       	pop	r17
    10dc:	0f 91       	pop	r16
    10de:	ff 90       	pop	r15
    10e0:	ef 90       	pop	r14
    10e2:	df 90       	pop	r13
    10e4:	cf 90       	pop	r12
    10e6:	bf 90       	pop	r11
    10e8:	af 90       	pop	r10
    10ea:	9f 90       	pop	r9
    10ec:	8f 90       	pop	r8
    10ee:	7f 90       	pop	r7
    10f0:	6f 90       	pop	r6
    10f2:	5f 90       	pop	r5
    10f4:	4f 90       	pop	r4
    10f6:	3f 90       	pop	r3
    10f8:	2f 90       	pop	r2
    10fa:	08 95       	ret

000010fc <EntladePins>:

// first discharge any charge of capacitors
void EntladePins() {
    10fc:	af 92       	push	r10
    10fe:	bf 92       	push	r11
    1100:	cf 92       	push	r12
    1102:	df 92       	push	r13
    1104:	ef 92       	push	r14
    1106:	ff 92       	push	r15
    1108:	0f 93       	push	r16
    110a:	1f 93       	push	r17
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
    1110:	ba e0       	ldi	r27, 0x0A	; 10
    1112:	cb 2e       	mov	r12, r27
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
    1114:	a8 e0       	ldi	r26, 0x08	; 8
    1116:	da 2e       	mov	r13, r26
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     R_PORT = 0;			// R-outputs auf 0
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
    1118:	fa e2       	ldi	r31, 0x2A	; 42
    111a:	af 2e       	mov	r10, r31
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
    111c:	e5 e1       	ldi	r30, 0x15	; 21
    111e:	be 2e       	mov	r11, r30
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
    1120:	d7 b8       	out	0x07, r13	; 7
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
    1122:	d8 b8       	out	0x08, r13	; 8
     R_PORT = 0;			// R-outputs auf 0
    1124:	15 b8       	out	0x05, r1	; 5
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
    1126:	a4 b8       	out	0x04, r10	; 4
     adcmv[0] = W5msReadADC(PC0);	// which voltage has Pin 1?
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
    112e:	8c 01       	movw	r16, r24
     adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
    1136:	ec 01       	movw	r28, r24
     adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
    1138:	82 e0       	ldi	r24, 0x02	; 2
    113a:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
     if ((PartFound == PART_CELL) || (adcmv[0] < CAP_EMPTY_LEVEL) & (adcmv[1] < CAP_EMPTY_LEVEL) & (adcmv[2] < CAP_EMPTY_LEVEL)) {
    113e:	20 91 09 01 	lds	r18, 0x0109
    1142:	28 30       	cpi	r18, 0x08	; 8
    1144:	c1 f0       	breq	.+48     	; 0x1176 <EntladePins+0x7a>
    1146:	41 e0       	ldi	r20, 0x01	; 1
    1148:	c4 30       	cpi	r28, 0x04	; 4
    114a:	d1 05       	cpc	r29, r1
    114c:	08 f0       	brcs	.+2      	; 0x1150 <EntladePins+0x54>
    114e:	40 e0       	ldi	r20, 0x00	; 0
    1150:	21 e0       	ldi	r18, 0x01	; 1
    1152:	04 30       	cpi	r16, 0x04	; 4
    1154:	11 05       	cpc	r17, r1
    1156:	08 f0       	brcs	.+2      	; 0x115a <EntladePins+0x5e>
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	42 23       	and	r20, r18
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	21 e0       	ldi	r18, 0x01	; 1
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	84 30       	cpi	r24, 0x04	; 4
    1164:	91 05       	cpc	r25, r1
    1166:	10 f0       	brcs	.+4      	; 0x116c <EntladePins+0x70>
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	24 23       	and	r18, r20
    116e:	35 23       	and	r19, r21
    1170:	21 15       	cp	r18, r1
    1172:	31 05       	cpc	r19, r1
    1174:	21 f0       	breq	.+8      	; 0x117e <EntladePins+0x82>
        ADC_DDR = TXD_MSK;		// switch all ADC-Pins to input
    1176:	88 e0       	ldi	r24, 0x08	; 8
    1178:	87 b9       	out	0x07, r24	; 7
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
    117a:	14 b8       	out	0x04, r1	; 4
        return;
    117c:	4f c0       	rjmp	.+158    	; 0x121c <EntladePins+0x120>
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
    117e:	23 e0       	ldi	r18, 0x03	; 3
    1180:	08 3e       	cpi	r16, 0xE8	; 232
    1182:	12 07       	cpc	r17, r18
    1184:	10 f0       	brcs	.+4      	; 0x118a <EntladePins+0x8e>
  uint8_t lop_cnt;		// loop counter
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
    1186:	28 e0       	ldi	r18, 0x08	; 8
    1188:	01 c0       	rjmp	.+2      	; 0x118c <EntladePins+0x90>
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
        return;
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
        adc_gnd |= (1<<PC0);	//Pin 1 directly to GND
    118a:	29 e0       	ldi	r18, 0x09	; 9
     }
     if (adcmv[1] < 1000) {
    118c:	33 e0       	ldi	r19, 0x03	; 3
    118e:	c8 3e       	cpi	r28, 0xE8	; 232
    1190:	d3 07       	cpc	r29, r19
    1192:	08 f4       	brcc	.+2      	; 0x1196 <EntladePins+0x9a>
        adc_gnd |= (1<<PC1);	//Pin 2 directly to GND
    1194:	22 60       	ori	r18, 0x02	; 2
     }
     if (adcmv[2] < 1000) {
    1196:	33 e0       	ldi	r19, 0x03	; 3
    1198:	88 3e       	cpi	r24, 0xE8	; 232
    119a:	93 07       	cpc	r25, r19
    119c:	08 f4       	brcc	.+2      	; 0x11a0 <EntladePins+0xa4>
        adc_gnd |= (1<<PC2);	//Pin 3 directly to  GND
    119e:	24 60       	ori	r18, 0x04	; 4
     }
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time
    11a0:	27 b9       	out	0x07, r18	; 7

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
    11a2:	b4 b8       	out	0x04, r11	; 4
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    11a4:	c0 e0       	ldi	r28, 0x00	; 0
    11a6:	d0 e0       	ldi	r29, 0x00	; 0
        wdt_reset();
    11a8:	a8 95       	wdr
        adcmv[0] = W20msReadADC(PC0);	// which voltage has Pin 1?
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	0e 94 2e 1a 	call	0x345c	; 0x345c <W20msReadADC>
    11b0:	7c 01       	movw	r14, r24
        adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
    11b8:	8c 01       	movw	r16, r24
        adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
    11ba:	82 e0       	ldi	r24, 0x02	; 2
    11bc:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
        if (adcmv[0] < 1300) {
    11c0:	24 e1       	ldi	r18, 0x14	; 20
    11c2:	e2 16       	cp	r14, r18
    11c4:	25 e0       	ldi	r18, 0x05	; 5
    11c6:	f2 06       	cpc	r15, r18
    11c8:	08 f4       	brcc	.+2      	; 0x11cc <EntladePins+0xd0>
           ADC_DDR |= (1<<PC0);	// below 1.3V , switch directly with ADC-Port to GND
    11ca:	38 9a       	sbi	0x07, 0	; 7
        }
        if (adcmv[1] < 1300) {
    11cc:	35 e0       	ldi	r19, 0x05	; 5
    11ce:	04 31       	cpi	r16, 0x14	; 20
    11d0:	13 07       	cpc	r17, r19
    11d2:	08 f4       	brcc	.+2      	; 0x11d6 <EntladePins+0xda>
           ADC_DDR |= (1<<PC1);	// below 1.3V, switch directly with ADC-Port to GND
    11d4:	39 9a       	sbi	0x07, 1	; 7
        }
        if (adcmv[2] < 1300) {
    11d6:	25 e0       	ldi	r18, 0x05	; 5
    11d8:	84 31       	cpi	r24, 0x14	; 20
    11da:	92 07       	cpc	r25, r18
    11dc:	08 f4       	brcc	.+2      	; 0x11e0 <EntladePins+0xe4>
           ADC_DDR |= (1<<PC2);	// below 1.3V, switch directly with ADC-Port to GND
    11de:	3a 9a       	sbi	0x07, 2	; 7
        }
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
    11e0:	36 e0       	ldi	r19, 0x06	; 6
    11e2:	e3 16       	cp	r14, r19
    11e4:	f1 04       	cpc	r15, r1
    11e6:	30 f4       	brcc	.+12     	; 0x11f4 <EntladePins+0xf8>
    11e8:	06 30       	cpi	r16, 0x06	; 6
    11ea:	11 05       	cpc	r17, r1
    11ec:	18 f4       	brcc	.+6      	; 0x11f4 <EntladePins+0xf8>
    11ee:	86 30       	cpi	r24, 0x06	; 6
    11f0:	91 05       	cpc	r25, r1
    11f2:	38 f0       	brcs	.+14     	; 0x1202 <EntladePins+0x106>

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    11f4:	21 96       	adiw	r28, 0x01	; 1
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	c4 3f       	cpi	r28, 0xF4	; 244
    11fa:	d8 07       	cpc	r29, r24
    11fc:	a9 f6       	brne	.-86     	; 0x11a8 <EntladePins+0xac>
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
           break;
        }
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
    11fe:	d0 92 09 01 	sts	0x0109, r13

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    1202:	00 e0       	ldi	r16, 0x00	; 0
    1204:	10 e0       	ldi	r17, 0x00	; 0
    1206:	04 c0       	rjmp	.+8      	; 0x1210 <EntladePins+0x114>
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
    1208:	0e 94 81 14 	call	0x2902	; 0x2902 <wait1ms>
    120c:	0f 5f       	subi	r16, 0xFF	; 255
    120e:	1f 4f       	sbci	r17, 0xFF	; 255
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
    1210:	0c 17       	cp	r16, r28
    1212:	1d 07       	cpc	r17, r29
    1214:	c8 f3       	brcs	.-14     	; 0x1208 <EntladePins+0x10c>
    1216:	ca 94       	dec	r12
  unsigned int clr_cnt;		// Clear Counter
  uint8_t lop_cnt;		// loop counter
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
    1218:	09 f0       	breq	.+2      	; 0x121c <EntladePins+0x120>
    121a:	82 cf       	rjmp	.-252    	; 0x1120 <EntladePins+0x24>
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     }
  } // end while
 }
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	1f 91       	pop	r17
    1222:	0f 91       	pop	r16
    1224:	ff 90       	pop	r15
    1226:	ef 90       	pop	r14
    1228:	df 90       	pop	r13
    122a:	cf 90       	pop	r12
    122c:	bf 90       	pop	r11
    122e:	af 90       	pop	r10
    1230:	08 95       	ret

00001232 <RefVoltage>:



#ifdef AUTO_RH
void RefVoltage(void) {
    1232:	ff 92       	push	r15
    1234:	0f 93       	push	r16
    1236:	1f 93       	push	r17
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;

  #ifdef AUTO_CAL
  referenz = ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset));
    123c:	81 ec       	ldi	r24, 0xC1	; 193
    123e:	91 e0       	ldi	r25, 0x01	; 1
    1240:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <__eerd_word_m168>
    1244:	20 91 41 01 	lds	r18, 0x0141
    1248:	30 91 42 01 	lds	r19, 0x0142
    124c:	28 0f       	add	r18, r24
    124e:	39 1f       	adc	r19, r25
  #else
  referenz = ref_mv + REF_C_KORR;
  #endif
  if (referenz >= Ref_Tab_Beginn) {
    1250:	83 e0       	ldi	r24, 0x03	; 3
    1252:	28 3e       	cpi	r18, 0xE8	; 232
    1254:	38 07       	cpc	r19, r24
    1256:	20 f0       	brcs	.+8      	; 0x1260 <RefVoltage+0x2e>
     referenz -= Ref_Tab_Beginn;
    1258:	c9 01       	movw	r24, r18
    125a:	88 5e       	subi	r24, 0xE8	; 232
    125c:	93 40       	sbci	r25, 0x03	; 3
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <RefVoltage+0x32>
  } else  {
     referenz = 0;		// limit to begin of table
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = referenz / Ref_Tab_Abstand;
    1264:	62 e3       	ldi	r22, 0x32	; 50
    1266:	70 e0       	ldi	r23, 0x00	; 0
    1268:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <__udivmodhi4>
  tabres = referenz % Ref_Tab_Abstand;
    126c:	f8 2e       	mov	r15, r24
  tabres = Ref_Tab_Abstand-tabres;
  if (tabind > 7) {
     tabind = 7;		// limit to end of table
  }
  // interpolate the table of factors
  y1 = MEM_read_word(&RHtab[tabind]);
    126e:	68 30       	cpi	r22, 0x08	; 8
    1270:	08 f0       	brcs	.+2      	; 0x1274 <RefVoltage+0x42>
    1272:	67 e0       	ldi	r22, 0x07	; 7
    1274:	c6 2f       	mov	r28, r22
    1276:	d0 e0       	ldi	r29, 0x00	; 0
    1278:	ce 01       	movw	r24, r28
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	86 5a       	subi	r24, 0xA6	; 166
    1280:	9f 4f       	sbci	r25, 0xFF	; 255
    1282:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <__eerd_word_m168>
    1286:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RHtab[tabind+1]);
    1288:	ce 01       	movw	r24, r28
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	84 5a       	subi	r24, 0xA4	; 164
    1290:	9f 4f       	sbci	r25, 0xFF	; 255
    1292:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <__eerd_word_m168>
    1296:	9c 01       	movw	r18, r24
  } else  {
     referenz = 0;		// limit to begin of table
  }
  tabind = referenz / Ref_Tab_Abstand;
  tabres = referenz % Ref_Tab_Abstand;
  tabres = Ref_Tab_Abstand-tabres;
    1298:	42 e3       	ldi	r20, 0x32	; 50
    129a:	4f 19       	sub	r20, r15
  }
  // interpolate the table of factors
  y1 = MEM_read_word(&RHtab[tabind]);
  y2 = MEM_read_word(&RHtab[tabind+1]);
  // RHmultip is the interpolated factor to compute capacity from load time with 470k
  RHmultip = ((y1 - y2) * tabres + (Ref_Tab_Abstand/2)) / Ref_Tab_Abstand + y2;
    129c:	50 e0       	ldi	r21, 0x00	; 0
    129e:	08 1b       	sub	r16, r24
    12a0:	19 0b       	sbc	r17, r25
    12a2:	40 9f       	mul	r20, r16
    12a4:	c0 01       	movw	r24, r0
    12a6:	41 9f       	mul	r20, r17
    12a8:	90 0d       	add	r25, r0
    12aa:	50 9f       	mul	r21, r16
    12ac:	90 0d       	add	r25, r0
    12ae:	11 24       	eor	r1, r1
    12b0:	49 96       	adiw	r24, 0x19	; 25
    12b2:	62 e3       	ldi	r22, 0x32	; 50
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <__udivmodhi4>
    12ba:	62 0f       	add	r22, r18
    12bc:	73 1f       	adc	r23, r19
    12be:	70 93 01 01 	sts	0x0101, r23
    12c2:	60 93 00 01 	sts	0x0100, r22
 }
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	ff 90       	pop	r15
    12d0:	08 95       	ret

000012d2 <lcd_clear_line>:
#endif

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
    12d2:	1f 93       	push	r17
    12d4:	14 e1       	ldi	r17, 0x14	; 20
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    lcd_space();
    12d6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_space>
    12da:	11 50       	subi	r17, 0x01	; 1

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    12dc:	e1 f7       	brne	.-8      	; 0x12d6 <lcd_clear_line+0x4>
    lcd_space();
 }
}
    12de:	1f 91       	pop	r17
    12e0:	08 95       	ret

000012e2 <DisplayValue>:
 *    e.g: p = 10^-12 -> -12
 *  - unit character (0 = none)
 *  digits = 2, 3 or 4
 */
void DisplayValue(unsigned long Value, int8_t Exponent, unsigned char Unit, unsigned char digits)
{
    12e2:	2f 92       	push	r2
    12e4:	3f 92       	push	r3
    12e6:	4f 92       	push	r4
    12e8:	5f 92       	push	r5
    12ea:	7f 92       	push	r7
    12ec:	8f 92       	push	r8
    12ee:	9f 92       	push	r9
    12f0:	af 92       	push	r10
    12f2:	bf 92       	push	r11
    12f4:	cf 92       	push	r12
    12f6:	df 92       	push	r13
    12f8:	ef 92       	push	r14
    12fa:	ff 92       	push	r15
    12fc:	0f 93       	push	r16
    12fe:	1f 93       	push	r17
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	2f 97       	sbiw	r28, 0x0f	; 15
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	6b 01       	movw	r12, r22
    1316:	7c 01       	movw	r14, r24
    1318:	14 2f       	mov	r17, r20
    131a:	72 2e       	mov	r7, r18
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
    131c:	03 30       	cpi	r16, 0x03	; 3
    131e:	29 f0       	breq	.+10     	; 0x132a <DisplayValue+0x48>
  if (digits == 4) Limit = 10000;
    1320:	04 30       	cpi	r16, 0x04	; 4
    1322:	31 f0       	breq	.+12     	; 0x1330 <DisplayValue+0x4e>
  uint8_t           Offset;		/* exponent of offset to next 10^3 step */
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
    1324:	84 e6       	ldi	r24, 0x64	; 100
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	14 c0       	rjmp	.+40     	; 0x1352 <DisplayValue+0x70>
  if (digits == 3) Limit = 1000;
    132a:	88 ee       	ldi	r24, 0xE8	; 232
    132c:	93 e0       	ldi	r25, 0x03	; 3
    132e:	11 c0       	rjmp	.+34     	; 0x1352 <DisplayValue+0x70>
  if (digits == 4) Limit = 10000;
    1330:	80 e1       	ldi	r24, 0x10	; 16
    1332:	97 e2       	ldi	r25, 0x27	; 39
    1334:	0e c0       	rjmp	.+28     	; 0x1352 <DisplayValue+0x70>
  while (Value >= Limit)
  {
    Value += 5;				/* for automagic rounding */
    1336:	c7 01       	movw	r24, r14
    1338:	b6 01       	movw	r22, r12
    133a:	6b 5f       	subi	r22, 0xFB	; 251
    133c:	7f 4f       	sbci	r23, 0xFF	; 255
    133e:	8f 4f       	sbci	r24, 0xFF	; 255
    1340:	9f 4f       	sbci	r25, 0xFF	; 255
    Value = Value / 10;			/* scale down by 10^1 */
    1342:	a5 01       	movw	r20, r10
    1344:	94 01       	movw	r18, r8
    1346:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
    134a:	69 01       	movw	r12, r18
    134c:	7a 01       	movw	r14, r20
    Exponent++;				/* increase exponent by 1 */
    134e:	1f 5f       	subi	r17, 0xFF	; 255
    1350:	08 c0       	rjmp	.+16     	; 0x1362 <DisplayValue+0x80>


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
  if (digits == 4) Limit = 10000;
  while (Value >= Limit)
    1352:	1c 01       	movw	r2, r24
    1354:	44 24       	eor	r4, r4
    1356:	55 24       	eor	r5, r5
  {
    Value += 5;				/* for automagic rounding */
    Value = Value / 10;			/* scale down by 10^1 */
    1358:	4a e0       	ldi	r20, 0x0A	; 10
    135a:	84 2e       	mov	r8, r20
    135c:	91 2c       	mov	r9, r1
    135e:	a1 2c       	mov	r10, r1
    1360:	b1 2c       	mov	r11, r1


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
  if (digits == 4) Limit = 10000;
  while (Value >= Limit)
    1362:	c2 14       	cp	r12, r2
    1364:	d3 04       	cpc	r13, r3
    1366:	e4 04       	cpc	r14, r4
    1368:	f5 04       	cpc	r15, r5
    136a:	28 f7       	brcc	.-54     	; 0x1336 <DisplayValue+0x54>


  /*
   *  determine prefix
   */
  Length = Exponent + 12;
    136c:	81 2f       	mov	r24, r17
    136e:	84 5f       	subi	r24, 0xF4	; 244
    1370:	83 31       	cpi	r24, 0x13	; 19
    1372:	08 f0       	brcs	.+2      	; 0x1376 <DisplayValue+0x94>
    1374:	82 e1       	ldi	r24, 0x12	; 18
  if (Length <  0) Length = 0;		/* Limit to minimum prefix */
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
  Index = Length / 3;
    1376:	23 e0       	ldi	r18, 0x03	; 3
  Offset = Length % 3;
    1378:	62 2f       	mov	r22, r18
    137a:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <__udivmodqi4>
    137e:	19 2f       	mov	r17, r25
    if (Offset > 0)
    1380:	99 23       	and	r25, r25
    1382:	19 f0       	breq	.+6      	; 0x138a <DisplayValue+0xa8>
    {
      Index++;				/* adjust index for exponent offset, take next prefix */
    1384:	8f 5f       	subi	r24, 0xFF	; 255
      Offset = 3 - Offset;		/* reverse value (1 or 2) */
    1386:	29 1b       	sub	r18, r25
    1388:	12 2f       	mov	r17, r18
    }
  Prefix = MEM_read_byte((uint8_t *)(&PrefixTab[Index]));   /* look up prefix in table */
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	86 54       	subi	r24, 0x46	; 70
    138e:	9e 4f       	sbci	r25, 0xFE	; 254
    1390:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__eerd_byte_m168>
    1394:	b8 2e       	mov	r11, r24
  /*
   *  display value
   */

  /* convert value into string */
  utoa((unsigned int)Value, OutBuffer, 10);
    1396:	c6 01       	movw	r24, r12
    1398:	6e 01       	movw	r12, r28
    139a:	08 94       	sec
    139c:	c1 1c       	adc	r12, r1
    139e:	d1 1c       	adc	r13, r1
    13a0:	b6 01       	movw	r22, r12
    13a2:	4a e0       	ldi	r20, 0x0A	; 10
    13a4:	50 e0       	ldi	r21, 0x00	; 0
    13a6:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <utoa>
  Length = strlen(OutBuffer);
    13aa:	f6 01       	movw	r30, r12
    13ac:	01 90       	ld	r0, Z+
    13ae:	00 20       	and	r0, r0
    13b0:	e9 f7       	brne	.-6      	; 0x13ac <DisplayValue+0xca>
    13b2:	31 97       	sbiw	r30, 0x01	; 1
    13b4:	2e 2e       	mov	r2, r30
    13b6:	2c 18       	sub	r2, r12

  /* position of dot */
  Exponent = Length - Offset;		/* calculate position */
    13b8:	82 2c       	mov	r8, r2
    13ba:	81 1a       	sub	r8, r17

  if (Exponent <= 0)			/* we have to prepend "0." */
    13bc:	18 14       	cp	r1, r8
    13be:	44 f0       	brlt	.+16     	; 0x13d0 <DisplayValue+0xee>
  {
    /* 0: factor 10 / -1: factor 100 */
//    lcd_data('0');
    lcd_data('.');
    13c0:	8e e2       	ldi	r24, 0x2E	; 46
    13c2:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
    if (Exponent < 0) lcd_data('0');	/* extra 0 for factor 100 */
    13c6:	88 20       	and	r8, r8
    13c8:	19 f0       	breq	.+6      	; 0x13d0 <DisplayValue+0xee>
    13ca:	80 e3       	ldi	r24, 0x30	; 48
    13cc:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
  }

  if (Offset == 0) Exponent = -1;	/* disable dot if not needed */
    13d0:	11 23       	and	r17, r17
    13d2:	11 f4       	brne	.+4      	; 0x13d8 <DisplayValue+0xf6>
    13d4:	88 24       	eor	r8, r8
    13d6:	8a 94       	dec	r8
    13d8:	6e 01       	movw	r12, r28
    13da:	08 94       	sec
    13dc:	c1 1c       	adc	r12, r1
    13de:	d1 1c       	adc	r13, r1
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    13e0:	00 e0       	ldi	r16, 0x00	; 0
    13e2:	10 e0       	ldi	r17, 0x00	; 0
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    Index++;				/* next one */
    if (Index == Exponent) {
    13e4:	99 24       	eor	r9, r9
    13e6:	87 fc       	sbrc	r8, 7
    13e8:	90 94       	com	r9
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    13ea:	0d c0       	rjmp	.+26     	; 0x1406 <DisplayValue+0x124>
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    13ec:	0f 5f       	subi	r16, 0xFF	; 255
    13ee:	1f 4f       	sbci	r17, 0xFF	; 255
    13f0:	f6 01       	movw	r30, r12
    13f2:	81 91       	ld	r24, Z+
    13f4:	6f 01       	movw	r12, r30
    13f6:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
    Index++;				/* next one */
    if (Index == Exponent) {
    13fa:	08 15       	cp	r16, r8
    13fc:	19 05       	cpc	r17, r9
    13fe:	19 f4       	brne	.+6      	; 0x1406 <DisplayValue+0x124>
      lcd_data('.');			/* display dot */
    1400:	8e e2       	ldi	r24, 0x2E	; 46
    1402:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    1406:	02 15       	cp	r16, r2
    1408:	88 f3       	brcs	.-30     	; 0x13ec <DisplayValue+0x10a>
      lcd_data('.');			/* display dot */
    }
  }

  /* display prefix and unit */
  if (Prefix != 0) lcd_data(Prefix);
    140a:	bb 20       	and	r11, r11
    140c:	19 f0       	breq	.+6      	; 0x1414 <DisplayValue+0x132>
    140e:	8b 2d       	mov	r24, r11
    1410:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
  if (Unit) lcd_data(Unit);
    1414:	77 20       	and	r7, r7
    1416:	19 f0       	breq	.+6      	; 0x141e <DisplayValue+0x13c>
    1418:	87 2d       	mov	r24, r7
    141a:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
}
    141e:	2f 96       	adiw	r28, 0x0f	; 15
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	1f 91       	pop	r17
    1430:	0f 91       	pop	r16
    1432:	ff 90       	pop	r15
    1434:	ef 90       	pop	r14
    1436:	df 90       	pop	r13
    1438:	cf 90       	pop	r12
    143a:	bf 90       	pop	r11
    143c:	af 90       	pop	r10
    143e:	9f 90       	pop	r9
    1440:	8f 90       	pop	r8
    1442:	7f 90       	pop	r7
    1444:	5f 90       	pop	r5
    1446:	4f 90       	pop	r4
    1448:	3f 90       	pop	r3
    144a:	2f 90       	pop	r2
    144c:	08 95       	ret

0000144e <RvalOut>:
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
      lcd_space();
   }
}

void RvalOut(uint8_t ii) {	
    144e:	0f 93       	push	r16
   // output of resistor value

   DisplayValue(resis[ii].rx,-1,LCD_CHAR_OMEGA,4);
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	2b e0       	ldi	r18, 0x0B	; 11
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	82 9f       	mul	r24, r18
    1458:	f0 01       	movw	r30, r0
    145a:	83 9f       	mul	r24, r19
    145c:	f0 0d       	add	r31, r0
    145e:	92 9f       	mul	r25, r18
    1460:	f0 0d       	add	r31, r0
    1462:	11 24       	eor	r1, r1
    1464:	e6 5e       	subi	r30, 0xE6	; 230
    1466:	fe 4f       	sbci	r31, 0xFE	; 254
    1468:	60 81       	ld	r22, Z
    146a:	71 81       	ldd	r23, Z+1	; 0x01
    146c:	82 81       	ldd	r24, Z+2	; 0x02
    146e:	93 81       	ldd	r25, Z+3	; 0x03
    1470:	4f ef       	ldi	r20, 0xFF	; 255
    1472:	24 ef       	ldi	r18, 0xF4	; 244
    1474:	04 e0       	ldi	r16, 0x04	; 4
    1476:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DisplayValue>
   lcd_space();
    147a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_space>
 }
    147e:	0f 91       	pop	r16
    1480:	08 95       	ret

00001482 <mVAusgabe>:
   lcd_line2(); 				//2. row
   lcd_fix_string(Uf_str);			//"Uf="
   mVAusgabe(bcdnum >> 4);
   mVAusgabe(bcdnum & 0x0f);
}
void mVAusgabe(uint8_t nn) {
    1482:	0f 93       	push	r16
   if (nn < 3) {
    1484:	83 30       	cpi	r24, 0x03	; 3
    1486:	98 f4       	brcc	.+38     	; 0x14ae <mVAusgabe+0x2c>
      // Output in mV units
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
    1488:	e8 2f       	mov	r30, r24
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	ee 0f       	add	r30, r30
    148e:	ff 1f       	adc	r31, r31
    1490:	ee 0f       	add	r30, r30
    1492:	ff 1f       	adc	r31, r31
    1494:	e2 59       	subi	r30, 0x92	; 146
    1496:	fe 4f       	sbci	r31, 0xFE	; 254
    1498:	62 81       	ldd	r22, Z+2	; 0x02
    149a:	73 81       	ldd	r23, Z+3	; 0x03
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	4d ef       	ldi	r20, 0xFD	; 253
    14a2:	26 e5       	ldi	r18, 0x56	; 86
    14a4:	03 e0       	ldi	r16, 0x03	; 3
    14a6:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DisplayValue>
      lcd_space();
    14aa:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_space>
   }
}
    14ae:	0f 91       	pop	r16
    14b0:	08 95       	ret

000014b2 <UfAusgabe>:
// output of flux voltage for 1-2 diodes in row 2
// bcdnum = Numbers of both Diodes:
// higher 4 Bit  number of first Diode
// lower 4 Bit  number of second Diode (Structure diodes[nn])
// if number >= 3  no output is done
void UfAusgabe(uint8_t bcdnum) {
    14b2:	1f 93       	push	r17
    14b4:	18 2f       	mov	r17, r24

   lcd_line2(); 				//2. row
    14b6:	80 ec       	ldi	r24, 0xC0	; 192
    14b8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
   lcd_fix_string(Uf_str);			//"Uf="
    14bc:	88 e1       	ldi	r24, 0x18	; 24
    14be:	91 e0       	ldi	r25, 0x01	; 1
    14c0:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
   mVAusgabe(bcdnum >> 4);
    14c4:	81 2f       	mov	r24, r17
    14c6:	82 95       	swap	r24
    14c8:	8f 70       	andi	r24, 0x0F	; 15
    14ca:	0e 94 41 0a 	call	0x1482	; 0x1482 <mVAusgabe>
   mVAusgabe(bcdnum & 0x0f);
    14ce:	81 2f       	mov	r24, r17
    14d0:	8f 70       	andi	r24, 0x0F	; 15
    14d2:	0e 94 41 0a 	call	0x1482	; 0x1482 <mVAusgabe>
}
    14d6:	1f 91       	pop	r17
    14d8:	08 95       	ret

000014da <AutoCheck>:
void AutoCheck(void) {
    14da:	2f 92       	push	r2
    14dc:	3f 92       	push	r3
    14de:	4f 92       	push	r4
    14e0:	5f 92       	push	r5
    14e2:	6f 92       	push	r6
    14e4:	7f 92       	push	r7
    14e6:	8f 92       	push	r8
    14e8:	9f 92       	push	r9
    14ea:	af 92       	push	r10
    14ec:	bf 92       	push	r11
    14ee:	cf 92       	push	r12
    14f0:	df 92       	push	r13
    14f2:	ef 92       	push	r14
    14f4:	ff 92       	push	r15
    14f6:	0f 93       	push	r16
    14f8:	1f 93       	push	r17
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	2e 97       	sbiw	r28, 0x0e	; 14
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	cd bf       	out	0x3d, r28	; 61

#ifdef AUTO_CAL
  uint8_t cap_found;	// counter for found capacitor
  int8_t udiff2;
#endif
  ADC_PORT = TXD_VAL;
    150e:	88 e0       	ldi	r24, 0x08	; 8
    1510:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = TXD_MSK;
    1512:	87 b9       	out	0x07, r24	; 7
  R_PORT = (1<<(TP1*2));		//Pin 1 over RL to +
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	85 b9       	out	0x05, r24	; 5
  R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//Pin 2 over RL to -
    1518:	85 e0       	ldi	r24, 0x05	; 5
    151a:	84 b9       	out	0x04, r24	; 4
  adcmv[0] = W5msReadADC(PC0);		// voltage at Pin 1
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
    1522:	8c 01       	movw	r16, r24
    1524:	9a 83       	std	Y+2, r25	; 0x02
    1526:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = ReadADC(PC1);		// voltage at Pin 2
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
    152e:	7c 01       	movw	r14, r24
    1530:	9c 83       	std	Y+4, r25	; 0x04
    1532:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = ReadADC(PC2);		// voltage at Pin 3
    1534:	82 e0       	ldi	r24, 0x02	; 2
    1536:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
    153a:	9c 01       	movw	r18, r24
    153c:	9e 83       	std	Y+6, r25	; 0x06
    153e:	8d 83       	std	Y+5, r24	; 0x05
  if (abs((int)(adcmv[1] - adcmv[0])) > 20) {
    1540:	e0 1a       	sub	r14, r16
    1542:	f1 0a       	sbc	r15, r17
    1544:	f7 fe       	sbrs	r15, 7
    1546:	04 c0       	rjmp	.+8      	; 0x1550 <AutoCheck+0x76>
    1548:	f0 94       	com	r15
    154a:	e1 94       	neg	r14
    154c:	f1 08       	sbc	r15, r1
    154e:	f3 94       	inc	r15
    1550:	85 e1       	ldi	r24, 0x15	; 21
    1552:	e8 16       	cp	r14, r24
    1554:	f1 04       	cpc	r15, r1
    1556:	0c f0       	brlt	.+2      	; 0x155a <AutoCheck+0x80>
    1558:	45 c4       	rjmp	.+2186   	; 0x1de4 <AutoCheck+0x90a>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[2] - adcmv[0])) > 20) {
    155a:	20 1b       	sub	r18, r16
    155c:	31 0b       	sbc	r19, r17
    155e:	37 ff       	sbrs	r19, 7
    1560:	03 c0       	rjmp	.+6      	; 0x1568 <AutoCheck+0x8e>
    1562:	30 95       	com	r19
    1564:	21 95       	neg	r18
    1566:	3f 4f       	sbci	r19, 0xFF	; 255
    1568:	25 31       	cpi	r18, 0x15	; 21
    156a:	31 05       	cpc	r19, r1
    156c:	0c f0       	brlt	.+2      	; 0x1570 <AutoCheck+0x96>
    156e:	3a c4       	rjmp	.+2164   	; 0x1de4 <AutoCheck+0x90a>
     return;				//difference to big, no selftest
  }
  if (abs((int)((adcmv[0]*2) - ADCconfig.U_AVCC)) > 60) {
    1570:	00 0f       	add	r16, r16
    1572:	11 1f       	adc	r17, r17
    1574:	80 91 3f 01 	lds	r24, 0x013F
    1578:	90 91 40 01 	lds	r25, 0x0140
    157c:	08 1b       	sub	r16, r24
    157e:	19 0b       	sbc	r17, r25
    1580:	17 ff       	sbrs	r17, 7
    1582:	03 c0       	rjmp	.+6      	; 0x158a <AutoCheck+0xb0>
    1584:	10 95       	com	r17
    1586:	01 95       	neg	r16
    1588:	1f 4f       	sbci	r17, 0xFF	; 255
    158a:	0d 33       	cpi	r16, 0x3D	; 61
    158c:	11 05       	cpc	r17, r1
    158e:	0c f0       	brlt	.+2      	; 0x1592 <AutoCheck+0xb8>
    1590:	29 c4       	rjmp	.+2130   	; 0x1de4 <AutoCheck+0x90a>
     return;				//difference to big, no selftest
  }
  R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//Pin 3 over RL to - (Pin 1 over RL to +)
    1592:	81 e1       	ldi	r24, 0x11	; 17
    1594:	84 b9       	out	0x04, r24	; 4
  adcmv[0] = W5msReadADC(PC0);		// voltage at Pin 1
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
    159c:	8c 01       	movw	r16, r24
    159e:	9a 83       	std	Y+2, r25	; 0x02
    15a0:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = ReadADC(PC1);		// voltage at Pin 2
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
    15a8:	7c 01       	movw	r14, r24
    15aa:	9c 83       	std	Y+4, r25	; 0x04
    15ac:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = ReadADC(PC2);		// voltage at Pin 3
    15ae:	82 e0       	ldi	r24, 0x02	; 2
    15b0:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
    15b4:	9c 01       	movw	r18, r24
    15b6:	9e 83       	std	Y+6, r25	; 0x06
    15b8:	8d 83       	std	Y+5, r24	; 0x05
  if (abs((int)(adcmv[1] - adcmv[0])) > 20) {
    15ba:	e0 1a       	sub	r14, r16
    15bc:	f1 0a       	sbc	r15, r17
    15be:	f7 fe       	sbrs	r15, 7
    15c0:	04 c0       	rjmp	.+8      	; 0x15ca <AutoCheck+0xf0>
    15c2:	f0 94       	com	r15
    15c4:	e1 94       	neg	r14
    15c6:	f1 08       	sbc	r15, r1
    15c8:	f3 94       	inc	r15
    15ca:	e5 e1       	ldi	r30, 0x15	; 21
    15cc:	ee 16       	cp	r14, r30
    15ce:	f1 04       	cpc	r15, r1
    15d0:	0c f0       	brlt	.+2      	; 0x15d4 <AutoCheck+0xfa>
    15d2:	08 c4       	rjmp	.+2064   	; 0x1de4 <AutoCheck+0x90a>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[2] - adcmv[0])) > 20) {
    15d4:	20 1b       	sub	r18, r16
    15d6:	31 0b       	sbc	r19, r17
    15d8:	37 ff       	sbrs	r19, 7
    15da:	03 c0       	rjmp	.+6      	; 0x15e2 <AutoCheck+0x108>
    15dc:	30 95       	com	r19
    15de:	21 95       	neg	r18
    15e0:	3f 4f       	sbci	r19, 0xFF	; 255
    15e2:	25 31       	cpi	r18, 0x15	; 21
    15e4:	31 05       	cpc	r19, r1
    15e6:	0c f0       	brlt	.+2      	; 0x15ea <AutoCheck+0x110>
    15e8:	fd c3       	rjmp	.+2042   	; 0x1de4 <AutoCheck+0x90a>
     return;				//difference to big, no selftest
  }
  if (abs((int)((adcmv[0]*2) - ADCconfig.U_AVCC)) > 60) {
    15ea:	00 0f       	add	r16, r16
    15ec:	11 1f       	adc	r17, r17
    15ee:	80 91 3f 01 	lds	r24, 0x013F
    15f2:	90 91 40 01 	lds	r25, 0x0140
    15f6:	08 1b       	sub	r16, r24
    15f8:	19 0b       	sbc	r17, r25
    15fa:	17 ff       	sbrs	r17, 7
    15fc:	03 c0       	rjmp	.+6      	; 0x1604 <AutoCheck+0x12a>
    15fe:	10 95       	com	r17
    1600:	01 95       	neg	r16
    1602:	1f 4f       	sbci	r17, 0xFF	; 255
    1604:	0d 33       	cpi	r16, 0x3D	; 61
    1606:	11 05       	cpc	r17, r1
    1608:	0c f0       	brlt	.+2      	; 0x160c <AutoCheck+0x132>
    160a:	ec c3       	rjmp	.+2008   	; 0x1de4 <AutoCheck+0x90a>
     return;				//difference to big, no selftest
  }
#ifdef WITH_SELFTEST
  lcd_clear();
    160c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_clear>
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
    1610:	84 ec       	ldi	r24, 0xC4	; 196
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_pgm_string>
  wait1s();
    1618:	0e 94 71 14 	call	0x28e2	; 0x28e2 <wait1000ms>
    161c:	44 24       	eor	r4, r4
    161e:	55 24       	eor	r5, r5
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    1620:	11 e0       	ldi	r17, 0x01	; 1
           adcmv[2] = W20msReadADC(TP3);
           lcd_fix2_string(RH1L);	// "RH_Lo="
        }
                                        //############################################
        if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to VCC
    1622:	32 e0       	ldi	r19, 0x02	; 2
    1624:	a3 2e       	mov	r10, r19
           R_PORT = 2<<(TP1*2);
           adcmv[0] = W20msReadADC(TP1) - ADCconfig.U_AVCC;
           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to VCC
    1626:	28 e0       	ldi	r18, 0x08	; 8
    1628:	c2 2e       	mov	r12, r18
           R_PORT = 2<<(TP2*2);
           adcmv[1] = W20msReadADC(TP2) - ADCconfig.U_AVCC;
           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to VCC
    162a:	90 e2       	ldi	r25, 0x20	; 32
    162c:	b9 2e       	mov	r11, r25
           lcd_string(utoa(RHmultip, outval, 10));
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
    162e:	85 e0       	ldi	r24, 0x05	; 5
    1630:	f8 2e       	mov	r15, r24
           adcmv[0] = W20msReadADC(TP1);
           adcmv[0] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1632:	06 e4       	ldi	r16, 0x46	; 70
    1634:	60 2e       	mov	r6, r16
    1636:	09 ec       	ldi	r16, 0xC9	; 201
    1638:	70 2e       	mov	r7, r16
    163a:	0f ef       	ldi	r16, 0xFF	; 255
    163c:	80 2e       	mov	r8, r16
    163e:	0f ef       	ldi	r16, 0xFF	; 255
    1640:	90 2e       	mov	r9, r16
    1642:	5a c1       	rjmp	.+692    	; 0x18f8 <AutoCheck+0x41e>
  wait1s();
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
        lcd_line2();			//Cursor to column 1, row 2
    1644:	80 ec       	ldi	r24, 0xC0	; 192
    1646:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
        lcd_clear_line();		// clear total line
    164a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    164e:	80 e8       	ldi	r24, 0x80	; 128
    1650:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
        lcd_clear_line();		// clear total line
    1654:	0e 94 69 09 	call	0x12d2	; 0x12d2 <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    1658:	80 e8       	ldi	r24, 0x80	; 128
    165a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
        lcd_data('T');			//output the Testmode "T"
    165e:	84 e5       	ldi	r24, 0x54	; 84
    1660:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
        lcd_string(utoa(tt, outval, 10));	//output Test number
    1664:	c2 01       	movw	r24, r4
    1666:	6e e0       	ldi	r22, 0x0E	; 14
    1668:	71 e0       	ldi	r23, 0x01	; 1
    166a:	4a e0       	ldi	r20, 0x0A	; 10
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <utoa>
    1672:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_string>
        lcd_space();
    1676:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_space>
                                        //############################################
        if (tt == 1) {   // output of reference voltage and factors for capacity measurement
    167a:	fe 2d       	mov	r31, r14
    167c:	f1 30       	cpi	r31, 0x01	; 1
    167e:	81 f5       	brne	.+96     	; 0x16e0 <AutoCheck+0x206>
           ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    1680:	2e eb       	ldi	r18, 0xBE	; 190
    1682:	20 93 3b 01 	sts	0x013B, r18
 #ifdef WITH_AUTO_REF
           (void) ReadADC(0x0e);	// read reference voltage 
    1686:	8e e0       	ldi	r24, 0x0E	; 14
    1688:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
           ref_mv = W5msReadADC(0x0e);	// read reference voltage 
    168c:	8e e0       	ldi	r24, 0x0E	; 14
    168e:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
    1692:	90 93 42 01 	sts	0x0142, r25
    1696:	80 93 41 01 	sts	0x0141, r24
           RefVoltage();		//compute RHmultip = f(reference voltage)
    169a:	0e 94 19 09 	call	0x1232	; 0x1232 <RefVoltage>
 #endif
           lcd_fix2_string(URefT);	//"URef="
    169e:	82 ee       	ldi	r24, 0xE2	; 226
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_pgm_string>
           DisplayValue(ref_mv,-3,'V',4);
    16a6:	60 91 41 01 	lds	r22, 0x0141
    16aa:	70 91 42 01 	lds	r23, 0x0142
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	4d ef       	ldi	r20, 0xFD	; 253
    16b4:	26 e5       	ldi	r18, 0x56	; 86
    16b6:	04 e0       	ldi	r16, 0x04	; 4
    16b8:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DisplayValue>
           lcd_line2();			//Cursor to column 1, row 2
    16bc:	80 ec       	ldi	r24, 0xC0	; 192
    16be:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
           lcd_fix2_string(RHfakt);	//"RHf="
    16c2:	87 ee       	ldi	r24, 0xE7	; 231
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_pgm_string>
           lcd_string(utoa(RHmultip, outval, 10));
    16ca:	80 91 00 01 	lds	r24, 0x0100
    16ce:	90 91 01 01 	lds	r25, 0x0101
    16d2:	6e e0       	ldi	r22, 0x0E	; 14
    16d4:	71 e0       	ldi	r23, 0x01	; 1
    16d6:	4a e0       	ldi	r20, 0x0A	; 10
    16d8:	50 e0       	ldi	r21, 0x00	; 0
    16da:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <utoa>
    16de:	f5 c0       	rjmp	.+490    	; 0x18ca <AutoCheck+0x3f0>
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
    16e0:	8e 2d       	mov	r24, r14
    16e2:	82 30       	cpi	r24, 0x02	; 2
    16e4:	09 f0       	breq	.+2      	; 0x16e8 <AutoCheck+0x20e>
    16e6:	52 c0       	rjmp	.+164    	; 0x178c <AutoCheck+0x2b2>
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	85 b9       	out	0x05, r24	; 5
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
    16ec:	f4 b8       	out	0x04, r15	; 4
           adcmv[0] = W20msReadADC(TP1);
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	0e 94 2e 1a 	call	0x345c	; 0x345c <W20msReadADC>
    16f4:	8c 01       	movw	r16, r24
           adcmv[0] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    16f6:	60 91 3f 01 	lds	r22, 0x013F
    16fa:	70 91 40 01 	lds	r23, 0x0140
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	2e e4       	ldi	r18, 0x4E	; 78
    1704:	3b e1       	ldi	r19, 0x1B	; 27
    1706:	40 e0       	ldi	r20, 0x00	; 0
    1708:	50 e0       	ldi	r21, 0x00	; 0
    170a:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
    170e:	a4 01       	movw	r20, r8
    1710:	93 01       	movw	r18, r6
    1712:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__divmodsi4>
    1716:	02 0f       	add	r16, r18
    1718:	13 1f       	adc	r17, r19
    171a:	1a 83       	std	Y+2, r17	; 0x02
    171c:	09 83       	std	Y+1, r16	; 0x01
           R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//RL3 to -
    171e:	34 b8       	out	0x04, r3	; 4
           adcmv[1] = W20msReadADC(TP1);
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	0e 94 2e 1a 	call	0x345c	; 0x345c <W20msReadADC>
    1726:	8c 01       	movw	r16, r24
           adcmv[1] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1728:	60 91 3f 01 	lds	r22, 0x013F
    172c:	70 91 40 01 	lds	r23, 0x0140
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	2e e4       	ldi	r18, 0x4E	; 78
    1736:	3b e1       	ldi	r19, 0x1B	; 27
    1738:	40 e0       	ldi	r20, 0x00	; 0
    173a:	50 e0       	ldi	r21, 0x00	; 0
    173c:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
    1740:	a4 01       	movw	r20, r8
    1742:	93 01       	movw	r18, r6
    1744:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__divmodsi4>
    1748:	02 0f       	add	r16, r18
    174a:	13 1f       	adc	r17, r19
    174c:	1c 83       	std	Y+4, r17	; 0x04
    174e:	0b 83       	std	Y+3, r16	; 0x03
           R_PORT = 1<<(TP2*2);		//RL2 to VCC
    1750:	25 b8       	out	0x05, r2	; 5
           R_DDR = (1<<(TP2*2)) | (1<<(TP3*2));	//RL3 to -
    1752:	e4 e1       	ldi	r30, 0x14	; 20
    1754:	e4 b9       	out	0x04, r30	; 4
           adcmv[2] = W20msReadADC(TP2);
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	0e 94 2e 1a 	call	0x345c	; 0x345c <W20msReadADC>
    175c:	8c 01       	movw	r16, r24
           adcmv[2] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    175e:	60 91 3f 01 	lds	r22, 0x013F
    1762:	70 91 40 01 	lds	r23, 0x0140
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	2e e4       	ldi	r18, 0x4E	; 78
    176c:	3b e1       	ldi	r19, 0x1B	; 27
    176e:	40 e0       	ldi	r20, 0x00	; 0
    1770:	50 e0       	ldi	r21, 0x00	; 0
    1772:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
    1776:	a4 01       	movw	r20, r8
    1778:	93 01       	movw	r18, r6
    177a:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__divmodsi4>
    177e:	02 0f       	add	r16, r18
    1780:	13 1f       	adc	r17, r19
    1782:	1e 83       	std	Y+6, r17	; 0x06
    1784:	0d 83       	std	Y+5, r16	; 0x05
           lcd_fix2_string(RLRL);	// "RLRL"
    1786:	84 ef       	ldi	r24, 0xF4	; 244
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	49 c0       	rjmp	.+146    	; 0x181e <AutoCheck+0x344>
        }
                                        //############################################
        if (tt == 3) { // how equal are the RH resistors
    178c:	fe 2d       	mov	r31, r14
    178e:	f3 30       	cpi	r31, 0x03	; 3
    1790:	41 f5       	brne	.+80     	; 0x17e2 <AutoCheck+0x308>
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    1792:	a5 b8       	out	0x05, r10	; 5
           R_DDR = (2<<(TP1*2)) | (2<<(TP2*2));	//RH2 to -
    1794:	2a e0       	ldi	r18, 0x0A	; 10
    1796:	24 b9       	out	0x04, r18	; 4
           adcmv[0] = W20msReadADC(TP1);
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	0e 94 2e 1a 	call	0x345c	; 0x345c <W20msReadADC>
           adcmv[3] = ADCconfig.U_AVCC / 2;
    179e:	00 91 3f 01 	lds	r16, 0x013F
    17a2:	10 91 40 01 	lds	r17, 0x0140
    17a6:	16 95       	lsr	r17
    17a8:	07 95       	ror	r16
    17aa:	18 87       	std	Y+8, r17	; 0x08
    17ac:	0f 83       	std	Y+7, r16	; 0x07
           adcmv[0] -= adcmv[3];
    17ae:	80 1b       	sub	r24, r16
    17b0:	91 0b       	sbc	r25, r17
    17b2:	9a 83       	std	Y+2, r25	; 0x02
    17b4:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (2<<(TP1*2)) | (2<<(TP3*2));	//RH3 to -
    17b6:	82 e2       	ldi	r24, 0x22	; 34
    17b8:	84 b9       	out	0x04, r24	; 4
           adcmv[1] = W20msReadADC(TP1);
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	0e 94 2e 1a 	call	0x345c	; 0x345c <W20msReadADC>
           adcmv[1] -= adcmv[3];
    17c0:	80 1b       	sub	r24, r16
    17c2:	91 0b       	sbc	r25, r17
    17c4:	9c 83       	std	Y+4, r25	; 0x04
    17c6:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 2<<(TP2*2);		//RL2 to VCC
    17c8:	c5 b8       	out	0x05, r12	; 5
           R_DDR = (2<<(TP2*2)) | (2<<(TP3*2));	//RH3 to -
    17ca:	e8 e2       	ldi	r30, 0x28	; 40
    17cc:	e4 b9       	out	0x04, r30	; 4
           adcmv[2] = W20msReadADC(TP2);
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	0e 94 2e 1a 	call	0x345c	; 0x345c <W20msReadADC>
           adcmv[2] -= adcmv[3];
    17d4:	80 1b       	sub	r24, r16
    17d6:	91 0b       	sbc	r25, r17
    17d8:	9e 83       	std	Y+6, r25	; 0x06
    17da:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RHRH);	// "RHRH"
    17dc:	82 e0       	ldi	r24, 0x02	; 2
    17de:	91 e0       	ldi	r25, 0x01	; 1
    17e0:	1e c0       	rjmp	.+60     	; 0x181e <AutoCheck+0x344>
        }
                                        //############################################
        if (tt == 4) { // Text release probes
    17e2:	fe 2d       	mov	r31, r14
    17e4:	f4 30       	cpi	r31, 0x04	; 4
    17e6:	19 f4       	brne	.+6      	; 0x17ee <AutoCheck+0x314>
           lcd_fix2_string(RELPROBE);	// "Release Probes"
    17e8:	84 ed       	ldi	r24, 0xD4	; 212
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	18 c0       	rjmp	.+48     	; 0x181e <AutoCheck+0x344>
        }
                                        //############################################
        if (tt == 5) { // can we switch the ADC pins to GND across R_H resistor?
    17ee:	2e 2d       	mov	r18, r14
    17f0:	25 30       	cpi	r18, 0x05	; 5
    17f2:	c1 f4       	brne	.+48     	; 0x1824 <AutoCheck+0x34a>
           R_PORT = 0;
    17f4:	15 b8       	out	0x05, r1	; 5
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to GND
    17f6:	a4 b8       	out	0x04, r10	; 4
           adcmv[0] = W20msReadADC(TP1);
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	0e 94 2e 1a 	call	0x345c	; 0x345c <W20msReadADC>
    17fe:	9a 83       	std	Y+2, r25	; 0x02
    1800:	89 83       	std	Y+1, r24	; 0x01

           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to GND
    1802:	c4 b8       	out	0x04, r12	; 4
           adcmv[1] = W20msReadADC(TP2);
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	0e 94 2e 1a 	call	0x345c	; 0x345c <W20msReadADC>
    180a:	9c 83       	std	Y+4, r25	; 0x04
    180c:	8b 83       	std	Y+3, r24	; 0x03

           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    180e:	b4 b8       	out	0x04, r11	; 4
           adcmv[2] = W20msReadADC(TP3);
    1810:	82 e0       	ldi	r24, 0x02	; 2
    1812:	0e 94 2e 1a 	call	0x345c	; 0x345c <W20msReadADC>
    1816:	9e 83       	std	Y+6, r25	; 0x06
    1818:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RH1L);	// "RH_Lo="
    181a:	8c ee       	ldi	r24, 0xEC	; 236
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	0e 94 3f 01 	call	0x27e	; 0x27e <lcd_pgm_string>
    1822:	30 c0       	rjmp	.+96     	; 0x1884 <AutoCheck+0x3aa>
        }
                                        //############################################
        if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
    1824:	8e 2d       	mov	r24, r14
    1826:	86 30       	cpi	r24, 0x06	; 6
    1828:	51 f5       	brne	.+84     	; 0x187e <AutoCheck+0x3a4>
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to VCC
    182a:	a4 b8       	out	0x04, r10	; 4
           R_PORT = 2<<(TP1*2);
    182c:	a5 b8       	out	0x05, r10	; 5
           adcmv[0] = W20msReadADC(TP1) - ADCconfig.U_AVCC;
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	0e 94 2e 1a 	call	0x345c	; 0x345c <W20msReadADC>
    1834:	20 91 3f 01 	lds	r18, 0x013F
    1838:	30 91 40 01 	lds	r19, 0x0140
    183c:	82 1b       	sub	r24, r18
    183e:	93 0b       	sbc	r25, r19
    1840:	9a 83       	std	Y+2, r25	; 0x02
    1842:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to VCC
    1844:	c4 b8       	out	0x04, r12	; 4
           R_PORT = 2<<(TP2*2);
    1846:	c5 b8       	out	0x05, r12	; 5
           adcmv[1] = W20msReadADC(TP2) - ADCconfig.U_AVCC;
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	0e 94 2e 1a 	call	0x345c	; 0x345c <W20msReadADC>
    184e:	20 91 3f 01 	lds	r18, 0x013F
    1852:	30 91 40 01 	lds	r19, 0x0140
    1856:	82 1b       	sub	r24, r18
    1858:	93 0b       	sbc	r25, r19
    185a:	9c 83       	std	Y+4, r25	; 0x04
    185c:	8b 83       	std	Y+3, r24	; 0x03
           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to VCC
    185e:	b4 b8       	out	0x04, r11	; 4
           R_PORT = 2<<(TP3*2);
    1860:	b5 b8       	out	0x05, r11	; 5
           adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
    1862:	82 e0       	ldi	r24, 0x02	; 2
    1864:	0e 94 2e 1a 	call	0x345c	; 0x345c <W20msReadADC>
    1868:	20 91 3f 01 	lds	r18, 0x013F
    186c:	30 91 40 01 	lds	r19, 0x0140
    1870:	82 1b       	sub	r24, r18
    1872:	93 0b       	sbc	r25, r19
    1874:	9e 83       	std	Y+6, r25	; 0x06
    1876:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RH1H);	// "RH_Hi="
    1878:	80 ef       	ldi	r24, 0xF0	; 240
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	d0 cf       	rjmp	.-96     	; 0x181e <AutoCheck+0x344>
        }
                                        //############################################
        if (tt > 1) {	// output 3 voltages 
    187e:	ee 2d       	mov	r30, r14
    1880:	e1 30       	cpi	r30, 0x01	; 1
    1882:	29 f1       	breq	.+74     	; 0x18ce <AutoCheck+0x3f4>
           lcd_line2();			//Cursor to column 1, row 2
    1884:	80 ec       	ldi	r24, 0xC0	; 192
    1886:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
           lcd_string(itoa(adcmv[0], outval, 10));	//output voltage 1
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	9a 81       	ldd	r25, Y+2	; 0x02
    188e:	6e e0       	ldi	r22, 0x0E	; 14
    1890:	71 e0       	ldi	r23, 0x01	; 1
    1892:	4a e0       	ldi	r20, 0x0A	; 10
    1894:	50 e0       	ldi	r21, 0x00	; 0
    1896:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <itoa>
    189a:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_string>
           lcd_space();
    189e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_space>
           lcd_string(itoa(adcmv[1], outval, 10));	//output voltage 2
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	9c 81       	ldd	r25, Y+4	; 0x04
    18a6:	6e e0       	ldi	r22, 0x0E	; 14
    18a8:	71 e0       	ldi	r23, 0x01	; 1
    18aa:	4a e0       	ldi	r20, 0x0A	; 10
    18ac:	50 e0       	ldi	r21, 0x00	; 0
    18ae:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <itoa>
    18b2:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_string>
           lcd_space();
    18b6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_space>
           lcd_string(itoa(adcmv[2], outval, 10));	//output voltage 3
    18ba:	8d 81       	ldd	r24, Y+5	; 0x05
    18bc:	9e 81       	ldd	r25, Y+6	; 0x06
    18be:	6e e0       	ldi	r22, 0x0E	; 14
    18c0:	71 e0       	ldi	r23, 0x01	; 1
    18c2:	4a e0       	ldi	r20, 0x0A	; 10
    18c4:	50 e0       	ldi	r21, 0x00	; 0
    18c6:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <itoa>
    18ca:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_string>
        }
        ADC_DDR =  TXD_MSK;		// all-Pins to Input
    18ce:	c7 b8       	out	0x07, r12	; 7
        ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
    18d0:	c8 b8       	out	0x08, r12	; 8
        R_DDR = 0;			// all R-Ports to Input
    18d2:	14 b8       	out	0x04, r1	; 4
        R_PORT = 0;
    18d4:	15 b8       	out	0x05, r1	; 5
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    18d6:	4f 9b       	sbis	0x09, 7	; 9
    18d8:	09 c0       	rjmp	.+18     	; 0x18ec <AutoCheck+0x412>
	   // if key is pressed, don't repeat
           break;
        }
        wait500ms();
    18da:	0e 94 72 14 	call	0x28e4	; 0x28e4 <wait500ms>
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    18de:	4f 9b       	sbis	0x09, 7	; 9
    18e0:	05 c0       	rjmp	.+10     	; 0x18ec <AutoCheck+0x412>
	   // if key is pressed, don't repeat
           break;
        }
        wait500ms();
    18e2:	0e 94 72 14 	call	0x28e4	; 0x28e4 <wait500ms>
    18e6:	da 94       	dec	r13
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
  wait1s();
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
    18e8:	09 f0       	breq	.+2      	; 0x18ec <AutoCheck+0x412>
    18ea:	ac ce       	rjmp	.-680    	; 0x1644 <AutoCheck+0x16a>
    18ec:	1e 2d       	mov	r17, r14
	   // if key is pressed, don't repeat
           break;
        }
        wait500ms();
     } //end for ww
     wait1s();
    18ee:	0e 94 71 14 	call	0x28e2	; 0x28e2 <wait1000ms>
  lcd_clear();
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
  wait1s();
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    18f2:	1f 5f       	subi	r17, 0xFF	; 255
    18f4:	17 30       	cpi	r17, 0x07	; 7
    18f6:	59 f0       	breq	.+22     	; 0x190e <AutoCheck+0x434>
void AutoCheck(void) {
    18f8:	a4 e0       	ldi	r26, 0x04	; 4
    18fa:	da 2e       	mov	r13, r26
        lcd_line2();			//Cursor to column 1, row 2
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_data('T');			//output the Testmode "T"
    18fc:	08 94       	sec
    18fe:	41 1c       	adc	r4, r1
    1900:	51 1c       	adc	r5, r1
        if (tt == 2) { // how equal are the RL resistors? 
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
           adcmv[0] = W20msReadADC(TP1);
           adcmv[0] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
           R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//RL3 to -
    1902:	f1 e1       	ldi	r31, 0x11	; 17
    1904:	3f 2e       	mov	r3, r31
           adcmv[1] = W20msReadADC(TP1);
           adcmv[1] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
           R_PORT = 1<<(TP2*2);		//RL2 to VCC
    1906:	e4 e0       	ldi	r30, 0x04	; 4
    1908:	2e 2e       	mov	r2, r30
    190a:	e1 2e       	mov	r14, r17
    190c:	9b ce       	rjmp	.-714    	; 0x1644 <AutoCheck+0x16a>
     wait1s();
  } //end for tt
#endif

  // measurement of internal resistance of the ADC port outputs switched to GND
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    190e:	79 e0       	ldi	r23, 0x09	; 9
    1910:	c7 2e       	mov	r12, r23
    1912:	c7 b8       	out	0x07, r12	; 7
  R_PORT = 1<<(TP1*2);		//R_L-PORT 1 to VCC
    1914:	dd 24       	eor	r13, r13
    1916:	d3 94       	inc	r13
    1918:	d5 b8       	out	0x05, r13	; 5
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to VCC
    191a:	d4 b8       	out	0x04, r13	; 4
  adcmv[0] = W5msReadADC(TP1);
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
    1922:	7c 01       	movw	r14, r24

  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin 2 to output 0V
    1924:	6a e0       	ldi	r22, 0x0A	; 10
    1926:	66 2e       	mov	r6, r22
    1928:	67 b8       	out	0x07, r6	; 7
  R_PORT =  1<<(TP2*2);	//R_L-PORT 2 to VCC
    192a:	54 e0       	ldi	r21, 0x04	; 4
    192c:	85 2e       	mov	r8, r21
    192e:	85 b8       	out	0x05, r8	; 5
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to VCC
    1930:	84 b8       	out	0x04, r8	; 4
  adcmv[1] = W5msReadADC(TP2);
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
    1938:	8c 01       	movw	r16, r24

  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin 3 to output 0V
    193a:	4c e0       	ldi	r20, 0x0C	; 12
    193c:	a4 2e       	mov	r10, r20
    193e:	a7 b8       	out	0x07, r10	; 7
  R_PORT =  1<<(TP3*2);	//R_L-PORT 3 to VCC
    1940:	30 e1       	ldi	r19, 0x10	; 16
    1942:	b3 2e       	mov	r11, r19
    1944:	b5 b8       	out	0x05, r11	; 5
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to VCC
    1946:	b4 b8       	out	0x04, r11	; 4
  adcmv[2] = W5msReadADC(TP3);
    1948:	82 e0       	ldi	r24, 0x02	; 2
    194a:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
  sum_rm = (adcmv[0] + adcmv[1] + adcmv[2]); //add all three values
    194e:	0e 0d       	add	r16, r14
    1950:	1f 1d       	adc	r17, r15
    1952:	08 0f       	add	r16, r24
    1954:	19 1f       	adc	r17, r25

  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
    1956:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
    1958:	c8 b8       	out	0x08, r12	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    195a:	c7 b8       	out	0x07, r12	; 7
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
    195c:	d4 b8       	out	0x04, r13	; 4
  adcmv[0] = ADCconfig.U_AVCC - W5msReadADC(TP1);
    195e:	c0 90 3f 01 	lds	r12, 0x013F
    1962:	d0 90 40 01 	lds	r13, 0x0140
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
    196c:	c8 1a       	sub	r12, r24
    196e:	d9 0a       	sbc	r13, r25
    1970:	da 82       	std	Y+2, r13	; 0x02
    1972:	c9 82       	std	Y+1, r12	; 0x01
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
    1974:	68 b8       	out	0x08, r6	; 8
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
    1976:	67 b8       	out	0x07, r6	; 7
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
    1978:	84 b8       	out	0x04, r8	; 4
  adcmv[1] = ADCconfig.U_AVCC - W5msReadADC(TP2);
    197a:	e0 90 3f 01 	lds	r14, 0x013F
    197e:	f0 90 40 01 	lds	r15, 0x0140
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
    1988:	e8 1a       	sub	r14, r24
    198a:	f9 0a       	sbc	r15, r25
    198c:	fc 82       	std	Y+4, r15	; 0x04
    198e:	eb 82       	std	Y+3, r14	; 0x03

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
    1990:	a8 b8       	out	0x08, r10	; 8
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
    1992:	a7 b8       	out	0x07, r10	; 7
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
    1994:	b4 b8       	out	0x04, r11	; 4
  adcmv[2] = ADCconfig.U_AVCC - W5msReadADC(TP3);
    1996:	a0 90 3f 01 	lds	r10, 0x013F
    199a:	b0 90 40 01 	lds	r11, 0x0140
    199e:	82 e0       	ldi	r24, 0x02	; 2
    19a0:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>

  sum_c0 = (adcmv[0] + adcmv[1] + adcmv[2]);
    19a4:	ec 0c       	add	r14, r12
    19a6:	fd 1c       	adc	r15, r13
  adcmv[1] = ADCconfig.U_AVCC - W5msReadADC(TP2);

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
  adcmv[2] = ADCconfig.U_AVCC - W5msReadADC(TP3);
    19a8:	a8 1a       	sub	r10, r24
    19aa:	b9 0a       	sbc	r11, r25

  sum_c0 = (adcmv[0] + adcmv[1] + adcmv[2]);
    19ac:	ea 0c       	add	r14, r10
    19ae:	fb 1c       	adc	r15, r11
  u680 = ((ADCconfig.U_AVCC * 3) - sum_rm - sum_c0);	//three times the voltage at the 680 Ohm
    19b0:	80 91 3f 01 	lds	r24, 0x013F
    19b4:	90 91 40 01 	lds	r25, 0x0140
    19b8:	5c 01       	movw	r10, r24
    19ba:	aa 0c       	add	r10, r10
    19bc:	bb 1c       	adc	r11, r11
    19be:	a8 0e       	add	r10, r24
    19c0:	b9 1e       	adc	r11, r25
    19c2:	a0 1a       	sub	r10, r16
    19c4:	b1 0a       	sbc	r11, r17
    19c6:	ae 18       	sub	r10, r14
    19c8:	bf 08       	sbc	r11, r15
  pin_rm = (unsigned long)((unsigned long)sum_rm * (unsigned long)R_L_VAL) / (unsigned long)u680;
    19ca:	cc 24       	eor	r12, r12
    19cc:	dd 24       	eor	r13, r13
    19ce:	b8 01       	movw	r22, r16
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	20 e9       	ldi	r18, 0x90	; 144
    19d6:	3a e1       	ldi	r19, 0x1A	; 26
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
    19e0:	a6 01       	movw	r20, r12
    19e2:	95 01       	movw	r18, r10
    19e4:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
    19e8:	49 01       	movw	r8, r18
  adcmv[2] = pin_rm;	// for last output in row 2
    19ea:	3e 83       	std	Y+6, r19	; 0x06
    19ec:	2d 83       	std	Y+5, r18	; 0x05
  pin_rp = (unsigned long)((unsigned long)sum_c0 * (unsigned long)R_L_VAL) / (unsigned long)u680;
    19ee:	b7 01       	movw	r22, r14
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	20 e9       	ldi	r18, 0x90	; 144
    19f6:	3a e1       	ldi	r19, 0x1A	; 26
    19f8:	40 e0       	ldi	r20, 0x00	; 0
    19fa:	50 e0       	ldi	r21, 0x00	; 0
    19fc:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
    1a00:	a6 01       	movw	r20, r12
    1a02:	95 01       	movw	r18, r10
    1a04:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
    1a08:	79 01       	movw	r14, r18
  lcd_clear();
    1a0a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_clear>
  lcd_fix_string(RIHI);	// "RiHi="
    1a0e:	8f e5       	ldi	r24, 0x5F	; 95
    1a10:	91 e0       	ldi	r25, 0x01	; 1
    1a12:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
  DisplayValue(pin_rp,-1,LCD_CHAR_OMEGA,3);
    1a16:	b7 01       	movw	r22, r14
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	4f ef       	ldi	r20, 0xFF	; 255
    1a1e:	24 ef       	ldi	r18, 0xF4	; 244
    1a20:	03 e0       	ldi	r16, 0x03	; 3
    1a22:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DisplayValue>
  lcd_line2();
    1a26:	80 ec       	ldi	r24, 0xC0	; 192
    1a28:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
  lcd_fix_string(RILO);	// "RiLo="
    1a2c:	86 e6       	ldi	r24, 0x66	; 102
    1a2e:	91 e0       	ldi	r25, 0x01	; 1
    1a30:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
  DisplayValue(pin_rm,-1,LCD_CHAR_OMEGA,3);
    1a34:	b4 01       	movw	r22, r8
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	4f ef       	ldi	r20, 0xFF	; 255
    1a3c:	24 ef       	ldi	r18, 0xF4	; 244
    1a3e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DisplayValue>
  wait2s();			//wait 2 seconds
    1a42:	0e 94 70 14 	call	0x28e0	; 0x28e0 <wait2s>
#ifdef AUTO_CAL
  if ((pin_rp < 280) && (pin_rm < 250)) {
    1a46:	f8 e1       	ldi	r31, 0x18	; 24
    1a48:	ef 16       	cp	r14, r31
    1a4a:	f1 e0       	ldi	r31, 0x01	; 1
    1a4c:	ff 06       	cpc	r15, r31
    1a4e:	90 f4       	brcc	.+36     	; 0x1a74 <AutoCheck+0x59a>
    1a50:	2a ef       	ldi	r18, 0xFA	; 250
    1a52:	82 16       	cp	r8, r18
    1a54:	91 04       	cpc	r9, r1
    1a56:	70 f4       	brcc	.+28     	; 0x1a74 <AutoCheck+0x59a>
     // rp is below 28 Ohm and rm is below 25 Ohm
     (void) eeprom_write_word((uint16_t *)(&R680pl), pin_rp+R_L_VAL);  //hold VCC resistance value in EEprom
    1a58:	b7 01       	movw	r22, r14
    1a5a:	60 57       	subi	r22, 0x70	; 112
    1a5c:	75 4e       	sbci	r23, 0xE5	; 229
    1a5e:	85 eb       	ldi	r24, 0xB5	; 181
    1a60:	91 e0       	ldi	r25, 0x01	; 1
    1a62:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <__eewr_word_m168>
     (void) eeprom_write_word((uint16_t *)(&R680mi), pin_rm+R_L_VAL);  //hold GND resistance value in EEprom
    1a66:	b4 01       	movw	r22, r8
    1a68:	60 57       	subi	r22, 0x70	; 112
    1a6a:	75 4e       	sbci	r23, 0xE5	; 229
    1a6c:	87 eb       	ldi	r24, 0xB7	; 183
    1a6e:	91 e0       	ldi	r25, 0x01	; 1
    1a70:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <__eewr_word_m168>
  }
#endif

  //measure Zero offset for Capacity measurement
  adcmv[3] = 0;
    1a74:	18 86       	std	Y+8, r1	; 0x08
    1a76:	1f 82       	std	Y+7, r1	; 0x07
  PartFound = PART_NONE;
    1a78:	10 92 09 01 	sts	0x0109, r1
  ReadCapacity(TP3, TP1);
    1a7c:	82 e0       	ldi	r24, 0x02	; 2
    1a7e:	60 e0       	ldi	r22, 0x00	; 0
    1a80:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <ReadCapacity>
  adcmv[5] = (unsigned int) cap.cval_uncorrected;	//save capacity value of empty Pin 1:3
    1a84:	00 91 62 01 	lds	r16, 0x0162
    1a88:	10 91 63 01 	lds	r17, 0x0163
    1a8c:	1c 87       	std	Y+12, r17	; 0x0c
    1a8e:	0b 87       	std	Y+11, r16	; 0x0b
  ReadCapacity(TP3, TP2);
    1a90:	82 e0       	ldi	r24, 0x02	; 2
    1a92:	61 e0       	ldi	r22, 0x01	; 1
    1a94:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <ReadCapacity>
  adcmv[6] = (unsigned int) cap.cval_uncorrected;	//save capacity value of empty Pin 2:3
    1a98:	e0 90 62 01 	lds	r14, 0x0162
    1a9c:	f0 90 63 01 	lds	r15, 0x0163
    1aa0:	fe 86       	std	Y+14, r15	; 0x0e
    1aa2:	ed 86       	std	Y+13, r14	; 0x0d
  ReadCapacity(TP2, TP1);
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	60 e0       	ldi	r22, 0x00	; 0
    1aa8:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <ReadCapacity>
  adcmv[2] = (unsigned int) cap.cval_uncorrected;	//save capacity value of empty Pin 1:2
    1aac:	c0 90 62 01 	lds	r12, 0x0162
    1ab0:	d0 90 63 01 	lds	r13, 0x0163
    1ab4:	de 82       	std	Y+6, r13	; 0x06
    1ab6:	cd 82       	std	Y+5, r12	; 0x05
  ReadCapacity(TP1, TP3);
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	62 e0       	ldi	r22, 0x02	; 2
    1abc:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <ReadCapacity>
  adcmv[1] = (unsigned int) cap.cval_uncorrected;	//save capacity value of empty Pin 3:1
    1ac0:	80 91 62 01 	lds	r24, 0x0162
    1ac4:	90 91 63 01 	lds	r25, 0x0163
    1ac8:	9c 83       	std	Y+4, r25	; 0x04
    1aca:	8b 83       	std	Y+3, r24	; 0x03
  ReadCapacity(TP2, TP3);
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	62 e0       	ldi	r22, 0x02	; 2
    1ad0:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <ReadCapacity>
  adcmv[4] = (unsigned int) cap.cval_uncorrected;	//save capacity value of empty Pin 3:2
    1ad4:	80 91 62 01 	lds	r24, 0x0162
    1ad8:	90 91 63 01 	lds	r25, 0x0163
    1adc:	9a 87       	std	Y+10, r25	; 0x0a
    1ade:	89 87       	std	Y+9, r24	; 0x09
  ReadCapacity(TP1, TP2);
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	61 e0       	ldi	r22, 0x01	; 1
    1ae4:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <ReadCapacity>
  adcmv[0] = (unsigned int) cap.cval_uncorrected;	//save capacity value of empty Pin 2:1
    1ae8:	80 91 62 01 	lds	r24, 0x0162
    1aec:	90 91 63 01 	lds	r25, 0x0163
    1af0:	9a 83       	std	Y+2, r25	; 0x02
    1af2:	89 83       	std	Y+1, r24	; 0x01
  lcd_clear();
    1af4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_clear>
  lcd_fix_string(C0_str);			//output "C0 "
    1af8:	8d e6       	ldi	r24, 0x6D	; 109
    1afa:	91 e0       	ldi	r25, 0x01	; 1
    1afc:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
    1b00:	b8 01       	movw	r22, r16
    1b02:	88 27       	eor	r24, r24
    1b04:	77 fd       	sbrc	r23, 7
    1b06:	80 95       	com	r24
    1b08:	98 2f       	mov	r25, r24
    1b0a:	40 e0       	ldi	r20, 0x00	; 0
    1b0c:	20 e2       	ldi	r18, 0x20	; 32
    1b0e:	03 e0       	ldi	r16, 0x03	; 3
    1b10:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DisplayValue>
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
    1b14:	b7 01       	movw	r22, r14
    1b16:	88 27       	eor	r24, r24
    1b18:	77 fd       	sbrc	r23, 7
    1b1a:	80 95       	com	r24
    1b1c:	98 2f       	mov	r25, r24
    1b1e:	40 e0       	ldi	r20, 0x00	; 0
    1b20:	20 e2       	ldi	r18, 0x20	; 32
    1b22:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DisplayValue>
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
    1b26:	b6 01       	movw	r22, r12
    1b28:	88 27       	eor	r24, r24
    1b2a:	77 fd       	sbrc	r23, 7
    1b2c:	80 95       	com	r24
    1b2e:	98 2f       	mov	r25, r24
    1b30:	44 ef       	ldi	r20, 0xF4	; 244
    1b32:	26 e4       	ldi	r18, 0x46	; 70
    1b34:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DisplayValue>
    1b38:	8e 01       	movw	r16, r28
    1b3a:	0f 5f       	subi	r16, 0xFF	; 255
    1b3c:	1f 4f       	sbci	r17, 0xFF	; 255
void AutoCheck(void) {
    1b3e:	ce 01       	movw	r24, r28
    1b40:	0f 96       	adiw	r24, 0x0f	; 15
    1b42:	f8 01       	movw	r30, r16
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
#ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
    1b44:	21 91       	ld	r18, Z+
    1b46:	31 91       	ld	r19, Z+
    1b48:	27 34       	cpi	r18, 0x47	; 71
    1b4a:	31 05       	cpc	r19, r1
    1b4c:	ec f4       	brge	.+58     	; 0x1b88 <AutoCheck+0x6ae>
  lcd_fix_string(C0_str);			//output "C0 "
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
#ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
    1b4e:	e8 17       	cp	r30, r24
    1b50:	f9 07       	cpc	r31, r25
    1b52:	c1 f7       	brne	.-16     	; 0x1b44 <AutoCheck+0x66a>
    1b54:	ee 24       	eor	r14, r14
    1b56:	ff 24       	eor	r15, r15
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
    1b58:	f8 01       	movw	r30, r16
    1b5a:	60 81       	ld	r22, Z
    1b5c:	0e 5f       	subi	r16, 0xFE	; 254
    1b5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b60:	61 5f       	subi	r22, 0xF1	; 241
    1b62:	c7 01       	movw	r24, r14
    1b64:	8d 53       	subi	r24, 0x3D	; 61
    1b66:	9e 4f       	sbci	r25, 0xFE	; 254
    1b68:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__eewr_byte_m168>
    1b6c:	08 94       	sec
    1b6e:	e1 1c       	adc	r14, r1
    1b70:	f1 1c       	adc	r15, r1
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
#ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
    1b72:	f7 e0       	ldi	r31, 0x07	; 7
    1b74:	ef 16       	cp	r14, r31
    1b76:	f1 04       	cpc	r15, r1
    1b78:	79 f7       	brne	.-34     	; 0x1b58 <AutoCheck+0x67e>
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
  }
  lcd_line2();
    1b7a:	80 ec       	ldi	r24, 0xC0	; 192
    1b7c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
  lcd_fix_string(OK_str);		// output "OK"
    1b80:	8f ee       	ldi	r24, 0xEF	; 239
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
no_c0save:
#endif
 wait2s();		//wait 2 seconds
    1b88:	0e 94 70 14 	call	0x28e0	; 0x28e0 <wait2s>
 
#ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
    1b8c:	10 e0       	ldi	r17, 0x00	; 0
 for (ww=0;ww<64;ww++) {
    1b8e:	cc 24       	eor	r12, r12
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
    1b90:	ba e0       	ldi	r27, 0x0A	; 10
    1b92:	8b 2e       	mov	r8, r27
    1b94:	91 2c       	mov	r9, r1
    1b96:	a1 2c       	mov	r10, r1
    1b98:	b1 2c       	mov	r11, r1
     lcd_data('3');
     lcd_fix_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1b9a:	aa e5       	ldi	r26, 0x5A	; 90
    1b9c:	ea 2e       	mov	r14, r26
    1b9e:	a1 e0       	ldi	r26, 0x01	; 1
    1ba0:	fa 2e       	mov	r15, r26
 
#ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
     lcd_clear();
    1ba2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_clear>
     lcd_data('1');
    1ba6:	81 e3       	ldi	r24, 0x31	; 49
    1ba8:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
     lcd_fix_string(CapZeich);	// "-||-"
    1bac:	87 e2       	ldi	r24, 0x27	; 39
    1bae:	91 e0       	ldi	r25, 0x01	; 1
    1bb0:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
     lcd_data('3');
    1bb4:	83 e3       	ldi	r24, 0x33	; 51
    1bb6:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
     lcd_fix_string(MinCap_str); // " >100nF!"
    1bba:	81 e7       	ldi	r24, 0x71	; 113
    1bbc:	91 e0       	ldi	r25, 0x01	; 1
    1bbe:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
     PartFound = PART_NONE;
    1bc2:	10 92 09 01 	sts	0x0109, r1
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
    1bc6:	82 e0       	ldi	r24, 0x02	; 2
    1bc8:	60 e0       	ldi	r22, 0x00	; 0
    1bca:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <ReadCapacity>
    1bce:	20 91 5a 01 	lds	r18, 0x015A
    1bd2:	30 91 5b 01 	lds	r19, 0x015B
    1bd6:	40 91 5c 01 	lds	r20, 0x015C
    1bda:	50 91 5d 01 	lds	r21, 0x015D
    1bde:	00 91 6a 01 	lds	r16, 0x016A
     while (cap.cpre < -9) {
    1be2:	07 c0       	rjmp	.+14     	; 0x1bf2 <AutoCheck+0x718>
        cap.cpre++;
        cap.cval /= 10;
    1be4:	ca 01       	movw	r24, r20
    1be6:	b9 01       	movw	r22, r18
    1be8:	a5 01       	movw	r20, r10
    1bea:	94 01       	movw	r18, r8
    1bec:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
    1bf0:	0f 5f       	subi	r16, 0xFF	; 255
     lcd_data('3');
     lcd_fix_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1bf2:	07 3f       	cpi	r16, 0xF7	; 247
    1bf4:	bc f3       	brlt	.-18     	; 0x1be4 <AutoCheck+0x70a>
    1bf6:	00 93 6a 01 	sts	0x016A, r16
    1bfa:	20 93 5a 01 	sts	0x015A, r18
    1bfe:	f7 01       	movw	r30, r14
    1c00:	31 83       	std	Z+1, r19	; 0x01
    1c02:	42 83       	std	Z+2, r20	; 0x02
    1c04:	53 83       	std	Z+3, r21	; 0x03
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1c06:	07 3f       	cpi	r16, 0xF7	; 247
    1c08:	09 f0       	breq	.+2      	; 0x1c0c <AutoCheck+0x732>
    1c0a:	bc c0       	rjmp	.+376    	; 0x1d84 <AutoCheck+0x8aa>
    1c0c:	20 36       	cpi	r18, 0x60	; 96
    1c0e:	31 05       	cpc	r19, r1
    1c10:	41 05       	cpc	r20, r1
    1c12:	51 05       	cpc	r21, r1
    1c14:	08 f4       	brcc	.+2      	; 0x1c18 <AutoCheck+0x73e>
    1c16:	b6 c0       	rjmp	.+364    	; 0x1d84 <AutoCheck+0x8aa>
    1c18:	20 3f       	cpi	r18, 0xF0	; 240
    1c1a:	f5 e5       	ldi	r31, 0x55	; 85
    1c1c:	3f 07       	cpc	r19, r31
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	4f 07       	cpc	r20, r31
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	5f 07       	cpc	r21, r31
    1c26:	08 f0       	brcs	.+2      	; 0x1c2a <AutoCheck+0x750>
    1c28:	ad c0       	rjmp	.+346    	; 0x1d84 <AutoCheck+0x8aa>
        cap_found++;
    1c2a:	1f 5f       	subi	r17, 0xFF	; 255
     } else {
        cap_found = 0;		// wait for stable connection
     }
     if (cap_found > 1) {
    1c2c:	12 30       	cpi	r17, 0x02	; 2
    1c2e:	09 f0       	breq	.+2      	; 0x1c32 <AutoCheck+0x758>
    1c30:	aa c0       	rjmp	.+340    	; 0x1d86 <AutoCheck+0x8ac>
        // value of capacitor is correct
        (void) eeprom_write_word((uint16_t *)(&ref_offset), load_diff);	// hold zero offset + slew rate dependend offset
    1c32:	60 91 6c 01 	lds	r22, 0x016C
    1c36:	70 91 6d 01 	lds	r23, 0x016D
    1c3a:	81 ec       	ldi	r24, 0xC1	; 193
    1c3c:	91 e0       	ldi	r25, 0x01	; 1
    1c3e:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <__eewr_word_m168>
        lcd_clear();
    1c42:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_clear>
        lcd_fix_string(REF_C_str);	// "REF_C="
    1c46:	89 e7       	ldi	r24, 0x79	; 121
    1c48:	91 e0       	ldi	r25, 0x01	; 1
    1c4a:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
        lcd_string(itoa(load_diff, outval, 10));	//output REF_C_KORR
    1c4e:	80 91 6c 01 	lds	r24, 0x016C
    1c52:	90 91 6d 01 	lds	r25, 0x016D
    1c56:	6e e0       	ldi	r22, 0x0E	; 14
    1c58:	71 e0       	ldi	r23, 0x01	; 1
    1c5a:	4a e0       	ldi	r20, 0x0A	; 10
    1c5c:	50 e0       	ldi	r21, 0x00	; 0
    1c5e:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <itoa>
    1c62:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_string>
        eeprom_write_byte((uint8_t *)(&EE_ESR_ZERO), (uint8_t)ESR_ZERO); // set to initial zero offset
    1c66:	8a ec       	ldi	r24, 0xCA	; 202
    1c68:	91 e0       	ldi	r25, 0x01	; 1
    1c6a:	6d e1       	ldi	r22, 0x1D	; 29
    1c6c:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__eewr_byte_m168>
 #ifdef AUTOSCALE_ADC
        ADC_PORT =  TXD_VAL;	//ADC-Port 1 to GND
    1c70:	88 e0       	ldi	r24, 0x08	; 8
    1c72:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    1c74:	89 e0       	ldi	r24, 0x09	; 9
    1c76:	87 b9       	out	0x07, r24	; 7
        R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1c78:	80 e2       	ldi	r24, 0x20	; 32
    1c7a:	84 b9       	out	0x04, r24	; 4
        do {
           adcmv[0] = ReadADC(TP3);
    1c7c:	82 e0       	ldi	r24, 0x02	; 2
    1c7e:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
        } while (adcmv[0] > 980);
    1c82:	23 e0       	ldi	r18, 0x03	; 3
    1c84:	85 3d       	cpi	r24, 0xD5	; 213
    1c86:	92 07       	cpc	r25, r18
    1c88:	cc f7       	brge	.-14     	; 0x1c7c <AutoCheck+0x7a2>
        R_DDR = 0;		//all Pins to input 
    1c8a:	14 b8       	out	0x04, r1	; 4
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1c8c:	10 92 3e 01 	sts	0x013E, r1
    1c90:	10 92 3d 01 	sts	0x013D, r1
        adcmv[0] = ReadADC(TP3);  // get cap voltage with VCC reference
    1c94:	82 e0       	ldi	r24, 0x02	; 2
    1c96:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
    1c9a:	4c 01       	movw	r8, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1c9c:	89 eb       	ldi	r24, 0xB9	; 185
    1c9e:	91 e0       	ldi	r25, 0x01	; 1
    1ca0:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__eerd_byte_m168>
    1ca4:	99 27       	eor	r25, r25
    1ca6:	87 fd       	sbrc	r24, 7
    1ca8:	90 95       	com	r25
    1caa:	20 91 41 01 	lds	r18, 0x0141
    1cae:	30 91 42 01 	lds	r19, 0x0142
    1cb2:	82 0f       	add	r24, r18
    1cb4:	93 1f       	adc	r25, r19
    1cb6:	90 93 3e 01 	sts	0x013E, r25
    1cba:	80 93 3d 01 	sts	0x013D, r24
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
    1cbe:	82 e0       	ldi	r24, 0x02	; 2
    1cc0:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
    1cc4:	8c 01       	movw	r16, r24
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1cc6:	10 92 3e 01 	sts	0x013E, r1
    1cca:	10 92 3d 01 	sts	0x013D, r1
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
    1cce:	82 e0       	ldi	r24, 0x02	; 2
    1cd0:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
    1cd4:	5c 01       	movw	r10, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1cd6:	c0 90 41 01 	lds	r12, 0x0141
    1cda:	d0 90 42 01 	lds	r13, 0x0142
    1cde:	89 eb       	ldi	r24, 0xB9	; 185
    1ce0:	91 e0       	ldi	r25, 0x01	; 1
    1ce2:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__eerd_byte_m168>
    1ce6:	99 27       	eor	r25, r25
    1ce8:	87 fd       	sbrc	r24, 7
    1cea:	90 95       	com	r25
    1cec:	8c 0d       	add	r24, r12
    1cee:	9d 1d       	adc	r25, r13
    1cf0:	90 93 3e 01 	sts	0x013E, r25
    1cf4:	80 93 3d 01 	sts	0x013D, r24
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1cf8:	89 eb       	ldi	r24, 0xB9	; 185
    1cfa:	91 e0       	ldi	r25, 0x01	; 1
    1cfc:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__eerd_byte_m168>
    1d00:	68 2e       	mov	r6, r24
        lcd_line2();
    1d02:	80 ec       	ldi	r24, 0xC0	; 192
    1d04:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
        lcd_fix_string(REF_R_str);	// "REF_R="
    1d08:	80 e8       	ldi	r24, 0x80	; 128
    1d0a:	91 e0       	ldi	r25, 0x01	; 1
    1d0c:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1d10:	89 eb       	ldi	r24, 0xB9	; 185
    1d12:	91 e0       	ldi	r25, 0x01	; 1
    1d14:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__eerd_byte_m168>
        ADCconfig.U_Bandgap = ADC_internal_reference;
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
        ADCconfig.U_Bandgap = ADC_internal_reference;
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1d18:	f3 e0       	ldi	r31, 0x03	; 3
    1d1a:	ef 2e       	mov	r14, r31
    1d1c:	e8 0e       	add	r14, r24
    1d1e:	a8 0c       	add	r10, r8
    1d20:	b9 1c       	adc	r11, r9
    1d22:	a0 1a       	sub	r10, r16
    1d24:	b1 0a       	sbc	r11, r17
    1d26:	a0 1a       	sub	r10, r16
    1d28:	b1 0a       	sbc	r11, r17
    1d2a:	b5 01       	movw	r22, r10
    1d2c:	88 27       	eor	r24, r24
    1d2e:	77 fd       	sbrc	r23, 7
    1d30:	80 95       	com	r24
    1d32:	98 2f       	mov	r25, r24
    1d34:	26 2d       	mov	r18, r6
    1d36:	33 27       	eor	r19, r19
    1d38:	27 fd       	sbrc	r18, 7
    1d3a:	30 95       	com	r19
    1d3c:	2c 0d       	add	r18, r12
    1d3e:	3d 1d       	adc	r19, r13
    1d40:	40 e0       	ldi	r20, 0x00	; 0
    1d42:	50 e0       	ldi	r21, 0x00	; 0
    1d44:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
    1d48:	00 0f       	add	r16, r16
    1d4a:	11 1f       	adc	r17, r17
    1d4c:	98 01       	movw	r18, r16
    1d4e:	44 27       	eor	r20, r20
    1d50:	37 fd       	sbrc	r19, 7
    1d52:	40 95       	com	r20
    1d54:	54 2f       	mov	r21, r20
    1d56:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__divmodsi4>
        lcd_line2();
        lcd_fix_string(REF_R_str);	// "REF_R="
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1d5a:	e2 0e       	add	r14, r18
        (void) eeprom_write_byte((uint8_t *)(&RefDiff), (uint8_t)udiff2);	// hold offset for true reference Voltage
    1d5c:	89 eb       	ldi	r24, 0xB9	; 185
    1d5e:	91 e0       	ldi	r25, 0x01	; 1
    1d60:	6e 2d       	mov	r22, r14
    1d62:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__eewr_byte_m168>
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
    1d66:	8e 2d       	mov	r24, r14
    1d68:	99 27       	eor	r25, r25
    1d6a:	87 fd       	sbrc	r24, 7
    1d6c:	90 95       	com	r25
    1d6e:	6e e0       	ldi	r22, 0x0E	; 14
    1d70:	71 e0       	ldi	r23, 0x01	; 1
    1d72:	4a e0       	ldi	r20, 0x0A	; 10
    1d74:	50 e0       	ldi	r21, 0x00	; 0
    1d76:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <itoa>
    1d7a:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_string>
 #endif
        wait4s();
    1d7e:	0e 94 6e 14 	call	0x28dc	; 0x28dc <wait4s>
        break;
    1d82:	19 c0       	rjmp	.+50     	; 0x1db6 <AutoCheck+0x8dc>
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1d84:	10 e0       	ldi	r17, 0x00	; 0
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
 #endif
        wait4s();
        break;
     }
     lcd_line2();
    1d86:	80 ec       	ldi	r24, 0xC0	; 192
    1d88:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
     DisplayValue(cap.cval,cap.cpre,'F',4);
    1d8c:	60 91 5a 01 	lds	r22, 0x015A
    1d90:	70 91 5b 01 	lds	r23, 0x015B
    1d94:	80 91 5c 01 	lds	r24, 0x015C
    1d98:	90 91 5d 01 	lds	r25, 0x015D
    1d9c:	40 91 6a 01 	lds	r20, 0x016A
    1da0:	26 e4       	ldi	r18, 0x46	; 70
    1da2:	04 e0       	ldi	r16, 0x04	; 4
    1da4:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DisplayValue>
     wait200ms();			// wait additional time
    1da8:	0e 94 75 14 	call	0x28ea	; 0x28ea <wait200ms>
 wait2s();		//wait 2 seconds
 
#ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
    1dac:	c3 94       	inc	r12
    1dae:	8c 2d       	mov	r24, r12
    1db0:	80 34       	cpi	r24, 0x40	; 64
    1db2:	09 f0       	breq	.+2      	; 0x1db6 <AutoCheck+0x8dc>
    1db4:	f6 ce       	rjmp	.-532    	; 0x1ba2 <AutoCheck+0x6c8>
     wait200ms();			// wait additional time
  }

#endif

  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    1db6:	89 e1       	ldi	r24, 0x19	; 25
    1db8:	80 93 3b 01 	sts	0x013B, r24
  lcd_clear();
    1dbc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_clear>
  lcd_line2();
    1dc0:	80 ec       	ldi	r24, 0xC0	; 192
    1dc2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
  lcd_fix_string(VERSION_str);	//"Version ..."
    1dc6:	81 e5       	ldi	r24, 0x51	; 81
    1dc8:	91 e0       	ldi	r25, 0x01	; 1
    1dca:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
  lcd_line1();
    1dce:	80 e8       	ldi	r24, 0x80	; 128
    1dd0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
  lcd_fix_string(ATE);		//"Selftest End"
    1dd4:	8c ed       	ldi	r24, 0xDC	; 220
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
        // if key is pressed, don't repeat
        break;
     }
  }
#endif
 PartFound = PART_NONE;
    1ddc:	10 92 09 01 	sts	0x0109, r1
 wait1s();			//wait 1 seconds
    1de0:	0e 94 71 14 	call	0x28e2	; 0x28e2 <wait1000ms>
 } 
    1de4:	2e 96       	adiw	r28, 0x0e	; 14
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	ff 90       	pop	r15
    1dfa:	ef 90       	pop	r14
    1dfc:	df 90       	pop	r13
    1dfe:	cf 90       	pop	r12
    1e00:	bf 90       	pop	r11
    1e02:	af 90       	pop	r10
    1e04:	9f 90       	pop	r9
    1e06:	8f 90       	pop	r8
    1e08:	7f 90       	pop	r7
    1e0a:	6f 90       	pop	r6
    1e0c:	5f 90       	pop	r5
    1e0e:	4f 90       	pop	r4
    1e10:	3f 90       	pop	r3
    1e12:	2f 90       	pop	r2
    1e14:	08 95       	ret

00001e16 <main>:

#define MAIN_C
#include "Transistortester.h"

//begin of transistortester program
int main(void) {
    1e16:	0f 93       	push	r16
    1e18:	1f 93       	push	r17
    1e1a:	cf 93       	push	r28
    1e1c:	df 93       	push	r29
  //switch on
  ON_DDR = (1<<ON_PIN);
    1e1e:	80 e4       	ldi	r24, 0x40	; 64
    1e20:	8a b9       	out	0x0a, r24	; 10
  ON_PORT = (1<<ON_PIN); 	// switch power on 
    1e22:	8b b9       	out	0x0b, r24	; 11
  uint8_t tmp;
  //ADC-Init
  ADCSRA = (1<<ADEN) | AUTO_CLOCK_DIV;	//prescaler=8 or 64 (if 8Mhz clock)
    1e24:	86 e8       	ldi	r24, 0x86	; 134
    1e26:	80 93 7a 00 	sts	0x007A, r24
// #define WDRF_HOME MCU_STATUS_REG
 #define WDRF_HOME MCUCSR
#else
 #define WDRF_HOME MCUSR
#endif
  tmp = (WDRF_HOME & (1<<WDRF));	// save Watch Dog Flag
    1e2a:	14 b7       	in	r17, 0x34	; 52
  WDRF_HOME &= ~(1<<WDRF);	 	//reset Watch Dog flag
    1e2c:	84 b7       	in	r24, 0x34	; 52
    1e2e:	87 7f       	andi	r24, 0xF7	; 247
    1e30:	84 bf       	out	0x34, r24	; 52
  wdt_disable();			// disable Watch Dog
    1e32:	88 e1       	ldi	r24, 0x18	; 24
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	80 93 60 00 	sts	0x0060, r24
    1e3c:	10 92 60 00 	sts	0x0060, r1
    1e40:	0f be       	out	0x3f, r0	; 63
  lcd_init();				//initialize LCD
    1e42:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_init>
	
//  ADC_PORT = TXD_VAL;
//  ADC_DDR = TXD_MSK;
  if(tmp) { 
    1e46:	13 ff       	sbrs	r17, 3
    1e48:	0a c0       	rjmp	.+20     	; 0x1e5e <main+0x48>
     // check if  Watchdog-Event 
     // this happens, if the Watchdog is not reset for 2s
     // can happen, if any loop in the Program doen't finish.
     lcd_line1();
    1e4a:	80 e8       	ldi	r24, 0x80	; 128
    1e4c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
     lcd_fix_string(TestTimedOut);	//Output Timeout
    1e50:	83 ed       	ldi	r24, 0xD3	; 211
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
     wait3s();				//wait for 3 s
    1e58:	0e 94 6f 14 	call	0x28de	; 0x28de <wait3s>
    1e5c:	f5 c0       	rjmp	.+490    	; 0x2048 <main+0x232>
     ON_PORT = 0;			//shut off!
     return 0;
  }
  LCDLoadCustomChar(LCD_CHAR_DIODE1);	//Custom-Character Diode symbol
    1e5e:	88 e4       	ldi	r24, 0x48	; 72
    1e60:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
  lcd_fix_customchar(DiodeIcon1);	//load Character  >|
    1e64:	87 e8       	ldi	r24, 0x87	; 135
    1e66:	91 e0       	ldi	r25, 0x01	; 1
    1e68:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_DIODE2);	//Custom-Character 
    1e6c:	80 e5       	ldi	r24, 0x50	; 80
    1e6e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
  lcd_fix_customchar(DiodeIcon2);	//load Character  |<
    1e72:	8f e8       	ldi	r24, 0x8F	; 143
    1e74:	91 e0       	ldi	r25, 0x01	; 1
    1e76:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_CAP);	//Custom-Character  Capacitor symbol
    1e7a:	88 e5       	ldi	r24, 0x58	; 88
    1e7c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
  lcd_fix_customchar(CapIcon);		//load Character  ||
    1e80:	87 e9       	ldi	r24, 0x97	; 151
    1e82:	91 e0       	ldi	r25, 0x01	; 1
    1e84:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS1);	//Custom-Character Resistor symbol
    1e88:	88 e7       	ldi	r24, 0x78	; 120
    1e8a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
  lcd_fix_customchar(ResIcon1);		//load Character  [
    1e8e:	8f e9       	ldi	r24, 0x9F	; 159
    1e90:	91 e0       	ldi	r25, 0x01	; 1
    1e92:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS2);	//Custom-Character 
    1e96:	80 e7       	ldi	r24, 0x70	; 112
    1e98:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
  lcd_fix_customchar(ResIcon2);		//load Character  ]
    1e9c:	87 ea       	ldi	r24, 0xA7	; 167
    1e9e:	91 e0       	ldi	r25, 0x01	; 1
    1ea0:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_fix_customchar>
#endif
#ifdef PULLUP_DISABLE
 #ifdef __AVR_ATmega8__
  SFIOR = (1<<PUD);		// disable Pull-Up Resistors mega8
 #else
  MCUCR = (1<<PUD);		// disable Pull-Up Resistors mega168 family
    1ea4:	80 e1       	ldi	r24, 0x10	; 16
    1ea6:	85 bf       	out	0x35, r24	; 53

//  DIDR0 = 0x3f;			//disable all Input register of ADC

#if POWER_OFF+0 > 1
  // tester display time selection
  display_time = OFF_WAIT_TIME;		// LONG_WAIT_TIME for single mode, else SHORT_WAIT_TIME
    1ea8:	88 e8       	ldi	r24, 0x88	; 136
    1eaa:	93 e1       	ldi	r25, 0x13	; 19
    1eac:	90 93 03 01 	sts	0x0103, r25
    1eb0:	80 93 02 01 	sts	0x0102, r24
  if (!(ON_PIN_REG & (1<<RST_PIN))) {
    1eb4:	4f 99       	sbic	0x09, 7	; 9
    1eb6:	0a c0       	rjmp	.+20     	; 0x1ecc <main+0xb6>
     // if power button is pressed ...
     wait300ms();			// wait to catch a long key press
    1eb8:	0e 94 74 14 	call	0x28e8	; 0x28e8 <wait300ms>
     if (!(ON_PIN_REG & (1<<RST_PIN))) {
    1ebc:	4f 99       	sbic	0x09, 7	; 9
    1ebe:	06 c0       	rjmp	.+12     	; 0x1ecc <main+0xb6>
        // check if power button is still pressed
        display_time = LONG_WAIT_TIME;	// ... set long time display anyway
    1ec0:	80 eb       	ldi	r24, 0xB0	; 176
    1ec2:	96 e3       	ldi	r25, 0x36	; 54
    1ec4:	90 93 03 01 	sts	0x0103, r25
    1ec8:	80 93 02 01 	sts	0x0102, r24
  }
#else
  #define display_time OFF_WAIT_TIME
#endif

  empty_count = 0;
    1ecc:	10 92 45 01 	sts	0x0145, r1
  mess_count = 0;
    1ed0:	10 92 0d 01 	sts	0x010D, r1


//*****************************************************************
//Entry: if start key is pressed before shut down
start:
  PartFound = PART_NONE;
    1ed4:	10 92 09 01 	sts	0x0109, r1
  NumOfDiodes = 0;
    1ed8:	10 92 07 01 	sts	0x0107, r1
  PartReady = 0;
    1edc:	10 92 06 01 	sts	0x0106, r1
  PartMode = 0;
    1ee0:	10 92 08 01 	sts	0x0108, r1
  WithReference = 0;		// no precision reference voltage
    1ee4:	10 92 44 01 	sts	0x0144, r1
  lcd_clear();
    1ee8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_clear>
  ADC_DDR = TXD_MSK;		//activate Software-UART 
    1eec:	18 e0       	ldi	r17, 0x08	; 8
    1eee:	17 b9       	out	0x07, r17	; 7
#ifdef AUTO_CAL
  resis680pl = eeprom_read_word(&R680pl);
    1ef0:	85 eb       	ldi	r24, 0xB5	; 181
    1ef2:	91 e0       	ldi	r25, 0x01	; 1
    1ef4:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <__eerd_word_m168>
    1ef8:	90 93 0b 01 	sts	0x010B, r25
    1efc:	80 93 0a 01 	sts	0x010A, r24
  resis680mi = eeprom_read_word(&R680mi);
    1f00:	87 eb       	ldi	r24, 0xB7	; 183
    1f02:	91 e0       	ldi	r25, 0x01	; 1
    1f04:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <__eerd_word_m168>
    1f08:	90 93 05 01 	sts	0x0105, r25
    1f0c:	80 93 04 01 	sts	0x0104, r24
#endif

  ResistorsFound = 0;
    1f10:	10 92 57 01 	sts	0x0157, r1
  cap.ca = 0;
    1f14:	10 92 68 01 	sts	0x0168, r1
  cap.cb = 0;
    1f18:	10 92 69 01 	sts	0x0169, r1
#ifdef WITH_UART
  uart_newline();		// start of new measurement
    1f1c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <uart_newline>
#endif
  ADCconfig.RefFlag = 0;
    1f20:	10 92 3c 01 	sts	0x013C, r1
  ADCconfig.U_AVCC = U_VCC;	// set initial VCC Voltage
    1f24:	88 e8       	ldi	r24, 0x88	; 136
    1f26:	93 e1       	ldi	r25, 0x13	; 19
    1f28:	90 93 40 01 	sts	0x0140, r25
    1f2c:	80 93 3f 01 	sts	0x013F, r24
  ADCconfig.Samples = 190;		// set number of ADC samples near to max
    1f30:	8e eb       	ldi	r24, 0xBE	; 190
    1f32:	80 93 3b 01 	sts	0x013B, r24
  ADC_PORT = TXD_VAL;
    1f36:	18 b9       	out	0x08, r17	; 8
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND
    1f38:	88 e1       	ldi	r24, 0x18	; 24
    1f3a:	87 b9       	out	0x07, r24	; 7
  wait1ms();
    1f3c:	0e 94 81 14 	call	0x2902	; 0x2902 <wait1ms>
  ADC_DDR =  TXD_MSK; 	// switch pin with reference back to input
    1f40:	17 b9       	out	0x07, r17	; 7
#if FLASHEND > 0x1fff
  trans.uBE[1] = W5msReadADC(TPREF); // read voltage of precision reference
    1f42:	84 e0       	ldi	r24, 0x04	; 4
    1f44:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
    1f48:	ec 01       	movw	r28, r24
    1f4a:	90 93 53 01 	sts	0x0153, r25
    1f4e:	80 93 52 01 	sts	0x0152, r24
  if ((trans.uBE[1] > 2250) && (trans.uBE[1] < 2750)) {
    1f52:	8b 5c       	subi	r24, 0xCB	; 203
    1f54:	98 40       	sbci	r25, 0x08	; 8
    1f56:	21 e0       	ldi	r18, 0x01	; 1
    1f58:	83 3f       	cpi	r24, 0xF3	; 243
    1f5a:	92 07       	cpc	r25, r18
    1f5c:	c0 f4       	brcc	.+48     	; 0x1f8e <main+0x178>
     // precision voltage reference connected, update U_AVCC
     WithReference = 1;
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	80 93 44 01 	sts	0x0144, r24
     ADCconfig.U_AVCC = (unsigned long)((unsigned long)ADCconfig.U_AVCC * 2495) / trans.uBE[1];
    1f64:	60 91 3f 01 	lds	r22, 0x013F
    1f68:	70 91 40 01 	lds	r23, 0x0140
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	2f eb       	ldi	r18, 0xBF	; 191
    1f72:	39 e0       	ldi	r19, 0x09	; 9
    1f74:	40 e0       	ldi	r20, 0x00	; 0
    1f76:	50 e0       	ldi	r21, 0x00	; 0
    1f78:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
    1f7c:	9e 01       	movw	r18, r28
    1f7e:	40 e0       	ldi	r20, 0x00	; 0
    1f80:	50 e0       	ldi	r21, 0x00	; 0
    1f82:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
    1f86:	30 93 40 01 	sts	0x0140, r19
    1f8a:	20 93 3f 01 	sts	0x013F, r18
  }
#endif
  lcd_line1();	//1. row 
    1f8e:	80 e8       	ldi	r24, 0x80	; 128
    1f90:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
  
#ifdef WITH_AUTO_REF
  (void) ReadADC(0x0e);		// read Reference-voltage 
    1f94:	8e e0       	ldi	r24, 0x0E	; 14
    1f96:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
  ref_mv = W20msReadADC(0x0e);	// read Reference-voltage
    1f9a:	8e e0       	ldi	r24, 0x0E	; 14
    1f9c:	0e 94 2e 1a 	call	0x345c	; 0x345c <W20msReadADC>
    1fa0:	ec 01       	movw	r28, r24
    1fa2:	90 93 42 01 	sts	0x0142, r25
    1fa6:	80 93 41 01 	sts	0x0141, r24
#else
  ref_mv = DEFAULT_BAND_GAP;	// set to default Reference Voltage
#endif
  ADCconfig.U_Bandgap = ADC_internal_reference;	// set internal reference voltage for ADC
    1faa:	89 eb       	ldi	r24, 0xB9	; 185
    1fac:	91 e0       	ldi	r25, 0x01	; 1
    1fae:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__eerd_byte_m168>
    1fb2:	99 27       	eor	r25, r25
    1fb4:	87 fd       	sbrc	r24, 7
    1fb6:	90 95       	com	r25
    1fb8:	8c 0f       	add	r24, r28
    1fba:	9d 1f       	adc	r25, r29
    1fbc:	90 93 3e 01 	sts	0x013E, r25
    1fc0:	80 93 3d 01 	sts	0x013D, r24
  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    1fc4:	89 e1       	ldi	r24, 0x19	; 25
    1fc6:	80 93 3b 01 	sts	0x013B, r24

#ifdef BAT_CHECK
  // Battery check is selected
  ReadADC(TPBAT);	//Dummy-Readout
    1fca:	85 e0       	ldi	r24, 0x05	; 5
    1fcc:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
  trans.uBE[0] = W5msReadADC(TPBAT); 	//with 5V reference
    1fd0:	85 e0       	ldi	r24, 0x05	; 5
    1fd2:	0e 94 32 1a 	call	0x3464	; 0x3464 <W5msReadADC>
    1fd6:	90 93 51 01 	sts	0x0151, r25
    1fda:	80 93 50 01 	sts	0x0150, r24
  lcd_fix_string(Bat_str);		//output: "Bat. "
    1fde:	89 ee       	ldi	r24, 0xE9	; 233
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
 #ifdef BAT_OUT
  // display Battery voltage
  // The divisor to get the voltage in 0.01V units is ((10*33)/133) witch is about 2.4812
  // A good result can be get with multiply by 4 and divide by 10 (about 0.75%).
  cap.cval = (trans.uBE[0]*4)/10+((BAT_OUT+5)/10); // usually output only 2 digits
    1fe6:	80 91 50 01 	lds	r24, 0x0150
    1fea:	90 91 51 01 	lds	r25, 0x0151
    1fee:	88 0f       	add	r24, r24
    1ff0:	99 1f       	adc	r25, r25
    1ff2:	88 0f       	add	r24, r24
    1ff4:	99 1f       	adc	r25, r25
    1ff6:	6a e0       	ldi	r22, 0x0A	; 10
    1ff8:	70 e0       	ldi	r23, 0x00	; 0
    1ffa:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <__udivmodhi4>
    1ffe:	61 5f       	subi	r22, 0xF1	; 241
    2000:	7f 4f       	sbci	r23, 0xFF	; 255
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	60 93 5a 01 	sts	0x015A, r22
    200a:	70 93 5b 01 	sts	0x015B, r23
    200e:	80 93 5c 01 	sts	0x015C, r24
    2012:	90 93 5d 01 	sts	0x015D, r25
  DisplayValue(cap.cval,-2,'V',2);		// Display 2 Digits of this 10mV units
    2016:	4e ef       	ldi	r20, 0xFE	; 254
    2018:	26 e5       	ldi	r18, 0x56	; 86
    201a:	02 e0       	ldi	r16, 0x02	; 2
    201c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DisplayValue>
  lcd_space();
    2020:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_space>
 #warning "Battery POOR level is set for 7805 regulator"
 #define WARN_LEVEL (((unsigned long)7300*(unsigned long)33)/133)
 #define POOR_LEVEL (((unsigned long)6300*(unsigned long)33)/133)
 #endif
  // check the battery voltage
  if (trans.uBE[0] <  WARN_LEVEL) {
    2024:	80 91 50 01 	lds	r24, 0x0150
    2028:	90 91 51 01 	lds	r25, 0x0151
    202c:	27 e0       	ldi	r18, 0x07	; 7
    202e:	8c 32       	cpi	r24, 0x2C	; 44
    2030:	92 07       	cpc	r25, r18
    2032:	a8 f4       	brcc	.+42     	; 0x205e <main+0x248>
     //Vcc < 7,3V; show Warning 
     if(trans.uBE[0] < POOR_LEVEL) {	
    2034:	26 e0       	ldi	r18, 0x06	; 6
    2036:	83 33       	cpi	r24, 0x33	; 51
    2038:	92 07       	cpc	r25, r18
    203a:	70 f4       	brcc	.+28     	; 0x2058 <main+0x242>
        //Vcc <6,3V; no proper operation is possible
        lcd_fix_string(BatEmpty);	//Battery empty!
    203c:	8c e7       	ldi	r24, 0x7C	; 124
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
        wait2s();
    2044:	0e 94 70 14 	call	0x28e0	; 0x28e0 <wait2s>
        PORTD = 0;			//switch power off
    2048:	1b b8       	out	0x0b, r1	; 11
  }
#else
  goto start;	// POWER_OFF not selected, repeat measurement
#endif
  return 0;
}   // end main
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	df 91       	pop	r29
    2050:	cf 91       	pop	r28
    2052:	1f 91       	pop	r17
    2054:	0f 91       	pop	r16
    2056:	08 95       	ret
        lcd_fix_string(BatEmpty);	//Battery empty!
        wait2s();
        PORTD = 0;			//switch power off
        return 0;
     }
     lcd_fix_string(BatWeak);		//Battery weak
    2058:	87 e7       	ldi	r24, 0x77	; 119
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	02 c0       	rjmp	.+4      	; 0x2062 <main+0x24c>
  } else { // Battery-voltage OK
     lcd_fix_string(OK_str); 		// "OK"
    205e:	8f ee       	ldi	r24, 0xEF	; 239
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
  }
#else
  lcd_fix_string(VERSION_str);		// if no Battery check, Version .. in row 1
#endif
#ifdef WDT_enabled
  wdt_enable(WDTO_2S);		//Watchdog on
    2066:	2f e0       	ldi	r18, 0x0F	; 15
    2068:	88 e1       	ldi	r24, 0x18	; 24
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	f8 94       	cli
    2070:	a8 95       	wdr
    2072:	80 93 60 00 	sts	0x0060, r24
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	20 93 60 00 	sts	0x0060, r18
#endif

//  wait1s();			// add more time for reading batterie voltage
  // begin tests
#ifdef AUTO_RH
  RefVoltage();			//compute RHmultip = f(reference voltage)
    207c:	0e 94 19 09 	call	0x1232	; 0x1232 <RefVoltage>
#endif
#if FLASHEND > 0x1fff
  if (WithReference) {
    2080:	80 91 44 01 	lds	r24, 0x0144
    2084:	88 23       	and	r24, r24
    2086:	a1 f0       	breq	.+40     	; 0x20b0 <main+0x29a>
     lcd_line2();
    2088:	80 ec       	ldi	r24, 0xC0	; 192
    208a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
     lcd_fix_string(VCC_str);		// VCC=
    208e:	81 e3       	ldi	r24, 0x31	; 49
    2090:	91 e0       	ldi	r25, 0x01	; 1
    2092:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
     DisplayValue(ADCconfig.U_AVCC,-3,'V',3);	// Display 3 Digits of this mV units
    2096:	60 91 3f 01 	lds	r22, 0x013F
    209a:	70 91 40 01 	lds	r23, 0x0140
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	4d ef       	ldi	r20, 0xFD	; 253
    20a4:	26 e5       	ldi	r18, 0x56	; 86
    20a6:	03 e0       	ldi	r16, 0x03	; 3
    20a8:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DisplayValue>
     wait1s();
    20ac:	0e 94 71 14 	call	0x28e2	; 0x28e2 <wait1000ms>
  }
#endif

  lcd_line2();			//LCD position row2, column 1
    20b0:	80 ec       	ldi	r24, 0xC0	; 192
    20b2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
  lcd_fix_string(TestRunning);		//String: testing...
    20b6:	8c e6       	ldi	r24, 0x6C	; 108
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
#ifndef DebugOut
  lcd_line2();			//LCD position row 2, column 1
    20be:	80 ec       	ldi	r24, 0xC0	; 192
    20c0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
#endif
  EntladePins();		// discharge all capacitors!
    20c4:	0e 94 7e 08 	call	0x10fc	; 0x10fc <EntladePins>
  if(PartFound == PART_CELL) {
    20c8:	80 91 09 01 	lds	r24, 0x0109
    20cc:	88 30       	cpi	r24, 0x08	; 8
    20ce:	39 f4       	brne	.+14     	; 0x20de <main+0x2c8>
    lcd_clear();
    20d0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_clear>
    lcd_fix_string(Cell_str);	// display "Cell!"
    20d4:	8b e2       	ldi	r24, 0x2B	; 43
    20d6:	91 e0       	ldi	r25, 0x01	; 1
    20d8:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
    goto end2;
    20dc:	a7 c3       	rjmp	.+1870   	; 0x282c <main+0xa16>
  }

#ifdef CHECK_CALL
  AutoCheck();			//check, if selftest should be done
    20de:	0e 94 6d 0a 	call	0x14da	; 0x14da <AutoCheck>
#endif
     
  // check all 6 combinations for the 3 pins 
//         High  Low  Tri
  CheckPins(TP1, TP2, TP3);
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	61 e0       	ldi	r22, 0x01	; 1
    20e6:	42 e0       	ldi	r20, 0x02	; 2
    20e8:	0e 94 c6 01 	call	0x38c	; 0x38c <CheckPins>
  CheckPins(TP2, TP1, TP3);
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	60 e0       	ldi	r22, 0x00	; 0
    20f0:	42 e0       	ldi	r20, 0x02	; 2
    20f2:	0e 94 c6 01 	call	0x38c	; 0x38c <CheckPins>

  CheckPins(TP1, TP3, TP2);
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	62 e0       	ldi	r22, 0x02	; 2
    20fa:	41 e0       	ldi	r20, 0x01	; 1
    20fc:	0e 94 c6 01 	call	0x38c	; 0x38c <CheckPins>
  CheckPins(TP3, TP1, TP2);
    2100:	82 e0       	ldi	r24, 0x02	; 2
    2102:	60 e0       	ldi	r22, 0x00	; 0
    2104:	41 e0       	ldi	r20, 0x01	; 1
    2106:	0e 94 c6 01 	call	0x38c	; 0x38c <CheckPins>

  CheckPins(TP2, TP3, TP1);
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	62 e0       	ldi	r22, 0x02	; 2
    210e:	40 e0       	ldi	r20, 0x00	; 0
    2110:	0e 94 c6 01 	call	0x38c	; 0x38c <CheckPins>
  CheckPins(TP3, TP2, TP1);
    2114:	82 e0       	ldi	r24, 0x02	; 2
    2116:	61 e0       	ldi	r22, 0x01	; 1
    2118:	40 e0       	ldi	r20, 0x00	; 0
    211a:	0e 94 c6 01 	call	0x38c	; 0x38c <CheckPins>
  
  //separate check if is is a capacitor
  if(((PartFound == PART_NONE) || (PartFound == PART_RESISTOR) || (PartFound == PART_DIODE)) ) {
    211e:	80 91 09 01 	lds	r24, 0x0109
    2122:	88 23       	and	r24, r24
    2124:	21 f0       	breq	.+8      	; 0x212e <main+0x318>
    2126:	86 30       	cpi	r24, 0x06	; 6
    2128:	11 f0       	breq	.+4      	; 0x212e <main+0x318>
    212a:	81 30       	cpi	r24, 0x01	; 1
    212c:	d9 f4       	brne	.+54     	; 0x2164 <main+0x34e>
     EntladePins();		// discharge capacities
    212e:	0e 94 7e 08 	call	0x10fc	; 0x10fc <EntladePins>
     //measurement of capacities in all 3 combinations
     cap.cval_max = 0;		// set max to zero
    2132:	10 92 5e 01 	sts	0x015E, r1
    2136:	10 92 5f 01 	sts	0x015F, r1
    213a:	10 92 60 01 	sts	0x0160, r1
    213e:	10 92 61 01 	sts	0x0161, r1
     cap.cpre_max = -12;	// set max to pF unit
    2142:	84 ef       	ldi	r24, 0xF4	; 244
    2144:	80 93 6b 01 	sts	0x016B, r24
     ReadCapacity(TP3, TP1);
    2148:	82 e0       	ldi	r24, 0x02	; 2
    214a:	60 e0       	ldi	r22, 0x00	; 0
    214c:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <ReadCapacity>
     ReadCapacity(TP3, TP2);
    2150:	82 e0       	ldi	r24, 0x02	; 2
    2152:	61 e0       	ldi	r22, 0x01	; 1
    2154:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <ReadCapacity>
     ReadCapacity(TP2, TP1);
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	60 e0       	ldi	r22, 0x00	; 0
    215c:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <ReadCapacity>

#if FLASHEND > 0x1fff
     ReadInductance();			// measure inductance
    2160:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <ReadInductance>
#endif
  }
  //All checks are done, output result to display
  lcd_clear();
    2164:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_clear>
  if(PartFound == PART_DIODE) {
    2168:	80 91 09 01 	lds	r24, 0x0109
    216c:	81 30       	cpi	r24, 0x01	; 1
    216e:	09 f0       	breq	.+2      	; 0x2172 <main+0x35c>
    2170:	ff c0       	rjmp	.+510    	; 0x2370 <main+0x55a>
     if(NumOfDiodes == 1) {		//single Diode
    2172:	90 91 07 01 	lds	r25, 0x0107
    2176:	91 30       	cpi	r25, 0x01	; 1
    2178:	49 f5       	brne	.+82     	; 0x21cc <main+0x3b6>
        lcd_fix_string(Diode);		//"Diode: "
    217a:	81 e9       	ldi	r24, 0x91	; 145
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
        lcd_testpin(diodes[0].Anode);
    2182:	80 91 6e 01 	lds	r24, 0x016E
    2186:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_testpin>
        lcd_fix_string(AnKat);		//"->|-"
    218a:	8f e3       	ldi	r24, 0x3F	; 63
    218c:	91 e0       	ldi	r25, 0x01	; 1
    218e:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
        lcd_testpin(diodes[0].Cathode);
    2192:	80 91 6f 01 	lds	r24, 0x016F
    2196:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_testpin>
        UfAusgabe(0x70);
    219a:	80 e7       	ldi	r24, 0x70	; 112
    219c:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <UfAusgabe>
        lcd_fix_string(GateCap_str);	//"C="
    21a0:	8c ef       	ldi	r24, 0xFC	; 252
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
        ReadCapacity(diodes[0].Cathode,diodes[0].Anode);	// Capacity opposite flow direction
    21a8:	80 91 6f 01 	lds	r24, 0x016F
    21ac:	60 91 6e 01 	lds	r22, 0x016E
    21b0:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <ReadCapacity>
        DisplayValue(cap.cval,cap.cpre,'F',3);
    21b4:	60 91 5a 01 	lds	r22, 0x015A
    21b8:	70 91 5b 01 	lds	r23, 0x015B
    21bc:	80 91 5c 01 	lds	r24, 0x015C
    21c0:	90 91 5d 01 	lds	r25, 0x015D
    21c4:	40 91 6a 01 	lds	r20, 0x016A
    21c8:	26 e4       	ldi	r18, 0x46	; 70
    21ca:	b1 c2       	rjmp	.+1378   	; 0x272e <main+0x918>
        goto end;
     } else if(NumOfDiodes == 2) { // double diode
    21cc:	92 30       	cpi	r25, 0x02	; 2
    21ce:	09 f0       	breq	.+2      	; 0x21d2 <main+0x3bc>
    21d0:	4c c0       	rjmp	.+152    	; 0x226a <main+0x454>
        lcd_data('2');
    21d2:	82 e3       	ldi	r24, 0x32	; 50
    21d4:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
        lcd_fix_string(Dioden);		//"diodes "
    21d8:	87 e4       	ldi	r24, 0x47	; 71
    21da:	91 e0       	ldi	r25, 0x01	; 1
    21dc:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
        if(diodes[0].Anode == diodes[1].Anode) { //Common Anode
    21e0:	90 91 6e 01 	lds	r25, 0x016E
    21e4:	20 91 72 01 	lds	r18, 0x0172
    21e8:	92 17       	cp	r25, r18
    21ea:	59 f4       	brne	.+22     	; 0x2202 <main+0x3ec>
           lcd_testpin(diodes[0].Cathode);
    21ec:	80 91 6f 01 	lds	r24, 0x016F
    21f0:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    21f4:	83 e4       	ldi	r24, 0x43	; 67
    21f6:	91 e0       	ldi	r25, 0x01	; 1
    21f8:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    21fc:	80 91 6e 01 	lds	r24, 0x016E
    2200:	2b c0       	rjmp	.+86     	; 0x2258 <main+0x442>
           lcd_fix_string(AnKat);	//"->|-"
           lcd_testpin(diodes[1].Cathode);
           UfAusgabe(0x01);
           goto end;
        } else if(diodes[0].Cathode == diodes[1].Cathode) { //Common Cathode
    2202:	30 91 6f 01 	lds	r19, 0x016F
    2206:	80 91 73 01 	lds	r24, 0x0173
    220a:	38 17       	cp	r19, r24
    220c:	b9 f4       	brne	.+46     	; 0x223c <main+0x426>
           lcd_testpin(diodes[0].Anode);
    220e:	89 2f       	mov	r24, r25
    2210:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2214:	8f e3       	ldi	r24, 0x3F	; 63
    2216:	91 e0       	ldi	r25, 0x01	; 1
    2218:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
	   lcd_testpin(diodes[0].Cathode);
    221c:	80 91 6f 01 	lds	r24, 0x016F
    2220:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    2224:	83 e4       	ldi	r24, 0x43	; 67
    2226:	91 e0       	ldi	r25, 0x01	; 1
    2228:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
           lcd_testpin(diodes[1].Anode);
    222c:	80 91 72 01 	lds	r24, 0x0172
    2230:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_testpin>
           UfAusgabe(0x01);
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <UfAusgabe>
           goto end;
    223a:	f1 c2       	rjmp	.+1506   	; 0x281e <main+0xa08>
          }
        else if ((diodes[0].Cathode == diodes[1].Anode) && (diodes[1].Cathode == diodes[0].Anode)) {
    223c:	32 17       	cp	r19, r18
    223e:	09 f0       	breq	.+2      	; 0x2242 <main+0x42c>
    2240:	bc c2       	rjmp	.+1400   	; 0x27ba <main+0x9a4>
    2242:	89 17       	cp	r24, r25
    2244:	09 f0       	breq	.+2      	; 0x2248 <main+0x432>
    2246:	b9 c2       	rjmp	.+1394   	; 0x27ba <main+0x9a4>
           //Antiparallel
           lcd_testpin(diodes[0].Anode);
    2248:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    224c:	8f e3       	ldi	r24, 0x3F	; 63
    224e:	91 e0       	ldi	r25, 0x01	; 1
    2250:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
           lcd_testpin(diodes[0].Cathode);
    2254:	80 91 6f 01 	lds	r24, 0x016F
    2258:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    225c:	8f e3       	ldi	r24, 0x3F	; 63
    225e:	91 e0       	ldi	r25, 0x01	; 1
    2260:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
           lcd_testpin(diodes[1].Cathode);
    2264:	80 91 73 01 	lds	r24, 0x0173
    2268:	e3 cf       	rjmp	.-58     	; 0x2230 <main+0x41a>
           UfAusgabe(0x01);
           goto end;
        }
     } else if(NumOfDiodes == 3) {
    226a:	93 30       	cpi	r25, 0x03	; 3
    226c:	09 f0       	breq	.+2      	; 0x2270 <main+0x45a>
    226e:	a5 c2       	rjmp	.+1354   	; 0x27ba <main+0x9a4>
        //Serial of 2 Diodes; was detected as 3 Diodes 
        trans.b = 3;
    2270:	90 93 54 01 	sts	0x0154, r25
        trans.c = 3;
    2274:	90 93 55 01 	sts	0x0155, r25
        /* Check for any constallation of 2 serial diodes:
          Only once the pin No of anyone Cathode is identical of another anode.
          two diodes in series is additionally detected as third big diode.
        */
        if(diodes[0].Cathode == diodes[1].Anode)
    2278:	50 91 6f 01 	lds	r21, 0x016F
    227c:	90 91 72 01 	lds	r25, 0x0172
    2280:	59 17       	cp	r21, r25
    2282:	21 f4       	brne	.+8      	; 0x228c <main+0x476>
          {
           trans.b = 0;
    2284:	10 92 54 01 	sts	0x0154, r1
           trans.c = 1;
    2288:	80 93 55 01 	sts	0x0155, r24
          }
        if(diodes[0].Anode == diodes[1].Cathode)
    228c:	40 91 6e 01 	lds	r20, 0x016E
    2290:	30 91 73 01 	lds	r19, 0x0173
    2294:	43 17       	cp	r20, r19
    2296:	29 f4       	brne	.+10     	; 0x22a2 <main+0x48c>
          {
           trans.b = 1;
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	80 93 54 01 	sts	0x0154, r24
           trans.c = 0;
    229e:	10 92 55 01 	sts	0x0155, r1
          }
        if(diodes[0].Cathode == diodes[2].Anode)
    22a2:	20 91 76 01 	lds	r18, 0x0176
    22a6:	52 17       	cp	r21, r18
    22a8:	29 f4       	brne	.+10     	; 0x22b4 <main+0x49e>
          {
           trans.b = 0;
    22aa:	10 92 54 01 	sts	0x0154, r1
           trans.c = 2;
    22ae:	82 e0       	ldi	r24, 0x02	; 2
    22b0:	80 93 55 01 	sts	0x0155, r24
          }
        if(diodes[0].Anode == diodes[2].Cathode)
    22b4:	80 91 77 01 	lds	r24, 0x0177
    22b8:	48 17       	cp	r20, r24
    22ba:	29 f4       	brne	.+10     	; 0x22c6 <main+0x4b0>
          {
           trans.b = 2;
    22bc:	42 e0       	ldi	r20, 0x02	; 2
    22be:	40 93 54 01 	sts	0x0154, r20
           trans.c = 0;
    22c2:	10 92 55 01 	sts	0x0155, r1
          }
        if(diodes[1].Cathode == diodes[2].Anode)
    22c6:	32 17       	cp	r19, r18
    22c8:	31 f4       	brne	.+12     	; 0x22d6 <main+0x4c0>
          {
           trans.b = 1;
    22ca:	21 e0       	ldi	r18, 0x01	; 1
    22cc:	20 93 54 01 	sts	0x0154, r18
           trans.c = 2;
    22d0:	22 e0       	ldi	r18, 0x02	; 2
    22d2:	20 93 55 01 	sts	0x0155, r18
          }
        if(diodes[1].Anode == diodes[2].Cathode)
    22d6:	98 17       	cp	r25, r24
    22d8:	31 f4       	brne	.+12     	; 0x22e6 <main+0x4d0>
          {
           trans.b = 2;
    22da:	82 e0       	ldi	r24, 0x02	; 2
    22dc:	80 93 54 01 	sts	0x0154, r24
           trans.c = 1;
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	80 93 55 01 	sts	0x0155, r24
        lcd_testpin(diodes[2].Cathode);
        lcd_space();
        lcd_string(utoa(diodes[2].Voltage, outval, 10));
        lcd_line1();
#endif
        if((trans.b<3) && (trans.c<3)) {
    22e6:	80 91 54 01 	lds	r24, 0x0154
    22ea:	83 30       	cpi	r24, 0x03	; 3
    22ec:	08 f0       	brcs	.+2      	; 0x22f0 <main+0x4da>
    22ee:	65 c2       	rjmp	.+1226   	; 0x27ba <main+0x9a4>
    22f0:	80 91 55 01 	lds	r24, 0x0155
    22f4:	83 30       	cpi	r24, 0x03	; 3
    22f6:	08 f0       	brcs	.+2      	; 0x22fa <main+0x4e4>
    22f8:	60 c2       	rjmp	.+1216   	; 0x27ba <main+0x9a4>
           lcd_data('3');
    22fa:	83 e3       	ldi	r24, 0x33	; 51
    22fc:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
           lcd_fix_string(Dioden);	//"Diodes "
    2300:	87 e4       	ldi	r24, 0x47	; 71
    2302:	91 e0       	ldi	r25, 0x01	; 1
    2304:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Anode);
    2308:	e0 91 54 01 	lds	r30, 0x0154
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	ee 0f       	add	r30, r30
    2310:	ff 1f       	adc	r31, r31
    2312:	ee 0f       	add	r30, r30
    2314:	ff 1f       	adc	r31, r31
    2316:	e2 59       	subi	r30, 0x92	; 146
    2318:	fe 4f       	sbci	r31, 0xFE	; 254
    231a:	80 81       	ld	r24, Z
    231c:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2320:	8f e3       	ldi	r24, 0x3F	; 63
    2322:	91 e0       	ldi	r25, 0x01	; 1
    2324:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Cathode);
    2328:	e0 91 54 01 	lds	r30, 0x0154
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	ee 0f       	add	r30, r30
    2330:	ff 1f       	adc	r31, r31
    2332:	ee 0f       	add	r30, r30
    2334:	ff 1f       	adc	r31, r31
    2336:	e2 59       	subi	r30, 0x92	; 146
    2338:	fe 4f       	sbci	r31, 0xFE	; 254
    233a:	81 81       	ldd	r24, Z+1	; 0x01
    233c:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2340:	8f e3       	ldi	r24, 0x3F	; 63
    2342:	91 e0       	ldi	r25, 0x01	; 1
    2344:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
           lcd_testpin(diodes[trans.c].Cathode);
    2348:	e0 91 55 01 	lds	r30, 0x0155
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	ee 0f       	add	r30, r30
    2350:	ff 1f       	adc	r31, r31
    2352:	ee 0f       	add	r30, r30
    2354:	ff 1f       	adc	r31, r31
    2356:	e2 59       	subi	r30, 0x92	; 146
    2358:	fe 4f       	sbci	r31, 0xFE	; 254
    235a:	81 81       	ldd	r24, Z+1	; 0x01
    235c:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_testpin>
           UfAusgabe( (trans.b<<4)|trans.c);
    2360:	80 91 54 01 	lds	r24, 0x0154
    2364:	82 95       	swap	r24
    2366:	80 7f       	andi	r24, 0xF0	; 240
    2368:	90 91 55 01 	lds	r25, 0x0155
    236c:	89 2b       	or	r24, r25
    236e:	63 cf       	rjmp	.-314    	; 0x2236 <main+0x420>
           goto end;
        }
     }
     // end (PartFound == PART_DIODE)
  } else if (PartFound == PART_TRANSISTOR) {
    2370:	82 30       	cpi	r24, 0x02	; 2
    2372:	09 f0       	breq	.+2      	; 0x2376 <main+0x560>
    2374:	7f c0       	rjmp	.+254    	; 0x2474 <main+0x65e>
    if(PartReady != 0) {
    2376:	80 91 06 01 	lds	r24, 0x0106
    237a:	88 23       	and	r24, r24
    237c:	71 f1       	breq	.+92     	; 0x23da <main+0x5c4>
       if((trans.hfe[0]>trans.hfe[1])) {
    237e:	80 91 4c 01 	lds	r24, 0x014C
    2382:	90 91 4d 01 	lds	r25, 0x014D
    2386:	a0 91 4e 01 	lds	r26, 0x014E
    238a:	b0 91 4f 01 	lds	r27, 0x014F
    238e:	20 91 48 01 	lds	r18, 0x0148
    2392:	30 91 49 01 	lds	r19, 0x0149
    2396:	40 91 4a 01 	lds	r20, 0x014A
    239a:	50 91 4b 01 	lds	r21, 0x014B
    239e:	82 17       	cp	r24, r18
    23a0:	93 07       	cpc	r25, r19
    23a2:	a4 07       	cpc	r26, r20
    23a4:	b5 07       	cpc	r27, r21
    23a6:	48 f4       	brcc	.+18     	; 0x23ba <main+0x5a4>
          //if the amplification factor was higher at first testr: swap C and E !
          tmp = trans.c;
    23a8:	80 91 55 01 	lds	r24, 0x0155
          trans.c = trans.e;
    23ac:	90 91 56 01 	lds	r25, 0x0156
    23b0:	90 93 55 01 	sts	0x0155, r25
          trans.e = tmp;
    23b4:	80 93 56 01 	sts	0x0156, r24
    23b8:	10 c0       	rjmp	.+32     	; 0x23da <main+0x5c4>
       } else {
          trans.hfe[0] = trans.hfe[1];
    23ba:	80 93 48 01 	sts	0x0148, r24
    23be:	90 93 49 01 	sts	0x0149, r25
    23c2:	a0 93 4a 01 	sts	0x014A, r26
    23c6:	b0 93 4b 01 	sts	0x014B, r27
          trans.uBE[0] = trans.uBE[1];
    23ca:	80 91 52 01 	lds	r24, 0x0152
    23ce:	90 91 53 01 	lds	r25, 0x0153
    23d2:	90 93 51 01 	sts	0x0151, r25
    23d6:	80 93 50 01 	sts	0x0150, r24
       }
    }

    if(PartMode == PART_MODE_NPN) {
    23da:	80 91 08 01 	lds	r24, 0x0108
    23de:	81 30       	cpi	r24, 0x01	; 1
    23e0:	19 f4       	brne	.+6      	; 0x23e8 <main+0x5d2>
       lcd_fix_string(NPN_str);		//"NPN "
    23e2:	82 e0       	ldi	r24, 0x02	; 2
    23e4:	91 e0       	ldi	r25, 0x01	; 1
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <main+0x5d6>
    } else {
       lcd_fix_string(PNP_str);		//"PNP "
    23e8:	87 e0       	ldi	r24, 0x07	; 7
    23ea:	91 e0       	ldi	r25, 0x01	; 1
    23ec:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
    }
    if(NumOfDiodes > 2) {	//Transistor with protection diode
    23f0:	80 91 07 01 	lds	r24, 0x0107
    23f4:	83 30       	cpi	r24, 0x03	; 3
    23f6:	58 f0       	brcs	.+22     	; 0x240e <main+0x5f8>
       if(PartMode == PART_MODE_NPN) {
    23f8:	80 91 08 01 	lds	r24, 0x0108
    23fc:	81 30       	cpi	r24, 0x01	; 1
    23fe:	19 f4       	brne	.+6      	; 0x2406 <main+0x5f0>
          lcd_fix_string(AnKat);	//"->|-"
    2400:	8f e3       	ldi	r24, 0x3F	; 63
    2402:	91 e0       	ldi	r25, 0x01	; 1
    2404:	02 c0       	rjmp	.+4      	; 0x240a <main+0x5f4>
       } else {
          lcd_fix_string(KatAn);	//"-|<-"
    2406:	83 e4       	ldi	r24, 0x43	; 67
    2408:	91 e0       	ldi	r25, 0x01	; 1
    240a:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
       }
    }
    lcd_fix_string(EBC_str);		//" EBC="
    240e:	8c e0       	ldi	r24, 0x0C	; 12
    2410:	91 e0       	ldi	r25, 0x01	; 1
    2412:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
    lcd_testpin(trans.e);
    2416:	80 91 56 01 	lds	r24, 0x0156
    241a:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_testpin>
    lcd_testpin(trans.b);
    241e:	80 91 54 01 	lds	r24, 0x0154
    2422:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_testpin>
    lcd_testpin(trans.c);
    2426:	80 91 55 01 	lds	r24, 0x0155
    242a:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_testpin>
    lcd_line2(); //2. row 
    242e:	80 ec       	ldi	r24, 0xC0	; 192
    2430:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
    lcd_fix_string(hfe_str);		//"B="  (hFE)
    2434:	8f ef       	ldi	r24, 0xFF	; 255
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
    DisplayValue(trans.hfe[0],0,0,3);
    243c:	60 91 48 01 	lds	r22, 0x0148
    2440:	70 91 49 01 	lds	r23, 0x0149
    2444:	80 91 4a 01 	lds	r24, 0x014A
    2448:	90 91 4b 01 	lds	r25, 0x014B
    244c:	40 e0       	ldi	r20, 0x00	; 0
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	03 e0       	ldi	r16, 0x03	; 3
    2452:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DisplayValue>
    lcd_space();
    2456:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_space>

    lcd_fix_string(Uf_str);		//"Uf="
    245a:	88 e1       	ldi	r24, 0x18	; 24
    245c:	91 e0       	ldi	r25, 0x01	; 1
    245e:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
    DisplayValue(trans.uBE[0],-3,'V',3);
    2462:	60 91 50 01 	lds	r22, 0x0150
    2466:	70 91 51 01 	lds	r23, 0x0151
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	4d ef       	ldi	r20, 0xFD	; 253
    2470:	26 e5       	ldi	r18, 0x56	; 86
    2472:	5e c1       	rjmp	.+700    	; 0x2730 <main+0x91a>
    goto end;
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    2474:	83 30       	cpi	r24, 0x03	; 3
    2476:	09 f0       	breq	.+2      	; 0x247a <main+0x664>
    2478:	82 c0       	rjmp	.+260    	; 0x257e <main+0x768>
    if(PartMode&1) {
    247a:	80 91 08 01 	lds	r24, 0x0108
    247e:	80 ff       	sbrs	r24, 0
    2480:	02 c0       	rjmp	.+4      	; 0x2486 <main+0x670>
       //N-Kanal
       lcd_data('P');			//P-channel
    2482:	80 e5       	ldi	r24, 0x50	; 80
    2484:	01 c0       	rjmp	.+2      	; 0x2488 <main+0x672>
    } else {
       lcd_data('N');			//N-channel
    2486:	8e e4       	ldi	r24, 0x4E	; 78
    2488:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
    }
    lcd_data('-');
    248c:	8d e2       	ldi	r24, 0x2D	; 45
    248e:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>

    tmp = PartMode/2;
    2492:	80 91 08 01 	lds	r24, 0x0108
    2496:	86 95       	lsr	r24
    if (tmp == (PART_MODE_N_D_MOS/2)) {
    2498:	82 30       	cpi	r24, 0x02	; 2
    249a:	11 f4       	brne	.+4      	; 0x24a0 <main+0x68a>
       lcd_data('D');			// N-D
    249c:	84 e4       	ldi	r24, 0x44	; 68
    249e:	03 c0       	rjmp	.+6      	; 0x24a6 <main+0x690>
    }
    if (tmp == (PART_MODE_N_E_MOS/2)) {
    24a0:	81 30       	cpi	r24, 0x01	; 1
    24a2:	21 f4       	brne	.+8      	; 0x24ac <main+0x696>
       lcd_data('E');			// N-E
    24a4:	85 e4       	ldi	r24, 0x45	; 69
    24a6:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
    24aa:	05 c0       	rjmp	.+10     	; 0x24b6 <main+0x6a0>
    }
    if (tmp == (PART_MODE_N_JFET/2)) {
    24ac:	83 30       	cpi	r24, 0x03	; 3
    24ae:	19 f4       	brne	.+6      	; 0x24b6 <main+0x6a0>
       lcd_fix_string(jfet_str);	//"JFET"
    24b0:	87 ef       	ldi	r24, 0xF7	; 247
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	02 c0       	rjmp	.+4      	; 0x24ba <main+0x6a4>
    } else {
       lcd_fix_string(mosfet_str);	//"-MOS "
    24b6:	82 ef       	ldi	r24, 0xF2	; 242
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
    }
    lcd_fix_string(GDS_str);		//"GDS="
    24be:	82 e1       	ldi	r24, 0x12	; 18
    24c0:	91 e0       	ldi	r25, 0x01	; 1
    24c2:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
    lcd_testpin(trans.b);
    24c6:	80 91 54 01 	lds	r24, 0x0154
    24ca:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_testpin>
    lcd_testpin(trans.c);
    24ce:	80 91 55 01 	lds	r24, 0x0155
    24d2:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_testpin>
    lcd_testpin(trans.e);
    24d6:	80 91 56 01 	lds	r24, 0x0156
    24da:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_testpin>
    if((NumOfDiodes > 0) && (PartMode < PART_MODE_N_D_MOS)) {
    24de:	80 91 07 01 	lds	r24, 0x0107
    24e2:	88 23       	and	r24, r24
    24e4:	59 f0       	breq	.+22     	; 0x24fc <main+0x6e6>
    24e6:	80 91 08 01 	lds	r24, 0x0108
    24ea:	84 30       	cpi	r24, 0x04	; 4
    24ec:	38 f4       	brcc	.+14     	; 0x24fc <main+0x6e6>
       //MOSFET with protection diode; only with enhancement-FETs
       if (PartMode&1) {
    24ee:	80 ff       	sbrs	r24, 0
    24f0:	02 c0       	rjmp	.+4      	; 0x24f6 <main+0x6e0>
          lcd_data(LCD_CHAR_DIODE1);	//show Diode symbol >|
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	01 c0       	rjmp	.+2      	; 0x24f8 <main+0x6e2>
       } else {
          lcd_data(LCD_CHAR_DIODE2);	//show Diode symbol |<
    24f6:	82 e0       	ldi	r24, 0x02	; 2
    24f8:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
       }
    }
    lcd_line2();			//2. Row
    24fc:	80 ec       	ldi	r24, 0xC0	; 192
    24fe:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
    if(PartMode < PART_MODE_N_D_MOS) {	//enhancement-MOSFET
    2502:	80 91 08 01 	lds	r24, 0x0108
    2506:	84 30       	cpi	r24, 0x04	; 4
    2508:	d8 f4       	brcc	.+54     	; 0x2540 <main+0x72a>
	//Gate capacity
       lcd_fix_string(GateCap_str);		//"C="
    250a:	8c ef       	ldi	r24, 0xFC	; 252
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
       ReadCapacity(trans.b,trans.e);	//measure capacity
    2512:	80 91 54 01 	lds	r24, 0x0154
    2516:	60 91 56 01 	lds	r22, 0x0156
    251a:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <ReadCapacity>
       DisplayValue(cap.cval,cap.cpre,'F',3);
    251e:	60 91 5a 01 	lds	r22, 0x015A
    2522:	70 91 5b 01 	lds	r23, 0x015B
    2526:	80 91 5c 01 	lds	r24, 0x015C
    252a:	90 91 5d 01 	lds	r25, 0x015D
    252e:	40 91 6a 01 	lds	r20, 0x016A
    2532:	26 e4       	ldi	r18, 0x46	; 70
    2534:	03 e0       	ldi	r16, 0x03	; 3
    2536:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DisplayValue>
       lcd_fix_string(vt_str);		// "Vt="
    253a:	8c e1       	ldi	r24, 0x1C	; 28
    253c:	91 e0       	ldi	r25, 0x01	; 1
    253e:	13 c0       	rjmp	.+38     	; 0x2566 <main+0x750>
    } else {
       lcd_data('I');
    2540:	89 e4       	ldi	r24, 0x49	; 73
    2542:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
       lcd_data('=');
    2546:	8d e3       	ldi	r24, 0x3D	; 61
    2548:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
       DisplayValue(trans.uBE[1],-5,'A',2);
    254c:	60 91 52 01 	lds	r22, 0x0152
    2550:	70 91 53 01 	lds	r23, 0x0153
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	4b ef       	ldi	r20, 0xFB	; 251
    255a:	21 e4       	ldi	r18, 0x41	; 65
    255c:	02 e0       	ldi	r16, 0x02	; 2
    255e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DisplayValue>
       lcd_fix_string(Vgs_str);		// " Vgs="
    2562:	81 e2       	ldi	r24, 0x21	; 33
    2564:	91 e0       	ldi	r25, 0x01	; 1
    2566:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
    }
    //Gate-threshold voltage
    DisplayValue(gthvoltage,-3,'V',2);
    256a:	60 91 58 01 	lds	r22, 0x0158
    256e:	70 91 59 01 	lds	r23, 0x0159
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	4d ef       	ldi	r20, 0xFD	; 253
    2578:	26 e5       	ldi	r18, 0x56	; 86
    257a:	02 e0       	ldi	r16, 0x02	; 2
    257c:	d9 c0       	rjmp	.+434    	; 0x2730 <main+0x91a>
    goto end;
    // end (PartFound == PART_FET)
  } else if (PartFound == PART_THYRISTOR) {
    257e:	85 30       	cpi	r24, 0x05	; 5
    2580:	19 f4       	brne	.+6      	; 0x2588 <main+0x772>
    lcd_fix_string(Thyristor);		//"Thyristor"
    2582:	84 ea       	ldi	r24, 0xA4	; 164
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	04 c0       	rjmp	.+8      	; 0x2590 <main+0x77a>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    2588:	84 30       	cpi	r24, 0x04	; 4
    258a:	c1 f4       	brne	.+48     	; 0x25bc <main+0x7a6>
    lcd_fix_string(Triac);		//"Triac"
    258c:	8e e9       	ldi	r24, 0x9E	; 158
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
  mess_count = 0;
  goto end2;


gakAusgabe:
  lcd_line2(); //2. row 
    2594:	80 ec       	ldi	r24, 0xC0	; 192
    2596:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
  lcd_fix_string(GAK);		//"GAK="
    259a:	89 e9       	ldi	r24, 0x99	; 153
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
  lcd_testpin(trans.b);
    25a2:	80 91 54 01 	lds	r24, 0x0154
    25a6:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_testpin>
  lcd_testpin(trans.c);
    25aa:	80 91 55 01 	lds	r24, 0x0155
    25ae:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_testpin>
  lcd_testpin(trans.e);
    25b2:	80 91 56 01 	lds	r24, 0x0156
    25b6:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_testpin>
    25ba:	31 c1       	rjmp	.+610    	; 0x281e <main+0xa08>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    lcd_fix_string(Triac);		//"Triac"
    goto gakAusgabe;
  }
  else if(PartFound == PART_RESISTOR) {
    25bc:	86 30       	cpi	r24, 0x06	; 6
    25be:	09 f0       	breq	.+2      	; 0x25c2 <main+0x7ac>
    25c0:	da c0       	rjmp	.+436    	; 0x2776 <main+0x960>
    if (ResistorsFound == 1) { // single resistor
    25c2:	60 91 57 01 	lds	r22, 0x0157
    25c6:	61 30       	cpi	r22, 0x01	; 1
    25c8:	69 f4       	brne	.+26     	; 0x25e4 <main+0x7ce>
       lcd_testpin(resis[0].rb);  	//Pin-number 1
    25ca:	80 91 23 01 	lds	r24, 0x0123
    25ce:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_testpin>
       lcd_fix_string(Resistor_str);
    25d2:	8c e4       	ldi	r24, 0x4C	; 76
    25d4:	91 e0       	ldi	r25, 0x01	; 1
    25d6:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
       lcd_testpin(resis[0].ra);		//Pin-number 2
    25da:	80 91 22 01 	lds	r24, 0x0122
    25de:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_testpin>
    25e2:	80 c0       	rjmp	.+256    	; 0x26e4 <main+0x8ce>
    } else { // R-Max suchen
       ii = 0;
    25e4:	10 92 46 01 	sts	0x0146, r1
       if (resis[1].rx > resis[0].rx)
    25e8:	20 91 25 01 	lds	r18, 0x0125
    25ec:	30 91 26 01 	lds	r19, 0x0126
    25f0:	40 91 27 01 	lds	r20, 0x0127
    25f4:	50 91 28 01 	lds	r21, 0x0128
    25f8:	80 91 1a 01 	lds	r24, 0x011A
    25fc:	90 91 1b 01 	lds	r25, 0x011B
    2600:	a0 91 1c 01 	lds	r26, 0x011C
    2604:	b0 91 1d 01 	lds	r27, 0x011D
    2608:	82 17       	cp	r24, r18
    260a:	93 07       	cpc	r25, r19
    260c:	a4 07       	cpc	r26, r20
    260e:	b5 07       	cpc	r27, r21
    2610:	18 f4       	brcc	.+6      	; 0x2618 <main+0x802>
          ii = 1;
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	80 93 46 01 	sts	0x0146, r24
       if (ResistorsFound == 2) {
    2618:	62 30       	cpi	r22, 0x02	; 2
    261a:	19 f4       	brne	.+6      	; 0x2622 <main+0x80c>
          ii = 2;
    261c:	60 93 46 01 	sts	0x0146, r22
    2620:	22 c0       	rjmp	.+68     	; 0x2666 <main+0x850>
       } else {
          if (resis[2].rx > resis[ii].rx) {
    2622:	20 91 46 01 	lds	r18, 0x0146
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	8b e0       	ldi	r24, 0x0B	; 11
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	28 9f       	mul	r18, r24
    262e:	f0 01       	movw	r30, r0
    2630:	29 9f       	mul	r18, r25
    2632:	f0 0d       	add	r31, r0
    2634:	38 9f       	mul	r19, r24
    2636:	f0 0d       	add	r31, r0
    2638:	11 24       	eor	r1, r1
    263a:	e6 5e       	subi	r30, 0xE6	; 230
    263c:	fe 4f       	sbci	r31, 0xFE	; 254
    263e:	20 91 30 01 	lds	r18, 0x0130
    2642:	30 91 31 01 	lds	r19, 0x0131
    2646:	40 91 32 01 	lds	r20, 0x0132
    264a:	50 91 33 01 	lds	r21, 0x0133
    264e:	80 81       	ld	r24, Z
    2650:	91 81       	ldd	r25, Z+1	; 0x01
    2652:	a2 81       	ldd	r26, Z+2	; 0x02
    2654:	b3 81       	ldd	r27, Z+3	; 0x03
    2656:	82 17       	cp	r24, r18
    2658:	93 07       	cpc	r25, r19
    265a:	a4 07       	cpc	r26, r20
    265c:	b5 07       	cpc	r27, r21
    265e:	18 f4       	brcc	.+6      	; 0x2666 <main+0x850>
             ii = 2;
    2660:	82 e0       	ldi	r24, 0x02	; 2
    2662:	80 93 46 01 	sts	0x0146, r24
          }
       }

       if (ii == 0) {
    2666:	80 91 46 01 	lds	r24, 0x0146
    266a:	88 23       	and	r24, r24
    266c:	89 f4       	brne	.+34     	; 0x2690 <main+0x87a>
          lcd_data('1');
    266e:	81 e3       	ldi	r24, 0x31	; 49
    2670:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    2674:	8c e4       	ldi	r24, 0x4C	; 76
    2676:	91 e0       	ldi	r25, 0x01	; 1
    2678:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
          lcd_data('3');
    267c:	83 e3       	ldi	r24, 0x33	; 51
    267e:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    2682:	8c e4       	ldi	r24, 0x4C	; 76
    2684:	91 e0       	ldi	r25, 0x01	; 1
    2686:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
          lcd_data('2');
    268a:	82 e3       	ldi	r24, 0x32	; 50
    268c:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
       }
       if (ii == 1) {
    2690:	80 91 46 01 	lds	r24, 0x0146
    2694:	81 30       	cpi	r24, 0x01	; 1
    2696:	89 f4       	brne	.+34     	; 0x26ba <main+0x8a4>
          lcd_data('1');
    2698:	81 e3       	ldi	r24, 0x31	; 49
    269a:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    269e:	8c e4       	ldi	r24, 0x4C	; 76
    26a0:	91 e0       	ldi	r25, 0x01	; 1
    26a2:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
          lcd_data('2');
    26a6:	82 e3       	ldi	r24, 0x32	; 50
    26a8:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    26ac:	8c e4       	ldi	r24, 0x4C	; 76
    26ae:	91 e0       	ldi	r25, 0x01	; 1
    26b0:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
          lcd_data('3');
    26b4:	83 e3       	ldi	r24, 0x33	; 51
    26b6:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
       }
       if (ii == 2) {
    26ba:	80 91 46 01 	lds	r24, 0x0146
    26be:	82 30       	cpi	r24, 0x02	; 2
    26c0:	89 f4       	brne	.+34     	; 0x26e4 <main+0x8ce>
          lcd_data('2');
    26c2:	82 e3       	ldi	r24, 0x32	; 50
    26c4:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    26c8:	8c e4       	ldi	r24, 0x4C	; 76
    26ca:	91 e0       	ldi	r25, 0x01	; 1
    26cc:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
          lcd_data('1');
    26d0:	81 e3       	ldi	r24, 0x31	; 49
    26d2:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    26d6:	8c e4       	ldi	r24, 0x4C	; 76
    26d8:	91 e0       	ldi	r25, 0x01	; 1
    26da:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
          lcd_data('3');
    26de:	83 e3       	ldi	r24, 0x33	; 51
    26e0:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
       }
    }
    lcd_line2(); //2. row 
    26e4:	80 ec       	ldi	r24, 0xC0	; 192
    26e6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
    if (ResistorsFound == 1) {
    26ea:	80 91 57 01 	lds	r24, 0x0157
    26ee:	81 30       	cpi	r24, 0x01	; 1
    26f0:	11 f5       	brne	.+68     	; 0x2736 <main+0x920>
       RvalOut(0);
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	0e 94 27 0a 	call	0x144e	; 0x144e <RvalOut>
#if FLASHEND > 0x1fff
       if (resis[0].lx != 0) {
    26f8:	80 91 1e 01 	lds	r24, 0x011E
    26fc:	90 91 1f 01 	lds	r25, 0x011F
    2700:	a0 91 20 01 	lds	r26, 0x0120
    2704:	b0 91 21 01 	lds	r27, 0x0121
    2708:	00 97       	sbiw	r24, 0x00	; 0
    270a:	a1 05       	cpc	r26, r1
    270c:	b1 05       	cpc	r27, r1
    270e:	09 f4       	brne	.+2      	; 0x2712 <main+0x8fc>
    2710:	86 c0       	rjmp	.+268    	; 0x281e <main+0xa08>
	  // resistor have also Inductance
          lcd_fix_string(Lis_str);	// "L="
    2712:	8c e3       	ldi	r24, 0x3C	; 60
    2714:	91 e0       	ldi	r25, 0x01	; 1
    2716:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
          DisplayValue(resis[0].lx,-5,'H',3);	// output inductance
    271a:	60 91 1e 01 	lds	r22, 0x011E
    271e:	70 91 1f 01 	lds	r23, 0x011F
    2722:	80 91 20 01 	lds	r24, 0x0120
    2726:	90 91 21 01 	lds	r25, 0x0121
    272a:	4b ef       	ldi	r20, 0xFB	; 251
    272c:	28 e4       	ldi	r18, 0x48	; 72
    272e:	03 e0       	ldi	r16, 0x03	; 3
    2730:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DisplayValue>
    2734:	74 c0       	rjmp	.+232    	; 0x281e <main+0xa08>
       }
#endif
    } else {
       // output resistor values in right order
       if (ii == 0) {
    2736:	80 91 46 01 	lds	r24, 0x0146
    273a:	88 23       	and	r24, r24
    273c:	31 f4       	brne	.+12     	; 0x274a <main+0x934>
          RvalOut(1);
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	0e 94 27 0a 	call	0x144e	; 0x144e <RvalOut>
          RvalOut(2);
    2744:	82 e0       	ldi	r24, 0x02	; 2
    2746:	0e 94 27 0a 	call	0x144e	; 0x144e <RvalOut>
       }
       if (ii == 1) {
    274a:	80 91 46 01 	lds	r24, 0x0146
    274e:	81 30       	cpi	r24, 0x01	; 1
    2750:	31 f4       	brne	.+12     	; 0x275e <main+0x948>
          RvalOut(0);
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	0e 94 27 0a 	call	0x144e	; 0x144e <RvalOut>
          RvalOut(2);
    2758:	82 e0       	ldi	r24, 0x02	; 2
    275a:	0e 94 27 0a 	call	0x144e	; 0x144e <RvalOut>
       }
       if (ii == 2) {
    275e:	80 91 46 01 	lds	r24, 0x0146
    2762:	82 30       	cpi	r24, 0x02	; 2
    2764:	09 f0       	breq	.+2      	; 0x2768 <main+0x952>
    2766:	5b c0       	rjmp	.+182    	; 0x281e <main+0xa08>
          RvalOut(0);
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	0e 94 27 0a 	call	0x144e	; 0x144e <RvalOut>
          RvalOut(1);
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	0e 94 27 0a 	call	0x144e	; 0x144e <RvalOut>
    2774:	54 c0       	rjmp	.+168    	; 0x281e <main+0xa08>
    goto end;

  } // end (PartFound == PART_RESISTOR)

//capacity measurement is wanted
  else if(PartFound == PART_CAPACITOR) {
    2776:	87 30       	cpi	r24, 0x07	; 7
    2778:	01 f5       	brne	.+64     	; 0x27ba <main+0x9a4>
//     lcd_fix_string(Capacitor);
     lcd_testpin(cap.ca);		//Pin number 1
    277a:	80 91 68 01 	lds	r24, 0x0168
    277e:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_testpin>
     lcd_fix_string(CapZeich);		// capacitor sign
    2782:	87 e2       	ldi	r24, 0x27	; 39
    2784:	91 e0       	ldi	r25, 0x01	; 1
    2786:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
     lcd_testpin(cap.cb);		//Pin number 2
    278a:	80 91 69 01 	lds	r24, 0x0169
    278e:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_testpin>
     lcd_line2(); 			//2. row 
    2792:	80 ec       	ldi	r24, 0xC0	; 192
    2794:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
     DisplayValue(cap.cval_max,cap.cpre_max,'F',4);
    2798:	60 91 5e 01 	lds	r22, 0x015E
    279c:	70 91 5f 01 	lds	r23, 0x015F
    27a0:	80 91 60 01 	lds	r24, 0x0160
    27a4:	90 91 61 01 	lds	r25, 0x0161
    27a8:	40 91 6b 01 	lds	r20, 0x016B
    27ac:	26 e4       	ldi	r18, 0x46	; 70
    27ae:	04 e0       	ldi	r16, 0x04	; 4
    27b0:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DisplayValue>
#if FLASHEND > 0x1fff
     GetESR();				// get ESR of capacitor
    27b4:	0e 94 a1 1a 	call	0x3542	; 0x3542 <GetESR>
#endif
     goto end;
    27b8:	32 c0       	rjmp	.+100    	; 0x281e <main+0xa08>
  }
  if(NumOfDiodes == 0) { //no diodes are found
    27ba:	80 91 07 01 	lds	r24, 0x0107
    27be:	88 23       	and	r24, r24
    27c0:	71 f4       	brne	.+28     	; 0x27de <main+0x9c8>
     lcd_fix_string(TestFailed1); 	//"Kein,unbek. oder"
    27c2:	87 eb       	ldi	r24, 0xB7	; 183
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
     lcd_line2(); //2. row 
    27ca:	80 ec       	ldi	r24, 0xC0	; 192
    27cc:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
     lcd_fix_string(TestFailed2); 	//"defektes "
    27d0:	83 e8       	ldi	r24, 0x83	; 131
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
     lcd_fix_string(Bauteil);		//"Bauteil"
    27d8:	8c e8       	ldi	r24, 0x8C	; 140
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	16 c0       	rjmp	.+44     	; 0x280a <main+0x9f4>
  } else {
     lcd_fix_string(Bauteil);		//"Bauteil"
    27de:	8c e8       	ldi	r24, 0x8C	; 140
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
     lcd_fix_string(Unknown); 		//" unbek."
    27e6:	8e ea       	ldi	r24, 0xAE	; 174
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
     lcd_line2(); //2. row 
    27ee:	80 ec       	ldi	r24, 0xC0	; 192
    27f0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_command>
     lcd_fix_string(OrBroken); 		//"oder defekt "
    27f4:	87 ec       	ldi	r24, 0xC7	; 199
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
     lcd_data(NumOfDiodes + '0');
    27fc:	80 91 07 01 	lds	r24, 0x0107
    2800:	80 5d       	subi	r24, 0xD0	; 208
    2802:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
     lcd_fix_string(AnKat);		//"->|-"
    2806:	8f e3       	ldi	r24, 0x3F	; 63
    2808:	91 e0       	ldi	r25, 0x01	; 1
    280a:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
  }
  empty_count++;
    280e:	80 91 45 01 	lds	r24, 0x0145
    2812:	8f 5f       	subi	r24, 0xFF	; 255
    2814:	80 93 45 01 	sts	0x0145, r24
  mess_count = 0;
    2818:	10 92 0d 01 	sts	0x010D, r1
  goto end2;
    281c:	07 c0       	rjmp	.+14     	; 0x282c <main+0xa16>
  lcd_testpin(trans.b);
  lcd_testpin(trans.c);
  lcd_testpin(trans.e);
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 end:
  empty_count = 0;		// reset counter, if part is found
    281e:	10 92 45 01 	sts	0x0145, r1
  mess_count++;			// count measurements
    2822:	80 91 0d 01 	lds	r24, 0x010D
    2826:	8f 5f       	subi	r24, 0xFF	; 255
    2828:	80 93 0d 01 	sts	0x010D, r24

 end2:
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
    282c:	4f 9b       	sbis	0x09, 7	; 9
    282e:	fe cf       	rjmp	.-4      	; 0x282c <main+0xa16>
  wait200ms();
    2830:	0e 94 75 14 	call	0x28ea	; 0x28ea <wait200ms>
// wait 10 seconds or 3 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage++) {
    2834:	10 92 59 01 	sts	0x0159, r1
    2838:	10 92 58 01 	sts	0x0158, r1
    283c:	0e c0       	rjmp	.+28     	; 0x285a <main+0xa44>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    283e:	4f 9b       	sbis	0x09, 7	; 9
    2840:	49 cb       	rjmp	.-2414   	; 0x1ed4 <main+0xbe>
        // If the key is pressed again... 
        // goto start of measurement 
        goto start;
     }
     wdt_reset();
    2842:	a8 95       	wdr
     wait1ms();
    2844:	0e 94 81 14 	call	0x2902	; 0x2902 <wait1ms>

 end2:
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
  wait200ms();
// wait 10 seconds or 3 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage++) {
    2848:	80 91 58 01 	lds	r24, 0x0158
    284c:	90 91 59 01 	lds	r25, 0x0159
    2850:	01 96       	adiw	r24, 0x01	; 1
    2852:	90 93 59 01 	sts	0x0159, r25
    2856:	80 93 58 01 	sts	0x0158, r24
    285a:	20 91 58 01 	lds	r18, 0x0158
    285e:	30 91 59 01 	lds	r19, 0x0159
    2862:	80 91 02 01 	lds	r24, 0x0102
    2866:	90 91 03 01 	lds	r25, 0x0103
    286a:	28 17       	cp	r18, r24
    286c:	39 07       	cpc	r19, r25
    286e:	38 f3       	brcs	.-50     	; 0x283e <main+0xa28>
  #define POWER2_OFF 255
 #else
  #define POWER2_OFF POWER_OFF*2
 #endif
 #if POWER_OFF+0 > 1
  if ((empty_count < POWER_OFF) && (mess_count < POWER2_OFF)) {
    2870:	80 91 45 01 	lds	r24, 0x0145
    2874:	85 30       	cpi	r24, 0x05	; 5
    2876:	28 f4       	brcc	.+10     	; 0x2882 <main+0xa6c>
    2878:	80 91 0d 01 	lds	r24, 0x010D
    287c:	8a 30       	cpi	r24, 0x0A	; 10
    287e:	08 f4       	brcc	.+2      	; 0x2882 <main+0xa6c>
    2880:	29 cb       	rjmp	.-2478   	; 0x1ed4 <main+0xbe>
     goto start;			// repeat measurement POWER_OFF times
  }
 #endif
  // only one Measurement requested, shut off
  wdt_disable();			//Watchdog off
    2882:	88 e1       	ldi	r24, 0x18	; 24
    2884:	0f b6       	in	r0, 0x3f	; 63
    2886:	f8 94       	cli
    2888:	80 93 60 00 	sts	0x0060, r24
    288c:	10 92 60 00 	sts	0x0060, r1
    2890:	0f be       	out	0x3f, r0	; 63
  ON_PORT &= ~(1<<ON_PIN);		//switch off power
    2892:	5e 98       	cbi	0x0b, 6	; 11
  //never ending loop 
  while(1) {
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    2894:	4f 99       	sbic	0x09, 7	; 9
    2896:	fe cf       	rjmp	.-4      	; 0x2894 <main+0xa7e>
    2898:	1d cb       	rjmp	.-2502   	; 0x1ed4 <main+0xbe>

0000289a <uart_putc>:
    289a:	2f 93       	push	r18
    289c:	5f b7       	in	r21, 0x3f	; 63
    289e:	2f 93       	push	r18
    28a0:	2a e0       	ldi	r18, 0x0A	; 10
    28a2:	80 95       	com	r24
    28a4:	08 94       	sec

000028a6 <putchar0>:
    28a6:	10 f4       	brcc	.+4      	; 0x28ac <putchar1>
    28a8:	43 98       	cbi	0x08, 3	; 8
    28aa:	02 c0       	rjmp	.+4      	; 0x28b0 <putchar2>

000028ac <putchar1>:
    28ac:	43 9a       	sbi	0x08, 3	; 8
	...

000028b0 <putchar2>:
    28b0:	08 d0       	rcall	.+16     	; 0x28c2 <UART_delay>
    28b2:	07 d0       	rcall	.+14     	; 0x28c2 <UART_delay>
    28b4:	86 95       	lsr	r24
    28b6:	2a 95       	dec	r18
    28b8:	b1 f7       	brne	.-20     	; 0x28a6 <putchar0>
    28ba:	2f 91       	pop	r18
    28bc:	5f bf       	out	0x3f, r21	; 63
    28be:	2f 91       	pop	r18
    28c0:	08 95       	ret

000028c2 <UART_delay>:
    28c2:	5f 93       	push	r21
    28c4:	5f b7       	in	r21, 0x3f	; 63
    28c6:	5f 93       	push	r21
    28c8:	00 00       	nop
    28ca:	5e e3       	ldi	r21, 0x3E	; 62

000028cc <UART_delay1>:
    28cc:	5a 95       	dec	r21
    28ce:	f1 f7       	brne	.-4      	; 0x28cc <UART_delay1>
    28d0:	00 00       	nop
    28d2:	5f 91       	pop	r21
    28d4:	5f bf       	out	0x3f, r21	; 63
    28d6:	5f 91       	pop	r21
    28d8:	08 95       	ret

000028da <wait5s>:
    28da:	03 d0       	rcall	.+6      	; 0x28e2 <wait1000ms>

000028dc <wait4s>:
    28dc:	02 d0       	rcall	.+4      	; 0x28e2 <wait1000ms>

000028de <wait3s>:
    28de:	01 d0       	rcall	.+2      	; 0x28e2 <wait1000ms>

000028e0 <wait2s>:
    28e0:	00 d0       	rcall	.+0      	; 0x28e2 <wait1000ms>

000028e2 <wait1000ms>:
    28e2:	00 d0       	rcall	.+0      	; 0x28e4 <wait500ms>

000028e4 <wait500ms>:
    28e4:	03 d0       	rcall	.+6      	; 0x28ec <wait100ms>

000028e6 <wait400ms>:
    28e6:	02 d0       	rcall	.+4      	; 0x28ec <wait100ms>

000028e8 <wait300ms>:
    28e8:	01 d0       	rcall	.+2      	; 0x28ec <wait100ms>

000028ea <wait200ms>:
    28ea:	00 d0       	rcall	.+0      	; 0x28ec <wait100ms>

000028ec <wait100ms>:
    28ec:	a8 95       	wdr
    28ee:	00 d0       	rcall	.+0      	; 0x28f0 <wait50ms>

000028f0 <wait50ms>:
    28f0:	03 d0       	rcall	.+6      	; 0x28f8 <wait10ms>

000028f2 <wait40ms>:
    28f2:	02 d0       	rcall	.+4      	; 0x28f8 <wait10ms>

000028f4 <wait30ms>:
    28f4:	01 d0       	rcall	.+2      	; 0x28f8 <wait10ms>

000028f6 <wait20ms>:
    28f6:	00 d0       	rcall	.+0      	; 0x28f8 <wait10ms>

000028f8 <wait10ms>:
    28f8:	00 d0       	rcall	.+0      	; 0x28fa <wait5ms>

000028fa <wait5ms>:
    28fa:	03 d0       	rcall	.+6      	; 0x2902 <wait1ms>

000028fc <wait4ms>:
    28fc:	02 d0       	rcall	.+4      	; 0x2902 <wait1ms>

000028fe <wait3ms>:
    28fe:	01 d0       	rcall	.+2      	; 0x2902 <wait1ms>

00002900 <wait2ms>:
    2900:	00 d0       	rcall	.+0      	; 0x2902 <wait1ms>

00002902 <wait1ms>:
    2902:	00 d0       	rcall	.+0      	; 0x2904 <wait500us>

00002904 <wait500us>:
    2904:	03 d0       	rcall	.+6      	; 0x290c <wait100us>

00002906 <wait400us>:
    2906:	02 d0       	rcall	.+4      	; 0x290c <wait100us>

00002908 <wait300us>:
    2908:	01 d0       	rcall	.+2      	; 0x290c <wait100us>

0000290a <wait200us>:
    290a:	00 d0       	rcall	.+0      	; 0x290c <wait100us>

0000290c <wait100us>:
    290c:	00 d0       	rcall	.+0      	; 0x290e <wait50us>

0000290e <wait50us>:
    290e:	03 d0       	rcall	.+6      	; 0x2916 <wait10us>

00002910 <wait40us>:
    2910:	02 d0       	rcall	.+4      	; 0x2916 <wait10us>

00002912 <wait30us>:
    2912:	01 d0       	rcall	.+2      	; 0x2916 <wait10us>

00002914 <wait20us>:
    2914:	00 d0       	rcall	.+0      	; 0x2916 <wait10us>

00002916 <wait10us>:
    2916:	00 d0       	rcall	.+0      	; 0x2918 <wait5us>

00002918 <wait5us>:
    2918:	03 d0       	rcall	.+6      	; 0x2920 <wait1us>

0000291a <wait4us>:
    291a:	02 d0       	rcall	.+4      	; 0x2920 <wait1us>

0000291c <wait3us>:
    291c:	01 d0       	rcall	.+2      	; 0x2920 <wait1us>

0000291e <wait2us>:
    291e:	00 d0       	rcall	.+0      	; 0x2920 <wait1us>

00002920 <wait1us>:
    2920:	00 00       	nop
    2922:	08 95       	ret

00002924 <CombineBI2Long>:
    2924:	99 27       	eor	r25, r25

00002926 <CombineII2Long>:
    2926:	08 95       	ret

00002928 <getRLmultip>:
  R_DDR = 0;			// switch all resistor ports to input
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
  return;
 } // end ReadCapacity()

unsigned int getRLmultip(unsigned int cvolt) {
    2928:	ff 92       	push	r15
    292a:	0f 93       	push	r16
    292c:	1f 93       	push	r17
    292e:	cf 93       	push	r28
    2930:	df 93       	push	r29

  unsigned int uvolt;
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;
  if (cvolt >= RL_Tab_Beginn) {
    2932:	21 e0       	ldi	r18, 0x01	; 1
    2934:	8c 32       	cpi	r24, 0x2C	; 44
    2936:	92 07       	cpc	r25, r18
    2938:	18 f0       	brcs	.+6      	; 0x2940 <getRLmultip+0x18>
     uvolt = cvolt - RL_Tab_Beginn;
    293a:	8c 52       	subi	r24, 0x2C	; 44
    293c:	91 40       	sbci	r25, 0x01	; 1
    293e:	02 c0       	rjmp	.+4      	; 0x2944 <getRLmultip+0x1c>
  } else {
     uvolt = 0;			// limit to begin of table
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = uvolt / RL_Tab_Abstand;
    2944:	69 e1       	ldi	r22, 0x19	; 25
    2946:	70 e0       	ldi	r23, 0x00	; 0
    2948:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <__udivmodhi4>
  tabres = uvolt % RL_Tab_Abstand;
    294c:	f8 2e       	mov	r15, r24
  tabres = RL_Tab_Abstand - tabres;
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
    294e:	6d 32       	cpi	r22, 0x2D	; 45
    2950:	08 f0       	brcs	.+2      	; 0x2954 <getRLmultip+0x2c>
    2952:	6c e2       	ldi	r22, 0x2C	; 44
    2954:	c6 2f       	mov	r28, r22
    2956:	d0 e0       	ldi	r29, 0x00	; 0
    2958:	ce 01       	movw	r24, r28
    295a:	88 0f       	add	r24, r24
    295c:	99 1f       	adc	r25, r25
    295e:	80 50       	subi	r24, 0x00	; 0
    2960:	90 40       	sbci	r25, 0x00	; 0
    2962:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <__eerd_word_m168>
    2966:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RLtab[tabind+1]);
    2968:	ce 01       	movw	r24, r28
    296a:	88 0f       	add	r24, r24
    296c:	99 1f       	adc	r25, r25
    296e:	8e 5f       	subi	r24, 0xFE	; 254
    2970:	9f 4f       	sbci	r25, 0xFF	; 255
    2972:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <__eerd_word_m168>
    2976:	9c 01       	movw	r18, r24
  } else {
     uvolt = 0;			// limit to begin of table
  }
  tabind = uvolt / RL_Tab_Abstand;
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
    2978:	49 e1       	ldi	r20, 0x19	; 25
    297a:	4f 19       	sub	r20, r15
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
    297c:	50 e0       	ldi	r21, 0x00	; 0
    297e:	08 1b       	sub	r16, r24
    2980:	19 0b       	sbc	r17, r25
    2982:	40 9f       	mul	r20, r16
    2984:	c0 01       	movw	r24, r0
    2986:	41 9f       	mul	r20, r17
    2988:	90 0d       	add	r25, r0
    298a:	50 9f       	mul	r21, r16
    298c:	90 0d       	add	r25, r0
    298e:	11 24       	eor	r1, r1
    2990:	0c 96       	adiw	r24, 0x0c	; 12
    2992:	69 e1       	ldi	r22, 0x19	; 25
    2994:	70 e0       	ldi	r23, 0x00	; 0
    2996:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <__udivmodhi4>
    299a:	62 0f       	add	r22, r18
    299c:	73 1f       	adc	r23, r19
}
    299e:	cb 01       	movw	r24, r22
    29a0:	df 91       	pop	r29
    29a2:	cf 91       	pop	r28
    29a4:	1f 91       	pop	r17
    29a6:	0f 91       	pop	r16
    29a8:	ff 90       	pop	r15
    29aa:	08 95       	ret

000029ac <Scale_C_with_vcc>:

void Scale_C_with_vcc(void) {
    29ac:	8f 92       	push	r8
    29ae:	9f 92       	push	r9
    29b0:	af 92       	push	r10
    29b2:	bf 92       	push	r11
    29b4:	df 92       	push	r13
    29b6:	ef 92       	push	r14
    29b8:	ff 92       	push	r15
    29ba:	0f 93       	push	r16
    29bc:	1f 93       	push	r17
    29be:	e0 90 5a 01 	lds	r14, 0x015A
    29c2:	f0 90 5b 01 	lds	r15, 0x015B
    29c6:	00 91 5c 01 	lds	r16, 0x015C
    29ca:	10 91 5d 01 	lds	r17, 0x015D
    29ce:	d0 90 6a 01 	lds	r13, 0x016A
   while (cap.cval > 100000) {
      cap.cval /= 10;
    29d2:	4a e0       	ldi	r20, 0x0A	; 10
    29d4:	84 2e       	mov	r8, r20
    29d6:	91 2c       	mov	r9, r1
    29d8:	a1 2c       	mov	r10, r1
    29da:	b1 2c       	mov	r11, r1
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    29dc:	08 c0       	rjmp	.+16     	; 0x29ee <Scale_C_with_vcc+0x42>
      cap.cval /= 10;
    29de:	c8 01       	movw	r24, r16
    29e0:	b7 01       	movw	r22, r14
    29e2:	a5 01       	movw	r20, r10
    29e4:	94 01       	movw	r18, r8
    29e6:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
    29ea:	79 01       	movw	r14, r18
    29ec:	8a 01       	movw	r16, r20
    29ee:	8d 2d       	mov	r24, r13
    29f0:	d3 94       	inc	r13
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    29f2:	91 ea       	ldi	r25, 0xA1	; 161
    29f4:	e9 16       	cp	r14, r25
    29f6:	96 e8       	ldi	r25, 0x86	; 134
    29f8:	f9 06       	cpc	r15, r25
    29fa:	91 e0       	ldi	r25, 0x01	; 1
    29fc:	09 07       	cpc	r16, r25
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	19 07       	cpc	r17, r25
    2a02:	68 f7       	brcc	.-38     	; 0x29de <Scale_C_with_vcc+0x32>
    2a04:	80 93 6a 01 	sts	0x016A, r24
      cap.cval /= 10;
      cap.cpre ++;			// prevent overflow
   }
   cap.cval *= ADCconfig.U_AVCC;	// scale with measured voltage
    2a08:	20 91 3f 01 	lds	r18, 0x013F
    2a0c:	30 91 40 01 	lds	r19, 0x0140
    2a10:	40 e0       	ldi	r20, 0x00	; 0
    2a12:	50 e0       	ldi	r21, 0x00	; 0
    2a14:	c8 01       	movw	r24, r16
    2a16:	b7 01       	movw	r22, r14
    2a18:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
    2a1c:	28 e8       	ldi	r18, 0x88	; 136
    2a1e:	33 e1       	ldi	r19, 0x13	; 19
    2a20:	40 e0       	ldi	r20, 0x00	; 0
    2a22:	50 e0       	ldi	r21, 0x00	; 0
    2a24:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
    2a28:	20 93 5a 01 	sts	0x015A, r18
    2a2c:	30 93 5b 01 	sts	0x015B, r19
    2a30:	40 93 5c 01 	sts	0x015C, r20
    2a34:	50 93 5d 01 	sts	0x015D, r21
}
    2a38:	1f 91       	pop	r17
    2a3a:	0f 91       	pop	r16
    2a3c:	ff 90       	pop	r15
    2a3e:	ef 90       	pop	r14
    2a40:	df 90       	pop	r13
    2a42:	bf 90       	pop	r11
    2a44:	af 90       	pop	r10
    2a46:	9f 90       	pop	r9
    2a48:	8f 90       	pop	r8
    2a4a:	08 95       	ret

00002a4c <ReadCapacity>:

unsigned long CombineII2Long( unsigned int ovcnt16, unsigned int tmpcnt); //tricky function to build unsigned long from two unsigned int values


//=================================================================
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    2a4c:	af 92       	push	r10
    2a4e:	bf 92       	push	r11
    2a50:	cf 92       	push	r12
    2a52:	df 92       	push	r13
    2a54:	ef 92       	push	r14
    2a56:	ff 92       	push	r15
    2a58:	0f 93       	push	r16
    2a5a:	1f 93       	push	r17
    2a5c:	cf 93       	push	r28
    2a5e:	df 93       	push	r29
    2a60:	18 2f       	mov	r17, r24
    2a62:	06 2f       	mov	r16, r22
  uint8_t HiPinR_L, HiPinR_H;
  uint8_t LoADC;
  uint8_t ii;

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
    2a64:	88 0f       	add	r24, r24
    2a66:	81 0f       	add	r24, r17
    2a68:	86 0f       	add	r24, r22
    2a6a:	81 50       	subi	r24, 0x01	; 1
    2a6c:	80 93 47 01 	sts	0x0147, r24
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2a70:	86 2f       	mov	r24, r22
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	8e 54       	subi	r24, 0x4E	; 78
    2a76:	9e 4f       	sbci	r25, 0xFE	; 254
    2a78:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__eerd_byte_m168>
    2a7c:	b8 2e       	mov	r11, r24
  HiPinR_L = MEM_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
    2a7e:	21 2f       	mov	r18, r17
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	c9 01       	movw	r24, r18
    2a84:	81 55       	subi	r24, 0x51	; 81
    2a86:	9e 4f       	sbci	r25, 0xFE	; 254
    2a88:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__eerd_byte_m168>
    2a8c:	a8 2e       	mov	r10, r24
//     DisplayValue(cap.cval,cap.cpre,'F',3);
//     wait2s();
//#endif
//     return;	//We have found a capacitor already
//  }
  if(PartFound == PART_RESISTOR) {
    2a8e:	80 91 09 01 	lds	r24, 0x0109
    2a92:	86 30       	cpi	r24, 0x06	; 6
    2a94:	09 f4       	brne	.+2      	; 0x2a98 <ReadCapacity+0x4c>
    2a96:	36 c2       	rjmp	.+1132   	; 0x2f04 <ReadCapacity+0x4b8>
     lcd_data('R');
     wait2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    2a98:	90 91 07 01 	lds	r25, 0x0107
    2a9c:	ee e6       	ldi	r30, 0x6E	; 110
    2a9e:	f1 e0       	ldi	r31, 0x01	; 1
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	0f c0       	rjmp	.+30     	; 0x2ac2 <ReadCapacity+0x76>
     if ((diodes[ii].Cathode == LowPin) && (diodes[ii].Anode == HighPin) && (diodes[ii].Voltage < 1500)) {
    2aa4:	21 81       	ldd	r18, Z+1	; 0x01
    2aa6:	20 17       	cp	r18, r16
    2aa8:	51 f4       	brne	.+20     	; 0x2abe <ReadCapacity+0x72>
    2aaa:	20 81       	ld	r18, Z
    2aac:	21 17       	cp	r18, r17
    2aae:	39 f4       	brne	.+14     	; 0x2abe <ReadCapacity+0x72>
    2ab0:	22 81       	ldd	r18, Z+2	; 0x02
    2ab2:	33 81       	ldd	r19, Z+3	; 0x03
    2ab4:	45 e0       	ldi	r20, 0x05	; 5
    2ab6:	2c 3d       	cpi	r18, 0xDC	; 220
    2ab8:	34 07       	cpc	r19, r20
    2aba:	08 f4       	brcc	.+2      	; 0x2abe <ReadCapacity+0x72>
    2abc:	23 c2       	rjmp	.+1094   	; 0x2f04 <ReadCapacity+0x4b8>
     lcd_data('R');
     wait2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    2abe:	8f 5f       	subi	r24, 0xFF	; 255
    2ac0:	34 96       	adiw	r30, 0x04	; 4
    2ac2:	89 17       	cp	r24, r25
    2ac4:	78 f3       	brcs	.-34     	; 0x2aa4 <ReadCapacity+0x58>

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2ac6:	88 e0       	ldi	r24, 0x08	; 8
    2ac8:	b8 2a       	or	r11, r24
        return;
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
    2aca:	10 92 67 01 	sts	0x0167, r1
    2ace:	10 92 66 01 	sts	0x0166, r1
#endif
  cap.cval = 0;				// set capacity value to zero
    2ad2:	10 92 5a 01 	sts	0x015A, r1
    2ad6:	10 92 5b 01 	sts	0x015B, r1
    2ada:	10 92 5c 01 	sts	0x015C, r1
    2ade:	10 92 5d 01 	sts	0x015D, r1
  cap.cpre = -12;			//default unit is pF
    2ae2:	84 ef       	ldi	r24, 0xF4	; 244
    2ae4:	80 93 6a 01 	sts	0x016A, r24
  EntladePins();			// discharge capacitor
    2ae8:	0e 94 7e 08 	call	0x10fc	; 0x10fc <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    2aec:	88 e0       	ldi	r24, 0x08	; 8
    2aee:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    2af0:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    2af2:	b7 b8       	out	0x07, r11	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    2af4:	a4 b8       	out	0x04, r10	; 4
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    2af6:	81 2f       	mov	r24, r17
    2af8:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
    2afc:	6c 01       	movw	r12, r24
// ******** should adcv[0] be measured without current???
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2afe:	c0 e0       	ldi	r28, 0x00	; 0
    2b00:	d0 e0       	ldi	r29, 0x00	; 0
     ChargePin10ms(HiPinR_L,1);		//HighPin with R_L 10ms to VCC ,then currentless
    2b02:	8a 2d       	mov	r24, r10
    2b04:	61 e0       	ldi	r22, 0x01	; 1
    2b06:	0e 94 a5 01 	call	0x34a	; 0x34a <ChargePin10ms>
     wait500us();			//wait a little time
    2b0a:	0e 94 82 14 	call	0x2904	; 0x2904 <wait500us>
     wdt_reset();
    2b0e:	a8 95       	wdr
     // read voltage without current, is already charged enough?
     adcv[2] = ReadADC(HighPin);
    2b10:	81 2f       	mov	r24, r17
    2b12:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
    2b16:	7c 01       	movw	r14, r24
     if (adcv[2] > adcv[0]) {
    2b18:	c8 16       	cp	r12, r24
    2b1a:	d9 06       	cpc	r13, r25
    2b1c:	18 f4       	brcc	.+6      	; 0x2b24 <ReadCapacity+0xd8>
        adcv[2] -= adcv[0];		//difference to beginning voltage
    2b1e:	ec 18       	sub	r14, r12
    2b20:	fd 08       	sbc	r15, r13
    2b22:	02 c0       	rjmp	.+4      	; 0x2b28 <ReadCapacity+0xdc>
     } else {
        adcv[2] = 0;			// voltage is lower or same as beginning voltage
    2b24:	ee 24       	eor	r14, r14
    2b26:	ff 24       	eor	r15, r15
     }
     if ((ovcnt16 == 126) && (adcv[2] < 75)) {
    2b28:	ce 37       	cpi	r28, 0x7E	; 126
    2b2a:	d1 05       	cpc	r29, r1
    2b2c:	29 f4       	brne	.+10     	; 0x2b38 <ReadCapacity+0xec>
    2b2e:	9b e4       	ldi	r25, 0x4B	; 75
    2b30:	e9 16       	cp	r14, r25
    2b32:	f1 04       	cpc	r15, r1
    2b34:	08 f4       	brcc	.+2      	; 0x2b38 <ReadCapacity+0xec>
    2b36:	e1 c1       	rjmp	.+962    	; 0x2efa <ReadCapacity+0x4ae>
        // 300mV can not be reached well-timed 
        break;		// don't try to load any more
     }
     if (adcv[2] > 300) {
    2b38:	2d e2       	ldi	r18, 0x2D	; 45
    2b3a:	e2 16       	cp	r14, r18
    2b3c:	21 e0       	ldi	r18, 0x01	; 1
    2b3e:	f2 06       	cpc	r15, r18
    2b40:	18 f0       	brcs	.+6      	; 0x2b48 <ReadCapacity+0xfc>
#if DebugOut == 10
  DisplayValue(ovcnt16,0,' ',4);
  DisplayValue(adcv[2],-3,'V',4);
#endif
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    2b42:	20 97       	sbiw	r28, 0x00	; 0
    2b44:	39 f0       	breq	.+14     	; 0x2b54 <ReadCapacity+0x108>
    2b46:	0c c0       	rjmp	.+24     	; 0x2b60 <ReadCapacity+0x114>
  R_PORT = 0;				// switch R-Port to GND
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2b48:	21 96       	adiw	r28, 0x01	; 1
    2b4a:	31 e0       	ldi	r19, 0x01	; 1
    2b4c:	c4 3f       	cpi	r28, 0xF4	; 244
    2b4e:	d3 07       	cpc	r29, r19
    2b50:	c1 f6       	brne	.-80     	; 0x2b02 <ReadCapacity+0xb6>
    2b52:	d3 c1       	rjmp	.+934    	; 0x2efa <ReadCapacity+0x4ae>
#if DebugOut == 10
  DisplayValue(ovcnt16,0,' ',4);
  DisplayValue(adcv[2],-3,'V',4);
#endif
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    2b54:	45 e1       	ldi	r20, 0x15	; 21
    2b56:	e4 16       	cp	r14, r20
    2b58:	45 e0       	ldi	r20, 0x05	; 5
    2b5a:	f4 06       	cpc	r15, r20
    2b5c:	08 f0       	brcs	.+2      	; 0x2b60 <ReadCapacity+0x114>
    2b5e:	6d c0       	rjmp	.+218    	; 0x2c3a <ReadCapacity+0x1ee>
     goto messe_mit_rh;		// Voltage of more than 1300mV is reached in one pulse, to fast loaded
  }
  // Capacity is more than about 50µF
  cap.cpre = -9;		// switch units to nF 
    2b60:	87 ef       	ldi	r24, 0xF7	; 247
    2b62:	80 93 6a 01 	sts	0x016A, r24
  }
  cap.cval_uncorrected = ovcnt16 + 1;
  cap.cval_uncorrected *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the same time which is required for loading
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2b66:	aa 24       	eor	r10, r10
    2b68:	bb 24       	eor	r11, r11
     wait5ms();
    2b6a:	0e 94 7d 14 	call	0x28fa	; 0x28fa <wait5ms>
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
    2b6e:	81 2f       	mov	r24, r17
    2b70:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
     wdt_reset();
    2b74:	a8 95       	wdr
  }
  cap.cval_uncorrected = ovcnt16 + 1;
  cap.cval_uncorrected *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the same time which is required for loading
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2b76:	08 94       	sec
    2b78:	a1 1c       	adc	r10, r1
    2b7a:	b1 1c       	adc	r11, r1
    2b7c:	ca 15       	cp	r28, r10
    2b7e:	db 05       	cpc	r29, r11
    2b80:	a0 f7       	brcc	.-24     	; 0x2b6a <ReadCapacity+0x11e>
     wait5ms();
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
    2b82:	c8 16       	cp	r12, r24
    2b84:	d9 06       	cpc	r13, r25
    2b86:	30 f4       	brcc	.+12     	; 0x2b94 <ReadCapacity+0x148>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    2b88:	8c 19       	sub	r24, r12
    2b8a:	9d 09       	sbc	r25, r13
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    2b8c:	8e 15       	cp	r24, r14
    2b8e:	9f 05       	cpc	r25, r15
    2b90:	60 f4       	brcc	.+24     	; 0x2baa <ReadCapacity+0x15e>
    2b92:	02 c0       	rjmp	.+4      	; 0x2b98 <ReadCapacity+0x14c>
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
    2b98:	97 01       	movw	r18, r14
    2b9a:	28 1b       	sub	r18, r24
    2b9c:	39 0b       	sbc	r19, r25
    2b9e:	c9 01       	movw	r24, r18
  } else {
     adcv[3] = 0;			// no lost voltage
  }
  if (adcv[3] > 100) {
    2ba0:	25 36       	cpi	r18, 0x65	; 101
    2ba2:	31 05       	cpc	r19, r1
    2ba4:	08 f0       	brcs	.+2      	; 0x2ba8 <ReadCapacity+0x15c>
    2ba6:	a9 c1       	rjmp	.+850    	; 0x2efa <ReadCapacity+0x4ae>
    2ba8:	02 c0       	rjmp	.+4      	; 0x2bae <ReadCapacity+0x162>
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
  } else {
     adcv[3] = 0;			// no lost voltage
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	90 e0       	ldi	r25, 0x00	; 0
     lcd_space();
     wait1s();
 #endif
     goto keinC;			// capacitor does not keep the voltage about 5ms
  }
  cap.cval_uncorrected = ovcnt16 + 1;
    2bae:	21 96       	adiw	r28, 0x01	; 1
    2bb0:	5e 01       	movw	r10, r28
    2bb2:	cc 24       	eor	r12, r12
    2bb4:	dd 24       	eor	r13, r13
    2bb6:	a0 92 62 01 	sts	0x0162, r10
    2bba:	b0 92 63 01 	sts	0x0163, r11
    2bbe:	c0 92 64 01 	sts	0x0164, r12
    2bc2:	d0 92 65 01 	sts	0x0165, r13
  // compute factor with load voltage + lost voltage during the voltage load time
  cap.cval_uncorrected *= getRLmultip(adcv[2]+adcv[3]);	// get factor to convert time to capacity from table
    2bc6:	8e 0d       	add	r24, r14
    2bc8:	9f 1d       	adc	r25, r15
    2bca:	0e 94 94 14 	call	0x2928	; 0x2928 <getRLmultip>
    2bce:	bc 01       	movw	r22, r24
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	a6 01       	movw	r20, r12
    2bd6:	95 01       	movw	r18, r10
    2bd8:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
    2bdc:	60 93 62 01 	sts	0x0162, r22
    2be0:	70 93 63 01 	sts	0x0163, r23
    2be4:	80 93 64 01 	sts	0x0164, r24
    2be8:	90 93 65 01 	sts	0x0165, r25
#endif
   cap.cval = cap.cval_uncorrected;	// set result to uncorrected
    2bec:	60 93 5a 01 	sts	0x015A, r22
    2bf0:	70 93 5b 01 	sts	0x015B, r23
    2bf4:	80 93 5c 01 	sts	0x015C, r24
    2bf8:	90 93 5d 01 	sts	0x015D, r25
   Scale_C_with_vcc();
    2bfc:	0e 94 d6 14 	call	0x29ac	; 0x29ac <Scale_C_with_vcc>
   // cap.cval for this type is at least 40000nF, so the last digit will be never shown
   cap.cval *= (1000 - C_H_KORR);	// correct with C_H_KORR with 0.1% resolution, but prevent overflow
    2c00:	60 91 5a 01 	lds	r22, 0x015A
    2c04:	70 91 5b 01 	lds	r23, 0x015B
    2c08:	80 91 5c 01 	lds	r24, 0x015C
    2c0c:	90 91 5d 01 	lds	r25, 0x015D
    2c10:	28 ee       	ldi	r18, 0xE8	; 232
    2c12:	33 e0       	ldi	r19, 0x03	; 3
    2c14:	40 e0       	ldi	r20, 0x00	; 0
    2c16:	50 e0       	ldi	r21, 0x00	; 0
    2c18:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
   cap.cval /= 100;
    2c1c:	24 e6       	ldi	r18, 0x64	; 100
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	40 e0       	ldi	r20, 0x00	; 0
    2c22:	50 e0       	ldi	r21, 0x00	; 0
    2c24:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
    2c28:	20 93 5a 01 	sts	0x015A, r18
    2c2c:	30 93 5b 01 	sts	0x015B, r19
    2c30:	40 93 5c 01 	sts	0x015C, r20
    2c34:	50 93 5d 01 	sts	0x015D, r21
   DisplayValue(cap.cval,cap.cpre,'F',4);
   lcd_space();
   lcd_string(utoa(ovcnt16,outval,10));
   wait3s();
#endif
   goto checkDiodes;
    2c38:	23 c1       	rjmp	.+582    	; 0x2e80 <ReadCapacity+0x434>
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
  HiPinR_L = MEM_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load
    2c3a:	ea 2c       	mov	r14, r10
    2c3c:	ee 0c       	add	r14, r14

//==================================================================================
// Measurement of little capacity values
messe_mit_rh:
  //little capacity value, about  < 50 µF
  EntladePins();			// discharge capacitor
    2c3e:	0e 94 7e 08 	call	0x10fc	; 0x10fc <EntladePins>
  //measure with the R_H (470kOhm) resistor 
  R_PORT = 0;		// R_DDR ist HiPinR_L
    2c42:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = (1<<TP1) | (1<<TP2) | (1<<TP3) | (1<<TxD);	//switch all Pins to output
    2c44:	8f e0       	ldi	r24, 0x0F	; 15
    2c46:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		//switch all ADC Pins to GND
    2c48:	88 e0       	ldi	r24, 0x08	; 8
    2c4a:	88 b9       	out	0x08, r24	; 8
  R_DDR = HiPinR_H;   		// switch R_H resistor port for HighPin to output (GND)
    2c4c:	e4 b8       	out	0x04, r14	; 4
// setup Analog Comparator
  ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    2c4e:	80 e4       	ldi	r24, 0x40	; 64
    2c50:	80 93 7b 00 	sts	0x007B, r24
  ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    2c54:	84 e5       	ldi	r24, 0x54	; 84
    2c56:	80 bf       	out	0x30, r24	; 48
  ADMUX = (1<<REFS0) | HighPin;			// switch Mux to High-Pin
    2c58:	81 2f       	mov	r24, r17
    2c5a:	80 64       	ori	r24, 0x40	; 64
    2c5c:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    2c60:	86 e1       	ldi	r24, 0x16	; 22
    2c62:	80 93 7a 00 	sts	0x007A, r24
  wait200us();			//wait for bandgap to start up
    2c66:	0e 94 85 14 	call	0x290a	; 0x290a <wait200us>

  ovcnt16 = 0;
// setup Counter1
  TCCR1A = 0;			// set Counter1 to normal Mode
    2c6a:	10 92 80 00 	sts	0x0080, r1
  TCNT1 = 0;			//set Counter to 0
    2c6e:	10 92 85 00 	sts	0x0085, r1
    2c72:	10 92 84 00 	sts	0x0084, r1
  TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// mega88
    2c76:	87 e2       	ldi	r24, 0x27	; 39
    2c78:	86 bb       	out	0x16, r24	; 22
  R_PORT = HiPinR_H;           	// switch R_H resistor port for HighPin to VCC
    2c7a:	e5 b8       	out	0x05, r14	; 5
  if(PartFound == PART_FET) {
    2c7c:	80 91 09 01 	lds	r24, 0x0109
    2c80:	83 30       	cpi	r24, 0x03	; 3
    2c82:	79 f4       	brne	.+30     	; 0x2ca2 <ReadCapacity+0x256>
     // charge capacitor with R_H resistor
     TCCR1B = (1<<CS10);	//Start counter 1MHz or 8MHz
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = (((1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK) & ~(1<<HighPin));	// release only HighPin ADC port
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	01 2e       	mov	r0, r17
    2c90:	02 c0       	rjmp	.+4      	; 0x2c96 <ReadCapacity+0x24a>
    2c92:	88 0f       	add	r24, r24
    2c94:	99 1f       	adc	r25, r25
    2c96:	0a 94       	dec	r0
    2c98:	e2 f7       	brpl	.-8      	; 0x2c92 <ReadCapacity+0x246>
    2c9a:	80 95       	com	r24
    2c9c:	8f 70       	andi	r24, 0x0F	; 15
    2c9e:	87 b9       	out	0x07, r24	; 7
    2ca0:	04 c0       	rjmp	.+8      	; 0x2caa <ReadCapacity+0x25e>
  } else {
     TCCR1B =  (1<<CS10);	//start counter 1MHz or 8MHz
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
    2ca8:	b7 b8       	out	0x07, r11	; 7
     ii = TI1_INT_FLAGS;	//read Timer flags
     if (ii & (1<<ICF1))  {
        break;
     }
     if((ii & (1<<TOV1))) {	// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
        TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    2caa:	81 e0       	ldi	r24, 0x01	; 1
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
  }
//******************************
  while(1) {
     // Wait, until  Input Capture is set
     ii = TI1_INT_FLAGS;	//read Timer flags
    2cac:	26 b3       	in	r18, 0x16	; 22
     if (ii & (1<<ICF1))  {
    2cae:	25 fd       	sbrc	r18, 5
    2cb0:	09 c0       	rjmp	.+18     	; 0x2cc4 <ReadCapacity+0x278>
        break;
     }
     if((ii & (1<<TOV1))) {	// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    2cb2:	20 ff       	sbrs	r18, 0
    2cb4:	fb cf       	rjmp	.-10     	; 0x2cac <ReadCapacity+0x260>
        TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    2cb6:	86 bb       	out	0x16, r24	; 22
        wdt_reset();
    2cb8:	a8 95       	wdr
        ovcnt16++;
    2cba:	21 96       	adiw	r28, 0x01	; 1
        if(ovcnt16 == (F_CPU/5000)) {
    2cbc:	36 e0       	ldi	r19, 0x06	; 6
    2cbe:	c0 34       	cpi	r28, 0x40	; 64
    2cc0:	d3 07       	cpc	r29, r19
    2cc2:	a1 f7       	brne	.-24     	; 0x2cac <ReadCapacity+0x260>
           break; 		//Timeout for Charging, above 12 s
        }
     }
  }
  TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    2cc4:	10 92 81 00 	sts	0x0081, r1
  TI1_INT_FLAGS = (1<<ICF1);		// Reset Input Capture
    2cc8:	80 e2       	ldi	r24, 0x20	; 32
    2cca:	86 bb       	out	0x16, r24	; 22
  tmpint = ICR1;		// get previous Input Capture Counter flag
    2ccc:	e0 90 86 00 	lds	r14, 0x0086
    2cd0:	f0 90 87 00 	lds	r15, 0x0087
// check actual counter, if an additional overflow must be added
  if((TCNT1 > tmpint) && (ii & (1<<TOV1))) {
    2cd4:	80 91 84 00 	lds	r24, 0x0084
    2cd8:	90 91 85 00 	lds	r25, 0x0085
    2cdc:	e8 16       	cp	r14, r24
    2cde:	f9 06       	cpc	r15, r25
    2ce0:	28 f4       	brcc	.+10     	; 0x2cec <ReadCapacity+0x2a0>
    2ce2:	20 ff       	sbrs	r18, 0
    2ce4:	03 c0       	rjmp	.+6      	; 0x2cec <ReadCapacity+0x2a0>
     // this OV was not counted, but was before the Input Capture
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	86 bb       	out	0x16, r24	; 22
     ovcnt16++;
    2cea:	21 96       	adiw	r28, 0x01	; 1
  }
//############################################################
  ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    2cec:	86 e9       	ldi	r24, 0x96	; 150
    2cee:	80 93 7a 00 	sts	0x007A, r24
  R_DDR = 0;			// switch R_H resistor port for input
    2cf2:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// switch R_H resistor port pull up for HighPin off
    2cf4:	15 b8       	out	0x05, r1	; 5
  load_diff = ReadADC(HighPin) + REF_C_KORR - ref_mv;	// build difference of capacitor voltage to Reference Voltage
    2cf6:	81 2f       	mov	r24, r17
    2cf8:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
    2cfc:	20 91 41 01 	lds	r18, 0x0141
    2d00:	30 91 42 01 	lds	r19, 0x0142
    2d04:	82 1b       	sub	r24, r18
    2d06:	93 0b       	sbc	r25, r19
    2d08:	0c 96       	adiw	r24, 0x0c	; 12
    2d0a:	90 93 6d 01 	sts	0x016D, r25
    2d0e:	80 93 6c 01 	sts	0x016C, r24
//############################################################
  if (ovcnt16 >= (F_CPU/10000)) {
    2d12:	43 e0       	ldi	r20, 0x03	; 3
    2d14:	c0 32       	cpi	r28, 0x20	; 32
    2d16:	d4 07       	cpc	r29, r20
    2d18:	08 f0       	brcs	.+2      	; 0x2d1c <ReadCapacity+0x2d0>
    2d1a:	ef c0       	rjmp	.+478    	; 0x2efa <ReadCapacity+0x4ae>
     goto keinC;	// no normal end
  }
  cap.cval_uncorrected = CombineII2Long(ovcnt16, tmpint);
    2d1c:	ce 01       	movw	r24, r28
    2d1e:	b7 01       	movw	r22, r14
    2d20:	0e 94 93 14 	call	0x2926	; 0x2926 <CombineII2Long>
    2d24:	60 93 62 01 	sts	0x0162, r22
    2d28:	70 93 63 01 	sts	0x0163, r23
    2d2c:	80 93 64 01 	sts	0x0164, r24
    2d30:	90 93 65 01 	sts	0x0165, r25

  cap.cpre = -12;			// cap.cval unit is pF 
    2d34:	24 ef       	ldi	r18, 0xF4	; 244
    2d36:	20 93 6a 01 	sts	0x016A, r18
  if (ovcnt16 > 65) {
    2d3a:	c2 34       	cpi	r28, 0x42	; 66
    2d3c:	d1 05       	cpc	r29, r1
    2d3e:	88 f0       	brcs	.+34     	; 0x2d62 <ReadCapacity+0x316>
     cap.cval_uncorrected /= 100;	// switch to next unit
    2d40:	24 e6       	ldi	r18, 0x64	; 100
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	40 e0       	ldi	r20, 0x00	; 0
    2d46:	50 e0       	ldi	r21, 0x00	; 0
    2d48:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
    2d4c:	20 93 62 01 	sts	0x0162, r18
    2d50:	30 93 63 01 	sts	0x0163, r19
    2d54:	40 93 64 01 	sts	0x0164, r20
    2d58:	50 93 65 01 	sts	0x0165, r21
     cap.cpre += 2;			// set unit, prevent overflow
    2d5c:	86 ef       	ldi	r24, 0xF6	; 246
    2d5e:	80 93 6a 01 	sts	0x016A, r24
  }
  cap.cval_uncorrected *= RHmultip;		// 708
    2d62:	60 91 00 01 	lds	r22, 0x0100
    2d66:	70 91 01 01 	lds	r23, 0x0101
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	20 91 62 01 	lds	r18, 0x0162
    2d72:	30 91 63 01 	lds	r19, 0x0163
    2d76:	40 91 64 01 	lds	r20, 0x0164
    2d7a:	50 91 65 01 	lds	r21, 0x0165
    2d7e:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
  cap.cval_uncorrected /= (F_CPU / 10000);	// divide by 100 (@ 1MHz clock), 800 (@ 8MHz clock)
    2d82:	20 e2       	ldi	r18, 0x20	; 32
    2d84:	33 e0       	ldi	r19, 0x03	; 3
    2d86:	40 e0       	ldi	r20, 0x00	; 0
    2d88:	50 e0       	ldi	r21, 0x00	; 0
    2d8a:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
    2d8e:	20 93 62 01 	sts	0x0162, r18
    2d92:	30 93 63 01 	sts	0x0163, r19
    2d96:	40 93 64 01 	sts	0x0164, r20
    2d9a:	50 93 65 01 	sts	0x0165, r21
  cap.cval = cap.cval_uncorrected;		// set the corrected cap.cval
    2d9e:	ea e5       	ldi	r30, 0x5A	; 90
    2da0:	f1 e0       	ldi	r31, 0x01	; 1
    2da2:	20 93 5a 01 	sts	0x015A, r18
    2da6:	31 83       	std	Z+1, r19	; 0x01
    2da8:	42 83       	std	Z+2, r20	; 0x02
    2daa:	53 83       	std	Z+3, r21	; 0x03
  Scale_C_with_vcc();
    2dac:	0e 94 d6 14 	call	0x29ac	; 0x29ac <Scale_C_with_vcc>
  if (cap.cpre == -12) {
    2db0:	80 91 6a 01 	lds	r24, 0x016A
    2db4:	84 3f       	cpi	r24, 0xF4	; 244
    2db6:	09 f0       	breq	.+2      	; 0x2dba <ReadCapacity+0x36e>
    2db8:	55 c0       	rjmp	.+170    	; 0x2e64 <ReadCapacity+0x418>
#if COMP_SLEW1 > COMP_SLEW2
     if (cap.cval < COMP_SLEW1) {
    2dba:	c0 90 5a 01 	lds	r12, 0x015A
    2dbe:	d0 90 5b 01 	lds	r13, 0x015B
    2dc2:	e0 90 5c 01 	lds	r14, 0x015C
    2dc6:	f0 90 5d 01 	lds	r15, 0x015D
    2dca:	80 ea       	ldi	r24, 0xA0	; 160
    2dcc:	c8 16       	cp	r12, r24
    2dce:	8f e0       	ldi	r24, 0x0F	; 15
    2dd0:	d8 06       	cpc	r13, r24
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	e8 06       	cpc	r14, r24
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	f8 06       	cpc	r15, r24
    2dda:	c0 f4       	brcc	.+48     	; 0x2e0c <ReadCapacity+0x3c0>
        // add slew rate dependent offset
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
    2ddc:	a7 01       	movw	r20, r14
    2dde:	96 01       	movw	r18, r12
    2de0:	24 52       	subi	r18, 0x24	; 36
    2de2:	3f 4f       	sbci	r19, 0xFF	; 255
    2de4:	4f 4f       	sbci	r20, 0xFF	; 255
    2de6:	5f 4f       	sbci	r21, 0xFF	; 255
    2de8:	60 ea       	ldi	r22, 0xA0	; 160
    2dea:	7f e0       	ldi	r23, 0x0F	; 15
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
    2df4:	2c 0d       	add	r18, r12
    2df6:	3d 1d       	adc	r19, r13
    2df8:	4e 1d       	adc	r20, r14
    2dfa:	5f 1d       	adc	r21, r15
    2dfc:	20 93 5a 01 	sts	0x015A, r18
    2e00:	30 93 5b 01 	sts	0x015B, r19
    2e04:	40 93 5c 01 	sts	0x015C, r20
    2e08:	50 93 5d 01 	sts	0x015D, r21
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2e0c:	80 91 47 01 	lds	r24, 0x0147
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	8d 53       	subi	r24, 0x3D	; 61
    2e14:	9e 4f       	sbci	r25, 0xFE	; 254
    2e16:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__eerd_byte_m168>
     if (cap.cval > tmpint) {
    2e1a:	20 91 5a 01 	lds	r18, 0x015A
    2e1e:	30 91 5b 01 	lds	r19, 0x015B
    2e22:	40 91 5c 01 	lds	r20, 0x015C
    2e26:	50 91 5d 01 	lds	r21, 0x015D
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
     if (cap.cval > tmpint) {
    2e2c:	a0 e0       	ldi	r26, 0x00	; 0
    2e2e:	b0 e0       	ldi	r27, 0x00	; 0
    2e30:	82 17       	cp	r24, r18
    2e32:	93 07       	cpc	r25, r19
    2e34:	a4 07       	cpc	r26, r20
    2e36:	b5 07       	cpc	r27, r21
    2e38:	68 f4       	brcc	.+26     	; 0x2e54 <ReadCapacity+0x408>
         cap.cval -= tmpint;		//subtract zero offset (pF)
    2e3a:	28 1b       	sub	r18, r24
    2e3c:	39 0b       	sbc	r19, r25
    2e3e:	4a 0b       	sbc	r20, r26
    2e40:	5b 0b       	sbc	r21, r27
    2e42:	20 93 5a 01 	sts	0x015A, r18
    2e46:	30 93 5b 01 	sts	0x015B, r19
    2e4a:	40 93 5c 01 	sts	0x015C, r20
    2e4e:	50 93 5d 01 	sts	0x015D, r21
    2e52:	08 c0       	rjmp	.+16     	; 0x2e64 <ReadCapacity+0x418>
     } else {
         cap.cval = 0;			//unsigned long may not reach negativ value
    2e54:	10 92 5a 01 	sts	0x015A, r1
    2e58:	10 92 5b 01 	sts	0x015B, r1
    2e5c:	10 92 5c 01 	sts	0x015C, r1
    2e60:	10 92 5d 01 	sts	0x015D, r1
  lcd_testpin(HighPin);
  lcd_space();
  DisplayValue(cap.cval,cap.cpre,'F',4);
  wait3s();
#endif
  R_DDR = HiPinR_L; 		//switch R_L for High-Pin to GND
    2e64:	a4 b8       	out	0x04, r10	; 4
#if F_CPU < 2000001
   if(cap.cval < 50)
#else 
   if(cap.cval < 25)
    2e66:	80 91 5a 01 	lds	r24, 0x015A
    2e6a:	90 91 5b 01 	lds	r25, 0x015B
    2e6e:	a0 91 5c 01 	lds	r26, 0x015C
    2e72:	b0 91 5d 01 	lds	r27, 0x015D
    2e76:	89 31       	cpi	r24, 0x19	; 25
    2e78:	91 05       	cpc	r25, r1
    2e7a:	a1 05       	cpc	r26, r1
    2e7c:	b1 05       	cpc	r27, r1
    2e7e:	e8 f1       	brcs	.+122    	; 0x2efa <ReadCapacity+0x4ae>
//   if (ovcnt16 > (6 * ((unsigned long)F_CPU/1000000))) {	// above 3 uF
//      GetESR(HighPin,LowPin);
//   }
#endif
checkDiodes:
   if((NumOfDiodes > 0)  && (PartFound != PART_FET)) {
    2e80:	80 91 07 01 	lds	r24, 0x0107
    2e84:	88 23       	and	r24, r24
    2e86:	21 f0       	breq	.+8      	; 0x2e90 <ReadCapacity+0x444>
    2e88:	80 91 09 01 	lds	r24, 0x0109
    2e8c:	83 30       	cpi	r24, 0x03	; 3
    2e8e:	a9 f5       	brne	.+106    	; 0x2efa <ReadCapacity+0x4ae>
      wait1s();
#endif
      // nearly shure, that there is one or more diodes in reverse direction,
      // which would be wrongly detected as capacitor 
   } else {
      PartFound = PART_CAPACITOR;	//capacitor is found
    2e90:	87 e0       	ldi	r24, 0x07	; 7
    2e92:	80 93 09 01 	sts	0x0109, r24
      if ((cap.cpre > cap.cpre_max) || ((cap.cpre == cap.cpre_max) && (cap.cval > cap.cval_max))) {
    2e96:	60 91 6a 01 	lds	r22, 0x016A
    2e9a:	80 91 6b 01 	lds	r24, 0x016B
    2e9e:	86 17       	cp	r24, r22
    2ea0:	bc f0       	brlt	.+46     	; 0x2ed0 <ReadCapacity+0x484>
    2ea2:	68 17       	cp	r22, r24
    2ea4:	51 f5       	brne	.+84     	; 0x2efa <ReadCapacity+0x4ae>
    2ea6:	20 91 5a 01 	lds	r18, 0x015A
    2eaa:	30 91 5b 01 	lds	r19, 0x015B
    2eae:	40 91 5c 01 	lds	r20, 0x015C
    2eb2:	50 91 5d 01 	lds	r21, 0x015D
    2eb6:	80 91 5e 01 	lds	r24, 0x015E
    2eba:	90 91 5f 01 	lds	r25, 0x015F
    2ebe:	a0 91 60 01 	lds	r26, 0x0160
    2ec2:	b0 91 61 01 	lds	r27, 0x0161
    2ec6:	82 17       	cp	r24, r18
    2ec8:	93 07       	cpc	r25, r19
    2eca:	a4 07       	cpc	r26, r20
    2ecc:	b5 07       	cpc	r27, r21
    2ece:	a8 f4       	brcc	.+42     	; 0x2efa <ReadCapacity+0x4ae>
         // we have found a greater one
         cap.cval_max = cap.cval;
    2ed0:	ea e5       	ldi	r30, 0x5A	; 90
    2ed2:	f1 e0       	ldi	r31, 0x01	; 1
    2ed4:	80 91 5a 01 	lds	r24, 0x015A
    2ed8:	90 91 5b 01 	lds	r25, 0x015B
    2edc:	a0 91 5c 01 	lds	r26, 0x015C
    2ee0:	b0 91 5d 01 	lds	r27, 0x015D
    2ee4:	80 93 5e 01 	sts	0x015E, r24
    2ee8:	90 93 5f 01 	sts	0x015F, r25
    2eec:	a0 93 60 01 	sts	0x0160, r26
    2ef0:	b0 93 61 01 	sts	0x0161, r27
         cap.cpre_max = cap.cpre;
    2ef4:	61 8b       	std	Z+17, r22	; 0x11
         cap.ca = LowPin;		// save LowPin
    2ef6:	06 87       	std	Z+14, r16	; 0x0e
         cap.cb = HighPin;		// save HighPin
    2ef8:	17 87       	std	Z+15, r17	; 0x0f
keinC:
  // discharge capacitor again
//  EntladePins();		// discharge capacitors
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    2efa:	88 e0       	ldi	r24, 0x08	; 8
    2efc:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GNG, no pull up
    2efe:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    2f00:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    2f02:	15 b8       	out	0x05, r1	; 5
  return;
 } // end ReadCapacity()
    2f04:	df 91       	pop	r29
    2f06:	cf 91       	pop	r28
    2f08:	1f 91       	pop	r17
    2f0a:	0f 91       	pop	r16
    2f0c:	ff 90       	pop	r15
    2f0e:	ef 90       	pop	r14
    2f10:	df 90       	pop	r13
    2f12:	cf 90       	pop	r12
    2f14:	bf 90       	pop	r11
    2f16:	af 90       	pop	r10
    2f18:	08 95       	ret

00002f1a <ReadInductance>:

unsigned long CombineII2Long( unsigned int ovcnt16, unsigned int tmpcnt); //tricky function to build unsigned long from two unsigned int values


//=================================================================
void ReadInductance(void) {
    2f1a:	2f 92       	push	r2
    2f1c:	3f 92       	push	r3
    2f1e:	4f 92       	push	r4
    2f20:	5f 92       	push	r5
    2f22:	6f 92       	push	r6
    2f24:	7f 92       	push	r7
    2f26:	8f 92       	push	r8
    2f28:	9f 92       	push	r9
    2f2a:	af 92       	push	r10
    2f2c:	bf 92       	push	r11
    2f2e:	cf 92       	push	r12
    2f30:	df 92       	push	r13
    2f32:	ef 92       	push	r14
    2f34:	ff 92       	push	r15
    2f36:	0f 93       	push	r16
    2f38:	1f 93       	push	r17
    2f3a:	df 93       	push	r29
    2f3c:	cf 93       	push	r28
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
    2f42:	6c 97       	sbiw	r28, 0x1c	; 28
    2f44:	0f b6       	in	r0, 0x3f	; 63
    2f46:	f8 94       	cli
    2f48:	de bf       	out	0x3e, r29	; 62
    2f4a:	0f be       	out	0x3f, r0	; 63
    2f4c:	cd bf       	out	0x3d, r28	; 61
  uint8_t found;	// variable used for searching resistors 
  uint8_t LowPin;	// number of pin with low voltage
  uint8_t HighPin;	// number of pin with high voltage 


  if(PartFound != PART_RESISTOR) {
    2f4e:	80 91 09 01 	lds	r24, 0x0109
    2f52:	86 30       	cpi	r24, 0x06	; 6
    2f54:	09 f0       	breq	.+2      	; 0x2f58 <ReadInductance+0x3e>
    2f56:	69 c2       	rjmp	.+1234   	; 0x342a <ReadInductance+0x510>
    2f58:	aa 24       	eor	r10, r10
    2f5a:	5f c2       	rjmp	.+1214   	; 0x341a <ReadInductance+0x500>
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 21000) continue;
    2f5c:	2a 2d       	mov	r18, r10
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	3a 8b       	std	Y+18, r19	; 0x12
    2f62:	29 8b       	std	Y+17, r18	; 0x11
    2f64:	4b e0       	ldi	r20, 0x0B	; 11
    2f66:	50 e0       	ldi	r21, 0x00	; 0
    2f68:	24 9f       	mul	r18, r20
    2f6a:	f0 01       	movw	r30, r0
    2f6c:	25 9f       	mul	r18, r21
    2f6e:	f0 0d       	add	r31, r0
    2f70:	34 9f       	mul	r19, r20
    2f72:	f0 0d       	add	r31, r0
    2f74:	11 24       	eor	r1, r1
    2f76:	e6 5e       	subi	r30, 0xE6	; 230
    2f78:	fe 4f       	sbci	r31, 0xFE	; 254
    2f7a:	80 81       	ld	r24, Z
    2f7c:	91 81       	ldd	r25, Z+1	; 0x01
    2f7e:	a2 81       	ldd	r26, Z+2	; 0x02
    2f80:	b3 81       	ldd	r27, Z+3	; 0x03
    2f82:	89 30       	cpi	r24, 0x09	; 9
    2f84:	52 e5       	ldi	r21, 0x52	; 82
    2f86:	95 07       	cpc	r25, r21
    2f88:	50 e0       	ldi	r21, 0x00	; 0
    2f8a:	a5 07       	cpc	r26, r21
    2f8c:	50 e0       	ldi	r21, 0x00	; 0
    2f8e:	b5 07       	cpc	r27, r21
    2f90:	08 f0       	brcs	.+2      	; 0x2f94 <ReadInductance+0x7a>
    2f92:	42 c2       	rjmp	.+1156   	; 0x3418 <ReadInductance+0x4fe>
    2f94:	bb 24       	eor	r11, r11
           // first and second pass, direction 1
           LowPin = resis[found].ra;
           HighPin = resis[found].rb;
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    2f96:	1f 01       	movw	r2, r30
    2f98:	bf 01       	movw	r22, r30
    2f9a:	67 5f       	subi	r22, 0xF7	; 247
    2f9c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f9e:	78 8f       	std	Y+24, r23	; 0x18
    2fa0:	6f 8b       	std	Y+23, r22	; 0x17
           HighPin = resis[found].ra;
    2fa2:	cf 01       	movw	r24, r30
    2fa4:	08 96       	adiw	r24, 0x08	; 8
    2fa6:	9a 8f       	std	Y+26, r25	; 0x1a
    2fa8:	89 8f       	std	Y+25, r24	; 0x19
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    2faa:	ab 8e       	std	Y+27, r10	; 0x1b
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 21000) continue;
     // we can check for Inductance, if resistance is below 2800 Ohm
     for (count=0;count<4;count++) {
        // Try four times (different direction and with delayed counter start)
        if (count < 2) {
    2fac:	9b 2d       	mov	r25, r11
    2fae:	92 30       	cpi	r25, 0x02	; 2
    2fb0:	30 f4       	brcc	.+12     	; 0x2fbe <ReadInductance+0xa4>
           // first and second pass, direction 1
           LowPin = resis[found].ra;
    2fb2:	e9 8d       	ldd	r30, Y+25	; 0x19
    2fb4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2fb6:	e0 80       	ld	r14, Z
           HighPin = resis[found].rb;
    2fb8:	ef 89       	ldd	r30, Y+23	; 0x17
    2fba:	f8 8d       	ldd	r31, Y+24	; 0x18
    2fbc:	05 c0       	rjmp	.+10     	; 0x2fc8 <ReadInductance+0xae>
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    2fbe:	ef 89       	ldd	r30, Y+23	; 0x17
    2fc0:	f8 8d       	ldd	r31, Y+24	; 0x18
    2fc2:	e0 80       	ld	r14, Z
           HighPin = resis[found].ra;
    2fc4:	e9 8d       	ldd	r30, Y+25	; 0x19
    2fc6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2fc8:	a0 80       	ld	r10, Z
        }
        HiADC = MEM_read_byte(&PinADCtab[HighPin]);
    2fca:	8a 2d       	mov	r24, r10
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	8e 54       	subi	r24, 0x4E	; 78
    2fd0:	9e 4f       	sbci	r25, 0xFE	; 254
    2fd2:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__eerd_byte_m168>
    2fd6:	c8 2e       	mov	r12, r24
        LoPinR_L = MEM_read_byte(&PinRLtab[LowPin]);	//R_L mask for HighPin R_L load
    2fd8:	8e 2d       	mov	r24, r14
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	81 55       	subi	r24, 0x51	; 81
    2fde:	9e 4f       	sbci	r25, 0xFE	; 254
    2fe0:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__eerd_byte_m168>
        //==================================================================================
        // Measurement of Inductance values
        R_PORT = 0;		// switch R port to GND
    2fe4:	15 b8       	out	0x05, r1	; 5
        ADC_PORT =   TXD_VAL;		// switch ADC-Port to GND
    2fe6:	f8 e0       	ldi	r31, 0x08	; 8
    2fe8:	f8 b9       	out	0x08, r31	; 8
        if ((resis[found].rx < 240) && ((count & 0x01) == 0)) {
    2fea:	f1 01       	movw	r30, r2
    2fec:	20 81       	ld	r18, Z
    2fee:	31 81       	ldd	r19, Z+1	; 0x01
    2ff0:	42 81       	ldd	r20, Z+2	; 0x02
    2ff2:	53 81       	ldd	r21, Z+3	; 0x03
    2ff4:	20 3f       	cpi	r18, 0xF0	; 240
    2ff6:	31 05       	cpc	r19, r1
    2ff8:	41 05       	cpc	r20, r1
    2ffa:	51 05       	cpc	r21, r1
    2ffc:	b8 f4       	brcc	.+46     	; 0x302c <ReadInductance+0x112>
    2ffe:	b0 fc       	sbrc	r11, 0
    3000:	15 c0       	rjmp	.+42     	; 0x302c <ReadInductance+0x112>
           // we can use PinR_L for measurement
           mess_r = RR680MI - R_L_VAL;
    3002:	80 90 04 01 	lds	r8, 0x0104
    3006:	90 90 05 01 	lds	r9, 0x0105
    300a:	20 e7       	ldi	r18, 0x70	; 112
    300c:	35 ee       	ldi	r19, 0xE5	; 229
    300e:	82 0e       	add	r8, r18
    3010:	93 1e       	adc	r9, r19
           ADC_DDR = HiADC | (1<<LowPin) | TXD_MSK;	// switch HiADC and Low Pin to GND, 
    3012:	2c 2d       	mov	r18, r12
    3014:	28 60       	ori	r18, 0x08	; 8
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	0e 2c       	mov	r0, r14
    301c:	02 c0       	rjmp	.+4      	; 0x3022 <ReadInductance+0x108>
    301e:	88 0f       	add	r24, r24
    3020:	99 1f       	adc	r25, r25
    3022:	0a 94       	dec	r0
    3024:	e2 f7       	brpl	.-8      	; 0x301e <ReadInductance+0x104>
    3026:	28 2b       	or	r18, r24
    3028:	27 b9       	out	0x07, r18	; 7
    302a:	08 c0       	rjmp	.+16     	; 0x303c <ReadInductance+0x122>
        } else {
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
    302c:	84 b9       	out	0x04, r24	; 4
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
    302e:	8c 2d       	mov	r24, r12
    3030:	88 60       	ori	r24, 0x08	; 8
    3032:	87 b9       	out	0x07, r24	; 7
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
    3034:	80 90 04 01 	lds	r8, 0x0104
    3038:	90 90 05 01 	lds	r9, 0x0105
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    303c:	40 e0       	ldi	r20, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    303e:	8e 2d       	mov	r24, r14
    3040:	4c 8f       	std	Y+28, r20	; 0x1c
    3042:	0e 94 30 1a 	call	0x3460	; 0x3460 <W10msReadADC>
    3046:	8c 01       	movw	r16, r24
            total_r =  ReadADC(HighPin);
    3048:	8a 2d       	mov	r24, r10
    304a:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    304e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    3050:	02 30       	cpi	r16, 0x02	; 2
    3052:	11 05       	cpc	r17, r1
    3054:	18 f4       	brcc	.+6      	; 0x305c <ReadInductance+0x142>
    3056:	82 30       	cpi	r24, 0x02	; 2
    3058:	91 05       	cpc	r25, r1
    305a:	18 f0       	brcs	.+6      	; 0x3062 <ReadInductance+0x148>
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    305c:	4f 5f       	subi	r20, 0xFF	; 255
    305e:	44 31       	cpi	r20, 0x14	; 20
    3060:	71 f7       	brne	.-36     	; 0x303e <ReadInductance+0x124>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
        // setup Analog Comparator
        ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    3062:	30 e4       	ldi	r19, 0x40	; 64
    3064:	30 93 7b 00 	sts	0x007B, r19
        ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    3068:	44 e5       	ldi	r20, 0x54	; 84
    306a:	40 bf       	out	0x30, r20	; 48
        ADMUX = (1<<REFS0) | LowPin;			// switch Mux to Low-Pin
    306c:	8e 2d       	mov	r24, r14
    306e:	80 64       	ori	r24, 0x40	; 64
    3070:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    3074:	56 e1       	ldi	r21, 0x16	; 22
    3076:	50 93 7a 00 	sts	0x007A, r21
   
      // setup Counter1
        ovcnt16 = 0;
        TCCR1A = 0;			// set Counter1 to normal Mode
    307a:	10 92 80 00 	sts	0x0080, r1
        TCNT1 = 0;			//set Counter to 0
    307e:	10 92 85 00 	sts	0x0085, r1
    3082:	10 92 84 00 	sts	0x0084, r1
        TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// mega88
    3086:	67 e2       	ldi	r22, 0x27	; 39
    3088:	66 bb       	out	0x16, r22	; 22
        HiADC |= TXD_VAL;
    308a:	1c 2d       	mov	r17, r12
    308c:	18 60       	ori	r17, 0x08	; 8
        wait200us();			// wait for bandgap to start up
    308e:	0e 94 85 14 	call	0x290a	; 0x290a <wait200us>
        if ((count & 0x01) == 0 ) {
    3092:	8b 2d       	mov	r24, r11
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	9c 8b       	std	Y+20, r25	; 0x14
    3098:	8b 8b       	std	Y+19, r24	; 0x13
    309a:	81 70       	andi	r24, 0x01	; 1
    309c:	90 70       	andi	r25, 0x00	; 0
    309e:	9e 8b       	std	Y+22, r25	; 0x16
    30a0:	8d 8b       	std	Y+21, r24	; 0x15
    30a2:	9b 89       	ldd	r25, Y+19	; 0x13
    30a4:	90 fd       	sbrc	r25, 0
    30a6:	05 c0       	rjmp	.+10     	; 0x30b2 <ReadInductance+0x198>
           //first start counter, then start current
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    30a8:	e1 e8       	ldi	r30, 0x81	; 129
    30aa:	e0 93 81 00 	sts	0x0081, r30
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    30ae:	18 b9       	out	0x08, r17	; 8
    30b0:	08 c0       	rjmp	.+16     	; 0x30c2 <ReadInductance+0x1a8>
        } else {
           //first start current, then start counter with delay
           //parasitic capacity of coil can cause high current at the beginning
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    30b2:	18 b9       	out	0x08, r17	; 8
      #if F_CPU >= 8000000UL
           wait3us();		// ignore current peak from capacity
    30b4:	0e 94 8e 14 	call	0x291c	; 0x291c <wait3us>
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
    30b8:	f0 e2       	ldi	r31, 0x20	; 32
    30ba:	f6 bb       	out	0x16, r31	; 22
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    30bc:	21 e8       	ldi	r18, 0x81	; 129
    30be:	20 93 81 00 	sts	0x0081, r18
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    30c2:	cc 24       	eor	r12, r12
    30c4:	dd 24       	eor	r13, r13
        }
      
      //******************************
        while(1) {
           // Wait, until  Input Capture is set
           ii = TI1_INT_FLAGS;		//read Timer flags
    30c6:	26 b3       	in	r18, 0x16	; 22
           if (ii & (1<<ICF1))  {
    30c8:	25 fd       	sbrc	r18, 5
    30ca:	0c c0       	rjmp	.+24     	; 0x30e4 <ReadInductance+0x1ca>
              break;
           }
           if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    30cc:	20 ff       	sbrs	r18, 0
    30ce:	fb cf       	rjmp	.-10     	; 0x30c6 <ReadInductance+0x1ac>
              TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    30d0:	31 e0       	ldi	r19, 0x01	; 1
    30d2:	36 bb       	out	0x16, r19	; 22
              wdt_reset();
    30d4:	a8 95       	wdr
              ovcnt16++;
    30d6:	08 94       	sec
    30d8:	c1 1c       	adc	r12, r1
    30da:	d1 1c       	adc	r13, r1
              if(ovcnt16 == (F_CPU/100000)) {
    30dc:	40 e5       	ldi	r20, 0x50	; 80
    30de:	c4 16       	cp	r12, r20
    30e0:	d1 04       	cpc	r13, r1
    30e2:	89 f7       	brne	.-30     	; 0x30c6 <ReadInductance+0x1ac>
                 break; 	//Timeout for Charging, above 0.13 s
              }
           }
        }
        TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    30e4:	10 92 81 00 	sts	0x0081, r1
        TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    30e8:	50 e2       	ldi	r21, 0x20	; 32
    30ea:	56 bb       	out	0x16, r21	; 22
        tmpint = ICR1;		// get previous Input Capture Counter flag
    30ec:	00 91 86 00 	lds	r16, 0x0086
    30f0:	10 91 87 00 	lds	r17, 0x0087
      // check actual counter, if an additional overflow must be added
        if((TCNT1 > tmpint) && (ii & (1<<TOV1))) {
    30f4:	80 91 84 00 	lds	r24, 0x0084
    30f8:	90 91 85 00 	lds	r25, 0x0085
    30fc:	08 17       	cp	r16, r24
    30fe:	19 07       	cpc	r17, r25
    3100:	38 f4       	brcc	.+14     	; 0x3110 <ReadInductance+0x1f6>
    3102:	20 ff       	sbrs	r18, 0
    3104:	05 c0       	rjmp	.+10     	; 0x3110 <ReadInductance+0x1f6>
           // this OV was not counted, but was before the Input Capture
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    3106:	61 e0       	ldi	r22, 0x01	; 1
    3108:	66 bb       	out	0x16, r22	; 22
           ovcnt16++;
    310a:	08 94       	sec
    310c:	c1 1c       	adc	r12, r1
    310e:	d1 1c       	adc	r13, r1
        }
        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    3110:	78 e0       	ldi	r23, 0x08	; 8
    3112:	78 b9       	out	0x08, r23	; 8
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    3114:	86 e9       	ldi	r24, 0x96	; 150
    3116:	80 93 7a 00 	sts	0x007A, r24
        for (ii=0;ii<20;ii++) {
    311a:	40 e0       	ldi	r20, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    311c:	8e 2d       	mov	r24, r14
    311e:	4c 8f       	std	Y+28, r20	; 0x1c
    3120:	0e 94 30 1a 	call	0x3460	; 0x3460 <W10msReadADC>
    3124:	3c 01       	movw	r6, r24
            total_r =  ReadADC(HighPin);
    3126:	8a 2d       	mov	r24, r10
    3128:	0e 94 34 1a 	call	0x3468	; 0x3468 <ReadADC>
    312c:	9c 01       	movw	r18, r24
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    312e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    3130:	92 e0       	ldi	r25, 0x02	; 2
    3132:	69 16       	cp	r6, r25
    3134:	71 04       	cpc	r7, r1
    3136:	18 f4       	brcc	.+6      	; 0x313e <ReadInductance+0x224>
    3138:	22 30       	cpi	r18, 0x02	; 2
    313a:	31 05       	cpc	r19, r1
    313c:	18 f0       	brcs	.+6      	; 0x3144 <ReadInductance+0x22a>
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
           ovcnt16++;
        }
        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
        for (ii=0;ii<20;ii++) {
    313e:	4f 5f       	subi	r20, 0xFF	; 255
    3140:	44 31       	cpi	r20, 0x14	; 20
    3142:	61 f7       	brne	.-40     	; 0x311c <ReadInductance+0x202>
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
        cap.cval = CombineII2Long(ovcnt16, tmpint);
    3144:	c6 01       	movw	r24, r12
    3146:	b8 01       	movw	r22, r16
    3148:	0e 94 93 14 	call	0x2926	; 0x2926 <CombineII2Long>
    314c:	7b 01       	movw	r14, r22
    314e:	8c 01       	movw	r16, r24
    3150:	60 93 5a 01 	sts	0x015A, r22
    3154:	70 93 5b 01 	sts	0x015B, r23
    3158:	80 93 5c 01 	sts	0x015C, r24
    315c:	90 93 5d 01 	sts	0x015D, r25
  #define CNT_ZERO_42 4
  #define CNT_ZERO_720 10
#endif
        // Voltage of comparator in % of umax
        #ifdef AUTO_CAL
        tmpint = (ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset))) ;
    3160:	81 ec       	ldi	r24, 0xC1	; 193
    3162:	91 e0       	ldi	r25, 0x01	; 1
    3164:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <__eerd_word_m168>
    3168:	60 91 41 01 	lds	r22, 0x0141
    316c:	70 91 42 01 	lds	r23, 0x0142
    3170:	68 0f       	add	r22, r24
    3172:	79 1f       	adc	r23, r25
        #else
        tmpint = (ref_mv + REF_C_KORR);
        #endif
        if (mess_r < R_L_VAL) {
    3174:	e0 e9       	ldi	r30, 0x90	; 144
    3176:	8e 16       	cp	r8, r30
    3178:	ea e1       	ldi	r30, 0x1A	; 26
    317a:	9e 06       	cpc	r9, r30
    317c:	a8 f4       	brcc	.+42     	; 0x31a8 <ReadInductance+0x28e>
           // measurement without 680 Ohm
           if (cap.cval > CNT_ZERO_42) cap.cval -= CNT_ZERO_42;
    317e:	f7 e0       	ldi	r31, 0x07	; 7
    3180:	ef 16       	cp	r14, r31
    3182:	f1 04       	cpc	r15, r1
    3184:	01 05       	cpc	r16, r1
    3186:	11 05       	cpc	r17, r1
    3188:	30 f0       	brcs	.+12     	; 0x3196 <ReadInductance+0x27c>
    318a:	d8 01       	movw	r26, r16
    318c:	c7 01       	movw	r24, r14
    318e:	06 97       	sbiw	r24, 0x06	; 6
    3190:	a1 09       	sbc	r26, r1
    3192:	b1 09       	sbc	r27, r1
    3194:	37 c0       	rjmp	.+110    	; 0x3204 <ReadInductance+0x2ea>
           else          cap.cval = 0;
    3196:	10 92 5a 01 	sts	0x015A, r1
    319a:	10 92 5b 01 	sts	0x015B, r1
    319e:	10 92 5c 01 	sts	0x015C, r1
    31a2:	10 92 5d 01 	sts	0x015D, r1
    31a6:	36 c0       	rjmp	.+108    	; 0x3214 <ReadInductance+0x2fa>
        } else {
           // measurement with 680 Ohm resistor
           // if 680 Ohm resistor is used, use REF_L_KORR for correction
           tmpint += REF_L_KORR;
    31a8:	6e 5c       	subi	r22, 0xCE	; 206
    31aa:	7f 4f       	sbci	r23, 0xFF	; 255
           if (cap.cval > CNT_ZERO_720) cap.cval -= CNT_ZERO_720;
    31ac:	28 e0       	ldi	r18, 0x08	; 8
    31ae:	e2 16       	cp	r14, r18
    31b0:	f1 04       	cpc	r15, r1
    31b2:	01 05       	cpc	r16, r1
    31b4:	11 05       	cpc	r17, r1
    31b6:	70 f0       	brcs	.+28     	; 0x31d4 <ReadInductance+0x2ba>
    31b8:	d8 01       	movw	r26, r16
    31ba:	c7 01       	movw	r24, r14
    31bc:	07 97       	sbiw	r24, 0x07	; 7
    31be:	a1 09       	sbc	r26, r1
    31c0:	b1 09       	sbc	r27, r1
    31c2:	80 93 5a 01 	sts	0x015A, r24
    31c6:	90 93 5b 01 	sts	0x015B, r25
    31ca:	a0 93 5c 01 	sts	0x015C, r26
    31ce:	b0 93 5d 01 	sts	0x015D, r27
    31d2:	08 c0       	rjmp	.+16     	; 0x31e4 <ReadInductance+0x2ca>
           else          cap.cval = 0;
    31d4:	10 92 5a 01 	sts	0x015A, r1
    31d8:	10 92 5b 01 	sts	0x015B, r1
    31dc:	10 92 5c 01 	sts	0x015C, r1
    31e0:	10 92 5d 01 	sts	0x015D, r1
           if (cap.cval > 12) cap.cval -= 1;
    31e4:	80 91 5a 01 	lds	r24, 0x015A
    31e8:	90 91 5b 01 	lds	r25, 0x015B
    31ec:	a0 91 5c 01 	lds	r26, 0x015C
    31f0:	b0 91 5d 01 	lds	r27, 0x015D
    31f4:	8d 30       	cpi	r24, 0x0D	; 13
    31f6:	91 05       	cpc	r25, r1
    31f8:	a1 05       	cpc	r26, r1
    31fa:	b1 05       	cpc	r27, r1
    31fc:	58 f0       	brcs	.+22     	; 0x3214 <ReadInductance+0x2fa>
    31fe:	01 97       	sbiw	r24, 0x01	; 1
    3200:	a1 09       	sbc	r26, r1
    3202:	b1 09       	sbc	r27, r1
    3204:	80 93 5a 01 	sts	0x015A, r24
    3208:	90 93 5b 01 	sts	0x015B, r25
    320c:	a0 93 5c 01 	sts	0x015C, r26
    3210:	b0 93 5d 01 	sts	0x015D, r27
        }
        if ((count&0x01) == 1) {
    3214:	4d 89       	ldd	r20, Y+21	; 0x15
    3216:	5e 89       	ldd	r21, Y+22	; 0x16
    3218:	41 15       	cp	r20, r1
    321a:	51 05       	cpc	r21, r1
    321c:	99 f0       	breq	.+38     	; 0x3244 <ReadInductance+0x32a>
           // second pass with delayed counter start
           cap.cval += (3 * (F_CPU/1000000))+10;
    321e:	80 91 5a 01 	lds	r24, 0x015A
    3222:	90 91 5b 01 	lds	r25, 0x015B
    3226:	a0 91 5c 01 	lds	r26, 0x015C
    322a:	b0 91 5d 01 	lds	r27, 0x015D
    322e:	82 96       	adiw	r24, 0x22	; 34
    3230:	a1 1d       	adc	r26, r1
    3232:	b1 1d       	adc	r27, r1
    3234:	80 93 5a 01 	sts	0x015A, r24
    3238:	90 93 5b 01 	sts	0x015B, r25
    323c:	a0 93 5c 01 	sts	0x015C, r26
    3240:	b0 93 5d 01 	sts	0x015D, r27
        }
        if (ovcnt16 >= (F_CPU/100000)) cap.cval = 0; // no transition found
    3244:	50 e5       	ldi	r21, 0x50	; 80
    3246:	c5 16       	cp	r12, r21
    3248:	d1 04       	cpc	r13, r1
    324a:	40 f0       	brcs	.+16     	; 0x325c <ReadInductance+0x342>
    324c:	10 92 5a 01 	sts	0x015A, r1
    3250:	10 92 5b 01 	sts	0x015B, r1
    3254:	10 92 5c 01 	sts	0x015C, r1
    3258:	10 92 5d 01 	sts	0x015D, r1
        total_r = (mess_r + resis[found].rx + RR680PL - R_L_VAL);
    325c:	80 91 0a 01 	lds	r24, 0x010A
    3260:	90 91 0b 01 	lds	r25, 0x010B
    3264:	80 59       	subi	r24, 0x90	; 144
    3266:	9a 41       	sbci	r25, 0x1A	; 26
    3268:	f1 01       	movw	r30, r2
    326a:	20 81       	ld	r18, Z
    326c:	31 81       	ldd	r19, Z+1	; 0x01
    326e:	82 0f       	add	r24, r18
    3270:	93 1f       	adc	r25, r19
    3272:	88 0d       	add	r24, r8
    3274:	99 1d       	adc	r25, r9
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    3276:	6c 01       	movw	r12, r24
    3278:	ee 24       	eor	r14, r14
    327a:	ff 24       	eor	r15, r15
        per_ref = ((unsigned long)tmpint * 100) / umax;
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	24 e6       	ldi	r18, 0x64	; 100
    3282:	30 e0       	ldi	r19, 0x00	; 0
    3284:	40 e0       	ldi	r20, 0x00	; 0
    3286:	50 e0       	ldi	r21, 0x00	; 0
    3288:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
    328c:	2b 01       	movw	r4, r22
    328e:	3c 01       	movw	r6, r24
           cap.cval += (3 * (F_CPU/1000000))+10;
        }
        if (ovcnt16 >= (F_CPU/100000)) cap.cval = 0; // no transition found
        total_r = (mess_r + resis[found].rx + RR680PL - R_L_VAL);
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    3290:	b4 01       	movw	r22, r8
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	20 91 3f 01 	lds	r18, 0x013F
    329a:	30 91 40 01 	lds	r19, 0x0140
    329e:	40 e0       	ldi	r20, 0x00	; 0
    32a0:	50 e0       	ldi	r21, 0x00	; 0
    32a2:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
    32a6:	a7 01       	movw	r20, r14
    32a8:	96 01       	movw	r18, r12
    32aa:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
        per_ref = ((unsigned long)tmpint * 100) / umax;
    32ae:	40 e0       	ldi	r20, 0x00	; 0
    32b0:	50 e0       	ldi	r21, 0x00	; 0
    32b2:	c3 01       	movw	r24, r6
    32b4:	b2 01       	movw	r22, r4
    32b6:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
        per_ref = (uint8_t)MEM2_read_byte(&LogTab[per_ref]);	// -log(1 - per_ref/100)
    32ba:	e2 2f       	mov	r30, r18
    32bc:	f0 e0       	ldi	r31, 0x00	; 0
    32be:	e8 59       	subi	r30, 0x98	; 152
    32c0:	ff 4f       	sbci	r31, 0xFF	; 255
    32c2:	14 91       	lpm	r17, Z+
        // lx in 0.01mH units,  L = Tau * R
        inductance[count] = (cap.cval * total_r ) / ((unsigned int)per_ref * (F_CPU/1000000));
    32c4:	20 91 5a 01 	lds	r18, 0x015A
    32c8:	30 91 5b 01 	lds	r19, 0x015B
    32cc:	40 91 5c 01 	lds	r20, 0x015C
    32d0:	50 91 5d 01 	lds	r21, 0x015D
    32d4:	c7 01       	movw	r24, r14
    32d6:	b6 01       	movw	r22, r12
    32d8:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
    32dc:	21 2f       	mov	r18, r17
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	40 e0       	ldi	r20, 0x00	; 0
    32e2:	50 e0       	ldi	r21, 0x00	; 0
    32e4:	e3 e0       	ldi	r30, 0x03	; 3
    32e6:	22 0f       	add	r18, r18
    32e8:	33 1f       	adc	r19, r19
    32ea:	44 1f       	adc	r20, r20
    32ec:	55 1f       	adc	r21, r21
    32ee:	ea 95       	dec	r30
    32f0:	d1 f7       	brne	.-12     	; 0x32e6 <ReadInductance+0x3cc>
    32f2:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
    32f6:	eb 89       	ldd	r30, Y+19	; 0x13
    32f8:	fc 89       	ldd	r31, Y+20	; 0x14
    32fa:	ee 0f       	add	r30, r30
    32fc:	ff 1f       	adc	r31, r31
    32fe:	ee 0f       	add	r30, r30
    3300:	ff 1f       	adc	r31, r31
    3302:	61 e0       	ldi	r22, 0x01	; 1
    3304:	70 e0       	ldi	r23, 0x00	; 0
    3306:	6c 0f       	add	r22, r28
    3308:	7d 1f       	adc	r23, r29
    330a:	e6 0f       	add	r30, r22
    330c:	f7 1f       	adc	r31, r23
    330e:	20 83       	st	Z, r18
    3310:	31 83       	std	Z+1, r19	; 0x01
    3312:	42 83       	std	Z+2, r20	; 0x02
    3314:	53 83       	std	Z+3, r21	; 0x03
        if (((count&0x01) == 0) && (inductance[count] > (F_CPU/1000000))) {
    3316:	8d 89       	ldd	r24, Y+21	; 0x15
    3318:	9e 89       	ldd	r25, Y+22	; 0x16
    331a:	00 97       	sbiw	r24, 0x00	; 0
    331c:	99 f4       	brne	.+38     	; 0x3344 <ReadInductance+0x42a>
    331e:	29 30       	cpi	r18, 0x09	; 9
    3320:	31 05       	cpc	r19, r1
    3322:	41 05       	cpc	r20, r1
    3324:	51 05       	cpc	r21, r1
    3326:	70 f0       	brcs	.+28     	; 0x3344 <ReadInductance+0x42a>
           // transition is found, measurement with delayed counter start is not necessary
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
    3328:	eb 89       	ldd	r30, Y+19	; 0x13
    332a:	fc 89       	ldd	r31, Y+20	; 0x14
    332c:	31 96       	adiw	r30, 0x01	; 1
    332e:	ee 0f       	add	r30, r30
    3330:	ff 1f       	adc	r31, r31
    3332:	ee 0f       	add	r30, r30
    3334:	ff 1f       	adc	r31, r31
    3336:	e6 0f       	add	r30, r22
    3338:	f7 1f       	adc	r31, r23
    333a:	20 83       	st	Z, r18
    333c:	31 83       	std	Z+1, r19	; 0x01
    333e:	42 83       	std	Z+2, r20	; 0x02
    3340:	53 83       	std	Z+3, r21	; 0x03
           count++;		// skip the delayed measurement
    3342:	b3 94       	inc	r11
        }
        wdt_reset();
    3344:	a8 95       	wdr
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 21000) continue;
     // we can check for Inductance, if resistance is below 2800 Ohm
     for (count=0;count<4;count++) {
    3346:	b3 94       	inc	r11
    3348:	9b 2d       	mov	r25, r11
    334a:	94 30       	cpi	r25, 0x04	; 4
    334c:	08 f4       	brcc	.+2      	; 0x3350 <ReadInductance+0x436>
    334e:	2e ce       	rjmp	.-932    	; 0x2fac <ReadInductance+0x92>
    3350:	ab 8c       	ldd	r10, Y+27	; 0x1b
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
           count++;		// skip the delayed measurement
        }
        wdt_reset();
     }  //end for count
     ADC_PORT = TXD_VAL;		// switch ADC Port to GND
    3352:	e8 e0       	ldi	r30, 0x08	; 8
    3354:	e8 b9       	out	0x08, r30	; 8
     wait20ms();
    3356:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <wait20ms>
     if (inductance[1] > inductance[0]) {
    335a:	2d 81       	ldd	r18, Y+5	; 0x05
    335c:	3e 81       	ldd	r19, Y+6	; 0x06
    335e:	4f 81       	ldd	r20, Y+7	; 0x07
    3360:	58 85       	ldd	r21, Y+8	; 0x08
    3362:	89 81       	ldd	r24, Y+1	; 0x01
    3364:	9a 81       	ldd	r25, Y+2	; 0x02
    3366:	ab 81       	ldd	r26, Y+3	; 0x03
    3368:	bc 81       	ldd	r27, Y+4	; 0x04
    336a:	82 17       	cp	r24, r18
    336c:	93 07       	cpc	r25, r19
    336e:	a4 07       	cpc	r26, r20
    3370:	b5 07       	cpc	r27, r21
    3372:	90 f4       	brcc	.+36     	; 0x3398 <ReadInductance+0x47e>
        resis[found].lx = inductance[1];	// use value found with delayed counter start
    3374:	69 89       	ldd	r22, Y+17	; 0x11
    3376:	7a 89       	ldd	r23, Y+18	; 0x12
    3378:	8b e0       	ldi	r24, 0x0B	; 11
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	68 9f       	mul	r22, r24
    337e:	f0 01       	movw	r30, r0
    3380:	69 9f       	mul	r22, r25
    3382:	f0 0d       	add	r31, r0
    3384:	78 9f       	mul	r23, r24
    3386:	f0 0d       	add	r31, r0
    3388:	11 24       	eor	r1, r1
    338a:	e6 5e       	subi	r30, 0xE6	; 230
    338c:	fe 4f       	sbci	r31, 0xFE	; 254
    338e:	24 83       	std	Z+4, r18	; 0x04
    3390:	35 83       	std	Z+5, r19	; 0x05
    3392:	46 83       	std	Z+6, r20	; 0x06
    3394:	57 83       	std	Z+7, r21	; 0x07
    3396:	11 c0       	rjmp	.+34     	; 0x33ba <ReadInductance+0x4a0>
     } else {
        resis[found].lx = inductance[0];
    3398:	29 89       	ldd	r18, Y+17	; 0x11
    339a:	3a 89       	ldd	r19, Y+18	; 0x12
    339c:	4b e0       	ldi	r20, 0x0B	; 11
    339e:	50 e0       	ldi	r21, 0x00	; 0
    33a0:	24 9f       	mul	r18, r20
    33a2:	f0 01       	movw	r30, r0
    33a4:	25 9f       	mul	r18, r21
    33a6:	f0 0d       	add	r31, r0
    33a8:	34 9f       	mul	r19, r20
    33aa:	f0 0d       	add	r31, r0
    33ac:	11 24       	eor	r1, r1
    33ae:	e6 5e       	subi	r30, 0xE6	; 230
    33b0:	fe 4f       	sbci	r31, 0xFE	; 254
    33b2:	84 83       	std	Z+4, r24	; 0x04
    33b4:	95 83       	std	Z+5, r25	; 0x05
    33b6:	a6 83       	std	Z+6, r26	; 0x06
    33b8:	b7 83       	std	Z+7, r27	; 0x07
     }
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];
    33ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    33bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    33be:	af 85       	ldd	r26, Y+15	; 0x0f
    33c0:	b8 89       	ldd	r27, Y+16	; 0x10
    33c2:	29 85       	ldd	r18, Y+9	; 0x09
    33c4:	3a 85       	ldd	r19, Y+10	; 0x0a
    33c6:	4b 85       	ldd	r20, Y+11	; 0x0b
    33c8:	5c 85       	ldd	r21, Y+12	; 0x0c
    33ca:	28 17       	cp	r18, r24
    33cc:	39 07       	cpc	r19, r25
    33ce:	4a 07       	cpc	r20, r26
    33d0:	5b 07       	cpc	r21, r27
    33d2:	20 f4       	brcc	.+8      	; 0x33dc <ReadInductance+0x4c2>
    33d4:	89 87       	std	Y+9, r24	; 0x09
    33d6:	9a 87       	std	Y+10, r25	; 0x0a
    33d8:	ab 87       	std	Y+11, r26	; 0x0b
    33da:	bc 87       	std	Y+12, r27	; 0x0c
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
    33dc:	89 85       	ldd	r24, Y+9	; 0x09
    33de:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e0:	ab 85       	ldd	r26, Y+11	; 0x0b
    33e2:	bc 85       	ldd	r27, Y+12	; 0x0c
    33e4:	69 89       	ldd	r22, Y+17	; 0x11
    33e6:	7a 89       	ldd	r23, Y+18	; 0x12
    33e8:	2b e0       	ldi	r18, 0x0B	; 11
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	62 9f       	mul	r22, r18
    33ee:	f0 01       	movw	r30, r0
    33f0:	63 9f       	mul	r22, r19
    33f2:	f0 0d       	add	r31, r0
    33f4:	72 9f       	mul	r23, r18
    33f6:	f0 0d       	add	r31, r0
    33f8:	11 24       	eor	r1, r1
    33fa:	e6 5e       	subi	r30, 0xE6	; 230
    33fc:	fe 4f       	sbci	r31, 0xFE	; 254
    33fe:	24 81       	ldd	r18, Z+4	; 0x04
    3400:	35 81       	ldd	r19, Z+5	; 0x05
    3402:	46 81       	ldd	r20, Z+6	; 0x06
    3404:	57 81       	ldd	r21, Z+7	; 0x07
    3406:	82 17       	cp	r24, r18
    3408:	93 07       	cpc	r25, r19
    340a:	a4 07       	cpc	r26, r20
    340c:	b5 07       	cpc	r27, r21
    340e:	20 f4       	brcc	.+8      	; 0x3418 <ReadInductance+0x4fe>
    3410:	84 83       	std	Z+4, r24	; 0x04
    3412:	95 83       	std	Z+5, r25	; 0x05
    3414:	a6 83       	std	Z+6, r26	; 0x06
    3416:	b7 83       	std	Z+7, r27	; 0x07


  if(PartFound != PART_RESISTOR) {
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
    3418:	a3 94       	inc	r10
    341a:	80 91 57 01 	lds	r24, 0x0157
    341e:	a8 16       	cp	r10, r24
    3420:	08 f4       	brcc	.+2      	; 0x3424 <ReadInductance+0x50a>
    3422:	9c cd       	rjmp	.-1224   	; 0x2f5c <ReadInductance+0x42>
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
  } // end loop for all resistors

  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    3424:	88 e0       	ldi	r24, 0x08	; 8
    3426:	87 b9       	out	0x07, r24	; 7
  R_DDR = 0;			// switch all resistor ports to input
    3428:	14 b8       	out	0x04, r1	; 4
#endif
  return;
 } // end ReadInductance()
    342a:	6c 96       	adiw	r28, 0x1c	; 28
    342c:	0f b6       	in	r0, 0x3f	; 63
    342e:	f8 94       	cli
    3430:	de bf       	out	0x3e, r29	; 62
    3432:	0f be       	out	0x3f, r0	; 63
    3434:	cd bf       	out	0x3d, r28	; 61
    3436:	cf 91       	pop	r28
    3438:	df 91       	pop	r29
    343a:	1f 91       	pop	r17
    343c:	0f 91       	pop	r16
    343e:	ff 90       	pop	r15
    3440:	ef 90       	pop	r14
    3442:	df 90       	pop	r13
    3444:	cf 90       	pop	r12
    3446:	bf 90       	pop	r11
    3448:	af 90       	pop	r10
    344a:	9f 90       	pop	r9
    344c:	8f 90       	pop	r8
    344e:	7f 90       	pop	r7
    3450:	6f 90       	pop	r6
    3452:	5f 90       	pop	r5
    3454:	4f 90       	pop	r4
    3456:	3f 90       	pop	r3
    3458:	2f 90       	pop	r2
    345a:	08 95       	ret

0000345c <W20msReadADC>:
    345c:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <wait10ms>

00003460 <W10msReadADC>:
    3460:	0e 94 7d 14 	call	0x28fa	; 0x28fa <wait5ms>

00003464 <W5msReadADC>:
    3464:	0e 94 7d 14 	call	0x28fa	; 0x28fa <wait5ms>

00003468 <ReadADC>:
    3468:	1f 93       	push	r17
    346a:	18 2f       	mov	r17, r24
    346c:	10 64       	ori	r17, 0x40	; 64

0000346e <get_sample>:
    346e:	10 93 7c 00 	sts	0x007C, r17
    3472:	e1 2f       	mov	r30, r17
    3474:	e0 78       	andi	r30, 0x80	; 128
    3476:	80 91 3c 01 	lds	r24, 0x013C
    347a:	e8 17       	cp	r30, r24
    347c:	69 f0       	breq	.+26     	; 0x3498 <r2aa2>
    347e:	0e 94 86 14 	call	0x290c	; 0x290c <wait100us>
    3482:	80 91 7a 00 	lds	r24, 0x007A
    3486:	80 64       	ori	r24, 0x40	; 64
    3488:	80 93 7a 00 	sts	0x007A, r24

0000348c <wadc1>:
    348c:	80 91 7a 00 	lds	r24, 0x007A
    3490:	86 fd       	sbrc	r24, 6
    3492:	fc cf       	rjmp	.-8      	; 0x348c <wadc1>
    3494:	e0 93 3c 01 	sts	0x013C, r30

00003498 <r2aa2>:
    3498:	20 e0       	ldi	r18, 0x00	; 0
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	a9 01       	movw	r20, r18
    349e:	e0 e0       	ldi	r30, 0x00	; 0
    34a0:	20 c0       	rjmp	.+64     	; 0x34e2 <r2ae8>

000034a2 <Loop>:
    34a2:	80 91 7a 00 	lds	r24, 0x007A
    34a6:	80 64       	ori	r24, 0x40	; 64
    34a8:	80 93 7a 00 	sts	0x007A, r24

000034ac <wadc2>:
    34ac:	80 91 7a 00 	lds	r24, 0x007A
    34b0:	86 fd       	sbrc	r24, 6
    34b2:	fc cf       	rjmp	.-8      	; 0x34ac <wadc2>
    34b4:	60 91 78 00 	lds	r22, 0x0078
    34b8:	70 91 79 00 	lds	r23, 0x0079
    34bc:	26 0f       	add	r18, r22
    34be:	37 1f       	adc	r19, r23
    34c0:	41 1d       	adc	r20, r1
    34c2:	51 1d       	adc	r21, r1
    34c4:	e4 30       	cpi	r30, 0x04	; 4
    34c6:	61 f4       	brne	.+24     	; 0x34e0 <r2ae6>
    34c8:	80 91 3e 01 	lds	r24, 0x013E
    34cc:	80 30       	cpi	r24, 0x00	; 0
    34ce:	41 f0       	breq	.+16     	; 0x34e0 <r2ae6>
    34d0:	84 e0       	ldi	r24, 0x04	; 4
    34d2:	20 30       	cpi	r18, 0x00	; 0
    34d4:	38 07       	cpc	r19, r24
    34d6:	20 f4       	brcc	.+8      	; 0x34e0 <r2ae6>
    34d8:	17 fd       	sbrc	r17, 7
    34da:	02 c0       	rjmp	.+4      	; 0x34e0 <r2ae6>
    34dc:	10 68       	ori	r17, 0x80	; 128
    34de:	c7 cf       	rjmp	.-114    	; 0x346e <get_sample>

000034e0 <r2ae6>:
    34e0:	ef 5f       	subi	r30, 0xFF	; 255

000034e2 <r2ae8>:
    34e2:	80 91 3b 01 	lds	r24, 0x013B
    34e6:	e8 17       	cp	r30, r24
    34e8:	e0 f2       	brcs	.-72     	; 0x34a2 <Loop>
    34ea:	17 ff       	sbrs	r17, 7
    34ec:	05 c0       	rjmp	.+10     	; 0x34f8 <r2afe>
    34ee:	60 91 3d 01 	lds	r22, 0x013D
    34f2:	70 91 3e 01 	lds	r23, 0x013E
    34f6:	04 c0       	rjmp	.+8      	; 0x3500 <r2b02>

000034f8 <r2afe>:
    34f8:	60 91 3f 01 	lds	r22, 0x013F
    34fc:	70 91 40 01 	lds	r23, 0x0140

00003500 <r2b02>:
    3500:	80 e0       	ldi	r24, 0x00	; 0
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
    3508:	2f ef       	ldi	r18, 0xFF	; 255
    350a:	33 e0       	ldi	r19, 0x03	; 3
    350c:	41 e0       	ldi	r20, 0x01	; 1
    350e:	62 0f       	add	r22, r18
    3510:	74 1f       	adc	r23, r20
    3512:	81 1d       	adc	r24, r1
    3514:	91 1d       	adc	r25, r1
    3516:	40 e0       	ldi	r20, 0x00	; 0
    3518:	50 e0       	ldi	r21, 0x00	; 0
    351a:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
    351e:	b9 01       	movw	r22, r18
    3520:	ca 01       	movw	r24, r20
    3522:	20 91 3b 01 	lds	r18, 0x013B
    3526:	32 2f       	mov	r19, r18
    3528:	35 95       	asr	r19
    352a:	63 0f       	add	r22, r19
    352c:	71 1d       	adc	r23, r1
    352e:	81 1d       	adc	r24, r1
    3530:	91 1d       	adc	r25, r1
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	40 e0       	ldi	r20, 0x00	; 0
    3536:	50 e0       	ldi	r21, 0x00	; 0
    3538:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
    353c:	c9 01       	movw	r24, r18
    353e:	1f 91       	pop	r17
    3540:	08 95       	ret

00003542 <GetESR>:
#include "Transistortester.h"

#define MAX_CNT 128

//=================================================================
void GetESR() {
    3542:	2f 92       	push	r2
    3544:	3f 92       	push	r3
    3546:	4f 92       	push	r4
    3548:	5f 92       	push	r5
    354a:	6f 92       	push	r6
    354c:	7f 92       	push	r7
    354e:	8f 92       	push	r8
    3550:	9f 92       	push	r9
    3552:	af 92       	push	r10
    3554:	bf 92       	push	r11
    3556:	cf 92       	push	r12
    3558:	df 92       	push	r13
    355a:	ef 92       	push	r14
    355c:	ff 92       	push	r15
    355e:	0f 93       	push	r16
    3560:	1f 93       	push	r17
    3562:	df 93       	push	r29
    3564:	cf 93       	push	r28
    3566:	cd b7       	in	r28, 0x3d	; 61
    3568:	de b7       	in	r29, 0x3e	; 62
    356a:	60 97       	sbiw	r28, 0x10	; 16
    356c:	0f b6       	in	r0, 0x3f	; 63
    356e:	f8 94       	cli
    3570:	de bf       	out	0x3e, r29	; 62
    3572:	0f be       	out	0x3f, r0	; 63
    3574:	cd bf       	out	0x3d, r28	; 61
   esr0 = (int8_t)eeprom_read_byte(&EE_ESR_ZERO);
   sumvolt[0] += (((long)sumvolt[0] * esr0) / ((RR680MI - R_L_VAL) * 10)); // subtract 0.23 Ohm from ESR
   if (sumvolt[1] > sumvolt[0]) {
      sumvolt[1] -= sumvolt[0];		// difference HighPin - LowPin Voltage with current
   } else {
      sumvolt[1] = 0;
    3576:	20 91 5e 01 	lds	r18, 0x015E
    357a:	30 91 5f 01 	lds	r19, 0x015F
    357e:	40 91 60 01 	lds	r20, 0x0160
    3582:	50 91 61 01 	lds	r21, 0x0161
    3586:	10 91 6b 01 	lds	r17, 0x016B
  uint8_t LoADC;		// used to switch Lowpin directly to GND or VCC
  uint8_t ii,jj;		// tempory values
  int8_t esr0;			// used for ESR zero correction

  while (cap.cpre_max < -9) { // set cval to nF unit
      cap.cval_max /= 10;		// reduce value by factor ten
    358a:	6a e0       	ldi	r22, 0x0A	; 10
    358c:	a6 2e       	mov	r10, r22
    358e:	b1 2c       	mov	r11, r1
    3590:	c1 2c       	mov	r12, r1
    3592:	d1 2c       	mov	r13, r1
  uint8_t LoPinR_L;		// used to switch 680 Ohm to LowPin
  uint8_t LoADC;		// used to switch Lowpin directly to GND or VCC
  uint8_t ii,jj;		// tempory values
  int8_t esr0;			// used for ESR zero correction

  while (cap.cpre_max < -9) { // set cval to nF unit
    3594:	07 c0       	rjmp	.+14     	; 0x35a4 <GetESR+0x62>
      cap.cval_max /= 10;		// reduce value by factor ten
    3596:	ca 01       	movw	r24, r20
    3598:	b9 01       	movw	r22, r18
    359a:	a6 01       	movw	r20, r12
    359c:	95 01       	movw	r18, r10
    359e:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
    35a2:	1f 5f       	subi	r17, 0xFF	; 255
  uint8_t LoPinR_L;		// used to switch 680 Ohm to LowPin
  uint8_t LoADC;		// used to switch Lowpin directly to GND or VCC
  uint8_t ii,jj;		// tempory values
  int8_t esr0;			// used for ESR zero correction

  while (cap.cpre_max < -9) { // set cval to nF unit
    35a4:	17 3f       	cpi	r17, 0xF7	; 247
    35a6:	bc f3       	brlt	.-18     	; 0x3596 <GetESR+0x54>
    35a8:	20 93 5e 01 	sts	0x015E, r18
    35ac:	30 93 5f 01 	sts	0x015F, r19
    35b0:	40 93 60 01 	sts	0x0160, r20
    35b4:	50 93 61 01 	sts	0x0161, r21
    35b8:	10 93 6b 01 	sts	0x016B, r17
      cap.cval_max /= 10;		// reduce value by factor ten
      cap.cpre_max++;		// take next decimal prefix
  }
  if (cap.cval_max < 1800) return;			//capacity lower than 1.8 uF
    35bc:	28 30       	cpi	r18, 0x08	; 8
    35be:	67 e0       	ldi	r22, 0x07	; 7
    35c0:	36 07       	cpc	r19, r22
    35c2:	60 e0       	ldi	r22, 0x00	; 0
    35c4:	46 07       	cpc	r20, r22
    35c6:	60 e0       	ldi	r22, 0x00	; 0
    35c8:	56 07       	cpc	r21, r22
    35ca:	08 f4       	brcc	.+2      	; 0x35ce <GetESR+0x8c>
    35cc:	21 c2       	rjmp	.+1090   	; 0x3a10 <GetESR+0x4ce>
  lcd_fix_string(ESR_str);		// " ESR="
    35ce:	86 e3       	ldi	r24, 0x36	; 54
    35d0:	91 e0       	ldi	r25, 0x01	; 1
    35d2:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_fix_string>
  LoADC = MEM_read_byte(&PinADCtab[cap.ca]) | TXD_MSK;
    35d6:	00 91 68 01 	lds	r16, 0x0168
    35da:	10 e0       	ldi	r17, 0x00	; 0
    35dc:	c8 01       	movw	r24, r16
    35de:	8e 54       	subi	r24, 0x4E	; 78
    35e0:	9e 4f       	sbci	r25, 0xFE	; 254
    35e2:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__eerd_byte_m168>
    35e6:	98 e0       	ldi	r25, 0x08	; 8
    35e8:	c9 2e       	mov	r12, r25
    35ea:	c8 2a       	or	r12, r24
  HiADC = MEM_read_byte(&PinADCtab[cap.cb]) | TXD_MSK;
    35ec:	80 91 69 01 	lds	r24, 0x0169
    35f0:	e8 2e       	mov	r14, r24
    35f2:	ff 24       	eor	r15, r15
    35f4:	c7 01       	movw	r24, r14
    35f6:	8e 54       	subi	r24, 0x4E	; 78
    35f8:	9e 4f       	sbci	r25, 0xFE	; 254
    35fa:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__eerd_byte_m168>
    35fe:	b8 e0       	ldi	r27, 0x08	; 8
    3600:	bb 2e       	mov	r11, r27
    3602:	b8 2a       	or	r11, r24
  LoPinR_L = MEM_read_byte(&PinRLtab[cap.ca]);  //R_L mask for LowPin R_L load
    3604:	c8 01       	movw	r24, r16
    3606:	81 55       	subi	r24, 0x51	; 81
    3608:	9e 4f       	sbci	r25, 0xFE	; 254
    360a:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__eerd_byte_m168>
    360e:	a8 2e       	mov	r10, r24
  HiPinR_L = MEM_read_byte(&PinRLtab[cap.cb]);	//R_L mask for HighPin R_L load
    3610:	c7 01       	movw	r24, r14
    3612:	81 55       	subi	r24, 0x51	; 81
    3614:	9e 4f       	sbci	r25, 0xFE	; 254
    3616:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__eerd_byte_m168>
    361a:	d8 2e       	mov	r13, r24
// Measurement of ESR of capacitors AC Mode
   sumvolt[0] = 1;		// set sum of LowPin voltage to 1 to prevent divide by zero
   sumvolt[1] = 1;		// clear sum of HighPin voltage with current
                                // offset is about (x*10*200)/34000 in 0.01 Ohm units
   sumvolt[2] = 0;		// clear sum of HighPin voltage without current
   EntladePins();	// discharge capacitor
    361c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <EntladePins>
   ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    3620:	88 e0       	ldi	r24, 0x08	; 8
    3622:	88 b9       	out	0x08, r24	; 8
  LoPinR_L = MEM_read_byte(&PinRLtab[cap.ca]);  //R_L mask for LowPin R_L load
  HiPinR_L = MEM_read_byte(&PinRLtab[cap.cb]);	//R_L mask for HighPin R_L load


// Measurement of ESR of capacitors AC Mode
   sumvolt[0] = 1;		// set sum of LowPin voltage to 1 to prevent divide by zero
    3624:	a1 e0       	ldi	r26, 0x01	; 1
    3626:	ea 2e       	mov	r14, r26
    3628:	f1 2c       	mov	r15, r1
    362a:	01 2d       	mov	r16, r1
    362c:	11 2d       	mov	r17, r1
   sumvolt[1] = 1;		// clear sum of HighPin voltage with current
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	a0 e0       	ldi	r26, 0x00	; 0
    3634:	b0 e0       	ldi	r27, 0x00	; 0
    3636:	89 83       	std	Y+1, r24	; 0x01
    3638:	9a 83       	std	Y+2, r25	; 0x02
    363a:	ab 83       	std	Y+3, r26	; 0x03
    363c:	bc 83       	std	Y+4, r27	; 0x04
                                // offset is about (x*10*200)/34000 in 0.01 Ohm units
   sumvolt[2] = 0;		// clear sum of HighPin voltage without current
    363e:	1d 82       	std	Y+5, r1	; 0x05
    3640:	1e 82       	std	Y+6, r1	; 0x06
    3642:	1f 82       	std	Y+7, r1	; 0x07
    3644:	18 86       	std	Y+8, r1	; 0x08
   EntladePins();	// discharge capacitor
   ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
// measurement frequency is given by sum of ADC-Reads < 680 Hz
   // ADC Sample and Hold (SH) is done 1.5 ADC clock number after starting 
   for(ii=0;ii<MAX_CNT;ii++) {
    3646:	66 24       	eor	r6, r6
      ADC_DDR = LoADC;				// switch Low-Pin to output (GND)
    3648:	c7 b8       	out	0x07, r12	; 7
       ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);	// switch ADC to LowPin, Internal Ref. 
    364a:	80 91 68 01 	lds	r24, 0x0168
    364e:	80 6c       	ori	r24, 0xC0	; 192
    3650:	80 93 7c 00 	sts	0x007C, r24
       ADCSRA |= (1<<ADSC);				// Start Conversion
    3654:	80 91 7a 00 	lds	r24, 0x007A
    3658:	80 64       	ori	r24, 0x40	; 64
    365a:	80 93 7a 00 	sts	0x007A, r24
       while (ADCSRA&(1<<ADSC));	// wait dummy read , sync with ADC-clock
    365e:	80 91 7a 00 	lds	r24, 0x007A
    3662:	86 fd       	sbrc	r24, 6
    3664:	fc cf       	rjmp	.-8      	; 0x365e <GetESR+0x11c>
      while (1) {
         R_PORT = HiPinR_L;			// switch R-Port to VCC
    3666:	d5 b8       	out	0x05, r13	; 5
         R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (VCC)
    3668:	d4 b8       	out	0x04, r13	; 4
          ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);      // switch ADC to LowPin, Internal Ref. 
    366a:	80 91 68 01 	lds	r24, 0x0168
    366e:	80 6c       	ori	r24, 0xC0	; 192
    3670:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    3674:	80 91 7a 00 	lds	r24, 0x007A
    3678:	80 64       	ori	r24, 0x40	; 64
    367a:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    367e:	80 91 7a 00 	lds	r24, 0x007A
    3682:	86 fd       	sbrc	r24, 6
    3684:	fc cf       	rjmp	.-8      	; 0x367e <GetESR+0x13c>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    3686:	80 91 7a 00 	lds	r24, 0x007A
    368a:	80 64       	ori	r24, 0x40	; 64
    368c:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    3690:	80 91 7a 00 	lds	r24, 0x007A
    3694:	86 fd       	sbrc	r24, 6
    3696:	fc cf       	rjmp	.-8      	; 0x3690 <GetESR+0x14e>
         adcv[0] = ADCW;			// Voltage LowPin with current
    3698:	20 90 78 00 	lds	r2, 0x0078
    369c:	30 90 79 00 	lds	r3, 0x0079
          ADMUX = cap.cb | (1<<REFS1) | (1<<REFS0);      // switch ADC to HighPin, Internal Ref. 
    36a0:	80 91 69 01 	lds	r24, 0x0169
    36a4:	80 6c       	ori	r24, 0xC0	; 192
    36a6:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    36aa:	80 91 7a 00 	lds	r24, 0x007A
    36ae:	80 64       	ori	r24, 0x40	; 64
    36b0:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    36b4:	80 91 7a 00 	lds	r24, 0x007A
    36b8:	86 fd       	sbrc	r24, 6
    36ba:	fc cf       	rjmp	.-8      	; 0x36b4 <GetESR+0x172>
         ADCSRA |= (1<<ADSC);			// Start Conversion, real start is rising edge of ADC clock
    36bc:	80 91 7a 00 	lds	r24, 0x007A
    36c0:	80 64       	ori	r24, 0x40	; 64
    36c2:	80 93 7a 00 	sts	0x007A, r24
         wait10us();				// 2.5 ADC clocks = 20 us
    36c6:	0e 94 8b 14 	call	0x2916	; 0x2916 <wait10us>
         wait5us();			
    36ca:	0e 94 8c 14 	call	0x2918	; 0x2918 <wait5us>
         wait3us();				// with only 17 us delay the voltage goes down before SH
    36ce:	0e 94 8e 14 	call	0x291c	; 0x291c <wait3us>
         wdt_reset();
    36d2:	a8 95       	wdr
         wdt_reset();
    36d4:	a8 95       	wdr
         wdt_reset();
    36d6:	a8 95       	wdr
         wdt_reset();
    36d8:	a8 95       	wdr
         wdt_reset();
    36da:	a8 95       	wdr
         wdt_reset();
    36dc:	a8 95       	wdr
//         wdt_reset();				// with wdt_reset the timing can be adjusted,
						// when time is too short, voltage is down before SH of ADC
						// when time is too long, capacitor will be overloaded.
						// That will cause too high voltage without current.
         R_DDR = 0;				// switch current off,  SH is 1.5 ADC clock behind start
    36de:	14 b8       	out	0x04, r1	; 4
         while (ADCSRA&(1<<ADSC));		// wait for conversion finished
    36e0:	80 91 7a 00 	lds	r24, 0x007A
    36e4:	86 fd       	sbrc	r24, 6
    36e6:	fc cf       	rjmp	.-8      	; 0x36e0 <GetESR+0x19e>
         adcv[1] = ADCW;			// Voltage HighPin with current
    36e8:	20 91 78 00 	lds	r18, 0x0078
    36ec:	30 91 79 00 	lds	r19, 0x0079
         R_PORT = 0;
    36f0:	15 b8       	out	0x05, r1	; 5
          ADCSRA |= (1<<ADSC);			// Start Conversion
    36f2:	80 91 7a 00 	lds	r24, 0x007A
    36f6:	80 64       	ori	r24, 0x40	; 64
    36f8:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read
    36fc:	80 91 7a 00 	lds	r24, 0x007A
    3700:	86 fd       	sbrc	r24, 6
    3702:	fc cf       	rjmp	.-8      	; 0x36fc <GetESR+0x1ba>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    3704:	80 91 7a 00 	lds	r24, 0x007A
    3708:	80 64       	ori	r24, 0x40	; 64
    370a:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    370e:	80 91 7a 00 	lds	r24, 0x007A
    3712:	86 fd       	sbrc	r24, 6
    3714:	fc cf       	rjmp	.-8      	; 0x370e <GetESR+0x1cc>
         adcv[2] = ADCW;			// Voltage HighPin without current
    3716:	80 91 78 00 	lds	r24, 0x0078
    371a:	90 91 79 00 	lds	r25, 0x0079
         if (adcv[2] > 2) break;
    371e:	83 30       	cpi	r24, 0x03	; 3
    3720:	91 05       	cpc	r25, r1
    3722:	10 f4       	brcc	.+4      	; 0x3728 <GetESR+0x1e6>
         wdt_reset();
    3724:	a8 95       	wdr
      }
    3726:	9f cf       	rjmp	.-194    	; 0x3666 <GetESR+0x124>
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
    3728:	44 24       	eor	r4, r4
    372a:	55 24       	eor	r5, r5
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    372c:	a9 01       	movw	r20, r18
    372e:	60 e0       	ldi	r22, 0x00	; 0
    3730:	70 e0       	ldi	r23, 0x00	; 0
    3732:	49 87       	std	Y+9, r20	; 0x09
    3734:	5a 87       	std	Y+10, r21	; 0x0a
    3736:	6b 87       	std	Y+11, r22	; 0x0b
    3738:	7c 87       	std	Y+12, r23	; 0x0c
      sumvolt[2] += adcv[2]; 			// capacitor voltage without current
    373a:	9c 01       	movw	r18, r24
    373c:	40 e0       	ldi	r20, 0x00	; 0
    373e:	50 e0       	ldi	r21, 0x00	; 0
    3740:	2d 87       	std	Y+13, r18	; 0x0d
    3742:	3e 87       	std	Y+14, r19	; 0x0e
    3744:	4f 87       	std	Y+15, r20	; 0x0f
    3746:	58 8b       	std	Y+16, r21	; 0x10
      ADC_DDR = HiADC;				// switch High Pin to GND
    3748:	b7 b8       	out	0x07, r11	; 7
       ADCSRA |= (1<<ADSC);			// Start Conversion
    374a:	80 91 7a 00 	lds	r24, 0x007A
    374e:	80 64       	ori	r24, 0x40	; 64
    3750:	80 93 7a 00 	sts	0x007A, r24
       while (ADCSRA&(1<<ADSC));		// wait dummy read
    3754:	80 91 7a 00 	lds	r24, 0x007A
    3758:	86 fd       	sbrc	r24, 6
    375a:	fc cf       	rjmp	.-8      	; 0x3754 <GetESR+0x212>
      while (1) {
         R_PORT = LoPinR_L;
    375c:	a5 b8       	out	0x05, r10	; 5
         R_DDR = LoPinR_L;			// switch LowPin with 680 Ohm to VCC
    375e:	a4 b8       	out	0x04, r10	; 4
         wdt_reset();
    3760:	a8 95       	wdr
          ADMUX = cap.cb | (1<<REFS1) | (1<<REFS0);      // switch ADC to HighPin, Internal Ref. 
    3762:	80 91 69 01 	lds	r24, 0x0169
    3766:	80 6c       	ori	r24, 0xC0	; 192
    3768:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    376c:	80 91 7a 00 	lds	r24, 0x007A
    3770:	80 64       	ori	r24, 0x40	; 64
    3772:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    3776:	80 91 7a 00 	lds	r24, 0x007A
    377a:	86 fd       	sbrc	r24, 6
    377c:	fc cf       	rjmp	.-8      	; 0x3776 <GetESR+0x234>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    377e:	80 91 7a 00 	lds	r24, 0x007A
    3782:	80 64       	ori	r24, 0x40	; 64
    3784:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    3788:	80 91 7a 00 	lds	r24, 0x007A
    378c:	86 fd       	sbrc	r24, 6
    378e:	fc cf       	rjmp	.-8      	; 0x3788 <GetESR+0x246>
         adcv[0] = ADCW;			// Voltage HighPin with current
    3790:	80 90 78 00 	lds	r8, 0x0078
    3794:	90 90 79 00 	lds	r9, 0x0079
          ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);      // switch ADC to LowPin, Internal Ref. 
    3798:	80 91 68 01 	lds	r24, 0x0168
    379c:	80 6c       	ori	r24, 0xC0	; 192
    379e:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    37a2:	80 91 7a 00 	lds	r24, 0x007A
    37a6:	80 64       	ori	r24, 0x40	; 64
    37a8:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    37ac:	80 91 7a 00 	lds	r24, 0x007A
    37b0:	86 fd       	sbrc	r24, 6
    37b2:	fc cf       	rjmp	.-8      	; 0x37ac <GetESR+0x26a>
         ADCSRA |= (1<<ADSC);			// Start Conversion, real start is rising edge of ADC clock
    37b4:	80 91 7a 00 	lds	r24, 0x007A
    37b8:	80 64       	ori	r24, 0x40	; 64
    37ba:	80 93 7a 00 	sts	0x007A, r24
         wait10us();				// 2.5 ADC clocks = 20 us
    37be:	0e 94 8b 14 	call	0x2916	; 0x2916 <wait10us>
         wait5us();			
    37c2:	0e 94 8c 14 	call	0x2918	; 0x2918 <wait5us>
         wait3us();				// with only 17 us delay the voltage goes down before SH
    37c6:	0e 94 8e 14 	call	0x291c	; 0x291c <wait3us>
         wdt_reset();
    37ca:	a8 95       	wdr
         wdt_reset();
    37cc:	a8 95       	wdr
         wdt_reset();
    37ce:	a8 95       	wdr
         wdt_reset();
    37d0:	a8 95       	wdr
         wdt_reset();
    37d2:	a8 95       	wdr
         wdt_reset();
    37d4:	a8 95       	wdr
//         wdt_reset();				// with wdt_reset the timing can be adjusted,
						// when time is too short, voltage is down before SH of ADC
						// when time is too long, capacitor will be overloaded.
						// That will cause too high voltage without current.
         R_DDR = 0;				// switch current off, SH is 1.5 ADC clock ticks behind start
    37d6:	14 b8       	out	0x04, r1	; 4
         while (ADCSRA&(1<<ADSC));		// wait for conversion finished
    37d8:	80 91 7a 00 	lds	r24, 0x007A
    37dc:	86 fd       	sbrc	r24, 6
    37de:	fc cf       	rjmp	.-8      	; 0x37d8 <GetESR+0x296>
         adcv[1] = ADCW;			//  Voltage LowPin with current
    37e0:	40 91 78 00 	lds	r20, 0x0078
    37e4:	50 91 79 00 	lds	r21, 0x0079
         R_PORT = 0;
    37e8:	15 b8       	out	0x05, r1	; 5
          ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);      // switch ADC to LowPin, Internal Ref. 
    37ea:	80 91 68 01 	lds	r24, 0x0168
    37ee:	80 6c       	ori	r24, 0xC0	; 192
    37f0:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);		// Start Conversion
    37f4:	80 91 7a 00 	lds	r24, 0x007A
    37f8:	80 64       	ori	r24, 0x40	; 64
    37fa:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read
    37fe:	80 91 7a 00 	lds	r24, 0x007A
    3802:	86 fd       	sbrc	r24, 6
    3804:	fc cf       	rjmp	.-8      	; 0x37fe <GetESR+0x2bc>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    3806:	80 91 7a 00 	lds	r24, 0x007A
    380a:	80 64       	ori	r24, 0x40	; 64
    380c:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    3810:	80 91 7a 00 	lds	r24, 0x007A
    3814:	86 fd       	sbrc	r24, 6
    3816:	fc cf       	rjmp	.-8      	; 0x3810 <GetESR+0x2ce>
         adcv[2] = ADCW;			// Voltage LowPin without current
    3818:	20 91 78 00 	lds	r18, 0x0078
    381c:	30 91 79 00 	lds	r19, 0x0079
         if (adcv[2] > 2) break;
    3820:	23 30       	cpi	r18, 0x03	; 3
    3822:	31 05       	cpc	r19, r1
    3824:	10 f4       	brcc	.+4      	; 0x382a <GetESR+0x2e8>
         wdt_reset();
    3826:	a8 95       	wdr
      }
    3828:	99 cf       	rjmp	.-206    	; 0x375c <GetESR+0x21a>
      R_DDR = 0;				// switch current off
    382a:	14 b8       	out	0x04, r1	; 4
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
    382c:	c4 01       	movw	r24, r8
    382e:	a0 e0       	ldi	r26, 0x00	; 0
    3830:	b0 e0       	ldi	r27, 0x00	; 0
         while (ADCSRA&(1<<ADSC));		// wait
         adcv[2] = ADCW;			// Voltage HighPin without current
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
    3832:	82 0d       	add	r24, r2
    3834:	93 1d       	adc	r25, r3
    3836:	a4 1d       	adc	r26, r4
    3838:	b5 1d       	adc	r27, r5
         adcv[2] = ADCW;			// Voltage LowPin without current
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      R_DDR = 0;				// switch current off
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
    383a:	e8 0e       	add	r14, r24
    383c:	f9 1e       	adc	r15, r25
    383e:	0a 1f       	adc	r16, r26
    3840:	1b 1f       	adc	r17, r27
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    3842:	ca 01       	movw	r24, r20
    3844:	a0 e0       	ldi	r26, 0x00	; 0
    3846:	b0 e0       	ldi	r27, 0x00	; 0
         adcv[2] = ADCW;			// Voltage HighPin without current
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    3848:	49 85       	ldd	r20, Y+9	; 0x09
    384a:	5a 85       	ldd	r21, Y+10	; 0x0a
    384c:	6b 85       	ldd	r22, Y+11	; 0x0b
    384e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3850:	84 0f       	add	r24, r20
    3852:	95 1f       	adc	r25, r21
    3854:	a6 1f       	adc	r26, r22
    3856:	b7 1f       	adc	r27, r23
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      R_DDR = 0;				// switch current off
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    3858:	49 81       	ldd	r20, Y+1	; 0x01
    385a:	5a 81       	ldd	r21, Y+2	; 0x02
    385c:	6b 81       	ldd	r22, Y+3	; 0x03
    385e:	7c 81       	ldd	r23, Y+4	; 0x04
    3860:	48 0f       	add	r20, r24
    3862:	59 1f       	adc	r21, r25
    3864:	6a 1f       	adc	r22, r26
    3866:	7b 1f       	adc	r23, r27
    3868:	49 83       	std	Y+1, r20	; 0x01
    386a:	5a 83       	std	Y+2, r21	; 0x02
    386c:	6b 83       	std	Y+3, r22	; 0x03
    386e:	7c 83       	std	Y+4, r23	; 0x04
      sumvolt[2] += adcv[2];			// add  HighPin voltages without current
    3870:	40 e0       	ldi	r20, 0x00	; 0
    3872:	50 e0       	ldi	r21, 0x00	; 0
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
      sumvolt[2] += adcv[2]; 			// capacitor voltage without current
    3874:	6d 85       	ldd	r22, Y+13	; 0x0d
    3876:	7e 85       	ldd	r23, Y+14	; 0x0e
    3878:	8f 85       	ldd	r24, Y+15	; 0x0f
    387a:	98 89       	ldd	r25, Y+16	; 0x10
    387c:	26 0f       	add	r18, r22
    387e:	37 1f       	adc	r19, r23
    3880:	48 1f       	adc	r20, r24
    3882:	59 1f       	adc	r21, r25
         wdt_reset();
      }
      R_DDR = 0;				// switch current off
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
      sumvolt[2] += adcv[2];			// add  HighPin voltages without current
    3884:	8d 81       	ldd	r24, Y+5	; 0x05
    3886:	9e 81       	ldd	r25, Y+6	; 0x06
    3888:	af 81       	ldd	r26, Y+7	; 0x07
    388a:	b8 85       	ldd	r27, Y+8	; 0x08
    388c:	82 0f       	add	r24, r18
    388e:	93 1f       	adc	r25, r19
    3890:	a4 1f       	adc	r26, r20
    3892:	b5 1f       	adc	r27, r21
    3894:	8d 83       	std	Y+5, r24	; 0x05
    3896:	9e 83       	std	Y+6, r25	; 0x06
    3898:	af 83       	std	Y+7, r26	; 0x07
    389a:	b8 87       	std	Y+8, r27	; 0x08
   sumvolt[2] = 0;		// clear sum of HighPin voltage without current
   EntladePins();	// discharge capacitor
   ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
// measurement frequency is given by sum of ADC-Reads < 680 Hz
   // ADC Sample and Hold (SH) is done 1.5 ADC clock number after starting 
   for(ii=0;ii<MAX_CNT;ii++) {
    389c:	63 94       	inc	r6
    389e:	96 2d       	mov	r25, r6
    38a0:	90 38       	cpi	r25, 0x80	; 128
    38a2:	09 f0       	breq	.+2      	; 0x38a6 <GetESR+0x364>
    38a4:	d1 ce       	rjmp	.-606    	; 0x3648 <GetESR+0x106>
   } // end for
   // we need to compensate the time delay between reading the LowPin Voltage and the
   // HighPin Voltage, which is usually 2 * 14 * 8 us = 224 us.
   // With the loading of the capacitor the current will sink, so we get a too high voltage at
   // the LowPin. The velocity of degration is inversely proportional to time constant (represented by capacity value).
   sumvolt[0] -= (sumvolt[0] * 150UL)  / cap.cval_max;
    38a6:	c8 01       	movw	r24, r16
    38a8:	b7 01       	movw	r22, r14
    38aa:	26 e9       	ldi	r18, 0x96	; 150
    38ac:	30 e0       	ldi	r19, 0x00	; 0
    38ae:	40 e0       	ldi	r20, 0x00	; 0
    38b0:	50 e0       	ldi	r21, 0x00	; 0
    38b2:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
    38b6:	20 91 5e 01 	lds	r18, 0x015E
    38ba:	30 91 5f 01 	lds	r19, 0x015F
    38be:	40 91 60 01 	lds	r20, 0x0160
    38c2:	50 91 61 01 	lds	r21, 0x0161
    38c6:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
    38ca:	57 01       	movw	r10, r14
    38cc:	68 01       	movw	r12, r16
    38ce:	a2 1a       	sub	r10, r18
    38d0:	b3 0a       	sbc	r11, r19
    38d2:	c4 0a       	sbc	r12, r20
    38d4:	d5 0a       	sbc	r13, r21
   esr0 = (int8_t)eeprom_read_byte(&EE_ESR_ZERO);
    38d6:	8a ec       	ldi	r24, 0xCA	; 202
    38d8:	91 e0       	ldi	r25, 0x01	; 1
    38da:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__eerd_byte_m168>
    38de:	28 2e       	mov	r2, r24
   sumvolt[0] += (((long)sumvolt[0] * esr0) / ((RR680MI - R_L_VAL) * 10)); // subtract 0.23 Ohm from ESR
    38e0:	40 90 04 01 	lds	r4, 0x0104
    38e4:	50 90 05 01 	lds	r5, 0x0105
    38e8:	68 2f       	mov	r22, r24
    38ea:	77 27       	eor	r23, r23
    38ec:	67 fd       	sbrc	r22, 7
    38ee:	70 95       	com	r23
    38f0:	87 2f       	mov	r24, r23
    38f2:	97 2f       	mov	r25, r23
    38f4:	a6 01       	movw	r20, r12
    38f6:	95 01       	movw	r18, r10
    38f8:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
    38fc:	92 01       	movw	r18, r4
    38fe:	22 0f       	add	r18, r18
    3900:	33 1f       	adc	r19, r19
    3902:	a2 01       	movw	r20, r4
    3904:	e3 e0       	ldi	r30, 0x03	; 3
    3906:	44 0f       	add	r20, r20
    3908:	55 1f       	adc	r21, r21
    390a:	ea 95       	dec	r30
    390c:	e1 f7       	brne	.-8      	; 0x3906 <GetESR+0x3c4>
    390e:	24 0f       	add	r18, r20
    3910:	35 1f       	adc	r19, r21
    3912:	20 5a       	subi	r18, 0xA0	; 160
    3914:	39 40       	sbci	r19, 0x09	; 9
    3916:	40 e0       	ldi	r20, 0x00	; 0
    3918:	50 e0       	ldi	r21, 0x00	; 0
    391a:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__divmodsi4>
    391e:	79 01       	movw	r14, r18
    3920:	8a 01       	movw	r16, r20
    3922:	ea 0c       	add	r14, r10
    3924:	fb 1c       	adc	r15, r11
    3926:	0c 1d       	adc	r16, r12
    3928:	1d 1d       	adc	r17, r13
   if (sumvolt[1] > sumvolt[0]) {
    392a:	29 81       	ldd	r18, Y+1	; 0x01
    392c:	3a 81       	ldd	r19, Y+2	; 0x02
    392e:	4b 81       	ldd	r20, Y+3	; 0x03
    3930:	5c 81       	ldd	r21, Y+4	; 0x04
    3932:	e2 16       	cp	r14, r18
    3934:	f3 06       	cpc	r15, r19
    3936:	04 07       	cpc	r16, r20
    3938:	15 07       	cpc	r17, r21
    393a:	38 f4       	brcc	.+14     	; 0x394a <GetESR+0x408>
      sumvolt[1] -= sumvolt[0];		// difference HighPin - LowPin Voltage with current
    393c:	59 01       	movw	r10, r18
    393e:	6a 01       	movw	r12, r20
    3940:	ae 18       	sub	r10, r14
    3942:	bf 08       	sbc	r11, r15
    3944:	c0 0a       	sbc	r12, r16
    3946:	d1 0a       	sbc	r13, r17
    3948:	03 c0       	rjmp	.+6      	; 0x3950 <GetESR+0x40e>
   } else {
      sumvolt[1] = 0;
    394a:	aa 24       	eor	r10, r10
    394c:	bb 24       	eor	r11, r11
    394e:	65 01       	movw	r12, r10
   }
   sumvolt[2] = (sumvolt[2] * 980) / 1000;	// scale down the voltage without current with 98.0%
    3950:	6d 81       	ldd	r22, Y+5	; 0x05
    3952:	7e 81       	ldd	r23, Y+6	; 0x06
    3954:	8f 81       	ldd	r24, Y+7	; 0x07
    3956:	98 85       	ldd	r25, Y+8	; 0x08
    3958:	24 ed       	ldi	r18, 0xD4	; 212
    395a:	33 e0       	ldi	r19, 0x03	; 3
    395c:	40 e0       	ldi	r20, 0x00	; 0
    395e:	50 e0       	ldi	r21, 0x00	; 0
    3960:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
    3964:	28 ee       	ldi	r18, 0xE8	; 232
    3966:	33 e0       	ldi	r19, 0x03	; 3
    3968:	40 e0       	ldi	r20, 0x00	; 0
    396a:	50 e0       	ldi	r21, 0x00	; 0
    396c:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
    3970:	39 01       	movw	r6, r18
    3972:	4a 01       	movw	r8, r20
    3974:	b2 01       	movw	r22, r4
    3976:	60 59       	subi	r22, 0x90	; 144
    3978:	7a 41       	sbci	r23, 0x1A	; 26
   jj = 0;
   if (sumvolt[1] >= sumvolt[2]) {
    397a:	a2 16       	cp	r10, r18
    397c:	b3 06       	cpc	r11, r19
    397e:	c4 06       	cpc	r12, r20
    3980:	d5 06       	cpc	r13, r21
    3982:	08 f1       	brcs	.+66     	; 0x39c6 <GetESR+0x484>
      // mean voltage at the capacitor is higher with current
      // sumvolt[0] is the sum of voltages at LowPin, caused by output resistance of Port
      // (RR680MI - R_L_VAL) is the port output resistance in 0.1 Ohm units.
      // we scale up the difference voltage with 10 to get 0.01 Ohm units of ESR
      cap.esr = ((sumvolt[1] - sumvolt[2]) * 10 * (unsigned long)(RR680MI - R_L_VAL)) / sumvolt[0];
    3984:	80 e0       	ldi	r24, 0x00	; 0
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	2a e0       	ldi	r18, 0x0A	; 10
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	40 e0       	ldi	r20, 0x00	; 0
    398e:	50 e0       	ldi	r21, 0x00	; 0
    3990:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
    3994:	a6 01       	movw	r20, r12
    3996:	95 01       	movw	r18, r10
    3998:	26 19       	sub	r18, r6
    399a:	37 09       	sbc	r19, r7
    399c:	48 09       	sbc	r20, r8
    399e:	59 09       	sbc	r21, r9
    39a0:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
    39a4:	a8 01       	movw	r20, r16
    39a6:	97 01       	movw	r18, r14
    39a8:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
    39ac:	30 93 67 01 	sts	0x0167, r19
    39b0:	20 93 66 01 	sts	0x0166, r18
      DisplayValue(cap.esr,-2,LCD_CHAR_OMEGA,2);
    39b4:	b9 01       	movw	r22, r18
    39b6:	80 e0       	ldi	r24, 0x00	; 0
    39b8:	90 e0       	ldi	r25, 0x00	; 0
    39ba:	4e ef       	ldi	r20, 0xFE	; 254
    39bc:	24 ef       	ldi	r18, 0xF4	; 244
    39be:	02 e0       	ldi	r16, 0x02	; 2
    39c0:	0e 94 71 09 	call	0x12e2	; 0x12e2 <DisplayValue>
    39c4:	25 c0       	rjmp	.+74     	; 0x3a10 <GetESR+0x4ce>
   } else {
      jj = ((sumvolt[2] - sumvolt[1]) * 10 * (unsigned long)(RR680MI - R_L_VAL)) / sumvolt[0];
    39c6:	80 e0       	ldi	r24, 0x00	; 0
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	2a e0       	ldi	r18, 0x0A	; 10
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	40 e0       	ldi	r20, 0x00	; 0
    39d0:	50 e0       	ldi	r21, 0x00	; 0
    39d2:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
    39d6:	a4 01       	movw	r20, r8
    39d8:	93 01       	movw	r18, r6
    39da:	2a 19       	sub	r18, r10
    39dc:	3b 09       	sbc	r19, r11
    39de:	4c 09       	sbc	r20, r12
    39e0:	5d 09       	sbc	r21, r13
    39e2:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__mulsi3>
    39e6:	a8 01       	movw	r20, r16
    39e8:	97 01       	movw	r18, r14
    39ea:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <__udivmodsi4>
    39ee:	12 2f       	mov	r17, r18
      lcd_data('0');
    39f0:	80 e3       	ldi	r24, 0x30	; 48
    39f2:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
      if ((jj < 100) && (jj > 0)) {
    39f6:	81 2f       	mov	r24, r17
    39f8:	81 50       	subi	r24, 0x01	; 1
    39fa:	83 36       	cpi	r24, 0x63	; 99
    39fc:	48 f4       	brcc	.+18     	; 0x3a10 <GetESR+0x4ce>
         lcd_data('?');			// mark ESR zero correction
    39fe:	8f e3       	ldi	r24, 0x3F	; 63
    3a00:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_data>
         esr0 -= jj;			// correct ESR_ZERO by negative resistance
    3a04:	62 2d       	mov	r22, r2
    3a06:	61 1b       	sub	r22, r17
         eeprom_write_byte((uint8_t *)(&EE_ESR_ZERO), (int8_t)esr0);       // fix new zero offset 
    3a08:	8a ec       	ldi	r24, 0xCA	; 202
    3a0a:	91 e0       	ldi	r25, 0x01	; 1
    3a0c:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__eewr_byte_m168>
//   lcd_line3();
//   DisplayValue(jj,0,' ',4);	// correction for ESR_ZERO
//   DisplayValue(1000+esr0,0,' ',4);	// new ESR_ZERO
#endif
  return;
}
    3a10:	60 96       	adiw	r28, 0x10	; 16
    3a12:	0f b6       	in	r0, 0x3f	; 63
    3a14:	f8 94       	cli
    3a16:	de bf       	out	0x3e, r29	; 62
    3a18:	0f be       	out	0x3f, r0	; 63
    3a1a:	cd bf       	out	0x3d, r28	; 61
    3a1c:	cf 91       	pop	r28
    3a1e:	df 91       	pop	r29
    3a20:	1f 91       	pop	r17
    3a22:	0f 91       	pop	r16
    3a24:	ff 90       	pop	r15
    3a26:	ef 90       	pop	r14
    3a28:	df 90       	pop	r13
    3a2a:	cf 90       	pop	r12
    3a2c:	bf 90       	pop	r11
    3a2e:	af 90       	pop	r10
    3a30:	9f 90       	pop	r9
    3a32:	8f 90       	pop	r8
    3a34:	7f 90       	pop	r7
    3a36:	6f 90       	pop	r6
    3a38:	5f 90       	pop	r5
    3a3a:	4f 90       	pop	r4
    3a3c:	3f 90       	pop	r3
    3a3e:	2f 90       	pop	r2
    3a40:	08 95       	ret

00003a42 <__mulsi3>:
    3a42:	62 9f       	mul	r22, r18
    3a44:	d0 01       	movw	r26, r0
    3a46:	73 9f       	mul	r23, r19
    3a48:	f0 01       	movw	r30, r0
    3a4a:	82 9f       	mul	r24, r18
    3a4c:	e0 0d       	add	r30, r0
    3a4e:	f1 1d       	adc	r31, r1
    3a50:	64 9f       	mul	r22, r20
    3a52:	e0 0d       	add	r30, r0
    3a54:	f1 1d       	adc	r31, r1
    3a56:	92 9f       	mul	r25, r18
    3a58:	f0 0d       	add	r31, r0
    3a5a:	83 9f       	mul	r24, r19
    3a5c:	f0 0d       	add	r31, r0
    3a5e:	74 9f       	mul	r23, r20
    3a60:	f0 0d       	add	r31, r0
    3a62:	65 9f       	mul	r22, r21
    3a64:	f0 0d       	add	r31, r0
    3a66:	99 27       	eor	r25, r25
    3a68:	72 9f       	mul	r23, r18
    3a6a:	b0 0d       	add	r27, r0
    3a6c:	e1 1d       	adc	r30, r1
    3a6e:	f9 1f       	adc	r31, r25
    3a70:	63 9f       	mul	r22, r19
    3a72:	b0 0d       	add	r27, r0
    3a74:	e1 1d       	adc	r30, r1
    3a76:	f9 1f       	adc	r31, r25
    3a78:	bd 01       	movw	r22, r26
    3a7a:	cf 01       	movw	r24, r30
    3a7c:	11 24       	eor	r1, r1
    3a7e:	08 95       	ret

00003a80 <__udivmodqi4>:
    3a80:	99 1b       	sub	r25, r25
    3a82:	79 e0       	ldi	r23, 0x09	; 9
    3a84:	04 c0       	rjmp	.+8      	; 0x3a8e <__udivmodqi4_ep>

00003a86 <__udivmodqi4_loop>:
    3a86:	99 1f       	adc	r25, r25
    3a88:	96 17       	cp	r25, r22
    3a8a:	08 f0       	brcs	.+2      	; 0x3a8e <__udivmodqi4_ep>
    3a8c:	96 1b       	sub	r25, r22

00003a8e <__udivmodqi4_ep>:
    3a8e:	88 1f       	adc	r24, r24
    3a90:	7a 95       	dec	r23
    3a92:	c9 f7       	brne	.-14     	; 0x3a86 <__udivmodqi4_loop>
    3a94:	80 95       	com	r24
    3a96:	08 95       	ret

00003a98 <__udivmodhi4>:
    3a98:	aa 1b       	sub	r26, r26
    3a9a:	bb 1b       	sub	r27, r27
    3a9c:	51 e1       	ldi	r21, 0x11	; 17
    3a9e:	07 c0       	rjmp	.+14     	; 0x3aae <__udivmodhi4_ep>

00003aa0 <__udivmodhi4_loop>:
    3aa0:	aa 1f       	adc	r26, r26
    3aa2:	bb 1f       	adc	r27, r27
    3aa4:	a6 17       	cp	r26, r22
    3aa6:	b7 07       	cpc	r27, r23
    3aa8:	10 f0       	brcs	.+4      	; 0x3aae <__udivmodhi4_ep>
    3aaa:	a6 1b       	sub	r26, r22
    3aac:	b7 0b       	sbc	r27, r23

00003aae <__udivmodhi4_ep>:
    3aae:	88 1f       	adc	r24, r24
    3ab0:	99 1f       	adc	r25, r25
    3ab2:	5a 95       	dec	r21
    3ab4:	a9 f7       	brne	.-22     	; 0x3aa0 <__udivmodhi4_loop>
    3ab6:	80 95       	com	r24
    3ab8:	90 95       	com	r25
    3aba:	bc 01       	movw	r22, r24
    3abc:	cd 01       	movw	r24, r26
    3abe:	08 95       	ret

00003ac0 <__udivmodsi4>:
    3ac0:	a1 e2       	ldi	r26, 0x21	; 33
    3ac2:	1a 2e       	mov	r1, r26
    3ac4:	aa 1b       	sub	r26, r26
    3ac6:	bb 1b       	sub	r27, r27
    3ac8:	fd 01       	movw	r30, r26
    3aca:	0d c0       	rjmp	.+26     	; 0x3ae6 <__udivmodsi4_ep>

00003acc <__udivmodsi4_loop>:
    3acc:	aa 1f       	adc	r26, r26
    3ace:	bb 1f       	adc	r27, r27
    3ad0:	ee 1f       	adc	r30, r30
    3ad2:	ff 1f       	adc	r31, r31
    3ad4:	a2 17       	cp	r26, r18
    3ad6:	b3 07       	cpc	r27, r19
    3ad8:	e4 07       	cpc	r30, r20
    3ada:	f5 07       	cpc	r31, r21
    3adc:	20 f0       	brcs	.+8      	; 0x3ae6 <__udivmodsi4_ep>
    3ade:	a2 1b       	sub	r26, r18
    3ae0:	b3 0b       	sbc	r27, r19
    3ae2:	e4 0b       	sbc	r30, r20
    3ae4:	f5 0b       	sbc	r31, r21

00003ae6 <__udivmodsi4_ep>:
    3ae6:	66 1f       	adc	r22, r22
    3ae8:	77 1f       	adc	r23, r23
    3aea:	88 1f       	adc	r24, r24
    3aec:	99 1f       	adc	r25, r25
    3aee:	1a 94       	dec	r1
    3af0:	69 f7       	brne	.-38     	; 0x3acc <__udivmodsi4_loop>
    3af2:	60 95       	com	r22
    3af4:	70 95       	com	r23
    3af6:	80 95       	com	r24
    3af8:	90 95       	com	r25
    3afa:	9b 01       	movw	r18, r22
    3afc:	ac 01       	movw	r20, r24
    3afe:	bd 01       	movw	r22, r26
    3b00:	cf 01       	movw	r24, r30
    3b02:	08 95       	ret

00003b04 <__divmodsi4>:
    3b04:	97 fb       	bst	r25, 7
    3b06:	09 2e       	mov	r0, r25
    3b08:	05 26       	eor	r0, r21
    3b0a:	0e d0       	rcall	.+28     	; 0x3b28 <__divmodsi4_neg1>
    3b0c:	57 fd       	sbrc	r21, 7
    3b0e:	04 d0       	rcall	.+8      	; 0x3b18 <__divmodsi4_neg2>
    3b10:	d7 df       	rcall	.-82     	; 0x3ac0 <__udivmodsi4>
    3b12:	0a d0       	rcall	.+20     	; 0x3b28 <__divmodsi4_neg1>
    3b14:	00 1c       	adc	r0, r0
    3b16:	38 f4       	brcc	.+14     	; 0x3b26 <__divmodsi4_exit>

00003b18 <__divmodsi4_neg2>:
    3b18:	50 95       	com	r21
    3b1a:	40 95       	com	r20
    3b1c:	30 95       	com	r19
    3b1e:	21 95       	neg	r18
    3b20:	3f 4f       	sbci	r19, 0xFF	; 255
    3b22:	4f 4f       	sbci	r20, 0xFF	; 255
    3b24:	5f 4f       	sbci	r21, 0xFF	; 255

00003b26 <__divmodsi4_exit>:
    3b26:	08 95       	ret

00003b28 <__divmodsi4_neg1>:
    3b28:	f6 f7       	brtc	.-4      	; 0x3b26 <__divmodsi4_exit>
    3b2a:	90 95       	com	r25
    3b2c:	80 95       	com	r24
    3b2e:	70 95       	com	r23
    3b30:	61 95       	neg	r22
    3b32:	7f 4f       	sbci	r23, 0xFF	; 255
    3b34:	8f 4f       	sbci	r24, 0xFF	; 255
    3b36:	9f 4f       	sbci	r25, 0xFF	; 255
    3b38:	08 95       	ret

00003b3a <itoa>:
    3b3a:	fb 01       	movw	r30, r22
    3b3c:	9f 01       	movw	r18, r30
    3b3e:	e8 94       	clt
    3b40:	42 30       	cpi	r20, 0x02	; 2
    3b42:	c4 f0       	brlt	.+48     	; 0x3b74 <itoa+0x3a>
    3b44:	45 32       	cpi	r20, 0x25	; 37
    3b46:	b4 f4       	brge	.+44     	; 0x3b74 <itoa+0x3a>
    3b48:	4a 30       	cpi	r20, 0x0A	; 10
    3b4a:	29 f4       	brne	.+10     	; 0x3b56 <itoa+0x1c>
    3b4c:	97 fb       	bst	r25, 7
    3b4e:	1e f4       	brtc	.+6      	; 0x3b56 <itoa+0x1c>
    3b50:	90 95       	com	r25
    3b52:	81 95       	neg	r24
    3b54:	9f 4f       	sbci	r25, 0xFF	; 255
    3b56:	64 2f       	mov	r22, r20
    3b58:	77 27       	eor	r23, r23
    3b5a:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <__udivmodhi4>
    3b5e:	80 5d       	subi	r24, 0xD0	; 208
    3b60:	8a 33       	cpi	r24, 0x3A	; 58
    3b62:	0c f0       	brlt	.+2      	; 0x3b66 <itoa+0x2c>
    3b64:	89 5d       	subi	r24, 0xD9	; 217
    3b66:	81 93       	st	Z+, r24
    3b68:	cb 01       	movw	r24, r22
    3b6a:	00 97       	sbiw	r24, 0x00	; 0
    3b6c:	a1 f7       	brne	.-24     	; 0x3b56 <itoa+0x1c>
    3b6e:	16 f4       	brtc	.+4      	; 0x3b74 <itoa+0x3a>
    3b70:	5d e2       	ldi	r21, 0x2D	; 45
    3b72:	51 93       	st	Z+, r21
    3b74:	10 82       	st	Z, r1
    3b76:	c9 01       	movw	r24, r18
    3b78:	0c 94 f5 1d 	jmp	0x3bea	; 0x3bea <strrev>

00003b7c <utoa>:
    3b7c:	fb 01       	movw	r30, r22
    3b7e:	9f 01       	movw	r18, r30
    3b80:	42 30       	cpi	r20, 0x02	; 2
    3b82:	74 f0       	brlt	.+28     	; 0x3ba0 <utoa+0x24>
    3b84:	45 32       	cpi	r20, 0x25	; 37
    3b86:	64 f4       	brge	.+24     	; 0x3ba0 <utoa+0x24>
    3b88:	64 2f       	mov	r22, r20
    3b8a:	77 27       	eor	r23, r23
    3b8c:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <__udivmodhi4>
    3b90:	80 5d       	subi	r24, 0xD0	; 208
    3b92:	8a 33       	cpi	r24, 0x3A	; 58
    3b94:	0c f0       	brlt	.+2      	; 0x3b98 <utoa+0x1c>
    3b96:	89 5d       	subi	r24, 0xD9	; 217
    3b98:	81 93       	st	Z+, r24
    3b9a:	cb 01       	movw	r24, r22
    3b9c:	00 97       	sbiw	r24, 0x00	; 0
    3b9e:	a1 f7       	brne	.-24     	; 0x3b88 <utoa+0xc>
    3ba0:	10 82       	st	Z, r1
    3ba2:	c9 01       	movw	r24, r18
    3ba4:	0c 94 f5 1d 	jmp	0x3bea	; 0x3bea <strrev>

00003ba8 <__eerd_byte_m168>:
    3ba8:	f9 99       	sbic	0x1f, 1	; 31
    3baa:	fe cf       	rjmp	.-4      	; 0x3ba8 <__eerd_byte_m168>
    3bac:	92 bd       	out	0x22, r25	; 34
    3bae:	81 bd       	out	0x21, r24	; 33
    3bb0:	f8 9a       	sbi	0x1f, 0	; 31
    3bb2:	99 27       	eor	r25, r25
    3bb4:	80 b5       	in	r24, 0x20	; 32
    3bb6:	08 95       	ret

00003bb8 <__eerd_word_m168>:
    3bb8:	a8 e1       	ldi	r26, 0x18	; 24
    3bba:	b0 e0       	ldi	r27, 0x00	; 0
    3bbc:	42 e0       	ldi	r20, 0x02	; 2
    3bbe:	50 e0       	ldi	r21, 0x00	; 0
    3bc0:	0c 94 07 1e 	jmp	0x3c0e	; 0x3c0e <__eerd_blraw_m168>

00003bc4 <__eewr_byte_m168>:
    3bc4:	26 2f       	mov	r18, r22

00003bc6 <__eewr_r18_m168>:
    3bc6:	f9 99       	sbic	0x1f, 1	; 31
    3bc8:	fe cf       	rjmp	.-4      	; 0x3bc6 <__eewr_r18_m168>
    3bca:	1f ba       	out	0x1f, r1	; 31
    3bcc:	92 bd       	out	0x22, r25	; 34
    3bce:	81 bd       	out	0x21, r24	; 33
    3bd0:	20 bd       	out	0x20, r18	; 32
    3bd2:	0f b6       	in	r0, 0x3f	; 63
    3bd4:	f8 94       	cli
    3bd6:	fa 9a       	sbi	0x1f, 2	; 31
    3bd8:	f9 9a       	sbi	0x1f, 1	; 31
    3bda:	0f be       	out	0x3f, r0	; 63
    3bdc:	01 96       	adiw	r24, 0x01	; 1
    3bde:	08 95       	ret

00003be0 <__eewr_word_m168>:
    3be0:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__eewr_byte_m168>
    3be4:	27 2f       	mov	r18, r23
    3be6:	0c 94 e3 1d 	jmp	0x3bc6	; 0x3bc6 <__eewr_r18_m168>

00003bea <strrev>:
    3bea:	dc 01       	movw	r26, r24
    3bec:	fc 01       	movw	r30, r24
    3bee:	67 2f       	mov	r22, r23
    3bf0:	71 91       	ld	r23, Z+
    3bf2:	77 23       	and	r23, r23
    3bf4:	e1 f7       	brne	.-8      	; 0x3bee <strrev+0x4>
    3bf6:	32 97       	sbiw	r30, 0x02	; 2
    3bf8:	04 c0       	rjmp	.+8      	; 0x3c02 <strrev+0x18>
    3bfa:	7c 91       	ld	r23, X
    3bfc:	6d 93       	st	X+, r22
    3bfe:	70 83       	st	Z, r23
    3c00:	62 91       	ld	r22, -Z
    3c02:	ae 17       	cp	r26, r30
    3c04:	bf 07       	cpc	r27, r31
    3c06:	c8 f3       	brcs	.-14     	; 0x3bfa <strrev+0x10>
    3c08:	08 95       	ret

00003c0a <__eerd_block_m168>:
    3c0a:	dc 01       	movw	r26, r24
    3c0c:	cb 01       	movw	r24, r22

00003c0e <__eerd_blraw_m168>:
    3c0e:	fc 01       	movw	r30, r24
    3c10:	f9 99       	sbic	0x1f, 1	; 31
    3c12:	fe cf       	rjmp	.-4      	; 0x3c10 <__eerd_blraw_m168+0x2>
    3c14:	06 c0       	rjmp	.+12     	; 0x3c22 <__eerd_blraw_m168+0x14>
    3c16:	f2 bd       	out	0x22, r31	; 34
    3c18:	e1 bd       	out	0x21, r30	; 33
    3c1a:	f8 9a       	sbi	0x1f, 0	; 31
    3c1c:	31 96       	adiw	r30, 0x01	; 1
    3c1e:	00 b4       	in	r0, 0x20	; 32
    3c20:	0d 92       	st	X+, r0
    3c22:	41 50       	subi	r20, 0x01	; 1
    3c24:	50 40       	sbci	r21, 0x00	; 0
    3c26:	b8 f7       	brcc	.-18     	; 0x3c16 <__eerd_blraw_m168+0x8>
    3c28:	08 95       	ret

00003c2a <_exit>:
    3c2a:	f8 94       	cli

00003c2c <__stop_program>:
    3c2c:	ff cf       	rjmp	.-2      	; 0x3c2c <__stop_program>
