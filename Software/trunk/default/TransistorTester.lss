
TransistorTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00003c86  00003d3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c86  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000085  00800102  00800102  00003d3c  2**0
                  ALLOC
  3 .eeprom       00000271  00810000  00810000  00003d3c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         00000dbc  00000000  00000000  00003fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001d2  00000000  00000000  00004d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000000c0  00000000  00000000  00004f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000073f  00000000  00000000  00004ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002864  00000000  00000000  0000573d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000007a0  00000000  00000000  00007fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000035a1  00000000  00000000  00008741  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000002a0  00000000  00000000  0000bce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000008c4  00000000  00000000  0000bf84  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001320  00000000  00000000  0000c848  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 0000020d  00000000  00000000  0000db68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 db 17 	jmp	0x2fb6	; 0x2fb6 <__vector_10>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 c4 17 	jmp	0x2f88	; 0x2f88 <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e8       	ldi	r30, 0x86	; 134
      7c:	fc e3       	ldi	r31, 0x3C	; 60
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 30       	cpi	r26, 0x02	; 2
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a2 e0       	ldi	r26, 0x02	; 2
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 38       	cpi	r26, 0x87	; 135
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <main>
      9e:	0c 94 41 1e 	jmp	0x3c82	; 0x3c82 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_data>:
void lcd_space(void) {
   lcd_data(' ');
}

// sends data byte to the LCD 
void lcd_data(unsigned char temp1) {
      a6:	1f 93       	push	r17
      a8:	18 2f       	mov	r17, r24
 lcd_write_data(temp1);		// set RS to 1
      aa:	81 e0       	ldi	r24, 0x01	; 1
      ac:	61 2f       	mov	r22, r17
      ae:	0e 94 18 01 	call	0x230	; 0x230 <_lcd_hw_write>
      b2:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <wait50us>
#ifdef WITH_UART
 switch(temp1) {
      b6:	18 30       	cpi	r17, 0x08	; 8
      b8:	48 f4       	brcc	.+18     	; 0xcc <lcd_data+0x26>
      ba:	16 30       	cpi	r17, 0x06	; 6
      bc:	d0 f4       	brcc	.+52     	; 0xf2 <lcd_data+0x4c>
      be:	12 30       	cpi	r17, 0x02	; 2
      c0:	71 f0       	breq	.+28     	; 0xde <lcd_data+0x38>
      c2:	13 30       	cpi	r17, 0x03	; 3
      c4:	89 f0       	breq	.+34     	; 0xe8 <lcd_data+0x42>
      c6:	11 30       	cpi	r17, 0x01	; 1
      c8:	d1 f4       	brne	.+52     	; 0xfe <lcd_data+0x58>
      ca:	07 c0       	rjmp	.+14     	; 0xda <lcd_data+0x34>
      cc:	14 3e       	cpi	r17, 0xE4	; 228
      ce:	a9 f0       	breq	.+42     	; 0xfa <lcd_data+0x54>
      d0:	14 3f       	cpi	r17, 0xF4	; 244
      d2:	c1 f0       	breq	.+48     	; 0x104 <lcd_data+0x5e>
      d4:	11 3e       	cpi	r17, 0xE1	; 225
      d6:	99 f4       	brne	.+38     	; 0xfe <lcd_data+0x58>
      d8:	0e c0       	rjmp	.+28     	; 0xf6 <lcd_data+0x50>
    case LCD_CHAR_DIODE1:
    	uart_putc('>');
      da:	8e e3       	ldi	r24, 0x3E	; 62
      dc:	06 c0       	rjmp	.+12     	; 0xea <lcd_data+0x44>
    	uart_putc('|');
    	break;
    case LCD_CHAR_DIODE2:
    	uart_putc('|');
      de:	8c e7       	ldi	r24, 0x7C	; 124
      e0:	0e 94 42 14 	call	0x2884	; 0x2884 <uart_putc>
    	uart_putc('<');
      e4:	8c e3       	ldi	r24, 0x3C	; 60
      e6:	0c c0       	rjmp	.+24     	; 0x100 <lcd_data+0x5a>
    	break;
    case LCD_CHAR_CAP:
    	uart_putc('|');
      e8:	8c e7       	ldi	r24, 0x7C	; 124
      ea:	0e 94 42 14 	call	0x2884	; 0x2884 <uart_putc>
    	uart_putc('|');
      ee:	8c e7       	ldi	r24, 0x7C	; 124
      f0:	07 c0       	rjmp	.+14     	; 0x100 <lcd_data+0x5a>
    	break;
    case LCD_CHAR_RESIS1:
    case LCD_CHAR_RESIS2:
    	uart_putc('R');
      f2:	82 e5       	ldi	r24, 0x52	; 82
      f4:	05 c0       	rjmp	.+10     	; 0x100 <lcd_data+0x5a>
    	break;
    case 225:	//ä
    	uart_putc('ä');
      f6:	84 ee       	ldi	r24, 0xE4	; 228
      f8:	03 c0       	rjmp	.+6      	; 0x100 <lcd_data+0x5a>
    	break;
    case 228:	//µ
    	uart_putc('µ');
      fa:	85 eb       	ldi	r24, 0xB5	; 181
      fc:	01 c0       	rjmp	.+2      	; 0x100 <lcd_data+0x5a>
    	break;
    case 244:	//Omega
    	break;
    default:
    	uart_putc(temp1);
      fe:	81 2f       	mov	r24, r17
     100:	0e 94 42 14 	call	0x2884	; 0x2884 <uart_putc>
 }
#endif
}
     104:	1f 91       	pop	r17
     106:	08 95       	ret

00000108 <lcd_space>:
   lcd_data(temp + '1');
}

// send space character to LCD
void lcd_space(void) {
   lcd_data(' ');
     108:	80 e2       	ldi	r24, 0x20	; 32
     10a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
}
     10e:	08 95       	ret

00000110 <lcd_testpin>:
 

// sends numeric character (Pin Number) to the LCD 
// from binary 0 we send ASCII 1 ....
void lcd_testpin(unsigned char temp) {
   lcd_data(temp + '1');
     110:	8f 5c       	subi	r24, 0xCF	; 207
     112:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
}
     116:	08 95       	ret

00000118 <uart_newline>:
}


#ifdef WITH_UART
void uart_newline(void) {
   uart_putc('\r');
     118:	8d e0       	ldi	r24, 0x0D	; 13
     11a:	0e 94 42 14 	call	0x2884	; 0x2884 <uart_putc>
   uart_putc('\n');
     11e:	8a e0       	ldi	r24, 0x0A	; 10
     120:	0e 94 42 14 	call	0x2884	; 0x2884 <uart_putc>
}
     124:	08 95       	ret

00000126 <lcd_command>:
#endif
}
 
// sends a command to the LCD
 
void lcd_command(unsigned char temp1) {
     126:	1f 93       	push	r17
     128:	18 2f       	mov	r17, r24
        lcd_write_cmd(temp1);		// set RS to 0
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	61 2f       	mov	r22, r17
     12e:	0e 94 18 01 	call	0x230	; 0x230 <_lcd_hw_write>
     132:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <wait50us>
#ifdef WITH_UART
	if((temp1 == 0x80) || (temp1 == 0xC0)) {
     136:	10 38       	cpi	r17, 0x80	; 128
     138:	11 f0       	breq	.+4      	; 0x13e <lcd_command+0x18>
     13a:	10 3c       	cpi	r17, 0xC0	; 192
     13c:	11 f4       	brne	.+4      	; 0x142 <lcd_command+0x1c>
		uart_newline();
     13e:	0e 94 8c 00 	call	0x118	; 0x118 <uart_newline>
	}
#endif
}
     142:	1f 91       	pop	r17
     144:	08 95       	ret

00000146 <lcd_clear>:
}
 
// send the command to clear the display 
 
void lcd_clear(void) {
   lcd_command(CLEAR_DISPLAY);
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
   wait_about10ms();
     14c:	82 e0       	ldi	r24, 0x02	; 2
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
#ifdef WITH_UART
   uart_newline();
     154:	0e 94 8c 00 	call	0x118	; 0x118 <uart_newline>
#endif
   lcd_line1();			// set cursor to Line1 Column 1, (only for OLED-Display)
     158:	80 e8       	ldi	r24, 0x80	; 128
     15a:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
}
     15e:	08 95       	ret

00000160 <lcd_init>:
 
// Initialise: 
// Must be called first .
 
void lcd_init(void) {
   wait_about30ms();
     160:	86 e0       	ldi	r24, 0x06	; 6
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
   // to initialise, send 3 times to be shure to be in 8 Bit mode
   lcd_write_init(1);
     168:	80 e8       	ldi	r24, 0x80	; 128
     16a:	60 e3       	ldi	r22, 0x30	; 48
     16c:	0e 94 18 01 	call	0x230	; 0x230 <_lcd_hw_write>
   wait_about5ms();
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
   
   lcd_write_init(1);
     178:	80 e8       	ldi	r24, 0x80	; 128
     17a:	60 e3       	ldi	r22, 0x30	; 48
     17c:	0e 94 18 01 	call	0x230	; 0x230 <_lcd_hw_write>
   wait1ms();
     180:	0e 94 76 14 	call	0x28ec	; 0x28ec <wait1ms>

   lcd_write_init(1);
     184:	80 e8       	ldi	r24, 0x80	; 128
     186:	60 e3       	ldi	r22, 0x30	; 48
     188:	0e 94 18 01 	call	0x230	; 0x230 <_lcd_hw_write>
   wait1ms();
     18c:	0e 94 76 14 	call	0x28ec	; 0x28ec <wait1ms>

   lcd_write_init(0);		// switch to 4 Bit mode
     190:	80 e8       	ldi	r24, 0x80	; 128
     192:	60 e2       	ldi	r22, 0x20	; 32
     194:	0e 94 18 01 	call	0x230	; 0x230 <_lcd_hw_write>
   wait_about10ms();
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>

   // 4Bit / 2 rows / 5x7
   lcd_command(CMD_SetIFOptions | 0x08);
     1a0:	88 e2       	ldi	r24, 0x28	; 40
     1a2:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>

   // Display on / Cursor off / no Blinking
   lcd_command(CMD_SetDisplayAndCursor | 0x04);
     1a6:	8c e0       	ldi	r24, 0x0C	; 12
     1a8:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>

   // increment / no Scroll    
   lcd_command(CMD_SetEntryMode | 0x02);	
     1ac:	86 e0       	ldi	r24, 0x06	; 6
     1ae:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
   lcd_clear();
     1b2:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
}
     1b6:	08 95       	ret

000001b8 <lcd_string>:
#endif
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
     1b8:	ef 92       	push	r14
     1ba:	ff 92       	push	r15
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	e8 2e       	mov	r14, r24
     1c2:	e7 01       	movw	r28, r14
     1c4:	7e 01       	movw	r14, r28
     1c6:	f9 2e       	mov	r15, r25
     1c8:	e7 01       	movw	r28, r14
    while(*data) {
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <lcd_string+0x18>
        lcd_data(*data);
     1cc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
    while(*data) {
     1d0:	89 91       	ld	r24, Y+
     1d2:	88 23       	and	r24, r24
     1d4:	d9 f7       	brne	.-10     	; 0x1cc <lcd_string+0x14>
        lcd_data(*data);
        data++;
    }
}
     1d6:	df 91       	pop	r29
     1d8:	cf 91       	pop	r28
     1da:	ff 90       	pop	r15
     1dc:	ef 90       	pop	r14
     1de:	08 95       	ret

000001e0 <lcd_fix_string>:
   }
}
#endif

//Load string from PGM or EEprom and send to LCD 
void lcd_fix_string(const unsigned char *data) {
     1e0:	cf 93       	push	r28
     1e2:	df 93       	push	r29
     1e4:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = MEM_read_byte(data);
     1e6:	ce 01       	movw	r24, r28
     1e8:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__eerd_byte_m328>
      if((cc==0) || (cc==128)) {
     1ec:	88 23       	and	r24, r24
     1ee:	31 f0       	breq	.+12     	; 0x1fc <lcd_fix_string+0x1c>
     1f0:	80 38       	cpi	r24, 0x80	; 128
     1f2:	21 f0       	breq	.+8      	; 0x1fc <lcd_fix_string+0x1c>
         return;
      }
      lcd_data(cc);
     1f4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
      data++;
     1f8:	21 96       	adiw	r28, 0x01	; 1
   }
     1fa:	f5 cf       	rjmp	.-22     	; 0x1e6 <lcd_fix_string+0x6>
}
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <lcd_fix_customchar>:

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
     202:	0f 93       	push	r16
     204:	1f 93       	push	r17
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	8c 01       	movw	r16, r24
     20c:	c0 e0       	ldi	r28, 0x00	; 0
     20e:	d0 e0       	ldi	r29, 0x00	; 0
    for(uint8_t i=0;i<8;i++) {
        lcd_data(MEM_read_byte(chardata));
     210:	c8 01       	movw	r24, r16
     212:	8c 0f       	add	r24, r28
     214:	9d 1f       	adc	r25, r29
     216:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__eerd_byte_m328>
     21a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
     21e:	21 96       	adiw	r28, 0x01	; 1
   }
}

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
    for(uint8_t i=0;i<8;i++) {
     220:	c8 30       	cpi	r28, 0x08	; 8
     222:	d1 05       	cpc	r29, r1
     224:	a9 f7       	brne	.-22     	; 0x210 <lcd_fix_customchar+0xe>
        lcd_data(MEM_read_byte(chardata));
        chardata++;
    }
}
     226:	df 91       	pop	r29
     228:	cf 91       	pop	r28
     22a:	1f 91       	pop	r17
     22c:	0f 91       	pop	r16
     22e:	08 95       	ret

00000230 <_lcd_hw_write>:
     230:	5d 9a       	sbi	0x0b, 5	; 11
     232:	55 9a       	sbi	0x0a, 5	; 10
     234:	5c 98       	cbi	0x0b, 4	; 11
     236:	54 9a       	sbi	0x0a, 4	; 10
     238:	80 fd       	sbrc	r24, 0
     23a:	5c 9a       	sbi	0x0b, 4	; 11
     23c:	58 98       	cbi	0x0b, 0	; 11
     23e:	59 98       	cbi	0x0b, 1	; 11
     240:	5a 98       	cbi	0x0b, 2	; 11
     242:	5b 98       	cbi	0x0b, 3	; 11
     244:	64 fd       	sbrc	r22, 4
     246:	58 9a       	sbi	0x0b, 0	; 11
     248:	50 9a       	sbi	0x0a, 0	; 10
     24a:	65 fd       	sbrc	r22, 5
     24c:	59 9a       	sbi	0x0b, 1	; 11
     24e:	51 9a       	sbi	0x0a, 1	; 10
     250:	66 fd       	sbrc	r22, 6
     252:	5a 9a       	sbi	0x0b, 2	; 11
     254:	52 9a       	sbi	0x0a, 2	; 10
     256:	67 fd       	sbrc	r22, 7
     258:	5b 9a       	sbi	0x0b, 3	; 11
     25a:	53 9a       	sbi	0x0a, 3	; 10
     25c:	00 00       	nop
     25e:	5d 98       	cbi	0x0b, 5	; 11
     260:	0e 94 85 14 	call	0x290a	; 0x290a <wait1us>
     264:	87 fd       	sbrc	r24, 7
     266:	11 c0       	rjmp	.+34     	; 0x28a <_lcd_hw_write_exit>
     268:	5d 9a       	sbi	0x0b, 5	; 11
     26a:	58 98       	cbi	0x0b, 0	; 11
     26c:	59 98       	cbi	0x0b, 1	; 11
     26e:	5a 98       	cbi	0x0b, 2	; 11
     270:	5b 98       	cbi	0x0b, 3	; 11
     272:	60 fd       	sbrc	r22, 0
     274:	58 9a       	sbi	0x0b, 0	; 11
     276:	61 fd       	sbrc	r22, 1
     278:	59 9a       	sbi	0x0b, 1	; 11
     27a:	62 fd       	sbrc	r22, 2
     27c:	5a 9a       	sbi	0x0b, 2	; 11
     27e:	63 fd       	sbrc	r22, 3
     280:	5b 9a       	sbi	0x0b, 3	; 11
     282:	00 00       	nop
     284:	5d 98       	cbi	0x0b, 5	; 11
     286:	0e 94 85 14 	call	0x290a	; 0x290a <wait1us>

0000028a <_lcd_hw_write_exit>:
     28a:	08 95       	ret

0000028c <__vector_7>:
#define MAIN_C
#include "Transistortester.h"

#ifndef INHIBIT_SLEEP_MODE
  // prepare sleep mode
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
     28c:	18 95       	reti

0000028e <__vector_21>:
  EMPTY_INTERRUPT(ADC_vect);
     28e:	18 95       	reti

00000290 <EntladePins>:
   R_DDR &= ~PinToCharge;	// switch back to input
   R_PORT &= ~PinToCharge;	// no Pull up
}

// first discharge any charge of capacitors
void EntladePins() {
     290:	af 92       	push	r10
     292:	bf 92       	push	r11
     294:	cf 92       	push	r12
     296:	df 92       	push	r13
     298:	ef 92       	push	r14
     29a:	ff 92       	push	r15
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	3a e0       	ldi	r19, 0x0A	; 10
     2a6:	c3 2e       	mov	r12, r19
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     2a8:	28 e0       	ldi	r18, 0x08	; 8
     2aa:	d2 2e       	mov	r13, r18
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     R_PORT = 0;			// R-outputs auf 0
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     2ac:	9a e2       	ldi	r25, 0x2A	; 42
     2ae:	a9 2e       	mov	r10, r25
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     2b0:	85 e1       	ldi	r24, 0x15	; 21
     2b2:	b8 2e       	mov	r11, r24
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     2b4:	d7 b8       	out	0x07, r13	; 7
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     2b6:	d8 b8       	out	0x08, r13	; 8
     R_PORT = 0;			// R-outputs auf 0
     2b8:	15 b8       	out	0x05, r1	; 5
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     2ba:	a4 b8       	out	0x04, r10	; 4
     adcmv[0] = W5msReadADC(PC0);	// which voltage has Pin 1?
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
     2c2:	8c 01       	movw	r16, r24
     adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
     2ca:	ec 01       	movw	r28, r24
     adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     2cc:	82 e0       	ldi	r24, 0x02	; 2
     2ce:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
     if ((PartFound == PART_CELL) || (adcmv[0] < CAP_EMPTY_LEVEL) & (adcmv[1] < CAP_EMPTY_LEVEL) & (adcmv[2] < CAP_EMPTY_LEVEL)) {
     2d2:	20 91 07 01 	lds	r18, 0x0107
     2d6:	28 30       	cpi	r18, 0x08	; 8
     2d8:	c1 f0       	breq	.+48     	; 0x30a <EntladePins+0x7a>
     2da:	41 e0       	ldi	r20, 0x01	; 1
     2dc:	c4 30       	cpi	r28, 0x04	; 4
     2de:	d1 05       	cpc	r29, r1
     2e0:	08 f0       	brcs	.+2      	; 0x2e4 <EntladePins+0x54>
     2e2:	40 e0       	ldi	r20, 0x00	; 0
     2e4:	21 e0       	ldi	r18, 0x01	; 1
     2e6:	04 30       	cpi	r16, 0x04	; 4
     2e8:	11 05       	cpc	r17, r1
     2ea:	08 f0       	brcs	.+2      	; 0x2ee <EntladePins+0x5e>
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	42 23       	and	r20, r18
     2f0:	50 e0       	ldi	r21, 0x00	; 0
     2f2:	21 e0       	ldi	r18, 0x01	; 1
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	84 30       	cpi	r24, 0x04	; 4
     2f8:	91 05       	cpc	r25, r1
     2fa:	10 f0       	brcs	.+4      	; 0x300 <EntladePins+0x70>
     2fc:	20 e0       	ldi	r18, 0x00	; 0
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	24 23       	and	r18, r20
     302:	35 23       	and	r19, r21
     304:	21 15       	cp	r18, r1
     306:	31 05       	cpc	r19, r1
     308:	21 f0       	breq	.+8      	; 0x312 <EntladePins+0x82>
        ADC_DDR = TXD_MSK;		// switch all ADC-Pins to input
     30a:	88 e0       	ldi	r24, 0x08	; 8
     30c:	87 b9       	out	0x07, r24	; 7
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
     30e:	14 b8       	out	0x04, r1	; 4
        return;			// all is discharged
     310:	4f c0       	rjmp	.+158    	; 0x3b0 <EntladePins+0x120>
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
     312:	23 e0       	ldi	r18, 0x03	; 3
     314:	08 3e       	cpi	r16, 0xE8	; 232
     316:	12 07       	cpc	r17, r18
     318:	10 f0       	brcs	.+4      	; 0x31e <EntladePins+0x8e>
  uint8_t lop_cnt;		// loop counter
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     31a:	28 e0       	ldi	r18, 0x08	; 8
     31c:	01 c0       	rjmp	.+2      	; 0x320 <EntladePins+0x90>
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
        return;			// all is discharged
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
        adc_gnd |= (1<<PC0);	//Pin 1 directly to GND
     31e:	29 e0       	ldi	r18, 0x09	; 9
     }
     if (adcmv[1] < 1000) {
     320:	33 e0       	ldi	r19, 0x03	; 3
     322:	c8 3e       	cpi	r28, 0xE8	; 232
     324:	d3 07       	cpc	r29, r19
     326:	08 f4       	brcc	.+2      	; 0x32a <EntladePins+0x9a>
        adc_gnd |= (1<<PC1);	//Pin 2 directly to GND
     328:	22 60       	ori	r18, 0x02	; 2
     }
     if (adcmv[2] < 1000) {
     32a:	33 e0       	ldi	r19, 0x03	; 3
     32c:	88 3e       	cpi	r24, 0xE8	; 232
     32e:	93 07       	cpc	r25, r19
     330:	08 f4       	brcc	.+2      	; 0x334 <EntladePins+0xa4>
        adc_gnd |= (1<<PC2);	//Pin 3 directly to  GND
     332:	24 60       	ori	r18, 0x04	; 4
     }
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time
     334:	27 b9       	out	0x07, r18	; 7

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     336:	b4 b8       	out	0x04, r11	; 4
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     338:	c0 e0       	ldi	r28, 0x00	; 0
     33a:	d0 e0       	ldi	r29, 0x00	; 0
        wdt_reset();
     33c:	a8 95       	wdr
        adcmv[0] = W20msReadADC(PC0);	// which voltage has Pin 1?
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	0e 94 06 1b 	call	0x360c	; 0x360c <W20msReadADC>
     344:	7c 01       	movw	r14, r24
        adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
     34c:	8c 01       	movw	r16, r24
        adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     34e:	82 e0       	ldi	r24, 0x02	; 2
     350:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
        if (adcmv[0] < 1300) {
     354:	24 e1       	ldi	r18, 0x14	; 20
     356:	e2 16       	cp	r14, r18
     358:	25 e0       	ldi	r18, 0x05	; 5
     35a:	f2 06       	cpc	r15, r18
     35c:	08 f4       	brcc	.+2      	; 0x360 <EntladePins+0xd0>
           ADC_DDR |= (1<<PC0);	// below 1.3V , switch directly with ADC-Port to GND
     35e:	38 9a       	sbi	0x07, 0	; 7
        }
        if (adcmv[1] < 1300) {
     360:	35 e0       	ldi	r19, 0x05	; 5
     362:	04 31       	cpi	r16, 0x14	; 20
     364:	13 07       	cpc	r17, r19
     366:	08 f4       	brcc	.+2      	; 0x36a <EntladePins+0xda>
           ADC_DDR |= (1<<PC1);	// below 1.3V, switch directly with ADC-Port to GND
     368:	39 9a       	sbi	0x07, 1	; 7
        }
        if (adcmv[2] < 1300) {
     36a:	25 e0       	ldi	r18, 0x05	; 5
     36c:	84 31       	cpi	r24, 0x14	; 20
     36e:	92 07       	cpc	r25, r18
     370:	08 f4       	brcc	.+2      	; 0x374 <EntladePins+0xe4>
           ADC_DDR |= (1<<PC2);	// below 1.3V, switch directly with ADC-Port to GND
     372:	3a 9a       	sbi	0x07, 2	; 7
        }
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
     374:	36 e0       	ldi	r19, 0x06	; 6
     376:	e3 16       	cp	r14, r19
     378:	f1 04       	cpc	r15, r1
     37a:	30 f4       	brcc	.+12     	; 0x388 <EntladePins+0xf8>
     37c:	06 30       	cpi	r16, 0x06	; 6
     37e:	11 05       	cpc	r17, r1
     380:	18 f4       	brcc	.+6      	; 0x388 <EntladePins+0xf8>
     382:	86 30       	cpi	r24, 0x06	; 6
     384:	91 05       	cpc	r25, r1
     386:	38 f0       	brcs	.+14     	; 0x396 <EntladePins+0x106>

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     388:	21 96       	adiw	r28, 0x01	; 1
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	c4 3f       	cpi	r28, 0xF4	; 244
     38e:	d8 07       	cpc	r29, r24
     390:	a9 f6       	brne	.-86     	; 0x33c <EntladePins+0xac>
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
           break;
        }
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
     392:	d0 92 07 01 	sts	0x0107, r13

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     396:	00 e0       	ldi	r16, 0x00	; 0
     398:	10 e0       	ldi	r17, 0x00	; 0
     39a:	04 c0       	rjmp	.+8      	; 0x3a4 <EntladePins+0x114>
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     39c:	0e 94 76 14 	call	0x28ec	; 0x28ec <wait1ms>
     3a0:	0f 5f       	subi	r16, 0xFF	; 255
     3a2:	1f 4f       	sbci	r17, 0xFF	; 255
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
     3a4:	0c 17       	cp	r16, r28
     3a6:	1d 07       	cpc	r17, r29
     3a8:	c8 f3       	brcs	.-14     	; 0x39c <EntladePins+0x10c>
     3aa:	ca 94       	dec	r12
  unsigned int clr_cnt;		// Clear Counter
  uint8_t lop_cnt;		// loop counter
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     3ac:	09 f0       	breq	.+2      	; 0x3b0 <EntladePins+0x120>
     3ae:	82 cf       	rjmp	.-252    	; 0x2b4 <EntladePins+0x24>
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     }
  } // end while
 }
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	ff 90       	pop	r15
     3ba:	ef 90       	pop	r14
     3bc:	df 90       	pop	r13
     3be:	cf 90       	pop	r12
     3c0:	bf 90       	pop	r11
     3c2:	af 90       	pop	r10
     3c4:	08 95       	ret

000003c6 <RefVoltage>:



#ifdef AUTO_RH
void RefVoltage(void) {
     3c6:	ff 92       	push	r15
     3c8:	0f 93       	push	r16
     3ca:	1f 93       	push	r17
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;

  #ifdef AUTO_CAL
  referenz = ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset));
     3d0:	87 e6       	ldi	r24, 0x67	; 103
     3d2:	92 e0       	ldi	r25, 0x02	; 2
     3d4:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__eerd_word_m328>
     3d8:	20 91 3f 01 	lds	r18, 0x013F
     3dc:	30 91 40 01 	lds	r19, 0x0140
     3e0:	28 0f       	add	r18, r24
     3e2:	39 1f       	adc	r19, r25
  #else
  referenz = ref_mv + REF_C_KORR;
  #endif
  if (referenz >= Ref_Tab_Beginn) {
     3e4:	83 e0       	ldi	r24, 0x03	; 3
     3e6:	28 3e       	cpi	r18, 0xE8	; 232
     3e8:	38 07       	cpc	r19, r24
     3ea:	20 f0       	brcs	.+8      	; 0x3f4 <RefVoltage+0x2e>
     referenz -= Ref_Tab_Beginn;
     3ec:	c9 01       	movw	r24, r18
     3ee:	88 5e       	subi	r24, 0xE8	; 232
     3f0:	93 40       	sbci	r25, 0x03	; 3
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <RefVoltage+0x32>
  } else  {
     referenz = 0;		// limit to begin of table
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = referenz / Ref_Tab_Abstand;
     3f8:	62 e3       	ldi	r22, 0x32	; 50
     3fa:	70 e0       	ldi	r23, 0x00	; 0
     3fc:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__udivmodhi4>
  tabres = referenz % Ref_Tab_Abstand;
     400:	f8 2e       	mov	r15, r24
  tabres = Ref_Tab_Abstand-tabres;
  if (tabind > 7) {
     tabind = 7;		// limit to end of table
  }
  // interpolate the table of factors
  y1 = MEM_read_word(&RHtab[tabind]);
     402:	68 30       	cpi	r22, 0x08	; 8
     404:	08 f0       	brcs	.+2      	; 0x408 <RefVoltage+0x42>
     406:	67 e0       	ldi	r22, 0x07	; 7
     408:	c6 2f       	mov	r28, r22
     40a:	d0 e0       	ldi	r29, 0x00	; 0
     40c:	ce 01       	movw	r24, r28
     40e:	88 0f       	add	r24, r24
     410:	99 1f       	adc	r25, r25
     412:	8a 54       	subi	r24, 0x4A	; 74
     414:	9f 4f       	sbci	r25, 0xFF	; 255
     416:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__eerd_word_m328>
     41a:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RHtab[tabind+1]);
     41c:	ce 01       	movw	r24, r28
     41e:	88 0f       	add	r24, r24
     420:	99 1f       	adc	r25, r25
     422:	88 54       	subi	r24, 0x48	; 72
     424:	9f 4f       	sbci	r25, 0xFF	; 255
     426:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__eerd_word_m328>
     42a:	9c 01       	movw	r18, r24
  } else  {
     referenz = 0;		// limit to begin of table
  }
  tabind = referenz / Ref_Tab_Abstand;
  tabres = referenz % Ref_Tab_Abstand;
  tabres = Ref_Tab_Abstand-tabres;
     42c:	42 e3       	ldi	r20, 0x32	; 50
     42e:	4f 19       	sub	r20, r15
  }
  // interpolate the table of factors
  y1 = MEM_read_word(&RHtab[tabind]);
  y2 = MEM_read_word(&RHtab[tabind+1]);
  // RHmultip is the interpolated factor to compute capacity from load time with 470k
  RHmultip = ((y1 - y2) * tabres + (Ref_Tab_Abstand/2)) / Ref_Tab_Abstand + y2;
     430:	50 e0       	ldi	r21, 0x00	; 0
     432:	08 1b       	sub	r16, r24
     434:	19 0b       	sbc	r17, r25
     436:	40 9f       	mul	r20, r16
     438:	c0 01       	movw	r24, r0
     43a:	41 9f       	mul	r20, r17
     43c:	90 0d       	add	r25, r0
     43e:	50 9f       	mul	r21, r16
     440:	90 0d       	add	r25, r0
     442:	11 24       	eor	r1, r1
     444:	49 96       	adiw	r24, 0x19	; 25
     446:	62 e3       	ldi	r22, 0x32	; 50
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__udivmodhi4>
     44e:	62 0f       	add	r22, r18
     450:	73 1f       	adc	r23, r19
     452:	70 93 01 01 	sts	0x0101, r23
     456:	60 93 00 01 	sts	0x0100, r22
 }
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	ff 90       	pop	r15
     464:	08 95       	ret

00000466 <lcd_clear_line>:
#endif

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
     466:	1f 93       	push	r17
     468:	14 e1       	ldi	r17, 0x14	; 20
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    lcd_space();
     46a:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>
     46e:	11 50       	subi	r17, 0x01	; 1

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
     470:	e1 f7       	brne	.-8      	; 0x46a <lcd_clear_line+0x4>
    lcd_space();
 }
}
     472:	1f 91       	pop	r17
     474:	08 95       	ret

00000476 <DisplayValue>:
 *    e.g: p = 10^-12 -> -12
 *  - unit character (0 = none)
 *  digits = 2, 3 or 4
 */
void DisplayValue(unsigned long Value, int8_t Exponent, unsigned char Unit, unsigned char digits)
{
     476:	2f 92       	push	r2
     478:	3f 92       	push	r3
     47a:	4f 92       	push	r4
     47c:	5f 92       	push	r5
     47e:	7f 92       	push	r7
     480:	8f 92       	push	r8
     482:	9f 92       	push	r9
     484:	af 92       	push	r10
     486:	bf 92       	push	r11
     488:	cf 92       	push	r12
     48a:	df 92       	push	r13
     48c:	ef 92       	push	r14
     48e:	ff 92       	push	r15
     490:	0f 93       	push	r16
     492:	1f 93       	push	r17
     494:	df 93       	push	r29
     496:	cf 93       	push	r28
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
     49c:	2f 97       	sbiw	r28, 0x0f	; 15
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	de bf       	out	0x3e, r29	; 62
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	cd bf       	out	0x3d, r28	; 61
     4a8:	6b 01       	movw	r12, r22
     4aa:	7c 01       	movw	r14, r24
     4ac:	14 2f       	mov	r17, r20
     4ae:	72 2e       	mov	r7, r18
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
     4b0:	03 30       	cpi	r16, 0x03	; 3
     4b2:	29 f0       	breq	.+10     	; 0x4be <DisplayValue+0x48>
  if (digits == 4) Limit = 10000;
     4b4:	04 30       	cpi	r16, 0x04	; 4
     4b6:	31 f0       	breq	.+12     	; 0x4c4 <DisplayValue+0x4e>
  uint8_t           Offset;		/* exponent of offset to next 10^3 step */
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
     4b8:	84 e6       	ldi	r24, 0x64	; 100
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	14 c0       	rjmp	.+40     	; 0x4e6 <DisplayValue+0x70>
  if (digits == 3) Limit = 1000;
     4be:	88 ee       	ldi	r24, 0xE8	; 232
     4c0:	93 e0       	ldi	r25, 0x03	; 3
     4c2:	11 c0       	rjmp	.+34     	; 0x4e6 <DisplayValue+0x70>
  if (digits == 4) Limit = 10000;
     4c4:	80 e1       	ldi	r24, 0x10	; 16
     4c6:	97 e2       	ldi	r25, 0x27	; 39
     4c8:	0e c0       	rjmp	.+28     	; 0x4e6 <DisplayValue+0x70>
  while (Value >= Limit)
  {
    Value += 5;				/* for automagic rounding */
     4ca:	c7 01       	movw	r24, r14
     4cc:	b6 01       	movw	r22, r12
     4ce:	6b 5f       	subi	r22, 0xFB	; 251
     4d0:	7f 4f       	sbci	r23, 0xFF	; 255
     4d2:	8f 4f       	sbci	r24, 0xFF	; 255
     4d4:	9f 4f       	sbci	r25, 0xFF	; 255
    Value = Value / 10;			/* scale down by 10^1 */
     4d6:	a5 01       	movw	r20, r10
     4d8:	94 01       	movw	r18, r8
     4da:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
     4de:	69 01       	movw	r12, r18
     4e0:	7a 01       	movw	r14, r20
    Exponent++;				/* increase exponent by 1 */
     4e2:	1f 5f       	subi	r17, 0xFF	; 255
     4e4:	08 c0       	rjmp	.+16     	; 0x4f6 <DisplayValue+0x80>


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
  if (digits == 4) Limit = 10000;
  while (Value >= Limit)
     4e6:	1c 01       	movw	r2, r24
     4e8:	44 24       	eor	r4, r4
     4ea:	55 24       	eor	r5, r5
  {
    Value += 5;				/* for automagic rounding */
    Value = Value / 10;			/* scale down by 10^1 */
     4ec:	6a e0       	ldi	r22, 0x0A	; 10
     4ee:	86 2e       	mov	r8, r22
     4f0:	91 2c       	mov	r9, r1
     4f2:	a1 2c       	mov	r10, r1
     4f4:	b1 2c       	mov	r11, r1


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
  if (digits == 4) Limit = 10000;
  while (Value >= Limit)
     4f6:	c2 14       	cp	r12, r2
     4f8:	d3 04       	cpc	r13, r3
     4fa:	e4 04       	cpc	r14, r4
     4fc:	f5 04       	cpc	r15, r5
     4fe:	28 f7       	brcc	.-54     	; 0x4ca <DisplayValue+0x54>


  /*
   *  determine prefix
   */
  Length = Exponent + 12;
     500:	81 2f       	mov	r24, r17
     502:	84 5f       	subi	r24, 0xF4	; 244
     504:	83 31       	cpi	r24, 0x13	; 19
     506:	08 f0       	brcs	.+2      	; 0x50a <DisplayValue+0x94>
     508:	82 e1       	ldi	r24, 0x12	; 18
  if (Length <  0) Length = 0;		/* Limit to minimum prefix */
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
  Index = Length / 3;
     50a:	23 e0       	ldi	r18, 0x03	; 3
  Offset = Length % 3;
     50c:	62 2f       	mov	r22, r18
     50e:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <__udivmodqi4>
     512:	19 2f       	mov	r17, r25
    if (Offset > 0)
     514:	99 23       	and	r25, r25
     516:	19 f0       	breq	.+6      	; 0x51e <DisplayValue+0xa8>
    {
      Index++;				/* adjust index for exponent offset, take next prefix */
     518:	8f 5f       	subi	r24, 0xFF	; 255
      Offset = 3 - Offset;		/* reverse value (1 or 2) */
     51a:	29 1b       	sub	r18, r25
     51c:	12 2f       	mov	r17, r18
    }
  Prefix = MEM_read_byte((uint8_t *)(&PrefixTab[Index]));   /* look up prefix in table */
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	80 5a       	subi	r24, 0xA0	; 160
     522:	9d 4f       	sbci	r25, 0xFD	; 253
     524:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__eerd_byte_m328>
     528:	b8 2e       	mov	r11, r24
  /*
   *  display value
   */

  /* convert value into string */
  utoa((unsigned int)Value, OutBuffer, 10);
     52a:	c6 01       	movw	r24, r12
     52c:	6e 01       	movw	r12, r28
     52e:	08 94       	sec
     530:	c1 1c       	adc	r12, r1
     532:	d1 1c       	adc	r13, r1
     534:	b6 01       	movw	r22, r12
     536:	4a e0       	ldi	r20, 0x0A	; 10
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <utoa>
  Length = strlen(OutBuffer);
     53e:	f6 01       	movw	r30, r12
     540:	01 90       	ld	r0, Z+
     542:	00 20       	and	r0, r0
     544:	e9 f7       	brne	.-6      	; 0x540 <DisplayValue+0xca>
     546:	31 97       	sbiw	r30, 0x01	; 1
     548:	2e 2e       	mov	r2, r30
     54a:	2c 18       	sub	r2, r12

  /* position of dot */
  Exponent = Length - Offset;		/* calculate position */
     54c:	82 2c       	mov	r8, r2
     54e:	81 1a       	sub	r8, r17

  if (Exponent <= 0)			/* we have to prepend "0." */
     550:	18 14       	cp	r1, r8
     552:	44 f0       	brlt	.+16     	; 0x564 <DisplayValue+0xee>
  {
    /* 0: factor 10 / -1: factor 100 */
//    lcd_data('0');
    lcd_data('.');
     554:	8e e2       	ldi	r24, 0x2E	; 46
     556:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
    if (Exponent < 0) lcd_data('0');	/* extra 0 for factor 100 */
     55a:	88 20       	and	r8, r8
     55c:	19 f0       	breq	.+6      	; 0x564 <DisplayValue+0xee>
     55e:	80 e3       	ldi	r24, 0x30	; 48
     560:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
  }

  if (Offset == 0) Exponent = -1;	/* disable dot if not needed */
     564:	11 23       	and	r17, r17
     566:	11 f4       	brne	.+4      	; 0x56c <DisplayValue+0xf6>
     568:	88 24       	eor	r8, r8
     56a:	8a 94       	dec	r8
     56c:	6e 01       	movw	r12, r28
     56e:	08 94       	sec
     570:	c1 1c       	adc	r12, r1
     572:	d1 1c       	adc	r13, r1
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     574:	00 e0       	ldi	r16, 0x00	; 0
     576:	10 e0       	ldi	r17, 0x00	; 0
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    Index++;				/* next one */
    if (Index == Exponent) {
     578:	99 24       	eor	r9, r9
     57a:	87 fc       	sbrc	r8, 7
     57c:	90 94       	com	r9
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     57e:	0d c0       	rjmp	.+26     	; 0x59a <DisplayValue+0x124>
  {
    lcd_data(OutBuffer[Index]);		/* display char */
     580:	0f 5f       	subi	r16, 0xFF	; 255
     582:	1f 4f       	sbci	r17, 0xFF	; 255
     584:	f6 01       	movw	r30, r12
     586:	81 91       	ld	r24, Z+
     588:	6f 01       	movw	r12, r30
     58a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
    Index++;				/* next one */
    if (Index == Exponent) {
     58e:	08 15       	cp	r16, r8
     590:	19 05       	cpc	r17, r9
     592:	19 f4       	brne	.+6      	; 0x59a <DisplayValue+0x124>
      lcd_data('.');			/* display dot */
     594:	8e e2       	ldi	r24, 0x2E	; 46
     596:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     59a:	02 15       	cp	r16, r2
     59c:	88 f3       	brcs	.-30     	; 0x580 <DisplayValue+0x10a>
      lcd_data('.');			/* display dot */
    }
  }

  /* display prefix and unit */
  if (Prefix != 0) lcd_data(Prefix);
     59e:	bb 20       	and	r11, r11
     5a0:	19 f0       	breq	.+6      	; 0x5a8 <DisplayValue+0x132>
     5a2:	8b 2d       	mov	r24, r11
     5a4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
  if (Unit) lcd_data(Unit);
     5a8:	77 20       	and	r7, r7
     5aa:	19 f0       	breq	.+6      	; 0x5b2 <DisplayValue+0x13c>
     5ac:	87 2d       	mov	r24, r7
     5ae:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
}
     5b2:	2f 96       	adiw	r28, 0x0f	; 15
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	f8 94       	cli
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	cd bf       	out	0x3d, r28	; 61
     5be:	cf 91       	pop	r28
     5c0:	df 91       	pop	r29
     5c2:	1f 91       	pop	r17
     5c4:	0f 91       	pop	r16
     5c6:	ff 90       	pop	r15
     5c8:	ef 90       	pop	r14
     5ca:	df 90       	pop	r13
     5cc:	cf 90       	pop	r12
     5ce:	bf 90       	pop	r11
     5d0:	af 90       	pop	r10
     5d2:	9f 90       	pop	r9
     5d4:	8f 90       	pop	r8
     5d6:	7f 90       	pop	r7
     5d8:	5f 90       	pop	r5
     5da:	4f 90       	pop	r4
     5dc:	3f 90       	pop	r3
     5de:	2f 90       	pop	r2
     5e0:	08 95       	ret

000005e2 <RvalOut>:
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
      lcd_space();
   }
}

void RvalOut(uint8_t ii) {	
     5e2:	0f 93       	push	r16
   // output of resistor value

   DisplayValue(resis[ii].rx,-1,LCD_CHAR_OMEGA,4);
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	2b e0       	ldi	r18, 0x0B	; 11
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	82 9f       	mul	r24, r18
     5ec:	f0 01       	movw	r30, r0
     5ee:	83 9f       	mul	r24, r19
     5f0:	f0 0d       	add	r31, r0
     5f2:	92 9f       	mul	r25, r18
     5f4:	f0 0d       	add	r31, r0
     5f6:	11 24       	eor	r1, r1
     5f8:	e8 5e       	subi	r30, 0xE8	; 232
     5fa:	fe 4f       	sbci	r31, 0xFE	; 254
     5fc:	60 81       	ld	r22, Z
     5fe:	71 81       	ldd	r23, Z+1	; 0x01
     600:	82 81       	ldd	r24, Z+2	; 0x02
     602:	93 81       	ldd	r25, Z+3	; 0x03
     604:	4f ef       	ldi	r20, 0xFF	; 255
     606:	24 ef       	ldi	r18, 0xF4	; 244
     608:	04 e0       	ldi	r16, 0x04	; 4
     60a:	0e 94 3b 02 	call	0x476	; 0x476 <DisplayValue>
   lcd_space();
     60e:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>
 }
     612:	0f 91       	pop	r16
     614:	08 95       	ret

00000616 <mVAusgabe>:
   lcd_line2(); 				//2. row
   lcd_fix_string(Uf_str);			//"Uf="
   mVAusgabe(bcdnum >> 4);
   mVAusgabe(bcdnum & 0x0f);
}
void mVAusgabe(uint8_t nn) {
     616:	0f 93       	push	r16
   if (nn < 3) {
     618:	83 30       	cpi	r24, 0x03	; 3
     61a:	98 f4       	brcc	.+38     	; 0x642 <mVAusgabe+0x2c>
      // Output in mV units
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
     61c:	e8 2f       	mov	r30, r24
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	ee 0f       	add	r30, r30
     622:	ff 1f       	adc	r31, r31
     624:	ee 0f       	add	r30, r30
     626:	ff 1f       	adc	r31, r31
     628:	e1 59       	subi	r30, 0x91	; 145
     62a:	fe 4f       	sbci	r31, 0xFE	; 254
     62c:	62 81       	ldd	r22, Z+2	; 0x02
     62e:	73 81       	ldd	r23, Z+3	; 0x03
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	4d ef       	ldi	r20, 0xFD	; 253
     636:	26 e5       	ldi	r18, 0x56	; 86
     638:	03 e0       	ldi	r16, 0x03	; 3
     63a:	0e 94 3b 02 	call	0x476	; 0x476 <DisplayValue>
      lcd_space();
     63e:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>
   }
}
     642:	0f 91       	pop	r16
     644:	08 95       	ret

00000646 <UfAusgabe>:
// output of flux voltage for 1-2 diodes in row 2
// bcdnum = Numbers of both Diodes:
// higher 4 Bit  number of first Diode
// lower 4 Bit  number of second Diode (Structure diodes[nn])
// if number >= 3  no output is done
void UfAusgabe(uint8_t bcdnum) {
     646:	1f 93       	push	r17
     648:	18 2f       	mov	r17, r24

   lcd_line2(); 				//2. row
     64a:	80 ec       	ldi	r24, 0xC0	; 192
     64c:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
   lcd_fix_string(Uf_str);			//"Uf="
     650:	84 e8       	ldi	r24, 0x84	; 132
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
   mVAusgabe(bcdnum >> 4);
     658:	81 2f       	mov	r24, r17
     65a:	82 95       	swap	r24
     65c:	8f 70       	andi	r24, 0x0F	; 15
     65e:	0e 94 0b 03 	call	0x616	; 0x616 <mVAusgabe>
   mVAusgabe(bcdnum & 0x0f);
     662:	81 2f       	mov	r24, r17
     664:	8f 70       	andi	r24, 0x0F	; 15
     666:	0e 94 0b 03 	call	0x616	; 0x616 <mVAusgabe>
}
     66a:	1f 91       	pop	r17
     66c:	08 95       	ret

0000066e <sleep_5ms>:
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
      pause = 0;
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     66e:	42 e0       	ldi	r20, 0x02	; 2
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     670:	1c c0       	rjmp	.+56     	; 0x6aa <sleep_5ms+0x3c>
  {
 #if 3000 > RESTART_DELAY_US
   if (pause > 1)
     672:	82 30       	cpi	r24, 0x02	; 2
     674:	91 05       	cpc	r25, r1
     676:	18 f0       	brcs	.+6      	; 0x67e <sleep_5ms+0x10>
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
      pause -= 2;
     678:	02 97       	sbiw	r24, 0x02	; 2
  {
 #if 3000 > RESTART_DELAY_US
   if (pause > 1)
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
     67a:	3e e3       	ldi	r19, 0x3E	; 62
     67c:	03 c0       	rjmp	.+6      	; 0x684 <sleep_5ms+0x16>
      pause -= 2;
     } else {
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
     67e:	37 e1       	ldi	r19, 0x17	; 23
      pause = 0;
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	90 e0       	ldi	r25, 0x00	; 0
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
     684:	20 91 b2 00 	lds	r18, 0x00B2
     688:	23 0f       	add	r18, r19
     68a:	20 93 b3 00 	sts	0x00B3, r18
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     68e:	40 93 70 00 	sts	0x0070, r20
//   set_sleep_mode(SLEEP_MODE_PWR_SAVE);
   set_sleep_mode(SLEEP_MODE_PWR_SAVE);
     692:	23 b7       	in	r18, 0x33	; 51
     694:	21 7f       	andi	r18, 0xF1	; 241
     696:	26 60       	ori	r18, 0x06	; 6
     698:	23 bf       	out	0x33, r18	; 51
//   set_sleep_mode(SLEEP_MODE_IDLE);
   sleep_mode();
     69a:	23 b7       	in	r18, 0x33	; 51
     69c:	21 60       	ori	r18, 0x01	; 1
     69e:	23 bf       	out	0x33, r18	; 51
     6a0:	88 95       	sleep
     6a2:	23 b7       	in	r18, 0x33	; 51
     6a4:	2e 7f       	andi	r18, 0xFE	; 254
     6a6:	23 bf       	out	0x33, r18	; 51
// wake up after output compare match interrupt
 #else
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
 #endif
   wdt_reset();
     6a8:	a8 95       	wdr
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     6aa:	00 97       	sbiw	r24, 0x00	; 0
     6ac:	11 f7       	brne	.-60     	; 0x672 <sleep_5ms+0x4>
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
 #endif
   wdt_reset();
  }
TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
     6ae:	10 92 70 00 	sts	0x0070, r1
}
     6b2:	08 95       	ret

000006b4 <ChargePin10ms>:
 }

//******************************************************************
#include "CheckPins.c"

void ChargePin10ms(uint8_t PinToCharge, uint8_t ChargeDirection) {
     6b4:	1f 93       	push	r17
     6b6:	18 2f       	mov	r17, r24
   //Will be used by discharge of MOSFET Gates or to load big capacities.
   //Parameters:
   //PinToCharge: specifies the pin as mask for R-Port
   //ChargeDirection: 0 = switch to GND (N-Kanal-FET), 1= switch to VCC(P-Kanal-FET)

   if(ChargeDirection&1) {
     6b8:	60 ff       	sbrs	r22, 0
     6ba:	03 c0       	rjmp	.+6      	; 0x6c2 <ChargePin10ms+0xe>
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
     6bc:	85 b1       	in	r24, 0x05	; 5
     6be:	81 2b       	or	r24, r17
     6c0:	03 c0       	rjmp	.+6      	; 0x6c8 <ChargePin10ms+0x14>
   } else {
      R_PORT &= ~PinToCharge; // or 0 (GND)
     6c2:	95 b1       	in	r25, 0x05	; 5
     6c4:	80 95       	com	r24
     6c6:	89 23       	and	r24, r25
     6c8:	85 b9       	out	0x05, r24	; 5
   }
   R_DDR |= PinToCharge;		//switch Pin to output, across R to GND or VCC
     6ca:	84 b1       	in	r24, 0x04	; 4
     6cc:	81 2b       	or	r24, r17
     6ce:	84 b9       	out	0x04, r24	; 4
   wait_about10ms();			// wait about 10ms
     6d0:	82 e0       	ldi	r24, 0x02	; 2
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
   // switch back Input, no current
   R_DDR &= ~PinToCharge;	// switch back to input
     6d8:	84 b1       	in	r24, 0x04	; 4
     6da:	10 95       	com	r17
     6dc:	81 23       	and	r24, r17
     6de:	84 b9       	out	0x04, r24	; 4
   R_PORT &= ~PinToCharge;	// no Pull up
     6e0:	85 b1       	in	r24, 0x05	; 5
     6e2:	81 23       	and	r24, r17
     6e4:	85 b9       	out	0x05, r24	; 5
}
     6e6:	1f 91       	pop	r17
     6e8:	08 95       	ret

000006ea <CheckPins>:
//******************************************************************
void CheckPins(uint8_t HighPin, uint8_t LowPin, uint8_t TristatePin)
  {
     6ea:	2f 92       	push	r2
     6ec:	3f 92       	push	r3
     6ee:	4f 92       	push	r4
     6f0:	5f 92       	push	r5
     6f2:	6f 92       	push	r6
     6f4:	7f 92       	push	r7
     6f6:	8f 92       	push	r8
     6f8:	9f 92       	push	r9
     6fa:	af 92       	push	r10
     6fc:	bf 92       	push	r11
     6fe:	cf 92       	push	r12
     700:	df 92       	push	r13
     702:	ef 92       	push	r14
     704:	ff 92       	push	r15
     706:	0f 93       	push	r16
     708:	1f 93       	push	r17
     70a:	df 93       	push	r29
     70c:	cf 93       	push	r28
     70e:	cd b7       	in	r28, 0x3d	; 61
     710:	de b7       	in	r29, 0x3e	; 62
     712:	66 97       	sbiw	r28, 0x16	; 22
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	f8 94       	cli
     718:	de bf       	out	0x3e, r29	; 62
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	cd bf       	out	0x3d, r28	; 61
     71e:	18 2f       	mov	r17, r24
     720:	36 2e       	mov	r3, r22
     722:	24 2e       	mov	r2, r20
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
     724:	a8 95       	wdr
//  #define RR680MI resis680mi
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = MEM_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
     726:	a6 2e       	mov	r10, r22
     728:	bb 24       	eor	r11, r11
     72a:	c5 01       	movw	r24, r10
     72c:	8b 5a       	subi	r24, 0xAB	; 171
     72e:	9d 4f       	sbci	r25, 0xFD	; 253
     730:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__eerd_byte_m328>
     734:	8a 83       	std	Y+2, r24	; 0x02
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
  TriPinRL = MEM_read_byte(&PinRLtab[TristatePin]);	// intruction for TristatePin R_L
     736:	82 2d       	mov	r24, r2
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	8b 5a       	subi	r24, 0xAB	; 171
     73c:	9d 4f       	sbci	r25, 0xFD	; 253
     73e:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__eerd_byte_m328>
     742:	d8 2e       	mov	r13, r24
  TriPinRH = TriPinRL + TriPinRL;			// intruction for TristatePin R_H
     744:	08 2f       	mov	r16, r24
     746:	00 0f       	add	r16, r16
  HiPinRL = MEM_read_byte(&PinRLtab[HighPin]);		// intruction for HighPin R_L
     748:	e1 2e       	mov	r14, r17
     74a:	ff 24       	eor	r15, r15
     74c:	c7 01       	movw	r24, r14
     74e:	8b 5a       	subi	r24, 0xAB	; 171
     750:	9d 4f       	sbci	r25, 0xFD	; 253
     752:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__eerd_byte_m328>
     756:	c8 2e       	mov	r12, r24
  HiPinRH = HiPinRL + HiPinRL;				// intruction for HighPin R_H
     758:	28 2f       	mov	r18, r24
     75a:	22 0f       	add	r18, r18
     75c:	28 87       	std	Y+8, r18	; 0x08

  HiADCp = MEM_read_byte(&PinADCtab[HighPin]);		// intruction for ADC High-Pin 
     75e:	c7 01       	movw	r24, r14
     760:	88 5a       	subi	r24, 0xA8	; 168
     762:	9d 4f       	sbci	r25, 0xFD	; 253
     764:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__eerd_byte_m328>
     768:	89 83       	std	Y+1, r24	; 0x01
  LoADCp = MEM_read_byte(&PinADCtab[LowPin]);		// intruction for ADC Low-Pin
     76a:	c5 01       	movw	r24, r10
     76c:	88 5a       	subi	r24, 0xA8	; 168
     76e:	9d 4f       	sbci	r25, 0xFD	; 253
     770:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__eerd_byte_m328>
  HiADCm = HiADCp | TXD_MSK;
     774:	39 81       	ldd	r19, Y+1	; 0x01
     776:	38 60       	ori	r19, 0x08	; 8
     778:	39 83       	std	Y+1, r19	; 0x01
  HiADCp |= TXD_VAL;
  LoADCm = LoADCp | TXD_MSK;
     77a:	88 60       	ori	r24, 0x08	; 8
     77c:	8b 83       	std	Y+3, r24	; 0x03
  LoADCp |= TXD_VAL;

  //setting of Pins 
  R_PORT = 0;				//resistor-Port outputs to 0
     77e:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//Low-Pin to output and across R_L to GND
     780:	8a 81       	ldd	r24, Y+2	; 0x02
     782:	84 b9       	out	0x04, r24	; 4
  ADC_DDR = HiADCm;		//High-Pin to output
     784:	37 b9       	out	0x07, r19	; 7
  ADC_PORT = HiADCp;		//High-Pin fix to Vcc
     786:	38 b9       	out	0x08, r19	; 8
  //for some MOSFET the gate (TristatePin) must be discharged
  ChargePin10ms(TriPinRL,0);		//discharge for N-Kanal
     788:	8d 2d       	mov	r24, r13
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <ChargePin10ms>
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin 
     790:	83 2d       	mov	r24, r3
     792:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
     796:	9a 87       	std	Y+10, r25	; 0x0a
     798:	89 87       	std	Y+9, r24	; 0x09
  if(adc.lp_otr >= 977) {		//no current now? 
     79a:	a3 e0       	ldi	r26, 0x03	; 3
     79c:	81 3d       	cpi	r24, 0xD1	; 209
     79e:	9a 07       	cpc	r25, r26
     7a0:	48 f0       	brcs	.+18     	; 0x7b4 <CheckPins+0xca>
     ChargePin10ms(TriPinRL,1);	 	//else: discharge for P-channel (Gate to VCC)
     7a2:	8d 2d       	mov	r24, r13
     7a4:	61 e0       	ldi	r22, 0x01	; 1
     7a6:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <ChargePin10ms>
     adc.lp_otr = ReadADC(LowPin);	//read voltage of Low-Pin again
     7aa:	83 2d       	mov	r24, r3
     7ac:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
     7b0:	9a 87       	std	Y+10, r25	; 0x0a
     7b2:	89 87       	std	Y+9, r24	; 0x09
  lcd_line2();
  lcd_clear_line();
  lcd_line2();
#endif

  if(adc.lp_otr > 92) {  //there is some current without TristatePin current 
     7b4:	e9 85       	ldd	r30, Y+9	; 0x09
     7b6:	fa 85       	ldd	r31, Y+10	; 0x0a
     7b8:	ed 35       	cpi	r30, 0x5D	; 93
     7ba:	f1 05       	cpc	r31, r1
     7bc:	08 f4       	brcc	.+2      	; 0x7c0 <CheckPins+0xd6>
     7be:	aa c0       	rjmp	.+340    	; 0x914 <__stack+0x15>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test if N-JFET or if self-conducting N-MOSFET
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
     7c0:	8a 81       	ldd	r24, Y+2	; 0x02
     7c2:	80 2b       	or	r24, r16
     7c4:	84 b9       	out	0x04, r24	; 4
     adc.lp1 = W20msReadADC(LowPin);	//measure voltage at the assumed Source 
     7c6:	83 2d       	mov	r24, r3
     7c8:	0e 94 06 1b 	call	0x360c	; 0x360c <W20msReadADC>
     7cc:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     7ce:	82 2d       	mov	r24, r2
     7d0:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
     7d4:	7c 01       	movw	r14, r24
     R_PORT = TriPinRH;			//switch R_H for Tristate-Pin (probably Gate) to VCC
     7d6:	05 b9       	out	0x05, r16	; 5
     adc.lp2 = W20msReadADC(LowPin);	//measure voltage at the assumed Source again
     7d8:	83 2d       	mov	r24, r3
     7da:	0e 94 06 1b 	call	0x360c	; 0x360c <W20msReadADC>
     //If it is a self-conducting MOSFET or JFET, then must be: adc.lp2 > adc.lp1 
     if(adc.lp2>(adc.lp1+488)) {
     7de:	95 01       	movw	r18, r10
     7e0:	28 51       	subi	r18, 0x18	; 24
     7e2:	3e 4f       	sbci	r19, 0xFE	; 254
     7e4:	28 17       	cp	r18, r24
     7e6:	39 07       	cpc	r19, r25
     7e8:	08 f0       	brcs	.+2      	; 0x7ec <CheckPins+0x102>
     7ea:	40 c0       	rjmp	.+128    	; 0x86c <CheckPins+0x182>
        //measure voltage at the  Gate, differ between MOSFET and JFET
        ADC_PORT = TXD_VAL;
     7ec:	88 e0       	ldi	r24, 0x08	; 8
     7ee:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = LoADCm;	//Low-Pin fix to GND
     7f0:	fb 81       	ldd	r31, Y+3	; 0x03
     7f2:	f7 b9       	out	0x07, r31	; 7
        R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     7f4:	80 2f       	mov	r24, r16
     7f6:	8c 29       	or	r24, r12
     7f8:	84 b9       	out	0x04, r24	; 4
        R_PORT = TriPinRH | HiPinRL;	//switch R_L for High-Pin to VCC
     7fa:	85 b9       	out	0x05, r24	; 5
        adc.lp2 = W20msReadADC(TristatePin); //read voltage of assumed Gate 
     7fc:	82 2d       	mov	r24, r2
     7fe:	0e 94 06 1b 	call	0x360c	; 0x360c <W20msReadADC>
        if(adc.lp2>3911) {  //MOSFET
     802:	2f e0       	ldi	r18, 0x0F	; 15
     804:	88 34       	cpi	r24, 0x48	; 72
     806:	92 07       	cpc	r25, r18
     808:	28 f0       	brcs	.+10     	; 0x814 <CheckPins+0x12a>
           PartFound = PART_FET;	//N-Kanal-MOSFET
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_N_D_MOS; //Depletion-MOSFET
     810:	84 e0       	ldi	r24, 0x04	; 4
     812:	04 c0       	rjmp	.+8      	; 0x81c <CheckPins+0x132>
        } else {  //JFET (pn-passage between Gate and Source is conducting )
           PartFound = PART_FET;	//N-Kanal-JFET
     814:	83 e0       	ldi	r24, 0x03	; 3
     816:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_N_JFET;
     81a:	86 e0       	ldi	r24, 0x06	; 6
     81c:	80 93 06 01 	sts	0x0106, r24
        }
//      if ((PartReady == 0) || (adc.lp1 > trans.uBE[0])) 
//      there is no way to find out the right Source / Drain
        trans.uBE[0] = adc.lp1;
     820:	b0 92 51 01 	sts	0x0151, r11
     824:	a0 92 50 01 	sts	0x0150, r10
        gthvoltage = adc.lp1 - adc.tp1;	//voltage GS (Source - Gate)
     828:	c5 01       	movw	r24, r10
     82a:	8e 19       	sub	r24, r14
     82c:	9f 09       	sbc	r25, r15
     82e:	90 93 59 01 	sts	0x0159, r25
     832:	80 93 58 01 	sts	0x0158, r24
        trans.uBE[1] = (unsigned int)(((unsigned long)adc.lp1 * 1000) / RR680MI); // Id 0.01mA
     836:	b5 01       	movw	r22, r10
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	28 ee       	ldi	r18, 0xE8	; 232
     83e:	33 e0       	ldi	r19, 0x03	; 3
     840:	40 e0       	ldi	r20, 0x00	; 0
     842:	50 e0       	ldi	r21, 0x00	; 0
     844:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
     848:	20 91 02 01 	lds	r18, 0x0102
     84c:	30 91 03 01 	lds	r19, 0x0103
     850:	40 e0       	ldi	r20, 0x00	; 0
     852:	50 e0       	ldi	r21, 0x00	; 0
     854:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
     858:	30 93 53 01 	sts	0x0153, r19
     85c:	20 93 52 01 	sts	0x0152, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     860:	20 92 54 01 	sts	0x0154, r2
        trans.c = HighPin;
     864:	10 93 55 01 	sts	0x0155, r17
        trans.e = LowPin;
     868:	30 92 56 01 	sts	0x0156, r3
     }

     ADC_PORT = TXD_VAL;		// direct outputs to GND
     86c:	88 e0       	ldi	r24, 0x08	; 8
     86e:	88 b9       	out	0x08, r24	; 8

     //Test, if P-JFET or if self-conducting P-MOSFET
     ADC_DDR = LoADCm;		//switch Low-Pin (assumed Drain) direct to GND,
     870:	3b 81       	ldd	r19, Y+3	; 0x03
     872:	37 b9       	out	0x07, r19	; 7
				//R_H for Tristate-Pin (assumed Gate) is already switched to VCC
     R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     874:	80 2f       	mov	r24, r16
     876:	8c 29       	or	r24, r12
     878:	84 b9       	out	0x04, r24	; 4
     R_PORT = TriPinRH | HiPinRL;	//High-Pin across R_L to Vcc
     87a:	85 b9       	out	0x05, r24	; 5
     adc.hp1 = W20msReadADC(HighPin);	//measure voltage at assumed Source 
     87c:	81 2f       	mov	r24, r17
     87e:	0e 94 06 1b 	call	0x360c	; 0x360c <W20msReadADC>
     882:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     884:	82 2d       	mov	r24, r2
     886:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
     88a:	7c 01       	movw	r14, r24
     R_PORT = HiPinRL;			//switch R_H for Tristate-Pin (assumed Gate) to GND
     88c:	c5 b8       	out	0x05, r12	; 5
     adc.hp2 = W20msReadADC(HighPin);	//read voltage at assumed Source again
     88e:	81 2f       	mov	r24, r17
     890:	0e 94 06 1b 	call	0x360c	; 0x360c <W20msReadADC>
     //if it is a self-conducting P_MOSFET or P-JFET , then must be:  adc.hp1 > adc.hp2 
     if(adc.hp1>(adc.hp2+488)) {
     894:	88 51       	subi	r24, 0x18	; 24
     896:	9e 4f       	sbci	r25, 0xFE	; 254
     898:	8a 15       	cp	r24, r10
     89a:	9b 05       	cpc	r25, r11
     89c:	d8 f5       	brcc	.+118    	; 0x914 <__stack+0x15>
        //read voltage at the Gate , to differ between MOSFET and JFET
        ADC_PORT = HiADCp;	//switch High-Pin directly to VCC
     89e:	89 81       	ldd	r24, Y+1	; 0x01
     8a0:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = HiADCm;	//switch High-Pin to output
     8a2:	87 b9       	out	0x07, r24	; 7
        adc.tp2 = W20msReadADC(TristatePin); //read voltage at the assumed Gate 
     8a4:	82 2d       	mov	r24, r2
     8a6:	0e 94 06 1b 	call	0x360c	; 0x360c <W20msReadADC>
        if(adc.tp2<977) { 		//MOSFET
     8aa:	a3 e0       	ldi	r26, 0x03	; 3
     8ac:	81 3d       	cpi	r24, 0xD1	; 209
     8ae:	9a 07       	cpc	r25, r26
     8b0:	28 f4       	brcc	.+10     	; 0x8bc <CheckPins+0x1d2>
           PartFound = PART_FET;	//P-Kanal-MOSFET
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_D_MOS; //Depletion-MOSFET
     8b8:	85 e0       	ldi	r24, 0x05	; 5
     8ba:	04 c0       	rjmp	.+8      	; 0x8c4 <CheckPins+0x1da>
        } else { 			//JFET (pn-passage between Gate and Source is conducting)
           PartFound = PART_FET;	//P-Kanal-JFET
     8bc:	83 e0       	ldi	r24, 0x03	; 3
     8be:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_JFET;
     8c2:	87 e0       	ldi	r24, 0x07	; 7
     8c4:	80 93 06 01 	sts	0x0106, r24
        }
        gthvoltage = adc.tp1 - adc.hp1;		//voltage GS (Gate - Source)
     8c8:	ea 18       	sub	r14, r10
     8ca:	fb 08       	sbc	r15, r11
     8cc:	f0 92 59 01 	sts	0x0159, r15
     8d0:	e0 92 58 01 	sts	0x0158, r14
        trans.uBE[1] = (unsigned int)(((unsigned long)(ADCconfig.U_AVCC - adc.hp1) * 1000) / RR680PL); // Id 0.01mA
     8d4:	60 91 3d 01 	lds	r22, 0x013D
     8d8:	70 91 3e 01 	lds	r23, 0x013E
     8dc:	6a 19       	sub	r22, r10
     8de:	7b 09       	sbc	r23, r11
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	28 ee       	ldi	r18, 0xE8	; 232
     8e6:	33 e0       	ldi	r19, 0x03	; 3
     8e8:	40 e0       	ldi	r20, 0x00	; 0
     8ea:	50 e0       	ldi	r21, 0x00	; 0
     8ec:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
     8f0:	20 91 08 01 	lds	r18, 0x0108
     8f4:	30 91 09 01 	lds	r19, 0x0109
     8f8:	40 e0       	ldi	r20, 0x00	; 0
     8fa:	50 e0       	ldi	r21, 0x00	; 0
     8fc:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
     900:	30 93 53 01 	sts	0x0153, r19
     904:	20 93 52 01 	sts	0x0152, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     908:	20 92 54 01 	sts	0x0154, r2
        trans.c = LowPin;
     90c:	30 92 55 01 	sts	0x0155, r3
        trans.e = HighPin;
     910:	10 93 56 01 	sts	0x0156, r17
  } // end component has current without TristatePin signal


#ifdef COMMON_COLLECTOR
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
     914:	88 e0       	ldi	r24, 0x08	; 8
     916:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;			// Collector direct to GND
     918:	bb 81       	ldd	r27, Y+3	; 0x03
     91a:	b7 b9       	out	0x07, r27	; 7
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
     91c:	c5 b8       	out	0x05, r12	; 5
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
     91e:	ec 2d       	mov	r30, r12
     920:	ed 29       	or	r30, r13
     922:	eb 87       	std	Y+11, r30	; 0x0b
     924:	e4 b9       	out	0x04, r30	; 4
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     926:	a0 90 3d 01 	lds	r10, 0x013D
     92a:	b0 90 3e 01 	lds	r11, 0x013E
     92e:	81 2f       	mov	r24, r17
     930:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
     934:	7c 01       	movw	r14, r24
  adc.tp1 = ReadADC(TristatePin);	// voltage at the base resistor
     936:	82 2d       	mov	r24, r2
     938:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
     93c:	4c 01       	movw	r8, r24

  if (adc.tp1 < 10) {
     93e:	8a 30       	cpi	r24, 0x0A	; 10
     940:	91 05       	cpc	r25, r1
     942:	68 f5       	brcc	.+90     	; 0x99e <__stack+0x9f>
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
     944:	80 2f       	mov	r24, r16
     946:	8c 29       	or	r24, r12
     948:	84 b9       	out	0x04, r24	; 4
     adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);
     94a:	a0 90 3d 01 	lds	r10, 0x013D
     94e:	b0 90 3e 01 	lds	r11, 0x013E
     952:	81 2f       	mov	r24, r17
     954:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
     958:	a8 1a       	sub	r10, r24
     95a:	b9 0a       	sbc	r11, r25
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
     95c:	82 2d       	mov	r24, r2
     95e:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
     962:	4c 01       	movw	r8, r24
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     964:	25 01       	movw	r4, r10
     966:	66 24       	eor	r6, r6
     968:	77 24       	eor	r7, r7
     96a:	20 91 08 01 	lds	r18, 0x0108
     96e:	30 91 09 01 	lds	r19, 0x0109
     972:	40 e0       	ldi	r20, 0x00	; 0
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	60 e6       	ldi	r22, 0x60	; 96
     978:	77 eb       	ldi	r23, 0xB7	; 183
     97a:	87 e4       	ldi	r24, 0x47	; 71
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
     982:	c3 01       	movw	r24, r6
     984:	b2 01       	movw	r22, r4
     986:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
     98a:	94 01       	movw	r18, r8
     98c:	40 e0       	ldi	r20, 0x00	; 0
     98e:	50 e0       	ldi	r21, 0x00	; 0
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     990:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
     994:	2c 83       	std	Y+4, r18	; 0x04
     996:	3d 83       	std	Y+5, r19	; 0x05
     998:	4e 83       	std	Y+6, r20	; 0x06
     99a:	5f 83       	std	Y+7, r21	; 0x07
     99c:	0f c0       	rjmp	.+30     	; 0x9bc <__stack+0xbd>
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
  ADC_DDR = LoADCm;			// Collector direct to GND
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     99e:	ae 18       	sub	r10, r14
     9a0:	bf 08       	sbc	r11, r15
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
 #else
     c_hfe = ((adc.hp1 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
  } else {
     c_hfe = (unsigned long)((adc.hp1 - adc.tp1) / adc.tp1);
     9a2:	c5 01       	movw	r24, r10
     9a4:	88 19       	sub	r24, r8
     9a6:	99 09       	sbc	r25, r9
     9a8:	b4 01       	movw	r22, r8
     9aa:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__udivmodhi4>
     9ae:	cb 01       	movw	r24, r22
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	8c 83       	std	Y+4, r24	; 0x04
     9b6:	9d 83       	std	Y+5, r25	; 0x05
     9b8:	ae 83       	std	Y+6, r26	; 0x06
     9ba:	bf 83       	std	Y+7, r27	; 0x07
  }
#endif

  //set Pins again for circuit with common Emitter PNP
  R_DDR = LoPinRL;		//switch R_L port for Low-Pin to output (GND)
     9bc:	9a 81       	ldd	r25, Y+2	; 0x02
     9be:	94 b9       	out	0x04, r25	; 4
  R_PORT = 0;			//switch all resistor ports to GND
     9c0:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = HiADCm;		//switch High-Pin to output
     9c2:	a9 81       	ldd	r26, Y+1	; 0x01
     9c4:	a7 b9       	out	0x07, r26	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
     9c6:	a8 b9       	out	0x08, r26	; 8
  wait_about5ms();
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
  
  if(adc.lp_otr < 977) {
     9d0:	e9 85       	ldd	r30, Y+9	; 0x09
     9d2:	fa 85       	ldd	r31, Y+10	; 0x0a
     9d4:	23 e0       	ldi	r18, 0x03	; 3
     9d6:	e1 3d       	cpi	r30, 0xD1	; 209
     9d8:	f2 07       	cpc	r31, r18
     9da:	08 f0       	brcs	.+2      	; 0x9de <__stack+0xdf>
     9dc:	ab c2       	rjmp	.+1366   	; 0xf34 <__stack+0x635>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test to PNP
     R_DDR = LoPinRL | TriPinRL;	//switch R_L port for Tristate-Pin to output (GND), for Test of PNP
     9de:	3a 81       	ldd	r19, Y+2	; 0x02
     9e0:	3d 29       	or	r19, r13
     9e2:	3f 87       	std	Y+15, r19	; 0x0f
     9e4:	34 b9       	out	0x04, r19	; 4
     adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin
     9e6:	83 2d       	mov	r24, r3
     9e8:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
     if(adc.lp1 > 3422) {
     9ec:	ad e0       	ldi	r26, 0x0D	; 13
     9ee:	8f 35       	cpi	r24, 0x5F	; 95
     9f0:	9a 07       	cpc	r25, r26
     9f2:	08 f4       	brcc	.+2      	; 0x9f6 <__stack+0xf7>
     9f4:	e1 c0       	rjmp	.+450    	; 0xbb8 <__stack+0x2b9>
        //component has current => PNP-Transistor or equivalent
        //compute current amplification factor in both directions
        R_DDR = LoPinRL | TriPinRH;	//switch R_H port for Tristate-Pin (Base) to output (GND)
     9f6:	ba 81       	ldd	r27, Y+2	; 0x02
     9f8:	b0 2b       	or	r27, r16
     9fa:	b8 8b       	std	Y+16, r27	; 0x10
     9fc:	b4 b9       	out	0x04, r27	; 4

        adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin (assumed Collector)
     9fe:	83 2d       	mov	r24, r3
     a00:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
     a04:	9a 8b       	std	Y+18, r25	; 0x12
     a06:	89 8b       	std	Y+17, r24	; 0x11
        adc.tp2 = ReadADC(TristatePin);	//measure voltage at TristatePin (Base) 
     a08:	82 2d       	mov	r24, r2
     a0a:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
     a0e:	9d 8b       	std	Y+21, r25	; 0x15
     a10:	8c 8b       	std	Y+20, r24	; 0x14
        //check, if Test is done before 
        if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     a12:	80 91 07 01 	lds	r24, 0x0107
     a16:	82 50       	subi	r24, 0x02	; 2
     a18:	82 30       	cpi	r24, 0x02	; 2
     a1a:	18 f4       	brcc	.+6      	; 0xa22 <__stack+0x123>
           PartReady = 1;
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	80 93 04 01 	sts	0x0104, r24
        }
        trans.uBE[PartReady] = ReadADC(HighPin) - adc.tp2;	// Base Emitter Voltage
     a22:	e0 90 04 01 	lds	r14, 0x0104
     a26:	ff 24       	eor	r15, r15
     a28:	81 2f       	mov	r24, r17
     a2a:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
     a2e:	f7 01       	movw	r30, r14
     a30:	ee 0f       	add	r30, r30
     a32:	ff 1f       	adc	r31, r31
     a34:	e0 5b       	subi	r30, 0xB0	; 176
     a36:	fe 4f       	sbci	r31, 0xFE	; 254
     a38:	2c 89       	ldd	r18, Y+20	; 0x14
     a3a:	3d 89       	ldd	r19, Y+21	; 0x15
     a3c:	82 1b       	sub	r24, r18
     a3e:	93 0b       	sbc	r25, r19
     a40:	91 83       	std	Z+1, r25	; 0x01
     a42:	80 83       	st	Z, r24

        //compute current amplification factor for circuit with common Emitter
        //hFE = B = Collector current / Base current
        if(adc.tp2 < 53) {
     a44:	25 33       	cpi	r18, 0x35	; 53
     a46:	31 05       	cpc	r19, r1
     a48:	20 f4       	brcc	.+8      	; 0xa52 <__stack+0x153>
#if DebugOut == 5
           lcd_data('<');
           lcd_data('5');
           lcd_data('3');
#endif
           adc.tp2 = 53;
     a4a:	85 e3       	ldi	r24, 0x35	; 53
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	9d 8b       	std	Y+21, r25	; 0x15
     a50:	8c 8b       	std	Y+20, r24	; 0x14
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     a52:	e0 90 04 01 	lds	r14, 0x0104
     a56:	ff 24       	eor	r15, r15
     a58:	a9 89       	ldd	r26, Y+17	; 0x11
     a5a:	ba 89       	ldd	r27, Y+18	; 0x12
     a5c:	2d 01       	movw	r4, r26
     a5e:	66 24       	eor	r6, r6
     a60:	77 24       	eor	r7, r7
     a62:	20 91 02 01 	lds	r18, 0x0102
     a66:	30 91 03 01 	lds	r19, 0x0103
     a6a:	40 e0       	ldi	r20, 0x00	; 0
     a6c:	50 e0       	ldi	r21, 0x00	; 0
     a6e:	60 e6       	ldi	r22, 0x60	; 96
     a70:	77 eb       	ldi	r23, 0xB7	; 183
     a72:	87 e4       	ldi	r24, 0x47	; 71
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
     a7a:	c3 01       	movw	r24, r6
     a7c:	b2 01       	movw	r22, r4
     a7e:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
                 (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
     a82:	ec 89       	ldd	r30, Y+20	; 0x14
     a84:	fd 89       	ldd	r31, Y+21	; 0x15
     a86:	9f 01       	movw	r18, r30
     a88:	40 e0       	ldi	r20, 0x00	; 0
     a8a:	50 e0       	ldi	r21, 0x00	; 0
     a8c:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
#endif
           adc.tp2 = 53;
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     a90:	f7 01       	movw	r30, r14
     a92:	ee 0f       	add	r30, r30
     a94:	ff 1f       	adc	r31, r31
     a96:	ee 0f       	add	r30, r30
     a98:	ff 1f       	adc	r31, r31
     a9a:	e8 5b       	subi	r30, 0xB8	; 184
     a9c:	fe 4f       	sbci	r31, 0xFE	; 254
     a9e:	20 83       	st	Z, r18
     aa0:	31 83       	std	Z+1, r19	; 0x01
     aa2:	42 83       	std	Z+2, r20	; 0x02
     aa4:	53 83       	std	Z+3, r21	; 0x03
        trans.hfe[PartReady] = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
#ifdef COMMON_COLLECTOR
        //current amplification factor for common  Collector (Emitter follower)
        // c_hFE = (Emitter current - Base current) / Base current
        if (c_hfe > trans.hfe[PartReady]) {
     aa6:	8c 81       	ldd	r24, Y+4	; 0x04
     aa8:	9d 81       	ldd	r25, Y+5	; 0x05
     aaa:	ae 81       	ldd	r26, Y+6	; 0x06
     aac:	bf 81       	ldd	r27, Y+7	; 0x07
     aae:	28 17       	cp	r18, r24
     ab0:	39 07       	cpc	r19, r25
     ab2:	4a 07       	cpc	r20, r26
     ab4:	5b 07       	cpc	r21, r27
     ab6:	98 f4       	brcc	.+38     	; 0xade <__stack+0x1df>
           trans.hfe[PartReady] = c_hfe;
     ab8:	80 83       	st	Z, r24
     aba:	91 83       	std	Z+1, r25	; 0x01
     abc:	a2 83       	std	Z+2, r26	; 0x02
     abe:	b3 83       	std	Z+3, r27	; 0x03
           trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.hp1 - adc.tp1;	// Base Emitter Voltage common collector
     ac0:	f7 01       	movw	r30, r14
     ac2:	ee 0f       	add	r30, r30
     ac4:	ff 1f       	adc	r31, r31
     ac6:	e0 5b       	subi	r30, 0xB0	; 176
     ac8:	fe 4f       	sbci	r31, 0xFE	; 254
     aca:	80 91 3d 01 	lds	r24, 0x013D
     ace:	90 91 3e 01 	lds	r25, 0x013E
     ad2:	8a 19       	sub	r24, r10
     ad4:	9b 09       	sbc	r25, r11
     ad6:	88 19       	sub	r24, r8
     ad8:	99 09       	sbc	r25, r9
     ada:	91 83       	std	Z+1, r25	; 0x01
     adc:	80 83       	st	Z, r24
        }
#endif

 
        if(PartFound != PART_THYRISTOR) {
     ade:	80 91 07 01 	lds	r24, 0x0107
     ae2:	85 30       	cpi	r24, 0x05	; 5
     ae4:	09 f4       	brne	.+2      	; 0xae8 <__stack+0x1e9>
     ae6:	68 c0       	rjmp	.+208    	; 0xbb8 <__stack+0x2b9>
           if(adc.tp2 > 977) {
     ae8:	ac 89       	ldd	r26, Y+20	; 0x14
     aea:	bd 89       	ldd	r27, Y+21	; 0x15
     aec:	e3 e0       	ldi	r30, 0x03	; 3
     aee:	a2 3d       	cpi	r26, 0xD2	; 210
     af0:	be 07       	cpc	r27, r30
     af2:	30 f0       	brcs	.+12     	; 0xb00 <__stack+0x201>
              //PNP-Transistor is found (Base voltage moves to VCC)
              PartFound = PART_TRANSISTOR;
     af4:	82 e0       	ldi	r24, 0x02	; 2
     af6:	80 93 07 01 	sts	0x0107, r24
              PartMode = PART_MODE_PNP;
     afa:	80 93 06 01 	sts	0x0106, r24
     afe:	56 c0       	rjmp	.+172    	; 0xbac <__stack+0x2ad>
           } else {
              if((adc.lp_otr < 97) && (adc.lp1 > 2000)) {
     b00:	29 85       	ldd	r18, Y+9	; 0x09
     b02:	3a 85       	ldd	r19, Y+10	; 0x0a
     b04:	21 36       	cpi	r18, 0x61	; 97
     b06:	31 05       	cpc	r19, r1
     b08:	08 f0       	brcs	.+2      	; 0xb0c <__stack+0x20d>
     b0a:	50 c0       	rjmp	.+160    	; 0xbac <__stack+0x2ad>
     b0c:	89 89       	ldd	r24, Y+17	; 0x11
     b0e:	9a 89       	ldd	r25, Y+18	; 0x12
     b10:	a7 e0       	ldi	r26, 0x07	; 7
     b12:	81 3d       	cpi	r24, 0xD1	; 209
     b14:	9a 07       	cpc	r25, r26
     b16:	08 f4       	brcc	.+2      	; 0xb1a <__stack+0x21b>
     b18:	49 c0       	rjmp	.+146    	; 0xbac <__stack+0x2ad>
                 //is flow voltage low enough in the closed  state?
                 //(since D-Mode-FET would be by mistake detected as E-Mode )
        	 PartFound = PART_FET;		//P-Kanal-MOSFET is found (Basis/Gate moves not to VCC)
     b1a:	83 e0       	ldi	r24, 0x03	; 3
     b1c:	80 93 07 01 	sts	0x0107, r24
        	 PartMode = PART_MODE_P_E_MOS;
     b20:	80 93 06 01 	sts	0x0106, r24
        	 //measure the Gate threshold voltage
                 //Switching of Drain is monitored with digital input
                 // Low level is specified up to 0.3 * VCC
                 // High level is specified above 0.6 * VCC
                 PinMSK = LoADCm & 7;
     b24:	eb 80       	ldd	r14, Y+3	; 0x03
     b26:	b7 e0       	ldi	r27, 0x07	; 7
     b28:	eb 22       	and	r14, r27
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
     b2a:	82 2d       	mov	r24, r2
     b2c:	80 64       	ori	r24, 0x40	; 64
     b2e:	80 93 7c 00 	sts	0x007C, r24
        	 gthvoltage = 1;			// round up ((1*4)/9)
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	90 93 59 01 	sts	0x0159, r25
     b3a:	80 93 58 01 	sts	0x0158, r24
        	 for(ii=0;ii<11;ii++) {
     b3e:	40 e0       	ldi	r20, 0x00	; 0
        	    wdt_reset();
     b40:	a8 95       	wdr
        	    ChargePin10ms(TriPinRL,1);
     b42:	8d 2d       	mov	r24, r13
     b44:	61 e0       	ldi	r22, 0x01	; 1
     b46:	4e 8b       	std	Y+22, r20	; 0x16
     b48:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <ChargePin10ms>
                    R_DDR = LoPinRL | TriPinRH;		//switch R_H for Tristate-Pin (Basis) to GND
     b4c:	e8 89       	ldd	r30, Y+16	; 0x10
     b4e:	e4 b9       	out	0x04, r30	; 4
     b50:	4e 89       	ldd	r20, Y+22	; 0x16
        	    while (!(ADC_PIN&PinMSK));		// Wait, until the MOSFET switches and Drain moves to VCC
     b52:	86 b1       	in	r24, 0x06	; 6
     b54:	8e 21       	and	r24, r14
     b56:	e9 f3       	breq	.-6      	; 0xb52 <__stack+0x253>
                    			// 1 is detected with more than 2.5V (up to 2.57V) with tests of mega168 and mega328
        	    R_DDR = LoPinRL;
     b58:	fa 81       	ldd	r31, Y+2	; 0x02
     b5a:	f4 b9       	out	0x04, r31	; 4
        	    ADCSRA |= (1<<ADSC);		// Start Conversion
     b5c:	80 91 7a 00 	lds	r24, 0x007A
     b60:	80 64       	ori	r24, 0x40	; 64
     b62:	80 93 7a 00 	sts	0x007A, r24
        	    while (ADCSRA&(1<<ADSC));		// wait
     b66:	80 91 7a 00 	lds	r24, 0x007A
     b6a:	86 fd       	sbrc	r24, 6
     b6c:	fc cf       	rjmp	.-8      	; 0xb66 <__stack+0x267>
      		    gthvoltage += (1023 - ADCW);	// Add Tristatepin-Voltage
     b6e:	20 91 78 00 	lds	r18, 0x0078
     b72:	30 91 79 00 	lds	r19, 0x0079
     b76:	80 91 58 01 	lds	r24, 0x0158
     b7a:	90 91 59 01 	lds	r25, 0x0159
     b7e:	81 50       	subi	r24, 0x01	; 1
     b80:	9c 4f       	sbci	r25, 0xFC	; 252
     b82:	82 1b       	sub	r24, r18
     b84:	93 0b       	sbc	r25, r19
     b86:	90 93 59 01 	sts	0x0159, r25
     b8a:	80 93 58 01 	sts	0x0158, r24
                 // Low level is specified up to 0.3 * VCC
                 // High level is specified above 0.6 * VCC
                 PinMSK = LoADCm & 7;
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
        	 gthvoltage = 1;			// round up ((1*4)/9)
        	 for(ii=0;ii<11;ii++) {
     b8e:	4f 5f       	subi	r20, 0xFF	; 255
     b90:	4b 30       	cpi	r20, 0x0B	; 11
     b92:	b1 f6       	brne	.-84     	; 0xb40 <__stack+0x241>
        	    R_DDR = LoPinRL;
        	    ADCSRA |= (1<<ADSC);		// Start Conversion
        	    while (ADCSRA&(1<<ADSC));		// wait
      		    gthvoltage += (1023 - ADCW);	// Add Tristatepin-Voltage
                 }
                 gthvoltage *= 4;		// is equal to 44*ADCW
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	88 0f       	add	r24, r24
     b9a:	99 1f       	adc	r25, r25
                 gthvoltage /= 9;		// gives resolution in mV
     b9c:	69 e0       	ldi	r22, 0x09	; 9
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__udivmodhi4>
     ba4:	70 93 59 01 	sts	0x0159, r23
     ba8:	60 93 58 01 	sts	0x0158, r22
              }
           }
           trans.b = TristatePin;
     bac:	20 92 54 01 	sts	0x0154, r2
           trans.c = LowPin;
     bb0:	30 92 55 01 	sts	0x0155, r3
           trans.e = HighPin;
     bb4:	10 93 56 01 	sts	0x0156, r17
        }  // end if PartFound != PART_THYRISTOR
    } // end component has current => PNP

#ifdef COMMON_COLLECTOR
    // Low-Pin=RL- HighPin=VCC
    R_DDR = LoPinRL | TriPinRL;
     bb8:	2f 85       	ldd	r18, Y+15	; 0x0f
     bba:	24 b9       	out	0x04, r18	; 4
    R_PORT = TriPinRL;			// TriPin=RL+  NPN with common Collector
     bbc:	d5 b8       	out	0x05, r13	; 5
    adc.lp1 = W5msReadADC(LowPin);	// voltage at Emitter resistor
     bbe:	83 2d       	mov	r24, r3
     bc0:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
     bc4:	2c 01       	movw	r4, r24
    adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     bc6:	80 91 3d 01 	lds	r24, 0x013D
     bca:	90 91 3e 01 	lds	r25, 0x013E
     bce:	9a 8b       	std	Y+18, r25	; 0x12
     bd0:	89 8b       	std	Y+17, r24	; 0x11
     bd2:	82 2d       	mov	r24, r2
     bd4:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
     bd8:	a9 89       	ldd	r26, Y+17	; 0x11
     bda:	ba 89       	ldd	r27, Y+18	; 0x12
     bdc:	a8 1b       	sub	r26, r24
     bde:	b9 0b       	sbc	r27, r25
     be0:	ba 8b       	std	Y+18, r27	; 0x12
     be2:	a9 8b       	std	Y+17, r26	; 0x11
    if (adc.tp1 < 10) {
     be4:	aa 30       	cpi	r26, 0x0A	; 10
     be6:	b1 05       	cpc	r27, r1
     be8:	b0 f5       	brcc	.+108    	; 0xc56 <__stack+0x357>
       R_DDR = LoPinRL | TriPinRH;
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	80 2b       	or	r24, r16
     bee:	84 b9       	out	0x04, r24	; 4
       R_PORT = TriPinRH;		// Tripin=RH+
     bf0:	05 b9       	out	0x05, r16	; 5
       adc.lp1 = W5msReadADC(LowPin);
     bf2:	83 2d       	mov	r24, r3
     bf4:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
     bf8:	2c 01       	movw	r4, r24
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     bfa:	e0 91 3d 01 	lds	r30, 0x013D
     bfe:	f0 91 3e 01 	lds	r31, 0x013E
     c02:	fa 8b       	std	Y+18, r31	; 0x12
     c04:	e9 8b       	std	Y+17, r30	; 0x11
     c06:	82 2d       	mov	r24, r2
     c08:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
     c0c:	29 89       	ldd	r18, Y+17	; 0x11
     c0e:	3a 89       	ldd	r19, Y+18	; 0x12
     c10:	28 1b       	sub	r18, r24
     c12:	39 0b       	sbc	r19, r25
     c14:	3a 8b       	std	Y+18, r19	; 0x12
     c16:	29 8b       	std	Y+17, r18	; 0x11
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     c18:	42 01       	movw	r8, r4
     c1a:	aa 24       	eor	r10, r10
     c1c:	bb 24       	eor	r11, r11
     c1e:	20 91 02 01 	lds	r18, 0x0102
     c22:	30 91 03 01 	lds	r19, 0x0103
     c26:	40 e0       	ldi	r20, 0x00	; 0
     c28:	50 e0       	ldi	r21, 0x00	; 0
     c2a:	60 e6       	ldi	r22, 0x60	; 96
     c2c:	77 eb       	ldi	r23, 0xB7	; 183
     c2e:	87 e4       	ldi	r24, 0x47	; 71
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
     c36:	c5 01       	movw	r24, r10
     c38:	b4 01       	movw	r22, r8
     c3a:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
     c3e:	a9 89       	ldd	r26, Y+17	; 0x11
     c40:	ba 89       	ldd	r27, Y+18	; 0x12
     c42:	9d 01       	movw	r18, r26
     c44:	40 e0       	ldi	r20, 0x00	; 0
     c46:	50 e0       	ldi	r21, 0x00	; 0
       R_DDR = LoPinRL | TriPinRH;
       R_PORT = TriPinRH;		// Tripin=RH+
       adc.lp1 = W5msReadADC(LowPin);
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     c48:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
     c4c:	2c 83       	std	Y+4, r18	; 0x04
     c4e:	3d 83       	std	Y+5, r19	; 0x05
     c50:	4e 83       	std	Y+6, r20	; 0x06
     c52:	5f 83       	std	Y+7, r21	; 0x07
     c54:	0f c0       	rjmp	.+30     	; 0xc74 <__stack+0x375>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
 #else
       c_hfe = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
    } else {
       c_hfe = (adc.lp1 - adc.tp1) / adc.tp1;
     c56:	c2 01       	movw	r24, r4
     c58:	e9 89       	ldd	r30, Y+17	; 0x11
     c5a:	fa 89       	ldd	r31, Y+18	; 0x12
     c5c:	8e 1b       	sub	r24, r30
     c5e:	9f 0b       	sbc	r25, r31
     c60:	bf 01       	movw	r22, r30
     c62:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__udivmodhi4>
     c66:	cb 01       	movw	r24, r22
     c68:	a0 e0       	ldi	r26, 0x00	; 0
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	8c 83       	std	Y+4, r24	; 0x04
     c6e:	9d 83       	std	Y+5, r25	; 0x05
     c70:	ae 83       	std	Y+6, r26	; 0x06
     c72:	bf 83       	std	Y+7, r27	; 0x07
       lcd_string(utoa(adc.tp1,outval,10));
       wait_about1s();
#endif
#endif
    //Tristate (can be Base) to VCC, Test if NPN
    ADC_DDR = LoADCm;		//Low-Pin to output 0V
     c74:	9b 81       	ldd	r25, Y+3	; 0x03
     c76:	97 b9       	out	0x07, r25	; 7
    ADC_PORT = TXD_VAL;			//switch Low-Pin to GND
     c78:	88 e0       	ldi	r24, 0x08	; 8
     c7a:	88 b9       	out	0x08, r24	; 8
    R_DDR = TriPinRL | HiPinRL;		//RL port for High-Pin and Tristate-Pin to output
     c7c:	ab 85       	ldd	r26, Y+11	; 0x0b
     c7e:	a4 b9       	out	0x04, r26	; 4
    R_PORT = TriPinRL | HiPinRL;	//RL port for High-Pin and Tristate-Pin to Vcc
     c80:	a5 b9       	out	0x05, r26	; 5
    adc.hp1 = W5msReadADC(HighPin);	//measure voltage at High-Pin  (Collector)
     c82:	81 2f       	mov	r24, r17
     c84:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
    if(adc.hp1 < 1600) {
     c88:	b6 e0       	ldi	r27, 0x06	; 6
     c8a:	80 34       	cpi	r24, 0x40	; 64
     c8c:	9b 07       	cpc	r25, r27
     c8e:	08 f0       	brcs	.+2      	; 0xc92 <__stack+0x393>
     c90:	4d c1       	rjmp	.+666    	; 0xf2c <__stack+0x62d>
       lcd_data('N');
       lcd_testpin(HighPin);
       lcd_space();
       wait_about1s();
#endif
       if(PartReady==1) {
     c92:	80 91 04 01 	lds	r24, 0x0104
     c96:	81 30       	cpi	r24, 0x01	; 1
     c98:	09 f4       	brne	.+2      	; 0xc9c <__stack+0x39d>
     c9a:	b5 c1       	rjmp	.+874    	; 0x1006 <__stack+0x707>
          goto widmes;
       }

       //Test auf Thyristor:
       //Gate discharge
       ChargePin10ms(TriPinRL,0);	//Tristate-Pin (Gate) across R_L 10ms to GND
     c9c:	8d 2d       	mov	r24, r13
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <ChargePin10ms>
       adc.hp3 = W5msReadADC(HighPin);	//read voltage at High-Pin (probably Anode) again
     ca4:	81 2f       	mov	r24, r17
     ca6:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
     caa:	7c 01       	movw	r14, r24
					//current should still flow, if not,
					// no Thyristor or holding current to low 
		 	
       R_PORT = 0;			//switch R_L for High-Pin (probably Anode) to GND (turn off)
     cac:	15 b8       	out	0x05, r1	; 5
       wait_about5ms();
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
       R_PORT = HiPinRL;		//switch R_L for High-Pin (probably Anode) again to VCC
     cb6:	c5 b8       	out	0x05, r12	; 5
       adc.hp2 = W5msReadADC(HighPin);	//measure voltage at the High-Pin (probably Anode) again
     cb8:	81 2f       	mov	r24, r17
     cba:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
       if((adc.hp3 < 1600) && (adc.hp2 > 4400)) {
     cbe:	e0 e4       	ldi	r30, 0x40	; 64
     cc0:	ee 16       	cp	r14, r30
     cc2:	e6 e0       	ldi	r30, 0x06	; 6
     cc4:	fe 06       	cpc	r15, r30
     cc6:	08 f0       	brcs	.+2      	; 0xcca <__stack+0x3cb>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__stack+0x459>
     cca:	f1 e1       	ldi	r31, 0x11	; 17
     ccc:	81 33       	cpi	r24, 0x31	; 49
     cce:	9f 07       	cpc	r25, r31
     cd0:	08 f4       	brcc	.+2      	; 0xcd4 <__stack+0x3d5>
     cd2:	42 c0       	rjmp	.+132    	; 0xd58 <__stack+0x459>
          //if the holding current was switched off the thyristor must be switched off too. 
          //if Thyristor was still swiched on, if gate was switched off => Thyristor
          PartFound = PART_THYRISTOR;
     cd4:	85 e0       	ldi	r24, 0x05	; 5
     cd6:	80 93 07 01 	sts	0x0107, r24
          //Test if Triac
          R_DDR = 0;
     cda:	14 b8       	out	0x04, r1	; 4
          R_PORT = 0;
     cdc:	15 b8       	out	0x05, r1	; 5
          ADC_PORT = LoADCp;	//Low-Pin fix to VCC
     cde:	2b 81       	ldd	r18, Y+3	; 0x03
     ce0:	28 b9       	out	0x08, r18	; 8
          wait_about5ms();
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
          R_DDR = HiPinRL;		//switch R_L port HighPin to output (GND)
     cea:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) > 244) {
     cec:	81 2f       	mov	r24, r17
     cee:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
     cf2:	85 3f       	cpi	r24, 0xF5	; 245
     cf4:	91 05       	cpc	r25, r1
     cf6:	08 f0       	brcs	.+2      	; 0xcfa <__stack+0x3fb>
     cf8:	13 c1       	rjmp	.+550    	; 0xf20 <__stack+0x621>
             goto savenresult;		//measure voltage at the  High-Pin (probably A2); if too high:
                                	//component has current => kein Triac
          }
          R_DDR = HiPinRL | TriPinRL;	//switch R_L port for TristatePin (Gate) to output (GND) => Triac should be triggered 
     cfa:	3b 85       	ldd	r19, Y+11	; 0x0b
     cfc:	34 b9       	out	0x04, r19	; 4
          if(W5msReadADC(TristatePin) < 977) {
     cfe:	82 2d       	mov	r24, r2
     d00:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
     d04:	a3 e0       	ldi	r26, 0x03	; 3
     d06:	81 3d       	cpi	r24, 0xD1	; 209
     d08:	9a 07       	cpc	r25, r26
     d0a:	08 f4       	brcc	.+2      	; 0xd0e <__stack+0x40f>
     d0c:	09 c1       	rjmp	.+530    	; 0xf20 <__stack+0x621>
             goto savenresult; 		//measure voltage at the Tristate-Pin (probably Gate) ;
                              		// if to low, abort 
          }
          if(ReadADC(HighPin) < 733) {
     d0e:	81 2f       	mov	r24, r17
     d10:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
     d14:	b2 e0       	ldi	r27, 0x02	; 2
     d16:	8d 3d       	cpi	r24, 0xDD	; 221
     d18:	9b 07       	cpc	r25, r27
     d1a:	08 f4       	brcc	.+2      	; 0xd1e <__stack+0x41f>
     d1c:	01 c1       	rjmp	.+514    	; 0xf20 <__stack+0x621>
             goto savenresult; 		//component has no current => no Triac => abort
          }
          R_DDR = HiPinRL;		//TristatePin (Gate) to input 
     d1e:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) < 733) {
     d20:	81 2f       	mov	r24, r17
     d22:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
     d26:	e2 e0       	ldi	r30, 0x02	; 2
     d28:	8d 3d       	cpi	r24, 0xDD	; 221
     d2a:	9e 07       	cpc	r25, r30
     d2c:	08 f4       	brcc	.+2      	; 0xd30 <__stack+0x431>
     d2e:	f8 c0       	rjmp	.+496    	; 0xf20 <__stack+0x621>
             goto savenresult; 		//component has no current without base current => no Triac => abort
          }
          R_PORT = HiPinRL;		//switch R_L port for HighPin to VCC => switch off holding current 
     d30:	c5 b8       	out	0x05, r12	; 5
          wait_about5ms();
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
          R_PORT = 0;			//switch R_L port for HighPin again to GND; Triac should now switched off
     d3a:	15 b8       	out	0x05, r1	; 5
          if(W5msReadADC(HighPin) > 244) {
     d3c:	81 2f       	mov	r24, r17
     d3e:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
     d42:	85 3f       	cpi	r24, 0xF5	; 245
     d44:	91 05       	cpc	r25, r1
     d46:	08 f0       	brcs	.+2      	; 0xd4a <__stack+0x44b>
     d48:	eb c0       	rjmp	.+470    	; 0xf20 <__stack+0x621>
             goto savenresult;		//measure voltage at the High-Pin (probably A2) ;
                                	//if to high, component is not switched off => no Triac, abort
         }
         PartFound = PART_TRIAC;
     d4a:	84 e0       	ldi	r24, 0x04	; 4
     d4c:	80 93 07 01 	sts	0x0107, r24
         PartReady = 1;
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	80 93 04 01 	sts	0x0104, r24
         goto savenresult;
     d56:	e4 c0       	rjmp	.+456    	; 0xf20 <__stack+0x621>
        }
      //Test if NPN Transistor or MOSFET
      // ADC_DDR = LoADCm;	//Low-Pin to output 0V
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
     d58:	0c 29       	or	r16, r12
     d5a:	04 b9       	out	0x04, r16	; 4
      R_PORT = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to VCC
     d5c:	05 b9       	out	0x05, r16	; 5
      wait_about50ms();
     d5e:	8a e0       	ldi	r24, 0x0A	; 10
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
      adc.hp2 = ADCconfig.U_AVCC - ReadADC(HighPin);	//measure the voltage at the collector resistor 
     d66:	60 90 3d 01 	lds	r6, 0x013D
     d6a:	70 90 3e 01 	lds	r7, 0x013E
     d6e:	81 2f       	mov	r24, r17
     d70:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
     d74:	68 1a       	sub	r6, r24
     d76:	79 0a       	sbc	r7, r25
      adc.tp2 = ADCconfig.U_AVCC - ReadADC(TristatePin);	//measure the voltage at the base resistor 
     d78:	a0 90 3d 01 	lds	r10, 0x013D
     d7c:	b0 90 3e 01 	lds	r11, 0x013E
     d80:	82 2d       	mov	r24, r2
     d82:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
     d86:	a8 1a       	sub	r10, r24
     d88:	b9 0a       	sbc	r11, r25
       lcd_space();
       lcd_data('T');
       lcd_data('P');
       lcd_string(utoa(adc.tp2,outval,10));
#endif
      if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     d8a:	80 91 07 01 	lds	r24, 0x0107
     d8e:	82 50       	subi	r24, 0x02	; 2
     d90:	82 30       	cpi	r24, 0x02	; 2
     d92:	18 f4       	brcc	.+6      	; 0xd9a <__stack+0x49b>
         PartReady = 1;	//check, if test is already done once
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	80 93 04 01 	sts	0x0104, r24
      }
      trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.tp2 - ReadADC(LowPin);
     d9a:	80 90 04 01 	lds	r8, 0x0104
     d9e:	99 24       	eor	r9, r9
     da0:	e0 90 3d 01 	lds	r14, 0x013D
     da4:	f0 90 3e 01 	lds	r15, 0x013E
     da8:	ea 18       	sub	r14, r10
     daa:	fb 08       	sbc	r15, r11
     dac:	83 2d       	mov	r24, r3
     dae:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
     db2:	f4 01       	movw	r30, r8
     db4:	ee 0f       	add	r30, r30
     db6:	ff 1f       	adc	r31, r31
     db8:	e0 5b       	subi	r30, 0xB0	; 176
     dba:	fe 4f       	sbci	r31, 0xFE	; 254
     dbc:	e8 1a       	sub	r14, r24
     dbe:	f9 0a       	sbc	r15, r25
     dc0:	f1 82       	std	Z+1, r15	; 0x01
     dc2:	e0 82       	st	Z, r14

      //compute current amplification factor for common Emitter
      //hFE = B = Collector current / Base current
      if(adc.tp2 < 53) {
     dc4:	f5 e3       	ldi	r31, 0x35	; 53
     dc6:	af 16       	cp	r10, r31
     dc8:	b1 04       	cpc	r11, r1
     dca:	18 f4       	brcc	.+6      	; 0xdd2 <__stack+0x4d3>
#if DebugOut == 5
         lcd_data('<');
         lcd_data('5');
         lcd_data('3');
#endif
         adc.tp2 = 53;
     dcc:	75 e3       	ldi	r23, 0x35	; 53
     dce:	a7 2e       	mov	r10, r23
     dd0:	b1 2c       	mov	r11, r1
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     dd2:	e0 90 04 01 	lds	r14, 0x0104
     dd6:	ff 24       	eor	r15, r15
     dd8:	c3 01       	movw	r24, r6
     dda:	a0 e0       	ldi	r26, 0x00	; 0
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	8b 87       	std	Y+11, r24	; 0x0b
     de0:	9c 87       	std	Y+12, r25	; 0x0c
     de2:	ad 87       	std	Y+13, r26	; 0x0d
     de4:	be 87       	std	Y+14, r27	; 0x0e
     de6:	20 91 08 01 	lds	r18, 0x0108
     dea:	30 91 09 01 	lds	r19, 0x0109
     dee:	40 e0       	ldi	r20, 0x00	; 0
     df0:	50 e0       	ldi	r21, 0x00	; 0
     df2:	60 e6       	ldi	r22, 0x60	; 96
     df4:	77 eb       	ldi	r23, 0xB7	; 183
     df6:	87 e4       	ldi	r24, 0x47	; 71
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
     dfe:	6b 85       	ldd	r22, Y+11	; 0x0b
     e00:	7c 85       	ldd	r23, Y+12	; 0x0c
     e02:	8d 85       	ldd	r24, Y+13	; 0x0d
     e04:	9e 85       	ldd	r25, Y+14	; 0x0e
     e06:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp2;	
     e0a:	95 01       	movw	r18, r10
     e0c:	40 e0       	ldi	r20, 0x00	; 0
     e0e:	50 e0       	ldi	r21, 0x00	; 0
     e10:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
#endif
         adc.tp2 = 53;
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     e14:	f7 01       	movw	r30, r14
     e16:	ee 0f       	add	r30, r30
     e18:	ff 1f       	adc	r31, r31
     e1a:	ee 0f       	add	r30, r30
     e1c:	ff 1f       	adc	r31, r31
     e1e:	e8 5b       	subi	r30, 0xB8	; 184
     e20:	fe 4f       	sbci	r31, 0xFE	; 254
     e22:	20 83       	st	Z, r18
     e24:	31 83       	std	Z+1, r19	; 0x01
     e26:	42 83       	std	Z+2, r20	; 0x02
     e28:	53 83       	std	Z+3, r21	; 0x03
      trans.hfe[PartReady] = ((adc.hp2 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
#endif
#ifdef COMMON_COLLECTOR
       //compare current amplification factor for common Collector (Emitter follower)
       // hFE = (Emitterstrom - Basisstrom) / Basisstrom
       if (c_hfe >  trans.hfe[PartReady]) {
     e2a:	8c 81       	ldd	r24, Y+4	; 0x04
     e2c:	9d 81       	ldd	r25, Y+5	; 0x05
     e2e:	ae 81       	ldd	r26, Y+6	; 0x06
     e30:	bf 81       	ldd	r27, Y+7	; 0x07
     e32:	28 17       	cp	r18, r24
     e34:	39 07       	cpc	r19, r25
     e36:	4a 07       	cpc	r20, r26
     e38:	5b 07       	cpc	r21, r27
     e3a:	a8 f4       	brcc	.+42     	; 0xe66 <__stack+0x567>
          trans.hfe[PartReady] = c_hfe;
     e3c:	80 83       	st	Z, r24
     e3e:	91 83       	std	Z+1, r25	; 0x01
     e40:	a2 83       	std	Z+2, r26	; 0x02
     e42:	b3 83       	std	Z+3, r27	; 0x03
          trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.lp1 - adc.tp1;
     e44:	f7 01       	movw	r30, r14
     e46:	ee 0f       	add	r30, r30
     e48:	ff 1f       	adc	r31, r31
     e4a:	e0 5b       	subi	r30, 0xB0	; 176
     e4c:	fe 4f       	sbci	r31, 0xFE	; 254
     e4e:	80 91 3d 01 	lds	r24, 0x013D
     e52:	90 91 3e 01 	lds	r25, 0x013E
     e56:	84 19       	sub	r24, r4
     e58:	95 09       	sbc	r25, r5
     e5a:	a9 89       	ldd	r26, Y+17	; 0x11
     e5c:	ba 89       	ldd	r27, Y+18	; 0x12
     e5e:	8a 1b       	sub	r24, r26
     e60:	9b 0b       	sbc	r25, r27
     e62:	91 83       	std	Z+1, r25	; 0x01
     e64:	80 83       	st	Z, r24
       }
#endif

      if(adc.tp2 > 2557) {		// Basis-voltage R_H is low enough
     e66:	be ef       	ldi	r27, 0xFE	; 254
     e68:	ab 16       	cp	r10, r27
     e6a:	b9 e0       	ldi	r27, 0x09	; 9
     e6c:	bb 06       	cpc	r11, r27
     e6e:	38 f0       	brcs	.+14     	; 0xe7e <__stack+0x57f>
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
     e70:	82 e0       	ldi	r24, 0x02	; 2
     e72:	80 93 07 01 	sts	0x0107, r24
         PartMode = PART_MODE_NPN;
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	80 93 06 01 	sts	0x0106, r24
     e7c:	51 c0       	rjmp	.+162    	; 0xf20 <__stack+0x621>
      } else { // Basis has low current
         if((adc.lp_otr < 97) && (adc.hp2 > 3400)) {
     e7e:	e9 85       	ldd	r30, Y+9	; 0x09
     e80:	fa 85       	ldd	r31, Y+10	; 0x0a
     e82:	e1 36       	cpi	r30, 0x61	; 97
     e84:	f1 05       	cpc	r31, r1
     e86:	08 f0       	brcs	.+2      	; 0xe8a <__stack+0x58b>
     e88:	4b c0       	rjmp	.+150    	; 0xf20 <__stack+0x621>
     e8a:	f9 e4       	ldi	r31, 0x49	; 73
     e8c:	6f 16       	cp	r6, r31
     e8e:	fd e0       	ldi	r31, 0x0D	; 13
     e90:	7f 06       	cpc	r7, r31
     e92:	08 f4       	brcc	.+2      	; 0xe96 <__stack+0x597>
     e94:	45 c0       	rjmp	.+138    	; 0xf20 <__stack+0x621>
            //if flow voltage in switched off mode low enough?
            //(since D-Mode-FET will be detected in error as E-Mode )
            PartFound = PART_FET;	//N-Kanal-MOSFET is found (Basis/Gate will Not be pulled down)
     e96:	83 e0       	ldi	r24, 0x03	; 3
     e98:	80 93 07 01 	sts	0x0107, r24
            PartMode = PART_MODE_N_E_MOS;
     e9c:	82 e0       	ldi	r24, 0x02	; 2
     e9e:	80 93 06 01 	sts	0x0106, r24
            wait_about1s();
#endif
            //Switching of Drain is monitored with digital input
            // Low level is specified up to 0.3 * VCC
            // High level is specified above 0.6 * VCC
            PinMSK = HiADCm & 7;
     ea2:	e9 80       	ldd	r14, Y+1	; 0x01
     ea4:	27 e0       	ldi	r18, 0x07	; 7
     ea6:	e2 22       	and	r14, r18
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
     ea8:	82 2d       	mov	r24, r2
     eaa:	80 64       	ori	r24, 0x40	; 64
     eac:	80 93 7c 00 	sts	0x007C, r24
            gthvoltage = 1;			// round up ((1*4)/9)
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	90 93 59 01 	sts	0x0159, r25
     eb8:	80 93 58 01 	sts	0x0158, r24
     ebc:	4b e0       	ldi	r20, 0x0B	; 11
     ebe:	a4 2e       	mov	r10, r20
            for(ii=0;ii<11;ii++) {
            	wdt_reset();
     ec0:	a8 95       	wdr
            	ChargePin10ms(TriPinRL,0);	// discharge Gate 10ms with RL 
     ec2:	8d 2d       	mov	r24, r13
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <ChargePin10ms>
                R_DDR = HiPinRL | TriPinRH;	// slowly charge Gate 
     eca:	04 b9       	out	0x04, r16	; 4
                R_PORT = HiPinRL | TriPinRH;
     ecc:	05 b9       	out	0x05, r16	; 5
            	while ((ADC_PIN&PinMSK));	// Wait, until the MOSFET switch and Drain moved to low 
     ece:	86 b1       	in	r24, 0x06	; 6
     ed0:	8e 21       	and	r24, r14
     ed2:	e9 f7       	brne	.-6      	; 0xece <__stack+0x5cf>
                		// 0 is detected with input voltage of 2.12V to 2.24V (tested with mega168 & mega328)
                R_DDR = HiPinRL;		// switch off current
     ed4:	c4 b8       	out	0x04, r12	; 4
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
     ed6:	80 91 7a 00 	lds	r24, 0x007A
     eda:	80 64       	ori	r24, 0x40	; 64
     edc:	80 93 7a 00 	sts	0x007A, r24
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
     ee0:	80 91 7a 00 	lds	r24, 0x007A
     ee4:	86 fd       	sbrc	r24, 6
     ee6:	fc cf       	rjmp	.-8      	; 0xee0 <__stack+0x5e1>
            	gthvoltage += ADCW;		// add result of ADC
     ee8:	80 91 78 00 	lds	r24, 0x0078
     eec:	90 91 79 00 	lds	r25, 0x0079
     ef0:	20 91 58 01 	lds	r18, 0x0158
     ef4:	30 91 59 01 	lds	r19, 0x0159
     ef8:	82 0f       	add	r24, r18
     efa:	93 1f       	adc	r25, r19
     efc:	90 93 59 01 	sts	0x0159, r25
     f00:	80 93 58 01 	sts	0x0158, r24
     f04:	aa 94       	dec	r10
            // High level is specified above 0.6 * VCC
            PinMSK = HiADCm & 7;
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
            gthvoltage = 1;			// round up ((1*4)/9)
            for(ii=0;ii<11;ii++) {
     f06:	e1 f6       	brne	.-72     	; 0xec0 <__stack+0x5c1>
                R_DDR = HiPinRL;		// switch off current
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
            	gthvoltage += ADCW;		// add result of ADC
            }
            gthvoltage *= 4;	//is equal to 44 * ADCW
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
            gthvoltage /= 9;	//scale to mV
     f10:	69 e0       	ldi	r22, 0x09	; 9
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__udivmodhi4>
     f18:	70 93 59 01 	sts	0x0159, r23
     f1c:	60 93 58 01 	sts	0x0158, r22
         }
      }
savenresult:
      trans.b = TristatePin;	// save Pin-constellation
     f20:	20 92 54 01 	sts	0x0154, r2
      trans.c = HighPin;
     f24:	10 93 55 01 	sts	0x0155, r17
      trans.e = LowPin;
     f28:	30 92 56 01 	sts	0x0156, r3
   } // end component conduct => npn
   ADC_DDR = TXD_MSK;		// switch all ADC-Ports to input
     f2c:	88 e0       	ldi	r24, 0x08	; 8
     f2e:	87 b9       	out	0x07, r24	; 7
   ADC_PORT = TXD_VAL;		// switch all ADC-Ports to 0 (no Pull up)
     f30:	88 b9       	out	0x08, r24	; 8
   //Fertig
   //end das component has no connection between HighPin and LowPin
   goto widmes;
     f32:	69 c0       	rjmp	.+210    	; 0x1006 <__stack+0x707>
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
     f34:	88 e0       	ldi	r24, 0x08	; 8
     f36:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;	//Low-Pin fix to GND
     f38:	3b 81       	ldd	r19, Y+3	; 0x03
     f3a:	37 b9       	out	0x07, r19	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     f3c:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
     f3e:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
     f40:	8d 2d       	mov	r24, r13
     f42:	61 e0       	ldi	r22, 0x01	; 1
     f44:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <ChargePin10ms>
  adc.lp_otr = W5msReadADC(HighPin) - ReadADC(LowPin);
     f48:	81 2f       	mov	r24, r17
     f4a:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
     f4e:	4c 01       	movw	r8, r24
     f50:	83 2d       	mov	r24, r3
     f52:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
     f56:	88 1a       	sub	r8, r24
     f58:	99 0a       	sbc	r9, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
     f5a:	88 85       	ldd	r24, Y+8	; 0x08
     f5c:	84 b9       	out	0x04, r24	; 4
  R_PORT = HiPinRH;
     f5e:	85 b9       	out	0x05, r24	; 5
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
     f60:	81 2f       	mov	r24, r17
     f62:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
     f66:	5c 01       	movw	r10, r24

  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     f68:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
     f6a:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
     f6c:	8d 2d       	mov	r24, r13
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <ChargePin10ms>
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
     f74:	81 2f       	mov	r24, r17
     f76:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
     f7a:	7c 01       	movw	r14, r24
     f7c:	83 2d       	mov	r24, r3
     f7e:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
     f82:	e8 1a       	sub	r14, r24
     f84:	f9 0a       	sbc	r15, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
     f86:	98 85       	ldd	r25, Y+8	; 0x08
     f88:	94 b9       	out	0x04, r25	; 4
  R_PORT = HiPinRH;
     f8a:	95 b9       	out	0x05, r25	; 5
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
     f8c:	81 2f       	mov	r24, r17
     f8e:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
     f92:	e8 14       	cp	r14, r8
     f94:	f9 04       	cpc	r15, r9
     f96:	18 f0       	brcs	.+6      	; 0xf9e <__stack+0x69f>
  R_PORT = HiPinRL;
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
  R_PORT = HiPinRH;
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
     f98:	a8 2e       	mov	r10, r24
     f9a:	b9 2e       	mov	r11, r25
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
     f9c:	47 01       	movw	r8, r14
  lcd_string(utoa(adc.hp3,outval,10));
  lcd_space();
  wait_about1s();
#endif

  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
     f9e:	c4 01       	movw	r24, r8
     fa0:	87 59       	subi	r24, 0x97	; 151
     fa2:	90 40       	sbci	r25, 0x00	; 0
     fa4:	a1 e1       	ldi	r26, 0x11	; 17
     fa6:	89 38       	cpi	r24, 0x89	; 137
     fa8:	9a 07       	cpc	r25, r26
     faa:	68 f5       	brcc	.+90     	; 0x1006 <__stack+0x707>
     fac:	c5 01       	movw	r24, r10
     fae:	23 e0       	ldi	r18, 0x03	; 3
     fb0:	96 95       	lsr	r25
     fb2:	87 95       	ror	r24
     fb4:	2a 95       	dec	r18
     fb6:	e1 f7       	brne	.-8      	; 0xfb0 <__stack+0x6b1>
     fb8:	8a 0d       	add	r24, r10
     fba:	9b 1d       	adc	r25, r11
     fbc:	88 15       	cp	r24, r8
     fbe:	99 05       	cpc	r25, r9
     fc0:	10 f5       	brcc	.+68     	; 0x1006 <__stack+0x707>
     fc2:	03 e0       	ldi	r16, 0x03	; 3
     fc4:	aa 0c       	add	r10, r10
     fc6:	bb 1c       	adc	r11, r11
     fc8:	0a 95       	dec	r16
     fca:	e1 f7       	brne	.-8      	; 0xfc4 <__stack+0x6c5>
     fcc:	8a 14       	cp	r8, r10
     fce:	9b 04       	cpc	r9, r11
     fd0:	d0 f4       	brcc	.+52     	; 0x1006 <__stack+0x707>
     //voltage is above 0,15V and below 4,64V => Ok
     if((PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
     fd2:	80 91 07 01 	lds	r24, 0x0107
     fd6:	88 23       	and	r24, r24
     fd8:	11 f0       	breq	.+4      	; 0xfde <__stack+0x6df>
     fda:	86 30       	cpi	r24, 0x06	; 6
     fdc:	19 f4       	brne	.+6      	; 0xfe4 <__stack+0x6e5>
        PartFound = PART_DIODE;	//mark for diode only, if no other component is found
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	80 93 07 01 	sts	0x0107, r24
				//since there is a problem with Transistors with a protection diode
#if DebugOut == 4
        lcd_data('D');
#endif
     }
     diodes[NumOfDiodes].Anode = HighPin;
     fe4:	80 91 05 01 	lds	r24, 0x0105
     fe8:	e8 2f       	mov	r30, r24
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	ee 0f       	add	r30, r30
     fee:	ff 1f       	adc	r31, r31
     ff0:	ee 0f       	add	r30, r30
     ff2:	ff 1f       	adc	r31, r31
     ff4:	e1 59       	subi	r30, 0x91	; 145
     ff6:	fe 4f       	sbci	r31, 0xFE	; 254
     ff8:	10 83       	st	Z, r17
     diodes[NumOfDiodes].Cathode = LowPin;
     ffa:	31 82       	std	Z+1, r3	; 0x01
     diodes[NumOfDiodes].Voltage = adc.hp1;	// voltage in Millivolt 
     ffc:	93 82       	std	Z+3, r9	; 0x03
     ffe:	82 82       	std	Z+2, r8	; 0x02
     NumOfDiodes++;
    1000:	8f 5f       	subi	r24, 0xFF	; 255
    1002:	80 93 05 01 	sts	0x0105, r24
#if DebugOut == 4
  lcd_data(NumOfDiodes+'0');
#endif

widmes:
  if (NumOfDiodes > 0) goto clean_ports;
    1006:	80 91 05 01 	lds	r24, 0x0105
    100a:	88 23       	and	r24, r24
    100c:	09 f0       	breq	.+2      	; 0x1010 <__stack+0x711>
    100e:	12 c2       	rjmp	.+1060   	; 0x1434 <__stack+0xb35>
  // resistor measurement
  wdt_reset();
    1010:	a8 95       	wdr
// U_SCALE can be set to 4 for better resolution of ReadADC result
#if U_SCALE != 1
  ADCconfig.U_AVCC *= U_SCALE;	// scale to higher resolution, mV scale is not required
    1012:	80 91 3d 01 	lds	r24, 0x013D
    1016:	90 91 3e 01 	lds	r25, 0x013E
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	90 93 3e 01 	sts	0x013E, r25
    1026:	80 93 3d 01 	sts	0x013D, r24
  ADCconfig.U_Bandgap *= U_SCALE;
    102a:	80 91 3b 01 	lds	r24, 0x013B
    102e:	90 91 3c 01 	lds	r25, 0x013C
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	90 93 3c 01 	sts	0x013C, r25
    103e:	80 93 3b 01 	sts	0x013B, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = R_ANZ_MESS;	// switch to special number of repetitions
    1042:	8e eb       	ldi	r24, 0xBE	; 190
    1044:	80 93 39 01 	sts	0x0139, r24
#endif
  #define MAX_REPEAT (700 / (5 + R_ANZ_MESS/8))
  ADC_PORT = TXD_VAL;
    1048:	88 e0       	ldi	r24, 0x08	; 8
    104a:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
    104c:	bb 81       	ldd	r27, Y+3	; 0x03
    104e:	b7 b9       	out	0x07, r27	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    1050:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;	
    1052:	c5 b8       	out	0x05, r12	; 5
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
    1054:	ee 24       	eor	r14, r14
    1056:	ff 24       	eor	r15, r15
  for (ii=1;ii<MAX_REPEAT;ii++) {
    1058:	21 e0       	ldi	r18, 0x01	; 1
    105a:	01 c0       	rjmp	.+2      	; 0x105e <__stack+0x75f>
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    105c:	7c 01       	movw	r14, r24
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
    105e:	83 2d       	mov	r24, r3
    1060:	2b 8b       	std	Y+19, r18	; 0x13
    1062:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
    1066:	08 2f       	mov	r16, r24
    1068:	49 2e       	mov	r4, r25
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    106a:	81 2f       	mov	r24, r17
    106c:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
     udiff = adc.hp1 - adc.hp2;
    1070:	ac 01       	movw	r20, r24
    1072:	4e 19       	sub	r20, r14
    1074:	5f 09       	sbc	r21, r15
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    1076:	2b 89       	ldd	r18, Y+19	; 0x13
    1078:	57 ff       	sbrs	r21, 7
    107a:	03 c0       	rjmp	.+6      	; 0x1082 <__stack+0x783>
    107c:	50 95       	com	r21
    107e:	41 95       	neg	r20
    1080:	5f 4f       	sbci	r21, 0xFF	; 255
    1082:	43 30       	cpi	r20, 0x03	; 3
    1084:	51 05       	cpc	r21, r1
    1086:	84 f4       	brge	.+32     	; 0x10a8 <__stack+0x7a9>
    1088:	ac 01       	movw	r20, r24
  adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
#endif
  if (adc.tp1 > adc.hp1) {
     adc.tp1 = adc.hp1;
  }
  R_PORT = 0;
    108a:	15 b8       	out	0x05, r1	; 5
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (GND)
    108c:	e8 85       	ldd	r30, Y+8	; 0x08
    108e:	e4 b9       	out	0x04, r30	; 4
  adc.hp2 = W5msReadADC(HighPin);	// read voltage, should be down
    1090:	81 2f       	mov	r24, r17
    1092:	4e 8b       	std	Y+22, r20	; 0x16
    1094:	5b 8b       	std	Y+19, r21	; 0x13
    1096:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
  if (adc.hp2 > (20*U_SCALE)) {
    109a:	4e 89       	ldd	r20, Y+22	; 0x16
    109c:	5b 89       	ldd	r21, Y+19	; 0x13
    109e:	81 35       	cpi	r24, 0x51	; 81
    10a0:	91 05       	cpc	r25, r1
    10a2:	08 f0       	brcs	.+2      	; 0x10a6 <__stack+0x7a7>
    10a4:	ac c1       	rjmp	.+856    	; 0x13fe <__stack+0xaff>
    10a6:	05 c0       	rjmp	.+10     	; 0x10b2 <__stack+0x7b3>
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     udiff = adc.hp1 - adc.hp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.hp2 = adc.hp1;
     wdt_reset();
    10a8:	a8 95       	wdr
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    10aa:	2f 5f       	subi	r18, 0xFF	; 255
    10ac:	29 31       	cpi	r18, 0x19	; 25
    10ae:	b1 f6       	brne	.-84     	; 0x105c <__stack+0x75d>
    10b0:	a6 c1       	rjmp	.+844    	; 0x13fe <__stack+0xaff>
     lcd_string(utoa(adc.hp2, outval, 10));
     lcd_space();
#endif
     goto testend;
  }
  R_PORT = HiPinRH;		//switch R_H for High-Pin to VCC
    10b2:	f8 85       	ldd	r31, Y+8	; 0x08
    10b4:	f5 b9       	out	0x05, r31	; 5
  adc.hp2 = W5msReadADC(HighPin);	// voltage at resistor Rx with R_H
    10b6:	81 2f       	mov	r24, r17
    10b8:	4e 8b       	std	Y+22, r20	; 0x16
    10ba:	5b 8b       	std	Y+19, r21	; 0x13
    10bc:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
    10c0:	7c 01       	movw	r14, r24

  ADC_DDR = HiADCm;		//switch High-Pin to output
    10c2:	29 81       	ldd	r18, Y+1	; 0x01
    10c4:	27 b9       	out	0x07, r18	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
    10c6:	28 b9       	out	0x08, r18	; 8
  R_PORT = 0;
    10c8:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
    10ca:	3a 81       	ldd	r19, Y+2	; 0x02
    10cc:	34 b9       	out	0x04, r19	; 4
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
    10ce:	aa 24       	eor	r10, r10
    10d0:	bb 24       	eor	r11, r11
  for (ii=1;ii<MAX_REPEAT;ii++) {
    10d2:	21 e0       	ldi	r18, 0x01	; 1
    10d4:	4e 89       	ldd	r20, Y+22	; 0x16
    10d6:	5b 89       	ldd	r21, Y+19	; 0x13
    10d8:	3a 01       	movw	r6, r20
    10da:	01 c0       	rjmp	.+2      	; 0x10de <__stack+0x7df>
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    10dc:	56 01       	movw	r10, r12
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
    10de:	81 2f       	mov	r24, r17
    10e0:	2b 8b       	std	Y+19, r18	; 0x13
    10e2:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
    10e6:	4c 01       	movw	r8, r24
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    10e8:	83 2d       	mov	r24, r3
    10ea:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
    10ee:	6c 01       	movw	r12, r24
     udiff = adc.lp1 - adc.lp2;
    10f0:	8a 19       	sub	r24, r10
    10f2:	9b 09       	sbc	r25, r11
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    10f4:	2b 89       	ldd	r18, Y+19	; 0x13
    10f6:	97 ff       	sbrs	r25, 7
    10f8:	03 c0       	rjmp	.+6      	; 0x1100 <__stack+0x801>
    10fa:	90 95       	com	r25
    10fc:	81 95       	neg	r24
    10fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1100:	83 30       	cpi	r24, 0x03	; 3
    1102:	91 05       	cpc	r25, r1
    1104:	8c f4       	brge	.+34     	; 0x1128 <__stack+0x829>
    1106:	a3 01       	movw	r20, r6
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = MEM_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	88 0f       	add	r24, r24
  adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
#endif
  if (adc.tp2 < adc.lp1) {
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
    110c:	84 b9       	out	0x04, r24	; 4
  adc.lp2 = W5msReadADC(LowPin);
    110e:	83 2d       	mov	r24, r3
    1110:	6e 8a       	std	Y+22, r6	; 0x16
    1112:	5b 8b       	std	Y+19, r21	; 0x13
    1114:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
    1118:	3c 01       	movw	r6, r24
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    111a:	4e 89       	ldd	r20, Y+22	; 0x16
    111c:	5b 89       	ldd	r21, Y+19	; 0x13
    111e:	84 e4       	ldi	r24, 0x44	; 68
    1120:	40 3c       	cpi	r20, 0xC0	; 192
    1122:	58 07       	cpc	r21, r24
    1124:	30 f0       	brcs	.+12     	; 0x1132 <__stack+0x833>
    1126:	0c c0       	rjmp	.+24     	; 0x1140 <__stack+0x841>
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     udiff = adc.lp1 - adc.lp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.lp2 = adc.lp1;
     wdt_reset();
    1128:	a8 95       	wdr
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
  R_PORT = 0;
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    112a:	2f 5f       	subi	r18, 0xFF	; 255
    112c:	29 31       	cpi	r18, 0x19	; 25
    112e:	b1 f6       	brne	.-84     	; 0x10dc <__stack+0x7dd>
    1130:	66 c1       	rjmp	.+716    	; 0x13fe <__stack+0xaff>
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
  adc.lp2 = W5msReadADC(LowPin);
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    1132:	95 e8       	ldi	r25, 0x85	; 133
    1134:	e9 16       	cp	r14, r25
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	f9 06       	cpc	r15, r25
    113a:	08 f0       	brcs	.+2      	; 0x113e <__stack+0x83f>
    113c:	60 c1       	rjmp	.+704    	; 0x13fe <__stack+0xaff>
    113e:	06 c0       	rjmp	.+12     	; 0x114c <__stack+0x84d>
     lcd_data('F');
#endif
     goto testend; 
  }
//    if((adc.hp2 + (adc.hp2 / 61)) < adc.hp1)
  if (adc.hp2 < (4972*U_SCALE)) { 
    1140:	a0 eb       	ldi	r26, 0xB0	; 176
    1142:	ea 16       	cp	r14, r26
    1144:	ad e4       	ldi	r26, 0x4D	; 77
    1146:	fa 06       	cpc	r15, r26
    1148:	08 f0       	brcs	.+2      	; 0x114c <__stack+0x84d>
    114a:	59 c1       	rjmp	.+690    	; 0x13fe <__stack+0xaff>
     // voltage breaks down with low test current and it is not nearly shorted  => resistor
//     if (adc.lp1 < 120) { // take measurement with R_H 
     if (adc.lp1 < (169*U_SCALE)) { // take measurement with R_H 
    114c:	b4 ea       	ldi	r27, 0xA4	; 164
    114e:	cb 16       	cp	r12, r27
    1150:	b2 e0       	ldi	r27, 0x02	; 2
    1152:	db 06       	cpc	r13, r27
    1154:	08 f0       	brcs	.+2      	; 0x1158 <__stack+0x859>
    1156:	72 c0       	rjmp	.+228    	; 0x123c <__stack+0x93d>
        ii = 'H';
        if (adc.lp2 < (38*U_SCALE)) {
    1158:	e8 e9       	ldi	r30, 0x98	; 152
    115a:	6e 16       	cp	r6, r30
    115c:	71 04       	cpc	r7, r1
    115e:	08 f4       	brcc	.+2      	; 0x1162 <__stack+0x863>
    1160:	4e c1       	rjmp	.+668    	; 0x13fe <__stack+0xaff>
           // measurement > 60MOhm to big resistance
           goto testend;
        }
        // two measurements with R_H resistors (470k) are made:
        // lirx1 (measurement at HighPin)
        lirx1 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)adc.hp2 / (ADCconfig.U_AVCC - adc.hp2);
    1162:	80 90 3d 01 	lds	r8, 0x013D
    1166:	90 90 3e 01 	lds	r9, 0x013E
    116a:	b7 01       	movw	r22, r14
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	28 e9       	ldi	r18, 0x98	; 152
    1172:	37 eb       	ldi	r19, 0xB7	; 183
    1174:	40 e0       	ldi	r20, 0x00	; 0
    1176:	50 e0       	ldi	r21, 0x00	; 0
    1178:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
    117c:	94 01       	movw	r18, r8
    117e:	2e 19       	sub	r18, r14
    1180:	3f 09       	sbc	r19, r15
    1182:	40 e0       	ldi	r20, 0x00	; 0
    1184:	50 e0       	ldi	r21, 0x00	; 0
    1186:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
    118a:	59 01       	movw	r10, r18
    118c:	6a 01       	movw	r12, r20
        // lirx2 (measurement at LowPin)
        lirx2 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)(ADCconfig.U_AVCC - adc.lp2) / adc.lp2;
    118e:	86 18       	sub	r8, r6
    1190:	97 08       	sbc	r9, r7
    1192:	b4 01       	movw	r22, r8
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	28 e9       	ldi	r18, 0x98	; 152
    119a:	37 eb       	ldi	r19, 0xB7	; 183
    119c:	40 e0       	ldi	r20, 0x00	; 0
    119e:	50 e0       	ldi	r21, 0x00	; 0
    11a0:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
    11a4:	93 01       	movw	r18, r6
    11a6:	40 e0       	ldi	r20, 0x00	; 0
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
#define FAKT_LOW 2		//resolution is about twice as good
#else
#define FAKT_LOW 4		//resolution is about four times better
#endif
#ifdef AUTOSCALE_ADC
        if (adc.hp2 < U_INT_LIMIT) {
    11ae:	f8 e7       	ldi	r31, 0x78	; 120
    11b0:	ef 16       	cp	r14, r31
    11b2:	ff e0       	ldi	r31, 0x0F	; 15
    11b4:	ff 06       	cpc	r15, r31
    11b6:	70 f4       	brcc	.+28     	; 0x11d4 <__stack+0x8d5>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    11b8:	c6 01       	movw	r24, r12
    11ba:	b5 01       	movw	r22, r10
    11bc:	e2 e0       	ldi	r30, 0x02	; 2
    11be:	66 0f       	add	r22, r22
    11c0:	77 1f       	adc	r23, r23
    11c2:	88 1f       	adc	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	ea 95       	dec	r30
    11c8:	d1 f7       	brne	.-12     	; 0x11be <__stack+0x8bf>
    11ca:	62 0f       	add	r22, r18
    11cc:	73 1f       	adc	r23, r19
    11ce:	84 1f       	adc	r24, r20
    11d0:	95 1f       	adc	r25, r21
    11d2:	12 c0       	rjmp	.+36     	; 0x11f8 <__stack+0x8f9>
        } else if (adc.lp2 < U_INT_LIMIT){
    11d4:	88 e7       	ldi	r24, 0x78	; 120
    11d6:	68 16       	cp	r6, r24
    11d8:	8f e0       	ldi	r24, 0x0F	; 15
    11da:	78 06       	cpc	r7, r24
    11dc:	a0 f4       	brcc	.+40     	; 0x1206 <__stack+0x907>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    11de:	ca 01       	movw	r24, r20
    11e0:	b9 01       	movw	r22, r18
    11e2:	22 e0       	ldi	r18, 0x02	; 2
    11e4:	66 0f       	add	r22, r22
    11e6:	77 1f       	adc	r23, r23
    11e8:	88 1f       	adc	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	2a 95       	dec	r18
    11ee:	d1 f7       	brne	.-12     	; 0x11e4 <__stack+0x8e5>
    11f0:	6a 0d       	add	r22, r10
    11f2:	7b 1d       	adc	r23, r11
    11f4:	8c 1d       	adc	r24, r12
    11f6:	9d 1d       	adc	r25, r13
    11f8:	25 e0       	ldi	r18, 0x05	; 5
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
    1204:	08 c0       	rjmp	.+16     	; 0x1216 <__stack+0x917>
        } else 
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_H measurements
    1206:	2a 0d       	add	r18, r10
    1208:	3b 1d       	adc	r19, r11
    120a:	4c 1d       	adc	r20, r12
    120c:	5d 1d       	adc	r21, r13
    120e:	56 95       	lsr	r21
    1210:	47 95       	ror	r20
    1212:	37 95       	ror	r19
    1214:	27 95       	ror	r18
        }
        lrx1 *= 100;
    1216:	ca 01       	movw	r24, r20
    1218:	b9 01       	movw	r22, r18
    121a:	24 e6       	ldi	r18, 0x64	; 100
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	40 e0       	ldi	r20, 0x00	; 0
    1220:	50 e0       	ldi	r21, 0x00	; 0
    1222:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
    1226:	6b 01       	movw	r12, r22
    1228:	7c 01       	movw	r14, r24
        lrx1 += RH_OFFSET;			// add constant for correction of systematic error
    122a:	8c ea       	ldi	r24, 0xAC	; 172
    122c:	9d e0       	ldi	r25, 0x0D	; 13
    122e:	a0 e0       	ldi	r26, 0x00	; 0
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	c8 0e       	add	r12, r24
    1234:	d9 1e       	adc	r13, r25
    1236:	ea 1e       	adc	r14, r26
    1238:	fb 1e       	adc	r15, r27
    123a:	78 c0       	rjmp	.+240    	; 0x132c <__stack+0xa2d>
    123c:	80 2f       	mov	r24, r16
    123e:	94 2d       	mov	r25, r4
    1240:	48 17       	cp	r20, r24
    1242:	59 07       	cpc	r21, r25
    1244:	08 f4       	brcc	.+2      	; 0x1248 <__stack+0x949>
    1246:	ca 01       	movw	r24, r20
    1248:	76 01       	movw	r14, r12
    124a:	c8 14       	cp	r12, r8
    124c:	d9 04       	cpc	r13, r9
    124e:	08 f4       	brcc	.+2      	; 0x1252 <__stack+0x953>
    1250:	74 01       	movw	r14, r8
    1252:	3c 01       	movw	r6, r24
    1254:	84 17       	cp	r24, r20
    1256:	95 07       	cpc	r25, r21
    1258:	08 f4       	brcc	.+2      	; 0x125c <__stack+0x95d>
    125a:	3a 01       	movw	r6, r20
        // two measurements with R_L resistors (680) are made:
        // lirx1 (measurement at HighPin)
        if (adc.tp1 > adc.hp1) {
           adc.hp1 = adc.tp1;		//diff negativ is illegal
        }
        lirx1 =(unsigned long)RR680PL * (unsigned long)(adc.hp1 - adc.tp1) / (ADCconfig.U_AVCC - adc.hp1);
    125c:	b3 01       	movw	r22, r6
    125e:	68 1b       	sub	r22, r24
    1260:	79 0b       	sbc	r23, r25
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	20 91 08 01 	lds	r18, 0x0108
    126a:	30 91 09 01 	lds	r19, 0x0109
    126e:	40 e0       	ldi	r20, 0x00	; 0
    1270:	50 e0       	ldi	r21, 0x00	; 0
    1272:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
    1276:	20 91 3d 01 	lds	r18, 0x013D
    127a:	30 91 3e 01 	lds	r19, 0x013E
    127e:	26 19       	sub	r18, r6
    1280:	37 09       	sbc	r19, r7
    1282:	40 e0       	ldi	r20, 0x00	; 0
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
    128a:	49 01       	movw	r8, r18
    128c:	5a 01       	movw	r10, r20
    128e:	27 01       	movw	r4, r14
    1290:	ce 14       	cp	r12, r14
    1292:	df 04       	cpc	r13, r15
    1294:	08 f4       	brcc	.+2      	; 0x1298 <__stack+0x999>
    1296:	26 01       	movw	r4, r12
        if (adc.tp2 < adc.lp1) {
           adc.lp1 = adc.tp2;		//diff negativ is illegal
        }
        // lirx2 (Measurement at LowPin)
        lirx2 =(unsigned long)RR680MI * (unsigned long)(adc.tp2 -adc.lp1) / adc.lp1;
    1298:	e4 18       	sub	r14, r4
    129a:	f5 08       	sbc	r15, r5
    129c:	b7 01       	movw	r22, r14
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	20 91 02 01 	lds	r18, 0x0102
    12a6:	30 91 03 01 	lds	r19, 0x0103
    12aa:	40 e0       	ldi	r20, 0x00	; 0
    12ac:	50 e0       	ldi	r21, 0x00	; 0
    12ae:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
    12b2:	92 01       	movw	r18, r4
    12b4:	40 e0       	ldi	r20, 0x00	; 0
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
//     lrx1 =(unsigned long)R_L_VAL * (unsigned long)adc.hp1 / (adc.hp3 - adc.hp1);

#ifdef AUTOSCALE_ADC
        if (adc.hp1 < U_INT_LIMIT) {
    12bc:	98 e7       	ldi	r25, 0x78	; 120
    12be:	69 16       	cp	r6, r25
    12c0:	9f e0       	ldi	r25, 0x0F	; 15
    12c2:	79 06       	cpc	r7, r25
    12c4:	70 f4       	brcc	.+28     	; 0x12e2 <__stack+0x9e3>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    12c6:	c5 01       	movw	r24, r10
    12c8:	b4 01       	movw	r22, r8
    12ca:	02 e0       	ldi	r16, 0x02	; 2
    12cc:	66 0f       	add	r22, r22
    12ce:	77 1f       	adc	r23, r23
    12d0:	88 1f       	adc	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	0a 95       	dec	r16
    12d6:	d1 f7       	brne	.-12     	; 0x12cc <__stack+0x9cd>
    12d8:	62 0f       	add	r22, r18
    12da:	73 1f       	adc	r23, r19
    12dc:	84 1f       	adc	r24, r20
    12de:	95 1f       	adc	r25, r21
    12e0:	12 c0       	rjmp	.+36     	; 0x1306 <__stack+0xa07>
        } else if (adc.lp1 < U_INT_LIMIT) {
    12e2:	a8 e7       	ldi	r26, 0x78	; 120
    12e4:	4a 16       	cp	r4, r26
    12e6:	af e0       	ldi	r26, 0x0F	; 15
    12e8:	5a 06       	cpc	r5, r26
    12ea:	b0 f4       	brcc	.+44     	; 0x1318 <__stack+0xa19>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    12ec:	ca 01       	movw	r24, r20
    12ee:	b9 01       	movw	r22, r18
    12f0:	b2 e0       	ldi	r27, 0x02	; 2
    12f2:	66 0f       	add	r22, r22
    12f4:	77 1f       	adc	r23, r23
    12f6:	88 1f       	adc	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	ba 95       	dec	r27
    12fc:	d1 f7       	brne	.-12     	; 0x12f2 <__stack+0x9f3>
    12fe:	68 0d       	add	r22, r8
    1300:	79 1d       	adc	r23, r9
    1302:	8a 1d       	adc	r24, r10
    1304:	9b 1d       	adc	r25, r11
    1306:	25 e0       	ldi	r18, 0x05	; 5
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e0       	ldi	r20, 0x00	; 0
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
    1312:	69 01       	movw	r12, r18
    1314:	7a 01       	movw	r14, r20
    1316:	0a c0       	rjmp	.+20     	; 0x132c <__stack+0xa2d>
        } else
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_L measurements
    1318:	69 01       	movw	r12, r18
    131a:	7a 01       	movw	r14, r20
    131c:	c8 0c       	add	r12, r8
    131e:	d9 1c       	adc	r13, r9
    1320:	ea 1c       	adc	r14, r10
    1322:	fb 1c       	adc	r15, r11
    1324:	f6 94       	lsr	r15
    1326:	e7 94       	ror	r14
    1328:	d7 94       	ror	r13
    132a:	c7 94       	ror	r12
  lcd_line4();
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
    132c:	80 91 07 01 	lds	r24, 0x0107
    1330:	82 30       	cpi	r24, 0x02	; 2
    1332:	18 f0       	brcs	.+6      	; 0x133a <__stack+0xa3b>
    1334:	86 30       	cpi	r24, 0x06	; 6
    1336:	09 f0       	breq	.+2      	; 0x133a <__stack+0xa3b>
    1338:	62 c0       	rjmp	.+196    	; 0x13fe <__stack+0xaff>
        for (ii=0; ii<ResistorsFound; ii++) {
    133a:	50 91 57 01 	lds	r21, 0x0157
    133e:	40 e0       	ldi	r20, 0x00	; 0
           // search measurements with inverse polarity 
           thisR = &resis[ii];
           if (thisR->rt != TristatePin) {
    1340:	8b e0       	ldi	r24, 0x0B	; 11
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	3e c0       	rjmp	.+124    	; 0x13c2 <__stack+0xac3>
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
           // search measurements with inverse polarity 
           thisR = &resis[ii];
    1346:	24 2f       	mov	r18, r20
    1348:	30 e0       	ldi	r19, 0x00	; 0
           if (thisR->rt != TristatePin) {
    134a:	28 9f       	mul	r18, r24
    134c:	f0 01       	movw	r30, r0
    134e:	29 9f       	mul	r18, r25
    1350:	f0 0d       	add	r31, r0
    1352:	38 9f       	mul	r19, r24
    1354:	f0 0d       	add	r31, r0
    1356:	11 24       	eor	r1, r1
    1358:	e8 5e       	subi	r30, 0xE8	; 232
    135a:	fe 4f       	sbci	r31, 0xFE	; 254
    135c:	22 85       	ldd	r18, Z+10	; 0x0a
    135e:	22 15       	cp	r18, r2
    1360:	11 f0       	breq	.+4      	; 0x1366 <__stack+0xa67>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    1362:	4f 5f       	subi	r20, 0xFF	; 255
    1364:	2e c0       	rjmp	.+92     	; 0x13c2 <__stack+0xac3>
           if (thisR->rt != TristatePin) {
              continue;
           }
           // must be measurement with inverse polarity 
           // resolution is 0.1 Ohm, 1 Ohm = 10 !
           lirx1 = (labs((long)lrx1 - (long)thisR->rx) * 10) / (lrx1 + thisR->rx + 100);
    1366:	80 80       	ld	r8, Z
    1368:	91 80       	ldd	r9, Z+1	; 0x01
    136a:	a2 80       	ldd	r10, Z+2	; 0x02
    136c:	b3 80       	ldd	r11, Z+3	; 0x03
    136e:	c7 01       	movw	r24, r14
    1370:	b6 01       	movw	r22, r12
    1372:	68 19       	sub	r22, r8
    1374:	79 09       	sbc	r23, r9
    1376:	8a 09       	sbc	r24, r10
    1378:	9b 09       	sbc	r25, r11
    137a:	97 ff       	sbrs	r25, 7
    137c:	07 c0       	rjmp	.+14     	; 0x138c <__stack+0xa8d>
    137e:	90 95       	com	r25
    1380:	80 95       	com	r24
    1382:	70 95       	com	r23
    1384:	61 95       	neg	r22
    1386:	7f 4f       	sbci	r23, 0xFF	; 255
    1388:	8f 4f       	sbci	r24, 0xFF	; 255
    138a:	9f 4f       	sbci	r25, 0xFF	; 255
    138c:	2a e0       	ldi	r18, 0x0A	; 10
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	40 e0       	ldi	r20, 0x00	; 0
    1392:	50 e0       	ldi	r21, 0x00	; 0
    1394:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
    1398:	a5 01       	movw	r20, r10
    139a:	94 01       	movw	r18, r8
    139c:	2c 59       	subi	r18, 0x9C	; 156
    139e:	3f 4f       	sbci	r19, 0xFF	; 255
    13a0:	4f 4f       	sbci	r20, 0xFF	; 255
    13a2:	5f 4f       	sbci	r21, 0xFF	; 255
    13a4:	2c 0d       	add	r18, r12
    13a6:	3d 1d       	adc	r19, r13
    13a8:	4e 1d       	adc	r20, r14
    13aa:	5f 1d       	adc	r21, r15
    13ac:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
           if (lirx1  > 0) {
    13b0:	21 15       	cp	r18, r1
    13b2:	31 05       	cpc	r19, r1
    13b4:	41 05       	cpc	r20, r1
    13b6:	51 05       	cpc	r21, r1
    13b8:	11 f5       	brne	.+68     	; 0x13fe <__stack+0xaff>
              DisplayValue(lirx1,-1,LCD_CHAR_OMEGA,3)
              lcd_space();
#endif
              goto testend; // <10% mismatch
           }
           PartFound = PART_RESISTOR;
    13ba:	86 e0       	ldi	r24, 0x06	; 6
    13bc:	80 93 07 01 	sts	0x0107, r24
           goto testend;
    13c0:	1e c0       	rjmp	.+60     	; 0x13fe <__stack+0xaff>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    13c2:	45 17       	cp	r20, r21
    13c4:	08 f4       	brcc	.+2      	; 0x13c8 <__stack+0xac9>
    13c6:	bf cf       	rjmp	.-130    	; 0x1346 <__stack+0xa47>
           }
           PartFound = PART_RESISTOR;
           goto testend;
        } // end for
        // no same resistor with the same Tristate-Pin found, new one
        thisR = &resis[ResistorsFound];		// pointer to a free resistor structure
    13c8:	25 2f       	mov	r18, r21
    13ca:	30 e0       	ldi	r19, 0x00	; 0
        thisR->rx = lrx1;		// save resistor value
    13cc:	8b e0       	ldi	r24, 0x0B	; 11
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	28 9f       	mul	r18, r24
    13d2:	f0 01       	movw	r30, r0
    13d4:	29 9f       	mul	r18, r25
    13d6:	f0 0d       	add	r31, r0
    13d8:	38 9f       	mul	r19, r24
    13da:	f0 0d       	add	r31, r0
    13dc:	11 24       	eor	r1, r1
    13de:	e8 5e       	subi	r30, 0xE8	; 232
    13e0:	fe 4f       	sbci	r31, 0xFE	; 254
    13e2:	c0 82       	st	Z, r12
    13e4:	d1 82       	std	Z+1, r13	; 0x01
    13e6:	e2 82       	std	Z+2, r14	; 0x02
    13e8:	f3 82       	std	Z+3, r15	; 0x03
#if FLASHEND > 0x1fff
        thisR->lx = 0;			// no inductance
    13ea:	14 82       	std	Z+4, r1	; 0x04
    13ec:	15 82       	std	Z+5, r1	; 0x05
    13ee:	16 82       	std	Z+6, r1	; 0x06
    13f0:	17 82       	std	Z+7, r1	; 0x07
#endif
        thisR->ra = LowPin;		// save Pin numbers
    13f2:	30 86       	std	Z+8, r3	; 0x08
        thisR->rb = HighPin;
    13f4:	11 87       	std	Z+9, r17	; 0x09
        thisR->rt = TristatePin;	// Tristate is saved for easier search of inverse measurement
    13f6:	22 86       	std	Z+10, r2	; 0x0a
        ResistorsFound++;			// 1 more resistor found
    13f8:	5f 5f       	subi	r21, 0xFF	; 255
    13fa:	50 93 57 01 	sts	0x0157, r21
#endif
     }
  }
  testend:
#if U_SCALE != 1
  ADCconfig.U_AVCC /= U_SCALE;		// scale back to mV resolution
    13fe:	80 91 3d 01 	lds	r24, 0x013D
    1402:	90 91 3e 01 	lds	r25, 0x013E
    1406:	96 95       	lsr	r25
    1408:	87 95       	ror	r24
    140a:	96 95       	lsr	r25
    140c:	87 95       	ror	r24
    140e:	90 93 3e 01 	sts	0x013E, r25
    1412:	80 93 3d 01 	sts	0x013D, r24
  ADCconfig.U_Bandgap /= U_SCALE;
    1416:	80 91 3b 01 	lds	r24, 0x013B
    141a:	90 91 3c 01 	lds	r25, 0x013C
    141e:	96 95       	lsr	r25
    1420:	87 95       	ror	r24
    1422:	96 95       	lsr	r25
    1424:	87 95       	ror	r24
    1426:	90 93 3c 01 	sts	0x013C, r25
    142a:	80 93 3b 01 	sts	0x013B, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = ANZ_MESS;		// switch back to standard number of repetition
    142e:	89 e1       	ldi	r24, 0x19	; 25
    1430:	80 93 39 01 	sts	0x0139, r24
#if DebugOut < 10
  wait_about2s();
#endif
#endif
 clean_ports:
  ADC_DDR = TXD_MSK;		// all ADC-Pins Input
    1434:	88 e0       	ldi	r24, 0x08	; 8
    1436:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// all ADC outputs to Ground, keine Pull up
    1438:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// all resistor-outputs to Input
    143a:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// all resistor-outputs to Ground, no Pull up
    143c:	15 b8       	out	0x05, r1	; 5
} // end CheckPins()
    143e:	66 96       	adiw	r28, 0x16	; 22
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	f8 94       	cli
    1444:	de bf       	out	0x3e, r29	; 62
    1446:	0f be       	out	0x3f, r0	; 63
    1448:	cd bf       	out	0x3d, r28	; 61
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	1f 91       	pop	r17
    1450:	0f 91       	pop	r16
    1452:	ff 90       	pop	r15
    1454:	ef 90       	pop	r14
    1456:	df 90       	pop	r13
    1458:	cf 90       	pop	r12
    145a:	bf 90       	pop	r11
    145c:	af 90       	pop	r10
    145e:	9f 90       	pop	r9
    1460:	8f 90       	pop	r8
    1462:	7f 90       	pop	r7
    1464:	6f 90       	pop	r6
    1466:	5f 90       	pop	r5
    1468:	4f 90       	pop	r4
    146a:	3f 90       	pop	r3
    146c:	2f 90       	pop	r2
    146e:	08 95       	ret

00001470 <PinLayout>:
TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
}
#endif

// show the Pin Layout of the device 
void PinLayout(char pin1, char pin2, char pin3) {
    1470:	ff 92       	push	r15
    1472:	0f 93       	push	r16
    1474:	1f 93       	push	r17
    1476:	18 2f       	mov	r17, r24
    1478:	06 2f       	mov	r16, r22
    147a:	f4 2e       	mov	r15, r20
// pin1-3 is EBC or SGD or CGA
#ifndef EBC_STYLE
   lcd_fix_string(N123_str);		//" 123="
    147c:	8e e7       	ldi	r24, 0x7E	; 126
    147e:	91 e0       	ldi	r25, 0x01	; 1
    1480:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
   for (ii=0;ii<3;ii++) {
    1484:	10 92 44 01 	sts	0x0144, r1
    1488:	1e c0       	rjmp	.+60     	; 0x14c6 <PinLayout+0x56>
       if (ii == trans.e)  lcd_data(pin1);	// Output Character in right order
    148a:	90 91 56 01 	lds	r25, 0x0156
    148e:	89 17       	cp	r24, r25
    1490:	19 f4       	brne	.+6      	; 0x1498 <PinLayout+0x28>
    1492:	81 2f       	mov	r24, r17
    1494:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
       if (ii == trans.b)  lcd_data(pin2);
    1498:	90 91 44 01 	lds	r25, 0x0144
    149c:	80 91 54 01 	lds	r24, 0x0154
    14a0:	98 17       	cp	r25, r24
    14a2:	19 f4       	brne	.+6      	; 0x14aa <PinLayout+0x3a>
    14a4:	80 2f       	mov	r24, r16
    14a6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
       if (ii == trans.c)  lcd_data(pin3);
    14aa:	90 91 44 01 	lds	r25, 0x0144
    14ae:	80 91 55 01 	lds	r24, 0x0155
    14b2:	98 17       	cp	r25, r24
    14b4:	19 f4       	brne	.+6      	; 0x14bc <PinLayout+0x4c>
    14b6:	8f 2d       	mov	r24, r15
    14b8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
// show the Pin Layout of the device 
void PinLayout(char pin1, char pin2, char pin3) {
// pin1-3 is EBC or SGD or CGA
#ifndef EBC_STYLE
   lcd_fix_string(N123_str);		//" 123="
   for (ii=0;ii<3;ii++) {
    14bc:	80 91 44 01 	lds	r24, 0x0144
    14c0:	8f 5f       	subi	r24, 0xFF	; 255
    14c2:	80 93 44 01 	sts	0x0144, r24
    14c6:	80 91 44 01 	lds	r24, 0x0144
    14ca:	83 30       	cpi	r24, 0x03	; 3
    14cc:	f0 f2       	brcs	.-68     	; 0x148a <PinLayout+0x1a>
   lcd_data('=');
   lcd_testpin(trans.e);
   lcd_testpin(trans.b);
   lcd_testpin(trans.c);
#endif
}
    14ce:	1f 91       	pop	r17
    14d0:	0f 91       	pop	r16
    14d2:	ff 90       	pop	r15
    14d4:	08 95       	ret

000014d6 <AutoCheck>:
void AutoCheck(void) {
    14d6:	2f 92       	push	r2
    14d8:	3f 92       	push	r3
    14da:	4f 92       	push	r4
    14dc:	5f 92       	push	r5
    14de:	6f 92       	push	r6
    14e0:	7f 92       	push	r7
    14e2:	8f 92       	push	r8
    14e4:	9f 92       	push	r9
    14e6:	af 92       	push	r10
    14e8:	bf 92       	push	r11
    14ea:	cf 92       	push	r12
    14ec:	df 92       	push	r13
    14ee:	ef 92       	push	r14
    14f0:	ff 92       	push	r15
    14f2:	0f 93       	push	r16
    14f4:	1f 93       	push	r17
    14f6:	df 93       	push	r29
    14f8:	cf 93       	push	r28
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	2e 97       	sbiw	r28, 0x0e	; 14
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	f8 94       	cli
    1504:	de bf       	out	0x3e, r29	; 62
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	cd bf       	out	0x3d, r28	; 61

#ifdef AUTO_CAL
  uint8_t cap_found;	// counter for found capacitor
  int8_t udiff2;
#endif
  ADC_PORT = TXD_VAL;
    150a:	88 e0       	ldi	r24, 0x08	; 8
    150c:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = TXD_MSK;
    150e:	87 b9       	out	0x07, r24	; 7
  R_PORT = (1<<(TP1*2));		//Pin 1 over RL to +
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	85 b9       	out	0x05, r24	; 5
  R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//Pin 2 over RL to -
    1514:	85 e0       	ldi	r24, 0x05	; 5
    1516:	84 b9       	out	0x04, r24	; 4
  adcmv[0] = W5msReadADC(PC0);		// voltage at Pin 1
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
    151e:	8c 01       	movw	r16, r24
    1520:	9a 83       	std	Y+2, r25	; 0x02
    1522:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = ReadADC(PC1);		// voltage at Pin 2
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
    152a:	7c 01       	movw	r14, r24
    152c:	9c 83       	std	Y+4, r25	; 0x04
    152e:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = ReadADC(PC2);		// voltage at Pin 3
    1530:	82 e0       	ldi	r24, 0x02	; 2
    1532:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
    1536:	9c 01       	movw	r18, r24
    1538:	9e 83       	std	Y+6, r25	; 0x06
    153a:	8d 83       	std	Y+5, r24	; 0x05
  if (abs((int)(adcmv[1] - adcmv[0])) > 20) {
    153c:	e0 1a       	sub	r14, r16
    153e:	f1 0a       	sbc	r15, r17
    1540:	f7 fe       	sbrs	r15, 7
    1542:	04 c0       	rjmp	.+8      	; 0x154c <AutoCheck+0x76>
    1544:	f0 94       	com	r15
    1546:	e1 94       	neg	r14
    1548:	f1 08       	sbc	r15, r1
    154a:	f3 94       	inc	r15
    154c:	85 e1       	ldi	r24, 0x15	; 21
    154e:	e8 16       	cp	r14, r24
    1550:	f1 04       	cpc	r15, r1
    1552:	0c f0       	brlt	.+2      	; 0x1556 <AutoCheck+0x80>
    1554:	69 c4       	rjmp	.+2258   	; 0x1e28 <AutoCheck+0x952>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[2] - adcmv[0])) > 20) {
    1556:	20 1b       	sub	r18, r16
    1558:	31 0b       	sbc	r19, r17
    155a:	37 ff       	sbrs	r19, 7
    155c:	03 c0       	rjmp	.+6      	; 0x1564 <AutoCheck+0x8e>
    155e:	30 95       	com	r19
    1560:	21 95       	neg	r18
    1562:	3f 4f       	sbci	r19, 0xFF	; 255
    1564:	25 31       	cpi	r18, 0x15	; 21
    1566:	31 05       	cpc	r19, r1
    1568:	0c f0       	brlt	.+2      	; 0x156c <AutoCheck+0x96>
    156a:	5e c4       	rjmp	.+2236   	; 0x1e28 <AutoCheck+0x952>
     return;				//difference to big, no selftest
  }
  if (abs((int)((adcmv[0]*2) - ADCconfig.U_AVCC)) > 60) {
    156c:	00 0f       	add	r16, r16
    156e:	11 1f       	adc	r17, r17
    1570:	80 91 3d 01 	lds	r24, 0x013D
    1574:	90 91 3e 01 	lds	r25, 0x013E
    1578:	08 1b       	sub	r16, r24
    157a:	19 0b       	sbc	r17, r25
    157c:	17 ff       	sbrs	r17, 7
    157e:	03 c0       	rjmp	.+6      	; 0x1586 <AutoCheck+0xb0>
    1580:	10 95       	com	r17
    1582:	01 95       	neg	r16
    1584:	1f 4f       	sbci	r17, 0xFF	; 255
    1586:	0d 33       	cpi	r16, 0x3D	; 61
    1588:	11 05       	cpc	r17, r1
    158a:	0c f0       	brlt	.+2      	; 0x158e <AutoCheck+0xb8>
    158c:	4d c4       	rjmp	.+2202   	; 0x1e28 <AutoCheck+0x952>
     return;				//difference to big, no selftest
  }
  R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//Pin 3 over RL to - (Pin 1 over RL to +)
    158e:	81 e1       	ldi	r24, 0x11	; 17
    1590:	84 b9       	out	0x04, r24	; 4
  adcmv[0] = W5msReadADC(PC0);		// voltage at Pin 1
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
    1598:	8c 01       	movw	r16, r24
    159a:	9a 83       	std	Y+2, r25	; 0x02
    159c:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = ReadADC(PC1);		// voltage at Pin 2
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
    15a4:	7c 01       	movw	r14, r24
    15a6:	9c 83       	std	Y+4, r25	; 0x04
    15a8:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = ReadADC(PC2);		// voltage at Pin 3
    15aa:	82 e0       	ldi	r24, 0x02	; 2
    15ac:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
    15b0:	9c 01       	movw	r18, r24
    15b2:	9e 83       	std	Y+6, r25	; 0x06
    15b4:	8d 83       	std	Y+5, r24	; 0x05
  if (abs((int)(adcmv[1] - adcmv[0])) > 20) {
    15b6:	e0 1a       	sub	r14, r16
    15b8:	f1 0a       	sbc	r15, r17
    15ba:	f7 fe       	sbrs	r15, 7
    15bc:	04 c0       	rjmp	.+8      	; 0x15c6 <AutoCheck+0xf0>
    15be:	f0 94       	com	r15
    15c0:	e1 94       	neg	r14
    15c2:	f1 08       	sbc	r15, r1
    15c4:	f3 94       	inc	r15
    15c6:	e5 e1       	ldi	r30, 0x15	; 21
    15c8:	ee 16       	cp	r14, r30
    15ca:	f1 04       	cpc	r15, r1
    15cc:	0c f0       	brlt	.+2      	; 0x15d0 <AutoCheck+0xfa>
    15ce:	2c c4       	rjmp	.+2136   	; 0x1e28 <AutoCheck+0x952>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[2] - adcmv[0])) > 20) {
    15d0:	20 1b       	sub	r18, r16
    15d2:	31 0b       	sbc	r19, r17
    15d4:	37 ff       	sbrs	r19, 7
    15d6:	03 c0       	rjmp	.+6      	; 0x15de <AutoCheck+0x108>
    15d8:	30 95       	com	r19
    15da:	21 95       	neg	r18
    15dc:	3f 4f       	sbci	r19, 0xFF	; 255
    15de:	25 31       	cpi	r18, 0x15	; 21
    15e0:	31 05       	cpc	r19, r1
    15e2:	0c f0       	brlt	.+2      	; 0x15e6 <AutoCheck+0x110>
    15e4:	21 c4       	rjmp	.+2114   	; 0x1e28 <AutoCheck+0x952>
     return;				//difference to big, no selftest
  }
  if (abs((int)((adcmv[0]*2) - ADCconfig.U_AVCC)) > 60) {
    15e6:	00 0f       	add	r16, r16
    15e8:	11 1f       	adc	r17, r17
    15ea:	80 91 3d 01 	lds	r24, 0x013D
    15ee:	90 91 3e 01 	lds	r25, 0x013E
    15f2:	08 1b       	sub	r16, r24
    15f4:	19 0b       	sbc	r17, r25
    15f6:	17 ff       	sbrs	r17, 7
    15f8:	03 c0       	rjmp	.+6      	; 0x1600 <AutoCheck+0x12a>
    15fa:	10 95       	com	r17
    15fc:	01 95       	neg	r16
    15fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1600:	0d 33       	cpi	r16, 0x3D	; 61
    1602:	11 05       	cpc	r17, r1
    1604:	0c f0       	brlt	.+2      	; 0x1608 <AutoCheck+0x132>
    1606:	10 c4       	rjmp	.+2080   	; 0x1e28 <AutoCheck+0x952>
     return;				//difference to big, no selftest
  }
#ifdef WITH_SELFTEST
  lcd_clear();
    1608:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
    160c:	83 e3       	ldi	r24, 0x33	; 51
    160e:	91 e0       	ldi	r25, 0x01	; 1
    1610:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
  wait_about1s();
    1614:	88 ec       	ldi	r24, 0xC8	; 200
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
    161c:	66 24       	eor	r6, r6
    161e:	77 24       	eor	r7, r7
 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    1620:	11 e0       	ldi	r17, 0x01	; 1
           adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
           lcd_fix2_string(RH1H);	// "RH_Hi="
        }
        if (tt == 7) { // can we switch the ADC pins to VCC across the R_H resistor?
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_H_VAL*100));
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    1622:	e2 e0       	ldi	r30, 0x02	; 2
    1624:	ce 2e       	mov	r12, r30
           R_DDR = (2<<(TP1*2)) | (1<<(TP1*2));	//RH1 to +, RL1 to -
           adcmv[0] = W20msReadADC(TP1);
           adcmv[0] -= u680;
           R_PORT = 2<<(TP2*2);		//RH2 to VCC
    1626:	78 e0       	ldi	r23, 0x08	; 8
    1628:	e7 2e       	mov	r14, r23
           R_DDR = (2<<(TP2*2)) | (1<<(TP2*2));	//RH2 to +, RL2 to -
           adcmv[1] = W20msReadADC(TP2);
           adcmv[1] -= u680;
           R_PORT = 2<<(TP3*2);		//RH3 to VCC
    162a:	60 e2       	ldi	r22, 0x20	; 32
    162c:	f6 2e       	mov	r15, r22
           R_DDR = (2<<(TP3*2)) | (1<<(TP3*2));	//RH3 to +, RL3 to -
    162e:	50 e3       	ldi	r21, 0x30	; 48
    1630:	b5 2e       	mov	r11, r21
    1632:	74 c1       	rjmp	.+744    	; 0x191c <AutoCheck+0x446>
  wait_about1s();
 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
        lcd_line2();			//Cursor to column 1, row 2
    1634:	80 ec       	ldi	r24, 0xC0	; 192
    1636:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
        lcd_clear_line();		// clear total line
    163a:	0e 94 33 02 	call	0x466	; 0x466 <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    163e:	80 e8       	ldi	r24, 0x80	; 128
    1640:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
        lcd_clear_line();		// clear total line
    1644:	0e 94 33 02 	call	0x466	; 0x466 <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    1648:	80 e8       	ldi	r24, 0x80	; 128
    164a:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
        lcd_data('T');			//output the Testmode "T"
    164e:	84 e5       	ldi	r24, 0x54	; 84
    1650:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
        lcd_string(utoa(tt, outval, 10));	//output Test number
    1654:	c3 01       	movw	r24, r6
    1656:	6c e0       	ldi	r22, 0x0C	; 12
    1658:	71 e0       	ldi	r23, 0x01	; 1
    165a:	4a e0       	ldi	r20, 0x0A	; 10
    165c:	50 e0       	ldi	r21, 0x00	; 0
    165e:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <utoa>
    1662:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_string>
        lcd_space();
    1666:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>
                                        //############################################
        if (tt == 1) {   // output of reference voltage and factors for capacity measurement
    166a:	fd 2d       	mov	r31, r13
    166c:	f1 30       	cpi	r31, 0x01	; 1
    166e:	81 f5       	brne	.+96     	; 0x16d0 <AutoCheck+0x1fa>
           ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    1670:	8e eb       	ldi	r24, 0xBE	; 190
    1672:	80 93 39 01 	sts	0x0139, r24
 #ifdef WITH_AUTO_REF
           (void) ReadADC(MUX_INT_REF);	// read reference voltage 
    1676:	8e e0       	ldi	r24, 0x0E	; 14
    1678:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
           ref_mv = W5msReadADC(MUX_INT_REF);	// read reference voltage 
    167c:	8e e0       	ldi	r24, 0x0E	; 14
    167e:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
    1682:	90 93 40 01 	sts	0x0140, r25
    1686:	80 93 3f 01 	sts	0x013F, r24
           RefVoltage();		//compute RHmultip = f(reference voltage)
    168a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <RefVoltage>
 #endif
           lcd_fix2_string(URefT);	//"URef="
    168e:	8b ec       	ldi	r24, 0xCB	; 203
    1690:	91 e0       	ldi	r25, 0x01	; 1
    1692:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
           DisplayValue(ref_mv,-3,'V',4);
    1696:	60 91 3f 01 	lds	r22, 0x013F
    169a:	70 91 40 01 	lds	r23, 0x0140
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	4d ef       	ldi	r20, 0xFD	; 253
    16a4:	26 e5       	ldi	r18, 0x56	; 86
    16a6:	04 e0       	ldi	r16, 0x04	; 4
    16a8:	0e 94 3b 02 	call	0x476	; 0x476 <DisplayValue>
           lcd_line2();			//Cursor to column 1, row 2
    16ac:	80 ec       	ldi	r24, 0xC0	; 192
    16ae:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
           lcd_fix2_string(RHfakt);	//"RHf="
    16b2:	80 ed       	ldi	r24, 0xD0	; 208
    16b4:	91 e0       	ldi	r25, 0x01	; 1
    16b6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
           lcd_string(utoa(RHmultip, outval, 10));
    16ba:	80 91 00 01 	lds	r24, 0x0100
    16be:	90 91 01 01 	lds	r25, 0x0101
    16c2:	6c e0       	ldi	r22, 0x0C	; 12
    16c4:	71 e0       	ldi	r23, 0x01	; 1
    16c6:	4a e0       	ldi	r20, 0x0A	; 10
    16c8:	50 e0       	ldi	r21, 0x00	; 0
    16ca:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <utoa>
    16ce:	09 c1       	rjmp	.+530    	; 0x18e2 <AutoCheck+0x40c>
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
    16d0:	2d 2d       	mov	r18, r13
    16d2:	22 30       	cpi	r18, 0x02	; 2
    16d4:	99 f5       	brne	.+102    	; 0x173c <AutoCheck+0x266>
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    16d6:	60 91 3d 01 	lds	r22, 0x013D
    16da:	70 91 3e 01 	lds	r23, 0x013E
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	28 e5       	ldi	r18, 0x58	; 88
    16e4:	3b e1       	ldi	r19, 0x1B	; 27
    16e6:	40 e0       	ldi	r20, 0x00	; 0
    16e8:	50 e0       	ldi	r21, 0x00	; 0
    16ea:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
    16ee:	a2 01       	movw	r20, r4
    16f0:	91 01       	movw	r18, r2
    16f2:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <__divmodsi4>
    16f6:	89 01       	movw	r16, r18
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	85 b9       	out	0x05, r24	; 5
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
    16fc:	85 e0       	ldi	r24, 0x05	; 5
    16fe:	84 b9       	out	0x04, r24	; 4
           adcmv[0] = W20msReadADC(TP1);
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	0e 94 06 1b 	call	0x360c	; 0x360c <W20msReadADC>
           adcmv[0] -= u680;
    1706:	80 1b       	sub	r24, r16
    1708:	91 0b       	sbc	r25, r17
    170a:	9a 83       	std	Y+2, r25	; 0x02
    170c:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//RL3 to -
    170e:	e1 e1       	ldi	r30, 0x11	; 17
    1710:	e4 b9       	out	0x04, r30	; 4
           adcmv[1] = W20msReadADC(TP1);
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	0e 94 06 1b 	call	0x360c	; 0x360c <W20msReadADC>
           adcmv[1] -= u680;
    1718:	80 1b       	sub	r24, r16
    171a:	91 0b       	sbc	r25, r17
    171c:	9c 83       	std	Y+4, r25	; 0x04
    171e:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 1<<(TP2*2);		//RL2 to VCC
    1720:	f4 e0       	ldi	r31, 0x04	; 4
    1722:	f5 b9       	out	0x05, r31	; 5
           R_DDR = (1<<(TP2*2)) | (1<<(TP3*2));	//RL3 to -
    1724:	24 e1       	ldi	r18, 0x14	; 20
    1726:	24 b9       	out	0x04, r18	; 4
           adcmv[2] = W20msReadADC(TP2);
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	0e 94 06 1b 	call	0x360c	; 0x360c <W20msReadADC>
           adcmv[2] -= u680;
    172e:	80 1b       	sub	r24, r16
    1730:	91 0b       	sbc	r25, r17
    1732:	9e 83       	std	Y+6, r25	; 0x06
    1734:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RLRL);	// "RLRL"
    1736:	8d ed       	ldi	r24, 0xDD	; 221
    1738:	91 e0       	ldi	r25, 0x01	; 1
    173a:	74 c0       	rjmp	.+232    	; 0x1824 <AutoCheck+0x34e>
        }
                                        //############################################
        if (tt == 3) { // how equal are the RH resistors
    173c:	8d 2d       	mov	r24, r13
    173e:	83 30       	cpi	r24, 0x03	; 3
    1740:	31 f5       	brne	.+76     	; 0x178e <AutoCheck+0x2b8>
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    1742:	c5 b8       	out	0x05, r12	; 5
           R_DDR = (2<<(TP1*2)) | (2<<(TP2*2));	//RH2 to -
    1744:	94 b8       	out	0x04, r9	; 4
           adcmv[0] = W20msReadADC(TP1);
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	0e 94 06 1b 	call	0x360c	; 0x360c <W20msReadADC>
           adcmv[3] = ADCconfig.U_AVCC / 2;
    174c:	00 91 3d 01 	lds	r16, 0x013D
    1750:	10 91 3e 01 	lds	r17, 0x013E
    1754:	16 95       	lsr	r17
    1756:	07 95       	ror	r16
    1758:	18 87       	std	Y+8, r17	; 0x08
    175a:	0f 83       	std	Y+7, r16	; 0x07
           adcmv[0] -= adcmv[3];
    175c:	80 1b       	sub	r24, r16
    175e:	91 0b       	sbc	r25, r17
    1760:	9a 83       	std	Y+2, r25	; 0x02
    1762:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (2<<(TP1*2)) | (2<<(TP3*2));	//RH3 to -
    1764:	84 b8       	out	0x04, r8	; 4
           adcmv[1] = W20msReadADC(TP1);
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	0e 94 06 1b 	call	0x360c	; 0x360c <W20msReadADC>
           adcmv[1] -= adcmv[3];
    176c:	80 1b       	sub	r24, r16
    176e:	91 0b       	sbc	r25, r17
    1770:	9c 83       	std	Y+4, r25	; 0x04
    1772:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 2<<(TP2*2);		//RL2 to VCC
    1774:	e5 b8       	out	0x05, r14	; 5
           R_DDR = (2<<(TP2*2)) | (2<<(TP3*2));	//RH3 to -
    1776:	e8 e2       	ldi	r30, 0x28	; 40
    1778:	e4 b9       	out	0x04, r30	; 4
           adcmv[2] = W20msReadADC(TP2);
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	0e 94 06 1b 	call	0x360c	; 0x360c <W20msReadADC>
           adcmv[2] -= adcmv[3];
    1780:	80 1b       	sub	r24, r16
    1782:	91 0b       	sbc	r25, r17
    1784:	9e 83       	std	Y+6, r25	; 0x06
    1786:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RHRH);	// "RHRH"
    1788:	8b ee       	ldi	r24, 0xEB	; 235
    178a:	91 e0       	ldi	r25, 0x01	; 1
    178c:	4b c0       	rjmp	.+150    	; 0x1824 <AutoCheck+0x34e>
        }
                                        //############################################
        if (tt == 4) { // Text release probes
    178e:	fd 2d       	mov	r31, r13
    1790:	f4 30       	cpi	r31, 0x04	; 4
    1792:	19 f4       	brne	.+6      	; 0x179a <AutoCheck+0x2c4>
           lcd_fix2_string(RELPROBE);	// "Release Probes"
    1794:	83 e4       	ldi	r24, 0x43	; 67
    1796:	91 e0       	ldi	r25, 0x01	; 1
    1798:	45 c0       	rjmp	.+138    	; 0x1824 <AutoCheck+0x34e>
        }
                                        //############################################
        if (tt == 5) { // can we switch the ADC pins to GND across R_H resistor?
    179a:	2d 2d       	mov	r18, r13
    179c:	25 30       	cpi	r18, 0x05	; 5
    179e:	b1 f4       	brne	.+44     	; 0x17cc <AutoCheck+0x2f6>
           R_PORT = 0;
    17a0:	15 b8       	out	0x05, r1	; 5
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to GND
    17a2:	c4 b8       	out	0x04, r12	; 4
           adcmv[0] = W20msReadADC(TP1);
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	0e 94 06 1b 	call	0x360c	; 0x360c <W20msReadADC>
    17aa:	9a 83       	std	Y+2, r25	; 0x02
    17ac:	89 83       	std	Y+1, r24	; 0x01

           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to GND
    17ae:	e4 b8       	out	0x04, r14	; 4
           adcmv[1] = W20msReadADC(TP2);
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	0e 94 06 1b 	call	0x360c	; 0x360c <W20msReadADC>
    17b6:	9c 83       	std	Y+4, r25	; 0x04
    17b8:	8b 83       	std	Y+3, r24	; 0x03

           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    17ba:	f4 b8       	out	0x04, r15	; 4
           adcmv[2] = W20msReadADC(TP3);
    17bc:	82 e0       	ldi	r24, 0x02	; 2
    17be:	0e 94 06 1b 	call	0x360c	; 0x360c <W20msReadADC>
    17c2:	9e 83       	std	Y+6, r25	; 0x06
    17c4:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RH1L);	// "RH_Lo="
    17c6:	85 ed       	ldi	r24, 0xD5	; 213
    17c8:	91 e0       	ldi	r25, 0x01	; 1
    17ca:	2c c0       	rjmp	.+88     	; 0x1824 <AutoCheck+0x34e>
        }
                                        //############################################
        if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
    17cc:	8d 2d       	mov	r24, r13
    17ce:	86 30       	cpi	r24, 0x06	; 6
    17d0:	61 f5       	brne	.+88     	; 0x182a <AutoCheck+0x354>
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to VCC
    17d2:	c4 b8       	out	0x04, r12	; 4
           R_PORT = 2<<(TP1*2);
    17d4:	c5 b8       	out	0x05, r12	; 5
           adcmv[0] = W20msReadADC(TP1) - ADCconfig.U_AVCC;
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	0e 94 06 1b 	call	0x360c	; 0x360c <W20msReadADC>
    17dc:	20 91 3d 01 	lds	r18, 0x013D
    17e0:	30 91 3e 01 	lds	r19, 0x013E
    17e4:	82 1b       	sub	r24, r18
    17e6:	93 0b       	sbc	r25, r19
    17e8:	9a 83       	std	Y+2, r25	; 0x02
    17ea:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to VCC
    17ec:	e4 b8       	out	0x04, r14	; 4
           R_PORT = 2<<(TP2*2);
    17ee:	e5 b8       	out	0x05, r14	; 5
           adcmv[1] = W20msReadADC(TP2) - ADCconfig.U_AVCC;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	0e 94 06 1b 	call	0x360c	; 0x360c <W20msReadADC>
    17f6:	20 91 3d 01 	lds	r18, 0x013D
    17fa:	30 91 3e 01 	lds	r19, 0x013E
    17fe:	82 1b       	sub	r24, r18
    1800:	93 0b       	sbc	r25, r19
    1802:	9c 83       	std	Y+4, r25	; 0x04
    1804:	8b 83       	std	Y+3, r24	; 0x03
           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to VCC
    1806:	f4 b8       	out	0x04, r15	; 4
           R_PORT = 2<<(TP3*2);
    1808:	f5 b8       	out	0x05, r15	; 5
           adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
    180a:	82 e0       	ldi	r24, 0x02	; 2
    180c:	0e 94 06 1b 	call	0x360c	; 0x360c <W20msReadADC>
    1810:	20 91 3d 01 	lds	r18, 0x013D
    1814:	30 91 3e 01 	lds	r19, 0x013E
    1818:	82 1b       	sub	r24, r18
    181a:	93 0b       	sbc	r25, r19
    181c:	9e 83       	std	Y+6, r25	; 0x06
    181e:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RH1H);	// "RH_Hi="
    1820:	89 ed       	ldi	r24, 0xD9	; 217
    1822:	91 e0       	ldi	r25, 0x01	; 1
    1824:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
    1828:	39 c0       	rjmp	.+114    	; 0x189c <AutoCheck+0x3c6>
        }
        if (tt == 7) { // can we switch the ADC pins to VCC across the R_H resistor?
    182a:	ed 2d       	mov	r30, r13
    182c:	e7 30       	cpi	r30, 0x07	; 7
    182e:	99 f5       	brne	.+102    	; 0x1896 <AutoCheck+0x3c0>
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_H_VAL*100));
    1830:	60 91 3d 01 	lds	r22, 0x013D
    1834:	70 91 3e 01 	lds	r23, 0x013E
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	28 e5       	ldi	r18, 0x58	; 88
    183e:	3b e1       	ldi	r19, 0x1B	; 27
    1840:	40 e0       	ldi	r20, 0x00	; 0
    1842:	50 e0       	ldi	r21, 0x00	; 0
    1844:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
    1848:	28 eb       	ldi	r18, 0xB8	; 184
    184a:	32 ed       	ldi	r19, 0xD2	; 210
    184c:	47 e4       	ldi	r20, 0x47	; 71
    184e:	50 e0       	ldi	r21, 0x00	; 0
    1850:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <__divmodsi4>
    1854:	89 01       	movw	r16, r18
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    1856:	c5 b8       	out	0x05, r12	; 5
           R_DDR = (2<<(TP1*2)) | (1<<(TP1*2));	//RH1 to +, RL1 to -
    1858:	f3 e0       	ldi	r31, 0x03	; 3
    185a:	f4 b9       	out	0x04, r31	; 4
           adcmv[0] = W20msReadADC(TP1);
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	0e 94 06 1b 	call	0x360c	; 0x360c <W20msReadADC>
           adcmv[0] -= u680;
    1862:	80 1b       	sub	r24, r16
    1864:	91 0b       	sbc	r25, r17
    1866:	9a 83       	std	Y+2, r25	; 0x02
    1868:	89 83       	std	Y+1, r24	; 0x01
           R_PORT = 2<<(TP2*2);		//RH2 to VCC
    186a:	e5 b8       	out	0x05, r14	; 5
           R_DDR = (2<<(TP2*2)) | (1<<(TP2*2));	//RH2 to +, RL2 to -
    186c:	2c e0       	ldi	r18, 0x0C	; 12
    186e:	24 b9       	out	0x04, r18	; 4
           adcmv[1] = W20msReadADC(TP2);
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	0e 94 06 1b 	call	0x360c	; 0x360c <W20msReadADC>
           adcmv[1] -= u680;
    1876:	80 1b       	sub	r24, r16
    1878:	91 0b       	sbc	r25, r17
    187a:	9c 83       	std	Y+4, r25	; 0x04
    187c:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 2<<(TP3*2);		//RH3 to VCC
    187e:	f5 b8       	out	0x05, r15	; 5
           R_DDR = (2<<(TP3*2)) | (1<<(TP3*2));	//RH3 to +, RL3 to -
    1880:	b4 b8       	out	0x04, r11	; 4
           adcmv[2] = W20msReadADC(TP3);
    1882:	82 e0       	ldi	r24, 0x02	; 2
    1884:	0e 94 06 1b 	call	0x360c	; 0x360c <W20msReadADC>
           adcmv[2] -= u680;
    1888:	80 1b       	sub	r24, r16
    188a:	91 0b       	sbc	r25, r17
    188c:	9e 83       	std	Y+6, r25	; 0x06
    188e:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RHRL);	// "RH/RL"
    1890:	89 ef       	ldi	r24, 0xF9	; 249
    1892:	91 e0       	ldi	r25, 0x01	; 1
    1894:	c7 cf       	rjmp	.-114    	; 0x1824 <AutoCheck+0x34e>
        }
                                        //############################################
        if (tt > 1) {	// output 3 voltages 
    1896:	8d 2d       	mov	r24, r13
    1898:	81 30       	cpi	r24, 0x01	; 1
    189a:	29 f1       	breq	.+74     	; 0x18e6 <AutoCheck+0x410>
           lcd_line2();			//Cursor to column 1, row 2
    189c:	80 ec       	ldi	r24, 0xC0	; 192
    189e:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
           lcd_string(itoa(adcmv[0], outval, 10));	//output voltage 1
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	9a 81       	ldd	r25, Y+2	; 0x02
    18a6:	6c e0       	ldi	r22, 0x0C	; 12
    18a8:	71 e0       	ldi	r23, 0x01	; 1
    18aa:	4a e0       	ldi	r20, 0x0A	; 10
    18ac:	50 e0       	ldi	r21, 0x00	; 0
    18ae:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <itoa>
    18b2:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_string>
           lcd_space();
    18b6:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>
           lcd_string(itoa(adcmv[1], outval, 10));	//output voltage 2
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	9c 81       	ldd	r25, Y+4	; 0x04
    18be:	6c e0       	ldi	r22, 0x0C	; 12
    18c0:	71 e0       	ldi	r23, 0x01	; 1
    18c2:	4a e0       	ldi	r20, 0x0A	; 10
    18c4:	50 e0       	ldi	r21, 0x00	; 0
    18c6:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <itoa>
    18ca:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_string>
           lcd_space();
    18ce:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>
           lcd_string(itoa(adcmv[2], outval, 10));	//output voltage 3
    18d2:	8d 81       	ldd	r24, Y+5	; 0x05
    18d4:	9e 81       	ldd	r25, Y+6	; 0x06
    18d6:	6c e0       	ldi	r22, 0x0C	; 12
    18d8:	71 e0       	ldi	r23, 0x01	; 1
    18da:	4a e0       	ldi	r20, 0x0A	; 10
    18dc:	50 e0       	ldi	r21, 0x00	; 0
    18de:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <itoa>
    18e2:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_string>
        }
        ADC_DDR =  TXD_MSK;		// all-Pins to Input
    18e6:	e7 b8       	out	0x07, r14	; 7
        ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
    18e8:	e8 b8       	out	0x08, r14	; 8
        R_DDR = 0;			// all R-Ports to Input
    18ea:	14 b8       	out	0x04, r1	; 4
        R_PORT = 0;
    18ec:	15 b8       	out	0x05, r1	; 5
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    18ee:	4f 9b       	sbis	0x09, 7	; 9
    18f0:	0d c0       	rjmp	.+26     	; 0x190c <AutoCheck+0x436>
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
    18f2:	84 e6       	ldi	r24, 0x64	; 100
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    18fa:	4f 9b       	sbis	0x09, 7	; 9
    18fc:	07 c0       	rjmp	.+14     	; 0x190c <AutoCheck+0x436>
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
    18fe:	84 e6       	ldi	r24, 0x64	; 100
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
    1906:	aa 94       	dec	r10
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
  wait_about1s();
 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
    1908:	09 f0       	breq	.+2      	; 0x190c <AutoCheck+0x436>
    190a:	94 ce       	rjmp	.-728    	; 0x1634 <AutoCheck+0x15e>
    190c:	1d 2d       	mov	r17, r13
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
     } //end for ww
     wait_about1s();
    190e:	88 ec       	ldi	r24, 0xC8	; 200
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
  lcd_clear();
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
  wait_about1s();
 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    1916:	1f 5f       	subi	r17, 0xFF	; 255
    1918:	18 30       	cpi	r17, 0x08	; 8
    191a:	91 f0       	breq	.+36     	; 0x1940 <AutoCheck+0x46a>
void AutoCheck(void) {
    191c:	34 e0       	ldi	r19, 0x04	; 4
    191e:	d3 2e       	mov	r13, r19
        lcd_line2();			//Cursor to column 1, row 2
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_data('T');			//output the Testmode "T"
    1920:	08 94       	sec
    1922:	61 1c       	adc	r6, r1
    1924:	71 1c       	adc	r7, r1
           lcd_fix2_string(RLRL);	// "RLRL"
        }
                                        //############################################
        if (tt == 3) { // how equal are the RH resistors
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
           R_DDR = (2<<(TP1*2)) | (2<<(TP2*2));	//RH2 to -
    1926:	2a e0       	ldi	r18, 0x0A	; 10
    1928:	92 2e       	mov	r9, r18
           adcmv[0] = W20msReadADC(TP1);
           adcmv[3] = ADCconfig.U_AVCC / 2;
           adcmv[0] -= adcmv[3];
           R_DDR = (2<<(TP1*2)) | (2<<(TP3*2));	//RH3 to -
    192a:	92 e2       	ldi	r25, 0x22	; 34
    192c:	89 2e       	mov	r8, r25
           lcd_fix2_string(RHfakt);	//"RHf="
           lcd_string(utoa(RHmultip, outval, 10));
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    192e:	84 ec       	ldi	r24, 0xC4	; 196
    1930:	28 2e       	mov	r2, r24
    1932:	86 e3       	ldi	r24, 0x36	; 54
    1934:	38 2e       	mov	r3, r24
    1936:	41 2c       	mov	r4, r1
    1938:	51 2c       	mov	r5, r1
    193a:	ad 2c       	mov	r10, r13
    193c:	d1 2e       	mov	r13, r17
    193e:	7a ce       	rjmp	.-780    	; 0x1634 <AutoCheck+0x15e>
     wait_about1s();
  } //end for tt
#endif

  // measurement of internal resistance of the ADC port outputs switched to GND
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    1940:	09 e0       	ldi	r16, 0x09	; 9
    1942:	c0 2e       	mov	r12, r16
    1944:	c7 b8       	out	0x07, r12	; 7
  R_PORT = 1<<(TP1*2);		//R_L-PORT 1 to VCC
    1946:	dd 24       	eor	r13, r13
    1948:	d3 94       	inc	r13
    194a:	d5 b8       	out	0x05, r13	; 5
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to VCC
    194c:	d4 b8       	out	0x04, r13	; 4
  adcmv[0] = W5msReadADC(TP1);
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
    1954:	7c 01       	movw	r14, r24

  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin 2 to output 0V
    1956:	1a e0       	ldi	r17, 0x0A	; 10
    1958:	61 2e       	mov	r6, r17
    195a:	67 b8       	out	0x07, r6	; 7
  R_PORT =  1<<(TP2*2);	//R_L-PORT 2 to VCC
    195c:	b4 e0       	ldi	r27, 0x04	; 4
    195e:	8b 2e       	mov	r8, r27
    1960:	85 b8       	out	0x05, r8	; 5
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to VCC
    1962:	84 b8       	out	0x04, r8	; 4
  adcmv[1] = W5msReadADC(TP2);
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
    196a:	8c 01       	movw	r16, r24

  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin 3 to output 0V
    196c:	ac e0       	ldi	r26, 0x0C	; 12
    196e:	9a 2e       	mov	r9, r26
    1970:	97 b8       	out	0x07, r9	; 7
  R_PORT =  1<<(TP3*2);	//R_L-PORT 3 to VCC
    1972:	f0 e1       	ldi	r31, 0x10	; 16
    1974:	af 2e       	mov	r10, r31
    1976:	a5 b8       	out	0x05, r10	; 5
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to VCC
    1978:	a4 b8       	out	0x04, r10	; 4
  adcmv[2] = W5msReadADC(TP3);
    197a:	82 e0       	ldi	r24, 0x02	; 2
    197c:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
  sum_rm = (adcmv[0] + adcmv[1] + adcmv[2]); //add all three values
    1980:	0e 0d       	add	r16, r14
    1982:	1f 1d       	adc	r17, r15
    1984:	08 0f       	add	r16, r24
    1986:	19 1f       	adc	r17, r25

  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
    1988:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
    198a:	c8 b8       	out	0x08, r12	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    198c:	c7 b8       	out	0x07, r12	; 7
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
    198e:	d4 b8       	out	0x04, r13	; 4
  adcmv[0] = ADCconfig.U_AVCC - W5msReadADC(TP1);
    1990:	c0 90 3d 01 	lds	r12, 0x013D
    1994:	d0 90 3e 01 	lds	r13, 0x013E
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
    199e:	c8 1a       	sub	r12, r24
    19a0:	d9 0a       	sbc	r13, r25
    19a2:	da 82       	std	Y+2, r13	; 0x02
    19a4:	c9 82       	std	Y+1, r12	; 0x01
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
    19a6:	68 b8       	out	0x08, r6	; 8
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
    19a8:	67 b8       	out	0x07, r6	; 7
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
    19aa:	84 b8       	out	0x04, r8	; 4
  adcmv[1] = ADCconfig.U_AVCC - W5msReadADC(TP2);
    19ac:	e0 90 3d 01 	lds	r14, 0x013D
    19b0:	f0 90 3e 01 	lds	r15, 0x013E
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
    19ba:	e8 1a       	sub	r14, r24
    19bc:	f9 0a       	sbc	r15, r25
    19be:	fc 82       	std	Y+4, r15	; 0x04
    19c0:	eb 82       	std	Y+3, r14	; 0x03

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
    19c2:	98 b8       	out	0x08, r9	; 8
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
    19c4:	97 b8       	out	0x07, r9	; 7
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
    19c6:	a4 b8       	out	0x04, r10	; 4
  adcmv[2] = ADCconfig.U_AVCC - W5msReadADC(TP3);
    19c8:	a0 90 3d 01 	lds	r10, 0x013D
    19cc:	b0 90 3e 01 	lds	r11, 0x013E
    19d0:	82 e0       	ldi	r24, 0x02	; 2
    19d2:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>

  sum_c0 = (adcmv[0] + adcmv[1] + adcmv[2]);
    19d6:	ec 0c       	add	r14, r12
    19d8:	fd 1c       	adc	r15, r13
  adcmv[1] = ADCconfig.U_AVCC - W5msReadADC(TP2);

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
  adcmv[2] = ADCconfig.U_AVCC - W5msReadADC(TP3);
    19da:	a8 1a       	sub	r10, r24
    19dc:	b9 0a       	sbc	r11, r25

  sum_c0 = (adcmv[0] + adcmv[1] + adcmv[2]);
    19de:	ea 0c       	add	r14, r10
    19e0:	fb 1c       	adc	r15, r11
  u680 = ((ADCconfig.U_AVCC * 3) - sum_rm - sum_c0);	//three times the voltage at the 680 Ohm
    19e2:	80 91 3d 01 	lds	r24, 0x013D
    19e6:	90 91 3e 01 	lds	r25, 0x013E
    19ea:	5c 01       	movw	r10, r24
    19ec:	aa 0c       	add	r10, r10
    19ee:	bb 1c       	adc	r11, r11
    19f0:	a8 0e       	add	r10, r24
    19f2:	b9 1e       	adc	r11, r25
    19f4:	a0 1a       	sub	r10, r16
    19f6:	b1 0a       	sbc	r11, r17
    19f8:	ae 18       	sub	r10, r14
    19fa:	bf 08       	sbc	r11, r15
  pin_rm = (unsigned long)((unsigned long)sum_rm * (unsigned long)R_L_VAL) / (unsigned long)u680;
    19fc:	cc 24       	eor	r12, r12
    19fe:	dd 24       	eor	r13, r13
    1a00:	b8 01       	movw	r22, r16
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	20 e9       	ldi	r18, 0x90	; 144
    1a08:	3a e1       	ldi	r19, 0x1A	; 26
    1a0a:	40 e0       	ldi	r20, 0x00	; 0
    1a0c:	50 e0       	ldi	r21, 0x00	; 0
    1a0e:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
    1a12:	a6 01       	movw	r20, r12
    1a14:	95 01       	movw	r18, r10
    1a16:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
    1a1a:	49 01       	movw	r8, r18
  adcmv[2] = pin_rm;	// for last output in row 2
    1a1c:	3e 83       	std	Y+6, r19	; 0x06
    1a1e:	2d 83       	std	Y+5, r18	; 0x05
  pin_rp = (unsigned long)((unsigned long)sum_c0 * (unsigned long)R_L_VAL) / (unsigned long)u680;
    1a20:	b7 01       	movw	r22, r14
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	20 e9       	ldi	r18, 0x90	; 144
    1a28:	3a e1       	ldi	r19, 0x1A	; 26
    1a2a:	40 e0       	ldi	r20, 0x00	; 0
    1a2c:	50 e0       	ldi	r21, 0x00	; 0
    1a2e:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
    1a32:	a6 01       	movw	r20, r12
    1a34:	95 01       	movw	r18, r10
    1a36:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
    1a3a:	79 01       	movw	r14, r18
  lcd_clear();
    1a3c:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
  lcd_fix_string(RIHI);	// "RiHi="
    1a40:	8f ef       	ldi	r24, 0xFF	; 255
    1a42:	91 e0       	ldi	r25, 0x01	; 1
    1a44:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
  DisplayValue(pin_rp,-1,LCD_CHAR_OMEGA,3);
    1a48:	b7 01       	movw	r22, r14
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	4f ef       	ldi	r20, 0xFF	; 255
    1a50:	24 ef       	ldi	r18, 0xF4	; 244
    1a52:	03 e0       	ldi	r16, 0x03	; 3
    1a54:	0e 94 3b 02 	call	0x476	; 0x476 <DisplayValue>
  lcd_line2();
    1a58:	80 ec       	ldi	r24, 0xC0	; 192
    1a5a:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_string(RILO);	// "RiLo="
    1a5e:	86 e0       	ldi	r24, 0x06	; 6
    1a60:	92 e0       	ldi	r25, 0x02	; 2
    1a62:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
  DisplayValue(pin_rm,-1,LCD_CHAR_OMEGA,3);
    1a66:	b4 01       	movw	r22, r8
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	4f ef       	ldi	r20, 0xFF	; 255
    1a6e:	24 ef       	ldi	r18, 0xF4	; 244
    1a70:	0e 94 3b 02 	call	0x476	; 0x476 <DisplayValue>
  wait_about2s();			//wait 2 seconds
    1a74:	80 e9       	ldi	r24, 0x90	; 144
    1a76:	91 e0       	ldi	r25, 0x01	; 1
    1a78:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
#ifdef AUTO_CAL
  if ((pin_rp < 280) && (pin_rm < 250)) {
    1a7c:	e8 e1       	ldi	r30, 0x18	; 24
    1a7e:	ee 16       	cp	r14, r30
    1a80:	e1 e0       	ldi	r30, 0x01	; 1
    1a82:	fe 06       	cpc	r15, r30
    1a84:	90 f4       	brcc	.+36     	; 0x1aaa <AutoCheck+0x5d4>
    1a86:	fa ef       	ldi	r31, 0xFA	; 250
    1a88:	8f 16       	cp	r8, r31
    1a8a:	91 04       	cpc	r9, r1
    1a8c:	70 f4       	brcc	.+28     	; 0x1aaa <AutoCheck+0x5d4>
     // rp is below 28 Ohm and rm is below 25 Ohm
     (void) eeprom_write_word((uint16_t *)(&R680pl), pin_rp+R_L_VAL);  //hold VCC resistance value in EEprom
    1a8e:	b7 01       	movw	r22, r14
    1a90:	60 57       	subi	r22, 0x70	; 112
    1a92:	75 4e       	sbci	r23, 0xE5	; 229
    1a94:	8b e5       	ldi	r24, 0x5B	; 91
    1a96:	92 e0       	ldi	r25, 0x02	; 2
    1a98:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__eewr_word_m328>
     (void) eeprom_write_word((uint16_t *)(&R680mi), pin_rm+R_L_VAL);  //hold GND resistance value in EEprom
    1a9c:	b4 01       	movw	r22, r8
    1a9e:	60 57       	subi	r22, 0x70	; 112
    1aa0:	75 4e       	sbci	r23, 0xE5	; 229
    1aa2:	8d e5       	ldi	r24, 0x5D	; 93
    1aa4:	92 e0       	ldi	r25, 0x02	; 2
    1aa6:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__eewr_word_m328>
  }
#endif

  //measure Zero offset for Capacity measurement
  adcmv[3] = 0;
    1aaa:	18 86       	std	Y+8, r1	; 0x08
    1aac:	1f 82       	std	Y+7, r1	; 0x07
  PartFound = PART_NONE;
    1aae:	10 92 07 01 	sts	0x0107, r1
  ReadCapacity(TP3, TP1);
    1ab2:	82 e0       	ldi	r24, 0x02	; 2
    1ab4:	60 e0       	ldi	r22, 0x00	; 0
    1ab6:	0e 94 19 15 	call	0x2a32	; 0x2a32 <ReadCapacity>
  adcmv[5] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:3
    1aba:	00 91 63 01 	lds	r16, 0x0163
    1abe:	10 91 64 01 	lds	r17, 0x0164
    1ac2:	1c 87       	std	Y+12, r17	; 0x0c
    1ac4:	0b 87       	std	Y+11, r16	; 0x0b
  ReadCapacity(TP3, TP2);
    1ac6:	82 e0       	ldi	r24, 0x02	; 2
    1ac8:	61 e0       	ldi	r22, 0x01	; 1
    1aca:	0e 94 19 15 	call	0x2a32	; 0x2a32 <ReadCapacity>
  adcmv[6] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:3
    1ace:	e0 90 63 01 	lds	r14, 0x0163
    1ad2:	f0 90 64 01 	lds	r15, 0x0164
    1ad6:	fe 86       	std	Y+14, r15	; 0x0e
    1ad8:	ed 86       	std	Y+13, r14	; 0x0d
  ReadCapacity(TP2, TP1);
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	0e 94 19 15 	call	0x2a32	; 0x2a32 <ReadCapacity>
  adcmv[2] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:2
    1ae2:	c0 90 63 01 	lds	r12, 0x0163
    1ae6:	d0 90 64 01 	lds	r13, 0x0164
    1aea:	de 82       	std	Y+6, r13	; 0x06
    1aec:	cd 82       	std	Y+5, r12	; 0x05
  ReadCapacity(TP1, TP3);
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	62 e0       	ldi	r22, 0x02	; 2
    1af2:	0e 94 19 15 	call	0x2a32	; 0x2a32 <ReadCapacity>
  adcmv[1] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:1
    1af6:	80 91 63 01 	lds	r24, 0x0163
    1afa:	90 91 64 01 	lds	r25, 0x0164
    1afe:	9c 83       	std	Y+4, r25	; 0x04
    1b00:	8b 83       	std	Y+3, r24	; 0x03
  ReadCapacity(TP2, TP3);
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	62 e0       	ldi	r22, 0x02	; 2
    1b06:	0e 94 19 15 	call	0x2a32	; 0x2a32 <ReadCapacity>
  adcmv[4] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:2
    1b0a:	80 91 63 01 	lds	r24, 0x0163
    1b0e:	90 91 64 01 	lds	r25, 0x0164
    1b12:	9a 87       	std	Y+10, r25	; 0x0a
    1b14:	89 87       	std	Y+9, r24	; 0x09
  ReadCapacity(TP1, TP2);
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	61 e0       	ldi	r22, 0x01	; 1
    1b1a:	0e 94 19 15 	call	0x2a32	; 0x2a32 <ReadCapacity>
  adcmv[0] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:1
    1b1e:	80 91 63 01 	lds	r24, 0x0163
    1b22:	90 91 64 01 	lds	r25, 0x0164
    1b26:	9a 83       	std	Y+2, r25	; 0x02
    1b28:	89 83       	std	Y+1, r24	; 0x01
  lcd_clear();
    1b2a:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
  lcd_fix_string(C0_str);			//output "C0 "
    1b2e:	8d e0       	ldi	r24, 0x0D	; 13
    1b30:	92 e0       	ldi	r25, 0x02	; 2
    1b32:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
    1b36:	b8 01       	movw	r22, r16
    1b38:	88 27       	eor	r24, r24
    1b3a:	77 fd       	sbrc	r23, 7
    1b3c:	80 95       	com	r24
    1b3e:	98 2f       	mov	r25, r24
    1b40:	40 e0       	ldi	r20, 0x00	; 0
    1b42:	20 e2       	ldi	r18, 0x20	; 32
    1b44:	03 e0       	ldi	r16, 0x03	; 3
    1b46:	0e 94 3b 02 	call	0x476	; 0x476 <DisplayValue>
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
    1b4a:	b7 01       	movw	r22, r14
    1b4c:	88 27       	eor	r24, r24
    1b4e:	77 fd       	sbrc	r23, 7
    1b50:	80 95       	com	r24
    1b52:	98 2f       	mov	r25, r24
    1b54:	40 e0       	ldi	r20, 0x00	; 0
    1b56:	20 e2       	ldi	r18, 0x20	; 32
    1b58:	0e 94 3b 02 	call	0x476	; 0x476 <DisplayValue>
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
    1b5c:	b6 01       	movw	r22, r12
    1b5e:	88 27       	eor	r24, r24
    1b60:	77 fd       	sbrc	r23, 7
    1b62:	80 95       	com	r24
    1b64:	98 2f       	mov	r25, r24
    1b66:	44 ef       	ldi	r20, 0xF4	; 244
    1b68:	26 e4       	ldi	r18, 0x46	; 70
    1b6a:	0e 94 3b 02 	call	0x476	; 0x476 <DisplayValue>
    1b6e:	8e 01       	movw	r16, r28
    1b70:	0f 5f       	subi	r16, 0xFF	; 255
    1b72:	1f 4f       	sbci	r17, 0xFF	; 255
void AutoCheck(void) {
    1b74:	ce 01       	movw	r24, r28
    1b76:	0f 96       	adiw	r24, 0x0f	; 15
    1b78:	f8 01       	movw	r30, r16
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
#ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
    1b7a:	21 91       	ld	r18, Z+
    1b7c:	31 91       	ld	r19, Z+
    1b7e:	27 34       	cpi	r18, 0x47	; 71
    1b80:	31 05       	cpc	r19, r1
    1b82:	ec f4       	brge	.+58     	; 0x1bbe <AutoCheck+0x6e8>
  lcd_fix_string(C0_str);			//output "C0 "
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
#ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
    1b84:	e8 17       	cp	r30, r24
    1b86:	f9 07       	cpc	r31, r25
    1b88:	c1 f7       	brne	.-16     	; 0x1b7a <AutoCheck+0x6a4>
    1b8a:	ee 24       	eor	r14, r14
    1b8c:	ff 24       	eor	r15, r15
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
    1b8e:	f8 01       	movw	r30, r16
    1b90:	60 81       	ld	r22, Z
    1b92:	0e 5f       	subi	r16, 0xFE	; 254
    1b94:	1f 4f       	sbci	r17, 0xFF	; 255
    1b96:	6e 5e       	subi	r22, 0xEE	; 238
    1b98:	c7 01       	movw	r24, r14
    1b9a:	87 59       	subi	r24, 0x97	; 151
    1b9c:	9d 4f       	sbci	r25, 0xFD	; 253
    1b9e:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__eewr_byte_m328>
    1ba2:	08 94       	sec
    1ba4:	e1 1c       	adc	r14, r1
    1ba6:	f1 1c       	adc	r15, r1
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
#ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
    1ba8:	f7 e0       	ldi	r31, 0x07	; 7
    1baa:	ef 16       	cp	r14, r31
    1bac:	f1 04       	cpc	r15, r1
    1bae:	79 f7       	brne	.-34     	; 0x1b8e <AutoCheck+0x6b8>
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
  }
  lcd_line2();
    1bb0:	80 ec       	ldi	r24, 0xC0	; 192
    1bb2:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_string(OK_str);		// output "OK"
    1bb6:	81 e6       	ldi	r24, 0x61	; 97
    1bb8:	91 e0       	ldi	r25, 0x01	; 1
    1bba:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
no_c0save:
#endif
 wait_about2s();		//wait 2 seconds
    1bbe:	80 e9       	ldi	r24, 0x90	; 144
    1bc0:	91 e0       	ldi	r25, 0x01	; 1
    1bc2:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
    1bc6:	70 e4       	ldi	r23, 0x40	; 64
    1bc8:	c7 2e       	mov	r12, r23
 
#ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
    1bca:	10 e0       	ldi	r17, 0x00	; 0
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
    1bcc:	6a e0       	ldi	r22, 0x0A	; 10
    1bce:	86 2e       	mov	r8, r22
    1bd0:	91 2c       	mov	r9, r1
    1bd2:	a1 2c       	mov	r10, r1
    1bd4:	b1 2c       	mov	r11, r1
     lcd_data('3');
     lcd_fix_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1bd6:	5b e5       	ldi	r21, 0x5B	; 91
    1bd8:	e5 2e       	mov	r14, r21
    1bda:	51 e0       	ldi	r21, 0x01	; 1
    1bdc:	f5 2e       	mov	r15, r21
 
#ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
     lcd_clear();
    1bde:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
     lcd_data('1');
    1be2:	81 e3       	ldi	r24, 0x31	; 49
    1be4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
     lcd_fix_string(CapZeich);	// "-||-"
    1be8:	83 e9       	ldi	r24, 0x93	; 147
    1bea:	91 e0       	ldi	r25, 0x01	; 1
    1bec:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
     lcd_data('3');
    1bf0:	83 e3       	ldi	r24, 0x33	; 51
    1bf2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
     lcd_fix_string(MinCap_str); // " >100nF!"
    1bf6:	87 e1       	ldi	r24, 0x17	; 23
    1bf8:	92 e0       	ldi	r25, 0x02	; 2
    1bfa:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
     PartFound = PART_NONE;
    1bfe:	10 92 07 01 	sts	0x0107, r1
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
    1c02:	82 e0       	ldi	r24, 0x02	; 2
    1c04:	60 e0       	ldi	r22, 0x00	; 0
    1c06:	0e 94 19 15 	call	0x2a32	; 0x2a32 <ReadCapacity>
    1c0a:	20 91 5b 01 	lds	r18, 0x015B
    1c0e:	30 91 5c 01 	lds	r19, 0x015C
    1c12:	40 91 5d 01 	lds	r20, 0x015D
    1c16:	50 91 5e 01 	lds	r21, 0x015E
    1c1a:	00 91 6b 01 	lds	r16, 0x016B
     while (cap.cpre < -9) {
    1c1e:	07 c0       	rjmp	.+14     	; 0x1c2e <AutoCheck+0x758>
        cap.cpre++;
        cap.cval /= 10;
    1c20:	ca 01       	movw	r24, r20
    1c22:	b9 01       	movw	r22, r18
    1c24:	a5 01       	movw	r20, r10
    1c26:	94 01       	movw	r18, r8
    1c28:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
    1c2c:	0f 5f       	subi	r16, 0xFF	; 255
     lcd_data('3');
     lcd_fix_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1c2e:	07 3f       	cpi	r16, 0xF7	; 247
    1c30:	bc f3       	brlt	.-18     	; 0x1c20 <AutoCheck+0x74a>
    1c32:	00 93 6b 01 	sts	0x016B, r16
    1c36:	20 93 5b 01 	sts	0x015B, r18
    1c3a:	f7 01       	movw	r30, r14
    1c3c:	31 83       	std	Z+1, r19	; 0x01
    1c3e:	42 83       	std	Z+2, r20	; 0x02
    1c40:	53 83       	std	Z+3, r21	; 0x03
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1c42:	07 3f       	cpi	r16, 0xF7	; 247
    1c44:	09 f0       	breq	.+2      	; 0x1c48 <AutoCheck+0x772>
    1c46:	be c0       	rjmp	.+380    	; 0x1dc4 <AutoCheck+0x8ee>
    1c48:	20 36       	cpi	r18, 0x60	; 96
    1c4a:	31 05       	cpc	r19, r1
    1c4c:	41 05       	cpc	r20, r1
    1c4e:	51 05       	cpc	r21, r1
    1c50:	08 f4       	brcc	.+2      	; 0x1c54 <AutoCheck+0x77e>
    1c52:	b8 c0       	rjmp	.+368    	; 0x1dc4 <AutoCheck+0x8ee>
    1c54:	20 3f       	cpi	r18, 0xF0	; 240
    1c56:	f5 e5       	ldi	r31, 0x55	; 85
    1c58:	3f 07       	cpc	r19, r31
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	4f 07       	cpc	r20, r31
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	5f 07       	cpc	r21, r31
    1c62:	08 f0       	brcs	.+2      	; 0x1c66 <AutoCheck+0x790>
    1c64:	af c0       	rjmp	.+350    	; 0x1dc4 <AutoCheck+0x8ee>
        cap_found++;
    1c66:	1f 5f       	subi	r17, 0xFF	; 255
     } else {
        cap_found = 0;		// wait for stable connection
     }
     if (cap_found > 1) {
    1c68:	12 30       	cpi	r17, 0x02	; 2
    1c6a:	09 f0       	breq	.+2      	; 0x1c6e <AutoCheck+0x798>
    1c6c:	ac c0       	rjmp	.+344    	; 0x1dc6 <AutoCheck+0x8f0>
        // value of capacitor is correct
        (void) eeprom_write_word((uint16_t *)(&ref_offset), load_diff);	// hold zero offset + slew rate dependend offset
    1c6e:	60 91 6d 01 	lds	r22, 0x016D
    1c72:	70 91 6e 01 	lds	r23, 0x016E
    1c76:	87 e6       	ldi	r24, 0x67	; 103
    1c78:	92 e0       	ldi	r25, 0x02	; 2
    1c7a:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__eewr_word_m328>
        lcd_clear();
    1c7e:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
        lcd_fix_string(REF_C_str);	// "REF_C="
    1c82:	8f e1       	ldi	r24, 0x1F	; 31
    1c84:	92 e0       	ldi	r25, 0x02	; 2
    1c86:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
        lcd_string(itoa(load_diff, outval, 10));	//output REF_C_KORR
    1c8a:	80 91 6d 01 	lds	r24, 0x016D
    1c8e:	90 91 6e 01 	lds	r25, 0x016E
    1c92:	6c e0       	ldi	r22, 0x0C	; 12
    1c94:	71 e0       	ldi	r23, 0x01	; 1
    1c96:	4a e0       	ldi	r20, 0x0A	; 10
    1c98:	50 e0       	ldi	r21, 0x00	; 0
    1c9a:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <itoa>
    1c9e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_string>
        eeprom_write_byte((uint8_t *)(&EE_ESR_ZERO), (uint8_t)ESR_ZERO); // set to initial zero offset
    1ca2:	80 e7       	ldi	r24, 0x70	; 112
    1ca4:	92 e0       	ldi	r25, 0x02	; 2
    1ca6:	6d e1       	ldi	r22, 0x1D	; 29
    1ca8:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__eewr_byte_m328>
        wait_about1s();
        }
//#######################################
#endif
 #ifdef AUTOSCALE_ADC
        ADC_PORT =  TXD_VAL;	//ADC-Port 1 to GND
    1cac:	88 e0       	ldi	r24, 0x08	; 8
    1cae:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    1cb0:	89 e0       	ldi	r24, 0x09	; 9
    1cb2:	87 b9       	out	0x07, r24	; 7
        R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1cb4:	80 e2       	ldi	r24, 0x20	; 32
    1cb6:	84 b9       	out	0x04, r24	; 4
        do {
           adcmv[0] = ReadADC(TP3);
    1cb8:	82 e0       	ldi	r24, 0x02	; 2
    1cba:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
        } while (adcmv[0] > 980);
    1cbe:	23 e0       	ldi	r18, 0x03	; 3
    1cc0:	85 3d       	cpi	r24, 0xD5	; 213
    1cc2:	92 07       	cpc	r25, r18
    1cc4:	cc f7       	brge	.-14     	; 0x1cb8 <AutoCheck+0x7e2>
        R_DDR = 0;		//all Pins to input 
    1cc6:	14 b8       	out	0x04, r1	; 4
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1cc8:	10 92 3c 01 	sts	0x013C, r1
    1ccc:	10 92 3b 01 	sts	0x013B, r1
        adcmv[0] = ReadADC(TP3);  // get cap voltage with VCC reference
    1cd0:	82 e0       	ldi	r24, 0x02	; 2
    1cd2:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
    1cd6:	4c 01       	movw	r8, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1cd8:	8f e5       	ldi	r24, 0x5F	; 95
    1cda:	92 e0       	ldi	r25, 0x02	; 2
    1cdc:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__eerd_byte_m328>
    1ce0:	99 27       	eor	r25, r25
    1ce2:	87 fd       	sbrc	r24, 7
    1ce4:	90 95       	com	r25
    1ce6:	20 91 3f 01 	lds	r18, 0x013F
    1cea:	30 91 40 01 	lds	r19, 0x0140
    1cee:	82 0f       	add	r24, r18
    1cf0:	93 1f       	adc	r25, r19
    1cf2:	90 93 3c 01 	sts	0x013C, r25
    1cf6:	80 93 3b 01 	sts	0x013B, r24
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
    1cfa:	82 e0       	ldi	r24, 0x02	; 2
    1cfc:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
    1d00:	8c 01       	movw	r16, r24
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1d02:	10 92 3c 01 	sts	0x013C, r1
    1d06:	10 92 3b 01 	sts	0x013B, r1
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
    1d0a:	82 e0       	ldi	r24, 0x02	; 2
    1d0c:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
    1d10:	5c 01       	movw	r10, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1d12:	c0 90 3f 01 	lds	r12, 0x013F
    1d16:	d0 90 40 01 	lds	r13, 0x0140
    1d1a:	8f e5       	ldi	r24, 0x5F	; 95
    1d1c:	92 e0       	ldi	r25, 0x02	; 2
    1d1e:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__eerd_byte_m328>
    1d22:	99 27       	eor	r25, r25
    1d24:	87 fd       	sbrc	r24, 7
    1d26:	90 95       	com	r25
    1d28:	8c 0d       	add	r24, r12
    1d2a:	9d 1d       	adc	r25, r13
    1d2c:	90 93 3c 01 	sts	0x013C, r25
    1d30:	80 93 3b 01 	sts	0x013B, r24
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1d34:	8f e5       	ldi	r24, 0x5F	; 95
    1d36:	92 e0       	ldi	r25, 0x02	; 2
    1d38:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__eerd_byte_m328>
    1d3c:	f8 2e       	mov	r15, r24
        lcd_line2();
    1d3e:	80 ec       	ldi	r24, 0xC0	; 192
    1d40:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
        lcd_fix_string(REF_R_str);	// "REF_R="
    1d44:	86 e2       	ldi	r24, 0x26	; 38
    1d46:	92 e0       	ldi	r25, 0x02	; 2
    1d48:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1d4c:	8f e5       	ldi	r24, 0x5F	; 95
    1d4e:	92 e0       	ldi	r25, 0x02	; 2
    1d50:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__eerd_byte_m328>
        ADCconfig.U_Bandgap = ADC_internal_reference;
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
        ADCconfig.U_Bandgap = ADC_internal_reference;
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1d54:	43 e0       	ldi	r20, 0x03	; 3
    1d56:	e4 2e       	mov	r14, r20
    1d58:	e8 0e       	add	r14, r24
    1d5a:	a8 0c       	add	r10, r8
    1d5c:	b9 1c       	adc	r11, r9
    1d5e:	a0 1a       	sub	r10, r16
    1d60:	b1 0a       	sbc	r11, r17
    1d62:	a0 1a       	sub	r10, r16
    1d64:	b1 0a       	sbc	r11, r17
    1d66:	b5 01       	movw	r22, r10
    1d68:	88 27       	eor	r24, r24
    1d6a:	77 fd       	sbrc	r23, 7
    1d6c:	80 95       	com	r24
    1d6e:	98 2f       	mov	r25, r24
    1d70:	2f 2d       	mov	r18, r15
    1d72:	33 27       	eor	r19, r19
    1d74:	27 fd       	sbrc	r18, 7
    1d76:	30 95       	com	r19
    1d78:	2c 0d       	add	r18, r12
    1d7a:	3d 1d       	adc	r19, r13
    1d7c:	40 e0       	ldi	r20, 0x00	; 0
    1d7e:	50 e0       	ldi	r21, 0x00	; 0
    1d80:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
    1d84:	00 0f       	add	r16, r16
    1d86:	11 1f       	adc	r17, r17
    1d88:	98 01       	movw	r18, r16
    1d8a:	44 27       	eor	r20, r20
    1d8c:	37 fd       	sbrc	r19, 7
    1d8e:	40 95       	com	r20
    1d90:	54 2f       	mov	r21, r20
    1d92:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <__divmodsi4>
        lcd_line2();
        lcd_fix_string(REF_R_str);	// "REF_R="
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1d96:	e2 0e       	add	r14, r18
        (void) eeprom_write_byte((uint8_t *)(&RefDiff), (uint8_t)udiff2);	// hold offset for true reference Voltage
    1d98:	8f e5       	ldi	r24, 0x5F	; 95
    1d9a:	92 e0       	ldi	r25, 0x02	; 2
    1d9c:	6e 2d       	mov	r22, r14
    1d9e:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__eewr_byte_m328>
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
    1da2:	8e 2d       	mov	r24, r14
    1da4:	99 27       	eor	r25, r25
    1da6:	87 fd       	sbrc	r24, 7
    1da8:	90 95       	com	r25
    1daa:	6c e0       	ldi	r22, 0x0C	; 12
    1dac:	71 e0       	ldi	r23, 0x01	; 1
    1dae:	4a e0       	ldi	r20, 0x0A	; 10
    1db0:	50 e0       	ldi	r21, 0x00	; 0
    1db2:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <itoa>
    1db6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_string>
 #endif
        wait_about4s();
    1dba:	80 e2       	ldi	r24, 0x20	; 32
    1dbc:	93 e0       	ldi	r25, 0x03	; 3
    1dbe:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
        break;
    1dc2:	19 c0       	rjmp	.+50     	; 0x1df6 <AutoCheck+0x920>
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1dc4:	10 e0       	ldi	r17, 0x00	; 0
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
 #endif
        wait_about4s();
        break;
     }
     lcd_line2();
    1dc6:	80 ec       	ldi	r24, 0xC0	; 192
    1dc8:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
     DisplayValue(cap.cval,cap.cpre,'F',4);
    1dcc:	60 91 5b 01 	lds	r22, 0x015B
    1dd0:	70 91 5c 01 	lds	r23, 0x015C
    1dd4:	80 91 5d 01 	lds	r24, 0x015D
    1dd8:	90 91 5e 01 	lds	r25, 0x015E
    1ddc:	40 91 6b 01 	lds	r20, 0x016B
    1de0:	26 e4       	ldi	r18, 0x46	; 70
    1de2:	04 e0       	ldi	r16, 0x04	; 4
    1de4:	0e 94 3b 02 	call	0x476	; 0x476 <DisplayValue>
     wait_about200ms();			// wait additional time
    1de8:	88 e2       	ldi	r24, 0x28	; 40
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
    1df0:	ca 94       	dec	r12
 wait_about2s();		//wait 2 seconds
 
#ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
    1df2:	09 f0       	breq	.+2      	; 0x1df6 <AutoCheck+0x920>
    1df4:	f4 ce       	rjmp	.-536    	; 0x1bde <AutoCheck+0x708>
     wait_about200ms();			// wait additional time
  } // end for ww

#endif

  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    1df6:	89 e1       	ldi	r24, 0x19	; 25
    1df8:	80 93 39 01 	sts	0x0139, r24
  lcd_clear();
    1dfc:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
  lcd_line2();
    1e00:	80 ec       	ldi	r24, 0xC0	; 192
    1e02:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_string(VERSION_str);	//"Version ..."
    1e06:	8d eb       	ldi	r24, 0xBD	; 189
    1e08:	91 e0       	ldi	r25, 0x01	; 1
    1e0a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
  lcd_line1();
    1e0e:	80 e8       	ldi	r24, 0x80	; 128
    1e10:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_string(ATE);		//"Selftest End"
    1e14:	82 e5       	ldi	r24, 0x52	; 82
    1e16:	91 e0       	ldi	r25, 0x01	; 1
    1e18:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
        // if key is pressed, don't repeat
        break;
     }
  }
#endif
 PartFound = PART_NONE;
    1e1c:	10 92 07 01 	sts	0x0107, r1
 wait_about1s();			//wait 1 seconds
    1e20:	88 ec       	ldi	r24, 0xC8	; 200
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
 } 
    1e28:	2e 96       	adiw	r28, 0x0e	; 14
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	f8 94       	cli
    1e2e:	de bf       	out	0x3e, r29	; 62
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	cd bf       	out	0x3d, r28	; 61
    1e34:	cf 91       	pop	r28
    1e36:	df 91       	pop	r29
    1e38:	1f 91       	pop	r17
    1e3a:	0f 91       	pop	r16
    1e3c:	ff 90       	pop	r15
    1e3e:	ef 90       	pop	r14
    1e40:	df 90       	pop	r13
    1e42:	cf 90       	pop	r12
    1e44:	bf 90       	pop	r11
    1e46:	af 90       	pop	r10
    1e48:	9f 90       	pop	r9
    1e4a:	8f 90       	pop	r8
    1e4c:	7f 90       	pop	r7
    1e4e:	6f 90       	pop	r6
    1e50:	5f 90       	pop	r5
    1e52:	4f 90       	pop	r4
    1e54:	3f 90       	pop	r3
    1e56:	2f 90       	pop	r2
    1e58:	08 95       	ret

00001e5a <main>:
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
  EMPTY_INTERRUPT(ADC_vect);
#endif

//begin of transistortester program
int main(void) {
    1e5a:	0f 93       	push	r16
    1e5c:	1f 93       	push	r17
    1e5e:	cf 93       	push	r28
    1e60:	df 93       	push	r29
  //switch on
  ON_DDR = (1<<ON_PIN);			// switch to output
    1e62:	10 e4       	ldi	r17, 0x40	; 64
    1e64:	1a b9       	out	0x0a, r17	; 10
#ifdef PULLUP_DISABLE
  ON_PORT = (1<<ON_PIN); 		// switch power on 
    1e66:	1b b9       	out	0x0b, r17	; 11
#else
  ON_PORT = (1<<ON_PIN)|(1<<RST_PIN); 	// switch power on , enable internal Pullup for Start-Pin
#endif
  uint8_t tmp;
  //ADC-Init
  ADCSRA = (1<<ADEN) | AUTO_CLOCK_DIV;	//prescaler=8 or 64 (if 8Mhz clock)
    1e68:	86 e8       	ldi	r24, 0x86	; 134
    1e6a:	80 93 7a 00 	sts	0x007A, r24
// #define WDRF_HOME MCU_STATUS_REG
 #define WDRF_HOME MCUCSR
#else
 #define WDRF_HOME MCUSR
#endif
  tmp = (WDRF_HOME & (1<<WDRF));	// save Watch Dog Flag
    1e6e:	04 b7       	in	r16, 0x34	; 52
  WDRF_HOME &= ~(1<<WDRF);	 	//reset Watch Dog flag
    1e70:	84 b7       	in	r24, 0x34	; 52
    1e72:	87 7f       	andi	r24, 0xF7	; 247
    1e74:	84 bf       	out	0x34, r24	; 52
  wdt_disable();			// disable Watch Dog
    1e76:	88 e1       	ldi	r24, 0x18	; 24
    1e78:	0f b6       	in	r0, 0x3f	; 63
    1e7a:	f8 94       	cli
    1e7c:	80 93 60 00 	sts	0x0060, r24
    1e80:	10 92 60 00 	sts	0x0060, r1
    1e84:	0f be       	out	0x3f, r0	; 63
#ifndef INHIBIT_SLEEP_MODE
  // switch off unused Parts
  PRR = (1<<PRTWI) | (1<<PRTIM0) | (1<<PRSPI) | (1<<PRUSART0);
    1e86:	86 ea       	ldi	r24, 0xA6	; 166
    1e88:	80 93 64 00 	sts	0x0064, r24
  DIDR0 = (1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D);	
    1e8c:	88 e3       	ldi	r24, 0x38	; 56
    1e8e:	80 93 7e 00 	sts	0x007E, r24
  TCCR2A = (0<<WGM21) | (0<<WGM20);		// Counter 2 normal mode
    1e92:	10 92 b0 00 	sts	0x00B0, r1
 #if F_CPU == 4000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (0<<CS20);	//prescaler 256, 64us @ 2MHz
  #define T2_PERIOD 64
 #endif 
 #if F_CPU >= 8000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (1<<CS20);	//prescaler 1024, 128us @ 8MHz, 64us @ 16MHz
    1e96:	87 e0       	ldi	r24, 0x07	; 7
    1e98:	80 93 b1 00 	sts	0x00B1, r24
  #define T2_PERIOD (1024 / (F_CPU / 1000000UL));	/* set to 128 or 64 us */
 #endif 
  sei();				// enable interrupts
    1e9c:	78 94       	sei
#endif
  lcd_init();				//initialize LCD
    1e9e:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_init>
	
//  ADC_PORT = TXD_VAL;
//  ADC_DDR = TXD_MSK;
  if(tmp) { 
    1ea2:	03 ff       	sbrs	r16, 3
    1ea4:	0e c0       	rjmp	.+28     	; 0x1ec2 <main+0x68>
     // check if  Watchdog-Event 
     // this happens, if the Watchdog is not reset for 2s
     // can happen, if any loop in the Program doen't finish.
     lcd_line1();
    1ea6:	80 e8       	ldi	r24, 0x80	; 128
    1ea8:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
     lcd_fix_string(TestTimedOut);	//Output Timeout
    1eac:	8a e2       	ldi	r24, 0x2A	; 42
    1eae:	91 e0       	ldi	r25, 0x01	; 1
    1eb0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
     wait_about3s();				//wait for 3 s
    1eb4:	88 e5       	ldi	r24, 0x58	; 88
    1eb6:	92 e0       	ldi	r25, 0x02	; 2
    1eb8:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
     ON_PORT = 0;			//shut off!
    1ebc:	1b b8       	out	0x0b, r1	; 11
     ON_DDR = (1<<ON_PIN);		//switch to GND
    1ebe:	1a b9       	out	0x0a, r17	; 10
     return 0;
    1ec0:	da c4       	rjmp	.+2484   	; 0x2876 <main+0xa1c>
  }
  LCDLoadCustomChar(LCD_CHAR_DIODE1);	//Custom-Character Diode symbol
    1ec2:	88 e4       	ldi	r24, 0x48	; 72
    1ec4:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_customchar(DiodeIcon1);	//load Character  >|
    1ec8:	8d e2       	ldi	r24, 0x2D	; 45
    1eca:	92 e0       	ldi	r25, 0x02	; 2
    1ecc:	0e 94 01 01 	call	0x202	; 0x202 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_DIODE2);	//Custom-Character 
    1ed0:	80 e5       	ldi	r24, 0x50	; 80
    1ed2:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_customchar(DiodeIcon2);	//load Character  |<
    1ed6:	85 e3       	ldi	r24, 0x35	; 53
    1ed8:	92 e0       	ldi	r25, 0x02	; 2
    1eda:	0e 94 01 01 	call	0x202	; 0x202 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_CAP);	//Custom-Character  Capacitor symbol
    1ede:	88 e5       	ldi	r24, 0x58	; 88
    1ee0:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_customchar(CapIcon);		//load Character  ||
    1ee4:	8d e3       	ldi	r24, 0x3D	; 61
    1ee6:	92 e0       	ldi	r25, 0x02	; 2
    1ee8:	0e 94 01 01 	call	0x202	; 0x202 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS1);	//Custom-Character Resistor symbol
    1eec:	88 e7       	ldi	r24, 0x78	; 120
    1eee:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_customchar(ResIcon1);		//load Character  [
    1ef2:	85 e4       	ldi	r24, 0x45	; 69
    1ef4:	92 e0       	ldi	r25, 0x02	; 2
    1ef6:	0e 94 01 01 	call	0x202	; 0x202 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS2);	//Custom-Character 
    1efa:	80 e7       	ldi	r24, 0x70	; 112
    1efc:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_customchar(ResIcon2);		//load Character  ]
    1f00:	8d e4       	ldi	r24, 0x4D	; 77
    1f02:	92 e0       	ldi	r25, 0x02	; 2
    1f04:	0e 94 01 01 	call	0x202	; 0x202 <lcd_fix_customchar>
#endif
#ifdef PULLUP_DISABLE
 #ifdef __AVR_ATmega8__
  SFIOR = (1<<PUD);		// disable Pull-Up Resistors mega8
 #else
  MCUCR = (1<<PUD);		// disable Pull-Up Resistors mega168 family
    1f08:	80 e1       	ldi	r24, 0x10	; 16
    1f0a:	85 bf       	out	0x35, r24	; 53
  }
#else
  #define display_time OFF_WAIT_TIME
#endif

  empty_count = 0;
    1f0c:	10 92 43 01 	sts	0x0143, r1
  mess_count = 0;
    1f10:	10 92 0b 01 	sts	0x010B, r1


//*****************************************************************
//Entry: if start key is pressed before shut down
start:
  PartFound = PART_NONE;	// no part found
    1f14:	10 92 07 01 	sts	0x0107, r1
  NumOfDiodes = 0;		// Number of diodes = 0
    1f18:	10 92 05 01 	sts	0x0105, r1
  PartReady = 0;
    1f1c:	10 92 04 01 	sts	0x0104, r1
  PartMode = 0;
    1f20:	10 92 06 01 	sts	0x0106, r1
  WithReference = 0;		// no precision reference voltage
    1f24:	10 92 42 01 	sts	0x0142, r1
  lcd_clear();
    1f28:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
  ADC_DDR = TXD_MSK;		//activate Software-UART 
    1f2c:	18 e0       	ldi	r17, 0x08	; 8
    1f2e:	17 b9       	out	0x07, r17	; 7
#ifdef AUTO_CAL
  resis680pl = eeprom_read_word(&R680pl); // 680 Ohm resistance plus output resistance to +
    1f30:	8b e5       	ldi	r24, 0x5B	; 91
    1f32:	92 e0       	ldi	r25, 0x02	; 2
    1f34:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__eerd_word_m328>
    1f38:	90 93 09 01 	sts	0x0109, r25
    1f3c:	80 93 08 01 	sts	0x0108, r24
  resis680mi = eeprom_read_word(&R680mi); // 680 Ohm resistance plus output resistance to -
    1f40:	8d e5       	ldi	r24, 0x5D	; 93
    1f42:	92 e0       	ldi	r25, 0x02	; 2
    1f44:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__eerd_word_m328>
    1f48:	90 93 03 01 	sts	0x0103, r25
    1f4c:	80 93 02 01 	sts	0x0102, r24
#endif

  ResistorsFound = 0;		// no resistors found
    1f50:	10 92 57 01 	sts	0x0157, r1
  cap.ca = 0;
    1f54:	10 92 69 01 	sts	0x0169, r1
  cap.cb = 0;
    1f58:	10 92 6a 01 	sts	0x016A, r1
#ifdef WITH_UART
  uart_newline();		// start of new measurement
    1f5c:	0e 94 8c 00 	call	0x118	; 0x118 <uart_newline>
#endif
  ADCconfig.RefFlag = 0;
    1f60:	10 92 3a 01 	sts	0x013A, r1
  ADCconfig.U_AVCC = U_VCC;	// set initial VCC Voltage
    1f64:	88 e8       	ldi	r24, 0x88	; 136
    1f66:	93 e1       	ldi	r25, 0x13	; 19
    1f68:	90 93 3e 01 	sts	0x013E, r25
    1f6c:	80 93 3d 01 	sts	0x013D, r24
  ADCconfig.Samples = 190;		// set number of ADC samples near to max
    1f70:	8e eb       	ldi	r24, 0xBE	; 190
    1f72:	80 93 39 01 	sts	0x0139, r24
  ADC_PORT = TXD_VAL;			// switch to 0V
    1f76:	18 b9       	out	0x08, r17	; 8
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with 2.5V reference to GND
    1f78:	88 e1       	ldi	r24, 0x18	; 24
    1f7a:	87 b9       	out	0x07, r24	; 7
  wait1ms();
    1f7c:	0e 94 76 14 	call	0x28ec	; 0x28ec <wait1ms>
  ADC_DDR =  TXD_MSK; 	// switch pin with reference back to input
    1f80:	17 b9       	out	0x07, r17	; 7
#if FLASHEND > 0x1fff
  trans.uBE[1] = W5msReadADC(TPREF); // read voltage of 2.5V precision reference
    1f82:	84 e0       	ldi	r24, 0x04	; 4
    1f84:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
    1f88:	ec 01       	movw	r28, r24
    1f8a:	90 93 53 01 	sts	0x0153, r25
    1f8e:	80 93 52 01 	sts	0x0152, r24
  if ((trans.uBE[1] > 2250) && (trans.uBE[1] < 2750)) {
    1f92:	8b 5c       	subi	r24, 0xCB	; 203
    1f94:	98 40       	sbci	r25, 0x08	; 8
    1f96:	21 e0       	ldi	r18, 0x01	; 1
    1f98:	83 3f       	cpi	r24, 0xF3	; 243
    1f9a:	92 07       	cpc	r25, r18
    1f9c:	c0 f4       	brcc	.+48     	; 0x1fce <main+0x174>
     // precision voltage reference connected, update U_AVCC
     WithReference = 1;
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	80 93 42 01 	sts	0x0142, r24
     ADCconfig.U_AVCC = (unsigned long)((unsigned long)ADCconfig.U_AVCC * 2495) / trans.uBE[1];
    1fa4:	60 91 3d 01 	lds	r22, 0x013D
    1fa8:	70 91 3e 01 	lds	r23, 0x013E
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	2f eb       	ldi	r18, 0xBF	; 191
    1fb2:	39 e0       	ldi	r19, 0x09	; 9
    1fb4:	40 e0       	ldi	r20, 0x00	; 0
    1fb6:	50 e0       	ldi	r21, 0x00	; 0
    1fb8:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
    1fbc:	9e 01       	movw	r18, r28
    1fbe:	40 e0       	ldi	r20, 0x00	; 0
    1fc0:	50 e0       	ldi	r21, 0x00	; 0
    1fc2:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
    1fc6:	30 93 3e 01 	sts	0x013E, r19
    1fca:	20 93 3d 01 	sts	0x013D, r18
  }
#endif
  lcd_line1();	//1. row 
    1fce:	80 e8       	ldi	r24, 0x80	; 128
    1fd0:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  
#ifdef WITH_AUTO_REF
  (void) ReadADC(MUX_INT_REF);		// read internal Reference-voltage 
    1fd4:	8e e0       	ldi	r24, 0x0E	; 14
    1fd6:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
  ref_mv = W20msReadADC(MUX_INT_REF);	// read internal Reference-voltage
    1fda:	8e e0       	ldi	r24, 0x0E	; 14
    1fdc:	0e 94 06 1b 	call	0x360c	; 0x360c <W20msReadADC>
    1fe0:	ec 01       	movw	r28, r24
    1fe2:	90 93 40 01 	sts	0x0140, r25
    1fe6:	80 93 3f 01 	sts	0x013F, r24
#else
  ref_mv = DEFAULT_BAND_GAP;	// set to default Reference Voltage
#endif
  ADCconfig.U_Bandgap = ADC_internal_reference;	// set internal reference voltage for ADC
    1fea:	8f e5       	ldi	r24, 0x5F	; 95
    1fec:	92 e0       	ldi	r25, 0x02	; 2
    1fee:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__eerd_byte_m328>
    1ff2:	99 27       	eor	r25, r25
    1ff4:	87 fd       	sbrc	r24, 7
    1ff6:	90 95       	com	r25
    1ff8:	8c 0f       	add	r24, r28
    1ffa:	9d 1f       	adc	r25, r29
    1ffc:	90 93 3c 01 	sts	0x013C, r25
    2000:	80 93 3b 01 	sts	0x013B, r24
  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    2004:	89 e1       	ldi	r24, 0x19	; 25
    2006:	80 93 39 01 	sts	0x0139, r24

#ifdef BAT_CHECK
  // Battery check is selected
  ReadADC(TPBAT);	//Dummy-Readout
    200a:	85 e0       	ldi	r24, 0x05	; 5
    200c:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
  trans.uBE[0] = W5msReadADC(TPBAT); 	//with 5V reference
    2010:	85 e0       	ldi	r24, 0x05	; 5
    2012:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <W5msReadADC>
    2016:	90 93 51 01 	sts	0x0151, r25
    201a:	80 93 50 01 	sts	0x0150, r24
  lcd_fix_string(Bat_str);		//output: "Bat. "
    201e:	8b e5       	ldi	r24, 0x5B	; 91
    2020:	91 e0       	ldi	r25, 0x01	; 1
    2022:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
 #ifdef BAT_OUT
  // display Battery voltage
  // The divisor to get the voltage in 0.01V units is ((10*33)/133) witch is about 2.4812
  // A good result can be get with multiply by 4 and divide by 10 (about 0.75%).
  cap.cval = (trans.uBE[0]*4)/10+((BAT_OUT+5)/10); // usually output only 2 digits
    2026:	80 91 50 01 	lds	r24, 0x0150
    202a:	90 91 51 01 	lds	r25, 0x0151
    202e:	88 0f       	add	r24, r24
    2030:	99 1f       	adc	r25, r25
    2032:	88 0f       	add	r24, r24
    2034:	99 1f       	adc	r25, r25
    2036:	6a e0       	ldi	r22, 0x0A	; 10
    2038:	70 e0       	ldi	r23, 0x00	; 0
    203a:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__udivmodhi4>
    203e:	61 5f       	subi	r22, 0xF1	; 241
    2040:	7f 4f       	sbci	r23, 0xFF	; 255
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	60 93 5b 01 	sts	0x015B, r22
    204a:	70 93 5c 01 	sts	0x015C, r23
    204e:	80 93 5d 01 	sts	0x015D, r24
    2052:	90 93 5e 01 	sts	0x015E, r25
  DisplayValue(cap.cval,-2,'V',2);		// Display 2 Digits of this 10mV units
    2056:	4e ef       	ldi	r20, 0xFE	; 254
    2058:	26 e5       	ldi	r18, 0x56	; 86
    205a:	02 e0       	ldi	r16, 0x02	; 2
    205c:	0e 94 3b 02 	call	0x476	; 0x476 <DisplayValue>
  lcd_space();
    2060:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>
  // less than 3.0 V only .2V difference to Warn-Level
  #define WARN_LEVEL (((unsigned long)(BAT_POOR*100+200)*(unsigned long)33)/133)
 #endif
 #define POOR_LEVEL (((unsigned long)(BAT_POOR*100)*(unsigned long)33)/133)
  // check the battery voltage
  if (trans.uBE[0] <  WARN_LEVEL) {
    2064:	80 91 50 01 	lds	r24, 0x0150
    2068:	90 91 51 01 	lds	r25, 0x0151
    206c:	26 e0       	ldi	r18, 0x06	; 6
    206e:	8a 3f       	cpi	r24, 0xFA	; 250
    2070:	92 07       	cpc	r25, r18
    2072:	88 f4       	brcc	.+34     	; 0x2096 <main+0x23c>
     //Vcc < 7,3V; show Warning 
     if(trans.uBE[0] < POOR_LEVEL) {	
    2074:	26 e0       	ldi	r18, 0x06	; 6
    2076:	83 33       	cpi	r24, 0x33	; 51
    2078:	92 07       	cpc	r25, r18
    207a:	50 f4       	brcc	.+20     	; 0x2090 <main+0x236>
        //Vcc <6,3V; no proper operation is possible
        lcd_fix_string(BatEmpty);	//Battery empty!
    207c:	88 ed       	ldi	r24, 0xD8	; 216
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
        wait_about2s();
    2084:	80 e9       	ldi	r24, 0x90	; 144
    2086:	91 e0       	ldi	r25, 0x01	; 1
    2088:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
        PORTD = 0;			//switch power off
    208c:	1b b8       	out	0x0b, r1	; 11
        return 0;
    208e:	f3 c3       	rjmp	.+2022   	; 0x2876 <main+0xa1c>
     }
     lcd_fix_string(BatWeak);		//Battery weak
    2090:	83 ed       	ldi	r24, 0xD3	; 211
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	02 c0       	rjmp	.+4      	; 0x209a <main+0x240>
  } else { // Battery-voltage OK
     lcd_fix_string(OK_str); 		// "OK"
    2096:	81 e6       	ldi	r24, 0x61	; 97
    2098:	91 e0       	ldi	r25, 0x01	; 1
    209a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
  }
#else
  lcd_fix_string(VERSION_str);		// if no Battery check, Version .. in row 1
#endif
#ifdef WDT_enabled
  wdt_enable(WDTO_2S);		//Watchdog on
    209e:	2f e0       	ldi	r18, 0x0F	; 15
    20a0:	88 e1       	ldi	r24, 0x18	; 24
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	0f b6       	in	r0, 0x3f	; 63
    20a6:	f8 94       	cli
    20a8:	a8 95       	wdr
    20aa:	80 93 60 00 	sts	0x0060, r24
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	20 93 60 00 	sts	0x0060, r18
#endif

//  wait_about1s();			// add more time for reading batterie voltage
  // begin tests
#ifdef AUTO_RH
  RefVoltage();			//compute RHmultip = f(reference voltage)
    20b4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <RefVoltage>
#endif
#if FLASHEND > 0x1fff
  if (WithReference) {
    20b8:	80 91 42 01 	lds	r24, 0x0142
    20bc:	88 23       	and	r24, r24
    20be:	f1 f0       	breq	.+60     	; 0x20fc <main+0x2a2>
     /* 2.5V precision reference is checked OK */
     if ((mess_count == 0) && (empty_count == 0)) {
    20c0:	80 91 0b 01 	lds	r24, 0x010B
    20c4:	88 23       	and	r24, r24
    20c6:	d1 f4       	brne	.+52     	; 0x20fc <main+0x2a2>
    20c8:	80 91 43 01 	lds	r24, 0x0143
    20cc:	88 23       	and	r24, r24
    20ce:	b1 f4       	brne	.+44     	; 0x20fc <main+0x2a2>
         /* display VCC= only first time */
         lcd_line2();
    20d0:	80 ec       	ldi	r24, 0xC0	; 192
    20d2:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
         lcd_fix_string(VCC_str);		// VCC=
    20d6:	8d e9       	ldi	r24, 0x9D	; 157
    20d8:	91 e0       	ldi	r25, 0x01	; 1
    20da:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
         DisplayValue(ADCconfig.U_AVCC,-3,'V',3);	// Display 3 Digits of this mV units
    20de:	60 91 3d 01 	lds	r22, 0x013D
    20e2:	70 91 3e 01 	lds	r23, 0x013E
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	4d ef       	ldi	r20, 0xFD	; 253
    20ec:	26 e5       	ldi	r18, 0x56	; 86
    20ee:	03 e0       	ldi	r16, 0x03	; 3
    20f0:	0e 94 3b 02 	call	0x476	; 0x476 <DisplayValue>
         wait_about1s();
    20f4:	88 ec       	ldi	r24, 0xC8	; 200
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
     DisplayValue(trans.uBE[1]*10,-3,'V',3);	// Display 3 Digits of this mV units
     wait_about300ms();
  }
#endif

  lcd_line2();			//LCD position row2, column 1
    20fc:	80 ec       	ldi	r24, 0xC0	; 192
    20fe:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_string(TestRunning);		//String: testing...
    2102:	88 ec       	ldi	r24, 0xC8	; 200
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
#ifndef DebugOut
  lcd_line2();			//LCD position row 2, column 1
    210a:	80 ec       	ldi	r24, 0xC0	; 192
    210c:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
#endif
  EntladePins();		// discharge all capacitors!
    2110:	0e 94 48 01 	call	0x290	; 0x290 <EntladePins>
  if(PartFound == PART_CELL) {
    2114:	80 91 07 01 	lds	r24, 0x0107
    2118:	88 30       	cpi	r24, 0x08	; 8
    211a:	39 f4       	brne	.+14     	; 0x212a <main+0x2d0>
    lcd_clear();
    211c:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
    lcd_fix_string(Cell_str);	// display "Cell!"
    2120:	87 e9       	ldi	r24, 0x97	; 151
    2122:	91 e0       	ldi	r25, 0x01	; 1
    2124:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
    goto end2;
    2128:	78 c3       	rjmp	.+1776   	; 0x281a <main+0x9c0>
  }

#ifdef CHECK_CALL
  AutoCheck();			//check, if selftest should be done
    212a:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <AutoCheck>
#endif
     
  // check all 6 combinations for the 3 pins 
//         High  Low  Tri
  CheckPins(TP1, TP2, TP3);
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	61 e0       	ldi	r22, 0x01	; 1
    2132:	42 e0       	ldi	r20, 0x02	; 2
    2134:	0e 94 75 03 	call	0x6ea	; 0x6ea <CheckPins>
  CheckPins(TP2, TP1, TP3);
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	60 e0       	ldi	r22, 0x00	; 0
    213c:	42 e0       	ldi	r20, 0x02	; 2
    213e:	0e 94 75 03 	call	0x6ea	; 0x6ea <CheckPins>

  CheckPins(TP1, TP3, TP2);
    2142:	80 e0       	ldi	r24, 0x00	; 0
    2144:	62 e0       	ldi	r22, 0x02	; 2
    2146:	41 e0       	ldi	r20, 0x01	; 1
    2148:	0e 94 75 03 	call	0x6ea	; 0x6ea <CheckPins>
  CheckPins(TP3, TP1, TP2);
    214c:	82 e0       	ldi	r24, 0x02	; 2
    214e:	60 e0       	ldi	r22, 0x00	; 0
    2150:	41 e0       	ldi	r20, 0x01	; 1
    2152:	0e 94 75 03 	call	0x6ea	; 0x6ea <CheckPins>

  CheckPins(TP2, TP3, TP1);
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	62 e0       	ldi	r22, 0x02	; 2
    215a:	40 e0       	ldi	r20, 0x00	; 0
    215c:	0e 94 75 03 	call	0x6ea	; 0x6ea <CheckPins>
  CheckPins(TP3, TP2, TP1);
    2160:	82 e0       	ldi	r24, 0x02	; 2
    2162:	61 e0       	ldi	r22, 0x01	; 1
    2164:	40 e0       	ldi	r20, 0x00	; 0
    2166:	0e 94 75 03 	call	0x6ea	; 0x6ea <CheckPins>
  
  //separate check if is is a capacitor
  if(((PartFound == PART_NONE) || (PartFound == PART_RESISTOR) || (PartFound == PART_DIODE)) ) {
    216a:	80 91 07 01 	lds	r24, 0x0107
    216e:	88 23       	and	r24, r24
    2170:	21 f0       	breq	.+8      	; 0x217a <main+0x320>
    2172:	86 30       	cpi	r24, 0x06	; 6
    2174:	11 f0       	breq	.+4      	; 0x217a <main+0x320>
    2176:	81 30       	cpi	r24, 0x01	; 1
    2178:	d9 f4       	brne	.+54     	; 0x21b0 <main+0x356>
     EntladePins();		// discharge capacities
    217a:	0e 94 48 01 	call	0x290	; 0x290 <EntladePins>
     //measurement of capacities in all 3 combinations
     cap.cval_max = 0;		// set max to zero
    217e:	10 92 5f 01 	sts	0x015F, r1
    2182:	10 92 60 01 	sts	0x0160, r1
    2186:	10 92 61 01 	sts	0x0161, r1
    218a:	10 92 62 01 	sts	0x0162, r1
     cap.cpre_max = -12;	// set max to pF unit
    218e:	84 ef       	ldi	r24, 0xF4	; 244
    2190:	80 93 6c 01 	sts	0x016C, r24
     ReadCapacity(TP3, TP1);
    2194:	82 e0       	ldi	r24, 0x02	; 2
    2196:	60 e0       	ldi	r22, 0x00	; 0
    2198:	0e 94 19 15 	call	0x2a32	; 0x2a32 <ReadCapacity>
     ReadCapacity(TP3, TP2);
    219c:	82 e0       	ldi	r24, 0x02	; 2
    219e:	61 e0       	ldi	r22, 0x01	; 1
    21a0:	0e 94 19 15 	call	0x2a32	; 0x2a32 <ReadCapacity>
     ReadCapacity(TP2, TP1);
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	60 e0       	ldi	r22, 0x00	; 0
    21a8:	0e 94 19 15 	call	0x2a32	; 0x2a32 <ReadCapacity>

#if FLASHEND > 0x1fff
     ReadInductance();			// measure inductance
    21ac:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <ReadInductance>
#endif
  }
  //All checks are done, output result to display
  lcd_clear();
    21b0:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
  if(PartFound == PART_DIODE) {
    21b4:	80 91 07 01 	lds	r24, 0x0107
    21b8:	81 30       	cpi	r24, 0x01	; 1
    21ba:	09 f0       	breq	.+2      	; 0x21be <main+0x364>
    21bc:	ff c0       	rjmp	.+510    	; 0x23bc <main+0x562>
     if(NumOfDiodes == 1) {		//single Diode
    21be:	90 91 05 01 	lds	r25, 0x0105
    21c2:	91 30       	cpi	r25, 0x01	; 1
    21c4:	49 f5       	brne	.+82     	; 0x2218 <main+0x3be>
        lcd_fix_string(Diode);		//"Diode: "
    21c6:	8d ee       	ldi	r24, 0xED	; 237
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
        lcd_testpin(diodes[0].Anode);
    21ce:	80 91 6f 01 	lds	r24, 0x016F
    21d2:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
        lcd_fix_string(AnKat);		//"->|-"
    21d6:	8b ea       	ldi	r24, 0xAB	; 171
    21d8:	91 e0       	ldi	r25, 0x01	; 1
    21da:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
        lcd_testpin(diodes[0].Cathode);
    21de:	80 91 70 01 	lds	r24, 0x0170
    21e2:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
        UfAusgabe(0x70);
    21e6:	80 e7       	ldi	r24, 0x70	; 112
    21e8:	0e 94 23 03 	call	0x646	; 0x646 <UfAusgabe>
        lcd_fix_string(GateCap_str);	//"C="
    21ec:	8e e6       	ldi	r24, 0x6E	; 110
    21ee:	91 e0       	ldi	r25, 0x01	; 1
    21f0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
        ReadCapacity(diodes[0].Cathode,diodes[0].Anode);	// Capacity opposite flow direction
    21f4:	80 91 70 01 	lds	r24, 0x0170
    21f8:	60 91 6f 01 	lds	r22, 0x016F
    21fc:	0e 94 19 15 	call	0x2a32	; 0x2a32 <ReadCapacity>
        DisplayValue(cap.cval,cap.cpre,'F',3);
    2200:	60 91 5b 01 	lds	r22, 0x015B
    2204:	70 91 5c 01 	lds	r23, 0x015C
    2208:	80 91 5d 01 	lds	r24, 0x015D
    220c:	90 91 5e 01 	lds	r25, 0x015E
    2210:	40 91 6b 01 	lds	r20, 0x016B
    2214:	26 e4       	ldi	r18, 0x46	; 70
    2216:	82 c2       	rjmp	.+1284   	; 0x271c <main+0x8c2>
        goto end;
     } else if(NumOfDiodes == 2) { // double diode
    2218:	92 30       	cpi	r25, 0x02	; 2
    221a:	09 f0       	breq	.+2      	; 0x221e <main+0x3c4>
    221c:	4c c0       	rjmp	.+152    	; 0x22b6 <main+0x45c>
        lcd_data('2');
    221e:	82 e3       	ldi	r24, 0x32	; 50
    2220:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
        lcd_fix_string(Dioden);		//"diodes "
    2224:	83 eb       	ldi	r24, 0xB3	; 179
    2226:	91 e0       	ldi	r25, 0x01	; 1
    2228:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
        if(diodes[0].Anode == diodes[1].Anode) { //Common Anode
    222c:	90 91 6f 01 	lds	r25, 0x016F
    2230:	20 91 73 01 	lds	r18, 0x0173
    2234:	92 17       	cp	r25, r18
    2236:	59 f4       	brne	.+22     	; 0x224e <main+0x3f4>
           lcd_testpin(diodes[0].Cathode);
    2238:	80 91 70 01 	lds	r24, 0x0170
    223c:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    2240:	8f ea       	ldi	r24, 0xAF	; 175
    2242:	91 e0       	ldi	r25, 0x01	; 1
    2244:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    2248:	80 91 6f 01 	lds	r24, 0x016F
    224c:	2b c0       	rjmp	.+86     	; 0x22a4 <main+0x44a>
           lcd_fix_string(AnKat);	//"->|-"
           lcd_testpin(diodes[1].Cathode);
           UfAusgabe(0x01);
           goto end;
        } else if(diodes[0].Cathode == diodes[1].Cathode) { //Common Cathode
    224e:	30 91 70 01 	lds	r19, 0x0170
    2252:	80 91 74 01 	lds	r24, 0x0174
    2256:	38 17       	cp	r19, r24
    2258:	b9 f4       	brne	.+46     	; 0x2288 <main+0x42e>
           lcd_testpin(diodes[0].Anode);
    225a:	89 2f       	mov	r24, r25
    225c:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2260:	8b ea       	ldi	r24, 0xAB	; 171
    2262:	91 e0       	ldi	r25, 0x01	; 1
    2264:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
	   lcd_testpin(diodes[0].Cathode);
    2268:	80 91 70 01 	lds	r24, 0x0170
    226c:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    2270:	8f ea       	ldi	r24, 0xAF	; 175
    2272:	91 e0       	ldi	r25, 0x01	; 1
    2274:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
           lcd_testpin(diodes[1].Anode);
    2278:	80 91 73 01 	lds	r24, 0x0173
    227c:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
           UfAusgabe(0x01);
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	0e 94 23 03 	call	0x646	; 0x646 <UfAusgabe>
           goto end;
    2286:	c2 c2       	rjmp	.+1412   	; 0x280c <main+0x9b2>
          }
        else if ((diodes[0].Cathode == diodes[1].Anode) && (diodes[1].Cathode == diodes[0].Anode)) {
    2288:	32 17       	cp	r19, r18
    228a:	09 f0       	breq	.+2      	; 0x228e <main+0x434>
    228c:	8d c2       	rjmp	.+1306   	; 0x27a8 <main+0x94e>
    228e:	89 17       	cp	r24, r25
    2290:	09 f0       	breq	.+2      	; 0x2294 <main+0x43a>
    2292:	8a c2       	rjmp	.+1300   	; 0x27a8 <main+0x94e>
           //Antiparallel
           lcd_testpin(diodes[0].Anode);
    2294:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2298:	8b ea       	ldi	r24, 0xAB	; 171
    229a:	91 e0       	ldi	r25, 0x01	; 1
    229c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
           lcd_testpin(diodes[0].Cathode);
    22a0:	80 91 70 01 	lds	r24, 0x0170
    22a4:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    22a8:	8b ea       	ldi	r24, 0xAB	; 171
    22aa:	91 e0       	ldi	r25, 0x01	; 1
    22ac:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
           lcd_testpin(diodes[1].Cathode);
    22b0:	80 91 74 01 	lds	r24, 0x0174
    22b4:	e3 cf       	rjmp	.-58     	; 0x227c <main+0x422>
           UfAusgabe(0x01);
           goto end;
        }
     } else if(NumOfDiodes == 3) {
    22b6:	93 30       	cpi	r25, 0x03	; 3
    22b8:	09 f0       	breq	.+2      	; 0x22bc <main+0x462>
    22ba:	76 c2       	rjmp	.+1260   	; 0x27a8 <main+0x94e>
        //Serial of 2 Diodes; was detected as 3 Diodes 
        trans.b = 3;
    22bc:	90 93 54 01 	sts	0x0154, r25
        trans.c = 3;
    22c0:	90 93 55 01 	sts	0x0155, r25
        /* Check for any constallation of 2 serial diodes:
          Only once the pin No of anyone Cathode is identical of another anode.
          two diodes in series is additionally detected as third big diode.
        */
        if(diodes[0].Cathode == diodes[1].Anode)
    22c4:	50 91 70 01 	lds	r21, 0x0170
    22c8:	90 91 73 01 	lds	r25, 0x0173
    22cc:	59 17       	cp	r21, r25
    22ce:	21 f4       	brne	.+8      	; 0x22d8 <main+0x47e>
          {
           trans.b = 0;
    22d0:	10 92 54 01 	sts	0x0154, r1
           trans.c = 1;
    22d4:	80 93 55 01 	sts	0x0155, r24
          }
        if(diodes[0].Anode == diodes[1].Cathode)
    22d8:	40 91 6f 01 	lds	r20, 0x016F
    22dc:	30 91 74 01 	lds	r19, 0x0174
    22e0:	43 17       	cp	r20, r19
    22e2:	29 f4       	brne	.+10     	; 0x22ee <main+0x494>
          {
           trans.b = 1;
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	80 93 54 01 	sts	0x0154, r24
           trans.c = 0;
    22ea:	10 92 55 01 	sts	0x0155, r1
          }
        if(diodes[0].Cathode == diodes[2].Anode)
    22ee:	20 91 77 01 	lds	r18, 0x0177
    22f2:	52 17       	cp	r21, r18
    22f4:	29 f4       	brne	.+10     	; 0x2300 <main+0x4a6>
          {
           trans.b = 0;
    22f6:	10 92 54 01 	sts	0x0154, r1
           trans.c = 2;
    22fa:	82 e0       	ldi	r24, 0x02	; 2
    22fc:	80 93 55 01 	sts	0x0155, r24
          }
        if(diodes[0].Anode == diodes[2].Cathode)
    2300:	80 91 78 01 	lds	r24, 0x0178
    2304:	48 17       	cp	r20, r24
    2306:	29 f4       	brne	.+10     	; 0x2312 <main+0x4b8>
          {
           trans.b = 2;
    2308:	42 e0       	ldi	r20, 0x02	; 2
    230a:	40 93 54 01 	sts	0x0154, r20
           trans.c = 0;
    230e:	10 92 55 01 	sts	0x0155, r1
          }
        if(diodes[1].Cathode == diodes[2].Anode)
    2312:	32 17       	cp	r19, r18
    2314:	31 f4       	brne	.+12     	; 0x2322 <main+0x4c8>
          {
           trans.b = 1;
    2316:	21 e0       	ldi	r18, 0x01	; 1
    2318:	20 93 54 01 	sts	0x0154, r18
           trans.c = 2;
    231c:	22 e0       	ldi	r18, 0x02	; 2
    231e:	20 93 55 01 	sts	0x0155, r18
          }
        if(diodes[1].Anode == diodes[2].Cathode)
    2322:	98 17       	cp	r25, r24
    2324:	31 f4       	brne	.+12     	; 0x2332 <main+0x4d8>
          {
           trans.b = 2;
    2326:	82 e0       	ldi	r24, 0x02	; 2
    2328:	80 93 54 01 	sts	0x0154, r24
           trans.c = 1;
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	80 93 55 01 	sts	0x0155, r24
        lcd_testpin(diodes[2].Cathode);
        lcd_space();
        lcd_string(utoa(diodes[2].Voltage, outval, 10));
        lcd_line1();
#endif
        if((trans.b<3) && (trans.c<3)) {
    2332:	80 91 54 01 	lds	r24, 0x0154
    2336:	83 30       	cpi	r24, 0x03	; 3
    2338:	08 f0       	brcs	.+2      	; 0x233c <main+0x4e2>
    233a:	36 c2       	rjmp	.+1132   	; 0x27a8 <main+0x94e>
    233c:	80 91 55 01 	lds	r24, 0x0155
    2340:	83 30       	cpi	r24, 0x03	; 3
    2342:	08 f0       	brcs	.+2      	; 0x2346 <main+0x4ec>
    2344:	31 c2       	rjmp	.+1122   	; 0x27a8 <main+0x94e>
           lcd_data('3');
    2346:	83 e3       	ldi	r24, 0x33	; 51
    2348:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
           lcd_fix_string(Dioden);	//"Diodes "
    234c:	83 eb       	ldi	r24, 0xB3	; 179
    234e:	91 e0       	ldi	r25, 0x01	; 1
    2350:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Anode);
    2354:	e0 91 54 01 	lds	r30, 0x0154
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	ee 0f       	add	r30, r30
    235c:	ff 1f       	adc	r31, r31
    235e:	ee 0f       	add	r30, r30
    2360:	ff 1f       	adc	r31, r31
    2362:	e1 59       	subi	r30, 0x91	; 145
    2364:	fe 4f       	sbci	r31, 0xFE	; 254
    2366:	80 81       	ld	r24, Z
    2368:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    236c:	8b ea       	ldi	r24, 0xAB	; 171
    236e:	91 e0       	ldi	r25, 0x01	; 1
    2370:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Cathode);
    2374:	e0 91 54 01 	lds	r30, 0x0154
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	ee 0f       	add	r30, r30
    237c:	ff 1f       	adc	r31, r31
    237e:	ee 0f       	add	r30, r30
    2380:	ff 1f       	adc	r31, r31
    2382:	e1 59       	subi	r30, 0x91	; 145
    2384:	fe 4f       	sbci	r31, 0xFE	; 254
    2386:	81 81       	ldd	r24, Z+1	; 0x01
    2388:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    238c:	8b ea       	ldi	r24, 0xAB	; 171
    238e:	91 e0       	ldi	r25, 0x01	; 1
    2390:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
           lcd_testpin(diodes[trans.c].Cathode);
    2394:	e0 91 55 01 	lds	r30, 0x0155
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	ee 0f       	add	r30, r30
    239c:	ff 1f       	adc	r31, r31
    239e:	ee 0f       	add	r30, r30
    23a0:	ff 1f       	adc	r31, r31
    23a2:	e1 59       	subi	r30, 0x91	; 145
    23a4:	fe 4f       	sbci	r31, 0xFE	; 254
    23a6:	81 81       	ldd	r24, Z+1	; 0x01
    23a8:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
           UfAusgabe( (trans.b<<4)|trans.c);
    23ac:	80 91 54 01 	lds	r24, 0x0154
    23b0:	82 95       	swap	r24
    23b2:	80 7f       	andi	r24, 0xF0	; 240
    23b4:	90 91 55 01 	lds	r25, 0x0155
    23b8:	89 2b       	or	r24, r25
    23ba:	63 cf       	rjmp	.-314    	; 0x2282 <main+0x428>
           goto end;
        }
     }
     // end (PartFound == PART_DIODE)
  } else if (PartFound == PART_TRANSISTOR) {
    23bc:	82 30       	cpi	r24, 0x02	; 2
    23be:	09 f0       	breq	.+2      	; 0x23c2 <main+0x568>
    23c0:	7d c0       	rjmp	.+250    	; 0x24bc <main+0x662>
    if(PartReady != 0) {
    23c2:	80 91 04 01 	lds	r24, 0x0104
    23c6:	88 23       	and	r24, r24
    23c8:	71 f1       	breq	.+92     	; 0x2426 <main+0x5cc>
       if((trans.hfe[0]>trans.hfe[1])) {
    23ca:	80 91 4c 01 	lds	r24, 0x014C
    23ce:	90 91 4d 01 	lds	r25, 0x014D
    23d2:	a0 91 4e 01 	lds	r26, 0x014E
    23d6:	b0 91 4f 01 	lds	r27, 0x014F
    23da:	20 91 48 01 	lds	r18, 0x0148
    23de:	30 91 49 01 	lds	r19, 0x0149
    23e2:	40 91 4a 01 	lds	r20, 0x014A
    23e6:	50 91 4b 01 	lds	r21, 0x014B
    23ea:	82 17       	cp	r24, r18
    23ec:	93 07       	cpc	r25, r19
    23ee:	a4 07       	cpc	r26, r20
    23f0:	b5 07       	cpc	r27, r21
    23f2:	48 f4       	brcc	.+18     	; 0x2406 <main+0x5ac>
          //if the amplification factor was higher at first testr: swap C and E !
          tmp = trans.c;
    23f4:	80 91 55 01 	lds	r24, 0x0155
          trans.c = trans.e;
    23f8:	90 91 56 01 	lds	r25, 0x0156
    23fc:	90 93 55 01 	sts	0x0155, r25
          trans.e = tmp;
    2400:	80 93 56 01 	sts	0x0156, r24
    2404:	10 c0       	rjmp	.+32     	; 0x2426 <main+0x5cc>
       } else {
          trans.hfe[0] = trans.hfe[1];
    2406:	80 93 48 01 	sts	0x0148, r24
    240a:	90 93 49 01 	sts	0x0149, r25
    240e:	a0 93 4a 01 	sts	0x014A, r26
    2412:	b0 93 4b 01 	sts	0x014B, r27
          trans.uBE[0] = trans.uBE[1];
    2416:	80 91 52 01 	lds	r24, 0x0152
    241a:	90 91 53 01 	lds	r25, 0x0153
    241e:	90 93 51 01 	sts	0x0151, r25
    2422:	80 93 50 01 	sts	0x0150, r24
       }
    }

    if(PartMode == PART_MODE_NPN) {
    2426:	80 91 06 01 	lds	r24, 0x0106
    242a:	81 30       	cpi	r24, 0x01	; 1
    242c:	19 f4       	brne	.+6      	; 0x2434 <main+0x5da>
       lcd_fix_string(NPN_str);		//"NPN "
    242e:	84 e7       	ldi	r24, 0x74	; 116
    2430:	91 e0       	ldi	r25, 0x01	; 1
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <main+0x5de>
    } else {
       lcd_fix_string(PNP_str);		//"PNP "
    2434:	89 e7       	ldi	r24, 0x79	; 121
    2436:	91 e0       	ldi	r25, 0x01	; 1
    2438:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
    }
    if( NumOfDiodes > 2) {	//Transistor with protection diode
    243c:	80 91 05 01 	lds	r24, 0x0105
    2440:	83 30       	cpi	r24, 0x03	; 3
    2442:	a0 f0       	brcs	.+40     	; 0x246c <main+0x612>
#ifdef EBC_STYLE
       if(PartMode == PART_MODE_NPN)
#else
       if (((PartMode == PART_MODE_NPN) && (trans.c > trans.e)) || ((PartMode != PART_MODE_NPN) && (trans.c < trans.e)))
    2444:	20 91 06 01 	lds	r18, 0x0106
    2448:	90 91 55 01 	lds	r25, 0x0155
    244c:	80 91 56 01 	lds	r24, 0x0156
    2450:	21 30       	cpi	r18, 0x01	; 1
    2452:	19 f4       	brne	.+6      	; 0x245a <main+0x600>
    2454:	89 17       	cp	r24, r25
    2456:	18 f0       	brcs	.+6      	; 0x245e <main+0x604>
    2458:	05 c0       	rjmp	.+10     	; 0x2464 <main+0x60a>
    245a:	98 17       	cp	r25, r24
    245c:	18 f4       	brcc	.+6      	; 0x2464 <main+0x60a>
#endif
       {
          lcd_fix_string(AnKat);	//"->|-"
    245e:	8b ea       	ldi	r24, 0xAB	; 171
    2460:	91 e0       	ldi	r25, 0x01	; 1
    2462:	02 c0       	rjmp	.+4      	; 0x2468 <main+0x60e>
       } else {
          lcd_fix_string(KatAn);	//"-|<-"
    2464:	8f ea       	ldi	r24, 0xAF	; 175
    2466:	91 e0       	ldi	r25, 0x01	; 1
    2468:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
       }
    }
    PinLayout('E','B','C'); 		//  EBC= or 123=...
    246c:	85 e4       	ldi	r24, 0x45	; 69
    246e:	62 e4       	ldi	r22, 0x42	; 66
    2470:	43 e4       	ldi	r20, 0x43	; 67
    2472:	0e 94 38 0a 	call	0x1470	; 0x1470 <PinLayout>
    lcd_line2(); //2. row 
    2476:	80 ec       	ldi	r24, 0xC0	; 192
    2478:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
    lcd_fix_string(hfe_str);		//"B="  (hFE)
    247c:	81 e7       	ldi	r24, 0x71	; 113
    247e:	91 e0       	ldi	r25, 0x01	; 1
    2480:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
    DisplayValue(trans.hfe[0],0,0,3);
    2484:	60 91 48 01 	lds	r22, 0x0148
    2488:	70 91 49 01 	lds	r23, 0x0149
    248c:	80 91 4a 01 	lds	r24, 0x014A
    2490:	90 91 4b 01 	lds	r25, 0x014B
    2494:	40 e0       	ldi	r20, 0x00	; 0
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	03 e0       	ldi	r16, 0x03	; 3
    249a:	0e 94 3b 02 	call	0x476	; 0x476 <DisplayValue>
    lcd_space();
    249e:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>

    lcd_fix_string(Uf_str);		//"Uf="
    24a2:	84 e8       	ldi	r24, 0x84	; 132
    24a4:	91 e0       	ldi	r25, 0x01	; 1
    24a6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
    DisplayValue(trans.uBE[0],-3,'V',3);
    24aa:	60 91 50 01 	lds	r22, 0x0150
    24ae:	70 91 51 01 	lds	r23, 0x0151
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	4d ef       	ldi	r20, 0xFD	; 253
    24b8:	26 e5       	ldi	r18, 0x56	; 86
    24ba:	31 c1       	rjmp	.+610    	; 0x271e <main+0x8c4>
    goto end;
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    24bc:	83 30       	cpi	r24, 0x03	; 3
    24be:	09 f0       	breq	.+2      	; 0x24c2 <main+0x668>
    24c0:	7f c0       	rjmp	.+254    	; 0x25c0 <main+0x766>
    if(PartMode&1) {
    24c2:	80 91 06 01 	lds	r24, 0x0106
    24c6:	80 ff       	sbrs	r24, 0
    24c8:	02 c0       	rjmp	.+4      	; 0x24ce <main+0x674>
       //N-Kanal
       lcd_data('P');			//P-channel
    24ca:	80 e5       	ldi	r24, 0x50	; 80
    24cc:	01 c0       	rjmp	.+2      	; 0x24d0 <main+0x676>
    } else {
       lcd_data('N');			//N-channel
    24ce:	8e e4       	ldi	r24, 0x4E	; 78
    24d0:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
    }
    lcd_data('-');
    24d4:	8d e2       	ldi	r24, 0x2D	; 45
    24d6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>

    tmp = PartMode/2;
    24da:	80 91 06 01 	lds	r24, 0x0106
    24de:	86 95       	lsr	r24
    if (tmp == (PART_MODE_N_D_MOS/2)) {
    24e0:	82 30       	cpi	r24, 0x02	; 2
    24e2:	11 f4       	brne	.+4      	; 0x24e8 <main+0x68e>
       lcd_data('D');			// N-D
    24e4:	84 e4       	ldi	r24, 0x44	; 68
    24e6:	03 c0       	rjmp	.+6      	; 0x24ee <main+0x694>
    }
    if (tmp == (PART_MODE_N_E_MOS/2)) {
    24e8:	81 30       	cpi	r24, 0x01	; 1
    24ea:	21 f4       	brne	.+8      	; 0x24f4 <main+0x69a>
       lcd_data('E');			// N-E
    24ec:	85 e4       	ldi	r24, 0x45	; 69
    24ee:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
    24f2:	05 c0       	rjmp	.+10     	; 0x24fe <main+0x6a4>
    }
    if (tmp == (PART_MODE_N_JFET/2)) {
    24f4:	83 30       	cpi	r24, 0x03	; 3
    24f6:	19 f4       	brne	.+6      	; 0x24fe <main+0x6a4>
       lcd_fix_string(jfet_str);	//"JFET"
    24f8:	89 e6       	ldi	r24, 0x69	; 105
    24fa:	91 e0       	ldi	r25, 0x01	; 1
    24fc:	02 c0       	rjmp	.+4      	; 0x2502 <main+0x6a8>
    } else {
       lcd_fix_string(mosfet_str);	//"-MOS "
    24fe:	84 e6       	ldi	r24, 0x64	; 100
    2500:	91 e0       	ldi	r25, 0x01	; 1
    2502:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
    }
    PinLayout('S','G','D'); 		//  SGD= or 123=...
    2506:	83 e5       	ldi	r24, 0x53	; 83
    2508:	67 e4       	ldi	r22, 0x47	; 71
    250a:	44 e4       	ldi	r20, 0x44	; 68
    250c:	0e 94 38 0a 	call	0x1470	; 0x1470 <PinLayout>
    if((NumOfDiodes > 0) && (PartMode < PART_MODE_N_D_MOS)) {
    2510:	80 91 05 01 	lds	r24, 0x0105
    2514:	88 23       	and	r24, r24
    2516:	a1 f0       	breq	.+40     	; 0x2540 <main+0x6e6>
    2518:	20 91 06 01 	lds	r18, 0x0106
    251c:	24 30       	cpi	r18, 0x04	; 4
    251e:	80 f4       	brcc	.+32     	; 0x2540 <main+0x6e6>
    2520:	90 91 55 01 	lds	r25, 0x0155
    2524:	80 91 56 01 	lds	r24, 0x0156
       //MOSFET with protection diode; only with enhancement-FETs
#ifdef EBC_STYLE
       if (PartMode&1)
#else
       if (((PartMode&1) && (trans.c < trans.e)) || ((!(PartMode&1)) && (trans.c > trans.e)))
    2528:	20 ff       	sbrs	r18, 0
    252a:	03 c0       	rjmp	.+6      	; 0x2532 <main+0x6d8>
    252c:	98 17       	cp	r25, r24
    252e:	18 f0       	brcs	.+6      	; 0x2536 <main+0x6dc>
    2530:	04 c0       	rjmp	.+8      	; 0x253a <main+0x6e0>
    2532:	89 17       	cp	r24, r25
    2534:	10 f4       	brcc	.+4      	; 0x253a <main+0x6e0>
#endif
       {
          lcd_data(LCD_CHAR_DIODE1);	//show Diode symbol >|
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	01 c0       	rjmp	.+2      	; 0x253c <main+0x6e2>
       } else {
          lcd_data(LCD_CHAR_DIODE2);	//show Diode symbol |<
    253a:	82 e0       	ldi	r24, 0x02	; 2
    253c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
       }
    }
    lcd_line2();			//2. Row
    2540:	80 ec       	ldi	r24, 0xC0	; 192
    2542:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
    if(PartMode < PART_MODE_N_D_MOS) {	//enhancement-MOSFET
    2546:	80 91 06 01 	lds	r24, 0x0106
    254a:	84 30       	cpi	r24, 0x04	; 4
    254c:	d8 f4       	brcc	.+54     	; 0x2584 <main+0x72a>
	//Gate capacity
       lcd_fix_string(GateCap_str);		//"C="
    254e:	8e e6       	ldi	r24, 0x6E	; 110
    2550:	91 e0       	ldi	r25, 0x01	; 1
    2552:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
       ReadCapacity(trans.b,trans.e);	//measure capacity
    2556:	80 91 54 01 	lds	r24, 0x0154
    255a:	60 91 56 01 	lds	r22, 0x0156
    255e:	0e 94 19 15 	call	0x2a32	; 0x2a32 <ReadCapacity>
       DisplayValue(cap.cval,cap.cpre,'F',3);
    2562:	60 91 5b 01 	lds	r22, 0x015B
    2566:	70 91 5c 01 	lds	r23, 0x015C
    256a:	80 91 5d 01 	lds	r24, 0x015D
    256e:	90 91 5e 01 	lds	r25, 0x015E
    2572:	40 91 6b 01 	lds	r20, 0x016B
    2576:	26 e4       	ldi	r18, 0x46	; 70
    2578:	03 e0       	ldi	r16, 0x03	; 3
    257a:	0e 94 3b 02 	call	0x476	; 0x476 <DisplayValue>
       lcd_fix_string(vt_str);		// "Vt="
    257e:	88 e8       	ldi	r24, 0x88	; 136
    2580:	91 e0       	ldi	r25, 0x01	; 1
    2582:	13 c0       	rjmp	.+38     	; 0x25aa <main+0x750>
    } else {
       lcd_data('I');
    2584:	89 e4       	ldi	r24, 0x49	; 73
    2586:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
       lcd_data('=');
    258a:	8d e3       	ldi	r24, 0x3D	; 61
    258c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
       DisplayValue(trans.uBE[1],-5,'A',2);
    2590:	60 91 52 01 	lds	r22, 0x0152
    2594:	70 91 53 01 	lds	r23, 0x0153
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	4b ef       	ldi	r20, 0xFB	; 251
    259e:	21 e4       	ldi	r18, 0x41	; 65
    25a0:	02 e0       	ldi	r16, 0x02	; 2
    25a2:	0e 94 3b 02 	call	0x476	; 0x476 <DisplayValue>
       lcd_fix_string(Vgs_str);		// " Vgs="
    25a6:	8d e8       	ldi	r24, 0x8D	; 141
    25a8:	91 e0       	ldi	r25, 0x01	; 1
    25aa:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
    }
    //Gate-threshold voltage
    DisplayValue(gthvoltage,-3,'V',3);
    25ae:	60 91 58 01 	lds	r22, 0x0158
    25b2:	70 91 59 01 	lds	r23, 0x0159
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	4d ef       	ldi	r20, 0xFD	; 253
    25bc:	26 e5       	ldi	r18, 0x56	; 86
    25be:	ae c0       	rjmp	.+348    	; 0x271c <main+0x8c2>
    goto end;
    // end (PartFound == PART_FET)
  } else if (PartFound == PART_THYRISTOR) {
    25c0:	85 30       	cpi	r24, 0x05	; 5
    25c2:	19 f4       	brne	.+6      	; 0x25ca <main+0x770>
    lcd_fix_string(Thyristor);		//"Thyristor"
    25c4:	8b ef       	ldi	r24, 0xFB	; 251
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	04 c0       	rjmp	.+8      	; 0x25d2 <main+0x778>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    25ca:	84 30       	cpi	r24, 0x04	; 4
    25cc:	69 f4       	brne	.+26     	; 0x25e8 <main+0x78e>
    lcd_fix_string(Triac);		//"Triac"
    25ce:	85 ef       	ldi	r24, 0xF5	; 245
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
  mess_count = 0;
  goto end2;


gakAusgabe:
  lcd_line2(); //2. row 
    25d6:	80 ec       	ldi	r24, 0xC0	; 192
    25d8:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  PinLayout(Cathode_char,'G','A'); 	// CGA= or 123=...
    25dc:	83 e4       	ldi	r24, 0x43	; 67
    25de:	67 e4       	ldi	r22, 0x47	; 71
    25e0:	41 e4       	ldi	r20, 0x41	; 65
    25e2:	0e 94 38 0a 	call	0x1470	; 0x1470 <PinLayout>
    25e6:	12 c1       	rjmp	.+548    	; 0x280c <main+0x9b2>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    lcd_fix_string(Triac);		//"Triac"
    goto gakAusgabe;
  }
  else if(PartFound == PART_RESISTOR) {
    25e8:	86 30       	cpi	r24, 0x06	; 6
    25ea:	09 f0       	breq	.+2      	; 0x25ee <main+0x794>
    25ec:	bb c0       	rjmp	.+374    	; 0x2764 <main+0x90a>
    if (ResistorsFound == 1) { // single resistor
    25ee:	60 91 57 01 	lds	r22, 0x0157
    25f2:	61 30       	cpi	r22, 0x01	; 1
    25f4:	69 f4       	brne	.+26     	; 0x2610 <main+0x7b6>
       lcd_testpin(resis[0].rb);  	//Pin-number 1
    25f6:	80 91 21 01 	lds	r24, 0x0121
    25fa:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
       lcd_fix_string(Resistor_str);
    25fe:	88 eb       	ldi	r24, 0xB8	; 184
    2600:	91 e0       	ldi	r25, 0x01	; 1
    2602:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
       lcd_testpin(resis[0].ra);		//Pin-number 2
    2606:	80 91 20 01 	lds	r24, 0x0120
    260a:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
    260e:	61 c0       	rjmp	.+194    	; 0x26d2 <main+0x878>
    } else { // R-Max suchen
       ii = 0;
    2610:	10 92 44 01 	sts	0x0144, r1
       if (resis[1].rx > resis[0].rx)
    2614:	20 91 23 01 	lds	r18, 0x0123
    2618:	30 91 24 01 	lds	r19, 0x0124
    261c:	40 91 25 01 	lds	r20, 0x0125
    2620:	50 91 26 01 	lds	r21, 0x0126
    2624:	80 91 18 01 	lds	r24, 0x0118
    2628:	90 91 19 01 	lds	r25, 0x0119
    262c:	a0 91 1a 01 	lds	r26, 0x011A
    2630:	b0 91 1b 01 	lds	r27, 0x011B
    2634:	82 17       	cp	r24, r18
    2636:	93 07       	cpc	r25, r19
    2638:	a4 07       	cpc	r26, r20
    263a:	b5 07       	cpc	r27, r21
    263c:	18 f4       	brcc	.+6      	; 0x2644 <main+0x7ea>
          ii = 1;
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	80 93 44 01 	sts	0x0144, r24
       if (ResistorsFound == 2) {
    2644:	62 30       	cpi	r22, 0x02	; 2
    2646:	19 f4       	brne	.+6      	; 0x264e <main+0x7f4>
          ii = 2;
    2648:	60 93 44 01 	sts	0x0144, r22
    264c:	22 c0       	rjmp	.+68     	; 0x2692 <main+0x838>
       } else {
          if (resis[2].rx > resis[ii].rx) {
    264e:	20 91 44 01 	lds	r18, 0x0144
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	8b e0       	ldi	r24, 0x0B	; 11
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	28 9f       	mul	r18, r24
    265a:	f0 01       	movw	r30, r0
    265c:	29 9f       	mul	r18, r25
    265e:	f0 0d       	add	r31, r0
    2660:	38 9f       	mul	r19, r24
    2662:	f0 0d       	add	r31, r0
    2664:	11 24       	eor	r1, r1
    2666:	e8 5e       	subi	r30, 0xE8	; 232
    2668:	fe 4f       	sbci	r31, 0xFE	; 254
    266a:	20 91 2e 01 	lds	r18, 0x012E
    266e:	30 91 2f 01 	lds	r19, 0x012F
    2672:	40 91 30 01 	lds	r20, 0x0130
    2676:	50 91 31 01 	lds	r21, 0x0131
    267a:	80 81       	ld	r24, Z
    267c:	91 81       	ldd	r25, Z+1	; 0x01
    267e:	a2 81       	ldd	r26, Z+2	; 0x02
    2680:	b3 81       	ldd	r27, Z+3	; 0x03
    2682:	82 17       	cp	r24, r18
    2684:	93 07       	cpc	r25, r19
    2686:	a4 07       	cpc	r26, r20
    2688:	b5 07       	cpc	r27, r21
    268a:	18 f4       	brcc	.+6      	; 0x2692 <main+0x838>
             ii = 2;
    268c:	82 e0       	ldi	r24, 0x02	; 2
    268e:	80 93 44 01 	sts	0x0144, r24
       }
       char x = '1';
       char y = '3';
       char z = '2';
   
       if (ii == 1) {
    2692:	80 91 44 01 	lds	r24, 0x0144
    2696:	81 30       	cpi	r24, 0x01	; 1
    2698:	29 f0       	breq	.+10     	; 0x26a4 <main+0x84a>
          // x = '1';
          y = '2';
          z = '3';
       }
       if (ii == 2) {
    269a:	82 30       	cpi	r24, 0x02	; 2
    269c:	39 f0       	breq	.+14     	; 0x26ac <main+0x852>
             ii = 2;
          }
       }
       char x = '1';
       char y = '3';
       char z = '2';
    269e:	12 e3       	ldi	r17, 0x32	; 50
          if (resis[2].rx > resis[ii].rx) {
             ii = 2;
          }
       }
       char x = '1';
       char y = '3';
    26a0:	03 e3       	ldi	r16, 0x33	; 51
    26a2:	02 c0       	rjmp	.+4      	; 0x26a8 <main+0x84e>
       char z = '2';
   
       if (ii == 1) {
          // x = '1';
          y = '2';
          z = '3';
    26a4:	13 e3       	ldi	r17, 0x33	; 51
       char y = '3';
       char z = '2';
   
       if (ii == 1) {
          // x = '1';
          y = '2';
    26a6:	02 e3       	ldi	r16, 0x32	; 50
       } else {
          if (resis[2].rx > resis[ii].rx) {
             ii = 2;
          }
       }
       char x = '1';
    26a8:	81 e3       	ldi	r24, 0x31	; 49
    26aa:	03 c0       	rjmp	.+6      	; 0x26b2 <main+0x858>
          z = '3';
       }
       if (ii == 2) {
          x = '2';
          y = '1';
          z = '3';
    26ac:	13 e3       	ldi	r17, 0x33	; 51
          y = '2';
          z = '3';
       }
       if (ii == 2) {
          x = '2';
          y = '1';
    26ae:	01 e3       	ldi	r16, 0x31	; 49
          // x = '1';
          y = '2';
          z = '3';
       }
       if (ii == 2) {
          x = '2';
    26b0:	82 e3       	ldi	r24, 0x32	; 50
          y = '1';
          z = '3';
       }
       lcd_data(x);
    26b2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
       lcd_fix_string(Resistor_str);    // -[=]-
    26b6:	88 eb       	ldi	r24, 0xB8	; 184
    26b8:	91 e0       	ldi	r25, 0x01	; 1
    26ba:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
       lcd_data(y);
    26be:	80 2f       	mov	r24, r16
    26c0:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
       lcd_fix_string(Resistor_str);    // -[=]-
    26c4:	88 eb       	ldi	r24, 0xB8	; 184
    26c6:	91 e0       	ldi	r25, 0x01	; 1
    26c8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
       lcd_data(z);
    26cc:	81 2f       	mov	r24, r17
    26ce:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
    }
    lcd_line2(); //2. row 
    26d2:	80 ec       	ldi	r24, 0xC0	; 192
    26d4:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
    if (ResistorsFound == 1) {
    26d8:	80 91 57 01 	lds	r24, 0x0157
    26dc:	81 30       	cpi	r24, 0x01	; 1
    26de:	11 f5       	brne	.+68     	; 0x2724 <main+0x8ca>
       RvalOut(0);
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <RvalOut>
#if FLASHEND > 0x1fff
       if (resis[0].lx != 0) {
    26e6:	80 91 1c 01 	lds	r24, 0x011C
    26ea:	90 91 1d 01 	lds	r25, 0x011D
    26ee:	a0 91 1e 01 	lds	r26, 0x011E
    26f2:	b0 91 1f 01 	lds	r27, 0x011F
    26f6:	00 97       	sbiw	r24, 0x00	; 0
    26f8:	a1 05       	cpc	r26, r1
    26fa:	b1 05       	cpc	r27, r1
    26fc:	09 f4       	brne	.+2      	; 0x2700 <main+0x8a6>
    26fe:	86 c0       	rjmp	.+268    	; 0x280c <main+0x9b2>
	  // resistor have also Inductance
          lcd_fix_string(Lis_str);	// "L="
    2700:	88 ea       	ldi	r24, 0xA8	; 168
    2702:	91 e0       	ldi	r25, 0x01	; 1
    2704:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
          DisplayValue(resis[0].lx,-5,'H',3);	// output inductance
    2708:	60 91 1c 01 	lds	r22, 0x011C
    270c:	70 91 1d 01 	lds	r23, 0x011D
    2710:	80 91 1e 01 	lds	r24, 0x011E
    2714:	90 91 1f 01 	lds	r25, 0x011F
    2718:	4b ef       	ldi	r20, 0xFB	; 251
    271a:	28 e4       	ldi	r18, 0x48	; 72
    271c:	03 e0       	ldi	r16, 0x03	; 3
    271e:	0e 94 3b 02 	call	0x476	; 0x476 <DisplayValue>
    2722:	74 c0       	rjmp	.+232    	; 0x280c <main+0x9b2>
       }
#endif
    } else {
       // output resistor values in right order
       if (ii == 0) {
    2724:	80 91 44 01 	lds	r24, 0x0144
    2728:	88 23       	and	r24, r24
    272a:	31 f4       	brne	.+12     	; 0x2738 <main+0x8de>
          RvalOut(1);
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <RvalOut>
          RvalOut(2);
    2732:	82 e0       	ldi	r24, 0x02	; 2
    2734:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <RvalOut>
       }
       if (ii == 1) {
    2738:	80 91 44 01 	lds	r24, 0x0144
    273c:	81 30       	cpi	r24, 0x01	; 1
    273e:	31 f4       	brne	.+12     	; 0x274c <main+0x8f2>
          RvalOut(0);
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <RvalOut>
          RvalOut(2);
    2746:	82 e0       	ldi	r24, 0x02	; 2
    2748:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <RvalOut>
       }
       if (ii == 2) {
    274c:	80 91 44 01 	lds	r24, 0x0144
    2750:	82 30       	cpi	r24, 0x02	; 2
    2752:	09 f0       	breq	.+2      	; 0x2756 <main+0x8fc>
    2754:	5b c0       	rjmp	.+182    	; 0x280c <main+0x9b2>
          RvalOut(0);
    2756:	80 e0       	ldi	r24, 0x00	; 0
    2758:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <RvalOut>
          RvalOut(1);
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <RvalOut>
    2762:	54 c0       	rjmp	.+168    	; 0x280c <main+0x9b2>
    goto end;

  } // end (PartFound == PART_RESISTOR)

//capacity measurement is wanted
  else if(PartFound == PART_CAPACITOR) {
    2764:	87 30       	cpi	r24, 0x07	; 7
    2766:	01 f5       	brne	.+64     	; 0x27a8 <main+0x94e>
//     lcd_fix_string(Capacitor);
     lcd_testpin(cap.ca);		//Pin number 1
    2768:	80 91 69 01 	lds	r24, 0x0169
    276c:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
     lcd_fix_string(CapZeich);		// capacitor sign
    2770:	83 e9       	ldi	r24, 0x93	; 147
    2772:	91 e0       	ldi	r25, 0x01	; 1
    2774:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
//#if FLASHEND > 0x1fff
//     lcd_fix_string(Resistor_str);	// -[=]-
//#endif
     lcd_testpin(cap.cb);		//Pin number 2
    2778:	80 91 6a 01 	lds	r24, 0x016A
    277c:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
     lcd_line2(); 			//2. row 
    2780:	80 ec       	ldi	r24, 0xC0	; 192
    2782:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
     DisplayValue(cap.cval_max,cap.cpre_max,'F',4);
    2786:	60 91 5f 01 	lds	r22, 0x015F
    278a:	70 91 60 01 	lds	r23, 0x0160
    278e:	80 91 61 01 	lds	r24, 0x0161
    2792:	90 91 62 01 	lds	r25, 0x0162
    2796:	40 91 6c 01 	lds	r20, 0x016C
    279a:	26 e4       	ldi	r18, 0x46	; 70
    279c:	04 e0       	ldi	r16, 0x04	; 4
    279e:	0e 94 3b 02 	call	0x476	; 0x476 <DisplayValue>
#if FLASHEND > 0x1fff
     GetESR();				// get ESR of capacitor
    27a2:	0e 94 11 1b 	call	0x3622	; 0x3622 <GetESR>
#endif
     goto end;
    27a6:	32 c0       	rjmp	.+100    	; 0x280c <main+0x9b2>
  }
  if(NumOfDiodes == 0) { //no diodes are found
    27a8:	80 91 05 01 	lds	r24, 0x0105
    27ac:	88 23       	and	r24, r24
    27ae:	71 f4       	brne	.+28     	; 0x27cc <main+0x972>
     lcd_fix_string(TestFailed1); 	//"Kein,unbek. oder"
    27b0:	8e e0       	ldi	r24, 0x0E	; 14
    27b2:	91 e0       	ldi	r25, 0x01	; 1
    27b4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
     lcd_line2(); //2. row 
    27b8:	80 ec       	ldi	r24, 0xC0	; 192
    27ba:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
     lcd_fix_string(TestFailed2); 	//"defektes "
    27be:	8f ed       	ldi	r24, 0xDF	; 223
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
     lcd_fix_string(Bauteil);		//"Bauteil"
    27c6:	88 ee       	ldi	r24, 0xE8	; 232
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	16 c0       	rjmp	.+44     	; 0x27f8 <main+0x99e>
  } else {
     lcd_fix_string(Bauteil);		//"Bauteil"
    27cc:	88 ee       	ldi	r24, 0xE8	; 232
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
     lcd_fix_string(Unknown); 		//" unbek."
    27d4:	85 e0       	ldi	r24, 0x05	; 5
    27d6:	91 e0       	ldi	r25, 0x01	; 1
    27d8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
     lcd_line2(); //2. row 
    27dc:	80 ec       	ldi	r24, 0xC0	; 192
    27de:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
     lcd_fix_string(OrBroken); 		//"oder defekt "
    27e2:	8e e1       	ldi	r24, 0x1E	; 30
    27e4:	91 e0       	ldi	r25, 0x01	; 1
    27e6:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
     lcd_data(NumOfDiodes + '0');
    27ea:	80 91 05 01 	lds	r24, 0x0105
    27ee:	80 5d       	subi	r24, 0xD0	; 208
    27f0:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
     lcd_fix_string(AnKat);		//"->|-"
    27f4:	8b ea       	ldi	r24, 0xAB	; 171
    27f6:	91 e0       	ldi	r25, 0x01	; 1
    27f8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
  }
  empty_count++;
    27fc:	80 91 43 01 	lds	r24, 0x0143
    2800:	8f 5f       	subi	r24, 0xFF	; 255
    2802:	80 93 43 01 	sts	0x0143, r24
  mess_count = 0;
    2806:	10 92 0b 01 	sts	0x010B, r1
  goto end2;
    280a:	07 c0       	rjmp	.+14     	; 0x281a <main+0x9c0>
gakAusgabe:
  lcd_line2(); //2. row 
  PinLayout(Cathode_char,'G','A'); 	// CGA= or 123=...
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 end:
  empty_count = 0;		// reset counter, if part is found
    280c:	10 92 43 01 	sts	0x0143, r1
  mess_count++;			// count measurements
    2810:	80 91 0b 01 	lds	r24, 0x010B
    2814:	8f 5f       	subi	r24, 0xFF	; 255
    2816:	80 93 0b 01 	sts	0x010B, r24

 end2:
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND, release relay
    281a:	88 e1       	ldi	r24, 0x18	; 24
    281c:	87 b9       	out	0x07, r24	; 7
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
    281e:	4f 9b       	sbis	0x09, 7	; 9
    2820:	fe cf       	rjmp	.-4      	; 0x281e <main+0x9c4>
  wait_about200ms();
    2822:	88 e2       	ldi	r24, 0x28	; 40
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
// wait 14 seconds or 5 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage+=10) {
    282a:	10 92 59 01 	sts	0x0159, r1
    282e:	10 92 58 01 	sts	0x0158, r1
    2832:	10 c0       	rjmp	.+32     	; 0x2854 <main+0x9fa>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    2834:	4f 9b       	sbis	0x09, 7	; 9
    2836:	6e cb       	rjmp	.-2340   	; 0x1f14 <main+0xba>
        // If the key is pressed again... 
        // goto start of measurement 
        goto start;
     }
     wdt_reset();
    2838:	a8 95       	wdr
     wait_about10ms();
    283a:	82 e0       	ldi	r24, 0x02	; 2
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
 end2:
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND, release relay
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
  wait_about200ms();
// wait 14 seconds or 5 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage+=10) {
    2842:	80 91 58 01 	lds	r24, 0x0158
    2846:	90 91 59 01 	lds	r25, 0x0159
    284a:	0a 96       	adiw	r24, 0x0a	; 10
    284c:	90 93 59 01 	sts	0x0159, r25
    2850:	80 93 58 01 	sts	0x0158, r24
    2854:	80 91 58 01 	lds	r24, 0x0158
    2858:	90 91 59 01 	lds	r25, 0x0159
    285c:	26 e3       	ldi	r18, 0x36	; 54
    285e:	80 3b       	cpi	r24, 0xB0	; 176
    2860:	92 07       	cpc	r25, r18
    2862:	40 f3       	brcs	.-48     	; 0x2834 <main+0x9da>
     goto start;			// repeat measurement POWER_OFF times
  }
 #endif
  // only one Measurement requested, shut off
//  MCUSR = 0;
  ON_PORT &= ~(1<<ON_PIN);		//switch off power
    2864:	5e 98       	cbi	0x0b, 6	; 11
  //never ending loop 
  while(1) {
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    2866:	4f 9b       	sbis	0x09, 7	; 9
    2868:	55 cb       	rjmp	.-2390   	; 0x1f14 <main+0xba>
        // The statement is only reached if no auto off equipment is installed
        goto start;
     }
     wdt_reset();
    286a:	a8 95       	wdr
     wait_about10ms();
    286c:	82 e0       	ldi	r24, 0x02	; 2
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
  }
    2874:	f8 cf       	rjmp	.-16     	; 0x2866 <main+0xa0c>
#else
  goto start;	// POWER_OFF not selected, repeat measurement
//  goto end2;	// POWER_OFF not selected, wait more time
#endif
  return 0;
}   // end main
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	df 91       	pop	r29
    287c:	cf 91       	pop	r28
    287e:	1f 91       	pop	r17
    2880:	0f 91       	pop	r16
    2882:	08 95       	ret

00002884 <uart_putc>:
    2884:	2f 93       	push	r18
    2886:	5f b7       	in	r21, 0x3f	; 63
    2888:	2f 93       	push	r18
    288a:	2a e0       	ldi	r18, 0x0A	; 10
    288c:	80 95       	com	r24
    288e:	08 94       	sec

00002890 <putchar0>:
    2890:	10 f4       	brcc	.+4      	; 0x2896 <putchar1>
    2892:	43 98       	cbi	0x08, 3	; 8
    2894:	02 c0       	rjmp	.+4      	; 0x289a <putchar2>

00002896 <putchar1>:
    2896:	43 9a       	sbi	0x08, 3	; 8
	...

0000289a <putchar2>:
    289a:	08 d0       	rcall	.+16     	; 0x28ac <UART_delay>
    289c:	07 d0       	rcall	.+14     	; 0x28ac <UART_delay>
    289e:	86 95       	lsr	r24
    28a0:	2a 95       	dec	r18
    28a2:	b1 f7       	brne	.-20     	; 0x2890 <putchar0>
    28a4:	2f 91       	pop	r18
    28a6:	5f bf       	out	0x3f, r21	; 63
    28a8:	2f 91       	pop	r18
    28aa:	08 95       	ret

000028ac <UART_delay>:
    28ac:	5f 93       	push	r21
    28ae:	5f b7       	in	r21, 0x3f	; 63
    28b0:	5f 93       	push	r21
    28b2:	00 00       	nop
    28b4:	5e e3       	ldi	r21, 0x3E	; 62

000028b6 <UART_delay1>:
    28b6:	5a 95       	dec	r21
    28b8:	f1 f7       	brne	.-4      	; 0x28b6 <UART_delay1>
    28ba:	00 00       	nop
    28bc:	5f 91       	pop	r21
    28be:	5f bf       	out	0x3f, r21	; 63
    28c0:	5f 91       	pop	r21
    28c2:	08 95       	ret

000028c4 <wait5s>:
    28c4:	03 d0       	rcall	.+6      	; 0x28cc <wait1000ms>

000028c6 <wait4s>:
    28c6:	02 d0       	rcall	.+4      	; 0x28cc <wait1000ms>

000028c8 <wait3s>:
    28c8:	01 d0       	rcall	.+2      	; 0x28cc <wait1000ms>

000028ca <wait2s>:
    28ca:	00 d0       	rcall	.+0      	; 0x28cc <wait1000ms>

000028cc <wait1000ms>:
    28cc:	00 d0       	rcall	.+0      	; 0x28ce <wait500ms>

000028ce <wait500ms>:
    28ce:	03 d0       	rcall	.+6      	; 0x28d6 <wait100ms>

000028d0 <wait400ms>:
    28d0:	02 d0       	rcall	.+4      	; 0x28d6 <wait100ms>

000028d2 <wait300ms>:
    28d2:	01 d0       	rcall	.+2      	; 0x28d6 <wait100ms>

000028d4 <wait200ms>:
    28d4:	00 d0       	rcall	.+0      	; 0x28d6 <wait100ms>

000028d6 <wait100ms>:
    28d6:	a8 95       	wdr
    28d8:	00 d0       	rcall	.+0      	; 0x28da <wait50ms>

000028da <wait50ms>:
    28da:	03 d0       	rcall	.+6      	; 0x28e2 <wait10ms>

000028dc <wait40ms>:
    28dc:	02 d0       	rcall	.+4      	; 0x28e2 <wait10ms>

000028de <wait30ms>:
    28de:	01 d0       	rcall	.+2      	; 0x28e2 <wait10ms>

000028e0 <wait20ms>:
    28e0:	00 d0       	rcall	.+0      	; 0x28e2 <wait10ms>

000028e2 <wait10ms>:
    28e2:	00 d0       	rcall	.+0      	; 0x28e4 <wait5ms>

000028e4 <wait5ms>:
    28e4:	03 d0       	rcall	.+6      	; 0x28ec <wait1ms>

000028e6 <wait4ms>:
    28e6:	02 d0       	rcall	.+4      	; 0x28ec <wait1ms>

000028e8 <wait3ms>:
    28e8:	01 d0       	rcall	.+2      	; 0x28ec <wait1ms>

000028ea <wait2ms>:
    28ea:	00 d0       	rcall	.+0      	; 0x28ec <wait1ms>

000028ec <wait1ms>:
    28ec:	00 d0       	rcall	.+0      	; 0x28ee <wait500us>

000028ee <wait500us>:
    28ee:	03 d0       	rcall	.+6      	; 0x28f6 <wait100us>

000028f0 <wait400us>:
    28f0:	02 d0       	rcall	.+4      	; 0x28f6 <wait100us>

000028f2 <wait300us>:
    28f2:	01 d0       	rcall	.+2      	; 0x28f6 <wait100us>

000028f4 <wait200us>:
    28f4:	00 d0       	rcall	.+0      	; 0x28f6 <wait100us>

000028f6 <wait100us>:
    28f6:	00 d0       	rcall	.+0      	; 0x28f8 <wait50us>

000028f8 <wait50us>:
    28f8:	03 d0       	rcall	.+6      	; 0x2900 <wait10us>

000028fa <wait40us>:
    28fa:	02 d0       	rcall	.+4      	; 0x2900 <wait10us>

000028fc <wait30us>:
    28fc:	01 d0       	rcall	.+2      	; 0x2900 <wait10us>

000028fe <wait20us>:
    28fe:	00 d0       	rcall	.+0      	; 0x2900 <wait10us>

00002900 <wait10us>:
    2900:	00 d0       	rcall	.+0      	; 0x2902 <wait5us>

00002902 <wait5us>:
    2902:	03 d0       	rcall	.+6      	; 0x290a <wait1us>

00002904 <wait4us>:
    2904:	02 d0       	rcall	.+4      	; 0x290a <wait1us>

00002906 <wait3us>:
    2906:	01 d0       	rcall	.+2      	; 0x290a <wait1us>

00002908 <wait2us>:
    2908:	00 d0       	rcall	.+0      	; 0x290a <wait1us>

0000290a <wait1us>:
    290a:	00 00       	nop
    290c:	08 95       	ret

0000290e <getRLmultip>:
  R_DDR = 0;			// switch all resistor ports to input
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
  return;
 } // end ReadCapacity()

unsigned int getRLmultip(unsigned int cvolt) {
    290e:	ff 92       	push	r15
    2910:	0f 93       	push	r16
    2912:	1f 93       	push	r17
    2914:	cf 93       	push	r28
    2916:	df 93       	push	r29

  unsigned int uvolt;
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;
  if (cvolt >= RL_Tab_Beginn) {
    2918:	21 e0       	ldi	r18, 0x01	; 1
    291a:	8c 32       	cpi	r24, 0x2C	; 44
    291c:	92 07       	cpc	r25, r18
    291e:	18 f0       	brcs	.+6      	; 0x2926 <getRLmultip+0x18>
     uvolt = cvolt - RL_Tab_Beginn;
    2920:	8c 52       	subi	r24, 0x2C	; 44
    2922:	91 40       	sbci	r25, 0x01	; 1
    2924:	02 c0       	rjmp	.+4      	; 0x292a <getRLmultip+0x1c>
  } else {
     uvolt = 0;			// limit to begin of table
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = uvolt / RL_Tab_Abstand;
    292a:	69 e1       	ldi	r22, 0x19	; 25
    292c:	70 e0       	ldi	r23, 0x00	; 0
    292e:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__udivmodhi4>
  tabres = uvolt % RL_Tab_Abstand;
    2932:	f8 2e       	mov	r15, r24
  tabres = RL_Tab_Abstand - tabres;
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
    2934:	6d 32       	cpi	r22, 0x2D	; 45
    2936:	08 f0       	brcs	.+2      	; 0x293a <getRLmultip+0x2c>
    2938:	6c e2       	ldi	r22, 0x2C	; 44
    293a:	c6 2f       	mov	r28, r22
    293c:	d0 e0       	ldi	r29, 0x00	; 0
    293e:	ce 01       	movw	r24, r28
    2940:	88 0f       	add	r24, r24
    2942:	99 1f       	adc	r25, r25
    2944:	80 50       	subi	r24, 0x00	; 0
    2946:	90 40       	sbci	r25, 0x00	; 0
    2948:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__eerd_word_m328>
    294c:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RLtab[tabind+1]);
    294e:	ce 01       	movw	r24, r28
    2950:	88 0f       	add	r24, r24
    2952:	99 1f       	adc	r25, r25
    2954:	8e 5f       	subi	r24, 0xFE	; 254
    2956:	9f 4f       	sbci	r25, 0xFF	; 255
    2958:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__eerd_word_m328>
    295c:	9c 01       	movw	r18, r24
  } else {
     uvolt = 0;			// limit to begin of table
  }
  tabind = uvolt / RL_Tab_Abstand;
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
    295e:	49 e1       	ldi	r20, 0x19	; 25
    2960:	4f 19       	sub	r20, r15
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
    2962:	50 e0       	ldi	r21, 0x00	; 0
    2964:	08 1b       	sub	r16, r24
    2966:	19 0b       	sbc	r17, r25
    2968:	40 9f       	mul	r20, r16
    296a:	c0 01       	movw	r24, r0
    296c:	41 9f       	mul	r20, r17
    296e:	90 0d       	add	r25, r0
    2970:	50 9f       	mul	r21, r16
    2972:	90 0d       	add	r25, r0
    2974:	11 24       	eor	r1, r1
    2976:	0c 96       	adiw	r24, 0x0c	; 12
    2978:	69 e1       	ldi	r22, 0x19	; 25
    297a:	70 e0       	ldi	r23, 0x00	; 0
    297c:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__udivmodhi4>
    2980:	62 0f       	add	r22, r18
    2982:	73 1f       	adc	r23, r19
}
    2984:	cb 01       	movw	r24, r22
    2986:	df 91       	pop	r29
    2988:	cf 91       	pop	r28
    298a:	1f 91       	pop	r17
    298c:	0f 91       	pop	r16
    298e:	ff 90       	pop	r15
    2990:	08 95       	ret

00002992 <Scale_C_with_vcc>:

void Scale_C_with_vcc(void) {
    2992:	8f 92       	push	r8
    2994:	9f 92       	push	r9
    2996:	af 92       	push	r10
    2998:	bf 92       	push	r11
    299a:	df 92       	push	r13
    299c:	ef 92       	push	r14
    299e:	ff 92       	push	r15
    29a0:	0f 93       	push	r16
    29a2:	1f 93       	push	r17
    29a4:	e0 90 5b 01 	lds	r14, 0x015B
    29a8:	f0 90 5c 01 	lds	r15, 0x015C
    29ac:	00 91 5d 01 	lds	r16, 0x015D
    29b0:	10 91 5e 01 	lds	r17, 0x015E
    29b4:	d0 90 6b 01 	lds	r13, 0x016B
   while (cap.cval > 100000) {
      cap.cval /= 10;
    29b8:	4a e0       	ldi	r20, 0x0A	; 10
    29ba:	84 2e       	mov	r8, r20
    29bc:	91 2c       	mov	r9, r1
    29be:	a1 2c       	mov	r10, r1
    29c0:	b1 2c       	mov	r11, r1
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    29c2:	08 c0       	rjmp	.+16     	; 0x29d4 <Scale_C_with_vcc+0x42>
      cap.cval /= 10;
    29c4:	c8 01       	movw	r24, r16
    29c6:	b7 01       	movw	r22, r14
    29c8:	a5 01       	movw	r20, r10
    29ca:	94 01       	movw	r18, r8
    29cc:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
    29d0:	79 01       	movw	r14, r18
    29d2:	8a 01       	movw	r16, r20
    29d4:	8d 2d       	mov	r24, r13
    29d6:	d3 94       	inc	r13
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    29d8:	91 ea       	ldi	r25, 0xA1	; 161
    29da:	e9 16       	cp	r14, r25
    29dc:	96 e8       	ldi	r25, 0x86	; 134
    29de:	f9 06       	cpc	r15, r25
    29e0:	91 e0       	ldi	r25, 0x01	; 1
    29e2:	09 07       	cpc	r16, r25
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	19 07       	cpc	r17, r25
    29e8:	68 f7       	brcc	.-38     	; 0x29c4 <Scale_C_with_vcc+0x32>
    29ea:	80 93 6b 01 	sts	0x016B, r24
      cap.cval /= 10;
      cap.cpre ++;			// prevent overflow
   }
   cap.cval *= ADCconfig.U_AVCC;	// scale with measured voltage
    29ee:	20 91 3d 01 	lds	r18, 0x013D
    29f2:	30 91 3e 01 	lds	r19, 0x013E
    29f6:	40 e0       	ldi	r20, 0x00	; 0
    29f8:	50 e0       	ldi	r21, 0x00	; 0
    29fa:	c8 01       	movw	r24, r16
    29fc:	b7 01       	movw	r22, r14
    29fe:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
    2a02:	28 e8       	ldi	r18, 0x88	; 136
    2a04:	33 e1       	ldi	r19, 0x13	; 19
    2a06:	40 e0       	ldi	r20, 0x00	; 0
    2a08:	50 e0       	ldi	r21, 0x00	; 0
    2a0a:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
    2a0e:	20 93 5b 01 	sts	0x015B, r18
    2a12:	30 93 5c 01 	sts	0x015C, r19
    2a16:	40 93 5d 01 	sts	0x015D, r20
    2a1a:	50 93 5e 01 	sts	0x015E, r21
}
    2a1e:	1f 91       	pop	r17
    2a20:	0f 91       	pop	r16
    2a22:	ff 90       	pop	r15
    2a24:	ef 90       	pop	r14
    2a26:	df 90       	pop	r13
    2a28:	bf 90       	pop	r11
    2a2a:	af 90       	pop	r10
    2a2c:	9f 90       	pop	r9
    2a2e:	8f 90       	pop	r8
    2a30:	08 95       	ret

00002a32 <ReadCapacity>:
#include "config.h"
#include "Transistortester.h"


//=================================================================
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    2a32:	8f 92       	push	r8
    2a34:	9f 92       	push	r9
    2a36:	af 92       	push	r10
    2a38:	bf 92       	push	r11
    2a3a:	cf 92       	push	r12
    2a3c:	df 92       	push	r13
    2a3e:	ef 92       	push	r14
    2a40:	ff 92       	push	r15
    2a42:	0f 93       	push	r16
    2a44:	1f 93       	push	r17
    2a46:	cf 93       	push	r28
    2a48:	df 93       	push	r29
    2a4a:	18 2f       	mov	r17, r24
    2a4c:	06 2f       	mov	r16, r22
  uint8_t HiPinR_L, HiPinR_H;
  uint8_t LoADC;
  uint8_t ii;

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
    2a4e:	88 0f       	add	r24, r24
    2a50:	81 0f       	add	r24, r17
    2a52:	86 0f       	add	r24, r22
    2a54:	81 50       	subi	r24, 0x01	; 1
    2a56:	80 93 45 01 	sts	0x0145, r24
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2a5a:	86 2f       	mov	r24, r22
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	88 5a       	subi	r24, 0xA8	; 168
    2a60:	9d 4f       	sbci	r25, 0xFD	; 253
    2a62:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__eerd_byte_m328>
    2a66:	88 2e       	mov	r8, r24
  HiPinR_L = MEM_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
    2a68:	21 2f       	mov	r18, r17
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	c9 01       	movw	r24, r18
    2a6e:	8b 5a       	subi	r24, 0xAB	; 171
    2a70:	9d 4f       	sbci	r25, 0xFD	; 253
    2a72:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__eerd_byte_m328>
    2a76:	c8 2e       	mov	r12, r24
//     DisplayValue(cap.cval,cap.cpre,'F',3);
//     wait_about2s();
//#endif
//     return;	//We have found a capacitor already
//  }
  if(PartFound == PART_RESISTOR) {
    2a78:	80 91 07 01 	lds	r24, 0x0107
    2a7c:	86 30       	cpi	r24, 0x06	; 6
    2a7e:	09 f4       	brne	.+2      	; 0x2a82 <ReadCapacity+0x50>
    2a80:	76 c2       	rjmp	.+1260   	; 0x2f6e <ReadCapacity+0x53c>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    2a82:	90 91 05 01 	lds	r25, 0x0105
    2a86:	ef e6       	ldi	r30, 0x6F	; 111
    2a88:	f1 e0       	ldi	r31, 0x01	; 1
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	0f c0       	rjmp	.+30     	; 0x2aac <ReadCapacity+0x7a>
     if ((diodes[ii].Cathode == LowPin) && (diodes[ii].Anode == HighPin) && (diodes[ii].Voltage < 1500)) {
    2a8e:	21 81       	ldd	r18, Z+1	; 0x01
    2a90:	20 17       	cp	r18, r16
    2a92:	51 f4       	brne	.+20     	; 0x2aa8 <ReadCapacity+0x76>
    2a94:	20 81       	ld	r18, Z
    2a96:	21 17       	cp	r18, r17
    2a98:	39 f4       	brne	.+14     	; 0x2aa8 <ReadCapacity+0x76>
    2a9a:	22 81       	ldd	r18, Z+2	; 0x02
    2a9c:	33 81       	ldd	r19, Z+3	; 0x03
    2a9e:	45 e0       	ldi	r20, 0x05	; 5
    2aa0:	2c 3d       	cpi	r18, 0xDC	; 220
    2aa2:	34 07       	cpc	r19, r20
    2aa4:	08 f4       	brcc	.+2      	; 0x2aa8 <ReadCapacity+0x76>
    2aa6:	63 c2       	rjmp	.+1222   	; 0x2f6e <ReadCapacity+0x53c>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    2aa8:	8f 5f       	subi	r24, 0xFF	; 255
    2aaa:	34 96       	adiw	r30, 0x04	; 4
    2aac:	89 17       	cp	r24, r25
    2aae:	78 f3       	brcs	.-34     	; 0x2a8e <ReadCapacity+0x5c>

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2ab0:	58 e0       	ldi	r21, 0x08	; 8
    2ab2:	85 2a       	or	r8, r21
        return;
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
    2ab4:	10 92 68 01 	sts	0x0168, r1
    2ab8:	10 92 67 01 	sts	0x0167, r1
#endif
  cap.cval = 0;				// set capacity value to zero
    2abc:	10 92 5b 01 	sts	0x015B, r1
    2ac0:	10 92 5c 01 	sts	0x015C, r1
    2ac4:	10 92 5d 01 	sts	0x015D, r1
    2ac8:	10 92 5e 01 	sts	0x015E, r1
  cap.cpre = -12;			//default unit is pF
    2acc:	84 ef       	ldi	r24, 0xF4	; 244
    2ace:	80 93 6b 01 	sts	0x016B, r24
  EntladePins();			// discharge capacitor
    2ad2:	0e 94 48 01 	call	0x290	; 0x290 <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    2ad6:	88 e0       	ldi	r24, 0x08	; 8
    2ad8:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    2ada:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    2adc:	87 b8       	out	0x07, r8	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    2ade:	c4 b8       	out	0x04, r12	; 4
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    2ae0:	81 2f       	mov	r24, r17
    2ae2:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
    2ae6:	7c 01       	movw	r14, r24
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2ae8:	10 92 47 01 	sts	0x0147, r1
    2aec:	10 92 46 01 	sts	0x0146, r1
  EntladePins();			// discharge capacitor
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
  R_PORT = 0;				// switch R-Port to GND
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    2af0:	ec 01       	movw	r28, r24
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2af2:	2a c0       	rjmp	.+84     	; 0x2b48 <ReadCapacity+0x116>
     R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    2af4:	c5 b8       	out	0x05, r12	; 5
     R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    2af6:	c4 b8       	out	0x04, r12	; 4
     wait10ms();			// wait exactly 10ms, do not sleep
    2af8:	0e 94 71 14 	call	0x28e2	; 0x28e2 <wait10ms>
     R_DDR = 0;				// switch back to input
    2afc:	14 b8       	out	0x04, r1	; 4
     R_PORT = 0;			// no Pull up
    2afe:	15 b8       	out	0x05, r1	; 5
     wait500us();			//wait a little time
    2b00:	0e 94 77 14 	call	0x28ee	; 0x28ee <wait500us>
     wdt_reset();
    2b04:	a8 95       	wdr
     // read voltage without current, is already charged enough?
     adcv[2] = ReadADC(HighPin);
    2b06:	81 2f       	mov	r24, r17
    2b08:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
    2b0c:	ec 01       	movw	r28, r24
     if (adcv[2] > adcv[0]) {
    2b0e:	e8 16       	cp	r14, r24
    2b10:	f9 06       	cpc	r15, r25
    2b12:	18 f4       	brcc	.+6      	; 0x2b1a <ReadCapacity+0xe8>
        adcv[2] -= adcv[0];		//difference to beginning voltage
    2b14:	ce 19       	sub	r28, r14
    2b16:	df 09       	sbc	r29, r15
    2b18:	02 c0       	rjmp	.+4      	; 0x2b1e <ReadCapacity+0xec>
     } else {
        adcv[2] = 0;			// voltage is lower or same as beginning voltage
    2b1a:	c0 e0       	ldi	r28, 0x00	; 0
    2b1c:	d0 e0       	ldi	r29, 0x00	; 0
     }
     if ((ovcnt16 == 126) && (adcv[2] < 75)) {
    2b1e:	20 91 46 01 	lds	r18, 0x0146
    2b22:	30 91 47 01 	lds	r19, 0x0147
    2b26:	2e 37       	cpi	r18, 0x7E	; 126
    2b28:	31 05       	cpc	r19, r1
    2b2a:	21 f4       	brne	.+8      	; 0x2b34 <ReadCapacity+0x102>
    2b2c:	cb 34       	cpi	r28, 0x4B	; 75
    2b2e:	d1 05       	cpc	r29, r1
    2b30:	08 f4       	brcc	.+2      	; 0x2b34 <ReadCapacity+0x102>
    2b32:	18 c2       	rjmp	.+1072   	; 0x2f64 <ReadCapacity+0x532>
        // 300mV can not be reached well-timed 
        break;		// don't try to load any more
     }
     if (adcv[2] > 300) {
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	cd 32       	cpi	r28, 0x2D	; 45
    2b38:	d8 07       	cpc	r29, r24
    2b3a:	98 f4       	brcc	.+38     	; 0x2b62 <ReadCapacity+0x130>
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2b3c:	2f 5f       	subi	r18, 0xFF	; 255
    2b3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b40:	30 93 47 01 	sts	0x0147, r19
    2b44:	20 93 46 01 	sts	0x0146, r18
    2b48:	20 91 46 01 	lds	r18, 0x0146
    2b4c:	30 91 47 01 	lds	r19, 0x0147
    2b50:	41 e0       	ldi	r20, 0x01	; 1
    2b52:	24 3f       	cpi	r18, 0xF4	; 244
    2b54:	34 07       	cpc	r19, r20
    2b56:	70 f2       	brcs	.-100    	; 0x2af4 <ReadCapacity+0xc2>
     }
  }
  // wait 5ms and read voltage again, does the capacitor keep the voltage?
//  adcv[1] = W5msReadADC(HighPin) - adcv[0];
//  wdt_reset();
  if (adcv[2] < 301) {
    2b58:	51 e0       	ldi	r21, 0x01	; 1
    2b5a:	cd 32       	cpi	r28, 0x2D	; 45
    2b5c:	d5 07       	cpc	r29, r21
    2b5e:	08 f4       	brcc	.+2      	; 0x2b62 <ReadCapacity+0x130>
    2b60:	01 c2       	rjmp	.+1026   	; 0x2f64 <ReadCapacity+0x532>
#if DebugOut == 10
  DisplayValue(ovcnt16,0,' ',4);
  DisplayValue(adcv[2],-3,'V',4);
#endif
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    2b62:	20 91 46 01 	lds	r18, 0x0146
    2b66:	30 91 47 01 	lds	r19, 0x0147
    2b6a:	21 15       	cp	r18, r1
    2b6c:	31 05       	cpc	r19, r1
    2b6e:	29 f4       	brne	.+10     	; 0x2b7a <ReadCapacity+0x148>
    2b70:	85 e0       	ldi	r24, 0x05	; 5
    2b72:	c5 31       	cpi	r28, 0x15	; 21
    2b74:	d8 07       	cpc	r29, r24
    2b76:	08 f0       	brcs	.+2      	; 0x2b7a <ReadCapacity+0x148>
    2b78:	74 c0       	rjmp	.+232    	; 0x2c62 <ReadCapacity+0x230>
     goto messe_mit_rh;		// Voltage of more than 1300mV is reached in one pulse, to fast loaded
  }
  // Capacity is more than about 50µF
  cap.cpre = -9;		// switch units to nF 
    2b7a:	87 ef       	ldi	r24, 0xF7	; 247
    2b7c:	80 93 6b 01 	sts	0x016B, r24
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the same time which is required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2b80:	ce 01       	movw	r24, r28
    2b82:	cc 24       	eor	r12, r12
    2b84:	dd 24       	eor	r13, r13
    2b86:	09 c0       	rjmp	.+18     	; 0x2b9a <ReadCapacity+0x168>
     wait5ms();
    2b88:	0e 94 72 14 	call	0x28e4	; 0x28e4 <wait5ms>
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
    2b8c:	81 2f       	mov	r24, r17
    2b8e:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
     wdt_reset();
    2b92:	a8 95       	wdr
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the same time which is required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2b94:	08 94       	sec
    2b96:	c1 1c       	adc	r12, r1
    2b98:	d1 1c       	adc	r13, r1
    2b9a:	20 91 46 01 	lds	r18, 0x0146
    2b9e:	30 91 47 01 	lds	r19, 0x0147
    2ba2:	2c 15       	cp	r18, r12
    2ba4:	3d 05       	cpc	r19, r13
    2ba6:	80 f7       	brcc	.-32     	; 0x2b88 <ReadCapacity+0x156>
     wait5ms();
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
    2ba8:	e8 16       	cp	r14, r24
    2baa:	f9 06       	cpc	r15, r25
    2bac:	30 f4       	brcc	.+12     	; 0x2bba <ReadCapacity+0x188>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    2bae:	8e 19       	sub	r24, r14
    2bb0:	9f 09       	sbc	r25, r15
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    2bb2:	8c 17       	cp	r24, r28
    2bb4:	9d 07       	cpc	r25, r29
    2bb6:	60 f4       	brcc	.+24     	; 0x2bd0 <ReadCapacity+0x19e>
    2bb8:	02 c0       	rjmp	.+4      	; 0x2bbe <ReadCapacity+0x18c>
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
    2bbe:	ae 01       	movw	r20, r28
    2bc0:	48 1b       	sub	r20, r24
    2bc2:	59 0b       	sbc	r21, r25
    2bc4:	ca 01       	movw	r24, r20
  } else {
     adcv[3] = 0;			// no lost voltage
  }
  if (adcv[3] > 100) {
    2bc6:	45 36       	cpi	r20, 0x65	; 101
    2bc8:	51 05       	cpc	r21, r1
    2bca:	08 f0       	brcs	.+2      	; 0x2bce <ReadCapacity+0x19c>
    2bcc:	cb c1       	rjmp	.+918    	; 0x2f64 <ReadCapacity+0x532>
    2bce:	02 c0       	rjmp	.+4      	; 0x2bd4 <ReadCapacity+0x1a2>
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
  } else {
     adcv[3] = 0;			// no lost voltage
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
     lcd_space();
     wait_about1s();
 #endif
     goto keinC;			// capacitor does not keep the voltage about 5ms
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
    2bd4:	2f 5f       	subi	r18, 0xFF	; 255
    2bd6:	3f 4f       	sbci	r19, 0xFF	; 255
    2bd8:	69 01       	movw	r12, r18
    2bda:	ee 24       	eor	r14, r14
    2bdc:	ff 24       	eor	r15, r15
    2bde:	c0 92 63 01 	sts	0x0163, r12
    2be2:	d0 92 64 01 	sts	0x0164, r13
    2be6:	e0 92 65 01 	sts	0x0165, r14
    2bea:	f0 92 66 01 	sts	0x0166, r15
  // compute factor with load voltage + lost voltage during the voltage load time
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]+adcv[3]);	// get factor to convert time to capacity from table
    2bee:	8c 0f       	add	r24, r28
    2bf0:	9d 1f       	adc	r25, r29
    2bf2:	0e 94 87 14 	call	0x290e	; 0x290e <getRLmultip>
    2bf6:	bc 01       	movw	r22, r24
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	a7 01       	movw	r20, r14
    2bfe:	96 01       	movw	r18, r12
    2c00:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
    2c04:	60 93 63 01 	sts	0x0163, r22
    2c08:	70 93 64 01 	sts	0x0164, r23
    2c0c:	80 93 65 01 	sts	0x0165, r24
    2c10:	90 93 66 01 	sts	0x0166, r25
#endif
   cap.cval = cap.cval_uncorrected.dw;	// set result to uncorrected
    2c14:	60 93 5b 01 	sts	0x015B, r22
    2c18:	70 93 5c 01 	sts	0x015C, r23
    2c1c:	80 93 5d 01 	sts	0x015D, r24
    2c20:	90 93 5e 01 	sts	0x015E, r25
   Scale_C_with_vcc();
    2c24:	0e 94 c9 14 	call	0x2992	; 0x2992 <Scale_C_with_vcc>
   // cap.cval for this type is at least 40000nF, so the last digit will be never shown
   cap.cval *= (1000 - C_H_KORR);	// correct with C_H_KORR with 0.1% resolution, but prevent overflow
    2c28:	60 91 5b 01 	lds	r22, 0x015B
    2c2c:	70 91 5c 01 	lds	r23, 0x015C
    2c30:	80 91 5d 01 	lds	r24, 0x015D
    2c34:	90 91 5e 01 	lds	r25, 0x015E
    2c38:	28 ee       	ldi	r18, 0xE8	; 232
    2c3a:	33 e0       	ldi	r19, 0x03	; 3
    2c3c:	40 e0       	ldi	r20, 0x00	; 0
    2c3e:	50 e0       	ldi	r21, 0x00	; 0
    2c40:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
   cap.cval /= 100;
    2c44:	24 e6       	ldi	r18, 0x64	; 100
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	40 e0       	ldi	r20, 0x00	; 0
    2c4a:	50 e0       	ldi	r21, 0x00	; 0
    2c4c:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
    2c50:	20 93 5b 01 	sts	0x015B, r18
    2c54:	30 93 5c 01 	sts	0x015C, r19
    2c58:	40 93 5d 01 	sts	0x015D, r20
    2c5c:	50 93 5e 01 	sts	0x015E, r21
   DisplayValue(cap.cval,cap.cpre,'F',4);
   lcd_space();
   lcd_string(utoa(ovcnt16,outval,10));
   wait_about3s();
#endif
   goto checkDiodes;
    2c60:	44 c1       	rjmp	.+648    	; 0x2eea <ReadCapacity+0x4b8>
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
  HiPinR_L = MEM_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load
    2c62:	ec 2c       	mov	r14, r12
    2c64:	ee 0c       	add	r14, r14

//==================================================================================
// Measurement of little capacity values
messe_mit_rh:
  //little capacity value, about  < 50 µF
  EntladePins();			// discharge capacitor
    2c66:	0e 94 48 01 	call	0x290	; 0x290 <EntladePins>
  //measure with the R_H (470kOhm) resistor 
  R_PORT = 0;		// R_DDR ist HiPinR_L
    2c6a:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = (1<<TP1) | (1<<TP2) | (1<<TP3) | (1<<TxD);	//switch all Pins to output
    2c6c:	8f e0       	ldi	r24, 0x0F	; 15
    2c6e:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		//switch all ADC Pins to GND
    2c70:	88 e0       	ldi	r24, 0x08	; 8
    2c72:	88 b9       	out	0x08, r24	; 8
  R_DDR = HiPinR_H;   		// switch R_H resistor port for HighPin to output (GND)
    2c74:	e4 b8       	out	0x04, r14	; 4
// setup Analog Comparator
  ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    2c76:	80 e4       	ldi	r24, 0x40	; 64
    2c78:	80 93 7b 00 	sts	0x007B, r24
  ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    2c7c:	84 e5       	ldi	r24, 0x54	; 84
    2c7e:	80 bf       	out	0x30, r24	; 48
  ADMUX = (1<<REFS0) | HighPin;			// switch Mux to High-Pin
    2c80:	81 2f       	mov	r24, r17
    2c82:	80 64       	ori	r24, 0x40	; 64
    2c84:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    2c88:	86 e1       	ldi	r24, 0x16	; 22
    2c8a:	80 93 7a 00 	sts	0x007A, r24
  wait200us();			//wait for bandgap to start up
    2c8e:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <wait200us>

// setup Counter1
  ovcnt16 = 0;
    2c92:	10 92 47 01 	sts	0x0147, r1
    2c96:	10 92 46 01 	sts	0x0146, r1
  TCCR1A = 0;			// set Counter1 to normal Mode
    2c9a:	10 92 80 00 	sts	0x0080, r1
  TCNT1 = 0;			//set Counter to 0
    2c9e:	10 92 85 00 	sts	0x0085, r1
    2ca2:	10 92 84 00 	sts	0x0084, r1
  TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// clear interrupt flags
    2ca6:	87 e2       	ldi	r24, 0x27	; 39
    2ca8:	86 bb       	out	0x16, r24	; 22
#ifndef INHIBIT_SLEEP_MODE
  TIMSK1 = (1<<TOIE1) | (1<<ICIE1);	// enable Timer overflow interrupt and input capture interrupt
    2caa:	81 e2       	ldi	r24, 0x21	; 33
    2cac:	80 93 6f 00 	sts	0x006F, r24
  unfinished = 1;
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	80 93 5a 01 	sts	0x015A, r24
  sei();
    2cb6:	78 94       	sei
#endif
  R_PORT = HiPinR_H;           	// switch R_H resistor port for HighPin to VCC
    2cb8:	e5 b8       	out	0x05, r14	; 5
  if(PartFound == PART_FET) {
    2cba:	90 91 07 01 	lds	r25, 0x0107
    2cbe:	93 30       	cpi	r25, 0x03	; 3
    2cc0:	71 f4       	brne	.+28     	; 0x2cde <ReadCapacity+0x2ac>
     // charge capacitor with R_H resistor
     TCCR1B = (1<<CS10);	//Start counter 1MHz or 8MHz
    2cc2:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = (((1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK) & ~(1<<HighPin));	// release only HighPin ADC port
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	01 2e       	mov	r0, r17
    2ccc:	02 c0       	rjmp	.+4      	; 0x2cd2 <ReadCapacity+0x2a0>
    2cce:	88 0f       	add	r24, r24
    2cd0:	99 1f       	adc	r25, r25
    2cd2:	0a 94       	dec	r0
    2cd4:	e2 f7       	brpl	.-8      	; 0x2cce <ReadCapacity+0x29c>
    2cd6:	80 95       	com	r24
    2cd8:	8f 70       	andi	r24, 0x0F	; 15
    2cda:	87 b9       	out	0x07, r24	; 7
    2cdc:	18 c0       	rjmp	.+48     	; 0x2d0e <ReadCapacity+0x2dc>
  } else {
     TCCR1B =  (1<<CS10);	//start counter 1MHz or 8MHz
    2cde:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
    2ce2:	87 b8       	out	0x07, r8	; 7
    2ce4:	14 c0       	rjmp	.+40     	; 0x2d0e <ReadCapacity+0x2dc>
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
     ovcnt16++;
  }
#else
  while(unfinished) {
    set_sleep_mode(SLEEP_MODE_IDLE);
    2ce6:	83 b7       	in	r24, 0x33	; 51
    2ce8:	81 7f       	andi	r24, 0xF1	; 241
    2cea:	83 bf       	out	0x33, r24	; 51
    sleep_mode();       /* wait for interrupt */
    2cec:	83 b7       	in	r24, 0x33	; 51
    2cee:	81 60       	ori	r24, 0x01	; 1
    2cf0:	83 bf       	out	0x33, r24	; 51
    2cf2:	88 95       	sleep
    2cf4:	83 b7       	in	r24, 0x33	; 51
    2cf6:	8e 7f       	andi	r24, 0xFE	; 254
    2cf8:	83 bf       	out	0x33, r24	; 51
    sei();
    2cfa:	78 94       	sei
    wdt_reset();
    2cfc:	a8 95       	wdr
    if(ovcnt16 == (F_CPU/5000)) {
    2cfe:	80 91 46 01 	lds	r24, 0x0146
    2d02:	90 91 47 01 	lds	r25, 0x0147
    2d06:	56 e0       	ldi	r21, 0x06	; 6
    2d08:	80 34       	cpi	r24, 0x40	; 64
    2d0a:	95 07       	cpc	r25, r21
    2d0c:	21 f0       	breq	.+8      	; 0x2d16 <ReadCapacity+0x2e4>
     // this OV was not counted, but was before the Input Capture
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
     ovcnt16++;
  }
#else
  while(unfinished) {
    2d0e:	80 91 5a 01 	lds	r24, 0x015A
    2d12:	88 23       	and	r24, r24
    2d14:	41 f7       	brne	.-48     	; 0x2ce6 <ReadCapacity+0x2b4>
    wdt_reset();
    if(ovcnt16 == (F_CPU/5000)) {
       break; 		//Timeout for Charging, above 12 s
    }
  }
  TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    2d16:	10 92 81 00 	sts	0x0081, r1
  tmpint = ICR1;		// get previous Input Capture Counter flag
    2d1a:	c0 91 86 00 	lds	r28, 0x0086
    2d1e:	d0 91 87 00 	lds	r29, 0x0087
  TIMSK1 = (0<<TOIE1) | (0<<ICIE1);	// disable Timer overflow interrupt and input capture interrupt
    2d22:	10 92 6f 00 	sts	0x006F, r1
  if (TCNT1 < tmpint) {
    2d26:	80 91 84 00 	lds	r24, 0x0084
    2d2a:	90 91 85 00 	lds	r25, 0x0085
    2d2e:	8c 17       	cp	r24, r28
    2d30:	9d 07       	cpc	r25, r29
    2d32:	48 f4       	brcc	.+18     	; 0x2d46 <ReadCapacity+0x314>
     ovcnt16--;			// one ov to much
    2d34:	80 91 46 01 	lds	r24, 0x0146
    2d38:	90 91 47 01 	lds	r25, 0x0147
    2d3c:	01 97       	sbiw	r24, 0x01	; 1
    2d3e:	90 93 47 01 	sts	0x0147, r25
    2d42:	80 93 46 01 	sts	0x0146, r24
  }

#endif
//############################################################
  ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    2d46:	86 e9       	ldi	r24, 0x96	; 150
    2d48:	80 93 7a 00 	sts	0x007A, r24
  R_DDR = 0;			// switch R_H resistor port for input
    2d4c:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// switch R_H resistor port pull up for HighPin off
    2d4e:	15 b8       	out	0x05, r1	; 5
  load_diff = ReadADC(HighPin) + REF_C_KORR - ref_mv;	// build difference of capacitor voltage to Reference Voltage
    2d50:	81 2f       	mov	r24, r17
    2d52:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
    2d56:	20 91 3f 01 	lds	r18, 0x013F
    2d5a:	30 91 40 01 	lds	r19, 0x0140
    2d5e:	82 1b       	sub	r24, r18
    2d60:	93 0b       	sbc	r25, r19
    2d62:	0c 96       	adiw	r24, 0x0c	; 12
    2d64:	90 93 6e 01 	sts	0x016E, r25
    2d68:	80 93 6d 01 	sts	0x016D, r24
//############################################################
  if (ovcnt16 >= (F_CPU/10000)) {
    2d6c:	80 91 46 01 	lds	r24, 0x0146
    2d70:	90 91 47 01 	lds	r25, 0x0147
    2d74:	23 e0       	ldi	r18, 0x03	; 3
    2d76:	80 32       	cpi	r24, 0x20	; 32
    2d78:	92 07       	cpc	r25, r18
    2d7a:	08 f0       	brcs	.+2      	; 0x2d7e <ReadCapacity+0x34c>
    2d7c:	f3 c0       	rjmp	.+486    	; 0x2f64 <ReadCapacity+0x532>
     goto keinC;	// no normal end
  }
//  cap.cval_uncorrected = CombineII2Long(ovcnt16, tmpint);
  cap.cval_uncorrected.w[1] = ovcnt16;
    2d7e:	90 93 66 01 	sts	0x0166, r25
    2d82:	80 93 65 01 	sts	0x0165, r24
  cap.cval_uncorrected.w[0] = tmpint;
    2d86:	d0 93 64 01 	sts	0x0164, r29
    2d8a:	c0 93 63 01 	sts	0x0163, r28

  cap.cpre = -12;			// cap.cval unit is pF 
    2d8e:	24 ef       	ldi	r18, 0xF4	; 244
    2d90:	20 93 6b 01 	sts	0x016B, r18
  if (ovcnt16 > 65) {
    2d94:	82 34       	cpi	r24, 0x42	; 66
    2d96:	91 05       	cpc	r25, r1
    2d98:	c8 f0       	brcs	.+50     	; 0x2dcc <ReadCapacity+0x39a>
     cap.cval_uncorrected.dw /= 100;	// switch to next unit
    2d9a:	60 91 63 01 	lds	r22, 0x0163
    2d9e:	70 91 64 01 	lds	r23, 0x0164
    2da2:	80 91 65 01 	lds	r24, 0x0165
    2da6:	90 91 66 01 	lds	r25, 0x0166
    2daa:	24 e6       	ldi	r18, 0x64	; 100
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	40 e0       	ldi	r20, 0x00	; 0
    2db0:	50 e0       	ldi	r21, 0x00	; 0
    2db2:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
    2db6:	20 93 63 01 	sts	0x0163, r18
    2dba:	30 93 64 01 	sts	0x0164, r19
    2dbe:	40 93 65 01 	sts	0x0165, r20
    2dc2:	50 93 66 01 	sts	0x0166, r21
     cap.cpre += 2;			// set unit, prevent overflow
    2dc6:	86 ef       	ldi	r24, 0xF6	; 246
    2dc8:	80 93 6b 01 	sts	0x016B, r24
  }
  cap.cval_uncorrected.dw *= RHmultip;		// 708
    2dcc:	60 91 00 01 	lds	r22, 0x0100
    2dd0:	70 91 01 01 	lds	r23, 0x0101
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	20 91 63 01 	lds	r18, 0x0163
    2ddc:	30 91 64 01 	lds	r19, 0x0164
    2de0:	40 91 65 01 	lds	r20, 0x0165
    2de4:	50 91 66 01 	lds	r21, 0x0166
    2de8:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
  cap.cval_uncorrected.dw /= (F_CPU / 10000);	// divide by 100 (@ 1MHz clock), 800 (@ 8MHz clock)
    2dec:	20 e2       	ldi	r18, 0x20	; 32
    2dee:	33 e0       	ldi	r19, 0x03	; 3
    2df0:	40 e0       	ldi	r20, 0x00	; 0
    2df2:	50 e0       	ldi	r21, 0x00	; 0
    2df4:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
    2df8:	20 93 63 01 	sts	0x0163, r18
    2dfc:	30 93 64 01 	sts	0x0164, r19
    2e00:	40 93 65 01 	sts	0x0165, r20
    2e04:	50 93 66 01 	sts	0x0166, r21
  cap.cval = cap.cval_uncorrected.dw;		// set the corrected cap.cval
    2e08:	eb e5       	ldi	r30, 0x5B	; 91
    2e0a:	f1 e0       	ldi	r31, 0x01	; 1
    2e0c:	20 93 5b 01 	sts	0x015B, r18
    2e10:	31 83       	std	Z+1, r19	; 0x01
    2e12:	42 83       	std	Z+2, r20	; 0x02
    2e14:	53 83       	std	Z+3, r21	; 0x03
  Scale_C_with_vcc();
    2e16:	0e 94 c9 14 	call	0x2992	; 0x2992 <Scale_C_with_vcc>
  if (cap.cpre == -12) {
    2e1a:	80 91 6b 01 	lds	r24, 0x016B
    2e1e:	84 3f       	cpi	r24, 0xF4	; 244
    2e20:	09 f0       	breq	.+2      	; 0x2e24 <ReadCapacity+0x3f2>
    2e22:	55 c0       	rjmp	.+170    	; 0x2ece <ReadCapacity+0x49c>
#if COMP_SLEW1 > COMP_SLEW2
     if (cap.cval < COMP_SLEW1) {
    2e24:	80 90 5b 01 	lds	r8, 0x015B
    2e28:	90 90 5c 01 	lds	r9, 0x015C
    2e2c:	a0 90 5d 01 	lds	r10, 0x015D
    2e30:	b0 90 5e 01 	lds	r11, 0x015E
    2e34:	40 ea       	ldi	r20, 0xA0	; 160
    2e36:	84 16       	cp	r8, r20
    2e38:	4f e0       	ldi	r20, 0x0F	; 15
    2e3a:	94 06       	cpc	r9, r20
    2e3c:	40 e0       	ldi	r20, 0x00	; 0
    2e3e:	a4 06       	cpc	r10, r20
    2e40:	40 e0       	ldi	r20, 0x00	; 0
    2e42:	b4 06       	cpc	r11, r20
    2e44:	c0 f4       	brcc	.+48     	; 0x2e76 <ReadCapacity+0x444>
        // add slew rate dependent offset
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
    2e46:	a5 01       	movw	r20, r10
    2e48:	94 01       	movw	r18, r8
    2e4a:	2c 54       	subi	r18, 0x4C	; 76
    2e4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e4e:	4f 4f       	sbci	r20, 0xFF	; 255
    2e50:	5f 4f       	sbci	r21, 0xFF	; 255
    2e52:	60 ea       	ldi	r22, 0xA0	; 160
    2e54:	7f e0       	ldi	r23, 0x0F	; 15
    2e56:	80 e0       	ldi	r24, 0x00	; 0
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
    2e5e:	28 0d       	add	r18, r8
    2e60:	39 1d       	adc	r19, r9
    2e62:	4a 1d       	adc	r20, r10
    2e64:	5b 1d       	adc	r21, r11
    2e66:	20 93 5b 01 	sts	0x015B, r18
    2e6a:	30 93 5c 01 	sts	0x015C, r19
    2e6e:	40 93 5d 01 	sts	0x015D, r20
    2e72:	50 93 5e 01 	sts	0x015E, r21
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2e76:	80 91 45 01 	lds	r24, 0x0145
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	87 59       	subi	r24, 0x97	; 151
    2e7e:	9d 4f       	sbci	r25, 0xFD	; 253
    2e80:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__eerd_byte_m328>
     if (cap.cval > tmpint) {
    2e84:	20 91 5b 01 	lds	r18, 0x015B
    2e88:	30 91 5c 01 	lds	r19, 0x015C
    2e8c:	40 91 5d 01 	lds	r20, 0x015D
    2e90:	50 91 5e 01 	lds	r21, 0x015E
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2e94:	90 e0       	ldi	r25, 0x00	; 0
     if (cap.cval > tmpint) {
    2e96:	a0 e0       	ldi	r26, 0x00	; 0
    2e98:	b0 e0       	ldi	r27, 0x00	; 0
    2e9a:	82 17       	cp	r24, r18
    2e9c:	93 07       	cpc	r25, r19
    2e9e:	a4 07       	cpc	r26, r20
    2ea0:	b5 07       	cpc	r27, r21
    2ea2:	68 f4       	brcc	.+26     	; 0x2ebe <ReadCapacity+0x48c>
         cap.cval -= tmpint;		//subtract zero offset (pF)
    2ea4:	28 1b       	sub	r18, r24
    2ea6:	39 0b       	sbc	r19, r25
    2ea8:	4a 0b       	sbc	r20, r26
    2eaa:	5b 0b       	sbc	r21, r27
    2eac:	20 93 5b 01 	sts	0x015B, r18
    2eb0:	30 93 5c 01 	sts	0x015C, r19
    2eb4:	40 93 5d 01 	sts	0x015D, r20
    2eb8:	50 93 5e 01 	sts	0x015E, r21
    2ebc:	08 c0       	rjmp	.+16     	; 0x2ece <ReadCapacity+0x49c>
     } else {
         cap.cval = 0;			//unsigned long may not reach negativ value
    2ebe:	10 92 5b 01 	sts	0x015B, r1
    2ec2:	10 92 5c 01 	sts	0x015C, r1
    2ec6:	10 92 5d 01 	sts	0x015D, r1
    2eca:	10 92 5e 01 	sts	0x015E, r1
  lcd_testpin(HighPin);
  lcd_space();
  DisplayValue(cap.cval,cap.cpre,'F',4);
  wait_about3s();
#endif
  R_DDR = HiPinR_L; 		//switch R_L for High-Pin to GND
    2ece:	c4 b8       	out	0x04, r12	; 4
#if F_CPU < 2000001
   if(cap.cval < 50)
#else 
   if(cap.cval < 25)
    2ed0:	80 91 5b 01 	lds	r24, 0x015B
    2ed4:	90 91 5c 01 	lds	r25, 0x015C
    2ed8:	a0 91 5d 01 	lds	r26, 0x015D
    2edc:	b0 91 5e 01 	lds	r27, 0x015E
    2ee0:	89 31       	cpi	r24, 0x19	; 25
    2ee2:	91 05       	cpc	r25, r1
    2ee4:	a1 05       	cpc	r26, r1
    2ee6:	b1 05       	cpc	r27, r1
    2ee8:	e8 f1       	brcs	.+122    	; 0x2f64 <ReadCapacity+0x532>
//   if (ovcnt16 > (6 * ((unsigned long)F_CPU/1000000))) {	// above 3 uF
//      GetESR(HighPin,LowPin);
//   }
#endif
checkDiodes:
   if((NumOfDiodes > 0)  && (PartFound != PART_FET)) {
    2eea:	80 91 05 01 	lds	r24, 0x0105
    2eee:	88 23       	and	r24, r24
    2ef0:	21 f0       	breq	.+8      	; 0x2efa <ReadCapacity+0x4c8>
    2ef2:	80 91 07 01 	lds	r24, 0x0107
    2ef6:	83 30       	cpi	r24, 0x03	; 3
    2ef8:	a9 f5       	brne	.+106    	; 0x2f64 <ReadCapacity+0x532>
      wait_about1s();
#endif
      // nearly shure, that there is one or more diodes in reverse direction,
      // which would be wrongly detected as capacitor 
   } else {
      PartFound = PART_CAPACITOR;	//capacitor is found
    2efa:	87 e0       	ldi	r24, 0x07	; 7
    2efc:	80 93 07 01 	sts	0x0107, r24
      if ((cap.cpre > cap.cpre_max) || ((cap.cpre == cap.cpre_max) && (cap.cval > cap.cval_max))) {
    2f00:	60 91 6b 01 	lds	r22, 0x016B
    2f04:	80 91 6c 01 	lds	r24, 0x016C
    2f08:	86 17       	cp	r24, r22
    2f0a:	bc f0       	brlt	.+46     	; 0x2f3a <ReadCapacity+0x508>
    2f0c:	68 17       	cp	r22, r24
    2f0e:	51 f5       	brne	.+84     	; 0x2f64 <ReadCapacity+0x532>
    2f10:	20 91 5b 01 	lds	r18, 0x015B
    2f14:	30 91 5c 01 	lds	r19, 0x015C
    2f18:	40 91 5d 01 	lds	r20, 0x015D
    2f1c:	50 91 5e 01 	lds	r21, 0x015E
    2f20:	80 91 5f 01 	lds	r24, 0x015F
    2f24:	90 91 60 01 	lds	r25, 0x0160
    2f28:	a0 91 61 01 	lds	r26, 0x0161
    2f2c:	b0 91 62 01 	lds	r27, 0x0162
    2f30:	82 17       	cp	r24, r18
    2f32:	93 07       	cpc	r25, r19
    2f34:	a4 07       	cpc	r26, r20
    2f36:	b5 07       	cpc	r27, r21
    2f38:	a8 f4       	brcc	.+42     	; 0x2f64 <ReadCapacity+0x532>
         // we have found a greater one
         cap.cval_max = cap.cval;
    2f3a:	eb e5       	ldi	r30, 0x5B	; 91
    2f3c:	f1 e0       	ldi	r31, 0x01	; 1
    2f3e:	80 91 5b 01 	lds	r24, 0x015B
    2f42:	90 91 5c 01 	lds	r25, 0x015C
    2f46:	a0 91 5d 01 	lds	r26, 0x015D
    2f4a:	b0 91 5e 01 	lds	r27, 0x015E
    2f4e:	80 93 5f 01 	sts	0x015F, r24
    2f52:	90 93 60 01 	sts	0x0160, r25
    2f56:	a0 93 61 01 	sts	0x0161, r26
    2f5a:	b0 93 62 01 	sts	0x0162, r27
         cap.cpre_max = cap.cpre;
    2f5e:	61 8b       	std	Z+17, r22	; 0x11
         cap.ca = LowPin;		// save LowPin
    2f60:	06 87       	std	Z+14, r16	; 0x0e
         cap.cb = HighPin;		// save HighPin
    2f62:	17 87       	std	Z+15, r17	; 0x0f
keinC:
  // discharge capacitor again
//  EntladePins();		// discharge capacitors
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    2f64:	88 e0       	ldi	r24, 0x08	; 8
    2f66:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    2f68:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    2f6a:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    2f6c:	15 b8       	out	0x05, r1	; 5
  return;
 } // end ReadCapacity()
    2f6e:	df 91       	pop	r29
    2f70:	cf 91       	pop	r28
    2f72:	1f 91       	pop	r17
    2f74:	0f 91       	pop	r16
    2f76:	ff 90       	pop	r15
    2f78:	ef 90       	pop	r14
    2f7a:	df 90       	pop	r13
    2f7c:	cf 90       	pop	r12
    2f7e:	bf 90       	pop	r11
    2f80:	af 90       	pop	r10
    2f82:	9f 90       	pop	r9
    2f84:	8f 90       	pop	r8
    2f86:	08 95       	ret

00002f88 <__vector_13>:
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
}
#ifndef INHIBIT_SLEEP_MODE

 ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    2f88:	1f 92       	push	r1
    2f8a:	0f 92       	push	r0
    2f8c:	0f b6       	in	r0, 0x3f	; 63
    2f8e:	0f 92       	push	r0
    2f90:	11 24       	eor	r1, r1
    2f92:	8f 93       	push	r24
    2f94:	9f 93       	push	r25
 ovcnt16++;				// count overflow
    2f96:	80 91 46 01 	lds	r24, 0x0146
    2f9a:	90 91 47 01 	lds	r25, 0x0147
    2f9e:	01 96       	adiw	r24, 0x01	; 1
    2fa0:	90 93 47 01 	sts	0x0147, r25
    2fa4:	80 93 46 01 	sts	0x0146, r24
}
    2fa8:	9f 91       	pop	r25
    2faa:	8f 91       	pop	r24
    2fac:	0f 90       	pop	r0
    2fae:	0f be       	out	0x3f, r0	; 63
    2fb0:	0f 90       	pop	r0
    2fb2:	1f 90       	pop	r1
    2fb4:	18 95       	reti

00002fb6 <__vector_10>:
 ISR(TIMER1_CAPT_vect, ISR_NAKED)
{
 unfinished = 0;			// clear unfinished flag
    2fb6:	10 92 5a 01 	sts	0x015A, r1
 reti();
    2fba:	18 95       	reti

00002fbc <ReadInductance>:
#include "config.h"
#include "Transistortester.h"


//=================================================================
void ReadInductance(void) {
    2fbc:	2f 92       	push	r2
    2fbe:	3f 92       	push	r3
    2fc0:	4f 92       	push	r4
    2fc2:	5f 92       	push	r5
    2fc4:	6f 92       	push	r6
    2fc6:	7f 92       	push	r7
    2fc8:	8f 92       	push	r8
    2fca:	9f 92       	push	r9
    2fcc:	af 92       	push	r10
    2fce:	bf 92       	push	r11
    2fd0:	cf 92       	push	r12
    2fd2:	df 92       	push	r13
    2fd4:	ef 92       	push	r14
    2fd6:	ff 92       	push	r15
    2fd8:	0f 93       	push	r16
    2fda:	1f 93       	push	r17
    2fdc:	df 93       	push	r29
    2fde:	cf 93       	push	r28
    2fe0:	cd b7       	in	r28, 0x3d	; 61
    2fe2:	de b7       	in	r29, 0x3e	; 62
    2fe4:	6e 97       	sbiw	r28, 0x1e	; 30
    2fe6:	0f b6       	in	r0, 0x3f	; 63
    2fe8:	f8 94       	cli
    2fea:	de bf       	out	0x3e, r29	; 62
    2fec:	0f be       	out	0x3f, r0	; 63
    2fee:	cd bf       	out	0x3d, r28	; 61
  uint8_t found;	// variable used for searching resistors 
  uint8_t LowPin;	// number of pin with low voltage
  uint8_t HighPin;	// number of pin with high voltage 


  if(PartFound != PART_RESISTOR) {
    2ff0:	80 91 07 01 	lds	r24, 0x0107
    2ff4:	86 30       	cpi	r24, 0x06	; 6
    2ff6:	09 f0       	breq	.+2      	; 0x2ffa <ReadInductance+0x3e>
    2ff8:	66 c2       	rjmp	.+1228   	; 0x34c6 <ReadInductance+0x50a>
    2ffa:	19 8a       	std	Y+17, r1	; 0x11
    2ffc:	5b c2       	rjmp	.+1206   	; 0x34b4 <ReadInductance+0x4f8>
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 21000) continue;
    2ffe:	29 89       	ldd	r18, Y+17	; 0x11
    3000:	22 2e       	mov	r2, r18
    3002:	33 24       	eor	r3, r3
    3004:	4b e0       	ldi	r20, 0x0B	; 11
    3006:	50 e0       	ldi	r21, 0x00	; 0
    3008:	24 9e       	mul	r2, r20
    300a:	f0 01       	movw	r30, r0
    300c:	25 9e       	mul	r2, r21
    300e:	f0 0d       	add	r31, r0
    3010:	34 9e       	mul	r3, r20
    3012:	f0 0d       	add	r31, r0
    3014:	11 24       	eor	r1, r1
    3016:	e8 5e       	subi	r30, 0xE8	; 232
    3018:	fe 4f       	sbci	r31, 0xFE	; 254
    301a:	80 81       	ld	r24, Z
    301c:	91 81       	ldd	r25, Z+1	; 0x01
    301e:	a2 81       	ldd	r26, Z+2	; 0x02
    3020:	b3 81       	ldd	r27, Z+3	; 0x03
    3022:	89 30       	cpi	r24, 0x09	; 9
    3024:	52 e5       	ldi	r21, 0x52	; 82
    3026:	95 07       	cpc	r25, r21
    3028:	50 e0       	ldi	r21, 0x00	; 0
    302a:	a5 07       	cpc	r26, r21
    302c:	50 e0       	ldi	r21, 0x00	; 0
    302e:	b5 07       	cpc	r27, r21
    3030:	08 f0       	brcs	.+2      	; 0x3034 <ReadInductance+0x78>
    3032:	3d c2       	rjmp	.+1146   	; 0x34ae <ReadInductance+0x4f2>
    3034:	ff 24       	eor	r15, r15
           // first and second pass, direction 1
           LowPin = resis[found].ra;
           HighPin = resis[found].rb;
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    3036:	5f 01       	movw	r10, r30
    3038:	cf 01       	movw	r24, r30
    303a:	09 96       	adiw	r24, 0x09	; 9
    303c:	99 8f       	std	Y+25, r25	; 0x19
    303e:	88 8f       	std	Y+24, r24	; 0x18
           HighPin = resis[found].ra;
    3040:	38 96       	adiw	r30, 0x08	; 8
    3042:	fb 8f       	std	Y+27, r31	; 0x1b
    3044:	ea 8f       	std	Y+26, r30	; 0x1a
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    3046:	3d 8e       	std	Y+29, r3	; 0x1d
    3048:	2c 8e       	std	Y+28, r2	; 0x1c
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 21000) continue;
     // we can check for Inductance, if resistance is below 2800 Ohm
     for (count=0;count<4;count++) {
        // Try four times (different direction and with delayed counter start)
        if (count < 2) {
    304a:	ff 2d       	mov	r31, r15
    304c:	f2 30       	cpi	r31, 0x02	; 2
    304e:	30 f4       	brcc	.+12     	; 0x305c <ReadInductance+0xa0>
           // first and second pass, direction 1
           LowPin = resis[found].ra;
    3050:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3052:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3054:	e0 80       	ld	r14, Z
           HighPin = resis[found].rb;
    3056:	e8 8d       	ldd	r30, Y+24	; 0x18
    3058:	f9 8d       	ldd	r31, Y+25	; 0x19
    305a:	05 c0       	rjmp	.+10     	; 0x3066 <ReadInductance+0xaa>
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    305c:	e8 8d       	ldd	r30, Y+24	; 0x18
    305e:	f9 8d       	ldd	r31, Y+25	; 0x19
    3060:	e0 80       	ld	r14, Z
           HighPin = resis[found].ra;
    3062:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3064:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3066:	70 80       	ld	r7, Z
        }
        HiADC = MEM_read_byte(&PinADCtab[HighPin]);
    3068:	87 2d       	mov	r24, r7
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	88 5a       	subi	r24, 0xA8	; 168
    306e:	9d 4f       	sbci	r25, 0xFD	; 253
    3070:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__eerd_byte_m328>
    3074:	88 2e       	mov	r8, r24
        LoPinR_L = MEM_read_byte(&PinRLtab[LowPin]);	//R_L mask for HighPin R_L load
    3076:	8e 2d       	mov	r24, r14
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	8b 5a       	subi	r24, 0xAB	; 171
    307c:	9d 4f       	sbci	r25, 0xFD	; 253
    307e:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__eerd_byte_m328>
        //==================================================================================
        // Measurement of Inductance values
        R_PORT = 0;		// switch R port to GND
    3082:	15 b8       	out	0x05, r1	; 5
        ADC_PORT =   TXD_VAL;		// switch ADC-Port to GND
    3084:	f8 e0       	ldi	r31, 0x08	; 8
    3086:	f8 b9       	out	0x08, r31	; 8
        if ((resis[found].rx < 240) && ((count & 0x01) == 0)) {
    3088:	f5 01       	movw	r30, r10
    308a:	20 81       	ld	r18, Z
    308c:	31 81       	ldd	r19, Z+1	; 0x01
    308e:	42 81       	ldd	r20, Z+2	; 0x02
    3090:	53 81       	ldd	r21, Z+3	; 0x03
    3092:	20 3f       	cpi	r18, 0xF0	; 240
    3094:	31 05       	cpc	r19, r1
    3096:	41 05       	cpc	r20, r1
    3098:	51 05       	cpc	r21, r1
    309a:	a8 f4       	brcc	.+42     	; 0x30c6 <ReadInductance+0x10a>
    309c:	f0 fc       	sbrc	r15, 0
    309e:	13 c0       	rjmp	.+38     	; 0x30c6 <ReadInductance+0x10a>
           // we can use PinR_L for measurement
           mess_r = RR680MI - R_L_VAL;
    30a0:	00 91 02 01 	lds	r16, 0x0102
    30a4:	10 91 03 01 	lds	r17, 0x0103
    30a8:	00 59       	subi	r16, 0x90	; 144
    30aa:	1a 41       	sbci	r17, 0x1A	; 26
           ADC_DDR = HiADC | (1<<LowPin) | TXD_MSK;	// switch HiADC and Low Pin to GND, 
    30ac:	28 2d       	mov	r18, r8
    30ae:	28 60       	ori	r18, 0x08	; 8
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	0e 2c       	mov	r0, r14
    30b6:	02 c0       	rjmp	.+4      	; 0x30bc <ReadInductance+0x100>
    30b8:	88 0f       	add	r24, r24
    30ba:	99 1f       	adc	r25, r25
    30bc:	0a 94       	dec	r0
    30be:	e2 f7       	brpl	.-8      	; 0x30b8 <ReadInductance+0xfc>
    30c0:	28 2b       	or	r18, r24
    30c2:	27 b9       	out	0x07, r18	; 7
    30c4:	08 c0       	rjmp	.+16     	; 0x30d6 <ReadInductance+0x11a>
        } else {
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
    30c6:	84 b9       	out	0x04, r24	; 4
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
    30c8:	88 2d       	mov	r24, r8
    30ca:	88 60       	ori	r24, 0x08	; 8
    30cc:	87 b9       	out	0x07, r24	; 7
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
    30ce:	00 91 02 01 	lds	r16, 0x0102
    30d2:	10 91 03 01 	lds	r17, 0x0103
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    30d6:	20 e0       	ldi	r18, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    30d8:	8e 2d       	mov	r24, r14
    30da:	2e 8f       	std	Y+30, r18	; 0x1e
    30dc:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <W10msReadADC>
    30e0:	6c 01       	movw	r12, r24
            total_r =  ReadADC(HighPin);
    30e2:	87 2d       	mov	r24, r7
    30e4:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    30e8:	2e 8d       	ldd	r18, Y+30	; 0x1e
    30ea:	f2 e0       	ldi	r31, 0x02	; 2
    30ec:	cf 16       	cp	r12, r31
    30ee:	d1 04       	cpc	r13, r1
    30f0:	18 f4       	brcc	.+6      	; 0x30f8 <ReadInductance+0x13c>
    30f2:	82 30       	cpi	r24, 0x02	; 2
    30f4:	91 05       	cpc	r25, r1
    30f6:	18 f0       	brcs	.+6      	; 0x30fe <ReadInductance+0x142>
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    30f8:	2f 5f       	subi	r18, 0xFF	; 255
    30fa:	24 31       	cpi	r18, 0x14	; 20
    30fc:	69 f7       	brne	.-38     	; 0x30d8 <ReadInductance+0x11c>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
        // setup Analog Comparator
        ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    30fe:	20 e4       	ldi	r18, 0x40	; 64
    3100:	20 93 7b 00 	sts	0x007B, r18
        ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    3104:	34 e5       	ldi	r19, 0x54	; 84
    3106:	30 bf       	out	0x30, r19	; 48
        ADMUX = (1<<REFS0) | LowPin;			// switch Mux to Low-Pin
    3108:	8e 2d       	mov	r24, r14
    310a:	80 64       	ori	r24, 0x40	; 64
    310c:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    3110:	46 e1       	ldi	r20, 0x16	; 22
    3112:	40 93 7a 00 	sts	0x007A, r20
   
      // setup Counter1
        ov_cnt16 = 0;
        TCCR1A = 0;			// set Counter1 to normal Mode
    3116:	10 92 80 00 	sts	0x0080, r1
        TCNT1 = 0;			//set Counter to 0
    311a:	10 92 85 00 	sts	0x0085, r1
    311e:	10 92 84 00 	sts	0x0084, r1
        TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// reset TIFR or TIFR1
    3122:	57 e2       	ldi	r21, 0x27	; 39
    3124:	56 bb       	out	0x16, r21	; 22
        HiADC |= TXD_VAL;
    3126:	88 e0       	ldi	r24, 0x08	; 8
    3128:	88 2a       	or	r8, r24
        wait200us();			// wait for bandgap to start up
    312a:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <wait200us>
        if ((count & 0x01) == 0 ) {
    312e:	2f 2c       	mov	r2, r15
    3130:	33 24       	eor	r3, r3
    3132:	f1 01       	movw	r30, r2
    3134:	e1 70       	andi	r30, 0x01	; 1
    3136:	f0 70       	andi	r31, 0x00	; 0
    3138:	fb 8b       	std	Y+19, r31	; 0x13
    313a:	ea 8b       	std	Y+18, r30	; 0x12
    313c:	f0 fc       	sbrc	r15, 0
    313e:	05 c0       	rjmp	.+10     	; 0x314a <ReadInductance+0x18e>
           //first start counter, then start current
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    3140:	f1 e8       	ldi	r31, 0x81	; 129
    3142:	f0 93 81 00 	sts	0x0081, r31
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    3146:	88 b8       	out	0x08, r8	; 8
    3148:	08 c0       	rjmp	.+16     	; 0x315a <ReadInductance+0x19e>
        } else {
           //first start current, then start counter with delay
           //parasitic capacity of coil can cause high current at the beginning
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    314a:	88 b8       	out	0x08, r8	; 8
      #if F_CPU >= 8000000UL
           wait3us();		// ignore current peak from capacity
    314c:	0e 94 83 14 	call	0x2906	; 0x2906 <wait3us>
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
    3150:	20 e2       	ldi	r18, 0x20	; 32
    3152:	26 bb       	out	0x16, r18	; 22
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    3154:	31 e8       	ldi	r19, 0x81	; 129
    3156:	30 93 81 00 	sts	0x0081, r19
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    315a:	cc 24       	eor	r12, r12
    315c:	dd 24       	eor	r13, r13
        }
      
      //******************************
        while(1) {
           // Wait, until  Input Capture is set
           ii = TI1_INT_FLAGS;		//read Timer flags
    315e:	26 b3       	in	r18, 0x16	; 22
           if (ii & (1<<ICF1))  {
    3160:	25 fd       	sbrc	r18, 5
    3162:	0c c0       	rjmp	.+24     	; 0x317c <ReadInductance+0x1c0>
              break;
           }
           if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    3164:	20 ff       	sbrs	r18, 0
    3166:	fb cf       	rjmp	.-10     	; 0x315e <ReadInductance+0x1a2>
              TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    3168:	41 e0       	ldi	r20, 0x01	; 1
    316a:	46 bb       	out	0x16, r20	; 22
              wdt_reset();
    316c:	a8 95       	wdr
              ov_cnt16++;
    316e:	08 94       	sec
    3170:	c1 1c       	adc	r12, r1
    3172:	d1 1c       	adc	r13, r1
              if(ov_cnt16 == (F_CPU/100000)) {
    3174:	50 e5       	ldi	r21, 0x50	; 80
    3176:	c5 16       	cp	r12, r21
    3178:	d1 04       	cpc	r13, r1
    317a:	89 f7       	brne	.-30     	; 0x315e <ReadInductance+0x1a2>
                 break; 	//Timeout for Charging, above 0.13 s
              }
           }
        }
        TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    317c:	10 92 81 00 	sts	0x0081, r1
        TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    3180:	80 e2       	ldi	r24, 0x20	; 32
    3182:	86 bb       	out	0x16, r24	; 22
        tmpint = ICR1;		// get previous Input Capture Counter flag
    3184:	80 90 86 00 	lds	r8, 0x0086
    3188:	90 90 87 00 	lds	r9, 0x0087
      // check actual counter, if an additional overflow must be added
        if((TCNT1 > tmpint) && (ii & (1<<TOV1))) {
    318c:	80 91 84 00 	lds	r24, 0x0084
    3190:	90 91 85 00 	lds	r25, 0x0085
    3194:	88 16       	cp	r8, r24
    3196:	99 06       	cpc	r9, r25
    3198:	38 f4       	brcc	.+14     	; 0x31a8 <ReadInductance+0x1ec>
    319a:	20 ff       	sbrs	r18, 0
    319c:	05 c0       	rjmp	.+10     	; 0x31a8 <ReadInductance+0x1ec>
           // this OV was not counted, but was before the Input Capture
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    319e:	91 e0       	ldi	r25, 0x01	; 1
    31a0:	96 bb       	out	0x16, r25	; 22
           ov_cnt16++;
    31a2:	08 94       	sec
    31a4:	c1 1c       	adc	r12, r1
    31a6:	d1 1c       	adc	r13, r1
        }
        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    31a8:	e8 e0       	ldi	r30, 0x08	; 8
    31aa:	e8 b9       	out	0x08, r30	; 8
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    31ac:	f6 e9       	ldi	r31, 0x96	; 150
    31ae:	f0 93 7a 00 	sts	0x007A, r31
        for (ii=0;ii<20;ii++) {
    31b2:	40 e0       	ldi	r20, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    31b4:	8e 2d       	mov	r24, r14
    31b6:	4e 8f       	std	Y+30, r20	; 0x1e
    31b8:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <W10msReadADC>
    31bc:	2c 01       	movw	r4, r24
            total_r =  ReadADC(HighPin);
    31be:	87 2d       	mov	r24, r7
    31c0:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    31c4:	4e 8d       	ldd	r20, Y+30	; 0x1e
    31c6:	52 e0       	ldi	r21, 0x02	; 2
    31c8:	45 16       	cp	r4, r21
    31ca:	51 04       	cpc	r5, r1
    31cc:	18 f4       	brcc	.+6      	; 0x31d4 <ReadInductance+0x218>
    31ce:	82 30       	cpi	r24, 0x02	; 2
    31d0:	91 05       	cpc	r25, r1
    31d2:	18 f0       	brcs	.+6      	; 0x31da <ReadInductance+0x21e>
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
           ov_cnt16++;
        }
        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
        for (ii=0;ii<20;ii++) {
    31d4:	4f 5f       	subi	r20, 0xFF	; 255
    31d6:	44 31       	cpi	r20, 0x14	; 20
    31d8:	69 f7       	brne	.-38     	; 0x31b4 <ReadInductance+0x1f8>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
//      cap.cval_uncorrected.dw = CombineII2Long(ov_cnt16, tmpint);
        cap.cval_uncorrected.w[1] = ov_cnt16;
    31da:	d0 92 66 01 	sts	0x0166, r13
    31de:	c0 92 65 01 	sts	0x0165, r12
        cap.cval_uncorrected.w[0] = tmpint;
    31e2:	90 92 64 01 	sts	0x0164, r9
    31e6:	80 92 63 01 	sts	0x0163, r8
  #define CNT_ZERO_42 4
  #define CNT_ZERO_720 10
#endif
        // Voltage of comparator in % of umax
        #ifdef AUTO_CAL
        tmpint = (ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset))) ;
    31ea:	87 e6       	ldi	r24, 0x67	; 103
    31ec:	92 e0       	ldi	r25, 0x02	; 2
    31ee:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__eerd_word_m328>
    31f2:	60 91 3f 01 	lds	r22, 0x013F
    31f6:	70 91 40 01 	lds	r23, 0x0140
    31fa:	68 0f       	add	r22, r24
    31fc:	79 1f       	adc	r23, r25
    31fe:	80 91 63 01 	lds	r24, 0x0163
    3202:	90 91 64 01 	lds	r25, 0x0164
    3206:	a0 91 65 01 	lds	r26, 0x0165
    320a:	b0 91 66 01 	lds	r27, 0x0166
        #else
        tmpint = (ref_mv + REF_C_KORR);
        #endif
        if (mess_r < R_L_VAL) {
    320e:	ea e1       	ldi	r30, 0x1A	; 26
    3210:	00 39       	cpi	r16, 0x90	; 144
    3212:	1e 07       	cpc	r17, r30
    3214:	90 f4       	brcc	.+36     	; 0x323a <ReadInductance+0x27e>
           // measurement without 680 Ohm
           if (cap.cval_uncorrected.dw > CNT_ZERO_42) cap.cval_uncorrected.dw -= CNT_ZERO_42;
    3216:	87 30       	cpi	r24, 0x07	; 7
    3218:	91 05       	cpc	r25, r1
    321a:	a1 05       	cpc	r26, r1
    321c:	b1 05       	cpc	r27, r1
    321e:	20 f0       	brcs	.+8      	; 0x3228 <ReadInductance+0x26c>
    3220:	06 97       	sbiw	r24, 0x06	; 6
    3222:	a1 09       	sbc	r26, r1
    3224:	b1 09       	sbc	r27, r1
    3226:	34 c0       	rjmp	.+104    	; 0x3290 <ReadInductance+0x2d4>
           else          cap.cval_uncorrected.dw = 0;
    3228:	10 92 63 01 	sts	0x0163, r1
    322c:	10 92 64 01 	sts	0x0164, r1
    3230:	10 92 65 01 	sts	0x0165, r1
    3234:	10 92 66 01 	sts	0x0166, r1
    3238:	33 c0       	rjmp	.+102    	; 0x32a0 <ReadInductance+0x2e4>
        } else {
           // measurement with 680 Ohm resistor
           // if 680 Ohm resistor is used, use REF_L_KORR for correction
           tmpint += REF_L_KORR;
    323a:	6e 5c       	subi	r22, 0xCE	; 206
    323c:	7f 4f       	sbci	r23, 0xFF	; 255
           if (cap.cval_uncorrected.dw > CNT_ZERO_720) cap.cval_uncorrected.dw -= CNT_ZERO_720;
    323e:	88 30       	cpi	r24, 0x08	; 8
    3240:	91 05       	cpc	r25, r1
    3242:	a1 05       	cpc	r26, r1
    3244:	b1 05       	cpc	r27, r1
    3246:	60 f0       	brcs	.+24     	; 0x3260 <ReadInductance+0x2a4>
    3248:	07 97       	sbiw	r24, 0x07	; 7
    324a:	a1 09       	sbc	r26, r1
    324c:	b1 09       	sbc	r27, r1
    324e:	80 93 63 01 	sts	0x0163, r24
    3252:	90 93 64 01 	sts	0x0164, r25
    3256:	a0 93 65 01 	sts	0x0165, r26
    325a:	b0 93 66 01 	sts	0x0166, r27
    325e:	08 c0       	rjmp	.+16     	; 0x3270 <ReadInductance+0x2b4>
           else          cap.cval_uncorrected.dw = 0;
    3260:	10 92 63 01 	sts	0x0163, r1
    3264:	10 92 64 01 	sts	0x0164, r1
    3268:	10 92 65 01 	sts	0x0165, r1
    326c:	10 92 66 01 	sts	0x0166, r1
           if (cap.cval_uncorrected.dw > 12) cap.cval_uncorrected.dw -= 1;
    3270:	80 91 63 01 	lds	r24, 0x0163
    3274:	90 91 64 01 	lds	r25, 0x0164
    3278:	a0 91 65 01 	lds	r26, 0x0165
    327c:	b0 91 66 01 	lds	r27, 0x0166
    3280:	8d 30       	cpi	r24, 0x0D	; 13
    3282:	91 05       	cpc	r25, r1
    3284:	a1 05       	cpc	r26, r1
    3286:	b1 05       	cpc	r27, r1
    3288:	58 f0       	brcs	.+22     	; 0x32a0 <ReadInductance+0x2e4>
    328a:	01 97       	sbiw	r24, 0x01	; 1
    328c:	a1 09       	sbc	r26, r1
    328e:	b1 09       	sbc	r27, r1
    3290:	80 93 63 01 	sts	0x0163, r24
    3294:	90 93 64 01 	sts	0x0164, r25
    3298:	a0 93 65 01 	sts	0x0165, r26
    329c:	b0 93 66 01 	sts	0x0166, r27
        }
        if ((count&0x01) == 1) {
    32a0:	2a 89       	ldd	r18, Y+18	; 0x12
    32a2:	3b 89       	ldd	r19, Y+19	; 0x13
    32a4:	21 15       	cp	r18, r1
    32a6:	31 05       	cpc	r19, r1
    32a8:	99 f0       	breq	.+38     	; 0x32d0 <ReadInductance+0x314>
           // second pass with delayed counter start
           cap.cval_uncorrected.dw += (3 * (F_CPU/1000000))+10;
    32aa:	80 91 63 01 	lds	r24, 0x0163
    32ae:	90 91 64 01 	lds	r25, 0x0164
    32b2:	a0 91 65 01 	lds	r26, 0x0165
    32b6:	b0 91 66 01 	lds	r27, 0x0166
    32ba:	82 96       	adiw	r24, 0x22	; 34
    32bc:	a1 1d       	adc	r26, r1
    32be:	b1 1d       	adc	r27, r1
    32c0:	80 93 63 01 	sts	0x0163, r24
    32c4:	90 93 64 01 	sts	0x0164, r25
    32c8:	a0 93 65 01 	sts	0x0165, r26
    32cc:	b0 93 66 01 	sts	0x0166, r27
        }
        if (ov_cnt16 >= (F_CPU/100000)) cap.cval_uncorrected.dw = 0; // no transition found
    32d0:	30 e5       	ldi	r19, 0x50	; 80
    32d2:	c3 16       	cp	r12, r19
    32d4:	d1 04       	cpc	r13, r1
    32d6:	40 f0       	brcs	.+16     	; 0x32e8 <ReadInductance+0x32c>
    32d8:	10 92 63 01 	sts	0x0163, r1
    32dc:	10 92 64 01 	sts	0x0164, r1
    32e0:	10 92 65 01 	sts	0x0165, r1
    32e4:	10 92 66 01 	sts	0x0166, r1
        total_r = (mess_r + resis[found].rx + RR680PL - R_L_VAL);
    32e8:	80 91 08 01 	lds	r24, 0x0108
    32ec:	90 91 09 01 	lds	r25, 0x0109
    32f0:	80 59       	subi	r24, 0x90	; 144
    32f2:	9a 41       	sbci	r25, 0x1A	; 26
    32f4:	f5 01       	movw	r30, r10
    32f6:	20 81       	ld	r18, Z
    32f8:	31 81       	ldd	r19, Z+1	; 0x01
    32fa:	82 0f       	add	r24, r18
    32fc:	93 1f       	adc	r25, r19
    32fe:	80 0f       	add	r24, r16
    3300:	91 1f       	adc	r25, r17
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    3302:	9c 01       	movw	r18, r24
    3304:	40 e0       	ldi	r20, 0x00	; 0
    3306:	50 e0       	ldi	r21, 0x00	; 0
    3308:	2c 8b       	std	Y+20, r18	; 0x14
    330a:	3d 8b       	std	Y+21, r19	; 0x15
    330c:	4e 8b       	std	Y+22, r20	; 0x16
    330e:	5f 8b       	std	Y+23, r21	; 0x17
        per_ref = ((unsigned long)tmpint * 100) / umax;
    3310:	80 e0       	ldi	r24, 0x00	; 0
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	24 e6       	ldi	r18, 0x64	; 100
    3316:	30 e0       	ldi	r19, 0x00	; 0
    3318:	40 e0       	ldi	r20, 0x00	; 0
    331a:	50 e0       	ldi	r21, 0x00	; 0
    331c:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
    3320:	2b 01       	movw	r4, r22
    3322:	3c 01       	movw	r6, r24
           cap.cval_uncorrected.dw += (3 * (F_CPU/1000000))+10;
        }
        if (ov_cnt16 >= (F_CPU/100000)) cap.cval_uncorrected.dw = 0; // no transition found
        total_r = (mess_r + resis[found].rx + RR680PL - R_L_VAL);
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    3324:	b8 01       	movw	r22, r16
    3326:	80 e0       	ldi	r24, 0x00	; 0
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	20 91 3d 01 	lds	r18, 0x013D
    332e:	30 91 3e 01 	lds	r19, 0x013E
    3332:	40 e0       	ldi	r20, 0x00	; 0
    3334:	50 e0       	ldi	r21, 0x00	; 0
    3336:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
    333a:	2c 89       	ldd	r18, Y+20	; 0x14
    333c:	3d 89       	ldd	r19, Y+21	; 0x15
    333e:	4e 89       	ldd	r20, Y+22	; 0x16
    3340:	5f 89       	ldd	r21, Y+23	; 0x17
    3342:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
        per_ref = ((unsigned long)tmpint * 100) / umax;
    3346:	40 e0       	ldi	r20, 0x00	; 0
    3348:	50 e0       	ldi	r21, 0x00	; 0
    334a:	c3 01       	movw	r24, r6
    334c:	b2 01       	movw	r22, r4
    334e:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
        per_ref = (uint8_t)MEM2_read_byte(&LogTab[per_ref]);	// -log(1 - per_ref/100)
    3352:	82 2f       	mov	r24, r18
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	86 5a       	subi	r24, 0xA6	; 166
    3358:	9f 4f       	sbci	r25, 0xFF	; 255
    335a:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__eerd_byte_m328>
    335e:	08 2f       	mov	r16, r24
        // lx in 0.01mH units,  L = Tau * R
        inductance[count] = (cap.cval_uncorrected.dw * total_r ) / ((unsigned int)per_ref * (F_CPU/1000000));
    3360:	20 91 63 01 	lds	r18, 0x0163
    3364:	30 91 64 01 	lds	r19, 0x0164
    3368:	40 91 65 01 	lds	r20, 0x0165
    336c:	50 91 66 01 	lds	r21, 0x0166
    3370:	6c 89       	ldd	r22, Y+20	; 0x14
    3372:	7d 89       	ldd	r23, Y+21	; 0x15
    3374:	8e 89       	ldd	r24, Y+22	; 0x16
    3376:	9f 89       	ldd	r25, Y+23	; 0x17
    3378:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
    337c:	20 2f       	mov	r18, r16
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	40 e0       	ldi	r20, 0x00	; 0
    3382:	50 e0       	ldi	r21, 0x00	; 0
    3384:	e3 e0       	ldi	r30, 0x03	; 3
    3386:	22 0f       	add	r18, r18
    3388:	33 1f       	adc	r19, r19
    338a:	44 1f       	adc	r20, r20
    338c:	55 1f       	adc	r21, r21
    338e:	ea 95       	dec	r30
    3390:	d1 f7       	brne	.-12     	; 0x3386 <ReadInductance+0x3ca>
    3392:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
    3396:	f1 01       	movw	r30, r2
    3398:	ee 0f       	add	r30, r30
    339a:	ff 1f       	adc	r31, r31
    339c:	ee 0f       	add	r30, r30
    339e:	ff 1f       	adc	r31, r31
    33a0:	81 e0       	ldi	r24, 0x01	; 1
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	8c 0f       	add	r24, r28
    33a6:	9d 1f       	adc	r25, r29
    33a8:	e8 0f       	add	r30, r24
    33aa:	f9 1f       	adc	r31, r25
    33ac:	20 83       	st	Z, r18
    33ae:	31 83       	std	Z+1, r19	; 0x01
    33b0:	42 83       	std	Z+2, r20	; 0x02
    33b2:	53 83       	std	Z+3, r21	; 0x03
        if (((count&0x01) == 0) && (inductance[count] > (F_CPU/1000000))) {
    33b4:	ea 89       	ldd	r30, Y+18	; 0x12
    33b6:	fb 89       	ldd	r31, Y+19	; 0x13
    33b8:	30 97       	sbiw	r30, 0x00	; 0
    33ba:	91 f4       	brne	.+36     	; 0x33e0 <ReadInductance+0x424>
    33bc:	29 30       	cpi	r18, 0x09	; 9
    33be:	31 05       	cpc	r19, r1
    33c0:	41 05       	cpc	r20, r1
    33c2:	51 05       	cpc	r21, r1
    33c4:	68 f0       	brcs	.+26     	; 0x33e0 <ReadInductance+0x424>
           // transition is found, measurement with delayed counter start is not necessary
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
    33c6:	f1 01       	movw	r30, r2
    33c8:	31 96       	adiw	r30, 0x01	; 1
    33ca:	ee 0f       	add	r30, r30
    33cc:	ff 1f       	adc	r31, r31
    33ce:	ee 0f       	add	r30, r30
    33d0:	ff 1f       	adc	r31, r31
    33d2:	e8 0f       	add	r30, r24
    33d4:	f9 1f       	adc	r31, r25
    33d6:	20 83       	st	Z, r18
    33d8:	31 83       	std	Z+1, r19	; 0x01
    33da:	42 83       	std	Z+2, r20	; 0x02
    33dc:	53 83       	std	Z+3, r21	; 0x03
           count++;		// skip the delayed measurement
    33de:	f3 94       	inc	r15
        }
        wdt_reset();
    33e0:	a8 95       	wdr
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 21000) continue;
     // we can check for Inductance, if resistance is below 2800 Ohm
     for (count=0;count<4;count++) {
    33e2:	f3 94       	inc	r15
    33e4:	ff 2d       	mov	r31, r15
    33e6:	f4 30       	cpi	r31, 0x04	; 4
    33e8:	08 f4       	brcc	.+2      	; 0x33ec <ReadInductance+0x430>
    33ea:	2f ce       	rjmp	.-930    	; 0x304a <ReadInductance+0x8e>
    33ec:	2c 8c       	ldd	r2, Y+28	; 0x1c
    33ee:	3d 8c       	ldd	r3, Y+29	; 0x1d
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
           count++;		// skip the delayed measurement
        }
        wdt_reset();
     }  //end for count
     ADC_PORT = TXD_VAL;		// switch ADC Port to GND
    33f0:	28 e0       	ldi	r18, 0x08	; 8
    33f2:	28 b9       	out	0x08, r18	; 8
     wait_about20ms();
    33f4:	84 e0       	ldi	r24, 0x04	; 4
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
     if (inductance[1] > inductance[0]) {
    33fc:	2d 81       	ldd	r18, Y+5	; 0x05
    33fe:	3e 81       	ldd	r19, Y+6	; 0x06
    3400:	4f 81       	ldd	r20, Y+7	; 0x07
    3402:	58 85       	ldd	r21, Y+8	; 0x08
    3404:	89 81       	ldd	r24, Y+1	; 0x01
    3406:	9a 81       	ldd	r25, Y+2	; 0x02
    3408:	ab 81       	ldd	r26, Y+3	; 0x03
    340a:	bc 81       	ldd	r27, Y+4	; 0x04
    340c:	82 17       	cp	r24, r18
    340e:	93 07       	cpc	r25, r19
    3410:	a4 07       	cpc	r26, r20
    3412:	b5 07       	cpc	r27, r21
    3414:	80 f4       	brcc	.+32     	; 0x3436 <ReadInductance+0x47a>
        resis[found].lx = inductance[1];	// use value found with delayed counter start
    3416:	8b e0       	ldi	r24, 0x0B	; 11
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	28 9e       	mul	r2, r24
    341c:	f0 01       	movw	r30, r0
    341e:	29 9e       	mul	r2, r25
    3420:	f0 0d       	add	r31, r0
    3422:	38 9e       	mul	r3, r24
    3424:	f0 0d       	add	r31, r0
    3426:	11 24       	eor	r1, r1
    3428:	e8 5e       	subi	r30, 0xE8	; 232
    342a:	fe 4f       	sbci	r31, 0xFE	; 254
    342c:	24 83       	std	Z+4, r18	; 0x04
    342e:	35 83       	std	Z+5, r19	; 0x05
    3430:	46 83       	std	Z+6, r20	; 0x06
    3432:	57 83       	std	Z+7, r21	; 0x07
    3434:	0f c0       	rjmp	.+30     	; 0x3454 <ReadInductance+0x498>
     } else {
        resis[found].lx = inductance[0];
    3436:	2b e0       	ldi	r18, 0x0B	; 11
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	22 9e       	mul	r2, r18
    343c:	f0 01       	movw	r30, r0
    343e:	23 9e       	mul	r2, r19
    3440:	f0 0d       	add	r31, r0
    3442:	32 9e       	mul	r3, r18
    3444:	f0 0d       	add	r31, r0
    3446:	11 24       	eor	r1, r1
    3448:	e8 5e       	subi	r30, 0xE8	; 232
    344a:	fe 4f       	sbci	r31, 0xFE	; 254
    344c:	84 83       	std	Z+4, r24	; 0x04
    344e:	95 83       	std	Z+5, r25	; 0x05
    3450:	a6 83       	std	Z+6, r26	; 0x06
    3452:	b7 83       	std	Z+7, r27	; 0x07
     }
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];
    3454:	8d 85       	ldd	r24, Y+13	; 0x0d
    3456:	9e 85       	ldd	r25, Y+14	; 0x0e
    3458:	af 85       	ldd	r26, Y+15	; 0x0f
    345a:	b8 89       	ldd	r27, Y+16	; 0x10
    345c:	29 85       	ldd	r18, Y+9	; 0x09
    345e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3460:	4b 85       	ldd	r20, Y+11	; 0x0b
    3462:	5c 85       	ldd	r21, Y+12	; 0x0c
    3464:	28 17       	cp	r18, r24
    3466:	39 07       	cpc	r19, r25
    3468:	4a 07       	cpc	r20, r26
    346a:	5b 07       	cpc	r21, r27
    346c:	20 f4       	brcc	.+8      	; 0x3476 <ReadInductance+0x4ba>
    346e:	89 87       	std	Y+9, r24	; 0x09
    3470:	9a 87       	std	Y+10, r25	; 0x0a
    3472:	ab 87       	std	Y+11, r26	; 0x0b
    3474:	bc 87       	std	Y+12, r27	; 0x0c
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
    3476:	89 85       	ldd	r24, Y+9	; 0x09
    3478:	9a 85       	ldd	r25, Y+10	; 0x0a
    347a:	ab 85       	ldd	r26, Y+11	; 0x0b
    347c:	bc 85       	ldd	r27, Y+12	; 0x0c
    347e:	4b e0       	ldi	r20, 0x0B	; 11
    3480:	50 e0       	ldi	r21, 0x00	; 0
    3482:	24 9e       	mul	r2, r20
    3484:	f0 01       	movw	r30, r0
    3486:	25 9e       	mul	r2, r21
    3488:	f0 0d       	add	r31, r0
    348a:	34 9e       	mul	r3, r20
    348c:	f0 0d       	add	r31, r0
    348e:	11 24       	eor	r1, r1
    3490:	e8 5e       	subi	r30, 0xE8	; 232
    3492:	fe 4f       	sbci	r31, 0xFE	; 254
    3494:	24 81       	ldd	r18, Z+4	; 0x04
    3496:	35 81       	ldd	r19, Z+5	; 0x05
    3498:	46 81       	ldd	r20, Z+6	; 0x06
    349a:	57 81       	ldd	r21, Z+7	; 0x07
    349c:	82 17       	cp	r24, r18
    349e:	93 07       	cpc	r25, r19
    34a0:	a4 07       	cpc	r26, r20
    34a2:	b5 07       	cpc	r27, r21
    34a4:	20 f4       	brcc	.+8      	; 0x34ae <ReadInductance+0x4f2>
    34a6:	84 83       	std	Z+4, r24	; 0x04
    34a8:	95 83       	std	Z+5, r25	; 0x05
    34aa:	a6 83       	std	Z+6, r26	; 0x06
    34ac:	b7 83       	std	Z+7, r27	; 0x07


  if(PartFound != PART_RESISTOR) {
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
    34ae:	59 89       	ldd	r21, Y+17	; 0x11
    34b0:	5f 5f       	subi	r21, 0xFF	; 255
    34b2:	59 8b       	std	Y+17, r21	; 0x11
    34b4:	80 91 57 01 	lds	r24, 0x0157
    34b8:	99 89       	ldd	r25, Y+17	; 0x11
    34ba:	98 17       	cp	r25, r24
    34bc:	08 f4       	brcc	.+2      	; 0x34c0 <ReadInductance+0x504>
    34be:	9f cd       	rjmp	.-1218   	; 0x2ffe <ReadInductance+0x42>
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
  } // end loop for all resistors

  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    34c0:	88 e0       	ldi	r24, 0x08	; 8
    34c2:	87 b9       	out	0x07, r24	; 7
  R_DDR = 0;			// switch all resistor ports to input
    34c4:	14 b8       	out	0x04, r1	; 4
#endif
  return;
 } // end ReadInductance()
    34c6:	6e 96       	adiw	r28, 0x1e	; 30
    34c8:	0f b6       	in	r0, 0x3f	; 63
    34ca:	f8 94       	cli
    34cc:	de bf       	out	0x3e, r29	; 62
    34ce:	0f be       	out	0x3f, r0	; 63
    34d0:	cd bf       	out	0x3d, r28	; 61
    34d2:	cf 91       	pop	r28
    34d4:	df 91       	pop	r29
    34d6:	1f 91       	pop	r17
    34d8:	0f 91       	pop	r16
    34da:	ff 90       	pop	r15
    34dc:	ef 90       	pop	r14
    34de:	df 90       	pop	r13
    34e0:	cf 90       	pop	r12
    34e2:	bf 90       	pop	r11
    34e4:	af 90       	pop	r10
    34e6:	9f 90       	pop	r9
    34e8:	8f 90       	pop	r8
    34ea:	7f 90       	pop	r7
    34ec:	6f 90       	pop	r6
    34ee:	5f 90       	pop	r5
    34f0:	4f 90       	pop	r4
    34f2:	3f 90       	pop	r3
    34f4:	2f 90       	pop	r2
    34f6:	08 95       	ret

000034f8 <ReadADC>:
  uint16_t U_AVCC;		// Voltage of AVCC
} ADCconfig;
*/


unsigned int ReadADC (uint8_t Probe) {
    34f8:	df 92       	push	r13
    34fa:	ef 92       	push	r14
    34fc:	ff 92       	push	r15
    34fe:	0f 93       	push	r16
    3500:	1f 93       	push	r17
 unsigned int U; /* return value (mV) */
 uint8_t Samples; /* loop counter */
 unsigned long Value; /* ADC value */
 Probe |= (1 << REFS0); /* use internal reference anyway */
    3502:	18 2f       	mov	r17, r24
    3504:	10 64       	ori	r17, 0x40	; 64
#ifdef INHIBIT_SLEEP_MODE
// one dummy read of ADC, 112us
    ADCSRA |= (1 << ADSC); /* start conversion */
    while (ADCSRA & (1 << ADSC)); /* wait until conversion is done */
#else
    ADCSRA = (1<<ADEN) | (1<<ADIF) | (1<<ADIE) | AUTO_CLOCK_DIV; //enable ADC and Interrupt
    3506:	0e e9       	ldi	r16, 0x9E	; 158
 unsigned int U; /* return value (mV) */
 uint8_t Samples; /* loop counter */
 unsigned long Value; /* ADC value */
 Probe |= (1 << REFS0); /* use internal reference anyway */
sample:
 ADMUX = Probe; /* set input channel and U reference */
    3508:	10 93 7c 00 	sts	0x007C, r17
#ifdef AUTOSCALE_ADC
 /* if voltage reference changed run a dummy conversion */
// Samples = Probe & (1 << REFS1); /* get REFS1 bit flag */
// if (Samples != ADCconfig.RefFlag) {
 if ((Probe & (1 << REFS1)) != 0) {
    350c:	17 ff       	sbrs	r17, 7
    350e:	02 c0       	rjmp	.+4      	; 0x3514 <ReadADC+0x1c>
    // switch to 1.1V Reference
#ifdef NO_AREF_CAP
    wait100us(); /* time for voltage stabilization */
    3510:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <wait100us>
#ifdef INHIBIT_SLEEP_MODE
// one dummy read of ADC, 112us
    ADCSRA |= (1 << ADSC); /* start conversion */
    while (ADCSRA & (1 << ADSC)); /* wait until conversion is done */
#else
    ADCSRA = (1<<ADEN) | (1<<ADIF) | (1<<ADIE) | AUTO_CLOCK_DIV; //enable ADC and Interrupt
    3514:	00 93 7a 00 	sts	0x007A, r16
    set_sleep_mode(SLEEP_MODE_ADC);
    3518:	83 b7       	in	r24, 0x33	; 51
    351a:	81 7f       	andi	r24, 0xF1	; 241
    351c:	82 60       	ori	r24, 0x02	; 2
    351e:	83 bf       	out	0x33, r24	; 51
    sleep_mode();	/* Start ADC, return, if ADC has finished */
    3520:	83 b7       	in	r24, 0x33	; 51
    3522:	81 60       	ori	r24, 0x01	; 1
    3524:	83 bf       	out	0x33, r24	; 51
    3526:	88 95       	sleep
    3528:	83 b7       	in	r24, 0x33	; 51
    352a:	8e 7f       	andi	r24, 0xFE	; 254
    352c:	83 bf       	out	0x33, r24	; 51
#endif
 /* * sample ADC readings */
 Value = 0UL; /* reset sampling variable */
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	a9 01       	movw	r20, r18
 Samples = 0; /* number of samples to take */
    3534:	e0 e0       	ldi	r30, 0x00	; 0
 while (Samples < ADCconfig.Samples) /* take samples */ {
    3536:	2a c0       	rjmp	.+84     	; 0x358c <ReadADC+0x94>
#ifdef INHIBIT_SLEEP_MODE
    ADCSRA |= (1 << ADSC); /* start conversion */
    while (ADCSRA & (1 << ADSC)); /* wait until conversion is done */
#else
    ADCSRA = (1<<ADEN) | (1<<ADIF) | (1<<ADIE) | AUTO_CLOCK_DIV; //enable ADC and Interrupt
    3538:	00 93 7a 00 	sts	0x007A, r16
    set_sleep_mode(SLEEP_MODE_ADC);
    353c:	83 b7       	in	r24, 0x33	; 51
    353e:	81 7f       	andi	r24, 0xF1	; 241
    3540:	82 60       	ori	r24, 0x02	; 2
    3542:	83 bf       	out	0x33, r24	; 51
    sleep_mode();	/* Start ADC, return, if ADC has finished */
    3544:	83 b7       	in	r24, 0x33	; 51
    3546:	81 60       	ori	r24, 0x01	; 1
    3548:	83 bf       	out	0x33, r24	; 51
    354a:	88 95       	sleep
    354c:	83 b7       	in	r24, 0x33	; 51
    354e:	8e 7f       	andi	r24, 0xFE	; 254
    3550:	83 bf       	out	0x33, r24	; 51
#endif
    Value += ADCW; /* add ADC reading */
    3552:	60 91 78 00 	lds	r22, 0x0078
    3556:	70 91 79 00 	lds	r23, 0x0079
    355a:	80 e0       	ldi	r24, 0x00	; 0
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	26 0f       	add	r18, r22
    3560:	37 1f       	adc	r19, r23
    3562:	48 1f       	adc	r20, r24
    3564:	59 1f       	adc	r21, r25
#ifdef AUTOSCALE_ADC
    /* auto-switch voltage reference for low readings */
    if ((Samples == 4) && (ADCconfig.U_Bandgap > 255) && ((uint16_t)Value < 1024) && !(Probe & (1 << REFS1))) {
    3566:	e4 30       	cpi	r30, 0x04	; 4
    3568:	81 f4       	brne	.+32     	; 0x358a <ReadADC+0x92>
    356a:	60 91 3b 01 	lds	r22, 0x013B
    356e:	70 91 3c 01 	lds	r23, 0x013C
    3572:	6f 3f       	cpi	r22, 0xFF	; 255
    3574:	71 05       	cpc	r23, r1
    3576:	49 f0       	breq	.+18     	; 0x358a <ReadADC+0x92>
    3578:	40 f0       	brcs	.+16     	; 0x358a <ReadADC+0x92>
    357a:	84 e0       	ldi	r24, 0x04	; 4
    357c:	20 30       	cpi	r18, 0x00	; 0
    357e:	38 07       	cpc	r19, r24
    3580:	20 f4       	brcc	.+8      	; 0x358a <ReadADC+0x92>
    3582:	17 fd       	sbrc	r17, 7
    3584:	02 c0       	rjmp	.+4      	; 0x358a <ReadADC+0x92>
       Probe |= (1 << REFS1); /* select internal bandgap reference */
    3586:	10 68       	ori	r17, 0x80	; 128
#if PROCESSOR_TYP == 1280
       Probe &= ~(1 << REFS0);	/* ATmega640/1280/2560 1.1V Reference with REFS0=0 */
#endif
       goto sample; /* re-run sampling */
    3588:	bf cf       	rjmp	.-130    	; 0x3508 <ReadADC+0x10>
    }
#endif
    Samples++; /* one more done */
    358a:	ef 5f       	subi	r30, 0xFF	; 255
    sleep_mode();	/* Start ADC, return, if ADC has finished */
#endif
 /* * sample ADC readings */
 Value = 0UL; /* reset sampling variable */
 Samples = 0; /* number of samples to take */
 while (Samples < ADCconfig.Samples) /* take samples */ {
    358c:	d0 90 39 01 	lds	r13, 0x0139
    3590:	ed 15       	cp	r30, r13
    3592:	90 f2       	brcs	.-92     	; 0x3538 <ReadADC+0x40>
    Samples++; /* one more done */
 }
#ifdef AUTOSCALE_ADC
 /* * convert ADC reading to voltage * - single sample: U = ADC reading * U_ref / 1024 */
 /* get voltage of reference used */
 if (Probe & (1 << REFS1)) U = ADCconfig.U_Bandgap; /* bandgap reference */
    3594:	17 ff       	sbrs	r17, 7
    3596:	05 c0       	rjmp	.+10     	; 0x35a2 <ReadADC+0xaa>
    3598:	60 91 3b 01 	lds	r22, 0x013B
    359c:	70 91 3c 01 	lds	r23, 0x013C
    35a0:	04 c0       	rjmp	.+8      	; 0x35aa <ReadADC+0xb2>
 else U = ADCconfig.U_AVCC; /* Vcc reference */
    35a2:	60 91 3d 01 	lds	r22, 0x013D
    35a6:	70 91 3e 01 	lds	r23, 0x013E
#else
 U = ADCconfig.U_AVCC; /* Vcc reference */
#endif
 /* convert to voltage; */
 Value *= U; /* ADC readings * U_ref */
    35aa:	80 e0       	ldi	r24, 0x00	; 0
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
 Value /= 1023; /* / 1024 for 10bit ADC */
    35b2:	2f ef       	ldi	r18, 0xFF	; 255
    35b4:	33 e0       	ldi	r19, 0x03	; 3
    35b6:	40 e0       	ldi	r20, 0x00	; 0
    35b8:	50 e0       	ldi	r21, 0x00	; 0
    35ba:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
    35be:	79 01       	movw	r14, r18
    35c0:	8a 01       	movw	r16, r20
 /* de-sample to get average voltage */
 Value /= ADCconfig.Samples;
    35c2:	2d 2d       	mov	r18, r13
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	40 e0       	ldi	r20, 0x00	; 0
    35c8:	50 e0       	ldi	r21, 0x00	; 0
    35ca:	c8 01       	movw	r24, r16
    35cc:	b7 01       	movw	r22, r14
    35ce:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
 U = (unsigned int)Value;
 return U;
//   return ((unsigned int)(Value / (1023 * (unsigned long)ADCconfig.Samples)));
}
    35d2:	c9 01       	movw	r24, r18
    35d4:	1f 91       	pop	r17
    35d6:	0f 91       	pop	r16
    35d8:	ff 90       	pop	r15
    35da:	ef 90       	pop	r14
    35dc:	df 90       	pop	r13
    35de:	08 95       	ret

000035e0 <W5msReadADC>:
unsigned int W5msReadADC (uint8_t Probe) {
    35e0:	1f 93       	push	r17
    35e2:	18 2f       	mov	r17, r24
  wait_about5ms();
    35e4:	81 e0       	ldi	r24, 0x01	; 1
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
  return (ReadADC(Probe));
    35ec:	81 2f       	mov	r24, r17
    35ee:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
}
    35f2:	1f 91       	pop	r17
    35f4:	08 95       	ret

000035f6 <W10msReadADC>:
unsigned int W10msReadADC (uint8_t Probe) {
    35f6:	1f 93       	push	r17
    35f8:	18 2f       	mov	r17, r24
  wait_about10ms();
    35fa:	82 e0       	ldi	r24, 0x02	; 2
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
  return (ReadADC(Probe));
    3602:	81 2f       	mov	r24, r17
    3604:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
}
    3608:	1f 91       	pop	r17
    360a:	08 95       	ret

0000360c <W20msReadADC>:
unsigned int W20msReadADC (uint8_t Probe) {
    360c:	1f 93       	push	r17
    360e:	18 2f       	mov	r17, r24
  wait_about20ms();
    3610:	84 e0       	ldi	r24, 0x04	; 4
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	0e 94 37 03 	call	0x66e	; 0x66e <sleep_5ms>
  return (ReadADC(Probe));
    3618:	81 2f       	mov	r24, r17
    361a:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <ReadADC>
}
    361e:	1f 91       	pop	r17
    3620:	08 95       	ret

00003622 <GetESR>:
  #define StartADCwait() ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; /* enable ADC and start */\
    while (ADCSRA & (1 << ADSC))  /* wait until conversion is done */
#endif

//=================================================================
void GetESR() {
    3622:	2f 92       	push	r2
    3624:	3f 92       	push	r3
    3626:	4f 92       	push	r4
    3628:	5f 92       	push	r5
    362a:	6f 92       	push	r6
    362c:	7f 92       	push	r7
    362e:	8f 92       	push	r8
    3630:	9f 92       	push	r9
    3632:	af 92       	push	r10
    3634:	bf 92       	push	r11
    3636:	cf 92       	push	r12
    3638:	df 92       	push	r13
    363a:	ef 92       	push	r14
    363c:	ff 92       	push	r15
    363e:	0f 93       	push	r16
    3640:	1f 93       	push	r17
    3642:	df 93       	push	r29
    3644:	cf 93       	push	r28
    3646:	cd b7       	in	r28, 0x3d	; 61
    3648:	de b7       	in	r29, 0x3e	; 62
    364a:	62 97       	sbiw	r28, 0x12	; 18
    364c:	0f b6       	in	r0, 0x3f	; 63
    364e:	f8 94       	cli
    3650:	de bf       	out	0x3e, r29	; 62
    3652:	0f be       	out	0x3f, r0	; 63
    3654:	cd bf       	out	0x3d, r28	; 61
#endif

   if (sumvolt[1] > sumvolt[0]) {
      sumvolt[1] -= sumvolt[0];		// difference HighPin - LowPin Voltage with current
   } else {
      sumvolt[1] = 0;
    3656:	20 91 5f 01 	lds	r18, 0x015F
    365a:	30 91 60 01 	lds	r19, 0x0160
    365e:	40 91 61 01 	lds	r20, 0x0161
    3662:	50 91 62 01 	lds	r21, 0x0162
    3666:	10 91 6c 01 	lds	r17, 0x016C
  uint8_t ii,jj;		// tempory values
  uint8_t SelectLowPin,SelectHighPin;
  int8_t esr0;			// used for ESR zero correction

  while (cap.cpre_max < -9) { // set cval to nF unit
      cap.cval_max /= 10;		// reduce value by factor ten
    366a:	6a e0       	ldi	r22, 0x0A	; 10
    366c:	a6 2e       	mov	r10, r22
    366e:	b1 2c       	mov	r11, r1
    3670:	c1 2c       	mov	r12, r1
    3672:	d1 2c       	mov	r13, r1
  uint8_t LoADC;		// used to switch Lowpin directly to GND or VCC
  uint8_t ii,jj;		// tempory values
  uint8_t SelectLowPin,SelectHighPin;
  int8_t esr0;			// used for ESR zero correction

  while (cap.cpre_max < -9) { // set cval to nF unit
    3674:	07 c0       	rjmp	.+14     	; 0x3684 <GetESR+0x62>
      cap.cval_max /= 10;		// reduce value by factor ten
    3676:	ca 01       	movw	r24, r20
    3678:	b9 01       	movw	r22, r18
    367a:	a6 01       	movw	r20, r12
    367c:	95 01       	movw	r18, r10
    367e:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
    3682:	1f 5f       	subi	r17, 0xFF	; 255
  uint8_t LoADC;		// used to switch Lowpin directly to GND or VCC
  uint8_t ii,jj;		// tempory values
  uint8_t SelectLowPin,SelectHighPin;
  int8_t esr0;			// used for ESR zero correction

  while (cap.cpre_max < -9) { // set cval to nF unit
    3684:	17 3f       	cpi	r17, 0xF7	; 247
    3686:	bc f3       	brlt	.-18     	; 0x3676 <GetESR+0x54>
    3688:	20 93 5f 01 	sts	0x015F, r18
    368c:	30 93 60 01 	sts	0x0160, r19
    3690:	40 93 61 01 	sts	0x0161, r20
    3694:	50 93 62 01 	sts	0x0162, r21
    3698:	10 93 6c 01 	sts	0x016C, r17
      cap.cval_max /= 10;		// reduce value by factor ten
      cap.cpre_max++;		// take next decimal prefix
  }
  if (cap.cval_max < 1800) return;			//capacity lower than 1.8 uF
    369c:	28 30       	cpi	r18, 0x08	; 8
    369e:	67 e0       	ldi	r22, 0x07	; 7
    36a0:	36 07       	cpc	r19, r22
    36a2:	60 e0       	ldi	r22, 0x00	; 0
    36a4:	46 07       	cpc	r20, r22
    36a6:	60 e0       	ldi	r22, 0x00	; 0
    36a8:	56 07       	cpc	r21, r22
    36aa:	08 f4       	brcc	.+2      	; 0x36ae <GetESR+0x8c>
    36ac:	dd c1       	rjmp	.+954    	; 0x3a68 <GetESR+0x446>
  lcd_fix_string(ESR_str);		// " ESR="
    36ae:	82 ea       	ldi	r24, 0xA2	; 162
    36b0:	91 e0       	ldi	r25, 0x01	; 1
    36b2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_fix_string>
  LoADC = MEM_read_byte(&PinADCtab[cap.ca]) | TXD_MSK;
    36b6:	d0 90 69 01 	lds	r13, 0x0169
    36ba:	0d 2d       	mov	r16, r13
    36bc:	10 e0       	ldi	r17, 0x00	; 0
    36be:	c8 01       	movw	r24, r16
    36c0:	88 5a       	subi	r24, 0xA8	; 168
    36c2:	9d 4f       	sbci	r25, 0xFD	; 253
    36c4:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__eerd_byte_m328>
    36c8:	28 e0       	ldi	r18, 0x08	; 8
    36ca:	82 2e       	mov	r8, r18
    36cc:	88 2a       	or	r8, r24
  HiADC = MEM_read_byte(&PinADCtab[cap.cb]) | TXD_MSK;
    36ce:	60 90 6a 01 	lds	r6, 0x016A
    36d2:	e6 2c       	mov	r14, r6
    36d4:	ff 24       	eor	r15, r15
    36d6:	c7 01       	movw	r24, r14
    36d8:	88 5a       	subi	r24, 0xA8	; 168
    36da:	9d 4f       	sbci	r25, 0xFD	; 253
    36dc:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__eerd_byte_m328>
    36e0:	98 e0       	ldi	r25, 0x08	; 8
    36e2:	79 2e       	mov	r7, r25
    36e4:	78 2a       	or	r7, r24
  LoPinR_L = MEM_read_byte(&PinRLtab[cap.ca]);  //R_L mask for LowPin R_L load
    36e6:	c8 01       	movw	r24, r16
    36e8:	8b 5a       	subi	r24, 0xAB	; 171
    36ea:	9d 4f       	sbci	r25, 0xFD	; 253
    36ec:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__eerd_byte_m328>
    36f0:	98 2e       	mov	r9, r24
  HiPinR_L = MEM_read_byte(&PinRLtab[cap.cb]);	//R_L mask for HighPin R_L load
    36f2:	c7 01       	movw	r24, r14
    36f4:	8b 5a       	subi	r24, 0xAB	; 171
    36f6:	9d 4f       	sbci	r25, 0xFD	; 253
    36f8:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__eerd_byte_m328>
    36fc:	b8 2e       	mov	r11, r24
#if PROCESSOR_TYP == 1280
    /* ATmega640/1280/2560 1.1V Reference with REFS0=0 */
  SelectLowPin = (cap.ca | (1<<REFS1) | (0<<REFS0));	// switch ADC to LowPin, Internal Ref. 
  SelectHighPin = (cap.cb | (1<<REFS1) | (0<<REFS0));	// switch ADC to HighPin, Internal Ref. 
#else
  SelectLowPin = (cap.ca | (1<<REFS1) | (1<<REFS0));	// switch ADC to LowPin, Internal Ref. 
    36fe:	70 ec       	ldi	r23, 0xC0	; 192
    3700:	d7 2a       	or	r13, r23
  SelectHighPin = (cap.cb | (1<<REFS1) | (1<<REFS0));	// switch ADC to HighPin, Internal Ref. 
    3702:	67 2a       	or	r6, r23
// Measurement of ESR of capacitors AC Mode
   sumvolt[0] = 1;		// set sum of LowPin voltage to 1 to prevent divide by zero
   sumvolt[1] = 1;		// clear sum of HighPin voltage with current
                                // offset is about (x*10*200)/34000 in 0.01 Ohm units
   sumvolt[2] = 0;		// clear sum of HighPin voltage without current
   EntladePins();		// discharge capacitor
    3704:	0e 94 48 01 	call	0x290	; 0x290 <EntladePins>
   ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    3708:	88 e0       	ldi	r24, 0x08	; 8
    370a:	88 b9       	out	0x08, r24	; 8
   ADMUX = SelectLowPin;	// set Mux input and Voltage Reference to internal 1.1V
    370c:	d0 92 7c 00 	sts	0x007C, r13
#ifdef NO_AREF_CAP
   wait100us();			/* time for voltage stabilization */
    3710:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <wait100us>
  SelectHighPin = (cap.cb | (1<<REFS1) | (1<<REFS0));	// switch ADC to HighPin, Internal Ref. 
#endif


// Measurement of ESR of capacitors AC Mode
   sumvolt[0] = 1;		// set sum of LowPin voltage to 1 to prevent divide by zero
    3714:	b1 e0       	ldi	r27, 0x01	; 1
    3716:	eb 2e       	mov	r14, r27
    3718:	f1 2c       	mov	r15, r1
    371a:	01 2d       	mov	r16, r1
    371c:	11 2d       	mov	r17, r1
   sumvolt[1] = 1;		// clear sum of HighPin voltage with current
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	a0 e0       	ldi	r26, 0x00	; 0
    3724:	b0 e0       	ldi	r27, 0x00	; 0
    3726:	89 83       	std	Y+1, r24	; 0x01
    3728:	9a 83       	std	Y+2, r25	; 0x02
    372a:	ab 83       	std	Y+3, r26	; 0x03
    372c:	bc 83       	std	Y+4, r27	; 0x04
                                // offset is about (x*10*200)/34000 in 0.01 Ohm units
   sumvolt[2] = 0;		// clear sum of HighPin voltage without current
    372e:	1d 82       	std	Y+5, r1	; 0x05
    3730:	1e 82       	std	Y+6, r1	; 0x06
    3732:	1f 82       	std	Y+7, r1	; 0x07
    3734:	18 86       	std	Y+8, r1	; 0x08
#endif

// measurement frequency is given by sum of ADC-Reads < 680 Hz
   // ADC Sample and Hold (SH) is done 1.5 ADC clock number after real start of conversion.
   // Real ADC-conversion is started with the next ADC-Clock (125kHz) after setting the ADSC bit.
   for(ii=0;ii<MAX_CNT;ii++) {
    3736:	cc 24       	eor	r12, r12
      ADC_DDR = LoADC;				// switch Low-Pin to output (GND)
      ADMUX = SelectLowPin;
      StartADCwait();				// set ADCSRA Interrupt Mode, sleep
    3738:	a6 ed       	ldi	r26, 0xD6	; 214
    373a:	aa 2e       	mov	r10, r26

// measurement frequency is given by sum of ADC-Reads < 680 Hz
   // ADC Sample and Hold (SH) is done 1.5 ADC clock number after real start of conversion.
   // Real ADC-conversion is started with the next ADC-Clock (125kHz) after setting the ADSC bit.
   for(ii=0;ii<MAX_CNT;ii++) {
      ADC_DDR = LoADC;				// switch Low-Pin to output (GND)
    373c:	87 b8       	out	0x07, r8	; 7
      ADMUX = SelectLowPin;
    373e:	d0 92 7c 00 	sts	0x007C, r13
      StartADCwait();				// set ADCSRA Interrupt Mode, sleep
    3742:	a0 92 7a 00 	sts	0x007A, r10
    3746:	80 91 7a 00 	lds	r24, 0x007A
    374a:	86 fd       	sbrc	r24, 6
    374c:	fc cf       	rjmp	.-8      	; 0x3746 <GetESR+0x124>
      while (1) {
         R_PORT = HiPinR_L;			// switch R-Port to VCC
    374e:	b5 b8       	out	0x05, r11	; 5
         R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (VCC)
    3750:	b4 b8       	out	0x04, r11	; 4
         ADMUX = SelectLowPin;
    3752:	d0 92 7c 00 	sts	0x007C, r13
         StartADCwait();			// set ADCSRA Interrupt Mode, sleep
    3756:	a0 92 7a 00 	sts	0x007A, r10
    375a:	80 91 7a 00 	lds	r24, 0x007A
    375e:	86 fd       	sbrc	r24, 6
    3760:	fc cf       	rjmp	.-8      	; 0x375a <GetESR+0x138>
         StartADCwait();			// set ADCSRA Interrupt Mode, sleep
    3762:	a0 92 7a 00 	sts	0x007A, r10
    3766:	80 91 7a 00 	lds	r24, 0x007A
    376a:	86 fd       	sbrc	r24, 6
    376c:	fc cf       	rjmp	.-8      	; 0x3766 <GetESR+0x144>
         adcv[0] = ADCW;			// Voltage LowPin with current
    376e:	20 90 78 00 	lds	r2, 0x0078
    3772:	30 90 79 00 	lds	r3, 0x0079
         ADMUX = SelectHighPin;
    3776:	60 92 7c 00 	sts	0x007C, r6
         StartADCwait();			// ADCSRA = (1<<ADEN) | (1<<ADIF) | (1<<ADIE) | AUTO_CLOCK_DIV;	
    377a:	a0 92 7a 00 	sts	0x007A, r10
    377e:	80 91 7a 00 	lds	r24, 0x007A
    3782:	86 fd       	sbrc	r24, 6
    3784:	fc cf       	rjmp	.-8      	; 0x377e <GetESR+0x15c>
//         ADCSRA |= (1<<ADSC);			// Start Conversion, real start is next rising edge of ADC clock
         ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; // enable ADC and start with ADSC
    3786:	a0 92 7a 00 	sts	0x007A, r10
         wait10us();				// SH at 2.5 ADC clocks behind start = 20 us
    378a:	0e 94 80 14 	call	0x2900	; 0x2900 <wait10us>
         wait5us();			
    378e:	0e 94 81 14 	call	0x2902	; 0x2902 <wait5us>
         wdt_reset();	/* 20.1875us + */
         wdt_reset();	/* 20.250 us + */
 #endif
#else
 #if F_CPU == 8000000UL
         wait4us();				// with only 18 us delay the voltage goes down before SH
    3792:	0e 94 82 14 	call	0x2904	; 0x2904 <wait4us>
//         wdt_reset();	/* 19.75  us - */
//         wdt_reset();	/* 19.875 us - */
//         wdt_reset();	/* 20.0   us - */
//         wdt_reset();	/* 20.125 us + (1.1 , 0.63) */
//         wdt_reset();	/* 20.25  us + (1.0 , 0.60) */
           wdt_reset(); /* 20.375 us + */
    3796:	a8 95       	wdr
#endif
//         wdt_reset();				// with wdt_reset the timing can be adjusted,
						// when time is too short, voltage is down before SH of ADC
						// when time is too long, capacitor will be overloaded.
						// That will cause too high voltage without current.
         R_DDR = 0;				// switch current off,  SH is 1.5 ADC clock behind real start
    3798:	14 b8       	out	0x04, r1	; 4
         R_PORT = 0;
    379a:	15 b8       	out	0x05, r1	; 5
         while (ADCSRA&(1<<ADSC));		// wait for conversion finished
    379c:	80 91 7a 00 	lds	r24, 0x007A
    37a0:	86 fd       	sbrc	r24, 6
    37a2:	fc cf       	rjmp	.-8      	; 0x379c <GetESR+0x17a>
         adcv[1] = ADCW;			// Voltage HighPin with current
    37a4:	20 91 78 00 	lds	r18, 0x0078
    37a8:	30 91 79 00 	lds	r19, 0x0079
         StartADCwait();			// set ADCSRA Interrupt Mode, sleep
    37ac:	a0 92 7a 00 	sts	0x007A, r10
    37b0:	80 91 7a 00 	lds	r24, 0x007A
    37b4:	86 fd       	sbrc	r24, 6
    37b6:	fc cf       	rjmp	.-8      	; 0x37b0 <GetESR+0x18e>
         StartADCwait();			// set ADCSRA Interrupt Mode, sleep
    37b8:	a0 92 7a 00 	sts	0x007A, r10
    37bc:	80 91 7a 00 	lds	r24, 0x007A
    37c0:	86 fd       	sbrc	r24, 6
    37c2:	fc cf       	rjmp	.-8      	; 0x37bc <GetESR+0x19a>
         adcv[2] = ADCW;			// Voltage HighPin without current
    37c4:	80 91 78 00 	lds	r24, 0x0078
    37c8:	90 91 79 00 	lds	r25, 0x0079
         if (adcv[2] > 2) break;		// at least more than two digits required
    37cc:	83 30       	cpi	r24, 0x03	; 3
    37ce:	91 05       	cpc	r25, r1
    37d0:	10 f4       	brcc	.+4      	; 0x37d6 <GetESR+0x1b4>
         wdt_reset();
    37d2:	a8 95       	wdr
      } // end while (1)
    37d4:	bc cf       	rjmp	.-136    	; 0x374e <GetESR+0x12c>
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
    37d6:	44 24       	eor	r4, r4
    37d8:	55 24       	eor	r5, r5
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    37da:	a9 01       	movw	r20, r18
    37dc:	60 e0       	ldi	r22, 0x00	; 0
    37de:	70 e0       	ldi	r23, 0x00	; 0
    37e0:	49 87       	std	Y+9, r20	; 0x09
    37e2:	5a 87       	std	Y+10, r21	; 0x0a
    37e4:	6b 87       	std	Y+11, r22	; 0x0b
    37e6:	7c 87       	std	Y+12, r23	; 0x0c
      sumvolt[2] += adcv[2]; 			// capacitor voltage without current
    37e8:	9c 01       	movw	r18, r24
    37ea:	40 e0       	ldi	r20, 0x00	; 0
    37ec:	50 e0       	ldi	r21, 0x00	; 0
    37ee:	2d 87       	std	Y+13, r18	; 0x0d
    37f0:	3e 87       	std	Y+14, r19	; 0x0e
    37f2:	4f 87       	std	Y+15, r20	; 0x0f
    37f4:	58 8b       	std	Y+16, r21	; 0x10
      /* ********* Reverse direction, connect High side with GND *********** */
      ADC_DDR = HiADC;				// switch High Pin to GND
    37f6:	77 b8       	out	0x07, r7	; 7
      StartADCwait();				// set ADCSRA Interrupt Mode, sleep
    37f8:	a0 92 7a 00 	sts	0x007A, r10
    37fc:	80 91 7a 00 	lds	r24, 0x007A
    3800:	86 fd       	sbrc	r24, 6
    3802:	fc cf       	rjmp	.-8      	; 0x37fc <GetESR+0x1da>
      while (1) {
         R_PORT = LoPinR_L;
    3804:	95 b8       	out	0x05, r9	; 5
         R_DDR = LoPinR_L;			// switch LowPin with 680 Ohm to VCC
    3806:	94 b8       	out	0x04, r9	; 4
         wdt_reset();
    3808:	a8 95       	wdr
         ADMUX = SelectHighPin;
    380a:	60 92 7c 00 	sts	0x007C, r6
         StartADCwait();			// set ADCSRA Interrupt Mode, sleep
    380e:	a0 92 7a 00 	sts	0x007A, r10
    3812:	80 91 7a 00 	lds	r24, 0x007A
    3816:	86 fd       	sbrc	r24, 6
    3818:	fc cf       	rjmp	.-8      	; 0x3812 <GetESR+0x1f0>
         StartADCwait();			// set ADCSRA Interrupt Mode, sleep
    381a:	a0 92 7a 00 	sts	0x007A, r10
    381e:	80 91 7a 00 	lds	r24, 0x007A
    3822:	86 fd       	sbrc	r24, 6
    3824:	fc cf       	rjmp	.-8      	; 0x381e <GetESR+0x1fc>
         adcv[0] = ADCW;			// Voltage HighPin with current
    3826:	80 91 78 00 	lds	r24, 0x0078
    382a:	90 91 79 00 	lds	r25, 0x0079
         ADMUX = SelectLowPin;
    382e:	d0 92 7c 00 	sts	0x007C, r13
         StartADCwait();			// set ADCSRA Interrupt Mode, sleep
    3832:	a0 92 7a 00 	sts	0x007A, r10
    3836:	9c 01       	movw	r18, r24
    3838:	80 91 7a 00 	lds	r24, 0x007A
    383c:	86 fd       	sbrc	r24, 6
    383e:	fc cf       	rjmp	.-8      	; 0x3838 <GetESR+0x216>
    3840:	c9 01       	movw	r24, r18
//         ADCSRA |= (1<<ADSC);			// Start Conversion, real start is next rising edge of ADC clock
         ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; // enable ADC and start with ADSC
    3842:	a0 92 7a 00 	sts	0x007A, r10
         wait10us();				// 2.5 ADC clocks = 20 us
    3846:	29 8b       	std	Y+17, r18	; 0x11
    3848:	9a 8b       	std	Y+18, r25	; 0x12
    384a:	0e 94 80 14 	call	0x2900	; 0x2900 <wait10us>
         wait5us();			
    384e:	0e 94 81 14 	call	0x2902	; 0x2902 <wait5us>
         wdt_reset();	/* 20.1875us + */
         wdt_reset();	/* 20.250 us + */
 #endif
#else
 #if F_CPU == 8000000UL
         wait4us();				// with only 18 us delay the voltage goes down before SH
    3852:	0e 94 82 14 	call	0x2904	; 0x2904 <wait4us>
//         wdt_reset();	/* 19.75  us - */
//         wdt_reset();	/* 19.875 us - */
//         wdt_reset();	/* 20.0   us - */
//         wdt_reset();	/* 20.125 us + */
//         wdt_reset();	/* 20.25  us + */
           wdt_reset(); /* 20.375 us + */
    3856:	a8 95       	wdr
#endif
//         wdt_reset();				// with wdt_reset the timing can be adjusted,
						// when time is too short, voltage is down before SH of ADC
						// when time is too long, capacitor will be overloaded.
						// That will cause too high voltage without current.
         R_DDR = 0;				// switch current off, SH is 1.5 ADC clock ticks behind real start
    3858:	14 b8       	out	0x04, r1	; 4
         R_PORT = 0;
    385a:	15 b8       	out	0x05, r1	; 5
    385c:	89 89       	ldd	r24, Y+17	; 0x11
    385e:	9a 89       	ldd	r25, Y+18	; 0x12
    3860:	9c 01       	movw	r18, r24
         while (ADCSRA&(1<<ADSC));		// wait for conversion finished
    3862:	80 91 7a 00 	lds	r24, 0x007A
    3866:	86 fd       	sbrc	r24, 6
    3868:	fc cf       	rjmp	.-8      	; 0x3862 <GetESR+0x240>
         adcv[1] = ADCW;			//  Voltage LowPin with current
    386a:	40 91 78 00 	lds	r20, 0x0078
    386e:	50 91 79 00 	lds	r21, 0x0079
//          ADMUX = SelectLowPin;
         StartADCwait();			// set ADCSRA Interrupt Mode, sleep
    3872:	a0 92 7a 00 	sts	0x007A, r10
    3876:	80 91 7a 00 	lds	r24, 0x007A
    387a:	86 fd       	sbrc	r24, 6
    387c:	fc cf       	rjmp	.-8      	; 0x3876 <GetESR+0x254>
         StartADCwait();			// set ADCSRA Interrupt Mode, sleep
    387e:	a0 92 7a 00 	sts	0x007A, r10
    3882:	80 91 7a 00 	lds	r24, 0x007A
    3886:	86 fd       	sbrc	r24, 6
    3888:	fc cf       	rjmp	.-8      	; 0x3882 <GetESR+0x260>
    388a:	c9 01       	movw	r24, r18
         adcv[2] = ADCW;			// Voltage LowPin without current
    388c:	20 91 78 00 	lds	r18, 0x0078
    3890:	30 91 79 00 	lds	r19, 0x0079
         if (adcv[2] > 2) break;		// at least more than two digits required
    3894:	23 30       	cpi	r18, 0x03	; 3
    3896:	31 05       	cpc	r19, r1
    3898:	10 f4       	brcc	.+4      	; 0x389e <GetESR+0x27c>
         wdt_reset();
    389a:	a8 95       	wdr
      } // end while (1)
    389c:	b3 cf       	rjmp	.-154    	; 0x3804 <GetESR+0x1e2>
      R_DDR = 0;				// switch current off
    389e:	14 b8       	out	0x04, r1	; 4
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
    38a0:	a0 e0       	ldi	r26, 0x00	; 0
    38a2:	b0 e0       	ldi	r27, 0x00	; 0
         StartADCwait();			// set ADCSRA Interrupt Mode, sleep
         adcv[2] = ADCW;			// Voltage HighPin without current
         if (adcv[2] > 2) break;		// at least more than two digits required
         wdt_reset();
      } // end while (1)
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
    38a4:	82 0d       	add	r24, r2
    38a6:	93 1d       	adc	r25, r3
    38a8:	a4 1d       	adc	r26, r4
    38aa:	b5 1d       	adc	r27, r5
         adcv[2] = ADCW;			// Voltage LowPin without current
         if (adcv[2] > 2) break;		// at least more than two digits required
         wdt_reset();
      } // end while (1)
      R_DDR = 0;				// switch current off
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
    38ac:	e8 0e       	add	r14, r24
    38ae:	f9 1e       	adc	r15, r25
    38b0:	0a 1f       	adc	r16, r26
    38b2:	1b 1f       	adc	r17, r27
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    38b4:	ca 01       	movw	r24, r20
    38b6:	a0 e0       	ldi	r26, 0x00	; 0
    38b8:	b0 e0       	ldi	r27, 0x00	; 0
         adcv[2] = ADCW;			// Voltage HighPin without current
         if (adcv[2] > 2) break;		// at least more than two digits required
         wdt_reset();
      } // end while (1)
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    38ba:	49 85       	ldd	r20, Y+9	; 0x09
    38bc:	5a 85       	ldd	r21, Y+10	; 0x0a
    38be:	6b 85       	ldd	r22, Y+11	; 0x0b
    38c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    38c2:	84 0f       	add	r24, r20
    38c4:	95 1f       	adc	r25, r21
    38c6:	a6 1f       	adc	r26, r22
    38c8:	b7 1f       	adc	r27, r23
         if (adcv[2] > 2) break;		// at least more than two digits required
         wdt_reset();
      } // end while (1)
      R_DDR = 0;				// switch current off
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    38ca:	49 81       	ldd	r20, Y+1	; 0x01
    38cc:	5a 81       	ldd	r21, Y+2	; 0x02
    38ce:	6b 81       	ldd	r22, Y+3	; 0x03
    38d0:	7c 81       	ldd	r23, Y+4	; 0x04
    38d2:	48 0f       	add	r20, r24
    38d4:	59 1f       	adc	r21, r25
    38d6:	6a 1f       	adc	r22, r26
    38d8:	7b 1f       	adc	r23, r27
    38da:	49 83       	std	Y+1, r20	; 0x01
    38dc:	5a 83       	std	Y+2, r21	; 0x02
    38de:	6b 83       	std	Y+3, r22	; 0x03
    38e0:	7c 83       	std	Y+4, r23	; 0x04
      sumvolt[2] += adcv[2];			// add  HighPin voltages without current
    38e2:	c9 01       	movw	r24, r18
    38e4:	a0 e0       	ldi	r26, 0x00	; 0
    38e6:	b0 e0       	ldi	r27, 0x00	; 0
         if (adcv[2] > 2) break;		// at least more than two digits required
         wdt_reset();
      } // end while (1)
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
      sumvolt[2] += adcv[2]; 			// capacitor voltage without current
    38e8:	2d 85       	ldd	r18, Y+13	; 0x0d
    38ea:	3e 85       	ldd	r19, Y+14	; 0x0e
    38ec:	4f 85       	ldd	r20, Y+15	; 0x0f
    38ee:	58 89       	ldd	r21, Y+16	; 0x10
    38f0:	82 0f       	add	r24, r18
    38f2:	93 1f       	adc	r25, r19
    38f4:	a4 1f       	adc	r26, r20
    38f6:	b5 1f       	adc	r27, r21
         wdt_reset();
      } // end while (1)
      R_DDR = 0;				// switch current off
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
      sumvolt[2] += adcv[2];			// add  HighPin voltages without current
    38f8:	4d 81       	ldd	r20, Y+5	; 0x05
    38fa:	5e 81       	ldd	r21, Y+6	; 0x06
    38fc:	6f 81       	ldd	r22, Y+7	; 0x07
    38fe:	78 85       	ldd	r23, Y+8	; 0x08
    3900:	48 0f       	add	r20, r24
    3902:	59 1f       	adc	r21, r25
    3904:	6a 1f       	adc	r22, r26
    3906:	7b 1f       	adc	r23, r27
    3908:	4d 83       	std	Y+5, r20	; 0x05
    390a:	5e 83       	std	Y+6, r21	; 0x06
    390c:	6f 83       	std	Y+7, r22	; 0x07
    390e:	78 87       	std	Y+8, r23	; 0x08
#endif

// measurement frequency is given by sum of ADC-Reads < 680 Hz
   // ADC Sample and Hold (SH) is done 1.5 ADC clock number after real start of conversion.
   // Real ADC-conversion is started with the next ADC-Clock (125kHz) after setting the ADSC bit.
   for(ii=0;ii<MAX_CNT;ii++) {
    3910:	c3 94       	inc	r12
    3912:	5c 2d       	mov	r21, r12
    3914:	50 38       	cpi	r21, 0x80	; 128
    3916:	09 f0       	breq	.+2      	; 0x391a <GetESR+0x2f8>
    3918:	11 cf       	rjmp	.-478    	; 0x373c <GetESR+0x11a>
   // HighPin Voltage, which is usually 2 * 14 * 8 us = 224 us.
   // With the loading of the capacitor the current will sink, so we get a too high voltage at
   // the LowPin. The velocity of degration is inversely proportional to time constant (represented by capacity value).
   // Time constant for 1uF & 720 Ohm is 720us
//   sumvolt[0] -= (sumvolt[0] * 150UL)  / cap.cval_max;	// Version 1.04k
   sumvolt[0] -= (sumvolt[0] * 345UL)  / cap.cval_max;
    391a:	c8 01       	movw	r24, r16
    391c:	b7 01       	movw	r22, r14
    391e:	29 e5       	ldi	r18, 0x59	; 89
    3920:	31 e0       	ldi	r19, 0x01	; 1
    3922:	40 e0       	ldi	r20, 0x00	; 0
    3924:	50 e0       	ldi	r21, 0x00	; 0
    3926:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
    392a:	20 91 5f 01 	lds	r18, 0x015F
    392e:	30 91 60 01 	lds	r19, 0x0160
    3932:	40 91 61 01 	lds	r20, 0x0161
    3936:	50 91 62 01 	lds	r21, 0x0162
    393a:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
    393e:	37 01       	movw	r6, r14
    3940:	48 01       	movw	r8, r16
    3942:	62 1a       	sub	r6, r18
    3944:	73 0a       	sbc	r7, r19
    3946:	84 0a       	sbc	r8, r20
    3948:	95 0a       	sbc	r9, r21
   lcd_line3();
   DisplayValue(sumvolt[1],0,'H',4);	// HighPin
   lcd_data(' ');
#endif

   esr0 = (int8_t)eeprom_read_byte(&EE_ESR_ZERO);
    394a:	80 e7       	ldi	r24, 0x70	; 112
    394c:	92 e0       	ldi	r25, 0x02	; 2
    394e:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <__eerd_byte_m328>
    3952:	28 2e       	mov	r2, r24
//   sumvolt[0] += (((long)sumvolt[0] * esr0) / ((RR680MI - R_L_VAL) * 10)); // subtract 0.23 Ohm from ESR, Vers. 1.04k
   sumvolt[2] += (((long)sumvolt[0] * esr0) / ((RR680MI - R_L_VAL) * 10)); // subtract 0.23 Ohm from ESR
    3954:	40 90 02 01 	lds	r4, 0x0102
    3958:	50 90 03 01 	lds	r5, 0x0103
    395c:	68 2f       	mov	r22, r24
    395e:	77 27       	eor	r23, r23
    3960:	67 fd       	sbrc	r22, 7
    3962:	70 95       	com	r23
    3964:	87 2f       	mov	r24, r23
    3966:	97 2f       	mov	r25, r23
    3968:	a4 01       	movw	r20, r8
    396a:	93 01       	movw	r18, r6
    396c:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
    3970:	92 01       	movw	r18, r4
    3972:	22 0f       	add	r18, r18
    3974:	33 1f       	adc	r19, r19
    3976:	a2 01       	movw	r20, r4
    3978:	e3 e0       	ldi	r30, 0x03	; 3
    397a:	44 0f       	add	r20, r20
    397c:	55 1f       	adc	r21, r21
    397e:	ea 95       	dec	r30
    3980:	e1 f7       	brne	.-8      	; 0x397a <GetESR+0x358>
    3982:	24 0f       	add	r18, r20
    3984:	35 1f       	adc	r19, r21
    3986:	20 5a       	subi	r18, 0xA0	; 160
    3988:	39 40       	sbci	r19, 0x09	; 9
    398a:	40 e0       	ldi	r20, 0x00	; 0
    398c:	50 e0       	ldi	r21, 0x00	; 0
    398e:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <__divmodsi4>
    3992:	79 01       	movw	r14, r18
    3994:	8a 01       	movw	r16, r20
    3996:	6d 81       	ldd	r22, Y+5	; 0x05
    3998:	7e 81       	ldd	r23, Y+6	; 0x06
    399a:	8f 81       	ldd	r24, Y+7	; 0x07
    399c:	98 85       	ldd	r25, Y+8	; 0x08
    399e:	e6 0e       	add	r14, r22
    39a0:	f7 1e       	adc	r15, r23
    39a2:	08 1f       	adc	r16, r24
    39a4:	19 1f       	adc	r17, r25

#ifdef ESR_DEBUG
   DisplayValue(sumvolt[0],0,'C',4);	// Lowpin corrected
#endif

   if (sumvolt[1] > sumvolt[0]) {
    39a6:	89 81       	ldd	r24, Y+1	; 0x01
    39a8:	9a 81       	ldd	r25, Y+2	; 0x02
    39aa:	ab 81       	ldd	r26, Y+3	; 0x03
    39ac:	bc 81       	ldd	r27, Y+4	; 0x04
    39ae:	68 16       	cp	r6, r24
    39b0:	79 06       	cpc	r7, r25
    39b2:	8a 06       	cpc	r8, r26
    39b4:	9b 06       	cpc	r9, r27
    39b6:	38 f4       	brcc	.+14     	; 0x39c6 <GetESR+0x3a4>
      sumvolt[1] -= sumvolt[0];		// difference HighPin - LowPin Voltage with current
    39b8:	5c 01       	movw	r10, r24
    39ba:	6d 01       	movw	r12, r26
    39bc:	a6 18       	sub	r10, r6
    39be:	b7 08       	sbc	r11, r7
    39c0:	c8 08       	sbc	r12, r8
    39c2:	d9 08       	sbc	r13, r9
    39c4:	03 c0       	rjmp	.+6      	; 0x39cc <GetESR+0x3aa>
   } else {
      sumvolt[1] = 0;
    39c6:	aa 24       	eor	r10, r10
    39c8:	bb 24       	eor	r11, r11
    39ca:	65 01       	movw	r12, r10
    39cc:	b2 01       	movw	r22, r4
    39ce:	60 59       	subi	r22, 0x90	; 144
    39d0:	7a 41       	sbci	r23, 0x1A	; 26
#ifdef ESR_DEBUG
   DisplayValue(sumvolt[2],0,' ',4);	// HighPin without current
#endif

   jj = 0;
   if (sumvolt[1] >= sumvolt[2]) {
    39d2:	ae 14       	cp	r10, r14
    39d4:	bf 04       	cpc	r11, r15
    39d6:	c0 06       	cpc	r12, r16
    39d8:	d1 06       	cpc	r13, r17
    39da:	08 f1       	brcs	.+66     	; 0x3a1e <GetESR+0x3fc>
      // mean voltage at the capacitor is higher with current
      // sumvolt[0] is the sum of voltages at LowPin, caused by output resistance of Port
      // (RR680MI - R_L_VAL) is the port output resistance in 0.1 Ohm units.
      // we scale up the difference voltage with 10 to get 0.01 Ohm units of ESR
      cap.esr = ((sumvolt[1] - sumvolt[2]) * 10 * (unsigned long)(RR680MI - R_L_VAL)) / sumvolt[0];
    39dc:	80 e0       	ldi	r24, 0x00	; 0
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	2a e0       	ldi	r18, 0x0A	; 10
    39e2:	30 e0       	ldi	r19, 0x00	; 0
    39e4:	40 e0       	ldi	r20, 0x00	; 0
    39e6:	50 e0       	ldi	r21, 0x00	; 0
    39e8:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
    39ec:	a6 01       	movw	r20, r12
    39ee:	95 01       	movw	r18, r10
    39f0:	2e 19       	sub	r18, r14
    39f2:	3f 09       	sbc	r19, r15
    39f4:	40 0b       	sbc	r20, r16
    39f6:	51 0b       	sbc	r21, r17
    39f8:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
    39fc:	a4 01       	movw	r20, r8
    39fe:	93 01       	movw	r18, r6
    3a00:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
    3a04:	30 93 68 01 	sts	0x0168, r19
    3a08:	20 93 67 01 	sts	0x0167, r18
      DisplayValue(cap.esr,-2,LCD_CHAR_OMEGA,2);
    3a0c:	b9 01       	movw	r22, r18
    3a0e:	80 e0       	ldi	r24, 0x00	; 0
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	4e ef       	ldi	r20, 0xFE	; 254
    3a14:	24 ef       	ldi	r18, 0xF4	; 244
    3a16:	02 e0       	ldi	r16, 0x02	; 2
    3a18:	0e 94 3b 02 	call	0x476	; 0x476 <DisplayValue>
    3a1c:	25 c0       	rjmp	.+74     	; 0x3a68 <GetESR+0x446>
   } else {
      jj = ((sumvolt[2] - sumvolt[1]) * 10 * (unsigned long)(RR680MI - R_L_VAL)) / sumvolt[0];
    3a1e:	80 e0       	ldi	r24, 0x00	; 0
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	2a e0       	ldi	r18, 0x0A	; 10
    3a24:	30 e0       	ldi	r19, 0x00	; 0
    3a26:	40 e0       	ldi	r20, 0x00	; 0
    3a28:	50 e0       	ldi	r21, 0x00	; 0
    3a2a:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
    3a2e:	a8 01       	movw	r20, r16
    3a30:	97 01       	movw	r18, r14
    3a32:	2a 19       	sub	r18, r10
    3a34:	3b 09       	sbc	r19, r11
    3a36:	4c 09       	sbc	r20, r12
    3a38:	5d 09       	sbc	r21, r13
    3a3a:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__mulsi3>
    3a3e:	a4 01       	movw	r20, r8
    3a40:	93 01       	movw	r18, r6
    3a42:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <__udivmodsi4>
    3a46:	12 2f       	mov	r17, r18
      lcd_data('0');
    3a48:	80 e3       	ldi	r24, 0x30	; 48
    3a4a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
      if ((jj < 100) && (jj > 0)) {
    3a4e:	81 2f       	mov	r24, r17
    3a50:	81 50       	subi	r24, 0x01	; 1
    3a52:	83 36       	cpi	r24, 0x63	; 99
    3a54:	48 f4       	brcc	.+18     	; 0x3a68 <GetESR+0x446>
         lcd_data('?');			// mark ESR zero correction
    3a56:	8f e3       	ldi	r24, 0x3F	; 63
    3a58:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
         esr0 -= jj;			// correct ESR_ZERO by negative resistance
    3a5c:	62 2d       	mov	r22, r2
    3a5e:	61 1b       	sub	r22, r17
         eeprom_write_byte((uint8_t *)(&EE_ESR_ZERO), (int8_t)esr0);       // fix new zero offset 
    3a60:	80 e7       	ldi	r24, 0x70	; 112
    3a62:	92 e0       	ldi	r25, 0x02	; 2
    3a64:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__eewr_byte_m328>
//   lcd_line3();
//   DisplayValue(jj,0,' ',4);	// correction for ESR_ZERO
//   DisplayValue(1000+esr0,0,' ',4);	// new ESR_ZERO
#endif
  return;
}
    3a68:	62 96       	adiw	r28, 0x12	; 18
    3a6a:	0f b6       	in	r0, 0x3f	; 63
    3a6c:	f8 94       	cli
    3a6e:	de bf       	out	0x3e, r29	; 62
    3a70:	0f be       	out	0x3f, r0	; 63
    3a72:	cd bf       	out	0x3d, r28	; 61
    3a74:	cf 91       	pop	r28
    3a76:	df 91       	pop	r29
    3a78:	1f 91       	pop	r17
    3a7a:	0f 91       	pop	r16
    3a7c:	ff 90       	pop	r15
    3a7e:	ef 90       	pop	r14
    3a80:	df 90       	pop	r13
    3a82:	cf 90       	pop	r12
    3a84:	bf 90       	pop	r11
    3a86:	af 90       	pop	r10
    3a88:	9f 90       	pop	r9
    3a8a:	8f 90       	pop	r8
    3a8c:	7f 90       	pop	r7
    3a8e:	6f 90       	pop	r6
    3a90:	5f 90       	pop	r5
    3a92:	4f 90       	pop	r4
    3a94:	3f 90       	pop	r3
    3a96:	2f 90       	pop	r2
    3a98:	08 95       	ret

00003a9a <__mulsi3>:
    3a9a:	62 9f       	mul	r22, r18
    3a9c:	d0 01       	movw	r26, r0
    3a9e:	73 9f       	mul	r23, r19
    3aa0:	f0 01       	movw	r30, r0
    3aa2:	82 9f       	mul	r24, r18
    3aa4:	e0 0d       	add	r30, r0
    3aa6:	f1 1d       	adc	r31, r1
    3aa8:	64 9f       	mul	r22, r20
    3aaa:	e0 0d       	add	r30, r0
    3aac:	f1 1d       	adc	r31, r1
    3aae:	92 9f       	mul	r25, r18
    3ab0:	f0 0d       	add	r31, r0
    3ab2:	83 9f       	mul	r24, r19
    3ab4:	f0 0d       	add	r31, r0
    3ab6:	74 9f       	mul	r23, r20
    3ab8:	f0 0d       	add	r31, r0
    3aba:	65 9f       	mul	r22, r21
    3abc:	f0 0d       	add	r31, r0
    3abe:	99 27       	eor	r25, r25
    3ac0:	72 9f       	mul	r23, r18
    3ac2:	b0 0d       	add	r27, r0
    3ac4:	e1 1d       	adc	r30, r1
    3ac6:	f9 1f       	adc	r31, r25
    3ac8:	63 9f       	mul	r22, r19
    3aca:	b0 0d       	add	r27, r0
    3acc:	e1 1d       	adc	r30, r1
    3ace:	f9 1f       	adc	r31, r25
    3ad0:	bd 01       	movw	r22, r26
    3ad2:	cf 01       	movw	r24, r30
    3ad4:	11 24       	eor	r1, r1
    3ad6:	08 95       	ret

00003ad8 <__udivmodqi4>:
    3ad8:	99 1b       	sub	r25, r25
    3ada:	79 e0       	ldi	r23, 0x09	; 9
    3adc:	04 c0       	rjmp	.+8      	; 0x3ae6 <__udivmodqi4_ep>

00003ade <__udivmodqi4_loop>:
    3ade:	99 1f       	adc	r25, r25
    3ae0:	96 17       	cp	r25, r22
    3ae2:	08 f0       	brcs	.+2      	; 0x3ae6 <__udivmodqi4_ep>
    3ae4:	96 1b       	sub	r25, r22

00003ae6 <__udivmodqi4_ep>:
    3ae6:	88 1f       	adc	r24, r24
    3ae8:	7a 95       	dec	r23
    3aea:	c9 f7       	brne	.-14     	; 0x3ade <__udivmodqi4_loop>
    3aec:	80 95       	com	r24
    3aee:	08 95       	ret

00003af0 <__udivmodhi4>:
    3af0:	aa 1b       	sub	r26, r26
    3af2:	bb 1b       	sub	r27, r27
    3af4:	51 e1       	ldi	r21, 0x11	; 17
    3af6:	07 c0       	rjmp	.+14     	; 0x3b06 <__udivmodhi4_ep>

00003af8 <__udivmodhi4_loop>:
    3af8:	aa 1f       	adc	r26, r26
    3afa:	bb 1f       	adc	r27, r27
    3afc:	a6 17       	cp	r26, r22
    3afe:	b7 07       	cpc	r27, r23
    3b00:	10 f0       	brcs	.+4      	; 0x3b06 <__udivmodhi4_ep>
    3b02:	a6 1b       	sub	r26, r22
    3b04:	b7 0b       	sbc	r27, r23

00003b06 <__udivmodhi4_ep>:
    3b06:	88 1f       	adc	r24, r24
    3b08:	99 1f       	adc	r25, r25
    3b0a:	5a 95       	dec	r21
    3b0c:	a9 f7       	brne	.-22     	; 0x3af8 <__udivmodhi4_loop>
    3b0e:	80 95       	com	r24
    3b10:	90 95       	com	r25
    3b12:	bc 01       	movw	r22, r24
    3b14:	cd 01       	movw	r24, r26
    3b16:	08 95       	ret

00003b18 <__udivmodsi4>:
    3b18:	a1 e2       	ldi	r26, 0x21	; 33
    3b1a:	1a 2e       	mov	r1, r26
    3b1c:	aa 1b       	sub	r26, r26
    3b1e:	bb 1b       	sub	r27, r27
    3b20:	fd 01       	movw	r30, r26
    3b22:	0d c0       	rjmp	.+26     	; 0x3b3e <__udivmodsi4_ep>

00003b24 <__udivmodsi4_loop>:
    3b24:	aa 1f       	adc	r26, r26
    3b26:	bb 1f       	adc	r27, r27
    3b28:	ee 1f       	adc	r30, r30
    3b2a:	ff 1f       	adc	r31, r31
    3b2c:	a2 17       	cp	r26, r18
    3b2e:	b3 07       	cpc	r27, r19
    3b30:	e4 07       	cpc	r30, r20
    3b32:	f5 07       	cpc	r31, r21
    3b34:	20 f0       	brcs	.+8      	; 0x3b3e <__udivmodsi4_ep>
    3b36:	a2 1b       	sub	r26, r18
    3b38:	b3 0b       	sbc	r27, r19
    3b3a:	e4 0b       	sbc	r30, r20
    3b3c:	f5 0b       	sbc	r31, r21

00003b3e <__udivmodsi4_ep>:
    3b3e:	66 1f       	adc	r22, r22
    3b40:	77 1f       	adc	r23, r23
    3b42:	88 1f       	adc	r24, r24
    3b44:	99 1f       	adc	r25, r25
    3b46:	1a 94       	dec	r1
    3b48:	69 f7       	brne	.-38     	; 0x3b24 <__udivmodsi4_loop>
    3b4a:	60 95       	com	r22
    3b4c:	70 95       	com	r23
    3b4e:	80 95       	com	r24
    3b50:	90 95       	com	r25
    3b52:	9b 01       	movw	r18, r22
    3b54:	ac 01       	movw	r20, r24
    3b56:	bd 01       	movw	r22, r26
    3b58:	cf 01       	movw	r24, r30
    3b5a:	08 95       	ret

00003b5c <__divmodsi4>:
    3b5c:	97 fb       	bst	r25, 7
    3b5e:	09 2e       	mov	r0, r25
    3b60:	05 26       	eor	r0, r21
    3b62:	0e d0       	rcall	.+28     	; 0x3b80 <__divmodsi4_neg1>
    3b64:	57 fd       	sbrc	r21, 7
    3b66:	04 d0       	rcall	.+8      	; 0x3b70 <__divmodsi4_neg2>
    3b68:	d7 df       	rcall	.-82     	; 0x3b18 <__udivmodsi4>
    3b6a:	0a d0       	rcall	.+20     	; 0x3b80 <__divmodsi4_neg1>
    3b6c:	00 1c       	adc	r0, r0
    3b6e:	38 f4       	brcc	.+14     	; 0x3b7e <__divmodsi4_exit>

00003b70 <__divmodsi4_neg2>:
    3b70:	50 95       	com	r21
    3b72:	40 95       	com	r20
    3b74:	30 95       	com	r19
    3b76:	21 95       	neg	r18
    3b78:	3f 4f       	sbci	r19, 0xFF	; 255
    3b7a:	4f 4f       	sbci	r20, 0xFF	; 255
    3b7c:	5f 4f       	sbci	r21, 0xFF	; 255

00003b7e <__divmodsi4_exit>:
    3b7e:	08 95       	ret

00003b80 <__divmodsi4_neg1>:
    3b80:	f6 f7       	brtc	.-4      	; 0x3b7e <__divmodsi4_exit>
    3b82:	90 95       	com	r25
    3b84:	80 95       	com	r24
    3b86:	70 95       	com	r23
    3b88:	61 95       	neg	r22
    3b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b8c:	8f 4f       	sbci	r24, 0xFF	; 255
    3b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b90:	08 95       	ret

00003b92 <itoa>:
    3b92:	fb 01       	movw	r30, r22
    3b94:	9f 01       	movw	r18, r30
    3b96:	e8 94       	clt
    3b98:	42 30       	cpi	r20, 0x02	; 2
    3b9a:	c4 f0       	brlt	.+48     	; 0x3bcc <itoa+0x3a>
    3b9c:	45 32       	cpi	r20, 0x25	; 37
    3b9e:	b4 f4       	brge	.+44     	; 0x3bcc <itoa+0x3a>
    3ba0:	4a 30       	cpi	r20, 0x0A	; 10
    3ba2:	29 f4       	brne	.+10     	; 0x3bae <itoa+0x1c>
    3ba4:	97 fb       	bst	r25, 7
    3ba6:	1e f4       	brtc	.+6      	; 0x3bae <itoa+0x1c>
    3ba8:	90 95       	com	r25
    3baa:	81 95       	neg	r24
    3bac:	9f 4f       	sbci	r25, 0xFF	; 255
    3bae:	64 2f       	mov	r22, r20
    3bb0:	77 27       	eor	r23, r23
    3bb2:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__udivmodhi4>
    3bb6:	80 5d       	subi	r24, 0xD0	; 208
    3bb8:	8a 33       	cpi	r24, 0x3A	; 58
    3bba:	0c f0       	brlt	.+2      	; 0x3bbe <itoa+0x2c>
    3bbc:	89 5d       	subi	r24, 0xD9	; 217
    3bbe:	81 93       	st	Z+, r24
    3bc0:	cb 01       	movw	r24, r22
    3bc2:	00 97       	sbiw	r24, 0x00	; 0
    3bc4:	a1 f7       	brne	.-24     	; 0x3bae <itoa+0x1c>
    3bc6:	16 f4       	brtc	.+4      	; 0x3bcc <itoa+0x3a>
    3bc8:	5d e2       	ldi	r21, 0x2D	; 45
    3bca:	51 93       	st	Z+, r21
    3bcc:	10 82       	st	Z, r1
    3bce:	c9 01       	movw	r24, r18
    3bd0:	0c 94 21 1e 	jmp	0x3c42	; 0x3c42 <strrev>

00003bd4 <utoa>:
    3bd4:	fb 01       	movw	r30, r22
    3bd6:	9f 01       	movw	r18, r30
    3bd8:	42 30       	cpi	r20, 0x02	; 2
    3bda:	74 f0       	brlt	.+28     	; 0x3bf8 <utoa+0x24>
    3bdc:	45 32       	cpi	r20, 0x25	; 37
    3bde:	64 f4       	brge	.+24     	; 0x3bf8 <utoa+0x24>
    3be0:	64 2f       	mov	r22, r20
    3be2:	77 27       	eor	r23, r23
    3be4:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <__udivmodhi4>
    3be8:	80 5d       	subi	r24, 0xD0	; 208
    3bea:	8a 33       	cpi	r24, 0x3A	; 58
    3bec:	0c f0       	brlt	.+2      	; 0x3bf0 <utoa+0x1c>
    3bee:	89 5d       	subi	r24, 0xD9	; 217
    3bf0:	81 93       	st	Z+, r24
    3bf2:	cb 01       	movw	r24, r22
    3bf4:	00 97       	sbiw	r24, 0x00	; 0
    3bf6:	a1 f7       	brne	.-24     	; 0x3be0 <utoa+0xc>
    3bf8:	10 82       	st	Z, r1
    3bfa:	c9 01       	movw	r24, r18
    3bfc:	0c 94 21 1e 	jmp	0x3c42	; 0x3c42 <strrev>

00003c00 <__eerd_byte_m328>:
    3c00:	f9 99       	sbic	0x1f, 1	; 31
    3c02:	fe cf       	rjmp	.-4      	; 0x3c00 <__eerd_byte_m328>
    3c04:	92 bd       	out	0x22, r25	; 34
    3c06:	81 bd       	out	0x21, r24	; 33
    3c08:	f8 9a       	sbi	0x1f, 0	; 31
    3c0a:	99 27       	eor	r25, r25
    3c0c:	80 b5       	in	r24, 0x20	; 32
    3c0e:	08 95       	ret

00003c10 <__eerd_word_m328>:
    3c10:	a8 e1       	ldi	r26, 0x18	; 24
    3c12:	b0 e0       	ldi	r27, 0x00	; 0
    3c14:	42 e0       	ldi	r20, 0x02	; 2
    3c16:	50 e0       	ldi	r21, 0x00	; 0
    3c18:	0c 94 33 1e 	jmp	0x3c66	; 0x3c66 <__eerd_blraw_m328>

00003c1c <__eewr_byte_m328>:
    3c1c:	26 2f       	mov	r18, r22

00003c1e <__eewr_r18_m328>:
    3c1e:	f9 99       	sbic	0x1f, 1	; 31
    3c20:	fe cf       	rjmp	.-4      	; 0x3c1e <__eewr_r18_m328>
    3c22:	1f ba       	out	0x1f, r1	; 31
    3c24:	92 bd       	out	0x22, r25	; 34
    3c26:	81 bd       	out	0x21, r24	; 33
    3c28:	20 bd       	out	0x20, r18	; 32
    3c2a:	0f b6       	in	r0, 0x3f	; 63
    3c2c:	f8 94       	cli
    3c2e:	fa 9a       	sbi	0x1f, 2	; 31
    3c30:	f9 9a       	sbi	0x1f, 1	; 31
    3c32:	0f be       	out	0x3f, r0	; 63
    3c34:	01 96       	adiw	r24, 0x01	; 1
    3c36:	08 95       	ret

00003c38 <__eewr_word_m328>:
    3c38:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__eewr_byte_m328>
    3c3c:	27 2f       	mov	r18, r23
    3c3e:	0c 94 0f 1e 	jmp	0x3c1e	; 0x3c1e <__eewr_r18_m328>

00003c42 <strrev>:
    3c42:	dc 01       	movw	r26, r24
    3c44:	fc 01       	movw	r30, r24
    3c46:	67 2f       	mov	r22, r23
    3c48:	71 91       	ld	r23, Z+
    3c4a:	77 23       	and	r23, r23
    3c4c:	e1 f7       	brne	.-8      	; 0x3c46 <strrev+0x4>
    3c4e:	32 97       	sbiw	r30, 0x02	; 2
    3c50:	04 c0       	rjmp	.+8      	; 0x3c5a <strrev+0x18>
    3c52:	7c 91       	ld	r23, X
    3c54:	6d 93       	st	X+, r22
    3c56:	70 83       	st	Z, r23
    3c58:	62 91       	ld	r22, -Z
    3c5a:	ae 17       	cp	r26, r30
    3c5c:	bf 07       	cpc	r27, r31
    3c5e:	c8 f3       	brcs	.-14     	; 0x3c52 <strrev+0x10>
    3c60:	08 95       	ret

00003c62 <__eerd_block_m328>:
    3c62:	dc 01       	movw	r26, r24
    3c64:	cb 01       	movw	r24, r22

00003c66 <__eerd_blraw_m328>:
    3c66:	fc 01       	movw	r30, r24
    3c68:	f9 99       	sbic	0x1f, 1	; 31
    3c6a:	fe cf       	rjmp	.-4      	; 0x3c68 <__eerd_blraw_m328+0x2>
    3c6c:	06 c0       	rjmp	.+12     	; 0x3c7a <__eerd_blraw_m328+0x14>
    3c6e:	f2 bd       	out	0x22, r31	; 34
    3c70:	e1 bd       	out	0x21, r30	; 33
    3c72:	f8 9a       	sbi	0x1f, 0	; 31
    3c74:	31 96       	adiw	r30, 0x01	; 1
    3c76:	00 b4       	in	r0, 0x20	; 32
    3c78:	0d 92       	st	X+, r0
    3c7a:	41 50       	subi	r20, 0x01	; 1
    3c7c:	50 40       	sbci	r21, 0x00	; 0
    3c7e:	b8 f7       	brcc	.-18     	; 0x3c6e <__eerd_blraw_m328+0x8>
    3c80:	08 95       	ret

00003c82 <_exit>:
    3c82:	f8 94       	cli

00003c84 <__stop_program>:
    3c84:	ff cf       	rjmp	.-2      	; 0x3c84 <__stop_program>
