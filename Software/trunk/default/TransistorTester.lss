
TransistorTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00003fba  0000406e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003fba  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009a  00800102  00800102  00004070  2**0
                  ALLOC
  3 .eeprom       000001ac  00810000  00810000  00004070  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         00000dbc  00000000  00000000  0000421c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001d2  00000000  00000000  00004fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000001e0  00000000  00000000  000051aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000aea  00000000  00000000  0000538a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00003d8b  00000000  00000000  00005e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000fa2  00000000  00000000  00009bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003b50  00000000  00000000  0000aba1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000390  00000000  00000000  0000e6f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000b16  00000000  00000000  0000ea84  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001bdb  00000000  00000000  0000f59a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00000427  00000000  00000000  00011175  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 83 00 	jmp	0x106	; 0x106 <__ctors_end>
       4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
       8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
       c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      10:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      14:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      18:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      1c:	0c 94 ab 01 	jmp	0x356	; 0x356 <__vector_7>
      20:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      24:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      28:	0c 94 bf 10 	jmp	0x217e	; 0x217e <__vector_10>
      2c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      30:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      34:	0c 94 99 10 	jmp	0x2132	; 0x2132 <__vector_13>
      38:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      3c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      40:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      44:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      48:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      4c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      50:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      54:	0c 94 ac 01 	jmp	0x358	; 0x358 <__vector_21>
      58:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      5c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      60:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      64:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>

00000068 <LogTab>:
      68:	00 00 14 00 29 00 3e 00 53 00 69 00 80 00 97 00     ....).>.S.i.....
      78:	ae 00 c6 00 df 00 f8 00 12 01 2d 01 49 01 65 01     ..........-.I.e.
      88:	82 01 a0 01 be 01 de 01 ff 01 21 02 44 02 68 02     ..........!.D.h.
      98:	8e 02 b5 02 de 02 09 03 35 03 64 03 94 03 c8 03     ........5.d.....
      a8:	fe 03 37 04 73 04 b4 04 f9 04 43 05 93 05 ea 05     ..7.s.....C.....
      b8:	49 06 b3 06 29 07 ae 07 48 08 ff 08 de 09           I...)...H.....

000000c6 <RHtab>:
      c6:	ba 03 87 03 58 03 2e 03 07 03 e4 02 c3 02 a4 02     ....X...........
      d6:	88 02                                               ..

000000d8 <VERSION_str>:
      d8:	56 65 72 73 69 6f 6e 20 31 2e 31 30 6b 00           Version 1.10k.

000000e6 <R0_str>:
      e6:	52 30 3d 00                                         R0=.

000000ea <PinRLtab>:
      ea:	01 04 10                                            ...

000000ed <PinADCtab>:
      ed:	01 02 04                                            ...

000000f0 <MinCap_str>:
      f0:	20 3e 31 30 30 6e 46 00                              >100nF.

000000f8 <REF_C_str>:
      f8:	52 45 46 5f 43 3d 00                                REF_C=.

000000ff <REF_R_str>:
      ff:	52 45 46 5f 52 3d 00                                REF_R=.

00000106 <__ctors_end>:
     106:	11 24       	eor	r1, r1
     108:	1f be       	out	0x3f, r1	; 63
     10a:	cf ef       	ldi	r28, 0xFF	; 255
     10c:	d4 e0       	ldi	r29, 0x04	; 4
     10e:	de bf       	out	0x3e, r29	; 62
     110:	cd bf       	out	0x3d, r28	; 61

00000112 <__do_copy_data>:
     112:	11 e0       	ldi	r17, 0x01	; 1
     114:	a0 e0       	ldi	r26, 0x00	; 0
     116:	b1 e0       	ldi	r27, 0x01	; 1
     118:	ea eb       	ldi	r30, 0xBA	; 186
     11a:	ff e3       	ldi	r31, 0x3F	; 63
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x10>
     11e:	05 90       	lpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	a2 30       	cpi	r26, 0x02	; 2
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0xc>

00000128 <__do_clear_bss>:
     128:	11 e0       	ldi	r17, 0x01	; 1
     12a:	a2 e0       	ldi	r26, 0x02	; 2
     12c:	b1 e0       	ldi	r27, 0x01	; 1
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	ac 39       	cpi	r26, 0x9C	; 156
     134:	b1 07       	cpc	r27, r17
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	0e 94 24 05 	call	0xa48	; 0xa48 <main>
     13c:	0c 94 db 1f 	jmp	0x3fb6	; 0x3fb6 <_exit>

00000140 <__bad_interrupt>:
     140:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000144 <lcd_data>:
void lcd_space(void) {
   lcd_data(' ');
}

// sends data byte to the LCD 
void lcd_data(unsigned char temp1) {
     144:	1f 93       	push	r17
     146:	18 2f       	mov	r17, r24
 lcd_write_data(temp1);		// set RS to 1
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	61 2f       	mov	r22, r17
     14c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
     150:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <wait50us>
#ifdef WITH_UART
 switch(temp1) {
     154:	18 30       	cpi	r17, 0x08	; 8
     156:	48 f4       	brcc	.+18     	; 0x16a <lcd_data+0x26>
     158:	16 30       	cpi	r17, 0x06	; 6
     15a:	c0 f4       	brcc	.+48     	; 0x18c <lcd_data+0x48>
     15c:	12 30       	cpi	r17, 0x02	; 2
     15e:	61 f0       	breq	.+24     	; 0x178 <lcd_data+0x34>
     160:	13 30       	cpi	r17, 0x03	; 3
     162:	79 f0       	breq	.+30     	; 0x182 <lcd_data+0x3e>
     164:	11 30       	cpi	r17, 0x01	; 1
     166:	f1 f4       	brne	.+60     	; 0x1a4 <lcd_data+0x60>
     168:	05 c0       	rjmp	.+10     	; 0x174 <lcd_data+0x30>
     16a:	14 3e       	cpi	r17, 0xE4	; 228
     16c:	89 f0       	breq	.+34     	; 0x190 <lcd_data+0x4c>
     16e:	14 3f       	cpi	r17, 0xF4	; 244
     170:	c9 f4       	brne	.+50     	; 0x1a4 <lcd_data+0x60>
     172:	10 c0       	rjmp	.+32     	; 0x194 <lcd_data+0x50>
    case LCD_CHAR_DIODE1:
    	uart_putc('>');
     174:	8e e3       	ldi	r24, 0x3E	; 62
     176:	06 c0       	rjmp	.+12     	; 0x184 <lcd_data+0x40>
    	uart_putc('|');
    	break;
    case LCD_CHAR_DIODE2:
    	uart_putc('|');
     178:	8c e7       	ldi	r24, 0x7C	; 124
     17a:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <uart_putc>
    	uart_putc('<');
     17e:	8c e3       	ldi	r24, 0x3C	; 60
     180:	12 c0       	rjmp	.+36     	; 0x1a6 <lcd_data+0x62>
    	break;
    case LCD_CHAR_CAP:
    	uart_putc('|');
     182:	8c e7       	ldi	r24, 0x7C	; 124
     184:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <uart_putc>
    	uart_putc('|');
     188:	8c e7       	ldi	r24, 0x7C	; 124
     18a:	0d c0       	rjmp	.+26     	; 0x1a6 <lcd_data+0x62>
    	break;
    case LCD_CHAR_RESIS1:
    case LCD_CHAR_RESIS2:
    	uart_putc('R');
     18c:	82 e5       	ldi	r24, 0x52	; 82
     18e:	0b c0       	rjmp	.+22     	; 0x1a6 <lcd_data+0x62>
//    case LCD_CHAR_DEGREE:	// degree sign
//    	uart_putc(0xf8);	// codepage 437 or 850 has degree
//    	break;
    case LCD_CHAR_U:		//µ
//    	uart_putc(0xe6);	// codepage 437 or 850 has my
    	uart_putc('u');		// better use the ASCII u
     190:	85 e7       	ldi	r24, 0x75	; 117
     192:	09 c0       	rjmp	.+18     	; 0x1a6 <lcd_data+0x62>
    	break;
    case LCD_CHAR_OMEGA:	//Omega
//	uart_putc(0xea);	// only codepage 437 has Omega
        uart_putc('O');
     194:	8f e4       	ldi	r24, 0x4F	; 79
     196:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <uart_putc>
        uart_putc('h');
     19a:	88 e6       	ldi	r24, 0x68	; 104
     19c:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <uart_putc>
        uart_putc('m');
     1a0:	8d e6       	ldi	r24, 0x6D	; 109
     1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <lcd_data+0x62>
    	break;
    default:
    	uart_putc(temp1);
     1a4:	81 2f       	mov	r24, r17
     1a6:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <uart_putc>
 }
#endif
}
     1aa:	1f 91       	pop	r17
     1ac:	08 95       	ret

000001ae <lcd_space>:
   lcd_data(temp + '1');
}

// send space character to LCD
void lcd_space(void) {
   lcd_data(' ');
     1ae:	80 e2       	ldi	r24, 0x20	; 32
     1b0:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
}
     1b4:	08 95       	ret

000001b6 <lcd_testpin>:
 

// sends numeric character (Pin Number) to the LCD 
// from binary 0 we send ASCII 1 ....
void lcd_testpin(unsigned char temp) {
   lcd_data(temp + '1');
     1b6:	8f 5c       	subi	r24, 0xCF	; 207
     1b8:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
}
     1bc:	08 95       	ret

000001be <uart_newline>:
}


#ifdef WITH_UART
void uart_newline(void) {
   uart_putc('\r');
     1be:	8d e0       	ldi	r24, 0x0D	; 13
     1c0:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <uart_putc>
   uart_putc('\n');
     1c4:	8a e0       	ldi	r24, 0x0A	; 10
     1c6:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <uart_putc>
}
     1ca:	08 95       	ret

000001cc <lcd_command>:
#endif
}
 
// sends a command to the LCD
 
void lcd_command(unsigned char temp1) {
     1cc:	1f 93       	push	r17
     1ce:	18 2f       	mov	r17, r24
        lcd_write_cmd(temp1);		// set RS to 0
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	61 2f       	mov	r22, r17
     1d4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
     1d8:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <wait50us>
#ifdef WITH_UART
	if((temp1 == 0x80) || (temp1 == 0xC0)) {
     1dc:	10 38       	cpi	r17, 0x80	; 128
     1de:	11 f0       	breq	.+4      	; 0x1e4 <lcd_command+0x18>
     1e0:	10 3c       	cpi	r17, 0xC0	; 192
     1e2:	11 f4       	brne	.+4      	; 0x1e8 <lcd_command+0x1c>
		uart_newline();
     1e4:	0e 94 df 00 	call	0x1be	; 0x1be <uart_newline>
	}
#endif
}
     1e8:	1f 91       	pop	r17
     1ea:	08 95       	ret

000001ec <lcd_clear>:
}
 
// send the command to clear the display 
 
void lcd_clear(void) {
   lcd_command(CLEAR_DISPLAY);
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
   wait_about10ms();
     1f2:	82 e0       	ldi	r24, 0x02	; 2
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
#ifdef WITH_UART
   uart_newline();
     1fa:	0e 94 df 00 	call	0x1be	; 0x1be <uart_newline>
#endif
   lcd_line1();			// set cursor to Line1 Column 1, (only for OLED-Display)
     1fe:	80 e8       	ldi	r24, 0x80	; 128
     200:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
}
     204:	08 95       	ret

00000206 <lcd_init>:
 
// Initialise: 
// Must be called first .
 
void lcd_init(void) {
   wait_about30ms();
     206:	86 e0       	ldi	r24, 0x06	; 6
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
   // to initialise, send 3 times to be shure to be in 8 Bit mode
   lcd_write_init(1);
     20e:	80 e8       	ldi	r24, 0x80	; 128
     210:	60 e3       	ldi	r22, 0x30	; 48
     212:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait_about5ms();
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
   
   lcd_write_init(1);
     21e:	80 e8       	ldi	r24, 0x80	; 128
     220:	60 e3       	ldi	r22, 0x30	; 48
     222:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait1ms();
     226:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <wait1ms>

   lcd_write_init(1);
     22a:	80 e8       	ldi	r24, 0x80	; 128
     22c:	60 e3       	ldi	r22, 0x30	; 48
     22e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait1ms();
     232:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <wait1ms>

   lcd_write_init(0);		// switch to 4 Bit mode
     236:	80 e8       	ldi	r24, 0x80	; 128
     238:	60 e2       	ldi	r22, 0x20	; 32
     23a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait_about10ms();
     23e:	82 e0       	ldi	r24, 0x02	; 2
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
   lcd_command(CMD1_SetBias | 0x0c);		// 1/4 bias     (5V)
   lcd_command(CMD1_PowerControl | 0x02);	// booster off / set contrast C5:C4 = 2
   lcd_command(CMD1_FollowerControl | 0x09);	// Follower on / Rab2:0 = 1
   lcd_command(CMD1_SetContrast | 0x04);	// set contrast C3:0 = 4
#endif
   lcd_command(CMD_SetIFOptions | 0x08);	// 4Bit / 2 rows / 5x7
     246:	88 e2       	ldi	r24, 0x28	; 40
     248:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>

   lcd_command(CMD_SetDisplayAndCursor | 0x04); // Display on / Cursor off / no Blinking
     24c:	8c e0       	ldi	r24, 0x0C	; 12
     24e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>

   lcd_command(CMD_SetEntryMode | 0x02);	// increment / no Scroll    
     252:	86 e0       	ldi	r24, 0x06	; 6
     254:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
   lcd_clear();
     258:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
}
     25c:	08 95       	ret

0000025e <lcd_string>:
#endif
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
     25e:	ef 92       	push	r14
     260:	ff 92       	push	r15
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	e8 2e       	mov	r14, r24
     268:	e7 01       	movw	r28, r14
     26a:	7e 01       	movw	r14, r28
     26c:	f9 2e       	mov	r15, r25
     26e:	e7 01       	movw	r28, r14
    while(*data) {
     270:	02 c0       	rjmp	.+4      	; 0x276 <lcd_string+0x18>
        lcd_data(*data);
     272:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
    while(*data) {
     276:	89 91       	ld	r24, Y+
     278:	88 23       	and	r24, r24
     27a:	d9 f7       	brne	.-10     	; 0x272 <lcd_string+0x14>
        lcd_data(*data);
        data++;
    }
}
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	ff 90       	pop	r15
     282:	ef 90       	pop	r14
     284:	08 95       	ret

00000286 <lcd_pgm_string>:

#ifdef use_lcd_pgm
//Load string from PGM  and send to LCD 
void lcd_pgm_string(const unsigned char *data) {
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = pgm_read_byte(data);
     28c:	fe 01       	movw	r30, r28
     28e:	84 91       	lpm	r24, Z+
      if((cc==0) || (cc==128)) {
     290:	88 23       	and	r24, r24
     292:	31 f0       	breq	.+12     	; 0x2a0 <lcd_pgm_string+0x1a>
     294:	80 38       	cpi	r24, 0x80	; 128
     296:	21 f0       	breq	.+8      	; 0x2a0 <lcd_pgm_string+0x1a>
         return;
      }
      lcd_data(cc);
     298:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
      data++;
     29c:	21 96       	adiw	r28, 0x01	; 1
   }
     29e:	f6 cf       	rjmp	.-20     	; 0x28c <lcd_pgm_string+0x6>
}
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <lcd_fix_string>:
#endif

//Load string from PGM or EEprom and send to LCD 
void lcd_fix_string(const unsigned char *data) {
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = MEM_read_byte(data);
     2ac:	ce 01       	movw	r24, r28
     2ae:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <__eerd_byte_m168>
      if((cc==0) || (cc==128)) {
     2b2:	88 23       	and	r24, r24
     2b4:	31 f0       	breq	.+12     	; 0x2c2 <lcd_fix_string+0x1c>
     2b6:	80 38       	cpi	r24, 0x80	; 128
     2b8:	21 f0       	breq	.+8      	; 0x2c2 <lcd_fix_string+0x1c>
         return;
      }
      lcd_data(cc);
     2ba:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
      data++;
     2be:	21 96       	adiw	r28, 0x01	; 1
   }
     2c0:	f5 cf       	rjmp	.-22     	; 0x2ac <lcd_fix_string+0x6>
}
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	08 95       	ret

000002c8 <lcd_fix_customchar>:

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	8c 01       	movw	r16, r24
     2d2:	c0 e0       	ldi	r28, 0x00	; 0
     2d4:	d0 e0       	ldi	r29, 0x00	; 0
    for(uint8_t i=0;i<8;i++) {
        lcd_data(MEM_read_byte(chardata));
     2d6:	c8 01       	movw	r24, r16
     2d8:	8c 0f       	add	r24, r28
     2da:	9d 1f       	adc	r25, r29
     2dc:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <__eerd_byte_m168>
     2e0:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
     2e4:	21 96       	adiw	r28, 0x01	; 1
   }
}

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
    for(uint8_t i=0;i<8;i++) {
     2e6:	c8 30       	cpi	r28, 0x08	; 8
     2e8:	d1 05       	cpc	r29, r1
     2ea:	a9 f7       	brne	.-22     	; 0x2d6 <lcd_fix_customchar+0xe>
        lcd_data(MEM_read_byte(chardata));
        chardata++;
    }
}
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	0f 91       	pop	r16
     2f4:	08 95       	ret

000002f6 <_lcd_hw_write>:
     2f6:	80 fd       	sbrc	r24, 0
     2f8:	5c 9a       	sbi	0x0b, 4	; 11
     2fa:	80 ff       	sbrs	r24, 0
     2fc:	5c 98       	cbi	0x0b, 4	; 11
     2fe:	54 9a       	sbi	0x0a, 4	; 10
     300:	00 00       	nop
     302:	5d 9a       	sbi	0x0b, 5	; 11
     304:	55 9a       	sbi	0x0a, 5	; 10
     306:	58 98       	cbi	0x0b, 0	; 11
     308:	59 98       	cbi	0x0b, 1	; 11
     30a:	5a 98       	cbi	0x0b, 2	; 11
     30c:	5b 98       	cbi	0x0b, 3	; 11
     30e:	64 fd       	sbrc	r22, 4
     310:	58 9a       	sbi	0x0b, 0	; 11
     312:	50 9a       	sbi	0x0a, 0	; 10
     314:	65 fd       	sbrc	r22, 5
     316:	59 9a       	sbi	0x0b, 1	; 11
     318:	51 9a       	sbi	0x0a, 1	; 10
     31a:	66 fd       	sbrc	r22, 6
     31c:	5a 9a       	sbi	0x0b, 2	; 11
     31e:	52 9a       	sbi	0x0a, 2	; 10
     320:	67 fd       	sbrc	r22, 7
     322:	5b 9a       	sbi	0x0b, 3	; 11
     324:	53 9a       	sbi	0x0a, 3	; 10
     326:	00 00       	nop
     328:	5d 98       	cbi	0x0b, 5	; 11
     32a:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <wait1us>
     32e:	87 fd       	sbrc	r24, 7
     330:	11 c0       	rjmp	.+34     	; 0x354 <_lcd_hw_write_exit>
     332:	5d 9a       	sbi	0x0b, 5	; 11
     334:	58 98       	cbi	0x0b, 0	; 11
     336:	59 98       	cbi	0x0b, 1	; 11
     338:	5a 98       	cbi	0x0b, 2	; 11
     33a:	5b 98       	cbi	0x0b, 3	; 11
     33c:	60 fd       	sbrc	r22, 0
     33e:	58 9a       	sbi	0x0b, 0	; 11
     340:	61 fd       	sbrc	r22, 1
     342:	59 9a       	sbi	0x0b, 1	; 11
     344:	62 fd       	sbrc	r22, 2
     346:	5a 9a       	sbi	0x0b, 2	; 11
     348:	63 fd       	sbrc	r22, 3
     34a:	5b 9a       	sbi	0x0b, 3	; 11
     34c:	00 00       	nop
     34e:	5d 98       	cbi	0x0b, 5	; 11
     350:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <wait1us>

00000354 <_lcd_hw_write_exit>:
     354:	08 95       	ret

00000356 <__vector_7>:
#define MAIN_C
#include "Transistortester.h"

#ifndef INHIBIT_SLEEP_MODE
  // prepare sleep mode
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
     356:	18 95       	reti

00000358 <__vector_21>:
  EMPTY_INTERRUPT(ADC_vect);
     358:	18 95       	reti

0000035a <lcd_clear_line>:

}   // end main


#ifdef LCD_CLEAR
void lcd_clear_line(void) {
     35a:	1f 93       	push	r17
     35c:	14 e1       	ldi	r17, 0x14	; 20
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    lcd_space();
     35e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>
     362:	11 50       	subi	r17, 0x01	; 1

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
     364:	e1 f7       	brne	.-8      	; 0x35e <lcd_clear_line+0x4>
    lcd_space();
 }
}
     366:	1f 91       	pop	r17
     368:	08 95       	ret

0000036a <sleep_5ms>:
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
      pause = 0;
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     36a:	42 e0       	ldi	r20, 0x02	; 2
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     36c:	1c c0       	rjmp	.+56     	; 0x3a6 <sleep_5ms+0x3c>
  {
 #if 3000 > RESTART_DELAY_US
   if (pause > 1)
     36e:	82 30       	cpi	r24, 0x02	; 2
     370:	91 05       	cpc	r25, r1
     372:	18 f0       	brcs	.+6      	; 0x37a <sleep_5ms+0x10>
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
      pause -= 2;
     374:	02 97       	sbiw	r24, 0x02	; 2
  {
 #if 3000 > RESTART_DELAY_US
   if (pause > 1)
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
     376:	3e e3       	ldi	r19, 0x3E	; 62
     378:	03 c0       	rjmp	.+6      	; 0x380 <sleep_5ms+0x16>
      pause -= 2;
     } else {
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
     37a:	37 e1       	ldi	r19, 0x17	; 23
      pause = 0;
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	90 e0       	ldi	r25, 0x00	; 0
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
     380:	20 91 b2 00 	lds	r18, 0x00B2
     384:	23 0f       	add	r18, r19
     386:	20 93 b3 00 	sts	0x00B3, r18
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     38a:	40 93 70 00 	sts	0x0070, r20
   set_sleep_mode(SLEEP_MODE_PWR_SAVE);
     38e:	23 b7       	in	r18, 0x33	; 51
     390:	21 7f       	andi	r18, 0xF1	; 241
     392:	26 60       	ori	r18, 0x06	; 6
     394:	23 bf       	out	0x33, r18	; 51
//   set_sleep_mode(SLEEP_MODE_IDLE);
   sleep_mode();
     396:	23 b7       	in	r18, 0x33	; 51
     398:	21 60       	ori	r18, 0x01	; 1
     39a:	23 bf       	out	0x33, r18	; 51
     39c:	88 95       	sleep
     39e:	23 b7       	in	r18, 0x33	; 51
     3a0:	2e 7f       	andi	r18, 0xFE	; 254
     3a2:	23 bf       	out	0x33, r18	; 51
// wake up after output compare match interrupt
 #else
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
 #endif
   wdt_reset();
     3a4:	a8 95       	wdr
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     3a6:	00 97       	sbiw	r24, 0x00	; 0
     3a8:	11 f7       	brne	.-60     	; 0x36e <sleep_5ms+0x4>
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
 #endif
   wdt_reset();
  }
TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
     3aa:	10 92 70 00 	sts	0x0070, r1
}
     3ae:	08 95       	ret

000003b0 <ShortedProbes>:
 *  - 0 if not shorted
 *  - 1 if shorted
 */

uint8_t ShortedProbes(uint8_t Probe1, uint8_t Probe2)
{
     3b0:	0f 93       	push	r16
     3b2:	1f 93       	push	r17
     3b4:	df 93       	push	r29
     3b6:	cf 93       	push	r28
     3b8:	0f 92       	push	r0
     3ba:	cd b7       	in	r28, 0x3d	; 61
     3bc:	de b7       	in	r29, 0x3e	; 62
   *  Set up a voltage divider between the two probes:
   *  - Probe1: Rl pull-up
   *  - Probe2: Rl pull-down
   */

  ADC_DDR =  TXD_MSK;		// all-Pins to Input
     3be:	98 e0       	ldi	r25, 0x08	; 8
     3c0:	97 b9       	out	0x07, r25	; 7
  ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
     3c2:	98 b9       	out	0x08, r25	; 8
  R_PORT = pgm_read_byte(&PinRLtab[Probe1]);
     3c4:	e8 2f       	mov	r30, r24
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	e6 51       	subi	r30, 0x16	; 22
     3ca:	ff 4f       	sbci	r31, 0xFF	; 255
     3cc:	94 91       	lpm	r25, Z+
     3ce:	95 b9       	out	0x05, r25	; 5
  R_DDR = pgm_read_byte(&PinRLtab[Probe1]) | pgm_read_byte(&PinRLtab[Probe2]);
     3d0:	e6 2f       	mov	r30, r22
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	e6 51       	subi	r30, 0x16	; 22
     3d6:	ff 4f       	sbci	r31, 0xFF	; 255
     3d8:	e4 91       	lpm	r30, Z+
     3da:	e9 2b       	or	r30, r25
     3dc:	e4 b9       	out	0x04, r30	; 4

  /* read voltages */
  U1 = ReadADC(Probe1);
     3de:	69 83       	std	Y+1, r22	; 0x01
     3e0:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
     3e4:	8c 01       	movw	r16, r24
  U2 = ReadADC(Probe2);
     3e6:	69 81       	ldd	r22, Y+1	; 0x01
     3e8:	86 2f       	mov	r24, r22
     3ea:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
     3ee:	ac 01       	movw	r20, r24
   *  We expect both probe voltages to be about the same and
   *  to be half of Vcc (allowed difference +/- 20mV).
   */
  #define MAX_UH_DIFF 20

  URH = ADCconfig.U_AVCC / 2;
     3f0:	20 91 35 01 	lds	r18, 0x0135
     3f4:	30 91 36 01 	lds	r19, 0x0136
     3f8:	36 95       	lsr	r19
     3fa:	27 95       	ror	r18
  if ((U1 > (URH - MAX_UH_DIFF)) && (U1 < (URH + MAX_UH_DIFF)))
     3fc:	c9 01       	movw	r24, r18
     3fe:	44 97       	sbiw	r24, 0x14	; 20
     400:	80 17       	cp	r24, r16
     402:	91 07       	cpc	r25, r17
     404:	60 f4       	brcc	.+24     	; 0x41e <ShortedProbes+0x6e>
     406:	2c 5e       	subi	r18, 0xEC	; 236
     408:	3f 4f       	sbci	r19, 0xFF	; 255
     40a:	02 17       	cp	r16, r18
     40c:	13 07       	cpc	r17, r19
     40e:	38 f4       	brcc	.+14     	; 0x41e <ShortedProbes+0x6e>
  {
    if ((U2 > (URH - MAX_UH_DIFF)) && (U2 < (URH + MAX_UH_DIFF)))
     410:	84 17       	cp	r24, r20
     412:	95 07       	cpc	r25, r21
     414:	20 f4       	brcc	.+8      	; 0x41e <ShortedProbes+0x6e>
 *  - 1 if shorted
 */

uint8_t ShortedProbes(uint8_t Probe1, uint8_t Probe2)
{
  uint8_t           Flag1 = 0;      /* return value */
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	42 17       	cp	r20, r18
     41a:	53 07       	cpc	r21, r19
     41c:	08 f0       	brcs	.+2      	; 0x420 <ShortedProbes+0x70>
     41e:	80 e0       	ldi	r24, 0x00	; 0
      Flag1 = 1;
    }
  }

  /* reset port */
  R_DDR = 0;
     420:	14 b8       	out	0x04, r1	; 4

  return Flag1;
}
     422:	0f 90       	pop	r0
     424:	cf 91       	pop	r28
     426:	df 91       	pop	r29
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	08 95       	ret

0000042e <AllProbesShorted>:
 *  - 0 if no probes are short-circuited
 *  - number of probe pairs short-circuited (3 = all)
 */

uint8_t AllProbesShorted(void)
{
     42e:	1f 93       	push	r17
  uint8_t           Flag2;      /* return value */

  /* check all possible combinations */
  Flag2 = ShortedProbes(TP1, TP2);
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	61 e0       	ldi	r22, 0x01	; 1
     434:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <ShortedProbes>
     438:	18 2f       	mov	r17, r24
  Flag2 += ShortedProbes(TP1, TP3);
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	62 e0       	ldi	r22, 0x02	; 2
     43e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <ShortedProbes>
     442:	18 0f       	add	r17, r24
  Flag2 += ShortedProbes(TP2, TP3);
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	62 e0       	ldi	r22, 0x02	; 2
     448:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <ShortedProbes>

  return Flag2;
}
     44c:	81 0f       	add	r24, r17
     44e:	1f 91       	pop	r17
     450:	08 95       	ret

00000452 <AutoCheck>:
// Selftest of the device and calibration 
void AutoCheck(void) {
     452:	8f 92       	push	r8
     454:	9f 92       	push	r9
     456:	af 92       	push	r10
     458:	bf 92       	push	r11
     45a:	cf 92       	push	r12
     45c:	df 92       	push	r13
     45e:	ef 92       	push	r14
     460:	ff 92       	push	r15
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
     466:	df 93       	push	r29
     468:	cf 93       	push	r28
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
     46e:	2e 97       	sbiw	r28, 0x0e	; 14
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	f8 94       	cli
     474:	de bf       	out	0x3e, r29	; 62
     476:	0f be       	out	0x3f, r0	; 63
     478:	cd bf       	out	0x3d, r28	; 61
  int8_t udiff;		// difference between ADC Voltage with VCC or Bandgap reference
  int8_t udiff2;
  #endif
 #endif
  #define RequireShortedProbes
  if (AllProbesShorted() != 3) return;
     47a:	0e 94 17 02 	call	0x42e	; 0x42e <AllProbesShorted>
     47e:	83 30       	cpi	r24, 0x03	; 3
     480:	09 f0       	breq	.+2      	; 0x484 <AutoCheck+0x32>
     482:	81 c2       	rjmp	.+1282   	; 0x986 <__stack+0x487>
  lcd_clear();
     484:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  lcd_fix_string(SELFTEST);		// "Selftest mode.."
     488:	8c eb       	ldi	r24, 0xBC	; 188
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  lcd_line2();
     490:	80 ec       	ldi	r24, 0xC0	; 192
     492:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_data('?');			// wait for key pressed
     496:	8f e3       	ldi	r24, 0x3F	; 63
     498:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
  for (tt=0;tt<50;tt++) {
     49c:	10 e0       	ldi	r17, 0x00	; 0
     if ((ON_PIN_REG & (1<<RST_PIN)) != 0) break;	// key is unpressed
     49e:	4f 99       	sbic	0x09, 7	; 9
     4a0:	08 c0       	rjmp	.+16     	; 0x4b2 <AutoCheck+0x60>
     wait_about10ms();			// key is still pressed, wait for release
     4a2:	82 e0       	ldi	r24, 0x02	; 2
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
  if (AllProbesShorted() != 3) return;
  lcd_clear();
  lcd_fix_string(SELFTEST);		// "Selftest mode.."
  lcd_line2();
  lcd_data('?');			// wait for key pressed
  for (tt=0;tt<50;tt++) {
     4aa:	1f 5f       	subi	r17, 0xFF	; 255
     4ac:	12 33       	cpi	r17, 0x32	; 50
     4ae:	b9 f7       	brne	.-18     	; 0x49e <AutoCheck+0x4c>
     4b0:	0a c0       	rjmp	.+20     	; 0x4c6 <AutoCheck+0x74>
     if ((ON_PIN_REG & (1<<RST_PIN)) != 0) break;	// key is unpressed
     4b2:	10 e0       	ldi	r17, 0x00	; 0
     wait_about10ms();			// key is still pressed, wait for release
    }
  if (tt == 50) goto no_selftest;		// key is more than 500ms pressed
  for (tt=0;tt<200;tt++) {
     if(!(ON_PIN_REG & (1<<RST_PIN))) goto begin_selftest;	// key is pressed again
     4b4:	4f 9b       	sbis	0x09, 7	; 9
     4b6:	0e c0       	rjmp	.+28     	; 0x4d4 <AutoCheck+0x82>
     wait_about10ms();
     4b8:	82 e0       	ldi	r24, 0x02	; 2
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
  for (tt=0;tt<50;tt++) {
     if ((ON_PIN_REG & (1<<RST_PIN)) != 0) break;	// key is unpressed
     wait_about10ms();			// key is still pressed, wait for release
    }
  if (tt == 50) goto no_selftest;		// key is more than 500ms pressed
  for (tt=0;tt<200;tt++) {
     4c0:	1f 5f       	subi	r17, 0xFF	; 255
     4c2:	18 3c       	cpi	r17, 0xC8	; 200
     4c4:	b9 f7       	brne	.-18     	; 0x4b4 <AutoCheck+0x62>
     if(!(ON_PIN_REG & (1<<RST_PIN))) goto begin_selftest;	// key is pressed again
     wait_about10ms();
    }
  // no key pressed for 2s
no_selftest:
  lcd_clear();
     4c6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  lcd_fix2_string(VERSION_str);	//"Version ..."
     4ca:	88 ed       	ldi	r24, 0xD8	; 216
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
  return;
     4d2:	59 c2       	rjmp	.+1202   	; 0x986 <__stack+0x487>
begin_selftest:
  lcd_line2();
     4d4:	80 ec       	ldi	r24, 0xC0	; 192
     4d6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix2_string(R0_str);		// "R0="
     4da:	86 ee       	ldi	r24, 0xE6	; 230
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[2]), (int8_t)0);	// clear zero offset
     4e2:	8a ea       	ldi	r24, 0xAA	; 170
     4e4:	91 e0       	ldi	r25, 0x01	; 1
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <__eewr_byte_m168>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (int8_t)0);	// clear zero offset
     4ec:	8b ea       	ldi	r24, 0xAB	; 171
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <__eewr_byte_m168>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)0);	// clear zero offset
     4f6:	89 ea       	ldi	r24, 0xA9	; 169
     4f8:	91 e0       	ldi	r25, 0x01	; 1
     4fa:	60 e0       	ldi	r22, 0x00	; 0
     4fc:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <__eewr_byte_m168>

  adcmv[0] = GetESR(TP3, TP1);
     500:	82 e0       	ldi	r24, 0x02	; 2
     502:	60 e0       	ldi	r22, 0x00	; 0
     504:	0e 94 5f 1b 	call	0x36be	; 0x36be <GetESR>
     508:	7c 01       	movw	r14, r24
     50a:	9a 83       	std	Y+2, r25	; 0x02
     50c:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = GetESR(TP3, TP2);
     50e:	82 e0       	ldi	r24, 0x02	; 2
     510:	61 e0       	ldi	r22, 0x01	; 1
     512:	0e 94 5f 1b 	call	0x36be	; 0x36be <GetESR>
     516:	6c 01       	movw	r12, r24
     518:	9c 83       	std	Y+4, r25	; 0x04
     51a:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = GetESR(TP2, TP1);
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	60 e0       	ldi	r22, 0x00	; 0
     520:	0e 94 5f 1b 	call	0x36be	; 0x36be <GetESR>
     524:	5c 01       	movw	r10, r24
     526:	9e 83       	std	Y+6, r25	; 0x06
     528:	8d 83       	std	Y+5, r24	; 0x05
  DisplayValue(adcmv[0],-2,' ',3);
     52a:	b7 01       	movw	r22, r14
     52c:	88 27       	eor	r24, r24
     52e:	77 fd       	sbrc	r23, 7
     530:	80 95       	com	r24
     532:	98 2f       	mov	r25, r24
     534:	4e ef       	ldi	r20, 0xFE	; 254
     536:	20 e2       	ldi	r18, 0x20	; 32
     538:	03 e0       	ldi	r16, 0x03	; 3
     53a:	0e 94 a0 0b 	call	0x1740	; 0x1740 <DisplayValue>
  DisplayValue(adcmv[1],-2,' ',3);
     53e:	b6 01       	movw	r22, r12
     540:	88 27       	eor	r24, r24
     542:	77 fd       	sbrc	r23, 7
     544:	80 95       	com	r24
     546:	98 2f       	mov	r25, r24
     548:	4e ef       	ldi	r20, 0xFE	; 254
     54a:	20 e2       	ldi	r18, 0x20	; 32
     54c:	0e 94 a0 0b 	call	0x1740	; 0x1740 <DisplayValue>
  DisplayValue(adcmv[2],-2,LCD_CHAR_OMEGA,3);
     550:	b5 01       	movw	r22, r10
     552:	88 27       	eor	r24, r24
     554:	77 fd       	sbrc	r23, 7
     556:	80 95       	com	r24
     558:	98 2f       	mov	r25, r24
     55a:	4e ef       	ldi	r20, 0xFE	; 254
     55c:	24 ef       	ldi	r18, 0xF4	; 244
     55e:	0e 94 a0 0b 	call	0x1740	; 0x1740 <DisplayValue>
  if (adcmv[0] < 90) {
     562:	2a e5       	ldi	r18, 0x5A	; 90
     564:	e2 16       	cp	r14, r18
     566:	f1 04       	cpc	r15, r1
     568:	2c f4       	brge	.+10     	; 0x574 <__stack+0x75>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[2]), (int8_t)adcmv[0]);	// fix zero offset
     56a:	8a ea       	ldi	r24, 0xAA	; 170
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	6e 2d       	mov	r22, r14
     570:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <__eewr_byte_m168>
  }
  if (adcmv[1] < 90) {
     574:	8a e5       	ldi	r24, 0x5A	; 90
     576:	c8 16       	cp	r12, r24
     578:	d1 04       	cpc	r13, r1
     57a:	2c f4       	brge	.+10     	; 0x586 <__stack+0x87>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (int8_t)adcmv[1]);	// fix zero offset
     57c:	8b ea       	ldi	r24, 0xAB	; 171
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	6c 2d       	mov	r22, r12
     582:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <__eewr_byte_m168>
  }
  if (adcmv[2] < 90) {
     586:	ea e5       	ldi	r30, 0x5A	; 90
     588:	ae 16       	cp	r10, r30
     58a:	b1 04       	cpc	r11, r1
     58c:	2c f4       	brge	.+10     	; 0x598 <__stack+0x99>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
     58e:	89 ea       	ldi	r24, 0xA9	; 169
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	6a 2d       	mov	r22, r10
     594:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <__eewr_byte_m168>
  }
  wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
     598:	0e 94 ed 0c 	call	0x19da	; 0x19da <wait_for_key_5s_line2>
     59c:	18 e7       	ldi	r17, 0x78	; 120
  } //end for tt
#else
  // without extended tests
  for (ww=0;ww<120;ww++) {
     // wait 1 minute for releasing the probes
     lcd_line2();		//Cursor to column 1, row 2
     59e:	80 ec       	ldi	r24, 0xC0	; 192
     5a0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     lcd_clear_line();		// clear total line
     5a4:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_clear_line>
     lcd_line2();		//Cursor to column 1, row 2
     5a8:	80 ec       	ldi	r24, 0xC0	; 192
     5aa:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     lcd_fix_string(RELPROBE);	// "Release Probes"
     5ae:	8c ec       	ldi	r24, 0xCC	; 204
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     wait_about500ms();
     5b6:	84 e6       	ldi	r24, 0x64	; 100
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
     if (AllProbesShorted() == 0) break;
     5be:	0e 94 17 02 	call	0x42e	; 0x42e <AllProbesShorted>
     5c2:	88 23       	and	r24, r24
     5c4:	11 f0       	breq	.+4      	; 0x5ca <__stack+0xcb>
     5c6:	11 50       	subi	r17, 0x01	; 1
     } //end for ww
     wait_about1s();
  } //end for tt
#else
  // without extended tests
  for (ww=0;ww<120;ww++) {
     5c8:	51 f7       	brne	.-44     	; 0x59e <__stack+0x9f>
     wait_about500ms();
     if (AllProbesShorted() == 0) break;
  }
#endif

  lcd_clear();
     5ca:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  lcd_fix_string(RIHI);	// "RiHi="
     5ce:	87 e5       	ldi	r24, 0x57	; 87
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  DisplayValue(RRpinPL,-1,LCD_CHAR_OMEGA,3);
     5d6:	60 91 37 01 	lds	r22, 0x0137
     5da:	70 91 38 01 	lds	r23, 0x0138
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	4f ef       	ldi	r20, 0xFF	; 255
     5e4:	24 ef       	ldi	r18, 0xF4	; 244
     5e6:	03 e0       	ldi	r16, 0x03	; 3
     5e8:	0e 94 a0 0b 	call	0x1740	; 0x1740 <DisplayValue>
  lcd_line2();
     5ec:	80 ec       	ldi	r24, 0xC0	; 192
     5ee:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_string(RILO);	// "RiLo="
     5f2:	8e e5       	ldi	r24, 0x5E	; 94
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  DisplayValue(RRpinMI,-1,LCD_CHAR_OMEGA,3);
     5fa:	60 91 3d 01 	lds	r22, 0x013D
     5fe:	70 91 3e 01 	lds	r23, 0x013E
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	4f ef       	ldi	r20, 0xFF	; 255
     608:	24 ef       	ldi	r18, 0xF4	; 244
     60a:	0e 94 a0 0b 	call	0x1740	; 0x1740 <DisplayValue>
  wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
     60e:	0e 94 ed 0c 	call	0x19da	; 0x19da <wait_for_key_5s_line2>

  //measure Zero offset for Capacity measurement
  PartFound = PART_NONE;
     612:	10 92 07 01 	sts	0x0107, r1
  lcd_clear();
     616:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  lcd_fix_string(C0_str);			//output "C0 "
     61a:	85 e6       	ldi	r24, 0x65	; 101
     61c:	91 e0       	ldi	r25, 0x01	; 1
     61e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  ReadCapacity(TP3, TP1);
     622:	82 e0       	ldi	r24, 0x02	; 2
     624:	60 e0       	ldi	r22, 0x00	; 0
     626:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <ReadCapacity>
  adcmv[5] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:3
     62a:	00 91 72 01 	lds	r16, 0x0172
     62e:	10 91 73 01 	lds	r17, 0x0173
     632:	1c 87       	std	Y+12, r17	; 0x0c
     634:	0b 87       	std	Y+11, r16	; 0x0b
  ReadCapacity(TP3, TP2);
     636:	82 e0       	ldi	r24, 0x02	; 2
     638:	61 e0       	ldi	r22, 0x01	; 1
     63a:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <ReadCapacity>
  adcmv[6] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:3
     63e:	e0 90 72 01 	lds	r14, 0x0172
     642:	f0 90 73 01 	lds	r15, 0x0173
     646:	fe 86       	std	Y+14, r15	; 0x0e
     648:	ed 86       	std	Y+13, r14	; 0x0d
  ReadCapacity(TP2, TP1);
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	60 e0       	ldi	r22, 0x00	; 0
     64e:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <ReadCapacity>
  adcmv[2] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:2
     652:	c0 90 72 01 	lds	r12, 0x0172
     656:	d0 90 73 01 	lds	r13, 0x0173
     65a:	de 82       	std	Y+6, r13	; 0x06
     65c:	cd 82       	std	Y+5, r12	; 0x05
  ReadCapacity(TP1, TP3);
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	62 e0       	ldi	r22, 0x02	; 2
     662:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <ReadCapacity>
  adcmv[1] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:1
     666:	80 91 72 01 	lds	r24, 0x0172
     66a:	90 91 73 01 	lds	r25, 0x0173
     66e:	9c 83       	std	Y+4, r25	; 0x04
     670:	8b 83       	std	Y+3, r24	; 0x03
  ReadCapacity(TP2, TP3);
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	62 e0       	ldi	r22, 0x02	; 2
     676:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <ReadCapacity>
  adcmv[4] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:2
     67a:	80 91 72 01 	lds	r24, 0x0172
     67e:	90 91 73 01 	lds	r25, 0x0173
     682:	9a 87       	std	Y+10, r25	; 0x0a
     684:	89 87       	std	Y+9, r24	; 0x09
  ReadCapacity(TP1, TP2);
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	61 e0       	ldi	r22, 0x01	; 1
     68a:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <ReadCapacity>
  adcmv[0] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:1
     68e:	80 91 72 01 	lds	r24, 0x0172
     692:	90 91 73 01 	lds	r25, 0x0173
     696:	9a 83       	std	Y+2, r25	; 0x02
     698:	89 83       	std	Y+1, r24	; 0x01
  adcmv[3] = adcmv[0];			// same as first for the checking loop, mark as calibrated
     69a:	98 87       	std	Y+8, r25	; 0x08
     69c:	8f 83       	std	Y+7, r24	; 0x07
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
     69e:	b8 01       	movw	r22, r16
     6a0:	88 27       	eor	r24, r24
     6a2:	77 fd       	sbrc	r23, 7
     6a4:	80 95       	com	r24
     6a6:	98 2f       	mov	r25, r24
     6a8:	40 e0       	ldi	r20, 0x00	; 0
     6aa:	20 e2       	ldi	r18, 0x20	; 32
     6ac:	03 e0       	ldi	r16, 0x03	; 3
     6ae:	0e 94 a0 0b 	call	0x1740	; 0x1740 <DisplayValue>
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
     6b2:	b7 01       	movw	r22, r14
     6b4:	88 27       	eor	r24, r24
     6b6:	77 fd       	sbrc	r23, 7
     6b8:	80 95       	com	r24
     6ba:	98 2f       	mov	r25, r24
     6bc:	40 e0       	ldi	r20, 0x00	; 0
     6be:	20 e2       	ldi	r18, 0x20	; 32
     6c0:	0e 94 a0 0b 	call	0x1740	; 0x1740 <DisplayValue>
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
     6c4:	b6 01       	movw	r22, r12
     6c6:	88 27       	eor	r24, r24
     6c8:	77 fd       	sbrc	r23, 7
     6ca:	80 95       	com	r24
     6cc:	98 2f       	mov	r25, r24
     6ce:	44 ef       	ldi	r20, 0xF4	; 244
     6d0:	26 e4       	ldi	r18, 0x46	; 70
     6d2:	0e 94 a0 0b 	call	0x1740	; 0x1740 <DisplayValue>
     6d6:	8e 01       	movw	r16, r28
     6d8:	0f 5f       	subi	r16, 0xFF	; 255
     6da:	1f 4f       	sbci	r17, 0xFF	; 255
// Selftest of the device and calibration 
void AutoCheck(void) {
     6dc:	9e 01       	movw	r18, r28
     6de:	21 5f       	subi	r18, 0xF1	; 241
     6e0:	3f 4f       	sbci	r19, 0xFF	; 255
     6e2:	f8 01       	movw	r30, r16
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {			//checking loop
      if ((adcmv[ww] > 190) || (adcmv[ww] < 10)) goto no_c0save;
     6e4:	81 91       	ld	r24, Z+
     6e6:	91 91       	ld	r25, Z+
     6e8:	0a 97       	sbiw	r24, 0x0a	; 10
     6ea:	85 3b       	cpi	r24, 0xB5	; 181
     6ec:	91 05       	cpc	r25, r1
     6ee:	e8 f4       	brcc	.+58     	; 0x72a <__stack+0x22b>
  adcmv[3] = adcmv[0];			// same as first for the checking loop, mark as calibrated
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {			//checking loop
     6f0:	e2 17       	cp	r30, r18
     6f2:	f3 07       	cpc	r31, r19
     6f4:	b9 f7       	brne	.-18     	; 0x6e4 <__stack+0x1e5>
     6f6:	ee 24       	eor	r14, r14
     6f8:	ff 24       	eor	r15, r15
      if ((adcmv[ww] > 190) || (adcmv[ww] < 10)) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
     6fa:	f8 01       	movw	r30, r16
     6fc:	60 81       	ld	r22, Z
     6fe:	0e 5f       	subi	r16, 0xFE	; 254
     700:	1f 4f       	sbci	r17, 0xFF	; 255
     702:	61 5f       	subi	r22, 0xF1	; 241
     704:	c7 01       	movw	r24, r14
     706:	8f 55       	subi	r24, 0x5F	; 95
     708:	9e 4f       	sbci	r25, 0xFE	; 254
     70a:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <__eewr_byte_m168>
     70e:	08 94       	sec
     710:	e1 1c       	adc	r14, r1
     712:	f1 1c       	adc	r15, r1
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {			//checking loop
      if ((adcmv[ww] > 190) || (adcmv[ww] < 10)) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
     714:	f7 e0       	ldi	r31, 0x07	; 7
     716:	ef 16       	cp	r14, r31
     718:	f1 04       	cpc	r15, r1
     71a:	79 f7       	brne	.-34     	; 0x6fa <__stack+0x1fb>
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
  }
  lcd_line2();
     71c:	80 ec       	ldi	r24, 0xC0	; 192
     71e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_string(OK_str);		// output "OK"
     722:	8a ee       	ldi	r24, 0xEA	; 234
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
no_c0save:
 #endif
 wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
     72a:	0e 94 ed 0c 	call	0x19da	; 0x19da <wait_for_key_5s_line2>
     72e:	50 e4       	ldi	r21, 0x40	; 64
     730:	c5 2e       	mov	r12, r21
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
     732:	10 e0       	ldi	r17, 0x00	; 0
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
     734:	4a e0       	ldi	r20, 0x0A	; 10
     736:	84 2e       	mov	r8, r20
     738:	91 2c       	mov	r9, r1
     73a:	a1 2c       	mov	r10, r1
     73c:	b1 2c       	mov	r11, r1
     lcd_data('3');
     lcd_fix2_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
     73e:	3a e6       	ldi	r19, 0x6A	; 106
     740:	e3 2e       	mov	r14, r19
     742:	31 e0       	ldi	r19, 0x01	; 1
     744:	f3 2e       	mov	r15, r19
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
     lcd_clear();
     746:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
     lcd_data('1');
     74a:	81 e3       	ldi	r24, 0x31	; 49
     74c:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
     lcd_fix_string(CapZeich);	// "-||-"
     750:	8f e1       	ldi	r24, 0x1F	; 31
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_data('3');
     758:	83 e3       	ldi	r24, 0x33	; 51
     75a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
     lcd_fix2_string(MinCap_str); // " >100nF!"
     75e:	80 ef       	ldi	r24, 0xF0	; 240
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
     PartFound = PART_NONE;
     766:	10 92 07 01 	sts	0x0107, r1
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	60 e0       	ldi	r22, 0x00	; 0
     76e:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <ReadCapacity>
     772:	20 91 6a 01 	lds	r18, 0x016A
     776:	30 91 6b 01 	lds	r19, 0x016B
     77a:	40 91 6c 01 	lds	r20, 0x016C
     77e:	50 91 6d 01 	lds	r21, 0x016D
     782:	00 91 7c 01 	lds	r16, 0x017C
     while (cap.cpre < -9) {
     786:	07 c0       	rjmp	.+14     	; 0x796 <__stack+0x297>
        cap.cpre++;
        cap.cval /= 10;
     788:	ca 01       	movw	r24, r20
     78a:	b9 01       	movw	r22, r18
     78c:	a5 01       	movw	r20, r10
     78e:	94 01       	movw	r18, r8
     790:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
     794:	0f 5f       	subi	r16, 0xFF	; 255
     lcd_data('3');
     lcd_fix2_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
     796:	07 3f       	cpi	r16, 0xF7	; 247
     798:	bc f3       	brlt	.-18     	; 0x788 <__stack+0x289>
     79a:	00 93 7c 01 	sts	0x017C, r16
     79e:	20 93 6a 01 	sts	0x016A, r18
     7a2:	f7 01       	movw	r30, r14
     7a4:	31 83       	std	Z+1, r19	; 0x01
     7a6:	42 83       	std	Z+2, r20	; 0x02
     7a8:	53 83       	std	Z+3, r21	; 0x03
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000) &&
     7aa:	07 3f       	cpi	r16, 0xF7	; 247
     7ac:	09 f0       	breq	.+2      	; 0x7b0 <__stack+0x2b1>
     7ae:	be c0       	rjmp	.+380    	; 0x92c <__stack+0x42d>
     7b0:	20 36       	cpi	r18, 0x60	; 96
     7b2:	31 05       	cpc	r19, r1
     7b4:	41 05       	cpc	r20, r1
     7b6:	51 05       	cpc	r21, r1
     7b8:	08 f4       	brcc	.+2      	; 0x7bc <__stack+0x2bd>
     7ba:	b8 c0       	rjmp	.+368    	; 0x92c <__stack+0x42d>
     7bc:	20 3f       	cpi	r18, 0xF0	; 240
     7be:	f5 e5       	ldi	r31, 0x55	; 85
     7c0:	3f 07       	cpc	r19, r31
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	4f 07       	cpc	r20, r31
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	5f 07       	cpc	r21, r31
     7ca:	08 f0       	brcs	.+2      	; 0x7ce <__stack+0x2cf>
     7cc:	af c0       	rjmp	.+350    	; 0x92c <__stack+0x42d>
         (load_diff > -150) && (load_diff < 150)) {
     7ce:	60 91 7e 01 	lds	r22, 0x017E
     7d2:	70 91 7f 01 	lds	r23, 0x017F
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000) &&
     7d6:	2f ef       	ldi	r18, 0xFF	; 255
     7d8:	6b 36       	cpi	r22, 0x6B	; 107
     7da:	72 07       	cpc	r23, r18
     7dc:	0c f4       	brge	.+2      	; 0x7e0 <__stack+0x2e1>
     7de:	a6 c0       	rjmp	.+332    	; 0x92c <__stack+0x42d>
         (load_diff > -150) && (load_diff < 150)) {
     7e0:	66 39       	cpi	r22, 0x96	; 150
     7e2:	71 05       	cpc	r23, r1
     7e4:	0c f0       	brlt	.+2      	; 0x7e8 <__stack+0x2e9>
     7e6:	a2 c0       	rjmp	.+324    	; 0x92c <__stack+0x42d>
        cap_found++;
     7e8:	1f 5f       	subi	r17, 0xFF	; 255
     } else {
        cap_found = 0;		// wait for stable connection
     }
     if (cap_found > 1) {
     7ea:	12 30       	cpi	r17, 0x02	; 2
     7ec:	09 f0       	breq	.+2      	; 0x7f0 <__stack+0x2f1>
     7ee:	9f c0       	rjmp	.+318    	; 0x92e <__stack+0x42f>
        // value of capacitor is correct
        (void) eeprom_write_word((uint16_t *)(&ref_offset), load_diff);	// hold zero offset + slew rate dependend offset
     7f0:	8f e9       	ldi	r24, 0x9F	; 159
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__eewr_word_m168>
        lcd_clear();
     7f8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
        lcd_fix2_string(REF_C_str);	// "REF_C="
     7fc:	88 ef       	ldi	r24, 0xF8	; 248
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
        lcd_string(itoa(load_diff, outval, 10));	//output REF_C_KORR
     804:	80 91 7e 01 	lds	r24, 0x017E
     808:	90 91 7f 01 	lds	r25, 0x017F
     80c:	6d e0       	ldi	r22, 0x0D	; 13
     80e:	71 e0       	ldi	r23, 0x01	; 1
     810:	4a e0       	ldi	r20, 0x0A	; 10
     812:	50 e0       	ldi	r21, 0x00	; 0
     814:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <itoa>
     818:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_string>
        wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
        }
//#######################################
#endif
  #ifdef AUTOSCALE_ADC
        ADC_PORT =  TXD_VAL;	//ADC-Port 1 to GND
     81c:	88 e0       	ldi	r24, 0x08	; 8
     81e:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
     820:	89 e0       	ldi	r24, 0x09	; 9
     822:	87 b9       	out	0x07, r24	; 7
        R_DDR = 1<<PIN_RH3;		//Pin 3 over R_H to GND
     824:	80 e2       	ldi	r24, 0x20	; 32
     826:	84 b9       	out	0x04, r24	; 4
        do {
           adcmv[0] = ReadADC(TP3);
     828:	82 e0       	ldi	r24, 0x02	; 2
     82a:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
        } while (adcmv[0] > 980);
     82e:	e3 e0       	ldi	r30, 0x03	; 3
     830:	85 3d       	cpi	r24, 0xD5	; 213
     832:	9e 07       	cpc	r25, r30
     834:	cc f7       	brge	.-14     	; 0x828 <__stack+0x329>
        R_DDR = 0;		//all Pins to input 
     836:	14 b8       	out	0x04, r1	; 4
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
     838:	10 92 34 01 	sts	0x0134, r1
     83c:	10 92 33 01 	sts	0x0133, r1
        adcmv[0] = ReadADC(TP3);  // get cap voltage with VCC reference
     840:	82 e0       	ldi	r24, 0x02	; 2
     842:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
     846:	4c 01       	movw	r8, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
     848:	8e e9       	ldi	r24, 0x9E	; 158
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <__eerd_byte_m168>
     850:	99 27       	eor	r25, r25
     852:	87 fd       	sbrc	r24, 7
     854:	90 95       	com	r25
     856:	20 91 39 01 	lds	r18, 0x0139
     85a:	30 91 3a 01 	lds	r19, 0x013A
     85e:	82 0f       	add	r24, r18
     860:	93 1f       	adc	r25, r19
     862:	90 93 34 01 	sts	0x0134, r25
     866:	80 93 33 01 	sts	0x0133, r24
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
     86a:	82 e0       	ldi	r24, 0x02	; 2
     86c:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
     870:	5c 01       	movw	r10, r24
        adcmv[1] += adcmv[1];		// double the value
     872:	aa 0c       	add	r10, r10
     874:	bb 1c       	adc	r11, r11
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
     876:	10 92 34 01 	sts	0x0134, r1
     87a:	10 92 33 01 	sts	0x0133, r1
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
     87e:	82 e0       	ldi	r24, 0x02	; 2
     880:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
     884:	6c 01       	movw	r12, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
     886:	00 91 39 01 	lds	r16, 0x0139
     88a:	10 91 3a 01 	lds	r17, 0x013A
     88e:	8e e9       	ldi	r24, 0x9E	; 158
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <__eerd_byte_m168>
     896:	99 27       	eor	r25, r25
     898:	87 fd       	sbrc	r24, 7
     89a:	90 95       	com	r25
     89c:	80 0f       	add	r24, r16
     89e:	91 1f       	adc	r25, r17
     8a0:	90 93 34 01 	sts	0x0134, r25
     8a4:	80 93 33 01 	sts	0x0133, r24
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1])) * ADC_internal_reference / adcmv[1])+REF_R_KORR;
     8a8:	8e e9       	ldi	r24, 0x9E	; 158
     8aa:	91 e0       	ldi	r25, 0x01	; 1
     8ac:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <__eerd_byte_m168>
     8b0:	f8 2e       	mov	r15, r24
        lcd_line2();
     8b2:	80 ec       	ldi	r24, 0xC0	; 192
     8b4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
        lcd_fix2_string(REF_R_str);	// "REF_R="
     8b8:	8f ef       	ldi	r24, 0xFF	; 255
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
     8c0:	8e e9       	ldi	r24, 0x9E	; 158
     8c2:	91 e0       	ldi	r25, 0x01	; 1
     8c4:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <__eerd_byte_m168>
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
        adcmv[1] += adcmv[1];		// double the value
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
        ADCconfig.U_Bandgap = ADC_internal_reference;
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1])) * ADC_internal_reference / adcmv[1])+REF_R_KORR;
     8c8:	93 e0       	ldi	r25, 0x03	; 3
     8ca:	e9 2e       	mov	r14, r25
     8cc:	e8 0e       	add	r14, r24
     8ce:	c8 0c       	add	r12, r8
     8d0:	d9 1c       	adc	r13, r9
     8d2:	ca 18       	sub	r12, r10
     8d4:	db 08       	sbc	r13, r11
     8d6:	b6 01       	movw	r22, r12
     8d8:	88 27       	eor	r24, r24
     8da:	77 fd       	sbrc	r23, 7
     8dc:	80 95       	com	r24
     8de:	98 2f       	mov	r25, r24
     8e0:	2f 2d       	mov	r18, r15
     8e2:	33 27       	eor	r19, r19
     8e4:	27 fd       	sbrc	r18, 7
     8e6:	30 95       	com	r19
     8e8:	20 0f       	add	r18, r16
     8ea:	31 1f       	adc	r19, r17
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	50 e0       	ldi	r21, 0x00	; 0
     8f0:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
     8f4:	95 01       	movw	r18, r10
     8f6:	44 27       	eor	r20, r20
     8f8:	37 fd       	sbrc	r19, 7
     8fa:	40 95       	com	r20
     8fc:	54 2f       	mov	r21, r20
     8fe:	0e 94 48 1f 	call	0x3e90	; 0x3e90 <__divmodsi4>
        lcd_line2();
        lcd_fix2_string(REF_R_str);	// "REF_R="
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
     902:	e2 0e       	add	r14, r18
        (void) eeprom_write_byte((uint8_t *)(&RefDiff), (uint8_t)udiff2);	// hold offset for true reference Voltage
     904:	8e e9       	ldi	r24, 0x9E	; 158
     906:	91 e0       	ldi	r25, 0x01	; 1
     908:	6e 2d       	mov	r22, r14
     90a:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <__eewr_byte_m168>
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
     90e:	8e 2d       	mov	r24, r14
     910:	99 27       	eor	r25, r25
     912:	87 fd       	sbrc	r24, 7
     914:	90 95       	com	r25
     916:	6d e0       	ldi	r22, 0x0D	; 13
     918:	71 e0       	ldi	r23, 0x01	; 1
     91a:	4a e0       	ldi	r20, 0x0A	; 10
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <itoa>
     922:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_string>
  #endif
        wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
     926:	0e 94 ed 0c 	call	0x19da	; 0x19da <wait_for_key_5s_line2>
        break;
     92a:	19 c0       	rjmp	.+50     	; 0x95e <__stack+0x45f>
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000) &&
         (load_diff > -150) && (load_diff < 150)) {
     92c:	10 e0       	ldi	r17, 0x00	; 0
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
  #endif
        wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
        break;
     }
     lcd_line2();
     92e:	80 ec       	ldi	r24, 0xC0	; 192
     930:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     DisplayValue(cap.cval,cap.cpre,'F',4);
     934:	60 91 6a 01 	lds	r22, 0x016A
     938:	70 91 6b 01 	lds	r23, 0x016B
     93c:	80 91 6c 01 	lds	r24, 0x016C
     940:	90 91 6d 01 	lds	r25, 0x016D
     944:	40 91 7c 01 	lds	r20, 0x017C
     948:	26 e4       	ldi	r18, 0x46	; 70
     94a:	04 e0       	ldi	r16, 0x04	; 4
     94c:	0e 94 a0 0b 	call	0x1740	; 0x1740 <DisplayValue>
     wait_about200ms();			// wait additional time
     950:	88 e2       	ldi	r24, 0x28	; 40
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
     958:	ca 94       	dec	r12
 wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
     95a:	09 f0       	breq	.+2      	; 0x95e <__stack+0x45f>
     95c:	f4 ce       	rjmp	.-536    	; 0x746 <__stack+0x247>
     wait_about200ms();			// wait additional time
  } // end for ww
 #endif


  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
     95e:	89 e1       	ldi	r24, 0x19	; 25
     960:	80 93 31 01 	sts	0x0131, r24
  lcd_clear();
     964:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  lcd_fix2_string(VERSION_str);	//"Version ..."
     968:	88 ed       	ldi	r24, 0xD8	; 216
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
  lcd_line2();
     970:	80 ec       	ldi	r24, 0xC0	; 192
     972:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_string(ATE);		//"Selftest End"
     976:	8b ed       	ldi	r24, 0xDB	; 219
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        // if key is pressed, don't repeat
        break;
     }
  }
 #endif
 PartFound = PART_NONE;
     97e:	10 92 07 01 	sts	0x0107, r1
 wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
     982:	0e 94 ed 0c 	call	0x19da	; 0x19da <wait_for_key_5s_line2>
 } 
     986:	2e 96       	adiw	r28, 0x0e	; 14
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	f8 94       	cli
     98c:	de bf       	out	0x3e, r29	; 62
     98e:	0f be       	out	0x3f, r0	; 63
     990:	cd bf       	out	0x3d, r28	; 61
     992:	cf 91       	pop	r28
     994:	df 91       	pop	r29
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	ff 90       	pop	r15
     99c:	ef 90       	pop	r14
     99e:	df 90       	pop	r13
     9a0:	cf 90       	pop	r12
     9a2:	bf 90       	pop	r11
     9a4:	af 90       	pop	r10
     9a6:	9f 90       	pop	r9
     9a8:	8f 90       	pop	r8
     9aa:	08 95       	ret

000009ac <mark_as_uncalibrated>:
void mark_as_uncalibrated( void) {
 uint8_t ii;
 if (!UnCalibrated) {
     9ac:	80 91 3c 01 	lds	r24, 0x013C
     9b0:	88 23       	and	r24, r24
     9b2:	69 f4       	brne	.+26     	; 0x9ce <mark_as_uncalibrated+0x22>
    // equipment has changed, zero capacity value is too high or zero resistance is too high
    ii = eeprom_read_byte((uint8_t *)&c_zero_tab[0]);	// read first zero offset
     9b4:	81 ea       	ldi	r24, 0xA1	; 161
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <__eerd_byte_m168>
    ii++;
     9bc:	68 2f       	mov	r22, r24
     9be:	6f 5f       	subi	r22, 0xFF	; 255
    // make the unused c_zero_tab[3] different to c_zero_tab[0] to mark uncalibrated 
    eeprom_write_byte((uint8_t *)&c_zero_tab[3], ii);	// mark uncalibrated permanent
     9c0:	84 ea       	ldi	r24, 0xA4	; 164
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <__eewr_byte_m168>
    UnCalibrated = 1;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	80 93 3c 01 	sts	0x013C, r24
     9ce:	08 95       	ret

000009d0 <GetIr>:
/* Get residual current in reverse direction of a diode */ 



//=================================================================
void GetIr(uint8_t hipin, uint8_t lopin) {
     9d0:	0f 93       	push	r16
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
  unsigned int ir_nano;
//  unsigned int ir_micro;
  uint8_t LoPinR_L;
  uint8_t HiADC;

  HiADC = pgm_read_byte(&PinADCtab[hipin]);
     9d6:	e8 2f       	mov	r30, r24
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	e3 51       	subi	r30, 0x13	; 19
     9dc:	ff 4f       	sbci	r31, 0xFF	; 255
     9de:	e4 91       	lpm	r30, Z+
  ADC_PORT = HiADC | TXD_VAL;		// switch ADC port to high level
     9e0:	e8 60       	ori	r30, 0x08	; 8
     9e2:	e8 b9       	out	0x08, r30	; 8
  ADC_DDR = HiADC | TXD_MSK;		// switch High Pin direct to VCC
     9e4:	e7 b9       	out	0x07, r30	; 7
  LoPinR_L = pgm_read_byte(&PinRLtab[lopin]);  //R_L mask for LowPin R_L load
     9e6:	e6 2f       	mov	r30, r22
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	e6 51       	subi	r30, 0x16	; 22
     9ec:	ff 4f       	sbci	r31, 0xFF	; 255
     9ee:	e4 91       	lpm	r30, Z+
  R_PORT = 0;				// switch R-Port to GND
     9f0:	15 b8       	out	0x05, r1	; 5
#if FLASHEND > 0x3fff
  R_DDR = pgm_read_byte(&PinRHtab[lopin]);  //R_H mask for LowPin R_H load
#else
  // R_H Pin must always be one pin number higher
  R_DDR = LoPinR_L + LoPinR_L;		// switch R_H port for LowPin to output (GND)
     9f2:	ee 0f       	add	r30, r30
     9f4:	e4 b9       	out	0x04, r30	; 4
#endif
  u_res = W5msReadADC(lopin);		// read voltage
     9f6:	86 2f       	mov	r24, r22
     9f8:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
     9fc:	ec 01       	movw	r28, r24
  if (u_res == 0) return;		// no Output, if no current in reverse direction
     9fe:	00 97       	sbiw	r24, 0x00	; 0
     a00:	f9 f0       	breq	.+62     	; 0xa40 <GetIr+0x70>
  lcd_fix_string(Ir_str);		// output text "  Ir="
     a02:	8f e3       	ldi	r24, 0x3F	; 63
     a04:	91 e0       	ldi	r25, 0x01	; 1
     a06:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
#ifdef WITH_IRMICRO
  if (u_res < 2500) {
#endif
     /* R_H_VAL has units of 10 Ohm, u_res has units of mV, ir_nano has units of nA */
     ir_nano = (unsigned long)(u_res * 100000UL) / R_H_VAL;
     a0a:	be 01       	movw	r22, r28
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	20 ea       	ldi	r18, 0xA0	; 160
     a12:	36 e8       	ldi	r19, 0x86	; 134
     a14:	41 e0       	ldi	r20, 0x01	; 1
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
     a1c:	28 e9       	ldi	r18, 0x98	; 152
     a1e:	37 eb       	ldi	r19, 0xB7	; 183
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
     DisplayValue(ir_nano,-9,'A',2);	// output two digits of current with nA units
     a28:	b9 01       	movw	r22, r18
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	47 ef       	ldi	r20, 0xF7	; 247
     a30:	21 e4       	ldi	r18, 0x41	; 65
     a32:	02 e0       	ldi	r16, 0x02	; 2
     a34:	0e 94 a0 0b 	call	0x1740	; 0x1740 <DisplayValue>
     /* RR680MI has units of 0.1 Ohm, u_res has units of mV, ir_micro has units of uA */
     ir_micro = (unsigned long)(u_res * 10000UL) / RR680MI;
     DisplayValue(ir_micro,-6,'A',2);	// output two digits of current in uA units
  }
#endif
  ADC_DDR = TXD_MSK;			// switch off
     a38:	88 e0       	ldi	r24, 0x08	; 8
     a3a:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;			// switch off
     a3c:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;				// switch off current
     a3e:	14 b8       	out	0x04, r1	; 4

  return ;
}
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	0f 91       	pop	r16
     a46:	08 95       	ret

00000a48 <main>:
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
  EMPTY_INTERRUPT(ADC_vect);
#endif

//begin of transistortester program
int main(void) {
     a48:	8f 92       	push	r8
     a4a:	9f 92       	push	r9
     a4c:	bf 92       	push	r11
     a4e:	cf 92       	push	r12
     a50:	df 92       	push	r13
     a52:	ef 92       	push	r14
     a54:	ff 92       	push	r15
     a56:	0f 93       	push	r16
     a58:	1f 93       	push	r17
     a5a:	df 93       	push	r29
     a5c:	cf 93       	push	r28
     a5e:	0f 92       	push	r0
     a60:	cd b7       	in	r28, 0x3d	; 61
     a62:	de b7       	in	r29, 0x3e	; 62
#ifdef SEARCH_PARASITIC
  unsigned long n_cval;		// capacitor value of NPN B-E diode, for deselecting the parasitic Transistor
  int8_t n_cpre;		// capacitor prefix of NPN B-E diode
#endif
  //switch on
  ON_DDR = (1<<ON_PIN);			// switch to output
     a64:	80 e4       	ldi	r24, 0x40	; 64
     a66:	8a b9       	out	0x0a, r24	; 10
#ifdef PULLUP_DISABLE
  ON_PORT = (1<<ON_PIN); 		// switch power on 
     a68:	8b b9       	out	0x0b, r24	; 11
#else
  ON_PORT = (1<<ON_PIN)|(1<<RST_PIN); 	// switch power on , enable internal Pullup for Start-Pin
#endif
  uint8_t tmp;
  //ADC-Init
  ADCSRA = (1<<ADEN) | AUTO_CLOCK_DIV;	//prescaler=8 or 64 (if 8Mhz clock)
     a6a:	86 e8       	ldi	r24, 0x86	; 134
     a6c:	80 93 7a 00 	sts	0x007A, r24
// #define WDRF_HOME MCU_STATUS_REG
 #define WDRF_HOME MCUCSR
#else
 #define WDRF_HOME MCUSR
#endif
  tmp = (WDRF_HOME & (1<<WDRF));	// save Watch Dog Flag
     a70:	14 b7       	in	r17, 0x34	; 52
  WDRF_HOME &= ~(1<<WDRF);	 	//reset Watch Dog flag
     a72:	84 b7       	in	r24, 0x34	; 52
     a74:	87 7f       	andi	r24, 0xF7	; 247
     a76:	84 bf       	out	0x34, r24	; 52
  wdt_disable();			// disable Watch Dog
     a78:	88 e1       	ldi	r24, 0x18	; 24
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
     a7e:	80 93 60 00 	sts	0x0060, r24
     a82:	10 92 60 00 	sts	0x0060, r1
     a86:	0f be       	out	0x3f, r0	; 63
#ifndef INHIBIT_SLEEP_MODE
  // switch off unused Parts
  PRR = (1<<PRTWI) | (1<<PRTIM0) | (1<<PRSPI) | (1<<PRUSART0);
     a88:	86 ea       	ldi	r24, 0xA6	; 166
     a8a:	80 93 64 00 	sts	0x0064, r24
  DIDR0 = (1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D);	
     a8e:	88 e3       	ldi	r24, 0x38	; 56
     a90:	80 93 7e 00 	sts	0x007E, r24
  TCCR2A = (0<<WGM21) | (0<<WGM20);		// Counter 2 normal mode
     a94:	10 92 b0 00 	sts	0x00B0, r1
 #if F_CPU == 4000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (0<<CS20);	//prescaler 256, 64us @ 2MHz
  #define T2_PERIOD 64
 #endif 
 #if F_CPU >= 8000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (1<<CS20);	//prescaler 1024, 128us @ 8MHz, 64us @ 16MHz
     a98:	87 e0       	ldi	r24, 0x07	; 7
     a9a:	80 93 b1 00 	sts	0x00B1, r24
  #define T2_PERIOD (1024 / (F_CPU / 1000000UL));	/* set to 128 or 64 us */
 #endif 
  sei();				// enable interrupts
     a9e:	78 94       	sei
#endif
  lcd_init();				//initialize LCD
     aa0:	0e 94 03 01 	call	0x206	; 0x206 <lcd_init>
	
//  ADC_PORT = TXD_VAL;
//  ADC_DDR = TXD_MSK;
  if(tmp) { 
     aa4:	13 ff       	sbrs	r17, 3
     aa6:	0a c0       	rjmp	.+20     	; 0xabc <main+0x74>
     // check if  Watchdog-Event 
     // this happens, if the Watchdog is not reset for 2s
     // can happen, if any loop in the Program doen't finish.
     lcd_line1();
     aa8:	80 e8       	ldi	r24, 0x80	; 128
     aaa:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     lcd_fix_string(TestTimedOut);	//Output Timeout
     aae:	83 eb       	ldi	r24, 0xB3	; 179
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     wait_about3s();				//wait for 3 s
     ab6:	88 e5       	ldi	r24, 0x58	; 88
     ab8:	92 e0       	ldi	r25, 0x02	; 2
     aba:	9a c0       	rjmp	.+308    	; 0xbf0 <main+0x1a8>
     ON_PORT = 0;			//shut off!
//     ON_DDR = (1<<ON_PIN);		//switch to GND
     return 0;
  }
  LCDLoadCustomChar(LCD_CHAR_DIODE1);	//Custom-Character Diode symbol
     abc:	88 e4       	ldi	r24, 0x48	; 72
     abe:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_customchar(DiodeIcon1);	//load Character  >|
     ac2:	8f e6       	ldi	r24, 0x6F	; 111
     ac4:	91 e0       	ldi	r25, 0x01	; 1
     ac6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_DIODE2);	//Custom-Character 
     aca:	80 e5       	ldi	r24, 0x50	; 80
     acc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_customchar(DiodeIcon2);	//load Character  |<
     ad0:	87 e7       	ldi	r24, 0x77	; 119
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_CAP);	//Custom-Character  Capacitor symbol
     ad8:	88 e5       	ldi	r24, 0x58	; 88
     ada:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_customchar(CapIcon);		//load Character  ||
     ade:	8f e7       	ldi	r24, 0x7F	; 127
     ae0:	91 e0       	ldi	r25, 0x01	; 1
     ae2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS1);	//Custom-Character Resistor symbol
     ae6:	88 e7       	ldi	r24, 0x78	; 120
     ae8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_customchar(ResIcon1);		//load Character  [
     aec:	87 e8       	ldi	r24, 0x87	; 135
     aee:	91 e0       	ldi	r25, 0x01	; 1
     af0:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS2);	//Custom-Character 
     af4:	80 e7       	ldi	r24, 0x70	; 112
     af6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_customchar(ResIcon2);		//load Character  ]
     afa:	8f e8       	ldi	r24, 0x8F	; 143
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
#endif
#ifdef PULLUP_DISABLE
 #ifdef __AVR_ATmega8__
  SFIOR = (1<<PUD);		// disable Pull-Up Resistors mega8
 #else
  MCUCR = (1<<PUD);		// disable Pull-Up Resistors mega168 family
     b02:	80 e1       	ldi	r24, 0x10	; 16
     b04:	85 bf       	out	0x35, r24	; 53
  lcd_line1();
#else
  lcd_clear();				// clear total display
#endif

  _trans = &ntrans;			// default transistor structure to show
     b06:	a2 e4       	ldi	r26, 0x42	; 66
     b08:	ca 2e       	mov	r12, r26
     b0a:	a1 e0       	ldi	r26, 0x01	; 1
     b0c:	da 2e       	mov	r13, r26
    goto end;
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    if((PartMode&P_CHANNEL) == P_CHANNEL) {
       lcd_data('P');			//P-channel
       _trans = &ptrans;
     b0e:	fa e5       	ldi	r31, 0x5A	; 90
     b10:	8f 2e       	mov	r8, r31
     b12:	f1 e0       	ldi	r31, 0x01	; 1
     b14:	9f 2e       	mov	r9, r31
#endif

//*****************************************************************
//Entry: if start key is pressed before shut down
start:
  PartFound = PART_NONE;	// no part found
     b16:	10 92 07 01 	sts	0x0107, r1
  NumOfDiodes = 0;		// Number of diodes = 0
     b1a:	10 92 05 01 	sts	0x0105, r1
  ptrans.count = 0;		// Number of found P type transistors
     b1e:	10 92 67 01 	sts	0x0167, r1
  ntrans.count = 0;		// Number of found N type transistors
     b22:	10 92 4f 01 	sts	0x014F, r1
  PartMode = PART_MODE_NONE;
     b26:	10 92 06 01 	sts	0x0106, r1
  WithReference = 0;		// no precision reference voltage
     b2a:	10 92 3f 01 	sts	0x013F, r1
  lcd_clear();			// clear the LCD
     b2e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  ADC_DDR = TXD_MSK;		//activate Software-UART 
     b32:	88 e0       	ldi	r24, 0x08	; 8
     b34:	87 b9       	out	0x07, r24	; 7
  ResistorsFound = 0;		// no resistors found
     b36:	10 92 68 01 	sts	0x0168, r1
  cap.ca = 0;
     b3a:	10 92 7a 01 	sts	0x017A, r1
  cap.cb = 0;
     b3e:	10 92 7b 01 	sts	0x017B, r1
#if FLASHEND > 0x1fff
  inductor_lpre = 0;		// mark as zero
     b42:	10 92 0b 01 	sts	0x010B, r1
#endif
#ifdef WITH_UART
  uart_newline();		// start of new measurement
     b46:	0e 94 df 00 	call	0x1be	; 0x1be <uart_newline>
#endif
  ADCconfig.RefFlag = 0;
     b4a:	10 92 32 01 	sts	0x0132, r1
  Calibrate_UR();		// get Ref Voltages and Pin resistance
     b4e:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <Calibrate_UR>
  lcd_line1();			// Cursor to 1. row, column 1
     b52:	80 e8       	ldi	r24, 0x80	; 128
     b54:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  
  ADCconfig.U_Bandgap = ADC_internal_reference;	// set internal reference voltage for ADC
     b58:	8e e9       	ldi	r24, 0x9E	; 158
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <__eerd_byte_m168>
     b60:	99 27       	eor	r25, r25
     b62:	87 fd       	sbrc	r24, 7
     b64:	90 95       	com	r25
     b66:	20 91 39 01 	lds	r18, 0x0139
     b6a:	30 91 3a 01 	lds	r19, 0x013A
     b6e:	82 0f       	add	r24, r18
     b70:	93 1f       	adc	r25, r19
     b72:	90 93 34 01 	sts	0x0134, r25
     b76:	80 93 33 01 	sts	0x0133, r24

#ifdef BAT_CHECK
  // Battery check is selected
  ReadADC(TPBAT);	//Dummy-Readout
     b7a:	85 e0       	ldi	r24, 0x05	; 5
     b7c:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
  ptrans.uBE = W5msReadADC(TPBAT); 	//with 5V reference
     b80:	85 e0       	ldi	r24, 0x05	; 5
     b82:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
     b86:	90 93 5f 01 	sts	0x015F, r25
     b8a:	80 93 5e 01 	sts	0x015E, r24
  lcd_fix_string(Bat_str);		//output: "Bat. "
     b8e:	84 ee       	ldi	r24, 0xE4	; 228
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
//  DisplayValue(cap.cval,-2,'V',2);		// Display 2 Digits of this 10mV units
#if BAT_NUMERATOR <= (0xffff/U_VCC)
  cap.cval = (ptrans.uBE*BAT_NUMERATOR)/BAT_DENOMINATOR + BAT_OUT;
#else
 #if (BAT_NUMERATOR == 133) && (BAT_DENOMINATOR == 33)
  cap.cval = (ptrans.uBE*4)+BAT_OUT;		// usually output only 2 digits
     b96:	60 91 5e 01 	lds	r22, 0x015E
     b9a:	70 91 5f 01 	lds	r23, 0x015F
     b9e:	66 0f       	add	r22, r22
     ba0:	77 1f       	adc	r23, r23
     ba2:	66 0f       	add	r22, r22
     ba4:	77 1f       	adc	r23, r23
     ba6:	6a 56       	subi	r22, 0x6A	; 106
     ba8:	7f 4f       	sbci	r23, 0xFF	; 255
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	60 93 6a 01 	sts	0x016A, r22
     bb2:	70 93 6b 01 	sts	0x016B, r23
     bb6:	80 93 6c 01 	sts	0x016C, r24
     bba:	90 93 6d 01 	sts	0x016D, r25
 #else
  cap.cval = ((unsigned long)ptrans.uBE*BAT_NUMERATOR)/BAT_DENOMINATOR + BAT_OUT;
 #endif
#endif
  DisplayValue(cap.cval,-3,'V',2);		// Display 2 Digits of this 10mV units
     bbe:	4d ef       	ldi	r20, 0xFD	; 253
     bc0:	26 e5       	ldi	r18, 0x56	; 86
     bc2:	02 e0       	ldi	r16, 0x02	; 2
     bc4:	0e 94 a0 0b 	call	0x1740	; 0x1740 <DisplayValue>
  lcd_space();
     bc8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>
  // less than 1.3 V only .1V difference to Warn-Level
  #define WARN_LEVEL (((unsigned long)(BAT_POOR+100)*(unsigned long)BAT_DENOMINATOR)/BAT_NUMERATOR)
 #endif
 #define POOR_LEVEL (((unsigned long)(BAT_POOR)*(unsigned long)BAT_DENOMINATOR)/BAT_NUMERATOR)
  // check the battery voltage
  if (ptrans.uBE <  WARN_LEVEL) {
     bcc:	80 91 5e 01 	lds	r24, 0x015E
     bd0:	90 91 5f 01 	lds	r25, 0x015F
     bd4:	26 e0       	ldi	r18, 0x06	; 6
     bd6:	8a 3f       	cpi	r24, 0xFA	; 250
     bd8:	92 07       	cpc	r25, r18
     bda:	88 f4       	brcc	.+34     	; 0xbfe <main+0x1b6>
     //Vcc < 7,3V; show Warning 
     if(ptrans.uBE < POOR_LEVEL) {	
     bdc:	e6 e0       	ldi	r30, 0x06	; 6
     bde:	83 33       	cpi	r24, 0x33	; 51
     be0:	9e 07       	cpc	r25, r30
     be2:	50 f4       	brcc	.+20     	; 0xbf8 <main+0x1b0>
        //Vcc <6,3V; no proper operation is possible
        lcd_fix_string(BatEmpty);	//Battery empty!
     be4:	8a e6       	ldi	r24, 0x6A	; 106
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        wait_about2s();
     bec:	80 e9       	ldi	r24, 0x90	; 144
     bee:	91 e0       	ldi	r25, 0x01	; 1
     bf0:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
        PORTD = 0;			//switch power off
     bf4:	1b b8       	out	0x0b, r1	; 11
        return 0;
     bf6:	46 c4       	rjmp	.+2188   	; 0x1484 <main+0xa3c>
     }
     lcd_fix_string(BatWeak);		//Battery weak
     bf8:	85 e6       	ldi	r24, 0x65	; 101
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <main+0x1ba>
  } else { // Battery-voltage OK
     lcd_fix_string(OK_str); 		// "OK"
     bfe:	8a ee       	ldi	r24, 0xEA	; 234
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  }
#else
  lcd_fix2_string(VERSION_str);		// if no Battery check, Version .. in row 1
#endif
#ifdef WDT_enabled
  wdt_enable(WDTO_2S);		//Watchdog on
     c06:	2f e0       	ldi	r18, 0x0F	; 15
     c08:	88 e1       	ldi	r24, 0x18	; 24
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	a8 95       	wdr
     c12:	80 93 60 00 	sts	0x0060, r24
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	20 93 60 00 	sts	0x0060, r18
#endif

//  wait_about1s();			// add more time for reading batterie voltage
  // begin tests
#ifdef AUTO_RH
  RefVoltage();			//compute RHmultip = f(reference voltage)
     c1c:	0e 94 8e 0c 	call	0x191c	; 0x191c <RefVoltage>
#endif
#if FLASHEND > 0x1fff
  if (WithReference) {
     c20:	80 91 3f 01 	lds	r24, 0x013F
     c24:	88 23       	and	r24, r24
     c26:	b1 f0       	breq	.+44     	; 0xc54 <main+0x20c>
 #if POWER_OFF+0 > 1
     if ((mess_count == 0) && (empty_count == 0))
 #endif
     {
         /* display VCC= only first time */
         lcd_line2();
     c28:	80 ec       	ldi	r24, 0xC0	; 192
     c2a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
         lcd_fix_string(VCC_str);		// VCC=
     c2e:	89 e2       	ldi	r24, 0x29	; 41
     c30:	91 e0       	ldi	r25, 0x01	; 1
     c32:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
         DisplayValue(ADCconfig.U_AVCC,-3,'V',3);	// Display 3 Digits of this mV units
     c36:	60 91 35 01 	lds	r22, 0x0135
     c3a:	70 91 36 01 	lds	r23, 0x0136
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	4d ef       	ldi	r20, 0xFD	; 253
     c44:	26 e5       	ldi	r18, 0x56	; 86
     c46:	03 e0       	ldi	r16, 0x03	; 3
     c48:	0e 94 a0 0b 	call	0x1740	; 0x1740 <DisplayValue>
         wait_about1s();
     c4c:	88 ec       	ldi	r24, 0xC8	; 200
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
     wait_about300ms();
  }
#endif

#ifndef DebugOut
  lcd_line2();			//LCD position row 2, column 1
     c54:	80 ec       	ldi	r24, 0xC0	; 192
     c56:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
#endif
  EntladePins();		// discharge all capacitors!
     c5a:	0e 94 0a 0b 	call	0x1614	; 0x1614 <EntladePins>
  if(PartFound == PART_CELL) {
     c5e:	80 91 07 01 	lds	r24, 0x0107
     c62:	88 30       	cpi	r24, 0x08	; 8
     c64:	39 f4       	brne	.+14     	; 0xc74 <main+0x22c>
    lcd_clear();
     c66:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
    lcd_fix_string(Cell_str);	// display "Cell!"
     c6a:	83 e2       	ldi	r24, 0x23	; 35
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     c72:	df c3       	rjmp	.+1982   	; 0x1432 <main+0x9ea>
#endif
    goto end;
  }

#ifdef CHECK_CALL
  AutoCheck();			//check, if selftest should be done
     c74:	0e 94 29 02 	call	0x452	; 0x452 <AutoCheck>
  lcd_line2();			//LCD position row2, column 1
     c78:	80 ec       	ldi	r24, 0xC0	; 192
     c7a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  UnCalibrated = 0;
     c7e:	10 92 3c 01 	sts	0x013C, r1
  if (eeprom_read_byte(&c_zero_tab[0]) != eeprom_read_byte(&c_zero_tab[3])) {
     c82:	81 ea       	ldi	r24, 0xA1	; 161
     c84:	91 e0       	ldi	r25, 0x01	; 1
     c86:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <__eerd_byte_m168>
     c8a:	18 2f       	mov	r17, r24
     c8c:	84 ea       	ldi	r24, 0xA4	; 164
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <__eerd_byte_m168>
     c94:	18 17       	cp	r17, r24
     c96:	31 f0       	breq	.+12     	; 0xca4 <main+0x25c>
     // if calibrated, both c_zero_tab values are identical! c_zero_tab[3] is not used otherwise
     UnCalibrated = 1;
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	80 93 3c 01 	sts	0x013C, r24
     lcd_data('!');
     c9e:	81 e2       	ldi	r24, 0x21	; 33
     ca0:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
  }
#else
  lcd_line2();			//LCD position row2, column 1
#endif
  lcd_fix_string(TestRunning);		//String: testing...
     ca4:	8a e5       	ldi	r24, 0x5A	; 90
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     
  // check all 6 combinations for the 3 pins 
//         High  Low  Tri
  CheckPins(TP1, TP2, TP3);
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	61 e0       	ldi	r22, 0x01	; 1
     cb0:	42 e0       	ldi	r20, 0x02	; 2
     cb2:	0e 94 0f 14 	call	0x281e	; 0x281e <CheckPins>
  CheckPins(TP2, TP1, TP3);
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	42 e0       	ldi	r20, 0x02	; 2
     cbc:	0e 94 0f 14 	call	0x281e	; 0x281e <CheckPins>

  CheckPins(TP1, TP3, TP2);
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	62 e0       	ldi	r22, 0x02	; 2
     cc4:	41 e0       	ldi	r20, 0x01	; 1
     cc6:	0e 94 0f 14 	call	0x281e	; 0x281e <CheckPins>
  CheckPins(TP3, TP1, TP2);
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	41 e0       	ldi	r20, 0x01	; 1
     cd0:	0e 94 0f 14 	call	0x281e	; 0x281e <CheckPins>

  CheckPins(TP2, TP3, TP1);
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	62 e0       	ldi	r22, 0x02	; 2
     cd8:	40 e0       	ldi	r20, 0x00	; 0
     cda:	0e 94 0f 14 	call	0x281e	; 0x281e <CheckPins>
  CheckPins(TP3, TP2, TP1);
     cde:	82 e0       	ldi	r24, 0x02	; 2
     ce0:	61 e0       	ldi	r22, 0x01	; 1
     ce2:	40 e0       	ldi	r20, 0x00	; 0
     ce4:	0e 94 0f 14 	call	0x281e	; 0x281e <CheckPins>

  if (ResistorsFound != 0) {
     ce8:	80 91 68 01 	lds	r24, 0x0168
     cec:	88 23       	and	r24, r24
     cee:	79 f0       	breq	.+30     	; 0xd0e <main+0x2c6>
     if (resis[ResistorsFound-1].checked  == 0) {
     cf0:	e8 2f       	mov	r30, r24
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	73 e0       	ldi	r23, 0x03	; 3
     cf6:	ee 0f       	add	r30, r30
     cf8:	ff 1f       	adc	r31, r31
     cfa:	7a 95       	dec	r23
     cfc:	e1 f7       	brne	.-8      	; 0xcf6 <main+0x2ae>
     cfe:	ef 5e       	subi	r30, 0xEF	; 239
     d00:	fe 4f       	sbci	r31, 0xFE	; 254
     d02:	97 81       	ldd	r25, Z+7	; 0x07
     d04:	99 23       	and	r25, r25
     d06:	19 f4       	brne	.+6      	; 0xd0e <main+0x2c6>
        ResistorsFound--;	// last resistor is not checked in both directions
     d08:	81 50       	subi	r24, 0x01	; 1
     d0a:	80 93 68 01 	sts	0x0168, r24
  }
  
  // Capacity measurement is only possible correctly with two Pins connected.
  // A third connected pin will increase the capacity value!
//  if(((PartFound == PART_NONE) || (PartFound == PART_RESISTOR) || (PartFound == PART_DIODE)) ) {
  if(PartFound == PART_NONE) {
     d0e:	80 91 07 01 	lds	r24, 0x0107
     d12:	88 23       	and	r24, r24
     d14:	e1 f4       	brne	.+56     	; 0xd4e <main+0x306>
     // If no part is found yet, check separate if is is a capacitor
#if FLASHEND > 0x1fff
     lcd_data('C');
     d16:	83 e4       	ldi	r24, 0x43	; 67
     d18:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
#endif
     EntladePins();		// discharge capacities
     d1c:	0e 94 0a 0b 	call	0x1614	; 0x1614 <EntladePins>
     //measurement of capacities in all 3 combinations
     cap.cval_max = 0;		// set max to zero
     d20:	10 92 6e 01 	sts	0x016E, r1
     d24:	10 92 6f 01 	sts	0x016F, r1
     d28:	10 92 70 01 	sts	0x0170, r1
     d2c:	10 92 71 01 	sts	0x0171, r1
     cap.cpre_max = -12;	// set max to pF unit
     d30:	84 ef       	ldi	r24, 0xF4	; 244
     d32:	80 93 7d 01 	sts	0x017D, r24
     ReadCapacity(TP3, TP1);
     d36:	82 e0       	ldi	r24, 0x02	; 2
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <ReadCapacity>
#if DebugOut != 10
     ReadCapacity(TP3, TP2);
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	61 e0       	ldi	r22, 0x01	; 1
     d42:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <ReadCapacity>
     ReadCapacity(TP2, TP1);
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <ReadCapacity>
  lcd_line2();
  lcd_line1();
  lcd_clear_line();
  lcd_line1();
#else
  lcd_clear();				// clear total display
     d4e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
#endif

  _trans = &ntrans;			// default transistor structure to show
     d52:	d0 92 41 01 	sts	0x0141, r13
     d56:	c0 92 40 01 	sts	0x0140, r12
  if (PartFound == PART_THYRISTOR) {
     d5a:	80 91 07 01 	lds	r24, 0x0107
     d5e:	85 30       	cpi	r24, 0x05	; 5
     d60:	19 f4       	brne	.+6      	; 0xd68 <main+0x320>
    lcd_fix_string(Thyristor);		//"Thyristor"
     d62:	85 e8       	ldi	r24, 0x85	; 133
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	04 c0       	rjmp	.+8      	; 0xd70 <main+0x328>
    goto gakAusgabe;
  }

  if (PartFound == PART_TRIAC) {
     d68:	86 30       	cpi	r24, 0x06	; 6
     d6a:	51 f4       	brne	.+20     	; 0xd80 <main+0x338>
    lcd_fix_string(Triac);		//"Triac"
     d6c:	8f e7       	ldi	r24, 0x7F	; 127
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  max_time = SHORT_WAIT_TIME;		// use allways the short wait time
  goto end2;


gakAusgabe:
  PinLayout(Cathode_char,'G','A'); 	// CGA= or 123=...
     d74:	83 e4       	ldi	r24, 0x43	; 67
     d76:	67 e4       	ldi	r22, 0x47	; 71
     d78:	41 e4       	ldi	r20, 0x41	; 65
     d7a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <PinLayout>
     d7e:	59 c3       	rjmp	.+1714   	; 0x1432 <main+0x9ea>
  if (PartFound == PART_TRIAC) {
    lcd_fix_string(Triac);		//"Triac"
    goto gakAusgabe;
  }

  if (PartFound == PART_CAPACITOR) {
     d80:	87 30       	cpi	r24, 0x07	; 7
     d82:	09 f0       	breq	.+2      	; 0xd86 <main+0x33e>
     d84:	50 c0       	rjmp	.+160    	; 0xe26 <main+0x3de>
//     lcd_fix_string(Capacitor);
     lcd_testpin(cap.ca);		//Pin number 1
     d86:	80 91 7a 01 	lds	r24, 0x017A
     d8a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
     lcd_fix_string(CapZeich);		// capacitor sign
     d8e:	8f e1       	ldi	r24, 0x1F	; 31
     d90:	91 e0       	ldi	r25, 0x01	; 1
     d92:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_testpin(cap.cb);		//Pin number 2
     d96:	80 91 7b 01 	lds	r24, 0x017B
     d9a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
#if FLASHEND > 0x1fff
     GetVloss();			// get Voltage loss of capacitor
     d9e:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <GetVloss>
     if (cap.v_loss != 0) {
     da2:	80 91 78 01 	lds	r24, 0x0178
     da6:	90 91 79 01 	lds	r25, 0x0179
     daa:	00 97       	sbiw	r24, 0x00	; 0
     dac:	79 f0       	breq	.+30     	; 0xdcc <main+0x384>
        lcd_fix_string(VLOSS_str);	// "  Vloss="
     dae:	84 e3       	ldi	r24, 0x34	; 52
     db0:	91 e0       	ldi	r25, 0x01	; 1
     db2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        DisplayValue(cap.v_loss,-1,'%',2);
     db6:	60 91 78 01 	lds	r22, 0x0178
     dba:	70 91 79 01 	lds	r23, 0x0179
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	4f ef       	ldi	r20, 0xFF	; 255
     dc4:	25 e2       	ldi	r18, 0x25	; 37
     dc6:	02 e0       	ldi	r16, 0x02	; 2
     dc8:	0e 94 a0 0b 	call	0x1740	; 0x1740 <DisplayValue>
     }
#endif
     lcd_line2(); 			//2. row 
     dcc:	80 ec       	ldi	r24, 0xC0	; 192
     dce:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     DisplayValue(cap.cval_max,cap.cpre_max,'F',4);
     dd2:	60 91 6e 01 	lds	r22, 0x016E
     dd6:	70 91 6f 01 	lds	r23, 0x016F
     dda:	80 91 70 01 	lds	r24, 0x0170
     dde:	90 91 71 01 	lds	r25, 0x0171
     de2:	40 91 7d 01 	lds	r20, 0x017D
     de6:	26 e4       	ldi	r18, 0x46	; 70
     de8:	04 e0       	ldi	r16, 0x04	; 4
     dea:	0e 94 a0 0b 	call	0x1740	; 0x1740 <DisplayValue>
#if FLASHEND > 0x1fff
     cap.esr = GetESR(cap.cb, cap.ca);		// get ESR of capacitor
     dee:	80 91 7b 01 	lds	r24, 0x017B
     df2:	60 91 7a 01 	lds	r22, 0x017A
     df6:	0e 94 5f 1b 	call	0x36be	; 0x36be <GetESR>
     dfa:	90 93 77 01 	sts	0x0177, r25
     dfe:	80 93 76 01 	sts	0x0176, r24
     if ( cap.esr < 65530) {
     e02:	ff ef       	ldi	r31, 0xFF	; 255
     e04:	8a 3f       	cpi	r24, 0xFA	; 250
     e06:	9f 07       	cpc	r25, r31
     e08:	08 f0       	brcs	.+2      	; 0xe0c <main+0x3c4>
     e0a:	13 c3       	rjmp	.+1574   	; 0x1432 <main+0x9ea>
        lcd_fix_string(ESR_str);
     e0c:	8e e2       	ldi	r24, 0x2E	; 46
     e0e:	91 e0       	ldi	r25, 0x01	; 1
     e10:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        DisplayValue(cap.esr,-2,LCD_CHAR_OMEGA,2);
     e14:	60 91 76 01 	lds	r22, 0x0176
     e18:	70 91 77 01 	lds	r23, 0x0177
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	4e ef       	ldi	r20, 0xFE	; 254
     e22:	24 ef       	ldi	r18, 0xF4	; 244
     e24:	58 c2       	rjmp	.+1200   	; 0x12d6 <main+0x88e>
     }
#endif
     goto end;
  }

  if(PartFound == PART_DIODE) {
     e26:	82 30       	cpi	r24, 0x02	; 2
     e28:	09 f0       	breq	.+2      	; 0xe2c <main+0x3e4>
     e2a:	de c0       	rjmp	.+444    	; 0xfe8 <main+0x5a0>
     if(NumOfDiodes == 1) {		//single Diode
     e2c:	80 91 05 01 	lds	r24, 0x0105
     e30:	81 30       	cpi	r24, 0x01	; 1
     e32:	e1 f5       	brne	.+120    	; 0xeac <main+0x464>
           lcd_fix_string(KatAn);	//"-|<-"
           lcd_testpin(diodes[0].Anode);
        }
 #else
        // the higher test pin number is right side
        if (diodes[0].Anode < diodes[0].Cathode) {
     e34:	90 91 80 01 	lds	r25, 0x0180
     e38:	80 91 81 01 	lds	r24, 0x0181
     e3c:	98 17       	cp	r25, r24
     e3e:	50 f4       	brcc	.+20     	; 0xe54 <main+0x40c>
           lcd_testpin(diodes[0].Anode);
     e40:	89 2f       	mov	r24, r25
     e42:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
     e46:	85 e4       	ldi	r24, 0x45	; 69
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[0].Cathode);
     e4e:	80 91 81 01 	lds	r24, 0x0181
     e52:	08 c0       	rjmp	.+16     	; 0xe64 <main+0x41c>
        } else {
           lcd_testpin(diodes[0].Cathode);
     e54:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
     e58:	89 e4       	ldi	r24, 0x49	; 73
     e5a:	91 e0       	ldi	r25, 0x01	; 1
     e5c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
     e60:	80 91 80 01 	lds	r24, 0x0180
     e64:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
        lcd_testpin(diodes[0].Anode);
        lcd_fix_string(AnKat);		//"->|-"
        lcd_testpin(diodes[0].Cathode);
#endif
#if FLASHEND > 0x1fff
	GetIr(diodes[0].Cathode,diodes[0].Anode);
     e68:	80 91 81 01 	lds	r24, 0x0181
     e6c:	60 91 80 01 	lds	r22, 0x0180
     e70:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <GetIr>
#endif
        UfAusgabe(0x70);
     e74:	80 e7       	ldi	r24, 0x70	; 112
     e76:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <UfAusgabe>
        /* load current of capacity is (5V-1.1V)/(470000 Ohm) = 8298nA */
        lcd_fix_string(GateCap_str);	//"C="
     e7a:	8d ef       	ldi	r24, 0xFD	; 253
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        ReadCapacity(diodes[0].Cathode,diodes[0].Anode);	// Capacity opposite flow direction
     e82:	80 91 81 01 	lds	r24, 0x0181
     e86:	60 91 80 01 	lds	r22, 0x0180
     e8a:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <ReadCapacity>
        DisplayValue(cap.cval,cap.cpre,'F',3);
     e8e:	60 91 6a 01 	lds	r22, 0x016A
     e92:	70 91 6b 01 	lds	r23, 0x016B
     e96:	80 91 6c 01 	lds	r24, 0x016C
     e9a:	90 91 6d 01 	lds	r25, 0x016D
     e9e:	40 91 7c 01 	lds	r20, 0x017C
     ea2:	26 e4       	ldi	r18, 0x46	; 70
     ea4:	03 e0       	ldi	r16, 0x03	; 3
     ea6:	0e 94 a0 0b 	call	0x1740	; 0x1740 <DisplayValue>
        goto end3;
     eaa:	d4 c2       	rjmp	.+1448   	; 0x1454 <main+0xa0c>
     } else if(NumOfDiodes == 2) { // double diode
     eac:	82 30       	cpi	r24, 0x02	; 2
     eae:	09 f0       	breq	.+2      	; 0xeb2 <main+0x46a>
     eb0:	47 c0       	rjmp	.+142    	; 0xf40 <main+0x4f8>
        lcd_data('2');
     eb2:	82 e3       	ldi	r24, 0x32	; 50
     eb4:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
        lcd_fix_string(Dioden);		//"diodes "
     eb8:	8d e4       	ldi	r24, 0x4D	; 77
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        if(diodes[0].Anode == diodes[1].Anode) { //Common Anode
     ec0:	80 91 80 01 	lds	r24, 0x0180
     ec4:	20 91 84 01 	lds	r18, 0x0184
     ec8:	82 17       	cp	r24, r18
     eca:	99 f4       	brne	.+38     	; 0xef2 <main+0x4aa>
           lcd_testpin(diodes[0].Cathode);
     ecc:	80 91 81 01 	lds	r24, 0x0181
     ed0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
     ed4:	89 e4       	ldi	r24, 0x49	; 73
     ed6:	91 e0       	ldi	r25, 0x01	; 1
     ed8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
     edc:	80 91 80 01 	lds	r24, 0x0180
     ee0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
     ee4:	85 e4       	ldi	r24, 0x45	; 69
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[1].Cathode);
     eec:	80 91 85 01 	lds	r24, 0x0185
     ef0:	16 c0       	rjmp	.+44     	; 0xf1e <main+0x4d6>
           UfAusgabe(0x01);
           goto end3;
        } 
        if(diodes[0].Cathode == diodes[1].Cathode) { //Common Cathode
     ef2:	30 91 81 01 	lds	r19, 0x0181
     ef6:	90 91 85 01 	lds	r25, 0x0185
     efa:	39 17       	cp	r19, r25
     efc:	b1 f4       	brne	.+44     	; 0xf2a <main+0x4e2>
           lcd_testpin(diodes[0].Anode);
     efe:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
     f02:	85 e4       	ldi	r24, 0x45	; 69
     f04:	91 e0       	ldi	r25, 0x01	; 1
     f06:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
	   lcd_testpin(diodes[0].Cathode);
     f0a:	80 91 81 01 	lds	r24, 0x0181
     f0e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
     f12:	89 e4       	ldi	r24, 0x49	; 73
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[1].Anode);
     f1a:	80 91 84 01 	lds	r24, 0x0184
     f1e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           UfAusgabe(0x01);
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <UfAusgabe>
           goto end3;
     f28:	95 c2       	rjmp	.+1322   	; 0x1454 <main+0xa0c>
//        else if ((diodes[0].Cathode == diodes[1].Anode) && (diodes[1].Cathode == diodes[0].Anode)) 
        } 
        if (diodes[0].Cathode == diodes[1].Anode) {
     f2a:	32 17       	cp	r19, r18
     f2c:	11 f4       	brne	.+4      	; 0xf32 <main+0x4ea>
           // normaly two serial diodes are detected as three diodes, but if the threshold is high
           // for both diodes, the third diode is not detected.
           // can also be Antiparallel
           diode_sequence = 0x01;	// 0 1
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	04 c0       	rjmp	.+8      	; 0xf3a <main+0x4f2>
           SerienDiodenAusgabe();
           goto end3;
        } 
        if (diodes[1].Cathode == diodes[0].Anode) {
     f32:	98 17       	cp	r25, r24
     f34:	09 f0       	breq	.+2      	; 0xf38 <main+0x4f0>
     f36:	41 c0       	rjmp	.+130    	; 0xfba <main+0x572>
           diode_sequence = 0x10;	// 1 0
     f38:	80 e1       	ldi	r24, 0x10	; 16
     f3a:	80 93 02 01 	sts	0x0102, r24
     f3e:	3a c0       	rjmp	.+116    	; 0xfb4 <main+0x56c>
           SerienDiodenAusgabe();
           goto end3;
        }
     } else if(NumOfDiodes == 3) {
     f40:	83 30       	cpi	r24, 0x03	; 3
     f42:	d9 f5       	brne	.+118    	; 0xfba <main+0x572>
        //Serial of 2 Diodes; was detected as 3 Diodes 
        diode_sequence = 0x33;	// 3 3
     f44:	83 e3       	ldi	r24, 0x33	; 51
     f46:	80 93 02 01 	sts	0x0102, r24
        /* Check for any constallation of 2 serial diodes:
          Only once the pin No of anyone Cathode is identical of another anode.
          two diodes in series is additionally detected as third big diode.
        */
        if(diodes[0].Cathode == diodes[1].Anode)
     f4a:	80 91 81 01 	lds	r24, 0x0181
     f4e:	90 91 84 01 	lds	r25, 0x0184
     f52:	89 17       	cp	r24, r25
     f54:	19 f4       	brne	.+6      	; 0xf5c <main+0x514>
          {
           diode_sequence = 0x01;	// 0 1
     f56:	21 e0       	ldi	r18, 0x01	; 1
     f58:	20 93 02 01 	sts	0x0102, r18
          }
        if(diodes[0].Anode == diodes[1].Cathode)
     f5c:	40 91 80 01 	lds	r20, 0x0180
     f60:	30 91 85 01 	lds	r19, 0x0185
     f64:	43 17       	cp	r20, r19
     f66:	19 f4       	brne	.+6      	; 0xf6e <main+0x526>
          {
           diode_sequence = 0x10;	// 1 0
     f68:	20 e1       	ldi	r18, 0x10	; 16
     f6a:	20 93 02 01 	sts	0x0102, r18
          }
        if(diodes[0].Cathode == diodes[2].Anode)
     f6e:	20 91 88 01 	lds	r18, 0x0188
     f72:	82 17       	cp	r24, r18
     f74:	19 f4       	brne	.+6      	; 0xf7c <main+0x534>
          {
           diode_sequence = 0x02;	// 0 2
     f76:	82 e0       	ldi	r24, 0x02	; 2
     f78:	80 93 02 01 	sts	0x0102, r24
          }
        if(diodes[0].Anode == diodes[2].Cathode)
     f7c:	80 91 89 01 	lds	r24, 0x0189
     f80:	48 17       	cp	r20, r24
     f82:	19 f4       	brne	.+6      	; 0xf8a <main+0x542>
          {
           diode_sequence = 0x20;	// 2 0
     f84:	40 e2       	ldi	r20, 0x20	; 32
     f86:	40 93 02 01 	sts	0x0102, r20
          }
        if(diodes[1].Cathode == diodes[2].Anode)
     f8a:	32 17       	cp	r19, r18
     f8c:	19 f4       	brne	.+6      	; 0xf94 <main+0x54c>
          {
           diode_sequence = 0x12;	// 1 2
     f8e:	22 e1       	ldi	r18, 0x12	; 18
     f90:	20 93 02 01 	sts	0x0102, r18
          }
        if(diodes[1].Anode == diodes[2].Cathode)
     f94:	98 17       	cp	r25, r24
     f96:	19 f4       	brne	.+6      	; 0xf9e <main+0x556>
          {
           diode_sequence = 0x21;	// 2 1
     f98:	81 e2       	ldi	r24, 0x21	; 33
     f9a:	80 93 02 01 	sts	0x0102, r24
        lcd_space();
        lcd_string(utoa(diodes[2].Voltage, outval, 10));
        lcd_line1();
#endif
//        if((ptrans.b<3) && (ptrans.c<3)) 
        if(diode_sequence < 0x22) {
     f9e:	80 91 02 01 	lds	r24, 0x0102
     fa2:	82 32       	cpi	r24, 0x22	; 34
     fa4:	50 f4       	brcc	.+20     	; 0xfba <main+0x572>
           lcd_data('3');
     fa6:	83 e3       	ldi	r24, 0x33	; 51
     fa8:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
           lcd_fix_string(Dioden);	//"Diodes "
     fac:	8d e4       	ldi	r24, 0x4D	; 77
     fae:	91 e0       	ldi	r25, 0x01	; 1
     fb0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           SerienDiodenAusgabe();
     fb4:	0e 94 86 0a 	call	0x150c	; 0x150c <SerienDiodenAusgabe>
           goto end3;
     fb8:	4d c2       	rjmp	.+1178   	; 0x1454 <main+0xa0c>
        }
     }  // end (NumOfDiodes == 3)
     lcd_fix_string(Bauteil);		//"Bauteil"
     fba:	8a e7       	ldi	r24, 0x7A	; 122
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_fix_string(Unknown); 		//" unbek."
     fc2:	8e e8       	ldi	r24, 0x8E	; 142
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_line2(); //2. row 
     fca:	80 ec       	ldi	r24, 0xC0	; 192
     fcc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     lcd_fix_string(OrBroken); 		//"oder defekt "
     fd0:	87 ea       	ldi	r24, 0xA7	; 167
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_data(NumOfDiodes + '0');
     fd8:	80 91 05 01 	lds	r24, 0x0105
     fdc:	80 5d       	subi	r24, 0xD0	; 208
     fde:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
     lcd_fix_string(AnKat);		//"->|-"
     fe2:	85 e4       	ldi	r24, 0x45	; 69
     fe4:	91 e0       	ldi	r25, 0x01	; 1
     fe6:	20 c2       	rjmp	.+1088   	; 0x1428 <main+0x9e0>
     goto not_known;
     // end (PartFound == PART_DIODE)
  } else if (PartFound == PART_TRANSISTOR) {
     fe8:	83 30       	cpi	r24, 0x03	; 3
     fea:	09 f0       	breq	.+2      	; 0xfee <main+0x5a6>
     fec:	b3 c0       	rjmp	.+358    	; 0x1154 <main+0x70c>
#ifdef SEARCH_PARASITIC
    if ((ptrans.count != 0) && (ntrans.count !=0)) {
     fee:	80 91 67 01 	lds	r24, 0x0167
     ff2:	88 23       	and	r24, r24
     ff4:	99 f1       	breq	.+102    	; 0x105c <main+0x614>
     ff6:	80 91 4f 01 	lds	r24, 0x014F
     ffa:	88 23       	and	r24, r24
     ffc:	79 f1       	breq	.+94     	; 0x105c <main+0x614>
       // Special Handling of NPNp and PNPn Transistor.
       // If a protection diode is built on the same structur as the NPN-Transistor,
       // a parasitic PNP-Transistor will be detected. 
       ReadCapacity(ntrans.e, ntrans.b);	// read capacity of NPN base-emitter
     ffe:	80 91 4e 01 	lds	r24, 0x014E
    1002:	60 91 4c 01 	lds	r22, 0x014C
    1006:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <ReadCapacity>
       n_cval = cap.cval;			// save the found capacity value
    100a:	e0 90 6a 01 	lds	r14, 0x016A
    100e:	f0 90 6b 01 	lds	r15, 0x016B
    1012:	00 91 6c 01 	lds	r16, 0x016C
    1016:	10 91 6d 01 	lds	r17, 0x016D
       n_cpre  = cap.cpre;			// and dimension
    101a:	b0 90 7c 01 	lds	r11, 0x017C
       ReadCapacity(ptrans.b, ptrans.e);	// read capacity of PNP base-emitter
    101e:	80 91 64 01 	lds	r24, 0x0164
    1022:	60 91 66 01 	lds	r22, 0x0166
    1026:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <ReadCapacity>
       if (((n_cpre == cap.cpre) && (cap.cval > n_cval)) || (cap.cpre > n_cpre)){
    102a:	80 91 7c 01 	lds	r24, 0x017C
    102e:	b8 16       	cp	r11, r24
    1030:	71 f4       	brne	.+28     	; 0x104e <main+0x606>
    1032:	80 91 6a 01 	lds	r24, 0x016A
    1036:	90 91 6b 01 	lds	r25, 0x016B
    103a:	a0 91 6c 01 	lds	r26, 0x016C
    103e:	b0 91 6d 01 	lds	r27, 0x016D
    1042:	e8 16       	cp	r14, r24
    1044:	f9 06       	cpc	r15, r25
    1046:	0a 07       	cpc	r16, r26
    1048:	1b 07       	cpc	r17, r27
    104a:	18 f0       	brcs	.+6      	; 0x1052 <main+0x60a>
    104c:	04 c0       	rjmp	.+8      	; 0x1056 <main+0x60e>
    104e:	b8 16       	cp	r11, r24
    1050:	14 f4       	brge	.+4      	; 0x1056 <main+0x60e>
          // the capacity value or dimension of the PNP B-E is greater than the NPN B-E
          PartMode = PART_MODE_PNP;
    1052:	8d e0       	ldi	r24, 0x0D	; 13
    1054:	01 c0       	rjmp	.+2      	; 0x1058 <main+0x610>
       } else {
          PartMode = PART_MODE_NPN;
    1056:	8c e0       	ldi	r24, 0x0C	; 12
    1058:	80 93 06 01 	sts	0x0106, r24
       }
    }
#endif
#if FLASHEND > 0x1fff
    if ((ptrans.count != 0) && (ntrans.count !=0) && (!(ON_PIN_REG & (1<<RST_PIN)))) {
    105c:	80 91 67 01 	lds	r24, 0x0167
    1060:	88 23       	and	r24, r24
    1062:	79 f0       	breq	.+30     	; 0x1082 <main+0x63a>
    1064:	80 91 4f 01 	lds	r24, 0x014F
    1068:	88 23       	and	r24, r24
    106a:	59 f0       	breq	.+22     	; 0x1082 <main+0x63a>
    106c:	4f 99       	sbic	0x09, 7	; 9
    106e:	09 c0       	rjmp	.+18     	; 0x1082 <main+0x63a>
       // if the Start key is still pressed, use the other Transistor
       if (PartMode == PART_MODE_NPN) {
    1070:	80 91 06 01 	lds	r24, 0x0106
    1074:	8c 30       	cpi	r24, 0x0C	; 12
    1076:	11 f4       	brne	.+4      	; 0x107c <main+0x634>
          PartMode = PART_MODE_PNP;	// switch to parasitic transistor
    1078:	8d e0       	ldi	r24, 0x0D	; 13
    107a:	01 c0       	rjmp	.+2      	; 0x107e <main+0x636>
       } else {
          PartMode = PART_MODE_NPN;	// switch to parasitic transistor
    107c:	8c e0       	ldi	r24, 0x0C	; 12
    107e:	80 93 06 01 	sts	0x0106, r24
       }
    }
#endif

    if(PartMode == PART_MODE_NPN) {
    1082:	80 91 06 01 	lds	r24, 0x0106
    1086:	8c 30       	cpi	r24, 0x0C	; 12
    1088:	61 f4       	brne	.+24     	; 0x10a2 <main+0x65a>
       lcd_fix_string(NPN_str);		//"NPN "
    108a:	83 e0       	ldi	r24, 0x03	; 3
    108c:	91 e0       	ldi	r25, 0x01	; 1
    108e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
#if FLASHEND > 0x1fff
       if (ptrans.count != 0) {
    1092:	80 91 67 01 	lds	r24, 0x0167
    1096:	88 23       	and	r24, r24
    1098:	99 f0       	breq	.+38     	; 0x10c0 <main+0x678>
          lcd_data('p');		// mark for parasitic PNp
    109a:	80 e7       	ldi	r24, 0x70	; 112
    109c:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
    10a0:	0f c0       	rjmp	.+30     	; 0x10c0 <main+0x678>
       }
#endif
//       _trans = &ntrans;  is allready selected a default
    } else {
       lcd_fix_string(PNP_str);		//"PNP "
    10a2:	87 e0       	ldi	r24, 0x07	; 7
    10a4:	91 e0       	ldi	r25, 0x01	; 1
    10a6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
#if FLASHEND > 0x1fff
       if (ntrans.count != 0) {
    10aa:	80 91 4f 01 	lds	r24, 0x014F
    10ae:	88 23       	and	r24, r24
    10b0:	19 f0       	breq	.+6      	; 0x10b8 <main+0x670>
          lcd_data('n');		// mark for parasitic NPn
    10b2:	8e e6       	ldi	r24, 0x6E	; 110
    10b4:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       }
#endif
       _trans = &ptrans;		// change transistor structure
    10b8:	90 92 41 01 	sts	0x0141, r9
    10bc:	80 92 40 01 	sts	0x0140, r8
    }
    lcd_space();
    10c0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>
    if( NumOfDiodes > 2) {	//Transistor with protection diode
    10c4:	80 91 05 01 	lds	r24, 0x0105
    10c8:	83 30       	cpi	r24, 0x03	; 3
    10ca:	c0 f0       	brcs	.+48     	; 0x10fc <main+0x6b4>
       // Layout with EBC= style
       if(PartMode == PART_MODE_NPN)
 #endif
#else
       // Layout with 123= style
       if (((PartMode == PART_MODE_NPN) && (ntrans.c > ntrans.e)) || ((PartMode != PART_MODE_NPN) && (ptrans.c < ptrans.e)))
    10cc:	80 91 06 01 	lds	r24, 0x0106
    10d0:	8c 30       	cpi	r24, 0x0C	; 12
    10d2:	39 f4       	brne	.+14     	; 0x10e2 <main+0x69a>
    10d4:	90 91 4d 01 	lds	r25, 0x014D
    10d8:	80 91 4e 01 	lds	r24, 0x014E
    10dc:	89 17       	cp	r24, r25
    10de:	38 f0       	brcs	.+14     	; 0x10ee <main+0x6a6>
    10e0:	09 c0       	rjmp	.+18     	; 0x10f4 <main+0x6ac>
    10e2:	90 91 65 01 	lds	r25, 0x0165
    10e6:	80 91 66 01 	lds	r24, 0x0166
    10ea:	98 17       	cp	r25, r24
    10ec:	18 f4       	brcc	.+6      	; 0x10f4 <main+0x6ac>
#endif
       {
          lcd_fix_string(AnKat);	//"->|-"
    10ee:	85 e4       	ldi	r24, 0x45	; 69
    10f0:	91 e0       	ldi	r25, 0x01	; 1
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <main+0x6b0>
       } else {
          lcd_fix_string(KatAn);	//"-|<-"
    10f4:	89 e4       	ldi	r24, 0x49	; 73
    10f6:	91 e0       	ldi	r25, 0x01	; 1
    10f8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       }
    }
    PinLayout('E','B','C'); 		//  EBC= or 123=...
    10fc:	85 e4       	ldi	r24, 0x45	; 69
    10fe:	62 e4       	ldi	r22, 0x42	; 66
    1100:	43 e4       	ldi	r20, 0x43	; 67
    1102:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <PinLayout>
    lcd_line2(); //2. row 
    1106:	80 ec       	ldi	r24, 0xC0	; 192
    1108:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
       lcd_fix2_string(ICEs_str);		// "ICEs="
       DisplayValue(_trans->ices,-5,'A',3);
       wait_for_key_5s_line2();		// wait 5s and clear line 2
    }
#endif
    lcd_fix_string(hfe_str);		//"B="  (hFE)
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	91 e0       	ldi	r25, 0x01	; 1
    1110:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    DisplayValue(_trans->hfe,0,0,3);
    1114:	e0 91 40 01 	lds	r30, 0x0140
    1118:	f0 91 41 01 	lds	r31, 0x0141
    111c:	60 81       	ld	r22, Z
    111e:	71 81       	ldd	r23, Z+1	; 0x01
    1120:	82 81       	ldd	r24, Z+2	; 0x02
    1122:	93 81       	ldd	r25, Z+3	; 0x03
    1124:	40 e0       	ldi	r20, 0x00	; 0
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	03 e0       	ldi	r16, 0x03	; 3
    112a:	0e 94 a0 0b 	call	0x1740	; 0x1740 <DisplayValue>
    lcd_space();
    112e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>

    lcd_fix_string(Uf_str);		//"Uf="
    1132:	81 e1       	ldi	r24, 0x11	; 17
    1134:	91 e0       	ldi	r25, 0x01	; 1
    1136:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    DisplayValue(_trans->uBE,-3,'V',3);
    113a:	e0 91 40 01 	lds	r30, 0x0140
    113e:	f0 91 41 01 	lds	r31, 0x0141
    1142:	64 81       	ldd	r22, Z+4	; 0x04
    1144:	75 81       	ldd	r23, Z+5	; 0x05
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	4d ef       	ldi	r20, 0xFD	; 253
    114c:	26 e5       	ldi	r18, 0x56	; 86
    114e:	0e 94 a0 0b 	call	0x1740	; 0x1740 <DisplayValue>
    1152:	6f c1       	rjmp	.+734    	; 0x1432 <main+0x9ea>
    goto end;
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    1154:	84 30       	cpi	r24, 0x04	; 4
    1156:	09 f0       	breq	.+2      	; 0x115a <main+0x712>
    1158:	c0 c0       	rjmp	.+384    	; 0x12da <main+0x892>
    if((PartMode&P_CHANNEL) == P_CHANNEL) {
    115a:	80 91 06 01 	lds	r24, 0x0106
    115e:	84 ff       	sbrs	r24, 4
    1160:	08 c0       	rjmp	.+16     	; 0x1172 <main+0x72a>
       lcd_data('P');			//P-channel
    1162:	80 e5       	ldi	r24, 0x50	; 80
    1164:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       _trans = &ptrans;
    1168:	90 92 41 01 	sts	0x0141, r9
    116c:	80 92 40 01 	sts	0x0140, r8
    1170:	03 c0       	rjmp	.+6      	; 0x1178 <main+0x730>
    } else {
       lcd_data('N');			//N-channel
    1172:	8e e4       	ldi	r24, 0x4E	; 78
    1174:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
//       _trans = &ntrans;	is allready selected as default
    }
    lcd_data('-');
    1178:	8d e2       	ldi	r24, 0x2D	; 45
    117a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>

    tmp = PartMode&0x0f;
    117e:	80 91 06 01 	lds	r24, 0x0106
    1182:	18 2f       	mov	r17, r24
    1184:	1f 70       	andi	r17, 0x0F	; 15
    if (tmp == PART_MODE_JFET) {
    1186:	14 30       	cpi	r17, 0x04	; 4
    1188:	19 f4       	brne	.+6      	; 0x1190 <main+0x748>
       lcd_fix_string(jfet_str);	//"JFET"
    118a:	82 ef       	ldi	r24, 0xF2	; 242
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	13 c0       	rjmp	.+38     	; 0x11b6 <main+0x76e>
    } else {
       if ((PartMode&D_MODE) == D_MODE) {
    1190:	85 ff       	sbrs	r24, 5
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <main+0x750>
          lcd_data('D');			// N-D or P-D
    1194:	84 e4       	ldi	r24, 0x44	; 68
    1196:	01 c0       	rjmp	.+2      	; 0x119a <main+0x752>
       } else {
          lcd_data('E');			// N-E or P-E
    1198:	85 e4       	ldi	r24, 0x45	; 69
    119a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       }
       if (tmp == (PART_MODE_IGBT)) {
    119e:	13 30       	cpi	r17, 0x03	; 3
    11a0:	41 f4       	brne	.+16     	; 0x11b2 <main+0x76a>
          lcd_fix_string(igbt_str);	//"-IGBT"
    11a2:	87 ef       	ldi	r24, 0xF7	; 247
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       } else {
          lcd_fix_string(mosfet_str);	//"-MOS "
       }
    }
    if (tmp == PART_MODE_IGBT) {
       PinLayout('E','G','C'); 		//  SGD= or 123=...
    11aa:	85 e4       	ldi	r24, 0x45	; 69
    11ac:	67 e4       	ldi	r22, 0x47	; 71
    11ae:	43 e4       	ldi	r20, 0x43	; 67
    11b0:	07 c0       	rjmp	.+14     	; 0x11c0 <main+0x778>
          lcd_data('E');			// N-E or P-E
       }
       if (tmp == (PART_MODE_IGBT)) {
          lcd_fix_string(igbt_str);	//"-IGBT"
       } else {
          lcd_fix_string(mosfet_str);	//"-MOS "
    11b2:	8d ee       	ldi	r24, 0xED	; 237
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       }
    }
    if (tmp == PART_MODE_IGBT) {
       PinLayout('E','G','C'); 		//  SGD= or 123=...
    } else {
       PinLayout('S','G','D'); 		//  SGD= or 123=...
    11ba:	83 e5       	ldi	r24, 0x53	; 83
    11bc:	67 e4       	ldi	r22, 0x47	; 71
    11be:	44 e4       	ldi	r20, 0x44	; 68
    11c0:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <PinLayout>
    }
//    if((NumOfDiodes == 1) && ((PartMode&D_MODE) != D_MODE)) 
    if(NumOfDiodes == 1) {
    11c4:	80 91 05 01 	lds	r24, 0x0105
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	09 f0       	breq	.+2      	; 0x11ce <main+0x786>
    11cc:	3f c0       	rjmp	.+126    	; 0x124c <main+0x804>
       // Layout with SGD= style
       if (PartMode&P_CHANNEL) /* N or P MOS */
 #endif
#else
       // layout with 123= style
       if (((PartMode&P_CHANNEL) && (ptrans.c < ptrans.e)) || ((!(PartMode&P_CHANNEL)) && (ntrans.c > ntrans.e)))
    11ce:	80 91 06 01 	lds	r24, 0x0106
    11d2:	84 ff       	sbrs	r24, 4
    11d4:	07 c0       	rjmp	.+14     	; 0x11e4 <main+0x79c>
    11d6:	90 91 65 01 	lds	r25, 0x0165
    11da:	80 91 66 01 	lds	r24, 0x0166
    11de:	98 17       	cp	r25, r24
    11e0:	38 f0       	brcs	.+14     	; 0x11f0 <main+0x7a8>
    11e2:	17 c0       	rjmp	.+46     	; 0x1212 <main+0x7ca>
    11e4:	90 91 4d 01 	lds	r25, 0x014D
    11e8:	80 91 4e 01 	lds	r24, 0x014E
    11ec:	89 17       	cp	r24, r25
    11ee:	88 f4       	brcc	.+34     	; 0x1212 <main+0x7ca>
#endif
#if FLASHEND > 0x1fff
       // there is enough space for long form of showing protection diode
       {
          lcd_data(LCD_CHAR_DIODE1);	//show Diode symbol >|
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
          lcd_line2();			//2. Row
    11f6:	80 ec       	ldi	r24, 0xC0	; 192
    11f8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
          lcd_testpin(diodes[0].Anode);
    11fc:	80 91 80 01 	lds	r24, 0x0180
    1200:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
          lcd_fix_string(AnKat);	//"->|-"
    1204:	85 e4       	ldi	r24, 0x45	; 69
    1206:	91 e0       	ldi	r25, 0x01	; 1
    1208:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
          lcd_testpin(diodes[0].Cathode);
    120c:	80 91 81 01 	lds	r24, 0x0181
    1210:	10 c0       	rjmp	.+32     	; 0x1232 <main+0x7ea>
       } else {
          lcd_data(LCD_CHAR_DIODE2);	//show Diode symbol |<
    1212:	82 e0       	ldi	r24, 0x02	; 2
    1214:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
          lcd_line2();			//2. Row
    1218:	80 ec       	ldi	r24, 0xC0	; 192
    121a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
          lcd_testpin(diodes[0].Cathode);
    121e:	80 91 81 01 	lds	r24, 0x0181
    1222:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
          lcd_fix_string(KatAn);	//"-|<-"
    1226:	89 e4       	ldi	r24, 0x49	; 73
    1228:	91 e0       	ldi	r25, 0x01	; 1
    122a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
          lcd_testpin(diodes[0].Anode);
    122e:	80 91 80 01 	lds	r24, 0x0180
    1232:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
       }
       lcd_space();
    1236:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>
       lcd_fix_string(Uf_str);			//"Uf="
    123a:	81 e1       	ldi	r24, 0x11	; 17
    123c:	91 e0       	ldi	r25, 0x01	; 1
    123e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       mVAusgabe(0);
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <mVAusgabe>
       wait_for_key_5s_line2();		// wait 5s and clear line 2
    1248:	0e 94 ed 0c 	call	0x19da	; 0x19da <wait_for_key_5s_line2>
       } else {
          lcd_data(LCD_CHAR_DIODE2);	//show Diode symbol |<
       }
#endif
    }
    lcd_line2();			//2. Row
    124c:	80 ec       	ldi	r24, 0xC0	; 192
    124e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
    if((PartMode&D_MODE) != D_MODE) {	//enhancement-MOSFET
    1252:	80 91 06 01 	lds	r24, 0x0106
    1256:	85 fd       	sbrc	r24, 5
    1258:	1d c0       	rjmp	.+58     	; 0x1294 <main+0x84c>
	//Gate capacity
       lcd_fix_string(GateCap_str);		//"C="
    125a:	8d ef       	ldi	r24, 0xFD	; 253
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       ReadCapacity(_trans->b,_trans->e);	//measure capacity
    1262:	e0 91 40 01 	lds	r30, 0x0140
    1266:	f0 91 41 01 	lds	r31, 0x0141
    126a:	82 85       	ldd	r24, Z+10	; 0x0a
    126c:	64 85       	ldd	r22, Z+12	; 0x0c
    126e:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <ReadCapacity>
       DisplayValue(cap.cval,cap.cpre,'F',3);
    1272:	60 91 6a 01 	lds	r22, 0x016A
    1276:	70 91 6b 01 	lds	r23, 0x016B
    127a:	80 91 6c 01 	lds	r24, 0x016C
    127e:	90 91 6d 01 	lds	r25, 0x016D
    1282:	40 91 7c 01 	lds	r20, 0x017C
    1286:	26 e4       	ldi	r18, 0x46	; 70
    1288:	03 e0       	ldi	r16, 0x03	; 3
    128a:	0e 94 a0 0b 	call	0x1740	; 0x1740 <DisplayValue>
       lcd_fix_string(vt_str);		// "Vt="
    128e:	85 e1       	ldi	r24, 0x15	; 21
    1290:	91 e0       	ldi	r25, 0x01	; 1
    1292:	15 c0       	rjmp	.+42     	; 0x12be <main+0x876>
    } else {
       lcd_data('I');
    1294:	89 e4       	ldi	r24, 0x49	; 73
    1296:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       lcd_data('=');
    129a:	8d e3       	ldi	r24, 0x3D	; 61
    129c:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       DisplayValue(_trans->current,-5,'A',2);
    12a0:	e0 91 40 01 	lds	r30, 0x0140
    12a4:	f0 91 41 01 	lds	r31, 0x0141
    12a8:	66 81       	ldd	r22, Z+6	; 0x06
    12aa:	77 81       	ldd	r23, Z+7	; 0x07
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	4b ef       	ldi	r20, 0xFB	; 251
    12b2:	21 e4       	ldi	r18, 0x41	; 65
    12b4:	02 e0       	ldi	r16, 0x02	; 2
    12b6:	0e 94 a0 0b 	call	0x1740	; 0x1740 <DisplayValue>
       lcd_fix_string(Vgs_str);		// " Vg="
    12ba:	8a e1       	ldi	r24, 0x1A	; 26
    12bc:	91 e0       	ldi	r25, 0x01	; 1
    12be:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    }
    //Gate-threshold voltage
    DisplayValue(_trans->gthvoltage,-3,'V',2);
    12c2:	e0 91 40 01 	lds	r30, 0x0140
    12c6:	f0 91 41 01 	lds	r31, 0x0141
    12ca:	60 85       	ldd	r22, Z+8	; 0x08
    12cc:	71 85       	ldd	r23, Z+9	; 0x09
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	4d ef       	ldi	r20, 0xFD	; 253
    12d4:	26 e5       	ldi	r18, 0x56	; 86
    12d6:	02 e0       	ldi	r16, 0x02	; 2
    12d8:	3a cf       	rjmp	.-396    	; 0x114e <main+0x706>
    goto end;
    // end (PartFound == PART_FET)
  }
//   if(PartFound == PART_RESISTOR) 
resistor_out:
   if(ResistorsFound != 0) {
    12da:	60 91 68 01 	lds	r22, 0x0168
    12de:	66 23       	and	r22, r22
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <main+0x89c>
    12e2:	95 c0       	rjmp	.+298    	; 0x140e <main+0x9c6>
    ii = 0;
    if (ResistorsFound == 1) { // single resistor
    12e4:	61 30       	cpi	r22, 0x01	; 1
    12e6:	71 f4       	brne	.+28     	; 0x1304 <main+0x8bc>
       lcd_testpin(resis[0].rb);  	//Pin-number 1
    12e8:	80 91 1e 01 	lds	r24, 0x011E
    12ec:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
       lcd_fix_string(Resistor_str);
    12f0:	82 e5       	ldi	r24, 0x52	; 82
    12f2:	91 e0       	ldi	r25, 0x01	; 1
    12f4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       lcd_testpin(resis[0].ra);		//Pin-number 2
    12f8:	80 91 1d 01 	lds	r24, 0x011D
    12fc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
    // end (PartFound == PART_FET)
  }
//   if(PartFound == PART_RESISTOR) 
resistor_out:
   if(ResistorsFound != 0) {
    ii = 0;
    1300:	10 e0       	ldi	r17, 0x00	; 0
    1302:	52 c0       	rjmp	.+164    	; 0x13a8 <main+0x960>
    if (ResistorsFound == 1) { // single resistor
       lcd_testpin(resis[0].rb);  	//Pin-number 1
       lcd_fix_string(Resistor_str);
       lcd_testpin(resis[0].ra);		//Pin-number 2
    } else { // R-Max suchen
       if (resis[1].rx > resis[0].rx)
    1304:	20 91 21 01 	lds	r18, 0x0121
    1308:	30 91 22 01 	lds	r19, 0x0122
    130c:	40 91 23 01 	lds	r20, 0x0123
    1310:	50 91 24 01 	lds	r21, 0x0124
    1314:	80 91 19 01 	lds	r24, 0x0119
    1318:	90 91 1a 01 	lds	r25, 0x011A
    131c:	a0 91 1b 01 	lds	r26, 0x011B
    1320:	b0 91 1c 01 	lds	r27, 0x011C
          ii = 1;
       if (ResistorsFound == 2) {
    1324:	62 30       	cpi	r22, 0x02	; 2
    1326:	51 f1       	breq	.+84     	; 0x137c <main+0x934>
    // end (PartFound == PART_FET)
  }
//   if(PartFound == PART_RESISTOR) 
resistor_out:
   if(ResistorsFound != 0) {
    ii = 0;
    1328:	11 e0       	ldi	r17, 0x01	; 1
    132a:	82 17       	cp	r24, r18
    132c:	93 07       	cpc	r25, r19
    132e:	a4 07       	cpc	r26, r20
    1330:	b5 07       	cpc	r27, r21
    1332:	08 f0       	brcs	.+2      	; 0x1336 <main+0x8ee>
    1334:	10 e0       	ldi	r17, 0x00	; 0
       if (resis[1].rx > resis[0].rx)
          ii = 1;
       if (ResistorsFound == 2) {
          ii = 2;
       } else {
          if (resis[2].rx > resis[ii].rx) {
    1336:	e1 2f       	mov	r30, r17
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	63 e0       	ldi	r22, 0x03	; 3
    133c:	ee 0f       	add	r30, r30
    133e:	ff 1f       	adc	r31, r31
    1340:	6a 95       	dec	r22
    1342:	e1 f7       	brne	.-8      	; 0x133c <main+0x8f4>
    1344:	e7 5e       	subi	r30, 0xE7	; 231
    1346:	fe 4f       	sbci	r31, 0xFE	; 254
    1348:	20 91 29 01 	lds	r18, 0x0129
    134c:	30 91 2a 01 	lds	r19, 0x012A
    1350:	40 91 2b 01 	lds	r20, 0x012B
    1354:	50 91 2c 01 	lds	r21, 0x012C
    1358:	80 81       	ld	r24, Z
    135a:	91 81       	ldd	r25, Z+1	; 0x01
    135c:	a2 81       	ldd	r26, Z+2	; 0x02
    135e:	b3 81       	ldd	r27, Z+3	; 0x03
    1360:	82 17       	cp	r24, r18
    1362:	93 07       	cpc	r25, r19
    1364:	a4 07       	cpc	r26, r20
    1366:	b5 07       	cpc	r27, r21
    1368:	48 f0       	brcs	.+18     	; 0x137c <main+0x934>
       }
       char x = '1';
       char y = '3';
       char z = '2';
   
       if (ii == 1) {
    136a:	11 30       	cpi	r17, 0x01	; 1
    136c:	19 f0       	breq	.+6      	; 0x1374 <main+0x92c>
    136e:	02 e3       	ldi	r16, 0x32	; 50
    1370:	23 e3       	ldi	r18, 0x33	; 51
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <main+0x930>
          // x = '1';
          y = '2';
          z = '3';
    1374:	03 e3       	ldi	r16, 0x33	; 51
       char y = '3';
       char z = '2';
   
       if (ii == 1) {
          // x = '1';
          y = '2';
    1376:	22 e3       	ldi	r18, 0x32	; 50
       } else {
          if (resis[2].rx > resis[ii].rx) {
             ii = 2;
          }
       }
       char x = '1';
    1378:	81 e3       	ldi	r24, 0x31	; 49
    137a:	04 c0       	rjmp	.+8      	; 0x1384 <main+0x93c>
       if (resis[1].rx > resis[0].rx)
          ii = 1;
       if (ResistorsFound == 2) {
          ii = 2;
       } else {
          if (resis[2].rx > resis[ii].rx) {
    137c:	12 e0       	ldi	r17, 0x02	; 2
          z = '3';
       }
       if (ii == 2) {
          x = '2';
          y = '1';
          z = '3';
    137e:	03 e3       	ldi	r16, 0x33	; 51
          y = '2';
          z = '3';
       }
       if (ii == 2) {
          x = '2';
          y = '1';
    1380:	21 e3       	ldi	r18, 0x31	; 49
          // x = '1';
          y = '2';
          z = '3';
       }
       if (ii == 2) {
          x = '2';
    1382:	82 e3       	ldi	r24, 0x32	; 50
          y = '1';
          z = '3';
       }
       lcd_data(x);
    1384:	29 83       	std	Y+1, r18	; 0x01
    1386:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       lcd_fix_string(Resistor_str);    // -[=]-
    138a:	82 e5       	ldi	r24, 0x52	; 82
    138c:	91 e0       	ldi	r25, 0x01	; 1
    138e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       lcd_data(y);
    1392:	29 81       	ldd	r18, Y+1	; 0x01
    1394:	82 2f       	mov	r24, r18
    1396:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       lcd_fix_string(Resistor_str);    // -[=]-
    139a:	82 e5       	ldi	r24, 0x52	; 82
    139c:	91 e0       	ldi	r25, 0x01	; 1
    139e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       lcd_data(z);
    13a2:	80 2f       	mov	r24, r16
    13a4:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
    }
    lcd_line2(); //2. row 
    13a8:	80 ec       	ldi	r24, 0xC0	; 192
    13aa:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
    if (ResistorsFound == 1) {
    13ae:	80 91 68 01 	lds	r24, 0x0168
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	d1 f4       	brne	.+52     	; 0x13ea <main+0x9a2>
       RvalOut(0);
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	0e 94 c4 0a 	call	0x1588	; 0x1588 <RvalOut>
#if FLASHEND > 0x1fff
       ReadInductance();		// measure inductance, possible only with single R<2.1k
    13bc:	0e 94 0a 11 	call	0x2214	; 0x2214 <ReadInductance>
       if (inductor_lpre != 0) {
    13c0:	80 91 0b 01 	lds	r24, 0x010B
    13c4:	88 23       	and	r24, r24
    13c6:	a9 f1       	breq	.+106    	; 0x1432 <main+0x9ea>
	  // resistor have also Inductance
          lcd_fix_string(Lis_str);	// "L="
    13c8:	8c e3       	ldi	r24, 0x3C	; 60
    13ca:	91 e0       	ldi	r25, 0x01	; 1
    13cc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
          DisplayValue(inductor_lx,inductor_lpre,'H',3);	// output inductance
    13d0:	60 91 98 01 	lds	r22, 0x0198
    13d4:	70 91 99 01 	lds	r23, 0x0199
    13d8:	80 91 9a 01 	lds	r24, 0x019A
    13dc:	90 91 9b 01 	lds	r25, 0x019B
    13e0:	40 91 0b 01 	lds	r20, 0x010B
    13e4:	28 e4       	ldi	r18, 0x48	; 72
    13e6:	03 e0       	ldi	r16, 0x03	; 3
    13e8:	b2 ce       	rjmp	.-668    	; 0x114e <main+0x706>
       }
#endif
    } else {
       // output resistor values in right order
       if (ii == 0) {
    13ea:	11 23       	and	r17, r17
    13ec:	11 f4       	brne	.+4      	; 0x13f2 <main+0x9aa>
          RvalOut(1);
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	03 c0       	rjmp	.+6      	; 0x13f8 <main+0x9b0>
          RvalOut(2);
       }
       if (ii == 1) {
    13f2:	11 30       	cpi	r17, 0x01	; 1
    13f4:	29 f4       	brne	.+10     	; 0x1400 <main+0x9b8>
          RvalOut(0);
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	0e 94 c4 0a 	call	0x1588	; 0x1588 <RvalOut>
          RvalOut(2);
    13fc:	82 e0       	ldi	r24, 0x02	; 2
    13fe:	04 c0       	rjmp	.+8      	; 0x1408 <main+0x9c0>
       }
       if (ii == 2) {
          RvalOut(0);
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	0e 94 c4 0a 	call	0x1588	; 0x1588 <RvalOut>
          RvalOut(1);
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	0e 94 c4 0a 	call	0x1588	; 0x1588 <RvalOut>
    140c:	12 c0       	rjmp	.+36     	; 0x1432 <main+0x9ea>
    }
    goto end;

  } // end (PartFound == PART_RESISTOR)

  lcd_fix_string(TestFailed1); 	//"Kein,unbek. oder"
    140e:	87 e9       	ldi	r24, 0x97	; 151
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  lcd_line2(); //2. row 
    1416:	80 ec       	ldi	r24, 0xC0	; 192
    1418:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_string(TestFailed2); 	//"defektes "
    141c:	81 e7       	ldi	r24, 0x71	; 113
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  lcd_fix_string(Bauteil);		//"Bauteil"
    1424:	8a e7       	ldi	r24, 0x7A	; 122
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
not_known:
#if POWER_OFF+0 > 1
  empty_count++;
  mess_count = 0;
#endif
  max_time = SHORT_WAIT_TIME;		// use allways the short wait time
    142c:	88 e8       	ldi	r24, 0x88	; 136
    142e:	93 e1       	ldi	r25, 0x13	; 19
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <main+0x9ee>
 end:
#if POWER_OFF+0 > 1
  empty_count = 0;		// reset counter, if part is found
  mess_count++;			// count measurements
#endif
  max_time = display_time;	// full specified wait time
    1432:	80 e6       	ldi	r24, 0x60	; 96
    1434:	9d e6       	ldi	r25, 0x6D	; 109

 end2:
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND, release relay
    1436:	28 e1       	ldi	r18, 0x18	; 24
    1438:	27 b9       	out	0x07, r18	; 7
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
    143a:	4f 9b       	sbis	0x09, 7	; 9
    143c:	fe cf       	rjmp	.-4      	; 0x143a <main+0x9f2>
  if ((wait_for_key_ms(max_time)) != 0 ) goto start;
    143e:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <wait_for_key_ms>
    1442:	88 23       	and	r24, r24
    1444:	09 f0       	breq	.+2      	; 0x1448 <main+0xa00>
    1446:	67 cb       	rjmp	.-2354   	; 0xb16 <main+0xce>
 #if FLASHEND > 0x3fff
  // look, if the tester is uncalibrated (C-source will be included directly)
  #include "HelpCalibration.c"
 #endif
//  MCUSR = 0;
  ON_PORT &= ~(1<<ON_PIN);		//switch off power
    1448:	5e 98       	cbi	0x0b, 6	; 11
  wait_for_key_ms(0); //never ending loop 
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <wait_for_key_ms>
#else
  goto start;	// POWER_OFF not selected, repeat measurement
#endif
  return 0;
    1452:	18 c0       	rjmp	.+48     	; 0x1484 <main+0xa3c>

end3:
  // the diode  is already shown on the LCD
  if (ResistorsFound == 0) goto end;
    1454:	80 91 68 01 	lds	r24, 0x0168
    1458:	88 23       	and	r24, r24
    145a:	59 f3       	breq	.-42     	; 0x1432 <main+0x9ea>
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND, release relay
    145c:	88 e1       	ldi	r24, 0x18	; 24
    145e:	87 b9       	out	0x07, r24	; 7
  // there is one resistor or more detected
  wait_for_key_ms(display_time);
    1460:	80 e6       	ldi	r24, 0x60	; 96
    1462:	9d e6       	ldi	r25, 0x6D	; 109
    1464:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <wait_for_key_ms>
  ADC_DDR =  TXD_MSK; 	// switch pin with reference to input, activate relay
    1468:	88 e0       	ldi	r24, 0x08	; 8
    146a:	87 b9       	out	0x07, r24	; 7
  lcd_clear();
    146c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
#if FLASHEND > 0x1fff
  lcd_data('0'+NumOfDiodes);
    1470:	80 91 05 01 	lds	r24, 0x0105
    1474:	80 5d       	subi	r24, 0xD0	; 208
    1476:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
  lcd_fix_string(Dioden);	//"Diodes "
    147a:	8d e4       	ldi	r24, 0x4D	; 77
    147c:	91 e0       	ldi	r25, 0x01	; 1
    147e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
#endif
  goto resistor_out;
    1482:	2b cf       	rjmp	.-426    	; 0x12da <main+0x892>

}   // end main
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0f 90       	pop	r0
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	1f 91       	pop	r17
    1490:	0f 91       	pop	r16
    1492:	ff 90       	pop	r15
    1494:	ef 90       	pop	r14
    1496:	df 90       	pop	r13
    1498:	cf 90       	pop	r12
    149a:	bf 90       	pop	r11
    149c:	9f 90       	pop	r9
    149e:	8f 90       	pop	r8
    14a0:	08 95       	ret

000014a2 <mVAusgabe>:
   lcd_line2(); 				//2. row
   lcd_fix_string(Uf_str);			//"Uf="
   mVAusgabe(bcdnum >> 4);
   mVAusgabe(bcdnum & 0x0f);
}
void mVAusgabe(uint8_t nn) {
    14a2:	0f 93       	push	r16
   if (nn < 3) {
    14a4:	83 30       	cpi	r24, 0x03	; 3
    14a6:	98 f4       	brcc	.+38     	; 0x14ce <mVAusgabe+0x2c>
      // Output in mV units
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
    14a8:	e8 2f       	mov	r30, r24
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	ee 0f       	add	r30, r30
    14ae:	ff 1f       	adc	r31, r31
    14b0:	ee 0f       	add	r30, r30
    14b2:	ff 1f       	adc	r31, r31
    14b4:	e0 58       	subi	r30, 0x80	; 128
    14b6:	fe 4f       	sbci	r31, 0xFE	; 254
    14b8:	62 81       	ldd	r22, Z+2	; 0x02
    14ba:	73 81       	ldd	r23, Z+3	; 0x03
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	4d ef       	ldi	r20, 0xFD	; 253
    14c2:	26 e5       	ldi	r18, 0x56	; 86
    14c4:	03 e0       	ldi	r16, 0x03	; 3
    14c6:	0e 94 a0 0b 	call	0x1740	; 0x1740 <DisplayValue>
      lcd_space();
    14ca:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>
   }
}
    14ce:	0f 91       	pop	r16
    14d0:	08 95       	ret

000014d2 <UfAusgabe>:
// output of flux voltage for 1-2 diodes in row 2
// bcdnum = Numbers of both Diodes:
// higher 4 Bit  number of first Diode
// lower 4 Bit  number of second Diode (Structure diodes[nn])
// if number >= 3  no output is done
void UfAusgabe(uint8_t bcdnum) {
    14d2:	1f 93       	push	r17
    14d4:	18 2f       	mov	r17, r24
   if (ResistorsFound > 0) { //also Resistor(s) found
    14d6:	80 91 68 01 	lds	r24, 0x0168
    14da:	88 23       	and	r24, r24
    14dc:	29 f0       	breq	.+10     	; 0x14e8 <UfAusgabe+0x16>
      lcd_space();
    14de:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>
      lcd_data(LCD_CHAR_RESIS3);	// special symbol or R
    14e2:	82 e5       	ldi	r24, 0x52	; 82
    14e4:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
   }
   lcd_line2(); 				//2. row
    14e8:	80 ec       	ldi	r24, 0xC0	; 192
    14ea:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
   lcd_fix_string(Uf_str);			//"Uf="
    14ee:	81 e1       	ldi	r24, 0x11	; 17
    14f0:	91 e0       	ldi	r25, 0x01	; 1
    14f2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
   mVAusgabe(bcdnum >> 4);
    14f6:	81 2f       	mov	r24, r17
    14f8:	82 95       	swap	r24
    14fa:	8f 70       	andi	r24, 0x0F	; 15
    14fc:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <mVAusgabe>
   mVAusgabe(bcdnum & 0x0f);
    1500:	81 2f       	mov	r24, r17
    1502:	8f 70       	andi	r24, 0x0F	; 15
    1504:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <mVAusgabe>
}
    1508:	1f 91       	pop	r17
    150a:	08 95       	ret

0000150c <SerienDiodenAusgabe>:
#include <avr/io.h>
#include "Transistortester.h"



void SerienDiodenAusgabe() {
    150c:	df 92       	push	r13
    150e:	ef 92       	push	r14
    1510:	ff 92       	push	r15
    1512:	0f 93       	push	r16
    1514:	1f 93       	push	r17
    1516:	cf 93       	push	r28
    1518:	df 93       	push	r29
   uint8_t first;
   uint8_t second;
   first = diode_sequence >> 4;
    151a:	d0 90 02 01 	lds	r13, 0x0102
    151e:	8d 2d       	mov	r24, r13
    1520:	82 95       	swap	r24
    1522:	8f 70       	andi	r24, 0x0F	; 15
   second = diode_sequence & 3;
   lcd_testpin(diodes[first].Anode);
    1524:	c8 2f       	mov	r28, r24
    1526:	d0 e0       	ldi	r29, 0x00	; 0
    1528:	00 e8       	ldi	r16, 0x80	; 128
    152a:	11 e0       	ldi	r17, 0x01	; 1
    152c:	cc 0f       	add	r28, r28
    152e:	dd 1f       	adc	r29, r29
    1530:	cc 0f       	add	r28, r28
    1532:	dd 1f       	adc	r29, r29
    1534:	c0 0f       	add	r28, r16
    1536:	d1 1f       	adc	r29, r17
    1538:	88 81       	ld	r24, Y
    153a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
   lcd_fix_string(AnKat);	//"->|-"
    153e:	25 e4       	ldi	r18, 0x45	; 69
    1540:	e2 2e       	mov	r14, r18
    1542:	21 e0       	ldi	r18, 0x01	; 1
    1544:	f2 2e       	mov	r15, r18
    1546:	c7 01       	movw	r24, r14
    1548:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
   lcd_testpin(diodes[first].Cathode);
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
   lcd_fix_string(AnKat);	//"->|-"
    1552:	c7 01       	movw	r24, r14
    1554:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>

void SerienDiodenAusgabe() {
   uint8_t first;
   uint8_t second;
   first = diode_sequence >> 4;
   second = diode_sequence & 3;
    1558:	ed 2d       	mov	r30, r13
    155a:	e3 70       	andi	r30, 0x03	; 3
   lcd_testpin(diodes[first].Anode);
   lcd_fix_string(AnKat);	//"->|-"
   lcd_testpin(diodes[first].Cathode);
   lcd_fix_string(AnKat);	//"->|-"
   lcd_testpin(diodes[second].Cathode);
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	ee 0f       	add	r30, r30
    1560:	ff 1f       	adc	r31, r31
    1562:	ee 0f       	add	r30, r30
    1564:	ff 1f       	adc	r31, r31
    1566:	e0 0f       	add	r30, r16
    1568:	f1 1f       	adc	r31, r17
    156a:	81 81       	ldd	r24, Z+1	; 0x01
    156c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
   UfAusgabe(diode_sequence);
    1570:	80 91 02 01 	lds	r24, 0x0102
    1574:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <UfAusgabe>
}
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	1f 91       	pop	r17
    157e:	0f 91       	pop	r16
    1580:	ff 90       	pop	r15
    1582:	ef 90       	pop	r14
    1584:	df 90       	pop	r13
    1586:	08 95       	ret

00001588 <RvalOut>:
#include <avr/eeprom.h>
#include <avr/pgmspace.h>

#include "Transistortester.h"

void RvalOut(uint8_t nrr) {	
    1588:	0f 93       	push	r16
   // output of resistor value
#if FLASHEND > 0x1fff
   uint16_t rr;
   if ((resis[nrr].rx < 100) && (inductor_lpre == 0)) {
    158a:	e8 2f       	mov	r30, r24
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	83 e0       	ldi	r24, 0x03	; 3
    1590:	ee 0f       	add	r30, r30
    1592:	ff 1f       	adc	r31, r31
    1594:	8a 95       	dec	r24
    1596:	e1 f7       	brne	.-8      	; 0x1590 <RvalOut+0x8>
    1598:	e7 5e       	subi	r30, 0xE7	; 231
    159a:	fe 4f       	sbci	r31, 0xFE	; 254
    159c:	60 81       	ld	r22, Z
    159e:	71 81       	ldd	r23, Z+1	; 0x01
    15a0:	82 81       	ldd	r24, Z+2	; 0x02
    15a2:	93 81       	ldd	r25, Z+3	; 0x03
    15a4:	64 36       	cpi	r22, 0x64	; 100
    15a6:	71 05       	cpc	r23, r1
    15a8:	81 05       	cpc	r24, r1
    15aa:	91 05       	cpc	r25, r1
    15ac:	78 f4       	brcc	.+30     	; 0x15cc <RvalOut+0x44>
    15ae:	20 91 0b 01 	lds	r18, 0x010B
    15b2:	22 23       	and	r18, r18
    15b4:	59 f4       	brne	.+22     	; 0x15cc <RvalOut+0x44>
      rr = GetESR(resis[nrr].ra,resis[nrr].rb);
    15b6:	84 81       	ldd	r24, Z+4	; 0x04
    15b8:	65 81       	ldd	r22, Z+5	; 0x05
    15ba:	0e 94 5f 1b 	call	0x36be	; 0x36be <GetESR>
      DisplayValue(rr,-2,LCD_CHAR_OMEGA,3);
    15be:	bc 01       	movw	r22, r24
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	4e ef       	ldi	r20, 0xFE	; 254
    15c6:	24 ef       	ldi	r18, 0xF4	; 244
    15c8:	03 e0       	ldi	r16, 0x03	; 3
    15ca:	03 c0       	rjmp	.+6      	; 0x15d2 <RvalOut+0x4a>
   } else {
      DisplayValue(resis[nrr].rx,-1,LCD_CHAR_OMEGA,4);
    15cc:	4f ef       	ldi	r20, 0xFF	; 255
    15ce:	24 ef       	ldi	r18, 0xF4	; 244
    15d0:	04 e0       	ldi	r16, 0x04	; 4
    15d2:	0e 94 a0 0b 	call	0x1740	; 0x1740 <DisplayValue>
   }
#else
   DisplayValue(resis[nrr].rx,-1,LCD_CHAR_OMEGA,4);
#endif
   lcd_space();
    15d6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>
 }
    15da:	0f 91       	pop	r16
    15dc:	08 95       	ret

000015de <ChargePin10ms>:
#include "Transistortester.h"


//******************************************************************

void ChargePin10ms(uint8_t PinToCharge, uint8_t ChargeDirection) {
    15de:	1f 93       	push	r17
    15e0:	18 2f       	mov	r17, r24
   //Will be used by discharge of MOSFET Gates or to load big capacities.
   //Parameters:
   //PinToCharge: specifies the pin as mask for R-Port
   //ChargeDirection: 0 = switch to GND (N-Kanal-FET), 1= switch to VCC(P-Kanal-FET)

   if(ChargeDirection&1) {
    15e2:	60 ff       	sbrs	r22, 0
    15e4:	03 c0       	rjmp	.+6      	; 0x15ec <ChargePin10ms+0xe>
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
    15e6:	85 b1       	in	r24, 0x05	; 5
    15e8:	81 2b       	or	r24, r17
    15ea:	03 c0       	rjmp	.+6      	; 0x15f2 <ChargePin10ms+0x14>
   } else {
      R_PORT &= ~PinToCharge; // or 0 (GND)
    15ec:	95 b1       	in	r25, 0x05	; 5
    15ee:	80 95       	com	r24
    15f0:	89 23       	and	r24, r25
    15f2:	85 b9       	out	0x05, r24	; 5
   }
   R_DDR |= PinToCharge;		//switch Pin to output, across R to GND or VCC
    15f4:	84 b1       	in	r24, 0x04	; 4
    15f6:	81 2b       	or	r24, r17
    15f8:	84 b9       	out	0x04, r24	; 4
   wait_about10ms();			// wait about 10ms
    15fa:	82 e0       	ldi	r24, 0x02	; 2
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
   // switch back Input, no current
   R_DDR &= ~PinToCharge;	// switch back to input
    1602:	84 b1       	in	r24, 0x04	; 4
    1604:	10 95       	com	r17
    1606:	81 23       	and	r24, r17
    1608:	84 b9       	out	0x04, r24	; 4
   R_PORT &= ~PinToCharge;	// no Pull up
    160a:	85 b1       	in	r24, 0x05	; 5
    160c:	81 23       	and	r24, r17
    160e:	85 b9       	out	0x05, r24	; 5
}
    1610:	1f 91       	pop	r17
    1612:	08 95       	ret

00001614 <EntladePins>:
#include <avr/pgmspace.h>
#include "Transistortester.h"


// first discharge any charge of capacitors
void EntladePins() {
    1614:	bf 92       	push	r11
    1616:	cf 92       	push	r12
    1618:	df 92       	push	r13
    161a:	ef 92       	push	r14
    161c:	ff 92       	push	r15
    161e:	0f 93       	push	r16
    1620:	1f 93       	push	r17
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
    1626:	2a e0       	ldi	r18, 0x0A	; 10
    1628:	c2 2e       	mov	r12, r18
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
    162a:	98 e0       	ldi	r25, 0x08	; 8
    162c:	d9 2e       	mov	r13, r25
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     R_PORT = 0;			// R-outputs auf 0
//     R_DDR = (1<<PIN_RH3) | (1<<PIN_RH2) | (1<<PIN_RH1); // R_H for all Pins to GND
     R_DDR = (1<<PIN_RH3) | (1<<PIN_RL3) | (1<<PIN_RH2) | (1<<PIN_RL2) | (1<<PIN_RH1) | (1<<PIN_RL1); // R_H and R_L for all Pins to GND
    162e:	8f e3       	ldi	r24, 0x3F	; 63
    1630:	b8 2e       	mov	r11, r24
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
    1632:	d7 b8       	out	0x07, r13	; 7
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
    1634:	d8 b8       	out	0x08, r13	; 8
     R_PORT = 0;			// R-outputs auf 0
    1636:	15 b8       	out	0x05, r1	; 5
//     R_DDR = (1<<PIN_RH3) | (1<<PIN_RH2) | (1<<PIN_RH1); // R_H for all Pins to GND
     R_DDR = (1<<PIN_RH3) | (1<<PIN_RL3) | (1<<PIN_RH2) | (1<<PIN_RL2) | (1<<PIN_RH1) | (1<<PIN_RL1); // R_H and R_L for all Pins to GND
    1638:	b4 b8       	out	0x04, r11	; 4
     adcmv[0] = W5msReadADC(PC0);	// which voltage has Pin 1?
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    1640:	8c 01       	movw	r16, r24
     adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
    1648:	ec 01       	movw	r28, r24
     adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
    164a:	82 e0       	ldi	r24, 0x02	; 2
    164c:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
     if ((PartFound == PART_CELL) || (adcmv[0] < CAP_EMPTY_LEVEL) & (adcmv[1] < CAP_EMPTY_LEVEL) & (adcmv[2] < CAP_EMPTY_LEVEL)) {
    1650:	20 91 07 01 	lds	r18, 0x0107
    1654:	28 30       	cpi	r18, 0x08	; 8
    1656:	c1 f0       	breq	.+48     	; 0x1688 <EntladePins+0x74>
    1658:	41 e0       	ldi	r20, 0x01	; 1
    165a:	c4 30       	cpi	r28, 0x04	; 4
    165c:	d1 05       	cpc	r29, r1
    165e:	08 f0       	brcs	.+2      	; 0x1662 <EntladePins+0x4e>
    1660:	40 e0       	ldi	r20, 0x00	; 0
    1662:	21 e0       	ldi	r18, 0x01	; 1
    1664:	04 30       	cpi	r16, 0x04	; 4
    1666:	11 05       	cpc	r17, r1
    1668:	08 f0       	brcs	.+2      	; 0x166c <EntladePins+0x58>
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	42 23       	and	r20, r18
    166e:	50 e0       	ldi	r21, 0x00	; 0
    1670:	21 e0       	ldi	r18, 0x01	; 1
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	84 30       	cpi	r24, 0x04	; 4
    1676:	91 05       	cpc	r25, r1
    1678:	10 f0       	brcs	.+4      	; 0x167e <EntladePins+0x6a>
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	24 23       	and	r18, r20
    1680:	35 23       	and	r19, r21
    1682:	21 15       	cp	r18, r1
    1684:	31 05       	cpc	r19, r1
    1686:	21 f0       	breq	.+8      	; 0x1690 <EntladePins+0x7c>
        ADC_DDR = TXD_MSK;		// switch all ADC-Pins to input
    1688:	88 e0       	ldi	r24, 0x08	; 8
    168a:	87 b9       	out	0x07, r24	; 7
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
    168c:	14 b8       	out	0x04, r1	; 4
#if FLASHEND > 0x3fff
        cell_mv[0] = adcmv[0];		// save the voltage of pin 1
        cell_mv[1] = adcmv[1];		// save the voltage of pin 2
        cell_mv[2] = adcmv[2];		// save the voltage of pin 3
#endif
        return;			// all is discharged
    168e:	4e c0       	rjmp	.+156    	; 0x172c <EntladePins+0x118>
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
    1690:	23 e0       	ldi	r18, 0x03	; 3
    1692:	08 3e       	cpi	r16, 0xE8	; 232
    1694:	12 07       	cpc	r17, r18
    1696:	10 f0       	brcs	.+4      	; 0x169c <EntladePins+0x88>
  uint8_t lop_cnt;		// loop counter
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
    1698:	28 e0       	ldi	r18, 0x08	; 8
    169a:	01 c0       	rjmp	.+2      	; 0x169e <EntladePins+0x8a>
#endif
        return;			// all is discharged
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
        adc_gnd |= (1<<PC0);	//Pin 1 directly to GND
    169c:	29 e0       	ldi	r18, 0x09	; 9
     }
     if (adcmv[1] < 1000) {
    169e:	33 e0       	ldi	r19, 0x03	; 3
    16a0:	c8 3e       	cpi	r28, 0xE8	; 232
    16a2:	d3 07       	cpc	r29, r19
    16a4:	08 f4       	brcc	.+2      	; 0x16a8 <EntladePins+0x94>
        adc_gnd |= (1<<PC1);	//Pin 2 directly to GND
    16a6:	22 60       	ori	r18, 0x02	; 2
     }
     if (adcmv[2] < 1000) {
    16a8:	33 e0       	ldi	r19, 0x03	; 3
    16aa:	88 3e       	cpi	r24, 0xE8	; 232
    16ac:	93 07       	cpc	r25, r19
    16ae:	08 f4       	brcc	.+2      	; 0x16b2 <EntladePins+0x9e>
        adc_gnd |= (1<<PC2);	//Pin 3 directly to  GND
    16b0:	24 60       	ori	r18, 0x04	; 4
     }
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time
    16b2:	27 b9       	out	0x07, r18	; 7

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
//     R_DDR = (1<<PIN_RL3) | (1<<PIN_RL2) | (1<<PIN_RL1);	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    16b4:	c0 e0       	ldi	r28, 0x00	; 0
    16b6:	d0 e0       	ldi	r29, 0x00	; 0
        wdt_reset();
    16b8:	a8 95       	wdr
        adcmv[0] = W20msReadADC(PC0);	// which voltage has Pin 1?
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	0e 94 9d 13 	call	0x273a	; 0x273a <W20msReadADC>
    16c0:	7c 01       	movw	r14, r24
        adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
    16c8:	8c 01       	movw	r16, r24
        adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
    16ca:	82 e0       	ldi	r24, 0x02	; 2
    16cc:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
        if (adcmv[0] < 1300) {
    16d0:	24 e1       	ldi	r18, 0x14	; 20
    16d2:	e2 16       	cp	r14, r18
    16d4:	25 e0       	ldi	r18, 0x05	; 5
    16d6:	f2 06       	cpc	r15, r18
    16d8:	08 f4       	brcc	.+2      	; 0x16dc <EntladePins+0xc8>
           ADC_DDR |= (1<<PC0);	// below 1.3V , switch directly with ADC-Port to GND
    16da:	38 9a       	sbi	0x07, 0	; 7
        }
        if (adcmv[1] < 1300) {
    16dc:	35 e0       	ldi	r19, 0x05	; 5
    16de:	04 31       	cpi	r16, 0x14	; 20
    16e0:	13 07       	cpc	r17, r19
    16e2:	08 f4       	brcc	.+2      	; 0x16e6 <EntladePins+0xd2>
           ADC_DDR |= (1<<PC1);	// below 1.3V, switch directly with ADC-Port to GND
    16e4:	39 9a       	sbi	0x07, 1	; 7
        }
        if (adcmv[2] < 1300) {
    16e6:	25 e0       	ldi	r18, 0x05	; 5
    16e8:	84 31       	cpi	r24, 0x14	; 20
    16ea:	92 07       	cpc	r25, r18
    16ec:	08 f4       	brcc	.+2      	; 0x16f0 <EntladePins+0xdc>
           ADC_DDR |= (1<<PC2);	// below 1.3V, switch directly with ADC-Port to GND
    16ee:	3a 9a       	sbi	0x07, 2	; 7
        }
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
    16f0:	36 e0       	ldi	r19, 0x06	; 6
    16f2:	e3 16       	cp	r14, r19
    16f4:	f1 04       	cpc	r15, r1
    16f6:	30 f4       	brcc	.+12     	; 0x1704 <EntladePins+0xf0>
    16f8:	06 30       	cpi	r16, 0x06	; 6
    16fa:	11 05       	cpc	r17, r1
    16fc:	18 f4       	brcc	.+6      	; 0x1704 <EntladePins+0xf0>
    16fe:	86 30       	cpi	r24, 0x06	; 6
    1700:	91 05       	cpc	r25, r1
    1702:	38 f0       	brcs	.+14     	; 0x1712 <EntladePins+0xfe>

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
//     R_DDR = (1<<PIN_RL3) | (1<<PIN_RL2) | (1<<PIN_RL1);	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    1704:	21 96       	adiw	r28, 0x01	; 1
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	c4 3f       	cpi	r28, 0xF4	; 244
    170a:	d8 07       	cpc	r29, r24
    170c:	a9 f6       	brne	.-86     	; 0x16b8 <EntladePins+0xa4>
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
           break;
        }
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
    170e:	d0 92 07 01 	sts	0x0107, r13

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
//     R_DDR = (1<<PIN_RL3) | (1<<PIN_RL2) | (1<<PIN_RL1);	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    1712:	00 e0       	ldi	r16, 0x00	; 0
    1714:	10 e0       	ldi	r17, 0x00	; 0
    1716:	04 c0       	rjmp	.+8      	; 0x1720 <EntladePins+0x10c>
        lcd_space();
        lcd_string(utoa(adcmv[2], outval, 10));
#endif
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
    1718:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <wait1ms>
    171c:	0f 5f       	subi	r16, 0xFF	; 255
    171e:	1f 4f       	sbci	r17, 0xFF	; 255
        lcd_space();
        lcd_string(utoa(adcmv[1], outval, 10));
        lcd_space();
        lcd_string(utoa(adcmv[2], outval, 10));
#endif
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
    1720:	0c 17       	cp	r16, r28
    1722:	1d 07       	cpc	r17, r29
    1724:	c8 f3       	brcs	.-14     	; 0x1718 <EntladePins+0x104>
    1726:	ca 94       	dec	r12
  unsigned int clr_cnt;		// Clear Counter
  uint8_t lop_cnt;		// loop counter
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
    1728:	09 f0       	breq	.+2      	; 0x172c <EntladePins+0x118>
    172a:	83 cf       	rjmp	.-250    	; 0x1632 <EntladePins+0x1e>
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     }
  } // end for lop_cnt
 }
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	1f 91       	pop	r17
    1732:	0f 91       	pop	r16
    1734:	ff 90       	pop	r15
    1736:	ef 90       	pop	r14
    1738:	df 90       	pop	r13
    173a:	cf 90       	pop	r12
    173c:	bf 90       	pop	r11
    173e:	08 95       	ret

00001740 <DisplayValue>:
 *    e.g: p = 10^-12 -> -12
 *  - unit character (0 = none)
 *  digits = 2, 3 or 4
 */
void DisplayValue(unsigned long Value, int8_t Exponent, unsigned char Unit, unsigned char digits)
{
    1740:	2f 92       	push	r2
    1742:	3f 92       	push	r3
    1744:	4f 92       	push	r4
    1746:	5f 92       	push	r5
    1748:	7f 92       	push	r7
    174a:	8f 92       	push	r8
    174c:	9f 92       	push	r9
    174e:	af 92       	push	r10
    1750:	bf 92       	push	r11
    1752:	cf 92       	push	r12
    1754:	df 92       	push	r13
    1756:	ef 92       	push	r14
    1758:	ff 92       	push	r15
    175a:	0f 93       	push	r16
    175c:	1f 93       	push	r17
    175e:	df 93       	push	r29
    1760:	cf 93       	push	r28
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	2f 97       	sbiw	r28, 0x0f	; 15
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	f8 94       	cli
    176c:	de bf       	out	0x3e, r29	; 62
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	cd bf       	out	0x3d, r28	; 61
    1772:	6b 01       	movw	r12, r22
    1774:	7c 01       	movw	r14, r24
    1776:	14 2f       	mov	r17, r20
    1778:	72 2e       	mov	r7, r18
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
    177a:	03 30       	cpi	r16, 0x03	; 3
    177c:	29 f0       	breq	.+10     	; 0x1788 <DisplayValue+0x48>
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
    177e:	04 30       	cpi	r16, 0x04	; 4
    1780:	31 f0       	breq	.+12     	; 0x178e <DisplayValue+0x4e>
  uint8_t           Offset;		/* exponent of offset to next 10^3 step */
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
    1782:	84 e6       	ldi	r24, 0x64	; 100
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	14 c0       	rjmp	.+40     	; 0x17b0 <DisplayValue+0x70>
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
    1788:	88 ee       	ldi	r24, 0xE8	; 232
    178a:	93 e0       	ldi	r25, 0x03	; 3
    178c:	11 c0       	rjmp	.+34     	; 0x17b0 <DisplayValue+0x70>
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
    178e:	80 e1       	ldi	r24, 0x10	; 16
    1790:	97 e2       	ldi	r25, 0x27	; 39
    1792:	0e c0       	rjmp	.+28     	; 0x17b0 <DisplayValue+0x70>
  while (Value >= Limit)
  {
    Value += 5;				/* for automatic rounding */
    1794:	c7 01       	movw	r24, r14
    1796:	b6 01       	movw	r22, r12
    1798:	6b 5f       	subi	r22, 0xFB	; 251
    179a:	7f 4f       	sbci	r23, 0xFF	; 255
    179c:	8f 4f       	sbci	r24, 0xFF	; 255
    179e:	9f 4f       	sbci	r25, 0xFF	; 255
    Value = Value / 10;			/* scale down by 10^1 */
    17a0:	a5 01       	movw	r20, r10
    17a2:	94 01       	movw	r18, r8
    17a4:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    17a8:	69 01       	movw	r12, r18
    17aa:	7a 01       	movw	r14, r20
    Exponent++;				/* increase exponent by 1 */
    17ac:	1f 5f       	subi	r17, 0xFF	; 255
    17ae:	08 c0       	rjmp	.+16     	; 0x17c0 <DisplayValue+0x80>


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
  while (Value >= Limit)
    17b0:	1c 01       	movw	r2, r24
    17b2:	44 24       	eor	r4, r4
    17b4:	55 24       	eor	r5, r5
  {
    Value += 5;				/* for automatic rounding */
    Value = Value / 10;			/* scale down by 10^1 */
    17b6:	8a e0       	ldi	r24, 0x0A	; 10
    17b8:	88 2e       	mov	r8, r24
    17ba:	91 2c       	mov	r9, r1
    17bc:	a1 2c       	mov	r10, r1
    17be:	b1 2c       	mov	r11, r1


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
  while (Value >= Limit)
    17c0:	c2 14       	cp	r12, r2
    17c2:	d3 04       	cpc	r13, r3
    17c4:	e4 04       	cpc	r14, r4
    17c6:	f5 04       	cpc	r15, r5
    17c8:	28 f7       	brcc	.-54     	; 0x1794 <DisplayValue+0x54>


  /*
   *  determine prefix
   */
  Length = Exponent + 12;
    17ca:	81 2f       	mov	r24, r17
    17cc:	84 5f       	subi	r24, 0xF4	; 244
  if ((int8_t)Length <  0) Length = 0;		/* Limit to minimum prefix */
    17ce:	87 fd       	sbrc	r24, 7
    17d0:	03 c0       	rjmp	.+6      	; 0x17d8 <DisplayValue+0x98>
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
    17d2:	83 31       	cpi	r24, 0x13	; 19
    17d4:	18 f4       	brcc	.+6      	; 0x17dc <DisplayValue+0x9c>
    17d6:	03 c0       	rjmp	.+6      	; 0x17de <DisplayValue+0x9e>

  /*
   *  determine prefix
   */
  Length = Exponent + 12;
  if ((int8_t)Length <  0) Length = 0;		/* Limit to minimum prefix */
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	01 c0       	rjmp	.+2      	; 0x17de <DisplayValue+0x9e>
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
    17dc:	82 e1       	ldi	r24, 0x12	; 18
  Index = Length / 3;
    17de:	23 e0       	ldi	r18, 0x03	; 3
  Offset = Length % 3;
    17e0:	62 2f       	mov	r22, r18
    17e2:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <__udivmodqi4>
    17e6:	19 2f       	mov	r17, r25
  if (Offset > 0)
    17e8:	99 23       	and	r25, r25
    17ea:	19 f0       	breq	.+6      	; 0x17f2 <DisplayValue+0xb2>
    {
      Index++;				/* adjust index for exponent offset, take next prefix */
    17ec:	8f 5f       	subi	r24, 0xFF	; 255
      Offset = 3 - Offset;		/* reverse value (1 or 2) */
    17ee:	29 1b       	sub	r18, r25
    17f0:	12 2f       	mov	r17, r18
    { /* use no nano */
      Index++;				/* use mikro instead of nano */
      Offset += 3;			/* can be 3,4 or 5 */
    }
#endif
  Prefix = MEM_read_byte((uint8_t *)(&PrefixTab[Index]));   /* look up prefix in table */
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	89 56       	subi	r24, 0x69	; 105
    17f6:	9e 4f       	sbci	r25, 0xFE	; 254
    17f8:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <__eerd_byte_m168>
    17fc:	b8 2e       	mov	r11, r24
  /*
   *  display value
   */

  /* convert value into string */
  utoa((unsigned int)Value, OutBuffer, 10);
    17fe:	c6 01       	movw	r24, r12
    1800:	6e 01       	movw	r12, r28
    1802:	08 94       	sec
    1804:	c1 1c       	adc	r12, r1
    1806:	d1 1c       	adc	r13, r1
    1808:	b6 01       	movw	r22, r12
    180a:	4a e0       	ldi	r20, 0x0A	; 10
    180c:	50 e0       	ldi	r21, 0x00	; 0
    180e:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <utoa>
  Length = strlen(OutBuffer);
    1812:	f6 01       	movw	r30, r12
    1814:	01 90       	ld	r0, Z+
    1816:	00 20       	and	r0, r0
    1818:	e9 f7       	brne	.-6      	; 0x1814 <DisplayValue+0xd4>
    181a:	31 97       	sbiw	r30, 0x01	; 1
    181c:	2e 2e       	mov	r2, r30
    181e:	2c 18       	sub	r2, r12

  /* position of dot */
  Exponent = Length - Offset;		/* calculate position */
    1820:	82 2c       	mov	r8, r2
    1822:	81 1a       	sub	r8, r17

  if (Exponent <= 0)			/* we have to prepend "0." */
    1824:	18 14       	cp	r1, r8
    1826:	44 f0       	brlt	.+16     	; 0x1838 <DisplayValue+0xf8>
  {
    /* 0: factor 10 / -1: factor 100 */
//    lcd_data('0');
    lcd_data('.');
    1828:	8e e2       	ldi	r24, 0x2E	; 46
    182a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
      {
       lcd_data('0');	/* extra 0 for factor 10 */
       Exponent++;
      }
#else
    if (Exponent < 0) lcd_data('0');	/* extra 0 for factor 100 */
    182e:	88 20       	and	r8, r8
    1830:	19 f0       	breq	.+6      	; 0x1838 <DisplayValue+0xf8>
    1832:	80 e3       	ldi	r24, 0x30	; 48
    1834:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
#endif
  }

  if (Offset == 0) Exponent = -1;	/* disable dot if not needed */
    1838:	11 23       	and	r17, r17
    183a:	11 f4       	brne	.+4      	; 0x1840 <DisplayValue+0x100>
    183c:	88 24       	eor	r8, r8
    183e:	8a 94       	dec	r8
    1840:	6e 01       	movw	r12, r28
    1842:	08 94       	sec
    1844:	c1 1c       	adc	r12, r1
    1846:	d1 1c       	adc	r13, r1
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    1848:	00 e0       	ldi	r16, 0x00	; 0
    184a:	10 e0       	ldi	r17, 0x00	; 0
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    Index++;				/* next one */
    if (Index == Exponent) {
    184c:	99 24       	eor	r9, r9
    184e:	87 fc       	sbrc	r8, 7
    1850:	90 94       	com	r9
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    1852:	0d c0       	rjmp	.+26     	; 0x186e <DisplayValue+0x12e>
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    1854:	0f 5f       	subi	r16, 0xFF	; 255
    1856:	1f 4f       	sbci	r17, 0xFF	; 255
    1858:	f6 01       	movw	r30, r12
    185a:	81 91       	ld	r24, Z+
    185c:	6f 01       	movw	r12, r30
    185e:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
    Index++;				/* next one */
    if (Index == Exponent) {
    1862:	08 15       	cp	r16, r8
    1864:	19 05       	cpc	r17, r9
    1866:	19 f4       	brne	.+6      	; 0x186e <DisplayValue+0x12e>
      lcd_data('.');			/* display dot */
    1868:	8e e2       	ldi	r24, 0x2E	; 46
    186a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    186e:	02 15       	cp	r16, r2
    1870:	88 f3       	brcs	.-30     	; 0x1854 <DisplayValue+0x114>
      lcd_data('.');			/* display dot */
    }
  }

  /* display prefix and unit */
  if (Prefix != 0) lcd_data(Prefix);
    1872:	bb 20       	and	r11, r11
    1874:	19 f0       	breq	.+6      	; 0x187c <DisplayValue+0x13c>
    1876:	8b 2d       	mov	r24, r11
    1878:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
  if (Unit) lcd_data(Unit);
    187c:	77 20       	and	r7, r7
    187e:	19 f0       	breq	.+6      	; 0x1886 <DisplayValue+0x146>
    1880:	87 2d       	mov	r24, r7
    1882:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
}
    1886:	2f 96       	adiw	r28, 0x0f	; 15
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	1f 91       	pop	r17
    1898:	0f 91       	pop	r16
    189a:	ff 90       	pop	r15
    189c:	ef 90       	pop	r14
    189e:	df 90       	pop	r13
    18a0:	cf 90       	pop	r12
    18a2:	bf 90       	pop	r11
    18a4:	af 90       	pop	r10
    18a6:	9f 90       	pop	r9
    18a8:	8f 90       	pop	r8
    18aa:	7f 90       	pop	r7
    18ac:	5f 90       	pop	r5
    18ae:	4f 90       	pop	r4
    18b0:	3f 90       	pop	r3
    18b2:	2f 90       	pop	r2
    18b4:	08 95       	ret

000018b6 <PinLayout>:
#include "Transistortester.h"


// show the Pin Layout of the device 
void PinLayout(char pin1, char pin2, char pin3) {
    18b6:	ef 92       	push	r14
    18b8:	ff 92       	push	r15
    18ba:	0f 93       	push	r16
    18bc:	1f 93       	push	r17
    18be:	18 2f       	mov	r17, r24
    18c0:	06 2f       	mov	r16, r22
    18c2:	f4 2e       	mov	r15, r20
// pin1-3 is EBC or SGD or CGA
#ifndef EBC_STYLE
   // Layout with 123= style
   uint8_t ipp;
   lcd_fix_string(N123_str);		//" 123="
    18c4:	8b e0       	ldi	r24, 0x0B	; 11
    18c6:	91 e0       	ldi	r25, 0x01	; 1
    18c8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
   for (ipp=0;ipp<3;ipp++) {
    18cc:	ee 24       	eor	r14, r14
       if (ipp == _trans->e)  lcd_data(pin1);	// Output Character in right order
    18ce:	e0 91 40 01 	lds	r30, 0x0140
    18d2:	f0 91 41 01 	lds	r31, 0x0141
    18d6:	84 85       	ldd	r24, Z+12	; 0x0c
    18d8:	e8 16       	cp	r14, r24
    18da:	19 f4       	brne	.+6      	; 0x18e2 <PinLayout+0x2c>
    18dc:	81 2f       	mov	r24, r17
    18de:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       if (ipp == _trans->b)  lcd_data(pin2);
    18e2:	e0 91 40 01 	lds	r30, 0x0140
    18e6:	f0 91 41 01 	lds	r31, 0x0141
    18ea:	82 85       	ldd	r24, Z+10	; 0x0a
    18ec:	e8 16       	cp	r14, r24
    18ee:	19 f4       	brne	.+6      	; 0x18f6 <PinLayout+0x40>
    18f0:	80 2f       	mov	r24, r16
    18f2:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       if (ipp == _trans->c)  lcd_data(pin3);
    18f6:	e0 91 40 01 	lds	r30, 0x0140
    18fa:	f0 91 41 01 	lds	r31, 0x0141
    18fe:	83 85       	ldd	r24, Z+11	; 0x0b
    1900:	e8 16       	cp	r14, r24
    1902:	19 f4       	brne	.+6      	; 0x190a <PinLayout+0x54>
    1904:	8f 2d       	mov	r24, r15
    1906:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
// pin1-3 is EBC or SGD or CGA
#ifndef EBC_STYLE
   // Layout with 123= style
   uint8_t ipp;
   lcd_fix_string(N123_str);		//" 123="
   for (ipp=0;ipp<3;ipp++) {
    190a:	e3 94       	inc	r14
    190c:	8e 2d       	mov	r24, r14
    190e:	83 30       	cpi	r24, 0x03	; 3
    1910:	f1 f6       	brne	.-68     	; 0x18ce <PinLayout+0x18>
   lcd_testpin(_trans->e);
   lcd_testpin(_trans->b);
   lcd_testpin(_trans->c);
 #endif
#endif
}
    1912:	1f 91       	pop	r17
    1914:	0f 91       	pop	r16
    1916:	ff 90       	pop	r15
    1918:	ef 90       	pop	r14
    191a:	08 95       	ret

0000191c <RefVoltage>:
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;

  #ifdef AUTO_CAL
  referenz = ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset));
    191c:	8f e9       	ldi	r24, 0x9F	; 159
    191e:	91 e0       	ldi	r25, 0x01	; 1
    1920:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__eerd_word_m168>
    1924:	20 91 39 01 	lds	r18, 0x0139
    1928:	30 91 3a 01 	lds	r19, 0x013A
    192c:	28 0f       	add	r18, r24
    192e:	39 1f       	adc	r19, r25
  #else
  referenz = ref_mv + REF_C_KORR;
  #endif
  if (referenz >= Ref_Tab_Beginn) {
    1930:	83 e0       	ldi	r24, 0x03	; 3
    1932:	28 3e       	cpi	r18, 0xE8	; 232
    1934:	38 07       	cpc	r19, r24
    1936:	20 f0       	brcs	.+8      	; 0x1940 <RefVoltage+0x24>
     referenz -= Ref_Tab_Beginn;
    1938:	c9 01       	movw	r24, r18
    193a:	88 5e       	subi	r24, 0xE8	; 232
    193c:	93 40       	sbci	r25, 0x03	; 3
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <RefVoltage+0x28>
  } else  {
     referenz = 0;		// limit to begin of table
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = referenz / Ref_Tab_Abstand;
    1944:	62 e3       	ldi	r22, 0x32	; 50
    1946:	70 e0       	ldi	r23, 0x00	; 0
    1948:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__udivmodhi4>
  tabres = Ref_Tab_Abstand-tabres;
  if (tabind > 7) {
     tabind = 7;		// limit to end of table
  }
  // interpolate the table of factors
  y1 = pgm_read_word(&RHtab[tabind]);
    194c:	68 30       	cpi	r22, 0x08	; 8
    194e:	08 f0       	brcs	.+2      	; 0x1952 <RefVoltage+0x36>
    1950:	67 e0       	ldi	r22, 0x07	; 7
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	fb 01       	movw	r30, r22
    1956:	ee 0f       	add	r30, r30
    1958:	ff 1f       	adc	r31, r31
    195a:	ea 53       	subi	r30, 0x3A	; 58
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	45 91       	lpm	r20, Z+
    1960:	54 91       	lpm	r21, Z+
  y2 = pgm_read_word(&RHtab[tabind+1]);
    1962:	fb 01       	movw	r30, r22
    1964:	ee 0f       	add	r30, r30
    1966:	ff 1f       	adc	r31, r31
    1968:	e8 53       	subi	r30, 0x38	; 56
    196a:	ff 4f       	sbci	r31, 0xFF	; 255
    196c:	25 91       	lpm	r18, Z+
    196e:	34 91       	lpm	r19, Z+
  } else  {
     referenz = 0;		// limit to begin of table
  }
  tabind = referenz / Ref_Tab_Abstand;
  tabres = referenz % Ref_Tab_Abstand;
  tabres = Ref_Tab_Abstand-tabres;
    1970:	62 e3       	ldi	r22, 0x32	; 50
    1972:	68 1b       	sub	r22, r24
  }
  // interpolate the table of factors
  y1 = pgm_read_word(&RHtab[tabind]);
  y2 = pgm_read_word(&RHtab[tabind+1]);
  // RHmultip is the interpolated factor to compute capacity from load time with 470k
  RHmultip = ((y1 - y2) * tabres + (Ref_Tab_Abstand/2)) / Ref_Tab_Abstand + y2;
    1974:	70 e0       	ldi	r23, 0x00	; 0
    1976:	42 1b       	sub	r20, r18
    1978:	53 0b       	sbc	r21, r19
    197a:	64 9f       	mul	r22, r20
    197c:	c0 01       	movw	r24, r0
    197e:	65 9f       	mul	r22, r21
    1980:	90 0d       	add	r25, r0
    1982:	74 9f       	mul	r23, r20
    1984:	90 0d       	add	r25, r0
    1986:	11 24       	eor	r1, r1
    1988:	49 96       	adiw	r24, 0x19	; 25
    198a:	62 e3       	ldi	r22, 0x32	; 50
    198c:	70 e0       	ldi	r23, 0x00	; 0
    198e:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__udivmodhi4>
    1992:	62 0f       	add	r22, r18
    1994:	73 1f       	adc	r23, r19
    1996:	70 93 01 01 	sts	0x0101, r23
    199a:	60 93 00 01 	sts	0x0100, r22
 }
    199e:	08 95       	ret

000019a0 <wait_for_key_ms>:
#include "Transistortester.h"


/* wait max_time or previous key press */
/* return value: 1 == key is pressed, 0 == time expired */
uint8_t wait_for_key_ms(int max_time) {
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	ec 01       	movw	r28, r24
  // if key is pressed, return 1
  // if max_time == 0 , do not count, wait endless
  wait_about200ms();
    19a6:	88 e2       	ldi	r24, 0x28	; 40
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
// wait 28 seconds or 5 seconds (if repeat function)
  while (max_time >= 0) {
    19ae:	0d c0       	rjmp	.+26     	; 0x19ca <wait_for_key_ms+0x2a>
     wait_about10ms();
    19b0:	82 e0       	ldi	r24, 0x02	; 2
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    19b8:	4f 9b       	sbis	0x09, 7	; 9
    19ba:	0b c0       	rjmp	.+22     	; 0x19d2 <wait_for_key_ms+0x32>
        // If the key is pressed again... 
        // goto start of measurement 
        return(1);    // key is pressed
     }
     wdt_reset();
    19bc:	a8 95       	wdr
     if (max_time > 0) {		// count only, if counter > 0
    19be:	20 97       	sbiw	r28, 0x00	; 0
    19c0:	21 f0       	breq	.+8      	; 0x19ca <wait_for_key_ms+0x2a>
        max_time -= 10;			// 10 ms are done, count down
    19c2:	2a 97       	sbiw	r28, 0x0a	; 10
        if (max_time == 0) max_time = -1;	// never count to zero, zero is endless!
    19c4:	11 f4       	brne	.+4      	; 0x19ca <wait_for_key_ms+0x2a>
    19c6:	cf ef       	ldi	r28, 0xFF	; 255
    19c8:	df ef       	ldi	r29, 0xFF	; 255
uint8_t wait_for_key_ms(int max_time) {
  // if key is pressed, return 1
  // if max_time == 0 , do not count, wait endless
  wait_about200ms();
// wait 28 seconds or 5 seconds (if repeat function)
  while (max_time >= 0) {
    19ca:	d7 ff       	sbrs	r29, 7
    19cc:	f1 cf       	rjmp	.-30     	; 0x19b0 <wait_for_key_ms+0x10>
     if (max_time > 0) {		// count only, if counter > 0
        max_time -= 10;			// 10 ms are done, count down
        if (max_time == 0) max_time = -1;	// never count to zero, zero is endless!
     }
  }
 return(0);		// no key pressed within the specified time
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	01 c0       	rjmp	.+2      	; 0x19d4 <wait_for_key_ms+0x34>
  while (max_time >= 0) {
     wait_about10ms();
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
        // If the key is pressed again... 
        // goto start of measurement 
        return(1);    // key is pressed
    19d2:	81 e0       	ldi	r24, 0x01	; 1
        max_time -= 10;			// 10 ms are done, count down
        if (max_time == 0) max_time = -1;	// never count to zero, zero is endless!
     }
  }
 return(0);		// no key pressed within the specified time
}
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	08 95       	ret

000019da <wait_for_key_5s_line2>:

#ifdef WAIT_LINE2_CLEAR
/* wait 5 seconds or previous key press, then clear line 2 of LCD and */
/* set the cursor to the beginning of line 2 */
void wait_for_key_5s_line2(void) {
  wait_for_key_ms(SHORT_WAIT_TIME);
    19da:	88 e8       	ldi	r24, 0x88	; 136
    19dc:	93 e1       	ldi	r25, 0x13	; 19
    19de:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <wait_for_key_ms>
  lcd_line2(); //2. row 
    19e2:	80 ec       	ldi	r24, 0xC0	; 192
    19e4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_clear_line();		// clear the whole line
    19e8:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_clear_line>
  lcd_line2(); //2. row 
    19ec:	80 ec       	ldi	r24, 0xC0	; 192
    19ee:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
}
    19f2:	08 95       	ret

000019f4 <uart_putc>:
    19f4:	2f 93       	push	r18
    19f6:	5f b7       	in	r21, 0x3f	; 63
    19f8:	2f 93       	push	r18
    19fa:	2a e0       	ldi	r18, 0x0A	; 10
    19fc:	80 95       	com	r24
    19fe:	08 94       	sec

00001a00 <putchar0>:
    1a00:	10 f4       	brcc	.+4      	; 0x1a06 <putchar1>
    1a02:	43 98       	cbi	0x08, 3	; 8
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <putchar2>

00001a06 <putchar1>:
    1a06:	43 9a       	sbi	0x08, 3	; 8
	...

00001a0a <putchar2>:
    1a0a:	22 d0       	rcall	.+68     	; 0x1a50 <wait100us>
    1a0c:	29 d0       	rcall	.+82     	; 0x1a60 <wait3us>
    1a0e:	86 95       	lsr	r24
    1a10:	2a 95       	dec	r18
    1a12:	b1 f7       	brne	.-20     	; 0x1a00 <putchar0>
    1a14:	2f 91       	pop	r18
    1a16:	5f bf       	out	0x3f, r21	; 63
    1a18:	2f 91       	pop	r18
    1a1a:	08 95       	ret

00001a1c <UART_delay1>:
    1a1c:	08 95       	ret

00001a1e <wait5s>:
    1a1e:	03 d0       	rcall	.+6      	; 0x1a26 <wait1000ms>

00001a20 <wait4s>:
    1a20:	02 d0       	rcall	.+4      	; 0x1a26 <wait1000ms>

00001a22 <wait3s>:
    1a22:	01 d0       	rcall	.+2      	; 0x1a26 <wait1000ms>

00001a24 <wait2s>:
    1a24:	00 d0       	rcall	.+0      	; 0x1a26 <wait1000ms>

00001a26 <wait1000ms>:
    1a26:	00 d0       	rcall	.+0      	; 0x1a28 <wait500ms>

00001a28 <wait500ms>:
    1a28:	03 d0       	rcall	.+6      	; 0x1a30 <wait100ms>

00001a2a <wait400ms>:
    1a2a:	02 d0       	rcall	.+4      	; 0x1a30 <wait100ms>

00001a2c <wait300ms>:
    1a2c:	01 d0       	rcall	.+2      	; 0x1a30 <wait100ms>

00001a2e <wait200ms>:
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <wait100ms>

00001a30 <wait100ms>:
    1a30:	a8 95       	wdr
    1a32:	00 d0       	rcall	.+0      	; 0x1a34 <wait50ms>

00001a34 <wait50ms>:
    1a34:	03 d0       	rcall	.+6      	; 0x1a3c <wait10ms>

00001a36 <wait40ms>:
    1a36:	02 d0       	rcall	.+4      	; 0x1a3c <wait10ms>

00001a38 <wait30ms>:
    1a38:	01 d0       	rcall	.+2      	; 0x1a3c <wait10ms>

00001a3a <wait20ms>:
    1a3a:	00 d0       	rcall	.+0      	; 0x1a3c <wait10ms>

00001a3c <wait10ms>:
    1a3c:	00 d0       	rcall	.+0      	; 0x1a3e <wait5ms>

00001a3e <wait5ms>:
    1a3e:	03 d0       	rcall	.+6      	; 0x1a46 <wait1ms>

00001a40 <wait4ms>:
    1a40:	02 d0       	rcall	.+4      	; 0x1a46 <wait1ms>

00001a42 <wait3ms>:
    1a42:	01 d0       	rcall	.+2      	; 0x1a46 <wait1ms>

00001a44 <wait2ms>:
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <wait1ms>

00001a46 <wait1ms>:
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <wait500us>

00001a48 <wait500us>:
    1a48:	03 d0       	rcall	.+6      	; 0x1a50 <wait100us>

00001a4a <wait400us>:
    1a4a:	02 d0       	rcall	.+4      	; 0x1a50 <wait100us>

00001a4c <wait300us>:
    1a4c:	01 d0       	rcall	.+2      	; 0x1a50 <wait100us>

00001a4e <wait200us>:
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <wait100us>

00001a50 <wait100us>:
    1a50:	00 d0       	rcall	.+0      	; 0x1a52 <wait50us>

00001a52 <wait50us>:
    1a52:	03 d0       	rcall	.+6      	; 0x1a5a <wait10us>

00001a54 <wait40us>:
    1a54:	02 d0       	rcall	.+4      	; 0x1a5a <wait10us>

00001a56 <wait30us>:
    1a56:	01 d0       	rcall	.+2      	; 0x1a5a <wait10us>

00001a58 <wait20us>:
    1a58:	00 d0       	rcall	.+0      	; 0x1a5a <wait10us>

00001a5a <wait10us>:
    1a5a:	00 d0       	rcall	.+0      	; 0x1a5c <wait5us>

00001a5c <wait5us>:
    1a5c:	03 d0       	rcall	.+6      	; 0x1a64 <wait1us>

00001a5e <wait4us>:
    1a5e:	02 d0       	rcall	.+4      	; 0x1a64 <wait1us>

00001a60 <wait3us>:
    1a60:	01 d0       	rcall	.+2      	; 0x1a64 <wait1us>

00001a62 <wait2us>:
    1a62:	00 d0       	rcall	.+0      	; 0x1a64 <wait1us>

00001a64 <wait1us>:
    1a64:	00 00       	nop
    1a66:	08 95       	ret

00001a68 <getRLmultip>:
  R_DDR = 0;			// switch all resistor ports to input
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
  return;
 } // end ReadCapacity()

unsigned int getRLmultip(unsigned int cvolt) {
    1a68:	ef 92       	push	r14
    1a6a:	ff 92       	push	r15
    1a6c:	0f 93       	push	r16
    1a6e:	1f 93       	push	r17
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	0f 92       	push	r0
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62

  unsigned int uvolt;
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;
  if (cvolt >= RL_Tab_Beginn) {
    1a7a:	21 e0       	ldi	r18, 0x01	; 1
    1a7c:	8c 32       	cpi	r24, 0x2C	; 44
    1a7e:	92 07       	cpc	r25, r18
    1a80:	18 f0       	brcs	.+6      	; 0x1a88 <getRLmultip+0x20>
     uvolt = cvolt - RL_Tab_Beginn;
    1a82:	8c 52       	subi	r24, 0x2C	; 44
    1a84:	91 40       	sbci	r25, 0x01	; 1
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <getRLmultip+0x24>
  } else {
     uvolt = 0;			// limit to begin of table
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = uvolt / RL_Tab_Abstand;
    1a8c:	69 e1       	ldi	r22, 0x19	; 25
    1a8e:	70 e0       	ldi	r23, 0x00	; 0
    1a90:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__udivmodhi4>
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
  if (tabind > ((RL_Tab_Length/RL_Tab_Abstand)-1)) {
    1a94:	6c 32       	cpi	r22, 0x2C	; 44
    1a96:	18 f4       	brcc	.+6      	; 0x1a9e <getRLmultip+0x36>
  } else {
     uvolt = 0;			// limit to begin of table
  }
  tabind = uvolt / RL_Tab_Abstand;
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
    1a98:	49 e1       	ldi	r20, 0x19	; 25
    1a9a:	48 1b       	sub	r20, r24
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <getRLmultip+0x3a>
  if (tabind > ((RL_Tab_Length/RL_Tab_Abstand)-1)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand)-1;	// limit to end of table
     tabres = 0;
    1a9e:	40 e0       	ldi	r20, 0x00	; 0
  }
  tabind = uvolt / RL_Tab_Abstand;
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
  if (tabind > ((RL_Tab_Length/RL_Tab_Abstand)-1)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand)-1;	// limit to end of table
    1aa0:	6b e2       	ldi	r22, 0x2B	; 43
     tabres = 0;
  }
  y1 = MEM_read_word(&RLtab[tabind]);
    1aa2:	e6 2e       	mov	r14, r22
    1aa4:	ff 24       	eor	r15, r15
    1aa6:	c7 01       	movw	r24, r14
    1aa8:	88 0f       	add	r24, r24
    1aaa:	99 1f       	adc	r25, r25
    1aac:	80 50       	subi	r24, 0x00	; 0
    1aae:	90 40       	sbci	r25, 0x00	; 0
    1ab0:	49 83       	std	Y+1, r20	; 0x01
    1ab2:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__eerd_word_m168>
    1ab6:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RLtab[tabind+1]);
    1ab8:	c7 01       	movw	r24, r14
    1aba:	88 0f       	add	r24, r24
    1abc:	99 1f       	adc	r25, r25
    1abe:	8e 5f       	subi	r24, 0xFE	; 254
    1ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac2:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__eerd_word_m168>
    1ac6:	9c 01       	movw	r18, r24
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
    1ac8:	49 81       	ldd	r20, Y+1	; 0x01
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	08 1b       	sub	r16, r24
    1ace:	19 0b       	sbc	r17, r25
    1ad0:	40 9f       	mul	r20, r16
    1ad2:	c0 01       	movw	r24, r0
    1ad4:	41 9f       	mul	r20, r17
    1ad6:	90 0d       	add	r25, r0
    1ad8:	50 9f       	mul	r21, r16
    1ada:	90 0d       	add	r25, r0
    1adc:	11 24       	eor	r1, r1
    1ade:	0c 96       	adiw	r24, 0x0c	; 12
    1ae0:	69 e1       	ldi	r22, 0x19	; 25
    1ae2:	70 e0       	ldi	r23, 0x00	; 0
    1ae4:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__udivmodhi4>
    1ae8:	62 0f       	add	r22, r18
    1aea:	73 1f       	adc	r23, r19
}
    1aec:	cb 01       	movw	r24, r22
    1aee:	0f 90       	pop	r0
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	1f 91       	pop	r17
    1af6:	0f 91       	pop	r16
    1af8:	ff 90       	pop	r15
    1afa:	ef 90       	pop	r14
    1afc:	08 95       	ret

00001afe <Scale_C_with_vcc>:

void Scale_C_with_vcc(void) {
    1afe:	8f 92       	push	r8
    1b00:	9f 92       	push	r9
    1b02:	af 92       	push	r10
    1b04:	bf 92       	push	r11
    1b06:	df 92       	push	r13
    1b08:	ef 92       	push	r14
    1b0a:	ff 92       	push	r15
    1b0c:	0f 93       	push	r16
    1b0e:	1f 93       	push	r17
    1b10:	e0 90 6a 01 	lds	r14, 0x016A
    1b14:	f0 90 6b 01 	lds	r15, 0x016B
    1b18:	00 91 6c 01 	lds	r16, 0x016C
    1b1c:	10 91 6d 01 	lds	r17, 0x016D
    1b20:	d0 90 7c 01 	lds	r13, 0x017C
   while (cap.cval > 100000) {
      cap.cval /= 10;
    1b24:	4a e0       	ldi	r20, 0x0A	; 10
    1b26:	84 2e       	mov	r8, r20
    1b28:	91 2c       	mov	r9, r1
    1b2a:	a1 2c       	mov	r10, r1
    1b2c:	b1 2c       	mov	r11, r1
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    1b2e:	08 c0       	rjmp	.+16     	; 0x1b40 <Scale_C_with_vcc+0x42>
      cap.cval /= 10;
    1b30:	c8 01       	movw	r24, r16
    1b32:	b7 01       	movw	r22, r14
    1b34:	a5 01       	movw	r20, r10
    1b36:	94 01       	movw	r18, r8
    1b38:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    1b3c:	79 01       	movw	r14, r18
    1b3e:	8a 01       	movw	r16, r20
    1b40:	8d 2d       	mov	r24, r13
    1b42:	d3 94       	inc	r13
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    1b44:	91 ea       	ldi	r25, 0xA1	; 161
    1b46:	e9 16       	cp	r14, r25
    1b48:	96 e8       	ldi	r25, 0x86	; 134
    1b4a:	f9 06       	cpc	r15, r25
    1b4c:	91 e0       	ldi	r25, 0x01	; 1
    1b4e:	09 07       	cpc	r16, r25
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	19 07       	cpc	r17, r25
    1b54:	68 f7       	brcc	.-38     	; 0x1b30 <Scale_C_with_vcc+0x32>
    1b56:	80 93 7c 01 	sts	0x017C, r24
      cap.cval /= 10;
      cap.cpre ++;			// prevent overflow
   }
   cap.cval *= ADCconfig.U_AVCC;	// scale with measured voltage
    1b5a:	20 91 35 01 	lds	r18, 0x0135
    1b5e:	30 91 36 01 	lds	r19, 0x0136
    1b62:	40 e0       	ldi	r20, 0x00	; 0
    1b64:	50 e0       	ldi	r21, 0x00	; 0
    1b66:	c8 01       	movw	r24, r16
    1b68:	b7 01       	movw	r22, r14
    1b6a:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
    1b6e:	28 e8       	ldi	r18, 0x88	; 136
    1b70:	33 e1       	ldi	r19, 0x13	; 19
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	50 e0       	ldi	r21, 0x00	; 0
    1b76:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    1b7a:	20 93 6a 01 	sts	0x016A, r18
    1b7e:	30 93 6b 01 	sts	0x016B, r19
    1b82:	40 93 6c 01 	sts	0x016C, r20
    1b86:	50 93 6d 01 	sts	0x016D, r21
}
    1b8a:	1f 91       	pop	r17
    1b8c:	0f 91       	pop	r16
    1b8e:	ff 90       	pop	r15
    1b90:	ef 90       	pop	r14
    1b92:	df 90       	pop	r13
    1b94:	bf 90       	pop	r11
    1b96:	af 90       	pop	r10
    1b98:	9f 90       	pop	r9
    1b9a:	8f 90       	pop	r8
    1b9c:	08 95       	ret

00001b9e <ReadCapacity>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    1b9e:	7f 92       	push	r7
    1ba0:	8f 92       	push	r8
    1ba2:	9f 92       	push	r9
    1ba4:	af 92       	push	r10
    1ba6:	bf 92       	push	r11
    1ba8:	cf 92       	push	r12
    1baa:	df 92       	push	r13
    1bac:	ef 92       	push	r14
    1bae:	ff 92       	push	r15
    1bb0:	0f 93       	push	r16
    1bb2:	1f 93       	push	r17
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29
    1bb8:	18 2f       	mov	r17, r24
    1bba:	76 2e       	mov	r7, r22
#if FLASHEND > 0x1fff
  unsigned int vloss;	// lost voltage after load pulse in 0.1% 
#endif

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
    1bbc:	88 0f       	add	r24, r24
    1bbe:	81 0f       	add	r24, r17
    1bc0:	86 0f       	add	r24, r22
    1bc2:	81 50       	subi	r24, 0x01	; 1
    1bc4:	80 93 51 01 	sts	0x0151, r24
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    1bc8:	e6 2f       	mov	r30, r22
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	e3 51       	subi	r30, 0x13	; 19
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	04 91       	lpm	r16, Z+
  HiPinR_L = pgm_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
    1bd2:	e1 2f       	mov	r30, r17
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	e6 51       	subi	r30, 0x16	; 22
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	a4 90       	lpm	r10, Z+
  lcd_testpin(LowPin);
  lcd_data('C');
  lcd_testpin(HighPin);
  lcd_space();
#endif
  if(PartFound == PART_RESISTOR) {
    1bdc:	80 91 07 01 	lds	r24, 0x0107
    1be0:	81 30       	cpi	r24, 0x01	; 1
    1be2:	09 f4       	brne	.+2      	; 0x1be6 <ReadCapacity+0x48>
    1be4:	98 c2       	rjmp	.+1328   	; 0x2116 <ReadCapacity+0x578>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    1be6:	30 91 05 01 	lds	r19, 0x0105
    1bea:	a0 e8       	ldi	r26, 0x80	; 128
    1bec:	b1 e0       	ldi	r27, 0x01	; 1
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	13 c0       	rjmp	.+38     	; 0x1c18 <ReadCapacity+0x7a>
     if ((diodes[ii].Cathode == LowPin) && (diodes[ii].Anode == HighPin) && (diodes[ii].Voltage < 1500)) {
    1bf2:	11 96       	adiw	r26, 0x01	; 1
    1bf4:	8c 91       	ld	r24, X
    1bf6:	11 97       	sbiw	r26, 0x01	; 1
    1bf8:	87 15       	cp	r24, r7
    1bfa:	61 f4       	brne	.+24     	; 0x1c14 <ReadCapacity+0x76>
    1bfc:	8c 91       	ld	r24, X
    1bfe:	81 17       	cp	r24, r17
    1c00:	49 f4       	brne	.+18     	; 0x1c14 <ReadCapacity+0x76>
    1c02:	12 96       	adiw	r26, 0x02	; 2
    1c04:	8d 91       	ld	r24, X+
    1c06:	9c 91       	ld	r25, X
    1c08:	13 97       	sbiw	r26, 0x03	; 3
    1c0a:	45 e0       	ldi	r20, 0x05	; 5
    1c0c:	8c 3d       	cpi	r24, 0xDC	; 220
    1c0e:	94 07       	cpc	r25, r20
    1c10:	08 f4       	brcc	.+2      	; 0x1c14 <ReadCapacity+0x76>
    1c12:	81 c2       	rjmp	.+1282   	; 0x2116 <ReadCapacity+0x578>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    1c14:	2f 5f       	subi	r18, 0xFF	; 255
    1c16:	14 96       	adiw	r26, 0x04	; 4
    1c18:	23 17       	cp	r18, r19
    1c1a:	58 f3       	brcs	.-42     	; 0x1bf2 <ReadCapacity+0x54>

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    1c1c:	08 60       	ori	r16, 0x08	; 8
        return;
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
    1c1e:	10 92 77 01 	sts	0x0177, r1
    1c22:	10 92 76 01 	sts	0x0176, r1
  vloss = 0;				// set lost voltage to zero
#endif
  cap.cval = 0;				// set capacity value to zero
    1c26:	10 92 6a 01 	sts	0x016A, r1
    1c2a:	10 92 6b 01 	sts	0x016B, r1
    1c2e:	10 92 6c 01 	sts	0x016C, r1
    1c32:	10 92 6d 01 	sts	0x016D, r1
  cap.cpre = -12;			//default unit is pF
    1c36:	84 ef       	ldi	r24, 0xF4	; 244
    1c38:	80 93 7c 01 	sts	0x017C, r24
  EntladePins();			// discharge capacitor
    1c3c:	0e 94 0a 0b 	call	0x1614	; 0x1614 <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    1c40:	88 e0       	ldi	r24, 0x08	; 8
    1c42:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    1c44:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    1c46:	07 b9       	out	0x07, r16	; 7
//  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  R_DDR = 0;				// set all R Ports to input (no current)
    1c48:	14 b8       	out	0x04, r1	; 4
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    1c4a:	81 2f       	mov	r24, r17
    1c4c:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
    1c50:	7c 01       	movw	r14, r24
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    1c52:	10 92 53 01 	sts	0x0153, r1
    1c56:	10 92 52 01 	sts	0x0152, r1
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
  R_PORT = 0;				// switch R-Port to GND
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
//  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  R_DDR = 0;				// set all R Ports to input (no current)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    1c5a:	ec 01       	movw	r28, r24
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    1c5c:	2d c0       	rjmp	.+90     	; 0x1cb8 <ReadCapacity+0x11a>
     R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    1c5e:	a5 b8       	out	0x05, r10	; 5
     R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    1c60:	a4 b8       	out	0x04, r10	; 4
     wait10ms();			// wait exactly 10ms, do not sleep
    1c62:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <wait10ms>
     R_DDR = 0;				// switch back to input
    1c66:	14 b8       	out	0x04, r1	; 4
     R_PORT = 0;			// no Pull up
    1c68:	15 b8       	out	0x05, r1	; 5
     wait500us();			//wait a little time
    1c6a:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <wait500us>
     wdt_reset();
    1c6e:	a8 95       	wdr
     // read voltage without current, is already charged enough?
     adcv[2] = ReadADC(HighPin);
    1c70:	81 2f       	mov	r24, r17
    1c72:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
     if (adcv[2] > adcv[0]) {
    1c76:	e8 16       	cp	r14, r24
    1c78:	f9 06       	cpc	r15, r25
    1c7a:	20 f4       	brcc	.+8      	; 0x1c84 <ReadCapacity+0xe6>
        adcv[2] -= adcv[0];		//difference to beginning voltage
    1c7c:	ec 01       	movw	r28, r24
    1c7e:	ce 19       	sub	r28, r14
    1c80:	df 09       	sbc	r29, r15
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <ReadCapacity+0xea>
     } else {
        adcv[2] = 0;			// voltage is lower or same as beginning voltage
    1c84:	c0 e0       	ldi	r28, 0x00	; 0
    1c86:	d0 e0       	ldi	r29, 0x00	; 0
     }
     if ((ovcnt16 == 126) && (adcv[2] < 75)) {
    1c88:	80 91 52 01 	lds	r24, 0x0152
    1c8c:	90 91 53 01 	lds	r25, 0x0153
    1c90:	8e 37       	cpi	r24, 0x7E	; 126
    1c92:	91 05       	cpc	r25, r1
    1c94:	21 f4       	brne	.+8      	; 0x1c9e <ReadCapacity+0x100>
    1c96:	cb 34       	cpi	r28, 0x4B	; 75
    1c98:	d1 05       	cpc	r29, r1
    1c9a:	08 f4       	brcc	.+2      	; 0x1c9e <ReadCapacity+0x100>
    1c9c:	37 c2       	rjmp	.+1134   	; 0x210c <ReadCapacity+0x56e>
        // 300mV can not be reached well-timed 
        break;		// don't try to load any more
     }
     if (adcv[2] > 300) {
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	cd 32       	cpi	r28, 0x2D	; 45
    1ca2:	d8 07       	cpc	r29, r24
    1ca4:	b0 f4       	brcc	.+44     	; 0x1cd2 <ReadCapacity+0x134>
//  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  R_DDR = 0;				// set all R Ports to input (no current)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    1ca6:	80 91 52 01 	lds	r24, 0x0152
    1caa:	90 91 53 01 	lds	r25, 0x0153
    1cae:	01 96       	adiw	r24, 0x01	; 1
    1cb0:	90 93 53 01 	sts	0x0153, r25
    1cb4:	80 93 52 01 	sts	0x0152, r24
    1cb8:	80 91 52 01 	lds	r24, 0x0152
    1cbc:	90 91 53 01 	lds	r25, 0x0153
    1cc0:	21 e0       	ldi	r18, 0x01	; 1
    1cc2:	84 3f       	cpi	r24, 0xF4	; 244
    1cc4:	92 07       	cpc	r25, r18
    1cc6:	58 f2       	brcs	.-106    	; 0x1c5e <ReadCapacity+0xc0>
//  wdt_reset();
#if DebugOut == 10
  DisplayValue(ovcnt16,0,' ',4);
  DisplayValue(adcv[2],-3,'V',4);
#endif
  if (adcv[2] < 301) {
    1cc8:	41 e0       	ldi	r20, 0x01	; 1
    1cca:	cd 32       	cpi	r28, 0x2D	; 45
    1ccc:	d4 07       	cpc	r29, r20
    1cce:	08 f4       	brcc	.+2      	; 0x1cd2 <ReadCapacity+0x134>
    1cd0:	1d c2       	rjmp	.+1082   	; 0x210c <ReadCapacity+0x56e>
#endif
//     if (NumOfDiodes != 0) goto messe_mit_rh; /* ****************************** */
     goto keinC;		// was never charged enough, >100mF or shorted
  }
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    1cd2:	80 91 52 01 	lds	r24, 0x0152
    1cd6:	90 91 53 01 	lds	r25, 0x0153
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	81 f4       	brne	.+32     	; 0x1cfe <ReadCapacity+0x160>
    1cde:	85 e0       	ldi	r24, 0x05	; 5
    1ce0:	c5 31       	cpi	r28, 0x15	; 21
    1ce2:	d8 07       	cpc	r29, r24
    1ce4:	08 f0       	brcs	.+2      	; 0x1ce8 <ReadCapacity+0x14a>
    1ce6:	92 c0       	rjmp	.+292    	; 0x1e0c <ReadCapacity+0x26e>
    1ce8:	0a c0       	rjmp	.+20     	; 0x1cfe <ReadCapacity+0x160>
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
     wait5ms();
    1cea:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <wait5ms>
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
    1cee:	81 2f       	mov	r24, r17
    1cf0:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
     wdt_reset();
    1cf4:	a8 95       	wdr
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    1cf6:	08 94       	sec
    1cf8:	c1 1c       	adc	r12, r1
    1cfa:	d1 1c       	adc	r13, r1
    1cfc:	03 c0       	rjmp	.+6      	; 0x1d04 <ReadCapacity+0x166>
#endif
//     if (NumOfDiodes != 0) goto messe_mit_rh; /* ****************************** */
     goto keinC;		// was never charged enough, >100mF or shorted
  }
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    1cfe:	ce 01       	movw	r24, r28
    1d00:	cc 24       	eor	r12, r12
    1d02:	dd 24       	eor	r13, r13
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    1d04:	20 91 52 01 	lds	r18, 0x0152
    1d08:	30 91 53 01 	lds	r19, 0x0153
    1d0c:	2c 15       	cp	r18, r12
    1d0e:	3d 05       	cpc	r19, r13
    1d10:	60 f7       	brcc	.-40     	; 0x1cea <ReadCapacity+0x14c>
     wait5ms();
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
    1d12:	e8 16       	cp	r14, r24
    1d14:	f9 06       	cpc	r15, r25
    1d16:	30 f4       	brcc	.+12     	; 0x1d24 <ReadCapacity+0x186>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    1d18:	8e 19       	sub	r24, r14
    1d1a:	9f 09       	sbc	r25, r15
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    1d1c:	8c 17       	cp	r24, r28
    1d1e:	9d 07       	cpc	r25, r29
    1d20:	10 f5       	brcc	.+68     	; 0x1d66 <ReadCapacity+0x1c8>
    1d22:	02 c0       	rjmp	.+4      	; 0x1d28 <ReadCapacity+0x18a>
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
    1d28:	7e 01       	movw	r14, r28
    1d2a:	e8 1a       	sub	r14, r24
    1d2c:	f9 0a       	sbc	r15, r25
  } else {
     adcv[3] = 0;			// no lost voltage
  }
#if FLASHEND > 0x1fff
  // compute equivalent parallel resistance from voltage drop
  if (adcv[3] > 0) {
    1d2e:	e9 f0       	breq	.+58     	; 0x1d6a <ReadCapacity+0x1cc>
     // there is any voltage drop (adcv[3]) !
     // adcv[2] is the loaded voltage.
     vloss = (unsigned long)(adcv[3] * 1000UL) / adcv[2];
    1d30:	b7 01       	movw	r22, r14
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	28 ee       	ldi	r18, 0xE8	; 232
    1d38:	33 e0       	ldi	r19, 0x03	; 3
    1d3a:	40 e0       	ldi	r20, 0x00	; 0
    1d3c:	50 e0       	ldi	r21, 0x00	; 0
    1d3e:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
    1d42:	9e 01       	movw	r18, r28
    1d44:	40 e0       	ldi	r20, 0x00	; 0
    1d46:	50 e0       	ldi	r21, 0x00	; 0
    1d48:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    1d4c:	49 01       	movw	r8, r18
  }
#endif
  if (adcv[3] > 100) {
    1d4e:	25 e6       	ldi	r18, 0x65	; 101
    1d50:	e2 16       	cp	r14, r18
    1d52:	f1 04       	cpc	r15, r1
    1d54:	60 f0       	brcs	.+24     	; 0x1d6e <ReadCapacity+0x1d0>
 #if DebugOut == 10
     lcd_data('L');
     lcd_space();
     wait_about1s();
 #endif
     if (ovcnt16 == 0 )  {
    1d56:	80 91 52 01 	lds	r24, 0x0152
    1d5a:	90 91 53 01 	lds	r25, 0x0153
    1d5e:	00 97       	sbiw	r24, 0x00	; 0
    1d60:	09 f4       	brne	.+2      	; 0x1d64 <ReadCapacity+0x1c6>
    1d62:	56 c0       	rjmp	.+172    	; 0x1e10 <ReadCapacity+0x272>
    1d64:	d3 c1       	rjmp	.+934    	; 0x210c <ReadCapacity+0x56e>
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    1d66:	ee 24       	eor	r14, r14
    1d68:	ff 24       	eor	r15, r15
  } else {
     adcv[3] = 0;			// no lost voltage
  }
#if FLASHEND > 0x1fff
  // compute equivalent parallel resistance from voltage drop
  if (adcv[3] > 0) {
    1d6a:	88 24       	eor	r8, r8
    1d6c:	99 24       	eor	r9, r9
     if (ovcnt16 == 0 )  {
        goto messe_mit_rh;		// Voltage of more than 1300mV is reached in one pulse, but not hold
     }
     goto keinC;			// capacitor does not keep the voltage about 5ms
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
    1d6e:	a0 90 52 01 	lds	r10, 0x0152
    1d72:	b0 90 53 01 	lds	r11, 0x0153
    1d76:	08 94       	sec
    1d78:	a1 1c       	adc	r10, r1
    1d7a:	b1 1c       	adc	r11, r1
    1d7c:	cc 24       	eor	r12, r12
    1d7e:	dd 24       	eor	r13, r13
    1d80:	a0 92 72 01 	sts	0x0172, r10
    1d84:	b0 92 73 01 	sts	0x0173, r11
    1d88:	c0 92 74 01 	sts	0x0174, r12
    1d8c:	d0 92 75 01 	sts	0x0175, r13
  // compute factor with load voltage + lost voltage during the voltage load time
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]+adcv[3]);	// get factor to convert time to capacity from table
    1d90:	c7 01       	movw	r24, r14
    1d92:	8c 0f       	add	r24, r28
    1d94:	9d 1f       	adc	r25, r29
    1d96:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <getRLmultip>
    1d9a:	bc 01       	movw	r22, r24
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	a6 01       	movw	r20, r12
    1da2:	95 01       	movw	r18, r10
    1da4:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
    1da8:	60 93 72 01 	sts	0x0172, r22
    1dac:	70 93 73 01 	sts	0x0173, r23
    1db0:	80 93 74 01 	sts	0x0174, r24
    1db4:	90 93 75 01 	sts	0x0175, r25
#endif
   cap.cval = cap.cval_uncorrected.dw;	// set result to uncorrected
    1db8:	60 93 6a 01 	sts	0x016A, r22
    1dbc:	70 93 6b 01 	sts	0x016B, r23
    1dc0:	80 93 6c 01 	sts	0x016C, r24
    1dc4:	90 93 6d 01 	sts	0x016D, r25
   cap.cpre = -9;		// switch units to nF 
    1dc8:	87 ef       	ldi	r24, 0xF7	; 247
    1dca:	80 93 7c 01 	sts	0x017C, r24
   Scale_C_with_vcc();
    1dce:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <Scale_C_with_vcc>
   // cap.cval for this type is at least 40000nF, so the last digit will be never shown
   cap.cval *= (1000 - C_H_KORR);	// correct with C_H_KORR with 0.1% resolution, but prevent overflow
    1dd2:	60 91 6a 01 	lds	r22, 0x016A
    1dd6:	70 91 6b 01 	lds	r23, 0x016B
    1dda:	80 91 6c 01 	lds	r24, 0x016C
    1dde:	90 91 6d 01 	lds	r25, 0x016D
    1de2:	28 ee       	ldi	r18, 0xE8	; 232
    1de4:	33 e0       	ldi	r19, 0x03	; 3
    1de6:	40 e0       	ldi	r20, 0x00	; 0
    1de8:	50 e0       	ldi	r21, 0x00	; 0
    1dea:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
   cap.cval /= 100;
    1dee:	24 e6       	ldi	r18, 0x64	; 100
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	40 e0       	ldi	r20, 0x00	; 0
    1df4:	50 e0       	ldi	r21, 0x00	; 0
    1df6:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    1dfa:	20 93 6a 01 	sts	0x016A, r18
    1dfe:	30 93 6b 01 	sts	0x016B, r19
    1e02:	40 93 6c 01 	sts	0x016C, r20
    1e06:	50 93 6d 01 	sts	0x016D, r21
   DisplayValue(cap.cval,cap.cpre,'F',4);
   lcd_space();
   lcd_string(utoa(ovcnt16,outval,10));
   wait_about3s();
#endif
   goto checkDiodes;
    1e0a:	41 c1       	rjmp	.+642    	; 0x208e <ReadCapacity+0x4f0>
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
  vloss = 0;				// set lost voltage to zero
    1e0c:	88 24       	eor	r8, r8
    1e0e:	99 24       	eor	r9, r9
  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
  HiPinR_L = pgm_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
#if FLASEND > 0x3fff
  HiPinR_H = pgm_read_byte(&PinRHtab[HighPin]);	//R_H mask for HighPin R_H load
#else
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load
    1e10:	ea 2c       	mov	r14, r10
    1e12:	ee 0c       	add	r14, r14

//==================================================================================
// Measurement of little capacity values
messe_mit_rh:
  //little capacity value, about  < 50 µF
  EntladePins();			// discharge capacitor
    1e14:	0e 94 0a 0b 	call	0x1614	; 0x1614 <EntladePins>
  //measure with the R_H (470kOhm) resistor 
  R_PORT = 0;		// R_DDR ist HiPinR_L
    1e18:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = (1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK;	//switch all Pins to output
    1e1a:	8f e0       	ldi	r24, 0x0F	; 15
    1e1c:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		//switch all ADC Pins to GND
    1e1e:	88 e0       	ldi	r24, 0x08	; 8
    1e20:	88 b9       	out	0x08, r24	; 8
  R_DDR = HiPinR_H;   		// switch R_H resistor port for HighPin to output (GND)
    1e22:	e4 b8       	out	0x04, r14	; 4
// setup Analog Comparator
  ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    1e24:	80 e4       	ldi	r24, 0x40	; 64
    1e26:	80 93 7b 00 	sts	0x007B, r24
  ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    1e2a:	84 e5       	ldi	r24, 0x54	; 84
    1e2c:	80 bf       	out	0x30, r24	; 48
  ADMUX = (1<<REFS0) | HighPin;			// switch Mux to High-Pin
    1e2e:	81 2f       	mov	r24, r17
    1e30:	80 64       	ori	r24, 0x40	; 64
    1e32:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    1e36:	86 e1       	ldi	r24, 0x16	; 22
    1e38:	80 93 7a 00 	sts	0x007A, r24
  wait200us();			//wait for bandgap to start up
    1e3c:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <wait200us>

// setup Counter1
  ovcnt16 = 0;
    1e40:	10 92 53 01 	sts	0x0153, r1
    1e44:	10 92 52 01 	sts	0x0152, r1
  TCCR1A = 0;			// set Counter1 to normal Mode
    1e48:	10 92 80 00 	sts	0x0080, r1
  TCNT1 = 0;			//set Counter to 0
    1e4c:	10 92 85 00 	sts	0x0085, r1
    1e50:	10 92 84 00 	sts	0x0084, r1
  TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// clear interrupt flags
    1e54:	87 e2       	ldi	r24, 0x27	; 39
    1e56:	86 bb       	out	0x16, r24	; 22
#ifndef INHIBIT_SLEEP_MODE
  TIMSK1 = (1<<TOIE1) | (1<<ICIE1);	// enable Timer overflow interrupt and input capture interrupt
    1e58:	81 e2       	ldi	r24, 0x21	; 33
    1e5a:	80 93 6f 00 	sts	0x006F, r24
  unfinished = 1;
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	80 93 69 01 	sts	0x0169, r24
#endif
  R_PORT = HiPinR_H;           	// switch R_H resistor port for HighPin to VCC
    1e64:	e5 b8       	out	0x05, r14	; 5
  if(PartFound == PART_FET) {
    1e66:	90 91 07 01 	lds	r25, 0x0107
    1e6a:	94 30       	cpi	r25, 0x04	; 4
    1e6c:	71 f4       	brne	.+28     	; 0x1e8a <ReadCapacity+0x2ec>
     // charge capacitor with R_H resistor
     TCCR1B = (0<<ICNC1) | (1<<CS10);	//Start counter 1MHz or 8MHz without Noise Canceler
    1e6e:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = (((1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK) & ~(1<<HighPin));	// release only HighPin ADC port
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	01 2e       	mov	r0, r17
    1e78:	02 c0       	rjmp	.+4      	; 0x1e7e <ReadCapacity+0x2e0>
    1e7a:	88 0f       	add	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	0a 94       	dec	r0
    1e80:	e2 f7       	brpl	.-8      	; 0x1e7a <ReadCapacity+0x2dc>
    1e82:	80 95       	com	r24
    1e84:	8f 70       	andi	r24, 0x0F	; 15
    1e86:	87 b9       	out	0x07, r24	; 7
    1e88:	03 c0       	rjmp	.+6      	; 0x1e90 <ReadCapacity+0x2f2>
  } else {
     TCCR1B =  (0<<ICNC1) | (1<<CS10);	//start counter 1MHz or 8MHz without Noise Canceler
    1e8a:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
    1e8e:	07 b9       	out	0x07, r16	; 7
     // this OV was not counted, but was before the Input Capture
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
     ovcnt16++;
  }
#else
  cli();		// disable interrupts to prevent wakeup Interrupts before sleeping
    1e90:	f8 94       	cli
  set_sleep_mode(SLEEP_MODE_IDLE);
    1e92:	83 b7       	in	r24, 0x33	; 51
    1e94:	81 7f       	andi	r24, 0xF1	; 241
    1e96:	83 bf       	out	0x33, r24	; 51
  while(unfinished) {
    1e98:	12 c0       	rjmp	.+36     	; 0x1ebe <ReadCapacity+0x320>
    sleep_enable();
    1e9a:	83 b7       	in	r24, 0x33	; 51
    1e9c:	81 60       	ori	r24, 0x01	; 1
    1e9e:	83 bf       	out	0x33, r24	; 51
    sei();		// enable interrupts after next instruction
    1ea0:	78 94       	sei
    sleep_cpu();	// only enable interrupts during sleeping
    1ea2:	88 95       	sleep
    sleep_disable();
    1ea4:	83 b7       	in	r24, 0x33	; 51
    1ea6:	8e 7f       	andi	r24, 0xFE	; 254
    1ea8:	83 bf       	out	0x33, r24	; 51
    cli();		// disable interrupts again
    1eaa:	f8 94       	cli
    wdt_reset();	// reset watch dog during waiting
    1eac:	a8 95       	wdr
    if(ovcnt16 == (F_CPU/5000)) {
    1eae:	80 91 52 01 	lds	r24, 0x0152
    1eb2:	90 91 53 01 	lds	r25, 0x0153
    1eb6:	46 e0       	ldi	r20, 0x06	; 6
    1eb8:	80 34       	cpi	r24, 0x40	; 64
    1eba:	94 07       	cpc	r25, r20
    1ebc:	21 f0       	breq	.+8      	; 0x1ec6 <ReadCapacity+0x328>
     ovcnt16++;
  }
#else
  cli();		// disable interrupts to prevent wakeup Interrupts before sleeping
  set_sleep_mode(SLEEP_MODE_IDLE);
  while(unfinished) {
    1ebe:	80 91 69 01 	lds	r24, 0x0169
    1ec2:	88 23       	and	r24, r24
    1ec4:	51 f7       	brne	.-44     	; 0x1e9a <ReadCapacity+0x2fc>
    wdt_reset();	// reset watch dog during waiting
    if(ovcnt16 == (F_CPU/5000)) {
       break; 		//Timeout for Charging, above 12 s
    }
  }
  sei();		// enable interrupts again
    1ec6:	78 94       	sei
  TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    1ec8:	10 92 81 00 	sts	0x0081, r1
  tmpint = ICR1;		// get previous Input Capture Counter flag
    1ecc:	c0 91 86 00 	lds	r28, 0x0086
    1ed0:	d0 91 87 00 	lds	r29, 0x0087
  TIMSK1 = (0<<TOIE1) | (0<<ICIE1);	// disable Timer overflow interrupt and input capture interrupt
    1ed4:	10 92 6f 00 	sts	0x006F, r1
    lcd_string(utoa(tmpint,outval,10));
  }
#endif

//############################################################
  ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    1ed8:	86 e9       	ldi	r24, 0x96	; 150
    1eda:	80 93 7a 00 	sts	0x007A, r24
  R_DDR = 0;			// switch R_H resistor port for input
    1ede:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// switch R_H resistor port pull up for HighPin off
    1ee0:	15 b8       	out	0x05, r1	; 5
  adcv[2] = ReadADC(HighPin);   // get loaded voltage
    1ee2:	81 2f       	mov	r24, r17
    1ee4:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
  load_diff = adcv[2] + REF_C_KORR - ref_mv;	// build difference of capacitor voltage to Reference Voltage
    1ee8:	20 91 39 01 	lds	r18, 0x0139
    1eec:	30 91 3a 01 	lds	r19, 0x013A
    1ef0:	82 1b       	sub	r24, r18
    1ef2:	93 0b       	sbc	r25, r19
    1ef4:	0c 96       	adiw	r24, 0x0c	; 12
    1ef6:	90 93 7f 01 	sts	0x017F, r25
    1efa:	80 93 7e 01 	sts	0x017E, r24
//############################################################
  if (ovcnt16 >= (F_CPU/10000)) {
    1efe:	80 91 52 01 	lds	r24, 0x0152
    1f02:	90 91 53 01 	lds	r25, 0x0153
    1f06:	23 e0       	ldi	r18, 0x03	; 3
    1f08:	80 32       	cpi	r24, 0x20	; 32
    1f0a:	92 07       	cpc	r25, r18
    1f0c:	08 f0       	brcs	.+2      	; 0x1f10 <ReadCapacity+0x372>
    1f0e:	fe c0       	rjmp	.+508    	; 0x210c <ReadCapacity+0x56e>
     wait_about1s();
#endif
     goto keinC;	// no normal end
  }
//  cap.cval_uncorrected = CombineII2Long(ovcnt16, tmpint);
  cap.cval_uncorrected.w[1] = ovcnt16;
    1f10:	80 91 52 01 	lds	r24, 0x0152
    1f14:	90 91 53 01 	lds	r25, 0x0153
    1f18:	90 93 75 01 	sts	0x0175, r25
    1f1c:	80 93 74 01 	sts	0x0174, r24
  cap.cval_uncorrected.w[0] = tmpint;
    1f20:	d0 93 73 01 	sts	0x0173, r29
    1f24:	c0 93 72 01 	sts	0x0172, r28

  cap.cpre = -12;			// cap.cval unit is pF 
    1f28:	84 ef       	ldi	r24, 0xF4	; 244
    1f2a:	80 93 7c 01 	sts	0x017C, r24
  if (ovcnt16 > 65) {
    1f2e:	80 91 52 01 	lds	r24, 0x0152
    1f32:	90 91 53 01 	lds	r25, 0x0153
    1f36:	82 34       	cpi	r24, 0x42	; 66
    1f38:	91 05       	cpc	r25, r1
    1f3a:	c8 f0       	brcs	.+50     	; 0x1f6e <ReadCapacity+0x3d0>
     cap.cval_uncorrected.dw /= 100;	// switch to next unit
    1f3c:	60 91 72 01 	lds	r22, 0x0172
    1f40:	70 91 73 01 	lds	r23, 0x0173
    1f44:	80 91 74 01 	lds	r24, 0x0174
    1f48:	90 91 75 01 	lds	r25, 0x0175
    1f4c:	24 e6       	ldi	r18, 0x64	; 100
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 e0       	ldi	r20, 0x00	; 0
    1f52:	50 e0       	ldi	r21, 0x00	; 0
    1f54:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    1f58:	20 93 72 01 	sts	0x0172, r18
    1f5c:	30 93 73 01 	sts	0x0173, r19
    1f60:	40 93 74 01 	sts	0x0174, r20
    1f64:	50 93 75 01 	sts	0x0175, r21
     cap.cpre += 2;			// set unit, prevent overflow
    1f68:	86 ef       	ldi	r24, 0xF6	; 246
    1f6a:	80 93 7c 01 	sts	0x017C, r24
  }
  cap.cval_uncorrected.dw *= RHmultip;		// 708
    1f6e:	60 91 00 01 	lds	r22, 0x0100
    1f72:	70 91 01 01 	lds	r23, 0x0101
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	20 91 72 01 	lds	r18, 0x0172
    1f7e:	30 91 73 01 	lds	r19, 0x0173
    1f82:	40 91 74 01 	lds	r20, 0x0174
    1f86:	50 91 75 01 	lds	r21, 0x0175
    1f8a:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
  cap.cval_uncorrected.dw /= (F_CPU / 10000);	// divide by 100 (@ 1MHz clock), 800 (@ 8MHz clock)
    1f8e:	20 e2       	ldi	r18, 0x20	; 32
    1f90:	33 e0       	ldi	r19, 0x03	; 3
    1f92:	40 e0       	ldi	r20, 0x00	; 0
    1f94:	50 e0       	ldi	r21, 0x00	; 0
    1f96:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    1f9a:	20 93 72 01 	sts	0x0172, r18
    1f9e:	30 93 73 01 	sts	0x0173, r19
    1fa2:	40 93 74 01 	sts	0x0174, r20
    1fa6:	50 93 75 01 	sts	0x0175, r21
  cap.cval = cap.cval_uncorrected.dw;		// set the corrected cap.cval
    1faa:	ea e6       	ldi	r30, 0x6A	; 106
    1fac:	f1 e0       	ldi	r31, 0x01	; 1
    1fae:	20 93 6a 01 	sts	0x016A, r18
    1fb2:	31 83       	std	Z+1, r19	; 0x01
    1fb4:	42 83       	std	Z+2, r20	; 0x02
    1fb6:	53 83       	std	Z+3, r21	; 0x03
  Scale_C_with_vcc();
    1fb8:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <Scale_C_with_vcc>
  if (cap.cpre == -12) {
    1fbc:	80 91 7c 01 	lds	r24, 0x017C
    1fc0:	84 3f       	cpi	r24, 0xF4	; 244
    1fc2:	09 f0       	breq	.+2      	; 0x1fc6 <ReadCapacity+0x428>
    1fc4:	55 c0       	rjmp	.+170    	; 0x2070 <ReadCapacity+0x4d2>
#if COMP_SLEW1 > COMP_SLEW2
     if (cap.cval < COMP_SLEW1) {
    1fc6:	c0 90 6a 01 	lds	r12, 0x016A
    1fca:	d0 90 6b 01 	lds	r13, 0x016B
    1fce:	e0 90 6c 01 	lds	r14, 0x016C
    1fd2:	f0 90 6d 01 	lds	r15, 0x016D
    1fd6:	40 ea       	ldi	r20, 0xA0	; 160
    1fd8:	c4 16       	cp	r12, r20
    1fda:	4f e0       	ldi	r20, 0x0F	; 15
    1fdc:	d4 06       	cpc	r13, r20
    1fde:	40 e0       	ldi	r20, 0x00	; 0
    1fe0:	e4 06       	cpc	r14, r20
    1fe2:	40 e0       	ldi	r20, 0x00	; 0
    1fe4:	f4 06       	cpc	r15, r20
    1fe6:	c0 f4       	brcc	.+48     	; 0x2018 <ReadCapacity+0x47a>
        // add slew rate dependent offset
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
    1fe8:	a7 01       	movw	r20, r14
    1fea:	96 01       	movw	r18, r12
    1fec:	24 52       	subi	r18, 0x24	; 36
    1fee:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff0:	4f 4f       	sbci	r20, 0xFF	; 255
    1ff2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff4:	60 ea       	ldi	r22, 0xA0	; 160
    1ff6:	7f e0       	ldi	r23, 0x0F	; 15
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    2000:	2c 0d       	add	r18, r12
    2002:	3d 1d       	adc	r19, r13
    2004:	4e 1d       	adc	r20, r14
    2006:	5f 1d       	adc	r21, r15
    2008:	20 93 6a 01 	sts	0x016A, r18
    200c:	30 93 6b 01 	sts	0x016B, r19
    2010:	40 93 6c 01 	sts	0x016C, r20
    2014:	50 93 6d 01 	sts	0x016D, r21
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2018:	80 91 51 01 	lds	r24, 0x0151
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	8f 55       	subi	r24, 0x5F	; 95
    2020:	9e 4f       	sbci	r25, 0xFE	; 254
    2022:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <__eerd_byte_m168>
     if (cap.cval > tmpint) {
    2026:	20 91 6a 01 	lds	r18, 0x016A
    202a:	30 91 6b 01 	lds	r19, 0x016B
    202e:	40 91 6c 01 	lds	r20, 0x016C
    2032:	50 91 6d 01 	lds	r21, 0x016D
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2036:	90 e0       	ldi	r25, 0x00	; 0
     if (cap.cval > tmpint) {
    2038:	a0 e0       	ldi	r26, 0x00	; 0
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	82 17       	cp	r24, r18
    203e:	93 07       	cpc	r25, r19
    2040:	a4 07       	cpc	r26, r20
    2042:	b5 07       	cpc	r27, r21
    2044:	68 f4       	brcc	.+26     	; 0x2060 <ReadCapacity+0x4c2>
         cap.cval -= tmpint;		//subtract zero offset (pF)
    2046:	28 1b       	sub	r18, r24
    2048:	39 0b       	sbc	r19, r25
    204a:	4a 0b       	sbc	r20, r26
    204c:	5b 0b       	sbc	r21, r27
    204e:	20 93 6a 01 	sts	0x016A, r18
    2052:	30 93 6b 01 	sts	0x016B, r19
    2056:	40 93 6c 01 	sts	0x016C, r20
    205a:	50 93 6d 01 	sts	0x016D, r21
    205e:	08 c0       	rjmp	.+16     	; 0x2070 <ReadCapacity+0x4d2>
         lcd_testpin(HighPin);
         lcd_space();
#endif
       }
#endif
         cap.cval = 0;			//unsigned long may not reach negativ value
    2060:	10 92 6a 01 	sts	0x016A, r1
    2064:	10 92 6b 01 	sts	0x016B, r1
    2068:	10 92 6c 01 	sts	0x016C, r1
    206c:	10 92 6d 01 	sts	0x016D, r1
  lcd_testpin(HighPin);
  lcd_space();
  DisplayValue(cap.cval,cap.cpre,'F',4);
  wait_about3s();
#endif
  R_DDR = HiPinR_L; 		//switch R_L for High-Pin to GND
    2070:	a4 b8       	out	0x04, r10	; 4
#if F_CPU < 2000001
   if(cap.cval < 50)
#else 
   if(cap.cval < 25)
    2072:	80 91 6a 01 	lds	r24, 0x016A
    2076:	90 91 6b 01 	lds	r25, 0x016B
    207a:	a0 91 6c 01 	lds	r26, 0x016C
    207e:	b0 91 6d 01 	lds	r27, 0x016D
    2082:	89 31       	cpi	r24, 0x19	; 25
    2084:	91 05       	cpc	r25, r1
    2086:	a1 05       	cpc	r26, r1
    2088:	b1 05       	cpc	r27, r1
    208a:	08 f4       	brcc	.+2      	; 0x208e <ReadCapacity+0x4f0>
    208c:	3f c0       	rjmp	.+126    	; 0x210c <ReadCapacity+0x56e>
#endif
      goto keinC;	//capacity to low, < 50pF @1MHz (25pF @8MHz)
   }
   // end low capacity 
checkDiodes:
   if((NumOfDiodes > 0)  && (PartFound != PART_FET)) {
    208e:	80 91 05 01 	lds	r24, 0x0105
    2092:	88 23       	and	r24, r24
    2094:	21 f0       	breq	.+8      	; 0x209e <ReadCapacity+0x500>
    2096:	80 91 07 01 	lds	r24, 0x0107
    209a:	84 30       	cpi	r24, 0x04	; 4
    209c:	b9 f5       	brne	.+110    	; 0x210c <ReadCapacity+0x56e>
      wait_about1s();
#endif
      // nearly shure, that there is one or more diodes in reverse direction,
      // which would be wrongly detected as capacitor 
   } else {
      PartFound = PART_CAPACITOR;	//capacitor is found
    209e:	87 e0       	ldi	r24, 0x07	; 7
    20a0:	80 93 07 01 	sts	0x0107, r24
      if ((cap.cpre > cap.cpre_max) || ((cap.cpre == cap.cpre_max) && (cap.cval > cap.cval_max))) {
    20a4:	60 91 7c 01 	lds	r22, 0x017C
    20a8:	80 91 7d 01 	lds	r24, 0x017D
    20ac:	86 17       	cp	r24, r22
    20ae:	bc f0       	brlt	.+46     	; 0x20de <ReadCapacity+0x540>
    20b0:	68 17       	cp	r22, r24
    20b2:	61 f5       	brne	.+88     	; 0x210c <ReadCapacity+0x56e>
    20b4:	20 91 6a 01 	lds	r18, 0x016A
    20b8:	30 91 6b 01 	lds	r19, 0x016B
    20bc:	40 91 6c 01 	lds	r20, 0x016C
    20c0:	50 91 6d 01 	lds	r21, 0x016D
    20c4:	80 91 6e 01 	lds	r24, 0x016E
    20c8:	90 91 6f 01 	lds	r25, 0x016F
    20cc:	a0 91 70 01 	lds	r26, 0x0170
    20d0:	b0 91 71 01 	lds	r27, 0x0171
    20d4:	82 17       	cp	r24, r18
    20d6:	93 07       	cpc	r25, r19
    20d8:	a4 07       	cpc	r26, r20
    20da:	b5 07       	cpc	r27, r21
    20dc:	b8 f4       	brcc	.+46     	; 0x210c <ReadCapacity+0x56e>
         // we have found a greater one
         cap.cval_max = cap.cval;
    20de:	ea e6       	ldi	r30, 0x6A	; 106
    20e0:	f1 e0       	ldi	r31, 0x01	; 1
    20e2:	80 91 6a 01 	lds	r24, 0x016A
    20e6:	90 91 6b 01 	lds	r25, 0x016B
    20ea:	a0 91 6c 01 	lds	r26, 0x016C
    20ee:	b0 91 6d 01 	lds	r27, 0x016D
    20f2:	80 93 6e 01 	sts	0x016E, r24
    20f6:	90 93 6f 01 	sts	0x016F, r25
    20fa:	a0 93 70 01 	sts	0x0170, r26
    20fe:	b0 93 71 01 	sts	0x0171, r27
         cap.cpre_max = cap.cpre;
    2102:	63 8b       	std	Z+19, r22	; 0x13
#if FLASHEND > 0x1fff
         cap.v_loss = vloss;		// lost voltage in 0.01%
    2104:	97 86       	std	Z+15, r9	; 0x0f
    2106:	86 86       	std	Z+14, r8	; 0x0e
#endif
         cap.ca = LowPin;		// save LowPin
    2108:	70 8a       	std	Z+16, r7	; 0x10
         cap.cb = HighPin;		// save HighPin
    210a:	11 8b       	std	Z+17, r17	; 0x11
keinC:
  // discharge capacitor again
//  EntladePins();		// discharge capacitors
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    210c:	88 e0       	ldi	r24, 0x08	; 8
    210e:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    2110:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    2112:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    2114:	15 b8       	out	0x05, r1	; 5
  return;
 } // end ReadCapacity()
    2116:	df 91       	pop	r29
    2118:	cf 91       	pop	r28
    211a:	1f 91       	pop	r17
    211c:	0f 91       	pop	r16
    211e:	ff 90       	pop	r15
    2120:	ef 90       	pop	r14
    2122:	df 90       	pop	r13
    2124:	cf 90       	pop	r12
    2126:	bf 90       	pop	r11
    2128:	af 90       	pop	r10
    212a:	9f 90       	pop	r9
    212c:	8f 90       	pop	r8
    212e:	7f 90       	pop	r7
    2130:	08 95       	ret

00002132 <__vector_13>:
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
}
#ifndef INHIBIT_SLEEP_MODE
/* Interrupt Service Routine for timer1 Overflow */
 ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    2132:	1f 92       	push	r1
    2134:	0f 92       	push	r0
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	0f 92       	push	r0
    213a:	11 24       	eor	r1, r1
    213c:	8f 93       	push	r24
    213e:	9f 93       	push	r25
 if ((!(TI1_INT_FLAGS & (1<<ICF1)) && (unfinished !=0)) || ((TI1_INT_FLAGS & (1<<ICF1)) && (ICR1 < 250))) {
    2140:	b5 99       	sbic	0x16, 5	; 22
    2142:	04 c0       	rjmp	.+8      	; 0x214c <__vector_13+0x1a>
    2144:	80 91 69 01 	lds	r24, 0x0169
    2148:	88 23       	and	r24, r24
    214a:	49 f4       	brne	.+18     	; 0x215e <__vector_13+0x2c>
    214c:	b5 9b       	sbis	0x16, 5	; 22
    214e:	10 c0       	rjmp	.+32     	; 0x2170 <__vector_13+0x3e>
    2150:	80 91 86 00 	lds	r24, 0x0086
    2154:	90 91 87 00 	lds	r25, 0x0087
    2158:	8a 3f       	cpi	r24, 0xFA	; 250
    215a:	91 05       	cpc	r25, r1
    215c:	48 f4       	brcc	.+18     	; 0x2170 <__vector_13+0x3e>
    // Capture Event not pending or (Capture Event pending and ICR1 < 250
    // the ICR1H is buffered and can not examined alone, we must read the ICR1L first (with ICR1 access) !
   ovcnt16++;				// count Overflow
    215e:	80 91 52 01 	lds	r24, 0x0152
    2162:	90 91 53 01 	lds	r25, 0x0153
    2166:	01 96       	adiw	r24, 0x01	; 1
    2168:	90 93 53 01 	sts	0x0153, r25
    216c:	80 93 52 01 	sts	0x0152, r24
 }
}
    2170:	9f 91       	pop	r25
    2172:	8f 91       	pop	r24
    2174:	0f 90       	pop	r0
    2176:	0f be       	out	0x3f, r0	; 63
    2178:	0f 90       	pop	r0
    217a:	1f 90       	pop	r1
    217c:	18 95       	reti

0000217e <__vector_10>:
/* Interrupt Service Routine for timer1 capture event (Comparator) */
 ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    217e:	1f 92       	push	r1
    2180:	0f 92       	push	r0
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	0f 92       	push	r0
    2186:	11 24       	eor	r1, r1
    2188:	8f 93       	push	r24
    218a:	9f 93       	push	r25
 unfinished = 0;			// clear unfinished flag
    218c:	10 92 69 01 	sts	0x0169, r1
 // With unfinished set to 0, we prevent further counting the Overflow.s
 // Is already a Overflow detected?
 if((TI1_INT_FLAGS & (1<<TOV1))) {	// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    2190:	b0 9b       	sbis	0x16, 0	; 22
    2192:	10 c0       	rjmp	.+32     	; 0x21b4 <__vector_10+0x36>
   //there is already a Overflow detected, before or after the capture event?
   // ICR1H is buffered and can not examined alone, we must read the ICR1L first (with ICR1 access) !
   if (ICR1 < 250) {
    2194:	80 91 86 00 	lds	r24, 0x0086
    2198:	90 91 87 00 	lds	r25, 0x0087
    219c:	8a 3f       	cpi	r24, 0xFA	; 250
    219e:	91 05       	cpc	r25, r1
    21a0:	48 f4       	brcc	.+18     	; 0x21b4 <__vector_10+0x36>
     //  Yes, Input Capture Counter is low, Overflow has occured before the capture event
     ovcnt16++;				// count Overflow
    21a2:	80 91 52 01 	lds	r24, 0x0152
    21a6:	90 91 53 01 	lds	r25, 0x0153
    21aa:	01 96       	adiw	r24, 0x01	; 1
    21ac:	90 93 53 01 	sts	0x0153, r25
    21b0:	80 93 52 01 	sts	0x0152, r24
   }
 }
}
    21b4:	9f 91       	pop	r25
    21b6:	8f 91       	pop	r24
    21b8:	0f 90       	pop	r0
    21ba:	0f be       	out	0x3f, r0	; 63
    21bc:	0f 90       	pop	r0
    21be:	1f 90       	pop	r1
    21c0:	18 95       	reti

000021c2 <get_log>:
 } // end ReadInductance()


#if FLASHEND > 0x1fff
// get_log interpolate a table with the function -log(1 - (permil/1000))
uint16_t get_log(uint16_t permil) {
    21c2:	cf 93       	push	r28
    21c4:	df 93       	push	r29
  uint16_t y1, y2;			// table values
  uint16_t result;			// result of interpolation
  uint8_t tabind;			// index to table value
  uint8_t tabres;			// distance to lower table value, fraction of Log_Tab_Distance

  tabind = permil / Log_Tab_Distance;	// index to table
    21c6:	24 e1       	ldi	r18, 0x14	; 20
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	b9 01       	movw	r22, r18
    21cc:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__udivmodhi4>
    21d0:	dc 01       	movw	r26, r24
  tabres = permil % Log_Tab_Distance;	// fraction of table distance
  // interpolate the table of factors
  y1 = pgm_read_word(&LogTab[tabind]);	// get the lower table value
    21d2:	70 e0       	ldi	r23, 0x00	; 0
    21d4:	fb 01       	movw	r30, r22
    21d6:	ee 0f       	add	r30, r30
    21d8:	ff 1f       	adc	r31, r31
    21da:	e8 59       	subi	r30, 0x98	; 152
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	c5 91       	lpm	r28, Z+
    21e0:	d4 91       	lpm	r29, Z+
  y2 = pgm_read_word(&LogTab[tabind+1]); // get the higher table value
    21e2:	fb 01       	movw	r30, r22
    21e4:	ee 0f       	add	r30, r30
    21e6:	ff 1f       	adc	r31, r31
    21e8:	e6 59       	subi	r30, 0x96	; 150
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	45 91       	lpm	r20, Z+
    21ee:	54 91       	lpm	r21, Z+
  result = ((y2 - y1) * tabres ) / Log_Tab_Distance + y1; // interpolate
    21f0:	4c 1b       	sub	r20, r28
    21f2:	5d 0b       	sbc	r21, r29
    21f4:	4a 9f       	mul	r20, r26
    21f6:	c0 01       	movw	r24, r0
    21f8:	4b 9f       	mul	r20, r27
    21fa:	90 0d       	add	r25, r0
    21fc:	5a 9f       	mul	r21, r26
    21fe:	90 0d       	add	r25, r0
    2200:	11 24       	eor	r1, r1
    2202:	b9 01       	movw	r22, r18
    2204:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__udivmodhi4>
    2208:	6c 0f       	add	r22, r28
    220a:	7d 1f       	adc	r23, r29
  return(result);
 }
    220c:	cb 01       	movw	r24, r22
    220e:	df 91       	pop	r29
    2210:	cf 91       	pop	r28
    2212:	08 95       	ret

00002214 <ReadInductance>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadInductance(void) {
    2214:	2f 92       	push	r2
    2216:	3f 92       	push	r3
    2218:	4f 92       	push	r4
    221a:	5f 92       	push	r5
    221c:	6f 92       	push	r6
    221e:	7f 92       	push	r7
    2220:	8f 92       	push	r8
    2222:	9f 92       	push	r9
    2224:	af 92       	push	r10
    2226:	bf 92       	push	r11
    2228:	cf 92       	push	r12
    222a:	df 92       	push	r13
    222c:	ef 92       	push	r14
    222e:	ff 92       	push	r15
    2230:	0f 93       	push	r16
    2232:	1f 93       	push	r17
    2234:	df 93       	push	r29
    2236:	cf 93       	push	r28
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
    223c:	68 97       	sbiw	r28, 0x18	; 24
    223e:	0f b6       	in	r0, 0x3f	; 63
    2240:	f8 94       	cli
    2242:	de bf       	out	0x3e, r29	; 62
    2244:	0f be       	out	0x3f, r0	; 63
    2246:	cd bf       	out	0x3d, r28	; 61
  int8_t ukorr;		// correction of comparator voltage
  uint8_t nr_pol1;	// number of successfull inductance measurement with polarity 1
  uint8_t nr_pol2;	// number of successfull inductance measurement with polarity 2


  inductor_lpre = 0;	// H units, mark inductor as 0
    2248:	10 92 0b 01 	sts	0x010B, r1
  if(PartFound != PART_RESISTOR) {
    224c:	80 91 07 01 	lds	r24, 0x0107
    2250:	81 30       	cpi	r24, 0x01	; 1
    2252:	09 f0       	breq	.+2      	; 0x2256 <ReadInductance+0x42>
    2254:	59 c2       	rjmp	.+1202   	; 0x2708 <ReadInductance+0x4f4>
     return;	//We have found no resistor  
  }
  if (ResistorsFound != 1) {
    2256:	80 91 68 01 	lds	r24, 0x0168
    225a:	81 30       	cpi	r24, 0x01	; 1
    225c:	09 f0       	breq	.+2      	; 0x2260 <ReadInductance+0x4c>
    225e:	54 c2       	rjmp	.+1192   	; 0x2708 <ReadInductance+0x4f4>
     return;	// do not search for inductance, more than 1 resistor
  }
     if (resis[0].rx > 21000) return;
    2260:	80 91 19 01 	lds	r24, 0x0119
    2264:	90 91 1a 01 	lds	r25, 0x011A
    2268:	a0 91 1b 01 	lds	r26, 0x011B
    226c:	b0 91 1c 01 	lds	r27, 0x011C
    2270:	89 30       	cpi	r24, 0x09	; 9
    2272:	22 e5       	ldi	r18, 0x52	; 82
    2274:	92 07       	cpc	r25, r18
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	a2 07       	cpc	r26, r18
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	b2 07       	cpc	r27, r18
    227e:	08 f0       	brcs	.+2      	; 0x2282 <ReadInductance+0x6e>
    2280:	43 c2       	rjmp	.+1158   	; 0x2708 <ReadInductance+0x4f4>
    2282:	99 24       	eor	r9, r9
    2284:	80 91 1d 01 	lds	r24, 0x011D
    2288:	40 90 1e 01 	lds	r4, 0x011E

     // we can check for Inductance, if resistance is below 2100 Ohm
     for (count=0;count<4;count++) {
        // Try four times (different direction and with delayed counter start)
        if (count < 2) {
    228c:	99 2d       	mov	r25, r9
    228e:	92 30       	cpi	r25, 0x02	; 2
    2290:	10 f4       	brcc	.+4      	; 0x2296 <ReadInductance+0x82>
           // first and second pass, direction 1
           LowPin = resis[0].ra;
    2292:	88 2e       	mov	r8, r24
    2294:	02 c0       	rjmp	.+4      	; 0x229a <ReadInductance+0x86>
           HighPin = resis[0].rb;
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[0].rb;
    2296:	84 2c       	mov	r8, r4
           HighPin = resis[0].ra;
    2298:	48 2e       	mov	r4, r24
        }
        HiADC = pgm_read_byte(&PinADCtab[HighPin]);
    229a:	e4 2d       	mov	r30, r4
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	e3 51       	subi	r30, 0x13	; 19
    22a0:	ff 4f       	sbci	r31, 0xFF	; 255
    22a2:	24 91       	lpm	r18, Z+
        LoPinR_L = pgm_read_byte(&PinRLtab[LowPin]);	//R_L mask for HighPin R_L load
    22a4:	e8 2d       	mov	r30, r8
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	e6 51       	subi	r30, 0x16	; 22
    22aa:	ff 4f       	sbci	r31, 0xFF	; 255
    22ac:	e4 91       	lpm	r30, Z+
        //==================================================================================
        // Measurement of Inductance values
        R_PORT = 0;		// switch R port to GND
    22ae:	15 b8       	out	0x05, r1	; 5
        ADC_PORT =   TXD_VAL;		// switch ADC-Port to GND
    22b0:	a8 e0       	ldi	r26, 0x08	; 8
    22b2:	a8 b9       	out	0x08, r26	; 8
        if ((resis[0].rx < 240) && ((count & 0x01) == 0)) {
    22b4:	80 91 19 01 	lds	r24, 0x0119
    22b8:	90 91 1a 01 	lds	r25, 0x011A
    22bc:	a0 91 1b 01 	lds	r26, 0x011B
    22c0:	b0 91 1c 01 	lds	r27, 0x011C
    22c4:	80 3f       	cpi	r24, 0xF0	; 240
    22c6:	91 05       	cpc	r25, r1
    22c8:	a1 05       	cpc	r26, r1
    22ca:	b1 05       	cpc	r27, r1
    22cc:	b8 f4       	brcc	.+46     	; 0x22fc <ReadInductance+0xe8>
    22ce:	90 fc       	sbrc	r9, 0
    22d0:	15 c0       	rjmp	.+42     	; 0x22fc <ReadInductance+0xe8>
           // we can use PinR_L for measurement
           mess_r = RR680MI - R_L_VAL;			// use only pin output resistance
    22d2:	a0 90 03 01 	lds	r10, 0x0103
    22d6:	b0 90 04 01 	lds	r11, 0x0104
    22da:	80 e7       	ldi	r24, 0x70	; 112
    22dc:	95 ee       	ldi	r25, 0xE5	; 229
    22de:	a8 0e       	add	r10, r24
    22e0:	b9 1e       	adc	r11, r25
           ADC_DDR = HiADC | (1<<LowPin) | TXD_MSK;	// switch HiADC and Low Pin to GND, 
    22e2:	32 2f       	mov	r19, r18
    22e4:	38 60       	ori	r19, 0x08	; 8
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	08 2c       	mov	r0, r8
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <ReadInductance+0xde>
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	0a 94       	dec	r0
    22f4:	e2 f7       	brpl	.-8      	; 0x22ee <ReadInductance+0xda>
    22f6:	38 2b       	or	r19, r24
    22f8:	37 b9       	out	0x07, r19	; 7
    22fa:	08 c0       	rjmp	.+16     	; 0x230c <ReadInductance+0xf8>
        } else {
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
    22fc:	e4 b9       	out	0x04, r30	; 4
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
    22fe:	82 2f       	mov	r24, r18
    2300:	88 60       	ori	r24, 0x08	; 8
    2302:	87 b9       	out	0x07, r24	; 7
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
    2304:	a0 90 03 01 	lds	r10, 0x0103
    2308:	b0 90 04 01 	lds	r11, 0x0104
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    230c:	30 e0       	ldi	r19, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    230e:	88 2d       	mov	r24, r8
    2310:	28 8f       	std	Y+24, r18	; 0x18
    2312:	3f 8b       	std	Y+23, r19	; 0x17
    2314:	0e 94 a3 13 	call	0x2746	; 0x2746 <W10msReadADC>
    2318:	6c 01       	movw	r12, r24
            total_r =  ReadADC(HighPin);
    231a:	84 2d       	mov	r24, r4
    231c:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
    2320:	ac 01       	movw	r20, r24
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    2322:	28 8d       	ldd	r18, Y+24	; 0x18
    2324:	3f 89       	ldd	r19, Y+23	; 0x17
    2326:	92 e0       	ldi	r25, 0x02	; 2
    2328:	c9 16       	cp	r12, r25
    232a:	d1 04       	cpc	r13, r1
    232c:	18 f4       	brcc	.+6      	; 0x2334 <ReadInductance+0x120>
    232e:	42 30       	cpi	r20, 0x02	; 2
    2330:	51 05       	cpc	r21, r1
    2332:	18 f0       	brcs	.+6      	; 0x233a <ReadInductance+0x126>
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    2334:	3f 5f       	subi	r19, 0xFF	; 255
    2336:	34 31       	cpi	r19, 0x14	; 20
    2338:	51 f7       	brne	.-44     	; 0x230e <ReadInductance+0xfa>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
        // setup Analog Comparator
        ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    233a:	a0 e4       	ldi	r26, 0x40	; 64
    233c:	a0 93 7b 00 	sts	0x007B, r26
        ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    2340:	b4 e5       	ldi	r27, 0x54	; 84
    2342:	b0 bf       	out	0x30, r27	; 48
        ADMUX = (1<<REFS0) | LowPin;			// switch Mux to Low-Pin
    2344:	88 2d       	mov	r24, r8
    2346:	80 64       	ori	r24, 0x40	; 64
    2348:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    234c:	86 e1       	ldi	r24, 0x16	; 22
    234e:	80 93 7a 00 	sts	0x007A, r24
   
      // setup Counter1
        timeconstant.w[1] = 0;		// set ov counter to 0
    2352:	00 e0       	ldi	r16, 0x00	; 0
    2354:	10 e0       	ldi	r17, 0x00	; 0
        TCCR1A = 0;			// set Counter1 to normal Mode
    2356:	10 92 80 00 	sts	0x0080, r1
        TCNT1 = 0;			//set Counter to 0
    235a:	10 92 85 00 	sts	0x0085, r1
    235e:	10 92 84 00 	sts	0x0084, r1
        TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// reset TIFR or TIFR1
    2362:	97 e2       	ldi	r25, 0x27	; 39
    2364:	96 bb       	out	0x16, r25	; 22
        HiADC |= TXD_VAL;
    2366:	28 60       	ori	r18, 0x08	; 8
        wait200us();			// wait for bandgap to start up
    2368:	28 8f       	std	Y+24, r18	; 0x18
    236a:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <wait200us>
        if ((count & 0x01) == 0 ) {
    236e:	29 2c       	mov	r2, r9
    2370:	33 24       	eor	r3, r3
    2372:	d1 01       	movw	r26, r2
    2374:	a1 70       	andi	r26, 0x01	; 1
    2376:	b0 70       	andi	r27, 0x00	; 0
    2378:	ba 8b       	std	Y+18, r27	; 0x12
    237a:	a9 8b       	std	Y+17, r26	; 0x11
    237c:	28 8d       	ldd	r18, Y+24	; 0x18
    237e:	90 fc       	sbrc	r9, 0
    2380:	05 c0       	rjmp	.+10     	; 0x238c <ReadInductance+0x178>
           //first start counter, then start current
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    2382:	b1 e8       	ldi	r27, 0x81	; 129
    2384:	b0 93 81 00 	sts	0x0081, r27
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    2388:	28 b9       	out	0x08, r18	; 8
    238a:	08 c0       	rjmp	.+16     	; 0x239c <ReadInductance+0x188>
        } else {
           //first start current, then start counter with delay
           //parasitic capacity of coil can cause high current at the beginning
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    238c:	28 b9       	out	0x08, r18	; 8
      #if F_CPU >= 8000000UL
           wait3us();		// ignore current peak from capacity
    238e:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <wait3us>
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
    2392:	20 e2       	ldi	r18, 0x20	; 32
    2394:	26 bb       	out	0x16, r18	; 22
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    2396:	81 e8       	ldi	r24, 0x81	; 129
    2398:	80 93 81 00 	sts	0x0081, r24
    239c:	c8 01       	movw	r24, r16
        }
      
      //******************************
        while(1) {
           // Wait, until  Input Capture is set
           ii = TI1_INT_FLAGS;		//read Timer flags
    239e:	46 b3       	in	r20, 0x16	; 22
           if (ii & (1<<ICF1))  {
    23a0:	45 ff       	sbrs	r20, 5
    23a2:	02 c0       	rjmp	.+4      	; 0x23a8 <ReadInductance+0x194>
    23a4:	8c 01       	movw	r16, r24
    23a6:	0b c0       	rjmp	.+22     	; 0x23be <ReadInductance+0x1aa>
              break;
           }
           if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    23a8:	40 ff       	sbrs	r20, 0
    23aa:	f9 cf       	rjmp	.-14     	; 0x239e <ReadInductance+0x18a>
              TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    23ac:	a1 e0       	ldi	r26, 0x01	; 1
    23ae:	a6 bb       	out	0x16, r26	; 22
              wdt_reset();
    23b0:	a8 95       	wdr
    23b2:	01 96       	adiw	r24, 0x01	; 1
              timeconstant.w[1]++;		// count one OV
              if(timeconstant.w[1] == (F_CPU/100000UL)) {
    23b4:	80 35       	cpi	r24, 0x50	; 80
    23b6:	91 05       	cpc	r25, r1
    23b8:	91 f7       	brne	.-28     	; 0x239e <ReadInductance+0x18a>
    23ba:	00 e5       	ldi	r16, 0x50	; 80
    23bc:	10 e0       	ldi	r17, 0x00	; 0
                 break; 	//Timeout for Charging, above 0.13 s
              }
           }
        }
        TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    23be:	10 92 81 00 	sts	0x0081, r1
        TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    23c2:	b0 e2       	ldi	r27, 0x20	; 32
    23c4:	b6 bb       	out	0x16, r27	; 22
        timeconstant.w[0] = ICR1;		// get previous Input Capture Counter flag
    23c6:	20 91 86 00 	lds	r18, 0x0086
    23ca:	30 91 87 00 	lds	r19, 0x0087
    23ce:	79 01       	movw	r14, r18
      // check actual counter, if an additional overflow must be added
        if((TCNT1 > timeconstant.w[0]) && (ii & (1<<TOV1))) {
    23d0:	80 91 84 00 	lds	r24, 0x0084
    23d4:	90 91 85 00 	lds	r25, 0x0085
    23d8:	28 17       	cp	r18, r24
    23da:	39 07       	cpc	r19, r25
    23dc:	30 f4       	brcc	.+12     	; 0x23ea <ReadInductance+0x1d6>
    23de:	40 ff       	sbrs	r20, 0
    23e0:	04 c0       	rjmp	.+8      	; 0x23ea <ReadInductance+0x1d6>
           // this OV was not counted, but was before the Input Capture
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    23e2:	21 e0       	ldi	r18, 0x01	; 1
    23e4:	26 bb       	out	0x16, r18	; 22
           timeconstant.w[1]++;			// count one additional OV
    23e6:	0f 5f       	subi	r16, 0xFF	; 255
    23e8:	1f 4f       	sbci	r17, 0xFF	; 255
        }

        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    23ea:	88 e0       	ldi	r24, 0x08	; 8
    23ec:	88 b9       	out	0x08, r24	; 8
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    23ee:	96 e9       	ldi	r25, 0x96	; 150
    23f0:	90 93 7a 00 	sts	0x007A, r25
        for (ii=0;ii<20;ii++) {
    23f4:	20 e0       	ldi	r18, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    23f6:	88 2d       	mov	r24, r8
    23f8:	28 8f       	std	Y+24, r18	; 0x18
    23fa:	0e 94 a3 13 	call	0x2746	; 0x2746 <W10msReadADC>
    23fe:	6c 01       	movw	r12, r24
            total_r =  ReadADC(HighPin);
    2400:	84 2d       	mov	r24, r4
    2402:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    2406:	28 8d       	ldd	r18, Y+24	; 0x18
    2408:	a2 e0       	ldi	r26, 0x02	; 2
    240a:	ca 16       	cp	r12, r26
    240c:	d1 04       	cpc	r13, r1
    240e:	18 f4       	brcc	.+6      	; 0x2416 <ReadInductance+0x202>
    2410:	82 30       	cpi	r24, 0x02	; 2
    2412:	91 05       	cpc	r25, r1
    2414:	18 f0       	brcs	.+6      	; 0x241c <ReadInductance+0x208>
           timeconstant.w[1]++;			// count one additional OV
        }

        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
        for (ii=0;ii<20;ii++) {
    2416:	2f 5f       	subi	r18, 0xFF	; 255
    2418:	24 31       	cpi	r18, 0x14	; 20
    241a:	69 f7       	brne	.-38     	; 0x23f6 <ReadInductance+0x1e2>
//  #undef CNT_ZERO_42
//  #undef CNT_ZERO_720
//  #define CNT_ZERO_42 7
//  #define CNT_ZERO_720 10
//#endif
        total_r = (mess_r + resis[0].rx + RRpinMI);
    241c:	c0 90 19 01 	lds	r12, 0x0119
    2420:	d0 90 1a 01 	lds	r13, 0x011A
    2424:	80 91 3d 01 	lds	r24, 0x013D
    2428:	90 91 3e 01 	lds	r25, 0x013E
    242c:	c8 0e       	add	r12, r24
    242e:	d9 1e       	adc	r13, r25
    2430:	ca 0c       	add	r12, r10
    2432:	db 1c       	adc	r13, r11
//        if (total_r > 7000) cnt_diff = 1;
//        if (total_r > 14000) cnt_diff = 2;
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
        // Voltage of comparator in % of umax
     #ifdef AUTO_CAL
        tmpint = (ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset))) ;
    2434:	8f e9       	ldi	r24, 0x9F	; 159
    2436:	91 e0       	ldi	r25, 0x01	; 1
    2438:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <__eerd_word_m168>
    243c:	20 91 39 01 	lds	r18, 0x0139
    2440:	30 91 3a 01 	lds	r19, 0x013A
    2444:	28 0f       	add	r18, r24
    2446:	39 1f       	adc	r19, r25
     #else
        tmpint = (ref_mv + REF_C_KORR);
     #endif
        if (mess_r < R_L_VAL) {
    2448:	b0 e9       	ldi	r27, 0x90	; 144
    244a:	ab 16       	cp	r10, r27
    244c:	ba e1       	ldi	r27, 0x1A	; 26
    244e:	bb 06       	cpc	r11, r27
    2450:	b8 f4       	brcc	.+46     	; 0x2480 <ReadInductance+0x26c>
           // measurement without 680 Ohm
           cnt_diff = CNT_ZERO_42;
           if (timeconstant.dw < 225) {
    2452:	81 ee       	ldi	r24, 0xE1	; 225
    2454:	e8 16       	cp	r14, r24
    2456:	f1 04       	cpc	r15, r1
    2458:	01 05       	cpc	r16, r1
    245a:	11 05       	cpc	r17, r1
    245c:	38 f4       	brcc	.+14     	; 0x246c <ReadInductance+0x258>
              ukorr = (timeconstant.w[0] / 5) - 20;
    245e:	c7 01       	movw	r24, r14
    2460:	65 e0       	ldi	r22, 0x05	; 5
    2462:	70 e0       	ldi	r23, 0x00	; 0
    2464:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__udivmodhi4>
    2468:	64 51       	subi	r22, 0x14	; 20
    246a:	01 c0       	rjmp	.+2      	; 0x246e <ReadInductance+0x25a>
           } else {
              ukorr = 25;
    246c:	69 e1       	ldi	r22, 0x19	; 25
           }
           tmpint -= (((REF_L_KORR * 10) / 10) + ukorr);
    246e:	28 52       	subi	r18, 0x28	; 40
    2470:	30 40       	sbci	r19, 0x00	; 0
    2472:	77 27       	eor	r23, r23
    2474:	67 fd       	sbrc	r22, 7
    2476:	70 95       	com	r23
    2478:	26 1b       	sub	r18, r22
    247a:	37 0b       	sbc	r19, r23
     #else
        tmpint = (ref_mv + REF_C_KORR);
     #endif
        if (mess_r < R_L_VAL) {
           // measurement without 680 Ohm
           cnt_diff = CNT_ZERO_42;
    247c:	66 e0       	ldi	r22, 0x06	; 6
    247e:	08 c0       	rjmp	.+16     	; 0x2490 <ReadInductance+0x27c>
//#endif
        total_r = (mess_r + resis[0].rx + RRpinMI);
//        cnt_diff = 0;
//        if (total_r > 7000) cnt_diff = 1;
//        if (total_r > 14000) cnt_diff = 2;
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
    2480:	c6 01       	movw	r24, r12
    2482:	60 eb       	ldi	r22, 0xB0	; 176
    2484:	76 e3       	ldi	r23, 0x36	; 54
    2486:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__udivmodhi4>
           }
           tmpint -= (((REF_L_KORR * 10) / 10) + ukorr);
        } else {
           // measurement with 680 Ohm resistor
           // if 680 Ohm resistor is used, use REF_L_KORR for correction
           cnt_diff += CNT_ZERO_720;
    248a:	69 5f       	subi	r22, 0xF9	; 249
           tmpint += REF_L_KORR;
    248c:	28 5d       	subi	r18, 0xD8	; 216
    248e:	3f 4f       	sbci	r19, 0xFF	; 255
        }
        if (timeconstant.dw > cnt_diff) timeconstant.dw -= cnt_diff;
    2490:	70 e0       	ldi	r23, 0x00	; 0
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	6e 15       	cp	r22, r14
    2498:	7f 05       	cpc	r23, r15
    249a:	80 07       	cpc	r24, r16
    249c:	91 07       	cpc	r25, r17
    249e:	28 f4       	brcc	.+10     	; 0x24aa <ReadInductance+0x296>
    24a0:	e6 1a       	sub	r14, r22
    24a2:	f7 0a       	sbc	r15, r23
    24a4:	08 0b       	sbc	r16, r24
    24a6:	19 0b       	sbc	r17, r25
    24a8:	03 c0       	rjmp	.+6      	; 0x24b0 <ReadInductance+0x29c>
        else          timeconstant.dw = 0;
    24aa:	ee 24       	eor	r14, r14
    24ac:	ff 24       	eor	r15, r15
    24ae:	87 01       	movw	r16, r14
       
        if ((count&0x01) == 1) {
    24b0:	a9 89       	ldd	r26, Y+17	; 0x11
    24b2:	ba 89       	ldd	r27, Y+18	; 0x12
    24b4:	10 97       	sbiw	r26, 0x00	; 0
    24b6:	41 f0       	breq	.+16     	; 0x24c8 <ReadInductance+0x2b4>
           // second pass with delayed counter start
           timeconstant.dw += (3 * (F_CPU/1000000UL))+10;
    24b8:	82 e2       	ldi	r24, 0x22	; 34
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	a0 e0       	ldi	r26, 0x00	; 0
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	e8 0e       	add	r14, r24
    24c2:	f9 1e       	adc	r15, r25
    24c4:	0a 1f       	adc	r16, r26
    24c6:	1b 1f       	adc	r17, r27
        }
        if (timeconstant.w[1] >= (F_CPU/100000UL)) timeconstant.dw = 0; // no transition found
    24c8:	00 35       	cpi	r16, 0x50	; 80
    24ca:	11 05       	cpc	r17, r1
    24cc:	18 f0       	brcs	.+6      	; 0x24d4 <ReadInductance+0x2c0>
    24ce:	ee 24       	eor	r14, r14
    24d0:	ff 24       	eor	r15, r15
    24d2:	87 01       	movw	r16, r14
        if (timeconstant.dw > 10) {
    24d4:	9b e0       	ldi	r25, 0x0B	; 11
    24d6:	e9 16       	cp	r14, r25
    24d8:	f1 04       	cpc	r15, r1
    24da:	01 05       	cpc	r16, r1
    24dc:	11 05       	cpc	r17, r1
    24de:	28 f0       	brcs	.+10     	; 0x24ea <ReadInductance+0x2d6>
           timeconstant.dw -= 1;
    24e0:	08 94       	sec
    24e2:	e1 08       	sbc	r14, r1
    24e4:	f1 08       	sbc	r15, r1
    24e6:	01 09       	sbc	r16, r1
    24e8:	11 09       	sbc	r17, r1
        }
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    24ea:	c6 01       	movw	r24, r12
    24ec:	a0 e0       	ldi	r26, 0x00	; 0
    24ee:	b0 e0       	ldi	r27, 0x00	; 0
    24f0:	8b 8b       	std	Y+19, r24	; 0x13
    24f2:	9c 8b       	std	Y+20, r25	; 0x14
    24f4:	ad 8b       	std	Y+21, r26	; 0x15
    24f6:	be 8b       	std	Y+22, r27	; 0x16
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    24f8:	b9 01       	movw	r22, r18
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	28 ee       	ldi	r18, 0xE8	; 232
    2500:	33 e0       	ldi	r19, 0x03	; 3
    2502:	40 e0       	ldi	r20, 0x00	; 0
    2504:	50 e0       	ldi	r21, 0x00	; 0
    2506:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
    250a:	2b 01       	movw	r4, r22
    250c:	3c 01       	movw	r6, r24
        if (timeconstant.w[1] >= (F_CPU/100000UL)) timeconstant.dw = 0; // no transition found
        if (timeconstant.dw > 10) {
           timeconstant.dw -= 1;
        }
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    250e:	b5 01       	movw	r22, r10
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	20 91 35 01 	lds	r18, 0x0135
    2518:	30 91 36 01 	lds	r19, 0x0136
    251c:	40 e0       	ldi	r20, 0x00	; 0
    251e:	50 e0       	ldi	r21, 0x00	; 0
    2520:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
    2524:	2b 89       	ldd	r18, Y+19	; 0x13
    2526:	3c 89       	ldd	r19, Y+20	; 0x14
    2528:	4d 89       	ldd	r20, Y+21	; 0x15
    252a:	5e 89       	ldd	r21, Y+22	; 0x16
    252c:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    2530:	40 e0       	ldi	r20, 0x00	; 0
    2532:	50 e0       	ldi	r21, 0x00	; 0
    2534:	c3 01       	movw	r24, r6
    2536:	b2 01       	movw	r22, r4
    2538:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
//        per_ref2 = (uint8_t)MEM2_read_byte(&LogTab[per_ref1]);	// -log(1 - per_ref1/100)
        per_ref2 = get_log(per_ref1);		// -log(1 - per_ref1/1000)
    253c:	c9 01       	movw	r24, r18
    253e:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <get_log>
    2542:	6c 01       	movw	r12, r24
          }
#endif
/* ********************************************************* */
        // inductor_lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    2544:	6b 89       	ldd	r22, Y+19	; 0x13
    2546:	7c 89       	ldd	r23, Y+20	; 0x14
    2548:	8d 89       	ldd	r24, Y+21	; 0x15
    254a:	9e 89       	ldd	r25, Y+22	; 0x16
    254c:	a8 01       	movw	r20, r16
    254e:	97 01       	movw	r18, r14
    2550:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
    2554:	2b 01       	movw	r4, r22
    2556:	3c 01       	movw	r6, r24
             wait_about2s();
          }
#endif
/* ********************************************************* */
        // inductor_lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
    2558:	b6 01       	movw	r22, r12
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	e3 e0       	ldi	r30, 0x03	; 3
    2560:	66 0f       	add	r22, r22
    2562:	77 1f       	adc	r23, r23
    2564:	88 1f       	adc	r24, r24
    2566:	99 1f       	adc	r25, r25
    2568:	ea 95       	dec	r30
    256a:	d1 f7       	brne	.-12     	; 0x2560 <ReadInductance+0x34c>
    256c:	6b 5f       	subi	r22, 0xFB	; 251
    256e:	7f 4f       	sbci	r23, 0xFF	; 255
    2570:	8f 4f       	sbci	r24, 0xFF	; 255
    2572:	9f 4f       	sbci	r25, 0xFF	; 255
    2574:	2a e0       	ldi	r18, 0x0A	; 10
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	40 e0       	ldi	r20, 0x00	; 0
    257a:	50 e0       	ldi	r21, 0x00	; 0
    257c:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    2580:	40 e0       	ldi	r20, 0x00	; 0
    2582:	50 e0       	ldi	r21, 0x00	; 0
    2584:	c3 01       	movw	r24, r6
    2586:	b2 01       	movw	r22, r4
    2588:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    258c:	f1 01       	movw	r30, r2
    258e:	ee 0f       	add	r30, r30
    2590:	ff 1f       	adc	r31, r31
    2592:	ee 0f       	add	r30, r30
    2594:	ff 1f       	adc	r31, r31
    2596:	a1 e0       	ldi	r26, 0x01	; 1
    2598:	b0 e0       	ldi	r27, 0x00	; 0
    259a:	ac 0f       	add	r26, r28
    259c:	bd 1f       	adc	r27, r29
    259e:	ea 0f       	add	r30, r26
    25a0:	fb 1f       	adc	r31, r27
    25a2:	20 83       	st	Z, r18
    25a4:	31 83       	std	Z+1, r19	; 0x01
    25a6:	42 83       	std	Z+2, r20	; 0x02
    25a8:	53 83       	std	Z+3, r21	; 0x03
        if (((count&0x01) == 0) && (timeconstant.dw > ((F_CPU/1000000UL)+3))) {
    25aa:	89 89       	ldd	r24, Y+17	; 0x11
    25ac:	9a 89       	ldd	r25, Y+18	; 0x12
    25ae:	00 97       	sbiw	r24, 0x00	; 0
    25b0:	99 f4       	brne	.+38     	; 0x25d8 <ReadInductance+0x3c4>
    25b2:	9c e0       	ldi	r25, 0x0C	; 12
    25b4:	e9 16       	cp	r14, r25
    25b6:	f1 04       	cpc	r15, r1
    25b8:	01 05       	cpc	r16, r1
    25ba:	11 05       	cpc	r17, r1
    25bc:	68 f0       	brcs	.+26     	; 0x25d8 <ReadInductance+0x3c4>
           // transition is found, measurement with delayed counter start is not necessary
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
    25be:	f1 01       	movw	r30, r2
    25c0:	31 96       	adiw	r30, 0x01	; 1
    25c2:	ee 0f       	add	r30, r30
    25c4:	ff 1f       	adc	r31, r31
    25c6:	ee 0f       	add	r30, r30
    25c8:	ff 1f       	adc	r31, r31
    25ca:	ea 0f       	add	r30, r26
    25cc:	fb 1f       	adc	r31, r27
    25ce:	20 83       	st	Z, r18
    25d0:	31 83       	std	Z+1, r19	; 0x01
    25d2:	42 83       	std	Z+2, r20	; 0x02
    25d4:	53 83       	std	Z+3, r21	; 0x03
           count++;		// skip the delayed measurement
    25d6:	93 94       	inc	r9
        }
        wdt_reset();
    25d8:	a8 95       	wdr
     return;	// do not search for inductance, more than 1 resistor
  }
     if (resis[0].rx > 21000) return;

     // we can check for Inductance, if resistance is below 2100 Ohm
     for (count=0;count<4;count++) {
    25da:	93 94       	inc	r9
    25dc:	a9 2d       	mov	r26, r9
    25de:	a4 30       	cpi	r26, 0x04	; 4
    25e0:	08 f4       	brcc	.+2      	; 0x25e4 <ReadInductance+0x3d0>
    25e2:	50 ce       	rjmp	.-864    	; 0x2284 <ReadInductance+0x70>
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
           count++;		// skip the delayed measurement
        }
        wdt_reset();
     }  //end for count
     ADC_PORT = TXD_VAL;		// switch ADC Port to GND
    25e4:	88 e0       	ldi	r24, 0x08	; 8
    25e6:	88 b9       	out	0x08, r24	; 8
     wait_about20ms();
    25e8:	84 e0       	ldi	r24, 0x04	; 4
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
        inductor_.lx = inductance[0];
     }
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];		// other polarity, delayed start
     if (inductance[2] < inductor_lx) inductor_lx = inductance[2];	// use the other polarity
#else
     nr_pol1 = 0;
    25f0:	61 e0       	ldi	r22, 0x01	; 1
    25f2:	2d 81       	ldd	r18, Y+5	; 0x05
    25f4:	3e 81       	ldd	r19, Y+6	; 0x06
    25f6:	4f 81       	ldd	r20, Y+7	; 0x07
    25f8:	58 85       	ldd	r21, Y+8	; 0x08
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	9a 81       	ldd	r25, Y+2	; 0x02
    25fe:	ab 81       	ldd	r26, Y+3	; 0x03
    2600:	bc 81       	ldd	r27, Y+4	; 0x04
    2602:	82 17       	cp	r24, r18
    2604:	93 07       	cpc	r25, r19
    2606:	a4 07       	cpc	r26, r20
    2608:	b5 07       	cpc	r27, r21
    260a:	08 f0       	brcs	.+2      	; 0x260e <ReadInductance+0x3fa>
    260c:	60 e0       	ldi	r22, 0x00	; 0
     if (inductance[1] > inductance[0]) { nr_pol1 = 1; } 
     nr_pol2 = 2;
     if (inductance[3] > inductance[2]) { nr_pol2 = 3; } 
    260e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2610:	3e 85       	ldd	r19, Y+14	; 0x0e
    2612:	4f 85       	ldd	r20, Y+15	; 0x0f
    2614:	58 89       	ldd	r21, Y+16	; 0x10
    2616:	89 85       	ldd	r24, Y+9	; 0x09
    2618:	9a 85       	ldd	r25, Y+10	; 0x0a
    261a:	ab 85       	ldd	r26, Y+11	; 0x0b
    261c:	bc 85       	ldd	r27, Y+12	; 0x0c
    261e:	82 17       	cp	r24, r18
    2620:	93 07       	cpc	r25, r19
    2622:	a4 07       	cpc	r26, r20
    2624:	b5 07       	cpc	r27, r21
    2626:	10 f0       	brcs	.+4      	; 0x262c <ReadInductance+0x418>
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];		// other polarity, delayed start
     if (inductance[2] < inductor_lx) inductor_lx = inductance[2];	// use the other polarity
#else
     nr_pol1 = 0;
     if (inductance[1] > inductance[0]) { nr_pol1 = 1; } 
     nr_pol2 = 2;
    2628:	72 e0       	ldi	r23, 0x02	; 2
    262a:	01 c0       	rjmp	.+2      	; 0x262e <ReadInductance+0x41a>
     if (inductance[3] > inductance[2]) { nr_pol2 = 3; } 
    262c:	73 e0       	ldi	r23, 0x03	; 3
     if (inductance[nr_pol2] < inductance[nr_pol1]) nr_pol1 = nr_pol2;
    262e:	a7 2f       	mov	r26, r23
    2630:	b0 e0       	ldi	r27, 0x00	; 0
    2632:	aa 0f       	add	r26, r26
    2634:	bb 1f       	adc	r27, r27
    2636:	aa 0f       	add	r26, r26
    2638:	bb 1f       	adc	r27, r27
    263a:	ce 01       	movw	r24, r28
    263c:	01 96       	adiw	r24, 0x01	; 1
    263e:	a8 0f       	add	r26, r24
    2640:	b9 1f       	adc	r27, r25
    2642:	e6 2f       	mov	r30, r22
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	ee 0f       	add	r30, r30
    2648:	ff 1f       	adc	r31, r31
    264a:	ee 0f       	add	r30, r30
    264c:	ff 1f       	adc	r31, r31
    264e:	e8 0f       	add	r30, r24
    2650:	f9 1f       	adc	r31, r25
    2652:	2d 91       	ld	r18, X+
    2654:	3d 91       	ld	r19, X+
    2656:	4d 91       	ld	r20, X+
    2658:	5c 91       	ld	r21, X
    265a:	80 81       	ld	r24, Z
    265c:	91 81       	ldd	r25, Z+1	; 0x01
    265e:	a2 81       	ldd	r26, Z+2	; 0x02
    2660:	b3 81       	ldd	r27, Z+3	; 0x03
    2662:	28 17       	cp	r18, r24
    2664:	39 07       	cpc	r19, r25
    2666:	4a 07       	cpc	r20, r26
    2668:	5b 07       	cpc	r21, r27
    266a:	08 f4       	brcc	.+2      	; 0x266e <ReadInductance+0x45a>
    266c:	67 2f       	mov	r22, r23
     inductor_lx = inductance[nr_pol1];
    266e:	26 2f       	mov	r18, r22
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	f9 01       	movw	r30, r18
    2674:	ee 0f       	add	r30, r30
    2676:	ff 1f       	adc	r31, r31
    2678:	ee 0f       	add	r30, r30
    267a:	ff 1f       	adc	r31, r31
    267c:	ec 0f       	add	r30, r28
    267e:	fd 1f       	adc	r31, r29
    2680:	61 81       	ldd	r22, Z+1	; 0x01
    2682:	72 81       	ldd	r23, Z+2	; 0x02
    2684:	83 81       	ldd	r24, Z+3	; 0x03
    2686:	94 81       	ldd	r25, Z+4	; 0x04
    2688:	60 93 98 01 	sts	0x0198, r22
    268c:	70 93 99 01 	sts	0x0199, r23
    2690:	80 93 9a 01 	sts	0x019A, r24
    2694:	90 93 9b 01 	sts	0x019B, r25
     inductor_lpre = -5;	// 10 uH units
    2698:	4b ef       	ldi	r20, 0xFB	; 251
    269a:	40 93 0b 01 	sts	0x010B, r20
     if (((nr_pol1 & 1) == 1) || (resis[0].rx >= 240)) {
    269e:	20 fd       	sbrc	r18, 0
    26a0:	0d c0       	rjmp	.+26     	; 0x26bc <ReadInductance+0x4a8>
    26a2:	20 91 19 01 	lds	r18, 0x0119
    26a6:	30 91 1a 01 	lds	r19, 0x011A
    26aa:	40 91 1b 01 	lds	r20, 0x011B
    26ae:	50 91 1c 01 	lds	r21, 0x011C
    26b2:	20 3f       	cpi	r18, 0xF0	; 240
    26b4:	31 05       	cpc	r19, r1
    26b6:	41 05       	cpc	r20, r1
    26b8:	51 05       	cpc	r21, r1
    26ba:	a8 f0       	brcs	.+42     	; 0x26e6 <ReadInductance+0x4d2>
        // with 680 Ohm resistor total_r is more than 7460
        inductor_lpre = -4;	// 100 uH units
    26bc:	2c ef       	ldi	r18, 0xFC	; 252
    26be:	20 93 0b 01 	sts	0x010B, r18
        inductor_lx = (inductor_lx + 5) / 10;
    26c2:	6b 5f       	subi	r22, 0xFB	; 251
    26c4:	7f 4f       	sbci	r23, 0xFF	; 255
    26c6:	8f 4f       	sbci	r24, 0xFF	; 255
    26c8:	9f 4f       	sbci	r25, 0xFF	; 255
    26ca:	2a e0       	ldi	r18, 0x0A	; 10
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	40 e0       	ldi	r20, 0x00	; 0
    26d0:	50 e0       	ldi	r21, 0x00	; 0
    26d2:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    26d6:	20 93 98 01 	sts	0x0198, r18
    26da:	30 93 99 01 	sts	0x0199, r19
    26de:	40 93 9a 01 	sts	0x019A, r20
    26e2:	50 93 9b 01 	sts	0x019B, r21
     } 
     if (inductor_lx == 0) inductor_lpre = 0;	//mark as zero
    26e6:	80 91 98 01 	lds	r24, 0x0198
    26ea:	90 91 99 01 	lds	r25, 0x0199
    26ee:	a0 91 9a 01 	lds	r26, 0x019A
    26f2:	b0 91 9b 01 	lds	r27, 0x019B
    26f6:	00 97       	sbiw	r24, 0x00	; 0
    26f8:	a1 05       	cpc	r26, r1
    26fa:	b1 05       	cpc	r27, r1
    26fc:	11 f4       	brne	.+4      	; 0x2702 <ReadInductance+0x4ee>
    26fe:	10 92 0b 01 	sts	0x010B, r1
#endif

  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    2702:	88 e0       	ldi	r24, 0x08	; 8
    2704:	87 b9       	out	0x07, r24	; 7
  R_DDR = 0;			// switch all resistor ports to input
    2706:	14 b8       	out	0x04, r1	; 4
#endif
  return;
 } // end ReadInductance()
    2708:	68 96       	adiw	r28, 0x18	; 24
    270a:	0f b6       	in	r0, 0x3f	; 63
    270c:	f8 94       	cli
    270e:	de bf       	out	0x3e, r29	; 62
    2710:	0f be       	out	0x3f, r0	; 63
    2712:	cd bf       	out	0x3d, r28	; 61
    2714:	cf 91       	pop	r28
    2716:	df 91       	pop	r29
    2718:	1f 91       	pop	r17
    271a:	0f 91       	pop	r16
    271c:	ff 90       	pop	r15
    271e:	ef 90       	pop	r14
    2720:	df 90       	pop	r13
    2722:	cf 90       	pop	r12
    2724:	bf 90       	pop	r11
    2726:	af 90       	pop	r10
    2728:	9f 90       	pop	r9
    272a:	8f 90       	pop	r8
    272c:	7f 90       	pop	r7
    272e:	6f 90       	pop	r6
    2730:	5f 90       	pop	r5
    2732:	4f 90       	pop	r4
    2734:	3f 90       	pop	r3
    2736:	2f 90       	pop	r2
    2738:	08 95       	ret

0000273a <W20msReadADC>:
    273a:	8f 93       	push	r24
    273c:	84 e0       	ldi	r24, 0x04	; 4
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
    2744:	0b c0       	rjmp	.+22     	; 0x275c <to_read>

00002746 <W10msReadADC>:
    2746:	8f 93       	push	r24
    2748:	82 e0       	ldi	r24, 0x02	; 2
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
    2750:	05 c0       	rjmp	.+10     	; 0x275c <to_read>

00002752 <W5msReadADC>:
    2752:	8f 93       	push	r24
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>

0000275c <to_read>:
    275c:	8f 91       	pop	r24

0000275e <ReadADC>:
    275e:	1f 93       	push	r17
    2760:	18 2f       	mov	r17, r24
    2762:	10 64       	ori	r17, 0x40	; 64

00002764 <get_sample>:
    2764:	10 93 7c 00 	sts	0x007C, r17
    2768:	e1 2f       	mov	r30, r17
    276a:	e0 78       	andi	r30, 0x80	; 128
    276c:	80 91 32 01 	lds	r24, 0x0132
    2770:	e8 17       	cp	r30, r24
    2772:	61 f0       	breq	.+24     	; 0x278c <r2aa2>
    2774:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <wait100us>
    2778:	8e e9       	ldi	r24, 0x9E	; 158
    277a:	80 93 7a 00 	sts	0x007A, r24
    277e:	83 e0       	ldi	r24, 0x03	; 3
    2780:	83 bf       	out	0x33, r24	; 51
    2782:	88 95       	sleep
    2784:	82 e0       	ldi	r24, 0x02	; 2
    2786:	83 bf       	out	0x33, r24	; 51
    2788:	e0 93 32 01 	sts	0x0132, r30

0000278c <r2aa2>:
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	a9 01       	movw	r20, r18
    2792:	e0 e0       	ldi	r30, 0x00	; 0
    2794:	1f c0       	rjmp	.+62     	; 0x27d4 <r2ae8>

00002796 <Loop>:
    2796:	8e e9       	ldi	r24, 0x9E	; 158
    2798:	80 93 7a 00 	sts	0x007A, r24
    279c:	83 e0       	ldi	r24, 0x03	; 3
    279e:	83 bf       	out	0x33, r24	; 51
    27a0:	88 95       	sleep
    27a2:	82 e0       	ldi	r24, 0x02	; 2
    27a4:	83 bf       	out	0x33, r24	; 51
    27a6:	60 91 78 00 	lds	r22, 0x0078
    27aa:	70 91 79 00 	lds	r23, 0x0079
    27ae:	26 0f       	add	r18, r22
    27b0:	37 1f       	adc	r19, r23
    27b2:	41 1d       	adc	r20, r1
    27b4:	51 1d       	adc	r21, r1
    27b6:	e4 30       	cpi	r30, 0x04	; 4
    27b8:	61 f4       	brne	.+24     	; 0x27d2 <r2ae6>
    27ba:	80 91 34 01 	lds	r24, 0x0134
    27be:	80 30       	cpi	r24, 0x00	; 0
    27c0:	41 f0       	breq	.+16     	; 0x27d2 <r2ae6>
    27c2:	84 e0       	ldi	r24, 0x04	; 4
    27c4:	20 30       	cpi	r18, 0x00	; 0
    27c6:	38 07       	cpc	r19, r24
    27c8:	20 f4       	brcc	.+8      	; 0x27d2 <r2ae6>
    27ca:	17 fd       	sbrc	r17, 7
    27cc:	02 c0       	rjmp	.+4      	; 0x27d2 <r2ae6>
    27ce:	10 68       	ori	r17, 0x80	; 128
    27d0:	c9 cf       	rjmp	.-110    	; 0x2764 <get_sample>

000027d2 <r2ae6>:
    27d2:	ef 5f       	subi	r30, 0xFF	; 255

000027d4 <r2ae8>:
    27d4:	80 91 31 01 	lds	r24, 0x0131
    27d8:	e8 17       	cp	r30, r24
    27da:	e8 f2       	brcs	.-70     	; 0x2796 <Loop>
    27dc:	17 ff       	sbrs	r17, 7
    27de:	05 c0       	rjmp	.+10     	; 0x27ea <r2afe>
    27e0:	60 91 33 01 	lds	r22, 0x0133
    27e4:	70 91 34 01 	lds	r23, 0x0134
    27e8:	04 c0       	rjmp	.+8      	; 0x27f2 <r2b02>

000027ea <r2afe>:
    27ea:	60 91 35 01 	lds	r22, 0x0135
    27ee:	70 91 36 01 	lds	r23, 0x0136

000027f2 <r2b02>:
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
    27fa:	2f ef       	ldi	r18, 0xFF	; 255
    27fc:	33 e0       	ldi	r19, 0x03	; 3
    27fe:	40 e0       	ldi	r20, 0x00	; 0
    2800:	50 e0       	ldi	r21, 0x00	; 0
    2802:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    2806:	b9 01       	movw	r22, r18
    2808:	ca 01       	movw	r24, r20
    280a:	20 91 31 01 	lds	r18, 0x0131
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	40 e0       	ldi	r20, 0x00	; 0
    2812:	50 e0       	ldi	r21, 0x00	; 0
    2814:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    2818:	c9 01       	movw	r24, r18
    281a:	1f 91       	pop	r17
    281c:	08 95       	ret

0000281e <CheckPins>:
#include <stdlib.h>
#include "Transistortester.h"

//******************************************************************
void CheckPins(uint8_t HighPin, uint8_t LowPin, uint8_t TristatePin)
  {
    281e:	2f 92       	push	r2
    2820:	3f 92       	push	r3
    2822:	4f 92       	push	r4
    2824:	5f 92       	push	r5
    2826:	6f 92       	push	r6
    2828:	7f 92       	push	r7
    282a:	8f 92       	push	r8
    282c:	9f 92       	push	r9
    282e:	af 92       	push	r10
    2830:	bf 92       	push	r11
    2832:	cf 92       	push	r12
    2834:	df 92       	push	r13
    2836:	ef 92       	push	r14
    2838:	ff 92       	push	r15
    283a:	0f 93       	push	r16
    283c:	1f 93       	push	r17
    283e:	df 93       	push	r29
    2840:	cf 93       	push	r28
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
    2846:	61 97       	sbiw	r28, 0x11	; 17
    2848:	0f b6       	in	r0, 0x3f	; 63
    284a:	f8 94       	cli
    284c:	de bf       	out	0x3e, r29	; 62
    284e:	0f be       	out	0x3f, r0	; 63
    2850:	cd bf       	out	0x3d, r28	; 61
    2852:	18 2f       	mov	r17, r24
    2854:	06 2f       	mov	r16, r22
    2856:	49 83       	std	Y+1, r20	; 0x01
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
    2858:	a8 95       	wdr
//  #define RR680MI resis680mi
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = pgm_read_byte(&PinRLtab[LowPin]);		// instruction for LowPin R_L
    285a:	86 2f       	mov	r24, r22
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	fc 01       	movw	r30, r24
    2860:	e6 51       	subi	r30, 0x16	; 22
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	44 90       	lpm	r4, Z+
#if FLASHEND > 0x3fff
  LoPinRH = pgm_read_byte(&PinRHtab[LowPin]);		// instruction for LowPin R_H
#else
  LoPinRH = LoPinRL + LoPinRL;				// instruction for LowPin R_H
#endif
  TriPinRL = pgm_read_byte(&PinRLtab[TristatePin]);	// instruction for TristatePin R_L
    2866:	e4 2f       	mov	r30, r20
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	e6 51       	subi	r30, 0x16	; 22
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	54 90       	lpm	r5, Z+
#if FLASHEND > 0x3fff
  TriPinRH = pgm_read_byte(&PinRHtab[TristatePin]);	// instruction for TristatePin R_H
#else
  TriPinRH = TriPinRL + TriPinRL;			// instruction for TristatePin R_H
#endif
  HiPinRL = pgm_read_byte(&PinRLtab[HighPin]);		// instruction for HighPin R_L
    2870:	21 2f       	mov	r18, r17
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	f9 01       	movw	r30, r18
    2876:	e6 51       	subi	r30, 0x16	; 22
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	f4 90       	lpm	r15, Z+
  HiPinRH = pgm_read_byte(&PinRHtab[HighPin]);		// instruction for HighPin R_H
#else
  HiPinRH = HiPinRL + HiPinRL;				// instruction for HighPin R_H
#endif

  HiADCp = pgm_read_byte(&PinADCtab[HighPin]);		// instruction for ADC High-Pin 
    287c:	23 51       	subi	r18, 0x13	; 19
    287e:	3f 4f       	sbci	r19, 0xFF	; 255
    2880:	f9 01       	movw	r30, r18
    2882:	e4 90       	lpm	r14, Z+
  LoADCp = pgm_read_byte(&PinADCtab[LowPin]);		// instruction for ADC Low-Pin
    2884:	83 51       	subi	r24, 0x13	; 19
    2886:	9f 4f       	sbci	r25, 0xFF	; 255
    2888:	fc 01       	movw	r30, r24
    288a:	84 90       	lpm	r8, Z+
  HiADCm = HiADCp | TXD_MSK;
    288c:	f8 e0       	ldi	r31, 0x08	; 8
    288e:	ef 2a       	or	r14, r31
  HiADCp |= TXD_VAL;
  LoADCm = LoADCp | TXD_MSK;
    2890:	8f 2a       	or	r8, r31
  LoADCp |= TXD_VAL;

  //setting of Pins 
  R_PORT = 0;				//resistor-Port outputs to 0
    2892:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//Low-Pin to output and across R_L to GND
    2894:	44 b8       	out	0x04, r4	; 4
  ADC_DDR = HiADCm;		//High-Pin to output
    2896:	e7 b8       	out	0x07, r14	; 7
  ADC_PORT = HiADCp;		//High-Pin fix to Vcc
    2898:	e8 b8       	out	0x08, r14	; 8
  //for some MOSFET the gate (TristatePin) must be discharged
  R_DDR = LoPinRL | TriPinRL;
    289a:	35 2c       	mov	r3, r5
    289c:	34 28       	or	r3, r4
    289e:	34 b8       	out	0x04, r3	; 4
  adc.vCEs = W5msReadADC(LowPin);	// lp1 is the voltage at 680 Ohm with - Gate
    28a0:	86 2f       	mov	r24, r22
    28a2:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    28a6:	5c 01       	movw	r10, r24
  R_DDR = LoPinRL;	
    28a8:	44 b8       	out	0x04, r4	; 4
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin  , without Gate current (-)
    28aa:	80 2f       	mov	r24, r16
    28ac:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    28b0:	3c 01       	movw	r6, r24
  R_DDR = 0;
    28b2:	14 b8       	out	0x04, r1	; 4
  wait5ms();				// release all current (clear TRIAC and Thyristor)
    28b4:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <wait5ms>
  R_PORT = TriPinRL;
    28b8:	55 b8       	out	0x05, r5	; 5
  R_DDR = LoPinRL | TriPinRL;		// start current again
    28ba:	34 b8       	out	0x04, r3	; 4
  adc.lp2 = W5msReadADC(LowPin);	// lp2 is the voltage at 680 Ohm with + Gate
    28bc:	80 2f       	mov	r24, r16
    28be:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    28c2:	6c 01       	movw	r12, r24
  R_DDR = LoPinRL;
    28c4:	44 b8       	out	0x04, r4	; 4
  R_PORT = 0;
    28c6:	15 b8       	out	0x05, r1	; 5
  if (adc.lp2 < adc.vCEs) {
    28c8:	8a 15       	cp	r24, r10
    28ca:	9b 05       	cpc	r25, r11
    28cc:	68 f4       	brcc	.+26     	; 0x28e8 <CheckPins+0xca>
     adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin again, without Gate current (+)
    28ce:	80 2f       	mov	r24, r16
    28d0:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    28d4:	3c 01       	movw	r6, r24
     if ((adc.lp2+288) > adc.vCEs) goto checkDiode;	// no significant change
    28d6:	c6 01       	movw	r24, r12
    28d8:	80 5e       	subi	r24, 0xE0	; 224
    28da:	9e 4f       	sbci	r25, 0xFE	; 254
    28dc:	a8 16       	cp	r10, r24
    28de:	b9 06       	cpc	r11, r25
    28e0:	08 f4       	brcc	.+2      	; 0x28e4 <CheckPins+0xc6>
    28e2:	d6 c3       	rjmp	.+1964   	; 0x3090 <CheckPins+0x872>
    28e4:	56 01       	movw	r10, r12
    28e6:	07 c0       	rjmp	.+14     	; 0x28f6 <CheckPins+0xd8>
     adc.vCEs = adc.lp2;
  } else {
     if ((adc.vCEs+288) > adc.lp2) goto checkDiode;	// no significant change
    28e8:	c5 01       	movw	r24, r10
    28ea:	80 5e       	subi	r24, 0xE0	; 224
    28ec:	9e 4f       	sbci	r25, 0xFE	; 254
    28ee:	c8 16       	cp	r12, r24
    28f0:	d9 06       	cpc	r13, r25
    28f2:	08 f4       	brcc	.+2      	; 0x28f6 <CheckPins+0xd8>
    28f4:	cd c3       	rjmp	.+1946   	; 0x3090 <CheckPins+0x872>
  // a TRIAC is marked as two transistors at least (2 or 3)
  // both of NPN transistors (normal and inverse) are found, if ntrans.count == 2
  // both of PNP transistors (normal and inverse) are found, if ptrans.count == 2
  // If Transistor with protection diode is checked, all results are found,
  // if ntrans.count == 1 and ptrans.count == 1
  if ((ntrans.count + ptrans.count) > 1) {
    28f6:	20 91 67 01 	lds	r18, 0x0167
    28fa:	80 91 4f 01 	lds	r24, 0x014F
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	82 0f       	add	r24, r18
    2902:	91 1d       	adc	r25, r1
    2904:	82 30       	cpi	r24, 0x02	; 2
    2906:	91 05       	cpc	r25, r1
    2908:	0c f0       	brlt	.+2      	; 0x290c <CheckPins+0xee>
    290a:	c2 c3       	rjmp	.+1924   	; 0x3090 <CheckPins+0x872>
#endif
  TriPinRL = pgm_read_byte(&PinRLtab[TristatePin]);	// instruction for TristatePin R_L
#if FLASHEND > 0x3fff
  TriPinRH = pgm_read_byte(&PinRHtab[TristatePin]);	// instruction for TristatePin R_H
#else
  TriPinRH = TriPinRL + TriPinRL;			// instruction for TristatePin R_H
    290c:	95 2c       	mov	r9, r5
    290e:	99 0c       	add	r9, r9
  // Look for Source/Drain current without gate current.
  // Germanium transistors have also high collector current with higher temperature.
  // But this current is lower, if the base is hold at emitter level (adc.hp1).
  // Additional checking of adc.lp1 will prevent to detect a PNP as P-JFET.
//  if((PartMode <= PART_MODE_P_JFET) && (adc.lp_otr > 455)  && (adc.vCEs > 455))
  if((adc.lp_otr > 455)  && (adc.vCEs > 455))
    2910:	28 ec       	ldi	r18, 0xC8	; 200
    2912:	62 16       	cp	r6, r18
    2914:	21 e0       	ldi	r18, 0x01	; 1
    2916:	72 06       	cpc	r7, r18
    2918:	08 f4       	brcc	.+2      	; 0x291c <CheckPins+0xfe>
    291a:	b1 c0       	rjmp	.+354    	; 0x2a7e <CheckPins+0x260>
    291c:	38 ec       	ldi	r19, 0xC8	; 200
    291e:	a3 16       	cp	r10, r19
    2920:	31 e0       	ldi	r19, 0x01	; 1
    2922:	b3 06       	cpc	r11, r19
    2924:	08 f4       	brcc	.+2      	; 0x2928 <CheckPins+0x10a>
    2926:	ab c0       	rjmp	.+342    	; 0x2a7e <CheckPins+0x260>
     {  //there is more than 650uA current without TristatePin current 
     // can be JFET or D-FET
     //Test if N-JFET or if self-conducting N-MOSFET
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
    2928:	89 2d       	mov	r24, r9
    292a:	84 29       	or	r24, r4
    292c:	84 b9       	out	0x04, r24	; 4
     adc.lp1 = W10msReadADC(LowPin);	//measure voltage at the assumed Source 
    292e:	80 2f       	mov	r24, r16
    2930:	0e 94 a3 13 	call	0x2746	; 0x2746 <W10msReadADC>
    2934:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
    293c:	6c 01       	movw	r12, r24
     R_PORT = TriPinRH;			//switch R_H for Tristate-Pin (probably Gate) to VCC
    293e:	95 b8       	out	0x05, r9	; 5
     adc.lp2 = W10msReadADC(LowPin);	//measure voltage at the assumed Source again
    2940:	80 2f       	mov	r24, r16
    2942:	0e 94 a3 13 	call	0x2746	; 0x2746 <W10msReadADC>
     lcd_space();
     DisplayValue(adc.lp2,-3,' ',3);
     DisplayValue(adc.lp1,-3,' ',3);
#endif
     //If it is a self-conducting MOSFET or JFET, then must be: adc.lp2 > adc.lp1 
     if(adc.lp2>(adc.lp1+599)) {
    2946:	95 01       	movw	r18, r10
    2948:	29 5a       	subi	r18, 0xA9	; 169
    294a:	3d 4f       	sbci	r19, 0xFD	; 253
    294c:	9f 28       	or	r9, r15
    294e:	28 17       	cp	r18, r24
    2950:	39 07       	cpc	r19, r25
    2952:	08 f0       	brcs	.+2      	; 0x2956 <CheckPins+0x138>
    2954:	40 c0       	rjmp	.+128    	; 0x29d6 <CheckPins+0x1b8>
        //measure voltage at the  Gate, differ between MOSFET and JFET
        ADC_PORT = TXD_VAL;
    2956:	88 e0       	ldi	r24, 0x08	; 8
    2958:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = LoADCm;	//Low-Pin fix to GND
    295a:	87 b8       	out	0x07, r8	; 7
        R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
    295c:	94 b8       	out	0x04, r9	; 4
        R_PORT = TriPinRH | HiPinRL;	//switch R_L for High-Pin to VCC
    295e:	95 b8       	out	0x05, r9	; 5
        adc.lp2 = W10msReadADC(TristatePin); //read voltage of assumed Gate 
    2960:	89 81       	ldd	r24, Y+1	; 0x01
    2962:	0e 94 a3 13 	call	0x2746	; 0x2746 <W10msReadADC>
        if(adc.lp2>3911) {  //MOSFET
    2966:	4f e0       	ldi	r20, 0x0F	; 15
    2968:	88 34       	cpi	r24, 0x48	; 72
    296a:	94 07       	cpc	r25, r20
    296c:	28 f0       	brcs	.+10     	; 0x2978 <CheckPins+0x15a>
           PartFound = PART_FET;	//N-Kanal-MOSFET
    296e:	84 e0       	ldi	r24, 0x04	; 4
    2970:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_MOS|N_CHANNEL|D_MODE; //Depletion-MOSFET
    2974:	82 e2       	ldi	r24, 0x22	; 34
    2976:	04 c0       	rjmp	.+8      	; 0x2980 <CheckPins+0x162>
        } else {  //JFET (pn-passage between Gate and Source is conducting )
           PartFound = PART_FET;	//N-Kanal-JFET
    2978:	84 e0       	ldi	r24, 0x04	; 4
    297a:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_JFET|N_CHANNEL|D_MODE;
    297e:	84 e2       	ldi	r24, 0x24	; 36
    2980:	80 93 06 01 	sts	0x0106, r24
        lcd_data('N');
        lcd_data('J');
#endif
//      if ((PartReady == 0) || (adc.lp1 > ntrans.uBE)) 
//      there is no way to find out the right Source / Drain
        ntrans.uBE = adc.lp1;
    2984:	b0 92 47 01 	sts	0x0147, r11
    2988:	a0 92 46 01 	sts	0x0146, r10
        if(adc.lp1 > adc.tp1) {
    298c:	ca 14       	cp	r12, r10
    298e:	db 04       	cpc	r13, r11
    2990:	40 f4       	brcc	.+16     	; 0x29a2 <CheckPins+0x184>
          ntrans.gthvoltage = adc.lp1 - adc.tp1;	//voltage GS (Source - Gate)
    2992:	c5 01       	movw	r24, r10
    2994:	8c 19       	sub	r24, r12
    2996:	9d 09       	sbc	r25, r13
    2998:	90 93 4b 01 	sts	0x014B, r25
    299c:	80 93 4a 01 	sts	0x014A, r24
    29a0:	04 c0       	rjmp	.+8      	; 0x29aa <CheckPins+0x18c>
        } else {
          ntrans.gthvoltage = 0;	//voltage GS (Source - Gate)
    29a2:	10 92 4b 01 	sts	0x014B, r1
    29a6:	10 92 4a 01 	sts	0x014A, r1
        }
        ntrans.current = (unsigned int)(((unsigned long)adc.lp1 * 1000) / RR680MI); // Id 0.01mA
    29aa:	b5 01       	movw	r22, r10
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	28 ee       	ldi	r18, 0xE8	; 232
    29b2:	33 e0       	ldi	r19, 0x03	; 3
    29b4:	40 e0       	ldi	r20, 0x00	; 0
    29b6:	50 e0       	ldi	r21, 0x00	; 0
    29b8:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
    29bc:	20 91 03 01 	lds	r18, 0x0103
    29c0:	30 91 04 01 	lds	r19, 0x0104
    29c4:	40 e0       	ldi	r20, 0x00	; 0
    29c6:	50 e0       	ldi	r21, 0x00	; 0
    29c8:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    29cc:	30 93 49 01 	sts	0x0149, r19
    29d0:	20 93 48 01 	sts	0x0148, r18
    29d4:	54 c3       	rjmp	.+1704   	; 0x307e <CheckPins+0x860>
        ntrans.count++;			// count as two, the inverse is identical
        goto saveNresult;		// save Pin numbers and exit
     }

     ADC_PORT = TXD_VAL;		// direct outputs to GND
    29d6:	88 e0       	ldi	r24, 0x08	; 8
    29d8:	88 b9       	out	0x08, r24	; 8

     //Test, if P-JFET or if self-conducting P-MOSFET
     ADC_DDR = LoADCm;		//switch Low-Pin (assumed Drain) direct to GND,
    29da:	87 b8       	out	0x07, r8	; 7
				//R_H for Tristate-Pin (assumed Gate) is already switched to VCC
     R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
    29dc:	94 b8       	out	0x04, r9	; 4
     R_PORT = TriPinRH | HiPinRL;	//High-Pin across R_L to Vcc
    29de:	95 b8       	out	0x05, r9	; 5
     adc.hp1 = W10msReadADC(HighPin);	//measure voltage at assumed Source 
    29e0:	81 2f       	mov	r24, r17
    29e2:	0e 94 a3 13 	call	0x2746	; 0x2746 <W10msReadADC>
    29e6:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
    29ea:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
    29ee:	6c 01       	movw	r12, r24
     R_PORT = HiPinRL;			//switch R_H for Tristate-Pin (assumed Gate) to GND
    29f0:	f5 b8       	out	0x05, r15	; 5
     adc.hp2 = W10msReadADC(HighPin);	//read voltage at assumed Source again
    29f2:	81 2f       	mov	r24, r17
    29f4:	0e 94 a3 13 	call	0x2746	; 0x2746 <W10msReadADC>
     //if it is a self-conducting P_MOSFET or P-JFET , then must be:  adc.hp1 > adc.hp2 
     if(adc.hp1>(adc.hp2+599)) {
    29f8:	89 5a       	subi	r24, 0xA9	; 169
    29fa:	9d 4f       	sbci	r25, 0xFD	; 253
    29fc:	8a 15       	cp	r24, r10
    29fe:	9b 05       	cpc	r25, r11
    2a00:	08 f0       	brcs	.+2      	; 0x2a04 <CheckPins+0x1e6>
    2a02:	46 c3       	rjmp	.+1676   	; 0x3090 <CheckPins+0x872>
        //read voltage at the Gate , to differ between MOSFET and JFET
        ADC_PORT = HiADCp;	//switch High-Pin directly to VCC
    2a04:	e8 b8       	out	0x08, r14	; 8
        ADC_DDR = HiADCm;	//switch High-Pin to output
    2a06:	e7 b8       	out	0x07, r14	; 7
        adc.tp2 = W10msReadADC(TristatePin); //read voltage at the assumed Gate 
    2a08:	89 81       	ldd	r24, Y+1	; 0x01
    2a0a:	0e 94 a3 13 	call	0x2746	; 0x2746 <W10msReadADC>
        if(adc.tp2<977) { 		//MOSFET
    2a0e:	53 e0       	ldi	r21, 0x03	; 3
    2a10:	81 3d       	cpi	r24, 0xD1	; 209
    2a12:	95 07       	cpc	r25, r21
    2a14:	28 f4       	brcc	.+10     	; 0x2a20 <CheckPins+0x202>
           PartFound = PART_FET;	//P-Kanal-MOSFET
    2a16:	84 e0       	ldi	r24, 0x04	; 4
    2a18:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_MOS|P_CHANNEL|D_MODE; //Depletion-MOSFET
    2a1c:	82 e3       	ldi	r24, 0x32	; 50
    2a1e:	04 c0       	rjmp	.+8      	; 0x2a28 <CheckPins+0x20a>
        } else { 			//JFET (pn-passage between Gate and Source is conducting)
           PartFound = PART_FET;	//P-Kanal-JFET
    2a20:	84 e0       	ldi	r24, 0x04	; 4
    2a22:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_JFET|P_CHANNEL|D_MODE;
    2a26:	84 e3       	ldi	r24, 0x34	; 52
    2a28:	80 93 06 01 	sts	0x0106, r24
        }
#if DebugOut == 5
        lcd_data('P');
        lcd_data('J');
#endif
        if(adc.tp1 > adc.hp1) {
    2a2c:	ac 14       	cp	r10, r12
    2a2e:	bd 04       	cpc	r11, r13
    2a30:	38 f4       	brcc	.+14     	; 0x2a40 <CheckPins+0x222>
          ptrans.gthvoltage = adc.tp1 - adc.hp1;	//voltage GS (Gate - Source)
    2a32:	ca 18       	sub	r12, r10
    2a34:	db 08       	sbc	r13, r11
    2a36:	d0 92 63 01 	sts	0x0163, r13
    2a3a:	c0 92 62 01 	sts	0x0162, r12
    2a3e:	04 c0       	rjmp	.+8      	; 0x2a48 <CheckPins+0x22a>
        } else {
          ptrans.gthvoltage = 0;
    2a40:	10 92 63 01 	sts	0x0163, r1
    2a44:	10 92 62 01 	sts	0x0162, r1
        }
        ptrans.current = (unsigned int)(((unsigned long)(ADCconfig.U_AVCC - adc.hp1) * 1000) / RR680PL); // Id 0.01mA
    2a48:	60 91 35 01 	lds	r22, 0x0135
    2a4c:	70 91 36 01 	lds	r23, 0x0136
    2a50:	6a 19       	sub	r22, r10
    2a52:	7b 09       	sbc	r23, r11
    2a54:	80 e0       	ldi	r24, 0x00	; 0
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	28 ee       	ldi	r18, 0xE8	; 232
    2a5a:	33 e0       	ldi	r19, 0x03	; 3
    2a5c:	40 e0       	ldi	r20, 0x00	; 0
    2a5e:	50 e0       	ldi	r21, 0x00	; 0
    2a60:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
    2a64:	20 91 08 01 	lds	r18, 0x0108
    2a68:	30 91 09 01 	lds	r19, 0x0109
    2a6c:	40 e0       	ldi	r20, 0x00	; 0
    2a6e:	50 e0       	ldi	r21, 0x00	; 0
    2a70:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    2a74:	30 93 61 01 	sts	0x0161, r19
    2a78:	20 93 60 01 	sts	0x0160, r18
    2a7c:	59 c1       	rjmp	.+690    	; 0x2d30 <CheckPins+0x512>


  //there is more than 650uA current without TristatePin current 
#ifdef COMMON_COLLECTOR
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
    2a7e:	88 e0       	ldi	r24, 0x08	; 8
    2a80:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;			// Collector direct to GND
    2a82:	87 b8       	out	0x07, r8	; 7
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
    2a84:	f5 b8       	out	0x05, r15	; 5
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
    2a86:	2f 2c       	mov	r2, r15
    2a88:	25 28       	or	r2, r5
    2a8a:	24 b8       	out	0x04, r2	; 4
  adc.hp1 = W5msReadADC(HighPin);	// voltage at the Emitter resistor
    2a8c:	81 2f       	mov	r24, r17
    2a8e:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    2a92:	9f 83       	std	Y+7, r25	; 0x07
    2a94:	8e 83       	std	Y+6, r24	; 0x06
  adc.rhp = ADCconfig.U_AVCC - adc.hp1;	// voltage at the Emitter resistor
    2a96:	c0 90 35 01 	lds	r12, 0x0135
    2a9a:	d0 90 36 01 	lds	r13, 0x0136
  adc.tp1 = ReadADC(TristatePin);	// voltage at the base resistor
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
    2aa4:	5c 01       	movw	r10, r24

  if (adc.tp1 < 10) {
    2aa6:	8a 30       	cpi	r24, 0x0A	; 10
    2aa8:	91 05       	cpc	r25, r1
    2aaa:	b0 f5       	brcc	.+108    	; 0x2b18 <CheckPins+0x2fa>
     R_DDR = 0;
    2aac:	14 b8       	out	0x04, r1	; 4
     wait_about5ms();		// clear TRIAC and Thyristor
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
    2ab6:	89 2d       	mov	r24, r9
    2ab8:	8f 29       	or	r24, r15
    2aba:	84 b9       	out	0x04, r24	; 4
     adc.hp1 = W5msReadADC(HighPin);
    2abc:	81 2f       	mov	r24, r17
    2abe:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    2ac2:	9f 83       	std	Y+7, r25	; 0x07
    2ac4:	8e 83       	std	Y+6, r24	; 0x06
     adc.rhp = ADCconfig.U_AVCC - adc.hp1;	// voltage at the Emitter resistor
    2ac6:	c0 90 35 01 	lds	r12, 0x0135
    2aca:	d0 90 36 01 	lds	r13, 0x0136
    2ace:	c8 1a       	sub	r12, r24
    2ad0:	d9 0a       	sbc	r13, r25
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
    2ad8:	5c 01       	movw	r10, r24
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.rhp * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
    2ada:	c6 01       	movw	r24, r12
    2adc:	a0 e0       	ldi	r26, 0x00	; 0
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	8a 83       	std	Y+2, r24	; 0x02
    2ae2:	9b 83       	std	Y+3, r25	; 0x03
    2ae4:	ac 83       	std	Y+4, r26	; 0x04
    2ae6:	bd 83       	std	Y+5, r27	; 0x05
    2ae8:	20 91 08 01 	lds	r18, 0x0108
    2aec:	30 91 09 01 	lds	r19, 0x0109
    2af0:	40 e0       	ldi	r20, 0x00	; 0
    2af2:	50 e0       	ldi	r21, 0x00	; 0
    2af4:	60 e6       	ldi	r22, 0x60	; 96
    2af6:	77 eb       	ldi	r23, 0xB7	; 183
    2af8:	87 e4       	ldi	r24, 0x47	; 71
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    2b00:	6a 81       	ldd	r22, Y+2	; 0x02
    2b02:	7b 81       	ldd	r23, Y+3	; 0x03
    2b04:	8c 81       	ldd	r24, Y+4	; 0x04
    2b06:	9d 81       	ldd	r25, Y+5	; 0x05
    2b08:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
    2b0c:	95 01       	movw	r18, r10
    2b0e:	40 e0       	ldi	r20, 0x00	; 0
    2b10:	50 e0       	ldi	r21, 0x00	; 0
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
     adc.hp1 = W5msReadADC(HighPin);
     adc.rhp = ADCconfig.U_AVCC - adc.hp1;	// voltage at the Emitter resistor
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.rhp * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
    2b12:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    2b16:	0d c0       	rjmp	.+26     	; 0x2b32 <CheckPins+0x314>
  ADC_PORT = TXD_VAL;
  ADC_DDR = LoADCm;			// Collector direct to GND
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
  adc.hp1 = W5msReadADC(HighPin);	// voltage at the Emitter resistor
  adc.rhp = ADCconfig.U_AVCC - adc.hp1;	// voltage at the Emitter resistor
    2b18:	c6 01       	movw	r24, r12
    2b1a:	ae 81       	ldd	r26, Y+6	; 0x06
    2b1c:	bf 81       	ldd	r27, Y+7	; 0x07
    2b1e:	8a 1b       	sub	r24, r26
    2b20:	9b 0b       	sbc	r25, r27
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
 #else
     c_hfe = ((adc.rhp / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp1/500);
 #endif
  } else {
     c_hfe = (unsigned long)((adc.rhp - adc.tp1) / adc.tp1);
    2b22:	8a 19       	sub	r24, r10
    2b24:	9b 09       	sbc	r25, r11
    2b26:	b5 01       	movw	r22, r10
    2b28:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__udivmodhi4>
    2b2c:	9b 01       	movw	r18, r22
    2b2e:	40 e0       	ldi	r20, 0x00	; 0
    2b30:	50 e0       	ldi	r21, 0x00	; 0
    2b32:	2a 83       	std	Y+2, r18	; 0x02
    2b34:	3b 83       	std	Y+3, r19	; 0x03
    2b36:	4c 83       	std	Y+4, r20	; 0x04
    2b38:	5d 83       	std	Y+5, r21	; 0x05
  }
#endif

  //set Pins again for circuit with common Emitter PNP
  R_DDR = 0;			//all Resistor Ports to Input
    2b3a:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			//switch all resistor ports to GND
    2b3c:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
    2b3e:	e8 b8       	out	0x08, r14	; 8
  ADC_DDR = HiADCm;		//switch High-Pin to output
    2b40:	e7 b8       	out	0x07, r14	; 7
//  R_DDR = LoPinRL;		//switch R_L port for Low-Pin to output (GND)
  wait_about5ms();
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
  
  if(adc.lp_otr < 1977) {
    2b4a:	39 eb       	ldi	r19, 0xB9	; 185
    2b4c:	63 16       	cp	r6, r19
    2b4e:	37 e0       	ldi	r19, 0x07	; 7
    2b50:	73 06       	cpc	r7, r19
    2b52:	08 f0       	brcs	.+2      	; 0x2b56 <CheckPins+0x338>
    2b54:	9d c2       	rjmp	.+1338   	; 0x3090 <CheckPins+0x872>
     lcd_data('E');
     lcd_testpin(HighPin);
     lcd_space();
#endif
     //Test to PNP
     R_DDR = LoPinRL | TriPinRL;	//switch R_L port for Tristate-Pin to output (GND), for Test of PNP
    2b56:	34 b8       	out	0x04, r3	; 4
     adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin
    2b58:	80 2f       	mov	r24, r16
    2b5a:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
     if(adc.lp1 > 3422) {
    2b5e:	4d e0       	ldi	r20, 0x0D	; 13
    2b60:	8f 35       	cpi	r24, 0x5F	; 95
    2b62:	94 07       	cpc	r25, r20
    2b64:	08 f4       	brcc	.+2      	; 0x2b68 <CheckPins+0x34a>
    2b66:	ea c0       	rjmp	.+468    	; 0x2d3c <CheckPins+0x51e>
        //component has current => PNP-Transistor or equivalent
        R_DDR = 0;
    2b68:	14 b8       	out	0x04, r1	; 4
        wait_about5ms();		// clear TRIAC and Thyristor
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
        //compute current amplification factor in both directions
        R_DDR = LoPinRL | TriPinRH;	//switch R_H port for Tristate-Pin (Base) to output (GND)
    2b72:	c9 2c       	mov	r12, r9
    2b74:	c4 28       	or	r12, r4
    2b76:	c4 b8       	out	0x04, r12	; 4

        adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin (assumed Collector)
    2b78:	80 2f       	mov	r24, r16
    2b7a:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    2b7e:	ac 01       	movw	r20, r24
        adc.tp2 = ReadADC(TristatePin);	//measure voltage at TristatePin (Base) 
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
    2b82:	4f 87       	std	Y+15, r20	; 0x0f
    2b84:	58 8b       	std	Y+16, r21	; 0x10
    2b86:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
    2b8a:	99 87       	std	Y+9, r25	; 0x09
    2b8c:	88 87       	std	Y+8, r24	; 0x08
        adc.hp2 = ReadADC(HighPin);	//measure voltage at HighPin (assumed Emitter)
    2b8e:	81 2f       	mov	r24, r17
    2b90:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
    2b94:	9d 87       	std	Y+13, r25	; 0x0d
    2b96:	8c 87       	std	Y+12, r24	; 0x0c
//           PartReady = 1;
//        }

 
/*        if(adc.tp2 > 977)  */
        if(adc.tp2 > 2000) {
    2b98:	4f 85       	ldd	r20, Y+15	; 0x0f
    2b9a:	58 89       	ldd	r21, Y+16	; 0x10
    2b9c:	68 85       	ldd	r22, Y+8	; 0x08
    2b9e:	79 85       	ldd	r23, Y+9	; 0x09
    2ba0:	87 e0       	ldi	r24, 0x07	; 7
    2ba2:	61 3d       	cpi	r22, 0xD1	; 209
    2ba4:	78 07       	cpc	r23, r24
    2ba6:	08 f4       	brcc	.+2      	; 0x2baa <CheckPins+0x38c>
    2ba8:	6f c0       	rjmp	.+222    	; 0x2c88 <CheckPins+0x46a>
           //PNP-Transistor is found (Base voltage moves with Emitter to VCC)
           PartFound = PART_TRANSISTOR;
    2baa:	83 e0       	ldi	r24, 0x03	; 3
    2bac:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_PNP;
    2bb0:	8d e0       	ldi	r24, 0x0D	; 13
    2bb2:	80 93 06 01 	sts	0x0106, r24
           update_pins = 0;		// only update pins, if hFE is higher or Thyristor 
#ifdef COMMON_EMITTER
           //compute current amplification factor for circuit with common Emitter
           //e_hFE = B = Collector current / Base current
           tmp16 = adc.lp1;
           if (tmp16 > adc.lp_otr) {
    2bb6:	64 16       	cp	r6, r20
    2bb8:	75 06       	cpc	r7, r21
    2bba:	10 f4       	brcc	.+4      	; 0x2bc0 <CheckPins+0x3a2>
              tmp16 -= adc.lp_otr;
    2bbc:	46 19       	sub	r20, r6
    2bbe:	57 09       	sbc	r21, r7
           }

 #ifdef LONG_HFE
           e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
    2bc0:	6a 01       	movw	r12, r20
    2bc2:	ee 24       	eor	r14, r14
    2bc4:	ff 24       	eor	r15, r15
    2bc6:	20 91 03 01 	lds	r18, 0x0103
    2bca:	30 91 04 01 	lds	r19, 0x0104
    2bce:	40 e0       	ldi	r20, 0x00	; 0
    2bd0:	50 e0       	ldi	r21, 0x00	; 0
    2bd2:	60 e6       	ldi	r22, 0x60	; 96
    2bd4:	77 eb       	ldi	r23, 0xB7	; 183
    2bd6:	87 e4       	ldi	r24, 0x47	; 71
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    2bde:	c7 01       	movw	r24, r14
    2be0:	b6 01       	movw	r22, r12
    2be2:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
    2be6:	a8 85       	ldd	r26, Y+8	; 0x08
    2be8:	b9 85       	ldd	r27, Y+9	; 0x09
    2bea:	9d 01       	movw	r18, r26
    2bec:	40 e0       	ldi	r20, 0x00	; 0
    2bee:	50 e0       	ldi	r21, 0x00	; 0
           if (tmp16 > adc.lp_otr) {
              tmp16 -= adc.lp_otr;
           }

 #ifdef LONG_HFE
           e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
    2bf0:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
 #else
           e_hfe = ((tmp16 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
           // first hFE or e_hfe is greater than last hfe ?
           if ((ptrans.count == 0) || (e_hfe > ptrans.hfe)){
    2bf4:	80 91 67 01 	lds	r24, 0x0167
    2bf8:	88 23       	and	r24, r24
    2bfa:	69 f0       	breq	.+26     	; 0x2c16 <CheckPins+0x3f8>
    2bfc:	80 91 5a 01 	lds	r24, 0x015A
    2c00:	90 91 5b 01 	lds	r25, 0x015B
    2c04:	a0 91 5c 01 	lds	r26, 0x015C
    2c08:	b0 91 5d 01 	lds	r27, 0x015D
    2c0c:	82 17       	cp	r24, r18
    2c0e:	93 07       	cpc	r25, r19
    2c10:	a4 07       	cpc	r26, r20
    2c12:	b5 07       	cpc	r27, r21
    2c14:	a0 f4       	brcc	.+40     	; 0x2c3e <CheckPins+0x420>
              ptrans.hfe = e_hfe;				// hFE with common emitter
    2c16:	20 93 5a 01 	sts	0x015A, r18
    2c1a:	30 93 5b 01 	sts	0x015B, r19
    2c1e:	40 93 5c 01 	sts	0x015C, r20
    2c22:	50 93 5d 01 	sts	0x015D, r21
              ptrans.uBE = adc.hp2 - adc.tp2;	// Base Emitter Voltage
    2c26:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c28:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c2a:	e8 85       	ldd	r30, Y+8	; 0x08
    2c2c:	f9 85       	ldd	r31, Y+9	; 0x09
    2c2e:	8e 1b       	sub	r24, r30
    2c30:	9f 0b       	sbc	r25, r31
    2c32:	90 93 5f 01 	sts	0x015F, r25
    2c36:	80 93 5e 01 	sts	0x015E, r24
              update_pins = 1;		// trans.ebc must be updated
    2c3a:	21 e0       	ldi	r18, 0x01	; 1
    2c3c:	01 c0       	rjmp	.+2      	; 0x2c40 <CheckPins+0x422>
/*        if(adc.tp2 > 977)  */
        if(adc.tp2 > 2000) {
           //PNP-Transistor is found (Base voltage moves with Emitter to VCC)
           PartFound = PART_TRANSISTOR;
           PartMode = PART_MODE_PNP;
           update_pins = 0;		// only update pins, if hFE is higher or Thyristor 
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
#ifdef COMMON_COLLECTOR
           //current amplification factor for common  Collector (Emitter follower)
           // c_hFE = (Emitter current - Base current) / Base current
 #ifdef COMMON_EMITTER
           // also with COMMON_EMITTER, is c_hfe greater than the last hFE?
           if (c_hfe > ptrans.hfe)  // trans.hfe is allready e_hfe or last c_hFE
    2c40:	80 91 5a 01 	lds	r24, 0x015A
    2c44:	90 91 5b 01 	lds	r25, 0x015B
    2c48:	a0 91 5c 01 	lds	r26, 0x015C
    2c4c:	b0 91 5d 01 	lds	r27, 0x015D
    2c50:	4a 81       	ldd	r20, Y+2	; 0x02
    2c52:	5b 81       	ldd	r21, Y+3	; 0x03
    2c54:	6c 81       	ldd	r22, Y+4	; 0x04
    2c56:	7d 81       	ldd	r23, Y+5	; 0x05
    2c58:	84 17       	cp	r24, r20
    2c5a:	95 07       	cpc	r25, r21
    2c5c:	a6 07       	cpc	r26, r22
    2c5e:	b7 07       	cpc	r27, r23
    2c60:	08 f0       	brcs	.+2      	; 0x2c64 <CheckPins+0x446>
    2c62:	0e c5       	rjmp	.+2588   	; 0x3680 <CheckPins+0xe62>
 #else
           // without COMMON_EMITTER , c_hFE is first or greater than the old one?
           if ((ptrans.count == 0) || (c_hfe > ptrans.hfe)) 
 #endif
           {
              ptrans.hfe = c_hfe;		// c_hfe is the best
    2c64:	40 93 5a 01 	sts	0x015A, r20
    2c68:	50 93 5b 01 	sts	0x015B, r21
    2c6c:	60 93 5c 01 	sts	0x015C, r22
    2c70:	70 93 5d 01 	sts	0x015D, r23
              ptrans.uBE = adc.hp1 - adc.tp1;	// Base Emitter Voltage common collector
    2c74:	8e 81       	ldd	r24, Y+6	; 0x06
    2c76:	9f 81       	ldd	r25, Y+7	; 0x07
    2c78:	8a 19       	sub	r24, r10
    2c7a:	9b 09       	sbc	r25, r11
    2c7c:	90 93 5f 01 	sts	0x015F, r25
    2c80:	80 93 5e 01 	sts	0x015E, r24
              update_pins = 1;		// trans.ebc must be updated
    2c84:	21 e0       	ldi	r18, 0x01	; 1
    2c86:	fc c4       	rjmp	.+2552   	; 0x3680 <CheckPins+0xe62>
           }
#endif
           goto savePresult;		// marke P type, save Pins and exit
        }
        // is probably a P-E-MOS, check voltage
        if((adc.lp_otr < 97) && (adc.lp1 > 2000)) {
    2c88:	61 e6       	ldi	r22, 0x61	; 97
    2c8a:	66 16       	cp	r6, r22
    2c8c:	71 04       	cpc	r7, r1
    2c8e:	08 f0       	brcs	.+2      	; 0x2c92 <CheckPins+0x474>
    2c90:	55 c0       	rjmp	.+170    	; 0x2d3c <CheckPins+0x51e>
    2c92:	77 e0       	ldi	r23, 0x07	; 7
    2c94:	41 3d       	cpi	r20, 0xD1	; 209
    2c96:	57 07       	cpc	r21, r23
    2c98:	08 f4       	brcc	.+2      	; 0x2c9c <CheckPins+0x47e>
    2c9a:	50 c0       	rjmp	.+160    	; 0x2d3c <CheckPins+0x51e>
           //is flow voltage low enough in the closed  state?
           //(since D-Mode-FET would be by mistake detected as E-Mode )
           PartFound = PART_FET;		//P-Kanal-MOSFET is found (Basis/Gate moves not to VCC)
    2c9c:	84 e0       	ldi	r24, 0x04	; 4
    2c9e:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_MOS|P_CHANNEL|E_MODE;
    2ca2:	82 e1       	ldi	r24, 0x12	; 18
    2ca4:	80 93 06 01 	sts	0x0106, r24
           if (adc.hp2 > (adc.lp1+250)) {
    2ca8:	46 50       	subi	r20, 0x06	; 6
    2caa:	5f 4f       	sbci	r21, 0xFF	; 255
    2cac:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cae:	9d 85       	ldd	r25, Y+13	; 0x0d
    2cb0:	48 17       	cp	r20, r24
    2cb2:	59 07       	cpc	r21, r25
    2cb4:	18 f4       	brcc	.+6      	; 0x2cbc <CheckPins+0x49e>
              //Drain-Source Voltage to high, must be a IGBT
              PartMode = PART_MODE_IGBT|P_CHANNEL|E_MODE;
    2cb6:	83 e1       	ldi	r24, 0x13	; 19
    2cb8:	80 93 06 01 	sts	0x0106, r24
           }
       	   //measure the Gate threshold voltage
           //Switching of Drain is monitored with digital input
           // Low level is specified up to 0.3 * VCC
           // High level is specified above 0.6 * VCC
           PinMSK = LoADCm & 7;
    2cbc:	97 e0       	ldi	r25, 0x07	; 7
    2cbe:	89 22       	and	r8, r25
       	   ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
    2cc0:	89 81       	ldd	r24, Y+1	; 0x01
    2cc2:	80 64       	ori	r24, 0x40	; 64
    2cc4:	80 93 7c 00 	sts	0x007C, r24
    2cc8:	eb e0       	ldi	r30, 0x0B	; 11
    2cca:	ae 2e       	mov	r10, r30
       	   tmp16 = 1;			// round up ((1*4)/9)
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	90 e0       	ldi	r25, 0x00	; 0
       	      while (!(ADC_PIN&PinMSK));		// Wait, until the MOSFET switches and Drain moves to VCC
                  			// 1 is detected with more than 2.5V (up to 2.57V) with tests of mega168 and mega328
       	      R_DDR = LoPinRL;
       	      ADCSRA |= (1<<ADSC);		// Start Conversion
       	      while (ADCSRA&(1<<ADSC));		// wait
      	      tmp16 += (1023 - ADCW);	// Add Tristatepin-Voltage
    2cd0:	7f ef       	ldi	r23, 0xFF	; 255
    2cd2:	e7 2e       	mov	r14, r23
    2cd4:	73 e0       	ldi	r23, 0x03	; 3
    2cd6:	f7 2e       	mov	r15, r23
    2cd8:	3c 01       	movw	r6, r24
           // High level is specified above 0.6 * VCC
           PinMSK = LoADCm & 7;
       	   ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
       	   tmp16 = 1;			// round up ((1*4)/9)
       	   for(ii=0;ii<11;ii++) {
       	      wdt_reset();
    2cda:	a8 95       	wdr
       	      ChargePin10ms(TriPinRL,1);
    2cdc:	85 2d       	mov	r24, r5
    2cde:	61 e0       	ldi	r22, 0x01	; 1
    2ce0:	0e 94 ef 0a 	call	0x15de	; 0x15de <ChargePin10ms>
                R_DDR = LoPinRL | TriPinRH;		//switch R_H for Tristate-Pin (Basis) to GND
    2ce4:	c4 b8       	out	0x04, r12	; 4
       	      while (!(ADC_PIN&PinMSK));		// Wait, until the MOSFET switches and Drain moves to VCC
    2ce6:	86 b1       	in	r24, 0x06	; 6
    2ce8:	88 21       	and	r24, r8
    2cea:	e9 f3       	breq	.-6      	; 0x2ce6 <CheckPins+0x4c8>
                  			// 1 is detected with more than 2.5V (up to 2.57V) with tests of mega168 and mega328
       	      R_DDR = LoPinRL;
    2cec:	44 b8       	out	0x04, r4	; 4
       	      ADCSRA |= (1<<ADSC);		// Start Conversion
    2cee:	80 91 7a 00 	lds	r24, 0x007A
    2cf2:	80 64       	ori	r24, 0x40	; 64
    2cf4:	80 93 7a 00 	sts	0x007A, r24
       	      while (ADCSRA&(1<<ADSC));		// wait
    2cf8:	80 91 7a 00 	lds	r24, 0x007A
    2cfc:	86 fd       	sbrc	r24, 6
    2cfe:	fc cf       	rjmp	.-8      	; 0x2cf8 <CheckPins+0x4da>
      	      tmp16 += (1023 - ADCW);	// Add Tristatepin-Voltage
    2d00:	20 91 78 00 	lds	r18, 0x0078
    2d04:	30 91 79 00 	lds	r19, 0x0079
    2d08:	d7 01       	movw	r26, r14
    2d0a:	a2 1b       	sub	r26, r18
    2d0c:	b3 0b       	sbc	r27, r19
    2d0e:	6a 0e       	add	r6, r26
    2d10:	7b 1e       	adc	r7, r27
    2d12:	aa 94       	dec	r10
           // Low level is specified up to 0.3 * VCC
           // High level is specified above 0.6 * VCC
           PinMSK = LoADCm & 7;
       	   ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
       	   tmp16 = 1;			// round up ((1*4)/9)
       	   for(ii=0;ii<11;ii++) {
    2d14:	11 f7       	brne	.-60     	; 0x2cda <CheckPins+0x4bc>
    2d16:	c3 01       	movw	r24, r6
       	      R_DDR = LoPinRL;
       	      ADCSRA |= (1<<ADSC);		// Start Conversion
       	      while (ADCSRA&(1<<ADSC));		// wait
      	      tmp16 += (1023 - ADCW);	// Add Tristatepin-Voltage
           }
           tmp16 *= 4;		// is equal to 44*ADCW
    2d18:	88 0f       	add	r24, r24
    2d1a:	99 1f       	adc	r25, r25
    2d1c:	88 0f       	add	r24, r24
    2d1e:	99 1f       	adc	r25, r25
           ptrans.gthvoltage = tmp16 / 9;		// gives resolution in mV
    2d20:	69 e0       	ldi	r22, 0x09	; 9
    2d22:	70 e0       	ldi	r23, 0x00	; 0
    2d24:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__udivmodhi4>
    2d28:	70 93 63 01 	sts	0x0163, r23
    2d2c:	60 93 62 01 	sts	0x0162, r22
           ptrans.count++;		// count FET as two for accelerate searching
    2d30:	80 91 67 01 	lds	r24, 0x0167
    2d34:	8f 5f       	subi	r24, 0xFF	; 255
    2d36:	80 93 67 01 	sts	0x0167, r24
    2d3a:	a4 cf       	rjmp	.-184    	; 0x2c84 <CheckPins+0x466>
        }
    } // end component has current => PNP

#ifdef COMMON_COLLECTOR
    // Low-Pin=RL- HighPin=VCC
    R_DDR = LoPinRL | TriPinRL;
    2d3c:	34 b8       	out	0x04, r3	; 4
    R_PORT = TriPinRL;			// TriPin=RL+  NPN with common Collector
    2d3e:	55 b8       	out	0x05, r5	; 5
    adc.lp1 = W5msReadADC(LowPin);	// voltage at Emitter resistor
    2d40:	80 2f       	mov	r24, r16
    2d42:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    2d46:	9f 83       	std	Y+7, r25	; 0x07
    2d48:	8e 83       	std	Y+6, r24	; 0x06
    adc.tp1 = ReadADC(TristatePin);	// voltage at the Base 
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
    2d4c:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
    2d50:	9b 83       	std	Y+3, r25	; 0x03
    2d52:	8a 83       	std	Y+2, r24	; 0x02
    adc.rtp = ADCconfig.U_AVCC - adc.tp1;	// voltage at Base resistor
    2d54:	60 91 35 01 	lds	r22, 0x0135
    2d58:	70 91 36 01 	lds	r23, 0x0136
    2d5c:	68 1b       	sub	r22, r24
    2d5e:	79 0b       	sbc	r23, r25
    if (adc.rtp < 10) { 
    2d60:	6a 30       	cpi	r22, 0x0A	; 10
    2d62:	71 05       	cpc	r23, r1
    2d64:	c8 f5       	brcc	.+114    	; 0x2dd8 <CheckPins+0x5ba>
       R_DDR = 0;
    2d66:	14 b8       	out	0x04, r1	; 4
       wait_about5ms();		// clear TRIAC and Thyristor
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
       R_DDR = LoPinRL | TriPinRH;
    2d70:	89 2d       	mov	r24, r9
    2d72:	84 29       	or	r24, r4
    2d74:	84 b9       	out	0x04, r24	; 4
       R_PORT = TriPinRH;		// Tripin=RH+
    2d76:	95 b8       	out	0x05, r9	; 5
       adc.lp1 = W5msReadADC(LowPin);
    2d78:	80 2f       	mov	r24, r16
    2d7a:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    2d7e:	9f 83       	std	Y+7, r25	; 0x07
    2d80:	8e 83       	std	Y+6, r24	; 0x06
       adc.tp1 = ReadADC(TristatePin);	// voltage at the Base 
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
    2d88:	9b 83       	std	Y+3, r25	; 0x03
    2d8a:	8a 83       	std	Y+2, r24	; 0x02
       adc.rtp = ADCconfig.U_AVCC - adc.tp1;	// voltage at Base resistor
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
    2d8c:	ee 81       	ldd	r30, Y+6	; 0x06
    2d8e:	ff 81       	ldd	r31, Y+7	; 0x07
    2d90:	5f 01       	movw	r10, r30
    2d92:	cc 24       	eor	r12, r12
    2d94:	dd 24       	eor	r13, r13
    2d96:	20 91 03 01 	lds	r18, 0x0103
    2d9a:	30 91 04 01 	lds	r19, 0x0104
    2d9e:	40 e0       	ldi	r20, 0x00	; 0
    2da0:	50 e0       	ldi	r21, 0x00	; 0
    2da2:	60 e6       	ldi	r22, 0x60	; 96
    2da4:	77 eb       	ldi	r23, 0xB7	; 183
    2da6:	87 e4       	ldi	r24, 0x47	; 71
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    2dae:	c6 01       	movw	r24, r12
    2db0:	b5 01       	movw	r22, r10
    2db2:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
       wait_about5ms();		// clear TRIAC and Thyristor
       R_DDR = LoPinRL | TriPinRH;
       R_PORT = TriPinRH;		// Tripin=RH+
       adc.lp1 = W5msReadADC(LowPin);
       adc.tp1 = ReadADC(TristatePin);	// voltage at the Base 
       adc.rtp = ADCconfig.U_AVCC - adc.tp1;	// voltage at Base resistor
    2db6:	20 91 35 01 	lds	r18, 0x0135
    2dba:	30 91 36 01 	lds	r19, 0x0136
    2dbe:	4a 81       	ldd	r20, Y+2	; 0x02
    2dc0:	5b 81       	ldd	r21, Y+3	; 0x03
    2dc2:	24 1b       	sub	r18, r20
    2dc4:	35 0b       	sbc	r19, r21
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
              (unsigned int)RR680MI)) / (unsigned int)adc.rtp;	
    2dc6:	40 e0       	ldi	r20, 0x00	; 0
    2dc8:	50 e0       	ldi	r21, 0x00	; 0
       R_PORT = TriPinRH;		// Tripin=RH+
       adc.lp1 = W5msReadADC(LowPin);
       adc.tp1 = ReadADC(TristatePin);	// voltage at the Base 
       adc.rtp = ADCconfig.U_AVCC - adc.tp1;	// voltage at Base resistor
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
    2dca:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    2dce:	28 87       	std	Y+8, r18	; 0x08
    2dd0:	39 87       	std	Y+9, r19	; 0x09
    2dd2:	4a 87       	std	Y+10, r20	; 0x0a
    2dd4:	5b 87       	std	Y+11, r21	; 0x0b
    2dd6:	0d c0       	rjmp	.+26     	; 0x2df2 <CheckPins+0x5d4>
              (unsigned int)RR680MI)) / (unsigned int)adc.rtp;	
 #else
       c_hfe = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
    } else {
       c_hfe = (adc.lp1 - adc.rtp) / adc.rtp;
    2dd8:	8e 81       	ldd	r24, Y+6	; 0x06
    2dda:	9f 81       	ldd	r25, Y+7	; 0x07
    2ddc:	86 1b       	sub	r24, r22
    2dde:	97 0b       	sbc	r25, r23
    2de0:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__udivmodhi4>
    2de4:	cb 01       	movw	r24, r22
    2de6:	a0 e0       	ldi	r26, 0x00	; 0
    2de8:	b0 e0       	ldi	r27, 0x00	; 0
    2dea:	88 87       	std	Y+8, r24	; 0x08
    2dec:	99 87       	std	Y+9, r25	; 0x09
    2dee:	aa 87       	std	Y+10, r26	; 0x0a
    2df0:	bb 87       	std	Y+11, r27	; 0x0b
    }
#endif
    //Tristate (can be Base) to VCC, Test if NPN
    ADC_DDR = LoADCm;		//Low-Pin to output 0V
    2df2:	87 b8       	out	0x07, r8	; 7
    ADC_PORT = TXD_VAL;			//switch Low-Pin to GND
    2df4:	88 e0       	ldi	r24, 0x08	; 8
    2df6:	88 b9       	out	0x08, r24	; 8
    R_DDR = TriPinRL | HiPinRL;		//RL port for High-Pin and Tristate-Pin to output
    2df8:	24 b8       	out	0x04, r2	; 4
#ifdef SHOW_ICE
    R_PORT =  HiPinRL;	//RL port for High-Pin and Tristate-Pin to GND
    adc.vCEs = ADCconfig.U_AVCC - W5msReadADC(HighPin); // measure voltage a High-Pin, Base low
#endif
    R_PORT = TriPinRL | HiPinRL;	//RL port for High-Pin and Tristate-Pin to Vcc
    2dfa:	25 b8       	out	0x05, r2	; 5
    adc.hp1 = W5msReadADC(HighPin);	//measure voltage at High-Pin  (Collector)
    2dfc:	81 2f       	mov	r24, r17
    2dfe:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
#ifdef WITH_THYRISTOR_GATE_V
    adc.tp2 = ReadADC(TristatePin);	//voltage of gate
    adc.lp2 = ReadADC(LowPin);		//voltage of Cathode
#endif
    if(adc.hp1 < 1600) {
    2e02:	a6 e0       	ldi	r26, 0x06	; 6
    2e04:	80 34       	cpi	r24, 0x40	; 64
    2e06:	9a 07       	cpc	r25, r26
    2e08:	08 f0       	brcs	.+2      	; 0x2e0c <CheckPins+0x5ee>
    2e0a:	3f c1       	rjmp	.+638    	; 0x308a <CheckPins+0x86c>
       //component has current => NPN-Transistor or somthing else

       //Test auf Thyristor:
       //Gate discharge
       ChargePin10ms(TriPinRL,0);	//Tristate-Pin (Gate) across R_L 10ms to GND
    2e0c:	85 2d       	mov	r24, r5
    2e0e:	60 e0       	ldi	r22, 0x00	; 0
    2e10:	0e 94 ef 0a 	call	0x15de	; 0x15de <ChargePin10ms>
       adc.hp3 = W5msReadADC(HighPin);	//read voltage at High-Pin (probably Anode) again
    2e14:	81 2f       	mov	r24, r17
    2e16:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    2e1a:	6c 01       	movw	r12, r24
					//current should still flow, if not,
					// no Thyristor or holding current to low 
		 	
       R_PORT = 0;			//switch R_L for High-Pin (probably Anode) to GND (turn off)
    2e1c:	15 b8       	out	0x05, r1	; 5
       wait_about5ms();
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
       R_PORT = HiPinRL;		//switch R_L for High-Pin (probably Anode) again to VCC
    2e26:	f5 b8       	out	0x05, r15	; 5
       adc.hp2 = W5msReadADC(HighPin);	//measure voltage at the High-Pin (probably Anode) again
    2e28:	81 2f       	mov	r24, r17
    2e2a:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
       if((adc.hp3 < 1600) && (adc.hp2 > 4400)) {
    2e2e:	b0 e4       	ldi	r27, 0x40	; 64
    2e30:	cb 16       	cp	r12, r27
    2e32:	b6 e0       	ldi	r27, 0x06	; 6
    2e34:	db 06       	cpc	r13, r27
    2e36:	08 f0       	brcs	.+2      	; 0x2e3a <CheckPins+0x61c>
    2e38:	41 c0       	rjmp	.+130    	; 0x2ebc <CheckPins+0x69e>
    2e3a:	e1 e1       	ldi	r30, 0x11	; 17
    2e3c:	81 33       	cpi	r24, 0x31	; 49
    2e3e:	9e 07       	cpc	r25, r30
    2e40:	e8 f1       	brcs	.+122    	; 0x2ebc <CheckPins+0x69e>
          //if the holding current was switched off the thyristor must be switched off too. 
          //if Thyristor was still swiched on, if gate was switched off => Thyristor
          PartFound = PART_THYRISTOR;
    2e42:	85 e0       	ldi	r24, 0x05	; 5
    2e44:	80 93 07 01 	sts	0x0107, r24
#ifdef WITH_THYRISTOR_GATE_V
          ntrans.uBE = adc.tp2 - adc.lp2;	// Gate - Cathode Voltage 
          ntrans.gthvoltage = adc.hp1 - adc.lp2;	// Anode-Cathode Voltage
#endif
          //Test if Triac
          R_DDR = 0;
    2e48:	14 b8       	out	0x04, r1	; 4
          R_PORT = 0;
    2e4a:	15 b8       	out	0x05, r1	; 5
          ADC_PORT = LoADCp;	//Low-Pin fix to VCC
    2e4c:	88 b8       	out	0x08, r8	; 8
          wait_about5ms();
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
          R_DDR = HiPinRL;		//switch R_L port HighPin to output (GND)
    2e56:	f4 b8       	out	0x04, r15	; 4
          if(W5msReadADC(HighPin) > 244) {
    2e58:	81 2f       	mov	r24, r17
    2e5a:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    2e5e:	85 3f       	cpi	r24, 0xF5	; 245
    2e60:	91 05       	cpc	r25, r1
    2e62:	08 f0       	brcs	.+2      	; 0x2e66 <CheckPins+0x648>
    2e64:	1c c4       	rjmp	.+2104   	; 0x369e <CheckPins+0xe80>
             goto saveNresult;		//measure voltage at the  High-Pin (probably A2); if too high:
                                	//component has current => kein Triac
          }
          R_DDR = HiPinRL | TriPinRL;	//switch R_L port for TristatePin (Gate) to output (GND) => Triac should be triggered 
    2e66:	24 b8       	out	0x04, r2	; 4
          if(W5msReadADC(TristatePin) < 977) {
    2e68:	89 81       	ldd	r24, Y+1	; 0x01
    2e6a:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    2e6e:	f3 e0       	ldi	r31, 0x03	; 3
    2e70:	81 3d       	cpi	r24, 0xD1	; 209
    2e72:	9f 07       	cpc	r25, r31
    2e74:	08 f4       	brcc	.+2      	; 0x2e78 <CheckPins+0x65a>
    2e76:	13 c4       	rjmp	.+2086   	; 0x369e <CheckPins+0xe80>
             goto saveNresult; 		//measure voltage at the Tristate-Pin (probably Gate) ;
                              		// if to low, abort 
          }
          if(ReadADC(HighPin) < 733) {
    2e78:	81 2f       	mov	r24, r17
    2e7a:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
    2e7e:	22 e0       	ldi	r18, 0x02	; 2
    2e80:	8d 3d       	cpi	r24, 0xDD	; 221
    2e82:	92 07       	cpc	r25, r18
    2e84:	08 f4       	brcc	.+2      	; 0x2e88 <CheckPins+0x66a>
    2e86:	0b c4       	rjmp	.+2070   	; 0x369e <CheckPins+0xe80>
             goto saveNresult; 		//component has no current => no Triac => abort
          }
          R_DDR = HiPinRL;		//TristatePin (Gate) to input 
    2e88:	f4 b8       	out	0x04, r15	; 4
          if(W5msReadADC(HighPin) < 733) {
    2e8a:	81 2f       	mov	r24, r17
    2e8c:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    2e90:	32 e0       	ldi	r19, 0x02	; 2
    2e92:	8d 3d       	cpi	r24, 0xDD	; 221
    2e94:	93 07       	cpc	r25, r19
    2e96:	08 f4       	brcc	.+2      	; 0x2e9a <CheckPins+0x67c>
    2e98:	02 c4       	rjmp	.+2052   	; 0x369e <CheckPins+0xe80>
             goto saveNresult; 		//component has no current without base current => no Triac => abort
          }
          R_PORT = HiPinRL;		//switch R_L port for HighPin to VCC => switch off holding current 
    2e9a:	f5 b8       	out	0x05, r15	; 5
          wait_about5ms();
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
          R_PORT = 0;			//switch R_L port for HighPin again to GND; Triac should now switched off
    2ea4:	15 b8       	out	0x05, r1	; 5
          if(W5msReadADC(HighPin) > 244) {
    2ea6:	81 2f       	mov	r24, r17
    2ea8:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    2eac:	85 3f       	cpi	r24, 0xF5	; 245
    2eae:	91 05       	cpc	r25, r1
    2eb0:	08 f0       	brcs	.+2      	; 0x2eb4 <CheckPins+0x696>
    2eb2:	f5 c3       	rjmp	.+2026   	; 0x369e <CheckPins+0xe80>
             goto saveNresult;		//measure voltage at the High-Pin (probably A2) ;
                                	//if to high, component is not switched off => no Triac, abort
         }
         PartFound = PART_TRIAC;
    2eb4:	86 e0       	ldi	r24, 0x06	; 6
    2eb6:	80 93 07 01 	sts	0x0107, r24
    2eba:	e1 c0       	rjmp	.+450    	; 0x307e <CheckPins+0x860>
         ntrans.count++;		// mark as two N-type transistors
         goto saveNresult;
        }
      //Test if NPN Transistor or MOSFET
      // ADC_DDR = LoADCm;	//Low-Pin to output 0V
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
    2ebc:	9f 28       	or	r9, r15
    2ebe:	94 b8       	out	0x04, r9	; 4
      R_PORT = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to VCC
    2ec0:	95 b8       	out	0x05, r9	; 5
      adc.hp2 = W20msReadADC(HighPin);	//measure the voltage at the collector  
    2ec2:	81 2f       	mov	r24, r17
    2ec4:	0e 94 9d 13 	call	0x273a	; 0x273a <W20msReadADC>
    2ec8:	6c 01       	movw	r12, r24
      adc.rhp = ADCconfig.U_AVCC - adc.hp2;	// voltage at the collector resistor
    2eca:	20 91 35 01 	lds	r18, 0x0135
    2ece:	30 91 36 01 	lds	r19, 0x0136
    2ed2:	28 1b       	sub	r18, r24
    2ed4:	39 0b       	sbc	r19, r25
      adc.tp2 = ReadADC(TristatePin);	//measure the voltage at the base 
    2ed6:	89 81       	ldd	r24, Y+1	; 0x01
    2ed8:	29 8b       	std	Y+17, r18	; 0x11
    2eda:	3e 87       	std	Y+14, r19	; 0x0e
    2edc:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
    2ee0:	9d 87       	std	Y+13, r25	; 0x0d
    2ee2:	8c 87       	std	Y+12, r24	; 0x0c
      adc.rtp = ADCconfig.U_AVCC - adc.tp2;	// voltage at the base resistor
    2ee4:	a0 90 35 01 	lds	r10, 0x0135
    2ee8:	b0 90 36 01 	lds	r11, 0x0136
    2eec:	a8 1a       	sub	r10, r24
    2eee:	b9 0a       	sbc	r11, r25
      adc.lp2 = ReadADC(LowPin);
    2ef0:	80 2f       	mov	r24, r16
    2ef2:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
    2ef6:	1c 01       	movw	r2, r24

//      if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
//         PartReady = 1;	//check, if test is already done once
//      }

      if(adc.rtp > 2557) {		// Basis-voltage R_H is low enough
    2ef8:	29 89       	ldd	r18, Y+17	; 0x11
    2efa:	3e 85       	ldd	r19, Y+14	; 0x0e
    2efc:	4e ef       	ldi	r20, 0xFE	; 254
    2efe:	a4 16       	cp	r10, r20
    2f00:	49 e0       	ldi	r20, 0x09	; 9
    2f02:	b4 06       	cpc	r11, r20
    2f04:	08 f4       	brcc	.+2      	; 0x2f08 <CheckPins+0x6ea>
    2f06:	6c c0       	rjmp	.+216    	; 0x2fe0 <CheckPins+0x7c2>
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
    2f08:	83 e0       	ldi	r24, 0x03	; 3
    2f0a:	80 93 07 01 	sts	0x0107, r24
         PartMode = PART_MODE_NPN;
    2f0e:	8c e0       	ldi	r24, 0x0C	; 12
    2f10:	80 93 06 01 	sts	0x0106, r24
 #ifdef COMMON_EMITTER

         //compute current amplification factor for common Emitter
         //hFE = B = Collector current / Base current
         tmp16 = adc.rhp;
         if (tmp16 > adc.lp_otr) {
    2f14:	62 16       	cp	r6, r18
    2f16:	73 06       	cpc	r7, r19
    2f18:	10 f4       	brcc	.+4      	; 0x2f1e <CheckPins+0x700>
            tmp16 -= adc.lp_otr;
    2f1a:	26 19       	sub	r18, r6
    2f1c:	37 09       	sbc	r19, r7
         }

  #ifdef LONG_HFE
         e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
    2f1e:	69 01       	movw	r12, r18
    2f20:	ee 24       	eor	r14, r14
    2f22:	ff 24       	eor	r15, r15
    2f24:	20 91 08 01 	lds	r18, 0x0108
    2f28:	30 91 09 01 	lds	r19, 0x0109
    2f2c:	40 e0       	ldi	r20, 0x00	; 0
    2f2e:	50 e0       	ldi	r21, 0x00	; 0
    2f30:	60 e6       	ldi	r22, 0x60	; 96
    2f32:	77 eb       	ldi	r23, 0xB7	; 183
    2f34:	87 e4       	ldi	r24, 0x47	; 71
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    2f3c:	c7 01       	movw	r24, r14
    2f3e:	b6 01       	movw	r22, r12
    2f40:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.rtp;	
    2f44:	95 01       	movw	r18, r10
    2f46:	40 e0       	ldi	r20, 0x00	; 0
    2f48:	50 e0       	ldi	r21, 0x00	; 0
         if (tmp16 > adc.lp_otr) {
            tmp16 -= adc.lp_otr;
         }

  #ifdef LONG_HFE
         e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
    2f4a:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
              (unsigned int)RR680PL)) / (unsigned int)adc.rtp;	
  #else
         e_hfe = ((tmp16 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.rtp/500);
  #endif
         if ((ntrans.count == 0) || (e_hfe > ntrans.hfe)){
    2f4e:	80 91 4f 01 	lds	r24, 0x014F
    2f52:	88 23       	and	r24, r24
    2f54:	69 f0       	breq	.+26     	; 0x2f70 <CheckPins+0x752>
    2f56:	80 91 42 01 	lds	r24, 0x0142
    2f5a:	90 91 43 01 	lds	r25, 0x0143
    2f5e:	a0 91 44 01 	lds	r26, 0x0144
    2f62:	b0 91 45 01 	lds	r27, 0x0145
    2f66:	82 17       	cp	r24, r18
    2f68:	93 07       	cpc	r25, r19
    2f6a:	a4 07       	cpc	r26, r20
    2f6c:	b5 07       	cpc	r27, r21
    2f6e:	90 f4       	brcc	.+36     	; 0x2f94 <CheckPins+0x776>
            ntrans.hfe = e_hfe;
    2f70:	20 93 42 01 	sts	0x0142, r18
    2f74:	30 93 43 01 	sts	0x0143, r19
    2f78:	40 93 44 01 	sts	0x0144, r20
    2f7c:	50 93 45 01 	sts	0x0145, r21
            ntrans.uBE = adc.tp2 - adc.lp2;
    2f80:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f82:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f84:	82 19       	sub	r24, r2
    2f86:	93 09       	sbc	r25, r3
    2f88:	90 93 47 01 	sts	0x0147, r25
    2f8c:	80 93 46 01 	sts	0x0146, r24
            update_pins = 1;
    2f90:	21 e0       	ldi	r18, 0x01	; 1
    2f92:	01 c0       	rjmp	.+2      	; 0x2f96 <CheckPins+0x778>
//      }

      if(adc.rtp > 2557) {		// Basis-voltage R_H is low enough
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
         PartMode = PART_MODE_NPN;
         update_pins = 0;		// only update pins, if better hFE
    2f94:	20 e0       	ldi	r18, 0x00	; 0
 #endif
#ifdef COMMON_COLLECTOR
          //compare current amplification factor for common Collector (Emitter follower)
          // hFE = (Emitterstrom - Basisstrom) / Basisstrom
 #ifdef COMMON_EMITTER
          if (c_hfe >  ntrans.hfe)
    2f96:	80 91 42 01 	lds	r24, 0x0142
    2f9a:	90 91 43 01 	lds	r25, 0x0143
    2f9e:	a0 91 44 01 	lds	r26, 0x0144
    2fa2:	b0 91 45 01 	lds	r27, 0x0145
    2fa6:	48 85       	ldd	r20, Y+8	; 0x08
    2fa8:	59 85       	ldd	r21, Y+9	; 0x09
    2faa:	6a 85       	ldd	r22, Y+10	; 0x0a
    2fac:	7b 85       	ldd	r23, Y+11	; 0x0b
    2fae:	84 17       	cp	r24, r20
    2fb0:	95 07       	cpc	r25, r21
    2fb2:	a6 07       	cpc	r26, r22
    2fb4:	b7 07       	cpc	r27, r23
    2fb6:	08 f0       	brcs	.+2      	; 0x2fba <CheckPins+0x79c>
    2fb8:	73 c3       	rjmp	.+1766   	; 0x36a0 <CheckPins+0xe82>
 #else
          if ((ntrans.count == 0) || (c_hfe >  ntrans.hfe))
 #endif
          {
            ntrans.hfe = c_hfe;
    2fba:	40 93 42 01 	sts	0x0142, r20
    2fbe:	50 93 43 01 	sts	0x0143, r21
    2fc2:	60 93 44 01 	sts	0x0144, r22
    2fc6:	70 93 45 01 	sts	0x0145, r23
            ntrans.uBE = adc.tp1 - adc.lp1;
    2fca:	8a 81       	ldd	r24, Y+2	; 0x02
    2fcc:	9b 81       	ldd	r25, Y+3	; 0x03
    2fce:	6e 81       	ldd	r22, Y+6	; 0x06
    2fd0:	7f 81       	ldd	r23, Y+7	; 0x07
    2fd2:	86 1b       	sub	r24, r22
    2fd4:	97 0b       	sbc	r25, r23
    2fd6:	90 93 47 01 	sts	0x0147, r25
    2fda:	80 93 46 01 	sts	0x0146, r24
    2fde:	5f c3       	rjmp	.+1726   	; 0x369e <CheckPins+0xe80>
         }
#endif
         goto saveNresult;		// count the found N-Type and exit
      } 
      // Base has low current
      if((adc.lp_otr < 97) && (adc.rhp > 3400)) {
    2fe0:	71 e6       	ldi	r23, 0x61	; 97
    2fe2:	67 16       	cp	r6, r23
    2fe4:	71 04       	cpc	r7, r1
    2fe6:	08 f0       	brcs	.+2      	; 0x2fea <CheckPins+0x7cc>
    2fe8:	50 c0       	rjmp	.+160    	; 0x308a <CheckPins+0x86c>
    2fea:	8d e0       	ldi	r24, 0x0D	; 13
    2fec:	29 34       	cpi	r18, 0x49	; 73
    2fee:	38 07       	cpc	r19, r24
    2ff0:	08 f4       	brcc	.+2      	; 0x2ff4 <CheckPins+0x7d6>
    2ff2:	4b c0       	rjmp	.+150    	; 0x308a <CheckPins+0x86c>
         //if flow voltage in switched off mode low enough?
         //(since D-Mode-FET will be detected in error as E-Mode )
         PartFound = PART_FET;	//N-Kanal-MOSFET is found (Basis/Gate will Not be pulled down)
    2ff4:	84 e0       	ldi	r24, 0x04	; 4
    2ff6:	80 93 07 01 	sts	0x0107, r24
         PartMode = PART_MODE_MOS|N_CHANNEL|E_MODE;
    2ffa:	82 e0       	ldi	r24, 0x02	; 2
    2ffc:	80 93 06 01 	sts	0x0106, r24
         if (adc.hp2 > (250+adc.lp2)) {
    3000:	c1 01       	movw	r24, r2
    3002:	86 50       	subi	r24, 0x06	; 6
    3004:	9f 4f       	sbci	r25, 0xFF	; 255
    3006:	8c 15       	cp	r24, r12
    3008:	9d 05       	cpc	r25, r13
    300a:	18 f4       	brcc	.+6      	; 0x3012 <CheckPins+0x7f4>
            // Drain-Source Voltage is too high for N_E_MOS
            PartMode = PART_MODE_IGBT|N_CHANNEL|E_MODE;
    300c:	83 e0       	ldi	r24, 0x03	; 3
    300e:	80 93 06 01 	sts	0x0106, r24
         lcd_data('F');
#endif
         //Switching of Drain is monitored with digital input
         // Low level is specified up to 0.3 * VCC
         // High level is specified above 0.6 * VCC
         PinMSK = HiADCm & 7;
    3012:	97 e0       	ldi	r25, 0x07	; 7
    3014:	e9 22       	and	r14, r25
         // measure Threshold voltage of Gate
         ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
    3016:	89 81       	ldd	r24, Y+1	; 0x01
    3018:	80 64       	ori	r24, 0x40	; 64
    301a:	80 93 7c 00 	sts	0x007C, r24
         tmp16 = 1;			// round up ((1*4)/9)
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	90 e0       	ldi	r25, 0x00	; 0
         for(ii=0;ii<11;ii++) {
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	6c 01       	movw	r12, r24
            wdt_reset();
    3026:	a8 95       	wdr
            ChargePin10ms(TriPinRL,0);	// discharge Gate 10ms with RL 
    3028:	85 2d       	mov	r24, r5
    302a:	60 e0       	ldi	r22, 0x00	; 0
    302c:	29 8b       	std	Y+17, r18	; 0x11
    302e:	0e 94 ef 0a 	call	0x15de	; 0x15de <ChargePin10ms>
            R_DDR = HiPinRL | TriPinRH;	// slowly charge Gate 
    3032:	94 b8       	out	0x04, r9	; 4
            R_PORT = HiPinRL | TriPinRH;
    3034:	95 b8       	out	0x05, r9	; 5
    3036:	29 89       	ldd	r18, Y+17	; 0x11
            while ((ADC_PIN&PinMSK));	// Wait, until the MOSFET switch and Drain moved to low 
    3038:	86 b1       	in	r24, 0x06	; 6
    303a:	8e 21       	and	r24, r14
    303c:	e9 f7       	brne	.-6      	; 0x3038 <CheckPins+0x81a>
             		// 0 is detected with input voltage of 2.12V to 2.24V (tested with mega168 & mega328)
            R_DDR = HiPinRL;		// switch off current
    303e:	f4 b8       	out	0x04, r15	; 4
            ADCSRA |= (1<<ADSC);		// start ADC conversion
    3040:	80 91 7a 00 	lds	r24, 0x007A
    3044:	80 64       	ori	r24, 0x40	; 64
    3046:	80 93 7a 00 	sts	0x007A, r24
            while (ADCSRA&(1<<ADSC));	// wait until ADC finished
    304a:	80 91 7a 00 	lds	r24, 0x007A
    304e:	86 fd       	sbrc	r24, 6
    3050:	fc cf       	rjmp	.-8      	; 0x304a <CheckPins+0x82c>
            tmp16 += ADCW;		// add result of ADC
    3052:	40 91 78 00 	lds	r20, 0x0078
    3056:	50 91 79 00 	lds	r21, 0x0079
    305a:	c4 0e       	add	r12, r20
    305c:	d5 1e       	adc	r13, r21
         // High level is specified above 0.6 * VCC
         PinMSK = HiADCm & 7;
         // measure Threshold voltage of Gate
         ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
         tmp16 = 1;			// round up ((1*4)/9)
         for(ii=0;ii<11;ii++) {
    305e:	2f 5f       	subi	r18, 0xFF	; 255
    3060:	2b 30       	cpi	r18, 0x0B	; 11
    3062:	09 f7       	brne	.-62     	; 0x3026 <CheckPins+0x808>
    3064:	c6 01       	movw	r24, r12
            R_DDR = HiPinRL;		// switch off current
            ADCSRA |= (1<<ADSC);		// start ADC conversion
            while (ADCSRA&(1<<ADSC));	// wait until ADC finished
            tmp16 += ADCW;		// add result of ADC
         }
         tmp16 *= 4;	//is equal to 44 * ADCW
    3066:	88 0f       	add	r24, r24
    3068:	99 1f       	adc	r25, r25
    306a:	88 0f       	add	r24, r24
    306c:	99 1f       	adc	r25, r25
         ntrans.gthvoltage = tmp16/ 9;	//scale to mV
    306e:	69 e0       	ldi	r22, 0x09	; 9
    3070:	70 e0       	ldi	r23, 0x00	; 0
    3072:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__udivmodhi4>
    3076:	70 93 4b 01 	sts	0x014B, r23
    307a:	60 93 4a 01 	sts	0x014A, r22
         ntrans.count++;		// count FET as two to accelerate  searching
    307e:	80 91 4f 01 	lds	r24, 0x014F
    3082:	8f 5f       	subi	r24, 0xFF	; 255
    3084:	80 93 4f 01 	sts	0x014F, r24
    3088:	0a c3       	rjmp	.+1556   	; 0x369e <CheckPins+0xe80>
         goto saveNresult;
      }
   } // end component conduct => npn
   ADC_DDR = TXD_MSK;		// switch all ADC-Ports to input
    308a:	88 e0       	ldi	r24, 0x08	; 8
    308c:	87 b9       	out	0x07, r24	; 7
   ADC_PORT = TXD_VAL;		// switch all ADC-Ports to 0 (no Pull up)
    308e:	88 b9       	out	0x08, r24	; 8
//#endif
  LoPinRL = pgm_read_byte(&PinRLtab[LowPin]);		// instruction for LowPin R_L
#if FLASHEND > 0x3fff
  LoPinRH = pgm_read_byte(&PinRHtab[LowPin]);		// instruction for LowPin R_H
#else
  LoPinRH = LoPinRL + LoPinRL;				// instruction for LowPin R_H
    3090:	34 2c       	mov	r3, r4
    3092:	33 0c       	add	r3, r3
#endif
  HiPinRL = pgm_read_byte(&PinRLtab[HighPin]);		// instruction for HighPin R_L
#if FLASHEND > 0x3fff
  HiPinRH = pgm_read_byte(&PinRHtab[HighPin]);		// instruction for HighPin R_H
#else
  HiPinRH = HiPinRL + HiPinRL;				// instruction for HighPin R_H
    3094:	9f 2c       	mov	r9, r15
    3096:	99 0c       	add	r9, r9
  }
//##########################################################################################
// Search for diodes
//##########################################################################################
checkDiode:
  R_DDR = 0;			//switch off resistor current
    3098:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;
    309a:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = TXD_MSK;		// switch ADC ports to input
    309c:	88 e0       	ldi	r24, 0x08	; 8
    309e:	87 b9       	out	0x07, r24	; 7
//  if (adc.lp_otr < 977) 
  if (adc.lp_otr < 455) {
    30a0:	a7 ec       	ldi	r26, 0xC7	; 199
    30a2:	6a 16       	cp	r6, r26
    30a4:	a1 e0       	ldi	r26, 0x01	; 1
    30a6:	7a 06       	cpc	r7, r26
    30a8:	08 f4       	brcc	.+2      	; 0x30ac <CheckPins+0x88e>
    30aa:	ac c0       	rjmp	.+344    	; 0x3204 <CheckPins+0x9e6>
#endif
     goto widmes;
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
    30ac:	88 b9       	out	0x08, r24	; 8
    30ae:	48 ec       	ldi	r20, 0xC8	; 200
    30b0:	c4 2e       	mov	r12, r20
  for (ii=0;ii<200;ii++) {
     ADC_DDR = LoADCm | HiADCm; // discharge by short of Low and High side
    30b2:	a8 2c       	mov	r10, r8
    30b4:	ae 28       	or	r10, r14
    30b6:	a7 b8       	out	0x07, r10	; 7
     wait_about5ms();		// Low and Highpin to GND for discharge
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
     ADC_DDR = LoADCm;		// switch only Low-Pin fix to GND
    30c0:	87 b8       	out	0x07, r8	; 7
     adc.hp1 = ReadADC(HighPin); // read voltage at High-Pin
    30c2:	81 2f       	mov	r24, r17
    30c4:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
     if (adc.hp1 < (150/8)) break;
    30c8:	82 31       	cpi	r24, 0x12	; 18
    30ca:	91 05       	cpc	r25, r1
    30cc:	10 f0       	brcs	.+4      	; 0x30d2 <CheckPins+0x8b4>
    30ce:	ca 94       	dec	r12
     goto widmes;
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
  for (ii=0;ii<200;ii++) {
    30d0:	91 f7       	brne	.-28     	; 0x30b6 <CheckPins+0x898>
 #if FLASHEND > 0x1fff
  /* It is difficult to detect the protection diode of D-mode MOSFET . */
  /* We have to generate a negative gate voltage to isolate the diode. */
  /* For P-mode the resistors must reside on the VCC side. */
  /* For N-mode the resistors must be moved to the GND side. */
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
    30d2:	94 b8       	out	0x04, r9	; 4
  R_PORT = HiPinRH;
    30d4:	95 b8       	out	0x05, r9	; 5
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
    30d6:	85 2d       	mov	r24, r5
    30d8:	61 e0       	ldi	r22, 0x01	; 1
    30da:	0e 94 ef 0a 	call	0x15de	; 0x15de <ChargePin10ms>
  adc.hp2 = W5msReadADC(HighPin); 		// GND--|<--HP--R_H--VCC
    30de:	81 2f       	mov	r24, r17
    30e0:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    30e4:	3c 01       	movw	r6, r24
  // now the resistor is moved to the Low side
  R_DDR = LoPinRH;
    30e6:	34 b8       	out	0x04, r3	; 4
  R_PORT = 0;
    30e8:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = HiADCm;		// switch High-Pin fix to VCC
    30ea:	e7 b8       	out	0x07, r14	; 7
  ADC_PORT = HiADCp;
    30ec:	e8 b8       	out	0x08, r14	; 8
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
    30ee:	85 2d       	mov	r24, r5
    30f0:	60 e0       	ldi	r22, 0x00	; 0
    30f2:	0e 94 ef 0a 	call	0x15de	; 0x15de <ChargePin10ms>
  adc.hp3 = ADCconfig.U_AVCC - W5msReadADC(LowPin); // GND--R_H--LP--|<--VCC
    30f6:	40 91 35 01 	lds	r20, 0x0135
    30fa:	50 91 36 01 	lds	r21, 0x0136
    30fe:	80 2f       	mov	r24, r16
    3100:	4f 87       	std	Y+15, r20	; 0x0f
    3102:	58 8b       	std	Y+16, r21	; 0x10
    3104:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    3108:	9c 01       	movw	r18, r24
  /* check with higher current (R_L=680) */
  R_DDR = LoPinRL;
    310a:	44 b8       	out	0x04, r4	; 4
  adc.hp1 = W5msReadADC(HighPin) - ReadADC(LowPin); // GND--R_L--LP--|<--VCC
    310c:	81 2f       	mov	r24, r17
    310e:	29 8b       	std	Y+17, r18	; 0x11
    3110:	3e 87       	std	Y+14, r19	; 0x0e
    3112:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    3116:	6c 01       	movw	r12, r24
    3118:	80 2f       	mov	r24, r16
    311a:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
    311e:	c8 1a       	sub	r12, r24
    3120:	d9 0a       	sbc	r13, r25
  //  the resistor is moved back to the High side
  ADC_PORT = TXD_VAL;
    3122:	88 e0       	ldi	r24, 0x08	; 8
    3124:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;		// switch only Low-Pin fix to GND
    3126:	87 b8       	out	0x07, r8	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin output (VCC)
    3128:	f4 b8       	out	0x04, r15	; 4
  R_PORT = HiPinRL;
    312a:	f5 b8       	out	0x05, r15	; 5
  ChargePin10ms(TriPinRL,1);	//discharge for P-Kanal-MOSFET gate
    312c:	85 2d       	mov	r24, r5
    312e:	61 e0       	ldi	r22, 0x01	; 1
    3130:	0e 94 ef 0a 	call	0x15de	; 0x15de <ChargePin10ms>
  adc.lp_otr = W5msReadADC(HighPin) - ReadADC(LowPin); // GND--|<--HP--R_L--VCC
    3134:	81 2f       	mov	r24, r17
    3136:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    313a:	5c 01       	movw	r10, r24
    313c:	80 2f       	mov	r24, r16
    313e:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
    3142:	a8 1a       	sub	r10, r24
    3144:	b9 0a       	sbc	r11, r25
  if(adc.lp_otr > adc.hp1) {
    3146:	29 89       	ldd	r18, Y+17	; 0x11
    3148:	3e 85       	ldd	r19, Y+14	; 0x0e
    314a:	4f 85       	ldd	r20, Y+15	; 0x0f
    314c:	58 89       	ldd	r21, Y+16	; 0x10
    314e:	ca 14       	cp	r12, r10
    3150:	db 04       	cpc	r13, r11
    3152:	38 f4       	brcc	.+14     	; 0x3162 <CheckPins+0x944>
      adc.hp1 = adc.lp_otr;	//the higher value wins
      adc.hp3 = adc.hp2;
      R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
    3154:	94 b8       	out	0x04, r9	; 4
      R_PORT = HiPinRH;
    3156:	95 b8       	out	0x05, r9	; 5
      adc.hp2 = W5msReadADC(HighPin); 		// GND--|<--HP--R_H--VCC
    3158:	81 2f       	mov	r24, r17
    315a:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    315e:	65 01       	movw	r12, r10
    3160:	16 c0       	rjmp	.+44     	; 0x318e <CheckPins+0x970>
  R_DDR = LoPinRH;
  R_PORT = 0;
  ADC_DDR = HiADCm;		// switch High-Pin fix to VCC
  ADC_PORT = HiADCp;
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
  adc.hp3 = ADCconfig.U_AVCC - W5msReadADC(LowPin); // GND--R_H--LP--|<--VCC
    3162:	3a 01       	movw	r6, r20
    3164:	62 1a       	sub	r6, r18
    3166:	73 0a       	sbc	r7, r19
      adc.hp3 = adc.hp2;
      R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
      R_PORT = HiPinRH;
      adc.hp2 = W5msReadADC(HighPin); 		// GND--|<--HP--R_H--VCC
  } else {
      R_DDR = LoPinRH;
    3168:	34 b8       	out	0x04, r3	; 4
      R_PORT = 0;
    316a:	15 b8       	out	0x05, r1	; 5
      ADC_DDR = HiADCm;		// switch High-Pin fix to VCC
    316c:	e7 b8       	out	0x07, r14	; 7
      ADC_PORT = HiADCp;
    316e:	e8 b8       	out	0x08, r14	; 8
      ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
    3170:	85 2d       	mov	r24, r5
    3172:	60 e0       	ldi	r22, 0x00	; 0
    3174:	0e 94 ef 0a 	call	0x15de	; 0x15de <ChargePin10ms>
      adc.hp2 = ADCconfig.U_AVCC - W5msReadADC(LowPin); // GND--R_H--LP--|<--VCC
    3178:	a0 90 35 01 	lds	r10, 0x0135
    317c:	b0 90 36 01 	lds	r11, 0x0136
    3180:	80 2f       	mov	r24, r16
    3182:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    3186:	f5 01       	movw	r30, r10
    3188:	e8 1b       	sub	r30, r24
    318a:	f9 0b       	sbc	r31, r25
    318c:	cf 01       	movw	r24, r30
#endif
  volt_dif = adc.hp3/8;
  if (volt_dif > 200) volt_dif = 200;

//  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp2 < adc.hp1) && (adc.hp1 > (adc.hp3+volt_dif)) && (adc.hp3 > adc.hp1/16)) {
    318e:	96 01       	movw	r18, r12
    3190:	27 59       	subi	r18, 0x97	; 151
    3192:	30 40       	sbci	r19, 0x00	; 0
    3194:	f1 e1       	ldi	r31, 0x11	; 17
    3196:	29 38       	cpi	r18, 0x89	; 137
    3198:	3f 07       	cpc	r19, r31
    319a:	a0 f5       	brcc	.+104    	; 0x3204 <CheckPins+0x9e6>
    319c:	8c 15       	cp	r24, r12
    319e:	9d 05       	cpc	r25, r13
    31a0:	88 f5       	brcc	.+98     	; 0x3204 <CheckPins+0x9e6>
  lcd_data('L');
  DisplayValue(adc.hp1,-3,' ',2);
  lcd_data('H');
  DisplayValue(adc.hp2,-3,' ',2);
#endif
  volt_dif = adc.hp3/8;
    31a2:	c3 01       	movw	r24, r6
    31a4:	33 e0       	ldi	r19, 0x03	; 3
    31a6:	96 95       	lsr	r25
    31a8:	87 95       	ror	r24
    31aa:	3a 95       	dec	r19
    31ac:	e1 f7       	brne	.-8      	; 0x31a6 <CheckPins+0x988>
  if (volt_dif > 200) volt_dif = 200;

//  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp2 < adc.hp1) && (adc.hp1 > (adc.hp3+volt_dif)) && (adc.hp3 > adc.hp1/16)) {
    31ae:	89 3c       	cpi	r24, 0xC9	; 201
    31b0:	91 05       	cpc	r25, r1
    31b2:	10 f0       	brcs	.+4      	; 0x31b8 <CheckPins+0x99a>
    31b4:	88 ec       	ldi	r24, 0xC8	; 200
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	86 0d       	add	r24, r6
    31ba:	97 1d       	adc	r25, r7
    31bc:	8c 15       	cp	r24, r12
    31be:	9d 05       	cpc	r25, r13
    31c0:	08 f5       	brcc	.+66     	; 0x3204 <CheckPins+0x9e6>
    31c2:	c6 01       	movw	r24, r12
    31c4:	24 e0       	ldi	r18, 0x04	; 4
    31c6:	96 95       	lsr	r25
    31c8:	87 95       	ror	r24
    31ca:	2a 95       	dec	r18
    31cc:	e1 f7       	brne	.-8      	; 0x31c6 <CheckPins+0x9a8>
    31ce:	86 15       	cp	r24, r6
    31d0:	97 05       	cpc	r25, r7
    31d2:	c0 f4       	brcc	.+48     	; 0x3204 <CheckPins+0x9e6>
     //voltage is above 0,15V and below 4,64V => Ok
     // hp2 >= hp1 is only possible with capacitor, not with a diode, hp2 is measured with 470k
//     if((PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
     if(PartFound < PART_DIODE) {
    31d4:	80 91 07 01 	lds	r24, 0x0107
    31d8:	82 30       	cpi	r24, 0x02	; 2
    31da:	18 f4       	brcc	.+6      	; 0x31e2 <CheckPins+0x9c4>
        PartFound = PART_DIODE;	//mark for diode only, if no other component is found
    31dc:	82 e0       	ldi	r24, 0x02	; 2
    31de:	80 93 07 01 	sts	0x0107, r24
				//since there is a problem with Transistors with a protection diode
#if DebugOut == 4
        lcd_data('D');
#endif
     }
     diodes[NumOfDiodes].Anode = HighPin;
    31e2:	80 91 05 01 	lds	r24, 0x0105
    31e6:	e8 2f       	mov	r30, r24
    31e8:	f0 e0       	ldi	r31, 0x00	; 0
    31ea:	ee 0f       	add	r30, r30
    31ec:	ff 1f       	adc	r31, r31
    31ee:	ee 0f       	add	r30, r30
    31f0:	ff 1f       	adc	r31, r31
    31f2:	e0 58       	subi	r30, 0x80	; 128
    31f4:	fe 4f       	sbci	r31, 0xFE	; 254
    31f6:	10 83       	st	Z, r17
     diodes[NumOfDiodes].Cathode = LowPin;
    31f8:	01 83       	std	Z+1, r16	; 0x01
     diodes[NumOfDiodes].Voltage = adc.hp1;	// voltage in Millivolt 
    31fa:	d3 82       	std	Z+3, r13	; 0x03
    31fc:	c2 82       	std	Z+2, r12	; 0x02
     NumOfDiodes++;
    31fe:	8f 5f       	subi	r24, 0xFF	; 255
    3200:	80 93 05 01 	sts	0x0105, r24
// Search for resistors
//##########################################################################################
widmes:
//  if ((NumOfDiodes + ptrans.count  + ntrans.count) > 0) {
//     goto clean_ports;	// no resistors are searched, if diodes are detected
  if ((ptrans.count  + ntrans.count) > 0) {
    3204:	20 91 4f 01 	lds	r18, 0x014F
    3208:	80 91 67 01 	lds	r24, 0x0167
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	82 0f       	add	r24, r18
    3210:	91 1d       	adc	r25, r1
    3212:	00 97       	sbiw	r24, 0x00	; 0
    3214:	09 f0       	breq	.+2      	; 0x3218 <CheckPins+0x9fa>
    3216:	16 c2       	rjmp	.+1068   	; 0x3644 <CheckPins+0xe26>
     goto clean_ports;	// no resistors are searched, if transistors are detected
  }
  // resistor measurement
  wdt_reset();
    3218:	a8 95       	wdr
// U_SCALE can be set to 4 for better resolution of ReadADC result
#if U_SCALE != 1
  ADCconfig.U_AVCC *= U_SCALE;	// scale to higher resolution, mV scale is not required
    321a:	80 91 35 01 	lds	r24, 0x0135
    321e:	90 91 36 01 	lds	r25, 0x0136
    3222:	88 0f       	add	r24, r24
    3224:	99 1f       	adc	r25, r25
    3226:	88 0f       	add	r24, r24
    3228:	99 1f       	adc	r25, r25
    322a:	90 93 36 01 	sts	0x0136, r25
    322e:	80 93 35 01 	sts	0x0135, r24
  ADCconfig.U_Bandgap *= U_SCALE;
    3232:	80 91 33 01 	lds	r24, 0x0133
    3236:	90 91 34 01 	lds	r25, 0x0134
    323a:	88 0f       	add	r24, r24
    323c:	99 1f       	adc	r25, r25
    323e:	88 0f       	add	r24, r24
    3240:	99 1f       	adc	r25, r25
    3242:	90 93 34 01 	sts	0x0134, r25
    3246:	80 93 33 01 	sts	0x0133, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = R_ANZ_MESS;	// switch to special number of repetitions
    324a:	8e eb       	ldi	r24, 0xBE	; 190
    324c:	80 93 31 01 	sts	0x0131, r24
#endif
  #define MAX_REPEAT (700 / (5 + R_ANZ_MESS/8))
  ADC_PORT = TXD_VAL;
    3250:	88 e0       	ldi	r24, 0x08	; 8
    3252:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
    3254:	87 b8       	out	0x07, r8	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    3256:	f4 b8       	out	0x04, r15	; 4
  R_PORT = HiPinRL;	
    3258:	f5 b8       	out	0x05, r15	; 5
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
    325a:	cc 24       	eor	r12, r12
    325c:	dd 24       	eor	r13, r13
  for (ii=1;ii<MAX_REPEAT;ii++) {
    325e:	21 e0       	ldi	r18, 0x01	; 1
    3260:	01 c0       	rjmp	.+2      	; 0x3264 <CheckPins+0xa46>
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    3262:	6c 01       	movw	r12, r24
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
    3264:	80 2f       	mov	r24, r16
    3266:	29 8b       	std	Y+17, r18	; 0x11
    3268:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    326c:	58 2e       	mov	r5, r24
    326e:	29 2e       	mov	r2, r25
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    3270:	81 2f       	mov	r24, r17
    3272:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
     udiff = adc.hp1 - adc.hp2;
    3276:	ac 01       	movw	r20, r24
    3278:	4c 19       	sub	r20, r12
    327a:	5d 09       	sbc	r21, r13
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    327c:	29 89       	ldd	r18, Y+17	; 0x11
    327e:	57 ff       	sbrs	r21, 7
    3280:	03 c0       	rjmp	.+6      	; 0x3288 <CheckPins+0xa6a>
    3282:	50 95       	com	r21
    3284:	41 95       	neg	r20
    3286:	5f 4f       	sbci	r21, 0xFF	; 255
    3288:	43 30       	cpi	r20, 0x03	; 3
    328a:	51 05       	cpc	r21, r1
    328c:	7c f4       	brge	.+30     	; 0x32ac <CheckPins+0xa8e>
    328e:	ac 01       	movw	r20, r24
  adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
#endif
  if (adc.tp1 > adc.hp1) {
     adc.tp1 = adc.hp1;
  }
  R_PORT = 0;
    3290:	15 b8       	out	0x05, r1	; 5
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (GND)
    3292:	94 b8       	out	0x04, r9	; 4
  adc.hp2 = W5msReadADC(HighPin);	// read voltage, should be down
    3294:	81 2f       	mov	r24, r17
    3296:	4f 87       	std	Y+15, r20	; 0x0f
    3298:	58 8b       	std	Y+16, r21	; 0x10
    329a:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
  if (adc.hp2 > (20*U_SCALE)) {
    329e:	4f 85       	ldd	r20, Y+15	; 0x0f
    32a0:	58 89       	ldd	r21, Y+16	; 0x10
    32a2:	81 35       	cpi	r24, 0x51	; 81
    32a4:	91 05       	cpc	r25, r1
    32a6:	08 f0       	brcs	.+2      	; 0x32aa <CheckPins+0xa8c>
    32a8:	b2 c1       	rjmp	.+868    	; 0x360e <CheckPins+0xdf0>
    32aa:	05 c0       	rjmp	.+10     	; 0x32b6 <CheckPins+0xa98>
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     udiff = adc.hp1 - adc.hp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.hp2 = adc.hp1;
     wdt_reset();
    32ac:	a8 95       	wdr
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    32ae:	2f 5f       	subi	r18, 0xFF	; 255
    32b0:	29 31       	cpi	r18, 0x19	; 25
    32b2:	b9 f6       	brne	.-82     	; 0x3262 <CheckPins+0xa44>
    32b4:	ac c1       	rjmp	.+856    	; 0x360e <CheckPins+0xdf0>
     lcd_string(utoa(adc.hp2, outval, 10));
     lcd_space();
#endif
     goto testend;
  }
  R_PORT = HiPinRH;		//switch R_H for High-Pin to VCC
    32b6:	95 b8       	out	0x05, r9	; 5
  adc.hp2 = W5msReadADC(HighPin);	// voltage at resistor Rx with R_H
    32b8:	81 2f       	mov	r24, r17
    32ba:	4f 87       	std	Y+15, r20	; 0x0f
    32bc:	58 8b       	std	Y+16, r21	; 0x10
    32be:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    32c2:	4c 01       	movw	r8, r24

  ADC_DDR = HiADCm;		//switch High-Pin to output
    32c4:	e7 b8       	out	0x07, r14	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
    32c6:	e8 b8       	out	0x08, r14	; 8
  R_PORT = 0;
    32c8:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
    32ca:	44 b8       	out	0x04, r4	; 4
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
    32cc:	cc 24       	eor	r12, r12
    32ce:	dd 24       	eor	r13, r13
  for (ii=1;ii<MAX_REPEAT;ii++) {
    32d0:	21 e0       	ldi	r18, 0x01	; 1
    32d2:	4f 85       	ldd	r20, Y+15	; 0x0f
    32d4:	58 89       	ldd	r21, Y+16	; 0x10
    32d6:	3a 01       	movw	r6, r20
    32d8:	01 c0       	rjmp	.+2      	; 0x32dc <CheckPins+0xabe>
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    32da:	67 01       	movw	r12, r14
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
    32dc:	81 2f       	mov	r24, r17
    32de:	29 8b       	std	Y+17, r18	; 0x11
    32e0:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    32e4:	5c 01       	movw	r10, r24
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    32e6:	80 2f       	mov	r24, r16
    32e8:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
    32ec:	7c 01       	movw	r14, r24
     udiff = adc.lp1 - adc.lp2;
    32ee:	8c 19       	sub	r24, r12
    32f0:	9d 09       	sbc	r25, r13
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    32f2:	29 89       	ldd	r18, Y+17	; 0x11
    32f4:	97 ff       	sbrs	r25, 7
    32f6:	03 c0       	rjmp	.+6      	; 0x32fe <CheckPins+0xae0>
    32f8:	90 95       	com	r25
    32fa:	81 95       	neg	r24
    32fc:	9f 4f       	sbci	r25, 0xFF	; 255
    32fe:	83 30       	cpi	r24, 0x03	; 3
    3300:	91 05       	cpc	r25, r1
    3302:	7c f4       	brge	.+30     	; 0x3322 <CheckPins+0xb04>
    3304:	a3 01       	movw	r20, r6
  adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
#endif
  if (adc.tp2 < adc.lp1) {
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
    3306:	34 b8       	out	0x04, r3	; 4
  adc.lp2 = W5msReadADC(LowPin);
    3308:	80 2f       	mov	r24, r16
    330a:	6f 86       	std	Y+15, r6	; 0x0f
    330c:	58 8b       	std	Y+16, r21	; 0x10
    330e:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    3312:	3c 01       	movw	r6, r24
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    3314:	4f 85       	ldd	r20, Y+15	; 0x0f
    3316:	58 89       	ldd	r21, Y+16	; 0x10
    3318:	24 e4       	ldi	r18, 0x44	; 68
    331a:	40 3c       	cpi	r20, 0xC0	; 192
    331c:	52 07       	cpc	r21, r18
    331e:	30 f0       	brcs	.+12     	; 0x332c <CheckPins+0xb0e>
    3320:	0c c0       	rjmp	.+24     	; 0x333a <CheckPins+0xb1c>
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     udiff = adc.lp1 - adc.lp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.lp2 = adc.lp1;
     wdt_reset();
    3322:	a8 95       	wdr
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
  R_PORT = 0;
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    3324:	2f 5f       	subi	r18, 0xFF	; 255
    3326:	29 31       	cpi	r18, 0x19	; 25
    3328:	c1 f6       	brne	.-80     	; 0x32da <CheckPins+0xabc>
    332a:	71 c1       	rjmp	.+738    	; 0x360e <CheckPins+0xdf0>
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
  adc.lp2 = W5msReadADC(LowPin);
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    332c:	35 e8       	ldi	r19, 0x85	; 133
    332e:	83 16       	cp	r8, r19
    3330:	31 e0       	ldi	r19, 0x01	; 1
    3332:	93 06       	cpc	r9, r19
    3334:	08 f0       	brcs	.+2      	; 0x3338 <CheckPins+0xb1a>
    3336:	6b c1       	rjmp	.+726    	; 0x360e <CheckPins+0xdf0>
    3338:	06 c0       	rjmp	.+12     	; 0x3346 <CheckPins+0xb28>
     lcd_data('F');
#endif
     goto testend; 
  }
//    if((adc.hp2 + (adc.hp2 / 61)) < adc.hp1)
  if (adc.hp2 < (4972*U_SCALE)) { 
    333a:	60 eb       	ldi	r22, 0xB0	; 176
    333c:	86 16       	cp	r8, r22
    333e:	6d e4       	ldi	r22, 0x4D	; 77
    3340:	96 06       	cpc	r9, r22
    3342:	08 f0       	brcs	.+2      	; 0x3346 <CheckPins+0xb28>
    3344:	64 c1       	rjmp	.+712    	; 0x360e <CheckPins+0xdf0>
     // voltage breaks down with low test current and it is not nearly shorted  => resistor
//     if (adc.lp1 < 120)  // take measurement with R_H 
     if (adc.lp1 < (169*U_SCALE)) { // take measurement with R_H 
    3346:	74 ea       	ldi	r23, 0xA4	; 164
    3348:	e7 16       	cp	r14, r23
    334a:	72 e0       	ldi	r23, 0x02	; 2
    334c:	f7 06       	cpc	r15, r23
    334e:	08 f0       	brcs	.+2      	; 0x3352 <CheckPins+0xb34>
    3350:	72 c0       	rjmp	.+228    	; 0x3436 <CheckPins+0xc18>
        ii = 'H';
        if (adc.lp2 < (38*U_SCALE)) {
    3352:	88 e9       	ldi	r24, 0x98	; 152
    3354:	68 16       	cp	r6, r24
    3356:	71 04       	cpc	r7, r1
    3358:	08 f4       	brcc	.+2      	; 0x335c <CheckPins+0xb3e>
    335a:	59 c1       	rjmp	.+690    	; 0x360e <CheckPins+0xdf0>
           // measurement > 60MOhm to big resistance
           goto testend;
        }
        // two measurements with R_H resistors (470k) are made:
        // lirx1 (measurement at HighPin)
        lirx1 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)adc.hp2 / (ADCconfig.U_AVCC - adc.hp2);
    335c:	a0 90 35 01 	lds	r10, 0x0135
    3360:	b0 90 36 01 	lds	r11, 0x0136
    3364:	b4 01       	movw	r22, r8
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	28 e9       	ldi	r18, 0x98	; 152
    336c:	37 eb       	ldi	r19, 0xB7	; 183
    336e:	40 e0       	ldi	r20, 0x00	; 0
    3370:	50 e0       	ldi	r21, 0x00	; 0
    3372:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
    3376:	95 01       	movw	r18, r10
    3378:	28 19       	sub	r18, r8
    337a:	39 09       	sbc	r19, r9
    337c:	40 e0       	ldi	r20, 0x00	; 0
    337e:	50 e0       	ldi	r21, 0x00	; 0
    3380:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    3384:	69 01       	movw	r12, r18
    3386:	7a 01       	movw	r14, r20
        // lirx2 (measurement at LowPin)
        lirx2 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)(ADCconfig.U_AVCC - adc.lp2) / adc.lp2;
    3388:	a6 18       	sub	r10, r6
    338a:	b7 08       	sbc	r11, r7
    338c:	b5 01       	movw	r22, r10
    338e:	80 e0       	ldi	r24, 0x00	; 0
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	28 e9       	ldi	r18, 0x98	; 152
    3394:	37 eb       	ldi	r19, 0xB7	; 183
    3396:	40 e0       	ldi	r20, 0x00	; 0
    3398:	50 e0       	ldi	r21, 0x00	; 0
    339a:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
    339e:	93 01       	movw	r18, r6
    33a0:	40 e0       	ldi	r20, 0x00	; 0
    33a2:	50 e0       	ldi	r21, 0x00	; 0
    33a4:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
#define FAKT_LOW 2		//resolution is about twice as good
#else
#define FAKT_LOW 4		//resolution is about four times better
#endif
#ifdef AUTOSCALE_ADC
        if (adc.hp2 < U_INT_LIMIT) {
    33a8:	98 e7       	ldi	r25, 0x78	; 120
    33aa:	89 16       	cp	r8, r25
    33ac:	9f e0       	ldi	r25, 0x0F	; 15
    33ae:	99 06       	cpc	r9, r25
    33b0:	70 f4       	brcc	.+28     	; 0x33ce <CheckPins+0xbb0>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    33b2:	c7 01       	movw	r24, r14
    33b4:	b6 01       	movw	r22, r12
    33b6:	e2 e0       	ldi	r30, 0x02	; 2
    33b8:	66 0f       	add	r22, r22
    33ba:	77 1f       	adc	r23, r23
    33bc:	88 1f       	adc	r24, r24
    33be:	99 1f       	adc	r25, r25
    33c0:	ea 95       	dec	r30
    33c2:	d1 f7       	brne	.-12     	; 0x33b8 <CheckPins+0xb9a>
    33c4:	62 0f       	add	r22, r18
    33c6:	73 1f       	adc	r23, r19
    33c8:	84 1f       	adc	r24, r20
    33ca:	95 1f       	adc	r25, r21
    33cc:	12 c0       	rjmp	.+36     	; 0x33f2 <CheckPins+0xbd4>
        } else if (adc.lp2 < U_INT_LIMIT){
    33ce:	a8 e7       	ldi	r26, 0x78	; 120
    33d0:	6a 16       	cp	r6, r26
    33d2:	af e0       	ldi	r26, 0x0F	; 15
    33d4:	7a 06       	cpc	r7, r26
    33d6:	a0 f4       	brcc	.+40     	; 0x3400 <CheckPins+0xbe2>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    33d8:	ca 01       	movw	r24, r20
    33da:	b9 01       	movw	r22, r18
    33dc:	b2 e0       	ldi	r27, 0x02	; 2
    33de:	66 0f       	add	r22, r22
    33e0:	77 1f       	adc	r23, r23
    33e2:	88 1f       	adc	r24, r24
    33e4:	99 1f       	adc	r25, r25
    33e6:	ba 95       	dec	r27
    33e8:	d1 f7       	brne	.-12     	; 0x33de <CheckPins+0xbc0>
    33ea:	6c 0d       	add	r22, r12
    33ec:	7d 1d       	adc	r23, r13
    33ee:	8e 1d       	adc	r24, r14
    33f0:	9f 1d       	adc	r25, r15
    33f2:	25 e0       	ldi	r18, 0x05	; 5
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	40 e0       	ldi	r20, 0x00	; 0
    33f8:	50 e0       	ldi	r21, 0x00	; 0
    33fa:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    33fe:	08 c0       	rjmp	.+16     	; 0x3410 <CheckPins+0xbf2>
        } else 
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_H measurements
    3400:	2c 0d       	add	r18, r12
    3402:	3d 1d       	adc	r19, r13
    3404:	4e 1d       	adc	r20, r14
    3406:	5f 1d       	adc	r21, r15
    3408:	56 95       	lsr	r21
    340a:	47 95       	ror	r20
    340c:	37 95       	ror	r19
    340e:	27 95       	ror	r18
        }
        lrx1 *= 100;
    3410:	ca 01       	movw	r24, r20
    3412:	b9 01       	movw	r22, r18
    3414:	24 e6       	ldi	r18, 0x64	; 100
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	40 e0       	ldi	r20, 0x00	; 0
    341a:	50 e0       	ldi	r21, 0x00	; 0
    341c:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
    3420:	6b 01       	movw	r12, r22
    3422:	7c 01       	movw	r14, r24
        lrx1 += RH_OFFSET;			// add constant for correction of systematic error
    3424:	2c ea       	ldi	r18, 0xAC	; 172
    3426:	3d e0       	ldi	r19, 0x0D	; 13
    3428:	40 e0       	ldi	r20, 0x00	; 0
    342a:	50 e0       	ldi	r21, 0x00	; 0
    342c:	c2 0e       	add	r12, r18
    342e:	d3 1e       	adc	r13, r19
    3430:	e4 1e       	adc	r14, r20
    3432:	f5 1e       	adc	r15, r21
    3434:	78 c0       	rjmp	.+240    	; 0x3526 <CheckPins+0xd08>
    3436:	85 2d       	mov	r24, r5
    3438:	92 2d       	mov	r25, r2
    343a:	48 17       	cp	r20, r24
    343c:	59 07       	cpc	r21, r25
    343e:	08 f4       	brcc	.+2      	; 0x3442 <CheckPins+0xc24>
    3440:	ca 01       	movw	r24, r20
    3442:	67 01       	movw	r12, r14
    3444:	ea 14       	cp	r14, r10
    3446:	fb 04       	cpc	r15, r11
    3448:	08 f4       	brcc	.+2      	; 0x344c <CheckPins+0xc2e>
    344a:	65 01       	movw	r12, r10
    344c:	3c 01       	movw	r6, r24
    344e:	84 17       	cp	r24, r20
    3450:	95 07       	cpc	r25, r21
    3452:	08 f4       	brcc	.+2      	; 0x3456 <CheckPins+0xc38>
    3454:	3a 01       	movw	r6, r20
        // two measurements with R_L resistors (680) are made:
        // lirx1 (measurement at HighPin)
        if (adc.tp1 > adc.hp1) {
           adc.hp1 = adc.tp1;		//diff negativ is illegal
        }
        lirx1 =(unsigned long)RR680PL * (unsigned long)(adc.hp1 - adc.tp1) / (ADCconfig.U_AVCC - adc.hp1);
    3456:	b3 01       	movw	r22, r6
    3458:	68 1b       	sub	r22, r24
    345a:	79 0b       	sbc	r23, r25
    345c:	80 e0       	ldi	r24, 0x00	; 0
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	20 91 08 01 	lds	r18, 0x0108
    3464:	30 91 09 01 	lds	r19, 0x0109
    3468:	40 e0       	ldi	r20, 0x00	; 0
    346a:	50 e0       	ldi	r21, 0x00	; 0
    346c:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
    3470:	20 91 35 01 	lds	r18, 0x0135
    3474:	30 91 36 01 	lds	r19, 0x0136
    3478:	26 19       	sub	r18, r6
    347a:	37 09       	sbc	r19, r7
    347c:	40 e0       	ldi	r20, 0x00	; 0
    347e:	50 e0       	ldi	r21, 0x00	; 0
    3480:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    3484:	49 01       	movw	r8, r18
    3486:	5a 01       	movw	r10, r20
    3488:	26 01       	movw	r4, r12
    348a:	ec 14       	cp	r14, r12
    348c:	fd 04       	cpc	r15, r13
    348e:	08 f4       	brcc	.+2      	; 0x3492 <CheckPins+0xc74>
    3490:	27 01       	movw	r4, r14
        if (adc.tp2 < adc.lp1) {
           adc.lp1 = adc.tp2;		//diff negativ is illegal
        }
        // lirx2 (Measurement at LowPin)
        lirx2 =(unsigned long)RR680MI * (unsigned long)(adc.tp2 -adc.lp1) / adc.lp1;
    3492:	c4 18       	sub	r12, r4
    3494:	d5 08       	sbc	r13, r5
    3496:	b6 01       	movw	r22, r12
    3498:	80 e0       	ldi	r24, 0x00	; 0
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	20 91 03 01 	lds	r18, 0x0103
    34a0:	30 91 04 01 	lds	r19, 0x0104
    34a4:	40 e0       	ldi	r20, 0x00	; 0
    34a6:	50 e0       	ldi	r21, 0x00	; 0
    34a8:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
    34ac:	92 01       	movw	r18, r4
    34ae:	40 e0       	ldi	r20, 0x00	; 0
    34b0:	50 e0       	ldi	r21, 0x00	; 0
    34b2:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
//     lrx1 =(unsigned long)R_L_VAL * (unsigned long)adc.hp1 / (adc.hp3 - adc.hp1);

#ifdef AUTOSCALE_ADC
        if (adc.hp1 < U_INT_LIMIT) {
    34b6:	68 e7       	ldi	r22, 0x78	; 120
    34b8:	66 16       	cp	r6, r22
    34ba:	6f e0       	ldi	r22, 0x0F	; 15
    34bc:	76 06       	cpc	r7, r22
    34be:	70 f4       	brcc	.+28     	; 0x34dc <CheckPins+0xcbe>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    34c0:	c5 01       	movw	r24, r10
    34c2:	b4 01       	movw	r22, r8
    34c4:	f2 e0       	ldi	r31, 0x02	; 2
    34c6:	66 0f       	add	r22, r22
    34c8:	77 1f       	adc	r23, r23
    34ca:	88 1f       	adc	r24, r24
    34cc:	99 1f       	adc	r25, r25
    34ce:	fa 95       	dec	r31
    34d0:	d1 f7       	brne	.-12     	; 0x34c6 <CheckPins+0xca8>
    34d2:	62 0f       	add	r22, r18
    34d4:	73 1f       	adc	r23, r19
    34d6:	84 1f       	adc	r24, r20
    34d8:	95 1f       	adc	r25, r21
    34da:	12 c0       	rjmp	.+36     	; 0x3500 <CheckPins+0xce2>
        } else if (adc.lp1 < U_INT_LIMIT) {
    34dc:	78 e7       	ldi	r23, 0x78	; 120
    34de:	47 16       	cp	r4, r23
    34e0:	7f e0       	ldi	r23, 0x0F	; 15
    34e2:	57 06       	cpc	r5, r23
    34e4:	b0 f4       	brcc	.+44     	; 0x3512 <CheckPins+0xcf4>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    34e6:	ca 01       	movw	r24, r20
    34e8:	b9 01       	movw	r22, r18
    34ea:	e2 e0       	ldi	r30, 0x02	; 2
    34ec:	66 0f       	add	r22, r22
    34ee:	77 1f       	adc	r23, r23
    34f0:	88 1f       	adc	r24, r24
    34f2:	99 1f       	adc	r25, r25
    34f4:	ea 95       	dec	r30
    34f6:	d1 f7       	brne	.-12     	; 0x34ec <CheckPins+0xcce>
    34f8:	68 0d       	add	r22, r8
    34fa:	79 1d       	adc	r23, r9
    34fc:	8a 1d       	adc	r24, r10
    34fe:	9b 1d       	adc	r25, r11
    3500:	25 e0       	ldi	r18, 0x05	; 5
    3502:	30 e0       	ldi	r19, 0x00	; 0
    3504:	40 e0       	ldi	r20, 0x00	; 0
    3506:	50 e0       	ldi	r21, 0x00	; 0
    3508:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    350c:	69 01       	movw	r12, r18
    350e:	7a 01       	movw	r14, r20
    3510:	0a c0       	rjmp	.+20     	; 0x3526 <CheckPins+0xd08>
        } else
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_L measurements
    3512:	69 01       	movw	r12, r18
    3514:	7a 01       	movw	r14, r20
    3516:	c8 0c       	add	r12, r8
    3518:	d9 1c       	adc	r13, r9
    351a:	ea 1c       	adc	r14, r10
    351c:	fb 1c       	adc	r15, r11
    351e:	f6 94       	lsr	r15
    3520:	e7 94       	ror	r14
    3522:	d7 94       	ror	r13
    3524:	c7 94       	ror	r12
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4);
  lcd_space();
  lcd_line2();
#endif
//     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
     if(PartFound < PART_TRANSISTOR) {
    3526:	60 90 07 01 	lds	r6, 0x0107
    352a:	86 2d       	mov	r24, r6
    352c:	83 30       	cpi	r24, 0x03	; 3
    352e:	08 f0       	brcs	.+2      	; 0x3532 <CheckPins+0xd14>
    3530:	6e c0       	rjmp	.+220    	; 0x360e <CheckPins+0xdf0>
//        for (ii=0; ii<ResistorsFound; ii++) 
        if (ResistorsFound != 0) {
    3532:	80 91 68 01 	lds	r24, 0x0168
    3536:	88 23       	and	r24, r24
    3538:	09 f4       	brne	.+2      	; 0x353c <CheckPins+0xd1e>
    353a:	52 c0       	rjmp	.+164    	; 0x35e0 <CheckPins+0xdc2>
           // probably measurement with inverse polarity 
           thisR = &resis[ResistorsFound-1];
    353c:	48 2e       	mov	r4, r24
    353e:	55 24       	eor	r5, r5
    3540:	08 94       	sec
    3542:	41 08       	sbc	r4, r1
    3544:	51 08       	sbc	r5, r1
           if (thisR->rt == TristatePin) { 
    3546:	f2 01       	movw	r30, r4
    3548:	63 e0       	ldi	r22, 0x03	; 3
    354a:	ee 0f       	add	r30, r30
    354c:	ff 1f       	adc	r31, r31
    354e:	6a 95       	dec	r22
    3550:	e1 f7       	brne	.-8      	; 0x354a <CheckPins+0xd2c>
    3552:	e7 5e       	subi	r30, 0xE7	; 231
    3554:	fe 4f       	sbci	r31, 0xFE	; 254
    3556:	96 81       	ldd	r25, Z+6	; 0x06
    3558:	a9 81       	ldd	r26, Y+1	; 0x01
    355a:	9a 17       	cp	r25, r26
    355c:	d9 f5       	brne	.+118    	; 0x35d4 <CheckPins+0xdb6>
              // must be measurement with inverse polarity 
              // resolution is 0.1 Ohm, 1 Ohm = 10 !
              lirx1 = (labs((long)lrx1 - (long)thisR->rx) * 10) / (lrx1 + thisR->rx + 100);
    355e:	80 80       	ld	r8, Z
    3560:	91 80       	ldd	r9, Z+1	; 0x01
    3562:	a2 80       	ldd	r10, Z+2	; 0x02
    3564:	b3 80       	ldd	r11, Z+3	; 0x03
    3566:	c7 01       	movw	r24, r14
    3568:	b6 01       	movw	r22, r12
    356a:	68 19       	sub	r22, r8
    356c:	79 09       	sbc	r23, r9
    356e:	8a 09       	sbc	r24, r10
    3570:	9b 09       	sbc	r25, r11
    3572:	97 ff       	sbrs	r25, 7
    3574:	07 c0       	rjmp	.+14     	; 0x3584 <CheckPins+0xd66>
    3576:	90 95       	com	r25
    3578:	80 95       	com	r24
    357a:	70 95       	com	r23
    357c:	61 95       	neg	r22
    357e:	7f 4f       	sbci	r23, 0xFF	; 255
    3580:	8f 4f       	sbci	r24, 0xFF	; 255
    3582:	9f 4f       	sbci	r25, 0xFF	; 255
    3584:	2a e0       	ldi	r18, 0x0A	; 10
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	40 e0       	ldi	r20, 0x00	; 0
    358a:	50 e0       	ldi	r21, 0x00	; 0
    358c:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
    3590:	a5 01       	movw	r20, r10
    3592:	94 01       	movw	r18, r8
    3594:	2c 59       	subi	r18, 0x9C	; 156
    3596:	3f 4f       	sbci	r19, 0xFF	; 255
    3598:	4f 4f       	sbci	r20, 0xFF	; 255
    359a:	5f 4f       	sbci	r21, 0xFF	; 255
    359c:	2c 0d       	add	r18, r12
    359e:	3d 1d       	adc	r19, r13
    35a0:	4e 1d       	adc	r20, r14
    35a2:	5f 1d       	adc	r21, r15
    35a4:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
              if (lirx1  > 0) {
    35a8:	21 15       	cp	r18, r1
    35aa:	31 05       	cpc	r19, r1
    35ac:	41 05       	cpc	r20, r1
    35ae:	51 05       	cpc	r21, r1
    35b0:	71 f5       	brne	.+92     	; 0x360e <CheckPins+0xdf0>
#endif
//                 ResistorsFound--;		// this one isn't a resistor
//                 goto testend; // <10% mismatch
              } else {
                 // resistor has the same value in both directions
                 if (PartFound < PART_DIODE) {
    35b2:	b6 2d       	mov	r27, r6
    35b4:	b2 30       	cpi	r27, 0x02	; 2
    35b6:	19 f0       	breq	.+6      	; 0x35be <CheckPins+0xda0>
                    PartFound = PART_RESISTOR;	// only mark as resistor, if no other part found
    35b8:	81 e0       	ldi	r24, 0x01	; 1
    35ba:	80 93 07 01 	sts	0x0107, r24
                 }
                 thisR->checked = 1;		// mark as checked in both direction
    35be:	f2 01       	movw	r30, r4
    35c0:	53 e0       	ldi	r21, 0x03	; 3
    35c2:	ee 0f       	add	r30, r30
    35c4:	ff 1f       	adc	r31, r31
    35c6:	5a 95       	dec	r21
    35c8:	e1 f7       	brne	.-8      	; 0x35c2 <CheckPins+0xda4>
    35ca:	e7 5e       	subi	r30, 0xE7	; 231
    35cc:	fe 4f       	sbci	r31, 0xFE	; 254
    35ce:	81 e0       	ldi	r24, 0x01	; 1
    35d0:	87 83       	std	Z+7, r24	; 0x07
    35d2:	1d c0       	rjmp	.+58     	; 0x360e <CheckPins+0xdf0>
              }
              goto testend;
           } // end  thisR->rt == TristatePin
           // must be a new one with other pins
           if (thisR->checked == 0) {
    35d4:	97 81       	ldd	r25, Z+7	; 0x07
    35d6:	99 23       	and	r25, r25
    35d8:	19 f4       	brne	.+6      	; 0x35e0 <CheckPins+0xdc2>
              // the last resistor has not the same value in both directions
              ResistorsFound--;	//overwrite with new one
    35da:	81 50       	subi	r24, 0x01	; 1
    35dc:	80 93 68 01 	sts	0x0168, r24
           }
        }
        // no same resistor with the same Tristate-Pin found, new one
        thisR = &resis[ResistorsFound];		// pointer to a free resistor structure
    35e0:	80 91 68 01 	lds	r24, 0x0168
    35e4:	e8 2f       	mov	r30, r24
    35e6:	f0 e0       	ldi	r31, 0x00	; 0
        thisR->rx = lrx1;		// save resistor value
    35e8:	43 e0       	ldi	r20, 0x03	; 3
    35ea:	ee 0f       	add	r30, r30
    35ec:	ff 1f       	adc	r31, r31
    35ee:	4a 95       	dec	r20
    35f0:	e1 f7       	brne	.-8      	; 0x35ea <CheckPins+0xdcc>
    35f2:	e7 5e       	subi	r30, 0xE7	; 231
    35f4:	fe 4f       	sbci	r31, 0xFE	; 254
    35f6:	c0 82       	st	Z, r12
    35f8:	d1 82       	std	Z+1, r13	; 0x01
    35fa:	e2 82       	std	Z+2, r14	; 0x02
    35fc:	f3 82       	std	Z+3, r15	; 0x03
#if FLASHEND > 0x1fff
//        thisR->lx = 0;			// no inductance
#endif
        thisR->ra = LowPin;		// save Pin numbers
    35fe:	04 83       	std	Z+4, r16	; 0x04
        thisR->rb = HighPin;
    3600:	15 83       	std	Z+5, r17	; 0x05
        thisR->rt = TristatePin;	// Tristate is saved for easier search of inverse measurement
    3602:	29 81       	ldd	r18, Y+1	; 0x01
    3604:	26 83       	std	Z+6, r18	; 0x06
        thisR->checked = 0;		// only one direction 
    3606:	17 82       	std	Z+7, r1	; 0x07
        ResistorsFound++;			// 1 more resistor found
    3608:	8f 5f       	subi	r24, 0xFF	; 255
    360a:	80 93 68 01 	sts	0x0168, r24
#endif
     }
  }
  testend:			// end of resistor measurement
#if U_SCALE != 1
  ADCconfig.U_AVCC /= U_SCALE;		// scale back to mV resolution
    360e:	80 91 35 01 	lds	r24, 0x0135
    3612:	90 91 36 01 	lds	r25, 0x0136
    3616:	96 95       	lsr	r25
    3618:	87 95       	ror	r24
    361a:	96 95       	lsr	r25
    361c:	87 95       	ror	r24
    361e:	90 93 36 01 	sts	0x0136, r25
    3622:	80 93 35 01 	sts	0x0135, r24
  ADCconfig.U_Bandgap /= U_SCALE;
    3626:	80 91 33 01 	lds	r24, 0x0133
    362a:	90 91 34 01 	lds	r25, 0x0134
    362e:	96 95       	lsr	r25
    3630:	87 95       	ror	r24
    3632:	96 95       	lsr	r25
    3634:	87 95       	ror	r24
    3636:	90 93 34 01 	sts	0x0134, r25
    363a:	80 93 33 01 	sts	0x0133, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = ANZ_MESS;		// switch back to standard number of repetition
    363e:	89 e1       	ldi	r24, 0x19	; 25
    3640:	80 93 31 01 	sts	0x0131, r24
#ifdef DebugOut
#if DebugOut < 10
  wait_for_key_5s_line2();
#endif
#endif
  ADC_DDR = TXD_MSK;		// all ADC-Pins Input
    3644:	88 e0       	ldi	r24, 0x08	; 8
    3646:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// all ADC outputs to Ground, keine Pull up
    3648:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// all resistor-outputs to Input
    364a:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// all resistor-outputs to Ground, no Pull up
    364c:	15 b8       	out	0x05, r1	; 5
    ntrans.c = HighPin;
    ntrans.e = LowPin;
 }
 goto clean_ports;

} // end CheckPins()
    364e:	61 96       	adiw	r28, 0x11	; 17
    3650:	0f b6       	in	r0, 0x3f	; 63
    3652:	f8 94       	cli
    3654:	de bf       	out	0x3e, r29	; 62
    3656:	0f be       	out	0x3f, r0	; 63
    3658:	cd bf       	out	0x3d, r28	; 61
    365a:	cf 91       	pop	r28
    365c:	df 91       	pop	r29
    365e:	1f 91       	pop	r17
    3660:	0f 91       	pop	r16
    3662:	ff 90       	pop	r15
    3664:	ef 90       	pop	r14
    3666:	df 90       	pop	r13
    3668:	cf 90       	pop	r12
    366a:	bf 90       	pop	r11
    366c:	af 90       	pop	r10
    366e:	9f 90       	pop	r9
    3670:	8f 90       	pop	r8
    3672:	7f 90       	pop	r7
    3674:	6f 90       	pop	r6
    3676:	5f 90       	pop	r5
    3678:	4f 90       	pop	r4
    367a:	3f 90       	pop	r3
    367c:	2f 90       	pop	r2
    367e:	08 95       	ret
//---------------------------------------------------------------------------
savePresult:
#if DebugOut == 5
 lcd_data('P');
#endif
 ptrans.count++;
    3680:	80 91 67 01 	lds	r24, 0x0167
    3684:	8f 5f       	subi	r24, 0xFF	; 255
    3686:	80 93 67 01 	sts	0x0167, r24
 if (update_pins != 0) {
    368a:	22 23       	and	r18, r18
    368c:	d9 f2       	breq	.-74     	; 0x3644 <CheckPins+0xe26>
    ptrans.b = TristatePin;	// save Pin-constellation
    368e:	39 81       	ldd	r19, Y+1	; 0x01
    3690:	30 93 64 01 	sts	0x0164, r19
    ptrans.c = LowPin;
    3694:	00 93 65 01 	sts	0x0165, r16
    ptrans.e = HighPin;
    3698:	10 93 66 01 	sts	0x0166, r17
    369c:	d3 cf       	rjmp	.-90     	; 0x3644 <CheckPins+0xe26>
#if DebugOut == 5
  lcd_line2();
  lcd_clear_line();
  lcd_line2();
#endif
  update_pins = 1;			// if a part is found, always update the pins
    369e:	21 e0       	ldi	r18, 0x01	; 1
//---------------------------------------------------------------------------
saveNresult:
#if DebugOut == 5
 lcd_data('N');
#endif
 ntrans.count++;
    36a0:	80 91 4f 01 	lds	r24, 0x014F
    36a4:	8f 5f       	subi	r24, 0xFF	; 255
    36a6:	80 93 4f 01 	sts	0x014F, r24
 if (update_pins != 0) {
    36aa:	22 23       	and	r18, r18
    36ac:	59 f2       	breq	.-106    	; 0x3644 <CheckPins+0xe26>
    ntrans.b = TristatePin;	// save Pin-constellation
    36ae:	49 81       	ldd	r20, Y+1	; 0x01
    36b0:	40 93 4c 01 	sts	0x014C, r20
    ntrans.c = HighPin;
    36b4:	10 93 4d 01 	sts	0x014D, r17
    ntrans.e = LowPin;
    36b8:	00 93 4e 01 	sts	0x014E, r16
    36bc:	c3 cf       	rjmp	.-122    	; 0x3644 <CheckPins+0xe26>

000036be <GetESR>:
    36be:	2f 92       	push	r2
    36c0:	3f 92       	push	r3
    36c2:	4f 92       	push	r4
    36c4:	5f 92       	push	r5
    36c6:	6f 92       	push	r6
    36c8:	7f 92       	push	r7
    36ca:	8f 92       	push	r8
    36cc:	9f 92       	push	r9
    36ce:	af 92       	push	r10
    36d0:	bf 92       	push	r11
    36d2:	cf 92       	push	r12
    36d4:	df 92       	push	r13
    36d6:	ef 92       	push	r14
    36d8:	ff 92       	push	r15
    36da:	0f 93       	push	r16
    36dc:	1f 93       	push	r17
    36de:	df 93       	push	r29
    36e0:	cf 93       	push	r28
    36e2:	cd b7       	in	r28, 0x3d	; 61
    36e4:	de b7       	in	r29, 0x3e	; 62
    36e6:	6e 97       	sbiw	r28, 0x1e	; 30
    36e8:	0f b6       	in	r0, 0x3f	; 63
    36ea:	f8 94       	cli
    36ec:	de bf       	out	0x3e, r29	; 62
    36ee:	0f be       	out	0x3f, r0	; 63
    36f0:	cd bf       	out	0x3d, r28	; 61
    36f2:	66 2e       	mov	r6, r22
    36f4:	b8 2e       	mov	r11, r24
    36f6:	86 0f       	add	r24, r22
    36f8:	89 83       	std	Y+1, r24	; 0x01
    36fa:	20 91 07 01 	lds	r18, 0x0107
    36fe:	27 30       	cpi	r18, 0x07	; 7
    3700:	19 f5       	brne	.+70     	; 0x3748 <ad_35e4>
    3702:	20 91 6e 01 	lds	r18, 0x016E
    3706:	30 91 6f 01 	lds	r19, 0x016F
    370a:	40 91 70 01 	lds	r20, 0x0170
    370e:	50 91 71 01 	lds	r21, 0x0171
    3712:	10 91 7d 01 	lds	r17, 0x017D
    3716:	09 c0       	rjmp	.+18     	; 0x372a <ad_35ba>

00003718 <ad_35ac>:
    3718:	ca 01       	movw	r24, r20
    371a:	b9 01       	movw	r22, r18
    371c:	2a e0       	ldi	r18, 0x0A	; 10
    371e:	31 2d       	mov	r19, r1
    3720:	41 2d       	mov	r20, r1
    3722:	51 2d       	mov	r21, r1
    3724:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    3728:	1f 5f       	subi	r17, 0xFF	; 255

0000372a <ad_35ba>:
    372a:	17 3f       	cpi	r17, 0xF7	; 247
    372c:	ac f3       	brlt	.-22     	; 0x3718 <ad_35ac>
    372e:	2c 8b       	std	Y+20, r18	; 0x14
    3730:	3d 8b       	std	Y+21, r19	; 0x15
    3732:	4e 8b       	std	Y+22, r20	; 0x16
    3734:	5f 8b       	std	Y+23, r21	; 0x17
    3736:	24 3b       	cpi	r18, 0xB4	; 180
    3738:	60 e0       	ldi	r22, 0x00	; 0
    373a:	36 07       	cpc	r19, r22
    373c:	41 05       	cpc	r20, r1
    373e:	51 05       	cpc	r21, r1
    3740:	18 f4       	brcc	.+6      	; 0x3748 <ad_35e4>
    3742:	8f ef       	ldi	r24, 0xFF	; 255
    3744:	9f ef       	ldi	r25, 0xFF	; 255
    3746:	78 c1       	rjmp	.+752    	; 0x3a38 <ad_exit>

00003748 <ad_35e4>:
    3748:	26 ed       	ldi	r18, 0xD6	; 214
    374a:	a2 2e       	mov	r10, r18
    374c:	02 c0       	rjmp	.+4      	; 0x3752 <ad_3604>

0000374e <ad_35fe>:
    374e:	94 ed       	ldi	r25, 0xD4	; 212
    3750:	a9 2e       	mov	r10, r25

00003752 <ad_3604>:
    3752:	ed ee       	ldi	r30, 0xED	; 237
    3754:	f0 e0       	ldi	r31, 0x00	; 0
    3756:	e6 0d       	add	r30, r6
    3758:	f1 1d       	adc	r31, r1
    375a:	85 91       	lpm	r24, Z+
    375c:	88 60       	ori	r24, 0x08	; 8
    375e:	8e 87       	std	Y+14, r24	; 0x0e
    3760:	ed ee       	ldi	r30, 0xED	; 237
    3762:	f0 e0       	ldi	r31, 0x00	; 0
    3764:	eb 0d       	add	r30, r11
    3766:	f1 1d       	adc	r31, r1
    3768:	85 91       	lpm	r24, Z+
    376a:	88 60       	ori	r24, 0x08	; 8
    376c:	8f 87       	std	Y+15, r24	; 0x0f
    376e:	ea ee       	ldi	r30, 0xEA	; 234
    3770:	f0 e0       	ldi	r31, 0x00	; 0
    3772:	e6 0d       	add	r30, r6
    3774:	f1 1d       	adc	r31, r1
    3776:	75 90       	lpm	r7, Z+
    3778:	ea ee       	ldi	r30, 0xEA	; 234
    377a:	f0 e0       	ldi	r31, 0x00	; 0
    377c:	eb 0d       	add	r30, r11
    377e:	f1 1d       	adc	r31, r1
    3780:	c5 90       	lpm	r12, Z+
    3782:	90 ec       	ldi	r25, 0xC0	; 192
    3784:	69 2a       	or	r6, r25
    3786:	b9 2a       	or	r11, r25
    3788:	81 e0       	ldi	r24, 0x01	; 1
    378a:	e8 2e       	mov	r14, r24
    378c:	f1 2c       	mov	r15, r1
    378e:	01 2d       	mov	r16, r1
    3790:	11 2d       	mov	r17, r1
    3792:	8e 83       	std	Y+6, r24	; 0x06
    3794:	1f 82       	std	Y+7, r1	; 0x07
    3796:	18 86       	std	Y+8, r1	; 0x08
    3798:	19 86       	std	Y+9, r1	; 0x09
    379a:	1a 86       	std	Y+10, r1	; 0x0a
    379c:	1b 86       	std	Y+11, r1	; 0x0b
    379e:	1c 86       	std	Y+12, r1	; 0x0c
    37a0:	1d 86       	std	Y+13, r1	; 0x0d
    37a2:	18 8e       	std	Y+24, r1	; 0x18
    37a4:	19 8e       	std	Y+25, r1	; 0x19
    37a6:	0e 94 0a 0b 	call	0x1614	; 0x1614 <EntladePins>
    37aa:	88 e0       	ldi	r24, 0x08	; 8
    37ac:	88 b9       	out	0x08, r24	; 8
    37ae:	60 92 7c 00 	sts	0x007C, r6
    37b2:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <wait100us>
    37b6:	3f 85       	ldd	r19, Y+15	; 0x0f
    37b8:	37 b9       	out	0x07, r19	; 7
    37ba:	75 b8       	out	0x05, r7	; 5
    37bc:	74 b8       	out	0x04, r7	; 4
    37be:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <wait10us>
    37c2:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <wait2us>
    37c6:	15 b8       	out	0x05, r1	; 5
    37c8:	14 b8       	out	0x04, r1	; 4
    37ca:	dd 24       	eor	r13, r13
    37cc:	b4 ed       	ldi	r27, 0xD4	; 212
    37ce:	9b 2e       	mov	r9, r27
    37d0:	a6 ed       	ldi	r26, 0xD6	; 214
    37d2:	8a 2e       	mov	r8, r26

000037d4 <ad_3692>:
    37d4:	3e 85       	ldd	r19, Y+14	; 0x0e
    37d6:	37 b9       	out	0x07, r19	; 7
    37d8:	75 b8       	out	0x05, r7	; 5
    37da:	74 b8       	out	0x04, r7	; 4
    37dc:	60 92 7c 00 	sts	0x007C, r6
    37e0:	a8 95       	wdr
    37e2:	a0 92 7a 00 	sts	0x007A, r10
    37e6:	80 91 7a 00 	lds	r24, 0x007A
    37ea:	86 fd       	sbrc	r24, 6
    37ec:	fc cf       	rjmp	.-8      	; 0x37e6 <ad_3692+0x12>
    37ee:	a0 92 7a 00 	sts	0x007A, r10
    37f2:	80 91 7a 00 	lds	r24, 0x007A
    37f6:	86 fd       	sbrc	r24, 6
    37f8:	fc cf       	rjmp	.-8      	; 0x37f2 <ad_3692+0x1e>
    37fa:	20 90 78 00 	lds	r2, 0x0078
    37fe:	30 90 79 00 	lds	r3, 0x0079
    3802:	b0 92 7c 00 	sts	0x007C, r11
    3806:	a0 92 7a 00 	sts	0x007A, r10
    380a:	80 91 7a 00 	lds	r24, 0x007A
    380e:	86 fd       	sbrc	r24, 6
    3810:	fc cf       	rjmp	.-8      	; 0x380a <ad_3692+0x36>
    3812:	80 92 7a 00 	sts	0x007A, r8
    3816:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <wait5us>
    381a:	c5 b8       	out	0x05, r12	; 5
    381c:	c4 b8       	out	0x04, r12	; 4
    381e:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <wait20us>
    3822:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <wait5us>
    3826:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <wait1us>
    382a:	8f 93       	push	r24
    382c:	8f 91       	pop	r24
    382e:	a8 95       	wdr
    3830:	a8 95       	wdr
    3832:	14 b8       	out	0x04, r1	; 4
    3834:	15 b8       	out	0x05, r1	; 5

00003836 <ad_370c>:
    3836:	80 91 7a 00 	lds	r24, 0x007A
    383a:	86 fd       	sbrc	r24, 6
    383c:	fc cf       	rjmp	.-8      	; 0x3836 <ad_370c>
    383e:	20 91 78 00 	lds	r18, 0x0078
    3842:	30 91 79 00 	lds	r19, 0x0079
    3846:	28 8b       	std	Y+16, r18	; 0x10
    3848:	39 8b       	std	Y+17, r19	; 0x11
    384a:	3f 85       	ldd	r19, Y+15	; 0x0f
    384c:	37 b9       	out	0x07, r19	; 7
    384e:	c5 b8       	out	0x05, r12	; 5
    3850:	c4 b8       	out	0x04, r12	; 4
    3852:	a8 95       	wdr
    3854:	b0 92 7c 00 	sts	0x007C, r11
    3858:	a0 92 7a 00 	sts	0x007A, r10
    385c:	80 91 7a 00 	lds	r24, 0x007A
    3860:	86 fd       	sbrc	r24, 6
    3862:	fc cf       	rjmp	.-8      	; 0x385c <ad_370c+0x26>
    3864:	a0 92 7a 00 	sts	0x007A, r10
    3868:	80 91 7a 00 	lds	r24, 0x007A
    386c:	86 fd       	sbrc	r24, 6
    386e:	fc cf       	rjmp	.-8      	; 0x3868 <ad_370c+0x32>
    3870:	60 91 78 00 	lds	r22, 0x0078
    3874:	70 91 79 00 	lds	r23, 0x0079
    3878:	60 92 7c 00 	sts	0x007C, r6
    387c:	a0 92 7a 00 	sts	0x007A, r10
    3880:	80 91 7a 00 	lds	r24, 0x007A
    3884:	86 fd       	sbrc	r24, 6
    3886:	fc cf       	rjmp	.-8      	; 0x3880 <ad_370c+0x4a>
    3888:	80 92 7a 00 	sts	0x007A, r8
    388c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <wait5us>
    3890:	75 b8       	out	0x05, r7	; 5
    3892:	74 b8       	out	0x04, r7	; 4
    3894:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <wait20us>
    3898:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <wait5us>
    389c:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <wait1us>
    38a0:	8f 93       	push	r24
    38a2:	8f 91       	pop	r24
    38a4:	a8 95       	wdr
    38a6:	a8 95       	wdr
    38a8:	14 b8       	out	0x04, r1	; 4
    38aa:	15 b8       	out	0x05, r1	; 5

000038ac <ad_37f4>:
    38ac:	80 91 7a 00 	lds	r24, 0x007A
    38b0:	86 fd       	sbrc	r24, 6
    38b2:	fc cf       	rjmp	.-8      	; 0x38ac <ad_37f4>
    38b4:	40 91 78 00 	lds	r20, 0x0078
    38b8:	50 91 79 00 	lds	r21, 0x0079
    38bc:	14 b8       	out	0x04, r1	; 4
    38be:	cb 01       	movw	r24, r22
    38c0:	82 0d       	add	r24, r2
    38c2:	93 1d       	adc	r25, r3
    38c4:	e8 0e       	add	r14, r24
    38c6:	f9 1e       	adc	r15, r25
    38c8:	01 1d       	adc	r16, r1
    38ca:	11 1d       	adc	r17, r1
    38cc:	ea 82       	std	Y+2, r14	; 0x02
    38ce:	fb 82       	std	Y+3, r15	; 0x03
    38d0:	0c 83       	std	Y+4, r16	; 0x04
    38d2:	1d 83       	std	Y+5, r17	; 0x05
    38d4:	88 89       	ldd	r24, Y+16	; 0x10
    38d6:	99 89       	ldd	r25, Y+17	; 0x11
    38d8:	84 0f       	add	r24, r20
    38da:	95 1f       	adc	r25, r21
    38dc:	2e 81       	ldd	r18, Y+6	; 0x06
    38de:	3f 81       	ldd	r19, Y+7	; 0x07
    38e0:	68 85       	ldd	r22, Y+8	; 0x08
    38e2:	79 85       	ldd	r23, Y+9	; 0x09
    38e4:	28 0f       	add	r18, r24
    38e6:	39 1f       	adc	r19, r25
    38e8:	61 1d       	adc	r22, r1
    38ea:	71 1d       	adc	r23, r1
    38ec:	2e 83       	std	Y+6, r18	; 0x06
    38ee:	3f 83       	std	Y+7, r19	; 0x07
    38f0:	68 87       	std	Y+8, r22	; 0x08
    38f2:	79 87       	std	Y+9, r23	; 0x09
    38f4:	24 e6       	ldi	r18, 0x64	; 100
    38f6:	24 17       	cp	r18, r20
    38f8:	15 06       	cpc	r1, r21
    38fa:	50 f0       	brcs	.+20     	; 0x3910 <is_ok1>
    38fc:	75 b8       	out	0x05, r7	; 5
    38fe:	74 b8       	out	0x04, r7	; 4
    3900:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <wait2us>
    3904:	14 b8       	out	0x04, r1	; 4
    3906:	15 b8       	out	0x05, r1	; 5
    3908:	88 8d       	ldd	r24, Y+24	; 0x18
    390a:	83 95       	inc	r24
    390c:	88 8f       	std	Y+24, r24	; 0x18
    390e:	07 c0       	rjmp	.+14     	; 0x391e <is_ok1b>

00003910 <is_ok1>:
    3910:	48 3e       	cpi	r20, 0xE8	; 232
    3912:	73 e0       	ldi	r23, 0x03	; 3
    3914:	57 07       	cpc	r21, r23
    3916:	18 f0       	brcs	.+6      	; 0x391e <is_ok1b>
    3918:	8a 8d       	ldd	r24, Y+26	; 0x1a
    391a:	83 95       	inc	r24
    391c:	8a 8f       	std	Y+26, r24	; 0x1a

0000391e <is_ok1b>:
    391e:	88 89       	ldd	r24, Y+16	; 0x10
    3920:	99 89       	ldd	r25, Y+17	; 0x11
    3922:	28 17       	cp	r18, r24
    3924:	19 06       	cpc	r1, r25
    3926:	b0 f0       	brcs	.+44     	; 0x3954 <is_ok2>
    3928:	3e 85       	ldd	r19, Y+14	; 0x0e
    392a:	37 b9       	out	0x07, r19	; 7
    392c:	c5 b8       	out	0x05, r12	; 5
    392e:	c4 b8       	out	0x04, r12	; 4
    3930:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <wait2us>
    3934:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <wait20us>
    3938:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <wait5us>
    393c:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <wait1us>
    3940:	8f 93       	push	r24
    3942:	8f 91       	pop	r24
    3944:	a8 95       	wdr
    3946:	a8 95       	wdr
    3948:	14 b8       	out	0x04, r1	; 4
    394a:	15 b8       	out	0x05, r1	; 5
    394c:	89 8d       	ldd	r24, Y+25	; 0x19
    394e:	83 95       	inc	r24
    3950:	89 8f       	std	Y+25, r24	; 0x19
    3952:	07 c0       	rjmp	.+14     	; 0x3962 <is_ok2b>

00003954 <is_ok2>:
    3954:	88 3e       	cpi	r24, 0xE8	; 232
    3956:	73 e0       	ldi	r23, 0x03	; 3
    3958:	97 07       	cpc	r25, r23
    395a:	18 f0       	brcs	.+6      	; 0x3962 <is_ok2b>
    395c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    395e:	83 95       	inc	r24
    3960:	8a 8f       	std	Y+26, r24	; 0x1a

00003962 <is_ok2b>:
    3962:	d3 94       	inc	r13
    3964:	5d 2d       	mov	r21, r13
    3966:	5f 3f       	cpi	r21, 0xFF	; 255
    3968:	09 f0       	breq	.+2      	; 0x396c <ad_38ac>
    396a:	34 cf       	rjmp	.-408    	; 0x37d4 <ad_3692>

0000396c <ad_38ac>:
    396c:	40 90 3d 01 	lds	r4, 0x013D
    3970:	50 90 3e 01 	lds	r5, 0x013E
    3974:	44 0c       	add	r4, r4
    3976:	55 1c       	adc	r5, r5
    3978:	92 01       	movw	r18, r4
    397a:	e4 e0       	ldi	r30, 0x04	; 4

0000397c <ad_3924>:
    397c:	24 0d       	add	r18, r4
    397e:	35 1d       	adc	r19, r5
    3980:	ea 95       	dec	r30
    3982:	e1 f7       	brne	.-8      	; 0x397c <ad_3924>
    3984:	29 01       	movw	r4, r18
    3986:	57 01       	movw	r10, r14
    3988:	68 01       	movw	r12, r16
    398a:	6e 80       	ldd	r6, Y+6	; 0x06
    398c:	7f 80       	ldd	r7, Y+7	; 0x07
    398e:	88 84       	ldd	r8, Y+8	; 0x08
    3990:	99 84       	ldd	r9, Y+9	; 0x09
    3992:	20 91 07 01 	lds	r18, 0x0107
    3996:	27 30       	cpi	r18, 0x07	; 7
    3998:	c1 f4       	brne	.+48     	; 0x39ca <no_sub>
    399a:	6c 89       	ldd	r22, Y+20	; 0x14
    399c:	7d 89       	ldd	r23, Y+21	; 0x15
    399e:	8e 89       	ldd	r24, Y+22	; 0x16
    39a0:	9f 89       	ldd	r25, Y+23	; 0x17
    39a2:	9b 01       	movw	r18, r22
    39a4:	ac 01       	movw	r20, r24
    39a6:	6d 5e       	subi	r22, 0xED	; 237
    39a8:	7f 4f       	sbci	r23, 0xFF	; 255
    39aa:	8f 4f       	sbci	r24, 0xFF	; 255
    39ac:	9f 4f       	sbci	r25, 0xFF	; 255
    39ae:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
    39b2:	9b 01       	movw	r18, r22
    39b4:	ac 01       	movw	r20, r24
    39b6:	6c e1       	ldi	r22, 0x1C	; 28
    39b8:	79 e3       	ldi	r23, 0x39	; 57
    39ba:	80 e9       	ldi	r24, 0x90	; 144
    39bc:	9a e1       	ldi	r25, 0x1A	; 26
    39be:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    39c2:	62 1a       	sub	r6, r18
    39c4:	73 0a       	sbc	r7, r19
    39c6:	84 0a       	sbc	r8, r20
    39c8:	95 0a       	sbc	r9, r21

000039ca <no_sub>:
    39ca:	a6 14       	cp	r10, r6
    39cc:	b7 04       	cpc	r11, r7
    39ce:	c8 04       	cpc	r12, r8
    39d0:	d9 04       	cpc	r13, r9
    39d2:	28 f4       	brcc	.+10     	; 0x39de <ad_396c>
    39d4:	6a 18       	sub	r6, r10
    39d6:	7b 08       	sbc	r7, r11
    39d8:	8c 08       	sbc	r8, r12
    39da:	9d 08       	sbc	r9, r13
    39dc:	03 c0       	rjmp	.+6      	; 0x39e4 <ad_3972>

000039de <ad_396c>:
    39de:	66 24       	eor	r6, r6
    39e0:	77 24       	eor	r7, r7
    39e2:	43 01       	movw	r8, r6

000039e4 <ad_3972>:
    39e4:	b2 01       	movw	r22, r4
    39e6:	80 e0       	ldi	r24, 0x00	; 0
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	93 01       	movw	r18, r6
    39ec:	a4 01       	movw	r20, r8
    39ee:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
    39f2:	95 01       	movw	r18, r10
    39f4:	a6 01       	movw	r20, r12
    39f6:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    39fa:	88 ea       	ldi	r24, 0xA8	; 168
    39fc:	91 e0       	ldi	r25, 0x01	; 1
    39fe:	79 81       	ldd	r23, Y+1	; 0x01
    3a00:	87 0f       	add	r24, r23
    3a02:	91 1d       	adc	r25, r1
    3a04:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <__eerd_byte_m168>
    3a08:	68 2e       	mov	r6, r24
    3a0a:	c9 01       	movw	r24, r18
    3a0c:	60 e1       	ldi	r22, 0x10	; 16
    3a0e:	70 e0       	ldi	r23, 0x00	; 0
    3a10:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__udivmodhi4>
    3a14:	26 0f       	add	r18, r22
    3a16:	37 1f       	adc	r19, r23
    3a18:	c9 01       	movw	r24, r18
    3a1a:	68 16       	cp	r6, r24
    3a1c:	19 06       	cpc	r1, r25
    3a1e:	18 f4       	brcc	.+6      	; 0x3a26 <esr_too_less>
    3a20:	86 19       	sub	r24, r6
    3a22:	91 09       	sbc	r25, r1
    3a24:	09 c0       	rjmp	.+18     	; 0x3a38 <ad_exit>

00003a26 <esr_too_less>:
    3a26:	8c 5e       	subi	r24, 0xEC	; 236
    3a28:	9f 4f       	sbci	r25, 0xFF	; 255
    3a2a:	86 15       	cp	r24, r6
    3a2c:	91 05       	cpc	r25, r1
    3a2e:	10 f4       	brcc	.+4      	; 0x3a34 <esr_too_less2>
    3a30:	0e 94 d6 04 	call	0x9ac	; 0x9ac <mark_as_uncalibrated>

00003a34 <esr_too_less2>:
    3a34:	81 2d       	mov	r24, r1
    3a36:	91 2d       	mov	r25, r1

00003a38 <ad_exit>:
    3a38:	6e 96       	adiw	r28, 0x1e	; 30
    3a3a:	0f b6       	in	r0, 0x3f	; 63
    3a3c:	f8 94       	cli
    3a3e:	de bf       	out	0x3e, r29	; 62
    3a40:	0f be       	out	0x3f, r0	; 63
    3a42:	cd bf       	out	0x3d, r28	; 61
    3a44:	cf 91       	pop	r28
    3a46:	df 91       	pop	r29
    3a48:	1f 91       	pop	r17
    3a4a:	0f 91       	pop	r16
    3a4c:	ff 90       	pop	r15
    3a4e:	ef 90       	pop	r14
    3a50:	df 90       	pop	r13
    3a52:	cf 90       	pop	r12
    3a54:	bf 90       	pop	r11
    3a56:	af 90       	pop	r10
    3a58:	9f 90       	pop	r9
    3a5a:	8f 90       	pop	r8
    3a5c:	7f 90       	pop	r7
    3a5e:	6f 90       	pop	r6
    3a60:	5f 90       	pop	r5
    3a62:	4f 90       	pop	r4
    3a64:	3f 90       	pop	r3
    3a66:	2f 90       	pop	r2
    3a68:	08 95       	ret

00003a6a <GetVloss>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void GetVloss() {
    3a6a:	cf 92       	push	r12
    3a6c:	df 92       	push	r13
    3a6e:	ef 92       	push	r14
    3a70:	ff 92       	push	r15
    3a72:	0f 93       	push	r16
    3a74:	1f 93       	push	r17
    3a76:	cf 93       	push	r28
    3a78:	df 93       	push	r29
  } lval;
  uint8_t ii;
  uint8_t HiPinR_L;
  uint8_t LoADC;

  if (cap.v_loss > 0) return;		// Voltage loss is already known
    3a7a:	80 91 78 01 	lds	r24, 0x0178
    3a7e:	90 91 79 01 	lds	r25, 0x0179
    3a82:	00 97       	sbiw	r24, 0x00	; 0
    3a84:	09 f0       	breq	.+2      	; 0x3a88 <GetVloss+0x1e>
    3a86:	a2 c0       	rjmp	.+324    	; 0x3bcc <GetVloss+0x162>
  LoADC = pgm_read_byte(&PinADCtab[cap.ca]) | TXD_MSK;
    3a88:	e0 91 7a 01 	lds	r30, 0x017A
    3a8c:	f0 e0       	ldi	r31, 0x00	; 0
    3a8e:	e3 51       	subi	r30, 0x13	; 19
    3a90:	ff 4f       	sbci	r31, 0xFF	; 255
    3a92:	04 91       	lpm	r16, Z+
    3a94:	08 60       	ori	r16, 0x08	; 8
  HiPinR_L = pgm_read_byte(&PinRLtab[cap.cb]);	//R_L mask for HighPin R_L load
    3a96:	e0 91 7b 01 	lds	r30, 0x017B
    3a9a:	f0 e0       	ldi	r31, 0x00	; 0
    3a9c:	e6 51       	subi	r30, 0x16	; 22
    3a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa0:	14 91       	lpm	r17, Z+

  EntladePins();			// discharge capacitor
    3aa2:	0e 94 0a 0b 	call	0x1614	; 0x1614 <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    3aa6:	88 e0       	ldi	r24, 0x08	; 8
    3aa8:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    3aaa:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    3aac:	07 b9       	out	0x07, r16	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    3aae:	14 b9       	out	0x04, r17	; 4
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
    3ab0:	80 91 7b 01 	lds	r24, 0x017B
    3ab4:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
    3ab8:	ec 01       	movw	r28, r24
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
    3aba:	00 91 7d 01 	lds	r16, 0x017D
    3abe:	08 3f       	cpi	r16, 0xF8	; 248
    3ac0:	0c f0       	brlt	.+2      	; 0x3ac4 <GetVloss+0x5a>
    3ac2:	84 c0       	rjmp	.+264    	; 0x3bcc <GetVloss+0x162>
  lval.dw = cap.cval_max;
    3ac4:	20 91 6e 01 	lds	r18, 0x016E
    3ac8:	30 91 6f 01 	lds	r19, 0x016F
    3acc:	40 91 70 01 	lds	r20, 0x0170
    3ad0:	50 91 71 01 	lds	r21, 0x0171
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    3ad4:	04 5f       	subi	r16, 0xF4	; 244
     lval.dw = (lval.dw + 5) / 10;
    3ad6:	8a e0       	ldi	r24, 0x0A	; 10
    3ad8:	c8 2e       	mov	r12, r24
    3ada:	d1 2c       	mov	r13, r1
    3adc:	e1 2c       	mov	r14, r1
    3ade:	f1 2c       	mov	r15, r1
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
  lval.dw = cap.cval_max;
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    3ae0:	0b c0       	rjmp	.+22     	; 0x3af8 <GetVloss+0x8e>
     lval.dw = (lval.dw + 5) / 10;
    3ae2:	ca 01       	movw	r24, r20
    3ae4:	b9 01       	movw	r22, r18
    3ae6:	6b 5f       	subi	r22, 0xFB	; 251
    3ae8:	7f 4f       	sbci	r23, 0xFF	; 255
    3aea:	8f 4f       	sbci	r24, 0xFF	; 255
    3aec:	9f 4f       	sbci	r25, 0xFF	; 255
    3aee:	a7 01       	movw	r20, r14
    3af0:	96 01       	movw	r18, r12
    3af2:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
  lval.dw = cap.cval_max;
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    3af6:	0f 5f       	subi	r16, 0xFF	; 255
    3af8:	04 30       	cpi	r16, 0x04	; 4
    3afa:	98 f3       	brcs	.-26     	; 0x3ae2 <GetVloss+0x78>
    3afc:	79 01       	movw	r14, r18
     lval.dw = (lval.dw + 5) / 10;
  }
//  if ((lval.dw == 0) || (lval.dw > 500)) {
  if ((lval.dw == 0) || (lval.dw > 5000)) {
    3afe:	21 50       	subi	r18, 0x01	; 1
    3b00:	30 40       	sbci	r19, 0x00	; 0
    3b02:	40 40       	sbci	r20, 0x00	; 0
    3b04:	50 40       	sbci	r21, 0x00	; 0
    3b06:	28 38       	cpi	r18, 0x88	; 136
    3b08:	83 e1       	ldi	r24, 0x13	; 19
    3b0a:	38 07       	cpc	r19, r24
    3b0c:	80 e0       	ldi	r24, 0x00	; 0
    3b0e:	48 07       	cpc	r20, r24
    3b10:	80 e0       	ldi	r24, 0x00	; 0
    3b12:	58 07       	cpc	r21, r24
    3b14:	08 f0       	brcs	.+2      	; 0x3b18 <GetVloss+0xae>
    3b16:	5a c0       	rjmp	.+180    	; 0x3bcc <GetVloss+0x162>
     /* capacity more than 50uF, Voltage loss is already measured  */
     return;
  }
  R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    3b18:	15 b9       	out	0x05, r17	; 5
  R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    3b1a:	14 b9       	out	0x04, r17	; 4
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    3b1c:	00 e0       	ldi	r16, 0x00	; 0
    3b1e:	10 e0       	ldi	r17, 0x00	; 0
    3b20:	04 c0       	rjmp	.+8      	; 0x3b2a <GetVloss+0xc0>
//     wait50us();			// wait exactly 50us
     wait5us();			// wait exactly 5us
    3b22:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <wait5us>
     /* capacity more than 50uF, Voltage loss is already measured  */
     return;
  }
  R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
  R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    3b26:	0e 5f       	subi	r16, 0xFE	; 254
    3b28:	1f 4f       	sbci	r17, 0xFF	; 255
    3b2a:	67 01       	movw	r12, r14
    3b2c:	0e 15       	cp	r16, r14
    3b2e:	1f 05       	cpc	r17, r15
    3b30:	c0 f3       	brcs	.-16     	; 0x3b22 <GetVloss+0xb8>
//     wait50us();			// wait exactly 50us
     wait5us();			// wait exactly 5us
  }
  R_DDR = 0;				// switch back to input
    3b32:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// no Pull up
    3b34:	15 b8       	out	0x05, r1	; 5
 // wait10us();			//wait a little time
  wdt_reset();
    3b36:	a8 95       	wdr
  // read voltage without current
  ADCconfig.Samples = 5;		// set ADC to only 5 samples
    3b38:	85 e0       	ldi	r24, 0x05	; 5
    3b3a:	80 93 31 01 	sts	0x0131, r24
  adcv[2] = ReadADC(cap.cb);
    3b3e:	80 91 7b 01 	lds	r24, 0x017B
    3b42:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
  if (adcv[2] > adcv[0]) {
    3b46:	c8 17       	cp	r28, r24
    3b48:	d9 07       	cpc	r29, r25
    3b4a:	20 f4       	brcc	.+8      	; 0x3b54 <GetVloss+0xea>
     adcv[2] -= adcv[0];		//difference to beginning voltage
    3b4c:	8c 01       	movw	r16, r24
    3b4e:	0c 1b       	sub	r16, r28
    3b50:	1d 0b       	sbc	r17, r29
    3b52:	02 c0       	rjmp	.+4      	; 0x3b58 <GetVloss+0xee>
  } else {
     adcv[2] = 0;			// voltage is lower or same as beginning voltage
    3b54:	00 e0       	ldi	r16, 0x00	; 0
    3b56:	10 e0       	ldi	r17, 0x00	; 0
  }
  // wait 2x the time which was required for loading
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    3b58:	ee 24       	eor	r14, r14
    3b5a:	ff 24       	eor	r15, r15
    3b5c:	05 c0       	rjmp	.+10     	; 0x3b68 <GetVloss+0xfe>
//     wait50us();
     wait5us();
    3b5e:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <wait5us>
     adcv[2] -= adcv[0];		//difference to beginning voltage
  } else {
     adcv[2] = 0;			// voltage is lower or same as beginning voltage
  }
  // wait 2x the time which was required for loading
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    3b62:	08 94       	sec
    3b64:	e1 1c       	adc	r14, r1
    3b66:	f1 1c       	adc	r15, r1
    3b68:	ec 14       	cp	r14, r12
    3b6a:	fd 04       	cpc	r15, r13
    3b6c:	c0 f3       	brcs	.-16     	; 0x3b5e <GetVloss+0xf4>
//     wait50us();
     wait5us();
  }
  adcv[3] = ReadADC(cap.cb);	// read voltage again, is discharged only a little bit ?
    3b6e:	80 91 7b 01 	lds	r24, 0x017B
    3b72:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
  ADCconfig.Samples = ANZ_MESS;		// set ADC back to configured No. of samples
    3b76:	29 e1       	ldi	r18, 0x19	; 25
    3b78:	20 93 31 01 	sts	0x0131, r18
  wdt_reset();
    3b7c:	a8 95       	wdr
  if (adcv[3] > adcv[0]) {
    3b7e:	c8 17       	cp	r28, r24
    3b80:	d9 07       	cpc	r29, r25
    3b82:	18 f4       	brcc	.+6      	; 0x3b8a <GetVloss+0x120>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    3b84:	8c 1b       	sub	r24, r28
    3b86:	9d 0b       	sbc	r25, r29
    3b88:	02 c0       	rjmp	.+4      	; 0x3b8e <GetVloss+0x124>
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    3b8a:	80 e0       	ldi	r24, 0x00	; 0
    3b8c:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
    3b8e:	80 17       	cp	r24, r16
    3b90:	91 07       	cpc	r25, r17
    3b92:	a8 f4       	brcc	.+42     	; 0x3bbe <GetVloss+0x154>
     // build difference to load voltage
     adcv[1] = adcv[2] - adcv[3];	// lost voltage during load time wait
    3b94:	b8 01       	movw	r22, r16
    3b96:	68 1b       	sub	r22, r24
    3b98:	79 0b       	sbc	r23, r25
  } else {
     adcv[1] = 0;			// no lost voltage
  }
  // compute voltage drop as part from loaded voltage
  if (adcv[1] > 0) {
    3b9a:	89 f0       	breq	.+34     	; 0x3bbe <GetVloss+0x154>
     // there is any voltage drop (adcv[1]) !
     // adcv[2] is the loaded voltage.
     cap.v_loss = (unsigned long)(adcv[1] * 500UL) / adcv[2];
    3b9c:	80 e0       	ldi	r24, 0x00	; 0
    3b9e:	90 e0       	ldi	r25, 0x00	; 0
    3ba0:	24 ef       	ldi	r18, 0xF4	; 244
    3ba2:	31 e0       	ldi	r19, 0x01	; 1
    3ba4:	40 e0       	ldi	r20, 0x00	; 0
    3ba6:	50 e0       	ldi	r21, 0x00	; 0
    3ba8:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
    3bac:	98 01       	movw	r18, r16
    3bae:	40 e0       	ldi	r20, 0x00	; 0
    3bb0:	50 e0       	ldi	r21, 0x00	; 0
    3bb2:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    3bb6:	30 93 79 01 	sts	0x0179, r19
    3bba:	20 93 78 01 	sts	0x0178, r18
  lcd_line4();
  DisplayValue(lval.w[0],0,'x',4);
#endif

  // discharge capacitor again
  EntladePins();		// discharge capacitors
    3bbe:	0e 94 0a 0b 	call	0x1614	; 0x1614 <EntladePins>
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    3bc2:	88 e0       	ldi	r24, 0x08	; 8
    3bc4:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    3bc6:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    3bc8:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    3bca:	15 b8       	out	0x05, r1	; 5
#endif
  return;
 } // end GetVdrop()
    3bcc:	df 91       	pop	r29
    3bce:	cf 91       	pop	r28
    3bd0:	1f 91       	pop	r17
    3bd2:	0f 91       	pop	r16
    3bd4:	ff 90       	pop	r15
    3bd6:	ef 90       	pop	r14
    3bd8:	df 90       	pop	r13
    3bda:	cf 90       	pop	r12
    3bdc:	08 95       	ret

00003bde <Calibrate_UR>:
#include "Transistortester.h"
void Calibrate_UR(void) {
    3bde:	8f 92       	push	r8
    3be0:	9f 92       	push	r9
    3be2:	af 92       	push	r10
    3be4:	bf 92       	push	r11
    3be6:	cf 92       	push	r12
    3be8:	df 92       	push	r13
    3bea:	ef 92       	push	r14
    3bec:	ff 92       	push	r15
    3bee:	0f 93       	push	r16
    3bf0:	1f 93       	push	r17
    3bf2:	cf 93       	push	r28
    3bf4:	df 93       	push	r29
  uint16_t sum_rp;	// sum of 3 Pin voltages with 680 Ohm load
  uint16_t u680;	// 3 * (Voltage at 680 Ohm)
#endif


  ADCconfig.U_AVCC = U_VCC;     // set initial VCC Voltage
    3bf6:	88 e8       	ldi	r24, 0x88	; 136
    3bf8:	93 e1       	ldi	r25, 0x13	; 19
    3bfa:	90 93 36 01 	sts	0x0136, r25
    3bfe:	80 93 35 01 	sts	0x0135, r24
  ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    3c02:	8e eb       	ldi	r24, 0xBE	; 190
    3c04:	80 93 31 01 	sts	0x0131, r24
                                        //############################################
#if FLASHEND > 0x1fff
  uint16_t mv2500;
  ADC_PORT = TXD_VAL;                   // switch to 0V
    3c08:	08 e0       	ldi	r16, 0x08	; 8
    3c0a:	08 b9       	out	0x08, r16	; 8
  ADC_DDR = (1<<TPREF) | TXD_MSK;       // switch pin with 2.5V reference to GND
    3c0c:	88 e1       	ldi	r24, 0x18	; 24
    3c0e:	87 b9       	out	0x07, r24	; 7
  wait20us();			// switch only short time, so that the relais do not really switch
    3c10:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <wait20us>
  ADC_DDR =  TXD_MSK;		// switch pin with reference back to input
    3c14:	07 b9       	out	0x07, r16	; 7
  mv2500 = W5msReadADC(TPREF); // read voltage of 2.5V precision reference
    3c16:	84 e0       	ldi	r24, 0x04	; 4
    3c18:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    3c1c:	ec 01       	movw	r28, r24
  if ((mv2500 > 2250) && (mv2500 < 2750)) {
    3c1e:	8b 5c       	subi	r24, 0xCB	; 203
    3c20:	98 40       	sbci	r25, 0x08	; 8
    3c22:	21 e0       	ldi	r18, 0x01	; 1
    3c24:	83 3f       	cpi	r24, 0xF3	; 243
    3c26:	92 07       	cpc	r25, r18
    3c28:	c0 f4       	brcc	.+48     	; 0x3c5a <Calibrate_UR+0x7c>
     // precision voltage reference connected, update U_AVCC
     WithReference = 1;
    3c2a:	81 e0       	ldi	r24, 0x01	; 1
    3c2c:	80 93 3f 01 	sts	0x013F, r24
     ADCconfig.U_AVCC = (unsigned long)((unsigned long)ADCconfig.U_AVCC * 2495) / mv2500;
    3c30:	60 91 35 01 	lds	r22, 0x0135
    3c34:	70 91 36 01 	lds	r23, 0x0136
    3c38:	80 e0       	ldi	r24, 0x00	; 0
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	2f eb       	ldi	r18, 0xBF	; 191
    3c3e:	39 e0       	ldi	r19, 0x09	; 9
    3c40:	40 e0       	ldi	r20, 0x00	; 0
    3c42:	50 e0       	ldi	r21, 0x00	; 0
    3c44:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
    3c48:	9e 01       	movw	r18, r28
    3c4a:	40 e0       	ldi	r20, 0x00	; 0
    3c4c:	50 e0       	ldi	r21, 0x00	; 0
    3c4e:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    3c52:	30 93 36 01 	sts	0x0136, r19
    3c56:	20 93 35 01 	sts	0x0135, r18
  }
#endif
#ifdef WITH_AUTO_REF
  (void) ReadADC(MUX_INT_REF);	// read reference voltage 
    3c5a:	8e e0       	ldi	r24, 0x0E	; 14
    3c5c:	0e 94 af 13 	call	0x275e	; 0x275e <ReadADC>
  ref_mv = W5msReadADC(MUX_INT_REF);	// read reference voltage 
    3c60:	8e e0       	ldi	r24, 0x0E	; 14
    3c62:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    3c66:	90 93 3a 01 	sts	0x013A, r25
    3c6a:	80 93 39 01 	sts	0x0139, r24
  RefVoltage();			//compute RHmultip = f(reference voltage)
    3c6e:	0e 94 8e 0c 	call	0x191c	; 0x191c <RefVoltage>
#else
  ref_mv = DEFAULT_BAND_GAP;    // set to default Reference Voltage
#endif
  ADCconfig.U_Bandgap = ADC_internal_reference; // set internal reference voltage for ADC
    3c72:	8e e9       	ldi	r24, 0x9E	; 158
    3c74:	91 e0       	ldi	r25, 0x01	; 1
    3c76:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <__eerd_byte_m168>
    3c7a:	99 27       	eor	r25, r25
    3c7c:	87 fd       	sbrc	r24, 7
    3c7e:	90 95       	com	r25
    3c80:	20 91 39 01 	lds	r18, 0x0139
    3c84:	30 91 3a 01 	lds	r19, 0x013A
    3c88:	82 0f       	add	r24, r18
    3c8a:	93 1f       	adc	r25, r19
    3c8c:	90 93 34 01 	sts	0x0134, r25
    3c90:	80 93 33 01 	sts	0x0133, r24
                                        //############################################

#ifdef AUTO_CAL
  // measurement of internal resistance of the ADC port outputs switched to GND
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    3c94:	79 e0       	ldi	r23, 0x09	; 9
    3c96:	d7 2e       	mov	r13, r23
    3c98:	d7 b8       	out	0x07, r13	; 7
  R_PORT = 1<<PIN_RL1;		//R_L-PORT 1 to VCC
    3c9a:	aa 24       	eor	r10, r10
    3c9c:	a3 94       	inc	r10
    3c9e:	a5 b8       	out	0x05, r10	; 5
  R_DDR = 1<<PIN_RL1;		//Pin 1 to output and over R_L to VCC
    3ca0:	a4 b8       	out	0x04, r10	; 4
  sum_rm = W5msReadADC(TP1);
    3ca2:	80 e0       	ldi	r24, 0x00	; 0
    3ca4:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    3ca8:	8c 01       	movw	r16, r24

  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin 2 to output 0V
    3caa:	6a e0       	ldi	r22, 0x0A	; 10
    3cac:	86 2e       	mov	r8, r22
    3cae:	87 b8       	out	0x07, r8	; 7
  R_PORT =  1<<PIN_RL2;		//R_L-PORT 2 to VCC
    3cb0:	54 e0       	ldi	r21, 0x04	; 4
    3cb2:	c5 2e       	mov	r12, r21
    3cb4:	c5 b8       	out	0x05, r12	; 5
  R_DDR = 1<<PIN_RL2;		//Pin 2 to output and over R_L to VCC
    3cb6:	c4 b8       	out	0x04, r12	; 4
  sum_rm += W5msReadADC(TP2);
    3cb8:	81 e0       	ldi	r24, 0x01	; 1
    3cba:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    3cbe:	08 0f       	add	r16, r24
    3cc0:	19 1f       	adc	r17, r25

  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin 3 to output 0V
    3cc2:	4c e0       	ldi	r20, 0x0C	; 12
    3cc4:	f4 2e       	mov	r15, r20
    3cc6:	f7 b8       	out	0x07, r15	; 7
  R_PORT =  1<<PIN_RL3;		//R_L-PORT 3 to VCC
    3cc8:	30 e1       	ldi	r19, 0x10	; 16
    3cca:	e3 2e       	mov	r14, r19
    3ccc:	e5 b8       	out	0x05, r14	; 5
  R_DDR = 1<<PIN_RL3;		//Pin 3 to output and over R_L to VCC
    3cce:	e4 b8       	out	0x04, r14	; 4
  sum_rm += W5msReadADC(TP3);	//add all three values
    3cd0:	82 e0       	ldi	r24, 0x02	; 2
    3cd2:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    3cd6:	08 0f       	add	r16, r24
    3cd8:	19 1f       	adc	r17, r25

  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
    3cda:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
    3cdc:	d8 b8       	out	0x08, r13	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    3cde:	d7 b8       	out	0x07, r13	; 7
  R_DDR = 1<<PIN_RL1;		//Pin 1 to output and over R_L to GND
    3ce0:	a4 b8       	out	0x04, r10	; 4
  sum_rp = ADCconfig.U_AVCC - W5msReadADC(TP1);
    3ce2:	c0 91 35 01 	lds	r28, 0x0135
    3ce6:	d0 91 36 01 	lds	r29, 0x0136
    3cea:	80 e0       	ldi	r24, 0x00	; 0
    3cec:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    3cf0:	5c 01       	movw	r10, r24
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
    3cf2:	88 b8       	out	0x08, r8	; 8
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
    3cf4:	87 b8       	out	0x07, r8	; 7
  R_DDR = 1<<PIN_RL2;		//Pin 2 to output and over R_L to GND
    3cf6:	c4 b8       	out	0x04, r12	; 4
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP2);
    3cf8:	c0 90 35 01 	lds	r12, 0x0135
    3cfc:	d0 90 36 01 	lds	r13, 0x0136
    3d00:	81 e0       	ldi	r24, 0x01	; 1
    3d02:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
    3d06:	4c 01       	movw	r8, r24

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
    3d08:	f8 b8       	out	0x08, r15	; 8
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
    3d0a:	f7 b8       	out	0x07, r15	; 7
  R_DDR = 1<<PIN_RL3;		//Pin 3 to output and over R_L to GND
    3d0c:	e4 b8       	out	0x04, r14	; 4
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP3);
    3d0e:	e0 90 35 01 	lds	r14, 0x0135
    3d12:	f0 90 36 01 	lds	r15, 0x0136
    3d16:	82 e0       	ldi	r24, 0x02	; 2
    3d18:	0e 94 a9 13 	call	0x2752	; 0x2752 <W5msReadADC>
  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
  R_DDR = 1<<PIN_RL1;		//Pin 1 to output and over R_L to GND
  sum_rp = ADCconfig.U_AVCC - W5msReadADC(TP1);
    3d1c:	cc 0d       	add	r28, r12
    3d1e:	dd 1d       	adc	r29, r13
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
  R_DDR = 1<<PIN_RL2;		//Pin 2 to output and over R_L to GND
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP2);
    3d20:	ce 0d       	add	r28, r14
    3d22:	df 1d       	adc	r29, r15
    3d24:	ca 19       	sub	r28, r10
    3d26:	db 09       	sbc	r29, r11

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
  R_DDR = 1<<PIN_RL3;		//Pin 3 to output and over R_L to GND
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP3);
    3d28:	c8 19       	sub	r28, r8
    3d2a:	d9 09       	sbc	r29, r9
    3d2c:	c8 1b       	sub	r28, r24
    3d2e:	d9 0b       	sbc	r29, r25

  u680 = ((ADCconfig.U_AVCC * 3) - sum_rm - sum_rp);	//three times the voltage at the 680 Ohm
    3d30:	80 91 35 01 	lds	r24, 0x0135
    3d34:	90 91 36 01 	lds	r25, 0x0136
    3d38:	6c 01       	movw	r12, r24
    3d3a:	cc 0c       	add	r12, r12
    3d3c:	dd 1c       	adc	r13, r13
    3d3e:	c8 0e       	add	r12, r24
    3d40:	d9 1e       	adc	r13, r25
    3d42:	c0 1a       	sub	r12, r16
    3d44:	d1 0a       	sbc	r13, r17
    3d46:	cc 1a       	sub	r12, r28
    3d48:	dd 0a       	sbc	r13, r29
  pin_rmi = (unsigned long)((unsigned long)sum_rm * (unsigned long)R_L_VAL) / (unsigned long)u680;
    3d4a:	ee 24       	eor	r14, r14
    3d4c:	ff 24       	eor	r15, r15
    3d4e:	b8 01       	movw	r22, r16
    3d50:	80 e0       	ldi	r24, 0x00	; 0
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	20 e9       	ldi	r18, 0x90	; 144
    3d56:	3a e1       	ldi	r19, 0x1A	; 26
    3d58:	40 e0       	ldi	r20, 0x00	; 0
    3d5a:	50 e0       	ldi	r21, 0x00	; 0
    3d5c:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
    3d60:	a7 01       	movw	r20, r14
    3d62:	96 01       	movw	r18, r12
    3d64:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    3d68:	89 01       	movw	r16, r18
    3d6a:	30 93 3e 01 	sts	0x013E, r19
    3d6e:	20 93 3d 01 	sts	0x013D, r18
//  adcmv[2] = pin_rm;	// for last output in row 2
  pin_rpl = (unsigned long)((unsigned long)sum_rp * (unsigned long)R_L_VAL) / (unsigned long)u680;
    3d72:	be 01       	movw	r22, r28
    3d74:	80 e0       	ldi	r24, 0x00	; 0
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	20 e9       	ldi	r18, 0x90	; 144
    3d7a:	3a e1       	ldi	r19, 0x1A	; 26
    3d7c:	40 e0       	ldi	r20, 0x00	; 0
    3d7e:	50 e0       	ldi	r21, 0x00	; 0
    3d80:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__mulsi3>
    3d84:	a7 01       	movw	r20, r14
    3d86:	96 01       	movw	r18, r12
    3d88:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__udivmodsi4>
    3d8c:	c9 01       	movw	r24, r18
    3d8e:	30 93 38 01 	sts	0x0138, r19
    3d92:	20 93 37 01 	sts	0x0137, r18
  resis680pl = pin_rpl + R_L_VAL;
    3d96:	80 57       	subi	r24, 0x70	; 112
    3d98:	95 4e       	sbci	r25, 0xE5	; 229
    3d9a:	90 93 09 01 	sts	0x0109, r25
    3d9e:	80 93 08 01 	sts	0x0108, r24
  resis680mi = pin_rmi + R_L_VAL;
    3da2:	00 57       	subi	r16, 0x70	; 112
    3da4:	15 4e       	sbci	r17, 0xE5	; 229
    3da6:	10 93 04 01 	sts	0x0104, r17
    3daa:	00 93 03 01 	sts	0x0103, r16
#endif

  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    3dae:	89 e1       	ldi	r24, 0x19	; 25
    3db0:	80 93 31 01 	sts	0x0131, r24
 } 
    3db4:	df 91       	pop	r29
    3db6:	cf 91       	pop	r28
    3db8:	1f 91       	pop	r17
    3dba:	0f 91       	pop	r16
    3dbc:	ff 90       	pop	r15
    3dbe:	ef 90       	pop	r14
    3dc0:	df 90       	pop	r13
    3dc2:	cf 90       	pop	r12
    3dc4:	bf 90       	pop	r11
    3dc6:	af 90       	pop	r10
    3dc8:	9f 90       	pop	r9
    3dca:	8f 90       	pop	r8
    3dcc:	08 95       	ret

00003dce <__mulsi3>:
    3dce:	62 9f       	mul	r22, r18
    3dd0:	d0 01       	movw	r26, r0
    3dd2:	73 9f       	mul	r23, r19
    3dd4:	f0 01       	movw	r30, r0
    3dd6:	82 9f       	mul	r24, r18
    3dd8:	e0 0d       	add	r30, r0
    3dda:	f1 1d       	adc	r31, r1
    3ddc:	64 9f       	mul	r22, r20
    3dde:	e0 0d       	add	r30, r0
    3de0:	f1 1d       	adc	r31, r1
    3de2:	92 9f       	mul	r25, r18
    3de4:	f0 0d       	add	r31, r0
    3de6:	83 9f       	mul	r24, r19
    3de8:	f0 0d       	add	r31, r0
    3dea:	74 9f       	mul	r23, r20
    3dec:	f0 0d       	add	r31, r0
    3dee:	65 9f       	mul	r22, r21
    3df0:	f0 0d       	add	r31, r0
    3df2:	99 27       	eor	r25, r25
    3df4:	72 9f       	mul	r23, r18
    3df6:	b0 0d       	add	r27, r0
    3df8:	e1 1d       	adc	r30, r1
    3dfa:	f9 1f       	adc	r31, r25
    3dfc:	63 9f       	mul	r22, r19
    3dfe:	b0 0d       	add	r27, r0
    3e00:	e1 1d       	adc	r30, r1
    3e02:	f9 1f       	adc	r31, r25
    3e04:	bd 01       	movw	r22, r26
    3e06:	cf 01       	movw	r24, r30
    3e08:	11 24       	eor	r1, r1
    3e0a:	08 95       	ret

00003e0c <__udivmodqi4>:
    3e0c:	99 1b       	sub	r25, r25
    3e0e:	79 e0       	ldi	r23, 0x09	; 9
    3e10:	04 c0       	rjmp	.+8      	; 0x3e1a <__udivmodqi4_ep>

00003e12 <__udivmodqi4_loop>:
    3e12:	99 1f       	adc	r25, r25
    3e14:	96 17       	cp	r25, r22
    3e16:	08 f0       	brcs	.+2      	; 0x3e1a <__udivmodqi4_ep>
    3e18:	96 1b       	sub	r25, r22

00003e1a <__udivmodqi4_ep>:
    3e1a:	88 1f       	adc	r24, r24
    3e1c:	7a 95       	dec	r23
    3e1e:	c9 f7       	brne	.-14     	; 0x3e12 <__udivmodqi4_loop>
    3e20:	80 95       	com	r24
    3e22:	08 95       	ret

00003e24 <__udivmodhi4>:
    3e24:	aa 1b       	sub	r26, r26
    3e26:	bb 1b       	sub	r27, r27
    3e28:	51 e1       	ldi	r21, 0x11	; 17
    3e2a:	07 c0       	rjmp	.+14     	; 0x3e3a <__udivmodhi4_ep>

00003e2c <__udivmodhi4_loop>:
    3e2c:	aa 1f       	adc	r26, r26
    3e2e:	bb 1f       	adc	r27, r27
    3e30:	a6 17       	cp	r26, r22
    3e32:	b7 07       	cpc	r27, r23
    3e34:	10 f0       	brcs	.+4      	; 0x3e3a <__udivmodhi4_ep>
    3e36:	a6 1b       	sub	r26, r22
    3e38:	b7 0b       	sbc	r27, r23

00003e3a <__udivmodhi4_ep>:
    3e3a:	88 1f       	adc	r24, r24
    3e3c:	99 1f       	adc	r25, r25
    3e3e:	5a 95       	dec	r21
    3e40:	a9 f7       	brne	.-22     	; 0x3e2c <__udivmodhi4_loop>
    3e42:	80 95       	com	r24
    3e44:	90 95       	com	r25
    3e46:	bc 01       	movw	r22, r24
    3e48:	cd 01       	movw	r24, r26
    3e4a:	08 95       	ret

00003e4c <__udivmodsi4>:
    3e4c:	a1 e2       	ldi	r26, 0x21	; 33
    3e4e:	1a 2e       	mov	r1, r26
    3e50:	aa 1b       	sub	r26, r26
    3e52:	bb 1b       	sub	r27, r27
    3e54:	fd 01       	movw	r30, r26
    3e56:	0d c0       	rjmp	.+26     	; 0x3e72 <__udivmodsi4_ep>

00003e58 <__udivmodsi4_loop>:
    3e58:	aa 1f       	adc	r26, r26
    3e5a:	bb 1f       	adc	r27, r27
    3e5c:	ee 1f       	adc	r30, r30
    3e5e:	ff 1f       	adc	r31, r31
    3e60:	a2 17       	cp	r26, r18
    3e62:	b3 07       	cpc	r27, r19
    3e64:	e4 07       	cpc	r30, r20
    3e66:	f5 07       	cpc	r31, r21
    3e68:	20 f0       	brcs	.+8      	; 0x3e72 <__udivmodsi4_ep>
    3e6a:	a2 1b       	sub	r26, r18
    3e6c:	b3 0b       	sbc	r27, r19
    3e6e:	e4 0b       	sbc	r30, r20
    3e70:	f5 0b       	sbc	r31, r21

00003e72 <__udivmodsi4_ep>:
    3e72:	66 1f       	adc	r22, r22
    3e74:	77 1f       	adc	r23, r23
    3e76:	88 1f       	adc	r24, r24
    3e78:	99 1f       	adc	r25, r25
    3e7a:	1a 94       	dec	r1
    3e7c:	69 f7       	brne	.-38     	; 0x3e58 <__udivmodsi4_loop>
    3e7e:	60 95       	com	r22
    3e80:	70 95       	com	r23
    3e82:	80 95       	com	r24
    3e84:	90 95       	com	r25
    3e86:	9b 01       	movw	r18, r22
    3e88:	ac 01       	movw	r20, r24
    3e8a:	bd 01       	movw	r22, r26
    3e8c:	cf 01       	movw	r24, r30
    3e8e:	08 95       	ret

00003e90 <__divmodsi4>:
    3e90:	97 fb       	bst	r25, 7
    3e92:	09 2e       	mov	r0, r25
    3e94:	05 26       	eor	r0, r21
    3e96:	0e d0       	rcall	.+28     	; 0x3eb4 <__divmodsi4_neg1>
    3e98:	57 fd       	sbrc	r21, 7
    3e9a:	04 d0       	rcall	.+8      	; 0x3ea4 <__divmodsi4_neg2>
    3e9c:	d7 df       	rcall	.-82     	; 0x3e4c <__udivmodsi4>
    3e9e:	0a d0       	rcall	.+20     	; 0x3eb4 <__divmodsi4_neg1>
    3ea0:	00 1c       	adc	r0, r0
    3ea2:	38 f4       	brcc	.+14     	; 0x3eb2 <__divmodsi4_exit>

00003ea4 <__divmodsi4_neg2>:
    3ea4:	50 95       	com	r21
    3ea6:	40 95       	com	r20
    3ea8:	30 95       	com	r19
    3eaa:	21 95       	neg	r18
    3eac:	3f 4f       	sbci	r19, 0xFF	; 255
    3eae:	4f 4f       	sbci	r20, 0xFF	; 255
    3eb0:	5f 4f       	sbci	r21, 0xFF	; 255

00003eb2 <__divmodsi4_exit>:
    3eb2:	08 95       	ret

00003eb4 <__divmodsi4_neg1>:
    3eb4:	f6 f7       	brtc	.-4      	; 0x3eb2 <__divmodsi4_exit>
    3eb6:	90 95       	com	r25
    3eb8:	80 95       	com	r24
    3eba:	70 95       	com	r23
    3ebc:	61 95       	neg	r22
    3ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    3ec0:	8f 4f       	sbci	r24, 0xFF	; 255
    3ec2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ec4:	08 95       	ret

00003ec6 <itoa>:
    3ec6:	fb 01       	movw	r30, r22
    3ec8:	9f 01       	movw	r18, r30
    3eca:	e8 94       	clt
    3ecc:	42 30       	cpi	r20, 0x02	; 2
    3ece:	c4 f0       	brlt	.+48     	; 0x3f00 <itoa+0x3a>
    3ed0:	45 32       	cpi	r20, 0x25	; 37
    3ed2:	b4 f4       	brge	.+44     	; 0x3f00 <itoa+0x3a>
    3ed4:	4a 30       	cpi	r20, 0x0A	; 10
    3ed6:	29 f4       	brne	.+10     	; 0x3ee2 <itoa+0x1c>
    3ed8:	97 fb       	bst	r25, 7
    3eda:	1e f4       	brtc	.+6      	; 0x3ee2 <itoa+0x1c>
    3edc:	90 95       	com	r25
    3ede:	81 95       	neg	r24
    3ee0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ee2:	64 2f       	mov	r22, r20
    3ee4:	77 27       	eor	r23, r23
    3ee6:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__udivmodhi4>
    3eea:	80 5d       	subi	r24, 0xD0	; 208
    3eec:	8a 33       	cpi	r24, 0x3A	; 58
    3eee:	0c f0       	brlt	.+2      	; 0x3ef2 <itoa+0x2c>
    3ef0:	89 5d       	subi	r24, 0xD9	; 217
    3ef2:	81 93       	st	Z+, r24
    3ef4:	cb 01       	movw	r24, r22
    3ef6:	00 97       	sbiw	r24, 0x00	; 0
    3ef8:	a1 f7       	brne	.-24     	; 0x3ee2 <itoa+0x1c>
    3efa:	16 f4       	brtc	.+4      	; 0x3f00 <itoa+0x3a>
    3efc:	5d e2       	ldi	r21, 0x2D	; 45
    3efe:	51 93       	st	Z+, r21
    3f00:	10 82       	st	Z, r1
    3f02:	c9 01       	movw	r24, r18
    3f04:	0c 94 bb 1f 	jmp	0x3f76	; 0x3f76 <strrev>

00003f08 <utoa>:
    3f08:	fb 01       	movw	r30, r22
    3f0a:	9f 01       	movw	r18, r30
    3f0c:	42 30       	cpi	r20, 0x02	; 2
    3f0e:	74 f0       	brlt	.+28     	; 0x3f2c <utoa+0x24>
    3f10:	45 32       	cpi	r20, 0x25	; 37
    3f12:	64 f4       	brge	.+24     	; 0x3f2c <utoa+0x24>
    3f14:	64 2f       	mov	r22, r20
    3f16:	77 27       	eor	r23, r23
    3f18:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__udivmodhi4>
    3f1c:	80 5d       	subi	r24, 0xD0	; 208
    3f1e:	8a 33       	cpi	r24, 0x3A	; 58
    3f20:	0c f0       	brlt	.+2      	; 0x3f24 <utoa+0x1c>
    3f22:	89 5d       	subi	r24, 0xD9	; 217
    3f24:	81 93       	st	Z+, r24
    3f26:	cb 01       	movw	r24, r22
    3f28:	00 97       	sbiw	r24, 0x00	; 0
    3f2a:	a1 f7       	brne	.-24     	; 0x3f14 <utoa+0xc>
    3f2c:	10 82       	st	Z, r1
    3f2e:	c9 01       	movw	r24, r18
    3f30:	0c 94 bb 1f 	jmp	0x3f76	; 0x3f76 <strrev>

00003f34 <__eerd_byte_m168>:
    3f34:	f9 99       	sbic	0x1f, 1	; 31
    3f36:	fe cf       	rjmp	.-4      	; 0x3f34 <__eerd_byte_m168>
    3f38:	92 bd       	out	0x22, r25	; 34
    3f3a:	81 bd       	out	0x21, r24	; 33
    3f3c:	f8 9a       	sbi	0x1f, 0	; 31
    3f3e:	99 27       	eor	r25, r25
    3f40:	80 b5       	in	r24, 0x20	; 32
    3f42:	08 95       	ret

00003f44 <__eerd_word_m168>:
    3f44:	a8 e1       	ldi	r26, 0x18	; 24
    3f46:	b0 e0       	ldi	r27, 0x00	; 0
    3f48:	42 e0       	ldi	r20, 0x02	; 2
    3f4a:	50 e0       	ldi	r21, 0x00	; 0
    3f4c:	0c 94 cd 1f 	jmp	0x3f9a	; 0x3f9a <__eerd_blraw_m168>

00003f50 <__eewr_byte_m168>:
    3f50:	26 2f       	mov	r18, r22

00003f52 <__eewr_r18_m168>:
    3f52:	f9 99       	sbic	0x1f, 1	; 31
    3f54:	fe cf       	rjmp	.-4      	; 0x3f52 <__eewr_r18_m168>
    3f56:	1f ba       	out	0x1f, r1	; 31
    3f58:	92 bd       	out	0x22, r25	; 34
    3f5a:	81 bd       	out	0x21, r24	; 33
    3f5c:	20 bd       	out	0x20, r18	; 32
    3f5e:	0f b6       	in	r0, 0x3f	; 63
    3f60:	f8 94       	cli
    3f62:	fa 9a       	sbi	0x1f, 2	; 31
    3f64:	f9 9a       	sbi	0x1f, 1	; 31
    3f66:	0f be       	out	0x3f, r0	; 63
    3f68:	01 96       	adiw	r24, 0x01	; 1
    3f6a:	08 95       	ret

00003f6c <__eewr_word_m168>:
    3f6c:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <__eewr_byte_m168>
    3f70:	27 2f       	mov	r18, r23
    3f72:	0c 94 a9 1f 	jmp	0x3f52	; 0x3f52 <__eewr_r18_m168>

00003f76 <strrev>:
    3f76:	dc 01       	movw	r26, r24
    3f78:	fc 01       	movw	r30, r24
    3f7a:	67 2f       	mov	r22, r23
    3f7c:	71 91       	ld	r23, Z+
    3f7e:	77 23       	and	r23, r23
    3f80:	e1 f7       	brne	.-8      	; 0x3f7a <strrev+0x4>
    3f82:	32 97       	sbiw	r30, 0x02	; 2
    3f84:	04 c0       	rjmp	.+8      	; 0x3f8e <strrev+0x18>
    3f86:	7c 91       	ld	r23, X
    3f88:	6d 93       	st	X+, r22
    3f8a:	70 83       	st	Z, r23
    3f8c:	62 91       	ld	r22, -Z
    3f8e:	ae 17       	cp	r26, r30
    3f90:	bf 07       	cpc	r27, r31
    3f92:	c8 f3       	brcs	.-14     	; 0x3f86 <strrev+0x10>
    3f94:	08 95       	ret

00003f96 <__eerd_block_m168>:
    3f96:	dc 01       	movw	r26, r24
    3f98:	cb 01       	movw	r24, r22

00003f9a <__eerd_blraw_m168>:
    3f9a:	fc 01       	movw	r30, r24
    3f9c:	f9 99       	sbic	0x1f, 1	; 31
    3f9e:	fe cf       	rjmp	.-4      	; 0x3f9c <__eerd_blraw_m168+0x2>
    3fa0:	06 c0       	rjmp	.+12     	; 0x3fae <__eerd_blraw_m168+0x14>
    3fa2:	f2 bd       	out	0x22, r31	; 34
    3fa4:	e1 bd       	out	0x21, r30	; 33
    3fa6:	f8 9a       	sbi	0x1f, 0	; 31
    3fa8:	31 96       	adiw	r30, 0x01	; 1
    3faa:	00 b4       	in	r0, 0x20	; 32
    3fac:	0d 92       	st	X+, r0
    3fae:	41 50       	subi	r20, 0x01	; 1
    3fb0:	50 40       	sbci	r21, 0x00	; 0
    3fb2:	b8 f7       	brcc	.-18     	; 0x3fa2 <__eerd_blraw_m168+0x8>
    3fb4:	08 95       	ret

00003fb6 <_exit>:
    3fb6:	f8 94       	cli

00003fb8 <__stop_program>:
    3fb8:	ff cf       	rjmp	.-2      	; 0x3fb8 <__stop_program>
