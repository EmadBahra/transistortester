
TransistorTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00003d08  00003dbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003d08  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000082  00800102  00800102  00003dbe  2**0
                  ALLOC
  3 .eeprom       000001c1  00810000  00810000  00003dbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         00000dbc  00000000  00000000  00003f80  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001d2  00000000  00000000  00004d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000000a0  00000000  00000000  00004f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000006a8  00000000  00000000  00004fae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000025e6  00000000  00000000  00005656  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000071b  00000000  00000000  00007c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003362  00000000  00000000  00008357  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000220  00000000  00000000  0000b6bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000843  00000000  00000000  0000b8dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000011c1  00000000  00000000  0000c11f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 000001df  00000000  00000000  0000d2e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__ctors_end>
       4:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
       8:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
       c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      10:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      14:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      18:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      1c:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__vector_7>
      20:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      24:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      28:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      2c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      30:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      34:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      38:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      3c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      40:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      44:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      48:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      4c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      50:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      54:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      58:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      5c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      60:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      64:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>

00000068 <LogTab>:
      68:	00 01 02 03 04 05 06 07 08 09 0b 0c 0d 0e 0f 10     ................
      78:	11 13 14 15 16 18 19 1a 1b 1d 1e 1f 21 22 24 25     ............!"$%
      88:	27 28 2a 2b 2d 2e 30 31 33 35 36 38 3a 3c 3e 3f     '(*+-.013568:<>?
      98:	41 43 45 47 49 4c 4e 50 52 54 57 59 5c 5e 61 63     ACEGILNPRTWY\^ac
      a8:	66 69 6c 6f 72 75 78 7c 7f 83 87 8b 8f 93 97 9c     filorux|........
      b8:	a1 a6 ab b1 b7 be c5 cc d4 dd e6 f1                 ............

000000c4 <SELFTEST>:
      c4:	53 65 6c 66 74 65 73 74 20 6d 6f 64 65 2e 2e 00     Selftest mode...

000000d4 <RELPROBE>:
      d4:	69 73 6f 6c 61 74 65 20 50 72 6f 62 65 21 00        isolate Probe!.

000000e3 <URefT>:
      e3:	52 65 66 3d 00                                      Ref=.

000000e8 <RHfakt>:
      e8:	52 48 66 3d 00                                      RHf=.

000000ed <RH1L>:
      ed:	52 48 2d 00                                         RH-.

000000f1 <RH1H>:
      f1:	52 48 2b 00                                         RH+.

000000f5 <RLRL>:
      f5:	2b 52 4c 2d 20 31 32 20 31 33 20 32 33 00           +RL- 12 13 23.

00000103 <RHRH>:
     103:	2b 52 48 2d 20 31 32 20 31 33 20 32 33 00           +RH- 12 13 23.

00000111 <T50HZ>:
     111:	20 35 30 48 7a 00 00                                 50Hz..

00000118 <__ctors_end>:
     118:	11 24       	eor	r1, r1
     11a:	1f be       	out	0x3f, r1	; 63
     11c:	cf ef       	ldi	r28, 0xFF	; 255
     11e:	d4 e0       	ldi	r29, 0x04	; 4
     120:	de bf       	out	0x3e, r29	; 62
     122:	cd bf       	out	0x3d, r28	; 61

00000124 <__do_copy_data>:
     124:	11 e0       	ldi	r17, 0x01	; 1
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	e8 e0       	ldi	r30, 0x08	; 8
     12c:	fd e3       	ldi	r31, 0x3D	; 61
     12e:	02 c0       	rjmp	.+4      	; 0x134 <__do_copy_data+0x10>
     130:	05 90       	lpm	r0, Z+
     132:	0d 92       	st	X+, r0
     134:	a2 30       	cpi	r26, 0x02	; 2
     136:	b1 07       	cpc	r27, r17
     138:	d9 f7       	brne	.-10     	; 0x130 <__do_copy_data+0xc>

0000013a <__do_clear_bss>:
     13a:	11 e0       	ldi	r17, 0x01	; 1
     13c:	a2 e0       	ldi	r26, 0x02	; 2
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	01 c0       	rjmp	.+2      	; 0x144 <.do_clear_bss_start>

00000142 <.do_clear_bss_loop>:
     142:	1d 92       	st	X+, r1

00000144 <.do_clear_bss_start>:
     144:	a4 38       	cpi	r26, 0x84	; 132
     146:	b1 07       	cpc	r27, r17
     148:	e1 f7       	brne	.-8      	; 0x142 <.do_clear_bss_loop>
     14a:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <main>
     14e:	0c 94 82 1e 	jmp	0x3d04	; 0x3d04 <_exit>

00000152 <__bad_interrupt>:
     152:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000156 <lcd_data>:
void lcd_space(void) {
   lcd_data(' ');
}

// sends data byte to the LCD 
void lcd_data(unsigned char temp1) {
     156:	1f 93       	push	r17
     158:	18 2f       	mov	r17, r24
 lcd_write_data(temp1);		// set RS to 1
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	61 2f       	mov	r22, r17
     15e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_lcd_hw_write>
     162:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <wait50us>
#ifdef WITH_UART
 switch(temp1) {
     166:	18 30       	cpi	r17, 0x08	; 8
     168:	48 f4       	brcc	.+18     	; 0x17c <lcd_data+0x26>
     16a:	16 30       	cpi	r17, 0x06	; 6
     16c:	d0 f4       	brcc	.+52     	; 0x1a2 <lcd_data+0x4c>
     16e:	12 30       	cpi	r17, 0x02	; 2
     170:	71 f0       	breq	.+28     	; 0x18e <lcd_data+0x38>
     172:	13 30       	cpi	r17, 0x03	; 3
     174:	89 f0       	breq	.+34     	; 0x198 <lcd_data+0x42>
     176:	11 30       	cpi	r17, 0x01	; 1
     178:	d1 f4       	brne	.+52     	; 0x1ae <lcd_data+0x58>
     17a:	07 c0       	rjmp	.+14     	; 0x18a <lcd_data+0x34>
     17c:	14 3e       	cpi	r17, 0xE4	; 228
     17e:	a9 f0       	breq	.+42     	; 0x1aa <lcd_data+0x54>
     180:	14 3f       	cpi	r17, 0xF4	; 244
     182:	c1 f0       	breq	.+48     	; 0x1b4 <lcd_data+0x5e>
     184:	11 3e       	cpi	r17, 0xE1	; 225
     186:	99 f4       	brne	.+38     	; 0x1ae <lcd_data+0x58>
     188:	0e c0       	rjmp	.+28     	; 0x1a6 <lcd_data+0x50>
    case LCD_CHAR_DIODE1:
    	uart_putc('>');
     18a:	8e e3       	ldi	r24, 0x3E	; 62
     18c:	06 c0       	rjmp	.+12     	; 0x19a <lcd_data+0x44>
    	uart_putc('|');
    	break;
    case LCD_CHAR_DIODE2:
    	uart_putc('|');
     18e:	8c e7       	ldi	r24, 0x7C	; 124
     190:	0e 94 c2 14 	call	0x2984	; 0x2984 <uart_putc>
    	uart_putc('<');
     194:	8c e3       	ldi	r24, 0x3C	; 60
     196:	0c c0       	rjmp	.+24     	; 0x1b0 <lcd_data+0x5a>
    	break;
    case LCD_CHAR_CAP:
    	uart_putc('|');
     198:	8c e7       	ldi	r24, 0x7C	; 124
     19a:	0e 94 c2 14 	call	0x2984	; 0x2984 <uart_putc>
    	uart_putc('|');
     19e:	8c e7       	ldi	r24, 0x7C	; 124
     1a0:	07 c0       	rjmp	.+14     	; 0x1b0 <lcd_data+0x5a>
    	break;
    case LCD_CHAR_RESIS1:
    case LCD_CHAR_RESIS2:
    	uart_putc('R');
     1a2:	82 e5       	ldi	r24, 0x52	; 82
     1a4:	05 c0       	rjmp	.+10     	; 0x1b0 <lcd_data+0x5a>
    	break;
    case 225:	//ä
    	uart_putc('ä');
     1a6:	84 ee       	ldi	r24, 0xE4	; 228
     1a8:	03 c0       	rjmp	.+6      	; 0x1b0 <lcd_data+0x5a>
    	break;
    case 228:	//µ
    	uart_putc('µ');
     1aa:	85 eb       	ldi	r24, 0xB5	; 181
     1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <lcd_data+0x5a>
    	break;
    case 244:	//Omega
    	break;
    default:
    	uart_putc(temp1);
     1ae:	81 2f       	mov	r24, r17
     1b0:	0e 94 c2 14 	call	0x2984	; 0x2984 <uart_putc>
 }
#endif
}
     1b4:	1f 91       	pop	r17
     1b6:	08 95       	ret

000001b8 <lcd_space>:
   lcd_data(temp + '1');
}

// send space character to LCD
void lcd_space(void) {
   lcd_data(' ');
     1b8:	80 e2       	ldi	r24, 0x20	; 32
     1ba:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
}
     1be:	08 95       	ret

000001c0 <lcd_testpin>:
 

// sends numeric character (Pin Number) to the LCD 
// from binary 0 we send ASCII 1 ....
void lcd_testpin(unsigned char temp) {
   lcd_data(temp + '1');
     1c0:	8f 5c       	subi	r24, 0xCF	; 207
     1c2:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
}
     1c6:	08 95       	ret

000001c8 <uart_newline>:
}


#ifdef WITH_UART
void uart_newline(void) {
   uart_putc('\r');
     1c8:	8d e0       	ldi	r24, 0x0D	; 13
     1ca:	0e 94 c2 14 	call	0x2984	; 0x2984 <uart_putc>
   uart_putc('\n');
     1ce:	8a e0       	ldi	r24, 0x0A	; 10
     1d0:	0e 94 c2 14 	call	0x2984	; 0x2984 <uart_putc>
}
     1d4:	08 95       	ret

000001d6 <lcd_command>:
#endif
}
 
// sends a command to the LCD
 
void lcd_command(unsigned char temp1) {
     1d6:	1f 93       	push	r17
     1d8:	18 2f       	mov	r17, r24
        lcd_write_cmd(temp1);		// set RS to 0
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	61 2f       	mov	r22, r17
     1de:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_lcd_hw_write>
     1e2:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <wait50us>
#ifdef WITH_UART
	if((temp1 == 0x80) || (temp1 == 0xC0)) {
     1e6:	10 38       	cpi	r17, 0x80	; 128
     1e8:	11 f0       	breq	.+4      	; 0x1ee <lcd_command+0x18>
     1ea:	10 3c       	cpi	r17, 0xC0	; 192
     1ec:	11 f4       	brne	.+4      	; 0x1f2 <lcd_command+0x1c>
		uart_newline();
     1ee:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <uart_newline>
	}
#endif
}
     1f2:	1f 91       	pop	r17
     1f4:	08 95       	ret

000001f6 <lcd_clear>:
}
 
// send the command to clear the display 
 
void lcd_clear(void) {
   lcd_command(CLEAR_DISPLAY);
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
   wait10ms();
     1fc:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <wait10ms>
#ifdef WITH_UART
   uart_newline();
     200:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <uart_newline>
#endif
   lcd_line1();			// set cursor to Line1 Column 1, (only for OLED-Display)
     204:	80 e8       	ldi	r24, 0x80	; 128
     206:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
}
     20a:	08 95       	ret

0000020c <lcd_init>:
 
// Initialise: 
// Must be called first .
 
void lcd_init(void) {
   wait30ms();
     20c:	0e 94 ef 14 	call	0x29de	; 0x29de <wait30ms>
   // to initialise, send 3 times to be shure to be in 8 Bit mode
   lcd_write_init(1);
     210:	80 e8       	ldi	r24, 0x80	; 128
     212:	60 e3       	ldi	r22, 0x30	; 48
     214:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_lcd_hw_write>
   wait5ms();
     218:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <wait5ms>
   
   lcd_write_init(1);
     21c:	80 e8       	ldi	r24, 0x80	; 128
     21e:	60 e3       	ldi	r22, 0x30	; 48
     220:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_lcd_hw_write>
   wait1ms();
     224:	0e 94 f6 14 	call	0x29ec	; 0x29ec <wait1ms>

   lcd_write_init(1);
     228:	80 e8       	ldi	r24, 0x80	; 128
     22a:	60 e3       	ldi	r22, 0x30	; 48
     22c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_lcd_hw_write>
   wait1ms();
     230:	0e 94 f6 14 	call	0x29ec	; 0x29ec <wait1ms>

   lcd_write_init(0);		// switch to 4 Bit mode
     234:	80 e8       	ldi	r24, 0x80	; 128
     236:	60 e2       	ldi	r22, 0x20	; 32
     238:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_lcd_hw_write>
   wait10ms();
     23c:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <wait10ms>

   // 4Bit / 2 rows / 5x7
   lcd_command(CMD_SetIFOptions | 0x08);
     240:	88 e2       	ldi	r24, 0x28	; 40
     242:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>

   // Display on / Cursor off / no Blinking
   lcd_command(CMD_SetDisplayAndCursor | 0x04);
     246:	8c e0       	ldi	r24, 0x0C	; 12
     248:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>

   // increment / no Scroll    
   lcd_command(CMD_SetEntryMode | 0x02);	
     24c:	86 e0       	ldi	r24, 0x06	; 6
     24e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
   lcd_clear();
     252:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
}
     256:	08 95       	ret

00000258 <lcd_string>:
#endif
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
     258:	ef 92       	push	r14
     25a:	ff 92       	push	r15
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	e8 2e       	mov	r14, r24
     262:	e7 01       	movw	r28, r14
     264:	7e 01       	movw	r14, r28
     266:	f9 2e       	mov	r15, r25
     268:	e7 01       	movw	r28, r14
    while(*data) {
     26a:	02 c0       	rjmp	.+4      	; 0x270 <lcd_string+0x18>
        lcd_data(*data);
     26c:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
    while(*data) {
     270:	89 91       	ld	r24, Y+
     272:	88 23       	and	r24, r24
     274:	d9 f7       	brne	.-10     	; 0x26c <lcd_string+0x14>
        lcd_data(*data);
        data++;
    }
}
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	ff 90       	pop	r15
     27c:	ef 90       	pop	r14
     27e:	08 95       	ret

00000280 <lcd_pgm_string>:

#ifdef use_lcd_pgm
//Load string from PGM  and send to LCD 
void lcd_pgm_string(const unsigned char *data) {
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
     284:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = pgm_read_byte(data);
     286:	fe 01       	movw	r30, r28
     288:	84 91       	lpm	r24, Z+
      if((cc==0) || (cc==128)) {
     28a:	88 23       	and	r24, r24
     28c:	31 f0       	breq	.+12     	; 0x29a <lcd_pgm_string+0x1a>
     28e:	80 38       	cpi	r24, 0x80	; 128
     290:	21 f0       	breq	.+8      	; 0x29a <lcd_pgm_string+0x1a>
         return;
      }
      lcd_data(cc);
     292:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
      data++;
     296:	21 96       	adiw	r28, 0x01	; 1
   }
     298:	f6 cf       	rjmp	.-20     	; 0x286 <lcd_pgm_string+0x6>
}
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	08 95       	ret

000002a0 <lcd_fix_string>:
#endif

//Load string from PGM or EEprom and send to LCD 
void lcd_fix_string(const unsigned char *data) {
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = MEM_read_byte(data);
     2a6:	ce 01       	movw	r24, r28
     2a8:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <__eerd_byte_m168>
      if((cc==0) || (cc==128)) {
     2ac:	88 23       	and	r24, r24
     2ae:	31 f0       	breq	.+12     	; 0x2bc <lcd_fix_string+0x1c>
     2b0:	80 38       	cpi	r24, 0x80	; 128
     2b2:	21 f0       	breq	.+8      	; 0x2bc <lcd_fix_string+0x1c>
         return;
      }
      lcd_data(cc);
     2b4:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
      data++;
     2b8:	21 96       	adiw	r28, 0x01	; 1
   }
     2ba:	f5 cf       	rjmp	.-22     	; 0x2a6 <lcd_fix_string+0x6>
}
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	08 95       	ret

000002c2 <lcd_fix_customchar>:

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
     2c2:	0f 93       	push	r16
     2c4:	1f 93       	push	r17
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	8c 01       	movw	r16, r24
     2cc:	c0 e0       	ldi	r28, 0x00	; 0
     2ce:	d0 e0       	ldi	r29, 0x00	; 0
    for(uint8_t i=0;i<8;i++) {
        lcd_data(MEM_read_byte(chardata));
     2d0:	c8 01       	movw	r24, r16
     2d2:	8c 0f       	add	r24, r28
     2d4:	9d 1f       	adc	r25, r29
     2d6:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <__eerd_byte_m168>
     2da:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
     2de:	21 96       	adiw	r28, 0x01	; 1
   }
}

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
    for(uint8_t i=0;i<8;i++) {
     2e0:	c8 30       	cpi	r28, 0x08	; 8
     2e2:	d1 05       	cpc	r29, r1
     2e4:	a9 f7       	brne	.-22     	; 0x2d0 <lcd_fix_customchar+0xe>
        lcd_data(MEM_read_byte(chardata));
        chardata++;
    }
}
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	1f 91       	pop	r17
     2ec:	0f 91       	pop	r16
     2ee:	08 95       	ret

000002f0 <_lcd_hw_write>:
     2f0:	5d 9a       	sbi	0x0b, 5	; 11
     2f2:	55 9a       	sbi	0x0a, 5	; 10
     2f4:	5c 98       	cbi	0x0b, 4	; 11
     2f6:	54 9a       	sbi	0x0a, 4	; 10
     2f8:	80 fd       	sbrc	r24, 0
     2fa:	5c 9a       	sbi	0x0b, 4	; 11
     2fc:	58 98       	cbi	0x0b, 0	; 11
     2fe:	59 98       	cbi	0x0b, 1	; 11
     300:	5a 98       	cbi	0x0b, 2	; 11
     302:	5b 98       	cbi	0x0b, 3	; 11
     304:	64 fd       	sbrc	r22, 4
     306:	58 9a       	sbi	0x0b, 0	; 11
     308:	50 9a       	sbi	0x0a, 0	; 10
     30a:	65 fd       	sbrc	r22, 5
     30c:	59 9a       	sbi	0x0b, 1	; 11
     30e:	51 9a       	sbi	0x0a, 1	; 10
     310:	66 fd       	sbrc	r22, 6
     312:	5a 9a       	sbi	0x0b, 2	; 11
     314:	52 9a       	sbi	0x0a, 2	; 10
     316:	67 fd       	sbrc	r22, 7
     318:	5b 9a       	sbi	0x0b, 3	; 11
     31a:	53 9a       	sbi	0x0a, 3	; 10
     31c:	00 00       	nop
     31e:	5d 98       	cbi	0x0b, 5	; 11
     320:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <wait1us>
     324:	87 fd       	sbrc	r24, 7
     326:	11 c0       	rjmp	.+34     	; 0x34a <_lcd_hw_write_exit>
     328:	5d 9a       	sbi	0x0b, 5	; 11
     32a:	58 98       	cbi	0x0b, 0	; 11
     32c:	59 98       	cbi	0x0b, 1	; 11
     32e:	5a 98       	cbi	0x0b, 2	; 11
     330:	5b 98       	cbi	0x0b, 3	; 11
     332:	60 fd       	sbrc	r22, 0
     334:	58 9a       	sbi	0x0b, 0	; 11
     336:	61 fd       	sbrc	r22, 1
     338:	59 9a       	sbi	0x0b, 1	; 11
     33a:	62 fd       	sbrc	r22, 2
     33c:	5a 9a       	sbi	0x0b, 2	; 11
     33e:	63 fd       	sbrc	r22, 3
     340:	5b 9a       	sbi	0x0b, 3	; 11
     342:	00 00       	nop
     344:	5d 98       	cbi	0x0b, 5	; 11
     346:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <wait1us>

0000034a <_lcd_hw_write_exit>:
     34a:	08 95       	ret

0000034c <__vector_7>:
#define MAIN_C
#include "Transistortester.h"

#ifndef __AVR_ATmega8__
  // prepare sleep mode
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
     34c:	18 95       	reti

0000034e <ChargePin10ms>:
 }

//******************************************************************
#include "CheckPins.c"

void ChargePin10ms(uint8_t PinToCharge, uint8_t ChargeDirection) {
     34e:	df 93       	push	r29
     350:	cf 93       	push	r28
     352:	0f 92       	push	r0
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
   //Will be used by discharge of MOSFET Gates or to load big capacities.
   //Parameters:
   //PinToCharge: specifies the pin as mask for R-Port
   //ChargeDirection: 0 = switch to GND (N-Kanal-FET), 1= switch to VCC(P-Kanal-FET)

   if(ChargeDirection&1) {
     358:	60 ff       	sbrs	r22, 0
     35a:	03 c0       	rjmp	.+6      	; 0x362 <ChargePin10ms+0x14>
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
     35c:	95 b1       	in	r25, 0x05	; 5
     35e:	98 2b       	or	r25, r24
     360:	04 c0       	rjmp	.+8      	; 0x36a <ChargePin10ms+0x1c>
   } else {
      R_PORT &= ~PinToCharge; // or 0 (GND)
     362:	25 b1       	in	r18, 0x05	; 5
     364:	98 2f       	mov	r25, r24
     366:	90 95       	com	r25
     368:	92 23       	and	r25, r18
     36a:	95 b9       	out	0x05, r25	; 5
   }
   R_DDR |= PinToCharge;		//switch Pin to output, across R to GND or VCC
     36c:	94 b1       	in	r25, 0x04	; 4
     36e:	98 2b       	or	r25, r24
     370:	94 b9       	out	0x04, r25	; 4
   wait10ms();
     372:	89 83       	std	Y+1, r24	; 0x01
     374:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <wait10ms>
   // switch back Input, no current
   R_DDR &= ~PinToCharge;	// switch back to input
     378:	94 b1       	in	r25, 0x04	; 4
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	80 95       	com	r24
     37e:	98 23       	and	r25, r24
     380:	94 b9       	out	0x04, r25	; 4
   R_PORT &= ~PinToCharge;	// no Pull up
     382:	95 b1       	in	r25, 0x05	; 5
     384:	98 23       	and	r25, r24
     386:	95 b9       	out	0x05, r25	; 5
}
     388:	0f 90       	pop	r0
     38a:	cf 91       	pop	r28
     38c:	df 91       	pop	r29
     38e:	08 95       	ret

00000390 <CheckPins>:
//******************************************************************
void CheckPins(uint8_t HighPin, uint8_t LowPin, uint8_t TristatePin)
  {
     390:	2f 92       	push	r2
     392:	3f 92       	push	r3
     394:	4f 92       	push	r4
     396:	5f 92       	push	r5
     398:	6f 92       	push	r6
     39a:	7f 92       	push	r7
     39c:	8f 92       	push	r8
     39e:	9f 92       	push	r9
     3a0:	af 92       	push	r10
     3a2:	bf 92       	push	r11
     3a4:	cf 92       	push	r12
     3a6:	df 92       	push	r13
     3a8:	ef 92       	push	r14
     3aa:	ff 92       	push	r15
     3ac:	0f 93       	push	r16
     3ae:	1f 93       	push	r17
     3b0:	df 93       	push	r29
     3b2:	cf 93       	push	r28
     3b4:	cd b7       	in	r28, 0x3d	; 61
     3b6:	de b7       	in	r29, 0x3e	; 62
     3b8:	66 97       	sbiw	r28, 0x16	; 22
     3ba:	0f b6       	in	r0, 0x3f	; 63
     3bc:	f8 94       	cli
     3be:	de bf       	out	0x3e, r29	; 62
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	cd bf       	out	0x3d, r28	; 61
     3c4:	18 2f       	mov	r17, r24
     3c6:	36 2e       	mov	r3, r22
     3c8:	24 2e       	mov	r2, r20
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
     3ca:	a8 95       	wdr
//  #define RR680MI resis680mi
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = MEM_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
     3cc:	a6 2e       	mov	r10, r22
     3ce:	bb 24       	eor	r11, r11
     3d0:	c5 01       	movw	r24, r10
     3d2:	8b 55       	subi	r24, 0x5B	; 91
     3d4:	9e 4f       	sbci	r25, 0xFE	; 254
     3d6:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <__eerd_byte_m168>
     3da:	8a 83       	std	Y+2, r24	; 0x02
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
  TriPinRL = MEM_read_byte(&PinRLtab[TristatePin]);	// intruction for TristatePin R_L
     3dc:	82 2d       	mov	r24, r2
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	8b 55       	subi	r24, 0x5B	; 91
     3e2:	9e 4f       	sbci	r25, 0xFE	; 254
     3e4:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <__eerd_byte_m168>
     3e8:	d8 2e       	mov	r13, r24
  TriPinRH = TriPinRL + TriPinRL;			// intruction for TristatePin R_H
     3ea:	08 2f       	mov	r16, r24
     3ec:	00 0f       	add	r16, r16
  HiPinRL = MEM_read_byte(&PinRLtab[HighPin]);		// intruction for HighPin R_L
     3ee:	e1 2e       	mov	r14, r17
     3f0:	ff 24       	eor	r15, r15
     3f2:	c7 01       	movw	r24, r14
     3f4:	8b 55       	subi	r24, 0x5B	; 91
     3f6:	9e 4f       	sbci	r25, 0xFE	; 254
     3f8:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <__eerd_byte_m168>
     3fc:	c8 2e       	mov	r12, r24
  HiPinRH = HiPinRL + HiPinRL;				// intruction for HighPin R_H
     3fe:	28 2f       	mov	r18, r24
     400:	22 0f       	add	r18, r18
     402:	28 87       	std	Y+8, r18	; 0x08

  HiADCp = MEM_read_byte(&PinADCtab[HighPin]);		// intruction for ADC High-Pin 
     404:	c7 01       	movw	r24, r14
     406:	88 55       	subi	r24, 0x58	; 88
     408:	9e 4f       	sbci	r25, 0xFE	; 254
     40a:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <__eerd_byte_m168>
     40e:	89 83       	std	Y+1, r24	; 0x01
  LoADCp = MEM_read_byte(&PinADCtab[LowPin]);		// intruction for ADC Low-Pin
     410:	c5 01       	movw	r24, r10
     412:	88 55       	subi	r24, 0x58	; 88
     414:	9e 4f       	sbci	r25, 0xFE	; 254
     416:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <__eerd_byte_m168>
  HiADCm = HiADCp | TXD_MSK;
     41a:	39 81       	ldd	r19, Y+1	; 0x01
     41c:	38 60       	ori	r19, 0x08	; 8
     41e:	39 83       	std	Y+1, r19	; 0x01
  HiADCp |= TXD_VAL;
  LoADCm = LoADCp | TXD_MSK;
     420:	88 60       	ori	r24, 0x08	; 8
     422:	8b 83       	std	Y+3, r24	; 0x03
  LoADCp |= TXD_VAL;

  //setting of Pins 
  R_PORT = 0;				//resistor-Port outputs to 0
     424:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//Low-Pin to output and across R_L to GND
     426:	8a 81       	ldd	r24, Y+2	; 0x02
     428:	84 b9       	out	0x04, r24	; 4
  ADC_DDR = HiADCm;		//High-Pin to output
     42a:	37 b9       	out	0x07, r19	; 7
  ADC_PORT = HiADCp;		//High-Pin fix to Vcc
     42c:	38 b9       	out	0x08, r19	; 8
  //for some MOSFET the gate (TristatePin) must be discharged
  ChargePin10ms(TriPinRL,0);		//discharge for N-Kanal
     42e:	8d 2d       	mov	r24, r13
     430:	60 e0       	ldi	r22, 0x00	; 0
     432:	0e 94 a7 01 	call	0x34e	; 0x34e <ChargePin10ms>
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin 
     436:	83 2d       	mov	r24, r3
     438:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
     43c:	9a 87       	std	Y+10, r25	; 0x0a
     43e:	89 87       	std	Y+9, r24	; 0x09
  if(adc.lp_otr >= 977) {		//no current now? 
     440:	a3 e0       	ldi	r26, 0x03	; 3
     442:	81 3d       	cpi	r24, 0xD1	; 209
     444:	9a 07       	cpc	r25, r26
     446:	48 f0       	brcs	.+18     	; 0x45a <CheckPins+0xca>
     ChargePin10ms(TriPinRL,1);	 	//else: discharge for P-channel (Gate to VCC)
     448:	8d 2d       	mov	r24, r13
     44a:	61 e0       	ldi	r22, 0x01	; 1
     44c:	0e 94 a7 01 	call	0x34e	; 0x34e <ChargePin10ms>
     adc.lp_otr = ReadADC(LowPin);	//read voltage of Low-Pin again
     450:	83 2d       	mov	r24, r3
     452:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
     456:	9a 87       	std	Y+10, r25	; 0x0a
     458:	89 87       	std	Y+9, r24	; 0x09
  lcd_line2();
  lcd_clear_line();
  lcd_line2();
#endif

  if(adc.lp_otr > 92) {  //there is some current without TristatePin current 
     45a:	e9 85       	ldd	r30, Y+9	; 0x09
     45c:	fa 85       	ldd	r31, Y+10	; 0x0a
     45e:	ed 35       	cpi	r30, 0x5D	; 93
     460:	f1 05       	cpc	r31, r1
     462:	08 f4       	brcc	.+2      	; 0x466 <CheckPins+0xd6>
     464:	aa c0       	rjmp	.+340    	; 0x5ba <__stack+0xbb>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test if N-JFET or if self-conducting N-MOSFET
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
     466:	8a 81       	ldd	r24, Y+2	; 0x02
     468:	80 2b       	or	r24, r16
     46a:	84 b9       	out	0x04, r24	; 4
     adc.lp1 = W20msReadADC(LowPin);	//measure voltage at the assumed Source 
     46c:	83 2d       	mov	r24, r3
     46e:	0e 94 9b 1a 	call	0x3536	; 0x3536 <W20msReadADC>
     472:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     474:	82 2d       	mov	r24, r2
     476:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
     47a:	7c 01       	movw	r14, r24
     R_PORT = TriPinRH;			//switch R_H for Tristate-Pin (probably Gate) to VCC
     47c:	05 b9       	out	0x05, r16	; 5
     adc.lp2 = W20msReadADC(LowPin);	//measure voltage at the assumed Source again
     47e:	83 2d       	mov	r24, r3
     480:	0e 94 9b 1a 	call	0x3536	; 0x3536 <W20msReadADC>
     //If it is a self-conducting MOSFET or JFET, then must be: adc.lp2 > adc.lp1 
     if(adc.lp2>(adc.lp1+488)) {
     484:	95 01       	movw	r18, r10
     486:	28 51       	subi	r18, 0x18	; 24
     488:	3e 4f       	sbci	r19, 0xFE	; 254
     48a:	28 17       	cp	r18, r24
     48c:	39 07       	cpc	r19, r25
     48e:	08 f0       	brcs	.+2      	; 0x492 <CheckPins+0x102>
     490:	40 c0       	rjmp	.+128    	; 0x512 <__stack+0x13>
        //measure voltage at the  Gate, differ between MOSFET and JFET
        ADC_PORT = TXD_VAL;
     492:	88 e0       	ldi	r24, 0x08	; 8
     494:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = LoADCm;	//Low-Pin fix to GND
     496:	fb 81       	ldd	r31, Y+3	; 0x03
     498:	f7 b9       	out	0x07, r31	; 7
        R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     49a:	80 2f       	mov	r24, r16
     49c:	8c 29       	or	r24, r12
     49e:	84 b9       	out	0x04, r24	; 4
        R_PORT = TriPinRH | HiPinRL;	//switch R_L for High-Pin to VCC
     4a0:	85 b9       	out	0x05, r24	; 5
        adc.lp2 = W20msReadADC(TristatePin); //read voltage of assumed Gate 
     4a2:	82 2d       	mov	r24, r2
     4a4:	0e 94 9b 1a 	call	0x3536	; 0x3536 <W20msReadADC>
        if(adc.lp2>3911) {  //MOSFET
     4a8:	2f e0       	ldi	r18, 0x0F	; 15
     4aa:	88 34       	cpi	r24, 0x48	; 72
     4ac:	92 07       	cpc	r25, r18
     4ae:	28 f0       	brcs	.+10     	; 0x4ba <CheckPins+0x12a>
           PartFound = PART_FET;	//N-Kanal-MOSFET
     4b0:	83 e0       	ldi	r24, 0x03	; 3
     4b2:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_N_D_MOS; //Depletion-MOSFET
     4b6:	84 e0       	ldi	r24, 0x04	; 4
     4b8:	04 c0       	rjmp	.+8      	; 0x4c2 <CheckPins+0x132>
        } else {  //JFET (pn-passage between Gate and Source is conducting )
           PartFound = PART_FET;	//N-Kanal-JFET
     4ba:	83 e0       	ldi	r24, 0x03	; 3
     4bc:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_N_JFET;
     4c0:	86 e0       	ldi	r24, 0x06	; 6
     4c2:	80 93 06 01 	sts	0x0106, r24
        }
//      if ((PartReady == 0) || (adc.lp1 > trans.uBE[0])) 
//      there is no way to find out the right Source / Drain
        trans.uBE[0] = adc.lp1;
     4c6:	b0 92 4f 01 	sts	0x014F, r11
     4ca:	a0 92 4e 01 	sts	0x014E, r10
        gthvoltage = adc.lp1 - adc.tp1;	//voltage GS (Source - Gate)
     4ce:	c5 01       	movw	r24, r10
     4d0:	8e 19       	sub	r24, r14
     4d2:	9f 09       	sbc	r25, r15
     4d4:	90 93 57 01 	sts	0x0157, r25
     4d8:	80 93 56 01 	sts	0x0156, r24
        trans.uBE[1] = (unsigned int)(((unsigned long)adc.lp1 * 1000) / RR680MI); // Id 0.01mA
     4dc:	b5 01       	movw	r22, r10
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	28 ee       	ldi	r18, 0xE8	; 232
     4e4:	33 e0       	ldi	r19, 0x03	; 3
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
     4ee:	20 91 02 01 	lds	r18, 0x0102
     4f2:	30 91 03 01 	lds	r19, 0x0103
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
     4fe:	30 93 51 01 	sts	0x0151, r19
     502:	20 93 50 01 	sts	0x0150, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     506:	20 92 52 01 	sts	0x0152, r2
        trans.c = HighPin;
     50a:	10 93 53 01 	sts	0x0153, r17
        trans.e = LowPin;
     50e:	30 92 54 01 	sts	0x0154, r3
     }

     ADC_PORT = TXD_VAL;		// direct outputs to GND
     512:	88 e0       	ldi	r24, 0x08	; 8
     514:	88 b9       	out	0x08, r24	; 8

     //Test, if P-JFET or if self-conducting P-MOSFET
     ADC_DDR = LoADCm;		//switch Low-Pin (assumed Drain) direct to GND,
     516:	3b 81       	ldd	r19, Y+3	; 0x03
     518:	37 b9       	out	0x07, r19	; 7
				//R_H for Tristate-Pin (assumed Gate) is already switched to VCC
     R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     51a:	80 2f       	mov	r24, r16
     51c:	8c 29       	or	r24, r12
     51e:	84 b9       	out	0x04, r24	; 4
     R_PORT = TriPinRH | HiPinRL;	//High-Pin across R_L to Vcc
     520:	85 b9       	out	0x05, r24	; 5
     adc.hp1 = W20msReadADC(HighPin);	//measure voltage at assumed Source 
     522:	81 2f       	mov	r24, r17
     524:	0e 94 9b 1a 	call	0x3536	; 0x3536 <W20msReadADC>
     528:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     52a:	82 2d       	mov	r24, r2
     52c:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
     530:	7c 01       	movw	r14, r24
     R_PORT = HiPinRL;			//switch R_H for Tristate-Pin (assumed Gate) to GND
     532:	c5 b8       	out	0x05, r12	; 5
     adc.hp2 = W20msReadADC(HighPin);	//read voltage at assumed Source again
     534:	81 2f       	mov	r24, r17
     536:	0e 94 9b 1a 	call	0x3536	; 0x3536 <W20msReadADC>
     //if it is a self-conducting P_MOSFET or P-JFET , then must be:  adc.hp1 > adc.hp2 
     if(adc.hp1>(adc.hp2+488)) {
     53a:	88 51       	subi	r24, 0x18	; 24
     53c:	9e 4f       	sbci	r25, 0xFE	; 254
     53e:	8a 15       	cp	r24, r10
     540:	9b 05       	cpc	r25, r11
     542:	d8 f5       	brcc	.+118    	; 0x5ba <__stack+0xbb>
        //read voltage at the Gate , to differ between MOSFET and JFET
        ADC_PORT = HiADCp;	//switch High-Pin directly to VCC
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = HiADCm;	//switch High-Pin to output
     548:	87 b9       	out	0x07, r24	; 7
        adc.tp2 = W20msReadADC(TristatePin); //read voltage at the assumed Gate 
     54a:	82 2d       	mov	r24, r2
     54c:	0e 94 9b 1a 	call	0x3536	; 0x3536 <W20msReadADC>
        if(adc.tp2<977) { 		//MOSFET
     550:	a3 e0       	ldi	r26, 0x03	; 3
     552:	81 3d       	cpi	r24, 0xD1	; 209
     554:	9a 07       	cpc	r25, r26
     556:	28 f4       	brcc	.+10     	; 0x562 <__stack+0x63>
           PartFound = PART_FET;	//P-Kanal-MOSFET
     558:	83 e0       	ldi	r24, 0x03	; 3
     55a:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_D_MOS; //Depletion-MOSFET
     55e:	85 e0       	ldi	r24, 0x05	; 5
     560:	04 c0       	rjmp	.+8      	; 0x56a <__stack+0x6b>
        } else { 			//JFET (pn-passage between Gate and Source is conducting)
           PartFound = PART_FET;	//P-Kanal-JFET
     562:	83 e0       	ldi	r24, 0x03	; 3
     564:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_JFET;
     568:	87 e0       	ldi	r24, 0x07	; 7
     56a:	80 93 06 01 	sts	0x0106, r24
        }
        gthvoltage = adc.tp1 - adc.hp1;		//voltage GS (Gate - Source)
     56e:	ea 18       	sub	r14, r10
     570:	fb 08       	sbc	r15, r11
     572:	f0 92 57 01 	sts	0x0157, r15
     576:	e0 92 56 01 	sts	0x0156, r14
        trans.uBE[1] = (unsigned int)(((unsigned long)(ADCconfig.U_AVCC - adc.hp1) * 1000) / RR680PL); // Id 0.01mA
     57a:	60 91 3d 01 	lds	r22, 0x013D
     57e:	70 91 3e 01 	lds	r23, 0x013E
     582:	6a 19       	sub	r22, r10
     584:	7b 09       	sbc	r23, r11
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	28 ee       	ldi	r18, 0xE8	; 232
     58c:	33 e0       	ldi	r19, 0x03	; 3
     58e:	40 e0       	ldi	r20, 0x00	; 0
     590:	50 e0       	ldi	r21, 0x00	; 0
     592:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
     596:	20 91 08 01 	lds	r18, 0x0108
     59a:	30 91 09 01 	lds	r19, 0x0109
     59e:	40 e0       	ldi	r20, 0x00	; 0
     5a0:	50 e0       	ldi	r21, 0x00	; 0
     5a2:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
     5a6:	30 93 51 01 	sts	0x0151, r19
     5aa:	20 93 50 01 	sts	0x0150, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     5ae:	20 92 52 01 	sts	0x0152, r2
        trans.c = LowPin;
     5b2:	30 92 53 01 	sts	0x0153, r3
        trans.e = HighPin;
     5b6:	10 93 54 01 	sts	0x0154, r17
  } // end component has current without TristatePin signal


#ifdef COMMON_COLLECTOR
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
     5ba:	88 e0       	ldi	r24, 0x08	; 8
     5bc:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;			// Collector direct to GND
     5be:	bb 81       	ldd	r27, Y+3	; 0x03
     5c0:	b7 b9       	out	0x07, r27	; 7
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
     5c2:	c5 b8       	out	0x05, r12	; 5
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
     5c4:	ec 2d       	mov	r30, r12
     5c6:	ed 29       	or	r30, r13
     5c8:	eb 87       	std	Y+11, r30	; 0x0b
     5ca:	e4 b9       	out	0x04, r30	; 4
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     5cc:	a0 90 3d 01 	lds	r10, 0x013D
     5d0:	b0 90 3e 01 	lds	r11, 0x013E
     5d4:	81 2f       	mov	r24, r17
     5d6:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
     5da:	7c 01       	movw	r14, r24
  adc.tp1 = ReadADC(TristatePin);	// voltage at the base resistor
     5dc:	82 2d       	mov	r24, r2
     5de:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
     5e2:	4c 01       	movw	r8, r24

  if (adc.tp1 < 10) {
     5e4:	8a 30       	cpi	r24, 0x0A	; 10
     5e6:	91 05       	cpc	r25, r1
     5e8:	68 f5       	brcc	.+90     	; 0x644 <__stack+0x145>
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
     5ea:	80 2f       	mov	r24, r16
     5ec:	8c 29       	or	r24, r12
     5ee:	84 b9       	out	0x04, r24	; 4
     adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);
     5f0:	a0 90 3d 01 	lds	r10, 0x013D
     5f4:	b0 90 3e 01 	lds	r11, 0x013E
     5f8:	81 2f       	mov	r24, r17
     5fa:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
     5fe:	a8 1a       	sub	r10, r24
     600:	b9 0a       	sbc	r11, r25
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
     602:	82 2d       	mov	r24, r2
     604:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
     608:	4c 01       	movw	r8, r24
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     60a:	25 01       	movw	r4, r10
     60c:	66 24       	eor	r6, r6
     60e:	77 24       	eor	r7, r7
     610:	20 91 08 01 	lds	r18, 0x0108
     614:	30 91 09 01 	lds	r19, 0x0109
     618:	40 e0       	ldi	r20, 0x00	; 0
     61a:	50 e0       	ldi	r21, 0x00	; 0
     61c:	60 e6       	ldi	r22, 0x60	; 96
     61e:	77 eb       	ldi	r23, 0xB7	; 183
     620:	87 e4       	ldi	r24, 0x47	; 71
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
     628:	c3 01       	movw	r24, r6
     62a:	b2 01       	movw	r22, r4
     62c:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
     630:	94 01       	movw	r18, r8
     632:	40 e0       	ldi	r20, 0x00	; 0
     634:	50 e0       	ldi	r21, 0x00	; 0
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     636:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
     63a:	2c 83       	std	Y+4, r18	; 0x04
     63c:	3d 83       	std	Y+5, r19	; 0x05
     63e:	4e 83       	std	Y+6, r20	; 0x06
     640:	5f 83       	std	Y+7, r21	; 0x07
     642:	0f c0       	rjmp	.+30     	; 0x662 <__stack+0x163>
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
  ADC_DDR = LoADCm;			// Collector direct to GND
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     644:	ae 18       	sub	r10, r14
     646:	bf 08       	sbc	r11, r15
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
 #else
     c_hfe = ((adc.hp1 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
  } else {
     c_hfe = (unsigned long)((adc.hp1 - adc.tp1) / adc.tp1);
     648:	c5 01       	movw	r24, r10
     64a:	88 19       	sub	r24, r8
     64c:	99 09       	sbc	r25, r9
     64e:	b4 01       	movw	r22, r8
     650:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <__udivmodhi4>
     654:	cb 01       	movw	r24, r22
     656:	a0 e0       	ldi	r26, 0x00	; 0
     658:	b0 e0       	ldi	r27, 0x00	; 0
     65a:	8c 83       	std	Y+4, r24	; 0x04
     65c:	9d 83       	std	Y+5, r25	; 0x05
     65e:	ae 83       	std	Y+6, r26	; 0x06
     660:	bf 83       	std	Y+7, r27	; 0x07
  }
#endif

  //set Pins again for circuit with common Emitter PNP
  R_DDR = LoPinRL;		//switch R_L port for Low-Pin to output (GND)
     662:	9a 81       	ldd	r25, Y+2	; 0x02
     664:	94 b9       	out	0x04, r25	; 4
  R_PORT = 0;			//switch all resistor ports to GND
     666:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = HiADCm;		//switch High-Pin to output
     668:	a9 81       	ldd	r26, Y+1	; 0x01
     66a:	a7 b9       	out	0x07, r26	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
     66c:	a8 b9       	out	0x08, r26	; 8
  wait5ms();
     66e:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <wait5ms>
  
  if(adc.lp_otr < 977) {
     672:	e9 85       	ldd	r30, Y+9	; 0x09
     674:	fa 85       	ldd	r31, Y+10	; 0x0a
     676:	23 e0       	ldi	r18, 0x03	; 3
     678:	e1 3d       	cpi	r30, 0xD1	; 209
     67a:	f2 07       	cpc	r31, r18
     67c:	08 f0       	brcs	.+2      	; 0x680 <__stack+0x181>
     67e:	a2 c2       	rjmp	.+1348   	; 0xbc4 <__stack+0x6c5>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test to PNP
     R_DDR = LoPinRL | TriPinRL;	//switch R_L port for Tristate-Pin to output (GND), for Test of PNP
     680:	3a 81       	ldd	r19, Y+2	; 0x02
     682:	3d 29       	or	r19, r13
     684:	3f 87       	std	Y+15, r19	; 0x0f
     686:	34 b9       	out	0x04, r19	; 4
     adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin
     688:	83 2d       	mov	r24, r3
     68a:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
     if(adc.lp1 > 3422) {
     68e:	ad e0       	ldi	r26, 0x0D	; 13
     690:	8f 35       	cpi	r24, 0x5F	; 95
     692:	9a 07       	cpc	r25, r26
     694:	08 f4       	brcc	.+2      	; 0x698 <__stack+0x199>
     696:	e1 c0       	rjmp	.+450    	; 0x85a <__stack+0x35b>
        //component has current => PNP-Transistor or equivalent
        //compute current amplification factor in both directions
        R_DDR = LoPinRL | TriPinRH;	//switch R_H port for Tristate-Pin (Base) to output (GND)
     698:	ba 81       	ldd	r27, Y+2	; 0x02
     69a:	b0 2b       	or	r27, r16
     69c:	b8 8b       	std	Y+16, r27	; 0x10
     69e:	b4 b9       	out	0x04, r27	; 4

        adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin (assumed Collector)
     6a0:	83 2d       	mov	r24, r3
     6a2:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
     6a6:	9a 8b       	std	Y+18, r25	; 0x12
     6a8:	89 8b       	std	Y+17, r24	; 0x11
        adc.tp2 = ReadADC(TristatePin);	//measure voltage at TristatePin (Base) 
     6aa:	82 2d       	mov	r24, r2
     6ac:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
     6b0:	9d 8b       	std	Y+21, r25	; 0x15
     6b2:	8c 8b       	std	Y+20, r24	; 0x14
        //check, if Test is done before 
        if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     6b4:	80 91 07 01 	lds	r24, 0x0107
     6b8:	82 50       	subi	r24, 0x02	; 2
     6ba:	82 30       	cpi	r24, 0x02	; 2
     6bc:	18 f4       	brcc	.+6      	; 0x6c4 <__stack+0x1c5>
           PartReady = 1;
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	80 93 04 01 	sts	0x0104, r24
        }
        trans.uBE[PartReady] = ReadADC(HighPin) - adc.tp2;	// Base Emitter Voltage
     6c4:	e0 90 04 01 	lds	r14, 0x0104
     6c8:	ff 24       	eor	r15, r15
     6ca:	81 2f       	mov	r24, r17
     6cc:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
     6d0:	f7 01       	movw	r30, r14
     6d2:	ee 0f       	add	r30, r30
     6d4:	ff 1f       	adc	r31, r31
     6d6:	e2 5b       	subi	r30, 0xB2	; 178
     6d8:	fe 4f       	sbci	r31, 0xFE	; 254
     6da:	2c 89       	ldd	r18, Y+20	; 0x14
     6dc:	3d 89       	ldd	r19, Y+21	; 0x15
     6de:	82 1b       	sub	r24, r18
     6e0:	93 0b       	sbc	r25, r19
     6e2:	91 83       	std	Z+1, r25	; 0x01
     6e4:	80 83       	st	Z, r24

        //compute current amplification factor for circuit with common Emitter
        //hFE = B = Collector current / Base current
        if(adc.tp2 < 53) {
     6e6:	25 33       	cpi	r18, 0x35	; 53
     6e8:	31 05       	cpc	r19, r1
     6ea:	20 f4       	brcc	.+8      	; 0x6f4 <__stack+0x1f5>
#if DebugOut == 5
           lcd_data('<');
           lcd_data('5');
           lcd_data('3');
#endif
           adc.tp2 = 53;
     6ec:	85 e3       	ldi	r24, 0x35	; 53
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	9d 8b       	std	Y+21, r25	; 0x15
     6f2:	8c 8b       	std	Y+20, r24	; 0x14
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     6f4:	e0 90 04 01 	lds	r14, 0x0104
     6f8:	ff 24       	eor	r15, r15
     6fa:	a9 89       	ldd	r26, Y+17	; 0x11
     6fc:	ba 89       	ldd	r27, Y+18	; 0x12
     6fe:	2d 01       	movw	r4, r26
     700:	66 24       	eor	r6, r6
     702:	77 24       	eor	r7, r7
     704:	20 91 02 01 	lds	r18, 0x0102
     708:	30 91 03 01 	lds	r19, 0x0103
     70c:	40 e0       	ldi	r20, 0x00	; 0
     70e:	50 e0       	ldi	r21, 0x00	; 0
     710:	60 e6       	ldi	r22, 0x60	; 96
     712:	77 eb       	ldi	r23, 0xB7	; 183
     714:	87 e4       	ldi	r24, 0x47	; 71
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
     71c:	c3 01       	movw	r24, r6
     71e:	b2 01       	movw	r22, r4
     720:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
                 (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
     724:	ec 89       	ldd	r30, Y+20	; 0x14
     726:	fd 89       	ldd	r31, Y+21	; 0x15
     728:	9f 01       	movw	r18, r30
     72a:	40 e0       	ldi	r20, 0x00	; 0
     72c:	50 e0       	ldi	r21, 0x00	; 0
     72e:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
#endif
           adc.tp2 = 53;
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     732:	f7 01       	movw	r30, r14
     734:	ee 0f       	add	r30, r30
     736:	ff 1f       	adc	r31, r31
     738:	ee 0f       	add	r30, r30
     73a:	ff 1f       	adc	r31, r31
     73c:	ea 5b       	subi	r30, 0xBA	; 186
     73e:	fe 4f       	sbci	r31, 0xFE	; 254
     740:	20 83       	st	Z, r18
     742:	31 83       	std	Z+1, r19	; 0x01
     744:	42 83       	std	Z+2, r20	; 0x02
     746:	53 83       	std	Z+3, r21	; 0x03
        trans.hfe[PartReady] = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
#ifdef COMMON_COLLECTOR
        //current amplification factor for common  Collector (Emitter follower)
        // c_hFE = (Emitter current - Base current) / Base current
        if (c_hfe > trans.hfe[PartReady]) {
     748:	8c 81       	ldd	r24, Y+4	; 0x04
     74a:	9d 81       	ldd	r25, Y+5	; 0x05
     74c:	ae 81       	ldd	r26, Y+6	; 0x06
     74e:	bf 81       	ldd	r27, Y+7	; 0x07
     750:	28 17       	cp	r18, r24
     752:	39 07       	cpc	r19, r25
     754:	4a 07       	cpc	r20, r26
     756:	5b 07       	cpc	r21, r27
     758:	98 f4       	brcc	.+38     	; 0x780 <__stack+0x281>
           trans.hfe[PartReady] = c_hfe;
     75a:	80 83       	st	Z, r24
     75c:	91 83       	std	Z+1, r25	; 0x01
     75e:	a2 83       	std	Z+2, r26	; 0x02
     760:	b3 83       	std	Z+3, r27	; 0x03
           trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.hp1 - adc.tp1;	// Base Emitter Voltage common collector
     762:	f7 01       	movw	r30, r14
     764:	ee 0f       	add	r30, r30
     766:	ff 1f       	adc	r31, r31
     768:	e2 5b       	subi	r30, 0xB2	; 178
     76a:	fe 4f       	sbci	r31, 0xFE	; 254
     76c:	80 91 3d 01 	lds	r24, 0x013D
     770:	90 91 3e 01 	lds	r25, 0x013E
     774:	8a 19       	sub	r24, r10
     776:	9b 09       	sbc	r25, r11
     778:	88 19       	sub	r24, r8
     77a:	99 09       	sbc	r25, r9
     77c:	91 83       	std	Z+1, r25	; 0x01
     77e:	80 83       	st	Z, r24
        }
#endif

 
        if(PartFound != PART_THYRISTOR) {
     780:	80 91 07 01 	lds	r24, 0x0107
     784:	85 30       	cpi	r24, 0x05	; 5
     786:	09 f4       	brne	.+2      	; 0x78a <__stack+0x28b>
     788:	68 c0       	rjmp	.+208    	; 0x85a <__stack+0x35b>
           if(adc.tp2 > 977) {
     78a:	ac 89       	ldd	r26, Y+20	; 0x14
     78c:	bd 89       	ldd	r27, Y+21	; 0x15
     78e:	e3 e0       	ldi	r30, 0x03	; 3
     790:	a2 3d       	cpi	r26, 0xD2	; 210
     792:	be 07       	cpc	r27, r30
     794:	30 f0       	brcs	.+12     	; 0x7a2 <__stack+0x2a3>
              //PNP-Transistor is found (Base voltage moves to VCC)
              PartFound = PART_TRANSISTOR;
     796:	82 e0       	ldi	r24, 0x02	; 2
     798:	80 93 07 01 	sts	0x0107, r24
              PartMode = PART_MODE_PNP;
     79c:	80 93 06 01 	sts	0x0106, r24
     7a0:	56 c0       	rjmp	.+172    	; 0x84e <__stack+0x34f>
           } else {
              if((adc.lp_otr < 97) && (adc.lp1 > 2000)) {
     7a2:	29 85       	ldd	r18, Y+9	; 0x09
     7a4:	3a 85       	ldd	r19, Y+10	; 0x0a
     7a6:	21 36       	cpi	r18, 0x61	; 97
     7a8:	31 05       	cpc	r19, r1
     7aa:	08 f0       	brcs	.+2      	; 0x7ae <__stack+0x2af>
     7ac:	50 c0       	rjmp	.+160    	; 0x84e <__stack+0x34f>
     7ae:	89 89       	ldd	r24, Y+17	; 0x11
     7b0:	9a 89       	ldd	r25, Y+18	; 0x12
     7b2:	a7 e0       	ldi	r26, 0x07	; 7
     7b4:	81 3d       	cpi	r24, 0xD1	; 209
     7b6:	9a 07       	cpc	r25, r26
     7b8:	08 f4       	brcc	.+2      	; 0x7bc <__stack+0x2bd>
     7ba:	49 c0       	rjmp	.+146    	; 0x84e <__stack+0x34f>
                 //is flow voltage low enough in the closed  state?
                 //(since D-Mode-FET would be by mistake detected as E-Mode )
        	 PartFound = PART_FET;		//P-Kanal-MOSFET is found (Basis/Gate moves not to VCC)
     7bc:	83 e0       	ldi	r24, 0x03	; 3
     7be:	80 93 07 01 	sts	0x0107, r24
        	 PartMode = PART_MODE_P_E_MOS;
     7c2:	80 93 06 01 	sts	0x0106, r24
                 }
#else
                 //Switching of Drain is monitored with digital input
                 // Low level is specified up to 0.3 * VCC
                 // High level is specified above 0.6 * VCC
                 PinMSK = LoADCm & 7;
     7c6:	eb 80       	ldd	r14, Y+3	; 0x03
     7c8:	b7 e0       	ldi	r27, 0x07	; 7
     7ca:	eb 22       	and	r14, r27
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
     7cc:	82 2d       	mov	r24, r2
     7ce:	80 64       	ori	r24, 0x40	; 64
     7d0:	80 93 7c 00 	sts	0x007C, r24
        	 gthvoltage = 1;			// round up ((1*4)/9)
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	90 93 57 01 	sts	0x0157, r25
     7dc:	80 93 56 01 	sts	0x0156, r24
        	 for(ii=0;ii<11;ii++) {
     7e0:	40 e0       	ldi	r20, 0x00	; 0
        	    wdt_reset();
     7e2:	a8 95       	wdr
        	    ChargePin10ms(TriPinRL,1);
     7e4:	8d 2d       	mov	r24, r13
     7e6:	61 e0       	ldi	r22, 0x01	; 1
     7e8:	4e 8b       	std	Y+22, r20	; 0x16
     7ea:	0e 94 a7 01 	call	0x34e	; 0x34e <ChargePin10ms>
                    R_DDR = LoPinRL | TriPinRH;		//switch R_H for Tristate-Pin (Basis) to GND
     7ee:	e8 89       	ldd	r30, Y+16	; 0x10
     7f0:	e4 b9       	out	0x04, r30	; 4
     7f2:	4e 89       	ldd	r20, Y+22	; 0x16
        	    while (!(ADC_PIN&PinMSK));		// Wait, until the MOSFET switches and Drain moves to VCC
     7f4:	86 b1       	in	r24, 0x06	; 6
     7f6:	8e 21       	and	r24, r14
     7f8:	e9 f3       	breq	.-6      	; 0x7f4 <__stack+0x2f5>
                    			// 1 is detected with more than 2.5V (up to 2.57V) with tests of mega168 and mega328
        	    R_DDR = LoPinRL;
     7fa:	fa 81       	ldd	r31, Y+2	; 0x02
     7fc:	f4 b9       	out	0x04, r31	; 4
        	    ADCSRA |= (1<<ADSC);		// Start Conversion
     7fe:	80 91 7a 00 	lds	r24, 0x007A
     802:	80 64       	ori	r24, 0x40	; 64
     804:	80 93 7a 00 	sts	0x007A, r24
        	    while (ADCSRA&(1<<ADSC));		// wait
     808:	80 91 7a 00 	lds	r24, 0x007A
     80c:	86 fd       	sbrc	r24, 6
     80e:	fc cf       	rjmp	.-8      	; 0x808 <__stack+0x309>
      		    gthvoltage += (1023 - ADCW);	// Add Tristatepin-Voltage
     810:	20 91 78 00 	lds	r18, 0x0078
     814:	30 91 79 00 	lds	r19, 0x0079
     818:	80 91 56 01 	lds	r24, 0x0156
     81c:	90 91 57 01 	lds	r25, 0x0157
     820:	81 50       	subi	r24, 0x01	; 1
     822:	9c 4f       	sbci	r25, 0xFC	; 252
     824:	82 1b       	sub	r24, r18
     826:	93 0b       	sbc	r25, r19
     828:	90 93 57 01 	sts	0x0157, r25
     82c:	80 93 56 01 	sts	0x0156, r24
                 // Low level is specified up to 0.3 * VCC
                 // High level is specified above 0.6 * VCC
                 PinMSK = LoADCm & 7;
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
        	 gthvoltage = 1;			// round up ((1*4)/9)
        	 for(ii=0;ii<11;ii++) {
     830:	4f 5f       	subi	r20, 0xFF	; 255
     832:	4b 30       	cpi	r20, 0x0B	; 11
     834:	b1 f6       	brne	.-84     	; 0x7e2 <__stack+0x2e3>
        	    ADCSRA |= (1<<ADSC);		// Start Conversion
        	    while (ADCSRA&(1<<ADSC));		// wait
      		    gthvoltage += (1023 - ADCW);	// Add Tristatepin-Voltage
                 }
#endif
                 gthvoltage *= 4;		// is equal to 44*ADCW
     836:	88 0f       	add	r24, r24
     838:	99 1f       	adc	r25, r25
     83a:	88 0f       	add	r24, r24
     83c:	99 1f       	adc	r25, r25
                 gthvoltage /= 9;		// gives resolution in mV
     83e:	69 e0       	ldi	r22, 0x09	; 9
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <__udivmodhi4>
     846:	70 93 57 01 	sts	0x0157, r23
     84a:	60 93 56 01 	sts	0x0156, r22
              }
           }
           trans.b = TristatePin;
     84e:	20 92 52 01 	sts	0x0152, r2
           trans.c = LowPin;
     852:	30 92 53 01 	sts	0x0153, r3
           trans.e = HighPin;
     856:	10 93 54 01 	sts	0x0154, r17
        }  // end if PartFound != PART_THYRISTOR
    } // end component has current => PNP

#ifdef COMMON_COLLECTOR
    // Low-Pin=RL- HighPin=VCC
    R_DDR = LoPinRL | TriPinRL;
     85a:	2f 85       	ldd	r18, Y+15	; 0x0f
     85c:	24 b9       	out	0x04, r18	; 4
    R_PORT = TriPinRL;			// TriPin=RL+  NPN with common Collector
     85e:	d5 b8       	out	0x05, r13	; 5
    adc.lp1 = W5msReadADC(LowPin);	// voltage at Emitter resistor
     860:	83 2d       	mov	r24, r3
     862:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
     866:	2c 01       	movw	r4, r24
    adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     868:	80 91 3d 01 	lds	r24, 0x013D
     86c:	90 91 3e 01 	lds	r25, 0x013E
     870:	9a 8b       	std	Y+18, r25	; 0x12
     872:	89 8b       	std	Y+17, r24	; 0x11
     874:	82 2d       	mov	r24, r2
     876:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
     87a:	a9 89       	ldd	r26, Y+17	; 0x11
     87c:	ba 89       	ldd	r27, Y+18	; 0x12
     87e:	a8 1b       	sub	r26, r24
     880:	b9 0b       	sbc	r27, r25
     882:	ba 8b       	std	Y+18, r27	; 0x12
     884:	a9 8b       	std	Y+17, r26	; 0x11
    if (adc.tp1 < 10) {
     886:	aa 30       	cpi	r26, 0x0A	; 10
     888:	b1 05       	cpc	r27, r1
     88a:	b0 f5       	brcc	.+108    	; 0x8f8 <__stack+0x3f9>
       R_DDR = LoPinRL | TriPinRH;
     88c:	8a 81       	ldd	r24, Y+2	; 0x02
     88e:	80 2b       	or	r24, r16
     890:	84 b9       	out	0x04, r24	; 4
       R_PORT = TriPinRH;		// Tripin=RH+
     892:	05 b9       	out	0x05, r16	; 5
       adc.lp1 = W5msReadADC(LowPin);
     894:	83 2d       	mov	r24, r3
     896:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
     89a:	2c 01       	movw	r4, r24
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     89c:	e0 91 3d 01 	lds	r30, 0x013D
     8a0:	f0 91 3e 01 	lds	r31, 0x013E
     8a4:	fa 8b       	std	Y+18, r31	; 0x12
     8a6:	e9 8b       	std	Y+17, r30	; 0x11
     8a8:	82 2d       	mov	r24, r2
     8aa:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
     8ae:	29 89       	ldd	r18, Y+17	; 0x11
     8b0:	3a 89       	ldd	r19, Y+18	; 0x12
     8b2:	28 1b       	sub	r18, r24
     8b4:	39 0b       	sbc	r19, r25
     8b6:	3a 8b       	std	Y+18, r19	; 0x12
     8b8:	29 8b       	std	Y+17, r18	; 0x11
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     8ba:	42 01       	movw	r8, r4
     8bc:	aa 24       	eor	r10, r10
     8be:	bb 24       	eor	r11, r11
     8c0:	20 91 02 01 	lds	r18, 0x0102
     8c4:	30 91 03 01 	lds	r19, 0x0103
     8c8:	40 e0       	ldi	r20, 0x00	; 0
     8ca:	50 e0       	ldi	r21, 0x00	; 0
     8cc:	60 e6       	ldi	r22, 0x60	; 96
     8ce:	77 eb       	ldi	r23, 0xB7	; 183
     8d0:	87 e4       	ldi	r24, 0x47	; 71
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
     8d8:	c5 01       	movw	r24, r10
     8da:	b4 01       	movw	r22, r8
     8dc:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
     8e0:	a9 89       	ldd	r26, Y+17	; 0x11
     8e2:	ba 89       	ldd	r27, Y+18	; 0x12
     8e4:	9d 01       	movw	r18, r26
     8e6:	40 e0       	ldi	r20, 0x00	; 0
     8e8:	50 e0       	ldi	r21, 0x00	; 0
       R_DDR = LoPinRL | TriPinRH;
       R_PORT = TriPinRH;		// Tripin=RH+
       adc.lp1 = W5msReadADC(LowPin);
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     8ea:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
     8ee:	2c 83       	std	Y+4, r18	; 0x04
     8f0:	3d 83       	std	Y+5, r19	; 0x05
     8f2:	4e 83       	std	Y+6, r20	; 0x06
     8f4:	5f 83       	std	Y+7, r21	; 0x07
     8f6:	0f c0       	rjmp	.+30     	; 0x916 <__stack+0x417>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
 #else
       c_hfe = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
    } else {
       c_hfe = (adc.lp1 - adc.tp1) / adc.tp1;
     8f8:	c2 01       	movw	r24, r4
     8fa:	e9 89       	ldd	r30, Y+17	; 0x11
     8fc:	fa 89       	ldd	r31, Y+18	; 0x12
     8fe:	8e 1b       	sub	r24, r30
     900:	9f 0b       	sbc	r25, r31
     902:	bf 01       	movw	r22, r30
     904:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <__udivmodhi4>
     908:	cb 01       	movw	r24, r22
     90a:	a0 e0       	ldi	r26, 0x00	; 0
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	8c 83       	std	Y+4, r24	; 0x04
     910:	9d 83       	std	Y+5, r25	; 0x05
     912:	ae 83       	std	Y+6, r26	; 0x06
     914:	bf 83       	std	Y+7, r27	; 0x07
       lcd_string(utoa(adc.tp1,outval,10));
       wait_about1s();
#endif
#endif
    //Tristate (can be Base) to VCC, Test if NPN
    ADC_DDR = LoADCm;		//Low-Pin to output 0V
     916:	9b 81       	ldd	r25, Y+3	; 0x03
     918:	97 b9       	out	0x07, r25	; 7
    ADC_PORT = TXD_VAL;			//switch Low-Pin to GND
     91a:	88 e0       	ldi	r24, 0x08	; 8
     91c:	88 b9       	out	0x08, r24	; 8
    R_DDR = TriPinRL | HiPinRL;		//RL port for High-Pin and Tristate-Pin to output
     91e:	ab 85       	ldd	r26, Y+11	; 0x0b
     920:	a4 b9       	out	0x04, r26	; 4
    R_PORT = TriPinRL | HiPinRL;	//RL port for High-Pin and Tristate-Pin to Vcc
     922:	a5 b9       	out	0x05, r26	; 5
    adc.hp1 = W5msReadADC(HighPin);	//measure voltage at High-Pin  (Collector)
     924:	81 2f       	mov	r24, r17
     926:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
    if(adc.hp1 < 1600) {
     92a:	b6 e0       	ldi	r27, 0x06	; 6
     92c:	80 34       	cpi	r24, 0x40	; 64
     92e:	9b 07       	cpc	r25, r27
     930:	08 f0       	brcs	.+2      	; 0x934 <__stack+0x435>
     932:	44 c1       	rjmp	.+648    	; 0xbbc <__stack+0x6bd>
       lcd_data('N');
       lcd_testpin(HighPin);
       lcd_space();
       wait_about1s();
#endif
       if(PartReady==1) {
     934:	80 91 04 01 	lds	r24, 0x0104
     938:	81 30       	cpi	r24, 0x01	; 1
     93a:	09 f4       	brne	.+2      	; 0x93e <__stack+0x43f>
     93c:	ac c1       	rjmp	.+856    	; 0xc96 <__stack+0x797>
          goto widmes;
       }

       //Test auf Thyristor:
       //Gate discharge
       ChargePin10ms(TriPinRL,0);	//Tristate-Pin (Gate) across R_L 10ms to GND
     93e:	8d 2d       	mov	r24, r13
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	0e 94 a7 01 	call	0x34e	; 0x34e <ChargePin10ms>
       adc.hp3 = W5msReadADC(HighPin);	//read voltage at High-Pin (probably Anode) again
     946:	81 2f       	mov	r24, r17
     948:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
     94c:	7c 01       	movw	r14, r24
					//current should still flow, if not,
					// no Thyristor or holding current to low 
		 	
       R_PORT = 0;			//switch R_L for High-Pin (probably Anode) to GND (turn off)
     94e:	15 b8       	out	0x05, r1	; 5
       wait5ms();
     950:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <wait5ms>
       R_PORT = HiPinRL;		//switch R_L for High-Pin (probably Anode) again to VCC
     954:	c5 b8       	out	0x05, r12	; 5
       adc.hp2 = W5msReadADC(HighPin);	//measure voltage at the High-Pin (probably Anode) again
     956:	81 2f       	mov	r24, r17
     958:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
       if((adc.hp3 < 1600) && (adc.hp2 > 4400)) {
     95c:	e0 e4       	ldi	r30, 0x40	; 64
     95e:	ee 16       	cp	r14, r30
     960:	e6 e0       	ldi	r30, 0x06	; 6
     962:	fe 06       	cpc	r15, r30
     964:	08 f0       	brcs	.+2      	; 0x968 <__stack+0x469>
     966:	42 c0       	rjmp	.+132    	; 0x9ec <__stack+0x4ed>
     968:	f1 e1       	ldi	r31, 0x11	; 17
     96a:	81 33       	cpi	r24, 0x31	; 49
     96c:	9f 07       	cpc	r25, r31
     96e:	f0 f1       	brcs	.+124    	; 0x9ec <__stack+0x4ed>
          //if the holding current was switched off the thyristor must be switched off too. 
          //if Thyristor was still swiched on, if gate was switched off => Thyristor
          PartFound = PART_THYRISTOR;
     970:	85 e0       	ldi	r24, 0x05	; 5
     972:	80 93 07 01 	sts	0x0107, r24
          //Test if Triac
          R_DDR = 0;
     976:	14 b8       	out	0x04, r1	; 4
          R_PORT = 0;
     978:	15 b8       	out	0x05, r1	; 5
          ADC_PORT = LoADCp;	//Low-Pin fix to VCC
     97a:	2b 81       	ldd	r18, Y+3	; 0x03
     97c:	28 b9       	out	0x08, r18	; 8
          wait5ms();
     97e:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <wait5ms>
          R_DDR = HiPinRL;		//switch R_L port HighPin to output (GND)
     982:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) > 244) {
     984:	81 2f       	mov	r24, r17
     986:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
     98a:	85 3f       	cpi	r24, 0xF5	; 245
     98c:	91 05       	cpc	r25, r1
     98e:	08 f0       	brcs	.+2      	; 0x992 <__stack+0x493>
     990:	0f c1       	rjmp	.+542    	; 0xbb0 <__stack+0x6b1>
             goto savenresult;		//measure voltage at the  High-Pin (probably A2); if too high:
                                	//component has current => kein Triac
          }
          R_DDR = HiPinRL | TriPinRL;	//switch R_L port for TristatePin (Gate) to output (GND) => Triac should be triggered 
     992:	3b 85       	ldd	r19, Y+11	; 0x0b
     994:	34 b9       	out	0x04, r19	; 4
          if(W5msReadADC(TristatePin) < 977) {
     996:	82 2d       	mov	r24, r2
     998:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
     99c:	a3 e0       	ldi	r26, 0x03	; 3
     99e:	81 3d       	cpi	r24, 0xD1	; 209
     9a0:	9a 07       	cpc	r25, r26
     9a2:	08 f4       	brcc	.+2      	; 0x9a6 <__stack+0x4a7>
     9a4:	05 c1       	rjmp	.+522    	; 0xbb0 <__stack+0x6b1>
             goto savenresult; 		//measure voltage at the Tristate-Pin (probably Gate) ;
                              		// if to low, abort 
          }
          if(ReadADC(HighPin) < 733) {
     9a6:	81 2f       	mov	r24, r17
     9a8:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
     9ac:	b2 e0       	ldi	r27, 0x02	; 2
     9ae:	8d 3d       	cpi	r24, 0xDD	; 221
     9b0:	9b 07       	cpc	r25, r27
     9b2:	08 f4       	brcc	.+2      	; 0x9b6 <__stack+0x4b7>
     9b4:	fd c0       	rjmp	.+506    	; 0xbb0 <__stack+0x6b1>
             goto savenresult; 		//component has no current => no Triac => abort
          }
          R_DDR = HiPinRL;		//TristatePin (Gate) to input 
     9b6:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) < 733) {
     9b8:	81 2f       	mov	r24, r17
     9ba:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
     9be:	e2 e0       	ldi	r30, 0x02	; 2
     9c0:	8d 3d       	cpi	r24, 0xDD	; 221
     9c2:	9e 07       	cpc	r25, r30
     9c4:	08 f4       	brcc	.+2      	; 0x9c8 <__stack+0x4c9>
     9c6:	f4 c0       	rjmp	.+488    	; 0xbb0 <__stack+0x6b1>
             goto savenresult; 		//component has no current without base current => no Triac => abort
          }
          R_PORT = HiPinRL;		//switch R_L port for HighPin to VCC => switch off holding current 
     9c8:	c5 b8       	out	0x05, r12	; 5
          wait5ms();
     9ca:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <wait5ms>
          R_PORT = 0;			//switch R_L port for HighPin again to GND; Triac should now switched off
     9ce:	15 b8       	out	0x05, r1	; 5
          if(W5msReadADC(HighPin) > 244) {
     9d0:	81 2f       	mov	r24, r17
     9d2:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
     9d6:	85 3f       	cpi	r24, 0xF5	; 245
     9d8:	91 05       	cpc	r25, r1
     9da:	08 f0       	brcs	.+2      	; 0x9de <__stack+0x4df>
     9dc:	e9 c0       	rjmp	.+466    	; 0xbb0 <__stack+0x6b1>
             goto savenresult;		//measure voltage at the High-Pin (probably A2) ;
                                	//if to high, component is not switched off => no Triac, abort
         }
         PartFound = PART_TRIAC;
     9de:	84 e0       	ldi	r24, 0x04	; 4
     9e0:	80 93 07 01 	sts	0x0107, r24
         PartReady = 1;
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	80 93 04 01 	sts	0x0104, r24
         goto savenresult;
     9ea:	e2 c0       	rjmp	.+452    	; 0xbb0 <__stack+0x6b1>
        }
      //Test if NPN Transistor or MOSFET
      // ADC_DDR = LoADCm;	//Low-Pin to output 0V
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
     9ec:	0c 29       	or	r16, r12
     9ee:	04 b9       	out	0x04, r16	; 4
      R_PORT = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to VCC
     9f0:	05 b9       	out	0x05, r16	; 5
      wait50ms();
     9f2:	0e 94 ed 14 	call	0x29da	; 0x29da <wait50ms>
      adc.hp2 = ADCconfig.U_AVCC - ReadADC(HighPin);	//measure the voltage at the collector resistor 
     9f6:	60 90 3d 01 	lds	r6, 0x013D
     9fa:	70 90 3e 01 	lds	r7, 0x013E
     9fe:	81 2f       	mov	r24, r17
     a00:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
     a04:	68 1a       	sub	r6, r24
     a06:	79 0a       	sbc	r7, r25
      adc.tp2 = ADCconfig.U_AVCC - ReadADC(TristatePin);	//measure the voltage at the base resistor 
     a08:	a0 90 3d 01 	lds	r10, 0x013D
     a0c:	b0 90 3e 01 	lds	r11, 0x013E
     a10:	82 2d       	mov	r24, r2
     a12:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
     a16:	a8 1a       	sub	r10, r24
     a18:	b9 0a       	sbc	r11, r25
       lcd_space();
       lcd_data('T');
       lcd_data('P');
       lcd_string(utoa(adc.tp2,outval,10));
#endif
      if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     a1a:	80 91 07 01 	lds	r24, 0x0107
     a1e:	82 50       	subi	r24, 0x02	; 2
     a20:	82 30       	cpi	r24, 0x02	; 2
     a22:	18 f4       	brcc	.+6      	; 0xa2a <__stack+0x52b>
         PartReady = 1;	//check, if test is already done once
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	80 93 04 01 	sts	0x0104, r24
      }
      trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.tp2 - ReadADC(LowPin);
     a2a:	80 90 04 01 	lds	r8, 0x0104
     a2e:	99 24       	eor	r9, r9
     a30:	e0 90 3d 01 	lds	r14, 0x013D
     a34:	f0 90 3e 01 	lds	r15, 0x013E
     a38:	ea 18       	sub	r14, r10
     a3a:	fb 08       	sbc	r15, r11
     a3c:	83 2d       	mov	r24, r3
     a3e:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
     a42:	f4 01       	movw	r30, r8
     a44:	ee 0f       	add	r30, r30
     a46:	ff 1f       	adc	r31, r31
     a48:	e2 5b       	subi	r30, 0xB2	; 178
     a4a:	fe 4f       	sbci	r31, 0xFE	; 254
     a4c:	e8 1a       	sub	r14, r24
     a4e:	f9 0a       	sbc	r15, r25
     a50:	f1 82       	std	Z+1, r15	; 0x01
     a52:	e0 82       	st	Z, r14

      //compute current amplification factor for common Emitter
      //hFE = B = Collector current / Base current
      if(adc.tp2 < 53) {
     a54:	f5 e3       	ldi	r31, 0x35	; 53
     a56:	af 16       	cp	r10, r31
     a58:	b1 04       	cpc	r11, r1
     a5a:	18 f4       	brcc	.+6      	; 0xa62 <__stack+0x563>
#if DebugOut == 5
         lcd_data('<');
         lcd_data('5');
         lcd_data('3');
#endif
         adc.tp2 = 53;
     a5c:	85 e3       	ldi	r24, 0x35	; 53
     a5e:	a8 2e       	mov	r10, r24
     a60:	b1 2c       	mov	r11, r1
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     a62:	e0 90 04 01 	lds	r14, 0x0104
     a66:	ff 24       	eor	r15, r15
     a68:	c3 01       	movw	r24, r6
     a6a:	a0 e0       	ldi	r26, 0x00	; 0
     a6c:	b0 e0       	ldi	r27, 0x00	; 0
     a6e:	8b 87       	std	Y+11, r24	; 0x0b
     a70:	9c 87       	std	Y+12, r25	; 0x0c
     a72:	ad 87       	std	Y+13, r26	; 0x0d
     a74:	be 87       	std	Y+14, r27	; 0x0e
     a76:	20 91 08 01 	lds	r18, 0x0108
     a7a:	30 91 09 01 	lds	r19, 0x0109
     a7e:	40 e0       	ldi	r20, 0x00	; 0
     a80:	50 e0       	ldi	r21, 0x00	; 0
     a82:	60 e6       	ldi	r22, 0x60	; 96
     a84:	77 eb       	ldi	r23, 0xB7	; 183
     a86:	87 e4       	ldi	r24, 0x47	; 71
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
     a8e:	6b 85       	ldd	r22, Y+11	; 0x0b
     a90:	7c 85       	ldd	r23, Y+12	; 0x0c
     a92:	8d 85       	ldd	r24, Y+13	; 0x0d
     a94:	9e 85       	ldd	r25, Y+14	; 0x0e
     a96:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp2;	
     a9a:	95 01       	movw	r18, r10
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
#endif
         adc.tp2 = 53;
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     aa4:	f7 01       	movw	r30, r14
     aa6:	ee 0f       	add	r30, r30
     aa8:	ff 1f       	adc	r31, r31
     aaa:	ee 0f       	add	r30, r30
     aac:	ff 1f       	adc	r31, r31
     aae:	ea 5b       	subi	r30, 0xBA	; 186
     ab0:	fe 4f       	sbci	r31, 0xFE	; 254
     ab2:	20 83       	st	Z, r18
     ab4:	31 83       	std	Z+1, r19	; 0x01
     ab6:	42 83       	std	Z+2, r20	; 0x02
     ab8:	53 83       	std	Z+3, r21	; 0x03
      trans.hfe[PartReady] = ((adc.hp2 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
#endif
#ifdef COMMON_COLLECTOR
       //compare current amplification factor for common Collector (Emitter follower)
       // hFE = (Emitterstrom - Basisstrom) / Basisstrom
       if (c_hfe >  trans.hfe[PartReady]) {
     aba:	8c 81       	ldd	r24, Y+4	; 0x04
     abc:	9d 81       	ldd	r25, Y+5	; 0x05
     abe:	ae 81       	ldd	r26, Y+6	; 0x06
     ac0:	bf 81       	ldd	r27, Y+7	; 0x07
     ac2:	28 17       	cp	r18, r24
     ac4:	39 07       	cpc	r19, r25
     ac6:	4a 07       	cpc	r20, r26
     ac8:	5b 07       	cpc	r21, r27
     aca:	a8 f4       	brcc	.+42     	; 0xaf6 <__stack+0x5f7>
          trans.hfe[PartReady] = c_hfe;
     acc:	80 83       	st	Z, r24
     ace:	91 83       	std	Z+1, r25	; 0x01
     ad0:	a2 83       	std	Z+2, r26	; 0x02
     ad2:	b3 83       	std	Z+3, r27	; 0x03
          trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.lp1 - adc.tp1;
     ad4:	f7 01       	movw	r30, r14
     ad6:	ee 0f       	add	r30, r30
     ad8:	ff 1f       	adc	r31, r31
     ada:	e2 5b       	subi	r30, 0xB2	; 178
     adc:	fe 4f       	sbci	r31, 0xFE	; 254
     ade:	80 91 3d 01 	lds	r24, 0x013D
     ae2:	90 91 3e 01 	lds	r25, 0x013E
     ae6:	84 19       	sub	r24, r4
     ae8:	95 09       	sbc	r25, r5
     aea:	a9 89       	ldd	r26, Y+17	; 0x11
     aec:	ba 89       	ldd	r27, Y+18	; 0x12
     aee:	8a 1b       	sub	r24, r26
     af0:	9b 0b       	sbc	r25, r27
     af2:	91 83       	std	Z+1, r25	; 0x01
     af4:	80 83       	st	Z, r24
       }
#endif

      if(adc.tp2 > 2557) {		// Basis-voltage R_H is low enough
     af6:	be ef       	ldi	r27, 0xFE	; 254
     af8:	ab 16       	cp	r10, r27
     afa:	b9 e0       	ldi	r27, 0x09	; 9
     afc:	bb 06       	cpc	r11, r27
     afe:	38 f0       	brcs	.+14     	; 0xb0e <__stack+0x60f>
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
     b00:	82 e0       	ldi	r24, 0x02	; 2
     b02:	80 93 07 01 	sts	0x0107, r24
         PartMode = PART_MODE_NPN;
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	80 93 06 01 	sts	0x0106, r24
     b0c:	51 c0       	rjmp	.+162    	; 0xbb0 <__stack+0x6b1>
      } else { // Basis has low current
         if((adc.lp_otr < 97) && (adc.hp2 > 3400)) {
     b0e:	e9 85       	ldd	r30, Y+9	; 0x09
     b10:	fa 85       	ldd	r31, Y+10	; 0x0a
     b12:	e1 36       	cpi	r30, 0x61	; 97
     b14:	f1 05       	cpc	r31, r1
     b16:	08 f0       	brcs	.+2      	; 0xb1a <__stack+0x61b>
     b18:	4b c0       	rjmp	.+150    	; 0xbb0 <__stack+0x6b1>
     b1a:	f9 e4       	ldi	r31, 0x49	; 73
     b1c:	6f 16       	cp	r6, r31
     b1e:	fd e0       	ldi	r31, 0x0D	; 13
     b20:	7f 06       	cpc	r7, r31
     b22:	08 f4       	brcc	.+2      	; 0xb26 <__stack+0x627>
     b24:	45 c0       	rjmp	.+138    	; 0xbb0 <__stack+0x6b1>
            //if flow voltage in switched off mode low enough?
            //(since D-Mode-FET will be detected in error as E-Mode )
            PartFound = PART_FET;	//N-Kanal-MOSFET is found (Basis/Gate will Not be pulled down)
     b26:	83 e0       	ldi	r24, 0x03	; 3
     b28:	80 93 07 01 	sts	0x0107, r24
            PartMode = PART_MODE_N_E_MOS;
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	80 93 06 01 	sts	0x0106, r24
            }
#else
            //Switching of Drain is monitored with digital input
            // Low level is specified up to 0.3 * VCC
            // High level is specified above 0.6 * VCC
            PinMSK = HiADCm & 7;
     b32:	e9 80       	ldd	r14, Y+1	; 0x01
     b34:	27 e0       	ldi	r18, 0x07	; 7
     b36:	e2 22       	and	r14, r18
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
     b38:	82 2d       	mov	r24, r2
     b3a:	80 64       	ori	r24, 0x40	; 64
     b3c:	80 93 7c 00 	sts	0x007C, r24
            gthvoltage = 1;			// round up ((1*4)/9)
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	90 93 57 01 	sts	0x0157, r25
     b48:	80 93 56 01 	sts	0x0156, r24
     b4c:	7b e0       	ldi	r23, 0x0B	; 11
     b4e:	a7 2e       	mov	r10, r23
            for(ii=0;ii<11;ii++) {
            	wdt_reset();
     b50:	a8 95       	wdr
            	ChargePin10ms(TriPinRL,0);	// discharge Gate 10ms with RL 
     b52:	8d 2d       	mov	r24, r13
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	0e 94 a7 01 	call	0x34e	; 0x34e <ChargePin10ms>
                R_DDR = HiPinRL | TriPinRH;	// slowly charge Gate 
     b5a:	04 b9       	out	0x04, r16	; 4
                R_PORT = HiPinRL | TriPinRH;
     b5c:	05 b9       	out	0x05, r16	; 5
            	while ((ADC_PIN&PinMSK));	// Wait, until the MOSFET switch and Drain moved to low 
     b5e:	86 b1       	in	r24, 0x06	; 6
     b60:	8e 21       	and	r24, r14
     b62:	e9 f7       	brne	.-6      	; 0xb5e <__stack+0x65f>
                		// 0 is detected with input voltage of 2.12V to 2.24V (tested with mega168 & mega328)
                R_DDR = HiPinRL;		// switch off current
     b64:	c4 b8       	out	0x04, r12	; 4
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
     b66:	80 91 7a 00 	lds	r24, 0x007A
     b6a:	80 64       	ori	r24, 0x40	; 64
     b6c:	80 93 7a 00 	sts	0x007A, r24
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
     b70:	80 91 7a 00 	lds	r24, 0x007A
     b74:	86 fd       	sbrc	r24, 6
     b76:	fc cf       	rjmp	.-8      	; 0xb70 <__stack+0x671>
            	gthvoltage += ADCW;		// add result of ADC
     b78:	80 91 78 00 	lds	r24, 0x0078
     b7c:	90 91 79 00 	lds	r25, 0x0079
     b80:	20 91 56 01 	lds	r18, 0x0156
     b84:	30 91 57 01 	lds	r19, 0x0157
     b88:	82 0f       	add	r24, r18
     b8a:	93 1f       	adc	r25, r19
     b8c:	90 93 57 01 	sts	0x0157, r25
     b90:	80 93 56 01 	sts	0x0156, r24
     b94:	aa 94       	dec	r10
            // High level is specified above 0.6 * VCC
            PinMSK = HiADCm & 7;
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
            gthvoltage = 1;			// round up ((1*4)/9)
            for(ii=0;ii<11;ii++) {
     b96:	e1 f6       	brne	.-72     	; 0xb50 <__stack+0x651>
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
            	gthvoltage += ADCW;		// add result of ADC
            }
#endif
            gthvoltage *= 4;	//is equal to 44 * ADCW
     b98:	88 0f       	add	r24, r24
     b9a:	99 1f       	adc	r25, r25
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
            gthvoltage /= 9;	//scale to mV
     ba0:	69 e0       	ldi	r22, 0x09	; 9
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <__udivmodhi4>
     ba8:	70 93 57 01 	sts	0x0157, r23
     bac:	60 93 56 01 	sts	0x0156, r22
         }
      }
savenresult:
      trans.b = TristatePin;	// save Pin-constellation
     bb0:	20 92 52 01 	sts	0x0152, r2
      trans.c = HighPin;
     bb4:	10 93 53 01 	sts	0x0153, r17
      trans.e = LowPin;
     bb8:	30 92 54 01 	sts	0x0154, r3
   } // end component conduct => npn
   ADC_DDR = TXD_MSK;		// switch all ADC-Ports to input
     bbc:	88 e0       	ldi	r24, 0x08	; 8
     bbe:	87 b9       	out	0x07, r24	; 7
   ADC_PORT = TXD_VAL;		// switch all ADC-Ports to 0 (no Pull up)
     bc0:	88 b9       	out	0x08, r24	; 8
   //Fertig
   //end das component has no connection between HighPin and LowPin
   goto widmes;
     bc2:	69 c0       	rjmp	.+210    	; 0xc96 <__stack+0x797>
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
     bc4:	88 e0       	ldi	r24, 0x08	; 8
     bc6:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;	//Low-Pin fix to GND
     bc8:	3b 81       	ldd	r19, Y+3	; 0x03
     bca:	37 b9       	out	0x07, r19	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     bcc:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
     bce:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
     bd0:	8d 2d       	mov	r24, r13
     bd2:	61 e0       	ldi	r22, 0x01	; 1
     bd4:	0e 94 a7 01 	call	0x34e	; 0x34e <ChargePin10ms>
  adc.lp_otr = W5msReadADC(HighPin) - ReadADC(LowPin);
     bd8:	81 2f       	mov	r24, r17
     bda:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
     bde:	4c 01       	movw	r8, r24
     be0:	83 2d       	mov	r24, r3
     be2:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
     be6:	88 1a       	sub	r8, r24
     be8:	99 0a       	sbc	r9, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
     bea:	88 85       	ldd	r24, Y+8	; 0x08
     bec:	84 b9       	out	0x04, r24	; 4
  R_PORT = HiPinRH;
     bee:	85 b9       	out	0x05, r24	; 5
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
     bf0:	81 2f       	mov	r24, r17
     bf2:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
     bf6:	5c 01       	movw	r10, r24

  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     bf8:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
     bfa:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
     bfc:	8d 2d       	mov	r24, r13
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	0e 94 a7 01 	call	0x34e	; 0x34e <ChargePin10ms>
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
     c04:	81 2f       	mov	r24, r17
     c06:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
     c0a:	7c 01       	movw	r14, r24
     c0c:	83 2d       	mov	r24, r3
     c0e:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
     c12:	e8 1a       	sub	r14, r24
     c14:	f9 0a       	sbc	r15, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
     c16:	98 85       	ldd	r25, Y+8	; 0x08
     c18:	94 b9       	out	0x04, r25	; 4
  R_PORT = HiPinRH;
     c1a:	95 b9       	out	0x05, r25	; 5
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
     c1c:	81 2f       	mov	r24, r17
     c1e:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
     c22:	e8 14       	cp	r14, r8
     c24:	f9 04       	cpc	r15, r9
     c26:	18 f0       	brcs	.+6      	; 0xc2e <__stack+0x72f>
  R_PORT = HiPinRL;
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
  R_PORT = HiPinRH;
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
     c28:	a8 2e       	mov	r10, r24
     c2a:	b9 2e       	mov	r11, r25
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
     c2c:	47 01       	movw	r8, r14
  lcd_string(utoa(adc.hp3,outval,10));
  lcd_space();
  wait_about1s();
#endif

  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
     c2e:	c4 01       	movw	r24, r8
     c30:	87 59       	subi	r24, 0x97	; 151
     c32:	90 40       	sbci	r25, 0x00	; 0
     c34:	a1 e1       	ldi	r26, 0x11	; 17
     c36:	89 38       	cpi	r24, 0x89	; 137
     c38:	9a 07       	cpc	r25, r26
     c3a:	68 f5       	brcc	.+90     	; 0xc96 <__stack+0x797>
     c3c:	c5 01       	movw	r24, r10
     c3e:	53 e0       	ldi	r21, 0x03	; 3
     c40:	96 95       	lsr	r25
     c42:	87 95       	ror	r24
     c44:	5a 95       	dec	r21
     c46:	e1 f7       	brne	.-8      	; 0xc40 <__stack+0x741>
     c48:	8a 0d       	add	r24, r10
     c4a:	9b 1d       	adc	r25, r11
     c4c:	88 15       	cp	r24, r8
     c4e:	99 05       	cpc	r25, r9
     c50:	10 f5       	brcc	.+68     	; 0xc96 <__stack+0x797>
     c52:	43 e0       	ldi	r20, 0x03	; 3
     c54:	aa 0c       	add	r10, r10
     c56:	bb 1c       	adc	r11, r11
     c58:	4a 95       	dec	r20
     c5a:	e1 f7       	brne	.-8      	; 0xc54 <__stack+0x755>
     c5c:	8a 14       	cp	r8, r10
     c5e:	9b 04       	cpc	r9, r11
     c60:	d0 f4       	brcc	.+52     	; 0xc96 <__stack+0x797>
     //voltage is above 0,15V and below 4,64V => Ok
     if((PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
     c62:	80 91 07 01 	lds	r24, 0x0107
     c66:	88 23       	and	r24, r24
     c68:	11 f0       	breq	.+4      	; 0xc6e <__stack+0x76f>
     c6a:	86 30       	cpi	r24, 0x06	; 6
     c6c:	19 f4       	brne	.+6      	; 0xc74 <__stack+0x775>
        PartFound = PART_DIODE;	//mark for diode only, if no other component is found
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	80 93 07 01 	sts	0x0107, r24
				//since there is a problem with Transistors with a protection diode
#if DebugOut == 4
        lcd_data('D');
#endif
     }
     diodes[NumOfDiodes].Anode = HighPin;
     c74:	80 91 05 01 	lds	r24, 0x0105
     c78:	e8 2f       	mov	r30, r24
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	ee 0f       	add	r30, r30
     c7e:	ff 1f       	adc	r31, r31
     c80:	ee 0f       	add	r30, r30
     c82:	ff 1f       	adc	r31, r31
     c84:	e4 59       	subi	r30, 0x94	; 148
     c86:	fe 4f       	sbci	r31, 0xFE	; 254
     c88:	10 83       	st	Z, r17
     diodes[NumOfDiodes].Cathode = LowPin;
     c8a:	31 82       	std	Z+1, r3	; 0x01
     diodes[NumOfDiodes].Voltage = adc.hp1;	// voltage in Millivolt 
     c8c:	93 82       	std	Z+3, r9	; 0x03
     c8e:	82 82       	std	Z+2, r8	; 0x02
     NumOfDiodes++;
     c90:	8f 5f       	subi	r24, 0xFF	; 255
     c92:	80 93 05 01 	sts	0x0105, r24
#if DebugOut == 4
  lcd_data(NumOfDiodes+'0');
#endif

widmes:
  if (NumOfDiodes > 0) goto clean_ports;
     c96:	80 91 05 01 	lds	r24, 0x0105
     c9a:	88 23       	and	r24, r24
     c9c:	09 f0       	breq	.+2      	; 0xca0 <__stack+0x7a1>
     c9e:	12 c2       	rjmp	.+1060   	; 0x10c4 <__stack+0xbc5>
  // resistor measurement
  wdt_reset();
     ca0:	a8 95       	wdr
// U_SCALE can be set to 4 for better resolution of ReadADC result
#if U_SCALE != 1
  ADCconfig.U_AVCC *= U_SCALE;	// scale to higher resolution, mV scale is not required
     ca2:	80 91 3d 01 	lds	r24, 0x013D
     ca6:	90 91 3e 01 	lds	r25, 0x013E
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	90 93 3e 01 	sts	0x013E, r25
     cb6:	80 93 3d 01 	sts	0x013D, r24
  ADCconfig.U_Bandgap *= U_SCALE;
     cba:	80 91 3b 01 	lds	r24, 0x013B
     cbe:	90 91 3c 01 	lds	r25, 0x013C
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	90 93 3c 01 	sts	0x013C, r25
     cce:	80 93 3b 01 	sts	0x013B, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = R_ANZ_MESS;	// switch to special number of repetitions
     cd2:	8e eb       	ldi	r24, 0xBE	; 190
     cd4:	80 93 39 01 	sts	0x0139, r24
#endif
  #define MAX_REPEAT (700 / (5 + R_ANZ_MESS/8))
  ADC_PORT = TXD_VAL;
     cd8:	88 e0       	ldi	r24, 0x08	; 8
     cda:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
     cdc:	bb 81       	ldd	r27, Y+3	; 0x03
     cde:	b7 b9       	out	0x07, r27	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     ce0:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;	
     ce2:	c5 b8       	out	0x05, r12	; 5
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
     ce4:	ee 24       	eor	r14, r14
     ce6:	ff 24       	eor	r15, r15
  for (ii=1;ii<MAX_REPEAT;ii++) {
     ce8:	21 e0       	ldi	r18, 0x01	; 1
     cea:	01 c0       	rjmp	.+2      	; 0xcee <__stack+0x7ef>
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     cec:	7c 01       	movw	r14, r24
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     cee:	83 2d       	mov	r24, r3
     cf0:	2b 8b       	std	Y+19, r18	; 0x13
     cf2:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
     cf6:	08 2f       	mov	r16, r24
     cf8:	49 2e       	mov	r4, r25
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     cfa:	81 2f       	mov	r24, r17
     cfc:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
     udiff = adc.hp1 - adc.hp2;
     d00:	ac 01       	movw	r20, r24
     d02:	4e 19       	sub	r20, r14
     d04:	5f 09       	sbc	r21, r15
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     d06:	2b 89       	ldd	r18, Y+19	; 0x13
     d08:	57 ff       	sbrs	r21, 7
     d0a:	03 c0       	rjmp	.+6      	; 0xd12 <__stack+0x813>
     d0c:	50 95       	com	r21
     d0e:	41 95       	neg	r20
     d10:	5f 4f       	sbci	r21, 0xFF	; 255
     d12:	43 30       	cpi	r20, 0x03	; 3
     d14:	51 05       	cpc	r21, r1
     d16:	84 f4       	brge	.+32     	; 0xd38 <__stack+0x839>
     d18:	ac 01       	movw	r20, r24
  adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
#endif
  if (adc.tp1 > adc.hp1) {
     adc.tp1 = adc.hp1;
  }
  R_PORT = 0;
     d1a:	15 b8       	out	0x05, r1	; 5
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (GND)
     d1c:	e8 85       	ldd	r30, Y+8	; 0x08
     d1e:	e4 b9       	out	0x04, r30	; 4
  adc.hp2 = W5msReadADC(HighPin);	// read voltage, should be down
     d20:	81 2f       	mov	r24, r17
     d22:	4e 8b       	std	Y+22, r20	; 0x16
     d24:	5b 8b       	std	Y+19, r21	; 0x13
     d26:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
  if (adc.hp2 > (20*U_SCALE)) {
     d2a:	4e 89       	ldd	r20, Y+22	; 0x16
     d2c:	5b 89       	ldd	r21, Y+19	; 0x13
     d2e:	81 35       	cpi	r24, 0x51	; 81
     d30:	91 05       	cpc	r25, r1
     d32:	08 f0       	brcs	.+2      	; 0xd36 <__stack+0x837>
     d34:	ac c1       	rjmp	.+856    	; 0x108e <__stack+0xb8f>
     d36:	05 c0       	rjmp	.+10     	; 0xd42 <__stack+0x843>
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     udiff = adc.hp1 - adc.hp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.hp2 = adc.hp1;
     wdt_reset();
     d38:	a8 95       	wdr
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     d3a:	2f 5f       	subi	r18, 0xFF	; 255
     d3c:	29 31       	cpi	r18, 0x19	; 25
     d3e:	b1 f6       	brne	.-84     	; 0xcec <__stack+0x7ed>
     d40:	a6 c1       	rjmp	.+844    	; 0x108e <__stack+0xb8f>
     lcd_string(utoa(adc.hp2, outval, 10));
     lcd_space();
#endif
     goto testend;
  }
  R_PORT = HiPinRH;		//switch R_H for High-Pin to VCC
     d42:	f8 85       	ldd	r31, Y+8	; 0x08
     d44:	f5 b9       	out	0x05, r31	; 5
  adc.hp2 = W5msReadADC(HighPin);	// voltage at resistor Rx with R_H
     d46:	81 2f       	mov	r24, r17
     d48:	4e 8b       	std	Y+22, r20	; 0x16
     d4a:	5b 8b       	std	Y+19, r21	; 0x13
     d4c:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
     d50:	7c 01       	movw	r14, r24

  ADC_DDR = HiADCm;		//switch High-Pin to output
     d52:	29 81       	ldd	r18, Y+1	; 0x01
     d54:	27 b9       	out	0x07, r18	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
     d56:	28 b9       	out	0x08, r18	; 8
  R_PORT = 0;
     d58:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
     d5a:	3a 81       	ldd	r19, Y+2	; 0x02
     d5c:	34 b9       	out	0x04, r19	; 4
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
     d5e:	aa 24       	eor	r10, r10
     d60:	bb 24       	eor	r11, r11
  for (ii=1;ii<MAX_REPEAT;ii++) {
     d62:	21 e0       	ldi	r18, 0x01	; 1
     d64:	4e 89       	ldd	r20, Y+22	; 0x16
     d66:	5b 89       	ldd	r21, Y+19	; 0x13
     d68:	3a 01       	movw	r6, r20
     d6a:	01 c0       	rjmp	.+2      	; 0xd6e <__stack+0x86f>
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     d6c:	56 01       	movw	r10, r12
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     d6e:	81 2f       	mov	r24, r17
     d70:	2b 8b       	std	Y+19, r18	; 0x13
     d72:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
     d76:	4c 01       	movw	r8, r24
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     d78:	83 2d       	mov	r24, r3
     d7a:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
     d7e:	6c 01       	movw	r12, r24
     udiff = adc.lp1 - adc.lp2;
     d80:	8a 19       	sub	r24, r10
     d82:	9b 09       	sbc	r25, r11
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     d84:	2b 89       	ldd	r18, Y+19	; 0x13
     d86:	97 ff       	sbrs	r25, 7
     d88:	03 c0       	rjmp	.+6      	; 0xd90 <__stack+0x891>
     d8a:	90 95       	com	r25
     d8c:	81 95       	neg	r24
     d8e:	9f 4f       	sbci	r25, 0xFF	; 255
     d90:	83 30       	cpi	r24, 0x03	; 3
     d92:	91 05       	cpc	r25, r1
     d94:	8c f4       	brge	.+34     	; 0xdb8 <__stack+0x8b9>
     d96:	a3 01       	movw	r20, r6
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = MEM_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	88 0f       	add	r24, r24
  adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
#endif
  if (adc.tp2 < adc.lp1) {
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
     d9c:	84 b9       	out	0x04, r24	; 4
  adc.lp2 = W5msReadADC(LowPin);
     d9e:	83 2d       	mov	r24, r3
     da0:	6e 8a       	std	Y+22, r6	; 0x16
     da2:	5b 8b       	std	Y+19, r21	; 0x13
     da4:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
     da8:	3c 01       	movw	r6, r24
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
     daa:	4e 89       	ldd	r20, Y+22	; 0x16
     dac:	5b 89       	ldd	r21, Y+19	; 0x13
     dae:	84 e4       	ldi	r24, 0x44	; 68
     db0:	40 3c       	cpi	r20, 0xC0	; 192
     db2:	58 07       	cpc	r21, r24
     db4:	30 f0       	brcs	.+12     	; 0xdc2 <__stack+0x8c3>
     db6:	0c c0       	rjmp	.+24     	; 0xdd0 <__stack+0x8d1>
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     udiff = adc.lp1 - adc.lp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.lp2 = adc.lp1;
     wdt_reset();
     db8:	a8 95       	wdr
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
  R_PORT = 0;
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     dba:	2f 5f       	subi	r18, 0xFF	; 255
     dbc:	29 31       	cpi	r18, 0x19	; 25
     dbe:	b1 f6       	brne	.-84     	; 0xd6c <__stack+0x86d>
     dc0:	66 c1       	rjmp	.+716    	; 0x108e <__stack+0xb8f>
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
  adc.lp2 = W5msReadADC(LowPin);
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
     dc2:	95 e8       	ldi	r25, 0x85	; 133
     dc4:	e9 16       	cp	r14, r25
     dc6:	91 e0       	ldi	r25, 0x01	; 1
     dc8:	f9 06       	cpc	r15, r25
     dca:	08 f0       	brcs	.+2      	; 0xdce <__stack+0x8cf>
     dcc:	60 c1       	rjmp	.+704    	; 0x108e <__stack+0xb8f>
     dce:	06 c0       	rjmp	.+12     	; 0xddc <__stack+0x8dd>
     lcd_data('F');
#endif
     goto testend; 
  }
//    if((adc.hp2 + (adc.hp2 / 61)) < adc.hp1)
  if (adc.hp2 < (4972*U_SCALE)) { 
     dd0:	a0 eb       	ldi	r26, 0xB0	; 176
     dd2:	ea 16       	cp	r14, r26
     dd4:	ad e4       	ldi	r26, 0x4D	; 77
     dd6:	fa 06       	cpc	r15, r26
     dd8:	08 f0       	brcs	.+2      	; 0xddc <__stack+0x8dd>
     dda:	59 c1       	rjmp	.+690    	; 0x108e <__stack+0xb8f>
     // voltage breaks down with low test current and it is not nearly shorted  => resistor
//     if (adc.lp1 < 120) { // take measurement with R_H 
     if (adc.lp1 < (169*U_SCALE)) { // take measurement with R_H 
     ddc:	b4 ea       	ldi	r27, 0xA4	; 164
     dde:	cb 16       	cp	r12, r27
     de0:	b2 e0       	ldi	r27, 0x02	; 2
     de2:	db 06       	cpc	r13, r27
     de4:	08 f0       	brcs	.+2      	; 0xde8 <__stack+0x8e9>
     de6:	72 c0       	rjmp	.+228    	; 0xecc <__stack+0x9cd>
        ii = 'H';
        if (adc.lp2 < (38*U_SCALE)) {
     de8:	e8 e9       	ldi	r30, 0x98	; 152
     dea:	6e 16       	cp	r6, r30
     dec:	71 04       	cpc	r7, r1
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__stack+0x8f3>
     df0:	4e c1       	rjmp	.+668    	; 0x108e <__stack+0xb8f>
           // measurement > 60MOhm to big resistance
           goto testend;
        }
        // two measurements with R_H resistors (470k) are made:
        // lirx1 (measurement at HighPin)
        lirx1 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)adc.hp2 / (ADCconfig.U_AVCC - adc.hp2);
     df2:	80 90 3d 01 	lds	r8, 0x013D
     df6:	90 90 3e 01 	lds	r9, 0x013E
     dfa:	b7 01       	movw	r22, r14
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	28 e9       	ldi	r18, 0x98	; 152
     e02:	37 eb       	ldi	r19, 0xB7	; 183
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
     e0c:	94 01       	movw	r18, r8
     e0e:	2e 19       	sub	r18, r14
     e10:	3f 09       	sbc	r19, r15
     e12:	40 e0       	ldi	r20, 0x00	; 0
     e14:	50 e0       	ldi	r21, 0x00	; 0
     e16:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
     e1a:	59 01       	movw	r10, r18
     e1c:	6a 01       	movw	r12, r20
        // lirx2 (measurement at LowPin)
        lirx2 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)(ADCconfig.U_AVCC - adc.lp2) / adc.lp2;
     e1e:	86 18       	sub	r8, r6
     e20:	97 08       	sbc	r9, r7
     e22:	b4 01       	movw	r22, r8
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	28 e9       	ldi	r18, 0x98	; 152
     e2a:	37 eb       	ldi	r19, 0xB7	; 183
     e2c:	40 e0       	ldi	r20, 0x00	; 0
     e2e:	50 e0       	ldi	r21, 0x00	; 0
     e30:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
     e34:	93 01       	movw	r18, r6
     e36:	40 e0       	ldi	r20, 0x00	; 0
     e38:	50 e0       	ldi	r21, 0x00	; 0
     e3a:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
#define FAKT_LOW 2		//resolution is about twice as good
#else
#define FAKT_LOW 4		//resolution is about four times better
#endif
#ifdef AUTOSCALE_ADC
        if (adc.hp2 < U_INT_LIMIT) {
     e3e:	f8 e7       	ldi	r31, 0x78	; 120
     e40:	ef 16       	cp	r14, r31
     e42:	ff e0       	ldi	r31, 0x0F	; 15
     e44:	ff 06       	cpc	r15, r31
     e46:	70 f4       	brcc	.+28     	; 0xe64 <__stack+0x965>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_H measurements
     e48:	c6 01       	movw	r24, r12
     e4a:	b5 01       	movw	r22, r10
     e4c:	b2 e0       	ldi	r27, 0x02	; 2
     e4e:	66 0f       	add	r22, r22
     e50:	77 1f       	adc	r23, r23
     e52:	88 1f       	adc	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	ba 95       	dec	r27
     e58:	d1 f7       	brne	.-12     	; 0xe4e <__stack+0x94f>
     e5a:	62 0f       	add	r22, r18
     e5c:	73 1f       	adc	r23, r19
     e5e:	84 1f       	adc	r24, r20
     e60:	95 1f       	adc	r25, r21
     e62:	12 c0       	rjmp	.+36     	; 0xe88 <__stack+0x989>
        } else if (adc.lp2 < U_INT_LIMIT){
     e64:	88 e7       	ldi	r24, 0x78	; 120
     e66:	68 16       	cp	r6, r24
     e68:	8f e0       	ldi	r24, 0x0F	; 15
     e6a:	78 06       	cpc	r7, r24
     e6c:	a0 f4       	brcc	.+40     	; 0xe96 <__stack+0x997>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
     e6e:	ca 01       	movw	r24, r20
     e70:	b9 01       	movw	r22, r18
     e72:	a2 e0       	ldi	r26, 0x02	; 2
     e74:	66 0f       	add	r22, r22
     e76:	77 1f       	adc	r23, r23
     e78:	88 1f       	adc	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	aa 95       	dec	r26
     e7e:	d1 f7       	brne	.-12     	; 0xe74 <__stack+0x975>
     e80:	6a 0d       	add	r22, r10
     e82:	7b 1d       	adc	r23, r11
     e84:	8c 1d       	adc	r24, r12
     e86:	9d 1d       	adc	r25, r13
     e88:	25 e0       	ldi	r18, 0x05	; 5
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 e0       	ldi	r20, 0x00	; 0
     e8e:	50 e0       	ldi	r21, 0x00	; 0
     e90:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
     e94:	08 c0       	rjmp	.+16     	; 0xea6 <__stack+0x9a7>
        } else 
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_H measurements
     e96:	2a 0d       	add	r18, r10
     e98:	3b 1d       	adc	r19, r11
     e9a:	4c 1d       	adc	r20, r12
     e9c:	5d 1d       	adc	r21, r13
     e9e:	56 95       	lsr	r21
     ea0:	47 95       	ror	r20
     ea2:	37 95       	ror	r19
     ea4:	27 95       	ror	r18
        }
        lrx1 *= 100;
     ea6:	ca 01       	movw	r24, r20
     ea8:	b9 01       	movw	r22, r18
     eaa:	24 e6       	ldi	r18, 0x64	; 100
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	40 e0       	ldi	r20, 0x00	; 0
     eb0:	50 e0       	ldi	r21, 0x00	; 0
     eb2:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
     eb6:	6b 01       	movw	r12, r22
     eb8:	7c 01       	movw	r14, r24
        lrx1 += RH_OFFSET;			// add constant for correction of systematic error
     eba:	8c ea       	ldi	r24, 0xAC	; 172
     ebc:	9d e0       	ldi	r25, 0x0D	; 13
     ebe:	a0 e0       	ldi	r26, 0x00	; 0
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	c8 0e       	add	r12, r24
     ec4:	d9 1e       	adc	r13, r25
     ec6:	ea 1e       	adc	r14, r26
     ec8:	fb 1e       	adc	r15, r27
     eca:	78 c0       	rjmp	.+240    	; 0xfbc <__stack+0xabd>
     ecc:	80 2f       	mov	r24, r16
     ece:	94 2d       	mov	r25, r4
     ed0:	48 17       	cp	r20, r24
     ed2:	59 07       	cpc	r21, r25
     ed4:	08 f4       	brcc	.+2      	; 0xed8 <__stack+0x9d9>
     ed6:	ca 01       	movw	r24, r20
     ed8:	76 01       	movw	r14, r12
     eda:	c8 14       	cp	r12, r8
     edc:	d9 04       	cpc	r13, r9
     ede:	08 f4       	brcc	.+2      	; 0xee2 <__stack+0x9e3>
     ee0:	74 01       	movw	r14, r8
     ee2:	3c 01       	movw	r6, r24
     ee4:	84 17       	cp	r24, r20
     ee6:	95 07       	cpc	r25, r21
     ee8:	08 f4       	brcc	.+2      	; 0xeec <__stack+0x9ed>
     eea:	3a 01       	movw	r6, r20
        // two measurements with R_L resistors (680) are made:
        // lirx1 (measurement at HighPin)
        if (adc.tp1 > adc.hp1) {
           adc.hp1 = adc.tp1;		//diff negativ is illegal
        }
        lirx1 =(unsigned long)RR680PL * (unsigned long)(adc.hp1 - adc.tp1) / (ADCconfig.U_AVCC - adc.hp1);
     eec:	b3 01       	movw	r22, r6
     eee:	68 1b       	sub	r22, r24
     ef0:	79 0b       	sbc	r23, r25
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	20 91 08 01 	lds	r18, 0x0108
     efa:	30 91 09 01 	lds	r19, 0x0109
     efe:	40 e0       	ldi	r20, 0x00	; 0
     f00:	50 e0       	ldi	r21, 0x00	; 0
     f02:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
     f06:	20 91 3d 01 	lds	r18, 0x013D
     f0a:	30 91 3e 01 	lds	r19, 0x013E
     f0e:	26 19       	sub	r18, r6
     f10:	37 09       	sbc	r19, r7
     f12:	40 e0       	ldi	r20, 0x00	; 0
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
     f1a:	49 01       	movw	r8, r18
     f1c:	5a 01       	movw	r10, r20
     f1e:	27 01       	movw	r4, r14
     f20:	ce 14       	cp	r12, r14
     f22:	df 04       	cpc	r13, r15
     f24:	08 f4       	brcc	.+2      	; 0xf28 <__stack+0xa29>
     f26:	26 01       	movw	r4, r12
        if (adc.tp2 < adc.lp1) {
           adc.lp1 = adc.tp2;		//diff negativ is illegal
        }
        // lirx2 (Measurement at LowPin)
        lirx2 =(unsigned long)RR680MI * (unsigned long)(adc.tp2 -adc.lp1) / adc.lp1;
     f28:	e4 18       	sub	r14, r4
     f2a:	f5 08       	sbc	r15, r5
     f2c:	b7 01       	movw	r22, r14
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	20 91 02 01 	lds	r18, 0x0102
     f36:	30 91 03 01 	lds	r19, 0x0103
     f3a:	40 e0       	ldi	r20, 0x00	; 0
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
     f42:	92 01       	movw	r18, r4
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
//     lrx1 =(unsigned long)R_L_VAL * (unsigned long)adc.hp1 / (adc.hp3 - adc.hp1);

#ifdef AUTOSCALE_ADC
        if (adc.hp1 < U_INT_LIMIT) {
     f4c:	98 e7       	ldi	r25, 0x78	; 120
     f4e:	69 16       	cp	r6, r25
     f50:	9f e0       	ldi	r25, 0x0F	; 15
     f52:	79 06       	cpc	r7, r25
     f54:	70 f4       	brcc	.+28     	; 0xf72 <__stack+0xa73>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_L measurements
     f56:	c5 01       	movw	r24, r10
     f58:	b4 01       	movw	r22, r8
     f5a:	e2 e0       	ldi	r30, 0x02	; 2
     f5c:	66 0f       	add	r22, r22
     f5e:	77 1f       	adc	r23, r23
     f60:	88 1f       	adc	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	ea 95       	dec	r30
     f66:	d1 f7       	brne	.-12     	; 0xf5c <__stack+0xa5d>
     f68:	62 0f       	add	r22, r18
     f6a:	73 1f       	adc	r23, r19
     f6c:	84 1f       	adc	r24, r20
     f6e:	95 1f       	adc	r25, r21
     f70:	12 c0       	rjmp	.+36     	; 0xf96 <__stack+0xa97>
        } else if (adc.lp1 < U_INT_LIMIT) {
     f72:	a8 e7       	ldi	r26, 0x78	; 120
     f74:	4a 16       	cp	r4, r26
     f76:	af e0       	ldi	r26, 0x0F	; 15
     f78:	5a 06       	cpc	r5, r26
     f7a:	b0 f4       	brcc	.+44     	; 0xfa8 <__stack+0xaa9>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
     f7c:	ca 01       	movw	r24, r20
     f7e:	b9 01       	movw	r22, r18
     f80:	52 e0       	ldi	r21, 0x02	; 2
     f82:	66 0f       	add	r22, r22
     f84:	77 1f       	adc	r23, r23
     f86:	88 1f       	adc	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	5a 95       	dec	r21
     f8c:	d1 f7       	brne	.-12     	; 0xf82 <__stack+0xa83>
     f8e:	68 0d       	add	r22, r8
     f90:	79 1d       	adc	r23, r9
     f92:	8a 1d       	adc	r24, r10
     f94:	9b 1d       	adc	r25, r11
     f96:	25 e0       	ldi	r18, 0x05	; 5
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	40 e0       	ldi	r20, 0x00	; 0
     f9c:	50 e0       	ldi	r21, 0x00	; 0
     f9e:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
     fa2:	69 01       	movw	r12, r18
     fa4:	7a 01       	movw	r14, r20
     fa6:	0a c0       	rjmp	.+20     	; 0xfbc <__stack+0xabd>
        } else
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_L measurements
     fa8:	69 01       	movw	r12, r18
     faa:	7a 01       	movw	r14, r20
     fac:	c8 0c       	add	r12, r8
     fae:	d9 1c       	adc	r13, r9
     fb0:	ea 1c       	adc	r14, r10
     fb2:	fb 1c       	adc	r15, r11
     fb4:	f6 94       	lsr	r15
     fb6:	e7 94       	ror	r14
     fb8:	d7 94       	ror	r13
     fba:	c7 94       	ror	r12
  lcd_line4();
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
     fbc:	80 91 07 01 	lds	r24, 0x0107
     fc0:	82 30       	cpi	r24, 0x02	; 2
     fc2:	18 f0       	brcs	.+6      	; 0xfca <__stack+0xacb>
     fc4:	86 30       	cpi	r24, 0x06	; 6
     fc6:	09 f0       	breq	.+2      	; 0xfca <__stack+0xacb>
     fc8:	62 c0       	rjmp	.+196    	; 0x108e <__stack+0xb8f>
        for (ii=0; ii<ResistorsFound; ii++) {
     fca:	50 91 55 01 	lds	r21, 0x0155
     fce:	40 e0       	ldi	r20, 0x00	; 0
           // search measurements with inverse polarity 
           thisR = &resis[ii];
           if (thisR->rt != TristatePin) {
     fd0:	8b e0       	ldi	r24, 0x0B	; 11
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	3e c0       	rjmp	.+124    	; 0x1052 <__stack+0xb53>
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
           // search measurements with inverse polarity 
           thisR = &resis[ii];
     fd6:	24 2f       	mov	r18, r20
     fd8:	30 e0       	ldi	r19, 0x00	; 0
           if (thisR->rt != TristatePin) {
     fda:	28 9f       	mul	r18, r24
     fdc:	f0 01       	movw	r30, r0
     fde:	29 9f       	mul	r18, r25
     fe0:	f0 0d       	add	r31, r0
     fe2:	38 9f       	mul	r19, r24
     fe4:	f0 0d       	add	r31, r0
     fe6:	11 24       	eor	r1, r1
     fe8:	e8 5e       	subi	r30, 0xE8	; 232
     fea:	fe 4f       	sbci	r31, 0xFE	; 254
     fec:	22 85       	ldd	r18, Z+10	; 0x0a
     fee:	22 15       	cp	r18, r2
     ff0:	11 f0       	breq	.+4      	; 0xff6 <__stack+0xaf7>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
     ff2:	4f 5f       	subi	r20, 0xFF	; 255
     ff4:	2e c0       	rjmp	.+92     	; 0x1052 <__stack+0xb53>
           if (thisR->rt != TristatePin) {
              continue;
           }
           // must be measurement with inverse polarity 
           // resolution is 0.1 Ohm, 1 Ohm = 10 !
           lirx1 = (labs((long)lrx1 - (long)thisR->rx) * 10) / (lrx1 + thisR->rx + 100);
     ff6:	80 80       	ld	r8, Z
     ff8:	91 80       	ldd	r9, Z+1	; 0x01
     ffa:	a2 80       	ldd	r10, Z+2	; 0x02
     ffc:	b3 80       	ldd	r11, Z+3	; 0x03
     ffe:	c7 01       	movw	r24, r14
    1000:	b6 01       	movw	r22, r12
    1002:	68 19       	sub	r22, r8
    1004:	79 09       	sbc	r23, r9
    1006:	8a 09       	sbc	r24, r10
    1008:	9b 09       	sbc	r25, r11
    100a:	97 ff       	sbrs	r25, 7
    100c:	07 c0       	rjmp	.+14     	; 0x101c <__stack+0xb1d>
    100e:	90 95       	com	r25
    1010:	80 95       	com	r24
    1012:	70 95       	com	r23
    1014:	61 95       	neg	r22
    1016:	7f 4f       	sbci	r23, 0xFF	; 255
    1018:	8f 4f       	sbci	r24, 0xFF	; 255
    101a:	9f 4f       	sbci	r25, 0xFF	; 255
    101c:	2a e0       	ldi	r18, 0x0A	; 10
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	40 e0       	ldi	r20, 0x00	; 0
    1022:	50 e0       	ldi	r21, 0x00	; 0
    1024:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
    1028:	a5 01       	movw	r20, r10
    102a:	94 01       	movw	r18, r8
    102c:	2c 59       	subi	r18, 0x9C	; 156
    102e:	3f 4f       	sbci	r19, 0xFF	; 255
    1030:	4f 4f       	sbci	r20, 0xFF	; 255
    1032:	5f 4f       	sbci	r21, 0xFF	; 255
    1034:	2c 0d       	add	r18, r12
    1036:	3d 1d       	adc	r19, r13
    1038:	4e 1d       	adc	r20, r14
    103a:	5f 1d       	adc	r21, r15
    103c:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
           if (lirx1  > 0) {
    1040:	21 15       	cp	r18, r1
    1042:	31 05       	cpc	r19, r1
    1044:	41 05       	cpc	r20, r1
    1046:	51 05       	cpc	r21, r1
    1048:	11 f5       	brne	.+68     	; 0x108e <__stack+0xb8f>
              DisplayValue(lirx1,-1,LCD_CHAR_OMEGA,3)
              lcd_space();
#endif
              goto testend; // <10% mismatch
           }
           PartFound = PART_RESISTOR;
    104a:	86 e0       	ldi	r24, 0x06	; 6
    104c:	80 93 07 01 	sts	0x0107, r24
           goto testend;
    1050:	1e c0       	rjmp	.+60     	; 0x108e <__stack+0xb8f>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    1052:	45 17       	cp	r20, r21
    1054:	08 f4       	brcc	.+2      	; 0x1058 <__stack+0xb59>
    1056:	bf cf       	rjmp	.-130    	; 0xfd6 <__stack+0xad7>
           }
           PartFound = PART_RESISTOR;
           goto testend;
        } // end for
        // no same resistor with the same Tristate-Pin found, new one
        thisR = &resis[ResistorsFound];		// pointer to a free resistor structure
    1058:	25 2f       	mov	r18, r21
    105a:	30 e0       	ldi	r19, 0x00	; 0
        thisR->rx = lrx1;		// save resistor value
    105c:	8b e0       	ldi	r24, 0x0B	; 11
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	28 9f       	mul	r18, r24
    1062:	f0 01       	movw	r30, r0
    1064:	29 9f       	mul	r18, r25
    1066:	f0 0d       	add	r31, r0
    1068:	38 9f       	mul	r19, r24
    106a:	f0 0d       	add	r31, r0
    106c:	11 24       	eor	r1, r1
    106e:	e8 5e       	subi	r30, 0xE8	; 232
    1070:	fe 4f       	sbci	r31, 0xFE	; 254
    1072:	c0 82       	st	Z, r12
    1074:	d1 82       	std	Z+1, r13	; 0x01
    1076:	e2 82       	std	Z+2, r14	; 0x02
    1078:	f3 82       	std	Z+3, r15	; 0x03
#if FLASHEND > 0x1fff
        thisR->lx = 0;			// no inductance
    107a:	14 82       	std	Z+4, r1	; 0x04
    107c:	15 82       	std	Z+5, r1	; 0x05
    107e:	16 82       	std	Z+6, r1	; 0x06
    1080:	17 82       	std	Z+7, r1	; 0x07
#endif
        thisR->ra = LowPin;		// save Pin numbers
    1082:	30 86       	std	Z+8, r3	; 0x08
        thisR->rb = HighPin;
    1084:	11 87       	std	Z+9, r17	; 0x09
        thisR->rt = TristatePin;	// Tristate is saved for easier search of inverse measurement
    1086:	22 86       	std	Z+10, r2	; 0x0a
        ResistorsFound++;			// 1 more resistor found
    1088:	5f 5f       	subi	r21, 0xFF	; 255
    108a:	50 93 55 01 	sts	0x0155, r21
#endif
     }
  }
  testend:
#if U_SCALE != 1
  ADCconfig.U_AVCC /= U_SCALE;		// scale back to mV resolution
    108e:	80 91 3d 01 	lds	r24, 0x013D
    1092:	90 91 3e 01 	lds	r25, 0x013E
    1096:	96 95       	lsr	r25
    1098:	87 95       	ror	r24
    109a:	96 95       	lsr	r25
    109c:	87 95       	ror	r24
    109e:	90 93 3e 01 	sts	0x013E, r25
    10a2:	80 93 3d 01 	sts	0x013D, r24
  ADCconfig.U_Bandgap /= U_SCALE;
    10a6:	80 91 3b 01 	lds	r24, 0x013B
    10aa:	90 91 3c 01 	lds	r25, 0x013C
    10ae:	96 95       	lsr	r25
    10b0:	87 95       	ror	r24
    10b2:	96 95       	lsr	r25
    10b4:	87 95       	ror	r24
    10b6:	90 93 3c 01 	sts	0x013C, r25
    10ba:	80 93 3b 01 	sts	0x013B, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = ANZ_MESS;		// switch back to standard number of repetition
    10be:	89 e1       	ldi	r24, 0x19	; 25
    10c0:	80 93 39 01 	sts	0x0139, r24
#if DebugOut < 10
  wait_about2s();
#endif
#endif
 clean_ports:
  ADC_DDR = TXD_MSK;		// all ADC-Pins Input
    10c4:	88 e0       	ldi	r24, 0x08	; 8
    10c6:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// all ADC outputs to Ground, keine Pull up
    10c8:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// all resistor-outputs to Input
    10ca:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// all resistor-outputs to Ground, no Pull up
    10cc:	15 b8       	out	0x05, r1	; 5
} // end CheckPins()
    10ce:	66 96       	adiw	r28, 0x16	; 22
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	cd bf       	out	0x3d, r28	; 61
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	1f 91       	pop	r17
    10e0:	0f 91       	pop	r16
    10e2:	ff 90       	pop	r15
    10e4:	ef 90       	pop	r14
    10e6:	df 90       	pop	r13
    10e8:	cf 90       	pop	r12
    10ea:	bf 90       	pop	r11
    10ec:	af 90       	pop	r10
    10ee:	9f 90       	pop	r9
    10f0:	8f 90       	pop	r8
    10f2:	7f 90       	pop	r7
    10f4:	6f 90       	pop	r6
    10f6:	5f 90       	pop	r5
    10f8:	4f 90       	pop	r4
    10fa:	3f 90       	pop	r3
    10fc:	2f 90       	pop	r2
    10fe:	08 95       	ret

00001100 <EntladePins>:

// first discharge any charge of capacitors
void EntladePins() {
    1100:	af 92       	push	r10
    1102:	bf 92       	push	r11
    1104:	cf 92       	push	r12
    1106:	df 92       	push	r13
    1108:	ef 92       	push	r14
    110a:	ff 92       	push	r15
    110c:	0f 93       	push	r16
    110e:	1f 93       	push	r17
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
    1114:	ba e0       	ldi	r27, 0x0A	; 10
    1116:	cb 2e       	mov	r12, r27
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
    1118:	a8 e0       	ldi	r26, 0x08	; 8
    111a:	da 2e       	mov	r13, r26
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     R_PORT = 0;			// R-outputs auf 0
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
    111c:	fa e2       	ldi	r31, 0x2A	; 42
    111e:	af 2e       	mov	r10, r31
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
    1120:	e5 e1       	ldi	r30, 0x15	; 21
    1122:	be 2e       	mov	r11, r30
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
    1124:	d7 b8       	out	0x07, r13	; 7
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
    1126:	d8 b8       	out	0x08, r13	; 8
     R_PORT = 0;			// R-outputs auf 0
    1128:	15 b8       	out	0x05, r1	; 5
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
    112a:	a4 b8       	out	0x04, r10	; 4
     adcmv[0] = W5msReadADC(PC0);	// which voltage has Pin 1?
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
    1132:	8c 01       	movw	r16, r24
     adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
    113a:	ec 01       	movw	r28, r24
     adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
    113c:	82 e0       	ldi	r24, 0x02	; 2
    113e:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
     if ((PartFound == PART_CELL) || (adcmv[0] < CAP_EMPTY_LEVEL) & (adcmv[1] < CAP_EMPTY_LEVEL) & (adcmv[2] < CAP_EMPTY_LEVEL)) {
    1142:	20 91 07 01 	lds	r18, 0x0107
    1146:	28 30       	cpi	r18, 0x08	; 8
    1148:	c1 f0       	breq	.+48     	; 0x117a <EntladePins+0x7a>
    114a:	41 e0       	ldi	r20, 0x01	; 1
    114c:	c4 30       	cpi	r28, 0x04	; 4
    114e:	d1 05       	cpc	r29, r1
    1150:	08 f0       	brcs	.+2      	; 0x1154 <EntladePins+0x54>
    1152:	40 e0       	ldi	r20, 0x00	; 0
    1154:	21 e0       	ldi	r18, 0x01	; 1
    1156:	04 30       	cpi	r16, 0x04	; 4
    1158:	11 05       	cpc	r17, r1
    115a:	08 f0       	brcs	.+2      	; 0x115e <EntladePins+0x5e>
    115c:	20 e0       	ldi	r18, 0x00	; 0
    115e:	42 23       	and	r20, r18
    1160:	50 e0       	ldi	r21, 0x00	; 0
    1162:	21 e0       	ldi	r18, 0x01	; 1
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	84 30       	cpi	r24, 0x04	; 4
    1168:	91 05       	cpc	r25, r1
    116a:	10 f0       	brcs	.+4      	; 0x1170 <EntladePins+0x70>
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	24 23       	and	r18, r20
    1172:	35 23       	and	r19, r21
    1174:	21 15       	cp	r18, r1
    1176:	31 05       	cpc	r19, r1
    1178:	21 f0       	breq	.+8      	; 0x1182 <EntladePins+0x82>
        ADC_DDR = TXD_MSK;		// switch all ADC-Pins to input
    117a:	88 e0       	ldi	r24, 0x08	; 8
    117c:	87 b9       	out	0x07, r24	; 7
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
    117e:	14 b8       	out	0x04, r1	; 4
        return;
    1180:	4f c0       	rjmp	.+158    	; 0x1220 <EntladePins+0x120>
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
    1182:	23 e0       	ldi	r18, 0x03	; 3
    1184:	08 3e       	cpi	r16, 0xE8	; 232
    1186:	12 07       	cpc	r17, r18
    1188:	10 f0       	brcs	.+4      	; 0x118e <EntladePins+0x8e>
  uint8_t lop_cnt;		// loop counter
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
    118a:	28 e0       	ldi	r18, 0x08	; 8
    118c:	01 c0       	rjmp	.+2      	; 0x1190 <EntladePins+0x90>
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
        return;
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
        adc_gnd |= (1<<PC0);	//Pin 1 directly to GND
    118e:	29 e0       	ldi	r18, 0x09	; 9
     }
     if (adcmv[1] < 1000) {
    1190:	33 e0       	ldi	r19, 0x03	; 3
    1192:	c8 3e       	cpi	r28, 0xE8	; 232
    1194:	d3 07       	cpc	r29, r19
    1196:	08 f4       	brcc	.+2      	; 0x119a <EntladePins+0x9a>
        adc_gnd |= (1<<PC1);	//Pin 2 directly to GND
    1198:	22 60       	ori	r18, 0x02	; 2
     }
     if (adcmv[2] < 1000) {
    119a:	33 e0       	ldi	r19, 0x03	; 3
    119c:	88 3e       	cpi	r24, 0xE8	; 232
    119e:	93 07       	cpc	r25, r19
    11a0:	08 f4       	brcc	.+2      	; 0x11a4 <EntladePins+0xa4>
        adc_gnd |= (1<<PC2);	//Pin 3 directly to  GND
    11a2:	24 60       	ori	r18, 0x04	; 4
     }
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time
    11a4:	27 b9       	out	0x07, r18	; 7

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
    11a6:	b4 b8       	out	0x04, r11	; 4
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    11a8:	c0 e0       	ldi	r28, 0x00	; 0
    11aa:	d0 e0       	ldi	r29, 0x00	; 0
        wdt_reset();
    11ac:	a8 95       	wdr
        adcmv[0] = W20msReadADC(PC0);	// which voltage has Pin 1?
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	0e 94 9b 1a 	call	0x3536	; 0x3536 <W20msReadADC>
    11b4:	7c 01       	movw	r14, r24
        adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
    11bc:	8c 01       	movw	r16, r24
        adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
    11be:	82 e0       	ldi	r24, 0x02	; 2
    11c0:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
        if (adcmv[0] < 1300) {
    11c4:	24 e1       	ldi	r18, 0x14	; 20
    11c6:	e2 16       	cp	r14, r18
    11c8:	25 e0       	ldi	r18, 0x05	; 5
    11ca:	f2 06       	cpc	r15, r18
    11cc:	08 f4       	brcc	.+2      	; 0x11d0 <EntladePins+0xd0>
           ADC_DDR |= (1<<PC0);	// below 1.3V , switch directly with ADC-Port to GND
    11ce:	38 9a       	sbi	0x07, 0	; 7
        }
        if (adcmv[1] < 1300) {
    11d0:	35 e0       	ldi	r19, 0x05	; 5
    11d2:	04 31       	cpi	r16, 0x14	; 20
    11d4:	13 07       	cpc	r17, r19
    11d6:	08 f4       	brcc	.+2      	; 0x11da <EntladePins+0xda>
           ADC_DDR |= (1<<PC1);	// below 1.3V, switch directly with ADC-Port to GND
    11d8:	39 9a       	sbi	0x07, 1	; 7
        }
        if (adcmv[2] < 1300) {
    11da:	25 e0       	ldi	r18, 0x05	; 5
    11dc:	84 31       	cpi	r24, 0x14	; 20
    11de:	92 07       	cpc	r25, r18
    11e0:	08 f4       	brcc	.+2      	; 0x11e4 <EntladePins+0xe4>
           ADC_DDR |= (1<<PC2);	// below 1.3V, switch directly with ADC-Port to GND
    11e2:	3a 9a       	sbi	0x07, 2	; 7
        }
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
    11e4:	36 e0       	ldi	r19, 0x06	; 6
    11e6:	e3 16       	cp	r14, r19
    11e8:	f1 04       	cpc	r15, r1
    11ea:	30 f4       	brcc	.+12     	; 0x11f8 <EntladePins+0xf8>
    11ec:	06 30       	cpi	r16, 0x06	; 6
    11ee:	11 05       	cpc	r17, r1
    11f0:	18 f4       	brcc	.+6      	; 0x11f8 <EntladePins+0xf8>
    11f2:	86 30       	cpi	r24, 0x06	; 6
    11f4:	91 05       	cpc	r25, r1
    11f6:	38 f0       	brcs	.+14     	; 0x1206 <EntladePins+0x106>

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    11f8:	21 96       	adiw	r28, 0x01	; 1
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	c4 3f       	cpi	r28, 0xF4	; 244
    11fe:	d8 07       	cpc	r29, r24
    1200:	a9 f6       	brne	.-86     	; 0x11ac <EntladePins+0xac>
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
           break;
        }
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
    1202:	d0 92 07 01 	sts	0x0107, r13

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    1206:	00 e0       	ldi	r16, 0x00	; 0
    1208:	10 e0       	ldi	r17, 0x00	; 0
    120a:	04 c0       	rjmp	.+8      	; 0x1214 <EntladePins+0x114>
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
    120c:	0e 94 f6 14 	call	0x29ec	; 0x29ec <wait1ms>
    1210:	0f 5f       	subi	r16, 0xFF	; 255
    1212:	1f 4f       	sbci	r17, 0xFF	; 255
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
    1214:	0c 17       	cp	r16, r28
    1216:	1d 07       	cpc	r17, r29
    1218:	c8 f3       	brcs	.-14     	; 0x120c <EntladePins+0x10c>
    121a:	ca 94       	dec	r12
  unsigned int clr_cnt;		// Clear Counter
  uint8_t lop_cnt;		// loop counter
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
    121c:	09 f0       	breq	.+2      	; 0x1220 <EntladePins+0x120>
    121e:	82 cf       	rjmp	.-252    	; 0x1124 <EntladePins+0x24>
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     }
  } // end while
 }
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	1f 91       	pop	r17
    1226:	0f 91       	pop	r16
    1228:	ff 90       	pop	r15
    122a:	ef 90       	pop	r14
    122c:	df 90       	pop	r13
    122e:	cf 90       	pop	r12
    1230:	bf 90       	pop	r11
    1232:	af 90       	pop	r10
    1234:	08 95       	ret

00001236 <RefVoltage>:



#ifdef AUTO_RH
void RefVoltage(void) {
    1236:	ff 92       	push	r15
    1238:	0f 93       	push	r16
    123a:	1f 93       	push	r17
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;

  #ifdef AUTO_CAL
  referenz = ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset));
    1240:	87 eb       	ldi	r24, 0xB7	; 183
    1242:	91 e0       	ldi	r25, 0x01	; 1
    1244:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <__eerd_word_m168>
    1248:	20 91 3f 01 	lds	r18, 0x013F
    124c:	30 91 40 01 	lds	r19, 0x0140
    1250:	28 0f       	add	r18, r24
    1252:	39 1f       	adc	r19, r25
  #else
  referenz = ref_mv + REF_C_KORR;
  #endif
  if (referenz >= Ref_Tab_Beginn) {
    1254:	83 e0       	ldi	r24, 0x03	; 3
    1256:	28 3e       	cpi	r18, 0xE8	; 232
    1258:	38 07       	cpc	r19, r24
    125a:	20 f0       	brcs	.+8      	; 0x1264 <RefVoltage+0x2e>
     referenz -= Ref_Tab_Beginn;
    125c:	c9 01       	movw	r24, r18
    125e:	88 5e       	subi	r24, 0xE8	; 232
    1260:	93 40       	sbci	r25, 0x03	; 3
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <RefVoltage+0x32>
  } else  {
     referenz = 0;		// limit to begin of table
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = referenz / Ref_Tab_Abstand;
    1268:	62 e3       	ldi	r22, 0x32	; 50
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <__udivmodhi4>
  tabres = referenz % Ref_Tab_Abstand;
    1270:	f8 2e       	mov	r15, r24
  tabres = Ref_Tab_Abstand-tabres;
  if (tabind > 7) {
     tabind = 7;		// limit to end of table
  }
  // interpolate the table of factors
  y1 = MEM_read_word(&RHtab[tabind]);
    1272:	68 30       	cpi	r22, 0x08	; 8
    1274:	08 f0       	brcs	.+2      	; 0x1278 <RefVoltage+0x42>
    1276:	67 e0       	ldi	r22, 0x07	; 7
    1278:	c6 2f       	mov	r28, r22
    127a:	d0 e0       	ldi	r29, 0x00	; 0
    127c:	ce 01       	movw	r24, r28
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	86 5a       	subi	r24, 0xA6	; 166
    1284:	9f 4f       	sbci	r25, 0xFF	; 255
    1286:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <__eerd_word_m168>
    128a:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RHtab[tabind+1]);
    128c:	ce 01       	movw	r24, r28
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	84 5a       	subi	r24, 0xA4	; 164
    1294:	9f 4f       	sbci	r25, 0xFF	; 255
    1296:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <__eerd_word_m168>
    129a:	9c 01       	movw	r18, r24
  } else  {
     referenz = 0;		// limit to begin of table
  }
  tabind = referenz / Ref_Tab_Abstand;
  tabres = referenz % Ref_Tab_Abstand;
  tabres = Ref_Tab_Abstand-tabres;
    129c:	42 e3       	ldi	r20, 0x32	; 50
    129e:	4f 19       	sub	r20, r15
  }
  // interpolate the table of factors
  y1 = MEM_read_word(&RHtab[tabind]);
  y2 = MEM_read_word(&RHtab[tabind+1]);
  // RHmultip is the interpolated factor to compute capacity from load time with 470k
  RHmultip = ((y1 - y2) * tabres + (Ref_Tab_Abstand/2)) / Ref_Tab_Abstand + y2;
    12a0:	50 e0       	ldi	r21, 0x00	; 0
    12a2:	08 1b       	sub	r16, r24
    12a4:	19 0b       	sbc	r17, r25
    12a6:	40 9f       	mul	r20, r16
    12a8:	c0 01       	movw	r24, r0
    12aa:	41 9f       	mul	r20, r17
    12ac:	90 0d       	add	r25, r0
    12ae:	50 9f       	mul	r21, r16
    12b0:	90 0d       	add	r25, r0
    12b2:	11 24       	eor	r1, r1
    12b4:	49 96       	adiw	r24, 0x19	; 25
    12b6:	62 e3       	ldi	r22, 0x32	; 50
    12b8:	70 e0       	ldi	r23, 0x00	; 0
    12ba:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <__udivmodhi4>
    12be:	62 0f       	add	r22, r18
    12c0:	73 1f       	adc	r23, r19
    12c2:	70 93 01 01 	sts	0x0101, r23
    12c6:	60 93 00 01 	sts	0x0100, r22
 }
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	1f 91       	pop	r17
    12d0:	0f 91       	pop	r16
    12d2:	ff 90       	pop	r15
    12d4:	08 95       	ret

000012d6 <lcd_clear_line>:
#endif

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
    12d6:	1f 93       	push	r17
    12d8:	14 e1       	ldi	r17, 0x14	; 20
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    lcd_space();
    12da:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
    12de:	11 50       	subi	r17, 0x01	; 1

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    12e0:	e1 f7       	brne	.-8      	; 0x12da <lcd_clear_line+0x4>
    lcd_space();
 }
}
    12e2:	1f 91       	pop	r17
    12e4:	08 95       	ret

000012e6 <DisplayValue>:
 *    e.g: p = 10^-12 -> -12
 *  - unit character (0 = none)
 *  digits = 2, 3 or 4
 */
void DisplayValue(unsigned long Value, int8_t Exponent, unsigned char Unit, unsigned char digits)
{
    12e6:	2f 92       	push	r2
    12e8:	3f 92       	push	r3
    12ea:	4f 92       	push	r4
    12ec:	5f 92       	push	r5
    12ee:	7f 92       	push	r7
    12f0:	8f 92       	push	r8
    12f2:	9f 92       	push	r9
    12f4:	af 92       	push	r10
    12f6:	bf 92       	push	r11
    12f8:	cf 92       	push	r12
    12fa:	df 92       	push	r13
    12fc:	ef 92       	push	r14
    12fe:	ff 92       	push	r15
    1300:	0f 93       	push	r16
    1302:	1f 93       	push	r17
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    130c:	2f 97       	sbiw	r28, 0x0f	; 15
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	f8 94       	cli
    1312:	de bf       	out	0x3e, r29	; 62
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	cd bf       	out	0x3d, r28	; 61
    1318:	6b 01       	movw	r12, r22
    131a:	7c 01       	movw	r14, r24
    131c:	14 2f       	mov	r17, r20
    131e:	72 2e       	mov	r7, r18
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
    1320:	03 30       	cpi	r16, 0x03	; 3
    1322:	29 f0       	breq	.+10     	; 0x132e <DisplayValue+0x48>
  if (digits == 4) Limit = 10000;
    1324:	04 30       	cpi	r16, 0x04	; 4
    1326:	31 f0       	breq	.+12     	; 0x1334 <DisplayValue+0x4e>
  uint8_t           Offset;		/* exponent of offset to next 10^3 step */
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
    1328:	84 e6       	ldi	r24, 0x64	; 100
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	14 c0       	rjmp	.+40     	; 0x1356 <DisplayValue+0x70>
  if (digits == 3) Limit = 1000;
    132e:	88 ee       	ldi	r24, 0xE8	; 232
    1330:	93 e0       	ldi	r25, 0x03	; 3
    1332:	11 c0       	rjmp	.+34     	; 0x1356 <DisplayValue+0x70>
  if (digits == 4) Limit = 10000;
    1334:	80 e1       	ldi	r24, 0x10	; 16
    1336:	97 e2       	ldi	r25, 0x27	; 39
    1338:	0e c0       	rjmp	.+28     	; 0x1356 <DisplayValue+0x70>
  while (Value >= Limit)
  {
    Value += 5;				/* for automagic rounding */
    133a:	c7 01       	movw	r24, r14
    133c:	b6 01       	movw	r22, r12
    133e:	6b 5f       	subi	r22, 0xFB	; 251
    1340:	7f 4f       	sbci	r23, 0xFF	; 255
    1342:	8f 4f       	sbci	r24, 0xFF	; 255
    1344:	9f 4f       	sbci	r25, 0xFF	; 255
    Value = Value / 10;			/* scale down by 10^1 */
    1346:	a5 01       	movw	r20, r10
    1348:	94 01       	movw	r18, r8
    134a:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
    134e:	69 01       	movw	r12, r18
    1350:	7a 01       	movw	r14, r20
    Exponent++;				/* increase exponent by 1 */
    1352:	1f 5f       	subi	r17, 0xFF	; 255
    1354:	08 c0       	rjmp	.+16     	; 0x1366 <DisplayValue+0x80>


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
  if (digits == 4) Limit = 10000;
  while (Value >= Limit)
    1356:	1c 01       	movw	r2, r24
    1358:	44 24       	eor	r4, r4
    135a:	55 24       	eor	r5, r5
  {
    Value += 5;				/* for automagic rounding */
    Value = Value / 10;			/* scale down by 10^1 */
    135c:	4a e0       	ldi	r20, 0x0A	; 10
    135e:	84 2e       	mov	r8, r20
    1360:	91 2c       	mov	r9, r1
    1362:	a1 2c       	mov	r10, r1
    1364:	b1 2c       	mov	r11, r1


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
  if (digits == 4) Limit = 10000;
  while (Value >= Limit)
    1366:	c2 14       	cp	r12, r2
    1368:	d3 04       	cpc	r13, r3
    136a:	e4 04       	cpc	r14, r4
    136c:	f5 04       	cpc	r15, r5
    136e:	28 f7       	brcc	.-54     	; 0x133a <DisplayValue+0x54>


  /*
   *  determine prefix
   */
  Length = Exponent + 12;
    1370:	81 2f       	mov	r24, r17
    1372:	84 5f       	subi	r24, 0xF4	; 244
    1374:	83 31       	cpi	r24, 0x13	; 19
    1376:	08 f0       	brcs	.+2      	; 0x137a <DisplayValue+0x94>
    1378:	82 e1       	ldi	r24, 0x12	; 18
  if (Length <  0) Length = 0;		/* Limit to minimum prefix */
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
  Index = Length / 3;
    137a:	23 e0       	ldi	r18, 0x03	; 3
  Offset = Length % 3;
    137c:	62 2f       	mov	r22, r18
    137e:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <__udivmodqi4>
    1382:	19 2f       	mov	r17, r25
    if (Offset > 0)
    1384:	99 23       	and	r25, r25
    1386:	19 f0       	breq	.+6      	; 0x138e <DisplayValue+0xa8>
    {
      Index++;				/* adjust index for exponent offset, take next prefix */
    1388:	8f 5f       	subi	r24, 0xFF	; 255
      Offset = 3 - Offset;		/* reverse value (1 or 2) */
    138a:	29 1b       	sub	r18, r25
    138c:	12 2f       	mov	r17, r18
    }
  Prefix = MEM_read_byte((uint8_t *)(&PrefixTab[Index]));   /* look up prefix in table */
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	80 55       	subi	r24, 0x50	; 80
    1392:	9e 4f       	sbci	r25, 0xFE	; 254
    1394:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <__eerd_byte_m168>
    1398:	b8 2e       	mov	r11, r24
  /*
   *  display value
   */

  /* convert value into string */
  utoa((unsigned int)Value, OutBuffer, 10);
    139a:	c6 01       	movw	r24, r12
    139c:	6e 01       	movw	r12, r28
    139e:	08 94       	sec
    13a0:	c1 1c       	adc	r12, r1
    13a2:	d1 1c       	adc	r13, r1
    13a4:	b6 01       	movw	r22, r12
    13a6:	4a e0       	ldi	r20, 0x0A	; 10
    13a8:	50 e0       	ldi	r21, 0x00	; 0
    13aa:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <utoa>
  Length = strlen(OutBuffer);
    13ae:	f6 01       	movw	r30, r12
    13b0:	01 90       	ld	r0, Z+
    13b2:	00 20       	and	r0, r0
    13b4:	e9 f7       	brne	.-6      	; 0x13b0 <DisplayValue+0xca>
    13b6:	31 97       	sbiw	r30, 0x01	; 1
    13b8:	2e 2e       	mov	r2, r30
    13ba:	2c 18       	sub	r2, r12

  /* position of dot */
  Exponent = Length - Offset;		/* calculate position */
    13bc:	82 2c       	mov	r8, r2
    13be:	81 1a       	sub	r8, r17

  if (Exponent <= 0)			/* we have to prepend "0." */
    13c0:	18 14       	cp	r1, r8
    13c2:	44 f0       	brlt	.+16     	; 0x13d4 <DisplayValue+0xee>
  {
    /* 0: factor 10 / -1: factor 100 */
//    lcd_data('0');
    lcd_data('.');
    13c4:	8e e2       	ldi	r24, 0x2E	; 46
    13c6:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
    if (Exponent < 0) lcd_data('0');	/* extra 0 for factor 100 */
    13ca:	88 20       	and	r8, r8
    13cc:	19 f0       	breq	.+6      	; 0x13d4 <DisplayValue+0xee>
    13ce:	80 e3       	ldi	r24, 0x30	; 48
    13d0:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
  }

  if (Offset == 0) Exponent = -1;	/* disable dot if not needed */
    13d4:	11 23       	and	r17, r17
    13d6:	11 f4       	brne	.+4      	; 0x13dc <DisplayValue+0xf6>
    13d8:	88 24       	eor	r8, r8
    13da:	8a 94       	dec	r8
    13dc:	6e 01       	movw	r12, r28
    13de:	08 94       	sec
    13e0:	c1 1c       	adc	r12, r1
    13e2:	d1 1c       	adc	r13, r1
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    13e4:	00 e0       	ldi	r16, 0x00	; 0
    13e6:	10 e0       	ldi	r17, 0x00	; 0
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    Index++;				/* next one */
    if (Index == Exponent) {
    13e8:	99 24       	eor	r9, r9
    13ea:	87 fc       	sbrc	r8, 7
    13ec:	90 94       	com	r9
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    13ee:	0d c0       	rjmp	.+26     	; 0x140a <DisplayValue+0x124>
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    13f0:	0f 5f       	subi	r16, 0xFF	; 255
    13f2:	1f 4f       	sbci	r17, 0xFF	; 255
    13f4:	f6 01       	movw	r30, r12
    13f6:	81 91       	ld	r24, Z+
    13f8:	6f 01       	movw	r12, r30
    13fa:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
    Index++;				/* next one */
    if (Index == Exponent) {
    13fe:	08 15       	cp	r16, r8
    1400:	19 05       	cpc	r17, r9
    1402:	19 f4       	brne	.+6      	; 0x140a <DisplayValue+0x124>
      lcd_data('.');			/* display dot */
    1404:	8e e2       	ldi	r24, 0x2E	; 46
    1406:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    140a:	02 15       	cp	r16, r2
    140c:	88 f3       	brcs	.-30     	; 0x13f0 <DisplayValue+0x10a>
      lcd_data('.');			/* display dot */
    }
  }

  /* display prefix and unit */
  if (Prefix != 0) lcd_data(Prefix);
    140e:	bb 20       	and	r11, r11
    1410:	19 f0       	breq	.+6      	; 0x1418 <DisplayValue+0x132>
    1412:	8b 2d       	mov	r24, r11
    1414:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
  if (Unit) lcd_data(Unit);
    1418:	77 20       	and	r7, r7
    141a:	19 f0       	breq	.+6      	; 0x1422 <DisplayValue+0x13c>
    141c:	87 2d       	mov	r24, r7
    141e:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
}
    1422:	2f 96       	adiw	r28, 0x0f	; 15
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	cd bf       	out	0x3d, r28	; 61
    142e:	cf 91       	pop	r28
    1430:	df 91       	pop	r29
    1432:	1f 91       	pop	r17
    1434:	0f 91       	pop	r16
    1436:	ff 90       	pop	r15
    1438:	ef 90       	pop	r14
    143a:	df 90       	pop	r13
    143c:	cf 90       	pop	r12
    143e:	bf 90       	pop	r11
    1440:	af 90       	pop	r10
    1442:	9f 90       	pop	r9
    1444:	8f 90       	pop	r8
    1446:	7f 90       	pop	r7
    1448:	5f 90       	pop	r5
    144a:	4f 90       	pop	r4
    144c:	3f 90       	pop	r3
    144e:	2f 90       	pop	r2
    1450:	08 95       	ret

00001452 <RvalOut>:
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
      lcd_space();
   }
}

void RvalOut(uint8_t ii) {	
    1452:	0f 93       	push	r16
   // output of resistor value

   DisplayValue(resis[ii].rx,-1,LCD_CHAR_OMEGA,4);
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	2b e0       	ldi	r18, 0x0B	; 11
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	82 9f       	mul	r24, r18
    145c:	f0 01       	movw	r30, r0
    145e:	83 9f       	mul	r24, r19
    1460:	f0 0d       	add	r31, r0
    1462:	92 9f       	mul	r25, r18
    1464:	f0 0d       	add	r31, r0
    1466:	11 24       	eor	r1, r1
    1468:	e8 5e       	subi	r30, 0xE8	; 232
    146a:	fe 4f       	sbci	r31, 0xFE	; 254
    146c:	60 81       	ld	r22, Z
    146e:	71 81       	ldd	r23, Z+1	; 0x01
    1470:	82 81       	ldd	r24, Z+2	; 0x02
    1472:	93 81       	ldd	r25, Z+3	; 0x03
    1474:	4f ef       	ldi	r20, 0xFF	; 255
    1476:	24 ef       	ldi	r18, 0xF4	; 244
    1478:	04 e0       	ldi	r16, 0x04	; 4
    147a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <DisplayValue>
   lcd_space();
    147e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
 }
    1482:	0f 91       	pop	r16
    1484:	08 95       	ret

00001486 <mVAusgabe>:
   lcd_line2(); 				//2. row
   lcd_fix_string(Uf_str);			//"Uf="
   mVAusgabe(bcdnum >> 4);
   mVAusgabe(bcdnum & 0x0f);
}
void mVAusgabe(uint8_t nn) {
    1486:	0f 93       	push	r16
   if (nn < 3) {
    1488:	83 30       	cpi	r24, 0x03	; 3
    148a:	98 f4       	brcc	.+38     	; 0x14b2 <mVAusgabe+0x2c>
      // Output in mV units
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
    148c:	e8 2f       	mov	r30, r24
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	ee 0f       	add	r30, r30
    1492:	ff 1f       	adc	r31, r31
    1494:	ee 0f       	add	r30, r30
    1496:	ff 1f       	adc	r31, r31
    1498:	e4 59       	subi	r30, 0x94	; 148
    149a:	fe 4f       	sbci	r31, 0xFE	; 254
    149c:	62 81       	ldd	r22, Z+2	; 0x02
    149e:	73 81       	ldd	r23, Z+3	; 0x03
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	4d ef       	ldi	r20, 0xFD	; 253
    14a6:	26 e5       	ldi	r18, 0x56	; 86
    14a8:	03 e0       	ldi	r16, 0x03	; 3
    14aa:	0e 94 73 09 	call	0x12e6	; 0x12e6 <DisplayValue>
      lcd_space();
    14ae:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
   }
}
    14b2:	0f 91       	pop	r16
    14b4:	08 95       	ret

000014b6 <UfAusgabe>:
// output of flux voltage for 1-2 diodes in row 2
// bcdnum = Numbers of both Diodes:
// higher 4 Bit  number of first Diode
// lower 4 Bit  number of second Diode (Structure diodes[nn])
// if number >= 3  no output is done
void UfAusgabe(uint8_t bcdnum) {
    14b6:	1f 93       	push	r17
    14b8:	18 2f       	mov	r17, r24

   lcd_line2(); 				//2. row
    14ba:	80 ec       	ldi	r24, 0xC0	; 192
    14bc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
   lcd_fix_string(Uf_str);			//"Uf="
    14c0:	8e e0       	ldi	r24, 0x0E	; 14
    14c2:	91 e0       	ldi	r25, 0x01	; 1
    14c4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
   mVAusgabe(bcdnum >> 4);
    14c8:	81 2f       	mov	r24, r17
    14ca:	82 95       	swap	r24
    14cc:	8f 70       	andi	r24, 0x0F	; 15
    14ce:	0e 94 43 0a 	call	0x1486	; 0x1486 <mVAusgabe>
   mVAusgabe(bcdnum & 0x0f);
    14d2:	81 2f       	mov	r24, r17
    14d4:	8f 70       	andi	r24, 0x0F	; 15
    14d6:	0e 94 43 0a 	call	0x1486	; 0x1486 <mVAusgabe>
}
    14da:	1f 91       	pop	r17
    14dc:	08 95       	ret

000014de <sleep_5ms>:
      t2_offset =  (5000 - (16384 / (int)(F_CPU / 1000000UL))) / (1024 / (int)(F_CPU / 1000000UL));	/* set to 5ms above the actual counter */
      pause = 0;
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
    14de:	42 e0       	ldi	r20, 0x02	; 2
/* wake up will be done with compare match interrupt of counter 2 */
void sleep_5ms(uint16_t pause){
// pause is the delay in 5ms units
uint8_t t2_offset;

while (pause > 0)
    14e0:	1c c0       	rjmp	.+56     	; 0x151a <sleep_5ms+0x3c>
  {
#if F_CPU >= 8000000UL
   if (pause > 1)
    14e2:	82 30       	cpi	r24, 0x02	; 2
    14e4:	91 05       	cpc	r25, r1
    14e6:	18 f0       	brcs	.+6      	; 0x14ee <sleep_5ms+0x10>
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - (16384 / (int)(F_CPU / 1000000UL))) / (1024 / (int)(F_CPU / 1000000UL));	/* set to 10ms above the actual counter */
      pause -= 2;
    14e8:	02 97       	sbiw	r24, 0x02	; 2
  {
#if F_CPU >= 8000000UL
   if (pause > 1)
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - (16384 / (int)(F_CPU / 1000000UL))) / (1024 / (int)(F_CPU / 1000000UL));	/* set to 10ms above the actual counter */
    14ea:	3e e3       	ldi	r19, 0x3E	; 62
    14ec:	03 c0       	rjmp	.+6      	; 0x14f4 <sleep_5ms+0x16>
      pause -= 2;
     } else {
      t2_offset =  (5000 - (16384 / (int)(F_CPU / 1000000UL))) / (1024 / (int)(F_CPU / 1000000UL));	/* set to 5ms above the actual counter */
    14ee:	37 e1       	ldi	r19, 0x17	; 23
      pause = 0;
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	90 e0       	ldi	r25, 0x00	; 0
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
    14f4:	20 91 b2 00 	lds	r18, 0x00B2
    14f8:	23 0f       	add	r18, r19
    14fa:	20 93 b3 00 	sts	0x00B3, r18
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
    14fe:	40 93 70 00 	sts	0x0070, r20
//   set_sleep_mode(SLEEP_MODE_PWR_SAVE);
   set_sleep_mode(SLEEP_MODE_PWR_SAVE);
    1502:	23 b7       	in	r18, 0x33	; 51
    1504:	21 7f       	andi	r18, 0xF1	; 241
    1506:	26 60       	ori	r18, 0x06	; 6
    1508:	23 bf       	out	0x33, r18	; 51
//   set_sleep_mode(SLEEP_MODE_IDLE);
   sleep_mode();
    150a:	23 b7       	in	r18, 0x33	; 51
    150c:	21 60       	ori	r18, 0x01	; 1
    150e:	23 bf       	out	0x33, r18	; 51
    1510:	88 95       	sleep
    1512:	23 b7       	in	r18, 0x33	; 51
    1514:	2e 7f       	andi	r18, 0xFE	; 254
    1516:	23 bf       	out	0x33, r18	; 51
// wake up after output compare match interrupt
#else
   wait5ms();
#endif
   wdt_reset();
    1518:	a8 95       	wdr
/* wake up will be done with compare match interrupt of counter 2 */
void sleep_5ms(uint16_t pause){
// pause is the delay in 5ms units
uint8_t t2_offset;

while (pause > 0)
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	11 f7       	brne	.-60     	; 0x14e2 <sleep_5ms+0x4>
#else
   wait5ms();
#endif
   wdt_reset();
  }
TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
    151e:	10 92 70 00 	sts	0x0070, r1
}
    1522:	08 95       	ret

00001524 <AutoCheck>:
void AutoCheck(void) {
    1524:	2f 92       	push	r2
    1526:	3f 92       	push	r3
    1528:	4f 92       	push	r4
    152a:	5f 92       	push	r5
    152c:	6f 92       	push	r6
    152e:	7f 92       	push	r7
    1530:	8f 92       	push	r8
    1532:	9f 92       	push	r9
    1534:	af 92       	push	r10
    1536:	bf 92       	push	r11
    1538:	cf 92       	push	r12
    153a:	df 92       	push	r13
    153c:	ef 92       	push	r14
    153e:	ff 92       	push	r15
    1540:	0f 93       	push	r16
    1542:	1f 93       	push	r17
    1544:	df 93       	push	r29
    1546:	cf 93       	push	r28
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	2e 97       	sbiw	r28, 0x0e	; 14
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61

#ifdef AUTO_CAL
  uint8_t cap_found;	// counter for found capacitor
  int8_t udiff2;
#endif
  ADC_PORT = TXD_VAL;
    1558:	88 e0       	ldi	r24, 0x08	; 8
    155a:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = TXD_MSK;
    155c:	87 b9       	out	0x07, r24	; 7
  R_PORT = (1<<(TP1*2));		//Pin 1 over RL to +
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	85 b9       	out	0x05, r24	; 5
  R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//Pin 2 over RL to -
    1562:	85 e0       	ldi	r24, 0x05	; 5
    1564:	84 b9       	out	0x04, r24	; 4
  adcmv[0] = W5msReadADC(PC0);		// voltage at Pin 1
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
    156c:	8c 01       	movw	r16, r24
    156e:	9a 83       	std	Y+2, r25	; 0x02
    1570:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = ReadADC(PC1);		// voltage at Pin 2
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
    1578:	7c 01       	movw	r14, r24
    157a:	9c 83       	std	Y+4, r25	; 0x04
    157c:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = ReadADC(PC2);		// voltage at Pin 3
    157e:	82 e0       	ldi	r24, 0x02	; 2
    1580:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
    1584:	9c 01       	movw	r18, r24
    1586:	9e 83       	std	Y+6, r25	; 0x06
    1588:	8d 83       	std	Y+5, r24	; 0x05
  if (abs((int)(adcmv[1] - adcmv[0])) > 20) {
    158a:	e0 1a       	sub	r14, r16
    158c:	f1 0a       	sbc	r15, r17
    158e:	f7 fe       	sbrs	r15, 7
    1590:	04 c0       	rjmp	.+8      	; 0x159a <AutoCheck+0x76>
    1592:	f0 94       	com	r15
    1594:	e1 94       	neg	r14
    1596:	f1 08       	sbc	r15, r1
    1598:	f3 94       	inc	r15
    159a:	85 e1       	ldi	r24, 0x15	; 21
    159c:	e8 16       	cp	r14, r24
    159e:	f1 04       	cpc	r15, r1
    15a0:	0c f0       	brlt	.+2      	; 0x15a4 <AutoCheck+0x80>
    15a2:	57 c4       	rjmp	.+2222   	; 0x1e52 <AutoCheck+0x92e>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[2] - adcmv[0])) > 20) {
    15a4:	20 1b       	sub	r18, r16
    15a6:	31 0b       	sbc	r19, r17
    15a8:	37 ff       	sbrs	r19, 7
    15aa:	03 c0       	rjmp	.+6      	; 0x15b2 <AutoCheck+0x8e>
    15ac:	30 95       	com	r19
    15ae:	21 95       	neg	r18
    15b0:	3f 4f       	sbci	r19, 0xFF	; 255
    15b2:	25 31       	cpi	r18, 0x15	; 21
    15b4:	31 05       	cpc	r19, r1
    15b6:	0c f0       	brlt	.+2      	; 0x15ba <AutoCheck+0x96>
    15b8:	4c c4       	rjmp	.+2200   	; 0x1e52 <AutoCheck+0x92e>
     return;				//difference to big, no selftest
  }
  if (abs((int)((adcmv[0]*2) - ADCconfig.U_AVCC)) > 60) {
    15ba:	00 0f       	add	r16, r16
    15bc:	11 1f       	adc	r17, r17
    15be:	80 91 3d 01 	lds	r24, 0x013D
    15c2:	90 91 3e 01 	lds	r25, 0x013E
    15c6:	08 1b       	sub	r16, r24
    15c8:	19 0b       	sbc	r17, r25
    15ca:	17 ff       	sbrs	r17, 7
    15cc:	03 c0       	rjmp	.+6      	; 0x15d4 <AutoCheck+0xb0>
    15ce:	10 95       	com	r17
    15d0:	01 95       	neg	r16
    15d2:	1f 4f       	sbci	r17, 0xFF	; 255
    15d4:	0d 33       	cpi	r16, 0x3D	; 61
    15d6:	11 05       	cpc	r17, r1
    15d8:	0c f0       	brlt	.+2      	; 0x15dc <AutoCheck+0xb8>
    15da:	3b c4       	rjmp	.+2166   	; 0x1e52 <AutoCheck+0x92e>
     return;				//difference to big, no selftest
  }
  R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//Pin 3 over RL to - (Pin 1 over RL to +)
    15dc:	81 e1       	ldi	r24, 0x11	; 17
    15de:	84 b9       	out	0x04, r24	; 4
  adcmv[0] = W5msReadADC(PC0);		// voltage at Pin 1
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
    15e6:	8c 01       	movw	r16, r24
    15e8:	9a 83       	std	Y+2, r25	; 0x02
    15ea:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = ReadADC(PC1);		// voltage at Pin 2
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
    15f2:	7c 01       	movw	r14, r24
    15f4:	9c 83       	std	Y+4, r25	; 0x04
    15f6:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = ReadADC(PC2);		// voltage at Pin 3
    15f8:	82 e0       	ldi	r24, 0x02	; 2
    15fa:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
    15fe:	9c 01       	movw	r18, r24
    1600:	9e 83       	std	Y+6, r25	; 0x06
    1602:	8d 83       	std	Y+5, r24	; 0x05
  if (abs((int)(adcmv[1] - adcmv[0])) > 20) {
    1604:	e0 1a       	sub	r14, r16
    1606:	f1 0a       	sbc	r15, r17
    1608:	f7 fe       	sbrs	r15, 7
    160a:	04 c0       	rjmp	.+8      	; 0x1614 <AutoCheck+0xf0>
    160c:	f0 94       	com	r15
    160e:	e1 94       	neg	r14
    1610:	f1 08       	sbc	r15, r1
    1612:	f3 94       	inc	r15
    1614:	e5 e1       	ldi	r30, 0x15	; 21
    1616:	ee 16       	cp	r14, r30
    1618:	f1 04       	cpc	r15, r1
    161a:	0c f0       	brlt	.+2      	; 0x161e <AutoCheck+0xfa>
    161c:	1a c4       	rjmp	.+2100   	; 0x1e52 <AutoCheck+0x92e>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[2] - adcmv[0])) > 20) {
    161e:	20 1b       	sub	r18, r16
    1620:	31 0b       	sbc	r19, r17
    1622:	37 ff       	sbrs	r19, 7
    1624:	03 c0       	rjmp	.+6      	; 0x162c <AutoCheck+0x108>
    1626:	30 95       	com	r19
    1628:	21 95       	neg	r18
    162a:	3f 4f       	sbci	r19, 0xFF	; 255
    162c:	25 31       	cpi	r18, 0x15	; 21
    162e:	31 05       	cpc	r19, r1
    1630:	0c f0       	brlt	.+2      	; 0x1634 <AutoCheck+0x110>
    1632:	0f c4       	rjmp	.+2078   	; 0x1e52 <AutoCheck+0x92e>
     return;				//difference to big, no selftest
  }
  if (abs((int)((adcmv[0]*2) - ADCconfig.U_AVCC)) > 60) {
    1634:	00 0f       	add	r16, r16
    1636:	11 1f       	adc	r17, r17
    1638:	80 91 3d 01 	lds	r24, 0x013D
    163c:	90 91 3e 01 	lds	r25, 0x013E
    1640:	08 1b       	sub	r16, r24
    1642:	19 0b       	sbc	r17, r25
    1644:	17 ff       	sbrs	r17, 7
    1646:	03 c0       	rjmp	.+6      	; 0x164e <AutoCheck+0x12a>
    1648:	10 95       	com	r17
    164a:	01 95       	neg	r16
    164c:	1f 4f       	sbci	r17, 0xFF	; 255
    164e:	0d 33       	cpi	r16, 0x3D	; 61
    1650:	11 05       	cpc	r17, r1
    1652:	0c f0       	brlt	.+2      	; 0x1656 <AutoCheck+0x132>
    1654:	fe c3       	rjmp	.+2044   	; 0x1e52 <AutoCheck+0x92e>
     return;				//difference to big, no selftest
  }
#ifdef WITH_SELFTEST
  lcd_clear();
    1656:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
    165a:	84 ec       	ldi	r24, 0xC4	; 196
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	0e 94 40 01 	call	0x280	; 0x280 <lcd_pgm_string>
  wait_about1s();
    1662:	88 ec       	ldi	r24, 0xC8	; 200
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	0e 94 6f 0a 	call	0x14de	; 0x14de <sleep_5ms>
    166a:	44 24       	eor	r4, r4
    166c:	55 24       	eor	r5, r5
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    166e:	11 e0       	ldi	r17, 0x01	; 1
           adcmv[2] = W20msReadADC(TP3);
           lcd_fix2_string(RH1L);	// "RH_Lo="
        }
                                        //############################################
        if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to VCC
    1670:	32 e0       	ldi	r19, 0x02	; 2
    1672:	a3 2e       	mov	r10, r19
           R_PORT = 2<<(TP1*2);
           adcmv[0] = W20msReadADC(TP1) - ADCconfig.U_AVCC;
           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to VCC
    1674:	28 e0       	ldi	r18, 0x08	; 8
    1676:	c2 2e       	mov	r12, r18
           R_PORT = 2<<(TP2*2);
           adcmv[1] = W20msReadADC(TP2) - ADCconfig.U_AVCC;
           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to VCC
    1678:	90 e2       	ldi	r25, 0x20	; 32
    167a:	b9 2e       	mov	r11, r25
           lcd_string(utoa(RHmultip, outval, 10));
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
    167c:	85 e0       	ldi	r24, 0x05	; 5
    167e:	f8 2e       	mov	r15, r24
           adcmv[0] = W20msReadADC(TP1);
           adcmv[0] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1680:	06 e4       	ldi	r16, 0x46	; 70
    1682:	60 2e       	mov	r6, r16
    1684:	09 ec       	ldi	r16, 0xC9	; 201
    1686:	70 2e       	mov	r7, r16
    1688:	0f ef       	ldi	r16, 0xFF	; 255
    168a:	80 2e       	mov	r8, r16
    168c:	0f ef       	ldi	r16, 0xFF	; 255
    168e:	90 2e       	mov	r9, r16
    1690:	60 c1       	rjmp	.+704    	; 0x1952 <AutoCheck+0x42e>
  wait_about1s();
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
        lcd_line2();			//Cursor to column 1, row 2
    1692:	80 ec       	ldi	r24, 0xC0	; 192
    1694:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_clear_line();		// clear total line
    1698:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    169c:	80 e8       	ldi	r24, 0x80	; 128
    169e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_clear_line();		// clear total line
    16a2:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    16a6:	80 e8       	ldi	r24, 0x80	; 128
    16a8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_data('T');			//output the Testmode "T"
    16ac:	84 e5       	ldi	r24, 0x54	; 84
    16ae:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
        lcd_string(utoa(tt, outval, 10));	//output Test number
    16b2:	c2 01       	movw	r24, r4
    16b4:	6c e0       	ldi	r22, 0x0C	; 12
    16b6:	71 e0       	ldi	r23, 0x01	; 1
    16b8:	4a e0       	ldi	r20, 0x0A	; 10
    16ba:	50 e0       	ldi	r21, 0x00	; 0
    16bc:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <utoa>
    16c0:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_string>
        lcd_space();
    16c4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
                                        //############################################
        if (tt == 1) {   // output of reference voltage and factors for capacity measurement
    16c8:	fe 2d       	mov	r31, r14
    16ca:	f1 30       	cpi	r31, 0x01	; 1
    16cc:	81 f5       	brne	.+96     	; 0x172e <AutoCheck+0x20a>
           ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    16ce:	2e eb       	ldi	r18, 0xBE	; 190
    16d0:	20 93 39 01 	sts	0x0139, r18
 #ifdef WITH_AUTO_REF
           (void) ReadADC(0x0e);	// read reference voltage 
    16d4:	8e e0       	ldi	r24, 0x0E	; 14
    16d6:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
           ref_mv = W5msReadADC(0x0e);	// read reference voltage 
    16da:	8e e0       	ldi	r24, 0x0E	; 14
    16dc:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
    16e0:	90 93 40 01 	sts	0x0140, r25
    16e4:	80 93 3f 01 	sts	0x013F, r24
           RefVoltage();		//compute RHmultip = f(reference voltage)
    16e8:	0e 94 1b 09 	call	0x1236	; 0x1236 <RefVoltage>
 #endif
           lcd_fix2_string(URefT);	//"URef="
    16ec:	83 ee       	ldi	r24, 0xE3	; 227
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	0e 94 40 01 	call	0x280	; 0x280 <lcd_pgm_string>
           DisplayValue(ref_mv,-3,'V',4);
    16f4:	60 91 3f 01 	lds	r22, 0x013F
    16f8:	70 91 40 01 	lds	r23, 0x0140
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	4d ef       	ldi	r20, 0xFD	; 253
    1702:	26 e5       	ldi	r18, 0x56	; 86
    1704:	04 e0       	ldi	r16, 0x04	; 4
    1706:	0e 94 73 09 	call	0x12e6	; 0x12e6 <DisplayValue>
           lcd_line2();			//Cursor to column 1, row 2
    170a:	80 ec       	ldi	r24, 0xC0	; 192
    170c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
           lcd_fix2_string(RHfakt);	//"RHf="
    1710:	88 ee       	ldi	r24, 0xE8	; 232
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	0e 94 40 01 	call	0x280	; 0x280 <lcd_pgm_string>
           lcd_string(utoa(RHmultip, outval, 10));
    1718:	80 91 00 01 	lds	r24, 0x0100
    171c:	90 91 01 01 	lds	r25, 0x0101
    1720:	6c e0       	ldi	r22, 0x0C	; 12
    1722:	71 e0       	ldi	r23, 0x01	; 1
    1724:	4a e0       	ldi	r20, 0x0A	; 10
    1726:	50 e0       	ldi	r21, 0x00	; 0
    1728:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <utoa>
    172c:	f5 c0       	rjmp	.+490    	; 0x1918 <AutoCheck+0x3f4>
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
    172e:	8e 2d       	mov	r24, r14
    1730:	82 30       	cpi	r24, 0x02	; 2
    1732:	09 f0       	breq	.+2      	; 0x1736 <AutoCheck+0x212>
    1734:	52 c0       	rjmp	.+164    	; 0x17da <AutoCheck+0x2b6>
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	85 b9       	out	0x05, r24	; 5
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
    173a:	f4 b8       	out	0x04, r15	; 4
           adcmv[0] = W20msReadADC(TP1);
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	0e 94 9b 1a 	call	0x3536	; 0x3536 <W20msReadADC>
    1742:	8c 01       	movw	r16, r24
           adcmv[0] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1744:	60 91 3d 01 	lds	r22, 0x013D
    1748:	70 91 3e 01 	lds	r23, 0x013E
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	2e e4       	ldi	r18, 0x4E	; 78
    1752:	3b e1       	ldi	r19, 0x1B	; 27
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	50 e0       	ldi	r21, 0x00	; 0
    1758:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
    175c:	a4 01       	movw	r20, r8
    175e:	93 01       	movw	r18, r6
    1760:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <__divmodsi4>
    1764:	02 0f       	add	r16, r18
    1766:	13 1f       	adc	r17, r19
    1768:	1a 83       	std	Y+2, r17	; 0x02
    176a:	09 83       	std	Y+1, r16	; 0x01
           R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//RL3 to -
    176c:	34 b8       	out	0x04, r3	; 4
           adcmv[1] = W20msReadADC(TP1);
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	0e 94 9b 1a 	call	0x3536	; 0x3536 <W20msReadADC>
    1774:	8c 01       	movw	r16, r24
           adcmv[1] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1776:	60 91 3d 01 	lds	r22, 0x013D
    177a:	70 91 3e 01 	lds	r23, 0x013E
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	2e e4       	ldi	r18, 0x4E	; 78
    1784:	3b e1       	ldi	r19, 0x1B	; 27
    1786:	40 e0       	ldi	r20, 0x00	; 0
    1788:	50 e0       	ldi	r21, 0x00	; 0
    178a:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
    178e:	a4 01       	movw	r20, r8
    1790:	93 01       	movw	r18, r6
    1792:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <__divmodsi4>
    1796:	02 0f       	add	r16, r18
    1798:	13 1f       	adc	r17, r19
    179a:	1c 83       	std	Y+4, r17	; 0x04
    179c:	0b 83       	std	Y+3, r16	; 0x03
           R_PORT = 1<<(TP2*2);		//RL2 to VCC
    179e:	25 b8       	out	0x05, r2	; 5
           R_DDR = (1<<(TP2*2)) | (1<<(TP3*2));	//RL3 to -
    17a0:	e4 e1       	ldi	r30, 0x14	; 20
    17a2:	e4 b9       	out	0x04, r30	; 4
           adcmv[2] = W20msReadADC(TP2);
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	0e 94 9b 1a 	call	0x3536	; 0x3536 <W20msReadADC>
    17aa:	8c 01       	movw	r16, r24
           adcmv[2] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    17ac:	60 91 3d 01 	lds	r22, 0x013D
    17b0:	70 91 3e 01 	lds	r23, 0x013E
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	2e e4       	ldi	r18, 0x4E	; 78
    17ba:	3b e1       	ldi	r19, 0x1B	; 27
    17bc:	40 e0       	ldi	r20, 0x00	; 0
    17be:	50 e0       	ldi	r21, 0x00	; 0
    17c0:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
    17c4:	a4 01       	movw	r20, r8
    17c6:	93 01       	movw	r18, r6
    17c8:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <__divmodsi4>
    17cc:	02 0f       	add	r16, r18
    17ce:	13 1f       	adc	r17, r19
    17d0:	1e 83       	std	Y+6, r17	; 0x06
    17d2:	0d 83       	std	Y+5, r16	; 0x05
           lcd_fix2_string(RLRL);	// "RLRL"
    17d4:	85 ef       	ldi	r24, 0xF5	; 245
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	49 c0       	rjmp	.+146    	; 0x186c <AutoCheck+0x348>
        }
                                        //############################################
        if (tt == 3) { // how equal are the RH resistors
    17da:	fe 2d       	mov	r31, r14
    17dc:	f3 30       	cpi	r31, 0x03	; 3
    17de:	41 f5       	brne	.+80     	; 0x1830 <AutoCheck+0x30c>
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    17e0:	a5 b8       	out	0x05, r10	; 5
           R_DDR = (2<<(TP1*2)) | (2<<(TP2*2));	//RH2 to -
    17e2:	2a e0       	ldi	r18, 0x0A	; 10
    17e4:	24 b9       	out	0x04, r18	; 4
           adcmv[0] = W20msReadADC(TP1);
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	0e 94 9b 1a 	call	0x3536	; 0x3536 <W20msReadADC>
           adcmv[3] = ADCconfig.U_AVCC / 2;
    17ec:	00 91 3d 01 	lds	r16, 0x013D
    17f0:	10 91 3e 01 	lds	r17, 0x013E
    17f4:	16 95       	lsr	r17
    17f6:	07 95       	ror	r16
    17f8:	18 87       	std	Y+8, r17	; 0x08
    17fa:	0f 83       	std	Y+7, r16	; 0x07
           adcmv[0] -= adcmv[3];
    17fc:	80 1b       	sub	r24, r16
    17fe:	91 0b       	sbc	r25, r17
    1800:	9a 83       	std	Y+2, r25	; 0x02
    1802:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (2<<(TP1*2)) | (2<<(TP3*2));	//RH3 to -
    1804:	82 e2       	ldi	r24, 0x22	; 34
    1806:	84 b9       	out	0x04, r24	; 4
           adcmv[1] = W20msReadADC(TP1);
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	0e 94 9b 1a 	call	0x3536	; 0x3536 <W20msReadADC>
           adcmv[1] -= adcmv[3];
    180e:	80 1b       	sub	r24, r16
    1810:	91 0b       	sbc	r25, r17
    1812:	9c 83       	std	Y+4, r25	; 0x04
    1814:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 2<<(TP2*2);		//RL2 to VCC
    1816:	c5 b8       	out	0x05, r12	; 5
           R_DDR = (2<<(TP2*2)) | (2<<(TP3*2));	//RH3 to -
    1818:	e8 e2       	ldi	r30, 0x28	; 40
    181a:	e4 b9       	out	0x04, r30	; 4
           adcmv[2] = W20msReadADC(TP2);
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	0e 94 9b 1a 	call	0x3536	; 0x3536 <W20msReadADC>
           adcmv[2] -= adcmv[3];
    1822:	80 1b       	sub	r24, r16
    1824:	91 0b       	sbc	r25, r17
    1826:	9e 83       	std	Y+6, r25	; 0x06
    1828:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RHRH);	// "RHRH"
    182a:	83 e0       	ldi	r24, 0x03	; 3
    182c:	91 e0       	ldi	r25, 0x01	; 1
    182e:	1e c0       	rjmp	.+60     	; 0x186c <AutoCheck+0x348>
        }
                                        //############################################
        if (tt == 4) { // Text release probes
    1830:	fe 2d       	mov	r31, r14
    1832:	f4 30       	cpi	r31, 0x04	; 4
    1834:	19 f4       	brne	.+6      	; 0x183c <AutoCheck+0x318>
           lcd_fix2_string(RELPROBE);	// "Release Probes"
    1836:	84 ed       	ldi	r24, 0xD4	; 212
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	18 c0       	rjmp	.+48     	; 0x186c <AutoCheck+0x348>
        }
                                        //############################################
        if (tt == 5) { // can we switch the ADC pins to GND across R_H resistor?
    183c:	2e 2d       	mov	r18, r14
    183e:	25 30       	cpi	r18, 0x05	; 5
    1840:	c1 f4       	brne	.+48     	; 0x1872 <AutoCheck+0x34e>
           R_PORT = 0;
    1842:	15 b8       	out	0x05, r1	; 5
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to GND
    1844:	a4 b8       	out	0x04, r10	; 4
           adcmv[0] = W20msReadADC(TP1);
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	0e 94 9b 1a 	call	0x3536	; 0x3536 <W20msReadADC>
    184c:	9a 83       	std	Y+2, r25	; 0x02
    184e:	89 83       	std	Y+1, r24	; 0x01

           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to GND
    1850:	c4 b8       	out	0x04, r12	; 4
           adcmv[1] = W20msReadADC(TP2);
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	0e 94 9b 1a 	call	0x3536	; 0x3536 <W20msReadADC>
    1858:	9c 83       	std	Y+4, r25	; 0x04
    185a:	8b 83       	std	Y+3, r24	; 0x03

           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    185c:	b4 b8       	out	0x04, r11	; 4
           adcmv[2] = W20msReadADC(TP3);
    185e:	82 e0       	ldi	r24, 0x02	; 2
    1860:	0e 94 9b 1a 	call	0x3536	; 0x3536 <W20msReadADC>
    1864:	9e 83       	std	Y+6, r25	; 0x06
    1866:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RH1L);	// "RH_Lo="
    1868:	8d ee       	ldi	r24, 0xED	; 237
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	0e 94 40 01 	call	0x280	; 0x280 <lcd_pgm_string>
    1870:	30 c0       	rjmp	.+96     	; 0x18d2 <AutoCheck+0x3ae>
        }
                                        //############################################
        if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
    1872:	8e 2d       	mov	r24, r14
    1874:	86 30       	cpi	r24, 0x06	; 6
    1876:	51 f5       	brne	.+84     	; 0x18cc <AutoCheck+0x3a8>
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to VCC
    1878:	a4 b8       	out	0x04, r10	; 4
           R_PORT = 2<<(TP1*2);
    187a:	a5 b8       	out	0x05, r10	; 5
           adcmv[0] = W20msReadADC(TP1) - ADCconfig.U_AVCC;
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	0e 94 9b 1a 	call	0x3536	; 0x3536 <W20msReadADC>
    1882:	20 91 3d 01 	lds	r18, 0x013D
    1886:	30 91 3e 01 	lds	r19, 0x013E
    188a:	82 1b       	sub	r24, r18
    188c:	93 0b       	sbc	r25, r19
    188e:	9a 83       	std	Y+2, r25	; 0x02
    1890:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to VCC
    1892:	c4 b8       	out	0x04, r12	; 4
           R_PORT = 2<<(TP2*2);
    1894:	c5 b8       	out	0x05, r12	; 5
           adcmv[1] = W20msReadADC(TP2) - ADCconfig.U_AVCC;
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	0e 94 9b 1a 	call	0x3536	; 0x3536 <W20msReadADC>
    189c:	20 91 3d 01 	lds	r18, 0x013D
    18a0:	30 91 3e 01 	lds	r19, 0x013E
    18a4:	82 1b       	sub	r24, r18
    18a6:	93 0b       	sbc	r25, r19
    18a8:	9c 83       	std	Y+4, r25	; 0x04
    18aa:	8b 83       	std	Y+3, r24	; 0x03
           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to VCC
    18ac:	b4 b8       	out	0x04, r11	; 4
           R_PORT = 2<<(TP3*2);
    18ae:	b5 b8       	out	0x05, r11	; 5
           adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
    18b0:	82 e0       	ldi	r24, 0x02	; 2
    18b2:	0e 94 9b 1a 	call	0x3536	; 0x3536 <W20msReadADC>
    18b6:	20 91 3d 01 	lds	r18, 0x013D
    18ba:	30 91 3e 01 	lds	r19, 0x013E
    18be:	82 1b       	sub	r24, r18
    18c0:	93 0b       	sbc	r25, r19
    18c2:	9e 83       	std	Y+6, r25	; 0x06
    18c4:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RH1H);	// "RH_Hi="
    18c6:	81 ef       	ldi	r24, 0xF1	; 241
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	d0 cf       	rjmp	.-96     	; 0x186c <AutoCheck+0x348>
        }
                                        //############################################
        if (tt > 1) {	// output 3 voltages 
    18cc:	ee 2d       	mov	r30, r14
    18ce:	e1 30       	cpi	r30, 0x01	; 1
    18d0:	29 f1       	breq	.+74     	; 0x191c <AutoCheck+0x3f8>
           lcd_line2();			//Cursor to column 1, row 2
    18d2:	80 ec       	ldi	r24, 0xC0	; 192
    18d4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
           lcd_string(itoa(adcmv[0], outval, 10));	//output voltage 1
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	9a 81       	ldd	r25, Y+2	; 0x02
    18dc:	6c e0       	ldi	r22, 0x0C	; 12
    18de:	71 e0       	ldi	r23, 0x01	; 1
    18e0:	4a e0       	ldi	r20, 0x0A	; 10
    18e2:	50 e0       	ldi	r21, 0x00	; 0
    18e4:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <itoa>
    18e8:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_string>
           lcd_space();
    18ec:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
           lcd_string(itoa(adcmv[1], outval, 10));	//output voltage 2
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	9c 81       	ldd	r25, Y+4	; 0x04
    18f4:	6c e0       	ldi	r22, 0x0C	; 12
    18f6:	71 e0       	ldi	r23, 0x01	; 1
    18f8:	4a e0       	ldi	r20, 0x0A	; 10
    18fa:	50 e0       	ldi	r21, 0x00	; 0
    18fc:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <itoa>
    1900:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_string>
           lcd_space();
    1904:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
           lcd_string(itoa(adcmv[2], outval, 10));	//output voltage 3
    1908:	8d 81       	ldd	r24, Y+5	; 0x05
    190a:	9e 81       	ldd	r25, Y+6	; 0x06
    190c:	6c e0       	ldi	r22, 0x0C	; 12
    190e:	71 e0       	ldi	r23, 0x01	; 1
    1910:	4a e0       	ldi	r20, 0x0A	; 10
    1912:	50 e0       	ldi	r21, 0x00	; 0
    1914:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <itoa>
    1918:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_string>
        }
        ADC_DDR =  TXD_MSK;		// all-Pins to Input
    191c:	c7 b8       	out	0x07, r12	; 7
        ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
    191e:	c8 b8       	out	0x08, r12	; 8
        R_DDR = 0;			// all R-Ports to Input
    1920:	14 b8       	out	0x04, r1	; 4
        R_PORT = 0;
    1922:	15 b8       	out	0x05, r1	; 5
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    1924:	4f 9b       	sbis	0x09, 7	; 9
    1926:	0d c0       	rjmp	.+26     	; 0x1942 <AutoCheck+0x41e>
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
    1928:	84 e6       	ldi	r24, 0x64	; 100
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	0e 94 6f 0a 	call	0x14de	; 0x14de <sleep_5ms>
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    1930:	4f 9b       	sbis	0x09, 7	; 9
    1932:	07 c0       	rjmp	.+14     	; 0x1942 <AutoCheck+0x41e>
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
    1934:	84 e6       	ldi	r24, 0x64	; 100
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	0e 94 6f 0a 	call	0x14de	; 0x14de <sleep_5ms>
    193c:	da 94       	dec	r13
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
  wait_about1s();
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
    193e:	09 f0       	breq	.+2      	; 0x1942 <AutoCheck+0x41e>
    1940:	a8 ce       	rjmp	.-688    	; 0x1692 <AutoCheck+0x16e>
    1942:	1e 2d       	mov	r17, r14
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
     } //end for ww
     wait_about1s();
    1944:	88 ec       	ldi	r24, 0xC8	; 200
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	0e 94 6f 0a 	call	0x14de	; 0x14de <sleep_5ms>
  lcd_clear();
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
  wait_about1s();
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    194c:	1f 5f       	subi	r17, 0xFF	; 255
    194e:	17 30       	cpi	r17, 0x07	; 7
    1950:	59 f0       	breq	.+22     	; 0x1968 <AutoCheck+0x444>
void AutoCheck(void) {
    1952:	a4 e0       	ldi	r26, 0x04	; 4
    1954:	da 2e       	mov	r13, r26
        lcd_line2();			//Cursor to column 1, row 2
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_data('T');			//output the Testmode "T"
    1956:	08 94       	sec
    1958:	41 1c       	adc	r4, r1
    195a:	51 1c       	adc	r5, r1
        if (tt == 2) { // how equal are the RL resistors? 
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
           adcmv[0] = W20msReadADC(TP1);
           adcmv[0] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
           R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//RL3 to -
    195c:	f1 e1       	ldi	r31, 0x11	; 17
    195e:	3f 2e       	mov	r3, r31
           adcmv[1] = W20msReadADC(TP1);
           adcmv[1] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
           R_PORT = 1<<(TP2*2);		//RL2 to VCC
    1960:	e4 e0       	ldi	r30, 0x04	; 4
    1962:	2e 2e       	mov	r2, r30
    1964:	e1 2e       	mov	r14, r17
    1966:	95 ce       	rjmp	.-726    	; 0x1692 <AutoCheck+0x16e>
     wait_about1s();
  } //end for tt
#endif

  // measurement of internal resistance of the ADC port outputs switched to GND
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    1968:	79 e0       	ldi	r23, 0x09	; 9
    196a:	c7 2e       	mov	r12, r23
    196c:	c7 b8       	out	0x07, r12	; 7
  R_PORT = 1<<(TP1*2);		//R_L-PORT 1 to VCC
    196e:	dd 24       	eor	r13, r13
    1970:	d3 94       	inc	r13
    1972:	d5 b8       	out	0x05, r13	; 5
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to VCC
    1974:	d4 b8       	out	0x04, r13	; 4
  adcmv[0] = W5msReadADC(TP1);
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
    197c:	7c 01       	movw	r14, r24

  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin 2 to output 0V
    197e:	6a e0       	ldi	r22, 0x0A	; 10
    1980:	66 2e       	mov	r6, r22
    1982:	67 b8       	out	0x07, r6	; 7
  R_PORT =  1<<(TP2*2);	//R_L-PORT 2 to VCC
    1984:	54 e0       	ldi	r21, 0x04	; 4
    1986:	85 2e       	mov	r8, r21
    1988:	85 b8       	out	0x05, r8	; 5
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to VCC
    198a:	84 b8       	out	0x04, r8	; 4
  adcmv[1] = W5msReadADC(TP2);
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
    1992:	8c 01       	movw	r16, r24

  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin 3 to output 0V
    1994:	4c e0       	ldi	r20, 0x0C	; 12
    1996:	a4 2e       	mov	r10, r20
    1998:	a7 b8       	out	0x07, r10	; 7
  R_PORT =  1<<(TP3*2);	//R_L-PORT 3 to VCC
    199a:	30 e1       	ldi	r19, 0x10	; 16
    199c:	b3 2e       	mov	r11, r19
    199e:	b5 b8       	out	0x05, r11	; 5
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to VCC
    19a0:	b4 b8       	out	0x04, r11	; 4
  adcmv[2] = W5msReadADC(TP3);
    19a2:	82 e0       	ldi	r24, 0x02	; 2
    19a4:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
  sum_rm = (adcmv[0] + adcmv[1] + adcmv[2]); //add all three values
    19a8:	0e 0d       	add	r16, r14
    19aa:	1f 1d       	adc	r17, r15
    19ac:	08 0f       	add	r16, r24
    19ae:	19 1f       	adc	r17, r25

  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
    19b0:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
    19b2:	c8 b8       	out	0x08, r12	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    19b4:	c7 b8       	out	0x07, r12	; 7
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
    19b6:	d4 b8       	out	0x04, r13	; 4
  adcmv[0] = ADCconfig.U_AVCC - W5msReadADC(TP1);
    19b8:	c0 90 3d 01 	lds	r12, 0x013D
    19bc:	d0 90 3e 01 	lds	r13, 0x013E
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
    19c6:	c8 1a       	sub	r12, r24
    19c8:	d9 0a       	sbc	r13, r25
    19ca:	da 82       	std	Y+2, r13	; 0x02
    19cc:	c9 82       	std	Y+1, r12	; 0x01
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
    19ce:	68 b8       	out	0x08, r6	; 8
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
    19d0:	67 b8       	out	0x07, r6	; 7
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
    19d2:	84 b8       	out	0x04, r8	; 4
  adcmv[1] = ADCconfig.U_AVCC - W5msReadADC(TP2);
    19d4:	e0 90 3d 01 	lds	r14, 0x013D
    19d8:	f0 90 3e 01 	lds	r15, 0x013E
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
    19e2:	e8 1a       	sub	r14, r24
    19e4:	f9 0a       	sbc	r15, r25
    19e6:	fc 82       	std	Y+4, r15	; 0x04
    19e8:	eb 82       	std	Y+3, r14	; 0x03

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
    19ea:	a8 b8       	out	0x08, r10	; 8
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
    19ec:	a7 b8       	out	0x07, r10	; 7
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
    19ee:	b4 b8       	out	0x04, r11	; 4
  adcmv[2] = ADCconfig.U_AVCC - W5msReadADC(TP3);
    19f0:	a0 90 3d 01 	lds	r10, 0x013D
    19f4:	b0 90 3e 01 	lds	r11, 0x013E
    19f8:	82 e0       	ldi	r24, 0x02	; 2
    19fa:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>

  sum_c0 = (adcmv[0] + adcmv[1] + adcmv[2]);
    19fe:	ec 0c       	add	r14, r12
    1a00:	fd 1c       	adc	r15, r13
  adcmv[1] = ADCconfig.U_AVCC - W5msReadADC(TP2);

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
  adcmv[2] = ADCconfig.U_AVCC - W5msReadADC(TP3);
    1a02:	a8 1a       	sub	r10, r24
    1a04:	b9 0a       	sbc	r11, r25

  sum_c0 = (adcmv[0] + adcmv[1] + adcmv[2]);
    1a06:	ea 0c       	add	r14, r10
    1a08:	fb 1c       	adc	r15, r11
  u680 = ((ADCconfig.U_AVCC * 3) - sum_rm - sum_c0);	//three times the voltage at the 680 Ohm
    1a0a:	80 91 3d 01 	lds	r24, 0x013D
    1a0e:	90 91 3e 01 	lds	r25, 0x013E
    1a12:	5c 01       	movw	r10, r24
    1a14:	aa 0c       	add	r10, r10
    1a16:	bb 1c       	adc	r11, r11
    1a18:	a8 0e       	add	r10, r24
    1a1a:	b9 1e       	adc	r11, r25
    1a1c:	a0 1a       	sub	r10, r16
    1a1e:	b1 0a       	sbc	r11, r17
    1a20:	ae 18       	sub	r10, r14
    1a22:	bf 08       	sbc	r11, r15
  pin_rm = (unsigned long)((unsigned long)sum_rm * (unsigned long)R_L_VAL) / (unsigned long)u680;
    1a24:	cc 24       	eor	r12, r12
    1a26:	dd 24       	eor	r13, r13
    1a28:	b8 01       	movw	r22, r16
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	20 e9       	ldi	r18, 0x90	; 144
    1a30:	3a e1       	ldi	r19, 0x1A	; 26
    1a32:	40 e0       	ldi	r20, 0x00	; 0
    1a34:	50 e0       	ldi	r21, 0x00	; 0
    1a36:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
    1a3a:	a6 01       	movw	r20, r12
    1a3c:	95 01       	movw	r18, r10
    1a3e:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
    1a42:	49 01       	movw	r8, r18
  adcmv[2] = pin_rm;	// for last output in row 2
    1a44:	3e 83       	std	Y+6, r19	; 0x06
    1a46:	2d 83       	std	Y+5, r18	; 0x05
  pin_rp = (unsigned long)((unsigned long)sum_c0 * (unsigned long)R_L_VAL) / (unsigned long)u680;
    1a48:	b7 01       	movw	r22, r14
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	20 e9       	ldi	r18, 0x90	; 144
    1a50:	3a e1       	ldi	r19, 0x1A	; 26
    1a52:	40 e0       	ldi	r20, 0x00	; 0
    1a54:	50 e0       	ldi	r21, 0x00	; 0
    1a56:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
    1a5a:	a6 01       	movw	r20, r12
    1a5c:	95 01       	movw	r18, r10
    1a5e:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
    1a62:	79 01       	movw	r14, r18
  lcd_clear();
    1a64:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_fix_string(RIHI);	// "RiHi="
    1a68:	85 e5       	ldi	r24, 0x55	; 85
    1a6a:	91 e0       	ldi	r25, 0x01	; 1
    1a6c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
  DisplayValue(pin_rp,-1,LCD_CHAR_OMEGA,3);
    1a70:	b7 01       	movw	r22, r14
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	4f ef       	ldi	r20, 0xFF	; 255
    1a78:	24 ef       	ldi	r18, 0xF4	; 244
    1a7a:	03 e0       	ldi	r16, 0x03	; 3
    1a7c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <DisplayValue>
  lcd_line2();
    1a80:	80 ec       	ldi	r24, 0xC0	; 192
    1a82:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(RILO);	// "RiLo="
    1a86:	8c e5       	ldi	r24, 0x5C	; 92
    1a88:	91 e0       	ldi	r25, 0x01	; 1
    1a8a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
  DisplayValue(pin_rm,-1,LCD_CHAR_OMEGA,3);
    1a8e:	b4 01       	movw	r22, r8
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	4f ef       	ldi	r20, 0xFF	; 255
    1a96:	24 ef       	ldi	r18, 0xF4	; 244
    1a98:	0e 94 73 09 	call	0x12e6	; 0x12e6 <DisplayValue>
  wait_about2s();			//wait 2 seconds
    1a9c:	80 e9       	ldi	r24, 0x90	; 144
    1a9e:	91 e0       	ldi	r25, 0x01	; 1
    1aa0:	0e 94 6f 0a 	call	0x14de	; 0x14de <sleep_5ms>
#ifdef AUTO_CAL
  if ((pin_rp < 280) && (pin_rm < 250)) {
    1aa4:	f8 e1       	ldi	r31, 0x18	; 24
    1aa6:	ef 16       	cp	r14, r31
    1aa8:	f1 e0       	ldi	r31, 0x01	; 1
    1aaa:	ff 06       	cpc	r15, r31
    1aac:	90 f4       	brcc	.+36     	; 0x1ad2 <AutoCheck+0x5ae>
    1aae:	2a ef       	ldi	r18, 0xFA	; 250
    1ab0:	82 16       	cp	r8, r18
    1ab2:	91 04       	cpc	r9, r1
    1ab4:	70 f4       	brcc	.+28     	; 0x1ad2 <AutoCheck+0x5ae>
     // rp is below 28 Ohm and rm is below 25 Ohm
     (void) eeprom_write_word((uint16_t *)(&R680pl), pin_rp+R_L_VAL);  //hold VCC resistance value in EEprom
    1ab6:	b7 01       	movw	r22, r14
    1ab8:	60 57       	subi	r22, 0x70	; 112
    1aba:	75 4e       	sbci	r23, 0xE5	; 229
    1abc:	8b ea       	ldi	r24, 0xAB	; 171
    1abe:	91 e0       	ldi	r25, 0x01	; 1
    1ac0:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <__eewr_word_m168>
     (void) eeprom_write_word((uint16_t *)(&R680mi), pin_rm+R_L_VAL);  //hold GND resistance value in EEprom
    1ac4:	b4 01       	movw	r22, r8
    1ac6:	60 57       	subi	r22, 0x70	; 112
    1ac8:	75 4e       	sbci	r23, 0xE5	; 229
    1aca:	8d ea       	ldi	r24, 0xAD	; 173
    1acc:	91 e0       	ldi	r25, 0x01	; 1
    1ace:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <__eewr_word_m168>
  }
#endif

  //measure Zero offset for Capacity measurement
  adcmv[3] = 0;
    1ad2:	18 86       	std	Y+8, r1	; 0x08
    1ad4:	1f 82       	std	Y+7, r1	; 0x07
  PartFound = PART_NONE;
    1ad6:	10 92 07 01 	sts	0x0107, r1
  ReadCapacity(TP3, TP1);
    1ada:	82 e0       	ldi	r24, 0x02	; 2
    1adc:	60 e0       	ldi	r22, 0x00	; 0
    1ade:	0e 94 99 15 	call	0x2b32	; 0x2b32 <ReadCapacity>
  adcmv[5] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:3
    1ae2:	00 91 60 01 	lds	r16, 0x0160
    1ae6:	10 91 61 01 	lds	r17, 0x0161
    1aea:	1c 87       	std	Y+12, r17	; 0x0c
    1aec:	0b 87       	std	Y+11, r16	; 0x0b
  ReadCapacity(TP3, TP2);
    1aee:	82 e0       	ldi	r24, 0x02	; 2
    1af0:	61 e0       	ldi	r22, 0x01	; 1
    1af2:	0e 94 99 15 	call	0x2b32	; 0x2b32 <ReadCapacity>
  adcmv[6] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:3
    1af6:	e0 90 60 01 	lds	r14, 0x0160
    1afa:	f0 90 61 01 	lds	r15, 0x0161
    1afe:	fe 86       	std	Y+14, r15	; 0x0e
    1b00:	ed 86       	std	Y+13, r14	; 0x0d
  ReadCapacity(TP2, TP1);
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	60 e0       	ldi	r22, 0x00	; 0
    1b06:	0e 94 99 15 	call	0x2b32	; 0x2b32 <ReadCapacity>
  adcmv[2] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:2
    1b0a:	c0 90 60 01 	lds	r12, 0x0160
    1b0e:	d0 90 61 01 	lds	r13, 0x0161
    1b12:	de 82       	std	Y+6, r13	; 0x06
    1b14:	cd 82       	std	Y+5, r12	; 0x05
  ReadCapacity(TP1, TP3);
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	62 e0       	ldi	r22, 0x02	; 2
    1b1a:	0e 94 99 15 	call	0x2b32	; 0x2b32 <ReadCapacity>
  adcmv[1] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:1
    1b1e:	80 91 60 01 	lds	r24, 0x0160
    1b22:	90 91 61 01 	lds	r25, 0x0161
    1b26:	9c 83       	std	Y+4, r25	; 0x04
    1b28:	8b 83       	std	Y+3, r24	; 0x03
  ReadCapacity(TP2, TP3);
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	62 e0       	ldi	r22, 0x02	; 2
    1b2e:	0e 94 99 15 	call	0x2b32	; 0x2b32 <ReadCapacity>
  adcmv[4] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:2
    1b32:	80 91 60 01 	lds	r24, 0x0160
    1b36:	90 91 61 01 	lds	r25, 0x0161
    1b3a:	9a 87       	std	Y+10, r25	; 0x0a
    1b3c:	89 87       	std	Y+9, r24	; 0x09
  ReadCapacity(TP1, TP2);
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	61 e0       	ldi	r22, 0x01	; 1
    1b42:	0e 94 99 15 	call	0x2b32	; 0x2b32 <ReadCapacity>
  adcmv[0] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:1
    1b46:	80 91 60 01 	lds	r24, 0x0160
    1b4a:	90 91 61 01 	lds	r25, 0x0161
    1b4e:	9a 83       	std	Y+2, r25	; 0x02
    1b50:	89 83       	std	Y+1, r24	; 0x01
  lcd_clear();
    1b52:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_fix_string(C0_str);			//output "C0 "
    1b56:	83 e6       	ldi	r24, 0x63	; 99
    1b58:	91 e0       	ldi	r25, 0x01	; 1
    1b5a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
    1b5e:	b8 01       	movw	r22, r16
    1b60:	88 27       	eor	r24, r24
    1b62:	77 fd       	sbrc	r23, 7
    1b64:	80 95       	com	r24
    1b66:	98 2f       	mov	r25, r24
    1b68:	40 e0       	ldi	r20, 0x00	; 0
    1b6a:	20 e2       	ldi	r18, 0x20	; 32
    1b6c:	03 e0       	ldi	r16, 0x03	; 3
    1b6e:	0e 94 73 09 	call	0x12e6	; 0x12e6 <DisplayValue>
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
    1b72:	b7 01       	movw	r22, r14
    1b74:	88 27       	eor	r24, r24
    1b76:	77 fd       	sbrc	r23, 7
    1b78:	80 95       	com	r24
    1b7a:	98 2f       	mov	r25, r24
    1b7c:	40 e0       	ldi	r20, 0x00	; 0
    1b7e:	20 e2       	ldi	r18, 0x20	; 32
    1b80:	0e 94 73 09 	call	0x12e6	; 0x12e6 <DisplayValue>
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
    1b84:	b6 01       	movw	r22, r12
    1b86:	88 27       	eor	r24, r24
    1b88:	77 fd       	sbrc	r23, 7
    1b8a:	80 95       	com	r24
    1b8c:	98 2f       	mov	r25, r24
    1b8e:	44 ef       	ldi	r20, 0xF4	; 244
    1b90:	26 e4       	ldi	r18, 0x46	; 70
    1b92:	0e 94 73 09 	call	0x12e6	; 0x12e6 <DisplayValue>
    1b96:	8e 01       	movw	r16, r28
    1b98:	0f 5f       	subi	r16, 0xFF	; 255
    1b9a:	1f 4f       	sbci	r17, 0xFF	; 255
void AutoCheck(void) {
    1b9c:	ce 01       	movw	r24, r28
    1b9e:	0f 96       	adiw	r24, 0x0f	; 15
    1ba0:	f8 01       	movw	r30, r16
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
#ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
    1ba2:	21 91       	ld	r18, Z+
    1ba4:	31 91       	ld	r19, Z+
    1ba6:	27 34       	cpi	r18, 0x47	; 71
    1ba8:	31 05       	cpc	r19, r1
    1baa:	ec f4       	brge	.+58     	; 0x1be6 <AutoCheck+0x6c2>
  lcd_fix_string(C0_str);			//output "C0 "
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
#ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
    1bac:	e8 17       	cp	r30, r24
    1bae:	f9 07       	cpc	r31, r25
    1bb0:	c1 f7       	brne	.-16     	; 0x1ba2 <AutoCheck+0x67e>
    1bb2:	ee 24       	eor	r14, r14
    1bb4:	ff 24       	eor	r15, r15
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
    1bb6:	f8 01       	movw	r30, r16
    1bb8:	60 81       	ld	r22, Z
    1bba:	0e 5f       	subi	r16, 0xFE	; 254
    1bbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbe:	61 5f       	subi	r22, 0xF1	; 241
    1bc0:	c7 01       	movw	r24, r14
    1bc2:	87 54       	subi	r24, 0x47	; 71
    1bc4:	9e 4f       	sbci	r25, 0xFE	; 254
    1bc6:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__eewr_byte_m168>
    1bca:	08 94       	sec
    1bcc:	e1 1c       	adc	r14, r1
    1bce:	f1 1c       	adc	r15, r1
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
#ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
    1bd0:	f7 e0       	ldi	r31, 0x07	; 7
    1bd2:	ef 16       	cp	r14, r31
    1bd4:	f1 04       	cpc	r15, r1
    1bd6:	79 f7       	brne	.-34     	; 0x1bb6 <AutoCheck+0x692>
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
  }
  lcd_line2();
    1bd8:	80 ec       	ldi	r24, 0xC0	; 192
    1bda:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(OK_str);		// output "OK"
    1bde:	8b ee       	ldi	r24, 0xEB	; 235
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
no_c0save:
#endif
 wait_about2s();		//wait 2 seconds
    1be6:	80 e9       	ldi	r24, 0x90	; 144
    1be8:	91 e0       	ldi	r25, 0x01	; 1
    1bea:	0e 94 6f 0a 	call	0x14de	; 0x14de <sleep_5ms>
 
#ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
    1bee:	10 e0       	ldi	r17, 0x00	; 0
 for (ww=0;ww<64;ww++) {
    1bf0:	cc 24       	eor	r12, r12
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
    1bf2:	ba e0       	ldi	r27, 0x0A	; 10
    1bf4:	8b 2e       	mov	r8, r27
    1bf6:	91 2c       	mov	r9, r1
    1bf8:	a1 2c       	mov	r10, r1
    1bfa:	b1 2c       	mov	r11, r1
     lcd_data('3');
     lcd_fix_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1bfc:	a8 e5       	ldi	r26, 0x58	; 88
    1bfe:	ea 2e       	mov	r14, r26
    1c00:	a1 e0       	ldi	r26, 0x01	; 1
    1c02:	fa 2e       	mov	r15, r26
 
#ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
     lcd_clear();
    1c04:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
     lcd_data('1');
    1c08:	81 e3       	ldi	r24, 0x31	; 49
    1c0a:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
     lcd_fix_string(CapZeich);	// "-||-"
    1c0e:	8d e1       	ldi	r24, 0x1D	; 29
    1c10:	91 e0       	ldi	r25, 0x01	; 1
    1c12:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
     lcd_data('3');
    1c16:	83 e3       	ldi	r24, 0x33	; 51
    1c18:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
     lcd_fix_string(MinCap_str); // " >100nF!"
    1c1c:	87 e6       	ldi	r24, 0x67	; 103
    1c1e:	91 e0       	ldi	r25, 0x01	; 1
    1c20:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
     PartFound = PART_NONE;
    1c24:	10 92 07 01 	sts	0x0107, r1
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
    1c28:	82 e0       	ldi	r24, 0x02	; 2
    1c2a:	60 e0       	ldi	r22, 0x00	; 0
    1c2c:	0e 94 99 15 	call	0x2b32	; 0x2b32 <ReadCapacity>
    1c30:	20 91 58 01 	lds	r18, 0x0158
    1c34:	30 91 59 01 	lds	r19, 0x0159
    1c38:	40 91 5a 01 	lds	r20, 0x015A
    1c3c:	50 91 5b 01 	lds	r21, 0x015B
    1c40:	00 91 68 01 	lds	r16, 0x0168
     while (cap.cpre < -9) {
    1c44:	07 c0       	rjmp	.+14     	; 0x1c54 <AutoCheck+0x730>
        cap.cpre++;
        cap.cval /= 10;
    1c46:	ca 01       	movw	r24, r20
    1c48:	b9 01       	movw	r22, r18
    1c4a:	a5 01       	movw	r20, r10
    1c4c:	94 01       	movw	r18, r8
    1c4e:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
    1c52:	0f 5f       	subi	r16, 0xFF	; 255
     lcd_data('3');
     lcd_fix_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1c54:	07 3f       	cpi	r16, 0xF7	; 247
    1c56:	bc f3       	brlt	.-18     	; 0x1c46 <AutoCheck+0x722>
    1c58:	00 93 68 01 	sts	0x0168, r16
    1c5c:	20 93 58 01 	sts	0x0158, r18
    1c60:	f7 01       	movw	r30, r14
    1c62:	31 83       	std	Z+1, r19	; 0x01
    1c64:	42 83       	std	Z+2, r20	; 0x02
    1c66:	53 83       	std	Z+3, r21	; 0x03
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1c68:	07 3f       	cpi	r16, 0xF7	; 247
    1c6a:	09 f0       	breq	.+2      	; 0x1c6e <AutoCheck+0x74a>
    1c6c:	be c0       	rjmp	.+380    	; 0x1dea <AutoCheck+0x8c6>
    1c6e:	20 36       	cpi	r18, 0x60	; 96
    1c70:	31 05       	cpc	r19, r1
    1c72:	41 05       	cpc	r20, r1
    1c74:	51 05       	cpc	r21, r1
    1c76:	08 f4       	brcc	.+2      	; 0x1c7a <AutoCheck+0x756>
    1c78:	b8 c0       	rjmp	.+368    	; 0x1dea <AutoCheck+0x8c6>
    1c7a:	20 3f       	cpi	r18, 0xF0	; 240
    1c7c:	f5 e5       	ldi	r31, 0x55	; 85
    1c7e:	3f 07       	cpc	r19, r31
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	4f 07       	cpc	r20, r31
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	5f 07       	cpc	r21, r31
    1c88:	08 f0       	brcs	.+2      	; 0x1c8c <AutoCheck+0x768>
    1c8a:	af c0       	rjmp	.+350    	; 0x1dea <AutoCheck+0x8c6>
        cap_found++;
    1c8c:	1f 5f       	subi	r17, 0xFF	; 255
     } else {
        cap_found = 0;		// wait for stable connection
     }
     if (cap_found > 1) {
    1c8e:	12 30       	cpi	r17, 0x02	; 2
    1c90:	09 f0       	breq	.+2      	; 0x1c94 <AutoCheck+0x770>
    1c92:	ac c0       	rjmp	.+344    	; 0x1dec <AutoCheck+0x8c8>
        // value of capacitor is correct
        (void) eeprom_write_word((uint16_t *)(&ref_offset), load_diff);	// hold zero offset + slew rate dependend offset
    1c94:	60 91 6a 01 	lds	r22, 0x016A
    1c98:	70 91 6b 01 	lds	r23, 0x016B
    1c9c:	87 eb       	ldi	r24, 0xB7	; 183
    1c9e:	91 e0       	ldi	r25, 0x01	; 1
    1ca0:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <__eewr_word_m168>
        lcd_clear();
    1ca4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
        lcd_fix_string(REF_C_str);	// "REF_C="
    1ca8:	8f e6       	ldi	r24, 0x6F	; 111
    1caa:	91 e0       	ldi	r25, 0x01	; 1
    1cac:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
        lcd_string(itoa(load_diff, outval, 10));	//output REF_C_KORR
    1cb0:	80 91 6a 01 	lds	r24, 0x016A
    1cb4:	90 91 6b 01 	lds	r25, 0x016B
    1cb8:	6c e0       	ldi	r22, 0x0C	; 12
    1cba:	71 e0       	ldi	r23, 0x01	; 1
    1cbc:	4a e0       	ldi	r20, 0x0A	; 10
    1cbe:	50 e0       	ldi	r21, 0x00	; 0
    1cc0:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <itoa>
    1cc4:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_string>
        eeprom_write_byte((uint8_t *)(&EE_ESR_ZERO), (uint8_t)ESR_ZERO); // set to initial zero offset
    1cc8:	80 ec       	ldi	r24, 0xC0	; 192
    1cca:	91 e0       	ldi	r25, 0x01	; 1
    1ccc:	6d e1       	ldi	r22, 0x1D	; 29
    1cce:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__eewr_byte_m168>
        wait_about1s();
        }
//#######################################
#endif
 #ifdef AUTOSCALE_ADC
        ADC_PORT =  TXD_VAL;	//ADC-Port 1 to GND
    1cd2:	88 e0       	ldi	r24, 0x08	; 8
    1cd4:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    1cd6:	89 e0       	ldi	r24, 0x09	; 9
    1cd8:	87 b9       	out	0x07, r24	; 7
        R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1cda:	80 e2       	ldi	r24, 0x20	; 32
    1cdc:	84 b9       	out	0x04, r24	; 4
        do {
           adcmv[0] = ReadADC(TP3);
    1cde:	82 e0       	ldi	r24, 0x02	; 2
    1ce0:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
        } while (adcmv[0] > 980);
    1ce4:	23 e0       	ldi	r18, 0x03	; 3
    1ce6:	85 3d       	cpi	r24, 0xD5	; 213
    1ce8:	92 07       	cpc	r25, r18
    1cea:	cc f7       	brge	.-14     	; 0x1cde <AutoCheck+0x7ba>
        R_DDR = 0;		//all Pins to input 
    1cec:	14 b8       	out	0x04, r1	; 4
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1cee:	10 92 3c 01 	sts	0x013C, r1
    1cf2:	10 92 3b 01 	sts	0x013B, r1
        adcmv[0] = ReadADC(TP3);  // get cap voltage with VCC reference
    1cf6:	82 e0       	ldi	r24, 0x02	; 2
    1cf8:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
    1cfc:	4c 01       	movw	r8, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1cfe:	8f ea       	ldi	r24, 0xAF	; 175
    1d00:	91 e0       	ldi	r25, 0x01	; 1
    1d02:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <__eerd_byte_m168>
    1d06:	99 27       	eor	r25, r25
    1d08:	87 fd       	sbrc	r24, 7
    1d0a:	90 95       	com	r25
    1d0c:	20 91 3f 01 	lds	r18, 0x013F
    1d10:	30 91 40 01 	lds	r19, 0x0140
    1d14:	82 0f       	add	r24, r18
    1d16:	93 1f       	adc	r25, r19
    1d18:	90 93 3c 01 	sts	0x013C, r25
    1d1c:	80 93 3b 01 	sts	0x013B, r24
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
    1d20:	82 e0       	ldi	r24, 0x02	; 2
    1d22:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
    1d26:	8c 01       	movw	r16, r24
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1d28:	10 92 3c 01 	sts	0x013C, r1
    1d2c:	10 92 3b 01 	sts	0x013B, r1
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
    1d30:	82 e0       	ldi	r24, 0x02	; 2
    1d32:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
    1d36:	5c 01       	movw	r10, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1d38:	c0 90 3f 01 	lds	r12, 0x013F
    1d3c:	d0 90 40 01 	lds	r13, 0x0140
    1d40:	8f ea       	ldi	r24, 0xAF	; 175
    1d42:	91 e0       	ldi	r25, 0x01	; 1
    1d44:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <__eerd_byte_m168>
    1d48:	99 27       	eor	r25, r25
    1d4a:	87 fd       	sbrc	r24, 7
    1d4c:	90 95       	com	r25
    1d4e:	8c 0d       	add	r24, r12
    1d50:	9d 1d       	adc	r25, r13
    1d52:	90 93 3c 01 	sts	0x013C, r25
    1d56:	80 93 3b 01 	sts	0x013B, r24
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1d5a:	8f ea       	ldi	r24, 0xAF	; 175
    1d5c:	91 e0       	ldi	r25, 0x01	; 1
    1d5e:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <__eerd_byte_m168>
    1d62:	68 2e       	mov	r6, r24
        lcd_line2();
    1d64:	80 ec       	ldi	r24, 0xC0	; 192
    1d66:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_fix_string(REF_R_str);	// "REF_R="
    1d6a:	86 e7       	ldi	r24, 0x76	; 118
    1d6c:	91 e0       	ldi	r25, 0x01	; 1
    1d6e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1d72:	8f ea       	ldi	r24, 0xAF	; 175
    1d74:	91 e0       	ldi	r25, 0x01	; 1
    1d76:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <__eerd_byte_m168>
        ADCconfig.U_Bandgap = ADC_internal_reference;
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
        ADCconfig.U_Bandgap = ADC_internal_reference;
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1d7a:	f3 e0       	ldi	r31, 0x03	; 3
    1d7c:	ef 2e       	mov	r14, r31
    1d7e:	e8 0e       	add	r14, r24
    1d80:	a8 0c       	add	r10, r8
    1d82:	b9 1c       	adc	r11, r9
    1d84:	a0 1a       	sub	r10, r16
    1d86:	b1 0a       	sbc	r11, r17
    1d88:	a0 1a       	sub	r10, r16
    1d8a:	b1 0a       	sbc	r11, r17
    1d8c:	b5 01       	movw	r22, r10
    1d8e:	88 27       	eor	r24, r24
    1d90:	77 fd       	sbrc	r23, 7
    1d92:	80 95       	com	r24
    1d94:	98 2f       	mov	r25, r24
    1d96:	26 2d       	mov	r18, r6
    1d98:	33 27       	eor	r19, r19
    1d9a:	27 fd       	sbrc	r18, 7
    1d9c:	30 95       	com	r19
    1d9e:	2c 0d       	add	r18, r12
    1da0:	3d 1d       	adc	r19, r13
    1da2:	40 e0       	ldi	r20, 0x00	; 0
    1da4:	50 e0       	ldi	r21, 0x00	; 0
    1da6:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
    1daa:	00 0f       	add	r16, r16
    1dac:	11 1f       	adc	r17, r17
    1dae:	98 01       	movw	r18, r16
    1db0:	44 27       	eor	r20, r20
    1db2:	37 fd       	sbrc	r19, 7
    1db4:	40 95       	com	r20
    1db6:	54 2f       	mov	r21, r20
    1db8:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <__divmodsi4>
        lcd_line2();
        lcd_fix_string(REF_R_str);	// "REF_R="
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1dbc:	e2 0e       	add	r14, r18
        (void) eeprom_write_byte((uint8_t *)(&RefDiff), (uint8_t)udiff2);	// hold offset for true reference Voltage
    1dbe:	8f ea       	ldi	r24, 0xAF	; 175
    1dc0:	91 e0       	ldi	r25, 0x01	; 1
    1dc2:	6e 2d       	mov	r22, r14
    1dc4:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__eewr_byte_m168>
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
    1dc8:	8e 2d       	mov	r24, r14
    1dca:	99 27       	eor	r25, r25
    1dcc:	87 fd       	sbrc	r24, 7
    1dce:	90 95       	com	r25
    1dd0:	6c e0       	ldi	r22, 0x0C	; 12
    1dd2:	71 e0       	ldi	r23, 0x01	; 1
    1dd4:	4a e0       	ldi	r20, 0x0A	; 10
    1dd6:	50 e0       	ldi	r21, 0x00	; 0
    1dd8:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <itoa>
    1ddc:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_string>
 #endif
        wait_about4s();
    1de0:	80 e2       	ldi	r24, 0x20	; 32
    1de2:	93 e0       	ldi	r25, 0x03	; 3
    1de4:	0e 94 6f 0a 	call	0x14de	; 0x14de <sleep_5ms>
        break;
    1de8:	1b c0       	rjmp	.+54     	; 0x1e20 <AutoCheck+0x8fc>
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1dea:	10 e0       	ldi	r17, 0x00	; 0
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
 #endif
        wait_about4s();
        break;
     }
     lcd_line2();
    1dec:	80 ec       	ldi	r24, 0xC0	; 192
    1dee:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     DisplayValue(cap.cval,cap.cpre,'F',4);
    1df2:	60 91 58 01 	lds	r22, 0x0158
    1df6:	70 91 59 01 	lds	r23, 0x0159
    1dfa:	80 91 5a 01 	lds	r24, 0x015A
    1dfe:	90 91 5b 01 	lds	r25, 0x015B
    1e02:	40 91 68 01 	lds	r20, 0x0168
    1e06:	26 e4       	ldi	r18, 0x46	; 70
    1e08:	04 e0       	ldi	r16, 0x04	; 4
    1e0a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <DisplayValue>
     wait_about200ms();			// wait additional time
    1e0e:	88 e2       	ldi	r24, 0x28	; 40
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	0e 94 6f 0a 	call	0x14de	; 0x14de <sleep_5ms>
 wait_about2s();		//wait 2 seconds
 
#ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
    1e16:	c3 94       	inc	r12
    1e18:	8c 2d       	mov	r24, r12
    1e1a:	80 34       	cpi	r24, 0x40	; 64
    1e1c:	09 f0       	breq	.+2      	; 0x1e20 <AutoCheck+0x8fc>
    1e1e:	f2 ce       	rjmp	.-540    	; 0x1c04 <AutoCheck+0x6e0>
     wait_about200ms();			// wait additional time
  } // end for ww

#endif

  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    1e20:	89 e1       	ldi	r24, 0x19	; 25
    1e22:	80 93 39 01 	sts	0x0139, r24
  lcd_clear();
    1e26:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_line2();
    1e2a:	80 ec       	ldi	r24, 0xC0	; 192
    1e2c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(VERSION_str);	//"Version ..."
    1e30:	87 e4       	ldi	r24, 0x47	; 71
    1e32:	91 e0       	ldi	r25, 0x01	; 1
    1e34:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
  lcd_line1();
    1e38:	80 e8       	ldi	r24, 0x80	; 128
    1e3a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(ATE);		//"Selftest End"
    1e3e:	8c ed       	ldi	r24, 0xDC	; 220
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
        // if key is pressed, don't repeat
        break;
     }
  }
#endif
 PartFound = PART_NONE;
    1e46:	10 92 07 01 	sts	0x0107, r1
 wait_about1s();			//wait 1 seconds
    1e4a:	88 ec       	ldi	r24, 0xC8	; 200
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	0e 94 6f 0a 	call	0x14de	; 0x14de <sleep_5ms>
 } 
    1e52:	2e 96       	adiw	r28, 0x0e	; 14
    1e54:	0f b6       	in	r0, 0x3f	; 63
    1e56:	f8 94       	cli
    1e58:	de bf       	out	0x3e, r29	; 62
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	cd bf       	out	0x3d, r28	; 61
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	1f 91       	pop	r17
    1e64:	0f 91       	pop	r16
    1e66:	ff 90       	pop	r15
    1e68:	ef 90       	pop	r14
    1e6a:	df 90       	pop	r13
    1e6c:	cf 90       	pop	r12
    1e6e:	bf 90       	pop	r11
    1e70:	af 90       	pop	r10
    1e72:	9f 90       	pop	r9
    1e74:	8f 90       	pop	r8
    1e76:	7f 90       	pop	r7
    1e78:	6f 90       	pop	r6
    1e7a:	5f 90       	pop	r5
    1e7c:	4f 90       	pop	r4
    1e7e:	3f 90       	pop	r3
    1e80:	2f 90       	pop	r2
    1e82:	08 95       	ret

00001e84 <main>:
  // prepare sleep mode
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
#endif

//begin of transistortester program
int main(void) {
    1e84:	0f 93       	push	r16
    1e86:	1f 93       	push	r17
    1e88:	cf 93       	push	r28
    1e8a:	df 93       	push	r29
  //switch on
#ifndef EXTREF2PD6
  // Switch on directly only without the PC4-PD6 connection.
  // With this connection the PD6 (AIN0) is connected to the external 2.5V reference voltage
  // and should never be switched to VCC directly.
  ON_DDR = (1<<ON_PIN);
    1e8c:	10 e4       	ldi	r17, 0x40	; 64
    1e8e:	1a b9       	out	0x0a, r17	; 10
#endif
#ifdef PULLUP_DISABLE
  ON_PORT = (1<<ON_PIN); 		// switch power on 
    1e90:	1b b9       	out	0x0b, r17	; 11
#else
  ON_PORT = (1<<ON_PIN)|(1<<RST_PIN); 	// switch power on , enable internal Pullup for Start-Pin
#endif
  uint8_t tmp;
  //ADC-Init
  ADCSRA = (1<<ADEN) | AUTO_CLOCK_DIV;	//prescaler=8 or 64 (if 8Mhz clock)
    1e92:	86 e8       	ldi	r24, 0x86	; 134
    1e94:	80 93 7a 00 	sts	0x007A, r24
// #define WDRF_HOME MCU_STATUS_REG
 #define WDRF_HOME MCUCSR
#else
 #define WDRF_HOME MCUSR
#endif
  tmp = (WDRF_HOME & (1<<WDRF));	// save Watch Dog Flag
    1e98:	04 b7       	in	r16, 0x34	; 52
  WDRF_HOME &= ~(1<<WDRF);	 	//reset Watch Dog flag
    1e9a:	84 b7       	in	r24, 0x34	; 52
    1e9c:	87 7f       	andi	r24, 0xF7	; 247
    1e9e:	84 bf       	out	0x34, r24	; 52
  wdt_disable();			// disable Watch Dog
    1ea0:	88 e1       	ldi	r24, 0x18	; 24
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	80 93 60 00 	sts	0x0060, r24
    1eaa:	10 92 60 00 	sts	0x0060, r1
    1eae:	0f be       	out	0x3f, r0	; 63
#ifndef __AVR_ATmega8__
  // switch off unused Parts
  PRR = (1<<PRTWI) | (1<<PRTIM0) | (1<<PRSPI) | (1<<PRUSART0);
    1eb0:	86 ea       	ldi	r24, 0xA6	; 166
    1eb2:	80 93 64 00 	sts	0x0064, r24
  DIDR0 = (1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D);	
    1eb6:	88 e3       	ldi	r24, 0x38	; 56
    1eb8:	80 93 7e 00 	sts	0x007E, r24
  TCCR2A = (0<<WGM21) | (0<<WGM20);		// Counter 2 normal mode
    1ebc:	10 92 b0 00 	sts	0x00B0, r1
 #endif 
 #if F_CPU == 2000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (0<<CS20);	//prescaler 128, 128us @ 2MHz
 #endif 
 #if F_CPU >= 8000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (1<<CS20);	//prescaler 1024, 128us @ 8MHz, 64us @ 16MHz
    1ec0:	87 e0       	ldi	r24, 0x07	; 7
    1ec2:	80 93 b1 00 	sts	0x00B1, r24
 #endif 
  sei();				// enable interrupts
    1ec6:	78 94       	sei
#endif
  lcd_init();				//initialize LCD
    1ec8:	0e 94 06 01 	call	0x20c	; 0x20c <lcd_init>
	
//  ADC_PORT = TXD_VAL;
//  ADC_DDR = TXD_MSK;
  if(tmp) { 
    1ecc:	03 ff       	sbrs	r16, 3
    1ece:	0c c0       	rjmp	.+24     	; 0x1ee8 <main+0x64>
     // check if  Watchdog-Event 
     // this happens, if the Watchdog is not reset for 2s
     // can happen, if any loop in the Program doen't finish.
     lcd_line1();
    1ed0:	80 e8       	ldi	r24, 0x80	; 128
    1ed2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     lcd_fix_string(TestTimedOut);	//Output Timeout
    1ed6:	83 ed       	ldi	r24, 0xD3	; 211
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
     wait3s();				//wait for 3 s
    1ede:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <wait3s>
     ON_PORT = 0;			//shut off!
    1ee2:	1b b8       	out	0x0b, r1	; 11
     ON_DDR = (1<<ON_PIN);		//switch to GND
    1ee4:	1a b9       	out	0x0a, r17	; 10
     return 0;
    1ee6:	47 c5       	rjmp	.+2702   	; 0x2976 <main+0xaf2>
  }
  LCDLoadCustomChar(LCD_CHAR_DIODE1);	//Custom-Character Diode symbol
    1ee8:	88 e4       	ldi	r24, 0x48	; 72
    1eea:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(DiodeIcon1);	//load Character  >|
    1eee:	8d e7       	ldi	r24, 0x7D	; 125
    1ef0:	91 e0       	ldi	r25, 0x01	; 1
    1ef2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_DIODE2);	//Custom-Character 
    1ef6:	80 e5       	ldi	r24, 0x50	; 80
    1ef8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(DiodeIcon2);	//load Character  |<
    1efc:	85 e8       	ldi	r24, 0x85	; 133
    1efe:	91 e0       	ldi	r25, 0x01	; 1
    1f00:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_CAP);	//Custom-Character  Capacitor symbol
    1f04:	88 e5       	ldi	r24, 0x58	; 88
    1f06:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(CapIcon);		//load Character  ||
    1f0a:	8d e8       	ldi	r24, 0x8D	; 141
    1f0c:	91 e0       	ldi	r25, 0x01	; 1
    1f0e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS1);	//Custom-Character Resistor symbol
    1f12:	88 e7       	ldi	r24, 0x78	; 120
    1f14:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(ResIcon1);		//load Character  [
    1f18:	85 e9       	ldi	r24, 0x95	; 149
    1f1a:	91 e0       	ldi	r25, 0x01	; 1
    1f1c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS2);	//Custom-Character 
    1f20:	80 e7       	ldi	r24, 0x70	; 112
    1f22:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(ResIcon2);		//load Character  ]
    1f26:	8d e9       	ldi	r24, 0x9D	; 157
    1f28:	91 e0       	ldi	r25, 0x01	; 1
    1f2a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_fix_customchar>
#endif
#ifdef PULLUP_DISABLE
 #ifdef __AVR_ATmega8__
  SFIOR = (1<<PUD);		// disable Pull-Up Resistors mega8
 #else
  MCUCR = (1<<PUD);		// disable Pull-Up Resistors mega168 family
    1f2e:	80 e1       	ldi	r24, 0x10	; 16
    1f30:	85 bf       	out	0x35, r24	; 53
  }
#else
  #define display_time OFF_WAIT_TIME
#endif

  empty_count = 0;
    1f32:	10 92 43 01 	sts	0x0143, r1
  mess_count = 0;
    1f36:	10 92 0b 01 	sts	0x010B, r1


//*****************************************************************
//Entry: if start key is pressed before shut down
start:
  PartFound = PART_NONE;
    1f3a:	10 92 07 01 	sts	0x0107, r1
  NumOfDiodes = 0;
    1f3e:	10 92 05 01 	sts	0x0105, r1
  PartReady = 0;
    1f42:	10 92 04 01 	sts	0x0104, r1
  PartMode = 0;
    1f46:	10 92 06 01 	sts	0x0106, r1
  WithReference = 0;		// no precision reference voltage
    1f4a:	10 92 42 01 	sts	0x0142, r1
  lcd_clear();
    1f4e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  ADC_DDR = TXD_MSK;		//activate Software-UART 
    1f52:	18 e0       	ldi	r17, 0x08	; 8
    1f54:	17 b9       	out	0x07, r17	; 7
#ifdef AUTO_CAL
  resis680pl = eeprom_read_word(&R680pl);
    1f56:	8b ea       	ldi	r24, 0xAB	; 171
    1f58:	91 e0       	ldi	r25, 0x01	; 1
    1f5a:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <__eerd_word_m168>
    1f5e:	90 93 09 01 	sts	0x0109, r25
    1f62:	80 93 08 01 	sts	0x0108, r24
  resis680mi = eeprom_read_word(&R680mi);
    1f66:	8d ea       	ldi	r24, 0xAD	; 173
    1f68:	91 e0       	ldi	r25, 0x01	; 1
    1f6a:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <__eerd_word_m168>
    1f6e:	90 93 03 01 	sts	0x0103, r25
    1f72:	80 93 02 01 	sts	0x0102, r24
#endif

  ResistorsFound = 0;
    1f76:	10 92 55 01 	sts	0x0155, r1
  cap.ca = 0;
    1f7a:	10 92 66 01 	sts	0x0166, r1
  cap.cb = 0;
    1f7e:	10 92 67 01 	sts	0x0167, r1
#ifdef WITH_UART
  uart_newline();		// start of new measurement
    1f82:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <uart_newline>
#endif
  ADCconfig.RefFlag = 0;
    1f86:	10 92 3a 01 	sts	0x013A, r1
  ADCconfig.U_AVCC = U_VCC;	// set initial VCC Voltage
    1f8a:	88 e8       	ldi	r24, 0x88	; 136
    1f8c:	93 e1       	ldi	r25, 0x13	; 19
    1f8e:	90 93 3e 01 	sts	0x013E, r25
    1f92:	80 93 3d 01 	sts	0x013D, r24
  ADCconfig.Samples = 190;		// set number of ADC samples near to max
    1f96:	8e eb       	ldi	r24, 0xBE	; 190
    1f98:	80 93 39 01 	sts	0x0139, r24
  ADC_PORT = TXD_VAL;
    1f9c:	18 b9       	out	0x08, r17	; 8
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND
    1f9e:	88 e1       	ldi	r24, 0x18	; 24
    1fa0:	87 b9       	out	0x07, r24	; 7
  wait1ms();
    1fa2:	0e 94 f6 14 	call	0x29ec	; 0x29ec <wait1ms>
  ADC_DDR =  TXD_MSK; 	// switch pin with reference back to input
    1fa6:	17 b9       	out	0x07, r17	; 7
#if FLASHEND > 0x1fff
  trans.uBE[1] = W5msReadADC(TPREF); // read voltage of precision reference
    1fa8:	84 e0       	ldi	r24, 0x04	; 4
    1faa:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
    1fae:	ec 01       	movw	r28, r24
    1fb0:	90 93 51 01 	sts	0x0151, r25
    1fb4:	80 93 50 01 	sts	0x0150, r24
  if ((trans.uBE[1] > 2250) && (trans.uBE[1] < 2750)) {
    1fb8:	8b 5c       	subi	r24, 0xCB	; 203
    1fba:	98 40       	sbci	r25, 0x08	; 8
    1fbc:	21 e0       	ldi	r18, 0x01	; 1
    1fbe:	83 3f       	cpi	r24, 0xF3	; 243
    1fc0:	92 07       	cpc	r25, r18
    1fc2:	c0 f4       	brcc	.+48     	; 0x1ff4 <main+0x170>
     // precision voltage reference connected, update U_AVCC
     WithReference = 1;
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	80 93 42 01 	sts	0x0142, r24
     ADCconfig.U_AVCC = (unsigned long)((unsigned long)ADCconfig.U_AVCC * 2495) / trans.uBE[1];
    1fca:	60 91 3d 01 	lds	r22, 0x013D
    1fce:	70 91 3e 01 	lds	r23, 0x013E
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	2f eb       	ldi	r18, 0xBF	; 191
    1fd8:	39 e0       	ldi	r19, 0x09	; 9
    1fda:	40 e0       	ldi	r20, 0x00	; 0
    1fdc:	50 e0       	ldi	r21, 0x00	; 0
    1fde:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
    1fe2:	9e 01       	movw	r18, r28
    1fe4:	40 e0       	ldi	r20, 0x00	; 0
    1fe6:	50 e0       	ldi	r21, 0x00	; 0
    1fe8:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
    1fec:	30 93 3e 01 	sts	0x013E, r19
    1ff0:	20 93 3d 01 	sts	0x013D, r18
  }
#endif
  lcd_line1();	//1. row 
    1ff4:	80 e8       	ldi	r24, 0x80	; 128
    1ff6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  
#ifdef WITH_AUTO_REF
  (void) ReadADC(0x0e);		// read Reference-voltage 
    1ffa:	8e e0       	ldi	r24, 0x0E	; 14
    1ffc:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
  ref_mv = W20msReadADC(0x0e);	// read Reference-voltage
    2000:	8e e0       	ldi	r24, 0x0E	; 14
    2002:	0e 94 9b 1a 	call	0x3536	; 0x3536 <W20msReadADC>
    2006:	ec 01       	movw	r28, r24
    2008:	90 93 40 01 	sts	0x0140, r25
    200c:	80 93 3f 01 	sts	0x013F, r24
#else
  ref_mv = DEFAULT_BAND_GAP;	// set to default Reference Voltage
#endif
  ADCconfig.U_Bandgap = ADC_internal_reference;	// set internal reference voltage for ADC
    2010:	8f ea       	ldi	r24, 0xAF	; 175
    2012:	91 e0       	ldi	r25, 0x01	; 1
    2014:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <__eerd_byte_m168>
    2018:	99 27       	eor	r25, r25
    201a:	87 fd       	sbrc	r24, 7
    201c:	90 95       	com	r25
    201e:	8c 0f       	add	r24, r28
    2020:	9d 1f       	adc	r25, r29
    2022:	90 93 3c 01 	sts	0x013C, r25
    2026:	80 93 3b 01 	sts	0x013B, r24
  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    202a:	89 e1       	ldi	r24, 0x19	; 25
    202c:	80 93 39 01 	sts	0x0139, r24

#ifdef BAT_CHECK
  // Battery check is selected
  ReadADC(TPBAT);	//Dummy-Readout
    2030:	85 e0       	ldi	r24, 0x05	; 5
    2032:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
  trans.uBE[0] = W5msReadADC(TPBAT); 	//with 5V reference
    2036:	85 e0       	ldi	r24, 0x05	; 5
    2038:	0e 94 9f 1a 	call	0x353e	; 0x353e <W5msReadADC>
    203c:	90 93 4f 01 	sts	0x014F, r25
    2040:	80 93 4e 01 	sts	0x014E, r24
  lcd_fix_string(Bat_str);		//output: "Bat. "
    2044:	85 ee       	ldi	r24, 0xE5	; 229
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
 #ifdef BAT_OUT
  // display Battery voltage
  // The divisor to get the voltage in 0.01V units is ((10*33)/133) witch is about 2.4812
  // A good result can be get with multiply by 4 and divide by 10 (about 0.75%).
  cap.cval = (trans.uBE[0]*4)/10+((BAT_OUT+5)/10); // usually output only 2 digits
    204c:	80 91 4e 01 	lds	r24, 0x014E
    2050:	90 91 4f 01 	lds	r25, 0x014F
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	88 0f       	add	r24, r24
    205a:	99 1f       	adc	r25, r25
    205c:	6a e0       	ldi	r22, 0x0A	; 10
    205e:	70 e0       	ldi	r23, 0x00	; 0
    2060:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <__udivmodhi4>
    2064:	61 5f       	subi	r22, 0xF1	; 241
    2066:	7f 4f       	sbci	r23, 0xFF	; 255
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	60 93 58 01 	sts	0x0158, r22
    2070:	70 93 59 01 	sts	0x0159, r23
    2074:	80 93 5a 01 	sts	0x015A, r24
    2078:	90 93 5b 01 	sts	0x015B, r25
  DisplayValue(cap.cval,-2,'V',2);		// Display 2 Digits of this 10mV units
    207c:	4e ef       	ldi	r20, 0xFE	; 254
    207e:	26 e5       	ldi	r18, 0x56	; 86
    2080:	02 e0       	ldi	r16, 0x02	; 2
    2082:	0e 94 73 09 	call	0x12e6	; 0x12e6 <DisplayValue>
  lcd_space();
    2086:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
 #warning "Battery POOR level is set for stepup regulator"
 #define WARN_LEVEL (((unsigned long)(BAT_POOR*100+500)*(unsigned long)33)/133)
 #endif
 #define POOR_LEVEL (((unsigned long)(BAT_POOR*100)*(unsigned long)33)/133)
  // check the battery voltage
  if (trans.uBE[0] <  WARN_LEVEL) {
    208a:	80 91 4e 01 	lds	r24, 0x014E
    208e:	90 91 4f 01 	lds	r25, 0x014F
    2092:	27 e0       	ldi	r18, 0x07	; 7
    2094:	8c 32       	cpi	r24, 0x2C	; 44
    2096:	92 07       	cpc	r25, r18
    2098:	88 f4       	brcc	.+34     	; 0x20bc <main+0x238>
     //Vcc < 7,3V; show Warning 
     if(trans.uBE[0] < POOR_LEVEL) {	
    209a:	26 e0       	ldi	r18, 0x06	; 6
    209c:	83 33       	cpi	r24, 0x33	; 51
    209e:	92 07       	cpc	r25, r18
    20a0:	50 f4       	brcc	.+20     	; 0x20b6 <main+0x232>
        //Vcc <6,3V; no proper operation is possible
        lcd_fix_string(BatEmpty);	//Battery empty!
    20a2:	8c e7       	ldi	r24, 0x7C	; 124
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
        wait_about2s();
    20aa:	80 e9       	ldi	r24, 0x90	; 144
    20ac:	91 e0       	ldi	r25, 0x01	; 1
    20ae:	0e 94 6f 0a 	call	0x14de	; 0x14de <sleep_5ms>
        PORTD = 0;			//switch power off
    20b2:	1b b8       	out	0x0b, r1	; 11
        return 0;
    20b4:	60 c4       	rjmp	.+2240   	; 0x2976 <main+0xaf2>
     }
     lcd_fix_string(BatWeak);		//Battery weak
    20b6:	87 e7       	ldi	r24, 0x77	; 119
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	02 c0       	rjmp	.+4      	; 0x20c0 <main+0x23c>
  } else { // Battery-voltage OK
     lcd_fix_string(OK_str); 		// "OK"
    20bc:	8b ee       	ldi	r24, 0xEB	; 235
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
  }
#else
  lcd_fix_string(VERSION_str);		// if no Battery check, Version .. in row 1
#endif
#ifdef WDT_enabled
  wdt_enable(WDTO_2S);		//Watchdog on
    20c4:	2f e0       	ldi	r18, 0x0F	; 15
    20c6:	88 e1       	ldi	r24, 0x18	; 24
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	0f b6       	in	r0, 0x3f	; 63
    20cc:	f8 94       	cli
    20ce:	a8 95       	wdr
    20d0:	80 93 60 00 	sts	0x0060, r24
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	20 93 60 00 	sts	0x0060, r18
#endif

//  wait1s();			// add more time for reading batterie voltage
  // begin tests
#ifdef AUTO_RH
  RefVoltage();			//compute RHmultip = f(reference voltage)
    20da:	0e 94 1b 09 	call	0x1236	; 0x1236 <RefVoltage>
#endif
#if FLASHEND > 0x1fff
  if (WithReference) {
    20de:	80 91 42 01 	lds	r24, 0x0142
    20e2:	88 23       	and	r24, r24
    20e4:	b1 f0       	breq	.+44     	; 0x2112 <main+0x28e>
     lcd_line2();
    20e6:	80 ec       	ldi	r24, 0xC0	; 192
    20e8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     lcd_fix_string(VCC_str);		// VCC=
    20ec:	87 e2       	ldi	r24, 0x27	; 39
    20ee:	91 e0       	ldi	r25, 0x01	; 1
    20f0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
     DisplayValue(ADCconfig.U_AVCC,-3,'V',3);	// Display 3 Digits of this mV units
    20f4:	60 91 3d 01 	lds	r22, 0x013D
    20f8:	70 91 3e 01 	lds	r23, 0x013E
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	4d ef       	ldi	r20, 0xFD	; 253
    2102:	26 e5       	ldi	r18, 0x56	; 86
    2104:	03 e0       	ldi	r16, 0x03	; 3
    2106:	0e 94 73 09 	call	0x12e6	; 0x12e6 <DisplayValue>
     wait_about1s();
    210a:	88 ec       	ldi	r24, 0xC8	; 200
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	0e 94 6f 0a 	call	0x14de	; 0x14de <sleep_5ms>
  }
#endif

  lcd_line2();			//LCD position row2, column 1
    2112:	80 ec       	ldi	r24, 0xC0	; 192
    2114:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(TestRunning);		//String: testing...
    2118:	8c e6       	ldi	r24, 0x6C	; 108
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
#ifndef DebugOut
  lcd_line2();			//LCD position row 2, column 1
    2120:	80 ec       	ldi	r24, 0xC0	; 192
    2122:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
#endif
  EntladePins();		// discharge all capacitors!
    2126:	0e 94 80 08 	call	0x1100	; 0x1100 <EntladePins>
  if(PartFound == PART_CELL) {
    212a:	80 91 07 01 	lds	r24, 0x0107
    212e:	88 30       	cpi	r24, 0x08	; 8
    2130:	39 f4       	brne	.+14     	; 0x2140 <main+0x2bc>
    lcd_clear();
    2132:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
    lcd_fix_string(Cell_str);	// display "Cell!"
    2136:	81 e2       	ldi	r24, 0x21	; 33
    2138:	91 e0       	ldi	r25, 0x01	; 1
    213a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
    goto end2;
    213e:	ea c3       	rjmp	.+2004   	; 0x2914 <main+0xa90>
  }

#ifdef CHECK_CALL
  AutoCheck();			//check, if selftest should be done
    2140:	0e 94 92 0a 	call	0x1524	; 0x1524 <AutoCheck>
#endif
     
  // check all 6 combinations for the 3 pins 
//         High  Low  Tri
  CheckPins(TP1, TP2, TP3);
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	61 e0       	ldi	r22, 0x01	; 1
    2148:	42 e0       	ldi	r20, 0x02	; 2
    214a:	0e 94 c8 01 	call	0x390	; 0x390 <CheckPins>
  CheckPins(TP2, TP1, TP3);
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	60 e0       	ldi	r22, 0x00	; 0
    2152:	42 e0       	ldi	r20, 0x02	; 2
    2154:	0e 94 c8 01 	call	0x390	; 0x390 <CheckPins>

  CheckPins(TP1, TP3, TP2);
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	62 e0       	ldi	r22, 0x02	; 2
    215c:	41 e0       	ldi	r20, 0x01	; 1
    215e:	0e 94 c8 01 	call	0x390	; 0x390 <CheckPins>
  CheckPins(TP3, TP1, TP2);
    2162:	82 e0       	ldi	r24, 0x02	; 2
    2164:	60 e0       	ldi	r22, 0x00	; 0
    2166:	41 e0       	ldi	r20, 0x01	; 1
    2168:	0e 94 c8 01 	call	0x390	; 0x390 <CheckPins>

  CheckPins(TP2, TP3, TP1);
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	62 e0       	ldi	r22, 0x02	; 2
    2170:	40 e0       	ldi	r20, 0x00	; 0
    2172:	0e 94 c8 01 	call	0x390	; 0x390 <CheckPins>
  CheckPins(TP3, TP2, TP1);
    2176:	82 e0       	ldi	r24, 0x02	; 2
    2178:	61 e0       	ldi	r22, 0x01	; 1
    217a:	40 e0       	ldi	r20, 0x00	; 0
    217c:	0e 94 c8 01 	call	0x390	; 0x390 <CheckPins>
  
  //separate check if is is a capacitor
  if(((PartFound == PART_NONE) || (PartFound == PART_RESISTOR) || (PartFound == PART_DIODE)) ) {
    2180:	80 91 07 01 	lds	r24, 0x0107
    2184:	88 23       	and	r24, r24
    2186:	21 f0       	breq	.+8      	; 0x2190 <main+0x30c>
    2188:	86 30       	cpi	r24, 0x06	; 6
    218a:	11 f0       	breq	.+4      	; 0x2190 <main+0x30c>
    218c:	81 30       	cpi	r24, 0x01	; 1
    218e:	d9 f4       	brne	.+54     	; 0x21c6 <main+0x342>
     EntladePins();		// discharge capacities
    2190:	0e 94 80 08 	call	0x1100	; 0x1100 <EntladePins>
     //measurement of capacities in all 3 combinations
     cap.cval_max = 0;		// set max to zero
    2194:	10 92 5c 01 	sts	0x015C, r1
    2198:	10 92 5d 01 	sts	0x015D, r1
    219c:	10 92 5e 01 	sts	0x015E, r1
    21a0:	10 92 5f 01 	sts	0x015F, r1
     cap.cpre_max = -12;	// set max to pF unit
    21a4:	84 ef       	ldi	r24, 0xF4	; 244
    21a6:	80 93 69 01 	sts	0x0169, r24
     ReadCapacity(TP3, TP1);
    21aa:	82 e0       	ldi	r24, 0x02	; 2
    21ac:	60 e0       	ldi	r22, 0x00	; 0
    21ae:	0e 94 99 15 	call	0x2b32	; 0x2b32 <ReadCapacity>
     ReadCapacity(TP3, TP2);
    21b2:	82 e0       	ldi	r24, 0x02	; 2
    21b4:	61 e0       	ldi	r22, 0x01	; 1
    21b6:	0e 94 99 15 	call	0x2b32	; 0x2b32 <ReadCapacity>
     ReadCapacity(TP2, TP1);
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	60 e0       	ldi	r22, 0x00	; 0
    21be:	0e 94 99 15 	call	0x2b32	; 0x2b32 <ReadCapacity>

#if FLASHEND > 0x1fff
     ReadInductance();			// measure inductance
    21c2:	0e 94 04 18 	call	0x3008	; 0x3008 <ReadInductance>
#endif
  }
  //All checks are done, output result to display
  lcd_clear();
    21c6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  if(PartFound == PART_DIODE) {
    21ca:	80 91 07 01 	lds	r24, 0x0107
    21ce:	81 30       	cpi	r24, 0x01	; 1
    21d0:	09 f0       	breq	.+2      	; 0x21d4 <main+0x350>
    21d2:	ff c0       	rjmp	.+510    	; 0x23d2 <main+0x54e>
     if(NumOfDiodes == 1) {		//single Diode
    21d4:	90 91 05 01 	lds	r25, 0x0105
    21d8:	91 30       	cpi	r25, 0x01	; 1
    21da:	49 f5       	brne	.+82     	; 0x222e <main+0x3aa>
        lcd_fix_string(Diode);		//"Diode: "
    21dc:	81 e9       	ldi	r24, 0x91	; 145
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
        lcd_testpin(diodes[0].Anode);
    21e4:	80 91 6c 01 	lds	r24, 0x016C
    21e8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
        lcd_fix_string(AnKat);		//"->|-"
    21ec:	85 e3       	ldi	r24, 0x35	; 53
    21ee:	91 e0       	ldi	r25, 0x01	; 1
    21f0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
        lcd_testpin(diodes[0].Cathode);
    21f4:	80 91 6d 01 	lds	r24, 0x016D
    21f8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
        UfAusgabe(0x70);
    21fc:	80 e7       	ldi	r24, 0x70	; 112
    21fe:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <UfAusgabe>
        lcd_fix_string(GateCap_str);	//"C="
    2202:	88 ef       	ldi	r24, 0xF8	; 248
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
        ReadCapacity(diodes[0].Cathode,diodes[0].Anode);	// Capacity opposite flow direction
    220a:	80 91 6d 01 	lds	r24, 0x016D
    220e:	60 91 6c 01 	lds	r22, 0x016C
    2212:	0e 94 99 15 	call	0x2b32	; 0x2b32 <ReadCapacity>
        DisplayValue(cap.cval,cap.cpre,'F',3);
    2216:	60 91 58 01 	lds	r22, 0x0158
    221a:	70 91 59 01 	lds	r23, 0x0159
    221e:	80 91 5a 01 	lds	r24, 0x015A
    2222:	90 91 5b 01 	lds	r25, 0x015B
    2226:	40 91 68 01 	lds	r20, 0x0168
    222a:	26 e4       	ldi	r18, 0x46	; 70
    222c:	f4 c2       	rjmp	.+1512   	; 0x2816 <main+0x992>
        goto end;
     } else if(NumOfDiodes == 2) { // double diode
    222e:	92 30       	cpi	r25, 0x02	; 2
    2230:	09 f0       	breq	.+2      	; 0x2234 <main+0x3b0>
    2232:	4c c0       	rjmp	.+152    	; 0x22cc <main+0x448>
        lcd_data('2');
    2234:	82 e3       	ldi	r24, 0x32	; 50
    2236:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
        lcd_fix_string(Dioden);		//"diodes "
    223a:	8d e3       	ldi	r24, 0x3D	; 61
    223c:	91 e0       	ldi	r25, 0x01	; 1
    223e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
        if(diodes[0].Anode == diodes[1].Anode) { //Common Anode
    2242:	90 91 6c 01 	lds	r25, 0x016C
    2246:	20 91 70 01 	lds	r18, 0x0170
    224a:	92 17       	cp	r25, r18
    224c:	59 f4       	brne	.+22     	; 0x2264 <main+0x3e0>
           lcd_testpin(diodes[0].Cathode);
    224e:	80 91 6d 01 	lds	r24, 0x016D
    2252:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    2256:	89 e3       	ldi	r24, 0x39	; 57
    2258:	91 e0       	ldi	r25, 0x01	; 1
    225a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    225e:	80 91 6c 01 	lds	r24, 0x016C
    2262:	2b c0       	rjmp	.+86     	; 0x22ba <main+0x436>
           lcd_fix_string(AnKat);	//"->|-"
           lcd_testpin(diodes[1].Cathode);
           UfAusgabe(0x01);
           goto end;
        } else if(diodes[0].Cathode == diodes[1].Cathode) { //Common Cathode
    2264:	30 91 6d 01 	lds	r19, 0x016D
    2268:	80 91 71 01 	lds	r24, 0x0171
    226c:	38 17       	cp	r19, r24
    226e:	b9 f4       	brne	.+46     	; 0x229e <main+0x41a>
           lcd_testpin(diodes[0].Anode);
    2270:	89 2f       	mov	r24, r25
    2272:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2276:	85 e3       	ldi	r24, 0x35	; 53
    2278:	91 e0       	ldi	r25, 0x01	; 1
    227a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
	   lcd_testpin(diodes[0].Cathode);
    227e:	80 91 6d 01 	lds	r24, 0x016D
    2282:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    2286:	89 e3       	ldi	r24, 0x39	; 57
    2288:	91 e0       	ldi	r25, 0x01	; 1
    228a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
           lcd_testpin(diodes[1].Anode);
    228e:	80 91 70 01 	lds	r24, 0x0170
    2292:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           UfAusgabe(0x01);
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <UfAusgabe>
           goto end;
    229c:	34 c3       	rjmp	.+1640   	; 0x2906 <main+0xa82>
          }
        else if ((diodes[0].Cathode == diodes[1].Anode) && (diodes[1].Cathode == diodes[0].Anode)) {
    229e:	32 17       	cp	r19, r18
    22a0:	09 f0       	breq	.+2      	; 0x22a4 <main+0x420>
    22a2:	ff c2       	rjmp	.+1534   	; 0x28a2 <main+0xa1e>
    22a4:	89 17       	cp	r24, r25
    22a6:	09 f0       	breq	.+2      	; 0x22aa <main+0x426>
    22a8:	fc c2       	rjmp	.+1528   	; 0x28a2 <main+0xa1e>
           //Antiparallel
           lcd_testpin(diodes[0].Anode);
    22aa:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    22ae:	85 e3       	ldi	r24, 0x35	; 53
    22b0:	91 e0       	ldi	r25, 0x01	; 1
    22b2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
           lcd_testpin(diodes[0].Cathode);
    22b6:	80 91 6d 01 	lds	r24, 0x016D
    22ba:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    22be:	85 e3       	ldi	r24, 0x35	; 53
    22c0:	91 e0       	ldi	r25, 0x01	; 1
    22c2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
           lcd_testpin(diodes[1].Cathode);
    22c6:	80 91 71 01 	lds	r24, 0x0171
    22ca:	e3 cf       	rjmp	.-58     	; 0x2292 <main+0x40e>
           UfAusgabe(0x01);
           goto end;
        }
     } else if(NumOfDiodes == 3) {
    22cc:	93 30       	cpi	r25, 0x03	; 3
    22ce:	09 f0       	breq	.+2      	; 0x22d2 <main+0x44e>
    22d0:	e8 c2       	rjmp	.+1488   	; 0x28a2 <main+0xa1e>
        //Serial of 2 Diodes; was detected as 3 Diodes 
        trans.b = 3;
    22d2:	90 93 52 01 	sts	0x0152, r25
        trans.c = 3;
    22d6:	90 93 53 01 	sts	0x0153, r25
        /* Check for any constallation of 2 serial diodes:
          Only once the pin No of anyone Cathode is identical of another anode.
          two diodes in series is additionally detected as third big diode.
        */
        if(diodes[0].Cathode == diodes[1].Anode)
    22da:	50 91 6d 01 	lds	r21, 0x016D
    22de:	90 91 70 01 	lds	r25, 0x0170
    22e2:	59 17       	cp	r21, r25
    22e4:	21 f4       	brne	.+8      	; 0x22ee <main+0x46a>
          {
           trans.b = 0;
    22e6:	10 92 52 01 	sts	0x0152, r1
           trans.c = 1;
    22ea:	80 93 53 01 	sts	0x0153, r24
          }
        if(diodes[0].Anode == diodes[1].Cathode)
    22ee:	40 91 6c 01 	lds	r20, 0x016C
    22f2:	30 91 71 01 	lds	r19, 0x0171
    22f6:	43 17       	cp	r20, r19
    22f8:	29 f4       	brne	.+10     	; 0x2304 <main+0x480>
          {
           trans.b = 1;
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	80 93 52 01 	sts	0x0152, r24
           trans.c = 0;
    2300:	10 92 53 01 	sts	0x0153, r1
          }
        if(diodes[0].Cathode == diodes[2].Anode)
    2304:	20 91 74 01 	lds	r18, 0x0174
    2308:	52 17       	cp	r21, r18
    230a:	29 f4       	brne	.+10     	; 0x2316 <main+0x492>
          {
           trans.b = 0;
    230c:	10 92 52 01 	sts	0x0152, r1
           trans.c = 2;
    2310:	82 e0       	ldi	r24, 0x02	; 2
    2312:	80 93 53 01 	sts	0x0153, r24
          }
        if(diodes[0].Anode == diodes[2].Cathode)
    2316:	80 91 75 01 	lds	r24, 0x0175
    231a:	48 17       	cp	r20, r24
    231c:	29 f4       	brne	.+10     	; 0x2328 <main+0x4a4>
          {
           trans.b = 2;
    231e:	42 e0       	ldi	r20, 0x02	; 2
    2320:	40 93 52 01 	sts	0x0152, r20
           trans.c = 0;
    2324:	10 92 53 01 	sts	0x0153, r1
          }
        if(diodes[1].Cathode == diodes[2].Anode)
    2328:	32 17       	cp	r19, r18
    232a:	31 f4       	brne	.+12     	; 0x2338 <main+0x4b4>
          {
           trans.b = 1;
    232c:	21 e0       	ldi	r18, 0x01	; 1
    232e:	20 93 52 01 	sts	0x0152, r18
           trans.c = 2;
    2332:	22 e0       	ldi	r18, 0x02	; 2
    2334:	20 93 53 01 	sts	0x0153, r18
          }
        if(diodes[1].Anode == diodes[2].Cathode)
    2338:	98 17       	cp	r25, r24
    233a:	31 f4       	brne	.+12     	; 0x2348 <main+0x4c4>
          {
           trans.b = 2;
    233c:	82 e0       	ldi	r24, 0x02	; 2
    233e:	80 93 52 01 	sts	0x0152, r24
           trans.c = 1;
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	80 93 53 01 	sts	0x0153, r24
        lcd_testpin(diodes[2].Cathode);
        lcd_space();
        lcd_string(utoa(diodes[2].Voltage, outval, 10));
        lcd_line1();
#endif
        if((trans.b<3) && (trans.c<3)) {
    2348:	80 91 52 01 	lds	r24, 0x0152
    234c:	83 30       	cpi	r24, 0x03	; 3
    234e:	08 f0       	brcs	.+2      	; 0x2352 <main+0x4ce>
    2350:	a8 c2       	rjmp	.+1360   	; 0x28a2 <main+0xa1e>
    2352:	80 91 53 01 	lds	r24, 0x0153
    2356:	83 30       	cpi	r24, 0x03	; 3
    2358:	08 f0       	brcs	.+2      	; 0x235c <main+0x4d8>
    235a:	a3 c2       	rjmp	.+1350   	; 0x28a2 <main+0xa1e>
           lcd_data('3');
    235c:	83 e3       	ldi	r24, 0x33	; 51
    235e:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
           lcd_fix_string(Dioden);	//"Diodes "
    2362:	8d e3       	ldi	r24, 0x3D	; 61
    2364:	91 e0       	ldi	r25, 0x01	; 1
    2366:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Anode);
    236a:	e0 91 52 01 	lds	r30, 0x0152
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	ee 0f       	add	r30, r30
    2372:	ff 1f       	adc	r31, r31
    2374:	ee 0f       	add	r30, r30
    2376:	ff 1f       	adc	r31, r31
    2378:	e4 59       	subi	r30, 0x94	; 148
    237a:	fe 4f       	sbci	r31, 0xFE	; 254
    237c:	80 81       	ld	r24, Z
    237e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2382:	85 e3       	ldi	r24, 0x35	; 53
    2384:	91 e0       	ldi	r25, 0x01	; 1
    2386:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Cathode);
    238a:	e0 91 52 01 	lds	r30, 0x0152
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	ee 0f       	add	r30, r30
    2392:	ff 1f       	adc	r31, r31
    2394:	ee 0f       	add	r30, r30
    2396:	ff 1f       	adc	r31, r31
    2398:	e4 59       	subi	r30, 0x94	; 148
    239a:	fe 4f       	sbci	r31, 0xFE	; 254
    239c:	81 81       	ldd	r24, Z+1	; 0x01
    239e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    23a2:	85 e3       	ldi	r24, 0x35	; 53
    23a4:	91 e0       	ldi	r25, 0x01	; 1
    23a6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
           lcd_testpin(diodes[trans.c].Cathode);
    23aa:	e0 91 53 01 	lds	r30, 0x0153
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	ee 0f       	add	r30, r30
    23b2:	ff 1f       	adc	r31, r31
    23b4:	ee 0f       	add	r30, r30
    23b6:	ff 1f       	adc	r31, r31
    23b8:	e4 59       	subi	r30, 0x94	; 148
    23ba:	fe 4f       	sbci	r31, 0xFE	; 254
    23bc:	81 81       	ldd	r24, Z+1	; 0x01
    23be:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           UfAusgabe( (trans.b<<4)|trans.c);
    23c2:	80 91 52 01 	lds	r24, 0x0152
    23c6:	82 95       	swap	r24
    23c8:	80 7f       	andi	r24, 0xF0	; 240
    23ca:	90 91 53 01 	lds	r25, 0x0153
    23ce:	89 2b       	or	r24, r25
    23d0:	63 cf       	rjmp	.-314    	; 0x2298 <main+0x414>
           goto end;
        }
     }
     // end (PartFound == PART_DIODE)
  } else if (PartFound == PART_TRANSISTOR) {
    23d2:	82 30       	cpi	r24, 0x02	; 2
    23d4:	09 f0       	breq	.+2      	; 0x23d8 <main+0x554>
    23d6:	a1 c0       	rjmp	.+322    	; 0x251a <main+0x696>
    if(PartReady != 0) {
    23d8:	80 91 04 01 	lds	r24, 0x0104
    23dc:	88 23       	and	r24, r24
    23de:	71 f1       	breq	.+92     	; 0x243c <main+0x5b8>
       if((trans.hfe[0]>trans.hfe[1])) {
    23e0:	80 91 4a 01 	lds	r24, 0x014A
    23e4:	90 91 4b 01 	lds	r25, 0x014B
    23e8:	a0 91 4c 01 	lds	r26, 0x014C
    23ec:	b0 91 4d 01 	lds	r27, 0x014D
    23f0:	20 91 46 01 	lds	r18, 0x0146
    23f4:	30 91 47 01 	lds	r19, 0x0147
    23f8:	40 91 48 01 	lds	r20, 0x0148
    23fc:	50 91 49 01 	lds	r21, 0x0149
    2400:	82 17       	cp	r24, r18
    2402:	93 07       	cpc	r25, r19
    2404:	a4 07       	cpc	r26, r20
    2406:	b5 07       	cpc	r27, r21
    2408:	48 f4       	brcc	.+18     	; 0x241c <main+0x598>
          //if the amplification factor was higher at first testr: swap C and E !
          tmp = trans.c;
    240a:	80 91 53 01 	lds	r24, 0x0153
          trans.c = trans.e;
    240e:	90 91 54 01 	lds	r25, 0x0154
    2412:	90 93 53 01 	sts	0x0153, r25
          trans.e = tmp;
    2416:	80 93 54 01 	sts	0x0154, r24
    241a:	10 c0       	rjmp	.+32     	; 0x243c <main+0x5b8>
       } else {
          trans.hfe[0] = trans.hfe[1];
    241c:	80 93 46 01 	sts	0x0146, r24
    2420:	90 93 47 01 	sts	0x0147, r25
    2424:	a0 93 48 01 	sts	0x0148, r26
    2428:	b0 93 49 01 	sts	0x0149, r27
          trans.uBE[0] = trans.uBE[1];
    242c:	80 91 50 01 	lds	r24, 0x0150
    2430:	90 91 51 01 	lds	r25, 0x0151
    2434:	90 93 4f 01 	sts	0x014F, r25
    2438:	80 93 4e 01 	sts	0x014E, r24
       }
    }

    if(PartMode == PART_MODE_NPN) {
    243c:	80 91 06 01 	lds	r24, 0x0106
    2440:	81 30       	cpi	r24, 0x01	; 1
    2442:	19 f4       	brne	.+6      	; 0x244a <main+0x5c6>
       lcd_fix_string(NPN_str);		//"NPN "
    2444:	8e ef       	ldi	r24, 0xFE	; 254
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	02 c0       	rjmp	.+4      	; 0x244e <main+0x5ca>
    } else {
       lcd_fix_string(PNP_str);		//"PNP "
    244a:	83 e0       	ldi	r24, 0x03	; 3
    244c:	91 e0       	ldi	r25, 0x01	; 1
    244e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
    }
    if( NumOfDiodes > 2) {	//Transistor with protection diode
    2452:	80 91 05 01 	lds	r24, 0x0105
    2456:	83 30       	cpi	r24, 0x03	; 3
    2458:	a0 f0       	brcs	.+40     	; 0x2482 <main+0x5fe>
#ifdef EBC_STYLE
       if(PartMode == PART_MODE_NPN)
#else
       if (((PartMode == PART_MODE_NPN) && (trans.c > trans.e)) || ((PartMode != PART_MODE_NPN) && (trans.c < trans.e)))
    245a:	20 91 06 01 	lds	r18, 0x0106
    245e:	90 91 53 01 	lds	r25, 0x0153
    2462:	80 91 54 01 	lds	r24, 0x0154
    2466:	21 30       	cpi	r18, 0x01	; 1
    2468:	19 f4       	brne	.+6      	; 0x2470 <main+0x5ec>
    246a:	89 17       	cp	r24, r25
    246c:	18 f0       	brcs	.+6      	; 0x2474 <main+0x5f0>
    246e:	05 c0       	rjmp	.+10     	; 0x247a <main+0x5f6>
    2470:	98 17       	cp	r25, r24
    2472:	18 f4       	brcc	.+6      	; 0x247a <main+0x5f6>
#endif
       {
          lcd_fix_string(AnKat);	//"->|-"
    2474:	85 e3       	ldi	r24, 0x35	; 53
    2476:	91 e0       	ldi	r25, 0x01	; 1
    2478:	02 c0       	rjmp	.+4      	; 0x247e <main+0x5fa>
       } else {
          lcd_fix_string(KatAn);	//"-|<-"
    247a:	89 e3       	ldi	r24, 0x39	; 57
    247c:	91 e0       	ldi	r25, 0x01	; 1
    247e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
    lcd_fix_string(EBC_str);		//" EBC="
    lcd_testpin(trans.e);
    lcd_testpin(trans.b);
    lcd_testpin(trans.c);
#else
    lcd_fix_string(N123_str);		//" 123="
    2482:	88 e0       	ldi	r24, 0x08	; 8
    2484:	91 e0       	ldi	r25, 0x01	; 1
    2486:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
    for (ii=0;ii<3;ii++) {
    248a:	10 92 44 01 	sts	0x0144, r1
    248e:	1e c0       	rjmp	.+60     	; 0x24cc <main+0x648>
        if (ii == trans.e)  lcd_data('E');	// Output Character in right order
    2490:	90 91 54 01 	lds	r25, 0x0154
    2494:	89 17       	cp	r24, r25
    2496:	19 f4       	brne	.+6      	; 0x249e <main+0x61a>
    2498:	85 e4       	ldi	r24, 0x45	; 69
    249a:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
        if (ii == trans.b)  lcd_data('B');
    249e:	90 91 44 01 	lds	r25, 0x0144
    24a2:	80 91 52 01 	lds	r24, 0x0152
    24a6:	98 17       	cp	r25, r24
    24a8:	19 f4       	brne	.+6      	; 0x24b0 <main+0x62c>
    24aa:	82 e4       	ldi	r24, 0x42	; 66
    24ac:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
        if (ii == trans.c)  lcd_data('C');
    24b0:	90 91 44 01 	lds	r25, 0x0144
    24b4:	80 91 53 01 	lds	r24, 0x0153
    24b8:	98 17       	cp	r25, r24
    24ba:	19 f4       	brne	.+6      	; 0x24c2 <main+0x63e>
    24bc:	83 e4       	ldi	r24, 0x43	; 67
    24be:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
    lcd_testpin(trans.e);
    lcd_testpin(trans.b);
    lcd_testpin(trans.c);
#else
    lcd_fix_string(N123_str);		//" 123="
    for (ii=0;ii<3;ii++) {
    24c2:	80 91 44 01 	lds	r24, 0x0144
    24c6:	8f 5f       	subi	r24, 0xFF	; 255
    24c8:	80 93 44 01 	sts	0x0144, r24
    24cc:	80 91 44 01 	lds	r24, 0x0144
    24d0:	83 30       	cpi	r24, 0x03	; 3
    24d2:	f0 f2       	brcs	.-68     	; 0x2490 <main+0x60c>
        if (ii == trans.e)  lcd_data('E');	// Output Character in right order
        if (ii == trans.b)  lcd_data('B');
        if (ii == trans.c)  lcd_data('C');
    }
#endif
    lcd_line2(); //2. row 
    24d4:	80 ec       	ldi	r24, 0xC0	; 192
    24d6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
    lcd_fix_string(hfe_str);		//"B="  (hFE)
    24da:	8b ef       	ldi	r24, 0xFB	; 251
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
    DisplayValue(trans.hfe[0],0,0,3);
    24e2:	60 91 46 01 	lds	r22, 0x0146
    24e6:	70 91 47 01 	lds	r23, 0x0147
    24ea:	80 91 48 01 	lds	r24, 0x0148
    24ee:	90 91 49 01 	lds	r25, 0x0149
    24f2:	40 e0       	ldi	r20, 0x00	; 0
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	03 e0       	ldi	r16, 0x03	; 3
    24f8:	0e 94 73 09 	call	0x12e6	; 0x12e6 <DisplayValue>
    lcd_space();
    24fc:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>

    lcd_fix_string(Uf_str);		//"Uf="
    2500:	8e e0       	ldi	r24, 0x0E	; 14
    2502:	91 e0       	ldi	r25, 0x01	; 1
    2504:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
    DisplayValue(trans.uBE[0],-3,'V',3);
    2508:	60 91 4e 01 	lds	r22, 0x014E
    250c:	70 91 4f 01 	lds	r23, 0x014F
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	4d ef       	ldi	r20, 0xFD	; 253
    2516:	26 e5       	ldi	r18, 0x56	; 86
    2518:	7f c1       	rjmp	.+766    	; 0x2818 <main+0x994>
    goto end;
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    251a:	83 30       	cpi	r24, 0x03	; 3
    251c:	09 f0       	breq	.+2      	; 0x2520 <main+0x69c>
    251e:	a3 c0       	rjmp	.+326    	; 0x2666 <main+0x7e2>
    if(PartMode&1) {
    2520:	80 91 06 01 	lds	r24, 0x0106
    2524:	80 ff       	sbrs	r24, 0
    2526:	02 c0       	rjmp	.+4      	; 0x252c <main+0x6a8>
       //N-Kanal
       lcd_data('P');			//P-channel
    2528:	80 e5       	ldi	r24, 0x50	; 80
    252a:	01 c0       	rjmp	.+2      	; 0x252e <main+0x6aa>
    } else {
       lcd_data('N');			//N-channel
    252c:	8e e4       	ldi	r24, 0x4E	; 78
    252e:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
    }
    lcd_data('-');
    2532:	8d e2       	ldi	r24, 0x2D	; 45
    2534:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>

    tmp = PartMode/2;
    2538:	80 91 06 01 	lds	r24, 0x0106
    253c:	86 95       	lsr	r24
    if (tmp == (PART_MODE_N_D_MOS/2)) {
    253e:	82 30       	cpi	r24, 0x02	; 2
    2540:	11 f4       	brne	.+4      	; 0x2546 <main+0x6c2>
       lcd_data('D');			// N-D
    2542:	84 e4       	ldi	r24, 0x44	; 68
    2544:	03 c0       	rjmp	.+6      	; 0x254c <main+0x6c8>
    }
    if (tmp == (PART_MODE_N_E_MOS/2)) {
    2546:	81 30       	cpi	r24, 0x01	; 1
    2548:	21 f4       	brne	.+8      	; 0x2552 <main+0x6ce>
       lcd_data('E');			// N-E
    254a:	85 e4       	ldi	r24, 0x45	; 69
    254c:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
    2550:	05 c0       	rjmp	.+10     	; 0x255c <main+0x6d8>
    }
    if (tmp == (PART_MODE_N_JFET/2)) {
    2552:	83 30       	cpi	r24, 0x03	; 3
    2554:	19 f4       	brne	.+6      	; 0x255c <main+0x6d8>
       lcd_fix_string(jfet_str);	//"JFET"
    2556:	83 ef       	ldi	r24, 0xF3	; 243
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	02 c0       	rjmp	.+4      	; 0x2560 <main+0x6dc>
    } else {
       lcd_fix_string(mosfet_str);	//"-MOS "
    255c:	8e ee       	ldi	r24, 0xEE	; 238
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
    lcd_fix_string(GDS_str);		//"GDS="
    lcd_testpin(trans.b);
    lcd_testpin(trans.c);
    lcd_testpin(trans.e);
#else
    lcd_fix_string(N123_str);		//" 123="
    2564:	88 e0       	ldi	r24, 0x08	; 8
    2566:	91 e0       	ldi	r25, 0x01	; 1
    2568:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
    for (ii=0;ii<3;ii++) {
    256c:	10 92 44 01 	sts	0x0144, r1
    2570:	1e c0       	rjmp	.+60     	; 0x25ae <main+0x72a>
        if (ii == trans.e)  lcd_data('S');	// Output Character in right order
    2572:	90 91 54 01 	lds	r25, 0x0154
    2576:	89 17       	cp	r24, r25
    2578:	19 f4       	brne	.+6      	; 0x2580 <main+0x6fc>
    257a:	83 e5       	ldi	r24, 0x53	; 83
    257c:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
        if (ii == trans.b)  lcd_data('G');
    2580:	90 91 44 01 	lds	r25, 0x0144
    2584:	80 91 52 01 	lds	r24, 0x0152
    2588:	98 17       	cp	r25, r24
    258a:	19 f4       	brne	.+6      	; 0x2592 <main+0x70e>
    258c:	87 e4       	ldi	r24, 0x47	; 71
    258e:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
        if (ii == trans.c)  lcd_data('D');
    2592:	90 91 44 01 	lds	r25, 0x0144
    2596:	80 91 53 01 	lds	r24, 0x0153
    259a:	98 17       	cp	r25, r24
    259c:	19 f4       	brne	.+6      	; 0x25a4 <main+0x720>
    259e:	84 e4       	ldi	r24, 0x44	; 68
    25a0:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
    lcd_testpin(trans.b);
    lcd_testpin(trans.c);
    lcd_testpin(trans.e);
#else
    lcd_fix_string(N123_str);		//" 123="
    for (ii=0;ii<3;ii++) {
    25a4:	80 91 44 01 	lds	r24, 0x0144
    25a8:	8f 5f       	subi	r24, 0xFF	; 255
    25aa:	80 93 44 01 	sts	0x0144, r24
    25ae:	80 91 44 01 	lds	r24, 0x0144
    25b2:	83 30       	cpi	r24, 0x03	; 3
    25b4:	f0 f2       	brcs	.-68     	; 0x2572 <main+0x6ee>
        if (ii == trans.e)  lcd_data('S');	// Output Character in right order
        if (ii == trans.b)  lcd_data('G');
        if (ii == trans.c)  lcd_data('D');
    }
#endif
    if((NumOfDiodes > 0) && (PartMode < PART_MODE_N_D_MOS)) {
    25b6:	80 91 05 01 	lds	r24, 0x0105
    25ba:	88 23       	and	r24, r24
    25bc:	a1 f0       	breq	.+40     	; 0x25e6 <main+0x762>
    25be:	20 91 06 01 	lds	r18, 0x0106
    25c2:	24 30       	cpi	r18, 0x04	; 4
    25c4:	80 f4       	brcc	.+32     	; 0x25e6 <main+0x762>
    25c6:	90 91 53 01 	lds	r25, 0x0153
    25ca:	80 91 54 01 	lds	r24, 0x0154
       //MOSFET with protection diode; only with enhancement-FETs
#ifdef EBC_STYLE
       if (PartMode&1)
#else
       if (((PartMode&1) && (trans.c < trans.e)) || ((!(PartMode&1)) && (trans.c > trans.e)))
    25ce:	20 ff       	sbrs	r18, 0
    25d0:	03 c0       	rjmp	.+6      	; 0x25d8 <main+0x754>
    25d2:	98 17       	cp	r25, r24
    25d4:	18 f0       	brcs	.+6      	; 0x25dc <main+0x758>
    25d6:	04 c0       	rjmp	.+8      	; 0x25e0 <main+0x75c>
    25d8:	89 17       	cp	r24, r25
    25da:	10 f4       	brcc	.+4      	; 0x25e0 <main+0x75c>
#endif
       {
          lcd_data(LCD_CHAR_DIODE1);	//show Diode symbol >|
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	01 c0       	rjmp	.+2      	; 0x25e2 <main+0x75e>
       } else {
          lcd_data(LCD_CHAR_DIODE2);	//show Diode symbol |<
    25e0:	82 e0       	ldi	r24, 0x02	; 2
    25e2:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
       }
    }
    lcd_line2();			//2. Row
    25e6:	80 ec       	ldi	r24, 0xC0	; 192
    25e8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
    if(PartMode < PART_MODE_N_D_MOS) {	//enhancement-MOSFET
    25ec:	80 91 06 01 	lds	r24, 0x0106
    25f0:	84 30       	cpi	r24, 0x04	; 4
    25f2:	d8 f4       	brcc	.+54     	; 0x262a <main+0x7a6>
	//Gate capacity
       lcd_fix_string(GateCap_str);		//"C="
    25f4:	88 ef       	ldi	r24, 0xF8	; 248
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
       ReadCapacity(trans.b,trans.e);	//measure capacity
    25fc:	80 91 52 01 	lds	r24, 0x0152
    2600:	60 91 54 01 	lds	r22, 0x0154
    2604:	0e 94 99 15 	call	0x2b32	; 0x2b32 <ReadCapacity>
       DisplayValue(cap.cval,cap.cpre,'F',3);
    2608:	60 91 58 01 	lds	r22, 0x0158
    260c:	70 91 59 01 	lds	r23, 0x0159
    2610:	80 91 5a 01 	lds	r24, 0x015A
    2614:	90 91 5b 01 	lds	r25, 0x015B
    2618:	40 91 68 01 	lds	r20, 0x0168
    261c:	26 e4       	ldi	r18, 0x46	; 70
    261e:	03 e0       	ldi	r16, 0x03	; 3
    2620:	0e 94 73 09 	call	0x12e6	; 0x12e6 <DisplayValue>
       lcd_fix_string(vt_str);		// "Vt="
    2624:	82 e1       	ldi	r24, 0x12	; 18
    2626:	91 e0       	ldi	r25, 0x01	; 1
    2628:	13 c0       	rjmp	.+38     	; 0x2650 <main+0x7cc>
    } else {
       lcd_data('I');
    262a:	89 e4       	ldi	r24, 0x49	; 73
    262c:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
       lcd_data('=');
    2630:	8d e3       	ldi	r24, 0x3D	; 61
    2632:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
       DisplayValue(trans.uBE[1],-5,'A',2);
    2636:	60 91 50 01 	lds	r22, 0x0150
    263a:	70 91 51 01 	lds	r23, 0x0151
    263e:	80 e0       	ldi	r24, 0x00	; 0
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	4b ef       	ldi	r20, 0xFB	; 251
    2644:	21 e4       	ldi	r18, 0x41	; 65
    2646:	02 e0       	ldi	r16, 0x02	; 2
    2648:	0e 94 73 09 	call	0x12e6	; 0x12e6 <DisplayValue>
       lcd_fix_string(Vgs_str);		// " Vgs="
    264c:	87 e1       	ldi	r24, 0x17	; 23
    264e:	91 e0       	ldi	r25, 0x01	; 1
    2650:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
    }
    //Gate-threshold voltage
    DisplayValue(gthvoltage,-3,'V',3);
    2654:	60 91 56 01 	lds	r22, 0x0156
    2658:	70 91 57 01 	lds	r23, 0x0157
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	4d ef       	ldi	r20, 0xFD	; 253
    2662:	26 e5       	ldi	r18, 0x56	; 86
    2664:	d8 c0       	rjmp	.+432    	; 0x2816 <main+0x992>
    goto end;
    // end (PartFound == PART_FET)
  } else if (PartFound == PART_THYRISTOR) {
    2666:	85 30       	cpi	r24, 0x05	; 5
    2668:	19 f4       	brne	.+6      	; 0x2670 <main+0x7ec>
    lcd_fix_string(Thyristor);		//"Thyristor"
    266a:	84 ea       	ldi	r24, 0xA4	; 164
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	04 c0       	rjmp	.+8      	; 0x2678 <main+0x7f4>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    2670:	84 30       	cpi	r24, 0x04	; 4
    2672:	c1 f4       	brne	.+48     	; 0x26a4 <main+0x820>
    lcd_fix_string(Triac);		//"Triac"
    2674:	8e e9       	ldi	r24, 0x9E	; 158
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
  mess_count = 0;
  goto end2;


gakAusgabe:
  lcd_line2(); //2. row 
    267c:	80 ec       	ldi	r24, 0xC0	; 192
    267e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(GAK);		//"GAK="
    2682:	89 e9       	ldi	r24, 0x99	; 153
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
  lcd_testpin(trans.b);
    268a:	80 91 52 01 	lds	r24, 0x0152
    268e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
  lcd_testpin(trans.c);
    2692:	80 91 53 01 	lds	r24, 0x0153
    2696:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
  lcd_testpin(trans.e);
    269a:	80 91 54 01 	lds	r24, 0x0154
    269e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
    26a2:	31 c1       	rjmp	.+610    	; 0x2906 <main+0xa82>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    lcd_fix_string(Triac);		//"Triac"
    goto gakAusgabe;
  }
  else if(PartFound == PART_RESISTOR) {
    26a4:	86 30       	cpi	r24, 0x06	; 6
    26a6:	09 f0       	breq	.+2      	; 0x26aa <main+0x826>
    26a8:	da c0       	rjmp	.+436    	; 0x285e <main+0x9da>
    if (ResistorsFound == 1) { // single resistor
    26aa:	60 91 55 01 	lds	r22, 0x0155
    26ae:	61 30       	cpi	r22, 0x01	; 1
    26b0:	69 f4       	brne	.+26     	; 0x26cc <main+0x848>
       lcd_testpin(resis[0].rb);  	//Pin-number 1
    26b2:	80 91 21 01 	lds	r24, 0x0121
    26b6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
       lcd_fix_string(Resistor_str);
    26ba:	82 e4       	ldi	r24, 0x42	; 66
    26bc:	91 e0       	ldi	r25, 0x01	; 1
    26be:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
       lcd_testpin(resis[0].ra);		//Pin-number 2
    26c2:	80 91 20 01 	lds	r24, 0x0120
    26c6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
    26ca:	80 c0       	rjmp	.+256    	; 0x27cc <main+0x948>
    } else { // R-Max suchen
       ii = 0;
    26cc:	10 92 44 01 	sts	0x0144, r1
       if (resis[1].rx > resis[0].rx)
    26d0:	20 91 23 01 	lds	r18, 0x0123
    26d4:	30 91 24 01 	lds	r19, 0x0124
    26d8:	40 91 25 01 	lds	r20, 0x0125
    26dc:	50 91 26 01 	lds	r21, 0x0126
    26e0:	80 91 18 01 	lds	r24, 0x0118
    26e4:	90 91 19 01 	lds	r25, 0x0119
    26e8:	a0 91 1a 01 	lds	r26, 0x011A
    26ec:	b0 91 1b 01 	lds	r27, 0x011B
    26f0:	82 17       	cp	r24, r18
    26f2:	93 07       	cpc	r25, r19
    26f4:	a4 07       	cpc	r26, r20
    26f6:	b5 07       	cpc	r27, r21
    26f8:	18 f4       	brcc	.+6      	; 0x2700 <main+0x87c>
          ii = 1;
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	80 93 44 01 	sts	0x0144, r24
       if (ResistorsFound == 2) {
    2700:	62 30       	cpi	r22, 0x02	; 2
    2702:	19 f4       	brne	.+6      	; 0x270a <main+0x886>
          ii = 2;
    2704:	60 93 44 01 	sts	0x0144, r22
    2708:	22 c0       	rjmp	.+68     	; 0x274e <main+0x8ca>
       } else {
          if (resis[2].rx > resis[ii].rx) {
    270a:	20 91 44 01 	lds	r18, 0x0144
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	8b e0       	ldi	r24, 0x0B	; 11
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	28 9f       	mul	r18, r24
    2716:	f0 01       	movw	r30, r0
    2718:	29 9f       	mul	r18, r25
    271a:	f0 0d       	add	r31, r0
    271c:	38 9f       	mul	r19, r24
    271e:	f0 0d       	add	r31, r0
    2720:	11 24       	eor	r1, r1
    2722:	e8 5e       	subi	r30, 0xE8	; 232
    2724:	fe 4f       	sbci	r31, 0xFE	; 254
    2726:	20 91 2e 01 	lds	r18, 0x012E
    272a:	30 91 2f 01 	lds	r19, 0x012F
    272e:	40 91 30 01 	lds	r20, 0x0130
    2732:	50 91 31 01 	lds	r21, 0x0131
    2736:	80 81       	ld	r24, Z
    2738:	91 81       	ldd	r25, Z+1	; 0x01
    273a:	a2 81       	ldd	r26, Z+2	; 0x02
    273c:	b3 81       	ldd	r27, Z+3	; 0x03
    273e:	82 17       	cp	r24, r18
    2740:	93 07       	cpc	r25, r19
    2742:	a4 07       	cpc	r26, r20
    2744:	b5 07       	cpc	r27, r21
    2746:	18 f4       	brcc	.+6      	; 0x274e <main+0x8ca>
             ii = 2;
    2748:	82 e0       	ldi	r24, 0x02	; 2
    274a:	80 93 44 01 	sts	0x0144, r24
          }
       }

       if (ii == 0) {
    274e:	80 91 44 01 	lds	r24, 0x0144
    2752:	88 23       	and	r24, r24
    2754:	89 f4       	brne	.+34     	; 0x2778 <main+0x8f4>
          lcd_data('1');
    2756:	81 e3       	ldi	r24, 0x31	; 49
    2758:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    275c:	82 e4       	ldi	r24, 0x42	; 66
    275e:	91 e0       	ldi	r25, 0x01	; 1
    2760:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
          lcd_data('3');
    2764:	83 e3       	ldi	r24, 0x33	; 51
    2766:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    276a:	82 e4       	ldi	r24, 0x42	; 66
    276c:	91 e0       	ldi	r25, 0x01	; 1
    276e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
          lcd_data('2');
    2772:	82 e3       	ldi	r24, 0x32	; 50
    2774:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
       }
       if (ii == 1) {
    2778:	80 91 44 01 	lds	r24, 0x0144
    277c:	81 30       	cpi	r24, 0x01	; 1
    277e:	89 f4       	brne	.+34     	; 0x27a2 <main+0x91e>
          lcd_data('1');
    2780:	81 e3       	ldi	r24, 0x31	; 49
    2782:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    2786:	82 e4       	ldi	r24, 0x42	; 66
    2788:	91 e0       	ldi	r25, 0x01	; 1
    278a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
          lcd_data('2');
    278e:	82 e3       	ldi	r24, 0x32	; 50
    2790:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    2794:	82 e4       	ldi	r24, 0x42	; 66
    2796:	91 e0       	ldi	r25, 0x01	; 1
    2798:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
          lcd_data('3');
    279c:	83 e3       	ldi	r24, 0x33	; 51
    279e:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
       }
       if (ii == 2) {
    27a2:	80 91 44 01 	lds	r24, 0x0144
    27a6:	82 30       	cpi	r24, 0x02	; 2
    27a8:	89 f4       	brne	.+34     	; 0x27cc <main+0x948>
          lcd_data('2');
    27aa:	82 e3       	ldi	r24, 0x32	; 50
    27ac:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    27b0:	82 e4       	ldi	r24, 0x42	; 66
    27b2:	91 e0       	ldi	r25, 0x01	; 1
    27b4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
          lcd_data('1');
    27b8:	81 e3       	ldi	r24, 0x31	; 49
    27ba:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    27be:	82 e4       	ldi	r24, 0x42	; 66
    27c0:	91 e0       	ldi	r25, 0x01	; 1
    27c2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
          lcd_data('3');
    27c6:	83 e3       	ldi	r24, 0x33	; 51
    27c8:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
       }
    }
    lcd_line2(); //2. row 
    27cc:	80 ec       	ldi	r24, 0xC0	; 192
    27ce:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
    if (ResistorsFound == 1) {
    27d2:	80 91 55 01 	lds	r24, 0x0155
    27d6:	81 30       	cpi	r24, 0x01	; 1
    27d8:	11 f5       	brne	.+68     	; 0x281e <main+0x99a>
       RvalOut(0);
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	0e 94 29 0a 	call	0x1452	; 0x1452 <RvalOut>
#if FLASHEND > 0x1fff
       if (resis[0].lx != 0) {
    27e0:	80 91 1c 01 	lds	r24, 0x011C
    27e4:	90 91 1d 01 	lds	r25, 0x011D
    27e8:	a0 91 1e 01 	lds	r26, 0x011E
    27ec:	b0 91 1f 01 	lds	r27, 0x011F
    27f0:	00 97       	sbiw	r24, 0x00	; 0
    27f2:	a1 05       	cpc	r26, r1
    27f4:	b1 05       	cpc	r27, r1
    27f6:	09 f4       	brne	.+2      	; 0x27fa <main+0x976>
    27f8:	86 c0       	rjmp	.+268    	; 0x2906 <main+0xa82>
	  // resistor have also Inductance
          lcd_fix_string(Lis_str);	// "L="
    27fa:	82 e3       	ldi	r24, 0x32	; 50
    27fc:	91 e0       	ldi	r25, 0x01	; 1
    27fe:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
          DisplayValue(resis[0].lx,-5,'H',3);	// output inductance
    2802:	60 91 1c 01 	lds	r22, 0x011C
    2806:	70 91 1d 01 	lds	r23, 0x011D
    280a:	80 91 1e 01 	lds	r24, 0x011E
    280e:	90 91 1f 01 	lds	r25, 0x011F
    2812:	4b ef       	ldi	r20, 0xFB	; 251
    2814:	28 e4       	ldi	r18, 0x48	; 72
    2816:	03 e0       	ldi	r16, 0x03	; 3
    2818:	0e 94 73 09 	call	0x12e6	; 0x12e6 <DisplayValue>
    281c:	74 c0       	rjmp	.+232    	; 0x2906 <main+0xa82>
       }
#endif
    } else {
       // output resistor values in right order
       if (ii == 0) {
    281e:	80 91 44 01 	lds	r24, 0x0144
    2822:	88 23       	and	r24, r24
    2824:	31 f4       	brne	.+12     	; 0x2832 <main+0x9ae>
          RvalOut(1);
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	0e 94 29 0a 	call	0x1452	; 0x1452 <RvalOut>
          RvalOut(2);
    282c:	82 e0       	ldi	r24, 0x02	; 2
    282e:	0e 94 29 0a 	call	0x1452	; 0x1452 <RvalOut>
       }
       if (ii == 1) {
    2832:	80 91 44 01 	lds	r24, 0x0144
    2836:	81 30       	cpi	r24, 0x01	; 1
    2838:	31 f4       	brne	.+12     	; 0x2846 <main+0x9c2>
          RvalOut(0);
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	0e 94 29 0a 	call	0x1452	; 0x1452 <RvalOut>
          RvalOut(2);
    2840:	82 e0       	ldi	r24, 0x02	; 2
    2842:	0e 94 29 0a 	call	0x1452	; 0x1452 <RvalOut>
       }
       if (ii == 2) {
    2846:	80 91 44 01 	lds	r24, 0x0144
    284a:	82 30       	cpi	r24, 0x02	; 2
    284c:	09 f0       	breq	.+2      	; 0x2850 <main+0x9cc>
    284e:	5b c0       	rjmp	.+182    	; 0x2906 <main+0xa82>
          RvalOut(0);
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	0e 94 29 0a 	call	0x1452	; 0x1452 <RvalOut>
          RvalOut(1);
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	0e 94 29 0a 	call	0x1452	; 0x1452 <RvalOut>
    285c:	54 c0       	rjmp	.+168    	; 0x2906 <main+0xa82>
    goto end;

  } // end (PartFound == PART_RESISTOR)

//capacity measurement is wanted
  else if(PartFound == PART_CAPACITOR) {
    285e:	87 30       	cpi	r24, 0x07	; 7
    2860:	01 f5       	brne	.+64     	; 0x28a2 <main+0xa1e>
//     lcd_fix_string(Capacitor);
     lcd_testpin(cap.ca);		//Pin number 1
    2862:	80 91 66 01 	lds	r24, 0x0166
    2866:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
     lcd_fix_string(CapZeich);		// capacitor sign
    286a:	8d e1       	ldi	r24, 0x1D	; 29
    286c:	91 e0       	ldi	r25, 0x01	; 1
    286e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
//#if FLASHEND > 0x1fff
//     lcd_fix_string(Resistor_str);	// -[=]-
//#endif
     lcd_testpin(cap.cb);		//Pin number 2
    2872:	80 91 67 01 	lds	r24, 0x0167
    2876:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
     lcd_line2(); 			//2. row 
    287a:	80 ec       	ldi	r24, 0xC0	; 192
    287c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     DisplayValue(cap.cval_max,cap.cpre_max,'F',4);
    2880:	60 91 5c 01 	lds	r22, 0x015C
    2884:	70 91 5d 01 	lds	r23, 0x015D
    2888:	80 91 5e 01 	lds	r24, 0x015E
    288c:	90 91 5f 01 	lds	r25, 0x015F
    2890:	40 91 69 01 	lds	r20, 0x0169
    2894:	26 e4       	ldi	r18, 0x46	; 70
    2896:	04 e0       	ldi	r16, 0x04	; 4
    2898:	0e 94 73 09 	call	0x12e6	; 0x12e6 <DisplayValue>
#if FLASHEND > 0x1fff
     GetESR();				// get ESR of capacitor
    289c:	0e 94 0e 1b 	call	0x361c	; 0x361c <GetESR>
#endif
     goto end;
    28a0:	32 c0       	rjmp	.+100    	; 0x2906 <main+0xa82>
  }
  if(NumOfDiodes == 0) { //no diodes are found
    28a2:	80 91 05 01 	lds	r24, 0x0105
    28a6:	88 23       	and	r24, r24
    28a8:	71 f4       	brne	.+28     	; 0x28c6 <main+0xa42>
     lcd_fix_string(TestFailed1); 	//"Kein,unbek. oder"
    28aa:	87 eb       	ldi	r24, 0xB7	; 183
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
     lcd_line2(); //2. row 
    28b2:	80 ec       	ldi	r24, 0xC0	; 192
    28b4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     lcd_fix_string(TestFailed2); 	//"defektes "
    28b8:	83 e8       	ldi	r24, 0x83	; 131
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
     lcd_fix_string(Bauteil);		//"Bauteil"
    28c0:	8c e8       	ldi	r24, 0x8C	; 140
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	16 c0       	rjmp	.+44     	; 0x28f2 <main+0xa6e>
  } else {
     lcd_fix_string(Bauteil);		//"Bauteil"
    28c6:	8c e8       	ldi	r24, 0x8C	; 140
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
     lcd_fix_string(Unknown); 		//" unbek."
    28ce:	8e ea       	ldi	r24, 0xAE	; 174
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
     lcd_line2(); //2. row 
    28d6:	80 ec       	ldi	r24, 0xC0	; 192
    28d8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     lcd_fix_string(OrBroken); 		//"oder defekt "
    28dc:	87 ec       	ldi	r24, 0xC7	; 199
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
     lcd_data(NumOfDiodes + '0');
    28e4:	80 91 05 01 	lds	r24, 0x0105
    28e8:	80 5d       	subi	r24, 0xD0	; 208
    28ea:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
     lcd_fix_string(AnKat);		//"->|-"
    28ee:	85 e3       	ldi	r24, 0x35	; 53
    28f0:	91 e0       	ldi	r25, 0x01	; 1
    28f2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
  }
  empty_count++;
    28f6:	80 91 43 01 	lds	r24, 0x0143
    28fa:	8f 5f       	subi	r24, 0xFF	; 255
    28fc:	80 93 43 01 	sts	0x0143, r24
  mess_count = 0;
    2900:	10 92 0b 01 	sts	0x010B, r1
  goto end2;
    2904:	07 c0       	rjmp	.+14     	; 0x2914 <main+0xa90>
  lcd_testpin(trans.b);
  lcd_testpin(trans.c);
  lcd_testpin(trans.e);
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 end:
  empty_count = 0;		// reset counter, if part is found
    2906:	10 92 43 01 	sts	0x0143, r1
  mess_count++;			// count measurements
    290a:	80 91 0b 01 	lds	r24, 0x010B
    290e:	8f 5f       	subi	r24, 0xFF	; 255
    2910:	80 93 0b 01 	sts	0x010B, r24

 end2:
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
    2914:	4f 9b       	sbis	0x09, 7	; 9
    2916:	fe cf       	rjmp	.-4      	; 0x2914 <main+0xa90>
  wait_about200ms();
    2918:	88 e2       	ldi	r24, 0x28	; 40
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	0e 94 6f 0a 	call	0x14de	; 0x14de <sleep_5ms>
// wait 14 seconds or 5 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage+=5) {
    2920:	10 92 57 01 	sts	0x0157, r1
    2924:	10 92 56 01 	sts	0x0156, r1
    2928:	10 c0       	rjmp	.+32     	; 0x294a <main+0xac6>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    292a:	4f 9b       	sbis	0x09, 7	; 9
    292c:	06 cb       	rjmp	.-2548   	; 0x1f3a <main+0xb6>
        // If the key is pressed again... 
        // goto start of measurement 
        goto start;
     }
     wdt_reset();
    292e:	a8 95       	wdr
     wait_about10ms();
    2930:	82 e0       	ldi	r24, 0x02	; 2
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	0e 94 6f 0a 	call	0x14de	; 0x14de <sleep_5ms>

 end2:
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
  wait_about200ms();
// wait 14 seconds or 5 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage+=5) {
    2938:	80 91 56 01 	lds	r24, 0x0156
    293c:	90 91 57 01 	lds	r25, 0x0157
    2940:	05 96       	adiw	r24, 0x05	; 5
    2942:	90 93 57 01 	sts	0x0157, r25
    2946:	80 93 56 01 	sts	0x0156, r24
    294a:	80 91 56 01 	lds	r24, 0x0156
    294e:	90 91 57 01 	lds	r25, 0x0157
    2952:	26 e3       	ldi	r18, 0x36	; 54
    2954:	80 3b       	cpi	r24, 0xB0	; 176
    2956:	92 07       	cpc	r25, r18
    2958:	40 f3       	brcs	.-48     	; 0x292a <main+0xaa6>
  if ((empty_count < POWER_OFF) && (mess_count < POWER2_OFF)) {
     goto start;			// repeat measurement POWER_OFF times
  }
 #endif
  // only one Measurement requested, shut off
  wdt_disable();			//Watchdog off
    295a:	88 e1       	ldi	r24, 0x18	; 24
    295c:	0f b6       	in	r0, 0x3f	; 63
    295e:	f8 94       	cli
    2960:	80 93 60 00 	sts	0x0060, r24
    2964:	10 92 60 00 	sts	0x0060, r1
    2968:	0f be       	out	0x3f, r0	; 63
  ON_PORT &= ~(1<<ON_PIN);		//switch off power
    296a:	5e 98       	cbi	0x0b, 6	; 11
  ON_DDR = (1<<ON_PIN);			//switch to GND
    296c:	80 e4       	ldi	r24, 0x40	; 64
    296e:	8a b9       	out	0x0a, r24	; 10
  //never ending loop 
  while(1) {
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    2970:	4f 99       	sbic	0x09, 7	; 9
    2972:	fe cf       	rjmp	.-4      	; 0x2970 <main+0xaec>
    2974:	e2 ca       	rjmp	.-2620   	; 0x1f3a <main+0xb6>
  }
#else
  goto start;	// POWER_OFF not selected, repeat measurement
#endif
  return 0;
}   // end main
    2976:	80 e0       	ldi	r24, 0x00	; 0
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	df 91       	pop	r29
    297c:	cf 91       	pop	r28
    297e:	1f 91       	pop	r17
    2980:	0f 91       	pop	r16
    2982:	08 95       	ret

00002984 <uart_putc>:
    2984:	2f 93       	push	r18
    2986:	5f b7       	in	r21, 0x3f	; 63
    2988:	2f 93       	push	r18
    298a:	2a e0       	ldi	r18, 0x0A	; 10
    298c:	80 95       	com	r24
    298e:	08 94       	sec

00002990 <putchar0>:
    2990:	10 f4       	brcc	.+4      	; 0x2996 <putchar1>
    2992:	43 98       	cbi	0x08, 3	; 8
    2994:	02 c0       	rjmp	.+4      	; 0x299a <putchar2>

00002996 <putchar1>:
    2996:	43 9a       	sbi	0x08, 3	; 8
	...

0000299a <putchar2>:
    299a:	08 d0       	rcall	.+16     	; 0x29ac <UART_delay>
    299c:	07 d0       	rcall	.+14     	; 0x29ac <UART_delay>
    299e:	86 95       	lsr	r24
    29a0:	2a 95       	dec	r18
    29a2:	b1 f7       	brne	.-20     	; 0x2990 <putchar0>
    29a4:	2f 91       	pop	r18
    29a6:	5f bf       	out	0x3f, r21	; 63
    29a8:	2f 91       	pop	r18
    29aa:	08 95       	ret

000029ac <UART_delay>:
    29ac:	5f 93       	push	r21
    29ae:	5f b7       	in	r21, 0x3f	; 63
    29b0:	5f 93       	push	r21
    29b2:	00 00       	nop
    29b4:	5e e3       	ldi	r21, 0x3E	; 62

000029b6 <UART_delay1>:
    29b6:	5a 95       	dec	r21
    29b8:	f1 f7       	brne	.-4      	; 0x29b6 <UART_delay1>
    29ba:	00 00       	nop
    29bc:	5f 91       	pop	r21
    29be:	5f bf       	out	0x3f, r21	; 63
    29c0:	5f 91       	pop	r21
    29c2:	08 95       	ret

000029c4 <wait5s>:
    29c4:	03 d0       	rcall	.+6      	; 0x29cc <wait1000ms>

000029c6 <wait4s>:
    29c6:	02 d0       	rcall	.+4      	; 0x29cc <wait1000ms>

000029c8 <wait3s>:
    29c8:	01 d0       	rcall	.+2      	; 0x29cc <wait1000ms>

000029ca <wait2s>:
    29ca:	00 d0       	rcall	.+0      	; 0x29cc <wait1000ms>

000029cc <wait1000ms>:
    29cc:	00 d0       	rcall	.+0      	; 0x29ce <wait500ms>

000029ce <wait500ms>:
    29ce:	03 d0       	rcall	.+6      	; 0x29d6 <wait100ms>

000029d0 <wait400ms>:
    29d0:	02 d0       	rcall	.+4      	; 0x29d6 <wait100ms>

000029d2 <wait300ms>:
    29d2:	01 d0       	rcall	.+2      	; 0x29d6 <wait100ms>

000029d4 <wait200ms>:
    29d4:	00 d0       	rcall	.+0      	; 0x29d6 <wait100ms>

000029d6 <wait100ms>:
    29d6:	a8 95       	wdr
    29d8:	00 d0       	rcall	.+0      	; 0x29da <wait50ms>

000029da <wait50ms>:
    29da:	03 d0       	rcall	.+6      	; 0x29e2 <wait10ms>

000029dc <wait40ms>:
    29dc:	02 d0       	rcall	.+4      	; 0x29e2 <wait10ms>

000029de <wait30ms>:
    29de:	01 d0       	rcall	.+2      	; 0x29e2 <wait10ms>

000029e0 <wait20ms>:
    29e0:	00 d0       	rcall	.+0      	; 0x29e2 <wait10ms>

000029e2 <wait10ms>:
    29e2:	00 d0       	rcall	.+0      	; 0x29e4 <wait5ms>

000029e4 <wait5ms>:
    29e4:	03 d0       	rcall	.+6      	; 0x29ec <wait1ms>

000029e6 <wait4ms>:
    29e6:	02 d0       	rcall	.+4      	; 0x29ec <wait1ms>

000029e8 <wait3ms>:
    29e8:	01 d0       	rcall	.+2      	; 0x29ec <wait1ms>

000029ea <wait2ms>:
    29ea:	00 d0       	rcall	.+0      	; 0x29ec <wait1ms>

000029ec <wait1ms>:
    29ec:	00 d0       	rcall	.+0      	; 0x29ee <wait500us>

000029ee <wait500us>:
    29ee:	03 d0       	rcall	.+6      	; 0x29f6 <wait100us>

000029f0 <wait400us>:
    29f0:	02 d0       	rcall	.+4      	; 0x29f6 <wait100us>

000029f2 <wait300us>:
    29f2:	01 d0       	rcall	.+2      	; 0x29f6 <wait100us>

000029f4 <wait200us>:
    29f4:	00 d0       	rcall	.+0      	; 0x29f6 <wait100us>

000029f6 <wait100us>:
    29f6:	00 d0       	rcall	.+0      	; 0x29f8 <wait50us>

000029f8 <wait50us>:
    29f8:	03 d0       	rcall	.+6      	; 0x2a00 <wait10us>

000029fa <wait40us>:
    29fa:	02 d0       	rcall	.+4      	; 0x2a00 <wait10us>

000029fc <wait30us>:
    29fc:	01 d0       	rcall	.+2      	; 0x2a00 <wait10us>

000029fe <wait20us>:
    29fe:	00 d0       	rcall	.+0      	; 0x2a00 <wait10us>

00002a00 <wait10us>:
    2a00:	00 d0       	rcall	.+0      	; 0x2a02 <wait5us>

00002a02 <wait5us>:
    2a02:	03 d0       	rcall	.+6      	; 0x2a0a <wait1us>

00002a04 <wait4us>:
    2a04:	02 d0       	rcall	.+4      	; 0x2a0a <wait1us>

00002a06 <wait3us>:
    2a06:	01 d0       	rcall	.+2      	; 0x2a0a <wait1us>

00002a08 <wait2us>:
    2a08:	00 d0       	rcall	.+0      	; 0x2a0a <wait1us>

00002a0a <wait1us>:
    2a0a:	00 00       	nop
    2a0c:	08 95       	ret

00002a0e <getRLmultip>:
  R_DDR = 0;			// switch all resistor ports to input
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
  return;
 } // end ReadCapacity()

unsigned int getRLmultip(unsigned int cvolt) {
    2a0e:	ff 92       	push	r15
    2a10:	0f 93       	push	r16
    2a12:	1f 93       	push	r17
    2a14:	cf 93       	push	r28
    2a16:	df 93       	push	r29

  unsigned int uvolt;
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;
  if (cvolt >= RL_Tab_Beginn) {
    2a18:	21 e0       	ldi	r18, 0x01	; 1
    2a1a:	8c 32       	cpi	r24, 0x2C	; 44
    2a1c:	92 07       	cpc	r25, r18
    2a1e:	18 f0       	brcs	.+6      	; 0x2a26 <getRLmultip+0x18>
     uvolt = cvolt - RL_Tab_Beginn;
    2a20:	8c 52       	subi	r24, 0x2C	; 44
    2a22:	91 40       	sbci	r25, 0x01	; 1
    2a24:	02 c0       	rjmp	.+4      	; 0x2a2a <getRLmultip+0x1c>
  } else {
     uvolt = 0;			// limit to begin of table
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = uvolt / RL_Tab_Abstand;
    2a2a:	69 e1       	ldi	r22, 0x19	; 25
    2a2c:	70 e0       	ldi	r23, 0x00	; 0
    2a2e:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <__udivmodhi4>
  tabres = uvolt % RL_Tab_Abstand;
    2a32:	f8 2e       	mov	r15, r24
  tabres = RL_Tab_Abstand - tabres;
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
    2a34:	6d 32       	cpi	r22, 0x2D	; 45
    2a36:	08 f0       	brcs	.+2      	; 0x2a3a <getRLmultip+0x2c>
    2a38:	6c e2       	ldi	r22, 0x2C	; 44
    2a3a:	c6 2f       	mov	r28, r22
    2a3c:	d0 e0       	ldi	r29, 0x00	; 0
    2a3e:	ce 01       	movw	r24, r28
    2a40:	88 0f       	add	r24, r24
    2a42:	99 1f       	adc	r25, r25
    2a44:	80 50       	subi	r24, 0x00	; 0
    2a46:	90 40       	sbci	r25, 0x00	; 0
    2a48:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <__eerd_word_m168>
    2a4c:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RLtab[tabind+1]);
    2a4e:	ce 01       	movw	r24, r28
    2a50:	88 0f       	add	r24, r24
    2a52:	99 1f       	adc	r25, r25
    2a54:	8e 5f       	subi	r24, 0xFE	; 254
    2a56:	9f 4f       	sbci	r25, 0xFF	; 255
    2a58:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <__eerd_word_m168>
    2a5c:	9c 01       	movw	r18, r24
  } else {
     uvolt = 0;			// limit to begin of table
  }
  tabind = uvolt / RL_Tab_Abstand;
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
    2a5e:	49 e1       	ldi	r20, 0x19	; 25
    2a60:	4f 19       	sub	r20, r15
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
    2a62:	50 e0       	ldi	r21, 0x00	; 0
    2a64:	08 1b       	sub	r16, r24
    2a66:	19 0b       	sbc	r17, r25
    2a68:	40 9f       	mul	r20, r16
    2a6a:	c0 01       	movw	r24, r0
    2a6c:	41 9f       	mul	r20, r17
    2a6e:	90 0d       	add	r25, r0
    2a70:	50 9f       	mul	r21, r16
    2a72:	90 0d       	add	r25, r0
    2a74:	11 24       	eor	r1, r1
    2a76:	0c 96       	adiw	r24, 0x0c	; 12
    2a78:	69 e1       	ldi	r22, 0x19	; 25
    2a7a:	70 e0       	ldi	r23, 0x00	; 0
    2a7c:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <__udivmodhi4>
    2a80:	62 0f       	add	r22, r18
    2a82:	73 1f       	adc	r23, r19
}
    2a84:	cb 01       	movw	r24, r22
    2a86:	df 91       	pop	r29
    2a88:	cf 91       	pop	r28
    2a8a:	1f 91       	pop	r17
    2a8c:	0f 91       	pop	r16
    2a8e:	ff 90       	pop	r15
    2a90:	08 95       	ret

00002a92 <Scale_C_with_vcc>:

void Scale_C_with_vcc(void) {
    2a92:	8f 92       	push	r8
    2a94:	9f 92       	push	r9
    2a96:	af 92       	push	r10
    2a98:	bf 92       	push	r11
    2a9a:	df 92       	push	r13
    2a9c:	ef 92       	push	r14
    2a9e:	ff 92       	push	r15
    2aa0:	0f 93       	push	r16
    2aa2:	1f 93       	push	r17
    2aa4:	e0 90 58 01 	lds	r14, 0x0158
    2aa8:	f0 90 59 01 	lds	r15, 0x0159
    2aac:	00 91 5a 01 	lds	r16, 0x015A
    2ab0:	10 91 5b 01 	lds	r17, 0x015B
    2ab4:	d0 90 68 01 	lds	r13, 0x0168
   while (cap.cval > 100000) {
      cap.cval /= 10;
    2ab8:	4a e0       	ldi	r20, 0x0A	; 10
    2aba:	84 2e       	mov	r8, r20
    2abc:	91 2c       	mov	r9, r1
    2abe:	a1 2c       	mov	r10, r1
    2ac0:	b1 2c       	mov	r11, r1
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    2ac2:	08 c0       	rjmp	.+16     	; 0x2ad4 <Scale_C_with_vcc+0x42>
      cap.cval /= 10;
    2ac4:	c8 01       	movw	r24, r16
    2ac6:	b7 01       	movw	r22, r14
    2ac8:	a5 01       	movw	r20, r10
    2aca:	94 01       	movw	r18, r8
    2acc:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
    2ad0:	79 01       	movw	r14, r18
    2ad2:	8a 01       	movw	r16, r20
    2ad4:	8d 2d       	mov	r24, r13
    2ad6:	d3 94       	inc	r13
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    2ad8:	91 ea       	ldi	r25, 0xA1	; 161
    2ada:	e9 16       	cp	r14, r25
    2adc:	96 e8       	ldi	r25, 0x86	; 134
    2ade:	f9 06       	cpc	r15, r25
    2ae0:	91 e0       	ldi	r25, 0x01	; 1
    2ae2:	09 07       	cpc	r16, r25
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	19 07       	cpc	r17, r25
    2ae8:	68 f7       	brcc	.-38     	; 0x2ac4 <Scale_C_with_vcc+0x32>
    2aea:	80 93 68 01 	sts	0x0168, r24
      cap.cval /= 10;
      cap.cpre ++;			// prevent overflow
   }
   cap.cval *= ADCconfig.U_AVCC;	// scale with measured voltage
    2aee:	20 91 3d 01 	lds	r18, 0x013D
    2af2:	30 91 3e 01 	lds	r19, 0x013E
    2af6:	40 e0       	ldi	r20, 0x00	; 0
    2af8:	50 e0       	ldi	r21, 0x00	; 0
    2afa:	c8 01       	movw	r24, r16
    2afc:	b7 01       	movw	r22, r14
    2afe:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
    2b02:	28 e8       	ldi	r18, 0x88	; 136
    2b04:	33 e1       	ldi	r19, 0x13	; 19
    2b06:	40 e0       	ldi	r20, 0x00	; 0
    2b08:	50 e0       	ldi	r21, 0x00	; 0
    2b0a:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
    2b0e:	20 93 58 01 	sts	0x0158, r18
    2b12:	30 93 59 01 	sts	0x0159, r19
    2b16:	40 93 5a 01 	sts	0x015A, r20
    2b1a:	50 93 5b 01 	sts	0x015B, r21
}
    2b1e:	1f 91       	pop	r17
    2b20:	0f 91       	pop	r16
    2b22:	ff 90       	pop	r15
    2b24:	ef 90       	pop	r14
    2b26:	df 90       	pop	r13
    2b28:	bf 90       	pop	r11
    2b2a:	af 90       	pop	r10
    2b2c:	9f 90       	pop	r9
    2b2e:	8f 90       	pop	r8
    2b30:	08 95       	ret

00002b32 <ReadCapacity>:
#include "config.h"
#include "Transistortester.h"


//=================================================================
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    2b32:	af 92       	push	r10
    2b34:	bf 92       	push	r11
    2b36:	cf 92       	push	r12
    2b38:	df 92       	push	r13
    2b3a:	ef 92       	push	r14
    2b3c:	ff 92       	push	r15
    2b3e:	0f 93       	push	r16
    2b40:	1f 93       	push	r17
    2b42:	cf 93       	push	r28
    2b44:	df 93       	push	r29
    2b46:	18 2f       	mov	r17, r24
    2b48:	06 2f       	mov	r16, r22
  uint8_t HiPinR_L, HiPinR_H;
  uint8_t LoADC;
  uint8_t ii;

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
    2b4a:	88 0f       	add	r24, r24
    2b4c:	81 0f       	add	r24, r17
    2b4e:	86 0f       	add	r24, r22
    2b50:	81 50       	subi	r24, 0x01	; 1
    2b52:	80 93 45 01 	sts	0x0145, r24
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2b56:	86 2f       	mov	r24, r22
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	88 55       	subi	r24, 0x58	; 88
    2b5c:	9e 4f       	sbci	r25, 0xFE	; 254
    2b5e:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <__eerd_byte_m168>
    2b62:	b8 2e       	mov	r11, r24
  HiPinR_L = MEM_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
    2b64:	21 2f       	mov	r18, r17
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	c9 01       	movw	r24, r18
    2b6a:	8b 55       	subi	r24, 0x5B	; 91
    2b6c:	9e 4f       	sbci	r25, 0xFE	; 254
    2b6e:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <__eerd_byte_m168>
    2b72:	a8 2e       	mov	r10, r24
//     DisplayValue(cap.cval,cap.cpre,'F',3);
//     wait_about2s();
//#endif
//     return;	//We have found a capacitor already
//  }
  if(PartFound == PART_RESISTOR) {
    2b74:	80 91 07 01 	lds	r24, 0x0107
    2b78:	86 30       	cpi	r24, 0x06	; 6
    2b7a:	09 f4       	brne	.+2      	; 0x2b7e <ReadCapacity+0x4c>
    2b7c:	3a c2       	rjmp	.+1140   	; 0x2ff2 <ReadCapacity+0x4c0>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    2b7e:	90 91 05 01 	lds	r25, 0x0105
    2b82:	ec e6       	ldi	r30, 0x6C	; 108
    2b84:	f1 e0       	ldi	r31, 0x01	; 1
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	0f c0       	rjmp	.+30     	; 0x2ba8 <ReadCapacity+0x76>
     if ((diodes[ii].Cathode == LowPin) && (diodes[ii].Anode == HighPin) && (diodes[ii].Voltage < 1500)) {
    2b8a:	21 81       	ldd	r18, Z+1	; 0x01
    2b8c:	20 17       	cp	r18, r16
    2b8e:	51 f4       	brne	.+20     	; 0x2ba4 <ReadCapacity+0x72>
    2b90:	20 81       	ld	r18, Z
    2b92:	21 17       	cp	r18, r17
    2b94:	39 f4       	brne	.+14     	; 0x2ba4 <ReadCapacity+0x72>
    2b96:	22 81       	ldd	r18, Z+2	; 0x02
    2b98:	33 81       	ldd	r19, Z+3	; 0x03
    2b9a:	45 e0       	ldi	r20, 0x05	; 5
    2b9c:	2c 3d       	cpi	r18, 0xDC	; 220
    2b9e:	34 07       	cpc	r19, r20
    2ba0:	08 f4       	brcc	.+2      	; 0x2ba4 <ReadCapacity+0x72>
    2ba2:	27 c2       	rjmp	.+1102   	; 0x2ff2 <ReadCapacity+0x4c0>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    2ba4:	8f 5f       	subi	r24, 0xFF	; 255
    2ba6:	34 96       	adiw	r30, 0x04	; 4
    2ba8:	89 17       	cp	r24, r25
    2baa:	78 f3       	brcs	.-34     	; 0x2b8a <ReadCapacity+0x58>

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2bac:	88 e0       	ldi	r24, 0x08	; 8
    2bae:	b8 2a       	or	r11, r24
        return;
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
    2bb0:	10 92 65 01 	sts	0x0165, r1
    2bb4:	10 92 64 01 	sts	0x0164, r1
#endif
  cap.cval = 0;				// set capacity value to zero
    2bb8:	10 92 58 01 	sts	0x0158, r1
    2bbc:	10 92 59 01 	sts	0x0159, r1
    2bc0:	10 92 5a 01 	sts	0x015A, r1
    2bc4:	10 92 5b 01 	sts	0x015B, r1
  cap.cpre = -12;			//default unit is pF
    2bc8:	84 ef       	ldi	r24, 0xF4	; 244
    2bca:	80 93 68 01 	sts	0x0168, r24
  EntladePins();			// discharge capacitor
    2bce:	0e 94 80 08 	call	0x1100	; 0x1100 <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    2bd2:	88 e0       	ldi	r24, 0x08	; 8
    2bd4:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    2bd6:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    2bd8:	b7 b8       	out	0x07, r11	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    2bda:	a4 b8       	out	0x04, r10	; 4
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    2bdc:	81 2f       	mov	r24, r17
    2bde:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
    2be2:	6c 01       	movw	r12, r24
// ******** should adcv[0] be measured without current???
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2be4:	c0 e0       	ldi	r28, 0x00	; 0
    2be6:	d0 e0       	ldi	r29, 0x00	; 0
     ChargePin10ms(HiPinR_L,1);		//HighPin with R_L 10ms to VCC ,then currentless
    2be8:	8a 2d       	mov	r24, r10
    2bea:	61 e0       	ldi	r22, 0x01	; 1
    2bec:	0e 94 a7 01 	call	0x34e	; 0x34e <ChargePin10ms>
     wait500us();			//wait a little time
    2bf0:	0e 94 f7 14 	call	0x29ee	; 0x29ee <wait500us>
     wdt_reset();
    2bf4:	a8 95       	wdr
     // read voltage without current, is already charged enough?
     adcv[2] = ReadADC(HighPin);
    2bf6:	81 2f       	mov	r24, r17
    2bf8:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
    2bfc:	7c 01       	movw	r14, r24
     if (adcv[2] > adcv[0]) {
    2bfe:	c8 16       	cp	r12, r24
    2c00:	d9 06       	cpc	r13, r25
    2c02:	18 f4       	brcc	.+6      	; 0x2c0a <ReadCapacity+0xd8>
        adcv[2] -= adcv[0];		//difference to beginning voltage
    2c04:	ec 18       	sub	r14, r12
    2c06:	fd 08       	sbc	r15, r13
    2c08:	02 c0       	rjmp	.+4      	; 0x2c0e <ReadCapacity+0xdc>
     } else {
        adcv[2] = 0;			// voltage is lower or same as beginning voltage
    2c0a:	ee 24       	eor	r14, r14
    2c0c:	ff 24       	eor	r15, r15
     }
     if ((ovcnt16 == 126) && (adcv[2] < 75)) {
    2c0e:	ce 37       	cpi	r28, 0x7E	; 126
    2c10:	d1 05       	cpc	r29, r1
    2c12:	29 f4       	brne	.+10     	; 0x2c1e <ReadCapacity+0xec>
    2c14:	9b e4       	ldi	r25, 0x4B	; 75
    2c16:	e9 16       	cp	r14, r25
    2c18:	f1 04       	cpc	r15, r1
    2c1a:	08 f4       	brcc	.+2      	; 0x2c1e <ReadCapacity+0xec>
    2c1c:	e5 c1       	rjmp	.+970    	; 0x2fe8 <ReadCapacity+0x4b6>
        // 300mV can not be reached well-timed 
        break;		// don't try to load any more
     }
     if (adcv[2] > 300) {
    2c1e:	2d e2       	ldi	r18, 0x2D	; 45
    2c20:	e2 16       	cp	r14, r18
    2c22:	21 e0       	ldi	r18, 0x01	; 1
    2c24:	f2 06       	cpc	r15, r18
    2c26:	18 f0       	brcs	.+6      	; 0x2c2e <ReadCapacity+0xfc>
#if DebugOut == 10
  DisplayValue(ovcnt16,0,' ',4);
  DisplayValue(adcv[2],-3,'V',4);
#endif
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    2c28:	20 97       	sbiw	r28, 0x00	; 0
    2c2a:	39 f0       	breq	.+14     	; 0x2c3a <ReadCapacity+0x108>
    2c2c:	0c c0       	rjmp	.+24     	; 0x2c46 <ReadCapacity+0x114>
  R_PORT = 0;				// switch R-Port to GND
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2c2e:	21 96       	adiw	r28, 0x01	; 1
    2c30:	31 e0       	ldi	r19, 0x01	; 1
    2c32:	c4 3f       	cpi	r28, 0xF4	; 244
    2c34:	d3 07       	cpc	r29, r19
    2c36:	c1 f6       	brne	.-80     	; 0x2be8 <ReadCapacity+0xb6>
    2c38:	d7 c1       	rjmp	.+942    	; 0x2fe8 <ReadCapacity+0x4b6>
#if DebugOut == 10
  DisplayValue(ovcnt16,0,' ',4);
  DisplayValue(adcv[2],-3,'V',4);
#endif
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    2c3a:	45 e1       	ldi	r20, 0x15	; 21
    2c3c:	e4 16       	cp	r14, r20
    2c3e:	45 e0       	ldi	r20, 0x05	; 5
    2c40:	f4 06       	cpc	r15, r20
    2c42:	08 f0       	brcs	.+2      	; 0x2c46 <ReadCapacity+0x114>
    2c44:	6d c0       	rjmp	.+218    	; 0x2d20 <ReadCapacity+0x1ee>
     goto messe_mit_rh;		// Voltage of more than 1300mV is reached in one pulse, to fast loaded
  }
  // Capacity is more than about 50µF
  cap.cpre = -9;		// switch units to nF 
    2c46:	87 ef       	ldi	r24, 0xF7	; 247
    2c48:	80 93 68 01 	sts	0x0168, r24
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the same time which is required for loading
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2c4c:	aa 24       	eor	r10, r10
    2c4e:	bb 24       	eor	r11, r11
     wait5ms();
    2c50:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <wait5ms>
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
    2c54:	81 2f       	mov	r24, r17
    2c56:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
     wdt_reset();
    2c5a:	a8 95       	wdr
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the same time which is required for loading
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2c5c:	08 94       	sec
    2c5e:	a1 1c       	adc	r10, r1
    2c60:	b1 1c       	adc	r11, r1
    2c62:	ca 15       	cp	r28, r10
    2c64:	db 05       	cpc	r29, r11
    2c66:	a0 f7       	brcc	.-24     	; 0x2c50 <ReadCapacity+0x11e>
     wait5ms();
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
    2c68:	c8 16       	cp	r12, r24
    2c6a:	d9 06       	cpc	r13, r25
    2c6c:	30 f4       	brcc	.+12     	; 0x2c7a <ReadCapacity+0x148>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    2c6e:	8c 19       	sub	r24, r12
    2c70:	9d 09       	sbc	r25, r13
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    2c72:	8e 15       	cp	r24, r14
    2c74:	9f 05       	cpc	r25, r15
    2c76:	60 f4       	brcc	.+24     	; 0x2c90 <ReadCapacity+0x15e>
    2c78:	02 c0       	rjmp	.+4      	; 0x2c7e <ReadCapacity+0x14c>
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    2c7a:	80 e0       	ldi	r24, 0x00	; 0
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
    2c7e:	97 01       	movw	r18, r14
    2c80:	28 1b       	sub	r18, r24
    2c82:	39 0b       	sbc	r19, r25
    2c84:	c9 01       	movw	r24, r18
  } else {
     adcv[3] = 0;			// no lost voltage
  }
  if (adcv[3] > 100) {
    2c86:	25 36       	cpi	r18, 0x65	; 101
    2c88:	31 05       	cpc	r19, r1
    2c8a:	08 f0       	brcs	.+2      	; 0x2c8e <ReadCapacity+0x15c>
    2c8c:	ad c1       	rjmp	.+858    	; 0x2fe8 <ReadCapacity+0x4b6>
    2c8e:	02 c0       	rjmp	.+4      	; 0x2c94 <ReadCapacity+0x162>
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
  } else {
     adcv[3] = 0;			// no lost voltage
    2c90:	80 e0       	ldi	r24, 0x00	; 0
    2c92:	90 e0       	ldi	r25, 0x00	; 0
     lcd_space();
     wait_about1s();
 #endif
     goto keinC;			// capacitor does not keep the voltage about 5ms
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
    2c94:	21 96       	adiw	r28, 0x01	; 1
    2c96:	5e 01       	movw	r10, r28
    2c98:	cc 24       	eor	r12, r12
    2c9a:	dd 24       	eor	r13, r13
    2c9c:	a0 92 60 01 	sts	0x0160, r10
    2ca0:	b0 92 61 01 	sts	0x0161, r11
    2ca4:	c0 92 62 01 	sts	0x0162, r12
    2ca8:	d0 92 63 01 	sts	0x0163, r13
  // compute factor with load voltage + lost voltage during the voltage load time
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]+adcv[3]);	// get factor to convert time to capacity from table
    2cac:	8e 0d       	add	r24, r14
    2cae:	9f 1d       	adc	r25, r15
    2cb0:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <getRLmultip>
    2cb4:	bc 01       	movw	r22, r24
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	a6 01       	movw	r20, r12
    2cbc:	95 01       	movw	r18, r10
    2cbe:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
    2cc2:	60 93 60 01 	sts	0x0160, r22
    2cc6:	70 93 61 01 	sts	0x0161, r23
    2cca:	80 93 62 01 	sts	0x0162, r24
    2cce:	90 93 63 01 	sts	0x0163, r25
#endif
   cap.cval = cap.cval_uncorrected.dw;	// set result to uncorrected
    2cd2:	60 93 58 01 	sts	0x0158, r22
    2cd6:	70 93 59 01 	sts	0x0159, r23
    2cda:	80 93 5a 01 	sts	0x015A, r24
    2cde:	90 93 5b 01 	sts	0x015B, r25
   Scale_C_with_vcc();
    2ce2:	0e 94 49 15 	call	0x2a92	; 0x2a92 <Scale_C_with_vcc>
   // cap.cval for this type is at least 40000nF, so the last digit will be never shown
   cap.cval *= (1000 - C_H_KORR);	// correct with C_H_KORR with 0.1% resolution, but prevent overflow
    2ce6:	60 91 58 01 	lds	r22, 0x0158
    2cea:	70 91 59 01 	lds	r23, 0x0159
    2cee:	80 91 5a 01 	lds	r24, 0x015A
    2cf2:	90 91 5b 01 	lds	r25, 0x015B
    2cf6:	28 ee       	ldi	r18, 0xE8	; 232
    2cf8:	33 e0       	ldi	r19, 0x03	; 3
    2cfa:	40 e0       	ldi	r20, 0x00	; 0
    2cfc:	50 e0       	ldi	r21, 0x00	; 0
    2cfe:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
   cap.cval /= 100;
    2d02:	24 e6       	ldi	r18, 0x64	; 100
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	40 e0       	ldi	r20, 0x00	; 0
    2d08:	50 e0       	ldi	r21, 0x00	; 0
    2d0a:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
    2d0e:	20 93 58 01 	sts	0x0158, r18
    2d12:	30 93 59 01 	sts	0x0159, r19
    2d16:	40 93 5a 01 	sts	0x015A, r20
    2d1a:	50 93 5b 01 	sts	0x015B, r21
   DisplayValue(cap.cval,cap.cpre,'F',4);
   lcd_space();
   lcd_string(utoa(ovcnt16,outval,10));
   wait_about3s();
#endif
   goto checkDiodes;
    2d1e:	27 c1       	rjmp	.+590    	; 0x2f6e <ReadCapacity+0x43c>
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
  HiPinR_L = MEM_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load
    2d20:	ea 2c       	mov	r14, r10
    2d22:	ee 0c       	add	r14, r14

//==================================================================================
// Measurement of little capacity values
messe_mit_rh:
  //little capacity value, about  < 50 µF
  EntladePins();			// discharge capacitor
    2d24:	0e 94 80 08 	call	0x1100	; 0x1100 <EntladePins>
  //measure with the R_H (470kOhm) resistor 
  R_PORT = 0;		// R_DDR ist HiPinR_L
    2d28:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = (1<<TP1) | (1<<TP2) | (1<<TP3) | (1<<TxD);	//switch all Pins to output
    2d2a:	8f e0       	ldi	r24, 0x0F	; 15
    2d2c:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		//switch all ADC Pins to GND
    2d2e:	88 e0       	ldi	r24, 0x08	; 8
    2d30:	88 b9       	out	0x08, r24	; 8
  R_DDR = HiPinR_H;   		// switch R_H resistor port for HighPin to output (GND)
    2d32:	e4 b8       	out	0x04, r14	; 4
// setup Analog Comparator
  ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    2d34:	80 e4       	ldi	r24, 0x40	; 64
    2d36:	80 93 7b 00 	sts	0x007B, r24
  ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    2d3a:	84 e5       	ldi	r24, 0x54	; 84
    2d3c:	80 bf       	out	0x30, r24	; 48
  ADMUX = (1<<REFS0) | HighPin;			// switch Mux to High-Pin
    2d3e:	81 2f       	mov	r24, r17
    2d40:	80 64       	ori	r24, 0x40	; 64
    2d42:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    2d46:	86 e1       	ldi	r24, 0x16	; 22
    2d48:	80 93 7a 00 	sts	0x007A, r24
  wait200us();			//wait for bandgap to start up
    2d4c:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <wait200us>

  ovcnt16 = 0;
// setup Counter1
  TCCR1A = 0;			// set Counter1 to normal Mode
    2d50:	10 92 80 00 	sts	0x0080, r1
  TCNT1 = 0;			//set Counter to 0
    2d54:	10 92 85 00 	sts	0x0085, r1
    2d58:	10 92 84 00 	sts	0x0084, r1
  TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// mega88
    2d5c:	87 e2       	ldi	r24, 0x27	; 39
    2d5e:	86 bb       	out	0x16, r24	; 22
  R_PORT = HiPinR_H;           	// switch R_H resistor port for HighPin to VCC
    2d60:	e5 b8       	out	0x05, r14	; 5
  if(PartFound == PART_FET) {
    2d62:	80 91 07 01 	lds	r24, 0x0107
    2d66:	83 30       	cpi	r24, 0x03	; 3
    2d68:	79 f4       	brne	.+30     	; 0x2d88 <ReadCapacity+0x256>
     // charge capacitor with R_H resistor
     TCCR1B = (1<<CS10);	//Start counter 1MHz or 8MHz
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = (((1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK) & ~(1<<HighPin));	// release only HighPin ADC port
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	01 2e       	mov	r0, r17
    2d76:	02 c0       	rjmp	.+4      	; 0x2d7c <ReadCapacity+0x24a>
    2d78:	88 0f       	add	r24, r24
    2d7a:	99 1f       	adc	r25, r25
    2d7c:	0a 94       	dec	r0
    2d7e:	e2 f7       	brpl	.-8      	; 0x2d78 <ReadCapacity+0x246>
    2d80:	80 95       	com	r24
    2d82:	8f 70       	andi	r24, 0x0F	; 15
    2d84:	87 b9       	out	0x07, r24	; 7
    2d86:	04 c0       	rjmp	.+8      	; 0x2d90 <ReadCapacity+0x25e>
  } else {
     TCCR1B =  (1<<CS10);	//start counter 1MHz or 8MHz
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
    2d8e:	b7 b8       	out	0x07, r11	; 7
     ii = TI1_INT_FLAGS;	//read Timer flags
     if (ii & (1<<ICF1))  {
        break;
     }
     if((ii & (1<<TOV1))) {	// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
        TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    2d90:	81 e0       	ldi	r24, 0x01	; 1
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
  }
//******************************
  while(1) {
     // Wait, until  Input Capture is set
     ii = TI1_INT_FLAGS;	//read Timer flags
    2d92:	26 b3       	in	r18, 0x16	; 22
     if (ii & (1<<ICF1))  {
    2d94:	25 fd       	sbrc	r18, 5
    2d96:	09 c0       	rjmp	.+18     	; 0x2daa <ReadCapacity+0x278>
        break;
     }
     if((ii & (1<<TOV1))) {	// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    2d98:	20 ff       	sbrs	r18, 0
    2d9a:	fb cf       	rjmp	.-10     	; 0x2d92 <ReadCapacity+0x260>
        TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    2d9c:	86 bb       	out	0x16, r24	; 22
        wdt_reset();
    2d9e:	a8 95       	wdr
        ovcnt16++;
    2da0:	21 96       	adiw	r28, 0x01	; 1
        if(ovcnt16 == (F_CPU/5000)) {
    2da2:	36 e0       	ldi	r19, 0x06	; 6
    2da4:	c0 34       	cpi	r28, 0x40	; 64
    2da6:	d3 07       	cpc	r29, r19
    2da8:	a1 f7       	brne	.-24     	; 0x2d92 <ReadCapacity+0x260>
           break; 		//Timeout for Charging, above 12 s
        }
     }
  }
  TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    2daa:	10 92 81 00 	sts	0x0081, r1
  TI1_INT_FLAGS = (1<<ICF1);		// Reset Input Capture
    2dae:	80 e2       	ldi	r24, 0x20	; 32
    2db0:	86 bb       	out	0x16, r24	; 22
  tmpint = ICR1;		// get previous Input Capture Counter flag
    2db2:	e0 90 86 00 	lds	r14, 0x0086
    2db6:	f0 90 87 00 	lds	r15, 0x0087
// check actual counter, if an additional overflow must be added
  if((TCNT1 > tmpint) && (ii & (1<<TOV1))) {
    2dba:	80 91 84 00 	lds	r24, 0x0084
    2dbe:	90 91 85 00 	lds	r25, 0x0085
    2dc2:	e8 16       	cp	r14, r24
    2dc4:	f9 06       	cpc	r15, r25
    2dc6:	28 f4       	brcc	.+10     	; 0x2dd2 <ReadCapacity+0x2a0>
    2dc8:	20 ff       	sbrs	r18, 0
    2dca:	03 c0       	rjmp	.+6      	; 0x2dd2 <ReadCapacity+0x2a0>
     // this OV was not counted, but was before the Input Capture
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	86 bb       	out	0x16, r24	; 22
     ovcnt16++;
    2dd0:	21 96       	adiw	r28, 0x01	; 1
  }
//############################################################
  ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    2dd2:	86 e9       	ldi	r24, 0x96	; 150
    2dd4:	80 93 7a 00 	sts	0x007A, r24
  R_DDR = 0;			// switch R_H resistor port for input
    2dd8:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// switch R_H resistor port pull up for HighPin off
    2dda:	15 b8       	out	0x05, r1	; 5
  load_diff = ReadADC(HighPin) + REF_C_KORR - ref_mv;	// build difference of capacitor voltage to Reference Voltage
    2ddc:	81 2f       	mov	r24, r17
    2dde:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
    2de2:	20 91 3f 01 	lds	r18, 0x013F
    2de6:	30 91 40 01 	lds	r19, 0x0140
    2dea:	82 1b       	sub	r24, r18
    2dec:	93 0b       	sbc	r25, r19
    2dee:	0c 96       	adiw	r24, 0x0c	; 12
    2df0:	90 93 6b 01 	sts	0x016B, r25
    2df4:	80 93 6a 01 	sts	0x016A, r24
//############################################################
  if (ovcnt16 >= (F_CPU/10000)) {
    2df8:	43 e0       	ldi	r20, 0x03	; 3
    2dfa:	c0 32       	cpi	r28, 0x20	; 32
    2dfc:	d4 07       	cpc	r29, r20
    2dfe:	08 f0       	brcs	.+2      	; 0x2e02 <ReadCapacity+0x2d0>
    2e00:	f3 c0       	rjmp	.+486    	; 0x2fe8 <ReadCapacity+0x4b6>
     goto keinC;	// no normal end
  }
//  cap.cval_uncorrected = CombineII2Long(ovcnt16, tmpint);
  cap.cval_uncorrected.w[1] = ovcnt16;
    2e02:	d0 93 63 01 	sts	0x0163, r29
    2e06:	c0 93 62 01 	sts	0x0162, r28
  cap.cval_uncorrected.w[0] = tmpint;
    2e0a:	f0 92 61 01 	sts	0x0161, r15
    2e0e:	e0 92 60 01 	sts	0x0160, r14

  cap.cpre = -12;			// cap.cval unit is pF 
    2e12:	84 ef       	ldi	r24, 0xF4	; 244
    2e14:	80 93 68 01 	sts	0x0168, r24
  if (ovcnt16 > 65) {
    2e18:	c2 34       	cpi	r28, 0x42	; 66
    2e1a:	d1 05       	cpc	r29, r1
    2e1c:	c8 f0       	brcs	.+50     	; 0x2e50 <ReadCapacity+0x31e>
     cap.cval_uncorrected.dw /= 100;	// switch to next unit
    2e1e:	60 91 60 01 	lds	r22, 0x0160
    2e22:	70 91 61 01 	lds	r23, 0x0161
    2e26:	80 91 62 01 	lds	r24, 0x0162
    2e2a:	90 91 63 01 	lds	r25, 0x0163
    2e2e:	24 e6       	ldi	r18, 0x64	; 100
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	40 e0       	ldi	r20, 0x00	; 0
    2e34:	50 e0       	ldi	r21, 0x00	; 0
    2e36:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
    2e3a:	20 93 60 01 	sts	0x0160, r18
    2e3e:	30 93 61 01 	sts	0x0161, r19
    2e42:	40 93 62 01 	sts	0x0162, r20
    2e46:	50 93 63 01 	sts	0x0163, r21
     cap.cpre += 2;			// set unit, prevent overflow
    2e4a:	86 ef       	ldi	r24, 0xF6	; 246
    2e4c:	80 93 68 01 	sts	0x0168, r24
  }
  cap.cval_uncorrected.dw *= RHmultip;		// 708
    2e50:	60 91 00 01 	lds	r22, 0x0100
    2e54:	70 91 01 01 	lds	r23, 0x0101
    2e58:	80 e0       	ldi	r24, 0x00	; 0
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	20 91 60 01 	lds	r18, 0x0160
    2e60:	30 91 61 01 	lds	r19, 0x0161
    2e64:	40 91 62 01 	lds	r20, 0x0162
    2e68:	50 91 63 01 	lds	r21, 0x0163
    2e6c:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
  cap.cval_uncorrected.dw /= (F_CPU / 10000);	// divide by 100 (@ 1MHz clock), 800 (@ 8MHz clock)
    2e70:	20 e2       	ldi	r18, 0x20	; 32
    2e72:	33 e0       	ldi	r19, 0x03	; 3
    2e74:	40 e0       	ldi	r20, 0x00	; 0
    2e76:	50 e0       	ldi	r21, 0x00	; 0
    2e78:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
    2e7c:	20 93 60 01 	sts	0x0160, r18
    2e80:	30 93 61 01 	sts	0x0161, r19
    2e84:	40 93 62 01 	sts	0x0162, r20
    2e88:	50 93 63 01 	sts	0x0163, r21
  cap.cval = cap.cval_uncorrected.dw;		// set the corrected cap.cval
    2e8c:	e8 e5       	ldi	r30, 0x58	; 88
    2e8e:	f1 e0       	ldi	r31, 0x01	; 1
    2e90:	20 93 58 01 	sts	0x0158, r18
    2e94:	31 83       	std	Z+1, r19	; 0x01
    2e96:	42 83       	std	Z+2, r20	; 0x02
    2e98:	53 83       	std	Z+3, r21	; 0x03
  Scale_C_with_vcc();
    2e9a:	0e 94 49 15 	call	0x2a92	; 0x2a92 <Scale_C_with_vcc>
  if (cap.cpre == -12) {
    2e9e:	80 91 68 01 	lds	r24, 0x0168
    2ea2:	84 3f       	cpi	r24, 0xF4	; 244
    2ea4:	09 f0       	breq	.+2      	; 0x2ea8 <ReadCapacity+0x376>
    2ea6:	55 c0       	rjmp	.+170    	; 0x2f52 <ReadCapacity+0x420>
#if COMP_SLEW1 > COMP_SLEW2
     if (cap.cval < COMP_SLEW1) {
    2ea8:	c0 90 58 01 	lds	r12, 0x0158
    2eac:	d0 90 59 01 	lds	r13, 0x0159
    2eb0:	e0 90 5a 01 	lds	r14, 0x015A
    2eb4:	f0 90 5b 01 	lds	r15, 0x015B
    2eb8:	80 ea       	ldi	r24, 0xA0	; 160
    2eba:	c8 16       	cp	r12, r24
    2ebc:	8f e0       	ldi	r24, 0x0F	; 15
    2ebe:	d8 06       	cpc	r13, r24
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	e8 06       	cpc	r14, r24
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	f8 06       	cpc	r15, r24
    2ec8:	c0 f4       	brcc	.+48     	; 0x2efa <ReadCapacity+0x3c8>
        // add slew rate dependent offset
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
    2eca:	a7 01       	movw	r20, r14
    2ecc:	96 01       	movw	r18, r12
    2ece:	24 52       	subi	r18, 0x24	; 36
    2ed0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ed2:	4f 4f       	sbci	r20, 0xFF	; 255
    2ed4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ed6:	60 ea       	ldi	r22, 0xA0	; 160
    2ed8:	7f e0       	ldi	r23, 0x0F	; 15
    2eda:	80 e0       	ldi	r24, 0x00	; 0
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
    2ee2:	2c 0d       	add	r18, r12
    2ee4:	3d 1d       	adc	r19, r13
    2ee6:	4e 1d       	adc	r20, r14
    2ee8:	5f 1d       	adc	r21, r15
    2eea:	20 93 58 01 	sts	0x0158, r18
    2eee:	30 93 59 01 	sts	0x0159, r19
    2ef2:	40 93 5a 01 	sts	0x015A, r20
    2ef6:	50 93 5b 01 	sts	0x015B, r21
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2efa:	80 91 45 01 	lds	r24, 0x0145
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	87 54       	subi	r24, 0x47	; 71
    2f02:	9e 4f       	sbci	r25, 0xFE	; 254
    2f04:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <__eerd_byte_m168>
     if (cap.cval > tmpint) {
    2f08:	20 91 58 01 	lds	r18, 0x0158
    2f0c:	30 91 59 01 	lds	r19, 0x0159
    2f10:	40 91 5a 01 	lds	r20, 0x015A
    2f14:	50 91 5b 01 	lds	r21, 0x015B
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2f18:	90 e0       	ldi	r25, 0x00	; 0
     if (cap.cval > tmpint) {
    2f1a:	a0 e0       	ldi	r26, 0x00	; 0
    2f1c:	b0 e0       	ldi	r27, 0x00	; 0
    2f1e:	82 17       	cp	r24, r18
    2f20:	93 07       	cpc	r25, r19
    2f22:	a4 07       	cpc	r26, r20
    2f24:	b5 07       	cpc	r27, r21
    2f26:	68 f4       	brcc	.+26     	; 0x2f42 <ReadCapacity+0x410>
         cap.cval -= tmpint;		//subtract zero offset (pF)
    2f28:	28 1b       	sub	r18, r24
    2f2a:	39 0b       	sbc	r19, r25
    2f2c:	4a 0b       	sbc	r20, r26
    2f2e:	5b 0b       	sbc	r21, r27
    2f30:	20 93 58 01 	sts	0x0158, r18
    2f34:	30 93 59 01 	sts	0x0159, r19
    2f38:	40 93 5a 01 	sts	0x015A, r20
    2f3c:	50 93 5b 01 	sts	0x015B, r21
    2f40:	08 c0       	rjmp	.+16     	; 0x2f52 <ReadCapacity+0x420>
     } else {
         cap.cval = 0;			//unsigned long may not reach negativ value
    2f42:	10 92 58 01 	sts	0x0158, r1
    2f46:	10 92 59 01 	sts	0x0159, r1
    2f4a:	10 92 5a 01 	sts	0x015A, r1
    2f4e:	10 92 5b 01 	sts	0x015B, r1
  lcd_testpin(HighPin);
  lcd_space();
  DisplayValue(cap.cval,cap.cpre,'F',4);
  wait_about3s();
#endif
  R_DDR = HiPinR_L; 		//switch R_L for High-Pin to GND
    2f52:	a4 b8       	out	0x04, r10	; 4
#if F_CPU < 2000001
   if(cap.cval < 50)
#else 
   if(cap.cval < 25)
    2f54:	80 91 58 01 	lds	r24, 0x0158
    2f58:	90 91 59 01 	lds	r25, 0x0159
    2f5c:	a0 91 5a 01 	lds	r26, 0x015A
    2f60:	b0 91 5b 01 	lds	r27, 0x015B
    2f64:	89 31       	cpi	r24, 0x19	; 25
    2f66:	91 05       	cpc	r25, r1
    2f68:	a1 05       	cpc	r26, r1
    2f6a:	b1 05       	cpc	r27, r1
    2f6c:	e8 f1       	brcs	.+122    	; 0x2fe8 <ReadCapacity+0x4b6>
//   if (ovcnt16 > (6 * ((unsigned long)F_CPU/1000000))) {	// above 3 uF
//      GetESR(HighPin,LowPin);
//   }
#endif
checkDiodes:
   if((NumOfDiodes > 0)  && (PartFound != PART_FET)) {
    2f6e:	80 91 05 01 	lds	r24, 0x0105
    2f72:	88 23       	and	r24, r24
    2f74:	21 f0       	breq	.+8      	; 0x2f7e <ReadCapacity+0x44c>
    2f76:	80 91 07 01 	lds	r24, 0x0107
    2f7a:	83 30       	cpi	r24, 0x03	; 3
    2f7c:	a9 f5       	brne	.+106    	; 0x2fe8 <ReadCapacity+0x4b6>
      wait_about1s();
#endif
      // nearly shure, that there is one or more diodes in reverse direction,
      // which would be wrongly detected as capacitor 
   } else {
      PartFound = PART_CAPACITOR;	//capacitor is found
    2f7e:	87 e0       	ldi	r24, 0x07	; 7
    2f80:	80 93 07 01 	sts	0x0107, r24
      if ((cap.cpre > cap.cpre_max) || ((cap.cpre == cap.cpre_max) && (cap.cval > cap.cval_max))) {
    2f84:	60 91 68 01 	lds	r22, 0x0168
    2f88:	80 91 69 01 	lds	r24, 0x0169
    2f8c:	86 17       	cp	r24, r22
    2f8e:	bc f0       	brlt	.+46     	; 0x2fbe <ReadCapacity+0x48c>
    2f90:	68 17       	cp	r22, r24
    2f92:	51 f5       	brne	.+84     	; 0x2fe8 <ReadCapacity+0x4b6>
    2f94:	20 91 58 01 	lds	r18, 0x0158
    2f98:	30 91 59 01 	lds	r19, 0x0159
    2f9c:	40 91 5a 01 	lds	r20, 0x015A
    2fa0:	50 91 5b 01 	lds	r21, 0x015B
    2fa4:	80 91 5c 01 	lds	r24, 0x015C
    2fa8:	90 91 5d 01 	lds	r25, 0x015D
    2fac:	a0 91 5e 01 	lds	r26, 0x015E
    2fb0:	b0 91 5f 01 	lds	r27, 0x015F
    2fb4:	82 17       	cp	r24, r18
    2fb6:	93 07       	cpc	r25, r19
    2fb8:	a4 07       	cpc	r26, r20
    2fba:	b5 07       	cpc	r27, r21
    2fbc:	a8 f4       	brcc	.+42     	; 0x2fe8 <ReadCapacity+0x4b6>
         // we have found a greater one
         cap.cval_max = cap.cval;
    2fbe:	e8 e5       	ldi	r30, 0x58	; 88
    2fc0:	f1 e0       	ldi	r31, 0x01	; 1
    2fc2:	80 91 58 01 	lds	r24, 0x0158
    2fc6:	90 91 59 01 	lds	r25, 0x0159
    2fca:	a0 91 5a 01 	lds	r26, 0x015A
    2fce:	b0 91 5b 01 	lds	r27, 0x015B
    2fd2:	80 93 5c 01 	sts	0x015C, r24
    2fd6:	90 93 5d 01 	sts	0x015D, r25
    2fda:	a0 93 5e 01 	sts	0x015E, r26
    2fde:	b0 93 5f 01 	sts	0x015F, r27
         cap.cpre_max = cap.cpre;
    2fe2:	61 8b       	std	Z+17, r22	; 0x11
         cap.ca = LowPin;		// save LowPin
    2fe4:	06 87       	std	Z+14, r16	; 0x0e
         cap.cb = HighPin;		// save HighPin
    2fe6:	17 87       	std	Z+15, r17	; 0x0f
keinC:
  // discharge capacitor again
//  EntladePins();		// discharge capacitors
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    2fe8:	88 e0       	ldi	r24, 0x08	; 8
    2fea:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    2fec:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    2fee:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    2ff0:	15 b8       	out	0x05, r1	; 5
  return;
 } // end ReadCapacity()
    2ff2:	df 91       	pop	r29
    2ff4:	cf 91       	pop	r28
    2ff6:	1f 91       	pop	r17
    2ff8:	0f 91       	pop	r16
    2ffa:	ff 90       	pop	r15
    2ffc:	ef 90       	pop	r14
    2ffe:	df 90       	pop	r13
    3000:	cf 90       	pop	r12
    3002:	bf 90       	pop	r11
    3004:	af 90       	pop	r10
    3006:	08 95       	ret

00003008 <ReadInductance>:
#include "config.h"
#include "Transistortester.h"


//=================================================================
void ReadInductance(void) {
    3008:	2f 92       	push	r2
    300a:	3f 92       	push	r3
    300c:	4f 92       	push	r4
    300e:	5f 92       	push	r5
    3010:	6f 92       	push	r6
    3012:	7f 92       	push	r7
    3014:	8f 92       	push	r8
    3016:	9f 92       	push	r9
    3018:	af 92       	push	r10
    301a:	bf 92       	push	r11
    301c:	cf 92       	push	r12
    301e:	df 92       	push	r13
    3020:	ef 92       	push	r14
    3022:	ff 92       	push	r15
    3024:	0f 93       	push	r16
    3026:	1f 93       	push	r17
    3028:	df 93       	push	r29
    302a:	cf 93       	push	r28
    302c:	cd b7       	in	r28, 0x3d	; 61
    302e:	de b7       	in	r29, 0x3e	; 62
    3030:	6e 97       	sbiw	r28, 0x1e	; 30
    3032:	0f b6       	in	r0, 0x3f	; 63
    3034:	f8 94       	cli
    3036:	de bf       	out	0x3e, r29	; 62
    3038:	0f be       	out	0x3f, r0	; 63
    303a:	cd bf       	out	0x3d, r28	; 61
  uint8_t found;	// variable used for searching resistors 
  uint8_t LowPin;	// number of pin with low voltage
  uint8_t HighPin;	// number of pin with high voltage 


  if(PartFound != PART_RESISTOR) {
    303c:	80 91 07 01 	lds	r24, 0x0107
    3040:	86 30       	cpi	r24, 0x06	; 6
    3042:	09 f0       	breq	.+2      	; 0x3046 <ReadInductance+0x3e>
    3044:	5f c2       	rjmp	.+1214   	; 0x3504 <ReadInductance+0x4fc>
    3046:	19 8a       	std	Y+17, r1	; 0x11
    3048:	54 c2       	rjmp	.+1192   	; 0x34f2 <ReadInductance+0x4ea>
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 21000) continue;
    304a:	29 89       	ldd	r18, Y+17	; 0x11
    304c:	22 2e       	mov	r2, r18
    304e:	33 24       	eor	r3, r3
    3050:	8b e0       	ldi	r24, 0x0B	; 11
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	28 9e       	mul	r2, r24
    3056:	f0 01       	movw	r30, r0
    3058:	29 9e       	mul	r2, r25
    305a:	f0 0d       	add	r31, r0
    305c:	38 9e       	mul	r3, r24
    305e:	f0 0d       	add	r31, r0
    3060:	11 24       	eor	r1, r1
    3062:	e8 5e       	subi	r30, 0xE8	; 232
    3064:	fe 4f       	sbci	r31, 0xFE	; 254
    3066:	80 81       	ld	r24, Z
    3068:	91 81       	ldd	r25, Z+1	; 0x01
    306a:	a2 81       	ldd	r26, Z+2	; 0x02
    306c:	b3 81       	ldd	r27, Z+3	; 0x03
    306e:	89 30       	cpi	r24, 0x09	; 9
    3070:	22 e5       	ldi	r18, 0x52	; 82
    3072:	92 07       	cpc	r25, r18
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	a2 07       	cpc	r26, r18
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	b2 07       	cpc	r27, r18
    307c:	08 f0       	brcs	.+2      	; 0x3080 <ReadInductance+0x78>
    307e:	36 c2       	rjmp	.+1132   	; 0x34ec <ReadInductance+0x4e4>
    3080:	ff 24       	eor	r15, r15
           // first and second pass, direction 1
           LowPin = resis[found].ra;
           HighPin = resis[found].rb;
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    3082:	5f 01       	movw	r10, r30
    3084:	cf 01       	movw	r24, r30
    3086:	09 96       	adiw	r24, 0x09	; 9
    3088:	9d 8b       	std	Y+21, r25	; 0x15
    308a:	8c 8b       	std	Y+20, r24	; 0x14
           HighPin = resis[found].ra;
    308c:	38 96       	adiw	r30, 0x08	; 8
    308e:	ff 8b       	std	Y+23, r31	; 0x17
    3090:	ee 8b       	std	Y+22, r30	; 0x16
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    3092:	3d 8e       	std	Y+29, r3	; 0x1d
    3094:	2c 8e       	std	Y+28, r2	; 0x1c
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 21000) continue;
     // we can check for Inductance, if resistance is below 2800 Ohm
     for (count=0;count<4;count++) {
        // Try four times (different direction and with delayed counter start)
        if (count < 2) {
    3096:	ff 2d       	mov	r31, r15
    3098:	f2 30       	cpi	r31, 0x02	; 2
    309a:	30 f4       	brcc	.+12     	; 0x30a8 <ReadInductance+0xa0>
           // first and second pass, direction 1
           LowPin = resis[found].ra;
    309c:	ee 89       	ldd	r30, Y+22	; 0x16
    309e:	ff 89       	ldd	r31, Y+23	; 0x17
    30a0:	e0 80       	ld	r14, Z
           HighPin = resis[found].rb;
    30a2:	ec 89       	ldd	r30, Y+20	; 0x14
    30a4:	fd 89       	ldd	r31, Y+21	; 0x15
    30a6:	05 c0       	rjmp	.+10     	; 0x30b2 <ReadInductance+0xaa>
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    30a8:	ec 89       	ldd	r30, Y+20	; 0x14
    30aa:	fd 89       	ldd	r31, Y+21	; 0x15
    30ac:	e0 80       	ld	r14, Z
           HighPin = resis[found].ra;
    30ae:	ee 89       	ldd	r30, Y+22	; 0x16
    30b0:	ff 89       	ldd	r31, Y+23	; 0x17
    30b2:	70 80       	ld	r7, Z
        }
        HiADC = MEM_read_byte(&PinADCtab[HighPin]);
    30b4:	87 2d       	mov	r24, r7
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	88 55       	subi	r24, 0x58	; 88
    30ba:	9e 4f       	sbci	r25, 0xFE	; 254
    30bc:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <__eerd_byte_m168>
    30c0:	88 2e       	mov	r8, r24
        LoPinR_L = MEM_read_byte(&PinRLtab[LowPin]);	//R_L mask for HighPin R_L load
    30c2:	8e 2d       	mov	r24, r14
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	8b 55       	subi	r24, 0x5B	; 91
    30c8:	9e 4f       	sbci	r25, 0xFE	; 254
    30ca:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <__eerd_byte_m168>
        //==================================================================================
        // Measurement of Inductance values
        R_PORT = 0;		// switch R port to GND
    30ce:	15 b8       	out	0x05, r1	; 5
        ADC_PORT =   TXD_VAL;		// switch ADC-Port to GND
    30d0:	f8 e0       	ldi	r31, 0x08	; 8
    30d2:	f8 b9       	out	0x08, r31	; 8
        if ((resis[found].rx < 240) && ((count & 0x01) == 0)) {
    30d4:	f5 01       	movw	r30, r10
    30d6:	20 81       	ld	r18, Z
    30d8:	31 81       	ldd	r19, Z+1	; 0x01
    30da:	42 81       	ldd	r20, Z+2	; 0x02
    30dc:	53 81       	ldd	r21, Z+3	; 0x03
    30de:	20 3f       	cpi	r18, 0xF0	; 240
    30e0:	31 05       	cpc	r19, r1
    30e2:	41 05       	cpc	r20, r1
    30e4:	51 05       	cpc	r21, r1
    30e6:	a8 f4       	brcc	.+42     	; 0x3112 <ReadInductance+0x10a>
    30e8:	f0 fc       	sbrc	r15, 0
    30ea:	13 c0       	rjmp	.+38     	; 0x3112 <ReadInductance+0x10a>
           // we can use PinR_L for measurement
           mess_r = RR680MI - R_L_VAL;
    30ec:	00 91 02 01 	lds	r16, 0x0102
    30f0:	10 91 03 01 	lds	r17, 0x0103
    30f4:	00 59       	subi	r16, 0x90	; 144
    30f6:	1a 41       	sbci	r17, 0x1A	; 26
           ADC_DDR = HiADC | (1<<LowPin) | TXD_MSK;	// switch HiADC and Low Pin to GND, 
    30f8:	28 2d       	mov	r18, r8
    30fa:	28 60       	ori	r18, 0x08	; 8
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	0e 2c       	mov	r0, r14
    3102:	02 c0       	rjmp	.+4      	; 0x3108 <ReadInductance+0x100>
    3104:	88 0f       	add	r24, r24
    3106:	99 1f       	adc	r25, r25
    3108:	0a 94       	dec	r0
    310a:	e2 f7       	brpl	.-8      	; 0x3104 <ReadInductance+0xfc>
    310c:	28 2b       	or	r18, r24
    310e:	27 b9       	out	0x07, r18	; 7
    3110:	08 c0       	rjmp	.+16     	; 0x3122 <ReadInductance+0x11a>
        } else {
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
    3112:	84 b9       	out	0x04, r24	; 4
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
    3114:	88 2d       	mov	r24, r8
    3116:	88 60       	ori	r24, 0x08	; 8
    3118:	87 b9       	out	0x07, r24	; 7
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
    311a:	00 91 02 01 	lds	r16, 0x0102
    311e:	10 91 03 01 	lds	r17, 0x0103
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    3122:	20 e0       	ldi	r18, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    3124:	8e 2d       	mov	r24, r14
    3126:	2e 8f       	std	Y+30, r18	; 0x1e
    3128:	0e 94 9d 1a 	call	0x353a	; 0x353a <W10msReadADC>
    312c:	6c 01       	movw	r12, r24
            total_r =  ReadADC(HighPin);
    312e:	87 2d       	mov	r24, r7
    3130:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    3134:	2e 8d       	ldd	r18, Y+30	; 0x1e
    3136:	f2 e0       	ldi	r31, 0x02	; 2
    3138:	cf 16       	cp	r12, r31
    313a:	d1 04       	cpc	r13, r1
    313c:	18 f4       	brcc	.+6      	; 0x3144 <ReadInductance+0x13c>
    313e:	82 30       	cpi	r24, 0x02	; 2
    3140:	91 05       	cpc	r25, r1
    3142:	18 f0       	brcs	.+6      	; 0x314a <ReadInductance+0x142>
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    3144:	2f 5f       	subi	r18, 0xFF	; 255
    3146:	24 31       	cpi	r18, 0x14	; 20
    3148:	69 f7       	brne	.-38     	; 0x3124 <ReadInductance+0x11c>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
        // setup Analog Comparator
        ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    314a:	20 e4       	ldi	r18, 0x40	; 64
    314c:	20 93 7b 00 	sts	0x007B, r18
        ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    3150:	34 e5       	ldi	r19, 0x54	; 84
    3152:	30 bf       	out	0x30, r19	; 48
        ADMUX = (1<<REFS0) | LowPin;			// switch Mux to Low-Pin
    3154:	8e 2d       	mov	r24, r14
    3156:	80 64       	ori	r24, 0x40	; 64
    3158:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    315c:	86 e1       	ldi	r24, 0x16	; 22
    315e:	80 93 7a 00 	sts	0x007A, r24
   
      // setup Counter1
        ovcnt16 = 0;
        TCCR1A = 0;			// set Counter1 to normal Mode
    3162:	10 92 80 00 	sts	0x0080, r1
        TCNT1 = 0;			//set Counter to 0
    3166:	10 92 85 00 	sts	0x0085, r1
    316a:	10 92 84 00 	sts	0x0084, r1
        TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// reset TIFR or TIFR1
    316e:	97 e2       	ldi	r25, 0x27	; 39
    3170:	96 bb       	out	0x16, r25	; 22
        HiADC |= TXD_VAL;
    3172:	e8 e0       	ldi	r30, 0x08	; 8
    3174:	8e 2a       	or	r8, r30
        wait200us();			// wait for bandgap to start up
    3176:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <wait200us>
        if ((count & 0x01) == 0 ) {
    317a:	2f 2c       	mov	r2, r15
    317c:	33 24       	eor	r3, r3
    317e:	91 01       	movw	r18, r2
    3180:	21 70       	andi	r18, 0x01	; 1
    3182:	30 70       	andi	r19, 0x00	; 0
    3184:	3b 8b       	std	Y+19, r19	; 0x13
    3186:	2a 8b       	std	Y+18, r18	; 0x12
    3188:	f0 fc       	sbrc	r15, 0
    318a:	05 c0       	rjmp	.+10     	; 0x3196 <ReadInductance+0x18e>
           //first start counter, then start current
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    318c:	31 e8       	ldi	r19, 0x81	; 129
    318e:	30 93 81 00 	sts	0x0081, r19
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    3192:	88 b8       	out	0x08, r8	; 8
    3194:	08 c0       	rjmp	.+16     	; 0x31a6 <ReadInductance+0x19e>
        } else {
           //first start current, then start counter with delay
           //parasitic capacity of coil can cause high current at the beginning
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    3196:	88 b8       	out	0x08, r8	; 8
      #if F_CPU >= 8000000UL
           wait3us();		// ignore current peak from capacity
    3198:	0e 94 03 15 	call	0x2a06	; 0x2a06 <wait3us>
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
    319c:	80 e2       	ldi	r24, 0x20	; 32
    319e:	86 bb       	out	0x16, r24	; 22
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    31a0:	91 e8       	ldi	r25, 0x81	; 129
    31a2:	90 93 81 00 	sts	0x0081, r25
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    31a6:	cc 24       	eor	r12, r12
    31a8:	dd 24       	eor	r13, r13
        }
      
      //******************************
        while(1) {
           // Wait, until  Input Capture is set
           ii = TI1_INT_FLAGS;		//read Timer flags
    31aa:	26 b3       	in	r18, 0x16	; 22
           if (ii & (1<<ICF1))  {
    31ac:	25 fd       	sbrc	r18, 5
    31ae:	0c c0       	rjmp	.+24     	; 0x31c8 <ReadInductance+0x1c0>
              break;
           }
           if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    31b0:	20 ff       	sbrs	r18, 0
    31b2:	fb cf       	rjmp	.-10     	; 0x31aa <ReadInductance+0x1a2>
              TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    31b4:	e1 e0       	ldi	r30, 0x01	; 1
    31b6:	e6 bb       	out	0x16, r30	; 22
              wdt_reset();
    31b8:	a8 95       	wdr
              ovcnt16++;
    31ba:	08 94       	sec
    31bc:	c1 1c       	adc	r12, r1
    31be:	d1 1c       	adc	r13, r1
              if(ovcnt16 == (F_CPU/100000)) {
    31c0:	f0 e5       	ldi	r31, 0x50	; 80
    31c2:	cf 16       	cp	r12, r31
    31c4:	d1 04       	cpc	r13, r1
    31c6:	89 f7       	brne	.-30     	; 0x31aa <ReadInductance+0x1a2>
                 break; 	//Timeout for Charging, above 0.13 s
              }
           }
        }
        TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    31c8:	10 92 81 00 	sts	0x0081, r1
        TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    31cc:	30 e2       	ldi	r19, 0x20	; 32
    31ce:	36 bb       	out	0x16, r19	; 22
        tmpint = ICR1;		// get previous Input Capture Counter flag
    31d0:	80 90 86 00 	lds	r8, 0x0086
    31d4:	90 90 87 00 	lds	r9, 0x0087
      // check actual counter, if an additional overflow must be added
        if((TCNT1 > tmpint) && (ii & (1<<TOV1))) {
    31d8:	80 91 84 00 	lds	r24, 0x0084
    31dc:	90 91 85 00 	lds	r25, 0x0085
    31e0:	88 16       	cp	r8, r24
    31e2:	99 06       	cpc	r9, r25
    31e4:	38 f4       	brcc	.+14     	; 0x31f4 <ReadInductance+0x1ec>
    31e6:	20 ff       	sbrs	r18, 0
    31e8:	05 c0       	rjmp	.+10     	; 0x31f4 <ReadInductance+0x1ec>
           // this OV was not counted, but was before the Input Capture
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	86 bb       	out	0x16, r24	; 22
           ovcnt16++;
    31ee:	08 94       	sec
    31f0:	c1 1c       	adc	r12, r1
    31f2:	d1 1c       	adc	r13, r1
        }
        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    31f4:	98 e0       	ldi	r25, 0x08	; 8
    31f6:	98 b9       	out	0x08, r25	; 8
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    31f8:	e6 e9       	ldi	r30, 0x96	; 150
    31fa:	e0 93 7a 00 	sts	0x007A, r30
        for (ii=0;ii<20;ii++) {
    31fe:	40 e0       	ldi	r20, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    3200:	8e 2d       	mov	r24, r14
    3202:	4e 8f       	std	Y+30, r20	; 0x1e
    3204:	0e 94 9d 1a 	call	0x353a	; 0x353a <W10msReadADC>
    3208:	2c 01       	movw	r4, r24
            total_r =  ReadADC(HighPin);
    320a:	87 2d       	mov	r24, r7
    320c:	0e 94 a1 1a 	call	0x3542	; 0x3542 <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    3210:	4e 8d       	ldd	r20, Y+30	; 0x1e
    3212:	f2 e0       	ldi	r31, 0x02	; 2
    3214:	4f 16       	cp	r4, r31
    3216:	51 04       	cpc	r5, r1
    3218:	18 f4       	brcc	.+6      	; 0x3220 <ReadInductance+0x218>
    321a:	82 30       	cpi	r24, 0x02	; 2
    321c:	91 05       	cpc	r25, r1
    321e:	18 f0       	brcs	.+6      	; 0x3226 <ReadInductance+0x21e>
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
           ovcnt16++;
        }
        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
        for (ii=0;ii<20;ii++) {
    3220:	4f 5f       	subi	r20, 0xFF	; 255
    3222:	44 31       	cpi	r20, 0x14	; 20
    3224:	69 f7       	brne	.-38     	; 0x3200 <ReadInductance+0x1f8>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
//      cap.cval_uncorrected.dw = CombineII2Long(ovcnt16, tmpint);
        cap.cval_uncorrected.w[1] = ovcnt16;
    3226:	d0 92 63 01 	sts	0x0163, r13
    322a:	c0 92 62 01 	sts	0x0162, r12
        cap.cval_uncorrected.w[0] = tmpint;
    322e:	90 92 61 01 	sts	0x0161, r9
    3232:	80 92 60 01 	sts	0x0160, r8
  #define CNT_ZERO_42 4
  #define CNT_ZERO_720 10
#endif
        // Voltage of comparator in % of umax
        #ifdef AUTO_CAL
        tmpint = (ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset))) ;
    3236:	87 eb       	ldi	r24, 0xB7	; 183
    3238:	91 e0       	ldi	r25, 0x01	; 1
    323a:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <__eerd_word_m168>
    323e:	60 91 3f 01 	lds	r22, 0x013F
    3242:	70 91 40 01 	lds	r23, 0x0140
    3246:	68 0f       	add	r22, r24
    3248:	79 1f       	adc	r23, r25
    324a:	80 91 60 01 	lds	r24, 0x0160
    324e:	90 91 61 01 	lds	r25, 0x0161
    3252:	a0 91 62 01 	lds	r26, 0x0162
    3256:	b0 91 63 01 	lds	r27, 0x0163
        #else
        tmpint = (ref_mv + REF_C_KORR);
        #endif
        if (mess_r < R_L_VAL) {
    325a:	2a e1       	ldi	r18, 0x1A	; 26
    325c:	00 39       	cpi	r16, 0x90	; 144
    325e:	12 07       	cpc	r17, r18
    3260:	90 f4       	brcc	.+36     	; 0x3286 <ReadInductance+0x27e>
           // measurement without 680 Ohm
           if (cap.cval_uncorrected.dw > CNT_ZERO_42) cap.cval_uncorrected.dw -= CNT_ZERO_42;
    3262:	87 30       	cpi	r24, 0x07	; 7
    3264:	91 05       	cpc	r25, r1
    3266:	a1 05       	cpc	r26, r1
    3268:	b1 05       	cpc	r27, r1
    326a:	20 f0       	brcs	.+8      	; 0x3274 <ReadInductance+0x26c>
    326c:	06 97       	sbiw	r24, 0x06	; 6
    326e:	a1 09       	sbc	r26, r1
    3270:	b1 09       	sbc	r27, r1
    3272:	34 c0       	rjmp	.+104    	; 0x32dc <ReadInductance+0x2d4>
           else          cap.cval_uncorrected.dw = 0;
    3274:	10 92 60 01 	sts	0x0160, r1
    3278:	10 92 61 01 	sts	0x0161, r1
    327c:	10 92 62 01 	sts	0x0162, r1
    3280:	10 92 63 01 	sts	0x0163, r1
    3284:	33 c0       	rjmp	.+102    	; 0x32ec <ReadInductance+0x2e4>
        } else {
           // measurement with 680 Ohm resistor
           // if 680 Ohm resistor is used, use REF_L_KORR for correction
           tmpint += REF_L_KORR;
    3286:	6e 5c       	subi	r22, 0xCE	; 206
    3288:	7f 4f       	sbci	r23, 0xFF	; 255
           if (cap.cval_uncorrected.dw > CNT_ZERO_720) cap.cval_uncorrected.dw -= CNT_ZERO_720;
    328a:	88 30       	cpi	r24, 0x08	; 8
    328c:	91 05       	cpc	r25, r1
    328e:	a1 05       	cpc	r26, r1
    3290:	b1 05       	cpc	r27, r1
    3292:	60 f0       	brcs	.+24     	; 0x32ac <ReadInductance+0x2a4>
    3294:	07 97       	sbiw	r24, 0x07	; 7
    3296:	a1 09       	sbc	r26, r1
    3298:	b1 09       	sbc	r27, r1
    329a:	80 93 60 01 	sts	0x0160, r24
    329e:	90 93 61 01 	sts	0x0161, r25
    32a2:	a0 93 62 01 	sts	0x0162, r26
    32a6:	b0 93 63 01 	sts	0x0163, r27
    32aa:	08 c0       	rjmp	.+16     	; 0x32bc <ReadInductance+0x2b4>
           else          cap.cval_uncorrected.dw = 0;
    32ac:	10 92 60 01 	sts	0x0160, r1
    32b0:	10 92 61 01 	sts	0x0161, r1
    32b4:	10 92 62 01 	sts	0x0162, r1
    32b8:	10 92 63 01 	sts	0x0163, r1
           if (cap.cval_uncorrected.dw > 12) cap.cval_uncorrected.dw -= 1;
    32bc:	80 91 60 01 	lds	r24, 0x0160
    32c0:	90 91 61 01 	lds	r25, 0x0161
    32c4:	a0 91 62 01 	lds	r26, 0x0162
    32c8:	b0 91 63 01 	lds	r27, 0x0163
    32cc:	8d 30       	cpi	r24, 0x0D	; 13
    32ce:	91 05       	cpc	r25, r1
    32d0:	a1 05       	cpc	r26, r1
    32d2:	b1 05       	cpc	r27, r1
    32d4:	58 f0       	brcs	.+22     	; 0x32ec <ReadInductance+0x2e4>
    32d6:	01 97       	sbiw	r24, 0x01	; 1
    32d8:	a1 09       	sbc	r26, r1
    32da:	b1 09       	sbc	r27, r1
    32dc:	80 93 60 01 	sts	0x0160, r24
    32e0:	90 93 61 01 	sts	0x0161, r25
    32e4:	a0 93 62 01 	sts	0x0162, r26
    32e8:	b0 93 63 01 	sts	0x0163, r27
        }
        if ((count&0x01) == 1) {
    32ec:	8a 89       	ldd	r24, Y+18	; 0x12
    32ee:	9b 89       	ldd	r25, Y+19	; 0x13
    32f0:	00 97       	sbiw	r24, 0x00	; 0
    32f2:	99 f0       	breq	.+38     	; 0x331a <ReadInductance+0x312>
           // second pass with delayed counter start
           cap.cval_uncorrected.dw += (3 * (F_CPU/1000000))+10;
    32f4:	80 91 60 01 	lds	r24, 0x0160
    32f8:	90 91 61 01 	lds	r25, 0x0161
    32fc:	a0 91 62 01 	lds	r26, 0x0162
    3300:	b0 91 63 01 	lds	r27, 0x0163
    3304:	82 96       	adiw	r24, 0x22	; 34
    3306:	a1 1d       	adc	r26, r1
    3308:	b1 1d       	adc	r27, r1
    330a:	80 93 60 01 	sts	0x0160, r24
    330e:	90 93 61 01 	sts	0x0161, r25
    3312:	a0 93 62 01 	sts	0x0162, r26
    3316:	b0 93 63 01 	sts	0x0163, r27
        }
        if (ovcnt16 >= (F_CPU/100000)) cap.cval_uncorrected.dw = 0; // no transition found
    331a:	90 e5       	ldi	r25, 0x50	; 80
    331c:	c9 16       	cp	r12, r25
    331e:	d1 04       	cpc	r13, r1
    3320:	40 f0       	brcs	.+16     	; 0x3332 <ReadInductance+0x32a>
    3322:	10 92 60 01 	sts	0x0160, r1
    3326:	10 92 61 01 	sts	0x0161, r1
    332a:	10 92 62 01 	sts	0x0162, r1
    332e:	10 92 63 01 	sts	0x0163, r1
        total_r = (mess_r + resis[found].rx + RR680PL - R_L_VAL);
    3332:	80 91 08 01 	lds	r24, 0x0108
    3336:	90 91 09 01 	lds	r25, 0x0109
    333a:	80 59       	subi	r24, 0x90	; 144
    333c:	9a 41       	sbci	r25, 0x1A	; 26
    333e:	f5 01       	movw	r30, r10
    3340:	20 81       	ld	r18, Z
    3342:	31 81       	ldd	r19, Z+1	; 0x01
    3344:	82 0f       	add	r24, r18
    3346:	93 1f       	adc	r25, r19
    3348:	80 0f       	add	r24, r16
    334a:	91 1f       	adc	r25, r17
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    334c:	2c 01       	movw	r4, r24
    334e:	66 24       	eor	r6, r6
    3350:	77 24       	eor	r7, r7
        per_ref = ((unsigned long)tmpint * 100) / umax;
    3352:	80 e0       	ldi	r24, 0x00	; 0
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	24 e6       	ldi	r18, 0x64	; 100
    3358:	30 e0       	ldi	r19, 0x00	; 0
    335a:	40 e0       	ldi	r20, 0x00	; 0
    335c:	50 e0       	ldi	r21, 0x00	; 0
    335e:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
    3362:	68 8f       	std	Y+24, r22	; 0x18
    3364:	79 8f       	std	Y+25, r23	; 0x19
    3366:	8a 8f       	std	Y+26, r24	; 0x1a
    3368:	9b 8f       	std	Y+27, r25	; 0x1b
           cap.cval_uncorrected.dw += (3 * (F_CPU/1000000))+10;
        }
        if (ovcnt16 >= (F_CPU/100000)) cap.cval_uncorrected.dw = 0; // no transition found
        total_r = (mess_r + resis[found].rx + RR680PL - R_L_VAL);
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    336a:	b8 01       	movw	r22, r16
    336c:	80 e0       	ldi	r24, 0x00	; 0
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	20 91 3d 01 	lds	r18, 0x013D
    3374:	30 91 3e 01 	lds	r19, 0x013E
    3378:	40 e0       	ldi	r20, 0x00	; 0
    337a:	50 e0       	ldi	r21, 0x00	; 0
    337c:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
    3380:	a3 01       	movw	r20, r6
    3382:	92 01       	movw	r18, r4
    3384:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
        per_ref = ((unsigned long)tmpint * 100) / umax;
    3388:	40 e0       	ldi	r20, 0x00	; 0
    338a:	50 e0       	ldi	r21, 0x00	; 0
    338c:	68 8d       	ldd	r22, Y+24	; 0x18
    338e:	79 8d       	ldd	r23, Y+25	; 0x19
    3390:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3392:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3394:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
        per_ref = (uint8_t)MEM2_read_byte(&LogTab[per_ref]);	// -log(1 - per_ref/100)
    3398:	e2 2f       	mov	r30, r18
    339a:	f0 e0       	ldi	r31, 0x00	; 0
    339c:	e8 59       	subi	r30, 0x98	; 152
    339e:	ff 4f       	sbci	r31, 0xFF	; 255
    33a0:	04 91       	lpm	r16, Z+
        // lx in 0.01mH units,  L = Tau * R
        inductance[count] = (cap.cval_uncorrected.dw * total_r ) / ((unsigned int)per_ref * (F_CPU/1000000));
    33a2:	20 91 60 01 	lds	r18, 0x0160
    33a6:	30 91 61 01 	lds	r19, 0x0161
    33aa:	40 91 62 01 	lds	r20, 0x0162
    33ae:	50 91 63 01 	lds	r21, 0x0163
    33b2:	c3 01       	movw	r24, r6
    33b4:	b2 01       	movw	r22, r4
    33b6:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
    33ba:	20 2f       	mov	r18, r16
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	40 e0       	ldi	r20, 0x00	; 0
    33c0:	50 e0       	ldi	r21, 0x00	; 0
    33c2:	e3 e0       	ldi	r30, 0x03	; 3
    33c4:	22 0f       	add	r18, r18
    33c6:	33 1f       	adc	r19, r19
    33c8:	44 1f       	adc	r20, r20
    33ca:	55 1f       	adc	r21, r21
    33cc:	ea 95       	dec	r30
    33ce:	d1 f7       	brne	.-12     	; 0x33c4 <ReadInductance+0x3bc>
    33d0:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
    33d4:	f1 01       	movw	r30, r2
    33d6:	ee 0f       	add	r30, r30
    33d8:	ff 1f       	adc	r31, r31
    33da:	ee 0f       	add	r30, r30
    33dc:	ff 1f       	adc	r31, r31
    33de:	81 e0       	ldi	r24, 0x01	; 1
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	8c 0f       	add	r24, r28
    33e4:	9d 1f       	adc	r25, r29
    33e6:	e8 0f       	add	r30, r24
    33e8:	f9 1f       	adc	r31, r25
    33ea:	20 83       	st	Z, r18
    33ec:	31 83       	std	Z+1, r19	; 0x01
    33ee:	42 83       	std	Z+2, r20	; 0x02
    33f0:	53 83       	std	Z+3, r21	; 0x03
        if (((count&0x01) == 0) && (inductance[count] > (F_CPU/1000000))) {
    33f2:	ea 89       	ldd	r30, Y+18	; 0x12
    33f4:	fb 89       	ldd	r31, Y+19	; 0x13
    33f6:	30 97       	sbiw	r30, 0x00	; 0
    33f8:	91 f4       	brne	.+36     	; 0x341e <ReadInductance+0x416>
    33fa:	29 30       	cpi	r18, 0x09	; 9
    33fc:	31 05       	cpc	r19, r1
    33fe:	41 05       	cpc	r20, r1
    3400:	51 05       	cpc	r21, r1
    3402:	68 f0       	brcs	.+26     	; 0x341e <ReadInductance+0x416>
           // transition is found, measurement with delayed counter start is not necessary
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
    3404:	f1 01       	movw	r30, r2
    3406:	31 96       	adiw	r30, 0x01	; 1
    3408:	ee 0f       	add	r30, r30
    340a:	ff 1f       	adc	r31, r31
    340c:	ee 0f       	add	r30, r30
    340e:	ff 1f       	adc	r31, r31
    3410:	e8 0f       	add	r30, r24
    3412:	f9 1f       	adc	r31, r25
    3414:	20 83       	st	Z, r18
    3416:	31 83       	std	Z+1, r19	; 0x01
    3418:	42 83       	std	Z+2, r20	; 0x02
    341a:	53 83       	std	Z+3, r21	; 0x03
           count++;		// skip the delayed measurement
    341c:	f3 94       	inc	r15
        }
        wdt_reset();
    341e:	a8 95       	wdr
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 21000) continue;
     // we can check for Inductance, if resistance is below 2800 Ohm
     for (count=0;count<4;count++) {
    3420:	f3 94       	inc	r15
    3422:	ff 2d       	mov	r31, r15
    3424:	f4 30       	cpi	r31, 0x04	; 4
    3426:	08 f4       	brcc	.+2      	; 0x342a <ReadInductance+0x422>
    3428:	36 ce       	rjmp	.-916    	; 0x3096 <ReadInductance+0x8e>
    342a:	2c 8c       	ldd	r2, Y+28	; 0x1c
    342c:	3d 8c       	ldd	r3, Y+29	; 0x1d
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
           count++;		// skip the delayed measurement
        }
        wdt_reset();
     }  //end for count
     ADC_PORT = TXD_VAL;		// switch ADC Port to GND
    342e:	28 e0       	ldi	r18, 0x08	; 8
    3430:	28 b9       	out	0x08, r18	; 8
     wait_about20ms();
    3432:	84 e0       	ldi	r24, 0x04	; 4
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	0e 94 6f 0a 	call	0x14de	; 0x14de <sleep_5ms>
     if (inductance[1] > inductance[0]) {
    343a:	2d 81       	ldd	r18, Y+5	; 0x05
    343c:	3e 81       	ldd	r19, Y+6	; 0x06
    343e:	4f 81       	ldd	r20, Y+7	; 0x07
    3440:	58 85       	ldd	r21, Y+8	; 0x08
    3442:	89 81       	ldd	r24, Y+1	; 0x01
    3444:	9a 81       	ldd	r25, Y+2	; 0x02
    3446:	ab 81       	ldd	r26, Y+3	; 0x03
    3448:	bc 81       	ldd	r27, Y+4	; 0x04
    344a:	82 17       	cp	r24, r18
    344c:	93 07       	cpc	r25, r19
    344e:	a4 07       	cpc	r26, r20
    3450:	b5 07       	cpc	r27, r21
    3452:	80 f4       	brcc	.+32     	; 0x3474 <ReadInductance+0x46c>
        resis[found].lx = inductance[1];	// use value found with delayed counter start
    3454:	8b e0       	ldi	r24, 0x0B	; 11
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	28 9e       	mul	r2, r24
    345a:	f0 01       	movw	r30, r0
    345c:	29 9e       	mul	r2, r25
    345e:	f0 0d       	add	r31, r0
    3460:	38 9e       	mul	r3, r24
    3462:	f0 0d       	add	r31, r0
    3464:	11 24       	eor	r1, r1
    3466:	e8 5e       	subi	r30, 0xE8	; 232
    3468:	fe 4f       	sbci	r31, 0xFE	; 254
    346a:	24 83       	std	Z+4, r18	; 0x04
    346c:	35 83       	std	Z+5, r19	; 0x05
    346e:	46 83       	std	Z+6, r20	; 0x06
    3470:	57 83       	std	Z+7, r21	; 0x07
    3472:	0f c0       	rjmp	.+30     	; 0x3492 <ReadInductance+0x48a>
     } else {
        resis[found].lx = inductance[0];
    3474:	2b e0       	ldi	r18, 0x0B	; 11
    3476:	30 e0       	ldi	r19, 0x00	; 0
    3478:	22 9e       	mul	r2, r18
    347a:	f0 01       	movw	r30, r0
    347c:	23 9e       	mul	r2, r19
    347e:	f0 0d       	add	r31, r0
    3480:	32 9e       	mul	r3, r18
    3482:	f0 0d       	add	r31, r0
    3484:	11 24       	eor	r1, r1
    3486:	e8 5e       	subi	r30, 0xE8	; 232
    3488:	fe 4f       	sbci	r31, 0xFE	; 254
    348a:	84 83       	std	Z+4, r24	; 0x04
    348c:	95 83       	std	Z+5, r25	; 0x05
    348e:	a6 83       	std	Z+6, r26	; 0x06
    3490:	b7 83       	std	Z+7, r27	; 0x07
     }
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];
    3492:	8d 85       	ldd	r24, Y+13	; 0x0d
    3494:	9e 85       	ldd	r25, Y+14	; 0x0e
    3496:	af 85       	ldd	r26, Y+15	; 0x0f
    3498:	b8 89       	ldd	r27, Y+16	; 0x10
    349a:	29 85       	ldd	r18, Y+9	; 0x09
    349c:	3a 85       	ldd	r19, Y+10	; 0x0a
    349e:	4b 85       	ldd	r20, Y+11	; 0x0b
    34a0:	5c 85       	ldd	r21, Y+12	; 0x0c
    34a2:	28 17       	cp	r18, r24
    34a4:	39 07       	cpc	r19, r25
    34a6:	4a 07       	cpc	r20, r26
    34a8:	5b 07       	cpc	r21, r27
    34aa:	20 f4       	brcc	.+8      	; 0x34b4 <ReadInductance+0x4ac>
    34ac:	89 87       	std	Y+9, r24	; 0x09
    34ae:	9a 87       	std	Y+10, r25	; 0x0a
    34b0:	ab 87       	std	Y+11, r26	; 0x0b
    34b2:	bc 87       	std	Y+12, r27	; 0x0c
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
    34b4:	89 85       	ldd	r24, Y+9	; 0x09
    34b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b8:	ab 85       	ldd	r26, Y+11	; 0x0b
    34ba:	bc 85       	ldd	r27, Y+12	; 0x0c
    34bc:	2b e0       	ldi	r18, 0x0B	; 11
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	22 9e       	mul	r2, r18
    34c2:	f0 01       	movw	r30, r0
    34c4:	23 9e       	mul	r2, r19
    34c6:	f0 0d       	add	r31, r0
    34c8:	32 9e       	mul	r3, r18
    34ca:	f0 0d       	add	r31, r0
    34cc:	11 24       	eor	r1, r1
    34ce:	e8 5e       	subi	r30, 0xE8	; 232
    34d0:	fe 4f       	sbci	r31, 0xFE	; 254
    34d2:	24 81       	ldd	r18, Z+4	; 0x04
    34d4:	35 81       	ldd	r19, Z+5	; 0x05
    34d6:	46 81       	ldd	r20, Z+6	; 0x06
    34d8:	57 81       	ldd	r21, Z+7	; 0x07
    34da:	82 17       	cp	r24, r18
    34dc:	93 07       	cpc	r25, r19
    34de:	a4 07       	cpc	r26, r20
    34e0:	b5 07       	cpc	r27, r21
    34e2:	20 f4       	brcc	.+8      	; 0x34ec <ReadInductance+0x4e4>
    34e4:	84 83       	std	Z+4, r24	; 0x04
    34e6:	95 83       	std	Z+5, r25	; 0x05
    34e8:	a6 83       	std	Z+6, r26	; 0x06
    34ea:	b7 83       	std	Z+7, r27	; 0x07


  if(PartFound != PART_RESISTOR) {
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
    34ec:	39 89       	ldd	r19, Y+17	; 0x11
    34ee:	3f 5f       	subi	r19, 0xFF	; 255
    34f0:	39 8b       	std	Y+17, r19	; 0x11
    34f2:	80 91 55 01 	lds	r24, 0x0155
    34f6:	99 89       	ldd	r25, Y+17	; 0x11
    34f8:	98 17       	cp	r25, r24
    34fa:	08 f4       	brcc	.+2      	; 0x34fe <ReadInductance+0x4f6>
    34fc:	a6 cd       	rjmp	.-1204   	; 0x304a <ReadInductance+0x42>
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
  } // end loop for all resistors

  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    34fe:	88 e0       	ldi	r24, 0x08	; 8
    3500:	87 b9       	out	0x07, r24	; 7
  R_DDR = 0;			// switch all resistor ports to input
    3502:	14 b8       	out	0x04, r1	; 4
#endif
  return;
 } // end ReadInductance()
    3504:	6e 96       	adiw	r28, 0x1e	; 30
    3506:	0f b6       	in	r0, 0x3f	; 63
    3508:	f8 94       	cli
    350a:	de bf       	out	0x3e, r29	; 62
    350c:	0f be       	out	0x3f, r0	; 63
    350e:	cd bf       	out	0x3d, r28	; 61
    3510:	cf 91       	pop	r28
    3512:	df 91       	pop	r29
    3514:	1f 91       	pop	r17
    3516:	0f 91       	pop	r16
    3518:	ff 90       	pop	r15
    351a:	ef 90       	pop	r14
    351c:	df 90       	pop	r13
    351e:	cf 90       	pop	r12
    3520:	bf 90       	pop	r11
    3522:	af 90       	pop	r10
    3524:	9f 90       	pop	r9
    3526:	8f 90       	pop	r8
    3528:	7f 90       	pop	r7
    352a:	6f 90       	pop	r6
    352c:	5f 90       	pop	r5
    352e:	4f 90       	pop	r4
    3530:	3f 90       	pop	r3
    3532:	2f 90       	pop	r2
    3534:	08 95       	ret

00003536 <W20msReadADC>:
    3536:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <wait10ms>

0000353a <W10msReadADC>:
    353a:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <wait5ms>

0000353e <W5msReadADC>:
    353e:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <wait5ms>

00003542 <ReadADC>:
    3542:	1f 93       	push	r17
    3544:	18 2f       	mov	r17, r24
    3546:	10 64       	ori	r17, 0x40	; 64

00003548 <get_sample>:
    3548:	10 93 7c 00 	sts	0x007C, r17
    354c:	e1 2f       	mov	r30, r17
    354e:	e0 78       	andi	r30, 0x80	; 128
    3550:	80 91 3a 01 	lds	r24, 0x013A
    3554:	e8 17       	cp	r30, r24
    3556:	69 f0       	breq	.+26     	; 0x3572 <r2aa2>
    3558:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <wait100us>
    355c:	80 91 7a 00 	lds	r24, 0x007A
    3560:	80 64       	ori	r24, 0x40	; 64
    3562:	80 93 7a 00 	sts	0x007A, r24

00003566 <wadc1>:
    3566:	80 91 7a 00 	lds	r24, 0x007A
    356a:	86 fd       	sbrc	r24, 6
    356c:	fc cf       	rjmp	.-8      	; 0x3566 <wadc1>
    356e:	e0 93 3a 01 	sts	0x013A, r30

00003572 <r2aa2>:
    3572:	20 e0       	ldi	r18, 0x00	; 0
    3574:	30 e0       	ldi	r19, 0x00	; 0
    3576:	a9 01       	movw	r20, r18
    3578:	e0 e0       	ldi	r30, 0x00	; 0
    357a:	20 c0       	rjmp	.+64     	; 0x35bc <r2ae8>

0000357c <Loop>:
    357c:	80 91 7a 00 	lds	r24, 0x007A
    3580:	80 64       	ori	r24, 0x40	; 64
    3582:	80 93 7a 00 	sts	0x007A, r24

00003586 <wadc2>:
    3586:	80 91 7a 00 	lds	r24, 0x007A
    358a:	86 fd       	sbrc	r24, 6
    358c:	fc cf       	rjmp	.-8      	; 0x3586 <wadc2>
    358e:	60 91 78 00 	lds	r22, 0x0078
    3592:	70 91 79 00 	lds	r23, 0x0079
    3596:	26 0f       	add	r18, r22
    3598:	37 1f       	adc	r19, r23
    359a:	41 1d       	adc	r20, r1
    359c:	51 1d       	adc	r21, r1
    359e:	e4 30       	cpi	r30, 0x04	; 4
    35a0:	61 f4       	brne	.+24     	; 0x35ba <r2ae6>
    35a2:	80 91 3c 01 	lds	r24, 0x013C
    35a6:	80 30       	cpi	r24, 0x00	; 0
    35a8:	41 f0       	breq	.+16     	; 0x35ba <r2ae6>
    35aa:	84 e0       	ldi	r24, 0x04	; 4
    35ac:	20 30       	cpi	r18, 0x00	; 0
    35ae:	38 07       	cpc	r19, r24
    35b0:	20 f4       	brcc	.+8      	; 0x35ba <r2ae6>
    35b2:	17 fd       	sbrc	r17, 7
    35b4:	02 c0       	rjmp	.+4      	; 0x35ba <r2ae6>
    35b6:	10 68       	ori	r17, 0x80	; 128
    35b8:	c7 cf       	rjmp	.-114    	; 0x3548 <get_sample>

000035ba <r2ae6>:
    35ba:	ef 5f       	subi	r30, 0xFF	; 255

000035bc <r2ae8>:
    35bc:	80 91 39 01 	lds	r24, 0x0139
    35c0:	e8 17       	cp	r30, r24
    35c2:	e0 f2       	brcs	.-72     	; 0x357c <Loop>
    35c4:	17 ff       	sbrs	r17, 7
    35c6:	05 c0       	rjmp	.+10     	; 0x35d2 <r2afe>
    35c8:	60 91 3b 01 	lds	r22, 0x013B
    35cc:	70 91 3c 01 	lds	r23, 0x013C
    35d0:	04 c0       	rjmp	.+8      	; 0x35da <r2b02>

000035d2 <r2afe>:
    35d2:	60 91 3d 01 	lds	r22, 0x013D
    35d6:	70 91 3e 01 	lds	r23, 0x013E

000035da <r2b02>:
    35da:	80 e0       	ldi	r24, 0x00	; 0
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
    35e2:	2f ef       	ldi	r18, 0xFF	; 255
    35e4:	33 e0       	ldi	r19, 0x03	; 3
    35e6:	41 e0       	ldi	r20, 0x01	; 1
    35e8:	62 0f       	add	r22, r18
    35ea:	74 1f       	adc	r23, r20
    35ec:	81 1d       	adc	r24, r1
    35ee:	91 1d       	adc	r25, r1
    35f0:	40 e0       	ldi	r20, 0x00	; 0
    35f2:	50 e0       	ldi	r21, 0x00	; 0
    35f4:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
    35f8:	b9 01       	movw	r22, r18
    35fa:	ca 01       	movw	r24, r20
    35fc:	20 91 39 01 	lds	r18, 0x0139
    3600:	32 2f       	mov	r19, r18
    3602:	35 95       	asr	r19
    3604:	63 0f       	add	r22, r19
    3606:	71 1d       	adc	r23, r1
    3608:	81 1d       	adc	r24, r1
    360a:	91 1d       	adc	r25, r1
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	40 e0       	ldi	r20, 0x00	; 0
    3610:	50 e0       	ldi	r21, 0x00	; 0
    3612:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
    3616:	c9 01       	movw	r24, r18
    3618:	1f 91       	pop	r17
    361a:	08 95       	ret

0000361c <GetESR>:
#include "Transistortester.h"

#define MAX_CNT 128

//=================================================================
void GetESR() {
    361c:	2f 92       	push	r2
    361e:	3f 92       	push	r3
    3620:	4f 92       	push	r4
    3622:	5f 92       	push	r5
    3624:	6f 92       	push	r6
    3626:	7f 92       	push	r7
    3628:	8f 92       	push	r8
    362a:	9f 92       	push	r9
    362c:	af 92       	push	r10
    362e:	bf 92       	push	r11
    3630:	cf 92       	push	r12
    3632:	df 92       	push	r13
    3634:	ef 92       	push	r14
    3636:	ff 92       	push	r15
    3638:	0f 93       	push	r16
    363a:	1f 93       	push	r17
    363c:	df 93       	push	r29
    363e:	cf 93       	push	r28
    3640:	cd b7       	in	r28, 0x3d	; 61
    3642:	de b7       	in	r29, 0x3e	; 62
    3644:	60 97       	sbiw	r28, 0x10	; 16
    3646:	0f b6       	in	r0, 0x3f	; 63
    3648:	f8 94       	cli
    364a:	de bf       	out	0x3e, r29	; 62
    364c:	0f be       	out	0x3f, r0	; 63
    364e:	cd bf       	out	0x3d, r28	; 61
   esr0 = (int8_t)eeprom_read_byte(&EE_ESR_ZERO);
   sumvolt[0] += (((long)sumvolt[0] * esr0) / ((RR680MI - R_L_VAL) * 10)); // subtract 0.23 Ohm from ESR
   if (sumvolt[1] > sumvolt[0]) {
      sumvolt[1] -= sumvolt[0];		// difference HighPin - LowPin Voltage with current
   } else {
      sumvolt[1] = 0;
    3650:	20 91 5c 01 	lds	r18, 0x015C
    3654:	30 91 5d 01 	lds	r19, 0x015D
    3658:	40 91 5e 01 	lds	r20, 0x015E
    365c:	50 91 5f 01 	lds	r21, 0x015F
    3660:	10 91 69 01 	lds	r17, 0x0169
  uint8_t LoADC;		// used to switch Lowpin directly to GND or VCC
  uint8_t ii,jj;		// tempory values
  int8_t esr0;			// used for ESR zero correction

  while (cap.cpre_max < -9) { // set cval to nF unit
      cap.cval_max /= 10;		// reduce value by factor ten
    3664:	6a e0       	ldi	r22, 0x0A	; 10
    3666:	a6 2e       	mov	r10, r22
    3668:	b1 2c       	mov	r11, r1
    366a:	c1 2c       	mov	r12, r1
    366c:	d1 2c       	mov	r13, r1
  uint8_t LoPinR_L;		// used to switch 680 Ohm to LowPin
  uint8_t LoADC;		// used to switch Lowpin directly to GND or VCC
  uint8_t ii,jj;		// tempory values
  int8_t esr0;			// used for ESR zero correction

  while (cap.cpre_max < -9) { // set cval to nF unit
    366e:	07 c0       	rjmp	.+14     	; 0x367e <GetESR+0x62>
      cap.cval_max /= 10;		// reduce value by factor ten
    3670:	ca 01       	movw	r24, r20
    3672:	b9 01       	movw	r22, r18
    3674:	a6 01       	movw	r20, r12
    3676:	95 01       	movw	r18, r10
    3678:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
    367c:	1f 5f       	subi	r17, 0xFF	; 255
  uint8_t LoPinR_L;		// used to switch 680 Ohm to LowPin
  uint8_t LoADC;		// used to switch Lowpin directly to GND or VCC
  uint8_t ii,jj;		// tempory values
  int8_t esr0;			// used for ESR zero correction

  while (cap.cpre_max < -9) { // set cval to nF unit
    367e:	17 3f       	cpi	r17, 0xF7	; 247
    3680:	bc f3       	brlt	.-18     	; 0x3670 <GetESR+0x54>
    3682:	20 93 5c 01 	sts	0x015C, r18
    3686:	30 93 5d 01 	sts	0x015D, r19
    368a:	40 93 5e 01 	sts	0x015E, r20
    368e:	50 93 5f 01 	sts	0x015F, r21
    3692:	10 93 69 01 	sts	0x0169, r17
      cap.cval_max /= 10;		// reduce value by factor ten
      cap.cpre_max++;		// take next decimal prefix
  }
  if (cap.cval_max < 1800) return;			//capacity lower than 1.8 uF
    3696:	28 30       	cpi	r18, 0x08	; 8
    3698:	67 e0       	ldi	r22, 0x07	; 7
    369a:	36 07       	cpc	r19, r22
    369c:	60 e0       	ldi	r22, 0x00	; 0
    369e:	46 07       	cpc	r20, r22
    36a0:	60 e0       	ldi	r22, 0x00	; 0
    36a2:	56 07       	cpc	r21, r22
    36a4:	08 f4       	brcc	.+2      	; 0x36a8 <GetESR+0x8c>
    36a6:	21 c2       	rjmp	.+1090   	; 0x3aea <GetESR+0x4ce>
  lcd_fix_string(ESR_str);		// " ESR="
    36a8:	8c e2       	ldi	r24, 0x2C	; 44
    36aa:	91 e0       	ldi	r25, 0x01	; 1
    36ac:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
  LoADC = MEM_read_byte(&PinADCtab[cap.ca]) | TXD_MSK;
    36b0:	00 91 66 01 	lds	r16, 0x0166
    36b4:	10 e0       	ldi	r17, 0x00	; 0
    36b6:	c8 01       	movw	r24, r16
    36b8:	88 55       	subi	r24, 0x58	; 88
    36ba:	9e 4f       	sbci	r25, 0xFE	; 254
    36bc:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <__eerd_byte_m168>
    36c0:	98 e0       	ldi	r25, 0x08	; 8
    36c2:	c9 2e       	mov	r12, r25
    36c4:	c8 2a       	or	r12, r24
  HiADC = MEM_read_byte(&PinADCtab[cap.cb]) | TXD_MSK;
    36c6:	80 91 67 01 	lds	r24, 0x0167
    36ca:	e8 2e       	mov	r14, r24
    36cc:	ff 24       	eor	r15, r15
    36ce:	c7 01       	movw	r24, r14
    36d0:	88 55       	subi	r24, 0x58	; 88
    36d2:	9e 4f       	sbci	r25, 0xFE	; 254
    36d4:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <__eerd_byte_m168>
    36d8:	b8 e0       	ldi	r27, 0x08	; 8
    36da:	bb 2e       	mov	r11, r27
    36dc:	b8 2a       	or	r11, r24
  LoPinR_L = MEM_read_byte(&PinRLtab[cap.ca]);  //R_L mask for LowPin R_L load
    36de:	c8 01       	movw	r24, r16
    36e0:	8b 55       	subi	r24, 0x5B	; 91
    36e2:	9e 4f       	sbci	r25, 0xFE	; 254
    36e4:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <__eerd_byte_m168>
    36e8:	a8 2e       	mov	r10, r24
  HiPinR_L = MEM_read_byte(&PinRLtab[cap.cb]);	//R_L mask for HighPin R_L load
    36ea:	c7 01       	movw	r24, r14
    36ec:	8b 55       	subi	r24, 0x5B	; 91
    36ee:	9e 4f       	sbci	r25, 0xFE	; 254
    36f0:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <__eerd_byte_m168>
    36f4:	d8 2e       	mov	r13, r24
// Measurement of ESR of capacitors AC Mode
   sumvolt[0] = 1;		// set sum of LowPin voltage to 1 to prevent divide by zero
   sumvolt[1] = 1;		// clear sum of HighPin voltage with current
                                // offset is about (x*10*200)/34000 in 0.01 Ohm units
   sumvolt[2] = 0;		// clear sum of HighPin voltage without current
   EntladePins();	// discharge capacitor
    36f6:	0e 94 80 08 	call	0x1100	; 0x1100 <EntladePins>
   ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    36fa:	88 e0       	ldi	r24, 0x08	; 8
    36fc:	88 b9       	out	0x08, r24	; 8
  LoPinR_L = MEM_read_byte(&PinRLtab[cap.ca]);  //R_L mask for LowPin R_L load
  HiPinR_L = MEM_read_byte(&PinRLtab[cap.cb]);	//R_L mask for HighPin R_L load


// Measurement of ESR of capacitors AC Mode
   sumvolt[0] = 1;		// set sum of LowPin voltage to 1 to prevent divide by zero
    36fe:	a1 e0       	ldi	r26, 0x01	; 1
    3700:	ea 2e       	mov	r14, r26
    3702:	f1 2c       	mov	r15, r1
    3704:	01 2d       	mov	r16, r1
    3706:	11 2d       	mov	r17, r1
   sumvolt[1] = 1;		// clear sum of HighPin voltage with current
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	a0 e0       	ldi	r26, 0x00	; 0
    370e:	b0 e0       	ldi	r27, 0x00	; 0
    3710:	89 83       	std	Y+1, r24	; 0x01
    3712:	9a 83       	std	Y+2, r25	; 0x02
    3714:	ab 83       	std	Y+3, r26	; 0x03
    3716:	bc 83       	std	Y+4, r27	; 0x04
                                // offset is about (x*10*200)/34000 in 0.01 Ohm units
   sumvolt[2] = 0;		// clear sum of HighPin voltage without current
    3718:	1d 82       	std	Y+5, r1	; 0x05
    371a:	1e 82       	std	Y+6, r1	; 0x06
    371c:	1f 82       	std	Y+7, r1	; 0x07
    371e:	18 86       	std	Y+8, r1	; 0x08
   EntladePins();	// discharge capacitor
   ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
// measurement frequency is given by sum of ADC-Reads < 680 Hz
   // ADC Sample and Hold (SH) is done 1.5 ADC clock number after starting 
   for(ii=0;ii<MAX_CNT;ii++) {
    3720:	66 24       	eor	r6, r6
      ADC_DDR = LoADC;				// switch Low-Pin to output (GND)
    3722:	c7 b8       	out	0x07, r12	; 7
       ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);	// switch ADC to LowPin, Internal Ref. 
    3724:	80 91 66 01 	lds	r24, 0x0166
    3728:	80 6c       	ori	r24, 0xC0	; 192
    372a:	80 93 7c 00 	sts	0x007C, r24
       ADCSRA |= (1<<ADSC);				// Start Conversion
    372e:	80 91 7a 00 	lds	r24, 0x007A
    3732:	80 64       	ori	r24, 0x40	; 64
    3734:	80 93 7a 00 	sts	0x007A, r24
       while (ADCSRA&(1<<ADSC));	// wait dummy read , sync with ADC-clock
    3738:	80 91 7a 00 	lds	r24, 0x007A
    373c:	86 fd       	sbrc	r24, 6
    373e:	fc cf       	rjmp	.-8      	; 0x3738 <GetESR+0x11c>
      while (1) {
         R_PORT = HiPinR_L;			// switch R-Port to VCC
    3740:	d5 b8       	out	0x05, r13	; 5
         R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (VCC)
    3742:	d4 b8       	out	0x04, r13	; 4
          ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);      // switch ADC to LowPin, Internal Ref. 
    3744:	80 91 66 01 	lds	r24, 0x0166
    3748:	80 6c       	ori	r24, 0xC0	; 192
    374a:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    374e:	80 91 7a 00 	lds	r24, 0x007A
    3752:	80 64       	ori	r24, 0x40	; 64
    3754:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    3758:	80 91 7a 00 	lds	r24, 0x007A
    375c:	86 fd       	sbrc	r24, 6
    375e:	fc cf       	rjmp	.-8      	; 0x3758 <GetESR+0x13c>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    3760:	80 91 7a 00 	lds	r24, 0x007A
    3764:	80 64       	ori	r24, 0x40	; 64
    3766:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    376a:	80 91 7a 00 	lds	r24, 0x007A
    376e:	86 fd       	sbrc	r24, 6
    3770:	fc cf       	rjmp	.-8      	; 0x376a <GetESR+0x14e>
         adcv[0] = ADCW;			// Voltage LowPin with current
    3772:	20 90 78 00 	lds	r2, 0x0078
    3776:	30 90 79 00 	lds	r3, 0x0079
          ADMUX = cap.cb | (1<<REFS1) | (1<<REFS0);      // switch ADC to HighPin, Internal Ref. 
    377a:	80 91 67 01 	lds	r24, 0x0167
    377e:	80 6c       	ori	r24, 0xC0	; 192
    3780:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    3784:	80 91 7a 00 	lds	r24, 0x007A
    3788:	80 64       	ori	r24, 0x40	; 64
    378a:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    378e:	80 91 7a 00 	lds	r24, 0x007A
    3792:	86 fd       	sbrc	r24, 6
    3794:	fc cf       	rjmp	.-8      	; 0x378e <GetESR+0x172>
         ADCSRA |= (1<<ADSC);			// Start Conversion, real start is rising edge of ADC clock
    3796:	80 91 7a 00 	lds	r24, 0x007A
    379a:	80 64       	ori	r24, 0x40	; 64
    379c:	80 93 7a 00 	sts	0x007A, r24
         wait10us();				// 2.5 ADC clocks = 20 us
    37a0:	0e 94 00 15 	call	0x2a00	; 0x2a00 <wait10us>
         wait5us();			
    37a4:	0e 94 01 15 	call	0x2a02	; 0x2a02 <wait5us>
         wait3us();				// with only 17 us delay the voltage goes down before SH
    37a8:	0e 94 03 15 	call	0x2a06	; 0x2a06 <wait3us>
         wdt_reset();
    37ac:	a8 95       	wdr
         wdt_reset();
    37ae:	a8 95       	wdr
         wdt_reset();
    37b0:	a8 95       	wdr
         wdt_reset();
    37b2:	a8 95       	wdr
         wdt_reset();
    37b4:	a8 95       	wdr
         wdt_reset();
    37b6:	a8 95       	wdr
//         wdt_reset();				// with wdt_reset the timing can be adjusted,
						// when time is too short, voltage is down before SH of ADC
						// when time is too long, capacitor will be overloaded.
						// That will cause too high voltage without current.
         R_DDR = 0;				// switch current off,  SH is 1.5 ADC clock behind start
    37b8:	14 b8       	out	0x04, r1	; 4
         while (ADCSRA&(1<<ADSC));		// wait for conversion finished
    37ba:	80 91 7a 00 	lds	r24, 0x007A
    37be:	86 fd       	sbrc	r24, 6
    37c0:	fc cf       	rjmp	.-8      	; 0x37ba <GetESR+0x19e>
         adcv[1] = ADCW;			// Voltage HighPin with current
    37c2:	20 91 78 00 	lds	r18, 0x0078
    37c6:	30 91 79 00 	lds	r19, 0x0079
         R_PORT = 0;
    37ca:	15 b8       	out	0x05, r1	; 5
          ADCSRA |= (1<<ADSC);			// Start Conversion
    37cc:	80 91 7a 00 	lds	r24, 0x007A
    37d0:	80 64       	ori	r24, 0x40	; 64
    37d2:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read
    37d6:	80 91 7a 00 	lds	r24, 0x007A
    37da:	86 fd       	sbrc	r24, 6
    37dc:	fc cf       	rjmp	.-8      	; 0x37d6 <GetESR+0x1ba>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    37de:	80 91 7a 00 	lds	r24, 0x007A
    37e2:	80 64       	ori	r24, 0x40	; 64
    37e4:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    37e8:	80 91 7a 00 	lds	r24, 0x007A
    37ec:	86 fd       	sbrc	r24, 6
    37ee:	fc cf       	rjmp	.-8      	; 0x37e8 <GetESR+0x1cc>
         adcv[2] = ADCW;			// Voltage HighPin without current
    37f0:	80 91 78 00 	lds	r24, 0x0078
    37f4:	90 91 79 00 	lds	r25, 0x0079
         if (adcv[2] > 2) break;
    37f8:	83 30       	cpi	r24, 0x03	; 3
    37fa:	91 05       	cpc	r25, r1
    37fc:	10 f4       	brcc	.+4      	; 0x3802 <GetESR+0x1e6>
         wdt_reset();
    37fe:	a8 95       	wdr
      }
    3800:	9f cf       	rjmp	.-194    	; 0x3740 <GetESR+0x124>
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
    3802:	44 24       	eor	r4, r4
    3804:	55 24       	eor	r5, r5
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    3806:	a9 01       	movw	r20, r18
    3808:	60 e0       	ldi	r22, 0x00	; 0
    380a:	70 e0       	ldi	r23, 0x00	; 0
    380c:	49 87       	std	Y+9, r20	; 0x09
    380e:	5a 87       	std	Y+10, r21	; 0x0a
    3810:	6b 87       	std	Y+11, r22	; 0x0b
    3812:	7c 87       	std	Y+12, r23	; 0x0c
      sumvolt[2] += adcv[2]; 			// capacitor voltage without current
    3814:	9c 01       	movw	r18, r24
    3816:	40 e0       	ldi	r20, 0x00	; 0
    3818:	50 e0       	ldi	r21, 0x00	; 0
    381a:	2d 87       	std	Y+13, r18	; 0x0d
    381c:	3e 87       	std	Y+14, r19	; 0x0e
    381e:	4f 87       	std	Y+15, r20	; 0x0f
    3820:	58 8b       	std	Y+16, r21	; 0x10
      ADC_DDR = HiADC;				// switch High Pin to GND
    3822:	b7 b8       	out	0x07, r11	; 7
       ADCSRA |= (1<<ADSC);			// Start Conversion
    3824:	80 91 7a 00 	lds	r24, 0x007A
    3828:	80 64       	ori	r24, 0x40	; 64
    382a:	80 93 7a 00 	sts	0x007A, r24
       while (ADCSRA&(1<<ADSC));		// wait dummy read
    382e:	80 91 7a 00 	lds	r24, 0x007A
    3832:	86 fd       	sbrc	r24, 6
    3834:	fc cf       	rjmp	.-8      	; 0x382e <GetESR+0x212>
      while (1) {
         R_PORT = LoPinR_L;
    3836:	a5 b8       	out	0x05, r10	; 5
         R_DDR = LoPinR_L;			// switch LowPin with 680 Ohm to VCC
    3838:	a4 b8       	out	0x04, r10	; 4
         wdt_reset();
    383a:	a8 95       	wdr
          ADMUX = cap.cb | (1<<REFS1) | (1<<REFS0);      // switch ADC to HighPin, Internal Ref. 
    383c:	80 91 67 01 	lds	r24, 0x0167
    3840:	80 6c       	ori	r24, 0xC0	; 192
    3842:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    3846:	80 91 7a 00 	lds	r24, 0x007A
    384a:	80 64       	ori	r24, 0x40	; 64
    384c:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    3850:	80 91 7a 00 	lds	r24, 0x007A
    3854:	86 fd       	sbrc	r24, 6
    3856:	fc cf       	rjmp	.-8      	; 0x3850 <GetESR+0x234>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    3858:	80 91 7a 00 	lds	r24, 0x007A
    385c:	80 64       	ori	r24, 0x40	; 64
    385e:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    3862:	80 91 7a 00 	lds	r24, 0x007A
    3866:	86 fd       	sbrc	r24, 6
    3868:	fc cf       	rjmp	.-8      	; 0x3862 <GetESR+0x246>
         adcv[0] = ADCW;			// Voltage HighPin with current
    386a:	80 90 78 00 	lds	r8, 0x0078
    386e:	90 90 79 00 	lds	r9, 0x0079
          ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);      // switch ADC to LowPin, Internal Ref. 
    3872:	80 91 66 01 	lds	r24, 0x0166
    3876:	80 6c       	ori	r24, 0xC0	; 192
    3878:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    387c:	80 91 7a 00 	lds	r24, 0x007A
    3880:	80 64       	ori	r24, 0x40	; 64
    3882:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    3886:	80 91 7a 00 	lds	r24, 0x007A
    388a:	86 fd       	sbrc	r24, 6
    388c:	fc cf       	rjmp	.-8      	; 0x3886 <GetESR+0x26a>
         ADCSRA |= (1<<ADSC);			// Start Conversion, real start is rising edge of ADC clock
    388e:	80 91 7a 00 	lds	r24, 0x007A
    3892:	80 64       	ori	r24, 0x40	; 64
    3894:	80 93 7a 00 	sts	0x007A, r24
         wait10us();				// 2.5 ADC clocks = 20 us
    3898:	0e 94 00 15 	call	0x2a00	; 0x2a00 <wait10us>
         wait5us();			
    389c:	0e 94 01 15 	call	0x2a02	; 0x2a02 <wait5us>
         wait3us();				// with only 17 us delay the voltage goes down before SH
    38a0:	0e 94 03 15 	call	0x2a06	; 0x2a06 <wait3us>
         wdt_reset();
    38a4:	a8 95       	wdr
         wdt_reset();
    38a6:	a8 95       	wdr
         wdt_reset();
    38a8:	a8 95       	wdr
         wdt_reset();
    38aa:	a8 95       	wdr
         wdt_reset();
    38ac:	a8 95       	wdr
         wdt_reset();
    38ae:	a8 95       	wdr
//         wdt_reset();				// with wdt_reset the timing can be adjusted,
						// when time is too short, voltage is down before SH of ADC
						// when time is too long, capacitor will be overloaded.
						// That will cause too high voltage without current.
         R_DDR = 0;				// switch current off, SH is 1.5 ADC clock ticks behind start
    38b0:	14 b8       	out	0x04, r1	; 4
         while (ADCSRA&(1<<ADSC));		// wait for conversion finished
    38b2:	80 91 7a 00 	lds	r24, 0x007A
    38b6:	86 fd       	sbrc	r24, 6
    38b8:	fc cf       	rjmp	.-8      	; 0x38b2 <GetESR+0x296>
         adcv[1] = ADCW;			//  Voltage LowPin with current
    38ba:	40 91 78 00 	lds	r20, 0x0078
    38be:	50 91 79 00 	lds	r21, 0x0079
         R_PORT = 0;
    38c2:	15 b8       	out	0x05, r1	; 5
          ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);      // switch ADC to LowPin, Internal Ref. 
    38c4:	80 91 66 01 	lds	r24, 0x0166
    38c8:	80 6c       	ori	r24, 0xC0	; 192
    38ca:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);		// Start Conversion
    38ce:	80 91 7a 00 	lds	r24, 0x007A
    38d2:	80 64       	ori	r24, 0x40	; 64
    38d4:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read
    38d8:	80 91 7a 00 	lds	r24, 0x007A
    38dc:	86 fd       	sbrc	r24, 6
    38de:	fc cf       	rjmp	.-8      	; 0x38d8 <GetESR+0x2bc>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    38e0:	80 91 7a 00 	lds	r24, 0x007A
    38e4:	80 64       	ori	r24, 0x40	; 64
    38e6:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    38ea:	80 91 7a 00 	lds	r24, 0x007A
    38ee:	86 fd       	sbrc	r24, 6
    38f0:	fc cf       	rjmp	.-8      	; 0x38ea <GetESR+0x2ce>
         adcv[2] = ADCW;			// Voltage LowPin without current
    38f2:	20 91 78 00 	lds	r18, 0x0078
    38f6:	30 91 79 00 	lds	r19, 0x0079
         if (adcv[2] > 2) break;
    38fa:	23 30       	cpi	r18, 0x03	; 3
    38fc:	31 05       	cpc	r19, r1
    38fe:	10 f4       	brcc	.+4      	; 0x3904 <GetESR+0x2e8>
         wdt_reset();
    3900:	a8 95       	wdr
      }
    3902:	99 cf       	rjmp	.-206    	; 0x3836 <GetESR+0x21a>
      R_DDR = 0;				// switch current off
    3904:	14 b8       	out	0x04, r1	; 4
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
    3906:	c4 01       	movw	r24, r8
    3908:	a0 e0       	ldi	r26, 0x00	; 0
    390a:	b0 e0       	ldi	r27, 0x00	; 0
         while (ADCSRA&(1<<ADSC));		// wait
         adcv[2] = ADCW;			// Voltage HighPin without current
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
    390c:	82 0d       	add	r24, r2
    390e:	93 1d       	adc	r25, r3
    3910:	a4 1d       	adc	r26, r4
    3912:	b5 1d       	adc	r27, r5
         adcv[2] = ADCW;			// Voltage LowPin without current
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      R_DDR = 0;				// switch current off
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
    3914:	e8 0e       	add	r14, r24
    3916:	f9 1e       	adc	r15, r25
    3918:	0a 1f       	adc	r16, r26
    391a:	1b 1f       	adc	r17, r27
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    391c:	ca 01       	movw	r24, r20
    391e:	a0 e0       	ldi	r26, 0x00	; 0
    3920:	b0 e0       	ldi	r27, 0x00	; 0
         adcv[2] = ADCW;			// Voltage HighPin without current
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    3922:	49 85       	ldd	r20, Y+9	; 0x09
    3924:	5a 85       	ldd	r21, Y+10	; 0x0a
    3926:	6b 85       	ldd	r22, Y+11	; 0x0b
    3928:	7c 85       	ldd	r23, Y+12	; 0x0c
    392a:	84 0f       	add	r24, r20
    392c:	95 1f       	adc	r25, r21
    392e:	a6 1f       	adc	r26, r22
    3930:	b7 1f       	adc	r27, r23
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      R_DDR = 0;				// switch current off
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    3932:	49 81       	ldd	r20, Y+1	; 0x01
    3934:	5a 81       	ldd	r21, Y+2	; 0x02
    3936:	6b 81       	ldd	r22, Y+3	; 0x03
    3938:	7c 81       	ldd	r23, Y+4	; 0x04
    393a:	48 0f       	add	r20, r24
    393c:	59 1f       	adc	r21, r25
    393e:	6a 1f       	adc	r22, r26
    3940:	7b 1f       	adc	r23, r27
    3942:	49 83       	std	Y+1, r20	; 0x01
    3944:	5a 83       	std	Y+2, r21	; 0x02
    3946:	6b 83       	std	Y+3, r22	; 0x03
    3948:	7c 83       	std	Y+4, r23	; 0x04
      sumvolt[2] += adcv[2];			// add  HighPin voltages without current
    394a:	40 e0       	ldi	r20, 0x00	; 0
    394c:	50 e0       	ldi	r21, 0x00	; 0
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
      sumvolt[2] += adcv[2]; 			// capacitor voltage without current
    394e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3950:	7e 85       	ldd	r23, Y+14	; 0x0e
    3952:	8f 85       	ldd	r24, Y+15	; 0x0f
    3954:	98 89       	ldd	r25, Y+16	; 0x10
    3956:	26 0f       	add	r18, r22
    3958:	37 1f       	adc	r19, r23
    395a:	48 1f       	adc	r20, r24
    395c:	59 1f       	adc	r21, r25
         wdt_reset();
      }
      R_DDR = 0;				// switch current off
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
      sumvolt[2] += adcv[2];			// add  HighPin voltages without current
    395e:	8d 81       	ldd	r24, Y+5	; 0x05
    3960:	9e 81       	ldd	r25, Y+6	; 0x06
    3962:	af 81       	ldd	r26, Y+7	; 0x07
    3964:	b8 85       	ldd	r27, Y+8	; 0x08
    3966:	82 0f       	add	r24, r18
    3968:	93 1f       	adc	r25, r19
    396a:	a4 1f       	adc	r26, r20
    396c:	b5 1f       	adc	r27, r21
    396e:	8d 83       	std	Y+5, r24	; 0x05
    3970:	9e 83       	std	Y+6, r25	; 0x06
    3972:	af 83       	std	Y+7, r26	; 0x07
    3974:	b8 87       	std	Y+8, r27	; 0x08
   sumvolt[2] = 0;		// clear sum of HighPin voltage without current
   EntladePins();	// discharge capacitor
   ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
// measurement frequency is given by sum of ADC-Reads < 680 Hz
   // ADC Sample and Hold (SH) is done 1.5 ADC clock number after starting 
   for(ii=0;ii<MAX_CNT;ii++) {
    3976:	63 94       	inc	r6
    3978:	96 2d       	mov	r25, r6
    397a:	90 38       	cpi	r25, 0x80	; 128
    397c:	09 f0       	breq	.+2      	; 0x3980 <GetESR+0x364>
    397e:	d1 ce       	rjmp	.-606    	; 0x3722 <GetESR+0x106>
   } // end for
   // we need to compensate the time delay between reading the LowPin Voltage and the
   // HighPin Voltage, which is usually 2 * 14 * 8 us = 224 us.
   // With the loading of the capacitor the current will sink, so we get a too high voltage at
   // the LowPin. The velocity of degration is inversely proportional to time constant (represented by capacity value).
   sumvolt[0] -= (sumvolt[0] * 150UL)  / cap.cval_max;
    3980:	c8 01       	movw	r24, r16
    3982:	b7 01       	movw	r22, r14
    3984:	26 e9       	ldi	r18, 0x96	; 150
    3986:	30 e0       	ldi	r19, 0x00	; 0
    3988:	40 e0       	ldi	r20, 0x00	; 0
    398a:	50 e0       	ldi	r21, 0x00	; 0
    398c:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
    3990:	20 91 5c 01 	lds	r18, 0x015C
    3994:	30 91 5d 01 	lds	r19, 0x015D
    3998:	40 91 5e 01 	lds	r20, 0x015E
    399c:	50 91 5f 01 	lds	r21, 0x015F
    39a0:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
    39a4:	57 01       	movw	r10, r14
    39a6:	68 01       	movw	r12, r16
    39a8:	a2 1a       	sub	r10, r18
    39aa:	b3 0a       	sbc	r11, r19
    39ac:	c4 0a       	sbc	r12, r20
    39ae:	d5 0a       	sbc	r13, r21
   esr0 = (int8_t)eeprom_read_byte(&EE_ESR_ZERO);
    39b0:	80 ec       	ldi	r24, 0xC0	; 192
    39b2:	91 e0       	ldi	r25, 0x01	; 1
    39b4:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <__eerd_byte_m168>
    39b8:	28 2e       	mov	r2, r24
   sumvolt[0] += (((long)sumvolt[0] * esr0) / ((RR680MI - R_L_VAL) * 10)); // subtract 0.23 Ohm from ESR
    39ba:	40 90 02 01 	lds	r4, 0x0102
    39be:	50 90 03 01 	lds	r5, 0x0103
    39c2:	68 2f       	mov	r22, r24
    39c4:	77 27       	eor	r23, r23
    39c6:	67 fd       	sbrc	r22, 7
    39c8:	70 95       	com	r23
    39ca:	87 2f       	mov	r24, r23
    39cc:	97 2f       	mov	r25, r23
    39ce:	a6 01       	movw	r20, r12
    39d0:	95 01       	movw	r18, r10
    39d2:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
    39d6:	92 01       	movw	r18, r4
    39d8:	22 0f       	add	r18, r18
    39da:	33 1f       	adc	r19, r19
    39dc:	a2 01       	movw	r20, r4
    39de:	e3 e0       	ldi	r30, 0x03	; 3
    39e0:	44 0f       	add	r20, r20
    39e2:	55 1f       	adc	r21, r21
    39e4:	ea 95       	dec	r30
    39e6:	e1 f7       	brne	.-8      	; 0x39e0 <GetESR+0x3c4>
    39e8:	24 0f       	add	r18, r20
    39ea:	35 1f       	adc	r19, r21
    39ec:	20 5a       	subi	r18, 0xA0	; 160
    39ee:	39 40       	sbci	r19, 0x09	; 9
    39f0:	40 e0       	ldi	r20, 0x00	; 0
    39f2:	50 e0       	ldi	r21, 0x00	; 0
    39f4:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <__divmodsi4>
    39f8:	79 01       	movw	r14, r18
    39fa:	8a 01       	movw	r16, r20
    39fc:	ea 0c       	add	r14, r10
    39fe:	fb 1c       	adc	r15, r11
    3a00:	0c 1d       	adc	r16, r12
    3a02:	1d 1d       	adc	r17, r13
   if (sumvolt[1] > sumvolt[0]) {
    3a04:	29 81       	ldd	r18, Y+1	; 0x01
    3a06:	3a 81       	ldd	r19, Y+2	; 0x02
    3a08:	4b 81       	ldd	r20, Y+3	; 0x03
    3a0a:	5c 81       	ldd	r21, Y+4	; 0x04
    3a0c:	e2 16       	cp	r14, r18
    3a0e:	f3 06       	cpc	r15, r19
    3a10:	04 07       	cpc	r16, r20
    3a12:	15 07       	cpc	r17, r21
    3a14:	38 f4       	brcc	.+14     	; 0x3a24 <GetESR+0x408>
      sumvolt[1] -= sumvolt[0];		// difference HighPin - LowPin Voltage with current
    3a16:	59 01       	movw	r10, r18
    3a18:	6a 01       	movw	r12, r20
    3a1a:	ae 18       	sub	r10, r14
    3a1c:	bf 08       	sbc	r11, r15
    3a1e:	c0 0a       	sbc	r12, r16
    3a20:	d1 0a       	sbc	r13, r17
    3a22:	03 c0       	rjmp	.+6      	; 0x3a2a <GetESR+0x40e>
   } else {
      sumvolt[1] = 0;
    3a24:	aa 24       	eor	r10, r10
    3a26:	bb 24       	eor	r11, r11
    3a28:	65 01       	movw	r12, r10
   }
   sumvolt[2] = (sumvolt[2] * 980) / 1000;	// scale down the voltage without current with 98.0%
    3a2a:	6d 81       	ldd	r22, Y+5	; 0x05
    3a2c:	7e 81       	ldd	r23, Y+6	; 0x06
    3a2e:	8f 81       	ldd	r24, Y+7	; 0x07
    3a30:	98 85       	ldd	r25, Y+8	; 0x08
    3a32:	24 ed       	ldi	r18, 0xD4	; 212
    3a34:	33 e0       	ldi	r19, 0x03	; 3
    3a36:	40 e0       	ldi	r20, 0x00	; 0
    3a38:	50 e0       	ldi	r21, 0x00	; 0
    3a3a:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
    3a3e:	28 ee       	ldi	r18, 0xE8	; 232
    3a40:	33 e0       	ldi	r19, 0x03	; 3
    3a42:	40 e0       	ldi	r20, 0x00	; 0
    3a44:	50 e0       	ldi	r21, 0x00	; 0
    3a46:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
    3a4a:	39 01       	movw	r6, r18
    3a4c:	4a 01       	movw	r8, r20
    3a4e:	b2 01       	movw	r22, r4
    3a50:	60 59       	subi	r22, 0x90	; 144
    3a52:	7a 41       	sbci	r23, 0x1A	; 26
   jj = 0;
   if (sumvolt[1] >= sumvolt[2]) {
    3a54:	a2 16       	cp	r10, r18
    3a56:	b3 06       	cpc	r11, r19
    3a58:	c4 06       	cpc	r12, r20
    3a5a:	d5 06       	cpc	r13, r21
    3a5c:	08 f1       	brcs	.+66     	; 0x3aa0 <GetESR+0x484>
      // mean voltage at the capacitor is higher with current
      // sumvolt[0] is the sum of voltages at LowPin, caused by output resistance of Port
      // (RR680MI - R_L_VAL) is the port output resistance in 0.1 Ohm units.
      // we scale up the difference voltage with 10 to get 0.01 Ohm units of ESR
      cap.esr = ((sumvolt[1] - sumvolt[2]) * 10 * (unsigned long)(RR680MI - R_L_VAL)) / sumvolt[0];
    3a5e:	80 e0       	ldi	r24, 0x00	; 0
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	2a e0       	ldi	r18, 0x0A	; 10
    3a64:	30 e0       	ldi	r19, 0x00	; 0
    3a66:	40 e0       	ldi	r20, 0x00	; 0
    3a68:	50 e0       	ldi	r21, 0x00	; 0
    3a6a:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
    3a6e:	a6 01       	movw	r20, r12
    3a70:	95 01       	movw	r18, r10
    3a72:	26 19       	sub	r18, r6
    3a74:	37 09       	sbc	r19, r7
    3a76:	48 09       	sbc	r20, r8
    3a78:	59 09       	sbc	r21, r9
    3a7a:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
    3a7e:	a8 01       	movw	r20, r16
    3a80:	97 01       	movw	r18, r14
    3a82:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
    3a86:	30 93 65 01 	sts	0x0165, r19
    3a8a:	20 93 64 01 	sts	0x0164, r18
      DisplayValue(cap.esr,-2,LCD_CHAR_OMEGA,2);
    3a8e:	b9 01       	movw	r22, r18
    3a90:	80 e0       	ldi	r24, 0x00	; 0
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	4e ef       	ldi	r20, 0xFE	; 254
    3a96:	24 ef       	ldi	r18, 0xF4	; 244
    3a98:	02 e0       	ldi	r16, 0x02	; 2
    3a9a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <DisplayValue>
    3a9e:	25 c0       	rjmp	.+74     	; 0x3aea <GetESR+0x4ce>
   } else {
      jj = ((sumvolt[2] - sumvolt[1]) * 10 * (unsigned long)(RR680MI - R_L_VAL)) / sumvolt[0];
    3aa0:	80 e0       	ldi	r24, 0x00	; 0
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	2a e0       	ldi	r18, 0x0A	; 10
    3aa6:	30 e0       	ldi	r19, 0x00	; 0
    3aa8:	40 e0       	ldi	r20, 0x00	; 0
    3aaa:	50 e0       	ldi	r21, 0x00	; 0
    3aac:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
    3ab0:	a4 01       	movw	r20, r8
    3ab2:	93 01       	movw	r18, r6
    3ab4:	2a 19       	sub	r18, r10
    3ab6:	3b 09       	sbc	r19, r11
    3ab8:	4c 09       	sbc	r20, r12
    3aba:	5d 09       	sbc	r21, r13
    3abc:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__mulsi3>
    3ac0:	a8 01       	movw	r20, r16
    3ac2:	97 01       	movw	r18, r14
    3ac4:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
    3ac8:	12 2f       	mov	r17, r18
      lcd_data('0');
    3aca:	80 e3       	ldi	r24, 0x30	; 48
    3acc:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
      if ((jj < 100) && (jj > 0)) {
    3ad0:	81 2f       	mov	r24, r17
    3ad2:	81 50       	subi	r24, 0x01	; 1
    3ad4:	83 36       	cpi	r24, 0x63	; 99
    3ad6:	48 f4       	brcc	.+18     	; 0x3aea <GetESR+0x4ce>
         lcd_data('?');			// mark ESR zero correction
    3ad8:	8f e3       	ldi	r24, 0x3F	; 63
    3ada:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
         esr0 -= jj;			// correct ESR_ZERO by negative resistance
    3ade:	62 2d       	mov	r22, r2
    3ae0:	61 1b       	sub	r22, r17
         eeprom_write_byte((uint8_t *)(&EE_ESR_ZERO), (int8_t)esr0);       // fix new zero offset 
    3ae2:	80 ec       	ldi	r24, 0xC0	; 192
    3ae4:	91 e0       	ldi	r25, 0x01	; 1
    3ae6:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__eewr_byte_m168>
//   lcd_line3();
//   DisplayValue(jj,0,' ',4);	// correction for ESR_ZERO
//   DisplayValue(1000+esr0,0,' ',4);	// new ESR_ZERO
#endif
  return;
}
    3aea:	60 96       	adiw	r28, 0x10	; 16
    3aec:	0f b6       	in	r0, 0x3f	; 63
    3aee:	f8 94       	cli
    3af0:	de bf       	out	0x3e, r29	; 62
    3af2:	0f be       	out	0x3f, r0	; 63
    3af4:	cd bf       	out	0x3d, r28	; 61
    3af6:	cf 91       	pop	r28
    3af8:	df 91       	pop	r29
    3afa:	1f 91       	pop	r17
    3afc:	0f 91       	pop	r16
    3afe:	ff 90       	pop	r15
    3b00:	ef 90       	pop	r14
    3b02:	df 90       	pop	r13
    3b04:	cf 90       	pop	r12
    3b06:	bf 90       	pop	r11
    3b08:	af 90       	pop	r10
    3b0a:	9f 90       	pop	r9
    3b0c:	8f 90       	pop	r8
    3b0e:	7f 90       	pop	r7
    3b10:	6f 90       	pop	r6
    3b12:	5f 90       	pop	r5
    3b14:	4f 90       	pop	r4
    3b16:	3f 90       	pop	r3
    3b18:	2f 90       	pop	r2
    3b1a:	08 95       	ret

00003b1c <__mulsi3>:
    3b1c:	62 9f       	mul	r22, r18
    3b1e:	d0 01       	movw	r26, r0
    3b20:	73 9f       	mul	r23, r19
    3b22:	f0 01       	movw	r30, r0
    3b24:	82 9f       	mul	r24, r18
    3b26:	e0 0d       	add	r30, r0
    3b28:	f1 1d       	adc	r31, r1
    3b2a:	64 9f       	mul	r22, r20
    3b2c:	e0 0d       	add	r30, r0
    3b2e:	f1 1d       	adc	r31, r1
    3b30:	92 9f       	mul	r25, r18
    3b32:	f0 0d       	add	r31, r0
    3b34:	83 9f       	mul	r24, r19
    3b36:	f0 0d       	add	r31, r0
    3b38:	74 9f       	mul	r23, r20
    3b3a:	f0 0d       	add	r31, r0
    3b3c:	65 9f       	mul	r22, r21
    3b3e:	f0 0d       	add	r31, r0
    3b40:	99 27       	eor	r25, r25
    3b42:	72 9f       	mul	r23, r18
    3b44:	b0 0d       	add	r27, r0
    3b46:	e1 1d       	adc	r30, r1
    3b48:	f9 1f       	adc	r31, r25
    3b4a:	63 9f       	mul	r22, r19
    3b4c:	b0 0d       	add	r27, r0
    3b4e:	e1 1d       	adc	r30, r1
    3b50:	f9 1f       	adc	r31, r25
    3b52:	bd 01       	movw	r22, r26
    3b54:	cf 01       	movw	r24, r30
    3b56:	11 24       	eor	r1, r1
    3b58:	08 95       	ret

00003b5a <__udivmodqi4>:
    3b5a:	99 1b       	sub	r25, r25
    3b5c:	79 e0       	ldi	r23, 0x09	; 9
    3b5e:	04 c0       	rjmp	.+8      	; 0x3b68 <__udivmodqi4_ep>

00003b60 <__udivmodqi4_loop>:
    3b60:	99 1f       	adc	r25, r25
    3b62:	96 17       	cp	r25, r22
    3b64:	08 f0       	brcs	.+2      	; 0x3b68 <__udivmodqi4_ep>
    3b66:	96 1b       	sub	r25, r22

00003b68 <__udivmodqi4_ep>:
    3b68:	88 1f       	adc	r24, r24
    3b6a:	7a 95       	dec	r23
    3b6c:	c9 f7       	brne	.-14     	; 0x3b60 <__udivmodqi4_loop>
    3b6e:	80 95       	com	r24
    3b70:	08 95       	ret

00003b72 <__udivmodhi4>:
    3b72:	aa 1b       	sub	r26, r26
    3b74:	bb 1b       	sub	r27, r27
    3b76:	51 e1       	ldi	r21, 0x11	; 17
    3b78:	07 c0       	rjmp	.+14     	; 0x3b88 <__udivmodhi4_ep>

00003b7a <__udivmodhi4_loop>:
    3b7a:	aa 1f       	adc	r26, r26
    3b7c:	bb 1f       	adc	r27, r27
    3b7e:	a6 17       	cp	r26, r22
    3b80:	b7 07       	cpc	r27, r23
    3b82:	10 f0       	brcs	.+4      	; 0x3b88 <__udivmodhi4_ep>
    3b84:	a6 1b       	sub	r26, r22
    3b86:	b7 0b       	sbc	r27, r23

00003b88 <__udivmodhi4_ep>:
    3b88:	88 1f       	adc	r24, r24
    3b8a:	99 1f       	adc	r25, r25
    3b8c:	5a 95       	dec	r21
    3b8e:	a9 f7       	brne	.-22     	; 0x3b7a <__udivmodhi4_loop>
    3b90:	80 95       	com	r24
    3b92:	90 95       	com	r25
    3b94:	bc 01       	movw	r22, r24
    3b96:	cd 01       	movw	r24, r26
    3b98:	08 95       	ret

00003b9a <__udivmodsi4>:
    3b9a:	a1 e2       	ldi	r26, 0x21	; 33
    3b9c:	1a 2e       	mov	r1, r26
    3b9e:	aa 1b       	sub	r26, r26
    3ba0:	bb 1b       	sub	r27, r27
    3ba2:	fd 01       	movw	r30, r26
    3ba4:	0d c0       	rjmp	.+26     	; 0x3bc0 <__udivmodsi4_ep>

00003ba6 <__udivmodsi4_loop>:
    3ba6:	aa 1f       	adc	r26, r26
    3ba8:	bb 1f       	adc	r27, r27
    3baa:	ee 1f       	adc	r30, r30
    3bac:	ff 1f       	adc	r31, r31
    3bae:	a2 17       	cp	r26, r18
    3bb0:	b3 07       	cpc	r27, r19
    3bb2:	e4 07       	cpc	r30, r20
    3bb4:	f5 07       	cpc	r31, r21
    3bb6:	20 f0       	brcs	.+8      	; 0x3bc0 <__udivmodsi4_ep>
    3bb8:	a2 1b       	sub	r26, r18
    3bba:	b3 0b       	sbc	r27, r19
    3bbc:	e4 0b       	sbc	r30, r20
    3bbe:	f5 0b       	sbc	r31, r21

00003bc0 <__udivmodsi4_ep>:
    3bc0:	66 1f       	adc	r22, r22
    3bc2:	77 1f       	adc	r23, r23
    3bc4:	88 1f       	adc	r24, r24
    3bc6:	99 1f       	adc	r25, r25
    3bc8:	1a 94       	dec	r1
    3bca:	69 f7       	brne	.-38     	; 0x3ba6 <__udivmodsi4_loop>
    3bcc:	60 95       	com	r22
    3bce:	70 95       	com	r23
    3bd0:	80 95       	com	r24
    3bd2:	90 95       	com	r25
    3bd4:	9b 01       	movw	r18, r22
    3bd6:	ac 01       	movw	r20, r24
    3bd8:	bd 01       	movw	r22, r26
    3bda:	cf 01       	movw	r24, r30
    3bdc:	08 95       	ret

00003bde <__divmodsi4>:
    3bde:	97 fb       	bst	r25, 7
    3be0:	09 2e       	mov	r0, r25
    3be2:	05 26       	eor	r0, r21
    3be4:	0e d0       	rcall	.+28     	; 0x3c02 <__divmodsi4_neg1>
    3be6:	57 fd       	sbrc	r21, 7
    3be8:	04 d0       	rcall	.+8      	; 0x3bf2 <__divmodsi4_neg2>
    3bea:	d7 df       	rcall	.-82     	; 0x3b9a <__udivmodsi4>
    3bec:	0a d0       	rcall	.+20     	; 0x3c02 <__divmodsi4_neg1>
    3bee:	00 1c       	adc	r0, r0
    3bf0:	38 f4       	brcc	.+14     	; 0x3c00 <__divmodsi4_exit>

00003bf2 <__divmodsi4_neg2>:
    3bf2:	50 95       	com	r21
    3bf4:	40 95       	com	r20
    3bf6:	30 95       	com	r19
    3bf8:	21 95       	neg	r18
    3bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    3bfc:	4f 4f       	sbci	r20, 0xFF	; 255
    3bfe:	5f 4f       	sbci	r21, 0xFF	; 255

00003c00 <__divmodsi4_exit>:
    3c00:	08 95       	ret

00003c02 <__divmodsi4_neg1>:
    3c02:	f6 f7       	brtc	.-4      	; 0x3c00 <__divmodsi4_exit>
    3c04:	90 95       	com	r25
    3c06:	80 95       	com	r24
    3c08:	70 95       	com	r23
    3c0a:	61 95       	neg	r22
    3c0c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c0e:	8f 4f       	sbci	r24, 0xFF	; 255
    3c10:	9f 4f       	sbci	r25, 0xFF	; 255
    3c12:	08 95       	ret

00003c14 <itoa>:
    3c14:	fb 01       	movw	r30, r22
    3c16:	9f 01       	movw	r18, r30
    3c18:	e8 94       	clt
    3c1a:	42 30       	cpi	r20, 0x02	; 2
    3c1c:	c4 f0       	brlt	.+48     	; 0x3c4e <itoa+0x3a>
    3c1e:	45 32       	cpi	r20, 0x25	; 37
    3c20:	b4 f4       	brge	.+44     	; 0x3c4e <itoa+0x3a>
    3c22:	4a 30       	cpi	r20, 0x0A	; 10
    3c24:	29 f4       	brne	.+10     	; 0x3c30 <itoa+0x1c>
    3c26:	97 fb       	bst	r25, 7
    3c28:	1e f4       	brtc	.+6      	; 0x3c30 <itoa+0x1c>
    3c2a:	90 95       	com	r25
    3c2c:	81 95       	neg	r24
    3c2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c30:	64 2f       	mov	r22, r20
    3c32:	77 27       	eor	r23, r23
    3c34:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <__udivmodhi4>
    3c38:	80 5d       	subi	r24, 0xD0	; 208
    3c3a:	8a 33       	cpi	r24, 0x3A	; 58
    3c3c:	0c f0       	brlt	.+2      	; 0x3c40 <itoa+0x2c>
    3c3e:	89 5d       	subi	r24, 0xD9	; 217
    3c40:	81 93       	st	Z+, r24
    3c42:	cb 01       	movw	r24, r22
    3c44:	00 97       	sbiw	r24, 0x00	; 0
    3c46:	a1 f7       	brne	.-24     	; 0x3c30 <itoa+0x1c>
    3c48:	16 f4       	brtc	.+4      	; 0x3c4e <itoa+0x3a>
    3c4a:	5d e2       	ldi	r21, 0x2D	; 45
    3c4c:	51 93       	st	Z+, r21
    3c4e:	10 82       	st	Z, r1
    3c50:	c9 01       	movw	r24, r18
    3c52:	0c 94 62 1e 	jmp	0x3cc4	; 0x3cc4 <strrev>

00003c56 <utoa>:
    3c56:	fb 01       	movw	r30, r22
    3c58:	9f 01       	movw	r18, r30
    3c5a:	42 30       	cpi	r20, 0x02	; 2
    3c5c:	74 f0       	brlt	.+28     	; 0x3c7a <utoa+0x24>
    3c5e:	45 32       	cpi	r20, 0x25	; 37
    3c60:	64 f4       	brge	.+24     	; 0x3c7a <utoa+0x24>
    3c62:	64 2f       	mov	r22, r20
    3c64:	77 27       	eor	r23, r23
    3c66:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <__udivmodhi4>
    3c6a:	80 5d       	subi	r24, 0xD0	; 208
    3c6c:	8a 33       	cpi	r24, 0x3A	; 58
    3c6e:	0c f0       	brlt	.+2      	; 0x3c72 <utoa+0x1c>
    3c70:	89 5d       	subi	r24, 0xD9	; 217
    3c72:	81 93       	st	Z+, r24
    3c74:	cb 01       	movw	r24, r22
    3c76:	00 97       	sbiw	r24, 0x00	; 0
    3c78:	a1 f7       	brne	.-24     	; 0x3c62 <utoa+0xc>
    3c7a:	10 82       	st	Z, r1
    3c7c:	c9 01       	movw	r24, r18
    3c7e:	0c 94 62 1e 	jmp	0x3cc4	; 0x3cc4 <strrev>

00003c82 <__eerd_byte_m168>:
    3c82:	f9 99       	sbic	0x1f, 1	; 31
    3c84:	fe cf       	rjmp	.-4      	; 0x3c82 <__eerd_byte_m168>
    3c86:	92 bd       	out	0x22, r25	; 34
    3c88:	81 bd       	out	0x21, r24	; 33
    3c8a:	f8 9a       	sbi	0x1f, 0	; 31
    3c8c:	99 27       	eor	r25, r25
    3c8e:	80 b5       	in	r24, 0x20	; 32
    3c90:	08 95       	ret

00003c92 <__eerd_word_m168>:
    3c92:	a8 e1       	ldi	r26, 0x18	; 24
    3c94:	b0 e0       	ldi	r27, 0x00	; 0
    3c96:	42 e0       	ldi	r20, 0x02	; 2
    3c98:	50 e0       	ldi	r21, 0x00	; 0
    3c9a:	0c 94 74 1e 	jmp	0x3ce8	; 0x3ce8 <__eerd_blraw_m168>

00003c9e <__eewr_byte_m168>:
    3c9e:	26 2f       	mov	r18, r22

00003ca0 <__eewr_r18_m168>:
    3ca0:	f9 99       	sbic	0x1f, 1	; 31
    3ca2:	fe cf       	rjmp	.-4      	; 0x3ca0 <__eewr_r18_m168>
    3ca4:	1f ba       	out	0x1f, r1	; 31
    3ca6:	92 bd       	out	0x22, r25	; 34
    3ca8:	81 bd       	out	0x21, r24	; 33
    3caa:	20 bd       	out	0x20, r18	; 32
    3cac:	0f b6       	in	r0, 0x3f	; 63
    3cae:	f8 94       	cli
    3cb0:	fa 9a       	sbi	0x1f, 2	; 31
    3cb2:	f9 9a       	sbi	0x1f, 1	; 31
    3cb4:	0f be       	out	0x3f, r0	; 63
    3cb6:	01 96       	adiw	r24, 0x01	; 1
    3cb8:	08 95       	ret

00003cba <__eewr_word_m168>:
    3cba:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <__eewr_byte_m168>
    3cbe:	27 2f       	mov	r18, r23
    3cc0:	0c 94 50 1e 	jmp	0x3ca0	; 0x3ca0 <__eewr_r18_m168>

00003cc4 <strrev>:
    3cc4:	dc 01       	movw	r26, r24
    3cc6:	fc 01       	movw	r30, r24
    3cc8:	67 2f       	mov	r22, r23
    3cca:	71 91       	ld	r23, Z+
    3ccc:	77 23       	and	r23, r23
    3cce:	e1 f7       	brne	.-8      	; 0x3cc8 <strrev+0x4>
    3cd0:	32 97       	sbiw	r30, 0x02	; 2
    3cd2:	04 c0       	rjmp	.+8      	; 0x3cdc <strrev+0x18>
    3cd4:	7c 91       	ld	r23, X
    3cd6:	6d 93       	st	X+, r22
    3cd8:	70 83       	st	Z, r23
    3cda:	62 91       	ld	r22, -Z
    3cdc:	ae 17       	cp	r26, r30
    3cde:	bf 07       	cpc	r27, r31
    3ce0:	c8 f3       	brcs	.-14     	; 0x3cd4 <strrev+0x10>
    3ce2:	08 95       	ret

00003ce4 <__eerd_block_m168>:
    3ce4:	dc 01       	movw	r26, r24
    3ce6:	cb 01       	movw	r24, r22

00003ce8 <__eerd_blraw_m168>:
    3ce8:	fc 01       	movw	r30, r24
    3cea:	f9 99       	sbic	0x1f, 1	; 31
    3cec:	fe cf       	rjmp	.-4      	; 0x3cea <__eerd_blraw_m168+0x2>
    3cee:	06 c0       	rjmp	.+12     	; 0x3cfc <__eerd_blraw_m168+0x14>
    3cf0:	f2 bd       	out	0x22, r31	; 34
    3cf2:	e1 bd       	out	0x21, r30	; 33
    3cf4:	f8 9a       	sbi	0x1f, 0	; 31
    3cf6:	31 96       	adiw	r30, 0x01	; 1
    3cf8:	00 b4       	in	r0, 0x20	; 32
    3cfa:	0d 92       	st	X+, r0
    3cfc:	41 50       	subi	r20, 0x01	; 1
    3cfe:	50 40       	sbci	r21, 0x00	; 0
    3d00:	b8 f7       	brcc	.-18     	; 0x3cf0 <__eerd_blraw_m168+0x8>
    3d02:	08 95       	ret

00003d04 <_exit>:
    3d04:	f8 94       	cli

00003d06 <__stop_program>:
    3d06:	ff cf       	rjmp	.-2      	; 0x3d06 <__stop_program>
