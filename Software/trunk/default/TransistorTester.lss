
TransistorTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00003af8  00003bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003af8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007f  00800102  00800102  00003bae  2**0
                  ALLOC
  3 .eeprom       00000270  00810000  00810000  00003bae  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         00000dbc  00000000  00000000  00003e20  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001d2  00000000  00000000  00004bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000000a0  00000000  00000000  00004dae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000067d  00000000  00000000  00004e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000023aa  00000000  00000000  000054cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000671  00000000  00000000  00007875  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000031df  00000000  00000000  00007ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000001f0  00000000  00000000  0000b0c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000007e8  00000000  00000000  0000b2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000010a7  00000000  00000000  0000baa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 000001a2  00000000  00000000  0000cb47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 ef       	ldi	r30, 0xF8	; 248
      7c:	fa e3       	ldi	r31, 0x3A	; 58
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 30       	cpi	r26, 0x02	; 2
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a2 e0       	ldi	r26, 0x02	; 2
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 38       	cpi	r26, 0x81	; 129
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <main>
      9e:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_data>:
void lcd_space(void) {
   lcd_data(' ');
}

// sends data byte to the LCD 
void lcd_data(unsigned char temp1) {
      a6:	1f 93       	push	r17
      a8:	18 2f       	mov	r17, r24
 lcd_write_data(temp1);		// set RS to 1
      aa:	81 e0       	ldi	r24, 0x01	; 1
      ac:	61 2f       	mov	r22, r17
      ae:	0e 94 18 01 	call	0x230	; 0x230 <_lcd_hw_write>
      b2:	0e 94 15 14 	call	0x282a	; 0x282a <wait50us>
#ifdef WITH_UART
 switch(temp1) {
      b6:	18 30       	cpi	r17, 0x08	; 8
      b8:	48 f4       	brcc	.+18     	; 0xcc <lcd_data+0x26>
      ba:	16 30       	cpi	r17, 0x06	; 6
      bc:	d0 f4       	brcc	.+52     	; 0xf2 <lcd_data+0x4c>
      be:	12 30       	cpi	r17, 0x02	; 2
      c0:	71 f0       	breq	.+28     	; 0xde <lcd_data+0x38>
      c2:	13 30       	cpi	r17, 0x03	; 3
      c4:	89 f0       	breq	.+34     	; 0xe8 <lcd_data+0x42>
      c6:	11 30       	cpi	r17, 0x01	; 1
      c8:	d1 f4       	brne	.+52     	; 0xfe <lcd_data+0x58>
      ca:	07 c0       	rjmp	.+14     	; 0xda <lcd_data+0x34>
      cc:	14 3e       	cpi	r17, 0xE4	; 228
      ce:	a9 f0       	breq	.+42     	; 0xfa <lcd_data+0x54>
      d0:	14 3f       	cpi	r17, 0xF4	; 244
      d2:	c1 f0       	breq	.+48     	; 0x104 <lcd_data+0x5e>
      d4:	11 3e       	cpi	r17, 0xE1	; 225
      d6:	99 f4       	brne	.+38     	; 0xfe <lcd_data+0x58>
      d8:	0e c0       	rjmp	.+28     	; 0xf6 <lcd_data+0x50>
    case LCD_CHAR_DIODE1:
    	uart_putc('>');
      da:	8e e3       	ldi	r24, 0x3E	; 62
      dc:	06 c0       	rjmp	.+12     	; 0xea <lcd_data+0x44>
    	uart_putc('|');
    	break;
    case LCD_CHAR_DIODE2:
    	uart_putc('|');
      de:	8c e7       	ldi	r24, 0x7C	; 124
      e0:	0e 94 db 13 	call	0x27b6	; 0x27b6 <uart_putc>
    	uart_putc('<');
      e4:	8c e3       	ldi	r24, 0x3C	; 60
      e6:	0c c0       	rjmp	.+24     	; 0x100 <lcd_data+0x5a>
    	break;
    case LCD_CHAR_CAP:
    	uart_putc('|');
      e8:	8c e7       	ldi	r24, 0x7C	; 124
      ea:	0e 94 db 13 	call	0x27b6	; 0x27b6 <uart_putc>
    	uart_putc('|');
      ee:	8c e7       	ldi	r24, 0x7C	; 124
      f0:	07 c0       	rjmp	.+14     	; 0x100 <lcd_data+0x5a>
    	break;
    case LCD_CHAR_RESIS1:
    case LCD_CHAR_RESIS2:
    	uart_putc('R');
      f2:	82 e5       	ldi	r24, 0x52	; 82
      f4:	05 c0       	rjmp	.+10     	; 0x100 <lcd_data+0x5a>
    	break;
    case 225:	//ä
    	uart_putc('ä');
      f6:	84 ee       	ldi	r24, 0xE4	; 228
      f8:	03 c0       	rjmp	.+6      	; 0x100 <lcd_data+0x5a>
    	break;
    case 228:	//µ
    	uart_putc('µ');
      fa:	85 eb       	ldi	r24, 0xB5	; 181
      fc:	01 c0       	rjmp	.+2      	; 0x100 <lcd_data+0x5a>
    	break;
    case 244:	//Omega
    	break;
    default:
    	uart_putc(temp1);
      fe:	81 2f       	mov	r24, r17
     100:	0e 94 db 13 	call	0x27b6	; 0x27b6 <uart_putc>
 }
#endif
}
     104:	1f 91       	pop	r17
     106:	08 95       	ret

00000108 <lcd_space>:
   lcd_data(temp + '1');
}

// send space character to LCD
void lcd_space(void) {
   lcd_data(' ');
     108:	80 e2       	ldi	r24, 0x20	; 32
     10a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
}
     10e:	08 95       	ret

00000110 <lcd_testpin>:
 

// sends numeric character (Pin Number) to the LCD 
// from binary 0 we send ASCII 1 ....
void lcd_testpin(unsigned char temp) {
   lcd_data(temp + '1');
     110:	8f 5c       	subi	r24, 0xCF	; 207
     112:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
}
     116:	08 95       	ret

00000118 <uart_newline>:
}


#ifdef WITH_UART
void uart_newline(void) {
   uart_putc('\r');
     118:	8d e0       	ldi	r24, 0x0D	; 13
     11a:	0e 94 db 13 	call	0x27b6	; 0x27b6 <uart_putc>
   uart_putc('\n');
     11e:	8a e0       	ldi	r24, 0x0A	; 10
     120:	0e 94 db 13 	call	0x27b6	; 0x27b6 <uart_putc>
}
     124:	08 95       	ret

00000126 <lcd_command>:
#endif
}
 
// sends a command to the LCD
 
void lcd_command(unsigned char temp1) {
     126:	1f 93       	push	r17
     128:	18 2f       	mov	r17, r24
        lcd_write_cmd(temp1);		// set RS to 0
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	61 2f       	mov	r22, r17
     12e:	0e 94 18 01 	call	0x230	; 0x230 <_lcd_hw_write>
     132:	0e 94 15 14 	call	0x282a	; 0x282a <wait50us>
#ifdef WITH_UART
	if((temp1 == 0x80) || (temp1 == 0xC0)) {
     136:	10 38       	cpi	r17, 0x80	; 128
     138:	11 f0       	breq	.+4      	; 0x13e <lcd_command+0x18>
     13a:	10 3c       	cpi	r17, 0xC0	; 192
     13c:	11 f4       	brne	.+4      	; 0x142 <lcd_command+0x1c>
		uart_newline();
     13e:	0e 94 8c 00 	call	0x118	; 0x118 <uart_newline>
	}
#endif
}
     142:	1f 91       	pop	r17
     144:	08 95       	ret

00000146 <lcd_clear>:
}
 
// send the command to clear the display 
 
void lcd_clear(void) {
   lcd_command(CLEAR_DISPLAY);
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
   wait10ms();
     14c:	0e 94 0a 14 	call	0x2814	; 0x2814 <wait10ms>
#ifdef WITH_UART
   uart_newline();
     150:	0e 94 8c 00 	call	0x118	; 0x118 <uart_newline>
#endif
}
     154:	08 95       	ret

00000156 <lcd_init>:
 
// Initialise: 
// Must be called first .
 
void lcd_init(void) {
   _lcd_hw_init();
     156:	0e 94 0f 01 	call	0x21e	; 0x21e <_lcd_hw_init>
   wait30ms();
     15a:	0e 94 08 14 	call	0x2810	; 0x2810 <wait30ms>
   // to initialise, send 3 times
   lcd_write_init(1);
     15e:	80 e8       	ldi	r24, 0x80	; 128
     160:	60 e3       	ldi	r22, 0x30	; 48
     162:	0e 94 18 01 	call	0x230	; 0x230 <_lcd_hw_write>
   wait5ms();
     166:	0e 94 0b 14 	call	0x2816	; 0x2816 <wait5ms>
   
   lcd_write_init(1);
     16a:	80 e8       	ldi	r24, 0x80	; 128
     16c:	60 e3       	ldi	r22, 0x30	; 48
     16e:	0e 94 18 01 	call	0x230	; 0x230 <_lcd_hw_write>
   wait1ms();
     172:	0e 94 0f 14 	call	0x281e	; 0x281e <wait1ms>

   lcd_write_init(1);
     176:	80 e8       	ldi	r24, 0x80	; 128
     178:	60 e3       	ldi	r22, 0x30	; 48
     17a:	0e 94 18 01 	call	0x230	; 0x230 <_lcd_hw_write>
   wait1ms();
     17e:	0e 94 0f 14 	call	0x281e	; 0x281e <wait1ms>

   lcd_write_init(0);
     182:	80 e8       	ldi	r24, 0x80	; 128
     184:	60 e2       	ldi	r22, 0x20	; 32
     186:	0e 94 18 01 	call	0x230	; 0x230 <_lcd_hw_write>
   wait10ms();
     18a:	0e 94 0a 14 	call	0x2814	; 0x2814 <wait10ms>

   // 4Bit / 2 rows / 5x7
   lcd_command(CMD_SetIFOptions | 0x08);
     18e:	88 e2       	ldi	r24, 0x28	; 40
     190:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>

   // Display on / Cursor off / no Blinking
   lcd_command(CMD_SetDisplayAndCursor | 0x04);
     194:	8c e0       	ldi	r24, 0x0C	; 12
     196:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>

   // increment / no Scroll    
   lcd_command(CMD_SetEntryMode | 0x02);	
     19a:	86 e0       	ldi	r24, 0x06	; 6
     19c:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
   lcd_clear();
     1a0:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
}
     1a4:	08 95       	ret

000001a6 <lcd_string>:
#endif
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
     1a6:	ef 92       	push	r14
     1a8:	ff 92       	push	r15
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	e8 2e       	mov	r14, r24
     1b0:	e7 01       	movw	r28, r14
     1b2:	7e 01       	movw	r14, r28
     1b4:	f9 2e       	mov	r15, r25
     1b6:	e7 01       	movw	r28, r14
    while(*data) {
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <lcd_string+0x18>
        lcd_data(*data);
     1ba:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
    while(*data) {
     1be:	89 91       	ld	r24, Y+
     1c0:	88 23       	and	r24, r24
     1c2:	d9 f7       	brne	.-10     	; 0x1ba <lcd_string+0x14>
        lcd_data(*data);
        data++;
    }
}
     1c4:	df 91       	pop	r29
     1c6:	cf 91       	pop	r28
     1c8:	ff 90       	pop	r15
     1ca:	ef 90       	pop	r14
     1cc:	08 95       	ret

000001ce <lcd_fix_string>:
   }
}
#endif

//Load string from PGM or EEprom and send to LCD 
void lcd_fix_string(const unsigned char *data) {
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
     1d2:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = MEM_read_byte(data);
     1d4:	ce 01       	movw	r24, r28
     1d6:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__eerd_byte_m328p>
      if((cc==0) || (cc==128)) {
     1da:	88 23       	and	r24, r24
     1dc:	31 f0       	breq	.+12     	; 0x1ea <lcd_fix_string+0x1c>
     1de:	80 38       	cpi	r24, 0x80	; 128
     1e0:	21 f0       	breq	.+8      	; 0x1ea <lcd_fix_string+0x1c>
         return;
      }
      lcd_data(cc);
     1e2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
      data++;
     1e6:	21 96       	adiw	r28, 0x01	; 1
   }
     1e8:	f5 cf       	rjmp	.-22     	; 0x1d4 <lcd_fix_string+0x6>
}
     1ea:	df 91       	pop	r29
     1ec:	cf 91       	pop	r28
     1ee:	08 95       	ret

000001f0 <lcd_fix_customchar>:

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
     1f0:	0f 93       	push	r16
     1f2:	1f 93       	push	r17
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	8c 01       	movw	r16, r24
     1fa:	c0 e0       	ldi	r28, 0x00	; 0
     1fc:	d0 e0       	ldi	r29, 0x00	; 0
    for(uint8_t i=0;i<8;i++) {
        lcd_data(MEM_read_byte(chardata));
     1fe:	c8 01       	movw	r24, r16
     200:	8c 0f       	add	r24, r28
     202:	9d 1f       	adc	r25, r29
     204:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__eerd_byte_m328p>
     208:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
     20c:	21 96       	adiw	r28, 0x01	; 1
   }
}

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
    for(uint8_t i=0;i<8;i++) {
     20e:	c8 30       	cpi	r28, 0x08	; 8
     210:	d1 05       	cpc	r29, r1
     212:	a9 f7       	brne	.-22     	; 0x1fe <lcd_fix_customchar+0xe>
        lcd_data(MEM_read_byte(chardata));
        chardata++;
    }
}
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	1f 91       	pop	r17
     21a:	0f 91       	pop	r16
     21c:	08 95       	ret

0000021e <_lcd_hw_init>:
     21e:	50 9a       	sbi	0x0a, 0	; 10
     220:	51 9a       	sbi	0x0a, 1	; 10
     222:	52 9a       	sbi	0x0a, 2	; 10
     224:	53 9a       	sbi	0x0a, 3	; 10
     226:	54 9a       	sbi	0x0a, 4	; 10
     228:	55 9a       	sbi	0x0a, 5	; 10
     22a:	5c 98       	cbi	0x0b, 4	; 11
     22c:	5d 98       	cbi	0x0b, 5	; 11
     22e:	08 95       	ret

00000230 <_lcd_hw_write>:
     230:	5c 98       	cbi	0x0b, 4	; 11
     232:	80 fd       	sbrc	r24, 0
     234:	5c 9a       	sbi	0x0b, 4	; 11
     236:	5d 9a       	sbi	0x0b, 5	; 11
     238:	58 98       	cbi	0x0b, 0	; 11
     23a:	59 98       	cbi	0x0b, 1	; 11
     23c:	5a 98       	cbi	0x0b, 2	; 11
     23e:	5b 98       	cbi	0x0b, 3	; 11
     240:	64 fd       	sbrc	r22, 4
     242:	58 9a       	sbi	0x0b, 0	; 11
     244:	65 fd       	sbrc	r22, 5
     246:	59 9a       	sbi	0x0b, 1	; 11
     248:	66 fd       	sbrc	r22, 6
     24a:	5a 9a       	sbi	0x0b, 2	; 11
     24c:	67 fd       	sbrc	r22, 7
     24e:	5b 9a       	sbi	0x0b, 3	; 11
     250:	5d 98       	cbi	0x0b, 5	; 11
     252:	0e 94 1e 14 	call	0x283c	; 0x283c <wait1us>
     256:	87 fd       	sbrc	r24, 7
     258:	10 c0       	rjmp	.+32     	; 0x27a <_lcd_hw_write_exit>
     25a:	5d 9a       	sbi	0x0b, 5	; 11
     25c:	58 98       	cbi	0x0b, 0	; 11
     25e:	59 98       	cbi	0x0b, 1	; 11
     260:	5a 98       	cbi	0x0b, 2	; 11
     262:	5b 98       	cbi	0x0b, 3	; 11
     264:	60 fd       	sbrc	r22, 0
     266:	58 9a       	sbi	0x0b, 0	; 11
     268:	61 fd       	sbrc	r22, 1
     26a:	59 9a       	sbi	0x0b, 1	; 11
     26c:	62 fd       	sbrc	r22, 2
     26e:	5a 9a       	sbi	0x0b, 2	; 11
     270:	63 fd       	sbrc	r22, 3
     272:	5b 9a       	sbi	0x0b, 3	; 11
     274:	5d 98       	cbi	0x0b, 5	; 11
     276:	0e 94 1e 14 	call	0x283c	; 0x283c <wait1us>

0000027a <_lcd_hw_write_exit>:
     27a:	08 95       	ret

0000027c <ChargePin10ms>:
#endif

//******************************************************************
#include "CheckPins.c"

void ChargePin10ms(uint8_t PinToCharge, uint8_t ChargeDirection) {
     27c:	df 93       	push	r29
     27e:	cf 93       	push	r28
     280:	0f 92       	push	r0
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
   //Will be used by discharge of MOSFET Gates or to load big capacities.
   //Parameters:
   //PinToCharge: specifies the pin as mask for R-Port
   //ChargeDirection: 0 = switch to GND (N-Kanal-FET), 1= switch to VCC(P-Kanal-FET)

   if(ChargeDirection&1) {
     286:	60 ff       	sbrs	r22, 0
     288:	03 c0       	rjmp	.+6      	; 0x290 <ChargePin10ms+0x14>
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
     28a:	95 b1       	in	r25, 0x05	; 5
     28c:	98 2b       	or	r25, r24
     28e:	04 c0       	rjmp	.+8      	; 0x298 <ChargePin10ms+0x1c>
   } else {
      R_PORT &= ~PinToCharge; // or 0 (GND)
     290:	25 b1       	in	r18, 0x05	; 5
     292:	98 2f       	mov	r25, r24
     294:	90 95       	com	r25
     296:	92 23       	and	r25, r18
     298:	95 b9       	out	0x05, r25	; 5
   }
   R_DDR |= PinToCharge;		//switch Pin to output, across R to GND or VCC
     29a:	94 b1       	in	r25, 0x04	; 4
     29c:	98 2b       	or	r25, r24
     29e:	94 b9       	out	0x04, r25	; 4
   wait10ms();
     2a0:	89 83       	std	Y+1, r24	; 0x01
     2a2:	0e 94 0a 14 	call	0x2814	; 0x2814 <wait10ms>
   // switch back Input, no current
   R_DDR &= ~PinToCharge;	// switch back to input
     2a6:	94 b1       	in	r25, 0x04	; 4
     2a8:	89 81       	ldd	r24, Y+1	; 0x01
     2aa:	80 95       	com	r24
     2ac:	98 23       	and	r25, r24
     2ae:	94 b9       	out	0x04, r25	; 4
   R_PORT &= ~PinToCharge;	// no Pull up
     2b0:	95 b1       	in	r25, 0x05	; 5
     2b2:	98 23       	and	r25, r24
     2b4:	95 b9       	out	0x05, r25	; 5
}
     2b6:	0f 90       	pop	r0
     2b8:	cf 91       	pop	r28
     2ba:	df 91       	pop	r29
     2bc:	08 95       	ret

000002be <CheckPins>:
//******************************************************************
void CheckPins(uint8_t HighPin, uint8_t LowPin, uint8_t TristatePin)
  {
     2be:	2f 92       	push	r2
     2c0:	3f 92       	push	r3
     2c2:	4f 92       	push	r4
     2c4:	5f 92       	push	r5
     2c6:	6f 92       	push	r6
     2c8:	7f 92       	push	r7
     2ca:	8f 92       	push	r8
     2cc:	9f 92       	push	r9
     2ce:	af 92       	push	r10
     2d0:	bf 92       	push	r11
     2d2:	cf 92       	push	r12
     2d4:	df 92       	push	r13
     2d6:	ef 92       	push	r14
     2d8:	ff 92       	push	r15
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	df 93       	push	r29
     2e0:	cf 93       	push	r28
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
     2e6:	66 97       	sbiw	r28, 0x16	; 22
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	f8 94       	cli
     2ec:	de bf       	out	0x3e, r29	; 62
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	cd bf       	out	0x3d, r28	; 61
     2f2:	18 2f       	mov	r17, r24
     2f4:	36 2e       	mov	r3, r22
     2f6:	24 2e       	mov	r2, r20
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
     2f8:	a8 95       	wdr
//  #define RR680MI resis680mi
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = MEM_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
     2fa:	a6 2e       	mov	r10, r22
     2fc:	bb 24       	eor	r11, r11
     2fe:	c5 01       	movw	r24, r10
     300:	8c 5a       	subi	r24, 0xAC	; 172
     302:	9d 4f       	sbci	r25, 0xFD	; 253
     304:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__eerd_byte_m328p>
     308:	8a 83       	std	Y+2, r24	; 0x02
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
  TriPinRL = MEM_read_byte(&PinRLtab[TristatePin]);	// intruction for TristatePin R_L
     30a:	82 2d       	mov	r24, r2
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	8c 5a       	subi	r24, 0xAC	; 172
     310:	9d 4f       	sbci	r25, 0xFD	; 253
     312:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__eerd_byte_m328p>
     316:	d8 2e       	mov	r13, r24
  TriPinRH = TriPinRL + TriPinRL;			// intruction for TristatePin R_H
     318:	08 2f       	mov	r16, r24
     31a:	00 0f       	add	r16, r16
  HiPinRL = MEM_read_byte(&PinRLtab[HighPin]);		// intruction for HighPin R_L
     31c:	e1 2e       	mov	r14, r17
     31e:	ff 24       	eor	r15, r15
     320:	c7 01       	movw	r24, r14
     322:	8c 5a       	subi	r24, 0xAC	; 172
     324:	9d 4f       	sbci	r25, 0xFD	; 253
     326:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__eerd_byte_m328p>
     32a:	c8 2e       	mov	r12, r24
  HiPinRH = HiPinRL + HiPinRL;				// intruction for HighPin R_H
     32c:	28 2f       	mov	r18, r24
     32e:	22 0f       	add	r18, r18
     330:	28 87       	std	Y+8, r18	; 0x08

  HiADCp = MEM_read_byte(&PinADCtab[HighPin]);		// intruction for ADC High-Pin 
     332:	c7 01       	movw	r24, r14
     334:	89 5a       	subi	r24, 0xA9	; 169
     336:	9d 4f       	sbci	r25, 0xFD	; 253
     338:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__eerd_byte_m328p>
     33c:	89 83       	std	Y+1, r24	; 0x01
  LoADCp = MEM_read_byte(&PinADCtab[LowPin]);		// intruction for ADC Low-Pin
     33e:	c5 01       	movw	r24, r10
     340:	89 5a       	subi	r24, 0xA9	; 169
     342:	9d 4f       	sbci	r25, 0xFD	; 253
     344:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__eerd_byte_m328p>
  HiADCm = HiADCp | TXD_MSK;
     348:	39 81       	ldd	r19, Y+1	; 0x01
     34a:	38 60       	ori	r19, 0x08	; 8
     34c:	39 83       	std	Y+1, r19	; 0x01
  HiADCp |= TXD_VAL;
  LoADCm = LoADCp | TXD_MSK;
     34e:	88 60       	ori	r24, 0x08	; 8
     350:	8b 83       	std	Y+3, r24	; 0x03
  LoADCp |= TXD_VAL;

  //setting of Pins 
  R_PORT = 0;				//resistor-Port outputs to 0
     352:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//Low-Pin to output and across R_L to GND
     354:	8a 81       	ldd	r24, Y+2	; 0x02
     356:	84 b9       	out	0x04, r24	; 4
  ADC_DDR = HiADCm;		//High-Pin to output
     358:	37 b9       	out	0x07, r19	; 7
  ADC_PORT = HiADCp;		//High-Pin fix to Vcc
     35a:	38 b9       	out	0x08, r19	; 8
  //for some MOSFET the gate (TristatePin) must be discharged
  ChargePin10ms(TriPinRL,0);		//discharge for N-Kanal
     35c:	8d 2d       	mov	r24, r13
     35e:	60 e0       	ldi	r22, 0x00	; 0
     360:	0e 94 3e 01 	call	0x27c	; 0x27c <ChargePin10ms>
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin 
     364:	83 2d       	mov	r24, r3
     366:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
     36a:	9a 87       	std	Y+10, r25	; 0x0a
     36c:	89 87       	std	Y+9, r24	; 0x09
  if(adc.lp_otr >= 977) {		//no current now? 
     36e:	a3 e0       	ldi	r26, 0x03	; 3
     370:	81 3d       	cpi	r24, 0xD1	; 209
     372:	9a 07       	cpc	r25, r26
     374:	48 f0       	brcs	.+18     	; 0x388 <CheckPins+0xca>
     ChargePin10ms(TriPinRL,1);	 	//else: discharge for P-channel (Gate to VCC)
     376:	8d 2d       	mov	r24, r13
     378:	61 e0       	ldi	r22, 0x01	; 1
     37a:	0e 94 3e 01 	call	0x27c	; 0x27c <ChargePin10ms>
     adc.lp_otr = ReadADC(LowPin);	//read voltage of Low-Pin again
     37e:	83 2d       	mov	r24, r3
     380:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
     384:	9a 87       	std	Y+10, r25	; 0x0a
     386:	89 87       	std	Y+9, r24	; 0x09
  lcd_line2();
  lcd_clear_line();
  lcd_line2();
#endif

  if(adc.lp_otr > 92) {  //there is some current without TristatePin current 
     388:	e9 85       	ldd	r30, Y+9	; 0x09
     38a:	fa 85       	ldd	r31, Y+10	; 0x0a
     38c:	ed 35       	cpi	r30, 0x5D	; 93
     38e:	f1 05       	cpc	r31, r1
     390:	08 f4       	brcc	.+2      	; 0x394 <CheckPins+0xd6>
     392:	aa c0       	rjmp	.+340    	; 0x4e8 <CheckPins+0x22a>
     lcd_testpin(HighPin);
     lcd_space();
     wait1s();
#endif
     //Test if N-JFET or if self-conducting N-MOSFET
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
     394:	8a 81       	ldd	r24, Y+2	; 0x02
     396:	80 2b       	or	r24, r16
     398:	84 b9       	out	0x04, r24	; 4
     adc.lp1 = W20msReadADC(LowPin);	//measure voltage at the assumed Source 
     39a:	83 2d       	mov	r24, r3
     39c:	0e 94 93 19 	call	0x3326	; 0x3326 <W20msReadADC>
     3a0:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     3a2:	82 2d       	mov	r24, r2
     3a4:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
     3a8:	7c 01       	movw	r14, r24
     R_PORT = TriPinRH;			//switch R_H for Tristate-Pin (probably Gate) to VCC
     3aa:	05 b9       	out	0x05, r16	; 5
     adc.lp2 = W20msReadADC(LowPin);	//measure voltage at the assumed Source again
     3ac:	83 2d       	mov	r24, r3
     3ae:	0e 94 93 19 	call	0x3326	; 0x3326 <W20msReadADC>
     //If it is a self-conducting MOSFET or JFET, then must be: adc.lp2 > adc.lp1 
     if(adc.lp2>(adc.lp1+488)) {
     3b2:	95 01       	movw	r18, r10
     3b4:	28 51       	subi	r18, 0x18	; 24
     3b6:	3e 4f       	sbci	r19, 0xFE	; 254
     3b8:	28 17       	cp	r18, r24
     3ba:	39 07       	cpc	r19, r25
     3bc:	08 f0       	brcs	.+2      	; 0x3c0 <CheckPins+0x102>
     3be:	40 c0       	rjmp	.+128    	; 0x440 <CheckPins+0x182>
        //measure voltage at the  Gate, differ between MOSFET and JFET
        ADC_PORT = TXD_VAL;
     3c0:	88 e0       	ldi	r24, 0x08	; 8
     3c2:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = LoADCm;	//Low-Pin fix to GND
     3c4:	fb 81       	ldd	r31, Y+3	; 0x03
     3c6:	f7 b9       	out	0x07, r31	; 7
        R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     3c8:	80 2f       	mov	r24, r16
     3ca:	8c 29       	or	r24, r12
     3cc:	84 b9       	out	0x04, r24	; 4
        R_PORT = TriPinRH | HiPinRL;	//switch R_L for High-Pin to VCC
     3ce:	85 b9       	out	0x05, r24	; 5
        adc.lp2 = W20msReadADC(TristatePin); //read voltage of assumed Gate 
     3d0:	82 2d       	mov	r24, r2
     3d2:	0e 94 93 19 	call	0x3326	; 0x3326 <W20msReadADC>
        if(adc.lp2>3911) {  //MOSFET
     3d6:	2f e0       	ldi	r18, 0x0F	; 15
     3d8:	88 34       	cpi	r24, 0x48	; 72
     3da:	92 07       	cpc	r25, r18
     3dc:	28 f0       	brcs	.+10     	; 0x3e8 <CheckPins+0x12a>
           PartFound = PART_FET;	//N-Kanal-MOSFET
     3de:	83 e0       	ldi	r24, 0x03	; 3
     3e0:	80 93 09 01 	sts	0x0109, r24
           PartMode = PART_MODE_N_D_MOS; //Depletion-MOSFET
     3e4:	84 e0       	ldi	r24, 0x04	; 4
     3e6:	04 c0       	rjmp	.+8      	; 0x3f0 <CheckPins+0x132>
        } else {  //JFET (pn-passage between Gate and Source is conducting )
           PartFound = PART_FET;	//N-Kanal-JFET
     3e8:	83 e0       	ldi	r24, 0x03	; 3
     3ea:	80 93 09 01 	sts	0x0109, r24
           PartMode = PART_MODE_N_JFET;
     3ee:	86 e0       	ldi	r24, 0x06	; 6
     3f0:	80 93 08 01 	sts	0x0108, r24
        }
//      if ((PartReady == 0) || (adc.lp1 > trans.uBE[0])) 
//      there is no way to find out the right Source / Drain
        trans.uBE[0] = adc.lp1;
     3f4:	b0 92 51 01 	sts	0x0151, r11
     3f8:	a0 92 50 01 	sts	0x0150, r10
        gthvoltage = adc.lp1 - adc.tp1;	//voltage GS (Source - Gate)
     3fc:	c5 01       	movw	r24, r10
     3fe:	8e 19       	sub	r24, r14
     400:	9f 09       	sbc	r25, r15
     402:	90 93 59 01 	sts	0x0159, r25
     406:	80 93 58 01 	sts	0x0158, r24
        trans.uBE[1] = (unsigned int)(((unsigned long)adc.lp1 * 1000) / RR680MI); // Id 0.01mA
     40a:	b5 01       	movw	r22, r10
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	28 ee       	ldi	r18, 0xE8	; 232
     412:	33 e0       	ldi	r19, 0x03	; 3
     414:	40 e0       	ldi	r20, 0x00	; 0
     416:	50 e0       	ldi	r21, 0x00	; 0
     418:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
     41c:	20 91 04 01 	lds	r18, 0x0104
     420:	30 91 05 01 	lds	r19, 0x0105
     424:	40 e0       	ldi	r20, 0x00	; 0
     426:	50 e0       	ldi	r21, 0x00	; 0
     428:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
     42c:	30 93 53 01 	sts	0x0153, r19
     430:	20 93 52 01 	sts	0x0152, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     434:	20 92 54 01 	sts	0x0154, r2
        trans.c = HighPin;
     438:	10 93 55 01 	sts	0x0155, r17
        trans.e = LowPin;
     43c:	30 92 56 01 	sts	0x0156, r3
     }

     ADC_PORT = TXD_VAL;		// direct outputs to GND
     440:	88 e0       	ldi	r24, 0x08	; 8
     442:	88 b9       	out	0x08, r24	; 8

     //Test, if P-JFET or if self-conducting P-MOSFET
     ADC_DDR = LoADCm;		//switch Low-Pin (assumed Drain) direct to GND,
     444:	3b 81       	ldd	r19, Y+3	; 0x03
     446:	37 b9       	out	0x07, r19	; 7
				//R_H for Tristate-Pin (assumed Gate) is already switched to VCC
     R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     448:	80 2f       	mov	r24, r16
     44a:	8c 29       	or	r24, r12
     44c:	84 b9       	out	0x04, r24	; 4
     R_PORT = TriPinRH | HiPinRL;	//High-Pin across R_L to Vcc
     44e:	85 b9       	out	0x05, r24	; 5
     adc.hp1 = W20msReadADC(HighPin);	//measure voltage at assumed Source 
     450:	81 2f       	mov	r24, r17
     452:	0e 94 93 19 	call	0x3326	; 0x3326 <W20msReadADC>
     456:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     458:	82 2d       	mov	r24, r2
     45a:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
     45e:	7c 01       	movw	r14, r24
     R_PORT = HiPinRL;			//switch R_H for Tristate-Pin (assumed Gate) to GND
     460:	c5 b8       	out	0x05, r12	; 5
     adc.hp2 = W20msReadADC(HighPin);	//read voltage at assumed Source again
     462:	81 2f       	mov	r24, r17
     464:	0e 94 93 19 	call	0x3326	; 0x3326 <W20msReadADC>
     //if it is a self-conducting P_MOSFET or P-JFET , then must be:  adc.hp1 > adc.hp2 
     if(adc.hp1>(adc.hp2+488)) {
     468:	88 51       	subi	r24, 0x18	; 24
     46a:	9e 4f       	sbci	r25, 0xFE	; 254
     46c:	8a 15       	cp	r24, r10
     46e:	9b 05       	cpc	r25, r11
     470:	d8 f5       	brcc	.+118    	; 0x4e8 <CheckPins+0x22a>
        //read voltage at the Gate , to differ between MOSFET and JFET
        ADC_PORT = HiADCp;	//switch High-Pin directly to VCC
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = HiADCm;	//switch High-Pin to output
     476:	87 b9       	out	0x07, r24	; 7
        adc.tp2 = W20msReadADC(TristatePin); //read voltage at the assumed Gate 
     478:	82 2d       	mov	r24, r2
     47a:	0e 94 93 19 	call	0x3326	; 0x3326 <W20msReadADC>
        if(adc.tp2<977) { 		//MOSFET
     47e:	a3 e0       	ldi	r26, 0x03	; 3
     480:	81 3d       	cpi	r24, 0xD1	; 209
     482:	9a 07       	cpc	r25, r26
     484:	28 f4       	brcc	.+10     	; 0x490 <CheckPins+0x1d2>
           PartFound = PART_FET;	//P-Kanal-MOSFET
     486:	83 e0       	ldi	r24, 0x03	; 3
     488:	80 93 09 01 	sts	0x0109, r24
           PartMode = PART_MODE_P_D_MOS; //Depletion-MOSFET
     48c:	85 e0       	ldi	r24, 0x05	; 5
     48e:	04 c0       	rjmp	.+8      	; 0x498 <CheckPins+0x1da>
        } else { 			//JFET (pn-passage between Gate and Source is conducting)
           PartFound = PART_FET;	//P-Kanal-JFET
     490:	83 e0       	ldi	r24, 0x03	; 3
     492:	80 93 09 01 	sts	0x0109, r24
           PartMode = PART_MODE_P_JFET;
     496:	87 e0       	ldi	r24, 0x07	; 7
     498:	80 93 08 01 	sts	0x0108, r24
        }
        gthvoltage = adc.tp1 - adc.hp1;		//voltage GS (Gate - Source)
     49c:	ea 18       	sub	r14, r10
     49e:	fb 08       	sbc	r15, r11
     4a0:	f0 92 59 01 	sts	0x0159, r15
     4a4:	e0 92 58 01 	sts	0x0158, r14
        trans.uBE[1] = (unsigned int)(((unsigned long)(ADCconfig.U_AVCC - adc.hp1) * 1000) / RR680PL); // Id 0.01mA
     4a8:	60 91 3f 01 	lds	r22, 0x013F
     4ac:	70 91 40 01 	lds	r23, 0x0140
     4b0:	6a 19       	sub	r22, r10
     4b2:	7b 09       	sbc	r23, r11
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	28 ee       	ldi	r18, 0xE8	; 232
     4ba:	33 e0       	ldi	r19, 0x03	; 3
     4bc:	40 e0       	ldi	r20, 0x00	; 0
     4be:	50 e0       	ldi	r21, 0x00	; 0
     4c0:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
     4c4:	20 91 0a 01 	lds	r18, 0x010A
     4c8:	30 91 0b 01 	lds	r19, 0x010B
     4cc:	40 e0       	ldi	r20, 0x00	; 0
     4ce:	50 e0       	ldi	r21, 0x00	; 0
     4d0:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
     4d4:	30 93 53 01 	sts	0x0153, r19
     4d8:	20 93 52 01 	sts	0x0152, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     4dc:	20 92 54 01 	sts	0x0154, r2
        trans.c = LowPin;
     4e0:	30 92 55 01 	sts	0x0155, r3
        trans.e = HighPin;
     4e4:	10 93 56 01 	sts	0x0156, r17
  } // end component has current without TristatePin signal


#ifdef COMMON_COLLECTOR
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
     4e8:	88 e0       	ldi	r24, 0x08	; 8
     4ea:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;			// Collector direct to GND
     4ec:	bb 81       	ldd	r27, Y+3	; 0x03
     4ee:	b7 b9       	out	0x07, r27	; 7
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
     4f0:	c5 b8       	out	0x05, r12	; 5
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
     4f2:	ec 2d       	mov	r30, r12
     4f4:	ed 29       	or	r30, r13
     4f6:	eb 87       	std	Y+11, r30	; 0x0b
     4f8:	e4 b9       	out	0x04, r30	; 4
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     4fa:	a0 90 3f 01 	lds	r10, 0x013F
     4fe:	b0 90 40 01 	lds	r11, 0x0140
     502:	81 2f       	mov	r24, r17
     504:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
     508:	7c 01       	movw	r14, r24
  adc.tp1 = ReadADC(TristatePin);	// voltage at the base resistor
     50a:	82 2d       	mov	r24, r2
     50c:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
     510:	4c 01       	movw	r8, r24

  if (adc.tp1 < 10) {
     512:	8a 30       	cpi	r24, 0x0A	; 10
     514:	91 05       	cpc	r25, r1
     516:	68 f5       	brcc	.+90     	; 0x572 <CheckPins+0x2b4>
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
     518:	80 2f       	mov	r24, r16
     51a:	8c 29       	or	r24, r12
     51c:	84 b9       	out	0x04, r24	; 4
     adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);
     51e:	a0 90 3f 01 	lds	r10, 0x013F
     522:	b0 90 40 01 	lds	r11, 0x0140
     526:	81 2f       	mov	r24, r17
     528:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
     52c:	a8 1a       	sub	r10, r24
     52e:	b9 0a       	sbc	r11, r25
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
     530:	82 2d       	mov	r24, r2
     532:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
     536:	4c 01       	movw	r8, r24
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     538:	25 01       	movw	r4, r10
     53a:	66 24       	eor	r6, r6
     53c:	77 24       	eor	r7, r7
     53e:	20 91 0a 01 	lds	r18, 0x010A
     542:	30 91 0b 01 	lds	r19, 0x010B
     546:	40 e0       	ldi	r20, 0x00	; 0
     548:	50 e0       	ldi	r21, 0x00	; 0
     54a:	60 e6       	ldi	r22, 0x60	; 96
     54c:	77 eb       	ldi	r23, 0xB7	; 183
     54e:	87 e4       	ldi	r24, 0x47	; 71
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
     556:	c3 01       	movw	r24, r6
     558:	b2 01       	movw	r22, r4
     55a:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
     55e:	94 01       	movw	r18, r8
     560:	40 e0       	ldi	r20, 0x00	; 0
     562:	50 e0       	ldi	r21, 0x00	; 0
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     564:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
     568:	2c 83       	std	Y+4, r18	; 0x04
     56a:	3d 83       	std	Y+5, r19	; 0x05
     56c:	4e 83       	std	Y+6, r20	; 0x06
     56e:	5f 83       	std	Y+7, r21	; 0x07
     570:	0f c0       	rjmp	.+30     	; 0x590 <CheckPins+0x2d2>
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
  ADC_DDR = LoADCm;			// Collector direct to GND
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     572:	ae 18       	sub	r10, r14
     574:	bf 08       	sbc	r11, r15
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
 #else
     c_hfe = ((adc.hp1 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
  } else {
     c_hfe = (unsigned long)((adc.hp1 - adc.tp1) / adc.tp1);
     576:	c5 01       	movw	r24, r10
     578:	88 19       	sub	r24, r8
     57a:	99 09       	sbc	r25, r9
     57c:	b4 01       	movw	r22, r8
     57e:	0e 94 b1 1c 	call	0x3962	; 0x3962 <__udivmodhi4>
     582:	cb 01       	movw	r24, r22
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e0       	ldi	r27, 0x00	; 0
     588:	8c 83       	std	Y+4, r24	; 0x04
     58a:	9d 83       	std	Y+5, r25	; 0x05
     58c:	ae 83       	std	Y+6, r26	; 0x06
     58e:	bf 83       	std	Y+7, r27	; 0x07
  }
#endif

  //set Pins again for circuit with common Emitter PNP
  R_DDR = LoPinRL;		//switch R_L port for Low-Pin to output (GND)
     590:	9a 81       	ldd	r25, Y+2	; 0x02
     592:	94 b9       	out	0x04, r25	; 4
  R_PORT = 0;			//switch all resistor ports to GND
     594:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = HiADCm;		//switch High-Pin to output
     596:	a9 81       	ldd	r26, Y+1	; 0x01
     598:	a7 b9       	out	0x07, r26	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
     59a:	a8 b9       	out	0x08, r26	; 8
  wait5ms();
     59c:	0e 94 0b 14 	call	0x2816	; 0x2816 <wait5ms>
  
  if(adc.lp_otr < 977) {
     5a0:	e9 85       	ldd	r30, Y+9	; 0x09
     5a2:	fa 85       	ldd	r31, Y+10	; 0x0a
     5a4:	23 e0       	ldi	r18, 0x03	; 3
     5a6:	e1 3d       	cpi	r30, 0xD1	; 209
     5a8:	f2 07       	cpc	r31, r18
     5aa:	08 f0       	brcs	.+2      	; 0x5ae <CheckPins+0x2f0>
     5ac:	a2 c2       	rjmp	.+1348   	; 0xaf2 <__stack+0x1f3>
     lcd_testpin(HighPin);
     lcd_space();
     wait1s();
#endif
     //Test to PNP
     R_DDR = LoPinRL | TriPinRL;	//switch R_L port for Tristate-Pin to output (GND), for Test of PNP
     5ae:	3a 81       	ldd	r19, Y+2	; 0x02
     5b0:	3d 29       	or	r19, r13
     5b2:	3f 87       	std	Y+15, r19	; 0x0f
     5b4:	34 b9       	out	0x04, r19	; 4
     adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin
     5b6:	83 2d       	mov	r24, r3
     5b8:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
     if(adc.lp1 > 3422) {
     5bc:	ad e0       	ldi	r26, 0x0D	; 13
     5be:	8f 35       	cpi	r24, 0x5F	; 95
     5c0:	9a 07       	cpc	r25, r26
     5c2:	08 f4       	brcc	.+2      	; 0x5c6 <CheckPins+0x308>
     5c4:	e1 c0       	rjmp	.+450    	; 0x788 <CheckPins+0x4ca>
        //component has current => PNP-Transistor or equivalent
        //compute current amplification factor in both directions
        R_DDR = LoPinRL | TriPinRH;	//switch R_H port for Tristate-Pin (Base) to output (GND)
     5c6:	ba 81       	ldd	r27, Y+2	; 0x02
     5c8:	b0 2b       	or	r27, r16
     5ca:	b8 8b       	std	Y+16, r27	; 0x10
     5cc:	b4 b9       	out	0x04, r27	; 4

        adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin (assumed Collector)
     5ce:	83 2d       	mov	r24, r3
     5d0:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
     5d4:	9a 8b       	std	Y+18, r25	; 0x12
     5d6:	89 8b       	std	Y+17, r24	; 0x11
        adc.tp2 = ReadADC(TristatePin);	//measure voltage at TristatePin (Base) 
     5d8:	82 2d       	mov	r24, r2
     5da:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
     5de:	9d 8b       	std	Y+21, r25	; 0x15
     5e0:	8c 8b       	std	Y+20, r24	; 0x14
        //check, if Test is done before 
        if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     5e2:	80 91 09 01 	lds	r24, 0x0109
     5e6:	82 50       	subi	r24, 0x02	; 2
     5e8:	82 30       	cpi	r24, 0x02	; 2
     5ea:	18 f4       	brcc	.+6      	; 0x5f2 <CheckPins+0x334>
           PartReady = 1;
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	80 93 06 01 	sts	0x0106, r24
        }
        trans.uBE[PartReady] = ReadADC(HighPin) - adc.tp2;	// Base Emitter Voltage
     5f2:	e0 90 06 01 	lds	r14, 0x0106
     5f6:	ff 24       	eor	r15, r15
     5f8:	81 2f       	mov	r24, r17
     5fa:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
     5fe:	f7 01       	movw	r30, r14
     600:	ee 0f       	add	r30, r30
     602:	ff 1f       	adc	r31, r31
     604:	e0 5b       	subi	r30, 0xB0	; 176
     606:	fe 4f       	sbci	r31, 0xFE	; 254
     608:	2c 89       	ldd	r18, Y+20	; 0x14
     60a:	3d 89       	ldd	r19, Y+21	; 0x15
     60c:	82 1b       	sub	r24, r18
     60e:	93 0b       	sbc	r25, r19
     610:	91 83       	std	Z+1, r25	; 0x01
     612:	80 83       	st	Z, r24

        //compute current amplification factor for circuit with common Emitter
        //hFE = B = Collector current / Base current
        if(adc.tp2 < 53) {
     614:	25 33       	cpi	r18, 0x35	; 53
     616:	31 05       	cpc	r19, r1
     618:	20 f4       	brcc	.+8      	; 0x622 <CheckPins+0x364>
#if DebugOut == 5
           lcd_data('<');
           lcd_data('5');
           lcd_data('3');
#endif
           adc.tp2 = 53;
     61a:	85 e3       	ldi	r24, 0x35	; 53
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	9d 8b       	std	Y+21, r25	; 0x15
     620:	8c 8b       	std	Y+20, r24	; 0x14
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     622:	e0 90 06 01 	lds	r14, 0x0106
     626:	ff 24       	eor	r15, r15
     628:	a9 89       	ldd	r26, Y+17	; 0x11
     62a:	ba 89       	ldd	r27, Y+18	; 0x12
     62c:	2d 01       	movw	r4, r26
     62e:	66 24       	eor	r6, r6
     630:	77 24       	eor	r7, r7
     632:	20 91 04 01 	lds	r18, 0x0104
     636:	30 91 05 01 	lds	r19, 0x0105
     63a:	40 e0       	ldi	r20, 0x00	; 0
     63c:	50 e0       	ldi	r21, 0x00	; 0
     63e:	60 e6       	ldi	r22, 0x60	; 96
     640:	77 eb       	ldi	r23, 0xB7	; 183
     642:	87 e4       	ldi	r24, 0x47	; 71
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
     64a:	c3 01       	movw	r24, r6
     64c:	b2 01       	movw	r22, r4
     64e:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
                 (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
     652:	ec 89       	ldd	r30, Y+20	; 0x14
     654:	fd 89       	ldd	r31, Y+21	; 0x15
     656:	9f 01       	movw	r18, r30
     658:	40 e0       	ldi	r20, 0x00	; 0
     65a:	50 e0       	ldi	r21, 0x00	; 0
     65c:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
#endif
           adc.tp2 = 53;
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     660:	f7 01       	movw	r30, r14
     662:	ee 0f       	add	r30, r30
     664:	ff 1f       	adc	r31, r31
     666:	ee 0f       	add	r30, r30
     668:	ff 1f       	adc	r31, r31
     66a:	e8 5b       	subi	r30, 0xB8	; 184
     66c:	fe 4f       	sbci	r31, 0xFE	; 254
     66e:	20 83       	st	Z, r18
     670:	31 83       	std	Z+1, r19	; 0x01
     672:	42 83       	std	Z+2, r20	; 0x02
     674:	53 83       	std	Z+3, r21	; 0x03
        trans.hfe[PartReady] = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
#ifdef COMMON_COLLECTOR
        //current amplification factor for common  Collector (Emitter follower)
        // c_hFE = (Emitter current - Base current) / Base current
        if (c_hfe > trans.hfe[PartReady]) {
     676:	8c 81       	ldd	r24, Y+4	; 0x04
     678:	9d 81       	ldd	r25, Y+5	; 0x05
     67a:	ae 81       	ldd	r26, Y+6	; 0x06
     67c:	bf 81       	ldd	r27, Y+7	; 0x07
     67e:	28 17       	cp	r18, r24
     680:	39 07       	cpc	r19, r25
     682:	4a 07       	cpc	r20, r26
     684:	5b 07       	cpc	r21, r27
     686:	98 f4       	brcc	.+38     	; 0x6ae <CheckPins+0x3f0>
           trans.hfe[PartReady] = c_hfe;
     688:	80 83       	st	Z, r24
     68a:	91 83       	std	Z+1, r25	; 0x01
     68c:	a2 83       	std	Z+2, r26	; 0x02
     68e:	b3 83       	std	Z+3, r27	; 0x03
           trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.hp1 - adc.tp1;	// Base Emitter Voltage common collector
     690:	f7 01       	movw	r30, r14
     692:	ee 0f       	add	r30, r30
     694:	ff 1f       	adc	r31, r31
     696:	e0 5b       	subi	r30, 0xB0	; 176
     698:	fe 4f       	sbci	r31, 0xFE	; 254
     69a:	80 91 3f 01 	lds	r24, 0x013F
     69e:	90 91 40 01 	lds	r25, 0x0140
     6a2:	8a 19       	sub	r24, r10
     6a4:	9b 09       	sbc	r25, r11
     6a6:	88 19       	sub	r24, r8
     6a8:	99 09       	sbc	r25, r9
     6aa:	91 83       	std	Z+1, r25	; 0x01
     6ac:	80 83       	st	Z, r24
        }
#endif

 
        if(PartFound != PART_THYRISTOR) {
     6ae:	80 91 09 01 	lds	r24, 0x0109
     6b2:	85 30       	cpi	r24, 0x05	; 5
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <CheckPins+0x3fa>
     6b6:	68 c0       	rjmp	.+208    	; 0x788 <CheckPins+0x4ca>
           if(adc.tp2 > 977) {
     6b8:	ac 89       	ldd	r26, Y+20	; 0x14
     6ba:	bd 89       	ldd	r27, Y+21	; 0x15
     6bc:	e3 e0       	ldi	r30, 0x03	; 3
     6be:	a2 3d       	cpi	r26, 0xD2	; 210
     6c0:	be 07       	cpc	r27, r30
     6c2:	30 f0       	brcs	.+12     	; 0x6d0 <CheckPins+0x412>
              //PNP-Transistor is found (Base voltage moves to VCC)
              PartFound = PART_TRANSISTOR;
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	80 93 09 01 	sts	0x0109, r24
              PartMode = PART_MODE_PNP;
     6ca:	80 93 08 01 	sts	0x0108, r24
     6ce:	56 c0       	rjmp	.+172    	; 0x77c <CheckPins+0x4be>
           } else {
              if((adc.lp_otr < 97) && (adc.lp1 > 2000)) {
     6d0:	29 85       	ldd	r18, Y+9	; 0x09
     6d2:	3a 85       	ldd	r19, Y+10	; 0x0a
     6d4:	21 36       	cpi	r18, 0x61	; 97
     6d6:	31 05       	cpc	r19, r1
     6d8:	08 f0       	brcs	.+2      	; 0x6dc <CheckPins+0x41e>
     6da:	50 c0       	rjmp	.+160    	; 0x77c <CheckPins+0x4be>
     6dc:	89 89       	ldd	r24, Y+17	; 0x11
     6de:	9a 89       	ldd	r25, Y+18	; 0x12
     6e0:	a7 e0       	ldi	r26, 0x07	; 7
     6e2:	81 3d       	cpi	r24, 0xD1	; 209
     6e4:	9a 07       	cpc	r25, r26
     6e6:	08 f4       	brcc	.+2      	; 0x6ea <CheckPins+0x42c>
     6e8:	49 c0       	rjmp	.+146    	; 0x77c <CheckPins+0x4be>
                 //is flow voltage low enough in the closed  state?
                 //(since D-Mode-FET would be by mistake detected as E-Mode )
        	 PartFound = PART_FET;		//P-Kanal-MOSFET if found (Basis/Gate moves not to VCC)
     6ea:	83 e0       	ldi	r24, 0x03	; 3
     6ec:	80 93 09 01 	sts	0x0109, r24
        	 PartMode = PART_MODE_P_E_MOS;
     6f0:	80 93 08 01 	sts	0x0108, r24
                 PinMSK = LoADCm & 7;
     6f4:	eb 80       	ldd	r14, Y+3	; 0x03
     6f6:	b7 e0       	ldi	r27, 0x07	; 7
     6f8:	eb 22       	and	r14, r27
        	 //measure the Gate threshold voltage
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
     6fa:	82 2d       	mov	r24, r2
     6fc:	80 64       	ori	r24, 0x40	; 64
     6fe:	80 93 7c 00 	sts	0x007C, r24
        	 gthvoltage = 1;		// round up ((1*4)/9)
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	90 93 59 01 	sts	0x0159, r25
     70a:	80 93 58 01 	sts	0x0158, r24
        	 for(ii=0;ii<11;ii++) {
     70e:	40 e0       	ldi	r20, 0x00	; 0
        	    wdt_reset();
     710:	a8 95       	wdr
        	    ChargePin10ms(TriPinRL,1);
     712:	8d 2d       	mov	r24, r13
     714:	61 e0       	ldi	r22, 0x01	; 1
     716:	4e 8b       	std	Y+22, r20	; 0x16
     718:	0e 94 3e 01 	call	0x27c	; 0x27c <ChargePin10ms>
                    R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (Basis) to GND
     71c:	e8 89       	ldd	r30, Y+16	; 0x10
     71e:	e4 b9       	out	0x04, r30	; 4
     720:	4e 89       	ldd	r20, Y+22	; 0x16
        	    while (!(ADC_PIN&PinMSK));  // Wait, until the MOSFET switches and Drain moves to VCC
     722:	86 b1       	in	r24, 0x06	; 6
     724:	8e 21       	and	r24, r14
     726:	e9 f3       	breq	.-6      	; 0x722 <CheckPins+0x464>
        	    R_DDR = LoPinRL;
     728:	fa 81       	ldd	r31, Y+2	; 0x02
     72a:	f4 b9       	out	0x04, r31	; 4
        	    ADCSRA |= (1<<ADSC);	// Start Conversion
     72c:	80 91 7a 00 	lds	r24, 0x007A
     730:	80 64       	ori	r24, 0x40	; 64
     732:	80 93 7a 00 	sts	0x007A, r24
        	    while (ADCSRA&(1<<ADSC));	// wait
     736:	80 91 7a 00 	lds	r24, 0x007A
     73a:	86 fd       	sbrc	r24, 6
     73c:	fc cf       	rjmp	.-8      	; 0x736 <CheckPins+0x478>
      		    gthvoltage += (1023 - ADCW); // Add Tristatepin-Voltage
     73e:	20 91 78 00 	lds	r18, 0x0078
     742:	30 91 79 00 	lds	r19, 0x0079
     746:	80 91 58 01 	lds	r24, 0x0158
     74a:	90 91 59 01 	lds	r25, 0x0159
     74e:	81 50       	subi	r24, 0x01	; 1
     750:	9c 4f       	sbci	r25, 0xFC	; 252
     752:	82 1b       	sub	r24, r18
     754:	93 0b       	sbc	r25, r19
     756:	90 93 59 01 	sts	0x0159, r25
     75a:	80 93 58 01 	sts	0x0158, r24
        	 PartMode = PART_MODE_P_E_MOS;
                 PinMSK = LoADCm & 7;
        	 //measure the Gate threshold voltage
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
        	 gthvoltage = 1;		// round up ((1*4)/9)
        	 for(ii=0;ii<11;ii++) {
     75e:	4f 5f       	subi	r20, 0xFF	; 255
     760:	4b 30       	cpi	r20, 0x0B	; 11
     762:	b1 f6       	brne	.-84     	; 0x710 <CheckPins+0x452>
        	    R_DDR = LoPinRL;
        	    ADCSRA |= (1<<ADSC);	// Start Conversion
        	    while (ADCSRA&(1<<ADSC));	// wait
      		    gthvoltage += (1023 - ADCW); // Add Tristatepin-Voltage
                 }
                 gthvoltage *= 4;		// is equal to 44*ADCW
     764:	88 0f       	add	r24, r24
     766:	99 1f       	adc	r25, r25
     768:	88 0f       	add	r24, r24
     76a:	99 1f       	adc	r25, r25
                 gthvoltage /= 9;		// gives resolution in mV
     76c:	69 e0       	ldi	r22, 0x09	; 9
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	0e 94 b1 1c 	call	0x3962	; 0x3962 <__udivmodhi4>
     774:	70 93 59 01 	sts	0x0159, r23
     778:	60 93 58 01 	sts	0x0158, r22
              }
           }
           trans.b = TristatePin;
     77c:	20 92 54 01 	sts	0x0154, r2
           trans.c = LowPin;
     780:	30 92 55 01 	sts	0x0155, r3
           trans.e = HighPin;
     784:	10 93 56 01 	sts	0x0156, r17
        }  // end if PartFound != PART_THYRISTOR
    } // end component has current => PNP

#ifdef COMMON_COLLECTOR
    // Low-Pin=RL- HighPin=VCC
    R_DDR = LoPinRL | TriPinRL;
     788:	2f 85       	ldd	r18, Y+15	; 0x0f
     78a:	24 b9       	out	0x04, r18	; 4
    R_PORT = TriPinRL;			// TriPin=RL+  NPN with common Collector
     78c:	d5 b8       	out	0x05, r13	; 5
    adc.lp1 = W5msReadADC(LowPin);	// voltage at Emitter resistor
     78e:	83 2d       	mov	r24, r3
     790:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
     794:	2c 01       	movw	r4, r24
    adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     796:	80 91 3f 01 	lds	r24, 0x013F
     79a:	90 91 40 01 	lds	r25, 0x0140
     79e:	9a 8b       	std	Y+18, r25	; 0x12
     7a0:	89 8b       	std	Y+17, r24	; 0x11
     7a2:	82 2d       	mov	r24, r2
     7a4:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
     7a8:	a9 89       	ldd	r26, Y+17	; 0x11
     7aa:	ba 89       	ldd	r27, Y+18	; 0x12
     7ac:	a8 1b       	sub	r26, r24
     7ae:	b9 0b       	sbc	r27, r25
     7b0:	ba 8b       	std	Y+18, r27	; 0x12
     7b2:	a9 8b       	std	Y+17, r26	; 0x11
    if (adc.tp1 < 10) {
     7b4:	aa 30       	cpi	r26, 0x0A	; 10
     7b6:	b1 05       	cpc	r27, r1
     7b8:	b0 f5       	brcc	.+108    	; 0x826 <CheckPins+0x568>
       R_DDR = LoPinRL | TriPinRH;
     7ba:	8a 81       	ldd	r24, Y+2	; 0x02
     7bc:	80 2b       	or	r24, r16
     7be:	84 b9       	out	0x04, r24	; 4
       R_PORT = TriPinRH;		// Tripin=RH+
     7c0:	05 b9       	out	0x05, r16	; 5
       adc.lp1 = W5msReadADC(LowPin);
     7c2:	83 2d       	mov	r24, r3
     7c4:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
     7c8:	2c 01       	movw	r4, r24
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     7ca:	e0 91 3f 01 	lds	r30, 0x013F
     7ce:	f0 91 40 01 	lds	r31, 0x0140
     7d2:	fa 8b       	std	Y+18, r31	; 0x12
     7d4:	e9 8b       	std	Y+17, r30	; 0x11
     7d6:	82 2d       	mov	r24, r2
     7d8:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
     7dc:	29 89       	ldd	r18, Y+17	; 0x11
     7de:	3a 89       	ldd	r19, Y+18	; 0x12
     7e0:	28 1b       	sub	r18, r24
     7e2:	39 0b       	sbc	r19, r25
     7e4:	3a 8b       	std	Y+18, r19	; 0x12
     7e6:	29 8b       	std	Y+17, r18	; 0x11
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     7e8:	42 01       	movw	r8, r4
     7ea:	aa 24       	eor	r10, r10
     7ec:	bb 24       	eor	r11, r11
     7ee:	20 91 04 01 	lds	r18, 0x0104
     7f2:	30 91 05 01 	lds	r19, 0x0105
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	60 e6       	ldi	r22, 0x60	; 96
     7fc:	77 eb       	ldi	r23, 0xB7	; 183
     7fe:	87 e4       	ldi	r24, 0x47	; 71
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
     806:	c5 01       	movw	r24, r10
     808:	b4 01       	movw	r22, r8
     80a:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
     80e:	a9 89       	ldd	r26, Y+17	; 0x11
     810:	ba 89       	ldd	r27, Y+18	; 0x12
     812:	9d 01       	movw	r18, r26
     814:	40 e0       	ldi	r20, 0x00	; 0
     816:	50 e0       	ldi	r21, 0x00	; 0
       R_DDR = LoPinRL | TriPinRH;
       R_PORT = TriPinRH;		// Tripin=RH+
       adc.lp1 = W5msReadADC(LowPin);
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     818:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
     81c:	2c 83       	std	Y+4, r18	; 0x04
     81e:	3d 83       	std	Y+5, r19	; 0x05
     820:	4e 83       	std	Y+6, r20	; 0x06
     822:	5f 83       	std	Y+7, r21	; 0x07
     824:	0f c0       	rjmp	.+30     	; 0x844 <CheckPins+0x586>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
 #else
       c_hfe = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
    } else {
       c_hfe = (adc.lp1 - adc.tp1) / adc.tp1;
     826:	c2 01       	movw	r24, r4
     828:	e9 89       	ldd	r30, Y+17	; 0x11
     82a:	fa 89       	ldd	r31, Y+18	; 0x12
     82c:	8e 1b       	sub	r24, r30
     82e:	9f 0b       	sbc	r25, r31
     830:	bf 01       	movw	r22, r30
     832:	0e 94 b1 1c 	call	0x3962	; 0x3962 <__udivmodhi4>
     836:	cb 01       	movw	r24, r22
     838:	a0 e0       	ldi	r26, 0x00	; 0
     83a:	b0 e0       	ldi	r27, 0x00	; 0
     83c:	8c 83       	std	Y+4, r24	; 0x04
     83e:	9d 83       	std	Y+5, r25	; 0x05
     840:	ae 83       	std	Y+6, r26	; 0x06
     842:	bf 83       	std	Y+7, r27	; 0x07
       lcd_string(utoa(adc.tp1,outval,10));
       wait1s();
#endif
#endif
    //Tristate (can be Base) to VCC, Test if NPN
    ADC_DDR = LoADCm;		//Low-Pin to output 0V
     844:	9b 81       	ldd	r25, Y+3	; 0x03
     846:	97 b9       	out	0x07, r25	; 7
    ADC_PORT = TXD_VAL;			//switch Low-Pin to GND
     848:	88 e0       	ldi	r24, 0x08	; 8
     84a:	88 b9       	out	0x08, r24	; 8
    R_DDR = TriPinRL | HiPinRL;		//RL port for High-Pin and Tristate-Pin to output
     84c:	ab 85       	ldd	r26, Y+11	; 0x0b
     84e:	a4 b9       	out	0x04, r26	; 4
    R_PORT = TriPinRL | HiPinRL;	//RL port for High-Pin and Tristate-Pin to Vcc
     850:	a5 b9       	out	0x05, r26	; 5
    adc.hp1 = W5msReadADC(HighPin);	//measure voltage at High-Pin  (Collector)
     852:	81 2f       	mov	r24, r17
     854:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
    if(adc.hp1 < 1600) {
     858:	b6 e0       	ldi	r27, 0x06	; 6
     85a:	80 34       	cpi	r24, 0x40	; 64
     85c:	9b 07       	cpc	r25, r27
     85e:	08 f0       	brcs	.+2      	; 0x862 <CheckPins+0x5a4>
     860:	44 c1       	rjmp	.+648    	; 0xaea <__stack+0x1eb>
       lcd_data('N');
       lcd_testpin(HighPin);
       lcd_space();
       wait1s();
#endif
       if(PartReady==1) {
     862:	80 91 06 01 	lds	r24, 0x0106
     866:	81 30       	cpi	r24, 0x01	; 1
     868:	09 f4       	brne	.+2      	; 0x86c <CheckPins+0x5ae>
     86a:	ac c1       	rjmp	.+856    	; 0xbc4 <__stack+0x2c5>
          goto widmes;
       }

       //Test auf Thyristor:
       //Gate discharge
       ChargePin10ms(TriPinRL,0);	//Tristate-Pin (Gate) across R_L 10ms to GND
     86c:	8d 2d       	mov	r24, r13
     86e:	60 e0       	ldi	r22, 0x00	; 0
     870:	0e 94 3e 01 	call	0x27c	; 0x27c <ChargePin10ms>
       adc.hp3 = W5msReadADC(HighPin);	//read voltage at High-Pin (probably Anode) again
     874:	81 2f       	mov	r24, r17
     876:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
     87a:	7c 01       	movw	r14, r24
					//current should still flow, if not,
					// no Thyristor or holding current to low 
		 	
       R_PORT = 0;			//switch R_L for High-Pin (probably Anode) to GND (turn off)
     87c:	15 b8       	out	0x05, r1	; 5
       wait5ms();
     87e:	0e 94 0b 14 	call	0x2816	; 0x2816 <wait5ms>
       R_PORT = HiPinRL;		//switch R_L for High-Pin (probably Anode) again to VCC
     882:	c5 b8       	out	0x05, r12	; 5
       adc.hp2 = W5msReadADC(HighPin);	//measure voltage at the High-Pin (probably Anode) again
     884:	81 2f       	mov	r24, r17
     886:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
       if((adc.hp3 < 1600) && (adc.hp2 > 4400)) {
     88a:	e0 e4       	ldi	r30, 0x40	; 64
     88c:	ee 16       	cp	r14, r30
     88e:	e6 e0       	ldi	r30, 0x06	; 6
     890:	fe 06       	cpc	r15, r30
     892:	08 f0       	brcs	.+2      	; 0x896 <CheckPins+0x5d8>
     894:	42 c0       	rjmp	.+132    	; 0x91a <__stack+0x1b>
     896:	f1 e1       	ldi	r31, 0x11	; 17
     898:	81 33       	cpi	r24, 0x31	; 49
     89a:	9f 07       	cpc	r25, r31
     89c:	f0 f1       	brcs	.+124    	; 0x91a <__stack+0x1b>
          //if the holding current was switched off the thyristor must be switched off too. 
          //if Thyristor was still swiched on, if gate was switched off => Thyristor
          PartFound = PART_THYRISTOR;
     89e:	85 e0       	ldi	r24, 0x05	; 5
     8a0:	80 93 09 01 	sts	0x0109, r24
          //Test if Triac
          R_DDR = 0;
     8a4:	14 b8       	out	0x04, r1	; 4
          R_PORT = 0;
     8a6:	15 b8       	out	0x05, r1	; 5
          ADC_PORT = LoADCp;	//Low-Pin fix to VCC
     8a8:	2b 81       	ldd	r18, Y+3	; 0x03
     8aa:	28 b9       	out	0x08, r18	; 8
          wait5ms();
     8ac:	0e 94 0b 14 	call	0x2816	; 0x2816 <wait5ms>
          R_DDR = HiPinRL;		//switch R_L port HighPin to output (GND)
     8b0:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) > 244) {
     8b2:	81 2f       	mov	r24, r17
     8b4:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
     8b8:	85 3f       	cpi	r24, 0xF5	; 245
     8ba:	91 05       	cpc	r25, r1
     8bc:	08 f0       	brcs	.+2      	; 0x8c0 <CheckPins+0x602>
     8be:	0f c1       	rjmp	.+542    	; 0xade <__stack+0x1df>
             goto savenresult;		//measure voltage at the  High-Pin (probably A2); if too high:
                                	//component has current => kein Triac
          }
          R_DDR = HiPinRL | TriPinRL;	//switch R_L port for TristatePin (Gate) to output (GND) => Triac should be triggered 
     8c0:	3b 85       	ldd	r19, Y+11	; 0x0b
     8c2:	34 b9       	out	0x04, r19	; 4
          if(W5msReadADC(TristatePin) < 977) {
     8c4:	82 2d       	mov	r24, r2
     8c6:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
     8ca:	a3 e0       	ldi	r26, 0x03	; 3
     8cc:	81 3d       	cpi	r24, 0xD1	; 209
     8ce:	9a 07       	cpc	r25, r26
     8d0:	08 f4       	brcc	.+2      	; 0x8d4 <CheckPins+0x616>
     8d2:	05 c1       	rjmp	.+522    	; 0xade <__stack+0x1df>
             goto savenresult; 		//measure voltage at the Tristate-Pin (probably Gate) ;
                              		// if to low, abort 
          }
          if(ReadADC(HighPin) < 733) {
     8d4:	81 2f       	mov	r24, r17
     8d6:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
     8da:	b2 e0       	ldi	r27, 0x02	; 2
     8dc:	8d 3d       	cpi	r24, 0xDD	; 221
     8de:	9b 07       	cpc	r25, r27
     8e0:	08 f4       	brcc	.+2      	; 0x8e4 <CheckPins+0x626>
     8e2:	fd c0       	rjmp	.+506    	; 0xade <__stack+0x1df>
             goto savenresult; 		//component has no current => no Triac => abort
          }
          R_DDR = HiPinRL;		//TristatePin (Gate) to input 
     8e4:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) < 733) {
     8e6:	81 2f       	mov	r24, r17
     8e8:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
     8ec:	e2 e0       	ldi	r30, 0x02	; 2
     8ee:	8d 3d       	cpi	r24, 0xDD	; 221
     8f0:	9e 07       	cpc	r25, r30
     8f2:	08 f4       	brcc	.+2      	; 0x8f6 <CheckPins+0x638>
     8f4:	f4 c0       	rjmp	.+488    	; 0xade <__stack+0x1df>
             goto savenresult; 		//component has no current without base current => no Triac => abort
          }
          R_PORT = HiPinRL;		//switch R_L port for HighPin to VCC => switch off holding current 
     8f6:	c5 b8       	out	0x05, r12	; 5
          wait5ms();
     8f8:	0e 94 0b 14 	call	0x2816	; 0x2816 <wait5ms>
          R_PORT = 0;			//switch R_L port for HighPin again to GND; Triac should now switched off
     8fc:	15 b8       	out	0x05, r1	; 5
          if(W5msReadADC(HighPin) > 244) {
     8fe:	81 2f       	mov	r24, r17
     900:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
     904:	85 3f       	cpi	r24, 0xF5	; 245
     906:	91 05       	cpc	r25, r1
     908:	08 f0       	brcs	.+2      	; 0x90c <__stack+0xd>
     90a:	e9 c0       	rjmp	.+466    	; 0xade <__stack+0x1df>
             goto savenresult;		//measure voltage at the High-Pin (probably A2) ;
                                	//if to high, component is not switched off => no Triac, abort
         }
         PartFound = PART_TRIAC;
     90c:	84 e0       	ldi	r24, 0x04	; 4
     90e:	80 93 09 01 	sts	0x0109, r24
         PartReady = 1;
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	80 93 06 01 	sts	0x0106, r24
         goto savenresult;
     918:	e2 c0       	rjmp	.+452    	; 0xade <__stack+0x1df>
        }
      //Test if NPN Transistor or MOSFET
      // ADC_DDR = LoADCm;	//Low-Pin to output 0V
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
     91a:	0c 29       	or	r16, r12
     91c:	04 b9       	out	0x04, r16	; 4
      R_PORT = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to VCC
     91e:	05 b9       	out	0x05, r16	; 5
      wait50ms();
     920:	0e 94 06 14 	call	0x280c	; 0x280c <wait50ms>
      adc.hp2 = ADCconfig.U_AVCC - ReadADC(HighPin);	//measure the voltage at the collector resistor 
     924:	60 90 3f 01 	lds	r6, 0x013F
     928:	70 90 40 01 	lds	r7, 0x0140
     92c:	81 2f       	mov	r24, r17
     92e:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
     932:	68 1a       	sub	r6, r24
     934:	79 0a       	sbc	r7, r25
      adc.tp2 = ADCconfig.U_AVCC - ReadADC(TristatePin);	//measure the voltage at the base resistor 
     936:	a0 90 3f 01 	lds	r10, 0x013F
     93a:	b0 90 40 01 	lds	r11, 0x0140
     93e:	82 2d       	mov	r24, r2
     940:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
     944:	a8 1a       	sub	r10, r24
     946:	b9 0a       	sbc	r11, r25
       lcd_space();
       lcd_data('T');
       lcd_data('P');
       lcd_string(utoa(adc.tp2,outval,10));
#endif
      if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     948:	80 91 09 01 	lds	r24, 0x0109
     94c:	82 50       	subi	r24, 0x02	; 2
     94e:	82 30       	cpi	r24, 0x02	; 2
     950:	18 f4       	brcc	.+6      	; 0x958 <__stack+0x59>
         PartReady = 1;	//check, if test is already done once
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	80 93 06 01 	sts	0x0106, r24
      }
      trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.tp2 - ReadADC(LowPin);
     958:	80 90 06 01 	lds	r8, 0x0106
     95c:	99 24       	eor	r9, r9
     95e:	e0 90 3f 01 	lds	r14, 0x013F
     962:	f0 90 40 01 	lds	r15, 0x0140
     966:	ea 18       	sub	r14, r10
     968:	fb 08       	sbc	r15, r11
     96a:	83 2d       	mov	r24, r3
     96c:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
     970:	f4 01       	movw	r30, r8
     972:	ee 0f       	add	r30, r30
     974:	ff 1f       	adc	r31, r31
     976:	e0 5b       	subi	r30, 0xB0	; 176
     978:	fe 4f       	sbci	r31, 0xFE	; 254
     97a:	e8 1a       	sub	r14, r24
     97c:	f9 0a       	sbc	r15, r25
     97e:	f1 82       	std	Z+1, r15	; 0x01
     980:	e0 82       	st	Z, r14

      //compute current amplification factor for common Emitter
      //hFE = B = Collector current / Base current
      if(adc.tp2 < 53) {
     982:	f5 e3       	ldi	r31, 0x35	; 53
     984:	af 16       	cp	r10, r31
     986:	b1 04       	cpc	r11, r1
     988:	18 f4       	brcc	.+6      	; 0x990 <__stack+0x91>
#if DebugOut == 5
         lcd_data('<');
         lcd_data('5');
         lcd_data('3');
#endif
         adc.tp2 = 53;
     98a:	85 e3       	ldi	r24, 0x35	; 53
     98c:	a8 2e       	mov	r10, r24
     98e:	b1 2c       	mov	r11, r1
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     990:	e0 90 06 01 	lds	r14, 0x0106
     994:	ff 24       	eor	r15, r15
     996:	c3 01       	movw	r24, r6
     998:	a0 e0       	ldi	r26, 0x00	; 0
     99a:	b0 e0       	ldi	r27, 0x00	; 0
     99c:	8b 87       	std	Y+11, r24	; 0x0b
     99e:	9c 87       	std	Y+12, r25	; 0x0c
     9a0:	ad 87       	std	Y+13, r26	; 0x0d
     9a2:	be 87       	std	Y+14, r27	; 0x0e
     9a4:	20 91 0a 01 	lds	r18, 0x010A
     9a8:	30 91 0b 01 	lds	r19, 0x010B
     9ac:	40 e0       	ldi	r20, 0x00	; 0
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	60 e6       	ldi	r22, 0x60	; 96
     9b2:	77 eb       	ldi	r23, 0xB7	; 183
     9b4:	87 e4       	ldi	r24, 0x47	; 71
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
     9bc:	6b 85       	ldd	r22, Y+11	; 0x0b
     9be:	7c 85       	ldd	r23, Y+12	; 0x0c
     9c0:	8d 85       	ldd	r24, Y+13	; 0x0d
     9c2:	9e 85       	ldd	r25, Y+14	; 0x0e
     9c4:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp2;	
     9c8:	95 01       	movw	r18, r10
     9ca:	40 e0       	ldi	r20, 0x00	; 0
     9cc:	50 e0       	ldi	r21, 0x00	; 0
     9ce:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
#endif
         adc.tp2 = 53;
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     9d2:	f7 01       	movw	r30, r14
     9d4:	ee 0f       	add	r30, r30
     9d6:	ff 1f       	adc	r31, r31
     9d8:	ee 0f       	add	r30, r30
     9da:	ff 1f       	adc	r31, r31
     9dc:	e8 5b       	subi	r30, 0xB8	; 184
     9de:	fe 4f       	sbci	r31, 0xFE	; 254
     9e0:	20 83       	st	Z, r18
     9e2:	31 83       	std	Z+1, r19	; 0x01
     9e4:	42 83       	std	Z+2, r20	; 0x02
     9e6:	53 83       	std	Z+3, r21	; 0x03
      trans.hfe[PartReady] = ((adc.hp2 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
#endif
#ifdef COMMON_COLLECTOR
       //compare current amplification factor for common Collector (Emitter follower)
       // hFE = (Emitterstrom - Basisstrom) / Basisstrom
       if (c_hfe >  trans.hfe[PartReady]) {
     9e8:	8c 81       	ldd	r24, Y+4	; 0x04
     9ea:	9d 81       	ldd	r25, Y+5	; 0x05
     9ec:	ae 81       	ldd	r26, Y+6	; 0x06
     9ee:	bf 81       	ldd	r27, Y+7	; 0x07
     9f0:	28 17       	cp	r18, r24
     9f2:	39 07       	cpc	r19, r25
     9f4:	4a 07       	cpc	r20, r26
     9f6:	5b 07       	cpc	r21, r27
     9f8:	a8 f4       	brcc	.+42     	; 0xa24 <__stack+0x125>
          trans.hfe[PartReady] = c_hfe;
     9fa:	80 83       	st	Z, r24
     9fc:	91 83       	std	Z+1, r25	; 0x01
     9fe:	a2 83       	std	Z+2, r26	; 0x02
     a00:	b3 83       	std	Z+3, r27	; 0x03
          trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.lp1 - adc.tp1;
     a02:	f7 01       	movw	r30, r14
     a04:	ee 0f       	add	r30, r30
     a06:	ff 1f       	adc	r31, r31
     a08:	e0 5b       	subi	r30, 0xB0	; 176
     a0a:	fe 4f       	sbci	r31, 0xFE	; 254
     a0c:	80 91 3f 01 	lds	r24, 0x013F
     a10:	90 91 40 01 	lds	r25, 0x0140
     a14:	84 19       	sub	r24, r4
     a16:	95 09       	sbc	r25, r5
     a18:	a9 89       	ldd	r26, Y+17	; 0x11
     a1a:	ba 89       	ldd	r27, Y+18	; 0x12
     a1c:	8a 1b       	sub	r24, r26
     a1e:	9b 0b       	sbc	r25, r27
     a20:	91 83       	std	Z+1, r25	; 0x01
     a22:	80 83       	st	Z, r24
       }
#endif

      if(adc.tp2 > 2557) {		// Basis-voltage R_H is low enough
     a24:	be ef       	ldi	r27, 0xFE	; 254
     a26:	ab 16       	cp	r10, r27
     a28:	b9 e0       	ldi	r27, 0x09	; 9
     a2a:	bb 06       	cpc	r11, r27
     a2c:	38 f0       	brcs	.+14     	; 0xa3c <__stack+0x13d>
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
     a2e:	82 e0       	ldi	r24, 0x02	; 2
     a30:	80 93 09 01 	sts	0x0109, r24
         PartMode = PART_MODE_NPN;
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	80 93 08 01 	sts	0x0108, r24
     a3a:	51 c0       	rjmp	.+162    	; 0xade <__stack+0x1df>
      } else { // Basis has low current
         if((adc.lp_otr < 97) && (adc.hp2 > 3400)) {
     a3c:	e9 85       	ldd	r30, Y+9	; 0x09
     a3e:	fa 85       	ldd	r31, Y+10	; 0x0a
     a40:	e1 36       	cpi	r30, 0x61	; 97
     a42:	f1 05       	cpc	r31, r1
     a44:	08 f0       	brcs	.+2      	; 0xa48 <__stack+0x149>
     a46:	4b c0       	rjmp	.+150    	; 0xade <__stack+0x1df>
     a48:	f9 e4       	ldi	r31, 0x49	; 73
     a4a:	6f 16       	cp	r6, r31
     a4c:	fd e0       	ldi	r31, 0x0D	; 13
     a4e:	7f 06       	cpc	r7, r31
     a50:	08 f4       	brcc	.+2      	; 0xa54 <__stack+0x155>
     a52:	45 c0       	rjmp	.+138    	; 0xade <__stack+0x1df>
            //if flow voltage in switched off mode low enough?
            //(since D-Mode-FET will be detected in error as E-Mode )
            PartFound = PART_FET;	//N-Kanal-MOSFET is found (Basis/Gate will Not be pulled down)
     a54:	83 e0       	ldi	r24, 0x03	; 3
     a56:	80 93 09 01 	sts	0x0109, r24
            PartMode = PART_MODE_N_E_MOS;
     a5a:	82 e0       	ldi	r24, 0x02	; 2
     a5c:	80 93 08 01 	sts	0x0108, r24
            lcd_line3();
            lcd_data('N');
            lcd_data('F');
            wait1s();
#endif
            PinMSK = HiADCm & 7;
     a60:	e9 80       	ldd	r14, Y+1	; 0x01
     a62:	27 e0       	ldi	r18, 0x07	; 7
     a64:	e2 22       	and	r14, r18
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
     a66:	82 2d       	mov	r24, r2
     a68:	80 64       	ori	r24, 0x40	; 64
     a6a:	80 93 7c 00 	sts	0x007C, r24
            gthvoltage = 1;			// round up ((1*4)/9)
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	90 93 59 01 	sts	0x0159, r25
     a76:	80 93 58 01 	sts	0x0158, r24
     a7a:	7b e0       	ldi	r23, 0x0B	; 11
     a7c:	a7 2e       	mov	r10, r23
            for(ii=0;ii<11;ii++) {
            	wdt_reset();
     a7e:	a8 95       	wdr
            	ChargePin10ms(TriPinRL,0);	// discharge Gate 10ms with RL 
     a80:	8d 2d       	mov	r24, r13
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	0e 94 3e 01 	call	0x27c	; 0x27c <ChargePin10ms>
                R_DDR = HiPinRL | TriPinRH;	// slowly charge Gate 
     a88:	04 b9       	out	0x04, r16	; 4
                R_PORT = HiPinRL | TriPinRH;
     a8a:	05 b9       	out	0x05, r16	; 5
            	while ((ADC_PIN&PinMSK));  // Wait, until the MOSFET switch and Drain moved to low 
     a8c:	86 b1       	in	r24, 0x06	; 6
     a8e:	8e 21       	and	r24, r14
     a90:	e9 f7       	brne	.-6      	; 0xa8c <__stack+0x18d>
                R_DDR = HiPinRL;
     a92:	c4 b8       	out	0x04, r12	; 4
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
     a94:	80 91 7a 00 	lds	r24, 0x007A
     a98:	80 64       	ori	r24, 0x40	; 64
     a9a:	80 93 7a 00 	sts	0x007A, r24
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
     a9e:	80 91 7a 00 	lds	r24, 0x007A
     aa2:	86 fd       	sbrc	r24, 6
     aa4:	fc cf       	rjmp	.-8      	; 0xa9e <__stack+0x19f>
            	gthvoltage += ADCW;		// add result of ADC
     aa6:	80 91 78 00 	lds	r24, 0x0078
     aaa:	90 91 79 00 	lds	r25, 0x0079
     aae:	20 91 58 01 	lds	r18, 0x0158
     ab2:	30 91 59 01 	lds	r19, 0x0159
     ab6:	82 0f       	add	r24, r18
     ab8:	93 1f       	adc	r25, r19
     aba:	90 93 59 01 	sts	0x0159, r25
     abe:	80 93 58 01 	sts	0x0158, r24
     ac2:	aa 94       	dec	r10
#endif
            PinMSK = HiADCm & 7;
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
            gthvoltage = 1;			// round up ((1*4)/9)
            for(ii=0;ii<11;ii++) {
     ac4:	e1 f6       	brne	.-72     	; 0xa7e <__stack+0x17f>
            	gthvoltage += ADCW;		// add result of ADC
#if DebugOut == 5
                lcd_data('.');
#endif
            }
            gthvoltage *= 4;	//is equal to 44 * ADCW
     ac6:	88 0f       	add	r24, r24
     ac8:	99 1f       	adc	r25, r25
     aca:	88 0f       	add	r24, r24
     acc:	99 1f       	adc	r25, r25
            gthvoltage /= 9;	//scale to mV
     ace:	69 e0       	ldi	r22, 0x09	; 9
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	0e 94 b1 1c 	call	0x3962	; 0x3962 <__udivmodhi4>
     ad6:	70 93 59 01 	sts	0x0159, r23
     ada:	60 93 58 01 	sts	0x0158, r22
         }
      }
savenresult:
      trans.b = TristatePin;	// save Pin-constellation
     ade:	20 92 54 01 	sts	0x0154, r2
      trans.c = HighPin;
     ae2:	10 93 55 01 	sts	0x0155, r17
      trans.e = LowPin;
     ae6:	30 92 56 01 	sts	0x0156, r3
   } // end component conduct => npn
   ADC_DDR = TXD_MSK;		// switch all ADC-Ports to input
     aea:	88 e0       	ldi	r24, 0x08	; 8
     aec:	87 b9       	out	0x07, r24	; 7
   ADC_PORT = TXD_VAL;		// switch all ADC-Ports to 0 (no Pull up)
     aee:	88 b9       	out	0x08, r24	; 8
   //Fertig
   //end das component has no connection between HighPin and LowPin
   goto widmes;
     af0:	69 c0       	rjmp	.+210    	; 0xbc4 <__stack+0x2c5>
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
     af2:	88 e0       	ldi	r24, 0x08	; 8
     af4:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;	//Low-Pin fix to GND
     af6:	3b 81       	ldd	r19, Y+3	; 0x03
     af8:	37 b9       	out	0x07, r19	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     afa:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
     afc:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
     afe:	8d 2d       	mov	r24, r13
     b00:	61 e0       	ldi	r22, 0x01	; 1
     b02:	0e 94 3e 01 	call	0x27c	; 0x27c <ChargePin10ms>
  adc.lp_otr = W5msReadADC(HighPin) - ReadADC(LowPin);
     b06:	81 2f       	mov	r24, r17
     b08:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
     b0c:	4c 01       	movw	r8, r24
     b0e:	83 2d       	mov	r24, r3
     b10:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
     b14:	88 1a       	sub	r8, r24
     b16:	99 0a       	sbc	r9, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
     b18:	88 85       	ldd	r24, Y+8	; 0x08
     b1a:	84 b9       	out	0x04, r24	; 4
  R_PORT = HiPinRH;
     b1c:	85 b9       	out	0x05, r24	; 5
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
     b1e:	81 2f       	mov	r24, r17
     b20:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
     b24:	5c 01       	movw	r10, r24

  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     b26:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
     b28:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
     b2a:	8d 2d       	mov	r24, r13
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	0e 94 3e 01 	call	0x27c	; 0x27c <ChargePin10ms>
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
     b32:	81 2f       	mov	r24, r17
     b34:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
     b38:	7c 01       	movw	r14, r24
     b3a:	83 2d       	mov	r24, r3
     b3c:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
     b40:	e8 1a       	sub	r14, r24
     b42:	f9 0a       	sbc	r15, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
     b44:	98 85       	ldd	r25, Y+8	; 0x08
     b46:	94 b9       	out	0x04, r25	; 4
  R_PORT = HiPinRH;
     b48:	95 b9       	out	0x05, r25	; 5
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
     b4a:	81 2f       	mov	r24, r17
     b4c:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
     b50:	e8 14       	cp	r14, r8
     b52:	f9 04       	cpc	r15, r9
     b54:	18 f0       	brcs	.+6      	; 0xb5c <__stack+0x25d>
  R_PORT = HiPinRL;
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
  R_PORT = HiPinRH;
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
     b56:	a8 2e       	mov	r10, r24
     b58:	b9 2e       	mov	r11, r25
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
     b5a:	47 01       	movw	r8, r14
  lcd_string(utoa(adc.hp3,outval,10));
  lcd_space();
  wait1s();
#endif

  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
     b5c:	c4 01       	movw	r24, r8
     b5e:	87 59       	subi	r24, 0x97	; 151
     b60:	90 40       	sbci	r25, 0x00	; 0
     b62:	a1 e1       	ldi	r26, 0x11	; 17
     b64:	89 38       	cpi	r24, 0x89	; 137
     b66:	9a 07       	cpc	r25, r26
     b68:	68 f5       	brcc	.+90     	; 0xbc4 <__stack+0x2c5>
     b6a:	c5 01       	movw	r24, r10
     b6c:	53 e0       	ldi	r21, 0x03	; 3
     b6e:	96 95       	lsr	r25
     b70:	87 95       	ror	r24
     b72:	5a 95       	dec	r21
     b74:	e1 f7       	brne	.-8      	; 0xb6e <__stack+0x26f>
     b76:	8a 0d       	add	r24, r10
     b78:	9b 1d       	adc	r25, r11
     b7a:	88 15       	cp	r24, r8
     b7c:	99 05       	cpc	r25, r9
     b7e:	10 f5       	brcc	.+68     	; 0xbc4 <__stack+0x2c5>
     b80:	43 e0       	ldi	r20, 0x03	; 3
     b82:	aa 0c       	add	r10, r10
     b84:	bb 1c       	adc	r11, r11
     b86:	4a 95       	dec	r20
     b88:	e1 f7       	brne	.-8      	; 0xb82 <__stack+0x283>
     b8a:	8a 14       	cp	r8, r10
     b8c:	9b 04       	cpc	r9, r11
     b8e:	d0 f4       	brcc	.+52     	; 0xbc4 <__stack+0x2c5>
     //voltage is above 0,15V and below 4,64V => Ok
     if((PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
     b90:	80 91 09 01 	lds	r24, 0x0109
     b94:	88 23       	and	r24, r24
     b96:	11 f0       	breq	.+4      	; 0xb9c <__stack+0x29d>
     b98:	86 30       	cpi	r24, 0x06	; 6
     b9a:	19 f4       	brne	.+6      	; 0xba2 <__stack+0x2a3>
        PartFound = PART_DIODE;	//mark for diode only, if no other component is found
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	80 93 09 01 	sts	0x0109, r24
				//since there is a problem with Transistors with a protection diode
#if DebugOut == 4
        lcd_data('D');
#endif
     }
     diodes[NumOfDiodes].Anode = HighPin;
     ba2:	80 91 07 01 	lds	r24, 0x0107
     ba6:	e8 2f       	mov	r30, r24
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	ee 0f       	add	r30, r30
     bac:	ff 1f       	adc	r31, r31
     bae:	ee 0f       	add	r30, r30
     bb0:	ff 1f       	adc	r31, r31
     bb2:	e7 59       	subi	r30, 0x97	; 151
     bb4:	fe 4f       	sbci	r31, 0xFE	; 254
     bb6:	10 83       	st	Z, r17
     diodes[NumOfDiodes].Cathode = LowPin;
     bb8:	31 82       	std	Z+1, r3	; 0x01
     diodes[NumOfDiodes].Voltage = adc.hp1;	// voltage in Millivolt 
     bba:	93 82       	std	Z+3, r9	; 0x03
     bbc:	82 82       	std	Z+2, r8	; 0x02
     NumOfDiodes++;
     bbe:	8f 5f       	subi	r24, 0xFF	; 255
     bc0:	80 93 07 01 	sts	0x0107, r24
  lcd_data(NumOfDiodes+'0');
#endif

widmes:
#ifdef R_MESS
  if (NumOfDiodes > 0) goto clean_ports;
     bc4:	80 91 07 01 	lds	r24, 0x0107
     bc8:	88 23       	and	r24, r24
     bca:	09 f0       	breq	.+2      	; 0xbce <__stack+0x2cf>
     bcc:	12 c2       	rjmp	.+1060   	; 0xff2 <__stack+0x6f3>
  // resistor measurement
  wdt_reset();
     bce:	a8 95       	wdr
// U_SCALE can be set to 4 for better resolution of ReadADC result
 #if U_SCALE != 1
  ADCconfig.U_AVCC *= U_SCALE;	// scale to higher resolution, mV scale is not required
     bd0:	80 91 3f 01 	lds	r24, 0x013F
     bd4:	90 91 40 01 	lds	r25, 0x0140
     bd8:	88 0f       	add	r24, r24
     bda:	99 1f       	adc	r25, r25
     bdc:	88 0f       	add	r24, r24
     bde:	99 1f       	adc	r25, r25
     be0:	90 93 40 01 	sts	0x0140, r25
     be4:	80 93 3f 01 	sts	0x013F, r24
  ADCconfig.U_Bandgap *= U_SCALE;
     be8:	80 91 3d 01 	lds	r24, 0x013D
     bec:	90 91 3e 01 	lds	r25, 0x013E
     bf0:	88 0f       	add	r24, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	90 93 3e 01 	sts	0x013E, r25
     bfc:	80 93 3d 01 	sts	0x013D, r24
 #endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = R_ANZ_MESS;	// switch to special number of repetitions
     c00:	8e eb       	ldi	r24, 0xBE	; 190
     c02:	80 93 3b 01 	sts	0x013B, r24
#endif
  #define MAX_REPEAT (700 / (5 + R_ANZ_MESS/8))
  ADC_PORT = TXD_VAL;
     c06:	88 e0       	ldi	r24, 0x08	; 8
     c08:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
     c0a:	bb 81       	ldd	r27, Y+3	; 0x03
     c0c:	b7 b9       	out	0x07, r27	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     c0e:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;	
     c10:	c5 b8       	out	0x05, r12	; 5
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
     c12:	ee 24       	eor	r14, r14
     c14:	ff 24       	eor	r15, r15
  for (ii=1;ii<MAX_REPEAT;ii++) {
     c16:	21 e0       	ldi	r18, 0x01	; 1
     c18:	01 c0       	rjmp	.+2      	; 0xc1c <__stack+0x31d>
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     c1a:	7c 01       	movw	r14, r24
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     c1c:	83 2d       	mov	r24, r3
     c1e:	2b 8b       	std	Y+19, r18	; 0x13
     c20:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
     c24:	08 2f       	mov	r16, r24
     c26:	49 2e       	mov	r4, r25
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     c28:	81 2f       	mov	r24, r17
     c2a:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
     udiff = adc.hp1 - adc.hp2;
     c2e:	ac 01       	movw	r20, r24
     c30:	4e 19       	sub	r20, r14
     c32:	5f 09       	sbc	r21, r15
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     c34:	2b 89       	ldd	r18, Y+19	; 0x13
     c36:	57 ff       	sbrs	r21, 7
     c38:	03 c0       	rjmp	.+6      	; 0xc40 <__stack+0x341>
     c3a:	50 95       	com	r21
     c3c:	41 95       	neg	r20
     c3e:	5f 4f       	sbci	r21, 0xFF	; 255
     c40:	43 30       	cpi	r20, 0x03	; 3
     c42:	51 05       	cpc	r21, r1
     c44:	84 f4       	brge	.+32     	; 0xc66 <__stack+0x367>
     c46:	ac 01       	movw	r20, r24
  adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
#endif
  if (adc.tp1 > adc.hp1) {
     adc.tp1 = adc.hp1;
  }
  R_PORT = 0;
     c48:	15 b8       	out	0x05, r1	; 5
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (GND)
     c4a:	e8 85       	ldd	r30, Y+8	; 0x08
     c4c:	e4 b9       	out	0x04, r30	; 4
  adc.hp2 = W5msReadADC(HighPin);	// read voltage, should be down
     c4e:	81 2f       	mov	r24, r17
     c50:	4e 8b       	std	Y+22, r20	; 0x16
     c52:	5b 8b       	std	Y+19, r21	; 0x13
     c54:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
  if (adc.hp2 > (20*U_SCALE)) {
     c58:	4e 89       	ldd	r20, Y+22	; 0x16
     c5a:	5b 89       	ldd	r21, Y+19	; 0x13
     c5c:	81 35       	cpi	r24, 0x51	; 81
     c5e:	91 05       	cpc	r25, r1
     c60:	08 f0       	brcs	.+2      	; 0xc64 <__stack+0x365>
     c62:	ac c1       	rjmp	.+856    	; 0xfbc <__stack+0x6bd>
     c64:	05 c0       	rjmp	.+10     	; 0xc70 <__stack+0x371>
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     udiff = adc.hp1 - adc.hp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.hp2 = adc.hp1;
     wdt_reset();
     c66:	a8 95       	wdr
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     c68:	2f 5f       	subi	r18, 0xFF	; 255
     c6a:	29 31       	cpi	r18, 0x19	; 25
     c6c:	b1 f6       	brne	.-84     	; 0xc1a <__stack+0x31b>
     c6e:	a6 c1       	rjmp	.+844    	; 0xfbc <__stack+0x6bd>
     lcd_string(utoa(adc.hp2, outval, 10));
     lcd_space();
 #endif
     goto testend;
  }
  R_PORT = HiPinRH;		//switch R_H for High-Pin to VCC
     c70:	f8 85       	ldd	r31, Y+8	; 0x08
     c72:	f5 b9       	out	0x05, r31	; 5
  adc.hp2 = W5msReadADC(HighPin);	// voltage at resistor Rx with R_H
     c74:	81 2f       	mov	r24, r17
     c76:	4e 8b       	std	Y+22, r20	; 0x16
     c78:	5b 8b       	std	Y+19, r21	; 0x13
     c7a:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
     c7e:	7c 01       	movw	r14, r24

  ADC_DDR = HiADCm;		//switch High-Pin to output
     c80:	29 81       	ldd	r18, Y+1	; 0x01
     c82:	27 b9       	out	0x07, r18	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
     c84:	28 b9       	out	0x08, r18	; 8
  R_PORT = 0;
     c86:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
     c88:	3a 81       	ldd	r19, Y+2	; 0x02
     c8a:	34 b9       	out	0x04, r19	; 4
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
     c8c:	aa 24       	eor	r10, r10
     c8e:	bb 24       	eor	r11, r11
  for (ii=1;ii<MAX_REPEAT;ii++) {
     c90:	21 e0       	ldi	r18, 0x01	; 1
     c92:	4e 89       	ldd	r20, Y+22	; 0x16
     c94:	5b 89       	ldd	r21, Y+19	; 0x13
     c96:	3a 01       	movw	r6, r20
     c98:	01 c0       	rjmp	.+2      	; 0xc9c <__stack+0x39d>
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     c9a:	56 01       	movw	r10, r12
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     c9c:	81 2f       	mov	r24, r17
     c9e:	2b 8b       	std	Y+19, r18	; 0x13
     ca0:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
     ca4:	4c 01       	movw	r8, r24
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     ca6:	83 2d       	mov	r24, r3
     ca8:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
     cac:	6c 01       	movw	r12, r24
     udiff = adc.lp1 - adc.lp2;
     cae:	8a 19       	sub	r24, r10
     cb0:	9b 09       	sbc	r25, r11
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     cb2:	2b 89       	ldd	r18, Y+19	; 0x13
     cb4:	97 ff       	sbrs	r25, 7
     cb6:	03 c0       	rjmp	.+6      	; 0xcbe <__stack+0x3bf>
     cb8:	90 95       	com	r25
     cba:	81 95       	neg	r24
     cbc:	9f 4f       	sbci	r25, 0xFF	; 255
     cbe:	83 30       	cpi	r24, 0x03	; 3
     cc0:	91 05       	cpc	r25, r1
     cc2:	8c f4       	brge	.+34     	; 0xce6 <__stack+0x3e7>
     cc4:	a3 01       	movw	r20, r6
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = MEM_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
     cc8:	88 0f       	add	r24, r24
  adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
#endif
  if (adc.tp2 < adc.lp1) {
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
     cca:	84 b9       	out	0x04, r24	; 4
  adc.lp2 = W5msReadADC(LowPin);
     ccc:	83 2d       	mov	r24, r3
     cce:	6e 8a       	std	Y+22, r6	; 0x16
     cd0:	5b 8b       	std	Y+19, r21	; 0x13
     cd2:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
     cd6:	3c 01       	movw	r6, r24
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
     cd8:	4e 89       	ldd	r20, Y+22	; 0x16
     cda:	5b 89       	ldd	r21, Y+19	; 0x13
     cdc:	84 e4       	ldi	r24, 0x44	; 68
     cde:	40 3c       	cpi	r20, 0xC0	; 192
     ce0:	58 07       	cpc	r21, r24
     ce2:	30 f0       	brcs	.+12     	; 0xcf0 <__stack+0x3f1>
     ce4:	0c c0       	rjmp	.+24     	; 0xcfe <__stack+0x3ff>
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     udiff = adc.lp1 - adc.lp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.lp2 = adc.lp1;
     wdt_reset();
     ce6:	a8 95       	wdr
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
  R_PORT = 0;
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     ce8:	2f 5f       	subi	r18, 0xFF	; 255
     cea:	29 31       	cpi	r18, 0x19	; 25
     cec:	b1 f6       	brne	.-84     	; 0xc9a <__stack+0x39b>
     cee:	66 c1       	rjmp	.+716    	; 0xfbc <__stack+0x6bd>
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
  adc.lp2 = W5msReadADC(LowPin);
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
     cf0:	95 e8       	ldi	r25, 0x85	; 133
     cf2:	e9 16       	cp	r14, r25
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	f9 06       	cpc	r15, r25
     cf8:	08 f0       	brcs	.+2      	; 0xcfc <__stack+0x3fd>
     cfa:	60 c1       	rjmp	.+704    	; 0xfbc <__stack+0x6bd>
     cfc:	06 c0       	rjmp	.+12     	; 0xd0a <__stack+0x40b>
     lcd_data('F');
 #endif
     goto testend; 
  }
//    if((adc.hp2 + (adc.hp2 / 61)) < adc.hp1)
  if (adc.hp2 < (4972*U_SCALE)) { 
     cfe:	a0 eb       	ldi	r26, 0xB0	; 176
     d00:	ea 16       	cp	r14, r26
     d02:	ad e4       	ldi	r26, 0x4D	; 77
     d04:	fa 06       	cpc	r15, r26
     d06:	08 f0       	brcs	.+2      	; 0xd0a <__stack+0x40b>
     d08:	59 c1       	rjmp	.+690    	; 0xfbc <__stack+0x6bd>
     // voltage breaks down with low test current and it is not nearly shorted  => resistor
//     if (adc.lp1 < 120) { // take measurement with R_H 
     if (adc.lp1 < (169*U_SCALE)) { // take measurement with R_H 
     d0a:	b4 ea       	ldi	r27, 0xA4	; 164
     d0c:	cb 16       	cp	r12, r27
     d0e:	b2 e0       	ldi	r27, 0x02	; 2
     d10:	db 06       	cpc	r13, r27
     d12:	08 f0       	brcs	.+2      	; 0xd16 <__stack+0x417>
     d14:	72 c0       	rjmp	.+228    	; 0xdfa <__stack+0x4fb>
        ii = 'H';
        if (adc.lp2 < (38*U_SCALE)) {
     d16:	e8 e9       	ldi	r30, 0x98	; 152
     d18:	6e 16       	cp	r6, r30
     d1a:	71 04       	cpc	r7, r1
     d1c:	08 f4       	brcc	.+2      	; 0xd20 <__stack+0x421>
     d1e:	4e c1       	rjmp	.+668    	; 0xfbc <__stack+0x6bd>
           // measurement > 60MOhm to big resistance
           goto testend;
        }
        // two measurements with R_H resistors (470k) are made:
        // lirx1 (measurement at HighPin)
        lirx1 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)adc.hp2 / (ADCconfig.U_AVCC - adc.hp2);
     d20:	80 90 3f 01 	lds	r8, 0x013F
     d24:	90 90 40 01 	lds	r9, 0x0140
     d28:	b7 01       	movw	r22, r14
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	28 e9       	ldi	r18, 0x98	; 152
     d30:	37 eb       	ldi	r19, 0xB7	; 183
     d32:	40 e0       	ldi	r20, 0x00	; 0
     d34:	50 e0       	ldi	r21, 0x00	; 0
     d36:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
     d3a:	94 01       	movw	r18, r8
     d3c:	2e 19       	sub	r18, r14
     d3e:	3f 09       	sbc	r19, r15
     d40:	40 e0       	ldi	r20, 0x00	; 0
     d42:	50 e0       	ldi	r21, 0x00	; 0
     d44:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
     d48:	59 01       	movw	r10, r18
     d4a:	6a 01       	movw	r12, r20
        // lirx2 (measurement at LowPin)
        lirx2 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)(ADCconfig.U_AVCC - adc.lp2) / adc.lp2;
     d4c:	86 18       	sub	r8, r6
     d4e:	97 08       	sbc	r9, r7
     d50:	b4 01       	movw	r22, r8
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	28 e9       	ldi	r18, 0x98	; 152
     d58:	37 eb       	ldi	r19, 0xB7	; 183
     d5a:	40 e0       	ldi	r20, 0x00	; 0
     d5c:	50 e0       	ldi	r21, 0x00	; 0
     d5e:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
     d62:	93 01       	movw	r18, r6
     d64:	40 e0       	ldi	r20, 0x00	; 0
     d66:	50 e0       	ldi	r21, 0x00	; 0
     d68:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
#define FAKT_LOW 2		//resolution is about twice as good
#else
#define FAKT_LOW 4		//resolution is about four times better
#endif
#ifdef AUTOSCALE_ADC
        if (adc.hp2 < U_INT_LIMIT) {
     d6c:	f8 e7       	ldi	r31, 0x78	; 120
     d6e:	ef 16       	cp	r14, r31
     d70:	ff e0       	ldi	r31, 0x0F	; 15
     d72:	ff 06       	cpc	r15, r31
     d74:	70 f4       	brcc	.+28     	; 0xd92 <__stack+0x493>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_H measurements
     d76:	c6 01       	movw	r24, r12
     d78:	b5 01       	movw	r22, r10
     d7a:	b2 e0       	ldi	r27, 0x02	; 2
     d7c:	66 0f       	add	r22, r22
     d7e:	77 1f       	adc	r23, r23
     d80:	88 1f       	adc	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	ba 95       	dec	r27
     d86:	d1 f7       	brne	.-12     	; 0xd7c <__stack+0x47d>
     d88:	62 0f       	add	r22, r18
     d8a:	73 1f       	adc	r23, r19
     d8c:	84 1f       	adc	r24, r20
     d8e:	95 1f       	adc	r25, r21
     d90:	12 c0       	rjmp	.+36     	; 0xdb6 <__stack+0x4b7>
        } else if (adc.lp2 < U_INT_LIMIT){
     d92:	88 e7       	ldi	r24, 0x78	; 120
     d94:	68 16       	cp	r6, r24
     d96:	8f e0       	ldi	r24, 0x0F	; 15
     d98:	78 06       	cpc	r7, r24
     d9a:	a0 f4       	brcc	.+40     	; 0xdc4 <__stack+0x4c5>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
     d9c:	ca 01       	movw	r24, r20
     d9e:	b9 01       	movw	r22, r18
     da0:	a2 e0       	ldi	r26, 0x02	; 2
     da2:	66 0f       	add	r22, r22
     da4:	77 1f       	adc	r23, r23
     da6:	88 1f       	adc	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	aa 95       	dec	r26
     dac:	d1 f7       	brne	.-12     	; 0xda2 <__stack+0x4a3>
     dae:	6a 0d       	add	r22, r10
     db0:	7b 1d       	adc	r23, r11
     db2:	8c 1d       	adc	r24, r12
     db4:	9d 1d       	adc	r25, r13
     db6:	25 e0       	ldi	r18, 0x05	; 5
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	40 e0       	ldi	r20, 0x00	; 0
     dbc:	50 e0       	ldi	r21, 0x00	; 0
     dbe:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
     dc2:	08 c0       	rjmp	.+16     	; 0xdd4 <__stack+0x4d5>
        } else 
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_H measurements
     dc4:	2a 0d       	add	r18, r10
     dc6:	3b 1d       	adc	r19, r11
     dc8:	4c 1d       	adc	r20, r12
     dca:	5d 1d       	adc	r21, r13
     dcc:	56 95       	lsr	r21
     dce:	47 95       	ror	r20
     dd0:	37 95       	ror	r19
     dd2:	27 95       	ror	r18
        }
        lrx1 *= 100;
     dd4:	ca 01       	movw	r24, r20
     dd6:	b9 01       	movw	r22, r18
     dd8:	24 e6       	ldi	r18, 0x64	; 100
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	40 e0       	ldi	r20, 0x00	; 0
     dde:	50 e0       	ldi	r21, 0x00	; 0
     de0:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
     de4:	6b 01       	movw	r12, r22
     de6:	7c 01       	movw	r14, r24
        lrx1 += RH_OFFSET;			// add constant for correction of systematic error
     de8:	8c ea       	ldi	r24, 0xAC	; 172
     dea:	9d e0       	ldi	r25, 0x0D	; 13
     dec:	a0 e0       	ldi	r26, 0x00	; 0
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	c8 0e       	add	r12, r24
     df2:	d9 1e       	adc	r13, r25
     df4:	ea 1e       	adc	r14, r26
     df6:	fb 1e       	adc	r15, r27
     df8:	78 c0       	rjmp	.+240    	; 0xeea <__stack+0x5eb>
     dfa:	80 2f       	mov	r24, r16
     dfc:	94 2d       	mov	r25, r4
     dfe:	48 17       	cp	r20, r24
     e00:	59 07       	cpc	r21, r25
     e02:	08 f4       	brcc	.+2      	; 0xe06 <__stack+0x507>
     e04:	ca 01       	movw	r24, r20
     e06:	76 01       	movw	r14, r12
     e08:	c8 14       	cp	r12, r8
     e0a:	d9 04       	cpc	r13, r9
     e0c:	08 f4       	brcc	.+2      	; 0xe10 <__stack+0x511>
     e0e:	74 01       	movw	r14, r8
     e10:	3c 01       	movw	r6, r24
     e12:	84 17       	cp	r24, r20
     e14:	95 07       	cpc	r25, r21
     e16:	08 f4       	brcc	.+2      	; 0xe1a <__stack+0x51b>
     e18:	3a 01       	movw	r6, r20
        // two measurements with R_L resistors (680) are made:
        // lirx1 (measurement at HighPin)
        if (adc.tp1 > adc.hp1) {
           adc.hp1 = adc.tp1;		//diff negativ is illegal
        }
        lirx1 =(unsigned long)RR680PL * (unsigned long)(adc.hp1 - adc.tp1) / (ADCconfig.U_AVCC - adc.hp1);
     e1a:	b3 01       	movw	r22, r6
     e1c:	68 1b       	sub	r22, r24
     e1e:	79 0b       	sbc	r23, r25
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	20 91 0a 01 	lds	r18, 0x010A
     e28:	30 91 0b 01 	lds	r19, 0x010B
     e2c:	40 e0       	ldi	r20, 0x00	; 0
     e2e:	50 e0       	ldi	r21, 0x00	; 0
     e30:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
     e34:	20 91 3f 01 	lds	r18, 0x013F
     e38:	30 91 40 01 	lds	r19, 0x0140
     e3c:	26 19       	sub	r18, r6
     e3e:	37 09       	sbc	r19, r7
     e40:	40 e0       	ldi	r20, 0x00	; 0
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
     e48:	49 01       	movw	r8, r18
     e4a:	5a 01       	movw	r10, r20
     e4c:	27 01       	movw	r4, r14
     e4e:	ce 14       	cp	r12, r14
     e50:	df 04       	cpc	r13, r15
     e52:	08 f4       	brcc	.+2      	; 0xe56 <__stack+0x557>
     e54:	26 01       	movw	r4, r12
        if (adc.tp2 < adc.lp1) {
           adc.lp1 = adc.tp2;		//diff negativ is illegal
        }
        // lirx2 (Measurement at LowPin)
        lirx2 =(unsigned long)RR680MI * (unsigned long)(adc.tp2 -adc.lp1) / adc.lp1;
     e56:	e4 18       	sub	r14, r4
     e58:	f5 08       	sbc	r15, r5
     e5a:	b7 01       	movw	r22, r14
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	20 91 04 01 	lds	r18, 0x0104
     e64:	30 91 05 01 	lds	r19, 0x0105
     e68:	40 e0       	ldi	r20, 0x00	; 0
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
     e70:	92 01       	movw	r18, r4
     e72:	40 e0       	ldi	r20, 0x00	; 0
     e74:	50 e0       	ldi	r21, 0x00	; 0
     e76:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
//     lrx1 =(unsigned long)R_L_VAL * (unsigned long)adc.hp1 / (adc.hp3 - adc.hp1);

#ifdef AUTOSCALE_ADC
        if (adc.hp1 < U_INT_LIMIT) {
     e7a:	98 e7       	ldi	r25, 0x78	; 120
     e7c:	69 16       	cp	r6, r25
     e7e:	9f e0       	ldi	r25, 0x0F	; 15
     e80:	79 06       	cpc	r7, r25
     e82:	70 f4       	brcc	.+28     	; 0xea0 <__stack+0x5a1>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_L measurements
     e84:	c5 01       	movw	r24, r10
     e86:	b4 01       	movw	r22, r8
     e88:	e2 e0       	ldi	r30, 0x02	; 2
     e8a:	66 0f       	add	r22, r22
     e8c:	77 1f       	adc	r23, r23
     e8e:	88 1f       	adc	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	ea 95       	dec	r30
     e94:	d1 f7       	brne	.-12     	; 0xe8a <__stack+0x58b>
     e96:	62 0f       	add	r22, r18
     e98:	73 1f       	adc	r23, r19
     e9a:	84 1f       	adc	r24, r20
     e9c:	95 1f       	adc	r25, r21
     e9e:	12 c0       	rjmp	.+36     	; 0xec4 <__stack+0x5c5>
        } else if (adc.lp1 < U_INT_LIMIT) {
     ea0:	a8 e7       	ldi	r26, 0x78	; 120
     ea2:	4a 16       	cp	r4, r26
     ea4:	af e0       	ldi	r26, 0x0F	; 15
     ea6:	5a 06       	cpc	r5, r26
     ea8:	b0 f4       	brcc	.+44     	; 0xed6 <__stack+0x5d7>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
     eaa:	ca 01       	movw	r24, r20
     eac:	b9 01       	movw	r22, r18
     eae:	52 e0       	ldi	r21, 0x02	; 2
     eb0:	66 0f       	add	r22, r22
     eb2:	77 1f       	adc	r23, r23
     eb4:	88 1f       	adc	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	5a 95       	dec	r21
     eba:	d1 f7       	brne	.-12     	; 0xeb0 <__stack+0x5b1>
     ebc:	68 0d       	add	r22, r8
     ebe:	79 1d       	adc	r23, r9
     ec0:	8a 1d       	adc	r24, r10
     ec2:	9b 1d       	adc	r25, r11
     ec4:	25 e0       	ldi	r18, 0x05	; 5
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e0       	ldi	r20, 0x00	; 0
     eca:	50 e0       	ldi	r21, 0x00	; 0
     ecc:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
     ed0:	69 01       	movw	r12, r18
     ed2:	7a 01       	movw	r14, r20
     ed4:	0a c0       	rjmp	.+20     	; 0xeea <__stack+0x5eb>
        } else
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_L measurements
     ed6:	69 01       	movw	r12, r18
     ed8:	7a 01       	movw	r14, r20
     eda:	c8 0c       	add	r12, r8
     edc:	d9 1c       	adc	r13, r9
     ede:	ea 1c       	adc	r14, r10
     ee0:	fb 1c       	adc	r15, r11
     ee2:	f6 94       	lsr	r15
     ee4:	e7 94       	ror	r14
     ee6:	d7 94       	ror	r13
     ee8:	c7 94       	ror	r12
  lcd_line4();
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
     eea:	80 91 09 01 	lds	r24, 0x0109
     eee:	82 30       	cpi	r24, 0x02	; 2
     ef0:	18 f0       	brcs	.+6      	; 0xef8 <__stack+0x5f9>
     ef2:	86 30       	cpi	r24, 0x06	; 6
     ef4:	09 f0       	breq	.+2      	; 0xef8 <__stack+0x5f9>
     ef6:	62 c0       	rjmp	.+196    	; 0xfbc <__stack+0x6bd>
        for (ii=0; ii<ResistorsFound; ii++) {
     ef8:	50 91 57 01 	lds	r21, 0x0157
     efc:	40 e0       	ldi	r20, 0x00	; 0
           // search measurements with inverse polarity 
           thisR = &resis[ii];
           if (thisR->rt != TristatePin) {
     efe:	8b e0       	ldi	r24, 0x0B	; 11
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	3e c0       	rjmp	.+124    	; 0xf80 <__stack+0x681>
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
           // search measurements with inverse polarity 
           thisR = &resis[ii];
     f04:	24 2f       	mov	r18, r20
     f06:	30 e0       	ldi	r19, 0x00	; 0
           if (thisR->rt != TristatePin) {
     f08:	28 9f       	mul	r18, r24
     f0a:	f0 01       	movw	r30, r0
     f0c:	29 9f       	mul	r18, r25
     f0e:	f0 0d       	add	r31, r0
     f10:	38 9f       	mul	r19, r24
     f12:	f0 0d       	add	r31, r0
     f14:	11 24       	eor	r1, r1
     f16:	e6 5e       	subi	r30, 0xE6	; 230
     f18:	fe 4f       	sbci	r31, 0xFE	; 254
     f1a:	22 85       	ldd	r18, Z+10	; 0x0a
     f1c:	22 15       	cp	r18, r2
     f1e:	11 f0       	breq	.+4      	; 0xf24 <__stack+0x625>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
     f20:	4f 5f       	subi	r20, 0xFF	; 255
     f22:	2e c0       	rjmp	.+92     	; 0xf80 <__stack+0x681>
           if (thisR->rt != TristatePin) {
              continue;
           }
           // must be measurement with inverse polarity 
           // resolution is 0.1 Ohm, 1 Ohm = 10 !
           lirx1 = (labs((long)lrx1 - (long)thisR->rx) * 10) / (lrx1 + thisR->rx + 100);
     f24:	80 80       	ld	r8, Z
     f26:	91 80       	ldd	r9, Z+1	; 0x01
     f28:	a2 80       	ldd	r10, Z+2	; 0x02
     f2a:	b3 80       	ldd	r11, Z+3	; 0x03
     f2c:	c7 01       	movw	r24, r14
     f2e:	b6 01       	movw	r22, r12
     f30:	68 19       	sub	r22, r8
     f32:	79 09       	sbc	r23, r9
     f34:	8a 09       	sbc	r24, r10
     f36:	9b 09       	sbc	r25, r11
     f38:	97 ff       	sbrs	r25, 7
     f3a:	07 c0       	rjmp	.+14     	; 0xf4a <__stack+0x64b>
     f3c:	90 95       	com	r25
     f3e:	80 95       	com	r24
     f40:	70 95       	com	r23
     f42:	61 95       	neg	r22
     f44:	7f 4f       	sbci	r23, 0xFF	; 255
     f46:	8f 4f       	sbci	r24, 0xFF	; 255
     f48:	9f 4f       	sbci	r25, 0xFF	; 255
     f4a:	2a e0       	ldi	r18, 0x0A	; 10
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	40 e0       	ldi	r20, 0x00	; 0
     f50:	50 e0       	ldi	r21, 0x00	; 0
     f52:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
     f56:	a5 01       	movw	r20, r10
     f58:	94 01       	movw	r18, r8
     f5a:	2c 59       	subi	r18, 0x9C	; 156
     f5c:	3f 4f       	sbci	r19, 0xFF	; 255
     f5e:	4f 4f       	sbci	r20, 0xFF	; 255
     f60:	5f 4f       	sbci	r21, 0xFF	; 255
     f62:	2c 0d       	add	r18, r12
     f64:	3d 1d       	adc	r19, r13
     f66:	4e 1d       	adc	r20, r14
     f68:	5f 1d       	adc	r21, r15
     f6a:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
           if (lirx1  > 0) {
     f6e:	21 15       	cp	r18, r1
     f70:	31 05       	cpc	r19, r1
     f72:	41 05       	cpc	r20, r1
     f74:	51 05       	cpc	r21, r1
     f76:	11 f5       	brne	.+68     	; 0xfbc <__stack+0x6bd>
              DisplayValue(lirx1,-1,LCD_CHAR_OMEGA,3)
              lcd_space();
 #endif
              goto testend; // <10% mismatch
           }
           PartFound = PART_RESISTOR;
     f78:	86 e0       	ldi	r24, 0x06	; 6
     f7a:	80 93 09 01 	sts	0x0109, r24
           goto testend;
     f7e:	1e c0       	rjmp	.+60     	; 0xfbc <__stack+0x6bd>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
     f80:	45 17       	cp	r20, r21
     f82:	08 f4       	brcc	.+2      	; 0xf86 <__stack+0x687>
     f84:	bf cf       	rjmp	.-130    	; 0xf04 <__stack+0x605>
           }
           PartFound = PART_RESISTOR;
           goto testend;
        } // end for
        // no same resistor with the same Tristate-Pin found, new one
        thisR = &resis[ResistorsFound];		// pointer to a free resistor structure
     f86:	25 2f       	mov	r18, r21
     f88:	30 e0       	ldi	r19, 0x00	; 0
        thisR->rx = lrx1;		// save resistor value
     f8a:	8b e0       	ldi	r24, 0x0B	; 11
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	28 9f       	mul	r18, r24
     f90:	f0 01       	movw	r30, r0
     f92:	29 9f       	mul	r18, r25
     f94:	f0 0d       	add	r31, r0
     f96:	38 9f       	mul	r19, r24
     f98:	f0 0d       	add	r31, r0
     f9a:	11 24       	eor	r1, r1
     f9c:	e6 5e       	subi	r30, 0xE6	; 230
     f9e:	fe 4f       	sbci	r31, 0xFE	; 254
     fa0:	c0 82       	st	Z, r12
     fa2:	d1 82       	std	Z+1, r13	; 0x01
     fa4:	e2 82       	std	Z+2, r14	; 0x02
     fa6:	f3 82       	std	Z+3, r15	; 0x03
#if FLASHEND > 0x1fff
        thisR->lx = 0;			// no inductance
     fa8:	14 82       	std	Z+4, r1	; 0x04
     faa:	15 82       	std	Z+5, r1	; 0x05
     fac:	16 82       	std	Z+6, r1	; 0x06
     fae:	17 82       	std	Z+7, r1	; 0x07
#endif
        thisR->ra = LowPin;		// save Pin numbers
     fb0:	30 86       	std	Z+8, r3	; 0x08
        thisR->rb = HighPin;
     fb2:	11 87       	std	Z+9, r17	; 0x09
        thisR->rt = TristatePin;	// Tristate is saved for easier search of inverse measurement
     fb4:	22 86       	std	Z+10, r2	; 0x0a
        ResistorsFound++;			// 1 more resistor found
     fb6:	5f 5f       	subi	r21, 0xFF	; 255
     fb8:	50 93 57 01 	sts	0x0157, r21
     }
  }
#endif
  testend:
#if U_SCALE != 1
  ADCconfig.U_AVCC /= U_SCALE;		// scale back to mV resolution
     fbc:	80 91 3f 01 	lds	r24, 0x013F
     fc0:	90 91 40 01 	lds	r25, 0x0140
     fc4:	96 95       	lsr	r25
     fc6:	87 95       	ror	r24
     fc8:	96 95       	lsr	r25
     fca:	87 95       	ror	r24
     fcc:	90 93 40 01 	sts	0x0140, r25
     fd0:	80 93 3f 01 	sts	0x013F, r24
  ADCconfig.U_Bandgap /= U_SCALE;
     fd4:	80 91 3d 01 	lds	r24, 0x013D
     fd8:	90 91 3e 01 	lds	r25, 0x013E
     fdc:	96 95       	lsr	r25
     fde:	87 95       	ror	r24
     fe0:	96 95       	lsr	r25
     fe2:	87 95       	ror	r24
     fe4:	90 93 3e 01 	sts	0x013E, r25
     fe8:	80 93 3d 01 	sts	0x013D, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = ANZ_MESS;		// switch back to standard number of repetition
     fec:	89 e1       	ldi	r24, 0x19	; 25
     fee:	80 93 3b 01 	sts	0x013B, r24
#if DebugOut < 10
  wait2s();
#endif
#endif
 clean_ports:
  ADC_DDR = TXD_MSK;		// all ADC-Pins Input
     ff2:	88 e0       	ldi	r24, 0x08	; 8
     ff4:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// all ADC outputs to Ground, keine Pull up
     ff6:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// all resistor-outputs to Input
     ff8:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// all resistor-outputs to Ground, no Pull up
     ffa:	15 b8       	out	0x05, r1	; 5
} // end CheckPins()
     ffc:	66 96       	adiw	r28, 0x16	; 22
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	ff 90       	pop	r15
    1012:	ef 90       	pop	r14
    1014:	df 90       	pop	r13
    1016:	cf 90       	pop	r12
    1018:	bf 90       	pop	r11
    101a:	af 90       	pop	r10
    101c:	9f 90       	pop	r9
    101e:	8f 90       	pop	r8
    1020:	7f 90       	pop	r7
    1022:	6f 90       	pop	r6
    1024:	5f 90       	pop	r5
    1026:	4f 90       	pop	r4
    1028:	3f 90       	pop	r3
    102a:	2f 90       	pop	r2
    102c:	08 95       	ret

0000102e <EntladePins>:

// first discharge any charge of capacitors
void EntladePins() {
    102e:	af 92       	push	r10
    1030:	bf 92       	push	r11
    1032:	cf 92       	push	r12
    1034:	df 92       	push	r13
    1036:	ef 92       	push	r14
    1038:	ff 92       	push	r15
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	ba e0       	ldi	r27, 0x0A	; 10
    1044:	cb 2e       	mov	r12, r27
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
    1046:	a8 e0       	ldi	r26, 0x08	; 8
    1048:	da 2e       	mov	r13, r26
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     R_PORT = 0;			// R-outputs auf 0
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
    104a:	fa e2       	ldi	r31, 0x2A	; 42
    104c:	af 2e       	mov	r10, r31
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
    104e:	e5 e1       	ldi	r30, 0x15	; 21
    1050:	be 2e       	mov	r11, r30
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
    1052:	d7 b8       	out	0x07, r13	; 7
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
    1054:	d8 b8       	out	0x08, r13	; 8
     R_PORT = 0;			// R-outputs auf 0
    1056:	15 b8       	out	0x05, r1	; 5
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
    1058:	a4 b8       	out	0x04, r10	; 4
     adcmv[0] = W5msReadADC(PC0);	// which voltage has Pin 1?
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
    1060:	8c 01       	movw	r16, r24
     adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
    1068:	ec 01       	movw	r28, r24
     adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
    106a:	82 e0       	ldi	r24, 0x02	; 2
    106c:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
     if ((PartFound == PART_CELL) || (adcmv[0] < CAP_EMPTY_LEVEL) & (adcmv[1] < CAP_EMPTY_LEVEL) & (adcmv[2] < CAP_EMPTY_LEVEL)) {
    1070:	20 91 09 01 	lds	r18, 0x0109
    1074:	28 30       	cpi	r18, 0x08	; 8
    1076:	c1 f0       	breq	.+48     	; 0x10a8 <EntladePins+0x7a>
    1078:	41 e0       	ldi	r20, 0x01	; 1
    107a:	c4 30       	cpi	r28, 0x04	; 4
    107c:	d1 05       	cpc	r29, r1
    107e:	08 f0       	brcs	.+2      	; 0x1082 <EntladePins+0x54>
    1080:	40 e0       	ldi	r20, 0x00	; 0
    1082:	21 e0       	ldi	r18, 0x01	; 1
    1084:	04 30       	cpi	r16, 0x04	; 4
    1086:	11 05       	cpc	r17, r1
    1088:	08 f0       	brcs	.+2      	; 0x108c <EntladePins+0x5e>
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	42 23       	and	r20, r18
    108e:	50 e0       	ldi	r21, 0x00	; 0
    1090:	21 e0       	ldi	r18, 0x01	; 1
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	84 30       	cpi	r24, 0x04	; 4
    1096:	91 05       	cpc	r25, r1
    1098:	10 f0       	brcs	.+4      	; 0x109e <EntladePins+0x70>
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	24 23       	and	r18, r20
    10a0:	35 23       	and	r19, r21
    10a2:	21 15       	cp	r18, r1
    10a4:	31 05       	cpc	r19, r1
    10a6:	21 f0       	breq	.+8      	; 0x10b0 <EntladePins+0x82>
        ADC_DDR = TXD_MSK;		// switch all ADC-Pins to input
    10a8:	88 e0       	ldi	r24, 0x08	; 8
    10aa:	87 b9       	out	0x07, r24	; 7
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
    10ac:	14 b8       	out	0x04, r1	; 4
        return;
    10ae:	4f c0       	rjmp	.+158    	; 0x114e <EntladePins+0x120>
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
    10b0:	23 e0       	ldi	r18, 0x03	; 3
    10b2:	08 3e       	cpi	r16, 0xE8	; 232
    10b4:	12 07       	cpc	r17, r18
    10b6:	10 f0       	brcs	.+4      	; 0x10bc <EntladePins+0x8e>
  uint8_t lop_cnt;		// loop counter
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
    10b8:	28 e0       	ldi	r18, 0x08	; 8
    10ba:	01 c0       	rjmp	.+2      	; 0x10be <EntladePins+0x90>
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
        return;
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
        adc_gnd |= (1<<PC0);	//Pin 1 directly to GND
    10bc:	29 e0       	ldi	r18, 0x09	; 9
     }
     if (adcmv[1] < 1000) {
    10be:	33 e0       	ldi	r19, 0x03	; 3
    10c0:	c8 3e       	cpi	r28, 0xE8	; 232
    10c2:	d3 07       	cpc	r29, r19
    10c4:	08 f4       	brcc	.+2      	; 0x10c8 <EntladePins+0x9a>
        adc_gnd |= (1<<PC1);	//Pin 2 directly to GND
    10c6:	22 60       	ori	r18, 0x02	; 2
     }
     if (adcmv[2] < 1000) {
    10c8:	33 e0       	ldi	r19, 0x03	; 3
    10ca:	88 3e       	cpi	r24, 0xE8	; 232
    10cc:	93 07       	cpc	r25, r19
    10ce:	08 f4       	brcc	.+2      	; 0x10d2 <EntladePins+0xa4>
        adc_gnd |= (1<<PC2);	//Pin 3 directly to  GND
    10d0:	24 60       	ori	r18, 0x04	; 4
     }
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time
    10d2:	27 b9       	out	0x07, r18	; 7

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
    10d4:	b4 b8       	out	0x04, r11	; 4
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    10d6:	c0 e0       	ldi	r28, 0x00	; 0
    10d8:	d0 e0       	ldi	r29, 0x00	; 0
        wdt_reset();
    10da:	a8 95       	wdr
        adcmv[0] = W20msReadADC(PC0);	// which voltage has Pin 1?
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	0e 94 93 19 	call	0x3326	; 0x3326 <W20msReadADC>
    10e2:	7c 01       	movw	r14, r24
        adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
    10ea:	8c 01       	movw	r16, r24
        adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
    10ec:	82 e0       	ldi	r24, 0x02	; 2
    10ee:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
        if (adcmv[0] < 1300) {
    10f2:	24 e1       	ldi	r18, 0x14	; 20
    10f4:	e2 16       	cp	r14, r18
    10f6:	25 e0       	ldi	r18, 0x05	; 5
    10f8:	f2 06       	cpc	r15, r18
    10fa:	08 f4       	brcc	.+2      	; 0x10fe <EntladePins+0xd0>
           ADC_DDR |= (1<<PC0);	// below 1.3V , switch directly with ADC-Port to GND
    10fc:	38 9a       	sbi	0x07, 0	; 7
        }
        if (adcmv[1] < 1300) {
    10fe:	35 e0       	ldi	r19, 0x05	; 5
    1100:	04 31       	cpi	r16, 0x14	; 20
    1102:	13 07       	cpc	r17, r19
    1104:	08 f4       	brcc	.+2      	; 0x1108 <EntladePins+0xda>
           ADC_DDR |= (1<<PC1);	// below 1.3V, switch directly with ADC-Port to GND
    1106:	39 9a       	sbi	0x07, 1	; 7
        }
        if (adcmv[2] < 1300) {
    1108:	25 e0       	ldi	r18, 0x05	; 5
    110a:	84 31       	cpi	r24, 0x14	; 20
    110c:	92 07       	cpc	r25, r18
    110e:	08 f4       	brcc	.+2      	; 0x1112 <EntladePins+0xe4>
           ADC_DDR |= (1<<PC2);	// below 1.3V, switch directly with ADC-Port to GND
    1110:	3a 9a       	sbi	0x07, 2	; 7
        }
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
    1112:	36 e0       	ldi	r19, 0x06	; 6
    1114:	e3 16       	cp	r14, r19
    1116:	f1 04       	cpc	r15, r1
    1118:	30 f4       	brcc	.+12     	; 0x1126 <EntladePins+0xf8>
    111a:	06 30       	cpi	r16, 0x06	; 6
    111c:	11 05       	cpc	r17, r1
    111e:	18 f4       	brcc	.+6      	; 0x1126 <EntladePins+0xf8>
    1120:	86 30       	cpi	r24, 0x06	; 6
    1122:	91 05       	cpc	r25, r1
    1124:	38 f0       	brcs	.+14     	; 0x1134 <EntladePins+0x106>

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    1126:	21 96       	adiw	r28, 0x01	; 1
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	c4 3f       	cpi	r28, 0xF4	; 244
    112c:	d8 07       	cpc	r29, r24
    112e:	a9 f6       	brne	.-86     	; 0x10da <EntladePins+0xac>
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
           break;
        }
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
    1130:	d0 92 09 01 	sts	0x0109, r13

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    1134:	00 e0       	ldi	r16, 0x00	; 0
    1136:	10 e0       	ldi	r17, 0x00	; 0
    1138:	04 c0       	rjmp	.+8      	; 0x1142 <EntladePins+0x114>
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
    113a:	0e 94 0f 14 	call	0x281e	; 0x281e <wait1ms>
    113e:	0f 5f       	subi	r16, 0xFF	; 255
    1140:	1f 4f       	sbci	r17, 0xFF	; 255
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
    1142:	0c 17       	cp	r16, r28
    1144:	1d 07       	cpc	r17, r29
    1146:	c8 f3       	brcs	.-14     	; 0x113a <EntladePins+0x10c>
    1148:	ca 94       	dec	r12
  unsigned int clr_cnt;		// Clear Counter
  uint8_t lop_cnt;		// loop counter
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
    114a:	09 f0       	breq	.+2      	; 0x114e <EntladePins+0x120>
    114c:	82 cf       	rjmp	.-252    	; 0x1052 <EntladePins+0x24>
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     }
  } // end while
 }
    114e:	df 91       	pop	r29
    1150:	cf 91       	pop	r28
    1152:	1f 91       	pop	r17
    1154:	0f 91       	pop	r16
    1156:	ff 90       	pop	r15
    1158:	ef 90       	pop	r14
    115a:	df 90       	pop	r13
    115c:	cf 90       	pop	r12
    115e:	bf 90       	pop	r11
    1160:	af 90       	pop	r10
    1162:	08 95       	ret

00001164 <RefVoltage>:



#ifdef AUTO_RH
void RefVoltage(void) {
    1164:	ff 92       	push	r15
    1166:	0f 93       	push	r16
    1168:	1f 93       	push	r17
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;

  #ifdef AUTO_CAL
  referenz = ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset));
    116e:	86 e6       	ldi	r24, 0x66	; 102
    1170:	92 e0       	ldi	r25, 0x02	; 2
    1172:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <__eerd_word_m328p>
    1176:	20 91 41 01 	lds	r18, 0x0141
    117a:	30 91 42 01 	lds	r19, 0x0142
    117e:	28 0f       	add	r18, r24
    1180:	39 1f       	adc	r19, r25
  #else
  referenz = ref_mv + REF_C_KORR;
  #endif
  if (referenz >= Ref_Tab_Beginn) {
    1182:	83 e0       	ldi	r24, 0x03	; 3
    1184:	28 3e       	cpi	r18, 0xE8	; 232
    1186:	38 07       	cpc	r19, r24
    1188:	20 f0       	brcs	.+8      	; 0x1192 <RefVoltage+0x2e>
     referenz -= Ref_Tab_Beginn;
    118a:	c9 01       	movw	r24, r18
    118c:	88 5e       	subi	r24, 0xE8	; 232
    118e:	93 40       	sbci	r25, 0x03	; 3
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <RefVoltage+0x32>
  } else  {
     referenz = 0;		// limit to begin of table
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = referenz / Ref_Tab_Abstand;
    1196:	62 e3       	ldi	r22, 0x32	; 50
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	0e 94 b1 1c 	call	0x3962	; 0x3962 <__udivmodhi4>
  tabres = referenz % Ref_Tab_Abstand;
    119e:	f8 2e       	mov	r15, r24
  tabres = Ref_Tab_Abstand-tabres;
  if (tabind > 7) {
     tabind = 7;		// limit to end of table
  }
  // interpolate the table of factors
  y1 = MEM_read_word(&RHtab[tabind]);
    11a0:	68 30       	cpi	r22, 0x08	; 8
    11a2:	08 f0       	brcs	.+2      	; 0x11a6 <RefVoltage+0x42>
    11a4:	67 e0       	ldi	r22, 0x07	; 7
    11a6:	c6 2f       	mov	r28, r22
    11a8:	d0 e0       	ldi	r29, 0x00	; 0
    11aa:	ce 01       	movw	r24, r28
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	8a 54       	subi	r24, 0x4A	; 74
    11b2:	9f 4f       	sbci	r25, 0xFF	; 255
    11b4:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <__eerd_word_m328p>
    11b8:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RHtab[tabind+1]);
    11ba:	ce 01       	movw	r24, r28
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	88 54       	subi	r24, 0x48	; 72
    11c2:	9f 4f       	sbci	r25, 0xFF	; 255
    11c4:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <__eerd_word_m328p>
    11c8:	9c 01       	movw	r18, r24
  } else  {
     referenz = 0;		// limit to begin of table
  }
  tabind = referenz / Ref_Tab_Abstand;
  tabres = referenz % Ref_Tab_Abstand;
  tabres = Ref_Tab_Abstand-tabres;
    11ca:	42 e3       	ldi	r20, 0x32	; 50
    11cc:	4f 19       	sub	r20, r15
  }
  // interpolate the table of factors
  y1 = MEM_read_word(&RHtab[tabind]);
  y2 = MEM_read_word(&RHtab[tabind+1]);
  // RHmultip is the interpolated factor to compute capacity from load time with 470k
  RHmultip = ((y1 - y2) * tabres + (Ref_Tab_Abstand/2)) / Ref_Tab_Abstand + y2;
    11ce:	50 e0       	ldi	r21, 0x00	; 0
    11d0:	08 1b       	sub	r16, r24
    11d2:	19 0b       	sbc	r17, r25
    11d4:	40 9f       	mul	r20, r16
    11d6:	c0 01       	movw	r24, r0
    11d8:	41 9f       	mul	r20, r17
    11da:	90 0d       	add	r25, r0
    11dc:	50 9f       	mul	r21, r16
    11de:	90 0d       	add	r25, r0
    11e0:	11 24       	eor	r1, r1
    11e2:	49 96       	adiw	r24, 0x19	; 25
    11e4:	62 e3       	ldi	r22, 0x32	; 50
    11e6:	70 e0       	ldi	r23, 0x00	; 0
    11e8:	0e 94 b1 1c 	call	0x3962	; 0x3962 <__udivmodhi4>
    11ec:	62 0f       	add	r22, r18
    11ee:	73 1f       	adc	r23, r19
    11f0:	70 93 01 01 	sts	0x0101, r23
    11f4:	60 93 00 01 	sts	0x0100, r22
 }
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	1f 91       	pop	r17
    11fe:	0f 91       	pop	r16
    1200:	ff 90       	pop	r15
    1202:	08 95       	ret

00001204 <lcd_clear_line>:
#endif

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
    1204:	1f 93       	push	r17
    1206:	14 e1       	ldi	r17, 0x14	; 20
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    lcd_space();
    1208:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>
    120c:	11 50       	subi	r17, 0x01	; 1

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    120e:	e1 f7       	brne	.-8      	; 0x1208 <lcd_clear_line+0x4>
    lcd_space();
 }
}
    1210:	1f 91       	pop	r17
    1212:	08 95       	ret

00001214 <DisplayValue>:
 *    e.g: p = 10^-12 -> -12
 *  - unit character (0 = none)
 *  digits = 2, 3 or 4
 */
void DisplayValue(unsigned long Value, int8_t Exponent, unsigned char Unit, unsigned char digits)
{
    1214:	2f 92       	push	r2
    1216:	3f 92       	push	r3
    1218:	4f 92       	push	r4
    121a:	5f 92       	push	r5
    121c:	7f 92       	push	r7
    121e:	8f 92       	push	r8
    1220:	9f 92       	push	r9
    1222:	af 92       	push	r10
    1224:	bf 92       	push	r11
    1226:	cf 92       	push	r12
    1228:	df 92       	push	r13
    122a:	ef 92       	push	r14
    122c:	ff 92       	push	r15
    122e:	0f 93       	push	r16
    1230:	1f 93       	push	r17
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	2f 97       	sbiw	r28, 0x0f	; 15
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	6b 01       	movw	r12, r22
    1248:	7c 01       	movw	r14, r24
    124a:	14 2f       	mov	r17, r20
    124c:	72 2e       	mov	r7, r18
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
    124e:	03 30       	cpi	r16, 0x03	; 3
    1250:	29 f0       	breq	.+10     	; 0x125c <DisplayValue+0x48>
  if (digits == 4) Limit = 10000;
    1252:	04 30       	cpi	r16, 0x04	; 4
    1254:	31 f0       	breq	.+12     	; 0x1262 <DisplayValue+0x4e>
  uint8_t           Offset;		/* exponent of offset to next 10^3 step */
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
    1256:	84 e6       	ldi	r24, 0x64	; 100
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	14 c0       	rjmp	.+40     	; 0x1284 <DisplayValue+0x70>
  if (digits == 3) Limit = 1000;
    125c:	88 ee       	ldi	r24, 0xE8	; 232
    125e:	93 e0       	ldi	r25, 0x03	; 3
    1260:	11 c0       	rjmp	.+34     	; 0x1284 <DisplayValue+0x70>
  if (digits == 4) Limit = 10000;
    1262:	80 e1       	ldi	r24, 0x10	; 16
    1264:	97 e2       	ldi	r25, 0x27	; 39
    1266:	0e c0       	rjmp	.+28     	; 0x1284 <DisplayValue+0x70>
  while (Value >= Limit)
  {
    Value += 5;				/* for automagic rounding */
    1268:	c7 01       	movw	r24, r14
    126a:	b6 01       	movw	r22, r12
    126c:	6b 5f       	subi	r22, 0xFB	; 251
    126e:	7f 4f       	sbci	r23, 0xFF	; 255
    1270:	8f 4f       	sbci	r24, 0xFF	; 255
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    Value = Value / 10;			/* scale down by 10^1 */
    1274:	a5 01       	movw	r20, r10
    1276:	94 01       	movw	r18, r8
    1278:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
    127c:	69 01       	movw	r12, r18
    127e:	7a 01       	movw	r14, r20
    Exponent++;				/* increase exponent by 1 */
    1280:	1f 5f       	subi	r17, 0xFF	; 255
    1282:	08 c0       	rjmp	.+16     	; 0x1294 <DisplayValue+0x80>


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
  if (digits == 4) Limit = 10000;
  while (Value >= Limit)
    1284:	1c 01       	movw	r2, r24
    1286:	44 24       	eor	r4, r4
    1288:	55 24       	eor	r5, r5
  {
    Value += 5;				/* for automagic rounding */
    Value = Value / 10;			/* scale down by 10^1 */
    128a:	4a e0       	ldi	r20, 0x0A	; 10
    128c:	84 2e       	mov	r8, r20
    128e:	91 2c       	mov	r9, r1
    1290:	a1 2c       	mov	r10, r1
    1292:	b1 2c       	mov	r11, r1


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
  if (digits == 4) Limit = 10000;
  while (Value >= Limit)
    1294:	c2 14       	cp	r12, r2
    1296:	d3 04       	cpc	r13, r3
    1298:	e4 04       	cpc	r14, r4
    129a:	f5 04       	cpc	r15, r5
    129c:	28 f7       	brcc	.-54     	; 0x1268 <DisplayValue+0x54>


  /*
   *  determine prefix
   */
  Length = Exponent + 12;
    129e:	81 2f       	mov	r24, r17
    12a0:	84 5f       	subi	r24, 0xF4	; 244
    12a2:	83 31       	cpi	r24, 0x13	; 19
    12a4:	08 f0       	brcs	.+2      	; 0x12a8 <DisplayValue+0x94>
    12a6:	82 e1       	ldi	r24, 0x12	; 18
  if (Length <  0) Length = 0;		/* Limit to minimum prefix */
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
  Index = Length / 3;
    12a8:	23 e0       	ldi	r18, 0x03	; 3
  Offset = Length % 3;
    12aa:	62 2f       	mov	r22, r18
    12ac:	0e 94 a5 1c 	call	0x394a	; 0x394a <__udivmodqi4>
    12b0:	19 2f       	mov	r17, r25
    if (Offset > 0)
    12b2:	99 23       	and	r25, r25
    12b4:	19 f0       	breq	.+6      	; 0x12bc <DisplayValue+0xa8>
    {
      Index++;				/* adjust index for exponent offset, take next prefix */
    12b6:	8f 5f       	subi	r24, 0xFF	; 255
      Offset = 3 - Offset;		/* reverse value (1 or 2) */
    12b8:	29 1b       	sub	r18, r25
    12ba:	12 2f       	mov	r17, r18
    }
  Prefix = MEM_read_byte((uint8_t *)(&PrefixTab[Index]));   /* look up prefix in table */
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	81 5a       	subi	r24, 0xA1	; 161
    12c0:	9d 4f       	sbci	r25, 0xFD	; 253
    12c2:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__eerd_byte_m328p>
    12c6:	b8 2e       	mov	r11, r24
  /*
   *  display value
   */

  /* convert value into string */
  utoa((unsigned int)Value, OutBuffer, 10);
    12c8:	c6 01       	movw	r24, r12
    12ca:	6e 01       	movw	r12, r28
    12cc:	08 94       	sec
    12ce:	c1 1c       	adc	r12, r1
    12d0:	d1 1c       	adc	r13, r1
    12d2:	b6 01       	movw	r22, r12
    12d4:	4a e0       	ldi	r20, 0x0A	; 10
    12d6:	50 e0       	ldi	r21, 0x00	; 0
    12d8:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <utoa>
  Length = strlen(OutBuffer);
    12dc:	f6 01       	movw	r30, r12
    12de:	01 90       	ld	r0, Z+
    12e0:	00 20       	and	r0, r0
    12e2:	e9 f7       	brne	.-6      	; 0x12de <DisplayValue+0xca>
    12e4:	31 97       	sbiw	r30, 0x01	; 1
    12e6:	2e 2e       	mov	r2, r30
    12e8:	2c 18       	sub	r2, r12

  /* position of dot */
  Exponent = Length - Offset;		/* calculate position */
    12ea:	82 2c       	mov	r8, r2
    12ec:	81 1a       	sub	r8, r17

  if (Exponent <= 0)			/* we have to prepend "0." */
    12ee:	18 14       	cp	r1, r8
    12f0:	44 f0       	brlt	.+16     	; 0x1302 <DisplayValue+0xee>
  {
    /* 0: factor 10 / -1: factor 100 */
//    lcd_data('0');
    lcd_data('.');
    12f2:	8e e2       	ldi	r24, 0x2E	; 46
    12f4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
    if (Exponent < 0) lcd_data('0');	/* extra 0 for factor 100 */
    12f8:	88 20       	and	r8, r8
    12fa:	19 f0       	breq	.+6      	; 0x1302 <DisplayValue+0xee>
    12fc:	80 e3       	ldi	r24, 0x30	; 48
    12fe:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
  }

  if (Offset == 0) Exponent = -1;	/* disable dot if not needed */
    1302:	11 23       	and	r17, r17
    1304:	11 f4       	brne	.+4      	; 0x130a <DisplayValue+0xf6>
    1306:	88 24       	eor	r8, r8
    1308:	8a 94       	dec	r8
    130a:	6e 01       	movw	r12, r28
    130c:	08 94       	sec
    130e:	c1 1c       	adc	r12, r1
    1310:	d1 1c       	adc	r13, r1
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    1312:	00 e0       	ldi	r16, 0x00	; 0
    1314:	10 e0       	ldi	r17, 0x00	; 0
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    Index++;				/* next one */
    if (Index == Exponent) {
    1316:	99 24       	eor	r9, r9
    1318:	87 fc       	sbrc	r8, 7
    131a:	90 94       	com	r9
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    131c:	0d c0       	rjmp	.+26     	; 0x1338 <DisplayValue+0x124>
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    131e:	0f 5f       	subi	r16, 0xFF	; 255
    1320:	1f 4f       	sbci	r17, 0xFF	; 255
    1322:	f6 01       	movw	r30, r12
    1324:	81 91       	ld	r24, Z+
    1326:	6f 01       	movw	r12, r30
    1328:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
    Index++;				/* next one */
    if (Index == Exponent) {
    132c:	08 15       	cp	r16, r8
    132e:	19 05       	cpc	r17, r9
    1330:	19 f4       	brne	.+6      	; 0x1338 <DisplayValue+0x124>
      lcd_data('.');			/* display dot */
    1332:	8e e2       	ldi	r24, 0x2E	; 46
    1334:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    1338:	02 15       	cp	r16, r2
    133a:	88 f3       	brcs	.-30     	; 0x131e <DisplayValue+0x10a>
      lcd_data('.');			/* display dot */
    }
  }

  /* display prefix and unit */
  if (Prefix != 0) lcd_data(Prefix);
    133c:	bb 20       	and	r11, r11
    133e:	19 f0       	breq	.+6      	; 0x1346 <DisplayValue+0x132>
    1340:	8b 2d       	mov	r24, r11
    1342:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
  if (Unit) lcd_data(Unit);
    1346:	77 20       	and	r7, r7
    1348:	19 f0       	breq	.+6      	; 0x1350 <DisplayValue+0x13c>
    134a:	87 2d       	mov	r24, r7
    134c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
}
    1350:	2f 96       	adiw	r28, 0x0f	; 15
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	1f 91       	pop	r17
    1362:	0f 91       	pop	r16
    1364:	ff 90       	pop	r15
    1366:	ef 90       	pop	r14
    1368:	df 90       	pop	r13
    136a:	cf 90       	pop	r12
    136c:	bf 90       	pop	r11
    136e:	af 90       	pop	r10
    1370:	9f 90       	pop	r9
    1372:	8f 90       	pop	r8
    1374:	7f 90       	pop	r7
    1376:	5f 90       	pop	r5
    1378:	4f 90       	pop	r4
    137a:	3f 90       	pop	r3
    137c:	2f 90       	pop	r2
    137e:	08 95       	ret

00001380 <RvalOut>:
      lcd_space();
   }
}

#ifdef R_MESS
void RvalOut(uint8_t ii) {	
    1380:	0f 93       	push	r16
   // output of resistor value

   DisplayValue(resis[ii].rx,-1,LCD_CHAR_OMEGA,4);
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	2b e0       	ldi	r18, 0x0B	; 11
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	82 9f       	mul	r24, r18
    138a:	f0 01       	movw	r30, r0
    138c:	83 9f       	mul	r24, r19
    138e:	f0 0d       	add	r31, r0
    1390:	92 9f       	mul	r25, r18
    1392:	f0 0d       	add	r31, r0
    1394:	11 24       	eor	r1, r1
    1396:	e6 5e       	subi	r30, 0xE6	; 230
    1398:	fe 4f       	sbci	r31, 0xFE	; 254
    139a:	60 81       	ld	r22, Z
    139c:	71 81       	ldd	r23, Z+1	; 0x01
    139e:	82 81       	ldd	r24, Z+2	; 0x02
    13a0:	93 81       	ldd	r25, Z+3	; 0x03
    13a2:	4f ef       	ldi	r20, 0xFF	; 255
    13a4:	24 ef       	ldi	r18, 0xF4	; 244
    13a6:	04 e0       	ldi	r16, 0x04	; 4
    13a8:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
   lcd_space();
    13ac:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>
 }
    13b0:	0f 91       	pop	r16
    13b2:	08 95       	ret

000013b4 <mVAusgabe>:
   lcd_line2(); 				//2. row
   lcd_fix_string(Uf_str);			//"Uf="
   mVAusgabe(bcdnum >> 4);
   mVAusgabe(bcdnum & 0x0f);
}
void mVAusgabe(uint8_t nn) {
    13b4:	0f 93       	push	r16
   if (nn < 3) {
    13b6:	83 30       	cpi	r24, 0x03	; 3
    13b8:	98 f4       	brcc	.+38     	; 0x13e0 <mVAusgabe+0x2c>
      // Output in mV units
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
    13ba:	e8 2f       	mov	r30, r24
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	ee 0f       	add	r30, r30
    13c0:	ff 1f       	adc	r31, r31
    13c2:	ee 0f       	add	r30, r30
    13c4:	ff 1f       	adc	r31, r31
    13c6:	e7 59       	subi	r30, 0x97	; 151
    13c8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ca:	62 81       	ldd	r22, Z+2	; 0x02
    13cc:	73 81       	ldd	r23, Z+3	; 0x03
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	4d ef       	ldi	r20, 0xFD	; 253
    13d4:	26 e5       	ldi	r18, 0x56	; 86
    13d6:	03 e0       	ldi	r16, 0x03	; 3
    13d8:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
      lcd_space();
    13dc:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>
   }
}
    13e0:	0f 91       	pop	r16
    13e2:	08 95       	ret

000013e4 <UfAusgabe>:
// output of flux voltage for 1-2 diodes in row 2
// bcdnum = Numbers of both Diodes:
// higher 4 Bit  number of first Diode
// lower 4 Bit  number of second Diode (Structure diodes[nn])
// if number >= 3  no output is done
void UfAusgabe(uint8_t bcdnum) {
    13e4:	1f 93       	push	r17
    13e6:	18 2f       	mov	r17, r24

   lcd_line2(); 				//2. row
    13e8:	80 ec       	ldi	r24, 0xC0	; 192
    13ea:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
   lcd_fix_string(Uf_str);			//"Uf="
    13ee:	82 e9       	ldi	r24, 0x92	; 146
    13f0:	91 e0       	ldi	r25, 0x01	; 1
    13f2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
   mVAusgabe(bcdnum >> 4);
    13f6:	81 2f       	mov	r24, r17
    13f8:	82 95       	swap	r24
    13fa:	8f 70       	andi	r24, 0x0F	; 15
    13fc:	0e 94 da 09 	call	0x13b4	; 0x13b4 <mVAusgabe>
   mVAusgabe(bcdnum & 0x0f);
    1400:	81 2f       	mov	r24, r17
    1402:	8f 70       	andi	r24, 0x0F	; 15
    1404:	0e 94 da 09 	call	0x13b4	; 0x13b4 <mVAusgabe>
}
    1408:	1f 91       	pop	r17
    140a:	08 95       	ret

0000140c <AutoCheck>:
void AutoCheck(void) {
    140c:	2f 92       	push	r2
    140e:	3f 92       	push	r3
    1410:	4f 92       	push	r4
    1412:	5f 92       	push	r5
    1414:	6f 92       	push	r6
    1416:	7f 92       	push	r7
    1418:	8f 92       	push	r8
    141a:	9f 92       	push	r9
    141c:	af 92       	push	r10
    141e:	bf 92       	push	r11
    1420:	cf 92       	push	r12
    1422:	df 92       	push	r13
    1424:	ef 92       	push	r14
    1426:	ff 92       	push	r15
    1428:	0f 93       	push	r16
    142a:	1f 93       	push	r17
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	2e 97       	sbiw	r28, 0x0e	; 14
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	cd bf       	out	0x3d, r28	; 61

#ifdef AUTO_CAL
  uint8_t cap_found;	// counter for found capacitor
  int8_t udiff2;
#endif
  ADC_PORT = TXD_VAL;
    1440:	88 e0       	ldi	r24, 0x08	; 8
    1442:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = TXD_MSK;
    1444:	87 b9       	out	0x07, r24	; 7
  R_PORT = (1<<(TP1*2));		//Pin 1 over RL to +
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	85 b9       	out	0x05, r24	; 5
  R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//Pin 2 over RL to -
    144a:	85 e0       	ldi	r24, 0x05	; 5
    144c:	84 b9       	out	0x04, r24	; 4
  adcmv[0] = W5msReadADC(PC0);		// voltage at Pin 1
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
    1454:	8c 01       	movw	r16, r24
    1456:	9a 83       	std	Y+2, r25	; 0x02
    1458:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = ReadADC(PC1);		// voltage at Pin 2
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
    1460:	7c 01       	movw	r14, r24
    1462:	9c 83       	std	Y+4, r25	; 0x04
    1464:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = ReadADC(PC2);		// voltage at Pin 3
    1466:	82 e0       	ldi	r24, 0x02	; 2
    1468:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
    146c:	9c 01       	movw	r18, r24
    146e:	9e 83       	std	Y+6, r25	; 0x06
    1470:	8d 83       	std	Y+5, r24	; 0x05
  if (abs((int)(adcmv[1] - adcmv[0])) > 20) {
    1472:	e0 1a       	sub	r14, r16
    1474:	f1 0a       	sbc	r15, r17
    1476:	f7 fe       	sbrs	r15, 7
    1478:	04 c0       	rjmp	.+8      	; 0x1482 <AutoCheck+0x76>
    147a:	f0 94       	com	r15
    147c:	e1 94       	neg	r14
    147e:	f1 08       	sbc	r15, r1
    1480:	f3 94       	inc	r15
    1482:	85 e1       	ldi	r24, 0x15	; 21
    1484:	e8 16       	cp	r14, r24
    1486:	f1 04       	cpc	r15, r1
    1488:	0c f0       	brlt	.+2      	; 0x148c <AutoCheck+0x80>
    148a:	49 c4       	rjmp	.+2194   	; 0x1d1e <AutoCheck+0x912>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[2] - adcmv[0])) > 20) {
    148c:	20 1b       	sub	r18, r16
    148e:	31 0b       	sbc	r19, r17
    1490:	37 ff       	sbrs	r19, 7
    1492:	03 c0       	rjmp	.+6      	; 0x149a <AutoCheck+0x8e>
    1494:	30 95       	com	r19
    1496:	21 95       	neg	r18
    1498:	3f 4f       	sbci	r19, 0xFF	; 255
    149a:	25 31       	cpi	r18, 0x15	; 21
    149c:	31 05       	cpc	r19, r1
    149e:	0c f0       	brlt	.+2      	; 0x14a2 <AutoCheck+0x96>
    14a0:	3e c4       	rjmp	.+2172   	; 0x1d1e <AutoCheck+0x912>
     return;				//difference to big, no selftest
  }
  if (abs((int)((adcmv[0]*2) - ADCconfig.U_AVCC)) > 60) {
    14a2:	00 0f       	add	r16, r16
    14a4:	11 1f       	adc	r17, r17
    14a6:	80 91 3f 01 	lds	r24, 0x013F
    14aa:	90 91 40 01 	lds	r25, 0x0140
    14ae:	08 1b       	sub	r16, r24
    14b0:	19 0b       	sbc	r17, r25
    14b2:	17 ff       	sbrs	r17, 7
    14b4:	03 c0       	rjmp	.+6      	; 0x14bc <AutoCheck+0xb0>
    14b6:	10 95       	com	r17
    14b8:	01 95       	neg	r16
    14ba:	1f 4f       	sbci	r17, 0xFF	; 255
    14bc:	0d 33       	cpi	r16, 0x3D	; 61
    14be:	11 05       	cpc	r17, r1
    14c0:	0c f0       	brlt	.+2      	; 0x14c4 <AutoCheck+0xb8>
    14c2:	2d c4       	rjmp	.+2138   	; 0x1d1e <AutoCheck+0x912>
     return;				//difference to big, no selftest
  }
  R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//Pin 3 over RL to - (Pin 1 over RL to +)
    14c4:	81 e1       	ldi	r24, 0x11	; 17
    14c6:	84 b9       	out	0x04, r24	; 4
  adcmv[0] = W5msReadADC(PC0);		// voltage at Pin 1
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
    14ce:	8c 01       	movw	r16, r24
    14d0:	9a 83       	std	Y+2, r25	; 0x02
    14d2:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = ReadADC(PC1);		// voltage at Pin 2
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
    14da:	7c 01       	movw	r14, r24
    14dc:	9c 83       	std	Y+4, r25	; 0x04
    14de:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = ReadADC(PC2);		// voltage at Pin 3
    14e0:	82 e0       	ldi	r24, 0x02	; 2
    14e2:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
    14e6:	9c 01       	movw	r18, r24
    14e8:	9e 83       	std	Y+6, r25	; 0x06
    14ea:	8d 83       	std	Y+5, r24	; 0x05
  if (abs((int)(adcmv[1] - adcmv[0])) > 20) {
    14ec:	e0 1a       	sub	r14, r16
    14ee:	f1 0a       	sbc	r15, r17
    14f0:	f7 fe       	sbrs	r15, 7
    14f2:	04 c0       	rjmp	.+8      	; 0x14fc <AutoCheck+0xf0>
    14f4:	f0 94       	com	r15
    14f6:	e1 94       	neg	r14
    14f8:	f1 08       	sbc	r15, r1
    14fa:	f3 94       	inc	r15
    14fc:	e5 e1       	ldi	r30, 0x15	; 21
    14fe:	ee 16       	cp	r14, r30
    1500:	f1 04       	cpc	r15, r1
    1502:	0c f0       	brlt	.+2      	; 0x1506 <AutoCheck+0xfa>
    1504:	0c c4       	rjmp	.+2072   	; 0x1d1e <AutoCheck+0x912>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[2] - adcmv[0])) > 20) {
    1506:	20 1b       	sub	r18, r16
    1508:	31 0b       	sbc	r19, r17
    150a:	37 ff       	sbrs	r19, 7
    150c:	03 c0       	rjmp	.+6      	; 0x1514 <AutoCheck+0x108>
    150e:	30 95       	com	r19
    1510:	21 95       	neg	r18
    1512:	3f 4f       	sbci	r19, 0xFF	; 255
    1514:	25 31       	cpi	r18, 0x15	; 21
    1516:	31 05       	cpc	r19, r1
    1518:	0c f0       	brlt	.+2      	; 0x151c <AutoCheck+0x110>
    151a:	01 c4       	rjmp	.+2050   	; 0x1d1e <AutoCheck+0x912>
     return;				//difference to big, no selftest
  }
  if (abs((int)((adcmv[0]*2) - ADCconfig.U_AVCC)) > 60) {
    151c:	00 0f       	add	r16, r16
    151e:	11 1f       	adc	r17, r17
    1520:	80 91 3f 01 	lds	r24, 0x013F
    1524:	90 91 40 01 	lds	r25, 0x0140
    1528:	08 1b       	sub	r16, r24
    152a:	19 0b       	sbc	r17, r25
    152c:	17 ff       	sbrs	r17, 7
    152e:	03 c0       	rjmp	.+6      	; 0x1536 <AutoCheck+0x12a>
    1530:	10 95       	com	r17
    1532:	01 95       	neg	r16
    1534:	1f 4f       	sbci	r17, 0xFF	; 255
    1536:	0d 33       	cpi	r16, 0x3D	; 61
    1538:	11 05       	cpc	r17, r1
    153a:	0c f0       	brlt	.+2      	; 0x153e <AutoCheck+0x132>
    153c:	f0 c3       	rjmp	.+2016   	; 0x1d1e <AutoCheck+0x912>
     return;				//difference to big, no selftest
  }
#ifdef WITH_SELFTEST
  lcd_clear();
    153e:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
  lcd_line1();
    1542:	80 e8       	ldi	r24, 0x80	; 128
    1544:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
    1548:	88 e3       	ldi	r24, 0x38	; 56
    154a:	91 e0       	ldi	r25, 0x01	; 1
    154c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
  wait1s();
    1550:	0e 94 ff 13 	call	0x27fe	; 0x27fe <wait1000ms>
    1554:	44 24       	eor	r4, r4
    1556:	55 24       	eor	r5, r5
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    1558:	11 e0       	ldi	r17, 0x01	; 1
           adcmv[2] = W20msReadADC(TP3);
           lcd_fix2_string(RH1L);	// "RH_Lo="
        }
                                        //############################################
        if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to VCC
    155a:	32 e0       	ldi	r19, 0x02	; 2
    155c:	a3 2e       	mov	r10, r19
           R_PORT = 2<<(TP1*2);
           adcmv[0] = W20msReadADC(TP1) - ADCconfig.U_AVCC;
           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to VCC
    155e:	28 e0       	ldi	r18, 0x08	; 8
    1560:	c2 2e       	mov	r12, r18
           R_PORT = 2<<(TP2*2);
           adcmv[1] = W20msReadADC(TP2) - ADCconfig.U_AVCC;
           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to VCC
    1562:	90 e2       	ldi	r25, 0x20	; 32
    1564:	b9 2e       	mov	r11, r25
           lcd_string(utoa(RHmultip, outval, 10));
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
    1566:	85 e0       	ldi	r24, 0x05	; 5
    1568:	f8 2e       	mov	r15, r24
           adcmv[0] = W20msReadADC(TP1);
           adcmv[0] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    156a:	0c e3       	ldi	r16, 0x3C	; 60
    156c:	60 2e       	mov	r6, r16
    156e:	09 ec       	ldi	r16, 0xC9	; 201
    1570:	70 2e       	mov	r7, r16
    1572:	0f ef       	ldi	r16, 0xFF	; 255
    1574:	80 2e       	mov	r8, r16
    1576:	0f ef       	ldi	r16, 0xFF	; 255
    1578:	90 2e       	mov	r9, r16
    157a:	5a c1       	rjmp	.+692    	; 0x1830 <AutoCheck+0x424>
  wait1s();
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
        lcd_line2();			//Cursor to column 1, row 2
    157c:	80 ec       	ldi	r24, 0xC0	; 192
    157e:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
        lcd_clear_line();		// clear total line
    1582:	0e 94 02 09 	call	0x1204	; 0x1204 <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    1586:	80 e8       	ldi	r24, 0x80	; 128
    1588:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
        lcd_clear_line();		// clear total line
    158c:	0e 94 02 09 	call	0x1204	; 0x1204 <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    1590:	80 e8       	ldi	r24, 0x80	; 128
    1592:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
        lcd_data('T');			//output the Testmode "T"
    1596:	84 e5       	ldi	r24, 0x54	; 84
    1598:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
        lcd_string(utoa(tt, outval, 10));	//output Test number
    159c:	c2 01       	movw	r24, r4
    159e:	6e e0       	ldi	r22, 0x0E	; 14
    15a0:	71 e0       	ldi	r23, 0x01	; 1
    15a2:	4a e0       	ldi	r20, 0x0A	; 10
    15a4:	50 e0       	ldi	r21, 0x00	; 0
    15a6:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <utoa>
    15aa:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_string>
        lcd_space();
    15ae:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>
                                        //############################################
        if (tt == 1) {   // output of reference voltage and factors for capacity measurement
    15b2:	fe 2d       	mov	r31, r14
    15b4:	f1 30       	cpi	r31, 0x01	; 1
    15b6:	81 f5       	brne	.+96     	; 0x1618 <AutoCheck+0x20c>
           ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    15b8:	2e eb       	ldi	r18, 0xBE	; 190
    15ba:	20 93 3b 01 	sts	0x013B, r18
 #ifdef WITH_AUTO_REF
           (void) ReadADC(0x0e);	// read reference voltage 
    15be:	8e e0       	ldi	r24, 0x0E	; 14
    15c0:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
           ref_mv = W5msReadADC(0x0e);	// read reference voltage 
    15c4:	8e e0       	ldi	r24, 0x0E	; 14
    15c6:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
    15ca:	90 93 42 01 	sts	0x0142, r25
    15ce:	80 93 41 01 	sts	0x0141, r24
           RefVoltage();		//compute RHmultip = f(reference voltage)
    15d2:	0e 94 b2 08 	call	0x1164	; 0x1164 <RefVoltage>
 #endif
           lcd_fix2_string(URefT);	//"URef="
    15d6:	84 ed       	ldi	r24, 0xD4	; 212
    15d8:	91 e0       	ldi	r25, 0x01	; 1
    15da:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
           DisplayValue(ref_mv,-3,'V',4);
    15de:	60 91 41 01 	lds	r22, 0x0141
    15e2:	70 91 42 01 	lds	r23, 0x0142
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	4d ef       	ldi	r20, 0xFD	; 253
    15ec:	26 e5       	ldi	r18, 0x56	; 86
    15ee:	04 e0       	ldi	r16, 0x04	; 4
    15f0:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
           lcd_line2();			//Cursor to column 1, row 2
    15f4:	80 ec       	ldi	r24, 0xC0	; 192
    15f6:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
           lcd_fix2_string(RHfakt);	//"RHf="
    15fa:	89 ed       	ldi	r24, 0xD9	; 217
    15fc:	91 e0       	ldi	r25, 0x01	; 1
    15fe:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
           lcd_string(utoa(RHmultip, outval, 10));
    1602:	80 91 00 01 	lds	r24, 0x0100
    1606:	90 91 01 01 	lds	r25, 0x0101
    160a:	6e e0       	ldi	r22, 0x0E	; 14
    160c:	71 e0       	ldi	r23, 0x01	; 1
    160e:	4a e0       	ldi	r20, 0x0A	; 10
    1610:	50 e0       	ldi	r21, 0x00	; 0
    1612:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <utoa>
    1616:	f5 c0       	rjmp	.+490    	; 0x1802 <AutoCheck+0x3f6>
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
    1618:	8e 2d       	mov	r24, r14
    161a:	82 30       	cpi	r24, 0x02	; 2
    161c:	09 f0       	breq	.+2      	; 0x1620 <AutoCheck+0x214>
    161e:	52 c0       	rjmp	.+164    	; 0x16c4 <AutoCheck+0x2b8>
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	85 b9       	out	0x05, r24	; 5
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
    1624:	f4 b8       	out	0x04, r15	; 4
           adcmv[0] = W20msReadADC(TP1);
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	0e 94 93 19 	call	0x3326	; 0x3326 <W20msReadADC>
    162c:	8c 01       	movw	r16, r24
           adcmv[0] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    162e:	60 91 3f 01 	lds	r22, 0x013F
    1632:	70 91 40 01 	lds	r23, 0x0140
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	28 e5       	ldi	r18, 0x58	; 88
    163c:	3b e1       	ldi	r19, 0x1B	; 27
    163e:	40 e0       	ldi	r20, 0x00	; 0
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    1646:	a4 01       	movw	r20, r8
    1648:	93 01       	movw	r18, r6
    164a:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__divmodsi4>
    164e:	02 0f       	add	r16, r18
    1650:	13 1f       	adc	r17, r19
    1652:	1a 83       	std	Y+2, r17	; 0x02
    1654:	09 83       	std	Y+1, r16	; 0x01
           R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//RL3 to -
    1656:	34 b8       	out	0x04, r3	; 4
           adcmv[1] = W20msReadADC(TP1);
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	0e 94 93 19 	call	0x3326	; 0x3326 <W20msReadADC>
    165e:	8c 01       	movw	r16, r24
           adcmv[1] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1660:	60 91 3f 01 	lds	r22, 0x013F
    1664:	70 91 40 01 	lds	r23, 0x0140
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	28 e5       	ldi	r18, 0x58	; 88
    166e:	3b e1       	ldi	r19, 0x1B	; 27
    1670:	40 e0       	ldi	r20, 0x00	; 0
    1672:	50 e0       	ldi	r21, 0x00	; 0
    1674:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    1678:	a4 01       	movw	r20, r8
    167a:	93 01       	movw	r18, r6
    167c:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__divmodsi4>
    1680:	02 0f       	add	r16, r18
    1682:	13 1f       	adc	r17, r19
    1684:	1c 83       	std	Y+4, r17	; 0x04
    1686:	0b 83       	std	Y+3, r16	; 0x03
           R_PORT = 1<<(TP2*2);		//RL2 to VCC
    1688:	25 b8       	out	0x05, r2	; 5
           R_DDR = (1<<(TP2*2)) | (1<<(TP3*2));	//RL3 to -
    168a:	e4 e1       	ldi	r30, 0x14	; 20
    168c:	e4 b9       	out	0x04, r30	; 4
           adcmv[2] = W20msReadADC(TP2);
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	0e 94 93 19 	call	0x3326	; 0x3326 <W20msReadADC>
    1694:	8c 01       	movw	r16, r24
           adcmv[2] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1696:	60 91 3f 01 	lds	r22, 0x013F
    169a:	70 91 40 01 	lds	r23, 0x0140
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	28 e5       	ldi	r18, 0x58	; 88
    16a4:	3b e1       	ldi	r19, 0x1B	; 27
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	50 e0       	ldi	r21, 0x00	; 0
    16aa:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    16ae:	a4 01       	movw	r20, r8
    16b0:	93 01       	movw	r18, r6
    16b2:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__divmodsi4>
    16b6:	02 0f       	add	r16, r18
    16b8:	13 1f       	adc	r17, r19
    16ba:	1e 83       	std	Y+6, r17	; 0x06
    16bc:	0d 83       	std	Y+5, r16	; 0x05
           lcd_fix2_string(RLRL);	// "RLRL"
    16be:	86 ee       	ldi	r24, 0xE6	; 230
    16c0:	91 e0       	ldi	r25, 0x01	; 1
    16c2:	49 c0       	rjmp	.+146    	; 0x1756 <AutoCheck+0x34a>
        }
                                        //############################################
        if (tt == 3) { // how equal are the RH resistors
    16c4:	fe 2d       	mov	r31, r14
    16c6:	f3 30       	cpi	r31, 0x03	; 3
    16c8:	41 f5       	brne	.+80     	; 0x171a <AutoCheck+0x30e>
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    16ca:	a5 b8       	out	0x05, r10	; 5
           R_DDR = (2<<(TP1*2)) | (2<<(TP2*2));	//RH2 to -
    16cc:	2a e0       	ldi	r18, 0x0A	; 10
    16ce:	24 b9       	out	0x04, r18	; 4
           adcmv[0] = W20msReadADC(TP1);
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	0e 94 93 19 	call	0x3326	; 0x3326 <W20msReadADC>
           adcmv[3] = ADCconfig.U_AVCC / 2;
    16d6:	00 91 3f 01 	lds	r16, 0x013F
    16da:	10 91 40 01 	lds	r17, 0x0140
    16de:	16 95       	lsr	r17
    16e0:	07 95       	ror	r16
    16e2:	18 87       	std	Y+8, r17	; 0x08
    16e4:	0f 83       	std	Y+7, r16	; 0x07
           adcmv[0] -= adcmv[3];
    16e6:	80 1b       	sub	r24, r16
    16e8:	91 0b       	sbc	r25, r17
    16ea:	9a 83       	std	Y+2, r25	; 0x02
    16ec:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (2<<(TP1*2)) | (2<<(TP3*2));	//RH3 to -
    16ee:	82 e2       	ldi	r24, 0x22	; 34
    16f0:	84 b9       	out	0x04, r24	; 4
           adcmv[1] = W20msReadADC(TP1);
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	0e 94 93 19 	call	0x3326	; 0x3326 <W20msReadADC>
           adcmv[1] -= adcmv[3];
    16f8:	80 1b       	sub	r24, r16
    16fa:	91 0b       	sbc	r25, r17
    16fc:	9c 83       	std	Y+4, r25	; 0x04
    16fe:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 2<<(TP2*2);		//RL2 to VCC
    1700:	c5 b8       	out	0x05, r12	; 5
           R_DDR = (2<<(TP2*2)) | (2<<(TP3*2));	//RH3 to -
    1702:	e8 e2       	ldi	r30, 0x28	; 40
    1704:	e4 b9       	out	0x04, r30	; 4
           adcmv[2] = W20msReadADC(TP2);
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	0e 94 93 19 	call	0x3326	; 0x3326 <W20msReadADC>
           adcmv[2] -= adcmv[3];
    170c:	80 1b       	sub	r24, r16
    170e:	91 0b       	sbc	r25, r17
    1710:	9e 83       	std	Y+6, r25	; 0x06
    1712:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RHRH);	// "RHRH"
    1714:	84 ef       	ldi	r24, 0xF4	; 244
    1716:	91 e0       	ldi	r25, 0x01	; 1
    1718:	1e c0       	rjmp	.+60     	; 0x1756 <AutoCheck+0x34a>
        }
                                        //############################################
        if (tt == 4) { // Text release probes
    171a:	fe 2d       	mov	r31, r14
    171c:	f4 30       	cpi	r31, 0x04	; 4
    171e:	19 f4       	brne	.+6      	; 0x1726 <AutoCheck+0x31a>
           lcd_fix2_string(RELPROBE);	// "Release Probes"
    1720:	88 e4       	ldi	r24, 0x48	; 72
    1722:	91 e0       	ldi	r25, 0x01	; 1
    1724:	18 c0       	rjmp	.+48     	; 0x1756 <AutoCheck+0x34a>
        }
                                        //############################################
        if (tt == 5) { // can we switch the ADC pins to GND across R_H resistor?
    1726:	2e 2d       	mov	r18, r14
    1728:	25 30       	cpi	r18, 0x05	; 5
    172a:	c1 f4       	brne	.+48     	; 0x175c <AutoCheck+0x350>
           R_PORT = 0;
    172c:	15 b8       	out	0x05, r1	; 5
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to GND
    172e:	a4 b8       	out	0x04, r10	; 4
           adcmv[0] = W20msReadADC(TP1);
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	0e 94 93 19 	call	0x3326	; 0x3326 <W20msReadADC>
    1736:	9a 83       	std	Y+2, r25	; 0x02
    1738:	89 83       	std	Y+1, r24	; 0x01

           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to GND
    173a:	c4 b8       	out	0x04, r12	; 4
           adcmv[1] = W20msReadADC(TP2);
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	0e 94 93 19 	call	0x3326	; 0x3326 <W20msReadADC>
    1742:	9c 83       	std	Y+4, r25	; 0x04
    1744:	8b 83       	std	Y+3, r24	; 0x03

           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1746:	b4 b8       	out	0x04, r11	; 4
           adcmv[2] = W20msReadADC(TP3);
    1748:	82 e0       	ldi	r24, 0x02	; 2
    174a:	0e 94 93 19 	call	0x3326	; 0x3326 <W20msReadADC>
    174e:	9e 83       	std	Y+6, r25	; 0x06
    1750:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RH1L);	// "RH_Lo="
    1752:	8e ed       	ldi	r24, 0xDE	; 222
    1754:	91 e0       	ldi	r25, 0x01	; 1
    1756:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
    175a:	30 c0       	rjmp	.+96     	; 0x17bc <AutoCheck+0x3b0>
        }
                                        //############################################
        if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
    175c:	8e 2d       	mov	r24, r14
    175e:	86 30       	cpi	r24, 0x06	; 6
    1760:	51 f5       	brne	.+84     	; 0x17b6 <AutoCheck+0x3aa>
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to VCC
    1762:	a4 b8       	out	0x04, r10	; 4
           R_PORT = 2<<(TP1*2);
    1764:	a5 b8       	out	0x05, r10	; 5
           adcmv[0] = W20msReadADC(TP1) - ADCconfig.U_AVCC;
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	0e 94 93 19 	call	0x3326	; 0x3326 <W20msReadADC>
    176c:	20 91 3f 01 	lds	r18, 0x013F
    1770:	30 91 40 01 	lds	r19, 0x0140
    1774:	82 1b       	sub	r24, r18
    1776:	93 0b       	sbc	r25, r19
    1778:	9a 83       	std	Y+2, r25	; 0x02
    177a:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to VCC
    177c:	c4 b8       	out	0x04, r12	; 4
           R_PORT = 2<<(TP2*2);
    177e:	c5 b8       	out	0x05, r12	; 5
           adcmv[1] = W20msReadADC(TP2) - ADCconfig.U_AVCC;
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	0e 94 93 19 	call	0x3326	; 0x3326 <W20msReadADC>
    1786:	20 91 3f 01 	lds	r18, 0x013F
    178a:	30 91 40 01 	lds	r19, 0x0140
    178e:	82 1b       	sub	r24, r18
    1790:	93 0b       	sbc	r25, r19
    1792:	9c 83       	std	Y+4, r25	; 0x04
    1794:	8b 83       	std	Y+3, r24	; 0x03
           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to VCC
    1796:	b4 b8       	out	0x04, r11	; 4
           R_PORT = 2<<(TP3*2);
    1798:	b5 b8       	out	0x05, r11	; 5
           adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
    179a:	82 e0       	ldi	r24, 0x02	; 2
    179c:	0e 94 93 19 	call	0x3326	; 0x3326 <W20msReadADC>
    17a0:	20 91 3f 01 	lds	r18, 0x013F
    17a4:	30 91 40 01 	lds	r19, 0x0140
    17a8:	82 1b       	sub	r24, r18
    17aa:	93 0b       	sbc	r25, r19
    17ac:	9e 83       	std	Y+6, r25	; 0x06
    17ae:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RH1H);	// "RH_Hi="
    17b0:	82 ee       	ldi	r24, 0xE2	; 226
    17b2:	91 e0       	ldi	r25, 0x01	; 1
    17b4:	d0 cf       	rjmp	.-96     	; 0x1756 <AutoCheck+0x34a>
        }
                                        //############################################
        if (tt > 1) {	// output 3 voltages 
    17b6:	ee 2d       	mov	r30, r14
    17b8:	e1 30       	cpi	r30, 0x01	; 1
    17ba:	29 f1       	breq	.+74     	; 0x1806 <AutoCheck+0x3fa>
           lcd_line2();			//Cursor to column 1, row 2
    17bc:	80 ec       	ldi	r24, 0xC0	; 192
    17be:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
           lcd_string(itoa(adcmv[0], outval, 10));	//output voltage 1
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	9a 81       	ldd	r25, Y+2	; 0x02
    17c6:	6e e0       	ldi	r22, 0x0E	; 14
    17c8:	71 e0       	ldi	r23, 0x01	; 1
    17ca:	4a e0       	ldi	r20, 0x0A	; 10
    17cc:	50 e0       	ldi	r21, 0x00	; 0
    17ce:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <itoa>
    17d2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_string>
           lcd_space();
    17d6:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>
           lcd_string(itoa(adcmv[1], outval, 10));	//output voltage 2
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	9c 81       	ldd	r25, Y+4	; 0x04
    17de:	6e e0       	ldi	r22, 0x0E	; 14
    17e0:	71 e0       	ldi	r23, 0x01	; 1
    17e2:	4a e0       	ldi	r20, 0x0A	; 10
    17e4:	50 e0       	ldi	r21, 0x00	; 0
    17e6:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <itoa>
    17ea:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_string>
           lcd_space();
    17ee:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>
           lcd_string(itoa(adcmv[2], outval, 10));	//output voltage 3
    17f2:	8d 81       	ldd	r24, Y+5	; 0x05
    17f4:	9e 81       	ldd	r25, Y+6	; 0x06
    17f6:	6e e0       	ldi	r22, 0x0E	; 14
    17f8:	71 e0       	ldi	r23, 0x01	; 1
    17fa:	4a e0       	ldi	r20, 0x0A	; 10
    17fc:	50 e0       	ldi	r21, 0x00	; 0
    17fe:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <itoa>
    1802:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_string>
        }
        ADC_DDR =  TXD_MSK;		// all-Pins to Input
    1806:	c7 b8       	out	0x07, r12	; 7
        ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
    1808:	c8 b8       	out	0x08, r12	; 8
        R_DDR = 0;			// all R-Ports to Input
    180a:	14 b8       	out	0x04, r1	; 4
        R_PORT = 0;
    180c:	15 b8       	out	0x05, r1	; 5
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    180e:	4f 9b       	sbis	0x09, 7	; 9
    1810:	09 c0       	rjmp	.+18     	; 0x1824 <AutoCheck+0x418>
	   // if key is pressed, don't repeat
           break;
        }
        wait500ms();
    1812:	0e 94 00 14 	call	0x2800	; 0x2800 <wait500ms>
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    1816:	4f 9b       	sbis	0x09, 7	; 9
    1818:	05 c0       	rjmp	.+10     	; 0x1824 <AutoCheck+0x418>
	   // if key is pressed, don't repeat
           break;
        }
        wait500ms();
    181a:	0e 94 00 14 	call	0x2800	; 0x2800 <wait500ms>
    181e:	da 94       	dec	r13
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
  wait1s();
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
    1820:	09 f0       	breq	.+2      	; 0x1824 <AutoCheck+0x418>
    1822:	ac ce       	rjmp	.-680    	; 0x157c <AutoCheck+0x170>
    1824:	1e 2d       	mov	r17, r14
	   // if key is pressed, don't repeat
           break;
        }
        wait500ms();
     } //end for ww
     wait1s();
    1826:	0e 94 ff 13 	call	0x27fe	; 0x27fe <wait1000ms>
  lcd_line1();
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
  wait1s();
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    182a:	1f 5f       	subi	r17, 0xFF	; 255
    182c:	17 30       	cpi	r17, 0x07	; 7
    182e:	59 f0       	breq	.+22     	; 0x1846 <AutoCheck+0x43a>
void AutoCheck(void) {
    1830:	a4 e0       	ldi	r26, 0x04	; 4
    1832:	da 2e       	mov	r13, r26
        lcd_line2();			//Cursor to column 1, row 2
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_data('T');			//output the Testmode "T"
    1834:	08 94       	sec
    1836:	41 1c       	adc	r4, r1
    1838:	51 1c       	adc	r5, r1
        if (tt == 2) { // how equal are the RL resistors? 
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
           adcmv[0] = W20msReadADC(TP1);
           adcmv[0] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
           R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//RL3 to -
    183a:	f1 e1       	ldi	r31, 0x11	; 17
    183c:	3f 2e       	mov	r3, r31
           adcmv[1] = W20msReadADC(TP1);
           adcmv[1] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
           R_PORT = 1<<(TP2*2);		//RL2 to VCC
    183e:	e4 e0       	ldi	r30, 0x04	; 4
    1840:	2e 2e       	mov	r2, r30
    1842:	e1 2e       	mov	r14, r17
    1844:	9b ce       	rjmp	.-714    	; 0x157c <AutoCheck+0x170>
     wait1s();
  } //end for tt
#endif

  // measurement of internal resistance of the ADC port outputs switched to GND
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    1846:	79 e0       	ldi	r23, 0x09	; 9
    1848:	c7 2e       	mov	r12, r23
    184a:	c7 b8       	out	0x07, r12	; 7
  R_PORT = 1<<(TP1*2);		//R_L-PORT 1 to VCC
    184c:	dd 24       	eor	r13, r13
    184e:	d3 94       	inc	r13
    1850:	d5 b8       	out	0x05, r13	; 5
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to VCC
    1852:	d4 b8       	out	0x04, r13	; 4
  adcmv[0] = W5msReadADC(TP1);
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
    185a:	7c 01       	movw	r14, r24

  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin 2 to output 0V
    185c:	6a e0       	ldi	r22, 0x0A	; 10
    185e:	66 2e       	mov	r6, r22
    1860:	67 b8       	out	0x07, r6	; 7
  R_PORT =  1<<(TP2*2);	//R_L-PORT 2 to VCC
    1862:	54 e0       	ldi	r21, 0x04	; 4
    1864:	85 2e       	mov	r8, r21
    1866:	85 b8       	out	0x05, r8	; 5
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to VCC
    1868:	84 b8       	out	0x04, r8	; 4
  adcmv[1] = W5msReadADC(TP2);
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
    1870:	8c 01       	movw	r16, r24

  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin 3 to output 0V
    1872:	4c e0       	ldi	r20, 0x0C	; 12
    1874:	a4 2e       	mov	r10, r20
    1876:	a7 b8       	out	0x07, r10	; 7
  R_PORT =  1<<(TP3*2);	//R_L-PORT 3 to VCC
    1878:	30 e1       	ldi	r19, 0x10	; 16
    187a:	b3 2e       	mov	r11, r19
    187c:	b5 b8       	out	0x05, r11	; 5
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to VCC
    187e:	b4 b8       	out	0x04, r11	; 4
  adcmv[2] = W5msReadADC(TP3);
    1880:	82 e0       	ldi	r24, 0x02	; 2
    1882:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
  sum_rm = (adcmv[0] + adcmv[1] + adcmv[2]); //add all three values
    1886:	0e 0d       	add	r16, r14
    1888:	1f 1d       	adc	r17, r15
    188a:	08 0f       	add	r16, r24
    188c:	19 1f       	adc	r17, r25

  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
    188e:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
    1890:	c8 b8       	out	0x08, r12	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    1892:	c7 b8       	out	0x07, r12	; 7
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
    1894:	d4 b8       	out	0x04, r13	; 4
  adcmv[0] = ADCconfig.U_AVCC - W5msReadADC(TP1);
    1896:	c0 90 3f 01 	lds	r12, 0x013F
    189a:	d0 90 40 01 	lds	r13, 0x0140
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
    18a4:	c8 1a       	sub	r12, r24
    18a6:	d9 0a       	sbc	r13, r25
    18a8:	da 82       	std	Y+2, r13	; 0x02
    18aa:	c9 82       	std	Y+1, r12	; 0x01
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
    18ac:	68 b8       	out	0x08, r6	; 8
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
    18ae:	67 b8       	out	0x07, r6	; 7
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
    18b0:	84 b8       	out	0x04, r8	; 4
  adcmv[1] = ADCconfig.U_AVCC - W5msReadADC(TP2);
    18b2:	e0 90 3f 01 	lds	r14, 0x013F
    18b6:	f0 90 40 01 	lds	r15, 0x0140
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
    18c0:	e8 1a       	sub	r14, r24
    18c2:	f9 0a       	sbc	r15, r25
    18c4:	fc 82       	std	Y+4, r15	; 0x04
    18c6:	eb 82       	std	Y+3, r14	; 0x03

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
    18c8:	a8 b8       	out	0x08, r10	; 8
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
    18ca:	a7 b8       	out	0x07, r10	; 7
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
    18cc:	b4 b8       	out	0x04, r11	; 4
  adcmv[2] = ADCconfig.U_AVCC - W5msReadADC(TP3);
    18ce:	a0 90 3f 01 	lds	r10, 0x013F
    18d2:	b0 90 40 01 	lds	r11, 0x0140
    18d6:	82 e0       	ldi	r24, 0x02	; 2
    18d8:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>

  sum_c0 = (adcmv[0] + adcmv[1] + adcmv[2]);
    18dc:	ec 0c       	add	r14, r12
    18de:	fd 1c       	adc	r15, r13
  adcmv[1] = ADCconfig.U_AVCC - W5msReadADC(TP2);

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
  adcmv[2] = ADCconfig.U_AVCC - W5msReadADC(TP3);
    18e0:	a8 1a       	sub	r10, r24
    18e2:	b9 0a       	sbc	r11, r25

  sum_c0 = (adcmv[0] + adcmv[1] + adcmv[2]);
    18e4:	ea 0c       	add	r14, r10
    18e6:	fb 1c       	adc	r15, r11
  u680 = ((ADCconfig.U_AVCC * 3) - sum_rm - sum_c0);	//three times the voltage at the 680 Ohm
    18e8:	80 91 3f 01 	lds	r24, 0x013F
    18ec:	90 91 40 01 	lds	r25, 0x0140
    18f0:	5c 01       	movw	r10, r24
    18f2:	aa 0c       	add	r10, r10
    18f4:	bb 1c       	adc	r11, r11
    18f6:	a8 0e       	add	r10, r24
    18f8:	b9 1e       	adc	r11, r25
    18fa:	a0 1a       	sub	r10, r16
    18fc:	b1 0a       	sbc	r11, r17
    18fe:	ae 18       	sub	r10, r14
    1900:	bf 08       	sbc	r11, r15
  pin_rm = (unsigned long)((unsigned long)sum_rm * (unsigned long)R_L_VAL) / (unsigned long)u680;
    1902:	cc 24       	eor	r12, r12
    1904:	dd 24       	eor	r13, r13
    1906:	b8 01       	movw	r22, r16
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	20 e9       	ldi	r18, 0x90	; 144
    190e:	3a e1       	ldi	r19, 0x1A	; 26
    1910:	40 e0       	ldi	r20, 0x00	; 0
    1912:	50 e0       	ldi	r21, 0x00	; 0
    1914:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    1918:	a6 01       	movw	r20, r12
    191a:	95 01       	movw	r18, r10
    191c:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
    1920:	49 01       	movw	r8, r18
  adcmv[2] = pin_rm;	// for last output in row 2
    1922:	3e 83       	std	Y+6, r19	; 0x06
    1924:	2d 83       	std	Y+5, r18	; 0x05
  pin_rp = (unsigned long)((unsigned long)sum_c0 * (unsigned long)R_L_VAL) / (unsigned long)u680;
    1926:	b7 01       	movw	r22, r14
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	20 e9       	ldi	r18, 0x90	; 144
    192e:	3a e1       	ldi	r19, 0x1A	; 26
    1930:	40 e0       	ldi	r20, 0x00	; 0
    1932:	50 e0       	ldi	r21, 0x00	; 0
    1934:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    1938:	a6 01       	movw	r20, r12
    193a:	95 01       	movw	r18, r10
    193c:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
    1940:	79 01       	movw	r14, r18
  lcd_clear();
    1942:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
  lcd_fix_string(RIHI);	// "RiHi="
    1946:	82 e0       	ldi	r24, 0x02	; 2
    1948:	92 e0       	ldi	r25, 0x02	; 2
    194a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
  DisplayValue(pin_rp,-1,LCD_CHAR_OMEGA,3);
    194e:	b7 01       	movw	r22, r14
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	4f ef       	ldi	r20, 0xFF	; 255
    1956:	24 ef       	ldi	r18, 0xF4	; 244
    1958:	03 e0       	ldi	r16, 0x03	; 3
    195a:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
  lcd_line2();
    195e:	80 ec       	ldi	r24, 0xC0	; 192
    1960:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_string(RILO);	// "RiLo="
    1964:	89 e0       	ldi	r24, 0x09	; 9
    1966:	92 e0       	ldi	r25, 0x02	; 2
    1968:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
  DisplayValue(pin_rm,-1,LCD_CHAR_OMEGA,3);
    196c:	b4 01       	movw	r22, r8
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	4f ef       	ldi	r20, 0xFF	; 255
    1974:	24 ef       	ldi	r18, 0xF4	; 244
    1976:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
  wait2s();			//wait 2 seconds
    197a:	0e 94 fe 13 	call	0x27fc	; 0x27fc <wait2s>
#ifdef AUTO_CAL
  if ((pin_rp < 280) && (pin_rm < 250)) {
    197e:	f8 e1       	ldi	r31, 0x18	; 24
    1980:	ef 16       	cp	r14, r31
    1982:	f1 e0       	ldi	r31, 0x01	; 1
    1984:	ff 06       	cpc	r15, r31
    1986:	90 f4       	brcc	.+36     	; 0x19ac <AutoCheck+0x5a0>
    1988:	2a ef       	ldi	r18, 0xFA	; 250
    198a:	82 16       	cp	r8, r18
    198c:	91 04       	cpc	r9, r1
    198e:	70 f4       	brcc	.+28     	; 0x19ac <AutoCheck+0x5a0>
     // rp is below 28 Ohm and rm is below 25 Ohm
     (void) eeprom_write_word((uint16_t *)(&R680pl), pin_rp+R_L_VAL);  //hold VCC resistance value in EEprom
    1990:	b7 01       	movw	r22, r14
    1992:	60 57       	subi	r22, 0x70	; 112
    1994:	75 4e       	sbci	r23, 0xE5	; 229
    1996:	8a e5       	ldi	r24, 0x5A	; 90
    1998:	92 e0       	ldi	r25, 0x02	; 2
    199a:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <__eewr_word_m328p>
     (void) eeprom_write_word((uint16_t *)(&R680mi), pin_rm+R_L_VAL);  //hold GND resistance value in EEprom
    199e:	b4 01       	movw	r22, r8
    19a0:	60 57       	subi	r22, 0x70	; 112
    19a2:	75 4e       	sbci	r23, 0xE5	; 229
    19a4:	8c e5       	ldi	r24, 0x5C	; 92
    19a6:	92 e0       	ldi	r25, 0x02	; 2
    19a8:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <__eewr_word_m328p>
  }
#endif

#ifdef C_MESS
  //measure Zero offset for Capacity measurement
  adcmv[3] = 0;
    19ac:	18 86       	std	Y+8, r1	; 0x08
    19ae:	1f 82       	std	Y+7, r1	; 0x07
  PartFound = PART_NONE;
    19b0:	10 92 09 01 	sts	0x0109, r1
  ReadCapacity(TP3, TP1);
    19b4:	82 e0       	ldi	r24, 0x02	; 2
    19b6:	60 e0       	ldi	r22, 0x00	; 0
    19b8:	0e 94 b4 14 	call	0x2968	; 0x2968 <ReadCapacity>
  adcmv[5] = (unsigned int) cap.cval_uncorrected;	//save capacity value of empty Pin 1:3
    19bc:	e0 90 5e 01 	lds	r14, 0x015E
    19c0:	f0 90 5f 01 	lds	r15, 0x015F
    19c4:	fc 86       	std	Y+12, r15	; 0x0c
    19c6:	eb 86       	std	Y+11, r14	; 0x0b
  ReadCapacity(TP3, TP2);
    19c8:	82 e0       	ldi	r24, 0x02	; 2
    19ca:	61 e0       	ldi	r22, 0x01	; 1
    19cc:	0e 94 b4 14 	call	0x2968	; 0x2968 <ReadCapacity>
  adcmv[6] = (unsigned int) cap.cval_uncorrected;	//save capacity value of empty Pin 2:3
    19d0:	00 91 5e 01 	lds	r16, 0x015E
    19d4:	10 91 5f 01 	lds	r17, 0x015F
    19d8:	1e 87       	std	Y+14, r17	; 0x0e
    19da:	0d 87       	std	Y+13, r16	; 0x0d
  ReadCapacity(TP2, TP1);
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	60 e0       	ldi	r22, 0x00	; 0
    19e0:	0e 94 b4 14 	call	0x2968	; 0x2968 <ReadCapacity>
  adcmv[2] = (unsigned int) cap.cval_uncorrected;	//save capacity value of empty Pin 1:2
    19e4:	c0 90 5e 01 	lds	r12, 0x015E
    19e8:	d0 90 5f 01 	lds	r13, 0x015F
    19ec:	de 82       	std	Y+6, r13	; 0x06
    19ee:	cd 82       	std	Y+5, r12	; 0x05
  ReadCapacity(TP1, TP3);
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	62 e0       	ldi	r22, 0x02	; 2
    19f4:	0e 94 b4 14 	call	0x2968	; 0x2968 <ReadCapacity>
  adcmv[1] = (unsigned int) cap.cval_uncorrected;	//save capacity value of empty Pin 3:1
    19f8:	80 91 5e 01 	lds	r24, 0x015E
    19fc:	90 91 5f 01 	lds	r25, 0x015F
    1a00:	9c 83       	std	Y+4, r25	; 0x04
    1a02:	8b 83       	std	Y+3, r24	; 0x03
  ReadCapacity(TP2, TP3);
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	62 e0       	ldi	r22, 0x02	; 2
    1a08:	0e 94 b4 14 	call	0x2968	; 0x2968 <ReadCapacity>
  adcmv[4] = (unsigned int) cap.cval_uncorrected;	//save capacity value of empty Pin 3:2
    1a0c:	80 91 5e 01 	lds	r24, 0x015E
    1a10:	90 91 5f 01 	lds	r25, 0x015F
    1a14:	9a 87       	std	Y+10, r25	; 0x0a
    1a16:	89 87       	std	Y+9, r24	; 0x09
  ReadCapacity(TP1, TP2);
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	61 e0       	ldi	r22, 0x01	; 1
    1a1c:	0e 94 b4 14 	call	0x2968	; 0x2968 <ReadCapacity>
  adcmv[0] = (unsigned int) cap.cval_uncorrected;	//save capacity value of empty Pin 2:1
    1a20:	80 91 5e 01 	lds	r24, 0x015E
    1a24:	90 91 5f 01 	lds	r25, 0x015F
    1a28:	9a 83       	std	Y+2, r25	; 0x02
    1a2a:	89 83       	std	Y+1, r24	; 0x01
  lcd_clear();
    1a2c:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
  lcd_data('C');
    1a30:	83 e4       	ldi	r24, 0x43	; 67
    1a32:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
  lcd_data('0');
    1a36:	80 e3       	ldi	r24, 0x30	; 48
    1a38:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
  lcd_space();
    1a3c:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>
  lcd_string(itoa(adcmv[5], outval, 10));	//output cap0 1:3
    1a40:	c7 01       	movw	r24, r14
    1a42:	6e e0       	ldi	r22, 0x0E	; 14
    1a44:	71 e0       	ldi	r23, 0x01	; 1
    1a46:	4a e0       	ldi	r20, 0x0A	; 10
    1a48:	50 e0       	ldi	r21, 0x00	; 0
    1a4a:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <itoa>
    1a4e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_string>
  lcd_space();
    1a52:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>
  lcd_string(itoa(adcmv[6], outval, 10));	//output cap0 2:3
    1a56:	c8 01       	movw	r24, r16
    1a58:	6e e0       	ldi	r22, 0x0E	; 14
    1a5a:	71 e0       	ldi	r23, 0x01	; 1
    1a5c:	4a e0       	ldi	r20, 0x0A	; 10
    1a5e:	50 e0       	ldi	r21, 0x00	; 0
    1a60:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <itoa>
    1a64:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_string>
  lcd_space();
    1a68:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
    1a6c:	b6 01       	movw	r22, r12
    1a6e:	88 27       	eor	r24, r24
    1a70:	77 fd       	sbrc	r23, 7
    1a72:	80 95       	com	r24
    1a74:	98 2f       	mov	r25, r24
    1a76:	44 ef       	ldi	r20, 0xF4	; 244
    1a78:	26 e4       	ldi	r18, 0x46	; 70
    1a7a:	03 e0       	ldi	r16, 0x03	; 3
    1a7c:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
    1a80:	8e 01       	movw	r16, r28
    1a82:	0f 5f       	subi	r16, 0xFF	; 255
    1a84:	1f 4f       	sbci	r17, 0xFF	; 255
void AutoCheck(void) {
    1a86:	ce 01       	movw	r24, r28
    1a88:	0f 96       	adiw	r24, 0x0f	; 15
    1a8a:	f8 01       	movw	r30, r16
  lcd_string(itoa(adcmv[6], outval, 10));	//output cap0 2:3
  lcd_space();
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
    1a8c:	21 91       	ld	r18, Z+
    1a8e:	31 91       	ld	r19, Z+
    1a90:	27 34       	cpi	r18, 0x47	; 71
    1a92:	31 05       	cpc	r19, r1
    1a94:	b4 f4       	brge	.+44     	; 0x1ac2 <AutoCheck+0x6b6>
  lcd_space();
  lcd_string(itoa(adcmv[6], outval, 10));	//output cap0 2:3
  lcd_space();
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
    1a96:	e8 17       	cp	r30, r24
    1a98:	f9 07       	cpc	r31, r25
    1a9a:	c1 f7       	brne	.-16     	; 0x1a8c <AutoCheck+0x680>
    1a9c:	ee 24       	eor	r14, r14
    1a9e:	ff 24       	eor	r15, r15
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
    1aa0:	f8 01       	movw	r30, r16
    1aa2:	60 81       	ld	r22, Z
    1aa4:	0e 5f       	subi	r16, 0xFE	; 254
    1aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa8:	6e 5e       	subi	r22, 0xEE	; 238
    1aaa:	c7 01       	movw	r24, r14
    1aac:	88 59       	subi	r24, 0x98	; 152
    1aae:	9d 4f       	sbci	r25, 0xFD	; 253
    1ab0:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <__eewr_byte_m328p>
    1ab4:	08 94       	sec
    1ab6:	e1 1c       	adc	r14, r1
    1ab8:	f1 1c       	adc	r15, r1
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
    1aba:	f7 e0       	ldi	r31, 0x07	; 7
    1abc:	ef 16       	cp	r14, r31
    1abe:	f1 04       	cpc	r15, r1
    1ac0:	79 f7       	brne	.-34     	; 0x1aa0 <AutoCheck+0x694>
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
  }
no_c0save:
 #endif
 wait2s();		//wait 2 seconds
    1ac2:	0e 94 fe 13 	call	0x27fc	; 0x27fc <wait2s>
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
    1ac6:	10 e0       	ldi	r17, 0x00	; 0
 for (ww=0;ww<64;ww++) {
    1ac8:	cc 24       	eor	r12, r12
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
    1aca:	ba e0       	ldi	r27, 0x0A	; 10
    1acc:	8b 2e       	mov	r8, r27
    1ace:	91 2c       	mov	r9, r1
    1ad0:	a1 2c       	mov	r10, r1
    1ad2:	b1 2c       	mov	r11, r1
     lcd_data('3');
     lcd_fix_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1ad4:	aa e5       	ldi	r26, 0x5A	; 90
    1ad6:	ea 2e       	mov	r14, r26
    1ad8:	a1 e0       	ldi	r26, 0x01	; 1
    1ada:	fa 2e       	mov	r15, r26
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
     lcd_clear();
    1adc:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
     lcd_data('1');
    1ae0:	81 e3       	ldi	r24, 0x31	; 49
    1ae2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
     lcd_fix_string(CapZeich);	// "-||-"
    1ae6:	81 ea       	ldi	r24, 0xA1	; 161
    1ae8:	91 e0       	ldi	r25, 0x01	; 1
    1aea:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
     lcd_data('3');
    1aee:	83 e3       	ldi	r24, 0x33	; 51
    1af0:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
     lcd_fix_string(MinCap_str); // " >100nF!"
    1af4:	86 e1       	ldi	r24, 0x16	; 22
    1af6:	92 e0       	ldi	r25, 0x02	; 2
    1af8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
     PartFound = PART_NONE;
    1afc:	10 92 09 01 	sts	0x0109, r1
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
    1b00:	82 e0       	ldi	r24, 0x02	; 2
    1b02:	60 e0       	ldi	r22, 0x00	; 0
    1b04:	0e 94 b4 14 	call	0x2968	; 0x2968 <ReadCapacity>
    1b08:	20 91 5a 01 	lds	r18, 0x015A
    1b0c:	30 91 5b 01 	lds	r19, 0x015B
    1b10:	40 91 5c 01 	lds	r20, 0x015C
    1b14:	50 91 5d 01 	lds	r21, 0x015D
    1b18:	00 91 66 01 	lds	r16, 0x0166
     while (cap.cpre < -9) {
    1b1c:	07 c0       	rjmp	.+14     	; 0x1b2c <AutoCheck+0x720>
        cap.cpre++;
        cap.cval /= 10;
    1b1e:	ca 01       	movw	r24, r20
    1b20:	b9 01       	movw	r22, r18
    1b22:	a5 01       	movw	r20, r10
    1b24:	94 01       	movw	r18, r8
    1b26:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
    1b2a:	0f 5f       	subi	r16, 0xFF	; 255
     lcd_data('3');
     lcd_fix_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1b2c:	07 3f       	cpi	r16, 0xF7	; 247
    1b2e:	bc f3       	brlt	.-18     	; 0x1b1e <AutoCheck+0x712>
    1b30:	00 93 66 01 	sts	0x0166, r16
    1b34:	20 93 5a 01 	sts	0x015A, r18
    1b38:	f7 01       	movw	r30, r14
    1b3a:	31 83       	std	Z+1, r19	; 0x01
    1b3c:	42 83       	std	Z+2, r20	; 0x02
    1b3e:	53 83       	std	Z+3, r21	; 0x03
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1b40:	07 3f       	cpi	r16, 0xF7	; 247
    1b42:	09 f0       	breq	.+2      	; 0x1b46 <AutoCheck+0x73a>
    1b44:	bc c0       	rjmp	.+376    	; 0x1cbe <AutoCheck+0x8b2>
    1b46:	20 36       	cpi	r18, 0x60	; 96
    1b48:	31 05       	cpc	r19, r1
    1b4a:	41 05       	cpc	r20, r1
    1b4c:	51 05       	cpc	r21, r1
    1b4e:	08 f4       	brcc	.+2      	; 0x1b52 <AutoCheck+0x746>
    1b50:	b6 c0       	rjmp	.+364    	; 0x1cbe <AutoCheck+0x8b2>
    1b52:	20 3f       	cpi	r18, 0xF0	; 240
    1b54:	f5 e5       	ldi	r31, 0x55	; 85
    1b56:	3f 07       	cpc	r19, r31
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	4f 07       	cpc	r20, r31
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	5f 07       	cpc	r21, r31
    1b60:	08 f0       	brcs	.+2      	; 0x1b64 <AutoCheck+0x758>
    1b62:	ad c0       	rjmp	.+346    	; 0x1cbe <AutoCheck+0x8b2>
        cap_found++;
    1b64:	1f 5f       	subi	r17, 0xFF	; 255
     } else {
        cap_found = 0;		// wait for stable connection
     }
     if (cap_found > 1) {
    1b66:	12 30       	cpi	r17, 0x02	; 2
    1b68:	09 f0       	breq	.+2      	; 0x1b6c <AutoCheck+0x760>
    1b6a:	aa c0       	rjmp	.+340    	; 0x1cc0 <AutoCheck+0x8b4>
        // value of capacitor is correct
        (void) eeprom_write_word((uint16_t *)(&ref_offset), load_diff);	// hold zero offset + slew rate dependend offset
    1b6c:	60 91 67 01 	lds	r22, 0x0167
    1b70:	70 91 68 01 	lds	r23, 0x0168
    1b74:	86 e6       	ldi	r24, 0x66	; 102
    1b76:	92 e0       	ldi	r25, 0x02	; 2
    1b78:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <__eewr_word_m328p>
        lcd_clear();
    1b7c:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
        lcd_fix_string(REF_C_str);	// "REF_C="
    1b80:	8e e1       	ldi	r24, 0x1E	; 30
    1b82:	92 e0       	ldi	r25, 0x02	; 2
    1b84:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
        lcd_string(itoa(load_diff, outval, 10));	//output REF_C_KORR
    1b88:	80 91 67 01 	lds	r24, 0x0167
    1b8c:	90 91 68 01 	lds	r25, 0x0168
    1b90:	6e e0       	ldi	r22, 0x0E	; 14
    1b92:	71 e0       	ldi	r23, 0x01	; 1
    1b94:	4a e0       	ldi	r20, 0x0A	; 10
    1b96:	50 e0       	ldi	r21, 0x00	; 0
    1b98:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <itoa>
    1b9c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_string>
        eeprom_write_byte((uint8_t *)(&EE_ESR_ZERO), (uint8_t)ESR_ZERO); // set to initial zero offset
    1ba0:	8f e6       	ldi	r24, 0x6F	; 111
    1ba2:	92 e0       	ldi	r25, 0x02	; 2
    1ba4:	6d e1       	ldi	r22, 0x1D	; 29
    1ba6:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <__eewr_byte_m328p>
  #ifdef AUTOSCALE_ADC
        ADC_PORT =  TXD_VAL;	//ADC-Port 1 to GND
    1baa:	88 e0       	ldi	r24, 0x08	; 8
    1bac:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    1bae:	89 e0       	ldi	r24, 0x09	; 9
    1bb0:	87 b9       	out	0x07, r24	; 7
        R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1bb2:	80 e2       	ldi	r24, 0x20	; 32
    1bb4:	84 b9       	out	0x04, r24	; 4
        do {
           adcmv[0] = ReadADC(TP3);
    1bb6:	82 e0       	ldi	r24, 0x02	; 2
    1bb8:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
        } while (adcmv[0] > 980);
    1bbc:	23 e0       	ldi	r18, 0x03	; 3
    1bbe:	85 3d       	cpi	r24, 0xD5	; 213
    1bc0:	92 07       	cpc	r25, r18
    1bc2:	cc f7       	brge	.-14     	; 0x1bb6 <AutoCheck+0x7aa>
        R_DDR = 0;		//all Pins to input 
    1bc4:	14 b8       	out	0x04, r1	; 4
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1bc6:	10 92 3e 01 	sts	0x013E, r1
    1bca:	10 92 3d 01 	sts	0x013D, r1
        adcmv[0] = ReadADC(TP3);  // get cap voltage with VCC reference
    1bce:	82 e0       	ldi	r24, 0x02	; 2
    1bd0:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
    1bd4:	4c 01       	movw	r8, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1bd6:	8e e5       	ldi	r24, 0x5E	; 94
    1bd8:	92 e0       	ldi	r25, 0x02	; 2
    1bda:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__eerd_byte_m328p>
    1bde:	99 27       	eor	r25, r25
    1be0:	87 fd       	sbrc	r24, 7
    1be2:	90 95       	com	r25
    1be4:	20 91 41 01 	lds	r18, 0x0141
    1be8:	30 91 42 01 	lds	r19, 0x0142
    1bec:	82 0f       	add	r24, r18
    1bee:	93 1f       	adc	r25, r19
    1bf0:	90 93 3e 01 	sts	0x013E, r25
    1bf4:	80 93 3d 01 	sts	0x013D, r24
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
    1bf8:	82 e0       	ldi	r24, 0x02	; 2
    1bfa:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
    1bfe:	8c 01       	movw	r16, r24
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1c00:	10 92 3e 01 	sts	0x013E, r1
    1c04:	10 92 3d 01 	sts	0x013D, r1
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
    1c08:	82 e0       	ldi	r24, 0x02	; 2
    1c0a:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
    1c0e:	5c 01       	movw	r10, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1c10:	c0 90 41 01 	lds	r12, 0x0141
    1c14:	d0 90 42 01 	lds	r13, 0x0142
    1c18:	8e e5       	ldi	r24, 0x5E	; 94
    1c1a:	92 e0       	ldi	r25, 0x02	; 2
    1c1c:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__eerd_byte_m328p>
    1c20:	99 27       	eor	r25, r25
    1c22:	87 fd       	sbrc	r24, 7
    1c24:	90 95       	com	r25
    1c26:	8c 0d       	add	r24, r12
    1c28:	9d 1d       	adc	r25, r13
    1c2a:	90 93 3e 01 	sts	0x013E, r25
    1c2e:	80 93 3d 01 	sts	0x013D, r24
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1c32:	8e e5       	ldi	r24, 0x5E	; 94
    1c34:	92 e0       	ldi	r25, 0x02	; 2
    1c36:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__eerd_byte_m328p>
    1c3a:	68 2e       	mov	r6, r24
        lcd_line2();
    1c3c:	80 ec       	ldi	r24, 0xC0	; 192
    1c3e:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
        lcd_fix_string(REF_R_str);	// "REF_R="
    1c42:	85 e2       	ldi	r24, 0x25	; 37
    1c44:	92 e0       	ldi	r25, 0x02	; 2
    1c46:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1c4a:	8e e5       	ldi	r24, 0x5E	; 94
    1c4c:	92 e0       	ldi	r25, 0x02	; 2
    1c4e:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__eerd_byte_m328p>
        ADCconfig.U_Bandgap = ADC_internal_reference;
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
        ADCconfig.U_Bandgap = ADC_internal_reference;
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1c52:	f3 e0       	ldi	r31, 0x03	; 3
    1c54:	ef 2e       	mov	r14, r31
    1c56:	e8 0e       	add	r14, r24
    1c58:	a8 0c       	add	r10, r8
    1c5a:	b9 1c       	adc	r11, r9
    1c5c:	a0 1a       	sub	r10, r16
    1c5e:	b1 0a       	sbc	r11, r17
    1c60:	a0 1a       	sub	r10, r16
    1c62:	b1 0a       	sbc	r11, r17
    1c64:	b5 01       	movw	r22, r10
    1c66:	88 27       	eor	r24, r24
    1c68:	77 fd       	sbrc	r23, 7
    1c6a:	80 95       	com	r24
    1c6c:	98 2f       	mov	r25, r24
    1c6e:	26 2d       	mov	r18, r6
    1c70:	33 27       	eor	r19, r19
    1c72:	27 fd       	sbrc	r18, 7
    1c74:	30 95       	com	r19
    1c76:	2c 0d       	add	r18, r12
    1c78:	3d 1d       	adc	r19, r13
    1c7a:	40 e0       	ldi	r20, 0x00	; 0
    1c7c:	50 e0       	ldi	r21, 0x00	; 0
    1c7e:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    1c82:	00 0f       	add	r16, r16
    1c84:	11 1f       	adc	r17, r17
    1c86:	98 01       	movw	r18, r16
    1c88:	44 27       	eor	r20, r20
    1c8a:	37 fd       	sbrc	r19, 7
    1c8c:	40 95       	com	r20
    1c8e:	54 2f       	mov	r21, r20
    1c90:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__divmodsi4>
        lcd_line2();
        lcd_fix_string(REF_R_str);	// "REF_R="
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1c94:	e2 0e       	add	r14, r18
        (void) eeprom_write_byte((uint8_t *)(&RefDiff), (uint8_t)udiff2);	// hold offset for true reference Voltage
    1c96:	8e e5       	ldi	r24, 0x5E	; 94
    1c98:	92 e0       	ldi	r25, 0x02	; 2
    1c9a:	6e 2d       	mov	r22, r14
    1c9c:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <__eewr_byte_m328p>
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
    1ca0:	8e 2d       	mov	r24, r14
    1ca2:	99 27       	eor	r25, r25
    1ca4:	87 fd       	sbrc	r24, 7
    1ca6:	90 95       	com	r25
    1ca8:	6e e0       	ldi	r22, 0x0E	; 14
    1caa:	71 e0       	ldi	r23, 0x01	; 1
    1cac:	4a e0       	ldi	r20, 0x0A	; 10
    1cae:	50 e0       	ldi	r21, 0x00	; 0
    1cb0:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <itoa>
    1cb4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_string>
  #endif
        wait4s();
    1cb8:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <wait4s>
        break;
    1cbc:	19 c0       	rjmp	.+50     	; 0x1cf0 <AutoCheck+0x8e4>
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1cbe:	10 e0       	ldi	r17, 0x00	; 0
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
  #endif
        wait4s();
        break;
     }
     lcd_line2();
    1cc0:	80 ec       	ldi	r24, 0xC0	; 192
    1cc2:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
     DisplayValue(cap.cval,cap.cpre,'F',4);
    1cc6:	60 91 5a 01 	lds	r22, 0x015A
    1cca:	70 91 5b 01 	lds	r23, 0x015B
    1cce:	80 91 5c 01 	lds	r24, 0x015C
    1cd2:	90 91 5d 01 	lds	r25, 0x015D
    1cd6:	40 91 66 01 	lds	r20, 0x0166
    1cda:	26 e4       	ldi	r18, 0x46	; 70
    1cdc:	04 e0       	ldi	r16, 0x04	; 4
    1cde:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
     wait200ms();			// wait additional time
    1ce2:	0e 94 03 14 	call	0x2806	; 0x2806 <wait200ms>
 wait2s();		//wait 2 seconds
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
    1ce6:	c3 94       	inc	r12
    1ce8:	8c 2d       	mov	r24, r12
    1cea:	80 34       	cpi	r24, 0x40	; 64
    1cec:	09 f0       	breq	.+2      	; 0x1cf0 <AutoCheck+0x8e4>
    1cee:	f6 ce       	rjmp	.-532    	; 0x1adc <AutoCheck+0x6d0>
  }

 #endif
#endif

  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    1cf0:	89 e1       	ldi	r24, 0x19	; 25
    1cf2:	80 93 3b 01 	sts	0x013B, r24
  lcd_clear();
    1cf6:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
//  lcd_line1();
  lcd_line2();
    1cfa:	80 ec       	ldi	r24, 0xC0	; 192
    1cfc:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_string(VERSION_str);	//"Version ..."
    1d00:	86 ec       	ldi	r24, 0xC6	; 198
    1d02:	91 e0       	ldi	r25, 0x01	; 1
    1d04:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
  lcd_line1();
    1d08:	80 e8       	ldi	r24, 0x80	; 128
    1d0a:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_string(ATE);		//"Selftest End"
    1d0e:	86 e5       	ldi	r24, 0x56	; 86
    1d10:	91 e0       	ldi	r25, 0x01	; 1
    1d12:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
        // if key is pressed, don't repeat
        break;
     }
  }
#endif
 PartFound = PART_NONE;
    1d16:	10 92 09 01 	sts	0x0109, r1
 wait1s();			//wait 1 seconds
    1d1a:	0e 94 ff 13 	call	0x27fe	; 0x27fe <wait1000ms>
 } 
    1d1e:	2e 96       	adiw	r28, 0x0e	; 14
    1d20:	0f b6       	in	r0, 0x3f	; 63
    1d22:	f8 94       	cli
    1d24:	de bf       	out	0x3e, r29	; 62
    1d26:	0f be       	out	0x3f, r0	; 63
    1d28:	cd bf       	out	0x3d, r28	; 61
    1d2a:	cf 91       	pop	r28
    1d2c:	df 91       	pop	r29
    1d2e:	1f 91       	pop	r17
    1d30:	0f 91       	pop	r16
    1d32:	ff 90       	pop	r15
    1d34:	ef 90       	pop	r14
    1d36:	df 90       	pop	r13
    1d38:	cf 90       	pop	r12
    1d3a:	bf 90       	pop	r11
    1d3c:	af 90       	pop	r10
    1d3e:	9f 90       	pop	r9
    1d40:	8f 90       	pop	r8
    1d42:	7f 90       	pop	r7
    1d44:	6f 90       	pop	r6
    1d46:	5f 90       	pop	r5
    1d48:	4f 90       	pop	r4
    1d4a:	3f 90       	pop	r3
    1d4c:	2f 90       	pop	r2
    1d4e:	08 95       	ret

00001d50 <main>:

#define MAIN_C
#include "Transistortester.h"

//begin of transistortester program
int main(void) {
    1d50:	0f 93       	push	r16
    1d52:	1f 93       	push	r17
    1d54:	cf 93       	push	r28
    1d56:	df 93       	push	r29
  //switch on
  ON_DDR = (1<<ON_PIN);
    1d58:	80 e4       	ldi	r24, 0x40	; 64
    1d5a:	8a b9       	out	0x0a, r24	; 10
  ON_PORT = (1<<ON_PIN); 	// switch power on 
    1d5c:	8b b9       	out	0x0b, r24	; 11
  uint8_t tmp;
  //ADC-Init
  ADCSRA = (1<<ADEN) | AUTO_CLOCK_DIV;	//prescaler=8 or 64 (if 8Mhz clock)
    1d5e:	86 e8       	ldi	r24, 0x86	; 134
    1d60:	80 93 7a 00 	sts	0x007A, r24
// #define WDRF_HOME MCU_STATUS_REG
 #define WDRF_HOME MCUCSR
#else
 #define WDRF_HOME MCUSR
#endif
  tmp = (WDRF_HOME & (1<<WDRF));	// save Watch Dog Flag
    1d64:	14 b7       	in	r17, 0x34	; 52
  WDRF_HOME &= ~(1<<WDRF);	 	//reset Watch Dog flag
    1d66:	84 b7       	in	r24, 0x34	; 52
    1d68:	87 7f       	andi	r24, 0xF7	; 247
    1d6a:	84 bf       	out	0x34, r24	; 52
  wdt_disable();			// disable Watch Dog
    1d6c:	88 e1       	ldi	r24, 0x18	; 24
    1d6e:	0f b6       	in	r0, 0x3f	; 63
    1d70:	f8 94       	cli
    1d72:	80 93 60 00 	sts	0x0060, r24
    1d76:	10 92 60 00 	sts	0x0060, r1
    1d7a:	0f be       	out	0x3f, r0	; 63
  lcd_init();				//initialize LCD
    1d7c:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_init>
	
//  ADC_PORT = TXD_VAL;
//  ADC_DDR = TXD_MSK;
  if(tmp) { 
    1d80:	13 ff       	sbrs	r17, 3
    1d82:	0a c0       	rjmp	.+20     	; 0x1d98 <main+0x48>
     // check if  Watchdog-Event 
     // this happens, if the Watchdog is not reset for 2s
     // can happen, if any loop in the Program doen't finish.
     lcd_line1();
    1d84:	80 e8       	ldi	r24, 0x80	; 128
    1d86:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
     lcd_fix_string(TestTimedOut);	//Output Timeout
    1d8a:	8f e2       	ldi	r24, 0x2F	; 47
    1d8c:	91 e0       	ldi	r25, 0x01	; 1
    1d8e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
     wait3s();				//wait for 3 s
    1d92:	0e 94 fd 13 	call	0x27fa	; 0x27fa <wait3s>
    1d96:	f5 c0       	rjmp	.+490    	; 0x1f82 <main+0x232>
     ON_PORT = 0;			//shut off!
     return 0;
  }
  LCDLoadCustomChar(LCD_CHAR_DIODE1);	//Custom-Character Diode symbol
    1d98:	88 e4       	ldi	r24, 0x48	; 72
    1d9a:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_customchar(DiodeIcon1);	//load Character  >|
    1d9e:	8c e2       	ldi	r24, 0x2C	; 44
    1da0:	92 e0       	ldi	r25, 0x02	; 2
    1da2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_DIODE2);	//Custom-Character 
    1da6:	80 e5       	ldi	r24, 0x50	; 80
    1da8:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_customchar(DiodeIcon2);	//load Character  |<
    1dac:	84 e3       	ldi	r24, 0x34	; 52
    1dae:	92 e0       	ldi	r25, 0x02	; 2
    1db0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_fix_customchar>
#ifdef C_MESS
  LCDLoadCustomChar(LCD_CHAR_CAP);	//Custom-Character  Capacitor symbol
    1db4:	88 e5       	ldi	r24, 0x58	; 88
    1db6:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_customchar(CapIcon);		//load Character  ||
    1dba:	8c e3       	ldi	r24, 0x3C	; 60
    1dbc:	92 e0       	ldi	r25, 0x02	; 2
    1dbe:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_fix_customchar>
#endif
#ifdef R_MESS
  LCDLoadCustomChar(LCD_CHAR_RESIS1);	//Custom-Character Resistor symbol
    1dc2:	80 e7       	ldi	r24, 0x70	; 112
    1dc4:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_customchar(ResIcon1);		//load Character  [
    1dc8:	84 e4       	ldi	r24, 0x44	; 68
    1dca:	92 e0       	ldi	r25, 0x02	; 2
    1dcc:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS2);	//Custom-Character 
    1dd0:	88 e7       	ldi	r24, 0x78	; 120
    1dd2:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_customchar(ResIcon2);		//load Character  ]
    1dd6:	8c e4       	ldi	r24, 0x4C	; 76
    1dd8:	92 e0       	ldi	r25, 0x02	; 2
    1dda:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_fix_customchar>
#endif
#ifdef PULLUP_DISABLE
 #ifdef __AVR_ATmega8__
  SFIOR = (1<<PUD);		// disable Pull-Up Resistors mega8
 #else
  MCUCR = (1<<PUD);		// disable Pull-Up Resistors mega168 family
    1dde:	80 e1       	ldi	r24, 0x10	; 16
    1de0:	85 bf       	out	0x35, r24	; 53

//  DIDR0 = 0x3f;			//disable all Input register of ADC

#if POWER_OFF+0 > 1
  // tester display time selection
  display_time = OFF_WAIT_TIME;		// LONG_WAIT_TIME for single mode, else SHORT_WAIT_TIME
    1de2:	88 e8       	ldi	r24, 0x88	; 136
    1de4:	93 e1       	ldi	r25, 0x13	; 19
    1de6:	90 93 03 01 	sts	0x0103, r25
    1dea:	80 93 02 01 	sts	0x0102, r24
  if (!(ON_PIN_REG & (1<<RST_PIN))) {
    1dee:	4f 99       	sbic	0x09, 7	; 9
    1df0:	0a c0       	rjmp	.+20     	; 0x1e06 <main+0xb6>
     // if power button is pressed ...
     wait300ms();			// wait to catch a long key press
    1df2:	0e 94 02 14 	call	0x2804	; 0x2804 <wait300ms>
     if (!(ON_PIN_REG & (1<<RST_PIN))) {
    1df6:	4f 99       	sbic	0x09, 7	; 9
    1df8:	06 c0       	rjmp	.+12     	; 0x1e06 <main+0xb6>
        // check if power button is still pressed
        display_time = LONG_WAIT_TIME;	// ... set long time display anyway
    1dfa:	80 eb       	ldi	r24, 0xB0	; 176
    1dfc:	96 e3       	ldi	r25, 0x36	; 54
    1dfe:	90 93 03 01 	sts	0x0103, r25
    1e02:	80 93 02 01 	sts	0x0102, r24
  }
#else
  #define display_time OFF_WAIT_TIME
#endif

  empty_count = 0;
    1e06:	10 92 45 01 	sts	0x0145, r1
  mess_count = 0;
    1e0a:	10 92 0d 01 	sts	0x010D, r1


//*****************************************************************
//Entry: if start key is pressed before shut down
start:
  PartFound = PART_NONE;
    1e0e:	10 92 09 01 	sts	0x0109, r1
  NumOfDiodes = 0;
    1e12:	10 92 07 01 	sts	0x0107, r1
  PartReady = 0;
    1e16:	10 92 06 01 	sts	0x0106, r1
  PartMode = 0;
    1e1a:	10 92 08 01 	sts	0x0108, r1
  WithReference = 0;		// no precision reference voltage
    1e1e:	10 92 44 01 	sts	0x0144, r1
  lcd_clear();
    1e22:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
  ADC_DDR = TXD_MSK;		//activate Software-UART 
    1e26:	18 e0       	ldi	r17, 0x08	; 8
    1e28:	17 b9       	out	0x07, r17	; 7
#ifdef AUTO_CAL
  resis680pl = eeprom_read_word(&R680pl);
    1e2a:	8a e5       	ldi	r24, 0x5A	; 90
    1e2c:	92 e0       	ldi	r25, 0x02	; 2
    1e2e:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <__eerd_word_m328p>
    1e32:	90 93 0b 01 	sts	0x010B, r25
    1e36:	80 93 0a 01 	sts	0x010A, r24
  resis680mi = eeprom_read_word(&R680mi);
    1e3a:	8c e5       	ldi	r24, 0x5C	; 92
    1e3c:	92 e0       	ldi	r25, 0x02	; 2
    1e3e:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <__eerd_word_m328p>
    1e42:	90 93 05 01 	sts	0x0105, r25
    1e46:	80 93 04 01 	sts	0x0104, r24
#endif

#ifdef R_MESS
  ResistorsFound = 0;
    1e4a:	10 92 57 01 	sts	0x0157, r1
#endif
#ifdef C_MESS
  cap.ca = 0;
    1e4e:	10 92 64 01 	sts	0x0164, r1
  cap.cb = 0;
    1e52:	10 92 65 01 	sts	0x0165, r1
#endif
#ifdef WITH_UART
  uart_newline();		// start of new measurement
    1e56:	0e 94 8c 00 	call	0x118	; 0x118 <uart_newline>
#endif
  ADCconfig.RefFlag = 0;
    1e5a:	10 92 3c 01 	sts	0x013C, r1
  ADCconfig.U_AVCC = U_VCC;	// set initial VCC Voltage
    1e5e:	88 e8       	ldi	r24, 0x88	; 136
    1e60:	93 e1       	ldi	r25, 0x13	; 19
    1e62:	90 93 40 01 	sts	0x0140, r25
    1e66:	80 93 3f 01 	sts	0x013F, r24
  ADCconfig.Samples = 190;		// set number of ADC samples near to max
    1e6a:	8e eb       	ldi	r24, 0xBE	; 190
    1e6c:	80 93 3b 01 	sts	0x013B, r24
  ADC_PORT = TXD_VAL;
    1e70:	18 b9       	out	0x08, r17	; 8
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND
    1e72:	88 e1       	ldi	r24, 0x18	; 24
    1e74:	87 b9       	out	0x07, r24	; 7
  wait1ms();
    1e76:	0e 94 0f 14 	call	0x281e	; 0x281e <wait1ms>
  ADC_DDR =  TXD_MSK; 	// switch pin with reference back to input
    1e7a:	17 b9       	out	0x07, r17	; 7
  trans.uBE[1] = W5msReadADC(TPREF); // read voltage of precision reference
    1e7c:	84 e0       	ldi	r24, 0x04	; 4
    1e7e:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
    1e82:	ec 01       	movw	r28, r24
    1e84:	90 93 53 01 	sts	0x0153, r25
    1e88:	80 93 52 01 	sts	0x0152, r24
  if ((trans.uBE[1] > 2250) && (trans.uBE[1] < 2750)) {
    1e8c:	8b 5c       	subi	r24, 0xCB	; 203
    1e8e:	98 40       	sbci	r25, 0x08	; 8
    1e90:	21 e0       	ldi	r18, 0x01	; 1
    1e92:	83 3f       	cpi	r24, 0xF3	; 243
    1e94:	92 07       	cpc	r25, r18
    1e96:	c0 f4       	brcc	.+48     	; 0x1ec8 <main+0x178>
     // precision voltage reference connected, update U_AVCC
     WithReference = 1;
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	80 93 44 01 	sts	0x0144, r24
     ADCconfig.U_AVCC = (unsigned long)((unsigned long)ADCconfig.U_AVCC * 2495) / trans.uBE[1];
    1e9e:	60 91 3f 01 	lds	r22, 0x013F
    1ea2:	70 91 40 01 	lds	r23, 0x0140
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	2f eb       	ldi	r18, 0xBF	; 191
    1eac:	39 e0       	ldi	r19, 0x09	; 9
    1eae:	40 e0       	ldi	r20, 0x00	; 0
    1eb0:	50 e0       	ldi	r21, 0x00	; 0
    1eb2:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    1eb6:	9e 01       	movw	r18, r28
    1eb8:	40 e0       	ldi	r20, 0x00	; 0
    1eba:	50 e0       	ldi	r21, 0x00	; 0
    1ebc:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
    1ec0:	30 93 40 01 	sts	0x0140, r19
    1ec4:	20 93 3f 01 	sts	0x013F, r18
  }
  lcd_line1();	//1. row 
    1ec8:	80 e8       	ldi	r24, 0x80	; 128
    1eca:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  
#ifdef WITH_AUTO_REF
  (void) ReadADC(0x0e);		// read Reference-voltage 
    1ece:	8e e0       	ldi	r24, 0x0E	; 14
    1ed0:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
  ref_mv = W20msReadADC(0x0e);	// read Reference-voltage
    1ed4:	8e e0       	ldi	r24, 0x0E	; 14
    1ed6:	0e 94 93 19 	call	0x3326	; 0x3326 <W20msReadADC>
    1eda:	ec 01       	movw	r28, r24
    1edc:	90 93 42 01 	sts	0x0142, r25
    1ee0:	80 93 41 01 	sts	0x0141, r24
#else
  ref_mv = DEFAULT_BAND_GAP;	// set to default Reference Voltage
#endif
  ADCconfig.U_Bandgap = ADC_internal_reference;	// set internal reference voltage for ADC
    1ee4:	8e e5       	ldi	r24, 0x5E	; 94
    1ee6:	92 e0       	ldi	r25, 0x02	; 2
    1ee8:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__eerd_byte_m328p>
    1eec:	99 27       	eor	r25, r25
    1eee:	87 fd       	sbrc	r24, 7
    1ef0:	90 95       	com	r25
    1ef2:	8c 0f       	add	r24, r28
    1ef4:	9d 1f       	adc	r25, r29
    1ef6:	90 93 3e 01 	sts	0x013E, r25
    1efa:	80 93 3d 01 	sts	0x013D, r24
  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    1efe:	89 e1       	ldi	r24, 0x19	; 25
    1f00:	80 93 3b 01 	sts	0x013B, r24

#ifdef BAT_CHECK
  // Battery check is selected
  ReadADC(TPBAT);	//Dummy-Readout
    1f04:	85 e0       	ldi	r24, 0x05	; 5
    1f06:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
  trans.uBE[0] = W5msReadADC(TPBAT); 	//with 5V reference
    1f0a:	85 e0       	ldi	r24, 0x05	; 5
    1f0c:	0e 94 97 19 	call	0x332e	; 0x332e <W5msReadADC>
    1f10:	90 93 51 01 	sts	0x0151, r25
    1f14:	80 93 50 01 	sts	0x0150, r24
  lcd_fix_string(Bat_str);		//output: "Bat. "
    1f18:	83 e6       	ldi	r24, 0x63	; 99
    1f1a:	91 e0       	ldi	r25, 0x01	; 1
    1f1c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
 #ifdef BAT_OUT
  // display Battery voltage
  // The divisor to get the voltage in 0.01V units is ((10*33)/133) witch is about 2.4812
  // A good result can be get with multiply by 4 and divide by 10 (about 0.75%).
  cap.cval = (trans.uBE[0]*4)/10+((BAT_OUT+5)/10); // usually output only 2 digits
    1f20:	80 91 50 01 	lds	r24, 0x0150
    1f24:	90 91 51 01 	lds	r25, 0x0151
    1f28:	88 0f       	add	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	88 0f       	add	r24, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	6a e0       	ldi	r22, 0x0A	; 10
    1f32:	70 e0       	ldi	r23, 0x00	; 0
    1f34:	0e 94 b1 1c 	call	0x3962	; 0x3962 <__udivmodhi4>
    1f38:	61 5f       	subi	r22, 0xF1	; 241
    1f3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	60 93 5a 01 	sts	0x015A, r22
    1f44:	70 93 5b 01 	sts	0x015B, r23
    1f48:	80 93 5c 01 	sts	0x015C, r24
    1f4c:	90 93 5d 01 	sts	0x015D, r25
  DisplayValue(cap.cval,-2,'V',2);		// Display 2 Digits of this 10mV units
    1f50:	4e ef       	ldi	r20, 0xFE	; 254
    1f52:	26 e5       	ldi	r18, 0x56	; 86
    1f54:	02 e0       	ldi	r16, 0x02	; 2
    1f56:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
  lcd_space();
    1f5a:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>
 #warning "Battery POOR level is set for 7805 regulator"
 #define WARN_LEVEL (((unsigned long)7300*(unsigned long)33)/133)
 #define POOR_LEVEL (((unsigned long)6300*(unsigned long)33)/133)
 #endif
  // check the battery voltage
  if (trans.uBE[0] <  WARN_LEVEL) {
    1f5e:	80 91 50 01 	lds	r24, 0x0150
    1f62:	90 91 51 01 	lds	r25, 0x0151
    1f66:	27 e0       	ldi	r18, 0x07	; 7
    1f68:	8c 32       	cpi	r24, 0x2C	; 44
    1f6a:	92 07       	cpc	r25, r18
    1f6c:	a8 f4       	brcc	.+42     	; 0x1f98 <main+0x248>
     //Vcc < 7,3V; show Warning 
     if(trans.uBE[0] < POOR_LEVEL) {	
    1f6e:	26 e0       	ldi	r18, 0x06	; 6
    1f70:	83 33       	cpi	r24, 0x33	; 51
    1f72:	92 07       	cpc	r25, r18
    1f74:	70 f4       	brcc	.+28     	; 0x1f92 <main+0x242>
        //Vcc <6,3V; no proper operation is possible
        lcd_fix_string(BatEmpty);	//Battery empty!
    1f76:	88 ed       	ldi	r24, 0xD8	; 216
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
        wait2s();
    1f7e:	0e 94 fe 13 	call	0x27fc	; 0x27fc <wait2s>
        PORTD = 0;			//switch power off
    1f82:	1b b8       	out	0x0b, r1	; 11
  }
#else
  goto start;	// POWER_OFF not selected, repeat measurement
#endif
  return 0;
}   // end main
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	df 91       	pop	r29
    1f8a:	cf 91       	pop	r28
    1f8c:	1f 91       	pop	r17
    1f8e:	0f 91       	pop	r16
    1f90:	08 95       	ret
        lcd_fix_string(BatEmpty);	//Battery empty!
        wait2s();
        PORTD = 0;			//switch power off
        return 0;
     }
     lcd_fix_string(BatWeak);		//Battery weak
    1f92:	83 ed       	ldi	r24, 0xD3	; 211
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <main+0x24c>
  } else { // Battery-voltage OK
     lcd_fix_string(OK_str); 		// "OK"
    1f98:	89 e6       	ldi	r24, 0x69	; 105
    1f9a:	91 e0       	ldi	r25, 0x01	; 1
    1f9c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
  }
#else
  lcd_fix_string(VERSION_str);		// if no Battery check, Version .. in row 1
#endif
#ifdef WDT_enabled
  wdt_enable(WDTO_2S);		//Watchdog on
    1fa0:	2f e0       	ldi	r18, 0x0F	; 15
    1fa2:	88 e1       	ldi	r24, 0x18	; 24
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	a8 95       	wdr
    1fac:	80 93 60 00 	sts	0x0060, r24
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	20 93 60 00 	sts	0x0060, r18
#endif

//  wait1s();			// add mor time for reading batterie voltage
  // begin tests
#ifdef AUTO_RH
  RefVoltage();			//compute RHmultip = f(reference voltage)
    1fb6:	0e 94 b2 08 	call	0x1164	; 0x1164 <RefVoltage>
#endif

  lcd_line2();			//LCD position row2, column 1
    1fba:	80 ec       	ldi	r24, 0xC0	; 192
    1fbc:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  if (WithReference) {
    1fc0:	80 91 44 01 	lds	r24, 0x0144
    1fc4:	88 23       	and	r24, r24
    1fc6:	69 f0       	breq	.+26     	; 0x1fe2 <main+0x292>
     DisplayValue(ADCconfig.U_AVCC,-3,'V',3);	// Display 3 Digits of this mV units
    1fc8:	60 91 3f 01 	lds	r22, 0x013F
    1fcc:	70 91 40 01 	lds	r23, 0x0140
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	4d ef       	ldi	r20, 0xFD	; 253
    1fd6:	26 e5       	ldi	r18, 0x56	; 86
    1fd8:	03 e0       	ldi	r16, 0x03	; 3
    1fda:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
     lcd_space();
    1fde:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>
  }
  lcd_fix_string(TestRunning);		//String: testing...
    1fe2:	88 ec       	ldi	r24, 0xC8	; 200
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
  lcd_string(itoa((int)(trans.uBE[0] - 289), outval, 10));	//output temperature
  lcd_data(LCD_CHAR_DEGREE);
  lcd_data('C');
#endif
#ifndef DebugOut
  lcd_line2();			//LCD position row 2, column 1
    1fea:	80 ec       	ldi	r24, 0xC0	; 192
    1fec:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
#endif
#ifdef C_MESS
  EntladePins();		// discharge all capacitors!
    1ff0:	0e 94 17 08 	call	0x102e	; 0x102e <EntladePins>
  if(PartFound == PART_CELL) {
    1ff4:	80 91 09 01 	lds	r24, 0x0109
    1ff8:	88 30       	cpi	r24, 0x08	; 8
    1ffa:	39 f4       	brne	.+14     	; 0x200a <main+0x2ba>
    lcd_clear();
    1ffc:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
    lcd_fix_string(Cell_str);	// display "Cell!"
    2000:	85 ea       	ldi	r24, 0xA5	; 165
    2002:	91 e0       	ldi	r25, 0x01	; 1
    2004:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
    goto end2;
    2008:	9f c3       	rjmp	.+1854   	; 0x2748 <main+0x9f8>
  }
#endif

#ifdef CHECK_CALL
  AutoCheck();			//check, if selftest should be done
    200a:	0e 94 06 0a 	call	0x140c	; 0x140c <AutoCheck>
  CheckPins(TP2, TP3, TP1);
  CheckPins(TP3, TP2, TP1);
  CheckPins(TP3, TP1, TP2);
#else
//         High  Low  Tri
  CheckPins(TP1, TP2, TP3);
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	61 e0       	ldi	r22, 0x01	; 1
    2012:	42 e0       	ldi	r20, 0x02	; 2
    2014:	0e 94 5f 01 	call	0x2be	; 0x2be <CheckPins>
  CheckPins(TP2, TP1, TP3);
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	60 e0       	ldi	r22, 0x00	; 0
    201c:	42 e0       	ldi	r20, 0x02	; 2
    201e:	0e 94 5f 01 	call	0x2be	; 0x2be <CheckPins>

  CheckPins(TP1, TP3, TP2);
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	62 e0       	ldi	r22, 0x02	; 2
    2026:	41 e0       	ldi	r20, 0x01	; 1
    2028:	0e 94 5f 01 	call	0x2be	; 0x2be <CheckPins>
  CheckPins(TP3, TP1, TP2);
    202c:	82 e0       	ldi	r24, 0x02	; 2
    202e:	60 e0       	ldi	r22, 0x00	; 0
    2030:	41 e0       	ldi	r20, 0x01	; 1
    2032:	0e 94 5f 01 	call	0x2be	; 0x2be <CheckPins>

  CheckPins(TP2, TP3, TP1);
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	62 e0       	ldi	r22, 0x02	; 2
    203a:	40 e0       	ldi	r20, 0x00	; 0
    203c:	0e 94 5f 01 	call	0x2be	; 0x2be <CheckPins>
  CheckPins(TP3, TP2, TP1);
    2040:	82 e0       	ldi	r24, 0x02	; 2
    2042:	61 e0       	ldi	r22, 0x01	; 1
    2044:	40 e0       	ldi	r20, 0x00	; 0
    2046:	0e 94 5f 01 	call	0x2be	; 0x2be <CheckPins>
#endif
  
#ifdef C_MESS
  //separate check if is is a capacitor
  if(((PartFound == PART_NONE) || (PartFound == PART_RESISTOR) || (PartFound == PART_DIODE)) ) {
    204a:	80 91 09 01 	lds	r24, 0x0109
    204e:	88 23       	and	r24, r24
    2050:	21 f0       	breq	.+8      	; 0x205a <main+0x30a>
    2052:	86 30       	cpi	r24, 0x06	; 6
    2054:	11 f0       	breq	.+4      	; 0x205a <main+0x30a>
    2056:	81 30       	cpi	r24, 0x01	; 1
    2058:	81 f4       	brne	.+32     	; 0x207a <main+0x32a>
     EntladePins();		// discharge capacities
    205a:	0e 94 17 08 	call	0x102e	; 0x102e <EntladePins>
     //measurement of capacities in all 3 combinations
     ReadCapacity(TP3, TP1);
    205e:	82 e0       	ldi	r24, 0x02	; 2
    2060:	60 e0       	ldi	r22, 0x00	; 0
    2062:	0e 94 b4 14 	call	0x2968	; 0x2968 <ReadCapacity>
     ReadCapacity(TP3, TP2);
    2066:	82 e0       	ldi	r24, 0x02	; 2
    2068:	61 e0       	ldi	r22, 0x01	; 1
    206a:	0e 94 b4 14 	call	0x2968	; 0x2968 <ReadCapacity>
     ReadCapacity(TP2, TP1);
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	60 e0       	ldi	r22, 0x00	; 0
    2072:	0e 94 b4 14 	call	0x2968	; 0x2968 <ReadCapacity>

#if FLASHEND > 0x1fff
     ReadInductance();			// measure inductance
    2076:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <ReadInductance>
#endif
  }
#endif
  //All checks are done, output result to display
  lcd_clear();
    207a:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
  lcd_line1();
    207e:	80 e8       	ldi	r24, 0x80	; 128
    2080:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  if(PartFound == PART_DIODE) {
    2084:	80 91 09 01 	lds	r24, 0x0109
    2088:	81 30       	cpi	r24, 0x01	; 1
    208a:	09 f0       	breq	.+2      	; 0x208e <main+0x33e>
    208c:	ff c0       	rjmp	.+510    	; 0x228c <main+0x53c>
     if(NumOfDiodes == 1) {		//single Diode
    208e:	90 91 07 01 	lds	r25, 0x0107
    2092:	91 30       	cpi	r25, 0x01	; 1
    2094:	49 f5       	brne	.+82     	; 0x20e8 <main+0x398>
        lcd_fix_string(Diode);		//"Diode: "
    2096:	8d ee       	ldi	r24, 0xED	; 237
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
        lcd_testpin(diodes[0].Anode);
    209e:	80 91 69 01 	lds	r24, 0x0169
    20a2:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
        lcd_fix_string(AnKat);		//"->|-"
    20a6:	84 eb       	ldi	r24, 0xB4	; 180
    20a8:	91 e0       	ldi	r25, 0x01	; 1
    20aa:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
        lcd_testpin(diodes[0].Cathode);
    20ae:	80 91 6a 01 	lds	r24, 0x016A
    20b2:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
        UfAusgabe(0x70);
    20b6:	80 e7       	ldi	r24, 0x70	; 112
    20b8:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <UfAusgabe>
#ifdef C_MESS
        lcd_fix_string(GateCap_str);	//"C="
    20bc:	86 e7       	ldi	r24, 0x76	; 118
    20be:	91 e0       	ldi	r25, 0x01	; 1
    20c0:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
        ReadCapacity(diodes[0].Cathode,diodes[0].Anode);	// Capacity opposite flow direction
    20c4:	80 91 6a 01 	lds	r24, 0x016A
    20c8:	60 91 69 01 	lds	r22, 0x0169
    20cc:	0e 94 b4 14 	call	0x2968	; 0x2968 <ReadCapacity>
        DisplayValue(cap.cval,cap.cpre,'F',3);
    20d0:	60 91 5a 01 	lds	r22, 0x015A
    20d4:	70 91 5b 01 	lds	r23, 0x015B
    20d8:	80 91 5c 01 	lds	r24, 0x015C
    20dc:	90 91 5d 01 	lds	r25, 0x015D
    20e0:	40 91 66 01 	lds	r20, 0x0166
    20e4:	26 e4       	ldi	r18, 0x46	; 70
    20e6:	b1 c2       	rjmp	.+1378   	; 0x264a <main+0x8fa>
#endif
        goto end;
     } else if(NumOfDiodes == 2) { // double diode
    20e8:	92 30       	cpi	r25, 0x02	; 2
    20ea:	09 f0       	breq	.+2      	; 0x20ee <main+0x39e>
    20ec:	4c c0       	rjmp	.+152    	; 0x2186 <main+0x436>
        lcd_data('2');
    20ee:	82 e3       	ldi	r24, 0x32	; 50
    20f0:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
        lcd_fix_string(Dioden);		//"diodes "
    20f4:	8c eb       	ldi	r24, 0xBC	; 188
    20f6:	91 e0       	ldi	r25, 0x01	; 1
    20f8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
        if(diodes[0].Anode == diodes[1].Anode) { //Common Anode
    20fc:	90 91 69 01 	lds	r25, 0x0169
    2100:	20 91 6d 01 	lds	r18, 0x016D
    2104:	92 17       	cp	r25, r18
    2106:	59 f4       	brne	.+22     	; 0x211e <main+0x3ce>
           lcd_testpin(diodes[0].Cathode);
    2108:	80 91 6a 01 	lds	r24, 0x016A
    210c:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    2110:	88 eb       	ldi	r24, 0xB8	; 184
    2112:	91 e0       	ldi	r25, 0x01	; 1
    2114:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    2118:	80 91 69 01 	lds	r24, 0x0169
    211c:	2b c0       	rjmp	.+86     	; 0x2174 <main+0x424>
           lcd_fix_string(AnKat);	//"->|-"
           lcd_testpin(diodes[1].Cathode);
           UfAusgabe(0x01);
           goto end;
        } else if(diodes[0].Cathode == diodes[1].Cathode) { //Common Cathode
    211e:	30 91 6a 01 	lds	r19, 0x016A
    2122:	80 91 6e 01 	lds	r24, 0x016E
    2126:	38 17       	cp	r19, r24
    2128:	b9 f4       	brne	.+46     	; 0x2158 <main+0x408>
           lcd_testpin(diodes[0].Anode);
    212a:	89 2f       	mov	r24, r25
    212c:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2130:	84 eb       	ldi	r24, 0xB4	; 180
    2132:	91 e0       	ldi	r25, 0x01	; 1
    2134:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
	   lcd_testpin(diodes[0].Cathode);
    2138:	80 91 6a 01 	lds	r24, 0x016A
    213c:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    2140:	88 eb       	ldi	r24, 0xB8	; 184
    2142:	91 e0       	ldi	r25, 0x01	; 1
    2144:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
           lcd_testpin(diodes[1].Anode);
    2148:	80 91 6d 01 	lds	r24, 0x016D
    214c:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
           UfAusgabe(0x01);
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <UfAusgabe>
           goto end;
    2156:	f1 c2       	rjmp	.+1506   	; 0x273a <main+0x9ea>
          }
        else if ((diodes[0].Cathode == diodes[1].Anode) && (diodes[1].Cathode == diodes[0].Anode)) {
    2158:	32 17       	cp	r19, r18
    215a:	09 f0       	breq	.+2      	; 0x215e <main+0x40e>
    215c:	bc c2       	rjmp	.+1400   	; 0x26d6 <main+0x986>
    215e:	89 17       	cp	r24, r25
    2160:	09 f0       	breq	.+2      	; 0x2164 <main+0x414>
    2162:	b9 c2       	rjmp	.+1394   	; 0x26d6 <main+0x986>
           //Antiparallel
           lcd_testpin(diodes[0].Anode);
    2164:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2168:	84 eb       	ldi	r24, 0xB4	; 180
    216a:	91 e0       	ldi	r25, 0x01	; 1
    216c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
           lcd_testpin(diodes[0].Cathode);
    2170:	80 91 6a 01 	lds	r24, 0x016A
    2174:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2178:	84 eb       	ldi	r24, 0xB4	; 180
    217a:	91 e0       	ldi	r25, 0x01	; 1
    217c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
           lcd_testpin(diodes[1].Cathode);
    2180:	80 91 6e 01 	lds	r24, 0x016E
    2184:	e3 cf       	rjmp	.-58     	; 0x214c <main+0x3fc>
           UfAusgabe(0x01);
           goto end;
        }
     } else if(NumOfDiodes == 3) {
    2186:	93 30       	cpi	r25, 0x03	; 3
    2188:	09 f0       	breq	.+2      	; 0x218c <main+0x43c>
    218a:	a5 c2       	rjmp	.+1354   	; 0x26d6 <main+0x986>
        //Serial of 2 Diodes; was detected as 3 Diodes 
        trans.b = 3;
    218c:	90 93 54 01 	sts	0x0154, r25
        trans.c = 3;
    2190:	90 93 55 01 	sts	0x0155, r25
        /* Check for any constallation of 2 serial diodes:
          Only once the pin No of anyone Cathode is identical of another anode.
          two diodes in series is additionally detected as third big diode.
        */
        if(diodes[0].Cathode == diodes[1].Anode)
    2194:	50 91 6a 01 	lds	r21, 0x016A
    2198:	90 91 6d 01 	lds	r25, 0x016D
    219c:	59 17       	cp	r21, r25
    219e:	21 f4       	brne	.+8      	; 0x21a8 <main+0x458>
          {
           trans.b = 0;
    21a0:	10 92 54 01 	sts	0x0154, r1
           trans.c = 1;
    21a4:	80 93 55 01 	sts	0x0155, r24
          }
        if(diodes[0].Anode == diodes[1].Cathode)
    21a8:	40 91 69 01 	lds	r20, 0x0169
    21ac:	30 91 6e 01 	lds	r19, 0x016E
    21b0:	43 17       	cp	r20, r19
    21b2:	29 f4       	brne	.+10     	; 0x21be <main+0x46e>
          {
           trans.b = 1;
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	80 93 54 01 	sts	0x0154, r24
           trans.c = 0;
    21ba:	10 92 55 01 	sts	0x0155, r1
          }
        if(diodes[0].Cathode == diodes[2].Anode)
    21be:	20 91 71 01 	lds	r18, 0x0171
    21c2:	52 17       	cp	r21, r18
    21c4:	29 f4       	brne	.+10     	; 0x21d0 <main+0x480>
          {
           trans.b = 0;
    21c6:	10 92 54 01 	sts	0x0154, r1
           trans.c = 2;
    21ca:	82 e0       	ldi	r24, 0x02	; 2
    21cc:	80 93 55 01 	sts	0x0155, r24
          }
        if(diodes[0].Anode == diodes[2].Cathode)
    21d0:	80 91 72 01 	lds	r24, 0x0172
    21d4:	48 17       	cp	r20, r24
    21d6:	29 f4       	brne	.+10     	; 0x21e2 <main+0x492>
          {
           trans.b = 2;
    21d8:	42 e0       	ldi	r20, 0x02	; 2
    21da:	40 93 54 01 	sts	0x0154, r20
           trans.c = 0;
    21de:	10 92 55 01 	sts	0x0155, r1
          }
        if(diodes[1].Cathode == diodes[2].Anode)
    21e2:	32 17       	cp	r19, r18
    21e4:	31 f4       	brne	.+12     	; 0x21f2 <main+0x4a2>
          {
           trans.b = 1;
    21e6:	21 e0       	ldi	r18, 0x01	; 1
    21e8:	20 93 54 01 	sts	0x0154, r18
           trans.c = 2;
    21ec:	22 e0       	ldi	r18, 0x02	; 2
    21ee:	20 93 55 01 	sts	0x0155, r18
          }
        if(diodes[1].Anode == diodes[2].Cathode)
    21f2:	98 17       	cp	r25, r24
    21f4:	31 f4       	brne	.+12     	; 0x2202 <main+0x4b2>
          {
           trans.b = 2;
    21f6:	82 e0       	ldi	r24, 0x02	; 2
    21f8:	80 93 54 01 	sts	0x0154, r24
           trans.c = 1;
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	80 93 55 01 	sts	0x0155, r24
        lcd_testpin(diodes[2].Cathode);
        lcd_space();
        lcd_string(utoa(diodes[2].Voltage, outval, 10));
        lcd_line1();
#endif
        if((trans.b<3) && (trans.c<3)) {
    2202:	80 91 54 01 	lds	r24, 0x0154
    2206:	83 30       	cpi	r24, 0x03	; 3
    2208:	08 f0       	brcs	.+2      	; 0x220c <main+0x4bc>
    220a:	65 c2       	rjmp	.+1226   	; 0x26d6 <main+0x986>
    220c:	80 91 55 01 	lds	r24, 0x0155
    2210:	83 30       	cpi	r24, 0x03	; 3
    2212:	08 f0       	brcs	.+2      	; 0x2216 <main+0x4c6>
    2214:	60 c2       	rjmp	.+1216   	; 0x26d6 <main+0x986>
           lcd_data('3');
    2216:	83 e3       	ldi	r24, 0x33	; 51
    2218:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
           lcd_fix_string(Dioden);	//"Diodes "
    221c:	8c eb       	ldi	r24, 0xBC	; 188
    221e:	91 e0       	ldi	r25, 0x01	; 1
    2220:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Anode);
    2224:	e0 91 54 01 	lds	r30, 0x0154
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	ee 0f       	add	r30, r30
    222c:	ff 1f       	adc	r31, r31
    222e:	ee 0f       	add	r30, r30
    2230:	ff 1f       	adc	r31, r31
    2232:	e7 59       	subi	r30, 0x97	; 151
    2234:	fe 4f       	sbci	r31, 0xFE	; 254
    2236:	80 81       	ld	r24, Z
    2238:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    223c:	84 eb       	ldi	r24, 0xB4	; 180
    223e:	91 e0       	ldi	r25, 0x01	; 1
    2240:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Cathode);
    2244:	e0 91 54 01 	lds	r30, 0x0154
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	ee 0f       	add	r30, r30
    224c:	ff 1f       	adc	r31, r31
    224e:	ee 0f       	add	r30, r30
    2250:	ff 1f       	adc	r31, r31
    2252:	e7 59       	subi	r30, 0x97	; 151
    2254:	fe 4f       	sbci	r31, 0xFE	; 254
    2256:	81 81       	ldd	r24, Z+1	; 0x01
    2258:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    225c:	84 eb       	ldi	r24, 0xB4	; 180
    225e:	91 e0       	ldi	r25, 0x01	; 1
    2260:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
           lcd_testpin(diodes[trans.c].Cathode);
    2264:	e0 91 55 01 	lds	r30, 0x0155
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	ee 0f       	add	r30, r30
    226c:	ff 1f       	adc	r31, r31
    226e:	ee 0f       	add	r30, r30
    2270:	ff 1f       	adc	r31, r31
    2272:	e7 59       	subi	r30, 0x97	; 151
    2274:	fe 4f       	sbci	r31, 0xFE	; 254
    2276:	81 81       	ldd	r24, Z+1	; 0x01
    2278:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
           UfAusgabe( (trans.b<<4)|trans.c);
    227c:	80 91 54 01 	lds	r24, 0x0154
    2280:	82 95       	swap	r24
    2282:	80 7f       	andi	r24, 0xF0	; 240
    2284:	90 91 55 01 	lds	r25, 0x0155
    2288:	89 2b       	or	r24, r25
    228a:	63 cf       	rjmp	.-314    	; 0x2152 <main+0x402>
           goto end;
        }
     }
     // end (PartFound == PART_DIODE)
  } else if (PartFound == PART_TRANSISTOR) {
    228c:	82 30       	cpi	r24, 0x02	; 2
    228e:	09 f0       	breq	.+2      	; 0x2292 <main+0x542>
    2290:	7f c0       	rjmp	.+254    	; 0x2390 <main+0x640>
    if(PartReady != 0) {
    2292:	80 91 06 01 	lds	r24, 0x0106
    2296:	88 23       	and	r24, r24
    2298:	71 f1       	breq	.+92     	; 0x22f6 <main+0x5a6>
       if((trans.hfe[0]>trans.hfe[1])) {
    229a:	80 91 4c 01 	lds	r24, 0x014C
    229e:	90 91 4d 01 	lds	r25, 0x014D
    22a2:	a0 91 4e 01 	lds	r26, 0x014E
    22a6:	b0 91 4f 01 	lds	r27, 0x014F
    22aa:	20 91 48 01 	lds	r18, 0x0148
    22ae:	30 91 49 01 	lds	r19, 0x0149
    22b2:	40 91 4a 01 	lds	r20, 0x014A
    22b6:	50 91 4b 01 	lds	r21, 0x014B
    22ba:	82 17       	cp	r24, r18
    22bc:	93 07       	cpc	r25, r19
    22be:	a4 07       	cpc	r26, r20
    22c0:	b5 07       	cpc	r27, r21
    22c2:	48 f4       	brcc	.+18     	; 0x22d6 <main+0x586>
          //if the amplification factor was higher at first testr: swap C and E !
          tmp = trans.c;
    22c4:	80 91 55 01 	lds	r24, 0x0155
          trans.c = trans.e;
    22c8:	90 91 56 01 	lds	r25, 0x0156
    22cc:	90 93 55 01 	sts	0x0155, r25
          trans.e = tmp;
    22d0:	80 93 56 01 	sts	0x0156, r24
    22d4:	10 c0       	rjmp	.+32     	; 0x22f6 <main+0x5a6>
       } else {
          trans.hfe[0] = trans.hfe[1];
    22d6:	80 93 48 01 	sts	0x0148, r24
    22da:	90 93 49 01 	sts	0x0149, r25
    22de:	a0 93 4a 01 	sts	0x014A, r26
    22e2:	b0 93 4b 01 	sts	0x014B, r27
          trans.uBE[0] = trans.uBE[1];
    22e6:	80 91 52 01 	lds	r24, 0x0152
    22ea:	90 91 53 01 	lds	r25, 0x0153
    22ee:	90 93 51 01 	sts	0x0151, r25
    22f2:	80 93 50 01 	sts	0x0150, r24
       }
    }

    if(PartMode == PART_MODE_NPN) {
    22f6:	80 91 08 01 	lds	r24, 0x0108
    22fa:	81 30       	cpi	r24, 0x01	; 1
    22fc:	19 f4       	brne	.+6      	; 0x2304 <main+0x5b4>
       lcd_fix_string(NPN_str);		//"NPN "
    22fe:	8c e7       	ldi	r24, 0x7C	; 124
    2300:	91 e0       	ldi	r25, 0x01	; 1
    2302:	02 c0       	rjmp	.+4      	; 0x2308 <main+0x5b8>
    } else {
       lcd_fix_string(PNP_str);		//"PNP "
    2304:	81 e8       	ldi	r24, 0x81	; 129
    2306:	91 e0       	ldi	r25, 0x01	; 1
    2308:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
    }
    if(NumOfDiodes > 2) {	//Transistor with protection diode
    230c:	80 91 07 01 	lds	r24, 0x0107
    2310:	83 30       	cpi	r24, 0x03	; 3
    2312:	58 f0       	brcs	.+22     	; 0x232a <main+0x5da>
       if(PartMode == PART_MODE_NPN) {
    2314:	80 91 08 01 	lds	r24, 0x0108
    2318:	81 30       	cpi	r24, 0x01	; 1
    231a:	19 f4       	brne	.+6      	; 0x2322 <main+0x5d2>
          lcd_fix_string(AnKat);	//"->|-"
    231c:	84 eb       	ldi	r24, 0xB4	; 180
    231e:	91 e0       	ldi	r25, 0x01	; 1
    2320:	02 c0       	rjmp	.+4      	; 0x2326 <main+0x5d6>
       } else {
          lcd_fix_string(KatAn);	//"-|<-"
    2322:	88 eb       	ldi	r24, 0xB8	; 184
    2324:	91 e0       	ldi	r25, 0x01	; 1
    2326:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
       }
    }
    lcd_fix_string(EBC_str);		//" EBC="
    232a:	86 e8       	ldi	r24, 0x86	; 134
    232c:	91 e0       	ldi	r25, 0x01	; 1
    232e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
    lcd_testpin(trans.e);
    2332:	80 91 56 01 	lds	r24, 0x0156
    2336:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
    lcd_testpin(trans.b);
    233a:	80 91 54 01 	lds	r24, 0x0154
    233e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
    lcd_testpin(trans.c);
    2342:	80 91 55 01 	lds	r24, 0x0155
    2346:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
    lcd_line2(); //2. row 
    234a:	80 ec       	ldi	r24, 0xC0	; 192
    234c:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
    lcd_fix_string(hfe_str);		//"B="  (hFE)
    2350:	89 e7       	ldi	r24, 0x79	; 121
    2352:	91 e0       	ldi	r25, 0x01	; 1
    2354:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
    DisplayValue(trans.hfe[0],0,0,3);
    2358:	60 91 48 01 	lds	r22, 0x0148
    235c:	70 91 49 01 	lds	r23, 0x0149
    2360:	80 91 4a 01 	lds	r24, 0x014A
    2364:	90 91 4b 01 	lds	r25, 0x014B
    2368:	40 e0       	ldi	r20, 0x00	; 0
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	03 e0       	ldi	r16, 0x03	; 3
    236e:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
    lcd_space();
    2372:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>

    lcd_fix_string(Uf_str);		//"Uf="
    2376:	82 e9       	ldi	r24, 0x92	; 146
    2378:	91 e0       	ldi	r25, 0x01	; 1
    237a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
    DisplayValue(trans.uBE[0],-3,'V',3);
    237e:	60 91 50 01 	lds	r22, 0x0150
    2382:	70 91 51 01 	lds	r23, 0x0151
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	4d ef       	ldi	r20, 0xFD	; 253
    238c:	26 e5       	ldi	r18, 0x56	; 86
    238e:	5e c1       	rjmp	.+700    	; 0x264c <main+0x8fc>
    goto end;
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    2390:	83 30       	cpi	r24, 0x03	; 3
    2392:	09 f0       	breq	.+2      	; 0x2396 <main+0x646>
    2394:	82 c0       	rjmp	.+260    	; 0x249a <main+0x74a>
    if(PartMode&1) {
    2396:	80 91 08 01 	lds	r24, 0x0108
    239a:	80 ff       	sbrs	r24, 0
    239c:	02 c0       	rjmp	.+4      	; 0x23a2 <main+0x652>
       //N-Kanal
       lcd_data('P');			//P-channel
    239e:	80 e5       	ldi	r24, 0x50	; 80
    23a0:	01 c0       	rjmp	.+2      	; 0x23a4 <main+0x654>
    } else {
       lcd_data('N');			//N-channel
    23a2:	8e e4       	ldi	r24, 0x4E	; 78
    23a4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
    }
    lcd_data('-');
    23a8:	8d e2       	ldi	r24, 0x2D	; 45
    23aa:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>

    tmp = PartMode/2;
    23ae:	80 91 08 01 	lds	r24, 0x0108
    23b2:	86 95       	lsr	r24
    if (tmp == (PART_MODE_N_D_MOS/2)) {
    23b4:	82 30       	cpi	r24, 0x02	; 2
    23b6:	11 f4       	brne	.+4      	; 0x23bc <main+0x66c>
       lcd_data('D');			// N-D
    23b8:	84 e4       	ldi	r24, 0x44	; 68
    23ba:	03 c0       	rjmp	.+6      	; 0x23c2 <main+0x672>
    }
    if (tmp == (PART_MODE_N_E_MOS/2)) {
    23bc:	81 30       	cpi	r24, 0x01	; 1
    23be:	21 f4       	brne	.+8      	; 0x23c8 <main+0x678>
       lcd_data('E');			// N-E
    23c0:	85 e4       	ldi	r24, 0x45	; 69
    23c2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
    23c6:	05 c0       	rjmp	.+10     	; 0x23d2 <main+0x682>
    }
    if (tmp == (PART_MODE_N_JFET/2)) {
    23c8:	83 30       	cpi	r24, 0x03	; 3
    23ca:	19 f4       	brne	.+6      	; 0x23d2 <main+0x682>
       lcd_fix_string(jfet_str);	//"JFET"
    23cc:	81 e7       	ldi	r24, 0x71	; 113
    23ce:	91 e0       	ldi	r25, 0x01	; 1
    23d0:	02 c0       	rjmp	.+4      	; 0x23d6 <main+0x686>
    } else {
       lcd_fix_string(mosfet_str);	//"-MOS "
    23d2:	8c e6       	ldi	r24, 0x6C	; 108
    23d4:	91 e0       	ldi	r25, 0x01	; 1
    23d6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
    }
    lcd_fix_string(GDS_str);		//"GDS="
    23da:	8c e8       	ldi	r24, 0x8C	; 140
    23dc:	91 e0       	ldi	r25, 0x01	; 1
    23de:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
    lcd_testpin(trans.b);
    23e2:	80 91 54 01 	lds	r24, 0x0154
    23e6:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
    lcd_testpin(trans.c);
    23ea:	80 91 55 01 	lds	r24, 0x0155
    23ee:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
    lcd_testpin(trans.e);
    23f2:	80 91 56 01 	lds	r24, 0x0156
    23f6:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
    if((NumOfDiodes > 0) && (PartMode < PART_MODE_N_D_MOS)) {
    23fa:	80 91 07 01 	lds	r24, 0x0107
    23fe:	88 23       	and	r24, r24
    2400:	59 f0       	breq	.+22     	; 0x2418 <main+0x6c8>
    2402:	80 91 08 01 	lds	r24, 0x0108
    2406:	84 30       	cpi	r24, 0x04	; 4
    2408:	38 f4       	brcc	.+14     	; 0x2418 <main+0x6c8>
       //MOSFET with protection diode; only with enhancement-FETs
       if (PartMode&1) {
    240a:	80 ff       	sbrs	r24, 0
    240c:	02 c0       	rjmp	.+4      	; 0x2412 <main+0x6c2>
          lcd_data(LCD_CHAR_DIODE1);	//show Diode symbol >|
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	01 c0       	rjmp	.+2      	; 0x2414 <main+0x6c4>
       } else {
          lcd_data(LCD_CHAR_DIODE2);	//show Diode symbol |<
    2412:	82 e0       	ldi	r24, 0x02	; 2
    2414:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
       }
    }
    lcd_line2();			//2. Row
    2418:	80 ec       	ldi	r24, 0xC0	; 192
    241a:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
    if(PartMode < PART_MODE_N_D_MOS) {	//enhancement-MOSFET
    241e:	80 91 08 01 	lds	r24, 0x0108
    2422:	84 30       	cpi	r24, 0x04	; 4
    2424:	d8 f4       	brcc	.+54     	; 0x245c <main+0x70c>
 #ifdef C_MESS	//Gate capacity
       lcd_fix_string(GateCap_str);		//"C="
    2426:	86 e7       	ldi	r24, 0x76	; 118
    2428:	91 e0       	ldi	r25, 0x01	; 1
    242a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
       ReadCapacity(trans.b,trans.e);	//measure capacity
    242e:	80 91 54 01 	lds	r24, 0x0154
    2432:	60 91 56 01 	lds	r22, 0x0156
    2436:	0e 94 b4 14 	call	0x2968	; 0x2968 <ReadCapacity>
       DisplayValue(cap.cval,cap.cpre,'F',3);
    243a:	60 91 5a 01 	lds	r22, 0x015A
    243e:	70 91 5b 01 	lds	r23, 0x015B
    2442:	80 91 5c 01 	lds	r24, 0x015C
    2446:	90 91 5d 01 	lds	r25, 0x015D
    244a:	40 91 66 01 	lds	r20, 0x0166
    244e:	26 e4       	ldi	r18, 0x46	; 70
    2450:	03 e0       	ldi	r16, 0x03	; 3
    2452:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
 #endif
       lcd_fix_string(vt_str);		// "Vt="
    2456:	86 e9       	ldi	r24, 0x96	; 150
    2458:	91 e0       	ldi	r25, 0x01	; 1
    245a:	13 c0       	rjmp	.+38     	; 0x2482 <main+0x732>
    } else {
       lcd_data('I');
    245c:	89 e4       	ldi	r24, 0x49	; 73
    245e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
       lcd_data('=');
    2462:	8d e3       	ldi	r24, 0x3D	; 61
    2464:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
       DisplayValue(trans.uBE[1],-5,'A',2);
    2468:	60 91 52 01 	lds	r22, 0x0152
    246c:	70 91 53 01 	lds	r23, 0x0153
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	4b ef       	ldi	r20, 0xFB	; 251
    2476:	21 e4       	ldi	r18, 0x41	; 65
    2478:	02 e0       	ldi	r16, 0x02	; 2
    247a:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
       lcd_fix_string(Vgs_str);		// " Vgs="
    247e:	8b e9       	ldi	r24, 0x9B	; 155
    2480:	91 e0       	ldi	r25, 0x01	; 1
    2482:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
    }
    //Gate-threshold voltage
    DisplayValue(gthvoltage,-3,'V',2);
    2486:	60 91 58 01 	lds	r22, 0x0158
    248a:	70 91 59 01 	lds	r23, 0x0159
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	4d ef       	ldi	r20, 0xFD	; 253
    2494:	26 e5       	ldi	r18, 0x56	; 86
    2496:	02 e0       	ldi	r16, 0x02	; 2
    2498:	d9 c0       	rjmp	.+434    	; 0x264c <main+0x8fc>
    goto end;
    // end (PartFound == PART_FET)
  } else if (PartFound == PART_THYRISTOR) {
    249a:	85 30       	cpi	r24, 0x05	; 5
    249c:	19 f4       	brne	.+6      	; 0x24a4 <main+0x754>
    lcd_fix_string(Thyristor);		//"Thyristor"
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	91 e0       	ldi	r25, 0x01	; 1
    24a2:	04 c0       	rjmp	.+8      	; 0x24ac <main+0x75c>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    24a4:	84 30       	cpi	r24, 0x04	; 4
    24a6:	c1 f4       	brne	.+48     	; 0x24d8 <main+0x788>
    lcd_fix_string(Triac);		//"Triac"
    24a8:	8a ef       	ldi	r24, 0xFA	; 250
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
  mess_count = 0;
  goto end2;


gakAusgabe:
  lcd_line2(); //2. row 
    24b0:	80 ec       	ldi	r24, 0xC0	; 192
    24b2:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_string(GAK);		//"GAK="
    24b6:	85 ef       	ldi	r24, 0xF5	; 245
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
  lcd_testpin(trans.b);
    24be:	80 91 54 01 	lds	r24, 0x0154
    24c2:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
  lcd_testpin(trans.c);
    24c6:	80 91 55 01 	lds	r24, 0x0155
    24ca:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
  lcd_testpin(trans.e);
    24ce:	80 91 56 01 	lds	r24, 0x0156
    24d2:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
    24d6:	31 c1       	rjmp	.+610    	; 0x273a <main+0x9ea>
  } else if (PartFound == PART_TRIAC) {
    lcd_fix_string(Triac);		//"Triac"
    goto gakAusgabe;
  }
 #ifdef R_MESS	//resistor measurement is wanted
  else if(PartFound == PART_RESISTOR) {
    24d8:	86 30       	cpi	r24, 0x06	; 6
    24da:	09 f0       	breq	.+2      	; 0x24de <main+0x78e>
    24dc:	da c0       	rjmp	.+436    	; 0x2692 <main+0x942>
    if (ResistorsFound == 1) { // single resistor
    24de:	60 91 57 01 	lds	r22, 0x0157
    24e2:	61 30       	cpi	r22, 0x01	; 1
    24e4:	69 f4       	brne	.+26     	; 0x2500 <main+0x7b0>
       lcd_testpin(resis[0].rb);  	//Pin-number 1
    24e6:	80 91 23 01 	lds	r24, 0x0123
    24ea:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
       lcd_fix_string(Resistor_str);
    24ee:	81 ec       	ldi	r24, 0xC1	; 193
    24f0:	91 e0       	ldi	r25, 0x01	; 1
    24f2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
       lcd_testpin(resis[0].ra);		//Pin-number 2
    24f6:	80 91 22 01 	lds	r24, 0x0122
    24fa:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
    24fe:	80 c0       	rjmp	.+256    	; 0x2600 <main+0x8b0>
    } else { // R-Max suchen
       ii = 0;
    2500:	10 92 46 01 	sts	0x0146, r1
       if (resis[1].rx > resis[0].rx)
    2504:	20 91 25 01 	lds	r18, 0x0125
    2508:	30 91 26 01 	lds	r19, 0x0126
    250c:	40 91 27 01 	lds	r20, 0x0127
    2510:	50 91 28 01 	lds	r21, 0x0128
    2514:	80 91 1a 01 	lds	r24, 0x011A
    2518:	90 91 1b 01 	lds	r25, 0x011B
    251c:	a0 91 1c 01 	lds	r26, 0x011C
    2520:	b0 91 1d 01 	lds	r27, 0x011D
    2524:	82 17       	cp	r24, r18
    2526:	93 07       	cpc	r25, r19
    2528:	a4 07       	cpc	r26, r20
    252a:	b5 07       	cpc	r27, r21
    252c:	18 f4       	brcc	.+6      	; 0x2534 <main+0x7e4>
          ii = 1;
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	80 93 46 01 	sts	0x0146, r24
       if (ResistorsFound == 2) {
    2534:	62 30       	cpi	r22, 0x02	; 2
    2536:	19 f4       	brne	.+6      	; 0x253e <main+0x7ee>
          ii = 2;
    2538:	60 93 46 01 	sts	0x0146, r22
    253c:	22 c0       	rjmp	.+68     	; 0x2582 <main+0x832>
       } else {
          if (resis[2].rx > resis[ii].rx) {
    253e:	20 91 46 01 	lds	r18, 0x0146
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	8b e0       	ldi	r24, 0x0B	; 11
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	28 9f       	mul	r18, r24
    254a:	f0 01       	movw	r30, r0
    254c:	29 9f       	mul	r18, r25
    254e:	f0 0d       	add	r31, r0
    2550:	38 9f       	mul	r19, r24
    2552:	f0 0d       	add	r31, r0
    2554:	11 24       	eor	r1, r1
    2556:	e6 5e       	subi	r30, 0xE6	; 230
    2558:	fe 4f       	sbci	r31, 0xFE	; 254
    255a:	20 91 30 01 	lds	r18, 0x0130
    255e:	30 91 31 01 	lds	r19, 0x0131
    2562:	40 91 32 01 	lds	r20, 0x0132
    2566:	50 91 33 01 	lds	r21, 0x0133
    256a:	80 81       	ld	r24, Z
    256c:	91 81       	ldd	r25, Z+1	; 0x01
    256e:	a2 81       	ldd	r26, Z+2	; 0x02
    2570:	b3 81       	ldd	r27, Z+3	; 0x03
    2572:	82 17       	cp	r24, r18
    2574:	93 07       	cpc	r25, r19
    2576:	a4 07       	cpc	r26, r20
    2578:	b5 07       	cpc	r27, r21
    257a:	18 f4       	brcc	.+6      	; 0x2582 <main+0x832>
             ii = 2;
    257c:	82 e0       	ldi	r24, 0x02	; 2
    257e:	80 93 46 01 	sts	0x0146, r24
          }
       }

       if (ii == 0) {
    2582:	80 91 46 01 	lds	r24, 0x0146
    2586:	88 23       	and	r24, r24
    2588:	89 f4       	brne	.+34     	; 0x25ac <main+0x85c>
          lcd_data('1');
    258a:	81 e3       	ldi	r24, 0x31	; 49
    258c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    2590:	81 ec       	ldi	r24, 0xC1	; 193
    2592:	91 e0       	ldi	r25, 0x01	; 1
    2594:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
          lcd_data('3');
    2598:	83 e3       	ldi	r24, 0x33	; 51
    259a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    259e:	81 ec       	ldi	r24, 0xC1	; 193
    25a0:	91 e0       	ldi	r25, 0x01	; 1
    25a2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
          lcd_data('2');
    25a6:	82 e3       	ldi	r24, 0x32	; 50
    25a8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
       }
       if (ii == 1) {
    25ac:	80 91 46 01 	lds	r24, 0x0146
    25b0:	81 30       	cpi	r24, 0x01	; 1
    25b2:	89 f4       	brne	.+34     	; 0x25d6 <main+0x886>
          lcd_data('1');
    25b4:	81 e3       	ldi	r24, 0x31	; 49
    25b6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    25ba:	81 ec       	ldi	r24, 0xC1	; 193
    25bc:	91 e0       	ldi	r25, 0x01	; 1
    25be:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
          lcd_data('2');
    25c2:	82 e3       	ldi	r24, 0x32	; 50
    25c4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    25c8:	81 ec       	ldi	r24, 0xC1	; 193
    25ca:	91 e0       	ldi	r25, 0x01	; 1
    25cc:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
          lcd_data('3');
    25d0:	83 e3       	ldi	r24, 0x33	; 51
    25d2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
       }
       if (ii == 2) {
    25d6:	80 91 46 01 	lds	r24, 0x0146
    25da:	82 30       	cpi	r24, 0x02	; 2
    25dc:	89 f4       	brne	.+34     	; 0x2600 <main+0x8b0>
          lcd_data('2');
    25de:	82 e3       	ldi	r24, 0x32	; 50
    25e0:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    25e4:	81 ec       	ldi	r24, 0xC1	; 193
    25e6:	91 e0       	ldi	r25, 0x01	; 1
    25e8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
          lcd_data('1');
    25ec:	81 e3       	ldi	r24, 0x31	; 49
    25ee:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    25f2:	81 ec       	ldi	r24, 0xC1	; 193
    25f4:	91 e0       	ldi	r25, 0x01	; 1
    25f6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
          lcd_data('3');
    25fa:	83 e3       	ldi	r24, 0x33	; 51
    25fc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
       }
    }
    lcd_line2(); //2. row 
    2600:	80 ec       	ldi	r24, 0xC0	; 192
    2602:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
    if (ResistorsFound == 1) {
    2606:	80 91 57 01 	lds	r24, 0x0157
    260a:	81 30       	cpi	r24, 0x01	; 1
    260c:	11 f5       	brne	.+68     	; 0x2652 <main+0x902>
       RvalOut(0);
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	0e 94 c0 09 	call	0x1380	; 0x1380 <RvalOut>
#if FLASHEND > 0x1fff
       if (resis[0].lx != 0) {
    2614:	80 91 1e 01 	lds	r24, 0x011E
    2618:	90 91 1f 01 	lds	r25, 0x011F
    261c:	a0 91 20 01 	lds	r26, 0x0120
    2620:	b0 91 21 01 	lds	r27, 0x0121
    2624:	00 97       	sbiw	r24, 0x00	; 0
    2626:	a1 05       	cpc	r26, r1
    2628:	b1 05       	cpc	r27, r1
    262a:	09 f4       	brne	.+2      	; 0x262e <main+0x8de>
    262c:	86 c0       	rjmp	.+268    	; 0x273a <main+0x9ea>
	  // resistor have also Inductance
          lcd_fix_string(Lis_str);	// "L="
    262e:	81 eb       	ldi	r24, 0xB1	; 177
    2630:	91 e0       	ldi	r25, 0x01	; 1
    2632:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
          DisplayValue(resis[0].lx,-5,'H',3);	// output inductance
    2636:	60 91 1e 01 	lds	r22, 0x011E
    263a:	70 91 1f 01 	lds	r23, 0x011F
    263e:	80 91 20 01 	lds	r24, 0x0120
    2642:	90 91 21 01 	lds	r25, 0x0121
    2646:	4b ef       	ldi	r20, 0xFB	; 251
    2648:	28 e4       	ldi	r18, 0x48	; 72
    264a:	03 e0       	ldi	r16, 0x03	; 3
    264c:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
    2650:	74 c0       	rjmp	.+232    	; 0x273a <main+0x9ea>
       }
#endif
    } else {
       // output resistor values in right order
       if (ii == 0) {
    2652:	80 91 46 01 	lds	r24, 0x0146
    2656:	88 23       	and	r24, r24
    2658:	31 f4       	brne	.+12     	; 0x2666 <main+0x916>
          RvalOut(1);
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	0e 94 c0 09 	call	0x1380	; 0x1380 <RvalOut>
          RvalOut(2);
    2660:	82 e0       	ldi	r24, 0x02	; 2
    2662:	0e 94 c0 09 	call	0x1380	; 0x1380 <RvalOut>
       }
       if (ii == 1) {
    2666:	80 91 46 01 	lds	r24, 0x0146
    266a:	81 30       	cpi	r24, 0x01	; 1
    266c:	31 f4       	brne	.+12     	; 0x267a <main+0x92a>
          RvalOut(0);
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	0e 94 c0 09 	call	0x1380	; 0x1380 <RvalOut>
          RvalOut(2);
    2674:	82 e0       	ldi	r24, 0x02	; 2
    2676:	0e 94 c0 09 	call	0x1380	; 0x1380 <RvalOut>
       }
       if (ii == 2) {
    267a:	80 91 46 01 	lds	r24, 0x0146
    267e:	82 30       	cpi	r24, 0x02	; 2
    2680:	09 f0       	breq	.+2      	; 0x2684 <main+0x934>
    2682:	5b c0       	rjmp	.+182    	; 0x273a <main+0x9ea>
          RvalOut(0);
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	0e 94 c0 09 	call	0x1380	; 0x1380 <RvalOut>
          RvalOut(1);
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	0e 94 c0 09 	call	0x1380	; 0x1380 <RvalOut>
    2690:	54 c0       	rjmp	.+168    	; 0x273a <main+0x9ea>
  } // end (PartFound == PART_RESISTOR)
#endif

#ifdef C_MESS
//capacity measurement is wanted
  else if(PartFound == PART_CAPACITOR) {
    2692:	87 30       	cpi	r24, 0x07	; 7
    2694:	01 f5       	brne	.+64     	; 0x26d6 <main+0x986>
//     lcd_fix_string(Capacitor);
     lcd_testpin(cap.ca);		//Pin number 1
    2696:	80 91 64 01 	lds	r24, 0x0164
    269a:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
     lcd_fix_string(CapZeich);		// capacitor sign
    269e:	81 ea       	ldi	r24, 0xA1	; 161
    26a0:	91 e0       	ldi	r25, 0x01	; 1
    26a2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
     lcd_testpin(cap.cb);		//Pin number 2
    26a6:	80 91 65 01 	lds	r24, 0x0165
    26aa:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
     lcd_line2(); 			//2. row 
    26ae:	80 ec       	ldi	r24, 0xC0	; 192
    26b0:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
     DisplayValue(cap.cval,cap.cpre,'F',4);
    26b4:	60 91 5a 01 	lds	r22, 0x015A
    26b8:	70 91 5b 01 	lds	r23, 0x015B
    26bc:	80 91 5c 01 	lds	r24, 0x015C
    26c0:	90 91 5d 01 	lds	r25, 0x015D
    26c4:	40 91 66 01 	lds	r20, 0x0166
    26c8:	26 e4       	ldi	r18, 0x46	; 70
    26ca:	04 e0       	ldi	r16, 0x04	; 4
    26cc:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
#if FLASHEND > 0x1fff
     GetESR();				// get ESR of capacitor
    26d0:	0e 94 06 1a 	call	0x340c	; 0x340c <GetESR>
#endif
     goto end;
    26d4:	32 c0       	rjmp	.+100    	; 0x273a <main+0x9ea>
  }
#endif
  if(NumOfDiodes == 0) { //no diodes are found
    26d6:	80 91 07 01 	lds	r24, 0x0107
    26da:	88 23       	and	r24, r24
    26dc:	71 f4       	brne	.+28     	; 0x26fa <main+0x9aa>
     lcd_fix_string(TestFailed1); 	//"Kein,unbek. oder"
    26de:	83 e1       	ldi	r24, 0x13	; 19
    26e0:	91 e0       	ldi	r25, 0x01	; 1
    26e2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
     lcd_line2(); //2. row 
    26e6:	80 ec       	ldi	r24, 0xC0	; 192
    26e8:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
     lcd_fix_string(TestFailed2); 	//"defektes "
    26ec:	8f ed       	ldi	r24, 0xDF	; 223
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
     lcd_fix_string(Bauteil);		//"Bauteil"
    26f4:	88 ee       	ldi	r24, 0xE8	; 232
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	16 c0       	rjmp	.+44     	; 0x2726 <main+0x9d6>
  } else {
     lcd_fix_string(Bauteil);		//"Bauteil"
    26fa:	88 ee       	ldi	r24, 0xE8	; 232
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
     lcd_fix_string(Unknown); 		//" unbek."
    2702:	8a e0       	ldi	r24, 0x0A	; 10
    2704:	91 e0       	ldi	r25, 0x01	; 1
    2706:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
     lcd_line2(); //2. row 
    270a:	80 ec       	ldi	r24, 0xC0	; 192
    270c:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
     lcd_fix_string(OrBroken); 		//"oder defekt "
    2710:	83 e2       	ldi	r24, 0x23	; 35
    2712:	91 e0       	ldi	r25, 0x01	; 1
    2714:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
     lcd_data(NumOfDiodes + '0');
    2718:	80 91 07 01 	lds	r24, 0x0107
    271c:	80 5d       	subi	r24, 0xD0	; 208
    271e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
     lcd_fix_string(AnKat);		//"->|-"
    2722:	84 eb       	ldi	r24, 0xB4	; 180
    2724:	91 e0       	ldi	r25, 0x01	; 1
    2726:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
  }
  empty_count++;
    272a:	80 91 45 01 	lds	r24, 0x0145
    272e:	8f 5f       	subi	r24, 0xFF	; 255
    2730:	80 93 45 01 	sts	0x0145, r24
  mess_count = 0;
    2734:	10 92 0d 01 	sts	0x010D, r1
  goto end2;
    2738:	07 c0       	rjmp	.+14     	; 0x2748 <main+0x9f8>
  lcd_testpin(trans.b);
  lcd_testpin(trans.c);
  lcd_testpin(trans.e);
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 end:
  empty_count = 0;		// reset counter, if part is found
    273a:	10 92 45 01 	sts	0x0145, r1
  mess_count++;			// count measurements
    273e:	80 91 0d 01 	lds	r24, 0x010D
    2742:	8f 5f       	subi	r24, 0xFF	; 255
    2744:	80 93 0d 01 	sts	0x010D, r24

 end2:
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
    2748:	4f 9b       	sbis	0x09, 7	; 9
    274a:	fe cf       	rjmp	.-4      	; 0x2748 <main+0x9f8>
  wait200ms();
    274c:	0e 94 03 14 	call	0x2806	; 0x2806 <wait200ms>
// wait 10 seconds or 3 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage++) {
    2750:	10 92 59 01 	sts	0x0159, r1
    2754:	10 92 58 01 	sts	0x0158, r1
    2758:	0e c0       	rjmp	.+28     	; 0x2776 <main+0xa26>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    275a:	4f 9b       	sbis	0x09, 7	; 9
    275c:	58 cb       	rjmp	.-2384   	; 0x1e0e <main+0xbe>
        // If the key is pressed again... 
        // goto start of measurement 
        goto start;
     }
     wdt_reset();
    275e:	a8 95       	wdr
     wait1ms();
    2760:	0e 94 0f 14 	call	0x281e	; 0x281e <wait1ms>

 end2:
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
  wait200ms();
// wait 10 seconds or 3 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage++) {
    2764:	80 91 58 01 	lds	r24, 0x0158
    2768:	90 91 59 01 	lds	r25, 0x0159
    276c:	01 96       	adiw	r24, 0x01	; 1
    276e:	90 93 59 01 	sts	0x0159, r25
    2772:	80 93 58 01 	sts	0x0158, r24
    2776:	20 91 58 01 	lds	r18, 0x0158
    277a:	30 91 59 01 	lds	r19, 0x0159
    277e:	80 91 02 01 	lds	r24, 0x0102
    2782:	90 91 03 01 	lds	r25, 0x0103
    2786:	28 17       	cp	r18, r24
    2788:	39 07       	cpc	r19, r25
    278a:	38 f3       	brcs	.-50     	; 0x275a <main+0xa0a>
  #define POWER2_OFF 255
 #else
  #define POWER2_OFF POWER_OFF*2
 #endif
 #if POWER_OFF+0 > 1
  if ((empty_count < POWER_OFF) && (mess_count < POWER2_OFF)) {
    278c:	80 91 45 01 	lds	r24, 0x0145
    2790:	85 30       	cpi	r24, 0x05	; 5
    2792:	28 f4       	brcc	.+10     	; 0x279e <main+0xa4e>
    2794:	80 91 0d 01 	lds	r24, 0x010D
    2798:	8a 30       	cpi	r24, 0x0A	; 10
    279a:	08 f4       	brcc	.+2      	; 0x279e <main+0xa4e>
    279c:	38 cb       	rjmp	.-2448   	; 0x1e0e <main+0xbe>
     goto start;			// repeat measurement POWER_OFF times
  }
 #endif
  // only one Measurement requested, shut off
  wdt_disable();			//Watchdog off
    279e:	88 e1       	ldi	r24, 0x18	; 24
    27a0:	0f b6       	in	r0, 0x3f	; 63
    27a2:	f8 94       	cli
    27a4:	80 93 60 00 	sts	0x0060, r24
    27a8:	10 92 60 00 	sts	0x0060, r1
    27ac:	0f be       	out	0x3f, r0	; 63
  ON_PORT &= ~(1<<ON_PIN);		//switch off power
    27ae:	5e 98       	cbi	0x0b, 6	; 11
  //never ending loop 
  while(1) {
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    27b0:	4f 99       	sbic	0x09, 7	; 9
    27b2:	fe cf       	rjmp	.-4      	; 0x27b0 <main+0xa60>
    27b4:	2c cb       	rjmp	.-2472   	; 0x1e0e <main+0xbe>

000027b6 <uart_putc>:
    27b6:	2f 93       	push	r18
    27b8:	5f b7       	in	r21, 0x3f	; 63
    27ba:	2f 93       	push	r18
    27bc:	2a e0       	ldi	r18, 0x0A	; 10
    27be:	80 95       	com	r24
    27c0:	08 94       	sec

000027c2 <putchar0>:
    27c2:	10 f4       	brcc	.+4      	; 0x27c8 <putchar1>
    27c4:	43 98       	cbi	0x08, 3	; 8
    27c6:	02 c0       	rjmp	.+4      	; 0x27cc <putchar2>

000027c8 <putchar1>:
    27c8:	43 9a       	sbi	0x08, 3	; 8
	...

000027cc <putchar2>:
    27cc:	08 d0       	rcall	.+16     	; 0x27de <UART_delay>
    27ce:	07 d0       	rcall	.+14     	; 0x27de <UART_delay>
    27d0:	86 95       	lsr	r24
    27d2:	2a 95       	dec	r18
    27d4:	b1 f7       	brne	.-20     	; 0x27c2 <putchar0>
    27d6:	2f 91       	pop	r18
    27d8:	5f bf       	out	0x3f, r21	; 63
    27da:	2f 91       	pop	r18
    27dc:	08 95       	ret

000027de <UART_delay>:
    27de:	5f 93       	push	r21
    27e0:	5f b7       	in	r21, 0x3f	; 63
    27e2:	5f 93       	push	r21
    27e4:	00 00       	nop
    27e6:	5e e3       	ldi	r21, 0x3E	; 62

000027e8 <UART_delay1>:
    27e8:	5a 95       	dec	r21
    27ea:	f1 f7       	brne	.-4      	; 0x27e8 <UART_delay1>
    27ec:	00 00       	nop
    27ee:	5f 91       	pop	r21
    27f0:	5f bf       	out	0x3f, r21	; 63
    27f2:	5f 91       	pop	r21
    27f4:	08 95       	ret

000027f6 <wait5s>:
    27f6:	03 d0       	rcall	.+6      	; 0x27fe <wait1000ms>

000027f8 <wait4s>:
    27f8:	02 d0       	rcall	.+4      	; 0x27fe <wait1000ms>

000027fa <wait3s>:
    27fa:	01 d0       	rcall	.+2      	; 0x27fe <wait1000ms>

000027fc <wait2s>:
    27fc:	00 d0       	rcall	.+0      	; 0x27fe <wait1000ms>

000027fe <wait1000ms>:
    27fe:	00 d0       	rcall	.+0      	; 0x2800 <wait500ms>

00002800 <wait500ms>:
    2800:	03 d0       	rcall	.+6      	; 0x2808 <wait100ms>

00002802 <wait400ms>:
    2802:	02 d0       	rcall	.+4      	; 0x2808 <wait100ms>

00002804 <wait300ms>:
    2804:	01 d0       	rcall	.+2      	; 0x2808 <wait100ms>

00002806 <wait200ms>:
    2806:	00 d0       	rcall	.+0      	; 0x2808 <wait100ms>

00002808 <wait100ms>:
    2808:	a8 95       	wdr
    280a:	00 d0       	rcall	.+0      	; 0x280c <wait50ms>

0000280c <wait50ms>:
    280c:	03 d0       	rcall	.+6      	; 0x2814 <wait10ms>

0000280e <wait40ms>:
    280e:	02 d0       	rcall	.+4      	; 0x2814 <wait10ms>

00002810 <wait30ms>:
    2810:	01 d0       	rcall	.+2      	; 0x2814 <wait10ms>

00002812 <wait20ms>:
    2812:	00 d0       	rcall	.+0      	; 0x2814 <wait10ms>

00002814 <wait10ms>:
    2814:	00 d0       	rcall	.+0      	; 0x2816 <wait5ms>

00002816 <wait5ms>:
    2816:	03 d0       	rcall	.+6      	; 0x281e <wait1ms>

00002818 <wait4ms>:
    2818:	02 d0       	rcall	.+4      	; 0x281e <wait1ms>

0000281a <wait3ms>:
    281a:	01 d0       	rcall	.+2      	; 0x281e <wait1ms>

0000281c <wait2ms>:
    281c:	00 d0       	rcall	.+0      	; 0x281e <wait1ms>

0000281e <wait1ms>:
    281e:	00 d0       	rcall	.+0      	; 0x2820 <wait500us>

00002820 <wait500us>:
    2820:	03 d0       	rcall	.+6      	; 0x2828 <wait100us>

00002822 <wait400us>:
    2822:	02 d0       	rcall	.+4      	; 0x2828 <wait100us>

00002824 <wait300us>:
    2824:	01 d0       	rcall	.+2      	; 0x2828 <wait100us>

00002826 <wait200us>:
    2826:	00 d0       	rcall	.+0      	; 0x2828 <wait100us>

00002828 <wait100us>:
    2828:	00 d0       	rcall	.+0      	; 0x282a <wait50us>

0000282a <wait50us>:
    282a:	03 d0       	rcall	.+6      	; 0x2832 <wait10us>

0000282c <wait40us>:
    282c:	02 d0       	rcall	.+4      	; 0x2832 <wait10us>

0000282e <wait30us>:
    282e:	01 d0       	rcall	.+2      	; 0x2832 <wait10us>

00002830 <wait20us>:
    2830:	00 d0       	rcall	.+0      	; 0x2832 <wait10us>

00002832 <wait10us>:
    2832:	00 d0       	rcall	.+0      	; 0x2834 <wait5us>

00002834 <wait5us>:
    2834:	03 d0       	rcall	.+6      	; 0x283c <wait1us>

00002836 <wait4us>:
    2836:	02 d0       	rcall	.+4      	; 0x283c <wait1us>

00002838 <wait3us>:
    2838:	01 d0       	rcall	.+2      	; 0x283c <wait1us>

0000283a <wait2us>:
    283a:	00 d0       	rcall	.+0      	; 0x283c <wait1us>

0000283c <wait1us>:
    283c:	00 00       	nop
    283e:	08 95       	ret

00002840 <CombineBI2Long>:
    2840:	99 27       	eor	r25, r25

00002842 <CombineII2Long>:
    2842:	08 95       	ret

00002844 <getRLmultip>:
  R_DDR = 0;			// switch all resistor ports to input
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
  return;
 } // end ReadCapacity()

unsigned int getRLmultip(unsigned int cvolt) {
    2844:	ff 92       	push	r15
    2846:	0f 93       	push	r16
    2848:	1f 93       	push	r17
    284a:	cf 93       	push	r28
    284c:	df 93       	push	r29

  unsigned int uvolt;
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;
  if (cvolt >= RL_Tab_Beginn) {
    284e:	21 e0       	ldi	r18, 0x01	; 1
    2850:	8c 32       	cpi	r24, 0x2C	; 44
    2852:	92 07       	cpc	r25, r18
    2854:	18 f0       	brcs	.+6      	; 0x285c <getRLmultip+0x18>
     uvolt = cvolt - RL_Tab_Beginn;
    2856:	8c 52       	subi	r24, 0x2C	; 44
    2858:	91 40       	sbci	r25, 0x01	; 1
    285a:	02 c0       	rjmp	.+4      	; 0x2860 <getRLmultip+0x1c>
  } else {
     uvolt = 0;			// limit to begin of table
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = uvolt / RL_Tab_Abstand;
    2860:	69 e1       	ldi	r22, 0x19	; 25
    2862:	70 e0       	ldi	r23, 0x00	; 0
    2864:	0e 94 b1 1c 	call	0x3962	; 0x3962 <__udivmodhi4>
  tabres = uvolt % RL_Tab_Abstand;
    2868:	f8 2e       	mov	r15, r24
  tabres = RL_Tab_Abstand - tabres;
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
    286a:	6d 32       	cpi	r22, 0x2D	; 45
    286c:	08 f0       	brcs	.+2      	; 0x2870 <getRLmultip+0x2c>
    286e:	6c e2       	ldi	r22, 0x2C	; 44
    2870:	c6 2f       	mov	r28, r22
    2872:	d0 e0       	ldi	r29, 0x00	; 0
    2874:	ce 01       	movw	r24, r28
    2876:	88 0f       	add	r24, r24
    2878:	99 1f       	adc	r25, r25
    287a:	80 50       	subi	r24, 0x00	; 0
    287c:	90 40       	sbci	r25, 0x00	; 0
    287e:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <__eerd_word_m328p>
    2882:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RLtab[tabind+1]);
    2884:	ce 01       	movw	r24, r28
    2886:	88 0f       	add	r24, r24
    2888:	99 1f       	adc	r25, r25
    288a:	8e 5f       	subi	r24, 0xFE	; 254
    288c:	9f 4f       	sbci	r25, 0xFF	; 255
    288e:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <__eerd_word_m328p>
    2892:	9c 01       	movw	r18, r24
  } else {
     uvolt = 0;			// limit to begin of table
  }
  tabind = uvolt / RL_Tab_Abstand;
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
    2894:	49 e1       	ldi	r20, 0x19	; 25
    2896:	4f 19       	sub	r20, r15
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
    2898:	50 e0       	ldi	r21, 0x00	; 0
    289a:	08 1b       	sub	r16, r24
    289c:	19 0b       	sbc	r17, r25
    289e:	40 9f       	mul	r20, r16
    28a0:	c0 01       	movw	r24, r0
    28a2:	41 9f       	mul	r20, r17
    28a4:	90 0d       	add	r25, r0
    28a6:	50 9f       	mul	r21, r16
    28a8:	90 0d       	add	r25, r0
    28aa:	11 24       	eor	r1, r1
    28ac:	0c 96       	adiw	r24, 0x0c	; 12
    28ae:	69 e1       	ldi	r22, 0x19	; 25
    28b0:	70 e0       	ldi	r23, 0x00	; 0
    28b2:	0e 94 b1 1c 	call	0x3962	; 0x3962 <__udivmodhi4>
    28b6:	62 0f       	add	r22, r18
    28b8:	73 1f       	adc	r23, r19
}
    28ba:	cb 01       	movw	r24, r22
    28bc:	df 91       	pop	r29
    28be:	cf 91       	pop	r28
    28c0:	1f 91       	pop	r17
    28c2:	0f 91       	pop	r16
    28c4:	ff 90       	pop	r15
    28c6:	08 95       	ret

000028c8 <Scale_C_with_vcc>:

void Scale_C_with_vcc(void) {
    28c8:	8f 92       	push	r8
    28ca:	9f 92       	push	r9
    28cc:	af 92       	push	r10
    28ce:	bf 92       	push	r11
    28d0:	df 92       	push	r13
    28d2:	ef 92       	push	r14
    28d4:	ff 92       	push	r15
    28d6:	0f 93       	push	r16
    28d8:	1f 93       	push	r17
    28da:	e0 90 5a 01 	lds	r14, 0x015A
    28de:	f0 90 5b 01 	lds	r15, 0x015B
    28e2:	00 91 5c 01 	lds	r16, 0x015C
    28e6:	10 91 5d 01 	lds	r17, 0x015D
    28ea:	d0 90 66 01 	lds	r13, 0x0166
   while (cap.cval > 100000) {
      cap.cval /= 10;
    28ee:	4a e0       	ldi	r20, 0x0A	; 10
    28f0:	84 2e       	mov	r8, r20
    28f2:	91 2c       	mov	r9, r1
    28f4:	a1 2c       	mov	r10, r1
    28f6:	b1 2c       	mov	r11, r1
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    28f8:	08 c0       	rjmp	.+16     	; 0x290a <Scale_C_with_vcc+0x42>
      cap.cval /= 10;
    28fa:	c8 01       	movw	r24, r16
    28fc:	b7 01       	movw	r22, r14
    28fe:	a5 01       	movw	r20, r10
    2900:	94 01       	movw	r18, r8
    2902:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
    2906:	79 01       	movw	r14, r18
    2908:	8a 01       	movw	r16, r20
    290a:	8d 2d       	mov	r24, r13
    290c:	d3 94       	inc	r13
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    290e:	91 ea       	ldi	r25, 0xA1	; 161
    2910:	e9 16       	cp	r14, r25
    2912:	96 e8       	ldi	r25, 0x86	; 134
    2914:	f9 06       	cpc	r15, r25
    2916:	91 e0       	ldi	r25, 0x01	; 1
    2918:	09 07       	cpc	r16, r25
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	19 07       	cpc	r17, r25
    291e:	68 f7       	brcc	.-38     	; 0x28fa <Scale_C_with_vcc+0x32>
    2920:	80 93 66 01 	sts	0x0166, r24
      cap.cval /= 10;
      cap.cpre ++;			// prevent overflow
   }
   cap.cval *= ADCconfig.U_AVCC;	// scale with measured voltage
    2924:	20 91 3f 01 	lds	r18, 0x013F
    2928:	30 91 40 01 	lds	r19, 0x0140
    292c:	40 e0       	ldi	r20, 0x00	; 0
    292e:	50 e0       	ldi	r21, 0x00	; 0
    2930:	c8 01       	movw	r24, r16
    2932:	b7 01       	movw	r22, r14
    2934:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
    2938:	28 e8       	ldi	r18, 0x88	; 136
    293a:	33 e1       	ldi	r19, 0x13	; 19
    293c:	40 e0       	ldi	r20, 0x00	; 0
    293e:	50 e0       	ldi	r21, 0x00	; 0
    2940:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
    2944:	20 93 5a 01 	sts	0x015A, r18
    2948:	30 93 5b 01 	sts	0x015B, r19
    294c:	40 93 5c 01 	sts	0x015C, r20
    2950:	50 93 5d 01 	sts	0x015D, r21
}
    2954:	1f 91       	pop	r17
    2956:	0f 91       	pop	r16
    2958:	ff 90       	pop	r15
    295a:	ef 90       	pop	r14
    295c:	df 90       	pop	r13
    295e:	bf 90       	pop	r11
    2960:	af 90       	pop	r10
    2962:	9f 90       	pop	r9
    2964:	8f 90       	pop	r8
    2966:	08 95       	ret

00002968 <ReadCapacity>:

unsigned long CombineII2Long( unsigned int ovcnt16, unsigned int tmpcnt); //tricky function to build unsigned long from two unsigned int values


//=================================================================
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    2968:	af 92       	push	r10
    296a:	bf 92       	push	r11
    296c:	cf 92       	push	r12
    296e:	df 92       	push	r13
    2970:	ef 92       	push	r14
    2972:	ff 92       	push	r15
    2974:	0f 93       	push	r16
    2976:	1f 93       	push	r17
    2978:	cf 93       	push	r28
    297a:	df 93       	push	r29
    297c:	18 2f       	mov	r17, r24
    297e:	06 2f       	mov	r16, r22
  uint8_t HiPinR_L, HiPinR_H;
  uint8_t LoADC;
  uint8_t ii;

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
    2980:	88 0f       	add	r24, r24
    2982:	81 0f       	add	r24, r17
    2984:	86 0f       	add	r24, r22
    2986:	81 50       	subi	r24, 0x01	; 1
    2988:	80 93 47 01 	sts	0x0147, r24
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    298c:	86 2f       	mov	r24, r22
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	89 5a       	subi	r24, 0xA9	; 169
    2992:	9d 4f       	sbci	r25, 0xFD	; 253
    2994:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__eerd_byte_m328p>
    2998:	b8 2e       	mov	r11, r24
  HiPinR_L = MEM_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
    299a:	21 2f       	mov	r18, r17
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	c9 01       	movw	r24, r18
    29a0:	8c 5a       	subi	r24, 0xAC	; 172
    29a2:	9d 4f       	sbci	r25, 0xFD	; 253
    29a4:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__eerd_byte_m328p>
    29a8:	a8 2e       	mov	r10, r24
  lcd_testpin(LowPin);
  lcd_data('C');
  lcd_testpin(HighPin);
  lcd_space();
#endif
  if(PartFound == PART_CAPACITOR) {
    29aa:	80 91 09 01 	lds	r24, 0x0109
    29ae:	87 30       	cpi	r24, 0x07	; 7
    29b0:	09 f4       	brne	.+2      	; 0x29b4 <ReadCapacity+0x4c>
    29b2:	0b c2       	rjmp	.+1046   	; 0x2dca <ReadCapacity+0x462>
     DisplayValue(cap.cval,cap.cpre,'F',3);
     wait2s();
#endif
     return;	//We have found a capacitor already
  }
  if(PartFound == PART_RESISTOR) {
    29b4:	86 30       	cpi	r24, 0x06	; 6
    29b6:	09 f4       	brne	.+2      	; 0x29ba <ReadCapacity+0x52>
    29b8:	08 c2       	rjmp	.+1040   	; 0x2dca <ReadCapacity+0x462>
     lcd_data('R');
     wait2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    29ba:	90 91 07 01 	lds	r25, 0x0107
    29be:	e9 e6       	ldi	r30, 0x69	; 105
    29c0:	f1 e0       	ldi	r31, 0x01	; 1
    29c2:	80 e0       	ldi	r24, 0x00	; 0
    29c4:	0f c0       	rjmp	.+30     	; 0x29e4 <ReadCapacity+0x7c>
     if ((diodes[ii].Cathode == LowPin) && (diodes[ii].Anode == HighPin) && (diodes[ii].Voltage < 1500)) {
    29c6:	21 81       	ldd	r18, Z+1	; 0x01
    29c8:	20 17       	cp	r18, r16
    29ca:	51 f4       	brne	.+20     	; 0x29e0 <ReadCapacity+0x78>
    29cc:	20 81       	ld	r18, Z
    29ce:	21 17       	cp	r18, r17
    29d0:	39 f4       	brne	.+14     	; 0x29e0 <ReadCapacity+0x78>
    29d2:	22 81       	ldd	r18, Z+2	; 0x02
    29d4:	33 81       	ldd	r19, Z+3	; 0x03
    29d6:	45 e0       	ldi	r20, 0x05	; 5
    29d8:	2c 3d       	cpi	r18, 0xDC	; 220
    29da:	34 07       	cpc	r19, r20
    29dc:	08 f4       	brcc	.+2      	; 0x29e0 <ReadCapacity+0x78>
    29de:	f5 c1       	rjmp	.+1002   	; 0x2dca <ReadCapacity+0x462>
     lcd_data('R');
     wait2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    29e0:	8f 5f       	subi	r24, 0xFF	; 255
    29e2:	34 96       	adiw	r30, 0x04	; 4
    29e4:	89 17       	cp	r24, r25
    29e6:	78 f3       	brcs	.-34     	; 0x29c6 <ReadCapacity+0x5e>

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    29e8:	88 e0       	ldi	r24, 0x08	; 8
    29ea:	b8 2a       	or	r11, r24
        return;
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
    29ec:	10 92 63 01 	sts	0x0163, r1
    29f0:	10 92 62 01 	sts	0x0162, r1
#endif
  cap.cval = 0;				// set capacity value to zero
    29f4:	10 92 5a 01 	sts	0x015A, r1
    29f8:	10 92 5b 01 	sts	0x015B, r1
    29fc:	10 92 5c 01 	sts	0x015C, r1
    2a00:	10 92 5d 01 	sts	0x015D, r1
  cap.cpre = -12;			//default unit is pF
    2a04:	84 ef       	ldi	r24, 0xF4	; 244
    2a06:	80 93 66 01 	sts	0x0166, r24
  EntladePins();			// discharge capacitor
    2a0a:	0e 94 17 08 	call	0x102e	; 0x102e <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    2a0e:	88 e0       	ldi	r24, 0x08	; 8
    2a10:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    2a12:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    2a14:	b7 b8       	out	0x07, r11	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    2a16:	a4 b8       	out	0x04, r10	; 4
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    2a18:	81 2f       	mov	r24, r17
    2a1a:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
    2a1e:	6c 01       	movw	r12, r24
// ******** should adcv[0] be measured without current???
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2a20:	c0 e0       	ldi	r28, 0x00	; 0
    2a22:	d0 e0       	ldi	r29, 0x00	; 0
     ChargePin10ms(HiPinR_L,1);		//HighPin with R_L 10ms to VCC ,then currentless
    2a24:	8a 2d       	mov	r24, r10
    2a26:	61 e0       	ldi	r22, 0x01	; 1
    2a28:	0e 94 3e 01 	call	0x27c	; 0x27c <ChargePin10ms>
     wait500us();			//wait a little time
    2a2c:	0e 94 10 14 	call	0x2820	; 0x2820 <wait500us>
     wdt_reset();
    2a30:	a8 95       	wdr
     // read voltage without current, is already charged enough?
     adcv[2] = ReadADC(HighPin);
    2a32:	81 2f       	mov	r24, r17
    2a34:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
    2a38:	7c 01       	movw	r14, r24
     if (adcv[2] > adcv[0]) {
    2a3a:	c8 16       	cp	r12, r24
    2a3c:	d9 06       	cpc	r13, r25
    2a3e:	18 f4       	brcc	.+6      	; 0x2a46 <ReadCapacity+0xde>
        adcv[2] -= adcv[0];		//difference to beginning voltage
    2a40:	ec 18       	sub	r14, r12
    2a42:	fd 08       	sbc	r15, r13
    2a44:	02 c0       	rjmp	.+4      	; 0x2a4a <ReadCapacity+0xe2>
     } else {
        adcv[2] = 0;			// voltage is lower or same as beginning voltage
    2a46:	ee 24       	eor	r14, r14
    2a48:	ff 24       	eor	r15, r15
     }
     if ((ovcnt16 == 126) && (adcv[2] < 75)) {
    2a4a:	ce 37       	cpi	r28, 0x7E	; 126
    2a4c:	d1 05       	cpc	r29, r1
    2a4e:	29 f4       	brne	.+10     	; 0x2a5a <ReadCapacity+0xf2>
    2a50:	9b e4       	ldi	r25, 0x4B	; 75
    2a52:	e9 16       	cp	r14, r25
    2a54:	f1 04       	cpc	r15, r1
    2a56:	08 f4       	brcc	.+2      	; 0x2a5a <ReadCapacity+0xf2>
    2a58:	b3 c1       	rjmp	.+870    	; 0x2dc0 <ReadCapacity+0x458>
        // 300mV can not be reached well-timed 
        break;		// don't try to load any more
     }
     if (adcv[2] > 300) {
    2a5a:	2d e2       	ldi	r18, 0x2D	; 45
    2a5c:	e2 16       	cp	r14, r18
    2a5e:	21 e0       	ldi	r18, 0x01	; 1
    2a60:	f2 06       	cpc	r15, r18
    2a62:	18 f0       	brcs	.+6      	; 0x2a6a <ReadCapacity+0x102>
#if DebugOut == 10
  DisplayValue(ovcnt16,0,' ',4);
  DisplayValue(adcv[2],-3,'V',4);
#endif
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    2a64:	20 97       	sbiw	r28, 0x00	; 0
    2a66:	39 f0       	breq	.+14     	; 0x2a76 <ReadCapacity+0x10e>
    2a68:	0c c0       	rjmp	.+24     	; 0x2a82 <ReadCapacity+0x11a>
  R_PORT = 0;				// switch R-Port to GND
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2a6a:	21 96       	adiw	r28, 0x01	; 1
    2a6c:	31 e0       	ldi	r19, 0x01	; 1
    2a6e:	c4 3f       	cpi	r28, 0xF4	; 244
    2a70:	d3 07       	cpc	r29, r19
    2a72:	c1 f6       	brne	.-80     	; 0x2a24 <ReadCapacity+0xbc>
    2a74:	a5 c1       	rjmp	.+842    	; 0x2dc0 <ReadCapacity+0x458>
#if DebugOut == 10
  DisplayValue(ovcnt16,0,' ',4);
  DisplayValue(adcv[2],-3,'V',4);
#endif
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    2a76:	45 e1       	ldi	r20, 0x15	; 21
    2a78:	e4 16       	cp	r14, r20
    2a7a:	45 e0       	ldi	r20, 0x05	; 5
    2a7c:	f4 06       	cpc	r15, r20
    2a7e:	08 f0       	brcs	.+2      	; 0x2a82 <ReadCapacity+0x11a>
    2a80:	6d c0       	rjmp	.+218    	; 0x2b5c <ReadCapacity+0x1f4>
     goto messe_mit_rh;		// Voltage of more than 1300mV is reached in one pulse, to fast loaded
  }
  // Capacity is more than about 50µF
  cap.cpre = -9;		// switch units to nF 
    2a82:	87 ef       	ldi	r24, 0xF7	; 247
    2a84:	80 93 66 01 	sts	0x0166, r24
  }
  cap.cval_uncorrected = ovcnt16 + 1;
  cap.cval_uncorrected *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the same time which is required for loading
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2a88:	aa 24       	eor	r10, r10
    2a8a:	bb 24       	eor	r11, r11
     wait5ms();
    2a8c:	0e 94 0b 14 	call	0x2816	; 0x2816 <wait5ms>
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
    2a90:	81 2f       	mov	r24, r17
    2a92:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
     wdt_reset();
    2a96:	a8 95       	wdr
  }
  cap.cval_uncorrected = ovcnt16 + 1;
  cap.cval_uncorrected *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the same time which is required for loading
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2a98:	08 94       	sec
    2a9a:	a1 1c       	adc	r10, r1
    2a9c:	b1 1c       	adc	r11, r1
    2a9e:	ca 15       	cp	r28, r10
    2aa0:	db 05       	cpc	r29, r11
    2aa2:	a0 f7       	brcc	.-24     	; 0x2a8c <ReadCapacity+0x124>
     wait5ms();
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
    2aa4:	c8 16       	cp	r12, r24
    2aa6:	d9 06       	cpc	r13, r25
    2aa8:	30 f4       	brcc	.+12     	; 0x2ab6 <ReadCapacity+0x14e>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    2aaa:	8c 19       	sub	r24, r12
    2aac:	9d 09       	sbc	r25, r13
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    2aae:	8e 15       	cp	r24, r14
    2ab0:	9f 05       	cpc	r25, r15
    2ab2:	60 f4       	brcc	.+24     	; 0x2acc <ReadCapacity+0x164>
    2ab4:	02 c0       	rjmp	.+4      	; 0x2aba <ReadCapacity+0x152>
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    2ab6:	80 e0       	ldi	r24, 0x00	; 0
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
    2aba:	97 01       	movw	r18, r14
    2abc:	28 1b       	sub	r18, r24
    2abe:	39 0b       	sbc	r19, r25
    2ac0:	c9 01       	movw	r24, r18
  } else {
     adcv[3] = 0;			// no lost voltage
  }
  if (adcv[3] > 100) {
    2ac2:	25 36       	cpi	r18, 0x65	; 101
    2ac4:	31 05       	cpc	r19, r1
    2ac6:	08 f0       	brcs	.+2      	; 0x2aca <ReadCapacity+0x162>
    2ac8:	7b c1       	rjmp	.+758    	; 0x2dc0 <ReadCapacity+0x458>
    2aca:	02 c0       	rjmp	.+4      	; 0x2ad0 <ReadCapacity+0x168>
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
  } else {
     adcv[3] = 0;			// no lost voltage
    2acc:	80 e0       	ldi	r24, 0x00	; 0
    2ace:	90 e0       	ldi	r25, 0x00	; 0
     lcd_space();
     wait1s();
 #endif
     goto keinC;			// capacitor does not keep the voltage about 5ms
  }
  cap.cval_uncorrected = ovcnt16 + 1;
    2ad0:	21 96       	adiw	r28, 0x01	; 1
    2ad2:	5e 01       	movw	r10, r28
    2ad4:	cc 24       	eor	r12, r12
    2ad6:	dd 24       	eor	r13, r13
    2ad8:	a0 92 5e 01 	sts	0x015E, r10
    2adc:	b0 92 5f 01 	sts	0x015F, r11
    2ae0:	c0 92 60 01 	sts	0x0160, r12
    2ae4:	d0 92 61 01 	sts	0x0161, r13
  // compute factor with load voltage + lost voltage during the voltage load time
  cap.cval_uncorrected *= getRLmultip(adcv[2]+adcv[3]);	// get factor to convert time to capacity from table
    2ae8:	8e 0d       	add	r24, r14
    2aea:	9f 1d       	adc	r25, r15
    2aec:	0e 94 22 14 	call	0x2844	; 0x2844 <getRLmultip>
    2af0:	bc 01       	movw	r22, r24
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	a6 01       	movw	r20, r12
    2af8:	95 01       	movw	r18, r10
    2afa:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    2afe:	60 93 5e 01 	sts	0x015E, r22
    2b02:	70 93 5f 01 	sts	0x015F, r23
    2b06:	80 93 60 01 	sts	0x0160, r24
    2b0a:	90 93 61 01 	sts	0x0161, r25
#endif
   cap.cval = cap.cval_uncorrected;	// set result to uncorrected
    2b0e:	60 93 5a 01 	sts	0x015A, r22
    2b12:	70 93 5b 01 	sts	0x015B, r23
    2b16:	80 93 5c 01 	sts	0x015C, r24
    2b1a:	90 93 5d 01 	sts	0x015D, r25
   Scale_C_with_vcc();
    2b1e:	0e 94 64 14 	call	0x28c8	; 0x28c8 <Scale_C_with_vcc>
   // cap.cval for this type is at least 40000nF, so the last digit will be never shown
   cap.cval *= (1000 - C_H_KORR);	// correct with C_H_KORR with 0.1% resolution, but prevent overflow
    2b22:	60 91 5a 01 	lds	r22, 0x015A
    2b26:	70 91 5b 01 	lds	r23, 0x015B
    2b2a:	80 91 5c 01 	lds	r24, 0x015C
    2b2e:	90 91 5d 01 	lds	r25, 0x015D
    2b32:	28 ee       	ldi	r18, 0xE8	; 232
    2b34:	33 e0       	ldi	r19, 0x03	; 3
    2b36:	40 e0       	ldi	r20, 0x00	; 0
    2b38:	50 e0       	ldi	r21, 0x00	; 0
    2b3a:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
   cap.cval /= 100;
    2b3e:	24 e6       	ldi	r18, 0x64	; 100
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	40 e0       	ldi	r20, 0x00	; 0
    2b44:	50 e0       	ldi	r21, 0x00	; 0
    2b46:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
    2b4a:	20 93 5a 01 	sts	0x015A, r18
    2b4e:	30 93 5b 01 	sts	0x015B, r19
    2b52:	40 93 5c 01 	sts	0x015C, r20
    2b56:	50 93 5d 01 	sts	0x015D, r21
   DisplayValue(cap.cval,cap.cpre,'F',4);
   lcd_space();
   lcd_string(utoa(ovcnt16,outval,10));
   wait3s();
#endif
   goto checkDiodes;
    2b5a:	23 c1       	rjmp	.+582    	; 0x2da2 <ReadCapacity+0x43a>
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
  HiPinR_L = MEM_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load
    2b5c:	ea 2c       	mov	r14, r10
    2b5e:	ee 0c       	add	r14, r14

//==================================================================================
// Measurement of little capacity values
messe_mit_rh:
  //little capacity value, about  < 50 µF
  EntladePins();			// discharge capacitor
    2b60:	0e 94 17 08 	call	0x102e	; 0x102e <EntladePins>
  //measure with the R_H (470kOhm) resistor 
  R_PORT = 0;		// R_DDR ist HiPinR_L
    2b64:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = (1<<TP1) | (1<<TP2) | (1<<TP3) | (1<<TxD);	//switch all Pins to output
    2b66:	8f e0       	ldi	r24, 0x0F	; 15
    2b68:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		//switch all ADC Pins to GND
    2b6a:	88 e0       	ldi	r24, 0x08	; 8
    2b6c:	88 b9       	out	0x08, r24	; 8
  R_DDR = HiPinR_H;   		// switch R_H resistor port for HighPin to output (GND)
    2b6e:	e4 b8       	out	0x04, r14	; 4
// setup Analog Comparator
  ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    2b70:	80 e4       	ldi	r24, 0x40	; 64
    2b72:	80 93 7b 00 	sts	0x007B, r24
  ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    2b76:	84 e5       	ldi	r24, 0x54	; 84
    2b78:	80 bf       	out	0x30, r24	; 48
  ADMUX = (1<<REFS0) | HighPin;			// switch Mux to High-Pin
    2b7a:	81 2f       	mov	r24, r17
    2b7c:	80 64       	ori	r24, 0x40	; 64
    2b7e:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    2b82:	86 e1       	ldi	r24, 0x16	; 22
    2b84:	80 93 7a 00 	sts	0x007A, r24
  wait200us();			//wait for bandgap to start up
    2b88:	0e 94 13 14 	call	0x2826	; 0x2826 <wait200us>

  ovcnt16 = 0;
// setup Counter1
  TCCR1A = 0;			// set Counter1 to normal Mode
    2b8c:	10 92 80 00 	sts	0x0080, r1
  TCNT1 = 0;			//set Counter to 0
    2b90:	10 92 85 00 	sts	0x0085, r1
    2b94:	10 92 84 00 	sts	0x0084, r1
  TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// mega88
    2b98:	87 e2       	ldi	r24, 0x27	; 39
    2b9a:	86 bb       	out	0x16, r24	; 22
  R_PORT = HiPinR_H;           	// switch R_H resistor port for HighPin to VCC
    2b9c:	e5 b8       	out	0x05, r14	; 5
  if(PartFound == PART_FET) {
    2b9e:	80 91 09 01 	lds	r24, 0x0109
    2ba2:	83 30       	cpi	r24, 0x03	; 3
    2ba4:	79 f4       	brne	.+30     	; 0x2bc4 <ReadCapacity+0x25c>
     // charge capacitor with R_H resistor
     TCCR1B = (1<<CS10);	//Start counter 1MHz or 8MHz
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = (((1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK) & ~(1<<HighPin));	// release only HighPin ADC port
    2bac:	81 e0       	ldi	r24, 0x01	; 1
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	01 2e       	mov	r0, r17
    2bb2:	02 c0       	rjmp	.+4      	; 0x2bb8 <ReadCapacity+0x250>
    2bb4:	88 0f       	add	r24, r24
    2bb6:	99 1f       	adc	r25, r25
    2bb8:	0a 94       	dec	r0
    2bba:	e2 f7       	brpl	.-8      	; 0x2bb4 <ReadCapacity+0x24c>
    2bbc:	80 95       	com	r24
    2bbe:	8f 70       	andi	r24, 0x0F	; 15
    2bc0:	87 b9       	out	0x07, r24	; 7
    2bc2:	04 c0       	rjmp	.+8      	; 0x2bcc <ReadCapacity+0x264>
  } else {
     TCCR1B =  (1<<CS10);	//start counter 1MHz or 8MHz
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
    2bca:	b7 b8       	out	0x07, r11	; 7
     ii = TI1_INT_FLAGS;	//read Timer flags
     if (ii & (1<<ICF1))  {
        break;
     }
     if((ii & (1<<TOV1))) {	// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
        TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
  }
//******************************
  while(1) {
     // Wait, until  Input Capture is set
     ii = TI1_INT_FLAGS;	//read Timer flags
    2bce:	26 b3       	in	r18, 0x16	; 22
     if (ii & (1<<ICF1))  {
    2bd0:	25 fd       	sbrc	r18, 5
    2bd2:	09 c0       	rjmp	.+18     	; 0x2be6 <ReadCapacity+0x27e>
        break;
     }
     if((ii & (1<<TOV1))) {	// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    2bd4:	20 ff       	sbrs	r18, 0
    2bd6:	fb cf       	rjmp	.-10     	; 0x2bce <ReadCapacity+0x266>
        TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    2bd8:	86 bb       	out	0x16, r24	; 22
        wdt_reset();
    2bda:	a8 95       	wdr
        ovcnt16++;
    2bdc:	21 96       	adiw	r28, 0x01	; 1
        if(ovcnt16 == (F_CPU/5000)) {
    2bde:	36 e0       	ldi	r19, 0x06	; 6
    2be0:	c0 34       	cpi	r28, 0x40	; 64
    2be2:	d3 07       	cpc	r29, r19
    2be4:	a1 f7       	brne	.-24     	; 0x2bce <ReadCapacity+0x266>
           break; 		//Timeout for Charging, above 12 s
        }
     }
  }
  TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    2be6:	10 92 81 00 	sts	0x0081, r1
  TI1_INT_FLAGS = (1<<ICF1);		// Reset Input Capture
    2bea:	80 e2       	ldi	r24, 0x20	; 32
    2bec:	86 bb       	out	0x16, r24	; 22
  tmpint = ICR1;		// get previous Input Capture Counter flag
    2bee:	e0 90 86 00 	lds	r14, 0x0086
    2bf2:	f0 90 87 00 	lds	r15, 0x0087
// check actual counter, if an additional overflow must be added
  if((TCNT1 > tmpint) && (ii & (1<<TOV1))) {
    2bf6:	80 91 84 00 	lds	r24, 0x0084
    2bfa:	90 91 85 00 	lds	r25, 0x0085
    2bfe:	e8 16       	cp	r14, r24
    2c00:	f9 06       	cpc	r15, r25
    2c02:	28 f4       	brcc	.+10     	; 0x2c0e <ReadCapacity+0x2a6>
    2c04:	20 ff       	sbrs	r18, 0
    2c06:	03 c0       	rjmp	.+6      	; 0x2c0e <ReadCapacity+0x2a6>
     // this OV was not counted, but was before the Input Capture
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	86 bb       	out	0x16, r24	; 22
     ovcnt16++;
    2c0c:	21 96       	adiw	r28, 0x01	; 1
  }
//############################################################
  ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    2c0e:	86 e9       	ldi	r24, 0x96	; 150
    2c10:	80 93 7a 00 	sts	0x007A, r24
  R_DDR = 0;			// switch R_H resistor port for input
    2c14:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// switch R_H resistor port pull up for HighPin off
    2c16:	15 b8       	out	0x05, r1	; 5
  load_diff = ReadADC(HighPin) + REF_C_KORR - ref_mv;	// build difference of capacitor voltage to Reference Voltage
    2c18:	81 2f       	mov	r24, r17
    2c1a:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
    2c1e:	20 91 41 01 	lds	r18, 0x0141
    2c22:	30 91 42 01 	lds	r19, 0x0142
    2c26:	82 1b       	sub	r24, r18
    2c28:	93 0b       	sbc	r25, r19
    2c2a:	0c 96       	adiw	r24, 0x0c	; 12
    2c2c:	90 93 68 01 	sts	0x0168, r25
    2c30:	80 93 67 01 	sts	0x0167, r24
//############################################################
  if (ovcnt16 >= (F_CPU/10000)) {
    2c34:	43 e0       	ldi	r20, 0x03	; 3
    2c36:	c0 32       	cpi	r28, 0x20	; 32
    2c38:	d4 07       	cpc	r29, r20
    2c3a:	08 f0       	brcs	.+2      	; 0x2c3e <ReadCapacity+0x2d6>
    2c3c:	c1 c0       	rjmp	.+386    	; 0x2dc0 <ReadCapacity+0x458>
     goto keinC;	// no normal end
  }
  cap.cval_uncorrected = CombineII2Long(ovcnt16, tmpint);
    2c3e:	ce 01       	movw	r24, r28
    2c40:	b7 01       	movw	r22, r14
    2c42:	0e 94 21 14 	call	0x2842	; 0x2842 <CombineII2Long>
    2c46:	60 93 5e 01 	sts	0x015E, r22
    2c4a:	70 93 5f 01 	sts	0x015F, r23
    2c4e:	80 93 60 01 	sts	0x0160, r24
    2c52:	90 93 61 01 	sts	0x0161, r25

  cap.cpre = -12;			// cap.cval unit is pF 
    2c56:	24 ef       	ldi	r18, 0xF4	; 244
    2c58:	20 93 66 01 	sts	0x0166, r18
  if (ovcnt16 > 65) {
    2c5c:	c2 34       	cpi	r28, 0x42	; 66
    2c5e:	d1 05       	cpc	r29, r1
    2c60:	88 f0       	brcs	.+34     	; 0x2c84 <ReadCapacity+0x31c>
     cap.cval_uncorrected /= 100;	// switch to next unit
    2c62:	24 e6       	ldi	r18, 0x64	; 100
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	40 e0       	ldi	r20, 0x00	; 0
    2c68:	50 e0       	ldi	r21, 0x00	; 0
    2c6a:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
    2c6e:	20 93 5e 01 	sts	0x015E, r18
    2c72:	30 93 5f 01 	sts	0x015F, r19
    2c76:	40 93 60 01 	sts	0x0160, r20
    2c7a:	50 93 61 01 	sts	0x0161, r21
     cap.cpre += 2;			// set unit, prevent overflow
    2c7e:	86 ef       	ldi	r24, 0xF6	; 246
    2c80:	80 93 66 01 	sts	0x0166, r24
  }
  cap.cval_uncorrected *= RHmultip;		// 708
    2c84:	60 91 00 01 	lds	r22, 0x0100
    2c88:	70 91 01 01 	lds	r23, 0x0101
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	20 91 5e 01 	lds	r18, 0x015E
    2c94:	30 91 5f 01 	lds	r19, 0x015F
    2c98:	40 91 60 01 	lds	r20, 0x0160
    2c9c:	50 91 61 01 	lds	r21, 0x0161
    2ca0:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
  cap.cval_uncorrected /= (F_CPU / 10000);	// divide by 100 (@ 1MHz clock), 800 (@ 8MHz clock)
    2ca4:	20 e2       	ldi	r18, 0x20	; 32
    2ca6:	33 e0       	ldi	r19, 0x03	; 3
    2ca8:	40 e0       	ldi	r20, 0x00	; 0
    2caa:	50 e0       	ldi	r21, 0x00	; 0
    2cac:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
    2cb0:	20 93 5e 01 	sts	0x015E, r18
    2cb4:	30 93 5f 01 	sts	0x015F, r19
    2cb8:	40 93 60 01 	sts	0x0160, r20
    2cbc:	50 93 61 01 	sts	0x0161, r21
  cap.cval = cap.cval_uncorrected;		// set the corrected cap.cval
    2cc0:	ea e5       	ldi	r30, 0x5A	; 90
    2cc2:	f1 e0       	ldi	r31, 0x01	; 1
    2cc4:	20 93 5a 01 	sts	0x015A, r18
    2cc8:	31 83       	std	Z+1, r19	; 0x01
    2cca:	42 83       	std	Z+2, r20	; 0x02
    2ccc:	53 83       	std	Z+3, r21	; 0x03
  Scale_C_with_vcc();
    2cce:	0e 94 64 14 	call	0x28c8	; 0x28c8 <Scale_C_with_vcc>
  if (cap.cpre == -12) {
    2cd2:	80 91 66 01 	lds	r24, 0x0166
    2cd6:	84 3f       	cpi	r24, 0xF4	; 244
    2cd8:	09 f0       	breq	.+2      	; 0x2cdc <ReadCapacity+0x374>
    2cda:	55 c0       	rjmp	.+170    	; 0x2d86 <ReadCapacity+0x41e>
#if COMP_SLEW1 > COMP_SLEW2
     if (cap.cval < COMP_SLEW1) {
    2cdc:	c0 90 5a 01 	lds	r12, 0x015A
    2ce0:	d0 90 5b 01 	lds	r13, 0x015B
    2ce4:	e0 90 5c 01 	lds	r14, 0x015C
    2ce8:	f0 90 5d 01 	lds	r15, 0x015D
    2cec:	80 ea       	ldi	r24, 0xA0	; 160
    2cee:	c8 16       	cp	r12, r24
    2cf0:	8f e0       	ldi	r24, 0x0F	; 15
    2cf2:	d8 06       	cpc	r13, r24
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	e8 06       	cpc	r14, r24
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	f8 06       	cpc	r15, r24
    2cfc:	c0 f4       	brcc	.+48     	; 0x2d2e <ReadCapacity+0x3c6>
        // add slew rate dependent offset
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
    2cfe:	a7 01       	movw	r20, r14
    2d00:	96 01       	movw	r18, r12
    2d02:	2c 54       	subi	r18, 0x4C	; 76
    2d04:	3f 4f       	sbci	r19, 0xFF	; 255
    2d06:	4f 4f       	sbci	r20, 0xFF	; 255
    2d08:	5f 4f       	sbci	r21, 0xFF	; 255
    2d0a:	60 ea       	ldi	r22, 0xA0	; 160
    2d0c:	7f e0       	ldi	r23, 0x0F	; 15
    2d0e:	80 e0       	ldi	r24, 0x00	; 0
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
    2d16:	2c 0d       	add	r18, r12
    2d18:	3d 1d       	adc	r19, r13
    2d1a:	4e 1d       	adc	r20, r14
    2d1c:	5f 1d       	adc	r21, r15
    2d1e:	20 93 5a 01 	sts	0x015A, r18
    2d22:	30 93 5b 01 	sts	0x015B, r19
    2d26:	40 93 5c 01 	sts	0x015C, r20
    2d2a:	50 93 5d 01 	sts	0x015D, r21
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2d2e:	80 91 47 01 	lds	r24, 0x0147
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	88 59       	subi	r24, 0x98	; 152
    2d36:	9d 4f       	sbci	r25, 0xFD	; 253
    2d38:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__eerd_byte_m328p>
     if (cap.cval > tmpint) {
    2d3c:	20 91 5a 01 	lds	r18, 0x015A
    2d40:	30 91 5b 01 	lds	r19, 0x015B
    2d44:	40 91 5c 01 	lds	r20, 0x015C
    2d48:	50 91 5d 01 	lds	r21, 0x015D
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
     if (cap.cval > tmpint) {
    2d4e:	a0 e0       	ldi	r26, 0x00	; 0
    2d50:	b0 e0       	ldi	r27, 0x00	; 0
    2d52:	82 17       	cp	r24, r18
    2d54:	93 07       	cpc	r25, r19
    2d56:	a4 07       	cpc	r26, r20
    2d58:	b5 07       	cpc	r27, r21
    2d5a:	68 f4       	brcc	.+26     	; 0x2d76 <ReadCapacity+0x40e>
         cap.cval -= tmpint;		//subtract zero offset (pF)
    2d5c:	28 1b       	sub	r18, r24
    2d5e:	39 0b       	sbc	r19, r25
    2d60:	4a 0b       	sbc	r20, r26
    2d62:	5b 0b       	sbc	r21, r27
    2d64:	20 93 5a 01 	sts	0x015A, r18
    2d68:	30 93 5b 01 	sts	0x015B, r19
    2d6c:	40 93 5c 01 	sts	0x015C, r20
    2d70:	50 93 5d 01 	sts	0x015D, r21
    2d74:	08 c0       	rjmp	.+16     	; 0x2d86 <ReadCapacity+0x41e>
     } else {
         cap.cval = 0;			//unsigned long may not reach negativ value
    2d76:	10 92 5a 01 	sts	0x015A, r1
    2d7a:	10 92 5b 01 	sts	0x015B, r1
    2d7e:	10 92 5c 01 	sts	0x015C, r1
    2d82:	10 92 5d 01 	sts	0x015D, r1
  lcd_testpin(HighPin);
  lcd_space();
  DisplayValue(cap.cval,cap.cpre,'F',4);
  wait3s();
#endif
  R_DDR = HiPinR_L; 		//switch R_L for High-Pin to GND
    2d86:	a4 b8       	out	0x04, r10	; 4
#if F_CPU < 2000001
   if(cap.cval < 50)
#else 
   if(cap.cval < 25)
    2d88:	80 91 5a 01 	lds	r24, 0x015A
    2d8c:	90 91 5b 01 	lds	r25, 0x015B
    2d90:	a0 91 5c 01 	lds	r26, 0x015C
    2d94:	b0 91 5d 01 	lds	r27, 0x015D
    2d98:	89 31       	cpi	r24, 0x19	; 25
    2d9a:	91 05       	cpc	r25, r1
    2d9c:	a1 05       	cpc	r26, r1
    2d9e:	b1 05       	cpc	r27, r1
    2da0:	78 f0       	brcs	.+30     	; 0x2dc0 <ReadCapacity+0x458>
//   if (ovcnt16 > (6 * ((unsigned long)F_CPU/1000000))) {	// above 3 uF
//      GetESR(HighPin,LowPin);
//   }
#endif
checkDiodes:
   if((NumOfDiodes > 0)  && (PartFound != PART_FET)) {
    2da2:	80 91 07 01 	lds	r24, 0x0107
    2da6:	88 23       	and	r24, r24
    2da8:	21 f0       	breq	.+8      	; 0x2db2 <ReadCapacity+0x44a>
    2daa:	80 91 09 01 	lds	r24, 0x0109
    2dae:	83 30       	cpi	r24, 0x03	; 3
    2db0:	39 f4       	brne	.+14     	; 0x2dc0 <ReadCapacity+0x458>
      wait1s();
#endif
      // nearly shure, that there is one or more diodes in reverse direction,
      // which would be wrongly detected as capacitor 
   } else {
      PartFound = PART_CAPACITOR;	//capacitor is found
    2db2:	87 e0       	ldi	r24, 0x07	; 7
    2db4:	80 93 09 01 	sts	0x0109, r24
      cap.ca = LowPin;			// save LowPin
    2db8:	00 93 64 01 	sts	0x0164, r16
      cap.cb = HighPin;		// save HighPin
    2dbc:	10 93 65 01 	sts	0x0165, r17
keinC:
  // discharge capacitor again
//  EntladePins();		// discharge capacitors
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    2dc0:	88 e0       	ldi	r24, 0x08	; 8
    2dc2:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GNG, no pull up
    2dc4:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    2dc6:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    2dc8:	15 b8       	out	0x05, r1	; 5
  return;
 } // end ReadCapacity()
    2dca:	df 91       	pop	r29
    2dcc:	cf 91       	pop	r28
    2dce:	1f 91       	pop	r17
    2dd0:	0f 91       	pop	r16
    2dd2:	ff 90       	pop	r15
    2dd4:	ef 90       	pop	r14
    2dd6:	df 90       	pop	r13
    2dd8:	cf 90       	pop	r12
    2dda:	bf 90       	pop	r11
    2ddc:	af 90       	pop	r10
    2dde:	08 95       	ret

00002de0 <ReadInductance>:

unsigned long CombineII2Long( unsigned int ovcnt16, unsigned int tmpcnt); //tricky function to build unsigned long from two unsigned int values


//=================================================================
void ReadInductance(void) {
    2de0:	2f 92       	push	r2
    2de2:	3f 92       	push	r3
    2de4:	4f 92       	push	r4
    2de6:	5f 92       	push	r5
    2de8:	6f 92       	push	r6
    2dea:	7f 92       	push	r7
    2dec:	8f 92       	push	r8
    2dee:	9f 92       	push	r9
    2df0:	af 92       	push	r10
    2df2:	bf 92       	push	r11
    2df4:	cf 92       	push	r12
    2df6:	df 92       	push	r13
    2df8:	ef 92       	push	r14
    2dfa:	ff 92       	push	r15
    2dfc:	0f 93       	push	r16
    2dfe:	1f 93       	push	r17
    2e00:	df 93       	push	r29
    2e02:	cf 93       	push	r28
    2e04:	cd b7       	in	r28, 0x3d	; 61
    2e06:	de b7       	in	r29, 0x3e	; 62
    2e08:	6c 97       	sbiw	r28, 0x1c	; 28
    2e0a:	0f b6       	in	r0, 0x3f	; 63
    2e0c:	f8 94       	cli
    2e0e:	de bf       	out	0x3e, r29	; 62
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	cd bf       	out	0x3d, r28	; 61
  uint8_t found;	// variable used for searching resistors 
  uint8_t LowPin;	// number of pin with low voltage
  uint8_t HighPin;	// number of pin with high voltage 


  if(PartFound != PART_RESISTOR) {
    2e14:	80 91 09 01 	lds	r24, 0x0109
    2e18:	86 30       	cpi	r24, 0x06	; 6
    2e1a:	09 f0       	breq	.+2      	; 0x2e1e <ReadInductance+0x3e>
    2e1c:	6b c2       	rjmp	.+1238   	; 0x32f4 <ReadInductance+0x514>
    2e1e:	aa 24       	eor	r10, r10
    2e20:	61 c2       	rjmp	.+1218   	; 0x32e4 <ReadInductance+0x504>
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 21000) continue;
    2e22:	2a 2d       	mov	r18, r10
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	3a 8b       	std	Y+18, r19	; 0x12
    2e28:	29 8b       	std	Y+17, r18	; 0x11
    2e2a:	4b e0       	ldi	r20, 0x0B	; 11
    2e2c:	50 e0       	ldi	r21, 0x00	; 0
    2e2e:	24 9f       	mul	r18, r20
    2e30:	f0 01       	movw	r30, r0
    2e32:	25 9f       	mul	r18, r21
    2e34:	f0 0d       	add	r31, r0
    2e36:	34 9f       	mul	r19, r20
    2e38:	f0 0d       	add	r31, r0
    2e3a:	11 24       	eor	r1, r1
    2e3c:	e6 5e       	subi	r30, 0xE6	; 230
    2e3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e40:	80 81       	ld	r24, Z
    2e42:	91 81       	ldd	r25, Z+1	; 0x01
    2e44:	a2 81       	ldd	r26, Z+2	; 0x02
    2e46:	b3 81       	ldd	r27, Z+3	; 0x03
    2e48:	89 30       	cpi	r24, 0x09	; 9
    2e4a:	52 e5       	ldi	r21, 0x52	; 82
    2e4c:	95 07       	cpc	r25, r21
    2e4e:	50 e0       	ldi	r21, 0x00	; 0
    2e50:	a5 07       	cpc	r26, r21
    2e52:	50 e0       	ldi	r21, 0x00	; 0
    2e54:	b5 07       	cpc	r27, r21
    2e56:	08 f0       	brcs	.+2      	; 0x2e5a <ReadInductance+0x7a>
    2e58:	44 c2       	rjmp	.+1160   	; 0x32e2 <ReadInductance+0x502>
    2e5a:	bb 24       	eor	r11, r11
           // first and second pass, direction 1
           LowPin = resis[found].ra;
           HighPin = resis[found].rb;
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    2e5c:	1f 01       	movw	r2, r30
    2e5e:	bf 01       	movw	r22, r30
    2e60:	67 5f       	subi	r22, 0xF7	; 247
    2e62:	7f 4f       	sbci	r23, 0xFF	; 255
    2e64:	78 8f       	std	Y+24, r23	; 0x18
    2e66:	6f 8b       	std	Y+23, r22	; 0x17
           HighPin = resis[found].ra;
    2e68:	cf 01       	movw	r24, r30
    2e6a:	08 96       	adiw	r24, 0x08	; 8
    2e6c:	9a 8f       	std	Y+26, r25	; 0x1a
    2e6e:	89 8f       	std	Y+25, r24	; 0x19
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    2e70:	ab 8e       	std	Y+27, r10	; 0x1b
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 21000) continue;
     // we can check for Inductance, if resistance is below 2800 Ohm
     for (count=0;count<4;count++) {
        // Try four times (different direction and with delayed counter start)
        if (count < 2) {
    2e72:	9b 2d       	mov	r25, r11
    2e74:	92 30       	cpi	r25, 0x02	; 2
    2e76:	30 f4       	brcc	.+12     	; 0x2e84 <ReadInductance+0xa4>
           // first and second pass, direction 1
           LowPin = resis[found].ra;
    2e78:	e9 8d       	ldd	r30, Y+25	; 0x19
    2e7a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2e7c:	e0 80       	ld	r14, Z
           HighPin = resis[found].rb;
    2e7e:	ef 89       	ldd	r30, Y+23	; 0x17
    2e80:	f8 8d       	ldd	r31, Y+24	; 0x18
    2e82:	05 c0       	rjmp	.+10     	; 0x2e8e <ReadInductance+0xae>
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    2e84:	ef 89       	ldd	r30, Y+23	; 0x17
    2e86:	f8 8d       	ldd	r31, Y+24	; 0x18
    2e88:	e0 80       	ld	r14, Z
           HighPin = resis[found].ra;
    2e8a:	e9 8d       	ldd	r30, Y+25	; 0x19
    2e8c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2e8e:	a0 80       	ld	r10, Z
        }
        HiADC = MEM_read_byte(&PinADCtab[HighPin]);
    2e90:	8a 2d       	mov	r24, r10
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	89 5a       	subi	r24, 0xA9	; 169
    2e96:	9d 4f       	sbci	r25, 0xFD	; 253
    2e98:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__eerd_byte_m328p>
    2e9c:	c8 2e       	mov	r12, r24
        LoPinR_L = MEM_read_byte(&PinRLtab[LowPin]);	//R_L mask for HighPin R_L load
    2e9e:	8e 2d       	mov	r24, r14
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	8c 5a       	subi	r24, 0xAC	; 172
    2ea4:	9d 4f       	sbci	r25, 0xFD	; 253
    2ea6:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__eerd_byte_m328p>
        //==================================================================================
        // Measurement of Inductance values
        R_PORT = 0;		// switch R port to GND
    2eaa:	15 b8       	out	0x05, r1	; 5
        ADC_PORT =   TXD_VAL;		// switch ADC-Port to GND
    2eac:	f8 e0       	ldi	r31, 0x08	; 8
    2eae:	f8 b9       	out	0x08, r31	; 8
        if ((resis[found].rx < 240) && ((count & 0x01) == 0)) {
    2eb0:	f1 01       	movw	r30, r2
    2eb2:	20 81       	ld	r18, Z
    2eb4:	31 81       	ldd	r19, Z+1	; 0x01
    2eb6:	42 81       	ldd	r20, Z+2	; 0x02
    2eb8:	53 81       	ldd	r21, Z+3	; 0x03
    2eba:	20 3f       	cpi	r18, 0xF0	; 240
    2ebc:	31 05       	cpc	r19, r1
    2ebe:	41 05       	cpc	r20, r1
    2ec0:	51 05       	cpc	r21, r1
    2ec2:	b8 f4       	brcc	.+46     	; 0x2ef2 <ReadInductance+0x112>
    2ec4:	b0 fc       	sbrc	r11, 0
    2ec6:	15 c0       	rjmp	.+42     	; 0x2ef2 <ReadInductance+0x112>
           // we can use PinR_L for measurement
           mess_r = RR680MI - R_L_VAL;
    2ec8:	80 90 04 01 	lds	r8, 0x0104
    2ecc:	90 90 05 01 	lds	r9, 0x0105
    2ed0:	20 e7       	ldi	r18, 0x70	; 112
    2ed2:	35 ee       	ldi	r19, 0xE5	; 229
    2ed4:	82 0e       	add	r8, r18
    2ed6:	93 1e       	adc	r9, r19
           ADC_DDR = HiADC | (1<<LowPin) | TXD_MSK;	// switch HiADC and Low Pin to GND, 
    2ed8:	2c 2d       	mov	r18, r12
    2eda:	28 60       	ori	r18, 0x08	; 8
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	0e 2c       	mov	r0, r14
    2ee2:	02 c0       	rjmp	.+4      	; 0x2ee8 <ReadInductance+0x108>
    2ee4:	88 0f       	add	r24, r24
    2ee6:	99 1f       	adc	r25, r25
    2ee8:	0a 94       	dec	r0
    2eea:	e2 f7       	brpl	.-8      	; 0x2ee4 <ReadInductance+0x104>
    2eec:	28 2b       	or	r18, r24
    2eee:	27 b9       	out	0x07, r18	; 7
    2ef0:	08 c0       	rjmp	.+16     	; 0x2f02 <ReadInductance+0x122>
        } else {
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
    2ef2:	84 b9       	out	0x04, r24	; 4
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
    2ef4:	8c 2d       	mov	r24, r12
    2ef6:	88 60       	ori	r24, 0x08	; 8
    2ef8:	87 b9       	out	0x07, r24	; 7
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
    2efa:	80 90 04 01 	lds	r8, 0x0104
    2efe:	90 90 05 01 	lds	r9, 0x0105
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    2f02:	40 e0       	ldi	r20, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    2f04:	8e 2d       	mov	r24, r14
    2f06:	4c 8f       	std	Y+28, r20	; 0x1c
    2f08:	0e 94 95 19 	call	0x332a	; 0x332a <W10msReadADC>
    2f0c:	8c 01       	movw	r16, r24
            total_r =  ReadADC(HighPin);
    2f0e:	8a 2d       	mov	r24, r10
    2f10:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    2f14:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2f16:	02 30       	cpi	r16, 0x02	; 2
    2f18:	11 05       	cpc	r17, r1
    2f1a:	18 f4       	brcc	.+6      	; 0x2f22 <ReadInductance+0x142>
    2f1c:	82 30       	cpi	r24, 0x02	; 2
    2f1e:	91 05       	cpc	r25, r1
    2f20:	18 f0       	brcs	.+6      	; 0x2f28 <ReadInductance+0x148>
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    2f22:	4f 5f       	subi	r20, 0xFF	; 255
    2f24:	44 31       	cpi	r20, 0x14	; 20
    2f26:	71 f7       	brne	.-36     	; 0x2f04 <ReadInductance+0x124>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
        // setup Analog Comparator
        ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    2f28:	30 e4       	ldi	r19, 0x40	; 64
    2f2a:	30 93 7b 00 	sts	0x007B, r19
        ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    2f2e:	44 e5       	ldi	r20, 0x54	; 84
    2f30:	40 bf       	out	0x30, r20	; 48
        ADMUX = (1<<REFS0) | LowPin;			// switch Mux to Low-Pin
    2f32:	8e 2d       	mov	r24, r14
    2f34:	80 64       	ori	r24, 0x40	; 64
    2f36:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    2f3a:	56 e1       	ldi	r21, 0x16	; 22
    2f3c:	50 93 7a 00 	sts	0x007A, r21
   
      // setup Counter1
        ovcnt16 = 0;
        TCCR1A = 0;			// set Counter1 to normal Mode
    2f40:	10 92 80 00 	sts	0x0080, r1
        TCNT1 = 0;			//set Counter to 0
    2f44:	10 92 85 00 	sts	0x0085, r1
    2f48:	10 92 84 00 	sts	0x0084, r1
        TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// mega88
    2f4c:	67 e2       	ldi	r22, 0x27	; 39
    2f4e:	66 bb       	out	0x16, r22	; 22
        HiADC |= TXD_VAL;
    2f50:	1c 2d       	mov	r17, r12
    2f52:	18 60       	ori	r17, 0x08	; 8
        wait200us();			// wait for bandgap to start up
    2f54:	0e 94 13 14 	call	0x2826	; 0x2826 <wait200us>
        if ((count & 0x01) == 0 ) {
    2f58:	8b 2d       	mov	r24, r11
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	9c 8b       	std	Y+20, r25	; 0x14
    2f5e:	8b 8b       	std	Y+19, r24	; 0x13
    2f60:	81 70       	andi	r24, 0x01	; 1
    2f62:	90 70       	andi	r25, 0x00	; 0
    2f64:	9e 8b       	std	Y+22, r25	; 0x16
    2f66:	8d 8b       	std	Y+21, r24	; 0x15
    2f68:	9b 89       	ldd	r25, Y+19	; 0x13
    2f6a:	90 fd       	sbrc	r25, 0
    2f6c:	05 c0       	rjmp	.+10     	; 0x2f78 <ReadInductance+0x198>
           //first start counter, then start current
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    2f6e:	e1 e8       	ldi	r30, 0x81	; 129
    2f70:	e0 93 81 00 	sts	0x0081, r30
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    2f74:	18 b9       	out	0x08, r17	; 8
    2f76:	08 c0       	rjmp	.+16     	; 0x2f88 <ReadInductance+0x1a8>
        } else {
           //first start current, then start counter with delay
           //parasitic capacity of coil can cause high current at the beginning
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    2f78:	18 b9       	out	0x08, r17	; 8
      #if F_CPU >= 8000000UL
           wait3us();		// ignore current peak from capacity
    2f7a:	0e 94 1c 14 	call	0x2838	; 0x2838 <wait3us>
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
    2f7e:	f0 e2       	ldi	r31, 0x20	; 32
    2f80:	f6 bb       	out	0x16, r31	; 22
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    2f82:	21 e8       	ldi	r18, 0x81	; 129
    2f84:	20 93 81 00 	sts	0x0081, r18
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    2f88:	cc 24       	eor	r12, r12
    2f8a:	dd 24       	eor	r13, r13
        }
      
      //******************************
        while(1) {
           // Wait, until  Input Capture is set
           ii = TI1_INT_FLAGS;		//read Timer flags
    2f8c:	26 b3       	in	r18, 0x16	; 22
           if (ii & (1<<ICF1))  {
    2f8e:	25 fd       	sbrc	r18, 5
    2f90:	0c c0       	rjmp	.+24     	; 0x2faa <ReadInductance+0x1ca>
              break;
           }
           if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    2f92:	20 ff       	sbrs	r18, 0
    2f94:	fb cf       	rjmp	.-10     	; 0x2f8c <ReadInductance+0x1ac>
              TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    2f96:	31 e0       	ldi	r19, 0x01	; 1
    2f98:	36 bb       	out	0x16, r19	; 22
              wdt_reset();
    2f9a:	a8 95       	wdr
              ovcnt16++;
    2f9c:	08 94       	sec
    2f9e:	c1 1c       	adc	r12, r1
    2fa0:	d1 1c       	adc	r13, r1
              if(ovcnt16 == (F_CPU/100000)) {
    2fa2:	40 e5       	ldi	r20, 0x50	; 80
    2fa4:	c4 16       	cp	r12, r20
    2fa6:	d1 04       	cpc	r13, r1
    2fa8:	89 f7       	brne	.-30     	; 0x2f8c <ReadInductance+0x1ac>
                 break; 	//Timeout for Charging, above 0.13 s
              }
           }
        }
        TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    2faa:	10 92 81 00 	sts	0x0081, r1
        TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    2fae:	50 e2       	ldi	r21, 0x20	; 32
    2fb0:	56 bb       	out	0x16, r21	; 22
        tmpint = ICR1;		// get previous Input Capture Counter flag
    2fb2:	00 91 86 00 	lds	r16, 0x0086
    2fb6:	10 91 87 00 	lds	r17, 0x0087
      // check actual counter, if an additional overflow must be added
        if((TCNT1 > tmpint) && (ii & (1<<TOV1))) {
    2fba:	80 91 84 00 	lds	r24, 0x0084
    2fbe:	90 91 85 00 	lds	r25, 0x0085
    2fc2:	08 17       	cp	r16, r24
    2fc4:	19 07       	cpc	r17, r25
    2fc6:	38 f4       	brcc	.+14     	; 0x2fd6 <ReadInductance+0x1f6>
    2fc8:	20 ff       	sbrs	r18, 0
    2fca:	05 c0       	rjmp	.+10     	; 0x2fd6 <ReadInductance+0x1f6>
           // this OV was not counted, but was before the Input Capture
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    2fcc:	61 e0       	ldi	r22, 0x01	; 1
    2fce:	66 bb       	out	0x16, r22	; 22
           ovcnt16++;
    2fd0:	08 94       	sec
    2fd2:	c1 1c       	adc	r12, r1
    2fd4:	d1 1c       	adc	r13, r1
        }
        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    2fd6:	78 e0       	ldi	r23, 0x08	; 8
    2fd8:	78 b9       	out	0x08, r23	; 8
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    2fda:	86 e9       	ldi	r24, 0x96	; 150
    2fdc:	80 93 7a 00 	sts	0x007A, r24
        for (ii=0;ii<20;ii++) {
    2fe0:	40 e0       	ldi	r20, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    2fe2:	8e 2d       	mov	r24, r14
    2fe4:	4c 8f       	std	Y+28, r20	; 0x1c
    2fe6:	0e 94 95 19 	call	0x332a	; 0x332a <W10msReadADC>
    2fea:	3c 01       	movw	r6, r24
            total_r =  ReadADC(HighPin);
    2fec:	8a 2d       	mov	r24, r10
    2fee:	0e 94 99 19 	call	0x3332	; 0x3332 <ReadADC>
    2ff2:	9c 01       	movw	r18, r24
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    2ff4:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2ff6:	92 e0       	ldi	r25, 0x02	; 2
    2ff8:	69 16       	cp	r6, r25
    2ffa:	71 04       	cpc	r7, r1
    2ffc:	18 f4       	brcc	.+6      	; 0x3004 <ReadInductance+0x224>
    2ffe:	22 30       	cpi	r18, 0x02	; 2
    3000:	31 05       	cpc	r19, r1
    3002:	18 f0       	brcs	.+6      	; 0x300a <ReadInductance+0x22a>
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
           ovcnt16++;
        }
        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
        for (ii=0;ii<20;ii++) {
    3004:	4f 5f       	subi	r20, 0xFF	; 255
    3006:	44 31       	cpi	r20, 0x14	; 20
    3008:	61 f7       	brne	.-40     	; 0x2fe2 <ReadInductance+0x202>
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
        cap.cval = CombineII2Long(ovcnt16, tmpint);
    300a:	c6 01       	movw	r24, r12
    300c:	b8 01       	movw	r22, r16
    300e:	0e 94 21 14 	call	0x2842	; 0x2842 <CombineII2Long>
    3012:	7b 01       	movw	r14, r22
    3014:	8c 01       	movw	r16, r24
    3016:	60 93 5a 01 	sts	0x015A, r22
    301a:	70 93 5b 01 	sts	0x015B, r23
    301e:	80 93 5c 01 	sts	0x015C, r24
    3022:	90 93 5d 01 	sts	0x015D, r25
  #define CNT_ZERO_42 4
  #define CNT_ZERO_720 10
#endif
        // Voltage of comparator in % of umax
        #ifdef AUTO_CAL
        tmpint = (ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset))) ;
    3026:	86 e6       	ldi	r24, 0x66	; 102
    3028:	92 e0       	ldi	r25, 0x02	; 2
    302a:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <__eerd_word_m328p>
    302e:	60 91 41 01 	lds	r22, 0x0141
    3032:	70 91 42 01 	lds	r23, 0x0142
    3036:	68 0f       	add	r22, r24
    3038:	79 1f       	adc	r23, r25
        #else
        tmpint = (ref_mv + REF_C_KORR);
        #endif
        if (mess_r < R_L_VAL) {
    303a:	e0 e9       	ldi	r30, 0x90	; 144
    303c:	8e 16       	cp	r8, r30
    303e:	ea e1       	ldi	r30, 0x1A	; 26
    3040:	9e 06       	cpc	r9, r30
    3042:	a8 f4       	brcc	.+42     	; 0x306e <ReadInductance+0x28e>
           // measurement without 680 Ohm
           if (cap.cval > CNT_ZERO_42) cap.cval -= CNT_ZERO_42;
    3044:	f7 e0       	ldi	r31, 0x07	; 7
    3046:	ef 16       	cp	r14, r31
    3048:	f1 04       	cpc	r15, r1
    304a:	01 05       	cpc	r16, r1
    304c:	11 05       	cpc	r17, r1
    304e:	30 f0       	brcs	.+12     	; 0x305c <ReadInductance+0x27c>
    3050:	d8 01       	movw	r26, r16
    3052:	c7 01       	movw	r24, r14
    3054:	06 97       	sbiw	r24, 0x06	; 6
    3056:	a1 09       	sbc	r26, r1
    3058:	b1 09       	sbc	r27, r1
    305a:	37 c0       	rjmp	.+110    	; 0x30ca <ReadInductance+0x2ea>
           else          cap.cval = 0;
    305c:	10 92 5a 01 	sts	0x015A, r1
    3060:	10 92 5b 01 	sts	0x015B, r1
    3064:	10 92 5c 01 	sts	0x015C, r1
    3068:	10 92 5d 01 	sts	0x015D, r1
    306c:	36 c0       	rjmp	.+108    	; 0x30da <ReadInductance+0x2fa>
        } else {
           // measurement with 680 Ohm resistor
           // if 680 Ohm resistor is used, use REF_L_KORR for correction
           tmpint += REF_L_KORR;
    306e:	6e 5c       	subi	r22, 0xCE	; 206
    3070:	7f 4f       	sbci	r23, 0xFF	; 255
           if (cap.cval > CNT_ZERO_720) cap.cval -= CNT_ZERO_720;
    3072:	28 e0       	ldi	r18, 0x08	; 8
    3074:	e2 16       	cp	r14, r18
    3076:	f1 04       	cpc	r15, r1
    3078:	01 05       	cpc	r16, r1
    307a:	11 05       	cpc	r17, r1
    307c:	70 f0       	brcs	.+28     	; 0x309a <ReadInductance+0x2ba>
    307e:	d8 01       	movw	r26, r16
    3080:	c7 01       	movw	r24, r14
    3082:	07 97       	sbiw	r24, 0x07	; 7
    3084:	a1 09       	sbc	r26, r1
    3086:	b1 09       	sbc	r27, r1
    3088:	80 93 5a 01 	sts	0x015A, r24
    308c:	90 93 5b 01 	sts	0x015B, r25
    3090:	a0 93 5c 01 	sts	0x015C, r26
    3094:	b0 93 5d 01 	sts	0x015D, r27
    3098:	08 c0       	rjmp	.+16     	; 0x30aa <ReadInductance+0x2ca>
           else          cap.cval = 0;
    309a:	10 92 5a 01 	sts	0x015A, r1
    309e:	10 92 5b 01 	sts	0x015B, r1
    30a2:	10 92 5c 01 	sts	0x015C, r1
    30a6:	10 92 5d 01 	sts	0x015D, r1
           if (cap.cval > 12) cap.cval -= 1;
    30aa:	80 91 5a 01 	lds	r24, 0x015A
    30ae:	90 91 5b 01 	lds	r25, 0x015B
    30b2:	a0 91 5c 01 	lds	r26, 0x015C
    30b6:	b0 91 5d 01 	lds	r27, 0x015D
    30ba:	8d 30       	cpi	r24, 0x0D	; 13
    30bc:	91 05       	cpc	r25, r1
    30be:	a1 05       	cpc	r26, r1
    30c0:	b1 05       	cpc	r27, r1
    30c2:	58 f0       	brcs	.+22     	; 0x30da <ReadInductance+0x2fa>
    30c4:	01 97       	sbiw	r24, 0x01	; 1
    30c6:	a1 09       	sbc	r26, r1
    30c8:	b1 09       	sbc	r27, r1
    30ca:	80 93 5a 01 	sts	0x015A, r24
    30ce:	90 93 5b 01 	sts	0x015B, r25
    30d2:	a0 93 5c 01 	sts	0x015C, r26
    30d6:	b0 93 5d 01 	sts	0x015D, r27
        }
        if ((count&0x01) == 1) {
    30da:	4d 89       	ldd	r20, Y+21	; 0x15
    30dc:	5e 89       	ldd	r21, Y+22	; 0x16
    30de:	41 15       	cp	r20, r1
    30e0:	51 05       	cpc	r21, r1
    30e2:	99 f0       	breq	.+38     	; 0x310a <ReadInductance+0x32a>
           // second pass with delayed counter start
           cap.cval += (3 * (F_CPU/1000000))+10;
    30e4:	80 91 5a 01 	lds	r24, 0x015A
    30e8:	90 91 5b 01 	lds	r25, 0x015B
    30ec:	a0 91 5c 01 	lds	r26, 0x015C
    30f0:	b0 91 5d 01 	lds	r27, 0x015D
    30f4:	82 96       	adiw	r24, 0x22	; 34
    30f6:	a1 1d       	adc	r26, r1
    30f8:	b1 1d       	adc	r27, r1
    30fa:	80 93 5a 01 	sts	0x015A, r24
    30fe:	90 93 5b 01 	sts	0x015B, r25
    3102:	a0 93 5c 01 	sts	0x015C, r26
    3106:	b0 93 5d 01 	sts	0x015D, r27
        }
        if (ovcnt16 >= (F_CPU/100000)) cap.cval = 0; // no transition found
    310a:	50 e5       	ldi	r21, 0x50	; 80
    310c:	c5 16       	cp	r12, r21
    310e:	d1 04       	cpc	r13, r1
    3110:	40 f0       	brcs	.+16     	; 0x3122 <ReadInductance+0x342>
    3112:	10 92 5a 01 	sts	0x015A, r1
    3116:	10 92 5b 01 	sts	0x015B, r1
    311a:	10 92 5c 01 	sts	0x015C, r1
    311e:	10 92 5d 01 	sts	0x015D, r1
        total_r = (mess_r + resis[found].rx + RR680PL - R_L_VAL);
    3122:	80 91 0a 01 	lds	r24, 0x010A
    3126:	90 91 0b 01 	lds	r25, 0x010B
    312a:	80 59       	subi	r24, 0x90	; 144
    312c:	9a 41       	sbci	r25, 0x1A	; 26
    312e:	f1 01       	movw	r30, r2
    3130:	20 81       	ld	r18, Z
    3132:	31 81       	ldd	r19, Z+1	; 0x01
    3134:	82 0f       	add	r24, r18
    3136:	93 1f       	adc	r25, r19
    3138:	88 0d       	add	r24, r8
    313a:	99 1d       	adc	r25, r9
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    313c:	2c 01       	movw	r4, r24
    313e:	66 24       	eor	r6, r6
    3140:	77 24       	eor	r7, r7
        per_ref = ((unsigned long)tmpint * 100) / umax;
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	24 e6       	ldi	r18, 0x64	; 100
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	40 e0       	ldi	r20, 0x00	; 0
    314c:	50 e0       	ldi	r21, 0x00	; 0
    314e:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    3152:	7b 01       	movw	r14, r22
    3154:	8c 01       	movw	r16, r24
           cap.cval += (3 * (F_CPU/1000000))+10;
        }
        if (ovcnt16 >= (F_CPU/100000)) cap.cval = 0; // no transition found
        total_r = (mess_r + resis[found].rx + RR680PL - R_L_VAL);
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    3156:	b4 01       	movw	r22, r8
    3158:	80 e0       	ldi	r24, 0x00	; 0
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	20 91 3f 01 	lds	r18, 0x013F
    3160:	30 91 40 01 	lds	r19, 0x0140
    3164:	40 e0       	ldi	r20, 0x00	; 0
    3166:	50 e0       	ldi	r21, 0x00	; 0
    3168:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    316c:	a3 01       	movw	r20, r6
    316e:	92 01       	movw	r18, r4
    3170:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
        per_ref = ((unsigned long)tmpint * 100) / umax;
    3174:	40 e0       	ldi	r20, 0x00	; 0
    3176:	50 e0       	ldi	r21, 0x00	; 0
    3178:	c8 01       	movw	r24, r16
    317a:	b7 01       	movw	r22, r14
    317c:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
        per_ref = (uint8_t)MEM2_read_byte(&LogTab[per_ref]);	// -log(1 - per_ref/100)
    3180:	82 2f       	mov	r24, r18
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	86 5a       	subi	r24, 0xA6	; 166
    3186:	9f 4f       	sbci	r25, 0xFF	; 255
    3188:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__eerd_byte_m328p>
    318c:	18 2f       	mov	r17, r24
        // lx in 0.01mH units,  L = Tau * R
        inductance[count] = (cap.cval * total_r ) / ((unsigned int)per_ref * (F_CPU/1000000));
    318e:	20 91 5a 01 	lds	r18, 0x015A
    3192:	30 91 5b 01 	lds	r19, 0x015B
    3196:	40 91 5c 01 	lds	r20, 0x015C
    319a:	50 91 5d 01 	lds	r21, 0x015D
    319e:	c3 01       	movw	r24, r6
    31a0:	b2 01       	movw	r22, r4
    31a2:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    31a6:	21 2f       	mov	r18, r17
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	40 e0       	ldi	r20, 0x00	; 0
    31ac:	50 e0       	ldi	r21, 0x00	; 0
    31ae:	e3 e0       	ldi	r30, 0x03	; 3
    31b0:	22 0f       	add	r18, r18
    31b2:	33 1f       	adc	r19, r19
    31b4:	44 1f       	adc	r20, r20
    31b6:	55 1f       	adc	r21, r21
    31b8:	ea 95       	dec	r30
    31ba:	d1 f7       	brne	.-12     	; 0x31b0 <ReadInductance+0x3d0>
    31bc:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
    31c0:	eb 89       	ldd	r30, Y+19	; 0x13
    31c2:	fc 89       	ldd	r31, Y+20	; 0x14
    31c4:	ee 0f       	add	r30, r30
    31c6:	ff 1f       	adc	r31, r31
    31c8:	ee 0f       	add	r30, r30
    31ca:	ff 1f       	adc	r31, r31
    31cc:	61 e0       	ldi	r22, 0x01	; 1
    31ce:	70 e0       	ldi	r23, 0x00	; 0
    31d0:	6c 0f       	add	r22, r28
    31d2:	7d 1f       	adc	r23, r29
    31d4:	e6 0f       	add	r30, r22
    31d6:	f7 1f       	adc	r31, r23
    31d8:	20 83       	st	Z, r18
    31da:	31 83       	std	Z+1, r19	; 0x01
    31dc:	42 83       	std	Z+2, r20	; 0x02
    31de:	53 83       	std	Z+3, r21	; 0x03
        if (((count&0x01) == 0) && (inductance[count] > (F_CPU/1000000))) {
    31e0:	8d 89       	ldd	r24, Y+21	; 0x15
    31e2:	9e 89       	ldd	r25, Y+22	; 0x16
    31e4:	00 97       	sbiw	r24, 0x00	; 0
    31e6:	99 f4       	brne	.+38     	; 0x320e <ReadInductance+0x42e>
    31e8:	29 30       	cpi	r18, 0x09	; 9
    31ea:	31 05       	cpc	r19, r1
    31ec:	41 05       	cpc	r20, r1
    31ee:	51 05       	cpc	r21, r1
    31f0:	70 f0       	brcs	.+28     	; 0x320e <ReadInductance+0x42e>
           // transition is found, measurement with delayed counter start is not necessary
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
    31f2:	eb 89       	ldd	r30, Y+19	; 0x13
    31f4:	fc 89       	ldd	r31, Y+20	; 0x14
    31f6:	31 96       	adiw	r30, 0x01	; 1
    31f8:	ee 0f       	add	r30, r30
    31fa:	ff 1f       	adc	r31, r31
    31fc:	ee 0f       	add	r30, r30
    31fe:	ff 1f       	adc	r31, r31
    3200:	e6 0f       	add	r30, r22
    3202:	f7 1f       	adc	r31, r23
    3204:	20 83       	st	Z, r18
    3206:	31 83       	std	Z+1, r19	; 0x01
    3208:	42 83       	std	Z+2, r20	; 0x02
    320a:	53 83       	std	Z+3, r21	; 0x03
           count++;		// skip the delayed measurement
    320c:	b3 94       	inc	r11
        }
        wdt_reset();
    320e:	a8 95       	wdr
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 21000) continue;
     // we can check for Inductance, if resistance is below 2800 Ohm
     for (count=0;count<4;count++) {
    3210:	b3 94       	inc	r11
    3212:	9b 2d       	mov	r25, r11
    3214:	94 30       	cpi	r25, 0x04	; 4
    3216:	08 f4       	brcc	.+2      	; 0x321a <ReadInductance+0x43a>
    3218:	2c ce       	rjmp	.-936    	; 0x2e72 <ReadInductance+0x92>
    321a:	ab 8c       	ldd	r10, Y+27	; 0x1b
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
           count++;		// skip the delayed measurement
        }
        wdt_reset();
     }  //end for count
     ADC_PORT = TXD_VAL;		// switch ADC Port to GND
    321c:	e8 e0       	ldi	r30, 0x08	; 8
    321e:	e8 b9       	out	0x08, r30	; 8
     wait20ms();
    3220:	0e 94 09 14 	call	0x2812	; 0x2812 <wait20ms>
     if (inductance[1] > inductance[0]) {
    3224:	2d 81       	ldd	r18, Y+5	; 0x05
    3226:	3e 81       	ldd	r19, Y+6	; 0x06
    3228:	4f 81       	ldd	r20, Y+7	; 0x07
    322a:	58 85       	ldd	r21, Y+8	; 0x08
    322c:	89 81       	ldd	r24, Y+1	; 0x01
    322e:	9a 81       	ldd	r25, Y+2	; 0x02
    3230:	ab 81       	ldd	r26, Y+3	; 0x03
    3232:	bc 81       	ldd	r27, Y+4	; 0x04
    3234:	82 17       	cp	r24, r18
    3236:	93 07       	cpc	r25, r19
    3238:	a4 07       	cpc	r26, r20
    323a:	b5 07       	cpc	r27, r21
    323c:	90 f4       	brcc	.+36     	; 0x3262 <ReadInductance+0x482>
        resis[found].lx = inductance[1];	// use value found with delayed counter start
    323e:	69 89       	ldd	r22, Y+17	; 0x11
    3240:	7a 89       	ldd	r23, Y+18	; 0x12
    3242:	8b e0       	ldi	r24, 0x0B	; 11
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	68 9f       	mul	r22, r24
    3248:	f0 01       	movw	r30, r0
    324a:	69 9f       	mul	r22, r25
    324c:	f0 0d       	add	r31, r0
    324e:	78 9f       	mul	r23, r24
    3250:	f0 0d       	add	r31, r0
    3252:	11 24       	eor	r1, r1
    3254:	e6 5e       	subi	r30, 0xE6	; 230
    3256:	fe 4f       	sbci	r31, 0xFE	; 254
    3258:	24 83       	std	Z+4, r18	; 0x04
    325a:	35 83       	std	Z+5, r19	; 0x05
    325c:	46 83       	std	Z+6, r20	; 0x06
    325e:	57 83       	std	Z+7, r21	; 0x07
    3260:	11 c0       	rjmp	.+34     	; 0x3284 <ReadInductance+0x4a4>
     } else {
        resis[found].lx = inductance[0];
    3262:	29 89       	ldd	r18, Y+17	; 0x11
    3264:	3a 89       	ldd	r19, Y+18	; 0x12
    3266:	4b e0       	ldi	r20, 0x0B	; 11
    3268:	50 e0       	ldi	r21, 0x00	; 0
    326a:	24 9f       	mul	r18, r20
    326c:	f0 01       	movw	r30, r0
    326e:	25 9f       	mul	r18, r21
    3270:	f0 0d       	add	r31, r0
    3272:	34 9f       	mul	r19, r20
    3274:	f0 0d       	add	r31, r0
    3276:	11 24       	eor	r1, r1
    3278:	e6 5e       	subi	r30, 0xE6	; 230
    327a:	fe 4f       	sbci	r31, 0xFE	; 254
    327c:	84 83       	std	Z+4, r24	; 0x04
    327e:	95 83       	std	Z+5, r25	; 0x05
    3280:	a6 83       	std	Z+6, r26	; 0x06
    3282:	b7 83       	std	Z+7, r27	; 0x07
     }
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];
    3284:	8d 85       	ldd	r24, Y+13	; 0x0d
    3286:	9e 85       	ldd	r25, Y+14	; 0x0e
    3288:	af 85       	ldd	r26, Y+15	; 0x0f
    328a:	b8 89       	ldd	r27, Y+16	; 0x10
    328c:	29 85       	ldd	r18, Y+9	; 0x09
    328e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3290:	4b 85       	ldd	r20, Y+11	; 0x0b
    3292:	5c 85       	ldd	r21, Y+12	; 0x0c
    3294:	28 17       	cp	r18, r24
    3296:	39 07       	cpc	r19, r25
    3298:	4a 07       	cpc	r20, r26
    329a:	5b 07       	cpc	r21, r27
    329c:	20 f4       	brcc	.+8      	; 0x32a6 <ReadInductance+0x4c6>
    329e:	89 87       	std	Y+9, r24	; 0x09
    32a0:	9a 87       	std	Y+10, r25	; 0x0a
    32a2:	ab 87       	std	Y+11, r26	; 0x0b
    32a4:	bc 87       	std	Y+12, r27	; 0x0c
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
    32a6:	89 85       	ldd	r24, Y+9	; 0x09
    32a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32aa:	ab 85       	ldd	r26, Y+11	; 0x0b
    32ac:	bc 85       	ldd	r27, Y+12	; 0x0c
    32ae:	69 89       	ldd	r22, Y+17	; 0x11
    32b0:	7a 89       	ldd	r23, Y+18	; 0x12
    32b2:	2b e0       	ldi	r18, 0x0B	; 11
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	62 9f       	mul	r22, r18
    32b8:	f0 01       	movw	r30, r0
    32ba:	63 9f       	mul	r22, r19
    32bc:	f0 0d       	add	r31, r0
    32be:	72 9f       	mul	r23, r18
    32c0:	f0 0d       	add	r31, r0
    32c2:	11 24       	eor	r1, r1
    32c4:	e6 5e       	subi	r30, 0xE6	; 230
    32c6:	fe 4f       	sbci	r31, 0xFE	; 254
    32c8:	24 81       	ldd	r18, Z+4	; 0x04
    32ca:	35 81       	ldd	r19, Z+5	; 0x05
    32cc:	46 81       	ldd	r20, Z+6	; 0x06
    32ce:	57 81       	ldd	r21, Z+7	; 0x07
    32d0:	82 17       	cp	r24, r18
    32d2:	93 07       	cpc	r25, r19
    32d4:	a4 07       	cpc	r26, r20
    32d6:	b5 07       	cpc	r27, r21
    32d8:	20 f4       	brcc	.+8      	; 0x32e2 <ReadInductance+0x502>
    32da:	84 83       	std	Z+4, r24	; 0x04
    32dc:	95 83       	std	Z+5, r25	; 0x05
    32de:	a6 83       	std	Z+6, r26	; 0x06
    32e0:	b7 83       	std	Z+7, r27	; 0x07


  if(PartFound != PART_RESISTOR) {
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
    32e2:	a3 94       	inc	r10
    32e4:	80 91 57 01 	lds	r24, 0x0157
    32e8:	a8 16       	cp	r10, r24
    32ea:	08 f4       	brcc	.+2      	; 0x32ee <ReadInductance+0x50e>
    32ec:	9a cd       	rjmp	.-1228   	; 0x2e22 <ReadInductance+0x42>
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
  } // end loop for all resistors

  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    32ee:	88 e0       	ldi	r24, 0x08	; 8
    32f0:	87 b9       	out	0x07, r24	; 7
  R_DDR = 0;			// switch all resistor ports to input
    32f2:	14 b8       	out	0x04, r1	; 4
#endif
  return;
 } // end ReadInductance()
    32f4:	6c 96       	adiw	r28, 0x1c	; 28
    32f6:	0f b6       	in	r0, 0x3f	; 63
    32f8:	f8 94       	cli
    32fa:	de bf       	out	0x3e, r29	; 62
    32fc:	0f be       	out	0x3f, r0	; 63
    32fe:	cd bf       	out	0x3d, r28	; 61
    3300:	cf 91       	pop	r28
    3302:	df 91       	pop	r29
    3304:	1f 91       	pop	r17
    3306:	0f 91       	pop	r16
    3308:	ff 90       	pop	r15
    330a:	ef 90       	pop	r14
    330c:	df 90       	pop	r13
    330e:	cf 90       	pop	r12
    3310:	bf 90       	pop	r11
    3312:	af 90       	pop	r10
    3314:	9f 90       	pop	r9
    3316:	8f 90       	pop	r8
    3318:	7f 90       	pop	r7
    331a:	6f 90       	pop	r6
    331c:	5f 90       	pop	r5
    331e:	4f 90       	pop	r4
    3320:	3f 90       	pop	r3
    3322:	2f 90       	pop	r2
    3324:	08 95       	ret

00003326 <W20msReadADC>:
    3326:	0e 94 0a 14 	call	0x2814	; 0x2814 <wait10ms>

0000332a <W10msReadADC>:
    332a:	0e 94 0b 14 	call	0x2816	; 0x2816 <wait5ms>

0000332e <W5msReadADC>:
    332e:	0e 94 0b 14 	call	0x2816	; 0x2816 <wait5ms>

00003332 <ReadADC>:
    3332:	1f 93       	push	r17
    3334:	18 2f       	mov	r17, r24
    3336:	10 64       	ori	r17, 0x40	; 64

00003338 <get_sample>:
    3338:	10 93 7c 00 	sts	0x007C, r17
    333c:	e1 2f       	mov	r30, r17
    333e:	e0 78       	andi	r30, 0x80	; 128
    3340:	80 91 3c 01 	lds	r24, 0x013C
    3344:	e8 17       	cp	r30, r24
    3346:	69 f0       	breq	.+26     	; 0x3362 <r2aa2>
    3348:	0e 94 14 14 	call	0x2828	; 0x2828 <wait100us>
    334c:	80 91 7a 00 	lds	r24, 0x007A
    3350:	80 64       	ori	r24, 0x40	; 64
    3352:	80 93 7a 00 	sts	0x007A, r24

00003356 <wadc1>:
    3356:	80 91 7a 00 	lds	r24, 0x007A
    335a:	86 fd       	sbrc	r24, 6
    335c:	fc cf       	rjmp	.-8      	; 0x3356 <wadc1>
    335e:	e0 93 3c 01 	sts	0x013C, r30

00003362 <r2aa2>:
    3362:	20 e0       	ldi	r18, 0x00	; 0
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	a9 01       	movw	r20, r18
    3368:	e0 e0       	ldi	r30, 0x00	; 0
    336a:	20 c0       	rjmp	.+64     	; 0x33ac <r2ae8>

0000336c <Loop>:
    336c:	80 91 7a 00 	lds	r24, 0x007A
    3370:	80 64       	ori	r24, 0x40	; 64
    3372:	80 93 7a 00 	sts	0x007A, r24

00003376 <wadc2>:
    3376:	80 91 7a 00 	lds	r24, 0x007A
    337a:	86 fd       	sbrc	r24, 6
    337c:	fc cf       	rjmp	.-8      	; 0x3376 <wadc2>
    337e:	60 91 78 00 	lds	r22, 0x0078
    3382:	70 91 79 00 	lds	r23, 0x0079
    3386:	26 0f       	add	r18, r22
    3388:	37 1f       	adc	r19, r23
    338a:	41 1d       	adc	r20, r1
    338c:	51 1d       	adc	r21, r1
    338e:	e4 30       	cpi	r30, 0x04	; 4
    3390:	61 f4       	brne	.+24     	; 0x33aa <r2ae6>
    3392:	80 91 3e 01 	lds	r24, 0x013E
    3396:	80 30       	cpi	r24, 0x00	; 0
    3398:	41 f0       	breq	.+16     	; 0x33aa <r2ae6>
    339a:	84 e0       	ldi	r24, 0x04	; 4
    339c:	20 30       	cpi	r18, 0x00	; 0
    339e:	38 07       	cpc	r19, r24
    33a0:	20 f4       	brcc	.+8      	; 0x33aa <r2ae6>
    33a2:	17 fd       	sbrc	r17, 7
    33a4:	02 c0       	rjmp	.+4      	; 0x33aa <r2ae6>
    33a6:	10 68       	ori	r17, 0x80	; 128
    33a8:	c7 cf       	rjmp	.-114    	; 0x3338 <get_sample>

000033aa <r2ae6>:
    33aa:	ef 5f       	subi	r30, 0xFF	; 255

000033ac <r2ae8>:
    33ac:	80 91 3b 01 	lds	r24, 0x013B
    33b0:	e8 17       	cp	r30, r24
    33b2:	e0 f2       	brcs	.-72     	; 0x336c <Loop>
    33b4:	17 ff       	sbrs	r17, 7
    33b6:	05 c0       	rjmp	.+10     	; 0x33c2 <r2afe>
    33b8:	60 91 3d 01 	lds	r22, 0x013D
    33bc:	70 91 3e 01 	lds	r23, 0x013E
    33c0:	04 c0       	rjmp	.+8      	; 0x33ca <r2b02>

000033c2 <r2afe>:
    33c2:	60 91 3f 01 	lds	r22, 0x013F
    33c6:	70 91 40 01 	lds	r23, 0x0140

000033ca <r2b02>:
    33ca:	80 e0       	ldi	r24, 0x00	; 0
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    33d2:	2f ef       	ldi	r18, 0xFF	; 255
    33d4:	33 e0       	ldi	r19, 0x03	; 3
    33d6:	41 e0       	ldi	r20, 0x01	; 1
    33d8:	62 0f       	add	r22, r18
    33da:	74 1f       	adc	r23, r20
    33dc:	81 1d       	adc	r24, r1
    33de:	91 1d       	adc	r25, r1
    33e0:	40 e0       	ldi	r20, 0x00	; 0
    33e2:	50 e0       	ldi	r21, 0x00	; 0
    33e4:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
    33e8:	b9 01       	movw	r22, r18
    33ea:	ca 01       	movw	r24, r20
    33ec:	20 91 3b 01 	lds	r18, 0x013B
    33f0:	32 2f       	mov	r19, r18
    33f2:	35 95       	asr	r19
    33f4:	63 0f       	add	r22, r19
    33f6:	71 1d       	adc	r23, r1
    33f8:	81 1d       	adc	r24, r1
    33fa:	91 1d       	adc	r25, r1
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	40 e0       	ldi	r20, 0x00	; 0
    3400:	50 e0       	ldi	r21, 0x00	; 0
    3402:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
    3406:	c9 01       	movw	r24, r18
    3408:	1f 91       	pop	r17
    340a:	08 95       	ret

0000340c <GetESR>:
#include "Transistortester.h"

#define MAX_CNT 128

//=================================================================
void GetESR() {
    340c:	2f 92       	push	r2
    340e:	3f 92       	push	r3
    3410:	4f 92       	push	r4
    3412:	5f 92       	push	r5
    3414:	6f 92       	push	r6
    3416:	7f 92       	push	r7
    3418:	8f 92       	push	r8
    341a:	9f 92       	push	r9
    341c:	af 92       	push	r10
    341e:	bf 92       	push	r11
    3420:	cf 92       	push	r12
    3422:	df 92       	push	r13
    3424:	ef 92       	push	r14
    3426:	ff 92       	push	r15
    3428:	0f 93       	push	r16
    342a:	1f 93       	push	r17
    342c:	df 93       	push	r29
    342e:	cf 93       	push	r28
    3430:	cd b7       	in	r28, 0x3d	; 61
    3432:	de b7       	in	r29, 0x3e	; 62
    3434:	60 97       	sbiw	r28, 0x10	; 16
    3436:	0f b6       	in	r0, 0x3f	; 63
    3438:	f8 94       	cli
    343a:	de bf       	out	0x3e, r29	; 62
    343c:	0f be       	out	0x3f, r0	; 63
    343e:	cd bf       	out	0x3d, r28	; 61
   esr0 = (int8_t)eeprom_read_byte(&EE_ESR_ZERO);
   sumvolt[0] += (((long)sumvolt[0] * esr0) / ((RR680MI - R_L_VAL) * 10)); // subtract 0.23 Ohm from ESR
   if (sumvolt[1] > sumvolt[0]) {
      sumvolt[1] -= sumvolt[0];		// difference HighPin - LowPin Voltage with current
   } else {
      sumvolt[1] = 0;
    3440:	20 91 5a 01 	lds	r18, 0x015A
    3444:	30 91 5b 01 	lds	r19, 0x015B
    3448:	40 91 5c 01 	lds	r20, 0x015C
    344c:	50 91 5d 01 	lds	r21, 0x015D
    3450:	10 91 66 01 	lds	r17, 0x0166
  uint8_t LoADC;		// used to switch Lowpin directly to GND or VCC
  uint8_t ii,jj;		// tempory values
  int8_t esr0;			// used for ESR zero correction

  while (cap.cpre < -9) { // set cval to nF unit
      cap.cval /= 10;		// reduce value by factor ten
    3454:	6a e0       	ldi	r22, 0x0A	; 10
    3456:	a6 2e       	mov	r10, r22
    3458:	b1 2c       	mov	r11, r1
    345a:	c1 2c       	mov	r12, r1
    345c:	d1 2c       	mov	r13, r1
  uint8_t LoPinR_L;		// used to switch 680 Ohm to LowPin
  uint8_t LoADC;		// used to switch Lowpin directly to GND or VCC
  uint8_t ii,jj;		// tempory values
  int8_t esr0;			// used for ESR zero correction

  while (cap.cpre < -9) { // set cval to nF unit
    345e:	07 c0       	rjmp	.+14     	; 0x346e <GetESR+0x62>
      cap.cval /= 10;		// reduce value by factor ten
    3460:	ca 01       	movw	r24, r20
    3462:	b9 01       	movw	r22, r18
    3464:	a6 01       	movw	r20, r12
    3466:	95 01       	movw	r18, r10
    3468:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
    346c:	1f 5f       	subi	r17, 0xFF	; 255
  uint8_t LoPinR_L;		// used to switch 680 Ohm to LowPin
  uint8_t LoADC;		// used to switch Lowpin directly to GND or VCC
  uint8_t ii,jj;		// tempory values
  int8_t esr0;			// used for ESR zero correction

  while (cap.cpre < -9) { // set cval to nF unit
    346e:	17 3f       	cpi	r17, 0xF7	; 247
    3470:	bc f3       	brlt	.-18     	; 0x3460 <GetESR+0x54>
    3472:	20 93 5a 01 	sts	0x015A, r18
    3476:	30 93 5b 01 	sts	0x015B, r19
    347a:	40 93 5c 01 	sts	0x015C, r20
    347e:	50 93 5d 01 	sts	0x015D, r21
    3482:	10 93 66 01 	sts	0x0166, r17
      cap.cval /= 10;		// reduce value by factor ten
      cap.cpre++;		// take next decimal prefix
  }
  if (cap.cval < 1800) return;			//capacity lower than 1.8 uF
    3486:	28 30       	cpi	r18, 0x08	; 8
    3488:	67 e0       	ldi	r22, 0x07	; 7
    348a:	36 07       	cpc	r19, r22
    348c:	60 e0       	ldi	r22, 0x00	; 0
    348e:	46 07       	cpc	r20, r22
    3490:	60 e0       	ldi	r22, 0x00	; 0
    3492:	56 07       	cpc	r21, r22
    3494:	08 f4       	brcc	.+2      	; 0x3498 <GetESR+0x8c>
    3496:	21 c2       	rjmp	.+1090   	; 0x38da <GetESR+0x4ce>
  lcd_fix_string(ESR_str);		// " ESR="
    3498:	8b ea       	ldi	r24, 0xAB	; 171
    349a:	91 e0       	ldi	r25, 0x01	; 1
    349c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_fix_string>
  LoADC = MEM_read_byte(&PinADCtab[cap.ca]) | TXD_MSK;
    34a0:	00 91 64 01 	lds	r16, 0x0164
    34a4:	10 e0       	ldi	r17, 0x00	; 0
    34a6:	c8 01       	movw	r24, r16
    34a8:	89 5a       	subi	r24, 0xA9	; 169
    34aa:	9d 4f       	sbci	r25, 0xFD	; 253
    34ac:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__eerd_byte_m328p>
    34b0:	98 e0       	ldi	r25, 0x08	; 8
    34b2:	c9 2e       	mov	r12, r25
    34b4:	c8 2a       	or	r12, r24
  HiADC = MEM_read_byte(&PinADCtab[cap.cb]) | TXD_MSK;
    34b6:	80 91 65 01 	lds	r24, 0x0165
    34ba:	e8 2e       	mov	r14, r24
    34bc:	ff 24       	eor	r15, r15
    34be:	c7 01       	movw	r24, r14
    34c0:	89 5a       	subi	r24, 0xA9	; 169
    34c2:	9d 4f       	sbci	r25, 0xFD	; 253
    34c4:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__eerd_byte_m328p>
    34c8:	b8 e0       	ldi	r27, 0x08	; 8
    34ca:	bb 2e       	mov	r11, r27
    34cc:	b8 2a       	or	r11, r24
  LoPinR_L = MEM_read_byte(&PinRLtab[cap.ca]);  //R_L mask for LowPin R_L load
    34ce:	c8 01       	movw	r24, r16
    34d0:	8c 5a       	subi	r24, 0xAC	; 172
    34d2:	9d 4f       	sbci	r25, 0xFD	; 253
    34d4:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__eerd_byte_m328p>
    34d8:	a8 2e       	mov	r10, r24
  HiPinR_L = MEM_read_byte(&PinRLtab[cap.cb]);	//R_L mask for HighPin R_L load
    34da:	c7 01       	movw	r24, r14
    34dc:	8c 5a       	subi	r24, 0xAC	; 172
    34de:	9d 4f       	sbci	r25, 0xFD	; 253
    34e0:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__eerd_byte_m328p>
    34e4:	d8 2e       	mov	r13, r24
// Measurement of ESR of capacitors AC Mode
   sumvolt[0] = 1;		// set sum of LowPin voltage to 1 to prevent divide by zero
   sumvolt[1] = 1;		// clear sum of HighPin voltage with current
                                // offset is about (x*10*200)/34000 in 0.01 Ohm units
   sumvolt[2] = 0;		// clear sum of HighPin voltage without current
   EntladePins();	// discharge capacitor
    34e6:	0e 94 17 08 	call	0x102e	; 0x102e <EntladePins>
   ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    34ea:	88 e0       	ldi	r24, 0x08	; 8
    34ec:	88 b9       	out	0x08, r24	; 8
  LoPinR_L = MEM_read_byte(&PinRLtab[cap.ca]);  //R_L mask for LowPin R_L load
  HiPinR_L = MEM_read_byte(&PinRLtab[cap.cb]);	//R_L mask for HighPin R_L load


// Measurement of ESR of capacitors AC Mode
   sumvolt[0] = 1;		// set sum of LowPin voltage to 1 to prevent divide by zero
    34ee:	a1 e0       	ldi	r26, 0x01	; 1
    34f0:	ea 2e       	mov	r14, r26
    34f2:	f1 2c       	mov	r15, r1
    34f4:	01 2d       	mov	r16, r1
    34f6:	11 2d       	mov	r17, r1
   sumvolt[1] = 1;		// clear sum of HighPin voltage with current
    34f8:	81 e0       	ldi	r24, 0x01	; 1
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	a0 e0       	ldi	r26, 0x00	; 0
    34fe:	b0 e0       	ldi	r27, 0x00	; 0
    3500:	89 83       	std	Y+1, r24	; 0x01
    3502:	9a 83       	std	Y+2, r25	; 0x02
    3504:	ab 83       	std	Y+3, r26	; 0x03
    3506:	bc 83       	std	Y+4, r27	; 0x04
                                // offset is about (x*10*200)/34000 in 0.01 Ohm units
   sumvolt[2] = 0;		// clear sum of HighPin voltage without current
    3508:	1d 82       	std	Y+5, r1	; 0x05
    350a:	1e 82       	std	Y+6, r1	; 0x06
    350c:	1f 82       	std	Y+7, r1	; 0x07
    350e:	18 86       	std	Y+8, r1	; 0x08
   EntladePins();	// discharge capacitor
   ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
// measurement frequency is given by sum of ADC-Reads < 680 Hz
   // ADC Sample and Hold (SH) is done 1.5 ADC clock number after starting 
   for(ii=0;ii<MAX_CNT;ii++) {
    3510:	66 24       	eor	r6, r6
      ADC_DDR = LoADC;				// switch Low-Pin to output (GND)
    3512:	c7 b8       	out	0x07, r12	; 7
       ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);	// switch ADC to LowPin, Internal Ref. 
    3514:	80 91 64 01 	lds	r24, 0x0164
    3518:	80 6c       	ori	r24, 0xC0	; 192
    351a:	80 93 7c 00 	sts	0x007C, r24
       ADCSRA |= (1<<ADSC);				// Start Conversion
    351e:	80 91 7a 00 	lds	r24, 0x007A
    3522:	80 64       	ori	r24, 0x40	; 64
    3524:	80 93 7a 00 	sts	0x007A, r24
       while (ADCSRA&(1<<ADSC));	// wait dummy read , sync with ADC-clock
    3528:	80 91 7a 00 	lds	r24, 0x007A
    352c:	86 fd       	sbrc	r24, 6
    352e:	fc cf       	rjmp	.-8      	; 0x3528 <GetESR+0x11c>
      while (1) {
         R_PORT = HiPinR_L;			// switch R-Port to VCC
    3530:	d5 b8       	out	0x05, r13	; 5
         R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (VCC)
    3532:	d4 b8       	out	0x04, r13	; 4
          ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);      // switch ADC to LowPin, Internal Ref. 
    3534:	80 91 64 01 	lds	r24, 0x0164
    3538:	80 6c       	ori	r24, 0xC0	; 192
    353a:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    353e:	80 91 7a 00 	lds	r24, 0x007A
    3542:	80 64       	ori	r24, 0x40	; 64
    3544:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    3548:	80 91 7a 00 	lds	r24, 0x007A
    354c:	86 fd       	sbrc	r24, 6
    354e:	fc cf       	rjmp	.-8      	; 0x3548 <GetESR+0x13c>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    3550:	80 91 7a 00 	lds	r24, 0x007A
    3554:	80 64       	ori	r24, 0x40	; 64
    3556:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    355a:	80 91 7a 00 	lds	r24, 0x007A
    355e:	86 fd       	sbrc	r24, 6
    3560:	fc cf       	rjmp	.-8      	; 0x355a <GetESR+0x14e>
         adcv[0] = ADCW;			// Voltage LowPin with current
    3562:	20 90 78 00 	lds	r2, 0x0078
    3566:	30 90 79 00 	lds	r3, 0x0079
          ADMUX = cap.cb | (1<<REFS1) | (1<<REFS0);      // switch ADC to HighPin, Internal Ref. 
    356a:	80 91 65 01 	lds	r24, 0x0165
    356e:	80 6c       	ori	r24, 0xC0	; 192
    3570:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    3574:	80 91 7a 00 	lds	r24, 0x007A
    3578:	80 64       	ori	r24, 0x40	; 64
    357a:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    357e:	80 91 7a 00 	lds	r24, 0x007A
    3582:	86 fd       	sbrc	r24, 6
    3584:	fc cf       	rjmp	.-8      	; 0x357e <GetESR+0x172>
         ADCSRA |= (1<<ADSC);			// Start Conversion, real start is rising edge of ADC clock
    3586:	80 91 7a 00 	lds	r24, 0x007A
    358a:	80 64       	ori	r24, 0x40	; 64
    358c:	80 93 7a 00 	sts	0x007A, r24
         wait10us();				// 2.5 ADC clocks = 20 us
    3590:	0e 94 19 14 	call	0x2832	; 0x2832 <wait10us>
         wait5us();			
    3594:	0e 94 1a 14 	call	0x2834	; 0x2834 <wait5us>
         wait3us();				// with only 17 us delay the voltage goes down before SH
    3598:	0e 94 1c 14 	call	0x2838	; 0x2838 <wait3us>
         wdt_reset();
    359c:	a8 95       	wdr
         wdt_reset();
    359e:	a8 95       	wdr
         wdt_reset();
    35a0:	a8 95       	wdr
         wdt_reset();
    35a2:	a8 95       	wdr
         wdt_reset();
    35a4:	a8 95       	wdr
         wdt_reset();
    35a6:	a8 95       	wdr
//         wdt_reset();				// with wdt_reset the timing can be adjusted,
						// when time is too short, voltage is down before SH of ADC
						// when time is too long, capacitor will be overloaded.
						// That will cause too high voltage without current.
         R_DDR = 0;				// switch current off,  SH is 1.5 ADC clock behind start
    35a8:	14 b8       	out	0x04, r1	; 4
         while (ADCSRA&(1<<ADSC));		// wait for conversion finished
    35aa:	80 91 7a 00 	lds	r24, 0x007A
    35ae:	86 fd       	sbrc	r24, 6
    35b0:	fc cf       	rjmp	.-8      	; 0x35aa <GetESR+0x19e>
         adcv[1] = ADCW;			// Voltage HighPin with current
    35b2:	20 91 78 00 	lds	r18, 0x0078
    35b6:	30 91 79 00 	lds	r19, 0x0079
         R_PORT = 0;
    35ba:	15 b8       	out	0x05, r1	; 5
          ADCSRA |= (1<<ADSC);			// Start Conversion
    35bc:	80 91 7a 00 	lds	r24, 0x007A
    35c0:	80 64       	ori	r24, 0x40	; 64
    35c2:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read
    35c6:	80 91 7a 00 	lds	r24, 0x007A
    35ca:	86 fd       	sbrc	r24, 6
    35cc:	fc cf       	rjmp	.-8      	; 0x35c6 <GetESR+0x1ba>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    35ce:	80 91 7a 00 	lds	r24, 0x007A
    35d2:	80 64       	ori	r24, 0x40	; 64
    35d4:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    35d8:	80 91 7a 00 	lds	r24, 0x007A
    35dc:	86 fd       	sbrc	r24, 6
    35de:	fc cf       	rjmp	.-8      	; 0x35d8 <GetESR+0x1cc>
         adcv[2] = ADCW;			// Voltage HighPin without current
    35e0:	80 91 78 00 	lds	r24, 0x0078
    35e4:	90 91 79 00 	lds	r25, 0x0079
         if (adcv[2] > 2) break;
    35e8:	83 30       	cpi	r24, 0x03	; 3
    35ea:	91 05       	cpc	r25, r1
    35ec:	10 f4       	brcc	.+4      	; 0x35f2 <GetESR+0x1e6>
         wdt_reset();
    35ee:	a8 95       	wdr
      }
    35f0:	9f cf       	rjmp	.-194    	; 0x3530 <GetESR+0x124>
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
    35f2:	44 24       	eor	r4, r4
    35f4:	55 24       	eor	r5, r5
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    35f6:	a9 01       	movw	r20, r18
    35f8:	60 e0       	ldi	r22, 0x00	; 0
    35fa:	70 e0       	ldi	r23, 0x00	; 0
    35fc:	49 87       	std	Y+9, r20	; 0x09
    35fe:	5a 87       	std	Y+10, r21	; 0x0a
    3600:	6b 87       	std	Y+11, r22	; 0x0b
    3602:	7c 87       	std	Y+12, r23	; 0x0c
      sumvolt[2] += adcv[2]; 			// capacitor voltage without current
    3604:	9c 01       	movw	r18, r24
    3606:	40 e0       	ldi	r20, 0x00	; 0
    3608:	50 e0       	ldi	r21, 0x00	; 0
    360a:	2d 87       	std	Y+13, r18	; 0x0d
    360c:	3e 87       	std	Y+14, r19	; 0x0e
    360e:	4f 87       	std	Y+15, r20	; 0x0f
    3610:	58 8b       	std	Y+16, r21	; 0x10
      ADC_DDR = HiADC;				// switch High Pin to GND
    3612:	b7 b8       	out	0x07, r11	; 7
       ADCSRA |= (1<<ADSC);			// Start Conversion
    3614:	80 91 7a 00 	lds	r24, 0x007A
    3618:	80 64       	ori	r24, 0x40	; 64
    361a:	80 93 7a 00 	sts	0x007A, r24
       while (ADCSRA&(1<<ADSC));		// wait dummy read
    361e:	80 91 7a 00 	lds	r24, 0x007A
    3622:	86 fd       	sbrc	r24, 6
    3624:	fc cf       	rjmp	.-8      	; 0x361e <GetESR+0x212>
      while (1) {
         R_PORT = LoPinR_L;
    3626:	a5 b8       	out	0x05, r10	; 5
         R_DDR = LoPinR_L;			// switch LowPin with 680 Ohm to VCC
    3628:	a4 b8       	out	0x04, r10	; 4
         wdt_reset();
    362a:	a8 95       	wdr
          ADMUX = cap.cb | (1<<REFS1) | (1<<REFS0);      // switch ADC to HighPin, Internal Ref. 
    362c:	80 91 65 01 	lds	r24, 0x0165
    3630:	80 6c       	ori	r24, 0xC0	; 192
    3632:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    3636:	80 91 7a 00 	lds	r24, 0x007A
    363a:	80 64       	ori	r24, 0x40	; 64
    363c:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    3640:	80 91 7a 00 	lds	r24, 0x007A
    3644:	86 fd       	sbrc	r24, 6
    3646:	fc cf       	rjmp	.-8      	; 0x3640 <GetESR+0x234>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    3648:	80 91 7a 00 	lds	r24, 0x007A
    364c:	80 64       	ori	r24, 0x40	; 64
    364e:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    3652:	80 91 7a 00 	lds	r24, 0x007A
    3656:	86 fd       	sbrc	r24, 6
    3658:	fc cf       	rjmp	.-8      	; 0x3652 <GetESR+0x246>
         adcv[0] = ADCW;			// Voltage HighPin with current
    365a:	80 90 78 00 	lds	r8, 0x0078
    365e:	90 90 79 00 	lds	r9, 0x0079
          ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);      // switch ADC to LowPin, Internal Ref. 
    3662:	80 91 64 01 	lds	r24, 0x0164
    3666:	80 6c       	ori	r24, 0xC0	; 192
    3668:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    366c:	80 91 7a 00 	lds	r24, 0x007A
    3670:	80 64       	ori	r24, 0x40	; 64
    3672:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    3676:	80 91 7a 00 	lds	r24, 0x007A
    367a:	86 fd       	sbrc	r24, 6
    367c:	fc cf       	rjmp	.-8      	; 0x3676 <GetESR+0x26a>
         ADCSRA |= (1<<ADSC);			// Start Conversion, real start is rising edge of ADC clock
    367e:	80 91 7a 00 	lds	r24, 0x007A
    3682:	80 64       	ori	r24, 0x40	; 64
    3684:	80 93 7a 00 	sts	0x007A, r24
         wait10us();				// 2.5 ADC clocks = 20 us
    3688:	0e 94 19 14 	call	0x2832	; 0x2832 <wait10us>
         wait5us();			
    368c:	0e 94 1a 14 	call	0x2834	; 0x2834 <wait5us>
         wait3us();				// with only 17 us delay the voltage goes down before SH
    3690:	0e 94 1c 14 	call	0x2838	; 0x2838 <wait3us>
         wdt_reset();
    3694:	a8 95       	wdr
         wdt_reset();
    3696:	a8 95       	wdr
         wdt_reset();
    3698:	a8 95       	wdr
         wdt_reset();
    369a:	a8 95       	wdr
         wdt_reset();
    369c:	a8 95       	wdr
         wdt_reset();
    369e:	a8 95       	wdr
//         wdt_reset();				// with wdt_reset the timing can be adjusted,
						// when time is too short, voltage is down before SH of ADC
						// when time is too long, capacitor will be overloaded.
						// That will cause too high voltage without current.
         R_DDR = 0;				// switch current off, SH is 1.5 ADC clock ticks behind start
    36a0:	14 b8       	out	0x04, r1	; 4
         while (ADCSRA&(1<<ADSC));		// wait for conversion finished
    36a2:	80 91 7a 00 	lds	r24, 0x007A
    36a6:	86 fd       	sbrc	r24, 6
    36a8:	fc cf       	rjmp	.-8      	; 0x36a2 <GetESR+0x296>
         adcv[1] = ADCW;			//  Voltage LowPin with current
    36aa:	40 91 78 00 	lds	r20, 0x0078
    36ae:	50 91 79 00 	lds	r21, 0x0079
         R_PORT = 0;
    36b2:	15 b8       	out	0x05, r1	; 5
          ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);      // switch ADC to LowPin, Internal Ref. 
    36b4:	80 91 64 01 	lds	r24, 0x0164
    36b8:	80 6c       	ori	r24, 0xC0	; 192
    36ba:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);		// Start Conversion
    36be:	80 91 7a 00 	lds	r24, 0x007A
    36c2:	80 64       	ori	r24, 0x40	; 64
    36c4:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read
    36c8:	80 91 7a 00 	lds	r24, 0x007A
    36cc:	86 fd       	sbrc	r24, 6
    36ce:	fc cf       	rjmp	.-8      	; 0x36c8 <GetESR+0x2bc>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    36d0:	80 91 7a 00 	lds	r24, 0x007A
    36d4:	80 64       	ori	r24, 0x40	; 64
    36d6:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    36da:	80 91 7a 00 	lds	r24, 0x007A
    36de:	86 fd       	sbrc	r24, 6
    36e0:	fc cf       	rjmp	.-8      	; 0x36da <GetESR+0x2ce>
         adcv[2] = ADCW;			// Voltage LowPin without current
    36e2:	20 91 78 00 	lds	r18, 0x0078
    36e6:	30 91 79 00 	lds	r19, 0x0079
         if (adcv[2] > 2) break;
    36ea:	23 30       	cpi	r18, 0x03	; 3
    36ec:	31 05       	cpc	r19, r1
    36ee:	10 f4       	brcc	.+4      	; 0x36f4 <GetESR+0x2e8>
         wdt_reset();
    36f0:	a8 95       	wdr
      }
    36f2:	99 cf       	rjmp	.-206    	; 0x3626 <GetESR+0x21a>
      R_DDR = 0;				// switch current off
    36f4:	14 b8       	out	0x04, r1	; 4
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
    36f6:	c4 01       	movw	r24, r8
    36f8:	a0 e0       	ldi	r26, 0x00	; 0
    36fa:	b0 e0       	ldi	r27, 0x00	; 0
         while (ADCSRA&(1<<ADSC));		// wait
         adcv[2] = ADCW;			// Voltage HighPin without current
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
    36fc:	82 0d       	add	r24, r2
    36fe:	93 1d       	adc	r25, r3
    3700:	a4 1d       	adc	r26, r4
    3702:	b5 1d       	adc	r27, r5
         adcv[2] = ADCW;			// Voltage LowPin without current
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      R_DDR = 0;				// switch current off
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
    3704:	e8 0e       	add	r14, r24
    3706:	f9 1e       	adc	r15, r25
    3708:	0a 1f       	adc	r16, r26
    370a:	1b 1f       	adc	r17, r27
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    370c:	ca 01       	movw	r24, r20
    370e:	a0 e0       	ldi	r26, 0x00	; 0
    3710:	b0 e0       	ldi	r27, 0x00	; 0
         adcv[2] = ADCW;			// Voltage HighPin without current
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    3712:	49 85       	ldd	r20, Y+9	; 0x09
    3714:	5a 85       	ldd	r21, Y+10	; 0x0a
    3716:	6b 85       	ldd	r22, Y+11	; 0x0b
    3718:	7c 85       	ldd	r23, Y+12	; 0x0c
    371a:	84 0f       	add	r24, r20
    371c:	95 1f       	adc	r25, r21
    371e:	a6 1f       	adc	r26, r22
    3720:	b7 1f       	adc	r27, r23
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      R_DDR = 0;				// switch current off
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    3722:	49 81       	ldd	r20, Y+1	; 0x01
    3724:	5a 81       	ldd	r21, Y+2	; 0x02
    3726:	6b 81       	ldd	r22, Y+3	; 0x03
    3728:	7c 81       	ldd	r23, Y+4	; 0x04
    372a:	48 0f       	add	r20, r24
    372c:	59 1f       	adc	r21, r25
    372e:	6a 1f       	adc	r22, r26
    3730:	7b 1f       	adc	r23, r27
    3732:	49 83       	std	Y+1, r20	; 0x01
    3734:	5a 83       	std	Y+2, r21	; 0x02
    3736:	6b 83       	std	Y+3, r22	; 0x03
    3738:	7c 83       	std	Y+4, r23	; 0x04
      sumvolt[2] += adcv[2];			// add  HighPin voltages without current
    373a:	40 e0       	ldi	r20, 0x00	; 0
    373c:	50 e0       	ldi	r21, 0x00	; 0
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
      sumvolt[2] += adcv[2]; 			// capacitor voltage without current
    373e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3740:	7e 85       	ldd	r23, Y+14	; 0x0e
    3742:	8f 85       	ldd	r24, Y+15	; 0x0f
    3744:	98 89       	ldd	r25, Y+16	; 0x10
    3746:	26 0f       	add	r18, r22
    3748:	37 1f       	adc	r19, r23
    374a:	48 1f       	adc	r20, r24
    374c:	59 1f       	adc	r21, r25
         wdt_reset();
      }
      R_DDR = 0;				// switch current off
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
      sumvolt[2] += adcv[2];			// add  HighPin voltages without current
    374e:	8d 81       	ldd	r24, Y+5	; 0x05
    3750:	9e 81       	ldd	r25, Y+6	; 0x06
    3752:	af 81       	ldd	r26, Y+7	; 0x07
    3754:	b8 85       	ldd	r27, Y+8	; 0x08
    3756:	82 0f       	add	r24, r18
    3758:	93 1f       	adc	r25, r19
    375a:	a4 1f       	adc	r26, r20
    375c:	b5 1f       	adc	r27, r21
    375e:	8d 83       	std	Y+5, r24	; 0x05
    3760:	9e 83       	std	Y+6, r25	; 0x06
    3762:	af 83       	std	Y+7, r26	; 0x07
    3764:	b8 87       	std	Y+8, r27	; 0x08
   sumvolt[2] = 0;		// clear sum of HighPin voltage without current
   EntladePins();	// discharge capacitor
   ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
// measurement frequency is given by sum of ADC-Reads < 680 Hz
   // ADC Sample and Hold (SH) is done 1.5 ADC clock number after starting 
   for(ii=0;ii<MAX_CNT;ii++) {
    3766:	63 94       	inc	r6
    3768:	96 2d       	mov	r25, r6
    376a:	90 38       	cpi	r25, 0x80	; 128
    376c:	09 f0       	breq	.+2      	; 0x3770 <GetESR+0x364>
    376e:	d1 ce       	rjmp	.-606    	; 0x3512 <GetESR+0x106>
   } // end for
   // we need to compensate the time delay between reading the LowPin Voltage and the
   // HighPin Voltage, which is usually 2 * 14 * 8 us = 224 us.
   // With the loading of the capacitor the current will sink, so we get a too high voltage at
   // the LowPin. The velocity of degration is inversely proportional to time constant (represented by capacity value).
   sumvolt[0] -= (sumvolt[0] * 150UL)  / cap.cval;
    3770:	c8 01       	movw	r24, r16
    3772:	b7 01       	movw	r22, r14
    3774:	26 e9       	ldi	r18, 0x96	; 150
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	40 e0       	ldi	r20, 0x00	; 0
    377a:	50 e0       	ldi	r21, 0x00	; 0
    377c:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    3780:	20 91 5a 01 	lds	r18, 0x015A
    3784:	30 91 5b 01 	lds	r19, 0x015B
    3788:	40 91 5c 01 	lds	r20, 0x015C
    378c:	50 91 5d 01 	lds	r21, 0x015D
    3790:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
    3794:	57 01       	movw	r10, r14
    3796:	68 01       	movw	r12, r16
    3798:	a2 1a       	sub	r10, r18
    379a:	b3 0a       	sbc	r11, r19
    379c:	c4 0a       	sbc	r12, r20
    379e:	d5 0a       	sbc	r13, r21
   esr0 = (int8_t)eeprom_read_byte(&EE_ESR_ZERO);
    37a0:	8f e6       	ldi	r24, 0x6F	; 111
    37a2:	92 e0       	ldi	r25, 0x02	; 2
    37a4:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__eerd_byte_m328p>
    37a8:	28 2e       	mov	r2, r24
   sumvolt[0] += (((long)sumvolt[0] * esr0) / ((RR680MI - R_L_VAL) * 10)); // subtract 0.23 Ohm from ESR
    37aa:	40 90 04 01 	lds	r4, 0x0104
    37ae:	50 90 05 01 	lds	r5, 0x0105
    37b2:	68 2f       	mov	r22, r24
    37b4:	77 27       	eor	r23, r23
    37b6:	67 fd       	sbrc	r22, 7
    37b8:	70 95       	com	r23
    37ba:	87 2f       	mov	r24, r23
    37bc:	97 2f       	mov	r25, r23
    37be:	a6 01       	movw	r20, r12
    37c0:	95 01       	movw	r18, r10
    37c2:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    37c6:	92 01       	movw	r18, r4
    37c8:	22 0f       	add	r18, r18
    37ca:	33 1f       	adc	r19, r19
    37cc:	a2 01       	movw	r20, r4
    37ce:	e3 e0       	ldi	r30, 0x03	; 3
    37d0:	44 0f       	add	r20, r20
    37d2:	55 1f       	adc	r21, r21
    37d4:	ea 95       	dec	r30
    37d6:	e1 f7       	brne	.-8      	; 0x37d0 <GetESR+0x3c4>
    37d8:	24 0f       	add	r18, r20
    37da:	35 1f       	adc	r19, r21
    37dc:	20 5a       	subi	r18, 0xA0	; 160
    37de:	39 40       	sbci	r19, 0x09	; 9
    37e0:	40 e0       	ldi	r20, 0x00	; 0
    37e2:	50 e0       	ldi	r21, 0x00	; 0
    37e4:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <__divmodsi4>
    37e8:	79 01       	movw	r14, r18
    37ea:	8a 01       	movw	r16, r20
    37ec:	ea 0c       	add	r14, r10
    37ee:	fb 1c       	adc	r15, r11
    37f0:	0c 1d       	adc	r16, r12
    37f2:	1d 1d       	adc	r17, r13
   if (sumvolt[1] > sumvolt[0]) {
    37f4:	29 81       	ldd	r18, Y+1	; 0x01
    37f6:	3a 81       	ldd	r19, Y+2	; 0x02
    37f8:	4b 81       	ldd	r20, Y+3	; 0x03
    37fa:	5c 81       	ldd	r21, Y+4	; 0x04
    37fc:	e2 16       	cp	r14, r18
    37fe:	f3 06       	cpc	r15, r19
    3800:	04 07       	cpc	r16, r20
    3802:	15 07       	cpc	r17, r21
    3804:	38 f4       	brcc	.+14     	; 0x3814 <GetESR+0x408>
      sumvolt[1] -= sumvolt[0];		// difference HighPin - LowPin Voltage with current
    3806:	59 01       	movw	r10, r18
    3808:	6a 01       	movw	r12, r20
    380a:	ae 18       	sub	r10, r14
    380c:	bf 08       	sbc	r11, r15
    380e:	c0 0a       	sbc	r12, r16
    3810:	d1 0a       	sbc	r13, r17
    3812:	03 c0       	rjmp	.+6      	; 0x381a <GetESR+0x40e>
   } else {
      sumvolt[1] = 0;
    3814:	aa 24       	eor	r10, r10
    3816:	bb 24       	eor	r11, r11
    3818:	65 01       	movw	r12, r10
   }
   sumvolt[2] = (sumvolt[2] * 980) / 1000;	// scale down the voltage without current with 98.0%
    381a:	6d 81       	ldd	r22, Y+5	; 0x05
    381c:	7e 81       	ldd	r23, Y+6	; 0x06
    381e:	8f 81       	ldd	r24, Y+7	; 0x07
    3820:	98 85       	ldd	r25, Y+8	; 0x08
    3822:	24 ed       	ldi	r18, 0xD4	; 212
    3824:	33 e0       	ldi	r19, 0x03	; 3
    3826:	40 e0       	ldi	r20, 0x00	; 0
    3828:	50 e0       	ldi	r21, 0x00	; 0
    382a:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    382e:	28 ee       	ldi	r18, 0xE8	; 232
    3830:	33 e0       	ldi	r19, 0x03	; 3
    3832:	40 e0       	ldi	r20, 0x00	; 0
    3834:	50 e0       	ldi	r21, 0x00	; 0
    3836:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
    383a:	39 01       	movw	r6, r18
    383c:	4a 01       	movw	r8, r20
    383e:	b2 01       	movw	r22, r4
    3840:	60 59       	subi	r22, 0x90	; 144
    3842:	7a 41       	sbci	r23, 0x1A	; 26
   jj = 0;
   if (sumvolt[1] >= sumvolt[2]) {
    3844:	a2 16       	cp	r10, r18
    3846:	b3 06       	cpc	r11, r19
    3848:	c4 06       	cpc	r12, r20
    384a:	d5 06       	cpc	r13, r21
    384c:	08 f1       	brcs	.+66     	; 0x3890 <GetESR+0x484>
      // mean voltage at the capacitor is higher with current
      // sumvolt[0] is the sum of voltages at LowPin, caused by output resistance of Port
      // (RR680MI - R_L_VAL) is the port output resistance in 0.1 Ohm units.
      // we scale up the difference voltage with 10 to get 0.01 Ohm units of ESR
      cap.esr = ((sumvolt[1] - sumvolt[2]) * 10 * (unsigned long)(RR680MI - R_L_VAL)) / sumvolt[0];
    384e:	80 e0       	ldi	r24, 0x00	; 0
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	2a e0       	ldi	r18, 0x0A	; 10
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	40 e0       	ldi	r20, 0x00	; 0
    3858:	50 e0       	ldi	r21, 0x00	; 0
    385a:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    385e:	a6 01       	movw	r20, r12
    3860:	95 01       	movw	r18, r10
    3862:	26 19       	sub	r18, r6
    3864:	37 09       	sbc	r19, r7
    3866:	48 09       	sbc	r20, r8
    3868:	59 09       	sbc	r21, r9
    386a:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    386e:	a8 01       	movw	r20, r16
    3870:	97 01       	movw	r18, r14
    3872:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
    3876:	30 93 63 01 	sts	0x0163, r19
    387a:	20 93 62 01 	sts	0x0162, r18
      DisplayValue(cap.esr,-2,LCD_CHAR_OMEGA,2);
    387e:	b9 01       	movw	r22, r18
    3880:	80 e0       	ldi	r24, 0x00	; 0
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	4e ef       	ldi	r20, 0xFE	; 254
    3886:	24 ef       	ldi	r18, 0xF4	; 244
    3888:	02 e0       	ldi	r16, 0x02	; 2
    388a:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
    388e:	25 c0       	rjmp	.+74     	; 0x38da <GetESR+0x4ce>
   } else {
      jj = ((sumvolt[2] - sumvolt[1]) * 10 * (unsigned long)(RR680MI - R_L_VAL)) / sumvolt[0];
    3890:	80 e0       	ldi	r24, 0x00	; 0
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	2a e0       	ldi	r18, 0x0A	; 10
    3896:	30 e0       	ldi	r19, 0x00	; 0
    3898:	40 e0       	ldi	r20, 0x00	; 0
    389a:	50 e0       	ldi	r21, 0x00	; 0
    389c:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    38a0:	a4 01       	movw	r20, r8
    38a2:	93 01       	movw	r18, r6
    38a4:	2a 19       	sub	r18, r10
    38a6:	3b 09       	sbc	r19, r11
    38a8:	4c 09       	sbc	r20, r12
    38aa:	5d 09       	sbc	r21, r13
    38ac:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    38b0:	a8 01       	movw	r20, r16
    38b2:	97 01       	movw	r18, r14
    38b4:	0e 94 c5 1c 	call	0x398a	; 0x398a <__udivmodsi4>
    38b8:	12 2f       	mov	r17, r18
      lcd_data('0');
    38ba:	80 e3       	ldi	r24, 0x30	; 48
    38bc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
      if ((jj < 100) && (jj > 0)) {
    38c0:	81 2f       	mov	r24, r17
    38c2:	81 50       	subi	r24, 0x01	; 1
    38c4:	83 36       	cpi	r24, 0x63	; 99
    38c6:	48 f4       	brcc	.+18     	; 0x38da <GetESR+0x4ce>
         lcd_data('?');			// mark ESR zero correction
    38c8:	8f e3       	ldi	r24, 0x3F	; 63
    38ca:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
         esr0 -= jj;			// correct ESR_ZERO by negative resistance
    38ce:	62 2d       	mov	r22, r2
    38d0:	61 1b       	sub	r22, r17
         eeprom_write_byte((uint8_t *)(&EE_ESR_ZERO), (int8_t)esr0);       // fix new zero offset 
    38d2:	8f e6       	ldi	r24, 0x6F	; 111
    38d4:	92 e0       	ldi	r25, 0x02	; 2
    38d6:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <__eewr_byte_m328p>
//   lcd_line3();
//   DisplayValue(jj,0,' ',4);	// correction for ESR_ZERO
//   DisplayValue(1000+esr0,0,' ',4);	// new ESR_ZERO
#endif
  return;
}
    38da:	60 96       	adiw	r28, 0x10	; 16
    38dc:	0f b6       	in	r0, 0x3f	; 63
    38de:	f8 94       	cli
    38e0:	de bf       	out	0x3e, r29	; 62
    38e2:	0f be       	out	0x3f, r0	; 63
    38e4:	cd bf       	out	0x3d, r28	; 61
    38e6:	cf 91       	pop	r28
    38e8:	df 91       	pop	r29
    38ea:	1f 91       	pop	r17
    38ec:	0f 91       	pop	r16
    38ee:	ff 90       	pop	r15
    38f0:	ef 90       	pop	r14
    38f2:	df 90       	pop	r13
    38f4:	cf 90       	pop	r12
    38f6:	bf 90       	pop	r11
    38f8:	af 90       	pop	r10
    38fa:	9f 90       	pop	r9
    38fc:	8f 90       	pop	r8
    38fe:	7f 90       	pop	r7
    3900:	6f 90       	pop	r6
    3902:	5f 90       	pop	r5
    3904:	4f 90       	pop	r4
    3906:	3f 90       	pop	r3
    3908:	2f 90       	pop	r2
    390a:	08 95       	ret

0000390c <__mulsi3>:
    390c:	62 9f       	mul	r22, r18
    390e:	d0 01       	movw	r26, r0
    3910:	73 9f       	mul	r23, r19
    3912:	f0 01       	movw	r30, r0
    3914:	82 9f       	mul	r24, r18
    3916:	e0 0d       	add	r30, r0
    3918:	f1 1d       	adc	r31, r1
    391a:	64 9f       	mul	r22, r20
    391c:	e0 0d       	add	r30, r0
    391e:	f1 1d       	adc	r31, r1
    3920:	92 9f       	mul	r25, r18
    3922:	f0 0d       	add	r31, r0
    3924:	83 9f       	mul	r24, r19
    3926:	f0 0d       	add	r31, r0
    3928:	74 9f       	mul	r23, r20
    392a:	f0 0d       	add	r31, r0
    392c:	65 9f       	mul	r22, r21
    392e:	f0 0d       	add	r31, r0
    3930:	99 27       	eor	r25, r25
    3932:	72 9f       	mul	r23, r18
    3934:	b0 0d       	add	r27, r0
    3936:	e1 1d       	adc	r30, r1
    3938:	f9 1f       	adc	r31, r25
    393a:	63 9f       	mul	r22, r19
    393c:	b0 0d       	add	r27, r0
    393e:	e1 1d       	adc	r30, r1
    3940:	f9 1f       	adc	r31, r25
    3942:	bd 01       	movw	r22, r26
    3944:	cf 01       	movw	r24, r30
    3946:	11 24       	eor	r1, r1
    3948:	08 95       	ret

0000394a <__udivmodqi4>:
    394a:	99 1b       	sub	r25, r25
    394c:	79 e0       	ldi	r23, 0x09	; 9
    394e:	04 c0       	rjmp	.+8      	; 0x3958 <__udivmodqi4_ep>

00003950 <__udivmodqi4_loop>:
    3950:	99 1f       	adc	r25, r25
    3952:	96 17       	cp	r25, r22
    3954:	08 f0       	brcs	.+2      	; 0x3958 <__udivmodqi4_ep>
    3956:	96 1b       	sub	r25, r22

00003958 <__udivmodqi4_ep>:
    3958:	88 1f       	adc	r24, r24
    395a:	7a 95       	dec	r23
    395c:	c9 f7       	brne	.-14     	; 0x3950 <__udivmodqi4_loop>
    395e:	80 95       	com	r24
    3960:	08 95       	ret

00003962 <__udivmodhi4>:
    3962:	aa 1b       	sub	r26, r26
    3964:	bb 1b       	sub	r27, r27
    3966:	51 e1       	ldi	r21, 0x11	; 17
    3968:	07 c0       	rjmp	.+14     	; 0x3978 <__udivmodhi4_ep>

0000396a <__udivmodhi4_loop>:
    396a:	aa 1f       	adc	r26, r26
    396c:	bb 1f       	adc	r27, r27
    396e:	a6 17       	cp	r26, r22
    3970:	b7 07       	cpc	r27, r23
    3972:	10 f0       	brcs	.+4      	; 0x3978 <__udivmodhi4_ep>
    3974:	a6 1b       	sub	r26, r22
    3976:	b7 0b       	sbc	r27, r23

00003978 <__udivmodhi4_ep>:
    3978:	88 1f       	adc	r24, r24
    397a:	99 1f       	adc	r25, r25
    397c:	5a 95       	dec	r21
    397e:	a9 f7       	brne	.-22     	; 0x396a <__udivmodhi4_loop>
    3980:	80 95       	com	r24
    3982:	90 95       	com	r25
    3984:	bc 01       	movw	r22, r24
    3986:	cd 01       	movw	r24, r26
    3988:	08 95       	ret

0000398a <__udivmodsi4>:
    398a:	a1 e2       	ldi	r26, 0x21	; 33
    398c:	1a 2e       	mov	r1, r26
    398e:	aa 1b       	sub	r26, r26
    3990:	bb 1b       	sub	r27, r27
    3992:	fd 01       	movw	r30, r26
    3994:	0d c0       	rjmp	.+26     	; 0x39b0 <__udivmodsi4_ep>

00003996 <__udivmodsi4_loop>:
    3996:	aa 1f       	adc	r26, r26
    3998:	bb 1f       	adc	r27, r27
    399a:	ee 1f       	adc	r30, r30
    399c:	ff 1f       	adc	r31, r31
    399e:	a2 17       	cp	r26, r18
    39a0:	b3 07       	cpc	r27, r19
    39a2:	e4 07       	cpc	r30, r20
    39a4:	f5 07       	cpc	r31, r21
    39a6:	20 f0       	brcs	.+8      	; 0x39b0 <__udivmodsi4_ep>
    39a8:	a2 1b       	sub	r26, r18
    39aa:	b3 0b       	sbc	r27, r19
    39ac:	e4 0b       	sbc	r30, r20
    39ae:	f5 0b       	sbc	r31, r21

000039b0 <__udivmodsi4_ep>:
    39b0:	66 1f       	adc	r22, r22
    39b2:	77 1f       	adc	r23, r23
    39b4:	88 1f       	adc	r24, r24
    39b6:	99 1f       	adc	r25, r25
    39b8:	1a 94       	dec	r1
    39ba:	69 f7       	brne	.-38     	; 0x3996 <__udivmodsi4_loop>
    39bc:	60 95       	com	r22
    39be:	70 95       	com	r23
    39c0:	80 95       	com	r24
    39c2:	90 95       	com	r25
    39c4:	9b 01       	movw	r18, r22
    39c6:	ac 01       	movw	r20, r24
    39c8:	bd 01       	movw	r22, r26
    39ca:	cf 01       	movw	r24, r30
    39cc:	08 95       	ret

000039ce <__divmodsi4>:
    39ce:	97 fb       	bst	r25, 7
    39d0:	09 2e       	mov	r0, r25
    39d2:	05 26       	eor	r0, r21
    39d4:	0e d0       	rcall	.+28     	; 0x39f2 <__divmodsi4_neg1>
    39d6:	57 fd       	sbrc	r21, 7
    39d8:	04 d0       	rcall	.+8      	; 0x39e2 <__divmodsi4_neg2>
    39da:	d7 df       	rcall	.-82     	; 0x398a <__udivmodsi4>
    39dc:	0a d0       	rcall	.+20     	; 0x39f2 <__divmodsi4_neg1>
    39de:	00 1c       	adc	r0, r0
    39e0:	38 f4       	brcc	.+14     	; 0x39f0 <__divmodsi4_exit>

000039e2 <__divmodsi4_neg2>:
    39e2:	50 95       	com	r21
    39e4:	40 95       	com	r20
    39e6:	30 95       	com	r19
    39e8:	21 95       	neg	r18
    39ea:	3f 4f       	sbci	r19, 0xFF	; 255
    39ec:	4f 4f       	sbci	r20, 0xFF	; 255
    39ee:	5f 4f       	sbci	r21, 0xFF	; 255

000039f0 <__divmodsi4_exit>:
    39f0:	08 95       	ret

000039f2 <__divmodsi4_neg1>:
    39f2:	f6 f7       	brtc	.-4      	; 0x39f0 <__divmodsi4_exit>
    39f4:	90 95       	com	r25
    39f6:	80 95       	com	r24
    39f8:	70 95       	com	r23
    39fa:	61 95       	neg	r22
    39fc:	7f 4f       	sbci	r23, 0xFF	; 255
    39fe:	8f 4f       	sbci	r24, 0xFF	; 255
    3a00:	9f 4f       	sbci	r25, 0xFF	; 255
    3a02:	08 95       	ret

00003a04 <itoa>:
    3a04:	fb 01       	movw	r30, r22
    3a06:	9f 01       	movw	r18, r30
    3a08:	e8 94       	clt
    3a0a:	42 30       	cpi	r20, 0x02	; 2
    3a0c:	c4 f0       	brlt	.+48     	; 0x3a3e <itoa+0x3a>
    3a0e:	45 32       	cpi	r20, 0x25	; 37
    3a10:	b4 f4       	brge	.+44     	; 0x3a3e <itoa+0x3a>
    3a12:	4a 30       	cpi	r20, 0x0A	; 10
    3a14:	29 f4       	brne	.+10     	; 0x3a20 <itoa+0x1c>
    3a16:	97 fb       	bst	r25, 7
    3a18:	1e f4       	brtc	.+6      	; 0x3a20 <itoa+0x1c>
    3a1a:	90 95       	com	r25
    3a1c:	81 95       	neg	r24
    3a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a20:	64 2f       	mov	r22, r20
    3a22:	77 27       	eor	r23, r23
    3a24:	0e 94 b1 1c 	call	0x3962	; 0x3962 <__udivmodhi4>
    3a28:	80 5d       	subi	r24, 0xD0	; 208
    3a2a:	8a 33       	cpi	r24, 0x3A	; 58
    3a2c:	0c f0       	brlt	.+2      	; 0x3a30 <itoa+0x2c>
    3a2e:	89 5d       	subi	r24, 0xD9	; 217
    3a30:	81 93       	st	Z+, r24
    3a32:	cb 01       	movw	r24, r22
    3a34:	00 97       	sbiw	r24, 0x00	; 0
    3a36:	a1 f7       	brne	.-24     	; 0x3a20 <itoa+0x1c>
    3a38:	16 f4       	brtc	.+4      	; 0x3a3e <itoa+0x3a>
    3a3a:	5d e2       	ldi	r21, 0x2D	; 45
    3a3c:	51 93       	st	Z+, r21
    3a3e:	10 82       	st	Z, r1
    3a40:	c9 01       	movw	r24, r18
    3a42:	0c 94 5a 1d 	jmp	0x3ab4	; 0x3ab4 <strrev>

00003a46 <utoa>:
    3a46:	fb 01       	movw	r30, r22
    3a48:	9f 01       	movw	r18, r30
    3a4a:	42 30       	cpi	r20, 0x02	; 2
    3a4c:	74 f0       	brlt	.+28     	; 0x3a6a <utoa+0x24>
    3a4e:	45 32       	cpi	r20, 0x25	; 37
    3a50:	64 f4       	brge	.+24     	; 0x3a6a <utoa+0x24>
    3a52:	64 2f       	mov	r22, r20
    3a54:	77 27       	eor	r23, r23
    3a56:	0e 94 b1 1c 	call	0x3962	; 0x3962 <__udivmodhi4>
    3a5a:	80 5d       	subi	r24, 0xD0	; 208
    3a5c:	8a 33       	cpi	r24, 0x3A	; 58
    3a5e:	0c f0       	brlt	.+2      	; 0x3a62 <utoa+0x1c>
    3a60:	89 5d       	subi	r24, 0xD9	; 217
    3a62:	81 93       	st	Z+, r24
    3a64:	cb 01       	movw	r24, r22
    3a66:	00 97       	sbiw	r24, 0x00	; 0
    3a68:	a1 f7       	brne	.-24     	; 0x3a52 <utoa+0xc>
    3a6a:	10 82       	st	Z, r1
    3a6c:	c9 01       	movw	r24, r18
    3a6e:	0c 94 5a 1d 	jmp	0x3ab4	; 0x3ab4 <strrev>

00003a72 <__eerd_byte_m328p>:
    3a72:	f9 99       	sbic	0x1f, 1	; 31
    3a74:	fe cf       	rjmp	.-4      	; 0x3a72 <__eerd_byte_m328p>
    3a76:	92 bd       	out	0x22, r25	; 34
    3a78:	81 bd       	out	0x21, r24	; 33
    3a7a:	f8 9a       	sbi	0x1f, 0	; 31
    3a7c:	99 27       	eor	r25, r25
    3a7e:	80 b5       	in	r24, 0x20	; 32
    3a80:	08 95       	ret

00003a82 <__eerd_word_m328p>:
    3a82:	a8 e1       	ldi	r26, 0x18	; 24
    3a84:	b0 e0       	ldi	r27, 0x00	; 0
    3a86:	42 e0       	ldi	r20, 0x02	; 2
    3a88:	50 e0       	ldi	r21, 0x00	; 0
    3a8a:	0c 94 6c 1d 	jmp	0x3ad8	; 0x3ad8 <__eerd_blraw_m328p>

00003a8e <__eewr_byte_m328p>:
    3a8e:	26 2f       	mov	r18, r22

00003a90 <__eewr_r18_m328p>:
    3a90:	f9 99       	sbic	0x1f, 1	; 31
    3a92:	fe cf       	rjmp	.-4      	; 0x3a90 <__eewr_r18_m328p>
    3a94:	1f ba       	out	0x1f, r1	; 31
    3a96:	92 bd       	out	0x22, r25	; 34
    3a98:	81 bd       	out	0x21, r24	; 33
    3a9a:	20 bd       	out	0x20, r18	; 32
    3a9c:	0f b6       	in	r0, 0x3f	; 63
    3a9e:	f8 94       	cli
    3aa0:	fa 9a       	sbi	0x1f, 2	; 31
    3aa2:	f9 9a       	sbi	0x1f, 1	; 31
    3aa4:	0f be       	out	0x3f, r0	; 63
    3aa6:	01 96       	adiw	r24, 0x01	; 1
    3aa8:	08 95       	ret

00003aaa <__eewr_word_m328p>:
    3aaa:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <__eewr_byte_m328p>
    3aae:	27 2f       	mov	r18, r23
    3ab0:	0c 94 48 1d 	jmp	0x3a90	; 0x3a90 <__eewr_r18_m328p>

00003ab4 <strrev>:
    3ab4:	dc 01       	movw	r26, r24
    3ab6:	fc 01       	movw	r30, r24
    3ab8:	67 2f       	mov	r22, r23
    3aba:	71 91       	ld	r23, Z+
    3abc:	77 23       	and	r23, r23
    3abe:	e1 f7       	brne	.-8      	; 0x3ab8 <strrev+0x4>
    3ac0:	32 97       	sbiw	r30, 0x02	; 2
    3ac2:	04 c0       	rjmp	.+8      	; 0x3acc <strrev+0x18>
    3ac4:	7c 91       	ld	r23, X
    3ac6:	6d 93       	st	X+, r22
    3ac8:	70 83       	st	Z, r23
    3aca:	62 91       	ld	r22, -Z
    3acc:	ae 17       	cp	r26, r30
    3ace:	bf 07       	cpc	r27, r31
    3ad0:	c8 f3       	brcs	.-14     	; 0x3ac4 <strrev+0x10>
    3ad2:	08 95       	ret

00003ad4 <__eerd_block_m328p>:
    3ad4:	dc 01       	movw	r26, r24
    3ad6:	cb 01       	movw	r24, r22

00003ad8 <__eerd_blraw_m328p>:
    3ad8:	fc 01       	movw	r30, r24
    3ada:	f9 99       	sbic	0x1f, 1	; 31
    3adc:	fe cf       	rjmp	.-4      	; 0x3ada <__eerd_blraw_m328p+0x2>
    3ade:	06 c0       	rjmp	.+12     	; 0x3aec <__eerd_blraw_m328p+0x14>
    3ae0:	f2 bd       	out	0x22, r31	; 34
    3ae2:	e1 bd       	out	0x21, r30	; 33
    3ae4:	f8 9a       	sbi	0x1f, 0	; 31
    3ae6:	31 96       	adiw	r30, 0x01	; 1
    3ae8:	00 b4       	in	r0, 0x20	; 32
    3aea:	0d 92       	st	X+, r0
    3aec:	41 50       	subi	r20, 0x01	; 1
    3aee:	50 40       	sbci	r21, 0x00	; 0
    3af0:	b8 f7       	brcc	.-18     	; 0x3ae0 <__eerd_blraw_m328p+0x8>
    3af2:	08 95       	ret

00003af4 <_exit>:
    3af4:	f8 94       	cli

00003af6 <__stop_program>:
    3af6:	ff cf       	rjmp	.-2      	; 0x3af6 <__stop_program>
