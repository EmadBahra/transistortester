
TransistorTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00003e10  00003ec4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003e10  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000089  00800102  00800102  00003ec6  2**0
                  ALLOC
  3 .eeprom       000001b8  00810000  00810000  00003ec6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         00000dbc  00000000  00000000  00004080  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001d2  00000000  00000000  00004e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000000e0  00000000  00000000  0000500e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000783  00000000  00000000  000050ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002c4b  00000000  00000000  00005871  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000008d6  00000000  00000000  000084bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000036cc  00000000  00000000  00008d92  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000002e0  00000000  00000000  0000c460  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000920  00000000  00000000  0000c740  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000153c  00000000  00000000  0000d060  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00000260  00000000  00000000  0000e59c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 90 00 	jmp	0x120	; 0x120 <__ctors_end>
       4:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
       8:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
       c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      10:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      14:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      18:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      1c:	0c 94 b2 01 	jmp	0x364	; 0x364 <__vector_7>
      20:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      24:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      28:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__vector_10>
      2c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      30:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      34:	0c 94 43 17 	jmp	0x2e86	; 0x2e86 <__vector_13>
      38:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      3c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      40:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      44:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      48:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      4c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      50:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      54:	0c 94 b3 01 	jmp	0x366	; 0x366 <__vector_21>
      58:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      5c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      60:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      64:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>

00000068 <LogTab>:
      68:	00 00 14 00 29 00 3e 00 53 00 69 00 80 00 97 00     ....).>.S.i.....
      78:	ae 00 c6 00 df 00 f8 00 12 01 2d 01 49 01 65 01     ..........-.I.e.
      88:	82 01 a0 01 be 01 de 01 ff 01 21 02 44 02 68 02     ..........!.D.h.
      98:	8e 02 b5 02 de 02 09 03 35 03 64 03 94 03 c8 03     ........5.d.....
      a8:	fe 03 37 04 73 04 b4 04 f9 04 43 05 93 05 ea 05     ..7.s.....C.....
      b8:	49 06 b3 06 29 07 ae 07 48 08 ff 08 de 09           I...)...H.....

000000c6 <SELFTEST>:
      c6:	53 65 6c 66 74 65 73 74 20 6d 6f 64 65 2e 2e 00     Selftest mode...

000000d6 <RELPROBE>:
      d6:	69 73 6f 6c 61 74 65 20 50 72 6f 62 65 21 00        isolate Probe!.

000000e5 <URefT>:
      e5:	52 65 66 3d 00                                      Ref=.

000000ea <RHfakt>:
      ea:	52 48 66 3d 00                                      RHf=.

000000ef <RH1L>:
      ef:	52 48 2d 00                                         RH-.

000000f3 <RH1H>:
      f3:	52 48 2b 00                                         RH+.

000000f7 <RLRL>:
      f7:	2b 52 4c 2d 20 31 32 20 31 33 20 32 33 00           +RL- 12 13 23.

00000105 <RHRH>:
     105:	2b 52 48 2d 20 31 32 20 31 33 20 32 33 00           +RH- 12 13 23.

00000113 <RHRL>:
     113:	52 48 2f 52 4c 00                                   RH/RL.

00000119 <T50HZ>:
     119:	20 35 30 48 7a 00 00                                 50Hz..

00000120 <__ctors_end>:
     120:	11 24       	eor	r1, r1
     122:	1f be       	out	0x3f, r1	; 63
     124:	cf ef       	ldi	r28, 0xFF	; 255
     126:	d4 e0       	ldi	r29, 0x04	; 4
     128:	de bf       	out	0x3e, r29	; 62
     12a:	cd bf       	out	0x3d, r28	; 61

0000012c <__do_copy_data>:
     12c:	11 e0       	ldi	r17, 0x01	; 1
     12e:	a0 e0       	ldi	r26, 0x00	; 0
     130:	b1 e0       	ldi	r27, 0x01	; 1
     132:	e0 e1       	ldi	r30, 0x10	; 16
     134:	fe e3       	ldi	r31, 0x3E	; 62
     136:	02 c0       	rjmp	.+4      	; 0x13c <__do_copy_data+0x10>
     138:	05 90       	lpm	r0, Z+
     13a:	0d 92       	st	X+, r0
     13c:	a2 30       	cpi	r26, 0x02	; 2
     13e:	b1 07       	cpc	r27, r17
     140:	d9 f7       	brne	.-10     	; 0x138 <__do_copy_data+0xc>

00000142 <__do_clear_bss>:
     142:	11 e0       	ldi	r17, 0x01	; 1
     144:	a2 e0       	ldi	r26, 0x02	; 2
     146:	b1 e0       	ldi	r27, 0x01	; 1
     148:	01 c0       	rjmp	.+2      	; 0x14c <.do_clear_bss_start>

0000014a <.do_clear_bss_loop>:
     14a:	1d 92       	st	X+, r1

0000014c <.do_clear_bss_start>:
     14c:	ab 38       	cpi	r26, 0x8B	; 139
     14e:	b1 07       	cpc	r27, r17
     150:	e1 f7       	brne	.-8      	; 0x14a <.do_clear_bss_loop>
     152:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <main>
     156:	0c 94 06 1f 	jmp	0x3e0c	; 0x3e0c <_exit>

0000015a <__bad_interrupt>:
     15a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000015e <lcd_data>:
void lcd_space(void) {
   lcd_data(' ');
}

// sends data byte to the LCD 
void lcd_data(unsigned char temp1) {
     15e:	1f 93       	push	r17
     160:	18 2f       	mov	r17, r24
 lcd_write_data(temp1);		// set RS to 1
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	61 2f       	mov	r22, r17
     166:	0e 94 84 01 	call	0x308	; 0x308 <_lcd_hw_write>
     16a:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <wait50us>
#ifdef WITH_UART
 switch(temp1) {
     16e:	18 30       	cpi	r17, 0x08	; 8
     170:	48 f4       	brcc	.+18     	; 0x184 <lcd_data+0x26>
     172:	16 30       	cpi	r17, 0x06	; 6
     174:	d0 f4       	brcc	.+52     	; 0x1aa <lcd_data+0x4c>
     176:	12 30       	cpi	r17, 0x02	; 2
     178:	71 f0       	breq	.+28     	; 0x196 <lcd_data+0x38>
     17a:	13 30       	cpi	r17, 0x03	; 3
     17c:	89 f0       	breq	.+34     	; 0x1a0 <lcd_data+0x42>
     17e:	11 30       	cpi	r17, 0x01	; 1
     180:	d1 f4       	brne	.+52     	; 0x1b6 <lcd_data+0x58>
     182:	07 c0       	rjmp	.+14     	; 0x192 <lcd_data+0x34>
     184:	14 3e       	cpi	r17, 0xE4	; 228
     186:	a9 f0       	breq	.+42     	; 0x1b2 <lcd_data+0x54>
     188:	14 3f       	cpi	r17, 0xF4	; 244
     18a:	c1 f0       	breq	.+48     	; 0x1bc <lcd_data+0x5e>
     18c:	11 3e       	cpi	r17, 0xE1	; 225
     18e:	99 f4       	brne	.+38     	; 0x1b6 <lcd_data+0x58>
     190:	0e c0       	rjmp	.+28     	; 0x1ae <lcd_data+0x50>
    case LCD_CHAR_DIODE1:
    	uart_putc('>');
     192:	8e e3       	ldi	r24, 0x3E	; 62
     194:	06 c0       	rjmp	.+12     	; 0x1a2 <lcd_data+0x44>
    	uart_putc('|');
    	break;
    case LCD_CHAR_DIODE2:
    	uart_putc('|');
     196:	8c e7       	ldi	r24, 0x7C	; 124
     198:	0e 94 c1 13 	call	0x2782	; 0x2782 <uart_putc>
    	uart_putc('<');
     19c:	8c e3       	ldi	r24, 0x3C	; 60
     19e:	0c c0       	rjmp	.+24     	; 0x1b8 <lcd_data+0x5a>
    	break;
    case LCD_CHAR_CAP:
    	uart_putc('|');
     1a0:	8c e7       	ldi	r24, 0x7C	; 124
     1a2:	0e 94 c1 13 	call	0x2782	; 0x2782 <uart_putc>
    	uart_putc('|');
     1a6:	8c e7       	ldi	r24, 0x7C	; 124
     1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <lcd_data+0x5a>
    	break;
    case LCD_CHAR_RESIS1:
    case LCD_CHAR_RESIS2:
    	uart_putc('R');
     1aa:	82 e5       	ldi	r24, 0x52	; 82
     1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <lcd_data+0x5a>
    	break;
    case 225:	//ä
    	uart_putc('ä');
     1ae:	84 ee       	ldi	r24, 0xE4	; 228
     1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <lcd_data+0x5a>
    	break;
    case 228:	//µ
    	uart_putc('µ');
     1b2:	85 eb       	ldi	r24, 0xB5	; 181
     1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <lcd_data+0x5a>
    	break;
    case 244:	//Omega
    	break;
    default:
    	uart_putc(temp1);
     1b6:	81 2f       	mov	r24, r17
     1b8:	0e 94 c1 13 	call	0x2782	; 0x2782 <uart_putc>
 }
#endif
}
     1bc:	1f 91       	pop	r17
     1be:	08 95       	ret

000001c0 <lcd_space>:
   lcd_data(temp + '1');
}

// send space character to LCD
void lcd_space(void) {
   lcd_data(' ');
     1c0:	80 e2       	ldi	r24, 0x20	; 32
     1c2:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
}
     1c6:	08 95       	ret

000001c8 <lcd_testpin>:
 

// sends numeric character (Pin Number) to the LCD 
// from binary 0 we send ASCII 1 ....
void lcd_testpin(unsigned char temp) {
   lcd_data(temp + '1');
     1c8:	8f 5c       	subi	r24, 0xCF	; 207
     1ca:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
}
     1ce:	08 95       	ret

000001d0 <uart_newline>:
}


#ifdef WITH_UART
void uart_newline(void) {
   uart_putc('\r');
     1d0:	8d e0       	ldi	r24, 0x0D	; 13
     1d2:	0e 94 c1 13 	call	0x2782	; 0x2782 <uart_putc>
   uart_putc('\n');
     1d6:	8a e0       	ldi	r24, 0x0A	; 10
     1d8:	0e 94 c1 13 	call	0x2782	; 0x2782 <uart_putc>
}
     1dc:	08 95       	ret

000001de <lcd_command>:
#endif
}
 
// sends a command to the LCD
 
void lcd_command(unsigned char temp1) {
     1de:	1f 93       	push	r17
     1e0:	18 2f       	mov	r17, r24
        lcd_write_cmd(temp1);		// set RS to 0
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	61 2f       	mov	r22, r17
     1e6:	0e 94 84 01 	call	0x308	; 0x308 <_lcd_hw_write>
     1ea:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <wait50us>
#ifdef WITH_UART
	if((temp1 == 0x80) || (temp1 == 0xC0)) {
     1ee:	10 38       	cpi	r17, 0x80	; 128
     1f0:	11 f0       	breq	.+4      	; 0x1f6 <lcd_command+0x18>
     1f2:	10 3c       	cpi	r17, 0xC0	; 192
     1f4:	11 f4       	brne	.+4      	; 0x1fa <lcd_command+0x1c>
		uart_newline();
     1f6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <uart_newline>
	}
#endif
}
     1fa:	1f 91       	pop	r17
     1fc:	08 95       	ret

000001fe <lcd_clear>:
}
 
// send the command to clear the display 
 
void lcd_clear(void) {
   lcd_command(CLEAR_DISPLAY);
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
   wait_about10ms();
     204:	82 e0       	ldi	r24, 0x02	; 2
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>
#ifdef WITH_UART
   uart_newline();
     20c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <uart_newline>
#endif
   lcd_line1();			// set cursor to Line1 Column 1, (only for OLED-Display)
     210:	80 e8       	ldi	r24, 0x80	; 128
     212:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
}
     216:	08 95       	ret

00000218 <lcd_init>:
 
// Initialise: 
// Must be called first .
 
void lcd_init(void) {
   wait_about30ms();
     218:	86 e0       	ldi	r24, 0x06	; 6
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>
   // to initialise, send 3 times to be shure to be in 8 Bit mode
   lcd_write_init(1);
     220:	80 e8       	ldi	r24, 0x80	; 128
     222:	60 e3       	ldi	r22, 0x30	; 48
     224:	0e 94 84 01 	call	0x308	; 0x308 <_lcd_hw_write>
   wait_about5ms();
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>
   
   lcd_write_init(1);
     230:	80 e8       	ldi	r24, 0x80	; 128
     232:	60 e3       	ldi	r22, 0x30	; 48
     234:	0e 94 84 01 	call	0x308	; 0x308 <_lcd_hw_write>
   wait1ms();
     238:	0e 94 f5 13 	call	0x27ea	; 0x27ea <wait1ms>

   lcd_write_init(1);
     23c:	80 e8       	ldi	r24, 0x80	; 128
     23e:	60 e3       	ldi	r22, 0x30	; 48
     240:	0e 94 84 01 	call	0x308	; 0x308 <_lcd_hw_write>
   wait1ms();
     244:	0e 94 f5 13 	call	0x27ea	; 0x27ea <wait1ms>

   lcd_write_init(0);		// switch to 4 Bit mode
     248:	80 e8       	ldi	r24, 0x80	; 128
     24a:	60 e2       	ldi	r22, 0x20	; 32
     24c:	0e 94 84 01 	call	0x308	; 0x308 <_lcd_hw_write>
   wait_about10ms();
     250:	82 e0       	ldi	r24, 0x02	; 2
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>

   // 4Bit / 2 rows / 5x7
   lcd_command(CMD_SetIFOptions | 0x08);
     258:	88 e2       	ldi	r24, 0x28	; 40
     25a:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>

   // Display on / Cursor off / no Blinking
   lcd_command(CMD_SetDisplayAndCursor | 0x04);
     25e:	8c e0       	ldi	r24, 0x0C	; 12
     260:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>

   // increment / no Scroll    
   lcd_command(CMD_SetEntryMode | 0x02);	
     264:	86 e0       	ldi	r24, 0x06	; 6
     266:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
   lcd_clear();
     26a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_clear>
}
     26e:	08 95       	ret

00000270 <lcd_string>:
#endif
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
     270:	ef 92       	push	r14
     272:	ff 92       	push	r15
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	e8 2e       	mov	r14, r24
     27a:	e7 01       	movw	r28, r14
     27c:	7e 01       	movw	r14, r28
     27e:	f9 2e       	mov	r15, r25
     280:	e7 01       	movw	r28, r14
    while(*data) {
     282:	02 c0       	rjmp	.+4      	; 0x288 <lcd_string+0x18>
        lcd_data(*data);
     284:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
    while(*data) {
     288:	89 91       	ld	r24, Y+
     28a:	88 23       	and	r24, r24
     28c:	d9 f7       	brne	.-10     	; 0x284 <lcd_string+0x14>
        lcd_data(*data);
        data++;
    }
}
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	ff 90       	pop	r15
     294:	ef 90       	pop	r14
     296:	08 95       	ret

00000298 <lcd_pgm_string>:

#ifdef use_lcd_pgm
//Load string from PGM  and send to LCD 
void lcd_pgm_string(const unsigned char *data) {
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = pgm_read_byte(data);
     29e:	fe 01       	movw	r30, r28
     2a0:	84 91       	lpm	r24, Z+
      if((cc==0) || (cc==128)) {
     2a2:	88 23       	and	r24, r24
     2a4:	31 f0       	breq	.+12     	; 0x2b2 <lcd_pgm_string+0x1a>
     2a6:	80 38       	cpi	r24, 0x80	; 128
     2a8:	21 f0       	breq	.+8      	; 0x2b2 <lcd_pgm_string+0x1a>
         return;
      }
      lcd_data(cc);
     2aa:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
      data++;
     2ae:	21 96       	adiw	r28, 0x01	; 1
   }
     2b0:	f6 cf       	rjmp	.-20     	; 0x29e <lcd_pgm_string+0x6>
}
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	08 95       	ret

000002b8 <lcd_fix_string>:
#endif

//Load string from PGM or EEprom and send to LCD 
void lcd_fix_string(const unsigned char *data) {
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
     2bc:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = MEM_read_byte(data);
     2be:	ce 01       	movw	r24, r28
     2c0:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__eerd_byte_m168>
      if((cc==0) || (cc==128)) {
     2c4:	88 23       	and	r24, r24
     2c6:	31 f0       	breq	.+12     	; 0x2d4 <lcd_fix_string+0x1c>
     2c8:	80 38       	cpi	r24, 0x80	; 128
     2ca:	21 f0       	breq	.+8      	; 0x2d4 <lcd_fix_string+0x1c>
         return;
      }
      lcd_data(cc);
     2cc:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
      data++;
     2d0:	21 96       	adiw	r28, 0x01	; 1
   }
     2d2:	f5 cf       	rjmp	.-22     	; 0x2be <lcd_fix_string+0x6>
}
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	08 95       	ret

000002da <lcd_fix_customchar>:

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	8c 01       	movw	r16, r24
     2e4:	c0 e0       	ldi	r28, 0x00	; 0
     2e6:	d0 e0       	ldi	r29, 0x00	; 0
    for(uint8_t i=0;i<8;i++) {
        lcd_data(MEM_read_byte(chardata));
     2e8:	c8 01       	movw	r24, r16
     2ea:	8c 0f       	add	r24, r28
     2ec:	9d 1f       	adc	r25, r29
     2ee:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__eerd_byte_m168>
     2f2:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
     2f6:	21 96       	adiw	r28, 0x01	; 1
   }
}

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
    for(uint8_t i=0;i<8;i++) {
     2f8:	c8 30       	cpi	r28, 0x08	; 8
     2fa:	d1 05       	cpc	r29, r1
     2fc:	a9 f7       	brne	.-22     	; 0x2e8 <lcd_fix_customchar+0xe>
        lcd_data(MEM_read_byte(chardata));
        chardata++;
    }
}
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	1f 91       	pop	r17
     304:	0f 91       	pop	r16
     306:	08 95       	ret

00000308 <_lcd_hw_write>:
     308:	5d 9a       	sbi	0x0b, 5	; 11
     30a:	55 9a       	sbi	0x0a, 5	; 10
     30c:	5c 98       	cbi	0x0b, 4	; 11
     30e:	54 9a       	sbi	0x0a, 4	; 10
     310:	80 fd       	sbrc	r24, 0
     312:	5c 9a       	sbi	0x0b, 4	; 11
     314:	58 98       	cbi	0x0b, 0	; 11
     316:	59 98       	cbi	0x0b, 1	; 11
     318:	5a 98       	cbi	0x0b, 2	; 11
     31a:	5b 98       	cbi	0x0b, 3	; 11
     31c:	64 fd       	sbrc	r22, 4
     31e:	58 9a       	sbi	0x0b, 0	; 11
     320:	50 9a       	sbi	0x0a, 0	; 10
     322:	65 fd       	sbrc	r22, 5
     324:	59 9a       	sbi	0x0b, 1	; 11
     326:	51 9a       	sbi	0x0a, 1	; 10
     328:	66 fd       	sbrc	r22, 6
     32a:	5a 9a       	sbi	0x0b, 2	; 11
     32c:	52 9a       	sbi	0x0a, 2	; 10
     32e:	67 fd       	sbrc	r22, 7
     330:	5b 9a       	sbi	0x0b, 3	; 11
     332:	53 9a       	sbi	0x0a, 3	; 10
     334:	00 00       	nop
     336:	5d 98       	cbi	0x0b, 5	; 11
     338:	0e 94 04 14 	call	0x2808	; 0x2808 <wait1us>
     33c:	87 fd       	sbrc	r24, 7
     33e:	11 c0       	rjmp	.+34     	; 0x362 <_lcd_hw_write_exit>
     340:	5d 9a       	sbi	0x0b, 5	; 11
     342:	58 98       	cbi	0x0b, 0	; 11
     344:	59 98       	cbi	0x0b, 1	; 11
     346:	5a 98       	cbi	0x0b, 2	; 11
     348:	5b 98       	cbi	0x0b, 3	; 11
     34a:	60 fd       	sbrc	r22, 0
     34c:	58 9a       	sbi	0x0b, 0	; 11
     34e:	61 fd       	sbrc	r22, 1
     350:	59 9a       	sbi	0x0b, 1	; 11
     352:	62 fd       	sbrc	r22, 2
     354:	5a 9a       	sbi	0x0b, 2	; 11
     356:	63 fd       	sbrc	r22, 3
     358:	5b 9a       	sbi	0x0b, 3	; 11
     35a:	00 00       	nop
     35c:	5d 98       	cbi	0x0b, 5	; 11
     35e:	0e 94 04 14 	call	0x2808	; 0x2808 <wait1us>

00000362 <_lcd_hw_write_exit>:
     362:	08 95       	ret

00000364 <__vector_7>:
#define MAIN_C
#include "Transistortester.h"

#ifndef INHIBIT_SLEEP_MODE
  // prepare sleep mode
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
     364:	18 95       	reti

00000366 <__vector_21>:
  EMPTY_INTERRUPT(ADC_vect);
     366:	18 95       	reti

00000368 <EntladePins>:
   R_DDR &= ~PinToCharge;	// switch back to input
   R_PORT &= ~PinToCharge;	// no Pull up
}

// first discharge any charge of capacitors
void EntladePins() {
     368:	af 92       	push	r10
     36a:	bf 92       	push	r11
     36c:	cf 92       	push	r12
     36e:	df 92       	push	r13
     370:	ef 92       	push	r14
     372:	ff 92       	push	r15
     374:	0f 93       	push	r16
     376:	1f 93       	push	r17
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	3a e0       	ldi	r19, 0x0A	; 10
     37e:	c3 2e       	mov	r12, r19
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     380:	28 e0       	ldi	r18, 0x08	; 8
     382:	d2 2e       	mov	r13, r18
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     R_PORT = 0;			// R-outputs auf 0
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     384:	9a e2       	ldi	r25, 0x2A	; 42
     386:	a9 2e       	mov	r10, r25
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     388:	85 e1       	ldi	r24, 0x15	; 21
     38a:	b8 2e       	mov	r11, r24
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     38c:	d7 b8       	out	0x07, r13	; 7
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     38e:	d8 b8       	out	0x08, r13	; 8
     R_PORT = 0;			// R-outputs auf 0
     390:	15 b8       	out	0x05, r1	; 5
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     392:	a4 b8       	out	0x04, r10	; 4
     adcmv[0] = W5msReadADC(PC0);	// which voltage has Pin 1?
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
     39a:	8c 01       	movw	r16, r24
     adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
     3a2:	ec 01       	movw	r28, r24
     adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     3a4:	82 e0       	ldi	r24, 0x02	; 2
     3a6:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
     if ((PartFound == PART_CELL) || (adcmv[0] < CAP_EMPTY_LEVEL) & (adcmv[1] < CAP_EMPTY_LEVEL) & (adcmv[2] < CAP_EMPTY_LEVEL)) {
     3aa:	20 91 07 01 	lds	r18, 0x0107
     3ae:	28 30       	cpi	r18, 0x08	; 8
     3b0:	c1 f0       	breq	.+48     	; 0x3e2 <EntladePins+0x7a>
     3b2:	41 e0       	ldi	r20, 0x01	; 1
     3b4:	c4 30       	cpi	r28, 0x04	; 4
     3b6:	d1 05       	cpc	r29, r1
     3b8:	08 f0       	brcs	.+2      	; 0x3bc <EntladePins+0x54>
     3ba:	40 e0       	ldi	r20, 0x00	; 0
     3bc:	21 e0       	ldi	r18, 0x01	; 1
     3be:	04 30       	cpi	r16, 0x04	; 4
     3c0:	11 05       	cpc	r17, r1
     3c2:	08 f0       	brcs	.+2      	; 0x3c6 <EntladePins+0x5e>
     3c4:	20 e0       	ldi	r18, 0x00	; 0
     3c6:	42 23       	and	r20, r18
     3c8:	50 e0       	ldi	r21, 0x00	; 0
     3ca:	21 e0       	ldi	r18, 0x01	; 1
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	84 30       	cpi	r24, 0x04	; 4
     3d0:	91 05       	cpc	r25, r1
     3d2:	10 f0       	brcs	.+4      	; 0x3d8 <EntladePins+0x70>
     3d4:	20 e0       	ldi	r18, 0x00	; 0
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	24 23       	and	r18, r20
     3da:	35 23       	and	r19, r21
     3dc:	21 15       	cp	r18, r1
     3de:	31 05       	cpc	r19, r1
     3e0:	21 f0       	breq	.+8      	; 0x3ea <EntladePins+0x82>
        ADC_DDR = TXD_MSK;		// switch all ADC-Pins to input
     3e2:	88 e0       	ldi	r24, 0x08	; 8
     3e4:	87 b9       	out	0x07, r24	; 7
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
     3e6:	14 b8       	out	0x04, r1	; 4
        return;			// all is discharged
     3e8:	4f c0       	rjmp	.+158    	; 0x488 <EntladePins+0x120>
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
     3ea:	23 e0       	ldi	r18, 0x03	; 3
     3ec:	08 3e       	cpi	r16, 0xE8	; 232
     3ee:	12 07       	cpc	r17, r18
     3f0:	10 f0       	brcs	.+4      	; 0x3f6 <EntladePins+0x8e>
  uint8_t lop_cnt;		// loop counter
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     3f2:	28 e0       	ldi	r18, 0x08	; 8
     3f4:	01 c0       	rjmp	.+2      	; 0x3f8 <EntladePins+0x90>
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
        return;			// all is discharged
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
        adc_gnd |= (1<<PC0);	//Pin 1 directly to GND
     3f6:	29 e0       	ldi	r18, 0x09	; 9
     }
     if (adcmv[1] < 1000) {
     3f8:	33 e0       	ldi	r19, 0x03	; 3
     3fa:	c8 3e       	cpi	r28, 0xE8	; 232
     3fc:	d3 07       	cpc	r29, r19
     3fe:	08 f4       	brcc	.+2      	; 0x402 <EntladePins+0x9a>
        adc_gnd |= (1<<PC1);	//Pin 2 directly to GND
     400:	22 60       	ori	r18, 0x02	; 2
     }
     if (adcmv[2] < 1000) {
     402:	33 e0       	ldi	r19, 0x03	; 3
     404:	88 3e       	cpi	r24, 0xE8	; 232
     406:	93 07       	cpc	r25, r19
     408:	08 f4       	brcc	.+2      	; 0x40c <EntladePins+0xa4>
        adc_gnd |= (1<<PC2);	//Pin 3 directly to  GND
     40a:	24 60       	ori	r18, 0x04	; 4
     }
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time
     40c:	27 b9       	out	0x07, r18	; 7

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     40e:	b4 b8       	out	0x04, r11	; 4
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     410:	c0 e0       	ldi	r28, 0x00	; 0
     412:	d0 e0       	ldi	r29, 0x00	; 0
        wdt_reset();
     414:	a8 95       	wdr
        adcmv[0] = W20msReadADC(PC0);	// which voltage has Pin 1?
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	0e 94 ce 1a 	call	0x359c	; 0x359c <W20msReadADC>
     41c:	7c 01       	movw	r14, r24
        adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
     424:	8c 01       	movw	r16, r24
        adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     426:	82 e0       	ldi	r24, 0x02	; 2
     428:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
        if (adcmv[0] < 1300) {
     42c:	24 e1       	ldi	r18, 0x14	; 20
     42e:	e2 16       	cp	r14, r18
     430:	25 e0       	ldi	r18, 0x05	; 5
     432:	f2 06       	cpc	r15, r18
     434:	08 f4       	brcc	.+2      	; 0x438 <EntladePins+0xd0>
           ADC_DDR |= (1<<PC0);	// below 1.3V , switch directly with ADC-Port to GND
     436:	38 9a       	sbi	0x07, 0	; 7
        }
        if (adcmv[1] < 1300) {
     438:	35 e0       	ldi	r19, 0x05	; 5
     43a:	04 31       	cpi	r16, 0x14	; 20
     43c:	13 07       	cpc	r17, r19
     43e:	08 f4       	brcc	.+2      	; 0x442 <EntladePins+0xda>
           ADC_DDR |= (1<<PC1);	// below 1.3V, switch directly with ADC-Port to GND
     440:	39 9a       	sbi	0x07, 1	; 7
        }
        if (adcmv[2] < 1300) {
     442:	25 e0       	ldi	r18, 0x05	; 5
     444:	84 31       	cpi	r24, 0x14	; 20
     446:	92 07       	cpc	r25, r18
     448:	08 f4       	brcc	.+2      	; 0x44c <EntladePins+0xe4>
           ADC_DDR |= (1<<PC2);	// below 1.3V, switch directly with ADC-Port to GND
     44a:	3a 9a       	sbi	0x07, 2	; 7
        }
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
     44c:	36 e0       	ldi	r19, 0x06	; 6
     44e:	e3 16       	cp	r14, r19
     450:	f1 04       	cpc	r15, r1
     452:	30 f4       	brcc	.+12     	; 0x460 <EntladePins+0xf8>
     454:	06 30       	cpi	r16, 0x06	; 6
     456:	11 05       	cpc	r17, r1
     458:	18 f4       	brcc	.+6      	; 0x460 <EntladePins+0xf8>
     45a:	86 30       	cpi	r24, 0x06	; 6
     45c:	91 05       	cpc	r25, r1
     45e:	38 f0       	brcs	.+14     	; 0x46e <EntladePins+0x106>

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     460:	21 96       	adiw	r28, 0x01	; 1
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	c4 3f       	cpi	r28, 0xF4	; 244
     466:	d8 07       	cpc	r29, r24
     468:	a9 f6       	brne	.-86     	; 0x414 <EntladePins+0xac>
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
           break;
        }
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
     46a:	d0 92 07 01 	sts	0x0107, r13

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     46e:	00 e0       	ldi	r16, 0x00	; 0
     470:	10 e0       	ldi	r17, 0x00	; 0
     472:	04 c0       	rjmp	.+8      	; 0x47c <EntladePins+0x114>
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     474:	0e 94 f5 13 	call	0x27ea	; 0x27ea <wait1ms>
     478:	0f 5f       	subi	r16, 0xFF	; 255
     47a:	1f 4f       	sbci	r17, 0xFF	; 255
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
     47c:	0c 17       	cp	r16, r28
     47e:	1d 07       	cpc	r17, r29
     480:	c8 f3       	brcs	.-14     	; 0x474 <EntladePins+0x10c>
     482:	ca 94       	dec	r12
  unsigned int clr_cnt;		// Clear Counter
  uint8_t lop_cnt;		// loop counter
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     484:	09 f0       	breq	.+2      	; 0x488 <EntladePins+0x120>
     486:	82 cf       	rjmp	.-252    	; 0x38c <EntladePins+0x24>
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     }
  } // end while
 }
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	ff 90       	pop	r15
     492:	ef 90       	pop	r14
     494:	df 90       	pop	r13
     496:	cf 90       	pop	r12
     498:	bf 90       	pop	r11
     49a:	af 90       	pop	r10
     49c:	08 95       	ret

0000049e <RefVoltage>:



#ifdef AUTO_RH
void RefVoltage(void) {
     49e:	ff 92       	push	r15
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;

  #ifdef AUTO_CAL
  referenz = ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset));
     4a8:	8e ea       	ldi	r24, 0xAE	; 174
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__eerd_word_m168>
     4b0:	20 91 41 01 	lds	r18, 0x0141
     4b4:	30 91 42 01 	lds	r19, 0x0142
     4b8:	28 0f       	add	r18, r24
     4ba:	39 1f       	adc	r19, r25
  #else
  referenz = ref_mv + REF_C_KORR;
  #endif
  if (referenz >= Ref_Tab_Beginn) {
     4bc:	83 e0       	ldi	r24, 0x03	; 3
     4be:	28 3e       	cpi	r18, 0xE8	; 232
     4c0:	38 07       	cpc	r19, r24
     4c2:	20 f0       	brcs	.+8      	; 0x4cc <RefVoltage+0x2e>
     referenz -= Ref_Tab_Beginn;
     4c4:	c9 01       	movw	r24, r18
     4c6:	88 5e       	subi	r24, 0xE8	; 232
     4c8:	93 40       	sbci	r25, 0x03	; 3
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <RefVoltage+0x32>
  } else  {
     referenz = 0;		// limit to begin of table
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = referenz / Ref_Tab_Abstand;
     4d0:	62 e3       	ldi	r22, 0x32	; 50
     4d2:	70 e0       	ldi	r23, 0x00	; 0
     4d4:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <__udivmodhi4>
  tabres = referenz % Ref_Tab_Abstand;
     4d8:	f8 2e       	mov	r15, r24
  tabres = Ref_Tab_Abstand-tabres;
  if (tabind > 7) {
     tabind = 7;		// limit to end of table
  }
  // interpolate the table of factors
  y1 = MEM_read_word(&RHtab[tabind]);
     4da:	68 30       	cpi	r22, 0x08	; 8
     4dc:	08 f0       	brcs	.+2      	; 0x4e0 <RefVoltage+0x42>
     4de:	67 e0       	ldi	r22, 0x07	; 7
     4e0:	c6 2f       	mov	r28, r22
     4e2:	d0 e0       	ldi	r29, 0x00	; 0
     4e4:	ce 01       	movw	r24, r28
     4e6:	88 0f       	add	r24, r24
     4e8:	99 1f       	adc	r25, r25
     4ea:	86 5a       	subi	r24, 0xA6	; 166
     4ec:	9f 4f       	sbci	r25, 0xFF	; 255
     4ee:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__eerd_word_m168>
     4f2:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RHtab[tabind+1]);
     4f4:	ce 01       	movw	r24, r28
     4f6:	88 0f       	add	r24, r24
     4f8:	99 1f       	adc	r25, r25
     4fa:	84 5a       	subi	r24, 0xA4	; 164
     4fc:	9f 4f       	sbci	r25, 0xFF	; 255
     4fe:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__eerd_word_m168>
     502:	9c 01       	movw	r18, r24
  } else  {
     referenz = 0;		// limit to begin of table
  }
  tabind = referenz / Ref_Tab_Abstand;
  tabres = referenz % Ref_Tab_Abstand;
  tabres = Ref_Tab_Abstand-tabres;
     504:	42 e3       	ldi	r20, 0x32	; 50
     506:	4f 19       	sub	r20, r15
  }
  // interpolate the table of factors
  y1 = MEM_read_word(&RHtab[tabind]);
  y2 = MEM_read_word(&RHtab[tabind+1]);
  // RHmultip is the interpolated factor to compute capacity from load time with 470k
  RHmultip = ((y1 - y2) * tabres + (Ref_Tab_Abstand/2)) / Ref_Tab_Abstand + y2;
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	08 1b       	sub	r16, r24
     50c:	19 0b       	sbc	r17, r25
     50e:	40 9f       	mul	r20, r16
     510:	c0 01       	movw	r24, r0
     512:	41 9f       	mul	r20, r17
     514:	90 0d       	add	r25, r0
     516:	50 9f       	mul	r21, r16
     518:	90 0d       	add	r25, r0
     51a:	11 24       	eor	r1, r1
     51c:	49 96       	adiw	r24, 0x19	; 25
     51e:	62 e3       	ldi	r22, 0x32	; 50
     520:	70 e0       	ldi	r23, 0x00	; 0
     522:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <__udivmodhi4>
     526:	62 0f       	add	r22, r18
     528:	73 1f       	adc	r23, r19
     52a:	70 93 01 01 	sts	0x0101, r23
     52e:	60 93 00 01 	sts	0x0100, r22
 }
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	1f 91       	pop	r17
     538:	0f 91       	pop	r16
     53a:	ff 90       	pop	r15
     53c:	08 95       	ret

0000053e <lcd_clear_line>:
#endif

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
     53e:	1f 93       	push	r17
     540:	14 e1       	ldi	r17, 0x14	; 20
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    lcd_space();
     542:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_space>
     546:	11 50       	subi	r17, 0x01	; 1

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
     548:	e1 f7       	brne	.-8      	; 0x542 <lcd_clear_line+0x4>
    lcd_space();
 }
}
     54a:	1f 91       	pop	r17
     54c:	08 95       	ret

0000054e <DisplayValue>:
 *    e.g: p = 10^-12 -> -12
 *  - unit character (0 = none)
 *  digits = 2, 3 or 4
 */
void DisplayValue(unsigned long Value, int8_t Exponent, unsigned char Unit, unsigned char digits)
{
     54e:	2f 92       	push	r2
     550:	3f 92       	push	r3
     552:	4f 92       	push	r4
     554:	5f 92       	push	r5
     556:	7f 92       	push	r7
     558:	8f 92       	push	r8
     55a:	9f 92       	push	r9
     55c:	af 92       	push	r10
     55e:	bf 92       	push	r11
     560:	cf 92       	push	r12
     562:	df 92       	push	r13
     564:	ef 92       	push	r14
     566:	ff 92       	push	r15
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	df 93       	push	r29
     56e:	cf 93       	push	r28
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
     574:	2f 97       	sbiw	r28, 0x0f	; 15
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	f8 94       	cli
     57a:	de bf       	out	0x3e, r29	; 62
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	cd bf       	out	0x3d, r28	; 61
     580:	6b 01       	movw	r12, r22
     582:	7c 01       	movw	r14, r24
     584:	14 2f       	mov	r17, r20
     586:	72 2e       	mov	r7, r18
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
     588:	03 30       	cpi	r16, 0x03	; 3
     58a:	29 f0       	breq	.+10     	; 0x596 <DisplayValue+0x48>
  if (digits == 4) Limit = 10000;
     58c:	04 30       	cpi	r16, 0x04	; 4
     58e:	31 f0       	breq	.+12     	; 0x59c <DisplayValue+0x4e>
  uint8_t           Offset;		/* exponent of offset to next 10^3 step */
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
     590:	84 e6       	ldi	r24, 0x64	; 100
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	14 c0       	rjmp	.+40     	; 0x5be <DisplayValue+0x70>
  if (digits == 3) Limit = 1000;
     596:	88 ee       	ldi	r24, 0xE8	; 232
     598:	93 e0       	ldi	r25, 0x03	; 3
     59a:	11 c0       	rjmp	.+34     	; 0x5be <DisplayValue+0x70>
  if (digits == 4) Limit = 10000;
     59c:	80 e1       	ldi	r24, 0x10	; 16
     59e:	97 e2       	ldi	r25, 0x27	; 39
     5a0:	0e c0       	rjmp	.+28     	; 0x5be <DisplayValue+0x70>
  while (Value >= Limit)
  {
    Value += 5;				/* for automagic rounding */
     5a2:	c7 01       	movw	r24, r14
     5a4:	b6 01       	movw	r22, r12
     5a6:	6b 5f       	subi	r22, 0xFB	; 251
     5a8:	7f 4f       	sbci	r23, 0xFF	; 255
     5aa:	8f 4f       	sbci	r24, 0xFF	; 255
     5ac:	9f 4f       	sbci	r25, 0xFF	; 255
    Value = Value / 10;			/* scale down by 10^1 */
     5ae:	a5 01       	movw	r20, r10
     5b0:	94 01       	movw	r18, r8
     5b2:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
     5b6:	69 01       	movw	r12, r18
     5b8:	7a 01       	movw	r14, r20
    Exponent++;				/* increase exponent by 1 */
     5ba:	1f 5f       	subi	r17, 0xFF	; 255
     5bc:	08 c0       	rjmp	.+16     	; 0x5ce <DisplayValue+0x80>


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
  if (digits == 4) Limit = 10000;
  while (Value >= Limit)
     5be:	1c 01       	movw	r2, r24
     5c0:	44 24       	eor	r4, r4
     5c2:	55 24       	eor	r5, r5
  {
    Value += 5;				/* for automagic rounding */
    Value = Value / 10;			/* scale down by 10^1 */
     5c4:	6a e0       	ldi	r22, 0x0A	; 10
     5c6:	86 2e       	mov	r8, r22
     5c8:	91 2c       	mov	r9, r1
     5ca:	a1 2c       	mov	r10, r1
     5cc:	b1 2c       	mov	r11, r1


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
  if (digits == 4) Limit = 10000;
  while (Value >= Limit)
     5ce:	c2 14       	cp	r12, r2
     5d0:	d3 04       	cpc	r13, r3
     5d2:	e4 04       	cpc	r14, r4
     5d4:	f5 04       	cpc	r15, r5
     5d6:	28 f7       	brcc	.-54     	; 0x5a2 <DisplayValue+0x54>


  /*
   *  determine prefix
   */
  Length = Exponent + 12;
     5d8:	81 2f       	mov	r24, r17
     5da:	84 5f       	subi	r24, 0xF4	; 244
     5dc:	83 31       	cpi	r24, 0x13	; 19
     5de:	08 f0       	brcs	.+2      	; 0x5e2 <DisplayValue+0x94>
     5e0:	82 e1       	ldi	r24, 0x12	; 18
  if (Length <  0) Length = 0;		/* Limit to minimum prefix */
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
  Index = Length / 3;
     5e2:	23 e0       	ldi	r18, 0x03	; 3
  Offset = Length % 3;
     5e4:	62 2f       	mov	r22, r18
     5e6:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__udivmodqi4>
     5ea:	19 2f       	mov	r17, r25
    if (Offset > 0)
     5ec:	99 23       	and	r25, r25
     5ee:	19 f0       	breq	.+6      	; 0x5f6 <DisplayValue+0xa8>
    {
      Index++;				/* adjust index for exponent offset, take next prefix */
     5f0:	8f 5f       	subi	r24, 0xFF	; 255
      Offset = 3 - Offset;		/* reverse value (1 or 2) */
     5f2:	29 1b       	sub	r18, r25
     5f4:	12 2f       	mov	r17, r18
    }
  Prefix = MEM_read_byte((uint8_t *)(&PrefixTab[Index]));   /* look up prefix in table */
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	89 55       	subi	r24, 0x59	; 89
     5fa:	9e 4f       	sbci	r25, 0xFE	; 254
     5fc:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__eerd_byte_m168>
     600:	b8 2e       	mov	r11, r24
  /*
   *  display value
   */

  /* convert value into string */
  utoa((unsigned int)Value, OutBuffer, 10);
     602:	c6 01       	movw	r24, r12
     604:	6e 01       	movw	r12, r28
     606:	08 94       	sec
     608:	c1 1c       	adc	r12, r1
     60a:	d1 1c       	adc	r13, r1
     60c:	b6 01       	movw	r22, r12
     60e:	4a e0       	ldi	r20, 0x0A	; 10
     610:	50 e0       	ldi	r21, 0x00	; 0
     612:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <utoa>
  Length = strlen(OutBuffer);
     616:	f6 01       	movw	r30, r12
     618:	01 90       	ld	r0, Z+
     61a:	00 20       	and	r0, r0
     61c:	e9 f7       	brne	.-6      	; 0x618 <DisplayValue+0xca>
     61e:	31 97       	sbiw	r30, 0x01	; 1
     620:	2e 2e       	mov	r2, r30
     622:	2c 18       	sub	r2, r12

  /* position of dot */
  Exponent = Length - Offset;		/* calculate position */
     624:	82 2c       	mov	r8, r2
     626:	81 1a       	sub	r8, r17

  if (Exponent <= 0)			/* we have to prepend "0." */
     628:	18 14       	cp	r1, r8
     62a:	44 f0       	brlt	.+16     	; 0x63c <DisplayValue+0xee>
  {
    /* 0: factor 10 / -1: factor 100 */
//    lcd_data('0');
    lcd_data('.');
     62c:	8e e2       	ldi	r24, 0x2E	; 46
     62e:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
    if (Exponent < 0) lcd_data('0');	/* extra 0 for factor 100 */
     632:	88 20       	and	r8, r8
     634:	19 f0       	breq	.+6      	; 0x63c <DisplayValue+0xee>
     636:	80 e3       	ldi	r24, 0x30	; 48
     638:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
  }

  if (Offset == 0) Exponent = -1;	/* disable dot if not needed */
     63c:	11 23       	and	r17, r17
     63e:	11 f4       	brne	.+4      	; 0x644 <DisplayValue+0xf6>
     640:	88 24       	eor	r8, r8
     642:	8a 94       	dec	r8
     644:	6e 01       	movw	r12, r28
     646:	08 94       	sec
     648:	c1 1c       	adc	r12, r1
     64a:	d1 1c       	adc	r13, r1
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     64c:	00 e0       	ldi	r16, 0x00	; 0
     64e:	10 e0       	ldi	r17, 0x00	; 0
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    Index++;				/* next one */
    if (Index == Exponent) {
     650:	99 24       	eor	r9, r9
     652:	87 fc       	sbrc	r8, 7
     654:	90 94       	com	r9
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     656:	0d c0       	rjmp	.+26     	; 0x672 <DisplayValue+0x124>
  {
    lcd_data(OutBuffer[Index]);		/* display char */
     658:	0f 5f       	subi	r16, 0xFF	; 255
     65a:	1f 4f       	sbci	r17, 0xFF	; 255
     65c:	f6 01       	movw	r30, r12
     65e:	81 91       	ld	r24, Z+
     660:	6f 01       	movw	r12, r30
     662:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
    Index++;				/* next one */
    if (Index == Exponent) {
     666:	08 15       	cp	r16, r8
     668:	19 05       	cpc	r17, r9
     66a:	19 f4       	brne	.+6      	; 0x672 <DisplayValue+0x124>
      lcd_data('.');			/* display dot */
     66c:	8e e2       	ldi	r24, 0x2E	; 46
     66e:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     672:	02 15       	cp	r16, r2
     674:	88 f3       	brcs	.-30     	; 0x658 <DisplayValue+0x10a>
      lcd_data('.');			/* display dot */
    }
  }

  /* display prefix and unit */
  if (Prefix != 0) lcd_data(Prefix);
     676:	bb 20       	and	r11, r11
     678:	19 f0       	breq	.+6      	; 0x680 <DisplayValue+0x132>
     67a:	8b 2d       	mov	r24, r11
     67c:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
  if (Unit) lcd_data(Unit);
     680:	77 20       	and	r7, r7
     682:	19 f0       	breq	.+6      	; 0x68a <DisplayValue+0x13c>
     684:	87 2d       	mov	r24, r7
     686:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
}
     68a:	2f 96       	adiw	r28, 0x0f	; 15
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	f8 94       	cli
     690:	de bf       	out	0x3e, r29	; 62
     692:	0f be       	out	0x3f, r0	; 63
     694:	cd bf       	out	0x3d, r28	; 61
     696:	cf 91       	pop	r28
     698:	df 91       	pop	r29
     69a:	1f 91       	pop	r17
     69c:	0f 91       	pop	r16
     69e:	ff 90       	pop	r15
     6a0:	ef 90       	pop	r14
     6a2:	df 90       	pop	r13
     6a4:	cf 90       	pop	r12
     6a6:	bf 90       	pop	r11
     6a8:	af 90       	pop	r10
     6aa:	9f 90       	pop	r9
     6ac:	8f 90       	pop	r8
     6ae:	7f 90       	pop	r7
     6b0:	5f 90       	pop	r5
     6b2:	4f 90       	pop	r4
     6b4:	3f 90       	pop	r3
     6b6:	2f 90       	pop	r2
     6b8:	08 95       	ret

000006ba <RvalOut>:
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
      lcd_space();
   }
}

void RvalOut(uint8_t ii) {	
     6ba:	0f 93       	push	r16
   // output of resistor value

   DisplayValue(resis[ii].rx,-1,LCD_CHAR_OMEGA,4);
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	2b e0       	ldi	r18, 0x0B	; 11
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	82 9f       	mul	r24, r18
     6c4:	f0 01       	movw	r30, r0
     6c6:	83 9f       	mul	r24, r19
     6c8:	f0 0d       	add	r31, r0
     6ca:	92 9f       	mul	r25, r18
     6cc:	f0 0d       	add	r31, r0
     6ce:	11 24       	eor	r1, r1
     6d0:	e8 5e       	subi	r30, 0xE8	; 232
     6d2:	fe 4f       	sbci	r31, 0xFE	; 254
     6d4:	60 81       	ld	r22, Z
     6d6:	71 81       	ldd	r23, Z+1	; 0x01
     6d8:	82 81       	ldd	r24, Z+2	; 0x02
     6da:	93 81       	ldd	r25, Z+3	; 0x03
     6dc:	4f ef       	ldi	r20, 0xFF	; 255
     6de:	24 ef       	ldi	r18, 0xF4	; 244
     6e0:	04 e0       	ldi	r16, 0x04	; 4
     6e2:	0e 94 a7 02 	call	0x54e	; 0x54e <DisplayValue>
   lcd_space();
     6e6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_space>
 }
     6ea:	0f 91       	pop	r16
     6ec:	08 95       	ret

000006ee <mVAusgabe>:
   lcd_line2(); 				//2. row
   lcd_fix_string(Uf_str);			//"Uf="
   mVAusgabe(bcdnum >> 4);
   mVAusgabe(bcdnum & 0x0f);
}
void mVAusgabe(uint8_t nn) {
     6ee:	0f 93       	push	r16
   if (nn < 3) {
     6f0:	83 30       	cpi	r24, 0x03	; 3
     6f2:	98 f4       	brcc	.+38     	; 0x71a <mVAusgabe+0x2c>
      // Output in mV units
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
     6f4:	e8 2f       	mov	r30, r24
     6f6:	f0 e0       	ldi	r31, 0x00	; 0
     6f8:	ee 0f       	add	r30, r30
     6fa:	ff 1f       	adc	r31, r31
     6fc:	ee 0f       	add	r30, r30
     6fe:	ff 1f       	adc	r31, r31
     700:	ed 58       	subi	r30, 0x8D	; 141
     702:	fe 4f       	sbci	r31, 0xFE	; 254
     704:	62 81       	ldd	r22, Z+2	; 0x02
     706:	73 81       	ldd	r23, Z+3	; 0x03
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	4d ef       	ldi	r20, 0xFD	; 253
     70e:	26 e5       	ldi	r18, 0x56	; 86
     710:	03 e0       	ldi	r16, 0x03	; 3
     712:	0e 94 a7 02 	call	0x54e	; 0x54e <DisplayValue>
      lcd_space();
     716:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_space>
   }
}
     71a:	0f 91       	pop	r16
     71c:	08 95       	ret

0000071e <UfAusgabe>:
// output of flux voltage for 1-2 diodes in row 2
// bcdnum = Numbers of both Diodes:
// higher 4 Bit  number of first Diode
// lower 4 Bit  number of second Diode (Structure diodes[nn])
// if number >= 3  no output is done
void UfAusgabe(uint8_t bcdnum) {
     71e:	1f 93       	push	r17
     720:	18 2f       	mov	r17, r24

   lcd_line2(); 				//2. row
     722:	80 ec       	ldi	r24, 0xC0	; 192
     724:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
   lcd_fix_string(Uf_str);			//"Uf="
     728:	89 e0       	ldi	r24, 0x09	; 9
     72a:	91 e0       	ldi	r25, 0x01	; 1
     72c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
   mVAusgabe(bcdnum >> 4);
     730:	81 2f       	mov	r24, r17
     732:	82 95       	swap	r24
     734:	8f 70       	andi	r24, 0x0F	; 15
     736:	0e 94 77 03 	call	0x6ee	; 0x6ee <mVAusgabe>
   mVAusgabe(bcdnum & 0x0f);
     73a:	81 2f       	mov	r24, r17
     73c:	8f 70       	andi	r24, 0x0F	; 15
     73e:	0e 94 77 03 	call	0x6ee	; 0x6ee <mVAusgabe>
}
     742:	1f 91       	pop	r17
     744:	08 95       	ret

00000746 <sleep_5ms>:
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
      pause = 0;
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     746:	42 e0       	ldi	r20, 0x02	; 2
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     748:	1c c0       	rjmp	.+56     	; 0x782 <sleep_5ms+0x3c>
  {
 #if 3000 > RESTART_DELAY_US
   if (pause > 1)
     74a:	82 30       	cpi	r24, 0x02	; 2
     74c:	91 05       	cpc	r25, r1
     74e:	18 f0       	brcs	.+6      	; 0x756 <sleep_5ms+0x10>
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
      pause -= 2;
     750:	02 97       	sbiw	r24, 0x02	; 2
  {
 #if 3000 > RESTART_DELAY_US
   if (pause > 1)
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
     752:	3e e3       	ldi	r19, 0x3E	; 62
     754:	03 c0       	rjmp	.+6      	; 0x75c <sleep_5ms+0x16>
      pause -= 2;
     } else {
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
     756:	37 e1       	ldi	r19, 0x17	; 23
      pause = 0;
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	90 e0       	ldi	r25, 0x00	; 0
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
     75c:	20 91 b2 00 	lds	r18, 0x00B2
     760:	23 0f       	add	r18, r19
     762:	20 93 b3 00 	sts	0x00B3, r18
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     766:	40 93 70 00 	sts	0x0070, r20
//   set_sleep_mode(SLEEP_MODE_PWR_SAVE);
   set_sleep_mode(SLEEP_MODE_PWR_SAVE);
     76a:	23 b7       	in	r18, 0x33	; 51
     76c:	21 7f       	andi	r18, 0xF1	; 241
     76e:	26 60       	ori	r18, 0x06	; 6
     770:	23 bf       	out	0x33, r18	; 51
//   set_sleep_mode(SLEEP_MODE_IDLE);
   sleep_mode();
     772:	23 b7       	in	r18, 0x33	; 51
     774:	21 60       	ori	r18, 0x01	; 1
     776:	23 bf       	out	0x33, r18	; 51
     778:	88 95       	sleep
     77a:	23 b7       	in	r18, 0x33	; 51
     77c:	2e 7f       	andi	r18, 0xFE	; 254
     77e:	23 bf       	out	0x33, r18	; 51
// wake up after output compare match interrupt
 #else
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
 #endif
   wdt_reset();
     780:	a8 95       	wdr
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     782:	00 97       	sbiw	r24, 0x00	; 0
     784:	11 f7       	brne	.-60     	; 0x74a <sleep_5ms+0x4>
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
 #endif
   wdt_reset();
  }
TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
     786:	10 92 70 00 	sts	0x0070, r1
}
     78a:	08 95       	ret

0000078c <ChargePin10ms>:
 }

//******************************************************************
#include "CheckPins.c"

void ChargePin10ms(uint8_t PinToCharge, uint8_t ChargeDirection) {
     78c:	1f 93       	push	r17
     78e:	18 2f       	mov	r17, r24
   //Will be used by discharge of MOSFET Gates or to load big capacities.
   //Parameters:
   //PinToCharge: specifies the pin as mask for R-Port
   //ChargeDirection: 0 = switch to GND (N-Kanal-FET), 1= switch to VCC(P-Kanal-FET)

   if(ChargeDirection&1) {
     790:	60 ff       	sbrs	r22, 0
     792:	03 c0       	rjmp	.+6      	; 0x79a <ChargePin10ms+0xe>
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
     794:	85 b1       	in	r24, 0x05	; 5
     796:	81 2b       	or	r24, r17
     798:	03 c0       	rjmp	.+6      	; 0x7a0 <ChargePin10ms+0x14>
   } else {
      R_PORT &= ~PinToCharge; // or 0 (GND)
     79a:	95 b1       	in	r25, 0x05	; 5
     79c:	80 95       	com	r24
     79e:	89 23       	and	r24, r25
     7a0:	85 b9       	out	0x05, r24	; 5
   }
   R_DDR |= PinToCharge;		//switch Pin to output, across R to GND or VCC
     7a2:	84 b1       	in	r24, 0x04	; 4
     7a4:	81 2b       	or	r24, r17
     7a6:	84 b9       	out	0x04, r24	; 4
   wait_about10ms();			// wait about 10ms
     7a8:	82 e0       	ldi	r24, 0x02	; 2
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>
   // switch back Input, no current
   R_DDR &= ~PinToCharge;	// switch back to input
     7b0:	84 b1       	in	r24, 0x04	; 4
     7b2:	10 95       	com	r17
     7b4:	81 23       	and	r24, r17
     7b6:	84 b9       	out	0x04, r24	; 4
   R_PORT &= ~PinToCharge;	// no Pull up
     7b8:	85 b1       	in	r24, 0x05	; 5
     7ba:	81 23       	and	r24, r17
     7bc:	85 b9       	out	0x05, r24	; 5
}
     7be:	1f 91       	pop	r17
     7c0:	08 95       	ret

000007c2 <CheckPins>:
//******************************************************************
void CheckPins(uint8_t HighPin, uint8_t LowPin, uint8_t TristatePin)
  {
     7c2:	2f 92       	push	r2
     7c4:	3f 92       	push	r3
     7c6:	4f 92       	push	r4
     7c8:	5f 92       	push	r5
     7ca:	6f 92       	push	r6
     7cc:	7f 92       	push	r7
     7ce:	8f 92       	push	r8
     7d0:	9f 92       	push	r9
     7d2:	af 92       	push	r10
     7d4:	bf 92       	push	r11
     7d6:	cf 92       	push	r12
     7d8:	df 92       	push	r13
     7da:	ef 92       	push	r14
     7dc:	ff 92       	push	r15
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
     7e2:	df 93       	push	r29
     7e4:	cf 93       	push	r28
     7e6:	cd b7       	in	r28, 0x3d	; 61
     7e8:	de b7       	in	r29, 0x3e	; 62
     7ea:	66 97       	sbiw	r28, 0x16	; 22
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	f8 94       	cli
     7f0:	de bf       	out	0x3e, r29	; 62
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	cd bf       	out	0x3d, r28	; 61
     7f6:	18 2f       	mov	r17, r24
     7f8:	36 2e       	mov	r3, r22
     7fa:	24 2e       	mov	r2, r20
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
     7fc:	a8 95       	wdr
//  #define RR680MI resis680mi
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = MEM_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
     7fe:	a6 2e       	mov	r10, r22
     800:	bb 24       	eor	r11, r11
     802:	c5 01       	movw	r24, r10
     804:	80 56       	subi	r24, 0x60	; 96
     806:	9e 4f       	sbci	r25, 0xFE	; 254
     808:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__eerd_byte_m168>
     80c:	8a 83       	std	Y+2, r24	; 0x02
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
  TriPinRL = MEM_read_byte(&PinRLtab[TristatePin]);	// intruction for TristatePin R_L
     80e:	82 2d       	mov	r24, r2
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	80 56       	subi	r24, 0x60	; 96
     814:	9e 4f       	sbci	r25, 0xFE	; 254
     816:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__eerd_byte_m168>
     81a:	d8 2e       	mov	r13, r24
  TriPinRH = TriPinRL + TriPinRL;			// intruction for TristatePin R_H
     81c:	08 2f       	mov	r16, r24
     81e:	00 0f       	add	r16, r16
  HiPinRL = MEM_read_byte(&PinRLtab[HighPin]);		// intruction for HighPin R_L
     820:	e1 2e       	mov	r14, r17
     822:	ff 24       	eor	r15, r15
     824:	c7 01       	movw	r24, r14
     826:	80 56       	subi	r24, 0x60	; 96
     828:	9e 4f       	sbci	r25, 0xFE	; 254
     82a:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__eerd_byte_m168>
     82e:	c8 2e       	mov	r12, r24
  HiPinRH = HiPinRL + HiPinRL;				// intruction for HighPin R_H
     830:	28 2f       	mov	r18, r24
     832:	22 0f       	add	r18, r18
     834:	28 87       	std	Y+8, r18	; 0x08

  HiADCp = MEM_read_byte(&PinADCtab[HighPin]);		// intruction for ADC High-Pin 
     836:	c7 01       	movw	r24, r14
     838:	8d 55       	subi	r24, 0x5D	; 93
     83a:	9e 4f       	sbci	r25, 0xFE	; 254
     83c:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__eerd_byte_m168>
     840:	89 83       	std	Y+1, r24	; 0x01
  LoADCp = MEM_read_byte(&PinADCtab[LowPin]);		// intruction for ADC Low-Pin
     842:	c5 01       	movw	r24, r10
     844:	8d 55       	subi	r24, 0x5D	; 93
     846:	9e 4f       	sbci	r25, 0xFE	; 254
     848:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__eerd_byte_m168>
  HiADCm = HiADCp | TXD_MSK;
     84c:	39 81       	ldd	r19, Y+1	; 0x01
     84e:	38 60       	ori	r19, 0x08	; 8
     850:	39 83       	std	Y+1, r19	; 0x01
  HiADCp |= TXD_VAL;
  LoADCm = LoADCp | TXD_MSK;
     852:	88 60       	ori	r24, 0x08	; 8
     854:	8b 83       	std	Y+3, r24	; 0x03
  LoADCp |= TXD_VAL;

  //setting of Pins 
  R_PORT = 0;				//resistor-Port outputs to 0
     856:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//Low-Pin to output and across R_L to GND
     858:	8a 81       	ldd	r24, Y+2	; 0x02
     85a:	84 b9       	out	0x04, r24	; 4
  ADC_DDR = HiADCm;		//High-Pin to output
     85c:	37 b9       	out	0x07, r19	; 7
  ADC_PORT = HiADCp;		//High-Pin fix to Vcc
     85e:	38 b9       	out	0x08, r19	; 8
  //for some MOSFET the gate (TristatePin) must be discharged
  ChargePin10ms(TriPinRL,0);		//discharge for N-Kanal
     860:	8d 2d       	mov	r24, r13
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	0e 94 c6 03 	call	0x78c	; 0x78c <ChargePin10ms>
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin 
     868:	83 2d       	mov	r24, r3
     86a:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
     86e:	9a 87       	std	Y+10, r25	; 0x0a
     870:	89 87       	std	Y+9, r24	; 0x09
  if(adc.lp_otr >= 977) {		//no current now? 
     872:	a3 e0       	ldi	r26, 0x03	; 3
     874:	81 3d       	cpi	r24, 0xD1	; 209
     876:	9a 07       	cpc	r25, r26
     878:	48 f0       	brcs	.+18     	; 0x88c <CheckPins+0xca>
     ChargePin10ms(TriPinRL,1);	 	//else: discharge for P-channel (Gate to VCC)
     87a:	8d 2d       	mov	r24, r13
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	0e 94 c6 03 	call	0x78c	; 0x78c <ChargePin10ms>
     adc.lp_otr = ReadADC(LowPin);	//read voltage of Low-Pin again
     882:	83 2d       	mov	r24, r3
     884:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
     888:	9a 87       	std	Y+10, r25	; 0x0a
     88a:	89 87       	std	Y+9, r24	; 0x09
  lcd_line2();
  lcd_clear_line();
  lcd_line2();
#endif

  if(adc.lp_otr > 92) {  //there is some current without TristatePin current 
     88c:	e9 85       	ldd	r30, Y+9	; 0x09
     88e:	fa 85       	ldd	r31, Y+10	; 0x0a
     890:	ed 35       	cpi	r30, 0x5D	; 93
     892:	f1 05       	cpc	r31, r1
     894:	08 f4       	brcc	.+2      	; 0x898 <CheckPins+0xd6>
     896:	aa c0       	rjmp	.+340    	; 0x9ec <CheckPins+0x22a>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test if N-JFET or if self-conducting N-MOSFET
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
     898:	8a 81       	ldd	r24, Y+2	; 0x02
     89a:	80 2b       	or	r24, r16
     89c:	84 b9       	out	0x04, r24	; 4
     adc.lp1 = W20msReadADC(LowPin);	//measure voltage at the assumed Source 
     89e:	83 2d       	mov	r24, r3
     8a0:	0e 94 ce 1a 	call	0x359c	; 0x359c <W20msReadADC>
     8a4:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     8a6:	82 2d       	mov	r24, r2
     8a8:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
     8ac:	7c 01       	movw	r14, r24
     R_PORT = TriPinRH;			//switch R_H for Tristate-Pin (probably Gate) to VCC
     8ae:	05 b9       	out	0x05, r16	; 5
     adc.lp2 = W20msReadADC(LowPin);	//measure voltage at the assumed Source again
     8b0:	83 2d       	mov	r24, r3
     8b2:	0e 94 ce 1a 	call	0x359c	; 0x359c <W20msReadADC>
     //If it is a self-conducting MOSFET or JFET, then must be: adc.lp2 > adc.lp1 
     if(adc.lp2>(adc.lp1+488)) {
     8b6:	95 01       	movw	r18, r10
     8b8:	28 51       	subi	r18, 0x18	; 24
     8ba:	3e 4f       	sbci	r19, 0xFE	; 254
     8bc:	28 17       	cp	r18, r24
     8be:	39 07       	cpc	r19, r25
     8c0:	08 f0       	brcs	.+2      	; 0x8c4 <CheckPins+0x102>
     8c2:	40 c0       	rjmp	.+128    	; 0x944 <CheckPins+0x182>
        //measure voltage at the  Gate, differ between MOSFET and JFET
        ADC_PORT = TXD_VAL;
     8c4:	88 e0       	ldi	r24, 0x08	; 8
     8c6:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = LoADCm;	//Low-Pin fix to GND
     8c8:	fb 81       	ldd	r31, Y+3	; 0x03
     8ca:	f7 b9       	out	0x07, r31	; 7
        R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     8cc:	80 2f       	mov	r24, r16
     8ce:	8c 29       	or	r24, r12
     8d0:	84 b9       	out	0x04, r24	; 4
        R_PORT = TriPinRH | HiPinRL;	//switch R_L for High-Pin to VCC
     8d2:	85 b9       	out	0x05, r24	; 5
        adc.lp2 = W20msReadADC(TristatePin); //read voltage of assumed Gate 
     8d4:	82 2d       	mov	r24, r2
     8d6:	0e 94 ce 1a 	call	0x359c	; 0x359c <W20msReadADC>
        if(adc.lp2>3911) {  //MOSFET
     8da:	2f e0       	ldi	r18, 0x0F	; 15
     8dc:	88 34       	cpi	r24, 0x48	; 72
     8de:	92 07       	cpc	r25, r18
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <CheckPins+0x12a>
           PartFound = PART_FET;	//N-Kanal-MOSFET
     8e2:	83 e0       	ldi	r24, 0x03	; 3
     8e4:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_N_D_MOS; //Depletion-MOSFET
     8e8:	84 e0       	ldi	r24, 0x04	; 4
     8ea:	04 c0       	rjmp	.+8      	; 0x8f4 <CheckPins+0x132>
        } else {  //JFET (pn-passage between Gate and Source is conducting )
           PartFound = PART_FET;	//N-Kanal-JFET
     8ec:	83 e0       	ldi	r24, 0x03	; 3
     8ee:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_N_JFET;
     8f2:	86 e0       	ldi	r24, 0x06	; 6
     8f4:	80 93 06 01 	sts	0x0106, r24
        }
//      if ((PartReady == 0) || (adc.lp1 > trans.uBE[0])) 
//      there is no way to find out the right Source / Drain
        trans.uBE[0] = adc.lp1;
     8f8:	b0 92 55 01 	sts	0x0155, r11
     8fc:	a0 92 54 01 	sts	0x0154, r10
        gthvoltage = adc.lp1 - adc.tp1;	//voltage GS (Source - Gate)
     900:	c5 01       	movw	r24, r10
     902:	8e 19       	sub	r24, r14
     904:	9f 09       	sbc	r25, r15
     906:	90 93 5d 01 	sts	0x015D, r25
     90a:	80 93 5c 01 	sts	0x015C, r24
        trans.uBE[1] = (unsigned int)(((unsigned long)adc.lp1 * 1000) / RR680MI); // Id 0.01mA
     90e:	b5 01       	movw	r22, r10
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	28 ee       	ldi	r18, 0xE8	; 232
     916:	33 e0       	ldi	r19, 0x03	; 3
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
     920:	20 91 02 01 	lds	r18, 0x0102
     924:	30 91 03 01 	lds	r19, 0x0103
     928:	40 e0       	ldi	r20, 0x00	; 0
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
     930:	30 93 57 01 	sts	0x0157, r19
     934:	20 93 56 01 	sts	0x0156, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     938:	20 92 58 01 	sts	0x0158, r2
        trans.c = HighPin;
     93c:	10 93 59 01 	sts	0x0159, r17
        trans.e = LowPin;
     940:	30 92 5a 01 	sts	0x015A, r3
     }

     ADC_PORT = TXD_VAL;		// direct outputs to GND
     944:	88 e0       	ldi	r24, 0x08	; 8
     946:	88 b9       	out	0x08, r24	; 8

     //Test, if P-JFET or if self-conducting P-MOSFET
     ADC_DDR = LoADCm;		//switch Low-Pin (assumed Drain) direct to GND,
     948:	3b 81       	ldd	r19, Y+3	; 0x03
     94a:	37 b9       	out	0x07, r19	; 7
				//R_H for Tristate-Pin (assumed Gate) is already switched to VCC
     R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     94c:	80 2f       	mov	r24, r16
     94e:	8c 29       	or	r24, r12
     950:	84 b9       	out	0x04, r24	; 4
     R_PORT = TriPinRH | HiPinRL;	//High-Pin across R_L to Vcc
     952:	85 b9       	out	0x05, r24	; 5
     adc.hp1 = W20msReadADC(HighPin);	//measure voltage at assumed Source 
     954:	81 2f       	mov	r24, r17
     956:	0e 94 ce 1a 	call	0x359c	; 0x359c <W20msReadADC>
     95a:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     95c:	82 2d       	mov	r24, r2
     95e:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
     962:	7c 01       	movw	r14, r24
     R_PORT = HiPinRL;			//switch R_H for Tristate-Pin (assumed Gate) to GND
     964:	c5 b8       	out	0x05, r12	; 5
     adc.hp2 = W20msReadADC(HighPin);	//read voltage at assumed Source again
     966:	81 2f       	mov	r24, r17
     968:	0e 94 ce 1a 	call	0x359c	; 0x359c <W20msReadADC>
     //if it is a self-conducting P_MOSFET or P-JFET , then must be:  adc.hp1 > adc.hp2 
     if(adc.hp1>(adc.hp2+488)) {
     96c:	88 51       	subi	r24, 0x18	; 24
     96e:	9e 4f       	sbci	r25, 0xFE	; 254
     970:	8a 15       	cp	r24, r10
     972:	9b 05       	cpc	r25, r11
     974:	d8 f5       	brcc	.+118    	; 0x9ec <CheckPins+0x22a>
        //read voltage at the Gate , to differ between MOSFET and JFET
        ADC_PORT = HiADCp;	//switch High-Pin directly to VCC
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = HiADCm;	//switch High-Pin to output
     97a:	87 b9       	out	0x07, r24	; 7
        adc.tp2 = W20msReadADC(TristatePin); //read voltage at the assumed Gate 
     97c:	82 2d       	mov	r24, r2
     97e:	0e 94 ce 1a 	call	0x359c	; 0x359c <W20msReadADC>
        if(adc.tp2<977) { 		//MOSFET
     982:	a3 e0       	ldi	r26, 0x03	; 3
     984:	81 3d       	cpi	r24, 0xD1	; 209
     986:	9a 07       	cpc	r25, r26
     988:	28 f4       	brcc	.+10     	; 0x994 <CheckPins+0x1d2>
           PartFound = PART_FET;	//P-Kanal-MOSFET
     98a:	83 e0       	ldi	r24, 0x03	; 3
     98c:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_D_MOS; //Depletion-MOSFET
     990:	85 e0       	ldi	r24, 0x05	; 5
     992:	04 c0       	rjmp	.+8      	; 0x99c <CheckPins+0x1da>
        } else { 			//JFET (pn-passage between Gate and Source is conducting)
           PartFound = PART_FET;	//P-Kanal-JFET
     994:	83 e0       	ldi	r24, 0x03	; 3
     996:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_JFET;
     99a:	87 e0       	ldi	r24, 0x07	; 7
     99c:	80 93 06 01 	sts	0x0106, r24
        }
        gthvoltage = adc.tp1 - adc.hp1;		//voltage GS (Gate - Source)
     9a0:	ea 18       	sub	r14, r10
     9a2:	fb 08       	sbc	r15, r11
     9a4:	f0 92 5d 01 	sts	0x015D, r15
     9a8:	e0 92 5c 01 	sts	0x015C, r14
        trans.uBE[1] = (unsigned int)(((unsigned long)(ADCconfig.U_AVCC - adc.hp1) * 1000) / RR680PL); // Id 0.01mA
     9ac:	60 91 3d 01 	lds	r22, 0x013D
     9b0:	70 91 3e 01 	lds	r23, 0x013E
     9b4:	6a 19       	sub	r22, r10
     9b6:	7b 09       	sbc	r23, r11
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	28 ee       	ldi	r18, 0xE8	; 232
     9be:	33 e0       	ldi	r19, 0x03	; 3
     9c0:	40 e0       	ldi	r20, 0x00	; 0
     9c2:	50 e0       	ldi	r21, 0x00	; 0
     9c4:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
     9c8:	20 91 08 01 	lds	r18, 0x0108
     9cc:	30 91 09 01 	lds	r19, 0x0109
     9d0:	40 e0       	ldi	r20, 0x00	; 0
     9d2:	50 e0       	ldi	r21, 0x00	; 0
     9d4:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
     9d8:	30 93 57 01 	sts	0x0157, r19
     9dc:	20 93 56 01 	sts	0x0156, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     9e0:	20 92 58 01 	sts	0x0158, r2
        trans.c = LowPin;
     9e4:	30 92 59 01 	sts	0x0159, r3
        trans.e = HighPin;
     9e8:	10 93 5a 01 	sts	0x015A, r17
  } // end component has current without TristatePin signal


#ifdef COMMON_COLLECTOR
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
     9ec:	88 e0       	ldi	r24, 0x08	; 8
     9ee:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;			// Collector direct to GND
     9f0:	bb 81       	ldd	r27, Y+3	; 0x03
     9f2:	b7 b9       	out	0x07, r27	; 7
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
     9f4:	c5 b8       	out	0x05, r12	; 5
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
     9f6:	ec 2d       	mov	r30, r12
     9f8:	ed 29       	or	r30, r13
     9fa:	eb 87       	std	Y+11, r30	; 0x0b
     9fc:	e4 b9       	out	0x04, r30	; 4
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     9fe:	a0 90 3d 01 	lds	r10, 0x013D
     a02:	b0 90 3e 01 	lds	r11, 0x013E
     a06:	81 2f       	mov	r24, r17
     a08:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
     a0c:	7c 01       	movw	r14, r24
  adc.tp1 = ReadADC(TristatePin);	// voltage at the base resistor
     a0e:	82 2d       	mov	r24, r2
     a10:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
     a14:	4c 01       	movw	r8, r24

  if (adc.tp1 < 10) {
     a16:	8a 30       	cpi	r24, 0x0A	; 10
     a18:	91 05       	cpc	r25, r1
     a1a:	68 f5       	brcc	.+90     	; 0xa76 <CheckPins+0x2b4>
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
     a1c:	80 2f       	mov	r24, r16
     a1e:	8c 29       	or	r24, r12
     a20:	84 b9       	out	0x04, r24	; 4
     adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);
     a22:	a0 90 3d 01 	lds	r10, 0x013D
     a26:	b0 90 3e 01 	lds	r11, 0x013E
     a2a:	81 2f       	mov	r24, r17
     a2c:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
     a30:	a8 1a       	sub	r10, r24
     a32:	b9 0a       	sbc	r11, r25
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
     a34:	82 2d       	mov	r24, r2
     a36:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
     a3a:	4c 01       	movw	r8, r24
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     a3c:	25 01       	movw	r4, r10
     a3e:	66 24       	eor	r6, r6
     a40:	77 24       	eor	r7, r7
     a42:	20 91 08 01 	lds	r18, 0x0108
     a46:	30 91 09 01 	lds	r19, 0x0109
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	60 e6       	ldi	r22, 0x60	; 96
     a50:	77 eb       	ldi	r23, 0xB7	; 183
     a52:	87 e4       	ldi	r24, 0x47	; 71
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
     a5a:	c3 01       	movw	r24, r6
     a5c:	b2 01       	movw	r22, r4
     a5e:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
     a62:	94 01       	movw	r18, r8
     a64:	40 e0       	ldi	r20, 0x00	; 0
     a66:	50 e0       	ldi	r21, 0x00	; 0
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     a68:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
     a6c:	2c 83       	std	Y+4, r18	; 0x04
     a6e:	3d 83       	std	Y+5, r19	; 0x05
     a70:	4e 83       	std	Y+6, r20	; 0x06
     a72:	5f 83       	std	Y+7, r21	; 0x07
     a74:	0f c0       	rjmp	.+30     	; 0xa94 <CheckPins+0x2d2>
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
  ADC_DDR = LoADCm;			// Collector direct to GND
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     a76:	ae 18       	sub	r10, r14
     a78:	bf 08       	sbc	r11, r15
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
 #else
     c_hfe = ((adc.hp1 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
  } else {
     c_hfe = (unsigned long)((adc.hp1 - adc.tp1) / adc.tp1);
     a7a:	c5 01       	movw	r24, r10
     a7c:	88 19       	sub	r24, r8
     a7e:	99 09       	sbc	r25, r9
     a80:	b4 01       	movw	r22, r8
     a82:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <__udivmodhi4>
     a86:	cb 01       	movw	r24, r22
     a88:	a0 e0       	ldi	r26, 0x00	; 0
     a8a:	b0 e0       	ldi	r27, 0x00	; 0
     a8c:	8c 83       	std	Y+4, r24	; 0x04
     a8e:	9d 83       	std	Y+5, r25	; 0x05
     a90:	ae 83       	std	Y+6, r26	; 0x06
     a92:	bf 83       	std	Y+7, r27	; 0x07
  }
#endif

  //set Pins again for circuit with common Emitter PNP
  R_DDR = LoPinRL;		//switch R_L port for Low-Pin to output (GND)
     a94:	9a 81       	ldd	r25, Y+2	; 0x02
     a96:	94 b9       	out	0x04, r25	; 4
  R_PORT = 0;			//switch all resistor ports to GND
     a98:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = HiADCm;		//switch High-Pin to output
     a9a:	a9 81       	ldd	r26, Y+1	; 0x01
     a9c:	a7 b9       	out	0x07, r26	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
     a9e:	a8 b9       	out	0x08, r26	; 8
  wait_about5ms();
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>
  
  if(adc.lp_otr < 977) {
     aa8:	e9 85       	ldd	r30, Y+9	; 0x09
     aaa:	fa 85       	ldd	r31, Y+10	; 0x0a
     aac:	23 e0       	ldi	r18, 0x03	; 3
     aae:	e1 3d       	cpi	r30, 0xD1	; 209
     ab0:	f2 07       	cpc	r31, r18
     ab2:	08 f0       	brcs	.+2      	; 0xab6 <CheckPins+0x2f4>
     ab4:	ab c2       	rjmp	.+1366   	; 0x100c <CheckPins+0x84a>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test to PNP
     R_DDR = LoPinRL | TriPinRL;	//switch R_L port for Tristate-Pin to output (GND), for Test of PNP
     ab6:	3a 81       	ldd	r19, Y+2	; 0x02
     ab8:	3d 29       	or	r19, r13
     aba:	3f 87       	std	Y+15, r19	; 0x0f
     abc:	34 b9       	out	0x04, r19	; 4
     adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin
     abe:	83 2d       	mov	r24, r3
     ac0:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
     if(adc.lp1 > 3422) {
     ac4:	ad e0       	ldi	r26, 0x0D	; 13
     ac6:	8f 35       	cpi	r24, 0x5F	; 95
     ac8:	9a 07       	cpc	r25, r26
     aca:	08 f4       	brcc	.+2      	; 0xace <CheckPins+0x30c>
     acc:	e1 c0       	rjmp	.+450    	; 0xc90 <CheckPins+0x4ce>
        //component has current => PNP-Transistor or equivalent
        //compute current amplification factor in both directions
        R_DDR = LoPinRL | TriPinRH;	//switch R_H port for Tristate-Pin (Base) to output (GND)
     ace:	ba 81       	ldd	r27, Y+2	; 0x02
     ad0:	b0 2b       	or	r27, r16
     ad2:	b8 8b       	std	Y+16, r27	; 0x10
     ad4:	b4 b9       	out	0x04, r27	; 4

        adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin (assumed Collector)
     ad6:	83 2d       	mov	r24, r3
     ad8:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
     adc:	9a 8b       	std	Y+18, r25	; 0x12
     ade:	89 8b       	std	Y+17, r24	; 0x11
        adc.tp2 = ReadADC(TristatePin);	//measure voltage at TristatePin (Base) 
     ae0:	82 2d       	mov	r24, r2
     ae2:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
     ae6:	9d 8b       	std	Y+21, r25	; 0x15
     ae8:	8c 8b       	std	Y+20, r24	; 0x14
        //check, if Test is done before 
        if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     aea:	80 91 07 01 	lds	r24, 0x0107
     aee:	82 50       	subi	r24, 0x02	; 2
     af0:	82 30       	cpi	r24, 0x02	; 2
     af2:	18 f4       	brcc	.+6      	; 0xafa <CheckPins+0x338>
           PartReady = 1;
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	80 93 04 01 	sts	0x0104, r24
        }
        trans.uBE[PartReady] = ReadADC(HighPin) - adc.tp2;	// Base Emitter Voltage
     afa:	e0 90 04 01 	lds	r14, 0x0104
     afe:	ff 24       	eor	r15, r15
     b00:	81 2f       	mov	r24, r17
     b02:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
     b06:	f7 01       	movw	r30, r14
     b08:	ee 0f       	add	r30, r30
     b0a:	ff 1f       	adc	r31, r31
     b0c:	ec 5a       	subi	r30, 0xAC	; 172
     b0e:	fe 4f       	sbci	r31, 0xFE	; 254
     b10:	2c 89       	ldd	r18, Y+20	; 0x14
     b12:	3d 89       	ldd	r19, Y+21	; 0x15
     b14:	82 1b       	sub	r24, r18
     b16:	93 0b       	sbc	r25, r19
     b18:	91 83       	std	Z+1, r25	; 0x01
     b1a:	80 83       	st	Z, r24

        //compute current amplification factor for circuit with common Emitter
        //hFE = B = Collector current / Base current
        if(adc.tp2 < 53) {
     b1c:	25 33       	cpi	r18, 0x35	; 53
     b1e:	31 05       	cpc	r19, r1
     b20:	20 f4       	brcc	.+8      	; 0xb2a <CheckPins+0x368>
#if DebugOut == 5
           lcd_data('<');
           lcd_data('5');
           lcd_data('3');
#endif
           adc.tp2 = 53;
     b22:	85 e3       	ldi	r24, 0x35	; 53
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	9d 8b       	std	Y+21, r25	; 0x15
     b28:	8c 8b       	std	Y+20, r24	; 0x14
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     b2a:	e0 90 04 01 	lds	r14, 0x0104
     b2e:	ff 24       	eor	r15, r15
     b30:	a9 89       	ldd	r26, Y+17	; 0x11
     b32:	ba 89       	ldd	r27, Y+18	; 0x12
     b34:	2d 01       	movw	r4, r26
     b36:	66 24       	eor	r6, r6
     b38:	77 24       	eor	r7, r7
     b3a:	20 91 02 01 	lds	r18, 0x0102
     b3e:	30 91 03 01 	lds	r19, 0x0103
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	60 e6       	ldi	r22, 0x60	; 96
     b48:	77 eb       	ldi	r23, 0xB7	; 183
     b4a:	87 e4       	ldi	r24, 0x47	; 71
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
     b52:	c3 01       	movw	r24, r6
     b54:	b2 01       	movw	r22, r4
     b56:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
                 (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
     b5a:	ec 89       	ldd	r30, Y+20	; 0x14
     b5c:	fd 89       	ldd	r31, Y+21	; 0x15
     b5e:	9f 01       	movw	r18, r30
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	50 e0       	ldi	r21, 0x00	; 0
     b64:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
#endif
           adc.tp2 = 53;
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     b68:	f7 01       	movw	r30, r14
     b6a:	ee 0f       	add	r30, r30
     b6c:	ff 1f       	adc	r31, r31
     b6e:	ee 0f       	add	r30, r30
     b70:	ff 1f       	adc	r31, r31
     b72:	e4 5b       	subi	r30, 0xB4	; 180
     b74:	fe 4f       	sbci	r31, 0xFE	; 254
     b76:	20 83       	st	Z, r18
     b78:	31 83       	std	Z+1, r19	; 0x01
     b7a:	42 83       	std	Z+2, r20	; 0x02
     b7c:	53 83       	std	Z+3, r21	; 0x03
        trans.hfe[PartReady] = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
#ifdef COMMON_COLLECTOR
        //current amplification factor for common  Collector (Emitter follower)
        // c_hFE = (Emitter current - Base current) / Base current
        if (c_hfe > trans.hfe[PartReady]) {
     b7e:	8c 81       	ldd	r24, Y+4	; 0x04
     b80:	9d 81       	ldd	r25, Y+5	; 0x05
     b82:	ae 81       	ldd	r26, Y+6	; 0x06
     b84:	bf 81       	ldd	r27, Y+7	; 0x07
     b86:	28 17       	cp	r18, r24
     b88:	39 07       	cpc	r19, r25
     b8a:	4a 07       	cpc	r20, r26
     b8c:	5b 07       	cpc	r21, r27
     b8e:	98 f4       	brcc	.+38     	; 0xbb6 <CheckPins+0x3f4>
           trans.hfe[PartReady] = c_hfe;
     b90:	80 83       	st	Z, r24
     b92:	91 83       	std	Z+1, r25	; 0x01
     b94:	a2 83       	std	Z+2, r26	; 0x02
     b96:	b3 83       	std	Z+3, r27	; 0x03
           trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.hp1 - adc.tp1;	// Base Emitter Voltage common collector
     b98:	f7 01       	movw	r30, r14
     b9a:	ee 0f       	add	r30, r30
     b9c:	ff 1f       	adc	r31, r31
     b9e:	ec 5a       	subi	r30, 0xAC	; 172
     ba0:	fe 4f       	sbci	r31, 0xFE	; 254
     ba2:	80 91 3d 01 	lds	r24, 0x013D
     ba6:	90 91 3e 01 	lds	r25, 0x013E
     baa:	8a 19       	sub	r24, r10
     bac:	9b 09       	sbc	r25, r11
     bae:	88 19       	sub	r24, r8
     bb0:	99 09       	sbc	r25, r9
     bb2:	91 83       	std	Z+1, r25	; 0x01
     bb4:	80 83       	st	Z, r24
        }
#endif

 
        if(PartFound != PART_THYRISTOR) {
     bb6:	80 91 07 01 	lds	r24, 0x0107
     bba:	85 30       	cpi	r24, 0x05	; 5
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <CheckPins+0x3fe>
     bbe:	68 c0       	rjmp	.+208    	; 0xc90 <CheckPins+0x4ce>
           if(adc.tp2 > 977) {
     bc0:	ac 89       	ldd	r26, Y+20	; 0x14
     bc2:	bd 89       	ldd	r27, Y+21	; 0x15
     bc4:	e3 e0       	ldi	r30, 0x03	; 3
     bc6:	a2 3d       	cpi	r26, 0xD2	; 210
     bc8:	be 07       	cpc	r27, r30
     bca:	30 f0       	brcs	.+12     	; 0xbd8 <CheckPins+0x416>
              //PNP-Transistor is found (Base voltage moves to VCC)
              PartFound = PART_TRANSISTOR;
     bcc:	82 e0       	ldi	r24, 0x02	; 2
     bce:	80 93 07 01 	sts	0x0107, r24
              PartMode = PART_MODE_PNP;
     bd2:	80 93 06 01 	sts	0x0106, r24
     bd6:	56 c0       	rjmp	.+172    	; 0xc84 <CheckPins+0x4c2>
           } else {
              if((adc.lp_otr < 97) && (adc.lp1 > 2000)) {
     bd8:	29 85       	ldd	r18, Y+9	; 0x09
     bda:	3a 85       	ldd	r19, Y+10	; 0x0a
     bdc:	21 36       	cpi	r18, 0x61	; 97
     bde:	31 05       	cpc	r19, r1
     be0:	08 f0       	brcs	.+2      	; 0xbe4 <CheckPins+0x422>
     be2:	50 c0       	rjmp	.+160    	; 0xc84 <CheckPins+0x4c2>
     be4:	89 89       	ldd	r24, Y+17	; 0x11
     be6:	9a 89       	ldd	r25, Y+18	; 0x12
     be8:	a7 e0       	ldi	r26, 0x07	; 7
     bea:	81 3d       	cpi	r24, 0xD1	; 209
     bec:	9a 07       	cpc	r25, r26
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <CheckPins+0x430>
     bf0:	49 c0       	rjmp	.+146    	; 0xc84 <CheckPins+0x4c2>
                 //is flow voltage low enough in the closed  state?
                 //(since D-Mode-FET would be by mistake detected as E-Mode )
        	 PartFound = PART_FET;		//P-Kanal-MOSFET is found (Basis/Gate moves not to VCC)
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	80 93 07 01 	sts	0x0107, r24
        	 PartMode = PART_MODE_P_E_MOS;
     bf8:	80 93 06 01 	sts	0x0106, r24
        	 //measure the Gate threshold voltage
                 //Switching of Drain is monitored with digital input
                 // Low level is specified up to 0.3 * VCC
                 // High level is specified above 0.6 * VCC
                 PinMSK = LoADCm & 7;
     bfc:	eb 80       	ldd	r14, Y+3	; 0x03
     bfe:	b7 e0       	ldi	r27, 0x07	; 7
     c00:	eb 22       	and	r14, r27
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
     c02:	82 2d       	mov	r24, r2
     c04:	80 64       	ori	r24, 0x40	; 64
     c06:	80 93 7c 00 	sts	0x007C, r24
        	 gthvoltage = 1;			// round up ((1*4)/9)
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	90 93 5d 01 	sts	0x015D, r25
     c12:	80 93 5c 01 	sts	0x015C, r24
        	 for(ii=0;ii<11;ii++) {
     c16:	40 e0       	ldi	r20, 0x00	; 0
        	    wdt_reset();
     c18:	a8 95       	wdr
        	    ChargePin10ms(TriPinRL,1);
     c1a:	8d 2d       	mov	r24, r13
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	4e 8b       	std	Y+22, r20	; 0x16
     c20:	0e 94 c6 03 	call	0x78c	; 0x78c <ChargePin10ms>
                    R_DDR = LoPinRL | TriPinRH;		//switch R_H for Tristate-Pin (Basis) to GND
     c24:	e8 89       	ldd	r30, Y+16	; 0x10
     c26:	e4 b9       	out	0x04, r30	; 4
     c28:	4e 89       	ldd	r20, Y+22	; 0x16
        	    while (!(ADC_PIN&PinMSK));		// Wait, until the MOSFET switches and Drain moves to VCC
     c2a:	86 b1       	in	r24, 0x06	; 6
     c2c:	8e 21       	and	r24, r14
     c2e:	e9 f3       	breq	.-6      	; 0xc2a <CheckPins+0x468>
                    			// 1 is detected with more than 2.5V (up to 2.57V) with tests of mega168 and mega328
        	    R_DDR = LoPinRL;
     c30:	fa 81       	ldd	r31, Y+2	; 0x02
     c32:	f4 b9       	out	0x04, r31	; 4
        	    ADCSRA |= (1<<ADSC);		// Start Conversion
     c34:	80 91 7a 00 	lds	r24, 0x007A
     c38:	80 64       	ori	r24, 0x40	; 64
     c3a:	80 93 7a 00 	sts	0x007A, r24
        	    while (ADCSRA&(1<<ADSC));		// wait
     c3e:	80 91 7a 00 	lds	r24, 0x007A
     c42:	86 fd       	sbrc	r24, 6
     c44:	fc cf       	rjmp	.-8      	; 0xc3e <CheckPins+0x47c>
      		    gthvoltage += (1023 - ADCW);	// Add Tristatepin-Voltage
     c46:	20 91 78 00 	lds	r18, 0x0078
     c4a:	30 91 79 00 	lds	r19, 0x0079
     c4e:	80 91 5c 01 	lds	r24, 0x015C
     c52:	90 91 5d 01 	lds	r25, 0x015D
     c56:	81 50       	subi	r24, 0x01	; 1
     c58:	9c 4f       	sbci	r25, 0xFC	; 252
     c5a:	82 1b       	sub	r24, r18
     c5c:	93 0b       	sbc	r25, r19
     c5e:	90 93 5d 01 	sts	0x015D, r25
     c62:	80 93 5c 01 	sts	0x015C, r24
                 // Low level is specified up to 0.3 * VCC
                 // High level is specified above 0.6 * VCC
                 PinMSK = LoADCm & 7;
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
        	 gthvoltage = 1;			// round up ((1*4)/9)
        	 for(ii=0;ii<11;ii++) {
     c66:	4f 5f       	subi	r20, 0xFF	; 255
     c68:	4b 30       	cpi	r20, 0x0B	; 11
     c6a:	b1 f6       	brne	.-84     	; 0xc18 <CheckPins+0x456>
        	    R_DDR = LoPinRL;
        	    ADCSRA |= (1<<ADSC);		// Start Conversion
        	    while (ADCSRA&(1<<ADSC));		// wait
      		    gthvoltage += (1023 - ADCW);	// Add Tristatepin-Voltage
                 }
                 gthvoltage *= 4;		// is equal to 44*ADCW
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
                 gthvoltage /= 9;		// gives resolution in mV
     c74:	69 e0       	ldi	r22, 0x09	; 9
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <__udivmodhi4>
     c7c:	70 93 5d 01 	sts	0x015D, r23
     c80:	60 93 5c 01 	sts	0x015C, r22
              }
           }
           trans.b = TristatePin;
     c84:	20 92 58 01 	sts	0x0158, r2
           trans.c = LowPin;
     c88:	30 92 59 01 	sts	0x0159, r3
           trans.e = HighPin;
     c8c:	10 93 5a 01 	sts	0x015A, r17
        }  // end if PartFound != PART_THYRISTOR
    } // end component has current => PNP

#ifdef COMMON_COLLECTOR
    // Low-Pin=RL- HighPin=VCC
    R_DDR = LoPinRL | TriPinRL;
     c90:	2f 85       	ldd	r18, Y+15	; 0x0f
     c92:	24 b9       	out	0x04, r18	; 4
    R_PORT = TriPinRL;			// TriPin=RL+  NPN with common Collector
     c94:	d5 b8       	out	0x05, r13	; 5
    adc.lp1 = W5msReadADC(LowPin);	// voltage at Emitter resistor
     c96:	83 2d       	mov	r24, r3
     c98:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
     c9c:	2c 01       	movw	r4, r24
    adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     c9e:	80 91 3d 01 	lds	r24, 0x013D
     ca2:	90 91 3e 01 	lds	r25, 0x013E
     ca6:	9a 8b       	std	Y+18, r25	; 0x12
     ca8:	89 8b       	std	Y+17, r24	; 0x11
     caa:	82 2d       	mov	r24, r2
     cac:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
     cb0:	a9 89       	ldd	r26, Y+17	; 0x11
     cb2:	ba 89       	ldd	r27, Y+18	; 0x12
     cb4:	a8 1b       	sub	r26, r24
     cb6:	b9 0b       	sbc	r27, r25
     cb8:	ba 8b       	std	Y+18, r27	; 0x12
     cba:	a9 8b       	std	Y+17, r26	; 0x11
    if (adc.tp1 < 10) {
     cbc:	aa 30       	cpi	r26, 0x0A	; 10
     cbe:	b1 05       	cpc	r27, r1
     cc0:	b0 f5       	brcc	.+108    	; 0xd2e <CheckPins+0x56c>
       R_DDR = LoPinRL | TriPinRH;
     cc2:	8a 81       	ldd	r24, Y+2	; 0x02
     cc4:	80 2b       	or	r24, r16
     cc6:	84 b9       	out	0x04, r24	; 4
       R_PORT = TriPinRH;		// Tripin=RH+
     cc8:	05 b9       	out	0x05, r16	; 5
       adc.lp1 = W5msReadADC(LowPin);
     cca:	83 2d       	mov	r24, r3
     ccc:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
     cd0:	2c 01       	movw	r4, r24
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     cd2:	e0 91 3d 01 	lds	r30, 0x013D
     cd6:	f0 91 3e 01 	lds	r31, 0x013E
     cda:	fa 8b       	std	Y+18, r31	; 0x12
     cdc:	e9 8b       	std	Y+17, r30	; 0x11
     cde:	82 2d       	mov	r24, r2
     ce0:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
     ce4:	29 89       	ldd	r18, Y+17	; 0x11
     ce6:	3a 89       	ldd	r19, Y+18	; 0x12
     ce8:	28 1b       	sub	r18, r24
     cea:	39 0b       	sbc	r19, r25
     cec:	3a 8b       	std	Y+18, r19	; 0x12
     cee:	29 8b       	std	Y+17, r18	; 0x11
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     cf0:	42 01       	movw	r8, r4
     cf2:	aa 24       	eor	r10, r10
     cf4:	bb 24       	eor	r11, r11
     cf6:	20 91 02 01 	lds	r18, 0x0102
     cfa:	30 91 03 01 	lds	r19, 0x0103
     cfe:	40 e0       	ldi	r20, 0x00	; 0
     d00:	50 e0       	ldi	r21, 0x00	; 0
     d02:	60 e6       	ldi	r22, 0x60	; 96
     d04:	77 eb       	ldi	r23, 0xB7	; 183
     d06:	87 e4       	ldi	r24, 0x47	; 71
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
     d0e:	c5 01       	movw	r24, r10
     d10:	b4 01       	movw	r22, r8
     d12:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
     d16:	a9 89       	ldd	r26, Y+17	; 0x11
     d18:	ba 89       	ldd	r27, Y+18	; 0x12
     d1a:	9d 01       	movw	r18, r26
     d1c:	40 e0       	ldi	r20, 0x00	; 0
     d1e:	50 e0       	ldi	r21, 0x00	; 0
       R_DDR = LoPinRL | TriPinRH;
       R_PORT = TriPinRH;		// Tripin=RH+
       adc.lp1 = W5msReadADC(LowPin);
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     d20:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
     d24:	2c 83       	std	Y+4, r18	; 0x04
     d26:	3d 83       	std	Y+5, r19	; 0x05
     d28:	4e 83       	std	Y+6, r20	; 0x06
     d2a:	5f 83       	std	Y+7, r21	; 0x07
     d2c:	0f c0       	rjmp	.+30     	; 0xd4c <CheckPins+0x58a>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
 #else
       c_hfe = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
    } else {
       c_hfe = (adc.lp1 - adc.tp1) / adc.tp1;
     d2e:	c2 01       	movw	r24, r4
     d30:	e9 89       	ldd	r30, Y+17	; 0x11
     d32:	fa 89       	ldd	r31, Y+18	; 0x12
     d34:	8e 1b       	sub	r24, r30
     d36:	9f 0b       	sbc	r25, r31
     d38:	bf 01       	movw	r22, r30
     d3a:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <__udivmodhi4>
     d3e:	cb 01       	movw	r24, r22
     d40:	a0 e0       	ldi	r26, 0x00	; 0
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	8c 83       	std	Y+4, r24	; 0x04
     d46:	9d 83       	std	Y+5, r25	; 0x05
     d48:	ae 83       	std	Y+6, r26	; 0x06
     d4a:	bf 83       	std	Y+7, r27	; 0x07
       lcd_string(utoa(adc.tp1,outval,10));
       wait_about1s();
#endif
#endif
    //Tristate (can be Base) to VCC, Test if NPN
    ADC_DDR = LoADCm;		//Low-Pin to output 0V
     d4c:	9b 81       	ldd	r25, Y+3	; 0x03
     d4e:	97 b9       	out	0x07, r25	; 7
    ADC_PORT = TXD_VAL;			//switch Low-Pin to GND
     d50:	88 e0       	ldi	r24, 0x08	; 8
     d52:	88 b9       	out	0x08, r24	; 8
    R_DDR = TriPinRL | HiPinRL;		//RL port for High-Pin and Tristate-Pin to output
     d54:	ab 85       	ldd	r26, Y+11	; 0x0b
     d56:	a4 b9       	out	0x04, r26	; 4
    R_PORT = TriPinRL | HiPinRL;	//RL port for High-Pin and Tristate-Pin to Vcc
     d58:	a5 b9       	out	0x05, r26	; 5
    adc.hp1 = W5msReadADC(HighPin);	//measure voltage at High-Pin  (Collector)
     d5a:	81 2f       	mov	r24, r17
     d5c:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
    if(adc.hp1 < 1600) {
     d60:	b6 e0       	ldi	r27, 0x06	; 6
     d62:	80 34       	cpi	r24, 0x40	; 64
     d64:	9b 07       	cpc	r25, r27
     d66:	08 f0       	brcs	.+2      	; 0xd6a <CheckPins+0x5a8>
     d68:	4d c1       	rjmp	.+666    	; 0x1004 <CheckPins+0x842>
       lcd_data('N');
       lcd_testpin(HighPin);
       lcd_space();
       wait_about1s();
#endif
       if(PartReady==1) {
     d6a:	80 91 04 01 	lds	r24, 0x0104
     d6e:	81 30       	cpi	r24, 0x01	; 1
     d70:	09 f4       	brne	.+2      	; 0xd74 <CheckPins+0x5b2>
     d72:	b5 c1       	rjmp	.+874    	; 0x10de <CheckPins+0x91c>
          goto widmes;
       }

       //Test auf Thyristor:
       //Gate discharge
       ChargePin10ms(TriPinRL,0);	//Tristate-Pin (Gate) across R_L 10ms to GND
     d74:	8d 2d       	mov	r24, r13
     d76:	60 e0       	ldi	r22, 0x00	; 0
     d78:	0e 94 c6 03 	call	0x78c	; 0x78c <ChargePin10ms>
       adc.hp3 = W5msReadADC(HighPin);	//read voltage at High-Pin (probably Anode) again
     d7c:	81 2f       	mov	r24, r17
     d7e:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
     d82:	7c 01       	movw	r14, r24
					//current should still flow, if not,
					// no Thyristor or holding current to low 
		 	
       R_PORT = 0;			//switch R_L for High-Pin (probably Anode) to GND (turn off)
     d84:	15 b8       	out	0x05, r1	; 5
       wait_about5ms();
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>
       R_PORT = HiPinRL;		//switch R_L for High-Pin (probably Anode) again to VCC
     d8e:	c5 b8       	out	0x05, r12	; 5
       adc.hp2 = W5msReadADC(HighPin);	//measure voltage at the High-Pin (probably Anode) again
     d90:	81 2f       	mov	r24, r17
     d92:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
       if((adc.hp3 < 1600) && (adc.hp2 > 4400)) {
     d96:	e0 e4       	ldi	r30, 0x40	; 64
     d98:	ee 16       	cp	r14, r30
     d9a:	e6 e0       	ldi	r30, 0x06	; 6
     d9c:	fe 06       	cpc	r15, r30
     d9e:	08 f0       	brcs	.+2      	; 0xda2 <CheckPins+0x5e0>
     da0:	47 c0       	rjmp	.+142    	; 0xe30 <CheckPins+0x66e>
     da2:	f1 e1       	ldi	r31, 0x11	; 17
     da4:	81 33       	cpi	r24, 0x31	; 49
     da6:	9f 07       	cpc	r25, r31
     da8:	08 f4       	brcc	.+2      	; 0xdac <CheckPins+0x5ea>
     daa:	42 c0       	rjmp	.+132    	; 0xe30 <CheckPins+0x66e>
          //if the holding current was switched off the thyristor must be switched off too. 
          //if Thyristor was still swiched on, if gate was switched off => Thyristor
          PartFound = PART_THYRISTOR;
     dac:	85 e0       	ldi	r24, 0x05	; 5
     dae:	80 93 07 01 	sts	0x0107, r24
          //Test if Triac
          R_DDR = 0;
     db2:	14 b8       	out	0x04, r1	; 4
          R_PORT = 0;
     db4:	15 b8       	out	0x05, r1	; 5
          ADC_PORT = LoADCp;	//Low-Pin fix to VCC
     db6:	2b 81       	ldd	r18, Y+3	; 0x03
     db8:	28 b9       	out	0x08, r18	; 8
          wait_about5ms();
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>
          R_DDR = HiPinRL;		//switch R_L port HighPin to output (GND)
     dc2:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) > 244) {
     dc4:	81 2f       	mov	r24, r17
     dc6:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
     dca:	85 3f       	cpi	r24, 0xF5	; 245
     dcc:	91 05       	cpc	r25, r1
     dce:	08 f0       	brcs	.+2      	; 0xdd2 <CheckPins+0x610>
     dd0:	13 c1       	rjmp	.+550    	; 0xff8 <CheckPins+0x836>
             goto savenresult;		//measure voltage at the  High-Pin (probably A2); if too high:
                                	//component has current => kein Triac
          }
          R_DDR = HiPinRL | TriPinRL;	//switch R_L port for TristatePin (Gate) to output (GND) => Triac should be triggered 
     dd2:	3b 85       	ldd	r19, Y+11	; 0x0b
     dd4:	34 b9       	out	0x04, r19	; 4
          if(W5msReadADC(TristatePin) < 977) {
     dd6:	82 2d       	mov	r24, r2
     dd8:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
     ddc:	a3 e0       	ldi	r26, 0x03	; 3
     dde:	81 3d       	cpi	r24, 0xD1	; 209
     de0:	9a 07       	cpc	r25, r26
     de2:	08 f4       	brcc	.+2      	; 0xde6 <CheckPins+0x624>
     de4:	09 c1       	rjmp	.+530    	; 0xff8 <CheckPins+0x836>
             goto savenresult; 		//measure voltage at the Tristate-Pin (probably Gate) ;
                              		// if to low, abort 
          }
          if(ReadADC(HighPin) < 733) {
     de6:	81 2f       	mov	r24, r17
     de8:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
     dec:	b2 e0       	ldi	r27, 0x02	; 2
     dee:	8d 3d       	cpi	r24, 0xDD	; 221
     df0:	9b 07       	cpc	r25, r27
     df2:	08 f4       	brcc	.+2      	; 0xdf6 <CheckPins+0x634>
     df4:	01 c1       	rjmp	.+514    	; 0xff8 <CheckPins+0x836>
             goto savenresult; 		//component has no current => no Triac => abort
          }
          R_DDR = HiPinRL;		//TristatePin (Gate) to input 
     df6:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) < 733) {
     df8:	81 2f       	mov	r24, r17
     dfa:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
     dfe:	e2 e0       	ldi	r30, 0x02	; 2
     e00:	8d 3d       	cpi	r24, 0xDD	; 221
     e02:	9e 07       	cpc	r25, r30
     e04:	08 f4       	brcc	.+2      	; 0xe08 <CheckPins+0x646>
     e06:	f8 c0       	rjmp	.+496    	; 0xff8 <CheckPins+0x836>
             goto savenresult; 		//component has no current without base current => no Triac => abort
          }
          R_PORT = HiPinRL;		//switch R_L port for HighPin to VCC => switch off holding current 
     e08:	c5 b8       	out	0x05, r12	; 5
          wait_about5ms();
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>
          R_PORT = 0;			//switch R_L port for HighPin again to GND; Triac should now switched off
     e12:	15 b8       	out	0x05, r1	; 5
          if(W5msReadADC(HighPin) > 244) {
     e14:	81 2f       	mov	r24, r17
     e16:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
     e1a:	85 3f       	cpi	r24, 0xF5	; 245
     e1c:	91 05       	cpc	r25, r1
     e1e:	08 f0       	brcs	.+2      	; 0xe22 <CheckPins+0x660>
     e20:	eb c0       	rjmp	.+470    	; 0xff8 <CheckPins+0x836>
             goto savenresult;		//measure voltage at the High-Pin (probably A2) ;
                                	//if to high, component is not switched off => no Triac, abort
         }
         PartFound = PART_TRIAC;
     e22:	84 e0       	ldi	r24, 0x04	; 4
     e24:	80 93 07 01 	sts	0x0107, r24
         PartReady = 1;
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	80 93 04 01 	sts	0x0104, r24
         goto savenresult;
     e2e:	e4 c0       	rjmp	.+456    	; 0xff8 <CheckPins+0x836>
        }
      //Test if NPN Transistor or MOSFET
      // ADC_DDR = LoADCm;	//Low-Pin to output 0V
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
     e30:	0c 29       	or	r16, r12
     e32:	04 b9       	out	0x04, r16	; 4
      R_PORT = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to VCC
     e34:	05 b9       	out	0x05, r16	; 5
      wait_about50ms();
     e36:	8a e0       	ldi	r24, 0x0A	; 10
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>
      adc.hp2 = ADCconfig.U_AVCC - ReadADC(HighPin);	//measure the voltage at the collector resistor 
     e3e:	60 90 3d 01 	lds	r6, 0x013D
     e42:	70 90 3e 01 	lds	r7, 0x013E
     e46:	81 2f       	mov	r24, r17
     e48:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
     e4c:	68 1a       	sub	r6, r24
     e4e:	79 0a       	sbc	r7, r25
      adc.tp2 = ADCconfig.U_AVCC - ReadADC(TristatePin);	//measure the voltage at the base resistor 
     e50:	a0 90 3d 01 	lds	r10, 0x013D
     e54:	b0 90 3e 01 	lds	r11, 0x013E
     e58:	82 2d       	mov	r24, r2
     e5a:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
     e5e:	a8 1a       	sub	r10, r24
     e60:	b9 0a       	sbc	r11, r25
       lcd_space();
       lcd_data('T');
       lcd_data('P');
       lcd_string(utoa(adc.tp2,outval,10));
#endif
      if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     e62:	80 91 07 01 	lds	r24, 0x0107
     e66:	82 50       	subi	r24, 0x02	; 2
     e68:	82 30       	cpi	r24, 0x02	; 2
     e6a:	18 f4       	brcc	.+6      	; 0xe72 <CheckPins+0x6b0>
         PartReady = 1;	//check, if test is already done once
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	80 93 04 01 	sts	0x0104, r24
      }
      trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.tp2 - ReadADC(LowPin);
     e72:	80 90 04 01 	lds	r8, 0x0104
     e76:	99 24       	eor	r9, r9
     e78:	e0 90 3d 01 	lds	r14, 0x013D
     e7c:	f0 90 3e 01 	lds	r15, 0x013E
     e80:	ea 18       	sub	r14, r10
     e82:	fb 08       	sbc	r15, r11
     e84:	83 2d       	mov	r24, r3
     e86:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
     e8a:	f4 01       	movw	r30, r8
     e8c:	ee 0f       	add	r30, r30
     e8e:	ff 1f       	adc	r31, r31
     e90:	ec 5a       	subi	r30, 0xAC	; 172
     e92:	fe 4f       	sbci	r31, 0xFE	; 254
     e94:	e8 1a       	sub	r14, r24
     e96:	f9 0a       	sbc	r15, r25
     e98:	f1 82       	std	Z+1, r15	; 0x01
     e9a:	e0 82       	st	Z, r14

      //compute current amplification factor for common Emitter
      //hFE = B = Collector current / Base current
      if(adc.tp2 < 53) {
     e9c:	f5 e3       	ldi	r31, 0x35	; 53
     e9e:	af 16       	cp	r10, r31
     ea0:	b1 04       	cpc	r11, r1
     ea2:	18 f4       	brcc	.+6      	; 0xeaa <CheckPins+0x6e8>
#if DebugOut == 5
         lcd_data('<');
         lcd_data('5');
         lcd_data('3');
#endif
         adc.tp2 = 53;
     ea4:	75 e3       	ldi	r23, 0x35	; 53
     ea6:	a7 2e       	mov	r10, r23
     ea8:	b1 2c       	mov	r11, r1
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     eaa:	e0 90 04 01 	lds	r14, 0x0104
     eae:	ff 24       	eor	r15, r15
     eb0:	c3 01       	movw	r24, r6
     eb2:	a0 e0       	ldi	r26, 0x00	; 0
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	8b 87       	std	Y+11, r24	; 0x0b
     eb8:	9c 87       	std	Y+12, r25	; 0x0c
     eba:	ad 87       	std	Y+13, r26	; 0x0d
     ebc:	be 87       	std	Y+14, r27	; 0x0e
     ebe:	20 91 08 01 	lds	r18, 0x0108
     ec2:	30 91 09 01 	lds	r19, 0x0109
     ec6:	40 e0       	ldi	r20, 0x00	; 0
     ec8:	50 e0       	ldi	r21, 0x00	; 0
     eca:	60 e6       	ldi	r22, 0x60	; 96
     ecc:	77 eb       	ldi	r23, 0xB7	; 183
     ece:	87 e4       	ldi	r24, 0x47	; 71
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
     ed6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ed8:	7c 85       	ldd	r23, Y+12	; 0x0c
     eda:	8d 85       	ldd	r24, Y+13	; 0x0d
     edc:	9e 85       	ldd	r25, Y+14	; 0x0e
     ede:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp2;	
     ee2:	95 01       	movw	r18, r10
     ee4:	40 e0       	ldi	r20, 0x00	; 0
     ee6:	50 e0       	ldi	r21, 0x00	; 0
     ee8:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
#endif
         adc.tp2 = 53;
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     eec:	f7 01       	movw	r30, r14
     eee:	ee 0f       	add	r30, r30
     ef0:	ff 1f       	adc	r31, r31
     ef2:	ee 0f       	add	r30, r30
     ef4:	ff 1f       	adc	r31, r31
     ef6:	e4 5b       	subi	r30, 0xB4	; 180
     ef8:	fe 4f       	sbci	r31, 0xFE	; 254
     efa:	20 83       	st	Z, r18
     efc:	31 83       	std	Z+1, r19	; 0x01
     efe:	42 83       	std	Z+2, r20	; 0x02
     f00:	53 83       	std	Z+3, r21	; 0x03
      trans.hfe[PartReady] = ((adc.hp2 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
#endif
#ifdef COMMON_COLLECTOR
       //compare current amplification factor for common Collector (Emitter follower)
       // hFE = (Emitterstrom - Basisstrom) / Basisstrom
       if (c_hfe >  trans.hfe[PartReady]) {
     f02:	8c 81       	ldd	r24, Y+4	; 0x04
     f04:	9d 81       	ldd	r25, Y+5	; 0x05
     f06:	ae 81       	ldd	r26, Y+6	; 0x06
     f08:	bf 81       	ldd	r27, Y+7	; 0x07
     f0a:	28 17       	cp	r18, r24
     f0c:	39 07       	cpc	r19, r25
     f0e:	4a 07       	cpc	r20, r26
     f10:	5b 07       	cpc	r21, r27
     f12:	a8 f4       	brcc	.+42     	; 0xf3e <CheckPins+0x77c>
          trans.hfe[PartReady] = c_hfe;
     f14:	80 83       	st	Z, r24
     f16:	91 83       	std	Z+1, r25	; 0x01
     f18:	a2 83       	std	Z+2, r26	; 0x02
     f1a:	b3 83       	std	Z+3, r27	; 0x03
          trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.lp1 - adc.tp1;
     f1c:	f7 01       	movw	r30, r14
     f1e:	ee 0f       	add	r30, r30
     f20:	ff 1f       	adc	r31, r31
     f22:	ec 5a       	subi	r30, 0xAC	; 172
     f24:	fe 4f       	sbci	r31, 0xFE	; 254
     f26:	80 91 3d 01 	lds	r24, 0x013D
     f2a:	90 91 3e 01 	lds	r25, 0x013E
     f2e:	84 19       	sub	r24, r4
     f30:	95 09       	sbc	r25, r5
     f32:	a9 89       	ldd	r26, Y+17	; 0x11
     f34:	ba 89       	ldd	r27, Y+18	; 0x12
     f36:	8a 1b       	sub	r24, r26
     f38:	9b 0b       	sbc	r25, r27
     f3a:	91 83       	std	Z+1, r25	; 0x01
     f3c:	80 83       	st	Z, r24
       }
#endif

      if(adc.tp2 > 2557) {		// Basis-voltage R_H is low enough
     f3e:	be ef       	ldi	r27, 0xFE	; 254
     f40:	ab 16       	cp	r10, r27
     f42:	b9 e0       	ldi	r27, 0x09	; 9
     f44:	bb 06       	cpc	r11, r27
     f46:	38 f0       	brcs	.+14     	; 0xf56 <CheckPins+0x794>
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	80 93 07 01 	sts	0x0107, r24
         PartMode = PART_MODE_NPN;
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	80 93 06 01 	sts	0x0106, r24
     f54:	51 c0       	rjmp	.+162    	; 0xff8 <CheckPins+0x836>
      } else { // Basis has low current
         if((adc.lp_otr < 97) && (adc.hp2 > 3400)) {
     f56:	e9 85       	ldd	r30, Y+9	; 0x09
     f58:	fa 85       	ldd	r31, Y+10	; 0x0a
     f5a:	e1 36       	cpi	r30, 0x61	; 97
     f5c:	f1 05       	cpc	r31, r1
     f5e:	08 f0       	brcs	.+2      	; 0xf62 <CheckPins+0x7a0>
     f60:	4b c0       	rjmp	.+150    	; 0xff8 <CheckPins+0x836>
     f62:	f9 e4       	ldi	r31, 0x49	; 73
     f64:	6f 16       	cp	r6, r31
     f66:	fd e0       	ldi	r31, 0x0D	; 13
     f68:	7f 06       	cpc	r7, r31
     f6a:	08 f4       	brcc	.+2      	; 0xf6e <CheckPins+0x7ac>
     f6c:	45 c0       	rjmp	.+138    	; 0xff8 <CheckPins+0x836>
            //if flow voltage in switched off mode low enough?
            //(since D-Mode-FET will be detected in error as E-Mode )
            PartFound = PART_FET;	//N-Kanal-MOSFET is found (Basis/Gate will Not be pulled down)
     f6e:	83 e0       	ldi	r24, 0x03	; 3
     f70:	80 93 07 01 	sts	0x0107, r24
            PartMode = PART_MODE_N_E_MOS;
     f74:	82 e0       	ldi	r24, 0x02	; 2
     f76:	80 93 06 01 	sts	0x0106, r24
            wait_about1s();
#endif
            //Switching of Drain is monitored with digital input
            // Low level is specified up to 0.3 * VCC
            // High level is specified above 0.6 * VCC
            PinMSK = HiADCm & 7;
     f7a:	e9 80       	ldd	r14, Y+1	; 0x01
     f7c:	27 e0       	ldi	r18, 0x07	; 7
     f7e:	e2 22       	and	r14, r18
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
     f80:	82 2d       	mov	r24, r2
     f82:	80 64       	ori	r24, 0x40	; 64
     f84:	80 93 7c 00 	sts	0x007C, r24
            gthvoltage = 1;			// round up ((1*4)/9)
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	90 93 5d 01 	sts	0x015D, r25
     f90:	80 93 5c 01 	sts	0x015C, r24
     f94:	4b e0       	ldi	r20, 0x0B	; 11
     f96:	a4 2e       	mov	r10, r20
            for(ii=0;ii<11;ii++) {
            	wdt_reset();
     f98:	a8 95       	wdr
            	ChargePin10ms(TriPinRL,0);	// discharge Gate 10ms with RL 
     f9a:	8d 2d       	mov	r24, r13
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	0e 94 c6 03 	call	0x78c	; 0x78c <ChargePin10ms>
                R_DDR = HiPinRL | TriPinRH;	// slowly charge Gate 
     fa2:	04 b9       	out	0x04, r16	; 4
                R_PORT = HiPinRL | TriPinRH;
     fa4:	05 b9       	out	0x05, r16	; 5
            	while ((ADC_PIN&PinMSK));	// Wait, until the MOSFET switch and Drain moved to low 
     fa6:	86 b1       	in	r24, 0x06	; 6
     fa8:	8e 21       	and	r24, r14
     faa:	e9 f7       	brne	.-6      	; 0xfa6 <CheckPins+0x7e4>
                		// 0 is detected with input voltage of 2.12V to 2.24V (tested with mega168 & mega328)
                R_DDR = HiPinRL;		// switch off current
     fac:	c4 b8       	out	0x04, r12	; 4
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
     fae:	80 91 7a 00 	lds	r24, 0x007A
     fb2:	80 64       	ori	r24, 0x40	; 64
     fb4:	80 93 7a 00 	sts	0x007A, r24
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
     fb8:	80 91 7a 00 	lds	r24, 0x007A
     fbc:	86 fd       	sbrc	r24, 6
     fbe:	fc cf       	rjmp	.-8      	; 0xfb8 <CheckPins+0x7f6>
            	gthvoltage += ADCW;		// add result of ADC
     fc0:	80 91 78 00 	lds	r24, 0x0078
     fc4:	90 91 79 00 	lds	r25, 0x0079
     fc8:	20 91 5c 01 	lds	r18, 0x015C
     fcc:	30 91 5d 01 	lds	r19, 0x015D
     fd0:	82 0f       	add	r24, r18
     fd2:	93 1f       	adc	r25, r19
     fd4:	90 93 5d 01 	sts	0x015D, r25
     fd8:	80 93 5c 01 	sts	0x015C, r24
     fdc:	aa 94       	dec	r10
            // High level is specified above 0.6 * VCC
            PinMSK = HiADCm & 7;
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
            gthvoltage = 1;			// round up ((1*4)/9)
            for(ii=0;ii<11;ii++) {
     fde:	e1 f6       	brne	.-72     	; 0xf98 <CheckPins+0x7d6>
                R_DDR = HiPinRL;		// switch off current
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
            	gthvoltage += ADCW;		// add result of ADC
            }
            gthvoltage *= 4;	//is equal to 44 * ADCW
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
            gthvoltage /= 9;	//scale to mV
     fe8:	69 e0       	ldi	r22, 0x09	; 9
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <__udivmodhi4>
     ff0:	70 93 5d 01 	sts	0x015D, r23
     ff4:	60 93 5c 01 	sts	0x015C, r22
         }
      }
savenresult:
      trans.b = TristatePin;	// save Pin-constellation
     ff8:	20 92 58 01 	sts	0x0158, r2
      trans.c = HighPin;
     ffc:	10 93 59 01 	sts	0x0159, r17
      trans.e = LowPin;
    1000:	30 92 5a 01 	sts	0x015A, r3
   } // end component conduct => npn
   ADC_DDR = TXD_MSK;		// switch all ADC-Ports to input
    1004:	88 e0       	ldi	r24, 0x08	; 8
    1006:	87 b9       	out	0x07, r24	; 7
   ADC_PORT = TXD_VAL;		// switch all ADC-Ports to 0 (no Pull up)
    1008:	88 b9       	out	0x08, r24	; 8
   //Fertig
   //end das component has no connection between HighPin and LowPin
   goto widmes;
    100a:	69 c0       	rjmp	.+210    	; 0x10de <CheckPins+0x91c>
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
    100c:	88 e0       	ldi	r24, 0x08	; 8
    100e:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;	//Low-Pin fix to GND
    1010:	3b 81       	ldd	r19, Y+3	; 0x03
    1012:	37 b9       	out	0x07, r19	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    1014:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
    1016:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
    1018:	8d 2d       	mov	r24, r13
    101a:	61 e0       	ldi	r22, 0x01	; 1
    101c:	0e 94 c6 03 	call	0x78c	; 0x78c <ChargePin10ms>
  adc.lp_otr = W5msReadADC(HighPin) - ReadADC(LowPin);
    1020:	81 2f       	mov	r24, r17
    1022:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
    1026:	4c 01       	movw	r8, r24
    1028:	83 2d       	mov	r24, r3
    102a:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
    102e:	88 1a       	sub	r8, r24
    1030:	99 0a       	sbc	r9, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
    1032:	88 85       	ldd	r24, Y+8	; 0x08
    1034:	84 b9       	out	0x04, r24	; 4
  R_PORT = HiPinRH;
    1036:	85 b9       	out	0x05, r24	; 5
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
    1038:	81 2f       	mov	r24, r17
    103a:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
    103e:	5c 01       	movw	r10, r24

  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    1040:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
    1042:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
    1044:	8d 2d       	mov	r24, r13
    1046:	60 e0       	ldi	r22, 0x00	; 0
    1048:	0e 94 c6 03 	call	0x78c	; 0x78c <ChargePin10ms>
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
    104c:	81 2f       	mov	r24, r17
    104e:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
    1052:	7c 01       	movw	r14, r24
    1054:	83 2d       	mov	r24, r3
    1056:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
    105a:	e8 1a       	sub	r14, r24
    105c:	f9 0a       	sbc	r15, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
    105e:	98 85       	ldd	r25, Y+8	; 0x08
    1060:	94 b9       	out	0x04, r25	; 4
  R_PORT = HiPinRH;
    1062:	95 b9       	out	0x05, r25	; 5
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
    1064:	81 2f       	mov	r24, r17
    1066:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
    106a:	e8 14       	cp	r14, r8
    106c:	f9 04       	cpc	r15, r9
    106e:	18 f0       	brcs	.+6      	; 0x1076 <CheckPins+0x8b4>
  R_PORT = HiPinRL;
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
  R_PORT = HiPinRH;
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
    1070:	a8 2e       	mov	r10, r24
    1072:	b9 2e       	mov	r11, r25
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
    1074:	47 01       	movw	r8, r14
  lcd_string(utoa(adc.hp3,outval,10));
  lcd_space();
  wait_about1s();
#endif

  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
    1076:	c4 01       	movw	r24, r8
    1078:	87 59       	subi	r24, 0x97	; 151
    107a:	90 40       	sbci	r25, 0x00	; 0
    107c:	a1 e1       	ldi	r26, 0x11	; 17
    107e:	89 38       	cpi	r24, 0x89	; 137
    1080:	9a 07       	cpc	r25, r26
    1082:	68 f5       	brcc	.+90     	; 0x10de <CheckPins+0x91c>
    1084:	c5 01       	movw	r24, r10
    1086:	23 e0       	ldi	r18, 0x03	; 3
    1088:	96 95       	lsr	r25
    108a:	87 95       	ror	r24
    108c:	2a 95       	dec	r18
    108e:	e1 f7       	brne	.-8      	; 0x1088 <CheckPins+0x8c6>
    1090:	8a 0d       	add	r24, r10
    1092:	9b 1d       	adc	r25, r11
    1094:	88 15       	cp	r24, r8
    1096:	99 05       	cpc	r25, r9
    1098:	10 f5       	brcc	.+68     	; 0x10de <CheckPins+0x91c>
    109a:	03 e0       	ldi	r16, 0x03	; 3
    109c:	aa 0c       	add	r10, r10
    109e:	bb 1c       	adc	r11, r11
    10a0:	0a 95       	dec	r16
    10a2:	e1 f7       	brne	.-8      	; 0x109c <CheckPins+0x8da>
    10a4:	8a 14       	cp	r8, r10
    10a6:	9b 04       	cpc	r9, r11
    10a8:	d0 f4       	brcc	.+52     	; 0x10de <CheckPins+0x91c>
     //voltage is above 0,15V and below 4,64V => Ok
     if((PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
    10aa:	80 91 07 01 	lds	r24, 0x0107
    10ae:	88 23       	and	r24, r24
    10b0:	11 f0       	breq	.+4      	; 0x10b6 <CheckPins+0x8f4>
    10b2:	86 30       	cpi	r24, 0x06	; 6
    10b4:	19 f4       	brne	.+6      	; 0x10bc <CheckPins+0x8fa>
        PartFound = PART_DIODE;	//mark for diode only, if no other component is found
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	80 93 07 01 	sts	0x0107, r24
				//since there is a problem with Transistors with a protection diode
#if DebugOut == 4
        lcd_data('D');
#endif
     }
     diodes[NumOfDiodes].Anode = HighPin;
    10bc:	80 91 05 01 	lds	r24, 0x0105
    10c0:	e8 2f       	mov	r30, r24
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	ee 0f       	add	r30, r30
    10c6:	ff 1f       	adc	r31, r31
    10c8:	ee 0f       	add	r30, r30
    10ca:	ff 1f       	adc	r31, r31
    10cc:	ed 58       	subi	r30, 0x8D	; 141
    10ce:	fe 4f       	sbci	r31, 0xFE	; 254
    10d0:	10 83       	st	Z, r17
     diodes[NumOfDiodes].Cathode = LowPin;
    10d2:	31 82       	std	Z+1, r3	; 0x01
     diodes[NumOfDiodes].Voltage = adc.hp1;	// voltage in Millivolt 
    10d4:	93 82       	std	Z+3, r9	; 0x03
    10d6:	82 82       	std	Z+2, r8	; 0x02
     NumOfDiodes++;
    10d8:	8f 5f       	subi	r24, 0xFF	; 255
    10da:	80 93 05 01 	sts	0x0105, r24
#if DebugOut == 4
  lcd_data(NumOfDiodes+'0');
#endif

widmes:
  if (NumOfDiodes > 0) goto clean_ports;
    10de:	80 91 05 01 	lds	r24, 0x0105
    10e2:	88 23       	and	r24, r24
    10e4:	09 f0       	breq	.+2      	; 0x10e8 <CheckPins+0x926>
    10e6:	12 c2       	rjmp	.+1060   	; 0x150c <CheckPins+0xd4a>
  // resistor measurement
  wdt_reset();
    10e8:	a8 95       	wdr
// U_SCALE can be set to 4 for better resolution of ReadADC result
#if U_SCALE != 1
  ADCconfig.U_AVCC *= U_SCALE;	// scale to higher resolution, mV scale is not required
    10ea:	80 91 3d 01 	lds	r24, 0x013D
    10ee:	90 91 3e 01 	lds	r25, 0x013E
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	90 93 3e 01 	sts	0x013E, r25
    10fe:	80 93 3d 01 	sts	0x013D, r24
  ADCconfig.U_Bandgap *= U_SCALE;
    1102:	80 91 3b 01 	lds	r24, 0x013B
    1106:	90 91 3c 01 	lds	r25, 0x013C
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	90 93 3c 01 	sts	0x013C, r25
    1116:	80 93 3b 01 	sts	0x013B, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = R_ANZ_MESS;	// switch to special number of repetitions
    111a:	8e eb       	ldi	r24, 0xBE	; 190
    111c:	80 93 39 01 	sts	0x0139, r24
#endif
  #define MAX_REPEAT (700 / (5 + R_ANZ_MESS/8))
  ADC_PORT = TXD_VAL;
    1120:	88 e0       	ldi	r24, 0x08	; 8
    1122:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
    1124:	bb 81       	ldd	r27, Y+3	; 0x03
    1126:	b7 b9       	out	0x07, r27	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    1128:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;	
    112a:	c5 b8       	out	0x05, r12	; 5
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
    112c:	ee 24       	eor	r14, r14
    112e:	ff 24       	eor	r15, r15
  for (ii=1;ii<MAX_REPEAT;ii++) {
    1130:	21 e0       	ldi	r18, 0x01	; 1
    1132:	01 c0       	rjmp	.+2      	; 0x1136 <CheckPins+0x974>
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    1134:	7c 01       	movw	r14, r24
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
    1136:	83 2d       	mov	r24, r3
    1138:	2b 8b       	std	Y+19, r18	; 0x13
    113a:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
    113e:	08 2f       	mov	r16, r24
    1140:	49 2e       	mov	r4, r25
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    1142:	81 2f       	mov	r24, r17
    1144:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
     udiff = adc.hp1 - adc.hp2;
    1148:	ac 01       	movw	r20, r24
    114a:	4e 19       	sub	r20, r14
    114c:	5f 09       	sbc	r21, r15
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    114e:	2b 89       	ldd	r18, Y+19	; 0x13
    1150:	57 ff       	sbrs	r21, 7
    1152:	03 c0       	rjmp	.+6      	; 0x115a <CheckPins+0x998>
    1154:	50 95       	com	r21
    1156:	41 95       	neg	r20
    1158:	5f 4f       	sbci	r21, 0xFF	; 255
    115a:	43 30       	cpi	r20, 0x03	; 3
    115c:	51 05       	cpc	r21, r1
    115e:	84 f4       	brge	.+32     	; 0x1180 <CheckPins+0x9be>
    1160:	ac 01       	movw	r20, r24
  adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
#endif
  if (adc.tp1 > adc.hp1) {
     adc.tp1 = adc.hp1;
  }
  R_PORT = 0;
    1162:	15 b8       	out	0x05, r1	; 5
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (GND)
    1164:	e8 85       	ldd	r30, Y+8	; 0x08
    1166:	e4 b9       	out	0x04, r30	; 4
  adc.hp2 = W5msReadADC(HighPin);	// read voltage, should be down
    1168:	81 2f       	mov	r24, r17
    116a:	4e 8b       	std	Y+22, r20	; 0x16
    116c:	5b 8b       	std	Y+19, r21	; 0x13
    116e:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
  if (adc.hp2 > (20*U_SCALE)) {
    1172:	4e 89       	ldd	r20, Y+22	; 0x16
    1174:	5b 89       	ldd	r21, Y+19	; 0x13
    1176:	81 35       	cpi	r24, 0x51	; 81
    1178:	91 05       	cpc	r25, r1
    117a:	08 f0       	brcs	.+2      	; 0x117e <CheckPins+0x9bc>
    117c:	ac c1       	rjmp	.+856    	; 0x14d6 <CheckPins+0xd14>
    117e:	05 c0       	rjmp	.+10     	; 0x118a <CheckPins+0x9c8>
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     udiff = adc.hp1 - adc.hp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.hp2 = adc.hp1;
     wdt_reset();
    1180:	a8 95       	wdr
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    1182:	2f 5f       	subi	r18, 0xFF	; 255
    1184:	29 31       	cpi	r18, 0x19	; 25
    1186:	b1 f6       	brne	.-84     	; 0x1134 <CheckPins+0x972>
    1188:	a6 c1       	rjmp	.+844    	; 0x14d6 <CheckPins+0xd14>
     lcd_string(utoa(adc.hp2, outval, 10));
     lcd_space();
#endif
     goto testend;
  }
  R_PORT = HiPinRH;		//switch R_H for High-Pin to VCC
    118a:	f8 85       	ldd	r31, Y+8	; 0x08
    118c:	f5 b9       	out	0x05, r31	; 5
  adc.hp2 = W5msReadADC(HighPin);	// voltage at resistor Rx with R_H
    118e:	81 2f       	mov	r24, r17
    1190:	4e 8b       	std	Y+22, r20	; 0x16
    1192:	5b 8b       	std	Y+19, r21	; 0x13
    1194:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
    1198:	7c 01       	movw	r14, r24

  ADC_DDR = HiADCm;		//switch High-Pin to output
    119a:	29 81       	ldd	r18, Y+1	; 0x01
    119c:	27 b9       	out	0x07, r18	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
    119e:	28 b9       	out	0x08, r18	; 8
  R_PORT = 0;
    11a0:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
    11a2:	3a 81       	ldd	r19, Y+2	; 0x02
    11a4:	34 b9       	out	0x04, r19	; 4
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
    11a6:	aa 24       	eor	r10, r10
    11a8:	bb 24       	eor	r11, r11
  for (ii=1;ii<MAX_REPEAT;ii++) {
    11aa:	21 e0       	ldi	r18, 0x01	; 1
    11ac:	4e 89       	ldd	r20, Y+22	; 0x16
    11ae:	5b 89       	ldd	r21, Y+19	; 0x13
    11b0:	3a 01       	movw	r6, r20
    11b2:	01 c0       	rjmp	.+2      	; 0x11b6 <CheckPins+0x9f4>
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    11b4:	56 01       	movw	r10, r12
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
    11b6:	81 2f       	mov	r24, r17
    11b8:	2b 8b       	std	Y+19, r18	; 0x13
    11ba:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
    11be:	4c 01       	movw	r8, r24
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    11c0:	83 2d       	mov	r24, r3
    11c2:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
    11c6:	6c 01       	movw	r12, r24
     udiff = adc.lp1 - adc.lp2;
    11c8:	8a 19       	sub	r24, r10
    11ca:	9b 09       	sbc	r25, r11
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    11cc:	2b 89       	ldd	r18, Y+19	; 0x13
    11ce:	97 ff       	sbrs	r25, 7
    11d0:	03 c0       	rjmp	.+6      	; 0x11d8 <CheckPins+0xa16>
    11d2:	90 95       	com	r25
    11d4:	81 95       	neg	r24
    11d6:	9f 4f       	sbci	r25, 0xFF	; 255
    11d8:	83 30       	cpi	r24, 0x03	; 3
    11da:	91 05       	cpc	r25, r1
    11dc:	8c f4       	brge	.+34     	; 0x1200 <CheckPins+0xa3e>
    11de:	a3 01       	movw	r20, r6
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = MEM_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	88 0f       	add	r24, r24
  adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
#endif
  if (adc.tp2 < adc.lp1) {
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
    11e4:	84 b9       	out	0x04, r24	; 4
  adc.lp2 = W5msReadADC(LowPin);
    11e6:	83 2d       	mov	r24, r3
    11e8:	6e 8a       	std	Y+22, r6	; 0x16
    11ea:	5b 8b       	std	Y+19, r21	; 0x13
    11ec:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
    11f0:	3c 01       	movw	r6, r24
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    11f2:	4e 89       	ldd	r20, Y+22	; 0x16
    11f4:	5b 89       	ldd	r21, Y+19	; 0x13
    11f6:	84 e4       	ldi	r24, 0x44	; 68
    11f8:	40 3c       	cpi	r20, 0xC0	; 192
    11fa:	58 07       	cpc	r21, r24
    11fc:	30 f0       	brcs	.+12     	; 0x120a <CheckPins+0xa48>
    11fe:	0c c0       	rjmp	.+24     	; 0x1218 <CheckPins+0xa56>
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     udiff = adc.lp1 - adc.lp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.lp2 = adc.lp1;
     wdt_reset();
    1200:	a8 95       	wdr
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
  R_PORT = 0;
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    1202:	2f 5f       	subi	r18, 0xFF	; 255
    1204:	29 31       	cpi	r18, 0x19	; 25
    1206:	b1 f6       	brne	.-84     	; 0x11b4 <CheckPins+0x9f2>
    1208:	66 c1       	rjmp	.+716    	; 0x14d6 <CheckPins+0xd14>
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
  adc.lp2 = W5msReadADC(LowPin);
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    120a:	95 e8       	ldi	r25, 0x85	; 133
    120c:	e9 16       	cp	r14, r25
    120e:	91 e0       	ldi	r25, 0x01	; 1
    1210:	f9 06       	cpc	r15, r25
    1212:	08 f0       	brcs	.+2      	; 0x1216 <CheckPins+0xa54>
    1214:	60 c1       	rjmp	.+704    	; 0x14d6 <CheckPins+0xd14>
    1216:	06 c0       	rjmp	.+12     	; 0x1224 <CheckPins+0xa62>
     lcd_data('F');
#endif
     goto testend; 
  }
//    if((adc.hp2 + (adc.hp2 / 61)) < adc.hp1)
  if (adc.hp2 < (4972*U_SCALE)) { 
    1218:	a0 eb       	ldi	r26, 0xB0	; 176
    121a:	ea 16       	cp	r14, r26
    121c:	ad e4       	ldi	r26, 0x4D	; 77
    121e:	fa 06       	cpc	r15, r26
    1220:	08 f0       	brcs	.+2      	; 0x1224 <CheckPins+0xa62>
    1222:	59 c1       	rjmp	.+690    	; 0x14d6 <CheckPins+0xd14>
     // voltage breaks down with low test current and it is not nearly shorted  => resistor
//     if (adc.lp1 < 120) { // take measurement with R_H 
     if (adc.lp1 < (169*U_SCALE)) { // take measurement with R_H 
    1224:	b4 ea       	ldi	r27, 0xA4	; 164
    1226:	cb 16       	cp	r12, r27
    1228:	b2 e0       	ldi	r27, 0x02	; 2
    122a:	db 06       	cpc	r13, r27
    122c:	08 f0       	brcs	.+2      	; 0x1230 <CheckPins+0xa6e>
    122e:	72 c0       	rjmp	.+228    	; 0x1314 <CheckPins+0xb52>
        ii = 'H';
        if (adc.lp2 < (38*U_SCALE)) {
    1230:	e8 e9       	ldi	r30, 0x98	; 152
    1232:	6e 16       	cp	r6, r30
    1234:	71 04       	cpc	r7, r1
    1236:	08 f4       	brcc	.+2      	; 0x123a <CheckPins+0xa78>
    1238:	4e c1       	rjmp	.+668    	; 0x14d6 <CheckPins+0xd14>
           // measurement > 60MOhm to big resistance
           goto testend;
        }
        // two measurements with R_H resistors (470k) are made:
        // lirx1 (measurement at HighPin)
        lirx1 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)adc.hp2 / (ADCconfig.U_AVCC - adc.hp2);
    123a:	80 90 3d 01 	lds	r8, 0x013D
    123e:	90 90 3e 01 	lds	r9, 0x013E
    1242:	b7 01       	movw	r22, r14
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	28 e9       	ldi	r18, 0x98	; 152
    124a:	37 eb       	ldi	r19, 0xB7	; 183
    124c:	40 e0       	ldi	r20, 0x00	; 0
    124e:	50 e0       	ldi	r21, 0x00	; 0
    1250:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
    1254:	94 01       	movw	r18, r8
    1256:	2e 19       	sub	r18, r14
    1258:	3f 09       	sbc	r19, r15
    125a:	40 e0       	ldi	r20, 0x00	; 0
    125c:	50 e0       	ldi	r21, 0x00	; 0
    125e:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
    1262:	59 01       	movw	r10, r18
    1264:	6a 01       	movw	r12, r20
        // lirx2 (measurement at LowPin)
        lirx2 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)(ADCconfig.U_AVCC - adc.lp2) / adc.lp2;
    1266:	86 18       	sub	r8, r6
    1268:	97 08       	sbc	r9, r7
    126a:	b4 01       	movw	r22, r8
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	28 e9       	ldi	r18, 0x98	; 152
    1272:	37 eb       	ldi	r19, 0xB7	; 183
    1274:	40 e0       	ldi	r20, 0x00	; 0
    1276:	50 e0       	ldi	r21, 0x00	; 0
    1278:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
    127c:	93 01       	movw	r18, r6
    127e:	40 e0       	ldi	r20, 0x00	; 0
    1280:	50 e0       	ldi	r21, 0x00	; 0
    1282:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
#define FAKT_LOW 2		//resolution is about twice as good
#else
#define FAKT_LOW 4		//resolution is about four times better
#endif
#ifdef AUTOSCALE_ADC
        if (adc.hp2 < U_INT_LIMIT) {
    1286:	f8 e7       	ldi	r31, 0x78	; 120
    1288:	ef 16       	cp	r14, r31
    128a:	ff e0       	ldi	r31, 0x0F	; 15
    128c:	ff 06       	cpc	r15, r31
    128e:	70 f4       	brcc	.+28     	; 0x12ac <CheckPins+0xaea>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    1290:	c6 01       	movw	r24, r12
    1292:	b5 01       	movw	r22, r10
    1294:	e2 e0       	ldi	r30, 0x02	; 2
    1296:	66 0f       	add	r22, r22
    1298:	77 1f       	adc	r23, r23
    129a:	88 1f       	adc	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	ea 95       	dec	r30
    12a0:	d1 f7       	brne	.-12     	; 0x1296 <CheckPins+0xad4>
    12a2:	62 0f       	add	r22, r18
    12a4:	73 1f       	adc	r23, r19
    12a6:	84 1f       	adc	r24, r20
    12a8:	95 1f       	adc	r25, r21
    12aa:	12 c0       	rjmp	.+36     	; 0x12d0 <CheckPins+0xb0e>
        } else if (adc.lp2 < U_INT_LIMIT){
    12ac:	88 e7       	ldi	r24, 0x78	; 120
    12ae:	68 16       	cp	r6, r24
    12b0:	8f e0       	ldi	r24, 0x0F	; 15
    12b2:	78 06       	cpc	r7, r24
    12b4:	a0 f4       	brcc	.+40     	; 0x12de <CheckPins+0xb1c>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    12b6:	ca 01       	movw	r24, r20
    12b8:	b9 01       	movw	r22, r18
    12ba:	22 e0       	ldi	r18, 0x02	; 2
    12bc:	66 0f       	add	r22, r22
    12be:	77 1f       	adc	r23, r23
    12c0:	88 1f       	adc	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	2a 95       	dec	r18
    12c6:	d1 f7       	brne	.-12     	; 0x12bc <CheckPins+0xafa>
    12c8:	6a 0d       	add	r22, r10
    12ca:	7b 1d       	adc	r23, r11
    12cc:	8c 1d       	adc	r24, r12
    12ce:	9d 1d       	adc	r25, r13
    12d0:	25 e0       	ldi	r18, 0x05	; 5
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	40 e0       	ldi	r20, 0x00	; 0
    12d6:	50 e0       	ldi	r21, 0x00	; 0
    12d8:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
    12dc:	08 c0       	rjmp	.+16     	; 0x12ee <CheckPins+0xb2c>
        } else 
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_H measurements
    12de:	2a 0d       	add	r18, r10
    12e0:	3b 1d       	adc	r19, r11
    12e2:	4c 1d       	adc	r20, r12
    12e4:	5d 1d       	adc	r21, r13
    12e6:	56 95       	lsr	r21
    12e8:	47 95       	ror	r20
    12ea:	37 95       	ror	r19
    12ec:	27 95       	ror	r18
        }
        lrx1 *= 100;
    12ee:	ca 01       	movw	r24, r20
    12f0:	b9 01       	movw	r22, r18
    12f2:	24 e6       	ldi	r18, 0x64	; 100
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	40 e0       	ldi	r20, 0x00	; 0
    12f8:	50 e0       	ldi	r21, 0x00	; 0
    12fa:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
    12fe:	6b 01       	movw	r12, r22
    1300:	7c 01       	movw	r14, r24
        lrx1 += RH_OFFSET;			// add constant for correction of systematic error
    1302:	8c ea       	ldi	r24, 0xAC	; 172
    1304:	9d e0       	ldi	r25, 0x0D	; 13
    1306:	a0 e0       	ldi	r26, 0x00	; 0
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	c8 0e       	add	r12, r24
    130c:	d9 1e       	adc	r13, r25
    130e:	ea 1e       	adc	r14, r26
    1310:	fb 1e       	adc	r15, r27
    1312:	78 c0       	rjmp	.+240    	; 0x1404 <CheckPins+0xc42>
    1314:	80 2f       	mov	r24, r16
    1316:	94 2d       	mov	r25, r4
    1318:	48 17       	cp	r20, r24
    131a:	59 07       	cpc	r21, r25
    131c:	08 f4       	brcc	.+2      	; 0x1320 <CheckPins+0xb5e>
    131e:	ca 01       	movw	r24, r20
    1320:	76 01       	movw	r14, r12
    1322:	c8 14       	cp	r12, r8
    1324:	d9 04       	cpc	r13, r9
    1326:	08 f4       	brcc	.+2      	; 0x132a <CheckPins+0xb68>
    1328:	74 01       	movw	r14, r8
    132a:	3c 01       	movw	r6, r24
    132c:	84 17       	cp	r24, r20
    132e:	95 07       	cpc	r25, r21
    1330:	08 f4       	brcc	.+2      	; 0x1334 <CheckPins+0xb72>
    1332:	3a 01       	movw	r6, r20
        // two measurements with R_L resistors (680) are made:
        // lirx1 (measurement at HighPin)
        if (adc.tp1 > adc.hp1) {
           adc.hp1 = adc.tp1;		//diff negativ is illegal
        }
        lirx1 =(unsigned long)RR680PL * (unsigned long)(adc.hp1 - adc.tp1) / (ADCconfig.U_AVCC - adc.hp1);
    1334:	b3 01       	movw	r22, r6
    1336:	68 1b       	sub	r22, r24
    1338:	79 0b       	sbc	r23, r25
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	20 91 08 01 	lds	r18, 0x0108
    1342:	30 91 09 01 	lds	r19, 0x0109
    1346:	40 e0       	ldi	r20, 0x00	; 0
    1348:	50 e0       	ldi	r21, 0x00	; 0
    134a:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
    134e:	20 91 3d 01 	lds	r18, 0x013D
    1352:	30 91 3e 01 	lds	r19, 0x013E
    1356:	26 19       	sub	r18, r6
    1358:	37 09       	sbc	r19, r7
    135a:	40 e0       	ldi	r20, 0x00	; 0
    135c:	50 e0       	ldi	r21, 0x00	; 0
    135e:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
    1362:	49 01       	movw	r8, r18
    1364:	5a 01       	movw	r10, r20
    1366:	27 01       	movw	r4, r14
    1368:	ce 14       	cp	r12, r14
    136a:	df 04       	cpc	r13, r15
    136c:	08 f4       	brcc	.+2      	; 0x1370 <CheckPins+0xbae>
    136e:	26 01       	movw	r4, r12
        if (adc.tp2 < adc.lp1) {
           adc.lp1 = adc.tp2;		//diff negativ is illegal
        }
        // lirx2 (Measurement at LowPin)
        lirx2 =(unsigned long)RR680MI * (unsigned long)(adc.tp2 -adc.lp1) / adc.lp1;
    1370:	e4 18       	sub	r14, r4
    1372:	f5 08       	sbc	r15, r5
    1374:	b7 01       	movw	r22, r14
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	20 91 02 01 	lds	r18, 0x0102
    137e:	30 91 03 01 	lds	r19, 0x0103
    1382:	40 e0       	ldi	r20, 0x00	; 0
    1384:	50 e0       	ldi	r21, 0x00	; 0
    1386:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
    138a:	92 01       	movw	r18, r4
    138c:	40 e0       	ldi	r20, 0x00	; 0
    138e:	50 e0       	ldi	r21, 0x00	; 0
    1390:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
//     lrx1 =(unsigned long)R_L_VAL * (unsigned long)adc.hp1 / (adc.hp3 - adc.hp1);

#ifdef AUTOSCALE_ADC
        if (adc.hp1 < U_INT_LIMIT) {
    1394:	98 e7       	ldi	r25, 0x78	; 120
    1396:	69 16       	cp	r6, r25
    1398:	9f e0       	ldi	r25, 0x0F	; 15
    139a:	79 06       	cpc	r7, r25
    139c:	70 f4       	brcc	.+28     	; 0x13ba <CheckPins+0xbf8>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    139e:	c5 01       	movw	r24, r10
    13a0:	b4 01       	movw	r22, r8
    13a2:	02 e0       	ldi	r16, 0x02	; 2
    13a4:	66 0f       	add	r22, r22
    13a6:	77 1f       	adc	r23, r23
    13a8:	88 1f       	adc	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	0a 95       	dec	r16
    13ae:	d1 f7       	brne	.-12     	; 0x13a4 <CheckPins+0xbe2>
    13b0:	62 0f       	add	r22, r18
    13b2:	73 1f       	adc	r23, r19
    13b4:	84 1f       	adc	r24, r20
    13b6:	95 1f       	adc	r25, r21
    13b8:	12 c0       	rjmp	.+36     	; 0x13de <CheckPins+0xc1c>
        } else if (adc.lp1 < U_INT_LIMIT) {
    13ba:	a8 e7       	ldi	r26, 0x78	; 120
    13bc:	4a 16       	cp	r4, r26
    13be:	af e0       	ldi	r26, 0x0F	; 15
    13c0:	5a 06       	cpc	r5, r26
    13c2:	b0 f4       	brcc	.+44     	; 0x13f0 <CheckPins+0xc2e>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    13c4:	ca 01       	movw	r24, r20
    13c6:	b9 01       	movw	r22, r18
    13c8:	b2 e0       	ldi	r27, 0x02	; 2
    13ca:	66 0f       	add	r22, r22
    13cc:	77 1f       	adc	r23, r23
    13ce:	88 1f       	adc	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	ba 95       	dec	r27
    13d4:	d1 f7       	brne	.-12     	; 0x13ca <CheckPins+0xc08>
    13d6:	68 0d       	add	r22, r8
    13d8:	79 1d       	adc	r23, r9
    13da:	8a 1d       	adc	r24, r10
    13dc:	9b 1d       	adc	r25, r11
    13de:	25 e0       	ldi	r18, 0x05	; 5
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	40 e0       	ldi	r20, 0x00	; 0
    13e4:	50 e0       	ldi	r21, 0x00	; 0
    13e6:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
    13ea:	69 01       	movw	r12, r18
    13ec:	7a 01       	movw	r14, r20
    13ee:	0a c0       	rjmp	.+20     	; 0x1404 <CheckPins+0xc42>
        } else
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_L measurements
    13f0:	69 01       	movw	r12, r18
    13f2:	7a 01       	movw	r14, r20
    13f4:	c8 0c       	add	r12, r8
    13f6:	d9 1c       	adc	r13, r9
    13f8:	ea 1c       	adc	r14, r10
    13fa:	fb 1c       	adc	r15, r11
    13fc:	f6 94       	lsr	r15
    13fe:	e7 94       	ror	r14
    1400:	d7 94       	ror	r13
    1402:	c7 94       	ror	r12
  lcd_line4();
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
    1404:	80 91 07 01 	lds	r24, 0x0107
    1408:	82 30       	cpi	r24, 0x02	; 2
    140a:	18 f0       	brcs	.+6      	; 0x1412 <CheckPins+0xc50>
    140c:	86 30       	cpi	r24, 0x06	; 6
    140e:	09 f0       	breq	.+2      	; 0x1412 <CheckPins+0xc50>
    1410:	62 c0       	rjmp	.+196    	; 0x14d6 <CheckPins+0xd14>
        for (ii=0; ii<ResistorsFound; ii++) {
    1412:	50 91 5b 01 	lds	r21, 0x015B
    1416:	40 e0       	ldi	r20, 0x00	; 0
           // search measurements with inverse polarity 
           thisR = &resis[ii];
           if (thisR->rt != TristatePin) {
    1418:	8b e0       	ldi	r24, 0x0B	; 11
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	3e c0       	rjmp	.+124    	; 0x149a <CheckPins+0xcd8>
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
           // search measurements with inverse polarity 
           thisR = &resis[ii];
    141e:	24 2f       	mov	r18, r20
    1420:	30 e0       	ldi	r19, 0x00	; 0
           if (thisR->rt != TristatePin) {
    1422:	28 9f       	mul	r18, r24
    1424:	f0 01       	movw	r30, r0
    1426:	29 9f       	mul	r18, r25
    1428:	f0 0d       	add	r31, r0
    142a:	38 9f       	mul	r19, r24
    142c:	f0 0d       	add	r31, r0
    142e:	11 24       	eor	r1, r1
    1430:	e8 5e       	subi	r30, 0xE8	; 232
    1432:	fe 4f       	sbci	r31, 0xFE	; 254
    1434:	22 85       	ldd	r18, Z+10	; 0x0a
    1436:	22 15       	cp	r18, r2
    1438:	11 f0       	breq	.+4      	; 0x143e <CheckPins+0xc7c>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    143a:	4f 5f       	subi	r20, 0xFF	; 255
    143c:	2e c0       	rjmp	.+92     	; 0x149a <CheckPins+0xcd8>
           if (thisR->rt != TristatePin) {
              continue;
           }
           // must be measurement with inverse polarity 
           // resolution is 0.1 Ohm, 1 Ohm = 10 !
           lirx1 = (labs((long)lrx1 - (long)thisR->rx) * 10) / (lrx1 + thisR->rx + 100);
    143e:	80 80       	ld	r8, Z
    1440:	91 80       	ldd	r9, Z+1	; 0x01
    1442:	a2 80       	ldd	r10, Z+2	; 0x02
    1444:	b3 80       	ldd	r11, Z+3	; 0x03
    1446:	c7 01       	movw	r24, r14
    1448:	b6 01       	movw	r22, r12
    144a:	68 19       	sub	r22, r8
    144c:	79 09       	sbc	r23, r9
    144e:	8a 09       	sbc	r24, r10
    1450:	9b 09       	sbc	r25, r11
    1452:	97 ff       	sbrs	r25, 7
    1454:	07 c0       	rjmp	.+14     	; 0x1464 <CheckPins+0xca2>
    1456:	90 95       	com	r25
    1458:	80 95       	com	r24
    145a:	70 95       	com	r23
    145c:	61 95       	neg	r22
    145e:	7f 4f       	sbci	r23, 0xFF	; 255
    1460:	8f 4f       	sbci	r24, 0xFF	; 255
    1462:	9f 4f       	sbci	r25, 0xFF	; 255
    1464:	2a e0       	ldi	r18, 0x0A	; 10
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	40 e0       	ldi	r20, 0x00	; 0
    146a:	50 e0       	ldi	r21, 0x00	; 0
    146c:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
    1470:	a5 01       	movw	r20, r10
    1472:	94 01       	movw	r18, r8
    1474:	2c 59       	subi	r18, 0x9C	; 156
    1476:	3f 4f       	sbci	r19, 0xFF	; 255
    1478:	4f 4f       	sbci	r20, 0xFF	; 255
    147a:	5f 4f       	sbci	r21, 0xFF	; 255
    147c:	2c 0d       	add	r18, r12
    147e:	3d 1d       	adc	r19, r13
    1480:	4e 1d       	adc	r20, r14
    1482:	5f 1d       	adc	r21, r15
    1484:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
           if (lirx1  > 0) {
    1488:	21 15       	cp	r18, r1
    148a:	31 05       	cpc	r19, r1
    148c:	41 05       	cpc	r20, r1
    148e:	51 05       	cpc	r21, r1
    1490:	11 f5       	brne	.+68     	; 0x14d6 <CheckPins+0xd14>
              DisplayValue(lirx1,-1,LCD_CHAR_OMEGA,3)
              lcd_space();
#endif
              goto testend; // <10% mismatch
           }
           PartFound = PART_RESISTOR;
    1492:	86 e0       	ldi	r24, 0x06	; 6
    1494:	80 93 07 01 	sts	0x0107, r24
           goto testend;
    1498:	1e c0       	rjmp	.+60     	; 0x14d6 <CheckPins+0xd14>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    149a:	45 17       	cp	r20, r21
    149c:	08 f4       	brcc	.+2      	; 0x14a0 <CheckPins+0xcde>
    149e:	bf cf       	rjmp	.-130    	; 0x141e <CheckPins+0xc5c>
           }
           PartFound = PART_RESISTOR;
           goto testend;
        } // end for
        // no same resistor with the same Tristate-Pin found, new one
        thisR = &resis[ResistorsFound];		// pointer to a free resistor structure
    14a0:	25 2f       	mov	r18, r21
    14a2:	30 e0       	ldi	r19, 0x00	; 0
        thisR->rx = lrx1;		// save resistor value
    14a4:	8b e0       	ldi	r24, 0x0B	; 11
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	28 9f       	mul	r18, r24
    14aa:	f0 01       	movw	r30, r0
    14ac:	29 9f       	mul	r18, r25
    14ae:	f0 0d       	add	r31, r0
    14b0:	38 9f       	mul	r19, r24
    14b2:	f0 0d       	add	r31, r0
    14b4:	11 24       	eor	r1, r1
    14b6:	e8 5e       	subi	r30, 0xE8	; 232
    14b8:	fe 4f       	sbci	r31, 0xFE	; 254
    14ba:	c0 82       	st	Z, r12
    14bc:	d1 82       	std	Z+1, r13	; 0x01
    14be:	e2 82       	std	Z+2, r14	; 0x02
    14c0:	f3 82       	std	Z+3, r15	; 0x03
#if FLASHEND > 0x1fff
        thisR->lx = 0;			// no inductance
    14c2:	14 82       	std	Z+4, r1	; 0x04
    14c4:	15 82       	std	Z+5, r1	; 0x05
    14c6:	16 82       	std	Z+6, r1	; 0x06
    14c8:	17 82       	std	Z+7, r1	; 0x07
#endif
        thisR->ra = LowPin;		// save Pin numbers
    14ca:	30 86       	std	Z+8, r3	; 0x08
        thisR->rb = HighPin;
    14cc:	11 87       	std	Z+9, r17	; 0x09
        thisR->rt = TristatePin;	// Tristate is saved for easier search of inverse measurement
    14ce:	22 86       	std	Z+10, r2	; 0x0a
        ResistorsFound++;			// 1 more resistor found
    14d0:	5f 5f       	subi	r21, 0xFF	; 255
    14d2:	50 93 5b 01 	sts	0x015B, r21
#endif
     }
  }
  testend:
#if U_SCALE != 1
  ADCconfig.U_AVCC /= U_SCALE;		// scale back to mV resolution
    14d6:	80 91 3d 01 	lds	r24, 0x013D
    14da:	90 91 3e 01 	lds	r25, 0x013E
    14de:	96 95       	lsr	r25
    14e0:	87 95       	ror	r24
    14e2:	96 95       	lsr	r25
    14e4:	87 95       	ror	r24
    14e6:	90 93 3e 01 	sts	0x013E, r25
    14ea:	80 93 3d 01 	sts	0x013D, r24
  ADCconfig.U_Bandgap /= U_SCALE;
    14ee:	80 91 3b 01 	lds	r24, 0x013B
    14f2:	90 91 3c 01 	lds	r25, 0x013C
    14f6:	96 95       	lsr	r25
    14f8:	87 95       	ror	r24
    14fa:	96 95       	lsr	r25
    14fc:	87 95       	ror	r24
    14fe:	90 93 3c 01 	sts	0x013C, r25
    1502:	80 93 3b 01 	sts	0x013B, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = ANZ_MESS;		// switch back to standard number of repetition
    1506:	89 e1       	ldi	r24, 0x19	; 25
    1508:	80 93 39 01 	sts	0x0139, r24
#if DebugOut < 10
  wait_about2s();
#endif
#endif
 clean_ports:
  ADC_DDR = TXD_MSK;		// all ADC-Pins Input
    150c:	88 e0       	ldi	r24, 0x08	; 8
    150e:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// all ADC outputs to Ground, keine Pull up
    1510:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// all resistor-outputs to Input
    1512:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// all resistor-outputs to Ground, no Pull up
    1514:	15 b8       	out	0x05, r1	; 5
} // end CheckPins()
    1516:	66 96       	adiw	r28, 0x16	; 22
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
    151c:	de bf       	out	0x3e, r29	; 62
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	cd bf       	out	0x3d, r28	; 61
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	ff 90       	pop	r15
    152c:	ef 90       	pop	r14
    152e:	df 90       	pop	r13
    1530:	cf 90       	pop	r12
    1532:	bf 90       	pop	r11
    1534:	af 90       	pop	r10
    1536:	9f 90       	pop	r9
    1538:	8f 90       	pop	r8
    153a:	7f 90       	pop	r7
    153c:	6f 90       	pop	r6
    153e:	5f 90       	pop	r5
    1540:	4f 90       	pop	r4
    1542:	3f 90       	pop	r3
    1544:	2f 90       	pop	r2
    1546:	08 95       	ret

00001548 <PinLayout>:
TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
}
#endif

// show the Pin Layout of the device 
void PinLayout(char pin1, char pin2, char pin3) {
    1548:	ff 92       	push	r15
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	18 2f       	mov	r17, r24
    1550:	06 2f       	mov	r16, r22
    1552:	f4 2e       	mov	r15, r20
// pin1-3 is EBC or SGD or CGA
#ifndef EBC_STYLE
   // Layout with 123= style
   lcd_fix_string(N123_str);		//" 123="
    1554:	83 e0       	ldi	r24, 0x03	; 3
    1556:	91 e0       	ldi	r25, 0x01	; 1
    1558:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
   for (ii=0;ii<3;ii++) {
    155c:	10 92 48 01 	sts	0x0148, r1
    1560:	1e c0       	rjmp	.+60     	; 0x159e <PinLayout+0x56>
       if (ii == trans.e)  lcd_data(pin1);	// Output Character in right order
    1562:	90 91 5a 01 	lds	r25, 0x015A
    1566:	89 17       	cp	r24, r25
    1568:	19 f4       	brne	.+6      	; 0x1570 <PinLayout+0x28>
    156a:	81 2f       	mov	r24, r17
    156c:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
       if (ii == trans.b)  lcd_data(pin2);
    1570:	90 91 48 01 	lds	r25, 0x0148
    1574:	80 91 58 01 	lds	r24, 0x0158
    1578:	98 17       	cp	r25, r24
    157a:	19 f4       	brne	.+6      	; 0x1582 <PinLayout+0x3a>
    157c:	80 2f       	mov	r24, r16
    157e:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
       if (ii == trans.c)  lcd_data(pin3);
    1582:	90 91 48 01 	lds	r25, 0x0148
    1586:	80 91 59 01 	lds	r24, 0x0159
    158a:	98 17       	cp	r25, r24
    158c:	19 f4       	brne	.+6      	; 0x1594 <PinLayout+0x4c>
    158e:	8f 2d       	mov	r24, r15
    1590:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
void PinLayout(char pin1, char pin2, char pin3) {
// pin1-3 is EBC or SGD or CGA
#ifndef EBC_STYLE
   // Layout with 123= style
   lcd_fix_string(N123_str);		//" 123="
   for (ii=0;ii<3;ii++) {
    1594:	80 91 48 01 	lds	r24, 0x0148
    1598:	8f 5f       	subi	r24, 0xFF	; 255
    159a:	80 93 48 01 	sts	0x0148, r24
    159e:	80 91 48 01 	lds	r24, 0x0148
    15a2:	83 30       	cpi	r24, 0x03	; 3
    15a4:	f0 f2       	brcs	.-68     	; 0x1562 <PinLayout+0x1a>
   lcd_testpin(trans.e);
   lcd_testpin(trans.b);
   lcd_testpin(trans.c);
 #endif
#endif
}
    15a6:	1f 91       	pop	r17
    15a8:	0f 91       	pop	r16
    15aa:	ff 90       	pop	r15
    15ac:	08 95       	ret

000015ae <AutoCheck>:
void AutoCheck(void) {
    15ae:	2f 92       	push	r2
    15b0:	3f 92       	push	r3
    15b2:	4f 92       	push	r4
    15b4:	5f 92       	push	r5
    15b6:	6f 92       	push	r6
    15b8:	7f 92       	push	r7
    15ba:	8f 92       	push	r8
    15bc:	9f 92       	push	r9
    15be:	af 92       	push	r10
    15c0:	bf 92       	push	r11
    15c2:	cf 92       	push	r12
    15c4:	df 92       	push	r13
    15c6:	ef 92       	push	r14
    15c8:	ff 92       	push	r15
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	2e 97       	sbiw	r28, 0x0e	; 14
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
  #ifdef AUTOSCALE_ADC
  int8_t udiff;		// difference between ADC Voltage with VCC or Bandgap reference
  int8_t udiff2;
  #endif
 #endif
  ADC_PORT = TXD_VAL;
    15e2:	88 e0       	ldi	r24, 0x08	; 8
    15e4:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = TXD_MSK;
    15e6:	87 b9       	out	0x07, r24	; 7
  R_PORT = (1<<(TP1*2));		//Pin 1 over RL to +
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	85 b9       	out	0x05, r24	; 5
  R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//Pin 2 over RL to -
    15ec:	85 e0       	ldi	r24, 0x05	; 5
    15ee:	84 b9       	out	0x04, r24	; 4
  adcmv[0] = W5msReadADC(PC0);		// voltage at Pin 1
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
    15f6:	8c 01       	movw	r16, r24
    15f8:	9a 83       	std	Y+2, r25	; 0x02
    15fa:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = ReadADC(PC1);		// voltage at Pin 2
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
    1602:	7c 01       	movw	r14, r24
    1604:	9c 83       	std	Y+4, r25	; 0x04
    1606:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = ReadADC(PC2);		// voltage at Pin 3
    1608:	82 e0       	ldi	r24, 0x02	; 2
    160a:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
    160e:	9c 01       	movw	r18, r24
    1610:	9e 83       	std	Y+6, r25	; 0x06
    1612:	8d 83       	std	Y+5, r24	; 0x05
  if (abs((int)(adcmv[1] - adcmv[0])) > 20) {
    1614:	e0 1a       	sub	r14, r16
    1616:	f1 0a       	sbc	r15, r17
    1618:	f7 fe       	sbrs	r15, 7
    161a:	04 c0       	rjmp	.+8      	; 0x1624 <AutoCheck+0x76>
    161c:	f0 94       	com	r15
    161e:	e1 94       	neg	r14
    1620:	f1 08       	sbc	r15, r1
    1622:	f3 94       	inc	r15
    1624:	85 e1       	ldi	r24, 0x15	; 21
    1626:	e8 16       	cp	r14, r24
    1628:	f1 04       	cpc	r15, r1
    162a:	0c f0       	brlt	.+2      	; 0x162e <AutoCheck+0x80>
    162c:	d2 c3       	rjmp	.+1956   	; 0x1dd2 <AutoCheck+0x824>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[2] - adcmv[0])) > 20) {
    162e:	20 1b       	sub	r18, r16
    1630:	31 0b       	sbc	r19, r17
    1632:	37 ff       	sbrs	r19, 7
    1634:	03 c0       	rjmp	.+6      	; 0x163c <AutoCheck+0x8e>
    1636:	30 95       	com	r19
    1638:	21 95       	neg	r18
    163a:	3f 4f       	sbci	r19, 0xFF	; 255
    163c:	25 31       	cpi	r18, 0x15	; 21
    163e:	31 05       	cpc	r19, r1
    1640:	0c f0       	brlt	.+2      	; 0x1644 <AutoCheck+0x96>
    1642:	c7 c3       	rjmp	.+1934   	; 0x1dd2 <AutoCheck+0x824>
     return;				//difference to big, no selftest
  }
  if (abs((int)((adcmv[0]*2) - ADCconfig.U_AVCC)) > 60) {
    1644:	00 0f       	add	r16, r16
    1646:	11 1f       	adc	r17, r17
    1648:	80 91 3d 01 	lds	r24, 0x013D
    164c:	90 91 3e 01 	lds	r25, 0x013E
    1650:	08 1b       	sub	r16, r24
    1652:	19 0b       	sbc	r17, r25
    1654:	17 ff       	sbrs	r17, 7
    1656:	03 c0       	rjmp	.+6      	; 0x165e <AutoCheck+0xb0>
    1658:	10 95       	com	r17
    165a:	01 95       	neg	r16
    165c:	1f 4f       	sbci	r17, 0xFF	; 255
    165e:	0d 33       	cpi	r16, 0x3D	; 61
    1660:	11 05       	cpc	r17, r1
    1662:	0c f0       	brlt	.+2      	; 0x1666 <AutoCheck+0xb8>
    1664:	b6 c3       	rjmp	.+1900   	; 0x1dd2 <AutoCheck+0x824>
     return;				//difference to big, no selftest
  }
  R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//Pin 3 over RL to - (Pin 1 over RL to +)
    1666:	81 e1       	ldi	r24, 0x11	; 17
    1668:	84 b9       	out	0x04, r24	; 4
  adcmv[0] = W5msReadADC(PC0);		// voltage at Pin 1
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
    1670:	8c 01       	movw	r16, r24
    1672:	9a 83       	std	Y+2, r25	; 0x02
    1674:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = ReadADC(PC1);		// voltage at Pin 2
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
    167c:	7c 01       	movw	r14, r24
    167e:	9c 83       	std	Y+4, r25	; 0x04
    1680:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = ReadADC(PC2);		// voltage at Pin 3
    1682:	82 e0       	ldi	r24, 0x02	; 2
    1684:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
    1688:	9c 01       	movw	r18, r24
    168a:	9e 83       	std	Y+6, r25	; 0x06
    168c:	8d 83       	std	Y+5, r24	; 0x05
  if (abs((int)(adcmv[1] - adcmv[0])) > 20) {
    168e:	e0 1a       	sub	r14, r16
    1690:	f1 0a       	sbc	r15, r17
    1692:	f7 fe       	sbrs	r15, 7
    1694:	04 c0       	rjmp	.+8      	; 0x169e <AutoCheck+0xf0>
    1696:	f0 94       	com	r15
    1698:	e1 94       	neg	r14
    169a:	f1 08       	sbc	r15, r1
    169c:	f3 94       	inc	r15
    169e:	e5 e1       	ldi	r30, 0x15	; 21
    16a0:	ee 16       	cp	r14, r30
    16a2:	f1 04       	cpc	r15, r1
    16a4:	0c f0       	brlt	.+2      	; 0x16a8 <AutoCheck+0xfa>
    16a6:	95 c3       	rjmp	.+1834   	; 0x1dd2 <AutoCheck+0x824>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[2] - adcmv[0])) > 20) {
    16a8:	20 1b       	sub	r18, r16
    16aa:	31 0b       	sbc	r19, r17
    16ac:	37 ff       	sbrs	r19, 7
    16ae:	03 c0       	rjmp	.+6      	; 0x16b6 <AutoCheck+0x108>
    16b0:	30 95       	com	r19
    16b2:	21 95       	neg	r18
    16b4:	3f 4f       	sbci	r19, 0xFF	; 255
    16b6:	25 31       	cpi	r18, 0x15	; 21
    16b8:	31 05       	cpc	r19, r1
    16ba:	0c f0       	brlt	.+2      	; 0x16be <AutoCheck+0x110>
    16bc:	8a c3       	rjmp	.+1812   	; 0x1dd2 <AutoCheck+0x824>
     return;				//difference to big, no selftest
  }
  if (abs((int)((adcmv[0]*2) - ADCconfig.U_AVCC)) > 60) {
    16be:	00 0f       	add	r16, r16
    16c0:	11 1f       	adc	r17, r17
    16c2:	80 91 3d 01 	lds	r24, 0x013D
    16c6:	90 91 3e 01 	lds	r25, 0x013E
    16ca:	08 1b       	sub	r16, r24
    16cc:	19 0b       	sbc	r17, r25
    16ce:	17 ff       	sbrs	r17, 7
    16d0:	03 c0       	rjmp	.+6      	; 0x16d8 <AutoCheck+0x12a>
    16d2:	10 95       	com	r17
    16d4:	01 95       	neg	r16
    16d6:	1f 4f       	sbci	r17, 0xFF	; 255
    16d8:	0d 33       	cpi	r16, 0x3D	; 61
    16da:	11 05       	cpc	r17, r1
    16dc:	0c f0       	brlt	.+2      	; 0x16e0 <AutoCheck+0x132>
    16de:	79 c3       	rjmp	.+1778   	; 0x1dd2 <AutoCheck+0x824>
     return;				//difference to big, no selftest
  }
  lcd_clear();
    16e0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_clear>
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
    16e4:	86 ec       	ldi	r24, 0xC6	; 198
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_pgm_string>
  wait_about1s();
    16ec:	88 ec       	ldi	r24, 0xC8	; 200
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>
    16f4:	66 24       	eor	r6, r6
    16f6:	77 24       	eor	r7, r7
 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    16f8:	11 e0       	ldi	r17, 0x01	; 1
           adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
           lcd_fix2_string(RH1H);	// "RH_Hi="
        }
        if (tt == 7) { // can we switch the ADC pins to VCC across the R_H resistor?
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_H_VAL*100));
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    16fa:	22 e0       	ldi	r18, 0x02	; 2
    16fc:	f2 2e       	mov	r15, r18
           R_DDR = (2<<(TP1*2)) | (1<<(TP1*2));	//RH1 to +, RL1 to -
           adcmv[0] = W20msReadADC(TP1);
           adcmv[0] -= u680;
           R_PORT = 2<<(TP2*2);		//RH2 to VCC
    16fe:	98 e0       	ldi	r25, 0x08	; 8
    1700:	e9 2e       	mov	r14, r25
           R_DDR = (2<<(TP2*2)) | (1<<(TP2*2));	//RH2 to +, RL2 to -
           adcmv[1] = W20msReadADC(TP2);
           adcmv[1] -= u680;
           R_PORT = 2<<(TP3*2);		//RH3 to VCC
    1702:	80 e2       	ldi	r24, 0x20	; 32
    1704:	a8 2e       	mov	r10, r24
           R_DDR = (2<<(TP3*2)) | (1<<(TP3*2));	//RH3 to +, RL3 to -
    1706:	00 e3       	ldi	r16, 0x30	; 48
    1708:	d0 2e       	mov	r13, r16
    170a:	6e c1       	rjmp	.+732    	; 0x19e8 <AutoCheck+0x43a>
  wait_about1s();
 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
        lcd_line2();			//Cursor to column 1, row 2
    170c:	80 ec       	ldi	r24, 0xC0	; 192
    170e:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
        lcd_clear_line();		// clear total line
    1712:	0e 94 9f 02 	call	0x53e	; 0x53e <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    1716:	80 e8       	ldi	r24, 0x80	; 128
    1718:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
        lcd_clear_line();		// clear total line
    171c:	0e 94 9f 02 	call	0x53e	; 0x53e <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    1720:	80 e8       	ldi	r24, 0x80	; 128
    1722:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
        lcd_data('T');			//output the Testmode "T"
    1726:	84 e5       	ldi	r24, 0x54	; 84
    1728:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
        lcd_string(utoa(tt, outval, 10));	//output Test number
    172c:	c3 01       	movw	r24, r6
    172e:	6c e0       	ldi	r22, 0x0C	; 12
    1730:	71 e0       	ldi	r23, 0x01	; 1
    1732:	4a e0       	ldi	r20, 0x0A	; 10
    1734:	50 e0       	ldi	r21, 0x00	; 0
    1736:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <utoa>
    173a:	0e 94 38 01 	call	0x270	; 0x270 <lcd_string>
        lcd_space();
    173e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_space>
                                        //############################################
        if (tt == 1) {   // output of reference voltage and factors for capacity measurement
    1742:	fc 2d       	mov	r31, r12
    1744:	f1 30       	cpi	r31, 0x01	; 1
    1746:	41 f5       	brne	.+80     	; 0x1798 <AutoCheck+0x1ea>
           Calibrate_UR();		// get Reference voltage, Pin resistance
    1748:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <Calibrate_UR>
           lcd_fix2_string(URefT);	//"URef="
    174c:	85 ee       	ldi	r24, 0xE5	; 229
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_pgm_string>
           DisplayValue(ref_mv,-3,'V',4);
    1754:	60 91 41 01 	lds	r22, 0x0141
    1758:	70 91 42 01 	lds	r23, 0x0142
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	4d ef       	ldi	r20, 0xFD	; 253
    1762:	26 e5       	ldi	r18, 0x56	; 86
    1764:	04 e0       	ldi	r16, 0x04	; 4
    1766:	0e 94 a7 02 	call	0x54e	; 0x54e <DisplayValue>
           lcd_line2();			//Cursor to column 1, row 2
    176a:	80 ec       	ldi	r24, 0xC0	; 192
    176c:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
           lcd_fix2_string(RHfakt);	//"RHf="
    1770:	8a ee       	ldi	r24, 0xEA	; 234
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_pgm_string>
           lcd_string(utoa(RHmultip, outval, 10));
    1778:	80 91 00 01 	lds	r24, 0x0100
    177c:	90 91 01 01 	lds	r25, 0x0101
    1780:	6c e0       	ldi	r22, 0x0C	; 12
    1782:	71 e0       	ldi	r23, 0x01	; 1
    1784:	4a e0       	ldi	r20, 0x0A	; 10
    1786:	50 e0       	ldi	r21, 0x00	; 0
    1788:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <utoa>
    178c:	0e 94 38 01 	call	0x270	; 0x270 <lcd_string>
           ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    1790:	8e eb       	ldi	r24, 0xBE	; 190
    1792:	80 93 39 01 	sts	0x0139, r24
    1796:	0b c1       	rjmp	.+534    	; 0x19ae <AutoCheck+0x400>
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
    1798:	2c 2d       	mov	r18, r12
    179a:	22 30       	cpi	r18, 0x02	; 2
    179c:	99 f5       	brne	.+102    	; 0x1804 <AutoCheck+0x256>
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    179e:	60 91 3d 01 	lds	r22, 0x013D
    17a2:	70 91 3e 01 	lds	r23, 0x013E
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	2e e4       	ldi	r18, 0x4E	; 78
    17ac:	3b e1       	ldi	r19, 0x1B	; 27
    17ae:	40 e0       	ldi	r20, 0x00	; 0
    17b0:	50 e0       	ldi	r21, 0x00	; 0
    17b2:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
    17b6:	a2 01       	movw	r20, r4
    17b8:	91 01       	movw	r18, r2
    17ba:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <__divmodsi4>
    17be:	89 01       	movw	r16, r18
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	85 b9       	out	0x05, r24	; 5
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
    17c4:	85 e0       	ldi	r24, 0x05	; 5
    17c6:	84 b9       	out	0x04, r24	; 4
           adcmv[0] = W20msReadADC(TP1);
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	0e 94 ce 1a 	call	0x359c	; 0x359c <W20msReadADC>
           adcmv[0] -= u680;
    17ce:	80 1b       	sub	r24, r16
    17d0:	91 0b       	sbc	r25, r17
    17d2:	9a 83       	std	Y+2, r25	; 0x02
    17d4:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//RL3 to -
    17d6:	e1 e1       	ldi	r30, 0x11	; 17
    17d8:	e4 b9       	out	0x04, r30	; 4
           adcmv[1] = W20msReadADC(TP1);
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	0e 94 ce 1a 	call	0x359c	; 0x359c <W20msReadADC>
           adcmv[1] -= u680;
    17e0:	80 1b       	sub	r24, r16
    17e2:	91 0b       	sbc	r25, r17
    17e4:	9c 83       	std	Y+4, r25	; 0x04
    17e6:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 1<<(TP2*2);		//RL2 to VCC
    17e8:	f4 e0       	ldi	r31, 0x04	; 4
    17ea:	f5 b9       	out	0x05, r31	; 5
           R_DDR = (1<<(TP2*2)) | (1<<(TP3*2));	//RL3 to -
    17ec:	24 e1       	ldi	r18, 0x14	; 20
    17ee:	24 b9       	out	0x04, r18	; 4
           adcmv[2] = W20msReadADC(TP2);
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	0e 94 ce 1a 	call	0x359c	; 0x359c <W20msReadADC>
           adcmv[2] -= u680;
    17f6:	80 1b       	sub	r24, r16
    17f8:	91 0b       	sbc	r25, r17
    17fa:	9e 83       	std	Y+6, r25	; 0x06
    17fc:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RLRL);	// "RLRL"
    17fe:	87 ef       	ldi	r24, 0xF7	; 247
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	74 c0       	rjmp	.+232    	; 0x18ec <AutoCheck+0x33e>
        }
                                        //############################################
        if (tt == 3) { // how equal are the RH resistors
    1804:	8c 2d       	mov	r24, r12
    1806:	83 30       	cpi	r24, 0x03	; 3
    1808:	31 f5       	brne	.+76     	; 0x1856 <AutoCheck+0x2a8>
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    180a:	f5 b8       	out	0x05, r15	; 5
           R_DDR = (2<<(TP1*2)) | (2<<(TP2*2));	//RH2 to -
    180c:	94 b8       	out	0x04, r9	; 4
           adcmv[0] = W20msReadADC(TP1);
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	0e 94 ce 1a 	call	0x359c	; 0x359c <W20msReadADC>
           adcmv[3] = ADCconfig.U_AVCC / 2;
    1814:	00 91 3d 01 	lds	r16, 0x013D
    1818:	10 91 3e 01 	lds	r17, 0x013E
    181c:	16 95       	lsr	r17
    181e:	07 95       	ror	r16
    1820:	18 87       	std	Y+8, r17	; 0x08
    1822:	0f 83       	std	Y+7, r16	; 0x07
           adcmv[0] -= adcmv[3];
    1824:	80 1b       	sub	r24, r16
    1826:	91 0b       	sbc	r25, r17
    1828:	9a 83       	std	Y+2, r25	; 0x02
    182a:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (2<<(TP1*2)) | (2<<(TP3*2));	//RH3 to -
    182c:	84 b8       	out	0x04, r8	; 4
           adcmv[1] = W20msReadADC(TP1);
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	0e 94 ce 1a 	call	0x359c	; 0x359c <W20msReadADC>
           adcmv[1] -= adcmv[3];
    1834:	80 1b       	sub	r24, r16
    1836:	91 0b       	sbc	r25, r17
    1838:	9c 83       	std	Y+4, r25	; 0x04
    183a:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 2<<(TP2*2);		//RL2 to VCC
    183c:	e5 b8       	out	0x05, r14	; 5
           R_DDR = (2<<(TP2*2)) | (2<<(TP3*2));	//RH3 to -
    183e:	e8 e2       	ldi	r30, 0x28	; 40
    1840:	e4 b9       	out	0x04, r30	; 4
           adcmv[2] = W20msReadADC(TP2);
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	0e 94 ce 1a 	call	0x359c	; 0x359c <W20msReadADC>
           adcmv[2] -= adcmv[3];
    1848:	80 1b       	sub	r24, r16
    184a:	91 0b       	sbc	r25, r17
    184c:	9e 83       	std	Y+6, r25	; 0x06
    184e:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RHRH);	// "RHRH"
    1850:	85 e0       	ldi	r24, 0x05	; 5
    1852:	91 e0       	ldi	r25, 0x01	; 1
    1854:	4b c0       	rjmp	.+150    	; 0x18ec <AutoCheck+0x33e>
        }
                                        //############################################
        if (tt == 4) { // Text release probes
    1856:	fc 2d       	mov	r31, r12
    1858:	f4 30       	cpi	r31, 0x04	; 4
    185a:	19 f4       	brne	.+6      	; 0x1862 <AutoCheck+0x2b4>
           lcd_fix2_string(RELPROBE);	// "Release Probes"
    185c:	86 ed       	ldi	r24, 0xD6	; 214
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	45 c0       	rjmp	.+138    	; 0x18ec <AutoCheck+0x33e>
        }
                                        //############################################
        if (tt == 5) { // can we switch the ADC pins to GND across R_H resistor?
    1862:	2c 2d       	mov	r18, r12
    1864:	25 30       	cpi	r18, 0x05	; 5
    1866:	b1 f4       	brne	.+44     	; 0x1894 <AutoCheck+0x2e6>
           R_PORT = 0;
    1868:	15 b8       	out	0x05, r1	; 5
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to GND
    186a:	f4 b8       	out	0x04, r15	; 4
           adcmv[0] = W20msReadADC(TP1);
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	0e 94 ce 1a 	call	0x359c	; 0x359c <W20msReadADC>
    1872:	9a 83       	std	Y+2, r25	; 0x02
    1874:	89 83       	std	Y+1, r24	; 0x01

           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to GND
    1876:	e4 b8       	out	0x04, r14	; 4
           adcmv[1] = W20msReadADC(TP2);
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	0e 94 ce 1a 	call	0x359c	; 0x359c <W20msReadADC>
    187e:	9c 83       	std	Y+4, r25	; 0x04
    1880:	8b 83       	std	Y+3, r24	; 0x03

           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1882:	a4 b8       	out	0x04, r10	; 4
           adcmv[2] = W20msReadADC(TP3);
    1884:	82 e0       	ldi	r24, 0x02	; 2
    1886:	0e 94 ce 1a 	call	0x359c	; 0x359c <W20msReadADC>
    188a:	9e 83       	std	Y+6, r25	; 0x06
    188c:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RH1L);	// "RH_Lo="
    188e:	8f ee       	ldi	r24, 0xEF	; 239
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	2c c0       	rjmp	.+88     	; 0x18ec <AutoCheck+0x33e>
        }
                                        //############################################
        if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
    1894:	8c 2d       	mov	r24, r12
    1896:	86 30       	cpi	r24, 0x06	; 6
    1898:	61 f5       	brne	.+88     	; 0x18f2 <AutoCheck+0x344>
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to VCC
    189a:	f4 b8       	out	0x04, r15	; 4
           R_PORT = 2<<(TP1*2);
    189c:	f5 b8       	out	0x05, r15	; 5
           adcmv[0] = W20msReadADC(TP1) - ADCconfig.U_AVCC;
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	0e 94 ce 1a 	call	0x359c	; 0x359c <W20msReadADC>
    18a4:	20 91 3d 01 	lds	r18, 0x013D
    18a8:	30 91 3e 01 	lds	r19, 0x013E
    18ac:	82 1b       	sub	r24, r18
    18ae:	93 0b       	sbc	r25, r19
    18b0:	9a 83       	std	Y+2, r25	; 0x02
    18b2:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to VCC
    18b4:	e4 b8       	out	0x04, r14	; 4
           R_PORT = 2<<(TP2*2);
    18b6:	e5 b8       	out	0x05, r14	; 5
           adcmv[1] = W20msReadADC(TP2) - ADCconfig.U_AVCC;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	0e 94 ce 1a 	call	0x359c	; 0x359c <W20msReadADC>
    18be:	20 91 3d 01 	lds	r18, 0x013D
    18c2:	30 91 3e 01 	lds	r19, 0x013E
    18c6:	82 1b       	sub	r24, r18
    18c8:	93 0b       	sbc	r25, r19
    18ca:	9c 83       	std	Y+4, r25	; 0x04
    18cc:	8b 83       	std	Y+3, r24	; 0x03
           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to VCC
    18ce:	a4 b8       	out	0x04, r10	; 4
           R_PORT = 2<<(TP3*2);
    18d0:	a5 b8       	out	0x05, r10	; 5
           adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
    18d2:	82 e0       	ldi	r24, 0x02	; 2
    18d4:	0e 94 ce 1a 	call	0x359c	; 0x359c <W20msReadADC>
    18d8:	20 91 3d 01 	lds	r18, 0x013D
    18dc:	30 91 3e 01 	lds	r19, 0x013E
    18e0:	82 1b       	sub	r24, r18
    18e2:	93 0b       	sbc	r25, r19
    18e4:	9e 83       	std	Y+6, r25	; 0x06
    18e6:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RH1H);	// "RH_Hi="
    18e8:	83 ef       	ldi	r24, 0xF3	; 243
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_pgm_string>
    18f0:	39 c0       	rjmp	.+114    	; 0x1964 <AutoCheck+0x3b6>
        }
        if (tt == 7) { // can we switch the ADC pins to VCC across the R_H resistor?
    18f2:	ec 2d       	mov	r30, r12
    18f4:	e7 30       	cpi	r30, 0x07	; 7
    18f6:	99 f5       	brne	.+102    	; 0x195e <AutoCheck+0x3b0>
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_H_VAL*100));
    18f8:	60 91 3d 01 	lds	r22, 0x013D
    18fc:	70 91 3e 01 	lds	r23, 0x013E
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	2e e4       	ldi	r18, 0x4E	; 78
    1906:	3b e1       	ldi	r19, 0x1B	; 27
    1908:	40 e0       	ldi	r20, 0x00	; 0
    190a:	50 e0       	ldi	r21, 0x00	; 0
    190c:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
    1910:	2e ea       	ldi	r18, 0xAE	; 174
    1912:	32 ed       	ldi	r19, 0xD2	; 210
    1914:	47 e4       	ldi	r20, 0x47	; 71
    1916:	50 e0       	ldi	r21, 0x00	; 0
    1918:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <__divmodsi4>
    191c:	89 01       	movw	r16, r18
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    191e:	f5 b8       	out	0x05, r15	; 5
           R_DDR = (2<<(TP1*2)) | (1<<(TP1*2));	//RH1 to +, RL1 to -
    1920:	f3 e0       	ldi	r31, 0x03	; 3
    1922:	f4 b9       	out	0x04, r31	; 4
           adcmv[0] = W20msReadADC(TP1);
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	0e 94 ce 1a 	call	0x359c	; 0x359c <W20msReadADC>
           adcmv[0] -= u680;
    192a:	80 1b       	sub	r24, r16
    192c:	91 0b       	sbc	r25, r17
    192e:	9a 83       	std	Y+2, r25	; 0x02
    1930:	89 83       	std	Y+1, r24	; 0x01
           R_PORT = 2<<(TP2*2);		//RH2 to VCC
    1932:	e5 b8       	out	0x05, r14	; 5
           R_DDR = (2<<(TP2*2)) | (1<<(TP2*2));	//RH2 to +, RL2 to -
    1934:	2c e0       	ldi	r18, 0x0C	; 12
    1936:	24 b9       	out	0x04, r18	; 4
           adcmv[1] = W20msReadADC(TP2);
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	0e 94 ce 1a 	call	0x359c	; 0x359c <W20msReadADC>
           adcmv[1] -= u680;
    193e:	80 1b       	sub	r24, r16
    1940:	91 0b       	sbc	r25, r17
    1942:	9c 83       	std	Y+4, r25	; 0x04
    1944:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 2<<(TP3*2);		//RH3 to VCC
    1946:	a5 b8       	out	0x05, r10	; 5
           R_DDR = (2<<(TP3*2)) | (1<<(TP3*2));	//RH3 to +, RL3 to -
    1948:	d4 b8       	out	0x04, r13	; 4
           adcmv[2] = W20msReadADC(TP3);
    194a:	82 e0       	ldi	r24, 0x02	; 2
    194c:	0e 94 ce 1a 	call	0x359c	; 0x359c <W20msReadADC>
           adcmv[2] -= u680;
    1950:	80 1b       	sub	r24, r16
    1952:	91 0b       	sbc	r25, r17
    1954:	9e 83       	std	Y+6, r25	; 0x06
    1956:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RHRL);	// "RH/RL"
    1958:	83 e1       	ldi	r24, 0x13	; 19
    195a:	91 e0       	ldi	r25, 0x01	; 1
    195c:	c7 cf       	rjmp	.-114    	; 0x18ec <AutoCheck+0x33e>
        }
                                        //############################################
        if (tt > 1) {	// output 3 voltages 
    195e:	8c 2d       	mov	r24, r12
    1960:	81 30       	cpi	r24, 0x01	; 1
    1962:	29 f1       	breq	.+74     	; 0x19ae <AutoCheck+0x400>
           lcd_line2();			//Cursor to column 1, row 2
    1964:	80 ec       	ldi	r24, 0xC0	; 192
    1966:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
           lcd_string(itoa(adcmv[0], outval, 10));	//output voltage 1
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	9a 81       	ldd	r25, Y+2	; 0x02
    196e:	6c e0       	ldi	r22, 0x0C	; 12
    1970:	71 e0       	ldi	r23, 0x01	; 1
    1972:	4a e0       	ldi	r20, 0x0A	; 10
    1974:	50 e0       	ldi	r21, 0x00	; 0
    1976:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <itoa>
    197a:	0e 94 38 01 	call	0x270	; 0x270 <lcd_string>
           lcd_space();
    197e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_space>
           lcd_string(itoa(adcmv[1], outval, 10));	//output voltage 2
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	9c 81       	ldd	r25, Y+4	; 0x04
    1986:	6c e0       	ldi	r22, 0x0C	; 12
    1988:	71 e0       	ldi	r23, 0x01	; 1
    198a:	4a e0       	ldi	r20, 0x0A	; 10
    198c:	50 e0       	ldi	r21, 0x00	; 0
    198e:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <itoa>
    1992:	0e 94 38 01 	call	0x270	; 0x270 <lcd_string>
           lcd_space();
    1996:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_space>
           lcd_string(itoa(adcmv[2], outval, 10));	//output voltage 3
    199a:	8d 81       	ldd	r24, Y+5	; 0x05
    199c:	9e 81       	ldd	r25, Y+6	; 0x06
    199e:	6c e0       	ldi	r22, 0x0C	; 12
    19a0:	71 e0       	ldi	r23, 0x01	; 1
    19a2:	4a e0       	ldi	r20, 0x0A	; 10
    19a4:	50 e0       	ldi	r21, 0x00	; 0
    19a6:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <itoa>
    19aa:	0e 94 38 01 	call	0x270	; 0x270 <lcd_string>
        }
        ADC_DDR =  TXD_MSK;		// all-Pins to Input
    19ae:	e7 b8       	out	0x07, r14	; 7
        ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
    19b0:	e8 b8       	out	0x08, r14	; 8
        R_DDR = 0;			// all R-Ports to Input
    19b2:	14 b8       	out	0x04, r1	; 4
        R_PORT = 0;
    19b4:	15 b8       	out	0x05, r1	; 5
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    19b6:	4f 9b       	sbis	0x09, 7	; 9
    19b8:	0f c0       	rjmp	.+30     	; 0x19d8 <AutoCheck+0x42a>
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
    19ba:	84 e6       	ldi	r24, 0x64	; 100
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    19c2:	4f 9b       	sbis	0x09, 7	; 9
    19c4:	09 c0       	rjmp	.+18     	; 0x19d8 <AutoCheck+0x42a>
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
    19c6:	84 e6       	ldi	r24, 0x64	; 100
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
  wait_about1s();
 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
    19ce:	b3 94       	inc	r11
    19d0:	eb 2d       	mov	r30, r11
    19d2:	e4 30       	cpi	r30, 0x04	; 4
    19d4:	09 f0       	breq	.+2      	; 0x19d8 <AutoCheck+0x42a>
    19d6:	9a ce       	rjmp	.-716    	; 0x170c <AutoCheck+0x15e>
    19d8:	1c 2d       	mov	r17, r12
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
     } //end for ww
     wait_about1s();
    19da:	88 ec       	ldi	r24, 0xC8	; 200
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>
  lcd_clear();
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
  wait_about1s();
 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    19e2:	1f 5f       	subi	r17, 0xFF	; 255
    19e4:	18 30       	cpi	r17, 0x08	; 8
    19e6:	81 f0       	breq	.+32     	; 0x1a08 <AutoCheck+0x45a>
void AutoCheck(void) {
    19e8:	bb 24       	eor	r11, r11
        lcd_line2();			//Cursor to column 1, row 2
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_data('T');			//output the Testmode "T"
    19ea:	08 94       	sec
    19ec:	61 1c       	adc	r6, r1
    19ee:	71 1c       	adc	r7, r1
           lcd_fix2_string(RLRL);	// "RLRL"
        }
                                        //############################################
        if (tt == 3) { // how equal are the RH resistors
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
           R_DDR = (2<<(TP1*2)) | (2<<(TP2*2));	//RH2 to -
    19f0:	aa e0       	ldi	r26, 0x0A	; 10
    19f2:	9a 2e       	mov	r9, r26
           adcmv[0] = W20msReadADC(TP1);
           adcmv[3] = ADCconfig.U_AVCC / 2;
           adcmv[0] -= adcmv[3];
           R_DDR = (2<<(TP1*2)) | (2<<(TP3*2));	//RH3 to -
    19f4:	f2 e2       	ldi	r31, 0x22	; 34
    19f6:	8f 2e       	mov	r8, r31
           lcd_string(utoa(RHmultip, outval, 10));
           ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    19f8:	ea eb       	ldi	r30, 0xBA	; 186
    19fa:	2e 2e       	mov	r2, r30
    19fc:	e6 e3       	ldi	r30, 0x36	; 54
    19fe:	3e 2e       	mov	r3, r30
    1a00:	41 2c       	mov	r4, r1
    1a02:	51 2c       	mov	r5, r1
    1a04:	c1 2e       	mov	r12, r17
    1a06:	82 ce       	rjmp	.-764    	; 0x170c <AutoCheck+0x15e>
        wait_about500ms();
     } //end for ww
     wait_about1s();
  } //end for tt

  lcd_clear();
    1a08:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_clear>
  lcd_fix_string(RIHI);	// "RiHi="
    1a0c:	80 e5       	ldi	r24, 0x50	; 80
    1a0e:	91 e0       	ldi	r25, 0x01	; 1
    1a10:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
  DisplayValue(RRpinPL,-1,LCD_CHAR_OMEGA,3);
    1a14:	60 91 3f 01 	lds	r22, 0x013F
    1a18:	70 91 40 01 	lds	r23, 0x0140
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	4f ef       	ldi	r20, 0xFF	; 255
    1a22:	24 ef       	ldi	r18, 0xF4	; 244
    1a24:	03 e0       	ldi	r16, 0x03	; 3
    1a26:	0e 94 a7 02 	call	0x54e	; 0x54e <DisplayValue>
  lcd_line2();
    1a2a:	80 ec       	ldi	r24, 0xC0	; 192
    1a2c:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
  lcd_fix_string(RILO);	// "RiLo="
    1a30:	87 e5       	ldi	r24, 0x57	; 87
    1a32:	91 e0       	ldi	r25, 0x01	; 1
    1a34:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
  DisplayValue(RRpinMI,-1,LCD_CHAR_OMEGA,3);
    1a38:	60 91 44 01 	lds	r22, 0x0144
    1a3c:	70 91 45 01 	lds	r23, 0x0145
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	4f ef       	ldi	r20, 0xFF	; 255
    1a46:	24 ef       	ldi	r18, 0xF4	; 244
    1a48:	0e 94 a7 02 	call	0x54e	; 0x54e <DisplayValue>
  wait_about2s();			//wait 2 seconds
    1a4c:	80 e9       	ldi	r24, 0x90	; 144
    1a4e:	91 e0       	ldi	r25, 0x01	; 1
    1a50:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>

  //measure Zero offset for Capacity measurement
  adcmv[3] = 0;
    1a54:	18 86       	std	Y+8, r1	; 0x08
    1a56:	1f 82       	std	Y+7, r1	; 0x07
  PartFound = PART_NONE;
    1a58:	10 92 07 01 	sts	0x0107, r1
  ReadCapacity(TP3, TP1);
    1a5c:	82 e0       	ldi	r24, 0x02	; 2
    1a5e:	60 e0       	ldi	r22, 0x00	; 0
    1a60:	0e 94 98 14 	call	0x2930	; 0x2930 <ReadCapacity>
  adcmv[5] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:3
    1a64:	00 91 67 01 	lds	r16, 0x0167
    1a68:	10 91 68 01 	lds	r17, 0x0168
    1a6c:	1c 87       	std	Y+12, r17	; 0x0c
    1a6e:	0b 87       	std	Y+11, r16	; 0x0b
  ReadCapacity(TP3, TP2);
    1a70:	82 e0       	ldi	r24, 0x02	; 2
    1a72:	61 e0       	ldi	r22, 0x01	; 1
    1a74:	0e 94 98 14 	call	0x2930	; 0x2930 <ReadCapacity>
  adcmv[6] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:3
    1a78:	e0 90 67 01 	lds	r14, 0x0167
    1a7c:	f0 90 68 01 	lds	r15, 0x0168
    1a80:	fe 86       	std	Y+14, r15	; 0x0e
    1a82:	ed 86       	std	Y+13, r14	; 0x0d
  ReadCapacity(TP2, TP1);
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	60 e0       	ldi	r22, 0x00	; 0
    1a88:	0e 94 98 14 	call	0x2930	; 0x2930 <ReadCapacity>
  adcmv[2] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:2
    1a8c:	c0 90 67 01 	lds	r12, 0x0167
    1a90:	d0 90 68 01 	lds	r13, 0x0168
    1a94:	de 82       	std	Y+6, r13	; 0x06
    1a96:	cd 82       	std	Y+5, r12	; 0x05
  ReadCapacity(TP1, TP3);
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	62 e0       	ldi	r22, 0x02	; 2
    1a9c:	0e 94 98 14 	call	0x2930	; 0x2930 <ReadCapacity>
  adcmv[1] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:1
    1aa0:	80 91 67 01 	lds	r24, 0x0167
    1aa4:	90 91 68 01 	lds	r25, 0x0168
    1aa8:	9c 83       	std	Y+4, r25	; 0x04
    1aaa:	8b 83       	std	Y+3, r24	; 0x03
  ReadCapacity(TP2, TP3);
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	62 e0       	ldi	r22, 0x02	; 2
    1ab0:	0e 94 98 14 	call	0x2930	; 0x2930 <ReadCapacity>
  adcmv[4] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:2
    1ab4:	80 91 67 01 	lds	r24, 0x0167
    1ab8:	90 91 68 01 	lds	r25, 0x0168
    1abc:	9a 87       	std	Y+10, r25	; 0x0a
    1abe:	89 87       	std	Y+9, r24	; 0x09
  ReadCapacity(TP1, TP2);
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	61 e0       	ldi	r22, 0x01	; 1
    1ac4:	0e 94 98 14 	call	0x2930	; 0x2930 <ReadCapacity>
  adcmv[0] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:1
    1ac8:	80 91 67 01 	lds	r24, 0x0167
    1acc:	90 91 68 01 	lds	r25, 0x0168
    1ad0:	9a 83       	std	Y+2, r25	; 0x02
    1ad2:	89 83       	std	Y+1, r24	; 0x01
  lcd_clear();
    1ad4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_clear>
  lcd_fix_string(C0_str);			//output "C0 "
    1ad8:	8e e5       	ldi	r24, 0x5E	; 94
    1ada:	91 e0       	ldi	r25, 0x01	; 1
    1adc:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
    1ae0:	b8 01       	movw	r22, r16
    1ae2:	88 27       	eor	r24, r24
    1ae4:	77 fd       	sbrc	r23, 7
    1ae6:	80 95       	com	r24
    1ae8:	98 2f       	mov	r25, r24
    1aea:	40 e0       	ldi	r20, 0x00	; 0
    1aec:	20 e2       	ldi	r18, 0x20	; 32
    1aee:	03 e0       	ldi	r16, 0x03	; 3
    1af0:	0e 94 a7 02 	call	0x54e	; 0x54e <DisplayValue>
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
    1af4:	b7 01       	movw	r22, r14
    1af6:	88 27       	eor	r24, r24
    1af8:	77 fd       	sbrc	r23, 7
    1afa:	80 95       	com	r24
    1afc:	98 2f       	mov	r25, r24
    1afe:	40 e0       	ldi	r20, 0x00	; 0
    1b00:	20 e2       	ldi	r18, 0x20	; 32
    1b02:	0e 94 a7 02 	call	0x54e	; 0x54e <DisplayValue>
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
    1b06:	b6 01       	movw	r22, r12
    1b08:	88 27       	eor	r24, r24
    1b0a:	77 fd       	sbrc	r23, 7
    1b0c:	80 95       	com	r24
    1b0e:	98 2f       	mov	r25, r24
    1b10:	44 ef       	ldi	r20, 0xF4	; 244
    1b12:	26 e4       	ldi	r18, 0x46	; 70
    1b14:	0e 94 a7 02 	call	0x54e	; 0x54e <DisplayValue>
    1b18:	8e 01       	movw	r16, r28
    1b1a:	0f 5f       	subi	r16, 0xFF	; 255
    1b1c:	1f 4f       	sbci	r17, 0xFF	; 255
void AutoCheck(void) {
    1b1e:	ce 01       	movw	r24, r28
    1b20:	0f 96       	adiw	r24, 0x0f	; 15
    1b22:	f8 01       	movw	r30, r16
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
    1b24:	21 91       	ld	r18, Z+
    1b26:	31 91       	ld	r19, Z+
    1b28:	27 34       	cpi	r18, 0x47	; 71
    1b2a:	31 05       	cpc	r19, r1
    1b2c:	ec f4       	brge	.+58     	; 0x1b68 <AutoCheck+0x5ba>
  lcd_fix_string(C0_str);			//output "C0 "
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
    1b2e:	e8 17       	cp	r30, r24
    1b30:	f9 07       	cpc	r31, r25
    1b32:	c1 f7       	brne	.-16     	; 0x1b24 <AutoCheck+0x576>
    1b34:	ee 24       	eor	r14, r14
    1b36:	ff 24       	eor	r15, r15
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
    1b38:	f8 01       	movw	r30, r16
    1b3a:	60 81       	ld	r22, Z
    1b3c:	0e 5f       	subi	r16, 0xFE	; 254
    1b3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b40:	61 5f       	subi	r22, 0xF1	; 241
    1b42:	c7 01       	movw	r24, r14
    1b44:	80 55       	subi	r24, 0x50	; 80
    1b46:	9e 4f       	sbci	r25, 0xFE	; 254
    1b48:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__eewr_byte_m168>
    1b4c:	08 94       	sec
    1b4e:	e1 1c       	adc	r14, r1
    1b50:	f1 1c       	adc	r15, r1
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
    1b52:	f7 e0       	ldi	r31, 0x07	; 7
    1b54:	ef 16       	cp	r14, r31
    1b56:	f1 04       	cpc	r15, r1
    1b58:	79 f7       	brne	.-34     	; 0x1b38 <AutoCheck+0x58a>
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
  }
  lcd_line2();
    1b5a:	80 ec       	ldi	r24, 0xC0	; 192
    1b5c:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
  lcd_fix_string(OK_str);		// output "OK"
    1b60:	86 ee       	ldi	r24, 0xE6	; 230
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
no_c0save:
 #endif
 wait_about2s();		//wait 2 seconds
    1b68:	80 e9       	ldi	r24, 0x90	; 144
    1b6a:	91 e0       	ldi	r25, 0x01	; 1
    1b6c:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>
    1b70:	70 e4       	ldi	r23, 0x40	; 64
    1b72:	c7 2e       	mov	r12, r23
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
    1b74:	10 e0       	ldi	r17, 0x00	; 0
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
    1b76:	6a e0       	ldi	r22, 0x0A	; 10
    1b78:	86 2e       	mov	r8, r22
    1b7a:	91 2c       	mov	r9, r1
    1b7c:	a1 2c       	mov	r10, r1
    1b7e:	b1 2c       	mov	r11, r1
     lcd_data('3');
     lcd_fix_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1b80:	5f e5       	ldi	r21, 0x5F	; 95
    1b82:	e5 2e       	mov	r14, r21
    1b84:	51 e0       	ldi	r21, 0x01	; 1
    1b86:	f5 2e       	mov	r15, r21
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
     lcd_clear();
    1b88:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_clear>
     lcd_data('1');
    1b8c:	81 e3       	ldi	r24, 0x31	; 49
    1b8e:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
     lcd_fix_string(CapZeich);	// "-||-"
    1b92:	88 e1       	ldi	r24, 0x18	; 24
    1b94:	91 e0       	ldi	r25, 0x01	; 1
    1b96:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
     lcd_data('3');
    1b9a:	83 e3       	ldi	r24, 0x33	; 51
    1b9c:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
     lcd_fix_string(MinCap_str); // " >100nF!"
    1ba0:	82 e6       	ldi	r24, 0x62	; 98
    1ba2:	91 e0       	ldi	r25, 0x01	; 1
    1ba4:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
     PartFound = PART_NONE;
    1ba8:	10 92 07 01 	sts	0x0107, r1
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
    1bac:	82 e0       	ldi	r24, 0x02	; 2
    1bae:	60 e0       	ldi	r22, 0x00	; 0
    1bb0:	0e 94 98 14 	call	0x2930	; 0x2930 <ReadCapacity>
    1bb4:	20 91 5f 01 	lds	r18, 0x015F
    1bb8:	30 91 60 01 	lds	r19, 0x0160
    1bbc:	40 91 61 01 	lds	r20, 0x0161
    1bc0:	50 91 62 01 	lds	r21, 0x0162
    1bc4:	00 91 6f 01 	lds	r16, 0x016F
     while (cap.cpre < -9) {
    1bc8:	07 c0       	rjmp	.+14     	; 0x1bd8 <AutoCheck+0x62a>
        cap.cpre++;
        cap.cval /= 10;
    1bca:	ca 01       	movw	r24, r20
    1bcc:	b9 01       	movw	r22, r18
    1bce:	a5 01       	movw	r20, r10
    1bd0:	94 01       	movw	r18, r8
    1bd2:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
    1bd6:	0f 5f       	subi	r16, 0xFF	; 255
     lcd_data('3');
     lcd_fix_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1bd8:	07 3f       	cpi	r16, 0xF7	; 247
    1bda:	bc f3       	brlt	.-18     	; 0x1bca <AutoCheck+0x61c>
    1bdc:	00 93 6f 01 	sts	0x016F, r16
    1be0:	20 93 5f 01 	sts	0x015F, r18
    1be4:	f7 01       	movw	r30, r14
    1be6:	31 83       	std	Z+1, r19	; 0x01
    1be8:	42 83       	std	Z+2, r20	; 0x02
    1bea:	53 83       	std	Z+3, r21	; 0x03
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1bec:	07 3f       	cpi	r16, 0xF7	; 247
    1bee:	09 f0       	breq	.+2      	; 0x1bf2 <AutoCheck+0x644>
    1bf0:	be c0       	rjmp	.+380    	; 0x1d6e <AutoCheck+0x7c0>
    1bf2:	20 36       	cpi	r18, 0x60	; 96
    1bf4:	31 05       	cpc	r19, r1
    1bf6:	41 05       	cpc	r20, r1
    1bf8:	51 05       	cpc	r21, r1
    1bfa:	08 f4       	brcc	.+2      	; 0x1bfe <AutoCheck+0x650>
    1bfc:	b8 c0       	rjmp	.+368    	; 0x1d6e <AutoCheck+0x7c0>
    1bfe:	20 3f       	cpi	r18, 0xF0	; 240
    1c00:	f5 e5       	ldi	r31, 0x55	; 85
    1c02:	3f 07       	cpc	r19, r31
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	4f 07       	cpc	r20, r31
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	5f 07       	cpc	r21, r31
    1c0c:	08 f0       	brcs	.+2      	; 0x1c10 <AutoCheck+0x662>
    1c0e:	af c0       	rjmp	.+350    	; 0x1d6e <AutoCheck+0x7c0>
        cap_found++;
    1c10:	1f 5f       	subi	r17, 0xFF	; 255
     } else {
        cap_found = 0;		// wait for stable connection
     }
     if (cap_found > 1) {
    1c12:	12 30       	cpi	r17, 0x02	; 2
    1c14:	09 f0       	breq	.+2      	; 0x1c18 <AutoCheck+0x66a>
    1c16:	ac c0       	rjmp	.+344    	; 0x1d70 <AutoCheck+0x7c2>
        // value of capacitor is correct
        (void) eeprom_write_word((uint16_t *)(&ref_offset), load_diff);	// hold zero offset + slew rate dependend offset
    1c18:	60 91 71 01 	lds	r22, 0x0171
    1c1c:	70 91 72 01 	lds	r23, 0x0172
    1c20:	8e ea       	ldi	r24, 0xAE	; 174
    1c22:	91 e0       	ldi	r25, 0x01	; 1
    1c24:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <__eewr_word_m168>
        lcd_clear();
    1c28:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_clear>
        lcd_fix_string(REF_C_str);	// "REF_C="
    1c2c:	8a e6       	ldi	r24, 0x6A	; 106
    1c2e:	91 e0       	ldi	r25, 0x01	; 1
    1c30:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
        lcd_string(itoa(load_diff, outval, 10));	//output REF_C_KORR
    1c34:	80 91 71 01 	lds	r24, 0x0171
    1c38:	90 91 72 01 	lds	r25, 0x0172
    1c3c:	6c e0       	ldi	r22, 0x0C	; 12
    1c3e:	71 e0       	ldi	r23, 0x01	; 1
    1c40:	4a e0       	ldi	r20, 0x0A	; 10
    1c42:	50 e0       	ldi	r21, 0x00	; 0
    1c44:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <itoa>
    1c48:	0e 94 38 01 	call	0x270	; 0x270 <lcd_string>
        eeprom_write_byte((uint8_t *)(&EE_ESR_ZERO), (uint8_t)ESR_ZERO); // set to initial zero offset
    1c4c:	87 eb       	ldi	r24, 0xB7	; 183
    1c4e:	91 e0       	ldi	r25, 0x01	; 1
    1c50:	6d e1       	ldi	r22, 0x1D	; 29
    1c52:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__eewr_byte_m168>
        wait_about1s();
        }
//#######################################
#endif
  #ifdef AUTOSCALE_ADC
        ADC_PORT =  TXD_VAL;	//ADC-Port 1 to GND
    1c56:	88 e0       	ldi	r24, 0x08	; 8
    1c58:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    1c5a:	89 e0       	ldi	r24, 0x09	; 9
    1c5c:	87 b9       	out	0x07, r24	; 7
        R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1c5e:	80 e2       	ldi	r24, 0x20	; 32
    1c60:	84 b9       	out	0x04, r24	; 4
        do {
           adcmv[0] = ReadADC(TP3);
    1c62:	82 e0       	ldi	r24, 0x02	; 2
    1c64:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
        } while (adcmv[0] > 980);
    1c68:	23 e0       	ldi	r18, 0x03	; 3
    1c6a:	85 3d       	cpi	r24, 0xD5	; 213
    1c6c:	92 07       	cpc	r25, r18
    1c6e:	cc f7       	brge	.-14     	; 0x1c62 <AutoCheck+0x6b4>
        R_DDR = 0;		//all Pins to input 
    1c70:	14 b8       	out	0x04, r1	; 4
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1c72:	10 92 3c 01 	sts	0x013C, r1
    1c76:	10 92 3b 01 	sts	0x013B, r1
        adcmv[0] = ReadADC(TP3);  // get cap voltage with VCC reference
    1c7a:	82 e0       	ldi	r24, 0x02	; 2
    1c7c:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
    1c80:	4c 01       	movw	r8, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1c82:	86 ea       	ldi	r24, 0xA6	; 166
    1c84:	91 e0       	ldi	r25, 0x01	; 1
    1c86:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__eerd_byte_m168>
    1c8a:	99 27       	eor	r25, r25
    1c8c:	87 fd       	sbrc	r24, 7
    1c8e:	90 95       	com	r25
    1c90:	20 91 41 01 	lds	r18, 0x0141
    1c94:	30 91 42 01 	lds	r19, 0x0142
    1c98:	82 0f       	add	r24, r18
    1c9a:	93 1f       	adc	r25, r19
    1c9c:	90 93 3c 01 	sts	0x013C, r25
    1ca0:	80 93 3b 01 	sts	0x013B, r24
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
    1ca4:	82 e0       	ldi	r24, 0x02	; 2
    1ca6:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
    1caa:	8c 01       	movw	r16, r24
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1cac:	10 92 3c 01 	sts	0x013C, r1
    1cb0:	10 92 3b 01 	sts	0x013B, r1
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
    1cb4:	82 e0       	ldi	r24, 0x02	; 2
    1cb6:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
    1cba:	5c 01       	movw	r10, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1cbc:	c0 90 41 01 	lds	r12, 0x0141
    1cc0:	d0 90 42 01 	lds	r13, 0x0142
    1cc4:	86 ea       	ldi	r24, 0xA6	; 166
    1cc6:	91 e0       	ldi	r25, 0x01	; 1
    1cc8:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__eerd_byte_m168>
    1ccc:	99 27       	eor	r25, r25
    1cce:	87 fd       	sbrc	r24, 7
    1cd0:	90 95       	com	r25
    1cd2:	8c 0d       	add	r24, r12
    1cd4:	9d 1d       	adc	r25, r13
    1cd6:	90 93 3c 01 	sts	0x013C, r25
    1cda:	80 93 3b 01 	sts	0x013B, r24
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1cde:	86 ea       	ldi	r24, 0xA6	; 166
    1ce0:	91 e0       	ldi	r25, 0x01	; 1
    1ce2:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__eerd_byte_m168>
    1ce6:	e8 2e       	mov	r14, r24
        lcd_line2();
    1ce8:	80 ec       	ldi	r24, 0xC0	; 192
    1cea:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
        lcd_fix_string(REF_R_str);	// "REF_R="
    1cee:	81 e7       	ldi	r24, 0x71	; 113
    1cf0:	91 e0       	ldi	r25, 0x01	; 1
    1cf2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1cf6:	86 ea       	ldi	r24, 0xA6	; 166
    1cf8:	91 e0       	ldi	r25, 0x01	; 1
    1cfa:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__eerd_byte_m168>
        ADCconfig.U_Bandgap = ADC_internal_reference;
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
        ADCconfig.U_Bandgap = ADC_internal_reference;
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1cfe:	43 e0       	ldi	r20, 0x03	; 3
    1d00:	f4 2e       	mov	r15, r20
    1d02:	f8 0e       	add	r15, r24
    1d04:	a8 0c       	add	r10, r8
    1d06:	b9 1c       	adc	r11, r9
    1d08:	a0 1a       	sub	r10, r16
    1d0a:	b1 0a       	sbc	r11, r17
    1d0c:	a0 1a       	sub	r10, r16
    1d0e:	b1 0a       	sbc	r11, r17
    1d10:	b5 01       	movw	r22, r10
    1d12:	88 27       	eor	r24, r24
    1d14:	77 fd       	sbrc	r23, 7
    1d16:	80 95       	com	r24
    1d18:	98 2f       	mov	r25, r24
    1d1a:	2e 2d       	mov	r18, r14
    1d1c:	33 27       	eor	r19, r19
    1d1e:	27 fd       	sbrc	r18, 7
    1d20:	30 95       	com	r19
    1d22:	2c 0d       	add	r18, r12
    1d24:	3d 1d       	adc	r19, r13
    1d26:	40 e0       	ldi	r20, 0x00	; 0
    1d28:	50 e0       	ldi	r21, 0x00	; 0
    1d2a:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
    1d2e:	00 0f       	add	r16, r16
    1d30:	11 1f       	adc	r17, r17
    1d32:	98 01       	movw	r18, r16
    1d34:	44 27       	eor	r20, r20
    1d36:	37 fd       	sbrc	r19, 7
    1d38:	40 95       	com	r20
    1d3a:	54 2f       	mov	r21, r20
    1d3c:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <__divmodsi4>
        lcd_line2();
        lcd_fix_string(REF_R_str);	// "REF_R="
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1d40:	f2 0e       	add	r15, r18
        (void) eeprom_write_byte((uint8_t *)(&RefDiff), (uint8_t)udiff2);	// hold offset for true reference Voltage
    1d42:	86 ea       	ldi	r24, 0xA6	; 166
    1d44:	91 e0       	ldi	r25, 0x01	; 1
    1d46:	6f 2d       	mov	r22, r15
    1d48:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__eewr_byte_m168>
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
    1d4c:	8f 2d       	mov	r24, r15
    1d4e:	99 27       	eor	r25, r25
    1d50:	87 fd       	sbrc	r24, 7
    1d52:	90 95       	com	r25
    1d54:	6c e0       	ldi	r22, 0x0C	; 12
    1d56:	71 e0       	ldi	r23, 0x01	; 1
    1d58:	4a e0       	ldi	r20, 0x0A	; 10
    1d5a:	50 e0       	ldi	r21, 0x00	; 0
    1d5c:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <itoa>
    1d60:	0e 94 38 01 	call	0x270	; 0x270 <lcd_string>
  #endif
        wait_about4s();
    1d64:	80 e2       	ldi	r24, 0x20	; 32
    1d66:	93 e0       	ldi	r25, 0x03	; 3
    1d68:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>
        break;
    1d6c:	19 c0       	rjmp	.+50     	; 0x1da0 <AutoCheck+0x7f2>
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1d6e:	10 e0       	ldi	r17, 0x00	; 0
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
  #endif
        wait_about4s();
        break;
     }
     lcd_line2();
    1d70:	80 ec       	ldi	r24, 0xC0	; 192
    1d72:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
     DisplayValue(cap.cval,cap.cpre,'F',4);
    1d76:	60 91 5f 01 	lds	r22, 0x015F
    1d7a:	70 91 60 01 	lds	r23, 0x0160
    1d7e:	80 91 61 01 	lds	r24, 0x0161
    1d82:	90 91 62 01 	lds	r25, 0x0162
    1d86:	40 91 6f 01 	lds	r20, 0x016F
    1d8a:	26 e4       	ldi	r18, 0x46	; 70
    1d8c:	04 e0       	ldi	r16, 0x04	; 4
    1d8e:	0e 94 a7 02 	call	0x54e	; 0x54e <DisplayValue>
     wait_about200ms();			// wait additional time
    1d92:	88 e2       	ldi	r24, 0x28	; 40
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>
    1d9a:	ca 94       	dec	r12
 wait_about2s();		//wait 2 seconds
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
    1d9c:	09 f0       	breq	.+2      	; 0x1da0 <AutoCheck+0x7f2>
    1d9e:	f4 ce       	rjmp	.-536    	; 0x1b88 <AutoCheck+0x5da>
     wait_about200ms();			// wait additional time
  } // end for ww
 #endif


  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    1da0:	89 e1       	ldi	r24, 0x19	; 25
    1da2:	80 93 39 01 	sts	0x0139, r24
  lcd_clear();
    1da6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_clear>
  lcd_line2();
    1daa:	80 ec       	ldi	r24, 0xC0	; 192
    1dac:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
  lcd_fix_string(VERSION_str);	//"Version ..."
    1db0:	82 e4       	ldi	r24, 0x42	; 66
    1db2:	91 e0       	ldi	r25, 0x01	; 1
    1db4:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
  lcd_line1();
    1db8:	80 e8       	ldi	r24, 0x80	; 128
    1dba:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
  lcd_fix_string(ATE);		//"Selftest End"
    1dbe:	87 ed       	ldi	r24, 0xD7	; 215
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
        // if key is pressed, don't repeat
        break;
     }
  }
 #endif
 PartFound = PART_NONE;
    1dc6:	10 92 07 01 	sts	0x0107, r1
 wait_about1s();			//wait 1 seconds
    1dca:	88 ec       	ldi	r24, 0xC8	; 200
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>
#endif
 } 
    1dd2:	2e 96       	adiw	r28, 0x0e	; 14
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	de bf       	out	0x3e, r29	; 62
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	cd bf       	out	0x3d, r28	; 61
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	1f 91       	pop	r17
    1de4:	0f 91       	pop	r16
    1de6:	ff 90       	pop	r15
    1de8:	ef 90       	pop	r14
    1dea:	df 90       	pop	r13
    1dec:	cf 90       	pop	r12
    1dee:	bf 90       	pop	r11
    1df0:	af 90       	pop	r10
    1df2:	9f 90       	pop	r9
    1df4:	8f 90       	pop	r8
    1df6:	7f 90       	pop	r7
    1df8:	6f 90       	pop	r6
    1dfa:	5f 90       	pop	r5
    1dfc:	4f 90       	pop	r4
    1dfe:	3f 90       	pop	r3
    1e00:	2f 90       	pop	r2
    1e02:	08 95       	ret

00001e04 <main>:
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
  EMPTY_INTERRUPT(ADC_vect);
#endif

//begin of transistortester program
int main(void) {
    1e04:	0f 93       	push	r16
    1e06:	1f 93       	push	r17
  //switch on
  ON_DDR = (1<<ON_PIN);			// switch to output
    1e08:	80 e4       	ldi	r24, 0x40	; 64
    1e0a:	8a b9       	out	0x0a, r24	; 10
#ifdef PULLUP_DISABLE
  ON_PORT = (1<<ON_PIN); 		// switch power on 
    1e0c:	8b b9       	out	0x0b, r24	; 11
#else
  ON_PORT = (1<<ON_PIN)|(1<<RST_PIN); 	// switch power on , enable internal Pullup for Start-Pin
#endif
  uint8_t tmp;
  //ADC-Init
  ADCSRA = (1<<ADEN) | AUTO_CLOCK_DIV;	//prescaler=8 or 64 (if 8Mhz clock)
    1e0e:	86 e8       	ldi	r24, 0x86	; 134
    1e10:	80 93 7a 00 	sts	0x007A, r24
// #define WDRF_HOME MCU_STATUS_REG
 #define WDRF_HOME MCUCSR
#else
 #define WDRF_HOME MCUSR
#endif
  tmp = (WDRF_HOME & (1<<WDRF));	// save Watch Dog Flag
    1e14:	14 b7       	in	r17, 0x34	; 52
  WDRF_HOME &= ~(1<<WDRF);	 	//reset Watch Dog flag
    1e16:	84 b7       	in	r24, 0x34	; 52
    1e18:	87 7f       	andi	r24, 0xF7	; 247
    1e1a:	84 bf       	out	0x34, r24	; 52
  wdt_disable();			// disable Watch Dog
    1e1c:	88 e1       	ldi	r24, 0x18	; 24
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	80 93 60 00 	sts	0x0060, r24
    1e26:	10 92 60 00 	sts	0x0060, r1
    1e2a:	0f be       	out	0x3f, r0	; 63
#ifndef INHIBIT_SLEEP_MODE
  // switch off unused Parts
  PRR = (1<<PRTWI) | (1<<PRTIM0) | (1<<PRSPI) | (1<<PRUSART0);
    1e2c:	86 ea       	ldi	r24, 0xA6	; 166
    1e2e:	80 93 64 00 	sts	0x0064, r24
  DIDR0 = (1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D);	
    1e32:	88 e3       	ldi	r24, 0x38	; 56
    1e34:	80 93 7e 00 	sts	0x007E, r24
  TCCR2A = (0<<WGM21) | (0<<WGM20);		// Counter 2 normal mode
    1e38:	10 92 b0 00 	sts	0x00B0, r1
 #if F_CPU == 4000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (0<<CS20);	//prescaler 256, 64us @ 2MHz
  #define T2_PERIOD 64
 #endif 
 #if F_CPU >= 8000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (1<<CS20);	//prescaler 1024, 128us @ 8MHz, 64us @ 16MHz
    1e3c:	87 e0       	ldi	r24, 0x07	; 7
    1e3e:	80 93 b1 00 	sts	0x00B1, r24
  #define T2_PERIOD (1024 / (F_CPU / 1000000UL));	/* set to 128 or 64 us */
 #endif 
  sei();				// enable interrupts
    1e42:	78 94       	sei
#endif
  lcd_init();				//initialize LCD
    1e44:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_init>
	
//  ADC_PORT = TXD_VAL;
//  ADC_DDR = TXD_MSK;
  if(tmp) { 
    1e48:	13 ff       	sbrs	r17, 3
    1e4a:	0a c0       	rjmp	.+20     	; 0x1e60 <main+0x5c>
     // check if  Watchdog-Event 
     // this happens, if the Watchdog is not reset for 2s
     // can happen, if any loop in the Program doen't finish.
     lcd_line1();
    1e4c:	80 e8       	ldi	r24, 0x80	; 128
    1e4e:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
     lcd_fix_string(TestTimedOut);	//Output Timeout
    1e52:	8e ec       	ldi	r24, 0xCE	; 206
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
     wait_about3s();				//wait for 3 s
    1e5a:	88 e5       	ldi	r24, 0x58	; 88
    1e5c:	92 e0       	ldi	r25, 0x02	; 2
    1e5e:	96 c0       	rjmp	.+300    	; 0x1f8c <main+0x188>
     ON_PORT = 0;			//shut off!
//     ON_DDR = (1<<ON_PIN);		//switch to GND
     return 0;
  }
  LCDLoadCustomChar(LCD_CHAR_DIODE1);	//Custom-Character Diode symbol
    1e60:	88 e4       	ldi	r24, 0x48	; 72
    1e62:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
  lcd_fix_customchar(DiodeIcon1);	//load Character  >|
    1e66:	88 e7       	ldi	r24, 0x78	; 120
    1e68:	91 e0       	ldi	r25, 0x01	; 1
    1e6a:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_DIODE2);	//Custom-Character 
    1e6e:	80 e5       	ldi	r24, 0x50	; 80
    1e70:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
  lcd_fix_customchar(DiodeIcon2);	//load Character  |<
    1e74:	80 e8       	ldi	r24, 0x80	; 128
    1e76:	91 e0       	ldi	r25, 0x01	; 1
    1e78:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_CAP);	//Custom-Character  Capacitor symbol
    1e7c:	88 e5       	ldi	r24, 0x58	; 88
    1e7e:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
  lcd_fix_customchar(CapIcon);		//load Character  ||
    1e82:	88 e8       	ldi	r24, 0x88	; 136
    1e84:	91 e0       	ldi	r25, 0x01	; 1
    1e86:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS1);	//Custom-Character Resistor symbol
    1e8a:	88 e7       	ldi	r24, 0x78	; 120
    1e8c:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
  lcd_fix_customchar(ResIcon1);		//load Character  [
    1e90:	80 e9       	ldi	r24, 0x90	; 144
    1e92:	91 e0       	ldi	r25, 0x01	; 1
    1e94:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS2);	//Custom-Character 
    1e98:	80 e7       	ldi	r24, 0x70	; 112
    1e9a:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
  lcd_fix_customchar(ResIcon2);		//load Character  ]
    1e9e:	88 e9       	ldi	r24, 0x98	; 152
    1ea0:	91 e0       	ldi	r25, 0x01	; 1
    1ea2:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_fix_customchar>
#endif
#ifdef PULLUP_DISABLE
 #ifdef __AVR_ATmega8__
  SFIOR = (1<<PUD);		// disable Pull-Up Resistors mega8
 #else
  MCUCR = (1<<PUD);		// disable Pull-Up Resistors mega168 family
    1ea6:	80 e1       	ldi	r24, 0x10	; 16
    1ea8:	85 bf       	out	0x35, r24	; 53
  }
#else
  #define display_time OFF_WAIT_TIME
#endif

  empty_count = 0;
    1eaa:	10 92 47 01 	sts	0x0147, r1
  mess_count = 0;
    1eae:	10 92 0b 01 	sts	0x010B, r1


//*****************************************************************
//Entry: if start key is pressed before shut down
start:
  PartFound = PART_NONE;	// no part found
    1eb2:	10 92 07 01 	sts	0x0107, r1
  NumOfDiodes = 0;		// Number of diodes = 0
    1eb6:	10 92 05 01 	sts	0x0105, r1
  PartReady = 0;
    1eba:	10 92 04 01 	sts	0x0104, r1
  PartMode = 0;
    1ebe:	10 92 06 01 	sts	0x0106, r1
  WithReference = 0;		// no precision reference voltage
    1ec2:	10 92 46 01 	sts	0x0146, r1
  lcd_clear();
    1ec6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_clear>
  ADC_DDR = TXD_MSK;		//activate Software-UART 
    1eca:	88 e0       	ldi	r24, 0x08	; 8
    1ecc:	87 b9       	out	0x07, r24	; 7
  ResistorsFound = 0;		// no resistors found
    1ece:	10 92 5b 01 	sts	0x015B, r1
  cap.ca = 0;
    1ed2:	10 92 6d 01 	sts	0x016D, r1
  cap.cb = 0;
    1ed6:	10 92 6e 01 	sts	0x016E, r1
#ifdef WITH_UART
  uart_newline();		// start of new measurement
    1eda:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <uart_newline>
#endif
  ADCconfig.RefFlag = 0;
    1ede:	10 92 3a 01 	sts	0x013A, r1
  Calibrate_UR();		// get Ref Voltages and Pin resistance
    1ee2:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <Calibrate_UR>
  lcd_line1();	//1. row 
    1ee6:	80 e8       	ldi	r24, 0x80	; 128
    1ee8:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
  
  ADCconfig.U_Bandgap = ADC_internal_reference;	// set internal reference voltage for ADC
    1eec:	86 ea       	ldi	r24, 0xA6	; 166
    1eee:	91 e0       	ldi	r25, 0x01	; 1
    1ef0:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__eerd_byte_m168>
    1ef4:	99 27       	eor	r25, r25
    1ef6:	87 fd       	sbrc	r24, 7
    1ef8:	90 95       	com	r25
    1efa:	20 91 41 01 	lds	r18, 0x0141
    1efe:	30 91 42 01 	lds	r19, 0x0142
    1f02:	82 0f       	add	r24, r18
    1f04:	93 1f       	adc	r25, r19
    1f06:	90 93 3c 01 	sts	0x013C, r25
    1f0a:	80 93 3b 01 	sts	0x013B, r24

#ifdef BAT_CHECK
  // Battery check is selected
  ReadADC(TPBAT);	//Dummy-Readout
    1f0e:	85 e0       	ldi	r24, 0x05	; 5
    1f10:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
  trans.uBE[0] = W5msReadADC(TPBAT); 	//with 5V reference
    1f14:	85 e0       	ldi	r24, 0x05	; 5
    1f16:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
    1f1a:	90 93 55 01 	sts	0x0155, r25
    1f1e:	80 93 54 01 	sts	0x0154, r24
  lcd_fix_string(Bat_str);		//output: "Bat. "
    1f22:	80 ee       	ldi	r24, 0xE0	; 224
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
 #ifdef BAT_OUT
  // display Battery voltage
  // The divisor to get the voltage in 0.01V units is ((10*33)/133) witch is about 2.4812
  // A good result can be get with multiply by 4 and divide by 10 (about 0.75%).
  cap.cval = (trans.uBE[0]*4)/10+((BAT_OUT+5)/10); // usually output only 2 digits
    1f2a:	80 91 54 01 	lds	r24, 0x0154
    1f2e:	90 91 55 01 	lds	r25, 0x0155
    1f32:	88 0f       	add	r24, r24
    1f34:	99 1f       	adc	r25, r25
    1f36:	88 0f       	add	r24, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	6a e0       	ldi	r22, 0x0A	; 10
    1f3c:	70 e0       	ldi	r23, 0x00	; 0
    1f3e:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <__udivmodhi4>
    1f42:	61 5f       	subi	r22, 0xF1	; 241
    1f44:	7f 4f       	sbci	r23, 0xFF	; 255
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	60 93 5f 01 	sts	0x015F, r22
    1f4e:	70 93 60 01 	sts	0x0160, r23
    1f52:	80 93 61 01 	sts	0x0161, r24
    1f56:	90 93 62 01 	sts	0x0162, r25
  DisplayValue(cap.cval,-2,'V',2);		// Display 2 Digits of this 10mV units
    1f5a:	4e ef       	ldi	r20, 0xFE	; 254
    1f5c:	26 e5       	ldi	r18, 0x56	; 86
    1f5e:	02 e0       	ldi	r16, 0x02	; 2
    1f60:	0e 94 a7 02 	call	0x54e	; 0x54e <DisplayValue>
  lcd_space();
    1f64:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_space>
  // less than 3.0 V only .2V difference to Warn-Level
  #define WARN_LEVEL (((unsigned long)(BAT_POOR*100+200)*(unsigned long)33)/133)
 #endif
 #define POOR_LEVEL (((unsigned long)(BAT_POOR*100)*(unsigned long)33)/133)
  // check the battery voltage
  if (trans.uBE[0] <  WARN_LEVEL) {
    1f68:	80 91 54 01 	lds	r24, 0x0154
    1f6c:	90 91 55 01 	lds	r25, 0x0155
    1f70:	26 e0       	ldi	r18, 0x06	; 6
    1f72:	8a 3f       	cpi	r24, 0xFA	; 250
    1f74:	92 07       	cpc	r25, r18
    1f76:	a8 f4       	brcc	.+42     	; 0x1fa2 <main+0x19e>
     //Vcc < 7,3V; show Warning 
     if(trans.uBE[0] < POOR_LEVEL) {	
    1f78:	26 e0       	ldi	r18, 0x06	; 6
    1f7a:	83 33       	cpi	r24, 0x33	; 51
    1f7c:	92 07       	cpc	r25, r18
    1f7e:	70 f4       	brcc	.+28     	; 0x1f9c <main+0x198>
        //Vcc <6,3V; no proper operation is possible
        lcd_fix_string(BatEmpty);	//Battery empty!
    1f80:	8c e7       	ldi	r24, 0x7C	; 124
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
        wait_about2s();
    1f88:	80 e9       	ldi	r24, 0x90	; 144
    1f8a:	91 e0       	ldi	r25, 0x01	; 1
    1f8c:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>
        PORTD = 0;			//switch power off
    1f90:	1b b8       	out	0x0b, r1	; 11
  }
#else
  goto start;	// POWER_OFF not selected, repeat measurement
#endif
  return 0;
}   // end main
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	1f 91       	pop	r17
    1f98:	0f 91       	pop	r16
    1f9a:	08 95       	ret
        lcd_fix_string(BatEmpty);	//Battery empty!
        wait_about2s();
        PORTD = 0;			//switch power off
        return 0;
     }
     lcd_fix_string(BatWeak);		//Battery weak
    1f9c:	87 e7       	ldi	r24, 0x77	; 119
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	02 c0       	rjmp	.+4      	; 0x1fa6 <main+0x1a2>
  } else { // Battery-voltage OK
     lcd_fix_string(OK_str); 		// "OK"
    1fa2:	86 ee       	ldi	r24, 0xE6	; 230
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
  }
#else
  lcd_fix_string(VERSION_str);		// if no Battery check, Version .. in row 1
#endif
#ifdef WDT_enabled
  wdt_enable(WDTO_2S);		//Watchdog on
    1faa:	2f e0       	ldi	r18, 0x0F	; 15
    1fac:	88 e1       	ldi	r24, 0x18	; 24
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	f8 94       	cli
    1fb4:	a8 95       	wdr
    1fb6:	80 93 60 00 	sts	0x0060, r24
    1fba:	0f be       	out	0x3f, r0	; 63
    1fbc:	20 93 60 00 	sts	0x0060, r18
#endif

//  wait_about1s();			// add more time for reading batterie voltage
  // begin tests
#ifdef AUTO_RH
  RefVoltage();			//compute RHmultip = f(reference voltage)
    1fc0:	0e 94 4f 02 	call	0x49e	; 0x49e <RefVoltage>
#endif
#if FLASHEND > 0x1fff
  if (WithReference) {
    1fc4:	80 91 46 01 	lds	r24, 0x0146
    1fc8:	88 23       	and	r24, r24
    1fca:	f1 f0       	breq	.+60     	; 0x2008 <main+0x204>
     /* 2.5V precision reference is checked OK */
     if ((mess_count == 0) && (empty_count == 0)) {
    1fcc:	80 91 0b 01 	lds	r24, 0x010B
    1fd0:	88 23       	and	r24, r24
    1fd2:	d1 f4       	brne	.+52     	; 0x2008 <main+0x204>
    1fd4:	80 91 47 01 	lds	r24, 0x0147
    1fd8:	88 23       	and	r24, r24
    1fda:	b1 f4       	brne	.+44     	; 0x2008 <main+0x204>
         /* display VCC= only first time */
         lcd_line2();
    1fdc:	80 ec       	ldi	r24, 0xC0	; 192
    1fde:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
         lcd_fix_string(VCC_str);		// VCC=
    1fe2:	82 e2       	ldi	r24, 0x22	; 34
    1fe4:	91 e0       	ldi	r25, 0x01	; 1
    1fe6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
         DisplayValue(ADCconfig.U_AVCC,-3,'V',3);	// Display 3 Digits of this mV units
    1fea:	60 91 3d 01 	lds	r22, 0x013D
    1fee:	70 91 3e 01 	lds	r23, 0x013E
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	4d ef       	ldi	r20, 0xFD	; 253
    1ff8:	26 e5       	ldi	r18, 0x56	; 86
    1ffa:	03 e0       	ldi	r16, 0x03	; 3
    1ffc:	0e 94 a7 02 	call	0x54e	; 0x54e <DisplayValue>
//         lcd_space();
//         DisplayValue(RRpinMI,-1,LCD_CHAR_OMEGA,4);
         wait_about1s();
    2000:	88 ec       	ldi	r24, 0xC8	; 200
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>
     DisplayValue(trans.uBE[1]*10,-3,'V',3);	// Display 3 Digits of this mV units
     wait_about300ms();
  }
#endif

  lcd_line2();			//LCD position row2, column 1
    2008:	80 ec       	ldi	r24, 0xC0	; 192
    200a:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
  lcd_fix_string(TestRunning);		//String: testing...
    200e:	8c e6       	ldi	r24, 0x6C	; 108
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
#ifndef DebugOut
  lcd_line2();			//LCD position row 2, column 1
    2016:	80 ec       	ldi	r24, 0xC0	; 192
    2018:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
#endif
  EntladePins();		// discharge all capacitors!
    201c:	0e 94 b4 01 	call	0x368	; 0x368 <EntladePins>
  if(PartFound == PART_CELL) {
    2020:	80 91 07 01 	lds	r24, 0x0107
    2024:	88 30       	cpi	r24, 0x08	; 8
    2026:	39 f4       	brne	.+14     	; 0x2036 <main+0x232>
    lcd_clear();
    2028:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_clear>
    lcd_fix_string(Cell_str);	// display "Cell!"
    202c:	8c e1       	ldi	r24, 0x1C	; 28
    202e:	91 e0       	ldi	r25, 0x01	; 1
    2030:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
    goto end2;
    2034:	78 c3       	rjmp	.+1776   	; 0x2726 <main+0x922>
  }

#ifdef CHECK_CALL
  AutoCheck();			//check, if selftest should be done
    2036:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <AutoCheck>
#endif
     
  // check all 6 combinations for the 3 pins 
//         High  Low  Tri
  CheckPins(TP1, TP2, TP3);
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	61 e0       	ldi	r22, 0x01	; 1
    203e:	42 e0       	ldi	r20, 0x02	; 2
    2040:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <CheckPins>
  CheckPins(TP2, TP1, TP3);
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	60 e0       	ldi	r22, 0x00	; 0
    2048:	42 e0       	ldi	r20, 0x02	; 2
    204a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <CheckPins>

  CheckPins(TP1, TP3, TP2);
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	62 e0       	ldi	r22, 0x02	; 2
    2052:	41 e0       	ldi	r20, 0x01	; 1
    2054:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <CheckPins>
  CheckPins(TP3, TP1, TP2);
    2058:	82 e0       	ldi	r24, 0x02	; 2
    205a:	60 e0       	ldi	r22, 0x00	; 0
    205c:	41 e0       	ldi	r20, 0x01	; 1
    205e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <CheckPins>

  CheckPins(TP2, TP3, TP1);
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	62 e0       	ldi	r22, 0x02	; 2
    2066:	40 e0       	ldi	r20, 0x00	; 0
    2068:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <CheckPins>
  CheckPins(TP3, TP2, TP1);
    206c:	82 e0       	ldi	r24, 0x02	; 2
    206e:	61 e0       	ldi	r22, 0x01	; 1
    2070:	40 e0       	ldi	r20, 0x00	; 0
    2072:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <CheckPins>
  
  //separate check if is is a capacitor
  if(((PartFound == PART_NONE) || (PartFound == PART_RESISTOR) || (PartFound == PART_DIODE)) ) {
    2076:	80 91 07 01 	lds	r24, 0x0107
    207a:	88 23       	and	r24, r24
    207c:	21 f0       	breq	.+8      	; 0x2086 <main+0x282>
    207e:	86 30       	cpi	r24, 0x06	; 6
    2080:	11 f0       	breq	.+4      	; 0x2086 <main+0x282>
    2082:	81 30       	cpi	r24, 0x01	; 1
    2084:	d9 f4       	brne	.+54     	; 0x20bc <main+0x2b8>
     EntladePins();		// discharge capacities
    2086:	0e 94 b4 01 	call	0x368	; 0x368 <EntladePins>
     //measurement of capacities in all 3 combinations
     cap.cval_max = 0;		// set max to zero
    208a:	10 92 63 01 	sts	0x0163, r1
    208e:	10 92 64 01 	sts	0x0164, r1
    2092:	10 92 65 01 	sts	0x0165, r1
    2096:	10 92 66 01 	sts	0x0166, r1
     cap.cpre_max = -12;	// set max to pF unit
    209a:	84 ef       	ldi	r24, 0xF4	; 244
    209c:	80 93 70 01 	sts	0x0170, r24
     ReadCapacity(TP3, TP1);
    20a0:	82 e0       	ldi	r24, 0x02	; 2
    20a2:	60 e0       	ldi	r22, 0x00	; 0
    20a4:	0e 94 98 14 	call	0x2930	; 0x2930 <ReadCapacity>
     ReadCapacity(TP3, TP2);
    20a8:	82 e0       	ldi	r24, 0x02	; 2
    20aa:	61 e0       	ldi	r22, 0x01	; 1
    20ac:	0e 94 98 14 	call	0x2930	; 0x2930 <ReadCapacity>
     ReadCapacity(TP2, TP1);
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	60 e0       	ldi	r22, 0x00	; 0
    20b4:	0e 94 98 14 	call	0x2930	; 0x2930 <ReadCapacity>

#if FLASHEND > 0x1fff
     ReadInductance();			// measure inductance
    20b8:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <ReadInductance>
#endif
  }
  //All checks are done, output result to display
  lcd_clear();
    20bc:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_clear>
  if(PartFound == PART_DIODE) {
    20c0:	80 91 07 01 	lds	r24, 0x0107
    20c4:	81 30       	cpi	r24, 0x01	; 1
    20c6:	09 f0       	breq	.+2      	; 0x20ca <main+0x2c6>
    20c8:	ff c0       	rjmp	.+510    	; 0x22c8 <main+0x4c4>
     if(NumOfDiodes == 1) {		//single Diode
    20ca:	90 91 05 01 	lds	r25, 0x0105
    20ce:	91 30       	cpi	r25, 0x01	; 1
    20d0:	49 f5       	brne	.+82     	; 0x2124 <main+0x320>
        lcd_fix_string(Diode);		//"Diode: "
    20d2:	81 e9       	ldi	r24, 0x91	; 145
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
        lcd_testpin(diodes[0].Anode);
    20da:	80 91 73 01 	lds	r24, 0x0173
    20de:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_testpin>
        lcd_fix_string(AnKat);		//"->|-"
    20e2:	80 e3       	ldi	r24, 0x30	; 48
    20e4:	91 e0       	ldi	r25, 0x01	; 1
    20e6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
        lcd_testpin(diodes[0].Cathode);
    20ea:	80 91 74 01 	lds	r24, 0x0174
    20ee:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_testpin>
        UfAusgabe(0x70);
    20f2:	80 e7       	ldi	r24, 0x70	; 112
    20f4:	0e 94 8f 03 	call	0x71e	; 0x71e <UfAusgabe>
        lcd_fix_string(GateCap_str);	//"C="
    20f8:	83 ef       	ldi	r24, 0xF3	; 243
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
        ReadCapacity(diodes[0].Cathode,diodes[0].Anode);	// Capacity opposite flow direction
    2100:	80 91 74 01 	lds	r24, 0x0174
    2104:	60 91 73 01 	lds	r22, 0x0173
    2108:	0e 94 98 14 	call	0x2930	; 0x2930 <ReadCapacity>
        DisplayValue(cap.cval,cap.cpre,'F',3);
    210c:	60 91 5f 01 	lds	r22, 0x015F
    2110:	70 91 60 01 	lds	r23, 0x0160
    2114:	80 91 61 01 	lds	r24, 0x0161
    2118:	90 91 62 01 	lds	r25, 0x0162
    211c:	40 91 6f 01 	lds	r20, 0x016F
    2120:	26 e4       	ldi	r18, 0x46	; 70
    2122:	82 c2       	rjmp	.+1284   	; 0x2628 <main+0x824>
        goto end;
     } else if(NumOfDiodes == 2) { // double diode
    2124:	92 30       	cpi	r25, 0x02	; 2
    2126:	09 f0       	breq	.+2      	; 0x212a <main+0x326>
    2128:	4c c0       	rjmp	.+152    	; 0x21c2 <main+0x3be>
        lcd_data('2');
    212a:	82 e3       	ldi	r24, 0x32	; 50
    212c:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
        lcd_fix_string(Dioden);		//"diodes "
    2130:	88 e3       	ldi	r24, 0x38	; 56
    2132:	91 e0       	ldi	r25, 0x01	; 1
    2134:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
        if(diodes[0].Anode == diodes[1].Anode) { //Common Anode
    2138:	90 91 73 01 	lds	r25, 0x0173
    213c:	20 91 77 01 	lds	r18, 0x0177
    2140:	92 17       	cp	r25, r18
    2142:	59 f4       	brne	.+22     	; 0x215a <main+0x356>
           lcd_testpin(diodes[0].Cathode);
    2144:	80 91 74 01 	lds	r24, 0x0174
    2148:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    214c:	84 e3       	ldi	r24, 0x34	; 52
    214e:	91 e0       	ldi	r25, 0x01	; 1
    2150:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    2154:	80 91 73 01 	lds	r24, 0x0173
    2158:	2b c0       	rjmp	.+86     	; 0x21b0 <main+0x3ac>
           lcd_fix_string(AnKat);	//"->|-"
           lcd_testpin(diodes[1].Cathode);
           UfAusgabe(0x01);
           goto end;
        } else if(diodes[0].Cathode == diodes[1].Cathode) { //Common Cathode
    215a:	30 91 74 01 	lds	r19, 0x0174
    215e:	80 91 78 01 	lds	r24, 0x0178
    2162:	38 17       	cp	r19, r24
    2164:	b9 f4       	brne	.+46     	; 0x2194 <main+0x390>
           lcd_testpin(diodes[0].Anode);
    2166:	89 2f       	mov	r24, r25
    2168:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    216c:	80 e3       	ldi	r24, 0x30	; 48
    216e:	91 e0       	ldi	r25, 0x01	; 1
    2170:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
	   lcd_testpin(diodes[0].Cathode);
    2174:	80 91 74 01 	lds	r24, 0x0174
    2178:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    217c:	84 e3       	ldi	r24, 0x34	; 52
    217e:	91 e0       	ldi	r25, 0x01	; 1
    2180:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
           lcd_testpin(diodes[1].Anode);
    2184:	80 91 77 01 	lds	r24, 0x0177
    2188:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_testpin>
           UfAusgabe(0x01);
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	0e 94 8f 03 	call	0x71e	; 0x71e <UfAusgabe>
           goto end;
    2192:	c2 c2       	rjmp	.+1412   	; 0x2718 <main+0x914>
          }
        else if ((diodes[0].Cathode == diodes[1].Anode) && (diodes[1].Cathode == diodes[0].Anode)) {
    2194:	32 17       	cp	r19, r18
    2196:	09 f0       	breq	.+2      	; 0x219a <main+0x396>
    2198:	8d c2       	rjmp	.+1306   	; 0x26b4 <main+0x8b0>
    219a:	89 17       	cp	r24, r25
    219c:	09 f0       	breq	.+2      	; 0x21a0 <main+0x39c>
    219e:	8a c2       	rjmp	.+1300   	; 0x26b4 <main+0x8b0>
           //Antiparallel
           lcd_testpin(diodes[0].Anode);
    21a0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    21a4:	80 e3       	ldi	r24, 0x30	; 48
    21a6:	91 e0       	ldi	r25, 0x01	; 1
    21a8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
           lcd_testpin(diodes[0].Cathode);
    21ac:	80 91 74 01 	lds	r24, 0x0174
    21b0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    21b4:	80 e3       	ldi	r24, 0x30	; 48
    21b6:	91 e0       	ldi	r25, 0x01	; 1
    21b8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
           lcd_testpin(diodes[1].Cathode);
    21bc:	80 91 78 01 	lds	r24, 0x0178
    21c0:	e3 cf       	rjmp	.-58     	; 0x2188 <main+0x384>
           UfAusgabe(0x01);
           goto end;
        }
     } else if(NumOfDiodes == 3) {
    21c2:	93 30       	cpi	r25, 0x03	; 3
    21c4:	09 f0       	breq	.+2      	; 0x21c8 <main+0x3c4>
    21c6:	76 c2       	rjmp	.+1260   	; 0x26b4 <main+0x8b0>
        //Serial of 2 Diodes; was detected as 3 Diodes 
        trans.b = 3;
    21c8:	90 93 58 01 	sts	0x0158, r25
        trans.c = 3;
    21cc:	90 93 59 01 	sts	0x0159, r25
        /* Check for any constallation of 2 serial diodes:
          Only once the pin No of anyone Cathode is identical of another anode.
          two diodes in series is additionally detected as third big diode.
        */
        if(diodes[0].Cathode == diodes[1].Anode)
    21d0:	50 91 74 01 	lds	r21, 0x0174
    21d4:	90 91 77 01 	lds	r25, 0x0177
    21d8:	59 17       	cp	r21, r25
    21da:	21 f4       	brne	.+8      	; 0x21e4 <main+0x3e0>
          {
           trans.b = 0;
    21dc:	10 92 58 01 	sts	0x0158, r1
           trans.c = 1;
    21e0:	80 93 59 01 	sts	0x0159, r24
          }
        if(diodes[0].Anode == diodes[1].Cathode)
    21e4:	40 91 73 01 	lds	r20, 0x0173
    21e8:	30 91 78 01 	lds	r19, 0x0178
    21ec:	43 17       	cp	r20, r19
    21ee:	29 f4       	brne	.+10     	; 0x21fa <main+0x3f6>
          {
           trans.b = 1;
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	80 93 58 01 	sts	0x0158, r24
           trans.c = 0;
    21f6:	10 92 59 01 	sts	0x0159, r1
          }
        if(diodes[0].Cathode == diodes[2].Anode)
    21fa:	20 91 7b 01 	lds	r18, 0x017B
    21fe:	52 17       	cp	r21, r18
    2200:	29 f4       	brne	.+10     	; 0x220c <main+0x408>
          {
           trans.b = 0;
    2202:	10 92 58 01 	sts	0x0158, r1
           trans.c = 2;
    2206:	82 e0       	ldi	r24, 0x02	; 2
    2208:	80 93 59 01 	sts	0x0159, r24
          }
        if(diodes[0].Anode == diodes[2].Cathode)
    220c:	80 91 7c 01 	lds	r24, 0x017C
    2210:	48 17       	cp	r20, r24
    2212:	29 f4       	brne	.+10     	; 0x221e <main+0x41a>
          {
           trans.b = 2;
    2214:	42 e0       	ldi	r20, 0x02	; 2
    2216:	40 93 58 01 	sts	0x0158, r20
           trans.c = 0;
    221a:	10 92 59 01 	sts	0x0159, r1
          }
        if(diodes[1].Cathode == diodes[2].Anode)
    221e:	32 17       	cp	r19, r18
    2220:	31 f4       	brne	.+12     	; 0x222e <main+0x42a>
          {
           trans.b = 1;
    2222:	21 e0       	ldi	r18, 0x01	; 1
    2224:	20 93 58 01 	sts	0x0158, r18
           trans.c = 2;
    2228:	22 e0       	ldi	r18, 0x02	; 2
    222a:	20 93 59 01 	sts	0x0159, r18
          }
        if(diodes[1].Anode == diodes[2].Cathode)
    222e:	98 17       	cp	r25, r24
    2230:	31 f4       	brne	.+12     	; 0x223e <main+0x43a>
          {
           trans.b = 2;
    2232:	82 e0       	ldi	r24, 0x02	; 2
    2234:	80 93 58 01 	sts	0x0158, r24
           trans.c = 1;
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	80 93 59 01 	sts	0x0159, r24
        lcd_testpin(diodes[2].Cathode);
        lcd_space();
        lcd_string(utoa(diodes[2].Voltage, outval, 10));
        lcd_line1();
#endif
        if((trans.b<3) && (trans.c<3)) {
    223e:	80 91 58 01 	lds	r24, 0x0158
    2242:	83 30       	cpi	r24, 0x03	; 3
    2244:	08 f0       	brcs	.+2      	; 0x2248 <main+0x444>
    2246:	36 c2       	rjmp	.+1132   	; 0x26b4 <main+0x8b0>
    2248:	80 91 59 01 	lds	r24, 0x0159
    224c:	83 30       	cpi	r24, 0x03	; 3
    224e:	08 f0       	brcs	.+2      	; 0x2252 <main+0x44e>
    2250:	31 c2       	rjmp	.+1122   	; 0x26b4 <main+0x8b0>
           lcd_data('3');
    2252:	83 e3       	ldi	r24, 0x33	; 51
    2254:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
           lcd_fix_string(Dioden);	//"Diodes "
    2258:	88 e3       	ldi	r24, 0x38	; 56
    225a:	91 e0       	ldi	r25, 0x01	; 1
    225c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Anode);
    2260:	e0 91 58 01 	lds	r30, 0x0158
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	ee 0f       	add	r30, r30
    2268:	ff 1f       	adc	r31, r31
    226a:	ee 0f       	add	r30, r30
    226c:	ff 1f       	adc	r31, r31
    226e:	ed 58       	subi	r30, 0x8D	; 141
    2270:	fe 4f       	sbci	r31, 0xFE	; 254
    2272:	80 81       	ld	r24, Z
    2274:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2278:	80 e3       	ldi	r24, 0x30	; 48
    227a:	91 e0       	ldi	r25, 0x01	; 1
    227c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Cathode);
    2280:	e0 91 58 01 	lds	r30, 0x0158
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	ee 0f       	add	r30, r30
    2288:	ff 1f       	adc	r31, r31
    228a:	ee 0f       	add	r30, r30
    228c:	ff 1f       	adc	r31, r31
    228e:	ed 58       	subi	r30, 0x8D	; 141
    2290:	fe 4f       	sbci	r31, 0xFE	; 254
    2292:	81 81       	ldd	r24, Z+1	; 0x01
    2294:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2298:	80 e3       	ldi	r24, 0x30	; 48
    229a:	91 e0       	ldi	r25, 0x01	; 1
    229c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
           lcd_testpin(diodes[trans.c].Cathode);
    22a0:	e0 91 59 01 	lds	r30, 0x0159
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	ee 0f       	add	r30, r30
    22a8:	ff 1f       	adc	r31, r31
    22aa:	ee 0f       	add	r30, r30
    22ac:	ff 1f       	adc	r31, r31
    22ae:	ed 58       	subi	r30, 0x8D	; 141
    22b0:	fe 4f       	sbci	r31, 0xFE	; 254
    22b2:	81 81       	ldd	r24, Z+1	; 0x01
    22b4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_testpin>
           UfAusgabe( (trans.b<<4)|trans.c);
    22b8:	80 91 58 01 	lds	r24, 0x0158
    22bc:	82 95       	swap	r24
    22be:	80 7f       	andi	r24, 0xF0	; 240
    22c0:	90 91 59 01 	lds	r25, 0x0159
    22c4:	89 2b       	or	r24, r25
    22c6:	63 cf       	rjmp	.-314    	; 0x218e <main+0x38a>
           goto end;
        }
     }
     // end (PartFound == PART_DIODE)
  } else if (PartFound == PART_TRANSISTOR) {
    22c8:	82 30       	cpi	r24, 0x02	; 2
    22ca:	09 f0       	breq	.+2      	; 0x22ce <main+0x4ca>
    22cc:	7d c0       	rjmp	.+250    	; 0x23c8 <main+0x5c4>
    if(PartReady != 0) {
    22ce:	80 91 04 01 	lds	r24, 0x0104
    22d2:	88 23       	and	r24, r24
    22d4:	71 f1       	breq	.+92     	; 0x2332 <main+0x52e>
       if((trans.hfe[0]>trans.hfe[1])) {
    22d6:	80 91 50 01 	lds	r24, 0x0150
    22da:	90 91 51 01 	lds	r25, 0x0151
    22de:	a0 91 52 01 	lds	r26, 0x0152
    22e2:	b0 91 53 01 	lds	r27, 0x0153
    22e6:	20 91 4c 01 	lds	r18, 0x014C
    22ea:	30 91 4d 01 	lds	r19, 0x014D
    22ee:	40 91 4e 01 	lds	r20, 0x014E
    22f2:	50 91 4f 01 	lds	r21, 0x014F
    22f6:	82 17       	cp	r24, r18
    22f8:	93 07       	cpc	r25, r19
    22fa:	a4 07       	cpc	r26, r20
    22fc:	b5 07       	cpc	r27, r21
    22fe:	48 f4       	brcc	.+18     	; 0x2312 <main+0x50e>
          //if the amplification factor was higher at first testr: swap C and E !
          tmp = trans.c;
    2300:	80 91 59 01 	lds	r24, 0x0159
          trans.c = trans.e;
    2304:	90 91 5a 01 	lds	r25, 0x015A
    2308:	90 93 59 01 	sts	0x0159, r25
          trans.e = tmp;
    230c:	80 93 5a 01 	sts	0x015A, r24
    2310:	10 c0       	rjmp	.+32     	; 0x2332 <main+0x52e>
       } else {
          trans.hfe[0] = trans.hfe[1];
    2312:	80 93 4c 01 	sts	0x014C, r24
    2316:	90 93 4d 01 	sts	0x014D, r25
    231a:	a0 93 4e 01 	sts	0x014E, r26
    231e:	b0 93 4f 01 	sts	0x014F, r27
          trans.uBE[0] = trans.uBE[1];
    2322:	80 91 56 01 	lds	r24, 0x0156
    2326:	90 91 57 01 	lds	r25, 0x0157
    232a:	90 93 55 01 	sts	0x0155, r25
    232e:	80 93 54 01 	sts	0x0154, r24
       }
    }

    if(PartMode == PART_MODE_NPN) {
    2332:	80 91 06 01 	lds	r24, 0x0106
    2336:	81 30       	cpi	r24, 0x01	; 1
    2338:	19 f4       	brne	.+6      	; 0x2340 <main+0x53c>
       lcd_fix_string(NPN_str);		//"NPN "
    233a:	89 ef       	ldi	r24, 0xF9	; 249
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	02 c0       	rjmp	.+4      	; 0x2344 <main+0x540>
    } else {
       lcd_fix_string(PNP_str);		//"PNP "
    2340:	8e ef       	ldi	r24, 0xFE	; 254
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
    }
    if( NumOfDiodes > 2) {	//Transistor with protection diode
    2348:	80 91 05 01 	lds	r24, 0x0105
    234c:	83 30       	cpi	r24, 0x03	; 3
    234e:	a0 f0       	brcs	.+40     	; 0x2378 <main+0x574>
       // Layout with EBC= style
       if(PartMode == PART_MODE_NPN)
 #endif
#else
       // Layout with 123= style
       if (((PartMode == PART_MODE_NPN) && (trans.c > trans.e)) || ((PartMode != PART_MODE_NPN) && (trans.c < trans.e)))
    2350:	20 91 06 01 	lds	r18, 0x0106
    2354:	90 91 59 01 	lds	r25, 0x0159
    2358:	80 91 5a 01 	lds	r24, 0x015A
    235c:	21 30       	cpi	r18, 0x01	; 1
    235e:	19 f4       	brne	.+6      	; 0x2366 <main+0x562>
    2360:	89 17       	cp	r24, r25
    2362:	18 f0       	brcs	.+6      	; 0x236a <main+0x566>
    2364:	05 c0       	rjmp	.+10     	; 0x2370 <main+0x56c>
    2366:	98 17       	cp	r25, r24
    2368:	18 f4       	brcc	.+6      	; 0x2370 <main+0x56c>
#endif
       {
          lcd_fix_string(AnKat);	//"->|-"
    236a:	80 e3       	ldi	r24, 0x30	; 48
    236c:	91 e0       	ldi	r25, 0x01	; 1
    236e:	02 c0       	rjmp	.+4      	; 0x2374 <main+0x570>
       } else {
          lcd_fix_string(KatAn);	//"-|<-"
    2370:	84 e3       	ldi	r24, 0x34	; 52
    2372:	91 e0       	ldi	r25, 0x01	; 1
    2374:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
       }
    }
    PinLayout('E','B','C'); 		//  EBC= or 123=...
    2378:	85 e4       	ldi	r24, 0x45	; 69
    237a:	62 e4       	ldi	r22, 0x42	; 66
    237c:	43 e4       	ldi	r20, 0x43	; 67
    237e:	0e 94 a4 0a 	call	0x1548	; 0x1548 <PinLayout>
    lcd_line2(); //2. row 
    2382:	80 ec       	ldi	r24, 0xC0	; 192
    2384:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
    lcd_fix_string(hfe_str);		//"B="  (hFE)
    2388:	86 ef       	ldi	r24, 0xF6	; 246
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
    DisplayValue(trans.hfe[0],0,0,3);
    2390:	60 91 4c 01 	lds	r22, 0x014C
    2394:	70 91 4d 01 	lds	r23, 0x014D
    2398:	80 91 4e 01 	lds	r24, 0x014E
    239c:	90 91 4f 01 	lds	r25, 0x014F
    23a0:	40 e0       	ldi	r20, 0x00	; 0
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	03 e0       	ldi	r16, 0x03	; 3
    23a6:	0e 94 a7 02 	call	0x54e	; 0x54e <DisplayValue>
    lcd_space();
    23aa:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_space>

    lcd_fix_string(Uf_str);		//"Uf="
    23ae:	89 e0       	ldi	r24, 0x09	; 9
    23b0:	91 e0       	ldi	r25, 0x01	; 1
    23b2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
    DisplayValue(trans.uBE[0],-3,'V',3);
    23b6:	60 91 54 01 	lds	r22, 0x0154
    23ba:	70 91 55 01 	lds	r23, 0x0155
    23be:	80 e0       	ldi	r24, 0x00	; 0
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	4d ef       	ldi	r20, 0xFD	; 253
    23c4:	26 e5       	ldi	r18, 0x56	; 86
    23c6:	31 c1       	rjmp	.+610    	; 0x262a <main+0x826>
    goto end;
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    23c8:	83 30       	cpi	r24, 0x03	; 3
    23ca:	09 f0       	breq	.+2      	; 0x23ce <main+0x5ca>
    23cc:	7f c0       	rjmp	.+254    	; 0x24cc <main+0x6c8>
    if(PartMode&1) {
    23ce:	80 91 06 01 	lds	r24, 0x0106
    23d2:	80 ff       	sbrs	r24, 0
    23d4:	02 c0       	rjmp	.+4      	; 0x23da <main+0x5d6>
       lcd_data('P');			//P-channel
    23d6:	80 e5       	ldi	r24, 0x50	; 80
    23d8:	01 c0       	rjmp	.+2      	; 0x23dc <main+0x5d8>
    } else {
       lcd_data('N');			//N-channel
    23da:	8e e4       	ldi	r24, 0x4E	; 78
    23dc:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
    }
    lcd_data('-');
    23e0:	8d e2       	ldi	r24, 0x2D	; 45
    23e2:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>

    tmp = PartMode/2;
    23e6:	80 91 06 01 	lds	r24, 0x0106
    23ea:	86 95       	lsr	r24
    if (tmp == (PART_MODE_N_D_MOS/2)) {
    23ec:	82 30       	cpi	r24, 0x02	; 2
    23ee:	11 f4       	brne	.+4      	; 0x23f4 <main+0x5f0>
       lcd_data('D');			// N-D
    23f0:	84 e4       	ldi	r24, 0x44	; 68
    23f2:	03 c0       	rjmp	.+6      	; 0x23fa <main+0x5f6>
    }
    if (tmp == (PART_MODE_N_E_MOS/2)) {
    23f4:	81 30       	cpi	r24, 0x01	; 1
    23f6:	21 f4       	brne	.+8      	; 0x2400 <main+0x5fc>
       lcd_data('E');			// N-E
    23f8:	85 e4       	ldi	r24, 0x45	; 69
    23fa:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
    23fe:	05 c0       	rjmp	.+10     	; 0x240a <main+0x606>
    }
    if (tmp == (PART_MODE_N_JFET/2)) {
    2400:	83 30       	cpi	r24, 0x03	; 3
    2402:	19 f4       	brne	.+6      	; 0x240a <main+0x606>
       lcd_fix_string(jfet_str);	//"JFET"
    2404:	8e ee       	ldi	r24, 0xEE	; 238
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	02 c0       	rjmp	.+4      	; 0x240e <main+0x60a>
    } else {
       lcd_fix_string(mosfet_str);	//"-MOS "
    240a:	89 ee       	ldi	r24, 0xE9	; 233
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
    }
    PinLayout('S','G','D'); 		//  SGD= or 123=...
    2412:	83 e5       	ldi	r24, 0x53	; 83
    2414:	67 e4       	ldi	r22, 0x47	; 71
    2416:	44 e4       	ldi	r20, 0x44	; 68
    2418:	0e 94 a4 0a 	call	0x1548	; 0x1548 <PinLayout>
    if((NumOfDiodes > 0) && (PartMode < PART_MODE_N_D_MOS)) {
    241c:	80 91 05 01 	lds	r24, 0x0105
    2420:	88 23       	and	r24, r24
    2422:	a1 f0       	breq	.+40     	; 0x244c <main+0x648>
    2424:	20 91 06 01 	lds	r18, 0x0106
    2428:	24 30       	cpi	r18, 0x04	; 4
    242a:	80 f4       	brcc	.+32     	; 0x244c <main+0x648>
    242c:	90 91 59 01 	lds	r25, 0x0159
    2430:	80 91 5a 01 	lds	r24, 0x015A
       // Layout with SGD= style
       if (PartMode&1) /* N or P MOS */
 #endif
#else
       // layout with 123= style
       if (((PartMode&1) && (trans.c < trans.e)) || ((!(PartMode&1)) && (trans.c > trans.e)))
    2434:	20 ff       	sbrs	r18, 0
    2436:	03 c0       	rjmp	.+6      	; 0x243e <main+0x63a>
    2438:	98 17       	cp	r25, r24
    243a:	18 f0       	brcs	.+6      	; 0x2442 <main+0x63e>
    243c:	04 c0       	rjmp	.+8      	; 0x2446 <main+0x642>
    243e:	89 17       	cp	r24, r25
    2440:	10 f4       	brcc	.+4      	; 0x2446 <main+0x642>
#endif
       {
          lcd_data(LCD_CHAR_DIODE1);	//show Diode symbol >|
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	01 c0       	rjmp	.+2      	; 0x2448 <main+0x644>
       } else {
          lcd_data(LCD_CHAR_DIODE2);	//show Diode symbol |<
    2446:	82 e0       	ldi	r24, 0x02	; 2
    2448:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
       }
    }
    lcd_line2();			//2. Row
    244c:	80 ec       	ldi	r24, 0xC0	; 192
    244e:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
    if(PartMode < PART_MODE_N_D_MOS) {	//enhancement-MOSFET
    2452:	80 91 06 01 	lds	r24, 0x0106
    2456:	84 30       	cpi	r24, 0x04	; 4
    2458:	d8 f4       	brcc	.+54     	; 0x2490 <main+0x68c>
	//Gate capacity
       lcd_fix_string(GateCap_str);		//"C="
    245a:	83 ef       	ldi	r24, 0xF3	; 243
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
       ReadCapacity(trans.b,trans.e);	//measure capacity
    2462:	80 91 58 01 	lds	r24, 0x0158
    2466:	60 91 5a 01 	lds	r22, 0x015A
    246a:	0e 94 98 14 	call	0x2930	; 0x2930 <ReadCapacity>
       DisplayValue(cap.cval,cap.cpre,'F',3);
    246e:	60 91 5f 01 	lds	r22, 0x015F
    2472:	70 91 60 01 	lds	r23, 0x0160
    2476:	80 91 61 01 	lds	r24, 0x0161
    247a:	90 91 62 01 	lds	r25, 0x0162
    247e:	40 91 6f 01 	lds	r20, 0x016F
    2482:	26 e4       	ldi	r18, 0x46	; 70
    2484:	03 e0       	ldi	r16, 0x03	; 3
    2486:	0e 94 a7 02 	call	0x54e	; 0x54e <DisplayValue>
       lcd_fix_string(vt_str);		// "Vt="
    248a:	8d e0       	ldi	r24, 0x0D	; 13
    248c:	91 e0       	ldi	r25, 0x01	; 1
    248e:	13 c0       	rjmp	.+38     	; 0x24b6 <main+0x6b2>
    } else {
       lcd_data('I');
    2490:	89 e4       	ldi	r24, 0x49	; 73
    2492:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
       lcd_data('=');
    2496:	8d e3       	ldi	r24, 0x3D	; 61
    2498:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
       DisplayValue(trans.uBE[1],-5,'A',2);
    249c:	60 91 56 01 	lds	r22, 0x0156
    24a0:	70 91 57 01 	lds	r23, 0x0157
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	4b ef       	ldi	r20, 0xFB	; 251
    24aa:	21 e4       	ldi	r18, 0x41	; 65
    24ac:	02 e0       	ldi	r16, 0x02	; 2
    24ae:	0e 94 a7 02 	call	0x54e	; 0x54e <DisplayValue>
       lcd_fix_string(Vgs_str);		// " Vgs="
    24b2:	82 e1       	ldi	r24, 0x12	; 18
    24b4:	91 e0       	ldi	r25, 0x01	; 1
    24b6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
    }
    //Gate-threshold voltage
    DisplayValue(gthvoltage,-3,'V',3);
    24ba:	60 91 5c 01 	lds	r22, 0x015C
    24be:	70 91 5d 01 	lds	r23, 0x015D
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	4d ef       	ldi	r20, 0xFD	; 253
    24c8:	26 e5       	ldi	r18, 0x56	; 86
    24ca:	ae c0       	rjmp	.+348    	; 0x2628 <main+0x824>
    goto end;
    // end (PartFound == PART_FET)
  } else if (PartFound == PART_THYRISTOR) {
    24cc:	85 30       	cpi	r24, 0x05	; 5
    24ce:	19 f4       	brne	.+6      	; 0x24d6 <main+0x6d2>
    lcd_fix_string(Thyristor);		//"Thyristor"
    24d0:	8f e9       	ldi	r24, 0x9F	; 159
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	04 c0       	rjmp	.+8      	; 0x24de <main+0x6da>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    24d6:	84 30       	cpi	r24, 0x04	; 4
    24d8:	69 f4       	brne	.+26     	; 0x24f4 <main+0x6f0>
    lcd_fix_string(Triac);		//"Triac"
    24da:	89 e9       	ldi	r24, 0x99	; 153
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
  mess_count = 0;
  goto end2;


gakAusgabe:
  lcd_line2(); //2. row 
    24e2:	80 ec       	ldi	r24, 0xC0	; 192
    24e4:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
  PinLayout(Cathode_char,'G','A'); 	// CGA= or 123=...
    24e8:	83 e4       	ldi	r24, 0x43	; 67
    24ea:	67 e4       	ldi	r22, 0x47	; 71
    24ec:	41 e4       	ldi	r20, 0x41	; 65
    24ee:	0e 94 a4 0a 	call	0x1548	; 0x1548 <PinLayout>
    24f2:	12 c1       	rjmp	.+548    	; 0x2718 <main+0x914>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    lcd_fix_string(Triac);		//"Triac"
    goto gakAusgabe;
  }
  else if(PartFound == PART_RESISTOR) {
    24f4:	86 30       	cpi	r24, 0x06	; 6
    24f6:	09 f0       	breq	.+2      	; 0x24fa <main+0x6f6>
    24f8:	bb c0       	rjmp	.+374    	; 0x2670 <main+0x86c>
    if (ResistorsFound == 1) { // single resistor
    24fa:	60 91 5b 01 	lds	r22, 0x015B
    24fe:	61 30       	cpi	r22, 0x01	; 1
    2500:	69 f4       	brne	.+26     	; 0x251c <main+0x718>
       lcd_testpin(resis[0].rb);  	//Pin-number 1
    2502:	80 91 21 01 	lds	r24, 0x0121
    2506:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_testpin>
       lcd_fix_string(Resistor_str);
    250a:	8d e3       	ldi	r24, 0x3D	; 61
    250c:	91 e0       	ldi	r25, 0x01	; 1
    250e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
       lcd_testpin(resis[0].ra);		//Pin-number 2
    2512:	80 91 20 01 	lds	r24, 0x0120
    2516:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_testpin>
    251a:	61 c0       	rjmp	.+194    	; 0x25de <main+0x7da>
    } else { // R-Max suchen
       ii = 0;
    251c:	10 92 48 01 	sts	0x0148, r1
       if (resis[1].rx > resis[0].rx)
    2520:	20 91 23 01 	lds	r18, 0x0123
    2524:	30 91 24 01 	lds	r19, 0x0124
    2528:	40 91 25 01 	lds	r20, 0x0125
    252c:	50 91 26 01 	lds	r21, 0x0126
    2530:	80 91 18 01 	lds	r24, 0x0118
    2534:	90 91 19 01 	lds	r25, 0x0119
    2538:	a0 91 1a 01 	lds	r26, 0x011A
    253c:	b0 91 1b 01 	lds	r27, 0x011B
    2540:	82 17       	cp	r24, r18
    2542:	93 07       	cpc	r25, r19
    2544:	a4 07       	cpc	r26, r20
    2546:	b5 07       	cpc	r27, r21
    2548:	18 f4       	brcc	.+6      	; 0x2550 <main+0x74c>
          ii = 1;
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	80 93 48 01 	sts	0x0148, r24
       if (ResistorsFound == 2) {
    2550:	62 30       	cpi	r22, 0x02	; 2
    2552:	19 f4       	brne	.+6      	; 0x255a <main+0x756>
          ii = 2;
    2554:	60 93 48 01 	sts	0x0148, r22
    2558:	22 c0       	rjmp	.+68     	; 0x259e <main+0x79a>
       } else {
          if (resis[2].rx > resis[ii].rx) {
    255a:	20 91 48 01 	lds	r18, 0x0148
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	8b e0       	ldi	r24, 0x0B	; 11
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	28 9f       	mul	r18, r24
    2566:	f0 01       	movw	r30, r0
    2568:	29 9f       	mul	r18, r25
    256a:	f0 0d       	add	r31, r0
    256c:	38 9f       	mul	r19, r24
    256e:	f0 0d       	add	r31, r0
    2570:	11 24       	eor	r1, r1
    2572:	e8 5e       	subi	r30, 0xE8	; 232
    2574:	fe 4f       	sbci	r31, 0xFE	; 254
    2576:	20 91 2e 01 	lds	r18, 0x012E
    257a:	30 91 2f 01 	lds	r19, 0x012F
    257e:	40 91 30 01 	lds	r20, 0x0130
    2582:	50 91 31 01 	lds	r21, 0x0131
    2586:	80 81       	ld	r24, Z
    2588:	91 81       	ldd	r25, Z+1	; 0x01
    258a:	a2 81       	ldd	r26, Z+2	; 0x02
    258c:	b3 81       	ldd	r27, Z+3	; 0x03
    258e:	82 17       	cp	r24, r18
    2590:	93 07       	cpc	r25, r19
    2592:	a4 07       	cpc	r26, r20
    2594:	b5 07       	cpc	r27, r21
    2596:	18 f4       	brcc	.+6      	; 0x259e <main+0x79a>
             ii = 2;
    2598:	82 e0       	ldi	r24, 0x02	; 2
    259a:	80 93 48 01 	sts	0x0148, r24
       }
       char x = '1';
       char y = '3';
       char z = '2';
   
       if (ii == 1) {
    259e:	80 91 48 01 	lds	r24, 0x0148
    25a2:	81 30       	cpi	r24, 0x01	; 1
    25a4:	29 f0       	breq	.+10     	; 0x25b0 <main+0x7ac>
          // x = '1';
          y = '2';
          z = '3';
       }
       if (ii == 2) {
    25a6:	82 30       	cpi	r24, 0x02	; 2
    25a8:	39 f0       	breq	.+14     	; 0x25b8 <main+0x7b4>
             ii = 2;
          }
       }
       char x = '1';
       char y = '3';
       char z = '2';
    25aa:	12 e3       	ldi	r17, 0x32	; 50
          if (resis[2].rx > resis[ii].rx) {
             ii = 2;
          }
       }
       char x = '1';
       char y = '3';
    25ac:	03 e3       	ldi	r16, 0x33	; 51
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <main+0x7b0>
       char z = '2';
   
       if (ii == 1) {
          // x = '1';
          y = '2';
          z = '3';
    25b0:	13 e3       	ldi	r17, 0x33	; 51
       char y = '3';
       char z = '2';
   
       if (ii == 1) {
          // x = '1';
          y = '2';
    25b2:	02 e3       	ldi	r16, 0x32	; 50
       } else {
          if (resis[2].rx > resis[ii].rx) {
             ii = 2;
          }
       }
       char x = '1';
    25b4:	81 e3       	ldi	r24, 0x31	; 49
    25b6:	03 c0       	rjmp	.+6      	; 0x25be <main+0x7ba>
          z = '3';
       }
       if (ii == 2) {
          x = '2';
          y = '1';
          z = '3';
    25b8:	13 e3       	ldi	r17, 0x33	; 51
          y = '2';
          z = '3';
       }
       if (ii == 2) {
          x = '2';
          y = '1';
    25ba:	01 e3       	ldi	r16, 0x31	; 49
          // x = '1';
          y = '2';
          z = '3';
       }
       if (ii == 2) {
          x = '2';
    25bc:	82 e3       	ldi	r24, 0x32	; 50
          y = '1';
          z = '3';
       }
       lcd_data(x);
    25be:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
       lcd_fix_string(Resistor_str);    // -[=]-
    25c2:	8d e3       	ldi	r24, 0x3D	; 61
    25c4:	91 e0       	ldi	r25, 0x01	; 1
    25c6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
       lcd_data(y);
    25ca:	80 2f       	mov	r24, r16
    25cc:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
       lcd_fix_string(Resistor_str);    // -[=]-
    25d0:	8d e3       	ldi	r24, 0x3D	; 61
    25d2:	91 e0       	ldi	r25, 0x01	; 1
    25d4:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
       lcd_data(z);
    25d8:	81 2f       	mov	r24, r17
    25da:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
    }
    lcd_line2(); //2. row 
    25de:	80 ec       	ldi	r24, 0xC0	; 192
    25e0:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
    if (ResistorsFound == 1) {
    25e4:	80 91 5b 01 	lds	r24, 0x015B
    25e8:	81 30       	cpi	r24, 0x01	; 1
    25ea:	11 f5       	brne	.+68     	; 0x2630 <main+0x82c>
       RvalOut(0);
    25ec:	80 e0       	ldi	r24, 0x00	; 0
    25ee:	0e 94 5d 03 	call	0x6ba	; 0x6ba <RvalOut>
#if FLASHEND > 0x1fff
       if (resis[0].lx != 0) {
    25f2:	80 91 1c 01 	lds	r24, 0x011C
    25f6:	90 91 1d 01 	lds	r25, 0x011D
    25fa:	a0 91 1e 01 	lds	r26, 0x011E
    25fe:	b0 91 1f 01 	lds	r27, 0x011F
    2602:	00 97       	sbiw	r24, 0x00	; 0
    2604:	a1 05       	cpc	r26, r1
    2606:	b1 05       	cpc	r27, r1
    2608:	09 f4       	brne	.+2      	; 0x260c <main+0x808>
    260a:	86 c0       	rjmp	.+268    	; 0x2718 <main+0x914>
	  // resistor have also Inductance
          lcd_fix_string(Lis_str);	// "L="
    260c:	8d e2       	ldi	r24, 0x2D	; 45
    260e:	91 e0       	ldi	r25, 0x01	; 1
    2610:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
          DisplayValue(resis[0].lx,-5,'H',3);	// output inductance
    2614:	60 91 1c 01 	lds	r22, 0x011C
    2618:	70 91 1d 01 	lds	r23, 0x011D
    261c:	80 91 1e 01 	lds	r24, 0x011E
    2620:	90 91 1f 01 	lds	r25, 0x011F
    2624:	4b ef       	ldi	r20, 0xFB	; 251
    2626:	28 e4       	ldi	r18, 0x48	; 72
    2628:	03 e0       	ldi	r16, 0x03	; 3
    262a:	0e 94 a7 02 	call	0x54e	; 0x54e <DisplayValue>
    262e:	74 c0       	rjmp	.+232    	; 0x2718 <main+0x914>
       }
#endif
    } else {
       // output resistor values in right order
       if (ii == 0) {
    2630:	80 91 48 01 	lds	r24, 0x0148
    2634:	88 23       	and	r24, r24
    2636:	31 f4       	brne	.+12     	; 0x2644 <main+0x840>
          RvalOut(1);
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <RvalOut>
          RvalOut(2);
    263e:	82 e0       	ldi	r24, 0x02	; 2
    2640:	0e 94 5d 03 	call	0x6ba	; 0x6ba <RvalOut>
       }
       if (ii == 1) {
    2644:	80 91 48 01 	lds	r24, 0x0148
    2648:	81 30       	cpi	r24, 0x01	; 1
    264a:	31 f4       	brne	.+12     	; 0x2658 <main+0x854>
          RvalOut(0);
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	0e 94 5d 03 	call	0x6ba	; 0x6ba <RvalOut>
          RvalOut(2);
    2652:	82 e0       	ldi	r24, 0x02	; 2
    2654:	0e 94 5d 03 	call	0x6ba	; 0x6ba <RvalOut>
       }
       if (ii == 2) {
    2658:	80 91 48 01 	lds	r24, 0x0148
    265c:	82 30       	cpi	r24, 0x02	; 2
    265e:	09 f0       	breq	.+2      	; 0x2662 <main+0x85e>
    2660:	5b c0       	rjmp	.+182    	; 0x2718 <main+0x914>
          RvalOut(0);
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	0e 94 5d 03 	call	0x6ba	; 0x6ba <RvalOut>
          RvalOut(1);
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <RvalOut>
    266e:	54 c0       	rjmp	.+168    	; 0x2718 <main+0x914>
    goto end;

  } // end (PartFound == PART_RESISTOR)

//capacity measurement is wanted
  else if(PartFound == PART_CAPACITOR) {
    2670:	87 30       	cpi	r24, 0x07	; 7
    2672:	01 f5       	brne	.+64     	; 0x26b4 <main+0x8b0>
//     lcd_fix_string(Capacitor);
     lcd_testpin(cap.ca);		//Pin number 1
    2674:	80 91 6d 01 	lds	r24, 0x016D
    2678:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_testpin>
     lcd_fix_string(CapZeich);		// capacitor sign
    267c:	88 e1       	ldi	r24, 0x18	; 24
    267e:	91 e0       	ldi	r25, 0x01	; 1
    2680:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
//#if FLASHEND > 0x1fff
//     lcd_fix_string(Resistor_str);	// -[=]-
//#endif
     lcd_testpin(cap.cb);		//Pin number 2
    2684:	80 91 6e 01 	lds	r24, 0x016E
    2688:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_testpin>
     lcd_line2(); 			//2. row 
    268c:	80 ec       	ldi	r24, 0xC0	; 192
    268e:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
     DisplayValue(cap.cval_max,cap.cpre_max,'F',4);
    2692:	60 91 63 01 	lds	r22, 0x0163
    2696:	70 91 64 01 	lds	r23, 0x0164
    269a:	80 91 65 01 	lds	r24, 0x0165
    269e:	90 91 66 01 	lds	r25, 0x0166
    26a2:	40 91 70 01 	lds	r20, 0x0170
    26a6:	26 e4       	ldi	r18, 0x46	; 70
    26a8:	04 e0       	ldi	r16, 0x04	; 4
    26aa:	0e 94 a7 02 	call	0x54e	; 0x54e <DisplayValue>
#if FLASHEND > 0x1fff
     GetESR();				// get ESR of capacitor
    26ae:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <GetESR>
#endif
     goto end;
    26b2:	32 c0       	rjmp	.+100    	; 0x2718 <main+0x914>
  }
  if(NumOfDiodes == 0) { //no diodes are found
    26b4:	80 91 05 01 	lds	r24, 0x0105
    26b8:	88 23       	and	r24, r24
    26ba:	71 f4       	brne	.+28     	; 0x26d8 <main+0x8d4>
     lcd_fix_string(TestFailed1); 	//"Kein,unbek. oder"
    26bc:	82 eb       	ldi	r24, 0xB2	; 178
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
     lcd_line2(); //2. row 
    26c4:	80 ec       	ldi	r24, 0xC0	; 192
    26c6:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
     lcd_fix_string(TestFailed2); 	//"defektes "
    26ca:	83 e8       	ldi	r24, 0x83	; 131
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
     lcd_fix_string(Bauteil);		//"Bauteil"
    26d2:	8c e8       	ldi	r24, 0x8C	; 140
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	16 c0       	rjmp	.+44     	; 0x2704 <main+0x900>
  } else {
     lcd_fix_string(Bauteil);		//"Bauteil"
    26d8:	8c e8       	ldi	r24, 0x8C	; 140
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
     lcd_fix_string(Unknown); 		//" unbek."
    26e0:	89 ea       	ldi	r24, 0xA9	; 169
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
     lcd_line2(); //2. row 
    26e8:	80 ec       	ldi	r24, 0xC0	; 192
    26ea:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_command>
     lcd_fix_string(OrBroken); 		//"oder defekt "
    26ee:	82 ec       	ldi	r24, 0xC2	; 194
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
     lcd_data(NumOfDiodes + '0');
    26f6:	80 91 05 01 	lds	r24, 0x0105
    26fa:	80 5d       	subi	r24, 0xD0	; 208
    26fc:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
     lcd_fix_string(AnKat);		//"->|-"
    2700:	80 e3       	ldi	r24, 0x30	; 48
    2702:	91 e0       	ldi	r25, 0x01	; 1
    2704:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
  }
  empty_count++;
    2708:	80 91 47 01 	lds	r24, 0x0147
    270c:	8f 5f       	subi	r24, 0xFF	; 255
    270e:	80 93 47 01 	sts	0x0147, r24
  mess_count = 0;
    2712:	10 92 0b 01 	sts	0x010B, r1
  goto end2;
    2716:	07 c0       	rjmp	.+14     	; 0x2726 <main+0x922>
gakAusgabe:
  lcd_line2(); //2. row 
  PinLayout(Cathode_char,'G','A'); 	// CGA= or 123=...
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 end:
  empty_count = 0;		// reset counter, if part is found
    2718:	10 92 47 01 	sts	0x0147, r1
  mess_count++;			// count measurements
    271c:	80 91 0b 01 	lds	r24, 0x010B
    2720:	8f 5f       	subi	r24, 0xFF	; 255
    2722:	80 93 0b 01 	sts	0x010B, r24

 end2:
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND, release relay
    2726:	88 e1       	ldi	r24, 0x18	; 24
    2728:	87 b9       	out	0x07, r24	; 7
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
    272a:	4f 9b       	sbis	0x09, 7	; 9
    272c:	fe cf       	rjmp	.-4      	; 0x272a <main+0x926>
  wait_about200ms();
    272e:	88 e2       	ldi	r24, 0x28	; 40
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>
// wait 14 seconds or 5 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage+=10) {
    2736:	10 92 5d 01 	sts	0x015D, r1
    273a:	10 92 5c 01 	sts	0x015C, r1
    273e:	10 c0       	rjmp	.+32     	; 0x2760 <main+0x95c>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    2740:	4f 9b       	sbis	0x09, 7	; 9
    2742:	b7 cb       	rjmp	.-2194   	; 0x1eb2 <main+0xae>
        // If the key is pressed again... 
        // goto start of measurement 
        goto start;
     }
     wdt_reset();
    2744:	a8 95       	wdr
     wait_about10ms();
    2746:	82 e0       	ldi	r24, 0x02	; 2
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>
 end2:
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND, release relay
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
  wait_about200ms();
// wait 14 seconds or 5 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage+=10) {
    274e:	80 91 5c 01 	lds	r24, 0x015C
    2752:	90 91 5d 01 	lds	r25, 0x015D
    2756:	0a 96       	adiw	r24, 0x0a	; 10
    2758:	90 93 5d 01 	sts	0x015D, r25
    275c:	80 93 5c 01 	sts	0x015C, r24
    2760:	80 91 5c 01 	lds	r24, 0x015C
    2764:	90 91 5d 01 	lds	r25, 0x015D
    2768:	26 e3       	ldi	r18, 0x36	; 54
    276a:	80 3b       	cpi	r24, 0xB0	; 176
    276c:	92 07       	cpc	r25, r18
    276e:	40 f3       	brcs	.-48     	; 0x2740 <main+0x93c>
     goto start;			// repeat measurement POWER_OFF times
  }
 #endif
  // only one Measurement requested, shut off
//  MCUSR = 0;
  ON_PORT &= ~(1<<ON_PIN);		//switch off power
    2770:	5e 98       	cbi	0x0b, 6	; 11
  //never ending loop 
  while(1) {
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    2772:	4f 9b       	sbis	0x09, 7	; 9
    2774:	9e cb       	rjmp	.-2244   	; 0x1eb2 <main+0xae>
        // The statement is only reached if no auto off equipment is installed
        goto start;
     }
     wdt_reset();
    2776:	a8 95       	wdr
     wait_about10ms();
    2778:	82 e0       	ldi	r24, 0x02	; 2
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>
  }
    2780:	f8 cf       	rjmp	.-16     	; 0x2772 <main+0x96e>

00002782 <uart_putc>:
    2782:	2f 93       	push	r18
    2784:	5f b7       	in	r21, 0x3f	; 63
    2786:	2f 93       	push	r18
    2788:	2a e0       	ldi	r18, 0x0A	; 10
    278a:	80 95       	com	r24
    278c:	08 94       	sec

0000278e <putchar0>:
    278e:	10 f4       	brcc	.+4      	; 0x2794 <putchar1>
    2790:	43 98       	cbi	0x08, 3	; 8
    2792:	02 c0       	rjmp	.+4      	; 0x2798 <putchar2>

00002794 <putchar1>:
    2794:	43 9a       	sbi	0x08, 3	; 8
	...

00002798 <putchar2>:
    2798:	08 d0       	rcall	.+16     	; 0x27aa <UART_delay>
    279a:	07 d0       	rcall	.+14     	; 0x27aa <UART_delay>
    279c:	86 95       	lsr	r24
    279e:	2a 95       	dec	r18
    27a0:	b1 f7       	brne	.-20     	; 0x278e <putchar0>
    27a2:	2f 91       	pop	r18
    27a4:	5f bf       	out	0x3f, r21	; 63
    27a6:	2f 91       	pop	r18
    27a8:	08 95       	ret

000027aa <UART_delay>:
    27aa:	5f 93       	push	r21
    27ac:	5f b7       	in	r21, 0x3f	; 63
    27ae:	5f 93       	push	r21
    27b0:	00 00       	nop
    27b2:	5e e3       	ldi	r21, 0x3E	; 62

000027b4 <UART_delay1>:
    27b4:	5a 95       	dec	r21
    27b6:	f1 f7       	brne	.-4      	; 0x27b4 <UART_delay1>
    27b8:	00 00       	nop
    27ba:	5f 91       	pop	r21
    27bc:	5f bf       	out	0x3f, r21	; 63
    27be:	5f 91       	pop	r21
    27c0:	08 95       	ret

000027c2 <wait5s>:
    27c2:	03 d0       	rcall	.+6      	; 0x27ca <wait1000ms>

000027c4 <wait4s>:
    27c4:	02 d0       	rcall	.+4      	; 0x27ca <wait1000ms>

000027c6 <wait3s>:
    27c6:	01 d0       	rcall	.+2      	; 0x27ca <wait1000ms>

000027c8 <wait2s>:
    27c8:	00 d0       	rcall	.+0      	; 0x27ca <wait1000ms>

000027ca <wait1000ms>:
    27ca:	00 d0       	rcall	.+0      	; 0x27cc <wait500ms>

000027cc <wait500ms>:
    27cc:	03 d0       	rcall	.+6      	; 0x27d4 <wait100ms>

000027ce <wait400ms>:
    27ce:	02 d0       	rcall	.+4      	; 0x27d4 <wait100ms>

000027d0 <wait300ms>:
    27d0:	01 d0       	rcall	.+2      	; 0x27d4 <wait100ms>

000027d2 <wait200ms>:
    27d2:	00 d0       	rcall	.+0      	; 0x27d4 <wait100ms>

000027d4 <wait100ms>:
    27d4:	a8 95       	wdr
    27d6:	00 d0       	rcall	.+0      	; 0x27d8 <wait50ms>

000027d8 <wait50ms>:
    27d8:	03 d0       	rcall	.+6      	; 0x27e0 <wait10ms>

000027da <wait40ms>:
    27da:	02 d0       	rcall	.+4      	; 0x27e0 <wait10ms>

000027dc <wait30ms>:
    27dc:	01 d0       	rcall	.+2      	; 0x27e0 <wait10ms>

000027de <wait20ms>:
    27de:	00 d0       	rcall	.+0      	; 0x27e0 <wait10ms>

000027e0 <wait10ms>:
    27e0:	00 d0       	rcall	.+0      	; 0x27e2 <wait5ms>

000027e2 <wait5ms>:
    27e2:	03 d0       	rcall	.+6      	; 0x27ea <wait1ms>

000027e4 <wait4ms>:
    27e4:	02 d0       	rcall	.+4      	; 0x27ea <wait1ms>

000027e6 <wait3ms>:
    27e6:	01 d0       	rcall	.+2      	; 0x27ea <wait1ms>

000027e8 <wait2ms>:
    27e8:	00 d0       	rcall	.+0      	; 0x27ea <wait1ms>

000027ea <wait1ms>:
    27ea:	00 d0       	rcall	.+0      	; 0x27ec <wait500us>

000027ec <wait500us>:
    27ec:	03 d0       	rcall	.+6      	; 0x27f4 <wait100us>

000027ee <wait400us>:
    27ee:	02 d0       	rcall	.+4      	; 0x27f4 <wait100us>

000027f0 <wait300us>:
    27f0:	01 d0       	rcall	.+2      	; 0x27f4 <wait100us>

000027f2 <wait200us>:
    27f2:	00 d0       	rcall	.+0      	; 0x27f4 <wait100us>

000027f4 <wait100us>:
    27f4:	00 d0       	rcall	.+0      	; 0x27f6 <wait50us>

000027f6 <wait50us>:
    27f6:	03 d0       	rcall	.+6      	; 0x27fe <wait10us>

000027f8 <wait40us>:
    27f8:	02 d0       	rcall	.+4      	; 0x27fe <wait10us>

000027fa <wait30us>:
    27fa:	01 d0       	rcall	.+2      	; 0x27fe <wait10us>

000027fc <wait20us>:
    27fc:	00 d0       	rcall	.+0      	; 0x27fe <wait10us>

000027fe <wait10us>:
    27fe:	00 d0       	rcall	.+0      	; 0x2800 <wait5us>

00002800 <wait5us>:
    2800:	03 d0       	rcall	.+6      	; 0x2808 <wait1us>

00002802 <wait4us>:
    2802:	02 d0       	rcall	.+4      	; 0x2808 <wait1us>

00002804 <wait3us>:
    2804:	01 d0       	rcall	.+2      	; 0x2808 <wait1us>

00002806 <wait2us>:
    2806:	00 d0       	rcall	.+0      	; 0x2808 <wait1us>

00002808 <wait1us>:
    2808:	00 00       	nop
    280a:	08 95       	ret

0000280c <getRLmultip>:
  R_DDR = 0;			// switch all resistor ports to input
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
  return;
 } // end ReadCapacity()

unsigned int getRLmultip(unsigned int cvolt) {
    280c:	ff 92       	push	r15
    280e:	0f 93       	push	r16
    2810:	1f 93       	push	r17
    2812:	cf 93       	push	r28
    2814:	df 93       	push	r29

  unsigned int uvolt;
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;
  if (cvolt >= RL_Tab_Beginn) {
    2816:	21 e0       	ldi	r18, 0x01	; 1
    2818:	8c 32       	cpi	r24, 0x2C	; 44
    281a:	92 07       	cpc	r25, r18
    281c:	18 f0       	brcs	.+6      	; 0x2824 <getRLmultip+0x18>
     uvolt = cvolt - RL_Tab_Beginn;
    281e:	8c 52       	subi	r24, 0x2C	; 44
    2820:	91 40       	sbci	r25, 0x01	; 1
    2822:	02 c0       	rjmp	.+4      	; 0x2828 <getRLmultip+0x1c>
  } else {
     uvolt = 0;			// limit to begin of table
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = uvolt / RL_Tab_Abstand;
    2828:	69 e1       	ldi	r22, 0x19	; 25
    282a:	70 e0       	ldi	r23, 0x00	; 0
    282c:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <__udivmodhi4>
  tabres = uvolt % RL_Tab_Abstand;
    2830:	f8 2e       	mov	r15, r24
  tabres = RL_Tab_Abstand - tabres;
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
    2832:	6d 32       	cpi	r22, 0x2D	; 45
    2834:	08 f0       	brcs	.+2      	; 0x2838 <getRLmultip+0x2c>
    2836:	6c e2       	ldi	r22, 0x2C	; 44
    2838:	c6 2f       	mov	r28, r22
    283a:	d0 e0       	ldi	r29, 0x00	; 0
    283c:	ce 01       	movw	r24, r28
    283e:	88 0f       	add	r24, r24
    2840:	99 1f       	adc	r25, r25
    2842:	80 50       	subi	r24, 0x00	; 0
    2844:	90 40       	sbci	r25, 0x00	; 0
    2846:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__eerd_word_m168>
    284a:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RLtab[tabind+1]);
    284c:	ce 01       	movw	r24, r28
    284e:	88 0f       	add	r24, r24
    2850:	99 1f       	adc	r25, r25
    2852:	8e 5f       	subi	r24, 0xFE	; 254
    2854:	9f 4f       	sbci	r25, 0xFF	; 255
    2856:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__eerd_word_m168>
    285a:	9c 01       	movw	r18, r24
  } else {
     uvolt = 0;			// limit to begin of table
  }
  tabind = uvolt / RL_Tab_Abstand;
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
    285c:	49 e1       	ldi	r20, 0x19	; 25
    285e:	4f 19       	sub	r20, r15
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
    2860:	50 e0       	ldi	r21, 0x00	; 0
    2862:	08 1b       	sub	r16, r24
    2864:	19 0b       	sbc	r17, r25
    2866:	40 9f       	mul	r20, r16
    2868:	c0 01       	movw	r24, r0
    286a:	41 9f       	mul	r20, r17
    286c:	90 0d       	add	r25, r0
    286e:	50 9f       	mul	r21, r16
    2870:	90 0d       	add	r25, r0
    2872:	11 24       	eor	r1, r1
    2874:	0c 96       	adiw	r24, 0x0c	; 12
    2876:	69 e1       	ldi	r22, 0x19	; 25
    2878:	70 e0       	ldi	r23, 0x00	; 0
    287a:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <__udivmodhi4>
    287e:	62 0f       	add	r22, r18
    2880:	73 1f       	adc	r23, r19
}
    2882:	cb 01       	movw	r24, r22
    2884:	df 91       	pop	r29
    2886:	cf 91       	pop	r28
    2888:	1f 91       	pop	r17
    288a:	0f 91       	pop	r16
    288c:	ff 90       	pop	r15
    288e:	08 95       	ret

00002890 <Scale_C_with_vcc>:

void Scale_C_with_vcc(void) {
    2890:	8f 92       	push	r8
    2892:	9f 92       	push	r9
    2894:	af 92       	push	r10
    2896:	bf 92       	push	r11
    2898:	df 92       	push	r13
    289a:	ef 92       	push	r14
    289c:	ff 92       	push	r15
    289e:	0f 93       	push	r16
    28a0:	1f 93       	push	r17
    28a2:	e0 90 5f 01 	lds	r14, 0x015F
    28a6:	f0 90 60 01 	lds	r15, 0x0160
    28aa:	00 91 61 01 	lds	r16, 0x0161
    28ae:	10 91 62 01 	lds	r17, 0x0162
    28b2:	d0 90 6f 01 	lds	r13, 0x016F
   while (cap.cval > 100000) {
      cap.cval /= 10;
    28b6:	4a e0       	ldi	r20, 0x0A	; 10
    28b8:	84 2e       	mov	r8, r20
    28ba:	91 2c       	mov	r9, r1
    28bc:	a1 2c       	mov	r10, r1
    28be:	b1 2c       	mov	r11, r1
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    28c0:	08 c0       	rjmp	.+16     	; 0x28d2 <Scale_C_with_vcc+0x42>
      cap.cval /= 10;
    28c2:	c8 01       	movw	r24, r16
    28c4:	b7 01       	movw	r22, r14
    28c6:	a5 01       	movw	r20, r10
    28c8:	94 01       	movw	r18, r8
    28ca:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
    28ce:	79 01       	movw	r14, r18
    28d0:	8a 01       	movw	r16, r20
    28d2:	8d 2d       	mov	r24, r13
    28d4:	d3 94       	inc	r13
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    28d6:	91 ea       	ldi	r25, 0xA1	; 161
    28d8:	e9 16       	cp	r14, r25
    28da:	96 e8       	ldi	r25, 0x86	; 134
    28dc:	f9 06       	cpc	r15, r25
    28de:	91 e0       	ldi	r25, 0x01	; 1
    28e0:	09 07       	cpc	r16, r25
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	19 07       	cpc	r17, r25
    28e6:	68 f7       	brcc	.-38     	; 0x28c2 <Scale_C_with_vcc+0x32>
    28e8:	80 93 6f 01 	sts	0x016F, r24
      cap.cval /= 10;
      cap.cpre ++;			// prevent overflow
   }
   cap.cval *= ADCconfig.U_AVCC;	// scale with measured voltage
    28ec:	20 91 3d 01 	lds	r18, 0x013D
    28f0:	30 91 3e 01 	lds	r19, 0x013E
    28f4:	40 e0       	ldi	r20, 0x00	; 0
    28f6:	50 e0       	ldi	r21, 0x00	; 0
    28f8:	c8 01       	movw	r24, r16
    28fa:	b7 01       	movw	r22, r14
    28fc:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
    2900:	28 e8       	ldi	r18, 0x88	; 136
    2902:	33 e1       	ldi	r19, 0x13	; 19
    2904:	40 e0       	ldi	r20, 0x00	; 0
    2906:	50 e0       	ldi	r21, 0x00	; 0
    2908:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
    290c:	20 93 5f 01 	sts	0x015F, r18
    2910:	30 93 60 01 	sts	0x0160, r19
    2914:	40 93 61 01 	sts	0x0161, r20
    2918:	50 93 62 01 	sts	0x0162, r21
}
    291c:	1f 91       	pop	r17
    291e:	0f 91       	pop	r16
    2920:	ff 90       	pop	r15
    2922:	ef 90       	pop	r14
    2924:	df 90       	pop	r13
    2926:	bf 90       	pop	r11
    2928:	af 90       	pop	r10
    292a:	9f 90       	pop	r9
    292c:	8f 90       	pop	r8
    292e:	08 95       	ret

00002930 <ReadCapacity>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    2930:	8f 92       	push	r8
    2932:	9f 92       	push	r9
    2934:	af 92       	push	r10
    2936:	bf 92       	push	r11
    2938:	cf 92       	push	r12
    293a:	df 92       	push	r13
    293c:	ef 92       	push	r14
    293e:	ff 92       	push	r15
    2940:	0f 93       	push	r16
    2942:	1f 93       	push	r17
    2944:	cf 93       	push	r28
    2946:	df 93       	push	r29
    2948:	18 2f       	mov	r17, r24
    294a:	06 2f       	mov	r16, r22
  uint8_t HiPinR_L, HiPinR_H;
  uint8_t LoADC;
  uint8_t ii;

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
    294c:	88 0f       	add	r24, r24
    294e:	81 0f       	add	r24, r17
    2950:	86 0f       	add	r24, r22
    2952:	81 50       	subi	r24, 0x01	; 1
    2954:	80 93 49 01 	sts	0x0149, r24
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2958:	86 2f       	mov	r24, r22
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	8d 55       	subi	r24, 0x5D	; 93
    295e:	9e 4f       	sbci	r25, 0xFE	; 254
    2960:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__eerd_byte_m168>
    2964:	88 2e       	mov	r8, r24
  HiPinR_L = MEM_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
    2966:	21 2f       	mov	r18, r17
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	c9 01       	movw	r24, r18
    296c:	80 56       	subi	r24, 0x60	; 96
    296e:	9e 4f       	sbci	r25, 0xFE	; 254
    2970:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__eerd_byte_m168>
    2974:	c8 2e       	mov	r12, r24
//     DisplayValue(cap.cval,cap.cpre,'F',3);
//     wait_about2s();
//#endif
//     return;	//We have found a capacitor already
//  }
  if(PartFound == PART_RESISTOR) {
    2976:	80 91 07 01 	lds	r24, 0x0107
    297a:	86 30       	cpi	r24, 0x06	; 6
    297c:	09 f4       	brne	.+2      	; 0x2980 <ReadCapacity+0x50>
    297e:	76 c2       	rjmp	.+1260   	; 0x2e6c <ReadCapacity+0x53c>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    2980:	90 91 05 01 	lds	r25, 0x0105
    2984:	e3 e7       	ldi	r30, 0x73	; 115
    2986:	f1 e0       	ldi	r31, 0x01	; 1
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	0f c0       	rjmp	.+30     	; 0x29aa <ReadCapacity+0x7a>
     if ((diodes[ii].Cathode == LowPin) && (diodes[ii].Anode == HighPin) && (diodes[ii].Voltage < 1500)) {
    298c:	21 81       	ldd	r18, Z+1	; 0x01
    298e:	20 17       	cp	r18, r16
    2990:	51 f4       	brne	.+20     	; 0x29a6 <ReadCapacity+0x76>
    2992:	20 81       	ld	r18, Z
    2994:	21 17       	cp	r18, r17
    2996:	39 f4       	brne	.+14     	; 0x29a6 <ReadCapacity+0x76>
    2998:	22 81       	ldd	r18, Z+2	; 0x02
    299a:	33 81       	ldd	r19, Z+3	; 0x03
    299c:	45 e0       	ldi	r20, 0x05	; 5
    299e:	2c 3d       	cpi	r18, 0xDC	; 220
    29a0:	34 07       	cpc	r19, r20
    29a2:	08 f4       	brcc	.+2      	; 0x29a6 <ReadCapacity+0x76>
    29a4:	63 c2       	rjmp	.+1222   	; 0x2e6c <ReadCapacity+0x53c>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    29a6:	8f 5f       	subi	r24, 0xFF	; 255
    29a8:	34 96       	adiw	r30, 0x04	; 4
    29aa:	89 17       	cp	r24, r25
    29ac:	78 f3       	brcs	.-34     	; 0x298c <ReadCapacity+0x5c>

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    29ae:	58 e0       	ldi	r21, 0x08	; 8
    29b0:	85 2a       	or	r8, r21
        return;
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
    29b2:	10 92 6c 01 	sts	0x016C, r1
    29b6:	10 92 6b 01 	sts	0x016B, r1
#endif
  cap.cval = 0;				// set capacity value to zero
    29ba:	10 92 5f 01 	sts	0x015F, r1
    29be:	10 92 60 01 	sts	0x0160, r1
    29c2:	10 92 61 01 	sts	0x0161, r1
    29c6:	10 92 62 01 	sts	0x0162, r1
  cap.cpre = -12;			//default unit is pF
    29ca:	84 ef       	ldi	r24, 0xF4	; 244
    29cc:	80 93 6f 01 	sts	0x016F, r24
  EntladePins();			// discharge capacitor
    29d0:	0e 94 b4 01 	call	0x368	; 0x368 <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    29d4:	88 e0       	ldi	r24, 0x08	; 8
    29d6:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    29d8:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    29da:	87 b8       	out	0x07, r8	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    29dc:	c4 b8       	out	0x04, r12	; 4
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    29de:	81 2f       	mov	r24, r17
    29e0:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
    29e4:	7c 01       	movw	r14, r24
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    29e6:	10 92 4b 01 	sts	0x014B, r1
    29ea:	10 92 4a 01 	sts	0x014A, r1
  EntladePins();			// discharge capacitor
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
  R_PORT = 0;				// switch R-Port to GND
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    29ee:	ec 01       	movw	r28, r24
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    29f0:	2a c0       	rjmp	.+84     	; 0x2a46 <ReadCapacity+0x116>
     R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    29f2:	c5 b8       	out	0x05, r12	; 5
     R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    29f4:	c4 b8       	out	0x04, r12	; 4
     wait10ms();			// wait exactly 10ms, do not sleep
    29f6:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <wait10ms>
     R_DDR = 0;				// switch back to input
    29fa:	14 b8       	out	0x04, r1	; 4
     R_PORT = 0;			// no Pull up
    29fc:	15 b8       	out	0x05, r1	; 5
     wait500us();			//wait a little time
    29fe:	0e 94 f6 13 	call	0x27ec	; 0x27ec <wait500us>
     wdt_reset();
    2a02:	a8 95       	wdr
     // read voltage without current, is already charged enough?
     adcv[2] = ReadADC(HighPin);
    2a04:	81 2f       	mov	r24, r17
    2a06:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
    2a0a:	ec 01       	movw	r28, r24
     if (adcv[2] > adcv[0]) {
    2a0c:	e8 16       	cp	r14, r24
    2a0e:	f9 06       	cpc	r15, r25
    2a10:	18 f4       	brcc	.+6      	; 0x2a18 <ReadCapacity+0xe8>
        adcv[2] -= adcv[0];		//difference to beginning voltage
    2a12:	ce 19       	sub	r28, r14
    2a14:	df 09       	sbc	r29, r15
    2a16:	02 c0       	rjmp	.+4      	; 0x2a1c <ReadCapacity+0xec>
     } else {
        adcv[2] = 0;			// voltage is lower or same as beginning voltage
    2a18:	c0 e0       	ldi	r28, 0x00	; 0
    2a1a:	d0 e0       	ldi	r29, 0x00	; 0
     }
     if ((ovcnt16 == 126) && (adcv[2] < 75)) {
    2a1c:	20 91 4a 01 	lds	r18, 0x014A
    2a20:	30 91 4b 01 	lds	r19, 0x014B
    2a24:	2e 37       	cpi	r18, 0x7E	; 126
    2a26:	31 05       	cpc	r19, r1
    2a28:	21 f4       	brne	.+8      	; 0x2a32 <ReadCapacity+0x102>
    2a2a:	cb 34       	cpi	r28, 0x4B	; 75
    2a2c:	d1 05       	cpc	r29, r1
    2a2e:	08 f4       	brcc	.+2      	; 0x2a32 <ReadCapacity+0x102>
    2a30:	18 c2       	rjmp	.+1072   	; 0x2e62 <ReadCapacity+0x532>
        // 300mV can not be reached well-timed 
        break;		// don't try to load any more
     }
     if (adcv[2] > 300) {
    2a32:	81 e0       	ldi	r24, 0x01	; 1
    2a34:	cd 32       	cpi	r28, 0x2D	; 45
    2a36:	d8 07       	cpc	r29, r24
    2a38:	98 f4       	brcc	.+38     	; 0x2a60 <ReadCapacity+0x130>
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2a3a:	2f 5f       	subi	r18, 0xFF	; 255
    2a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a3e:	30 93 4b 01 	sts	0x014B, r19
    2a42:	20 93 4a 01 	sts	0x014A, r18
    2a46:	20 91 4a 01 	lds	r18, 0x014A
    2a4a:	30 91 4b 01 	lds	r19, 0x014B
    2a4e:	41 e0       	ldi	r20, 0x01	; 1
    2a50:	24 3f       	cpi	r18, 0xF4	; 244
    2a52:	34 07       	cpc	r19, r20
    2a54:	70 f2       	brcs	.-100    	; 0x29f2 <ReadCapacity+0xc2>
     }
  }
  // wait 5ms and read voltage again, does the capacitor keep the voltage?
//  adcv[1] = W5msReadADC(HighPin) - adcv[0];
//  wdt_reset();
  if (adcv[2] < 301) {
    2a56:	51 e0       	ldi	r21, 0x01	; 1
    2a58:	cd 32       	cpi	r28, 0x2D	; 45
    2a5a:	d5 07       	cpc	r29, r21
    2a5c:	08 f4       	brcc	.+2      	; 0x2a60 <ReadCapacity+0x130>
    2a5e:	01 c2       	rjmp	.+1026   	; 0x2e62 <ReadCapacity+0x532>
#if DebugOut == 10
  DisplayValue(ovcnt16,0,' ',4);
  DisplayValue(adcv[2],-3,'V',4);
#endif
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    2a60:	20 91 4a 01 	lds	r18, 0x014A
    2a64:	30 91 4b 01 	lds	r19, 0x014B
    2a68:	21 15       	cp	r18, r1
    2a6a:	31 05       	cpc	r19, r1
    2a6c:	29 f4       	brne	.+10     	; 0x2a78 <ReadCapacity+0x148>
    2a6e:	85 e0       	ldi	r24, 0x05	; 5
    2a70:	c5 31       	cpi	r28, 0x15	; 21
    2a72:	d8 07       	cpc	r29, r24
    2a74:	08 f0       	brcs	.+2      	; 0x2a78 <ReadCapacity+0x148>
    2a76:	74 c0       	rjmp	.+232    	; 0x2b60 <ReadCapacity+0x230>
     goto messe_mit_rh;		// Voltage of more than 1300mV is reached in one pulse, to fast loaded
  }
  // Capacity is more than about 50µF
  cap.cpre = -9;		// switch units to nF 
    2a78:	87 ef       	ldi	r24, 0xF7	; 247
    2a7a:	80 93 6f 01 	sts	0x016F, r24
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the same time which is required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2a7e:	ce 01       	movw	r24, r28
    2a80:	cc 24       	eor	r12, r12
    2a82:	dd 24       	eor	r13, r13
    2a84:	09 c0       	rjmp	.+18     	; 0x2a98 <ReadCapacity+0x168>
     wait5ms();
    2a86:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <wait5ms>
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
    2a8a:	81 2f       	mov	r24, r17
    2a8c:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
     wdt_reset();
    2a90:	a8 95       	wdr
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the same time which is required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2a92:	08 94       	sec
    2a94:	c1 1c       	adc	r12, r1
    2a96:	d1 1c       	adc	r13, r1
    2a98:	20 91 4a 01 	lds	r18, 0x014A
    2a9c:	30 91 4b 01 	lds	r19, 0x014B
    2aa0:	2c 15       	cp	r18, r12
    2aa2:	3d 05       	cpc	r19, r13
    2aa4:	80 f7       	brcc	.-32     	; 0x2a86 <ReadCapacity+0x156>
     wait5ms();
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
    2aa6:	e8 16       	cp	r14, r24
    2aa8:	f9 06       	cpc	r15, r25
    2aaa:	30 f4       	brcc	.+12     	; 0x2ab8 <ReadCapacity+0x188>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    2aac:	8e 19       	sub	r24, r14
    2aae:	9f 09       	sbc	r25, r15
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    2ab0:	8c 17       	cp	r24, r28
    2ab2:	9d 07       	cpc	r25, r29
    2ab4:	60 f4       	brcc	.+24     	; 0x2ace <ReadCapacity+0x19e>
    2ab6:	02 c0       	rjmp	.+4      	; 0x2abc <ReadCapacity+0x18c>
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    2ab8:	80 e0       	ldi	r24, 0x00	; 0
    2aba:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
    2abc:	ae 01       	movw	r20, r28
    2abe:	48 1b       	sub	r20, r24
    2ac0:	59 0b       	sbc	r21, r25
    2ac2:	ca 01       	movw	r24, r20
  } else {
     adcv[3] = 0;			// no lost voltage
  }
  if (adcv[3] > 100) {
    2ac4:	45 36       	cpi	r20, 0x65	; 101
    2ac6:	51 05       	cpc	r21, r1
    2ac8:	08 f0       	brcs	.+2      	; 0x2acc <ReadCapacity+0x19c>
    2aca:	cb c1       	rjmp	.+918    	; 0x2e62 <ReadCapacity+0x532>
    2acc:	02 c0       	rjmp	.+4      	; 0x2ad2 <ReadCapacity+0x1a2>
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
  } else {
     adcv[3] = 0;			// no lost voltage
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
     lcd_space();
     wait_about1s();
 #endif
     goto keinC;			// capacitor does not keep the voltage about 5ms
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
    2ad2:	2f 5f       	subi	r18, 0xFF	; 255
    2ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad6:	69 01       	movw	r12, r18
    2ad8:	ee 24       	eor	r14, r14
    2ada:	ff 24       	eor	r15, r15
    2adc:	c0 92 67 01 	sts	0x0167, r12
    2ae0:	d0 92 68 01 	sts	0x0168, r13
    2ae4:	e0 92 69 01 	sts	0x0169, r14
    2ae8:	f0 92 6a 01 	sts	0x016A, r15
  // compute factor with load voltage + lost voltage during the voltage load time
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]+adcv[3]);	// get factor to convert time to capacity from table
    2aec:	8c 0f       	add	r24, r28
    2aee:	9d 1f       	adc	r25, r29
    2af0:	0e 94 06 14 	call	0x280c	; 0x280c <getRLmultip>
    2af4:	bc 01       	movw	r22, r24
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	a7 01       	movw	r20, r14
    2afc:	96 01       	movw	r18, r12
    2afe:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
    2b02:	60 93 67 01 	sts	0x0167, r22
    2b06:	70 93 68 01 	sts	0x0168, r23
    2b0a:	80 93 69 01 	sts	0x0169, r24
    2b0e:	90 93 6a 01 	sts	0x016A, r25
#endif
   cap.cval = cap.cval_uncorrected.dw;	// set result to uncorrected
    2b12:	60 93 5f 01 	sts	0x015F, r22
    2b16:	70 93 60 01 	sts	0x0160, r23
    2b1a:	80 93 61 01 	sts	0x0161, r24
    2b1e:	90 93 62 01 	sts	0x0162, r25
   Scale_C_with_vcc();
    2b22:	0e 94 48 14 	call	0x2890	; 0x2890 <Scale_C_with_vcc>
   // cap.cval for this type is at least 40000nF, so the last digit will be never shown
   cap.cval *= (1000 - C_H_KORR);	// correct with C_H_KORR with 0.1% resolution, but prevent overflow
    2b26:	60 91 5f 01 	lds	r22, 0x015F
    2b2a:	70 91 60 01 	lds	r23, 0x0160
    2b2e:	80 91 61 01 	lds	r24, 0x0161
    2b32:	90 91 62 01 	lds	r25, 0x0162
    2b36:	28 ee       	ldi	r18, 0xE8	; 232
    2b38:	33 e0       	ldi	r19, 0x03	; 3
    2b3a:	40 e0       	ldi	r20, 0x00	; 0
    2b3c:	50 e0       	ldi	r21, 0x00	; 0
    2b3e:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
   cap.cval /= 100;
    2b42:	24 e6       	ldi	r18, 0x64	; 100
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	40 e0       	ldi	r20, 0x00	; 0
    2b48:	50 e0       	ldi	r21, 0x00	; 0
    2b4a:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
    2b4e:	20 93 5f 01 	sts	0x015F, r18
    2b52:	30 93 60 01 	sts	0x0160, r19
    2b56:	40 93 61 01 	sts	0x0161, r20
    2b5a:	50 93 62 01 	sts	0x0162, r21
   DisplayValue(cap.cval,cap.cpre,'F',4);
   lcd_space();
   lcd_string(utoa(ovcnt16,outval,10));
   wait_about3s();
#endif
   goto checkDiodes;
    2b5e:	44 c1       	rjmp	.+648    	; 0x2de8 <ReadCapacity+0x4b8>
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
  HiPinR_L = MEM_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load
    2b60:	ec 2c       	mov	r14, r12
    2b62:	ee 0c       	add	r14, r14

//==================================================================================
// Measurement of little capacity values
messe_mit_rh:
  //little capacity value, about  < 50 µF
  EntladePins();			// discharge capacitor
    2b64:	0e 94 b4 01 	call	0x368	; 0x368 <EntladePins>
  //measure with the R_H (470kOhm) resistor 
  R_PORT = 0;		// R_DDR ist HiPinR_L
    2b68:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = (1<<TP1) | (1<<TP2) | (1<<TP3) | (1<<TxD);	//switch all Pins to output
    2b6a:	8f e0       	ldi	r24, 0x0F	; 15
    2b6c:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		//switch all ADC Pins to GND
    2b6e:	88 e0       	ldi	r24, 0x08	; 8
    2b70:	88 b9       	out	0x08, r24	; 8
  R_DDR = HiPinR_H;   		// switch R_H resistor port for HighPin to output (GND)
    2b72:	e4 b8       	out	0x04, r14	; 4
// setup Analog Comparator
  ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    2b74:	80 e4       	ldi	r24, 0x40	; 64
    2b76:	80 93 7b 00 	sts	0x007B, r24
  ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    2b7a:	84 e5       	ldi	r24, 0x54	; 84
    2b7c:	80 bf       	out	0x30, r24	; 48
  ADMUX = (1<<REFS0) | HighPin;			// switch Mux to High-Pin
    2b7e:	81 2f       	mov	r24, r17
    2b80:	80 64       	ori	r24, 0x40	; 64
    2b82:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    2b86:	86 e1       	ldi	r24, 0x16	; 22
    2b88:	80 93 7a 00 	sts	0x007A, r24
  wait200us();			//wait for bandgap to start up
    2b8c:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <wait200us>

// setup Counter1
  ovcnt16 = 0;
    2b90:	10 92 4b 01 	sts	0x014B, r1
    2b94:	10 92 4a 01 	sts	0x014A, r1
  TCCR1A = 0;			// set Counter1 to normal Mode
    2b98:	10 92 80 00 	sts	0x0080, r1
  TCNT1 = 0;			//set Counter to 0
    2b9c:	10 92 85 00 	sts	0x0085, r1
    2ba0:	10 92 84 00 	sts	0x0084, r1
  TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// clear interrupt flags
    2ba4:	87 e2       	ldi	r24, 0x27	; 39
    2ba6:	86 bb       	out	0x16, r24	; 22
#ifndef INHIBIT_SLEEP_MODE
  TIMSK1 = (1<<TOIE1) | (1<<ICIE1);	// enable Timer overflow interrupt and input capture interrupt
    2ba8:	81 e2       	ldi	r24, 0x21	; 33
    2baa:	80 93 6f 00 	sts	0x006F, r24
  unfinished = 1;
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	80 93 5e 01 	sts	0x015E, r24
  sei();
    2bb4:	78 94       	sei
#endif
  R_PORT = HiPinR_H;           	// switch R_H resistor port for HighPin to VCC
    2bb6:	e5 b8       	out	0x05, r14	; 5
  if(PartFound == PART_FET) {
    2bb8:	90 91 07 01 	lds	r25, 0x0107
    2bbc:	93 30       	cpi	r25, 0x03	; 3
    2bbe:	71 f4       	brne	.+28     	; 0x2bdc <ReadCapacity+0x2ac>
     // charge capacitor with R_H resistor
     TCCR1B = (1<<CS10);	//Start counter 1MHz or 8MHz
    2bc0:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = (((1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK) & ~(1<<HighPin));	// release only HighPin ADC port
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	01 2e       	mov	r0, r17
    2bca:	02 c0       	rjmp	.+4      	; 0x2bd0 <ReadCapacity+0x2a0>
    2bcc:	88 0f       	add	r24, r24
    2bce:	99 1f       	adc	r25, r25
    2bd0:	0a 94       	dec	r0
    2bd2:	e2 f7       	brpl	.-8      	; 0x2bcc <ReadCapacity+0x29c>
    2bd4:	80 95       	com	r24
    2bd6:	8f 70       	andi	r24, 0x0F	; 15
    2bd8:	87 b9       	out	0x07, r24	; 7
    2bda:	18 c0       	rjmp	.+48     	; 0x2c0c <ReadCapacity+0x2dc>
  } else {
     TCCR1B =  (1<<CS10);	//start counter 1MHz or 8MHz
    2bdc:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
    2be0:	87 b8       	out	0x07, r8	; 7
    2be2:	14 c0       	rjmp	.+40     	; 0x2c0c <ReadCapacity+0x2dc>
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
     ovcnt16++;
  }
#else
  while(unfinished) {
    set_sleep_mode(SLEEP_MODE_IDLE);
    2be4:	83 b7       	in	r24, 0x33	; 51
    2be6:	81 7f       	andi	r24, 0xF1	; 241
    2be8:	83 bf       	out	0x33, r24	; 51
    sleep_mode();       /* wait for interrupt */
    2bea:	83 b7       	in	r24, 0x33	; 51
    2bec:	81 60       	ori	r24, 0x01	; 1
    2bee:	83 bf       	out	0x33, r24	; 51
    2bf0:	88 95       	sleep
    2bf2:	83 b7       	in	r24, 0x33	; 51
    2bf4:	8e 7f       	andi	r24, 0xFE	; 254
    2bf6:	83 bf       	out	0x33, r24	; 51
    sei();
    2bf8:	78 94       	sei
    wdt_reset();
    2bfa:	a8 95       	wdr
    if(ovcnt16 == (F_CPU/5000)) {
    2bfc:	80 91 4a 01 	lds	r24, 0x014A
    2c00:	90 91 4b 01 	lds	r25, 0x014B
    2c04:	56 e0       	ldi	r21, 0x06	; 6
    2c06:	80 34       	cpi	r24, 0x40	; 64
    2c08:	95 07       	cpc	r25, r21
    2c0a:	21 f0       	breq	.+8      	; 0x2c14 <ReadCapacity+0x2e4>
     // this OV was not counted, but was before the Input Capture
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
     ovcnt16++;
  }
#else
  while(unfinished) {
    2c0c:	80 91 5e 01 	lds	r24, 0x015E
    2c10:	88 23       	and	r24, r24
    2c12:	41 f7       	brne	.-48     	; 0x2be4 <ReadCapacity+0x2b4>
    wdt_reset();
    if(ovcnt16 == (F_CPU/5000)) {
       break; 		//Timeout for Charging, above 12 s
    }
  }
  TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    2c14:	10 92 81 00 	sts	0x0081, r1
  tmpint = ICR1;		// get previous Input Capture Counter flag
    2c18:	c0 91 86 00 	lds	r28, 0x0086
    2c1c:	d0 91 87 00 	lds	r29, 0x0087
  TIMSK1 = (0<<TOIE1) | (0<<ICIE1);	// disable Timer overflow interrupt and input capture interrupt
    2c20:	10 92 6f 00 	sts	0x006F, r1
  if (TCNT1 < tmpint) {
    2c24:	80 91 84 00 	lds	r24, 0x0084
    2c28:	90 91 85 00 	lds	r25, 0x0085
    2c2c:	8c 17       	cp	r24, r28
    2c2e:	9d 07       	cpc	r25, r29
    2c30:	48 f4       	brcc	.+18     	; 0x2c44 <ReadCapacity+0x314>
     ovcnt16--;			// one ov to much
    2c32:	80 91 4a 01 	lds	r24, 0x014A
    2c36:	90 91 4b 01 	lds	r25, 0x014B
    2c3a:	01 97       	sbiw	r24, 0x01	; 1
    2c3c:	90 93 4b 01 	sts	0x014B, r25
    2c40:	80 93 4a 01 	sts	0x014A, r24
  }

#endif
//############################################################
  ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    2c44:	86 e9       	ldi	r24, 0x96	; 150
    2c46:	80 93 7a 00 	sts	0x007A, r24
  R_DDR = 0;			// switch R_H resistor port for input
    2c4a:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// switch R_H resistor port pull up for HighPin off
    2c4c:	15 b8       	out	0x05, r1	; 5
  load_diff = ReadADC(HighPin) + REF_C_KORR - ref_mv;	// build difference of capacitor voltage to Reference Voltage
    2c4e:	81 2f       	mov	r24, r17
    2c50:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
    2c54:	20 91 41 01 	lds	r18, 0x0141
    2c58:	30 91 42 01 	lds	r19, 0x0142
    2c5c:	82 1b       	sub	r24, r18
    2c5e:	93 0b       	sbc	r25, r19
    2c60:	0c 96       	adiw	r24, 0x0c	; 12
    2c62:	90 93 72 01 	sts	0x0172, r25
    2c66:	80 93 71 01 	sts	0x0171, r24
//############################################################
  if (ovcnt16 >= (F_CPU/10000)) {
    2c6a:	80 91 4a 01 	lds	r24, 0x014A
    2c6e:	90 91 4b 01 	lds	r25, 0x014B
    2c72:	23 e0       	ldi	r18, 0x03	; 3
    2c74:	80 32       	cpi	r24, 0x20	; 32
    2c76:	92 07       	cpc	r25, r18
    2c78:	08 f0       	brcs	.+2      	; 0x2c7c <ReadCapacity+0x34c>
    2c7a:	f3 c0       	rjmp	.+486    	; 0x2e62 <ReadCapacity+0x532>
     goto keinC;	// no normal end
  }
//  cap.cval_uncorrected = CombineII2Long(ovcnt16, tmpint);
  cap.cval_uncorrected.w[1] = ovcnt16;
    2c7c:	90 93 6a 01 	sts	0x016A, r25
    2c80:	80 93 69 01 	sts	0x0169, r24
  cap.cval_uncorrected.w[0] = tmpint;
    2c84:	d0 93 68 01 	sts	0x0168, r29
    2c88:	c0 93 67 01 	sts	0x0167, r28

  cap.cpre = -12;			// cap.cval unit is pF 
    2c8c:	24 ef       	ldi	r18, 0xF4	; 244
    2c8e:	20 93 6f 01 	sts	0x016F, r18
  if (ovcnt16 > 65) {
    2c92:	82 34       	cpi	r24, 0x42	; 66
    2c94:	91 05       	cpc	r25, r1
    2c96:	c8 f0       	brcs	.+50     	; 0x2cca <ReadCapacity+0x39a>
     cap.cval_uncorrected.dw /= 100;	// switch to next unit
    2c98:	60 91 67 01 	lds	r22, 0x0167
    2c9c:	70 91 68 01 	lds	r23, 0x0168
    2ca0:	80 91 69 01 	lds	r24, 0x0169
    2ca4:	90 91 6a 01 	lds	r25, 0x016A
    2ca8:	24 e6       	ldi	r18, 0x64	; 100
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	40 e0       	ldi	r20, 0x00	; 0
    2cae:	50 e0       	ldi	r21, 0x00	; 0
    2cb0:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
    2cb4:	20 93 67 01 	sts	0x0167, r18
    2cb8:	30 93 68 01 	sts	0x0168, r19
    2cbc:	40 93 69 01 	sts	0x0169, r20
    2cc0:	50 93 6a 01 	sts	0x016A, r21
     cap.cpre += 2;			// set unit, prevent overflow
    2cc4:	86 ef       	ldi	r24, 0xF6	; 246
    2cc6:	80 93 6f 01 	sts	0x016F, r24
  }
  cap.cval_uncorrected.dw *= RHmultip;		// 708
    2cca:	60 91 00 01 	lds	r22, 0x0100
    2cce:	70 91 01 01 	lds	r23, 0x0101
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	20 91 67 01 	lds	r18, 0x0167
    2cda:	30 91 68 01 	lds	r19, 0x0168
    2cde:	40 91 69 01 	lds	r20, 0x0169
    2ce2:	50 91 6a 01 	lds	r21, 0x016A
    2ce6:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
  cap.cval_uncorrected.dw /= (F_CPU / 10000);	// divide by 100 (@ 1MHz clock), 800 (@ 8MHz clock)
    2cea:	20 e2       	ldi	r18, 0x20	; 32
    2cec:	33 e0       	ldi	r19, 0x03	; 3
    2cee:	40 e0       	ldi	r20, 0x00	; 0
    2cf0:	50 e0       	ldi	r21, 0x00	; 0
    2cf2:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
    2cf6:	20 93 67 01 	sts	0x0167, r18
    2cfa:	30 93 68 01 	sts	0x0168, r19
    2cfe:	40 93 69 01 	sts	0x0169, r20
    2d02:	50 93 6a 01 	sts	0x016A, r21
  cap.cval = cap.cval_uncorrected.dw;		// set the corrected cap.cval
    2d06:	ef e5       	ldi	r30, 0x5F	; 95
    2d08:	f1 e0       	ldi	r31, 0x01	; 1
    2d0a:	20 93 5f 01 	sts	0x015F, r18
    2d0e:	31 83       	std	Z+1, r19	; 0x01
    2d10:	42 83       	std	Z+2, r20	; 0x02
    2d12:	53 83       	std	Z+3, r21	; 0x03
  Scale_C_with_vcc();
    2d14:	0e 94 48 14 	call	0x2890	; 0x2890 <Scale_C_with_vcc>
  if (cap.cpre == -12) {
    2d18:	80 91 6f 01 	lds	r24, 0x016F
    2d1c:	84 3f       	cpi	r24, 0xF4	; 244
    2d1e:	09 f0       	breq	.+2      	; 0x2d22 <ReadCapacity+0x3f2>
    2d20:	55 c0       	rjmp	.+170    	; 0x2dcc <ReadCapacity+0x49c>
#if COMP_SLEW1 > COMP_SLEW2
     if (cap.cval < COMP_SLEW1) {
    2d22:	80 90 5f 01 	lds	r8, 0x015F
    2d26:	90 90 60 01 	lds	r9, 0x0160
    2d2a:	a0 90 61 01 	lds	r10, 0x0161
    2d2e:	b0 90 62 01 	lds	r11, 0x0162
    2d32:	40 ea       	ldi	r20, 0xA0	; 160
    2d34:	84 16       	cp	r8, r20
    2d36:	4f e0       	ldi	r20, 0x0F	; 15
    2d38:	94 06       	cpc	r9, r20
    2d3a:	40 e0       	ldi	r20, 0x00	; 0
    2d3c:	a4 06       	cpc	r10, r20
    2d3e:	40 e0       	ldi	r20, 0x00	; 0
    2d40:	b4 06       	cpc	r11, r20
    2d42:	c0 f4       	brcc	.+48     	; 0x2d74 <ReadCapacity+0x444>
        // add slew rate dependent offset
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
    2d44:	a5 01       	movw	r20, r10
    2d46:	94 01       	movw	r18, r8
    2d48:	24 52       	subi	r18, 0x24	; 36
    2d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d4c:	4f 4f       	sbci	r20, 0xFF	; 255
    2d4e:	5f 4f       	sbci	r21, 0xFF	; 255
    2d50:	60 ea       	ldi	r22, 0xA0	; 160
    2d52:	7f e0       	ldi	r23, 0x0F	; 15
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
    2d5c:	28 0d       	add	r18, r8
    2d5e:	39 1d       	adc	r19, r9
    2d60:	4a 1d       	adc	r20, r10
    2d62:	5b 1d       	adc	r21, r11
    2d64:	20 93 5f 01 	sts	0x015F, r18
    2d68:	30 93 60 01 	sts	0x0160, r19
    2d6c:	40 93 61 01 	sts	0x0161, r20
    2d70:	50 93 62 01 	sts	0x0162, r21
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2d74:	80 91 49 01 	lds	r24, 0x0149
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	80 55       	subi	r24, 0x50	; 80
    2d7c:	9e 4f       	sbci	r25, 0xFE	; 254
    2d7e:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__eerd_byte_m168>
     if (cap.cval > tmpint) {
    2d82:	20 91 5f 01 	lds	r18, 0x015F
    2d86:	30 91 60 01 	lds	r19, 0x0160
    2d8a:	40 91 61 01 	lds	r20, 0x0161
    2d8e:	50 91 62 01 	lds	r21, 0x0162
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2d92:	90 e0       	ldi	r25, 0x00	; 0
     if (cap.cval > tmpint) {
    2d94:	a0 e0       	ldi	r26, 0x00	; 0
    2d96:	b0 e0       	ldi	r27, 0x00	; 0
    2d98:	82 17       	cp	r24, r18
    2d9a:	93 07       	cpc	r25, r19
    2d9c:	a4 07       	cpc	r26, r20
    2d9e:	b5 07       	cpc	r27, r21
    2da0:	68 f4       	brcc	.+26     	; 0x2dbc <ReadCapacity+0x48c>
         cap.cval -= tmpint;		//subtract zero offset (pF)
    2da2:	28 1b       	sub	r18, r24
    2da4:	39 0b       	sbc	r19, r25
    2da6:	4a 0b       	sbc	r20, r26
    2da8:	5b 0b       	sbc	r21, r27
    2daa:	20 93 5f 01 	sts	0x015F, r18
    2dae:	30 93 60 01 	sts	0x0160, r19
    2db2:	40 93 61 01 	sts	0x0161, r20
    2db6:	50 93 62 01 	sts	0x0162, r21
    2dba:	08 c0       	rjmp	.+16     	; 0x2dcc <ReadCapacity+0x49c>
     } else {
         cap.cval = 0;			//unsigned long may not reach negativ value
    2dbc:	10 92 5f 01 	sts	0x015F, r1
    2dc0:	10 92 60 01 	sts	0x0160, r1
    2dc4:	10 92 61 01 	sts	0x0161, r1
    2dc8:	10 92 62 01 	sts	0x0162, r1
  lcd_testpin(HighPin);
  lcd_space();
  DisplayValue(cap.cval,cap.cpre,'F',4);
  wait_about3s();
#endif
  R_DDR = HiPinR_L; 		//switch R_L for High-Pin to GND
    2dcc:	c4 b8       	out	0x04, r12	; 4
#if F_CPU < 2000001
   if(cap.cval < 50)
#else 
   if(cap.cval < 25)
    2dce:	80 91 5f 01 	lds	r24, 0x015F
    2dd2:	90 91 60 01 	lds	r25, 0x0160
    2dd6:	a0 91 61 01 	lds	r26, 0x0161
    2dda:	b0 91 62 01 	lds	r27, 0x0162
    2dde:	89 31       	cpi	r24, 0x19	; 25
    2de0:	91 05       	cpc	r25, r1
    2de2:	a1 05       	cpc	r26, r1
    2de4:	b1 05       	cpc	r27, r1
    2de6:	e8 f1       	brcs	.+122    	; 0x2e62 <ReadCapacity+0x532>
//   if (ovcnt16 > (6 * ((unsigned long)F_CPU/1000000))) {	// above 3 uF
//      GetESR(HighPin,LowPin);
//   }
#endif
checkDiodes:
   if((NumOfDiodes > 0)  && (PartFound != PART_FET)) {
    2de8:	80 91 05 01 	lds	r24, 0x0105
    2dec:	88 23       	and	r24, r24
    2dee:	21 f0       	breq	.+8      	; 0x2df8 <ReadCapacity+0x4c8>
    2df0:	80 91 07 01 	lds	r24, 0x0107
    2df4:	83 30       	cpi	r24, 0x03	; 3
    2df6:	a9 f5       	brne	.+106    	; 0x2e62 <ReadCapacity+0x532>
      wait_about1s();
#endif
      // nearly shure, that there is one or more diodes in reverse direction,
      // which would be wrongly detected as capacitor 
   } else {
      PartFound = PART_CAPACITOR;	//capacitor is found
    2df8:	87 e0       	ldi	r24, 0x07	; 7
    2dfa:	80 93 07 01 	sts	0x0107, r24
      if ((cap.cpre > cap.cpre_max) || ((cap.cpre == cap.cpre_max) && (cap.cval > cap.cval_max))) {
    2dfe:	60 91 6f 01 	lds	r22, 0x016F
    2e02:	80 91 70 01 	lds	r24, 0x0170
    2e06:	86 17       	cp	r24, r22
    2e08:	bc f0       	brlt	.+46     	; 0x2e38 <ReadCapacity+0x508>
    2e0a:	68 17       	cp	r22, r24
    2e0c:	51 f5       	brne	.+84     	; 0x2e62 <ReadCapacity+0x532>
    2e0e:	20 91 5f 01 	lds	r18, 0x015F
    2e12:	30 91 60 01 	lds	r19, 0x0160
    2e16:	40 91 61 01 	lds	r20, 0x0161
    2e1a:	50 91 62 01 	lds	r21, 0x0162
    2e1e:	80 91 63 01 	lds	r24, 0x0163
    2e22:	90 91 64 01 	lds	r25, 0x0164
    2e26:	a0 91 65 01 	lds	r26, 0x0165
    2e2a:	b0 91 66 01 	lds	r27, 0x0166
    2e2e:	82 17       	cp	r24, r18
    2e30:	93 07       	cpc	r25, r19
    2e32:	a4 07       	cpc	r26, r20
    2e34:	b5 07       	cpc	r27, r21
    2e36:	a8 f4       	brcc	.+42     	; 0x2e62 <ReadCapacity+0x532>
         // we have found a greater one
         cap.cval_max = cap.cval;
    2e38:	ef e5       	ldi	r30, 0x5F	; 95
    2e3a:	f1 e0       	ldi	r31, 0x01	; 1
    2e3c:	80 91 5f 01 	lds	r24, 0x015F
    2e40:	90 91 60 01 	lds	r25, 0x0160
    2e44:	a0 91 61 01 	lds	r26, 0x0161
    2e48:	b0 91 62 01 	lds	r27, 0x0162
    2e4c:	80 93 63 01 	sts	0x0163, r24
    2e50:	90 93 64 01 	sts	0x0164, r25
    2e54:	a0 93 65 01 	sts	0x0165, r26
    2e58:	b0 93 66 01 	sts	0x0166, r27
         cap.cpre_max = cap.cpre;
    2e5c:	61 8b       	std	Z+17, r22	; 0x11
         cap.ca = LowPin;		// save LowPin
    2e5e:	06 87       	std	Z+14, r16	; 0x0e
         cap.cb = HighPin;		// save HighPin
    2e60:	17 87       	std	Z+15, r17	; 0x0f
keinC:
  // discharge capacitor again
//  EntladePins();		// discharge capacitors
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    2e62:	88 e0       	ldi	r24, 0x08	; 8
    2e64:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    2e66:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    2e68:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    2e6a:	15 b8       	out	0x05, r1	; 5
  return;
 } // end ReadCapacity()
    2e6c:	df 91       	pop	r29
    2e6e:	cf 91       	pop	r28
    2e70:	1f 91       	pop	r17
    2e72:	0f 91       	pop	r16
    2e74:	ff 90       	pop	r15
    2e76:	ef 90       	pop	r14
    2e78:	df 90       	pop	r13
    2e7a:	cf 90       	pop	r12
    2e7c:	bf 90       	pop	r11
    2e7e:	af 90       	pop	r10
    2e80:	9f 90       	pop	r9
    2e82:	8f 90       	pop	r8
    2e84:	08 95       	ret

00002e86 <__vector_13>:
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
}
#ifndef INHIBIT_SLEEP_MODE

 ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    2e86:	1f 92       	push	r1
    2e88:	0f 92       	push	r0
    2e8a:	0f b6       	in	r0, 0x3f	; 63
    2e8c:	0f 92       	push	r0
    2e8e:	11 24       	eor	r1, r1
    2e90:	8f 93       	push	r24
    2e92:	9f 93       	push	r25
 ovcnt16++;				// count overflow
    2e94:	80 91 4a 01 	lds	r24, 0x014A
    2e98:	90 91 4b 01 	lds	r25, 0x014B
    2e9c:	01 96       	adiw	r24, 0x01	; 1
    2e9e:	90 93 4b 01 	sts	0x014B, r25
    2ea2:	80 93 4a 01 	sts	0x014A, r24
}
    2ea6:	9f 91       	pop	r25
    2ea8:	8f 91       	pop	r24
    2eaa:	0f 90       	pop	r0
    2eac:	0f be       	out	0x3f, r0	; 63
    2eae:	0f 90       	pop	r0
    2eb0:	1f 90       	pop	r1
    2eb2:	18 95       	reti

00002eb4 <__vector_10>:
 ISR(TIMER1_CAPT_vect, ISR_NAKED)
{
 unfinished = 0;			// clear unfinished flag
    2eb4:	10 92 5e 01 	sts	0x015E, r1
 reti();
    2eb8:	18 95       	reti

00002eba <get_log>:
 } // end ReadInductance()


#if FLASHEND > 0x1fff
// get_log interpolate a table with the function -log(1 - (permil/1000))
uint16_t get_log(uint16_t permil) {
    2eba:	cf 93       	push	r28
    2ebc:	df 93       	push	r29
  uint16_t y1, y2;			// table values
  uint16_t result;			// result of interpolation
  uint8_t tabind;			// index to table value
  uint8_t tabres;			// distance to lower table value, fraction of Log_Tab_Distance

  tabind = permil / Log_Tab_Distance;	// index to table
    2ebe:	24 e1       	ldi	r18, 0x14	; 20
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	b9 01       	movw	r22, r18
    2ec4:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <__udivmodhi4>
    2ec8:	dc 01       	movw	r26, r24
  tabres = permil % Log_Tab_Distance;	// fraction of table distance
  // interpolate the table of factors
  y1 = pgm_read_word(&LogTab[tabind]);	// get the lower table value
    2eca:	70 e0       	ldi	r23, 0x00	; 0
    2ecc:	fb 01       	movw	r30, r22
    2ece:	ee 0f       	add	r30, r30
    2ed0:	ff 1f       	adc	r31, r31
    2ed2:	e8 59       	subi	r30, 0x98	; 152
    2ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed6:	c5 91       	lpm	r28, Z+
    2ed8:	d4 91       	lpm	r29, Z+
  y2 = pgm_read_word(&LogTab[tabind+1]); // get the higher table value
    2eda:	fb 01       	movw	r30, r22
    2edc:	ee 0f       	add	r30, r30
    2ede:	ff 1f       	adc	r31, r31
    2ee0:	e6 59       	subi	r30, 0x96	; 150
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	45 91       	lpm	r20, Z+
    2ee6:	54 91       	lpm	r21, Z+
  result = ((y2 - y1) * tabres ) / Log_Tab_Distance + y1; // interpolate
    2ee8:	4c 1b       	sub	r20, r28
    2eea:	5d 0b       	sbc	r21, r29
    2eec:	4a 9f       	mul	r20, r26
    2eee:	c0 01       	movw	r24, r0
    2ef0:	4b 9f       	mul	r20, r27
    2ef2:	90 0d       	add	r25, r0
    2ef4:	5a 9f       	mul	r21, r26
    2ef6:	90 0d       	add	r25, r0
    2ef8:	11 24       	eor	r1, r1
    2efa:	b9 01       	movw	r22, r18
    2efc:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <__udivmodhi4>
    2f00:	6c 0f       	add	r22, r28
    2f02:	7d 1f       	adc	r23, r29
  return(result);
 }
    2f04:	cb 01       	movw	r24, r22
    2f06:	df 91       	pop	r29
    2f08:	cf 91       	pop	r28
    2f0a:	08 95       	ret

00002f0c <ReadInductance>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadInductance(void) {
    2f0c:	2f 92       	push	r2
    2f0e:	3f 92       	push	r3
    2f10:	4f 92       	push	r4
    2f12:	5f 92       	push	r5
    2f14:	6f 92       	push	r6
    2f16:	7f 92       	push	r7
    2f18:	8f 92       	push	r8
    2f1a:	9f 92       	push	r9
    2f1c:	af 92       	push	r10
    2f1e:	bf 92       	push	r11
    2f20:	cf 92       	push	r12
    2f22:	df 92       	push	r13
    2f24:	ef 92       	push	r14
    2f26:	ff 92       	push	r15
    2f28:	0f 93       	push	r16
    2f2a:	1f 93       	push	r17
    2f2c:	df 93       	push	r29
    2f2e:	cf 93       	push	r28
    2f30:	cd b7       	in	r28, 0x3d	; 61
    2f32:	de b7       	in	r29, 0x3e	; 62
    2f34:	6c 97       	sbiw	r28, 0x1c	; 28
    2f36:	0f b6       	in	r0, 0x3f	; 63
    2f38:	f8 94       	cli
    2f3a:	de bf       	out	0x3e, r29	; 62
    2f3c:	0f be       	out	0x3f, r0	; 63
    2f3e:	cd bf       	out	0x3d, r28	; 61
  uint8_t LowPin;	// number of pin with low voltage
  uint8_t HighPin;	// number of pin with high voltage 
  int8_t ukorr;		// correction of comparator voltage


  if(PartFound != PART_RESISTOR) {
    2f40:	80 91 07 01 	lds	r24, 0x0107
    2f44:	86 30       	cpi	r24, 0x06	; 6
    2f46:	09 f0       	breq	.+2      	; 0x2f4a <ReadInductance+0x3e>
    2f48:	86 c2       	rjmp	.+1292   	; 0x3456 <ReadInductance+0x54a>
    2f4a:	ee 24       	eor	r14, r14
    2f4c:	ae 2c       	mov	r10, r14
    2f4e:	7b c2       	rjmp	.+1270   	; 0x3446 <ReadInductance+0x53a>
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 21000) continue;
    2f50:	2a 2d       	mov	r18, r10
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	3a 8b       	std	Y+18, r19	; 0x12
    2f56:	29 8b       	std	Y+17, r18	; 0x11
    2f58:	4b e0       	ldi	r20, 0x0B	; 11
    2f5a:	50 e0       	ldi	r21, 0x00	; 0
    2f5c:	24 9f       	mul	r18, r20
    2f5e:	f0 01       	movw	r30, r0
    2f60:	25 9f       	mul	r18, r21
    2f62:	f0 0d       	add	r31, r0
    2f64:	34 9f       	mul	r19, r20
    2f66:	f0 0d       	add	r31, r0
    2f68:	11 24       	eor	r1, r1
    2f6a:	e8 5e       	subi	r30, 0xE8	; 232
    2f6c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f6e:	80 81       	ld	r24, Z
    2f70:	91 81       	ldd	r25, Z+1	; 0x01
    2f72:	a2 81       	ldd	r26, Z+2	; 0x02
    2f74:	b3 81       	ldd	r27, Z+3	; 0x03
    2f76:	89 30       	cpi	r24, 0x09	; 9
    2f78:	52 e5       	ldi	r21, 0x52	; 82
    2f7a:	95 07       	cpc	r25, r21
    2f7c:	50 e0       	ldi	r21, 0x00	; 0
    2f7e:	a5 07       	cpc	r26, r21
    2f80:	50 e0       	ldi	r21, 0x00	; 0
    2f82:	b5 07       	cpc	r27, r21
    2f84:	08 f0       	brcs	.+2      	; 0x2f88 <ReadInductance+0x7c>
    2f86:	5e c2       	rjmp	.+1212   	; 0x3444 <ReadInductance+0x538>
    2f88:	cc 24       	eor	r12, r12
           // first and second pass, direction 1
           LowPin = resis[found].ra;
           HighPin = resis[found].rb;
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    2f8a:	bf 01       	movw	r22, r30
    2f8c:	67 5f       	subi	r22, 0xF7	; 247
    2f8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f90:	78 8f       	std	Y+24, r23	; 0x18
    2f92:	6f 8b       	std	Y+23, r22	; 0x17
           HighPin = resis[found].ra;
    2f94:	cf 01       	movw	r24, r30
    2f96:	08 96       	adiw	r24, 0x08	; 8
    2f98:	9a 8f       	std	Y+26, r25	; 0x1a
    2f9a:	89 8f       	std	Y+25, r24	; 0x19
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    2f9c:	01 e8       	ldi	r16, 0x81	; 129
    2f9e:	b0 2e       	mov	r11, r16
             wait_about2s();
          }
#endif
/* ********************************************************* */
        // lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000)) + 5) / 10;
    2fa0:	ab 8e       	std	Y+27, r10	; 0x1b
    2fa2:	1f 01       	movw	r2, r30
     if (resis[found].rx > 21000) continue;

     // we can check for Inductance, if resistance is below 2800 Ohm
     for (count=0;count<4;count++) {
        // Try four times (different direction and with delayed counter start)
        if (count < 2) {
    2fa4:	9c 2d       	mov	r25, r12
    2fa6:	92 30       	cpi	r25, 0x02	; 2
    2fa8:	30 f4       	brcc	.+12     	; 0x2fb6 <ReadInductance+0xaa>
           // first and second pass, direction 1
           LowPin = resis[found].ra;
    2faa:	e9 8d       	ldd	r30, Y+25	; 0x19
    2fac:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2fae:	d0 80       	ld	r13, Z
           HighPin = resis[found].rb;
    2fb0:	ef 89       	ldd	r30, Y+23	; 0x17
    2fb2:	f8 8d       	ldd	r31, Y+24	; 0x18
    2fb4:	05 c0       	rjmp	.+10     	; 0x2fc0 <ReadInductance+0xb4>
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    2fb6:	ef 89       	ldd	r30, Y+23	; 0x17
    2fb8:	f8 8d       	ldd	r31, Y+24	; 0x18
    2fba:	d0 80       	ld	r13, Z
           HighPin = resis[found].ra;
    2fbc:	e9 8d       	ldd	r30, Y+25	; 0x19
    2fbe:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2fc0:	a0 80       	ld	r10, Z
        }
        HiADC = MEM_read_byte(&PinADCtab[HighPin]);
    2fc2:	8a 2d       	mov	r24, r10
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	8d 55       	subi	r24, 0x5D	; 93
    2fc8:	9e 4f       	sbci	r25, 0xFE	; 254
    2fca:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__eerd_byte_m168>
    2fce:	f8 2e       	mov	r15, r24
        LoPinR_L = MEM_read_byte(&PinRLtab[LowPin]);	//R_L mask for HighPin R_L load
    2fd0:	8d 2d       	mov	r24, r13
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	80 56       	subi	r24, 0x60	; 96
    2fd6:	9e 4f       	sbci	r25, 0xFE	; 254
    2fd8:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__eerd_byte_m168>
        //==================================================================================
        // Measurement of Inductance values
        R_PORT = 0;		// switch R port to GND
    2fdc:	15 b8       	out	0x05, r1	; 5
        ADC_PORT =   TXD_VAL;		// switch ADC-Port to GND
    2fde:	f8 e0       	ldi	r31, 0x08	; 8
    2fe0:	f8 b9       	out	0x08, r31	; 8
        if ((resis[found].rx < 240) && ((count & 0x01) == 0)) {
    2fe2:	f1 01       	movw	r30, r2
    2fe4:	20 81       	ld	r18, Z
    2fe6:	31 81       	ldd	r19, Z+1	; 0x01
    2fe8:	42 81       	ldd	r20, Z+2	; 0x02
    2fea:	53 81       	ldd	r21, Z+3	; 0x03
    2fec:	20 3f       	cpi	r18, 0xF0	; 240
    2fee:	31 05       	cpc	r19, r1
    2ff0:	41 05       	cpc	r20, r1
    2ff2:	51 05       	cpc	r21, r1
    2ff4:	b8 f4       	brcc	.+46     	; 0x3024 <ReadInductance+0x118>
    2ff6:	c0 fc       	sbrc	r12, 0
    2ff8:	15 c0       	rjmp	.+42     	; 0x3024 <ReadInductance+0x118>
           // we can use PinR_L for measurement
           mess_r = RR680MI - R_L_VAL;			// use only pin output resistance
    2ffa:	40 90 02 01 	lds	r4, 0x0102
    2ffe:	50 90 03 01 	lds	r5, 0x0103
    3002:	20 e7       	ldi	r18, 0x70	; 112
    3004:	35 ee       	ldi	r19, 0xE5	; 229
    3006:	42 0e       	add	r4, r18
    3008:	53 1e       	adc	r5, r19
           ADC_DDR = HiADC | (1<<LowPin) | TXD_MSK;	// switch HiADC and Low Pin to GND, 
    300a:	2f 2d       	mov	r18, r15
    300c:	28 60       	ori	r18, 0x08	; 8
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	0d 2c       	mov	r0, r13
    3014:	02 c0       	rjmp	.+4      	; 0x301a <ReadInductance+0x10e>
    3016:	88 0f       	add	r24, r24
    3018:	99 1f       	adc	r25, r25
    301a:	0a 94       	dec	r0
    301c:	e2 f7       	brpl	.-8      	; 0x3016 <ReadInductance+0x10a>
    301e:	28 2b       	or	r18, r24
    3020:	27 b9       	out	0x07, r18	; 7
    3022:	08 c0       	rjmp	.+16     	; 0x3034 <ReadInductance+0x128>
        } else {
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
    3024:	84 b9       	out	0x04, r24	; 4
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
    3026:	8f 2d       	mov	r24, r15
    3028:	88 60       	ori	r24, 0x08	; 8
    302a:	87 b9       	out	0x07, r24	; 7
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
    302c:	40 90 02 01 	lds	r4, 0x0102
    3030:	50 90 03 01 	lds	r5, 0x0103
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    3034:	20 e0       	ldi	r18, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    3036:	8d 2d       	mov	r24, r13
    3038:	2c 8f       	std	Y+28, r18	; 0x1c
    303a:	0e 94 c3 1a 	call	0x3586	; 0x3586 <W10msReadADC>
    303e:	8c 01       	movw	r16, r24
            total_r =  ReadADC(HighPin);
    3040:	8a 2d       	mov	r24, r10
    3042:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    3046:	2c 8d       	ldd	r18, Y+28	; 0x1c
    3048:	02 30       	cpi	r16, 0x02	; 2
    304a:	11 05       	cpc	r17, r1
    304c:	18 f4       	brcc	.+6      	; 0x3054 <ReadInductance+0x148>
    304e:	82 30       	cpi	r24, 0x02	; 2
    3050:	91 05       	cpc	r25, r1
    3052:	18 f0       	brcs	.+6      	; 0x305a <ReadInductance+0x14e>
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    3054:	2f 5f       	subi	r18, 0xFF	; 255
    3056:	24 31       	cpi	r18, 0x14	; 20
    3058:	71 f7       	brne	.-36     	; 0x3036 <ReadInductance+0x12a>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
        // setup Analog Comparator
        ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    305a:	30 e4       	ldi	r19, 0x40	; 64
    305c:	30 93 7b 00 	sts	0x007B, r19
        ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    3060:	44 e5       	ldi	r20, 0x54	; 84
    3062:	40 bf       	out	0x30, r20	; 48
        ADMUX = (1<<REFS0) | LowPin;			// switch Mux to Low-Pin
    3064:	8d 2d       	mov	r24, r13
    3066:	80 64       	ori	r24, 0x40	; 64
    3068:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    306c:	56 e1       	ldi	r21, 0x16	; 22
    306e:	50 93 7a 00 	sts	0x007A, r21
   
      // setup Counter1
        ov_cnt16 = 0;
        TCCR1A = 0;			// set Counter1 to normal Mode
    3072:	10 92 80 00 	sts	0x0080, r1
        TCNT1 = 0;			//set Counter to 0
    3076:	10 92 85 00 	sts	0x0085, r1
    307a:	10 92 84 00 	sts	0x0084, r1
        TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// reset TIFR or TIFR1
    307e:	67 e2       	ldi	r22, 0x27	; 39
    3080:	66 bb       	out	0x16, r22	; 22
        HiADC |= TXD_VAL;
    3082:	0f 2d       	mov	r16, r15
    3084:	08 60       	ori	r16, 0x08	; 8
        wait200us();			// wait for bandgap to start up
    3086:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <wait200us>
        if ((count & 0x01) == 0 ) {
    308a:	8c 2d       	mov	r24, r12
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	9c 8b       	std	Y+20, r25	; 0x14
    3090:	8b 8b       	std	Y+19, r24	; 0x13
    3092:	81 70       	andi	r24, 0x01	; 1
    3094:	90 70       	andi	r25, 0x00	; 0
    3096:	9e 8b       	std	Y+22, r25	; 0x16
    3098:	8d 8b       	std	Y+21, r24	; 0x15
    309a:	9b 89       	ldd	r25, Y+19	; 0x13
    309c:	90 fd       	sbrc	r25, 0
    309e:	04 c0       	rjmp	.+8      	; 0x30a8 <ReadInductance+0x19c>
           //first start counter, then start current
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    30a0:	b0 92 81 00 	sts	0x0081, r11
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    30a4:	08 b9       	out	0x08, r16	; 8
    30a6:	07 c0       	rjmp	.+14     	; 0x30b6 <ReadInductance+0x1aa>
        } else {
           //first start current, then start counter with delay
           //parasitic capacity of coil can cause high current at the beginning
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    30a8:	08 b9       	out	0x08, r16	; 8
      #if F_CPU >= 8000000UL
           wait3us();		// ignore current peak from capacity
    30aa:	0e 94 02 14 	call	0x2804	; 0x2804 <wait3us>
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
    30ae:	e0 e2       	ldi	r30, 0x20	; 32
    30b0:	e6 bb       	out	0x16, r30	; 22
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    30b2:	b0 92 81 00 	sts	0x0081, r11
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    30b6:	00 e0       	ldi	r16, 0x00	; 0
    30b8:	10 e0       	ldi	r17, 0x00	; 0
        }
      
      //******************************
        while(1) {
           // Wait, until  Input Capture is set
           ii = TI1_INT_FLAGS;		//read Timer flags
    30ba:	26 b3       	in	r18, 0x16	; 22
           if (ii & (1<<ICF1))  {
    30bc:	25 fd       	sbrc	r18, 5
    30be:	0a c0       	rjmp	.+20     	; 0x30d4 <ReadInductance+0x1c8>
              break;
           }
           if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    30c0:	20 ff       	sbrs	r18, 0
    30c2:	fb cf       	rjmp	.-10     	; 0x30ba <ReadInductance+0x1ae>
              TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    30c4:	f1 e0       	ldi	r31, 0x01	; 1
    30c6:	f6 bb       	out	0x16, r31	; 22
              wdt_reset();
    30c8:	a8 95       	wdr
              ov_cnt16++;
    30ca:	0f 5f       	subi	r16, 0xFF	; 255
    30cc:	1f 4f       	sbci	r17, 0xFF	; 255
              if(ov_cnt16 == (F_CPU/100000)) {
    30ce:	00 35       	cpi	r16, 0x50	; 80
    30d0:	11 05       	cpc	r17, r1
    30d2:	99 f7       	brne	.-26     	; 0x30ba <ReadInductance+0x1ae>
                 break; 	//Timeout for Charging, above 0.13 s
              }
           }
        }
        TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    30d4:	10 92 81 00 	sts	0x0081, r1
        TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    30d8:	30 e2       	ldi	r19, 0x20	; 32
    30da:	36 bb       	out	0x16, r19	; 22
        tmpint = ICR1;		// get previous Input Capture Counter flag
    30dc:	80 90 86 00 	lds	r8, 0x0086
    30e0:	90 90 87 00 	lds	r9, 0x0087
      // check actual counter, if an additional overflow must be added
        if((TCNT1 > tmpint) && (ii & (1<<TOV1))) {
    30e4:	80 91 84 00 	lds	r24, 0x0084
    30e8:	90 91 85 00 	lds	r25, 0x0085
    30ec:	88 16       	cp	r8, r24
    30ee:	99 06       	cpc	r9, r25
    30f0:	30 f4       	brcc	.+12     	; 0x30fe <ReadInductance+0x1f2>
    30f2:	20 ff       	sbrs	r18, 0
    30f4:	04 c0       	rjmp	.+8      	; 0x30fe <ReadInductance+0x1f2>
           // this OV was not counted, but was before the Input Capture
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    30f6:	41 e0       	ldi	r20, 0x01	; 1
    30f8:	46 bb       	out	0x16, r20	; 22
           ov_cnt16++;
    30fa:	0f 5f       	subi	r16, 0xFF	; 255
    30fc:	1f 4f       	sbci	r17, 0xFF	; 255
        }

        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    30fe:	58 e0       	ldi	r21, 0x08	; 8
    3100:	58 b9       	out	0x08, r21	; 8
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    3102:	66 e9       	ldi	r22, 0x96	; 150
    3104:	60 93 7a 00 	sts	0x007A, r22
        for (ii=0;ii<20;ii++) {
    3108:	40 e0       	ldi	r20, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    310a:	8d 2d       	mov	r24, r13
    310c:	4c 8f       	std	Y+28, r20	; 0x1c
    310e:	0e 94 c3 1a 	call	0x3586	; 0x3586 <W10msReadADC>
    3112:	7c 01       	movw	r14, r24
            total_r =  ReadADC(HighPin);
    3114:	8a 2d       	mov	r24, r10
    3116:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    311a:	4c 8d       	ldd	r20, Y+28	; 0x1c
    311c:	72 e0       	ldi	r23, 0x02	; 2
    311e:	e7 16       	cp	r14, r23
    3120:	f1 04       	cpc	r15, r1
    3122:	18 f4       	brcc	.+6      	; 0x312a <ReadInductance+0x21e>
    3124:	82 30       	cpi	r24, 0x02	; 2
    3126:	91 05       	cpc	r25, r1
    3128:	18 f0       	brcs	.+6      	; 0x3130 <ReadInductance+0x224>
           ov_cnt16++;
        }

        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
        for (ii=0;ii<20;ii++) {
    312a:	4f 5f       	subi	r20, 0xFF	; 255
    312c:	44 31       	cpi	r20, 0x14	; 20
    312e:	69 f7       	brne	.-38     	; 0x310a <ReadInductance+0x1fe>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
//      cap.cval_uncorrected.dw = CombineII2Long(ov_cnt16, tmpint);
        cap.cval_uncorrected.w[1] = ov_cnt16;
    3130:	10 93 6a 01 	sts	0x016A, r17
    3134:	00 93 69 01 	sts	0x0169, r16
        cap.cval_uncorrected.w[0] = tmpint;
    3138:	90 92 68 01 	sts	0x0168, r9
    313c:	80 92 67 01 	sts	0x0167, r8
//  #undef CNT_ZERO_42
//  #undef CNT_ZERO_720
//  #define CNT_ZERO_42 7
//  #define CNT_ZERO_720 10
//#endif
        total_r = (mess_r + resis[found].rx + RRpinMI);
    3140:	f1 01       	movw	r30, r2
    3142:	e0 80       	ld	r14, Z
    3144:	f1 80       	ldd	r15, Z+1	; 0x01
    3146:	80 91 44 01 	lds	r24, 0x0144
    314a:	90 91 45 01 	lds	r25, 0x0145
    314e:	e8 0e       	add	r14, r24
    3150:	f9 1e       	adc	r15, r25
    3152:	e4 0c       	add	r14, r4
    3154:	f5 1c       	adc	r15, r5
//        if (total_r > 7000) cnt_diff = 1;
//        if (total_r > 14000) cnt_diff = 2;
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
        // Voltage of comparator in % of umax
     #ifdef AUTO_CAL
        tmpint = (ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset))) ;
    3156:	8e ea       	ldi	r24, 0xAE	; 174
    3158:	91 e0       	ldi	r25, 0x01	; 1
    315a:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__eerd_word_m168>
    315e:	20 91 41 01 	lds	r18, 0x0141
    3162:	30 91 42 01 	lds	r19, 0x0142
    3166:	28 0f       	add	r18, r24
    3168:	39 1f       	adc	r19, r25
     #else
        tmpint = (ref_mv + REF_C_KORR);
     #endif
        if (mess_r < R_L_VAL) {
    316a:	f0 e9       	ldi	r31, 0x90	; 144
    316c:	4f 16       	cp	r4, r31
    316e:	fa e1       	ldi	r31, 0x1A	; 26
    3170:	5f 06       	cpc	r5, r31
    3172:	f0 f4       	brcc	.+60     	; 0x31b0 <ReadInductance+0x2a4>
           // measurement without 680 Ohm
           cnt_diff = CNT_ZERO_42;
           if (cap.cval_uncorrected.dw < 225) {
    3174:	80 91 67 01 	lds	r24, 0x0167
    3178:	90 91 68 01 	lds	r25, 0x0168
    317c:	a0 91 69 01 	lds	r26, 0x0169
    3180:	b0 91 6a 01 	lds	r27, 0x016A
    3184:	81 3e       	cpi	r24, 0xE1	; 225
    3186:	91 05       	cpc	r25, r1
    3188:	a1 05       	cpc	r26, r1
    318a:	b1 05       	cpc	r27, r1
    318c:	38 f4       	brcc	.+14     	; 0x319c <ReadInductance+0x290>
              ukorr = (cap.cval_uncorrected.w[0] / 5) - 20;
    318e:	c4 01       	movw	r24, r8
    3190:	65 e0       	ldi	r22, 0x05	; 5
    3192:	70 e0       	ldi	r23, 0x00	; 0
    3194:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <__udivmodhi4>
    3198:	64 51       	subi	r22, 0x14	; 20
    319a:	01 c0       	rjmp	.+2      	; 0x319e <ReadInductance+0x292>
           } else {
              ukorr = 25;
    319c:	69 e1       	ldi	r22, 0x19	; 25
           }
           tmpint -= (((REF_L_KORR * 10) / 10) + ukorr);
    319e:	28 52       	subi	r18, 0x28	; 40
    31a0:	30 40       	sbci	r19, 0x00	; 0
    31a2:	77 27       	eor	r23, r23
    31a4:	67 fd       	sbrc	r22, 7
    31a6:	70 95       	com	r23
    31a8:	26 1b       	sub	r18, r22
    31aa:	37 0b       	sbc	r19, r23
     #else
        tmpint = (ref_mv + REF_C_KORR);
     #endif
        if (mess_r < R_L_VAL) {
           // measurement without 680 Ohm
           cnt_diff = CNT_ZERO_42;
    31ac:	66 e0       	ldi	r22, 0x06	; 6
    31ae:	08 c0       	rjmp	.+16     	; 0x31c0 <ReadInductance+0x2b4>
//#endif
        total_r = (mess_r + resis[found].rx + RRpinMI);
//        cnt_diff = 0;
//        if (total_r > 7000) cnt_diff = 1;
//        if (total_r > 14000) cnt_diff = 2;
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
    31b0:	c7 01       	movw	r24, r14
    31b2:	60 eb       	ldi	r22, 0xB0	; 176
    31b4:	76 e3       	ldi	r23, 0x36	; 54
    31b6:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <__udivmodhi4>
           }
           tmpint -= (((REF_L_KORR * 10) / 10) + ukorr);
        } else {
           // measurement with 680 Ohm resistor
           // if 680 Ohm resistor is used, use REF_L_KORR for correction
           cnt_diff += CNT_ZERO_720;
    31ba:	69 5f       	subi	r22, 0xF9	; 249
           tmpint += REF_L_KORR;
    31bc:	28 5d       	subi	r18, 0xD8	; 216
    31be:	3f 4f       	sbci	r19, 0xFF	; 255
        }
        if (cap.cval_uncorrected.dw > cnt_diff) cap.cval_uncorrected.dw -= cnt_diff;
    31c0:	60 90 67 01 	lds	r6, 0x0167
    31c4:	70 90 68 01 	lds	r7, 0x0168
    31c8:	80 90 69 01 	lds	r8, 0x0169
    31cc:	90 90 6a 01 	lds	r9, 0x016A
    31d0:	70 e0       	ldi	r23, 0x00	; 0
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	66 15       	cp	r22, r6
    31d8:	77 05       	cpc	r23, r7
    31da:	88 05       	cpc	r24, r8
    31dc:	99 05       	cpc	r25, r9
    31de:	68 f4       	brcc	.+26     	; 0x31fa <ReadInductance+0x2ee>
    31e0:	66 1a       	sub	r6, r22
    31e2:	77 0a       	sbc	r7, r23
    31e4:	88 0a       	sbc	r8, r24
    31e6:	99 0a       	sbc	r9, r25
    31e8:	60 92 67 01 	sts	0x0167, r6
    31ec:	70 92 68 01 	sts	0x0168, r7
    31f0:	80 92 69 01 	sts	0x0169, r8
    31f4:	90 92 6a 01 	sts	0x016A, r9
    31f8:	08 c0       	rjmp	.+16     	; 0x320a <ReadInductance+0x2fe>
        else          cap.cval_uncorrected.dw = 0;
    31fa:	10 92 67 01 	sts	0x0167, r1
    31fe:	10 92 68 01 	sts	0x0168, r1
    3202:	10 92 69 01 	sts	0x0169, r1
    3206:	10 92 6a 01 	sts	0x016A, r1
       
        if ((count&0x01) == 1) {
    320a:	4d 89       	ldd	r20, Y+21	; 0x15
    320c:	5e 89       	ldd	r21, Y+22	; 0x16
    320e:	41 15       	cp	r20, r1
    3210:	51 05       	cpc	r21, r1
    3212:	99 f0       	breq	.+38     	; 0x323a <ReadInductance+0x32e>
           // second pass with delayed counter start
           cap.cval_uncorrected.dw += (3 * (F_CPU/1000000))+10;
    3214:	80 91 67 01 	lds	r24, 0x0167
    3218:	90 91 68 01 	lds	r25, 0x0168
    321c:	a0 91 69 01 	lds	r26, 0x0169
    3220:	b0 91 6a 01 	lds	r27, 0x016A
    3224:	82 96       	adiw	r24, 0x22	; 34
    3226:	a1 1d       	adc	r26, r1
    3228:	b1 1d       	adc	r27, r1
    322a:	80 93 67 01 	sts	0x0167, r24
    322e:	90 93 68 01 	sts	0x0168, r25
    3232:	a0 93 69 01 	sts	0x0169, r26
    3236:	b0 93 6a 01 	sts	0x016A, r27
        }
        if (ov_cnt16 >= (F_CPU/100000)) cap.cval_uncorrected.dw = 0; // no transition found
    323a:	00 35       	cpi	r16, 0x50	; 80
    323c:	11 05       	cpc	r17, r1
    323e:	40 f0       	brcs	.+16     	; 0x3250 <ReadInductance+0x344>
    3240:	10 92 67 01 	sts	0x0167, r1
    3244:	10 92 68 01 	sts	0x0168, r1
    3248:	10 92 69 01 	sts	0x0169, r1
    324c:	10 92 6a 01 	sts	0x016A, r1
        if (cap.cval_uncorrected.dw > 10) {
    3250:	80 91 67 01 	lds	r24, 0x0167
    3254:	90 91 68 01 	lds	r25, 0x0168
    3258:	a0 91 69 01 	lds	r26, 0x0169
    325c:	b0 91 6a 01 	lds	r27, 0x016A
    3260:	8b 30       	cpi	r24, 0x0B	; 11
    3262:	91 05       	cpc	r25, r1
    3264:	a1 05       	cpc	r26, r1
    3266:	b1 05       	cpc	r27, r1
    3268:	58 f0       	brcs	.+22     	; 0x3280 <ReadInductance+0x374>
           cap.cval_uncorrected.dw -= 1;
    326a:	01 97       	sbiw	r24, 0x01	; 1
    326c:	a1 09       	sbc	r26, r1
    326e:	b1 09       	sbc	r27, r1
    3270:	80 93 67 01 	sts	0x0167, r24
    3274:	90 93 68 01 	sts	0x0168, r25
    3278:	a0 93 69 01 	sts	0x0169, r26
    327c:	b0 93 6a 01 	sts	0x016A, r27
        }
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    3280:	37 01       	movw	r6, r14
    3282:	88 24       	eor	r8, r8
    3284:	99 24       	eor	r9, r9
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    3286:	b9 01       	movw	r22, r18
    3288:	80 e0       	ldi	r24, 0x00	; 0
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	28 ee       	ldi	r18, 0xE8	; 232
    328e:	33 e0       	ldi	r19, 0x03	; 3
    3290:	40 e0       	ldi	r20, 0x00	; 0
    3292:	50 e0       	ldi	r21, 0x00	; 0
    3294:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
    3298:	7b 01       	movw	r14, r22
    329a:	8c 01       	movw	r16, r24
        if (ov_cnt16 >= (F_CPU/100000)) cap.cval_uncorrected.dw = 0; // no transition found
        if (cap.cval_uncorrected.dw > 10) {
           cap.cval_uncorrected.dw -= 1;
        }
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    329c:	b2 01       	movw	r22, r4
    329e:	80 e0       	ldi	r24, 0x00	; 0
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	20 91 3d 01 	lds	r18, 0x013D
    32a6:	30 91 3e 01 	lds	r19, 0x013E
    32aa:	40 e0       	ldi	r20, 0x00	; 0
    32ac:	50 e0       	ldi	r21, 0x00	; 0
    32ae:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
    32b2:	a4 01       	movw	r20, r8
    32b4:	93 01       	movw	r18, r6
    32b6:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    32ba:	40 e0       	ldi	r20, 0x00	; 0
    32bc:	50 e0       	ldi	r21, 0x00	; 0
    32be:	c8 01       	movw	r24, r16
    32c0:	b7 01       	movw	r22, r14
    32c2:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
//        per_ref2 = (uint8_t)MEM2_read_byte(&LogTab[per_ref1]);	// -log(1 - per_ref1/100)
        per_ref2 = get_log(per_ref1);
    32c6:	c9 01       	movw	r24, r18
    32c8:	0e 94 5d 17 	call	0x2eba	; 0x2eba <get_log>
    32cc:	8c 01       	movw	r16, r24
          }
#endif
/* ********************************************************* */
        // lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000)) + 5) / 10;
        inductance[count] = (cap.cval_uncorrected.dw * total_r ) / per_ref1;
    32ce:	20 91 67 01 	lds	r18, 0x0167
    32d2:	30 91 68 01 	lds	r19, 0x0168
    32d6:	40 91 69 01 	lds	r20, 0x0169
    32da:	50 91 6a 01 	lds	r21, 0x016A
    32de:	c4 01       	movw	r24, r8
    32e0:	b3 01       	movw	r22, r6
    32e2:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
    32e6:	3b 01       	movw	r6, r22
    32e8:	4c 01       	movw	r8, r24
             wait_about2s();
          }
#endif
/* ********************************************************* */
        // lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000)) + 5) / 10;
    32ea:	b8 01       	movw	r22, r16
    32ec:	80 e0       	ldi	r24, 0x00	; 0
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	13 e0       	ldi	r17, 0x03	; 3
    32f2:	66 0f       	add	r22, r22
    32f4:	77 1f       	adc	r23, r23
    32f6:	88 1f       	adc	r24, r24
    32f8:	99 1f       	adc	r25, r25
    32fa:	1a 95       	dec	r17
    32fc:	d1 f7       	brne	.-12     	; 0x32f2 <ReadInductance+0x3e6>
    32fe:	6b 5f       	subi	r22, 0xFB	; 251
    3300:	7f 4f       	sbci	r23, 0xFF	; 255
    3302:	8f 4f       	sbci	r24, 0xFF	; 255
    3304:	9f 4f       	sbci	r25, 0xFF	; 255
    3306:	2a e0       	ldi	r18, 0x0A	; 10
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	40 e0       	ldi	r20, 0x00	; 0
    330c:	50 e0       	ldi	r21, 0x00	; 0
    330e:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
        inductance[count] = (cap.cval_uncorrected.dw * total_r ) / per_ref1;
    3312:	40 e0       	ldi	r20, 0x00	; 0
    3314:	50 e0       	ldi	r21, 0x00	; 0
    3316:	c4 01       	movw	r24, r8
    3318:	b3 01       	movw	r22, r6
    331a:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
    331e:	eb 89       	ldd	r30, Y+19	; 0x13
    3320:	fc 89       	ldd	r31, Y+20	; 0x14
    3322:	ee 0f       	add	r30, r30
    3324:	ff 1f       	adc	r31, r31
    3326:	ee 0f       	add	r30, r30
    3328:	ff 1f       	adc	r31, r31
    332a:	61 e0       	ldi	r22, 0x01	; 1
    332c:	70 e0       	ldi	r23, 0x00	; 0
    332e:	6c 0f       	add	r22, r28
    3330:	7d 1f       	adc	r23, r29
    3332:	e6 0f       	add	r30, r22
    3334:	f7 1f       	adc	r31, r23
    3336:	20 83       	st	Z, r18
    3338:	31 83       	std	Z+1, r19	; 0x01
    333a:	42 83       	std	Z+2, r20	; 0x02
    333c:	53 83       	std	Z+3, r21	; 0x03
        if (((count&0x01) == 0) && (inductance[count] > (F_CPU/1000000))) {
    333e:	8d 89       	ldd	r24, Y+21	; 0x15
    3340:	9e 89       	ldd	r25, Y+22	; 0x16
    3342:	00 97       	sbiw	r24, 0x00	; 0
    3344:	99 f4       	brne	.+38     	; 0x336c <ReadInductance+0x460>
    3346:	29 30       	cpi	r18, 0x09	; 9
    3348:	31 05       	cpc	r19, r1
    334a:	41 05       	cpc	r20, r1
    334c:	51 05       	cpc	r21, r1
    334e:	70 f0       	brcs	.+28     	; 0x336c <ReadInductance+0x460>
           // transition is found, measurement with delayed counter start is not necessary
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
    3350:	eb 89       	ldd	r30, Y+19	; 0x13
    3352:	fc 89       	ldd	r31, Y+20	; 0x14
    3354:	31 96       	adiw	r30, 0x01	; 1
    3356:	ee 0f       	add	r30, r30
    3358:	ff 1f       	adc	r31, r31
    335a:	ee 0f       	add	r30, r30
    335c:	ff 1f       	adc	r31, r31
    335e:	e6 0f       	add	r30, r22
    3360:	f7 1f       	adc	r31, r23
    3362:	20 83       	st	Z, r18
    3364:	31 83       	std	Z+1, r19	; 0x01
    3366:	42 83       	std	Z+2, r20	; 0x02
    3368:	53 83       	std	Z+3, r21	; 0x03
           count++;		// skip the delayed measurement
    336a:	c3 94       	inc	r12
        }
        wdt_reset();
    336c:	a8 95       	wdr
  }
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 21000) continue;

     // we can check for Inductance, if resistance is below 2800 Ohm
     for (count=0;count<4;count++) {
    336e:	c3 94       	inc	r12
    3370:	9c 2d       	mov	r25, r12
    3372:	94 30       	cpi	r25, 0x04	; 4
    3374:	08 f4       	brcc	.+2      	; 0x3378 <ReadInductance+0x46c>
    3376:	16 ce       	rjmp	.-980    	; 0x2fa4 <ReadInductance+0x98>
    3378:	ab 8c       	ldd	r10, Y+27	; 0x1b
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
           count++;		// skip the delayed measurement
        }
        wdt_reset();
     }  //end for count
     ADC_PORT = TXD_VAL;		// switch ADC Port to GND
    337a:	e8 e0       	ldi	r30, 0x08	; 8
    337c:	e8 b9       	out	0x08, r30	; 8
     wait_about20ms();
    337e:	84 e0       	ldi	r24, 0x04	; 4
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>
     if (inductance[1] > inductance[0]) {
    3386:	2d 81       	ldd	r18, Y+5	; 0x05
    3388:	3e 81       	ldd	r19, Y+6	; 0x06
    338a:	4f 81       	ldd	r20, Y+7	; 0x07
    338c:	58 85       	ldd	r21, Y+8	; 0x08
    338e:	89 81       	ldd	r24, Y+1	; 0x01
    3390:	9a 81       	ldd	r25, Y+2	; 0x02
    3392:	ab 81       	ldd	r26, Y+3	; 0x03
    3394:	bc 81       	ldd	r27, Y+4	; 0x04
    3396:	82 17       	cp	r24, r18
    3398:	93 07       	cpc	r25, r19
    339a:	a4 07       	cpc	r26, r20
    339c:	b5 07       	cpc	r27, r21
    339e:	90 f4       	brcc	.+36     	; 0x33c4 <ReadInductance+0x4b8>
        resis[found].lx = inductance[1];	// use value found with delayed counter start
    33a0:	69 89       	ldd	r22, Y+17	; 0x11
    33a2:	7a 89       	ldd	r23, Y+18	; 0x12
    33a4:	8b e0       	ldi	r24, 0x0B	; 11
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	68 9f       	mul	r22, r24
    33aa:	f0 01       	movw	r30, r0
    33ac:	69 9f       	mul	r22, r25
    33ae:	f0 0d       	add	r31, r0
    33b0:	78 9f       	mul	r23, r24
    33b2:	f0 0d       	add	r31, r0
    33b4:	11 24       	eor	r1, r1
    33b6:	e8 5e       	subi	r30, 0xE8	; 232
    33b8:	fe 4f       	sbci	r31, 0xFE	; 254
    33ba:	24 83       	std	Z+4, r18	; 0x04
    33bc:	35 83       	std	Z+5, r19	; 0x05
    33be:	46 83       	std	Z+6, r20	; 0x06
    33c0:	57 83       	std	Z+7, r21	; 0x07
    33c2:	11 c0       	rjmp	.+34     	; 0x33e6 <ReadInductance+0x4da>
     } else {
        resis[found].lx = inductance[0];
    33c4:	29 89       	ldd	r18, Y+17	; 0x11
    33c6:	3a 89       	ldd	r19, Y+18	; 0x12
    33c8:	4b e0       	ldi	r20, 0x0B	; 11
    33ca:	50 e0       	ldi	r21, 0x00	; 0
    33cc:	24 9f       	mul	r18, r20
    33ce:	f0 01       	movw	r30, r0
    33d0:	25 9f       	mul	r18, r21
    33d2:	f0 0d       	add	r31, r0
    33d4:	34 9f       	mul	r19, r20
    33d6:	f0 0d       	add	r31, r0
    33d8:	11 24       	eor	r1, r1
    33da:	e8 5e       	subi	r30, 0xE8	; 232
    33dc:	fe 4f       	sbci	r31, 0xFE	; 254
    33de:	84 83       	std	Z+4, r24	; 0x04
    33e0:	95 83       	std	Z+5, r25	; 0x05
    33e2:	a6 83       	std	Z+6, r26	; 0x06
    33e4:	b7 83       	std	Z+7, r27	; 0x07
     }
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];
    33e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ea:	af 85       	ldd	r26, Y+15	; 0x0f
    33ec:	b8 89       	ldd	r27, Y+16	; 0x10
    33ee:	29 85       	ldd	r18, Y+9	; 0x09
    33f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    33f2:	4b 85       	ldd	r20, Y+11	; 0x0b
    33f4:	5c 85       	ldd	r21, Y+12	; 0x0c
    33f6:	28 17       	cp	r18, r24
    33f8:	39 07       	cpc	r19, r25
    33fa:	4a 07       	cpc	r20, r26
    33fc:	5b 07       	cpc	r21, r27
    33fe:	20 f4       	brcc	.+8      	; 0x3408 <ReadInductance+0x4fc>
    3400:	89 87       	std	Y+9, r24	; 0x09
    3402:	9a 87       	std	Y+10, r25	; 0x0a
    3404:	ab 87       	std	Y+11, r26	; 0x0b
    3406:	bc 87       	std	Y+12, r27	; 0x0c
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
    3408:	89 85       	ldd	r24, Y+9	; 0x09
    340a:	9a 85       	ldd	r25, Y+10	; 0x0a
    340c:	ab 85       	ldd	r26, Y+11	; 0x0b
    340e:	bc 85       	ldd	r27, Y+12	; 0x0c
    3410:	69 89       	ldd	r22, Y+17	; 0x11
    3412:	7a 89       	ldd	r23, Y+18	; 0x12
    3414:	2b e0       	ldi	r18, 0x0B	; 11
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	62 9f       	mul	r22, r18
    341a:	f0 01       	movw	r30, r0
    341c:	63 9f       	mul	r22, r19
    341e:	f0 0d       	add	r31, r0
    3420:	72 9f       	mul	r23, r18
    3422:	f0 0d       	add	r31, r0
    3424:	11 24       	eor	r1, r1
    3426:	e8 5e       	subi	r30, 0xE8	; 232
    3428:	fe 4f       	sbci	r31, 0xFE	; 254
    342a:	24 81       	ldd	r18, Z+4	; 0x04
    342c:	35 81       	ldd	r19, Z+5	; 0x05
    342e:	46 81       	ldd	r20, Z+6	; 0x06
    3430:	57 81       	ldd	r21, Z+7	; 0x07
    3432:	82 17       	cp	r24, r18
    3434:	93 07       	cpc	r25, r19
    3436:	a4 07       	cpc	r26, r20
    3438:	b5 07       	cpc	r27, r21
    343a:	20 f4       	brcc	.+8      	; 0x3444 <ReadInductance+0x538>
    343c:	84 83       	std	Z+4, r24	; 0x04
    343e:	95 83       	std	Z+5, r25	; 0x05
    3440:	a6 83       	std	Z+6, r26	; 0x06
    3442:	b7 83       	std	Z+7, r27	; 0x07


  if(PartFound != PART_RESISTOR) {
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
    3444:	a3 94       	inc	r10
    3446:	80 91 5b 01 	lds	r24, 0x015B
    344a:	a8 16       	cp	r10, r24
    344c:	08 f4       	brcc	.+2      	; 0x3450 <ReadInductance+0x544>
    344e:	80 cd       	rjmp	.-1280   	; 0x2f50 <ReadInductance+0x44>
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
  } // end loop for all resistors

  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    3450:	88 e0       	ldi	r24, 0x08	; 8
    3452:	87 b9       	out	0x07, r24	; 7
  R_DDR = 0;			// switch all resistor ports to input
    3454:	14 b8       	out	0x04, r1	; 4
#endif
  return;
 } // end ReadInductance()
    3456:	6c 96       	adiw	r28, 0x1c	; 28
    3458:	0f b6       	in	r0, 0x3f	; 63
    345a:	f8 94       	cli
    345c:	de bf       	out	0x3e, r29	; 62
    345e:	0f be       	out	0x3f, r0	; 63
    3460:	cd bf       	out	0x3d, r28	; 61
    3462:	cf 91       	pop	r28
    3464:	df 91       	pop	r29
    3466:	1f 91       	pop	r17
    3468:	0f 91       	pop	r16
    346a:	ff 90       	pop	r15
    346c:	ef 90       	pop	r14
    346e:	df 90       	pop	r13
    3470:	cf 90       	pop	r12
    3472:	bf 90       	pop	r11
    3474:	af 90       	pop	r10
    3476:	9f 90       	pop	r9
    3478:	8f 90       	pop	r8
    347a:	7f 90       	pop	r7
    347c:	6f 90       	pop	r6
    347e:	5f 90       	pop	r5
    3480:	4f 90       	pop	r4
    3482:	3f 90       	pop	r3
    3484:	2f 90       	pop	r2
    3486:	08 95       	ret

00003488 <ReadADC>:
  uint16_t U_AVCC;		// Voltage of AVCC
} ADCconfig;
*/


unsigned int ReadADC (uint8_t Probe) {
    3488:	df 92       	push	r13
    348a:	ef 92       	push	r14
    348c:	ff 92       	push	r15
    348e:	0f 93       	push	r16
    3490:	1f 93       	push	r17
 unsigned int U; /* return value (mV) */
 uint8_t Samples; /* loop counter */
 unsigned long Value; /* ADC value */
 Probe |= (1 << REFS0); /* use internal reference anyway */
    3492:	18 2f       	mov	r17, r24
    3494:	10 64       	ori	r17, 0x40	; 64
#ifdef INHIBIT_SLEEP_MODE
// one dummy read of ADC, 112us
    ADCSRA |= (1 << ADSC); /* start conversion */
    while (ADCSRA & (1 << ADSC)); /* wait until conversion is done */
#else
    ADCSRA = (1<<ADEN) | (1<<ADIF) | (1<<ADIE) | AUTO_CLOCK_DIV; //enable ADC and Interrupt
    3496:	0e e9       	ldi	r16, 0x9E	; 158
 unsigned long Value; /* ADC value */
 Probe |= (1 << REFS0); /* use internal reference anyway */
#ifdef AUTOSCALE_ADC
sample:
#endif
 ADMUX = Probe; /* set input channel and U reference */
    3498:	10 93 7c 00 	sts	0x007C, r17
#ifdef AUTOSCALE_ADC
 /* if voltage reference changed run a dummy conversion */
// Samples = Probe & (1 << REFS1); /* get REFS1 bit flag */
// if (Samples != ADCconfig.RefFlag) {
 if ((Probe & (1 << REFS1)) != 0) {
    349c:	17 ff       	sbrs	r17, 7
    349e:	02 c0       	rjmp	.+4      	; 0x34a4 <ReadADC+0x1c>
    // switch to 1.1V Reference
 #ifdef NO_AREF_CAP
    wait100us(); /* time for voltage stabilization */
    34a0:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <wait100us>
#ifdef INHIBIT_SLEEP_MODE
// one dummy read of ADC, 112us
    ADCSRA |= (1 << ADSC); /* start conversion */
    while (ADCSRA & (1 << ADSC)); /* wait until conversion is done */
#else
    ADCSRA = (1<<ADEN) | (1<<ADIF) | (1<<ADIE) | AUTO_CLOCK_DIV; //enable ADC and Interrupt
    34a4:	00 93 7a 00 	sts	0x007A, r16
    set_sleep_mode(SLEEP_MODE_ADC);
    34a8:	83 b7       	in	r24, 0x33	; 51
    34aa:	81 7f       	andi	r24, 0xF1	; 241
    34ac:	82 60       	ori	r24, 0x02	; 2
    34ae:	83 bf       	out	0x33, r24	; 51
    sleep_mode();	/* Start ADC, return, if ADC has finished */
    34b0:	83 b7       	in	r24, 0x33	; 51
    34b2:	81 60       	ori	r24, 0x01	; 1
    34b4:	83 bf       	out	0x33, r24	; 51
    34b6:	88 95       	sleep
    34b8:	83 b7       	in	r24, 0x33	; 51
    34ba:	8e 7f       	andi	r24, 0xFE	; 254
    34bc:	83 bf       	out	0x33, r24	; 51
#endif
 /* * sample ADC readings */
 Value = 0UL; /* reset sampling variable */
    34be:	20 e0       	ldi	r18, 0x00	; 0
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	a9 01       	movw	r20, r18
 Samples = 0; /* number of samples to take */
    34c4:	e0 e0       	ldi	r30, 0x00	; 0
 while (Samples < ADCconfig.Samples) /* take samples */ {
    34c6:	2a c0       	rjmp	.+84     	; 0x351c <ReadADC+0x94>
#ifdef INHIBIT_SLEEP_MODE
    ADCSRA |= (1 << ADSC); /* start conversion */
    while (ADCSRA & (1 << ADSC)); /* wait until conversion is done */
#else
    ADCSRA = (1<<ADEN) | (1<<ADIF) | (1<<ADIE) | AUTO_CLOCK_DIV; //enable ADC and Interrupt
    34c8:	00 93 7a 00 	sts	0x007A, r16
    set_sleep_mode(SLEEP_MODE_ADC);
    34cc:	83 b7       	in	r24, 0x33	; 51
    34ce:	81 7f       	andi	r24, 0xF1	; 241
    34d0:	82 60       	ori	r24, 0x02	; 2
    34d2:	83 bf       	out	0x33, r24	; 51
    sleep_mode();	/* Start ADC, return, if ADC has finished */
    34d4:	83 b7       	in	r24, 0x33	; 51
    34d6:	81 60       	ori	r24, 0x01	; 1
    34d8:	83 bf       	out	0x33, r24	; 51
    34da:	88 95       	sleep
    34dc:	83 b7       	in	r24, 0x33	; 51
    34de:	8e 7f       	andi	r24, 0xFE	; 254
    34e0:	83 bf       	out	0x33, r24	; 51
#endif
    Value += ADCW; /* add ADC reading */
    34e2:	60 91 78 00 	lds	r22, 0x0078
    34e6:	70 91 79 00 	lds	r23, 0x0079
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	26 0f       	add	r18, r22
    34f0:	37 1f       	adc	r19, r23
    34f2:	48 1f       	adc	r20, r24
    34f4:	59 1f       	adc	r21, r25
#ifdef AUTOSCALE_ADC
    /* auto-switch voltage reference for low readings */
    if ((Samples == 4) && (ADCconfig.U_Bandgap > 255) && ((uint16_t)Value < 1024) && !(Probe & (1 << REFS1))) {
    34f6:	e4 30       	cpi	r30, 0x04	; 4
    34f8:	81 f4       	brne	.+32     	; 0x351a <ReadADC+0x92>
    34fa:	60 91 3b 01 	lds	r22, 0x013B
    34fe:	70 91 3c 01 	lds	r23, 0x013C
    3502:	6f 3f       	cpi	r22, 0xFF	; 255
    3504:	71 05       	cpc	r23, r1
    3506:	49 f0       	breq	.+18     	; 0x351a <ReadADC+0x92>
    3508:	40 f0       	brcs	.+16     	; 0x351a <ReadADC+0x92>
    350a:	84 e0       	ldi	r24, 0x04	; 4
    350c:	20 30       	cpi	r18, 0x00	; 0
    350e:	38 07       	cpc	r19, r24
    3510:	20 f4       	brcc	.+8      	; 0x351a <ReadADC+0x92>
    3512:	17 fd       	sbrc	r17, 7
    3514:	02 c0       	rjmp	.+4      	; 0x351a <ReadADC+0x92>
       Probe |= (1 << REFS1); /* select internal bandgap reference */
    3516:	10 68       	ori	r17, 0x80	; 128
 #if PROCESSOR_TYP == 1280
       Probe &= ~(1 << REFS0);	/* ATmega640/1280/2560 1.1V Reference with REFS0=0 */
 #endif
       goto sample; /* re-run sampling */
    3518:	bf cf       	rjmp	.-130    	; 0x3498 <ReadADC+0x10>
    }
#endif
    Samples++; /* one more done */
    351a:	ef 5f       	subi	r30, 0xFF	; 255
    sleep_mode();	/* Start ADC, return, if ADC has finished */
#endif
 /* * sample ADC readings */
 Value = 0UL; /* reset sampling variable */
 Samples = 0; /* number of samples to take */
 while (Samples < ADCconfig.Samples) /* take samples */ {
    351c:	d0 90 39 01 	lds	r13, 0x0139
    3520:	ed 15       	cp	r30, r13
    3522:	90 f2       	brcs	.-92     	; 0x34c8 <ReadADC+0x40>
    Samples++; /* one more done */
 }
#ifdef AUTOSCALE_ADC
 /* * convert ADC reading to voltage * - single sample: U = ADC reading * U_ref / 1024 */
 /* get voltage of reference used */
 if (Probe & (1 << REFS1)) U = ADCconfig.U_Bandgap; /* bandgap reference */
    3524:	17 ff       	sbrs	r17, 7
    3526:	05 c0       	rjmp	.+10     	; 0x3532 <ReadADC+0xaa>
    3528:	60 91 3b 01 	lds	r22, 0x013B
    352c:	70 91 3c 01 	lds	r23, 0x013C
    3530:	04 c0       	rjmp	.+8      	; 0x353a <ReadADC+0xb2>
 else U = ADCconfig.U_AVCC; /* Vcc reference */
    3532:	60 91 3d 01 	lds	r22, 0x013D
    3536:	70 91 3e 01 	lds	r23, 0x013E
#else
 U = ADCconfig.U_AVCC; /* Vcc reference */
#endif
 /* convert to voltage; */
 Value *= U; /* ADC readings * U_ref */
    353a:	80 e0       	ldi	r24, 0x00	; 0
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
 Value /= 1023; /* / 1024 for 10bit ADC */
    3542:	2f ef       	ldi	r18, 0xFF	; 255
    3544:	33 e0       	ldi	r19, 0x03	; 3
    3546:	40 e0       	ldi	r20, 0x00	; 0
    3548:	50 e0       	ldi	r21, 0x00	; 0
    354a:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
    354e:	79 01       	movw	r14, r18
    3550:	8a 01       	movw	r16, r20
 /* de-sample to get average voltage */
 Value /= ADCconfig.Samples;
    3552:	2d 2d       	mov	r18, r13
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	40 e0       	ldi	r20, 0x00	; 0
    3558:	50 e0       	ldi	r21, 0x00	; 0
    355a:	c8 01       	movw	r24, r16
    355c:	b7 01       	movw	r22, r14
    355e:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
 U = (unsigned int)Value;
 return U;
//   return ((unsigned int)(Value / (1023 * (unsigned long)ADCconfig.Samples)));
}
    3562:	c9 01       	movw	r24, r18
    3564:	1f 91       	pop	r17
    3566:	0f 91       	pop	r16
    3568:	ff 90       	pop	r15
    356a:	ef 90       	pop	r14
    356c:	df 90       	pop	r13
    356e:	08 95       	ret

00003570 <W5msReadADC>:
unsigned int W5msReadADC (uint8_t Probe) {
    3570:	1f 93       	push	r17
    3572:	18 2f       	mov	r17, r24
  wait_about5ms();
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>
  return (ReadADC(Probe));
    357c:	81 2f       	mov	r24, r17
    357e:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
}
    3582:	1f 91       	pop	r17
    3584:	08 95       	ret

00003586 <W10msReadADC>:
unsigned int W10msReadADC (uint8_t Probe) {
    3586:	1f 93       	push	r17
    3588:	18 2f       	mov	r17, r24
  wait_about10ms();
    358a:	82 e0       	ldi	r24, 0x02	; 2
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>
  return (ReadADC(Probe));
    3592:	81 2f       	mov	r24, r17
    3594:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
}
    3598:	1f 91       	pop	r17
    359a:	08 95       	ret

0000359c <W20msReadADC>:
unsigned int W20msReadADC (uint8_t Probe) {
    359c:	1f 93       	push	r17
    359e:	18 2f       	mov	r17, r24
  wait_about20ms();
    35a0:	84 e0       	ldi	r24, 0x04	; 4
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	0e 94 a3 03 	call	0x746	; 0x746 <sleep_5ms>
  return (ReadADC(Probe));
    35a8:	81 2f       	mov	r24, r17
    35aa:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
}
    35ae:	1f 91       	pop	r17
    35b0:	08 95       	ret

000035b2 <GetESR>:
  #define StartADCwait() ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; /* enable ADC and start */\
    while (ADCSRA & (1 << ADSC))  /* wait until conversion is done */
#endif

//=================================================================
void GetESR() {
    35b2:	2f 92       	push	r2
    35b4:	3f 92       	push	r3
    35b6:	4f 92       	push	r4
    35b8:	5f 92       	push	r5
    35ba:	6f 92       	push	r6
    35bc:	7f 92       	push	r7
    35be:	8f 92       	push	r8
    35c0:	9f 92       	push	r9
    35c2:	af 92       	push	r10
    35c4:	bf 92       	push	r11
    35c6:	cf 92       	push	r12
    35c8:	df 92       	push	r13
    35ca:	ef 92       	push	r14
    35cc:	ff 92       	push	r15
    35ce:	0f 93       	push	r16
    35d0:	1f 93       	push	r17
    35d2:	df 93       	push	r29
    35d4:	cf 93       	push	r28
    35d6:	cd b7       	in	r28, 0x3d	; 61
    35d8:	de b7       	in	r29, 0x3e	; 62
    35da:	62 97       	sbiw	r28, 0x12	; 18
    35dc:	0f b6       	in	r0, 0x3f	; 63
    35de:	f8 94       	cli
    35e0:	de bf       	out	0x3e, r29	; 62
    35e2:	0f be       	out	0x3f, r0	; 63
    35e4:	cd bf       	out	0x3d, r28	; 61
#endif

   if (sumvolt[1] > sumvolt[0]) {
      sumvolt[1] -= sumvolt[0];		// difference HighPin - LowPin Voltage with current
   } else {
      sumvolt[1] = 0;
    35e6:	20 91 63 01 	lds	r18, 0x0163
    35ea:	30 91 64 01 	lds	r19, 0x0164
    35ee:	40 91 65 01 	lds	r20, 0x0165
    35f2:	50 91 66 01 	lds	r21, 0x0166
    35f6:	10 91 70 01 	lds	r17, 0x0170
  uint8_t ii,jj;		// tempory values
  uint8_t SelectLowPin,SelectHighPin;
  int8_t esr0;			// used for ESR zero correction

  while (cap.cpre_max < -9) { // set cval to nF unit
      cap.cval_max /= 10;		// reduce value by factor ten
    35fa:	6a e0       	ldi	r22, 0x0A	; 10
    35fc:	a6 2e       	mov	r10, r22
    35fe:	b1 2c       	mov	r11, r1
    3600:	c1 2c       	mov	r12, r1
    3602:	d1 2c       	mov	r13, r1
  uint8_t LoADC;		// used to switch Lowpin directly to GND or VCC
  uint8_t ii,jj;		// tempory values
  uint8_t SelectLowPin,SelectHighPin;
  int8_t esr0;			// used for ESR zero correction

  while (cap.cpre_max < -9) { // set cval to nF unit
    3604:	07 c0       	rjmp	.+14     	; 0x3614 <GetESR+0x62>
      cap.cval_max /= 10;		// reduce value by factor ten
    3606:	ca 01       	movw	r24, r20
    3608:	b9 01       	movw	r22, r18
    360a:	a6 01       	movw	r20, r12
    360c:	95 01       	movw	r18, r10
    360e:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
    3612:	1f 5f       	subi	r17, 0xFF	; 255
  uint8_t LoADC;		// used to switch Lowpin directly to GND or VCC
  uint8_t ii,jj;		// tempory values
  uint8_t SelectLowPin,SelectHighPin;
  int8_t esr0;			// used for ESR zero correction

  while (cap.cpre_max < -9) { // set cval to nF unit
    3614:	17 3f       	cpi	r17, 0xF7	; 247
    3616:	bc f3       	brlt	.-18     	; 0x3606 <GetESR+0x54>
    3618:	20 93 63 01 	sts	0x0163, r18
    361c:	30 93 64 01 	sts	0x0164, r19
    3620:	40 93 65 01 	sts	0x0165, r20
    3624:	50 93 66 01 	sts	0x0166, r21
    3628:	10 93 70 01 	sts	0x0170, r17
      cap.cval_max /= 10;		// reduce value by factor ten
      cap.cpre_max++;		// take next decimal prefix
  }
  if (cap.cval_max < 1800) return;			//capacity lower than 1.8 uF
    362c:	28 30       	cpi	r18, 0x08	; 8
    362e:	67 e0       	ldi	r22, 0x07	; 7
    3630:	36 07       	cpc	r19, r22
    3632:	60 e0       	ldi	r22, 0x00	; 0
    3634:	46 07       	cpc	r20, r22
    3636:	60 e0       	ldi	r22, 0x00	; 0
    3638:	56 07       	cpc	r21, r22
    363a:	08 f4       	brcc	.+2      	; 0x363e <GetESR+0x8c>
    363c:	d7 c1       	rjmp	.+942    	; 0x39ec <GetESR+0x43a>
  lcd_fix_string(ESR_str);		// " ESR="
    363e:	87 e2       	ldi	r24, 0x27	; 39
    3640:	91 e0       	ldi	r25, 0x01	; 1
    3642:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_fix_string>
  LoADC = MEM_read_byte(&PinADCtab[cap.ca]) | TXD_MSK;
    3646:	60 90 6d 01 	lds	r6, 0x016D
    364a:	06 2d       	mov	r16, r6
    364c:	10 e0       	ldi	r17, 0x00	; 0
    364e:	c8 01       	movw	r24, r16
    3650:	8d 55       	subi	r24, 0x5D	; 93
    3652:	9e 4f       	sbci	r25, 0xFE	; 254
    3654:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__eerd_byte_m168>
    3658:	28 e0       	ldi	r18, 0x08	; 8
    365a:	82 2e       	mov	r8, r18
    365c:	88 2a       	or	r8, r24
  HiADC = MEM_read_byte(&PinADCtab[cap.cb]) | TXD_MSK;
    365e:	b0 90 6e 01 	lds	r11, 0x016E
    3662:	eb 2c       	mov	r14, r11
    3664:	ff 24       	eor	r15, r15
    3666:	c7 01       	movw	r24, r14
    3668:	8d 55       	subi	r24, 0x5D	; 93
    366a:	9e 4f       	sbci	r25, 0xFE	; 254
    366c:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__eerd_byte_m168>
    3670:	98 e0       	ldi	r25, 0x08	; 8
    3672:	79 2e       	mov	r7, r25
    3674:	78 2a       	or	r7, r24
  LoPinR_L = MEM_read_byte(&PinRLtab[cap.ca]);  //R_L mask for LowPin R_L load
    3676:	c8 01       	movw	r24, r16
    3678:	80 56       	subi	r24, 0x60	; 96
    367a:	9e 4f       	sbci	r25, 0xFE	; 254
    367c:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__eerd_byte_m168>
    3680:	98 2e       	mov	r9, r24
  HiPinR_L = MEM_read_byte(&PinRLtab[cap.cb]);	//R_L mask for HighPin R_L load
    3682:	c7 01       	movw	r24, r14
    3684:	80 56       	subi	r24, 0x60	; 96
    3686:	9e 4f       	sbci	r25, 0xFE	; 254
    3688:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__eerd_byte_m168>
    368c:	c8 2e       	mov	r12, r24
#if PROCESSOR_TYP == 1280
    /* ATmega640/1280/2560 1.1V Reference with REFS0=0 */
  SelectLowPin = (cap.ca | (1<<REFS1) | (0<<REFS0));	// switch ADC to LowPin, Internal Ref. 
  SelectHighPin = (cap.cb | (1<<REFS1) | (0<<REFS0));	// switch ADC to HighPin, Internal Ref. 
#else
  SelectLowPin = (cap.ca | (1<<REFS1) | (1<<REFS0));	// switch ADC to LowPin, Internal Ref. 
    368e:	70 ec       	ldi	r23, 0xC0	; 192
    3690:	67 2a       	or	r6, r23
  SelectHighPin = (cap.cb | (1<<REFS1) | (1<<REFS0));	// switch ADC to HighPin, Internal Ref. 
    3692:	b7 2a       	or	r11, r23
// Measurement of ESR of capacitors AC Mode
   sumvolt[0] = 1;		// set sum of LowPin voltage to 1 to prevent divide by zero
   sumvolt[1] = 1;		// clear sum of HighPin voltage with current
                                // offset is about (x*10*200)/34000 in 0.01 Ohm units
   sumvolt[2] = 0;		// clear sum of HighPin voltage without current
   EntladePins();		// discharge capacitor
    3694:	0e 94 b4 01 	call	0x368	; 0x368 <EntladePins>
   ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    3698:	88 e0       	ldi	r24, 0x08	; 8
    369a:	88 b9       	out	0x08, r24	; 8
   ADMUX = SelectLowPin;	// set Mux input and Voltage Reference to internal 1.1V
    369c:	60 92 7c 00 	sts	0x007C, r6
#ifdef NO_AREF_CAP
   wait100us();			/* time for voltage stabilization */
    36a0:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <wait100us>
  SelectHighPin = (cap.cb | (1<<REFS1) | (1<<REFS0));	// switch ADC to HighPin, Internal Ref. 
#endif


// Measurement of ESR of capacitors AC Mode
   sumvolt[0] = 1;		// set sum of LowPin voltage to 1 to prevent divide by zero
    36a4:	b1 e0       	ldi	r27, 0x01	; 1
    36a6:	eb 2e       	mov	r14, r27
    36a8:	f1 2c       	mov	r15, r1
    36aa:	01 2d       	mov	r16, r1
    36ac:	11 2d       	mov	r17, r1
   sumvolt[1] = 1;		// clear sum of HighPin voltage with current
    36ae:	81 e0       	ldi	r24, 0x01	; 1
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	a0 e0       	ldi	r26, 0x00	; 0
    36b4:	b0 e0       	ldi	r27, 0x00	; 0
    36b6:	89 83       	std	Y+1, r24	; 0x01
    36b8:	9a 83       	std	Y+2, r25	; 0x02
    36ba:	ab 83       	std	Y+3, r26	; 0x03
    36bc:	bc 83       	std	Y+4, r27	; 0x04
                                // offset is about (x*10*200)/34000 in 0.01 Ohm units
   sumvolt[2] = 0;		// clear sum of HighPin voltage without current
    36be:	1d 82       	std	Y+5, r1	; 0x05
    36c0:	1e 82       	std	Y+6, r1	; 0x06
    36c2:	1f 82       	std	Y+7, r1	; 0x07
    36c4:	18 86       	std	Y+8, r1	; 0x08
#endif

// measurement frequency is given by sum of ADC-Reads < 680 Hz
   // ADC Sample and Hold (SH) is done 1.5 ADC clock number after real start of conversion.
   // Real ADC-conversion is started with the next ADC-Clock (125kHz) after setting the ADSC bit.
   for(ii=0;ii<MAX_CNT;ii++) {
    36c6:	dd 24       	eor	r13, r13
      ADC_DDR = LoADC;				// switch Low-Pin to output (GND)
      ADMUX = SelectLowPin;
      StartADCwait();				// set ADCSRA Interrupt Mode, sleep
    36c8:	a6 ed       	ldi	r26, 0xD6	; 214
    36ca:	aa 2e       	mov	r10, r26

// measurement frequency is given by sum of ADC-Reads < 680 Hz
   // ADC Sample and Hold (SH) is done 1.5 ADC clock number after real start of conversion.
   // Real ADC-conversion is started with the next ADC-Clock (125kHz) after setting the ADSC bit.
   for(ii=0;ii<MAX_CNT;ii++) {
      ADC_DDR = LoADC;				// switch Low-Pin to output (GND)
    36cc:	87 b8       	out	0x07, r8	; 7
      ADMUX = SelectLowPin;
    36ce:	60 92 7c 00 	sts	0x007C, r6
      StartADCwait();				// set ADCSRA Interrupt Mode, sleep
    36d2:	a0 92 7a 00 	sts	0x007A, r10
    36d6:	80 91 7a 00 	lds	r24, 0x007A
    36da:	86 fd       	sbrc	r24, 6
    36dc:	fc cf       	rjmp	.-8      	; 0x36d6 <GetESR+0x124>
      while (1) {
         R_PORT = HiPinR_L;			// switch R-Port to VCC
    36de:	c5 b8       	out	0x05, r12	; 5
         R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (VCC)
    36e0:	c4 b8       	out	0x04, r12	; 4
         ADMUX = SelectLowPin;
    36e2:	60 92 7c 00 	sts	0x007C, r6
         StartADCwait();			// set ADCSRA Interrupt Mode, sleep
    36e6:	a0 92 7a 00 	sts	0x007A, r10
    36ea:	80 91 7a 00 	lds	r24, 0x007A
    36ee:	86 fd       	sbrc	r24, 6
    36f0:	fc cf       	rjmp	.-8      	; 0x36ea <GetESR+0x138>
         StartADCwait();			// set ADCSRA Interrupt Mode, sleep
    36f2:	a0 92 7a 00 	sts	0x007A, r10
    36f6:	80 91 7a 00 	lds	r24, 0x007A
    36fa:	86 fd       	sbrc	r24, 6
    36fc:	fc cf       	rjmp	.-8      	; 0x36f6 <GetESR+0x144>
         adcv[0] = ADCW;			// Voltage LowPin with current
    36fe:	20 90 78 00 	lds	r2, 0x0078
    3702:	30 90 79 00 	lds	r3, 0x0079
         ADMUX = SelectHighPin;
    3706:	b0 92 7c 00 	sts	0x007C, r11
         StartADCwait();			// ADCSRA = (1<<ADEN) | (1<<ADIF) | (1<<ADIE) | AUTO_CLOCK_DIV;	
    370a:	a0 92 7a 00 	sts	0x007A, r10
    370e:	80 91 7a 00 	lds	r24, 0x007A
    3712:	86 fd       	sbrc	r24, 6
    3714:	fc cf       	rjmp	.-8      	; 0x370e <GetESR+0x15c>
//         ADCSRA |= (1<<ADSC);			// Start Conversion, real start is next rising edge of ADC clock
         ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; // enable ADC and start with ADSC
    3716:	a0 92 7a 00 	sts	0x007A, r10
         wait10us();				// SH at 2.5 ADC clocks behind start = 20 us
    371a:	0e 94 ff 13 	call	0x27fe	; 0x27fe <wait10us>
         wait5us();			
    371e:	0e 94 00 14 	call	0x2800	; 0x2800 <wait5us>
         wdt_reset();	/* 20.1875us + */
         wdt_reset();	/* 20.250 us + */
 #endif
#else
 #if F_CPU == 8000000UL
         wait4us();				// with only 18 us delay the voltage goes down before SH
    3722:	0e 94 01 14 	call	0x2802	; 0x2802 <wait4us>
//         wdt_reset();	/* 19.75  us - */
//         wdt_reset();	/* 19.875 us - */
//         wdt_reset();	/* 20.0   us - */
//         wdt_reset();	/* 20.125 us + (1.1 , 0.63) */
//         wdt_reset();	/* 20.25  us + (1.0 , 0.60) */
           wdt_reset(); /* 20.375 us + */
    3726:	a8 95       	wdr
#endif
//         wdt_reset();				// with wdt_reset the timing can be adjusted,
						// when time is too short, voltage is down before SH of ADC
						// when time is too long, capacitor will be overloaded.
						// That will cause too high voltage without current.
         R_DDR = 0;				// switch current off,  SH is 1.5 ADC clock behind real start
    3728:	14 b8       	out	0x04, r1	; 4
         R_PORT = 0;
    372a:	15 b8       	out	0x05, r1	; 5
         while (ADCSRA&(1<<ADSC));		// wait for conversion finished
    372c:	80 91 7a 00 	lds	r24, 0x007A
    3730:	86 fd       	sbrc	r24, 6
    3732:	fc cf       	rjmp	.-8      	; 0x372c <GetESR+0x17a>
         adcv[1] = ADCW;			// Voltage HighPin with current
    3734:	20 91 78 00 	lds	r18, 0x0078
    3738:	30 91 79 00 	lds	r19, 0x0079
         StartADCwait();			// set ADCSRA Interrupt Mode, sleep
    373c:	a0 92 7a 00 	sts	0x007A, r10
    3740:	80 91 7a 00 	lds	r24, 0x007A
    3744:	86 fd       	sbrc	r24, 6
    3746:	fc cf       	rjmp	.-8      	; 0x3740 <GetESR+0x18e>
         StartADCwait();			// set ADCSRA Interrupt Mode, sleep
    3748:	a0 92 7a 00 	sts	0x007A, r10
    374c:	80 91 7a 00 	lds	r24, 0x007A
    3750:	86 fd       	sbrc	r24, 6
    3752:	fc cf       	rjmp	.-8      	; 0x374c <GetESR+0x19a>
         adcv[2] = ADCW;			// Voltage HighPin without current
    3754:	80 91 78 00 	lds	r24, 0x0078
    3758:	90 91 79 00 	lds	r25, 0x0079
         if (adcv[2] > 2) break;		// at least more than two digits required
    375c:	83 30       	cpi	r24, 0x03	; 3
    375e:	91 05       	cpc	r25, r1
    3760:	10 f4       	brcc	.+4      	; 0x3766 <GetESR+0x1b4>
         wdt_reset();
    3762:	a8 95       	wdr
      } // end while (1)
    3764:	bc cf       	rjmp	.-136    	; 0x36de <GetESR+0x12c>
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
    3766:	44 24       	eor	r4, r4
    3768:	55 24       	eor	r5, r5
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    376a:	a9 01       	movw	r20, r18
    376c:	60 e0       	ldi	r22, 0x00	; 0
    376e:	70 e0       	ldi	r23, 0x00	; 0
    3770:	49 87       	std	Y+9, r20	; 0x09
    3772:	5a 87       	std	Y+10, r21	; 0x0a
    3774:	6b 87       	std	Y+11, r22	; 0x0b
    3776:	7c 87       	std	Y+12, r23	; 0x0c
      sumvolt[2] += adcv[2]; 			// capacitor voltage without current
    3778:	9c 01       	movw	r18, r24
    377a:	40 e0       	ldi	r20, 0x00	; 0
    377c:	50 e0       	ldi	r21, 0x00	; 0
    377e:	2d 87       	std	Y+13, r18	; 0x0d
    3780:	3e 87       	std	Y+14, r19	; 0x0e
    3782:	4f 87       	std	Y+15, r20	; 0x0f
    3784:	58 8b       	std	Y+16, r21	; 0x10
      /* ********* Reverse direction, connect High side with GND *********** */
      ADC_DDR = HiADC;				// switch High Pin to GND
    3786:	77 b8       	out	0x07, r7	; 7
      StartADCwait();				// set ADCSRA Interrupt Mode, sleep
    3788:	a0 92 7a 00 	sts	0x007A, r10
    378c:	80 91 7a 00 	lds	r24, 0x007A
    3790:	86 fd       	sbrc	r24, 6
    3792:	fc cf       	rjmp	.-8      	; 0x378c <GetESR+0x1da>
      while (1) {
         R_PORT = LoPinR_L;
    3794:	95 b8       	out	0x05, r9	; 5
         R_DDR = LoPinR_L;			// switch LowPin with 680 Ohm to VCC
    3796:	94 b8       	out	0x04, r9	; 4
         wdt_reset();
    3798:	a8 95       	wdr
         ADMUX = SelectHighPin;
    379a:	b0 92 7c 00 	sts	0x007C, r11
         StartADCwait();			// set ADCSRA Interrupt Mode, sleep
    379e:	a0 92 7a 00 	sts	0x007A, r10
    37a2:	80 91 7a 00 	lds	r24, 0x007A
    37a6:	86 fd       	sbrc	r24, 6
    37a8:	fc cf       	rjmp	.-8      	; 0x37a2 <GetESR+0x1f0>
         StartADCwait();			// set ADCSRA Interrupt Mode, sleep
    37aa:	a0 92 7a 00 	sts	0x007A, r10
    37ae:	80 91 7a 00 	lds	r24, 0x007A
    37b2:	86 fd       	sbrc	r24, 6
    37b4:	fc cf       	rjmp	.-8      	; 0x37ae <GetESR+0x1fc>
         adcv[0] = ADCW;			// Voltage HighPin with current
    37b6:	80 91 78 00 	lds	r24, 0x0078
    37ba:	90 91 79 00 	lds	r25, 0x0079
         ADMUX = SelectLowPin;
    37be:	60 92 7c 00 	sts	0x007C, r6
         StartADCwait();			// set ADCSRA Interrupt Mode, sleep
    37c2:	a0 92 7a 00 	sts	0x007A, r10
    37c6:	9c 01       	movw	r18, r24
    37c8:	80 91 7a 00 	lds	r24, 0x007A
    37cc:	86 fd       	sbrc	r24, 6
    37ce:	fc cf       	rjmp	.-8      	; 0x37c8 <GetESR+0x216>
    37d0:	c9 01       	movw	r24, r18
//         ADCSRA |= (1<<ADSC);			// Start Conversion, real start is next rising edge of ADC clock
         ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; // enable ADC and start with ADSC
    37d2:	a0 92 7a 00 	sts	0x007A, r10
         wait10us();				// 2.5 ADC clocks = 20 us
    37d6:	29 8b       	std	Y+17, r18	; 0x11
    37d8:	9a 8b       	std	Y+18, r25	; 0x12
    37da:	0e 94 ff 13 	call	0x27fe	; 0x27fe <wait10us>
         wait5us();			
    37de:	0e 94 00 14 	call	0x2800	; 0x2800 <wait5us>
         wdt_reset();	/* 20.1875us + */
         wdt_reset();	/* 20.250 us + */
 #endif
#else
 #if F_CPU == 8000000UL
         wait4us();				// with only 18 us delay the voltage goes down before SH
    37e2:	0e 94 01 14 	call	0x2802	; 0x2802 <wait4us>
//         wdt_reset();	/* 19.75  us - */
//         wdt_reset();	/* 19.875 us - */
//         wdt_reset();	/* 20.0   us - */
//         wdt_reset();	/* 20.125 us + */
//         wdt_reset();	/* 20.25  us + */
           wdt_reset(); /* 20.375 us + */
    37e6:	a8 95       	wdr
#endif
//         wdt_reset();				// with wdt_reset the timing can be adjusted,
						// when time is too short, voltage is down before SH of ADC
						// when time is too long, capacitor will be overloaded.
						// That will cause too high voltage without current.
         R_DDR = 0;				// switch current off, SH is 1.5 ADC clock ticks behind real start
    37e8:	14 b8       	out	0x04, r1	; 4
         R_PORT = 0;
    37ea:	15 b8       	out	0x05, r1	; 5
    37ec:	89 89       	ldd	r24, Y+17	; 0x11
    37ee:	9a 89       	ldd	r25, Y+18	; 0x12
    37f0:	9c 01       	movw	r18, r24
         while (ADCSRA&(1<<ADSC));		// wait for conversion finished
    37f2:	80 91 7a 00 	lds	r24, 0x007A
    37f6:	86 fd       	sbrc	r24, 6
    37f8:	fc cf       	rjmp	.-8      	; 0x37f2 <GetESR+0x240>
         adcv[1] = ADCW;			//  Voltage LowPin with current
    37fa:	40 91 78 00 	lds	r20, 0x0078
    37fe:	50 91 79 00 	lds	r21, 0x0079
//          ADMUX = SelectLowPin;
         StartADCwait();			// set ADCSRA Interrupt Mode, sleep
    3802:	a0 92 7a 00 	sts	0x007A, r10
    3806:	80 91 7a 00 	lds	r24, 0x007A
    380a:	86 fd       	sbrc	r24, 6
    380c:	fc cf       	rjmp	.-8      	; 0x3806 <GetESR+0x254>
         StartADCwait();			// set ADCSRA Interrupt Mode, sleep
    380e:	a0 92 7a 00 	sts	0x007A, r10
    3812:	80 91 7a 00 	lds	r24, 0x007A
    3816:	86 fd       	sbrc	r24, 6
    3818:	fc cf       	rjmp	.-8      	; 0x3812 <GetESR+0x260>
    381a:	c9 01       	movw	r24, r18
         adcv[2] = ADCW;			// Voltage LowPin without current
    381c:	20 91 78 00 	lds	r18, 0x0078
    3820:	30 91 79 00 	lds	r19, 0x0079
         if (adcv[2] > 2) break;		// at least more than two digits required
    3824:	23 30       	cpi	r18, 0x03	; 3
    3826:	31 05       	cpc	r19, r1
    3828:	10 f4       	brcc	.+4      	; 0x382e <GetESR+0x27c>
         wdt_reset();
    382a:	a8 95       	wdr
      } // end while (1)
    382c:	b3 cf       	rjmp	.-154    	; 0x3794 <GetESR+0x1e2>
      R_DDR = 0;				// switch current off
    382e:	14 b8       	out	0x04, r1	; 4
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
    3830:	a0 e0       	ldi	r26, 0x00	; 0
    3832:	b0 e0       	ldi	r27, 0x00	; 0
         StartADCwait();			// set ADCSRA Interrupt Mode, sleep
         adcv[2] = ADCW;			// Voltage HighPin without current
         if (adcv[2] > 2) break;		// at least more than two digits required
         wdt_reset();
      } // end while (1)
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
    3834:	82 0d       	add	r24, r2
    3836:	93 1d       	adc	r25, r3
    3838:	a4 1d       	adc	r26, r4
    383a:	b5 1d       	adc	r27, r5
         adcv[2] = ADCW;			// Voltage LowPin without current
         if (adcv[2] > 2) break;		// at least more than two digits required
         wdt_reset();
      } // end while (1)
      R_DDR = 0;				// switch current off
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
    383c:	e8 0e       	add	r14, r24
    383e:	f9 1e       	adc	r15, r25
    3840:	0a 1f       	adc	r16, r26
    3842:	1b 1f       	adc	r17, r27
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    3844:	ca 01       	movw	r24, r20
    3846:	a0 e0       	ldi	r26, 0x00	; 0
    3848:	b0 e0       	ldi	r27, 0x00	; 0
         adcv[2] = ADCW;			// Voltage HighPin without current
         if (adcv[2] > 2) break;		// at least more than two digits required
         wdt_reset();
      } // end while (1)
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    384a:	49 85       	ldd	r20, Y+9	; 0x09
    384c:	5a 85       	ldd	r21, Y+10	; 0x0a
    384e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3850:	7c 85       	ldd	r23, Y+12	; 0x0c
    3852:	84 0f       	add	r24, r20
    3854:	95 1f       	adc	r25, r21
    3856:	a6 1f       	adc	r26, r22
    3858:	b7 1f       	adc	r27, r23
         if (adcv[2] > 2) break;		// at least more than two digits required
         wdt_reset();
      } // end while (1)
      R_DDR = 0;				// switch current off
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    385a:	49 81       	ldd	r20, Y+1	; 0x01
    385c:	5a 81       	ldd	r21, Y+2	; 0x02
    385e:	6b 81       	ldd	r22, Y+3	; 0x03
    3860:	7c 81       	ldd	r23, Y+4	; 0x04
    3862:	48 0f       	add	r20, r24
    3864:	59 1f       	adc	r21, r25
    3866:	6a 1f       	adc	r22, r26
    3868:	7b 1f       	adc	r23, r27
    386a:	49 83       	std	Y+1, r20	; 0x01
    386c:	5a 83       	std	Y+2, r21	; 0x02
    386e:	6b 83       	std	Y+3, r22	; 0x03
    3870:	7c 83       	std	Y+4, r23	; 0x04
      sumvolt[2] += adcv[2];			// add  HighPin voltages without current
    3872:	c9 01       	movw	r24, r18
    3874:	a0 e0       	ldi	r26, 0x00	; 0
    3876:	b0 e0       	ldi	r27, 0x00	; 0
         if (adcv[2] > 2) break;		// at least more than two digits required
         wdt_reset();
      } // end while (1)
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
      sumvolt[2] += adcv[2]; 			// capacitor voltage without current
    3878:	2d 85       	ldd	r18, Y+13	; 0x0d
    387a:	3e 85       	ldd	r19, Y+14	; 0x0e
    387c:	4f 85       	ldd	r20, Y+15	; 0x0f
    387e:	58 89       	ldd	r21, Y+16	; 0x10
    3880:	82 0f       	add	r24, r18
    3882:	93 1f       	adc	r25, r19
    3884:	a4 1f       	adc	r26, r20
    3886:	b5 1f       	adc	r27, r21
         wdt_reset();
      } // end while (1)
      R_DDR = 0;				// switch current off
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
      sumvolt[2] += adcv[2];			// add  HighPin voltages without current
    3888:	4d 81       	ldd	r20, Y+5	; 0x05
    388a:	5e 81       	ldd	r21, Y+6	; 0x06
    388c:	6f 81       	ldd	r22, Y+7	; 0x07
    388e:	78 85       	ldd	r23, Y+8	; 0x08
    3890:	48 0f       	add	r20, r24
    3892:	59 1f       	adc	r21, r25
    3894:	6a 1f       	adc	r22, r26
    3896:	7b 1f       	adc	r23, r27
    3898:	4d 83       	std	Y+5, r20	; 0x05
    389a:	5e 83       	std	Y+6, r21	; 0x06
    389c:	6f 83       	std	Y+7, r22	; 0x07
    389e:	78 87       	std	Y+8, r23	; 0x08
#endif

// measurement frequency is given by sum of ADC-Reads < 680 Hz
   // ADC Sample and Hold (SH) is done 1.5 ADC clock number after real start of conversion.
   // Real ADC-conversion is started with the next ADC-Clock (125kHz) after setting the ADSC bit.
   for(ii=0;ii<MAX_CNT;ii++) {
    38a0:	d3 94       	inc	r13
    38a2:	5d 2d       	mov	r21, r13
    38a4:	50 38       	cpi	r21, 0x80	; 128
    38a6:	09 f0       	breq	.+2      	; 0x38aa <GetESR+0x2f8>
    38a8:	11 cf       	rjmp	.-478    	; 0x36cc <GetESR+0x11a>
   // HighPin Voltage, which is usually 2 * 14 * 8 us = 224 us.
   // With the loading of the capacitor the current will sink, so we get a too high voltage at
   // the LowPin. The velocity of degration is inversely proportional to time constant (represented by capacity value).
   // Time constant for 1uF & 720 Ohm is 720us
//   sumvolt[0] -= (sumvolt[0] * 150UL)  / cap.cval_max;	// Version 1.04k
   sumvolt[0] -= (sumvolt[0] * 345UL)  / cap.cval_max;
    38aa:	c8 01       	movw	r24, r16
    38ac:	b7 01       	movw	r22, r14
    38ae:	29 e5       	ldi	r18, 0x59	; 89
    38b0:	31 e0       	ldi	r19, 0x01	; 1
    38b2:	40 e0       	ldi	r20, 0x00	; 0
    38b4:	50 e0       	ldi	r21, 0x00	; 0
    38b6:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
    38ba:	20 91 63 01 	lds	r18, 0x0163
    38be:	30 91 64 01 	lds	r19, 0x0164
    38c2:	40 91 65 01 	lds	r20, 0x0165
    38c6:	50 91 66 01 	lds	r21, 0x0166
    38ca:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
    38ce:	37 01       	movw	r6, r14
    38d0:	48 01       	movw	r8, r16
    38d2:	62 1a       	sub	r6, r18
    38d4:	73 0a       	sbc	r7, r19
    38d6:	84 0a       	sbc	r8, r20
    38d8:	95 0a       	sbc	r9, r21
   lcd_line3();
   DisplayValue(sumvolt[1],0,'H',4);	// HighPin
   lcd_data(' ');
#endif

   esr0 = (int8_t)eeprom_read_byte(&EE_ESR_ZERO);
    38da:	87 eb       	ldi	r24, 0xB7	; 183
    38dc:	91 e0       	ldi	r25, 0x01	; 1
    38de:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__eerd_byte_m168>
    38e2:	28 2e       	mov	r2, r24
//   sumvolt[0] += (((long)sumvolt[0] * esr0) / (RRpinMI * 10)); // subtract 0.23 Ohm from ESR, Vers. 1.04k
   sumvolt[2] += (((long)sumvolt[0] * esr0) / (RRpinMI * 10)); // subtract 0.23 Ohm from ESR
    38e4:	40 90 44 01 	lds	r4, 0x0144
    38e8:	50 90 45 01 	lds	r5, 0x0145
    38ec:	68 2f       	mov	r22, r24
    38ee:	77 27       	eor	r23, r23
    38f0:	67 fd       	sbrc	r22, 7
    38f2:	70 95       	com	r23
    38f4:	87 2f       	mov	r24, r23
    38f6:	97 2f       	mov	r25, r23
    38f8:	a4 01       	movw	r20, r8
    38fa:	93 01       	movw	r18, r6
    38fc:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
    3900:	92 01       	movw	r18, r4
    3902:	22 0f       	add	r18, r18
    3904:	33 1f       	adc	r19, r19
    3906:	a2 01       	movw	r20, r4
    3908:	e3 e0       	ldi	r30, 0x03	; 3
    390a:	44 0f       	add	r20, r20
    390c:	55 1f       	adc	r21, r21
    390e:	ea 95       	dec	r30
    3910:	e1 f7       	brne	.-8      	; 0x390a <GetESR+0x358>
    3912:	24 0f       	add	r18, r20
    3914:	35 1f       	adc	r19, r21
    3916:	40 e0       	ldi	r20, 0x00	; 0
    3918:	50 e0       	ldi	r21, 0x00	; 0
    391a:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <__divmodsi4>
    391e:	79 01       	movw	r14, r18
    3920:	8a 01       	movw	r16, r20
    3922:	6d 81       	ldd	r22, Y+5	; 0x05
    3924:	7e 81       	ldd	r23, Y+6	; 0x06
    3926:	8f 81       	ldd	r24, Y+7	; 0x07
    3928:	98 85       	ldd	r25, Y+8	; 0x08
    392a:	e6 0e       	add	r14, r22
    392c:	f7 1e       	adc	r15, r23
    392e:	08 1f       	adc	r16, r24
    3930:	19 1f       	adc	r17, r25

#ifdef ESR_DEBUG
   DisplayValue(sumvolt[0],0,'C',4);	// Lowpin corrected
#endif

   if (sumvolt[1] > sumvolt[0]) {
    3932:	89 81       	ldd	r24, Y+1	; 0x01
    3934:	9a 81       	ldd	r25, Y+2	; 0x02
    3936:	ab 81       	ldd	r26, Y+3	; 0x03
    3938:	bc 81       	ldd	r27, Y+4	; 0x04
    393a:	68 16       	cp	r6, r24
    393c:	79 06       	cpc	r7, r25
    393e:	8a 06       	cpc	r8, r26
    3940:	9b 06       	cpc	r9, r27
    3942:	38 f4       	brcc	.+14     	; 0x3952 <GetESR+0x3a0>
      sumvolt[1] -= sumvolt[0];		// difference HighPin - LowPin Voltage with current
    3944:	5c 01       	movw	r10, r24
    3946:	6d 01       	movw	r12, r26
    3948:	a6 18       	sub	r10, r6
    394a:	b7 08       	sbc	r11, r7
    394c:	c8 08       	sbc	r12, r8
    394e:	d9 08       	sbc	r13, r9
    3950:	03 c0       	rjmp	.+6      	; 0x3958 <GetESR+0x3a6>
   } else {
      sumvolt[1] = 0;
    3952:	aa 24       	eor	r10, r10
    3954:	bb 24       	eor	r11, r11
    3956:	65 01       	movw	r12, r10
    3958:	b2 01       	movw	r22, r4
    395a:	80 e0       	ldi	r24, 0x00	; 0
    395c:	90 e0       	ldi	r25, 0x00	; 0
#ifdef ESR_DEBUG
   DisplayValue(sumvolt[2],0,' ',4);	// HighPin without current
#endif

   jj = 0;
   if (sumvolt[1] >= sumvolt[2]) {
    395e:	ae 14       	cp	r10, r14
    3960:	bf 04       	cpc	r11, r15
    3962:	c0 06       	cpc	r12, r16
    3964:	d1 06       	cpc	r13, r17
    3966:	f8 f0       	brcs	.+62     	; 0x39a6 <GetESR+0x3f4>
      // mean voltage at the capacitor is higher with current
      // sumvolt[0] is the sum of voltages at LowPin, caused by output resistance of Port
      // RRpinMI is the port output resistance in 0.1 Ohm units.
      // we scale up the difference voltage with 10 to get 0.01 Ohm units of ESR
      cap.esr = ((sumvolt[1] - sumvolt[2]) * 10 * (unsigned long)RRpinMI) / sumvolt[0];
    3968:	2a e0       	ldi	r18, 0x0A	; 10
    396a:	30 e0       	ldi	r19, 0x00	; 0
    396c:	40 e0       	ldi	r20, 0x00	; 0
    396e:	50 e0       	ldi	r21, 0x00	; 0
    3970:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
    3974:	a6 01       	movw	r20, r12
    3976:	95 01       	movw	r18, r10
    3978:	2e 19       	sub	r18, r14
    397a:	3f 09       	sbc	r19, r15
    397c:	40 0b       	sbc	r20, r16
    397e:	51 0b       	sbc	r21, r17
    3980:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
    3984:	a4 01       	movw	r20, r8
    3986:	93 01       	movw	r18, r6
    3988:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
    398c:	30 93 6c 01 	sts	0x016C, r19
    3990:	20 93 6b 01 	sts	0x016B, r18
      DisplayValue(cap.esr,-2,LCD_CHAR_OMEGA,2);
    3994:	b9 01       	movw	r22, r18
    3996:	80 e0       	ldi	r24, 0x00	; 0
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	4e ef       	ldi	r20, 0xFE	; 254
    399c:	24 ef       	ldi	r18, 0xF4	; 244
    399e:	02 e0       	ldi	r16, 0x02	; 2
    39a0:	0e 94 a7 02 	call	0x54e	; 0x54e <DisplayValue>
    39a4:	23 c0       	rjmp	.+70     	; 0x39ec <GetESR+0x43a>
   } else {
      jj = ((sumvolt[2] - sumvolt[1]) * 10 * (unsigned long)RRpinMI) / sumvolt[0];
    39a6:	2a e0       	ldi	r18, 0x0A	; 10
    39a8:	30 e0       	ldi	r19, 0x00	; 0
    39aa:	40 e0       	ldi	r20, 0x00	; 0
    39ac:	50 e0       	ldi	r21, 0x00	; 0
    39ae:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
    39b2:	a8 01       	movw	r20, r16
    39b4:	97 01       	movw	r18, r14
    39b6:	2a 19       	sub	r18, r10
    39b8:	3b 09       	sbc	r19, r11
    39ba:	4c 09       	sbc	r20, r12
    39bc:	5d 09       	sbc	r21, r13
    39be:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
    39c2:	a4 01       	movw	r20, r8
    39c4:	93 01       	movw	r18, r6
    39c6:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
    39ca:	12 2f       	mov	r17, r18
      lcd_data('0');
    39cc:	80 e3       	ldi	r24, 0x30	; 48
    39ce:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
      if ((jj < 100) && (jj > 0)) {
    39d2:	81 2f       	mov	r24, r17
    39d4:	81 50       	subi	r24, 0x01	; 1
    39d6:	83 36       	cpi	r24, 0x63	; 99
    39d8:	48 f4       	brcc	.+18     	; 0x39ec <GetESR+0x43a>
         lcd_data('?');			// mark ESR zero correction
    39da:	8f e3       	ldi	r24, 0x3F	; 63
    39dc:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_data>
         esr0 -= jj;			// correct ESR_ZERO by negative resistance
    39e0:	62 2d       	mov	r22, r2
    39e2:	61 1b       	sub	r22, r17
         eeprom_write_byte((uint8_t *)(&EE_ESR_ZERO), (int8_t)esr0);       // fix new zero offset 
    39e4:	87 eb       	ldi	r24, 0xB7	; 183
    39e6:	91 e0       	ldi	r25, 0x01	; 1
    39e8:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__eewr_byte_m168>
//   lcd_line3();
//   DisplayValue(jj,0,' ',4);	// correction for ESR_ZERO
//   DisplayValue(1000+esr0,0,' ',4);	// new ESR_ZERO
#endif
  return;
}
    39ec:	62 96       	adiw	r28, 0x12	; 18
    39ee:	0f b6       	in	r0, 0x3f	; 63
    39f0:	f8 94       	cli
    39f2:	de bf       	out	0x3e, r29	; 62
    39f4:	0f be       	out	0x3f, r0	; 63
    39f6:	cd bf       	out	0x3d, r28	; 61
    39f8:	cf 91       	pop	r28
    39fa:	df 91       	pop	r29
    39fc:	1f 91       	pop	r17
    39fe:	0f 91       	pop	r16
    3a00:	ff 90       	pop	r15
    3a02:	ef 90       	pop	r14
    3a04:	df 90       	pop	r13
    3a06:	cf 90       	pop	r12
    3a08:	bf 90       	pop	r11
    3a0a:	af 90       	pop	r10
    3a0c:	9f 90       	pop	r9
    3a0e:	8f 90       	pop	r8
    3a10:	7f 90       	pop	r7
    3a12:	6f 90       	pop	r6
    3a14:	5f 90       	pop	r5
    3a16:	4f 90       	pop	r4
    3a18:	3f 90       	pop	r3
    3a1a:	2f 90       	pop	r2
    3a1c:	08 95       	ret

00003a1e <Calibrate_UR>:
#include "Transistortester.h"
void Calibrate_UR(void) {
    3a1e:	8f 92       	push	r8
    3a20:	9f 92       	push	r9
    3a22:	af 92       	push	r10
    3a24:	bf 92       	push	r11
    3a26:	cf 92       	push	r12
    3a28:	df 92       	push	r13
    3a2a:	ef 92       	push	r14
    3a2c:	ff 92       	push	r15
    3a2e:	0f 93       	push	r16
    3a30:	1f 93       	push	r17
    3a32:	cf 93       	push	r28
    3a34:	df 93       	push	r29
  uint16_t u680;	// 3 * (Voltage at 680 Ohm)
 #endif


                                        //############################################
  ADCconfig.U_AVCC = U_VCC;     // set initial VCC Voltage
    3a36:	88 e8       	ldi	r24, 0x88	; 136
    3a38:	93 e1       	ldi	r25, 0x13	; 19
    3a3a:	90 93 3e 01 	sts	0x013E, r25
    3a3e:	80 93 3d 01 	sts	0x013D, r24
  ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    3a42:	8e eb       	ldi	r24, 0xBE	; 190
    3a44:	80 93 39 01 	sts	0x0139, r24
#if FLASHEND > 0x1fff
  ADC_PORT = TXD_VAL;                   // switch to 0V
    3a48:	08 e0       	ldi	r16, 0x08	; 8
    3a4a:	08 b9       	out	0x08, r16	; 8
  ADC_DDR = (1<<TPREF) | TXD_MSK;       // switch pin with 2.5V reference to GND
    3a4c:	88 e1       	ldi	r24, 0x18	; 24
    3a4e:	87 b9       	out	0x07, r24	; 7
  wait1ms();
    3a50:	0e 94 f5 13 	call	0x27ea	; 0x27ea <wait1ms>
  ADC_DDR =  TXD_MSK;   // switch pin with reference back to input
    3a54:	07 b9       	out	0x07, r16	; 7
  trans.uBE[1] = W5msReadADC(TPREF); // read voltage of 2.5V precision reference
    3a56:	84 e0       	ldi	r24, 0x04	; 4
    3a58:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
    3a5c:	ec 01       	movw	r28, r24
    3a5e:	90 93 57 01 	sts	0x0157, r25
    3a62:	80 93 56 01 	sts	0x0156, r24
  if ((trans.uBE[1] > 2250) && (trans.uBE[1] < 2750)) {
    3a66:	8b 5c       	subi	r24, 0xCB	; 203
    3a68:	98 40       	sbci	r25, 0x08	; 8
    3a6a:	21 e0       	ldi	r18, 0x01	; 1
    3a6c:	83 3f       	cpi	r24, 0xF3	; 243
    3a6e:	92 07       	cpc	r25, r18
    3a70:	c0 f4       	brcc	.+48     	; 0x3aa2 <Calibrate_UR+0x84>
     // precision voltage reference connected, update U_AVCC
     WithReference = 1;
    3a72:	81 e0       	ldi	r24, 0x01	; 1
    3a74:	80 93 46 01 	sts	0x0146, r24
     ADCconfig.U_AVCC = (unsigned long)((unsigned long)ADCconfig.U_AVCC * 2495) / trans.uBE[1];
    3a78:	60 91 3d 01 	lds	r22, 0x013D
    3a7c:	70 91 3e 01 	lds	r23, 0x013E
    3a80:	80 e0       	ldi	r24, 0x00	; 0
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	2f eb       	ldi	r18, 0xBF	; 191
    3a86:	39 e0       	ldi	r19, 0x09	; 9
    3a88:	40 e0       	ldi	r20, 0x00	; 0
    3a8a:	50 e0       	ldi	r21, 0x00	; 0
    3a8c:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
    3a90:	9e 01       	movw	r18, r28
    3a92:	40 e0       	ldi	r20, 0x00	; 0
    3a94:	50 e0       	ldi	r21, 0x00	; 0
    3a96:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
    3a9a:	30 93 3e 01 	sts	0x013E, r19
    3a9e:	20 93 3d 01 	sts	0x013D, r18
  }
#endif
 #ifdef WITH_AUTO_REF
  (void) ReadADC(MUX_INT_REF);	// read reference voltage 
    3aa2:	8e e0       	ldi	r24, 0x0E	; 14
    3aa4:	0e 94 44 1a 	call	0x3488	; 0x3488 <ReadADC>
  ref_mv = W5msReadADC(MUX_INT_REF);	// read reference voltage 
    3aa8:	8e e0       	ldi	r24, 0x0E	; 14
    3aaa:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
    3aae:	90 93 42 01 	sts	0x0142, r25
    3ab2:	80 93 41 01 	sts	0x0141, r24
  RefVoltage();		//compute RHmultip = f(reference voltage)
    3ab6:	0e 94 4f 02 	call	0x49e	; 0x49e <RefVoltage>
 #else
  ref_mv = DEFAULT_BAND_GAP;    // set to default Reference Voltage
 #endif
  ADCconfig.U_Bandgap = ADC_internal_reference; // set internal reference voltage for ADC
    3aba:	86 ea       	ldi	r24, 0xA6	; 166
    3abc:	91 e0       	ldi	r25, 0x01	; 1
    3abe:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__eerd_byte_m168>
    3ac2:	99 27       	eor	r25, r25
    3ac4:	87 fd       	sbrc	r24, 7
    3ac6:	90 95       	com	r25
    3ac8:	20 91 41 01 	lds	r18, 0x0141
    3acc:	30 91 42 01 	lds	r19, 0x0142
    3ad0:	82 0f       	add	r24, r18
    3ad2:	93 1f       	adc	r25, r19
    3ad4:	90 93 3c 01 	sts	0x013C, r25
    3ad8:	80 93 3b 01 	sts	0x013B, r24
                                        //############################################

 #ifdef AUTO_CAL
  // measurement of internal resistance of the ADC port outputs switched to GND
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    3adc:	79 e0       	ldi	r23, 0x09	; 9
    3ade:	d7 2e       	mov	r13, r23
    3ae0:	d7 b8       	out	0x07, r13	; 7
  R_PORT = 1<<(TP1*2);		//R_L-PORT 1 to VCC
    3ae2:	aa 24       	eor	r10, r10
    3ae4:	a3 94       	inc	r10
    3ae6:	a5 b8       	out	0x05, r10	; 5
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to VCC
    3ae8:	a4 b8       	out	0x04, r10	; 4
  sum_rm = W5msReadADC(TP1);
    3aea:	80 e0       	ldi	r24, 0x00	; 0
    3aec:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
    3af0:	8c 01       	movw	r16, r24

  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin 2 to output 0V
    3af2:	6a e0       	ldi	r22, 0x0A	; 10
    3af4:	86 2e       	mov	r8, r22
    3af6:	87 b8       	out	0x07, r8	; 7
  R_PORT =  1<<(TP2*2);		//R_L-PORT 2 to VCC
    3af8:	54 e0       	ldi	r21, 0x04	; 4
    3afa:	c5 2e       	mov	r12, r21
    3afc:	c5 b8       	out	0x05, r12	; 5
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to VCC
    3afe:	c4 b8       	out	0x04, r12	; 4
  sum_rm += W5msReadADC(TP2);
    3b00:	81 e0       	ldi	r24, 0x01	; 1
    3b02:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
    3b06:	08 0f       	add	r16, r24
    3b08:	19 1f       	adc	r17, r25

  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin 3 to output 0V
    3b0a:	4c e0       	ldi	r20, 0x0C	; 12
    3b0c:	f4 2e       	mov	r15, r20
    3b0e:	f7 b8       	out	0x07, r15	; 7
  R_PORT =  1<<(TP3*2);		//R_L-PORT 3 to VCC
    3b10:	30 e1       	ldi	r19, 0x10	; 16
    3b12:	e3 2e       	mov	r14, r19
    3b14:	e5 b8       	out	0x05, r14	; 5
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to VCC
    3b16:	e4 b8       	out	0x04, r14	; 4
  sum_rm += W5msReadADC(TP3);	//add all three values
    3b18:	82 e0       	ldi	r24, 0x02	; 2
    3b1a:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
    3b1e:	08 0f       	add	r16, r24
    3b20:	19 1f       	adc	r17, r25

  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
    3b22:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
    3b24:	d8 b8       	out	0x08, r13	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    3b26:	d7 b8       	out	0x07, r13	; 7
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
    3b28:	a4 b8       	out	0x04, r10	; 4
  sum_rp = ADCconfig.U_AVCC - W5msReadADC(TP1);
    3b2a:	c0 91 3d 01 	lds	r28, 0x013D
    3b2e:	d0 91 3e 01 	lds	r29, 0x013E
    3b32:	80 e0       	ldi	r24, 0x00	; 0
    3b34:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
    3b38:	5c 01       	movw	r10, r24
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
    3b3a:	88 b8       	out	0x08, r8	; 8
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
    3b3c:	87 b8       	out	0x07, r8	; 7
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
    3b3e:	c4 b8       	out	0x04, r12	; 4
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP2);
    3b40:	c0 90 3d 01 	lds	r12, 0x013D
    3b44:	d0 90 3e 01 	lds	r13, 0x013E
    3b48:	81 e0       	ldi	r24, 0x01	; 1
    3b4a:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
    3b4e:	4c 01       	movw	r8, r24

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
    3b50:	f8 b8       	out	0x08, r15	; 8
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
    3b52:	f7 b8       	out	0x07, r15	; 7
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
    3b54:	e4 b8       	out	0x04, r14	; 4
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP3);
    3b56:	e0 90 3d 01 	lds	r14, 0x013D
    3b5a:	f0 90 3e 01 	lds	r15, 0x013E
    3b5e:	82 e0       	ldi	r24, 0x02	; 2
    3b60:	0e 94 b8 1a 	call	0x3570	; 0x3570 <W5msReadADC>
  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
  sum_rp = ADCconfig.U_AVCC - W5msReadADC(TP1);
    3b64:	cc 0d       	add	r28, r12
    3b66:	dd 1d       	adc	r29, r13
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP2);
    3b68:	ce 0d       	add	r28, r14
    3b6a:	df 1d       	adc	r29, r15
    3b6c:	c8 1b       	sub	r28, r24
    3b6e:	d9 0b       	sbc	r29, r25

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP3);
    3b70:	ca 19       	sub	r28, r10
    3b72:	db 09       	sbc	r29, r11
    3b74:	c8 19       	sub	r28, r8
    3b76:	d9 09       	sbc	r29, r9

  u680 = ((ADCconfig.U_AVCC * 3) - sum_rm - sum_rp);	//three times the voltage at the 680 Ohm
    3b78:	80 91 3d 01 	lds	r24, 0x013D
    3b7c:	90 91 3e 01 	lds	r25, 0x013E
    3b80:	6c 01       	movw	r12, r24
    3b82:	cc 0c       	add	r12, r12
    3b84:	dd 1c       	adc	r13, r13
    3b86:	c8 0e       	add	r12, r24
    3b88:	d9 1e       	adc	r13, r25
    3b8a:	c0 1a       	sub	r12, r16
    3b8c:	d1 0a       	sbc	r13, r17
    3b8e:	cc 1a       	sub	r12, r28
    3b90:	dd 0a       	sbc	r13, r29
  pin_rmi = (unsigned long)((unsigned long)sum_rm * (unsigned long)R_L_VAL) / (unsigned long)u680;
    3b92:	ee 24       	eor	r14, r14
    3b94:	ff 24       	eor	r15, r15
    3b96:	b8 01       	movw	r22, r16
    3b98:	80 e0       	ldi	r24, 0x00	; 0
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	20 e9       	ldi	r18, 0x90	; 144
    3b9e:	3a e1       	ldi	r19, 0x1A	; 26
    3ba0:	40 e0       	ldi	r20, 0x00	; 0
    3ba2:	50 e0       	ldi	r21, 0x00	; 0
    3ba4:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
    3ba8:	a7 01       	movw	r20, r14
    3baa:	96 01       	movw	r18, r12
    3bac:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
    3bb0:	89 01       	movw	r16, r18
    3bb2:	30 93 45 01 	sts	0x0145, r19
    3bb6:	20 93 44 01 	sts	0x0144, r18
//  adcmv[2] = pin_rm;	// for last output in row 2
  pin_rpl = (unsigned long)((unsigned long)sum_rp * (unsigned long)R_L_VAL) / (unsigned long)u680;
    3bba:	be 01       	movw	r22, r28
    3bbc:	80 e0       	ldi	r24, 0x00	; 0
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	20 e9       	ldi	r18, 0x90	; 144
    3bc2:	3a e1       	ldi	r19, 0x1A	; 26
    3bc4:	40 e0       	ldi	r20, 0x00	; 0
    3bc6:	50 e0       	ldi	r21, 0x00	; 0
    3bc8:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__mulsi3>
    3bcc:	a7 01       	movw	r20, r14
    3bce:	96 01       	movw	r18, r12
    3bd0:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <__udivmodsi4>
    3bd4:	c9 01       	movw	r24, r18
    3bd6:	30 93 40 01 	sts	0x0140, r19
    3bda:	20 93 3f 01 	sts	0x013F, r18
  if ((pin_rpl < 280) && (pin_rmi < 250)) {
    3bde:	21 e0       	ldi	r18, 0x01	; 1
    3be0:	88 31       	cpi	r24, 0x18	; 24
    3be2:	92 07       	cpc	r25, r18
    3be4:	78 f4       	brcc	.+30     	; 0x3c04 <Calibrate_UR+0x1e6>
    3be6:	0a 3f       	cpi	r16, 0xFA	; 250
    3be8:	11 05       	cpc	r17, r1
    3bea:	60 f4       	brcc	.+24     	; 0x3c04 <Calibrate_UR+0x1e6>
     // rp is below 28 Ohm and rm is below 25 Ohm
     resis680pl = pin_rpl + R_L_VAL;
    3bec:	80 57       	subi	r24, 0x70	; 112
    3bee:	95 4e       	sbci	r25, 0xE5	; 229
    3bf0:	90 93 09 01 	sts	0x0109, r25
    3bf4:	80 93 08 01 	sts	0x0108, r24
     resis680mi = pin_rmi + R_L_VAL;
    3bf8:	00 57       	subi	r16, 0x70	; 112
    3bfa:	15 4e       	sbci	r17, 0xE5	; 229
    3bfc:	10 93 03 01 	sts	0x0103, r17
    3c00:	00 93 02 01 	sts	0x0102, r16
  }
#endif

  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    3c04:	89 e1       	ldi	r24, 0x19	; 25
    3c06:	80 93 39 01 	sts	0x0139, r24
 } 
    3c0a:	df 91       	pop	r29
    3c0c:	cf 91       	pop	r28
    3c0e:	1f 91       	pop	r17
    3c10:	0f 91       	pop	r16
    3c12:	ff 90       	pop	r15
    3c14:	ef 90       	pop	r14
    3c16:	df 90       	pop	r13
    3c18:	cf 90       	pop	r12
    3c1a:	bf 90       	pop	r11
    3c1c:	af 90       	pop	r10
    3c1e:	9f 90       	pop	r9
    3c20:	8f 90       	pop	r8
    3c22:	08 95       	ret

00003c24 <__mulsi3>:
    3c24:	62 9f       	mul	r22, r18
    3c26:	d0 01       	movw	r26, r0
    3c28:	73 9f       	mul	r23, r19
    3c2a:	f0 01       	movw	r30, r0
    3c2c:	82 9f       	mul	r24, r18
    3c2e:	e0 0d       	add	r30, r0
    3c30:	f1 1d       	adc	r31, r1
    3c32:	64 9f       	mul	r22, r20
    3c34:	e0 0d       	add	r30, r0
    3c36:	f1 1d       	adc	r31, r1
    3c38:	92 9f       	mul	r25, r18
    3c3a:	f0 0d       	add	r31, r0
    3c3c:	83 9f       	mul	r24, r19
    3c3e:	f0 0d       	add	r31, r0
    3c40:	74 9f       	mul	r23, r20
    3c42:	f0 0d       	add	r31, r0
    3c44:	65 9f       	mul	r22, r21
    3c46:	f0 0d       	add	r31, r0
    3c48:	99 27       	eor	r25, r25
    3c4a:	72 9f       	mul	r23, r18
    3c4c:	b0 0d       	add	r27, r0
    3c4e:	e1 1d       	adc	r30, r1
    3c50:	f9 1f       	adc	r31, r25
    3c52:	63 9f       	mul	r22, r19
    3c54:	b0 0d       	add	r27, r0
    3c56:	e1 1d       	adc	r30, r1
    3c58:	f9 1f       	adc	r31, r25
    3c5a:	bd 01       	movw	r22, r26
    3c5c:	cf 01       	movw	r24, r30
    3c5e:	11 24       	eor	r1, r1
    3c60:	08 95       	ret

00003c62 <__udivmodqi4>:
    3c62:	99 1b       	sub	r25, r25
    3c64:	79 e0       	ldi	r23, 0x09	; 9
    3c66:	04 c0       	rjmp	.+8      	; 0x3c70 <__udivmodqi4_ep>

00003c68 <__udivmodqi4_loop>:
    3c68:	99 1f       	adc	r25, r25
    3c6a:	96 17       	cp	r25, r22
    3c6c:	08 f0       	brcs	.+2      	; 0x3c70 <__udivmodqi4_ep>
    3c6e:	96 1b       	sub	r25, r22

00003c70 <__udivmodqi4_ep>:
    3c70:	88 1f       	adc	r24, r24
    3c72:	7a 95       	dec	r23
    3c74:	c9 f7       	brne	.-14     	; 0x3c68 <__udivmodqi4_loop>
    3c76:	80 95       	com	r24
    3c78:	08 95       	ret

00003c7a <__udivmodhi4>:
    3c7a:	aa 1b       	sub	r26, r26
    3c7c:	bb 1b       	sub	r27, r27
    3c7e:	51 e1       	ldi	r21, 0x11	; 17
    3c80:	07 c0       	rjmp	.+14     	; 0x3c90 <__udivmodhi4_ep>

00003c82 <__udivmodhi4_loop>:
    3c82:	aa 1f       	adc	r26, r26
    3c84:	bb 1f       	adc	r27, r27
    3c86:	a6 17       	cp	r26, r22
    3c88:	b7 07       	cpc	r27, r23
    3c8a:	10 f0       	brcs	.+4      	; 0x3c90 <__udivmodhi4_ep>
    3c8c:	a6 1b       	sub	r26, r22
    3c8e:	b7 0b       	sbc	r27, r23

00003c90 <__udivmodhi4_ep>:
    3c90:	88 1f       	adc	r24, r24
    3c92:	99 1f       	adc	r25, r25
    3c94:	5a 95       	dec	r21
    3c96:	a9 f7       	brne	.-22     	; 0x3c82 <__udivmodhi4_loop>
    3c98:	80 95       	com	r24
    3c9a:	90 95       	com	r25
    3c9c:	bc 01       	movw	r22, r24
    3c9e:	cd 01       	movw	r24, r26
    3ca0:	08 95       	ret

00003ca2 <__udivmodsi4>:
    3ca2:	a1 e2       	ldi	r26, 0x21	; 33
    3ca4:	1a 2e       	mov	r1, r26
    3ca6:	aa 1b       	sub	r26, r26
    3ca8:	bb 1b       	sub	r27, r27
    3caa:	fd 01       	movw	r30, r26
    3cac:	0d c0       	rjmp	.+26     	; 0x3cc8 <__udivmodsi4_ep>

00003cae <__udivmodsi4_loop>:
    3cae:	aa 1f       	adc	r26, r26
    3cb0:	bb 1f       	adc	r27, r27
    3cb2:	ee 1f       	adc	r30, r30
    3cb4:	ff 1f       	adc	r31, r31
    3cb6:	a2 17       	cp	r26, r18
    3cb8:	b3 07       	cpc	r27, r19
    3cba:	e4 07       	cpc	r30, r20
    3cbc:	f5 07       	cpc	r31, r21
    3cbe:	20 f0       	brcs	.+8      	; 0x3cc8 <__udivmodsi4_ep>
    3cc0:	a2 1b       	sub	r26, r18
    3cc2:	b3 0b       	sbc	r27, r19
    3cc4:	e4 0b       	sbc	r30, r20
    3cc6:	f5 0b       	sbc	r31, r21

00003cc8 <__udivmodsi4_ep>:
    3cc8:	66 1f       	adc	r22, r22
    3cca:	77 1f       	adc	r23, r23
    3ccc:	88 1f       	adc	r24, r24
    3cce:	99 1f       	adc	r25, r25
    3cd0:	1a 94       	dec	r1
    3cd2:	69 f7       	brne	.-38     	; 0x3cae <__udivmodsi4_loop>
    3cd4:	60 95       	com	r22
    3cd6:	70 95       	com	r23
    3cd8:	80 95       	com	r24
    3cda:	90 95       	com	r25
    3cdc:	9b 01       	movw	r18, r22
    3cde:	ac 01       	movw	r20, r24
    3ce0:	bd 01       	movw	r22, r26
    3ce2:	cf 01       	movw	r24, r30
    3ce4:	08 95       	ret

00003ce6 <__divmodsi4>:
    3ce6:	97 fb       	bst	r25, 7
    3ce8:	09 2e       	mov	r0, r25
    3cea:	05 26       	eor	r0, r21
    3cec:	0e d0       	rcall	.+28     	; 0x3d0a <__divmodsi4_neg1>
    3cee:	57 fd       	sbrc	r21, 7
    3cf0:	04 d0       	rcall	.+8      	; 0x3cfa <__divmodsi4_neg2>
    3cf2:	d7 df       	rcall	.-82     	; 0x3ca2 <__udivmodsi4>
    3cf4:	0a d0       	rcall	.+20     	; 0x3d0a <__divmodsi4_neg1>
    3cf6:	00 1c       	adc	r0, r0
    3cf8:	38 f4       	brcc	.+14     	; 0x3d08 <__divmodsi4_exit>

00003cfa <__divmodsi4_neg2>:
    3cfa:	50 95       	com	r21
    3cfc:	40 95       	com	r20
    3cfe:	30 95       	com	r19
    3d00:	21 95       	neg	r18
    3d02:	3f 4f       	sbci	r19, 0xFF	; 255
    3d04:	4f 4f       	sbci	r20, 0xFF	; 255
    3d06:	5f 4f       	sbci	r21, 0xFF	; 255

00003d08 <__divmodsi4_exit>:
    3d08:	08 95       	ret

00003d0a <__divmodsi4_neg1>:
    3d0a:	f6 f7       	brtc	.-4      	; 0x3d08 <__divmodsi4_exit>
    3d0c:	90 95       	com	r25
    3d0e:	80 95       	com	r24
    3d10:	70 95       	com	r23
    3d12:	61 95       	neg	r22
    3d14:	7f 4f       	sbci	r23, 0xFF	; 255
    3d16:	8f 4f       	sbci	r24, 0xFF	; 255
    3d18:	9f 4f       	sbci	r25, 0xFF	; 255
    3d1a:	08 95       	ret

00003d1c <itoa>:
    3d1c:	fb 01       	movw	r30, r22
    3d1e:	9f 01       	movw	r18, r30
    3d20:	e8 94       	clt
    3d22:	42 30       	cpi	r20, 0x02	; 2
    3d24:	c4 f0       	brlt	.+48     	; 0x3d56 <itoa+0x3a>
    3d26:	45 32       	cpi	r20, 0x25	; 37
    3d28:	b4 f4       	brge	.+44     	; 0x3d56 <itoa+0x3a>
    3d2a:	4a 30       	cpi	r20, 0x0A	; 10
    3d2c:	29 f4       	brne	.+10     	; 0x3d38 <itoa+0x1c>
    3d2e:	97 fb       	bst	r25, 7
    3d30:	1e f4       	brtc	.+6      	; 0x3d38 <itoa+0x1c>
    3d32:	90 95       	com	r25
    3d34:	81 95       	neg	r24
    3d36:	9f 4f       	sbci	r25, 0xFF	; 255
    3d38:	64 2f       	mov	r22, r20
    3d3a:	77 27       	eor	r23, r23
    3d3c:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <__udivmodhi4>
    3d40:	80 5d       	subi	r24, 0xD0	; 208
    3d42:	8a 33       	cpi	r24, 0x3A	; 58
    3d44:	0c f0       	brlt	.+2      	; 0x3d48 <itoa+0x2c>
    3d46:	89 5d       	subi	r24, 0xD9	; 217
    3d48:	81 93       	st	Z+, r24
    3d4a:	cb 01       	movw	r24, r22
    3d4c:	00 97       	sbiw	r24, 0x00	; 0
    3d4e:	a1 f7       	brne	.-24     	; 0x3d38 <itoa+0x1c>
    3d50:	16 f4       	brtc	.+4      	; 0x3d56 <itoa+0x3a>
    3d52:	5d e2       	ldi	r21, 0x2D	; 45
    3d54:	51 93       	st	Z+, r21
    3d56:	10 82       	st	Z, r1
    3d58:	c9 01       	movw	r24, r18
    3d5a:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <strrev>

00003d5e <utoa>:
    3d5e:	fb 01       	movw	r30, r22
    3d60:	9f 01       	movw	r18, r30
    3d62:	42 30       	cpi	r20, 0x02	; 2
    3d64:	74 f0       	brlt	.+28     	; 0x3d82 <utoa+0x24>
    3d66:	45 32       	cpi	r20, 0x25	; 37
    3d68:	64 f4       	brge	.+24     	; 0x3d82 <utoa+0x24>
    3d6a:	64 2f       	mov	r22, r20
    3d6c:	77 27       	eor	r23, r23
    3d6e:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <__udivmodhi4>
    3d72:	80 5d       	subi	r24, 0xD0	; 208
    3d74:	8a 33       	cpi	r24, 0x3A	; 58
    3d76:	0c f0       	brlt	.+2      	; 0x3d7a <utoa+0x1c>
    3d78:	89 5d       	subi	r24, 0xD9	; 217
    3d7a:	81 93       	st	Z+, r24
    3d7c:	cb 01       	movw	r24, r22
    3d7e:	00 97       	sbiw	r24, 0x00	; 0
    3d80:	a1 f7       	brne	.-24     	; 0x3d6a <utoa+0xc>
    3d82:	10 82       	st	Z, r1
    3d84:	c9 01       	movw	r24, r18
    3d86:	0c 94 e6 1e 	jmp	0x3dcc	; 0x3dcc <strrev>

00003d8a <__eerd_byte_m168>:
    3d8a:	f9 99       	sbic	0x1f, 1	; 31
    3d8c:	fe cf       	rjmp	.-4      	; 0x3d8a <__eerd_byte_m168>
    3d8e:	92 bd       	out	0x22, r25	; 34
    3d90:	81 bd       	out	0x21, r24	; 33
    3d92:	f8 9a       	sbi	0x1f, 0	; 31
    3d94:	99 27       	eor	r25, r25
    3d96:	80 b5       	in	r24, 0x20	; 32
    3d98:	08 95       	ret

00003d9a <__eerd_word_m168>:
    3d9a:	a8 e1       	ldi	r26, 0x18	; 24
    3d9c:	b0 e0       	ldi	r27, 0x00	; 0
    3d9e:	42 e0       	ldi	r20, 0x02	; 2
    3da0:	50 e0       	ldi	r21, 0x00	; 0
    3da2:	0c 94 f8 1e 	jmp	0x3df0	; 0x3df0 <__eerd_blraw_m168>

00003da6 <__eewr_byte_m168>:
    3da6:	26 2f       	mov	r18, r22

00003da8 <__eewr_r18_m168>:
    3da8:	f9 99       	sbic	0x1f, 1	; 31
    3daa:	fe cf       	rjmp	.-4      	; 0x3da8 <__eewr_r18_m168>
    3dac:	1f ba       	out	0x1f, r1	; 31
    3dae:	92 bd       	out	0x22, r25	; 34
    3db0:	81 bd       	out	0x21, r24	; 33
    3db2:	20 bd       	out	0x20, r18	; 32
    3db4:	0f b6       	in	r0, 0x3f	; 63
    3db6:	f8 94       	cli
    3db8:	fa 9a       	sbi	0x1f, 2	; 31
    3dba:	f9 9a       	sbi	0x1f, 1	; 31
    3dbc:	0f be       	out	0x3f, r0	; 63
    3dbe:	01 96       	adiw	r24, 0x01	; 1
    3dc0:	08 95       	ret

00003dc2 <__eewr_word_m168>:
    3dc2:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__eewr_byte_m168>
    3dc6:	27 2f       	mov	r18, r23
    3dc8:	0c 94 d4 1e 	jmp	0x3da8	; 0x3da8 <__eewr_r18_m168>

00003dcc <strrev>:
    3dcc:	dc 01       	movw	r26, r24
    3dce:	fc 01       	movw	r30, r24
    3dd0:	67 2f       	mov	r22, r23
    3dd2:	71 91       	ld	r23, Z+
    3dd4:	77 23       	and	r23, r23
    3dd6:	e1 f7       	brne	.-8      	; 0x3dd0 <strrev+0x4>
    3dd8:	32 97       	sbiw	r30, 0x02	; 2
    3dda:	04 c0       	rjmp	.+8      	; 0x3de4 <strrev+0x18>
    3ddc:	7c 91       	ld	r23, X
    3dde:	6d 93       	st	X+, r22
    3de0:	70 83       	st	Z, r23
    3de2:	62 91       	ld	r22, -Z
    3de4:	ae 17       	cp	r26, r30
    3de6:	bf 07       	cpc	r27, r31
    3de8:	c8 f3       	brcs	.-14     	; 0x3ddc <strrev+0x10>
    3dea:	08 95       	ret

00003dec <__eerd_block_m168>:
    3dec:	dc 01       	movw	r26, r24
    3dee:	cb 01       	movw	r24, r22

00003df0 <__eerd_blraw_m168>:
    3df0:	fc 01       	movw	r30, r24
    3df2:	f9 99       	sbic	0x1f, 1	; 31
    3df4:	fe cf       	rjmp	.-4      	; 0x3df2 <__eerd_blraw_m168+0x2>
    3df6:	06 c0       	rjmp	.+12     	; 0x3e04 <__eerd_blraw_m168+0x14>
    3df8:	f2 bd       	out	0x22, r31	; 34
    3dfa:	e1 bd       	out	0x21, r30	; 33
    3dfc:	f8 9a       	sbi	0x1f, 0	; 31
    3dfe:	31 96       	adiw	r30, 0x01	; 1
    3e00:	00 b4       	in	r0, 0x20	; 32
    3e02:	0d 92       	st	X+, r0
    3e04:	41 50       	subi	r20, 0x01	; 1
    3e06:	50 40       	sbci	r21, 0x00	; 0
    3e08:	b8 f7       	brcc	.-18     	; 0x3df8 <__eerd_blraw_m168+0x8>
    3e0a:	08 95       	ret

00003e0c <_exit>:
    3e0c:	f8 94       	cli

00003e0e <__stop_program>:
    3e0e:	ff cf       	rjmp	.-2      	; 0x3e0e <__stop_program>
