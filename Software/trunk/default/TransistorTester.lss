
TransistorTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00003c08  00003cbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c08  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000082  00800102  00800102  00003cbe  2**0
                  ALLOC
  3 .eeprom       00000270  00810000  00810000  00003cbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         00000dbc  00000000  00000000  00003f30  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001d2  00000000  00000000  00004cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000000a0  00000000  00000000  00004ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000678  00000000  00000000  00004f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000251b  00000000  00000000  000055d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000006e1  00000000  00000000  00007af1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000032e3  00000000  00000000  000081d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000001f0  00000000  00000000  0000b4b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000007fd  00000000  00000000  0000b6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000010a4  00000000  00000000  0000bea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 000001d2  00000000  00000000  0000cf49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e0       	ldi	r30, 0x08	; 8
      7c:	fc e3       	ldi	r31, 0x3C	; 60
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 30       	cpi	r26, 0x02	; 2
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a2 e0       	ldi	r26, 0x02	; 2
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a4 38       	cpi	r26, 0x84	; 132
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <main>
      9e:	0c 94 02 1e 	jmp	0x3c04	; 0x3c04 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_data>:
void lcd_space(void) {
   lcd_data(' ');
}

// sends data byte to the LCD 
void lcd_data(unsigned char temp1) {
      a6:	1f 93       	push	r17
      a8:	18 2f       	mov	r17, r24
 lcd_write_data(temp1);		// set RS to 1
      aa:	81 e0       	ldi	r24, 0x01	; 1
      ac:	61 2f       	mov	r22, r17
      ae:	0e 94 10 01 	call	0x220	; 0x220 <_lcd_hw_write>
      b2:	0e 94 6f 14 	call	0x28de	; 0x28de <wait50us>
#ifdef WITH_UART
 switch(temp1) {
      b6:	18 30       	cpi	r17, 0x08	; 8
      b8:	48 f4       	brcc	.+18     	; 0xcc <lcd_data+0x26>
      ba:	16 30       	cpi	r17, 0x06	; 6
      bc:	d0 f4       	brcc	.+52     	; 0xf2 <lcd_data+0x4c>
      be:	12 30       	cpi	r17, 0x02	; 2
      c0:	71 f0       	breq	.+28     	; 0xde <lcd_data+0x38>
      c2:	13 30       	cpi	r17, 0x03	; 3
      c4:	89 f0       	breq	.+34     	; 0xe8 <lcd_data+0x42>
      c6:	11 30       	cpi	r17, 0x01	; 1
      c8:	d1 f4       	brne	.+52     	; 0xfe <lcd_data+0x58>
      ca:	07 c0       	rjmp	.+14     	; 0xda <lcd_data+0x34>
      cc:	14 3e       	cpi	r17, 0xE4	; 228
      ce:	a9 f0       	breq	.+42     	; 0xfa <lcd_data+0x54>
      d0:	14 3f       	cpi	r17, 0xF4	; 244
      d2:	c1 f0       	breq	.+48     	; 0x104 <lcd_data+0x5e>
      d4:	11 3e       	cpi	r17, 0xE1	; 225
      d6:	99 f4       	brne	.+38     	; 0xfe <lcd_data+0x58>
      d8:	0e c0       	rjmp	.+28     	; 0xf6 <lcd_data+0x50>
    case LCD_CHAR_DIODE1:
    	uart_putc('>');
      da:	8e e3       	ldi	r24, 0x3E	; 62
      dc:	06 c0       	rjmp	.+12     	; 0xea <lcd_data+0x44>
    	uart_putc('|');
    	break;
    case LCD_CHAR_DIODE2:
    	uart_putc('|');
      de:	8c e7       	ldi	r24, 0x7C	; 124
      e0:	0e 94 35 14 	call	0x286a	; 0x286a <uart_putc>
    	uart_putc('<');
      e4:	8c e3       	ldi	r24, 0x3C	; 60
      e6:	0c c0       	rjmp	.+24     	; 0x100 <lcd_data+0x5a>
    	break;
    case LCD_CHAR_CAP:
    	uart_putc('|');
      e8:	8c e7       	ldi	r24, 0x7C	; 124
      ea:	0e 94 35 14 	call	0x286a	; 0x286a <uart_putc>
    	uart_putc('|');
      ee:	8c e7       	ldi	r24, 0x7C	; 124
      f0:	07 c0       	rjmp	.+14     	; 0x100 <lcd_data+0x5a>
    	break;
    case LCD_CHAR_RESIS1:
    case LCD_CHAR_RESIS2:
    	uart_putc('R');
      f2:	82 e5       	ldi	r24, 0x52	; 82
      f4:	05 c0       	rjmp	.+10     	; 0x100 <lcd_data+0x5a>
    	break;
    case 225:	//ä
    	uart_putc('ä');
      f6:	84 ee       	ldi	r24, 0xE4	; 228
      f8:	03 c0       	rjmp	.+6      	; 0x100 <lcd_data+0x5a>
    	break;
    case 228:	//µ
    	uart_putc('µ');
      fa:	85 eb       	ldi	r24, 0xB5	; 181
      fc:	01 c0       	rjmp	.+2      	; 0x100 <lcd_data+0x5a>
    	break;
    case 244:	//Omega
    	break;
    default:
    	uart_putc(temp1);
      fe:	81 2f       	mov	r24, r17
     100:	0e 94 35 14 	call	0x286a	; 0x286a <uart_putc>
 }
#endif
}
     104:	1f 91       	pop	r17
     106:	08 95       	ret

00000108 <lcd_space>:
   lcd_data(temp + '1');
}

// send space character to LCD
void lcd_space(void) {
   lcd_data(' ');
     108:	80 e2       	ldi	r24, 0x20	; 32
     10a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
}
     10e:	08 95       	ret

00000110 <lcd_testpin>:
 

// sends numeric character (Pin Number) to the LCD 
// from binary 0 we send ASCII 1 ....
void lcd_testpin(unsigned char temp) {
   lcd_data(temp + '1');
     110:	8f 5c       	subi	r24, 0xCF	; 207
     112:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
}
     116:	08 95       	ret

00000118 <uart_newline>:
}


#ifdef WITH_UART
void uart_newline(void) {
   uart_putc('\r');
     118:	8d e0       	ldi	r24, 0x0D	; 13
     11a:	0e 94 35 14 	call	0x286a	; 0x286a <uart_putc>
   uart_putc('\n');
     11e:	8a e0       	ldi	r24, 0x0A	; 10
     120:	0e 94 35 14 	call	0x286a	; 0x286a <uart_putc>
}
     124:	08 95       	ret

00000126 <lcd_command>:
#endif
}
 
// sends a command to the LCD
 
void lcd_command(unsigned char temp1) {
     126:	1f 93       	push	r17
     128:	18 2f       	mov	r17, r24
        lcd_write_cmd(temp1);		// set RS to 0
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	61 2f       	mov	r22, r17
     12e:	0e 94 10 01 	call	0x220	; 0x220 <_lcd_hw_write>
     132:	0e 94 6f 14 	call	0x28de	; 0x28de <wait50us>
#ifdef WITH_UART
	if((temp1 == 0x80) || (temp1 == 0xC0)) {
     136:	10 38       	cpi	r17, 0x80	; 128
     138:	11 f0       	breq	.+4      	; 0x13e <lcd_command+0x18>
     13a:	10 3c       	cpi	r17, 0xC0	; 192
     13c:	11 f4       	brne	.+4      	; 0x142 <lcd_command+0x1c>
		uart_newline();
     13e:	0e 94 8c 00 	call	0x118	; 0x118 <uart_newline>
	}
#endif
}
     142:	1f 91       	pop	r17
     144:	08 95       	ret

00000146 <lcd_clear>:
}
 
// send the command to clear the display 
 
void lcd_clear(void) {
   lcd_command(CLEAR_DISPLAY);
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
   wait10ms();
     14c:	0e 94 64 14 	call	0x28c8	; 0x28c8 <wait10ms>
#ifdef WITH_UART
   uart_newline();
     150:	0e 94 8c 00 	call	0x118	; 0x118 <uart_newline>
#endif
   lcd_line1();			// set cursor to Line1 Column 1, (only for OLED-Display)
     154:	80 e8       	ldi	r24, 0x80	; 128
     156:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
}
     15a:	08 95       	ret

0000015c <lcd_init>:
 
// Initialise: 
// Must be called first .
 
void lcd_init(void) {
   wait30ms();
     15c:	0e 94 62 14 	call	0x28c4	; 0x28c4 <wait30ms>
   // to initialise, send 3 times to be shure to be in 8 Bit mode
   lcd_write_init(1);
     160:	80 e8       	ldi	r24, 0x80	; 128
     162:	60 e3       	ldi	r22, 0x30	; 48
     164:	0e 94 10 01 	call	0x220	; 0x220 <_lcd_hw_write>
   wait5ms();
     168:	0e 94 65 14 	call	0x28ca	; 0x28ca <wait5ms>
   
   lcd_write_init(1);
     16c:	80 e8       	ldi	r24, 0x80	; 128
     16e:	60 e3       	ldi	r22, 0x30	; 48
     170:	0e 94 10 01 	call	0x220	; 0x220 <_lcd_hw_write>
   wait1ms();
     174:	0e 94 69 14 	call	0x28d2	; 0x28d2 <wait1ms>

   lcd_write_init(1);
     178:	80 e8       	ldi	r24, 0x80	; 128
     17a:	60 e3       	ldi	r22, 0x30	; 48
     17c:	0e 94 10 01 	call	0x220	; 0x220 <_lcd_hw_write>
   wait1ms();
     180:	0e 94 69 14 	call	0x28d2	; 0x28d2 <wait1ms>

   lcd_write_init(0);		// switch to 4 Bit mode
     184:	80 e8       	ldi	r24, 0x80	; 128
     186:	60 e2       	ldi	r22, 0x20	; 32
     188:	0e 94 10 01 	call	0x220	; 0x220 <_lcd_hw_write>
   wait10ms();
     18c:	0e 94 64 14 	call	0x28c8	; 0x28c8 <wait10ms>

   // 4Bit / 2 rows / 5x7
   lcd_command(CMD_SetIFOptions | 0x08);
     190:	88 e2       	ldi	r24, 0x28	; 40
     192:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>

   // Display on / Cursor off / no Blinking
   lcd_command(CMD_SetDisplayAndCursor | 0x04);
     196:	8c e0       	ldi	r24, 0x0C	; 12
     198:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>

   // increment / no Scroll    
   lcd_command(CMD_SetEntryMode | 0x02);	
     19c:	86 e0       	ldi	r24, 0x06	; 6
     19e:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
   lcd_clear();
     1a2:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
}
     1a6:	08 95       	ret

000001a8 <lcd_string>:
#endif
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
     1a8:	ef 92       	push	r14
     1aa:	ff 92       	push	r15
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	e8 2e       	mov	r14, r24
     1b2:	e7 01       	movw	r28, r14
     1b4:	7e 01       	movw	r14, r28
     1b6:	f9 2e       	mov	r15, r25
     1b8:	e7 01       	movw	r28, r14
    while(*data) {
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <lcd_string+0x18>
        lcd_data(*data);
     1bc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
    while(*data) {
     1c0:	89 91       	ld	r24, Y+
     1c2:	88 23       	and	r24, r24
     1c4:	d9 f7       	brne	.-10     	; 0x1bc <lcd_string+0x14>
        lcd_data(*data);
        data++;
    }
}
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	08 95       	ret

000001d0 <lcd_fix_string>:
   }
}
#endif

//Load string from PGM or EEprom and send to LCD 
void lcd_fix_string(const unsigned char *data) {
     1d0:	cf 93       	push	r28
     1d2:	df 93       	push	r29
     1d4:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = MEM_read_byte(data);
     1d6:	ce 01       	movw	r24, r28
     1d8:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__eerd_byte_m328p>
      if((cc==0) || (cc==128)) {
     1dc:	88 23       	and	r24, r24
     1de:	31 f0       	breq	.+12     	; 0x1ec <lcd_fix_string+0x1c>
     1e0:	80 38       	cpi	r24, 0x80	; 128
     1e2:	21 f0       	breq	.+8      	; 0x1ec <lcd_fix_string+0x1c>
         return;
      }
      lcd_data(cc);
     1e4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
      data++;
     1e8:	21 96       	adiw	r28, 0x01	; 1
   }
     1ea:	f5 cf       	rjmp	.-22     	; 0x1d6 <lcd_fix_string+0x6>
}
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	08 95       	ret

000001f2 <lcd_fix_customchar>:

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
     1f2:	0f 93       	push	r16
     1f4:	1f 93       	push	r17
     1f6:	cf 93       	push	r28
     1f8:	df 93       	push	r29
     1fa:	8c 01       	movw	r16, r24
     1fc:	c0 e0       	ldi	r28, 0x00	; 0
     1fe:	d0 e0       	ldi	r29, 0x00	; 0
    for(uint8_t i=0;i<8;i++) {
        lcd_data(MEM_read_byte(chardata));
     200:	c8 01       	movw	r24, r16
     202:	8c 0f       	add	r24, r28
     204:	9d 1f       	adc	r25, r29
     206:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__eerd_byte_m328p>
     20a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
     20e:	21 96       	adiw	r28, 0x01	; 1
   }
}

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
    for(uint8_t i=0;i<8;i++) {
     210:	c8 30       	cpi	r28, 0x08	; 8
     212:	d1 05       	cpc	r29, r1
     214:	a9 f7       	brne	.-22     	; 0x200 <lcd_fix_customchar+0xe>
        lcd_data(MEM_read_byte(chardata));
        chardata++;
    }
}
     216:	df 91       	pop	r29
     218:	cf 91       	pop	r28
     21a:	1f 91       	pop	r17
     21c:	0f 91       	pop	r16
     21e:	08 95       	ret

00000220 <_lcd_hw_write>:
     220:	5d 9a       	sbi	0x0b, 5	; 11
     222:	55 9a       	sbi	0x0a, 5	; 10
     224:	5c 98       	cbi	0x0b, 4	; 11
     226:	54 9a       	sbi	0x0a, 4	; 10
     228:	80 fd       	sbrc	r24, 0
     22a:	5c 9a       	sbi	0x0b, 4	; 11
     22c:	58 98       	cbi	0x0b, 0	; 11
     22e:	59 98       	cbi	0x0b, 1	; 11
     230:	5a 98       	cbi	0x0b, 2	; 11
     232:	5b 98       	cbi	0x0b, 3	; 11
     234:	64 fd       	sbrc	r22, 4
     236:	58 9a       	sbi	0x0b, 0	; 11
     238:	50 9a       	sbi	0x0a, 0	; 10
     23a:	65 fd       	sbrc	r22, 5
     23c:	59 9a       	sbi	0x0b, 1	; 11
     23e:	51 9a       	sbi	0x0a, 1	; 10
     240:	66 fd       	sbrc	r22, 6
     242:	5a 9a       	sbi	0x0b, 2	; 11
     244:	52 9a       	sbi	0x0a, 2	; 10
     246:	67 fd       	sbrc	r22, 7
     248:	5b 9a       	sbi	0x0b, 3	; 11
     24a:	53 9a       	sbi	0x0a, 3	; 10
     24c:	00 00       	nop
     24e:	5d 98       	cbi	0x0b, 5	; 11
     250:	0e 94 78 14 	call	0x28f0	; 0x28f0 <wait1us>
     254:	87 fd       	sbrc	r24, 7
     256:	11 c0       	rjmp	.+34     	; 0x27a <_lcd_hw_write_exit>
     258:	5d 9a       	sbi	0x0b, 5	; 11
     25a:	58 98       	cbi	0x0b, 0	; 11
     25c:	59 98       	cbi	0x0b, 1	; 11
     25e:	5a 98       	cbi	0x0b, 2	; 11
     260:	5b 98       	cbi	0x0b, 3	; 11
     262:	60 fd       	sbrc	r22, 0
     264:	58 9a       	sbi	0x0b, 0	; 11
     266:	61 fd       	sbrc	r22, 1
     268:	59 9a       	sbi	0x0b, 1	; 11
     26a:	62 fd       	sbrc	r22, 2
     26c:	5a 9a       	sbi	0x0b, 2	; 11
     26e:	63 fd       	sbrc	r22, 3
     270:	5b 9a       	sbi	0x0b, 3	; 11
     272:	00 00       	nop
     274:	5d 98       	cbi	0x0b, 5	; 11
     276:	0e 94 78 14 	call	0x28f0	; 0x28f0 <wait1us>

0000027a <_lcd_hw_write_exit>:
     27a:	08 95       	ret

0000027c <ChargePin10ms>:
 }

//******************************************************************
#include "CheckPins.c"

void ChargePin10ms(uint8_t PinToCharge, uint8_t ChargeDirection) {
     27c:	df 93       	push	r29
     27e:	cf 93       	push	r28
     280:	0f 92       	push	r0
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
   //Will be used by discharge of MOSFET Gates or to load big capacities.
   //Parameters:
   //PinToCharge: specifies the pin as mask for R-Port
   //ChargeDirection: 0 = switch to GND (N-Kanal-FET), 1= switch to VCC(P-Kanal-FET)

   if(ChargeDirection&1) {
     286:	60 ff       	sbrs	r22, 0
     288:	03 c0       	rjmp	.+6      	; 0x290 <ChargePin10ms+0x14>
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
     28a:	95 b1       	in	r25, 0x05	; 5
     28c:	98 2b       	or	r25, r24
     28e:	04 c0       	rjmp	.+8      	; 0x298 <ChargePin10ms+0x1c>
   } else {
      R_PORT &= ~PinToCharge; // or 0 (GND)
     290:	25 b1       	in	r18, 0x05	; 5
     292:	98 2f       	mov	r25, r24
     294:	90 95       	com	r25
     296:	92 23       	and	r25, r18
     298:	95 b9       	out	0x05, r25	; 5
   }
   R_DDR |= PinToCharge;		//switch Pin to output, across R to GND or VCC
     29a:	94 b1       	in	r25, 0x04	; 4
     29c:	98 2b       	or	r25, r24
     29e:	94 b9       	out	0x04, r25	; 4
   wait10ms();
     2a0:	89 83       	std	Y+1, r24	; 0x01
     2a2:	0e 94 64 14 	call	0x28c8	; 0x28c8 <wait10ms>
   // switch back Input, no current
   R_DDR &= ~PinToCharge;	// switch back to input
     2a6:	94 b1       	in	r25, 0x04	; 4
     2a8:	89 81       	ldd	r24, Y+1	; 0x01
     2aa:	80 95       	com	r24
     2ac:	98 23       	and	r25, r24
     2ae:	94 b9       	out	0x04, r25	; 4
   R_PORT &= ~PinToCharge;	// no Pull up
     2b0:	95 b1       	in	r25, 0x05	; 5
     2b2:	98 23       	and	r25, r24
     2b4:	95 b9       	out	0x05, r25	; 5
}
     2b6:	0f 90       	pop	r0
     2b8:	cf 91       	pop	r28
     2ba:	df 91       	pop	r29
     2bc:	08 95       	ret

000002be <CheckPins>:
//******************************************************************
void CheckPins(uint8_t HighPin, uint8_t LowPin, uint8_t TristatePin)
  {
     2be:	2f 92       	push	r2
     2c0:	3f 92       	push	r3
     2c2:	4f 92       	push	r4
     2c4:	5f 92       	push	r5
     2c6:	6f 92       	push	r6
     2c8:	7f 92       	push	r7
     2ca:	8f 92       	push	r8
     2cc:	9f 92       	push	r9
     2ce:	af 92       	push	r10
     2d0:	bf 92       	push	r11
     2d2:	cf 92       	push	r12
     2d4:	df 92       	push	r13
     2d6:	ef 92       	push	r14
     2d8:	ff 92       	push	r15
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	df 93       	push	r29
     2e0:	cf 93       	push	r28
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
     2e6:	66 97       	sbiw	r28, 0x16	; 22
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	f8 94       	cli
     2ec:	de bf       	out	0x3e, r29	; 62
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	cd bf       	out	0x3d, r28	; 61
     2f2:	18 2f       	mov	r17, r24
     2f4:	36 2e       	mov	r3, r22
     2f6:	24 2e       	mov	r2, r20
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
     2f8:	a8 95       	wdr
//  #define RR680MI resis680mi
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = MEM_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
     2fa:	a6 2e       	mov	r10, r22
     2fc:	bb 24       	eor	r11, r11
     2fe:	c5 01       	movw	r24, r10
     300:	8c 5a       	subi	r24, 0xAC	; 172
     302:	9d 4f       	sbci	r25, 0xFD	; 253
     304:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__eerd_byte_m328p>
     308:	8a 83       	std	Y+2, r24	; 0x02
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
  TriPinRL = MEM_read_byte(&PinRLtab[TristatePin]);	// intruction for TristatePin R_L
     30a:	82 2d       	mov	r24, r2
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	8c 5a       	subi	r24, 0xAC	; 172
     310:	9d 4f       	sbci	r25, 0xFD	; 253
     312:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__eerd_byte_m328p>
     316:	d8 2e       	mov	r13, r24
  TriPinRH = TriPinRL + TriPinRL;			// intruction for TristatePin R_H
     318:	08 2f       	mov	r16, r24
     31a:	00 0f       	add	r16, r16
  HiPinRL = MEM_read_byte(&PinRLtab[HighPin]);		// intruction for HighPin R_L
     31c:	e1 2e       	mov	r14, r17
     31e:	ff 24       	eor	r15, r15
     320:	c7 01       	movw	r24, r14
     322:	8c 5a       	subi	r24, 0xAC	; 172
     324:	9d 4f       	sbci	r25, 0xFD	; 253
     326:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__eerd_byte_m328p>
     32a:	c8 2e       	mov	r12, r24
  HiPinRH = HiPinRL + HiPinRL;				// intruction for HighPin R_H
     32c:	28 2f       	mov	r18, r24
     32e:	22 0f       	add	r18, r18
     330:	28 87       	std	Y+8, r18	; 0x08

  HiADCp = MEM_read_byte(&PinADCtab[HighPin]);		// intruction for ADC High-Pin 
     332:	c7 01       	movw	r24, r14
     334:	89 5a       	subi	r24, 0xA9	; 169
     336:	9d 4f       	sbci	r25, 0xFD	; 253
     338:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__eerd_byte_m328p>
     33c:	89 83       	std	Y+1, r24	; 0x01
  LoADCp = MEM_read_byte(&PinADCtab[LowPin]);		// intruction for ADC Low-Pin
     33e:	c5 01       	movw	r24, r10
     340:	89 5a       	subi	r24, 0xA9	; 169
     342:	9d 4f       	sbci	r25, 0xFD	; 253
     344:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__eerd_byte_m328p>
  HiADCm = HiADCp | TXD_MSK;
     348:	39 81       	ldd	r19, Y+1	; 0x01
     34a:	38 60       	ori	r19, 0x08	; 8
     34c:	39 83       	std	Y+1, r19	; 0x01
  HiADCp |= TXD_VAL;
  LoADCm = LoADCp | TXD_MSK;
     34e:	88 60       	ori	r24, 0x08	; 8
     350:	8b 83       	std	Y+3, r24	; 0x03
  LoADCp |= TXD_VAL;

  //setting of Pins 
  R_PORT = 0;				//resistor-Port outputs to 0
     352:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//Low-Pin to output and across R_L to GND
     354:	8a 81       	ldd	r24, Y+2	; 0x02
     356:	84 b9       	out	0x04, r24	; 4
  ADC_DDR = HiADCm;		//High-Pin to output
     358:	37 b9       	out	0x07, r19	; 7
  ADC_PORT = HiADCp;		//High-Pin fix to Vcc
     35a:	38 b9       	out	0x08, r19	; 8
  //for some MOSFET the gate (TristatePin) must be discharged
  ChargePin10ms(TriPinRL,0);		//discharge for N-Kanal
     35c:	8d 2d       	mov	r24, r13
     35e:	60 e0       	ldi	r22, 0x00	; 0
     360:	0e 94 3e 01 	call	0x27c	; 0x27c <ChargePin10ms>
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin 
     364:	83 2d       	mov	r24, r3
     366:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
     36a:	9a 87       	std	Y+10, r25	; 0x0a
     36c:	89 87       	std	Y+9, r24	; 0x09
  if(adc.lp_otr >= 977) {		//no current now? 
     36e:	a3 e0       	ldi	r26, 0x03	; 3
     370:	81 3d       	cpi	r24, 0xD1	; 209
     372:	9a 07       	cpc	r25, r26
     374:	48 f0       	brcs	.+18     	; 0x388 <CheckPins+0xca>
     ChargePin10ms(TriPinRL,1);	 	//else: discharge for P-channel (Gate to VCC)
     376:	8d 2d       	mov	r24, r13
     378:	61 e0       	ldi	r22, 0x01	; 1
     37a:	0e 94 3e 01 	call	0x27c	; 0x27c <ChargePin10ms>
     adc.lp_otr = ReadADC(LowPin);	//read voltage of Low-Pin again
     37e:	83 2d       	mov	r24, r3
     380:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
     384:	9a 87       	std	Y+10, r25	; 0x0a
     386:	89 87       	std	Y+9, r24	; 0x09
  lcd_line2();
  lcd_clear_line();
  lcd_line2();
#endif

  if(adc.lp_otr > 92) {  //there is some current without TristatePin current 
     388:	e9 85       	ldd	r30, Y+9	; 0x09
     38a:	fa 85       	ldd	r31, Y+10	; 0x0a
     38c:	ed 35       	cpi	r30, 0x5D	; 93
     38e:	f1 05       	cpc	r31, r1
     390:	08 f4       	brcc	.+2      	; 0x394 <CheckPins+0xd6>
     392:	aa c0       	rjmp	.+340    	; 0x4e8 <CheckPins+0x22a>
     lcd_testpin(HighPin);
     lcd_space();
     wait1s();
#endif
     //Test if N-JFET or if self-conducting N-MOSFET
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
     394:	8a 81       	ldd	r24, Y+2	; 0x02
     396:	80 2b       	or	r24, r16
     398:	84 b9       	out	0x04, r24	; 4
     adc.lp1 = W20msReadADC(LowPin);	//measure voltage at the assumed Source 
     39a:	83 2d       	mov	r24, r3
     39c:	0e 94 1b 1a 	call	0x3436	; 0x3436 <W20msReadADC>
     3a0:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     3a2:	82 2d       	mov	r24, r2
     3a4:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
     3a8:	7c 01       	movw	r14, r24
     R_PORT = TriPinRH;			//switch R_H for Tristate-Pin (probably Gate) to VCC
     3aa:	05 b9       	out	0x05, r16	; 5
     adc.lp2 = W20msReadADC(LowPin);	//measure voltage at the assumed Source again
     3ac:	83 2d       	mov	r24, r3
     3ae:	0e 94 1b 1a 	call	0x3436	; 0x3436 <W20msReadADC>
     //If it is a self-conducting MOSFET or JFET, then must be: adc.lp2 > adc.lp1 
     if(adc.lp2>(adc.lp1+488)) {
     3b2:	95 01       	movw	r18, r10
     3b4:	28 51       	subi	r18, 0x18	; 24
     3b6:	3e 4f       	sbci	r19, 0xFE	; 254
     3b8:	28 17       	cp	r18, r24
     3ba:	39 07       	cpc	r19, r25
     3bc:	08 f0       	brcs	.+2      	; 0x3c0 <CheckPins+0x102>
     3be:	40 c0       	rjmp	.+128    	; 0x440 <CheckPins+0x182>
        //measure voltage at the  Gate, differ between MOSFET and JFET
        ADC_PORT = TXD_VAL;
     3c0:	88 e0       	ldi	r24, 0x08	; 8
     3c2:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = LoADCm;	//Low-Pin fix to GND
     3c4:	fb 81       	ldd	r31, Y+3	; 0x03
     3c6:	f7 b9       	out	0x07, r31	; 7
        R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     3c8:	80 2f       	mov	r24, r16
     3ca:	8c 29       	or	r24, r12
     3cc:	84 b9       	out	0x04, r24	; 4
        R_PORT = TriPinRH | HiPinRL;	//switch R_L for High-Pin to VCC
     3ce:	85 b9       	out	0x05, r24	; 5
        adc.lp2 = W20msReadADC(TristatePin); //read voltage of assumed Gate 
     3d0:	82 2d       	mov	r24, r2
     3d2:	0e 94 1b 1a 	call	0x3436	; 0x3436 <W20msReadADC>
        if(adc.lp2>3911) {  //MOSFET
     3d6:	2f e0       	ldi	r18, 0x0F	; 15
     3d8:	88 34       	cpi	r24, 0x48	; 72
     3da:	92 07       	cpc	r25, r18
     3dc:	28 f0       	brcs	.+10     	; 0x3e8 <CheckPins+0x12a>
           PartFound = PART_FET;	//N-Kanal-MOSFET
     3de:	83 e0       	ldi	r24, 0x03	; 3
     3e0:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_N_D_MOS; //Depletion-MOSFET
     3e4:	84 e0       	ldi	r24, 0x04	; 4
     3e6:	04 c0       	rjmp	.+8      	; 0x3f0 <CheckPins+0x132>
        } else {  //JFET (pn-passage between Gate and Source is conducting )
           PartFound = PART_FET;	//N-Kanal-JFET
     3e8:	83 e0       	ldi	r24, 0x03	; 3
     3ea:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_N_JFET;
     3ee:	86 e0       	ldi	r24, 0x06	; 6
     3f0:	80 93 06 01 	sts	0x0106, r24
        }
//      if ((PartReady == 0) || (adc.lp1 > trans.uBE[0])) 
//      there is no way to find out the right Source / Drain
        trans.uBE[0] = adc.lp1;
     3f4:	b0 92 4f 01 	sts	0x014F, r11
     3f8:	a0 92 4e 01 	sts	0x014E, r10
        gthvoltage = adc.lp1 - adc.tp1;	//voltage GS (Source - Gate)
     3fc:	c5 01       	movw	r24, r10
     3fe:	8e 19       	sub	r24, r14
     400:	9f 09       	sbc	r25, r15
     402:	90 93 57 01 	sts	0x0157, r25
     406:	80 93 56 01 	sts	0x0156, r24
        trans.uBE[1] = (unsigned int)(((unsigned long)adc.lp1 * 1000) / RR680MI); // Id 0.01mA
     40a:	b5 01       	movw	r22, r10
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	28 ee       	ldi	r18, 0xE8	; 232
     412:	33 e0       	ldi	r19, 0x03	; 3
     414:	40 e0       	ldi	r20, 0x00	; 0
     416:	50 e0       	ldi	r21, 0x00	; 0
     418:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
     41c:	20 91 02 01 	lds	r18, 0x0102
     420:	30 91 03 01 	lds	r19, 0x0103
     424:	40 e0       	ldi	r20, 0x00	; 0
     426:	50 e0       	ldi	r21, 0x00	; 0
     428:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
     42c:	30 93 51 01 	sts	0x0151, r19
     430:	20 93 50 01 	sts	0x0150, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     434:	20 92 52 01 	sts	0x0152, r2
        trans.c = HighPin;
     438:	10 93 53 01 	sts	0x0153, r17
        trans.e = LowPin;
     43c:	30 92 54 01 	sts	0x0154, r3
     }

     ADC_PORT = TXD_VAL;		// direct outputs to GND
     440:	88 e0       	ldi	r24, 0x08	; 8
     442:	88 b9       	out	0x08, r24	; 8

     //Test, if P-JFET or if self-conducting P-MOSFET
     ADC_DDR = LoADCm;		//switch Low-Pin (assumed Drain) direct to GND,
     444:	3b 81       	ldd	r19, Y+3	; 0x03
     446:	37 b9       	out	0x07, r19	; 7
				//R_H for Tristate-Pin (assumed Gate) is already switched to VCC
     R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     448:	80 2f       	mov	r24, r16
     44a:	8c 29       	or	r24, r12
     44c:	84 b9       	out	0x04, r24	; 4
     R_PORT = TriPinRH | HiPinRL;	//High-Pin across R_L to Vcc
     44e:	85 b9       	out	0x05, r24	; 5
     adc.hp1 = W20msReadADC(HighPin);	//measure voltage at assumed Source 
     450:	81 2f       	mov	r24, r17
     452:	0e 94 1b 1a 	call	0x3436	; 0x3436 <W20msReadADC>
     456:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     458:	82 2d       	mov	r24, r2
     45a:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
     45e:	7c 01       	movw	r14, r24
     R_PORT = HiPinRL;			//switch R_H for Tristate-Pin (assumed Gate) to GND
     460:	c5 b8       	out	0x05, r12	; 5
     adc.hp2 = W20msReadADC(HighPin);	//read voltage at assumed Source again
     462:	81 2f       	mov	r24, r17
     464:	0e 94 1b 1a 	call	0x3436	; 0x3436 <W20msReadADC>
     //if it is a self-conducting P_MOSFET or P-JFET , then must be:  adc.hp1 > adc.hp2 
     if(adc.hp1>(adc.hp2+488)) {
     468:	88 51       	subi	r24, 0x18	; 24
     46a:	9e 4f       	sbci	r25, 0xFE	; 254
     46c:	8a 15       	cp	r24, r10
     46e:	9b 05       	cpc	r25, r11
     470:	d8 f5       	brcc	.+118    	; 0x4e8 <CheckPins+0x22a>
        //read voltage at the Gate , to differ between MOSFET and JFET
        ADC_PORT = HiADCp;	//switch High-Pin directly to VCC
     472:	89 81       	ldd	r24, Y+1	; 0x01
     474:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = HiADCm;	//switch High-Pin to output
     476:	87 b9       	out	0x07, r24	; 7
        adc.tp2 = W20msReadADC(TristatePin); //read voltage at the assumed Gate 
     478:	82 2d       	mov	r24, r2
     47a:	0e 94 1b 1a 	call	0x3436	; 0x3436 <W20msReadADC>
        if(adc.tp2<977) { 		//MOSFET
     47e:	a3 e0       	ldi	r26, 0x03	; 3
     480:	81 3d       	cpi	r24, 0xD1	; 209
     482:	9a 07       	cpc	r25, r26
     484:	28 f4       	brcc	.+10     	; 0x490 <CheckPins+0x1d2>
           PartFound = PART_FET;	//P-Kanal-MOSFET
     486:	83 e0       	ldi	r24, 0x03	; 3
     488:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_D_MOS; //Depletion-MOSFET
     48c:	85 e0       	ldi	r24, 0x05	; 5
     48e:	04 c0       	rjmp	.+8      	; 0x498 <CheckPins+0x1da>
        } else { 			//JFET (pn-passage between Gate and Source is conducting)
           PartFound = PART_FET;	//P-Kanal-JFET
     490:	83 e0       	ldi	r24, 0x03	; 3
     492:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_JFET;
     496:	87 e0       	ldi	r24, 0x07	; 7
     498:	80 93 06 01 	sts	0x0106, r24
        }
        gthvoltage = adc.tp1 - adc.hp1;		//voltage GS (Gate - Source)
     49c:	ea 18       	sub	r14, r10
     49e:	fb 08       	sbc	r15, r11
     4a0:	f0 92 57 01 	sts	0x0157, r15
     4a4:	e0 92 56 01 	sts	0x0156, r14
        trans.uBE[1] = (unsigned int)(((unsigned long)(ADCconfig.U_AVCC - adc.hp1) * 1000) / RR680PL); // Id 0.01mA
     4a8:	60 91 3d 01 	lds	r22, 0x013D
     4ac:	70 91 3e 01 	lds	r23, 0x013E
     4b0:	6a 19       	sub	r22, r10
     4b2:	7b 09       	sbc	r23, r11
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	28 ee       	ldi	r18, 0xE8	; 232
     4ba:	33 e0       	ldi	r19, 0x03	; 3
     4bc:	40 e0       	ldi	r20, 0x00	; 0
     4be:	50 e0       	ldi	r21, 0x00	; 0
     4c0:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
     4c4:	20 91 08 01 	lds	r18, 0x0108
     4c8:	30 91 09 01 	lds	r19, 0x0109
     4cc:	40 e0       	ldi	r20, 0x00	; 0
     4ce:	50 e0       	ldi	r21, 0x00	; 0
     4d0:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
     4d4:	30 93 51 01 	sts	0x0151, r19
     4d8:	20 93 50 01 	sts	0x0150, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     4dc:	20 92 52 01 	sts	0x0152, r2
        trans.c = LowPin;
     4e0:	30 92 53 01 	sts	0x0153, r3
        trans.e = HighPin;
     4e4:	10 93 54 01 	sts	0x0154, r17
  } // end component has current without TristatePin signal


#ifdef COMMON_COLLECTOR
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
     4e8:	88 e0       	ldi	r24, 0x08	; 8
     4ea:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;			// Collector direct to GND
     4ec:	bb 81       	ldd	r27, Y+3	; 0x03
     4ee:	b7 b9       	out	0x07, r27	; 7
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
     4f0:	c5 b8       	out	0x05, r12	; 5
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
     4f2:	ec 2d       	mov	r30, r12
     4f4:	ed 29       	or	r30, r13
     4f6:	eb 87       	std	Y+11, r30	; 0x0b
     4f8:	e4 b9       	out	0x04, r30	; 4
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     4fa:	a0 90 3d 01 	lds	r10, 0x013D
     4fe:	b0 90 3e 01 	lds	r11, 0x013E
     502:	81 2f       	mov	r24, r17
     504:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
     508:	7c 01       	movw	r14, r24
  adc.tp1 = ReadADC(TristatePin);	// voltage at the base resistor
     50a:	82 2d       	mov	r24, r2
     50c:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
     510:	4c 01       	movw	r8, r24

  if (adc.tp1 < 10) {
     512:	8a 30       	cpi	r24, 0x0A	; 10
     514:	91 05       	cpc	r25, r1
     516:	68 f5       	brcc	.+90     	; 0x572 <CheckPins+0x2b4>
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
     518:	80 2f       	mov	r24, r16
     51a:	8c 29       	or	r24, r12
     51c:	84 b9       	out	0x04, r24	; 4
     adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);
     51e:	a0 90 3d 01 	lds	r10, 0x013D
     522:	b0 90 3e 01 	lds	r11, 0x013E
     526:	81 2f       	mov	r24, r17
     528:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
     52c:	a8 1a       	sub	r10, r24
     52e:	b9 0a       	sbc	r11, r25
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
     530:	82 2d       	mov	r24, r2
     532:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
     536:	4c 01       	movw	r8, r24
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     538:	25 01       	movw	r4, r10
     53a:	66 24       	eor	r6, r6
     53c:	77 24       	eor	r7, r7
     53e:	20 91 08 01 	lds	r18, 0x0108
     542:	30 91 09 01 	lds	r19, 0x0109
     546:	40 e0       	ldi	r20, 0x00	; 0
     548:	50 e0       	ldi	r21, 0x00	; 0
     54a:	60 e6       	ldi	r22, 0x60	; 96
     54c:	77 eb       	ldi	r23, 0xB7	; 183
     54e:	87 e4       	ldi	r24, 0x47	; 71
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
     556:	c3 01       	movw	r24, r6
     558:	b2 01       	movw	r22, r4
     55a:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
     55e:	94 01       	movw	r18, r8
     560:	40 e0       	ldi	r20, 0x00	; 0
     562:	50 e0       	ldi	r21, 0x00	; 0
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     564:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
     568:	2c 83       	std	Y+4, r18	; 0x04
     56a:	3d 83       	std	Y+5, r19	; 0x05
     56c:	4e 83       	std	Y+6, r20	; 0x06
     56e:	5f 83       	std	Y+7, r21	; 0x07
     570:	0f c0       	rjmp	.+30     	; 0x590 <CheckPins+0x2d2>
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
  ADC_DDR = LoADCm;			// Collector direct to GND
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     572:	ae 18       	sub	r10, r14
     574:	bf 08       	sbc	r11, r15
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
 #else
     c_hfe = ((adc.hp1 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
  } else {
     c_hfe = (unsigned long)((adc.hp1 - adc.tp1) / adc.tp1);
     576:	c5 01       	movw	r24, r10
     578:	88 19       	sub	r24, r8
     57a:	99 09       	sbc	r25, r9
     57c:	b4 01       	movw	r22, r8
     57e:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__udivmodhi4>
     582:	cb 01       	movw	r24, r22
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e0       	ldi	r27, 0x00	; 0
     588:	8c 83       	std	Y+4, r24	; 0x04
     58a:	9d 83       	std	Y+5, r25	; 0x05
     58c:	ae 83       	std	Y+6, r26	; 0x06
     58e:	bf 83       	std	Y+7, r27	; 0x07
  }
#endif

  //set Pins again for circuit with common Emitter PNP
  R_DDR = LoPinRL;		//switch R_L port for Low-Pin to output (GND)
     590:	9a 81       	ldd	r25, Y+2	; 0x02
     592:	94 b9       	out	0x04, r25	; 4
  R_PORT = 0;			//switch all resistor ports to GND
     594:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = HiADCm;		//switch High-Pin to output
     596:	a9 81       	ldd	r26, Y+1	; 0x01
     598:	a7 b9       	out	0x07, r26	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
     59a:	a8 b9       	out	0x08, r26	; 8
  wait5ms();
     59c:	0e 94 65 14 	call	0x28ca	; 0x28ca <wait5ms>
  
  if(adc.lp_otr < 977) {
     5a0:	e9 85       	ldd	r30, Y+9	; 0x09
     5a2:	fa 85       	ldd	r31, Y+10	; 0x0a
     5a4:	23 e0       	ldi	r18, 0x03	; 3
     5a6:	e1 3d       	cpi	r30, 0xD1	; 209
     5a8:	f2 07       	cpc	r31, r18
     5aa:	08 f0       	brcs	.+2      	; 0x5ae <CheckPins+0x2f0>
     5ac:	a2 c2       	rjmp	.+1348   	; 0xaf2 <__stack+0x1f3>
     lcd_testpin(HighPin);
     lcd_space();
     wait1s();
#endif
     //Test to PNP
     R_DDR = LoPinRL | TriPinRL;	//switch R_L port for Tristate-Pin to output (GND), for Test of PNP
     5ae:	3a 81       	ldd	r19, Y+2	; 0x02
     5b0:	3d 29       	or	r19, r13
     5b2:	3f 87       	std	Y+15, r19	; 0x0f
     5b4:	34 b9       	out	0x04, r19	; 4
     adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin
     5b6:	83 2d       	mov	r24, r3
     5b8:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
     if(adc.lp1 > 3422) {
     5bc:	ad e0       	ldi	r26, 0x0D	; 13
     5be:	8f 35       	cpi	r24, 0x5F	; 95
     5c0:	9a 07       	cpc	r25, r26
     5c2:	08 f4       	brcc	.+2      	; 0x5c6 <CheckPins+0x308>
     5c4:	e1 c0       	rjmp	.+450    	; 0x788 <CheckPins+0x4ca>
        //component has current => PNP-Transistor or equivalent
        //compute current amplification factor in both directions
        R_DDR = LoPinRL | TriPinRH;	//switch R_H port for Tristate-Pin (Base) to output (GND)
     5c6:	ba 81       	ldd	r27, Y+2	; 0x02
     5c8:	b0 2b       	or	r27, r16
     5ca:	b8 8b       	std	Y+16, r27	; 0x10
     5cc:	b4 b9       	out	0x04, r27	; 4

        adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin (assumed Collector)
     5ce:	83 2d       	mov	r24, r3
     5d0:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
     5d4:	9a 8b       	std	Y+18, r25	; 0x12
     5d6:	89 8b       	std	Y+17, r24	; 0x11
        adc.tp2 = ReadADC(TristatePin);	//measure voltage at TristatePin (Base) 
     5d8:	82 2d       	mov	r24, r2
     5da:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
     5de:	9d 8b       	std	Y+21, r25	; 0x15
     5e0:	8c 8b       	std	Y+20, r24	; 0x14
        //check, if Test is done before 
        if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     5e2:	80 91 07 01 	lds	r24, 0x0107
     5e6:	82 50       	subi	r24, 0x02	; 2
     5e8:	82 30       	cpi	r24, 0x02	; 2
     5ea:	18 f4       	brcc	.+6      	; 0x5f2 <CheckPins+0x334>
           PartReady = 1;
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	80 93 04 01 	sts	0x0104, r24
        }
        trans.uBE[PartReady] = ReadADC(HighPin) - adc.tp2;	// Base Emitter Voltage
     5f2:	e0 90 04 01 	lds	r14, 0x0104
     5f6:	ff 24       	eor	r15, r15
     5f8:	81 2f       	mov	r24, r17
     5fa:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
     5fe:	f7 01       	movw	r30, r14
     600:	ee 0f       	add	r30, r30
     602:	ff 1f       	adc	r31, r31
     604:	e2 5b       	subi	r30, 0xB2	; 178
     606:	fe 4f       	sbci	r31, 0xFE	; 254
     608:	2c 89       	ldd	r18, Y+20	; 0x14
     60a:	3d 89       	ldd	r19, Y+21	; 0x15
     60c:	82 1b       	sub	r24, r18
     60e:	93 0b       	sbc	r25, r19
     610:	91 83       	std	Z+1, r25	; 0x01
     612:	80 83       	st	Z, r24

        //compute current amplification factor for circuit with common Emitter
        //hFE = B = Collector current / Base current
        if(adc.tp2 < 53) {
     614:	25 33       	cpi	r18, 0x35	; 53
     616:	31 05       	cpc	r19, r1
     618:	20 f4       	brcc	.+8      	; 0x622 <CheckPins+0x364>
#if DebugOut == 5
           lcd_data('<');
           lcd_data('5');
           lcd_data('3');
#endif
           adc.tp2 = 53;
     61a:	85 e3       	ldi	r24, 0x35	; 53
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	9d 8b       	std	Y+21, r25	; 0x15
     620:	8c 8b       	std	Y+20, r24	; 0x14
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     622:	e0 90 04 01 	lds	r14, 0x0104
     626:	ff 24       	eor	r15, r15
     628:	a9 89       	ldd	r26, Y+17	; 0x11
     62a:	ba 89       	ldd	r27, Y+18	; 0x12
     62c:	2d 01       	movw	r4, r26
     62e:	66 24       	eor	r6, r6
     630:	77 24       	eor	r7, r7
     632:	20 91 02 01 	lds	r18, 0x0102
     636:	30 91 03 01 	lds	r19, 0x0103
     63a:	40 e0       	ldi	r20, 0x00	; 0
     63c:	50 e0       	ldi	r21, 0x00	; 0
     63e:	60 e6       	ldi	r22, 0x60	; 96
     640:	77 eb       	ldi	r23, 0xB7	; 183
     642:	87 e4       	ldi	r24, 0x47	; 71
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
     64a:	c3 01       	movw	r24, r6
     64c:	b2 01       	movw	r22, r4
     64e:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
                 (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
     652:	ec 89       	ldd	r30, Y+20	; 0x14
     654:	fd 89       	ldd	r31, Y+21	; 0x15
     656:	9f 01       	movw	r18, r30
     658:	40 e0       	ldi	r20, 0x00	; 0
     65a:	50 e0       	ldi	r21, 0x00	; 0
     65c:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
#endif
           adc.tp2 = 53;
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     660:	f7 01       	movw	r30, r14
     662:	ee 0f       	add	r30, r30
     664:	ff 1f       	adc	r31, r31
     666:	ee 0f       	add	r30, r30
     668:	ff 1f       	adc	r31, r31
     66a:	ea 5b       	subi	r30, 0xBA	; 186
     66c:	fe 4f       	sbci	r31, 0xFE	; 254
     66e:	20 83       	st	Z, r18
     670:	31 83       	std	Z+1, r19	; 0x01
     672:	42 83       	std	Z+2, r20	; 0x02
     674:	53 83       	std	Z+3, r21	; 0x03
        trans.hfe[PartReady] = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
#ifdef COMMON_COLLECTOR
        //current amplification factor for common  Collector (Emitter follower)
        // c_hFE = (Emitter current - Base current) / Base current
        if (c_hfe > trans.hfe[PartReady]) {
     676:	8c 81       	ldd	r24, Y+4	; 0x04
     678:	9d 81       	ldd	r25, Y+5	; 0x05
     67a:	ae 81       	ldd	r26, Y+6	; 0x06
     67c:	bf 81       	ldd	r27, Y+7	; 0x07
     67e:	28 17       	cp	r18, r24
     680:	39 07       	cpc	r19, r25
     682:	4a 07       	cpc	r20, r26
     684:	5b 07       	cpc	r21, r27
     686:	98 f4       	brcc	.+38     	; 0x6ae <CheckPins+0x3f0>
           trans.hfe[PartReady] = c_hfe;
     688:	80 83       	st	Z, r24
     68a:	91 83       	std	Z+1, r25	; 0x01
     68c:	a2 83       	std	Z+2, r26	; 0x02
     68e:	b3 83       	std	Z+3, r27	; 0x03
           trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.hp1 - adc.tp1;	// Base Emitter Voltage common collector
     690:	f7 01       	movw	r30, r14
     692:	ee 0f       	add	r30, r30
     694:	ff 1f       	adc	r31, r31
     696:	e2 5b       	subi	r30, 0xB2	; 178
     698:	fe 4f       	sbci	r31, 0xFE	; 254
     69a:	80 91 3d 01 	lds	r24, 0x013D
     69e:	90 91 3e 01 	lds	r25, 0x013E
     6a2:	8a 19       	sub	r24, r10
     6a4:	9b 09       	sbc	r25, r11
     6a6:	88 19       	sub	r24, r8
     6a8:	99 09       	sbc	r25, r9
     6aa:	91 83       	std	Z+1, r25	; 0x01
     6ac:	80 83       	st	Z, r24
        }
#endif

 
        if(PartFound != PART_THYRISTOR) {
     6ae:	80 91 07 01 	lds	r24, 0x0107
     6b2:	85 30       	cpi	r24, 0x05	; 5
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <CheckPins+0x3fa>
     6b6:	68 c0       	rjmp	.+208    	; 0x788 <CheckPins+0x4ca>
           if(adc.tp2 > 977) {
     6b8:	ac 89       	ldd	r26, Y+20	; 0x14
     6ba:	bd 89       	ldd	r27, Y+21	; 0x15
     6bc:	e3 e0       	ldi	r30, 0x03	; 3
     6be:	a2 3d       	cpi	r26, 0xD2	; 210
     6c0:	be 07       	cpc	r27, r30
     6c2:	30 f0       	brcs	.+12     	; 0x6d0 <CheckPins+0x412>
              //PNP-Transistor is found (Base voltage moves to VCC)
              PartFound = PART_TRANSISTOR;
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	80 93 07 01 	sts	0x0107, r24
              PartMode = PART_MODE_PNP;
     6ca:	80 93 06 01 	sts	0x0106, r24
     6ce:	56 c0       	rjmp	.+172    	; 0x77c <CheckPins+0x4be>
           } else {
              if((adc.lp_otr < 97) && (adc.lp1 > 2000)) {
     6d0:	29 85       	ldd	r18, Y+9	; 0x09
     6d2:	3a 85       	ldd	r19, Y+10	; 0x0a
     6d4:	21 36       	cpi	r18, 0x61	; 97
     6d6:	31 05       	cpc	r19, r1
     6d8:	08 f0       	brcs	.+2      	; 0x6dc <CheckPins+0x41e>
     6da:	50 c0       	rjmp	.+160    	; 0x77c <CheckPins+0x4be>
     6dc:	89 89       	ldd	r24, Y+17	; 0x11
     6de:	9a 89       	ldd	r25, Y+18	; 0x12
     6e0:	a7 e0       	ldi	r26, 0x07	; 7
     6e2:	81 3d       	cpi	r24, 0xD1	; 209
     6e4:	9a 07       	cpc	r25, r26
     6e6:	08 f4       	brcc	.+2      	; 0x6ea <CheckPins+0x42c>
     6e8:	49 c0       	rjmp	.+146    	; 0x77c <CheckPins+0x4be>
                 //is flow voltage low enough in the closed  state?
                 //(since D-Mode-FET would be by mistake detected as E-Mode )
        	 PartFound = PART_FET;		//P-Kanal-MOSFET is found (Basis/Gate moves not to VCC)
     6ea:	83 e0       	ldi	r24, 0x03	; 3
     6ec:	80 93 07 01 	sts	0x0107, r24
        	 PartMode = PART_MODE_P_E_MOS;
     6f0:	80 93 06 01 	sts	0x0106, r24
                 }
#else
                 //Switching of Drain is monitored with digital input
                 // Low level is specified up to 0.3 * VCC
                 // High level is specified above 0.6 * VCC
                 PinMSK = LoADCm & 7;
     6f4:	eb 80       	ldd	r14, Y+3	; 0x03
     6f6:	b7 e0       	ldi	r27, 0x07	; 7
     6f8:	eb 22       	and	r14, r27
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
     6fa:	82 2d       	mov	r24, r2
     6fc:	80 64       	ori	r24, 0x40	; 64
     6fe:	80 93 7c 00 	sts	0x007C, r24
        	 gthvoltage = 1;			// round up ((1*4)/9)
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	90 93 57 01 	sts	0x0157, r25
     70a:	80 93 56 01 	sts	0x0156, r24
        	 for(ii=0;ii<11;ii++) {
     70e:	40 e0       	ldi	r20, 0x00	; 0
        	    wdt_reset();
     710:	a8 95       	wdr
        	    ChargePin10ms(TriPinRL,1);
     712:	8d 2d       	mov	r24, r13
     714:	61 e0       	ldi	r22, 0x01	; 1
     716:	4e 8b       	std	Y+22, r20	; 0x16
     718:	0e 94 3e 01 	call	0x27c	; 0x27c <ChargePin10ms>
                    R_DDR = LoPinRL | TriPinRH;		//switch R_H for Tristate-Pin (Basis) to GND
     71c:	e8 89       	ldd	r30, Y+16	; 0x10
     71e:	e4 b9       	out	0x04, r30	; 4
     720:	4e 89       	ldd	r20, Y+22	; 0x16
        	    while (!(ADC_PIN&PinMSK));		// Wait, until the MOSFET switches and Drain moves to VCC
     722:	86 b1       	in	r24, 0x06	; 6
     724:	8e 21       	and	r24, r14
     726:	e9 f3       	breq	.-6      	; 0x722 <CheckPins+0x464>
                    			// 1 is detected with more than 2.5V (up to 2.57V) with tests of mega168 and mega328
        	    R_DDR = LoPinRL;
     728:	fa 81       	ldd	r31, Y+2	; 0x02
     72a:	f4 b9       	out	0x04, r31	; 4
        	    ADCSRA |= (1<<ADSC);		// Start Conversion
     72c:	80 91 7a 00 	lds	r24, 0x007A
     730:	80 64       	ori	r24, 0x40	; 64
     732:	80 93 7a 00 	sts	0x007A, r24
        	    while (ADCSRA&(1<<ADSC));		// wait
     736:	80 91 7a 00 	lds	r24, 0x007A
     73a:	86 fd       	sbrc	r24, 6
     73c:	fc cf       	rjmp	.-8      	; 0x736 <CheckPins+0x478>
      		    gthvoltage += (1023 - ADCW);	// Add Tristatepin-Voltage
     73e:	20 91 78 00 	lds	r18, 0x0078
     742:	30 91 79 00 	lds	r19, 0x0079
     746:	80 91 56 01 	lds	r24, 0x0156
     74a:	90 91 57 01 	lds	r25, 0x0157
     74e:	81 50       	subi	r24, 0x01	; 1
     750:	9c 4f       	sbci	r25, 0xFC	; 252
     752:	82 1b       	sub	r24, r18
     754:	93 0b       	sbc	r25, r19
     756:	90 93 57 01 	sts	0x0157, r25
     75a:	80 93 56 01 	sts	0x0156, r24
                 // Low level is specified up to 0.3 * VCC
                 // High level is specified above 0.6 * VCC
                 PinMSK = LoADCm & 7;
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
        	 gthvoltage = 1;			// round up ((1*4)/9)
        	 for(ii=0;ii<11;ii++) {
     75e:	4f 5f       	subi	r20, 0xFF	; 255
     760:	4b 30       	cpi	r20, 0x0B	; 11
     762:	b1 f6       	brne	.-84     	; 0x710 <CheckPins+0x452>
        	    ADCSRA |= (1<<ADSC);		// Start Conversion
        	    while (ADCSRA&(1<<ADSC));		// wait
      		    gthvoltage += (1023 - ADCW);	// Add Tristatepin-Voltage
                 }
#endif
                 gthvoltage *= 4;		// is equal to 44*ADCW
     764:	88 0f       	add	r24, r24
     766:	99 1f       	adc	r25, r25
     768:	88 0f       	add	r24, r24
     76a:	99 1f       	adc	r25, r25
                 gthvoltage /= 9;		// gives resolution in mV
     76c:	69 e0       	ldi	r22, 0x09	; 9
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__udivmodhi4>
     774:	70 93 57 01 	sts	0x0157, r23
     778:	60 93 56 01 	sts	0x0156, r22
              }
           }
           trans.b = TristatePin;
     77c:	20 92 52 01 	sts	0x0152, r2
           trans.c = LowPin;
     780:	30 92 53 01 	sts	0x0153, r3
           trans.e = HighPin;
     784:	10 93 54 01 	sts	0x0154, r17
        }  // end if PartFound != PART_THYRISTOR
    } // end component has current => PNP

#ifdef COMMON_COLLECTOR
    // Low-Pin=RL- HighPin=VCC
    R_DDR = LoPinRL | TriPinRL;
     788:	2f 85       	ldd	r18, Y+15	; 0x0f
     78a:	24 b9       	out	0x04, r18	; 4
    R_PORT = TriPinRL;			// TriPin=RL+  NPN with common Collector
     78c:	d5 b8       	out	0x05, r13	; 5
    adc.lp1 = W5msReadADC(LowPin);	// voltage at Emitter resistor
     78e:	83 2d       	mov	r24, r3
     790:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
     794:	2c 01       	movw	r4, r24
    adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     796:	80 91 3d 01 	lds	r24, 0x013D
     79a:	90 91 3e 01 	lds	r25, 0x013E
     79e:	9a 8b       	std	Y+18, r25	; 0x12
     7a0:	89 8b       	std	Y+17, r24	; 0x11
     7a2:	82 2d       	mov	r24, r2
     7a4:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
     7a8:	a9 89       	ldd	r26, Y+17	; 0x11
     7aa:	ba 89       	ldd	r27, Y+18	; 0x12
     7ac:	a8 1b       	sub	r26, r24
     7ae:	b9 0b       	sbc	r27, r25
     7b0:	ba 8b       	std	Y+18, r27	; 0x12
     7b2:	a9 8b       	std	Y+17, r26	; 0x11
    if (adc.tp1 < 10) {
     7b4:	aa 30       	cpi	r26, 0x0A	; 10
     7b6:	b1 05       	cpc	r27, r1
     7b8:	b0 f5       	brcc	.+108    	; 0x826 <CheckPins+0x568>
       R_DDR = LoPinRL | TriPinRH;
     7ba:	8a 81       	ldd	r24, Y+2	; 0x02
     7bc:	80 2b       	or	r24, r16
     7be:	84 b9       	out	0x04, r24	; 4
       R_PORT = TriPinRH;		// Tripin=RH+
     7c0:	05 b9       	out	0x05, r16	; 5
       adc.lp1 = W5msReadADC(LowPin);
     7c2:	83 2d       	mov	r24, r3
     7c4:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
     7c8:	2c 01       	movw	r4, r24
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     7ca:	e0 91 3d 01 	lds	r30, 0x013D
     7ce:	f0 91 3e 01 	lds	r31, 0x013E
     7d2:	fa 8b       	std	Y+18, r31	; 0x12
     7d4:	e9 8b       	std	Y+17, r30	; 0x11
     7d6:	82 2d       	mov	r24, r2
     7d8:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
     7dc:	29 89       	ldd	r18, Y+17	; 0x11
     7de:	3a 89       	ldd	r19, Y+18	; 0x12
     7e0:	28 1b       	sub	r18, r24
     7e2:	39 0b       	sbc	r19, r25
     7e4:	3a 8b       	std	Y+18, r19	; 0x12
     7e6:	29 8b       	std	Y+17, r18	; 0x11
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     7e8:	42 01       	movw	r8, r4
     7ea:	aa 24       	eor	r10, r10
     7ec:	bb 24       	eor	r11, r11
     7ee:	20 91 02 01 	lds	r18, 0x0102
     7f2:	30 91 03 01 	lds	r19, 0x0103
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	60 e6       	ldi	r22, 0x60	; 96
     7fc:	77 eb       	ldi	r23, 0xB7	; 183
     7fe:	87 e4       	ldi	r24, 0x47	; 71
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
     806:	c5 01       	movw	r24, r10
     808:	b4 01       	movw	r22, r8
     80a:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
     80e:	a9 89       	ldd	r26, Y+17	; 0x11
     810:	ba 89       	ldd	r27, Y+18	; 0x12
     812:	9d 01       	movw	r18, r26
     814:	40 e0       	ldi	r20, 0x00	; 0
     816:	50 e0       	ldi	r21, 0x00	; 0
       R_DDR = LoPinRL | TriPinRH;
       R_PORT = TriPinRH;		// Tripin=RH+
       adc.lp1 = W5msReadADC(LowPin);
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     818:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
     81c:	2c 83       	std	Y+4, r18	; 0x04
     81e:	3d 83       	std	Y+5, r19	; 0x05
     820:	4e 83       	std	Y+6, r20	; 0x06
     822:	5f 83       	std	Y+7, r21	; 0x07
     824:	0f c0       	rjmp	.+30     	; 0x844 <CheckPins+0x586>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
 #else
       c_hfe = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
    } else {
       c_hfe = (adc.lp1 - adc.tp1) / adc.tp1;
     826:	c2 01       	movw	r24, r4
     828:	e9 89       	ldd	r30, Y+17	; 0x11
     82a:	fa 89       	ldd	r31, Y+18	; 0x12
     82c:	8e 1b       	sub	r24, r30
     82e:	9f 0b       	sbc	r25, r31
     830:	bf 01       	movw	r22, r30
     832:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__udivmodhi4>
     836:	cb 01       	movw	r24, r22
     838:	a0 e0       	ldi	r26, 0x00	; 0
     83a:	b0 e0       	ldi	r27, 0x00	; 0
     83c:	8c 83       	std	Y+4, r24	; 0x04
     83e:	9d 83       	std	Y+5, r25	; 0x05
     840:	ae 83       	std	Y+6, r26	; 0x06
     842:	bf 83       	std	Y+7, r27	; 0x07
       lcd_string(utoa(adc.tp1,outval,10));
       wait1s();
#endif
#endif
    //Tristate (can be Base) to VCC, Test if NPN
    ADC_DDR = LoADCm;		//Low-Pin to output 0V
     844:	9b 81       	ldd	r25, Y+3	; 0x03
     846:	97 b9       	out	0x07, r25	; 7
    ADC_PORT = TXD_VAL;			//switch Low-Pin to GND
     848:	88 e0       	ldi	r24, 0x08	; 8
     84a:	88 b9       	out	0x08, r24	; 8
    R_DDR = TriPinRL | HiPinRL;		//RL port for High-Pin and Tristate-Pin to output
     84c:	ab 85       	ldd	r26, Y+11	; 0x0b
     84e:	a4 b9       	out	0x04, r26	; 4
    R_PORT = TriPinRL | HiPinRL;	//RL port for High-Pin and Tristate-Pin to Vcc
     850:	a5 b9       	out	0x05, r26	; 5
    adc.hp1 = W5msReadADC(HighPin);	//measure voltage at High-Pin  (Collector)
     852:	81 2f       	mov	r24, r17
     854:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
    if(adc.hp1 < 1600) {
     858:	b6 e0       	ldi	r27, 0x06	; 6
     85a:	80 34       	cpi	r24, 0x40	; 64
     85c:	9b 07       	cpc	r25, r27
     85e:	08 f0       	brcs	.+2      	; 0x862 <CheckPins+0x5a4>
     860:	44 c1       	rjmp	.+648    	; 0xaea <__stack+0x1eb>
       lcd_data('N');
       lcd_testpin(HighPin);
       lcd_space();
       wait1s();
#endif
       if(PartReady==1) {
     862:	80 91 04 01 	lds	r24, 0x0104
     866:	81 30       	cpi	r24, 0x01	; 1
     868:	09 f4       	brne	.+2      	; 0x86c <CheckPins+0x5ae>
     86a:	ac c1       	rjmp	.+856    	; 0xbc4 <__stack+0x2c5>
          goto widmes;
       }

       //Test auf Thyristor:
       //Gate discharge
       ChargePin10ms(TriPinRL,0);	//Tristate-Pin (Gate) across R_L 10ms to GND
     86c:	8d 2d       	mov	r24, r13
     86e:	60 e0       	ldi	r22, 0x00	; 0
     870:	0e 94 3e 01 	call	0x27c	; 0x27c <ChargePin10ms>
       adc.hp3 = W5msReadADC(HighPin);	//read voltage at High-Pin (probably Anode) again
     874:	81 2f       	mov	r24, r17
     876:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
     87a:	7c 01       	movw	r14, r24
					//current should still flow, if not,
					// no Thyristor or holding current to low 
		 	
       R_PORT = 0;			//switch R_L for High-Pin (probably Anode) to GND (turn off)
     87c:	15 b8       	out	0x05, r1	; 5
       wait5ms();
     87e:	0e 94 65 14 	call	0x28ca	; 0x28ca <wait5ms>
       R_PORT = HiPinRL;		//switch R_L for High-Pin (probably Anode) again to VCC
     882:	c5 b8       	out	0x05, r12	; 5
       adc.hp2 = W5msReadADC(HighPin);	//measure voltage at the High-Pin (probably Anode) again
     884:	81 2f       	mov	r24, r17
     886:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
       if((adc.hp3 < 1600) && (adc.hp2 > 4400)) {
     88a:	e0 e4       	ldi	r30, 0x40	; 64
     88c:	ee 16       	cp	r14, r30
     88e:	e6 e0       	ldi	r30, 0x06	; 6
     890:	fe 06       	cpc	r15, r30
     892:	08 f0       	brcs	.+2      	; 0x896 <CheckPins+0x5d8>
     894:	42 c0       	rjmp	.+132    	; 0x91a <__stack+0x1b>
     896:	f1 e1       	ldi	r31, 0x11	; 17
     898:	81 33       	cpi	r24, 0x31	; 49
     89a:	9f 07       	cpc	r25, r31
     89c:	f0 f1       	brcs	.+124    	; 0x91a <__stack+0x1b>
          //if the holding current was switched off the thyristor must be switched off too. 
          //if Thyristor was still swiched on, if gate was switched off => Thyristor
          PartFound = PART_THYRISTOR;
     89e:	85 e0       	ldi	r24, 0x05	; 5
     8a0:	80 93 07 01 	sts	0x0107, r24
          //Test if Triac
          R_DDR = 0;
     8a4:	14 b8       	out	0x04, r1	; 4
          R_PORT = 0;
     8a6:	15 b8       	out	0x05, r1	; 5
          ADC_PORT = LoADCp;	//Low-Pin fix to VCC
     8a8:	2b 81       	ldd	r18, Y+3	; 0x03
     8aa:	28 b9       	out	0x08, r18	; 8
          wait5ms();
     8ac:	0e 94 65 14 	call	0x28ca	; 0x28ca <wait5ms>
          R_DDR = HiPinRL;		//switch R_L port HighPin to output (GND)
     8b0:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) > 244) {
     8b2:	81 2f       	mov	r24, r17
     8b4:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
     8b8:	85 3f       	cpi	r24, 0xF5	; 245
     8ba:	91 05       	cpc	r25, r1
     8bc:	08 f0       	brcs	.+2      	; 0x8c0 <CheckPins+0x602>
     8be:	0f c1       	rjmp	.+542    	; 0xade <__stack+0x1df>
             goto savenresult;		//measure voltage at the  High-Pin (probably A2); if too high:
                                	//component has current => kein Triac
          }
          R_DDR = HiPinRL | TriPinRL;	//switch R_L port for TristatePin (Gate) to output (GND) => Triac should be triggered 
     8c0:	3b 85       	ldd	r19, Y+11	; 0x0b
     8c2:	34 b9       	out	0x04, r19	; 4
          if(W5msReadADC(TristatePin) < 977) {
     8c4:	82 2d       	mov	r24, r2
     8c6:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
     8ca:	a3 e0       	ldi	r26, 0x03	; 3
     8cc:	81 3d       	cpi	r24, 0xD1	; 209
     8ce:	9a 07       	cpc	r25, r26
     8d0:	08 f4       	brcc	.+2      	; 0x8d4 <CheckPins+0x616>
     8d2:	05 c1       	rjmp	.+522    	; 0xade <__stack+0x1df>
             goto savenresult; 		//measure voltage at the Tristate-Pin (probably Gate) ;
                              		// if to low, abort 
          }
          if(ReadADC(HighPin) < 733) {
     8d4:	81 2f       	mov	r24, r17
     8d6:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
     8da:	b2 e0       	ldi	r27, 0x02	; 2
     8dc:	8d 3d       	cpi	r24, 0xDD	; 221
     8de:	9b 07       	cpc	r25, r27
     8e0:	08 f4       	brcc	.+2      	; 0x8e4 <CheckPins+0x626>
     8e2:	fd c0       	rjmp	.+506    	; 0xade <__stack+0x1df>
             goto savenresult; 		//component has no current => no Triac => abort
          }
          R_DDR = HiPinRL;		//TristatePin (Gate) to input 
     8e4:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) < 733) {
     8e6:	81 2f       	mov	r24, r17
     8e8:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
     8ec:	e2 e0       	ldi	r30, 0x02	; 2
     8ee:	8d 3d       	cpi	r24, 0xDD	; 221
     8f0:	9e 07       	cpc	r25, r30
     8f2:	08 f4       	brcc	.+2      	; 0x8f6 <CheckPins+0x638>
     8f4:	f4 c0       	rjmp	.+488    	; 0xade <__stack+0x1df>
             goto savenresult; 		//component has no current without base current => no Triac => abort
          }
          R_PORT = HiPinRL;		//switch R_L port for HighPin to VCC => switch off holding current 
     8f6:	c5 b8       	out	0x05, r12	; 5
          wait5ms();
     8f8:	0e 94 65 14 	call	0x28ca	; 0x28ca <wait5ms>
          R_PORT = 0;			//switch R_L port for HighPin again to GND; Triac should now switched off
     8fc:	15 b8       	out	0x05, r1	; 5
          if(W5msReadADC(HighPin) > 244) {
     8fe:	81 2f       	mov	r24, r17
     900:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
     904:	85 3f       	cpi	r24, 0xF5	; 245
     906:	91 05       	cpc	r25, r1
     908:	08 f0       	brcs	.+2      	; 0x90c <__stack+0xd>
     90a:	e9 c0       	rjmp	.+466    	; 0xade <__stack+0x1df>
             goto savenresult;		//measure voltage at the High-Pin (probably A2) ;
                                	//if to high, component is not switched off => no Triac, abort
         }
         PartFound = PART_TRIAC;
     90c:	84 e0       	ldi	r24, 0x04	; 4
     90e:	80 93 07 01 	sts	0x0107, r24
         PartReady = 1;
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	80 93 04 01 	sts	0x0104, r24
         goto savenresult;
     918:	e2 c0       	rjmp	.+452    	; 0xade <__stack+0x1df>
        }
      //Test if NPN Transistor or MOSFET
      // ADC_DDR = LoADCm;	//Low-Pin to output 0V
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
     91a:	0c 29       	or	r16, r12
     91c:	04 b9       	out	0x04, r16	; 4
      R_PORT = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to VCC
     91e:	05 b9       	out	0x05, r16	; 5
      wait50ms();
     920:	0e 94 60 14 	call	0x28c0	; 0x28c0 <wait50ms>
      adc.hp2 = ADCconfig.U_AVCC - ReadADC(HighPin);	//measure the voltage at the collector resistor 
     924:	60 90 3d 01 	lds	r6, 0x013D
     928:	70 90 3e 01 	lds	r7, 0x013E
     92c:	81 2f       	mov	r24, r17
     92e:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
     932:	68 1a       	sub	r6, r24
     934:	79 0a       	sbc	r7, r25
      adc.tp2 = ADCconfig.U_AVCC - ReadADC(TristatePin);	//measure the voltage at the base resistor 
     936:	a0 90 3d 01 	lds	r10, 0x013D
     93a:	b0 90 3e 01 	lds	r11, 0x013E
     93e:	82 2d       	mov	r24, r2
     940:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
     944:	a8 1a       	sub	r10, r24
     946:	b9 0a       	sbc	r11, r25
       lcd_space();
       lcd_data('T');
       lcd_data('P');
       lcd_string(utoa(adc.tp2,outval,10));
#endif
      if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     948:	80 91 07 01 	lds	r24, 0x0107
     94c:	82 50       	subi	r24, 0x02	; 2
     94e:	82 30       	cpi	r24, 0x02	; 2
     950:	18 f4       	brcc	.+6      	; 0x958 <__stack+0x59>
         PartReady = 1;	//check, if test is already done once
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	80 93 04 01 	sts	0x0104, r24
      }
      trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.tp2 - ReadADC(LowPin);
     958:	80 90 04 01 	lds	r8, 0x0104
     95c:	99 24       	eor	r9, r9
     95e:	e0 90 3d 01 	lds	r14, 0x013D
     962:	f0 90 3e 01 	lds	r15, 0x013E
     966:	ea 18       	sub	r14, r10
     968:	fb 08       	sbc	r15, r11
     96a:	83 2d       	mov	r24, r3
     96c:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
     970:	f4 01       	movw	r30, r8
     972:	ee 0f       	add	r30, r30
     974:	ff 1f       	adc	r31, r31
     976:	e2 5b       	subi	r30, 0xB2	; 178
     978:	fe 4f       	sbci	r31, 0xFE	; 254
     97a:	e8 1a       	sub	r14, r24
     97c:	f9 0a       	sbc	r15, r25
     97e:	f1 82       	std	Z+1, r15	; 0x01
     980:	e0 82       	st	Z, r14

      //compute current amplification factor for common Emitter
      //hFE = B = Collector current / Base current
      if(adc.tp2 < 53) {
     982:	f5 e3       	ldi	r31, 0x35	; 53
     984:	af 16       	cp	r10, r31
     986:	b1 04       	cpc	r11, r1
     988:	18 f4       	brcc	.+6      	; 0x990 <__stack+0x91>
#if DebugOut == 5
         lcd_data('<');
         lcd_data('5');
         lcd_data('3');
#endif
         adc.tp2 = 53;
     98a:	85 e3       	ldi	r24, 0x35	; 53
     98c:	a8 2e       	mov	r10, r24
     98e:	b1 2c       	mov	r11, r1
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     990:	e0 90 04 01 	lds	r14, 0x0104
     994:	ff 24       	eor	r15, r15
     996:	c3 01       	movw	r24, r6
     998:	a0 e0       	ldi	r26, 0x00	; 0
     99a:	b0 e0       	ldi	r27, 0x00	; 0
     99c:	8b 87       	std	Y+11, r24	; 0x0b
     99e:	9c 87       	std	Y+12, r25	; 0x0c
     9a0:	ad 87       	std	Y+13, r26	; 0x0d
     9a2:	be 87       	std	Y+14, r27	; 0x0e
     9a4:	20 91 08 01 	lds	r18, 0x0108
     9a8:	30 91 09 01 	lds	r19, 0x0109
     9ac:	40 e0       	ldi	r20, 0x00	; 0
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	60 e6       	ldi	r22, 0x60	; 96
     9b2:	77 eb       	ldi	r23, 0xB7	; 183
     9b4:	87 e4       	ldi	r24, 0x47	; 71
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
     9bc:	6b 85       	ldd	r22, Y+11	; 0x0b
     9be:	7c 85       	ldd	r23, Y+12	; 0x0c
     9c0:	8d 85       	ldd	r24, Y+13	; 0x0d
     9c2:	9e 85       	ldd	r25, Y+14	; 0x0e
     9c4:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp2;	
     9c8:	95 01       	movw	r18, r10
     9ca:	40 e0       	ldi	r20, 0x00	; 0
     9cc:	50 e0       	ldi	r21, 0x00	; 0
     9ce:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
#endif
         adc.tp2 = 53;
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     9d2:	f7 01       	movw	r30, r14
     9d4:	ee 0f       	add	r30, r30
     9d6:	ff 1f       	adc	r31, r31
     9d8:	ee 0f       	add	r30, r30
     9da:	ff 1f       	adc	r31, r31
     9dc:	ea 5b       	subi	r30, 0xBA	; 186
     9de:	fe 4f       	sbci	r31, 0xFE	; 254
     9e0:	20 83       	st	Z, r18
     9e2:	31 83       	std	Z+1, r19	; 0x01
     9e4:	42 83       	std	Z+2, r20	; 0x02
     9e6:	53 83       	std	Z+3, r21	; 0x03
      trans.hfe[PartReady] = ((adc.hp2 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
#endif
#ifdef COMMON_COLLECTOR
       //compare current amplification factor for common Collector (Emitter follower)
       // hFE = (Emitterstrom - Basisstrom) / Basisstrom
       if (c_hfe >  trans.hfe[PartReady]) {
     9e8:	8c 81       	ldd	r24, Y+4	; 0x04
     9ea:	9d 81       	ldd	r25, Y+5	; 0x05
     9ec:	ae 81       	ldd	r26, Y+6	; 0x06
     9ee:	bf 81       	ldd	r27, Y+7	; 0x07
     9f0:	28 17       	cp	r18, r24
     9f2:	39 07       	cpc	r19, r25
     9f4:	4a 07       	cpc	r20, r26
     9f6:	5b 07       	cpc	r21, r27
     9f8:	a8 f4       	brcc	.+42     	; 0xa24 <__stack+0x125>
          trans.hfe[PartReady] = c_hfe;
     9fa:	80 83       	st	Z, r24
     9fc:	91 83       	std	Z+1, r25	; 0x01
     9fe:	a2 83       	std	Z+2, r26	; 0x02
     a00:	b3 83       	std	Z+3, r27	; 0x03
          trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.lp1 - adc.tp1;
     a02:	f7 01       	movw	r30, r14
     a04:	ee 0f       	add	r30, r30
     a06:	ff 1f       	adc	r31, r31
     a08:	e2 5b       	subi	r30, 0xB2	; 178
     a0a:	fe 4f       	sbci	r31, 0xFE	; 254
     a0c:	80 91 3d 01 	lds	r24, 0x013D
     a10:	90 91 3e 01 	lds	r25, 0x013E
     a14:	84 19       	sub	r24, r4
     a16:	95 09       	sbc	r25, r5
     a18:	a9 89       	ldd	r26, Y+17	; 0x11
     a1a:	ba 89       	ldd	r27, Y+18	; 0x12
     a1c:	8a 1b       	sub	r24, r26
     a1e:	9b 0b       	sbc	r25, r27
     a20:	91 83       	std	Z+1, r25	; 0x01
     a22:	80 83       	st	Z, r24
       }
#endif

      if(adc.tp2 > 2557) {		// Basis-voltage R_H is low enough
     a24:	be ef       	ldi	r27, 0xFE	; 254
     a26:	ab 16       	cp	r10, r27
     a28:	b9 e0       	ldi	r27, 0x09	; 9
     a2a:	bb 06       	cpc	r11, r27
     a2c:	38 f0       	brcs	.+14     	; 0xa3c <__stack+0x13d>
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
     a2e:	82 e0       	ldi	r24, 0x02	; 2
     a30:	80 93 07 01 	sts	0x0107, r24
         PartMode = PART_MODE_NPN;
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	80 93 06 01 	sts	0x0106, r24
     a3a:	51 c0       	rjmp	.+162    	; 0xade <__stack+0x1df>
      } else { // Basis has low current
         if((adc.lp_otr < 97) && (adc.hp2 > 3400)) {
     a3c:	e9 85       	ldd	r30, Y+9	; 0x09
     a3e:	fa 85       	ldd	r31, Y+10	; 0x0a
     a40:	e1 36       	cpi	r30, 0x61	; 97
     a42:	f1 05       	cpc	r31, r1
     a44:	08 f0       	brcs	.+2      	; 0xa48 <__stack+0x149>
     a46:	4b c0       	rjmp	.+150    	; 0xade <__stack+0x1df>
     a48:	f9 e4       	ldi	r31, 0x49	; 73
     a4a:	6f 16       	cp	r6, r31
     a4c:	fd e0       	ldi	r31, 0x0D	; 13
     a4e:	7f 06       	cpc	r7, r31
     a50:	08 f4       	brcc	.+2      	; 0xa54 <__stack+0x155>
     a52:	45 c0       	rjmp	.+138    	; 0xade <__stack+0x1df>
            //if flow voltage in switched off mode low enough?
            //(since D-Mode-FET will be detected in error as E-Mode )
            PartFound = PART_FET;	//N-Kanal-MOSFET is found (Basis/Gate will Not be pulled down)
     a54:	83 e0       	ldi	r24, 0x03	; 3
     a56:	80 93 07 01 	sts	0x0107, r24
            PartMode = PART_MODE_N_E_MOS;
     a5a:	82 e0       	ldi	r24, 0x02	; 2
     a5c:	80 93 06 01 	sts	0x0106, r24
            }
#else
            //Switching of Drain is monitored with digital input
            // Low level is specified up to 0.3 * VCC
            // High level is specified above 0.6 * VCC
            PinMSK = HiADCm & 7;
     a60:	e9 80       	ldd	r14, Y+1	; 0x01
     a62:	27 e0       	ldi	r18, 0x07	; 7
     a64:	e2 22       	and	r14, r18
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
     a66:	82 2d       	mov	r24, r2
     a68:	80 64       	ori	r24, 0x40	; 64
     a6a:	80 93 7c 00 	sts	0x007C, r24
            gthvoltage = 1;			// round up ((1*4)/9)
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	90 93 57 01 	sts	0x0157, r25
     a76:	80 93 56 01 	sts	0x0156, r24
     a7a:	7b e0       	ldi	r23, 0x0B	; 11
     a7c:	a7 2e       	mov	r10, r23
            for(ii=0;ii<11;ii++) {
            	wdt_reset();
     a7e:	a8 95       	wdr
            	ChargePin10ms(TriPinRL,0);	// discharge Gate 10ms with RL 
     a80:	8d 2d       	mov	r24, r13
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	0e 94 3e 01 	call	0x27c	; 0x27c <ChargePin10ms>
                R_DDR = HiPinRL | TriPinRH;	// slowly charge Gate 
     a88:	04 b9       	out	0x04, r16	; 4
                R_PORT = HiPinRL | TriPinRH;
     a8a:	05 b9       	out	0x05, r16	; 5
            	while ((ADC_PIN&PinMSK));	// Wait, until the MOSFET switch and Drain moved to low 
     a8c:	86 b1       	in	r24, 0x06	; 6
     a8e:	8e 21       	and	r24, r14
     a90:	e9 f7       	brne	.-6      	; 0xa8c <__stack+0x18d>
                		// 0 is detected with input voltage of 2.12V to 2.24V (tested with mega168 & mega328)
                R_DDR = HiPinRL;		// switch off current
     a92:	c4 b8       	out	0x04, r12	; 4
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
     a94:	80 91 7a 00 	lds	r24, 0x007A
     a98:	80 64       	ori	r24, 0x40	; 64
     a9a:	80 93 7a 00 	sts	0x007A, r24
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
     a9e:	80 91 7a 00 	lds	r24, 0x007A
     aa2:	86 fd       	sbrc	r24, 6
     aa4:	fc cf       	rjmp	.-8      	; 0xa9e <__stack+0x19f>
            	gthvoltage += ADCW;		// add result of ADC
     aa6:	80 91 78 00 	lds	r24, 0x0078
     aaa:	90 91 79 00 	lds	r25, 0x0079
     aae:	20 91 56 01 	lds	r18, 0x0156
     ab2:	30 91 57 01 	lds	r19, 0x0157
     ab6:	82 0f       	add	r24, r18
     ab8:	93 1f       	adc	r25, r19
     aba:	90 93 57 01 	sts	0x0157, r25
     abe:	80 93 56 01 	sts	0x0156, r24
     ac2:	aa 94       	dec	r10
            // High level is specified above 0.6 * VCC
            PinMSK = HiADCm & 7;
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
            gthvoltage = 1;			// round up ((1*4)/9)
            for(ii=0;ii<11;ii++) {
     ac4:	e1 f6       	brne	.-72     	; 0xa7e <__stack+0x17f>
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
            	gthvoltage += ADCW;		// add result of ADC
            }
#endif
            gthvoltage *= 4;	//is equal to 44 * ADCW
     ac6:	88 0f       	add	r24, r24
     ac8:	99 1f       	adc	r25, r25
     aca:	88 0f       	add	r24, r24
     acc:	99 1f       	adc	r25, r25
            gthvoltage /= 9;	//scale to mV
     ace:	69 e0       	ldi	r22, 0x09	; 9
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__udivmodhi4>
     ad6:	70 93 57 01 	sts	0x0157, r23
     ada:	60 93 56 01 	sts	0x0156, r22
         }
      }
savenresult:
      trans.b = TristatePin;	// save Pin-constellation
     ade:	20 92 52 01 	sts	0x0152, r2
      trans.c = HighPin;
     ae2:	10 93 53 01 	sts	0x0153, r17
      trans.e = LowPin;
     ae6:	30 92 54 01 	sts	0x0154, r3
   } // end component conduct => npn
   ADC_DDR = TXD_MSK;		// switch all ADC-Ports to input
     aea:	88 e0       	ldi	r24, 0x08	; 8
     aec:	87 b9       	out	0x07, r24	; 7
   ADC_PORT = TXD_VAL;		// switch all ADC-Ports to 0 (no Pull up)
     aee:	88 b9       	out	0x08, r24	; 8
   //Fertig
   //end das component has no connection between HighPin and LowPin
   goto widmes;
     af0:	69 c0       	rjmp	.+210    	; 0xbc4 <__stack+0x2c5>
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
     af2:	88 e0       	ldi	r24, 0x08	; 8
     af4:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;	//Low-Pin fix to GND
     af6:	3b 81       	ldd	r19, Y+3	; 0x03
     af8:	37 b9       	out	0x07, r19	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     afa:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
     afc:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
     afe:	8d 2d       	mov	r24, r13
     b00:	61 e0       	ldi	r22, 0x01	; 1
     b02:	0e 94 3e 01 	call	0x27c	; 0x27c <ChargePin10ms>
  adc.lp_otr = W5msReadADC(HighPin) - ReadADC(LowPin);
     b06:	81 2f       	mov	r24, r17
     b08:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
     b0c:	4c 01       	movw	r8, r24
     b0e:	83 2d       	mov	r24, r3
     b10:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
     b14:	88 1a       	sub	r8, r24
     b16:	99 0a       	sbc	r9, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
     b18:	88 85       	ldd	r24, Y+8	; 0x08
     b1a:	84 b9       	out	0x04, r24	; 4
  R_PORT = HiPinRH;
     b1c:	85 b9       	out	0x05, r24	; 5
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
     b1e:	81 2f       	mov	r24, r17
     b20:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
     b24:	5c 01       	movw	r10, r24

  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     b26:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
     b28:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
     b2a:	8d 2d       	mov	r24, r13
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	0e 94 3e 01 	call	0x27c	; 0x27c <ChargePin10ms>
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
     b32:	81 2f       	mov	r24, r17
     b34:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
     b38:	7c 01       	movw	r14, r24
     b3a:	83 2d       	mov	r24, r3
     b3c:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
     b40:	e8 1a       	sub	r14, r24
     b42:	f9 0a       	sbc	r15, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
     b44:	98 85       	ldd	r25, Y+8	; 0x08
     b46:	94 b9       	out	0x04, r25	; 4
  R_PORT = HiPinRH;
     b48:	95 b9       	out	0x05, r25	; 5
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
     b4a:	81 2f       	mov	r24, r17
     b4c:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
     b50:	e8 14       	cp	r14, r8
     b52:	f9 04       	cpc	r15, r9
     b54:	18 f0       	brcs	.+6      	; 0xb5c <__stack+0x25d>
  R_PORT = HiPinRL;
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
  R_PORT = HiPinRH;
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
     b56:	a8 2e       	mov	r10, r24
     b58:	b9 2e       	mov	r11, r25
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
     b5a:	47 01       	movw	r8, r14
  lcd_string(utoa(adc.hp3,outval,10));
  lcd_space();
  wait1s();
#endif

  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
     b5c:	c4 01       	movw	r24, r8
     b5e:	87 59       	subi	r24, 0x97	; 151
     b60:	90 40       	sbci	r25, 0x00	; 0
     b62:	a1 e1       	ldi	r26, 0x11	; 17
     b64:	89 38       	cpi	r24, 0x89	; 137
     b66:	9a 07       	cpc	r25, r26
     b68:	68 f5       	brcc	.+90     	; 0xbc4 <__stack+0x2c5>
     b6a:	c5 01       	movw	r24, r10
     b6c:	53 e0       	ldi	r21, 0x03	; 3
     b6e:	96 95       	lsr	r25
     b70:	87 95       	ror	r24
     b72:	5a 95       	dec	r21
     b74:	e1 f7       	brne	.-8      	; 0xb6e <__stack+0x26f>
     b76:	8a 0d       	add	r24, r10
     b78:	9b 1d       	adc	r25, r11
     b7a:	88 15       	cp	r24, r8
     b7c:	99 05       	cpc	r25, r9
     b7e:	10 f5       	brcc	.+68     	; 0xbc4 <__stack+0x2c5>
     b80:	43 e0       	ldi	r20, 0x03	; 3
     b82:	aa 0c       	add	r10, r10
     b84:	bb 1c       	adc	r11, r11
     b86:	4a 95       	dec	r20
     b88:	e1 f7       	brne	.-8      	; 0xb82 <__stack+0x283>
     b8a:	8a 14       	cp	r8, r10
     b8c:	9b 04       	cpc	r9, r11
     b8e:	d0 f4       	brcc	.+52     	; 0xbc4 <__stack+0x2c5>
     //voltage is above 0,15V and below 4,64V => Ok
     if((PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
     b90:	80 91 07 01 	lds	r24, 0x0107
     b94:	88 23       	and	r24, r24
     b96:	11 f0       	breq	.+4      	; 0xb9c <__stack+0x29d>
     b98:	86 30       	cpi	r24, 0x06	; 6
     b9a:	19 f4       	brne	.+6      	; 0xba2 <__stack+0x2a3>
        PartFound = PART_DIODE;	//mark for diode only, if no other component is found
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	80 93 07 01 	sts	0x0107, r24
				//since there is a problem with Transistors with a protection diode
#if DebugOut == 4
        lcd_data('D');
#endif
     }
     diodes[NumOfDiodes].Anode = HighPin;
     ba2:	80 91 05 01 	lds	r24, 0x0105
     ba6:	e8 2f       	mov	r30, r24
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	ee 0f       	add	r30, r30
     bac:	ff 1f       	adc	r31, r31
     bae:	ee 0f       	add	r30, r30
     bb0:	ff 1f       	adc	r31, r31
     bb2:	e4 59       	subi	r30, 0x94	; 148
     bb4:	fe 4f       	sbci	r31, 0xFE	; 254
     bb6:	10 83       	st	Z, r17
     diodes[NumOfDiodes].Cathode = LowPin;
     bb8:	31 82       	std	Z+1, r3	; 0x01
     diodes[NumOfDiodes].Voltage = adc.hp1;	// voltage in Millivolt 
     bba:	93 82       	std	Z+3, r9	; 0x03
     bbc:	82 82       	std	Z+2, r8	; 0x02
     NumOfDiodes++;
     bbe:	8f 5f       	subi	r24, 0xFF	; 255
     bc0:	80 93 05 01 	sts	0x0105, r24
#if DebugOut == 4
  lcd_data(NumOfDiodes+'0');
#endif

widmes:
  if (NumOfDiodes > 0) goto clean_ports;
     bc4:	80 91 05 01 	lds	r24, 0x0105
     bc8:	88 23       	and	r24, r24
     bca:	09 f0       	breq	.+2      	; 0xbce <__stack+0x2cf>
     bcc:	12 c2       	rjmp	.+1060   	; 0xff2 <__stack+0x6f3>
  // resistor measurement
  wdt_reset();
     bce:	a8 95       	wdr
// U_SCALE can be set to 4 for better resolution of ReadADC result
#if U_SCALE != 1
  ADCconfig.U_AVCC *= U_SCALE;	// scale to higher resolution, mV scale is not required
     bd0:	80 91 3d 01 	lds	r24, 0x013D
     bd4:	90 91 3e 01 	lds	r25, 0x013E
     bd8:	88 0f       	add	r24, r24
     bda:	99 1f       	adc	r25, r25
     bdc:	88 0f       	add	r24, r24
     bde:	99 1f       	adc	r25, r25
     be0:	90 93 3e 01 	sts	0x013E, r25
     be4:	80 93 3d 01 	sts	0x013D, r24
  ADCconfig.U_Bandgap *= U_SCALE;
     be8:	80 91 3b 01 	lds	r24, 0x013B
     bec:	90 91 3c 01 	lds	r25, 0x013C
     bf0:	88 0f       	add	r24, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	90 93 3c 01 	sts	0x013C, r25
     bfc:	80 93 3b 01 	sts	0x013B, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = R_ANZ_MESS;	// switch to special number of repetitions
     c00:	8e eb       	ldi	r24, 0xBE	; 190
     c02:	80 93 39 01 	sts	0x0139, r24
#endif
  #define MAX_REPEAT (700 / (5 + R_ANZ_MESS/8))
  ADC_PORT = TXD_VAL;
     c06:	88 e0       	ldi	r24, 0x08	; 8
     c08:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
     c0a:	bb 81       	ldd	r27, Y+3	; 0x03
     c0c:	b7 b9       	out	0x07, r27	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     c0e:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;	
     c10:	c5 b8       	out	0x05, r12	; 5
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
     c12:	ee 24       	eor	r14, r14
     c14:	ff 24       	eor	r15, r15
  for (ii=1;ii<MAX_REPEAT;ii++) {
     c16:	21 e0       	ldi	r18, 0x01	; 1
     c18:	01 c0       	rjmp	.+2      	; 0xc1c <__stack+0x31d>
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     c1a:	7c 01       	movw	r14, r24
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     c1c:	83 2d       	mov	r24, r3
     c1e:	2b 8b       	std	Y+19, r18	; 0x13
     c20:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
     c24:	08 2f       	mov	r16, r24
     c26:	49 2e       	mov	r4, r25
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     c28:	81 2f       	mov	r24, r17
     c2a:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
     udiff = adc.hp1 - adc.hp2;
     c2e:	ac 01       	movw	r20, r24
     c30:	4e 19       	sub	r20, r14
     c32:	5f 09       	sbc	r21, r15
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     c34:	2b 89       	ldd	r18, Y+19	; 0x13
     c36:	57 ff       	sbrs	r21, 7
     c38:	03 c0       	rjmp	.+6      	; 0xc40 <__stack+0x341>
     c3a:	50 95       	com	r21
     c3c:	41 95       	neg	r20
     c3e:	5f 4f       	sbci	r21, 0xFF	; 255
     c40:	43 30       	cpi	r20, 0x03	; 3
     c42:	51 05       	cpc	r21, r1
     c44:	84 f4       	brge	.+32     	; 0xc66 <__stack+0x367>
     c46:	ac 01       	movw	r20, r24
  adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
#endif
  if (adc.tp1 > adc.hp1) {
     adc.tp1 = adc.hp1;
  }
  R_PORT = 0;
     c48:	15 b8       	out	0x05, r1	; 5
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (GND)
     c4a:	e8 85       	ldd	r30, Y+8	; 0x08
     c4c:	e4 b9       	out	0x04, r30	; 4
  adc.hp2 = W5msReadADC(HighPin);	// read voltage, should be down
     c4e:	81 2f       	mov	r24, r17
     c50:	4e 8b       	std	Y+22, r20	; 0x16
     c52:	5b 8b       	std	Y+19, r21	; 0x13
     c54:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
  if (adc.hp2 > (20*U_SCALE)) {
     c58:	4e 89       	ldd	r20, Y+22	; 0x16
     c5a:	5b 89       	ldd	r21, Y+19	; 0x13
     c5c:	81 35       	cpi	r24, 0x51	; 81
     c5e:	91 05       	cpc	r25, r1
     c60:	08 f0       	brcs	.+2      	; 0xc64 <__stack+0x365>
     c62:	ac c1       	rjmp	.+856    	; 0xfbc <__stack+0x6bd>
     c64:	05 c0       	rjmp	.+10     	; 0xc70 <__stack+0x371>
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     udiff = adc.hp1 - adc.hp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.hp2 = adc.hp1;
     wdt_reset();
     c66:	a8 95       	wdr
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     c68:	2f 5f       	subi	r18, 0xFF	; 255
     c6a:	29 31       	cpi	r18, 0x19	; 25
     c6c:	b1 f6       	brne	.-84     	; 0xc1a <__stack+0x31b>
     c6e:	a6 c1       	rjmp	.+844    	; 0xfbc <__stack+0x6bd>
     lcd_string(utoa(adc.hp2, outval, 10));
     lcd_space();
#endif
     goto testend;
  }
  R_PORT = HiPinRH;		//switch R_H for High-Pin to VCC
     c70:	f8 85       	ldd	r31, Y+8	; 0x08
     c72:	f5 b9       	out	0x05, r31	; 5
  adc.hp2 = W5msReadADC(HighPin);	// voltage at resistor Rx with R_H
     c74:	81 2f       	mov	r24, r17
     c76:	4e 8b       	std	Y+22, r20	; 0x16
     c78:	5b 8b       	std	Y+19, r21	; 0x13
     c7a:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
     c7e:	7c 01       	movw	r14, r24

  ADC_DDR = HiADCm;		//switch High-Pin to output
     c80:	29 81       	ldd	r18, Y+1	; 0x01
     c82:	27 b9       	out	0x07, r18	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
     c84:	28 b9       	out	0x08, r18	; 8
  R_PORT = 0;
     c86:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
     c88:	3a 81       	ldd	r19, Y+2	; 0x02
     c8a:	34 b9       	out	0x04, r19	; 4
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
     c8c:	aa 24       	eor	r10, r10
     c8e:	bb 24       	eor	r11, r11
  for (ii=1;ii<MAX_REPEAT;ii++) {
     c90:	21 e0       	ldi	r18, 0x01	; 1
     c92:	4e 89       	ldd	r20, Y+22	; 0x16
     c94:	5b 89       	ldd	r21, Y+19	; 0x13
     c96:	3a 01       	movw	r6, r20
     c98:	01 c0       	rjmp	.+2      	; 0xc9c <__stack+0x39d>
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     c9a:	56 01       	movw	r10, r12
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     c9c:	81 2f       	mov	r24, r17
     c9e:	2b 8b       	std	Y+19, r18	; 0x13
     ca0:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
     ca4:	4c 01       	movw	r8, r24
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     ca6:	83 2d       	mov	r24, r3
     ca8:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
     cac:	6c 01       	movw	r12, r24
     udiff = adc.lp1 - adc.lp2;
     cae:	8a 19       	sub	r24, r10
     cb0:	9b 09       	sbc	r25, r11
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     cb2:	2b 89       	ldd	r18, Y+19	; 0x13
     cb4:	97 ff       	sbrs	r25, 7
     cb6:	03 c0       	rjmp	.+6      	; 0xcbe <__stack+0x3bf>
     cb8:	90 95       	com	r25
     cba:	81 95       	neg	r24
     cbc:	9f 4f       	sbci	r25, 0xFF	; 255
     cbe:	83 30       	cpi	r24, 0x03	; 3
     cc0:	91 05       	cpc	r25, r1
     cc2:	8c f4       	brge	.+34     	; 0xce6 <__stack+0x3e7>
     cc4:	a3 01       	movw	r20, r6
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = MEM_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
     cc8:	88 0f       	add	r24, r24
  adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
#endif
  if (adc.tp2 < adc.lp1) {
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
     cca:	84 b9       	out	0x04, r24	; 4
  adc.lp2 = W5msReadADC(LowPin);
     ccc:	83 2d       	mov	r24, r3
     cce:	6e 8a       	std	Y+22, r6	; 0x16
     cd0:	5b 8b       	std	Y+19, r21	; 0x13
     cd2:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
     cd6:	3c 01       	movw	r6, r24
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
     cd8:	4e 89       	ldd	r20, Y+22	; 0x16
     cda:	5b 89       	ldd	r21, Y+19	; 0x13
     cdc:	84 e4       	ldi	r24, 0x44	; 68
     cde:	40 3c       	cpi	r20, 0xC0	; 192
     ce0:	58 07       	cpc	r21, r24
     ce2:	30 f0       	brcs	.+12     	; 0xcf0 <__stack+0x3f1>
     ce4:	0c c0       	rjmp	.+24     	; 0xcfe <__stack+0x3ff>
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     udiff = adc.lp1 - adc.lp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.lp2 = adc.lp1;
     wdt_reset();
     ce6:	a8 95       	wdr
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
  R_PORT = 0;
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     ce8:	2f 5f       	subi	r18, 0xFF	; 255
     cea:	29 31       	cpi	r18, 0x19	; 25
     cec:	b1 f6       	brne	.-84     	; 0xc9a <__stack+0x39b>
     cee:	66 c1       	rjmp	.+716    	; 0xfbc <__stack+0x6bd>
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
  adc.lp2 = W5msReadADC(LowPin);
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
     cf0:	95 e8       	ldi	r25, 0x85	; 133
     cf2:	e9 16       	cp	r14, r25
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	f9 06       	cpc	r15, r25
     cf8:	08 f0       	brcs	.+2      	; 0xcfc <__stack+0x3fd>
     cfa:	60 c1       	rjmp	.+704    	; 0xfbc <__stack+0x6bd>
     cfc:	06 c0       	rjmp	.+12     	; 0xd0a <__stack+0x40b>
     lcd_data('F');
#endif
     goto testend; 
  }
//    if((adc.hp2 + (adc.hp2 / 61)) < adc.hp1)
  if (adc.hp2 < (4972*U_SCALE)) { 
     cfe:	a0 eb       	ldi	r26, 0xB0	; 176
     d00:	ea 16       	cp	r14, r26
     d02:	ad e4       	ldi	r26, 0x4D	; 77
     d04:	fa 06       	cpc	r15, r26
     d06:	08 f0       	brcs	.+2      	; 0xd0a <__stack+0x40b>
     d08:	59 c1       	rjmp	.+690    	; 0xfbc <__stack+0x6bd>
     // voltage breaks down with low test current and it is not nearly shorted  => resistor
//     if (adc.lp1 < 120) { // take measurement with R_H 
     if (adc.lp1 < (169*U_SCALE)) { // take measurement with R_H 
     d0a:	b4 ea       	ldi	r27, 0xA4	; 164
     d0c:	cb 16       	cp	r12, r27
     d0e:	b2 e0       	ldi	r27, 0x02	; 2
     d10:	db 06       	cpc	r13, r27
     d12:	08 f0       	brcs	.+2      	; 0xd16 <__stack+0x417>
     d14:	72 c0       	rjmp	.+228    	; 0xdfa <__stack+0x4fb>
        ii = 'H';
        if (adc.lp2 < (38*U_SCALE)) {
     d16:	e8 e9       	ldi	r30, 0x98	; 152
     d18:	6e 16       	cp	r6, r30
     d1a:	71 04       	cpc	r7, r1
     d1c:	08 f4       	brcc	.+2      	; 0xd20 <__stack+0x421>
     d1e:	4e c1       	rjmp	.+668    	; 0xfbc <__stack+0x6bd>
           // measurement > 60MOhm to big resistance
           goto testend;
        }
        // two measurements with R_H resistors (470k) are made:
        // lirx1 (measurement at HighPin)
        lirx1 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)adc.hp2 / (ADCconfig.U_AVCC - adc.hp2);
     d20:	80 90 3d 01 	lds	r8, 0x013D
     d24:	90 90 3e 01 	lds	r9, 0x013E
     d28:	b7 01       	movw	r22, r14
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	28 e9       	ldi	r18, 0x98	; 152
     d30:	37 eb       	ldi	r19, 0xB7	; 183
     d32:	40 e0       	ldi	r20, 0x00	; 0
     d34:	50 e0       	ldi	r21, 0x00	; 0
     d36:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
     d3a:	94 01       	movw	r18, r8
     d3c:	2e 19       	sub	r18, r14
     d3e:	3f 09       	sbc	r19, r15
     d40:	40 e0       	ldi	r20, 0x00	; 0
     d42:	50 e0       	ldi	r21, 0x00	; 0
     d44:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
     d48:	59 01       	movw	r10, r18
     d4a:	6a 01       	movw	r12, r20
        // lirx2 (measurement at LowPin)
        lirx2 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)(ADCconfig.U_AVCC - adc.lp2) / adc.lp2;
     d4c:	86 18       	sub	r8, r6
     d4e:	97 08       	sbc	r9, r7
     d50:	b4 01       	movw	r22, r8
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	28 e9       	ldi	r18, 0x98	; 152
     d58:	37 eb       	ldi	r19, 0xB7	; 183
     d5a:	40 e0       	ldi	r20, 0x00	; 0
     d5c:	50 e0       	ldi	r21, 0x00	; 0
     d5e:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
     d62:	93 01       	movw	r18, r6
     d64:	40 e0       	ldi	r20, 0x00	; 0
     d66:	50 e0       	ldi	r21, 0x00	; 0
     d68:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
#define FAKT_LOW 2		//resolution is about twice as good
#else
#define FAKT_LOW 4		//resolution is about four times better
#endif
#ifdef AUTOSCALE_ADC
        if (adc.hp2 < U_INT_LIMIT) {
     d6c:	f8 e7       	ldi	r31, 0x78	; 120
     d6e:	ef 16       	cp	r14, r31
     d70:	ff e0       	ldi	r31, 0x0F	; 15
     d72:	ff 06       	cpc	r15, r31
     d74:	70 f4       	brcc	.+28     	; 0xd92 <__stack+0x493>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_H measurements
     d76:	c6 01       	movw	r24, r12
     d78:	b5 01       	movw	r22, r10
     d7a:	b2 e0       	ldi	r27, 0x02	; 2
     d7c:	66 0f       	add	r22, r22
     d7e:	77 1f       	adc	r23, r23
     d80:	88 1f       	adc	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	ba 95       	dec	r27
     d86:	d1 f7       	brne	.-12     	; 0xd7c <__stack+0x47d>
     d88:	62 0f       	add	r22, r18
     d8a:	73 1f       	adc	r23, r19
     d8c:	84 1f       	adc	r24, r20
     d8e:	95 1f       	adc	r25, r21
     d90:	12 c0       	rjmp	.+36     	; 0xdb6 <__stack+0x4b7>
        } else if (adc.lp2 < U_INT_LIMIT){
     d92:	88 e7       	ldi	r24, 0x78	; 120
     d94:	68 16       	cp	r6, r24
     d96:	8f e0       	ldi	r24, 0x0F	; 15
     d98:	78 06       	cpc	r7, r24
     d9a:	a0 f4       	brcc	.+40     	; 0xdc4 <__stack+0x4c5>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
     d9c:	ca 01       	movw	r24, r20
     d9e:	b9 01       	movw	r22, r18
     da0:	a2 e0       	ldi	r26, 0x02	; 2
     da2:	66 0f       	add	r22, r22
     da4:	77 1f       	adc	r23, r23
     da6:	88 1f       	adc	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	aa 95       	dec	r26
     dac:	d1 f7       	brne	.-12     	; 0xda2 <__stack+0x4a3>
     dae:	6a 0d       	add	r22, r10
     db0:	7b 1d       	adc	r23, r11
     db2:	8c 1d       	adc	r24, r12
     db4:	9d 1d       	adc	r25, r13
     db6:	25 e0       	ldi	r18, 0x05	; 5
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	40 e0       	ldi	r20, 0x00	; 0
     dbc:	50 e0       	ldi	r21, 0x00	; 0
     dbe:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
     dc2:	08 c0       	rjmp	.+16     	; 0xdd4 <__stack+0x4d5>
        } else 
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_H measurements
     dc4:	2a 0d       	add	r18, r10
     dc6:	3b 1d       	adc	r19, r11
     dc8:	4c 1d       	adc	r20, r12
     dca:	5d 1d       	adc	r21, r13
     dcc:	56 95       	lsr	r21
     dce:	47 95       	ror	r20
     dd0:	37 95       	ror	r19
     dd2:	27 95       	ror	r18
        }
        lrx1 *= 100;
     dd4:	ca 01       	movw	r24, r20
     dd6:	b9 01       	movw	r22, r18
     dd8:	24 e6       	ldi	r18, 0x64	; 100
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	40 e0       	ldi	r20, 0x00	; 0
     dde:	50 e0       	ldi	r21, 0x00	; 0
     de0:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
     de4:	6b 01       	movw	r12, r22
     de6:	7c 01       	movw	r14, r24
        lrx1 += RH_OFFSET;			// add constant for correction of systematic error
     de8:	8c ea       	ldi	r24, 0xAC	; 172
     dea:	9d e0       	ldi	r25, 0x0D	; 13
     dec:	a0 e0       	ldi	r26, 0x00	; 0
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	c8 0e       	add	r12, r24
     df2:	d9 1e       	adc	r13, r25
     df4:	ea 1e       	adc	r14, r26
     df6:	fb 1e       	adc	r15, r27
     df8:	78 c0       	rjmp	.+240    	; 0xeea <__stack+0x5eb>
     dfa:	80 2f       	mov	r24, r16
     dfc:	94 2d       	mov	r25, r4
     dfe:	48 17       	cp	r20, r24
     e00:	59 07       	cpc	r21, r25
     e02:	08 f4       	brcc	.+2      	; 0xe06 <__stack+0x507>
     e04:	ca 01       	movw	r24, r20
     e06:	76 01       	movw	r14, r12
     e08:	c8 14       	cp	r12, r8
     e0a:	d9 04       	cpc	r13, r9
     e0c:	08 f4       	brcc	.+2      	; 0xe10 <__stack+0x511>
     e0e:	74 01       	movw	r14, r8
     e10:	3c 01       	movw	r6, r24
     e12:	84 17       	cp	r24, r20
     e14:	95 07       	cpc	r25, r21
     e16:	08 f4       	brcc	.+2      	; 0xe1a <__stack+0x51b>
     e18:	3a 01       	movw	r6, r20
        // two measurements with R_L resistors (680) are made:
        // lirx1 (measurement at HighPin)
        if (adc.tp1 > adc.hp1) {
           adc.hp1 = adc.tp1;		//diff negativ is illegal
        }
        lirx1 =(unsigned long)RR680PL * (unsigned long)(adc.hp1 - adc.tp1) / (ADCconfig.U_AVCC - adc.hp1);
     e1a:	b3 01       	movw	r22, r6
     e1c:	68 1b       	sub	r22, r24
     e1e:	79 0b       	sbc	r23, r25
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	20 91 08 01 	lds	r18, 0x0108
     e28:	30 91 09 01 	lds	r19, 0x0109
     e2c:	40 e0       	ldi	r20, 0x00	; 0
     e2e:	50 e0       	ldi	r21, 0x00	; 0
     e30:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
     e34:	20 91 3d 01 	lds	r18, 0x013D
     e38:	30 91 3e 01 	lds	r19, 0x013E
     e3c:	26 19       	sub	r18, r6
     e3e:	37 09       	sbc	r19, r7
     e40:	40 e0       	ldi	r20, 0x00	; 0
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
     e48:	49 01       	movw	r8, r18
     e4a:	5a 01       	movw	r10, r20
     e4c:	27 01       	movw	r4, r14
     e4e:	ce 14       	cp	r12, r14
     e50:	df 04       	cpc	r13, r15
     e52:	08 f4       	brcc	.+2      	; 0xe56 <__stack+0x557>
     e54:	26 01       	movw	r4, r12
        if (adc.tp2 < adc.lp1) {
           adc.lp1 = adc.tp2;		//diff negativ is illegal
        }
        // lirx2 (Measurement at LowPin)
        lirx2 =(unsigned long)RR680MI * (unsigned long)(adc.tp2 -adc.lp1) / adc.lp1;
     e56:	e4 18       	sub	r14, r4
     e58:	f5 08       	sbc	r15, r5
     e5a:	b7 01       	movw	r22, r14
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	20 91 02 01 	lds	r18, 0x0102
     e64:	30 91 03 01 	lds	r19, 0x0103
     e68:	40 e0       	ldi	r20, 0x00	; 0
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
     e70:	92 01       	movw	r18, r4
     e72:	40 e0       	ldi	r20, 0x00	; 0
     e74:	50 e0       	ldi	r21, 0x00	; 0
     e76:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
//     lrx1 =(unsigned long)R_L_VAL * (unsigned long)adc.hp1 / (adc.hp3 - adc.hp1);

#ifdef AUTOSCALE_ADC
        if (adc.hp1 < U_INT_LIMIT) {
     e7a:	98 e7       	ldi	r25, 0x78	; 120
     e7c:	69 16       	cp	r6, r25
     e7e:	9f e0       	ldi	r25, 0x0F	; 15
     e80:	79 06       	cpc	r7, r25
     e82:	70 f4       	brcc	.+28     	; 0xea0 <__stack+0x5a1>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_L measurements
     e84:	c5 01       	movw	r24, r10
     e86:	b4 01       	movw	r22, r8
     e88:	e2 e0       	ldi	r30, 0x02	; 2
     e8a:	66 0f       	add	r22, r22
     e8c:	77 1f       	adc	r23, r23
     e8e:	88 1f       	adc	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	ea 95       	dec	r30
     e94:	d1 f7       	brne	.-12     	; 0xe8a <__stack+0x58b>
     e96:	62 0f       	add	r22, r18
     e98:	73 1f       	adc	r23, r19
     e9a:	84 1f       	adc	r24, r20
     e9c:	95 1f       	adc	r25, r21
     e9e:	12 c0       	rjmp	.+36     	; 0xec4 <__stack+0x5c5>
        } else if (adc.lp1 < U_INT_LIMIT) {
     ea0:	a8 e7       	ldi	r26, 0x78	; 120
     ea2:	4a 16       	cp	r4, r26
     ea4:	af e0       	ldi	r26, 0x0F	; 15
     ea6:	5a 06       	cpc	r5, r26
     ea8:	b0 f4       	brcc	.+44     	; 0xed6 <__stack+0x5d7>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
     eaa:	ca 01       	movw	r24, r20
     eac:	b9 01       	movw	r22, r18
     eae:	52 e0       	ldi	r21, 0x02	; 2
     eb0:	66 0f       	add	r22, r22
     eb2:	77 1f       	adc	r23, r23
     eb4:	88 1f       	adc	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	5a 95       	dec	r21
     eba:	d1 f7       	brne	.-12     	; 0xeb0 <__stack+0x5b1>
     ebc:	68 0d       	add	r22, r8
     ebe:	79 1d       	adc	r23, r9
     ec0:	8a 1d       	adc	r24, r10
     ec2:	9b 1d       	adc	r25, r11
     ec4:	25 e0       	ldi	r18, 0x05	; 5
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e0       	ldi	r20, 0x00	; 0
     eca:	50 e0       	ldi	r21, 0x00	; 0
     ecc:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
     ed0:	69 01       	movw	r12, r18
     ed2:	7a 01       	movw	r14, r20
     ed4:	0a c0       	rjmp	.+20     	; 0xeea <__stack+0x5eb>
        } else
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_L measurements
     ed6:	69 01       	movw	r12, r18
     ed8:	7a 01       	movw	r14, r20
     eda:	c8 0c       	add	r12, r8
     edc:	d9 1c       	adc	r13, r9
     ede:	ea 1c       	adc	r14, r10
     ee0:	fb 1c       	adc	r15, r11
     ee2:	f6 94       	lsr	r15
     ee4:	e7 94       	ror	r14
     ee6:	d7 94       	ror	r13
     ee8:	c7 94       	ror	r12
  lcd_line4();
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
     eea:	80 91 07 01 	lds	r24, 0x0107
     eee:	82 30       	cpi	r24, 0x02	; 2
     ef0:	18 f0       	brcs	.+6      	; 0xef8 <__stack+0x5f9>
     ef2:	86 30       	cpi	r24, 0x06	; 6
     ef4:	09 f0       	breq	.+2      	; 0xef8 <__stack+0x5f9>
     ef6:	62 c0       	rjmp	.+196    	; 0xfbc <__stack+0x6bd>
        for (ii=0; ii<ResistorsFound; ii++) {
     ef8:	50 91 55 01 	lds	r21, 0x0155
     efc:	40 e0       	ldi	r20, 0x00	; 0
           // search measurements with inverse polarity 
           thisR = &resis[ii];
           if (thisR->rt != TristatePin) {
     efe:	8b e0       	ldi	r24, 0x0B	; 11
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	3e c0       	rjmp	.+124    	; 0xf80 <__stack+0x681>
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
           // search measurements with inverse polarity 
           thisR = &resis[ii];
     f04:	24 2f       	mov	r18, r20
     f06:	30 e0       	ldi	r19, 0x00	; 0
           if (thisR->rt != TristatePin) {
     f08:	28 9f       	mul	r18, r24
     f0a:	f0 01       	movw	r30, r0
     f0c:	29 9f       	mul	r18, r25
     f0e:	f0 0d       	add	r31, r0
     f10:	38 9f       	mul	r19, r24
     f12:	f0 0d       	add	r31, r0
     f14:	11 24       	eor	r1, r1
     f16:	e8 5e       	subi	r30, 0xE8	; 232
     f18:	fe 4f       	sbci	r31, 0xFE	; 254
     f1a:	22 85       	ldd	r18, Z+10	; 0x0a
     f1c:	22 15       	cp	r18, r2
     f1e:	11 f0       	breq	.+4      	; 0xf24 <__stack+0x625>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
     f20:	4f 5f       	subi	r20, 0xFF	; 255
     f22:	2e c0       	rjmp	.+92     	; 0xf80 <__stack+0x681>
           if (thisR->rt != TristatePin) {
              continue;
           }
           // must be measurement with inverse polarity 
           // resolution is 0.1 Ohm, 1 Ohm = 10 !
           lirx1 = (labs((long)lrx1 - (long)thisR->rx) * 10) / (lrx1 + thisR->rx + 100);
     f24:	80 80       	ld	r8, Z
     f26:	91 80       	ldd	r9, Z+1	; 0x01
     f28:	a2 80       	ldd	r10, Z+2	; 0x02
     f2a:	b3 80       	ldd	r11, Z+3	; 0x03
     f2c:	c7 01       	movw	r24, r14
     f2e:	b6 01       	movw	r22, r12
     f30:	68 19       	sub	r22, r8
     f32:	79 09       	sbc	r23, r9
     f34:	8a 09       	sbc	r24, r10
     f36:	9b 09       	sbc	r25, r11
     f38:	97 ff       	sbrs	r25, 7
     f3a:	07 c0       	rjmp	.+14     	; 0xf4a <__stack+0x64b>
     f3c:	90 95       	com	r25
     f3e:	80 95       	com	r24
     f40:	70 95       	com	r23
     f42:	61 95       	neg	r22
     f44:	7f 4f       	sbci	r23, 0xFF	; 255
     f46:	8f 4f       	sbci	r24, 0xFF	; 255
     f48:	9f 4f       	sbci	r25, 0xFF	; 255
     f4a:	2a e0       	ldi	r18, 0x0A	; 10
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	40 e0       	ldi	r20, 0x00	; 0
     f50:	50 e0       	ldi	r21, 0x00	; 0
     f52:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
     f56:	a5 01       	movw	r20, r10
     f58:	94 01       	movw	r18, r8
     f5a:	2c 59       	subi	r18, 0x9C	; 156
     f5c:	3f 4f       	sbci	r19, 0xFF	; 255
     f5e:	4f 4f       	sbci	r20, 0xFF	; 255
     f60:	5f 4f       	sbci	r21, 0xFF	; 255
     f62:	2c 0d       	add	r18, r12
     f64:	3d 1d       	adc	r19, r13
     f66:	4e 1d       	adc	r20, r14
     f68:	5f 1d       	adc	r21, r15
     f6a:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
           if (lirx1  > 0) {
     f6e:	21 15       	cp	r18, r1
     f70:	31 05       	cpc	r19, r1
     f72:	41 05       	cpc	r20, r1
     f74:	51 05       	cpc	r21, r1
     f76:	11 f5       	brne	.+68     	; 0xfbc <__stack+0x6bd>
              DisplayValue(lirx1,-1,LCD_CHAR_OMEGA,3)
              lcd_space();
#endif
              goto testend; // <10% mismatch
           }
           PartFound = PART_RESISTOR;
     f78:	86 e0       	ldi	r24, 0x06	; 6
     f7a:	80 93 07 01 	sts	0x0107, r24
           goto testend;
     f7e:	1e c0       	rjmp	.+60     	; 0xfbc <__stack+0x6bd>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
     f80:	45 17       	cp	r20, r21
     f82:	08 f4       	brcc	.+2      	; 0xf86 <__stack+0x687>
     f84:	bf cf       	rjmp	.-130    	; 0xf04 <__stack+0x605>
           }
           PartFound = PART_RESISTOR;
           goto testend;
        } // end for
        // no same resistor with the same Tristate-Pin found, new one
        thisR = &resis[ResistorsFound];		// pointer to a free resistor structure
     f86:	25 2f       	mov	r18, r21
     f88:	30 e0       	ldi	r19, 0x00	; 0
        thisR->rx = lrx1;		// save resistor value
     f8a:	8b e0       	ldi	r24, 0x0B	; 11
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	28 9f       	mul	r18, r24
     f90:	f0 01       	movw	r30, r0
     f92:	29 9f       	mul	r18, r25
     f94:	f0 0d       	add	r31, r0
     f96:	38 9f       	mul	r19, r24
     f98:	f0 0d       	add	r31, r0
     f9a:	11 24       	eor	r1, r1
     f9c:	e8 5e       	subi	r30, 0xE8	; 232
     f9e:	fe 4f       	sbci	r31, 0xFE	; 254
     fa0:	c0 82       	st	Z, r12
     fa2:	d1 82       	std	Z+1, r13	; 0x01
     fa4:	e2 82       	std	Z+2, r14	; 0x02
     fa6:	f3 82       	std	Z+3, r15	; 0x03
#if FLASHEND > 0x1fff
        thisR->lx = 0;			// no inductance
     fa8:	14 82       	std	Z+4, r1	; 0x04
     faa:	15 82       	std	Z+5, r1	; 0x05
     fac:	16 82       	std	Z+6, r1	; 0x06
     fae:	17 82       	std	Z+7, r1	; 0x07
#endif
        thisR->ra = LowPin;		// save Pin numbers
     fb0:	30 86       	std	Z+8, r3	; 0x08
        thisR->rb = HighPin;
     fb2:	11 87       	std	Z+9, r17	; 0x09
        thisR->rt = TristatePin;	// Tristate is saved for easier search of inverse measurement
     fb4:	22 86       	std	Z+10, r2	; 0x0a
        ResistorsFound++;			// 1 more resistor found
     fb6:	5f 5f       	subi	r21, 0xFF	; 255
     fb8:	50 93 55 01 	sts	0x0155, r21
#endif
     }
  }
  testend:
#if U_SCALE != 1
  ADCconfig.U_AVCC /= U_SCALE;		// scale back to mV resolution
     fbc:	80 91 3d 01 	lds	r24, 0x013D
     fc0:	90 91 3e 01 	lds	r25, 0x013E
     fc4:	96 95       	lsr	r25
     fc6:	87 95       	ror	r24
     fc8:	96 95       	lsr	r25
     fca:	87 95       	ror	r24
     fcc:	90 93 3e 01 	sts	0x013E, r25
     fd0:	80 93 3d 01 	sts	0x013D, r24
  ADCconfig.U_Bandgap /= U_SCALE;
     fd4:	80 91 3b 01 	lds	r24, 0x013B
     fd8:	90 91 3c 01 	lds	r25, 0x013C
     fdc:	96 95       	lsr	r25
     fde:	87 95       	ror	r24
     fe0:	96 95       	lsr	r25
     fe2:	87 95       	ror	r24
     fe4:	90 93 3c 01 	sts	0x013C, r25
     fe8:	80 93 3b 01 	sts	0x013B, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = ANZ_MESS;		// switch back to standard number of repetition
     fec:	89 e1       	ldi	r24, 0x19	; 25
     fee:	80 93 39 01 	sts	0x0139, r24
#if DebugOut < 10
  wait2s();
#endif
#endif
 clean_ports:
  ADC_DDR = TXD_MSK;		// all ADC-Pins Input
     ff2:	88 e0       	ldi	r24, 0x08	; 8
     ff4:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// all ADC outputs to Ground, keine Pull up
     ff6:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// all resistor-outputs to Input
     ff8:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// all resistor-outputs to Ground, no Pull up
     ffa:	15 b8       	out	0x05, r1	; 5
} // end CheckPins()
     ffc:	66 96       	adiw	r28, 0x16	; 22
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	ff 90       	pop	r15
    1012:	ef 90       	pop	r14
    1014:	df 90       	pop	r13
    1016:	cf 90       	pop	r12
    1018:	bf 90       	pop	r11
    101a:	af 90       	pop	r10
    101c:	9f 90       	pop	r9
    101e:	8f 90       	pop	r8
    1020:	7f 90       	pop	r7
    1022:	6f 90       	pop	r6
    1024:	5f 90       	pop	r5
    1026:	4f 90       	pop	r4
    1028:	3f 90       	pop	r3
    102a:	2f 90       	pop	r2
    102c:	08 95       	ret

0000102e <EntladePins>:

// first discharge any charge of capacitors
void EntladePins() {
    102e:	af 92       	push	r10
    1030:	bf 92       	push	r11
    1032:	cf 92       	push	r12
    1034:	df 92       	push	r13
    1036:	ef 92       	push	r14
    1038:	ff 92       	push	r15
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	ba e0       	ldi	r27, 0x0A	; 10
    1044:	cb 2e       	mov	r12, r27
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
    1046:	a8 e0       	ldi	r26, 0x08	; 8
    1048:	da 2e       	mov	r13, r26
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     R_PORT = 0;			// R-outputs auf 0
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
    104a:	fa e2       	ldi	r31, 0x2A	; 42
    104c:	af 2e       	mov	r10, r31
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
    104e:	e5 e1       	ldi	r30, 0x15	; 21
    1050:	be 2e       	mov	r11, r30
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
    1052:	d7 b8       	out	0x07, r13	; 7
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
    1054:	d8 b8       	out	0x08, r13	; 8
     R_PORT = 0;			// R-outputs auf 0
    1056:	15 b8       	out	0x05, r1	; 5
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
    1058:	a4 b8       	out	0x04, r10	; 4
     adcmv[0] = W5msReadADC(PC0);	// which voltage has Pin 1?
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
    1060:	8c 01       	movw	r16, r24
     adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
    1068:	ec 01       	movw	r28, r24
     adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
    106a:	82 e0       	ldi	r24, 0x02	; 2
    106c:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
     if ((PartFound == PART_CELL) || (adcmv[0] < CAP_EMPTY_LEVEL) & (adcmv[1] < CAP_EMPTY_LEVEL) & (adcmv[2] < CAP_EMPTY_LEVEL)) {
    1070:	20 91 07 01 	lds	r18, 0x0107
    1074:	28 30       	cpi	r18, 0x08	; 8
    1076:	c1 f0       	breq	.+48     	; 0x10a8 <EntladePins+0x7a>
    1078:	41 e0       	ldi	r20, 0x01	; 1
    107a:	c4 30       	cpi	r28, 0x04	; 4
    107c:	d1 05       	cpc	r29, r1
    107e:	08 f0       	brcs	.+2      	; 0x1082 <EntladePins+0x54>
    1080:	40 e0       	ldi	r20, 0x00	; 0
    1082:	21 e0       	ldi	r18, 0x01	; 1
    1084:	04 30       	cpi	r16, 0x04	; 4
    1086:	11 05       	cpc	r17, r1
    1088:	08 f0       	brcs	.+2      	; 0x108c <EntladePins+0x5e>
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	42 23       	and	r20, r18
    108e:	50 e0       	ldi	r21, 0x00	; 0
    1090:	21 e0       	ldi	r18, 0x01	; 1
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	84 30       	cpi	r24, 0x04	; 4
    1096:	91 05       	cpc	r25, r1
    1098:	10 f0       	brcs	.+4      	; 0x109e <EntladePins+0x70>
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	24 23       	and	r18, r20
    10a0:	35 23       	and	r19, r21
    10a2:	21 15       	cp	r18, r1
    10a4:	31 05       	cpc	r19, r1
    10a6:	21 f0       	breq	.+8      	; 0x10b0 <EntladePins+0x82>
        ADC_DDR = TXD_MSK;		// switch all ADC-Pins to input
    10a8:	88 e0       	ldi	r24, 0x08	; 8
    10aa:	87 b9       	out	0x07, r24	; 7
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
    10ac:	14 b8       	out	0x04, r1	; 4
        return;
    10ae:	4f c0       	rjmp	.+158    	; 0x114e <EntladePins+0x120>
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
    10b0:	23 e0       	ldi	r18, 0x03	; 3
    10b2:	08 3e       	cpi	r16, 0xE8	; 232
    10b4:	12 07       	cpc	r17, r18
    10b6:	10 f0       	brcs	.+4      	; 0x10bc <EntladePins+0x8e>
  uint8_t lop_cnt;		// loop counter
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
    10b8:	28 e0       	ldi	r18, 0x08	; 8
    10ba:	01 c0       	rjmp	.+2      	; 0x10be <EntladePins+0x90>
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
        return;
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
        adc_gnd |= (1<<PC0);	//Pin 1 directly to GND
    10bc:	29 e0       	ldi	r18, 0x09	; 9
     }
     if (adcmv[1] < 1000) {
    10be:	33 e0       	ldi	r19, 0x03	; 3
    10c0:	c8 3e       	cpi	r28, 0xE8	; 232
    10c2:	d3 07       	cpc	r29, r19
    10c4:	08 f4       	brcc	.+2      	; 0x10c8 <EntladePins+0x9a>
        adc_gnd |= (1<<PC1);	//Pin 2 directly to GND
    10c6:	22 60       	ori	r18, 0x02	; 2
     }
     if (adcmv[2] < 1000) {
    10c8:	33 e0       	ldi	r19, 0x03	; 3
    10ca:	88 3e       	cpi	r24, 0xE8	; 232
    10cc:	93 07       	cpc	r25, r19
    10ce:	08 f4       	brcc	.+2      	; 0x10d2 <EntladePins+0xa4>
        adc_gnd |= (1<<PC2);	//Pin 3 directly to  GND
    10d0:	24 60       	ori	r18, 0x04	; 4
     }
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time
    10d2:	27 b9       	out	0x07, r18	; 7

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
    10d4:	b4 b8       	out	0x04, r11	; 4
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    10d6:	c0 e0       	ldi	r28, 0x00	; 0
    10d8:	d0 e0       	ldi	r29, 0x00	; 0
        wdt_reset();
    10da:	a8 95       	wdr
        adcmv[0] = W20msReadADC(PC0);	// which voltage has Pin 1?
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	0e 94 1b 1a 	call	0x3436	; 0x3436 <W20msReadADC>
    10e2:	7c 01       	movw	r14, r24
        adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
    10ea:	8c 01       	movw	r16, r24
        adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
    10ec:	82 e0       	ldi	r24, 0x02	; 2
    10ee:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
        if (adcmv[0] < 1300) {
    10f2:	24 e1       	ldi	r18, 0x14	; 20
    10f4:	e2 16       	cp	r14, r18
    10f6:	25 e0       	ldi	r18, 0x05	; 5
    10f8:	f2 06       	cpc	r15, r18
    10fa:	08 f4       	brcc	.+2      	; 0x10fe <EntladePins+0xd0>
           ADC_DDR |= (1<<PC0);	// below 1.3V , switch directly with ADC-Port to GND
    10fc:	38 9a       	sbi	0x07, 0	; 7
        }
        if (adcmv[1] < 1300) {
    10fe:	35 e0       	ldi	r19, 0x05	; 5
    1100:	04 31       	cpi	r16, 0x14	; 20
    1102:	13 07       	cpc	r17, r19
    1104:	08 f4       	brcc	.+2      	; 0x1108 <EntladePins+0xda>
           ADC_DDR |= (1<<PC1);	// below 1.3V, switch directly with ADC-Port to GND
    1106:	39 9a       	sbi	0x07, 1	; 7
        }
        if (adcmv[2] < 1300) {
    1108:	25 e0       	ldi	r18, 0x05	; 5
    110a:	84 31       	cpi	r24, 0x14	; 20
    110c:	92 07       	cpc	r25, r18
    110e:	08 f4       	brcc	.+2      	; 0x1112 <EntladePins+0xe4>
           ADC_DDR |= (1<<PC2);	// below 1.3V, switch directly with ADC-Port to GND
    1110:	3a 9a       	sbi	0x07, 2	; 7
        }
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
    1112:	36 e0       	ldi	r19, 0x06	; 6
    1114:	e3 16       	cp	r14, r19
    1116:	f1 04       	cpc	r15, r1
    1118:	30 f4       	brcc	.+12     	; 0x1126 <EntladePins+0xf8>
    111a:	06 30       	cpi	r16, 0x06	; 6
    111c:	11 05       	cpc	r17, r1
    111e:	18 f4       	brcc	.+6      	; 0x1126 <EntladePins+0xf8>
    1120:	86 30       	cpi	r24, 0x06	; 6
    1122:	91 05       	cpc	r25, r1
    1124:	38 f0       	brcs	.+14     	; 0x1134 <EntladePins+0x106>

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    1126:	21 96       	adiw	r28, 0x01	; 1
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	c4 3f       	cpi	r28, 0xF4	; 244
    112c:	d8 07       	cpc	r29, r24
    112e:	a9 f6       	brne	.-86     	; 0x10da <EntladePins+0xac>
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
           break;
        }
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
    1130:	d0 92 07 01 	sts	0x0107, r13

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    1134:	00 e0       	ldi	r16, 0x00	; 0
    1136:	10 e0       	ldi	r17, 0x00	; 0
    1138:	04 c0       	rjmp	.+8      	; 0x1142 <EntladePins+0x114>
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
    113a:	0e 94 69 14 	call	0x28d2	; 0x28d2 <wait1ms>
    113e:	0f 5f       	subi	r16, 0xFF	; 255
    1140:	1f 4f       	sbci	r17, 0xFF	; 255
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
    1142:	0c 17       	cp	r16, r28
    1144:	1d 07       	cpc	r17, r29
    1146:	c8 f3       	brcs	.-14     	; 0x113a <EntladePins+0x10c>
    1148:	ca 94       	dec	r12
  unsigned int clr_cnt;		// Clear Counter
  uint8_t lop_cnt;		// loop counter
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
    114a:	09 f0       	breq	.+2      	; 0x114e <EntladePins+0x120>
    114c:	82 cf       	rjmp	.-252    	; 0x1052 <EntladePins+0x24>
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     }
  } // end while
 }
    114e:	df 91       	pop	r29
    1150:	cf 91       	pop	r28
    1152:	1f 91       	pop	r17
    1154:	0f 91       	pop	r16
    1156:	ff 90       	pop	r15
    1158:	ef 90       	pop	r14
    115a:	df 90       	pop	r13
    115c:	cf 90       	pop	r12
    115e:	bf 90       	pop	r11
    1160:	af 90       	pop	r10
    1162:	08 95       	ret

00001164 <RefVoltage>:



#ifdef AUTO_RH
void RefVoltage(void) {
    1164:	ff 92       	push	r15
    1166:	0f 93       	push	r16
    1168:	1f 93       	push	r17
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;

  #ifdef AUTO_CAL
  referenz = ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset));
    116e:	86 e6       	ldi	r24, 0x66	; 102
    1170:	92 e0       	ldi	r25, 0x02	; 2
    1172:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <__eerd_word_m328p>
    1176:	20 91 3f 01 	lds	r18, 0x013F
    117a:	30 91 40 01 	lds	r19, 0x0140
    117e:	28 0f       	add	r18, r24
    1180:	39 1f       	adc	r19, r25
  #else
  referenz = ref_mv + REF_C_KORR;
  #endif
  if (referenz >= Ref_Tab_Beginn) {
    1182:	83 e0       	ldi	r24, 0x03	; 3
    1184:	28 3e       	cpi	r18, 0xE8	; 232
    1186:	38 07       	cpc	r19, r24
    1188:	20 f0       	brcs	.+8      	; 0x1192 <RefVoltage+0x2e>
     referenz -= Ref_Tab_Beginn;
    118a:	c9 01       	movw	r24, r18
    118c:	88 5e       	subi	r24, 0xE8	; 232
    118e:	93 40       	sbci	r25, 0x03	; 3
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <RefVoltage+0x32>
  } else  {
     referenz = 0;		// limit to begin of table
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = referenz / Ref_Tab_Abstand;
    1196:	62 e3       	ldi	r22, 0x32	; 50
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__udivmodhi4>
  tabres = referenz % Ref_Tab_Abstand;
    119e:	f8 2e       	mov	r15, r24
  tabres = Ref_Tab_Abstand-tabres;
  if (tabind > 7) {
     tabind = 7;		// limit to end of table
  }
  // interpolate the table of factors
  y1 = MEM_read_word(&RHtab[tabind]);
    11a0:	68 30       	cpi	r22, 0x08	; 8
    11a2:	08 f0       	brcs	.+2      	; 0x11a6 <RefVoltage+0x42>
    11a4:	67 e0       	ldi	r22, 0x07	; 7
    11a6:	c6 2f       	mov	r28, r22
    11a8:	d0 e0       	ldi	r29, 0x00	; 0
    11aa:	ce 01       	movw	r24, r28
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	8a 54       	subi	r24, 0x4A	; 74
    11b2:	9f 4f       	sbci	r25, 0xFF	; 255
    11b4:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <__eerd_word_m328p>
    11b8:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RHtab[tabind+1]);
    11ba:	ce 01       	movw	r24, r28
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	88 54       	subi	r24, 0x48	; 72
    11c2:	9f 4f       	sbci	r25, 0xFF	; 255
    11c4:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <__eerd_word_m328p>
    11c8:	9c 01       	movw	r18, r24
  } else  {
     referenz = 0;		// limit to begin of table
  }
  tabind = referenz / Ref_Tab_Abstand;
  tabres = referenz % Ref_Tab_Abstand;
  tabres = Ref_Tab_Abstand-tabres;
    11ca:	42 e3       	ldi	r20, 0x32	; 50
    11cc:	4f 19       	sub	r20, r15
  }
  // interpolate the table of factors
  y1 = MEM_read_word(&RHtab[tabind]);
  y2 = MEM_read_word(&RHtab[tabind+1]);
  // RHmultip is the interpolated factor to compute capacity from load time with 470k
  RHmultip = ((y1 - y2) * tabres + (Ref_Tab_Abstand/2)) / Ref_Tab_Abstand + y2;
    11ce:	50 e0       	ldi	r21, 0x00	; 0
    11d0:	08 1b       	sub	r16, r24
    11d2:	19 0b       	sbc	r17, r25
    11d4:	40 9f       	mul	r20, r16
    11d6:	c0 01       	movw	r24, r0
    11d8:	41 9f       	mul	r20, r17
    11da:	90 0d       	add	r25, r0
    11dc:	50 9f       	mul	r21, r16
    11de:	90 0d       	add	r25, r0
    11e0:	11 24       	eor	r1, r1
    11e2:	49 96       	adiw	r24, 0x19	; 25
    11e4:	62 e3       	ldi	r22, 0x32	; 50
    11e6:	70 e0       	ldi	r23, 0x00	; 0
    11e8:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__udivmodhi4>
    11ec:	62 0f       	add	r22, r18
    11ee:	73 1f       	adc	r23, r19
    11f0:	70 93 01 01 	sts	0x0101, r23
    11f4:	60 93 00 01 	sts	0x0100, r22
 }
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	1f 91       	pop	r17
    11fe:	0f 91       	pop	r16
    1200:	ff 90       	pop	r15
    1202:	08 95       	ret

00001204 <lcd_clear_line>:
#endif

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
    1204:	1f 93       	push	r17
    1206:	14 e1       	ldi	r17, 0x14	; 20
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    lcd_space();
    1208:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>
    120c:	11 50       	subi	r17, 0x01	; 1

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    120e:	e1 f7       	brne	.-8      	; 0x1208 <lcd_clear_line+0x4>
    lcd_space();
 }
}
    1210:	1f 91       	pop	r17
    1212:	08 95       	ret

00001214 <DisplayValue>:
 *    e.g: p = 10^-12 -> -12
 *  - unit character (0 = none)
 *  digits = 2, 3 or 4
 */
void DisplayValue(unsigned long Value, int8_t Exponent, unsigned char Unit, unsigned char digits)
{
    1214:	2f 92       	push	r2
    1216:	3f 92       	push	r3
    1218:	4f 92       	push	r4
    121a:	5f 92       	push	r5
    121c:	7f 92       	push	r7
    121e:	8f 92       	push	r8
    1220:	9f 92       	push	r9
    1222:	af 92       	push	r10
    1224:	bf 92       	push	r11
    1226:	cf 92       	push	r12
    1228:	df 92       	push	r13
    122a:	ef 92       	push	r14
    122c:	ff 92       	push	r15
    122e:	0f 93       	push	r16
    1230:	1f 93       	push	r17
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	2f 97       	sbiw	r28, 0x0f	; 15
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	6b 01       	movw	r12, r22
    1248:	7c 01       	movw	r14, r24
    124a:	14 2f       	mov	r17, r20
    124c:	72 2e       	mov	r7, r18
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
    124e:	03 30       	cpi	r16, 0x03	; 3
    1250:	29 f0       	breq	.+10     	; 0x125c <DisplayValue+0x48>
  if (digits == 4) Limit = 10000;
    1252:	04 30       	cpi	r16, 0x04	; 4
    1254:	31 f0       	breq	.+12     	; 0x1262 <DisplayValue+0x4e>
  uint8_t           Offset;		/* exponent of offset to next 10^3 step */
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
    1256:	84 e6       	ldi	r24, 0x64	; 100
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	14 c0       	rjmp	.+40     	; 0x1284 <DisplayValue+0x70>
  if (digits == 3) Limit = 1000;
    125c:	88 ee       	ldi	r24, 0xE8	; 232
    125e:	93 e0       	ldi	r25, 0x03	; 3
    1260:	11 c0       	rjmp	.+34     	; 0x1284 <DisplayValue+0x70>
  if (digits == 4) Limit = 10000;
    1262:	80 e1       	ldi	r24, 0x10	; 16
    1264:	97 e2       	ldi	r25, 0x27	; 39
    1266:	0e c0       	rjmp	.+28     	; 0x1284 <DisplayValue+0x70>
  while (Value >= Limit)
  {
    Value += 5;				/* for automagic rounding */
    1268:	c7 01       	movw	r24, r14
    126a:	b6 01       	movw	r22, r12
    126c:	6b 5f       	subi	r22, 0xFB	; 251
    126e:	7f 4f       	sbci	r23, 0xFF	; 255
    1270:	8f 4f       	sbci	r24, 0xFF	; 255
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    Value = Value / 10;			/* scale down by 10^1 */
    1274:	a5 01       	movw	r20, r10
    1276:	94 01       	movw	r18, r8
    1278:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
    127c:	69 01       	movw	r12, r18
    127e:	7a 01       	movw	r14, r20
    Exponent++;				/* increase exponent by 1 */
    1280:	1f 5f       	subi	r17, 0xFF	; 255
    1282:	08 c0       	rjmp	.+16     	; 0x1294 <DisplayValue+0x80>


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
  if (digits == 4) Limit = 10000;
  while (Value >= Limit)
    1284:	1c 01       	movw	r2, r24
    1286:	44 24       	eor	r4, r4
    1288:	55 24       	eor	r5, r5
  {
    Value += 5;				/* for automagic rounding */
    Value = Value / 10;			/* scale down by 10^1 */
    128a:	4a e0       	ldi	r20, 0x0A	; 10
    128c:	84 2e       	mov	r8, r20
    128e:	91 2c       	mov	r9, r1
    1290:	a1 2c       	mov	r10, r1
    1292:	b1 2c       	mov	r11, r1


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
  if (digits == 4) Limit = 10000;
  while (Value >= Limit)
    1294:	c2 14       	cp	r12, r2
    1296:	d3 04       	cpc	r13, r3
    1298:	e4 04       	cpc	r14, r4
    129a:	f5 04       	cpc	r15, r5
    129c:	28 f7       	brcc	.-54     	; 0x1268 <DisplayValue+0x54>


  /*
   *  determine prefix
   */
  Length = Exponent + 12;
    129e:	81 2f       	mov	r24, r17
    12a0:	84 5f       	subi	r24, 0xF4	; 244
    12a2:	83 31       	cpi	r24, 0x13	; 19
    12a4:	08 f0       	brcs	.+2      	; 0x12a8 <DisplayValue+0x94>
    12a6:	82 e1       	ldi	r24, 0x12	; 18
  if (Length <  0) Length = 0;		/* Limit to minimum prefix */
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
  Index = Length / 3;
    12a8:	23 e0       	ldi	r18, 0x03	; 3
  Offset = Length % 3;
    12aa:	62 2f       	mov	r22, r18
    12ac:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <__udivmodqi4>
    12b0:	19 2f       	mov	r17, r25
    if (Offset > 0)
    12b2:	99 23       	and	r25, r25
    12b4:	19 f0       	breq	.+6      	; 0x12bc <DisplayValue+0xa8>
    {
      Index++;				/* adjust index for exponent offset, take next prefix */
    12b6:	8f 5f       	subi	r24, 0xFF	; 255
      Offset = 3 - Offset;		/* reverse value (1 or 2) */
    12b8:	29 1b       	sub	r18, r25
    12ba:	12 2f       	mov	r17, r18
    }
  Prefix = MEM_read_byte((uint8_t *)(&PrefixTab[Index]));   /* look up prefix in table */
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	81 5a       	subi	r24, 0xA1	; 161
    12c0:	9d 4f       	sbci	r25, 0xFD	; 253
    12c2:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__eerd_byte_m328p>
    12c6:	b8 2e       	mov	r11, r24
  /*
   *  display value
   */

  /* convert value into string */
  utoa((unsigned int)Value, OutBuffer, 10);
    12c8:	c6 01       	movw	r24, r12
    12ca:	6e 01       	movw	r12, r28
    12cc:	08 94       	sec
    12ce:	c1 1c       	adc	r12, r1
    12d0:	d1 1c       	adc	r13, r1
    12d2:	b6 01       	movw	r22, r12
    12d4:	4a e0       	ldi	r20, 0x0A	; 10
    12d6:	50 e0       	ldi	r21, 0x00	; 0
    12d8:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <utoa>
  Length = strlen(OutBuffer);
    12dc:	f6 01       	movw	r30, r12
    12de:	01 90       	ld	r0, Z+
    12e0:	00 20       	and	r0, r0
    12e2:	e9 f7       	brne	.-6      	; 0x12de <DisplayValue+0xca>
    12e4:	31 97       	sbiw	r30, 0x01	; 1
    12e6:	2e 2e       	mov	r2, r30
    12e8:	2c 18       	sub	r2, r12

  /* position of dot */
  Exponent = Length - Offset;		/* calculate position */
    12ea:	82 2c       	mov	r8, r2
    12ec:	81 1a       	sub	r8, r17

  if (Exponent <= 0)			/* we have to prepend "0." */
    12ee:	18 14       	cp	r1, r8
    12f0:	44 f0       	brlt	.+16     	; 0x1302 <DisplayValue+0xee>
  {
    /* 0: factor 10 / -1: factor 100 */
//    lcd_data('0');
    lcd_data('.');
    12f2:	8e e2       	ldi	r24, 0x2E	; 46
    12f4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
    if (Exponent < 0) lcd_data('0');	/* extra 0 for factor 100 */
    12f8:	88 20       	and	r8, r8
    12fa:	19 f0       	breq	.+6      	; 0x1302 <DisplayValue+0xee>
    12fc:	80 e3       	ldi	r24, 0x30	; 48
    12fe:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
  }

  if (Offset == 0) Exponent = -1;	/* disable dot if not needed */
    1302:	11 23       	and	r17, r17
    1304:	11 f4       	brne	.+4      	; 0x130a <DisplayValue+0xf6>
    1306:	88 24       	eor	r8, r8
    1308:	8a 94       	dec	r8
    130a:	6e 01       	movw	r12, r28
    130c:	08 94       	sec
    130e:	c1 1c       	adc	r12, r1
    1310:	d1 1c       	adc	r13, r1
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    1312:	00 e0       	ldi	r16, 0x00	; 0
    1314:	10 e0       	ldi	r17, 0x00	; 0
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    Index++;				/* next one */
    if (Index == Exponent) {
    1316:	99 24       	eor	r9, r9
    1318:	87 fc       	sbrc	r8, 7
    131a:	90 94       	com	r9
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    131c:	0d c0       	rjmp	.+26     	; 0x1338 <DisplayValue+0x124>
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    131e:	0f 5f       	subi	r16, 0xFF	; 255
    1320:	1f 4f       	sbci	r17, 0xFF	; 255
    1322:	f6 01       	movw	r30, r12
    1324:	81 91       	ld	r24, Z+
    1326:	6f 01       	movw	r12, r30
    1328:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
    Index++;				/* next one */
    if (Index == Exponent) {
    132c:	08 15       	cp	r16, r8
    132e:	19 05       	cpc	r17, r9
    1330:	19 f4       	brne	.+6      	; 0x1338 <DisplayValue+0x124>
      lcd_data('.');			/* display dot */
    1332:	8e e2       	ldi	r24, 0x2E	; 46
    1334:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    1338:	02 15       	cp	r16, r2
    133a:	88 f3       	brcs	.-30     	; 0x131e <DisplayValue+0x10a>
      lcd_data('.');			/* display dot */
    }
  }

  /* display prefix and unit */
  if (Prefix != 0) lcd_data(Prefix);
    133c:	bb 20       	and	r11, r11
    133e:	19 f0       	breq	.+6      	; 0x1346 <DisplayValue+0x132>
    1340:	8b 2d       	mov	r24, r11
    1342:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
  if (Unit) lcd_data(Unit);
    1346:	77 20       	and	r7, r7
    1348:	19 f0       	breq	.+6      	; 0x1350 <DisplayValue+0x13c>
    134a:	87 2d       	mov	r24, r7
    134c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
}
    1350:	2f 96       	adiw	r28, 0x0f	; 15
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	1f 91       	pop	r17
    1362:	0f 91       	pop	r16
    1364:	ff 90       	pop	r15
    1366:	ef 90       	pop	r14
    1368:	df 90       	pop	r13
    136a:	cf 90       	pop	r12
    136c:	bf 90       	pop	r11
    136e:	af 90       	pop	r10
    1370:	9f 90       	pop	r9
    1372:	8f 90       	pop	r8
    1374:	7f 90       	pop	r7
    1376:	5f 90       	pop	r5
    1378:	4f 90       	pop	r4
    137a:	3f 90       	pop	r3
    137c:	2f 90       	pop	r2
    137e:	08 95       	ret

00001380 <RvalOut>:
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
      lcd_space();
   }
}

void RvalOut(uint8_t ii) {	
    1380:	0f 93       	push	r16
   // output of resistor value

   DisplayValue(resis[ii].rx,-1,LCD_CHAR_OMEGA,4);
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	2b e0       	ldi	r18, 0x0B	; 11
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	82 9f       	mul	r24, r18
    138a:	f0 01       	movw	r30, r0
    138c:	83 9f       	mul	r24, r19
    138e:	f0 0d       	add	r31, r0
    1390:	92 9f       	mul	r25, r18
    1392:	f0 0d       	add	r31, r0
    1394:	11 24       	eor	r1, r1
    1396:	e8 5e       	subi	r30, 0xE8	; 232
    1398:	fe 4f       	sbci	r31, 0xFE	; 254
    139a:	60 81       	ld	r22, Z
    139c:	71 81       	ldd	r23, Z+1	; 0x01
    139e:	82 81       	ldd	r24, Z+2	; 0x02
    13a0:	93 81       	ldd	r25, Z+3	; 0x03
    13a2:	4f ef       	ldi	r20, 0xFF	; 255
    13a4:	24 ef       	ldi	r18, 0xF4	; 244
    13a6:	04 e0       	ldi	r16, 0x04	; 4
    13a8:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
   lcd_space();
    13ac:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>
 }
    13b0:	0f 91       	pop	r16
    13b2:	08 95       	ret

000013b4 <mVAusgabe>:
   lcd_line2(); 				//2. row
   lcd_fix_string(Uf_str);			//"Uf="
   mVAusgabe(bcdnum >> 4);
   mVAusgabe(bcdnum & 0x0f);
}
void mVAusgabe(uint8_t nn) {
    13b4:	0f 93       	push	r16
   if (nn < 3) {
    13b6:	83 30       	cpi	r24, 0x03	; 3
    13b8:	98 f4       	brcc	.+38     	; 0x13e0 <mVAusgabe+0x2c>
      // Output in mV units
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
    13ba:	e8 2f       	mov	r30, r24
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	ee 0f       	add	r30, r30
    13c0:	ff 1f       	adc	r31, r31
    13c2:	ee 0f       	add	r30, r30
    13c4:	ff 1f       	adc	r31, r31
    13c6:	e4 59       	subi	r30, 0x94	; 148
    13c8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ca:	62 81       	ldd	r22, Z+2	; 0x02
    13cc:	73 81       	ldd	r23, Z+3	; 0x03
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	4d ef       	ldi	r20, 0xFD	; 253
    13d4:	26 e5       	ldi	r18, 0x56	; 86
    13d6:	03 e0       	ldi	r16, 0x03	; 3
    13d8:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
      lcd_space();
    13dc:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>
   }
}
    13e0:	0f 91       	pop	r16
    13e2:	08 95       	ret

000013e4 <UfAusgabe>:
// output of flux voltage for 1-2 diodes in row 2
// bcdnum = Numbers of both Diodes:
// higher 4 Bit  number of first Diode
// lower 4 Bit  number of second Diode (Structure diodes[nn])
// if number >= 3  no output is done
void UfAusgabe(uint8_t bcdnum) {
    13e4:	1f 93       	push	r17
    13e6:	18 2f       	mov	r17, r24

   lcd_line2(); 				//2. row
    13e8:	80 ec       	ldi	r24, 0xC0	; 192
    13ea:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
   lcd_fix_string(Uf_str);			//"Uf="
    13ee:	89 e8       	ldi	r24, 0x89	; 137
    13f0:	91 e0       	ldi	r25, 0x01	; 1
    13f2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
   mVAusgabe(bcdnum >> 4);
    13f6:	81 2f       	mov	r24, r17
    13f8:	82 95       	swap	r24
    13fa:	8f 70       	andi	r24, 0x0F	; 15
    13fc:	0e 94 da 09 	call	0x13b4	; 0x13b4 <mVAusgabe>
   mVAusgabe(bcdnum & 0x0f);
    1400:	81 2f       	mov	r24, r17
    1402:	8f 70       	andi	r24, 0x0F	; 15
    1404:	0e 94 da 09 	call	0x13b4	; 0x13b4 <mVAusgabe>
}
    1408:	1f 91       	pop	r17
    140a:	08 95       	ret

0000140c <AutoCheck>:
void AutoCheck(void) {
    140c:	2f 92       	push	r2
    140e:	3f 92       	push	r3
    1410:	4f 92       	push	r4
    1412:	5f 92       	push	r5
    1414:	6f 92       	push	r6
    1416:	7f 92       	push	r7
    1418:	8f 92       	push	r8
    141a:	9f 92       	push	r9
    141c:	af 92       	push	r10
    141e:	bf 92       	push	r11
    1420:	cf 92       	push	r12
    1422:	df 92       	push	r13
    1424:	ef 92       	push	r14
    1426:	ff 92       	push	r15
    1428:	0f 93       	push	r16
    142a:	1f 93       	push	r17
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	2e 97       	sbiw	r28, 0x0e	; 14
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	cd bf       	out	0x3d, r28	; 61

#ifdef AUTO_CAL
  uint8_t cap_found;	// counter for found capacitor
  int8_t udiff2;
#endif
  ADC_PORT = TXD_VAL;
    1440:	88 e0       	ldi	r24, 0x08	; 8
    1442:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = TXD_MSK;
    1444:	87 b9       	out	0x07, r24	; 7
  R_PORT = (1<<(TP1*2));		//Pin 1 over RL to +
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	85 b9       	out	0x05, r24	; 5
  R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//Pin 2 over RL to -
    144a:	85 e0       	ldi	r24, 0x05	; 5
    144c:	84 b9       	out	0x04, r24	; 4
  adcmv[0] = W5msReadADC(PC0);		// voltage at Pin 1
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
    1454:	8c 01       	movw	r16, r24
    1456:	9a 83       	std	Y+2, r25	; 0x02
    1458:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = ReadADC(PC1);		// voltage at Pin 2
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
    1460:	7c 01       	movw	r14, r24
    1462:	9c 83       	std	Y+4, r25	; 0x04
    1464:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = ReadADC(PC2);		// voltage at Pin 3
    1466:	82 e0       	ldi	r24, 0x02	; 2
    1468:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
    146c:	9c 01       	movw	r18, r24
    146e:	9e 83       	std	Y+6, r25	; 0x06
    1470:	8d 83       	std	Y+5, r24	; 0x05
  if (abs((int)(adcmv[1] - adcmv[0])) > 20) {
    1472:	e0 1a       	sub	r14, r16
    1474:	f1 0a       	sbc	r15, r17
    1476:	f7 fe       	sbrs	r15, 7
    1478:	04 c0       	rjmp	.+8      	; 0x1482 <AutoCheck+0x76>
    147a:	f0 94       	com	r15
    147c:	e1 94       	neg	r14
    147e:	f1 08       	sbc	r15, r1
    1480:	f3 94       	inc	r15
    1482:	85 e1       	ldi	r24, 0x15	; 21
    1484:	e8 16       	cp	r14, r24
    1486:	f1 04       	cpc	r15, r1
    1488:	0c f0       	brlt	.+2      	; 0x148c <AutoCheck+0x80>
    148a:	6a c4       	rjmp	.+2260   	; 0x1d60 <AutoCheck+0x954>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[2] - adcmv[0])) > 20) {
    148c:	20 1b       	sub	r18, r16
    148e:	31 0b       	sbc	r19, r17
    1490:	37 ff       	sbrs	r19, 7
    1492:	03 c0       	rjmp	.+6      	; 0x149a <AutoCheck+0x8e>
    1494:	30 95       	com	r19
    1496:	21 95       	neg	r18
    1498:	3f 4f       	sbci	r19, 0xFF	; 255
    149a:	25 31       	cpi	r18, 0x15	; 21
    149c:	31 05       	cpc	r19, r1
    149e:	0c f0       	brlt	.+2      	; 0x14a2 <AutoCheck+0x96>
    14a0:	5f c4       	rjmp	.+2238   	; 0x1d60 <AutoCheck+0x954>
     return;				//difference to big, no selftest
  }
  if (abs((int)((adcmv[0]*2) - ADCconfig.U_AVCC)) > 60) {
    14a2:	00 0f       	add	r16, r16
    14a4:	11 1f       	adc	r17, r17
    14a6:	80 91 3d 01 	lds	r24, 0x013D
    14aa:	90 91 3e 01 	lds	r25, 0x013E
    14ae:	08 1b       	sub	r16, r24
    14b0:	19 0b       	sbc	r17, r25
    14b2:	17 ff       	sbrs	r17, 7
    14b4:	03 c0       	rjmp	.+6      	; 0x14bc <AutoCheck+0xb0>
    14b6:	10 95       	com	r17
    14b8:	01 95       	neg	r16
    14ba:	1f 4f       	sbci	r17, 0xFF	; 255
    14bc:	0d 33       	cpi	r16, 0x3D	; 61
    14be:	11 05       	cpc	r17, r1
    14c0:	0c f0       	brlt	.+2      	; 0x14c4 <AutoCheck+0xb8>
    14c2:	4e c4       	rjmp	.+2204   	; 0x1d60 <AutoCheck+0x954>
     return;				//difference to big, no selftest
  }
  R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//Pin 3 over RL to - (Pin 1 over RL to +)
    14c4:	81 e1       	ldi	r24, 0x11	; 17
    14c6:	84 b9       	out	0x04, r24	; 4
  adcmv[0] = W5msReadADC(PC0);		// voltage at Pin 1
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
    14ce:	8c 01       	movw	r16, r24
    14d0:	9a 83       	std	Y+2, r25	; 0x02
    14d2:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = ReadADC(PC1);		// voltage at Pin 2
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
    14da:	7c 01       	movw	r14, r24
    14dc:	9c 83       	std	Y+4, r25	; 0x04
    14de:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = ReadADC(PC2);		// voltage at Pin 3
    14e0:	82 e0       	ldi	r24, 0x02	; 2
    14e2:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
    14e6:	9c 01       	movw	r18, r24
    14e8:	9e 83       	std	Y+6, r25	; 0x06
    14ea:	8d 83       	std	Y+5, r24	; 0x05
  if (abs((int)(adcmv[1] - adcmv[0])) > 20) {
    14ec:	e0 1a       	sub	r14, r16
    14ee:	f1 0a       	sbc	r15, r17
    14f0:	f7 fe       	sbrs	r15, 7
    14f2:	04 c0       	rjmp	.+8      	; 0x14fc <AutoCheck+0xf0>
    14f4:	f0 94       	com	r15
    14f6:	e1 94       	neg	r14
    14f8:	f1 08       	sbc	r15, r1
    14fa:	f3 94       	inc	r15
    14fc:	e5 e1       	ldi	r30, 0x15	; 21
    14fe:	ee 16       	cp	r14, r30
    1500:	f1 04       	cpc	r15, r1
    1502:	0c f0       	brlt	.+2      	; 0x1506 <AutoCheck+0xfa>
    1504:	2d c4       	rjmp	.+2138   	; 0x1d60 <AutoCheck+0x954>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[2] - adcmv[0])) > 20) {
    1506:	20 1b       	sub	r18, r16
    1508:	31 0b       	sbc	r19, r17
    150a:	37 ff       	sbrs	r19, 7
    150c:	03 c0       	rjmp	.+6      	; 0x1514 <AutoCheck+0x108>
    150e:	30 95       	com	r19
    1510:	21 95       	neg	r18
    1512:	3f 4f       	sbci	r19, 0xFF	; 255
    1514:	25 31       	cpi	r18, 0x15	; 21
    1516:	31 05       	cpc	r19, r1
    1518:	0c f0       	brlt	.+2      	; 0x151c <AutoCheck+0x110>
    151a:	22 c4       	rjmp	.+2116   	; 0x1d60 <AutoCheck+0x954>
     return;				//difference to big, no selftest
  }
  if (abs((int)((adcmv[0]*2) - ADCconfig.U_AVCC)) > 60) {
    151c:	00 0f       	add	r16, r16
    151e:	11 1f       	adc	r17, r17
    1520:	80 91 3d 01 	lds	r24, 0x013D
    1524:	90 91 3e 01 	lds	r25, 0x013E
    1528:	08 1b       	sub	r16, r24
    152a:	19 0b       	sbc	r17, r25
    152c:	17 ff       	sbrs	r17, 7
    152e:	03 c0       	rjmp	.+6      	; 0x1536 <AutoCheck+0x12a>
    1530:	10 95       	com	r17
    1532:	01 95       	neg	r16
    1534:	1f 4f       	sbci	r17, 0xFF	; 255
    1536:	0d 33       	cpi	r16, 0x3D	; 61
    1538:	11 05       	cpc	r17, r1
    153a:	0c f0       	brlt	.+2      	; 0x153e <AutoCheck+0x132>
    153c:	11 c4       	rjmp	.+2082   	; 0x1d60 <AutoCheck+0x954>
     return;				//difference to big, no selftest
  }
#ifdef WITH_SELFTEST
  lcd_clear();
    153e:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
    1542:	88 e3       	ldi	r24, 0x38	; 56
    1544:	91 e0       	ldi	r25, 0x01	; 1
    1546:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
  wait1s();
    154a:	0e 94 59 14 	call	0x28b2	; 0x28b2 <wait1000ms>
    154e:	44 24       	eor	r4, r4
    1550:	55 24       	eor	r5, r5
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    1552:	11 e0       	ldi	r17, 0x01	; 1
           adcmv[2] = W20msReadADC(TP3);
           lcd_fix2_string(RH1L);	// "RH_Lo="
        }
                                        //############################################
        if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to VCC
    1554:	32 e0       	ldi	r19, 0x02	; 2
    1556:	a3 2e       	mov	r10, r19
           R_PORT = 2<<(TP1*2);
           adcmv[0] = W20msReadADC(TP1) - ADCconfig.U_AVCC;
           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to VCC
    1558:	28 e0       	ldi	r18, 0x08	; 8
    155a:	c2 2e       	mov	r12, r18
           R_PORT = 2<<(TP2*2);
           adcmv[1] = W20msReadADC(TP2) - ADCconfig.U_AVCC;
           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to VCC
    155c:	90 e2       	ldi	r25, 0x20	; 32
    155e:	b9 2e       	mov	r11, r25
           lcd_string(utoa(RHmultip, outval, 10));
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
    1560:	85 e0       	ldi	r24, 0x05	; 5
    1562:	f8 2e       	mov	r15, r24
           adcmv[0] = W20msReadADC(TP1);
           adcmv[0] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1564:	0c e3       	ldi	r16, 0x3C	; 60
    1566:	60 2e       	mov	r6, r16
    1568:	09 ec       	ldi	r16, 0xC9	; 201
    156a:	70 2e       	mov	r7, r16
    156c:	0f ef       	ldi	r16, 0xFF	; 255
    156e:	80 2e       	mov	r8, r16
    1570:	0f ef       	ldi	r16, 0xFF	; 255
    1572:	90 2e       	mov	r9, r16
    1574:	5a c1       	rjmp	.+692    	; 0x182a <AutoCheck+0x41e>
  wait1s();
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
        lcd_line2();			//Cursor to column 1, row 2
    1576:	80 ec       	ldi	r24, 0xC0	; 192
    1578:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
        lcd_clear_line();		// clear total line
    157c:	0e 94 02 09 	call	0x1204	; 0x1204 <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    1580:	80 e8       	ldi	r24, 0x80	; 128
    1582:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
        lcd_clear_line();		// clear total line
    1586:	0e 94 02 09 	call	0x1204	; 0x1204 <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    158a:	80 e8       	ldi	r24, 0x80	; 128
    158c:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
        lcd_data('T');			//output the Testmode "T"
    1590:	84 e5       	ldi	r24, 0x54	; 84
    1592:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
        lcd_string(utoa(tt, outval, 10));	//output Test number
    1596:	c2 01       	movw	r24, r4
    1598:	6c e0       	ldi	r22, 0x0C	; 12
    159a:	71 e0       	ldi	r23, 0x01	; 1
    159c:	4a e0       	ldi	r20, 0x0A	; 10
    159e:	50 e0       	ldi	r21, 0x00	; 0
    15a0:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <utoa>
    15a4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_string>
        lcd_space();
    15a8:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>
                                        //############################################
        if (tt == 1) {   // output of reference voltage and factors for capacity measurement
    15ac:	fe 2d       	mov	r31, r14
    15ae:	f1 30       	cpi	r31, 0x01	; 1
    15b0:	81 f5       	brne	.+96     	; 0x1612 <AutoCheck+0x206>
           ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    15b2:	2e eb       	ldi	r18, 0xBE	; 190
    15b4:	20 93 39 01 	sts	0x0139, r18
 #ifdef WITH_AUTO_REF
           (void) ReadADC(0x0e);	// read reference voltage 
    15b8:	8e e0       	ldi	r24, 0x0E	; 14
    15ba:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
           ref_mv = W5msReadADC(0x0e);	// read reference voltage 
    15be:	8e e0       	ldi	r24, 0x0E	; 14
    15c0:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
    15c4:	90 93 40 01 	sts	0x0140, r25
    15c8:	80 93 3f 01 	sts	0x013F, r24
           RefVoltage();		//compute RHmultip = f(reference voltage)
    15cc:	0e 94 b2 08 	call	0x1164	; 0x1164 <RefVoltage>
 #endif
           lcd_fix2_string(URefT);	//"URef="
    15d0:	80 ed       	ldi	r24, 0xD0	; 208
    15d2:	91 e0       	ldi	r25, 0x01	; 1
    15d4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
           DisplayValue(ref_mv,-3,'V',4);
    15d8:	60 91 3f 01 	lds	r22, 0x013F
    15dc:	70 91 40 01 	lds	r23, 0x0140
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	4d ef       	ldi	r20, 0xFD	; 253
    15e6:	26 e5       	ldi	r18, 0x56	; 86
    15e8:	04 e0       	ldi	r16, 0x04	; 4
    15ea:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
           lcd_line2();			//Cursor to column 1, row 2
    15ee:	80 ec       	ldi	r24, 0xC0	; 192
    15f0:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
           lcd_fix2_string(RHfakt);	//"RHf="
    15f4:	85 ed       	ldi	r24, 0xD5	; 213
    15f6:	91 e0       	ldi	r25, 0x01	; 1
    15f8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
           lcd_string(utoa(RHmultip, outval, 10));
    15fc:	80 91 00 01 	lds	r24, 0x0100
    1600:	90 91 01 01 	lds	r25, 0x0101
    1604:	6c e0       	ldi	r22, 0x0C	; 12
    1606:	71 e0       	ldi	r23, 0x01	; 1
    1608:	4a e0       	ldi	r20, 0x0A	; 10
    160a:	50 e0       	ldi	r21, 0x00	; 0
    160c:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <utoa>
    1610:	f5 c0       	rjmp	.+490    	; 0x17fc <AutoCheck+0x3f0>
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
    1612:	8e 2d       	mov	r24, r14
    1614:	82 30       	cpi	r24, 0x02	; 2
    1616:	09 f0       	breq	.+2      	; 0x161a <AutoCheck+0x20e>
    1618:	52 c0       	rjmp	.+164    	; 0x16be <AutoCheck+0x2b2>
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	85 b9       	out	0x05, r24	; 5
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
    161e:	f4 b8       	out	0x04, r15	; 4
           adcmv[0] = W20msReadADC(TP1);
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	0e 94 1b 1a 	call	0x3436	; 0x3436 <W20msReadADC>
    1626:	8c 01       	movw	r16, r24
           adcmv[0] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1628:	60 91 3d 01 	lds	r22, 0x013D
    162c:	70 91 3e 01 	lds	r23, 0x013E
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	28 e5       	ldi	r18, 0x58	; 88
    1636:	3b e1       	ldi	r19, 0x1B	; 27
    1638:	40 e0       	ldi	r20, 0x00	; 0
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
    1640:	a4 01       	movw	r20, r8
    1642:	93 01       	movw	r18, r6
    1644:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <__divmodsi4>
    1648:	02 0f       	add	r16, r18
    164a:	13 1f       	adc	r17, r19
    164c:	1a 83       	std	Y+2, r17	; 0x02
    164e:	09 83       	std	Y+1, r16	; 0x01
           R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//RL3 to -
    1650:	34 b8       	out	0x04, r3	; 4
           adcmv[1] = W20msReadADC(TP1);
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	0e 94 1b 1a 	call	0x3436	; 0x3436 <W20msReadADC>
    1658:	8c 01       	movw	r16, r24
           adcmv[1] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    165a:	60 91 3d 01 	lds	r22, 0x013D
    165e:	70 91 3e 01 	lds	r23, 0x013E
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	28 e5       	ldi	r18, 0x58	; 88
    1668:	3b e1       	ldi	r19, 0x1B	; 27
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
    1672:	a4 01       	movw	r20, r8
    1674:	93 01       	movw	r18, r6
    1676:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <__divmodsi4>
    167a:	02 0f       	add	r16, r18
    167c:	13 1f       	adc	r17, r19
    167e:	1c 83       	std	Y+4, r17	; 0x04
    1680:	0b 83       	std	Y+3, r16	; 0x03
           R_PORT = 1<<(TP2*2);		//RL2 to VCC
    1682:	25 b8       	out	0x05, r2	; 5
           R_DDR = (1<<(TP2*2)) | (1<<(TP3*2));	//RL3 to -
    1684:	e4 e1       	ldi	r30, 0x14	; 20
    1686:	e4 b9       	out	0x04, r30	; 4
           adcmv[2] = W20msReadADC(TP2);
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	0e 94 1b 1a 	call	0x3436	; 0x3436 <W20msReadADC>
    168e:	8c 01       	movw	r16, r24
           adcmv[2] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1690:	60 91 3d 01 	lds	r22, 0x013D
    1694:	70 91 3e 01 	lds	r23, 0x013E
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	28 e5       	ldi	r18, 0x58	; 88
    169e:	3b e1       	ldi	r19, 0x1B	; 27
    16a0:	40 e0       	ldi	r20, 0x00	; 0
    16a2:	50 e0       	ldi	r21, 0x00	; 0
    16a4:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
    16a8:	a4 01       	movw	r20, r8
    16aa:	93 01       	movw	r18, r6
    16ac:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <__divmodsi4>
    16b0:	02 0f       	add	r16, r18
    16b2:	13 1f       	adc	r17, r19
    16b4:	1e 83       	std	Y+6, r17	; 0x06
    16b6:	0d 83       	std	Y+5, r16	; 0x05
           lcd_fix2_string(RLRL);	// "RLRL"
    16b8:	82 ee       	ldi	r24, 0xE2	; 226
    16ba:	91 e0       	ldi	r25, 0x01	; 1
    16bc:	49 c0       	rjmp	.+146    	; 0x1750 <AutoCheck+0x344>
        }
                                        //############################################
        if (tt == 3) { // how equal are the RH resistors
    16be:	fe 2d       	mov	r31, r14
    16c0:	f3 30       	cpi	r31, 0x03	; 3
    16c2:	41 f5       	brne	.+80     	; 0x1714 <AutoCheck+0x308>
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    16c4:	a5 b8       	out	0x05, r10	; 5
           R_DDR = (2<<(TP1*2)) | (2<<(TP2*2));	//RH2 to -
    16c6:	2a e0       	ldi	r18, 0x0A	; 10
    16c8:	24 b9       	out	0x04, r18	; 4
           adcmv[0] = W20msReadADC(TP1);
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	0e 94 1b 1a 	call	0x3436	; 0x3436 <W20msReadADC>
           adcmv[3] = ADCconfig.U_AVCC / 2;
    16d0:	00 91 3d 01 	lds	r16, 0x013D
    16d4:	10 91 3e 01 	lds	r17, 0x013E
    16d8:	16 95       	lsr	r17
    16da:	07 95       	ror	r16
    16dc:	18 87       	std	Y+8, r17	; 0x08
    16de:	0f 83       	std	Y+7, r16	; 0x07
           adcmv[0] -= adcmv[3];
    16e0:	80 1b       	sub	r24, r16
    16e2:	91 0b       	sbc	r25, r17
    16e4:	9a 83       	std	Y+2, r25	; 0x02
    16e6:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (2<<(TP1*2)) | (2<<(TP3*2));	//RH3 to -
    16e8:	82 e2       	ldi	r24, 0x22	; 34
    16ea:	84 b9       	out	0x04, r24	; 4
           adcmv[1] = W20msReadADC(TP1);
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	0e 94 1b 1a 	call	0x3436	; 0x3436 <W20msReadADC>
           adcmv[1] -= adcmv[3];
    16f2:	80 1b       	sub	r24, r16
    16f4:	91 0b       	sbc	r25, r17
    16f6:	9c 83       	std	Y+4, r25	; 0x04
    16f8:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 2<<(TP2*2);		//RL2 to VCC
    16fa:	c5 b8       	out	0x05, r12	; 5
           R_DDR = (2<<(TP2*2)) | (2<<(TP3*2));	//RH3 to -
    16fc:	e8 e2       	ldi	r30, 0x28	; 40
    16fe:	e4 b9       	out	0x04, r30	; 4
           adcmv[2] = W20msReadADC(TP2);
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	0e 94 1b 1a 	call	0x3436	; 0x3436 <W20msReadADC>
           adcmv[2] -= adcmv[3];
    1706:	80 1b       	sub	r24, r16
    1708:	91 0b       	sbc	r25, r17
    170a:	9e 83       	std	Y+6, r25	; 0x06
    170c:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RHRH);	// "RHRH"
    170e:	80 ef       	ldi	r24, 0xF0	; 240
    1710:	91 e0       	ldi	r25, 0x01	; 1
    1712:	1e c0       	rjmp	.+60     	; 0x1750 <AutoCheck+0x344>
        }
                                        //############################################
        if (tt == 4) { // Text release probes
    1714:	fe 2d       	mov	r31, r14
    1716:	f4 30       	cpi	r31, 0x04	; 4
    1718:	19 f4       	brne	.+6      	; 0x1720 <AutoCheck+0x314>
           lcd_fix2_string(RELPROBE);	// "Release Probes"
    171a:	88 e4       	ldi	r24, 0x48	; 72
    171c:	91 e0       	ldi	r25, 0x01	; 1
    171e:	18 c0       	rjmp	.+48     	; 0x1750 <AutoCheck+0x344>
        }
                                        //############################################
        if (tt == 5) { // can we switch the ADC pins to GND across R_H resistor?
    1720:	2e 2d       	mov	r18, r14
    1722:	25 30       	cpi	r18, 0x05	; 5
    1724:	c1 f4       	brne	.+48     	; 0x1756 <AutoCheck+0x34a>
           R_PORT = 0;
    1726:	15 b8       	out	0x05, r1	; 5
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to GND
    1728:	a4 b8       	out	0x04, r10	; 4
           adcmv[0] = W20msReadADC(TP1);
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	0e 94 1b 1a 	call	0x3436	; 0x3436 <W20msReadADC>
    1730:	9a 83       	std	Y+2, r25	; 0x02
    1732:	89 83       	std	Y+1, r24	; 0x01

           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to GND
    1734:	c4 b8       	out	0x04, r12	; 4
           adcmv[1] = W20msReadADC(TP2);
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	0e 94 1b 1a 	call	0x3436	; 0x3436 <W20msReadADC>
    173c:	9c 83       	std	Y+4, r25	; 0x04
    173e:	8b 83       	std	Y+3, r24	; 0x03

           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1740:	b4 b8       	out	0x04, r11	; 4
           adcmv[2] = W20msReadADC(TP3);
    1742:	82 e0       	ldi	r24, 0x02	; 2
    1744:	0e 94 1b 1a 	call	0x3436	; 0x3436 <W20msReadADC>
    1748:	9e 83       	std	Y+6, r25	; 0x06
    174a:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RH1L);	// "RH_Lo="
    174c:	8a ed       	ldi	r24, 0xDA	; 218
    174e:	91 e0       	ldi	r25, 0x01	; 1
    1750:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
    1754:	30 c0       	rjmp	.+96     	; 0x17b6 <AutoCheck+0x3aa>
        }
                                        //############################################
        if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
    1756:	8e 2d       	mov	r24, r14
    1758:	86 30       	cpi	r24, 0x06	; 6
    175a:	51 f5       	brne	.+84     	; 0x17b0 <AutoCheck+0x3a4>
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to VCC
    175c:	a4 b8       	out	0x04, r10	; 4
           R_PORT = 2<<(TP1*2);
    175e:	a5 b8       	out	0x05, r10	; 5
           adcmv[0] = W20msReadADC(TP1) - ADCconfig.U_AVCC;
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	0e 94 1b 1a 	call	0x3436	; 0x3436 <W20msReadADC>
    1766:	20 91 3d 01 	lds	r18, 0x013D
    176a:	30 91 3e 01 	lds	r19, 0x013E
    176e:	82 1b       	sub	r24, r18
    1770:	93 0b       	sbc	r25, r19
    1772:	9a 83       	std	Y+2, r25	; 0x02
    1774:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to VCC
    1776:	c4 b8       	out	0x04, r12	; 4
           R_PORT = 2<<(TP2*2);
    1778:	c5 b8       	out	0x05, r12	; 5
           adcmv[1] = W20msReadADC(TP2) - ADCconfig.U_AVCC;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	0e 94 1b 1a 	call	0x3436	; 0x3436 <W20msReadADC>
    1780:	20 91 3d 01 	lds	r18, 0x013D
    1784:	30 91 3e 01 	lds	r19, 0x013E
    1788:	82 1b       	sub	r24, r18
    178a:	93 0b       	sbc	r25, r19
    178c:	9c 83       	std	Y+4, r25	; 0x04
    178e:	8b 83       	std	Y+3, r24	; 0x03
           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to VCC
    1790:	b4 b8       	out	0x04, r11	; 4
           R_PORT = 2<<(TP3*2);
    1792:	b5 b8       	out	0x05, r11	; 5
           adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
    1794:	82 e0       	ldi	r24, 0x02	; 2
    1796:	0e 94 1b 1a 	call	0x3436	; 0x3436 <W20msReadADC>
    179a:	20 91 3d 01 	lds	r18, 0x013D
    179e:	30 91 3e 01 	lds	r19, 0x013E
    17a2:	82 1b       	sub	r24, r18
    17a4:	93 0b       	sbc	r25, r19
    17a6:	9e 83       	std	Y+6, r25	; 0x06
    17a8:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RH1H);	// "RH_Hi="
    17aa:	8e ed       	ldi	r24, 0xDE	; 222
    17ac:	91 e0       	ldi	r25, 0x01	; 1
    17ae:	d0 cf       	rjmp	.-96     	; 0x1750 <AutoCheck+0x344>
        }
                                        //############################################
        if (tt > 1) {	// output 3 voltages 
    17b0:	ee 2d       	mov	r30, r14
    17b2:	e1 30       	cpi	r30, 0x01	; 1
    17b4:	29 f1       	breq	.+74     	; 0x1800 <AutoCheck+0x3f4>
           lcd_line2();			//Cursor to column 1, row 2
    17b6:	80 ec       	ldi	r24, 0xC0	; 192
    17b8:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
           lcd_string(itoa(adcmv[0], outval, 10));	//output voltage 1
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	9a 81       	ldd	r25, Y+2	; 0x02
    17c0:	6c e0       	ldi	r22, 0x0C	; 12
    17c2:	71 e0       	ldi	r23, 0x01	; 1
    17c4:	4a e0       	ldi	r20, 0x0A	; 10
    17c6:	50 e0       	ldi	r21, 0x00	; 0
    17c8:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <itoa>
    17cc:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_string>
           lcd_space();
    17d0:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>
           lcd_string(itoa(adcmv[1], outval, 10));	//output voltage 2
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	9c 81       	ldd	r25, Y+4	; 0x04
    17d8:	6c e0       	ldi	r22, 0x0C	; 12
    17da:	71 e0       	ldi	r23, 0x01	; 1
    17dc:	4a e0       	ldi	r20, 0x0A	; 10
    17de:	50 e0       	ldi	r21, 0x00	; 0
    17e0:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <itoa>
    17e4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_string>
           lcd_space();
    17e8:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>
           lcd_string(itoa(adcmv[2], outval, 10));	//output voltage 3
    17ec:	8d 81       	ldd	r24, Y+5	; 0x05
    17ee:	9e 81       	ldd	r25, Y+6	; 0x06
    17f0:	6c e0       	ldi	r22, 0x0C	; 12
    17f2:	71 e0       	ldi	r23, 0x01	; 1
    17f4:	4a e0       	ldi	r20, 0x0A	; 10
    17f6:	50 e0       	ldi	r21, 0x00	; 0
    17f8:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <itoa>
    17fc:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_string>
        }
        ADC_DDR =  TXD_MSK;		// all-Pins to Input
    1800:	c7 b8       	out	0x07, r12	; 7
        ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
    1802:	c8 b8       	out	0x08, r12	; 8
        R_DDR = 0;			// all R-Ports to Input
    1804:	14 b8       	out	0x04, r1	; 4
        R_PORT = 0;
    1806:	15 b8       	out	0x05, r1	; 5
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    1808:	4f 9b       	sbis	0x09, 7	; 9
    180a:	09 c0       	rjmp	.+18     	; 0x181e <AutoCheck+0x412>
	   // if key is pressed, don't repeat
           break;
        }
        wait500ms();
    180c:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <wait500ms>
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    1810:	4f 9b       	sbis	0x09, 7	; 9
    1812:	05 c0       	rjmp	.+10     	; 0x181e <AutoCheck+0x412>
	   // if key is pressed, don't repeat
           break;
        }
        wait500ms();
    1814:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <wait500ms>
    1818:	da 94       	dec	r13
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
  wait1s();
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
    181a:	09 f0       	breq	.+2      	; 0x181e <AutoCheck+0x412>
    181c:	ac ce       	rjmp	.-680    	; 0x1576 <AutoCheck+0x16a>
    181e:	1e 2d       	mov	r17, r14
	   // if key is pressed, don't repeat
           break;
        }
        wait500ms();
     } //end for ww
     wait1s();
    1820:	0e 94 59 14 	call	0x28b2	; 0x28b2 <wait1000ms>
  lcd_clear();
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
  wait1s();
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    1824:	1f 5f       	subi	r17, 0xFF	; 255
    1826:	17 30       	cpi	r17, 0x07	; 7
    1828:	59 f0       	breq	.+22     	; 0x1840 <AutoCheck+0x434>
void AutoCheck(void) {
    182a:	a4 e0       	ldi	r26, 0x04	; 4
    182c:	da 2e       	mov	r13, r26
        lcd_line2();			//Cursor to column 1, row 2
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_data('T');			//output the Testmode "T"
    182e:	08 94       	sec
    1830:	41 1c       	adc	r4, r1
    1832:	51 1c       	adc	r5, r1
        if (tt == 2) { // how equal are the RL resistors? 
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
           adcmv[0] = W20msReadADC(TP1);
           adcmv[0] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
           R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//RL3 to -
    1834:	f1 e1       	ldi	r31, 0x11	; 17
    1836:	3f 2e       	mov	r3, r31
           adcmv[1] = W20msReadADC(TP1);
           adcmv[1] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
           R_PORT = 1<<(TP2*2);		//RL2 to VCC
    1838:	e4 e0       	ldi	r30, 0x04	; 4
    183a:	2e 2e       	mov	r2, r30
    183c:	e1 2e       	mov	r14, r17
    183e:	9b ce       	rjmp	.-714    	; 0x1576 <AutoCheck+0x16a>
     wait1s();
  } //end for tt
#endif

  // measurement of internal resistance of the ADC port outputs switched to GND
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    1840:	79 e0       	ldi	r23, 0x09	; 9
    1842:	c7 2e       	mov	r12, r23
    1844:	c7 b8       	out	0x07, r12	; 7
  R_PORT = 1<<(TP1*2);		//R_L-PORT 1 to VCC
    1846:	dd 24       	eor	r13, r13
    1848:	d3 94       	inc	r13
    184a:	d5 b8       	out	0x05, r13	; 5
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to VCC
    184c:	d4 b8       	out	0x04, r13	; 4
  adcmv[0] = W5msReadADC(TP1);
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
    1854:	7c 01       	movw	r14, r24

  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin 2 to output 0V
    1856:	6a e0       	ldi	r22, 0x0A	; 10
    1858:	66 2e       	mov	r6, r22
    185a:	67 b8       	out	0x07, r6	; 7
  R_PORT =  1<<(TP2*2);	//R_L-PORT 2 to VCC
    185c:	54 e0       	ldi	r21, 0x04	; 4
    185e:	85 2e       	mov	r8, r21
    1860:	85 b8       	out	0x05, r8	; 5
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to VCC
    1862:	84 b8       	out	0x04, r8	; 4
  adcmv[1] = W5msReadADC(TP2);
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
    186a:	8c 01       	movw	r16, r24

  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin 3 to output 0V
    186c:	4c e0       	ldi	r20, 0x0C	; 12
    186e:	a4 2e       	mov	r10, r20
    1870:	a7 b8       	out	0x07, r10	; 7
  R_PORT =  1<<(TP3*2);	//R_L-PORT 3 to VCC
    1872:	30 e1       	ldi	r19, 0x10	; 16
    1874:	b3 2e       	mov	r11, r19
    1876:	b5 b8       	out	0x05, r11	; 5
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to VCC
    1878:	b4 b8       	out	0x04, r11	; 4
  adcmv[2] = W5msReadADC(TP3);
    187a:	82 e0       	ldi	r24, 0x02	; 2
    187c:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
  sum_rm = (adcmv[0] + adcmv[1] + adcmv[2]); //add all three values
    1880:	0e 0d       	add	r16, r14
    1882:	1f 1d       	adc	r17, r15
    1884:	08 0f       	add	r16, r24
    1886:	19 1f       	adc	r17, r25

  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
    1888:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
    188a:	c8 b8       	out	0x08, r12	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    188c:	c7 b8       	out	0x07, r12	; 7
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
    188e:	d4 b8       	out	0x04, r13	; 4
  adcmv[0] = ADCconfig.U_AVCC - W5msReadADC(TP1);
    1890:	c0 90 3d 01 	lds	r12, 0x013D
    1894:	d0 90 3e 01 	lds	r13, 0x013E
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
    189e:	c8 1a       	sub	r12, r24
    18a0:	d9 0a       	sbc	r13, r25
    18a2:	da 82       	std	Y+2, r13	; 0x02
    18a4:	c9 82       	std	Y+1, r12	; 0x01
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
    18a6:	68 b8       	out	0x08, r6	; 8
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
    18a8:	67 b8       	out	0x07, r6	; 7
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
    18aa:	84 b8       	out	0x04, r8	; 4
  adcmv[1] = ADCconfig.U_AVCC - W5msReadADC(TP2);
    18ac:	e0 90 3d 01 	lds	r14, 0x013D
    18b0:	f0 90 3e 01 	lds	r15, 0x013E
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
    18ba:	e8 1a       	sub	r14, r24
    18bc:	f9 0a       	sbc	r15, r25
    18be:	fc 82       	std	Y+4, r15	; 0x04
    18c0:	eb 82       	std	Y+3, r14	; 0x03

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
    18c2:	a8 b8       	out	0x08, r10	; 8
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
    18c4:	a7 b8       	out	0x07, r10	; 7
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
    18c6:	b4 b8       	out	0x04, r11	; 4
  adcmv[2] = ADCconfig.U_AVCC - W5msReadADC(TP3);
    18c8:	a0 90 3d 01 	lds	r10, 0x013D
    18cc:	b0 90 3e 01 	lds	r11, 0x013E
    18d0:	82 e0       	ldi	r24, 0x02	; 2
    18d2:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>

  sum_c0 = (adcmv[0] + adcmv[1] + adcmv[2]);
    18d6:	ec 0c       	add	r14, r12
    18d8:	fd 1c       	adc	r15, r13
  adcmv[1] = ADCconfig.U_AVCC - W5msReadADC(TP2);

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
  adcmv[2] = ADCconfig.U_AVCC - W5msReadADC(TP3);
    18da:	a8 1a       	sub	r10, r24
    18dc:	b9 0a       	sbc	r11, r25

  sum_c0 = (adcmv[0] + adcmv[1] + adcmv[2]);
    18de:	ea 0c       	add	r14, r10
    18e0:	fb 1c       	adc	r15, r11
  u680 = ((ADCconfig.U_AVCC * 3) - sum_rm - sum_c0);	//three times the voltage at the 680 Ohm
    18e2:	80 91 3d 01 	lds	r24, 0x013D
    18e6:	90 91 3e 01 	lds	r25, 0x013E
    18ea:	5c 01       	movw	r10, r24
    18ec:	aa 0c       	add	r10, r10
    18ee:	bb 1c       	adc	r11, r11
    18f0:	a8 0e       	add	r10, r24
    18f2:	b9 1e       	adc	r11, r25
    18f4:	a0 1a       	sub	r10, r16
    18f6:	b1 0a       	sbc	r11, r17
    18f8:	ae 18       	sub	r10, r14
    18fa:	bf 08       	sbc	r11, r15
  pin_rm = (unsigned long)((unsigned long)sum_rm * (unsigned long)R_L_VAL) / (unsigned long)u680;
    18fc:	cc 24       	eor	r12, r12
    18fe:	dd 24       	eor	r13, r13
    1900:	b8 01       	movw	r22, r16
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	20 e9       	ldi	r18, 0x90	; 144
    1908:	3a e1       	ldi	r19, 0x1A	; 26
    190a:	40 e0       	ldi	r20, 0x00	; 0
    190c:	50 e0       	ldi	r21, 0x00	; 0
    190e:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
    1912:	a6 01       	movw	r20, r12
    1914:	95 01       	movw	r18, r10
    1916:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
    191a:	49 01       	movw	r8, r18
  adcmv[2] = pin_rm;	// for last output in row 2
    191c:	3e 83       	std	Y+6, r19	; 0x06
    191e:	2d 83       	std	Y+5, r18	; 0x05
  pin_rp = (unsigned long)((unsigned long)sum_c0 * (unsigned long)R_L_VAL) / (unsigned long)u680;
    1920:	b7 01       	movw	r22, r14
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	20 e9       	ldi	r18, 0x90	; 144
    1928:	3a e1       	ldi	r19, 0x1A	; 26
    192a:	40 e0       	ldi	r20, 0x00	; 0
    192c:	50 e0       	ldi	r21, 0x00	; 0
    192e:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
    1932:	a6 01       	movw	r20, r12
    1934:	95 01       	movw	r18, r10
    1936:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
    193a:	79 01       	movw	r14, r18
  lcd_clear();
    193c:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
  lcd_fix_string(RIHI);	// "RiHi="
    1940:	8e ef       	ldi	r24, 0xFE	; 254
    1942:	91 e0       	ldi	r25, 0x01	; 1
    1944:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
  DisplayValue(pin_rp,-1,LCD_CHAR_OMEGA,3);
    1948:	b7 01       	movw	r22, r14
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	4f ef       	ldi	r20, 0xFF	; 255
    1950:	24 ef       	ldi	r18, 0xF4	; 244
    1952:	03 e0       	ldi	r16, 0x03	; 3
    1954:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
  lcd_line2();
    1958:	80 ec       	ldi	r24, 0xC0	; 192
    195a:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_string(RILO);	// "RiLo="
    195e:	85 e0       	ldi	r24, 0x05	; 5
    1960:	92 e0       	ldi	r25, 0x02	; 2
    1962:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
  DisplayValue(pin_rm,-1,LCD_CHAR_OMEGA,3);
    1966:	b4 01       	movw	r22, r8
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	4f ef       	ldi	r20, 0xFF	; 255
    196e:	24 ef       	ldi	r18, 0xF4	; 244
    1970:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
  wait2s();			//wait 2 seconds
    1974:	0e 94 58 14 	call	0x28b0	; 0x28b0 <wait2s>
#ifdef AUTO_CAL
  if ((pin_rp < 280) && (pin_rm < 250)) {
    1978:	f8 e1       	ldi	r31, 0x18	; 24
    197a:	ef 16       	cp	r14, r31
    197c:	f1 e0       	ldi	r31, 0x01	; 1
    197e:	ff 06       	cpc	r15, r31
    1980:	90 f4       	brcc	.+36     	; 0x19a6 <AutoCheck+0x59a>
    1982:	2a ef       	ldi	r18, 0xFA	; 250
    1984:	82 16       	cp	r8, r18
    1986:	91 04       	cpc	r9, r1
    1988:	70 f4       	brcc	.+28     	; 0x19a6 <AutoCheck+0x59a>
     // rp is below 28 Ohm and rm is below 25 Ohm
     (void) eeprom_write_word((uint16_t *)(&R680pl), pin_rp+R_L_VAL);  //hold VCC resistance value in EEprom
    198a:	b7 01       	movw	r22, r14
    198c:	60 57       	subi	r22, 0x70	; 112
    198e:	75 4e       	sbci	r23, 0xE5	; 229
    1990:	8a e5       	ldi	r24, 0x5A	; 90
    1992:	92 e0       	ldi	r25, 0x02	; 2
    1994:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__eewr_word_m328p>
     (void) eeprom_write_word((uint16_t *)(&R680mi), pin_rm+R_L_VAL);  //hold GND resistance value in EEprom
    1998:	b4 01       	movw	r22, r8
    199a:	60 57       	subi	r22, 0x70	; 112
    199c:	75 4e       	sbci	r23, 0xE5	; 229
    199e:	8c e5       	ldi	r24, 0x5C	; 92
    19a0:	92 e0       	ldi	r25, 0x02	; 2
    19a2:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__eewr_word_m328p>
  }
#endif

  //measure Zero offset for Capacity measurement
  adcmv[3] = 0;
    19a6:	18 86       	std	Y+8, r1	; 0x08
    19a8:	1f 82       	std	Y+7, r1	; 0x07
  PartFound = PART_NONE;
    19aa:	10 92 07 01 	sts	0x0107, r1
  ReadCapacity(TP3, TP1);
    19ae:	82 e0       	ldi	r24, 0x02	; 2
    19b0:	60 e0       	ldi	r22, 0x00	; 0
    19b2:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <ReadCapacity>
  adcmv[5] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:3
    19b6:	00 91 60 01 	lds	r16, 0x0160
    19ba:	10 91 61 01 	lds	r17, 0x0161
    19be:	1c 87       	std	Y+12, r17	; 0x0c
    19c0:	0b 87       	std	Y+11, r16	; 0x0b
  ReadCapacity(TP3, TP2);
    19c2:	82 e0       	ldi	r24, 0x02	; 2
    19c4:	61 e0       	ldi	r22, 0x01	; 1
    19c6:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <ReadCapacity>
  adcmv[6] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:3
    19ca:	e0 90 60 01 	lds	r14, 0x0160
    19ce:	f0 90 61 01 	lds	r15, 0x0161
    19d2:	fe 86       	std	Y+14, r15	; 0x0e
    19d4:	ed 86       	std	Y+13, r14	; 0x0d
  ReadCapacity(TP2, TP1);
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	60 e0       	ldi	r22, 0x00	; 0
    19da:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <ReadCapacity>
  adcmv[2] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:2
    19de:	c0 90 60 01 	lds	r12, 0x0160
    19e2:	d0 90 61 01 	lds	r13, 0x0161
    19e6:	de 82       	std	Y+6, r13	; 0x06
    19e8:	cd 82       	std	Y+5, r12	; 0x05
  ReadCapacity(TP1, TP3);
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	62 e0       	ldi	r22, 0x02	; 2
    19ee:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <ReadCapacity>
  adcmv[1] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:1
    19f2:	80 91 60 01 	lds	r24, 0x0160
    19f6:	90 91 61 01 	lds	r25, 0x0161
    19fa:	9c 83       	std	Y+4, r25	; 0x04
    19fc:	8b 83       	std	Y+3, r24	; 0x03
  ReadCapacity(TP2, TP3);
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	62 e0       	ldi	r22, 0x02	; 2
    1a02:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <ReadCapacity>
  adcmv[4] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:2
    1a06:	80 91 60 01 	lds	r24, 0x0160
    1a0a:	90 91 61 01 	lds	r25, 0x0161
    1a0e:	9a 87       	std	Y+10, r25	; 0x0a
    1a10:	89 87       	std	Y+9, r24	; 0x09
  ReadCapacity(TP1, TP2);
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	61 e0       	ldi	r22, 0x01	; 1
    1a16:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <ReadCapacity>
  adcmv[0] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:1
    1a1a:	80 91 60 01 	lds	r24, 0x0160
    1a1e:	90 91 61 01 	lds	r25, 0x0161
    1a22:	9a 83       	std	Y+2, r25	; 0x02
    1a24:	89 83       	std	Y+1, r24	; 0x01
  lcd_clear();
    1a26:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
  lcd_fix_string(C0_str);			//output "C0 "
    1a2a:	8c e0       	ldi	r24, 0x0C	; 12
    1a2c:	92 e0       	ldi	r25, 0x02	; 2
    1a2e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
    1a32:	b8 01       	movw	r22, r16
    1a34:	88 27       	eor	r24, r24
    1a36:	77 fd       	sbrc	r23, 7
    1a38:	80 95       	com	r24
    1a3a:	98 2f       	mov	r25, r24
    1a3c:	40 e0       	ldi	r20, 0x00	; 0
    1a3e:	20 e2       	ldi	r18, 0x20	; 32
    1a40:	03 e0       	ldi	r16, 0x03	; 3
    1a42:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
    1a46:	b7 01       	movw	r22, r14
    1a48:	88 27       	eor	r24, r24
    1a4a:	77 fd       	sbrc	r23, 7
    1a4c:	80 95       	com	r24
    1a4e:	98 2f       	mov	r25, r24
    1a50:	40 e0       	ldi	r20, 0x00	; 0
    1a52:	20 e2       	ldi	r18, 0x20	; 32
    1a54:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
    1a58:	b6 01       	movw	r22, r12
    1a5a:	88 27       	eor	r24, r24
    1a5c:	77 fd       	sbrc	r23, 7
    1a5e:	80 95       	com	r24
    1a60:	98 2f       	mov	r25, r24
    1a62:	44 ef       	ldi	r20, 0xF4	; 244
    1a64:	26 e4       	ldi	r18, 0x46	; 70
    1a66:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
    1a6a:	8e 01       	movw	r16, r28
    1a6c:	0f 5f       	subi	r16, 0xFF	; 255
    1a6e:	1f 4f       	sbci	r17, 0xFF	; 255
void AutoCheck(void) {
    1a70:	ce 01       	movw	r24, r28
    1a72:	0f 96       	adiw	r24, 0x0f	; 15
    1a74:	f8 01       	movw	r30, r16
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
#ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
    1a76:	21 91       	ld	r18, Z+
    1a78:	31 91       	ld	r19, Z+
    1a7a:	27 34       	cpi	r18, 0x47	; 71
    1a7c:	31 05       	cpc	r19, r1
    1a7e:	ec f4       	brge	.+58     	; 0x1aba <AutoCheck+0x6ae>
  lcd_fix_string(C0_str);			//output "C0 "
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
#ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
    1a80:	e8 17       	cp	r30, r24
    1a82:	f9 07       	cpc	r31, r25
    1a84:	c1 f7       	brne	.-16     	; 0x1a76 <AutoCheck+0x66a>
    1a86:	ee 24       	eor	r14, r14
    1a88:	ff 24       	eor	r15, r15
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
    1a8a:	f8 01       	movw	r30, r16
    1a8c:	60 81       	ld	r22, Z
    1a8e:	0e 5f       	subi	r16, 0xFE	; 254
    1a90:	1f 4f       	sbci	r17, 0xFF	; 255
    1a92:	6e 5e       	subi	r22, 0xEE	; 238
    1a94:	c7 01       	movw	r24, r14
    1a96:	88 59       	subi	r24, 0x98	; 152
    1a98:	9d 4f       	sbci	r25, 0xFD	; 253
    1a9a:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__eewr_byte_m328p>
    1a9e:	08 94       	sec
    1aa0:	e1 1c       	adc	r14, r1
    1aa2:	f1 1c       	adc	r15, r1
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
#ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
    1aa4:	f7 e0       	ldi	r31, 0x07	; 7
    1aa6:	ef 16       	cp	r14, r31
    1aa8:	f1 04       	cpc	r15, r1
    1aaa:	79 f7       	brne	.-34     	; 0x1a8a <AutoCheck+0x67e>
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
  }
  lcd_line2();
    1aac:	80 ec       	ldi	r24, 0xC0	; 192
    1aae:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_string(OK_str);		// output "OK"
    1ab2:	86 e6       	ldi	r24, 0x66	; 102
    1ab4:	91 e0       	ldi	r25, 0x01	; 1
    1ab6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
no_c0save:
#endif
 wait2s();		//wait 2 seconds
    1aba:	0e 94 58 14 	call	0x28b0	; 0x28b0 <wait2s>
    1abe:	10 e4       	ldi	r17, 0x40	; 64
    1ac0:	c1 2e       	mov	r12, r17
 
#ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
    1ac2:	10 e0       	ldi	r17, 0x00	; 0
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
    1ac4:	ba e0       	ldi	r27, 0x0A	; 10
    1ac6:	8b 2e       	mov	r8, r27
    1ac8:	91 2c       	mov	r9, r1
    1aca:	a1 2c       	mov	r10, r1
    1acc:	b1 2c       	mov	r11, r1
     lcd_data('3');
     lcd_fix_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1ace:	a8 e5       	ldi	r26, 0x58	; 88
    1ad0:	ea 2e       	mov	r14, r26
    1ad2:	a1 e0       	ldi	r26, 0x01	; 1
    1ad4:	fa 2e       	mov	r15, r26
 
#ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
     lcd_clear();
    1ad6:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
     lcd_data('1');
    1ada:	81 e3       	ldi	r24, 0x31	; 49
    1adc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
     lcd_fix_string(CapZeich);	// "-||-"
    1ae0:	88 e9       	ldi	r24, 0x98	; 152
    1ae2:	91 e0       	ldi	r25, 0x01	; 1
    1ae4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
     lcd_data('3');
    1ae8:	83 e3       	ldi	r24, 0x33	; 51
    1aea:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
     lcd_fix_string(MinCap_str); // " >100nF!"
    1aee:	86 e1       	ldi	r24, 0x16	; 22
    1af0:	92 e0       	ldi	r25, 0x02	; 2
    1af2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
     PartFound = PART_NONE;
    1af6:	10 92 07 01 	sts	0x0107, r1
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
    1afa:	82 e0       	ldi	r24, 0x02	; 2
    1afc:	60 e0       	ldi	r22, 0x00	; 0
    1afe:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <ReadCapacity>
    1b02:	20 91 58 01 	lds	r18, 0x0158
    1b06:	30 91 59 01 	lds	r19, 0x0159
    1b0a:	40 91 5a 01 	lds	r20, 0x015A
    1b0e:	50 91 5b 01 	lds	r21, 0x015B
    1b12:	00 91 68 01 	lds	r16, 0x0168
     while (cap.cpre < -9) {
    1b16:	07 c0       	rjmp	.+14     	; 0x1b26 <AutoCheck+0x71a>
        cap.cpre++;
        cap.cval /= 10;
    1b18:	ca 01       	movw	r24, r20
    1b1a:	b9 01       	movw	r22, r18
    1b1c:	a5 01       	movw	r20, r10
    1b1e:	94 01       	movw	r18, r8
    1b20:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
    1b24:	0f 5f       	subi	r16, 0xFF	; 255
     lcd_data('3');
     lcd_fix_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1b26:	07 3f       	cpi	r16, 0xF7	; 247
    1b28:	bc f3       	brlt	.-18     	; 0x1b18 <AutoCheck+0x70c>
    1b2a:	00 93 68 01 	sts	0x0168, r16
    1b2e:	20 93 58 01 	sts	0x0158, r18
    1b32:	f7 01       	movw	r30, r14
    1b34:	31 83       	std	Z+1, r19	; 0x01
    1b36:	42 83       	std	Z+2, r20	; 0x02
    1b38:	53 83       	std	Z+3, r21	; 0x03
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1b3a:	07 3f       	cpi	r16, 0xF7	; 247
    1b3c:	09 f0       	breq	.+2      	; 0x1b40 <AutoCheck+0x734>
    1b3e:	bc c0       	rjmp	.+376    	; 0x1cb8 <AutoCheck+0x8ac>
    1b40:	20 36       	cpi	r18, 0x60	; 96
    1b42:	31 05       	cpc	r19, r1
    1b44:	41 05       	cpc	r20, r1
    1b46:	51 05       	cpc	r21, r1
    1b48:	08 f4       	brcc	.+2      	; 0x1b4c <AutoCheck+0x740>
    1b4a:	b6 c0       	rjmp	.+364    	; 0x1cb8 <AutoCheck+0x8ac>
    1b4c:	20 3f       	cpi	r18, 0xF0	; 240
    1b4e:	f5 e5       	ldi	r31, 0x55	; 85
    1b50:	3f 07       	cpc	r19, r31
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	4f 07       	cpc	r20, r31
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	5f 07       	cpc	r21, r31
    1b5a:	08 f0       	brcs	.+2      	; 0x1b5e <AutoCheck+0x752>
    1b5c:	ad c0       	rjmp	.+346    	; 0x1cb8 <AutoCheck+0x8ac>
        cap_found++;
    1b5e:	1f 5f       	subi	r17, 0xFF	; 255
     } else {
        cap_found = 0;		// wait for stable connection
     }
     if (cap_found > 1) {
    1b60:	12 30       	cpi	r17, 0x02	; 2
    1b62:	09 f0       	breq	.+2      	; 0x1b66 <AutoCheck+0x75a>
    1b64:	aa c0       	rjmp	.+340    	; 0x1cba <AutoCheck+0x8ae>
        // value of capacitor is correct
        (void) eeprom_write_word((uint16_t *)(&ref_offset), load_diff);	// hold zero offset + slew rate dependend offset
    1b66:	60 91 6a 01 	lds	r22, 0x016A
    1b6a:	70 91 6b 01 	lds	r23, 0x016B
    1b6e:	86 e6       	ldi	r24, 0x66	; 102
    1b70:	92 e0       	ldi	r25, 0x02	; 2
    1b72:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__eewr_word_m328p>
        lcd_clear();
    1b76:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
        lcd_fix_string(REF_C_str);	// "REF_C="
    1b7a:	8e e1       	ldi	r24, 0x1E	; 30
    1b7c:	92 e0       	ldi	r25, 0x02	; 2
    1b7e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
        lcd_string(itoa(load_diff, outval, 10));	//output REF_C_KORR
    1b82:	80 91 6a 01 	lds	r24, 0x016A
    1b86:	90 91 6b 01 	lds	r25, 0x016B
    1b8a:	6c e0       	ldi	r22, 0x0C	; 12
    1b8c:	71 e0       	ldi	r23, 0x01	; 1
    1b8e:	4a e0       	ldi	r20, 0x0A	; 10
    1b90:	50 e0       	ldi	r21, 0x00	; 0
    1b92:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <itoa>
    1b96:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_string>
        eeprom_write_byte((uint8_t *)(&EE_ESR_ZERO), (uint8_t)ESR_ZERO); // set to initial zero offset
    1b9a:	8f e6       	ldi	r24, 0x6F	; 111
    1b9c:	92 e0       	ldi	r25, 0x02	; 2
    1b9e:	6d e1       	ldi	r22, 0x1D	; 29
    1ba0:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__eewr_byte_m328p>
        wait1s();
        }
//#######################################
#endif
 #ifdef AUTOSCALE_ADC
        ADC_PORT =  TXD_VAL;	//ADC-Port 1 to GND
    1ba4:	88 e0       	ldi	r24, 0x08	; 8
    1ba6:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    1ba8:	89 e0       	ldi	r24, 0x09	; 9
    1baa:	87 b9       	out	0x07, r24	; 7
        R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1bac:	80 e2       	ldi	r24, 0x20	; 32
    1bae:	84 b9       	out	0x04, r24	; 4
        do {
           adcmv[0] = ReadADC(TP3);
    1bb0:	82 e0       	ldi	r24, 0x02	; 2
    1bb2:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
        } while (adcmv[0] > 980);
    1bb6:	23 e0       	ldi	r18, 0x03	; 3
    1bb8:	85 3d       	cpi	r24, 0xD5	; 213
    1bba:	92 07       	cpc	r25, r18
    1bbc:	cc f7       	brge	.-14     	; 0x1bb0 <AutoCheck+0x7a4>
        R_DDR = 0;		//all Pins to input 
    1bbe:	14 b8       	out	0x04, r1	; 4
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1bc0:	10 92 3c 01 	sts	0x013C, r1
    1bc4:	10 92 3b 01 	sts	0x013B, r1
        adcmv[0] = ReadADC(TP3);  // get cap voltage with VCC reference
    1bc8:	82 e0       	ldi	r24, 0x02	; 2
    1bca:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
    1bce:	4c 01       	movw	r8, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1bd0:	8e e5       	ldi	r24, 0x5E	; 94
    1bd2:	92 e0       	ldi	r25, 0x02	; 2
    1bd4:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__eerd_byte_m328p>
    1bd8:	99 27       	eor	r25, r25
    1bda:	87 fd       	sbrc	r24, 7
    1bdc:	90 95       	com	r25
    1bde:	20 91 3f 01 	lds	r18, 0x013F
    1be2:	30 91 40 01 	lds	r19, 0x0140
    1be6:	82 0f       	add	r24, r18
    1be8:	93 1f       	adc	r25, r19
    1bea:	90 93 3c 01 	sts	0x013C, r25
    1bee:	80 93 3b 01 	sts	0x013B, r24
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
    1bf2:	82 e0       	ldi	r24, 0x02	; 2
    1bf4:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
    1bf8:	8c 01       	movw	r16, r24
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1bfa:	10 92 3c 01 	sts	0x013C, r1
    1bfe:	10 92 3b 01 	sts	0x013B, r1
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
    1c02:	82 e0       	ldi	r24, 0x02	; 2
    1c04:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
    1c08:	5c 01       	movw	r10, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1c0a:	c0 90 3f 01 	lds	r12, 0x013F
    1c0e:	d0 90 40 01 	lds	r13, 0x0140
    1c12:	8e e5       	ldi	r24, 0x5E	; 94
    1c14:	92 e0       	ldi	r25, 0x02	; 2
    1c16:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__eerd_byte_m328p>
    1c1a:	99 27       	eor	r25, r25
    1c1c:	87 fd       	sbrc	r24, 7
    1c1e:	90 95       	com	r25
    1c20:	8c 0d       	add	r24, r12
    1c22:	9d 1d       	adc	r25, r13
    1c24:	90 93 3c 01 	sts	0x013C, r25
    1c28:	80 93 3b 01 	sts	0x013B, r24
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1c2c:	8e e5       	ldi	r24, 0x5E	; 94
    1c2e:	92 e0       	ldi	r25, 0x02	; 2
    1c30:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__eerd_byte_m328p>
    1c34:	68 2e       	mov	r6, r24
        lcd_line2();
    1c36:	80 ec       	ldi	r24, 0xC0	; 192
    1c38:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
        lcd_fix_string(REF_R_str);	// "REF_R="
    1c3c:	85 e2       	ldi	r24, 0x25	; 37
    1c3e:	92 e0       	ldi	r25, 0x02	; 2
    1c40:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1c44:	8e e5       	ldi	r24, 0x5E	; 94
    1c46:	92 e0       	ldi	r25, 0x02	; 2
    1c48:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__eerd_byte_m328p>
        ADCconfig.U_Bandgap = ADC_internal_reference;
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
        ADCconfig.U_Bandgap = ADC_internal_reference;
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1c4c:	f3 e0       	ldi	r31, 0x03	; 3
    1c4e:	ef 2e       	mov	r14, r31
    1c50:	e8 0e       	add	r14, r24
    1c52:	a8 0c       	add	r10, r8
    1c54:	b9 1c       	adc	r11, r9
    1c56:	a0 1a       	sub	r10, r16
    1c58:	b1 0a       	sbc	r11, r17
    1c5a:	a0 1a       	sub	r10, r16
    1c5c:	b1 0a       	sbc	r11, r17
    1c5e:	b5 01       	movw	r22, r10
    1c60:	88 27       	eor	r24, r24
    1c62:	77 fd       	sbrc	r23, 7
    1c64:	80 95       	com	r24
    1c66:	98 2f       	mov	r25, r24
    1c68:	26 2d       	mov	r18, r6
    1c6a:	33 27       	eor	r19, r19
    1c6c:	27 fd       	sbrc	r18, 7
    1c6e:	30 95       	com	r19
    1c70:	2c 0d       	add	r18, r12
    1c72:	3d 1d       	adc	r19, r13
    1c74:	40 e0       	ldi	r20, 0x00	; 0
    1c76:	50 e0       	ldi	r21, 0x00	; 0
    1c78:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
    1c7c:	00 0f       	add	r16, r16
    1c7e:	11 1f       	adc	r17, r17
    1c80:	98 01       	movw	r18, r16
    1c82:	44 27       	eor	r20, r20
    1c84:	37 fd       	sbrc	r19, 7
    1c86:	40 95       	com	r20
    1c88:	54 2f       	mov	r21, r20
    1c8a:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <__divmodsi4>
        lcd_line2();
        lcd_fix_string(REF_R_str);	// "REF_R="
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1c8e:	e2 0e       	add	r14, r18
        (void) eeprom_write_byte((uint8_t *)(&RefDiff), (uint8_t)udiff2);	// hold offset for true reference Voltage
    1c90:	8e e5       	ldi	r24, 0x5E	; 94
    1c92:	92 e0       	ldi	r25, 0x02	; 2
    1c94:	6e 2d       	mov	r22, r14
    1c96:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__eewr_byte_m328p>
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
    1c9a:	8e 2d       	mov	r24, r14
    1c9c:	99 27       	eor	r25, r25
    1c9e:	87 fd       	sbrc	r24, 7
    1ca0:	90 95       	com	r25
    1ca2:	6c e0       	ldi	r22, 0x0C	; 12
    1ca4:	71 e0       	ldi	r23, 0x01	; 1
    1ca6:	4a e0       	ldi	r20, 0x0A	; 10
    1ca8:	50 e0       	ldi	r21, 0x00	; 0
    1caa:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <itoa>
    1cae:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_string>
 #endif
        wait4s();
    1cb2:	0e 94 56 14 	call	0x28ac	; 0x28ac <wait4s>
        break;
    1cb6:	17 c0       	rjmp	.+46     	; 0x1ce6 <AutoCheck+0x8da>
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1cb8:	10 e0       	ldi	r17, 0x00	; 0
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
 #endif
        wait4s();
        break;
     }
     lcd_line2();
    1cba:	80 ec       	ldi	r24, 0xC0	; 192
    1cbc:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
     DisplayValue(cap.cval,cap.cpre,'F',4);
    1cc0:	60 91 58 01 	lds	r22, 0x0158
    1cc4:	70 91 59 01 	lds	r23, 0x0159
    1cc8:	80 91 5a 01 	lds	r24, 0x015A
    1ccc:	90 91 5b 01 	lds	r25, 0x015B
    1cd0:	40 91 68 01 	lds	r20, 0x0168
    1cd4:	26 e4       	ldi	r18, 0x46	; 70
    1cd6:	04 e0       	ldi	r16, 0x04	; 4
    1cd8:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
     wait200ms();			// wait additional time
    1cdc:	0e 94 5d 14 	call	0x28ba	; 0x28ba <wait200ms>
    1ce0:	ca 94       	dec	r12
 wait2s();		//wait 2 seconds
 
#ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
    1ce2:	09 f0       	breq	.+2      	; 0x1ce6 <AutoCheck+0x8da>
    1ce4:	f8 ce       	rjmp	.-528    	; 0x1ad6 <AutoCheck+0x6ca>
     wait200ms();			// wait additional time
  }

#endif

  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    1ce6:	89 e1       	ldi	r24, 0x19	; 25
    1ce8:	80 93 39 01 	sts	0x0139, r24
  lcd_clear();
    1cec:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
  lcd_line2();
    1cf0:	80 ec       	ldi	r24, 0xC0	; 192
    1cf2:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_string(VERSION_str);	//"Version ..."
    1cf6:	82 ec       	ldi	r24, 0xC2	; 194
    1cf8:	91 e0       	ldi	r25, 0x01	; 1
    1cfa:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
  lcd_line1();
    1cfe:	80 e8       	ldi	r24, 0x80	; 128
    1d00:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_string(ATE);		//"Selftest End"
    1d04:	87 e5       	ldi	r24, 0x57	; 87
    1d06:	91 e0       	ldi	r25, 0x01	; 1
    1d08:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
#ifdef FREQUENCY_50HZ
  lcd_fix2_string(T50HZ);	//" 50Hz"
    1d0c:	80 e1       	ldi	r24, 0x10	; 16
    1d0e:	92 e0       	ldi	r25, 0x02	; 2
    1d10:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
  ADC_PORT = TXD_VAL;
    1d14:	88 e0       	ldi	r24, 0x08	; 8
    1d16:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	// Pin 1 to GND
    1d18:	89 e0       	ldi	r24, 0x09	; 9
    1d1a:	87 b9       	out	0x07, r24	; 7
  R_DDR = (1<<(TP3*2)) | (1<<(TP2*2));
    1d1c:	84 e1       	ldi	r24, 0x14	; 20
    1d1e:	84 b9       	out	0x04, r24	; 4
  for(ww=0;ww<30;ww++) {	// repeat the signal up to 30 times (1 minute)
    1d20:	10 e0       	ldi	r17, 0x00	; 0
     for (ii=0;ii<100;ii++) {	// for 2 s generate 50 Hz
         R_PORT = (1<<(TP2*2));	// Pin 2 over R_L to VCC, Pin 3 over R_L to GND
    1d22:	64 e0       	ldi	r22, 0x04	; 4
    1d24:	e6 2e       	mov	r14, r22
         wait10ms();
         R_PORT = (1<<(TP3*2));	// Pin 3 over R_L to VCC, Pin 2 over R_L to GND
    1d26:	00 e1       	ldi	r16, 0x10	; 16
  lcd_fix2_string(T50HZ);	//" 50Hz"
  ADC_PORT = TXD_VAL;
  ADC_DDR = 1<<TP1 | TXD_MSK;	// Pin 1 to GND
  R_DDR = (1<<(TP3*2)) | (1<<(TP2*2));
  for(ww=0;ww<30;ww++) {	// repeat the signal up to 30 times (1 minute)
     for (ii=0;ii<100;ii++) {	// for 2 s generate 50 Hz
    1d28:	10 92 44 01 	sts	0x0144, r1
    1d2c:	0c c0       	rjmp	.+24     	; 0x1d46 <AutoCheck+0x93a>
         R_PORT = (1<<(TP2*2));	// Pin 2 over R_L to VCC, Pin 3 over R_L to GND
    1d2e:	e5 b8       	out	0x05, r14	; 5
         wait10ms();
    1d30:	0e 94 64 14 	call	0x28c8	; 0x28c8 <wait10ms>
         R_PORT = (1<<(TP3*2));	// Pin 3 over R_L to VCC, Pin 2 over R_L to GND
    1d34:	05 b9       	out	0x05, r16	; 5
         wait10ms();
    1d36:	0e 94 64 14 	call	0x28c8	; 0x28c8 <wait10ms>
         wdt_reset();
    1d3a:	a8 95       	wdr
  lcd_fix2_string(T50HZ);	//" 50Hz"
  ADC_PORT = TXD_VAL;
  ADC_DDR = 1<<TP1 | TXD_MSK;	// Pin 1 to GND
  R_DDR = (1<<(TP3*2)) | (1<<(TP2*2));
  for(ww=0;ww<30;ww++) {	// repeat the signal up to 30 times (1 minute)
     for (ii=0;ii<100;ii++) {	// for 2 s generate 50 Hz
    1d3c:	80 91 44 01 	lds	r24, 0x0144
    1d40:	8f 5f       	subi	r24, 0xFF	; 255
    1d42:	80 93 44 01 	sts	0x0144, r24
    1d46:	80 91 44 01 	lds	r24, 0x0144
    1d4a:	84 36       	cpi	r24, 0x64	; 100
    1d4c:	80 f3       	brcs	.-32     	; 0x1d2e <AutoCheck+0x922>
         wait10ms();
         R_PORT = (1<<(TP3*2));	// Pin 3 over R_L to VCC, Pin 2 over R_L to GND
         wait10ms();
         wdt_reset();
     }
     if (!(ON_PIN_REG & (1<<RST_PIN))) {
    1d4e:	4f 9b       	sbis	0x09, 7	; 9
    1d50:	03 c0       	rjmp	.+6      	; 0x1d58 <AutoCheck+0x94c>
#ifdef FREQUENCY_50HZ
  lcd_fix2_string(T50HZ);	//" 50Hz"
  ADC_PORT = TXD_VAL;
  ADC_DDR = 1<<TP1 | TXD_MSK;	// Pin 1 to GND
  R_DDR = (1<<(TP3*2)) | (1<<(TP2*2));
  for(ww=0;ww<30;ww++) {	// repeat the signal up to 30 times (1 minute)
    1d52:	1f 5f       	subi	r17, 0xFF	; 255
    1d54:	1e 31       	cpi	r17, 0x1E	; 30
    1d56:	41 f7       	brne	.-48     	; 0x1d28 <AutoCheck+0x91c>
        // if key is pressed, don't repeat
        break;
     }
  }
#endif
 PartFound = PART_NONE;
    1d58:	10 92 07 01 	sts	0x0107, r1
 wait1s();			//wait 1 seconds
    1d5c:	0e 94 59 14 	call	0x28b2	; 0x28b2 <wait1000ms>
 } 
    1d60:	2e 96       	adiw	r28, 0x0e	; 14
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	f8 94       	cli
    1d66:	de bf       	out	0x3e, r29	; 62
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	cd bf       	out	0x3d, r28	; 61
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	1f 91       	pop	r17
    1d72:	0f 91       	pop	r16
    1d74:	ff 90       	pop	r15
    1d76:	ef 90       	pop	r14
    1d78:	df 90       	pop	r13
    1d7a:	cf 90       	pop	r12
    1d7c:	bf 90       	pop	r11
    1d7e:	af 90       	pop	r10
    1d80:	9f 90       	pop	r9
    1d82:	8f 90       	pop	r8
    1d84:	7f 90       	pop	r7
    1d86:	6f 90       	pop	r6
    1d88:	5f 90       	pop	r5
    1d8a:	4f 90       	pop	r4
    1d8c:	3f 90       	pop	r3
    1d8e:	2f 90       	pop	r2
    1d90:	08 95       	ret

00001d92 <main>:

#define MAIN_C
#include "Transistortester.h"

//begin of transistortester program
int main(void) {
    1d92:	0f 93       	push	r16
    1d94:	1f 93       	push	r17
    1d96:	cf 93       	push	r28
    1d98:	df 93       	push	r29
  //switch on
#ifndef EXTREF2PD6
  // Switch on directly only without the PC4-PD6 connection.
  // With this connection the PD6 (AIN0) is connected to the external 2.5V reference voltage
  // and should never be switched to VCC directly.
  ON_DDR = (1<<ON_PIN);
    1d9a:	10 e4       	ldi	r17, 0x40	; 64
    1d9c:	1a b9       	out	0x0a, r17	; 10
#endif
#ifdef PULLUP_DISABLE
  ON_PORT = (1<<ON_PIN); 		// switch power on 
    1d9e:	1b b9       	out	0x0b, r17	; 11
#else
  ON_PORT = (1<<ON_PIN)|(1<<RST_PIN); 	// switch power on , enable internal Pullup for Start-Pin
#endif
  uint8_t tmp;
  //ADC-Init
  ADCSRA = (1<<ADEN) | AUTO_CLOCK_DIV;	//prescaler=8 or 64 (if 8Mhz clock)
    1da0:	86 e8       	ldi	r24, 0x86	; 134
    1da2:	80 93 7a 00 	sts	0x007A, r24
// #define WDRF_HOME MCU_STATUS_REG
 #define WDRF_HOME MCUCSR
#else
 #define WDRF_HOME MCUSR
#endif
  tmp = (WDRF_HOME & (1<<WDRF));	// save Watch Dog Flag
    1da6:	04 b7       	in	r16, 0x34	; 52
  WDRF_HOME &= ~(1<<WDRF);	 	//reset Watch Dog flag
    1da8:	84 b7       	in	r24, 0x34	; 52
    1daa:	87 7f       	andi	r24, 0xF7	; 247
    1dac:	84 bf       	out	0x34, r24	; 52
  wdt_disable();			// disable Watch Dog
    1dae:	88 e1       	ldi	r24, 0x18	; 24
    1db0:	0f b6       	in	r0, 0x3f	; 63
    1db2:	f8 94       	cli
    1db4:	80 93 60 00 	sts	0x0060, r24
    1db8:	10 92 60 00 	sts	0x0060, r1
    1dbc:	0f be       	out	0x3f, r0	; 63
  lcd_init();				//initialize LCD
    1dbe:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_init>
	
//  ADC_PORT = TXD_VAL;
//  ADC_DDR = TXD_MSK;
  if(tmp) { 
    1dc2:	03 ff       	sbrs	r16, 3
    1dc4:	0c c0       	rjmp	.+24     	; 0x1dde <main+0x4c>
     // check if  Watchdog-Event 
     // this happens, if the Watchdog is not reset for 2s
     // can happen, if any loop in the Program doen't finish.
     lcd_line1();
    1dc6:	80 e8       	ldi	r24, 0x80	; 128
    1dc8:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
     lcd_fix_string(TestTimedOut);	//Output Timeout
    1dcc:	8f e2       	ldi	r24, 0x2F	; 47
    1dce:	91 e0       	ldi	r25, 0x01	; 1
    1dd0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
     wait3s();				//wait for 3 s
    1dd4:	0e 94 57 14 	call	0x28ae	; 0x28ae <wait3s>
     ON_PORT = 0;			//shut off!
    1dd8:	1b b8       	out	0x0b, r1	; 11
     ON_DDR = (1<<ON_PIN);		//switch to GND
    1dda:	1a b9       	out	0x0a, r17	; 10
     return 0;
    1ddc:	3f c5       	rjmp	.+2686   	; 0x285c <main+0xaca>
  }
  LCDLoadCustomChar(LCD_CHAR_DIODE1);	//Custom-Character Diode symbol
    1dde:	88 e4       	ldi	r24, 0x48	; 72
    1de0:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_customchar(DiodeIcon1);	//load Character  >|
    1de4:	8c e2       	ldi	r24, 0x2C	; 44
    1de6:	92 e0       	ldi	r25, 0x02	; 2
    1de8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_DIODE2);	//Custom-Character 
    1dec:	80 e5       	ldi	r24, 0x50	; 80
    1dee:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_customchar(DiodeIcon2);	//load Character  |<
    1df2:	84 e3       	ldi	r24, 0x34	; 52
    1df4:	92 e0       	ldi	r25, 0x02	; 2
    1df6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_CAP);	//Custom-Character  Capacitor symbol
    1dfa:	88 e5       	ldi	r24, 0x58	; 88
    1dfc:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_customchar(CapIcon);		//load Character  ||
    1e00:	8c e3       	ldi	r24, 0x3C	; 60
    1e02:	92 e0       	ldi	r25, 0x02	; 2
    1e04:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS1);	//Custom-Character Resistor symbol
    1e08:	88 e7       	ldi	r24, 0x78	; 120
    1e0a:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_customchar(ResIcon1);		//load Character  [
    1e0e:	84 e4       	ldi	r24, 0x44	; 68
    1e10:	92 e0       	ldi	r25, 0x02	; 2
    1e12:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS2);	//Custom-Character 
    1e16:	80 e7       	ldi	r24, 0x70	; 112
    1e18:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_customchar(ResIcon2);		//load Character  ]
    1e1c:	8c e4       	ldi	r24, 0x4C	; 76
    1e1e:	92 e0       	ldi	r25, 0x02	; 2
    1e20:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_fix_customchar>
#endif
#ifdef PULLUP_DISABLE
 #ifdef __AVR_ATmega8__
  SFIOR = (1<<PUD);		// disable Pull-Up Resistors mega8
 #else
  MCUCR = (1<<PUD);		// disable Pull-Up Resistors mega168 family
    1e24:	80 e1       	ldi	r24, 0x10	; 16
    1e26:	85 bf       	out	0x35, r24	; 53
  }
#else
  #define display_time OFF_WAIT_TIME
#endif

  empty_count = 0;
    1e28:	10 92 43 01 	sts	0x0143, r1
  mess_count = 0;
    1e2c:	10 92 0b 01 	sts	0x010B, r1


//*****************************************************************
//Entry: if start key is pressed before shut down
start:
  PartFound = PART_NONE;
    1e30:	10 92 07 01 	sts	0x0107, r1
  NumOfDiodes = 0;
    1e34:	10 92 05 01 	sts	0x0105, r1
  PartReady = 0;
    1e38:	10 92 04 01 	sts	0x0104, r1
  PartMode = 0;
    1e3c:	10 92 06 01 	sts	0x0106, r1
  WithReference = 0;		// no precision reference voltage
    1e40:	10 92 42 01 	sts	0x0142, r1
  lcd_clear();
    1e44:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
  ADC_DDR = TXD_MSK;		//activate Software-UART 
    1e48:	18 e0       	ldi	r17, 0x08	; 8
    1e4a:	17 b9       	out	0x07, r17	; 7
#ifdef AUTO_CAL
  resis680pl = eeprom_read_word(&R680pl);
    1e4c:	8a e5       	ldi	r24, 0x5A	; 90
    1e4e:	92 e0       	ldi	r25, 0x02	; 2
    1e50:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <__eerd_word_m328p>
    1e54:	90 93 09 01 	sts	0x0109, r25
    1e58:	80 93 08 01 	sts	0x0108, r24
  resis680mi = eeprom_read_word(&R680mi);
    1e5c:	8c e5       	ldi	r24, 0x5C	; 92
    1e5e:	92 e0       	ldi	r25, 0x02	; 2
    1e60:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <__eerd_word_m328p>
    1e64:	90 93 03 01 	sts	0x0103, r25
    1e68:	80 93 02 01 	sts	0x0102, r24
#endif

  ResistorsFound = 0;
    1e6c:	10 92 55 01 	sts	0x0155, r1
  cap.ca = 0;
    1e70:	10 92 66 01 	sts	0x0166, r1
  cap.cb = 0;
    1e74:	10 92 67 01 	sts	0x0167, r1
#ifdef WITH_UART
  uart_newline();		// start of new measurement
    1e78:	0e 94 8c 00 	call	0x118	; 0x118 <uart_newline>
#endif
  ADCconfig.RefFlag = 0;
    1e7c:	10 92 3a 01 	sts	0x013A, r1
  ADCconfig.U_AVCC = U_VCC;	// set initial VCC Voltage
    1e80:	88 e8       	ldi	r24, 0x88	; 136
    1e82:	93 e1       	ldi	r25, 0x13	; 19
    1e84:	90 93 3e 01 	sts	0x013E, r25
    1e88:	80 93 3d 01 	sts	0x013D, r24
  ADCconfig.Samples = 190;		// set number of ADC samples near to max
    1e8c:	8e eb       	ldi	r24, 0xBE	; 190
    1e8e:	80 93 39 01 	sts	0x0139, r24
  ADC_PORT = TXD_VAL;
    1e92:	18 b9       	out	0x08, r17	; 8
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND
    1e94:	88 e1       	ldi	r24, 0x18	; 24
    1e96:	87 b9       	out	0x07, r24	; 7
  wait1ms();
    1e98:	0e 94 69 14 	call	0x28d2	; 0x28d2 <wait1ms>
  ADC_DDR =  TXD_MSK; 	// switch pin with reference back to input
    1e9c:	17 b9       	out	0x07, r17	; 7
#if FLASHEND > 0x1fff
  trans.uBE[1] = W5msReadADC(TPREF); // read voltage of precision reference
    1e9e:	84 e0       	ldi	r24, 0x04	; 4
    1ea0:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
    1ea4:	ec 01       	movw	r28, r24
    1ea6:	90 93 51 01 	sts	0x0151, r25
    1eaa:	80 93 50 01 	sts	0x0150, r24
  if ((trans.uBE[1] > 2250) && (trans.uBE[1] < 2750)) {
    1eae:	8b 5c       	subi	r24, 0xCB	; 203
    1eb0:	98 40       	sbci	r25, 0x08	; 8
    1eb2:	21 e0       	ldi	r18, 0x01	; 1
    1eb4:	83 3f       	cpi	r24, 0xF3	; 243
    1eb6:	92 07       	cpc	r25, r18
    1eb8:	c0 f4       	brcc	.+48     	; 0x1eea <main+0x158>
     // precision voltage reference connected, update U_AVCC
     WithReference = 1;
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	80 93 42 01 	sts	0x0142, r24
     ADCconfig.U_AVCC = (unsigned long)((unsigned long)ADCconfig.U_AVCC * 2495) / trans.uBE[1];
    1ec0:	60 91 3d 01 	lds	r22, 0x013D
    1ec4:	70 91 3e 01 	lds	r23, 0x013E
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	2f eb       	ldi	r18, 0xBF	; 191
    1ece:	39 e0       	ldi	r19, 0x09	; 9
    1ed0:	40 e0       	ldi	r20, 0x00	; 0
    1ed2:	50 e0       	ldi	r21, 0x00	; 0
    1ed4:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
    1ed8:	9e 01       	movw	r18, r28
    1eda:	40 e0       	ldi	r20, 0x00	; 0
    1edc:	50 e0       	ldi	r21, 0x00	; 0
    1ede:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
    1ee2:	30 93 3e 01 	sts	0x013E, r19
    1ee6:	20 93 3d 01 	sts	0x013D, r18
  }
#endif
  lcd_line1();	//1. row 
    1eea:	80 e8       	ldi	r24, 0x80	; 128
    1eec:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  
#ifdef WITH_AUTO_REF
  (void) ReadADC(0x0e);		// read Reference-voltage 
    1ef0:	8e e0       	ldi	r24, 0x0E	; 14
    1ef2:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
  ref_mv = W20msReadADC(0x0e);	// read Reference-voltage
    1ef6:	8e e0       	ldi	r24, 0x0E	; 14
    1ef8:	0e 94 1b 1a 	call	0x3436	; 0x3436 <W20msReadADC>
    1efc:	ec 01       	movw	r28, r24
    1efe:	90 93 40 01 	sts	0x0140, r25
    1f02:	80 93 3f 01 	sts	0x013F, r24
#else
  ref_mv = DEFAULT_BAND_GAP;	// set to default Reference Voltage
#endif
  ADCconfig.U_Bandgap = ADC_internal_reference;	// set internal reference voltage for ADC
    1f06:	8e e5       	ldi	r24, 0x5E	; 94
    1f08:	92 e0       	ldi	r25, 0x02	; 2
    1f0a:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__eerd_byte_m328p>
    1f0e:	99 27       	eor	r25, r25
    1f10:	87 fd       	sbrc	r24, 7
    1f12:	90 95       	com	r25
    1f14:	8c 0f       	add	r24, r28
    1f16:	9d 1f       	adc	r25, r29
    1f18:	90 93 3c 01 	sts	0x013C, r25
    1f1c:	80 93 3b 01 	sts	0x013B, r24
  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    1f20:	89 e1       	ldi	r24, 0x19	; 25
    1f22:	80 93 39 01 	sts	0x0139, r24

#ifdef BAT_CHECK
  // Battery check is selected
  ReadADC(TPBAT);	//Dummy-Readout
    1f26:	85 e0       	ldi	r24, 0x05	; 5
    1f28:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
  trans.uBE[0] = W5msReadADC(TPBAT); 	//with 5V reference
    1f2c:	85 e0       	ldi	r24, 0x05	; 5
    1f2e:	0e 94 1f 1a 	call	0x343e	; 0x343e <W5msReadADC>
    1f32:	90 93 4f 01 	sts	0x014F, r25
    1f36:	80 93 4e 01 	sts	0x014E, r24
  lcd_fix_string(Bat_str);		//output: "Bat. "
    1f3a:	80 e6       	ldi	r24, 0x60	; 96
    1f3c:	91 e0       	ldi	r25, 0x01	; 1
    1f3e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
 #ifdef BAT_OUT
  // display Battery voltage
  // The divisor to get the voltage in 0.01V units is ((10*33)/133) witch is about 2.4812
  // A good result can be get with multiply by 4 and divide by 10 (about 0.75%).
  cap.cval = (trans.uBE[0]*4)/10+((BAT_OUT+5)/10); // usually output only 2 digits
    1f42:	80 91 4e 01 	lds	r24, 0x014E
    1f46:	90 91 4f 01 	lds	r25, 0x014F
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	88 0f       	add	r24, r24
    1f50:	99 1f       	adc	r25, r25
    1f52:	6a e0       	ldi	r22, 0x0A	; 10
    1f54:	70 e0       	ldi	r23, 0x00	; 0
    1f56:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__udivmodhi4>
    1f5a:	61 5f       	subi	r22, 0xF1	; 241
    1f5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	60 93 58 01 	sts	0x0158, r22
    1f66:	70 93 59 01 	sts	0x0159, r23
    1f6a:	80 93 5a 01 	sts	0x015A, r24
    1f6e:	90 93 5b 01 	sts	0x015B, r25
  DisplayValue(cap.cval,-2,'V',2);		// Display 2 Digits of this 10mV units
    1f72:	4e ef       	ldi	r20, 0xFE	; 254
    1f74:	26 e5       	ldi	r18, 0x56	; 86
    1f76:	02 e0       	ldi	r16, 0x02	; 2
    1f78:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
  lcd_space();
    1f7c:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>
 #warning "Battery POOR level is set for stepup regulator"
 #define WARN_LEVEL (((unsigned long)(BAT_POOR*100+500)*(unsigned long)33)/133)
 #endif
 #define POOR_LEVEL (((unsigned long)(BAT_POOR*100)*(unsigned long)33)/133)
  // check the battery voltage
  if (trans.uBE[0] <  WARN_LEVEL) {
    1f80:	80 91 4e 01 	lds	r24, 0x014E
    1f84:	90 91 4f 01 	lds	r25, 0x014F
    1f88:	27 e0       	ldi	r18, 0x07	; 7
    1f8a:	8c 32       	cpi	r24, 0x2C	; 44
    1f8c:	92 07       	cpc	r25, r18
    1f8e:	78 f4       	brcc	.+30     	; 0x1fae <main+0x21c>
     //Vcc < 7,3V; show Warning 
     if(trans.uBE[0] < POOR_LEVEL) {	
    1f90:	26 e0       	ldi	r18, 0x06	; 6
    1f92:	83 33       	cpi	r24, 0x33	; 51
    1f94:	92 07       	cpc	r25, r18
    1f96:	40 f4       	brcc	.+16     	; 0x1fa8 <main+0x216>
        //Vcc <6,3V; no proper operation is possible
        lcd_fix_string(BatEmpty);	//Battery empty!
    1f98:	88 ed       	ldi	r24, 0xD8	; 216
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
        wait2s();
    1fa0:	0e 94 58 14 	call	0x28b0	; 0x28b0 <wait2s>
        PORTD = 0;			//switch power off
    1fa4:	1b b8       	out	0x0b, r1	; 11
        return 0;
    1fa6:	5a c4       	rjmp	.+2228   	; 0x285c <main+0xaca>
     }
     lcd_fix_string(BatWeak);		//Battery weak
    1fa8:	83 ed       	ldi	r24, 0xD3	; 211
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	02 c0       	rjmp	.+4      	; 0x1fb2 <main+0x220>
  } else { // Battery-voltage OK
     lcd_fix_string(OK_str); 		// "OK"
    1fae:	86 e6       	ldi	r24, 0x66	; 102
    1fb0:	91 e0       	ldi	r25, 0x01	; 1
    1fb2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
  }
#else
  lcd_fix_string(VERSION_str);		// if no Battery check, Version .. in row 1
#endif
#ifdef WDT_enabled
  wdt_enable(WDTO_2S);		//Watchdog on
    1fb6:	2f e0       	ldi	r18, 0x0F	; 15
    1fb8:	88 e1       	ldi	r24, 0x18	; 24
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	f8 94       	cli
    1fc0:	a8 95       	wdr
    1fc2:	80 93 60 00 	sts	0x0060, r24
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	20 93 60 00 	sts	0x0060, r18
#endif

//  wait1s();			// add more time for reading batterie voltage
  // begin tests
#ifdef AUTO_RH
  RefVoltage();			//compute RHmultip = f(reference voltage)
    1fcc:	0e 94 b2 08 	call	0x1164	; 0x1164 <RefVoltage>
#endif
#if FLASHEND > 0x1fff
  if (WithReference) {
    1fd0:	80 91 42 01 	lds	r24, 0x0142
    1fd4:	88 23       	and	r24, r24
    1fd6:	a1 f0       	breq	.+40     	; 0x2000 <main+0x26e>
     lcd_line2();
    1fd8:	80 ec       	ldi	r24, 0xC0	; 192
    1fda:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
     lcd_fix_string(VCC_str);		// VCC=
    1fde:	82 ea       	ldi	r24, 0xA2	; 162
    1fe0:	91 e0       	ldi	r25, 0x01	; 1
    1fe2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
     DisplayValue(ADCconfig.U_AVCC,-3,'V',3);	// Display 3 Digits of this mV units
    1fe6:	60 91 3d 01 	lds	r22, 0x013D
    1fea:	70 91 3e 01 	lds	r23, 0x013E
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	4d ef       	ldi	r20, 0xFD	; 253
    1ff4:	26 e5       	ldi	r18, 0x56	; 86
    1ff6:	03 e0       	ldi	r16, 0x03	; 3
    1ff8:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
     wait1s();
    1ffc:	0e 94 59 14 	call	0x28b2	; 0x28b2 <wait1000ms>
  }
#endif

  lcd_line2();			//LCD position row2, column 1
    2000:	80 ec       	ldi	r24, 0xC0	; 192
    2002:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_string(TestRunning);		//String: testing...
    2006:	88 ec       	ldi	r24, 0xC8	; 200
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
#ifndef DebugOut
  lcd_line2();			//LCD position row 2, column 1
    200e:	80 ec       	ldi	r24, 0xC0	; 192
    2010:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
#endif
  EntladePins();		// discharge all capacitors!
    2014:	0e 94 17 08 	call	0x102e	; 0x102e <EntladePins>
  if(PartFound == PART_CELL) {
    2018:	80 91 07 01 	lds	r24, 0x0107
    201c:	88 30       	cpi	r24, 0x08	; 8
    201e:	39 f4       	brne	.+14     	; 0x202e <main+0x29c>
    lcd_clear();
    2020:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
    lcd_fix_string(Cell_str);	// display "Cell!"
    2024:	8c e9       	ldi	r24, 0x9C	; 156
    2026:	91 e0       	ldi	r25, 0x01	; 1
    2028:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
    goto end2;
    202c:	ea c3       	rjmp	.+2004   	; 0x2802 <main+0xa70>
  }

#ifdef CHECK_CALL
  AutoCheck();			//check, if selftest should be done
    202e:	0e 94 06 0a 	call	0x140c	; 0x140c <AutoCheck>
#endif
     
  // check all 6 combinations for the 3 pins 
//         High  Low  Tri
  CheckPins(TP1, TP2, TP3);
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	61 e0       	ldi	r22, 0x01	; 1
    2036:	42 e0       	ldi	r20, 0x02	; 2
    2038:	0e 94 5f 01 	call	0x2be	; 0x2be <CheckPins>
  CheckPins(TP2, TP1, TP3);
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	60 e0       	ldi	r22, 0x00	; 0
    2040:	42 e0       	ldi	r20, 0x02	; 2
    2042:	0e 94 5f 01 	call	0x2be	; 0x2be <CheckPins>

  CheckPins(TP1, TP3, TP2);
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	62 e0       	ldi	r22, 0x02	; 2
    204a:	41 e0       	ldi	r20, 0x01	; 1
    204c:	0e 94 5f 01 	call	0x2be	; 0x2be <CheckPins>
  CheckPins(TP3, TP1, TP2);
    2050:	82 e0       	ldi	r24, 0x02	; 2
    2052:	60 e0       	ldi	r22, 0x00	; 0
    2054:	41 e0       	ldi	r20, 0x01	; 1
    2056:	0e 94 5f 01 	call	0x2be	; 0x2be <CheckPins>

  CheckPins(TP2, TP3, TP1);
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	62 e0       	ldi	r22, 0x02	; 2
    205e:	40 e0       	ldi	r20, 0x00	; 0
    2060:	0e 94 5f 01 	call	0x2be	; 0x2be <CheckPins>
  CheckPins(TP3, TP2, TP1);
    2064:	82 e0       	ldi	r24, 0x02	; 2
    2066:	61 e0       	ldi	r22, 0x01	; 1
    2068:	40 e0       	ldi	r20, 0x00	; 0
    206a:	0e 94 5f 01 	call	0x2be	; 0x2be <CheckPins>
  
  //separate check if is is a capacitor
  if(((PartFound == PART_NONE) || (PartFound == PART_RESISTOR) || (PartFound == PART_DIODE)) ) {
    206e:	80 91 07 01 	lds	r24, 0x0107
    2072:	88 23       	and	r24, r24
    2074:	21 f0       	breq	.+8      	; 0x207e <main+0x2ec>
    2076:	86 30       	cpi	r24, 0x06	; 6
    2078:	11 f0       	breq	.+4      	; 0x207e <main+0x2ec>
    207a:	81 30       	cpi	r24, 0x01	; 1
    207c:	d9 f4       	brne	.+54     	; 0x20b4 <main+0x322>
     EntladePins();		// discharge capacities
    207e:	0e 94 17 08 	call	0x102e	; 0x102e <EntladePins>
     //measurement of capacities in all 3 combinations
     cap.cval_max = 0;		// set max to zero
    2082:	10 92 5c 01 	sts	0x015C, r1
    2086:	10 92 5d 01 	sts	0x015D, r1
    208a:	10 92 5e 01 	sts	0x015E, r1
    208e:	10 92 5f 01 	sts	0x015F, r1
     cap.cpre_max = -12;	// set max to pF unit
    2092:	84 ef       	ldi	r24, 0xF4	; 244
    2094:	80 93 69 01 	sts	0x0169, r24
     ReadCapacity(TP3, TP1);
    2098:	82 e0       	ldi	r24, 0x02	; 2
    209a:	60 e0       	ldi	r22, 0x00	; 0
    209c:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <ReadCapacity>
     ReadCapacity(TP3, TP2);
    20a0:	82 e0       	ldi	r24, 0x02	; 2
    20a2:	61 e0       	ldi	r22, 0x01	; 1
    20a4:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <ReadCapacity>
     ReadCapacity(TP2, TP1);
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	60 e0       	ldi	r22, 0x00	; 0
    20ac:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <ReadCapacity>

#if FLASHEND > 0x1fff
     ReadInductance();			// measure inductance
    20b0:	0e 94 77 17 	call	0x2eee	; 0x2eee <ReadInductance>
#endif
  }
  //All checks are done, output result to display
  lcd_clear();
    20b4:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_clear>
  if(PartFound == PART_DIODE) {
    20b8:	80 91 07 01 	lds	r24, 0x0107
    20bc:	81 30       	cpi	r24, 0x01	; 1
    20be:	09 f0       	breq	.+2      	; 0x20c2 <main+0x330>
    20c0:	ff c0       	rjmp	.+510    	; 0x22c0 <main+0x52e>
     if(NumOfDiodes == 1) {		//single Diode
    20c2:	90 91 05 01 	lds	r25, 0x0105
    20c6:	91 30       	cpi	r25, 0x01	; 1
    20c8:	49 f5       	brne	.+82     	; 0x211c <main+0x38a>
        lcd_fix_string(Diode);		//"Diode: "
    20ca:	8d ee       	ldi	r24, 0xED	; 237
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
        lcd_testpin(diodes[0].Anode);
    20d2:	80 91 6c 01 	lds	r24, 0x016C
    20d6:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
        lcd_fix_string(AnKat);		//"->|-"
    20da:	80 eb       	ldi	r24, 0xB0	; 176
    20dc:	91 e0       	ldi	r25, 0x01	; 1
    20de:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
        lcd_testpin(diodes[0].Cathode);
    20e2:	80 91 6d 01 	lds	r24, 0x016D
    20e6:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
        UfAusgabe(0x70);
    20ea:	80 e7       	ldi	r24, 0x70	; 112
    20ec:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <UfAusgabe>
        lcd_fix_string(GateCap_str);	//"C="
    20f0:	83 e7       	ldi	r24, 0x73	; 115
    20f2:	91 e0       	ldi	r25, 0x01	; 1
    20f4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
        ReadCapacity(diodes[0].Cathode,diodes[0].Anode);	// Capacity opposite flow direction
    20f8:	80 91 6d 01 	lds	r24, 0x016D
    20fc:	60 91 6c 01 	lds	r22, 0x016C
    2100:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <ReadCapacity>
        DisplayValue(cap.cval,cap.cpre,'F',3);
    2104:	60 91 58 01 	lds	r22, 0x0158
    2108:	70 91 59 01 	lds	r23, 0x0159
    210c:	80 91 5a 01 	lds	r24, 0x015A
    2110:	90 91 5b 01 	lds	r25, 0x015B
    2114:	40 91 68 01 	lds	r20, 0x0168
    2118:	26 e4       	ldi	r18, 0x46	; 70
    211a:	f4 c2       	rjmp	.+1512   	; 0x2704 <main+0x972>
        goto end;
     } else if(NumOfDiodes == 2) { // double diode
    211c:	92 30       	cpi	r25, 0x02	; 2
    211e:	09 f0       	breq	.+2      	; 0x2122 <main+0x390>
    2120:	4c c0       	rjmp	.+152    	; 0x21ba <main+0x428>
        lcd_data('2');
    2122:	82 e3       	ldi	r24, 0x32	; 50
    2124:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
        lcd_fix_string(Dioden);		//"diodes "
    2128:	88 eb       	ldi	r24, 0xB8	; 184
    212a:	91 e0       	ldi	r25, 0x01	; 1
    212c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
        if(diodes[0].Anode == diodes[1].Anode) { //Common Anode
    2130:	90 91 6c 01 	lds	r25, 0x016C
    2134:	20 91 70 01 	lds	r18, 0x0170
    2138:	92 17       	cp	r25, r18
    213a:	59 f4       	brne	.+22     	; 0x2152 <main+0x3c0>
           lcd_testpin(diodes[0].Cathode);
    213c:	80 91 6d 01 	lds	r24, 0x016D
    2140:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    2144:	84 eb       	ldi	r24, 0xB4	; 180
    2146:	91 e0       	ldi	r25, 0x01	; 1
    2148:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    214c:	80 91 6c 01 	lds	r24, 0x016C
    2150:	2b c0       	rjmp	.+86     	; 0x21a8 <main+0x416>
           lcd_fix_string(AnKat);	//"->|-"
           lcd_testpin(diodes[1].Cathode);
           UfAusgabe(0x01);
           goto end;
        } else if(diodes[0].Cathode == diodes[1].Cathode) { //Common Cathode
    2152:	30 91 6d 01 	lds	r19, 0x016D
    2156:	80 91 71 01 	lds	r24, 0x0171
    215a:	38 17       	cp	r19, r24
    215c:	b9 f4       	brne	.+46     	; 0x218c <main+0x3fa>
           lcd_testpin(diodes[0].Anode);
    215e:	89 2f       	mov	r24, r25
    2160:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2164:	80 eb       	ldi	r24, 0xB0	; 176
    2166:	91 e0       	ldi	r25, 0x01	; 1
    2168:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
	   lcd_testpin(diodes[0].Cathode);
    216c:	80 91 6d 01 	lds	r24, 0x016D
    2170:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    2174:	84 eb       	ldi	r24, 0xB4	; 180
    2176:	91 e0       	ldi	r25, 0x01	; 1
    2178:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
           lcd_testpin(diodes[1].Anode);
    217c:	80 91 70 01 	lds	r24, 0x0170
    2180:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
           UfAusgabe(0x01);
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <UfAusgabe>
           goto end;
    218a:	34 c3       	rjmp	.+1640   	; 0x27f4 <main+0xa62>
          }
        else if ((diodes[0].Cathode == diodes[1].Anode) && (diodes[1].Cathode == diodes[0].Anode)) {
    218c:	32 17       	cp	r19, r18
    218e:	09 f0       	breq	.+2      	; 0x2192 <main+0x400>
    2190:	ff c2       	rjmp	.+1534   	; 0x2790 <main+0x9fe>
    2192:	89 17       	cp	r24, r25
    2194:	09 f0       	breq	.+2      	; 0x2198 <main+0x406>
    2196:	fc c2       	rjmp	.+1528   	; 0x2790 <main+0x9fe>
           //Antiparallel
           lcd_testpin(diodes[0].Anode);
    2198:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    219c:	80 eb       	ldi	r24, 0xB0	; 176
    219e:	91 e0       	ldi	r25, 0x01	; 1
    21a0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
           lcd_testpin(diodes[0].Cathode);
    21a4:	80 91 6d 01 	lds	r24, 0x016D
    21a8:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    21ac:	80 eb       	ldi	r24, 0xB0	; 176
    21ae:	91 e0       	ldi	r25, 0x01	; 1
    21b0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
           lcd_testpin(diodes[1].Cathode);
    21b4:	80 91 71 01 	lds	r24, 0x0171
    21b8:	e3 cf       	rjmp	.-58     	; 0x2180 <main+0x3ee>
           UfAusgabe(0x01);
           goto end;
        }
     } else if(NumOfDiodes == 3) {
    21ba:	93 30       	cpi	r25, 0x03	; 3
    21bc:	09 f0       	breq	.+2      	; 0x21c0 <main+0x42e>
    21be:	e8 c2       	rjmp	.+1488   	; 0x2790 <main+0x9fe>
        //Serial of 2 Diodes; was detected as 3 Diodes 
        trans.b = 3;
    21c0:	90 93 52 01 	sts	0x0152, r25
        trans.c = 3;
    21c4:	90 93 53 01 	sts	0x0153, r25
        /* Check for any constallation of 2 serial diodes:
          Only once the pin No of anyone Cathode is identical of another anode.
          two diodes in series is additionally detected as third big diode.
        */
        if(diodes[0].Cathode == diodes[1].Anode)
    21c8:	50 91 6d 01 	lds	r21, 0x016D
    21cc:	90 91 70 01 	lds	r25, 0x0170
    21d0:	59 17       	cp	r21, r25
    21d2:	21 f4       	brne	.+8      	; 0x21dc <main+0x44a>
          {
           trans.b = 0;
    21d4:	10 92 52 01 	sts	0x0152, r1
           trans.c = 1;
    21d8:	80 93 53 01 	sts	0x0153, r24
          }
        if(diodes[0].Anode == diodes[1].Cathode)
    21dc:	40 91 6c 01 	lds	r20, 0x016C
    21e0:	30 91 71 01 	lds	r19, 0x0171
    21e4:	43 17       	cp	r20, r19
    21e6:	29 f4       	brne	.+10     	; 0x21f2 <main+0x460>
          {
           trans.b = 1;
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	80 93 52 01 	sts	0x0152, r24
           trans.c = 0;
    21ee:	10 92 53 01 	sts	0x0153, r1
          }
        if(diodes[0].Cathode == diodes[2].Anode)
    21f2:	20 91 74 01 	lds	r18, 0x0174
    21f6:	52 17       	cp	r21, r18
    21f8:	29 f4       	brne	.+10     	; 0x2204 <main+0x472>
          {
           trans.b = 0;
    21fa:	10 92 52 01 	sts	0x0152, r1
           trans.c = 2;
    21fe:	82 e0       	ldi	r24, 0x02	; 2
    2200:	80 93 53 01 	sts	0x0153, r24
          }
        if(diodes[0].Anode == diodes[2].Cathode)
    2204:	80 91 75 01 	lds	r24, 0x0175
    2208:	48 17       	cp	r20, r24
    220a:	29 f4       	brne	.+10     	; 0x2216 <main+0x484>
          {
           trans.b = 2;
    220c:	42 e0       	ldi	r20, 0x02	; 2
    220e:	40 93 52 01 	sts	0x0152, r20
           trans.c = 0;
    2212:	10 92 53 01 	sts	0x0153, r1
          }
        if(diodes[1].Cathode == diodes[2].Anode)
    2216:	32 17       	cp	r19, r18
    2218:	31 f4       	brne	.+12     	; 0x2226 <main+0x494>
          {
           trans.b = 1;
    221a:	21 e0       	ldi	r18, 0x01	; 1
    221c:	20 93 52 01 	sts	0x0152, r18
           trans.c = 2;
    2220:	22 e0       	ldi	r18, 0x02	; 2
    2222:	20 93 53 01 	sts	0x0153, r18
          }
        if(diodes[1].Anode == diodes[2].Cathode)
    2226:	98 17       	cp	r25, r24
    2228:	31 f4       	brne	.+12     	; 0x2236 <main+0x4a4>
          {
           trans.b = 2;
    222a:	82 e0       	ldi	r24, 0x02	; 2
    222c:	80 93 52 01 	sts	0x0152, r24
           trans.c = 1;
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	80 93 53 01 	sts	0x0153, r24
        lcd_testpin(diodes[2].Cathode);
        lcd_space();
        lcd_string(utoa(diodes[2].Voltage, outval, 10));
        lcd_line1();
#endif
        if((trans.b<3) && (trans.c<3)) {
    2236:	80 91 52 01 	lds	r24, 0x0152
    223a:	83 30       	cpi	r24, 0x03	; 3
    223c:	08 f0       	brcs	.+2      	; 0x2240 <main+0x4ae>
    223e:	a8 c2       	rjmp	.+1360   	; 0x2790 <main+0x9fe>
    2240:	80 91 53 01 	lds	r24, 0x0153
    2244:	83 30       	cpi	r24, 0x03	; 3
    2246:	08 f0       	brcs	.+2      	; 0x224a <main+0x4b8>
    2248:	a3 c2       	rjmp	.+1350   	; 0x2790 <main+0x9fe>
           lcd_data('3');
    224a:	83 e3       	ldi	r24, 0x33	; 51
    224c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
           lcd_fix_string(Dioden);	//"Diodes "
    2250:	88 eb       	ldi	r24, 0xB8	; 184
    2252:	91 e0       	ldi	r25, 0x01	; 1
    2254:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Anode);
    2258:	e0 91 52 01 	lds	r30, 0x0152
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	ee 0f       	add	r30, r30
    2260:	ff 1f       	adc	r31, r31
    2262:	ee 0f       	add	r30, r30
    2264:	ff 1f       	adc	r31, r31
    2266:	e4 59       	subi	r30, 0x94	; 148
    2268:	fe 4f       	sbci	r31, 0xFE	; 254
    226a:	80 81       	ld	r24, Z
    226c:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2270:	80 eb       	ldi	r24, 0xB0	; 176
    2272:	91 e0       	ldi	r25, 0x01	; 1
    2274:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Cathode);
    2278:	e0 91 52 01 	lds	r30, 0x0152
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	ee 0f       	add	r30, r30
    2280:	ff 1f       	adc	r31, r31
    2282:	ee 0f       	add	r30, r30
    2284:	ff 1f       	adc	r31, r31
    2286:	e4 59       	subi	r30, 0x94	; 148
    2288:	fe 4f       	sbci	r31, 0xFE	; 254
    228a:	81 81       	ldd	r24, Z+1	; 0x01
    228c:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2290:	80 eb       	ldi	r24, 0xB0	; 176
    2292:	91 e0       	ldi	r25, 0x01	; 1
    2294:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
           lcd_testpin(diodes[trans.c].Cathode);
    2298:	e0 91 53 01 	lds	r30, 0x0153
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	ee 0f       	add	r30, r30
    22a0:	ff 1f       	adc	r31, r31
    22a2:	ee 0f       	add	r30, r30
    22a4:	ff 1f       	adc	r31, r31
    22a6:	e4 59       	subi	r30, 0x94	; 148
    22a8:	fe 4f       	sbci	r31, 0xFE	; 254
    22aa:	81 81       	ldd	r24, Z+1	; 0x01
    22ac:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
           UfAusgabe( (trans.b<<4)|trans.c);
    22b0:	80 91 52 01 	lds	r24, 0x0152
    22b4:	82 95       	swap	r24
    22b6:	80 7f       	andi	r24, 0xF0	; 240
    22b8:	90 91 53 01 	lds	r25, 0x0153
    22bc:	89 2b       	or	r24, r25
    22be:	63 cf       	rjmp	.-314    	; 0x2186 <main+0x3f4>
           goto end;
        }
     }
     // end (PartFound == PART_DIODE)
  } else if (PartFound == PART_TRANSISTOR) {
    22c0:	82 30       	cpi	r24, 0x02	; 2
    22c2:	09 f0       	breq	.+2      	; 0x22c6 <main+0x534>
    22c4:	a1 c0       	rjmp	.+322    	; 0x2408 <main+0x676>
    if(PartReady != 0) {
    22c6:	80 91 04 01 	lds	r24, 0x0104
    22ca:	88 23       	and	r24, r24
    22cc:	71 f1       	breq	.+92     	; 0x232a <main+0x598>
       if((trans.hfe[0]>trans.hfe[1])) {
    22ce:	80 91 4a 01 	lds	r24, 0x014A
    22d2:	90 91 4b 01 	lds	r25, 0x014B
    22d6:	a0 91 4c 01 	lds	r26, 0x014C
    22da:	b0 91 4d 01 	lds	r27, 0x014D
    22de:	20 91 46 01 	lds	r18, 0x0146
    22e2:	30 91 47 01 	lds	r19, 0x0147
    22e6:	40 91 48 01 	lds	r20, 0x0148
    22ea:	50 91 49 01 	lds	r21, 0x0149
    22ee:	82 17       	cp	r24, r18
    22f0:	93 07       	cpc	r25, r19
    22f2:	a4 07       	cpc	r26, r20
    22f4:	b5 07       	cpc	r27, r21
    22f6:	48 f4       	brcc	.+18     	; 0x230a <main+0x578>
          //if the amplification factor was higher at first testr: swap C and E !
          tmp = trans.c;
    22f8:	80 91 53 01 	lds	r24, 0x0153
          trans.c = trans.e;
    22fc:	90 91 54 01 	lds	r25, 0x0154
    2300:	90 93 53 01 	sts	0x0153, r25
          trans.e = tmp;
    2304:	80 93 54 01 	sts	0x0154, r24
    2308:	10 c0       	rjmp	.+32     	; 0x232a <main+0x598>
       } else {
          trans.hfe[0] = trans.hfe[1];
    230a:	80 93 46 01 	sts	0x0146, r24
    230e:	90 93 47 01 	sts	0x0147, r25
    2312:	a0 93 48 01 	sts	0x0148, r26
    2316:	b0 93 49 01 	sts	0x0149, r27
          trans.uBE[0] = trans.uBE[1];
    231a:	80 91 50 01 	lds	r24, 0x0150
    231e:	90 91 51 01 	lds	r25, 0x0151
    2322:	90 93 4f 01 	sts	0x014F, r25
    2326:	80 93 4e 01 	sts	0x014E, r24
       }
    }

    if(PartMode == PART_MODE_NPN) {
    232a:	80 91 06 01 	lds	r24, 0x0106
    232e:	81 30       	cpi	r24, 0x01	; 1
    2330:	19 f4       	brne	.+6      	; 0x2338 <main+0x5a6>
       lcd_fix_string(NPN_str);		//"NPN "
    2332:	89 e7       	ldi	r24, 0x79	; 121
    2334:	91 e0       	ldi	r25, 0x01	; 1
    2336:	02 c0       	rjmp	.+4      	; 0x233c <main+0x5aa>
    } else {
       lcd_fix_string(PNP_str);		//"PNP "
    2338:	8e e7       	ldi	r24, 0x7E	; 126
    233a:	91 e0       	ldi	r25, 0x01	; 1
    233c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
    }
    if( NumOfDiodes > 2) {	//Transistor with protection diode
    2340:	80 91 05 01 	lds	r24, 0x0105
    2344:	83 30       	cpi	r24, 0x03	; 3
    2346:	a0 f0       	brcs	.+40     	; 0x2370 <main+0x5de>
#ifdef EBC_STYLE
       if(PartMode == PART_MODE_NPN)
#else
       if (((PartMode == PART_MODE_NPN) && (trans.c > trans.e)) || ((PartMode != PART_MODE_NPN) && (trans.c < trans.e)))
    2348:	20 91 06 01 	lds	r18, 0x0106
    234c:	90 91 53 01 	lds	r25, 0x0153
    2350:	80 91 54 01 	lds	r24, 0x0154
    2354:	21 30       	cpi	r18, 0x01	; 1
    2356:	19 f4       	brne	.+6      	; 0x235e <main+0x5cc>
    2358:	89 17       	cp	r24, r25
    235a:	18 f0       	brcs	.+6      	; 0x2362 <main+0x5d0>
    235c:	05 c0       	rjmp	.+10     	; 0x2368 <main+0x5d6>
    235e:	98 17       	cp	r25, r24
    2360:	18 f4       	brcc	.+6      	; 0x2368 <main+0x5d6>
#endif
       {
          lcd_fix_string(AnKat);	//"->|-"
    2362:	80 eb       	ldi	r24, 0xB0	; 176
    2364:	91 e0       	ldi	r25, 0x01	; 1
    2366:	02 c0       	rjmp	.+4      	; 0x236c <main+0x5da>
       } else {
          lcd_fix_string(KatAn);	//"-|<-"
    2368:	84 eb       	ldi	r24, 0xB4	; 180
    236a:	91 e0       	ldi	r25, 0x01	; 1
    236c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
    lcd_fix_string(EBC_str);		//" EBC="
    lcd_testpin(trans.e);
    lcd_testpin(trans.b);
    lcd_testpin(trans.c);
#else
    lcd_fix_string(N123_str);		//" 123="
    2370:	83 e8       	ldi	r24, 0x83	; 131
    2372:	91 e0       	ldi	r25, 0x01	; 1
    2374:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
    for (ii=0;ii<3;ii++) {
    2378:	10 92 44 01 	sts	0x0144, r1
    237c:	1e c0       	rjmp	.+60     	; 0x23ba <main+0x628>
        if (ii == trans.e)  lcd_data('E');	// Output Character in right order
    237e:	90 91 54 01 	lds	r25, 0x0154
    2382:	89 17       	cp	r24, r25
    2384:	19 f4       	brne	.+6      	; 0x238c <main+0x5fa>
    2386:	85 e4       	ldi	r24, 0x45	; 69
    2388:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
        if (ii == trans.b)  lcd_data('B');
    238c:	90 91 44 01 	lds	r25, 0x0144
    2390:	80 91 52 01 	lds	r24, 0x0152
    2394:	98 17       	cp	r25, r24
    2396:	19 f4       	brne	.+6      	; 0x239e <main+0x60c>
    2398:	82 e4       	ldi	r24, 0x42	; 66
    239a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
        if (ii == trans.c)  lcd_data('C');
    239e:	90 91 44 01 	lds	r25, 0x0144
    23a2:	80 91 53 01 	lds	r24, 0x0153
    23a6:	98 17       	cp	r25, r24
    23a8:	19 f4       	brne	.+6      	; 0x23b0 <main+0x61e>
    23aa:	83 e4       	ldi	r24, 0x43	; 67
    23ac:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
    lcd_testpin(trans.e);
    lcd_testpin(trans.b);
    lcd_testpin(trans.c);
#else
    lcd_fix_string(N123_str);		//" 123="
    for (ii=0;ii<3;ii++) {
    23b0:	80 91 44 01 	lds	r24, 0x0144
    23b4:	8f 5f       	subi	r24, 0xFF	; 255
    23b6:	80 93 44 01 	sts	0x0144, r24
    23ba:	80 91 44 01 	lds	r24, 0x0144
    23be:	83 30       	cpi	r24, 0x03	; 3
    23c0:	f0 f2       	brcs	.-68     	; 0x237e <main+0x5ec>
        if (ii == trans.e)  lcd_data('E');	// Output Character in right order
        if (ii == trans.b)  lcd_data('B');
        if (ii == trans.c)  lcd_data('C');
    }
#endif
    lcd_line2(); //2. row 
    23c2:	80 ec       	ldi	r24, 0xC0	; 192
    23c4:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
    lcd_fix_string(hfe_str);		//"B="  (hFE)
    23c8:	86 e7       	ldi	r24, 0x76	; 118
    23ca:	91 e0       	ldi	r25, 0x01	; 1
    23cc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
    DisplayValue(trans.hfe[0],0,0,3);
    23d0:	60 91 46 01 	lds	r22, 0x0146
    23d4:	70 91 47 01 	lds	r23, 0x0147
    23d8:	80 91 48 01 	lds	r24, 0x0148
    23dc:	90 91 49 01 	lds	r25, 0x0149
    23e0:	40 e0       	ldi	r20, 0x00	; 0
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	03 e0       	ldi	r16, 0x03	; 3
    23e6:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
    lcd_space();
    23ea:	0e 94 84 00 	call	0x108	; 0x108 <lcd_space>

    lcd_fix_string(Uf_str);		//"Uf="
    23ee:	89 e8       	ldi	r24, 0x89	; 137
    23f0:	91 e0       	ldi	r25, 0x01	; 1
    23f2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
    DisplayValue(trans.uBE[0],-3,'V',3);
    23f6:	60 91 4e 01 	lds	r22, 0x014E
    23fa:	70 91 4f 01 	lds	r23, 0x014F
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	4d ef       	ldi	r20, 0xFD	; 253
    2404:	26 e5       	ldi	r18, 0x56	; 86
    2406:	7f c1       	rjmp	.+766    	; 0x2706 <main+0x974>
    goto end;
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    2408:	83 30       	cpi	r24, 0x03	; 3
    240a:	09 f0       	breq	.+2      	; 0x240e <main+0x67c>
    240c:	a3 c0       	rjmp	.+326    	; 0x2554 <main+0x7c2>
    if(PartMode&1) {
    240e:	80 91 06 01 	lds	r24, 0x0106
    2412:	80 ff       	sbrs	r24, 0
    2414:	02 c0       	rjmp	.+4      	; 0x241a <main+0x688>
       //N-Kanal
       lcd_data('P');			//P-channel
    2416:	80 e5       	ldi	r24, 0x50	; 80
    2418:	01 c0       	rjmp	.+2      	; 0x241c <main+0x68a>
    } else {
       lcd_data('N');			//N-channel
    241a:	8e e4       	ldi	r24, 0x4E	; 78
    241c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
    }
    lcd_data('-');
    2420:	8d e2       	ldi	r24, 0x2D	; 45
    2422:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>

    tmp = PartMode/2;
    2426:	80 91 06 01 	lds	r24, 0x0106
    242a:	86 95       	lsr	r24
    if (tmp == (PART_MODE_N_D_MOS/2)) {
    242c:	82 30       	cpi	r24, 0x02	; 2
    242e:	11 f4       	brne	.+4      	; 0x2434 <main+0x6a2>
       lcd_data('D');			// N-D
    2430:	84 e4       	ldi	r24, 0x44	; 68
    2432:	03 c0       	rjmp	.+6      	; 0x243a <main+0x6a8>
    }
    if (tmp == (PART_MODE_N_E_MOS/2)) {
    2434:	81 30       	cpi	r24, 0x01	; 1
    2436:	21 f4       	brne	.+8      	; 0x2440 <main+0x6ae>
       lcd_data('E');			// N-E
    2438:	85 e4       	ldi	r24, 0x45	; 69
    243a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
    243e:	05 c0       	rjmp	.+10     	; 0x244a <main+0x6b8>
    }
    if (tmp == (PART_MODE_N_JFET/2)) {
    2440:	83 30       	cpi	r24, 0x03	; 3
    2442:	19 f4       	brne	.+6      	; 0x244a <main+0x6b8>
       lcd_fix_string(jfet_str);	//"JFET"
    2444:	8e e6       	ldi	r24, 0x6E	; 110
    2446:	91 e0       	ldi	r25, 0x01	; 1
    2448:	02 c0       	rjmp	.+4      	; 0x244e <main+0x6bc>
    } else {
       lcd_fix_string(mosfet_str);	//"-MOS "
    244a:	89 e6       	ldi	r24, 0x69	; 105
    244c:	91 e0       	ldi	r25, 0x01	; 1
    244e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
    lcd_fix_string(GDS_str);		//"GDS="
    lcd_testpin(trans.b);
    lcd_testpin(trans.c);
    lcd_testpin(trans.e);
#else
    lcd_fix_string(N123_str);		//" 123="
    2452:	83 e8       	ldi	r24, 0x83	; 131
    2454:	91 e0       	ldi	r25, 0x01	; 1
    2456:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
    for (ii=0;ii<3;ii++) {
    245a:	10 92 44 01 	sts	0x0144, r1
    245e:	1e c0       	rjmp	.+60     	; 0x249c <main+0x70a>
        if (ii == trans.e)  lcd_data('S');	// Output Character in right order
    2460:	90 91 54 01 	lds	r25, 0x0154
    2464:	89 17       	cp	r24, r25
    2466:	19 f4       	brne	.+6      	; 0x246e <main+0x6dc>
    2468:	83 e5       	ldi	r24, 0x53	; 83
    246a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
        if (ii == trans.b)  lcd_data('G');
    246e:	90 91 44 01 	lds	r25, 0x0144
    2472:	80 91 52 01 	lds	r24, 0x0152
    2476:	98 17       	cp	r25, r24
    2478:	19 f4       	brne	.+6      	; 0x2480 <main+0x6ee>
    247a:	87 e4       	ldi	r24, 0x47	; 71
    247c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
        if (ii == trans.c)  lcd_data('D');
    2480:	90 91 44 01 	lds	r25, 0x0144
    2484:	80 91 53 01 	lds	r24, 0x0153
    2488:	98 17       	cp	r25, r24
    248a:	19 f4       	brne	.+6      	; 0x2492 <main+0x700>
    248c:	84 e4       	ldi	r24, 0x44	; 68
    248e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
    lcd_testpin(trans.b);
    lcd_testpin(trans.c);
    lcd_testpin(trans.e);
#else
    lcd_fix_string(N123_str);		//" 123="
    for (ii=0;ii<3;ii++) {
    2492:	80 91 44 01 	lds	r24, 0x0144
    2496:	8f 5f       	subi	r24, 0xFF	; 255
    2498:	80 93 44 01 	sts	0x0144, r24
    249c:	80 91 44 01 	lds	r24, 0x0144
    24a0:	83 30       	cpi	r24, 0x03	; 3
    24a2:	f0 f2       	brcs	.-68     	; 0x2460 <main+0x6ce>
        if (ii == trans.e)  lcd_data('S');	// Output Character in right order
        if (ii == trans.b)  lcd_data('G');
        if (ii == trans.c)  lcd_data('D');
    }
#endif
    if((NumOfDiodes > 0) && (PartMode < PART_MODE_N_D_MOS)) {
    24a4:	80 91 05 01 	lds	r24, 0x0105
    24a8:	88 23       	and	r24, r24
    24aa:	a1 f0       	breq	.+40     	; 0x24d4 <main+0x742>
    24ac:	20 91 06 01 	lds	r18, 0x0106
    24b0:	24 30       	cpi	r18, 0x04	; 4
    24b2:	80 f4       	brcc	.+32     	; 0x24d4 <main+0x742>
    24b4:	90 91 53 01 	lds	r25, 0x0153
    24b8:	80 91 54 01 	lds	r24, 0x0154
       //MOSFET with protection diode; only with enhancement-FETs
#ifdef EBC_STYLE
       if (PartMode&1)
#else
       if (((PartMode&1) && (trans.c < trans.e)) || ((!(PartMode&1)) && (trans.c > trans.e)))
    24bc:	20 ff       	sbrs	r18, 0
    24be:	03 c0       	rjmp	.+6      	; 0x24c6 <main+0x734>
    24c0:	98 17       	cp	r25, r24
    24c2:	18 f0       	brcs	.+6      	; 0x24ca <main+0x738>
    24c4:	04 c0       	rjmp	.+8      	; 0x24ce <main+0x73c>
    24c6:	89 17       	cp	r24, r25
    24c8:	10 f4       	brcc	.+4      	; 0x24ce <main+0x73c>
#endif
       {
          lcd_data(LCD_CHAR_DIODE1);	//show Diode symbol >|
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	01 c0       	rjmp	.+2      	; 0x24d0 <main+0x73e>
       } else {
          lcd_data(LCD_CHAR_DIODE2);	//show Diode symbol |<
    24ce:	82 e0       	ldi	r24, 0x02	; 2
    24d0:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
       }
    }
    lcd_line2();			//2. Row
    24d4:	80 ec       	ldi	r24, 0xC0	; 192
    24d6:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
    if(PartMode < PART_MODE_N_D_MOS) {	//enhancement-MOSFET
    24da:	80 91 06 01 	lds	r24, 0x0106
    24de:	84 30       	cpi	r24, 0x04	; 4
    24e0:	d8 f4       	brcc	.+54     	; 0x2518 <main+0x786>
	//Gate capacity
       lcd_fix_string(GateCap_str);		//"C="
    24e2:	83 e7       	ldi	r24, 0x73	; 115
    24e4:	91 e0       	ldi	r25, 0x01	; 1
    24e6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
       ReadCapacity(trans.b,trans.e);	//measure capacity
    24ea:	80 91 52 01 	lds	r24, 0x0152
    24ee:	60 91 54 01 	lds	r22, 0x0154
    24f2:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <ReadCapacity>
       DisplayValue(cap.cval,cap.cpre,'F',3);
    24f6:	60 91 58 01 	lds	r22, 0x0158
    24fa:	70 91 59 01 	lds	r23, 0x0159
    24fe:	80 91 5a 01 	lds	r24, 0x015A
    2502:	90 91 5b 01 	lds	r25, 0x015B
    2506:	40 91 68 01 	lds	r20, 0x0168
    250a:	26 e4       	ldi	r18, 0x46	; 70
    250c:	03 e0       	ldi	r16, 0x03	; 3
    250e:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
       lcd_fix_string(vt_str);		// "Vt="
    2512:	8d e8       	ldi	r24, 0x8D	; 141
    2514:	91 e0       	ldi	r25, 0x01	; 1
    2516:	13 c0       	rjmp	.+38     	; 0x253e <main+0x7ac>
    } else {
       lcd_data('I');
    2518:	89 e4       	ldi	r24, 0x49	; 73
    251a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
       lcd_data('=');
    251e:	8d e3       	ldi	r24, 0x3D	; 61
    2520:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
       DisplayValue(trans.uBE[1],-5,'A',2);
    2524:	60 91 50 01 	lds	r22, 0x0150
    2528:	70 91 51 01 	lds	r23, 0x0151
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	4b ef       	ldi	r20, 0xFB	; 251
    2532:	21 e4       	ldi	r18, 0x41	; 65
    2534:	02 e0       	ldi	r16, 0x02	; 2
    2536:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
       lcd_fix_string(Vgs_str);		// " Vgs="
    253a:	82 e9       	ldi	r24, 0x92	; 146
    253c:	91 e0       	ldi	r25, 0x01	; 1
    253e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
    }
    //Gate-threshold voltage
    DisplayValue(gthvoltage,-3,'V',3);
    2542:	60 91 56 01 	lds	r22, 0x0156
    2546:	70 91 57 01 	lds	r23, 0x0157
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	4d ef       	ldi	r20, 0xFD	; 253
    2550:	26 e5       	ldi	r18, 0x56	; 86
    2552:	d8 c0       	rjmp	.+432    	; 0x2704 <main+0x972>
    goto end;
    // end (PartFound == PART_FET)
  } else if (PartFound == PART_THYRISTOR) {
    2554:	85 30       	cpi	r24, 0x05	; 5
    2556:	19 f4       	brne	.+6      	; 0x255e <main+0x7cc>
    lcd_fix_string(Thyristor);		//"Thyristor"
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	91 e0       	ldi	r25, 0x01	; 1
    255c:	04 c0       	rjmp	.+8      	; 0x2566 <main+0x7d4>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    255e:	84 30       	cpi	r24, 0x04	; 4
    2560:	c1 f4       	brne	.+48     	; 0x2592 <main+0x800>
    lcd_fix_string(Triac);		//"Triac"
    2562:	8a ef       	ldi	r24, 0xFA	; 250
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
  mess_count = 0;
  goto end2;


gakAusgabe:
  lcd_line2(); //2. row 
    256a:	80 ec       	ldi	r24, 0xC0	; 192
    256c:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
  lcd_fix_string(GAK);		//"GAK="
    2570:	85 ef       	ldi	r24, 0xF5	; 245
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
  lcd_testpin(trans.b);
    2578:	80 91 52 01 	lds	r24, 0x0152
    257c:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
  lcd_testpin(trans.c);
    2580:	80 91 53 01 	lds	r24, 0x0153
    2584:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
  lcd_testpin(trans.e);
    2588:	80 91 54 01 	lds	r24, 0x0154
    258c:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
    2590:	31 c1       	rjmp	.+610    	; 0x27f4 <main+0xa62>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    lcd_fix_string(Triac);		//"Triac"
    goto gakAusgabe;
  }
  else if(PartFound == PART_RESISTOR) {
    2592:	86 30       	cpi	r24, 0x06	; 6
    2594:	09 f0       	breq	.+2      	; 0x2598 <main+0x806>
    2596:	da c0       	rjmp	.+436    	; 0x274c <main+0x9ba>
    if (ResistorsFound == 1) { // single resistor
    2598:	60 91 55 01 	lds	r22, 0x0155
    259c:	61 30       	cpi	r22, 0x01	; 1
    259e:	69 f4       	brne	.+26     	; 0x25ba <main+0x828>
       lcd_testpin(resis[0].rb);  	//Pin-number 1
    25a0:	80 91 21 01 	lds	r24, 0x0121
    25a4:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
       lcd_fix_string(Resistor_str);
    25a8:	8d eb       	ldi	r24, 0xBD	; 189
    25aa:	91 e0       	ldi	r25, 0x01	; 1
    25ac:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
       lcd_testpin(resis[0].ra);		//Pin-number 2
    25b0:	80 91 20 01 	lds	r24, 0x0120
    25b4:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
    25b8:	80 c0       	rjmp	.+256    	; 0x26ba <main+0x928>
    } else { // R-Max suchen
       ii = 0;
    25ba:	10 92 44 01 	sts	0x0144, r1
       if (resis[1].rx > resis[0].rx)
    25be:	20 91 23 01 	lds	r18, 0x0123
    25c2:	30 91 24 01 	lds	r19, 0x0124
    25c6:	40 91 25 01 	lds	r20, 0x0125
    25ca:	50 91 26 01 	lds	r21, 0x0126
    25ce:	80 91 18 01 	lds	r24, 0x0118
    25d2:	90 91 19 01 	lds	r25, 0x0119
    25d6:	a0 91 1a 01 	lds	r26, 0x011A
    25da:	b0 91 1b 01 	lds	r27, 0x011B
    25de:	82 17       	cp	r24, r18
    25e0:	93 07       	cpc	r25, r19
    25e2:	a4 07       	cpc	r26, r20
    25e4:	b5 07       	cpc	r27, r21
    25e6:	18 f4       	brcc	.+6      	; 0x25ee <main+0x85c>
          ii = 1;
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	80 93 44 01 	sts	0x0144, r24
       if (ResistorsFound == 2) {
    25ee:	62 30       	cpi	r22, 0x02	; 2
    25f0:	19 f4       	brne	.+6      	; 0x25f8 <main+0x866>
          ii = 2;
    25f2:	60 93 44 01 	sts	0x0144, r22
    25f6:	22 c0       	rjmp	.+68     	; 0x263c <main+0x8aa>
       } else {
          if (resis[2].rx > resis[ii].rx) {
    25f8:	20 91 44 01 	lds	r18, 0x0144
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	8b e0       	ldi	r24, 0x0B	; 11
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	28 9f       	mul	r18, r24
    2604:	f0 01       	movw	r30, r0
    2606:	29 9f       	mul	r18, r25
    2608:	f0 0d       	add	r31, r0
    260a:	38 9f       	mul	r19, r24
    260c:	f0 0d       	add	r31, r0
    260e:	11 24       	eor	r1, r1
    2610:	e8 5e       	subi	r30, 0xE8	; 232
    2612:	fe 4f       	sbci	r31, 0xFE	; 254
    2614:	20 91 2e 01 	lds	r18, 0x012E
    2618:	30 91 2f 01 	lds	r19, 0x012F
    261c:	40 91 30 01 	lds	r20, 0x0130
    2620:	50 91 31 01 	lds	r21, 0x0131
    2624:	80 81       	ld	r24, Z
    2626:	91 81       	ldd	r25, Z+1	; 0x01
    2628:	a2 81       	ldd	r26, Z+2	; 0x02
    262a:	b3 81       	ldd	r27, Z+3	; 0x03
    262c:	82 17       	cp	r24, r18
    262e:	93 07       	cpc	r25, r19
    2630:	a4 07       	cpc	r26, r20
    2632:	b5 07       	cpc	r27, r21
    2634:	18 f4       	brcc	.+6      	; 0x263c <main+0x8aa>
             ii = 2;
    2636:	82 e0       	ldi	r24, 0x02	; 2
    2638:	80 93 44 01 	sts	0x0144, r24
          }
       }

       if (ii == 0) {
    263c:	80 91 44 01 	lds	r24, 0x0144
    2640:	88 23       	and	r24, r24
    2642:	89 f4       	brne	.+34     	; 0x2666 <main+0x8d4>
          lcd_data('1');
    2644:	81 e3       	ldi	r24, 0x31	; 49
    2646:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    264a:	8d eb       	ldi	r24, 0xBD	; 189
    264c:	91 e0       	ldi	r25, 0x01	; 1
    264e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
          lcd_data('3');
    2652:	83 e3       	ldi	r24, 0x33	; 51
    2654:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    2658:	8d eb       	ldi	r24, 0xBD	; 189
    265a:	91 e0       	ldi	r25, 0x01	; 1
    265c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
          lcd_data('2');
    2660:	82 e3       	ldi	r24, 0x32	; 50
    2662:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
       }
       if (ii == 1) {
    2666:	80 91 44 01 	lds	r24, 0x0144
    266a:	81 30       	cpi	r24, 0x01	; 1
    266c:	89 f4       	brne	.+34     	; 0x2690 <main+0x8fe>
          lcd_data('1');
    266e:	81 e3       	ldi	r24, 0x31	; 49
    2670:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    2674:	8d eb       	ldi	r24, 0xBD	; 189
    2676:	91 e0       	ldi	r25, 0x01	; 1
    2678:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
          lcd_data('2');
    267c:	82 e3       	ldi	r24, 0x32	; 50
    267e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    2682:	8d eb       	ldi	r24, 0xBD	; 189
    2684:	91 e0       	ldi	r25, 0x01	; 1
    2686:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
          lcd_data('3');
    268a:	83 e3       	ldi	r24, 0x33	; 51
    268c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
       }
       if (ii == 2) {
    2690:	80 91 44 01 	lds	r24, 0x0144
    2694:	82 30       	cpi	r24, 0x02	; 2
    2696:	89 f4       	brne	.+34     	; 0x26ba <main+0x928>
          lcd_data('2');
    2698:	82 e3       	ldi	r24, 0x32	; 50
    269a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    269e:	8d eb       	ldi	r24, 0xBD	; 189
    26a0:	91 e0       	ldi	r25, 0x01	; 1
    26a2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
          lcd_data('1');
    26a6:	81 e3       	ldi	r24, 0x31	; 49
    26a8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    26ac:	8d eb       	ldi	r24, 0xBD	; 189
    26ae:	91 e0       	ldi	r25, 0x01	; 1
    26b0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
          lcd_data('3');
    26b4:	83 e3       	ldi	r24, 0x33	; 51
    26b6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
       }
    }
    lcd_line2(); //2. row 
    26ba:	80 ec       	ldi	r24, 0xC0	; 192
    26bc:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
    if (ResistorsFound == 1) {
    26c0:	80 91 55 01 	lds	r24, 0x0155
    26c4:	81 30       	cpi	r24, 0x01	; 1
    26c6:	11 f5       	brne	.+68     	; 0x270c <main+0x97a>
       RvalOut(0);
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	0e 94 c0 09 	call	0x1380	; 0x1380 <RvalOut>
#if FLASHEND > 0x1fff
       if (resis[0].lx != 0) {
    26ce:	80 91 1c 01 	lds	r24, 0x011C
    26d2:	90 91 1d 01 	lds	r25, 0x011D
    26d6:	a0 91 1e 01 	lds	r26, 0x011E
    26da:	b0 91 1f 01 	lds	r27, 0x011F
    26de:	00 97       	sbiw	r24, 0x00	; 0
    26e0:	a1 05       	cpc	r26, r1
    26e2:	b1 05       	cpc	r27, r1
    26e4:	09 f4       	brne	.+2      	; 0x26e8 <main+0x956>
    26e6:	86 c0       	rjmp	.+268    	; 0x27f4 <main+0xa62>
	  // resistor have also Inductance
          lcd_fix_string(Lis_str);	// "L="
    26e8:	8d ea       	ldi	r24, 0xAD	; 173
    26ea:	91 e0       	ldi	r25, 0x01	; 1
    26ec:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
          DisplayValue(resis[0].lx,-5,'H',3);	// output inductance
    26f0:	60 91 1c 01 	lds	r22, 0x011C
    26f4:	70 91 1d 01 	lds	r23, 0x011D
    26f8:	80 91 1e 01 	lds	r24, 0x011E
    26fc:	90 91 1f 01 	lds	r25, 0x011F
    2700:	4b ef       	ldi	r20, 0xFB	; 251
    2702:	28 e4       	ldi	r18, 0x48	; 72
    2704:	03 e0       	ldi	r16, 0x03	; 3
    2706:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
    270a:	74 c0       	rjmp	.+232    	; 0x27f4 <main+0xa62>
       }
#endif
    } else {
       // output resistor values in right order
       if (ii == 0) {
    270c:	80 91 44 01 	lds	r24, 0x0144
    2710:	88 23       	and	r24, r24
    2712:	31 f4       	brne	.+12     	; 0x2720 <main+0x98e>
          RvalOut(1);
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	0e 94 c0 09 	call	0x1380	; 0x1380 <RvalOut>
          RvalOut(2);
    271a:	82 e0       	ldi	r24, 0x02	; 2
    271c:	0e 94 c0 09 	call	0x1380	; 0x1380 <RvalOut>
       }
       if (ii == 1) {
    2720:	80 91 44 01 	lds	r24, 0x0144
    2724:	81 30       	cpi	r24, 0x01	; 1
    2726:	31 f4       	brne	.+12     	; 0x2734 <main+0x9a2>
          RvalOut(0);
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	0e 94 c0 09 	call	0x1380	; 0x1380 <RvalOut>
          RvalOut(2);
    272e:	82 e0       	ldi	r24, 0x02	; 2
    2730:	0e 94 c0 09 	call	0x1380	; 0x1380 <RvalOut>
       }
       if (ii == 2) {
    2734:	80 91 44 01 	lds	r24, 0x0144
    2738:	82 30       	cpi	r24, 0x02	; 2
    273a:	09 f0       	breq	.+2      	; 0x273e <main+0x9ac>
    273c:	5b c0       	rjmp	.+182    	; 0x27f4 <main+0xa62>
          RvalOut(0);
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	0e 94 c0 09 	call	0x1380	; 0x1380 <RvalOut>
          RvalOut(1);
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	0e 94 c0 09 	call	0x1380	; 0x1380 <RvalOut>
    274a:	54 c0       	rjmp	.+168    	; 0x27f4 <main+0xa62>
    goto end;

  } // end (PartFound == PART_RESISTOR)

//capacity measurement is wanted
  else if(PartFound == PART_CAPACITOR) {
    274c:	87 30       	cpi	r24, 0x07	; 7
    274e:	01 f5       	brne	.+64     	; 0x2790 <main+0x9fe>
//     lcd_fix_string(Capacitor);
     lcd_testpin(cap.ca);		//Pin number 1
    2750:	80 91 66 01 	lds	r24, 0x0166
    2754:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
     lcd_fix_string(CapZeich);		// capacitor sign
    2758:	88 e9       	ldi	r24, 0x98	; 152
    275a:	91 e0       	ldi	r25, 0x01	; 1
    275c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
//#if FLASHEND > 0x1fff
//     lcd_fix_string(Resistor_str);	// -[=]-
//#endif
     lcd_testpin(cap.cb);		//Pin number 2
    2760:	80 91 67 01 	lds	r24, 0x0167
    2764:	0e 94 88 00 	call	0x110	; 0x110 <lcd_testpin>
     lcd_line2(); 			//2. row 
    2768:	80 ec       	ldi	r24, 0xC0	; 192
    276a:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
     DisplayValue(cap.cval_max,cap.cpre_max,'F',4);
    276e:	60 91 5c 01 	lds	r22, 0x015C
    2772:	70 91 5d 01 	lds	r23, 0x015D
    2776:	80 91 5e 01 	lds	r24, 0x015E
    277a:	90 91 5f 01 	lds	r25, 0x015F
    277e:	40 91 69 01 	lds	r20, 0x0169
    2782:	26 e4       	ldi	r18, 0x46	; 70
    2784:	04 e0       	ldi	r16, 0x04	; 4
    2786:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
#if FLASHEND > 0x1fff
     GetESR();				// get ESR of capacitor
    278a:	0e 94 8e 1a 	call	0x351c	; 0x351c <GetESR>
#endif
     goto end;
    278e:	32 c0       	rjmp	.+100    	; 0x27f4 <main+0xa62>
  }
  if(NumOfDiodes == 0) { //no diodes are found
    2790:	80 91 05 01 	lds	r24, 0x0105
    2794:	88 23       	and	r24, r24
    2796:	71 f4       	brne	.+28     	; 0x27b4 <main+0xa22>
     lcd_fix_string(TestFailed1); 	//"Kein,unbek. oder"
    2798:	83 e1       	ldi	r24, 0x13	; 19
    279a:	91 e0       	ldi	r25, 0x01	; 1
    279c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
     lcd_line2(); //2. row 
    27a0:	80 ec       	ldi	r24, 0xC0	; 192
    27a2:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
     lcd_fix_string(TestFailed2); 	//"defektes "
    27a6:	8f ed       	ldi	r24, 0xDF	; 223
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
     lcd_fix_string(Bauteil);		//"Bauteil"
    27ae:	88 ee       	ldi	r24, 0xE8	; 232
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	16 c0       	rjmp	.+44     	; 0x27e0 <main+0xa4e>
  } else {
     lcd_fix_string(Bauteil);		//"Bauteil"
    27b4:	88 ee       	ldi	r24, 0xE8	; 232
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
     lcd_fix_string(Unknown); 		//" unbek."
    27bc:	8a e0       	ldi	r24, 0x0A	; 10
    27be:	91 e0       	ldi	r25, 0x01	; 1
    27c0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
     lcd_line2(); //2. row 
    27c4:	80 ec       	ldi	r24, 0xC0	; 192
    27c6:	0e 94 93 00 	call	0x126	; 0x126 <lcd_command>
     lcd_fix_string(OrBroken); 		//"oder defekt "
    27ca:	83 e2       	ldi	r24, 0x23	; 35
    27cc:	91 e0       	ldi	r25, 0x01	; 1
    27ce:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
     lcd_data(NumOfDiodes + '0');
    27d2:	80 91 05 01 	lds	r24, 0x0105
    27d6:	80 5d       	subi	r24, 0xD0	; 208
    27d8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
     lcd_fix_string(AnKat);		//"->|-"
    27dc:	80 eb       	ldi	r24, 0xB0	; 176
    27de:	91 e0       	ldi	r25, 0x01	; 1
    27e0:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
  }
  empty_count++;
    27e4:	80 91 43 01 	lds	r24, 0x0143
    27e8:	8f 5f       	subi	r24, 0xFF	; 255
    27ea:	80 93 43 01 	sts	0x0143, r24
  mess_count = 0;
    27ee:	10 92 0b 01 	sts	0x010B, r1
  goto end2;
    27f2:	07 c0       	rjmp	.+14     	; 0x2802 <main+0xa70>
  lcd_testpin(trans.b);
  lcd_testpin(trans.c);
  lcd_testpin(trans.e);
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 end:
  empty_count = 0;		// reset counter, if part is found
    27f4:	10 92 43 01 	sts	0x0143, r1
  mess_count++;			// count measurements
    27f8:	80 91 0b 01 	lds	r24, 0x010B
    27fc:	8f 5f       	subi	r24, 0xFF	; 255
    27fe:	80 93 0b 01 	sts	0x010B, r24

 end2:
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
    2802:	4f 9b       	sbis	0x09, 7	; 9
    2804:	fe cf       	rjmp	.-4      	; 0x2802 <main+0xa70>
  wait200ms();
    2806:	0e 94 5d 14 	call	0x28ba	; 0x28ba <wait200ms>
// wait 10 seconds or 3 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage++) {
    280a:	10 92 57 01 	sts	0x0157, r1
    280e:	10 92 56 01 	sts	0x0156, r1
    2812:	0e c0       	rjmp	.+28     	; 0x2830 <main+0xa9e>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    2814:	4f 9b       	sbis	0x09, 7	; 9
    2816:	0c cb       	rjmp	.-2536   	; 0x1e30 <main+0x9e>
        // If the key is pressed again... 
        // goto start of measurement 
        goto start;
     }
     wdt_reset();
    2818:	a8 95       	wdr
     wait1ms();
    281a:	0e 94 69 14 	call	0x28d2	; 0x28d2 <wait1ms>

 end2:
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
  wait200ms();
// wait 10 seconds or 3 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage++) {
    281e:	80 91 56 01 	lds	r24, 0x0156
    2822:	90 91 57 01 	lds	r25, 0x0157
    2826:	01 96       	adiw	r24, 0x01	; 1
    2828:	90 93 57 01 	sts	0x0157, r25
    282c:	80 93 56 01 	sts	0x0156, r24
    2830:	80 91 56 01 	lds	r24, 0x0156
    2834:	90 91 57 01 	lds	r25, 0x0157
    2838:	26 e3       	ldi	r18, 0x36	; 54
    283a:	80 3b       	cpi	r24, 0xB0	; 176
    283c:	92 07       	cpc	r25, r18
    283e:	50 f3       	brcs	.-44     	; 0x2814 <main+0xa82>
  if ((empty_count < POWER_OFF) && (mess_count < POWER2_OFF)) {
     goto start;			// repeat measurement POWER_OFF times
  }
 #endif
  // only one Measurement requested, shut off
  wdt_disable();			//Watchdog off
    2840:	88 e1       	ldi	r24, 0x18	; 24
    2842:	0f b6       	in	r0, 0x3f	; 63
    2844:	f8 94       	cli
    2846:	80 93 60 00 	sts	0x0060, r24
    284a:	10 92 60 00 	sts	0x0060, r1
    284e:	0f be       	out	0x3f, r0	; 63
  ON_PORT &= ~(1<<ON_PIN);		//switch off power
    2850:	5e 98       	cbi	0x0b, 6	; 11
  ON_DDR = (1<<ON_PIN);			//switch to GND
    2852:	80 e4       	ldi	r24, 0x40	; 64
    2854:	8a b9       	out	0x0a, r24	; 10
  //never ending loop 
  while(1) {
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    2856:	4f 99       	sbic	0x09, 7	; 9
    2858:	fe cf       	rjmp	.-4      	; 0x2856 <main+0xac4>
    285a:	ea ca       	rjmp	.-2604   	; 0x1e30 <main+0x9e>
  }
#else
  goto start;	// POWER_OFF not selected, repeat measurement
#endif
  return 0;
}   // end main
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	df 91       	pop	r29
    2862:	cf 91       	pop	r28
    2864:	1f 91       	pop	r17
    2866:	0f 91       	pop	r16
    2868:	08 95       	ret

0000286a <uart_putc>:
    286a:	2f 93       	push	r18
    286c:	5f b7       	in	r21, 0x3f	; 63
    286e:	2f 93       	push	r18
    2870:	2a e0       	ldi	r18, 0x0A	; 10
    2872:	80 95       	com	r24
    2874:	08 94       	sec

00002876 <putchar0>:
    2876:	10 f4       	brcc	.+4      	; 0x287c <putchar1>
    2878:	43 98       	cbi	0x08, 3	; 8
    287a:	02 c0       	rjmp	.+4      	; 0x2880 <putchar2>

0000287c <putchar1>:
    287c:	43 9a       	sbi	0x08, 3	; 8
	...

00002880 <putchar2>:
    2880:	08 d0       	rcall	.+16     	; 0x2892 <UART_delay>
    2882:	07 d0       	rcall	.+14     	; 0x2892 <UART_delay>
    2884:	86 95       	lsr	r24
    2886:	2a 95       	dec	r18
    2888:	b1 f7       	brne	.-20     	; 0x2876 <putchar0>
    288a:	2f 91       	pop	r18
    288c:	5f bf       	out	0x3f, r21	; 63
    288e:	2f 91       	pop	r18
    2890:	08 95       	ret

00002892 <UART_delay>:
    2892:	5f 93       	push	r21
    2894:	5f b7       	in	r21, 0x3f	; 63
    2896:	5f 93       	push	r21
    2898:	00 00       	nop
    289a:	5e e3       	ldi	r21, 0x3E	; 62

0000289c <UART_delay1>:
    289c:	5a 95       	dec	r21
    289e:	f1 f7       	brne	.-4      	; 0x289c <UART_delay1>
    28a0:	00 00       	nop
    28a2:	5f 91       	pop	r21
    28a4:	5f bf       	out	0x3f, r21	; 63
    28a6:	5f 91       	pop	r21
    28a8:	08 95       	ret

000028aa <wait5s>:
    28aa:	03 d0       	rcall	.+6      	; 0x28b2 <wait1000ms>

000028ac <wait4s>:
    28ac:	02 d0       	rcall	.+4      	; 0x28b2 <wait1000ms>

000028ae <wait3s>:
    28ae:	01 d0       	rcall	.+2      	; 0x28b2 <wait1000ms>

000028b0 <wait2s>:
    28b0:	00 d0       	rcall	.+0      	; 0x28b2 <wait1000ms>

000028b2 <wait1000ms>:
    28b2:	00 d0       	rcall	.+0      	; 0x28b4 <wait500ms>

000028b4 <wait500ms>:
    28b4:	03 d0       	rcall	.+6      	; 0x28bc <wait100ms>

000028b6 <wait400ms>:
    28b6:	02 d0       	rcall	.+4      	; 0x28bc <wait100ms>

000028b8 <wait300ms>:
    28b8:	01 d0       	rcall	.+2      	; 0x28bc <wait100ms>

000028ba <wait200ms>:
    28ba:	00 d0       	rcall	.+0      	; 0x28bc <wait100ms>

000028bc <wait100ms>:
    28bc:	a8 95       	wdr
    28be:	00 d0       	rcall	.+0      	; 0x28c0 <wait50ms>

000028c0 <wait50ms>:
    28c0:	03 d0       	rcall	.+6      	; 0x28c8 <wait10ms>

000028c2 <wait40ms>:
    28c2:	02 d0       	rcall	.+4      	; 0x28c8 <wait10ms>

000028c4 <wait30ms>:
    28c4:	01 d0       	rcall	.+2      	; 0x28c8 <wait10ms>

000028c6 <wait20ms>:
    28c6:	00 d0       	rcall	.+0      	; 0x28c8 <wait10ms>

000028c8 <wait10ms>:
    28c8:	00 d0       	rcall	.+0      	; 0x28ca <wait5ms>

000028ca <wait5ms>:
    28ca:	03 d0       	rcall	.+6      	; 0x28d2 <wait1ms>

000028cc <wait4ms>:
    28cc:	02 d0       	rcall	.+4      	; 0x28d2 <wait1ms>

000028ce <wait3ms>:
    28ce:	01 d0       	rcall	.+2      	; 0x28d2 <wait1ms>

000028d0 <wait2ms>:
    28d0:	00 d0       	rcall	.+0      	; 0x28d2 <wait1ms>

000028d2 <wait1ms>:
    28d2:	00 d0       	rcall	.+0      	; 0x28d4 <wait500us>

000028d4 <wait500us>:
    28d4:	03 d0       	rcall	.+6      	; 0x28dc <wait100us>

000028d6 <wait400us>:
    28d6:	02 d0       	rcall	.+4      	; 0x28dc <wait100us>

000028d8 <wait300us>:
    28d8:	01 d0       	rcall	.+2      	; 0x28dc <wait100us>

000028da <wait200us>:
    28da:	00 d0       	rcall	.+0      	; 0x28dc <wait100us>

000028dc <wait100us>:
    28dc:	00 d0       	rcall	.+0      	; 0x28de <wait50us>

000028de <wait50us>:
    28de:	03 d0       	rcall	.+6      	; 0x28e6 <wait10us>

000028e0 <wait40us>:
    28e0:	02 d0       	rcall	.+4      	; 0x28e6 <wait10us>

000028e2 <wait30us>:
    28e2:	01 d0       	rcall	.+2      	; 0x28e6 <wait10us>

000028e4 <wait20us>:
    28e4:	00 d0       	rcall	.+0      	; 0x28e6 <wait10us>

000028e6 <wait10us>:
    28e6:	00 d0       	rcall	.+0      	; 0x28e8 <wait5us>

000028e8 <wait5us>:
    28e8:	03 d0       	rcall	.+6      	; 0x28f0 <wait1us>

000028ea <wait4us>:
    28ea:	02 d0       	rcall	.+4      	; 0x28f0 <wait1us>

000028ec <wait3us>:
    28ec:	01 d0       	rcall	.+2      	; 0x28f0 <wait1us>

000028ee <wait2us>:
    28ee:	00 d0       	rcall	.+0      	; 0x28f0 <wait1us>

000028f0 <wait1us>:
    28f0:	00 00       	nop
    28f2:	08 95       	ret

000028f4 <getRLmultip>:
  R_DDR = 0;			// switch all resistor ports to input
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
  return;
 } // end ReadCapacity()

unsigned int getRLmultip(unsigned int cvolt) {
    28f4:	ff 92       	push	r15
    28f6:	0f 93       	push	r16
    28f8:	1f 93       	push	r17
    28fa:	cf 93       	push	r28
    28fc:	df 93       	push	r29

  unsigned int uvolt;
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;
  if (cvolt >= RL_Tab_Beginn) {
    28fe:	21 e0       	ldi	r18, 0x01	; 1
    2900:	8c 32       	cpi	r24, 0x2C	; 44
    2902:	92 07       	cpc	r25, r18
    2904:	18 f0       	brcs	.+6      	; 0x290c <getRLmultip+0x18>
     uvolt = cvolt - RL_Tab_Beginn;
    2906:	8c 52       	subi	r24, 0x2C	; 44
    2908:	91 40       	sbci	r25, 0x01	; 1
    290a:	02 c0       	rjmp	.+4      	; 0x2910 <getRLmultip+0x1c>
  } else {
     uvolt = 0;			// limit to begin of table
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = uvolt / RL_Tab_Abstand;
    2910:	69 e1       	ldi	r22, 0x19	; 25
    2912:	70 e0       	ldi	r23, 0x00	; 0
    2914:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__udivmodhi4>
  tabres = uvolt % RL_Tab_Abstand;
    2918:	f8 2e       	mov	r15, r24
  tabres = RL_Tab_Abstand - tabres;
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
    291a:	6d 32       	cpi	r22, 0x2D	; 45
    291c:	08 f0       	brcs	.+2      	; 0x2920 <getRLmultip+0x2c>
    291e:	6c e2       	ldi	r22, 0x2C	; 44
    2920:	c6 2f       	mov	r28, r22
    2922:	d0 e0       	ldi	r29, 0x00	; 0
    2924:	ce 01       	movw	r24, r28
    2926:	88 0f       	add	r24, r24
    2928:	99 1f       	adc	r25, r25
    292a:	80 50       	subi	r24, 0x00	; 0
    292c:	90 40       	sbci	r25, 0x00	; 0
    292e:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <__eerd_word_m328p>
    2932:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RLtab[tabind+1]);
    2934:	ce 01       	movw	r24, r28
    2936:	88 0f       	add	r24, r24
    2938:	99 1f       	adc	r25, r25
    293a:	8e 5f       	subi	r24, 0xFE	; 254
    293c:	9f 4f       	sbci	r25, 0xFF	; 255
    293e:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <__eerd_word_m328p>
    2942:	9c 01       	movw	r18, r24
  } else {
     uvolt = 0;			// limit to begin of table
  }
  tabind = uvolt / RL_Tab_Abstand;
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
    2944:	49 e1       	ldi	r20, 0x19	; 25
    2946:	4f 19       	sub	r20, r15
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
    2948:	50 e0       	ldi	r21, 0x00	; 0
    294a:	08 1b       	sub	r16, r24
    294c:	19 0b       	sbc	r17, r25
    294e:	40 9f       	mul	r20, r16
    2950:	c0 01       	movw	r24, r0
    2952:	41 9f       	mul	r20, r17
    2954:	90 0d       	add	r25, r0
    2956:	50 9f       	mul	r21, r16
    2958:	90 0d       	add	r25, r0
    295a:	11 24       	eor	r1, r1
    295c:	0c 96       	adiw	r24, 0x0c	; 12
    295e:	69 e1       	ldi	r22, 0x19	; 25
    2960:	70 e0       	ldi	r23, 0x00	; 0
    2962:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__udivmodhi4>
    2966:	62 0f       	add	r22, r18
    2968:	73 1f       	adc	r23, r19
}
    296a:	cb 01       	movw	r24, r22
    296c:	df 91       	pop	r29
    296e:	cf 91       	pop	r28
    2970:	1f 91       	pop	r17
    2972:	0f 91       	pop	r16
    2974:	ff 90       	pop	r15
    2976:	08 95       	ret

00002978 <Scale_C_with_vcc>:

void Scale_C_with_vcc(void) {
    2978:	8f 92       	push	r8
    297a:	9f 92       	push	r9
    297c:	af 92       	push	r10
    297e:	bf 92       	push	r11
    2980:	df 92       	push	r13
    2982:	ef 92       	push	r14
    2984:	ff 92       	push	r15
    2986:	0f 93       	push	r16
    2988:	1f 93       	push	r17
    298a:	e0 90 58 01 	lds	r14, 0x0158
    298e:	f0 90 59 01 	lds	r15, 0x0159
    2992:	00 91 5a 01 	lds	r16, 0x015A
    2996:	10 91 5b 01 	lds	r17, 0x015B
    299a:	d0 90 68 01 	lds	r13, 0x0168
   while (cap.cval > 100000) {
      cap.cval /= 10;
    299e:	4a e0       	ldi	r20, 0x0A	; 10
    29a0:	84 2e       	mov	r8, r20
    29a2:	91 2c       	mov	r9, r1
    29a4:	a1 2c       	mov	r10, r1
    29a6:	b1 2c       	mov	r11, r1
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    29a8:	08 c0       	rjmp	.+16     	; 0x29ba <Scale_C_with_vcc+0x42>
      cap.cval /= 10;
    29aa:	c8 01       	movw	r24, r16
    29ac:	b7 01       	movw	r22, r14
    29ae:	a5 01       	movw	r20, r10
    29b0:	94 01       	movw	r18, r8
    29b2:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
    29b6:	79 01       	movw	r14, r18
    29b8:	8a 01       	movw	r16, r20
    29ba:	8d 2d       	mov	r24, r13
    29bc:	d3 94       	inc	r13
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    29be:	91 ea       	ldi	r25, 0xA1	; 161
    29c0:	e9 16       	cp	r14, r25
    29c2:	96 e8       	ldi	r25, 0x86	; 134
    29c4:	f9 06       	cpc	r15, r25
    29c6:	91 e0       	ldi	r25, 0x01	; 1
    29c8:	09 07       	cpc	r16, r25
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	19 07       	cpc	r17, r25
    29ce:	68 f7       	brcc	.-38     	; 0x29aa <Scale_C_with_vcc+0x32>
    29d0:	80 93 68 01 	sts	0x0168, r24
      cap.cval /= 10;
      cap.cpre ++;			// prevent overflow
   }
   cap.cval *= ADCconfig.U_AVCC;	// scale with measured voltage
    29d4:	20 91 3d 01 	lds	r18, 0x013D
    29d8:	30 91 3e 01 	lds	r19, 0x013E
    29dc:	40 e0       	ldi	r20, 0x00	; 0
    29de:	50 e0       	ldi	r21, 0x00	; 0
    29e0:	c8 01       	movw	r24, r16
    29e2:	b7 01       	movw	r22, r14
    29e4:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
    29e8:	28 e8       	ldi	r18, 0x88	; 136
    29ea:	33 e1       	ldi	r19, 0x13	; 19
    29ec:	40 e0       	ldi	r20, 0x00	; 0
    29ee:	50 e0       	ldi	r21, 0x00	; 0
    29f0:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
    29f4:	20 93 58 01 	sts	0x0158, r18
    29f8:	30 93 59 01 	sts	0x0159, r19
    29fc:	40 93 5a 01 	sts	0x015A, r20
    2a00:	50 93 5b 01 	sts	0x015B, r21
}
    2a04:	1f 91       	pop	r17
    2a06:	0f 91       	pop	r16
    2a08:	ff 90       	pop	r15
    2a0a:	ef 90       	pop	r14
    2a0c:	df 90       	pop	r13
    2a0e:	bf 90       	pop	r11
    2a10:	af 90       	pop	r10
    2a12:	9f 90       	pop	r9
    2a14:	8f 90       	pop	r8
    2a16:	08 95       	ret

00002a18 <ReadCapacity>:
#include "config.h"
#include "Transistortester.h"


//=================================================================
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    2a18:	af 92       	push	r10
    2a1a:	bf 92       	push	r11
    2a1c:	cf 92       	push	r12
    2a1e:	df 92       	push	r13
    2a20:	ef 92       	push	r14
    2a22:	ff 92       	push	r15
    2a24:	0f 93       	push	r16
    2a26:	1f 93       	push	r17
    2a28:	cf 93       	push	r28
    2a2a:	df 93       	push	r29
    2a2c:	18 2f       	mov	r17, r24
    2a2e:	06 2f       	mov	r16, r22
  uint8_t HiPinR_L, HiPinR_H;
  uint8_t LoADC;
  uint8_t ii;

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
    2a30:	88 0f       	add	r24, r24
    2a32:	81 0f       	add	r24, r17
    2a34:	86 0f       	add	r24, r22
    2a36:	81 50       	subi	r24, 0x01	; 1
    2a38:	80 93 45 01 	sts	0x0145, r24
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2a3c:	86 2f       	mov	r24, r22
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	89 5a       	subi	r24, 0xA9	; 169
    2a42:	9d 4f       	sbci	r25, 0xFD	; 253
    2a44:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__eerd_byte_m328p>
    2a48:	b8 2e       	mov	r11, r24
  HiPinR_L = MEM_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
    2a4a:	21 2f       	mov	r18, r17
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	c9 01       	movw	r24, r18
    2a50:	8c 5a       	subi	r24, 0xAC	; 172
    2a52:	9d 4f       	sbci	r25, 0xFD	; 253
    2a54:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__eerd_byte_m328p>
    2a58:	a8 2e       	mov	r10, r24
//     DisplayValue(cap.cval,cap.cpre,'F',3);
//     wait2s();
//#endif
//     return;	//We have found a capacitor already
//  }
  if(PartFound == PART_RESISTOR) {
    2a5a:	80 91 07 01 	lds	r24, 0x0107
    2a5e:	86 30       	cpi	r24, 0x06	; 6
    2a60:	09 f4       	brne	.+2      	; 0x2a64 <ReadCapacity+0x4c>
    2a62:	3a c2       	rjmp	.+1140   	; 0x2ed8 <ReadCapacity+0x4c0>
     lcd_data('R');
     wait2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    2a64:	90 91 05 01 	lds	r25, 0x0105
    2a68:	ec e6       	ldi	r30, 0x6C	; 108
    2a6a:	f1 e0       	ldi	r31, 0x01	; 1
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	0f c0       	rjmp	.+30     	; 0x2a8e <ReadCapacity+0x76>
     if ((diodes[ii].Cathode == LowPin) && (diodes[ii].Anode == HighPin) && (diodes[ii].Voltage < 1500)) {
    2a70:	21 81       	ldd	r18, Z+1	; 0x01
    2a72:	20 17       	cp	r18, r16
    2a74:	51 f4       	brne	.+20     	; 0x2a8a <ReadCapacity+0x72>
    2a76:	20 81       	ld	r18, Z
    2a78:	21 17       	cp	r18, r17
    2a7a:	39 f4       	brne	.+14     	; 0x2a8a <ReadCapacity+0x72>
    2a7c:	22 81       	ldd	r18, Z+2	; 0x02
    2a7e:	33 81       	ldd	r19, Z+3	; 0x03
    2a80:	45 e0       	ldi	r20, 0x05	; 5
    2a82:	2c 3d       	cpi	r18, 0xDC	; 220
    2a84:	34 07       	cpc	r19, r20
    2a86:	08 f4       	brcc	.+2      	; 0x2a8a <ReadCapacity+0x72>
    2a88:	27 c2       	rjmp	.+1102   	; 0x2ed8 <ReadCapacity+0x4c0>
     lcd_data('R');
     wait2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    2a8a:	8f 5f       	subi	r24, 0xFF	; 255
    2a8c:	34 96       	adiw	r30, 0x04	; 4
    2a8e:	89 17       	cp	r24, r25
    2a90:	78 f3       	brcs	.-34     	; 0x2a70 <ReadCapacity+0x58>

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2a92:	88 e0       	ldi	r24, 0x08	; 8
    2a94:	b8 2a       	or	r11, r24
        return;
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
    2a96:	10 92 65 01 	sts	0x0165, r1
    2a9a:	10 92 64 01 	sts	0x0164, r1
#endif
  cap.cval = 0;				// set capacity value to zero
    2a9e:	10 92 58 01 	sts	0x0158, r1
    2aa2:	10 92 59 01 	sts	0x0159, r1
    2aa6:	10 92 5a 01 	sts	0x015A, r1
    2aaa:	10 92 5b 01 	sts	0x015B, r1
  cap.cpre = -12;			//default unit is pF
    2aae:	84 ef       	ldi	r24, 0xF4	; 244
    2ab0:	80 93 68 01 	sts	0x0168, r24
  EntladePins();			// discharge capacitor
    2ab4:	0e 94 17 08 	call	0x102e	; 0x102e <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    2ab8:	88 e0       	ldi	r24, 0x08	; 8
    2aba:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    2abc:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    2abe:	b7 b8       	out	0x07, r11	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    2ac0:	a4 b8       	out	0x04, r10	; 4
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    2ac2:	81 2f       	mov	r24, r17
    2ac4:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
    2ac8:	6c 01       	movw	r12, r24
// ******** should adcv[0] be measured without current???
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2aca:	c0 e0       	ldi	r28, 0x00	; 0
    2acc:	d0 e0       	ldi	r29, 0x00	; 0
     ChargePin10ms(HiPinR_L,1);		//HighPin with R_L 10ms to VCC ,then currentless
    2ace:	8a 2d       	mov	r24, r10
    2ad0:	61 e0       	ldi	r22, 0x01	; 1
    2ad2:	0e 94 3e 01 	call	0x27c	; 0x27c <ChargePin10ms>
     wait500us();			//wait a little time
    2ad6:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <wait500us>
     wdt_reset();
    2ada:	a8 95       	wdr
     // read voltage without current, is already charged enough?
     adcv[2] = ReadADC(HighPin);
    2adc:	81 2f       	mov	r24, r17
    2ade:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
    2ae2:	7c 01       	movw	r14, r24
     if (adcv[2] > adcv[0]) {
    2ae4:	c8 16       	cp	r12, r24
    2ae6:	d9 06       	cpc	r13, r25
    2ae8:	18 f4       	brcc	.+6      	; 0x2af0 <ReadCapacity+0xd8>
        adcv[2] -= adcv[0];		//difference to beginning voltage
    2aea:	ec 18       	sub	r14, r12
    2aec:	fd 08       	sbc	r15, r13
    2aee:	02 c0       	rjmp	.+4      	; 0x2af4 <ReadCapacity+0xdc>
     } else {
        adcv[2] = 0;			// voltage is lower or same as beginning voltage
    2af0:	ee 24       	eor	r14, r14
    2af2:	ff 24       	eor	r15, r15
     }
     if ((ovcnt16 == 126) && (adcv[2] < 75)) {
    2af4:	ce 37       	cpi	r28, 0x7E	; 126
    2af6:	d1 05       	cpc	r29, r1
    2af8:	29 f4       	brne	.+10     	; 0x2b04 <ReadCapacity+0xec>
    2afa:	9b e4       	ldi	r25, 0x4B	; 75
    2afc:	e9 16       	cp	r14, r25
    2afe:	f1 04       	cpc	r15, r1
    2b00:	08 f4       	brcc	.+2      	; 0x2b04 <ReadCapacity+0xec>
    2b02:	e5 c1       	rjmp	.+970    	; 0x2ece <ReadCapacity+0x4b6>
        // 300mV can not be reached well-timed 
        break;		// don't try to load any more
     }
     if (adcv[2] > 300) {
    2b04:	2d e2       	ldi	r18, 0x2D	; 45
    2b06:	e2 16       	cp	r14, r18
    2b08:	21 e0       	ldi	r18, 0x01	; 1
    2b0a:	f2 06       	cpc	r15, r18
    2b0c:	18 f0       	brcs	.+6      	; 0x2b14 <ReadCapacity+0xfc>
#if DebugOut == 10
  DisplayValue(ovcnt16,0,' ',4);
  DisplayValue(adcv[2],-3,'V',4);
#endif
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    2b0e:	20 97       	sbiw	r28, 0x00	; 0
    2b10:	39 f0       	breq	.+14     	; 0x2b20 <ReadCapacity+0x108>
    2b12:	0c c0       	rjmp	.+24     	; 0x2b2c <ReadCapacity+0x114>
  R_PORT = 0;				// switch R-Port to GND
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2b14:	21 96       	adiw	r28, 0x01	; 1
    2b16:	31 e0       	ldi	r19, 0x01	; 1
    2b18:	c4 3f       	cpi	r28, 0xF4	; 244
    2b1a:	d3 07       	cpc	r29, r19
    2b1c:	c1 f6       	brne	.-80     	; 0x2ace <ReadCapacity+0xb6>
    2b1e:	d7 c1       	rjmp	.+942    	; 0x2ece <ReadCapacity+0x4b6>
#if DebugOut == 10
  DisplayValue(ovcnt16,0,' ',4);
  DisplayValue(adcv[2],-3,'V',4);
#endif
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    2b20:	45 e1       	ldi	r20, 0x15	; 21
    2b22:	e4 16       	cp	r14, r20
    2b24:	45 e0       	ldi	r20, 0x05	; 5
    2b26:	f4 06       	cpc	r15, r20
    2b28:	08 f0       	brcs	.+2      	; 0x2b2c <ReadCapacity+0x114>
    2b2a:	6d c0       	rjmp	.+218    	; 0x2c06 <ReadCapacity+0x1ee>
     goto messe_mit_rh;		// Voltage of more than 1300mV is reached in one pulse, to fast loaded
  }
  // Capacity is more than about 50µF
  cap.cpre = -9;		// switch units to nF 
    2b2c:	87 ef       	ldi	r24, 0xF7	; 247
    2b2e:	80 93 68 01 	sts	0x0168, r24
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the same time which is required for loading
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2b32:	aa 24       	eor	r10, r10
    2b34:	bb 24       	eor	r11, r11
     wait5ms();
    2b36:	0e 94 65 14 	call	0x28ca	; 0x28ca <wait5ms>
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
    2b3a:	81 2f       	mov	r24, r17
    2b3c:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
     wdt_reset();
    2b40:	a8 95       	wdr
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the same time which is required for loading
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2b42:	08 94       	sec
    2b44:	a1 1c       	adc	r10, r1
    2b46:	b1 1c       	adc	r11, r1
    2b48:	ca 15       	cp	r28, r10
    2b4a:	db 05       	cpc	r29, r11
    2b4c:	a0 f7       	brcc	.-24     	; 0x2b36 <ReadCapacity+0x11e>
     wait5ms();
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
    2b4e:	c8 16       	cp	r12, r24
    2b50:	d9 06       	cpc	r13, r25
    2b52:	30 f4       	brcc	.+12     	; 0x2b60 <ReadCapacity+0x148>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    2b54:	8c 19       	sub	r24, r12
    2b56:	9d 09       	sbc	r25, r13
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    2b58:	8e 15       	cp	r24, r14
    2b5a:	9f 05       	cpc	r25, r15
    2b5c:	60 f4       	brcc	.+24     	; 0x2b76 <ReadCapacity+0x15e>
    2b5e:	02 c0       	rjmp	.+4      	; 0x2b64 <ReadCapacity+0x14c>
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
    2b64:	97 01       	movw	r18, r14
    2b66:	28 1b       	sub	r18, r24
    2b68:	39 0b       	sbc	r19, r25
    2b6a:	c9 01       	movw	r24, r18
  } else {
     adcv[3] = 0;			// no lost voltage
  }
  if (adcv[3] > 100) {
    2b6c:	25 36       	cpi	r18, 0x65	; 101
    2b6e:	31 05       	cpc	r19, r1
    2b70:	08 f0       	brcs	.+2      	; 0x2b74 <ReadCapacity+0x15c>
    2b72:	ad c1       	rjmp	.+858    	; 0x2ece <ReadCapacity+0x4b6>
    2b74:	02 c0       	rjmp	.+4      	; 0x2b7a <ReadCapacity+0x162>
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
  } else {
     adcv[3] = 0;			// no lost voltage
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	90 e0       	ldi	r25, 0x00	; 0
     lcd_space();
     wait1s();
 #endif
     goto keinC;			// capacitor does not keep the voltage about 5ms
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
    2b7a:	21 96       	adiw	r28, 0x01	; 1
    2b7c:	5e 01       	movw	r10, r28
    2b7e:	cc 24       	eor	r12, r12
    2b80:	dd 24       	eor	r13, r13
    2b82:	a0 92 60 01 	sts	0x0160, r10
    2b86:	b0 92 61 01 	sts	0x0161, r11
    2b8a:	c0 92 62 01 	sts	0x0162, r12
    2b8e:	d0 92 63 01 	sts	0x0163, r13
  // compute factor with load voltage + lost voltage during the voltage load time
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]+adcv[3]);	// get factor to convert time to capacity from table
    2b92:	8e 0d       	add	r24, r14
    2b94:	9f 1d       	adc	r25, r15
    2b96:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <getRLmultip>
    2b9a:	bc 01       	movw	r22, r24
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	a6 01       	movw	r20, r12
    2ba2:	95 01       	movw	r18, r10
    2ba4:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
    2ba8:	60 93 60 01 	sts	0x0160, r22
    2bac:	70 93 61 01 	sts	0x0161, r23
    2bb0:	80 93 62 01 	sts	0x0162, r24
    2bb4:	90 93 63 01 	sts	0x0163, r25
#endif
   cap.cval = cap.cval_uncorrected.dw;	// set result to uncorrected
    2bb8:	60 93 58 01 	sts	0x0158, r22
    2bbc:	70 93 59 01 	sts	0x0159, r23
    2bc0:	80 93 5a 01 	sts	0x015A, r24
    2bc4:	90 93 5b 01 	sts	0x015B, r25
   Scale_C_with_vcc();
    2bc8:	0e 94 bc 14 	call	0x2978	; 0x2978 <Scale_C_with_vcc>
   // cap.cval for this type is at least 40000nF, so the last digit will be never shown
   cap.cval *= (1000 - C_H_KORR);	// correct with C_H_KORR with 0.1% resolution, but prevent overflow
    2bcc:	60 91 58 01 	lds	r22, 0x0158
    2bd0:	70 91 59 01 	lds	r23, 0x0159
    2bd4:	80 91 5a 01 	lds	r24, 0x015A
    2bd8:	90 91 5b 01 	lds	r25, 0x015B
    2bdc:	28 ee       	ldi	r18, 0xE8	; 232
    2bde:	33 e0       	ldi	r19, 0x03	; 3
    2be0:	40 e0       	ldi	r20, 0x00	; 0
    2be2:	50 e0       	ldi	r21, 0x00	; 0
    2be4:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
   cap.cval /= 100;
    2be8:	24 e6       	ldi	r18, 0x64	; 100
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	40 e0       	ldi	r20, 0x00	; 0
    2bee:	50 e0       	ldi	r21, 0x00	; 0
    2bf0:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
    2bf4:	20 93 58 01 	sts	0x0158, r18
    2bf8:	30 93 59 01 	sts	0x0159, r19
    2bfc:	40 93 5a 01 	sts	0x015A, r20
    2c00:	50 93 5b 01 	sts	0x015B, r21
   DisplayValue(cap.cval,cap.cpre,'F',4);
   lcd_space();
   lcd_string(utoa(ovcnt16,outval,10));
   wait3s();
#endif
   goto checkDiodes;
    2c04:	27 c1       	rjmp	.+590    	; 0x2e54 <ReadCapacity+0x43c>
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
  HiPinR_L = MEM_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load
    2c06:	ea 2c       	mov	r14, r10
    2c08:	ee 0c       	add	r14, r14

//==================================================================================
// Measurement of little capacity values
messe_mit_rh:
  //little capacity value, about  < 50 µF
  EntladePins();			// discharge capacitor
    2c0a:	0e 94 17 08 	call	0x102e	; 0x102e <EntladePins>
  //measure with the R_H (470kOhm) resistor 
  R_PORT = 0;		// R_DDR ist HiPinR_L
    2c0e:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = (1<<TP1) | (1<<TP2) | (1<<TP3) | (1<<TxD);	//switch all Pins to output
    2c10:	8f e0       	ldi	r24, 0x0F	; 15
    2c12:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		//switch all ADC Pins to GND
    2c14:	88 e0       	ldi	r24, 0x08	; 8
    2c16:	88 b9       	out	0x08, r24	; 8
  R_DDR = HiPinR_H;   		// switch R_H resistor port for HighPin to output (GND)
    2c18:	e4 b8       	out	0x04, r14	; 4
// setup Analog Comparator
  ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    2c1a:	80 e4       	ldi	r24, 0x40	; 64
    2c1c:	80 93 7b 00 	sts	0x007B, r24
  ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    2c20:	84 e5       	ldi	r24, 0x54	; 84
    2c22:	80 bf       	out	0x30, r24	; 48
  ADMUX = (1<<REFS0) | HighPin;			// switch Mux to High-Pin
    2c24:	81 2f       	mov	r24, r17
    2c26:	80 64       	ori	r24, 0x40	; 64
    2c28:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    2c2c:	86 e1       	ldi	r24, 0x16	; 22
    2c2e:	80 93 7a 00 	sts	0x007A, r24
  wait200us();			//wait for bandgap to start up
    2c32:	0e 94 6d 14 	call	0x28da	; 0x28da <wait200us>

  ovcnt16 = 0;
// setup Counter1
  TCCR1A = 0;			// set Counter1 to normal Mode
    2c36:	10 92 80 00 	sts	0x0080, r1
  TCNT1 = 0;			//set Counter to 0
    2c3a:	10 92 85 00 	sts	0x0085, r1
    2c3e:	10 92 84 00 	sts	0x0084, r1
  TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// mega88
    2c42:	87 e2       	ldi	r24, 0x27	; 39
    2c44:	86 bb       	out	0x16, r24	; 22
  R_PORT = HiPinR_H;           	// switch R_H resistor port for HighPin to VCC
    2c46:	e5 b8       	out	0x05, r14	; 5
  if(PartFound == PART_FET) {
    2c48:	80 91 07 01 	lds	r24, 0x0107
    2c4c:	83 30       	cpi	r24, 0x03	; 3
    2c4e:	79 f4       	brne	.+30     	; 0x2c6e <ReadCapacity+0x256>
     // charge capacitor with R_H resistor
     TCCR1B = (1<<CS10);	//Start counter 1MHz or 8MHz
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = (((1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK) & ~(1<<HighPin));	// release only HighPin ADC port
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	01 2e       	mov	r0, r17
    2c5c:	02 c0       	rjmp	.+4      	; 0x2c62 <ReadCapacity+0x24a>
    2c5e:	88 0f       	add	r24, r24
    2c60:	99 1f       	adc	r25, r25
    2c62:	0a 94       	dec	r0
    2c64:	e2 f7       	brpl	.-8      	; 0x2c5e <ReadCapacity+0x246>
    2c66:	80 95       	com	r24
    2c68:	8f 70       	andi	r24, 0x0F	; 15
    2c6a:	87 b9       	out	0x07, r24	; 7
    2c6c:	04 c0       	rjmp	.+8      	; 0x2c76 <ReadCapacity+0x25e>
  } else {
     TCCR1B =  (1<<CS10);	//start counter 1MHz or 8MHz
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
    2c74:	b7 b8       	out	0x07, r11	; 7
     ii = TI1_INT_FLAGS;	//read Timer flags
     if (ii & (1<<ICF1))  {
        break;
     }
     if((ii & (1<<TOV1))) {	// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
        TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    2c76:	81 e0       	ldi	r24, 0x01	; 1
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
  }
//******************************
  while(1) {
     // Wait, until  Input Capture is set
     ii = TI1_INT_FLAGS;	//read Timer flags
    2c78:	26 b3       	in	r18, 0x16	; 22
     if (ii & (1<<ICF1))  {
    2c7a:	25 fd       	sbrc	r18, 5
    2c7c:	09 c0       	rjmp	.+18     	; 0x2c90 <ReadCapacity+0x278>
        break;
     }
     if((ii & (1<<TOV1))) {	// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    2c7e:	20 ff       	sbrs	r18, 0
    2c80:	fb cf       	rjmp	.-10     	; 0x2c78 <ReadCapacity+0x260>
        TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    2c82:	86 bb       	out	0x16, r24	; 22
        wdt_reset();
    2c84:	a8 95       	wdr
        ovcnt16++;
    2c86:	21 96       	adiw	r28, 0x01	; 1
        if(ovcnt16 == (F_CPU/5000)) {
    2c88:	36 e0       	ldi	r19, 0x06	; 6
    2c8a:	c0 34       	cpi	r28, 0x40	; 64
    2c8c:	d3 07       	cpc	r29, r19
    2c8e:	a1 f7       	brne	.-24     	; 0x2c78 <ReadCapacity+0x260>
           break; 		//Timeout for Charging, above 12 s
        }
     }
  }
  TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    2c90:	10 92 81 00 	sts	0x0081, r1
  TI1_INT_FLAGS = (1<<ICF1);		// Reset Input Capture
    2c94:	80 e2       	ldi	r24, 0x20	; 32
    2c96:	86 bb       	out	0x16, r24	; 22
  tmpint = ICR1;		// get previous Input Capture Counter flag
    2c98:	e0 90 86 00 	lds	r14, 0x0086
    2c9c:	f0 90 87 00 	lds	r15, 0x0087
// check actual counter, if an additional overflow must be added
  if((TCNT1 > tmpint) && (ii & (1<<TOV1))) {
    2ca0:	80 91 84 00 	lds	r24, 0x0084
    2ca4:	90 91 85 00 	lds	r25, 0x0085
    2ca8:	e8 16       	cp	r14, r24
    2caa:	f9 06       	cpc	r15, r25
    2cac:	28 f4       	brcc	.+10     	; 0x2cb8 <ReadCapacity+0x2a0>
    2cae:	20 ff       	sbrs	r18, 0
    2cb0:	03 c0       	rjmp	.+6      	; 0x2cb8 <ReadCapacity+0x2a0>
     // this OV was not counted, but was before the Input Capture
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	86 bb       	out	0x16, r24	; 22
     ovcnt16++;
    2cb6:	21 96       	adiw	r28, 0x01	; 1
  }
//############################################################
  ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    2cb8:	86 e9       	ldi	r24, 0x96	; 150
    2cba:	80 93 7a 00 	sts	0x007A, r24
  R_DDR = 0;			// switch R_H resistor port for input
    2cbe:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// switch R_H resistor port pull up for HighPin off
    2cc0:	15 b8       	out	0x05, r1	; 5
  load_diff = ReadADC(HighPin) + REF_C_KORR - ref_mv;	// build difference of capacitor voltage to Reference Voltage
    2cc2:	81 2f       	mov	r24, r17
    2cc4:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
    2cc8:	20 91 3f 01 	lds	r18, 0x013F
    2ccc:	30 91 40 01 	lds	r19, 0x0140
    2cd0:	82 1b       	sub	r24, r18
    2cd2:	93 0b       	sbc	r25, r19
    2cd4:	0c 96       	adiw	r24, 0x0c	; 12
    2cd6:	90 93 6b 01 	sts	0x016B, r25
    2cda:	80 93 6a 01 	sts	0x016A, r24
//############################################################
  if (ovcnt16 >= (F_CPU/10000)) {
    2cde:	43 e0       	ldi	r20, 0x03	; 3
    2ce0:	c0 32       	cpi	r28, 0x20	; 32
    2ce2:	d4 07       	cpc	r29, r20
    2ce4:	08 f0       	brcs	.+2      	; 0x2ce8 <ReadCapacity+0x2d0>
    2ce6:	f3 c0       	rjmp	.+486    	; 0x2ece <ReadCapacity+0x4b6>
     goto keinC;	// no normal end
  }
//  cap.cval_uncorrected = CombineII2Long(ovcnt16, tmpint);
  cap.cval_uncorrected.w[1] = ovcnt16;
    2ce8:	d0 93 63 01 	sts	0x0163, r29
    2cec:	c0 93 62 01 	sts	0x0162, r28
  cap.cval_uncorrected.w[0] = tmpint;
    2cf0:	f0 92 61 01 	sts	0x0161, r15
    2cf4:	e0 92 60 01 	sts	0x0160, r14

  cap.cpre = -12;			// cap.cval unit is pF 
    2cf8:	84 ef       	ldi	r24, 0xF4	; 244
    2cfa:	80 93 68 01 	sts	0x0168, r24
  if (ovcnt16 > 65) {
    2cfe:	c2 34       	cpi	r28, 0x42	; 66
    2d00:	d1 05       	cpc	r29, r1
    2d02:	c8 f0       	brcs	.+50     	; 0x2d36 <ReadCapacity+0x31e>
     cap.cval_uncorrected.dw /= 100;	// switch to next unit
    2d04:	60 91 60 01 	lds	r22, 0x0160
    2d08:	70 91 61 01 	lds	r23, 0x0161
    2d0c:	80 91 62 01 	lds	r24, 0x0162
    2d10:	90 91 63 01 	lds	r25, 0x0163
    2d14:	24 e6       	ldi	r18, 0x64	; 100
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	40 e0       	ldi	r20, 0x00	; 0
    2d1a:	50 e0       	ldi	r21, 0x00	; 0
    2d1c:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
    2d20:	20 93 60 01 	sts	0x0160, r18
    2d24:	30 93 61 01 	sts	0x0161, r19
    2d28:	40 93 62 01 	sts	0x0162, r20
    2d2c:	50 93 63 01 	sts	0x0163, r21
     cap.cpre += 2;			// set unit, prevent overflow
    2d30:	86 ef       	ldi	r24, 0xF6	; 246
    2d32:	80 93 68 01 	sts	0x0168, r24
  }
  cap.cval_uncorrected.dw *= RHmultip;		// 708
    2d36:	60 91 00 01 	lds	r22, 0x0100
    2d3a:	70 91 01 01 	lds	r23, 0x0101
    2d3e:	80 e0       	ldi	r24, 0x00	; 0
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	20 91 60 01 	lds	r18, 0x0160
    2d46:	30 91 61 01 	lds	r19, 0x0161
    2d4a:	40 91 62 01 	lds	r20, 0x0162
    2d4e:	50 91 63 01 	lds	r21, 0x0163
    2d52:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
  cap.cval_uncorrected.dw /= (F_CPU / 10000);	// divide by 100 (@ 1MHz clock), 800 (@ 8MHz clock)
    2d56:	20 e2       	ldi	r18, 0x20	; 32
    2d58:	33 e0       	ldi	r19, 0x03	; 3
    2d5a:	40 e0       	ldi	r20, 0x00	; 0
    2d5c:	50 e0       	ldi	r21, 0x00	; 0
    2d5e:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
    2d62:	20 93 60 01 	sts	0x0160, r18
    2d66:	30 93 61 01 	sts	0x0161, r19
    2d6a:	40 93 62 01 	sts	0x0162, r20
    2d6e:	50 93 63 01 	sts	0x0163, r21
  cap.cval = cap.cval_uncorrected.dw;		// set the corrected cap.cval
    2d72:	e8 e5       	ldi	r30, 0x58	; 88
    2d74:	f1 e0       	ldi	r31, 0x01	; 1
    2d76:	20 93 58 01 	sts	0x0158, r18
    2d7a:	31 83       	std	Z+1, r19	; 0x01
    2d7c:	42 83       	std	Z+2, r20	; 0x02
    2d7e:	53 83       	std	Z+3, r21	; 0x03
  Scale_C_with_vcc();
    2d80:	0e 94 bc 14 	call	0x2978	; 0x2978 <Scale_C_with_vcc>
  if (cap.cpre == -12) {
    2d84:	80 91 68 01 	lds	r24, 0x0168
    2d88:	84 3f       	cpi	r24, 0xF4	; 244
    2d8a:	09 f0       	breq	.+2      	; 0x2d8e <ReadCapacity+0x376>
    2d8c:	55 c0       	rjmp	.+170    	; 0x2e38 <ReadCapacity+0x420>
#if COMP_SLEW1 > COMP_SLEW2
     if (cap.cval < COMP_SLEW1) {
    2d8e:	c0 90 58 01 	lds	r12, 0x0158
    2d92:	d0 90 59 01 	lds	r13, 0x0159
    2d96:	e0 90 5a 01 	lds	r14, 0x015A
    2d9a:	f0 90 5b 01 	lds	r15, 0x015B
    2d9e:	80 ea       	ldi	r24, 0xA0	; 160
    2da0:	c8 16       	cp	r12, r24
    2da2:	8f e0       	ldi	r24, 0x0F	; 15
    2da4:	d8 06       	cpc	r13, r24
    2da6:	80 e0       	ldi	r24, 0x00	; 0
    2da8:	e8 06       	cpc	r14, r24
    2daa:	80 e0       	ldi	r24, 0x00	; 0
    2dac:	f8 06       	cpc	r15, r24
    2dae:	c0 f4       	brcc	.+48     	; 0x2de0 <ReadCapacity+0x3c8>
        // add slew rate dependent offset
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
    2db0:	a7 01       	movw	r20, r14
    2db2:	96 01       	movw	r18, r12
    2db4:	2c 54       	subi	r18, 0x4C	; 76
    2db6:	3f 4f       	sbci	r19, 0xFF	; 255
    2db8:	4f 4f       	sbci	r20, 0xFF	; 255
    2dba:	5f 4f       	sbci	r21, 0xFF	; 255
    2dbc:	60 ea       	ldi	r22, 0xA0	; 160
    2dbe:	7f e0       	ldi	r23, 0x0F	; 15
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
    2dc8:	2c 0d       	add	r18, r12
    2dca:	3d 1d       	adc	r19, r13
    2dcc:	4e 1d       	adc	r20, r14
    2dce:	5f 1d       	adc	r21, r15
    2dd0:	20 93 58 01 	sts	0x0158, r18
    2dd4:	30 93 59 01 	sts	0x0159, r19
    2dd8:	40 93 5a 01 	sts	0x015A, r20
    2ddc:	50 93 5b 01 	sts	0x015B, r21
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2de0:	80 91 45 01 	lds	r24, 0x0145
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	88 59       	subi	r24, 0x98	; 152
    2de8:	9d 4f       	sbci	r25, 0xFD	; 253
    2dea:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__eerd_byte_m328p>
     if (cap.cval > tmpint) {
    2dee:	20 91 58 01 	lds	r18, 0x0158
    2df2:	30 91 59 01 	lds	r19, 0x0159
    2df6:	40 91 5a 01 	lds	r20, 0x015A
    2dfa:	50 91 5b 01 	lds	r21, 0x015B
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
     if (cap.cval > tmpint) {
    2e00:	a0 e0       	ldi	r26, 0x00	; 0
    2e02:	b0 e0       	ldi	r27, 0x00	; 0
    2e04:	82 17       	cp	r24, r18
    2e06:	93 07       	cpc	r25, r19
    2e08:	a4 07       	cpc	r26, r20
    2e0a:	b5 07       	cpc	r27, r21
    2e0c:	68 f4       	brcc	.+26     	; 0x2e28 <ReadCapacity+0x410>
         cap.cval -= tmpint;		//subtract zero offset (pF)
    2e0e:	28 1b       	sub	r18, r24
    2e10:	39 0b       	sbc	r19, r25
    2e12:	4a 0b       	sbc	r20, r26
    2e14:	5b 0b       	sbc	r21, r27
    2e16:	20 93 58 01 	sts	0x0158, r18
    2e1a:	30 93 59 01 	sts	0x0159, r19
    2e1e:	40 93 5a 01 	sts	0x015A, r20
    2e22:	50 93 5b 01 	sts	0x015B, r21
    2e26:	08 c0       	rjmp	.+16     	; 0x2e38 <ReadCapacity+0x420>
     } else {
         cap.cval = 0;			//unsigned long may not reach negativ value
    2e28:	10 92 58 01 	sts	0x0158, r1
    2e2c:	10 92 59 01 	sts	0x0159, r1
    2e30:	10 92 5a 01 	sts	0x015A, r1
    2e34:	10 92 5b 01 	sts	0x015B, r1
  lcd_testpin(HighPin);
  lcd_space();
  DisplayValue(cap.cval,cap.cpre,'F',4);
  wait3s();
#endif
  R_DDR = HiPinR_L; 		//switch R_L for High-Pin to GND
    2e38:	a4 b8       	out	0x04, r10	; 4
#if F_CPU < 2000001
   if(cap.cval < 50)
#else 
   if(cap.cval < 25)
    2e3a:	80 91 58 01 	lds	r24, 0x0158
    2e3e:	90 91 59 01 	lds	r25, 0x0159
    2e42:	a0 91 5a 01 	lds	r26, 0x015A
    2e46:	b0 91 5b 01 	lds	r27, 0x015B
    2e4a:	89 31       	cpi	r24, 0x19	; 25
    2e4c:	91 05       	cpc	r25, r1
    2e4e:	a1 05       	cpc	r26, r1
    2e50:	b1 05       	cpc	r27, r1
    2e52:	e8 f1       	brcs	.+122    	; 0x2ece <ReadCapacity+0x4b6>
//   if (ovcnt16 > (6 * ((unsigned long)F_CPU/1000000))) {	// above 3 uF
//      GetESR(HighPin,LowPin);
//   }
#endif
checkDiodes:
   if((NumOfDiodes > 0)  && (PartFound != PART_FET)) {
    2e54:	80 91 05 01 	lds	r24, 0x0105
    2e58:	88 23       	and	r24, r24
    2e5a:	21 f0       	breq	.+8      	; 0x2e64 <ReadCapacity+0x44c>
    2e5c:	80 91 07 01 	lds	r24, 0x0107
    2e60:	83 30       	cpi	r24, 0x03	; 3
    2e62:	a9 f5       	brne	.+106    	; 0x2ece <ReadCapacity+0x4b6>
      wait1s();
#endif
      // nearly shure, that there is one or more diodes in reverse direction,
      // which would be wrongly detected as capacitor 
   } else {
      PartFound = PART_CAPACITOR;	//capacitor is found
    2e64:	87 e0       	ldi	r24, 0x07	; 7
    2e66:	80 93 07 01 	sts	0x0107, r24
      if ((cap.cpre > cap.cpre_max) || ((cap.cpre == cap.cpre_max) && (cap.cval > cap.cval_max))) {
    2e6a:	60 91 68 01 	lds	r22, 0x0168
    2e6e:	80 91 69 01 	lds	r24, 0x0169
    2e72:	86 17       	cp	r24, r22
    2e74:	bc f0       	brlt	.+46     	; 0x2ea4 <ReadCapacity+0x48c>
    2e76:	68 17       	cp	r22, r24
    2e78:	51 f5       	brne	.+84     	; 0x2ece <ReadCapacity+0x4b6>
    2e7a:	20 91 58 01 	lds	r18, 0x0158
    2e7e:	30 91 59 01 	lds	r19, 0x0159
    2e82:	40 91 5a 01 	lds	r20, 0x015A
    2e86:	50 91 5b 01 	lds	r21, 0x015B
    2e8a:	80 91 5c 01 	lds	r24, 0x015C
    2e8e:	90 91 5d 01 	lds	r25, 0x015D
    2e92:	a0 91 5e 01 	lds	r26, 0x015E
    2e96:	b0 91 5f 01 	lds	r27, 0x015F
    2e9a:	82 17       	cp	r24, r18
    2e9c:	93 07       	cpc	r25, r19
    2e9e:	a4 07       	cpc	r26, r20
    2ea0:	b5 07       	cpc	r27, r21
    2ea2:	a8 f4       	brcc	.+42     	; 0x2ece <ReadCapacity+0x4b6>
         // we have found a greater one
         cap.cval_max = cap.cval;
    2ea4:	e8 e5       	ldi	r30, 0x58	; 88
    2ea6:	f1 e0       	ldi	r31, 0x01	; 1
    2ea8:	80 91 58 01 	lds	r24, 0x0158
    2eac:	90 91 59 01 	lds	r25, 0x0159
    2eb0:	a0 91 5a 01 	lds	r26, 0x015A
    2eb4:	b0 91 5b 01 	lds	r27, 0x015B
    2eb8:	80 93 5c 01 	sts	0x015C, r24
    2ebc:	90 93 5d 01 	sts	0x015D, r25
    2ec0:	a0 93 5e 01 	sts	0x015E, r26
    2ec4:	b0 93 5f 01 	sts	0x015F, r27
         cap.cpre_max = cap.cpre;
    2ec8:	61 8b       	std	Z+17, r22	; 0x11
         cap.ca = LowPin;		// save LowPin
    2eca:	06 87       	std	Z+14, r16	; 0x0e
         cap.cb = HighPin;		// save HighPin
    2ecc:	17 87       	std	Z+15, r17	; 0x0f
keinC:
  // discharge capacitor again
//  EntladePins();		// discharge capacitors
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    2ece:	88 e0       	ldi	r24, 0x08	; 8
    2ed0:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    2ed2:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    2ed4:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    2ed6:	15 b8       	out	0x05, r1	; 5
  return;
 } // end ReadCapacity()
    2ed8:	df 91       	pop	r29
    2eda:	cf 91       	pop	r28
    2edc:	1f 91       	pop	r17
    2ede:	0f 91       	pop	r16
    2ee0:	ff 90       	pop	r15
    2ee2:	ef 90       	pop	r14
    2ee4:	df 90       	pop	r13
    2ee6:	cf 90       	pop	r12
    2ee8:	bf 90       	pop	r11
    2eea:	af 90       	pop	r10
    2eec:	08 95       	ret

00002eee <ReadInductance>:
#include "config.h"
#include "Transistortester.h"


//=================================================================
void ReadInductance(void) {
    2eee:	2f 92       	push	r2
    2ef0:	3f 92       	push	r3
    2ef2:	4f 92       	push	r4
    2ef4:	5f 92       	push	r5
    2ef6:	6f 92       	push	r6
    2ef8:	7f 92       	push	r7
    2efa:	8f 92       	push	r8
    2efc:	9f 92       	push	r9
    2efe:	af 92       	push	r10
    2f00:	bf 92       	push	r11
    2f02:	cf 92       	push	r12
    2f04:	df 92       	push	r13
    2f06:	ef 92       	push	r14
    2f08:	ff 92       	push	r15
    2f0a:	0f 93       	push	r16
    2f0c:	1f 93       	push	r17
    2f0e:	df 93       	push	r29
    2f10:	cf 93       	push	r28
    2f12:	cd b7       	in	r28, 0x3d	; 61
    2f14:	de b7       	in	r29, 0x3e	; 62
    2f16:	6e 97       	sbiw	r28, 0x1e	; 30
    2f18:	0f b6       	in	r0, 0x3f	; 63
    2f1a:	f8 94       	cli
    2f1c:	de bf       	out	0x3e, r29	; 62
    2f1e:	0f be       	out	0x3f, r0	; 63
    2f20:	cd bf       	out	0x3d, r28	; 61
  uint8_t found;	// variable used for searching resistors 
  uint8_t LowPin;	// number of pin with low voltage
  uint8_t HighPin;	// number of pin with high voltage 


  if(PartFound != PART_RESISTOR) {
    2f22:	80 91 07 01 	lds	r24, 0x0107
    2f26:	86 30       	cpi	r24, 0x06	; 6
    2f28:	09 f0       	breq	.+2      	; 0x2f2c <ReadInductance+0x3e>
    2f2a:	6c c2       	rjmp	.+1240   	; 0x3404 <ReadInductance+0x516>
    2f2c:	19 8a       	std	Y+17, r1	; 0x11
    2f2e:	61 c2       	rjmp	.+1218   	; 0x33f2 <ReadInductance+0x504>
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 21000) continue;
    2f30:	29 89       	ldd	r18, Y+17	; 0x11
    2f32:	22 2e       	mov	r2, r18
    2f34:	33 24       	eor	r3, r3
    2f36:	4b e0       	ldi	r20, 0x0B	; 11
    2f38:	50 e0       	ldi	r21, 0x00	; 0
    2f3a:	24 9e       	mul	r2, r20
    2f3c:	f0 01       	movw	r30, r0
    2f3e:	25 9e       	mul	r2, r21
    2f40:	f0 0d       	add	r31, r0
    2f42:	34 9e       	mul	r3, r20
    2f44:	f0 0d       	add	r31, r0
    2f46:	11 24       	eor	r1, r1
    2f48:	e8 5e       	subi	r30, 0xE8	; 232
    2f4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f4c:	80 81       	ld	r24, Z
    2f4e:	91 81       	ldd	r25, Z+1	; 0x01
    2f50:	a2 81       	ldd	r26, Z+2	; 0x02
    2f52:	b3 81       	ldd	r27, Z+3	; 0x03
    2f54:	89 30       	cpi	r24, 0x09	; 9
    2f56:	52 e5       	ldi	r21, 0x52	; 82
    2f58:	95 07       	cpc	r25, r21
    2f5a:	50 e0       	ldi	r21, 0x00	; 0
    2f5c:	a5 07       	cpc	r26, r21
    2f5e:	50 e0       	ldi	r21, 0x00	; 0
    2f60:	b5 07       	cpc	r27, r21
    2f62:	08 f0       	brcs	.+2      	; 0x2f66 <ReadInductance+0x78>
    2f64:	43 c2       	rjmp	.+1158   	; 0x33ec <ReadInductance+0x4fe>
    2f66:	ff 24       	eor	r15, r15
           // first and second pass, direction 1
           LowPin = resis[found].ra;
           HighPin = resis[found].rb;
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    2f68:	5f 01       	movw	r10, r30
    2f6a:	cf 01       	movw	r24, r30
    2f6c:	09 96       	adiw	r24, 0x09	; 9
    2f6e:	99 8f       	std	Y+25, r25	; 0x19
    2f70:	88 8f       	std	Y+24, r24	; 0x18
           HighPin = resis[found].ra;
    2f72:	38 96       	adiw	r30, 0x08	; 8
    2f74:	fb 8f       	std	Y+27, r31	; 0x1b
    2f76:	ea 8f       	std	Y+26, r30	; 0x1a
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    2f78:	3d 8e       	std	Y+29, r3	; 0x1d
    2f7a:	2c 8e       	std	Y+28, r2	; 0x1c
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 21000) continue;
     // we can check for Inductance, if resistance is below 2800 Ohm
     for (count=0;count<4;count++) {
        // Try four times (different direction and with delayed counter start)
        if (count < 2) {
    2f7c:	ff 2d       	mov	r31, r15
    2f7e:	f2 30       	cpi	r31, 0x02	; 2
    2f80:	30 f4       	brcc	.+12     	; 0x2f8e <ReadInductance+0xa0>
           // first and second pass, direction 1
           LowPin = resis[found].ra;
    2f82:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2f84:	fb 8d       	ldd	r31, Y+27	; 0x1b
    2f86:	e0 80       	ld	r14, Z
           HighPin = resis[found].rb;
    2f88:	e8 8d       	ldd	r30, Y+24	; 0x18
    2f8a:	f9 8d       	ldd	r31, Y+25	; 0x19
    2f8c:	05 c0       	rjmp	.+10     	; 0x2f98 <ReadInductance+0xaa>
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    2f8e:	e8 8d       	ldd	r30, Y+24	; 0x18
    2f90:	f9 8d       	ldd	r31, Y+25	; 0x19
    2f92:	e0 80       	ld	r14, Z
           HighPin = resis[found].ra;
    2f94:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2f96:	fb 8d       	ldd	r31, Y+27	; 0x1b
    2f98:	70 80       	ld	r7, Z
        }
        HiADC = MEM_read_byte(&PinADCtab[HighPin]);
    2f9a:	87 2d       	mov	r24, r7
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	89 5a       	subi	r24, 0xA9	; 169
    2fa0:	9d 4f       	sbci	r25, 0xFD	; 253
    2fa2:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__eerd_byte_m328p>
    2fa6:	88 2e       	mov	r8, r24
        LoPinR_L = MEM_read_byte(&PinRLtab[LowPin]);	//R_L mask for HighPin R_L load
    2fa8:	8e 2d       	mov	r24, r14
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	8c 5a       	subi	r24, 0xAC	; 172
    2fae:	9d 4f       	sbci	r25, 0xFD	; 253
    2fb0:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__eerd_byte_m328p>
        //==================================================================================
        // Measurement of Inductance values
        R_PORT = 0;		// switch R port to GND
    2fb4:	15 b8       	out	0x05, r1	; 5
        ADC_PORT =   TXD_VAL;		// switch ADC-Port to GND
    2fb6:	f8 e0       	ldi	r31, 0x08	; 8
    2fb8:	f8 b9       	out	0x08, r31	; 8
        if ((resis[found].rx < 240) && ((count & 0x01) == 0)) {
    2fba:	f5 01       	movw	r30, r10
    2fbc:	20 81       	ld	r18, Z
    2fbe:	31 81       	ldd	r19, Z+1	; 0x01
    2fc0:	42 81       	ldd	r20, Z+2	; 0x02
    2fc2:	53 81       	ldd	r21, Z+3	; 0x03
    2fc4:	20 3f       	cpi	r18, 0xF0	; 240
    2fc6:	31 05       	cpc	r19, r1
    2fc8:	41 05       	cpc	r20, r1
    2fca:	51 05       	cpc	r21, r1
    2fcc:	a8 f4       	brcc	.+42     	; 0x2ff8 <ReadInductance+0x10a>
    2fce:	f0 fc       	sbrc	r15, 0
    2fd0:	13 c0       	rjmp	.+38     	; 0x2ff8 <ReadInductance+0x10a>
           // we can use PinR_L for measurement
           mess_r = RR680MI - R_L_VAL;
    2fd2:	00 91 02 01 	lds	r16, 0x0102
    2fd6:	10 91 03 01 	lds	r17, 0x0103
    2fda:	00 59       	subi	r16, 0x90	; 144
    2fdc:	1a 41       	sbci	r17, 0x1A	; 26
           ADC_DDR = HiADC | (1<<LowPin) | TXD_MSK;	// switch HiADC and Low Pin to GND, 
    2fde:	28 2d       	mov	r18, r8
    2fe0:	28 60       	ori	r18, 0x08	; 8
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	0e 2c       	mov	r0, r14
    2fe8:	02 c0       	rjmp	.+4      	; 0x2fee <ReadInductance+0x100>
    2fea:	88 0f       	add	r24, r24
    2fec:	99 1f       	adc	r25, r25
    2fee:	0a 94       	dec	r0
    2ff0:	e2 f7       	brpl	.-8      	; 0x2fea <ReadInductance+0xfc>
    2ff2:	28 2b       	or	r18, r24
    2ff4:	27 b9       	out	0x07, r18	; 7
    2ff6:	08 c0       	rjmp	.+16     	; 0x3008 <ReadInductance+0x11a>
        } else {
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
    2ff8:	84 b9       	out	0x04, r24	; 4
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
    2ffa:	88 2d       	mov	r24, r8
    2ffc:	88 60       	ori	r24, 0x08	; 8
    2ffe:	87 b9       	out	0x07, r24	; 7
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
    3000:	00 91 02 01 	lds	r16, 0x0102
    3004:	10 91 03 01 	lds	r17, 0x0103
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    3008:	20 e0       	ldi	r18, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    300a:	8e 2d       	mov	r24, r14
    300c:	2e 8f       	std	Y+30, r18	; 0x1e
    300e:	0e 94 1d 1a 	call	0x343a	; 0x343a <W10msReadADC>
    3012:	6c 01       	movw	r12, r24
            total_r =  ReadADC(HighPin);
    3014:	87 2d       	mov	r24, r7
    3016:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    301a:	2e 8d       	ldd	r18, Y+30	; 0x1e
    301c:	f2 e0       	ldi	r31, 0x02	; 2
    301e:	cf 16       	cp	r12, r31
    3020:	d1 04       	cpc	r13, r1
    3022:	18 f4       	brcc	.+6      	; 0x302a <ReadInductance+0x13c>
    3024:	82 30       	cpi	r24, 0x02	; 2
    3026:	91 05       	cpc	r25, r1
    3028:	18 f0       	brcs	.+6      	; 0x3030 <ReadInductance+0x142>
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    302a:	2f 5f       	subi	r18, 0xFF	; 255
    302c:	24 31       	cpi	r18, 0x14	; 20
    302e:	69 f7       	brne	.-38     	; 0x300a <ReadInductance+0x11c>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
        // setup Analog Comparator
        ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    3030:	20 e4       	ldi	r18, 0x40	; 64
    3032:	20 93 7b 00 	sts	0x007B, r18
        ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    3036:	34 e5       	ldi	r19, 0x54	; 84
    3038:	30 bf       	out	0x30, r19	; 48
        ADMUX = (1<<REFS0) | LowPin;			// switch Mux to Low-Pin
    303a:	8e 2d       	mov	r24, r14
    303c:	80 64       	ori	r24, 0x40	; 64
    303e:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    3042:	46 e1       	ldi	r20, 0x16	; 22
    3044:	40 93 7a 00 	sts	0x007A, r20
   
      // setup Counter1
        ovcnt16 = 0;
        TCCR1A = 0;			// set Counter1 to normal Mode
    3048:	10 92 80 00 	sts	0x0080, r1
        TCNT1 = 0;			//set Counter to 0
    304c:	10 92 85 00 	sts	0x0085, r1
    3050:	10 92 84 00 	sts	0x0084, r1
        TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// mega88
    3054:	57 e2       	ldi	r21, 0x27	; 39
    3056:	56 bb       	out	0x16, r21	; 22
        HiADC |= TXD_VAL;
    3058:	88 e0       	ldi	r24, 0x08	; 8
    305a:	88 2a       	or	r8, r24
        wait200us();			// wait for bandgap to start up
    305c:	0e 94 6d 14 	call	0x28da	; 0x28da <wait200us>
        if ((count & 0x01) == 0 ) {
    3060:	2f 2c       	mov	r2, r15
    3062:	33 24       	eor	r3, r3
    3064:	f1 01       	movw	r30, r2
    3066:	e1 70       	andi	r30, 0x01	; 1
    3068:	f0 70       	andi	r31, 0x00	; 0
    306a:	fb 8b       	std	Y+19, r31	; 0x13
    306c:	ea 8b       	std	Y+18, r30	; 0x12
    306e:	f0 fc       	sbrc	r15, 0
    3070:	05 c0       	rjmp	.+10     	; 0x307c <ReadInductance+0x18e>
           //first start counter, then start current
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    3072:	f1 e8       	ldi	r31, 0x81	; 129
    3074:	f0 93 81 00 	sts	0x0081, r31
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    3078:	88 b8       	out	0x08, r8	; 8
    307a:	08 c0       	rjmp	.+16     	; 0x308c <ReadInductance+0x19e>
        } else {
           //first start current, then start counter with delay
           //parasitic capacity of coil can cause high current at the beginning
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    307c:	88 b8       	out	0x08, r8	; 8
      #if F_CPU >= 8000000UL
           wait3us();		// ignore current peak from capacity
    307e:	0e 94 76 14 	call	0x28ec	; 0x28ec <wait3us>
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
    3082:	20 e2       	ldi	r18, 0x20	; 32
    3084:	26 bb       	out	0x16, r18	; 22
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    3086:	31 e8       	ldi	r19, 0x81	; 129
    3088:	30 93 81 00 	sts	0x0081, r19
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    308c:	cc 24       	eor	r12, r12
    308e:	dd 24       	eor	r13, r13
        }
      
      //******************************
        while(1) {
           // Wait, until  Input Capture is set
           ii = TI1_INT_FLAGS;		//read Timer flags
    3090:	26 b3       	in	r18, 0x16	; 22
           if (ii & (1<<ICF1))  {
    3092:	25 fd       	sbrc	r18, 5
    3094:	0c c0       	rjmp	.+24     	; 0x30ae <ReadInductance+0x1c0>
              break;
           }
           if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    3096:	20 ff       	sbrs	r18, 0
    3098:	fb cf       	rjmp	.-10     	; 0x3090 <ReadInductance+0x1a2>
              TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    309a:	41 e0       	ldi	r20, 0x01	; 1
    309c:	46 bb       	out	0x16, r20	; 22
              wdt_reset();
    309e:	a8 95       	wdr
              ovcnt16++;
    30a0:	08 94       	sec
    30a2:	c1 1c       	adc	r12, r1
    30a4:	d1 1c       	adc	r13, r1
              if(ovcnt16 == (F_CPU/100000)) {
    30a6:	50 e5       	ldi	r21, 0x50	; 80
    30a8:	c5 16       	cp	r12, r21
    30aa:	d1 04       	cpc	r13, r1
    30ac:	89 f7       	brne	.-30     	; 0x3090 <ReadInductance+0x1a2>
                 break; 	//Timeout for Charging, above 0.13 s
              }
           }
        }
        TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    30ae:	10 92 81 00 	sts	0x0081, r1
        TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    30b2:	80 e2       	ldi	r24, 0x20	; 32
    30b4:	86 bb       	out	0x16, r24	; 22
        tmpint = ICR1;		// get previous Input Capture Counter flag
    30b6:	80 90 86 00 	lds	r8, 0x0086
    30ba:	90 90 87 00 	lds	r9, 0x0087
      // check actual counter, if an additional overflow must be added
        if((TCNT1 > tmpint) && (ii & (1<<TOV1))) {
    30be:	80 91 84 00 	lds	r24, 0x0084
    30c2:	90 91 85 00 	lds	r25, 0x0085
    30c6:	88 16       	cp	r8, r24
    30c8:	99 06       	cpc	r9, r25
    30ca:	38 f4       	brcc	.+14     	; 0x30da <ReadInductance+0x1ec>
    30cc:	20 ff       	sbrs	r18, 0
    30ce:	05 c0       	rjmp	.+10     	; 0x30da <ReadInductance+0x1ec>
           // this OV was not counted, but was before the Input Capture
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    30d0:	91 e0       	ldi	r25, 0x01	; 1
    30d2:	96 bb       	out	0x16, r25	; 22
           ovcnt16++;
    30d4:	08 94       	sec
    30d6:	c1 1c       	adc	r12, r1
    30d8:	d1 1c       	adc	r13, r1
        }
        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    30da:	e8 e0       	ldi	r30, 0x08	; 8
    30dc:	e8 b9       	out	0x08, r30	; 8
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    30de:	f6 e9       	ldi	r31, 0x96	; 150
    30e0:	f0 93 7a 00 	sts	0x007A, r31
        for (ii=0;ii<20;ii++) {
    30e4:	40 e0       	ldi	r20, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    30e6:	8e 2d       	mov	r24, r14
    30e8:	4e 8f       	std	Y+30, r20	; 0x1e
    30ea:	0e 94 1d 1a 	call	0x343a	; 0x343a <W10msReadADC>
    30ee:	2c 01       	movw	r4, r24
            total_r =  ReadADC(HighPin);
    30f0:	87 2d       	mov	r24, r7
    30f2:	0e 94 21 1a 	call	0x3442	; 0x3442 <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    30f6:	4e 8d       	ldd	r20, Y+30	; 0x1e
    30f8:	52 e0       	ldi	r21, 0x02	; 2
    30fa:	45 16       	cp	r4, r21
    30fc:	51 04       	cpc	r5, r1
    30fe:	18 f4       	brcc	.+6      	; 0x3106 <ReadInductance+0x218>
    3100:	82 30       	cpi	r24, 0x02	; 2
    3102:	91 05       	cpc	r25, r1
    3104:	18 f0       	brcs	.+6      	; 0x310c <ReadInductance+0x21e>
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
           ovcnt16++;
        }
        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
        for (ii=0;ii<20;ii++) {
    3106:	4f 5f       	subi	r20, 0xFF	; 255
    3108:	44 31       	cpi	r20, 0x14	; 20
    310a:	69 f7       	brne	.-38     	; 0x30e6 <ReadInductance+0x1f8>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
//      cap.cval_uncorrected.dw = CombineII2Long(ovcnt16, tmpint);
        cap.cval_uncorrected.w[1] = ovcnt16;
    310c:	d0 92 63 01 	sts	0x0163, r13
    3110:	c0 92 62 01 	sts	0x0162, r12
        cap.cval_uncorrected.w[0] = tmpint;
    3114:	90 92 61 01 	sts	0x0161, r9
    3118:	80 92 60 01 	sts	0x0160, r8
  #define CNT_ZERO_42 4
  #define CNT_ZERO_720 10
#endif
        // Voltage of comparator in % of umax
        #ifdef AUTO_CAL
        tmpint = (ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset))) ;
    311c:	86 e6       	ldi	r24, 0x66	; 102
    311e:	92 e0       	ldi	r25, 0x02	; 2
    3120:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <__eerd_word_m328p>
    3124:	60 91 3f 01 	lds	r22, 0x013F
    3128:	70 91 40 01 	lds	r23, 0x0140
    312c:	68 0f       	add	r22, r24
    312e:	79 1f       	adc	r23, r25
    3130:	80 91 60 01 	lds	r24, 0x0160
    3134:	90 91 61 01 	lds	r25, 0x0161
    3138:	a0 91 62 01 	lds	r26, 0x0162
    313c:	b0 91 63 01 	lds	r27, 0x0163
        #else
        tmpint = (ref_mv + REF_C_KORR);
        #endif
        if (mess_r < R_L_VAL) {
    3140:	ea e1       	ldi	r30, 0x1A	; 26
    3142:	00 39       	cpi	r16, 0x90	; 144
    3144:	1e 07       	cpc	r17, r30
    3146:	90 f4       	brcc	.+36     	; 0x316c <ReadInductance+0x27e>
           // measurement without 680 Ohm
           if (cap.cval_uncorrected.dw > CNT_ZERO_42) cap.cval_uncorrected.dw -= CNT_ZERO_42;
    3148:	87 30       	cpi	r24, 0x07	; 7
    314a:	91 05       	cpc	r25, r1
    314c:	a1 05       	cpc	r26, r1
    314e:	b1 05       	cpc	r27, r1
    3150:	20 f0       	brcs	.+8      	; 0x315a <ReadInductance+0x26c>
    3152:	06 97       	sbiw	r24, 0x06	; 6
    3154:	a1 09       	sbc	r26, r1
    3156:	b1 09       	sbc	r27, r1
    3158:	3c c0       	rjmp	.+120    	; 0x31d2 <ReadInductance+0x2e4>
           else          cap.cval_uncorrected.dw = 0;
    315a:	10 92 60 01 	sts	0x0160, r1
    315e:	10 92 61 01 	sts	0x0161, r1
    3162:	10 92 62 01 	sts	0x0162, r1
    3166:	10 92 63 01 	sts	0x0163, r1
    316a:	3b c0       	rjmp	.+118    	; 0x31e2 <ReadInductance+0x2f4>
        } else {
           // measurement with 680 Ohm resistor
           // if 680 Ohm resistor is used, use REF_L_KORR for correction
           tmpint += REF_L_KORR;
    316c:	6e 5c       	subi	r22, 0xCE	; 206
    316e:	7f 4f       	sbci	r23, 0xFF	; 255
           if (cap.cval_uncorrected.dw > CNT_ZERO_720) cap.cval_uncorrected.dw -= CNT_ZERO_720;
    3170:	88 30       	cpi	r24, 0x08	; 8
    3172:	91 05       	cpc	r25, r1
    3174:	a1 05       	cpc	r26, r1
    3176:	b1 05       	cpc	r27, r1
    3178:	60 f0       	brcs	.+24     	; 0x3192 <ReadInductance+0x2a4>
    317a:	07 97       	sbiw	r24, 0x07	; 7
    317c:	a1 09       	sbc	r26, r1
    317e:	b1 09       	sbc	r27, r1
    3180:	80 93 60 01 	sts	0x0160, r24
    3184:	90 93 61 01 	sts	0x0161, r25
    3188:	a0 93 62 01 	sts	0x0162, r26
    318c:	b0 93 63 01 	sts	0x0163, r27
    3190:	08 c0       	rjmp	.+16     	; 0x31a2 <ReadInductance+0x2b4>
           else          cap.cval_uncorrected.dw = 0;
    3192:	10 92 60 01 	sts	0x0160, r1
    3196:	10 92 61 01 	sts	0x0161, r1
    319a:	10 92 62 01 	sts	0x0162, r1
    319e:	10 92 63 01 	sts	0x0163, r1
           if (cap.cval > 12) cap.cval_uncorrected.dw -= 1;
    31a2:	80 91 58 01 	lds	r24, 0x0158
    31a6:	90 91 59 01 	lds	r25, 0x0159
    31aa:	a0 91 5a 01 	lds	r26, 0x015A
    31ae:	b0 91 5b 01 	lds	r27, 0x015B
    31b2:	8d 30       	cpi	r24, 0x0D	; 13
    31b4:	91 05       	cpc	r25, r1
    31b6:	a1 05       	cpc	r26, r1
    31b8:	b1 05       	cpc	r27, r1
    31ba:	98 f0       	brcs	.+38     	; 0x31e2 <ReadInductance+0x2f4>
    31bc:	80 91 60 01 	lds	r24, 0x0160
    31c0:	90 91 61 01 	lds	r25, 0x0161
    31c4:	a0 91 62 01 	lds	r26, 0x0162
    31c8:	b0 91 63 01 	lds	r27, 0x0163
    31cc:	01 97       	sbiw	r24, 0x01	; 1
    31ce:	a1 09       	sbc	r26, r1
    31d0:	b1 09       	sbc	r27, r1
    31d2:	80 93 60 01 	sts	0x0160, r24
    31d6:	90 93 61 01 	sts	0x0161, r25
    31da:	a0 93 62 01 	sts	0x0162, r26
    31de:	b0 93 63 01 	sts	0x0163, r27
        }
        if ((count&0x01) == 1) {
    31e2:	2a 89       	ldd	r18, Y+18	; 0x12
    31e4:	3b 89       	ldd	r19, Y+19	; 0x13
    31e6:	21 15       	cp	r18, r1
    31e8:	31 05       	cpc	r19, r1
    31ea:	99 f0       	breq	.+38     	; 0x3212 <ReadInductance+0x324>
           // second pass with delayed counter start
           cap.cval_uncorrected.dw += (3 * (F_CPU/1000000))+10;
    31ec:	80 91 60 01 	lds	r24, 0x0160
    31f0:	90 91 61 01 	lds	r25, 0x0161
    31f4:	a0 91 62 01 	lds	r26, 0x0162
    31f8:	b0 91 63 01 	lds	r27, 0x0163
    31fc:	82 96       	adiw	r24, 0x22	; 34
    31fe:	a1 1d       	adc	r26, r1
    3200:	b1 1d       	adc	r27, r1
    3202:	80 93 60 01 	sts	0x0160, r24
    3206:	90 93 61 01 	sts	0x0161, r25
    320a:	a0 93 62 01 	sts	0x0162, r26
    320e:	b0 93 63 01 	sts	0x0163, r27
        }
        if (ovcnt16 >= (F_CPU/100000)) cap.cval_uncorrected.dw = 0; // no transition found
    3212:	30 e5       	ldi	r19, 0x50	; 80
    3214:	c3 16       	cp	r12, r19
    3216:	d1 04       	cpc	r13, r1
    3218:	40 f0       	brcs	.+16     	; 0x322a <ReadInductance+0x33c>
    321a:	10 92 60 01 	sts	0x0160, r1
    321e:	10 92 61 01 	sts	0x0161, r1
    3222:	10 92 62 01 	sts	0x0162, r1
    3226:	10 92 63 01 	sts	0x0163, r1
        total_r = (mess_r + resis[found].rx + RR680PL - R_L_VAL);
    322a:	80 91 08 01 	lds	r24, 0x0108
    322e:	90 91 09 01 	lds	r25, 0x0109
    3232:	80 59       	subi	r24, 0x90	; 144
    3234:	9a 41       	sbci	r25, 0x1A	; 26
    3236:	f5 01       	movw	r30, r10
    3238:	20 81       	ld	r18, Z
    323a:	31 81       	ldd	r19, Z+1	; 0x01
    323c:	82 0f       	add	r24, r18
    323e:	93 1f       	adc	r25, r19
    3240:	80 0f       	add	r24, r16
    3242:	91 1f       	adc	r25, r17
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    3244:	9c 01       	movw	r18, r24
    3246:	40 e0       	ldi	r20, 0x00	; 0
    3248:	50 e0       	ldi	r21, 0x00	; 0
    324a:	2c 8b       	std	Y+20, r18	; 0x14
    324c:	3d 8b       	std	Y+21, r19	; 0x15
    324e:	4e 8b       	std	Y+22, r20	; 0x16
    3250:	5f 8b       	std	Y+23, r21	; 0x17
        per_ref = ((unsigned long)tmpint * 100) / umax;
    3252:	80 e0       	ldi	r24, 0x00	; 0
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	24 e6       	ldi	r18, 0x64	; 100
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	40 e0       	ldi	r20, 0x00	; 0
    325c:	50 e0       	ldi	r21, 0x00	; 0
    325e:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
    3262:	2b 01       	movw	r4, r22
    3264:	3c 01       	movw	r6, r24
           cap.cval_uncorrected.dw += (3 * (F_CPU/1000000))+10;
        }
        if (ovcnt16 >= (F_CPU/100000)) cap.cval_uncorrected.dw = 0; // no transition found
        total_r = (mess_r + resis[found].rx + RR680PL - R_L_VAL);
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    3266:	b8 01       	movw	r22, r16
    3268:	80 e0       	ldi	r24, 0x00	; 0
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	20 91 3d 01 	lds	r18, 0x013D
    3270:	30 91 3e 01 	lds	r19, 0x013E
    3274:	40 e0       	ldi	r20, 0x00	; 0
    3276:	50 e0       	ldi	r21, 0x00	; 0
    3278:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
    327c:	2c 89       	ldd	r18, Y+20	; 0x14
    327e:	3d 89       	ldd	r19, Y+21	; 0x15
    3280:	4e 89       	ldd	r20, Y+22	; 0x16
    3282:	5f 89       	ldd	r21, Y+23	; 0x17
    3284:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
        per_ref = ((unsigned long)tmpint * 100) / umax;
    3288:	40 e0       	ldi	r20, 0x00	; 0
    328a:	50 e0       	ldi	r21, 0x00	; 0
    328c:	c3 01       	movw	r24, r6
    328e:	b2 01       	movw	r22, r4
    3290:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
        per_ref = (uint8_t)MEM2_read_byte(&LogTab[per_ref]);	// -log(1 - per_ref/100)
    3294:	82 2f       	mov	r24, r18
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	86 5a       	subi	r24, 0xA6	; 166
    329a:	9f 4f       	sbci	r25, 0xFF	; 255
    329c:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__eerd_byte_m328p>
    32a0:	08 2f       	mov	r16, r24
        // lx in 0.01mH units,  L = Tau * R
        inductance[count] = (cap.cval_uncorrected.dw * total_r ) / ((unsigned int)per_ref * (F_CPU/1000000));
    32a2:	20 91 60 01 	lds	r18, 0x0160
    32a6:	30 91 61 01 	lds	r19, 0x0161
    32aa:	40 91 62 01 	lds	r20, 0x0162
    32ae:	50 91 63 01 	lds	r21, 0x0163
    32b2:	6c 89       	ldd	r22, Y+20	; 0x14
    32b4:	7d 89       	ldd	r23, Y+21	; 0x15
    32b6:	8e 89       	ldd	r24, Y+22	; 0x16
    32b8:	9f 89       	ldd	r25, Y+23	; 0x17
    32ba:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
    32be:	20 2f       	mov	r18, r16
    32c0:	30 e0       	ldi	r19, 0x00	; 0
    32c2:	40 e0       	ldi	r20, 0x00	; 0
    32c4:	50 e0       	ldi	r21, 0x00	; 0
    32c6:	e3 e0       	ldi	r30, 0x03	; 3
    32c8:	22 0f       	add	r18, r18
    32ca:	33 1f       	adc	r19, r19
    32cc:	44 1f       	adc	r20, r20
    32ce:	55 1f       	adc	r21, r21
    32d0:	ea 95       	dec	r30
    32d2:	d1 f7       	brne	.-12     	; 0x32c8 <ReadInductance+0x3da>
    32d4:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
    32d8:	f1 01       	movw	r30, r2
    32da:	ee 0f       	add	r30, r30
    32dc:	ff 1f       	adc	r31, r31
    32de:	ee 0f       	add	r30, r30
    32e0:	ff 1f       	adc	r31, r31
    32e2:	81 e0       	ldi	r24, 0x01	; 1
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	8c 0f       	add	r24, r28
    32e8:	9d 1f       	adc	r25, r29
    32ea:	e8 0f       	add	r30, r24
    32ec:	f9 1f       	adc	r31, r25
    32ee:	20 83       	st	Z, r18
    32f0:	31 83       	std	Z+1, r19	; 0x01
    32f2:	42 83       	std	Z+2, r20	; 0x02
    32f4:	53 83       	std	Z+3, r21	; 0x03
        if (((count&0x01) == 0) && (inductance[count] > (F_CPU/1000000))) {
    32f6:	ea 89       	ldd	r30, Y+18	; 0x12
    32f8:	fb 89       	ldd	r31, Y+19	; 0x13
    32fa:	30 97       	sbiw	r30, 0x00	; 0
    32fc:	91 f4       	brne	.+36     	; 0x3322 <ReadInductance+0x434>
    32fe:	29 30       	cpi	r18, 0x09	; 9
    3300:	31 05       	cpc	r19, r1
    3302:	41 05       	cpc	r20, r1
    3304:	51 05       	cpc	r21, r1
    3306:	68 f0       	brcs	.+26     	; 0x3322 <ReadInductance+0x434>
           // transition is found, measurement with delayed counter start is not necessary
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
    3308:	f1 01       	movw	r30, r2
    330a:	31 96       	adiw	r30, 0x01	; 1
    330c:	ee 0f       	add	r30, r30
    330e:	ff 1f       	adc	r31, r31
    3310:	ee 0f       	add	r30, r30
    3312:	ff 1f       	adc	r31, r31
    3314:	e8 0f       	add	r30, r24
    3316:	f9 1f       	adc	r31, r25
    3318:	20 83       	st	Z, r18
    331a:	31 83       	std	Z+1, r19	; 0x01
    331c:	42 83       	std	Z+2, r20	; 0x02
    331e:	53 83       	std	Z+3, r21	; 0x03
           count++;		// skip the delayed measurement
    3320:	f3 94       	inc	r15
        }
        wdt_reset();
    3322:	a8 95       	wdr
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 21000) continue;
     // we can check for Inductance, if resistance is below 2800 Ohm
     for (count=0;count<4;count++) {
    3324:	f3 94       	inc	r15
    3326:	ff 2d       	mov	r31, r15
    3328:	f4 30       	cpi	r31, 0x04	; 4
    332a:	08 f4       	brcc	.+2      	; 0x332e <ReadInductance+0x440>
    332c:	27 ce       	rjmp	.-946    	; 0x2f7c <ReadInductance+0x8e>
    332e:	2c 8c       	ldd	r2, Y+28	; 0x1c
    3330:	3d 8c       	ldd	r3, Y+29	; 0x1d
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
           count++;		// skip the delayed measurement
        }
        wdt_reset();
     }  //end for count
     ADC_PORT = TXD_VAL;		// switch ADC Port to GND
    3332:	28 e0       	ldi	r18, 0x08	; 8
    3334:	28 b9       	out	0x08, r18	; 8
     wait20ms();
    3336:	0e 94 63 14 	call	0x28c6	; 0x28c6 <wait20ms>
     if (inductance[1] > inductance[0]) {
    333a:	2d 81       	ldd	r18, Y+5	; 0x05
    333c:	3e 81       	ldd	r19, Y+6	; 0x06
    333e:	4f 81       	ldd	r20, Y+7	; 0x07
    3340:	58 85       	ldd	r21, Y+8	; 0x08
    3342:	89 81       	ldd	r24, Y+1	; 0x01
    3344:	9a 81       	ldd	r25, Y+2	; 0x02
    3346:	ab 81       	ldd	r26, Y+3	; 0x03
    3348:	bc 81       	ldd	r27, Y+4	; 0x04
    334a:	82 17       	cp	r24, r18
    334c:	93 07       	cpc	r25, r19
    334e:	a4 07       	cpc	r26, r20
    3350:	b5 07       	cpc	r27, r21
    3352:	80 f4       	brcc	.+32     	; 0x3374 <ReadInductance+0x486>
        resis[found].lx = inductance[1];	// use value found with delayed counter start
    3354:	8b e0       	ldi	r24, 0x0B	; 11
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	28 9e       	mul	r2, r24
    335a:	f0 01       	movw	r30, r0
    335c:	29 9e       	mul	r2, r25
    335e:	f0 0d       	add	r31, r0
    3360:	38 9e       	mul	r3, r24
    3362:	f0 0d       	add	r31, r0
    3364:	11 24       	eor	r1, r1
    3366:	e8 5e       	subi	r30, 0xE8	; 232
    3368:	fe 4f       	sbci	r31, 0xFE	; 254
    336a:	24 83       	std	Z+4, r18	; 0x04
    336c:	35 83       	std	Z+5, r19	; 0x05
    336e:	46 83       	std	Z+6, r20	; 0x06
    3370:	57 83       	std	Z+7, r21	; 0x07
    3372:	0f c0       	rjmp	.+30     	; 0x3392 <ReadInductance+0x4a4>
     } else {
        resis[found].lx = inductance[0];
    3374:	2b e0       	ldi	r18, 0x0B	; 11
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	22 9e       	mul	r2, r18
    337a:	f0 01       	movw	r30, r0
    337c:	23 9e       	mul	r2, r19
    337e:	f0 0d       	add	r31, r0
    3380:	32 9e       	mul	r3, r18
    3382:	f0 0d       	add	r31, r0
    3384:	11 24       	eor	r1, r1
    3386:	e8 5e       	subi	r30, 0xE8	; 232
    3388:	fe 4f       	sbci	r31, 0xFE	; 254
    338a:	84 83       	std	Z+4, r24	; 0x04
    338c:	95 83       	std	Z+5, r25	; 0x05
    338e:	a6 83       	std	Z+6, r26	; 0x06
    3390:	b7 83       	std	Z+7, r27	; 0x07
     }
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];
    3392:	8d 85       	ldd	r24, Y+13	; 0x0d
    3394:	9e 85       	ldd	r25, Y+14	; 0x0e
    3396:	af 85       	ldd	r26, Y+15	; 0x0f
    3398:	b8 89       	ldd	r27, Y+16	; 0x10
    339a:	29 85       	ldd	r18, Y+9	; 0x09
    339c:	3a 85       	ldd	r19, Y+10	; 0x0a
    339e:	4b 85       	ldd	r20, Y+11	; 0x0b
    33a0:	5c 85       	ldd	r21, Y+12	; 0x0c
    33a2:	28 17       	cp	r18, r24
    33a4:	39 07       	cpc	r19, r25
    33a6:	4a 07       	cpc	r20, r26
    33a8:	5b 07       	cpc	r21, r27
    33aa:	20 f4       	brcc	.+8      	; 0x33b4 <ReadInductance+0x4c6>
    33ac:	89 87       	std	Y+9, r24	; 0x09
    33ae:	9a 87       	std	Y+10, r25	; 0x0a
    33b0:	ab 87       	std	Y+11, r26	; 0x0b
    33b2:	bc 87       	std	Y+12, r27	; 0x0c
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
    33b4:	89 85       	ldd	r24, Y+9	; 0x09
    33b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33b8:	ab 85       	ldd	r26, Y+11	; 0x0b
    33ba:	bc 85       	ldd	r27, Y+12	; 0x0c
    33bc:	4b e0       	ldi	r20, 0x0B	; 11
    33be:	50 e0       	ldi	r21, 0x00	; 0
    33c0:	24 9e       	mul	r2, r20
    33c2:	f0 01       	movw	r30, r0
    33c4:	25 9e       	mul	r2, r21
    33c6:	f0 0d       	add	r31, r0
    33c8:	34 9e       	mul	r3, r20
    33ca:	f0 0d       	add	r31, r0
    33cc:	11 24       	eor	r1, r1
    33ce:	e8 5e       	subi	r30, 0xE8	; 232
    33d0:	fe 4f       	sbci	r31, 0xFE	; 254
    33d2:	24 81       	ldd	r18, Z+4	; 0x04
    33d4:	35 81       	ldd	r19, Z+5	; 0x05
    33d6:	46 81       	ldd	r20, Z+6	; 0x06
    33d8:	57 81       	ldd	r21, Z+7	; 0x07
    33da:	82 17       	cp	r24, r18
    33dc:	93 07       	cpc	r25, r19
    33de:	a4 07       	cpc	r26, r20
    33e0:	b5 07       	cpc	r27, r21
    33e2:	20 f4       	brcc	.+8      	; 0x33ec <ReadInductance+0x4fe>
    33e4:	84 83       	std	Z+4, r24	; 0x04
    33e6:	95 83       	std	Z+5, r25	; 0x05
    33e8:	a6 83       	std	Z+6, r26	; 0x06
    33ea:	b7 83       	std	Z+7, r27	; 0x07


  if(PartFound != PART_RESISTOR) {
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
    33ec:	59 89       	ldd	r21, Y+17	; 0x11
    33ee:	5f 5f       	subi	r21, 0xFF	; 255
    33f0:	59 8b       	std	Y+17, r21	; 0x11
    33f2:	80 91 55 01 	lds	r24, 0x0155
    33f6:	99 89       	ldd	r25, Y+17	; 0x11
    33f8:	98 17       	cp	r25, r24
    33fa:	08 f4       	brcc	.+2      	; 0x33fe <ReadInductance+0x510>
    33fc:	99 cd       	rjmp	.-1230   	; 0x2f30 <ReadInductance+0x42>
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
  } // end loop for all resistors

  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    33fe:	88 e0       	ldi	r24, 0x08	; 8
    3400:	87 b9       	out	0x07, r24	; 7
  R_DDR = 0;			// switch all resistor ports to input
    3402:	14 b8       	out	0x04, r1	; 4
#endif
  return;
 } // end ReadInductance()
    3404:	6e 96       	adiw	r28, 0x1e	; 30
    3406:	0f b6       	in	r0, 0x3f	; 63
    3408:	f8 94       	cli
    340a:	de bf       	out	0x3e, r29	; 62
    340c:	0f be       	out	0x3f, r0	; 63
    340e:	cd bf       	out	0x3d, r28	; 61
    3410:	cf 91       	pop	r28
    3412:	df 91       	pop	r29
    3414:	1f 91       	pop	r17
    3416:	0f 91       	pop	r16
    3418:	ff 90       	pop	r15
    341a:	ef 90       	pop	r14
    341c:	df 90       	pop	r13
    341e:	cf 90       	pop	r12
    3420:	bf 90       	pop	r11
    3422:	af 90       	pop	r10
    3424:	9f 90       	pop	r9
    3426:	8f 90       	pop	r8
    3428:	7f 90       	pop	r7
    342a:	6f 90       	pop	r6
    342c:	5f 90       	pop	r5
    342e:	4f 90       	pop	r4
    3430:	3f 90       	pop	r3
    3432:	2f 90       	pop	r2
    3434:	08 95       	ret

00003436 <W20msReadADC>:
    3436:	0e 94 64 14 	call	0x28c8	; 0x28c8 <wait10ms>

0000343a <W10msReadADC>:
    343a:	0e 94 65 14 	call	0x28ca	; 0x28ca <wait5ms>

0000343e <W5msReadADC>:
    343e:	0e 94 65 14 	call	0x28ca	; 0x28ca <wait5ms>

00003442 <ReadADC>:
    3442:	1f 93       	push	r17
    3444:	18 2f       	mov	r17, r24
    3446:	10 64       	ori	r17, 0x40	; 64

00003448 <get_sample>:
    3448:	10 93 7c 00 	sts	0x007C, r17
    344c:	e1 2f       	mov	r30, r17
    344e:	e0 78       	andi	r30, 0x80	; 128
    3450:	80 91 3a 01 	lds	r24, 0x013A
    3454:	e8 17       	cp	r30, r24
    3456:	69 f0       	breq	.+26     	; 0x3472 <r2aa2>
    3458:	0e 94 6e 14 	call	0x28dc	; 0x28dc <wait100us>
    345c:	80 91 7a 00 	lds	r24, 0x007A
    3460:	80 64       	ori	r24, 0x40	; 64
    3462:	80 93 7a 00 	sts	0x007A, r24

00003466 <wadc1>:
    3466:	80 91 7a 00 	lds	r24, 0x007A
    346a:	86 fd       	sbrc	r24, 6
    346c:	fc cf       	rjmp	.-8      	; 0x3466 <wadc1>
    346e:	e0 93 3a 01 	sts	0x013A, r30

00003472 <r2aa2>:
    3472:	20 e0       	ldi	r18, 0x00	; 0
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	a9 01       	movw	r20, r18
    3478:	e0 e0       	ldi	r30, 0x00	; 0
    347a:	20 c0       	rjmp	.+64     	; 0x34bc <r2ae8>

0000347c <Loop>:
    347c:	80 91 7a 00 	lds	r24, 0x007A
    3480:	80 64       	ori	r24, 0x40	; 64
    3482:	80 93 7a 00 	sts	0x007A, r24

00003486 <wadc2>:
    3486:	80 91 7a 00 	lds	r24, 0x007A
    348a:	86 fd       	sbrc	r24, 6
    348c:	fc cf       	rjmp	.-8      	; 0x3486 <wadc2>
    348e:	60 91 78 00 	lds	r22, 0x0078
    3492:	70 91 79 00 	lds	r23, 0x0079
    3496:	26 0f       	add	r18, r22
    3498:	37 1f       	adc	r19, r23
    349a:	41 1d       	adc	r20, r1
    349c:	51 1d       	adc	r21, r1
    349e:	e4 30       	cpi	r30, 0x04	; 4
    34a0:	61 f4       	brne	.+24     	; 0x34ba <r2ae6>
    34a2:	80 91 3c 01 	lds	r24, 0x013C
    34a6:	80 30       	cpi	r24, 0x00	; 0
    34a8:	41 f0       	breq	.+16     	; 0x34ba <r2ae6>
    34aa:	84 e0       	ldi	r24, 0x04	; 4
    34ac:	20 30       	cpi	r18, 0x00	; 0
    34ae:	38 07       	cpc	r19, r24
    34b0:	20 f4       	brcc	.+8      	; 0x34ba <r2ae6>
    34b2:	17 fd       	sbrc	r17, 7
    34b4:	02 c0       	rjmp	.+4      	; 0x34ba <r2ae6>
    34b6:	10 68       	ori	r17, 0x80	; 128
    34b8:	c7 cf       	rjmp	.-114    	; 0x3448 <get_sample>

000034ba <r2ae6>:
    34ba:	ef 5f       	subi	r30, 0xFF	; 255

000034bc <r2ae8>:
    34bc:	80 91 39 01 	lds	r24, 0x0139
    34c0:	e8 17       	cp	r30, r24
    34c2:	e0 f2       	brcs	.-72     	; 0x347c <Loop>
    34c4:	17 ff       	sbrs	r17, 7
    34c6:	05 c0       	rjmp	.+10     	; 0x34d2 <r2afe>
    34c8:	60 91 3b 01 	lds	r22, 0x013B
    34cc:	70 91 3c 01 	lds	r23, 0x013C
    34d0:	04 c0       	rjmp	.+8      	; 0x34da <r2b02>

000034d2 <r2afe>:
    34d2:	60 91 3d 01 	lds	r22, 0x013D
    34d6:	70 91 3e 01 	lds	r23, 0x013E

000034da <r2b02>:
    34da:	80 e0       	ldi	r24, 0x00	; 0
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
    34e2:	2f ef       	ldi	r18, 0xFF	; 255
    34e4:	33 e0       	ldi	r19, 0x03	; 3
    34e6:	41 e0       	ldi	r20, 0x01	; 1
    34e8:	62 0f       	add	r22, r18
    34ea:	74 1f       	adc	r23, r20
    34ec:	81 1d       	adc	r24, r1
    34ee:	91 1d       	adc	r25, r1
    34f0:	40 e0       	ldi	r20, 0x00	; 0
    34f2:	50 e0       	ldi	r21, 0x00	; 0
    34f4:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
    34f8:	b9 01       	movw	r22, r18
    34fa:	ca 01       	movw	r24, r20
    34fc:	20 91 39 01 	lds	r18, 0x0139
    3500:	32 2f       	mov	r19, r18
    3502:	35 95       	asr	r19
    3504:	63 0f       	add	r22, r19
    3506:	71 1d       	adc	r23, r1
    3508:	81 1d       	adc	r24, r1
    350a:	91 1d       	adc	r25, r1
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	40 e0       	ldi	r20, 0x00	; 0
    3510:	50 e0       	ldi	r21, 0x00	; 0
    3512:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
    3516:	c9 01       	movw	r24, r18
    3518:	1f 91       	pop	r17
    351a:	08 95       	ret

0000351c <GetESR>:
#include "Transistortester.h"

#define MAX_CNT 128

//=================================================================
void GetESR() {
    351c:	2f 92       	push	r2
    351e:	3f 92       	push	r3
    3520:	4f 92       	push	r4
    3522:	5f 92       	push	r5
    3524:	6f 92       	push	r6
    3526:	7f 92       	push	r7
    3528:	8f 92       	push	r8
    352a:	9f 92       	push	r9
    352c:	af 92       	push	r10
    352e:	bf 92       	push	r11
    3530:	cf 92       	push	r12
    3532:	df 92       	push	r13
    3534:	ef 92       	push	r14
    3536:	ff 92       	push	r15
    3538:	0f 93       	push	r16
    353a:	1f 93       	push	r17
    353c:	df 93       	push	r29
    353e:	cf 93       	push	r28
    3540:	cd b7       	in	r28, 0x3d	; 61
    3542:	de b7       	in	r29, 0x3e	; 62
    3544:	60 97       	sbiw	r28, 0x10	; 16
    3546:	0f b6       	in	r0, 0x3f	; 63
    3548:	f8 94       	cli
    354a:	de bf       	out	0x3e, r29	; 62
    354c:	0f be       	out	0x3f, r0	; 63
    354e:	cd bf       	out	0x3d, r28	; 61
   esr0 = (int8_t)eeprom_read_byte(&EE_ESR_ZERO);
   sumvolt[0] += (((long)sumvolt[0] * esr0) / ((RR680MI - R_L_VAL) * 10)); // subtract 0.23 Ohm from ESR
   if (sumvolt[1] > sumvolt[0]) {
      sumvolt[1] -= sumvolt[0];		// difference HighPin - LowPin Voltage with current
   } else {
      sumvolt[1] = 0;
    3550:	20 91 5c 01 	lds	r18, 0x015C
    3554:	30 91 5d 01 	lds	r19, 0x015D
    3558:	40 91 5e 01 	lds	r20, 0x015E
    355c:	50 91 5f 01 	lds	r21, 0x015F
    3560:	10 91 69 01 	lds	r17, 0x0169
  uint8_t LoADC;		// used to switch Lowpin directly to GND or VCC
  uint8_t ii,jj;		// tempory values
  int8_t esr0;			// used for ESR zero correction

  while (cap.cpre_max < -9) { // set cval to nF unit
      cap.cval_max /= 10;		// reduce value by factor ten
    3564:	6a e0       	ldi	r22, 0x0A	; 10
    3566:	a6 2e       	mov	r10, r22
    3568:	b1 2c       	mov	r11, r1
    356a:	c1 2c       	mov	r12, r1
    356c:	d1 2c       	mov	r13, r1
  uint8_t LoPinR_L;		// used to switch 680 Ohm to LowPin
  uint8_t LoADC;		// used to switch Lowpin directly to GND or VCC
  uint8_t ii,jj;		// tempory values
  int8_t esr0;			// used for ESR zero correction

  while (cap.cpre_max < -9) { // set cval to nF unit
    356e:	07 c0       	rjmp	.+14     	; 0x357e <GetESR+0x62>
      cap.cval_max /= 10;		// reduce value by factor ten
    3570:	ca 01       	movw	r24, r20
    3572:	b9 01       	movw	r22, r18
    3574:	a6 01       	movw	r20, r12
    3576:	95 01       	movw	r18, r10
    3578:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
    357c:	1f 5f       	subi	r17, 0xFF	; 255
  uint8_t LoPinR_L;		// used to switch 680 Ohm to LowPin
  uint8_t LoADC;		// used to switch Lowpin directly to GND or VCC
  uint8_t ii,jj;		// tempory values
  int8_t esr0;			// used for ESR zero correction

  while (cap.cpre_max < -9) { // set cval to nF unit
    357e:	17 3f       	cpi	r17, 0xF7	; 247
    3580:	bc f3       	brlt	.-18     	; 0x3570 <GetESR+0x54>
    3582:	20 93 5c 01 	sts	0x015C, r18
    3586:	30 93 5d 01 	sts	0x015D, r19
    358a:	40 93 5e 01 	sts	0x015E, r20
    358e:	50 93 5f 01 	sts	0x015F, r21
    3592:	10 93 69 01 	sts	0x0169, r17
      cap.cval_max /= 10;		// reduce value by factor ten
      cap.cpre_max++;		// take next decimal prefix
  }
  if (cap.cval_max < 1800) return;			//capacity lower than 1.8 uF
    3596:	28 30       	cpi	r18, 0x08	; 8
    3598:	67 e0       	ldi	r22, 0x07	; 7
    359a:	36 07       	cpc	r19, r22
    359c:	60 e0       	ldi	r22, 0x00	; 0
    359e:	46 07       	cpc	r20, r22
    35a0:	60 e0       	ldi	r22, 0x00	; 0
    35a2:	56 07       	cpc	r21, r22
    35a4:	08 f4       	brcc	.+2      	; 0x35a8 <GetESR+0x8c>
    35a6:	21 c2       	rjmp	.+1090   	; 0x39ea <GetESR+0x4ce>
  lcd_fix_string(ESR_str);		// " ESR="
    35a8:	87 ea       	ldi	r24, 0xA7	; 167
    35aa:	91 e0       	ldi	r25, 0x01	; 1
    35ac:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_fix_string>
  LoADC = MEM_read_byte(&PinADCtab[cap.ca]) | TXD_MSK;
    35b0:	00 91 66 01 	lds	r16, 0x0166
    35b4:	10 e0       	ldi	r17, 0x00	; 0
    35b6:	c8 01       	movw	r24, r16
    35b8:	89 5a       	subi	r24, 0xA9	; 169
    35ba:	9d 4f       	sbci	r25, 0xFD	; 253
    35bc:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__eerd_byte_m328p>
    35c0:	98 e0       	ldi	r25, 0x08	; 8
    35c2:	c9 2e       	mov	r12, r25
    35c4:	c8 2a       	or	r12, r24
  HiADC = MEM_read_byte(&PinADCtab[cap.cb]) | TXD_MSK;
    35c6:	80 91 67 01 	lds	r24, 0x0167
    35ca:	e8 2e       	mov	r14, r24
    35cc:	ff 24       	eor	r15, r15
    35ce:	c7 01       	movw	r24, r14
    35d0:	89 5a       	subi	r24, 0xA9	; 169
    35d2:	9d 4f       	sbci	r25, 0xFD	; 253
    35d4:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__eerd_byte_m328p>
    35d8:	b8 e0       	ldi	r27, 0x08	; 8
    35da:	bb 2e       	mov	r11, r27
    35dc:	b8 2a       	or	r11, r24
  LoPinR_L = MEM_read_byte(&PinRLtab[cap.ca]);  //R_L mask for LowPin R_L load
    35de:	c8 01       	movw	r24, r16
    35e0:	8c 5a       	subi	r24, 0xAC	; 172
    35e2:	9d 4f       	sbci	r25, 0xFD	; 253
    35e4:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__eerd_byte_m328p>
    35e8:	a8 2e       	mov	r10, r24
  HiPinR_L = MEM_read_byte(&PinRLtab[cap.cb]);	//R_L mask for HighPin R_L load
    35ea:	c7 01       	movw	r24, r14
    35ec:	8c 5a       	subi	r24, 0xAC	; 172
    35ee:	9d 4f       	sbci	r25, 0xFD	; 253
    35f0:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__eerd_byte_m328p>
    35f4:	d8 2e       	mov	r13, r24
// Measurement of ESR of capacitors AC Mode
   sumvolt[0] = 1;		// set sum of LowPin voltage to 1 to prevent divide by zero
   sumvolt[1] = 1;		// clear sum of HighPin voltage with current
                                // offset is about (x*10*200)/34000 in 0.01 Ohm units
   sumvolt[2] = 0;		// clear sum of HighPin voltage without current
   EntladePins();	// discharge capacitor
    35f6:	0e 94 17 08 	call	0x102e	; 0x102e <EntladePins>
   ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    35fa:	88 e0       	ldi	r24, 0x08	; 8
    35fc:	88 b9       	out	0x08, r24	; 8
  LoPinR_L = MEM_read_byte(&PinRLtab[cap.ca]);  //R_L mask for LowPin R_L load
  HiPinR_L = MEM_read_byte(&PinRLtab[cap.cb]);	//R_L mask for HighPin R_L load


// Measurement of ESR of capacitors AC Mode
   sumvolt[0] = 1;		// set sum of LowPin voltage to 1 to prevent divide by zero
    35fe:	a1 e0       	ldi	r26, 0x01	; 1
    3600:	ea 2e       	mov	r14, r26
    3602:	f1 2c       	mov	r15, r1
    3604:	01 2d       	mov	r16, r1
    3606:	11 2d       	mov	r17, r1
   sumvolt[1] = 1;		// clear sum of HighPin voltage with current
    3608:	81 e0       	ldi	r24, 0x01	; 1
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	a0 e0       	ldi	r26, 0x00	; 0
    360e:	b0 e0       	ldi	r27, 0x00	; 0
    3610:	89 83       	std	Y+1, r24	; 0x01
    3612:	9a 83       	std	Y+2, r25	; 0x02
    3614:	ab 83       	std	Y+3, r26	; 0x03
    3616:	bc 83       	std	Y+4, r27	; 0x04
                                // offset is about (x*10*200)/34000 in 0.01 Ohm units
   sumvolt[2] = 0;		// clear sum of HighPin voltage without current
    3618:	1d 82       	std	Y+5, r1	; 0x05
    361a:	1e 82       	std	Y+6, r1	; 0x06
    361c:	1f 82       	std	Y+7, r1	; 0x07
    361e:	18 86       	std	Y+8, r1	; 0x08
   EntladePins();	// discharge capacitor
   ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
// measurement frequency is given by sum of ADC-Reads < 680 Hz
   // ADC Sample and Hold (SH) is done 1.5 ADC clock number after starting 
   for(ii=0;ii<MAX_CNT;ii++) {
    3620:	66 24       	eor	r6, r6
      ADC_DDR = LoADC;				// switch Low-Pin to output (GND)
    3622:	c7 b8       	out	0x07, r12	; 7
       ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);	// switch ADC to LowPin, Internal Ref. 
    3624:	80 91 66 01 	lds	r24, 0x0166
    3628:	80 6c       	ori	r24, 0xC0	; 192
    362a:	80 93 7c 00 	sts	0x007C, r24
       ADCSRA |= (1<<ADSC);				// Start Conversion
    362e:	80 91 7a 00 	lds	r24, 0x007A
    3632:	80 64       	ori	r24, 0x40	; 64
    3634:	80 93 7a 00 	sts	0x007A, r24
       while (ADCSRA&(1<<ADSC));	// wait dummy read , sync with ADC-clock
    3638:	80 91 7a 00 	lds	r24, 0x007A
    363c:	86 fd       	sbrc	r24, 6
    363e:	fc cf       	rjmp	.-8      	; 0x3638 <GetESR+0x11c>
      while (1) {
         R_PORT = HiPinR_L;			// switch R-Port to VCC
    3640:	d5 b8       	out	0x05, r13	; 5
         R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (VCC)
    3642:	d4 b8       	out	0x04, r13	; 4
          ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);      // switch ADC to LowPin, Internal Ref. 
    3644:	80 91 66 01 	lds	r24, 0x0166
    3648:	80 6c       	ori	r24, 0xC0	; 192
    364a:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    364e:	80 91 7a 00 	lds	r24, 0x007A
    3652:	80 64       	ori	r24, 0x40	; 64
    3654:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    3658:	80 91 7a 00 	lds	r24, 0x007A
    365c:	86 fd       	sbrc	r24, 6
    365e:	fc cf       	rjmp	.-8      	; 0x3658 <GetESR+0x13c>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    3660:	80 91 7a 00 	lds	r24, 0x007A
    3664:	80 64       	ori	r24, 0x40	; 64
    3666:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    366a:	80 91 7a 00 	lds	r24, 0x007A
    366e:	86 fd       	sbrc	r24, 6
    3670:	fc cf       	rjmp	.-8      	; 0x366a <GetESR+0x14e>
         adcv[0] = ADCW;			// Voltage LowPin with current
    3672:	20 90 78 00 	lds	r2, 0x0078
    3676:	30 90 79 00 	lds	r3, 0x0079
          ADMUX = cap.cb | (1<<REFS1) | (1<<REFS0);      // switch ADC to HighPin, Internal Ref. 
    367a:	80 91 67 01 	lds	r24, 0x0167
    367e:	80 6c       	ori	r24, 0xC0	; 192
    3680:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    3684:	80 91 7a 00 	lds	r24, 0x007A
    3688:	80 64       	ori	r24, 0x40	; 64
    368a:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    368e:	80 91 7a 00 	lds	r24, 0x007A
    3692:	86 fd       	sbrc	r24, 6
    3694:	fc cf       	rjmp	.-8      	; 0x368e <GetESR+0x172>
         ADCSRA |= (1<<ADSC);			// Start Conversion, real start is rising edge of ADC clock
    3696:	80 91 7a 00 	lds	r24, 0x007A
    369a:	80 64       	ori	r24, 0x40	; 64
    369c:	80 93 7a 00 	sts	0x007A, r24
         wait10us();				// 2.5 ADC clocks = 20 us
    36a0:	0e 94 73 14 	call	0x28e6	; 0x28e6 <wait10us>
         wait5us();			
    36a4:	0e 94 74 14 	call	0x28e8	; 0x28e8 <wait5us>
         wait3us();				// with only 17 us delay the voltage goes down before SH
    36a8:	0e 94 76 14 	call	0x28ec	; 0x28ec <wait3us>
         wdt_reset();
    36ac:	a8 95       	wdr
         wdt_reset();
    36ae:	a8 95       	wdr
         wdt_reset();
    36b0:	a8 95       	wdr
         wdt_reset();
    36b2:	a8 95       	wdr
         wdt_reset();
    36b4:	a8 95       	wdr
         wdt_reset();
    36b6:	a8 95       	wdr
//         wdt_reset();				// with wdt_reset the timing can be adjusted,
						// when time is too short, voltage is down before SH of ADC
						// when time is too long, capacitor will be overloaded.
						// That will cause too high voltage without current.
         R_DDR = 0;				// switch current off,  SH is 1.5 ADC clock behind start
    36b8:	14 b8       	out	0x04, r1	; 4
         while (ADCSRA&(1<<ADSC));		// wait for conversion finished
    36ba:	80 91 7a 00 	lds	r24, 0x007A
    36be:	86 fd       	sbrc	r24, 6
    36c0:	fc cf       	rjmp	.-8      	; 0x36ba <GetESR+0x19e>
         adcv[1] = ADCW;			// Voltage HighPin with current
    36c2:	20 91 78 00 	lds	r18, 0x0078
    36c6:	30 91 79 00 	lds	r19, 0x0079
         R_PORT = 0;
    36ca:	15 b8       	out	0x05, r1	; 5
          ADCSRA |= (1<<ADSC);			// Start Conversion
    36cc:	80 91 7a 00 	lds	r24, 0x007A
    36d0:	80 64       	ori	r24, 0x40	; 64
    36d2:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read
    36d6:	80 91 7a 00 	lds	r24, 0x007A
    36da:	86 fd       	sbrc	r24, 6
    36dc:	fc cf       	rjmp	.-8      	; 0x36d6 <GetESR+0x1ba>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    36de:	80 91 7a 00 	lds	r24, 0x007A
    36e2:	80 64       	ori	r24, 0x40	; 64
    36e4:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    36e8:	80 91 7a 00 	lds	r24, 0x007A
    36ec:	86 fd       	sbrc	r24, 6
    36ee:	fc cf       	rjmp	.-8      	; 0x36e8 <GetESR+0x1cc>
         adcv[2] = ADCW;			// Voltage HighPin without current
    36f0:	80 91 78 00 	lds	r24, 0x0078
    36f4:	90 91 79 00 	lds	r25, 0x0079
         if (adcv[2] > 2) break;
    36f8:	83 30       	cpi	r24, 0x03	; 3
    36fa:	91 05       	cpc	r25, r1
    36fc:	10 f4       	brcc	.+4      	; 0x3702 <GetESR+0x1e6>
         wdt_reset();
    36fe:	a8 95       	wdr
      }
    3700:	9f cf       	rjmp	.-194    	; 0x3640 <GetESR+0x124>
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
    3702:	44 24       	eor	r4, r4
    3704:	55 24       	eor	r5, r5
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    3706:	a9 01       	movw	r20, r18
    3708:	60 e0       	ldi	r22, 0x00	; 0
    370a:	70 e0       	ldi	r23, 0x00	; 0
    370c:	49 87       	std	Y+9, r20	; 0x09
    370e:	5a 87       	std	Y+10, r21	; 0x0a
    3710:	6b 87       	std	Y+11, r22	; 0x0b
    3712:	7c 87       	std	Y+12, r23	; 0x0c
      sumvolt[2] += adcv[2]; 			// capacitor voltage without current
    3714:	9c 01       	movw	r18, r24
    3716:	40 e0       	ldi	r20, 0x00	; 0
    3718:	50 e0       	ldi	r21, 0x00	; 0
    371a:	2d 87       	std	Y+13, r18	; 0x0d
    371c:	3e 87       	std	Y+14, r19	; 0x0e
    371e:	4f 87       	std	Y+15, r20	; 0x0f
    3720:	58 8b       	std	Y+16, r21	; 0x10
      ADC_DDR = HiADC;				// switch High Pin to GND
    3722:	b7 b8       	out	0x07, r11	; 7
       ADCSRA |= (1<<ADSC);			// Start Conversion
    3724:	80 91 7a 00 	lds	r24, 0x007A
    3728:	80 64       	ori	r24, 0x40	; 64
    372a:	80 93 7a 00 	sts	0x007A, r24
       while (ADCSRA&(1<<ADSC));		// wait dummy read
    372e:	80 91 7a 00 	lds	r24, 0x007A
    3732:	86 fd       	sbrc	r24, 6
    3734:	fc cf       	rjmp	.-8      	; 0x372e <GetESR+0x212>
      while (1) {
         R_PORT = LoPinR_L;
    3736:	a5 b8       	out	0x05, r10	; 5
         R_DDR = LoPinR_L;			// switch LowPin with 680 Ohm to VCC
    3738:	a4 b8       	out	0x04, r10	; 4
         wdt_reset();
    373a:	a8 95       	wdr
          ADMUX = cap.cb | (1<<REFS1) | (1<<REFS0);      // switch ADC to HighPin, Internal Ref. 
    373c:	80 91 67 01 	lds	r24, 0x0167
    3740:	80 6c       	ori	r24, 0xC0	; 192
    3742:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    3746:	80 91 7a 00 	lds	r24, 0x007A
    374a:	80 64       	ori	r24, 0x40	; 64
    374c:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    3750:	80 91 7a 00 	lds	r24, 0x007A
    3754:	86 fd       	sbrc	r24, 6
    3756:	fc cf       	rjmp	.-8      	; 0x3750 <GetESR+0x234>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    3758:	80 91 7a 00 	lds	r24, 0x007A
    375c:	80 64       	ori	r24, 0x40	; 64
    375e:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    3762:	80 91 7a 00 	lds	r24, 0x007A
    3766:	86 fd       	sbrc	r24, 6
    3768:	fc cf       	rjmp	.-8      	; 0x3762 <GetESR+0x246>
         adcv[0] = ADCW;			// Voltage HighPin with current
    376a:	80 90 78 00 	lds	r8, 0x0078
    376e:	90 90 79 00 	lds	r9, 0x0079
          ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);      // switch ADC to LowPin, Internal Ref. 
    3772:	80 91 66 01 	lds	r24, 0x0166
    3776:	80 6c       	ori	r24, 0xC0	; 192
    3778:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    377c:	80 91 7a 00 	lds	r24, 0x007A
    3780:	80 64       	ori	r24, 0x40	; 64
    3782:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    3786:	80 91 7a 00 	lds	r24, 0x007A
    378a:	86 fd       	sbrc	r24, 6
    378c:	fc cf       	rjmp	.-8      	; 0x3786 <GetESR+0x26a>
         ADCSRA |= (1<<ADSC);			// Start Conversion, real start is rising edge of ADC clock
    378e:	80 91 7a 00 	lds	r24, 0x007A
    3792:	80 64       	ori	r24, 0x40	; 64
    3794:	80 93 7a 00 	sts	0x007A, r24
         wait10us();				// 2.5 ADC clocks = 20 us
    3798:	0e 94 73 14 	call	0x28e6	; 0x28e6 <wait10us>
         wait5us();			
    379c:	0e 94 74 14 	call	0x28e8	; 0x28e8 <wait5us>
         wait3us();				// with only 17 us delay the voltage goes down before SH
    37a0:	0e 94 76 14 	call	0x28ec	; 0x28ec <wait3us>
         wdt_reset();
    37a4:	a8 95       	wdr
         wdt_reset();
    37a6:	a8 95       	wdr
         wdt_reset();
    37a8:	a8 95       	wdr
         wdt_reset();
    37aa:	a8 95       	wdr
         wdt_reset();
    37ac:	a8 95       	wdr
         wdt_reset();
    37ae:	a8 95       	wdr
//         wdt_reset();				// with wdt_reset the timing can be adjusted,
						// when time is too short, voltage is down before SH of ADC
						// when time is too long, capacitor will be overloaded.
						// That will cause too high voltage without current.
         R_DDR = 0;				// switch current off, SH is 1.5 ADC clock ticks behind start
    37b0:	14 b8       	out	0x04, r1	; 4
         while (ADCSRA&(1<<ADSC));		// wait for conversion finished
    37b2:	80 91 7a 00 	lds	r24, 0x007A
    37b6:	86 fd       	sbrc	r24, 6
    37b8:	fc cf       	rjmp	.-8      	; 0x37b2 <GetESR+0x296>
         adcv[1] = ADCW;			//  Voltage LowPin with current
    37ba:	40 91 78 00 	lds	r20, 0x0078
    37be:	50 91 79 00 	lds	r21, 0x0079
         R_PORT = 0;
    37c2:	15 b8       	out	0x05, r1	; 5
          ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);      // switch ADC to LowPin, Internal Ref. 
    37c4:	80 91 66 01 	lds	r24, 0x0166
    37c8:	80 6c       	ori	r24, 0xC0	; 192
    37ca:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);		// Start Conversion
    37ce:	80 91 7a 00 	lds	r24, 0x007A
    37d2:	80 64       	ori	r24, 0x40	; 64
    37d4:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read
    37d8:	80 91 7a 00 	lds	r24, 0x007A
    37dc:	86 fd       	sbrc	r24, 6
    37de:	fc cf       	rjmp	.-8      	; 0x37d8 <GetESR+0x2bc>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    37e0:	80 91 7a 00 	lds	r24, 0x007A
    37e4:	80 64       	ori	r24, 0x40	; 64
    37e6:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    37ea:	80 91 7a 00 	lds	r24, 0x007A
    37ee:	86 fd       	sbrc	r24, 6
    37f0:	fc cf       	rjmp	.-8      	; 0x37ea <GetESR+0x2ce>
         adcv[2] = ADCW;			// Voltage LowPin without current
    37f2:	20 91 78 00 	lds	r18, 0x0078
    37f6:	30 91 79 00 	lds	r19, 0x0079
         if (adcv[2] > 2) break;
    37fa:	23 30       	cpi	r18, 0x03	; 3
    37fc:	31 05       	cpc	r19, r1
    37fe:	10 f4       	brcc	.+4      	; 0x3804 <GetESR+0x2e8>
         wdt_reset();
    3800:	a8 95       	wdr
      }
    3802:	99 cf       	rjmp	.-206    	; 0x3736 <GetESR+0x21a>
      R_DDR = 0;				// switch current off
    3804:	14 b8       	out	0x04, r1	; 4
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
    3806:	c4 01       	movw	r24, r8
    3808:	a0 e0       	ldi	r26, 0x00	; 0
    380a:	b0 e0       	ldi	r27, 0x00	; 0
         while (ADCSRA&(1<<ADSC));		// wait
         adcv[2] = ADCW;			// Voltage HighPin without current
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
    380c:	82 0d       	add	r24, r2
    380e:	93 1d       	adc	r25, r3
    3810:	a4 1d       	adc	r26, r4
    3812:	b5 1d       	adc	r27, r5
         adcv[2] = ADCW;			// Voltage LowPin without current
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      R_DDR = 0;				// switch current off
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
    3814:	e8 0e       	add	r14, r24
    3816:	f9 1e       	adc	r15, r25
    3818:	0a 1f       	adc	r16, r26
    381a:	1b 1f       	adc	r17, r27
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    381c:	ca 01       	movw	r24, r20
    381e:	a0 e0       	ldi	r26, 0x00	; 0
    3820:	b0 e0       	ldi	r27, 0x00	; 0
         adcv[2] = ADCW;			// Voltage HighPin without current
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    3822:	49 85       	ldd	r20, Y+9	; 0x09
    3824:	5a 85       	ldd	r21, Y+10	; 0x0a
    3826:	6b 85       	ldd	r22, Y+11	; 0x0b
    3828:	7c 85       	ldd	r23, Y+12	; 0x0c
    382a:	84 0f       	add	r24, r20
    382c:	95 1f       	adc	r25, r21
    382e:	a6 1f       	adc	r26, r22
    3830:	b7 1f       	adc	r27, r23
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      R_DDR = 0;				// switch current off
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    3832:	49 81       	ldd	r20, Y+1	; 0x01
    3834:	5a 81       	ldd	r21, Y+2	; 0x02
    3836:	6b 81       	ldd	r22, Y+3	; 0x03
    3838:	7c 81       	ldd	r23, Y+4	; 0x04
    383a:	48 0f       	add	r20, r24
    383c:	59 1f       	adc	r21, r25
    383e:	6a 1f       	adc	r22, r26
    3840:	7b 1f       	adc	r23, r27
    3842:	49 83       	std	Y+1, r20	; 0x01
    3844:	5a 83       	std	Y+2, r21	; 0x02
    3846:	6b 83       	std	Y+3, r22	; 0x03
    3848:	7c 83       	std	Y+4, r23	; 0x04
      sumvolt[2] += adcv[2];			// add  HighPin voltages without current
    384a:	40 e0       	ldi	r20, 0x00	; 0
    384c:	50 e0       	ldi	r21, 0x00	; 0
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
      sumvolt[2] += adcv[2]; 			// capacitor voltage without current
    384e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3850:	7e 85       	ldd	r23, Y+14	; 0x0e
    3852:	8f 85       	ldd	r24, Y+15	; 0x0f
    3854:	98 89       	ldd	r25, Y+16	; 0x10
    3856:	26 0f       	add	r18, r22
    3858:	37 1f       	adc	r19, r23
    385a:	48 1f       	adc	r20, r24
    385c:	59 1f       	adc	r21, r25
         wdt_reset();
      }
      R_DDR = 0;				// switch current off
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
      sumvolt[2] += adcv[2];			// add  HighPin voltages without current
    385e:	8d 81       	ldd	r24, Y+5	; 0x05
    3860:	9e 81       	ldd	r25, Y+6	; 0x06
    3862:	af 81       	ldd	r26, Y+7	; 0x07
    3864:	b8 85       	ldd	r27, Y+8	; 0x08
    3866:	82 0f       	add	r24, r18
    3868:	93 1f       	adc	r25, r19
    386a:	a4 1f       	adc	r26, r20
    386c:	b5 1f       	adc	r27, r21
    386e:	8d 83       	std	Y+5, r24	; 0x05
    3870:	9e 83       	std	Y+6, r25	; 0x06
    3872:	af 83       	std	Y+7, r26	; 0x07
    3874:	b8 87       	std	Y+8, r27	; 0x08
   sumvolt[2] = 0;		// clear sum of HighPin voltage without current
   EntladePins();	// discharge capacitor
   ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
// measurement frequency is given by sum of ADC-Reads < 680 Hz
   // ADC Sample and Hold (SH) is done 1.5 ADC clock number after starting 
   for(ii=0;ii<MAX_CNT;ii++) {
    3876:	63 94       	inc	r6
    3878:	96 2d       	mov	r25, r6
    387a:	90 38       	cpi	r25, 0x80	; 128
    387c:	09 f0       	breq	.+2      	; 0x3880 <GetESR+0x364>
    387e:	d1 ce       	rjmp	.-606    	; 0x3622 <GetESR+0x106>
   } // end for
   // we need to compensate the time delay between reading the LowPin Voltage and the
   // HighPin Voltage, which is usually 2 * 14 * 8 us = 224 us.
   // With the loading of the capacitor the current will sink, so we get a too high voltage at
   // the LowPin. The velocity of degration is inversely proportional to time constant (represented by capacity value).
   sumvolt[0] -= (sumvolt[0] * 150UL)  / cap.cval_max;
    3880:	c8 01       	movw	r24, r16
    3882:	b7 01       	movw	r22, r14
    3884:	26 e9       	ldi	r18, 0x96	; 150
    3886:	30 e0       	ldi	r19, 0x00	; 0
    3888:	40 e0       	ldi	r20, 0x00	; 0
    388a:	50 e0       	ldi	r21, 0x00	; 0
    388c:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
    3890:	20 91 5c 01 	lds	r18, 0x015C
    3894:	30 91 5d 01 	lds	r19, 0x015D
    3898:	40 91 5e 01 	lds	r20, 0x015E
    389c:	50 91 5f 01 	lds	r21, 0x015F
    38a0:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
    38a4:	57 01       	movw	r10, r14
    38a6:	68 01       	movw	r12, r16
    38a8:	a2 1a       	sub	r10, r18
    38aa:	b3 0a       	sbc	r11, r19
    38ac:	c4 0a       	sbc	r12, r20
    38ae:	d5 0a       	sbc	r13, r21
   esr0 = (int8_t)eeprom_read_byte(&EE_ESR_ZERO);
    38b0:	8f e6       	ldi	r24, 0x6F	; 111
    38b2:	92 e0       	ldi	r25, 0x02	; 2
    38b4:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <__eerd_byte_m328p>
    38b8:	28 2e       	mov	r2, r24
   sumvolt[0] += (((long)sumvolt[0] * esr0) / ((RR680MI - R_L_VAL) * 10)); // subtract 0.23 Ohm from ESR
    38ba:	40 90 02 01 	lds	r4, 0x0102
    38be:	50 90 03 01 	lds	r5, 0x0103
    38c2:	68 2f       	mov	r22, r24
    38c4:	77 27       	eor	r23, r23
    38c6:	67 fd       	sbrc	r22, 7
    38c8:	70 95       	com	r23
    38ca:	87 2f       	mov	r24, r23
    38cc:	97 2f       	mov	r25, r23
    38ce:	a6 01       	movw	r20, r12
    38d0:	95 01       	movw	r18, r10
    38d2:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
    38d6:	92 01       	movw	r18, r4
    38d8:	22 0f       	add	r18, r18
    38da:	33 1f       	adc	r19, r19
    38dc:	a2 01       	movw	r20, r4
    38de:	e3 e0       	ldi	r30, 0x03	; 3
    38e0:	44 0f       	add	r20, r20
    38e2:	55 1f       	adc	r21, r21
    38e4:	ea 95       	dec	r30
    38e6:	e1 f7       	brne	.-8      	; 0x38e0 <GetESR+0x3c4>
    38e8:	24 0f       	add	r18, r20
    38ea:	35 1f       	adc	r19, r21
    38ec:	20 5a       	subi	r18, 0xA0	; 160
    38ee:	39 40       	sbci	r19, 0x09	; 9
    38f0:	40 e0       	ldi	r20, 0x00	; 0
    38f2:	50 e0       	ldi	r21, 0x00	; 0
    38f4:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <__divmodsi4>
    38f8:	79 01       	movw	r14, r18
    38fa:	8a 01       	movw	r16, r20
    38fc:	ea 0c       	add	r14, r10
    38fe:	fb 1c       	adc	r15, r11
    3900:	0c 1d       	adc	r16, r12
    3902:	1d 1d       	adc	r17, r13
   if (sumvolt[1] > sumvolt[0]) {
    3904:	29 81       	ldd	r18, Y+1	; 0x01
    3906:	3a 81       	ldd	r19, Y+2	; 0x02
    3908:	4b 81       	ldd	r20, Y+3	; 0x03
    390a:	5c 81       	ldd	r21, Y+4	; 0x04
    390c:	e2 16       	cp	r14, r18
    390e:	f3 06       	cpc	r15, r19
    3910:	04 07       	cpc	r16, r20
    3912:	15 07       	cpc	r17, r21
    3914:	38 f4       	brcc	.+14     	; 0x3924 <GetESR+0x408>
      sumvolt[1] -= sumvolt[0];		// difference HighPin - LowPin Voltage with current
    3916:	59 01       	movw	r10, r18
    3918:	6a 01       	movw	r12, r20
    391a:	ae 18       	sub	r10, r14
    391c:	bf 08       	sbc	r11, r15
    391e:	c0 0a       	sbc	r12, r16
    3920:	d1 0a       	sbc	r13, r17
    3922:	03 c0       	rjmp	.+6      	; 0x392a <GetESR+0x40e>
   } else {
      sumvolt[1] = 0;
    3924:	aa 24       	eor	r10, r10
    3926:	bb 24       	eor	r11, r11
    3928:	65 01       	movw	r12, r10
   }
   sumvolt[2] = (sumvolt[2] * 980) / 1000;	// scale down the voltage without current with 98.0%
    392a:	6d 81       	ldd	r22, Y+5	; 0x05
    392c:	7e 81       	ldd	r23, Y+6	; 0x06
    392e:	8f 81       	ldd	r24, Y+7	; 0x07
    3930:	98 85       	ldd	r25, Y+8	; 0x08
    3932:	24 ed       	ldi	r18, 0xD4	; 212
    3934:	33 e0       	ldi	r19, 0x03	; 3
    3936:	40 e0       	ldi	r20, 0x00	; 0
    3938:	50 e0       	ldi	r21, 0x00	; 0
    393a:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
    393e:	28 ee       	ldi	r18, 0xE8	; 232
    3940:	33 e0       	ldi	r19, 0x03	; 3
    3942:	40 e0       	ldi	r20, 0x00	; 0
    3944:	50 e0       	ldi	r21, 0x00	; 0
    3946:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
    394a:	39 01       	movw	r6, r18
    394c:	4a 01       	movw	r8, r20
    394e:	b2 01       	movw	r22, r4
    3950:	60 59       	subi	r22, 0x90	; 144
    3952:	7a 41       	sbci	r23, 0x1A	; 26
   jj = 0;
   if (sumvolt[1] >= sumvolt[2]) {
    3954:	a2 16       	cp	r10, r18
    3956:	b3 06       	cpc	r11, r19
    3958:	c4 06       	cpc	r12, r20
    395a:	d5 06       	cpc	r13, r21
    395c:	08 f1       	brcs	.+66     	; 0x39a0 <GetESR+0x484>
      // mean voltage at the capacitor is higher with current
      // sumvolt[0] is the sum of voltages at LowPin, caused by output resistance of Port
      // (RR680MI - R_L_VAL) is the port output resistance in 0.1 Ohm units.
      // we scale up the difference voltage with 10 to get 0.01 Ohm units of ESR
      cap.esr = ((sumvolt[1] - sumvolt[2]) * 10 * (unsigned long)(RR680MI - R_L_VAL)) / sumvolt[0];
    395e:	80 e0       	ldi	r24, 0x00	; 0
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	2a e0       	ldi	r18, 0x0A	; 10
    3964:	30 e0       	ldi	r19, 0x00	; 0
    3966:	40 e0       	ldi	r20, 0x00	; 0
    3968:	50 e0       	ldi	r21, 0x00	; 0
    396a:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
    396e:	a6 01       	movw	r20, r12
    3970:	95 01       	movw	r18, r10
    3972:	26 19       	sub	r18, r6
    3974:	37 09       	sbc	r19, r7
    3976:	48 09       	sbc	r20, r8
    3978:	59 09       	sbc	r21, r9
    397a:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
    397e:	a8 01       	movw	r20, r16
    3980:	97 01       	movw	r18, r14
    3982:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
    3986:	30 93 65 01 	sts	0x0165, r19
    398a:	20 93 64 01 	sts	0x0164, r18
      DisplayValue(cap.esr,-2,LCD_CHAR_OMEGA,2);
    398e:	b9 01       	movw	r22, r18
    3990:	80 e0       	ldi	r24, 0x00	; 0
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	4e ef       	ldi	r20, 0xFE	; 254
    3996:	24 ef       	ldi	r18, 0xF4	; 244
    3998:	02 e0       	ldi	r16, 0x02	; 2
    399a:	0e 94 0a 09 	call	0x1214	; 0x1214 <DisplayValue>
    399e:	25 c0       	rjmp	.+74     	; 0x39ea <GetESR+0x4ce>
   } else {
      jj = ((sumvolt[2] - sumvolt[1]) * 10 * (unsigned long)(RR680MI - R_L_VAL)) / sumvolt[0];
    39a0:	80 e0       	ldi	r24, 0x00	; 0
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	2a e0       	ldi	r18, 0x0A	; 10
    39a6:	30 e0       	ldi	r19, 0x00	; 0
    39a8:	40 e0       	ldi	r20, 0x00	; 0
    39aa:	50 e0       	ldi	r21, 0x00	; 0
    39ac:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
    39b0:	a4 01       	movw	r20, r8
    39b2:	93 01       	movw	r18, r6
    39b4:	2a 19       	sub	r18, r10
    39b6:	3b 09       	sbc	r19, r11
    39b8:	4c 09       	sbc	r20, r12
    39ba:	5d 09       	sbc	r21, r13
    39bc:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <__mulsi3>
    39c0:	a8 01       	movw	r20, r16
    39c2:	97 01       	movw	r18, r14
    39c4:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__udivmodsi4>
    39c8:	12 2f       	mov	r17, r18
      lcd_data('0');
    39ca:	80 e3       	ldi	r24, 0x30	; 48
    39cc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
      if ((jj < 100) && (jj > 0)) {
    39d0:	81 2f       	mov	r24, r17
    39d2:	81 50       	subi	r24, 0x01	; 1
    39d4:	83 36       	cpi	r24, 0x63	; 99
    39d6:	48 f4       	brcc	.+18     	; 0x39ea <GetESR+0x4ce>
         lcd_data('?');			// mark ESR zero correction
    39d8:	8f e3       	ldi	r24, 0x3F	; 63
    39da:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_data>
         esr0 -= jj;			// correct ESR_ZERO by negative resistance
    39de:	62 2d       	mov	r22, r2
    39e0:	61 1b       	sub	r22, r17
         eeprom_write_byte((uint8_t *)(&EE_ESR_ZERO), (int8_t)esr0);       // fix new zero offset 
    39e2:	8f e6       	ldi	r24, 0x6F	; 111
    39e4:	92 e0       	ldi	r25, 0x02	; 2
    39e6:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__eewr_byte_m328p>
//   lcd_line3();
//   DisplayValue(jj,0,' ',4);	// correction for ESR_ZERO
//   DisplayValue(1000+esr0,0,' ',4);	// new ESR_ZERO
#endif
  return;
}
    39ea:	60 96       	adiw	r28, 0x10	; 16
    39ec:	0f b6       	in	r0, 0x3f	; 63
    39ee:	f8 94       	cli
    39f0:	de bf       	out	0x3e, r29	; 62
    39f2:	0f be       	out	0x3f, r0	; 63
    39f4:	cd bf       	out	0x3d, r28	; 61
    39f6:	cf 91       	pop	r28
    39f8:	df 91       	pop	r29
    39fa:	1f 91       	pop	r17
    39fc:	0f 91       	pop	r16
    39fe:	ff 90       	pop	r15
    3a00:	ef 90       	pop	r14
    3a02:	df 90       	pop	r13
    3a04:	cf 90       	pop	r12
    3a06:	bf 90       	pop	r11
    3a08:	af 90       	pop	r10
    3a0a:	9f 90       	pop	r9
    3a0c:	8f 90       	pop	r8
    3a0e:	7f 90       	pop	r7
    3a10:	6f 90       	pop	r6
    3a12:	5f 90       	pop	r5
    3a14:	4f 90       	pop	r4
    3a16:	3f 90       	pop	r3
    3a18:	2f 90       	pop	r2
    3a1a:	08 95       	ret

00003a1c <__mulsi3>:
    3a1c:	62 9f       	mul	r22, r18
    3a1e:	d0 01       	movw	r26, r0
    3a20:	73 9f       	mul	r23, r19
    3a22:	f0 01       	movw	r30, r0
    3a24:	82 9f       	mul	r24, r18
    3a26:	e0 0d       	add	r30, r0
    3a28:	f1 1d       	adc	r31, r1
    3a2a:	64 9f       	mul	r22, r20
    3a2c:	e0 0d       	add	r30, r0
    3a2e:	f1 1d       	adc	r31, r1
    3a30:	92 9f       	mul	r25, r18
    3a32:	f0 0d       	add	r31, r0
    3a34:	83 9f       	mul	r24, r19
    3a36:	f0 0d       	add	r31, r0
    3a38:	74 9f       	mul	r23, r20
    3a3a:	f0 0d       	add	r31, r0
    3a3c:	65 9f       	mul	r22, r21
    3a3e:	f0 0d       	add	r31, r0
    3a40:	99 27       	eor	r25, r25
    3a42:	72 9f       	mul	r23, r18
    3a44:	b0 0d       	add	r27, r0
    3a46:	e1 1d       	adc	r30, r1
    3a48:	f9 1f       	adc	r31, r25
    3a4a:	63 9f       	mul	r22, r19
    3a4c:	b0 0d       	add	r27, r0
    3a4e:	e1 1d       	adc	r30, r1
    3a50:	f9 1f       	adc	r31, r25
    3a52:	bd 01       	movw	r22, r26
    3a54:	cf 01       	movw	r24, r30
    3a56:	11 24       	eor	r1, r1
    3a58:	08 95       	ret

00003a5a <__udivmodqi4>:
    3a5a:	99 1b       	sub	r25, r25
    3a5c:	79 e0       	ldi	r23, 0x09	; 9
    3a5e:	04 c0       	rjmp	.+8      	; 0x3a68 <__udivmodqi4_ep>

00003a60 <__udivmodqi4_loop>:
    3a60:	99 1f       	adc	r25, r25
    3a62:	96 17       	cp	r25, r22
    3a64:	08 f0       	brcs	.+2      	; 0x3a68 <__udivmodqi4_ep>
    3a66:	96 1b       	sub	r25, r22

00003a68 <__udivmodqi4_ep>:
    3a68:	88 1f       	adc	r24, r24
    3a6a:	7a 95       	dec	r23
    3a6c:	c9 f7       	brne	.-14     	; 0x3a60 <__udivmodqi4_loop>
    3a6e:	80 95       	com	r24
    3a70:	08 95       	ret

00003a72 <__udivmodhi4>:
    3a72:	aa 1b       	sub	r26, r26
    3a74:	bb 1b       	sub	r27, r27
    3a76:	51 e1       	ldi	r21, 0x11	; 17
    3a78:	07 c0       	rjmp	.+14     	; 0x3a88 <__udivmodhi4_ep>

00003a7a <__udivmodhi4_loop>:
    3a7a:	aa 1f       	adc	r26, r26
    3a7c:	bb 1f       	adc	r27, r27
    3a7e:	a6 17       	cp	r26, r22
    3a80:	b7 07       	cpc	r27, r23
    3a82:	10 f0       	brcs	.+4      	; 0x3a88 <__udivmodhi4_ep>
    3a84:	a6 1b       	sub	r26, r22
    3a86:	b7 0b       	sbc	r27, r23

00003a88 <__udivmodhi4_ep>:
    3a88:	88 1f       	adc	r24, r24
    3a8a:	99 1f       	adc	r25, r25
    3a8c:	5a 95       	dec	r21
    3a8e:	a9 f7       	brne	.-22     	; 0x3a7a <__udivmodhi4_loop>
    3a90:	80 95       	com	r24
    3a92:	90 95       	com	r25
    3a94:	bc 01       	movw	r22, r24
    3a96:	cd 01       	movw	r24, r26
    3a98:	08 95       	ret

00003a9a <__udivmodsi4>:
    3a9a:	a1 e2       	ldi	r26, 0x21	; 33
    3a9c:	1a 2e       	mov	r1, r26
    3a9e:	aa 1b       	sub	r26, r26
    3aa0:	bb 1b       	sub	r27, r27
    3aa2:	fd 01       	movw	r30, r26
    3aa4:	0d c0       	rjmp	.+26     	; 0x3ac0 <__udivmodsi4_ep>

00003aa6 <__udivmodsi4_loop>:
    3aa6:	aa 1f       	adc	r26, r26
    3aa8:	bb 1f       	adc	r27, r27
    3aaa:	ee 1f       	adc	r30, r30
    3aac:	ff 1f       	adc	r31, r31
    3aae:	a2 17       	cp	r26, r18
    3ab0:	b3 07       	cpc	r27, r19
    3ab2:	e4 07       	cpc	r30, r20
    3ab4:	f5 07       	cpc	r31, r21
    3ab6:	20 f0       	brcs	.+8      	; 0x3ac0 <__udivmodsi4_ep>
    3ab8:	a2 1b       	sub	r26, r18
    3aba:	b3 0b       	sbc	r27, r19
    3abc:	e4 0b       	sbc	r30, r20
    3abe:	f5 0b       	sbc	r31, r21

00003ac0 <__udivmodsi4_ep>:
    3ac0:	66 1f       	adc	r22, r22
    3ac2:	77 1f       	adc	r23, r23
    3ac4:	88 1f       	adc	r24, r24
    3ac6:	99 1f       	adc	r25, r25
    3ac8:	1a 94       	dec	r1
    3aca:	69 f7       	brne	.-38     	; 0x3aa6 <__udivmodsi4_loop>
    3acc:	60 95       	com	r22
    3ace:	70 95       	com	r23
    3ad0:	80 95       	com	r24
    3ad2:	90 95       	com	r25
    3ad4:	9b 01       	movw	r18, r22
    3ad6:	ac 01       	movw	r20, r24
    3ad8:	bd 01       	movw	r22, r26
    3ada:	cf 01       	movw	r24, r30
    3adc:	08 95       	ret

00003ade <__divmodsi4>:
    3ade:	97 fb       	bst	r25, 7
    3ae0:	09 2e       	mov	r0, r25
    3ae2:	05 26       	eor	r0, r21
    3ae4:	0e d0       	rcall	.+28     	; 0x3b02 <__divmodsi4_neg1>
    3ae6:	57 fd       	sbrc	r21, 7
    3ae8:	04 d0       	rcall	.+8      	; 0x3af2 <__divmodsi4_neg2>
    3aea:	d7 df       	rcall	.-82     	; 0x3a9a <__udivmodsi4>
    3aec:	0a d0       	rcall	.+20     	; 0x3b02 <__divmodsi4_neg1>
    3aee:	00 1c       	adc	r0, r0
    3af0:	38 f4       	brcc	.+14     	; 0x3b00 <__divmodsi4_exit>

00003af2 <__divmodsi4_neg2>:
    3af2:	50 95       	com	r21
    3af4:	40 95       	com	r20
    3af6:	30 95       	com	r19
    3af8:	21 95       	neg	r18
    3afa:	3f 4f       	sbci	r19, 0xFF	; 255
    3afc:	4f 4f       	sbci	r20, 0xFF	; 255
    3afe:	5f 4f       	sbci	r21, 0xFF	; 255

00003b00 <__divmodsi4_exit>:
    3b00:	08 95       	ret

00003b02 <__divmodsi4_neg1>:
    3b02:	f6 f7       	brtc	.-4      	; 0x3b00 <__divmodsi4_exit>
    3b04:	90 95       	com	r25
    3b06:	80 95       	com	r24
    3b08:	70 95       	com	r23
    3b0a:	61 95       	neg	r22
    3b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    3b0e:	8f 4f       	sbci	r24, 0xFF	; 255
    3b10:	9f 4f       	sbci	r25, 0xFF	; 255
    3b12:	08 95       	ret

00003b14 <itoa>:
    3b14:	fb 01       	movw	r30, r22
    3b16:	9f 01       	movw	r18, r30
    3b18:	e8 94       	clt
    3b1a:	42 30       	cpi	r20, 0x02	; 2
    3b1c:	c4 f0       	brlt	.+48     	; 0x3b4e <itoa+0x3a>
    3b1e:	45 32       	cpi	r20, 0x25	; 37
    3b20:	b4 f4       	brge	.+44     	; 0x3b4e <itoa+0x3a>
    3b22:	4a 30       	cpi	r20, 0x0A	; 10
    3b24:	29 f4       	brne	.+10     	; 0x3b30 <itoa+0x1c>
    3b26:	97 fb       	bst	r25, 7
    3b28:	1e f4       	brtc	.+6      	; 0x3b30 <itoa+0x1c>
    3b2a:	90 95       	com	r25
    3b2c:	81 95       	neg	r24
    3b2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3b30:	64 2f       	mov	r22, r20
    3b32:	77 27       	eor	r23, r23
    3b34:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__udivmodhi4>
    3b38:	80 5d       	subi	r24, 0xD0	; 208
    3b3a:	8a 33       	cpi	r24, 0x3A	; 58
    3b3c:	0c f0       	brlt	.+2      	; 0x3b40 <itoa+0x2c>
    3b3e:	89 5d       	subi	r24, 0xD9	; 217
    3b40:	81 93       	st	Z+, r24
    3b42:	cb 01       	movw	r24, r22
    3b44:	00 97       	sbiw	r24, 0x00	; 0
    3b46:	a1 f7       	brne	.-24     	; 0x3b30 <itoa+0x1c>
    3b48:	16 f4       	brtc	.+4      	; 0x3b4e <itoa+0x3a>
    3b4a:	5d e2       	ldi	r21, 0x2D	; 45
    3b4c:	51 93       	st	Z+, r21
    3b4e:	10 82       	st	Z, r1
    3b50:	c9 01       	movw	r24, r18
    3b52:	0c 94 e2 1d 	jmp	0x3bc4	; 0x3bc4 <strrev>

00003b56 <utoa>:
    3b56:	fb 01       	movw	r30, r22
    3b58:	9f 01       	movw	r18, r30
    3b5a:	42 30       	cpi	r20, 0x02	; 2
    3b5c:	74 f0       	brlt	.+28     	; 0x3b7a <utoa+0x24>
    3b5e:	45 32       	cpi	r20, 0x25	; 37
    3b60:	64 f4       	brge	.+24     	; 0x3b7a <utoa+0x24>
    3b62:	64 2f       	mov	r22, r20
    3b64:	77 27       	eor	r23, r23
    3b66:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <__udivmodhi4>
    3b6a:	80 5d       	subi	r24, 0xD0	; 208
    3b6c:	8a 33       	cpi	r24, 0x3A	; 58
    3b6e:	0c f0       	brlt	.+2      	; 0x3b72 <utoa+0x1c>
    3b70:	89 5d       	subi	r24, 0xD9	; 217
    3b72:	81 93       	st	Z+, r24
    3b74:	cb 01       	movw	r24, r22
    3b76:	00 97       	sbiw	r24, 0x00	; 0
    3b78:	a1 f7       	brne	.-24     	; 0x3b62 <utoa+0xc>
    3b7a:	10 82       	st	Z, r1
    3b7c:	c9 01       	movw	r24, r18
    3b7e:	0c 94 e2 1d 	jmp	0x3bc4	; 0x3bc4 <strrev>

00003b82 <__eerd_byte_m328p>:
    3b82:	f9 99       	sbic	0x1f, 1	; 31
    3b84:	fe cf       	rjmp	.-4      	; 0x3b82 <__eerd_byte_m328p>
    3b86:	92 bd       	out	0x22, r25	; 34
    3b88:	81 bd       	out	0x21, r24	; 33
    3b8a:	f8 9a       	sbi	0x1f, 0	; 31
    3b8c:	99 27       	eor	r25, r25
    3b8e:	80 b5       	in	r24, 0x20	; 32
    3b90:	08 95       	ret

00003b92 <__eerd_word_m328p>:
    3b92:	a8 e1       	ldi	r26, 0x18	; 24
    3b94:	b0 e0       	ldi	r27, 0x00	; 0
    3b96:	42 e0       	ldi	r20, 0x02	; 2
    3b98:	50 e0       	ldi	r21, 0x00	; 0
    3b9a:	0c 94 f4 1d 	jmp	0x3be8	; 0x3be8 <__eerd_blraw_m328p>

00003b9e <__eewr_byte_m328p>:
    3b9e:	26 2f       	mov	r18, r22

00003ba0 <__eewr_r18_m328p>:
    3ba0:	f9 99       	sbic	0x1f, 1	; 31
    3ba2:	fe cf       	rjmp	.-4      	; 0x3ba0 <__eewr_r18_m328p>
    3ba4:	1f ba       	out	0x1f, r1	; 31
    3ba6:	92 bd       	out	0x22, r25	; 34
    3ba8:	81 bd       	out	0x21, r24	; 33
    3baa:	20 bd       	out	0x20, r18	; 32
    3bac:	0f b6       	in	r0, 0x3f	; 63
    3bae:	f8 94       	cli
    3bb0:	fa 9a       	sbi	0x1f, 2	; 31
    3bb2:	f9 9a       	sbi	0x1f, 1	; 31
    3bb4:	0f be       	out	0x3f, r0	; 63
    3bb6:	01 96       	adiw	r24, 0x01	; 1
    3bb8:	08 95       	ret

00003bba <__eewr_word_m328p>:
    3bba:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__eewr_byte_m328p>
    3bbe:	27 2f       	mov	r18, r23
    3bc0:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <__eewr_r18_m328p>

00003bc4 <strrev>:
    3bc4:	dc 01       	movw	r26, r24
    3bc6:	fc 01       	movw	r30, r24
    3bc8:	67 2f       	mov	r22, r23
    3bca:	71 91       	ld	r23, Z+
    3bcc:	77 23       	and	r23, r23
    3bce:	e1 f7       	brne	.-8      	; 0x3bc8 <strrev+0x4>
    3bd0:	32 97       	sbiw	r30, 0x02	; 2
    3bd2:	04 c0       	rjmp	.+8      	; 0x3bdc <strrev+0x18>
    3bd4:	7c 91       	ld	r23, X
    3bd6:	6d 93       	st	X+, r22
    3bd8:	70 83       	st	Z, r23
    3bda:	62 91       	ld	r22, -Z
    3bdc:	ae 17       	cp	r26, r30
    3bde:	bf 07       	cpc	r27, r31
    3be0:	c8 f3       	brcs	.-14     	; 0x3bd4 <strrev+0x10>
    3be2:	08 95       	ret

00003be4 <__eerd_block_m328p>:
    3be4:	dc 01       	movw	r26, r24
    3be6:	cb 01       	movw	r24, r22

00003be8 <__eerd_blraw_m328p>:
    3be8:	fc 01       	movw	r30, r24
    3bea:	f9 99       	sbic	0x1f, 1	; 31
    3bec:	fe cf       	rjmp	.-4      	; 0x3bea <__eerd_blraw_m328p+0x2>
    3bee:	06 c0       	rjmp	.+12     	; 0x3bfc <__eerd_blraw_m328p+0x14>
    3bf0:	f2 bd       	out	0x22, r31	; 34
    3bf2:	e1 bd       	out	0x21, r30	; 33
    3bf4:	f8 9a       	sbi	0x1f, 0	; 31
    3bf6:	31 96       	adiw	r30, 0x01	; 1
    3bf8:	00 b4       	in	r0, 0x20	; 32
    3bfa:	0d 92       	st	X+, r0
    3bfc:	41 50       	subi	r20, 0x01	; 1
    3bfe:	50 40       	sbci	r21, 0x00	; 0
    3c00:	b8 f7       	brcc	.-18     	; 0x3bf0 <__eerd_blraw_m328p+0x8>
    3c02:	08 95       	ret

00003c04 <_exit>:
    3c04:	f8 94       	cli

00003c06 <__stop_program>:
    3c06:	ff cf       	rjmp	.-2      	; 0x3c06 <__stop_program>
