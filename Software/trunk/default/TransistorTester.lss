
TransistorTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00003f4a  00003ffe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f4a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a1  00800102  00800102  00004000  2**0
                  ALLOC
  3 .eeprom       000001a7  00810000  00810000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         00000dbc  00000000  00000000  000041a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001d2  00000000  00000000  00004f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000000c0  00000000  00000000  00005136  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000007d9  00000000  00000000  000051f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002f2d  00000000  00000000  000059cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000008df  00000000  00000000  000088fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000348f  00000000  00000000  000091db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000002f0  00000000  00000000  0000c66c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000a29  00000000  00000000  0000c95c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001ccd  00000000  00000000  0000d385  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 0000022b  00000000  00000000  0000f052  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 83 00 	jmp	0x106	; 0x106 <__ctors_end>
       4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
       8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
       c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      10:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      14:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      18:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      1c:	0c 94 ab 01 	jmp	0x356	; 0x356 <__vector_7>
      20:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      24:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      28:	0c 94 e7 17 	jmp	0x2fce	; 0x2fce <__vector_10>
      2c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      30:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      34:	0c 94 c1 17 	jmp	0x2f82	; 0x2f82 <__vector_13>
      38:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      3c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      40:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      44:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      48:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      4c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      50:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      54:	0c 94 ac 01 	jmp	0x358	; 0x358 <__vector_21>
      58:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      5c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      60:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      64:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>

00000068 <LogTab>:
      68:	00 00 14 00 29 00 3e 00 53 00 69 00 80 00 97 00     ....).>.S.i.....
      78:	ae 00 c6 00 df 00 f8 00 12 01 2d 01 49 01 65 01     ..........-.I.e.
      88:	82 01 a0 01 be 01 de 01 ff 01 21 02 44 02 68 02     ..........!.D.h.
      98:	8e 02 b5 02 de 02 09 03 35 03 64 03 94 03 c8 03     ........5.d.....
      a8:	fe 03 37 04 73 04 b4 04 f9 04 43 05 93 05 ea 05     ..7.s.....C.....
      b8:	49 06 b3 06 29 07 ae 07 48 08 ff 08 de 09           I...)...H.....

000000c6 <RHtab>:
      c6:	ba 03 87 03 58 03 2e 03 07 03 e4 02 c3 02 a4 02     ....X...........
      d6:	88 02                                               ..

000000d8 <VERSION_str>:
      d8:	56 65 72 73 69 6f 6e 20 31 2e 31 30 6b 00           Version 1.10k.

000000e6 <R0_str>:
      e6:	52 30 3d 00                                         R0=.

000000ea <MinCap_str>:
      ea:	20 3e 31 30 30 6e 46 00                              >100nF.

000000f2 <REF_C_str>:
      f2:	52 45 46 5f 43 3d 00                                REF_C=.

000000f9 <REF_R_str>:
      f9:	52 45 46 5f 52 3d 00                                REF_R=.

00000100 <PinRLtab>:
     100:	01 04 10                                            ...

00000103 <PinADCtab>:
     103:	01 02 04                                            ...

00000106 <__ctors_end>:
     106:	11 24       	eor	r1, r1
     108:	1f be       	out	0x3f, r1	; 63
     10a:	cf ef       	ldi	r28, 0xFF	; 255
     10c:	d4 e0       	ldi	r29, 0x04	; 4
     10e:	de bf       	out	0x3e, r29	; 62
     110:	cd bf       	out	0x3d, r28	; 61

00000112 <__do_copy_data>:
     112:	11 e0       	ldi	r17, 0x01	; 1
     114:	a0 e0       	ldi	r26, 0x00	; 0
     116:	b1 e0       	ldi	r27, 0x01	; 1
     118:	ea e4       	ldi	r30, 0x4A	; 74
     11a:	ff e3       	ldi	r31, 0x3F	; 63
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x10>
     11e:	05 90       	lpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	a2 30       	cpi	r26, 0x02	; 2
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0xc>

00000128 <__do_clear_bss>:
     128:	11 e0       	ldi	r17, 0x01	; 1
     12a:	a2 e0       	ldi	r26, 0x02	; 2
     12c:	b1 e0       	ldi	r27, 0x01	; 1
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	a3 3a       	cpi	r26, 0xA3	; 163
     134:	b1 07       	cpc	r27, r17
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <main>
     13c:	0c 94 a3 1f 	jmp	0x3f46	; 0x3f46 <_exit>

00000140 <__bad_interrupt>:
     140:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000144 <lcd_data>:
void lcd_space(void) {
   lcd_data(' ');
}

// sends data byte to the LCD 
void lcd_data(unsigned char temp1) {
     144:	1f 93       	push	r17
     146:	18 2f       	mov	r17, r24
 lcd_write_data(temp1);		// set RS to 1
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	61 2f       	mov	r22, r17
     14c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
     150:	0e 94 51 14 	call	0x28a2	; 0x28a2 <wait50us>
#ifdef WITH_UART
 switch(temp1) {
     154:	18 30       	cpi	r17, 0x08	; 8
     156:	48 f4       	brcc	.+18     	; 0x16a <lcd_data+0x26>
     158:	16 30       	cpi	r17, 0x06	; 6
     15a:	c0 f4       	brcc	.+48     	; 0x18c <lcd_data+0x48>
     15c:	12 30       	cpi	r17, 0x02	; 2
     15e:	61 f0       	breq	.+24     	; 0x178 <lcd_data+0x34>
     160:	13 30       	cpi	r17, 0x03	; 3
     162:	79 f0       	breq	.+30     	; 0x182 <lcd_data+0x3e>
     164:	11 30       	cpi	r17, 0x01	; 1
     166:	f1 f4       	brne	.+60     	; 0x1a4 <lcd_data+0x60>
     168:	05 c0       	rjmp	.+10     	; 0x174 <lcd_data+0x30>
     16a:	14 3e       	cpi	r17, 0xE4	; 228
     16c:	89 f0       	breq	.+34     	; 0x190 <lcd_data+0x4c>
     16e:	14 3f       	cpi	r17, 0xF4	; 244
     170:	c9 f4       	brne	.+50     	; 0x1a4 <lcd_data+0x60>
     172:	10 c0       	rjmp	.+32     	; 0x194 <lcd_data+0x50>
    case LCD_CHAR_DIODE1:
    	uart_putc('>');
     174:	8e e3       	ldi	r24, 0x3E	; 62
     176:	06 c0       	rjmp	.+12     	; 0x184 <lcd_data+0x40>
    	uart_putc('|');
    	break;
    case LCD_CHAR_DIODE2:
    	uart_putc('|');
     178:	8c e7       	ldi	r24, 0x7C	; 124
     17a:	0e 94 22 14 	call	0x2844	; 0x2844 <uart_putc>
    	uart_putc('<');
     17e:	8c e3       	ldi	r24, 0x3C	; 60
     180:	12 c0       	rjmp	.+36     	; 0x1a6 <lcd_data+0x62>
    	break;
    case LCD_CHAR_CAP:
    	uart_putc('|');
     182:	8c e7       	ldi	r24, 0x7C	; 124
     184:	0e 94 22 14 	call	0x2844	; 0x2844 <uart_putc>
    	uart_putc('|');
     188:	8c e7       	ldi	r24, 0x7C	; 124
     18a:	0d c0       	rjmp	.+26     	; 0x1a6 <lcd_data+0x62>
    	break;
    case LCD_CHAR_RESIS1:
    case LCD_CHAR_RESIS2:
    	uart_putc('R');
     18c:	82 e5       	ldi	r24, 0x52	; 82
     18e:	0b c0       	rjmp	.+22     	; 0x1a6 <lcd_data+0x62>
//    case LCD_CHAR_DEGREE:	// degree sign
//    	uart_putc(0xf8);	// codepage 437 or 850 has degree
//    	break;
    case LCD_CHAR_U:		//µ
//    	uart_putc(0xe6);	// codepage 437 or 850 has my
    	uart_putc('u');		// better use the ASCII u
     190:	85 e7       	ldi	r24, 0x75	; 117
     192:	09 c0       	rjmp	.+18     	; 0x1a6 <lcd_data+0x62>
    	break;
    case LCD_CHAR_OMEGA:	//Omega
//	uart_putc(0xea);	// only codepage 437 has Omega
        uart_putc('O');
     194:	8f e4       	ldi	r24, 0x4F	; 79
     196:	0e 94 22 14 	call	0x2844	; 0x2844 <uart_putc>
        uart_putc('h');
     19a:	88 e6       	ldi	r24, 0x68	; 104
     19c:	0e 94 22 14 	call	0x2844	; 0x2844 <uart_putc>
        uart_putc('m');
     1a0:	8d e6       	ldi	r24, 0x6D	; 109
     1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <lcd_data+0x62>
    	break;
    default:
    	uart_putc(temp1);
     1a4:	81 2f       	mov	r24, r17
     1a6:	0e 94 22 14 	call	0x2844	; 0x2844 <uart_putc>
 }
#endif
}
     1aa:	1f 91       	pop	r17
     1ac:	08 95       	ret

000001ae <lcd_space>:
   lcd_data(temp + '1');
}

// send space character to LCD
void lcd_space(void) {
   lcd_data(' ');
     1ae:	80 e2       	ldi	r24, 0x20	; 32
     1b0:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
}
     1b4:	08 95       	ret

000001b6 <lcd_testpin>:
 

// sends numeric character (Pin Number) to the LCD 
// from binary 0 we send ASCII 1 ....
void lcd_testpin(unsigned char temp) {
   lcd_data(temp + '1');
     1b6:	8f 5c       	subi	r24, 0xCF	; 207
     1b8:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
}
     1bc:	08 95       	ret

000001be <uart_newline>:
}


#ifdef WITH_UART
void uart_newline(void) {
   uart_putc('\r');
     1be:	8d e0       	ldi	r24, 0x0D	; 13
     1c0:	0e 94 22 14 	call	0x2844	; 0x2844 <uart_putc>
   uart_putc('\n');
     1c4:	8a e0       	ldi	r24, 0x0A	; 10
     1c6:	0e 94 22 14 	call	0x2844	; 0x2844 <uart_putc>
}
     1ca:	08 95       	ret

000001cc <lcd_command>:
#endif
}
 
// sends a command to the LCD
 
void lcd_command(unsigned char temp1) {
     1cc:	1f 93       	push	r17
     1ce:	18 2f       	mov	r17, r24
        lcd_write_cmd(temp1);		// set RS to 0
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	61 2f       	mov	r22, r17
     1d4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
     1d8:	0e 94 51 14 	call	0x28a2	; 0x28a2 <wait50us>
#ifdef WITH_UART
	if((temp1 == 0x80) || (temp1 == 0xC0)) {
     1dc:	10 38       	cpi	r17, 0x80	; 128
     1de:	11 f0       	breq	.+4      	; 0x1e4 <lcd_command+0x18>
     1e0:	10 3c       	cpi	r17, 0xC0	; 192
     1e2:	11 f4       	brne	.+4      	; 0x1e8 <lcd_command+0x1c>
		uart_newline();
     1e4:	0e 94 df 00 	call	0x1be	; 0x1be <uart_newline>
	}
#endif
}
     1e8:	1f 91       	pop	r17
     1ea:	08 95       	ret

000001ec <lcd_clear>:
}
 
// send the command to clear the display 
 
void lcd_clear(void) {
   lcd_command(CLEAR_DISPLAY);
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
   wait_about10ms();
     1f2:	82 e0       	ldi	r24, 0x02	; 2
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
#ifdef WITH_UART
   uart_newline();
     1fa:	0e 94 df 00 	call	0x1be	; 0x1be <uart_newline>
#endif
   lcd_line1();			// set cursor to Line1 Column 1, (only for OLED-Display)
     1fe:	80 e8       	ldi	r24, 0x80	; 128
     200:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
}
     204:	08 95       	ret

00000206 <lcd_init>:
 
// Initialise: 
// Must be called first .
 
void lcd_init(void) {
   wait_about30ms();
     206:	86 e0       	ldi	r24, 0x06	; 6
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
   // to initialise, send 3 times to be shure to be in 8 Bit mode
   lcd_write_init(1);
     20e:	80 e8       	ldi	r24, 0x80	; 128
     210:	60 e3       	ldi	r22, 0x30	; 48
     212:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait_about5ms();
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
   
   lcd_write_init(1);
     21e:	80 e8       	ldi	r24, 0x80	; 128
     220:	60 e3       	ldi	r22, 0x30	; 48
     222:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait1ms();
     226:	0e 94 4b 14 	call	0x2896	; 0x2896 <wait1ms>

   lcd_write_init(1);
     22a:	80 e8       	ldi	r24, 0x80	; 128
     22c:	60 e3       	ldi	r22, 0x30	; 48
     22e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait1ms();
     232:	0e 94 4b 14 	call	0x2896	; 0x2896 <wait1ms>

   lcd_write_init(0);		// switch to 4 Bit mode
     236:	80 e8       	ldi	r24, 0x80	; 128
     238:	60 e2       	ldi	r22, 0x20	; 32
     23a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait_about10ms();
     23e:	82 e0       	ldi	r24, 0x02	; 2
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
   lcd_command(CMD1_SetBias | 0x0c);		// 1/4 bias     (5V)
   lcd_command(CMD1_PowerControl | 0x02);	// booster off / set contrast C5:C4 = 2
   lcd_command(CMD1_FollowerControl | 0x09);	// Follower on / Rab2:0 = 1
   lcd_command(CMD1_SetContrast | 0x04);	// set contrast C3:0 = 4
#endif
   lcd_command(CMD_SetIFOptions | 0x08);	// 4Bit / 2 rows / 5x7
     246:	88 e2       	ldi	r24, 0x28	; 40
     248:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>

   lcd_command(CMD_SetDisplayAndCursor | 0x04); // Display on / Cursor off / no Blinking
     24c:	8c e0       	ldi	r24, 0x0C	; 12
     24e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>

   lcd_command(CMD_SetEntryMode | 0x02);	// increment / no Scroll    
     252:	86 e0       	ldi	r24, 0x06	; 6
     254:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
   lcd_clear();
     258:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
}
     25c:	08 95       	ret

0000025e <lcd_string>:
#endif
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
     25e:	ef 92       	push	r14
     260:	ff 92       	push	r15
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	e8 2e       	mov	r14, r24
     268:	e7 01       	movw	r28, r14
     26a:	7e 01       	movw	r14, r28
     26c:	f9 2e       	mov	r15, r25
     26e:	e7 01       	movw	r28, r14
    while(*data) {
     270:	02 c0       	rjmp	.+4      	; 0x276 <lcd_string+0x18>
        lcd_data(*data);
     272:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
    while(*data) {
     276:	89 91       	ld	r24, Y+
     278:	88 23       	and	r24, r24
     27a:	d9 f7       	brne	.-10     	; 0x272 <lcd_string+0x14>
        lcd_data(*data);
        data++;
    }
}
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	ff 90       	pop	r15
     282:	ef 90       	pop	r14
     284:	08 95       	ret

00000286 <lcd_pgm_string>:

#ifdef use_lcd_pgm
//Load string from PGM  and send to LCD 
void lcd_pgm_string(const unsigned char *data) {
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = pgm_read_byte(data);
     28c:	fe 01       	movw	r30, r28
     28e:	84 91       	lpm	r24, Z+
      if((cc==0) || (cc==128)) {
     290:	88 23       	and	r24, r24
     292:	31 f0       	breq	.+12     	; 0x2a0 <lcd_pgm_string+0x1a>
     294:	80 38       	cpi	r24, 0x80	; 128
     296:	21 f0       	breq	.+8      	; 0x2a0 <lcd_pgm_string+0x1a>
         return;
      }
      lcd_data(cc);
     298:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
      data++;
     29c:	21 96       	adiw	r28, 0x01	; 1
   }
     29e:	f6 cf       	rjmp	.-20     	; 0x28c <lcd_pgm_string+0x6>
}
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <lcd_fix_string>:
#endif

//Load string from PGM or EEprom and send to LCD 
void lcd_fix_string(const unsigned char *data) {
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = MEM_read_byte(data);
     2ac:	ce 01       	movw	r24, r28
     2ae:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <__eerd_byte_m168>
      if((cc==0) || (cc==128)) {
     2b2:	88 23       	and	r24, r24
     2b4:	31 f0       	breq	.+12     	; 0x2c2 <lcd_fix_string+0x1c>
     2b6:	80 38       	cpi	r24, 0x80	; 128
     2b8:	21 f0       	breq	.+8      	; 0x2c2 <lcd_fix_string+0x1c>
         return;
      }
      lcd_data(cc);
     2ba:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
      data++;
     2be:	21 96       	adiw	r28, 0x01	; 1
   }
     2c0:	f5 cf       	rjmp	.-22     	; 0x2ac <lcd_fix_string+0x6>
}
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	08 95       	ret

000002c8 <lcd_fix_customchar>:

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	8c 01       	movw	r16, r24
     2d2:	c0 e0       	ldi	r28, 0x00	; 0
     2d4:	d0 e0       	ldi	r29, 0x00	; 0
    for(uint8_t i=0;i<8;i++) {
        lcd_data(MEM_read_byte(chardata));
     2d6:	c8 01       	movw	r24, r16
     2d8:	8c 0f       	add	r24, r28
     2da:	9d 1f       	adc	r25, r29
     2dc:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <__eerd_byte_m168>
     2e0:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
     2e4:	21 96       	adiw	r28, 0x01	; 1
   }
}

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
    for(uint8_t i=0;i<8;i++) {
     2e6:	c8 30       	cpi	r28, 0x08	; 8
     2e8:	d1 05       	cpc	r29, r1
     2ea:	a9 f7       	brne	.-22     	; 0x2d6 <lcd_fix_customchar+0xe>
        lcd_data(MEM_read_byte(chardata));
        chardata++;
    }
}
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	0f 91       	pop	r16
     2f4:	08 95       	ret

000002f6 <_lcd_hw_write>:
     2f6:	80 fd       	sbrc	r24, 0
     2f8:	5c 9a       	sbi	0x0b, 4	; 11
     2fa:	80 ff       	sbrs	r24, 0
     2fc:	5c 98       	cbi	0x0b, 4	; 11
     2fe:	54 9a       	sbi	0x0a, 4	; 10
     300:	00 00       	nop
     302:	5d 9a       	sbi	0x0b, 5	; 11
     304:	55 9a       	sbi	0x0a, 5	; 10
     306:	58 98       	cbi	0x0b, 0	; 11
     308:	59 98       	cbi	0x0b, 1	; 11
     30a:	5a 98       	cbi	0x0b, 2	; 11
     30c:	5b 98       	cbi	0x0b, 3	; 11
     30e:	64 fd       	sbrc	r22, 4
     310:	58 9a       	sbi	0x0b, 0	; 11
     312:	50 9a       	sbi	0x0a, 0	; 10
     314:	65 fd       	sbrc	r22, 5
     316:	59 9a       	sbi	0x0b, 1	; 11
     318:	51 9a       	sbi	0x0a, 1	; 10
     31a:	66 fd       	sbrc	r22, 6
     31c:	5a 9a       	sbi	0x0b, 2	; 11
     31e:	52 9a       	sbi	0x0a, 2	; 10
     320:	67 fd       	sbrc	r22, 7
     322:	5b 9a       	sbi	0x0b, 3	; 11
     324:	53 9a       	sbi	0x0a, 3	; 10
     326:	00 00       	nop
     328:	5d 98       	cbi	0x0b, 5	; 11
     32a:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <wait1us>
     32e:	87 fd       	sbrc	r24, 7
     330:	11 c0       	rjmp	.+34     	; 0x354 <_lcd_hw_write_exit>
     332:	5d 9a       	sbi	0x0b, 5	; 11
     334:	58 98       	cbi	0x0b, 0	; 11
     336:	59 98       	cbi	0x0b, 1	; 11
     338:	5a 98       	cbi	0x0b, 2	; 11
     33a:	5b 98       	cbi	0x0b, 3	; 11
     33c:	60 fd       	sbrc	r22, 0
     33e:	58 9a       	sbi	0x0b, 0	; 11
     340:	61 fd       	sbrc	r22, 1
     342:	59 9a       	sbi	0x0b, 1	; 11
     344:	62 fd       	sbrc	r22, 2
     346:	5a 9a       	sbi	0x0b, 2	; 11
     348:	63 fd       	sbrc	r22, 3
     34a:	5b 9a       	sbi	0x0b, 3	; 11
     34c:	00 00       	nop
     34e:	5d 98       	cbi	0x0b, 5	; 11
     350:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <wait1us>

00000354 <_lcd_hw_write_exit>:
     354:	08 95       	ret

00000356 <__vector_7>:
#define MAIN_C
#include "Transistortester.h"

#ifndef INHIBIT_SLEEP_MODE
  // prepare sleep mode
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
     356:	18 95       	reti

00000358 <__vector_21>:
  EMPTY_INTERRUPT(ADC_vect);
     358:	18 95       	reti

0000035a <EntladePins>:
   R_DDR &= ~PinToCharge;	// switch back to input
   R_PORT &= ~PinToCharge;	// no Pull up
}

// first discharge any charge of capacitors
void EntladePins() {
     35a:	bf 92       	push	r11
     35c:	cf 92       	push	r12
     35e:	df 92       	push	r13
     360:	ef 92       	push	r14
     362:	ff 92       	push	r15
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	2a e0       	ldi	r18, 0x0A	; 10
     36e:	c2 2e       	mov	r12, r18
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     370:	98 e0       	ldi	r25, 0x08	; 8
     372:	d9 2e       	mov	r13, r25
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     R_PORT = 0;			// R-outputs auf 0
//     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     R_DDR = (3<<(PC2*2)) | (3<<(PC1*2)) | (3<<(PC0*2)); // R_H and R_L for all Pins to GND
     374:	8f e3       	ldi	r24, 0x3F	; 63
     376:	b8 2e       	mov	r11, r24
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     378:	d7 b8       	out	0x07, r13	; 7
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     37a:	d8 b8       	out	0x08, r13	; 8
     R_PORT = 0;			// R-outputs auf 0
     37c:	15 b8       	out	0x05, r1	; 5
//     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     R_DDR = (3<<(PC2*2)) | (3<<(PC1*2)) | (3<<(PC0*2)); // R_H and R_L for all Pins to GND
     37e:	b4 b8       	out	0x04, r11	; 4
     adcmv[0] = W5msReadADC(PC0);	// which voltage has Pin 1?
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
     386:	8c 01       	movw	r16, r24
     adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
     38e:	ec 01       	movw	r28, r24
     adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     390:	82 e0       	ldi	r24, 0x02	; 2
     392:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
     if ((PartFound == PART_CELL) || (adcmv[0] < CAP_EMPTY_LEVEL) & (adcmv[1] < CAP_EMPTY_LEVEL) & (adcmv[2] < CAP_EMPTY_LEVEL)) {
     396:	20 91 07 01 	lds	r18, 0x0107
     39a:	28 30       	cpi	r18, 0x08	; 8
     39c:	c1 f0       	breq	.+48     	; 0x3ce <EntladePins+0x74>
     39e:	41 e0       	ldi	r20, 0x01	; 1
     3a0:	c4 30       	cpi	r28, 0x04	; 4
     3a2:	d1 05       	cpc	r29, r1
     3a4:	08 f0       	brcs	.+2      	; 0x3a8 <EntladePins+0x4e>
     3a6:	40 e0       	ldi	r20, 0x00	; 0
     3a8:	21 e0       	ldi	r18, 0x01	; 1
     3aa:	04 30       	cpi	r16, 0x04	; 4
     3ac:	11 05       	cpc	r17, r1
     3ae:	08 f0       	brcs	.+2      	; 0x3b2 <EntladePins+0x58>
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	42 23       	and	r20, r18
     3b4:	50 e0       	ldi	r21, 0x00	; 0
     3b6:	21 e0       	ldi	r18, 0x01	; 1
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	84 30       	cpi	r24, 0x04	; 4
     3bc:	91 05       	cpc	r25, r1
     3be:	10 f0       	brcs	.+4      	; 0x3c4 <EntladePins+0x6a>
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	24 23       	and	r18, r20
     3c6:	35 23       	and	r19, r21
     3c8:	21 15       	cp	r18, r1
     3ca:	31 05       	cpc	r19, r1
     3cc:	21 f0       	breq	.+8      	; 0x3d6 <EntladePins+0x7c>
        ADC_DDR = TXD_MSK;		// switch all ADC-Pins to input
     3ce:	88 e0       	ldi	r24, 0x08	; 8
     3d0:	87 b9       	out	0x07, r24	; 7
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
     3d2:	14 b8       	out	0x04, r1	; 4
#if FLASHEND > 0x3fff
        cell_mv[0] = adcmv[0];		// save the voltage of pin 1
        cell_mv[1] = adcmv[1];		// save the voltage of pin 2
        cell_mv[2] = adcmv[2];		// save the voltage of pin 3
#endif
        return;			// all is discharged
     3d4:	4e c0       	rjmp	.+156    	; 0x472 <EntladePins+0x118>
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
     3d6:	23 e0       	ldi	r18, 0x03	; 3
     3d8:	08 3e       	cpi	r16, 0xE8	; 232
     3da:	12 07       	cpc	r17, r18
     3dc:	10 f0       	brcs	.+4      	; 0x3e2 <EntladePins+0x88>
  uint8_t lop_cnt;		// loop counter
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     3de:	28 e0       	ldi	r18, 0x08	; 8
     3e0:	01 c0       	rjmp	.+2      	; 0x3e4 <EntladePins+0x8a>
#endif
        return;			// all is discharged
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
        adc_gnd |= (1<<PC0);	//Pin 1 directly to GND
     3e2:	29 e0       	ldi	r18, 0x09	; 9
     }
     if (adcmv[1] < 1000) {
     3e4:	33 e0       	ldi	r19, 0x03	; 3
     3e6:	c8 3e       	cpi	r28, 0xE8	; 232
     3e8:	d3 07       	cpc	r29, r19
     3ea:	08 f4       	brcc	.+2      	; 0x3ee <EntladePins+0x94>
        adc_gnd |= (1<<PC1);	//Pin 2 directly to GND
     3ec:	22 60       	ori	r18, 0x02	; 2
     }
     if (adcmv[2] < 1000) {
     3ee:	33 e0       	ldi	r19, 0x03	; 3
     3f0:	88 3e       	cpi	r24, 0xE8	; 232
     3f2:	93 07       	cpc	r25, r19
     3f4:	08 f4       	brcc	.+2      	; 0x3f8 <EntladePins+0x9e>
        adc_gnd |= (1<<PC2);	//Pin 3 directly to  GND
     3f6:	24 60       	ori	r18, 0x04	; 4
     }
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time
     3f8:	27 b9       	out	0x07, r18	; 7

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
//     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     3fa:	c0 e0       	ldi	r28, 0x00	; 0
     3fc:	d0 e0       	ldi	r29, 0x00	; 0
        wdt_reset();
     3fe:	a8 95       	wdr
        adcmv[0] = W20msReadADC(PC0);	// which voltage has Pin 1?
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	0e 94 b5 1a 	call	0x356a	; 0x356a <W20msReadADC>
     406:	7c 01       	movw	r14, r24
        adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
     40e:	8c 01       	movw	r16, r24
        adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     410:	82 e0       	ldi	r24, 0x02	; 2
     412:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
        if (adcmv[0] < 1300) {
     416:	24 e1       	ldi	r18, 0x14	; 20
     418:	e2 16       	cp	r14, r18
     41a:	25 e0       	ldi	r18, 0x05	; 5
     41c:	f2 06       	cpc	r15, r18
     41e:	08 f4       	brcc	.+2      	; 0x422 <EntladePins+0xc8>
           ADC_DDR |= (1<<PC0);	// below 1.3V , switch directly with ADC-Port to GND
     420:	38 9a       	sbi	0x07, 0	; 7
        }
        if (adcmv[1] < 1300) {
     422:	35 e0       	ldi	r19, 0x05	; 5
     424:	04 31       	cpi	r16, 0x14	; 20
     426:	13 07       	cpc	r17, r19
     428:	08 f4       	brcc	.+2      	; 0x42c <EntladePins+0xd2>
           ADC_DDR |= (1<<PC1);	// below 1.3V, switch directly with ADC-Port to GND
     42a:	39 9a       	sbi	0x07, 1	; 7
        }
        if (adcmv[2] < 1300) {
     42c:	25 e0       	ldi	r18, 0x05	; 5
     42e:	84 31       	cpi	r24, 0x14	; 20
     430:	92 07       	cpc	r25, r18
     432:	08 f4       	brcc	.+2      	; 0x436 <EntladePins+0xdc>
           ADC_DDR |= (1<<PC2);	// below 1.3V, switch directly with ADC-Port to GND
     434:	3a 9a       	sbi	0x07, 2	; 7
        }
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
     436:	36 e0       	ldi	r19, 0x06	; 6
     438:	e3 16       	cp	r14, r19
     43a:	f1 04       	cpc	r15, r1
     43c:	30 f4       	brcc	.+12     	; 0x44a <EntladePins+0xf0>
     43e:	06 30       	cpi	r16, 0x06	; 6
     440:	11 05       	cpc	r17, r1
     442:	18 f4       	brcc	.+6      	; 0x44a <EntladePins+0xf0>
     444:	86 30       	cpi	r24, 0x06	; 6
     446:	91 05       	cpc	r25, r1
     448:	38 f0       	brcs	.+14     	; 0x458 <EntladePins+0xfe>

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
//     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     44a:	21 96       	adiw	r28, 0x01	; 1
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	c4 3f       	cpi	r28, 0xF4	; 244
     450:	d8 07       	cpc	r29, r24
     452:	a9 f6       	brne	.-86     	; 0x3fe <EntladePins+0xa4>
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
           break;
        }
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
     454:	d0 92 07 01 	sts	0x0107, r13

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
//     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     458:	00 e0       	ldi	r16, 0x00	; 0
     45a:	10 e0       	ldi	r17, 0x00	; 0
     45c:	04 c0       	rjmp	.+8      	; 0x466 <EntladePins+0x10c>
        lcd_space();
        lcd_string(utoa(adcmv[2], outval, 10));
#endif
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     45e:	0e 94 4b 14 	call	0x2896	; 0x2896 <wait1ms>
     462:	0f 5f       	subi	r16, 0xFF	; 255
     464:	1f 4f       	sbci	r17, 0xFF	; 255
        lcd_space();
        lcd_string(utoa(adcmv[1], outval, 10));
        lcd_space();
        lcd_string(utoa(adcmv[2], outval, 10));
#endif
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
     466:	0c 17       	cp	r16, r28
     468:	1d 07       	cpc	r17, r29
     46a:	c8 f3       	brcs	.-14     	; 0x45e <EntladePins+0x104>
     46c:	ca 94       	dec	r12
  unsigned int clr_cnt;		// Clear Counter
  uint8_t lop_cnt;		// loop counter
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     46e:	09 f0       	breq	.+2      	; 0x472 <EntladePins+0x118>
     470:	83 cf       	rjmp	.-250    	; 0x378 <EntladePins+0x1e>
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     }
  } // end for lop_cnt
 }
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	1f 91       	pop	r17
     478:	0f 91       	pop	r16
     47a:	ff 90       	pop	r15
     47c:	ef 90       	pop	r14
     47e:	df 90       	pop	r13
     480:	cf 90       	pop	r12
     482:	bf 90       	pop	r11
     484:	08 95       	ret

00000486 <RefVoltage>:
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;

  #ifdef AUTO_CAL
  referenz = ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset));
     486:	8a e9       	ldi	r24, 0x9A	; 154
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <__eerd_word_m168>
     48e:	20 91 44 01 	lds	r18, 0x0144
     492:	30 91 45 01 	lds	r19, 0x0145
     496:	28 0f       	add	r18, r24
     498:	39 1f       	adc	r19, r25
  #else
  referenz = ref_mv + REF_C_KORR;
  #endif
  if (referenz >= Ref_Tab_Beginn) {
     49a:	83 e0       	ldi	r24, 0x03	; 3
     49c:	28 3e       	cpi	r18, 0xE8	; 232
     49e:	38 07       	cpc	r19, r24
     4a0:	20 f0       	brcs	.+8      	; 0x4aa <RefVoltage+0x24>
     referenz -= Ref_Tab_Beginn;
     4a2:	c9 01       	movw	r24, r18
     4a4:	88 5e       	subi	r24, 0xE8	; 232
     4a6:	93 40       	sbci	r25, 0x03	; 3
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <RefVoltage+0x28>
  } else  {
     referenz = 0;		// limit to begin of table
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = referenz / Ref_Tab_Abstand;
     4ae:	62 e3       	ldi	r22, 0x32	; 50
     4b0:	70 e0       	ldi	r23, 0x00	; 0
     4b2:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__udivmodhi4>
  tabres = Ref_Tab_Abstand-tabres;
  if (tabind > 7) {
     tabind = 7;		// limit to end of table
  }
  // interpolate the table of factors
  y1 = pgm_read_word(&RHtab[tabind]);
     4b6:	68 30       	cpi	r22, 0x08	; 8
     4b8:	08 f0       	brcs	.+2      	; 0x4bc <RefVoltage+0x36>
     4ba:	67 e0       	ldi	r22, 0x07	; 7
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	fb 01       	movw	r30, r22
     4c0:	ee 0f       	add	r30, r30
     4c2:	ff 1f       	adc	r31, r31
     4c4:	ea 53       	subi	r30, 0x3A	; 58
     4c6:	ff 4f       	sbci	r31, 0xFF	; 255
     4c8:	45 91       	lpm	r20, Z+
     4ca:	54 91       	lpm	r21, Z+
  y2 = pgm_read_word(&RHtab[tabind+1]);
     4cc:	fb 01       	movw	r30, r22
     4ce:	ee 0f       	add	r30, r30
     4d0:	ff 1f       	adc	r31, r31
     4d2:	e8 53       	subi	r30, 0x38	; 56
     4d4:	ff 4f       	sbci	r31, 0xFF	; 255
     4d6:	25 91       	lpm	r18, Z+
     4d8:	34 91       	lpm	r19, Z+
  } else  {
     referenz = 0;		// limit to begin of table
  }
  tabind = referenz / Ref_Tab_Abstand;
  tabres = referenz % Ref_Tab_Abstand;
  tabres = Ref_Tab_Abstand-tabres;
     4da:	62 e3       	ldi	r22, 0x32	; 50
     4dc:	68 1b       	sub	r22, r24
  }
  // interpolate the table of factors
  y1 = pgm_read_word(&RHtab[tabind]);
  y2 = pgm_read_word(&RHtab[tabind+1]);
  // RHmultip is the interpolated factor to compute capacity from load time with 470k
  RHmultip = ((y1 - y2) * tabres + (Ref_Tab_Abstand/2)) / Ref_Tab_Abstand + y2;
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	42 1b       	sub	r20, r18
     4e2:	53 0b       	sbc	r21, r19
     4e4:	64 9f       	mul	r22, r20
     4e6:	c0 01       	movw	r24, r0
     4e8:	65 9f       	mul	r22, r21
     4ea:	90 0d       	add	r25, r0
     4ec:	74 9f       	mul	r23, r20
     4ee:	90 0d       	add	r25, r0
     4f0:	11 24       	eor	r1, r1
     4f2:	49 96       	adiw	r24, 0x19	; 25
     4f4:	62 e3       	ldi	r22, 0x32	; 50
     4f6:	70 e0       	ldi	r23, 0x00	; 0
     4f8:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__udivmodhi4>
     4fc:	62 0f       	add	r22, r18
     4fe:	73 1f       	adc	r23, r19
     500:	70 93 01 01 	sts	0x0101, r23
     504:	60 93 00 01 	sts	0x0100, r22
 }
     508:	08 95       	ret

0000050a <lcd_clear_line>:
#endif

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
     50a:	1f 93       	push	r17
     50c:	14 e1       	ldi	r17, 0x14	; 20
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    lcd_space();
     50e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>
     512:	11 50       	subi	r17, 0x01	; 1

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
     514:	e1 f7       	brne	.-8      	; 0x50e <lcd_clear_line+0x4>
    lcd_space();
 }
}
     516:	1f 91       	pop	r17
     518:	08 95       	ret

0000051a <DisplayValue>:
 *    e.g: p = 10^-12 -> -12
 *  - unit character (0 = none)
 *  digits = 2, 3 or 4
 */
void DisplayValue(unsigned long Value, int8_t Exponent, unsigned char Unit, unsigned char digits)
{
     51a:	2f 92       	push	r2
     51c:	3f 92       	push	r3
     51e:	4f 92       	push	r4
     520:	5f 92       	push	r5
     522:	7f 92       	push	r7
     524:	8f 92       	push	r8
     526:	9f 92       	push	r9
     528:	af 92       	push	r10
     52a:	bf 92       	push	r11
     52c:	cf 92       	push	r12
     52e:	df 92       	push	r13
     530:	ef 92       	push	r14
     532:	ff 92       	push	r15
     534:	0f 93       	push	r16
     536:	1f 93       	push	r17
     538:	df 93       	push	r29
     53a:	cf 93       	push	r28
     53c:	cd b7       	in	r28, 0x3d	; 61
     53e:	de b7       	in	r29, 0x3e	; 62
     540:	2f 97       	sbiw	r28, 0x0f	; 15
     542:	0f b6       	in	r0, 0x3f	; 63
     544:	f8 94       	cli
     546:	de bf       	out	0x3e, r29	; 62
     548:	0f be       	out	0x3f, r0	; 63
     54a:	cd bf       	out	0x3d, r28	; 61
     54c:	6b 01       	movw	r12, r22
     54e:	7c 01       	movw	r14, r24
     550:	14 2f       	mov	r17, r20
     552:	72 2e       	mov	r7, r18
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
     554:	03 30       	cpi	r16, 0x03	; 3
     556:	29 f0       	breq	.+10     	; 0x562 <DisplayValue+0x48>
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
     558:	04 30       	cpi	r16, 0x04	; 4
     55a:	31 f0       	breq	.+12     	; 0x568 <DisplayValue+0x4e>
  uint8_t           Offset;		/* exponent of offset to next 10^3 step */
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
     55c:	84 e6       	ldi	r24, 0x64	; 100
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	14 c0       	rjmp	.+40     	; 0x58a <DisplayValue+0x70>
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
     562:	88 ee       	ldi	r24, 0xE8	; 232
     564:	93 e0       	ldi	r25, 0x03	; 3
     566:	11 c0       	rjmp	.+34     	; 0x58a <DisplayValue+0x70>
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
     568:	80 e1       	ldi	r24, 0x10	; 16
     56a:	97 e2       	ldi	r25, 0x27	; 39
     56c:	0e c0       	rjmp	.+28     	; 0x58a <DisplayValue+0x70>
  while (Value >= Limit)
  {
    Value += 5;				/* for automatic rounding */
     56e:	c7 01       	movw	r24, r14
     570:	b6 01       	movw	r22, r12
     572:	6b 5f       	subi	r22, 0xFB	; 251
     574:	7f 4f       	sbci	r23, 0xFF	; 255
     576:	8f 4f       	sbci	r24, 0xFF	; 255
     578:	9f 4f       	sbci	r25, 0xFF	; 255
    Value = Value / 10;			/* scale down by 10^1 */
     57a:	a5 01       	movw	r20, r10
     57c:	94 01       	movw	r18, r8
     57e:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
     582:	69 01       	movw	r12, r18
     584:	7a 01       	movw	r14, r20
    Exponent++;				/* increase exponent by 1 */
     586:	1f 5f       	subi	r17, 0xFF	; 255
     588:	08 c0       	rjmp	.+16     	; 0x59a <DisplayValue+0x80>


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
  while (Value >= Limit)
     58a:	1c 01       	movw	r2, r24
     58c:	44 24       	eor	r4, r4
     58e:	55 24       	eor	r5, r5
  {
    Value += 5;				/* for automatic rounding */
    Value = Value / 10;			/* scale down by 10^1 */
     590:	5a e0       	ldi	r21, 0x0A	; 10
     592:	85 2e       	mov	r8, r21
     594:	91 2c       	mov	r9, r1
     596:	a1 2c       	mov	r10, r1
     598:	b1 2c       	mov	r11, r1


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
  while (Value >= Limit)
     59a:	c2 14       	cp	r12, r2
     59c:	d3 04       	cpc	r13, r3
     59e:	e4 04       	cpc	r14, r4
     5a0:	f5 04       	cpc	r15, r5
     5a2:	28 f7       	brcc	.-54     	; 0x56e <DisplayValue+0x54>


  /*
   *  determine prefix
   */
  Length = Exponent + 12;
     5a4:	81 2f       	mov	r24, r17
     5a6:	84 5f       	subi	r24, 0xF4	; 244
  if ((int8_t)Length <  0) Length = 0;		/* Limit to minimum prefix */
     5a8:	87 fd       	sbrc	r24, 7
     5aa:	03 c0       	rjmp	.+6      	; 0x5b2 <DisplayValue+0x98>
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
     5ac:	83 31       	cpi	r24, 0x13	; 19
     5ae:	18 f4       	brcc	.+6      	; 0x5b6 <DisplayValue+0x9c>
     5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <DisplayValue+0x9e>

  /*
   *  determine prefix
   */
  Length = Exponent + 12;
  if ((int8_t)Length <  0) Length = 0;		/* Limit to minimum prefix */
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <DisplayValue+0x9e>
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
     5b6:	82 e1       	ldi	r24, 0x12	; 18
  Index = Length / 3;
     5b8:	23 e0       	ldi	r18, 0x03	; 3
  Offset = Length % 3;
     5ba:	62 2f       	mov	r22, r18
     5bc:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <__udivmodqi4>
     5c0:	19 2f       	mov	r17, r25
  if (Offset > 0)
     5c2:	99 23       	and	r25, r25
     5c4:	19 f0       	breq	.+6      	; 0x5cc <DisplayValue+0xb2>
    {
      Index++;				/* adjust index for exponent offset, take next prefix */
     5c6:	8f 5f       	subi	r24, 0xFF	; 255
      Offset = 3 - Offset;		/* reverse value (1 or 2) */
     5c8:	29 1b       	sub	r18, r25
     5ca:	12 2f       	mov	r17, r18
    { /* use no nano */
      Index++;				/* use mikro instead of nano */
      Offset += 3;			/* can be 3,4 or 5 */
    }
#endif
  Prefix = MEM_read_byte((uint8_t *)(&PrefixTab[Index]));   /* look up prefix in table */
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	8d 56       	subi	r24, 0x6D	; 109
     5d0:	9e 4f       	sbci	r25, 0xFE	; 254
     5d2:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <__eerd_byte_m168>
     5d6:	b8 2e       	mov	r11, r24
  /*
   *  display value
   */

  /* convert value into string */
  utoa((unsigned int)Value, OutBuffer, 10);
     5d8:	c6 01       	movw	r24, r12
     5da:	6e 01       	movw	r12, r28
     5dc:	08 94       	sec
     5de:	c1 1c       	adc	r12, r1
     5e0:	d1 1c       	adc	r13, r1
     5e2:	b6 01       	movw	r22, r12
     5e4:	4a e0       	ldi	r20, 0x0A	; 10
     5e6:	50 e0       	ldi	r21, 0x00	; 0
     5e8:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <utoa>
  Length = strlen(OutBuffer);
     5ec:	f6 01       	movw	r30, r12
     5ee:	01 90       	ld	r0, Z+
     5f0:	00 20       	and	r0, r0
     5f2:	e9 f7       	brne	.-6      	; 0x5ee <DisplayValue+0xd4>
     5f4:	31 97       	sbiw	r30, 0x01	; 1
     5f6:	2e 2e       	mov	r2, r30
     5f8:	2c 18       	sub	r2, r12

  /* position of dot */
  Exponent = Length - Offset;		/* calculate position */
     5fa:	82 2c       	mov	r8, r2
     5fc:	81 1a       	sub	r8, r17

  if (Exponent <= 0)			/* we have to prepend "0." */
     5fe:	18 14       	cp	r1, r8
     600:	44 f0       	brlt	.+16     	; 0x612 <DisplayValue+0xf8>
  {
    /* 0: factor 10 / -1: factor 100 */
//    lcd_data('0');
    lcd_data('.');
     602:	8e e2       	ldi	r24, 0x2E	; 46
     604:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
      {
       lcd_data('0');	/* extra 0 for factor 10 */
       Exponent++;
      }
#else
    if (Exponent < 0) lcd_data('0');	/* extra 0 for factor 100 */
     608:	88 20       	and	r8, r8
     60a:	19 f0       	breq	.+6      	; 0x612 <DisplayValue+0xf8>
     60c:	80 e3       	ldi	r24, 0x30	; 48
     60e:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
#endif
  }

  if (Offset == 0) Exponent = -1;	/* disable dot if not needed */
     612:	11 23       	and	r17, r17
     614:	11 f4       	brne	.+4      	; 0x61a <DisplayValue+0x100>
     616:	88 24       	eor	r8, r8
     618:	8a 94       	dec	r8
     61a:	6e 01       	movw	r12, r28
     61c:	08 94       	sec
     61e:	c1 1c       	adc	r12, r1
     620:	d1 1c       	adc	r13, r1
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     622:	00 e0       	ldi	r16, 0x00	; 0
     624:	10 e0       	ldi	r17, 0x00	; 0
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    Index++;				/* next one */
    if (Index == Exponent) {
     626:	99 24       	eor	r9, r9
     628:	87 fc       	sbrc	r8, 7
     62a:	90 94       	com	r9
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     62c:	0d c0       	rjmp	.+26     	; 0x648 <DisplayValue+0x12e>
  {
    lcd_data(OutBuffer[Index]);		/* display char */
     62e:	0f 5f       	subi	r16, 0xFF	; 255
     630:	1f 4f       	sbci	r17, 0xFF	; 255
     632:	f6 01       	movw	r30, r12
     634:	81 91       	ld	r24, Z+
     636:	6f 01       	movw	r12, r30
     638:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
    Index++;				/* next one */
    if (Index == Exponent) {
     63c:	08 15       	cp	r16, r8
     63e:	19 05       	cpc	r17, r9
     640:	19 f4       	brne	.+6      	; 0x648 <DisplayValue+0x12e>
      lcd_data('.');			/* display dot */
     642:	8e e2       	ldi	r24, 0x2E	; 46
     644:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     648:	02 15       	cp	r16, r2
     64a:	88 f3       	brcs	.-30     	; 0x62e <DisplayValue+0x114>
      lcd_data('.');			/* display dot */
    }
  }

  /* display prefix and unit */
  if (Prefix != 0) lcd_data(Prefix);
     64c:	bb 20       	and	r11, r11
     64e:	19 f0       	breq	.+6      	; 0x656 <DisplayValue+0x13c>
     650:	8b 2d       	mov	r24, r11
     652:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
  if (Unit) lcd_data(Unit);
     656:	77 20       	and	r7, r7
     658:	19 f0       	breq	.+6      	; 0x660 <DisplayValue+0x146>
     65a:	87 2d       	mov	r24, r7
     65c:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
}
     660:	2f 96       	adiw	r28, 0x0f	; 15
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	f8 94       	cli
     666:	de bf       	out	0x3e, r29	; 62
     668:	0f be       	out	0x3f, r0	; 63
     66a:	cd bf       	out	0x3d, r28	; 61
     66c:	cf 91       	pop	r28
     66e:	df 91       	pop	r29
     670:	1f 91       	pop	r17
     672:	0f 91       	pop	r16
     674:	ff 90       	pop	r15
     676:	ef 90       	pop	r14
     678:	df 90       	pop	r13
     67a:	cf 90       	pop	r12
     67c:	bf 90       	pop	r11
     67e:	af 90       	pop	r10
     680:	9f 90       	pop	r9
     682:	8f 90       	pop	r8
     684:	7f 90       	pop	r7
     686:	5f 90       	pop	r5
     688:	4f 90       	pop	r4
     68a:	3f 90       	pop	r3
     68c:	2f 90       	pop	r2
     68e:	08 95       	ret

00000690 <RvalOut>:
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
      lcd_space();
   }
}

void RvalOut(uint8_t nrr) {	
     690:	0f 93       	push	r16
   // output of resistor value
#if FLASHEND > 0x1fff
   uint16_t rr;
   if ((resis[nrr].rx < 100) && (resis[0].lx == 0)) {
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	fc 01       	movw	r30, r24
     696:	ee 0f       	add	r30, r30
     698:	ff 1f       	adc	r31, r31
     69a:	e8 0f       	add	r30, r24
     69c:	f9 1f       	adc	r31, r25
     69e:	ee 0f       	add	r30, r30
     6a0:	ff 1f       	adc	r31, r31
     6a2:	ee 0f       	add	r30, r30
     6a4:	ff 1f       	adc	r31, r31
     6a6:	e8 5e       	subi	r30, 0xE8	; 232
     6a8:	fe 4f       	sbci	r31, 0xFE	; 254
     6aa:	60 81       	ld	r22, Z
     6ac:	71 81       	ldd	r23, Z+1	; 0x01
     6ae:	82 81       	ldd	r24, Z+2	; 0x02
     6b0:	93 81       	ldd	r25, Z+3	; 0x03
     6b2:	64 36       	cpi	r22, 0x64	; 100
     6b4:	71 05       	cpc	r23, r1
     6b6:	81 05       	cpc	r24, r1
     6b8:	91 05       	cpc	r25, r1
     6ba:	c0 f4       	brcc	.+48     	; 0x6ec <RvalOut+0x5c>
     6bc:	20 91 1c 01 	lds	r18, 0x011C
     6c0:	30 91 1d 01 	lds	r19, 0x011D
     6c4:	40 91 1e 01 	lds	r20, 0x011E
     6c8:	50 91 1f 01 	lds	r21, 0x011F
     6cc:	21 15       	cp	r18, r1
     6ce:	31 05       	cpc	r19, r1
     6d0:	41 05       	cpc	r20, r1
     6d2:	51 05       	cpc	r21, r1
     6d4:	59 f4       	brne	.+22     	; 0x6ec <RvalOut+0x5c>
      rr = GetESR(resis[nrr].ra,resis[nrr].rb);
     6d6:	81 85       	ldd	r24, Z+9	; 0x09
     6d8:	62 85       	ldd	r22, Z+10	; 0x0a
     6da:	0e 94 27 1b 	call	0x364e	; 0x364e <GetESR>
      DisplayValue(rr,-2,LCD_CHAR_OMEGA,3);
     6de:	bc 01       	movw	r22, r24
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	4e ef       	ldi	r20, 0xFE	; 254
     6e6:	24 ef       	ldi	r18, 0xF4	; 244
     6e8:	03 e0       	ldi	r16, 0x03	; 3
     6ea:	03 c0       	rjmp	.+6      	; 0x6f2 <RvalOut+0x62>
   } else {
      DisplayValue(resis[nrr].rx,-1,LCD_CHAR_OMEGA,4);
     6ec:	4f ef       	ldi	r20, 0xFF	; 255
     6ee:	24 ef       	ldi	r18, 0xF4	; 244
     6f0:	04 e0       	ldi	r16, 0x04	; 4
     6f2:	0e 94 8d 02 	call	0x51a	; 0x51a <DisplayValue>
   }
#else
   DisplayValue(resis[nrr].rx,-1,LCD_CHAR_OMEGA,4);
#endif
   lcd_space();
     6f6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>
 }
     6fa:	0f 91       	pop	r16
     6fc:	08 95       	ret

000006fe <mVAusgabe>:
   lcd_line2(); 				//2. row
   lcd_fix_string(Uf_str);			//"Uf="
   mVAusgabe(bcdnum >> 4);
   mVAusgabe(bcdnum & 0x0f);
}
void mVAusgabe(uint8_t nn) {
     6fe:	0f 93       	push	r16
   if (nn < 3) {
     700:	83 30       	cpi	r24, 0x03	; 3
     702:	98 f4       	brcc	.+38     	; 0x72a <mVAusgabe+0x2c>
      // Output in mV units
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
     704:	e8 2f       	mov	r30, r24
     706:	f0 e0       	ldi	r31, 0x00	; 0
     708:	ee 0f       	add	r30, r30
     70a:	ff 1f       	adc	r31, r31
     70c:	ee 0f       	add	r30, r30
     70e:	ff 1f       	adc	r31, r31
     710:	e5 57       	subi	r30, 0x75	; 117
     712:	fe 4f       	sbci	r31, 0xFE	; 254
     714:	62 81       	ldd	r22, Z+2	; 0x02
     716:	73 81       	ldd	r23, Z+3	; 0x03
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	4d ef       	ldi	r20, 0xFD	; 253
     71e:	26 e5       	ldi	r18, 0x56	; 86
     720:	03 e0       	ldi	r16, 0x03	; 3
     722:	0e 94 8d 02 	call	0x51a	; 0x51a <DisplayValue>
      lcd_space();
     726:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>
   }
}
     72a:	0f 91       	pop	r16
     72c:	08 95       	ret

0000072e <UfAusgabe>:
// output of flux voltage for 1-2 diodes in row 2
// bcdnum = Numbers of both Diodes:
// higher 4 Bit  number of first Diode
// lower 4 Bit  number of second Diode (Structure diodes[nn])
// if number >= 3  no output is done
void UfAusgabe(uint8_t bcdnum) {
     72e:	1f 93       	push	r17
     730:	18 2f       	mov	r17, r24

   lcd_line2(); 				//2. row
     732:	80 ec       	ldi	r24, 0xC0	; 192
     734:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
   lcd_fix_string(Uf_str);			//"Uf="
     738:	8b e0       	ldi	r24, 0x0B	; 11
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
   mVAusgabe(bcdnum >> 4);
     740:	81 2f       	mov	r24, r17
     742:	82 95       	swap	r24
     744:	8f 70       	andi	r24, 0x0F	; 15
     746:	0e 94 7f 03 	call	0x6fe	; 0x6fe <mVAusgabe>
   mVAusgabe(bcdnum & 0x0f);
     74a:	81 2f       	mov	r24, r17
     74c:	8f 70       	andi	r24, 0x0F	; 15
     74e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <mVAusgabe>
}
     752:	1f 91       	pop	r17
     754:	08 95       	ret

00000756 <SerienDiodenAusgabe>:
  goto start;	// POWER_OFF not selected, repeat measurement
#endif
  return 0;
}   // end main

void SerienDiodenAusgabe() {
     756:	df 92       	push	r13
     758:	ef 92       	push	r14
     75a:	ff 92       	push	r15
     75c:	0f 93       	push	r16
     75e:	1f 93       	push	r17
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
   uint8_t first;
   uint8_t second;
   first = diode_sequence >> 4;
     764:	d0 90 02 01 	lds	r13, 0x0102
     768:	8d 2d       	mov	r24, r13
     76a:	82 95       	swap	r24
     76c:	8f 70       	andi	r24, 0x0F	; 15
   second = diode_sequence & 3;
   lcd_testpin(diodes[first].Anode);
     76e:	c8 2f       	mov	r28, r24
     770:	d0 e0       	ldi	r29, 0x00	; 0
     772:	0b e8       	ldi	r16, 0x8B	; 139
     774:	11 e0       	ldi	r17, 0x01	; 1
     776:	cc 0f       	add	r28, r28
     778:	dd 1f       	adc	r29, r29
     77a:	cc 0f       	add	r28, r28
     77c:	dd 1f       	adc	r29, r29
     77e:	c0 0f       	add	r28, r16
     780:	d1 1f       	adc	r29, r17
     782:	88 81       	ld	r24, Y
     784:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
   lcd_fix_string(AnKat);	//"->|-"
     788:	80 e4       	ldi	r24, 0x40	; 64
     78a:	e8 2e       	mov	r14, r24
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	f8 2e       	mov	r15, r24
     790:	c7 01       	movw	r24, r14
     792:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
   lcd_testpin(diodes[first].Cathode);
     796:	89 81       	ldd	r24, Y+1	; 0x01
     798:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
   lcd_fix_string(AnKat);	//"->|-"
     79c:	c7 01       	movw	r24, r14
     79e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>

void SerienDiodenAusgabe() {
   uint8_t first;
   uint8_t second;
   first = diode_sequence >> 4;
   second = diode_sequence & 3;
     7a2:	ed 2d       	mov	r30, r13
     7a4:	e3 70       	andi	r30, 0x03	; 3
   lcd_testpin(diodes[first].Anode);
   lcd_fix_string(AnKat);	//"->|-"
   lcd_testpin(diodes[first].Cathode);
   lcd_fix_string(AnKat);	//"->|-"
   lcd_testpin(diodes[second].Cathode);
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	ee 0f       	add	r30, r30
     7aa:	ff 1f       	adc	r31, r31
     7ac:	ee 0f       	add	r30, r30
     7ae:	ff 1f       	adc	r31, r31
     7b0:	e0 0f       	add	r30, r16
     7b2:	f1 1f       	adc	r31, r17
     7b4:	81 81       	ldd	r24, Z+1	; 0x01
     7b6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
   UfAusgabe(diode_sequence);
     7ba:	80 91 02 01 	lds	r24, 0x0102
     7be:	0e 94 97 03 	call	0x72e	; 0x72e <UfAusgabe>
}
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	ff 90       	pop	r15
     7cc:	ef 90       	pop	r14
     7ce:	df 90       	pop	r13
     7d0:	08 95       	ret

000007d2 <sleep_5ms>:
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
      pause = 0;
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     7d2:	42 e0       	ldi	r20, 0x02	; 2
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     7d4:	1c c0       	rjmp	.+56     	; 0x80e <sleep_5ms+0x3c>
  {
 #if 3000 > RESTART_DELAY_US
   if (pause > 1)
     7d6:	82 30       	cpi	r24, 0x02	; 2
     7d8:	91 05       	cpc	r25, r1
     7da:	18 f0       	brcs	.+6      	; 0x7e2 <sleep_5ms+0x10>
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
      pause -= 2;
     7dc:	02 97       	sbiw	r24, 0x02	; 2
  {
 #if 3000 > RESTART_DELAY_US
   if (pause > 1)
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
     7de:	3e e3       	ldi	r19, 0x3E	; 62
     7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <sleep_5ms+0x16>
      pause -= 2;
     } else {
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
     7e2:	37 e1       	ldi	r19, 0x17	; 23
      pause = 0;
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
     7e8:	20 91 b2 00 	lds	r18, 0x00B2
     7ec:	23 0f       	add	r18, r19
     7ee:	20 93 b3 00 	sts	0x00B3, r18
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     7f2:	40 93 70 00 	sts	0x0070, r20
   set_sleep_mode(SLEEP_MODE_PWR_SAVE);
     7f6:	23 b7       	in	r18, 0x33	; 51
     7f8:	21 7f       	andi	r18, 0xF1	; 241
     7fa:	26 60       	ori	r18, 0x06	; 6
     7fc:	23 bf       	out	0x33, r18	; 51
//   set_sleep_mode(SLEEP_MODE_IDLE);
   sleep_mode();
     7fe:	23 b7       	in	r18, 0x33	; 51
     800:	21 60       	ori	r18, 0x01	; 1
     802:	23 bf       	out	0x33, r18	; 51
     804:	88 95       	sleep
     806:	23 b7       	in	r18, 0x33	; 51
     808:	2e 7f       	andi	r18, 0xFE	; 254
     80a:	23 bf       	out	0x33, r18	; 51
// wake up after output compare match interrupt
 #else
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
 #endif
   wdt_reset();
     80c:	a8 95       	wdr
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     80e:	00 97       	sbiw	r24, 0x00	; 0
     810:	11 f7       	brne	.-60     	; 0x7d6 <sleep_5ms+0x4>
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
 #endif
   wdt_reset();
  }
TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
     812:	10 92 70 00 	sts	0x0070, r1
}
     816:	08 95       	ret

00000818 <ChargePin10ms>:
 }

//******************************************************************
#include "CheckPins.c"

void ChargePin10ms(uint8_t PinToCharge, uint8_t ChargeDirection) {
     818:	1f 93       	push	r17
     81a:	18 2f       	mov	r17, r24
   //Will be used by discharge of MOSFET Gates or to load big capacities.
   //Parameters:
   //PinToCharge: specifies the pin as mask for R-Port
   //ChargeDirection: 0 = switch to GND (N-Kanal-FET), 1= switch to VCC(P-Kanal-FET)

   if(ChargeDirection&1) {
     81c:	60 ff       	sbrs	r22, 0
     81e:	03 c0       	rjmp	.+6      	; 0x826 <ChargePin10ms+0xe>
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
     820:	85 b1       	in	r24, 0x05	; 5
     822:	81 2b       	or	r24, r17
     824:	03 c0       	rjmp	.+6      	; 0x82c <ChargePin10ms+0x14>
   } else {
      R_PORT &= ~PinToCharge; // or 0 (GND)
     826:	95 b1       	in	r25, 0x05	; 5
     828:	80 95       	com	r24
     82a:	89 23       	and	r24, r25
     82c:	85 b9       	out	0x05, r24	; 5
   }
   R_DDR |= PinToCharge;		//switch Pin to output, across R to GND or VCC
     82e:	84 b1       	in	r24, 0x04	; 4
     830:	81 2b       	or	r24, r17
     832:	84 b9       	out	0x04, r24	; 4
   wait_about10ms();			// wait about 10ms
     834:	82 e0       	ldi	r24, 0x02	; 2
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
   // switch back Input, no current
   R_DDR &= ~PinToCharge;	// switch back to input
     83c:	84 b1       	in	r24, 0x04	; 4
     83e:	10 95       	com	r17
     840:	81 23       	and	r24, r17
     842:	84 b9       	out	0x04, r24	; 4
   R_PORT &= ~PinToCharge;	// no Pull up
     844:	85 b1       	in	r24, 0x05	; 5
     846:	81 23       	and	r24, r17
     848:	85 b9       	out	0x05, r24	; 5
}
     84a:	1f 91       	pop	r17
     84c:	08 95       	ret

0000084e <CheckPins>:
//******************************************************************
void CheckPins(uint8_t HighPin, uint8_t LowPin, uint8_t TristatePin)
  {
     84e:	2f 92       	push	r2
     850:	3f 92       	push	r3
     852:	4f 92       	push	r4
     854:	5f 92       	push	r5
     856:	6f 92       	push	r6
     858:	7f 92       	push	r7
     85a:	8f 92       	push	r8
     85c:	9f 92       	push	r9
     85e:	af 92       	push	r10
     860:	bf 92       	push	r11
     862:	cf 92       	push	r12
     864:	df 92       	push	r13
     866:	ef 92       	push	r14
     868:	ff 92       	push	r15
     86a:	0f 93       	push	r16
     86c:	1f 93       	push	r17
     86e:	df 93       	push	r29
     870:	cf 93       	push	r28
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
     876:	2d 97       	sbiw	r28, 0x0d	; 13
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	f8 94       	cli
     87c:	de bf       	out	0x3e, r29	; 62
     87e:	0f be       	out	0x3f, r0	; 63
     880:	cd bf       	out	0x3d, r28	; 61
     882:	18 2f       	mov	r17, r24
     884:	36 2e       	mov	r3, r22
     886:	49 83       	std	Y+1, r20	; 0x01
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
     888:	a8 95       	wdr
//  #define RR680MI resis680mi
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = pgm_read_byte(&PinRLtab[LowPin]);		// instruction for LowPin R_L
     88a:	86 2f       	mov	r24, r22
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	fc 01       	movw	r30, r24
     890:	e0 50       	subi	r30, 0x00	; 0
     892:	ff 4f       	sbci	r31, 0xFF	; 255
     894:	44 90       	lpm	r4, Z+
  LoPinRH = LoPinRL + LoPinRL;				// instruction for LowPin R_H
  TriPinRL = pgm_read_byte(&PinRLtab[TristatePin]);	// instruction for TristatePin R_L
     896:	e4 2f       	mov	r30, r20
     898:	f0 e0       	ldi	r31, 0x00	; 0
     89a:	e0 50       	subi	r30, 0x00	; 0
     89c:	ff 4f       	sbci	r31, 0xFF	; 255
     89e:	84 90       	lpm	r8, Z+
  TriPinRH = TriPinRL + TriPinRL;			// instruction for TristatePin R_H
  HiPinRL = pgm_read_byte(&PinRLtab[HighPin]);		// instruction for HighPin R_L
     8a0:	21 2f       	mov	r18, r17
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	f9 01       	movw	r30, r18
     8a6:	e0 50       	subi	r30, 0x00	; 0
     8a8:	ff 4f       	sbci	r31, 0xFF	; 255
     8aa:	c4 90       	lpm	r12, Z+
  HiPinRH = HiPinRL + HiPinRL;				// instruction for HighPin R_H

  HiADCp = pgm_read_byte(&PinADCtab[HighPin]);		// instruction for ADC High-Pin 
     8ac:	2d 5f       	subi	r18, 0xFD	; 253
     8ae:	3e 4f       	sbci	r19, 0xFE	; 254
     8b0:	f9 01       	movw	r30, r18
     8b2:	d4 90       	lpm	r13, Z+
  LoADCp = pgm_read_byte(&PinADCtab[LowPin]);		// instruction for ADC Low-Pin
     8b4:	8d 5f       	subi	r24, 0xFD	; 253
     8b6:	9e 4f       	sbci	r25, 0xFE	; 254
     8b8:	fc 01       	movw	r30, r24
     8ba:	94 90       	lpm	r9, Z+
  HiADCm = HiADCp | TXD_MSK;
     8bc:	f8 e0       	ldi	r31, 0x08	; 8
     8be:	df 2a       	or	r13, r31
  HiADCp |= TXD_VAL;
  LoADCm = LoADCp | TXD_MSK;
     8c0:	9f 2a       	or	r9, r31
  LoADCp |= TXD_VAL;

  //setting of Pins 
  R_PORT = 0;				//resistor-Port outputs to 0
     8c2:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//Low-Pin to output and across R_L to GND
     8c4:	44 b8       	out	0x04, r4	; 4
  ADC_DDR = HiADCm;		//High-Pin to output
     8c6:	d7 b8       	out	0x07, r13	; 7
  ADC_PORT = HiADCp;		//High-Pin fix to Vcc
     8c8:	d8 b8       	out	0x08, r13	; 8
  //for some MOSFET the gate (TristatePin) must be discharged
  R_DDR = LoPinRL | TriPinRL;
     8ca:	a8 2c       	mov	r10, r8
     8cc:	a4 28       	or	r10, r4
     8ce:	a4 b8       	out	0x04, r10	; 4
  adc.vCEs = W5msReadADC(LowPin);	// lp1 is the voltage at 680 Ohm with - Gate
     8d0:	86 2f       	mov	r24, r22
     8d2:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
     8d6:	ac 01       	movw	r20, r24
  R_DDR = LoPinRL;	
     8d8:	44 b8       	out	0x04, r4	; 4
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin  , without Gate current (-)
     8da:	83 2d       	mov	r24, r3
     8dc:	4a 87       	std	Y+10, r20	; 0x0a
     8de:	5b 87       	std	Y+11, r21	; 0x0b
     8e0:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
     8e4:	3c 01       	movw	r6, r24
  R_DDR = 0;
     8e6:	14 b8       	out	0x04, r1	; 4
  wait5ms();				// release all current (clear TRIAC and Thyristor)
     8e8:	0e 94 47 14 	call	0x288e	; 0x288e <wait5ms>
  R_PORT = TriPinRL;
     8ec:	85 b8       	out	0x05, r8	; 5
  R_DDR = LoPinRL | TriPinRL;		// start current again
     8ee:	a4 b8       	out	0x04, r10	; 4
  adc.lp2 = W5msReadADC(LowPin);	// lp2 is the voltage at 680 Ohm with + Gate
     8f0:	83 2d       	mov	r24, r3
     8f2:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
     8f6:	7c 01       	movw	r14, r24
  R_DDR = LoPinRL;
     8f8:	44 b8       	out	0x04, r4	; 4
  R_PORT = 0;
     8fa:	15 b8       	out	0x05, r1	; 5
  if (adc.lp2 < adc.vCEs) {
     8fc:	4a 85       	ldd	r20, Y+10	; 0x0a
     8fe:	5b 85       	ldd	r21, Y+11	; 0x0b
     900:	84 17       	cp	r24, r20
     902:	95 07       	cpc	r25, r21
     904:	28 f4       	brcc	.+10     	; 0x910 <CheckPins+0xc2>
     adc.vCEs = adc.lp2;
     adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin again, without Gate current (+)
     906:	83 2d       	mov	r24, r3
     908:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
     90c:	3c 01       	movw	r6, r24
     90e:	a7 01       	movw	r20, r14
  // a TRIAC is marked as two transistors at least (2 or 3)
  // both of NPN transistors (normal and inverse) are found, if ntrans.count == 2
  // both of PNP transistors (normal and inverse) are found, if ptrans.count == 2
  // If Transistor with protection diode is checked, all results are found,
  // if ntrans.count == 1 and ptrans.count == 1
  if ((ntrans.count + ptrans.count) > 1) {
     910:	20 91 72 01 	lds	r18, 0x0172
     914:	80 91 5a 01 	lds	r24, 0x015A
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	82 0f       	add	r24, r18
     91c:	91 1d       	adc	r25, r1
     91e:	82 30       	cpi	r24, 0x02	; 2
     920:	91 05       	cpc	r25, r1
     922:	0c f0       	brlt	.+2      	; 0x926 <CheckPins+0xd8>
     924:	ed c3       	rjmp	.+2010   	; 0x1100 <CheckPins+0x8b2>
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = pgm_read_byte(&PinRLtab[LowPin]);		// instruction for LowPin R_L
  LoPinRH = LoPinRL + LoPinRL;				// instruction for LowPin R_H
  TriPinRL = pgm_read_byte(&PinRLtab[TristatePin]);	// instruction for TristatePin R_L
  TriPinRH = TriPinRL + TriPinRL;			// instruction for TristatePin R_H
     926:	58 2c       	mov	r5, r8
     928:	55 0c       	add	r5, r5
//  if(adc.lp_otr > 92) {  //there is some current without TristatePin current 
  // Look for Source/Drain current without gate current.
  // Germanium transistors have also high collector current with higher temperature.
  // But this current is lower, if the base is hold at emitter level (adc.hp1).
  // Additional checking of adc.lp1 will prevent to detect a PNP as P-JFET.
  if((adc.lp_otr > 455)  && (adc.vCEs > 455))
     92a:	28 ec       	ldi	r18, 0xC8	; 200
     92c:	62 16       	cp	r6, r18
     92e:	21 e0       	ldi	r18, 0x01	; 1
     930:	72 06       	cpc	r7, r18
     932:	08 f4       	brcc	.+2      	; 0x936 <CheckPins+0xe8>
     934:	b0 c0       	rjmp	.+352    	; 0xa96 <CheckPins+0x248>
     936:	31 e0       	ldi	r19, 0x01	; 1
     938:	48 3c       	cpi	r20, 0xC8	; 200
     93a:	53 07       	cpc	r21, r19
     93c:	08 f4       	brcc	.+2      	; 0x940 <CheckPins+0xf2>
     93e:	ab c0       	rjmp	.+342    	; 0xa96 <CheckPins+0x248>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test if N-JFET or if self-conducting N-MOSFET
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
     940:	85 2d       	mov	r24, r5
     942:	84 29       	or	r24, r4
     944:	84 b9       	out	0x04, r24	; 4
     adc.lp1 = W20msReadADC(LowPin);	//measure voltage at the assumed Source 
     946:	83 2d       	mov	r24, r3
     948:	0e 94 b5 1a 	call	0x356a	; 0x356a <W20msReadADC>
     94c:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     94e:	89 81       	ldd	r24, Y+1	; 0x01
     950:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
     954:	7c 01       	movw	r14, r24
     R_PORT = TriPinRH;			//switch R_H for Tristate-Pin (probably Gate) to VCC
     956:	55 b8       	out	0x05, r5	; 5
     adc.lp2 = W20msReadADC(LowPin);	//measure voltage at the assumed Source again
     958:	83 2d       	mov	r24, r3
     95a:	0e 94 b5 1a 	call	0x356a	; 0x356a <W20msReadADC>
     //If it is a self-conducting MOSFET or JFET, then must be: adc.lp2 > adc.lp1 
     if(adc.lp2>(adc.lp1+488)) {
     95e:	95 01       	movw	r18, r10
     960:	28 51       	subi	r18, 0x18	; 24
     962:	3e 4f       	sbci	r19, 0xFE	; 254
     964:	5c 28       	or	r5, r12
     966:	28 17       	cp	r18, r24
     968:	39 07       	cpc	r19, r25
     96a:	08 f0       	brcs	.+2      	; 0x96e <CheckPins+0x120>
     96c:	40 c0       	rjmp	.+128    	; 0x9ee <CheckPins+0x1a0>
        //measure voltage at the  Gate, differ between MOSFET and JFET
        ADC_PORT = TXD_VAL;
     96e:	88 e0       	ldi	r24, 0x08	; 8
     970:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = LoADCm;	//Low-Pin fix to GND
     972:	97 b8       	out	0x07, r9	; 7
        R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     974:	54 b8       	out	0x04, r5	; 4
        R_PORT = TriPinRH | HiPinRL;	//switch R_L for High-Pin to VCC
     976:	55 b8       	out	0x05, r5	; 5
        adc.lp2 = W20msReadADC(TristatePin); //read voltage of assumed Gate 
     978:	89 81       	ldd	r24, Y+1	; 0x01
     97a:	0e 94 b5 1a 	call	0x356a	; 0x356a <W20msReadADC>
        if(adc.lp2>3911) {  //MOSFET
     97e:	4f e0       	ldi	r20, 0x0F	; 15
     980:	88 34       	cpi	r24, 0x48	; 72
     982:	94 07       	cpc	r25, r20
     984:	28 f0       	brcs	.+10     	; 0x990 <CheckPins+0x142>
           PartFound = PART_FET;	//N-Kanal-MOSFET
     986:	83 e0       	ldi	r24, 0x03	; 3
     988:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_N_D_MOS; //Depletion-MOSFET
     98c:	84 e0       	ldi	r24, 0x04	; 4
     98e:	04 c0       	rjmp	.+8      	; 0x998 <CheckPins+0x14a>
        } else {  //JFET (pn-passage between Gate and Source is conducting )
           PartFound = PART_FET;	//N-Kanal-JFET
     990:	83 e0       	ldi	r24, 0x03	; 3
     992:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_N_JFET;
     996:	86 e0       	ldi	r24, 0x06	; 6
     998:	80 93 06 01 	sts	0x0106, r24
        lcd_data('N');
        lcd_data('J');
#endif
//      if ((PartReady == 0) || (adc.lp1 > ntrans.uBE)) 
//      there is no way to find out the right Source / Drain
        ntrans.uBE = adc.lp1;
     99c:	b0 92 52 01 	sts	0x0152, r11
     9a0:	a0 92 51 01 	sts	0x0151, r10
        if(adc.lp1 > adc.tp1) {
     9a4:	ea 14       	cp	r14, r10
     9a6:	fb 04       	cpc	r15, r11
     9a8:	40 f4       	brcc	.+16     	; 0x9ba <CheckPins+0x16c>
          ntrans.gthvoltage = adc.lp1 - adc.tp1;	//voltage GS (Source - Gate)
     9aa:	c5 01       	movw	r24, r10
     9ac:	8e 19       	sub	r24, r14
     9ae:	9f 09       	sbc	r25, r15
     9b0:	90 93 56 01 	sts	0x0156, r25
     9b4:	80 93 55 01 	sts	0x0155, r24
     9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <CheckPins+0x174>
        } else {
          ntrans.gthvoltage = 0;	//voltage GS (Source - Gate)
     9ba:	10 92 56 01 	sts	0x0156, r1
     9be:	10 92 55 01 	sts	0x0155, r1
        }
        ntrans.current = (unsigned int)(((unsigned long)adc.lp1 * 1000) / RR680MI); // Id 0.01mA
     9c2:	b5 01       	movw	r22, r10
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	28 ee       	ldi	r18, 0xE8	; 232
     9ca:	33 e0       	ldi	r19, 0x03	; 3
     9cc:	40 e0       	ldi	r20, 0x00	; 0
     9ce:	50 e0       	ldi	r21, 0x00	; 0
     9d0:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
     9d4:	20 91 03 01 	lds	r18, 0x0103
     9d8:	30 91 04 01 	lds	r19, 0x0104
     9dc:	40 e0       	ldi	r20, 0x00	; 0
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
     9e4:	30 93 54 01 	sts	0x0154, r19
     9e8:	20 93 53 01 	sts	0x0153, r18
     9ec:	80 c3       	rjmp	.+1792   	; 0x10ee <CheckPins+0x8a0>
        ntrans.count++;			// count as two, the inverse is identical
        goto saveNresult;		// save Pin numbers and exit
     }

     ADC_PORT = TXD_VAL;		// direct outputs to GND
     9ee:	88 e0       	ldi	r24, 0x08	; 8
     9f0:	88 b9       	out	0x08, r24	; 8

     //Test, if P-JFET or if self-conducting P-MOSFET
     ADC_DDR = LoADCm;		//switch Low-Pin (assumed Drain) direct to GND,
     9f2:	97 b8       	out	0x07, r9	; 7
				//R_H for Tristate-Pin (assumed Gate) is already switched to VCC
     R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     9f4:	54 b8       	out	0x04, r5	; 4
     R_PORT = TriPinRH | HiPinRL;	//High-Pin across R_L to Vcc
     9f6:	55 b8       	out	0x05, r5	; 5
     adc.hp1 = W20msReadADC(HighPin);	//measure voltage at assumed Source 
     9f8:	81 2f       	mov	r24, r17
     9fa:	0e 94 b5 1a 	call	0x356a	; 0x356a <W20msReadADC>
     9fe:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     a00:	89 81       	ldd	r24, Y+1	; 0x01
     a02:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
     a06:	7c 01       	movw	r14, r24
     R_PORT = HiPinRL;			//switch R_H for Tristate-Pin (assumed Gate) to GND
     a08:	c5 b8       	out	0x05, r12	; 5
     adc.hp2 = W20msReadADC(HighPin);	//read voltage at assumed Source again
     a0a:	81 2f       	mov	r24, r17
     a0c:	0e 94 b5 1a 	call	0x356a	; 0x356a <W20msReadADC>
     //if it is a self-conducting P_MOSFET or P-JFET , then must be:  adc.hp1 > adc.hp2 
     if(adc.hp1>(adc.hp2+488)) {
     a10:	88 51       	subi	r24, 0x18	; 24
     a12:	9e 4f       	sbci	r25, 0xFE	; 254
     a14:	8a 15       	cp	r24, r10
     a16:	9b 05       	cpc	r25, r11
     a18:	08 f0       	brcs	.+2      	; 0xa1c <CheckPins+0x1ce>
     a1a:	72 c3       	rjmp	.+1764   	; 0x1100 <CheckPins+0x8b2>
        //read voltage at the Gate , to differ between MOSFET and JFET
        ADC_PORT = HiADCp;	//switch High-Pin directly to VCC
     a1c:	d8 b8       	out	0x08, r13	; 8
        ADC_DDR = HiADCm;	//switch High-Pin to output
     a1e:	d7 b8       	out	0x07, r13	; 7
        adc.tp2 = W20msReadADC(TristatePin); //read voltage at the assumed Gate 
     a20:	89 81       	ldd	r24, Y+1	; 0x01
     a22:	0e 94 b5 1a 	call	0x356a	; 0x356a <W20msReadADC>
        if(adc.tp2<977) { 		//MOSFET
     a26:	53 e0       	ldi	r21, 0x03	; 3
     a28:	81 3d       	cpi	r24, 0xD1	; 209
     a2a:	95 07       	cpc	r25, r21
     a2c:	28 f4       	brcc	.+10     	; 0xa38 <CheckPins+0x1ea>
           PartFound = PART_FET;	//P-Kanal-MOSFET
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_D_MOS; //Depletion-MOSFET
     a34:	85 e0       	ldi	r24, 0x05	; 5
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <CheckPins+0x1f2>
        } else { 			//JFET (pn-passage between Gate and Source is conducting)
           PartFound = PART_FET;	//P-Kanal-JFET
     a38:	83 e0       	ldi	r24, 0x03	; 3
     a3a:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_JFET;
     a3e:	87 e0       	ldi	r24, 0x07	; 7
     a40:	80 93 06 01 	sts	0x0106, r24
        }
#if DebugOut == 5
        lcd_data('P');
        lcd_data('J');
#endif
        if(adc.tp1 > adc.hp1) {
     a44:	ae 14       	cp	r10, r14
     a46:	bf 04       	cpc	r11, r15
     a48:	38 f4       	brcc	.+14     	; 0xa58 <CheckPins+0x20a>
          ptrans.gthvoltage = adc.tp1 - adc.hp1;	//voltage GS (Gate - Source)
     a4a:	ea 18       	sub	r14, r10
     a4c:	fb 08       	sbc	r15, r11
     a4e:	f0 92 6e 01 	sts	0x016E, r15
     a52:	e0 92 6d 01 	sts	0x016D, r14
     a56:	04 c0       	rjmp	.+8      	; 0xa60 <CheckPins+0x212>
        } else {
          ptrans.gthvoltage = 0;
     a58:	10 92 6e 01 	sts	0x016E, r1
     a5c:	10 92 6d 01 	sts	0x016D, r1
        }
        ptrans.current = (unsigned int)(((unsigned long)(ADCconfig.U_AVCC - adc.hp1) * 1000) / RR680PL); // Id 0.01mA
     a60:	60 91 40 01 	lds	r22, 0x0140
     a64:	70 91 41 01 	lds	r23, 0x0141
     a68:	6a 19       	sub	r22, r10
     a6a:	7b 09       	sbc	r23, r11
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	28 ee       	ldi	r18, 0xE8	; 232
     a72:	33 e0       	ldi	r19, 0x03	; 3
     a74:	40 e0       	ldi	r20, 0x00	; 0
     a76:	50 e0       	ldi	r21, 0x00	; 0
     a78:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
     a7c:	20 91 08 01 	lds	r18, 0x0108
     a80:	30 91 09 01 	lds	r19, 0x0109
     a84:	40 e0       	ldi	r20, 0x00	; 0
     a86:	50 e0       	ldi	r21, 0x00	; 0
     a88:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
     a8c:	30 93 6c 01 	sts	0x016C, r19
     a90:	20 93 6b 01 	sts	0x016B, r18
     a94:	61 c1       	rjmp	.+706    	; 0xd58 <CheckPins+0x50a>


  //there is more than 650uA current without TristatePin current 
#ifdef COMMON_COLLECTOR
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
     a96:	88 e0       	ldi	r24, 0x08	; 8
     a98:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;			// Collector direct to GND
     a9a:	97 b8       	out	0x07, r9	; 7
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
     a9c:	c5 b8       	out	0x05, r12	; 5
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
     a9e:	2c 2c       	mov	r2, r12
     aa0:	28 28       	or	r2, r8
     aa2:	24 b8       	out	0x04, r2	; 4
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     aa4:	20 91 40 01 	lds	r18, 0x0140
     aa8:	30 91 41 01 	lds	r19, 0x0141
     aac:	81 2f       	mov	r24, r17
     aae:	2b 87       	std	Y+11, r18	; 0x0b
     ab0:	3a 87       	std	Y+10, r19	; 0x0a
     ab2:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
     ab6:	7c 01       	movw	r14, r24
  adc.tp1 = ReadADC(TristatePin);	// voltage at the base resistor
     ab8:	89 81       	ldd	r24, Y+1	; 0x01
     aba:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
     abe:	9b 83       	std	Y+3, r25	; 0x03
     ac0:	8a 83       	std	Y+2, r24	; 0x02

  if (adc.tp1 < 10) {
     ac2:	2b 85       	ldd	r18, Y+11	; 0x0b
     ac4:	3a 85       	ldd	r19, Y+10	; 0x0a
     ac6:	8a 30       	cpi	r24, 0x0A	; 10
     ac8:	91 05       	cpc	r25, r1
     aca:	08 f0       	brcs	.+2      	; 0xace <CheckPins+0x280>
     acc:	43 c0       	rjmp	.+134    	; 0xb54 <CheckPins+0x306>
     R_DDR = 0;
     ace:	14 b8       	out	0x04, r1	; 4
     wait_about5ms();		// clear TRIAC and Thyristor
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
     ad8:	85 2d       	mov	r24, r5
     ada:	8c 29       	or	r24, r12
     adc:	84 b9       	out	0x04, r24	; 4
     adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);
     ade:	60 91 40 01 	lds	r22, 0x0140
     ae2:	70 91 41 01 	lds	r23, 0x0141
     ae6:	7d 87       	std	Y+13, r23	; 0x0d
     ae8:	6c 87       	std	Y+12, r22	; 0x0c
     aea:	81 2f       	mov	r24, r17
     aec:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
     af0:	ac 85       	ldd	r26, Y+12	; 0x0c
     af2:	bd 85       	ldd	r27, Y+13	; 0x0d
     af4:	a8 1b       	sub	r26, r24
     af6:	b9 0b       	sbc	r27, r25
     af8:	bd 87       	std	Y+13, r27	; 0x0d
     afa:	ac 87       	std	Y+12, r26	; 0x0c
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
     afc:	89 81       	ldd	r24, Y+1	; 0x01
     afe:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
     b02:	9b 83       	std	Y+3, r25	; 0x03
     b04:	8a 83       	std	Y+2, r24	; 0x02
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     b06:	4c 85       	ldd	r20, Y+12	; 0x0c
     b08:	5d 85       	ldd	r21, Y+13	; 0x0d
     b0a:	9a 01       	movw	r18, r20
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	2c 83       	std	Y+4, r18	; 0x04
     b12:	3d 83       	std	Y+5, r19	; 0x05
     b14:	4e 83       	std	Y+6, r20	; 0x06
     b16:	5f 83       	std	Y+7, r21	; 0x07
     b18:	20 91 08 01 	lds	r18, 0x0108
     b1c:	30 91 09 01 	lds	r19, 0x0109
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	60 e6       	ldi	r22, 0x60	; 96
     b26:	77 eb       	ldi	r23, 0xB7	; 183
     b28:	87 e4       	ldi	r24, 0x47	; 71
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
     b30:	6c 81       	ldd	r22, Y+4	; 0x04
     b32:	7d 81       	ldd	r23, Y+5	; 0x05
     b34:	8e 81       	ldd	r24, Y+6	; 0x06
     b36:	9f 81       	ldd	r25, Y+7	; 0x07
     b38:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
     b3c:	aa 81       	ldd	r26, Y+2	; 0x02
     b3e:	bb 81       	ldd	r27, Y+3	; 0x03
     b40:	9d 01       	movw	r18, r26
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     wait_about5ms();		// clear TRIAC and Thyristor
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
     adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     b46:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
     b4a:	2c 83       	std	Y+4, r18	; 0x04
     b4c:	3d 83       	std	Y+5, r19	; 0x05
     b4e:	4e 83       	std	Y+6, r20	; 0x06
     b50:	5f 83       	std	Y+7, r21	; 0x07
     b52:	14 c0       	rjmp	.+40     	; 0xb7c <CheckPins+0x32e>
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
  ADC_DDR = LoADCm;			// Collector direct to GND
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     b54:	f9 01       	movw	r30, r18
     b56:	ee 19       	sub	r30, r14
     b58:	ff 09       	sbc	r31, r15
     b5a:	fd 87       	std	Y+13, r31	; 0x0d
     b5c:	ec 87       	std	Y+12, r30	; 0x0c
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
 #else
     c_hfe = ((adc.hp1 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp1/500);
 #endif
  } else {
     c_hfe = (unsigned long)((adc.hp1 - adc.tp1) / adc.tp1);
     b5e:	cf 01       	movw	r24, r30
     b60:	2a 81       	ldd	r18, Y+2	; 0x02
     b62:	3b 81       	ldd	r19, Y+3	; 0x03
     b64:	82 1b       	sub	r24, r18
     b66:	93 0b       	sbc	r25, r19
     b68:	b9 01       	movw	r22, r18
     b6a:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__udivmodhi4>
     b6e:	cb 01       	movw	r24, r22
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	8c 83       	std	Y+4, r24	; 0x04
     b76:	9d 83       	std	Y+5, r25	; 0x05
     b78:	ae 83       	std	Y+6, r26	; 0x06
     b7a:	bf 83       	std	Y+7, r27	; 0x07
  }
#endif

  //set Pins again for circuit with common Emitter PNP
  R_DDR = 0;			//all Resistor Ports to Input
     b7c:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			//switch all resistor ports to GND
     b7e:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
     b80:	d8 b8       	out	0x08, r13	; 8
  ADC_DDR = HiADCm;		//switch High-Pin to output
     b82:	d7 b8       	out	0x07, r13	; 7
//  R_DDR = LoPinRL;		//switch R_L port for Low-Pin to output (GND)
  wait_about5ms();
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
  
  if(adc.lp_otr < 1977) {
     b8c:	99 eb       	ldi	r25, 0xB9	; 185
     b8e:	69 16       	cp	r6, r25
     b90:	97 e0       	ldi	r25, 0x07	; 7
     b92:	79 06       	cpc	r7, r25
     b94:	08 f0       	brcs	.+2      	; 0xb98 <CheckPins+0x34a>
     b96:	b4 c2       	rjmp	.+1384   	; 0x1100 <CheckPins+0x8b2>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test to PNP
     R_DDR = LoPinRL | TriPinRL;	//switch R_L port for Tristate-Pin to output (GND), for Test of PNP
     b98:	a4 b8       	out	0x04, r10	; 4
     adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin
     b9a:	83 2d       	mov	r24, r3
     b9c:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
     if(adc.lp1 > 3422) {
     ba0:	ad e0       	ldi	r26, 0x0D	; 13
     ba2:	8f 35       	cpi	r24, 0x5F	; 95
     ba4:	9a 07       	cpc	r25, r26
     ba6:	08 f4       	brcc	.+2      	; 0xbaa <CheckPins+0x35c>
     ba8:	dd c0       	rjmp	.+442    	; 0xd64 <CheckPins+0x516>
        //component has current => PNP-Transistor or equivalent
        R_DDR = 0;
     baa:	14 b8       	out	0x04, r1	; 4
        wait_about5ms();		// clear TRIAC and Thyristor
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
        //compute current amplification factor in both directions
        R_DDR = LoPinRL | TriPinRH;	//switch R_H port for Tristate-Pin (Base) to output (GND)
     bb4:	05 2d       	mov	r16, r5
     bb6:	04 29       	or	r16, r4
     bb8:	04 b9       	out	0x04, r16	; 4

        adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin (assumed Collector)
     bba:	83 2d       	mov	r24, r3
     bbc:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
     bc0:	7c 01       	movw	r14, r24
        adc.tp2 = ReadADC(TristatePin);	//measure voltage at TristatePin (Base) 
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
     bc8:	99 87       	std	Y+9, r25	; 0x09
     bca:	88 87       	std	Y+8, r24	; 0x08
//           PartReady = 1;
//        }

 
/*        if(adc.tp2 > 977)  */
        if(adc.tp2 > 2000) {
     bcc:	b7 e0       	ldi	r27, 0x07	; 7
     bce:	81 3d       	cpi	r24, 0xD1	; 209
     bd0:	9b 07       	cpc	r25, r27
     bd2:	08 f4       	brcc	.+2      	; 0xbd6 <CheckPins+0x388>
     bd4:	77 c0       	rjmp	.+238    	; 0xcc4 <CheckPins+0x476>
           //PNP-Transistor is found (Base voltage moves with Emitter to VCC)
           PartFound = PART_TRANSISTOR;
     bd6:	82 e0       	ldi	r24, 0x02	; 2
     bd8:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_PNP;
     bdc:	80 93 06 01 	sts	0x0106, r24
           update_pins = 0;		// only update pins, if hFE is higher or Thyristor 
#ifdef COMMON_EMITTER
           //compute current amplification factor for circuit with common Emitter
           //e_hFE = B = Collector current / Base current
           tmp16 = adc.lp1;
           if (tmp16 > adc.lp_otr) {
     be0:	6e 14       	cp	r6, r14
     be2:	7f 04       	cpc	r7, r15
     be4:	10 f4       	brcc	.+4      	; 0xbea <CheckPins+0x39c>
              tmp16 -= adc.lp_otr;
     be6:	e6 18       	sub	r14, r6
     be8:	f7 08       	sbc	r15, r7
           }

 #ifdef LONG_HFE
           e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     bea:	67 01       	movw	r12, r14
     bec:	ee 24       	eor	r14, r14
     bee:	ff 24       	eor	r15, r15
     bf0:	20 91 03 01 	lds	r18, 0x0103
     bf4:	30 91 04 01 	lds	r19, 0x0104
     bf8:	40 e0       	ldi	r20, 0x00	; 0
     bfa:	50 e0       	ldi	r21, 0x00	; 0
     bfc:	60 e6       	ldi	r22, 0x60	; 96
     bfe:	77 eb       	ldi	r23, 0xB7	; 183
     c00:	87 e4       	ldi	r24, 0x47	; 71
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
     c08:	c7 01       	movw	r24, r14
     c0a:	b6 01       	movw	r22, r12
     c0c:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
     c10:	e8 85       	ldd	r30, Y+8	; 0x08
     c12:	f9 85       	ldd	r31, Y+9	; 0x09
     c14:	9f 01       	movw	r18, r30
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	50 e0       	ldi	r21, 0x00	; 0
           if (tmp16 > adc.lp_otr) {
              tmp16 -= adc.lp_otr;
           }

 #ifdef LONG_HFE
           e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     c1a:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
 #else
           e_hfe = ((tmp16 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
           // first hFE or e_hfe is greater than last hfe ?
           if ((ptrans.count == 0) || (e_hfe > ptrans.hfe)){
     c1e:	80 91 72 01 	lds	r24, 0x0172
     c22:	88 23       	and	r24, r24
     c24:	69 f0       	breq	.+26     	; 0xc40 <CheckPins+0x3f2>
     c26:	80 91 65 01 	lds	r24, 0x0165
     c2a:	90 91 66 01 	lds	r25, 0x0166
     c2e:	a0 91 67 01 	lds	r26, 0x0167
     c32:	b0 91 68 01 	lds	r27, 0x0168
     c36:	82 17       	cp	r24, r18
     c38:	93 07       	cpc	r25, r19
     c3a:	a4 07       	cpc	r26, r20
     c3c:	b5 07       	cpc	r27, r21
     c3e:	a8 f4       	brcc	.+42     	; 0xc6a <CheckPins+0x41c>
              ptrans.hfe = e_hfe;				// hFE with common emitter
     c40:	20 93 65 01 	sts	0x0165, r18
     c44:	30 93 66 01 	sts	0x0166, r19
     c48:	40 93 67 01 	sts	0x0167, r20
     c4c:	50 93 68 01 	sts	0x0168, r21
              ptrans.uBE = ReadADC(HighPin) - adc.tp2;	// Base Emitter Voltage
     c50:	81 2f       	mov	r24, r17
     c52:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
     c56:	28 85       	ldd	r18, Y+8	; 0x08
     c58:	39 85       	ldd	r19, Y+9	; 0x09
     c5a:	82 1b       	sub	r24, r18
     c5c:	93 0b       	sbc	r25, r19
     c5e:	90 93 6a 01 	sts	0x016A, r25
     c62:	80 93 69 01 	sts	0x0169, r24
              update_pins = 1;		// trans.ebc must be updated
     c66:	21 e0       	ldi	r18, 0x01	; 1
     c68:	01 c0       	rjmp	.+2      	; 0xc6c <CheckPins+0x41e>
/*        if(adc.tp2 > 977)  */
        if(adc.tp2 > 2000) {
           //PNP-Transistor is found (Base voltage moves with Emitter to VCC)
           PartFound = PART_TRANSISTOR;
           PartMode = PART_MODE_PNP;
           update_pins = 0;		// only update pins, if hFE is higher or Thyristor 
     c6a:	20 e0       	ldi	r18, 0x00	; 0
#ifdef COMMON_COLLECTOR
           //current amplification factor for common  Collector (Emitter follower)
           // c_hFE = (Emitter current - Base current) / Base current
 #ifdef COMMON_EMITTER
           // also with COMMON_EMITTER, is c_hfe greater than the last hFE?
           if (c_hfe > ptrans.hfe)  // trans.hfe is allready e_hfe or last c_hFE
     c6c:	80 91 65 01 	lds	r24, 0x0165
     c70:	90 91 66 01 	lds	r25, 0x0166
     c74:	a0 91 67 01 	lds	r26, 0x0167
     c78:	b0 91 68 01 	lds	r27, 0x0168
     c7c:	4c 81       	ldd	r20, Y+4	; 0x04
     c7e:	5d 81       	ldd	r21, Y+5	; 0x05
     c80:	6e 81       	ldd	r22, Y+6	; 0x06
     c82:	7f 81       	ldd	r23, Y+7	; 0x07
     c84:	84 17       	cp	r24, r20
     c86:	95 07       	cpc	r25, r21
     c88:	a6 07       	cpc	r26, r22
     c8a:	b7 07       	cpc	r27, r23
     c8c:	08 f0       	brcs	.+2      	; 0xc90 <CheckPins+0x442>
     c8e:	0e c5       	rjmp	.+2588   	; 0x16ac <CheckPins+0xe5e>
 #else
           // without COMMON_EMITTER , c_hFE is first or greater than the old one?
           if ((ptrans.count == 0) || (c_hfe > ptrans.hfe)) 
 #endif
           {
              ptrans.hfe = c_hfe;		// c_hfe is the best
     c90:	40 93 65 01 	sts	0x0165, r20
     c94:	50 93 66 01 	sts	0x0166, r21
     c98:	60 93 67 01 	sts	0x0167, r22
     c9c:	70 93 68 01 	sts	0x0168, r23
              ptrans.uBE = ADCconfig.U_AVCC - adc.hp1 - adc.tp1;	// Base Emitter Voltage common collector
     ca0:	80 91 40 01 	lds	r24, 0x0140
     ca4:	90 91 41 01 	lds	r25, 0x0141
     ca8:	6c 85       	ldd	r22, Y+12	; 0x0c
     caa:	7d 85       	ldd	r23, Y+13	; 0x0d
     cac:	86 1b       	sub	r24, r22
     cae:	97 0b       	sbc	r25, r23
     cb0:	aa 81       	ldd	r26, Y+2	; 0x02
     cb2:	bb 81       	ldd	r27, Y+3	; 0x03
     cb4:	8a 1b       	sub	r24, r26
     cb6:	9b 0b       	sbc	r25, r27
     cb8:	90 93 6a 01 	sts	0x016A, r25
     cbc:	80 93 69 01 	sts	0x0169, r24
              update_pins = 1;		// trans.ebc must be updated
     cc0:	21 e0       	ldi	r18, 0x01	; 1
     cc2:	f4 c4       	rjmp	.+2536   	; 0x16ac <CheckPins+0xe5e>
           }
#endif
           goto savePresult;		// marke P type, save Pins and exit
        }
        // is probably a P-E-MOS, check voltage
        if((adc.lp_otr < 97) && (adc.lp1 > 2000)) {
     cc4:	b1 e6       	ldi	r27, 0x61	; 97
     cc6:	6b 16       	cp	r6, r27
     cc8:	71 04       	cpc	r7, r1
     cca:	08 f0       	brcs	.+2      	; 0xcce <CheckPins+0x480>
     ccc:	4b c0       	rjmp	.+150    	; 0xd64 <CheckPins+0x516>
     cce:	e1 ed       	ldi	r30, 0xD1	; 209
     cd0:	ee 16       	cp	r14, r30
     cd2:	e7 e0       	ldi	r30, 0x07	; 7
     cd4:	fe 06       	cpc	r15, r30
     cd6:	08 f4       	brcc	.+2      	; 0xcda <CheckPins+0x48c>
     cd8:	45 c0       	rjmp	.+138    	; 0xd64 <CheckPins+0x516>
           //is flow voltage low enough in the closed  state?
           //(since D-Mode-FET would be by mistake detected as E-Mode )
           PartFound = PART_FET;		//P-Kanal-MOSFET is found (Basis/Gate moves not to VCC)
     cda:	83 e0       	ldi	r24, 0x03	; 3
     cdc:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_E_MOS;
     ce0:	80 93 06 01 	sts	0x0106, r24
       	   //measure the Gate threshold voltage
           //Switching of Drain is monitored with digital input
           // Low level is specified up to 0.3 * VCC
           // High level is specified above 0.6 * VCC
           PinMSK = LoADCm & 7;
     ce4:	f7 e0       	ldi	r31, 0x07	; 7
     ce6:	9f 22       	and	r9, r31
       	   ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	80 64       	ori	r24, 0x40	; 64
     cec:	80 93 7c 00 	sts	0x007C, r24
     cf0:	fb e0       	ldi	r31, 0x0B	; 11
     cf2:	df 2e       	mov	r13, r31
       	   tmp16 = 1;			// round up ((1*4)/9)
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
       	      while (!(ADC_PIN&PinMSK));		// Wait, until the MOSFET switches and Drain moves to VCC
                  			// 1 is detected with more than 2.5V (up to 2.57V) with tests of mega168 and mega328
       	      R_DDR = LoPinRL;
       	      ADCSRA |= (1<<ADSC);		// Start Conversion
       	      while (ADCSRA&(1<<ADSC));		// wait
      	      tmp16 += (1023 - ADCW);	// Add Tristatepin-Voltage
     cf8:	ef ef       	ldi	r30, 0xFF	; 255
     cfa:	ee 2e       	mov	r14, r30
     cfc:	e3 e0       	ldi	r30, 0x03	; 3
     cfe:	fe 2e       	mov	r15, r30
     d00:	5c 01       	movw	r10, r24
           // High level is specified above 0.6 * VCC
           PinMSK = LoADCm & 7;
       	   ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
       	   tmp16 = 1;			// round up ((1*4)/9)
       	   for(ii=0;ii<11;ii++) {
       	      wdt_reset();
     d02:	a8 95       	wdr
       	      ChargePin10ms(TriPinRL,1);
     d04:	88 2d       	mov	r24, r8
     d06:	61 e0       	ldi	r22, 0x01	; 1
     d08:	0e 94 0c 04 	call	0x818	; 0x818 <ChargePin10ms>
                R_DDR = LoPinRL | TriPinRH;		//switch R_H for Tristate-Pin (Basis) to GND
     d0c:	04 b9       	out	0x04, r16	; 4
       	      while (!(ADC_PIN&PinMSK));		// Wait, until the MOSFET switches and Drain moves to VCC
     d0e:	86 b1       	in	r24, 0x06	; 6
     d10:	89 21       	and	r24, r9
     d12:	e9 f3       	breq	.-6      	; 0xd0e <CheckPins+0x4c0>
                  			// 1 is detected with more than 2.5V (up to 2.57V) with tests of mega168 and mega328
       	      R_DDR = LoPinRL;
     d14:	44 b8       	out	0x04, r4	; 4
       	      ADCSRA |= (1<<ADSC);		// Start Conversion
     d16:	80 91 7a 00 	lds	r24, 0x007A
     d1a:	80 64       	ori	r24, 0x40	; 64
     d1c:	80 93 7a 00 	sts	0x007A, r24
       	      while (ADCSRA&(1<<ADSC));		// wait
     d20:	80 91 7a 00 	lds	r24, 0x007A
     d24:	86 fd       	sbrc	r24, 6
     d26:	fc cf       	rjmp	.-8      	; 0xd20 <CheckPins+0x4d2>
      	      tmp16 += (1023 - ADCW);	// Add Tristatepin-Voltage
     d28:	20 91 78 00 	lds	r18, 0x0078
     d2c:	30 91 79 00 	lds	r19, 0x0079
     d30:	a7 01       	movw	r20, r14
     d32:	42 1b       	sub	r20, r18
     d34:	53 0b       	sbc	r21, r19
     d36:	a4 0e       	add	r10, r20
     d38:	b5 1e       	adc	r11, r21
     d3a:	da 94       	dec	r13
           // Low level is specified up to 0.3 * VCC
           // High level is specified above 0.6 * VCC
           PinMSK = LoADCm & 7;
       	   ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
       	   tmp16 = 1;			// round up ((1*4)/9)
       	   for(ii=0;ii<11;ii++) {
     d3c:	11 f7       	brne	.-60     	; 0xd02 <CheckPins+0x4b4>
     d3e:	c5 01       	movw	r24, r10
       	      R_DDR = LoPinRL;
       	      ADCSRA |= (1<<ADSC);		// Start Conversion
       	      while (ADCSRA&(1<<ADSC));		// wait
      	      tmp16 += (1023 - ADCW);	// Add Tristatepin-Voltage
           }
           tmp16 *= 4;		// is equal to 44*ADCW
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
           ptrans.gthvoltage = tmp16 / 9;		// gives resolution in mV
     d48:	69 e0       	ldi	r22, 0x09	; 9
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__udivmodhi4>
     d50:	70 93 6e 01 	sts	0x016E, r23
     d54:	60 93 6d 01 	sts	0x016D, r22
           ptrans.count++;		// count FET as two for accelerate searching
     d58:	80 91 72 01 	lds	r24, 0x0172
     d5c:	8f 5f       	subi	r24, 0xFF	; 255
     d5e:	80 93 72 01 	sts	0x0172, r24
     d62:	ae cf       	rjmp	.-164    	; 0xcc0 <CheckPins+0x472>
        }
    } // end component has current => PNP

#ifdef COMMON_COLLECTOR
    // Low-Pin=RL- HighPin=VCC
    R_DDR = LoPinRL | TriPinRL;
     d64:	a4 b8       	out	0x04, r10	; 4
    R_PORT = TriPinRL;			// TriPin=RL+  NPN with common Collector
     d66:	85 b8       	out	0x05, r8	; 5
    adc.lp1 = W5msReadADC(LowPin);	// voltage at Emitter resistor
     d68:	83 2d       	mov	r24, r3
     d6a:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
     d6e:	9b 83       	std	Y+3, r25	; 0x03
     d70:	8a 83       	std	Y+2, r24	; 0x02
    adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     d72:	a0 90 40 01 	lds	r10, 0x0140
     d76:	b0 90 41 01 	lds	r11, 0x0141
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
     d80:	a8 1a       	sub	r10, r24
     d82:	b9 0a       	sbc	r11, r25
    if (adc.tp1 < 10) { 
     d84:	5a e0       	ldi	r21, 0x0A	; 10
     d86:	a5 16       	cp	r10, r21
     d88:	b1 04       	cpc	r11, r1
     d8a:	c0 f5       	brcc	.+112    	; 0xdfc <CheckPins+0x5ae>
       R_DDR = 0;
     d8c:	14 b8       	out	0x04, r1	; 4
       wait_about5ms();		// clear TRIAC and Thyristor
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
       R_DDR = LoPinRL | TriPinRH;
     d96:	85 2d       	mov	r24, r5
     d98:	84 29       	or	r24, r4
     d9a:	84 b9       	out	0x04, r24	; 4
       R_PORT = TriPinRH;		// Tripin=RH+
     d9c:	55 b8       	out	0x05, r5	; 5
       adc.lp1 = W5msReadADC(LowPin);
     d9e:	83 2d       	mov	r24, r3
     da0:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
     da4:	9b 83       	std	Y+3, r25	; 0x03
     da6:	8a 83       	std	Y+2, r24	; 0x02
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     da8:	a0 90 40 01 	lds	r10, 0x0140
     dac:	b0 90 41 01 	lds	r11, 0x0141
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
     db6:	a8 1a       	sub	r10, r24
     db8:	b9 0a       	sbc	r11, r25
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	9b 81       	ldd	r25, Y+3	; 0x03
     dbe:	bc 01       	movw	r22, r24
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	6c 83       	std	Y+4, r22	; 0x04
     dc6:	7d 83       	std	Y+5, r23	; 0x05
     dc8:	8e 83       	std	Y+6, r24	; 0x06
     dca:	9f 83       	std	Y+7, r25	; 0x07
     dcc:	20 91 03 01 	lds	r18, 0x0103
     dd0:	30 91 04 01 	lds	r19, 0x0104
     dd4:	40 e0       	ldi	r20, 0x00	; 0
     dd6:	50 e0       	ldi	r21, 0x00	; 0
     dd8:	60 e6       	ldi	r22, 0x60	; 96
     dda:	77 eb       	ldi	r23, 0xB7	; 183
     ddc:	87 e4       	ldi	r24, 0x47	; 71
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
     de4:	6c 81       	ldd	r22, Y+4	; 0x04
     de6:	7d 81       	ldd	r23, Y+5	; 0x05
     de8:	8e 81       	ldd	r24, Y+6	; 0x06
     dea:	9f 81       	ldd	r25, Y+7	; 0x07
     dec:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
     df0:	95 01       	movw	r18, r10
     df2:	40 e0       	ldi	r20, 0x00	; 0
     df4:	50 e0       	ldi	r21, 0x00	; 0
       R_DDR = LoPinRL | TriPinRH;
       R_PORT = TriPinRH;		// Tripin=RH+
       adc.lp1 = W5msReadADC(LowPin);
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     df6:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
     dfa:	0a c0       	rjmp	.+20     	; 0xe10 <CheckPins+0x5c2>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
 #else
       c_hfe = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
    } else {
       c_hfe = (adc.lp1 - adc.tp1) / adc.tp1;
     dfc:	8a 81       	ldd	r24, Y+2	; 0x02
     dfe:	9b 81       	ldd	r25, Y+3	; 0x03
     e00:	8a 19       	sub	r24, r10
     e02:	9b 09       	sbc	r25, r11
     e04:	b5 01       	movw	r22, r10
     e06:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__udivmodhi4>
     e0a:	9b 01       	movw	r18, r22
     e0c:	40 e0       	ldi	r20, 0x00	; 0
     e0e:	50 e0       	ldi	r21, 0x00	; 0
     e10:	2c 83       	std	Y+4, r18	; 0x04
     e12:	3d 83       	std	Y+5, r19	; 0x05
     e14:	4e 83       	std	Y+6, r20	; 0x06
     e16:	5f 83       	std	Y+7, r21	; 0x07
    }
#endif
    //Tristate (can be Base) to VCC, Test if NPN
    ADC_DDR = LoADCm;		//Low-Pin to output 0V
     e18:	97 b8       	out	0x07, r9	; 7
    ADC_PORT = TXD_VAL;			//switch Low-Pin to GND
     e1a:	88 e0       	ldi	r24, 0x08	; 8
     e1c:	88 b9       	out	0x08, r24	; 8
    R_DDR = TriPinRL | HiPinRL;		//RL port for High-Pin and Tristate-Pin to output
     e1e:	24 b8       	out	0x04, r2	; 4
#if FLASHEND > 0x3fff
    R_PORT =  HiPinRL;	//RL port for High-Pin and Tristate-Pin to GND
    adc.vCEs = ADCconfig.U_AVCC - W5msReadADC(HighPin); // measure voltage a High-Pin, Base low
#endif
    R_PORT = TriPinRL | HiPinRL;	//RL port for High-Pin and Tristate-Pin to Vcc
     e20:	25 b8       	out	0x05, r2	; 5
    adc.hp1 = W5msReadADC(HighPin);	//measure voltage at High-Pin  (Collector)
     e22:	81 2f       	mov	r24, r17
     e24:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
     e28:	9d 87       	std	Y+13, r25	; 0x0d
     e2a:	8c 87       	std	Y+12, r24	; 0x0c
#ifdef WITH_THYRISTOR_GATE_V
    adc.tp2 = ReadADC(TristatePin);	//voltage of gate
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
     e32:	99 87       	std	Y+9, r25	; 0x09
     e34:	88 87       	std	Y+8, r24	; 0x08
    adc.lp2 = ReadADC(LowPin);		//voltage of Cathode
     e36:	83 2d       	mov	r24, r3
     e38:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
     e3c:	7c 01       	movw	r14, r24
#endif
    if(adc.hp1 < 1600) {
     e3e:	4c 85       	ldd	r20, Y+12	; 0x0c
     e40:	5d 85       	ldd	r21, Y+13	; 0x0d
     e42:	66 e0       	ldi	r22, 0x06	; 6
     e44:	40 34       	cpi	r20, 0x40	; 64
     e46:	56 07       	cpc	r21, r22
     e48:	08 f0       	brcs	.+2      	; 0xe4c <CheckPins+0x5fe>
     e4a:	57 c1       	rjmp	.+686    	; 0x10fa <CheckPins+0x8ac>
       //component has current => NPN-Transistor or somthing else

       //Test auf Thyristor:
       //Gate discharge
       ChargePin10ms(TriPinRL,0);	//Tristate-Pin (Gate) across R_L 10ms to GND
     e4c:	88 2d       	mov	r24, r8
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	0e 94 0c 04 	call	0x818	; 0x818 <ChargePin10ms>
       adc.hp3 = W5msReadADC(HighPin);	//read voltage at High-Pin (probably Anode) again
     e54:	81 2f       	mov	r24, r17
     e56:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
     e5a:	9c 01       	movw	r18, r24
					//current should still flow, if not,
					// no Thyristor or holding current to low 
		 	
       R_PORT = 0;			//switch R_L for High-Pin (probably Anode) to GND (turn off)
     e5c:	15 b8       	out	0x05, r1	; 5
       wait_about5ms();
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	2b 87       	std	Y+11, r18	; 0x0b
     e64:	3a 87       	std	Y+10, r19	; 0x0a
     e66:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
       R_PORT = HiPinRL;		//switch R_L for High-Pin (probably Anode) again to VCC
     e6a:	c5 b8       	out	0x05, r12	; 5
       adc.hp2 = W5msReadADC(HighPin);	//measure voltage at the High-Pin (probably Anode) again
     e6c:	81 2f       	mov	r24, r17
     e6e:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
       if((adc.hp3 < 1600) && (adc.hp2 > 4400)) {
     e72:	2b 85       	ldd	r18, Y+11	; 0x0b
     e74:	3a 85       	ldd	r19, Y+10	; 0x0a
     e76:	76 e0       	ldi	r23, 0x06	; 6
     e78:	20 34       	cpi	r18, 0x40	; 64
     e7a:	37 07       	cpc	r19, r23
     e7c:	08 f0       	brcs	.+2      	; 0xe80 <CheckPins+0x632>
     e7e:	52 c0       	rjmp	.+164    	; 0xf24 <CheckPins+0x6d6>
     e80:	a1 e1       	ldi	r26, 0x11	; 17
     e82:	81 33       	cpi	r24, 0x31	; 49
     e84:	9a 07       	cpc	r25, r26
     e86:	08 f4       	brcc	.+2      	; 0xe8a <CheckPins+0x63c>
     e88:	4d c0       	rjmp	.+154    	; 0xf24 <CheckPins+0x6d6>
          //if the holding current was switched off the thyristor must be switched off too. 
          //if Thyristor was still swiched on, if gate was switched off => Thyristor
          PartFound = PART_THYRISTOR;
     e8a:	85 e0       	ldi	r24, 0x05	; 5
     e8c:	80 93 07 01 	sts	0x0107, r24
#ifdef WITH_THYRISTOR_GATE_V
          ntrans.uBE = adc.tp2 - adc.lp2;	// Gate - Cathode Voltage 
     e90:	88 85       	ldd	r24, Y+8	; 0x08
     e92:	99 85       	ldd	r25, Y+9	; 0x09
     e94:	8e 19       	sub	r24, r14
     e96:	9f 09       	sbc	r25, r15
     e98:	90 93 52 01 	sts	0x0152, r25
     e9c:	80 93 51 01 	sts	0x0151, r24
          ntrans.gthvoltage = adc.hp1 - adc.lp2;	// Anode-Cathode Voltage
     ea0:	8c 85       	ldd	r24, Y+12	; 0x0c
     ea2:	9d 85       	ldd	r25, Y+13	; 0x0d
     ea4:	8e 19       	sub	r24, r14
     ea6:	9f 09       	sbc	r25, r15
     ea8:	90 93 56 01 	sts	0x0156, r25
     eac:	80 93 55 01 	sts	0x0155, r24
#endif
          //Test if Triac
          R_DDR = 0;
     eb0:	14 b8       	out	0x04, r1	; 4
          R_PORT = 0;
     eb2:	15 b8       	out	0x05, r1	; 5
          ADC_PORT = LoADCp;	//Low-Pin fix to VCC
     eb4:	98 b8       	out	0x08, r9	; 8
          wait_about5ms();
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
          R_DDR = HiPinRL;		//switch R_L port HighPin to output (GND)
     ebe:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) > 244) {
     ec0:	81 2f       	mov	r24, r17
     ec2:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
     ec6:	85 3f       	cpi	r24, 0xF5	; 245
     ec8:	91 05       	cpc	r25, r1
     eca:	08 f0       	brcs	.+2      	; 0xece <CheckPins+0x680>
     ecc:	fe c3       	rjmp	.+2044   	; 0x16ca <CheckPins+0xe7c>
             goto saveNresult;		//measure voltage at the  High-Pin (probably A2); if too high:
                                	//component has current => kein Triac
          }
          R_DDR = HiPinRL | TriPinRL;	//switch R_L port for TristatePin (Gate) to output (GND) => Triac should be triggered 
     ece:	24 b8       	out	0x04, r2	; 4
          if(W5msReadADC(TristatePin) < 977) {
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
     ed6:	b3 e0       	ldi	r27, 0x03	; 3
     ed8:	81 3d       	cpi	r24, 0xD1	; 209
     eda:	9b 07       	cpc	r25, r27
     edc:	08 f4       	brcc	.+2      	; 0xee0 <CheckPins+0x692>
     ede:	f5 c3       	rjmp	.+2026   	; 0x16ca <CheckPins+0xe7c>
             goto saveNresult; 		//measure voltage at the Tristate-Pin (probably Gate) ;
                              		// if to low, abort 
          }
          if(ReadADC(HighPin) < 733) {
     ee0:	81 2f       	mov	r24, r17
     ee2:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
     ee6:	e2 e0       	ldi	r30, 0x02	; 2
     ee8:	8d 3d       	cpi	r24, 0xDD	; 221
     eea:	9e 07       	cpc	r25, r30
     eec:	08 f4       	brcc	.+2      	; 0xef0 <CheckPins+0x6a2>
     eee:	ed c3       	rjmp	.+2010   	; 0x16ca <CheckPins+0xe7c>
             goto saveNresult; 		//component has no current => no Triac => abort
          }
          R_DDR = HiPinRL;		//TristatePin (Gate) to input 
     ef0:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) < 733) {
     ef2:	81 2f       	mov	r24, r17
     ef4:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
     ef8:	f2 e0       	ldi	r31, 0x02	; 2
     efa:	8d 3d       	cpi	r24, 0xDD	; 221
     efc:	9f 07       	cpc	r25, r31
     efe:	08 f4       	brcc	.+2      	; 0xf02 <CheckPins+0x6b4>
     f00:	e4 c3       	rjmp	.+1992   	; 0x16ca <CheckPins+0xe7c>
             goto saveNresult; 		//component has no current without base current => no Triac => abort
          }
          R_PORT = HiPinRL;		//switch R_L port for HighPin to VCC => switch off holding current 
     f02:	c5 b8       	out	0x05, r12	; 5
          wait_about5ms();
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
          R_PORT = 0;			//switch R_L port for HighPin again to GND; Triac should now switched off
     f0c:	15 b8       	out	0x05, r1	; 5
          if(W5msReadADC(HighPin) > 244) {
     f0e:	81 2f       	mov	r24, r17
     f10:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
     f14:	85 3f       	cpi	r24, 0xF5	; 245
     f16:	91 05       	cpc	r25, r1
     f18:	08 f0       	brcs	.+2      	; 0xf1c <CheckPins+0x6ce>
     f1a:	d7 c3       	rjmp	.+1966   	; 0x16ca <CheckPins+0xe7c>
             goto saveNresult;		//measure voltage at the High-Pin (probably A2) ;
                                	//if to high, component is not switched off => no Triac, abort
         }
         PartFound = PART_TRIAC;
     f1c:	84 e0       	ldi	r24, 0x04	; 4
     f1e:	80 93 07 01 	sts	0x0107, r24
     f22:	e5 c0       	rjmp	.+458    	; 0x10ee <CheckPins+0x8a0>
         ntrans.count++;		// mark as two N-type transistors
         goto saveNresult;
        }
      //Test if NPN Transistor or MOSFET
      // ADC_DDR = LoADCm;	//Low-Pin to output 0V
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
     f24:	05 2d       	mov	r16, r5
     f26:	0c 29       	or	r16, r12
     f28:	04 b9       	out	0x04, r16	; 4
      R_PORT = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to VCC
     f2a:	05 b9       	out	0x05, r16	; 5
      adc.hp2 = ADCconfig.U_AVCC - W20msReadADC(HighPin);	//measure the voltage at the collector resistor 
     f2c:	40 91 40 01 	lds	r20, 0x0140
     f30:	50 91 41 01 	lds	r21, 0x0141
     f34:	81 2f       	mov	r24, r17
     f36:	4a 87       	std	Y+10, r20	; 0x0a
     f38:	5b 87       	std	Y+11, r21	; 0x0b
     f3a:	0e 94 b5 1a 	call	0x356a	; 0x356a <W20msReadADC>
     f3e:	4a 85       	ldd	r20, Y+10	; 0x0a
     f40:	5b 85       	ldd	r21, Y+11	; 0x0b
     f42:	48 1b       	sub	r20, r24
     f44:	59 0b       	sbc	r21, r25
      adc.tp2 = ADCconfig.U_AVCC - ReadADC(TristatePin);	//measure the voltage at the base resistor 
     f46:	e0 90 40 01 	lds	r14, 0x0140
     f4a:	f0 90 41 01 	lds	r15, 0x0141
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	4a 87       	std	Y+10, r20	; 0x0a
     f52:	5b 87       	std	Y+11, r21	; 0x0b
     f54:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
     f58:	97 01       	movw	r18, r14
     f5a:	28 1b       	sub	r18, r24
     f5c:	39 0b       	sbc	r19, r25
     f5e:	39 87       	std	Y+9, r19	; 0x09
     f60:	28 87       	std	Y+8, r18	; 0x08

//      if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
//         PartReady = 1;	//check, if test is already done once
//      }

      if(adc.tp2 > 2557) {		// Basis-voltage R_H is low enough
     f62:	4a 85       	ldd	r20, Y+10	; 0x0a
     f64:	5b 85       	ldd	r21, Y+11	; 0x0b
     f66:	69 e0       	ldi	r22, 0x09	; 9
     f68:	2e 3f       	cpi	r18, 0xFE	; 254
     f6a:	36 07       	cpc	r19, r22
     f6c:	08 f4       	brcc	.+2      	; 0xf70 <CheckPins+0x722>
     f6e:	7b c0       	rjmp	.+246    	; 0x1066 <CheckPins+0x818>
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
     f70:	82 e0       	ldi	r24, 0x02	; 2
     f72:	80 93 07 01 	sts	0x0107, r24
         PartMode = PART_MODE_NPN;
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	80 93 06 01 	sts	0x0106, r24
 #ifdef COMMON_EMITTER

         //compute current amplification factor for common Emitter
         //hFE = B = Collector current / Base current
         tmp16 = adc.hp2;
         if (tmp16 > adc.lp_otr) {
     f7c:	64 16       	cp	r6, r20
     f7e:	75 06       	cpc	r7, r21
     f80:	10 f4       	brcc	.+4      	; 0xf86 <CheckPins+0x738>
            tmp16 -= adc.lp_otr;
     f82:	46 19       	sub	r20, r6
     f84:	57 09       	sbc	r21, r7
         }

  #ifdef LONG_HFE
         e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     f86:	6a 01       	movw	r12, r20
     f88:	ee 24       	eor	r14, r14
     f8a:	ff 24       	eor	r15, r15
     f8c:	20 91 08 01 	lds	r18, 0x0108
     f90:	30 91 09 01 	lds	r19, 0x0109
     f94:	40 e0       	ldi	r20, 0x00	; 0
     f96:	50 e0       	ldi	r21, 0x00	; 0
     f98:	60 e6       	ldi	r22, 0x60	; 96
     f9a:	77 eb       	ldi	r23, 0xB7	; 183
     f9c:	87 e4       	ldi	r24, 0x47	; 71
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
     fa4:	c7 01       	movw	r24, r14
     fa6:	b6 01       	movw	r22, r12
     fa8:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp2;	
     fac:	a8 85       	ldd	r26, Y+8	; 0x08
     fae:	b9 85       	ldd	r27, Y+9	; 0x09
     fb0:	9d 01       	movw	r18, r26
     fb2:	40 e0       	ldi	r20, 0x00	; 0
     fb4:	50 e0       	ldi	r21, 0x00	; 0
         if (tmp16 > adc.lp_otr) {
            tmp16 -= adc.lp_otr;
         }

  #ifdef LONG_HFE
         e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     fb6:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp2;	
  #else
         e_hfe = ((tmp16 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
  #endif
         if ((ntrans.count == 0) || (e_hfe > ntrans.hfe)){
     fba:	80 91 5a 01 	lds	r24, 0x015A
     fbe:	88 23       	and	r24, r24
     fc0:	69 f0       	breq	.+26     	; 0xfdc <CheckPins+0x78e>
     fc2:	80 91 4d 01 	lds	r24, 0x014D
     fc6:	90 91 4e 01 	lds	r25, 0x014E
     fca:	a0 91 4f 01 	lds	r26, 0x014F
     fce:	b0 91 50 01 	lds	r27, 0x0150
     fd2:	82 17       	cp	r24, r18
     fd4:	93 07       	cpc	r25, r19
     fd6:	a4 07       	cpc	r26, r20
     fd8:	b5 07       	cpc	r27, r21
     fda:	d8 f4       	brcc	.+54     	; 0x1012 <CheckPins+0x7c4>
            ntrans.hfe = e_hfe;
     fdc:	20 93 4d 01 	sts	0x014D, r18
     fe0:	30 93 4e 01 	sts	0x014E, r19
     fe4:	40 93 4f 01 	sts	0x014F, r20
     fe8:	50 93 50 01 	sts	0x0150, r21
            ntrans.uBE = ADCconfig.U_AVCC - adc.tp2 - ReadADC(LowPin);
     fec:	e0 90 40 01 	lds	r14, 0x0140
     ff0:	f0 90 41 01 	lds	r15, 0x0141
     ff4:	e8 85       	ldd	r30, Y+8	; 0x08
     ff6:	f9 85       	ldd	r31, Y+9	; 0x09
     ff8:	ee 1a       	sub	r14, r30
     ffa:	ff 0a       	sbc	r15, r31
     ffc:	83 2d       	mov	r24, r3
     ffe:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
    1002:	e8 1a       	sub	r14, r24
    1004:	f9 0a       	sbc	r15, r25
    1006:	f0 92 52 01 	sts	0x0152, r15
    100a:	e0 92 51 01 	sts	0x0151, r14
            update_pins = 1;
    100e:	21 e0       	ldi	r18, 0x01	; 1
    1010:	01 c0       	rjmp	.+2      	; 0x1014 <CheckPins+0x7c6>
//      }

      if(adc.tp2 > 2557) {		// Basis-voltage R_H is low enough
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
         PartMode = PART_MODE_NPN;
         update_pins = 0;		// only update pins, if better hFE
    1012:	20 e0       	ldi	r18, 0x00	; 0
 #endif
#ifdef COMMON_COLLECTOR
          //compare current amplification factor for common Collector (Emitter follower)
          // hFE = (Emitterstrom - Basisstrom) / Basisstrom
 #ifdef COMMON_EMITTER
          if (c_hfe >  ntrans.hfe)
    1014:	80 91 4d 01 	lds	r24, 0x014D
    1018:	90 91 4e 01 	lds	r25, 0x014E
    101c:	a0 91 4f 01 	lds	r26, 0x014F
    1020:	b0 91 50 01 	lds	r27, 0x0150
    1024:	4c 81       	ldd	r20, Y+4	; 0x04
    1026:	5d 81       	ldd	r21, Y+5	; 0x05
    1028:	6e 81       	ldd	r22, Y+6	; 0x06
    102a:	7f 81       	ldd	r23, Y+7	; 0x07
    102c:	84 17       	cp	r24, r20
    102e:	95 07       	cpc	r25, r21
    1030:	a6 07       	cpc	r26, r22
    1032:	b7 07       	cpc	r27, r23
    1034:	08 f0       	brcs	.+2      	; 0x1038 <CheckPins+0x7ea>
    1036:	4a c3       	rjmp	.+1684   	; 0x16cc <CheckPins+0xe7e>
 #else
          if ((ntrans.count == 0) || (c_hfe >  ntrans.hfe))
 #endif
          {
            ntrans.hfe = c_hfe;
    1038:	40 93 4d 01 	sts	0x014D, r20
    103c:	50 93 4e 01 	sts	0x014E, r21
    1040:	60 93 4f 01 	sts	0x014F, r22
    1044:	70 93 50 01 	sts	0x0150, r23
            ntrans.uBE = ADCconfig.U_AVCC - adc.lp1 - adc.tp1;
    1048:	80 91 40 01 	lds	r24, 0x0140
    104c:	90 91 41 01 	lds	r25, 0x0141
    1050:	6a 81       	ldd	r22, Y+2	; 0x02
    1052:	7b 81       	ldd	r23, Y+3	; 0x03
    1054:	86 1b       	sub	r24, r22
    1056:	97 0b       	sbc	r25, r23
    1058:	8a 19       	sub	r24, r10
    105a:	9b 09       	sbc	r25, r11
    105c:	90 93 52 01 	sts	0x0152, r25
    1060:	80 93 51 01 	sts	0x0151, r24
    1064:	32 c3       	rjmp	.+1636   	; 0x16ca <CheckPins+0xe7c>
         }
#endif
         goto saveNresult;		// count the found N-Type and exit
      } 
      // Base has low current
      if((adc.lp_otr < 97) && (adc.hp2 > 3400)) {
    1066:	71 e6       	ldi	r23, 0x61	; 97
    1068:	67 16       	cp	r6, r23
    106a:	71 04       	cpc	r7, r1
    106c:	08 f0       	brcs	.+2      	; 0x1070 <CheckPins+0x822>
    106e:	45 c0       	rjmp	.+138    	; 0x10fa <CheckPins+0x8ac>
    1070:	8d e0       	ldi	r24, 0x0D	; 13
    1072:	49 34       	cpi	r20, 0x49	; 73
    1074:	58 07       	cpc	r21, r24
    1076:	08 f4       	brcc	.+2      	; 0x107a <CheckPins+0x82c>
    1078:	40 c0       	rjmp	.+128    	; 0x10fa <CheckPins+0x8ac>
         //if flow voltage in switched off mode low enough?
         //(since D-Mode-FET will be detected in error as E-Mode )
         PartFound = PART_FET;	//N-Kanal-MOSFET is found (Basis/Gate will Not be pulled down)
    107a:	83 e0       	ldi	r24, 0x03	; 3
    107c:	80 93 07 01 	sts	0x0107, r24
         PartMode = PART_MODE_N_E_MOS;
    1080:	82 e0       	ldi	r24, 0x02	; 2
    1082:	80 93 06 01 	sts	0x0106, r24
         lcd_data('F');
#endif
         //Switching of Drain is monitored with digital input
         // Low level is specified up to 0.3 * VCC
         // High level is specified above 0.6 * VCC
         PinMSK = HiADCm & 7;
    1086:	97 e0       	ldi	r25, 0x07	; 7
    1088:	d9 22       	and	r13, r25
         // measure Threshold voltage of Gate
         ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	80 64       	ori	r24, 0x40	; 64
    108e:	80 93 7c 00 	sts	0x007C, r24
    1092:	6b e0       	ldi	r22, 0x0B	; 11
    1094:	e6 2e       	mov	r14, r22
         tmp16 = 1;			// round up ((1*4)/9)
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	5c 01       	movw	r10, r24
         for(ii=0;ii<11;ii++) {
            wdt_reset();
    109c:	a8 95       	wdr
            ChargePin10ms(TriPinRL,0);	// discharge Gate 10ms with RL 
    109e:	88 2d       	mov	r24, r8
    10a0:	60 e0       	ldi	r22, 0x00	; 0
    10a2:	0e 94 0c 04 	call	0x818	; 0x818 <ChargePin10ms>
            R_DDR = HiPinRL | TriPinRH;	// slowly charge Gate 
    10a6:	04 b9       	out	0x04, r16	; 4
            R_PORT = HiPinRL | TriPinRH;
    10a8:	05 b9       	out	0x05, r16	; 5
            while ((ADC_PIN&PinMSK));	// Wait, until the MOSFET switch and Drain moved to low 
    10aa:	86 b1       	in	r24, 0x06	; 6
    10ac:	8d 21       	and	r24, r13
    10ae:	e9 f7       	brne	.-6      	; 0x10aa <CheckPins+0x85c>
             		// 0 is detected with input voltage of 2.12V to 2.24V (tested with mega168 & mega328)
            R_DDR = HiPinRL;		// switch off current
    10b0:	c4 b8       	out	0x04, r12	; 4
            ADCSRA |= (1<<ADSC);		// start ADC conversion
    10b2:	80 91 7a 00 	lds	r24, 0x007A
    10b6:	80 64       	ori	r24, 0x40	; 64
    10b8:	80 93 7a 00 	sts	0x007A, r24
            while (ADCSRA&(1<<ADSC));	// wait until ADC finished
    10bc:	80 91 7a 00 	lds	r24, 0x007A
    10c0:	86 fd       	sbrc	r24, 6
    10c2:	fc cf       	rjmp	.-8      	; 0x10bc <CheckPins+0x86e>
            tmp16 += ADCW;		// add result of ADC
    10c4:	20 91 78 00 	lds	r18, 0x0078
    10c8:	30 91 79 00 	lds	r19, 0x0079
    10cc:	a2 0e       	add	r10, r18
    10ce:	b3 1e       	adc	r11, r19
    10d0:	ea 94       	dec	r14
         // High level is specified above 0.6 * VCC
         PinMSK = HiADCm & 7;
         // measure Threshold voltage of Gate
         ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
         tmp16 = 1;			// round up ((1*4)/9)
         for(ii=0;ii<11;ii++) {
    10d2:	21 f7       	brne	.-56     	; 0x109c <CheckPins+0x84e>
    10d4:	c5 01       	movw	r24, r10
            R_DDR = HiPinRL;		// switch off current
            ADCSRA |= (1<<ADSC);		// start ADC conversion
            while (ADCSRA&(1<<ADSC));	// wait until ADC finished
            tmp16 += ADCW;		// add result of ADC
         }
         tmp16 *= 4;	//is equal to 44 * ADCW
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
         ntrans.gthvoltage = tmp16/ 9;	//scale to mV
    10de:	69 e0       	ldi	r22, 0x09	; 9
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__udivmodhi4>
    10e6:	70 93 56 01 	sts	0x0156, r23
    10ea:	60 93 55 01 	sts	0x0155, r22
         ntrans.count++;		// count FET as two to accelerate  searching
    10ee:	80 91 5a 01 	lds	r24, 0x015A
    10f2:	8f 5f       	subi	r24, 0xFF	; 255
    10f4:	80 93 5a 01 	sts	0x015A, r24
    10f8:	e8 c2       	rjmp	.+1488   	; 0x16ca <CheckPins+0xe7c>
         goto saveNresult;
      }
   } // end component conduct => npn
   ADC_DDR = TXD_MSK;		// switch all ADC-Ports to input
    10fa:	88 e0       	ldi	r24, 0x08	; 8
    10fc:	87 b9       	out	0x07, r24	; 7
   ADC_PORT = TXD_VAL;		// switch all ADC-Ports to 0 (no Pull up)
    10fe:	88 b9       	out	0x08, r24	; 8
  LoPinRL = pgm_read_byte(&PinRLtab[LowPin]);		// instruction for LowPin R_L
  LoPinRH = LoPinRL + LoPinRL;				// instruction for LowPin R_H
  TriPinRL = pgm_read_byte(&PinRLtab[TristatePin]);	// instruction for TristatePin R_L
  TriPinRH = TriPinRL + TriPinRL;			// instruction for TristatePin R_H
  HiPinRL = pgm_read_byte(&PinRLtab[HighPin]);		// instruction for HighPin R_L
  HiPinRH = HiPinRL + HiPinRL;				// instruction for HighPin R_H
    1100:	0c 2d       	mov	r16, r12
    1102:	00 0f       	add	r16, r16
  }
//##########################################################################################
// Search for diodes
//##########################################################################################
checkDiode:
  R_DDR = 0;			//switch off resistor current
    1104:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;
    1106:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = TXD_MSK;		// switch ADC ports to input
    1108:	88 e0       	ldi	r24, 0x08	; 8
    110a:	87 b9       	out	0x07, r24	; 7
  if (adc.lp_otr < 977) { goto widmes; }
    110c:	a1 ed       	ldi	r26, 0xD1	; 209
    110e:	6a 16       	cp	r6, r26
    1110:	a3 e0       	ldi	r26, 0x03	; 3
    1112:	7a 06       	cpc	r7, r26
    1114:	08 f4       	brcc	.+2      	; 0x1118 <CheckPins+0x8ca>
    1116:	92 c0       	rjmp	.+292    	; 0x123c <CheckPins+0x9ee>
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
    1118:	88 b9       	out	0x08, r24	; 8
    111a:	48 ec       	ldi	r20, 0xC8	; 200
    111c:	e4 2e       	mov	r14, r20
  for (ii=0;ii<200;ii++) {
     ADC_DDR = LoADCm | HiADCm; // discharge by short of Low and High side
    111e:	a9 2c       	mov	r10, r9
    1120:	ad 28       	or	r10, r13
    1122:	a7 b8       	out	0x07, r10	; 7
     wait_about5ms();		// Low and Highpin to GND for discharge
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
     ADC_DDR = LoADCm;		// switch only Low-Pin fix to GND
    112c:	97 b8       	out	0x07, r9	; 7
     adc.hp1 = ReadADC(HighPin); // read voltage at High-Pin
    112e:	81 2f       	mov	r24, r17
    1130:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
     if (adc.hp1 < (150/8)) break;
    1134:	82 31       	cpi	r24, 0x12	; 18
    1136:	91 05       	cpc	r25, r1
    1138:	10 f0       	brcs	.+4      	; 0x113e <CheckPins+0x8f0>
    113a:	ea 94       	dec	r14
  ADC_DDR = TXD_MSK;		// switch ADC ports to input
  if (adc.lp_otr < 977) { goto widmes; }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
  for (ii=0;ii<200;ii++) {
    113c:	91 f7       	brne	.-28     	; 0x1122 <CheckPins+0x8d4>
  }
#else
  /* check first with low current (R_H=470k) */
  /* With this method the diode can be better differed from a capacitor, */
  /* but a parallel to a capacitor mounted diode can not be found. */
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
    113e:	04 b9       	out	0x04, r16	; 4
  R_PORT = HiPinRH;
    1140:	05 b9       	out	0x05, r16	; 5
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
    1142:	88 2d       	mov	r24, r8
    1144:	61 e0       	ldi	r22, 0x01	; 1
    1146:	0e 94 0c 04 	call	0x818	; 0x818 <ChargePin10ms>
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
    114a:	81 2f       	mov	r24, r17
    114c:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
    1150:	5c 01       	movw	r10, r24
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
    1152:	88 2d       	mov	r24, r8
    1154:	60 e0       	ldi	r22, 0x00	; 0
    1156:	0e 94 0c 04 	call	0x818	; 0x818 <ChargePin10ms>
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
    115a:	81 2f       	mov	r24, r17
    115c:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
    1160:	58 2e       	mov	r5, r24
    1162:	69 2e       	mov	r6, r25

  /* check with higher current (R_L=680) */
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    1164:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
    1166:	c5 b8       	out	0x05, r12	; 5
  adc.hp1 = W5msReadADC(HighPin) - ReadADC(LowPin);
    1168:	81 2f       	mov	r24, r17
    116a:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
    116e:	9b 83       	std	Y+3, r25	; 0x03
    1170:	8a 83       	std	Y+2, r24	; 0x02
    1172:	83 2d       	mov	r24, r3
    1174:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
    1178:	ea 81       	ldd	r30, Y+2	; 0x02
    117a:	fb 81       	ldd	r31, Y+3	; 0x03
    117c:	e8 1b       	sub	r30, r24
    117e:	f9 0b       	sbc	r31, r25
    1180:	fb 83       	std	Y+3, r31	; 0x03
    1182:	ea 83       	std	Y+2, r30	; 0x02
  ChargePin10ms(TriPinRL,1);	//discharge for N-Kanal-MOSFET gate
    1184:	88 2d       	mov	r24, r8
    1186:	61 e0       	ldi	r22, 0x01	; 1
    1188:	0e 94 0c 04 	call	0x818	; 0x818 <ChargePin10ms>
  adc.lp_otr = W5msReadADC(HighPin) - ReadADC(LowPin);
    118c:	81 2f       	mov	r24, r17
    118e:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
    1192:	7c 01       	movw	r14, r24
    1194:	83 2d       	mov	r24, r3
    1196:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
    119a:	e8 1a       	sub	r14, r24
    119c:	f9 0a       	sbc	r15, r25

  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
    119e:	04 b9       	out	0x04, r16	; 4
  R_PORT = HiPinRH;
    11a0:	05 b9       	out	0x05, r16	; 5
  if(adc.lp_otr > adc.hp1) {
    11a2:	2a 81       	ldd	r18, Y+2	; 0x02
    11a4:	3b 81       	ldd	r19, Y+3	; 0x03
    11a6:	2e 15       	cp	r18, r14
    11a8:	3f 05       	cpc	r19, r15
    11aa:	40 f0       	brcs	.+16     	; 0x11bc <CheckPins+0x96e>
      adc.hp1 = adc.lp_otr;	//the higher value wins
      adc.hp3 = adc.hp2;
  } else {
      ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
    11ac:	88 2d       	mov	r24, r8
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	0e 94 0c 04 	call	0x818	; 0x818 <ChargePin10ms>
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
  R_PORT = HiPinRH;
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
    11b4:	a5 2c       	mov	r10, r5
    11b6:	b6 2c       	mov	r11, r6
  R_PORT = HiPinRH;
  if(adc.lp_otr > adc.hp1) {
      adc.hp1 = adc.lp_otr;	//the higher value wins
      adc.hp3 = adc.hp2;
  } else {
      ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
    11b8:	ea 80       	ldd	r14, Y+2	; 0x02
    11ba:	fb 80       	ldd	r15, Y+3	; 0x03
  }
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
    11bc:	81 2f       	mov	r24, r17
    11be:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
#endif
  volt_dif = adc.hp3/8;
  if (volt_dif > 200) volt_dif = 200;

//  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp2 < adc.hp1) && (adc.hp1 > (adc.hp3+volt_dif)) && (adc.hp3 > adc.hp1/16)) {
    11c2:	97 01       	movw	r18, r14
    11c4:	27 59       	subi	r18, 0x97	; 151
    11c6:	30 40       	sbci	r19, 0x00	; 0
    11c8:	41 e1       	ldi	r20, 0x11	; 17
    11ca:	29 38       	cpi	r18, 0x89	; 137
    11cc:	34 07       	cpc	r19, r20
    11ce:	b0 f5       	brcc	.+108    	; 0x123c <CheckPins+0x9ee>
    11d0:	8e 15       	cp	r24, r14
    11d2:	9f 05       	cpc	r25, r15
    11d4:	98 f5       	brcc	.+102    	; 0x123c <CheckPins+0x9ee>
  lcd_data('H');
  lcd_string(utoa(adc.hp2,outval,10));
  lcd_space();
  wait_about1s();
#endif
  volt_dif = adc.hp3/8;
    11d6:	c5 01       	movw	r24, r10
    11d8:	33 e0       	ldi	r19, 0x03	; 3
    11da:	96 95       	lsr	r25
    11dc:	87 95       	ror	r24
    11de:	3a 95       	dec	r19
    11e0:	e1 f7       	brne	.-8      	; 0x11da <CheckPins+0x98c>
  if (volt_dif > 200) volt_dif = 200;

//  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp2 < adc.hp1) && (adc.hp1 > (adc.hp3+volt_dif)) && (adc.hp3 > adc.hp1/16)) {
    11e2:	89 3c       	cpi	r24, 0xC9	; 201
    11e4:	91 05       	cpc	r25, r1
    11e6:	10 f0       	brcs	.+4      	; 0x11ec <CheckPins+0x99e>
    11e8:	88 ec       	ldi	r24, 0xC8	; 200
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	8a 0d       	add	r24, r10
    11ee:	9b 1d       	adc	r25, r11
    11f0:	8e 15       	cp	r24, r14
    11f2:	9f 05       	cpc	r25, r15
    11f4:	18 f5       	brcc	.+70     	; 0x123c <CheckPins+0x9ee>
    11f6:	c7 01       	movw	r24, r14
    11f8:	24 e0       	ldi	r18, 0x04	; 4
    11fa:	96 95       	lsr	r25
    11fc:	87 95       	ror	r24
    11fe:	2a 95       	dec	r18
    1200:	e1 f7       	brne	.-8      	; 0x11fa <CheckPins+0x9ac>
    1202:	8a 15       	cp	r24, r10
    1204:	9b 05       	cpc	r25, r11
    1206:	d0 f4       	brcc	.+52     	; 0x123c <CheckPins+0x9ee>
     //voltage is above 0,15V and below 4,64V => Ok
     // hp2 >= hp1 is only possible with capacitor, not with a diode, hp2 is measured with 470k
     if((PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
    1208:	80 91 07 01 	lds	r24, 0x0107
    120c:	88 23       	and	r24, r24
    120e:	11 f0       	breq	.+4      	; 0x1214 <CheckPins+0x9c6>
    1210:	86 30       	cpi	r24, 0x06	; 6
    1212:	19 f4       	brne	.+6      	; 0x121a <CheckPins+0x9cc>
        PartFound = PART_DIODE;	//mark for diode only, if no other component is found
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	80 93 07 01 	sts	0x0107, r24
				//since there is a problem with Transistors with a protection diode
#if DebugOut == 4
        lcd_data('D');
#endif
     }
     diodes[NumOfDiodes].Anode = HighPin;
    121a:	80 91 05 01 	lds	r24, 0x0105
    121e:	e8 2f       	mov	r30, r24
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	ee 0f       	add	r30, r30
    1224:	ff 1f       	adc	r31, r31
    1226:	ee 0f       	add	r30, r30
    1228:	ff 1f       	adc	r31, r31
    122a:	e5 57       	subi	r30, 0x75	; 117
    122c:	fe 4f       	sbci	r31, 0xFE	; 254
    122e:	10 83       	st	Z, r17
     diodes[NumOfDiodes].Cathode = LowPin;
    1230:	31 82       	std	Z+1, r3	; 0x01
     diodes[NumOfDiodes].Voltage = adc.hp1;	// voltage in Millivolt 
    1232:	f3 82       	std	Z+3, r15	; 0x03
    1234:	e2 82       	std	Z+2, r14	; 0x02
     NumOfDiodes++;
    1236:	8f 5f       	subi	r24, 0xFF	; 255
    1238:	80 93 05 01 	sts	0x0105, r24

//##########################################################################################
// Search for resistors
//##########################################################################################
widmes:
  if ((NumOfDiodes + ptrans.count  + ntrans.count) > 0) {
    123c:	20 91 72 01 	lds	r18, 0x0172
    1240:	80 91 05 01 	lds	r24, 0x0105
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	82 0f       	add	r24, r18
    1248:	91 1d       	adc	r25, r1
    124a:	20 91 5a 01 	lds	r18, 0x015A
    124e:	82 0f       	add	r24, r18
    1250:	91 1d       	adc	r25, r1
    1252:	00 97       	sbiw	r24, 0x00	; 0
    1254:	09 f0       	breq	.+2      	; 0x1258 <CheckPins+0xa0a>
    1256:	0c c2       	rjmp	.+1048   	; 0x1670 <CheckPins+0xe22>
     goto clean_ports;	// no resistors are searched, if diodes are detected
  }
  // resistor measurement
  wdt_reset();
    1258:	a8 95       	wdr
// U_SCALE can be set to 4 for better resolution of ReadADC result
#if U_SCALE != 1
  ADCconfig.U_AVCC *= U_SCALE;	// scale to higher resolution, mV scale is not required
    125a:	80 91 40 01 	lds	r24, 0x0140
    125e:	90 91 41 01 	lds	r25, 0x0141
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	90 93 41 01 	sts	0x0141, r25
    126e:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.U_Bandgap *= U_SCALE;
    1272:	80 91 3e 01 	lds	r24, 0x013E
    1276:	90 91 3f 01 	lds	r25, 0x013F
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	90 93 3f 01 	sts	0x013F, r25
    1286:	80 93 3e 01 	sts	0x013E, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = R_ANZ_MESS;	// switch to special number of repetitions
    128a:	8e eb       	ldi	r24, 0xBE	; 190
    128c:	80 93 3c 01 	sts	0x013C, r24
#endif
  #define MAX_REPEAT (700 / (5 + R_ANZ_MESS/8))
  ADC_PORT = TXD_VAL;
    1290:	88 e0       	ldi	r24, 0x08	; 8
    1292:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
    1294:	97 b8       	out	0x07, r9	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    1296:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;	
    1298:	c5 b8       	out	0x05, r12	; 5
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
    129a:	ee 24       	eor	r14, r14
    129c:	ff 24       	eor	r15, r15
  for (ii=1;ii<MAX_REPEAT;ii++) {
    129e:	21 e0       	ldi	r18, 0x01	; 1
    12a0:	01 c0       	rjmp	.+2      	; 0x12a4 <CheckPins+0xa56>
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    12a2:	7c 01       	movw	r14, r24
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
    12a4:	83 2d       	mov	r24, r3
    12a6:	2b 87       	std	Y+11, r18	; 0x0b
    12a8:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
    12ac:	58 2e       	mov	r5, r24
    12ae:	29 2e       	mov	r2, r25
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    12b0:	81 2f       	mov	r24, r17
    12b2:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
     udiff = adc.hp1 - adc.hp2;
    12b6:	ac 01       	movw	r20, r24
    12b8:	4e 19       	sub	r20, r14
    12ba:	5f 09       	sbc	r21, r15
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    12bc:	2b 85       	ldd	r18, Y+11	; 0x0b
    12be:	57 ff       	sbrs	r21, 7
    12c0:	03 c0       	rjmp	.+6      	; 0x12c8 <CheckPins+0xa7a>
    12c2:	50 95       	com	r21
    12c4:	41 95       	neg	r20
    12c6:	5f 4f       	sbci	r21, 0xFF	; 255
    12c8:	43 30       	cpi	r20, 0x03	; 3
    12ca:	51 05       	cpc	r21, r1
    12cc:	7c f4       	brge	.+30     	; 0x12ec <CheckPins+0xa9e>
    12ce:	ac 01       	movw	r20, r24
  adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
#endif
  if (adc.tp1 > adc.hp1) {
     adc.tp1 = adc.hp1;
  }
  R_PORT = 0;
    12d0:	15 b8       	out	0x05, r1	; 5
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (GND)
    12d2:	04 b9       	out	0x04, r16	; 4
  adc.hp2 = W5msReadADC(HighPin);	// read voltage, should be down
    12d4:	81 2f       	mov	r24, r17
    12d6:	4a 87       	std	Y+10, r20	; 0x0a
    12d8:	5b 87       	std	Y+11, r21	; 0x0b
    12da:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
  if (adc.hp2 > (20*U_SCALE)) {
    12de:	4a 85       	ldd	r20, Y+10	; 0x0a
    12e0:	5b 85       	ldd	r21, Y+11	; 0x0b
    12e2:	81 35       	cpi	r24, 0x51	; 81
    12e4:	91 05       	cpc	r25, r1
    12e6:	08 f0       	brcs	.+2      	; 0x12ea <CheckPins+0xa9c>
    12e8:	a8 c1       	rjmp	.+848    	; 0x163a <CheckPins+0xdec>
    12ea:	05 c0       	rjmp	.+10     	; 0x12f6 <CheckPins+0xaa8>
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     udiff = adc.hp1 - adc.hp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.hp2 = adc.hp1;
     wdt_reset();
    12ec:	a8 95       	wdr
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    12ee:	2f 5f       	subi	r18, 0xFF	; 255
    12f0:	29 31       	cpi	r18, 0x19	; 25
    12f2:	b9 f6       	brne	.-82     	; 0x12a2 <CheckPins+0xa54>
    12f4:	a2 c1       	rjmp	.+836    	; 0x163a <CheckPins+0xdec>
     lcd_string(utoa(adc.hp2, outval, 10));
     lcd_space();
#endif
     goto testend;
  }
  R_PORT = HiPinRH;		//switch R_H for High-Pin to VCC
    12f6:	05 b9       	out	0x05, r16	; 5
  adc.hp2 = W5msReadADC(HighPin);	// voltage at resistor Rx with R_H
    12f8:	81 2f       	mov	r24, r17
    12fa:	4a 87       	std	Y+10, r20	; 0x0a
    12fc:	5b 87       	std	Y+11, r21	; 0x0b
    12fe:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
    1302:	7c 01       	movw	r14, r24

  ADC_DDR = HiADCm;		//switch High-Pin to output
    1304:	d7 b8       	out	0x07, r13	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
    1306:	d8 b8       	out	0x08, r13	; 8
  R_PORT = 0;
    1308:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
    130a:	44 b8       	out	0x04, r4	; 4
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
    130c:	aa 24       	eor	r10, r10
    130e:	bb 24       	eor	r11, r11
  for (ii=1;ii<MAX_REPEAT;ii++) {
    1310:	01 e0       	ldi	r16, 0x01	; 1
    1312:	4a 85       	ldd	r20, Y+10	; 0x0a
    1314:	5b 85       	ldd	r21, Y+11	; 0x0b
    1316:	3a 01       	movw	r6, r20
    1318:	01 c0       	rjmp	.+2      	; 0x131c <CheckPins+0xace>
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    131a:	56 01       	movw	r10, r12
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
    131c:	81 2f       	mov	r24, r17
    131e:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
    1322:	4c 01       	movw	r8, r24
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    1324:	83 2d       	mov	r24, r3
    1326:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
    132a:	6c 01       	movw	r12, r24
     udiff = adc.lp1 - adc.lp2;
    132c:	8a 19       	sub	r24, r10
    132e:	9b 09       	sbc	r25, r11
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    1330:	97 ff       	sbrs	r25, 7
    1332:	03 c0       	rjmp	.+6      	; 0x133a <CheckPins+0xaec>
    1334:	90 95       	com	r25
    1336:	81 95       	neg	r24
    1338:	9f 4f       	sbci	r25, 0xFF	; 255
    133a:	83 30       	cpi	r24, 0x03	; 3
    133c:	91 05       	cpc	r25, r1
    133e:	84 f4       	brge	.+32     	; 0x1360 <CheckPins+0xb12>
    1340:	a3 01       	movw	r20, r6
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = pgm_read_byte(&PinRLtab[LowPin]);		// instruction for LowPin R_L
  LoPinRH = LoPinRL + LoPinRL;				// instruction for LowPin R_H
    1342:	44 0c       	add	r4, r4
  adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
#endif
  if (adc.tp2 < adc.lp1) {
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
    1344:	44 b8       	out	0x04, r4	; 4
  adc.lp2 = W5msReadADC(LowPin);
    1346:	83 2d       	mov	r24, r3
    1348:	6a 86       	std	Y+10, r6	; 0x0a
    134a:	5b 87       	std	Y+11, r21	; 0x0b
    134c:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
    1350:	3c 01       	movw	r6, r24
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    1352:	4a 85       	ldd	r20, Y+10	; 0x0a
    1354:	5b 85       	ldd	r21, Y+11	; 0x0b
    1356:	64 e4       	ldi	r22, 0x44	; 68
    1358:	40 3c       	cpi	r20, 0xC0	; 192
    135a:	56 07       	cpc	r21, r22
    135c:	30 f0       	brcs	.+12     	; 0x136a <CheckPins+0xb1c>
    135e:	0c c0       	rjmp	.+24     	; 0x1378 <CheckPins+0xb2a>
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     udiff = adc.lp1 - adc.lp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.lp2 = adc.lp1;
     wdt_reset();
    1360:	a8 95       	wdr
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
  R_PORT = 0;
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    1362:	0f 5f       	subi	r16, 0xFF	; 255
    1364:	09 31       	cpi	r16, 0x19	; 25
    1366:	c9 f6       	brne	.-78     	; 0x131a <CheckPins+0xacc>
    1368:	68 c1       	rjmp	.+720    	; 0x163a <CheckPins+0xdec>
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
  adc.lp2 = W5msReadADC(LowPin);
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    136a:	75 e8       	ldi	r23, 0x85	; 133
    136c:	e7 16       	cp	r14, r23
    136e:	71 e0       	ldi	r23, 0x01	; 1
    1370:	f7 06       	cpc	r15, r23
    1372:	08 f0       	brcs	.+2      	; 0x1376 <CheckPins+0xb28>
    1374:	62 c1       	rjmp	.+708    	; 0x163a <CheckPins+0xdec>
    1376:	06 c0       	rjmp	.+12     	; 0x1384 <CheckPins+0xb36>
     lcd_data('F');
#endif
     goto testend; 
  }
//    if((adc.hp2 + (adc.hp2 / 61)) < adc.hp1)
  if (adc.hp2 < (4972*U_SCALE)) { 
    1378:	80 eb       	ldi	r24, 0xB0	; 176
    137a:	e8 16       	cp	r14, r24
    137c:	8d e4       	ldi	r24, 0x4D	; 77
    137e:	f8 06       	cpc	r15, r24
    1380:	08 f0       	brcs	.+2      	; 0x1384 <CheckPins+0xb36>
    1382:	5b c1       	rjmp	.+694    	; 0x163a <CheckPins+0xdec>
     // voltage breaks down with low test current and it is not nearly shorted  => resistor
//     if (adc.lp1 < 120)  // take measurement with R_H 
     if (adc.lp1 < (169*U_SCALE)) { // take measurement with R_H 
    1384:	94 ea       	ldi	r25, 0xA4	; 164
    1386:	c9 16       	cp	r12, r25
    1388:	92 e0       	ldi	r25, 0x02	; 2
    138a:	d9 06       	cpc	r13, r25
    138c:	08 f0       	brcs	.+2      	; 0x1390 <CheckPins+0xb42>
    138e:	72 c0       	rjmp	.+228    	; 0x1474 <CheckPins+0xc26>
        ii = 'H';
        if (adc.lp2 < (38*U_SCALE)) {
    1390:	a8 e9       	ldi	r26, 0x98	; 152
    1392:	6a 16       	cp	r6, r26
    1394:	71 04       	cpc	r7, r1
    1396:	08 f4       	brcc	.+2      	; 0x139a <CheckPins+0xb4c>
    1398:	50 c1       	rjmp	.+672    	; 0x163a <CheckPins+0xdec>
           // measurement > 60MOhm to big resistance
           goto testend;
        }
        // two measurements with R_H resistors (470k) are made:
        // lirx1 (measurement at HighPin)
        lirx1 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)adc.hp2 / (ADCconfig.U_AVCC - adc.hp2);
    139a:	80 90 40 01 	lds	r8, 0x0140
    139e:	90 90 41 01 	lds	r9, 0x0141
    13a2:	b7 01       	movw	r22, r14
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	28 e9       	ldi	r18, 0x98	; 152
    13aa:	37 eb       	ldi	r19, 0xB7	; 183
    13ac:	40 e0       	ldi	r20, 0x00	; 0
    13ae:	50 e0       	ldi	r21, 0x00	; 0
    13b0:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
    13b4:	94 01       	movw	r18, r8
    13b6:	2e 19       	sub	r18, r14
    13b8:	3f 09       	sbc	r19, r15
    13ba:	40 e0       	ldi	r20, 0x00	; 0
    13bc:	50 e0       	ldi	r21, 0x00	; 0
    13be:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
    13c2:	59 01       	movw	r10, r18
    13c4:	6a 01       	movw	r12, r20
        // lirx2 (measurement at LowPin)
        lirx2 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)(ADCconfig.U_AVCC - adc.lp2) / adc.lp2;
    13c6:	86 18       	sub	r8, r6
    13c8:	97 08       	sbc	r9, r7
    13ca:	b4 01       	movw	r22, r8
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	28 e9       	ldi	r18, 0x98	; 152
    13d2:	37 eb       	ldi	r19, 0xB7	; 183
    13d4:	40 e0       	ldi	r20, 0x00	; 0
    13d6:	50 e0       	ldi	r21, 0x00	; 0
    13d8:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
    13dc:	93 01       	movw	r18, r6
    13de:	40 e0       	ldi	r20, 0x00	; 0
    13e0:	50 e0       	ldi	r21, 0x00	; 0
    13e2:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
#define FAKT_LOW 2		//resolution is about twice as good
#else
#define FAKT_LOW 4		//resolution is about four times better
#endif
#ifdef AUTOSCALE_ADC
        if (adc.hp2 < U_INT_LIMIT) {
    13e6:	b8 e7       	ldi	r27, 0x78	; 120
    13e8:	eb 16       	cp	r14, r27
    13ea:	bf e0       	ldi	r27, 0x0F	; 15
    13ec:	fb 06       	cpc	r15, r27
    13ee:	70 f4       	brcc	.+28     	; 0x140c <CheckPins+0xbbe>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    13f0:	c6 01       	movw	r24, r12
    13f2:	b5 01       	movw	r22, r10
    13f4:	e2 e0       	ldi	r30, 0x02	; 2
    13f6:	66 0f       	add	r22, r22
    13f8:	77 1f       	adc	r23, r23
    13fa:	88 1f       	adc	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	ea 95       	dec	r30
    1400:	d1 f7       	brne	.-12     	; 0x13f6 <CheckPins+0xba8>
    1402:	62 0f       	add	r22, r18
    1404:	73 1f       	adc	r23, r19
    1406:	84 1f       	adc	r24, r20
    1408:	95 1f       	adc	r25, r21
    140a:	12 c0       	rjmp	.+36     	; 0x1430 <CheckPins+0xbe2>
        } else if (adc.lp2 < U_INT_LIMIT){
    140c:	e8 e7       	ldi	r30, 0x78	; 120
    140e:	6e 16       	cp	r6, r30
    1410:	ef e0       	ldi	r30, 0x0F	; 15
    1412:	7e 06       	cpc	r7, r30
    1414:	a0 f4       	brcc	.+40     	; 0x143e <CheckPins+0xbf0>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    1416:	ca 01       	movw	r24, r20
    1418:	b9 01       	movw	r22, r18
    141a:	02 e0       	ldi	r16, 0x02	; 2
    141c:	66 0f       	add	r22, r22
    141e:	77 1f       	adc	r23, r23
    1420:	88 1f       	adc	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	0a 95       	dec	r16
    1426:	d1 f7       	brne	.-12     	; 0x141c <CheckPins+0xbce>
    1428:	6a 0d       	add	r22, r10
    142a:	7b 1d       	adc	r23, r11
    142c:	8c 1d       	adc	r24, r12
    142e:	9d 1d       	adc	r25, r13
    1430:	25 e0       	ldi	r18, 0x05	; 5
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	40 e0       	ldi	r20, 0x00	; 0
    1436:	50 e0       	ldi	r21, 0x00	; 0
    1438:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
    143c:	08 c0       	rjmp	.+16     	; 0x144e <CheckPins+0xc00>
        } else 
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_H measurements
    143e:	2a 0d       	add	r18, r10
    1440:	3b 1d       	adc	r19, r11
    1442:	4c 1d       	adc	r20, r12
    1444:	5d 1d       	adc	r21, r13
    1446:	56 95       	lsr	r21
    1448:	47 95       	ror	r20
    144a:	37 95       	ror	r19
    144c:	27 95       	ror	r18
        }
        lrx1 *= 100;
    144e:	ca 01       	movw	r24, r20
    1450:	b9 01       	movw	r22, r18
    1452:	24 e6       	ldi	r18, 0x64	; 100
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	40 e0       	ldi	r20, 0x00	; 0
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
    145e:	6b 01       	movw	r12, r22
    1460:	7c 01       	movw	r14, r24
        lrx1 += RH_OFFSET;			// add constant for correction of systematic error
    1462:	2c ea       	ldi	r18, 0xAC	; 172
    1464:	3d e0       	ldi	r19, 0x0D	; 13
    1466:	40 e0       	ldi	r20, 0x00	; 0
    1468:	50 e0       	ldi	r21, 0x00	; 0
    146a:	c2 0e       	add	r12, r18
    146c:	d3 1e       	adc	r13, r19
    146e:	e4 1e       	adc	r14, r20
    1470:	f5 1e       	adc	r15, r21
    1472:	78 c0       	rjmp	.+240    	; 0x1564 <CheckPins+0xd16>
    1474:	85 2d       	mov	r24, r5
    1476:	92 2d       	mov	r25, r2
    1478:	48 17       	cp	r20, r24
    147a:	59 07       	cpc	r21, r25
    147c:	08 f4       	brcc	.+2      	; 0x1480 <CheckPins+0xc32>
    147e:	ca 01       	movw	r24, r20
    1480:	76 01       	movw	r14, r12
    1482:	c8 14       	cp	r12, r8
    1484:	d9 04       	cpc	r13, r9
    1486:	08 f4       	brcc	.+2      	; 0x148a <CheckPins+0xc3c>
    1488:	74 01       	movw	r14, r8
    148a:	3c 01       	movw	r6, r24
    148c:	84 17       	cp	r24, r20
    148e:	95 07       	cpc	r25, r21
    1490:	08 f4       	brcc	.+2      	; 0x1494 <CheckPins+0xc46>
    1492:	3a 01       	movw	r6, r20
        // two measurements with R_L resistors (680) are made:
        // lirx1 (measurement at HighPin)
        if (adc.tp1 > adc.hp1) {
           adc.hp1 = adc.tp1;		//diff negativ is illegal
        }
        lirx1 =(unsigned long)RR680PL * (unsigned long)(adc.hp1 - adc.tp1) / (ADCconfig.U_AVCC - adc.hp1);
    1494:	b3 01       	movw	r22, r6
    1496:	68 1b       	sub	r22, r24
    1498:	79 0b       	sbc	r23, r25
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	20 91 08 01 	lds	r18, 0x0108
    14a2:	30 91 09 01 	lds	r19, 0x0109
    14a6:	40 e0       	ldi	r20, 0x00	; 0
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
    14ae:	20 91 40 01 	lds	r18, 0x0140
    14b2:	30 91 41 01 	lds	r19, 0x0141
    14b6:	26 19       	sub	r18, r6
    14b8:	37 09       	sbc	r19, r7
    14ba:	40 e0       	ldi	r20, 0x00	; 0
    14bc:	50 e0       	ldi	r21, 0x00	; 0
    14be:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
    14c2:	49 01       	movw	r8, r18
    14c4:	5a 01       	movw	r10, r20
    14c6:	27 01       	movw	r4, r14
    14c8:	ce 14       	cp	r12, r14
    14ca:	df 04       	cpc	r13, r15
    14cc:	08 f4       	brcc	.+2      	; 0x14d0 <CheckPins+0xc82>
    14ce:	26 01       	movw	r4, r12
        if (adc.tp2 < adc.lp1) {
           adc.lp1 = adc.tp2;		//diff negativ is illegal
        }
        // lirx2 (Measurement at LowPin)
        lirx2 =(unsigned long)RR680MI * (unsigned long)(adc.tp2 -adc.lp1) / adc.lp1;
    14d0:	e4 18       	sub	r14, r4
    14d2:	f5 08       	sbc	r15, r5
    14d4:	b7 01       	movw	r22, r14
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	20 91 03 01 	lds	r18, 0x0103
    14de:	30 91 04 01 	lds	r19, 0x0104
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
    14ea:	92 01       	movw	r18, r4
    14ec:	40 e0       	ldi	r20, 0x00	; 0
    14ee:	50 e0       	ldi	r21, 0x00	; 0
    14f0:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
//     lrx1 =(unsigned long)R_L_VAL * (unsigned long)adc.hp1 / (adc.hp3 - adc.hp1);

#ifdef AUTOSCALE_ADC
        if (adc.hp1 < U_INT_LIMIT) {
    14f4:	68 e7       	ldi	r22, 0x78	; 120
    14f6:	66 16       	cp	r6, r22
    14f8:	6f e0       	ldi	r22, 0x0F	; 15
    14fa:	76 06       	cpc	r7, r22
    14fc:	70 f4       	brcc	.+28     	; 0x151a <CheckPins+0xccc>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    14fe:	c5 01       	movw	r24, r10
    1500:	b4 01       	movw	r22, r8
    1502:	a2 e0       	ldi	r26, 0x02	; 2
    1504:	66 0f       	add	r22, r22
    1506:	77 1f       	adc	r23, r23
    1508:	88 1f       	adc	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	aa 95       	dec	r26
    150e:	d1 f7       	brne	.-12     	; 0x1504 <CheckPins+0xcb6>
    1510:	62 0f       	add	r22, r18
    1512:	73 1f       	adc	r23, r19
    1514:	84 1f       	adc	r24, r20
    1516:	95 1f       	adc	r25, r21
    1518:	12 c0       	rjmp	.+36     	; 0x153e <CheckPins+0xcf0>
        } else if (adc.lp1 < U_INT_LIMIT) {
    151a:	78 e7       	ldi	r23, 0x78	; 120
    151c:	47 16       	cp	r4, r23
    151e:	7f e0       	ldi	r23, 0x0F	; 15
    1520:	57 06       	cpc	r5, r23
    1522:	b0 f4       	brcc	.+44     	; 0x1550 <CheckPins+0xd02>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    1524:	ca 01       	movw	r24, r20
    1526:	b9 01       	movw	r22, r18
    1528:	f2 e0       	ldi	r31, 0x02	; 2
    152a:	66 0f       	add	r22, r22
    152c:	77 1f       	adc	r23, r23
    152e:	88 1f       	adc	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	fa 95       	dec	r31
    1534:	d1 f7       	brne	.-12     	; 0x152a <CheckPins+0xcdc>
    1536:	68 0d       	add	r22, r8
    1538:	79 1d       	adc	r23, r9
    153a:	8a 1d       	adc	r24, r10
    153c:	9b 1d       	adc	r25, r11
    153e:	25 e0       	ldi	r18, 0x05	; 5
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 e0       	ldi	r20, 0x00	; 0
    1544:	50 e0       	ldi	r21, 0x00	; 0
    1546:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
    154a:	69 01       	movw	r12, r18
    154c:	7a 01       	movw	r14, r20
    154e:	0a c0       	rjmp	.+20     	; 0x1564 <CheckPins+0xd16>
        } else
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_L measurements
    1550:	69 01       	movw	r12, r18
    1552:	7a 01       	movw	r14, r20
    1554:	c8 0c       	add	r12, r8
    1556:	d9 1c       	adc	r13, r9
    1558:	ea 1c       	adc	r14, r10
    155a:	fb 1c       	adc	r15, r11
    155c:	f6 94       	lsr	r15
    155e:	e7 94       	ror	r14
    1560:	d7 94       	ror	r13
    1562:	c7 94       	ror	r12
  lcd_line4();
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4);
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
    1564:	80 91 07 01 	lds	r24, 0x0107
    1568:	82 30       	cpi	r24, 0x02	; 2
    156a:	18 f0       	brcs	.+6      	; 0x1572 <CheckPins+0xd24>
    156c:	86 30       	cpi	r24, 0x06	; 6
    156e:	09 f0       	breq	.+2      	; 0x1572 <CheckPins+0xd24>
    1570:	64 c0       	rjmp	.+200    	; 0x163a <CheckPins+0xdec>
        for (ii=0; ii<ResistorsFound; ii++) {
    1572:	30 91 73 01 	lds	r19, 0x0173
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	41 c0       	rjmp	.+130    	; 0x15fc <CheckPins+0xdae>
           // search measurements with inverse polarity 
           thisR = &resis[ii];
    157a:	82 2f       	mov	r24, r18
    157c:	90 e0       	ldi	r25, 0x00	; 0
           if (thisR->rt != TristatePin) {
    157e:	fc 01       	movw	r30, r24
    1580:	ee 0f       	add	r30, r30
    1582:	ff 1f       	adc	r31, r31
    1584:	e8 0f       	add	r30, r24
    1586:	f9 1f       	adc	r31, r25
    1588:	ee 0f       	add	r30, r30
    158a:	ff 1f       	adc	r31, r31
    158c:	ee 0f       	add	r30, r30
    158e:	ff 1f       	adc	r31, r31
    1590:	e8 5e       	subi	r30, 0xE8	; 232
    1592:	fe 4f       	sbci	r31, 0xFE	; 254
    1594:	83 85       	ldd	r24, Z+11	; 0x0b
    1596:	99 81       	ldd	r25, Y+1	; 0x01
    1598:	89 17       	cp	r24, r25
    159a:	11 f0       	breq	.+4      	; 0x15a0 <CheckPins+0xd52>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4);
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    159c:	2f 5f       	subi	r18, 0xFF	; 255
    159e:	2e c0       	rjmp	.+92     	; 0x15fc <CheckPins+0xdae>
           if (thisR->rt != TristatePin) {
              continue;
           }
           // must be measurement with inverse polarity 
           // resolution is 0.1 Ohm, 1 Ohm = 10 !
           lirx1 = (labs((long)lrx1 - (long)thisR->rx) * 10) / (lrx1 + thisR->rx + 100);
    15a0:	80 80       	ld	r8, Z
    15a2:	91 80       	ldd	r9, Z+1	; 0x01
    15a4:	a2 80       	ldd	r10, Z+2	; 0x02
    15a6:	b3 80       	ldd	r11, Z+3	; 0x03
    15a8:	c7 01       	movw	r24, r14
    15aa:	b6 01       	movw	r22, r12
    15ac:	68 19       	sub	r22, r8
    15ae:	79 09       	sbc	r23, r9
    15b0:	8a 09       	sbc	r24, r10
    15b2:	9b 09       	sbc	r25, r11
    15b4:	97 ff       	sbrs	r25, 7
    15b6:	07 c0       	rjmp	.+14     	; 0x15c6 <CheckPins+0xd78>
    15b8:	90 95       	com	r25
    15ba:	80 95       	com	r24
    15bc:	70 95       	com	r23
    15be:	61 95       	neg	r22
    15c0:	7f 4f       	sbci	r23, 0xFF	; 255
    15c2:	8f 4f       	sbci	r24, 0xFF	; 255
    15c4:	9f 4f       	sbci	r25, 0xFF	; 255
    15c6:	2a e0       	ldi	r18, 0x0A	; 10
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	40 e0       	ldi	r20, 0x00	; 0
    15cc:	50 e0       	ldi	r21, 0x00	; 0
    15ce:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
    15d2:	a5 01       	movw	r20, r10
    15d4:	94 01       	movw	r18, r8
    15d6:	2c 59       	subi	r18, 0x9C	; 156
    15d8:	3f 4f       	sbci	r19, 0xFF	; 255
    15da:	4f 4f       	sbci	r20, 0xFF	; 255
    15dc:	5f 4f       	sbci	r21, 0xFF	; 255
    15de:	2c 0d       	add	r18, r12
    15e0:	3d 1d       	adc	r19, r13
    15e2:	4e 1d       	adc	r20, r14
    15e4:	5f 1d       	adc	r21, r15
    15e6:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
           if (lirx1  > 0) {
    15ea:	21 15       	cp	r18, r1
    15ec:	31 05       	cpc	r19, r1
    15ee:	41 05       	cpc	r20, r1
    15f0:	51 05       	cpc	r21, r1
    15f2:	19 f5       	brne	.+70     	; 0x163a <CheckPins+0xdec>
              DisplayValue(lirx1,-1,LCD_CHAR_OMEGA,3);
              lcd_space();
#endif
              goto testend; // <10% mismatch
           }
           PartFound = PART_RESISTOR;
    15f4:	86 e0       	ldi	r24, 0x06	; 6
    15f6:	80 93 07 01 	sts	0x0107, r24
           goto testend;
    15fa:	1f c0       	rjmp	.+62     	; 0x163a <CheckPins+0xdec>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4);
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    15fc:	23 17       	cp	r18, r19
    15fe:	08 f4       	brcc	.+2      	; 0x1602 <CheckPins+0xdb4>
    1600:	bc cf       	rjmp	.-136    	; 0x157a <CheckPins+0xd2c>
           }
           PartFound = PART_RESISTOR;
           goto testend;
        } // end for
        // no same resistor with the same Tristate-Pin found, new one
        thisR = &resis[ResistorsFound];		// pointer to a free resistor structure
    1602:	83 2f       	mov	r24, r19
    1604:	90 e0       	ldi	r25, 0x00	; 0
        thisR->rx = lrx1;		// save resistor value
    1606:	fc 01       	movw	r30, r24
    1608:	ee 0f       	add	r30, r30
    160a:	ff 1f       	adc	r31, r31
    160c:	e8 0f       	add	r30, r24
    160e:	f9 1f       	adc	r31, r25
    1610:	ee 0f       	add	r30, r30
    1612:	ff 1f       	adc	r31, r31
    1614:	ee 0f       	add	r30, r30
    1616:	ff 1f       	adc	r31, r31
    1618:	e8 5e       	subi	r30, 0xE8	; 232
    161a:	fe 4f       	sbci	r31, 0xFE	; 254
    161c:	c0 82       	st	Z, r12
    161e:	d1 82       	std	Z+1, r13	; 0x01
    1620:	e2 82       	std	Z+2, r14	; 0x02
    1622:	f3 82       	std	Z+3, r15	; 0x03
#if FLASHEND > 0x1fff
        thisR->lx = 0;			// no inductance
    1624:	14 82       	std	Z+4, r1	; 0x04
    1626:	15 82       	std	Z+5, r1	; 0x05
    1628:	16 82       	std	Z+6, r1	; 0x06
    162a:	17 82       	std	Z+7, r1	; 0x07
#endif
        thisR->ra = LowPin;		// save Pin numbers
    162c:	31 86       	std	Z+9, r3	; 0x09
        thisR->rb = HighPin;
    162e:	12 87       	std	Z+10, r17	; 0x0a
        thisR->rt = TristatePin;	// Tristate is saved for easier search of inverse measurement
    1630:	a9 81       	ldd	r26, Y+1	; 0x01
    1632:	a3 87       	std	Z+11, r26	; 0x0b
        ResistorsFound++;			// 1 more resistor found
    1634:	3f 5f       	subi	r19, 0xFF	; 255
    1636:	30 93 73 01 	sts	0x0173, r19
#endif
     }
  }
  testend:			// end of resistor measurement
#if U_SCALE != 1
  ADCconfig.U_AVCC /= U_SCALE;		// scale back to mV resolution
    163a:	80 91 40 01 	lds	r24, 0x0140
    163e:	90 91 41 01 	lds	r25, 0x0141
    1642:	96 95       	lsr	r25
    1644:	87 95       	ror	r24
    1646:	96 95       	lsr	r25
    1648:	87 95       	ror	r24
    164a:	90 93 41 01 	sts	0x0141, r25
    164e:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.U_Bandgap /= U_SCALE;
    1652:	80 91 3e 01 	lds	r24, 0x013E
    1656:	90 91 3f 01 	lds	r25, 0x013F
    165a:	96 95       	lsr	r25
    165c:	87 95       	ror	r24
    165e:	96 95       	lsr	r25
    1660:	87 95       	ror	r24
    1662:	90 93 3f 01 	sts	0x013F, r25
    1666:	80 93 3e 01 	sts	0x013E, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = ANZ_MESS;		// switch back to standard number of repetition
    166a:	89 e1       	ldi	r24, 0x19	; 25
    166c:	80 93 3c 01 	sts	0x013C, r24
#ifdef DebugOut
#if DebugOut < 10
  wait_about2s();
#endif
#endif
  ADC_DDR = TXD_MSK;		// all ADC-Pins Input
    1670:	88 e0       	ldi	r24, 0x08	; 8
    1672:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// all ADC outputs to Ground, keine Pull up
    1674:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// all resistor-outputs to Input
    1676:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// all resistor-outputs to Ground, no Pull up
    1678:	15 b8       	out	0x05, r1	; 5
    ntrans.c = HighPin;
    ntrans.e = LowPin;
 }
 goto clean_ports;

} // end CheckPins()
    167a:	2d 96       	adiw	r28, 0x0d	; 13
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	cd bf       	out	0x3d, r28	; 61
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	1f 91       	pop	r17
    168c:	0f 91       	pop	r16
    168e:	ff 90       	pop	r15
    1690:	ef 90       	pop	r14
    1692:	df 90       	pop	r13
    1694:	cf 90       	pop	r12
    1696:	bf 90       	pop	r11
    1698:	af 90       	pop	r10
    169a:	9f 90       	pop	r9
    169c:	8f 90       	pop	r8
    169e:	7f 90       	pop	r7
    16a0:	6f 90       	pop	r6
    16a2:	5f 90       	pop	r5
    16a4:	4f 90       	pop	r4
    16a6:	3f 90       	pop	r3
    16a8:	2f 90       	pop	r2
    16aa:	08 95       	ret
savePresult:
#if DebugOut == 5
 lcd_data('P');
 wait_about1s();
#endif
 ptrans.count++;
    16ac:	80 91 72 01 	lds	r24, 0x0172
    16b0:	8f 5f       	subi	r24, 0xFF	; 255
    16b2:	80 93 72 01 	sts	0x0172, r24
 if (update_pins != 0) {
    16b6:	22 23       	and	r18, r18
    16b8:	d9 f2       	breq	.-74     	; 0x1670 <CheckPins+0xe22>
    ptrans.b = TristatePin;	// save Pin-constellation
    16ba:	b9 81       	ldd	r27, Y+1	; 0x01
    16bc:	b0 93 6f 01 	sts	0x016F, r27
    ptrans.c = LowPin;
    16c0:	30 92 70 01 	sts	0x0170, r3
    ptrans.e = HighPin;
    16c4:	10 93 71 01 	sts	0x0171, r17
    16c8:	d3 cf       	rjmp	.-90     	; 0x1670 <CheckPins+0xe22>
#if DebugOut == 5
  lcd_line2();
  lcd_clear_line();
  lcd_line2();
#endif
  update_pins = 1;			// if a part is found, always update the pins
    16ca:	21 e0       	ldi	r18, 0x01	; 1
saveNresult:
#if DebugOut == 5
 lcd_data('N');
 wait_about1s();
#endif
 ntrans.count++;
    16cc:	80 91 5a 01 	lds	r24, 0x015A
    16d0:	8f 5f       	subi	r24, 0xFF	; 255
    16d2:	80 93 5a 01 	sts	0x015A, r24
 if (update_pins != 0) {
    16d6:	22 23       	and	r18, r18
    16d8:	59 f2       	breq	.-106    	; 0x1670 <CheckPins+0xe22>
    ntrans.b = TristatePin;	// save Pin-constellation
    16da:	e9 81       	ldd	r30, Y+1	; 0x01
    16dc:	e0 93 57 01 	sts	0x0157, r30
    ntrans.c = HighPin;
    16e0:	10 93 58 01 	sts	0x0158, r17
    ntrans.e = LowPin;
    16e4:	30 92 59 01 	sts	0x0159, r3
    16e8:	c3 cf       	rjmp	.-122    	; 0x1670 <CheckPins+0xe22>

000016ea <PinLayout>:
TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
}
#endif

// show the Pin Layout of the device 
void PinLayout(char pin1, char pin2, char pin3) {
    16ea:	ef 92       	push	r14
    16ec:	ff 92       	push	r15
    16ee:	0f 93       	push	r16
    16f0:	1f 93       	push	r17
    16f2:	18 2f       	mov	r17, r24
    16f4:	06 2f       	mov	r16, r22
    16f6:	f4 2e       	mov	r15, r20
// pin1-3 is EBC or SGD or CGA
   uint8_t ipp;
#ifndef EBC_STYLE
   // Layout with 123= style
   lcd_fix_string(N123_str);		//" 123="
    16f8:	85 e0       	ldi	r24, 0x05	; 5
    16fa:	91 e0       	ldi	r25, 0x01	; 1
    16fc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
   for (ipp=0;ipp<3;ipp++) {
    1700:	ee 24       	eor	r14, r14
       if (ipp == _trans->e)  lcd_data(pin1);	// Output Character in right order
    1702:	e0 91 4b 01 	lds	r30, 0x014B
    1706:	f0 91 4c 01 	lds	r31, 0x014C
    170a:	84 85       	ldd	r24, Z+12	; 0x0c
    170c:	e8 16       	cp	r14, r24
    170e:	19 f4       	brne	.+6      	; 0x1716 <PinLayout+0x2c>
    1710:	81 2f       	mov	r24, r17
    1712:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       if (ipp == _trans->b)  lcd_data(pin2);
    1716:	e0 91 4b 01 	lds	r30, 0x014B
    171a:	f0 91 4c 01 	lds	r31, 0x014C
    171e:	82 85       	ldd	r24, Z+10	; 0x0a
    1720:	e8 16       	cp	r14, r24
    1722:	19 f4       	brne	.+6      	; 0x172a <PinLayout+0x40>
    1724:	80 2f       	mov	r24, r16
    1726:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       if (ipp == _trans->c)  lcd_data(pin3);
    172a:	e0 91 4b 01 	lds	r30, 0x014B
    172e:	f0 91 4c 01 	lds	r31, 0x014C
    1732:	83 85       	ldd	r24, Z+11	; 0x0b
    1734:	e8 16       	cp	r14, r24
    1736:	19 f4       	brne	.+6      	; 0x173e <PinLayout+0x54>
    1738:	8f 2d       	mov	r24, r15
    173a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
// pin1-3 is EBC or SGD or CGA
   uint8_t ipp;
#ifndef EBC_STYLE
   // Layout with 123= style
   lcd_fix_string(N123_str);		//" 123="
   for (ipp=0;ipp<3;ipp++) {
    173e:	e3 94       	inc	r14
    1740:	8e 2d       	mov	r24, r14
    1742:	83 30       	cpi	r24, 0x03	; 3
    1744:	f1 f6       	brne	.-68     	; 0x1702 <PinLayout+0x18>
   lcd_testpin(_trans->e);
   lcd_testpin(_trans->b);
   lcd_testpin(_trans->c);
 #endif
#endif
}
    1746:	1f 91       	pop	r17
    1748:	0f 91       	pop	r16
    174a:	ff 90       	pop	r15
    174c:	ef 90       	pop	r14
    174e:	08 95       	ret

00001750 <wait_for_key_ms>:
uint8_t wait_for_key_ms(int max_time) {
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	ec 01       	movw	r28, r24
  // if key is pressed, return 1
  // if max_time == 0 , do not count, wait endless
  wait_about200ms();
    1756:	88 e2       	ldi	r24, 0x28	; 40
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
// wait 28 seconds or 5 seconds (if repeat function)
  while (max_time >= 0) {
    175e:	0d c0       	rjmp	.+26     	; 0x177a <wait_for_key_ms+0x2a>
     wait_about10ms();
    1760:	82 e0       	ldi	r24, 0x02	; 2
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    1768:	4f 9b       	sbis	0x09, 7	; 9
    176a:	0b c0       	rjmp	.+22     	; 0x1782 <wait_for_key_ms+0x32>
        // If the key is pressed again... 
        // goto start of measurement 
        return(1);    // key is pressed
     }
     wdt_reset();
    176c:	a8 95       	wdr
     if (max_time > 0) {		// count only, if counter > 0
    176e:	20 97       	sbiw	r28, 0x00	; 0
    1770:	21 f0       	breq	.+8      	; 0x177a <wait_for_key_ms+0x2a>
        max_time -= 10;			// 10 ms are done, count down
    1772:	2a 97       	sbiw	r28, 0x0a	; 10
        if (max_time == 0) max_time = -1;	// never count to zero, zero is endless!
    1774:	11 f4       	brne	.+4      	; 0x177a <wait_for_key_ms+0x2a>
    1776:	cf ef       	ldi	r28, 0xFF	; 255
    1778:	df ef       	ldi	r29, 0xFF	; 255
uint8_t wait_for_key_ms(int max_time) {
  // if key is pressed, return 1
  // if max_time == 0 , do not count, wait endless
  wait_about200ms();
// wait 28 seconds or 5 seconds (if repeat function)
  while (max_time >= 0) {
    177a:	d7 ff       	sbrs	r29, 7
    177c:	f1 cf       	rjmp	.-30     	; 0x1760 <wait_for_key_ms+0x10>
     if (max_time > 0) {		// count only, if counter > 0
        max_time -= 10;			// 10 ms are done, count down
        if (max_time == 0) max_time = -1;	// never count to zero, zero is endless!
     }
  }
 return(0);		// no key pressed within the specified time
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	01 c0       	rjmp	.+2      	; 0x1784 <wait_for_key_ms+0x34>
  while (max_time >= 0) {
     wait_about10ms();
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
        // If the key is pressed again... 
        // goto start of measurement 
        return(1);    // key is pressed
    1782:	81 e0       	ldi	r24, 0x01	; 1
        max_time -= 10;			// 10 ms are done, count down
        if (max_time == 0) max_time = -1;	// never count to zero, zero is endless!
     }
  }
 return(0);		// no key pressed within the specified time
}
    1784:	df 91       	pop	r29
    1786:	cf 91       	pop	r28
    1788:	08 95       	ret

0000178a <ShortedProbes>:
 *  - 0 if not shorted
 *  - 1 if shorted
 */

uint8_t ShortedProbes(uint8_t Probe1, uint8_t Probe2)
{
    178a:	0f 93       	push	r16
    178c:	1f 93       	push	r17
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	0f 92       	push	r0
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
   *  Set up a voltage divider between the two probes:
   *  - Probe1: Rl pull-up
   *  - Probe2: Rl pull-down
   */

  ADC_DDR =  TXD_MSK;		// all-Pins to Input
    1798:	98 e0       	ldi	r25, 0x08	; 8
    179a:	97 b9       	out	0x07, r25	; 7
  ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
    179c:	98 b9       	out	0x08, r25	; 8
  R_PORT = pgm_read_byte(&PinRLtab[Probe1]);
    179e:	e8 2f       	mov	r30, r24
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	e0 50       	subi	r30, 0x00	; 0
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	94 91       	lpm	r25, Z+
    17a8:	95 b9       	out	0x05, r25	; 5
  R_DDR = pgm_read_byte(&PinRLtab[Probe1]) | pgm_read_byte(&PinRLtab[Probe2]);
    17aa:	e6 2f       	mov	r30, r22
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	e0 50       	subi	r30, 0x00	; 0
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	e4 91       	lpm	r30, Z+
    17b4:	e9 2b       	or	r30, r25
    17b6:	e4 b9       	out	0x04, r30	; 4

  /* read voltages */
  U1 = ReadADC(Probe1);
    17b8:	69 83       	std	Y+1, r22	; 0x01
    17ba:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
    17be:	8c 01       	movw	r16, r24
  U2 = ReadADC(Probe2);
    17c0:	69 81       	ldd	r22, Y+1	; 0x01
    17c2:	86 2f       	mov	r24, r22
    17c4:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
    17c8:	ac 01       	movw	r20, r24
   *  We expect both probe voltages to be about the same and
   *  to be half of Vcc (allowed difference +/- 20mV).
   */
  #define MAX_UH_DIFF 20

  URH = ADCconfig.U_AVCC / 2;
    17ca:	20 91 40 01 	lds	r18, 0x0140
    17ce:	30 91 41 01 	lds	r19, 0x0141
    17d2:	36 95       	lsr	r19
    17d4:	27 95       	ror	r18
  if ((U1 > (URH - MAX_UH_DIFF)) && (U1 < (URH + MAX_UH_DIFF)))
    17d6:	c9 01       	movw	r24, r18
    17d8:	44 97       	sbiw	r24, 0x14	; 20
    17da:	80 17       	cp	r24, r16
    17dc:	91 07       	cpc	r25, r17
    17de:	60 f4       	brcc	.+24     	; 0x17f8 <ShortedProbes+0x6e>
    17e0:	2c 5e       	subi	r18, 0xEC	; 236
    17e2:	3f 4f       	sbci	r19, 0xFF	; 255
    17e4:	02 17       	cp	r16, r18
    17e6:	13 07       	cpc	r17, r19
    17e8:	38 f4       	brcc	.+14     	; 0x17f8 <ShortedProbes+0x6e>
  {
    if ((U2 > (URH - MAX_UH_DIFF)) && (U2 < (URH + MAX_UH_DIFF)))
    17ea:	84 17       	cp	r24, r20
    17ec:	95 07       	cpc	r25, r21
    17ee:	20 f4       	brcc	.+8      	; 0x17f8 <ShortedProbes+0x6e>
 *  - 1 if shorted
 */

uint8_t ShortedProbes(uint8_t Probe1, uint8_t Probe2)
{
  uint8_t           Flag1 = 0;      /* return value */
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	42 17       	cp	r20, r18
    17f4:	53 07       	cpc	r21, r19
    17f6:	08 f0       	brcs	.+2      	; 0x17fa <ShortedProbes+0x70>
    17f8:	80 e0       	ldi	r24, 0x00	; 0
      Flag1 = 1;
    }
  }

  /* reset port */
  R_DDR = 0;
    17fa:	14 b8       	out	0x04, r1	; 4

  return Flag1;
}
    17fc:	0f 90       	pop	r0
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	1f 91       	pop	r17
    1804:	0f 91       	pop	r16
    1806:	08 95       	ret

00001808 <AllProbesShorted>:
 *  - 0 if no probes are short-circuited
 *  - number of probe pairs short-circuited (3 = all)
 */

uint8_t AllProbesShorted(void)
{
    1808:	1f 93       	push	r17
  uint8_t           Flag2;      /* return value */

  /* check all possible combinations */
  Flag2 = ShortedProbes(TP1, TP2);
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	61 e0       	ldi	r22, 0x01	; 1
    180e:	0e 94 c5 0b 	call	0x178a	; 0x178a <ShortedProbes>
    1812:	18 2f       	mov	r17, r24
  Flag2 += ShortedProbes(TP1, TP3);
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	62 e0       	ldi	r22, 0x02	; 2
    1818:	0e 94 c5 0b 	call	0x178a	; 0x178a <ShortedProbes>
    181c:	18 0f       	add	r17, r24
  Flag2 += ShortedProbes(TP2, TP3);
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	62 e0       	ldi	r22, 0x02	; 2
    1822:	0e 94 c5 0b 	call	0x178a	; 0x178a <ShortedProbes>

  return Flag2;
}
    1826:	81 0f       	add	r24, r17
    1828:	1f 91       	pop	r17
    182a:	08 95       	ret

0000182c <AutoCheck>:
void AutoCheck(void) {
    182c:	8f 92       	push	r8
    182e:	9f 92       	push	r9
    1830:	af 92       	push	r10
    1832:	bf 92       	push	r11
    1834:	cf 92       	push	r12
    1836:	df 92       	push	r13
    1838:	ef 92       	push	r14
    183a:	ff 92       	push	r15
    183c:	0f 93       	push	r16
    183e:	1f 93       	push	r17
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
    1848:	2e 97       	sbiw	r28, 0x0e	; 14
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	de bf       	out	0x3e, r29	; 62
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	cd bf       	out	0x3d, r28	; 61
  int8_t udiff;		// difference between ADC Voltage with VCC or Bandgap reference
  int8_t udiff2;
  #endif
 #endif
  #define RequireShortedProbes
  if (AllProbesShorted() != 3) return;
    1854:	0e 94 04 0c 	call	0x1808	; 0x1808 <AllProbesShorted>
    1858:	83 30       	cpi	r24, 0x03	; 3
    185a:	09 f0       	breq	.+2      	; 0x185e <AutoCheck+0x32>
    185c:	98 c2       	rjmp	.+1328   	; 0x1d8e <AutoCheck+0x562>
  lcd_clear();
    185e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  lcd_fix_string(SELFTEST);		// "Selftest mode.."
    1862:	8c eb       	ldi	r24, 0xBC	; 188
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  lcd_line2();
    186a:	80 ec       	ldi	r24, 0xC0	; 192
    186c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_data('?');			// wait for key pressed
    1870:	8f e3       	ldi	r24, 0x3F	; 63
    1872:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
  for (tt=0;tt<50;tt++) {
    1876:	10 e0       	ldi	r17, 0x00	; 0
     if ((ON_PIN_REG & (1<<RST_PIN)) != 0) break;	// key is unpressed
    1878:	4f 99       	sbic	0x09, 7	; 9
    187a:	08 c0       	rjmp	.+16     	; 0x188c <AutoCheck+0x60>
     wait_about10ms();			// key is still pressed, wait for release
    187c:	82 e0       	ldi	r24, 0x02	; 2
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
  if (AllProbesShorted() != 3) return;
  lcd_clear();
  lcd_fix_string(SELFTEST);		// "Selftest mode.."
  lcd_line2();
  lcd_data('?');			// wait for key pressed
  for (tt=0;tt<50;tt++) {
    1884:	1f 5f       	subi	r17, 0xFF	; 255
    1886:	12 33       	cpi	r17, 0x32	; 50
    1888:	b9 f7       	brne	.-18     	; 0x1878 <AutoCheck+0x4c>
    188a:	0a c0       	rjmp	.+20     	; 0x18a0 <AutoCheck+0x74>
     if ((ON_PIN_REG & (1<<RST_PIN)) != 0) break;	// key is unpressed
    188c:	10 e0       	ldi	r17, 0x00	; 0
     wait_about10ms();			// key is still pressed, wait for release
    }
  if (tt == 50) goto no_selftest;		// key is more than 500ms pressed
  for (tt=0;tt<200;tt++) {
     if(!(ON_PIN_REG & (1<<RST_PIN))) goto begin_selftest;	// key is pressed again
    188e:	4f 9b       	sbis	0x09, 7	; 9
    1890:	0e c0       	rjmp	.+28     	; 0x18ae <AutoCheck+0x82>
     wait_about10ms();
    1892:	82 e0       	ldi	r24, 0x02	; 2
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
  for (tt=0;tt<50;tt++) {
     if ((ON_PIN_REG & (1<<RST_PIN)) != 0) break;	// key is unpressed
     wait_about10ms();			// key is still pressed, wait for release
    }
  if (tt == 50) goto no_selftest;		// key is more than 500ms pressed
  for (tt=0;tt<200;tt++) {
    189a:	1f 5f       	subi	r17, 0xFF	; 255
    189c:	18 3c       	cpi	r17, 0xC8	; 200
    189e:	b9 f7       	brne	.-18     	; 0x188e <AutoCheck+0x62>
     if(!(ON_PIN_REG & (1<<RST_PIN))) goto begin_selftest;	// key is pressed again
     wait_about10ms();
    }
  // no key pressed for 2s
no_selftest:
  lcd_clear();
    18a0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  lcd_fix2_string(VERSION_str);	//"Version ..."
    18a4:	88 ed       	ldi	r24, 0xD8	; 216
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
  return;
    18ac:	70 c2       	rjmp	.+1248   	; 0x1d8e <AutoCheck+0x562>
begin_selftest:
  lcd_line2();
    18ae:	80 ec       	ldi	r24, 0xC0	; 192
    18b0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix2_string(R0_str);		// "R0="
    18b4:	86 ee       	ldi	r24, 0xE6	; 230
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[2]), (int8_t)0);	// clear zero offset
    18bc:	85 ea       	ldi	r24, 0xA5	; 165
    18be:	91 e0       	ldi	r25, 0x01	; 1
    18c0:	60 e0       	ldi	r22, 0x00	; 0
    18c2:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__eewr_byte_m168>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (int8_t)0);	// clear zero offset
    18c6:	86 ea       	ldi	r24, 0xA6	; 166
    18c8:	91 e0       	ldi	r25, 0x01	; 1
    18ca:	60 e0       	ldi	r22, 0x00	; 0
    18cc:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__eewr_byte_m168>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)0);	// clear zero offset
    18d0:	84 ea       	ldi	r24, 0xA4	; 164
    18d2:	91 e0       	ldi	r25, 0x01	; 1
    18d4:	60 e0       	ldi	r22, 0x00	; 0
    18d6:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__eewr_byte_m168>

  adcmv[0] = GetESR(TP3, TP1);
    18da:	82 e0       	ldi	r24, 0x02	; 2
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	0e 94 27 1b 	call	0x364e	; 0x364e <GetESR>
    18e2:	7c 01       	movw	r14, r24
    18e4:	9a 83       	std	Y+2, r25	; 0x02
    18e6:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = GetESR(TP3, TP2);
    18e8:	82 e0       	ldi	r24, 0x02	; 2
    18ea:	61 e0       	ldi	r22, 0x01	; 1
    18ec:	0e 94 27 1b 	call	0x364e	; 0x364e <GetESR>
    18f0:	6c 01       	movw	r12, r24
    18f2:	9c 83       	std	Y+4, r25	; 0x04
    18f4:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = GetESR(TP2, TP1);
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	60 e0       	ldi	r22, 0x00	; 0
    18fa:	0e 94 27 1b 	call	0x364e	; 0x364e <GetESR>
    18fe:	5c 01       	movw	r10, r24
    1900:	9e 83       	std	Y+6, r25	; 0x06
    1902:	8d 83       	std	Y+5, r24	; 0x05
  DisplayValue(adcmv[0],-2,' ',3);
    1904:	b7 01       	movw	r22, r14
    1906:	88 27       	eor	r24, r24
    1908:	77 fd       	sbrc	r23, 7
    190a:	80 95       	com	r24
    190c:	98 2f       	mov	r25, r24
    190e:	4e ef       	ldi	r20, 0xFE	; 254
    1910:	20 e2       	ldi	r18, 0x20	; 32
    1912:	03 e0       	ldi	r16, 0x03	; 3
    1914:	0e 94 8d 02 	call	0x51a	; 0x51a <DisplayValue>
  DisplayValue(adcmv[1],-2,' ',3);
    1918:	b6 01       	movw	r22, r12
    191a:	88 27       	eor	r24, r24
    191c:	77 fd       	sbrc	r23, 7
    191e:	80 95       	com	r24
    1920:	98 2f       	mov	r25, r24
    1922:	4e ef       	ldi	r20, 0xFE	; 254
    1924:	20 e2       	ldi	r18, 0x20	; 32
    1926:	0e 94 8d 02 	call	0x51a	; 0x51a <DisplayValue>
  DisplayValue(adcmv[2],-2,LCD_CHAR_OMEGA,3);
    192a:	b5 01       	movw	r22, r10
    192c:	88 27       	eor	r24, r24
    192e:	77 fd       	sbrc	r23, 7
    1930:	80 95       	com	r24
    1932:	98 2f       	mov	r25, r24
    1934:	4e ef       	ldi	r20, 0xFE	; 254
    1936:	24 ef       	ldi	r18, 0xF4	; 244
    1938:	0e 94 8d 02 	call	0x51a	; 0x51a <DisplayValue>
  if (adcmv[0] < 60) {
    193c:	2c e3       	ldi	r18, 0x3C	; 60
    193e:	e2 16       	cp	r14, r18
    1940:	f1 04       	cpc	r15, r1
    1942:	2c f4       	brge	.+10     	; 0x194e <AutoCheck+0x122>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[2]), (int8_t)adcmv[0]);	// fix zero offset
    1944:	85 ea       	ldi	r24, 0xA5	; 165
    1946:	91 e0       	ldi	r25, 0x01	; 1
    1948:	6e 2d       	mov	r22, r14
    194a:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__eewr_byte_m168>
  }
  if (adcmv[1] < 60) {
    194e:	8c e3       	ldi	r24, 0x3C	; 60
    1950:	c8 16       	cp	r12, r24
    1952:	d1 04       	cpc	r13, r1
    1954:	2c f4       	brge	.+10     	; 0x1960 <AutoCheck+0x134>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (int8_t)adcmv[1]);	// fix zero offset
    1956:	86 ea       	ldi	r24, 0xA6	; 166
    1958:	91 e0       	ldi	r25, 0x01	; 1
    195a:	6c 2d       	mov	r22, r12
    195c:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__eewr_byte_m168>
  }
  if (adcmv[2] < 60) {
    1960:	ec e3       	ldi	r30, 0x3C	; 60
    1962:	ae 16       	cp	r10, r30
    1964:	b1 04       	cpc	r11, r1
    1966:	2c f4       	brge	.+10     	; 0x1972 <AutoCheck+0x146>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
    1968:	84 ea       	ldi	r24, 0xA4	; 164
    196a:	91 e0       	ldi	r25, 0x01	; 1
    196c:	6a 2d       	mov	r22, r10
    196e:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__eewr_byte_m168>
  lcd_clear();
  lcd_fix_string(SELFTEST);		// "Selftest mode.."
  lcd_line2();
  lcd_data('?');			// wait for key pressed
  for (tt=0;tt<50;tt++) {
     if ((ON_PIN_REG & (1<<RST_PIN)) != 0) break;	// key is unpressed
    1972:	10 e0       	ldi	r17, 0x00	; 0
  }
  if (adcmv[2] < 60) {
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
  }
  for(tt=0;tt<12;tt++) {
     wait_about500ms();
    1974:	84 e6       	ldi	r24, 0x64	; 100
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    197c:	4f 9b       	sbis	0x09, 7	; 9
    197e:	03 c0       	rjmp	.+6      	; 0x1986 <AutoCheck+0x15a>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (int8_t)adcmv[1]);	// fix zero offset
  }
  if (adcmv[2] < 60) {
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
  }
  for(tt=0;tt<12;tt++) {
    1980:	1f 5f       	subi	r17, 0xFF	; 255
    1982:	1c 30       	cpi	r17, 0x0C	; 12
    1984:	b9 f7       	brne	.-18     	; 0x1974 <AutoCheck+0x148>
     wait_about500ms();
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    1986:	10 e0       	ldi	r17, 0x00	; 0
     wait_about1s();
  } //end for tt
#else
  for (ww=0;ww<120;ww++) {
     // wait 1 minute for releasing the probes
     lcd_line2();		//Cursor to column 1, row 2
    1988:	80 ec       	ldi	r24, 0xC0	; 192
    198a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     lcd_clear_line();		// clear total line
    198e:	0e 94 85 02 	call	0x50a	; 0x50a <lcd_clear_line>
     lcd_line2();		//Cursor to column 1, row 2
    1992:	80 ec       	ldi	r24, 0xC0	; 192
    1994:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     lcd_fix_string(RELPROBE);	// "Release Probes"
    1998:	8c ec       	ldi	r24, 0xCC	; 204
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     wait_about500ms();
    19a0:	84 e6       	ldi	r24, 0x64	; 100
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
     if (AllProbesShorted() == 0) break;
    19a8:	0e 94 04 0c 	call	0x1808	; 0x1808 <AllProbesShorted>
    19ac:	88 23       	and	r24, r24
    19ae:	19 f0       	breq	.+6      	; 0x19b6 <AutoCheck+0x18a>
        wait_about500ms();
     } //end for ww
     wait_about1s();
  } //end for tt
#else
  for (ww=0;ww<120;ww++) {
    19b0:	1f 5f       	subi	r17, 0xFF	; 255
    19b2:	18 37       	cpi	r17, 0x78	; 120
    19b4:	49 f7       	brne	.-46     	; 0x1988 <AutoCheck+0x15c>
     wait_about500ms();
     if (AllProbesShorted() == 0) break;
  }
#endif

  lcd_clear();
    19b6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  lcd_fix_string(RIHI);	// "RiHi="
    19ba:	82 e5       	ldi	r24, 0x52	; 82
    19bc:	91 e0       	ldi	r25, 0x01	; 1
    19be:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  DisplayValue(RRpinPL,-1,LCD_CHAR_OMEGA,3);
    19c2:	60 91 42 01 	lds	r22, 0x0142
    19c6:	70 91 43 01 	lds	r23, 0x0143
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	4f ef       	ldi	r20, 0xFF	; 255
    19d0:	24 ef       	ldi	r18, 0xF4	; 244
    19d2:	03 e0       	ldi	r16, 0x03	; 3
    19d4:	0e 94 8d 02 	call	0x51a	; 0x51a <DisplayValue>
  lcd_line2();
    19d8:	80 ec       	ldi	r24, 0xC0	; 192
    19da:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_string(RILO);	// "RiLo="
    19de:	89 e5       	ldi	r24, 0x59	; 89
    19e0:	91 e0       	ldi	r25, 0x01	; 1
    19e2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  DisplayValue(RRpinMI,-1,LCD_CHAR_OMEGA,3);
    19e6:	60 91 48 01 	lds	r22, 0x0148
    19ea:	70 91 49 01 	lds	r23, 0x0149
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	4f ef       	ldi	r20, 0xFF	; 255
    19f4:	24 ef       	ldi	r18, 0xF4	; 244
    19f6:	0e 94 8d 02 	call	0x51a	; 0x51a <DisplayValue>
  wait_about2s();			//wait 2 seconds
    19fa:	80 e9       	ldi	r24, 0x90	; 144
    19fc:	91 e0       	ldi	r25, 0x01	; 1
    19fe:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>

  //measure Zero offset for Capacity measurement
  PartFound = PART_NONE;
    1a02:	10 92 07 01 	sts	0x0107, r1
  ReadCapacity(TP3, TP1);
    1a06:	82 e0       	ldi	r24, 0x02	; 2
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	0e 94 f7 14 	call	0x29ee	; 0x29ee <ReadCapacity>
  adcmv[5] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:3
    1a0e:	00 91 7d 01 	lds	r16, 0x017D
    1a12:	10 91 7e 01 	lds	r17, 0x017E
    1a16:	1c 87       	std	Y+12, r17	; 0x0c
    1a18:	0b 87       	std	Y+11, r16	; 0x0b
  ReadCapacity(TP3, TP2);
    1a1a:	82 e0       	ldi	r24, 0x02	; 2
    1a1c:	61 e0       	ldi	r22, 0x01	; 1
    1a1e:	0e 94 f7 14 	call	0x29ee	; 0x29ee <ReadCapacity>
  adcmv[6] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:3
    1a22:	e0 90 7d 01 	lds	r14, 0x017D
    1a26:	f0 90 7e 01 	lds	r15, 0x017E
    1a2a:	fe 86       	std	Y+14, r15	; 0x0e
    1a2c:	ed 86       	std	Y+13, r14	; 0x0d
  ReadCapacity(TP2, TP1);
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	60 e0       	ldi	r22, 0x00	; 0
    1a32:	0e 94 f7 14 	call	0x29ee	; 0x29ee <ReadCapacity>
  adcmv[2] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:2
    1a36:	c0 90 7d 01 	lds	r12, 0x017D
    1a3a:	d0 90 7e 01 	lds	r13, 0x017E
    1a3e:	de 82       	std	Y+6, r13	; 0x06
    1a40:	cd 82       	std	Y+5, r12	; 0x05
  ReadCapacity(TP1, TP3);
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	62 e0       	ldi	r22, 0x02	; 2
    1a46:	0e 94 f7 14 	call	0x29ee	; 0x29ee <ReadCapacity>
  adcmv[1] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:1
    1a4a:	80 91 7d 01 	lds	r24, 0x017D
    1a4e:	90 91 7e 01 	lds	r25, 0x017E
    1a52:	9c 83       	std	Y+4, r25	; 0x04
    1a54:	8b 83       	std	Y+3, r24	; 0x03
  ReadCapacity(TP2, TP3);
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	62 e0       	ldi	r22, 0x02	; 2
    1a5a:	0e 94 f7 14 	call	0x29ee	; 0x29ee <ReadCapacity>
  adcmv[4] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:2
    1a5e:	80 91 7d 01 	lds	r24, 0x017D
    1a62:	90 91 7e 01 	lds	r25, 0x017E
    1a66:	9a 87       	std	Y+10, r25	; 0x0a
    1a68:	89 87       	std	Y+9, r24	; 0x09
  ReadCapacity(TP1, TP2);
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	61 e0       	ldi	r22, 0x01	; 1
    1a6e:	0e 94 f7 14 	call	0x29ee	; 0x29ee <ReadCapacity>
  adcmv[0] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:1
    1a72:	80 91 7d 01 	lds	r24, 0x017D
    1a76:	90 91 7e 01 	lds	r25, 0x017E
    1a7a:	9a 83       	std	Y+2, r25	; 0x02
    1a7c:	89 83       	std	Y+1, r24	; 0x01
  adcmv[3] = adcmv[0];			// same as first for the checking loop, mark as calibrated
    1a7e:	98 87       	std	Y+8, r25	; 0x08
    1a80:	8f 83       	std	Y+7, r24	; 0x07
  lcd_clear();
    1a82:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  lcd_fix_string(C0_str);			//output "C0 "
    1a86:	80 e6       	ldi	r24, 0x60	; 96
    1a88:	91 e0       	ldi	r25, 0x01	; 1
    1a8a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
    1a8e:	b8 01       	movw	r22, r16
    1a90:	88 27       	eor	r24, r24
    1a92:	77 fd       	sbrc	r23, 7
    1a94:	80 95       	com	r24
    1a96:	98 2f       	mov	r25, r24
    1a98:	40 e0       	ldi	r20, 0x00	; 0
    1a9a:	20 e2       	ldi	r18, 0x20	; 32
    1a9c:	03 e0       	ldi	r16, 0x03	; 3
    1a9e:	0e 94 8d 02 	call	0x51a	; 0x51a <DisplayValue>
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
    1aa2:	b7 01       	movw	r22, r14
    1aa4:	88 27       	eor	r24, r24
    1aa6:	77 fd       	sbrc	r23, 7
    1aa8:	80 95       	com	r24
    1aaa:	98 2f       	mov	r25, r24
    1aac:	40 e0       	ldi	r20, 0x00	; 0
    1aae:	20 e2       	ldi	r18, 0x20	; 32
    1ab0:	0e 94 8d 02 	call	0x51a	; 0x51a <DisplayValue>
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
    1ab4:	b6 01       	movw	r22, r12
    1ab6:	88 27       	eor	r24, r24
    1ab8:	77 fd       	sbrc	r23, 7
    1aba:	80 95       	com	r24
    1abc:	98 2f       	mov	r25, r24
    1abe:	44 ef       	ldi	r20, 0xF4	; 244
    1ac0:	26 e4       	ldi	r18, 0x46	; 70
    1ac2:	0e 94 8d 02 	call	0x51a	; 0x51a <DisplayValue>
    1ac6:	8e 01       	movw	r16, r28
    1ac8:	0f 5f       	subi	r16, 0xFF	; 255
    1aca:	1f 4f       	sbci	r17, 0xFF	; 255
void AutoCheck(void) {
    1acc:	9e 01       	movw	r18, r28
    1ace:	21 5f       	subi	r18, 0xF1	; 241
    1ad0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad2:	f8 01       	movw	r30, r16
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {			//checking loop
      if ((adcmv[ww] > 190) || (adcmv[ww] < 10)) goto no_c0save;
    1ad4:	81 91       	ld	r24, Z+
    1ad6:	91 91       	ld	r25, Z+
    1ad8:	0a 97       	sbiw	r24, 0x0a	; 10
    1ada:	85 3b       	cpi	r24, 0xB5	; 181
    1adc:	91 05       	cpc	r25, r1
    1ade:	e8 f4       	brcc	.+58     	; 0x1b1a <AutoCheck+0x2ee>
  lcd_fix_string(C0_str);			//output "C0 "
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {			//checking loop
    1ae0:	e2 17       	cp	r30, r18
    1ae2:	f3 07       	cpc	r31, r19
    1ae4:	b9 f7       	brne	.-18     	; 0x1ad4 <AutoCheck+0x2a8>
    1ae6:	ee 24       	eor	r14, r14
    1ae8:	ff 24       	eor	r15, r15
      if ((adcmv[ww] > 190) || (adcmv[ww] < 10)) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
    1aea:	f8 01       	movw	r30, r16
    1aec:	60 81       	ld	r22, Z
    1aee:	0e 5f       	subi	r16, 0xFE	; 254
    1af0:	1f 4f       	sbci	r17, 0xFF	; 255
    1af2:	61 5f       	subi	r22, 0xF1	; 241
    1af4:	c7 01       	movw	r24, r14
    1af6:	84 56       	subi	r24, 0x64	; 100
    1af8:	9e 4f       	sbci	r25, 0xFE	; 254
    1afa:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__eewr_byte_m168>
    1afe:	08 94       	sec
    1b00:	e1 1c       	adc	r14, r1
    1b02:	f1 1c       	adc	r15, r1
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {			//checking loop
      if ((adcmv[ww] > 190) || (adcmv[ww] < 10)) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
    1b04:	f7 e0       	ldi	r31, 0x07	; 7
    1b06:	ef 16       	cp	r14, r31
    1b08:	f1 04       	cpc	r15, r1
    1b0a:	79 f7       	brne	.-34     	; 0x1aea <AutoCheck+0x2be>
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
  }
  lcd_line2();
    1b0c:	80 ec       	ldi	r24, 0xC0	; 192
    1b0e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_string(OK_str);		// output "OK"
    1b12:	8a ee       	ldi	r24, 0xEA	; 234
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
no_c0save:
 #endif
 wait_about2s();		//wait 2 seconds
    1b1a:	80 e9       	ldi	r24, 0x90	; 144
    1b1c:	91 e0       	ldi	r25, 0x01	; 1
    1b1e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
    1b22:	10 e0       	ldi	r17, 0x00	; 0
 for (ww=0;ww<64;ww++) {
    1b24:	cc 24       	eor	r12, r12
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
    1b26:	8a e0       	ldi	r24, 0x0A	; 10
    1b28:	88 2e       	mov	r8, r24
    1b2a:	91 2c       	mov	r9, r1
    1b2c:	a1 2c       	mov	r10, r1
    1b2e:	b1 2c       	mov	r11, r1
     lcd_data('3');
     lcd_fix2_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1b30:	05 e7       	ldi	r16, 0x75	; 117
    1b32:	e0 2e       	mov	r14, r16
    1b34:	01 e0       	ldi	r16, 0x01	; 1
    1b36:	f0 2e       	mov	r15, r16
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
     lcd_clear();
    1b38:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
     lcd_data('1');
    1b3c:	81 e3       	ldi	r24, 0x31	; 49
    1b3e:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
     lcd_fix_string(CapZeich);	// "-||-"
    1b42:	8a e1       	ldi	r24, 0x1A	; 26
    1b44:	91 e0       	ldi	r25, 0x01	; 1
    1b46:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_data('3');
    1b4a:	83 e3       	ldi	r24, 0x33	; 51
    1b4c:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
     lcd_fix2_string(MinCap_str); // " >100nF!"
    1b50:	8a ee       	ldi	r24, 0xEA	; 234
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
     PartFound = PART_NONE;
    1b58:	10 92 07 01 	sts	0x0107, r1
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
    1b5c:	82 e0       	ldi	r24, 0x02	; 2
    1b5e:	60 e0       	ldi	r22, 0x00	; 0
    1b60:	0e 94 f7 14 	call	0x29ee	; 0x29ee <ReadCapacity>
    1b64:	20 91 75 01 	lds	r18, 0x0175
    1b68:	30 91 76 01 	lds	r19, 0x0176
    1b6c:	40 91 77 01 	lds	r20, 0x0177
    1b70:	50 91 78 01 	lds	r21, 0x0178
    1b74:	00 91 87 01 	lds	r16, 0x0187
     while (cap.cpre < -9) {
    1b78:	07 c0       	rjmp	.+14     	; 0x1b88 <AutoCheck+0x35c>
        cap.cpre++;
        cap.cval /= 10;
    1b7a:	ca 01       	movw	r24, r20
    1b7c:	b9 01       	movw	r22, r18
    1b7e:	a5 01       	movw	r20, r10
    1b80:	94 01       	movw	r18, r8
    1b82:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
    1b86:	0f 5f       	subi	r16, 0xFF	; 255
     lcd_data('3');
     lcd_fix2_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1b88:	07 3f       	cpi	r16, 0xF7	; 247
    1b8a:	bc f3       	brlt	.-18     	; 0x1b7a <AutoCheck+0x34e>
    1b8c:	00 93 87 01 	sts	0x0187, r16
    1b90:	20 93 75 01 	sts	0x0175, r18
    1b94:	f7 01       	movw	r30, r14
    1b96:	31 83       	std	Z+1, r19	; 0x01
    1b98:	42 83       	std	Z+2, r20	; 0x02
    1b9a:	53 83       	std	Z+3, r21	; 0x03
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000) &&
    1b9c:	07 3f       	cpi	r16, 0xF7	; 247
    1b9e:	09 f0       	breq	.+2      	; 0x1ba2 <AutoCheck+0x376>
    1ba0:	c0 c0       	rjmp	.+384    	; 0x1d22 <AutoCheck+0x4f6>
    1ba2:	20 36       	cpi	r18, 0x60	; 96
    1ba4:	31 05       	cpc	r19, r1
    1ba6:	41 05       	cpc	r20, r1
    1ba8:	51 05       	cpc	r21, r1
    1baa:	08 f4       	brcc	.+2      	; 0x1bae <AutoCheck+0x382>
    1bac:	ba c0       	rjmp	.+372    	; 0x1d22 <AutoCheck+0x4f6>
    1bae:	20 3f       	cpi	r18, 0xF0	; 240
    1bb0:	f5 e5       	ldi	r31, 0x55	; 85
    1bb2:	3f 07       	cpc	r19, r31
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	4f 07       	cpc	r20, r31
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	5f 07       	cpc	r21, r31
    1bbc:	08 f0       	brcs	.+2      	; 0x1bc0 <AutoCheck+0x394>
    1bbe:	b1 c0       	rjmp	.+354    	; 0x1d22 <AutoCheck+0x4f6>
         (load_diff > -150) && (load_diff < 150)) {
    1bc0:	60 91 89 01 	lds	r22, 0x0189
    1bc4:	70 91 8a 01 	lds	r23, 0x018A
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000) &&
    1bc8:	2f ef       	ldi	r18, 0xFF	; 255
    1bca:	6b 36       	cpi	r22, 0x6B	; 107
    1bcc:	72 07       	cpc	r23, r18
    1bce:	0c f4       	brge	.+2      	; 0x1bd2 <AutoCheck+0x3a6>
    1bd0:	a8 c0       	rjmp	.+336    	; 0x1d22 <AutoCheck+0x4f6>
         (load_diff > -150) && (load_diff < 150)) {
    1bd2:	66 39       	cpi	r22, 0x96	; 150
    1bd4:	71 05       	cpc	r23, r1
    1bd6:	0c f0       	brlt	.+2      	; 0x1bda <AutoCheck+0x3ae>
    1bd8:	a4 c0       	rjmp	.+328    	; 0x1d22 <AutoCheck+0x4f6>
        cap_found++;
    1bda:	1f 5f       	subi	r17, 0xFF	; 255
     } else {
        cap_found = 0;		// wait for stable connection
     }
     if (cap_found > 1) {
    1bdc:	12 30       	cpi	r17, 0x02	; 2
    1bde:	09 f0       	breq	.+2      	; 0x1be2 <AutoCheck+0x3b6>
    1be0:	a1 c0       	rjmp	.+322    	; 0x1d24 <AutoCheck+0x4f8>
        // value of capacitor is correct
        (void) eeprom_write_word((uint16_t *)(&ref_offset), load_diff);	// hold zero offset + slew rate dependend offset
    1be2:	8a e9       	ldi	r24, 0x9A	; 154
    1be4:	91 e0       	ldi	r25, 0x01	; 1
    1be6:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__eewr_word_m168>
        lcd_clear();
    1bea:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
        lcd_fix2_string(REF_C_str);	// "REF_C="
    1bee:	82 ef       	ldi	r24, 0xF2	; 242
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
        lcd_string(itoa(load_diff, outval, 10));	//output REF_C_KORR
    1bf6:	80 91 89 01 	lds	r24, 0x0189
    1bfa:	90 91 8a 01 	lds	r25, 0x018A
    1bfe:	6c e0       	ldi	r22, 0x0C	; 12
    1c00:	71 e0       	ldi	r23, 0x01	; 1
    1c02:	4a e0       	ldi	r20, 0x0A	; 10
    1c04:	50 e0       	ldi	r21, 0x00	; 0
    1c06:	0e 94 2b 1f 	call	0x3e56	; 0x3e56 <itoa>
    1c0a:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_string>
        wait_about1s();
        }
//#######################################
#endif
  #ifdef AUTOSCALE_ADC
        ADC_PORT =  TXD_VAL;	//ADC-Port 1 to GND
    1c0e:	88 e0       	ldi	r24, 0x08	; 8
    1c10:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    1c12:	89 e0       	ldi	r24, 0x09	; 9
    1c14:	87 b9       	out	0x07, r24	; 7
        R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1c16:	80 e2       	ldi	r24, 0x20	; 32
    1c18:	84 b9       	out	0x04, r24	; 4
        do {
           adcmv[0] = ReadADC(TP3);
    1c1a:	82 e0       	ldi	r24, 0x02	; 2
    1c1c:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
        } while (adcmv[0] > 980);
    1c20:	e3 e0       	ldi	r30, 0x03	; 3
    1c22:	85 3d       	cpi	r24, 0xD5	; 213
    1c24:	9e 07       	cpc	r25, r30
    1c26:	cc f7       	brge	.-14     	; 0x1c1a <AutoCheck+0x3ee>
        R_DDR = 0;		//all Pins to input 
    1c28:	14 b8       	out	0x04, r1	; 4
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1c2a:	10 92 3f 01 	sts	0x013F, r1
    1c2e:	10 92 3e 01 	sts	0x013E, r1
        adcmv[0] = ReadADC(TP3);  // get cap voltage with VCC reference
    1c32:	82 e0       	ldi	r24, 0x02	; 2
    1c34:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
    1c38:	4c 01       	movw	r8, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1c3a:	82 e9       	ldi	r24, 0x92	; 146
    1c3c:	91 e0       	ldi	r25, 0x01	; 1
    1c3e:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <__eerd_byte_m168>
    1c42:	99 27       	eor	r25, r25
    1c44:	87 fd       	sbrc	r24, 7
    1c46:	90 95       	com	r25
    1c48:	20 91 44 01 	lds	r18, 0x0144
    1c4c:	30 91 45 01 	lds	r19, 0x0145
    1c50:	82 0f       	add	r24, r18
    1c52:	93 1f       	adc	r25, r19
    1c54:	90 93 3f 01 	sts	0x013F, r25
    1c58:	80 93 3e 01 	sts	0x013E, r24
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
    1c5c:	82 e0       	ldi	r24, 0x02	; 2
    1c5e:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
    1c62:	5c 01       	movw	r10, r24
        adcmv[1] += adcmv[1];		// double the value
    1c64:	aa 0c       	add	r10, r10
    1c66:	bb 1c       	adc	r11, r11
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1c68:	10 92 3f 01 	sts	0x013F, r1
    1c6c:	10 92 3e 01 	sts	0x013E, r1
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
    1c70:	82 e0       	ldi	r24, 0x02	; 2
    1c72:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
    1c76:	6c 01       	movw	r12, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1c78:	00 91 44 01 	lds	r16, 0x0144
    1c7c:	10 91 45 01 	lds	r17, 0x0145
    1c80:	82 e9       	ldi	r24, 0x92	; 146
    1c82:	91 e0       	ldi	r25, 0x01	; 1
    1c84:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <__eerd_byte_m168>
    1c88:	99 27       	eor	r25, r25
    1c8a:	87 fd       	sbrc	r24, 7
    1c8c:	90 95       	com	r25
    1c8e:	80 0f       	add	r24, r16
    1c90:	91 1f       	adc	r25, r17
    1c92:	90 93 3f 01 	sts	0x013F, r25
    1c96:	80 93 3e 01 	sts	0x013E, r24
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1])) * ADC_internal_reference / adcmv[1])+REF_R_KORR;
    1c9a:	82 e9       	ldi	r24, 0x92	; 146
    1c9c:	91 e0       	ldi	r25, 0x01	; 1
    1c9e:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <__eerd_byte_m168>
    1ca2:	f8 2e       	mov	r15, r24
        lcd_line2();
    1ca4:	80 ec       	ldi	r24, 0xC0	; 192
    1ca6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
        lcd_fix2_string(REF_R_str);	// "REF_R="
    1caa:	89 ef       	ldi	r24, 0xF9	; 249
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1cb2:	82 e9       	ldi	r24, 0x92	; 146
    1cb4:	91 e0       	ldi	r25, 0x01	; 1
    1cb6:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <__eerd_byte_m168>
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
        adcmv[1] += adcmv[1];		// double the value
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
        ADCconfig.U_Bandgap = ADC_internal_reference;
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1])) * ADC_internal_reference / adcmv[1])+REF_R_KORR;
    1cba:	b3 e0       	ldi	r27, 0x03	; 3
    1cbc:	eb 2e       	mov	r14, r27
    1cbe:	e8 0e       	add	r14, r24
    1cc0:	c8 0c       	add	r12, r8
    1cc2:	d9 1c       	adc	r13, r9
    1cc4:	ca 18       	sub	r12, r10
    1cc6:	db 08       	sbc	r13, r11
    1cc8:	b6 01       	movw	r22, r12
    1cca:	88 27       	eor	r24, r24
    1ccc:	77 fd       	sbrc	r23, 7
    1cce:	80 95       	com	r24
    1cd0:	98 2f       	mov	r25, r24
    1cd2:	2f 2d       	mov	r18, r15
    1cd4:	33 27       	eor	r19, r19
    1cd6:	27 fd       	sbrc	r18, 7
    1cd8:	30 95       	com	r19
    1cda:	20 0f       	add	r18, r16
    1cdc:	31 1f       	adc	r19, r17
    1cde:	40 e0       	ldi	r20, 0x00	; 0
    1ce0:	50 e0       	ldi	r21, 0x00	; 0
    1ce2:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
    1ce6:	95 01       	movw	r18, r10
    1ce8:	44 27       	eor	r20, r20
    1cea:	37 fd       	sbrc	r19, 7
    1cec:	40 95       	com	r20
    1cee:	54 2f       	mov	r21, r20
    1cf0:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <__divmodsi4>
        lcd_line2();
        lcd_fix2_string(REF_R_str);	// "REF_R="
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1cf4:	e2 0e       	add	r14, r18
        (void) eeprom_write_byte((uint8_t *)(&RefDiff), (uint8_t)udiff2);	// hold offset for true reference Voltage
    1cf6:	82 e9       	ldi	r24, 0x92	; 146
    1cf8:	91 e0       	ldi	r25, 0x01	; 1
    1cfa:	6e 2d       	mov	r22, r14
    1cfc:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__eewr_byte_m168>
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
    1d00:	8e 2d       	mov	r24, r14
    1d02:	99 27       	eor	r25, r25
    1d04:	87 fd       	sbrc	r24, 7
    1d06:	90 95       	com	r25
    1d08:	6c e0       	ldi	r22, 0x0C	; 12
    1d0a:	71 e0       	ldi	r23, 0x01	; 1
    1d0c:	4a e0       	ldi	r20, 0x0A	; 10
    1d0e:	50 e0       	ldi	r21, 0x00	; 0
    1d10:	0e 94 2b 1f 	call	0x3e56	; 0x3e56 <itoa>
    1d14:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_string>
  #endif
        wait_about4s();
    1d18:	80 e2       	ldi	r24, 0x20	; 32
    1d1a:	93 e0       	ldi	r25, 0x03	; 3
    1d1c:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
        break;
    1d20:	1b c0       	rjmp	.+54     	; 0x1d58 <AutoCheck+0x52c>
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000) &&
         (load_diff > -150) && (load_diff < 150)) {
    1d22:	10 e0       	ldi	r17, 0x00	; 0
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
  #endif
        wait_about4s();
        break;
     }
     lcd_line2();
    1d24:	80 ec       	ldi	r24, 0xC0	; 192
    1d26:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     DisplayValue(cap.cval,cap.cpre,'F',4);
    1d2a:	60 91 75 01 	lds	r22, 0x0175
    1d2e:	70 91 76 01 	lds	r23, 0x0176
    1d32:	80 91 77 01 	lds	r24, 0x0177
    1d36:	90 91 78 01 	lds	r25, 0x0178
    1d3a:	40 91 87 01 	lds	r20, 0x0187
    1d3e:	26 e4       	ldi	r18, 0x46	; 70
    1d40:	04 e0       	ldi	r16, 0x04	; 4
    1d42:	0e 94 8d 02 	call	0x51a	; 0x51a <DisplayValue>
     wait_about200ms();			// wait additional time
    1d46:	88 e2       	ldi	r24, 0x28	; 40
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
 wait_about2s();		//wait 2 seconds
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
    1d4e:	c3 94       	inc	r12
    1d50:	fc 2d       	mov	r31, r12
    1d52:	f0 34       	cpi	r31, 0x40	; 64
    1d54:	09 f0       	breq	.+2      	; 0x1d58 <AutoCheck+0x52c>
    1d56:	f0 ce       	rjmp	.-544    	; 0x1b38 <AutoCheck+0x30c>
     wait_about200ms();			// wait additional time
  } // end for ww
 #endif


  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    1d58:	89 e1       	ldi	r24, 0x19	; 25
    1d5a:	80 93 3c 01 	sts	0x013C, r24
  lcd_clear();
    1d5e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  lcd_fix2_string(VERSION_str);	//"Version ..."
    1d62:	88 ed       	ldi	r24, 0xD8	; 216
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
  lcd_line2();
    1d6a:	80 ec       	ldi	r24, 0xC0	; 192
    1d6c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_string(ATE);		//"Selftest End"
    1d70:	8b ed       	ldi	r24, 0xDB	; 219
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        // if key is pressed, don't repeat
        break;
     }
  }
 #endif
 PartFound = PART_NONE;
    1d78:	10 92 07 01 	sts	0x0107, r1
 wait_about1s();			//wait 1 seconds
    1d7c:	88 ec       	ldi	r24, 0xC8	; 200
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
 lcd_line2();
    1d84:	80 ec       	ldi	r24, 0xC0	; 192
    1d86:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
 lcd_clear_line();			// clear total line
    1d8a:	0e 94 85 02 	call	0x50a	; 0x50a <lcd_clear_line>
#endif
 } 
    1d8e:	2e 96       	adiw	r28, 0x0e	; 14
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	1f 91       	pop	r17
    1da0:	0f 91       	pop	r16
    1da2:	ff 90       	pop	r15
    1da4:	ef 90       	pop	r14
    1da6:	df 90       	pop	r13
    1da8:	cf 90       	pop	r12
    1daa:	bf 90       	pop	r11
    1dac:	af 90       	pop	r10
    1dae:	9f 90       	pop	r9
    1db0:	8f 90       	pop	r8
    1db2:	08 95       	ret

00001db4 <mark_as_uncalibrated>:
void mark_as_uncalibrated( void) {
 uint8_t ii;
 if (!UnCalibrated) {
    1db4:	80 91 47 01 	lds	r24, 0x0147
    1db8:	88 23       	and	r24, r24
    1dba:	69 f4       	brne	.+26     	; 0x1dd6 <mark_as_uncalibrated+0x22>
    // equipment has changed, zero capacity value is too high or zero resistance is too high
    ii = eeprom_read_byte((uint8_t *)&c_zero_tab[0]);	// read first zero offset
    1dbc:	8c e9       	ldi	r24, 0x9C	; 156
    1dbe:	91 e0       	ldi	r25, 0x01	; 1
    1dc0:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <__eerd_byte_m168>
    ii++;
    1dc4:	68 2f       	mov	r22, r24
    1dc6:	6f 5f       	subi	r22, 0xFF	; 255
    // make the unused c_zero_tab[3] different to c_zero_tab[0] to mark uncalibrated 
    eeprom_write_byte((uint8_t *)&c_zero_tab[3], ii);	// mark uncalibrated permanent
    1dc8:	8f e9       	ldi	r24, 0x9F	; 159
    1dca:	91 e0       	ldi	r25, 0x01	; 1
    1dcc:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__eewr_byte_m168>
    UnCalibrated = 1;
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	80 93 47 01 	sts	0x0147, r24
    1dd6:	08 95       	ret

00001dd8 <GetIr>:
/* Get residual current in reverse direction of a diode */ 



//=================================================================
void GetIr(uint8_t hipin, uint8_t lopin) {
    1dd8:	0f 93       	push	r16
    1dda:	cf 93       	push	r28
    1ddc:	df 93       	push	r29
  unsigned int ir_nano;
//  unsigned int ir_micro;
  uint8_t LoPinR_L;
  uint8_t HiADC;

  HiADC = pgm_read_byte(&PinADCtab[hipin]);
    1dde:	e8 2f       	mov	r30, r24
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	ed 5f       	subi	r30, 0xFD	; 253
    1de4:	fe 4f       	sbci	r31, 0xFE	; 254
    1de6:	e4 91       	lpm	r30, Z+
  ADC_PORT = HiADC | TXD_VAL;		// switch ADC port to high level
    1de8:	e8 60       	ori	r30, 0x08	; 8
    1dea:	e8 b9       	out	0x08, r30	; 8
  ADC_DDR = HiADC | TXD_MSK;		// switch High Pin direct to VCC
    1dec:	e7 b9       	out	0x07, r30	; 7
  LoPinR_L = pgm_read_byte(&PinRLtab[lopin]);  //R_L mask for LowPin R_L load
    1dee:	e6 2f       	mov	r30, r22
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	e0 50       	subi	r30, 0x00	; 0
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	e4 91       	lpm	r30, Z+
  R_PORT = 0;				// switch R-Port to GND
    1df8:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinR_L + LoPinR_L;		// switch R_H port for LowPin to output (GND)
    1dfa:	ee 0f       	add	r30, r30
    1dfc:	e4 b9       	out	0x04, r30	; 4
  u_res = W5msReadADC(lopin);		// read voltage
    1dfe:	86 2f       	mov	r24, r22
    1e00:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
    1e04:	ec 01       	movw	r28, r24
  if (u_res == 0) return;		// no Output, if no current in reverse direction
    1e06:	00 97       	sbiw	r24, 0x00	; 0
    1e08:	f9 f0       	breq	.+62     	; 0x1e48 <GetIr+0x70>
  lcd_fix_string(Ir_str);		// output text "  Ir="
    1e0a:	8a e3       	ldi	r24, 0x3A	; 58
    1e0c:	91 e0       	ldi	r25, 0x01	; 1
    1e0e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
#ifdef WITH_IRMICRO
  if (u_res < 2500) {
#endif
     /* R_H_VAL has units of 10 Ohm, u_res has units of mV, ir_nano has units of nA */
     ir_nano = (unsigned long)(u_res * 100000UL) / R_H_VAL;
    1e12:	be 01       	movw	r22, r28
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	20 ea       	ldi	r18, 0xA0	; 160
    1e1a:	36 e8       	ldi	r19, 0x86	; 134
    1e1c:	41 e0       	ldi	r20, 0x01	; 1
    1e1e:	50 e0       	ldi	r21, 0x00	; 0
    1e20:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
    1e24:	28 e9       	ldi	r18, 0x98	; 152
    1e26:	37 eb       	ldi	r19, 0xB7	; 183
    1e28:	40 e0       	ldi	r20, 0x00	; 0
    1e2a:	50 e0       	ldi	r21, 0x00	; 0
    1e2c:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
     DisplayValue(ir_nano,-9,'A',2);	// output two digits of current with nA units
    1e30:	b9 01       	movw	r22, r18
    1e32:	80 e0       	ldi	r24, 0x00	; 0
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	47 ef       	ldi	r20, 0xF7	; 247
    1e38:	21 e4       	ldi	r18, 0x41	; 65
    1e3a:	02 e0       	ldi	r16, 0x02	; 2
    1e3c:	0e 94 8d 02 	call	0x51a	; 0x51a <DisplayValue>
     /* RR680MI has units of 0.1 Ohm, u_res has units of mV, ir_micro has units of uA */
     ir_micro = (unsigned long)(u_res * 10000UL) / RR680MI;
     DisplayValue(ir_micro,-6,'A',2);	// output two digits of current in uA units
  }
#endif
  ADC_DDR = TXD_MSK;			// switch off
    1e40:	88 e0       	ldi	r24, 0x08	; 8
    1e42:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;			// switch off
    1e44:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;				// switch off current
    1e46:	14 b8       	out	0x04, r1	; 4

  return ;
}
    1e48:	df 91       	pop	r29
    1e4a:	cf 91       	pop	r28
    1e4c:	0f 91       	pop	r16
    1e4e:	08 95       	ret

00001e50 <main>:
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
  EMPTY_INTERRUPT(ADC_vect);
#endif

//begin of transistortester program
int main(void) {
    1e50:	8f 92       	push	r8
    1e52:	9f 92       	push	r9
    1e54:	bf 92       	push	r11
    1e56:	cf 92       	push	r12
    1e58:	df 92       	push	r13
    1e5a:	ef 92       	push	r14
    1e5c:	ff 92       	push	r15
    1e5e:	0f 93       	push	r16
    1e60:	1f 93       	push	r17
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	0f 92       	push	r0
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
#ifdef SEARCH_PARASITIC
  unsigned long n_cval;		// capacitor value of NPN B-E diode, for deselecting the parasitic Transistor
  int8_t n_cpre;		// capacitor prefix of NPN B-E diode
#endif
  //switch on
  ON_DDR = (1<<ON_PIN);			// switch to output
    1e6c:	80 e4       	ldi	r24, 0x40	; 64
    1e6e:	8a b9       	out	0x0a, r24	; 10
#ifdef PULLUP_DISABLE
  ON_PORT = (1<<ON_PIN); 		// switch power on 
    1e70:	8b b9       	out	0x0b, r24	; 11
#else
  ON_PORT = (1<<ON_PIN)|(1<<RST_PIN); 	// switch power on , enable internal Pullup for Start-Pin
#endif
  uint8_t tmp;
  //ADC-Init
  ADCSRA = (1<<ADEN) | AUTO_CLOCK_DIV;	//prescaler=8 or 64 (if 8Mhz clock)
    1e72:	86 e8       	ldi	r24, 0x86	; 134
    1e74:	80 93 7a 00 	sts	0x007A, r24
// #define WDRF_HOME MCU_STATUS_REG
 #define WDRF_HOME MCUCSR
#else
 #define WDRF_HOME MCUSR
#endif
  tmp = (WDRF_HOME & (1<<WDRF));	// save Watch Dog Flag
    1e78:	14 b7       	in	r17, 0x34	; 52
  WDRF_HOME &= ~(1<<WDRF);	 	//reset Watch Dog flag
    1e7a:	84 b7       	in	r24, 0x34	; 52
    1e7c:	87 7f       	andi	r24, 0xF7	; 247
    1e7e:	84 bf       	out	0x34, r24	; 52
  wdt_disable();			// disable Watch Dog
    1e80:	88 e1       	ldi	r24, 0x18	; 24
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	f8 94       	cli
    1e86:	80 93 60 00 	sts	0x0060, r24
    1e8a:	10 92 60 00 	sts	0x0060, r1
    1e8e:	0f be       	out	0x3f, r0	; 63
#ifndef INHIBIT_SLEEP_MODE
  // switch off unused Parts
  PRR = (1<<PRTWI) | (1<<PRTIM0) | (1<<PRSPI) | (1<<PRUSART0);
    1e90:	86 ea       	ldi	r24, 0xA6	; 166
    1e92:	80 93 64 00 	sts	0x0064, r24
  DIDR0 = (1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D);	
    1e96:	88 e3       	ldi	r24, 0x38	; 56
    1e98:	80 93 7e 00 	sts	0x007E, r24
  TCCR2A = (0<<WGM21) | (0<<WGM20);		// Counter 2 normal mode
    1e9c:	10 92 b0 00 	sts	0x00B0, r1
 #if F_CPU == 4000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (0<<CS20);	//prescaler 256, 64us @ 2MHz
  #define T2_PERIOD 64
 #endif 
 #if F_CPU >= 8000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (1<<CS20);	//prescaler 1024, 128us @ 8MHz, 64us @ 16MHz
    1ea0:	87 e0       	ldi	r24, 0x07	; 7
    1ea2:	80 93 b1 00 	sts	0x00B1, r24
  #define T2_PERIOD (1024 / (F_CPU / 1000000UL));	/* set to 128 or 64 us */
 #endif 
  sei();				// enable interrupts
    1ea6:	78 94       	sei
#endif
  lcd_init();				//initialize LCD
    1ea8:	0e 94 03 01 	call	0x206	; 0x206 <lcd_init>
	
//  ADC_PORT = TXD_VAL;
//  ADC_DDR = TXD_MSK;
  if(tmp) { 
    1eac:	13 ff       	sbrs	r17, 3
    1eae:	0a c0       	rjmp	.+20     	; 0x1ec4 <main+0x74>
     // check if  Watchdog-Event 
     // this happens, if the Watchdog is not reset for 2s
     // can happen, if any loop in the Program doen't finish.
     lcd_line1();
    1eb0:	80 e8       	ldi	r24, 0x80	; 128
    1eb2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     lcd_fix_string(TestTimedOut);	//Output Timeout
    1eb6:	83 eb       	ldi	r24, 0xB3	; 179
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     wait_about3s();				//wait for 3 s
    1ebe:	88 e5       	ldi	r24, 0x58	; 88
    1ec0:	92 e0       	ldi	r25, 0x02	; 2
    1ec2:	9c c0       	rjmp	.+312    	; 0x1ffc <main+0x1ac>
     ON_PORT = 0;			//shut off!
//     ON_DDR = (1<<ON_PIN);		//switch to GND
     return 0;
  }
  LCDLoadCustomChar(LCD_CHAR_DIODE1);	//Custom-Character Diode symbol
    1ec4:	88 e4       	ldi	r24, 0x48	; 72
    1ec6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_customchar(DiodeIcon1);	//load Character  >|
    1eca:	8a e6       	ldi	r24, 0x6A	; 106
    1ecc:	91 e0       	ldi	r25, 0x01	; 1
    1ece:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_DIODE2);	//Custom-Character 
    1ed2:	80 e5       	ldi	r24, 0x50	; 80
    1ed4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_customchar(DiodeIcon2);	//load Character  |<
    1ed8:	82 e7       	ldi	r24, 0x72	; 114
    1eda:	91 e0       	ldi	r25, 0x01	; 1
    1edc:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_CAP);	//Custom-Character  Capacitor symbol
    1ee0:	88 e5       	ldi	r24, 0x58	; 88
    1ee2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_customchar(CapIcon);		//load Character  ||
    1ee6:	8a e7       	ldi	r24, 0x7A	; 122
    1ee8:	91 e0       	ldi	r25, 0x01	; 1
    1eea:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS1);	//Custom-Character Resistor symbol
    1eee:	88 e7       	ldi	r24, 0x78	; 120
    1ef0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_customchar(ResIcon1);		//load Character  [
    1ef4:	82 e8       	ldi	r24, 0x82	; 130
    1ef6:	91 e0       	ldi	r25, 0x01	; 1
    1ef8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS2);	//Custom-Character 
    1efc:	80 e7       	ldi	r24, 0x70	; 112
    1efe:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_customchar(ResIcon2);		//load Character  ]
    1f02:	8a e8       	ldi	r24, 0x8A	; 138
    1f04:	91 e0       	ldi	r25, 0x01	; 1
    1f06:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
#endif
#ifdef PULLUP_DISABLE
 #ifdef __AVR_ATmega8__
  SFIOR = (1<<PUD);		// disable Pull-Up Resistors mega8
 #else
  MCUCR = (1<<PUD);		// disable Pull-Up Resistors mega168 family
    1f0a:	80 e1       	ldi	r24, 0x10	; 16
    1f0c:	85 bf       	out	0x35, r24	; 53
  }
#else
  #define display_time OFF_WAIT_TIME
#endif

  empty_count = 0;
    1f0e:	10 92 5b 01 	sts	0x015B, r1
  mess_count = 0;
    1f12:	10 92 0b 01 	sts	0x010B, r1
  lcd_line1();
#else
  lcd_clear();				// clear total display
#endif

  _trans = &ntrans;			// default transistor structure to show
    1f16:	5d e4       	ldi	r21, 0x4D	; 77
    1f18:	c5 2e       	mov	r12, r21
    1f1a:	51 e0       	ldi	r21, 0x01	; 1
    1f1c:	d5 2e       	mov	r13, r21
    goto end;
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    if(PartMode&1) {
       lcd_data('P');			//P-channel
       _trans = &ptrans;
    1f1e:	45 e6       	ldi	r20, 0x65	; 101
    1f20:	84 2e       	mov	r8, r20
    1f22:	41 e0       	ldi	r20, 0x01	; 1
    1f24:	94 2e       	mov	r9, r20
  mess_count = 0;

//*****************************************************************
//Entry: if start key is pressed before shut down
start:
  PartFound = PART_NONE;	// no part found
    1f26:	10 92 07 01 	sts	0x0107, r1
  NumOfDiodes = 0;		// Number of diodes = 0
    1f2a:	10 92 05 01 	sts	0x0105, r1
  ptrans.count = 0;		// Number of found P type transistors
    1f2e:	10 92 72 01 	sts	0x0172, r1
  ntrans.count = 0;		// Number of found N type transistors
    1f32:	10 92 5a 01 	sts	0x015A, r1
  PartMode = 0;
    1f36:	10 92 06 01 	sts	0x0106, r1
  WithReference = 0;		// no precision reference voltage
    1f3a:	10 92 4a 01 	sts	0x014A, r1
  lcd_clear();			// clear the LCD
    1f3e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  ADC_DDR = TXD_MSK;		//activate Software-UART 
    1f42:	88 e0       	ldi	r24, 0x08	; 8
    1f44:	87 b9       	out	0x07, r24	; 7
  ResistorsFound = 0;		// no resistors found
    1f46:	10 92 73 01 	sts	0x0173, r1
  cap.ca = 0;
    1f4a:	10 92 85 01 	sts	0x0185, r1
  cap.cb = 0;
    1f4e:	10 92 86 01 	sts	0x0186, r1
#ifdef WITH_UART
  uart_newline();		// start of new measurement
    1f52:	0e 94 df 00 	call	0x1be	; 0x1be <uart_newline>
#endif
  ADCconfig.RefFlag = 0;
    1f56:	10 92 3d 01 	sts	0x013D, r1
  Calibrate_UR();		// get Ref Voltages and Pin resistance
    1f5a:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <Calibrate_UR>
  lcd_line1();			// Cursor to 1. row, column 1
    1f5e:	80 e8       	ldi	r24, 0x80	; 128
    1f60:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  
  ADCconfig.U_Bandgap = ADC_internal_reference;	// set internal reference voltage for ADC
    1f64:	82 e9       	ldi	r24, 0x92	; 146
    1f66:	91 e0       	ldi	r25, 0x01	; 1
    1f68:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <__eerd_byte_m168>
    1f6c:	99 27       	eor	r25, r25
    1f6e:	87 fd       	sbrc	r24, 7
    1f70:	90 95       	com	r25
    1f72:	20 91 44 01 	lds	r18, 0x0144
    1f76:	30 91 45 01 	lds	r19, 0x0145
    1f7a:	82 0f       	add	r24, r18
    1f7c:	93 1f       	adc	r25, r19
    1f7e:	90 93 3f 01 	sts	0x013F, r25
    1f82:	80 93 3e 01 	sts	0x013E, r24

#ifdef BAT_CHECK
  // Battery check is selected
  ReadADC(TPBAT);	//Dummy-Readout
    1f86:	85 e0       	ldi	r24, 0x05	; 5
    1f88:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
  ptrans.uBE = W5msReadADC(TPBAT); 	//with 5V reference
    1f8c:	85 e0       	ldi	r24, 0x05	; 5
    1f8e:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
    1f92:	90 93 6a 01 	sts	0x016A, r25
    1f96:	80 93 69 01 	sts	0x0169, r24
  lcd_fix_string(Bat_str);		//output: "Bat. "
    1f9a:	84 ee       	ldi	r24, 0xE4	; 228
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
//  DisplayValue(cap.cval,-2,'V',2);		// Display 2 Digits of this 10mV units
#if BAT_NUMERATOR <= (0xffff/U_VCC)
  cap.cval = (ptrans.uBE*BAT_NUMERATOR)/BAT_DENOMINATOR + BAT_OUT;
#else
 #if (BAT_NUMERATOR == 133) && (BAT_DENOMINATOR == 33)
  cap.cval = (ptrans.uBE*4)+BAT_OUT;		// usually output only 2 digits
    1fa2:	60 91 69 01 	lds	r22, 0x0169
    1fa6:	70 91 6a 01 	lds	r23, 0x016A
    1faa:	66 0f       	add	r22, r22
    1fac:	77 1f       	adc	r23, r23
    1fae:	66 0f       	add	r22, r22
    1fb0:	77 1f       	adc	r23, r23
    1fb2:	6a 56       	subi	r22, 0x6A	; 106
    1fb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	60 93 75 01 	sts	0x0175, r22
    1fbe:	70 93 76 01 	sts	0x0176, r23
    1fc2:	80 93 77 01 	sts	0x0177, r24
    1fc6:	90 93 78 01 	sts	0x0178, r25
 #else
  cap.cval = ((unsigned long)ptrans.uBE*BAT_NUMERATOR)/BAT_DENOMINATOR + BAT_OUT;
 #endif
#endif
  DisplayValue(cap.cval,-3,'V',2);		// Display 2 Digits of this 10mV units
    1fca:	4d ef       	ldi	r20, 0xFD	; 253
    1fcc:	26 e5       	ldi	r18, 0x56	; 86
    1fce:	02 e0       	ldi	r16, 0x02	; 2
    1fd0:	0e 94 8d 02 	call	0x51a	; 0x51a <DisplayValue>
  lcd_space();
    1fd4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>
  // less than 1.3 V only .1V difference to Warn-Level
  #define WARN_LEVEL (((unsigned long)(BAT_POOR+100)*(unsigned long)BAT_DENOMINATOR)/BAT_NUMERATOR)
 #endif
 #define POOR_LEVEL (((unsigned long)(BAT_POOR)*(unsigned long)BAT_DENOMINATOR)/BAT_NUMERATOR)
  // check the battery voltage
  if (ptrans.uBE <  WARN_LEVEL) {
    1fd8:	80 91 69 01 	lds	r24, 0x0169
    1fdc:	90 91 6a 01 	lds	r25, 0x016A
    1fe0:	26 e0       	ldi	r18, 0x06	; 6
    1fe2:	8a 3f       	cpi	r24, 0xFA	; 250
    1fe4:	92 07       	cpc	r25, r18
    1fe6:	88 f4       	brcc	.+34     	; 0x200a <main+0x1ba>
     //Vcc < 7,3V; show Warning 
     if(ptrans.uBE < POOR_LEVEL) {	
    1fe8:	e6 e0       	ldi	r30, 0x06	; 6
    1fea:	83 33       	cpi	r24, 0x33	; 51
    1fec:	9e 07       	cpc	r25, r30
    1fee:	50 f4       	brcc	.+20     	; 0x2004 <main+0x1b4>
        //Vcc <6,3V; no proper operation is possible
        lcd_fix_string(BatEmpty);	//Battery empty!
    1ff0:	8a e6       	ldi	r24, 0x6A	; 106
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        wait_about2s();
    1ff8:	80 e9       	ldi	r24, 0x90	; 144
    1ffa:	91 e0       	ldi	r25, 0x01	; 1
    1ffc:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
        PORTD = 0;			//switch power off
    2000:	1b b8       	out	0x0b, r1	; 11
        return 0;
    2002:	11 c4       	rjmp	.+2082   	; 0x2826 <main+0x9d6>
     }
     lcd_fix_string(BatWeak);		//Battery weak
    2004:	85 e6       	ldi	r24, 0x65	; 101
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	02 c0       	rjmp	.+4      	; 0x200e <main+0x1be>
  } else { // Battery-voltage OK
     lcd_fix_string(OK_str); 		// "OK"
    200a:	8a ee       	ldi	r24, 0xEA	; 234
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  }
#else
  lcd_fix2_string(VERSION_str);		// if no Battery check, Version .. in row 1
#endif
#ifdef WDT_enabled
  wdt_enable(WDTO_2S);		//Watchdog on
    2012:	2f e0       	ldi	r18, 0x0F	; 15
    2014:	88 e1       	ldi	r24, 0x18	; 24
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	a8 95       	wdr
    201e:	80 93 60 00 	sts	0x0060, r24
    2022:	0f be       	out	0x3f, r0	; 63
    2024:	20 93 60 00 	sts	0x0060, r18
#endif

//  wait_about1s();			// add more time for reading batterie voltage
  // begin tests
#ifdef AUTO_RH
  RefVoltage();			//compute RHmultip = f(reference voltage)
    2028:	0e 94 43 02 	call	0x486	; 0x486 <RefVoltage>
#endif
#if FLASHEND > 0x1fff
  if (WithReference) {
    202c:	80 91 4a 01 	lds	r24, 0x014A
    2030:	88 23       	and	r24, r24
    2032:	f1 f0       	breq	.+60     	; 0x2070 <main+0x220>
     /* 2.5V precision reference is checked OK */
     if ((mess_count == 0) && (empty_count == 0)) {
    2034:	80 91 0b 01 	lds	r24, 0x010B
    2038:	88 23       	and	r24, r24
    203a:	d1 f4       	brne	.+52     	; 0x2070 <main+0x220>
    203c:	80 91 5b 01 	lds	r24, 0x015B
    2040:	88 23       	and	r24, r24
    2042:	b1 f4       	brne	.+44     	; 0x2070 <main+0x220>
         /* display VCC= only first time */
         lcd_line2();
    2044:	80 ec       	ldi	r24, 0xC0	; 192
    2046:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
         lcd_fix_string(VCC_str);		// VCC=
    204a:	84 e2       	ldi	r24, 0x24	; 36
    204c:	91 e0       	ldi	r25, 0x01	; 1
    204e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
         DisplayValue(ADCconfig.U_AVCC,-3,'V',3);	// Display 3 Digits of this mV units
    2052:	60 91 40 01 	lds	r22, 0x0140
    2056:	70 91 41 01 	lds	r23, 0x0141
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	4d ef       	ldi	r20, 0xFD	; 253
    2060:	26 e5       	ldi	r18, 0x56	; 86
    2062:	03 e0       	ldi	r16, 0x03	; 3
    2064:	0e 94 8d 02 	call	0x51a	; 0x51a <DisplayValue>
         wait_about1s();
    2068:	88 ec       	ldi	r24, 0xC8	; 200
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
     wait_about300ms();
  }
#endif

#ifndef DebugOut
  lcd_line2();			//LCD position row 2, column 1
    2070:	80 ec       	ldi	r24, 0xC0	; 192
    2072:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
#endif
  EntladePins();		// discharge all capacitors!
    2076:	0e 94 ad 01 	call	0x35a	; 0x35a <EntladePins>
  if(PartFound == PART_CELL) {
    207a:	80 91 07 01 	lds	r24, 0x0107
    207e:	88 30       	cpi	r24, 0x08	; 8
    2080:	39 f4       	brne	.+14     	; 0x2090 <main+0x240>
    lcd_clear();
    2082:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
    lcd_fix_string(Cell_str);	// display "Cell!"
    2086:	8e e1       	ldi	r24, 0x1E	; 30
    2088:	91 e0       	ldi	r25, 0x01	; 1
    208a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    lcd_space();
    DisplayValue(cell_mv[1],-3,'V',3);
    lcd_space();
    DisplayValue(cell_mv[2],-3,'V',3);
#endif
    goto end;
    208e:	b4 c3       	rjmp	.+1896   	; 0x27f8 <main+0x9a8>
  }

#ifdef CHECK_CALL
  AutoCheck();			//check, if selftest should be done
    2090:	0e 94 16 0c 	call	0x182c	; 0x182c <AutoCheck>
  lcd_line2();			//LCD position row2, column 1
    2094:	80 ec       	ldi	r24, 0xC0	; 192
    2096:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  UnCalibrated = 0;
    209a:	10 92 47 01 	sts	0x0147, r1
  if (eeprom_read_byte(&c_zero_tab[0]) != eeprom_read_byte(&c_zero_tab[3])) {
    209e:	8c e9       	ldi	r24, 0x9C	; 156
    20a0:	91 e0       	ldi	r25, 0x01	; 1
    20a2:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <__eerd_byte_m168>
    20a6:	18 2f       	mov	r17, r24
    20a8:	8f e9       	ldi	r24, 0x9F	; 159
    20aa:	91 e0       	ldi	r25, 0x01	; 1
    20ac:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <__eerd_byte_m168>
    20b0:	18 17       	cp	r17, r24
    20b2:	31 f0       	breq	.+12     	; 0x20c0 <main+0x270>
     // if calibrated, both c_zero_tab values are identical! c_zero_tab[3] is not used otherwise
     UnCalibrated = 1;
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	80 93 47 01 	sts	0x0147, r24
     lcd_data('!');
    20ba:	81 e2       	ldi	r24, 0x21	; 33
    20bc:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
  }
#else
  lcd_line2();			//LCD position row2, column 1
#endif
  lcd_fix_string(TestRunning);		//String: testing...
    20c0:	8a e5       	ldi	r24, 0x5A	; 90
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     
  // check all 6 combinations for the 3 pins 
//         High  Low  Tri
  CheckPins(TP1, TP2, TP3);
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	61 e0       	ldi	r22, 0x01	; 1
    20cc:	42 e0       	ldi	r20, 0x02	; 2
    20ce:	0e 94 27 04 	call	0x84e	; 0x84e <CheckPins>
  CheckPins(TP2, TP1, TP3);
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	60 e0       	ldi	r22, 0x00	; 0
    20d6:	42 e0       	ldi	r20, 0x02	; 2
    20d8:	0e 94 27 04 	call	0x84e	; 0x84e <CheckPins>

  CheckPins(TP1, TP3, TP2);
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	62 e0       	ldi	r22, 0x02	; 2
    20e0:	41 e0       	ldi	r20, 0x01	; 1
    20e2:	0e 94 27 04 	call	0x84e	; 0x84e <CheckPins>
  CheckPins(TP3, TP1, TP2);
    20e6:	82 e0       	ldi	r24, 0x02	; 2
    20e8:	60 e0       	ldi	r22, 0x00	; 0
    20ea:	41 e0       	ldi	r20, 0x01	; 1
    20ec:	0e 94 27 04 	call	0x84e	; 0x84e <CheckPins>

  CheckPins(TP2, TP3, TP1);
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	62 e0       	ldi	r22, 0x02	; 2
    20f4:	40 e0       	ldi	r20, 0x00	; 0
    20f6:	0e 94 27 04 	call	0x84e	; 0x84e <CheckPins>
  CheckPins(TP3, TP2, TP1);
    20fa:	82 e0       	ldi	r24, 0x02	; 2
    20fc:	61 e0       	ldi	r22, 0x01	; 1
    20fe:	40 e0       	ldi	r20, 0x00	; 0
    2100:	0e 94 27 04 	call	0x84e	; 0x84e <CheckPins>
  
  // Capacity measurement is only possible correctly with two Pins connected.
  // A third connected pin will increase the capacity value!
//  if(((PartFound == PART_NONE) || (PartFound == PART_RESISTOR) || (PartFound == PART_DIODE)) ) {
  if(PartFound == PART_NONE) {
    2104:	80 91 07 01 	lds	r24, 0x0107
    2108:	88 23       	and	r24, r24
    210a:	e1 f4       	brne	.+56     	; 0x2144 <main+0x2f4>
     // If no part is found yet, check separate if is is a capacitor
#if FLASHEND > 0x1fff
     lcd_data('C');
    210c:	83 e4       	ldi	r24, 0x43	; 67
    210e:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
#endif
     EntladePins();		// discharge capacities
    2112:	0e 94 ad 01 	call	0x35a	; 0x35a <EntladePins>
     //measurement of capacities in all 3 combinations
     cap.cval_max = 0;		// set max to zero
    2116:	10 92 79 01 	sts	0x0179, r1
    211a:	10 92 7a 01 	sts	0x017A, r1
    211e:	10 92 7b 01 	sts	0x017B, r1
    2122:	10 92 7c 01 	sts	0x017C, r1
     cap.cpre_max = -12;	// set max to pF unit
    2126:	84 ef       	ldi	r24, 0xF4	; 244
    2128:	80 93 88 01 	sts	0x0188, r24
     ReadCapacity(TP3, TP1);
    212c:	82 e0       	ldi	r24, 0x02	; 2
    212e:	60 e0       	ldi	r22, 0x00	; 0
    2130:	0e 94 f7 14 	call	0x29ee	; 0x29ee <ReadCapacity>
#if DebugOut != 10
     ReadCapacity(TP3, TP2);
    2134:	82 e0       	ldi	r24, 0x02	; 2
    2136:	61 e0       	ldi	r22, 0x01	; 1
    2138:	0e 94 f7 14 	call	0x29ee	; 0x29ee <ReadCapacity>
     ReadCapacity(TP2, TP1);
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	60 e0       	ldi	r22, 0x00	; 0
    2140:	0e 94 f7 14 	call	0x29ee	; 0x29ee <ReadCapacity>
  lcd_line2();
  lcd_line1();
  lcd_clear_line();
  lcd_line1();
#else
  lcd_clear();				// clear total display
    2144:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
#endif

  _trans = &ntrans;			// default transistor structure to show
    2148:	d0 92 4c 01 	sts	0x014C, r13
    214c:	c0 92 4b 01 	sts	0x014B, r12
  if(PartFound == PART_DIODE) {
    2150:	10 91 07 01 	lds	r17, 0x0107
    2154:	11 30       	cpi	r17, 0x01	; 1
    2156:	09 f0       	breq	.+2      	; 0x215a <main+0x30a>
    2158:	c7 c0       	rjmp	.+398    	; 0x22e8 <main+0x498>
     if(NumOfDiodes == 1) {		//single Diode
    215a:	80 91 05 01 	lds	r24, 0x0105
    215e:	81 30       	cpi	r24, 0x01	; 1
    2160:	d1 f5       	brne	.+116    	; 0x21d6 <main+0x386>
           lcd_fix_string(KatAn);	//"-|<-"
           lcd_testpin(diodes[0].Anode);
        }
 #else
        // the higher test pin number is right side
        if (diodes[0].Anode < diodes[0].Cathode) {
    2162:	90 91 8b 01 	lds	r25, 0x018B
    2166:	80 91 8c 01 	lds	r24, 0x018C
    216a:	98 17       	cp	r25, r24
    216c:	50 f4       	brcc	.+20     	; 0x2182 <main+0x332>
           lcd_testpin(diodes[0].Anode);
    216e:	89 2f       	mov	r24, r25
    2170:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2174:	80 e4       	ldi	r24, 0x40	; 64
    2176:	91 e0       	ldi	r25, 0x01	; 1
    2178:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[0].Cathode);
    217c:	80 91 8c 01 	lds	r24, 0x018C
    2180:	08 c0       	rjmp	.+16     	; 0x2192 <main+0x342>
        } else {
           lcd_testpin(diodes[0].Cathode);
    2182:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    2186:	84 e4       	ldi	r24, 0x44	; 68
    2188:	91 e0       	ldi	r25, 0x01	; 1
    218a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    218e:	80 91 8b 01 	lds	r24, 0x018B
    2192:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
        lcd_testpin(diodes[0].Anode);
        lcd_fix_string(AnKat);		//"->|-"
        lcd_testpin(diodes[0].Cathode);
#endif
#if FLASHEND > 0x1fff
	GetIr(diodes[0].Cathode,diodes[0].Anode);
    2196:	80 91 8c 01 	lds	r24, 0x018C
    219a:	60 91 8b 01 	lds	r22, 0x018B
    219e:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <GetIr>
#endif
        UfAusgabe(0x70);
    21a2:	80 e7       	ldi	r24, 0x70	; 112
    21a4:	0e 94 97 03 	call	0x72e	; 0x72e <UfAusgabe>
        /* load current of capacity is (5V-1.1V)/(470000 Ohm) = 8298nA */
        lcd_fix_string(GateCap_str);	//"C="
    21a8:	87 ef       	ldi	r24, 0xF7	; 247
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        ReadCapacity(diodes[0].Cathode,diodes[0].Anode);	// Capacity opposite flow direction
    21b0:	80 91 8c 01 	lds	r24, 0x018C
    21b4:	60 91 8b 01 	lds	r22, 0x018B
    21b8:	0e 94 f7 14 	call	0x29ee	; 0x29ee <ReadCapacity>
        DisplayValue(cap.cval,cap.cpre,'F',3);
    21bc:	60 91 75 01 	lds	r22, 0x0175
    21c0:	70 91 76 01 	lds	r23, 0x0176
    21c4:	80 91 77 01 	lds	r24, 0x0177
    21c8:	90 91 78 01 	lds	r25, 0x0178
    21cc:	40 91 87 01 	lds	r20, 0x0187
    21d0:	26 e4       	ldi	r18, 0x46	; 70
    21d2:	03 e0       	ldi	r16, 0x03	; 3
    21d4:	0f c3       	rjmp	.+1566   	; 0x27f4 <main+0x9a4>
        goto end;
     } else if(NumOfDiodes == 2) { // double diode
    21d6:	82 30       	cpi	r24, 0x02	; 2
    21d8:	09 f0       	breq	.+2      	; 0x21dc <main+0x38c>
    21da:	4a c0       	rjmp	.+148    	; 0x2270 <main+0x420>
        lcd_data('2');
    21dc:	82 e3       	ldi	r24, 0x32	; 50
    21de:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
        lcd_fix_string(Dioden);		//"diodes "
    21e2:	88 e4       	ldi	r24, 0x48	; 72
    21e4:	91 e0       	ldi	r25, 0x01	; 1
    21e6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        if(diodes[0].Anode == diodes[1].Anode) { //Common Anode
    21ea:	80 91 8b 01 	lds	r24, 0x018B
    21ee:	20 91 8f 01 	lds	r18, 0x018F
    21f2:	82 17       	cp	r24, r18
    21f4:	99 f4       	brne	.+38     	; 0x221c <main+0x3cc>
           lcd_testpin(diodes[0].Cathode);
    21f6:	80 91 8c 01 	lds	r24, 0x018C
    21fa:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    21fe:	84 e4       	ldi	r24, 0x44	; 68
    2200:	91 e0       	ldi	r25, 0x01	; 1
    2202:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    2206:	80 91 8b 01 	lds	r24, 0x018B
    220a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    220e:	80 e4       	ldi	r24, 0x40	; 64
    2210:	91 e0       	ldi	r25, 0x01	; 1
    2212:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[1].Cathode);
    2216:	80 91 90 01 	lds	r24, 0x0190
    221a:	16 c0       	rjmp	.+44     	; 0x2248 <main+0x3f8>
           UfAusgabe(0x01);
           goto end;
        } 
        if(diodes[0].Cathode == diodes[1].Cathode) { //Common Cathode
    221c:	30 91 8c 01 	lds	r19, 0x018C
    2220:	90 91 90 01 	lds	r25, 0x0190
    2224:	39 17       	cp	r19, r25
    2226:	b1 f4       	brne	.+44     	; 0x2254 <main+0x404>
           lcd_testpin(diodes[0].Anode);
    2228:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    222c:	80 e4       	ldi	r24, 0x40	; 64
    222e:	91 e0       	ldi	r25, 0x01	; 1
    2230:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
	   lcd_testpin(diodes[0].Cathode);
    2234:	80 91 8c 01 	lds	r24, 0x018C
    2238:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    223c:	84 e4       	ldi	r24, 0x44	; 68
    223e:	91 e0       	ldi	r25, 0x01	; 1
    2240:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[1].Anode);
    2244:	80 91 8f 01 	lds	r24, 0x018F
    2248:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           UfAusgabe(0x01);
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	0e 94 97 03 	call	0x72e	; 0x72e <UfAusgabe>
           goto end;
    2252:	d2 c2       	rjmp	.+1444   	; 0x27f8 <main+0x9a8>
//        else if ((diodes[0].Cathode == diodes[1].Anode) && (diodes[1].Cathode == diodes[0].Anode)) 
        } 
        if (diodes[0].Cathode == diodes[1].Anode) {
    2254:	32 17       	cp	r19, r18
    2256:	19 f4       	brne	.+6      	; 0x225e <main+0x40e>
           // normaly two serial diodes are detected as three diodes, but if the threshold is high
           // for both diodes, the third diode is not detected.
           // can also be Antiparallel
           diode_sequence = 0x01;	// 0 1
    2258:	10 93 02 01 	sts	0x0102, r17
    225c:	06 c0       	rjmp	.+12     	; 0x226a <main+0x41a>
           SerienDiodenAusgabe();
           goto end;
        } 
        if (diodes[1].Cathode == diodes[0].Anode) {
    225e:	98 17       	cp	r25, r24
    2260:	09 f0       	breq	.+2      	; 0x2264 <main+0x414>
    2262:	91 c2       	rjmp	.+1314   	; 0x2786 <main+0x936>
           diode_sequence = 0x10;	// 1 0
    2264:	80 e1       	ldi	r24, 0x10	; 16
    2266:	80 93 02 01 	sts	0x0102, r24
           SerienDiodenAusgabe();
    226a:	0e 94 ab 03 	call	0x756	; 0x756 <SerienDiodenAusgabe>
           goto end;
    226e:	c4 c2       	rjmp	.+1416   	; 0x27f8 <main+0x9a8>
        }
     } else if(NumOfDiodes == 3) {
    2270:	83 30       	cpi	r24, 0x03	; 3
    2272:	09 f0       	breq	.+2      	; 0x2276 <main+0x426>
    2274:	88 c2       	rjmp	.+1296   	; 0x2786 <main+0x936>
        //Serial of 2 Diodes; was detected as 3 Diodes 
        diode_sequence = 0x33;	// 3 3
    2276:	83 e3       	ldi	r24, 0x33	; 51
    2278:	80 93 02 01 	sts	0x0102, r24
        /* Check for any constallation of 2 serial diodes:
          Only once the pin No of anyone Cathode is identical of another anode.
          two diodes in series is additionally detected as third big diode.
        */
        if(diodes[0].Cathode == diodes[1].Anode)
    227c:	80 91 8c 01 	lds	r24, 0x018C
    2280:	90 91 8f 01 	lds	r25, 0x018F
    2284:	89 17       	cp	r24, r25
    2286:	11 f4       	brne	.+4      	; 0x228c <main+0x43c>
          {
           diode_sequence = 0x01;	// 0 1
    2288:	10 93 02 01 	sts	0x0102, r17
          }
        if(diodes[0].Anode == diodes[1].Cathode)
    228c:	40 91 8b 01 	lds	r20, 0x018B
    2290:	30 91 90 01 	lds	r19, 0x0190
    2294:	43 17       	cp	r20, r19
    2296:	19 f4       	brne	.+6      	; 0x229e <main+0x44e>
          {
           diode_sequence = 0x10;	// 1 0
    2298:	20 e1       	ldi	r18, 0x10	; 16
    229a:	20 93 02 01 	sts	0x0102, r18
          }
        if(diodes[0].Cathode == diodes[2].Anode)
    229e:	20 91 93 01 	lds	r18, 0x0193
    22a2:	82 17       	cp	r24, r18
    22a4:	19 f4       	brne	.+6      	; 0x22ac <main+0x45c>
          {
           diode_sequence = 0x02;	// 0 2
    22a6:	82 e0       	ldi	r24, 0x02	; 2
    22a8:	80 93 02 01 	sts	0x0102, r24
          }
        if(diodes[0].Anode == diodes[2].Cathode)
    22ac:	80 91 94 01 	lds	r24, 0x0194
    22b0:	48 17       	cp	r20, r24
    22b2:	19 f4       	brne	.+6      	; 0x22ba <main+0x46a>
          {
           diode_sequence = 0x20;	// 2 0
    22b4:	40 e2       	ldi	r20, 0x20	; 32
    22b6:	40 93 02 01 	sts	0x0102, r20
          }
        if(diodes[1].Cathode == diodes[2].Anode)
    22ba:	32 17       	cp	r19, r18
    22bc:	19 f4       	brne	.+6      	; 0x22c4 <main+0x474>
          {
           diode_sequence = 0x12;	// 1 2
    22be:	22 e1       	ldi	r18, 0x12	; 18
    22c0:	20 93 02 01 	sts	0x0102, r18
          }
        if(diodes[1].Anode == diodes[2].Cathode)
    22c4:	98 17       	cp	r25, r24
    22c6:	19 f4       	brne	.+6      	; 0x22ce <main+0x47e>
          {
           diode_sequence = 0x21;	// 2 1
    22c8:	81 e2       	ldi	r24, 0x21	; 33
    22ca:	80 93 02 01 	sts	0x0102, r24
        lcd_space();
        lcd_string(utoa(diodes[2].Voltage, outval, 10));
        lcd_line1();
#endif
//        if((ptrans.b<3) && (ptrans.c<3)) 
        if(diode_sequence < 0x22) {
    22ce:	80 91 02 01 	lds	r24, 0x0102
    22d2:	82 32       	cpi	r24, 0x22	; 34
    22d4:	08 f0       	brcs	.+2      	; 0x22d8 <main+0x488>
    22d6:	57 c2       	rjmp	.+1198   	; 0x2786 <main+0x936>
           lcd_data('3');
    22d8:	83 e3       	ldi	r24, 0x33	; 51
    22da:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
           lcd_fix_string(Dioden);	//"Diodes "
    22de:	88 e4       	ldi	r24, 0x48	; 72
    22e0:	91 e0       	ldi	r25, 0x01	; 1
    22e2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    22e6:	c1 cf       	rjmp	.-126    	; 0x226a <main+0x41a>
//           UfAusgabe( (diode_sequence);
           goto end;
        }
     }  // end (NumOfDiodes == 3)
     // end (PartFound == PART_DIODE)
  } else if (PartFound == PART_TRANSISTOR) {
    22e8:	12 30       	cpi	r17, 0x02	; 2
    22ea:	09 f0       	breq	.+2      	; 0x22ee <main+0x49e>
    22ec:	a9 c0       	rjmp	.+338    	; 0x2440 <main+0x5f0>
#ifdef SEARCH_PARASITIC
    if ((ptrans.count != 0) && (ntrans.count !=0)) {
    22ee:	80 91 72 01 	lds	r24, 0x0172
    22f2:	88 23       	and	r24, r24
    22f4:	99 f1       	breq	.+102    	; 0x235c <main+0x50c>
    22f6:	80 91 5a 01 	lds	r24, 0x015A
    22fa:	88 23       	and	r24, r24
    22fc:	79 f1       	breq	.+94     	; 0x235c <main+0x50c>
       // Special Handling of NPNp and PNPn Transistor.
       // If a protection diode is built on the same structur as the NPN-Transistor,
       // a parasitic PNP-Transistor will be detected. 
       ReadCapacity(ntrans.e, ntrans.b);	// read capacity of NPN base-emitter
    22fe:	80 91 59 01 	lds	r24, 0x0159
    2302:	60 91 57 01 	lds	r22, 0x0157
    2306:	0e 94 f7 14 	call	0x29ee	; 0x29ee <ReadCapacity>
       n_cval = cap.cval;			// save the found capacity value
    230a:	e0 90 75 01 	lds	r14, 0x0175
    230e:	f0 90 76 01 	lds	r15, 0x0176
    2312:	00 91 77 01 	lds	r16, 0x0177
    2316:	10 91 78 01 	lds	r17, 0x0178
       n_cpre  = cap.cpre;			// and dimension
    231a:	b0 90 87 01 	lds	r11, 0x0187
       ReadCapacity(ptrans.b, ptrans.e);	// read capacity of PNP base-emitter
    231e:	80 91 6f 01 	lds	r24, 0x016F
    2322:	60 91 71 01 	lds	r22, 0x0171
    2326:	0e 94 f7 14 	call	0x29ee	; 0x29ee <ReadCapacity>
       if (((n_cpre == cap.cpre) && (cap.cval > n_cval)) || (cap.cpre > n_cpre)){
    232a:	80 91 87 01 	lds	r24, 0x0187
    232e:	b8 16       	cp	r11, r24
    2330:	71 f4       	brne	.+28     	; 0x234e <main+0x4fe>
    2332:	80 91 75 01 	lds	r24, 0x0175
    2336:	90 91 76 01 	lds	r25, 0x0176
    233a:	a0 91 77 01 	lds	r26, 0x0177
    233e:	b0 91 78 01 	lds	r27, 0x0178
    2342:	e8 16       	cp	r14, r24
    2344:	f9 06       	cpc	r15, r25
    2346:	0a 07       	cpc	r16, r26
    2348:	1b 07       	cpc	r17, r27
    234a:	18 f0       	brcs	.+6      	; 0x2352 <main+0x502>
    234c:	04 c0       	rjmp	.+8      	; 0x2356 <main+0x506>
    234e:	b8 16       	cp	r11, r24
    2350:	14 f4       	brge	.+4      	; 0x2356 <main+0x506>
          // the capacity value or dimension of the PNP B-E is greater than the NPN B-E
          PartMode = PART_MODE_PNP;
    2352:	82 e0       	ldi	r24, 0x02	; 2
    2354:	01 c0       	rjmp	.+2      	; 0x2358 <main+0x508>
       } else {
          PartMode = PART_MODE_NPN;
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	80 93 06 01 	sts	0x0106, r24
       }
    }
#endif
#if FLASHEND > 0x1fff
    if(!(ON_PIN_REG & (1<<RST_PIN))) {
    235c:	4f 99       	sbic	0x09, 7	; 9
    235e:	09 c0       	rjmp	.+18     	; 0x2372 <main+0x522>
       // if the Start key is still pressed, use the other Transistor
       if (PartMode == PART_MODE_NPN) {
    2360:	80 91 06 01 	lds	r24, 0x0106
    2364:	81 30       	cpi	r24, 0x01	; 1
    2366:	11 f4       	brne	.+4      	; 0x236c <main+0x51c>
          PartMode = PART_MODE_PNP;	// switch to parasitic transistor
    2368:	82 e0       	ldi	r24, 0x02	; 2
    236a:	01 c0       	rjmp	.+2      	; 0x236e <main+0x51e>
       } else {
          PartMode = PART_MODE_NPN;	// switch to parasitic transistor
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	80 93 06 01 	sts	0x0106, r24
       }
    }
#endif

    if(PartMode == PART_MODE_NPN) {
    2372:	80 91 06 01 	lds	r24, 0x0106
    2376:	81 30       	cpi	r24, 0x01	; 1
    2378:	61 f4       	brne	.+24     	; 0x2392 <main+0x542>
       lcd_fix_string(NPN_str);		//"NPN "
    237a:	8d ef       	ldi	r24, 0xFD	; 253
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
#if FLASHEND > 0x1fff
       if (ptrans.count != 0) {
    2382:	80 91 72 01 	lds	r24, 0x0172
    2386:	88 23       	and	r24, r24
    2388:	99 f0       	breq	.+38     	; 0x23b0 <main+0x560>
          lcd_data('p');		// mark for parasitic PNp
    238a:	80 e7       	ldi	r24, 0x70	; 112
    238c:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
    2390:	0f c0       	rjmp	.+30     	; 0x23b0 <main+0x560>
       }
#endif
//       _trans = &ntrans;  is allready selected a default
    } else {
       lcd_fix_string(PNP_str);		//"PNP "
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	91 e0       	ldi	r25, 0x01	; 1
    2396:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
#if FLASHEND > 0x1fff
       if (ntrans.count != 0) {
    239a:	80 91 5a 01 	lds	r24, 0x015A
    239e:	88 23       	and	r24, r24
    23a0:	19 f0       	breq	.+6      	; 0x23a8 <main+0x558>
          lcd_data('n');		// mark for parasitic NPn
    23a2:	8e e6       	ldi	r24, 0x6E	; 110
    23a4:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       }
#endif
       _trans = &ptrans;		// change transistor structure
    23a8:	90 92 4c 01 	sts	0x014C, r9
    23ac:	80 92 4b 01 	sts	0x014B, r8
    }
    lcd_space();
    23b0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>
    if( NumOfDiodes > 2) {	//Transistor with protection diode
    23b4:	80 91 05 01 	lds	r24, 0x0105
    23b8:	83 30       	cpi	r24, 0x03	; 3
    23ba:	c0 f0       	brcs	.+48     	; 0x23ec <main+0x59c>
       // Layout with EBC= style
       if(PartMode == PART_MODE_NPN)
 #endif
#else
       // Layout with 123= style
       if (((PartMode == PART_MODE_NPN) && (ntrans.c > ntrans.e)) || ((PartMode != PART_MODE_NPN) && (ptrans.c < ptrans.e)))
    23bc:	80 91 06 01 	lds	r24, 0x0106
    23c0:	81 30       	cpi	r24, 0x01	; 1
    23c2:	39 f4       	brne	.+14     	; 0x23d2 <main+0x582>
    23c4:	90 91 58 01 	lds	r25, 0x0158
    23c8:	80 91 59 01 	lds	r24, 0x0159
    23cc:	89 17       	cp	r24, r25
    23ce:	38 f0       	brcs	.+14     	; 0x23de <main+0x58e>
    23d0:	09 c0       	rjmp	.+18     	; 0x23e4 <main+0x594>
    23d2:	90 91 70 01 	lds	r25, 0x0170
    23d6:	80 91 71 01 	lds	r24, 0x0171
    23da:	98 17       	cp	r25, r24
    23dc:	18 f4       	brcc	.+6      	; 0x23e4 <main+0x594>
#endif
       {
          lcd_fix_string(AnKat);	//"->|-"
    23de:	80 e4       	ldi	r24, 0x40	; 64
    23e0:	91 e0       	ldi	r25, 0x01	; 1
    23e2:	02 c0       	rjmp	.+4      	; 0x23e8 <main+0x598>
       } else {
          lcd_fix_string(KatAn);	//"-|<-"
    23e4:	84 e4       	ldi	r24, 0x44	; 68
    23e6:	91 e0       	ldi	r25, 0x01	; 1
    23e8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       }
    }
    PinLayout('E','B','C'); 		//  EBC= or 123=...
    23ec:	85 e4       	ldi	r24, 0x45	; 69
    23ee:	62 e4       	ldi	r22, 0x42	; 66
    23f0:	43 e4       	ldi	r20, 0x43	; 67
    23f2:	0e 94 75 0b 	call	0x16ea	; 0x16ea <PinLayout>
    lcd_line2(); //2. row 
    23f6:	80 ec       	ldi	r24, 0xC0	; 192
    23f8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
       lcd_line2(); //2. row 
       lcd_clear_line();
       lcd_line2(); //2. row 
    }
#endif
    lcd_fix_string(hfe_str);		//"B="  (hFE)
    23fc:	8a ef       	ldi	r24, 0xFA	; 250
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    DisplayValue(_trans->hfe,0,0,3);
    2404:	e0 91 4b 01 	lds	r30, 0x014B
    2408:	f0 91 4c 01 	lds	r31, 0x014C
    240c:	60 81       	ld	r22, Z
    240e:	71 81       	ldd	r23, Z+1	; 0x01
    2410:	82 81       	ldd	r24, Z+2	; 0x02
    2412:	93 81       	ldd	r25, Z+3	; 0x03
    2414:	40 e0       	ldi	r20, 0x00	; 0
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	03 e0       	ldi	r16, 0x03	; 3
    241a:	0e 94 8d 02 	call	0x51a	; 0x51a <DisplayValue>
    lcd_space();
    241e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>

    lcd_fix_string(Uf_str);		//"Uf="
    2422:	8b e0       	ldi	r24, 0x0B	; 11
    2424:	91 e0       	ldi	r25, 0x01	; 1
    2426:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    DisplayValue(_trans->uBE,-3,'V',3);
    242a:	e0 91 4b 01 	lds	r30, 0x014B
    242e:	f0 91 4c 01 	lds	r31, 0x014C
    2432:	64 81       	ldd	r22, Z+4	; 0x04
    2434:	75 81       	ldd	r23, Z+5	; 0x05
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	4d ef       	ldi	r20, 0xFD	; 253
    243c:	26 e5       	ldi	r18, 0x56	; 86
    243e:	da c1       	rjmp	.+948    	; 0x27f4 <main+0x9a4>
    goto end;
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    2440:	13 30       	cpi	r17, 0x03	; 3
    2442:	09 f0       	breq	.+2      	; 0x2446 <main+0x5f6>
    2444:	8b c0       	rjmp	.+278    	; 0x255c <main+0x70c>
    if(PartMode&1) {
    2446:	80 91 06 01 	lds	r24, 0x0106
    244a:	80 ff       	sbrs	r24, 0
    244c:	08 c0       	rjmp	.+16     	; 0x245e <main+0x60e>
       lcd_data('P');			//P-channel
    244e:	80 e5       	ldi	r24, 0x50	; 80
    2450:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       _trans = &ptrans;
    2454:	90 92 4c 01 	sts	0x014C, r9
    2458:	80 92 4b 01 	sts	0x014B, r8
    245c:	03 c0       	rjmp	.+6      	; 0x2464 <main+0x614>
    } else {
       lcd_data('N');			//N-channel
    245e:	8e e4       	ldi	r24, 0x4E	; 78
    2460:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
//       _trans = &ntrans;	is allready selected as default
    }
    lcd_data('-');
    2464:	8d e2       	ldi	r24, 0x2D	; 45
    2466:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>

    tmp = PartMode/2;
    246a:	80 91 06 01 	lds	r24, 0x0106
    246e:	86 95       	lsr	r24
    if (tmp == (PART_MODE_N_D_MOS/2)) {
    2470:	82 30       	cpi	r24, 0x02	; 2
    2472:	11 f4       	brne	.+4      	; 0x2478 <main+0x628>
       lcd_data('D');			// N-D or P-D
    2474:	84 e4       	ldi	r24, 0x44	; 68
    2476:	03 c0       	rjmp	.+6      	; 0x247e <main+0x62e>
    }
    if (tmp == (PART_MODE_N_E_MOS/2)) {
    2478:	81 30       	cpi	r24, 0x01	; 1
    247a:	21 f4       	brne	.+8      	; 0x2484 <main+0x634>
       lcd_data('E');			// N-E or P-E
    247c:	85 e4       	ldi	r24, 0x45	; 69
    247e:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
    2482:	05 c0       	rjmp	.+10     	; 0x248e <main+0x63e>
    }
    if (tmp == (PART_MODE_N_JFET/2)) {
    2484:	83 30       	cpi	r24, 0x03	; 3
    2486:	19 f4       	brne	.+6      	; 0x248e <main+0x63e>
       lcd_fix_string(jfet_str);	//"JFET"
    2488:	82 ef       	ldi	r24, 0xF2	; 242
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	02 c0       	rjmp	.+4      	; 0x2492 <main+0x642>
    } else {
       lcd_fix_string(mosfet_str);	//"-MOS "
    248e:	8d ee       	ldi	r24, 0xED	; 237
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    }
    PinLayout('S','G','D'); 		//  SGD= or 123=...
    2496:	83 e5       	ldi	r24, 0x53	; 83
    2498:	67 e4       	ldi	r22, 0x47	; 71
    249a:	44 e4       	ldi	r20, 0x44	; 68
    249c:	0e 94 75 0b 	call	0x16ea	; 0x16ea <PinLayout>
    if((NumOfDiodes > 0) && (PartMode < PART_MODE_N_D_MOS)) {
    24a0:	80 91 05 01 	lds	r24, 0x0105
    24a4:	88 23       	and	r24, r24
    24a6:	c1 f0       	breq	.+48     	; 0x24d8 <main+0x688>
    24a8:	80 91 06 01 	lds	r24, 0x0106
    24ac:	84 30       	cpi	r24, 0x04	; 4
    24ae:	a0 f4       	brcc	.+40     	; 0x24d8 <main+0x688>
       // Layout with SGD= style
       if (PartMode&1) /* N or P MOS */
 #endif
#else
       // layout with 123= style
       if (((PartMode&1) && (ptrans.c < ptrans.e)) || ((!(PartMode&1)) && (ntrans.c > ntrans.e)))
    24b0:	80 ff       	sbrs	r24, 0
    24b2:	07 c0       	rjmp	.+14     	; 0x24c2 <main+0x672>
    24b4:	90 91 70 01 	lds	r25, 0x0170
    24b8:	80 91 71 01 	lds	r24, 0x0171
    24bc:	98 17       	cp	r25, r24
    24be:	38 f0       	brcs	.+14     	; 0x24ce <main+0x67e>
    24c0:	08 c0       	rjmp	.+16     	; 0x24d2 <main+0x682>
    24c2:	90 91 58 01 	lds	r25, 0x0158
    24c6:	80 91 59 01 	lds	r24, 0x0159
    24ca:	89 17       	cp	r24, r25
    24cc:	10 f4       	brcc	.+4      	; 0x24d2 <main+0x682>
#endif
       {
          lcd_data(LCD_CHAR_DIODE1);	//show Diode symbol >|
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	01 c0       	rjmp	.+2      	; 0x24d4 <main+0x684>
       } else {
          lcd_data(LCD_CHAR_DIODE2);	//show Diode symbol |<
    24d2:	82 e0       	ldi	r24, 0x02	; 2
    24d4:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       }
    }
    lcd_line2();			//2. Row
    24d8:	80 ec       	ldi	r24, 0xC0	; 192
    24da:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
    if(PartMode < PART_MODE_N_D_MOS) {	//enhancement-MOSFET
    24de:	80 91 06 01 	lds	r24, 0x0106
    24e2:	84 30       	cpi	r24, 0x04	; 4
    24e4:	e8 f4       	brcc	.+58     	; 0x2520 <main+0x6d0>
	//Gate capacity
       lcd_fix_string(GateCap_str);		//"C="
    24e6:	87 ef       	ldi	r24, 0xF7	; 247
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       ReadCapacity(_trans->b,_trans->e);	//measure capacity
    24ee:	e0 91 4b 01 	lds	r30, 0x014B
    24f2:	f0 91 4c 01 	lds	r31, 0x014C
    24f6:	82 85       	ldd	r24, Z+10	; 0x0a
    24f8:	64 85       	ldd	r22, Z+12	; 0x0c
    24fa:	0e 94 f7 14 	call	0x29ee	; 0x29ee <ReadCapacity>
       DisplayValue(cap.cval,cap.cpre,'F',3);
    24fe:	60 91 75 01 	lds	r22, 0x0175
    2502:	70 91 76 01 	lds	r23, 0x0176
    2506:	80 91 77 01 	lds	r24, 0x0177
    250a:	90 91 78 01 	lds	r25, 0x0178
    250e:	40 91 87 01 	lds	r20, 0x0187
    2512:	26 e4       	ldi	r18, 0x46	; 70
    2514:	03 e0       	ldi	r16, 0x03	; 3
    2516:	0e 94 8d 02 	call	0x51a	; 0x51a <DisplayValue>
       lcd_fix_string(vt_str);		// "Vt="
    251a:	8f e0       	ldi	r24, 0x0F	; 15
    251c:	91 e0       	ldi	r25, 0x01	; 1
    251e:	15 c0       	rjmp	.+42     	; 0x254a <main+0x6fa>
    } else {
       lcd_data('I');
    2520:	89 e4       	ldi	r24, 0x49	; 73
    2522:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       lcd_data('=');
    2526:	8d e3       	ldi	r24, 0x3D	; 61
    2528:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       DisplayValue(_trans->current,-5,'A',2);
    252c:	e0 91 4b 01 	lds	r30, 0x014B
    2530:	f0 91 4c 01 	lds	r31, 0x014C
    2534:	66 81       	ldd	r22, Z+6	; 0x06
    2536:	77 81       	ldd	r23, Z+7	; 0x07
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	4b ef       	ldi	r20, 0xFB	; 251
    253e:	21 e4       	ldi	r18, 0x41	; 65
    2540:	02 e0       	ldi	r16, 0x02	; 2
    2542:	0e 94 8d 02 	call	0x51a	; 0x51a <DisplayValue>
       lcd_fix_string(Vgs_str);		// " Vgs="
    2546:	84 e1       	ldi	r24, 0x14	; 20
    2548:	91 e0       	ldi	r25, 0x01	; 1
    254a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    }
    //Gate-threshold voltage
    DisplayValue(_trans->gthvoltage,-3,'V',2);
    254e:	e0 91 4b 01 	lds	r30, 0x014B
    2552:	f0 91 4c 01 	lds	r31, 0x014C
    2556:	60 85       	ldd	r22, Z+8	; 0x08
    2558:	71 85       	ldd	r23, Z+9	; 0x09
    255a:	47 c1       	rjmp	.+654    	; 0x27ea <main+0x99a>
    goto end;
    // end (PartFound == PART_FET)
  } else if (PartFound == PART_THYRISTOR) {
    255c:	15 30       	cpi	r17, 0x05	; 5
    255e:	19 f4       	brne	.+6      	; 0x2566 <main+0x716>
    lcd_fix_string(Thyristor);		//"Thyristor"
    2560:	85 e8       	ldi	r24, 0x85	; 133
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	04 c0       	rjmp	.+8      	; 0x256e <main+0x71e>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    2566:	14 30       	cpi	r17, 0x04	; 4
    2568:	a9 f4       	brne	.+42     	; 0x2594 <main+0x744>
    lcd_fix_string(Triac);		//"Triac"
    256a:	8f e7       	ldi	r24, 0x7F	; 127
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  max_time = SHORT_WAIT_TIME;		// use allways the short wait time
  goto end2;


gakAusgabe:
  PinLayout(Cathode_char,'G','A'); 	// CGA= or 123=...
    2572:	83 e4       	ldi	r24, 0x43	; 67
    2574:	67 e4       	ldi	r22, 0x47	; 71
    2576:	41 e4       	ldi	r20, 0x41	; 65
    2578:	0e 94 75 0b 	call	0x16ea	; 0x16ea <PinLayout>
#ifdef WITH_THYRISTOR_GATE_V
  lcd_line2(); //2. row 
    257c:	80 ec       	ldi	r24, 0xC0	; 192
    257e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_string(Uf_str);		// "Uf="
    2582:	8b e0       	ldi	r24, 0x0B	; 11
    2584:	91 e0       	ldi	r25, 0x01	; 1
    2586:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  DisplayValue(ntrans.uBE,-3,'V',2);
    258a:	60 91 51 01 	lds	r22, 0x0151
    258e:	70 91 52 01 	lds	r23, 0x0152
    2592:	2b c1       	rjmp	.+598    	; 0x27ea <main+0x99a>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    lcd_fix_string(Triac);		//"Triac"
    goto gakAusgabe;
  }
  else if(PartFound == PART_RESISTOR) {
    2594:	16 30       	cpi	r17, 0x06	; 6
    2596:	09 f0       	breq	.+2      	; 0x259a <main+0x74a>
    2598:	a3 c0       	rjmp	.+326    	; 0x26e0 <main+0x890>
    ii = 0;
    if (ResistorsFound == 1) { // single resistor
    259a:	60 91 73 01 	lds	r22, 0x0173
    259e:	61 30       	cpi	r22, 0x01	; 1
    25a0:	71 f4       	brne	.+28     	; 0x25be <main+0x76e>
       lcd_testpin(resis[0].rb);  	//Pin-number 1
    25a2:	80 91 22 01 	lds	r24, 0x0122
    25a6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
       lcd_fix_string(Resistor_str);
    25aa:	8d e4       	ldi	r24, 0x4D	; 77
    25ac:	91 e0       	ldi	r25, 0x01	; 1
    25ae:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       lcd_testpin(resis[0].ra);		//Pin-number 2
    25b2:	80 91 21 01 	lds	r24, 0x0121
    25b6:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
  } else if (PartFound == PART_TRIAC) {
    lcd_fix_string(Triac);		//"Triac"
    goto gakAusgabe;
  }
  else if(PartFound == PART_RESISTOR) {
    ii = 0;
    25ba:	10 e0       	ldi	r17, 0x00	; 0
    25bc:	56 c0       	rjmp	.+172    	; 0x266a <main+0x81a>
    if (ResistorsFound == 1) { // single resistor
       lcd_testpin(resis[0].rb);  	//Pin-number 1
       lcd_fix_string(Resistor_str);
       lcd_testpin(resis[0].ra);		//Pin-number 2
    } else { // R-Max suchen
       if (resis[1].rx > resis[0].rx)
    25be:	20 91 24 01 	lds	r18, 0x0124
    25c2:	30 91 25 01 	lds	r19, 0x0125
    25c6:	40 91 26 01 	lds	r20, 0x0126
    25ca:	50 91 27 01 	lds	r21, 0x0127
    25ce:	80 91 18 01 	lds	r24, 0x0118
    25d2:	90 91 19 01 	lds	r25, 0x0119
    25d6:	a0 91 1a 01 	lds	r26, 0x011A
    25da:	b0 91 1b 01 	lds	r27, 0x011B
          ii = 1;
       if (ResistorsFound == 2) {
    25de:	62 30       	cpi	r22, 0x02	; 2
    25e0:	71 f1       	breq	.+92     	; 0x263e <main+0x7ee>
  } else if (PartFound == PART_TRIAC) {
    lcd_fix_string(Triac);		//"Triac"
    goto gakAusgabe;
  }
  else if(PartFound == PART_RESISTOR) {
    ii = 0;
    25e2:	11 e0       	ldi	r17, 0x01	; 1
    25e4:	82 17       	cp	r24, r18
    25e6:	93 07       	cpc	r25, r19
    25e8:	a4 07       	cpc	r26, r20
    25ea:	b5 07       	cpc	r27, r21
    25ec:	08 f0       	brcs	.+2      	; 0x25f0 <main+0x7a0>
    25ee:	10 e0       	ldi	r17, 0x00	; 0
       if (resis[1].rx > resis[0].rx)
          ii = 1;
       if (ResistorsFound == 2) {
          ii = 2;
       } else {
          if (resis[2].rx > resis[ii].rx) {
    25f0:	81 2f       	mov	r24, r17
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	fc 01       	movw	r30, r24
    25f6:	ee 0f       	add	r30, r30
    25f8:	ff 1f       	adc	r31, r31
    25fa:	e8 0f       	add	r30, r24
    25fc:	f9 1f       	adc	r31, r25
    25fe:	ee 0f       	add	r30, r30
    2600:	ff 1f       	adc	r31, r31
    2602:	ee 0f       	add	r30, r30
    2604:	ff 1f       	adc	r31, r31
    2606:	e8 5e       	subi	r30, 0xE8	; 232
    2608:	fe 4f       	sbci	r31, 0xFE	; 254
    260a:	20 91 30 01 	lds	r18, 0x0130
    260e:	30 91 31 01 	lds	r19, 0x0131
    2612:	40 91 32 01 	lds	r20, 0x0132
    2616:	50 91 33 01 	lds	r21, 0x0133
    261a:	80 81       	ld	r24, Z
    261c:	91 81       	ldd	r25, Z+1	; 0x01
    261e:	a2 81       	ldd	r26, Z+2	; 0x02
    2620:	b3 81       	ldd	r27, Z+3	; 0x03
    2622:	82 17       	cp	r24, r18
    2624:	93 07       	cpc	r25, r19
    2626:	a4 07       	cpc	r26, r20
    2628:	b5 07       	cpc	r27, r21
    262a:	48 f0       	brcs	.+18     	; 0x263e <main+0x7ee>
       }
       char x = '1';
       char y = '3';
       char z = '2';
   
       if (ii == 1) {
    262c:	11 30       	cpi	r17, 0x01	; 1
    262e:	19 f0       	breq	.+6      	; 0x2636 <main+0x7e6>
    2630:	02 e3       	ldi	r16, 0x32	; 50
    2632:	23 e3       	ldi	r18, 0x33	; 51
    2634:	02 c0       	rjmp	.+4      	; 0x263a <main+0x7ea>
          // x = '1';
          y = '2';
          z = '3';
    2636:	03 e3       	ldi	r16, 0x33	; 51
       char y = '3';
       char z = '2';
   
       if (ii == 1) {
          // x = '1';
          y = '2';
    2638:	22 e3       	ldi	r18, 0x32	; 50
       } else {
          if (resis[2].rx > resis[ii].rx) {
             ii = 2;
          }
       }
       char x = '1';
    263a:	81 e3       	ldi	r24, 0x31	; 49
    263c:	04 c0       	rjmp	.+8      	; 0x2646 <main+0x7f6>
       if (resis[1].rx > resis[0].rx)
          ii = 1;
       if (ResistorsFound == 2) {
          ii = 2;
       } else {
          if (resis[2].rx > resis[ii].rx) {
    263e:	12 e0       	ldi	r17, 0x02	; 2
          z = '3';
       }
       if (ii == 2) {
          x = '2';
          y = '1';
          z = '3';
    2640:	03 e3       	ldi	r16, 0x33	; 51
          y = '2';
          z = '3';
       }
       if (ii == 2) {
          x = '2';
          y = '1';
    2642:	21 e3       	ldi	r18, 0x31	; 49
          // x = '1';
          y = '2';
          z = '3';
       }
       if (ii == 2) {
          x = '2';
    2644:	82 e3       	ldi	r24, 0x32	; 50
          y = '1';
          z = '3';
       }
       lcd_data(x);
    2646:	29 83       	std	Y+1, r18	; 0x01
    2648:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       lcd_fix_string(Resistor_str);    // -[=]-
    264c:	8d e4       	ldi	r24, 0x4D	; 77
    264e:	91 e0       	ldi	r25, 0x01	; 1
    2650:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       lcd_data(y);
    2654:	29 81       	ldd	r18, Y+1	; 0x01
    2656:	82 2f       	mov	r24, r18
    2658:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       lcd_fix_string(Resistor_str);    // -[=]-
    265c:	8d e4       	ldi	r24, 0x4D	; 77
    265e:	91 e0       	ldi	r25, 0x01	; 1
    2660:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       lcd_data(z);
    2664:	80 2f       	mov	r24, r16
    2666:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
    }
    lcd_line2(); //2. row 
    266a:	80 ec       	ldi	r24, 0xC0	; 192
    266c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
    if (ResistorsFound == 1) {
    2670:	80 91 73 01 	lds	r24, 0x0173
    2674:	81 30       	cpi	r24, 0x01	; 1
    2676:	11 f5       	brne	.+68     	; 0x26bc <main+0x86c>
       RvalOut(0);
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	0e 94 48 03 	call	0x690	; 0x690 <RvalOut>
#if FLASHEND > 0x1fff
       ReadInductance();		// measure inductance, possible only with single R<2.1k
    267e:	0e 94 32 18 	call	0x3064	; 0x3064 <ReadInductance>
       if (resis[0].lx != 0) {
    2682:	80 91 1c 01 	lds	r24, 0x011C
    2686:	90 91 1d 01 	lds	r25, 0x011D
    268a:	a0 91 1e 01 	lds	r26, 0x011E
    268e:	b0 91 1f 01 	lds	r27, 0x011F
    2692:	00 97       	sbiw	r24, 0x00	; 0
    2694:	a1 05       	cpc	r26, r1
    2696:	b1 05       	cpc	r27, r1
    2698:	09 f4       	brne	.+2      	; 0x269c <main+0x84c>
    269a:	ae c0       	rjmp	.+348    	; 0x27f8 <main+0x9a8>
	  // resistor have also Inductance
          lcd_fix_string(Lis_str);	// "L="
    269c:	87 e3       	ldi	r24, 0x37	; 55
    269e:	91 e0       	ldi	r25, 0x01	; 1
    26a0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
          DisplayValue(resis[0].lx,resis[0].lpre,'H',3);	// output inductance
    26a4:	60 91 1c 01 	lds	r22, 0x011C
    26a8:	70 91 1d 01 	lds	r23, 0x011D
    26ac:	80 91 1e 01 	lds	r24, 0x011E
    26b0:	90 91 1f 01 	lds	r25, 0x011F
    26b4:	40 91 20 01 	lds	r20, 0x0120
    26b8:	28 e4       	ldi	r18, 0x48	; 72
    26ba:	8b cd       	rjmp	.-1258   	; 0x21d2 <main+0x382>
       }
#endif
    } else {
       // output resistor values in right order
       if (ii == 0) {
    26bc:	11 23       	and	r17, r17
    26be:	11 f4       	brne	.+4      	; 0x26c4 <main+0x874>
          RvalOut(1);
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	03 c0       	rjmp	.+6      	; 0x26ca <main+0x87a>
          RvalOut(2);
       }
       if (ii == 1) {
    26c4:	11 30       	cpi	r17, 0x01	; 1
    26c6:	29 f4       	brne	.+10     	; 0x26d2 <main+0x882>
          RvalOut(0);
    26c8:	80 e0       	ldi	r24, 0x00	; 0
    26ca:	0e 94 48 03 	call	0x690	; 0x690 <RvalOut>
          RvalOut(2);
    26ce:	82 e0       	ldi	r24, 0x02	; 2
    26d0:	04 c0       	rjmp	.+8      	; 0x26da <main+0x88a>
       }
       if (ii == 2) {
          RvalOut(0);
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	0e 94 48 03 	call	0x690	; 0x690 <RvalOut>
          RvalOut(1);
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	0e 94 48 03 	call	0x690	; 0x690 <RvalOut>
    26de:	8c c0       	rjmp	.+280    	; 0x27f8 <main+0x9a8>
    goto end;

  } // end (PartFound == PART_RESISTOR)

//capacity measurement is wanted
  else if(PartFound == PART_CAPACITOR) {
    26e0:	17 30       	cpi	r17, 0x07	; 7
    26e2:	09 f0       	breq	.+2      	; 0x26e6 <main+0x896>
    26e4:	50 c0       	rjmp	.+160    	; 0x2786 <main+0x936>
//     lcd_fix_string(Capacitor);
     lcd_testpin(cap.ca);		//Pin number 1
    26e6:	80 91 85 01 	lds	r24, 0x0185
    26ea:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
     lcd_fix_string(CapZeich);		// capacitor sign
    26ee:	8a e1       	ldi	r24, 0x1A	; 26
    26f0:	91 e0       	ldi	r25, 0x01	; 1
    26f2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_testpin(cap.cb);		//Pin number 2
    26f6:	80 91 86 01 	lds	r24, 0x0186
    26fa:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
#if FLASHEND > 0x1fff
     GetVloss();			// get Voltage loss of capacitor
    26fe:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <GetVloss>
     if (cap.v_loss != 0) {
    2702:	80 91 83 01 	lds	r24, 0x0183
    2706:	90 91 84 01 	lds	r25, 0x0184
    270a:	00 97       	sbiw	r24, 0x00	; 0
    270c:	79 f0       	breq	.+30     	; 0x272c <main+0x8dc>
        lcd_fix_string(VLOSS_str);	// "  Vloss="
    270e:	8f e2       	ldi	r24, 0x2F	; 47
    2710:	91 e0       	ldi	r25, 0x01	; 1
    2712:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        DisplayValue(cap.v_loss,-1,'%',2);
    2716:	60 91 83 01 	lds	r22, 0x0183
    271a:	70 91 84 01 	lds	r23, 0x0184
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	4f ef       	ldi	r20, 0xFF	; 255
    2724:	25 e2       	ldi	r18, 0x25	; 37
    2726:	02 e0       	ldi	r16, 0x02	; 2
    2728:	0e 94 8d 02 	call	0x51a	; 0x51a <DisplayValue>
     }
#endif
     lcd_line2(); 			//2. row 
    272c:	80 ec       	ldi	r24, 0xC0	; 192
    272e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     DisplayValue(cap.cval_max,cap.cpre_max,'F',4);
    2732:	60 91 79 01 	lds	r22, 0x0179
    2736:	70 91 7a 01 	lds	r23, 0x017A
    273a:	80 91 7b 01 	lds	r24, 0x017B
    273e:	90 91 7c 01 	lds	r25, 0x017C
    2742:	40 91 88 01 	lds	r20, 0x0188
    2746:	26 e4       	ldi	r18, 0x46	; 70
    2748:	04 e0       	ldi	r16, 0x04	; 4
    274a:	0e 94 8d 02 	call	0x51a	; 0x51a <DisplayValue>
#if FLASHEND > 0x1fff
     cap.esr = GetESR(cap.cb, cap.ca);		// get ESR of capacitor
    274e:	80 91 86 01 	lds	r24, 0x0186
    2752:	60 91 85 01 	lds	r22, 0x0185
    2756:	0e 94 27 1b 	call	0x364e	; 0x364e <GetESR>
    275a:	90 93 82 01 	sts	0x0182, r25
    275e:	80 93 81 01 	sts	0x0181, r24
     if ( cap.esr < 65530) {
    2762:	ff ef       	ldi	r31, 0xFF	; 255
    2764:	8a 3f       	cpi	r24, 0xFA	; 250
    2766:	9f 07       	cpc	r25, r31
    2768:	08 f0       	brcs	.+2      	; 0x276c <main+0x91c>
    276a:	46 c0       	rjmp	.+140    	; 0x27f8 <main+0x9a8>
        lcd_fix_string(ESR_str);
    276c:	89 e2       	ldi	r24, 0x29	; 41
    276e:	91 e0       	ldi	r25, 0x01	; 1
    2770:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        DisplayValue(cap.esr,-2,LCD_CHAR_OMEGA,2);
    2774:	60 91 81 01 	lds	r22, 0x0181
    2778:	70 91 82 01 	lds	r23, 0x0182
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	4e ef       	ldi	r20, 0xFE	; 254
    2782:	24 ef       	ldi	r18, 0xF4	; 244
    2784:	36 c0       	rjmp	.+108    	; 0x27f2 <main+0x9a2>
     }
#endif
     goto end;
  }
  if(NumOfDiodes == 0) { //no diodes are found
    2786:	80 91 05 01 	lds	r24, 0x0105
    278a:	88 23       	and	r24, r24
    278c:	71 f4       	brne	.+28     	; 0x27aa <main+0x95a>
     lcd_fix_string(TestFailed1); 	//"Kein,unbek. oder"
    278e:	87 e9       	ldi	r24, 0x97	; 151
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_line2(); //2. row 
    2796:	80 ec       	ldi	r24, 0xC0	; 192
    2798:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     lcd_fix_string(TestFailed2); 	//"defektes "
    279c:	81 e7       	ldi	r24, 0x71	; 113
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_fix_string(Bauteil);		//"Bauteil"
    27a4:	8a e7       	ldi	r24, 0x7A	; 122
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	16 c0       	rjmp	.+44     	; 0x27d6 <main+0x986>
  } else {
     lcd_fix_string(Bauteil);		//"Bauteil"
    27aa:	8a e7       	ldi	r24, 0x7A	; 122
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_fix_string(Unknown); 		//" unbek."
    27b2:	8e e8       	ldi	r24, 0x8E	; 142
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_line2(); //2. row 
    27ba:	80 ec       	ldi	r24, 0xC0	; 192
    27bc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     lcd_fix_string(OrBroken); 		//"oder defekt "
    27c0:	87 ea       	ldi	r24, 0xA7	; 167
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_data(NumOfDiodes + '0');
    27c8:	80 91 05 01 	lds	r24, 0x0105
    27cc:	80 5d       	subi	r24, 0xD0	; 208
    27ce:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
     lcd_fix_string(AnKat);		//"->|-"
    27d2:	80 e4       	ldi	r24, 0x40	; 64
    27d4:	91 e0       	ldi	r25, 0x01	; 1
    27d6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  }
  empty_count++;
    27da:	80 91 5b 01 	lds	r24, 0x015B
    27de:	8f 5f       	subi	r24, 0xFF	; 255
    27e0:	80 93 5b 01 	sts	0x015B, r24
  mess_count = 0;
    27e4:	10 92 0b 01 	sts	0x010B, r1
  max_time = SHORT_WAIT_TIME;		// use allways the short wait time
  goto end2;
    27e8:	0e c0       	rjmp	.+28     	; 0x2806 <main+0x9b6>
gakAusgabe:
  PinLayout(Cathode_char,'G','A'); 	// CGA= or 123=...
#ifdef WITH_THYRISTOR_GATE_V
  lcd_line2(); //2. row 
  lcd_fix_string(Uf_str);		// "Uf="
  DisplayValue(ntrans.uBE,-3,'V',2);
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	4d ef       	ldi	r20, 0xFD	; 253
    27f0:	26 e5       	ldi	r18, 0x56	; 86
    27f2:	02 e0       	ldi	r16, 0x02	; 2
    27f4:	0e 94 8d 02 	call	0x51a	; 0x51a <DisplayValue>
#endif
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 end:
  empty_count = 0;		// reset counter, if part is found
    27f8:	10 92 5b 01 	sts	0x015B, r1
  mess_count++;			// count measurements
    27fc:	80 91 0b 01 	lds	r24, 0x010B
    2800:	8f 5f       	subi	r24, 0xFF	; 255
    2802:	80 93 0b 01 	sts	0x010B, r24
  max_time = display_time;	// full specified wait time

 end2:
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND, release relay
    2806:	88 e1       	ldi	r24, 0x18	; 24
    2808:	87 b9       	out	0x07, r24	; 7
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
    280a:	4f 9b       	sbis	0x09, 7	; 9
    280c:	fe cf       	rjmp	.-4      	; 0x280a <main+0x9ba>
  if ((wait_for_key_ms(display_time)) != 0 ) goto start;
    280e:	80 e6       	ldi	r24, 0x60	; 96
    2810:	9d e6       	ldi	r25, 0x6D	; 109
    2812:	0e 94 a8 0b 	call	0x1750	; 0x1750 <wait_for_key_ms>
    2816:	88 23       	and	r24, r24
    2818:	09 f0       	breq	.+2      	; 0x281c <main+0x9cc>
    281a:	85 cb       	rjmp	.-2294   	; 0x1f26 <main+0xd6>
 #if FLASHEND > 0x3fff
  // look, if the tester is uncalibrated (C-source will be included directly)
  #include "HelpCalibration.c"
 #endif
//  MCUSR = 0;
  ON_PORT &= ~(1<<ON_PIN);		//switch off power
    281c:	5e 98       	cbi	0x0b, 6	; 11
  wait_for_key_ms(0); //never ending loop 
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	0e 94 a8 0b 	call	0x1750	; 0x1750 <wait_for_key_ms>
#else
  goto start;	// POWER_OFF not selected, repeat measurement
#endif
  return 0;
}   // end main
    2826:	80 e0       	ldi	r24, 0x00	; 0
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	0f 90       	pop	r0
    282c:	cf 91       	pop	r28
    282e:	df 91       	pop	r29
    2830:	1f 91       	pop	r17
    2832:	0f 91       	pop	r16
    2834:	ff 90       	pop	r15
    2836:	ef 90       	pop	r14
    2838:	df 90       	pop	r13
    283a:	cf 90       	pop	r12
    283c:	bf 90       	pop	r11
    283e:	9f 90       	pop	r9
    2840:	8f 90       	pop	r8
    2842:	08 95       	ret

00002844 <uart_putc>:
    2844:	2f 93       	push	r18
    2846:	5f b7       	in	r21, 0x3f	; 63
    2848:	2f 93       	push	r18
    284a:	2a e0       	ldi	r18, 0x0A	; 10
    284c:	80 95       	com	r24
    284e:	08 94       	sec

00002850 <putchar0>:
    2850:	10 f4       	brcc	.+4      	; 0x2856 <putchar1>
    2852:	43 98       	cbi	0x08, 3	; 8
    2854:	02 c0       	rjmp	.+4      	; 0x285a <putchar2>

00002856 <putchar1>:
    2856:	43 9a       	sbi	0x08, 3	; 8
	...

0000285a <putchar2>:
    285a:	22 d0       	rcall	.+68     	; 0x28a0 <wait100us>
    285c:	29 d0       	rcall	.+82     	; 0x28b0 <wait3us>
    285e:	86 95       	lsr	r24
    2860:	2a 95       	dec	r18
    2862:	b1 f7       	brne	.-20     	; 0x2850 <putchar0>
    2864:	2f 91       	pop	r18
    2866:	5f bf       	out	0x3f, r21	; 63
    2868:	2f 91       	pop	r18
    286a:	08 95       	ret

0000286c <UART_delay1>:
    286c:	08 95       	ret

0000286e <wait5s>:
    286e:	03 d0       	rcall	.+6      	; 0x2876 <wait1000ms>

00002870 <wait4s>:
    2870:	02 d0       	rcall	.+4      	; 0x2876 <wait1000ms>

00002872 <wait3s>:
    2872:	01 d0       	rcall	.+2      	; 0x2876 <wait1000ms>

00002874 <wait2s>:
    2874:	00 d0       	rcall	.+0      	; 0x2876 <wait1000ms>

00002876 <wait1000ms>:
    2876:	00 d0       	rcall	.+0      	; 0x2878 <wait500ms>

00002878 <wait500ms>:
    2878:	03 d0       	rcall	.+6      	; 0x2880 <wait100ms>

0000287a <wait400ms>:
    287a:	02 d0       	rcall	.+4      	; 0x2880 <wait100ms>

0000287c <wait300ms>:
    287c:	01 d0       	rcall	.+2      	; 0x2880 <wait100ms>

0000287e <wait200ms>:
    287e:	00 d0       	rcall	.+0      	; 0x2880 <wait100ms>

00002880 <wait100ms>:
    2880:	a8 95       	wdr
    2882:	00 d0       	rcall	.+0      	; 0x2884 <wait50ms>

00002884 <wait50ms>:
    2884:	03 d0       	rcall	.+6      	; 0x288c <wait10ms>

00002886 <wait40ms>:
    2886:	02 d0       	rcall	.+4      	; 0x288c <wait10ms>

00002888 <wait30ms>:
    2888:	01 d0       	rcall	.+2      	; 0x288c <wait10ms>

0000288a <wait20ms>:
    288a:	00 d0       	rcall	.+0      	; 0x288c <wait10ms>

0000288c <wait10ms>:
    288c:	00 d0       	rcall	.+0      	; 0x288e <wait5ms>

0000288e <wait5ms>:
    288e:	03 d0       	rcall	.+6      	; 0x2896 <wait1ms>

00002890 <wait4ms>:
    2890:	02 d0       	rcall	.+4      	; 0x2896 <wait1ms>

00002892 <wait3ms>:
    2892:	01 d0       	rcall	.+2      	; 0x2896 <wait1ms>

00002894 <wait2ms>:
    2894:	00 d0       	rcall	.+0      	; 0x2896 <wait1ms>

00002896 <wait1ms>:
    2896:	00 d0       	rcall	.+0      	; 0x2898 <wait500us>

00002898 <wait500us>:
    2898:	03 d0       	rcall	.+6      	; 0x28a0 <wait100us>

0000289a <wait400us>:
    289a:	02 d0       	rcall	.+4      	; 0x28a0 <wait100us>

0000289c <wait300us>:
    289c:	01 d0       	rcall	.+2      	; 0x28a0 <wait100us>

0000289e <wait200us>:
    289e:	00 d0       	rcall	.+0      	; 0x28a0 <wait100us>

000028a0 <wait100us>:
    28a0:	00 d0       	rcall	.+0      	; 0x28a2 <wait50us>

000028a2 <wait50us>:
    28a2:	03 d0       	rcall	.+6      	; 0x28aa <wait10us>

000028a4 <wait40us>:
    28a4:	02 d0       	rcall	.+4      	; 0x28aa <wait10us>

000028a6 <wait30us>:
    28a6:	01 d0       	rcall	.+2      	; 0x28aa <wait10us>

000028a8 <wait20us>:
    28a8:	00 d0       	rcall	.+0      	; 0x28aa <wait10us>

000028aa <wait10us>:
    28aa:	00 d0       	rcall	.+0      	; 0x28ac <wait5us>

000028ac <wait5us>:
    28ac:	03 d0       	rcall	.+6      	; 0x28b4 <wait1us>

000028ae <wait4us>:
    28ae:	02 d0       	rcall	.+4      	; 0x28b4 <wait1us>

000028b0 <wait3us>:
    28b0:	01 d0       	rcall	.+2      	; 0x28b4 <wait1us>

000028b2 <wait2us>:
    28b2:	00 d0       	rcall	.+0      	; 0x28b4 <wait1us>

000028b4 <wait1us>:
    28b4:	00 00       	nop
    28b6:	08 95       	ret

000028b8 <getRLmultip>:
  R_DDR = 0;			// switch all resistor ports to input
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
  return;
 } // end ReadCapacity()

unsigned int getRLmultip(unsigned int cvolt) {
    28b8:	ef 92       	push	r14
    28ba:	ff 92       	push	r15
    28bc:	0f 93       	push	r16
    28be:	1f 93       	push	r17
    28c0:	df 93       	push	r29
    28c2:	cf 93       	push	r28
    28c4:	0f 92       	push	r0
    28c6:	cd b7       	in	r28, 0x3d	; 61
    28c8:	de b7       	in	r29, 0x3e	; 62

  unsigned int uvolt;
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;
  if (cvolt >= RL_Tab_Beginn) {
    28ca:	21 e0       	ldi	r18, 0x01	; 1
    28cc:	8c 32       	cpi	r24, 0x2C	; 44
    28ce:	92 07       	cpc	r25, r18
    28d0:	18 f0       	brcs	.+6      	; 0x28d8 <getRLmultip+0x20>
     uvolt = cvolt - RL_Tab_Beginn;
    28d2:	8c 52       	subi	r24, 0x2C	; 44
    28d4:	91 40       	sbci	r25, 0x01	; 1
    28d6:	02 c0       	rjmp	.+4      	; 0x28dc <getRLmultip+0x24>
  } else {
     uvolt = 0;			// limit to begin of table
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = uvolt / RL_Tab_Abstand;
    28dc:	69 e1       	ldi	r22, 0x19	; 25
    28de:	70 e0       	ldi	r23, 0x00	; 0
    28e0:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__udivmodhi4>
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
  if (tabind > ((RL_Tab_Length/RL_Tab_Abstand)-1)) {
    28e4:	6c 32       	cpi	r22, 0x2C	; 44
    28e6:	18 f4       	brcc	.+6      	; 0x28ee <getRLmultip+0x36>
  } else {
     uvolt = 0;			// limit to begin of table
  }
  tabind = uvolt / RL_Tab_Abstand;
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
    28e8:	49 e1       	ldi	r20, 0x19	; 25
    28ea:	48 1b       	sub	r20, r24
    28ec:	02 c0       	rjmp	.+4      	; 0x28f2 <getRLmultip+0x3a>
  if (tabind > ((RL_Tab_Length/RL_Tab_Abstand)-1)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand)-1;	// limit to end of table
     tabres = 0;
    28ee:	40 e0       	ldi	r20, 0x00	; 0
  }
  tabind = uvolt / RL_Tab_Abstand;
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
  if (tabind > ((RL_Tab_Length/RL_Tab_Abstand)-1)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand)-1;	// limit to end of table
    28f0:	6b e2       	ldi	r22, 0x2B	; 43
     tabres = 0;
  }
  y1 = MEM_read_word(&RLtab[tabind]);
    28f2:	e6 2e       	mov	r14, r22
    28f4:	ff 24       	eor	r15, r15
    28f6:	c7 01       	movw	r24, r14
    28f8:	88 0f       	add	r24, r24
    28fa:	99 1f       	adc	r25, r25
    28fc:	80 50       	subi	r24, 0x00	; 0
    28fe:	90 40       	sbci	r25, 0x00	; 0
    2900:	49 83       	std	Y+1, r20	; 0x01
    2902:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <__eerd_word_m168>
    2906:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RLtab[tabind+1]);
    2908:	c7 01       	movw	r24, r14
    290a:	88 0f       	add	r24, r24
    290c:	99 1f       	adc	r25, r25
    290e:	8e 5f       	subi	r24, 0xFE	; 254
    2910:	9f 4f       	sbci	r25, 0xFF	; 255
    2912:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <__eerd_word_m168>
    2916:	9c 01       	movw	r18, r24
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
    2918:	49 81       	ldd	r20, Y+1	; 0x01
    291a:	50 e0       	ldi	r21, 0x00	; 0
    291c:	08 1b       	sub	r16, r24
    291e:	19 0b       	sbc	r17, r25
    2920:	40 9f       	mul	r20, r16
    2922:	c0 01       	movw	r24, r0
    2924:	41 9f       	mul	r20, r17
    2926:	90 0d       	add	r25, r0
    2928:	50 9f       	mul	r21, r16
    292a:	90 0d       	add	r25, r0
    292c:	11 24       	eor	r1, r1
    292e:	0c 96       	adiw	r24, 0x0c	; 12
    2930:	69 e1       	ldi	r22, 0x19	; 25
    2932:	70 e0       	ldi	r23, 0x00	; 0
    2934:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__udivmodhi4>
    2938:	62 0f       	add	r22, r18
    293a:	73 1f       	adc	r23, r19
}
    293c:	cb 01       	movw	r24, r22
    293e:	0f 90       	pop	r0
    2940:	cf 91       	pop	r28
    2942:	df 91       	pop	r29
    2944:	1f 91       	pop	r17
    2946:	0f 91       	pop	r16
    2948:	ff 90       	pop	r15
    294a:	ef 90       	pop	r14
    294c:	08 95       	ret

0000294e <Scale_C_with_vcc>:

void Scale_C_with_vcc(void) {
    294e:	8f 92       	push	r8
    2950:	9f 92       	push	r9
    2952:	af 92       	push	r10
    2954:	bf 92       	push	r11
    2956:	df 92       	push	r13
    2958:	ef 92       	push	r14
    295a:	ff 92       	push	r15
    295c:	0f 93       	push	r16
    295e:	1f 93       	push	r17
    2960:	e0 90 75 01 	lds	r14, 0x0175
    2964:	f0 90 76 01 	lds	r15, 0x0176
    2968:	00 91 77 01 	lds	r16, 0x0177
    296c:	10 91 78 01 	lds	r17, 0x0178
    2970:	d0 90 87 01 	lds	r13, 0x0187
   while (cap.cval > 100000) {
      cap.cval /= 10;
    2974:	4a e0       	ldi	r20, 0x0A	; 10
    2976:	84 2e       	mov	r8, r20
    2978:	91 2c       	mov	r9, r1
    297a:	a1 2c       	mov	r10, r1
    297c:	b1 2c       	mov	r11, r1
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    297e:	08 c0       	rjmp	.+16     	; 0x2990 <Scale_C_with_vcc+0x42>
      cap.cval /= 10;
    2980:	c8 01       	movw	r24, r16
    2982:	b7 01       	movw	r22, r14
    2984:	a5 01       	movw	r20, r10
    2986:	94 01       	movw	r18, r8
    2988:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
    298c:	79 01       	movw	r14, r18
    298e:	8a 01       	movw	r16, r20
    2990:	8d 2d       	mov	r24, r13
    2992:	d3 94       	inc	r13
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    2994:	91 ea       	ldi	r25, 0xA1	; 161
    2996:	e9 16       	cp	r14, r25
    2998:	96 e8       	ldi	r25, 0x86	; 134
    299a:	f9 06       	cpc	r15, r25
    299c:	91 e0       	ldi	r25, 0x01	; 1
    299e:	09 07       	cpc	r16, r25
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	19 07       	cpc	r17, r25
    29a4:	68 f7       	brcc	.-38     	; 0x2980 <Scale_C_with_vcc+0x32>
    29a6:	80 93 87 01 	sts	0x0187, r24
      cap.cval /= 10;
      cap.cpre ++;			// prevent overflow
   }
   cap.cval *= ADCconfig.U_AVCC;	// scale with measured voltage
    29aa:	20 91 40 01 	lds	r18, 0x0140
    29ae:	30 91 41 01 	lds	r19, 0x0141
    29b2:	40 e0       	ldi	r20, 0x00	; 0
    29b4:	50 e0       	ldi	r21, 0x00	; 0
    29b6:	c8 01       	movw	r24, r16
    29b8:	b7 01       	movw	r22, r14
    29ba:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
    29be:	28 e8       	ldi	r18, 0x88	; 136
    29c0:	33 e1       	ldi	r19, 0x13	; 19
    29c2:	40 e0       	ldi	r20, 0x00	; 0
    29c4:	50 e0       	ldi	r21, 0x00	; 0
    29c6:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
    29ca:	20 93 75 01 	sts	0x0175, r18
    29ce:	30 93 76 01 	sts	0x0176, r19
    29d2:	40 93 77 01 	sts	0x0177, r20
    29d6:	50 93 78 01 	sts	0x0178, r21
}
    29da:	1f 91       	pop	r17
    29dc:	0f 91       	pop	r16
    29de:	ff 90       	pop	r15
    29e0:	ef 90       	pop	r14
    29e2:	df 90       	pop	r13
    29e4:	bf 90       	pop	r11
    29e6:	af 90       	pop	r10
    29e8:	9f 90       	pop	r9
    29ea:	8f 90       	pop	r8
    29ec:	08 95       	ret

000029ee <ReadCapacity>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    29ee:	7f 92       	push	r7
    29f0:	8f 92       	push	r8
    29f2:	9f 92       	push	r9
    29f4:	af 92       	push	r10
    29f6:	bf 92       	push	r11
    29f8:	cf 92       	push	r12
    29fa:	df 92       	push	r13
    29fc:	ef 92       	push	r14
    29fe:	ff 92       	push	r15
    2a00:	0f 93       	push	r16
    2a02:	1f 93       	push	r17
    2a04:	cf 93       	push	r28
    2a06:	df 93       	push	r29
    2a08:	18 2f       	mov	r17, r24
    2a0a:	76 2e       	mov	r7, r22
#if FLASHEND > 0x1fff
  unsigned int vloss;	// lost voltage after load pulse in 0.1% 
#endif

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
    2a0c:	88 0f       	add	r24, r24
    2a0e:	81 0f       	add	r24, r17
    2a10:	86 0f       	add	r24, r22
    2a12:	81 50       	subi	r24, 0x01	; 1
    2a14:	80 93 5c 01 	sts	0x015C, r24
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2a18:	e6 2f       	mov	r30, r22
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	ed 5f       	subi	r30, 0xFD	; 253
    2a1e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a20:	04 91       	lpm	r16, Z+
  HiPinR_L = pgm_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
    2a22:	e1 2f       	mov	r30, r17
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	e0 50       	subi	r30, 0x00	; 0
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	a4 90       	lpm	r10, Z+
  lcd_testpin(LowPin);
  lcd_data('C');
  lcd_testpin(HighPin);
  lcd_space();
#endif
  if(PartFound == PART_RESISTOR) {
    2a2c:	80 91 07 01 	lds	r24, 0x0107
    2a30:	86 30       	cpi	r24, 0x06	; 6
    2a32:	09 f4       	brne	.+2      	; 0x2a36 <ReadCapacity+0x48>
    2a34:	98 c2       	rjmp	.+1328   	; 0x2f66 <ReadCapacity+0x578>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    2a36:	30 91 05 01 	lds	r19, 0x0105
    2a3a:	ab e8       	ldi	r26, 0x8B	; 139
    2a3c:	b1 e0       	ldi	r27, 0x01	; 1
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	13 c0       	rjmp	.+38     	; 0x2a68 <ReadCapacity+0x7a>
     if ((diodes[ii].Cathode == LowPin) && (diodes[ii].Anode == HighPin) && (diodes[ii].Voltage < 1500)) {
    2a42:	11 96       	adiw	r26, 0x01	; 1
    2a44:	8c 91       	ld	r24, X
    2a46:	11 97       	sbiw	r26, 0x01	; 1
    2a48:	87 15       	cp	r24, r7
    2a4a:	61 f4       	brne	.+24     	; 0x2a64 <ReadCapacity+0x76>
    2a4c:	8c 91       	ld	r24, X
    2a4e:	81 17       	cp	r24, r17
    2a50:	49 f4       	brne	.+18     	; 0x2a64 <ReadCapacity+0x76>
    2a52:	12 96       	adiw	r26, 0x02	; 2
    2a54:	8d 91       	ld	r24, X+
    2a56:	9c 91       	ld	r25, X
    2a58:	13 97       	sbiw	r26, 0x03	; 3
    2a5a:	45 e0       	ldi	r20, 0x05	; 5
    2a5c:	8c 3d       	cpi	r24, 0xDC	; 220
    2a5e:	94 07       	cpc	r25, r20
    2a60:	08 f4       	brcc	.+2      	; 0x2a64 <ReadCapacity+0x76>
    2a62:	81 c2       	rjmp	.+1282   	; 0x2f66 <ReadCapacity+0x578>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    2a64:	2f 5f       	subi	r18, 0xFF	; 255
    2a66:	14 96       	adiw	r26, 0x04	; 4
    2a68:	23 17       	cp	r18, r19
    2a6a:	58 f3       	brcs	.-42     	; 0x2a42 <ReadCapacity+0x54>

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2a6c:	08 60       	ori	r16, 0x08	; 8
        return;
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
    2a6e:	10 92 82 01 	sts	0x0182, r1
    2a72:	10 92 81 01 	sts	0x0181, r1
  vloss = 0;				// set lost voltage to zero
#endif
  cap.cval = 0;				// set capacity value to zero
    2a76:	10 92 75 01 	sts	0x0175, r1
    2a7a:	10 92 76 01 	sts	0x0176, r1
    2a7e:	10 92 77 01 	sts	0x0177, r1
    2a82:	10 92 78 01 	sts	0x0178, r1
  cap.cpre = -12;			//default unit is pF
    2a86:	84 ef       	ldi	r24, 0xF4	; 244
    2a88:	80 93 87 01 	sts	0x0187, r24
  EntladePins();			// discharge capacitor
    2a8c:	0e 94 ad 01 	call	0x35a	; 0x35a <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    2a90:	88 e0       	ldi	r24, 0x08	; 8
    2a92:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    2a94:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    2a96:	07 b9       	out	0x07, r16	; 7
//  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  R_DDR = 0;				// set all R Ports to input (no current)
    2a98:	14 b8       	out	0x04, r1	; 4
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    2a9a:	81 2f       	mov	r24, r17
    2a9c:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
    2aa0:	7c 01       	movw	r14, r24
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2aa2:	10 92 5e 01 	sts	0x015E, r1
    2aa6:	10 92 5d 01 	sts	0x015D, r1
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
  R_PORT = 0;				// switch R-Port to GND
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
//  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  R_DDR = 0;				// set all R Ports to input (no current)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    2aaa:	ec 01       	movw	r28, r24
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2aac:	2d c0       	rjmp	.+90     	; 0x2b08 <ReadCapacity+0x11a>
     R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    2aae:	a5 b8       	out	0x05, r10	; 5
     R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    2ab0:	a4 b8       	out	0x04, r10	; 4
     wait10ms();			// wait exactly 10ms, do not sleep
    2ab2:	0e 94 46 14 	call	0x288c	; 0x288c <wait10ms>
     R_DDR = 0;				// switch back to input
    2ab6:	14 b8       	out	0x04, r1	; 4
     R_PORT = 0;			// no Pull up
    2ab8:	15 b8       	out	0x05, r1	; 5
     wait500us();			//wait a little time
    2aba:	0e 94 4c 14 	call	0x2898	; 0x2898 <wait500us>
     wdt_reset();
    2abe:	a8 95       	wdr
     // read voltage without current, is already charged enough?
     adcv[2] = ReadADC(HighPin);
    2ac0:	81 2f       	mov	r24, r17
    2ac2:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
     if (adcv[2] > adcv[0]) {
    2ac6:	e8 16       	cp	r14, r24
    2ac8:	f9 06       	cpc	r15, r25
    2aca:	20 f4       	brcc	.+8      	; 0x2ad4 <ReadCapacity+0xe6>
        adcv[2] -= adcv[0];		//difference to beginning voltage
    2acc:	ec 01       	movw	r28, r24
    2ace:	ce 19       	sub	r28, r14
    2ad0:	df 09       	sbc	r29, r15
    2ad2:	02 c0       	rjmp	.+4      	; 0x2ad8 <ReadCapacity+0xea>
     } else {
        adcv[2] = 0;			// voltage is lower or same as beginning voltage
    2ad4:	c0 e0       	ldi	r28, 0x00	; 0
    2ad6:	d0 e0       	ldi	r29, 0x00	; 0
     }
     if ((ovcnt16 == 126) && (adcv[2] < 75)) {
    2ad8:	80 91 5d 01 	lds	r24, 0x015D
    2adc:	90 91 5e 01 	lds	r25, 0x015E
    2ae0:	8e 37       	cpi	r24, 0x7E	; 126
    2ae2:	91 05       	cpc	r25, r1
    2ae4:	21 f4       	brne	.+8      	; 0x2aee <ReadCapacity+0x100>
    2ae6:	cb 34       	cpi	r28, 0x4B	; 75
    2ae8:	d1 05       	cpc	r29, r1
    2aea:	08 f4       	brcc	.+2      	; 0x2aee <ReadCapacity+0x100>
    2aec:	37 c2       	rjmp	.+1134   	; 0x2f5c <ReadCapacity+0x56e>
        // 300mV can not be reached well-timed 
        break;		// don't try to load any more
     }
     if (adcv[2] > 300) {
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	cd 32       	cpi	r28, 0x2D	; 45
    2af2:	d8 07       	cpc	r29, r24
    2af4:	b0 f4       	brcc	.+44     	; 0x2b22 <ReadCapacity+0x134>
//  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  R_DDR = 0;				// set all R Ports to input (no current)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2af6:	80 91 5d 01 	lds	r24, 0x015D
    2afa:	90 91 5e 01 	lds	r25, 0x015E
    2afe:	01 96       	adiw	r24, 0x01	; 1
    2b00:	90 93 5e 01 	sts	0x015E, r25
    2b04:	80 93 5d 01 	sts	0x015D, r24
    2b08:	80 91 5d 01 	lds	r24, 0x015D
    2b0c:	90 91 5e 01 	lds	r25, 0x015E
    2b10:	21 e0       	ldi	r18, 0x01	; 1
    2b12:	84 3f       	cpi	r24, 0xF4	; 244
    2b14:	92 07       	cpc	r25, r18
    2b16:	58 f2       	brcs	.-106    	; 0x2aae <ReadCapacity+0xc0>
//  wdt_reset();
#if DebugOut == 10
  DisplayValue(ovcnt16,0,' ',4);
  DisplayValue(adcv[2],-3,'V',4);
#endif
  if (adcv[2] < 301) {
    2b18:	41 e0       	ldi	r20, 0x01	; 1
    2b1a:	cd 32       	cpi	r28, 0x2D	; 45
    2b1c:	d4 07       	cpc	r29, r20
    2b1e:	08 f4       	brcc	.+2      	; 0x2b22 <ReadCapacity+0x134>
    2b20:	1d c2       	rjmp	.+1082   	; 0x2f5c <ReadCapacity+0x56e>
#endif
//     if (NumOfDiodes != 0) goto messe_mit_rh; /* ****************************** */
     goto keinC;		// was never charged enough, >100mF or shorted
  }
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    2b22:	80 91 5d 01 	lds	r24, 0x015D
    2b26:	90 91 5e 01 	lds	r25, 0x015E
    2b2a:	00 97       	sbiw	r24, 0x00	; 0
    2b2c:	81 f4       	brne	.+32     	; 0x2b4e <ReadCapacity+0x160>
    2b2e:	85 e0       	ldi	r24, 0x05	; 5
    2b30:	c5 31       	cpi	r28, 0x15	; 21
    2b32:	d8 07       	cpc	r29, r24
    2b34:	08 f0       	brcs	.+2      	; 0x2b38 <ReadCapacity+0x14a>
    2b36:	92 c0       	rjmp	.+292    	; 0x2c5c <ReadCapacity+0x26e>
    2b38:	0a c0       	rjmp	.+20     	; 0x2b4e <ReadCapacity+0x160>
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
     wait5ms();
    2b3a:	0e 94 47 14 	call	0x288e	; 0x288e <wait5ms>
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
    2b3e:	81 2f       	mov	r24, r17
    2b40:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
     wdt_reset();
    2b44:	a8 95       	wdr
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2b46:	08 94       	sec
    2b48:	c1 1c       	adc	r12, r1
    2b4a:	d1 1c       	adc	r13, r1
    2b4c:	03 c0       	rjmp	.+6      	; 0x2b54 <ReadCapacity+0x166>
#endif
//     if (NumOfDiodes != 0) goto messe_mit_rh; /* ****************************** */
     goto keinC;		// was never charged enough, >100mF or shorted
  }
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    2b4e:	ce 01       	movw	r24, r28
    2b50:	cc 24       	eor	r12, r12
    2b52:	dd 24       	eor	r13, r13
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2b54:	20 91 5d 01 	lds	r18, 0x015D
    2b58:	30 91 5e 01 	lds	r19, 0x015E
    2b5c:	2c 15       	cp	r18, r12
    2b5e:	3d 05       	cpc	r19, r13
    2b60:	60 f7       	brcc	.-40     	; 0x2b3a <ReadCapacity+0x14c>
     wait5ms();
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
    2b62:	e8 16       	cp	r14, r24
    2b64:	f9 06       	cpc	r15, r25
    2b66:	30 f4       	brcc	.+12     	; 0x2b74 <ReadCapacity+0x186>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    2b68:	8e 19       	sub	r24, r14
    2b6a:	9f 09       	sbc	r25, r15
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    2b6c:	8c 17       	cp	r24, r28
    2b6e:	9d 07       	cpc	r25, r29
    2b70:	10 f5       	brcc	.+68     	; 0x2bb6 <ReadCapacity+0x1c8>
    2b72:	02 c0       	rjmp	.+4      	; 0x2b78 <ReadCapacity+0x18a>
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
    2b78:	7e 01       	movw	r14, r28
    2b7a:	e8 1a       	sub	r14, r24
    2b7c:	f9 0a       	sbc	r15, r25
  } else {
     adcv[3] = 0;			// no lost voltage
  }
#if FLASHEND > 0x1fff
  // compute equivalent parallel resistance from voltage drop
  if (adcv[3] > 0) {
    2b7e:	e9 f0       	breq	.+58     	; 0x2bba <ReadCapacity+0x1cc>
     // there is any voltage drop (adcv[3]) !
     // adcv[2] is the loaded voltage.
     vloss = (unsigned long)(adcv[3] * 1000UL) / adcv[2];
    2b80:	b7 01       	movw	r22, r14
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	28 ee       	ldi	r18, 0xE8	; 232
    2b88:	33 e0       	ldi	r19, 0x03	; 3
    2b8a:	40 e0       	ldi	r20, 0x00	; 0
    2b8c:	50 e0       	ldi	r21, 0x00	; 0
    2b8e:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
    2b92:	9e 01       	movw	r18, r28
    2b94:	40 e0       	ldi	r20, 0x00	; 0
    2b96:	50 e0       	ldi	r21, 0x00	; 0
    2b98:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
    2b9c:	49 01       	movw	r8, r18
  }
#endif
  if (adcv[3] > 100) {
    2b9e:	25 e6       	ldi	r18, 0x65	; 101
    2ba0:	e2 16       	cp	r14, r18
    2ba2:	f1 04       	cpc	r15, r1
    2ba4:	60 f0       	brcs	.+24     	; 0x2bbe <ReadCapacity+0x1d0>
 #if DebugOut == 10
     lcd_data('L');
     lcd_space();
     wait_about1s();
 #endif
     if (ovcnt16 == 0 )  {
    2ba6:	80 91 5d 01 	lds	r24, 0x015D
    2baa:	90 91 5e 01 	lds	r25, 0x015E
    2bae:	00 97       	sbiw	r24, 0x00	; 0
    2bb0:	09 f4       	brne	.+2      	; 0x2bb4 <ReadCapacity+0x1c6>
    2bb2:	56 c0       	rjmp	.+172    	; 0x2c60 <ReadCapacity+0x272>
    2bb4:	d3 c1       	rjmp	.+934    	; 0x2f5c <ReadCapacity+0x56e>
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    2bb6:	ee 24       	eor	r14, r14
    2bb8:	ff 24       	eor	r15, r15
  } else {
     adcv[3] = 0;			// no lost voltage
  }
#if FLASHEND > 0x1fff
  // compute equivalent parallel resistance from voltage drop
  if (adcv[3] > 0) {
    2bba:	88 24       	eor	r8, r8
    2bbc:	99 24       	eor	r9, r9
     if (ovcnt16 == 0 )  {
        goto messe_mit_rh;		// Voltage of more than 1300mV is reached in one pulse, but not hold
     }
     goto keinC;			// capacitor does not keep the voltage about 5ms
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
    2bbe:	a0 90 5d 01 	lds	r10, 0x015D
    2bc2:	b0 90 5e 01 	lds	r11, 0x015E
    2bc6:	08 94       	sec
    2bc8:	a1 1c       	adc	r10, r1
    2bca:	b1 1c       	adc	r11, r1
    2bcc:	cc 24       	eor	r12, r12
    2bce:	dd 24       	eor	r13, r13
    2bd0:	a0 92 7d 01 	sts	0x017D, r10
    2bd4:	b0 92 7e 01 	sts	0x017E, r11
    2bd8:	c0 92 7f 01 	sts	0x017F, r12
    2bdc:	d0 92 80 01 	sts	0x0180, r13
  // compute factor with load voltage + lost voltage during the voltage load time
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]+adcv[3]);	// get factor to convert time to capacity from table
    2be0:	c7 01       	movw	r24, r14
    2be2:	8c 0f       	add	r24, r28
    2be4:	9d 1f       	adc	r25, r29
    2be6:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <getRLmultip>
    2bea:	bc 01       	movw	r22, r24
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	a6 01       	movw	r20, r12
    2bf2:	95 01       	movw	r18, r10
    2bf4:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
    2bf8:	60 93 7d 01 	sts	0x017D, r22
    2bfc:	70 93 7e 01 	sts	0x017E, r23
    2c00:	80 93 7f 01 	sts	0x017F, r24
    2c04:	90 93 80 01 	sts	0x0180, r25
#endif
   cap.cval = cap.cval_uncorrected.dw;	// set result to uncorrected
    2c08:	60 93 75 01 	sts	0x0175, r22
    2c0c:	70 93 76 01 	sts	0x0176, r23
    2c10:	80 93 77 01 	sts	0x0177, r24
    2c14:	90 93 78 01 	sts	0x0178, r25
   cap.cpre = -9;		// switch units to nF 
    2c18:	87 ef       	ldi	r24, 0xF7	; 247
    2c1a:	80 93 87 01 	sts	0x0187, r24
   Scale_C_with_vcc();
    2c1e:	0e 94 a7 14 	call	0x294e	; 0x294e <Scale_C_with_vcc>
   // cap.cval for this type is at least 40000nF, so the last digit will be never shown
   cap.cval *= (1000 - C_H_KORR);	// correct with C_H_KORR with 0.1% resolution, but prevent overflow
    2c22:	60 91 75 01 	lds	r22, 0x0175
    2c26:	70 91 76 01 	lds	r23, 0x0176
    2c2a:	80 91 77 01 	lds	r24, 0x0177
    2c2e:	90 91 78 01 	lds	r25, 0x0178
    2c32:	28 ee       	ldi	r18, 0xE8	; 232
    2c34:	33 e0       	ldi	r19, 0x03	; 3
    2c36:	40 e0       	ldi	r20, 0x00	; 0
    2c38:	50 e0       	ldi	r21, 0x00	; 0
    2c3a:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
   cap.cval /= 100;
    2c3e:	24 e6       	ldi	r18, 0x64	; 100
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	40 e0       	ldi	r20, 0x00	; 0
    2c44:	50 e0       	ldi	r21, 0x00	; 0
    2c46:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
    2c4a:	20 93 75 01 	sts	0x0175, r18
    2c4e:	30 93 76 01 	sts	0x0176, r19
    2c52:	40 93 77 01 	sts	0x0177, r20
    2c56:	50 93 78 01 	sts	0x0178, r21
   DisplayValue(cap.cval,cap.cpre,'F',4);
   lcd_space();
   lcd_string(utoa(ovcnt16,outval,10));
   wait_about3s();
#endif
   goto checkDiodes;
    2c5a:	41 c1       	rjmp	.+642    	; 0x2ede <ReadCapacity+0x4f0>
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
  vloss = 0;				// set lost voltage to zero
    2c5c:	88 24       	eor	r8, r8
    2c5e:	99 24       	eor	r9, r9
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
  HiPinR_L = pgm_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load
    2c60:	ea 2c       	mov	r14, r10
    2c62:	ee 0c       	add	r14, r14

//==================================================================================
// Measurement of little capacity values
messe_mit_rh:
  //little capacity value, about  < 50 µF
  EntladePins();			// discharge capacitor
    2c64:	0e 94 ad 01 	call	0x35a	; 0x35a <EntladePins>
  //measure with the R_H (470kOhm) resistor 
  R_PORT = 0;		// R_DDR ist HiPinR_L
    2c68:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = (1<<TP1) | (1<<TP2) | (1<<TP3) | (1<<TxD);	//switch all Pins to output
    2c6a:	8f e0       	ldi	r24, 0x0F	; 15
    2c6c:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		//switch all ADC Pins to GND
    2c6e:	88 e0       	ldi	r24, 0x08	; 8
    2c70:	88 b9       	out	0x08, r24	; 8
  R_DDR = HiPinR_H;   		// switch R_H resistor port for HighPin to output (GND)
    2c72:	e4 b8       	out	0x04, r14	; 4
// setup Analog Comparator
  ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    2c74:	80 e4       	ldi	r24, 0x40	; 64
    2c76:	80 93 7b 00 	sts	0x007B, r24
  ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    2c7a:	84 e5       	ldi	r24, 0x54	; 84
    2c7c:	80 bf       	out	0x30, r24	; 48
  ADMUX = (1<<REFS0) | HighPin;			// switch Mux to High-Pin
    2c7e:	81 2f       	mov	r24, r17
    2c80:	80 64       	ori	r24, 0x40	; 64
    2c82:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    2c86:	86 e1       	ldi	r24, 0x16	; 22
    2c88:	80 93 7a 00 	sts	0x007A, r24
  wait200us();			//wait for bandgap to start up
    2c8c:	0e 94 4f 14 	call	0x289e	; 0x289e <wait200us>

// setup Counter1
  ovcnt16 = 0;
    2c90:	10 92 5e 01 	sts	0x015E, r1
    2c94:	10 92 5d 01 	sts	0x015D, r1
  TCCR1A = 0;			// set Counter1 to normal Mode
    2c98:	10 92 80 00 	sts	0x0080, r1
  TCNT1 = 0;			//set Counter to 0
    2c9c:	10 92 85 00 	sts	0x0085, r1
    2ca0:	10 92 84 00 	sts	0x0084, r1
  TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// clear interrupt flags
    2ca4:	87 e2       	ldi	r24, 0x27	; 39
    2ca6:	86 bb       	out	0x16, r24	; 22
#ifndef INHIBIT_SLEEP_MODE
  TIMSK1 = (1<<TOIE1) | (1<<ICIE1);	// enable Timer overflow interrupt and input capture interrupt
    2ca8:	81 e2       	ldi	r24, 0x21	; 33
    2caa:	80 93 6f 00 	sts	0x006F, r24
  unfinished = 1;
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	80 93 74 01 	sts	0x0174, r24
#endif
  R_PORT = HiPinR_H;           	// switch R_H resistor port for HighPin to VCC
    2cb4:	e5 b8       	out	0x05, r14	; 5
  if(PartFound == PART_FET) {
    2cb6:	90 91 07 01 	lds	r25, 0x0107
    2cba:	93 30       	cpi	r25, 0x03	; 3
    2cbc:	71 f4       	brne	.+28     	; 0x2cda <ReadCapacity+0x2ec>
     // charge capacitor with R_H resistor
     TCCR1B = (0<<ICNC1) | (1<<CS10);	//Start counter 1MHz or 8MHz without Noise Canceler
    2cbe:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = (((1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK) & ~(1<<HighPin));	// release only HighPin ADC port
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	01 2e       	mov	r0, r17
    2cc8:	02 c0       	rjmp	.+4      	; 0x2cce <ReadCapacity+0x2e0>
    2cca:	88 0f       	add	r24, r24
    2ccc:	99 1f       	adc	r25, r25
    2cce:	0a 94       	dec	r0
    2cd0:	e2 f7       	brpl	.-8      	; 0x2cca <ReadCapacity+0x2dc>
    2cd2:	80 95       	com	r24
    2cd4:	8f 70       	andi	r24, 0x0F	; 15
    2cd6:	87 b9       	out	0x07, r24	; 7
    2cd8:	03 c0       	rjmp	.+6      	; 0x2ce0 <ReadCapacity+0x2f2>
  } else {
     TCCR1B =  (0<<ICNC1) | (1<<CS10);	//start counter 1MHz or 8MHz without Noise Canceler
    2cda:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
    2cde:	07 b9       	out	0x07, r16	; 7
     // this OV was not counted, but was before the Input Capture
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
     ovcnt16++;
  }
#else
  cli();		// disable interrupts to prevent wakeup Interrupts before sleeping
    2ce0:	f8 94       	cli
  set_sleep_mode(SLEEP_MODE_IDLE);
    2ce2:	83 b7       	in	r24, 0x33	; 51
    2ce4:	81 7f       	andi	r24, 0xF1	; 241
    2ce6:	83 bf       	out	0x33, r24	; 51
  while(unfinished) {
    2ce8:	12 c0       	rjmp	.+36     	; 0x2d0e <ReadCapacity+0x320>
    sleep_enable();
    2cea:	83 b7       	in	r24, 0x33	; 51
    2cec:	81 60       	ori	r24, 0x01	; 1
    2cee:	83 bf       	out	0x33, r24	; 51
    sei();		// enable interrupts after next instruction
    2cf0:	78 94       	sei
    sleep_cpu();	// only enable interrupts during sleeping
    2cf2:	88 95       	sleep
    sleep_disable();
    2cf4:	83 b7       	in	r24, 0x33	; 51
    2cf6:	8e 7f       	andi	r24, 0xFE	; 254
    2cf8:	83 bf       	out	0x33, r24	; 51
    cli();		// disable interrupts again
    2cfa:	f8 94       	cli
    wdt_reset();	// reset watch dog during waiting
    2cfc:	a8 95       	wdr
    if(ovcnt16 == (F_CPU/5000)) {
    2cfe:	80 91 5d 01 	lds	r24, 0x015D
    2d02:	90 91 5e 01 	lds	r25, 0x015E
    2d06:	46 e0       	ldi	r20, 0x06	; 6
    2d08:	80 34       	cpi	r24, 0x40	; 64
    2d0a:	94 07       	cpc	r25, r20
    2d0c:	21 f0       	breq	.+8      	; 0x2d16 <ReadCapacity+0x328>
     ovcnt16++;
  }
#else
  cli();		// disable interrupts to prevent wakeup Interrupts before sleeping
  set_sleep_mode(SLEEP_MODE_IDLE);
  while(unfinished) {
    2d0e:	80 91 74 01 	lds	r24, 0x0174
    2d12:	88 23       	and	r24, r24
    2d14:	51 f7       	brne	.-44     	; 0x2cea <ReadCapacity+0x2fc>
    wdt_reset();	// reset watch dog during waiting
    if(ovcnt16 == (F_CPU/5000)) {
       break; 		//Timeout for Charging, above 12 s
    }
  }
  sei();		// enable interrupts again
    2d16:	78 94       	sei
  TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    2d18:	10 92 81 00 	sts	0x0081, r1
  tmpint = ICR1;		// get previous Input Capture Counter flag
    2d1c:	c0 91 86 00 	lds	r28, 0x0086
    2d20:	d0 91 87 00 	lds	r29, 0x0087
  TIMSK1 = (0<<TOIE1) | (0<<ICIE1);	// disable Timer overflow interrupt and input capture interrupt
    2d24:	10 92 6f 00 	sts	0x006F, r1
    lcd_string(utoa(tmpint,outval,10));
  }
#endif

//############################################################
  ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    2d28:	86 e9       	ldi	r24, 0x96	; 150
    2d2a:	80 93 7a 00 	sts	0x007A, r24
  R_DDR = 0;			// switch R_H resistor port for input
    2d2e:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// switch R_H resistor port pull up for HighPin off
    2d30:	15 b8       	out	0x05, r1	; 5
  adcv[2] = ReadADC(HighPin);   // get loaded voltage
    2d32:	81 2f       	mov	r24, r17
    2d34:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
  load_diff = adcv[2] + REF_C_KORR - ref_mv;	// build difference of capacitor voltage to Reference Voltage
    2d38:	20 91 44 01 	lds	r18, 0x0144
    2d3c:	30 91 45 01 	lds	r19, 0x0145
    2d40:	82 1b       	sub	r24, r18
    2d42:	93 0b       	sbc	r25, r19
    2d44:	0c 96       	adiw	r24, 0x0c	; 12
    2d46:	90 93 8a 01 	sts	0x018A, r25
    2d4a:	80 93 89 01 	sts	0x0189, r24
//############################################################
  if (ovcnt16 >= (F_CPU/10000)) {
    2d4e:	80 91 5d 01 	lds	r24, 0x015D
    2d52:	90 91 5e 01 	lds	r25, 0x015E
    2d56:	23 e0       	ldi	r18, 0x03	; 3
    2d58:	80 32       	cpi	r24, 0x20	; 32
    2d5a:	92 07       	cpc	r25, r18
    2d5c:	08 f0       	brcs	.+2      	; 0x2d60 <ReadCapacity+0x372>
    2d5e:	fe c0       	rjmp	.+508    	; 0x2f5c <ReadCapacity+0x56e>
     wait_about1s();
#endif
     goto keinC;	// no normal end
  }
//  cap.cval_uncorrected = CombineII2Long(ovcnt16, tmpint);
  cap.cval_uncorrected.w[1] = ovcnt16;
    2d60:	80 91 5d 01 	lds	r24, 0x015D
    2d64:	90 91 5e 01 	lds	r25, 0x015E
    2d68:	90 93 80 01 	sts	0x0180, r25
    2d6c:	80 93 7f 01 	sts	0x017F, r24
  cap.cval_uncorrected.w[0] = tmpint;
    2d70:	d0 93 7e 01 	sts	0x017E, r29
    2d74:	c0 93 7d 01 	sts	0x017D, r28

  cap.cpre = -12;			// cap.cval unit is pF 
    2d78:	84 ef       	ldi	r24, 0xF4	; 244
    2d7a:	80 93 87 01 	sts	0x0187, r24
  if (ovcnt16 > 65) {
    2d7e:	80 91 5d 01 	lds	r24, 0x015D
    2d82:	90 91 5e 01 	lds	r25, 0x015E
    2d86:	82 34       	cpi	r24, 0x42	; 66
    2d88:	91 05       	cpc	r25, r1
    2d8a:	c8 f0       	brcs	.+50     	; 0x2dbe <ReadCapacity+0x3d0>
     cap.cval_uncorrected.dw /= 100;	// switch to next unit
    2d8c:	60 91 7d 01 	lds	r22, 0x017D
    2d90:	70 91 7e 01 	lds	r23, 0x017E
    2d94:	80 91 7f 01 	lds	r24, 0x017F
    2d98:	90 91 80 01 	lds	r25, 0x0180
    2d9c:	24 e6       	ldi	r18, 0x64	; 100
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	40 e0       	ldi	r20, 0x00	; 0
    2da2:	50 e0       	ldi	r21, 0x00	; 0
    2da4:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
    2da8:	20 93 7d 01 	sts	0x017D, r18
    2dac:	30 93 7e 01 	sts	0x017E, r19
    2db0:	40 93 7f 01 	sts	0x017F, r20
    2db4:	50 93 80 01 	sts	0x0180, r21
     cap.cpre += 2;			// set unit, prevent overflow
    2db8:	86 ef       	ldi	r24, 0xF6	; 246
    2dba:	80 93 87 01 	sts	0x0187, r24
  }
  cap.cval_uncorrected.dw *= RHmultip;		// 708
    2dbe:	60 91 00 01 	lds	r22, 0x0100
    2dc2:	70 91 01 01 	lds	r23, 0x0101
    2dc6:	80 e0       	ldi	r24, 0x00	; 0
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	20 91 7d 01 	lds	r18, 0x017D
    2dce:	30 91 7e 01 	lds	r19, 0x017E
    2dd2:	40 91 7f 01 	lds	r20, 0x017F
    2dd6:	50 91 80 01 	lds	r21, 0x0180
    2dda:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
  cap.cval_uncorrected.dw /= (F_CPU / 10000);	// divide by 100 (@ 1MHz clock), 800 (@ 8MHz clock)
    2dde:	20 e2       	ldi	r18, 0x20	; 32
    2de0:	33 e0       	ldi	r19, 0x03	; 3
    2de2:	40 e0       	ldi	r20, 0x00	; 0
    2de4:	50 e0       	ldi	r21, 0x00	; 0
    2de6:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
    2dea:	20 93 7d 01 	sts	0x017D, r18
    2dee:	30 93 7e 01 	sts	0x017E, r19
    2df2:	40 93 7f 01 	sts	0x017F, r20
    2df6:	50 93 80 01 	sts	0x0180, r21
  cap.cval = cap.cval_uncorrected.dw;		// set the corrected cap.cval
    2dfa:	e5 e7       	ldi	r30, 0x75	; 117
    2dfc:	f1 e0       	ldi	r31, 0x01	; 1
    2dfe:	20 93 75 01 	sts	0x0175, r18
    2e02:	31 83       	std	Z+1, r19	; 0x01
    2e04:	42 83       	std	Z+2, r20	; 0x02
    2e06:	53 83       	std	Z+3, r21	; 0x03
  Scale_C_with_vcc();
    2e08:	0e 94 a7 14 	call	0x294e	; 0x294e <Scale_C_with_vcc>
  if (cap.cpre == -12) {
    2e0c:	80 91 87 01 	lds	r24, 0x0187
    2e10:	84 3f       	cpi	r24, 0xF4	; 244
    2e12:	09 f0       	breq	.+2      	; 0x2e16 <ReadCapacity+0x428>
    2e14:	55 c0       	rjmp	.+170    	; 0x2ec0 <ReadCapacity+0x4d2>
#if COMP_SLEW1 > COMP_SLEW2
     if (cap.cval < COMP_SLEW1) {
    2e16:	c0 90 75 01 	lds	r12, 0x0175
    2e1a:	d0 90 76 01 	lds	r13, 0x0176
    2e1e:	e0 90 77 01 	lds	r14, 0x0177
    2e22:	f0 90 78 01 	lds	r15, 0x0178
    2e26:	40 ea       	ldi	r20, 0xA0	; 160
    2e28:	c4 16       	cp	r12, r20
    2e2a:	4f e0       	ldi	r20, 0x0F	; 15
    2e2c:	d4 06       	cpc	r13, r20
    2e2e:	40 e0       	ldi	r20, 0x00	; 0
    2e30:	e4 06       	cpc	r14, r20
    2e32:	40 e0       	ldi	r20, 0x00	; 0
    2e34:	f4 06       	cpc	r15, r20
    2e36:	c0 f4       	brcc	.+48     	; 0x2e68 <ReadCapacity+0x47a>
        // add slew rate dependent offset
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
    2e38:	a7 01       	movw	r20, r14
    2e3a:	96 01       	movw	r18, r12
    2e3c:	24 52       	subi	r18, 0x24	; 36
    2e3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e40:	4f 4f       	sbci	r20, 0xFF	; 255
    2e42:	5f 4f       	sbci	r21, 0xFF	; 255
    2e44:	60 ea       	ldi	r22, 0xA0	; 160
    2e46:	7f e0       	ldi	r23, 0x0F	; 15
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
    2e50:	2c 0d       	add	r18, r12
    2e52:	3d 1d       	adc	r19, r13
    2e54:	4e 1d       	adc	r20, r14
    2e56:	5f 1d       	adc	r21, r15
    2e58:	20 93 75 01 	sts	0x0175, r18
    2e5c:	30 93 76 01 	sts	0x0176, r19
    2e60:	40 93 77 01 	sts	0x0177, r20
    2e64:	50 93 78 01 	sts	0x0178, r21
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2e68:	80 91 5c 01 	lds	r24, 0x015C
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	84 56       	subi	r24, 0x64	; 100
    2e70:	9e 4f       	sbci	r25, 0xFE	; 254
    2e72:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <__eerd_byte_m168>
     if (cap.cval > tmpint) {
    2e76:	20 91 75 01 	lds	r18, 0x0175
    2e7a:	30 91 76 01 	lds	r19, 0x0176
    2e7e:	40 91 77 01 	lds	r20, 0x0177
    2e82:	50 91 78 01 	lds	r21, 0x0178
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2e86:	90 e0       	ldi	r25, 0x00	; 0
     if (cap.cval > tmpint) {
    2e88:	a0 e0       	ldi	r26, 0x00	; 0
    2e8a:	b0 e0       	ldi	r27, 0x00	; 0
    2e8c:	82 17       	cp	r24, r18
    2e8e:	93 07       	cpc	r25, r19
    2e90:	a4 07       	cpc	r26, r20
    2e92:	b5 07       	cpc	r27, r21
    2e94:	68 f4       	brcc	.+26     	; 0x2eb0 <ReadCapacity+0x4c2>
         cap.cval -= tmpint;		//subtract zero offset (pF)
    2e96:	28 1b       	sub	r18, r24
    2e98:	39 0b       	sbc	r19, r25
    2e9a:	4a 0b       	sbc	r20, r26
    2e9c:	5b 0b       	sbc	r21, r27
    2e9e:	20 93 75 01 	sts	0x0175, r18
    2ea2:	30 93 76 01 	sts	0x0176, r19
    2ea6:	40 93 77 01 	sts	0x0177, r20
    2eaa:	50 93 78 01 	sts	0x0178, r21
    2eae:	08 c0       	rjmp	.+16     	; 0x2ec0 <ReadCapacity+0x4d2>
         lcd_testpin(HighPin);
         lcd_space();
#endif
       }
#endif
         cap.cval = 0;			//unsigned long may not reach negativ value
    2eb0:	10 92 75 01 	sts	0x0175, r1
    2eb4:	10 92 76 01 	sts	0x0176, r1
    2eb8:	10 92 77 01 	sts	0x0177, r1
    2ebc:	10 92 78 01 	sts	0x0178, r1
  lcd_testpin(HighPin);
  lcd_space();
  DisplayValue(cap.cval,cap.cpre,'F',4);
  wait_about3s();
#endif
  R_DDR = HiPinR_L; 		//switch R_L for High-Pin to GND
    2ec0:	a4 b8       	out	0x04, r10	; 4
#if F_CPU < 2000001
   if(cap.cval < 50)
#else 
   if(cap.cval < 25)
    2ec2:	80 91 75 01 	lds	r24, 0x0175
    2ec6:	90 91 76 01 	lds	r25, 0x0176
    2eca:	a0 91 77 01 	lds	r26, 0x0177
    2ece:	b0 91 78 01 	lds	r27, 0x0178
    2ed2:	89 31       	cpi	r24, 0x19	; 25
    2ed4:	91 05       	cpc	r25, r1
    2ed6:	a1 05       	cpc	r26, r1
    2ed8:	b1 05       	cpc	r27, r1
    2eda:	08 f4       	brcc	.+2      	; 0x2ede <ReadCapacity+0x4f0>
    2edc:	3f c0       	rjmp	.+126    	; 0x2f5c <ReadCapacity+0x56e>
#endif
      goto keinC;	//capacity to low, < 50pF @1MHz (25pF @8MHz)
   }
   // end low capacity 
checkDiodes:
   if((NumOfDiodes > 0)  && (PartFound != PART_FET)) {
    2ede:	80 91 05 01 	lds	r24, 0x0105
    2ee2:	88 23       	and	r24, r24
    2ee4:	21 f0       	breq	.+8      	; 0x2eee <ReadCapacity+0x500>
    2ee6:	80 91 07 01 	lds	r24, 0x0107
    2eea:	83 30       	cpi	r24, 0x03	; 3
    2eec:	b9 f5       	brne	.+110    	; 0x2f5c <ReadCapacity+0x56e>
      wait_about1s();
#endif
      // nearly shure, that there is one or more diodes in reverse direction,
      // which would be wrongly detected as capacitor 
   } else {
      PartFound = PART_CAPACITOR;	//capacitor is found
    2eee:	87 e0       	ldi	r24, 0x07	; 7
    2ef0:	80 93 07 01 	sts	0x0107, r24
      if ((cap.cpre > cap.cpre_max) || ((cap.cpre == cap.cpre_max) && (cap.cval > cap.cval_max))) {
    2ef4:	60 91 87 01 	lds	r22, 0x0187
    2ef8:	80 91 88 01 	lds	r24, 0x0188
    2efc:	86 17       	cp	r24, r22
    2efe:	bc f0       	brlt	.+46     	; 0x2f2e <ReadCapacity+0x540>
    2f00:	68 17       	cp	r22, r24
    2f02:	61 f5       	brne	.+88     	; 0x2f5c <ReadCapacity+0x56e>
    2f04:	20 91 75 01 	lds	r18, 0x0175
    2f08:	30 91 76 01 	lds	r19, 0x0176
    2f0c:	40 91 77 01 	lds	r20, 0x0177
    2f10:	50 91 78 01 	lds	r21, 0x0178
    2f14:	80 91 79 01 	lds	r24, 0x0179
    2f18:	90 91 7a 01 	lds	r25, 0x017A
    2f1c:	a0 91 7b 01 	lds	r26, 0x017B
    2f20:	b0 91 7c 01 	lds	r27, 0x017C
    2f24:	82 17       	cp	r24, r18
    2f26:	93 07       	cpc	r25, r19
    2f28:	a4 07       	cpc	r26, r20
    2f2a:	b5 07       	cpc	r27, r21
    2f2c:	b8 f4       	brcc	.+46     	; 0x2f5c <ReadCapacity+0x56e>
         // we have found a greater one
         cap.cval_max = cap.cval;
    2f2e:	e5 e7       	ldi	r30, 0x75	; 117
    2f30:	f1 e0       	ldi	r31, 0x01	; 1
    2f32:	80 91 75 01 	lds	r24, 0x0175
    2f36:	90 91 76 01 	lds	r25, 0x0176
    2f3a:	a0 91 77 01 	lds	r26, 0x0177
    2f3e:	b0 91 78 01 	lds	r27, 0x0178
    2f42:	80 93 79 01 	sts	0x0179, r24
    2f46:	90 93 7a 01 	sts	0x017A, r25
    2f4a:	a0 93 7b 01 	sts	0x017B, r26
    2f4e:	b0 93 7c 01 	sts	0x017C, r27
         cap.cpre_max = cap.cpre;
    2f52:	63 8b       	std	Z+19, r22	; 0x13
#if FLASHEND > 0x1fff
         cap.v_loss = vloss;		// lost voltage in 0.01%
    2f54:	97 86       	std	Z+15, r9	; 0x0f
    2f56:	86 86       	std	Z+14, r8	; 0x0e
#endif
         cap.ca = LowPin;		// save LowPin
    2f58:	70 8a       	std	Z+16, r7	; 0x10
         cap.cb = HighPin;		// save HighPin
    2f5a:	11 8b       	std	Z+17, r17	; 0x11
keinC:
  // discharge capacitor again
//  EntladePins();		// discharge capacitors
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    2f5c:	88 e0       	ldi	r24, 0x08	; 8
    2f5e:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    2f60:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    2f62:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    2f64:	15 b8       	out	0x05, r1	; 5
  return;
 } // end ReadCapacity()
    2f66:	df 91       	pop	r29
    2f68:	cf 91       	pop	r28
    2f6a:	1f 91       	pop	r17
    2f6c:	0f 91       	pop	r16
    2f6e:	ff 90       	pop	r15
    2f70:	ef 90       	pop	r14
    2f72:	df 90       	pop	r13
    2f74:	cf 90       	pop	r12
    2f76:	bf 90       	pop	r11
    2f78:	af 90       	pop	r10
    2f7a:	9f 90       	pop	r9
    2f7c:	8f 90       	pop	r8
    2f7e:	7f 90       	pop	r7
    2f80:	08 95       	ret

00002f82 <__vector_13>:
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
}
#ifndef INHIBIT_SLEEP_MODE
/* Interrupt Service Routine for timer1 Overflow */
 ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    2f82:	1f 92       	push	r1
    2f84:	0f 92       	push	r0
    2f86:	0f b6       	in	r0, 0x3f	; 63
    2f88:	0f 92       	push	r0
    2f8a:	11 24       	eor	r1, r1
    2f8c:	8f 93       	push	r24
    2f8e:	9f 93       	push	r25
 if ((!(TI1_INT_FLAGS & (1<<ICF1)) && (unfinished !=0)) || ((TI1_INT_FLAGS & (1<<ICF1)) && (ICR1 < 250))) {
    2f90:	b5 99       	sbic	0x16, 5	; 22
    2f92:	04 c0       	rjmp	.+8      	; 0x2f9c <__vector_13+0x1a>
    2f94:	80 91 74 01 	lds	r24, 0x0174
    2f98:	88 23       	and	r24, r24
    2f9a:	49 f4       	brne	.+18     	; 0x2fae <__vector_13+0x2c>
    2f9c:	b5 9b       	sbis	0x16, 5	; 22
    2f9e:	10 c0       	rjmp	.+32     	; 0x2fc0 <__vector_13+0x3e>
    2fa0:	80 91 86 00 	lds	r24, 0x0086
    2fa4:	90 91 87 00 	lds	r25, 0x0087
    2fa8:	8a 3f       	cpi	r24, 0xFA	; 250
    2faa:	91 05       	cpc	r25, r1
    2fac:	48 f4       	brcc	.+18     	; 0x2fc0 <__vector_13+0x3e>
    // Capture Event not pending or (Capture Event pending and ICR1 < 250
    // the ICR1H is buffered and can not examined alone, we must read the ICR1L first (with ICR1 access) !
   ovcnt16++;				// count Overflow
    2fae:	80 91 5d 01 	lds	r24, 0x015D
    2fb2:	90 91 5e 01 	lds	r25, 0x015E
    2fb6:	01 96       	adiw	r24, 0x01	; 1
    2fb8:	90 93 5e 01 	sts	0x015E, r25
    2fbc:	80 93 5d 01 	sts	0x015D, r24
 }
}
    2fc0:	9f 91       	pop	r25
    2fc2:	8f 91       	pop	r24
    2fc4:	0f 90       	pop	r0
    2fc6:	0f be       	out	0x3f, r0	; 63
    2fc8:	0f 90       	pop	r0
    2fca:	1f 90       	pop	r1
    2fcc:	18 95       	reti

00002fce <__vector_10>:
/* Interrupt Service Routine for timer1 capture event (Comparator) */
 ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    2fce:	1f 92       	push	r1
    2fd0:	0f 92       	push	r0
    2fd2:	0f b6       	in	r0, 0x3f	; 63
    2fd4:	0f 92       	push	r0
    2fd6:	11 24       	eor	r1, r1
    2fd8:	8f 93       	push	r24
    2fda:	9f 93       	push	r25
 unfinished = 0;			// clear unfinished flag
    2fdc:	10 92 74 01 	sts	0x0174, r1
 // With unfinished set to 0, we prevent further counting the Overflow.s
 // Is already a Overflow detected?
 if((TI1_INT_FLAGS & (1<<TOV1))) {	// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    2fe0:	b0 9b       	sbis	0x16, 0	; 22
    2fe2:	10 c0       	rjmp	.+32     	; 0x3004 <__vector_10+0x36>
   //there is already a Overflow detected, before or after the capture event?
   // ICR1H is buffered and can not examined alone, we must read the ICR1L first (with ICR1 access) !
   if (ICR1 < 250) {
    2fe4:	80 91 86 00 	lds	r24, 0x0086
    2fe8:	90 91 87 00 	lds	r25, 0x0087
    2fec:	8a 3f       	cpi	r24, 0xFA	; 250
    2fee:	91 05       	cpc	r25, r1
    2ff0:	48 f4       	brcc	.+18     	; 0x3004 <__vector_10+0x36>
     //  Yes, Input Capture Counter is low, Overflow has occured before the capture event
     ovcnt16++;				// count Overflow
    2ff2:	80 91 5d 01 	lds	r24, 0x015D
    2ff6:	90 91 5e 01 	lds	r25, 0x015E
    2ffa:	01 96       	adiw	r24, 0x01	; 1
    2ffc:	90 93 5e 01 	sts	0x015E, r25
    3000:	80 93 5d 01 	sts	0x015D, r24
   }
 }
}
    3004:	9f 91       	pop	r25
    3006:	8f 91       	pop	r24
    3008:	0f 90       	pop	r0
    300a:	0f be       	out	0x3f, r0	; 63
    300c:	0f 90       	pop	r0
    300e:	1f 90       	pop	r1
    3010:	18 95       	reti

00003012 <get_log>:
 } // end ReadInductance()


#if FLASHEND > 0x1fff
// get_log interpolate a table with the function -log(1 - (permil/1000))
uint16_t get_log(uint16_t permil) {
    3012:	cf 93       	push	r28
    3014:	df 93       	push	r29
  uint16_t y1, y2;			// table values
  uint16_t result;			// result of interpolation
  uint8_t tabind;			// index to table value
  uint8_t tabres;			// distance to lower table value, fraction of Log_Tab_Distance

  tabind = permil / Log_Tab_Distance;	// index to table
    3016:	24 e1       	ldi	r18, 0x14	; 20
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	b9 01       	movw	r22, r18
    301c:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__udivmodhi4>
    3020:	dc 01       	movw	r26, r24
  tabres = permil % Log_Tab_Distance;	// fraction of table distance
  // interpolate the table of factors
  y1 = pgm_read_word(&LogTab[tabind]);	// get the lower table value
    3022:	70 e0       	ldi	r23, 0x00	; 0
    3024:	fb 01       	movw	r30, r22
    3026:	ee 0f       	add	r30, r30
    3028:	ff 1f       	adc	r31, r31
    302a:	e8 59       	subi	r30, 0x98	; 152
    302c:	ff 4f       	sbci	r31, 0xFF	; 255
    302e:	c5 91       	lpm	r28, Z+
    3030:	d4 91       	lpm	r29, Z+
  y2 = pgm_read_word(&LogTab[tabind+1]); // get the higher table value
    3032:	fb 01       	movw	r30, r22
    3034:	ee 0f       	add	r30, r30
    3036:	ff 1f       	adc	r31, r31
    3038:	e6 59       	subi	r30, 0x96	; 150
    303a:	ff 4f       	sbci	r31, 0xFF	; 255
    303c:	45 91       	lpm	r20, Z+
    303e:	54 91       	lpm	r21, Z+
  result = ((y2 - y1) * tabres ) / Log_Tab_Distance + y1; // interpolate
    3040:	4c 1b       	sub	r20, r28
    3042:	5d 0b       	sbc	r21, r29
    3044:	4a 9f       	mul	r20, r26
    3046:	c0 01       	movw	r24, r0
    3048:	4b 9f       	mul	r20, r27
    304a:	90 0d       	add	r25, r0
    304c:	5a 9f       	mul	r21, r26
    304e:	90 0d       	add	r25, r0
    3050:	11 24       	eor	r1, r1
    3052:	b9 01       	movw	r22, r18
    3054:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__udivmodhi4>
    3058:	6c 0f       	add	r22, r28
    305a:	7d 1f       	adc	r23, r29
  return(result);
 }
    305c:	cb 01       	movw	r24, r22
    305e:	df 91       	pop	r29
    3060:	cf 91       	pop	r28
    3062:	08 95       	ret

00003064 <ReadInductance>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadInductance(void) {
    3064:	2f 92       	push	r2
    3066:	3f 92       	push	r3
    3068:	4f 92       	push	r4
    306a:	5f 92       	push	r5
    306c:	6f 92       	push	r6
    306e:	7f 92       	push	r7
    3070:	8f 92       	push	r8
    3072:	9f 92       	push	r9
    3074:	af 92       	push	r10
    3076:	bf 92       	push	r11
    3078:	cf 92       	push	r12
    307a:	df 92       	push	r13
    307c:	ef 92       	push	r14
    307e:	ff 92       	push	r15
    3080:	0f 93       	push	r16
    3082:	1f 93       	push	r17
    3084:	df 93       	push	r29
    3086:	cf 93       	push	r28
    3088:	cd b7       	in	r28, 0x3d	; 61
    308a:	de b7       	in	r29, 0x3e	; 62
    308c:	68 97       	sbiw	r28, 0x18	; 24
    308e:	0f b6       	in	r0, 0x3f	; 63
    3090:	f8 94       	cli
    3092:	de bf       	out	0x3e, r29	; 62
    3094:	0f be       	out	0x3f, r0	; 63
    3096:	cd bf       	out	0x3d, r28	; 61
  int8_t ukorr;		// correction of comparator voltage
  uint8_t nr_pol1;	// number of successfull inductance measurement with polarity 1
  uint8_t nr_pol2;	// number of successfull inductance measurement with polarity 2


  if(PartFound != PART_RESISTOR) {
    3098:	80 91 07 01 	lds	r24, 0x0107
    309c:	86 30       	cpi	r24, 0x06	; 6
    309e:	09 f0       	breq	.+2      	; 0x30a2 <ReadInductance+0x3e>
    30a0:	4b c2       	rjmp	.+1174   	; 0x3538 <ReadInductance+0x4d4>
     return;	//We have found no resistor  
  }
  if (ResistorsFound != 1) {
    30a2:	80 91 73 01 	lds	r24, 0x0173
    30a6:	81 30       	cpi	r24, 0x01	; 1
    30a8:	09 f0       	breq	.+2      	; 0x30ac <ReadInductance+0x48>
    30aa:	46 c2       	rjmp	.+1164   	; 0x3538 <ReadInductance+0x4d4>
     return;	// do not search for inductance, more than 1 resistor
  }
//  for (found=0;found<ResistorsFound;found++) {
//     if (resis[found].rx > 21000) continue;
     if (resis[found].rx > 21000) return;
    30ac:	80 91 18 01 	lds	r24, 0x0118
    30b0:	90 91 19 01 	lds	r25, 0x0119
    30b4:	a0 91 1a 01 	lds	r26, 0x011A
    30b8:	b0 91 1b 01 	lds	r27, 0x011B
    30bc:	89 30       	cpi	r24, 0x09	; 9
    30be:	22 e5       	ldi	r18, 0x52	; 82
    30c0:	92 07       	cpc	r25, r18
    30c2:	20 e0       	ldi	r18, 0x00	; 0
    30c4:	a2 07       	cpc	r26, r18
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	b2 07       	cpc	r27, r18
    30ca:	08 f0       	brcs	.+2      	; 0x30ce <ReadInductance+0x6a>
    30cc:	35 c2       	rjmp	.+1130   	; 0x3538 <ReadInductance+0x4d4>
    30ce:	99 24       	eor	r9, r9
    30d0:	80 91 21 01 	lds	r24, 0x0121
    30d4:	40 90 22 01 	lds	r4, 0x0122

     // we can check for Inductance, if resistance is below 2100 Ohm
     for (count=0;count<4;count++) {
        // Try four times (different direction and with delayed counter start)
        if (count < 2) {
    30d8:	99 2d       	mov	r25, r9
    30da:	92 30       	cpi	r25, 0x02	; 2
    30dc:	10 f4       	brcc	.+4      	; 0x30e2 <ReadInductance+0x7e>
           // first and second pass, direction 1
           LowPin = resis[found].ra;
    30de:	88 2e       	mov	r8, r24
    30e0:	02 c0       	rjmp	.+4      	; 0x30e6 <ReadInductance+0x82>
           HighPin = resis[found].rb;
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    30e2:	84 2c       	mov	r8, r4
           HighPin = resis[found].ra;
    30e4:	48 2e       	mov	r4, r24
        }
        HiADC = pgm_read_byte(&PinADCtab[HighPin]);
    30e6:	e4 2d       	mov	r30, r4
    30e8:	f0 e0       	ldi	r31, 0x00	; 0
    30ea:	ed 5f       	subi	r30, 0xFD	; 253
    30ec:	fe 4f       	sbci	r31, 0xFE	; 254
    30ee:	24 91       	lpm	r18, Z+
        LoPinR_L = pgm_read_byte(&PinRLtab[LowPin]);	//R_L mask for HighPin R_L load
    30f0:	e8 2d       	mov	r30, r8
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	e0 50       	subi	r30, 0x00	; 0
    30f6:	ff 4f       	sbci	r31, 0xFF	; 255
    30f8:	e4 91       	lpm	r30, Z+
        //==================================================================================
        // Measurement of Inductance values
        R_PORT = 0;		// switch R port to GND
    30fa:	15 b8       	out	0x05, r1	; 5
        ADC_PORT =   TXD_VAL;		// switch ADC-Port to GND
    30fc:	a8 e0       	ldi	r26, 0x08	; 8
    30fe:	a8 b9       	out	0x08, r26	; 8
        if ((resis[found].rx < 240) && ((count & 0x01) == 0)) {
    3100:	80 91 18 01 	lds	r24, 0x0118
    3104:	90 91 19 01 	lds	r25, 0x0119
    3108:	a0 91 1a 01 	lds	r26, 0x011A
    310c:	b0 91 1b 01 	lds	r27, 0x011B
    3110:	80 3f       	cpi	r24, 0xF0	; 240
    3112:	91 05       	cpc	r25, r1
    3114:	a1 05       	cpc	r26, r1
    3116:	b1 05       	cpc	r27, r1
    3118:	b8 f4       	brcc	.+46     	; 0x3148 <ReadInductance+0xe4>
    311a:	90 fc       	sbrc	r9, 0
    311c:	15 c0       	rjmp	.+42     	; 0x3148 <ReadInductance+0xe4>
           // we can use PinR_L for measurement
           mess_r = RR680MI - R_L_VAL;			// use only pin output resistance
    311e:	a0 90 03 01 	lds	r10, 0x0103
    3122:	b0 90 04 01 	lds	r11, 0x0104
    3126:	80 e7       	ldi	r24, 0x70	; 112
    3128:	95 ee       	ldi	r25, 0xE5	; 229
    312a:	a8 0e       	add	r10, r24
    312c:	b9 1e       	adc	r11, r25
           ADC_DDR = HiADC | (1<<LowPin) | TXD_MSK;	// switch HiADC and Low Pin to GND, 
    312e:	32 2f       	mov	r19, r18
    3130:	38 60       	ori	r19, 0x08	; 8
    3132:	81 e0       	ldi	r24, 0x01	; 1
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	08 2c       	mov	r0, r8
    3138:	02 c0       	rjmp	.+4      	; 0x313e <ReadInductance+0xda>
    313a:	88 0f       	add	r24, r24
    313c:	99 1f       	adc	r25, r25
    313e:	0a 94       	dec	r0
    3140:	e2 f7       	brpl	.-8      	; 0x313a <ReadInductance+0xd6>
    3142:	38 2b       	or	r19, r24
    3144:	37 b9       	out	0x07, r19	; 7
    3146:	08 c0       	rjmp	.+16     	; 0x3158 <ReadInductance+0xf4>
        } else {
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
    3148:	e4 b9       	out	0x04, r30	; 4
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
    314a:	82 2f       	mov	r24, r18
    314c:	88 60       	ori	r24, 0x08	; 8
    314e:	87 b9       	out	0x07, r24	; 7
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
    3150:	a0 90 03 01 	lds	r10, 0x0103
    3154:	b0 90 04 01 	lds	r11, 0x0104
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    3158:	30 e0       	ldi	r19, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    315a:	88 2d       	mov	r24, r8
    315c:	28 8f       	std	Y+24, r18	; 0x18
    315e:	3f 8b       	std	Y+23, r19	; 0x17
    3160:	0e 94 bb 1a 	call	0x3576	; 0x3576 <W10msReadADC>
    3164:	6c 01       	movw	r12, r24
            total_r =  ReadADC(HighPin);
    3166:	84 2d       	mov	r24, r4
    3168:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
    316c:	ac 01       	movw	r20, r24
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    316e:	28 8d       	ldd	r18, Y+24	; 0x18
    3170:	3f 89       	ldd	r19, Y+23	; 0x17
    3172:	92 e0       	ldi	r25, 0x02	; 2
    3174:	c9 16       	cp	r12, r25
    3176:	d1 04       	cpc	r13, r1
    3178:	18 f4       	brcc	.+6      	; 0x3180 <ReadInductance+0x11c>
    317a:	42 30       	cpi	r20, 0x02	; 2
    317c:	51 05       	cpc	r21, r1
    317e:	18 f0       	brcs	.+6      	; 0x3186 <ReadInductance+0x122>
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    3180:	3f 5f       	subi	r19, 0xFF	; 255
    3182:	34 31       	cpi	r19, 0x14	; 20
    3184:	51 f7       	brne	.-44     	; 0x315a <ReadInductance+0xf6>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
        // setup Analog Comparator
        ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    3186:	a0 e4       	ldi	r26, 0x40	; 64
    3188:	a0 93 7b 00 	sts	0x007B, r26
        ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    318c:	b4 e5       	ldi	r27, 0x54	; 84
    318e:	b0 bf       	out	0x30, r27	; 48
        ADMUX = (1<<REFS0) | LowPin;			// switch Mux to Low-Pin
    3190:	88 2d       	mov	r24, r8
    3192:	80 64       	ori	r24, 0x40	; 64
    3194:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    3198:	86 e1       	ldi	r24, 0x16	; 22
    319a:	80 93 7a 00 	sts	0x007A, r24
   
      // setup Counter1
        timeconstant.w[1] = 0;		// set ov counter to 0
    319e:	00 e0       	ldi	r16, 0x00	; 0
    31a0:	10 e0       	ldi	r17, 0x00	; 0
        TCCR1A = 0;			// set Counter1 to normal Mode
    31a2:	10 92 80 00 	sts	0x0080, r1
        TCNT1 = 0;			//set Counter to 0
    31a6:	10 92 85 00 	sts	0x0085, r1
    31aa:	10 92 84 00 	sts	0x0084, r1
        TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// reset TIFR or TIFR1
    31ae:	97 e2       	ldi	r25, 0x27	; 39
    31b0:	96 bb       	out	0x16, r25	; 22
        HiADC |= TXD_VAL;
    31b2:	28 60       	ori	r18, 0x08	; 8
        wait200us();			// wait for bandgap to start up
    31b4:	28 8f       	std	Y+24, r18	; 0x18
    31b6:	0e 94 4f 14 	call	0x289e	; 0x289e <wait200us>
        if ((count & 0x01) == 0 ) {
    31ba:	29 2c       	mov	r2, r9
    31bc:	33 24       	eor	r3, r3
    31be:	d1 01       	movw	r26, r2
    31c0:	a1 70       	andi	r26, 0x01	; 1
    31c2:	b0 70       	andi	r27, 0x00	; 0
    31c4:	ba 8b       	std	Y+18, r27	; 0x12
    31c6:	a9 8b       	std	Y+17, r26	; 0x11
    31c8:	28 8d       	ldd	r18, Y+24	; 0x18
    31ca:	90 fc       	sbrc	r9, 0
    31cc:	05 c0       	rjmp	.+10     	; 0x31d8 <ReadInductance+0x174>
           //first start counter, then start current
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    31ce:	b1 e8       	ldi	r27, 0x81	; 129
    31d0:	b0 93 81 00 	sts	0x0081, r27
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    31d4:	28 b9       	out	0x08, r18	; 8
    31d6:	08 c0       	rjmp	.+16     	; 0x31e8 <ReadInductance+0x184>
        } else {
           //first start current, then start counter with delay
           //parasitic capacity of coil can cause high current at the beginning
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    31d8:	28 b9       	out	0x08, r18	; 8
      #if F_CPU >= 8000000UL
           wait3us();		// ignore current peak from capacity
    31da:	0e 94 58 14 	call	0x28b0	; 0x28b0 <wait3us>
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
    31de:	20 e2       	ldi	r18, 0x20	; 32
    31e0:	26 bb       	out	0x16, r18	; 22
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    31e2:	81 e8       	ldi	r24, 0x81	; 129
    31e4:	80 93 81 00 	sts	0x0081, r24
    31e8:	c8 01       	movw	r24, r16
        }
      
      //******************************
        while(1) {
           // Wait, until  Input Capture is set
           ii = TI1_INT_FLAGS;		//read Timer flags
    31ea:	46 b3       	in	r20, 0x16	; 22
           if (ii & (1<<ICF1))  {
    31ec:	45 ff       	sbrs	r20, 5
    31ee:	02 c0       	rjmp	.+4      	; 0x31f4 <ReadInductance+0x190>
    31f0:	8c 01       	movw	r16, r24
    31f2:	0b c0       	rjmp	.+22     	; 0x320a <ReadInductance+0x1a6>
              break;
           }
           if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    31f4:	40 ff       	sbrs	r20, 0
    31f6:	f9 cf       	rjmp	.-14     	; 0x31ea <ReadInductance+0x186>
              TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    31f8:	a1 e0       	ldi	r26, 0x01	; 1
    31fa:	a6 bb       	out	0x16, r26	; 22
              wdt_reset();
    31fc:	a8 95       	wdr
    31fe:	01 96       	adiw	r24, 0x01	; 1
              timeconstant.w[1]++;		// count one OV
              if(timeconstant.w[1] == (F_CPU/100000UL)) {
    3200:	80 35       	cpi	r24, 0x50	; 80
    3202:	91 05       	cpc	r25, r1
    3204:	91 f7       	brne	.-28     	; 0x31ea <ReadInductance+0x186>
    3206:	00 e5       	ldi	r16, 0x50	; 80
    3208:	10 e0       	ldi	r17, 0x00	; 0
                 break; 	//Timeout for Charging, above 0.13 s
              }
           }
        }
        TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    320a:	10 92 81 00 	sts	0x0081, r1
        TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    320e:	b0 e2       	ldi	r27, 0x20	; 32
    3210:	b6 bb       	out	0x16, r27	; 22
        timeconstant.w[0] = ICR1;		// get previous Input Capture Counter flag
    3212:	20 91 86 00 	lds	r18, 0x0086
    3216:	30 91 87 00 	lds	r19, 0x0087
    321a:	79 01       	movw	r14, r18
      // check actual counter, if an additional overflow must be added
        if((TCNT1 > timeconstant.w[0]) && (ii & (1<<TOV1))) {
    321c:	80 91 84 00 	lds	r24, 0x0084
    3220:	90 91 85 00 	lds	r25, 0x0085
    3224:	28 17       	cp	r18, r24
    3226:	39 07       	cpc	r19, r25
    3228:	30 f4       	brcc	.+12     	; 0x3236 <ReadInductance+0x1d2>
    322a:	40 ff       	sbrs	r20, 0
    322c:	04 c0       	rjmp	.+8      	; 0x3236 <ReadInductance+0x1d2>
           // this OV was not counted, but was before the Input Capture
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    322e:	21 e0       	ldi	r18, 0x01	; 1
    3230:	26 bb       	out	0x16, r18	; 22
           timeconstant.w[1]++;			// count one additional OV
    3232:	0f 5f       	subi	r16, 0xFF	; 255
    3234:	1f 4f       	sbci	r17, 0xFF	; 255
        }

        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    3236:	88 e0       	ldi	r24, 0x08	; 8
    3238:	88 b9       	out	0x08, r24	; 8
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    323a:	96 e9       	ldi	r25, 0x96	; 150
    323c:	90 93 7a 00 	sts	0x007A, r25
        for (ii=0;ii<20;ii++) {
    3240:	20 e0       	ldi	r18, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    3242:	88 2d       	mov	r24, r8
    3244:	28 8f       	std	Y+24, r18	; 0x18
    3246:	0e 94 bb 1a 	call	0x3576	; 0x3576 <W10msReadADC>
    324a:	6c 01       	movw	r12, r24
            total_r =  ReadADC(HighPin);
    324c:	84 2d       	mov	r24, r4
    324e:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    3252:	28 8d       	ldd	r18, Y+24	; 0x18
    3254:	a2 e0       	ldi	r26, 0x02	; 2
    3256:	ca 16       	cp	r12, r26
    3258:	d1 04       	cpc	r13, r1
    325a:	18 f4       	brcc	.+6      	; 0x3262 <ReadInductance+0x1fe>
    325c:	82 30       	cpi	r24, 0x02	; 2
    325e:	91 05       	cpc	r25, r1
    3260:	18 f0       	brcs	.+6      	; 0x3268 <ReadInductance+0x204>
           timeconstant.w[1]++;			// count one additional OV
        }

        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
        for (ii=0;ii<20;ii++) {
    3262:	2f 5f       	subi	r18, 0xFF	; 255
    3264:	24 31       	cpi	r18, 0x14	; 20
    3266:	69 f7       	brne	.-38     	; 0x3242 <ReadInductance+0x1de>
//  #undef CNT_ZERO_42
//  #undef CNT_ZERO_720
//  #define CNT_ZERO_42 7
//  #define CNT_ZERO_720 10
//#endif
        total_r = (mess_r + resis[found].rx + RRpinMI);
    3268:	c0 90 18 01 	lds	r12, 0x0118
    326c:	d0 90 19 01 	lds	r13, 0x0119
    3270:	80 91 48 01 	lds	r24, 0x0148
    3274:	90 91 49 01 	lds	r25, 0x0149
    3278:	c8 0e       	add	r12, r24
    327a:	d9 1e       	adc	r13, r25
    327c:	ca 0c       	add	r12, r10
    327e:	db 1c       	adc	r13, r11
//        if (total_r > 7000) cnt_diff = 1;
//        if (total_r > 14000) cnt_diff = 2;
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
        // Voltage of comparator in % of umax
     #ifdef AUTO_CAL
        tmpint = (ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset))) ;
    3280:	8a e9       	ldi	r24, 0x9A	; 154
    3282:	91 e0       	ldi	r25, 0x01	; 1
    3284:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <__eerd_word_m168>
    3288:	20 91 44 01 	lds	r18, 0x0144
    328c:	30 91 45 01 	lds	r19, 0x0145
    3290:	28 0f       	add	r18, r24
    3292:	39 1f       	adc	r19, r25
     #else
        tmpint = (ref_mv + REF_C_KORR);
     #endif
        if (mess_r < R_L_VAL) {
    3294:	b0 e9       	ldi	r27, 0x90	; 144
    3296:	ab 16       	cp	r10, r27
    3298:	ba e1       	ldi	r27, 0x1A	; 26
    329a:	bb 06       	cpc	r11, r27
    329c:	b8 f4       	brcc	.+46     	; 0x32cc <ReadInductance+0x268>
           // measurement without 680 Ohm
           cnt_diff = CNT_ZERO_42;
           if (timeconstant.dw < 225) {
    329e:	81 ee       	ldi	r24, 0xE1	; 225
    32a0:	e8 16       	cp	r14, r24
    32a2:	f1 04       	cpc	r15, r1
    32a4:	01 05       	cpc	r16, r1
    32a6:	11 05       	cpc	r17, r1
    32a8:	38 f4       	brcc	.+14     	; 0x32b8 <ReadInductance+0x254>
              ukorr = (timeconstant.w[0] / 5) - 20;
    32aa:	c7 01       	movw	r24, r14
    32ac:	65 e0       	ldi	r22, 0x05	; 5
    32ae:	70 e0       	ldi	r23, 0x00	; 0
    32b0:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__udivmodhi4>
    32b4:	64 51       	subi	r22, 0x14	; 20
    32b6:	01 c0       	rjmp	.+2      	; 0x32ba <ReadInductance+0x256>
           } else {
              ukorr = 25;
    32b8:	69 e1       	ldi	r22, 0x19	; 25
           }
           tmpint -= (((REF_L_KORR * 10) / 10) + ukorr);
    32ba:	28 52       	subi	r18, 0x28	; 40
    32bc:	30 40       	sbci	r19, 0x00	; 0
    32be:	77 27       	eor	r23, r23
    32c0:	67 fd       	sbrc	r22, 7
    32c2:	70 95       	com	r23
    32c4:	26 1b       	sub	r18, r22
    32c6:	37 0b       	sbc	r19, r23
     #else
        tmpint = (ref_mv + REF_C_KORR);
     #endif
        if (mess_r < R_L_VAL) {
           // measurement without 680 Ohm
           cnt_diff = CNT_ZERO_42;
    32c8:	66 e0       	ldi	r22, 0x06	; 6
    32ca:	08 c0       	rjmp	.+16     	; 0x32dc <ReadInductance+0x278>
//#endif
        total_r = (mess_r + resis[found].rx + RRpinMI);
//        cnt_diff = 0;
//        if (total_r > 7000) cnt_diff = 1;
//        if (total_r > 14000) cnt_diff = 2;
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
    32cc:	c6 01       	movw	r24, r12
    32ce:	60 eb       	ldi	r22, 0xB0	; 176
    32d0:	76 e3       	ldi	r23, 0x36	; 54
    32d2:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__udivmodhi4>
           }
           tmpint -= (((REF_L_KORR * 10) / 10) + ukorr);
        } else {
           // measurement with 680 Ohm resistor
           // if 680 Ohm resistor is used, use REF_L_KORR for correction
           cnt_diff += CNT_ZERO_720;
    32d6:	69 5f       	subi	r22, 0xF9	; 249
           tmpint += REF_L_KORR;
    32d8:	28 5d       	subi	r18, 0xD8	; 216
    32da:	3f 4f       	sbci	r19, 0xFF	; 255
        }
        if (timeconstant.dw > cnt_diff) timeconstant.dw -= cnt_diff;
    32dc:	70 e0       	ldi	r23, 0x00	; 0
    32de:	80 e0       	ldi	r24, 0x00	; 0
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	6e 15       	cp	r22, r14
    32e4:	7f 05       	cpc	r23, r15
    32e6:	80 07       	cpc	r24, r16
    32e8:	91 07       	cpc	r25, r17
    32ea:	28 f4       	brcc	.+10     	; 0x32f6 <ReadInductance+0x292>
    32ec:	e6 1a       	sub	r14, r22
    32ee:	f7 0a       	sbc	r15, r23
    32f0:	08 0b       	sbc	r16, r24
    32f2:	19 0b       	sbc	r17, r25
    32f4:	03 c0       	rjmp	.+6      	; 0x32fc <ReadInductance+0x298>
        else          timeconstant.dw = 0;
    32f6:	ee 24       	eor	r14, r14
    32f8:	ff 24       	eor	r15, r15
    32fa:	87 01       	movw	r16, r14
       
        if ((count&0x01) == 1) {
    32fc:	a9 89       	ldd	r26, Y+17	; 0x11
    32fe:	ba 89       	ldd	r27, Y+18	; 0x12
    3300:	10 97       	sbiw	r26, 0x00	; 0
    3302:	41 f0       	breq	.+16     	; 0x3314 <ReadInductance+0x2b0>
           // second pass with delayed counter start
           timeconstant.dw += (3 * (F_CPU/1000000UL))+10;
    3304:	82 e2       	ldi	r24, 0x22	; 34
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	a0 e0       	ldi	r26, 0x00	; 0
    330a:	b0 e0       	ldi	r27, 0x00	; 0
    330c:	e8 0e       	add	r14, r24
    330e:	f9 1e       	adc	r15, r25
    3310:	0a 1f       	adc	r16, r26
    3312:	1b 1f       	adc	r17, r27
        }
        if (timeconstant.w[1] >= (F_CPU/100000UL)) timeconstant.dw = 0; // no transition found
    3314:	00 35       	cpi	r16, 0x50	; 80
    3316:	11 05       	cpc	r17, r1
    3318:	18 f0       	brcs	.+6      	; 0x3320 <ReadInductance+0x2bc>
    331a:	ee 24       	eor	r14, r14
    331c:	ff 24       	eor	r15, r15
    331e:	87 01       	movw	r16, r14
        if (timeconstant.dw > 10) {
    3320:	9b e0       	ldi	r25, 0x0B	; 11
    3322:	e9 16       	cp	r14, r25
    3324:	f1 04       	cpc	r15, r1
    3326:	01 05       	cpc	r16, r1
    3328:	11 05       	cpc	r17, r1
    332a:	28 f0       	brcs	.+10     	; 0x3336 <ReadInductance+0x2d2>
           timeconstant.dw -= 1;
    332c:	08 94       	sec
    332e:	e1 08       	sbc	r14, r1
    3330:	f1 08       	sbc	r15, r1
    3332:	01 09       	sbc	r16, r1
    3334:	11 09       	sbc	r17, r1
        }
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    3336:	c6 01       	movw	r24, r12
    3338:	a0 e0       	ldi	r26, 0x00	; 0
    333a:	b0 e0       	ldi	r27, 0x00	; 0
    333c:	8b 8b       	std	Y+19, r24	; 0x13
    333e:	9c 8b       	std	Y+20, r25	; 0x14
    3340:	ad 8b       	std	Y+21, r26	; 0x15
    3342:	be 8b       	std	Y+22, r27	; 0x16
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    3344:	b9 01       	movw	r22, r18
    3346:	80 e0       	ldi	r24, 0x00	; 0
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	28 ee       	ldi	r18, 0xE8	; 232
    334c:	33 e0       	ldi	r19, 0x03	; 3
    334e:	40 e0       	ldi	r20, 0x00	; 0
    3350:	50 e0       	ldi	r21, 0x00	; 0
    3352:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
    3356:	2b 01       	movw	r4, r22
    3358:	3c 01       	movw	r6, r24
        if (timeconstant.w[1] >= (F_CPU/100000UL)) timeconstant.dw = 0; // no transition found
        if (timeconstant.dw > 10) {
           timeconstant.dw -= 1;
        }
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    335a:	b5 01       	movw	r22, r10
    335c:	80 e0       	ldi	r24, 0x00	; 0
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	20 91 40 01 	lds	r18, 0x0140
    3364:	30 91 41 01 	lds	r19, 0x0141
    3368:	40 e0       	ldi	r20, 0x00	; 0
    336a:	50 e0       	ldi	r21, 0x00	; 0
    336c:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
    3370:	2b 89       	ldd	r18, Y+19	; 0x13
    3372:	3c 89       	ldd	r19, Y+20	; 0x14
    3374:	4d 89       	ldd	r20, Y+21	; 0x15
    3376:	5e 89       	ldd	r21, Y+22	; 0x16
    3378:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    337c:	40 e0       	ldi	r20, 0x00	; 0
    337e:	50 e0       	ldi	r21, 0x00	; 0
    3380:	c3 01       	movw	r24, r6
    3382:	b2 01       	movw	r22, r4
    3384:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
//        per_ref2 = (uint8_t)MEM2_read_byte(&LogTab[per_ref1]);	// -log(1 - per_ref1/100)
        per_ref2 = get_log(per_ref1);		// -log(1 - per_ref1/1000)
    3388:	c9 01       	movw	r24, r18
    338a:	0e 94 09 18 	call	0x3012	; 0x3012 <get_log>
    338e:	6c 01       	movw	r12, r24
          }
#endif
/* ********************************************************* */
        // lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    3390:	6b 89       	ldd	r22, Y+19	; 0x13
    3392:	7c 89       	ldd	r23, Y+20	; 0x14
    3394:	8d 89       	ldd	r24, Y+21	; 0x15
    3396:	9e 89       	ldd	r25, Y+22	; 0x16
    3398:	a8 01       	movw	r20, r16
    339a:	97 01       	movw	r18, r14
    339c:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
    33a0:	2b 01       	movw	r4, r22
    33a2:	3c 01       	movw	r6, r24
             wait_about2s();
          }
#endif
/* ********************************************************* */
        // lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
    33a4:	b6 01       	movw	r22, r12
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	e3 e0       	ldi	r30, 0x03	; 3
    33ac:	66 0f       	add	r22, r22
    33ae:	77 1f       	adc	r23, r23
    33b0:	88 1f       	adc	r24, r24
    33b2:	99 1f       	adc	r25, r25
    33b4:	ea 95       	dec	r30
    33b6:	d1 f7       	brne	.-12     	; 0x33ac <ReadInductance+0x348>
    33b8:	6b 5f       	subi	r22, 0xFB	; 251
    33ba:	7f 4f       	sbci	r23, 0xFF	; 255
    33bc:	8f 4f       	sbci	r24, 0xFF	; 255
    33be:	9f 4f       	sbci	r25, 0xFF	; 255
    33c0:	2a e0       	ldi	r18, 0x0A	; 10
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	40 e0       	ldi	r20, 0x00	; 0
    33c6:	50 e0       	ldi	r21, 0x00	; 0
    33c8:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    33cc:	40 e0       	ldi	r20, 0x00	; 0
    33ce:	50 e0       	ldi	r21, 0x00	; 0
    33d0:	c3 01       	movw	r24, r6
    33d2:	b2 01       	movw	r22, r4
    33d4:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
    33d8:	f1 01       	movw	r30, r2
    33da:	ee 0f       	add	r30, r30
    33dc:	ff 1f       	adc	r31, r31
    33de:	ee 0f       	add	r30, r30
    33e0:	ff 1f       	adc	r31, r31
    33e2:	a1 e0       	ldi	r26, 0x01	; 1
    33e4:	b0 e0       	ldi	r27, 0x00	; 0
    33e6:	ac 0f       	add	r26, r28
    33e8:	bd 1f       	adc	r27, r29
    33ea:	ea 0f       	add	r30, r26
    33ec:	fb 1f       	adc	r31, r27
    33ee:	20 83       	st	Z, r18
    33f0:	31 83       	std	Z+1, r19	; 0x01
    33f2:	42 83       	std	Z+2, r20	; 0x02
    33f4:	53 83       	std	Z+3, r21	; 0x03
        if (((count&0x01) == 0) && (timeconstant.dw > ((F_CPU/1000000UL)+3))) {
    33f6:	89 89       	ldd	r24, Y+17	; 0x11
    33f8:	9a 89       	ldd	r25, Y+18	; 0x12
    33fa:	00 97       	sbiw	r24, 0x00	; 0
    33fc:	99 f4       	brne	.+38     	; 0x3424 <ReadInductance+0x3c0>
    33fe:	9c e0       	ldi	r25, 0x0C	; 12
    3400:	e9 16       	cp	r14, r25
    3402:	f1 04       	cpc	r15, r1
    3404:	01 05       	cpc	r16, r1
    3406:	11 05       	cpc	r17, r1
    3408:	68 f0       	brcs	.+26     	; 0x3424 <ReadInductance+0x3c0>
           // transition is found, measurement with delayed counter start is not necessary
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
    340a:	f1 01       	movw	r30, r2
    340c:	31 96       	adiw	r30, 0x01	; 1
    340e:	ee 0f       	add	r30, r30
    3410:	ff 1f       	adc	r31, r31
    3412:	ee 0f       	add	r30, r30
    3414:	ff 1f       	adc	r31, r31
    3416:	ea 0f       	add	r30, r26
    3418:	fb 1f       	adc	r31, r27
    341a:	20 83       	st	Z, r18
    341c:	31 83       	std	Z+1, r19	; 0x01
    341e:	42 83       	std	Z+2, r20	; 0x02
    3420:	53 83       	std	Z+3, r21	; 0x03
           count++;		// skip the delayed measurement
    3422:	93 94       	inc	r9
        }
        wdt_reset();
    3424:	a8 95       	wdr
//  for (found=0;found<ResistorsFound;found++) {
//     if (resis[found].rx > 21000) continue;
     if (resis[found].rx > 21000) return;

     // we can check for Inductance, if resistance is below 2100 Ohm
     for (count=0;count<4;count++) {
    3426:	93 94       	inc	r9
    3428:	a9 2d       	mov	r26, r9
    342a:	a4 30       	cpi	r26, 0x04	; 4
    342c:	08 f4       	brcc	.+2      	; 0x3430 <ReadInductance+0x3cc>
    342e:	50 ce       	rjmp	.-864    	; 0x30d0 <ReadInductance+0x6c>
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
           count++;		// skip the delayed measurement
        }
        wdt_reset();
     }  //end for count
     ADC_PORT = TXD_VAL;		// switch ADC Port to GND
    3430:	88 e0       	ldi	r24, 0x08	; 8
    3432:	88 b9       	out	0x08, r24	; 8
     wait_about20ms();
    3434:	84 e0       	ldi	r24, 0x04	; 4
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
        resis[found].lx = inductance[0];
     }
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];		// other polarity, delayed start
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
#else
     nr_pol1 = 0;
    343c:	61 e0       	ldi	r22, 0x01	; 1
    343e:	2d 81       	ldd	r18, Y+5	; 0x05
    3440:	3e 81       	ldd	r19, Y+6	; 0x06
    3442:	4f 81       	ldd	r20, Y+7	; 0x07
    3444:	58 85       	ldd	r21, Y+8	; 0x08
    3446:	89 81       	ldd	r24, Y+1	; 0x01
    3448:	9a 81       	ldd	r25, Y+2	; 0x02
    344a:	ab 81       	ldd	r26, Y+3	; 0x03
    344c:	bc 81       	ldd	r27, Y+4	; 0x04
    344e:	82 17       	cp	r24, r18
    3450:	93 07       	cpc	r25, r19
    3452:	a4 07       	cpc	r26, r20
    3454:	b5 07       	cpc	r27, r21
    3456:	08 f0       	brcs	.+2      	; 0x345a <ReadInductance+0x3f6>
    3458:	60 e0       	ldi	r22, 0x00	; 0
     if (inductance[1] > inductance[0]) { nr_pol1 = 1; } 
     nr_pol2 = 2;
     if (inductance[3] > inductance[2]) { nr_pol2 = 3; } 
    345a:	2d 85       	ldd	r18, Y+13	; 0x0d
    345c:	3e 85       	ldd	r19, Y+14	; 0x0e
    345e:	4f 85       	ldd	r20, Y+15	; 0x0f
    3460:	58 89       	ldd	r21, Y+16	; 0x10
    3462:	89 85       	ldd	r24, Y+9	; 0x09
    3464:	9a 85       	ldd	r25, Y+10	; 0x0a
    3466:	ab 85       	ldd	r26, Y+11	; 0x0b
    3468:	bc 85       	ldd	r27, Y+12	; 0x0c
    346a:	82 17       	cp	r24, r18
    346c:	93 07       	cpc	r25, r19
    346e:	a4 07       	cpc	r26, r20
    3470:	b5 07       	cpc	r27, r21
    3472:	10 f0       	brcs	.+4      	; 0x3478 <ReadInductance+0x414>
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];		// other polarity, delayed start
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
#else
     nr_pol1 = 0;
     if (inductance[1] > inductance[0]) { nr_pol1 = 1; } 
     nr_pol2 = 2;
    3474:	72 e0       	ldi	r23, 0x02	; 2
    3476:	01 c0       	rjmp	.+2      	; 0x347a <ReadInductance+0x416>
     if (inductance[3] > inductance[2]) { nr_pol2 = 3; } 
    3478:	73 e0       	ldi	r23, 0x03	; 3
     if (inductance[nr_pol2] < inductance[nr_pol1]) nr_pol1 = nr_pol2;
    347a:	a7 2f       	mov	r26, r23
    347c:	b0 e0       	ldi	r27, 0x00	; 0
    347e:	aa 0f       	add	r26, r26
    3480:	bb 1f       	adc	r27, r27
    3482:	aa 0f       	add	r26, r26
    3484:	bb 1f       	adc	r27, r27
    3486:	ce 01       	movw	r24, r28
    3488:	01 96       	adiw	r24, 0x01	; 1
    348a:	a8 0f       	add	r26, r24
    348c:	b9 1f       	adc	r27, r25
    348e:	e6 2f       	mov	r30, r22
    3490:	f0 e0       	ldi	r31, 0x00	; 0
    3492:	ee 0f       	add	r30, r30
    3494:	ff 1f       	adc	r31, r31
    3496:	ee 0f       	add	r30, r30
    3498:	ff 1f       	adc	r31, r31
    349a:	e8 0f       	add	r30, r24
    349c:	f9 1f       	adc	r31, r25
    349e:	2d 91       	ld	r18, X+
    34a0:	3d 91       	ld	r19, X+
    34a2:	4d 91       	ld	r20, X+
    34a4:	5c 91       	ld	r21, X
    34a6:	80 81       	ld	r24, Z
    34a8:	91 81       	ldd	r25, Z+1	; 0x01
    34aa:	a2 81       	ldd	r26, Z+2	; 0x02
    34ac:	b3 81       	ldd	r27, Z+3	; 0x03
    34ae:	28 17       	cp	r18, r24
    34b0:	39 07       	cpc	r19, r25
    34b2:	4a 07       	cpc	r20, r26
    34b4:	5b 07       	cpc	r21, r27
    34b6:	08 f4       	brcc	.+2      	; 0x34ba <ReadInductance+0x456>
    34b8:	67 2f       	mov	r22, r23
     resis[found].lx = inductance[nr_pol1];
    34ba:	26 2f       	mov	r18, r22
    34bc:	30 e0       	ldi	r19, 0x00	; 0
    34be:	f9 01       	movw	r30, r18
    34c0:	ee 0f       	add	r30, r30
    34c2:	ff 1f       	adc	r31, r31
    34c4:	ee 0f       	add	r30, r30
    34c6:	ff 1f       	adc	r31, r31
    34c8:	ec 0f       	add	r30, r28
    34ca:	fd 1f       	adc	r31, r29
    34cc:	61 81       	ldd	r22, Z+1	; 0x01
    34ce:	72 81       	ldd	r23, Z+2	; 0x02
    34d0:	83 81       	ldd	r24, Z+3	; 0x03
    34d2:	94 81       	ldd	r25, Z+4	; 0x04
    34d4:	60 93 1c 01 	sts	0x011C, r22
    34d8:	70 93 1d 01 	sts	0x011D, r23
    34dc:	80 93 1e 01 	sts	0x011E, r24
    34e0:	90 93 1f 01 	sts	0x011F, r25
     resis[found].lpre = -5;	// 10 uH units
    34e4:	4b ef       	ldi	r20, 0xFB	; 251
    34e6:	40 93 20 01 	sts	0x0120, r20
     if (((nr_pol1 & 1) == 1) || (resis[found].rx >= 240)) {
    34ea:	20 fd       	sbrc	r18, 0
    34ec:	0d c0       	rjmp	.+26     	; 0x3508 <ReadInductance+0x4a4>
    34ee:	20 91 18 01 	lds	r18, 0x0118
    34f2:	30 91 19 01 	lds	r19, 0x0119
    34f6:	40 91 1a 01 	lds	r20, 0x011A
    34fa:	50 91 1b 01 	lds	r21, 0x011B
    34fe:	20 3f       	cpi	r18, 0xF0	; 240
    3500:	31 05       	cpc	r19, r1
    3502:	41 05       	cpc	r20, r1
    3504:	51 05       	cpc	r21, r1
    3506:	a8 f0       	brcs	.+42     	; 0x3532 <ReadInductance+0x4ce>
        // with 680 Ohm resistor total_r is more than 7460
        resis[found].lpre = -4;	// 100 uH units
    3508:	2c ef       	ldi	r18, 0xFC	; 252
    350a:	20 93 20 01 	sts	0x0120, r18
        resis[found].lx = (resis[found].lx + 5) / 10;
    350e:	6b 5f       	subi	r22, 0xFB	; 251
    3510:	7f 4f       	sbci	r23, 0xFF	; 255
    3512:	8f 4f       	sbci	r24, 0xFF	; 255
    3514:	9f 4f       	sbci	r25, 0xFF	; 255
    3516:	2a e0       	ldi	r18, 0x0A	; 10
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	40 e0       	ldi	r20, 0x00	; 0
    351c:	50 e0       	ldi	r21, 0x00	; 0
    351e:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
    3522:	20 93 1c 01 	sts	0x011C, r18
    3526:	30 93 1d 01 	sts	0x011D, r19
    352a:	40 93 1e 01 	sts	0x011E, r20
    352e:	50 93 1f 01 	sts	0x011F, r21
     } 
#endif
//  } // end loop for all resistors

  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    3532:	88 e0       	ldi	r24, 0x08	; 8
    3534:	87 b9       	out	0x07, r24	; 7
  R_DDR = 0;			// switch all resistor ports to input
    3536:	14 b8       	out	0x04, r1	; 4
#endif
  return;
 } // end ReadInductance()
    3538:	68 96       	adiw	r28, 0x18	; 24
    353a:	0f b6       	in	r0, 0x3f	; 63
    353c:	f8 94       	cli
    353e:	de bf       	out	0x3e, r29	; 62
    3540:	0f be       	out	0x3f, r0	; 63
    3542:	cd bf       	out	0x3d, r28	; 61
    3544:	cf 91       	pop	r28
    3546:	df 91       	pop	r29
    3548:	1f 91       	pop	r17
    354a:	0f 91       	pop	r16
    354c:	ff 90       	pop	r15
    354e:	ef 90       	pop	r14
    3550:	df 90       	pop	r13
    3552:	cf 90       	pop	r12
    3554:	bf 90       	pop	r11
    3556:	af 90       	pop	r10
    3558:	9f 90       	pop	r9
    355a:	8f 90       	pop	r8
    355c:	7f 90       	pop	r7
    355e:	6f 90       	pop	r6
    3560:	5f 90       	pop	r5
    3562:	4f 90       	pop	r4
    3564:	3f 90       	pop	r3
    3566:	2f 90       	pop	r2
    3568:	08 95       	ret

0000356a <W20msReadADC>:
    356a:	8f 93       	push	r24
    356c:	84 e0       	ldi	r24, 0x04	; 4
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
    3574:	0b c0       	rjmp	.+22     	; 0x358c <to_read>

00003576 <W10msReadADC>:
    3576:	8f 93       	push	r24
    3578:	82 e0       	ldi	r24, 0x02	; 2
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>
    3580:	05 c0       	rjmp	.+10     	; 0x358c <to_read>

00003582 <W5msReadADC>:
    3582:	8f 93       	push	r24
    3584:	81 e0       	ldi	r24, 0x01	; 1
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sleep_5ms>

0000358c <to_read>:
    358c:	8f 91       	pop	r24

0000358e <ReadADC>:
    358e:	1f 93       	push	r17
    3590:	18 2f       	mov	r17, r24
    3592:	10 64       	ori	r17, 0x40	; 64

00003594 <get_sample>:
    3594:	10 93 7c 00 	sts	0x007C, r17
    3598:	e1 2f       	mov	r30, r17
    359a:	e0 78       	andi	r30, 0x80	; 128
    359c:	80 91 3d 01 	lds	r24, 0x013D
    35a0:	e8 17       	cp	r30, r24
    35a2:	61 f0       	breq	.+24     	; 0x35bc <r2aa2>
    35a4:	0e 94 50 14 	call	0x28a0	; 0x28a0 <wait100us>
    35a8:	8e e9       	ldi	r24, 0x9E	; 158
    35aa:	80 93 7a 00 	sts	0x007A, r24
    35ae:	83 e0       	ldi	r24, 0x03	; 3
    35b0:	83 bf       	out	0x33, r24	; 51
    35b2:	88 95       	sleep
    35b4:	82 e0       	ldi	r24, 0x02	; 2
    35b6:	83 bf       	out	0x33, r24	; 51
    35b8:	e0 93 3d 01 	sts	0x013D, r30

000035bc <r2aa2>:
    35bc:	20 e0       	ldi	r18, 0x00	; 0
    35be:	30 e0       	ldi	r19, 0x00	; 0
    35c0:	a9 01       	movw	r20, r18
    35c2:	e0 e0       	ldi	r30, 0x00	; 0
    35c4:	1f c0       	rjmp	.+62     	; 0x3604 <r2ae8>

000035c6 <Loop>:
    35c6:	8e e9       	ldi	r24, 0x9E	; 158
    35c8:	80 93 7a 00 	sts	0x007A, r24
    35cc:	83 e0       	ldi	r24, 0x03	; 3
    35ce:	83 bf       	out	0x33, r24	; 51
    35d0:	88 95       	sleep
    35d2:	82 e0       	ldi	r24, 0x02	; 2
    35d4:	83 bf       	out	0x33, r24	; 51
    35d6:	60 91 78 00 	lds	r22, 0x0078
    35da:	70 91 79 00 	lds	r23, 0x0079
    35de:	26 0f       	add	r18, r22
    35e0:	37 1f       	adc	r19, r23
    35e2:	41 1d       	adc	r20, r1
    35e4:	51 1d       	adc	r21, r1
    35e6:	e4 30       	cpi	r30, 0x04	; 4
    35e8:	61 f4       	brne	.+24     	; 0x3602 <r2ae6>
    35ea:	80 91 3f 01 	lds	r24, 0x013F
    35ee:	80 30       	cpi	r24, 0x00	; 0
    35f0:	41 f0       	breq	.+16     	; 0x3602 <r2ae6>
    35f2:	84 e0       	ldi	r24, 0x04	; 4
    35f4:	20 30       	cpi	r18, 0x00	; 0
    35f6:	38 07       	cpc	r19, r24
    35f8:	20 f4       	brcc	.+8      	; 0x3602 <r2ae6>
    35fa:	17 fd       	sbrc	r17, 7
    35fc:	02 c0       	rjmp	.+4      	; 0x3602 <r2ae6>
    35fe:	10 68       	ori	r17, 0x80	; 128
    3600:	c9 cf       	rjmp	.-110    	; 0x3594 <get_sample>

00003602 <r2ae6>:
    3602:	ef 5f       	subi	r30, 0xFF	; 255

00003604 <r2ae8>:
    3604:	80 91 3c 01 	lds	r24, 0x013C
    3608:	e8 17       	cp	r30, r24
    360a:	e8 f2       	brcs	.-70     	; 0x35c6 <Loop>
    360c:	17 ff       	sbrs	r17, 7
    360e:	05 c0       	rjmp	.+10     	; 0x361a <r2afe>
    3610:	60 91 3e 01 	lds	r22, 0x013E
    3614:	70 91 3f 01 	lds	r23, 0x013F
    3618:	04 c0       	rjmp	.+8      	; 0x3622 <r2b02>

0000361a <r2afe>:
    361a:	60 91 40 01 	lds	r22, 0x0140
    361e:	70 91 41 01 	lds	r23, 0x0141

00003622 <r2b02>:
    3622:	80 e0       	ldi	r24, 0x00	; 0
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
    362a:	2f ef       	ldi	r18, 0xFF	; 255
    362c:	33 e0       	ldi	r19, 0x03	; 3
    362e:	40 e0       	ldi	r20, 0x00	; 0
    3630:	50 e0       	ldi	r21, 0x00	; 0
    3632:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
    3636:	b9 01       	movw	r22, r18
    3638:	ca 01       	movw	r24, r20
    363a:	20 91 3c 01 	lds	r18, 0x013C
    363e:	30 e0       	ldi	r19, 0x00	; 0
    3640:	40 e0       	ldi	r20, 0x00	; 0
    3642:	50 e0       	ldi	r21, 0x00	; 0
    3644:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
    3648:	c9 01       	movw	r24, r18
    364a:	1f 91       	pop	r17
    364c:	08 95       	ret

0000364e <GetESR>:
    364e:	2f 92       	push	r2
    3650:	3f 92       	push	r3
    3652:	4f 92       	push	r4
    3654:	5f 92       	push	r5
    3656:	6f 92       	push	r6
    3658:	7f 92       	push	r7
    365a:	8f 92       	push	r8
    365c:	9f 92       	push	r9
    365e:	af 92       	push	r10
    3660:	bf 92       	push	r11
    3662:	cf 92       	push	r12
    3664:	df 92       	push	r13
    3666:	ef 92       	push	r14
    3668:	ff 92       	push	r15
    366a:	0f 93       	push	r16
    366c:	1f 93       	push	r17
    366e:	df 93       	push	r29
    3670:	cf 93       	push	r28
    3672:	cd b7       	in	r28, 0x3d	; 61
    3674:	de b7       	in	r29, 0x3e	; 62
    3676:	6e 97       	sbiw	r28, 0x1e	; 30
    3678:	0f b6       	in	r0, 0x3f	; 63
    367a:	f8 94       	cli
    367c:	de bf       	out	0x3e, r29	; 62
    367e:	0f be       	out	0x3f, r0	; 63
    3680:	cd bf       	out	0x3d, r28	; 61
    3682:	66 2e       	mov	r6, r22
    3684:	b8 2e       	mov	r11, r24
    3686:	86 0f       	add	r24, r22
    3688:	89 83       	std	Y+1, r24	; 0x01
    368a:	20 91 07 01 	lds	r18, 0x0107
    368e:	27 30       	cpi	r18, 0x07	; 7
    3690:	19 f5       	brne	.+70     	; 0x36d8 <ad_35e4>
    3692:	20 91 79 01 	lds	r18, 0x0179
    3696:	30 91 7a 01 	lds	r19, 0x017A
    369a:	40 91 7b 01 	lds	r20, 0x017B
    369e:	50 91 7c 01 	lds	r21, 0x017C
    36a2:	10 91 88 01 	lds	r17, 0x0188
    36a6:	09 c0       	rjmp	.+18     	; 0x36ba <ad_35ba>

000036a8 <ad_35ac>:
    36a8:	ca 01       	movw	r24, r20
    36aa:	b9 01       	movw	r22, r18
    36ac:	2a e0       	ldi	r18, 0x0A	; 10
    36ae:	31 2d       	mov	r19, r1
    36b0:	41 2d       	mov	r20, r1
    36b2:	51 2d       	mov	r21, r1
    36b4:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
    36b8:	1f 5f       	subi	r17, 0xFF	; 255

000036ba <ad_35ba>:
    36ba:	17 3f       	cpi	r17, 0xF7	; 247
    36bc:	ac f3       	brlt	.-22     	; 0x36a8 <ad_35ac>
    36be:	2c 8b       	std	Y+20, r18	; 0x14
    36c0:	3d 8b       	std	Y+21, r19	; 0x15
    36c2:	4e 8b       	std	Y+22, r20	; 0x16
    36c4:	5f 8b       	std	Y+23, r21	; 0x17
    36c6:	24 3b       	cpi	r18, 0xB4	; 180
    36c8:	60 e0       	ldi	r22, 0x00	; 0
    36ca:	36 07       	cpc	r19, r22
    36cc:	41 05       	cpc	r20, r1
    36ce:	51 05       	cpc	r21, r1
    36d0:	18 f4       	brcc	.+6      	; 0x36d8 <ad_35e4>
    36d2:	8f ef       	ldi	r24, 0xFF	; 255
    36d4:	9f ef       	ldi	r25, 0xFF	; 255
    36d6:	78 c1       	rjmp	.+752    	; 0x39c8 <ad_exit>

000036d8 <ad_35e4>:
    36d8:	26 ed       	ldi	r18, 0xD6	; 214
    36da:	a2 2e       	mov	r10, r18
    36dc:	02 c0       	rjmp	.+4      	; 0x36e2 <ad_3604>

000036de <ad_35fe>:
    36de:	94 ed       	ldi	r25, 0xD4	; 212
    36e0:	a9 2e       	mov	r10, r25

000036e2 <ad_3604>:
    36e2:	e3 e0       	ldi	r30, 0x03	; 3
    36e4:	f1 e0       	ldi	r31, 0x01	; 1
    36e6:	e6 0d       	add	r30, r6
    36e8:	f1 1d       	adc	r31, r1
    36ea:	85 91       	lpm	r24, Z+
    36ec:	88 60       	ori	r24, 0x08	; 8
    36ee:	8e 87       	std	Y+14, r24	; 0x0e
    36f0:	e3 e0       	ldi	r30, 0x03	; 3
    36f2:	f1 e0       	ldi	r31, 0x01	; 1
    36f4:	eb 0d       	add	r30, r11
    36f6:	f1 1d       	adc	r31, r1
    36f8:	85 91       	lpm	r24, Z+
    36fa:	88 60       	ori	r24, 0x08	; 8
    36fc:	8f 87       	std	Y+15, r24	; 0x0f
    36fe:	e0 e0       	ldi	r30, 0x00	; 0
    3700:	f1 e0       	ldi	r31, 0x01	; 1
    3702:	e6 0d       	add	r30, r6
    3704:	f1 1d       	adc	r31, r1
    3706:	75 90       	lpm	r7, Z+
    3708:	e0 e0       	ldi	r30, 0x00	; 0
    370a:	f1 e0       	ldi	r31, 0x01	; 1
    370c:	eb 0d       	add	r30, r11
    370e:	f1 1d       	adc	r31, r1
    3710:	c5 90       	lpm	r12, Z+
    3712:	90 ec       	ldi	r25, 0xC0	; 192
    3714:	69 2a       	or	r6, r25
    3716:	b9 2a       	or	r11, r25
    3718:	81 e0       	ldi	r24, 0x01	; 1
    371a:	e8 2e       	mov	r14, r24
    371c:	f1 2c       	mov	r15, r1
    371e:	01 2d       	mov	r16, r1
    3720:	11 2d       	mov	r17, r1
    3722:	8e 83       	std	Y+6, r24	; 0x06
    3724:	1f 82       	std	Y+7, r1	; 0x07
    3726:	18 86       	std	Y+8, r1	; 0x08
    3728:	19 86       	std	Y+9, r1	; 0x09
    372a:	1a 86       	std	Y+10, r1	; 0x0a
    372c:	1b 86       	std	Y+11, r1	; 0x0b
    372e:	1c 86       	std	Y+12, r1	; 0x0c
    3730:	1d 86       	std	Y+13, r1	; 0x0d
    3732:	18 8e       	std	Y+24, r1	; 0x18
    3734:	19 8e       	std	Y+25, r1	; 0x19
    3736:	0e 94 ad 01 	call	0x35a	; 0x35a <EntladePins>
    373a:	88 e0       	ldi	r24, 0x08	; 8
    373c:	88 b9       	out	0x08, r24	; 8
    373e:	60 92 7c 00 	sts	0x007C, r6
    3742:	0e 94 50 14 	call	0x28a0	; 0x28a0 <wait100us>
    3746:	3f 85       	ldd	r19, Y+15	; 0x0f
    3748:	37 b9       	out	0x07, r19	; 7
    374a:	75 b8       	out	0x05, r7	; 5
    374c:	74 b8       	out	0x04, r7	; 4
    374e:	0e 94 55 14 	call	0x28aa	; 0x28aa <wait10us>
    3752:	0e 94 59 14 	call	0x28b2	; 0x28b2 <wait2us>
    3756:	15 b8       	out	0x05, r1	; 5
    3758:	14 b8       	out	0x04, r1	; 4
    375a:	dd 24       	eor	r13, r13
    375c:	b4 ed       	ldi	r27, 0xD4	; 212
    375e:	9b 2e       	mov	r9, r27
    3760:	a6 ed       	ldi	r26, 0xD6	; 214
    3762:	8a 2e       	mov	r8, r26

00003764 <ad_3692>:
    3764:	3e 85       	ldd	r19, Y+14	; 0x0e
    3766:	37 b9       	out	0x07, r19	; 7
    3768:	75 b8       	out	0x05, r7	; 5
    376a:	74 b8       	out	0x04, r7	; 4
    376c:	60 92 7c 00 	sts	0x007C, r6
    3770:	a8 95       	wdr
    3772:	a0 92 7a 00 	sts	0x007A, r10
    3776:	80 91 7a 00 	lds	r24, 0x007A
    377a:	86 fd       	sbrc	r24, 6
    377c:	fc cf       	rjmp	.-8      	; 0x3776 <ad_3692+0x12>
    377e:	a0 92 7a 00 	sts	0x007A, r10
    3782:	80 91 7a 00 	lds	r24, 0x007A
    3786:	86 fd       	sbrc	r24, 6
    3788:	fc cf       	rjmp	.-8      	; 0x3782 <ad_3692+0x1e>
    378a:	20 90 78 00 	lds	r2, 0x0078
    378e:	30 90 79 00 	lds	r3, 0x0079
    3792:	b0 92 7c 00 	sts	0x007C, r11
    3796:	a0 92 7a 00 	sts	0x007A, r10
    379a:	80 91 7a 00 	lds	r24, 0x007A
    379e:	86 fd       	sbrc	r24, 6
    37a0:	fc cf       	rjmp	.-8      	; 0x379a <ad_3692+0x36>
    37a2:	80 92 7a 00 	sts	0x007A, r8
    37a6:	0e 94 56 14 	call	0x28ac	; 0x28ac <wait5us>
    37aa:	c5 b8       	out	0x05, r12	; 5
    37ac:	c4 b8       	out	0x04, r12	; 4
    37ae:	0e 94 54 14 	call	0x28a8	; 0x28a8 <wait20us>
    37b2:	0e 94 56 14 	call	0x28ac	; 0x28ac <wait5us>
    37b6:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <wait1us>
    37ba:	8f 93       	push	r24
    37bc:	8f 91       	pop	r24
    37be:	a8 95       	wdr
    37c0:	a8 95       	wdr
    37c2:	14 b8       	out	0x04, r1	; 4
    37c4:	15 b8       	out	0x05, r1	; 5

000037c6 <ad_370c>:
    37c6:	80 91 7a 00 	lds	r24, 0x007A
    37ca:	86 fd       	sbrc	r24, 6
    37cc:	fc cf       	rjmp	.-8      	; 0x37c6 <ad_370c>
    37ce:	20 91 78 00 	lds	r18, 0x0078
    37d2:	30 91 79 00 	lds	r19, 0x0079
    37d6:	28 8b       	std	Y+16, r18	; 0x10
    37d8:	39 8b       	std	Y+17, r19	; 0x11
    37da:	3f 85       	ldd	r19, Y+15	; 0x0f
    37dc:	37 b9       	out	0x07, r19	; 7
    37de:	c5 b8       	out	0x05, r12	; 5
    37e0:	c4 b8       	out	0x04, r12	; 4
    37e2:	a8 95       	wdr
    37e4:	b0 92 7c 00 	sts	0x007C, r11
    37e8:	a0 92 7a 00 	sts	0x007A, r10
    37ec:	80 91 7a 00 	lds	r24, 0x007A
    37f0:	86 fd       	sbrc	r24, 6
    37f2:	fc cf       	rjmp	.-8      	; 0x37ec <ad_370c+0x26>
    37f4:	a0 92 7a 00 	sts	0x007A, r10
    37f8:	80 91 7a 00 	lds	r24, 0x007A
    37fc:	86 fd       	sbrc	r24, 6
    37fe:	fc cf       	rjmp	.-8      	; 0x37f8 <ad_370c+0x32>
    3800:	60 91 78 00 	lds	r22, 0x0078
    3804:	70 91 79 00 	lds	r23, 0x0079
    3808:	60 92 7c 00 	sts	0x007C, r6
    380c:	a0 92 7a 00 	sts	0x007A, r10
    3810:	80 91 7a 00 	lds	r24, 0x007A
    3814:	86 fd       	sbrc	r24, 6
    3816:	fc cf       	rjmp	.-8      	; 0x3810 <ad_370c+0x4a>
    3818:	80 92 7a 00 	sts	0x007A, r8
    381c:	0e 94 56 14 	call	0x28ac	; 0x28ac <wait5us>
    3820:	75 b8       	out	0x05, r7	; 5
    3822:	74 b8       	out	0x04, r7	; 4
    3824:	0e 94 54 14 	call	0x28a8	; 0x28a8 <wait20us>
    3828:	0e 94 56 14 	call	0x28ac	; 0x28ac <wait5us>
    382c:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <wait1us>
    3830:	8f 93       	push	r24
    3832:	8f 91       	pop	r24
    3834:	a8 95       	wdr
    3836:	a8 95       	wdr
    3838:	14 b8       	out	0x04, r1	; 4
    383a:	15 b8       	out	0x05, r1	; 5

0000383c <ad_37f4>:
    383c:	80 91 7a 00 	lds	r24, 0x007A
    3840:	86 fd       	sbrc	r24, 6
    3842:	fc cf       	rjmp	.-8      	; 0x383c <ad_37f4>
    3844:	40 91 78 00 	lds	r20, 0x0078
    3848:	50 91 79 00 	lds	r21, 0x0079
    384c:	14 b8       	out	0x04, r1	; 4
    384e:	cb 01       	movw	r24, r22
    3850:	82 0d       	add	r24, r2
    3852:	93 1d       	adc	r25, r3
    3854:	e8 0e       	add	r14, r24
    3856:	f9 1e       	adc	r15, r25
    3858:	01 1d       	adc	r16, r1
    385a:	11 1d       	adc	r17, r1
    385c:	ea 82       	std	Y+2, r14	; 0x02
    385e:	fb 82       	std	Y+3, r15	; 0x03
    3860:	0c 83       	std	Y+4, r16	; 0x04
    3862:	1d 83       	std	Y+5, r17	; 0x05
    3864:	88 89       	ldd	r24, Y+16	; 0x10
    3866:	99 89       	ldd	r25, Y+17	; 0x11
    3868:	84 0f       	add	r24, r20
    386a:	95 1f       	adc	r25, r21
    386c:	2e 81       	ldd	r18, Y+6	; 0x06
    386e:	3f 81       	ldd	r19, Y+7	; 0x07
    3870:	68 85       	ldd	r22, Y+8	; 0x08
    3872:	79 85       	ldd	r23, Y+9	; 0x09
    3874:	28 0f       	add	r18, r24
    3876:	39 1f       	adc	r19, r25
    3878:	61 1d       	adc	r22, r1
    387a:	71 1d       	adc	r23, r1
    387c:	2e 83       	std	Y+6, r18	; 0x06
    387e:	3f 83       	std	Y+7, r19	; 0x07
    3880:	68 87       	std	Y+8, r22	; 0x08
    3882:	79 87       	std	Y+9, r23	; 0x09
    3884:	24 e6       	ldi	r18, 0x64	; 100
    3886:	24 17       	cp	r18, r20
    3888:	15 06       	cpc	r1, r21
    388a:	50 f0       	brcs	.+20     	; 0x38a0 <is_ok1>
    388c:	75 b8       	out	0x05, r7	; 5
    388e:	74 b8       	out	0x04, r7	; 4
    3890:	0e 94 59 14 	call	0x28b2	; 0x28b2 <wait2us>
    3894:	14 b8       	out	0x04, r1	; 4
    3896:	15 b8       	out	0x05, r1	; 5
    3898:	88 8d       	ldd	r24, Y+24	; 0x18
    389a:	83 95       	inc	r24
    389c:	88 8f       	std	Y+24, r24	; 0x18
    389e:	07 c0       	rjmp	.+14     	; 0x38ae <is_ok1b>

000038a0 <is_ok1>:
    38a0:	48 3e       	cpi	r20, 0xE8	; 232
    38a2:	73 e0       	ldi	r23, 0x03	; 3
    38a4:	57 07       	cpc	r21, r23
    38a6:	18 f0       	brcs	.+6      	; 0x38ae <is_ok1b>
    38a8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    38aa:	83 95       	inc	r24
    38ac:	8a 8f       	std	Y+26, r24	; 0x1a

000038ae <is_ok1b>:
    38ae:	88 89       	ldd	r24, Y+16	; 0x10
    38b0:	99 89       	ldd	r25, Y+17	; 0x11
    38b2:	28 17       	cp	r18, r24
    38b4:	19 06       	cpc	r1, r25
    38b6:	b0 f0       	brcs	.+44     	; 0x38e4 <is_ok2>
    38b8:	3e 85       	ldd	r19, Y+14	; 0x0e
    38ba:	37 b9       	out	0x07, r19	; 7
    38bc:	c5 b8       	out	0x05, r12	; 5
    38be:	c4 b8       	out	0x04, r12	; 4
    38c0:	0e 94 59 14 	call	0x28b2	; 0x28b2 <wait2us>
    38c4:	0e 94 54 14 	call	0x28a8	; 0x28a8 <wait20us>
    38c8:	0e 94 56 14 	call	0x28ac	; 0x28ac <wait5us>
    38cc:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <wait1us>
    38d0:	8f 93       	push	r24
    38d2:	8f 91       	pop	r24
    38d4:	a8 95       	wdr
    38d6:	a8 95       	wdr
    38d8:	14 b8       	out	0x04, r1	; 4
    38da:	15 b8       	out	0x05, r1	; 5
    38dc:	89 8d       	ldd	r24, Y+25	; 0x19
    38de:	83 95       	inc	r24
    38e0:	89 8f       	std	Y+25, r24	; 0x19
    38e2:	07 c0       	rjmp	.+14     	; 0x38f2 <is_ok2b>

000038e4 <is_ok2>:
    38e4:	88 3e       	cpi	r24, 0xE8	; 232
    38e6:	73 e0       	ldi	r23, 0x03	; 3
    38e8:	97 07       	cpc	r25, r23
    38ea:	18 f0       	brcs	.+6      	; 0x38f2 <is_ok2b>
    38ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    38ee:	83 95       	inc	r24
    38f0:	8a 8f       	std	Y+26, r24	; 0x1a

000038f2 <is_ok2b>:
    38f2:	d3 94       	inc	r13
    38f4:	5d 2d       	mov	r21, r13
    38f6:	5f 3f       	cpi	r21, 0xFF	; 255
    38f8:	09 f0       	breq	.+2      	; 0x38fc <ad_38ac>
    38fa:	34 cf       	rjmp	.-408    	; 0x3764 <ad_3692>

000038fc <ad_38ac>:
    38fc:	40 90 48 01 	lds	r4, 0x0148
    3900:	50 90 49 01 	lds	r5, 0x0149
    3904:	44 0c       	add	r4, r4
    3906:	55 1c       	adc	r5, r5
    3908:	92 01       	movw	r18, r4
    390a:	e4 e0       	ldi	r30, 0x04	; 4

0000390c <ad_3924>:
    390c:	24 0d       	add	r18, r4
    390e:	35 1d       	adc	r19, r5
    3910:	ea 95       	dec	r30
    3912:	e1 f7       	brne	.-8      	; 0x390c <ad_3924>
    3914:	29 01       	movw	r4, r18
    3916:	57 01       	movw	r10, r14
    3918:	68 01       	movw	r12, r16
    391a:	6e 80       	ldd	r6, Y+6	; 0x06
    391c:	7f 80       	ldd	r7, Y+7	; 0x07
    391e:	88 84       	ldd	r8, Y+8	; 0x08
    3920:	99 84       	ldd	r9, Y+9	; 0x09
    3922:	20 91 07 01 	lds	r18, 0x0107
    3926:	27 30       	cpi	r18, 0x07	; 7
    3928:	c1 f4       	brne	.+48     	; 0x395a <no_sub>
    392a:	6c 89       	ldd	r22, Y+20	; 0x14
    392c:	7d 89       	ldd	r23, Y+21	; 0x15
    392e:	8e 89       	ldd	r24, Y+22	; 0x16
    3930:	9f 89       	ldd	r25, Y+23	; 0x17
    3932:	9b 01       	movw	r18, r22
    3934:	ac 01       	movw	r20, r24
    3936:	6d 5e       	subi	r22, 0xED	; 237
    3938:	7f 4f       	sbci	r23, 0xFF	; 255
    393a:	8f 4f       	sbci	r24, 0xFF	; 255
    393c:	9f 4f       	sbci	r25, 0xFF	; 255
    393e:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
    3942:	9b 01       	movw	r18, r22
    3944:	ac 01       	movw	r20, r24
    3946:	6c e1       	ldi	r22, 0x1C	; 28
    3948:	79 e3       	ldi	r23, 0x39	; 57
    394a:	80 e9       	ldi	r24, 0x90	; 144
    394c:	9a e1       	ldi	r25, 0x1A	; 26
    394e:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
    3952:	62 1a       	sub	r6, r18
    3954:	73 0a       	sbc	r7, r19
    3956:	84 0a       	sbc	r8, r20
    3958:	95 0a       	sbc	r9, r21

0000395a <no_sub>:
    395a:	a6 14       	cp	r10, r6
    395c:	b7 04       	cpc	r11, r7
    395e:	c8 04       	cpc	r12, r8
    3960:	d9 04       	cpc	r13, r9
    3962:	28 f4       	brcc	.+10     	; 0x396e <ad_396c>
    3964:	6a 18       	sub	r6, r10
    3966:	7b 08       	sbc	r7, r11
    3968:	8c 08       	sbc	r8, r12
    396a:	9d 08       	sbc	r9, r13
    396c:	03 c0       	rjmp	.+6      	; 0x3974 <ad_3972>

0000396e <ad_396c>:
    396e:	66 24       	eor	r6, r6
    3970:	77 24       	eor	r7, r7
    3972:	43 01       	movw	r8, r6

00003974 <ad_3972>:
    3974:	b2 01       	movw	r22, r4
    3976:	80 e0       	ldi	r24, 0x00	; 0
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	93 01       	movw	r18, r6
    397c:	a4 01       	movw	r20, r8
    397e:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
    3982:	95 01       	movw	r18, r10
    3984:	a6 01       	movw	r20, r12
    3986:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
    398a:	83 ea       	ldi	r24, 0xA3	; 163
    398c:	91 e0       	ldi	r25, 0x01	; 1
    398e:	79 81       	ldd	r23, Y+1	; 0x01
    3990:	87 0f       	add	r24, r23
    3992:	91 1d       	adc	r25, r1
    3994:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <__eerd_byte_m168>
    3998:	68 2e       	mov	r6, r24
    399a:	c9 01       	movw	r24, r18
    399c:	60 e1       	ldi	r22, 0x10	; 16
    399e:	70 e0       	ldi	r23, 0x00	; 0
    39a0:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__udivmodhi4>
    39a4:	26 0f       	add	r18, r22
    39a6:	37 1f       	adc	r19, r23
    39a8:	c9 01       	movw	r24, r18
    39aa:	68 16       	cp	r6, r24
    39ac:	19 06       	cpc	r1, r25
    39ae:	18 f4       	brcc	.+6      	; 0x39b6 <esr_too_less>
    39b0:	86 19       	sub	r24, r6
    39b2:	91 09       	sbc	r25, r1
    39b4:	09 c0       	rjmp	.+18     	; 0x39c8 <ad_exit>

000039b6 <esr_too_less>:
    39b6:	8c 5e       	subi	r24, 0xEC	; 236
    39b8:	9f 4f       	sbci	r25, 0xFF	; 255
    39ba:	86 15       	cp	r24, r6
    39bc:	91 05       	cpc	r25, r1
    39be:	10 f4       	brcc	.+4      	; 0x39c4 <esr_too_less2>
    39c0:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <mark_as_uncalibrated>

000039c4 <esr_too_less2>:
    39c4:	81 2d       	mov	r24, r1
    39c6:	91 2d       	mov	r25, r1

000039c8 <ad_exit>:
    39c8:	6e 96       	adiw	r28, 0x1e	; 30
    39ca:	0f b6       	in	r0, 0x3f	; 63
    39cc:	f8 94       	cli
    39ce:	de bf       	out	0x3e, r29	; 62
    39d0:	0f be       	out	0x3f, r0	; 63
    39d2:	cd bf       	out	0x3d, r28	; 61
    39d4:	cf 91       	pop	r28
    39d6:	df 91       	pop	r29
    39d8:	1f 91       	pop	r17
    39da:	0f 91       	pop	r16
    39dc:	ff 90       	pop	r15
    39de:	ef 90       	pop	r14
    39e0:	df 90       	pop	r13
    39e2:	cf 90       	pop	r12
    39e4:	bf 90       	pop	r11
    39e6:	af 90       	pop	r10
    39e8:	9f 90       	pop	r9
    39ea:	8f 90       	pop	r8
    39ec:	7f 90       	pop	r7
    39ee:	6f 90       	pop	r6
    39f0:	5f 90       	pop	r5
    39f2:	4f 90       	pop	r4
    39f4:	3f 90       	pop	r3
    39f6:	2f 90       	pop	r2
    39f8:	08 95       	ret

000039fa <GetVloss>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void GetVloss() {
    39fa:	cf 92       	push	r12
    39fc:	df 92       	push	r13
    39fe:	ef 92       	push	r14
    3a00:	ff 92       	push	r15
    3a02:	0f 93       	push	r16
    3a04:	1f 93       	push	r17
    3a06:	cf 93       	push	r28
    3a08:	df 93       	push	r29
  } lval;
  uint8_t ii;
  uint8_t HiPinR_L;
  uint8_t LoADC;

  if (cap.v_loss > 0) return;		// Voltage loss is already known
    3a0a:	80 91 83 01 	lds	r24, 0x0183
    3a0e:	90 91 84 01 	lds	r25, 0x0184
    3a12:	00 97       	sbiw	r24, 0x00	; 0
    3a14:	09 f0       	breq	.+2      	; 0x3a18 <GetVloss+0x1e>
    3a16:	a2 c0       	rjmp	.+324    	; 0x3b5c <GetVloss+0x162>
  LoADC = pgm_read_byte(&PinADCtab[cap.ca]) | TXD_MSK;
    3a18:	e0 91 85 01 	lds	r30, 0x0185
    3a1c:	f0 e0       	ldi	r31, 0x00	; 0
    3a1e:	ed 5f       	subi	r30, 0xFD	; 253
    3a20:	fe 4f       	sbci	r31, 0xFE	; 254
    3a22:	04 91       	lpm	r16, Z+
    3a24:	08 60       	ori	r16, 0x08	; 8
  HiPinR_L = pgm_read_byte(&PinRLtab[cap.cb]);	//R_L mask for HighPin R_L load
    3a26:	e0 91 86 01 	lds	r30, 0x0186
    3a2a:	f0 e0       	ldi	r31, 0x00	; 0
    3a2c:	e0 50       	subi	r30, 0x00	; 0
    3a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a30:	14 91       	lpm	r17, Z+

  EntladePins();			// discharge capacitor
    3a32:	0e 94 ad 01 	call	0x35a	; 0x35a <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    3a36:	88 e0       	ldi	r24, 0x08	; 8
    3a38:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    3a3a:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    3a3c:	07 b9       	out	0x07, r16	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    3a3e:	14 b9       	out	0x04, r17	; 4
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
    3a40:	80 91 86 01 	lds	r24, 0x0186
    3a44:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
    3a48:	ec 01       	movw	r28, r24
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
    3a4a:	00 91 88 01 	lds	r16, 0x0188
    3a4e:	08 3f       	cpi	r16, 0xF8	; 248
    3a50:	0c f0       	brlt	.+2      	; 0x3a54 <GetVloss+0x5a>
    3a52:	84 c0       	rjmp	.+264    	; 0x3b5c <GetVloss+0x162>
  lval.dw = cap.cval_max;
    3a54:	20 91 79 01 	lds	r18, 0x0179
    3a58:	30 91 7a 01 	lds	r19, 0x017A
    3a5c:	40 91 7b 01 	lds	r20, 0x017B
    3a60:	50 91 7c 01 	lds	r21, 0x017C
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    3a64:	04 5f       	subi	r16, 0xF4	; 244
     lval.dw = (lval.dw + 5) / 10;
    3a66:	8a e0       	ldi	r24, 0x0A	; 10
    3a68:	c8 2e       	mov	r12, r24
    3a6a:	d1 2c       	mov	r13, r1
    3a6c:	e1 2c       	mov	r14, r1
    3a6e:	f1 2c       	mov	r15, r1
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
  lval.dw = cap.cval_max;
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    3a70:	0b c0       	rjmp	.+22     	; 0x3a88 <GetVloss+0x8e>
     lval.dw = (lval.dw + 5) / 10;
    3a72:	ca 01       	movw	r24, r20
    3a74:	b9 01       	movw	r22, r18
    3a76:	6b 5f       	subi	r22, 0xFB	; 251
    3a78:	7f 4f       	sbci	r23, 0xFF	; 255
    3a7a:	8f 4f       	sbci	r24, 0xFF	; 255
    3a7c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a7e:	a7 01       	movw	r20, r14
    3a80:	96 01       	movw	r18, r12
    3a82:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
  lval.dw = cap.cval_max;
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    3a86:	0f 5f       	subi	r16, 0xFF	; 255
    3a88:	04 30       	cpi	r16, 0x04	; 4
    3a8a:	98 f3       	brcs	.-26     	; 0x3a72 <GetVloss+0x78>
    3a8c:	79 01       	movw	r14, r18
     lval.dw = (lval.dw + 5) / 10;
  }
//  if ((lval.dw == 0) || (lval.dw > 500)) {
  if ((lval.dw == 0) || (lval.dw > 5000)) {
    3a8e:	21 50       	subi	r18, 0x01	; 1
    3a90:	30 40       	sbci	r19, 0x00	; 0
    3a92:	40 40       	sbci	r20, 0x00	; 0
    3a94:	50 40       	sbci	r21, 0x00	; 0
    3a96:	28 38       	cpi	r18, 0x88	; 136
    3a98:	83 e1       	ldi	r24, 0x13	; 19
    3a9a:	38 07       	cpc	r19, r24
    3a9c:	80 e0       	ldi	r24, 0x00	; 0
    3a9e:	48 07       	cpc	r20, r24
    3aa0:	80 e0       	ldi	r24, 0x00	; 0
    3aa2:	58 07       	cpc	r21, r24
    3aa4:	08 f0       	brcs	.+2      	; 0x3aa8 <GetVloss+0xae>
    3aa6:	5a c0       	rjmp	.+180    	; 0x3b5c <GetVloss+0x162>
     /* capacity more than 50uF, Voltage loss is already measured  */
     return;
  }
  R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    3aa8:	15 b9       	out	0x05, r17	; 5
  R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    3aaa:	14 b9       	out	0x04, r17	; 4
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    3aac:	00 e0       	ldi	r16, 0x00	; 0
    3aae:	10 e0       	ldi	r17, 0x00	; 0
    3ab0:	04 c0       	rjmp	.+8      	; 0x3aba <GetVloss+0xc0>
//     wait50us();			// wait exactly 50us
     wait5us();			// wait exactly 5us
    3ab2:	0e 94 56 14 	call	0x28ac	; 0x28ac <wait5us>
     /* capacity more than 50uF, Voltage loss is already measured  */
     return;
  }
  R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
  R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    3ab6:	0e 5f       	subi	r16, 0xFE	; 254
    3ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    3aba:	67 01       	movw	r12, r14
    3abc:	0e 15       	cp	r16, r14
    3abe:	1f 05       	cpc	r17, r15
    3ac0:	c0 f3       	brcs	.-16     	; 0x3ab2 <GetVloss+0xb8>
//     wait50us();			// wait exactly 50us
     wait5us();			// wait exactly 5us
  }
  R_DDR = 0;				// switch back to input
    3ac2:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// no Pull up
    3ac4:	15 b8       	out	0x05, r1	; 5
 // wait10us();			//wait a little time
  wdt_reset();
    3ac6:	a8 95       	wdr
  // read voltage without current
  ADCconfig.Samples = 5;		// set ADC to only 5 samples
    3ac8:	85 e0       	ldi	r24, 0x05	; 5
    3aca:	80 93 3c 01 	sts	0x013C, r24
  adcv[2] = ReadADC(cap.cb);
    3ace:	80 91 86 01 	lds	r24, 0x0186
    3ad2:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
  if (adcv[2] > adcv[0]) {
    3ad6:	c8 17       	cp	r28, r24
    3ad8:	d9 07       	cpc	r29, r25
    3ada:	20 f4       	brcc	.+8      	; 0x3ae4 <GetVloss+0xea>
     adcv[2] -= adcv[0];		//difference to beginning voltage
    3adc:	8c 01       	movw	r16, r24
    3ade:	0c 1b       	sub	r16, r28
    3ae0:	1d 0b       	sbc	r17, r29
    3ae2:	02 c0       	rjmp	.+4      	; 0x3ae8 <GetVloss+0xee>
  } else {
     adcv[2] = 0;			// voltage is lower or same as beginning voltage
    3ae4:	00 e0       	ldi	r16, 0x00	; 0
    3ae6:	10 e0       	ldi	r17, 0x00	; 0
  }
  // wait 2x the time which was required for loading
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    3ae8:	ee 24       	eor	r14, r14
    3aea:	ff 24       	eor	r15, r15
    3aec:	05 c0       	rjmp	.+10     	; 0x3af8 <GetVloss+0xfe>
//     wait50us();
     wait5us();
    3aee:	0e 94 56 14 	call	0x28ac	; 0x28ac <wait5us>
     adcv[2] -= adcv[0];		//difference to beginning voltage
  } else {
     adcv[2] = 0;			// voltage is lower or same as beginning voltage
  }
  // wait 2x the time which was required for loading
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    3af2:	08 94       	sec
    3af4:	e1 1c       	adc	r14, r1
    3af6:	f1 1c       	adc	r15, r1
    3af8:	ec 14       	cp	r14, r12
    3afa:	fd 04       	cpc	r15, r13
    3afc:	c0 f3       	brcs	.-16     	; 0x3aee <GetVloss+0xf4>
//     wait50us();
     wait5us();
  }
  adcv[3] = ReadADC(cap.cb);	// read voltage again, is discharged only a little bit ?
    3afe:	80 91 86 01 	lds	r24, 0x0186
    3b02:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
  ADCconfig.Samples = ANZ_MESS;		// set ADC back to configured No. of samples
    3b06:	29 e1       	ldi	r18, 0x19	; 25
    3b08:	20 93 3c 01 	sts	0x013C, r18
  wdt_reset();
    3b0c:	a8 95       	wdr
  if (adcv[3] > adcv[0]) {
    3b0e:	c8 17       	cp	r28, r24
    3b10:	d9 07       	cpc	r29, r25
    3b12:	18 f4       	brcc	.+6      	; 0x3b1a <GetVloss+0x120>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    3b14:	8c 1b       	sub	r24, r28
    3b16:	9d 0b       	sbc	r25, r29
    3b18:	02 c0       	rjmp	.+4      	; 0x3b1e <GetVloss+0x124>
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    3b1a:	80 e0       	ldi	r24, 0x00	; 0
    3b1c:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
    3b1e:	80 17       	cp	r24, r16
    3b20:	91 07       	cpc	r25, r17
    3b22:	a8 f4       	brcc	.+42     	; 0x3b4e <GetVloss+0x154>
     // build difference to load voltage
     adcv[1] = adcv[2] - adcv[3];	// lost voltage during load time wait
    3b24:	b8 01       	movw	r22, r16
    3b26:	68 1b       	sub	r22, r24
    3b28:	79 0b       	sbc	r23, r25
  } else {
     adcv[1] = 0;			// no lost voltage
  }
  // compute voltage drop as part from loaded voltage
  if (adcv[1] > 0) {
    3b2a:	89 f0       	breq	.+34     	; 0x3b4e <GetVloss+0x154>
     // there is any voltage drop (adcv[1]) !
     // adcv[2] is the loaded voltage.
     cap.v_loss = (unsigned long)(adcv[1] * 500UL) / adcv[2];
    3b2c:	80 e0       	ldi	r24, 0x00	; 0
    3b2e:	90 e0       	ldi	r25, 0x00	; 0
    3b30:	24 ef       	ldi	r18, 0xF4	; 244
    3b32:	31 e0       	ldi	r19, 0x01	; 1
    3b34:	40 e0       	ldi	r20, 0x00	; 0
    3b36:	50 e0       	ldi	r21, 0x00	; 0
    3b38:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
    3b3c:	98 01       	movw	r18, r16
    3b3e:	40 e0       	ldi	r20, 0x00	; 0
    3b40:	50 e0       	ldi	r21, 0x00	; 0
    3b42:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
    3b46:	30 93 84 01 	sts	0x0184, r19
    3b4a:	20 93 83 01 	sts	0x0183, r18
  lcd_line4();
  DisplayValue(lval.w[0],0,'x',4);
#endif

  // discharge capacitor again
  EntladePins();		// discharge capacitors
    3b4e:	0e 94 ad 01 	call	0x35a	; 0x35a <EntladePins>
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    3b52:	88 e0       	ldi	r24, 0x08	; 8
    3b54:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    3b56:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    3b58:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    3b5a:	15 b8       	out	0x05, r1	; 5
#endif
  return;
 } // end GetVdrop()
    3b5c:	df 91       	pop	r29
    3b5e:	cf 91       	pop	r28
    3b60:	1f 91       	pop	r17
    3b62:	0f 91       	pop	r16
    3b64:	ff 90       	pop	r15
    3b66:	ef 90       	pop	r14
    3b68:	df 90       	pop	r13
    3b6a:	cf 90       	pop	r12
    3b6c:	08 95       	ret

00003b6e <Calibrate_UR>:
#include "Transistortester.h"
void Calibrate_UR(void) {
    3b6e:	8f 92       	push	r8
    3b70:	9f 92       	push	r9
    3b72:	af 92       	push	r10
    3b74:	bf 92       	push	r11
    3b76:	cf 92       	push	r12
    3b78:	df 92       	push	r13
    3b7a:	ef 92       	push	r14
    3b7c:	ff 92       	push	r15
    3b7e:	0f 93       	push	r16
    3b80:	1f 93       	push	r17
    3b82:	cf 93       	push	r28
    3b84:	df 93       	push	r29
  uint16_t sum_rp;	// sum of 3 Pin voltages with 680 Ohm load
  uint16_t u680;	// 3 * (Voltage at 680 Ohm)
#endif


  ADCconfig.U_AVCC = U_VCC;     // set initial VCC Voltage
    3b86:	88 e8       	ldi	r24, 0x88	; 136
    3b88:	93 e1       	ldi	r25, 0x13	; 19
    3b8a:	90 93 41 01 	sts	0x0141, r25
    3b8e:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    3b92:	8e eb       	ldi	r24, 0xBE	; 190
    3b94:	80 93 3c 01 	sts	0x013C, r24
                                        //############################################
#if FLASHEND > 0x1fff
  uint16_t mv2500;
  ADC_PORT = TXD_VAL;                   // switch to 0V
    3b98:	08 e0       	ldi	r16, 0x08	; 8
    3b9a:	08 b9       	out	0x08, r16	; 8
  ADC_DDR = (1<<TPREF) | TXD_MSK;       // switch pin with 2.5V reference to GND
    3b9c:	88 e1       	ldi	r24, 0x18	; 24
    3b9e:	87 b9       	out	0x07, r24	; 7
  wait20us();			// switch only short time, so that the relais do not really switch
    3ba0:	0e 94 54 14 	call	0x28a8	; 0x28a8 <wait20us>
  ADC_DDR =  TXD_MSK;		// switch pin with reference back to input
    3ba4:	07 b9       	out	0x07, r16	; 7
  mv2500 = W5msReadADC(TPREF); // read voltage of 2.5V precision reference
    3ba6:	84 e0       	ldi	r24, 0x04	; 4
    3ba8:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
    3bac:	ec 01       	movw	r28, r24
  if ((mv2500 > 2250) && (mv2500 < 2750)) {
    3bae:	8b 5c       	subi	r24, 0xCB	; 203
    3bb0:	98 40       	sbci	r25, 0x08	; 8
    3bb2:	21 e0       	ldi	r18, 0x01	; 1
    3bb4:	83 3f       	cpi	r24, 0xF3	; 243
    3bb6:	92 07       	cpc	r25, r18
    3bb8:	c0 f4       	brcc	.+48     	; 0x3bea <Calibrate_UR+0x7c>
     // precision voltage reference connected, update U_AVCC
     WithReference = 1;
    3bba:	81 e0       	ldi	r24, 0x01	; 1
    3bbc:	80 93 4a 01 	sts	0x014A, r24
     ADCconfig.U_AVCC = (unsigned long)((unsigned long)ADCconfig.U_AVCC * 2495) / mv2500;
    3bc0:	60 91 40 01 	lds	r22, 0x0140
    3bc4:	70 91 41 01 	lds	r23, 0x0141
    3bc8:	80 e0       	ldi	r24, 0x00	; 0
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	2f eb       	ldi	r18, 0xBF	; 191
    3bce:	39 e0       	ldi	r19, 0x09	; 9
    3bd0:	40 e0       	ldi	r20, 0x00	; 0
    3bd2:	50 e0       	ldi	r21, 0x00	; 0
    3bd4:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
    3bd8:	9e 01       	movw	r18, r28
    3bda:	40 e0       	ldi	r20, 0x00	; 0
    3bdc:	50 e0       	ldi	r21, 0x00	; 0
    3bde:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
    3be2:	30 93 41 01 	sts	0x0141, r19
    3be6:	20 93 40 01 	sts	0x0140, r18
  }
#endif
#ifdef WITH_AUTO_REF
  (void) ReadADC(MUX_INT_REF);	// read reference voltage 
    3bea:	8e e0       	ldi	r24, 0x0E	; 14
    3bec:	0e 94 c7 1a 	call	0x358e	; 0x358e <ReadADC>
  ref_mv = W5msReadADC(MUX_INT_REF);	// read reference voltage 
    3bf0:	8e e0       	ldi	r24, 0x0E	; 14
    3bf2:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
    3bf6:	90 93 45 01 	sts	0x0145, r25
    3bfa:	80 93 44 01 	sts	0x0144, r24
  RefVoltage();			//compute RHmultip = f(reference voltage)
    3bfe:	0e 94 43 02 	call	0x486	; 0x486 <RefVoltage>
#else
  ref_mv = DEFAULT_BAND_GAP;    // set to default Reference Voltage
#endif
  ADCconfig.U_Bandgap = ADC_internal_reference; // set internal reference voltage for ADC
    3c02:	82 e9       	ldi	r24, 0x92	; 146
    3c04:	91 e0       	ldi	r25, 0x01	; 1
    3c06:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <__eerd_byte_m168>
    3c0a:	99 27       	eor	r25, r25
    3c0c:	87 fd       	sbrc	r24, 7
    3c0e:	90 95       	com	r25
    3c10:	20 91 44 01 	lds	r18, 0x0144
    3c14:	30 91 45 01 	lds	r19, 0x0145
    3c18:	82 0f       	add	r24, r18
    3c1a:	93 1f       	adc	r25, r19
    3c1c:	90 93 3f 01 	sts	0x013F, r25
    3c20:	80 93 3e 01 	sts	0x013E, r24
                                        //############################################

#ifdef AUTO_CAL
  // measurement of internal resistance of the ADC port outputs switched to GND
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    3c24:	79 e0       	ldi	r23, 0x09	; 9
    3c26:	d7 2e       	mov	r13, r23
    3c28:	d7 b8       	out	0x07, r13	; 7
  R_PORT = 1<<(TP1*2);		//R_L-PORT 1 to VCC
    3c2a:	aa 24       	eor	r10, r10
    3c2c:	a3 94       	inc	r10
    3c2e:	a5 b8       	out	0x05, r10	; 5
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to VCC
    3c30:	a4 b8       	out	0x04, r10	; 4
  sum_rm = W5msReadADC(TP1);
    3c32:	80 e0       	ldi	r24, 0x00	; 0
    3c34:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
    3c38:	8c 01       	movw	r16, r24

  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin 2 to output 0V
    3c3a:	6a e0       	ldi	r22, 0x0A	; 10
    3c3c:	86 2e       	mov	r8, r22
    3c3e:	87 b8       	out	0x07, r8	; 7
  R_PORT =  1<<(TP2*2);		//R_L-PORT 2 to VCC
    3c40:	54 e0       	ldi	r21, 0x04	; 4
    3c42:	c5 2e       	mov	r12, r21
    3c44:	c5 b8       	out	0x05, r12	; 5
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to VCC
    3c46:	c4 b8       	out	0x04, r12	; 4
  sum_rm += W5msReadADC(TP2);
    3c48:	81 e0       	ldi	r24, 0x01	; 1
    3c4a:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
    3c4e:	08 0f       	add	r16, r24
    3c50:	19 1f       	adc	r17, r25

  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin 3 to output 0V
    3c52:	4c e0       	ldi	r20, 0x0C	; 12
    3c54:	f4 2e       	mov	r15, r20
    3c56:	f7 b8       	out	0x07, r15	; 7
  R_PORT =  1<<(TP3*2);		//R_L-PORT 3 to VCC
    3c58:	30 e1       	ldi	r19, 0x10	; 16
    3c5a:	e3 2e       	mov	r14, r19
    3c5c:	e5 b8       	out	0x05, r14	; 5
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to VCC
    3c5e:	e4 b8       	out	0x04, r14	; 4
  sum_rm += W5msReadADC(TP3);	//add all three values
    3c60:	82 e0       	ldi	r24, 0x02	; 2
    3c62:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
    3c66:	08 0f       	add	r16, r24
    3c68:	19 1f       	adc	r17, r25

  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
    3c6a:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
    3c6c:	d8 b8       	out	0x08, r13	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    3c6e:	d7 b8       	out	0x07, r13	; 7
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
    3c70:	a4 b8       	out	0x04, r10	; 4
  sum_rp = ADCconfig.U_AVCC - W5msReadADC(TP1);
    3c72:	c0 91 40 01 	lds	r28, 0x0140
    3c76:	d0 91 41 01 	lds	r29, 0x0141
    3c7a:	80 e0       	ldi	r24, 0x00	; 0
    3c7c:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
    3c80:	5c 01       	movw	r10, r24
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
    3c82:	88 b8       	out	0x08, r8	; 8
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
    3c84:	87 b8       	out	0x07, r8	; 7
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
    3c86:	c4 b8       	out	0x04, r12	; 4
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP2);
    3c88:	c0 90 40 01 	lds	r12, 0x0140
    3c8c:	d0 90 41 01 	lds	r13, 0x0141
    3c90:	81 e0       	ldi	r24, 0x01	; 1
    3c92:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
    3c96:	4c 01       	movw	r8, r24

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
    3c98:	f8 b8       	out	0x08, r15	; 8
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
    3c9a:	f7 b8       	out	0x07, r15	; 7
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
    3c9c:	e4 b8       	out	0x04, r14	; 4
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP3);
    3c9e:	e0 90 40 01 	lds	r14, 0x0140
    3ca2:	f0 90 41 01 	lds	r15, 0x0141
    3ca6:	82 e0       	ldi	r24, 0x02	; 2
    3ca8:	0e 94 c1 1a 	call	0x3582	; 0x3582 <W5msReadADC>
  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
  sum_rp = ADCconfig.U_AVCC - W5msReadADC(TP1);
    3cac:	cc 0d       	add	r28, r12
    3cae:	dd 1d       	adc	r29, r13
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP2);
    3cb0:	ce 0d       	add	r28, r14
    3cb2:	df 1d       	adc	r29, r15
    3cb4:	ca 19       	sub	r28, r10
    3cb6:	db 09       	sbc	r29, r11

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP3);
    3cb8:	c8 19       	sub	r28, r8
    3cba:	d9 09       	sbc	r29, r9
    3cbc:	c8 1b       	sub	r28, r24
    3cbe:	d9 0b       	sbc	r29, r25

  u680 = ((ADCconfig.U_AVCC * 3) - sum_rm - sum_rp);	//three times the voltage at the 680 Ohm
    3cc0:	80 91 40 01 	lds	r24, 0x0140
    3cc4:	90 91 41 01 	lds	r25, 0x0141
    3cc8:	6c 01       	movw	r12, r24
    3cca:	cc 0c       	add	r12, r12
    3ccc:	dd 1c       	adc	r13, r13
    3cce:	c8 0e       	add	r12, r24
    3cd0:	d9 1e       	adc	r13, r25
    3cd2:	c0 1a       	sub	r12, r16
    3cd4:	d1 0a       	sbc	r13, r17
    3cd6:	cc 1a       	sub	r12, r28
    3cd8:	dd 0a       	sbc	r13, r29
  pin_rmi = (unsigned long)((unsigned long)sum_rm * (unsigned long)R_L_VAL) / (unsigned long)u680;
    3cda:	ee 24       	eor	r14, r14
    3cdc:	ff 24       	eor	r15, r15
    3cde:	b8 01       	movw	r22, r16
    3ce0:	80 e0       	ldi	r24, 0x00	; 0
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	20 e9       	ldi	r18, 0x90	; 144
    3ce6:	3a e1       	ldi	r19, 0x1A	; 26
    3ce8:	40 e0       	ldi	r20, 0x00	; 0
    3cea:	50 e0       	ldi	r21, 0x00	; 0
    3cec:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
    3cf0:	a7 01       	movw	r20, r14
    3cf2:	96 01       	movw	r18, r12
    3cf4:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
    3cf8:	89 01       	movw	r16, r18
    3cfa:	30 93 49 01 	sts	0x0149, r19
    3cfe:	20 93 48 01 	sts	0x0148, r18
//  adcmv[2] = pin_rm;	// for last output in row 2
  pin_rpl = (unsigned long)((unsigned long)sum_rp * (unsigned long)R_L_VAL) / (unsigned long)u680;
    3d02:	be 01       	movw	r22, r28
    3d04:	80 e0       	ldi	r24, 0x00	; 0
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	20 e9       	ldi	r18, 0x90	; 144
    3d0a:	3a e1       	ldi	r19, 0x1A	; 26
    3d0c:	40 e0       	ldi	r20, 0x00	; 0
    3d0e:	50 e0       	ldi	r21, 0x00	; 0
    3d10:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__mulsi3>
    3d14:	a7 01       	movw	r20, r14
    3d16:	96 01       	movw	r18, r12
    3d18:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <__udivmodsi4>
    3d1c:	c9 01       	movw	r24, r18
    3d1e:	30 93 43 01 	sts	0x0143, r19
    3d22:	20 93 42 01 	sts	0x0142, r18
  resis680pl = pin_rpl + R_L_VAL;
    3d26:	80 57       	subi	r24, 0x70	; 112
    3d28:	95 4e       	sbci	r25, 0xE5	; 229
    3d2a:	90 93 09 01 	sts	0x0109, r25
    3d2e:	80 93 08 01 	sts	0x0108, r24
  resis680mi = pin_rmi + R_L_VAL;
    3d32:	00 57       	subi	r16, 0x70	; 112
    3d34:	15 4e       	sbci	r17, 0xE5	; 229
    3d36:	10 93 04 01 	sts	0x0104, r17
    3d3a:	00 93 03 01 	sts	0x0103, r16
#endif

  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    3d3e:	89 e1       	ldi	r24, 0x19	; 25
    3d40:	80 93 3c 01 	sts	0x013C, r24
 } 
    3d44:	df 91       	pop	r29
    3d46:	cf 91       	pop	r28
    3d48:	1f 91       	pop	r17
    3d4a:	0f 91       	pop	r16
    3d4c:	ff 90       	pop	r15
    3d4e:	ef 90       	pop	r14
    3d50:	df 90       	pop	r13
    3d52:	cf 90       	pop	r12
    3d54:	bf 90       	pop	r11
    3d56:	af 90       	pop	r10
    3d58:	9f 90       	pop	r9
    3d5a:	8f 90       	pop	r8
    3d5c:	08 95       	ret

00003d5e <__mulsi3>:
    3d5e:	62 9f       	mul	r22, r18
    3d60:	d0 01       	movw	r26, r0
    3d62:	73 9f       	mul	r23, r19
    3d64:	f0 01       	movw	r30, r0
    3d66:	82 9f       	mul	r24, r18
    3d68:	e0 0d       	add	r30, r0
    3d6a:	f1 1d       	adc	r31, r1
    3d6c:	64 9f       	mul	r22, r20
    3d6e:	e0 0d       	add	r30, r0
    3d70:	f1 1d       	adc	r31, r1
    3d72:	92 9f       	mul	r25, r18
    3d74:	f0 0d       	add	r31, r0
    3d76:	83 9f       	mul	r24, r19
    3d78:	f0 0d       	add	r31, r0
    3d7a:	74 9f       	mul	r23, r20
    3d7c:	f0 0d       	add	r31, r0
    3d7e:	65 9f       	mul	r22, r21
    3d80:	f0 0d       	add	r31, r0
    3d82:	99 27       	eor	r25, r25
    3d84:	72 9f       	mul	r23, r18
    3d86:	b0 0d       	add	r27, r0
    3d88:	e1 1d       	adc	r30, r1
    3d8a:	f9 1f       	adc	r31, r25
    3d8c:	63 9f       	mul	r22, r19
    3d8e:	b0 0d       	add	r27, r0
    3d90:	e1 1d       	adc	r30, r1
    3d92:	f9 1f       	adc	r31, r25
    3d94:	bd 01       	movw	r22, r26
    3d96:	cf 01       	movw	r24, r30
    3d98:	11 24       	eor	r1, r1
    3d9a:	08 95       	ret

00003d9c <__udivmodqi4>:
    3d9c:	99 1b       	sub	r25, r25
    3d9e:	79 e0       	ldi	r23, 0x09	; 9
    3da0:	04 c0       	rjmp	.+8      	; 0x3daa <__udivmodqi4_ep>

00003da2 <__udivmodqi4_loop>:
    3da2:	99 1f       	adc	r25, r25
    3da4:	96 17       	cp	r25, r22
    3da6:	08 f0       	brcs	.+2      	; 0x3daa <__udivmodqi4_ep>
    3da8:	96 1b       	sub	r25, r22

00003daa <__udivmodqi4_ep>:
    3daa:	88 1f       	adc	r24, r24
    3dac:	7a 95       	dec	r23
    3dae:	c9 f7       	brne	.-14     	; 0x3da2 <__udivmodqi4_loop>
    3db0:	80 95       	com	r24
    3db2:	08 95       	ret

00003db4 <__udivmodhi4>:
    3db4:	aa 1b       	sub	r26, r26
    3db6:	bb 1b       	sub	r27, r27
    3db8:	51 e1       	ldi	r21, 0x11	; 17
    3dba:	07 c0       	rjmp	.+14     	; 0x3dca <__udivmodhi4_ep>

00003dbc <__udivmodhi4_loop>:
    3dbc:	aa 1f       	adc	r26, r26
    3dbe:	bb 1f       	adc	r27, r27
    3dc0:	a6 17       	cp	r26, r22
    3dc2:	b7 07       	cpc	r27, r23
    3dc4:	10 f0       	brcs	.+4      	; 0x3dca <__udivmodhi4_ep>
    3dc6:	a6 1b       	sub	r26, r22
    3dc8:	b7 0b       	sbc	r27, r23

00003dca <__udivmodhi4_ep>:
    3dca:	88 1f       	adc	r24, r24
    3dcc:	99 1f       	adc	r25, r25
    3dce:	5a 95       	dec	r21
    3dd0:	a9 f7       	brne	.-22     	; 0x3dbc <__udivmodhi4_loop>
    3dd2:	80 95       	com	r24
    3dd4:	90 95       	com	r25
    3dd6:	bc 01       	movw	r22, r24
    3dd8:	cd 01       	movw	r24, r26
    3dda:	08 95       	ret

00003ddc <__udivmodsi4>:
    3ddc:	a1 e2       	ldi	r26, 0x21	; 33
    3dde:	1a 2e       	mov	r1, r26
    3de0:	aa 1b       	sub	r26, r26
    3de2:	bb 1b       	sub	r27, r27
    3de4:	fd 01       	movw	r30, r26
    3de6:	0d c0       	rjmp	.+26     	; 0x3e02 <__udivmodsi4_ep>

00003de8 <__udivmodsi4_loop>:
    3de8:	aa 1f       	adc	r26, r26
    3dea:	bb 1f       	adc	r27, r27
    3dec:	ee 1f       	adc	r30, r30
    3dee:	ff 1f       	adc	r31, r31
    3df0:	a2 17       	cp	r26, r18
    3df2:	b3 07       	cpc	r27, r19
    3df4:	e4 07       	cpc	r30, r20
    3df6:	f5 07       	cpc	r31, r21
    3df8:	20 f0       	brcs	.+8      	; 0x3e02 <__udivmodsi4_ep>
    3dfa:	a2 1b       	sub	r26, r18
    3dfc:	b3 0b       	sbc	r27, r19
    3dfe:	e4 0b       	sbc	r30, r20
    3e00:	f5 0b       	sbc	r31, r21

00003e02 <__udivmodsi4_ep>:
    3e02:	66 1f       	adc	r22, r22
    3e04:	77 1f       	adc	r23, r23
    3e06:	88 1f       	adc	r24, r24
    3e08:	99 1f       	adc	r25, r25
    3e0a:	1a 94       	dec	r1
    3e0c:	69 f7       	brne	.-38     	; 0x3de8 <__udivmodsi4_loop>
    3e0e:	60 95       	com	r22
    3e10:	70 95       	com	r23
    3e12:	80 95       	com	r24
    3e14:	90 95       	com	r25
    3e16:	9b 01       	movw	r18, r22
    3e18:	ac 01       	movw	r20, r24
    3e1a:	bd 01       	movw	r22, r26
    3e1c:	cf 01       	movw	r24, r30
    3e1e:	08 95       	ret

00003e20 <__divmodsi4>:
    3e20:	97 fb       	bst	r25, 7
    3e22:	09 2e       	mov	r0, r25
    3e24:	05 26       	eor	r0, r21
    3e26:	0e d0       	rcall	.+28     	; 0x3e44 <__divmodsi4_neg1>
    3e28:	57 fd       	sbrc	r21, 7
    3e2a:	04 d0       	rcall	.+8      	; 0x3e34 <__divmodsi4_neg2>
    3e2c:	d7 df       	rcall	.-82     	; 0x3ddc <__udivmodsi4>
    3e2e:	0a d0       	rcall	.+20     	; 0x3e44 <__divmodsi4_neg1>
    3e30:	00 1c       	adc	r0, r0
    3e32:	38 f4       	brcc	.+14     	; 0x3e42 <__divmodsi4_exit>

00003e34 <__divmodsi4_neg2>:
    3e34:	50 95       	com	r21
    3e36:	40 95       	com	r20
    3e38:	30 95       	com	r19
    3e3a:	21 95       	neg	r18
    3e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e3e:	4f 4f       	sbci	r20, 0xFF	; 255
    3e40:	5f 4f       	sbci	r21, 0xFF	; 255

00003e42 <__divmodsi4_exit>:
    3e42:	08 95       	ret

00003e44 <__divmodsi4_neg1>:
    3e44:	f6 f7       	brtc	.-4      	; 0x3e42 <__divmodsi4_exit>
    3e46:	90 95       	com	r25
    3e48:	80 95       	com	r24
    3e4a:	70 95       	com	r23
    3e4c:	61 95       	neg	r22
    3e4e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e50:	8f 4f       	sbci	r24, 0xFF	; 255
    3e52:	9f 4f       	sbci	r25, 0xFF	; 255
    3e54:	08 95       	ret

00003e56 <itoa>:
    3e56:	fb 01       	movw	r30, r22
    3e58:	9f 01       	movw	r18, r30
    3e5a:	e8 94       	clt
    3e5c:	42 30       	cpi	r20, 0x02	; 2
    3e5e:	c4 f0       	brlt	.+48     	; 0x3e90 <itoa+0x3a>
    3e60:	45 32       	cpi	r20, 0x25	; 37
    3e62:	b4 f4       	brge	.+44     	; 0x3e90 <itoa+0x3a>
    3e64:	4a 30       	cpi	r20, 0x0A	; 10
    3e66:	29 f4       	brne	.+10     	; 0x3e72 <itoa+0x1c>
    3e68:	97 fb       	bst	r25, 7
    3e6a:	1e f4       	brtc	.+6      	; 0x3e72 <itoa+0x1c>
    3e6c:	90 95       	com	r25
    3e6e:	81 95       	neg	r24
    3e70:	9f 4f       	sbci	r25, 0xFF	; 255
    3e72:	64 2f       	mov	r22, r20
    3e74:	77 27       	eor	r23, r23
    3e76:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__udivmodhi4>
    3e7a:	80 5d       	subi	r24, 0xD0	; 208
    3e7c:	8a 33       	cpi	r24, 0x3A	; 58
    3e7e:	0c f0       	brlt	.+2      	; 0x3e82 <itoa+0x2c>
    3e80:	89 5d       	subi	r24, 0xD9	; 217
    3e82:	81 93       	st	Z+, r24
    3e84:	cb 01       	movw	r24, r22
    3e86:	00 97       	sbiw	r24, 0x00	; 0
    3e88:	a1 f7       	brne	.-24     	; 0x3e72 <itoa+0x1c>
    3e8a:	16 f4       	brtc	.+4      	; 0x3e90 <itoa+0x3a>
    3e8c:	5d e2       	ldi	r21, 0x2D	; 45
    3e8e:	51 93       	st	Z+, r21
    3e90:	10 82       	st	Z, r1
    3e92:	c9 01       	movw	r24, r18
    3e94:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <strrev>

00003e98 <utoa>:
    3e98:	fb 01       	movw	r30, r22
    3e9a:	9f 01       	movw	r18, r30
    3e9c:	42 30       	cpi	r20, 0x02	; 2
    3e9e:	74 f0       	brlt	.+28     	; 0x3ebc <utoa+0x24>
    3ea0:	45 32       	cpi	r20, 0x25	; 37
    3ea2:	64 f4       	brge	.+24     	; 0x3ebc <utoa+0x24>
    3ea4:	64 2f       	mov	r22, r20
    3ea6:	77 27       	eor	r23, r23
    3ea8:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <__udivmodhi4>
    3eac:	80 5d       	subi	r24, 0xD0	; 208
    3eae:	8a 33       	cpi	r24, 0x3A	; 58
    3eb0:	0c f0       	brlt	.+2      	; 0x3eb4 <utoa+0x1c>
    3eb2:	89 5d       	subi	r24, 0xD9	; 217
    3eb4:	81 93       	st	Z+, r24
    3eb6:	cb 01       	movw	r24, r22
    3eb8:	00 97       	sbiw	r24, 0x00	; 0
    3eba:	a1 f7       	brne	.-24     	; 0x3ea4 <utoa+0xc>
    3ebc:	10 82       	st	Z, r1
    3ebe:	c9 01       	movw	r24, r18
    3ec0:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <strrev>

00003ec4 <__eerd_byte_m168>:
    3ec4:	f9 99       	sbic	0x1f, 1	; 31
    3ec6:	fe cf       	rjmp	.-4      	; 0x3ec4 <__eerd_byte_m168>
    3ec8:	92 bd       	out	0x22, r25	; 34
    3eca:	81 bd       	out	0x21, r24	; 33
    3ecc:	f8 9a       	sbi	0x1f, 0	; 31
    3ece:	99 27       	eor	r25, r25
    3ed0:	80 b5       	in	r24, 0x20	; 32
    3ed2:	08 95       	ret

00003ed4 <__eerd_word_m168>:
    3ed4:	a8 e1       	ldi	r26, 0x18	; 24
    3ed6:	b0 e0       	ldi	r27, 0x00	; 0
    3ed8:	42 e0       	ldi	r20, 0x02	; 2
    3eda:	50 e0       	ldi	r21, 0x00	; 0
    3edc:	0c 94 95 1f 	jmp	0x3f2a	; 0x3f2a <__eerd_blraw_m168>

00003ee0 <__eewr_byte_m168>:
    3ee0:	26 2f       	mov	r18, r22

00003ee2 <__eewr_r18_m168>:
    3ee2:	f9 99       	sbic	0x1f, 1	; 31
    3ee4:	fe cf       	rjmp	.-4      	; 0x3ee2 <__eewr_r18_m168>
    3ee6:	1f ba       	out	0x1f, r1	; 31
    3ee8:	92 bd       	out	0x22, r25	; 34
    3eea:	81 bd       	out	0x21, r24	; 33
    3eec:	20 bd       	out	0x20, r18	; 32
    3eee:	0f b6       	in	r0, 0x3f	; 63
    3ef0:	f8 94       	cli
    3ef2:	fa 9a       	sbi	0x1f, 2	; 31
    3ef4:	f9 9a       	sbi	0x1f, 1	; 31
    3ef6:	0f be       	out	0x3f, r0	; 63
    3ef8:	01 96       	adiw	r24, 0x01	; 1
    3efa:	08 95       	ret

00003efc <__eewr_word_m168>:
    3efc:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__eewr_byte_m168>
    3f00:	27 2f       	mov	r18, r23
    3f02:	0c 94 71 1f 	jmp	0x3ee2	; 0x3ee2 <__eewr_r18_m168>

00003f06 <strrev>:
    3f06:	dc 01       	movw	r26, r24
    3f08:	fc 01       	movw	r30, r24
    3f0a:	67 2f       	mov	r22, r23
    3f0c:	71 91       	ld	r23, Z+
    3f0e:	77 23       	and	r23, r23
    3f10:	e1 f7       	brne	.-8      	; 0x3f0a <strrev+0x4>
    3f12:	32 97       	sbiw	r30, 0x02	; 2
    3f14:	04 c0       	rjmp	.+8      	; 0x3f1e <strrev+0x18>
    3f16:	7c 91       	ld	r23, X
    3f18:	6d 93       	st	X+, r22
    3f1a:	70 83       	st	Z, r23
    3f1c:	62 91       	ld	r22, -Z
    3f1e:	ae 17       	cp	r26, r30
    3f20:	bf 07       	cpc	r27, r31
    3f22:	c8 f3       	brcs	.-14     	; 0x3f16 <strrev+0x10>
    3f24:	08 95       	ret

00003f26 <__eerd_block_m168>:
    3f26:	dc 01       	movw	r26, r24
    3f28:	cb 01       	movw	r24, r22

00003f2a <__eerd_blraw_m168>:
    3f2a:	fc 01       	movw	r30, r24
    3f2c:	f9 99       	sbic	0x1f, 1	; 31
    3f2e:	fe cf       	rjmp	.-4      	; 0x3f2c <__eerd_blraw_m168+0x2>
    3f30:	06 c0       	rjmp	.+12     	; 0x3f3e <__eerd_blraw_m168+0x14>
    3f32:	f2 bd       	out	0x22, r31	; 34
    3f34:	e1 bd       	out	0x21, r30	; 33
    3f36:	f8 9a       	sbi	0x1f, 0	; 31
    3f38:	31 96       	adiw	r30, 0x01	; 1
    3f3a:	00 b4       	in	r0, 0x20	; 32
    3f3c:	0d 92       	st	X+, r0
    3f3e:	41 50       	subi	r20, 0x01	; 1
    3f40:	50 40       	sbci	r21, 0x00	; 0
    3f42:	b8 f7       	brcc	.-18     	; 0x3f32 <__eerd_blraw_m168+0x8>
    3f44:	08 95       	ret

00003f46 <_exit>:
    3f46:	f8 94       	cli

00003f48 <__stop_program>:
    3f48:	ff cf       	rjmp	.-2      	; 0x3f48 <__stop_program>
