
TransistorTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00003f34  00003fe8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f34  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  00800102  00800102  00003fea  2**0
                  ALLOC
  3 .eeprom       000001f7  00810000  00810000  00003fea  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         00000dbc  00000000  00000000  000041e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001d2  00000000  00000000  00004fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000000e0  00000000  00000000  00005172  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000793  00000000  00000000  00005252  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002e40  00000000  00000000  000059e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000094d  00000000  00000000  00008825  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000034c4  00000000  00000000  00009172  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000002e0  00000000  00000000  0000c638  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000940  00000000  00000000  0000c918  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000017d7  00000000  00000000  0000d258  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 0000025a  00000000  00000000  0000ea2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__ctors_end>
       4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      1c:	0c 94 9a 01 	jmp	0x334	; 0x334 <__vector_7>
      20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      28:	0c 94 66 17 	jmp	0x2ecc	; 0x2ecc <__vector_10>
      2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      34:	0c 94 4f 17 	jmp	0x2e9e	; 0x2e9e <__vector_13>
      38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      54:	0c 94 9b 01 	jmp	0x336	; 0x336 <__vector_21>
      58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>

00000068 <LogTab>:
      68:	00 00 14 00 29 00 3e 00 53 00 69 00 80 00 97 00     ....).>.S.i.....
      78:	ae 00 c6 00 df 00 f8 00 12 01 2d 01 49 01 65 01     ..........-.I.e.
      88:	82 01 a0 01 be 01 de 01 ff 01 21 02 44 02 68 02     ..........!.D.h.
      98:	8e 02 b5 02 de 02 09 03 35 03 64 03 94 03 c8 03     ........5.d.....
      a8:	fe 03 37 04 73 04 b4 04 f9 04 43 05 93 05 ea 05     ..7.s.....C.....
      b8:	49 06 b3 06 29 07 ae 07 48 08 ff 08 de 09           I...)...H.....

000000c6 <RHtab>:
      c6:	ba 03 87 03 58 03 2e 03 07 03 e4 02 c3 02 a4 02     ....X...........
      d6:	88 02                                               ..

000000d8 <URefT>:
      d8:	52 65 66 3d 00                                      Ref=.

000000dd <RHfakt>:
      dd:	52 48 66 3d 00                                      RHf=.

000000e2 <PinRLtab>:
      e2:	01 04 10                                            ...

000000e5 <PinADCtab>:
      e5:	01 02 04                                            ...

000000e8 <__ctors_end>:
      e8:	11 24       	eor	r1, r1
      ea:	1f be       	out	0x3f, r1	; 63
      ec:	cf ef       	ldi	r28, 0xFF	; 255
      ee:	d4 e0       	ldi	r29, 0x04	; 4
      f0:	de bf       	out	0x3e, r29	; 62
      f2:	cd bf       	out	0x3d, r28	; 61

000000f4 <__do_copy_data>:
      f4:	11 e0       	ldi	r17, 0x01	; 1
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b1 e0       	ldi	r27, 0x01	; 1
      fa:	e4 e3       	ldi	r30, 0x34	; 52
      fc:	ff e3       	ldi	r31, 0x3F	; 63
      fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x10>
     100:	05 90       	lpm	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	a2 30       	cpi	r26, 0x02	; 2
     106:	b1 07       	cpc	r27, r17
     108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0xc>

0000010a <__do_clear_bss>:
     10a:	11 e0       	ldi	r17, 0x01	; 1
     10c:	a2 e0       	ldi	r26, 0x02	; 2
     10e:	b1 e0       	ldi	r27, 0x01	; 1
     110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
     112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
     114:	a0 39       	cpi	r26, 0x90	; 144
     116:	b1 07       	cpc	r27, r17
     118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
     11a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <main>
     11e:	0c 94 98 1f 	jmp	0x3f30	; 0x3f30 <_exit>

00000122 <__bad_interrupt>:
     122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <lcd_data>:
void lcd_space(void) {
   lcd_data(' ');
}

// sends data byte to the LCD 
void lcd_data(unsigned char temp1) {
     126:	1f 93       	push	r17
     128:	18 2f       	mov	r17, r24
 lcd_write_data(temp1);		// set RS to 1
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	61 2f       	mov	r22, r17
     12e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_lcd_hw_write>
     132:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <wait50us>
#ifdef WITH_UART
 switch(temp1) {
     136:	18 30       	cpi	r17, 0x08	; 8
     138:	48 f4       	brcc	.+18     	; 0x14c <lcd_data+0x26>
     13a:	16 30       	cpi	r17, 0x06	; 6
     13c:	c0 f4       	brcc	.+48     	; 0x16e <lcd_data+0x48>
     13e:	12 30       	cpi	r17, 0x02	; 2
     140:	61 f0       	breq	.+24     	; 0x15a <lcd_data+0x34>
     142:	13 30       	cpi	r17, 0x03	; 3
     144:	79 f0       	breq	.+30     	; 0x164 <lcd_data+0x3e>
     146:	11 30       	cpi	r17, 0x01	; 1
     148:	f1 f4       	brne	.+60     	; 0x186 <lcd_data+0x60>
     14a:	05 c0       	rjmp	.+10     	; 0x156 <lcd_data+0x30>
     14c:	14 3e       	cpi	r17, 0xE4	; 228
     14e:	89 f0       	breq	.+34     	; 0x172 <lcd_data+0x4c>
     150:	14 3f       	cpi	r17, 0xF4	; 244
     152:	c9 f4       	brne	.+50     	; 0x186 <lcd_data+0x60>
     154:	10 c0       	rjmp	.+32     	; 0x176 <lcd_data+0x50>
    case LCD_CHAR_DIODE1:
    	uart_putc('>');
     156:	8e e3       	ldi	r24, 0x3E	; 62
     158:	06 c0       	rjmp	.+12     	; 0x166 <lcd_data+0x40>
    	uart_putc('|');
    	break;
    case LCD_CHAR_DIODE2:
    	uart_putc('|');
     15a:	8c e7       	ldi	r24, 0x7C	; 124
     15c:	0e 94 b4 13 	call	0x2768	; 0x2768 <uart_putc>
    	uart_putc('<');
     160:	8c e3       	ldi	r24, 0x3C	; 60
     162:	12 c0       	rjmp	.+36     	; 0x188 <lcd_data+0x62>
    	break;
    case LCD_CHAR_CAP:
    	uart_putc('|');
     164:	8c e7       	ldi	r24, 0x7C	; 124
     166:	0e 94 b4 13 	call	0x2768	; 0x2768 <uart_putc>
    	uart_putc('|');
     16a:	8c e7       	ldi	r24, 0x7C	; 124
     16c:	0d c0       	rjmp	.+26     	; 0x188 <lcd_data+0x62>
    	break;
    case LCD_CHAR_RESIS1:
    case LCD_CHAR_RESIS2:
    	uart_putc('R');
     16e:	82 e5       	ldi	r24, 0x52	; 82
     170:	0b c0       	rjmp	.+22     	; 0x188 <lcd_data+0x62>
//    case LCD_CHAR_DEGREE:	// degree sign
//    	uart_putc(0xf8);	// codepage 437 or 850 has degree
//    	break;
    case LCD_CHAR_U:		//µ
//    	uart_putc(0xe6);	// codepage 437 or 850 has my
    	uart_putc('u');		// better use the ASCII u
     172:	85 e7       	ldi	r24, 0x75	; 117
     174:	09 c0       	rjmp	.+18     	; 0x188 <lcd_data+0x62>
    	break;
    case LCD_CHAR_OMEGA:	//Omega
//	uart_putc(0xea);	// only codepage 437 has Omega
        uart_putc('O');
     176:	8f e4       	ldi	r24, 0x4F	; 79
     178:	0e 94 b4 13 	call	0x2768	; 0x2768 <uart_putc>
        uart_putc('h');
     17c:	88 e6       	ldi	r24, 0x68	; 104
     17e:	0e 94 b4 13 	call	0x2768	; 0x2768 <uart_putc>
        uart_putc('m');
     182:	8d e6       	ldi	r24, 0x6D	; 109
     184:	01 c0       	rjmp	.+2      	; 0x188 <lcd_data+0x62>
    	break;
    default:
    	uart_putc(temp1);
     186:	81 2f       	mov	r24, r17
     188:	0e 94 b4 13 	call	0x2768	; 0x2768 <uart_putc>
 }
#endif
}
     18c:	1f 91       	pop	r17
     18e:	08 95       	ret

00000190 <lcd_space>:
   lcd_data(temp + '1');
}

// send space character to LCD
void lcd_space(void) {
   lcd_data(' ');
     190:	80 e2       	ldi	r24, 0x20	; 32
     192:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
}
     196:	08 95       	ret

00000198 <lcd_testpin>:
 

// sends numeric character (Pin Number) to the LCD 
// from binary 0 we send ASCII 1 ....
void lcd_testpin(unsigned char temp) {
   lcd_data(temp + '1');
     198:	8f 5c       	subi	r24, 0xCF	; 207
     19a:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
}
     19e:	08 95       	ret

000001a0 <uart_newline>:
}


#ifdef WITH_UART
void uart_newline(void) {
   uart_putc('\r');
     1a0:	8d e0       	ldi	r24, 0x0D	; 13
     1a2:	0e 94 b4 13 	call	0x2768	; 0x2768 <uart_putc>
   uart_putc('\n');
     1a6:	8a e0       	ldi	r24, 0x0A	; 10
     1a8:	0e 94 b4 13 	call	0x2768	; 0x2768 <uart_putc>
}
     1ac:	08 95       	ret

000001ae <lcd_command>:
#endif
}
 
// sends a command to the LCD
 
void lcd_command(unsigned char temp1) {
     1ae:	1f 93       	push	r17
     1b0:	18 2f       	mov	r17, r24
        lcd_write_cmd(temp1);		// set RS to 0
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	61 2f       	mov	r22, r17
     1b6:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_lcd_hw_write>
     1ba:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <wait50us>
#ifdef WITH_UART
	if((temp1 == 0x80) || (temp1 == 0xC0)) {
     1be:	10 38       	cpi	r17, 0x80	; 128
     1c0:	11 f0       	breq	.+4      	; 0x1c6 <lcd_command+0x18>
     1c2:	10 3c       	cpi	r17, 0xC0	; 192
     1c4:	11 f4       	brne	.+4      	; 0x1ca <lcd_command+0x1c>
		uart_newline();
     1c6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <uart_newline>
	}
#endif
}
     1ca:	1f 91       	pop	r17
     1cc:	08 95       	ret

000001ce <lcd_clear>:
}
 
// send the command to clear the display 
 
void lcd_clear(void) {
   lcd_command(CLEAR_DISPLAY);
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
   wait_about10ms();
     1d4:	82 e0       	ldi	r24, 0x02	; 2
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>
#ifdef WITH_UART
   uart_newline();
     1dc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <uart_newline>
#endif
   lcd_line1();			// set cursor to Line1 Column 1, (only for OLED-Display)
     1e0:	80 e8       	ldi	r24, 0x80	; 128
     1e2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
}
     1e6:	08 95       	ret

000001e8 <lcd_init>:
 
// Initialise: 
// Must be called first .
 
void lcd_init(void) {
   wait_about30ms();
     1e8:	86 e0       	ldi	r24, 0x06	; 6
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>
   // to initialise, send 3 times to be shure to be in 8 Bit mode
   lcd_write_init(1);
     1f0:	80 e8       	ldi	r24, 0x80	; 128
     1f2:	60 e3       	ldi	r22, 0x30	; 48
     1f4:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_lcd_hw_write>
   wait_about5ms();
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>
   
   lcd_write_init(1);
     200:	80 e8       	ldi	r24, 0x80	; 128
     202:	60 e3       	ldi	r22, 0x30	; 48
     204:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_lcd_hw_write>
   wait1ms();
     208:	0e 94 dd 13 	call	0x27ba	; 0x27ba <wait1ms>

   lcd_write_init(1);
     20c:	80 e8       	ldi	r24, 0x80	; 128
     20e:	60 e3       	ldi	r22, 0x30	; 48
     210:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_lcd_hw_write>
   wait1ms();
     214:	0e 94 dd 13 	call	0x27ba	; 0x27ba <wait1ms>

   lcd_write_init(0);		// switch to 4 Bit mode
     218:	80 e8       	ldi	r24, 0x80	; 128
     21a:	60 e2       	ldi	r22, 0x20	; 32
     21c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_lcd_hw_write>
   wait_about10ms();
     220:	82 e0       	ldi	r24, 0x02	; 2
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>

   // 4Bit / 2 rows / 5x7
   lcd_command(CMD_SetIFOptions | 0x08);
     228:	88 e2       	ldi	r24, 0x28	; 40
     22a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>

   // Display on / Cursor off / no Blinking
   lcd_command(CMD_SetDisplayAndCursor | 0x04);
     22e:	8c e0       	ldi	r24, 0x0C	; 12
     230:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>

   // increment / no Scroll    
   lcd_command(CMD_SetEntryMode | 0x02);	
     234:	86 e0       	ldi	r24, 0x06	; 6
     236:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
   lcd_clear();
     23a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_clear>
}
     23e:	08 95       	ret

00000240 <lcd_string>:
#endif
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
     240:	ef 92       	push	r14
     242:	ff 92       	push	r15
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	e8 2e       	mov	r14, r24
     24a:	e7 01       	movw	r28, r14
     24c:	7e 01       	movw	r14, r28
     24e:	f9 2e       	mov	r15, r25
     250:	e7 01       	movw	r28, r14
    while(*data) {
     252:	02 c0       	rjmp	.+4      	; 0x258 <lcd_string+0x18>
        lcd_data(*data);
     254:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
    while(*data) {
     258:	89 91       	ld	r24, Y+
     25a:	88 23       	and	r24, r24
     25c:	d9 f7       	brne	.-10     	; 0x254 <lcd_string+0x14>
        lcd_data(*data);
        data++;
    }
}
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	ff 90       	pop	r15
     264:	ef 90       	pop	r14
     266:	08 95       	ret

00000268 <lcd_pgm_string>:

#ifdef use_lcd_pgm
//Load string from PGM  and send to LCD 
void lcd_pgm_string(const unsigned char *data) {
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = pgm_read_byte(data);
     26e:	fe 01       	movw	r30, r28
     270:	84 91       	lpm	r24, Z+
      if((cc==0) || (cc==128)) {
     272:	88 23       	and	r24, r24
     274:	31 f0       	breq	.+12     	; 0x282 <lcd_pgm_string+0x1a>
     276:	80 38       	cpi	r24, 0x80	; 128
     278:	21 f0       	breq	.+8      	; 0x282 <lcd_pgm_string+0x1a>
         return;
      }
      lcd_data(cc);
     27a:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
      data++;
     27e:	21 96       	adiw	r28, 0x01	; 1
   }
     280:	f6 cf       	rjmp	.-20     	; 0x26e <lcd_pgm_string+0x6>
}
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	08 95       	ret

00000288 <lcd_fix_string>:
#endif

//Load string from PGM or EEprom and send to LCD 
void lcd_fix_string(const unsigned char *data) {
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = MEM_read_byte(data);
     28e:	ce 01       	movw	r24, r28
     290:	0e 94 57 1f 	call	0x3eae	; 0x3eae <__eerd_byte_m168>
      if((cc==0) || (cc==128)) {
     294:	88 23       	and	r24, r24
     296:	31 f0       	breq	.+12     	; 0x2a4 <lcd_fix_string+0x1c>
     298:	80 38       	cpi	r24, 0x80	; 128
     29a:	21 f0       	breq	.+8      	; 0x2a4 <lcd_fix_string+0x1c>
         return;
      }
      lcd_data(cc);
     29c:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
      data++;
     2a0:	21 96       	adiw	r28, 0x01	; 1
   }
     2a2:	f5 cf       	rjmp	.-22     	; 0x28e <lcd_fix_string+0x6>
}
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	08 95       	ret

000002aa <lcd_fix_customchar>:

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	8c 01       	movw	r16, r24
     2b4:	c0 e0       	ldi	r28, 0x00	; 0
     2b6:	d0 e0       	ldi	r29, 0x00	; 0
    for(uint8_t i=0;i<8;i++) {
        lcd_data(MEM_read_byte(chardata));
     2b8:	c8 01       	movw	r24, r16
     2ba:	8c 0f       	add	r24, r28
     2bc:	9d 1f       	adc	r25, r29
     2be:	0e 94 57 1f 	call	0x3eae	; 0x3eae <__eerd_byte_m168>
     2c2:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
     2c6:	21 96       	adiw	r28, 0x01	; 1
   }
}

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
    for(uint8_t i=0;i<8;i++) {
     2c8:	c8 30       	cpi	r28, 0x08	; 8
     2ca:	d1 05       	cpc	r29, r1
     2cc:	a9 f7       	brne	.-22     	; 0x2b8 <lcd_fix_customchar+0xe>
        lcd_data(MEM_read_byte(chardata));
        chardata++;
    }
}
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	1f 91       	pop	r17
     2d4:	0f 91       	pop	r16
     2d6:	08 95       	ret

000002d8 <_lcd_hw_write>:
     2d8:	5d 9a       	sbi	0x0b, 5	; 11
     2da:	55 9a       	sbi	0x0a, 5	; 10
     2dc:	5c 98       	cbi	0x0b, 4	; 11
     2de:	54 9a       	sbi	0x0a, 4	; 10
     2e0:	80 fd       	sbrc	r24, 0
     2e2:	5c 9a       	sbi	0x0b, 4	; 11
     2e4:	58 98       	cbi	0x0b, 0	; 11
     2e6:	59 98       	cbi	0x0b, 1	; 11
     2e8:	5a 98       	cbi	0x0b, 2	; 11
     2ea:	5b 98       	cbi	0x0b, 3	; 11
     2ec:	64 fd       	sbrc	r22, 4
     2ee:	58 9a       	sbi	0x0b, 0	; 11
     2f0:	50 9a       	sbi	0x0a, 0	; 10
     2f2:	65 fd       	sbrc	r22, 5
     2f4:	59 9a       	sbi	0x0b, 1	; 11
     2f6:	51 9a       	sbi	0x0a, 1	; 10
     2f8:	66 fd       	sbrc	r22, 6
     2fa:	5a 9a       	sbi	0x0b, 2	; 11
     2fc:	52 9a       	sbi	0x0a, 2	; 10
     2fe:	67 fd       	sbrc	r22, 7
     300:	5b 9a       	sbi	0x0b, 3	; 11
     302:	53 9a       	sbi	0x0a, 3	; 10
     304:	00 00       	nop
     306:	5d 98       	cbi	0x0b, 5	; 11
     308:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <wait1us>
     30c:	87 fd       	sbrc	r24, 7
     30e:	11 c0       	rjmp	.+34     	; 0x332 <_lcd_hw_write_exit>
     310:	5d 9a       	sbi	0x0b, 5	; 11
     312:	58 98       	cbi	0x0b, 0	; 11
     314:	59 98       	cbi	0x0b, 1	; 11
     316:	5a 98       	cbi	0x0b, 2	; 11
     318:	5b 98       	cbi	0x0b, 3	; 11
     31a:	60 fd       	sbrc	r22, 0
     31c:	58 9a       	sbi	0x0b, 0	; 11
     31e:	61 fd       	sbrc	r22, 1
     320:	59 9a       	sbi	0x0b, 1	; 11
     322:	62 fd       	sbrc	r22, 2
     324:	5a 9a       	sbi	0x0b, 2	; 11
     326:	63 fd       	sbrc	r22, 3
     328:	5b 9a       	sbi	0x0b, 3	; 11
     32a:	00 00       	nop
     32c:	5d 98       	cbi	0x0b, 5	; 11
     32e:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <wait1us>

00000332 <_lcd_hw_write_exit>:
     332:	08 95       	ret

00000334 <__vector_7>:
#define MAIN_C
#include "Transistortester.h"

#ifndef INHIBIT_SLEEP_MODE
  // prepare sleep mode
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
     334:	18 95       	reti

00000336 <__vector_21>:
  EMPTY_INTERRUPT(ADC_vect);
     336:	18 95       	reti

00000338 <EntladePins>:
   R_DDR &= ~PinToCharge;	// switch back to input
   R_PORT &= ~PinToCharge;	// no Pull up
}

// first discharge any charge of capacitors
void EntladePins() {
     338:	af 92       	push	r10
     33a:	bf 92       	push	r11
     33c:	cf 92       	push	r12
     33e:	df 92       	push	r13
     340:	ef 92       	push	r14
     342:	ff 92       	push	r15
     344:	0f 93       	push	r16
     346:	1f 93       	push	r17
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	3a e0       	ldi	r19, 0x0A	; 10
     34e:	c3 2e       	mov	r12, r19
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     350:	28 e0       	ldi	r18, 0x08	; 8
     352:	d2 2e       	mov	r13, r18
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     R_PORT = 0;			// R-outputs auf 0
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     354:	9a e2       	ldi	r25, 0x2A	; 42
     356:	a9 2e       	mov	r10, r25
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     358:	85 e1       	ldi	r24, 0x15	; 21
     35a:	b8 2e       	mov	r11, r24
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     35c:	d7 b8       	out	0x07, r13	; 7
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     35e:	d8 b8       	out	0x08, r13	; 8
     R_PORT = 0;			// R-outputs auf 0
     360:	15 b8       	out	0x05, r1	; 5
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     362:	a4 b8       	out	0x04, r10	; 4
     adcmv[0] = W5msReadADC(PC0);	// which voltage has Pin 1?
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
     36a:	8c 01       	movw	r16, r24
     adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
     372:	ec 01       	movw	r28, r24
     adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     374:	82 e0       	ldi	r24, 0x02	; 2
     376:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
     if ((PartFound == PART_CELL) || (adcmv[0] < CAP_EMPTY_LEVEL) & (adcmv[1] < CAP_EMPTY_LEVEL) & (adcmv[2] < CAP_EMPTY_LEVEL)) {
     37a:	20 91 07 01 	lds	r18, 0x0107
     37e:	28 30       	cpi	r18, 0x08	; 8
     380:	c1 f0       	breq	.+48     	; 0x3b2 <EntladePins+0x7a>
     382:	41 e0       	ldi	r20, 0x01	; 1
     384:	c4 30       	cpi	r28, 0x04	; 4
     386:	d1 05       	cpc	r29, r1
     388:	08 f0       	brcs	.+2      	; 0x38c <EntladePins+0x54>
     38a:	40 e0       	ldi	r20, 0x00	; 0
     38c:	21 e0       	ldi	r18, 0x01	; 1
     38e:	04 30       	cpi	r16, 0x04	; 4
     390:	11 05       	cpc	r17, r1
     392:	08 f0       	brcs	.+2      	; 0x396 <EntladePins+0x5e>
     394:	20 e0       	ldi	r18, 0x00	; 0
     396:	42 23       	and	r20, r18
     398:	50 e0       	ldi	r21, 0x00	; 0
     39a:	21 e0       	ldi	r18, 0x01	; 1
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	84 30       	cpi	r24, 0x04	; 4
     3a0:	91 05       	cpc	r25, r1
     3a2:	10 f0       	brcs	.+4      	; 0x3a8 <EntladePins+0x70>
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	24 23       	and	r18, r20
     3aa:	35 23       	and	r19, r21
     3ac:	21 15       	cp	r18, r1
     3ae:	31 05       	cpc	r19, r1
     3b0:	21 f0       	breq	.+8      	; 0x3ba <EntladePins+0x82>
        ADC_DDR = TXD_MSK;		// switch all ADC-Pins to input
     3b2:	88 e0       	ldi	r24, 0x08	; 8
     3b4:	87 b9       	out	0x07, r24	; 7
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
     3b6:	14 b8       	out	0x04, r1	; 4
        return;			// all is discharged
     3b8:	4f c0       	rjmp	.+158    	; 0x458 <EntladePins+0x120>
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
     3ba:	23 e0       	ldi	r18, 0x03	; 3
     3bc:	08 3e       	cpi	r16, 0xE8	; 232
     3be:	12 07       	cpc	r17, r18
     3c0:	10 f0       	brcs	.+4      	; 0x3c6 <EntladePins+0x8e>
  uint8_t lop_cnt;		// loop counter
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     3c2:	28 e0       	ldi	r18, 0x08	; 8
     3c4:	01 c0       	rjmp	.+2      	; 0x3c8 <EntladePins+0x90>
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
        return;			// all is discharged
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
        adc_gnd |= (1<<PC0);	//Pin 1 directly to GND
     3c6:	29 e0       	ldi	r18, 0x09	; 9
     }
     if (adcmv[1] < 1000) {
     3c8:	33 e0       	ldi	r19, 0x03	; 3
     3ca:	c8 3e       	cpi	r28, 0xE8	; 232
     3cc:	d3 07       	cpc	r29, r19
     3ce:	08 f4       	brcc	.+2      	; 0x3d2 <EntladePins+0x9a>
        adc_gnd |= (1<<PC1);	//Pin 2 directly to GND
     3d0:	22 60       	ori	r18, 0x02	; 2
     }
     if (adcmv[2] < 1000) {
     3d2:	33 e0       	ldi	r19, 0x03	; 3
     3d4:	88 3e       	cpi	r24, 0xE8	; 232
     3d6:	93 07       	cpc	r25, r19
     3d8:	08 f4       	brcc	.+2      	; 0x3dc <EntladePins+0xa4>
        adc_gnd |= (1<<PC2);	//Pin 3 directly to  GND
     3da:	24 60       	ori	r18, 0x04	; 4
     }
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time
     3dc:	27 b9       	out	0x07, r18	; 7

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     3de:	b4 b8       	out	0x04, r11	; 4
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     3e0:	c0 e0       	ldi	r28, 0x00	; 0
     3e2:	d0 e0       	ldi	r29, 0x00	; 0
        wdt_reset();
     3e4:	a8 95       	wdr
        adcmv[0] = W20msReadADC(PC0);	// which voltage has Pin 1?
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	0e 94 a8 1a 	call	0x3550	; 0x3550 <W20msReadADC>
     3ec:	7c 01       	movw	r14, r24
        adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
     3f4:	8c 01       	movw	r16, r24
        adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     3f6:	82 e0       	ldi	r24, 0x02	; 2
     3f8:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
        if (adcmv[0] < 1300) {
     3fc:	24 e1       	ldi	r18, 0x14	; 20
     3fe:	e2 16       	cp	r14, r18
     400:	25 e0       	ldi	r18, 0x05	; 5
     402:	f2 06       	cpc	r15, r18
     404:	08 f4       	brcc	.+2      	; 0x408 <EntladePins+0xd0>
           ADC_DDR |= (1<<PC0);	// below 1.3V , switch directly with ADC-Port to GND
     406:	38 9a       	sbi	0x07, 0	; 7
        }
        if (adcmv[1] < 1300) {
     408:	35 e0       	ldi	r19, 0x05	; 5
     40a:	04 31       	cpi	r16, 0x14	; 20
     40c:	13 07       	cpc	r17, r19
     40e:	08 f4       	brcc	.+2      	; 0x412 <EntladePins+0xda>
           ADC_DDR |= (1<<PC1);	// below 1.3V, switch directly with ADC-Port to GND
     410:	39 9a       	sbi	0x07, 1	; 7
        }
        if (adcmv[2] < 1300) {
     412:	25 e0       	ldi	r18, 0x05	; 5
     414:	84 31       	cpi	r24, 0x14	; 20
     416:	92 07       	cpc	r25, r18
     418:	08 f4       	brcc	.+2      	; 0x41c <EntladePins+0xe4>
           ADC_DDR |= (1<<PC2);	// below 1.3V, switch directly with ADC-Port to GND
     41a:	3a 9a       	sbi	0x07, 2	; 7
        }
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
     41c:	36 e0       	ldi	r19, 0x06	; 6
     41e:	e3 16       	cp	r14, r19
     420:	f1 04       	cpc	r15, r1
     422:	30 f4       	brcc	.+12     	; 0x430 <EntladePins+0xf8>
     424:	06 30       	cpi	r16, 0x06	; 6
     426:	11 05       	cpc	r17, r1
     428:	18 f4       	brcc	.+6      	; 0x430 <EntladePins+0xf8>
     42a:	86 30       	cpi	r24, 0x06	; 6
     42c:	91 05       	cpc	r25, r1
     42e:	38 f0       	brcs	.+14     	; 0x43e <EntladePins+0x106>

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     430:	21 96       	adiw	r28, 0x01	; 1
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	c4 3f       	cpi	r28, 0xF4	; 244
     436:	d8 07       	cpc	r29, r24
     438:	a9 f6       	brne	.-86     	; 0x3e4 <EntladePins+0xac>
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
           break;
        }
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
     43a:	d0 92 07 01 	sts	0x0107, r13

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     43e:	00 e0       	ldi	r16, 0x00	; 0
     440:	10 e0       	ldi	r17, 0x00	; 0
     442:	04 c0       	rjmp	.+8      	; 0x44c <EntladePins+0x114>
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     444:	0e 94 dd 13 	call	0x27ba	; 0x27ba <wait1ms>
     448:	0f 5f       	subi	r16, 0xFF	; 255
     44a:	1f 4f       	sbci	r17, 0xFF	; 255
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
     44c:	0c 17       	cp	r16, r28
     44e:	1d 07       	cpc	r17, r29
     450:	c8 f3       	brcs	.-14     	; 0x444 <EntladePins+0x10c>
     452:	ca 94       	dec	r12
  unsigned int clr_cnt;		// Clear Counter
  uint8_t lop_cnt;		// loop counter
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     454:	09 f0       	breq	.+2      	; 0x458 <EntladePins+0x120>
     456:	82 cf       	rjmp	.-252    	; 0x35c <EntladePins+0x24>
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     }
  } // end for lop_cnt
 }
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	1f 91       	pop	r17
     45e:	0f 91       	pop	r16
     460:	ff 90       	pop	r15
     462:	ef 90       	pop	r14
     464:	df 90       	pop	r13
     466:	cf 90       	pop	r12
     468:	bf 90       	pop	r11
     46a:	af 90       	pop	r10
     46c:	08 95       	ret

0000046e <RefVoltage>:
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;

  #ifdef AUTO_CAL
  referenz = ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset));
     46e:	8d ee       	ldi	r24, 0xED	; 237
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <__eerd_word_m168>
     476:	20 91 44 01 	lds	r18, 0x0144
     47a:	30 91 45 01 	lds	r19, 0x0145
     47e:	28 0f       	add	r18, r24
     480:	39 1f       	adc	r19, r25
  #else
  referenz = ref_mv + REF_C_KORR;
  #endif
  if (referenz >= Ref_Tab_Beginn) {
     482:	83 e0       	ldi	r24, 0x03	; 3
     484:	28 3e       	cpi	r18, 0xE8	; 232
     486:	38 07       	cpc	r19, r24
     488:	20 f0       	brcs	.+8      	; 0x492 <RefVoltage+0x24>
     referenz -= Ref_Tab_Beginn;
     48a:	c9 01       	movw	r24, r18
     48c:	88 5e       	subi	r24, 0xE8	; 232
     48e:	93 40       	sbci	r25, 0x03	; 3
     490:	02 c0       	rjmp	.+4      	; 0x496 <RefVoltage+0x28>
  } else  {
     referenz = 0;		// limit to begin of table
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = referenz / Ref_Tab_Abstand;
     496:	62 e3       	ldi	r22, 0x32	; 50
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__udivmodhi4>
  tabres = Ref_Tab_Abstand-tabres;
  if (tabind > 7) {
     tabind = 7;		// limit to end of table
  }
  // interpolate the table of factors
  y1 = pgm_read_word(&RHtab[tabind]);
     49e:	68 30       	cpi	r22, 0x08	; 8
     4a0:	08 f0       	brcs	.+2      	; 0x4a4 <RefVoltage+0x36>
     4a2:	67 e0       	ldi	r22, 0x07	; 7
     4a4:	70 e0       	ldi	r23, 0x00	; 0
     4a6:	fb 01       	movw	r30, r22
     4a8:	ee 0f       	add	r30, r30
     4aa:	ff 1f       	adc	r31, r31
     4ac:	ea 53       	subi	r30, 0x3A	; 58
     4ae:	ff 4f       	sbci	r31, 0xFF	; 255
     4b0:	45 91       	lpm	r20, Z+
     4b2:	54 91       	lpm	r21, Z+
  y2 = pgm_read_word(&RHtab[tabind+1]);
     4b4:	fb 01       	movw	r30, r22
     4b6:	ee 0f       	add	r30, r30
     4b8:	ff 1f       	adc	r31, r31
     4ba:	e8 53       	subi	r30, 0x38	; 56
     4bc:	ff 4f       	sbci	r31, 0xFF	; 255
     4be:	25 91       	lpm	r18, Z+
     4c0:	34 91       	lpm	r19, Z+
  } else  {
     referenz = 0;		// limit to begin of table
  }
  tabind = referenz / Ref_Tab_Abstand;
  tabres = referenz % Ref_Tab_Abstand;
  tabres = Ref_Tab_Abstand-tabres;
     4c2:	62 e3       	ldi	r22, 0x32	; 50
     4c4:	68 1b       	sub	r22, r24
  }
  // interpolate the table of factors
  y1 = pgm_read_word(&RHtab[tabind]);
  y2 = pgm_read_word(&RHtab[tabind+1]);
  // RHmultip is the interpolated factor to compute capacity from load time with 470k
  RHmultip = ((y1 - y2) * tabres + (Ref_Tab_Abstand/2)) / Ref_Tab_Abstand + y2;
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	42 1b       	sub	r20, r18
     4ca:	53 0b       	sbc	r21, r19
     4cc:	64 9f       	mul	r22, r20
     4ce:	c0 01       	movw	r24, r0
     4d0:	65 9f       	mul	r22, r21
     4d2:	90 0d       	add	r25, r0
     4d4:	74 9f       	mul	r23, r20
     4d6:	90 0d       	add	r25, r0
     4d8:	11 24       	eor	r1, r1
     4da:	49 96       	adiw	r24, 0x19	; 25
     4dc:	62 e3       	ldi	r22, 0x32	; 50
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__udivmodhi4>
     4e4:	62 0f       	add	r22, r18
     4e6:	73 1f       	adc	r23, r19
     4e8:	70 93 01 01 	sts	0x0101, r23
     4ec:	60 93 00 01 	sts	0x0100, r22
 }
     4f0:	08 95       	ret

000004f2 <lcd_clear_line>:
#endif

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
     4f2:	1f 93       	push	r17
     4f4:	14 e1       	ldi	r17, 0x14	; 20
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    lcd_space();
     4f6:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_space>
     4fa:	11 50       	subi	r17, 0x01	; 1

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
     4fc:	e1 f7       	brne	.-8      	; 0x4f6 <lcd_clear_line+0x4>
    lcd_space();
 }
}
     4fe:	1f 91       	pop	r17
     500:	08 95       	ret

00000502 <DisplayValue>:
 *    e.g: p = 10^-12 -> -12
 *  - unit character (0 = none)
 *  digits = 2, 3 or 4
 */
void DisplayValue(unsigned long Value, int8_t Exponent, unsigned char Unit, unsigned char digits)
{
     502:	2f 92       	push	r2
     504:	3f 92       	push	r3
     506:	4f 92       	push	r4
     508:	5f 92       	push	r5
     50a:	7f 92       	push	r7
     50c:	8f 92       	push	r8
     50e:	9f 92       	push	r9
     510:	af 92       	push	r10
     512:	bf 92       	push	r11
     514:	cf 92       	push	r12
     516:	df 92       	push	r13
     518:	ef 92       	push	r14
     51a:	ff 92       	push	r15
     51c:	0f 93       	push	r16
     51e:	1f 93       	push	r17
     520:	df 93       	push	r29
     522:	cf 93       	push	r28
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62
     528:	2f 97       	sbiw	r28, 0x0f	; 15
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	f8 94       	cli
     52e:	de bf       	out	0x3e, r29	; 62
     530:	0f be       	out	0x3f, r0	; 63
     532:	cd bf       	out	0x3d, r28	; 61
     534:	6b 01       	movw	r12, r22
     536:	7c 01       	movw	r14, r24
     538:	14 2f       	mov	r17, r20
     53a:	72 2e       	mov	r7, r18
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
     53c:	03 30       	cpi	r16, 0x03	; 3
     53e:	29 f0       	breq	.+10     	; 0x54a <DisplayValue+0x48>
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
     540:	04 30       	cpi	r16, 0x04	; 4
     542:	31 f0       	breq	.+12     	; 0x550 <DisplayValue+0x4e>
  uint8_t           Offset;		/* exponent of offset to next 10^3 step */
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
     544:	84 e6       	ldi	r24, 0x64	; 100
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	14 c0       	rjmp	.+40     	; 0x572 <DisplayValue+0x70>
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
     54a:	88 ee       	ldi	r24, 0xE8	; 232
     54c:	93 e0       	ldi	r25, 0x03	; 3
     54e:	11 c0       	rjmp	.+34     	; 0x572 <DisplayValue+0x70>
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
     550:	80 e1       	ldi	r24, 0x10	; 16
     552:	97 e2       	ldi	r25, 0x27	; 39
     554:	0e c0       	rjmp	.+28     	; 0x572 <DisplayValue+0x70>
  while (Value >= Limit)
  {
    Value += 5;				/* for automatic rounding */
     556:	c7 01       	movw	r24, r14
     558:	b6 01       	movw	r22, r12
     55a:	6b 5f       	subi	r22, 0xFB	; 251
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	8f 4f       	sbci	r24, 0xFF	; 255
     560:	9f 4f       	sbci	r25, 0xFF	; 255
    Value = Value / 10;			/* scale down by 10^1 */
     562:	a5 01       	movw	r20, r10
     564:	94 01       	movw	r18, r8
     566:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
     56a:	69 01       	movw	r12, r18
     56c:	7a 01       	movw	r14, r20
    Exponent++;				/* increase exponent by 1 */
     56e:	1f 5f       	subi	r17, 0xFF	; 255
     570:	08 c0       	rjmp	.+16     	; 0x582 <DisplayValue+0x80>


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
  while (Value >= Limit)
     572:	1c 01       	movw	r2, r24
     574:	44 24       	eor	r4, r4
     576:	55 24       	eor	r5, r5
  {
    Value += 5;				/* for automatic rounding */
    Value = Value / 10;			/* scale down by 10^1 */
     578:	ba e0       	ldi	r27, 0x0A	; 10
     57a:	8b 2e       	mov	r8, r27
     57c:	91 2c       	mov	r9, r1
     57e:	a1 2c       	mov	r10, r1
     580:	b1 2c       	mov	r11, r1


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
  while (Value >= Limit)
     582:	c2 14       	cp	r12, r2
     584:	d3 04       	cpc	r13, r3
     586:	e4 04       	cpc	r14, r4
     588:	f5 04       	cpc	r15, r5
     58a:	28 f7       	brcc	.-54     	; 0x556 <DisplayValue+0x54>


  /*
   *  determine prefix
   */
  Length = Exponent + 12;
     58c:	81 2f       	mov	r24, r17
     58e:	84 5f       	subi	r24, 0xF4	; 244
     590:	83 31       	cpi	r24, 0x13	; 19
     592:	08 f0       	brcs	.+2      	; 0x596 <DisplayValue+0x94>
     594:	82 e1       	ldi	r24, 0x12	; 18
  if (Length <  0) Length = 0;		/* Limit to minimum prefix */
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
  Index = Length / 3;
     596:	23 e0       	ldi	r18, 0x03	; 3
  Offset = Length % 3;
     598:	62 2f       	mov	r22, r18
     59a:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <__udivmodqi4>
     59e:	19 2f       	mov	r17, r25
    if (Offset > 0)
     5a0:	99 23       	and	r25, r25
     5a2:	19 f0       	breq	.+6      	; 0x5aa <DisplayValue+0xa8>
    {
      Index++;				/* adjust index for exponent offset, take next prefix */
     5a4:	8f 5f       	subi	r24, 0xFF	; 255
      Offset = 3 - Offset;		/* reverse value (1 or 2) */
     5a6:	29 1b       	sub	r18, r25
     5a8:	12 2f       	mov	r17, r18
    }
  Prefix = MEM_read_byte((uint8_t *)(&PrefixTab[Index]));   /* look up prefix in table */
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	8a 51       	subi	r24, 0x1A	; 26
     5ae:	9e 4f       	sbci	r25, 0xFE	; 254
     5b0:	0e 94 57 1f 	call	0x3eae	; 0x3eae <__eerd_byte_m168>
     5b4:	b8 2e       	mov	r11, r24
  /*
   *  display value
   */

  /* convert value into string */
  utoa((unsigned int)Value, OutBuffer, 10);
     5b6:	c6 01       	movw	r24, r12
     5b8:	6e 01       	movw	r12, r28
     5ba:	08 94       	sec
     5bc:	c1 1c       	adc	r12, r1
     5be:	d1 1c       	adc	r13, r1
     5c0:	b6 01       	movw	r22, r12
     5c2:	4a e0       	ldi	r20, 0x0A	; 10
     5c4:	50 e0       	ldi	r21, 0x00	; 0
     5c6:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <utoa>
  Length = strlen(OutBuffer);
     5ca:	f6 01       	movw	r30, r12
     5cc:	01 90       	ld	r0, Z+
     5ce:	00 20       	and	r0, r0
     5d0:	e9 f7       	brne	.-6      	; 0x5cc <DisplayValue+0xca>
     5d2:	31 97       	sbiw	r30, 0x01	; 1
     5d4:	2e 2e       	mov	r2, r30
     5d6:	2c 18       	sub	r2, r12

  /* position of dot */
  Exponent = Length - Offset;		/* calculate position */
     5d8:	82 2c       	mov	r8, r2
     5da:	81 1a       	sub	r8, r17

  if (Exponent <= 0)			/* we have to prepend "0." */
     5dc:	18 14       	cp	r1, r8
     5de:	44 f0       	brlt	.+16     	; 0x5f0 <DisplayValue+0xee>
  {
    /* 0: factor 10 / -1: factor 100 */
//    lcd_data('0');
    lcd_data('.');
     5e0:	8e e2       	ldi	r24, 0x2E	; 46
     5e2:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
    if (Exponent < 0) lcd_data('0');	/* extra 0 for factor 100 */
     5e6:	88 20       	and	r8, r8
     5e8:	19 f0       	breq	.+6      	; 0x5f0 <DisplayValue+0xee>
     5ea:	80 e3       	ldi	r24, 0x30	; 48
     5ec:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
  }

  if (Offset == 0) Exponent = -1;	/* disable dot if not needed */
     5f0:	11 23       	and	r17, r17
     5f2:	11 f4       	brne	.+4      	; 0x5f8 <DisplayValue+0xf6>
     5f4:	88 24       	eor	r8, r8
     5f6:	8a 94       	dec	r8
     5f8:	6e 01       	movw	r12, r28
     5fa:	08 94       	sec
     5fc:	c1 1c       	adc	r12, r1
     5fe:	d1 1c       	adc	r13, r1
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     600:	00 e0       	ldi	r16, 0x00	; 0
     602:	10 e0       	ldi	r17, 0x00	; 0
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    Index++;				/* next one */
    if (Index == Exponent) {
     604:	99 24       	eor	r9, r9
     606:	87 fc       	sbrc	r8, 7
     608:	90 94       	com	r9
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     60a:	0d c0       	rjmp	.+26     	; 0x626 <DisplayValue+0x124>
  {
    lcd_data(OutBuffer[Index]);		/* display char */
     60c:	0f 5f       	subi	r16, 0xFF	; 255
     60e:	1f 4f       	sbci	r17, 0xFF	; 255
     610:	f6 01       	movw	r30, r12
     612:	81 91       	ld	r24, Z+
     614:	6f 01       	movw	r12, r30
     616:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
    Index++;				/* next one */
    if (Index == Exponent) {
     61a:	08 15       	cp	r16, r8
     61c:	19 05       	cpc	r17, r9
     61e:	19 f4       	brne	.+6      	; 0x626 <DisplayValue+0x124>
      lcd_data('.');			/* display dot */
     620:	8e e2       	ldi	r24, 0x2E	; 46
     622:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     626:	02 15       	cp	r16, r2
     628:	88 f3       	brcs	.-30     	; 0x60c <DisplayValue+0x10a>
      lcd_data('.');			/* display dot */
    }
  }

  /* display prefix and unit */
  if (Prefix != 0) lcd_data(Prefix);
     62a:	bb 20       	and	r11, r11
     62c:	19 f0       	breq	.+6      	; 0x634 <DisplayValue+0x132>
     62e:	8b 2d       	mov	r24, r11
     630:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
  if (Unit) lcd_data(Unit);
     634:	77 20       	and	r7, r7
     636:	19 f0       	breq	.+6      	; 0x63e <DisplayValue+0x13c>
     638:	87 2d       	mov	r24, r7
     63a:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
}
     63e:	2f 96       	adiw	r28, 0x0f	; 15
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	f8 94       	cli
     644:	de bf       	out	0x3e, r29	; 62
     646:	0f be       	out	0x3f, r0	; 63
     648:	cd bf       	out	0x3d, r28	; 61
     64a:	cf 91       	pop	r28
     64c:	df 91       	pop	r29
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	ff 90       	pop	r15
     654:	ef 90       	pop	r14
     656:	df 90       	pop	r13
     658:	cf 90       	pop	r12
     65a:	bf 90       	pop	r11
     65c:	af 90       	pop	r10
     65e:	9f 90       	pop	r9
     660:	8f 90       	pop	r8
     662:	7f 90       	pop	r7
     664:	5f 90       	pop	r5
     666:	4f 90       	pop	r4
     668:	3f 90       	pop	r3
     66a:	2f 90       	pop	r2
     66c:	08 95       	ret

0000066e <RvalOut>:
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
      lcd_space();
   }
}

void RvalOut(uint8_t ii) {	
     66e:	0f 93       	push	r16
   // output of resistor value

   DisplayValue(resis[ii].rx,-1,LCD_CHAR_OMEGA,4);
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	fc 01       	movw	r30, r24
     674:	ee 0f       	add	r30, r30
     676:	ff 1f       	adc	r31, r31
     678:	e8 0f       	add	r30, r24
     67a:	f9 1f       	adc	r31, r25
     67c:	ee 0f       	add	r30, r30
     67e:	ff 1f       	adc	r31, r31
     680:	ee 0f       	add	r30, r30
     682:	ff 1f       	adc	r31, r31
     684:	e8 5e       	subi	r30, 0xE8	; 232
     686:	fe 4f       	sbci	r31, 0xFE	; 254
     688:	60 81       	ld	r22, Z
     68a:	71 81       	ldd	r23, Z+1	; 0x01
     68c:	82 81       	ldd	r24, Z+2	; 0x02
     68e:	93 81       	ldd	r25, Z+3	; 0x03
     690:	4f ef       	ldi	r20, 0xFF	; 255
     692:	24 ef       	ldi	r18, 0xF4	; 244
     694:	04 e0       	ldi	r16, 0x04	; 4
     696:	0e 94 81 02 	call	0x502	; 0x502 <DisplayValue>
   lcd_space();
     69a:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_space>
 }
     69e:	0f 91       	pop	r16
     6a0:	08 95       	ret

000006a2 <mVAusgabe>:
   lcd_line2(); 				//2. row
   lcd_fix_string(Uf_str);			//"Uf="
   mVAusgabe(bcdnum >> 4);
   mVAusgabe(bcdnum & 0x0f);
}
void mVAusgabe(uint8_t nn) {
     6a2:	0f 93       	push	r16
   if (nn < 3) {
     6a4:	83 30       	cpi	r24, 0x03	; 3
     6a6:	98 f4       	brcc	.+38     	; 0x6ce <mVAusgabe+0x2c>
      // Output in mV units
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
     6a8:	e8 2f       	mov	r30, r24
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	ee 0f       	add	r30, r30
     6ae:	ff 1f       	adc	r31, r31
     6b0:	ee 0f       	add	r30, r30
     6b2:	ff 1f       	adc	r31, r31
     6b4:	e8 58       	subi	r30, 0x88	; 136
     6b6:	fe 4f       	sbci	r31, 0xFE	; 254
     6b8:	62 81       	ldd	r22, Z+2	; 0x02
     6ba:	73 81       	ldd	r23, Z+3	; 0x03
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	4d ef       	ldi	r20, 0xFD	; 253
     6c2:	26 e5       	ldi	r18, 0x56	; 86
     6c4:	03 e0       	ldi	r16, 0x03	; 3
     6c6:	0e 94 81 02 	call	0x502	; 0x502 <DisplayValue>
      lcd_space();
     6ca:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_space>
   }
}
     6ce:	0f 91       	pop	r16
     6d0:	08 95       	ret

000006d2 <UfAusgabe>:
// output of flux voltage for 1-2 diodes in row 2
// bcdnum = Numbers of both Diodes:
// higher 4 Bit  number of first Diode
// lower 4 Bit  number of second Diode (Structure diodes[nn])
// if number >= 3  no output is done
void UfAusgabe(uint8_t bcdnum) {
     6d2:	1f 93       	push	r17
     6d4:	18 2f       	mov	r17, r24

   lcd_line2(); 				//2. row
     6d6:	80 ec       	ldi	r24, 0xC0	; 192
     6d8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
   lcd_fix_string(Uf_str);			//"Uf="
     6dc:	86 e1       	ldi	r24, 0x16	; 22
     6de:	91 e0       	ldi	r25, 0x01	; 1
     6e0:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
   mVAusgabe(bcdnum >> 4);
     6e4:	81 2f       	mov	r24, r17
     6e6:	82 95       	swap	r24
     6e8:	8f 70       	andi	r24, 0x0F	; 15
     6ea:	0e 94 51 03 	call	0x6a2	; 0x6a2 <mVAusgabe>
   mVAusgabe(bcdnum & 0x0f);
     6ee:	81 2f       	mov	r24, r17
     6f0:	8f 70       	andi	r24, 0x0F	; 15
     6f2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <mVAusgabe>
}
     6f6:	1f 91       	pop	r17
     6f8:	08 95       	ret

000006fa <sleep_5ms>:
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
      pause = 0;
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     6fa:	42 e0       	ldi	r20, 0x02	; 2
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     6fc:	1c c0       	rjmp	.+56     	; 0x736 <sleep_5ms+0x3c>
  {
 #if 3000 > RESTART_DELAY_US
   if (pause > 1)
     6fe:	82 30       	cpi	r24, 0x02	; 2
     700:	91 05       	cpc	r25, r1
     702:	18 f0       	brcs	.+6      	; 0x70a <sleep_5ms+0x10>
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
      pause -= 2;
     704:	02 97       	sbiw	r24, 0x02	; 2
  {
 #if 3000 > RESTART_DELAY_US
   if (pause > 1)
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
     706:	3e e3       	ldi	r19, 0x3E	; 62
     708:	03 c0       	rjmp	.+6      	; 0x710 <sleep_5ms+0x16>
      pause -= 2;
     } else {
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
     70a:	37 e1       	ldi	r19, 0x17	; 23
      pause = 0;
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
     710:	20 91 b2 00 	lds	r18, 0x00B2
     714:	23 0f       	add	r18, r19
     716:	20 93 b3 00 	sts	0x00B3, r18
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     71a:	40 93 70 00 	sts	0x0070, r20
   set_sleep_mode(SLEEP_MODE_PWR_SAVE);
     71e:	23 b7       	in	r18, 0x33	; 51
     720:	21 7f       	andi	r18, 0xF1	; 241
     722:	26 60       	ori	r18, 0x06	; 6
     724:	23 bf       	out	0x33, r18	; 51
//   set_sleep_mode(SLEEP_MODE_IDLE);
   sleep_mode();
     726:	23 b7       	in	r18, 0x33	; 51
     728:	21 60       	ori	r18, 0x01	; 1
     72a:	23 bf       	out	0x33, r18	; 51
     72c:	88 95       	sleep
     72e:	23 b7       	in	r18, 0x33	; 51
     730:	2e 7f       	andi	r18, 0xFE	; 254
     732:	23 bf       	out	0x33, r18	; 51
// wake up after output compare match interrupt
 #else
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
 #endif
   wdt_reset();
     734:	a8 95       	wdr
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     736:	00 97       	sbiw	r24, 0x00	; 0
     738:	11 f7       	brne	.-60     	; 0x6fe <sleep_5ms+0x4>
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
 #endif
   wdt_reset();
  }
TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
     73a:	10 92 70 00 	sts	0x0070, r1
}
     73e:	08 95       	ret

00000740 <ChargePin10ms>:
 }

//******************************************************************
#include "CheckPins.c"

void ChargePin10ms(uint8_t PinToCharge, uint8_t ChargeDirection) {
     740:	1f 93       	push	r17
     742:	18 2f       	mov	r17, r24
   //Will be used by discharge of MOSFET Gates or to load big capacities.
   //Parameters:
   //PinToCharge: specifies the pin as mask for R-Port
   //ChargeDirection: 0 = switch to GND (N-Kanal-FET), 1= switch to VCC(P-Kanal-FET)

   if(ChargeDirection&1) {
     744:	60 ff       	sbrs	r22, 0
     746:	03 c0       	rjmp	.+6      	; 0x74e <ChargePin10ms+0xe>
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
     748:	85 b1       	in	r24, 0x05	; 5
     74a:	81 2b       	or	r24, r17
     74c:	03 c0       	rjmp	.+6      	; 0x754 <ChargePin10ms+0x14>
   } else {
      R_PORT &= ~PinToCharge; // or 0 (GND)
     74e:	95 b1       	in	r25, 0x05	; 5
     750:	80 95       	com	r24
     752:	89 23       	and	r24, r25
     754:	85 b9       	out	0x05, r24	; 5
   }
   R_DDR |= PinToCharge;		//switch Pin to output, across R to GND or VCC
     756:	84 b1       	in	r24, 0x04	; 4
     758:	81 2b       	or	r24, r17
     75a:	84 b9       	out	0x04, r24	; 4
   wait_about10ms();			// wait about 10ms
     75c:	82 e0       	ldi	r24, 0x02	; 2
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>
   // switch back Input, no current
   R_DDR &= ~PinToCharge;	// switch back to input
     764:	84 b1       	in	r24, 0x04	; 4
     766:	10 95       	com	r17
     768:	81 23       	and	r24, r17
     76a:	84 b9       	out	0x04, r24	; 4
   R_PORT &= ~PinToCharge;	// no Pull up
     76c:	85 b1       	in	r24, 0x05	; 5
     76e:	81 23       	and	r24, r17
     770:	85 b9       	out	0x05, r24	; 5
}
     772:	1f 91       	pop	r17
     774:	08 95       	ret

00000776 <CheckPins>:
//******************************************************************
void CheckPins(uint8_t HighPin, uint8_t LowPin, uint8_t TristatePin)
  {
     776:	2f 92       	push	r2
     778:	3f 92       	push	r3
     77a:	4f 92       	push	r4
     77c:	5f 92       	push	r5
     77e:	6f 92       	push	r6
     780:	7f 92       	push	r7
     782:	8f 92       	push	r8
     784:	9f 92       	push	r9
     786:	af 92       	push	r10
     788:	bf 92       	push	r11
     78a:	cf 92       	push	r12
     78c:	df 92       	push	r13
     78e:	ef 92       	push	r14
     790:	ff 92       	push	r15
     792:	0f 93       	push	r16
     794:	1f 93       	push	r17
     796:	df 93       	push	r29
     798:	cf 93       	push	r28
     79a:	cd b7       	in	r28, 0x3d	; 61
     79c:	de b7       	in	r29, 0x3e	; 62
     79e:	66 97       	sbiw	r28, 0x16	; 22
     7a0:	0f b6       	in	r0, 0x3f	; 63
     7a2:	f8 94       	cli
     7a4:	de bf       	out	0x3e, r29	; 62
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	cd bf       	out	0x3d, r28	; 61
     7aa:	18 2f       	mov	r17, r24
     7ac:	36 2e       	mov	r3, r22
     7ae:	24 2e       	mov	r2, r20
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
     7b0:	a8 95       	wdr
//  #define RR680MI resis680mi
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = pgm_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
     7b2:	86 2f       	mov	r24, r22
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	fc 01       	movw	r30, r24
     7b8:	ee 51       	subi	r30, 0x1E	; 30
     7ba:	ff 4f       	sbci	r31, 0xFF	; 255
     7bc:	24 91       	lpm	r18, Z+
     7be:	2b 83       	std	Y+3, r18	; 0x03
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
  TriPinRL = pgm_read_byte(&PinRLtab[TristatePin]);	// intruction for TristatePin R_L
     7c0:	e4 2f       	mov	r30, r20
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	ee 51       	subi	r30, 0x1E	; 30
     7c6:	ff 4f       	sbci	r31, 0xFF	; 255
     7c8:	d4 90       	lpm	r13, Z+
  TriPinRH = TriPinRL + TriPinRL;			// intruction for TristatePin R_H
     7ca:	0d 2d       	mov	r16, r13
     7cc:	00 0f       	add	r16, r16
  HiPinRL = pgm_read_byte(&PinRLtab[HighPin]);		// intruction for HighPin R_L
     7ce:	21 2f       	mov	r18, r17
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	f9 01       	movw	r30, r18
     7d4:	ee 51       	subi	r30, 0x1E	; 30
     7d6:	ff 4f       	sbci	r31, 0xFF	; 255
     7d8:	c4 90       	lpm	r12, Z+
  HiPinRH = HiPinRL + HiPinRL;				// intruction for HighPin R_H
     7da:	4c 2d       	mov	r20, r12
     7dc:	44 0f       	add	r20, r20
     7de:	48 87       	std	Y+8, r20	; 0x08

  HiADCp = pgm_read_byte(&PinADCtab[HighPin]);		// intruction for ADC High-Pin 
     7e0:	2b 51       	subi	r18, 0x1B	; 27
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	f9 01       	movw	r30, r18
     7e6:	f4 91       	lpm	r31, Z+
     7e8:	f9 83       	std	Y+1, r31	; 0x01
  LoADCp = pgm_read_byte(&PinADCtab[LowPin]);		// intruction for ADC Low-Pin
     7ea:	8b 51       	subi	r24, 0x1B	; 27
     7ec:	9f 4f       	sbci	r25, 0xFF	; 255
     7ee:	fc 01       	movw	r30, r24
     7f0:	f4 91       	lpm	r31, Z+
  HiADCm = HiADCp | TXD_MSK;
     7f2:	29 81       	ldd	r18, Y+1	; 0x01
     7f4:	28 60       	ori	r18, 0x08	; 8
     7f6:	29 83       	std	Y+1, r18	; 0x01
  HiADCp |= TXD_VAL;
  LoADCm = LoADCp | TXD_MSK;
     7f8:	f8 60       	ori	r31, 0x08	; 8
     7fa:	fa 83       	std	Y+2, r31	; 0x02
  LoADCp |= TXD_VAL;

  //setting of Pins 
  R_PORT = 0;				//resistor-Port outputs to 0
     7fc:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//Low-Pin to output and across R_L to GND
     7fe:	3b 81       	ldd	r19, Y+3	; 0x03
     800:	34 b9       	out	0x04, r19	; 4
  ADC_DDR = HiADCm;		//High-Pin to output
     802:	27 b9       	out	0x07, r18	; 7
  ADC_PORT = HiADCp;		//High-Pin fix to Vcc
     804:	28 b9       	out	0x08, r18	; 8
  //for some MOSFET the gate (TristatePin) must be discharged
  ChargePin10ms(TriPinRL,0);		//discharge for N-Kanal
     806:	8d 2d       	mov	r24, r13
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	0e 94 a0 03 	call	0x740	; 0x740 <ChargePin10ms>
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin 
     80e:	83 2d       	mov	r24, r3
     810:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
     814:	9a 87       	std	Y+10, r25	; 0x0a
     816:	89 87       	std	Y+9, r24	; 0x09
  if(adc.lp_otr >= 977) {		//no current now? 
     818:	43 e0       	ldi	r20, 0x03	; 3
     81a:	81 3d       	cpi	r24, 0xD1	; 209
     81c:	94 07       	cpc	r25, r20
     81e:	48 f0       	brcs	.+18     	; 0x832 <CheckPins+0xbc>
     ChargePin10ms(TriPinRL,1);	 	//else: discharge for P-channel (Gate to VCC)
     820:	8d 2d       	mov	r24, r13
     822:	61 e0       	ldi	r22, 0x01	; 1
     824:	0e 94 a0 03 	call	0x740	; 0x740 <ChargePin10ms>
     adc.lp_otr = ReadADC(LowPin);	//read voltage of Low-Pin again
     828:	83 2d       	mov	r24, r3
     82a:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
     82e:	9a 87       	std	Y+10, r25	; 0x0a
     830:	89 87       	std	Y+9, r24	; 0x09
  lcd_line2();
  lcd_clear_line();
  lcd_line2();
#endif

  if(adc.lp_otr > 92) {  //there is some current without TristatePin current 
     832:	89 85       	ldd	r24, Y+9	; 0x09
     834:	9a 85       	ldd	r25, Y+10	; 0x0a
     836:	8d 35       	cpi	r24, 0x5D	; 93
     838:	91 05       	cpc	r25, r1
     83a:	08 f4       	brcc	.+2      	; 0x83e <CheckPins+0xc8>
     83c:	aa c0       	rjmp	.+340    	; 0x992 <CheckPins+0x21c>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test if N-JFET or if self-conducting N-MOSFET
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
     83e:	8b 81       	ldd	r24, Y+3	; 0x03
     840:	80 2b       	or	r24, r16
     842:	84 b9       	out	0x04, r24	; 4
     adc.lp1 = W20msReadADC(LowPin);	//measure voltage at the assumed Source 
     844:	83 2d       	mov	r24, r3
     846:	0e 94 a8 1a 	call	0x3550	; 0x3550 <W20msReadADC>
     84a:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     84c:	82 2d       	mov	r24, r2
     84e:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
     852:	7c 01       	movw	r14, r24
     R_PORT = TriPinRH;			//switch R_H for Tristate-Pin (probably Gate) to VCC
     854:	05 b9       	out	0x05, r16	; 5
     adc.lp2 = W20msReadADC(LowPin);	//measure voltage at the assumed Source again
     856:	83 2d       	mov	r24, r3
     858:	0e 94 a8 1a 	call	0x3550	; 0x3550 <W20msReadADC>
     //If it is a self-conducting MOSFET or JFET, then must be: adc.lp2 > adc.lp1 
     if(adc.lp2>(adc.lp1+488)) {
     85c:	95 01       	movw	r18, r10
     85e:	28 51       	subi	r18, 0x18	; 24
     860:	3e 4f       	sbci	r19, 0xFE	; 254
     862:	28 17       	cp	r18, r24
     864:	39 07       	cpc	r19, r25
     866:	08 f0       	brcs	.+2      	; 0x86a <CheckPins+0xf4>
     868:	40 c0       	rjmp	.+128    	; 0x8ea <CheckPins+0x174>
        //measure voltage at the  Gate, differ between MOSFET and JFET
        ADC_PORT = TXD_VAL;
     86a:	88 e0       	ldi	r24, 0x08	; 8
     86c:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = LoADCm;	//Low-Pin fix to GND
     86e:	9a 81       	ldd	r25, Y+2	; 0x02
     870:	97 b9       	out	0x07, r25	; 7
        R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     872:	80 2f       	mov	r24, r16
     874:	8c 29       	or	r24, r12
     876:	84 b9       	out	0x04, r24	; 4
        R_PORT = TriPinRH | HiPinRL;	//switch R_L for High-Pin to VCC
     878:	85 b9       	out	0x05, r24	; 5
        adc.lp2 = W20msReadADC(TristatePin); //read voltage of assumed Gate 
     87a:	82 2d       	mov	r24, r2
     87c:	0e 94 a8 1a 	call	0x3550	; 0x3550 <W20msReadADC>
        if(adc.lp2>3911) {  //MOSFET
     880:	af e0       	ldi	r26, 0x0F	; 15
     882:	88 34       	cpi	r24, 0x48	; 72
     884:	9a 07       	cpc	r25, r26
     886:	28 f0       	brcs	.+10     	; 0x892 <CheckPins+0x11c>
           PartFound = PART_FET;	//N-Kanal-MOSFET
     888:	83 e0       	ldi	r24, 0x03	; 3
     88a:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_N_D_MOS; //Depletion-MOSFET
     88e:	84 e0       	ldi	r24, 0x04	; 4
     890:	04 c0       	rjmp	.+8      	; 0x89a <CheckPins+0x124>
        } else {  //JFET (pn-passage between Gate and Source is conducting )
           PartFound = PART_FET;	//N-Kanal-JFET
     892:	83 e0       	ldi	r24, 0x03	; 3
     894:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_N_JFET;
     898:	86 e0       	ldi	r24, 0x06	; 6
     89a:	80 93 06 01 	sts	0x0106, r24
        }
//      if ((PartReady == 0) || (adc.lp1 > trans.uBE[0])) 
//      there is no way to find out the right Source / Drain
        trans.uBE[0] = adc.lp1;
     89e:	b0 92 58 01 	sts	0x0158, r11
     8a2:	a0 92 57 01 	sts	0x0157, r10
        gthvoltage = adc.lp1 - adc.tp1;	//voltage GS (Source - Gate)
     8a6:	c5 01       	movw	r24, r10
     8a8:	8e 19       	sub	r24, r14
     8aa:	9f 09       	sbc	r25, r15
     8ac:	90 93 60 01 	sts	0x0160, r25
     8b0:	80 93 5f 01 	sts	0x015F, r24
        trans.uBE[1] = (unsigned int)(((unsigned long)adc.lp1 * 1000) / RR680MI); // Id 0.01mA
     8b4:	b5 01       	movw	r22, r10
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	28 ee       	ldi	r18, 0xE8	; 232
     8bc:	33 e0       	ldi	r19, 0x03	; 3
     8be:	40 e0       	ldi	r20, 0x00	; 0
     8c0:	50 e0       	ldi	r21, 0x00	; 0
     8c2:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
     8c6:	20 91 02 01 	lds	r18, 0x0102
     8ca:	30 91 03 01 	lds	r19, 0x0103
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
     8d6:	30 93 5a 01 	sts	0x015A, r19
     8da:	20 93 59 01 	sts	0x0159, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     8de:	20 92 5b 01 	sts	0x015B, r2
        trans.c = HighPin;
     8e2:	10 93 5c 01 	sts	0x015C, r17
        trans.e = LowPin;
     8e6:	30 92 5d 01 	sts	0x015D, r3
     }

     ADC_PORT = TXD_VAL;		// direct outputs to GND
     8ea:	88 e0       	ldi	r24, 0x08	; 8
     8ec:	88 b9       	out	0x08, r24	; 8

     //Test, if P-JFET or if self-conducting P-MOSFET
     ADC_DDR = LoADCm;		//switch Low-Pin (assumed Drain) direct to GND,
     8ee:	ba 81       	ldd	r27, Y+2	; 0x02
     8f0:	b7 b9       	out	0x07, r27	; 7
				//R_H for Tristate-Pin (assumed Gate) is already switched to VCC
     R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     8f2:	80 2f       	mov	r24, r16
     8f4:	8c 29       	or	r24, r12
     8f6:	84 b9       	out	0x04, r24	; 4
     R_PORT = TriPinRH | HiPinRL;	//High-Pin across R_L to Vcc
     8f8:	85 b9       	out	0x05, r24	; 5
     adc.hp1 = W20msReadADC(HighPin);	//measure voltage at assumed Source 
     8fa:	81 2f       	mov	r24, r17
     8fc:	0e 94 a8 1a 	call	0x3550	; 0x3550 <W20msReadADC>
     900:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     902:	82 2d       	mov	r24, r2
     904:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
     908:	7c 01       	movw	r14, r24
     R_PORT = HiPinRL;			//switch R_H for Tristate-Pin (assumed Gate) to GND
     90a:	c5 b8       	out	0x05, r12	; 5
     adc.hp2 = W20msReadADC(HighPin);	//read voltage at assumed Source again
     90c:	81 2f       	mov	r24, r17
     90e:	0e 94 a8 1a 	call	0x3550	; 0x3550 <W20msReadADC>
     //if it is a self-conducting P_MOSFET or P-JFET , then must be:  adc.hp1 > adc.hp2 
     if(adc.hp1>(adc.hp2+488)) {
     912:	88 51       	subi	r24, 0x18	; 24
     914:	9e 4f       	sbci	r25, 0xFE	; 254
     916:	8a 15       	cp	r24, r10
     918:	9b 05       	cpc	r25, r11
     91a:	d8 f5       	brcc	.+118    	; 0x992 <CheckPins+0x21c>
        //read voltage at the Gate , to differ between MOSFET and JFET
        ADC_PORT = HiADCp;	//switch High-Pin directly to VCC
     91c:	e9 81       	ldd	r30, Y+1	; 0x01
     91e:	e8 b9       	out	0x08, r30	; 8
        ADC_DDR = HiADCm;	//switch High-Pin to output
     920:	e7 b9       	out	0x07, r30	; 7
        adc.tp2 = W20msReadADC(TristatePin); //read voltage at the assumed Gate 
     922:	82 2d       	mov	r24, r2
     924:	0e 94 a8 1a 	call	0x3550	; 0x3550 <W20msReadADC>
        if(adc.tp2<977) { 		//MOSFET
     928:	f3 e0       	ldi	r31, 0x03	; 3
     92a:	81 3d       	cpi	r24, 0xD1	; 209
     92c:	9f 07       	cpc	r25, r31
     92e:	28 f4       	brcc	.+10     	; 0x93a <CheckPins+0x1c4>
           PartFound = PART_FET;	//P-Kanal-MOSFET
     930:	83 e0       	ldi	r24, 0x03	; 3
     932:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_D_MOS; //Depletion-MOSFET
     936:	85 e0       	ldi	r24, 0x05	; 5
     938:	04 c0       	rjmp	.+8      	; 0x942 <CheckPins+0x1cc>
        } else { 			//JFET (pn-passage between Gate and Source is conducting)
           PartFound = PART_FET;	//P-Kanal-JFET
     93a:	83 e0       	ldi	r24, 0x03	; 3
     93c:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_JFET;
     940:	87 e0       	ldi	r24, 0x07	; 7
     942:	80 93 06 01 	sts	0x0106, r24
        }
        gthvoltage = adc.tp1 - adc.hp1;		//voltage GS (Gate - Source)
     946:	ea 18       	sub	r14, r10
     948:	fb 08       	sbc	r15, r11
     94a:	f0 92 60 01 	sts	0x0160, r15
     94e:	e0 92 5f 01 	sts	0x015F, r14
        trans.uBE[1] = (unsigned int)(((unsigned long)(ADCconfig.U_AVCC - adc.hp1) * 1000) / RR680PL); // Id 0.01mA
     952:	60 91 40 01 	lds	r22, 0x0140
     956:	70 91 41 01 	lds	r23, 0x0141
     95a:	6a 19       	sub	r22, r10
     95c:	7b 09       	sbc	r23, r11
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	28 ee       	ldi	r18, 0xE8	; 232
     964:	33 e0       	ldi	r19, 0x03	; 3
     966:	40 e0       	ldi	r20, 0x00	; 0
     968:	50 e0       	ldi	r21, 0x00	; 0
     96a:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
     96e:	20 91 08 01 	lds	r18, 0x0108
     972:	30 91 09 01 	lds	r19, 0x0109
     976:	40 e0       	ldi	r20, 0x00	; 0
     978:	50 e0       	ldi	r21, 0x00	; 0
     97a:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
     97e:	30 93 5a 01 	sts	0x015A, r19
     982:	20 93 59 01 	sts	0x0159, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     986:	20 92 5b 01 	sts	0x015B, r2
        trans.c = LowPin;
     98a:	30 92 5c 01 	sts	0x015C, r3
        trans.e = HighPin;
     98e:	10 93 5d 01 	sts	0x015D, r17
  } // end component has current without TristatePin signal


#ifdef COMMON_COLLECTOR
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
     992:	88 e0       	ldi	r24, 0x08	; 8
     994:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;			// Collector direct to GND
     996:	2a 81       	ldd	r18, Y+2	; 0x02
     998:	27 b9       	out	0x07, r18	; 7
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
     99a:	c5 b8       	out	0x05, r12	; 5
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
     99c:	3c 2d       	mov	r19, r12
     99e:	3d 29       	or	r19, r13
     9a0:	3b 87       	std	Y+11, r19	; 0x0b
     9a2:	34 b9       	out	0x04, r19	; 4
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     9a4:	a0 90 40 01 	lds	r10, 0x0140
     9a8:	b0 90 41 01 	lds	r11, 0x0141
     9ac:	81 2f       	mov	r24, r17
     9ae:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
     9b2:	7c 01       	movw	r14, r24
  adc.tp1 = ReadADC(TristatePin);	// voltage at the base resistor
     9b4:	82 2d       	mov	r24, r2
     9b6:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
     9ba:	4c 01       	movw	r8, r24

  if (adc.tp1 < 10) {
     9bc:	8a 30       	cpi	r24, 0x0A	; 10
     9be:	91 05       	cpc	r25, r1
     9c0:	68 f5       	brcc	.+90     	; 0xa1c <CheckPins+0x2a6>
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
     9c2:	80 2f       	mov	r24, r16
     9c4:	8c 29       	or	r24, r12
     9c6:	84 b9       	out	0x04, r24	; 4
     adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);
     9c8:	a0 90 40 01 	lds	r10, 0x0140
     9cc:	b0 90 41 01 	lds	r11, 0x0141
     9d0:	81 2f       	mov	r24, r17
     9d2:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
     9d6:	a8 1a       	sub	r10, r24
     9d8:	b9 0a       	sbc	r11, r25
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
     9da:	82 2d       	mov	r24, r2
     9dc:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
     9e0:	4c 01       	movw	r8, r24
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     9e2:	25 01       	movw	r4, r10
     9e4:	66 24       	eor	r6, r6
     9e6:	77 24       	eor	r7, r7
     9e8:	20 91 08 01 	lds	r18, 0x0108
     9ec:	30 91 09 01 	lds	r19, 0x0109
     9f0:	40 e0       	ldi	r20, 0x00	; 0
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	60 e6       	ldi	r22, 0x60	; 96
     9f6:	77 eb       	ldi	r23, 0xB7	; 183
     9f8:	87 e4       	ldi	r24, 0x47	; 71
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
     a00:	c3 01       	movw	r24, r6
     a02:	b2 01       	movw	r22, r4
     a04:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
     a08:	94 01       	movw	r18, r8
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	50 e0       	ldi	r21, 0x00	; 0
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     a0e:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
     a12:	2c 83       	std	Y+4, r18	; 0x04
     a14:	3d 83       	std	Y+5, r19	; 0x05
     a16:	4e 83       	std	Y+6, r20	; 0x06
     a18:	5f 83       	std	Y+7, r21	; 0x07
     a1a:	0f c0       	rjmp	.+30     	; 0xa3a <CheckPins+0x2c4>
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
  ADC_DDR = LoADCm;			// Collector direct to GND
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     a1c:	ae 18       	sub	r10, r14
     a1e:	bf 08       	sbc	r11, r15
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
 #else
     c_hfe = ((adc.hp1 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
  } else {
     c_hfe = (unsigned long)((adc.hp1 - adc.tp1) / adc.tp1);
     a20:	c5 01       	movw	r24, r10
     a22:	88 19       	sub	r24, r8
     a24:	99 09       	sbc	r25, r9
     a26:	b4 01       	movw	r22, r8
     a28:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__udivmodhi4>
     a2c:	cb 01       	movw	r24, r22
     a2e:	a0 e0       	ldi	r26, 0x00	; 0
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	8c 83       	std	Y+4, r24	; 0x04
     a34:	9d 83       	std	Y+5, r25	; 0x05
     a36:	ae 83       	std	Y+6, r26	; 0x06
     a38:	bf 83       	std	Y+7, r27	; 0x07
  }
#endif

  //set Pins again for circuit with common Emitter PNP
  R_DDR = LoPinRL;		//switch R_L port for Low-Pin to output (GND)
     a3a:	9b 81       	ldd	r25, Y+3	; 0x03
     a3c:	94 b9       	out	0x04, r25	; 4
  R_PORT = 0;			//switch all resistor ports to GND
     a3e:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = HiADCm;		//switch High-Pin to output
     a40:	a9 81       	ldd	r26, Y+1	; 0x01
     a42:	a7 b9       	out	0x07, r26	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
     a44:	a8 b9       	out	0x08, r26	; 8
  wait_about5ms();
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>
  
  if(adc.lp_otr < 977) {
     a4e:	e9 85       	ldd	r30, Y+9	; 0x09
     a50:	fa 85       	ldd	r31, Y+10	; 0x0a
     a52:	23 e0       	ldi	r18, 0x03	; 3
     a54:	e1 3d       	cpi	r30, 0xD1	; 209
     a56:	f2 07       	cpc	r31, r18
     a58:	08 f0       	brcs	.+2      	; 0xa5c <CheckPins+0x2e6>
     a5a:	ab c2       	rjmp	.+1366   	; 0xfb2 <CheckPins+0x83c>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test to PNP
     R_DDR = LoPinRL | TriPinRL;	//switch R_L port for Tristate-Pin to output (GND), for Test of PNP
     a5c:	3b 81       	ldd	r19, Y+3	; 0x03
     a5e:	3d 29       	or	r19, r13
     a60:	3f 87       	std	Y+15, r19	; 0x0f
     a62:	34 b9       	out	0x04, r19	; 4
     adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin
     a64:	83 2d       	mov	r24, r3
     a66:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
     if(adc.lp1 > 3422) {
     a6a:	4d e0       	ldi	r20, 0x0D	; 13
     a6c:	8f 35       	cpi	r24, 0x5F	; 95
     a6e:	94 07       	cpc	r25, r20
     a70:	08 f4       	brcc	.+2      	; 0xa74 <CheckPins+0x2fe>
     a72:	e1 c0       	rjmp	.+450    	; 0xc36 <CheckPins+0x4c0>
        //component has current => PNP-Transistor or equivalent
        //compute current amplification factor in both directions
        R_DDR = LoPinRL | TriPinRH;	//switch R_H port for Tristate-Pin (Base) to output (GND)
     a74:	8b 81       	ldd	r24, Y+3	; 0x03
     a76:	80 2b       	or	r24, r16
     a78:	88 8b       	std	Y+16, r24	; 0x10
     a7a:	84 b9       	out	0x04, r24	; 4

        adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin (assumed Collector)
     a7c:	83 2d       	mov	r24, r3
     a7e:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
     a82:	9a 8b       	std	Y+18, r25	; 0x12
     a84:	89 8b       	std	Y+17, r24	; 0x11
        adc.tp2 = ReadADC(TristatePin);	//measure voltage at TristatePin (Base) 
     a86:	82 2d       	mov	r24, r2
     a88:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
     a8c:	9d 8b       	std	Y+21, r25	; 0x15
     a8e:	8c 8b       	std	Y+20, r24	; 0x14
        //check, if Test is done before 
        if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     a90:	80 91 07 01 	lds	r24, 0x0107
     a94:	82 50       	subi	r24, 0x02	; 2
     a96:	82 30       	cpi	r24, 0x02	; 2
     a98:	18 f4       	brcc	.+6      	; 0xaa0 <CheckPins+0x32a>
           PartReady = 1;
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	80 93 04 01 	sts	0x0104, r24
        }
        trans.uBE[PartReady] = ReadADC(HighPin) - adc.tp2;	// Base Emitter Voltage
     aa0:	e0 90 04 01 	lds	r14, 0x0104
     aa4:	ff 24       	eor	r15, r15
     aa6:	81 2f       	mov	r24, r17
     aa8:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
     aac:	f7 01       	movw	r30, r14
     aae:	ee 0f       	add	r30, r30
     ab0:	ff 1f       	adc	r31, r31
     ab2:	e9 5a       	subi	r30, 0xA9	; 169
     ab4:	fe 4f       	sbci	r31, 0xFE	; 254
     ab6:	ac 89       	ldd	r26, Y+20	; 0x14
     ab8:	bd 89       	ldd	r27, Y+21	; 0x15
     aba:	8a 1b       	sub	r24, r26
     abc:	9b 0b       	sbc	r25, r27
     abe:	91 83       	std	Z+1, r25	; 0x01
     ac0:	80 83       	st	Z, r24

        //compute current amplification factor for circuit with common Emitter
        //hFE = B = Collector current / Base current
        if(adc.tp2 < 53) {
     ac2:	a5 33       	cpi	r26, 0x35	; 53
     ac4:	b1 05       	cpc	r27, r1
     ac6:	20 f4       	brcc	.+8      	; 0xad0 <CheckPins+0x35a>
#if DebugOut == 5
           lcd_data('<');
           lcd_data('5');
           lcd_data('3');
#endif
           adc.tp2 = 53;
     ac8:	e5 e3       	ldi	r30, 0x35	; 53
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	fd 8b       	std	Y+21, r31	; 0x15
     ace:	ec 8b       	std	Y+20, r30	; 0x14
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     ad0:	e0 90 04 01 	lds	r14, 0x0104
     ad4:	ff 24       	eor	r15, r15
     ad6:	29 89       	ldd	r18, Y+17	; 0x11
     ad8:	3a 89       	ldd	r19, Y+18	; 0x12
     ada:	29 01       	movw	r4, r18
     adc:	66 24       	eor	r6, r6
     ade:	77 24       	eor	r7, r7
     ae0:	20 91 02 01 	lds	r18, 0x0102
     ae4:	30 91 03 01 	lds	r19, 0x0103
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	60 e6       	ldi	r22, 0x60	; 96
     aee:	77 eb       	ldi	r23, 0xB7	; 183
     af0:	87 e4       	ldi	r24, 0x47	; 71
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
     af8:	c3 01       	movw	r24, r6
     afa:	b2 01       	movw	r22, r4
     afc:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
                 (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
     b00:	ac 89       	ldd	r26, Y+20	; 0x14
     b02:	bd 89       	ldd	r27, Y+21	; 0x15
     b04:	9d 01       	movw	r18, r26
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	50 e0       	ldi	r21, 0x00	; 0
     b0a:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
#endif
           adc.tp2 = 53;
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     b0e:	f7 01       	movw	r30, r14
     b10:	ee 0f       	add	r30, r30
     b12:	ff 1f       	adc	r31, r31
     b14:	ee 0f       	add	r30, r30
     b16:	ff 1f       	adc	r31, r31
     b18:	e1 5b       	subi	r30, 0xB1	; 177
     b1a:	fe 4f       	sbci	r31, 0xFE	; 254
     b1c:	20 83       	st	Z, r18
     b1e:	31 83       	std	Z+1, r19	; 0x01
     b20:	42 83       	std	Z+2, r20	; 0x02
     b22:	53 83       	std	Z+3, r21	; 0x03
        trans.hfe[PartReady] = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
#ifdef COMMON_COLLECTOR
        //current amplification factor for common  Collector (Emitter follower)
        // c_hFE = (Emitter current - Base current) / Base current
        if (c_hfe > trans.hfe[PartReady]) {
     b24:	8c 81       	ldd	r24, Y+4	; 0x04
     b26:	9d 81       	ldd	r25, Y+5	; 0x05
     b28:	ae 81       	ldd	r26, Y+6	; 0x06
     b2a:	bf 81       	ldd	r27, Y+7	; 0x07
     b2c:	28 17       	cp	r18, r24
     b2e:	39 07       	cpc	r19, r25
     b30:	4a 07       	cpc	r20, r26
     b32:	5b 07       	cpc	r21, r27
     b34:	98 f4       	brcc	.+38     	; 0xb5c <CheckPins+0x3e6>
           trans.hfe[PartReady] = c_hfe;
     b36:	80 83       	st	Z, r24
     b38:	91 83       	std	Z+1, r25	; 0x01
     b3a:	a2 83       	std	Z+2, r26	; 0x02
     b3c:	b3 83       	std	Z+3, r27	; 0x03
           trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.hp1 - adc.tp1;	// Base Emitter Voltage common collector
     b3e:	f7 01       	movw	r30, r14
     b40:	ee 0f       	add	r30, r30
     b42:	ff 1f       	adc	r31, r31
     b44:	e9 5a       	subi	r30, 0xA9	; 169
     b46:	fe 4f       	sbci	r31, 0xFE	; 254
     b48:	80 91 40 01 	lds	r24, 0x0140
     b4c:	90 91 41 01 	lds	r25, 0x0141
     b50:	8a 19       	sub	r24, r10
     b52:	9b 09       	sbc	r25, r11
     b54:	88 19       	sub	r24, r8
     b56:	99 09       	sbc	r25, r9
     b58:	91 83       	std	Z+1, r25	; 0x01
     b5a:	80 83       	st	Z, r24
        }
#endif

 
        if(PartFound != PART_THYRISTOR) {
     b5c:	80 91 07 01 	lds	r24, 0x0107
     b60:	85 30       	cpi	r24, 0x05	; 5
     b62:	09 f4       	brne	.+2      	; 0xb66 <CheckPins+0x3f0>
     b64:	68 c0       	rjmp	.+208    	; 0xc36 <CheckPins+0x4c0>
           if(adc.tp2 > 977) {
     b66:	ac 89       	ldd	r26, Y+20	; 0x14
     b68:	bd 89       	ldd	r27, Y+21	; 0x15
     b6a:	e3 e0       	ldi	r30, 0x03	; 3
     b6c:	a2 3d       	cpi	r26, 0xD2	; 210
     b6e:	be 07       	cpc	r27, r30
     b70:	30 f0       	brcs	.+12     	; 0xb7e <CheckPins+0x408>
              //PNP-Transistor is found (Base voltage moves to VCC)
              PartFound = PART_TRANSISTOR;
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	80 93 07 01 	sts	0x0107, r24
              PartMode = PART_MODE_PNP;
     b78:	80 93 06 01 	sts	0x0106, r24
     b7c:	56 c0       	rjmp	.+172    	; 0xc2a <CheckPins+0x4b4>
           } else {
              if((adc.lp_otr < 97) && (adc.lp1 > 2000)) {
     b7e:	29 85       	ldd	r18, Y+9	; 0x09
     b80:	3a 85       	ldd	r19, Y+10	; 0x0a
     b82:	21 36       	cpi	r18, 0x61	; 97
     b84:	31 05       	cpc	r19, r1
     b86:	08 f0       	brcs	.+2      	; 0xb8a <CheckPins+0x414>
     b88:	50 c0       	rjmp	.+160    	; 0xc2a <CheckPins+0x4b4>
     b8a:	89 89       	ldd	r24, Y+17	; 0x11
     b8c:	9a 89       	ldd	r25, Y+18	; 0x12
     b8e:	a7 e0       	ldi	r26, 0x07	; 7
     b90:	81 3d       	cpi	r24, 0xD1	; 209
     b92:	9a 07       	cpc	r25, r26
     b94:	08 f4       	brcc	.+2      	; 0xb98 <CheckPins+0x422>
     b96:	49 c0       	rjmp	.+146    	; 0xc2a <CheckPins+0x4b4>
                 //is flow voltage low enough in the closed  state?
                 //(since D-Mode-FET would be by mistake detected as E-Mode )
        	 PartFound = PART_FET;		//P-Kanal-MOSFET is found (Basis/Gate moves not to VCC)
     b98:	83 e0       	ldi	r24, 0x03	; 3
     b9a:	80 93 07 01 	sts	0x0107, r24
        	 PartMode = PART_MODE_P_E_MOS;
     b9e:	80 93 06 01 	sts	0x0106, r24
        	 //measure the Gate threshold voltage
                 //Switching of Drain is monitored with digital input
                 // Low level is specified up to 0.3 * VCC
                 // High level is specified above 0.6 * VCC
                 PinMSK = LoADCm & 7;
     ba2:	ea 80       	ldd	r14, Y+2	; 0x02
     ba4:	b7 e0       	ldi	r27, 0x07	; 7
     ba6:	eb 22       	and	r14, r27
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
     ba8:	82 2d       	mov	r24, r2
     baa:	80 64       	ori	r24, 0x40	; 64
     bac:	80 93 7c 00 	sts	0x007C, r24
        	 gthvoltage = 1;			// round up ((1*4)/9)
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	90 93 60 01 	sts	0x0160, r25
     bb8:	80 93 5f 01 	sts	0x015F, r24
        	 for(ii=0;ii<11;ii++) {
     bbc:	40 e0       	ldi	r20, 0x00	; 0
        	    wdt_reset();
     bbe:	a8 95       	wdr
        	    ChargePin10ms(TriPinRL,1);
     bc0:	8d 2d       	mov	r24, r13
     bc2:	61 e0       	ldi	r22, 0x01	; 1
     bc4:	4e 8b       	std	Y+22, r20	; 0x16
     bc6:	0e 94 a0 03 	call	0x740	; 0x740 <ChargePin10ms>
                    R_DDR = LoPinRL | TriPinRH;		//switch R_H for Tristate-Pin (Basis) to GND
     bca:	e8 89       	ldd	r30, Y+16	; 0x10
     bcc:	e4 b9       	out	0x04, r30	; 4
     bce:	4e 89       	ldd	r20, Y+22	; 0x16
        	    while (!(ADC_PIN&PinMSK));		// Wait, until the MOSFET switches and Drain moves to VCC
     bd0:	86 b1       	in	r24, 0x06	; 6
     bd2:	8e 21       	and	r24, r14
     bd4:	e9 f3       	breq	.-6      	; 0xbd0 <CheckPins+0x45a>
                    			// 1 is detected with more than 2.5V (up to 2.57V) with tests of mega168 and mega328
        	    R_DDR = LoPinRL;
     bd6:	fb 81       	ldd	r31, Y+3	; 0x03
     bd8:	f4 b9       	out	0x04, r31	; 4
        	    ADCSRA |= (1<<ADSC);		// Start Conversion
     bda:	80 91 7a 00 	lds	r24, 0x007A
     bde:	80 64       	ori	r24, 0x40	; 64
     be0:	80 93 7a 00 	sts	0x007A, r24
        	    while (ADCSRA&(1<<ADSC));		// wait
     be4:	80 91 7a 00 	lds	r24, 0x007A
     be8:	86 fd       	sbrc	r24, 6
     bea:	fc cf       	rjmp	.-8      	; 0xbe4 <CheckPins+0x46e>
      		    gthvoltage += (1023 - ADCW);	// Add Tristatepin-Voltage
     bec:	20 91 78 00 	lds	r18, 0x0078
     bf0:	30 91 79 00 	lds	r19, 0x0079
     bf4:	80 91 5f 01 	lds	r24, 0x015F
     bf8:	90 91 60 01 	lds	r25, 0x0160
     bfc:	81 50       	subi	r24, 0x01	; 1
     bfe:	9c 4f       	sbci	r25, 0xFC	; 252
     c00:	82 1b       	sub	r24, r18
     c02:	93 0b       	sbc	r25, r19
     c04:	90 93 60 01 	sts	0x0160, r25
     c08:	80 93 5f 01 	sts	0x015F, r24
                 // Low level is specified up to 0.3 * VCC
                 // High level is specified above 0.6 * VCC
                 PinMSK = LoADCm & 7;
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
        	 gthvoltage = 1;			// round up ((1*4)/9)
        	 for(ii=0;ii<11;ii++) {
     c0c:	4f 5f       	subi	r20, 0xFF	; 255
     c0e:	4b 30       	cpi	r20, 0x0B	; 11
     c10:	b1 f6       	brne	.-84     	; 0xbbe <CheckPins+0x448>
        	    R_DDR = LoPinRL;
        	    ADCSRA |= (1<<ADSC);		// Start Conversion
        	    while (ADCSRA&(1<<ADSC));		// wait
      		    gthvoltage += (1023 - ADCW);	// Add Tristatepin-Voltage
                 }
                 gthvoltage *= 4;		// is equal to 44*ADCW
     c12:	88 0f       	add	r24, r24
     c14:	99 1f       	adc	r25, r25
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
                 gthvoltage /= 9;		// gives resolution in mV
     c1a:	69 e0       	ldi	r22, 0x09	; 9
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__udivmodhi4>
     c22:	70 93 60 01 	sts	0x0160, r23
     c26:	60 93 5f 01 	sts	0x015F, r22
              }
           }
           trans.b = TristatePin;
     c2a:	20 92 5b 01 	sts	0x015B, r2
           trans.c = LowPin;
     c2e:	30 92 5c 01 	sts	0x015C, r3
           trans.e = HighPin;
     c32:	10 93 5d 01 	sts	0x015D, r17
        }  // end if PartFound != PART_THYRISTOR
    } // end component has current => PNP

#ifdef COMMON_COLLECTOR
    // Low-Pin=RL- HighPin=VCC
    R_DDR = LoPinRL | TriPinRL;
     c36:	2f 85       	ldd	r18, Y+15	; 0x0f
     c38:	24 b9       	out	0x04, r18	; 4
    R_PORT = TriPinRL;			// TriPin=RL+  NPN with common Collector
     c3a:	d5 b8       	out	0x05, r13	; 5
    adc.lp1 = W5msReadADC(LowPin);	// voltage at Emitter resistor
     c3c:	83 2d       	mov	r24, r3
     c3e:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
     c42:	2c 01       	movw	r4, r24
    adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     c44:	80 91 40 01 	lds	r24, 0x0140
     c48:	90 91 41 01 	lds	r25, 0x0141
     c4c:	9a 8b       	std	Y+18, r25	; 0x12
     c4e:	89 8b       	std	Y+17, r24	; 0x11
     c50:	82 2d       	mov	r24, r2
     c52:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
     c56:	a9 89       	ldd	r26, Y+17	; 0x11
     c58:	ba 89       	ldd	r27, Y+18	; 0x12
     c5a:	a8 1b       	sub	r26, r24
     c5c:	b9 0b       	sbc	r27, r25
     c5e:	ba 8b       	std	Y+18, r27	; 0x12
     c60:	a9 8b       	std	Y+17, r26	; 0x11
    if (adc.tp1 < 10) {
     c62:	aa 30       	cpi	r26, 0x0A	; 10
     c64:	b1 05       	cpc	r27, r1
     c66:	b0 f5       	brcc	.+108    	; 0xcd4 <CheckPins+0x55e>
       R_DDR = LoPinRL | TriPinRH;
     c68:	8b 81       	ldd	r24, Y+3	; 0x03
     c6a:	80 2b       	or	r24, r16
     c6c:	84 b9       	out	0x04, r24	; 4
       R_PORT = TriPinRH;		// Tripin=RH+
     c6e:	05 b9       	out	0x05, r16	; 5
       adc.lp1 = W5msReadADC(LowPin);
     c70:	83 2d       	mov	r24, r3
     c72:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
     c76:	2c 01       	movw	r4, r24
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     c78:	e0 91 40 01 	lds	r30, 0x0140
     c7c:	f0 91 41 01 	lds	r31, 0x0141
     c80:	fa 8b       	std	Y+18, r31	; 0x12
     c82:	e9 8b       	std	Y+17, r30	; 0x11
     c84:	82 2d       	mov	r24, r2
     c86:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
     c8a:	29 89       	ldd	r18, Y+17	; 0x11
     c8c:	3a 89       	ldd	r19, Y+18	; 0x12
     c8e:	28 1b       	sub	r18, r24
     c90:	39 0b       	sbc	r19, r25
     c92:	3a 8b       	std	Y+18, r19	; 0x12
     c94:	29 8b       	std	Y+17, r18	; 0x11
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     c96:	42 01       	movw	r8, r4
     c98:	aa 24       	eor	r10, r10
     c9a:	bb 24       	eor	r11, r11
     c9c:	20 91 02 01 	lds	r18, 0x0102
     ca0:	30 91 03 01 	lds	r19, 0x0103
     ca4:	40 e0       	ldi	r20, 0x00	; 0
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	60 e6       	ldi	r22, 0x60	; 96
     caa:	77 eb       	ldi	r23, 0xB7	; 183
     cac:	87 e4       	ldi	r24, 0x47	; 71
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
     cb4:	c5 01       	movw	r24, r10
     cb6:	b4 01       	movw	r22, r8
     cb8:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
     cbc:	a9 89       	ldd	r26, Y+17	; 0x11
     cbe:	ba 89       	ldd	r27, Y+18	; 0x12
     cc0:	9d 01       	movw	r18, r26
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	50 e0       	ldi	r21, 0x00	; 0
       R_DDR = LoPinRL | TriPinRH;
       R_PORT = TriPinRH;		// Tripin=RH+
       adc.lp1 = W5msReadADC(LowPin);
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     cc6:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
     cca:	2c 83       	std	Y+4, r18	; 0x04
     ccc:	3d 83       	std	Y+5, r19	; 0x05
     cce:	4e 83       	std	Y+6, r20	; 0x06
     cd0:	5f 83       	std	Y+7, r21	; 0x07
     cd2:	0f c0       	rjmp	.+30     	; 0xcf2 <CheckPins+0x57c>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
 #else
       c_hfe = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
    } else {
       c_hfe = (adc.lp1 - adc.tp1) / adc.tp1;
     cd4:	c2 01       	movw	r24, r4
     cd6:	e9 89       	ldd	r30, Y+17	; 0x11
     cd8:	fa 89       	ldd	r31, Y+18	; 0x12
     cda:	8e 1b       	sub	r24, r30
     cdc:	9f 0b       	sbc	r25, r31
     cde:	bf 01       	movw	r22, r30
     ce0:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__udivmodhi4>
     ce4:	cb 01       	movw	r24, r22
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	8c 83       	std	Y+4, r24	; 0x04
     cec:	9d 83       	std	Y+5, r25	; 0x05
     cee:	ae 83       	std	Y+6, r26	; 0x06
     cf0:	bf 83       	std	Y+7, r27	; 0x07
       lcd_string(utoa(adc.tp1,outval,10));
       wait_about1s();
#endif
#endif
    //Tristate (can be Base) to VCC, Test if NPN
    ADC_DDR = LoADCm;		//Low-Pin to output 0V
     cf2:	9a 81       	ldd	r25, Y+2	; 0x02
     cf4:	97 b9       	out	0x07, r25	; 7
    ADC_PORT = TXD_VAL;			//switch Low-Pin to GND
     cf6:	88 e0       	ldi	r24, 0x08	; 8
     cf8:	88 b9       	out	0x08, r24	; 8
    R_DDR = TriPinRL | HiPinRL;		//RL port for High-Pin and Tristate-Pin to output
     cfa:	ab 85       	ldd	r26, Y+11	; 0x0b
     cfc:	a4 b9       	out	0x04, r26	; 4
    R_PORT = TriPinRL | HiPinRL;	//RL port for High-Pin and Tristate-Pin to Vcc
     cfe:	a5 b9       	out	0x05, r26	; 5
    adc.hp1 = W5msReadADC(HighPin);	//measure voltage at High-Pin  (Collector)
     d00:	81 2f       	mov	r24, r17
     d02:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
    if(adc.hp1 < 1600) {
     d06:	b6 e0       	ldi	r27, 0x06	; 6
     d08:	80 34       	cpi	r24, 0x40	; 64
     d0a:	9b 07       	cpc	r25, r27
     d0c:	08 f0       	brcs	.+2      	; 0xd10 <CheckPins+0x59a>
     d0e:	4d c1       	rjmp	.+666    	; 0xfaa <CheckPins+0x834>
       lcd_data('N');
       lcd_testpin(HighPin);
       lcd_space();
       wait_about1s();
#endif
       if(PartReady==1) {
     d10:	80 91 04 01 	lds	r24, 0x0104
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	09 f4       	brne	.+2      	; 0xd1a <CheckPins+0x5a4>
     d18:	b5 c1       	rjmp	.+874    	; 0x1084 <CheckPins+0x90e>
          goto widmes;
       }

       //Test auf Thyristor:
       //Gate discharge
       ChargePin10ms(TriPinRL,0);	//Tristate-Pin (Gate) across R_L 10ms to GND
     d1a:	8d 2d       	mov	r24, r13
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	0e 94 a0 03 	call	0x740	; 0x740 <ChargePin10ms>
       adc.hp3 = W5msReadADC(HighPin);	//read voltage at High-Pin (probably Anode) again
     d22:	81 2f       	mov	r24, r17
     d24:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
     d28:	7c 01       	movw	r14, r24
					//current should still flow, if not,
					// no Thyristor or holding current to low 
		 	
       R_PORT = 0;			//switch R_L for High-Pin (probably Anode) to GND (turn off)
     d2a:	15 b8       	out	0x05, r1	; 5
       wait_about5ms();
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>
       R_PORT = HiPinRL;		//switch R_L for High-Pin (probably Anode) again to VCC
     d34:	c5 b8       	out	0x05, r12	; 5
       adc.hp2 = W5msReadADC(HighPin);	//measure voltage at the High-Pin (probably Anode) again
     d36:	81 2f       	mov	r24, r17
     d38:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
       if((adc.hp3 < 1600) && (adc.hp2 > 4400)) {
     d3c:	e0 e4       	ldi	r30, 0x40	; 64
     d3e:	ee 16       	cp	r14, r30
     d40:	e6 e0       	ldi	r30, 0x06	; 6
     d42:	fe 06       	cpc	r15, r30
     d44:	08 f0       	brcs	.+2      	; 0xd48 <CheckPins+0x5d2>
     d46:	47 c0       	rjmp	.+142    	; 0xdd6 <CheckPins+0x660>
     d48:	f1 e1       	ldi	r31, 0x11	; 17
     d4a:	81 33       	cpi	r24, 0x31	; 49
     d4c:	9f 07       	cpc	r25, r31
     d4e:	08 f4       	brcc	.+2      	; 0xd52 <CheckPins+0x5dc>
     d50:	42 c0       	rjmp	.+132    	; 0xdd6 <CheckPins+0x660>
          //if the holding current was switched off the thyristor must be switched off too. 
          //if Thyristor was still swiched on, if gate was switched off => Thyristor
          PartFound = PART_THYRISTOR;
     d52:	85 e0       	ldi	r24, 0x05	; 5
     d54:	80 93 07 01 	sts	0x0107, r24
          //Test if Triac
          R_DDR = 0;
     d58:	14 b8       	out	0x04, r1	; 4
          R_PORT = 0;
     d5a:	15 b8       	out	0x05, r1	; 5
          ADC_PORT = LoADCp;	//Low-Pin fix to VCC
     d5c:	2a 81       	ldd	r18, Y+2	; 0x02
     d5e:	28 b9       	out	0x08, r18	; 8
          wait_about5ms();
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>
          R_DDR = HiPinRL;		//switch R_L port HighPin to output (GND)
     d68:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) > 244) {
     d6a:	81 2f       	mov	r24, r17
     d6c:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
     d70:	85 3f       	cpi	r24, 0xF5	; 245
     d72:	91 05       	cpc	r25, r1
     d74:	08 f0       	brcs	.+2      	; 0xd78 <CheckPins+0x602>
     d76:	13 c1       	rjmp	.+550    	; 0xf9e <CheckPins+0x828>
             goto savenresult;		//measure voltage at the  High-Pin (probably A2); if too high:
                                	//component has current => kein Triac
          }
          R_DDR = HiPinRL | TriPinRL;	//switch R_L port for TristatePin (Gate) to output (GND) => Triac should be triggered 
     d78:	3b 85       	ldd	r19, Y+11	; 0x0b
     d7a:	34 b9       	out	0x04, r19	; 4
          if(W5msReadADC(TristatePin) < 977) {
     d7c:	82 2d       	mov	r24, r2
     d7e:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
     d82:	43 e0       	ldi	r20, 0x03	; 3
     d84:	81 3d       	cpi	r24, 0xD1	; 209
     d86:	94 07       	cpc	r25, r20
     d88:	08 f4       	brcc	.+2      	; 0xd8c <CheckPins+0x616>
     d8a:	09 c1       	rjmp	.+530    	; 0xf9e <CheckPins+0x828>
             goto savenresult; 		//measure voltage at the Tristate-Pin (probably Gate) ;
                              		// if to low, abort 
          }
          if(ReadADC(HighPin) < 733) {
     d8c:	81 2f       	mov	r24, r17
     d8e:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
     d92:	a2 e0       	ldi	r26, 0x02	; 2
     d94:	8d 3d       	cpi	r24, 0xDD	; 221
     d96:	9a 07       	cpc	r25, r26
     d98:	08 f4       	brcc	.+2      	; 0xd9c <CheckPins+0x626>
     d9a:	01 c1       	rjmp	.+514    	; 0xf9e <CheckPins+0x828>
             goto savenresult; 		//component has no current => no Triac => abort
          }
          R_DDR = HiPinRL;		//TristatePin (Gate) to input 
     d9c:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) < 733) {
     d9e:	81 2f       	mov	r24, r17
     da0:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
     da4:	b2 e0       	ldi	r27, 0x02	; 2
     da6:	8d 3d       	cpi	r24, 0xDD	; 221
     da8:	9b 07       	cpc	r25, r27
     daa:	08 f4       	brcc	.+2      	; 0xdae <CheckPins+0x638>
     dac:	f8 c0       	rjmp	.+496    	; 0xf9e <CheckPins+0x828>
             goto savenresult; 		//component has no current without base current => no Triac => abort
          }
          R_PORT = HiPinRL;		//switch R_L port for HighPin to VCC => switch off holding current 
     dae:	c5 b8       	out	0x05, r12	; 5
          wait_about5ms();
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>
          R_PORT = 0;			//switch R_L port for HighPin again to GND; Triac should now switched off
     db8:	15 b8       	out	0x05, r1	; 5
          if(W5msReadADC(HighPin) > 244) {
     dba:	81 2f       	mov	r24, r17
     dbc:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
     dc0:	85 3f       	cpi	r24, 0xF5	; 245
     dc2:	91 05       	cpc	r25, r1
     dc4:	08 f0       	brcs	.+2      	; 0xdc8 <CheckPins+0x652>
     dc6:	eb c0       	rjmp	.+470    	; 0xf9e <CheckPins+0x828>
             goto savenresult;		//measure voltage at the High-Pin (probably A2) ;
                                	//if to high, component is not switched off => no Triac, abort
         }
         PartFound = PART_TRIAC;
     dc8:	84 e0       	ldi	r24, 0x04	; 4
     dca:	80 93 07 01 	sts	0x0107, r24
         PartReady = 1;
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	80 93 04 01 	sts	0x0104, r24
         goto savenresult;
     dd4:	e4 c0       	rjmp	.+456    	; 0xf9e <CheckPins+0x828>
        }
      //Test if NPN Transistor or MOSFET
      // ADC_DDR = LoADCm;	//Low-Pin to output 0V
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
     dd6:	0c 29       	or	r16, r12
     dd8:	04 b9       	out	0x04, r16	; 4
      R_PORT = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to VCC
     dda:	05 b9       	out	0x05, r16	; 5
      wait_about50ms();
     ddc:	8a e0       	ldi	r24, 0x0A	; 10
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>
      adc.hp2 = ADCconfig.U_AVCC - ReadADC(HighPin);	//measure the voltage at the collector resistor 
     de4:	60 90 40 01 	lds	r6, 0x0140
     de8:	70 90 41 01 	lds	r7, 0x0141
     dec:	81 2f       	mov	r24, r17
     dee:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
     df2:	68 1a       	sub	r6, r24
     df4:	79 0a       	sbc	r7, r25
      adc.tp2 = ADCconfig.U_AVCC - ReadADC(TristatePin);	//measure the voltage at the base resistor 
     df6:	a0 90 40 01 	lds	r10, 0x0140
     dfa:	b0 90 41 01 	lds	r11, 0x0141
     dfe:	82 2d       	mov	r24, r2
     e00:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
     e04:	a8 1a       	sub	r10, r24
     e06:	b9 0a       	sbc	r11, r25
       lcd_space();
       lcd_data('T');
       lcd_data('P');
       lcd_string(utoa(adc.tp2,outval,10));
#endif
      if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     e08:	80 91 07 01 	lds	r24, 0x0107
     e0c:	82 50       	subi	r24, 0x02	; 2
     e0e:	82 30       	cpi	r24, 0x02	; 2
     e10:	18 f4       	brcc	.+6      	; 0xe18 <CheckPins+0x6a2>
         PartReady = 1;	//check, if test is already done once
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	80 93 04 01 	sts	0x0104, r24
      }
      trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.tp2 - ReadADC(LowPin);
     e18:	80 90 04 01 	lds	r8, 0x0104
     e1c:	99 24       	eor	r9, r9
     e1e:	e0 90 40 01 	lds	r14, 0x0140
     e22:	f0 90 41 01 	lds	r15, 0x0141
     e26:	ea 18       	sub	r14, r10
     e28:	fb 08       	sbc	r15, r11
     e2a:	83 2d       	mov	r24, r3
     e2c:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
     e30:	f4 01       	movw	r30, r8
     e32:	ee 0f       	add	r30, r30
     e34:	ff 1f       	adc	r31, r31
     e36:	e9 5a       	subi	r30, 0xA9	; 169
     e38:	fe 4f       	sbci	r31, 0xFE	; 254
     e3a:	e8 1a       	sub	r14, r24
     e3c:	f9 0a       	sbc	r15, r25
     e3e:	f1 82       	std	Z+1, r15	; 0x01
     e40:	e0 82       	st	Z, r14

      //compute current amplification factor for common Emitter
      //hFE = B = Collector current / Base current
      if(adc.tp2 < 53) {
     e42:	e5 e3       	ldi	r30, 0x35	; 53
     e44:	ae 16       	cp	r10, r30
     e46:	b1 04       	cpc	r11, r1
     e48:	18 f4       	brcc	.+6      	; 0xe50 <CheckPins+0x6da>
#if DebugOut == 5
         lcd_data('<');
         lcd_data('5');
         lcd_data('3');
#endif
         adc.tp2 = 53;
     e4a:	85 e3       	ldi	r24, 0x35	; 53
     e4c:	a8 2e       	mov	r10, r24
     e4e:	b1 2c       	mov	r11, r1
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     e50:	e0 90 04 01 	lds	r14, 0x0104
     e54:	ff 24       	eor	r15, r15
     e56:	c3 01       	movw	r24, r6
     e58:	a0 e0       	ldi	r26, 0x00	; 0
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	8b 87       	std	Y+11, r24	; 0x0b
     e5e:	9c 87       	std	Y+12, r25	; 0x0c
     e60:	ad 87       	std	Y+13, r26	; 0x0d
     e62:	be 87       	std	Y+14, r27	; 0x0e
     e64:	20 91 08 01 	lds	r18, 0x0108
     e68:	30 91 09 01 	lds	r19, 0x0109
     e6c:	40 e0       	ldi	r20, 0x00	; 0
     e6e:	50 e0       	ldi	r21, 0x00	; 0
     e70:	60 e6       	ldi	r22, 0x60	; 96
     e72:	77 eb       	ldi	r23, 0xB7	; 183
     e74:	87 e4       	ldi	r24, 0x47	; 71
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
     e7c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e7e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e80:	8d 85       	ldd	r24, Y+13	; 0x0d
     e82:	9e 85       	ldd	r25, Y+14	; 0x0e
     e84:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp2;	
     e88:	95 01       	movw	r18, r10
     e8a:	40 e0       	ldi	r20, 0x00	; 0
     e8c:	50 e0       	ldi	r21, 0x00	; 0
     e8e:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
#endif
         adc.tp2 = 53;
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     e92:	f7 01       	movw	r30, r14
     e94:	ee 0f       	add	r30, r30
     e96:	ff 1f       	adc	r31, r31
     e98:	ee 0f       	add	r30, r30
     e9a:	ff 1f       	adc	r31, r31
     e9c:	e1 5b       	subi	r30, 0xB1	; 177
     e9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ea0:	20 83       	st	Z, r18
     ea2:	31 83       	std	Z+1, r19	; 0x01
     ea4:	42 83       	std	Z+2, r20	; 0x02
     ea6:	53 83       	std	Z+3, r21	; 0x03
      trans.hfe[PartReady] = ((adc.hp2 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
#endif
#ifdef COMMON_COLLECTOR
       //compare current amplification factor for common Collector (Emitter follower)
       // hFE = (Emitterstrom - Basisstrom) / Basisstrom
       if (c_hfe >  trans.hfe[PartReady]) {
     ea8:	8c 81       	ldd	r24, Y+4	; 0x04
     eaa:	9d 81       	ldd	r25, Y+5	; 0x05
     eac:	ae 81       	ldd	r26, Y+6	; 0x06
     eae:	bf 81       	ldd	r27, Y+7	; 0x07
     eb0:	28 17       	cp	r18, r24
     eb2:	39 07       	cpc	r19, r25
     eb4:	4a 07       	cpc	r20, r26
     eb6:	5b 07       	cpc	r21, r27
     eb8:	a8 f4       	brcc	.+42     	; 0xee4 <CheckPins+0x76e>
          trans.hfe[PartReady] = c_hfe;
     eba:	80 83       	st	Z, r24
     ebc:	91 83       	std	Z+1, r25	; 0x01
     ebe:	a2 83       	std	Z+2, r26	; 0x02
     ec0:	b3 83       	std	Z+3, r27	; 0x03
          trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.lp1 - adc.tp1;
     ec2:	f7 01       	movw	r30, r14
     ec4:	ee 0f       	add	r30, r30
     ec6:	ff 1f       	adc	r31, r31
     ec8:	e9 5a       	subi	r30, 0xA9	; 169
     eca:	fe 4f       	sbci	r31, 0xFE	; 254
     ecc:	80 91 40 01 	lds	r24, 0x0140
     ed0:	90 91 41 01 	lds	r25, 0x0141
     ed4:	84 19       	sub	r24, r4
     ed6:	95 09       	sbc	r25, r5
     ed8:	a9 89       	ldd	r26, Y+17	; 0x11
     eda:	ba 89       	ldd	r27, Y+18	; 0x12
     edc:	8a 1b       	sub	r24, r26
     ede:	9b 0b       	sbc	r25, r27
     ee0:	91 83       	std	Z+1, r25	; 0x01
     ee2:	80 83       	st	Z, r24
       }
#endif

      if(adc.tp2 > 2557) {		// Basis-voltage R_H is low enough
     ee4:	be ef       	ldi	r27, 0xFE	; 254
     ee6:	ab 16       	cp	r10, r27
     ee8:	b9 e0       	ldi	r27, 0x09	; 9
     eea:	bb 06       	cpc	r11, r27
     eec:	38 f0       	brcs	.+14     	; 0xefc <CheckPins+0x786>
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
     eee:	82 e0       	ldi	r24, 0x02	; 2
     ef0:	80 93 07 01 	sts	0x0107, r24
         PartMode = PART_MODE_NPN;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	80 93 06 01 	sts	0x0106, r24
     efa:	51 c0       	rjmp	.+162    	; 0xf9e <CheckPins+0x828>
      } else { // Basis has low current
         if((adc.lp_otr < 97) && (adc.hp2 > 3400)) {
     efc:	e9 85       	ldd	r30, Y+9	; 0x09
     efe:	fa 85       	ldd	r31, Y+10	; 0x0a
     f00:	e1 36       	cpi	r30, 0x61	; 97
     f02:	f1 05       	cpc	r31, r1
     f04:	08 f0       	brcs	.+2      	; 0xf08 <CheckPins+0x792>
     f06:	4b c0       	rjmp	.+150    	; 0xf9e <CheckPins+0x828>
     f08:	f9 e4       	ldi	r31, 0x49	; 73
     f0a:	6f 16       	cp	r6, r31
     f0c:	fd e0       	ldi	r31, 0x0D	; 13
     f0e:	7f 06       	cpc	r7, r31
     f10:	08 f4       	brcc	.+2      	; 0xf14 <CheckPins+0x79e>
     f12:	45 c0       	rjmp	.+138    	; 0xf9e <CheckPins+0x828>
            //if flow voltage in switched off mode low enough?
            //(since D-Mode-FET will be detected in error as E-Mode )
            PartFound = PART_FET;	//N-Kanal-MOSFET is found (Basis/Gate will Not be pulled down)
     f14:	83 e0       	ldi	r24, 0x03	; 3
     f16:	80 93 07 01 	sts	0x0107, r24
            PartMode = PART_MODE_N_E_MOS;
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	80 93 06 01 	sts	0x0106, r24
            wait_about1s();
#endif
            //Switching of Drain is monitored with digital input
            // Low level is specified up to 0.3 * VCC
            // High level is specified above 0.6 * VCC
            PinMSK = HiADCm & 7;
     f20:	e9 80       	ldd	r14, Y+1	; 0x01
     f22:	27 e0       	ldi	r18, 0x07	; 7
     f24:	e2 22       	and	r14, r18
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
     f26:	82 2d       	mov	r24, r2
     f28:	80 64       	ori	r24, 0x40	; 64
     f2a:	80 93 7c 00 	sts	0x007C, r24
            gthvoltage = 1;			// round up ((1*4)/9)
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	90 93 60 01 	sts	0x0160, r25
     f36:	80 93 5f 01 	sts	0x015F, r24
     f3a:	7b e0       	ldi	r23, 0x0B	; 11
     f3c:	a7 2e       	mov	r10, r23
            for(ii=0;ii<11;ii++) {
            	wdt_reset();
     f3e:	a8 95       	wdr
            	ChargePin10ms(TriPinRL,0);	// discharge Gate 10ms with RL 
     f40:	8d 2d       	mov	r24, r13
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	0e 94 a0 03 	call	0x740	; 0x740 <ChargePin10ms>
                R_DDR = HiPinRL | TriPinRH;	// slowly charge Gate 
     f48:	04 b9       	out	0x04, r16	; 4
                R_PORT = HiPinRL | TriPinRH;
     f4a:	05 b9       	out	0x05, r16	; 5
            	while ((ADC_PIN&PinMSK));	// Wait, until the MOSFET switch and Drain moved to low 
     f4c:	86 b1       	in	r24, 0x06	; 6
     f4e:	8e 21       	and	r24, r14
     f50:	e9 f7       	brne	.-6      	; 0xf4c <CheckPins+0x7d6>
                		// 0 is detected with input voltage of 2.12V to 2.24V (tested with mega168 & mega328)
                R_DDR = HiPinRL;		// switch off current
     f52:	c4 b8       	out	0x04, r12	; 4
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
     f54:	80 91 7a 00 	lds	r24, 0x007A
     f58:	80 64       	ori	r24, 0x40	; 64
     f5a:	80 93 7a 00 	sts	0x007A, r24
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
     f5e:	80 91 7a 00 	lds	r24, 0x007A
     f62:	86 fd       	sbrc	r24, 6
     f64:	fc cf       	rjmp	.-8      	; 0xf5e <CheckPins+0x7e8>
            	gthvoltage += ADCW;		// add result of ADC
     f66:	80 91 78 00 	lds	r24, 0x0078
     f6a:	90 91 79 00 	lds	r25, 0x0079
     f6e:	20 91 5f 01 	lds	r18, 0x015F
     f72:	30 91 60 01 	lds	r19, 0x0160
     f76:	82 0f       	add	r24, r18
     f78:	93 1f       	adc	r25, r19
     f7a:	90 93 60 01 	sts	0x0160, r25
     f7e:	80 93 5f 01 	sts	0x015F, r24
     f82:	aa 94       	dec	r10
            // High level is specified above 0.6 * VCC
            PinMSK = HiADCm & 7;
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
            gthvoltage = 1;			// round up ((1*4)/9)
            for(ii=0;ii<11;ii++) {
     f84:	e1 f6       	brne	.-72     	; 0xf3e <CheckPins+0x7c8>
                R_DDR = HiPinRL;		// switch off current
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
            	gthvoltage += ADCW;		// add result of ADC
            }
            gthvoltage *= 4;	//is equal to 44 * ADCW
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
            gthvoltage /= 9;	//scale to mV
     f8e:	69 e0       	ldi	r22, 0x09	; 9
     f90:	70 e0       	ldi	r23, 0x00	; 0
     f92:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__udivmodhi4>
     f96:	70 93 60 01 	sts	0x0160, r23
     f9a:	60 93 5f 01 	sts	0x015F, r22
         }
      }
savenresult:
      trans.b = TristatePin;	// save Pin-constellation
     f9e:	20 92 5b 01 	sts	0x015B, r2
      trans.c = HighPin;
     fa2:	10 93 5c 01 	sts	0x015C, r17
      trans.e = LowPin;
     fa6:	30 92 5d 01 	sts	0x015D, r3
   } // end component conduct => npn
   ADC_DDR = TXD_MSK;		// switch all ADC-Ports to input
     faa:	88 e0       	ldi	r24, 0x08	; 8
     fac:	87 b9       	out	0x07, r24	; 7
   ADC_PORT = TXD_VAL;		// switch all ADC-Ports to 0 (no Pull up)
     fae:	88 b9       	out	0x08, r24	; 8
   //Fertig
   //end das component has no connection between HighPin and LowPin
   goto widmes;
     fb0:	69 c0       	rjmp	.+210    	; 0x1084 <CheckPins+0x90e>
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
     fb2:	88 e0       	ldi	r24, 0x08	; 8
     fb4:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;	//Low-Pin fix to GND
     fb6:	3a 81       	ldd	r19, Y+2	; 0x02
     fb8:	37 b9       	out	0x07, r19	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     fba:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
     fbc:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
     fbe:	8d 2d       	mov	r24, r13
     fc0:	61 e0       	ldi	r22, 0x01	; 1
     fc2:	0e 94 a0 03 	call	0x740	; 0x740 <ChargePin10ms>
  adc.lp_otr = W5msReadADC(HighPin) - ReadADC(LowPin);
     fc6:	81 2f       	mov	r24, r17
     fc8:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
     fcc:	4c 01       	movw	r8, r24
     fce:	83 2d       	mov	r24, r3
     fd0:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
     fd4:	88 1a       	sub	r8, r24
     fd6:	99 0a       	sbc	r9, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
     fd8:	48 85       	ldd	r20, Y+8	; 0x08
     fda:	44 b9       	out	0x04, r20	; 4
  R_PORT = HiPinRH;
     fdc:	45 b9       	out	0x05, r20	; 5
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
     fde:	81 2f       	mov	r24, r17
     fe0:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
     fe4:	5c 01       	movw	r10, r24

  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     fe6:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
     fe8:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
     fea:	8d 2d       	mov	r24, r13
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	0e 94 a0 03 	call	0x740	; 0x740 <ChargePin10ms>
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
     ff2:	81 2f       	mov	r24, r17
     ff4:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
     ff8:	7c 01       	movw	r14, r24
     ffa:	83 2d       	mov	r24, r3
     ffc:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
    1000:	e8 1a       	sub	r14, r24
    1002:	f9 0a       	sbc	r15, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
    1004:	88 85       	ldd	r24, Y+8	; 0x08
    1006:	84 b9       	out	0x04, r24	; 4
  R_PORT = HiPinRH;
    1008:	85 b9       	out	0x05, r24	; 5
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
    100a:	81 2f       	mov	r24, r17
    100c:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
    1010:	e8 14       	cp	r14, r8
    1012:	f9 04       	cpc	r15, r9
    1014:	18 f0       	brcs	.+6      	; 0x101c <CheckPins+0x8a6>
  R_PORT = HiPinRL;
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
  R_PORT = HiPinRH;
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
    1016:	a8 2e       	mov	r10, r24
    1018:	b9 2e       	mov	r11, r25
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
    101a:	47 01       	movw	r8, r14
  lcd_string(utoa(adc.hp3,outval,10));
  lcd_space();
  wait_about1s();
#endif

  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
    101c:	c4 01       	movw	r24, r8
    101e:	87 59       	subi	r24, 0x97	; 151
    1020:	90 40       	sbci	r25, 0x00	; 0
    1022:	a1 e1       	ldi	r26, 0x11	; 17
    1024:	89 38       	cpi	r24, 0x89	; 137
    1026:	9a 07       	cpc	r25, r26
    1028:	68 f5       	brcc	.+90     	; 0x1084 <CheckPins+0x90e>
    102a:	c5 01       	movw	r24, r10
    102c:	53 e0       	ldi	r21, 0x03	; 3
    102e:	96 95       	lsr	r25
    1030:	87 95       	ror	r24
    1032:	5a 95       	dec	r21
    1034:	e1 f7       	brne	.-8      	; 0x102e <CheckPins+0x8b8>
    1036:	8a 0d       	add	r24, r10
    1038:	9b 1d       	adc	r25, r11
    103a:	88 15       	cp	r24, r8
    103c:	99 05       	cpc	r25, r9
    103e:	10 f5       	brcc	.+68     	; 0x1084 <CheckPins+0x90e>
    1040:	43 e0       	ldi	r20, 0x03	; 3
    1042:	aa 0c       	add	r10, r10
    1044:	bb 1c       	adc	r11, r11
    1046:	4a 95       	dec	r20
    1048:	e1 f7       	brne	.-8      	; 0x1042 <CheckPins+0x8cc>
    104a:	8a 14       	cp	r8, r10
    104c:	9b 04       	cpc	r9, r11
    104e:	d0 f4       	brcc	.+52     	; 0x1084 <CheckPins+0x90e>
     //voltage is above 0,15V and below 4,64V => Ok
     if((PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
    1050:	80 91 07 01 	lds	r24, 0x0107
    1054:	88 23       	and	r24, r24
    1056:	11 f0       	breq	.+4      	; 0x105c <CheckPins+0x8e6>
    1058:	86 30       	cpi	r24, 0x06	; 6
    105a:	19 f4       	brne	.+6      	; 0x1062 <CheckPins+0x8ec>
        PartFound = PART_DIODE;	//mark for diode only, if no other component is found
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	80 93 07 01 	sts	0x0107, r24
				//since there is a problem with Transistors with a protection diode
#if DebugOut == 4
        lcd_data('D');
#endif
     }
     diodes[NumOfDiodes].Anode = HighPin;
    1062:	80 91 05 01 	lds	r24, 0x0105
    1066:	e8 2f       	mov	r30, r24
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	ee 0f       	add	r30, r30
    106c:	ff 1f       	adc	r31, r31
    106e:	ee 0f       	add	r30, r30
    1070:	ff 1f       	adc	r31, r31
    1072:	e8 58       	subi	r30, 0x88	; 136
    1074:	fe 4f       	sbci	r31, 0xFE	; 254
    1076:	10 83       	st	Z, r17
     diodes[NumOfDiodes].Cathode = LowPin;
    1078:	31 82       	std	Z+1, r3	; 0x01
     diodes[NumOfDiodes].Voltage = adc.hp1;	// voltage in Millivolt 
    107a:	93 82       	std	Z+3, r9	; 0x03
    107c:	82 82       	std	Z+2, r8	; 0x02
     NumOfDiodes++;
    107e:	8f 5f       	subi	r24, 0xFF	; 255
    1080:	80 93 05 01 	sts	0x0105, r24
#if DebugOut == 4
  lcd_data(NumOfDiodes+'0');
#endif

widmes:
  if (NumOfDiodes > 0) goto clean_ports;
    1084:	80 91 05 01 	lds	r24, 0x0105
    1088:	88 23       	and	r24, r24
    108a:	09 f0       	breq	.+2      	; 0x108e <CheckPins+0x918>
    108c:	12 c2       	rjmp	.+1060   	; 0x14b2 <CheckPins+0xd3c>
  // resistor measurement
  wdt_reset();
    108e:	a8 95       	wdr
// U_SCALE can be set to 4 for better resolution of ReadADC result
#if U_SCALE != 1
  ADCconfig.U_AVCC *= U_SCALE;	// scale to higher resolution, mV scale is not required
    1090:	80 91 40 01 	lds	r24, 0x0140
    1094:	90 91 41 01 	lds	r25, 0x0141
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	90 93 41 01 	sts	0x0141, r25
    10a4:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.U_Bandgap *= U_SCALE;
    10a8:	80 91 3e 01 	lds	r24, 0x013E
    10ac:	90 91 3f 01 	lds	r25, 0x013F
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	90 93 3f 01 	sts	0x013F, r25
    10bc:	80 93 3e 01 	sts	0x013E, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = R_ANZ_MESS;	// switch to special number of repetitions
    10c0:	8e eb       	ldi	r24, 0xBE	; 190
    10c2:	80 93 3c 01 	sts	0x013C, r24
#endif
  #define MAX_REPEAT (700 / (5 + R_ANZ_MESS/8))
  ADC_PORT = TXD_VAL;
    10c6:	88 e0       	ldi	r24, 0x08	; 8
    10c8:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
    10ca:	ba 81       	ldd	r27, Y+2	; 0x02
    10cc:	b7 b9       	out	0x07, r27	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    10ce:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;	
    10d0:	c5 b8       	out	0x05, r12	; 5
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
    10d2:	ee 24       	eor	r14, r14
    10d4:	ff 24       	eor	r15, r15
  for (ii=1;ii<MAX_REPEAT;ii++) {
    10d6:	21 e0       	ldi	r18, 0x01	; 1
    10d8:	01 c0       	rjmp	.+2      	; 0x10dc <CheckPins+0x966>
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    10da:	7c 01       	movw	r14, r24
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
    10dc:	83 2d       	mov	r24, r3
    10de:	2b 8b       	std	Y+19, r18	; 0x13
    10e0:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
    10e4:	08 2f       	mov	r16, r24
    10e6:	49 2e       	mov	r4, r25
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    10e8:	81 2f       	mov	r24, r17
    10ea:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
     udiff = adc.hp1 - adc.hp2;
    10ee:	ac 01       	movw	r20, r24
    10f0:	4e 19       	sub	r20, r14
    10f2:	5f 09       	sbc	r21, r15
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    10f4:	2b 89       	ldd	r18, Y+19	; 0x13
    10f6:	57 ff       	sbrs	r21, 7
    10f8:	03 c0       	rjmp	.+6      	; 0x1100 <CheckPins+0x98a>
    10fa:	50 95       	com	r21
    10fc:	41 95       	neg	r20
    10fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1100:	43 30       	cpi	r20, 0x03	; 3
    1102:	51 05       	cpc	r21, r1
    1104:	84 f4       	brge	.+32     	; 0x1126 <CheckPins+0x9b0>
    1106:	ac 01       	movw	r20, r24
  adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
#endif
  if (adc.tp1 > adc.hp1) {
     adc.tp1 = adc.hp1;
  }
  R_PORT = 0;
    1108:	15 b8       	out	0x05, r1	; 5
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (GND)
    110a:	e8 85       	ldd	r30, Y+8	; 0x08
    110c:	e4 b9       	out	0x04, r30	; 4
  adc.hp2 = W5msReadADC(HighPin);	// read voltage, should be down
    110e:	81 2f       	mov	r24, r17
    1110:	4e 8b       	std	Y+22, r20	; 0x16
    1112:	5b 8b       	std	Y+19, r21	; 0x13
    1114:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
  if (adc.hp2 > (20*U_SCALE)) {
    1118:	4e 89       	ldd	r20, Y+22	; 0x16
    111a:	5b 89       	ldd	r21, Y+19	; 0x13
    111c:	81 35       	cpi	r24, 0x51	; 81
    111e:	91 05       	cpc	r25, r1
    1120:	08 f0       	brcs	.+2      	; 0x1124 <CheckPins+0x9ae>
    1122:	ac c1       	rjmp	.+856    	; 0x147c <CheckPins+0xd06>
    1124:	05 c0       	rjmp	.+10     	; 0x1130 <CheckPins+0x9ba>
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     udiff = adc.hp1 - adc.hp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.hp2 = adc.hp1;
     wdt_reset();
    1126:	a8 95       	wdr
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    1128:	2f 5f       	subi	r18, 0xFF	; 255
    112a:	29 31       	cpi	r18, 0x19	; 25
    112c:	b1 f6       	brne	.-84     	; 0x10da <CheckPins+0x964>
    112e:	a6 c1       	rjmp	.+844    	; 0x147c <CheckPins+0xd06>
     lcd_string(utoa(adc.hp2, outval, 10));
     lcd_space();
#endif
     goto testend;
  }
  R_PORT = HiPinRH;		//switch R_H for High-Pin to VCC
    1130:	f8 85       	ldd	r31, Y+8	; 0x08
    1132:	f5 b9       	out	0x05, r31	; 5
  adc.hp2 = W5msReadADC(HighPin);	// voltage at resistor Rx with R_H
    1134:	81 2f       	mov	r24, r17
    1136:	4e 8b       	std	Y+22, r20	; 0x16
    1138:	5b 8b       	std	Y+19, r21	; 0x13
    113a:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
    113e:	7c 01       	movw	r14, r24

  ADC_DDR = HiADCm;		//switch High-Pin to output
    1140:	29 81       	ldd	r18, Y+1	; 0x01
    1142:	27 b9       	out	0x07, r18	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
    1144:	28 b9       	out	0x08, r18	; 8
  R_PORT = 0;
    1146:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
    1148:	3b 81       	ldd	r19, Y+3	; 0x03
    114a:	34 b9       	out	0x04, r19	; 4
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
    114c:	aa 24       	eor	r10, r10
    114e:	bb 24       	eor	r11, r11
  for (ii=1;ii<MAX_REPEAT;ii++) {
    1150:	21 e0       	ldi	r18, 0x01	; 1
    1152:	4e 89       	ldd	r20, Y+22	; 0x16
    1154:	5b 89       	ldd	r21, Y+19	; 0x13
    1156:	3a 01       	movw	r6, r20
    1158:	01 c0       	rjmp	.+2      	; 0x115c <CheckPins+0x9e6>
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    115a:	56 01       	movw	r10, r12
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
    115c:	81 2f       	mov	r24, r17
    115e:	2b 8b       	std	Y+19, r18	; 0x13
    1160:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
    1164:	4c 01       	movw	r8, r24
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    1166:	83 2d       	mov	r24, r3
    1168:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
    116c:	6c 01       	movw	r12, r24
     udiff = adc.lp1 - adc.lp2;
    116e:	8a 19       	sub	r24, r10
    1170:	9b 09       	sbc	r25, r11
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    1172:	2b 89       	ldd	r18, Y+19	; 0x13
    1174:	97 ff       	sbrs	r25, 7
    1176:	03 c0       	rjmp	.+6      	; 0x117e <CheckPins+0xa08>
    1178:	90 95       	com	r25
    117a:	81 95       	neg	r24
    117c:	9f 4f       	sbci	r25, 0xFF	; 255
    117e:	83 30       	cpi	r24, 0x03	; 3
    1180:	91 05       	cpc	r25, r1
    1182:	8c f4       	brge	.+34     	; 0x11a6 <CheckPins+0xa30>
    1184:	a3 01       	movw	r20, r6
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = pgm_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	88 0f       	add	r24, r24
  adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
#endif
  if (adc.tp2 < adc.lp1) {
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
    118a:	84 b9       	out	0x04, r24	; 4
  adc.lp2 = W5msReadADC(LowPin);
    118c:	83 2d       	mov	r24, r3
    118e:	6e 8a       	std	Y+22, r6	; 0x16
    1190:	5b 8b       	std	Y+19, r21	; 0x13
    1192:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
    1196:	3c 01       	movw	r6, r24
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    1198:	4e 89       	ldd	r20, Y+22	; 0x16
    119a:	5b 89       	ldd	r21, Y+19	; 0x13
    119c:	84 e4       	ldi	r24, 0x44	; 68
    119e:	40 3c       	cpi	r20, 0xC0	; 192
    11a0:	58 07       	cpc	r21, r24
    11a2:	30 f0       	brcs	.+12     	; 0x11b0 <CheckPins+0xa3a>
    11a4:	0c c0       	rjmp	.+24     	; 0x11be <CheckPins+0xa48>
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     udiff = adc.lp1 - adc.lp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.lp2 = adc.lp1;
     wdt_reset();
    11a6:	a8 95       	wdr
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
  R_PORT = 0;
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    11a8:	2f 5f       	subi	r18, 0xFF	; 255
    11aa:	29 31       	cpi	r18, 0x19	; 25
    11ac:	b1 f6       	brne	.-84     	; 0x115a <CheckPins+0x9e4>
    11ae:	66 c1       	rjmp	.+716    	; 0x147c <CheckPins+0xd06>
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
  adc.lp2 = W5msReadADC(LowPin);
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    11b0:	95 e8       	ldi	r25, 0x85	; 133
    11b2:	e9 16       	cp	r14, r25
    11b4:	91 e0       	ldi	r25, 0x01	; 1
    11b6:	f9 06       	cpc	r15, r25
    11b8:	08 f0       	brcs	.+2      	; 0x11bc <CheckPins+0xa46>
    11ba:	60 c1       	rjmp	.+704    	; 0x147c <CheckPins+0xd06>
    11bc:	06 c0       	rjmp	.+12     	; 0x11ca <CheckPins+0xa54>
     lcd_data('F');
#endif
     goto testend; 
  }
//    if((adc.hp2 + (adc.hp2 / 61)) < adc.hp1)
  if (adc.hp2 < (4972*U_SCALE)) { 
    11be:	a0 eb       	ldi	r26, 0xB0	; 176
    11c0:	ea 16       	cp	r14, r26
    11c2:	ad e4       	ldi	r26, 0x4D	; 77
    11c4:	fa 06       	cpc	r15, r26
    11c6:	08 f0       	brcs	.+2      	; 0x11ca <CheckPins+0xa54>
    11c8:	59 c1       	rjmp	.+690    	; 0x147c <CheckPins+0xd06>
     // voltage breaks down with low test current and it is not nearly shorted  => resistor
//     if (adc.lp1 < 120) { // take measurement with R_H 
     if (adc.lp1 < (169*U_SCALE)) { // take measurement with R_H 
    11ca:	b4 ea       	ldi	r27, 0xA4	; 164
    11cc:	cb 16       	cp	r12, r27
    11ce:	b2 e0       	ldi	r27, 0x02	; 2
    11d0:	db 06       	cpc	r13, r27
    11d2:	08 f0       	brcs	.+2      	; 0x11d6 <CheckPins+0xa60>
    11d4:	72 c0       	rjmp	.+228    	; 0x12ba <CheckPins+0xb44>
        ii = 'H';
        if (adc.lp2 < (38*U_SCALE)) {
    11d6:	e8 e9       	ldi	r30, 0x98	; 152
    11d8:	6e 16       	cp	r6, r30
    11da:	71 04       	cpc	r7, r1
    11dc:	08 f4       	brcc	.+2      	; 0x11e0 <CheckPins+0xa6a>
    11de:	4e c1       	rjmp	.+668    	; 0x147c <CheckPins+0xd06>
           // measurement > 60MOhm to big resistance
           goto testend;
        }
        // two measurements with R_H resistors (470k) are made:
        // lirx1 (measurement at HighPin)
        lirx1 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)adc.hp2 / (ADCconfig.U_AVCC - adc.hp2);
    11e0:	80 90 40 01 	lds	r8, 0x0140
    11e4:	90 90 41 01 	lds	r9, 0x0141
    11e8:	b7 01       	movw	r22, r14
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	28 e9       	ldi	r18, 0x98	; 152
    11f0:	37 eb       	ldi	r19, 0xB7	; 183
    11f2:	40 e0       	ldi	r20, 0x00	; 0
    11f4:	50 e0       	ldi	r21, 0x00	; 0
    11f6:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
    11fa:	94 01       	movw	r18, r8
    11fc:	2e 19       	sub	r18, r14
    11fe:	3f 09       	sbc	r19, r15
    1200:	40 e0       	ldi	r20, 0x00	; 0
    1202:	50 e0       	ldi	r21, 0x00	; 0
    1204:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
    1208:	59 01       	movw	r10, r18
    120a:	6a 01       	movw	r12, r20
        // lirx2 (measurement at LowPin)
        lirx2 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)(ADCconfig.U_AVCC - adc.lp2) / adc.lp2;
    120c:	86 18       	sub	r8, r6
    120e:	97 08       	sbc	r9, r7
    1210:	b4 01       	movw	r22, r8
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	28 e9       	ldi	r18, 0x98	; 152
    1218:	37 eb       	ldi	r19, 0xB7	; 183
    121a:	40 e0       	ldi	r20, 0x00	; 0
    121c:	50 e0       	ldi	r21, 0x00	; 0
    121e:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
    1222:	93 01       	movw	r18, r6
    1224:	40 e0       	ldi	r20, 0x00	; 0
    1226:	50 e0       	ldi	r21, 0x00	; 0
    1228:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
#define FAKT_LOW 2		//resolution is about twice as good
#else
#define FAKT_LOW 4		//resolution is about four times better
#endif
#ifdef AUTOSCALE_ADC
        if (adc.hp2 < U_INT_LIMIT) {
    122c:	f8 e7       	ldi	r31, 0x78	; 120
    122e:	ef 16       	cp	r14, r31
    1230:	ff e0       	ldi	r31, 0x0F	; 15
    1232:	ff 06       	cpc	r15, r31
    1234:	70 f4       	brcc	.+28     	; 0x1252 <CheckPins+0xadc>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    1236:	c6 01       	movw	r24, r12
    1238:	b5 01       	movw	r22, r10
    123a:	b2 e0       	ldi	r27, 0x02	; 2
    123c:	66 0f       	add	r22, r22
    123e:	77 1f       	adc	r23, r23
    1240:	88 1f       	adc	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	ba 95       	dec	r27
    1246:	d1 f7       	brne	.-12     	; 0x123c <CheckPins+0xac6>
    1248:	62 0f       	add	r22, r18
    124a:	73 1f       	adc	r23, r19
    124c:	84 1f       	adc	r24, r20
    124e:	95 1f       	adc	r25, r21
    1250:	12 c0       	rjmp	.+36     	; 0x1276 <CheckPins+0xb00>
        } else if (adc.lp2 < U_INT_LIMIT){
    1252:	88 e7       	ldi	r24, 0x78	; 120
    1254:	68 16       	cp	r6, r24
    1256:	8f e0       	ldi	r24, 0x0F	; 15
    1258:	78 06       	cpc	r7, r24
    125a:	a0 f4       	brcc	.+40     	; 0x1284 <CheckPins+0xb0e>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    125c:	ca 01       	movw	r24, r20
    125e:	b9 01       	movw	r22, r18
    1260:	a2 e0       	ldi	r26, 0x02	; 2
    1262:	66 0f       	add	r22, r22
    1264:	77 1f       	adc	r23, r23
    1266:	88 1f       	adc	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	aa 95       	dec	r26
    126c:	d1 f7       	brne	.-12     	; 0x1262 <CheckPins+0xaec>
    126e:	6a 0d       	add	r22, r10
    1270:	7b 1d       	adc	r23, r11
    1272:	8c 1d       	adc	r24, r12
    1274:	9d 1d       	adc	r25, r13
    1276:	25 e0       	ldi	r18, 0x05	; 5
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	40 e0       	ldi	r20, 0x00	; 0
    127c:	50 e0       	ldi	r21, 0x00	; 0
    127e:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
    1282:	08 c0       	rjmp	.+16     	; 0x1294 <CheckPins+0xb1e>
        } else 
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_H measurements
    1284:	2a 0d       	add	r18, r10
    1286:	3b 1d       	adc	r19, r11
    1288:	4c 1d       	adc	r20, r12
    128a:	5d 1d       	adc	r21, r13
    128c:	56 95       	lsr	r21
    128e:	47 95       	ror	r20
    1290:	37 95       	ror	r19
    1292:	27 95       	ror	r18
        }
        lrx1 *= 100;
    1294:	ca 01       	movw	r24, r20
    1296:	b9 01       	movw	r22, r18
    1298:	24 e6       	ldi	r18, 0x64	; 100
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	40 e0       	ldi	r20, 0x00	; 0
    129e:	50 e0       	ldi	r21, 0x00	; 0
    12a0:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
    12a4:	6b 01       	movw	r12, r22
    12a6:	7c 01       	movw	r14, r24
        lrx1 += RH_OFFSET;			// add constant for correction of systematic error
    12a8:	8c ea       	ldi	r24, 0xAC	; 172
    12aa:	9d e0       	ldi	r25, 0x0D	; 13
    12ac:	a0 e0       	ldi	r26, 0x00	; 0
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	c8 0e       	add	r12, r24
    12b2:	d9 1e       	adc	r13, r25
    12b4:	ea 1e       	adc	r14, r26
    12b6:	fb 1e       	adc	r15, r27
    12b8:	78 c0       	rjmp	.+240    	; 0x13aa <CheckPins+0xc34>
    12ba:	80 2f       	mov	r24, r16
    12bc:	94 2d       	mov	r25, r4
    12be:	48 17       	cp	r20, r24
    12c0:	59 07       	cpc	r21, r25
    12c2:	08 f4       	brcc	.+2      	; 0x12c6 <CheckPins+0xb50>
    12c4:	ca 01       	movw	r24, r20
    12c6:	76 01       	movw	r14, r12
    12c8:	c8 14       	cp	r12, r8
    12ca:	d9 04       	cpc	r13, r9
    12cc:	08 f4       	brcc	.+2      	; 0x12d0 <CheckPins+0xb5a>
    12ce:	74 01       	movw	r14, r8
    12d0:	3c 01       	movw	r6, r24
    12d2:	84 17       	cp	r24, r20
    12d4:	95 07       	cpc	r25, r21
    12d6:	08 f4       	brcc	.+2      	; 0x12da <CheckPins+0xb64>
    12d8:	3a 01       	movw	r6, r20
        // two measurements with R_L resistors (680) are made:
        // lirx1 (measurement at HighPin)
        if (adc.tp1 > adc.hp1) {
           adc.hp1 = adc.tp1;		//diff negativ is illegal
        }
        lirx1 =(unsigned long)RR680PL * (unsigned long)(adc.hp1 - adc.tp1) / (ADCconfig.U_AVCC - adc.hp1);
    12da:	b3 01       	movw	r22, r6
    12dc:	68 1b       	sub	r22, r24
    12de:	79 0b       	sbc	r23, r25
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	20 91 08 01 	lds	r18, 0x0108
    12e8:	30 91 09 01 	lds	r19, 0x0109
    12ec:	40 e0       	ldi	r20, 0x00	; 0
    12ee:	50 e0       	ldi	r21, 0x00	; 0
    12f0:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
    12f4:	20 91 40 01 	lds	r18, 0x0140
    12f8:	30 91 41 01 	lds	r19, 0x0141
    12fc:	26 19       	sub	r18, r6
    12fe:	37 09       	sbc	r19, r7
    1300:	40 e0       	ldi	r20, 0x00	; 0
    1302:	50 e0       	ldi	r21, 0x00	; 0
    1304:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
    1308:	49 01       	movw	r8, r18
    130a:	5a 01       	movw	r10, r20
    130c:	27 01       	movw	r4, r14
    130e:	ce 14       	cp	r12, r14
    1310:	df 04       	cpc	r13, r15
    1312:	08 f4       	brcc	.+2      	; 0x1316 <CheckPins+0xba0>
    1314:	26 01       	movw	r4, r12
        if (adc.tp2 < adc.lp1) {
           adc.lp1 = adc.tp2;		//diff negativ is illegal
        }
        // lirx2 (Measurement at LowPin)
        lirx2 =(unsigned long)RR680MI * (unsigned long)(adc.tp2 -adc.lp1) / adc.lp1;
    1316:	e4 18       	sub	r14, r4
    1318:	f5 08       	sbc	r15, r5
    131a:	b7 01       	movw	r22, r14
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	20 91 02 01 	lds	r18, 0x0102
    1324:	30 91 03 01 	lds	r19, 0x0103
    1328:	40 e0       	ldi	r20, 0x00	; 0
    132a:	50 e0       	ldi	r21, 0x00	; 0
    132c:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
    1330:	92 01       	movw	r18, r4
    1332:	40 e0       	ldi	r20, 0x00	; 0
    1334:	50 e0       	ldi	r21, 0x00	; 0
    1336:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
//     lrx1 =(unsigned long)R_L_VAL * (unsigned long)adc.hp1 / (adc.hp3 - adc.hp1);

#ifdef AUTOSCALE_ADC
        if (adc.hp1 < U_INT_LIMIT) {
    133a:	98 e7       	ldi	r25, 0x78	; 120
    133c:	69 16       	cp	r6, r25
    133e:	9f e0       	ldi	r25, 0x0F	; 15
    1340:	79 06       	cpc	r7, r25
    1342:	70 f4       	brcc	.+28     	; 0x1360 <CheckPins+0xbea>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    1344:	c5 01       	movw	r24, r10
    1346:	b4 01       	movw	r22, r8
    1348:	e2 e0       	ldi	r30, 0x02	; 2
    134a:	66 0f       	add	r22, r22
    134c:	77 1f       	adc	r23, r23
    134e:	88 1f       	adc	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	ea 95       	dec	r30
    1354:	d1 f7       	brne	.-12     	; 0x134a <CheckPins+0xbd4>
    1356:	62 0f       	add	r22, r18
    1358:	73 1f       	adc	r23, r19
    135a:	84 1f       	adc	r24, r20
    135c:	95 1f       	adc	r25, r21
    135e:	12 c0       	rjmp	.+36     	; 0x1384 <CheckPins+0xc0e>
        } else if (adc.lp1 < U_INT_LIMIT) {
    1360:	a8 e7       	ldi	r26, 0x78	; 120
    1362:	4a 16       	cp	r4, r26
    1364:	af e0       	ldi	r26, 0x0F	; 15
    1366:	5a 06       	cpc	r5, r26
    1368:	b0 f4       	brcc	.+44     	; 0x1396 <CheckPins+0xc20>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    136a:	ca 01       	movw	r24, r20
    136c:	b9 01       	movw	r22, r18
    136e:	22 e0       	ldi	r18, 0x02	; 2
    1370:	66 0f       	add	r22, r22
    1372:	77 1f       	adc	r23, r23
    1374:	88 1f       	adc	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	2a 95       	dec	r18
    137a:	d1 f7       	brne	.-12     	; 0x1370 <CheckPins+0xbfa>
    137c:	68 0d       	add	r22, r8
    137e:	79 1d       	adc	r23, r9
    1380:	8a 1d       	adc	r24, r10
    1382:	9b 1d       	adc	r25, r11
    1384:	25 e0       	ldi	r18, 0x05	; 5
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	40 e0       	ldi	r20, 0x00	; 0
    138a:	50 e0       	ldi	r21, 0x00	; 0
    138c:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
    1390:	69 01       	movw	r12, r18
    1392:	7a 01       	movw	r14, r20
    1394:	0a c0       	rjmp	.+20     	; 0x13aa <CheckPins+0xc34>
        } else
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_L measurements
    1396:	69 01       	movw	r12, r18
    1398:	7a 01       	movw	r14, r20
    139a:	c8 0c       	add	r12, r8
    139c:	d9 1c       	adc	r13, r9
    139e:	ea 1c       	adc	r14, r10
    13a0:	fb 1c       	adc	r15, r11
    13a2:	f6 94       	lsr	r15
    13a4:	e7 94       	ror	r14
    13a6:	d7 94       	ror	r13
    13a8:	c7 94       	ror	r12
  lcd_line4();
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
    13aa:	80 91 07 01 	lds	r24, 0x0107
    13ae:	82 30       	cpi	r24, 0x02	; 2
    13b0:	18 f0       	brcs	.+6      	; 0x13b8 <CheckPins+0xc42>
    13b2:	86 30       	cpi	r24, 0x06	; 6
    13b4:	09 f0       	breq	.+2      	; 0x13b8 <CheckPins+0xc42>
    13b6:	62 c0       	rjmp	.+196    	; 0x147c <CheckPins+0xd06>
        for (ii=0; ii<ResistorsFound; ii++) {
    13b8:	30 91 5e 01 	lds	r19, 0x015E
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	40 c0       	rjmp	.+128    	; 0x1440 <CheckPins+0xcca>
           // search measurements with inverse polarity 
           thisR = &resis[ii];
    13c0:	82 2f       	mov	r24, r18
    13c2:	90 e0       	ldi	r25, 0x00	; 0
           if (thisR->rt != TristatePin) {
    13c4:	fc 01       	movw	r30, r24
    13c6:	ee 0f       	add	r30, r30
    13c8:	ff 1f       	adc	r31, r31
    13ca:	e8 0f       	add	r30, r24
    13cc:	f9 1f       	adc	r31, r25
    13ce:	ee 0f       	add	r30, r30
    13d0:	ff 1f       	adc	r31, r31
    13d2:	ee 0f       	add	r30, r30
    13d4:	ff 1f       	adc	r31, r31
    13d6:	e8 5e       	subi	r30, 0xE8	; 232
    13d8:	fe 4f       	sbci	r31, 0xFE	; 254
    13da:	83 85       	ldd	r24, Z+11	; 0x0b
    13dc:	82 15       	cp	r24, r2
    13de:	11 f0       	breq	.+4      	; 0x13e4 <CheckPins+0xc6e>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    13e0:	2f 5f       	subi	r18, 0xFF	; 255
    13e2:	2e c0       	rjmp	.+92     	; 0x1440 <CheckPins+0xcca>
           if (thisR->rt != TristatePin) {
              continue;
           }
           // must be measurement with inverse polarity 
           // resolution is 0.1 Ohm, 1 Ohm = 10 !
           lirx1 = (labs((long)lrx1 - (long)thisR->rx) * 10) / (lrx1 + thisR->rx + 100);
    13e4:	80 80       	ld	r8, Z
    13e6:	91 80       	ldd	r9, Z+1	; 0x01
    13e8:	a2 80       	ldd	r10, Z+2	; 0x02
    13ea:	b3 80       	ldd	r11, Z+3	; 0x03
    13ec:	c7 01       	movw	r24, r14
    13ee:	b6 01       	movw	r22, r12
    13f0:	68 19       	sub	r22, r8
    13f2:	79 09       	sbc	r23, r9
    13f4:	8a 09       	sbc	r24, r10
    13f6:	9b 09       	sbc	r25, r11
    13f8:	97 ff       	sbrs	r25, 7
    13fa:	07 c0       	rjmp	.+14     	; 0x140a <CheckPins+0xc94>
    13fc:	90 95       	com	r25
    13fe:	80 95       	com	r24
    1400:	70 95       	com	r23
    1402:	61 95       	neg	r22
    1404:	7f 4f       	sbci	r23, 0xFF	; 255
    1406:	8f 4f       	sbci	r24, 0xFF	; 255
    1408:	9f 4f       	sbci	r25, 0xFF	; 255
    140a:	2a e0       	ldi	r18, 0x0A	; 10
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	40 e0       	ldi	r20, 0x00	; 0
    1410:	50 e0       	ldi	r21, 0x00	; 0
    1412:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
    1416:	a5 01       	movw	r20, r10
    1418:	94 01       	movw	r18, r8
    141a:	2c 59       	subi	r18, 0x9C	; 156
    141c:	3f 4f       	sbci	r19, 0xFF	; 255
    141e:	4f 4f       	sbci	r20, 0xFF	; 255
    1420:	5f 4f       	sbci	r21, 0xFF	; 255
    1422:	2c 0d       	add	r18, r12
    1424:	3d 1d       	adc	r19, r13
    1426:	4e 1d       	adc	r20, r14
    1428:	5f 1d       	adc	r21, r15
    142a:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
           if (lirx1  > 0) {
    142e:	21 15       	cp	r18, r1
    1430:	31 05       	cpc	r19, r1
    1432:	41 05       	cpc	r20, r1
    1434:	51 05       	cpc	r21, r1
    1436:	11 f5       	brne	.+68     	; 0x147c <CheckPins+0xd06>
              DisplayValue(lirx1,-1,LCD_CHAR_OMEGA,3)
              lcd_space();
#endif
              goto testend; // <10% mismatch
           }
           PartFound = PART_RESISTOR;
    1438:	86 e0       	ldi	r24, 0x06	; 6
    143a:	80 93 07 01 	sts	0x0107, r24
           goto testend;
    143e:	1e c0       	rjmp	.+60     	; 0x147c <CheckPins+0xd06>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    1440:	23 17       	cp	r18, r19
    1442:	08 f4       	brcc	.+2      	; 0x1446 <CheckPins+0xcd0>
    1444:	bd cf       	rjmp	.-134    	; 0x13c0 <CheckPins+0xc4a>
           }
           PartFound = PART_RESISTOR;
           goto testend;
        } // end for
        // no same resistor with the same Tristate-Pin found, new one
        thisR = &resis[ResistorsFound];		// pointer to a free resistor structure
    1446:	83 2f       	mov	r24, r19
    1448:	90 e0       	ldi	r25, 0x00	; 0
        thisR->rx = lrx1;		// save resistor value
    144a:	fc 01       	movw	r30, r24
    144c:	ee 0f       	add	r30, r30
    144e:	ff 1f       	adc	r31, r31
    1450:	e8 0f       	add	r30, r24
    1452:	f9 1f       	adc	r31, r25
    1454:	ee 0f       	add	r30, r30
    1456:	ff 1f       	adc	r31, r31
    1458:	ee 0f       	add	r30, r30
    145a:	ff 1f       	adc	r31, r31
    145c:	e8 5e       	subi	r30, 0xE8	; 232
    145e:	fe 4f       	sbci	r31, 0xFE	; 254
    1460:	c0 82       	st	Z, r12
    1462:	d1 82       	std	Z+1, r13	; 0x01
    1464:	e2 82       	std	Z+2, r14	; 0x02
    1466:	f3 82       	std	Z+3, r15	; 0x03
#if FLASHEND > 0x1fff
        thisR->lx = 0;			// no inductance
    1468:	14 82       	std	Z+4, r1	; 0x04
    146a:	15 82       	std	Z+5, r1	; 0x05
    146c:	16 82       	std	Z+6, r1	; 0x06
    146e:	17 82       	std	Z+7, r1	; 0x07
#endif
        thisR->ra = LowPin;		// save Pin numbers
    1470:	31 86       	std	Z+9, r3	; 0x09
        thisR->rb = HighPin;
    1472:	12 87       	std	Z+10, r17	; 0x0a
        thisR->rt = TristatePin;	// Tristate is saved for easier search of inverse measurement
    1474:	23 86       	std	Z+11, r2	; 0x0b
        ResistorsFound++;			// 1 more resistor found
    1476:	3f 5f       	subi	r19, 0xFF	; 255
    1478:	30 93 5e 01 	sts	0x015E, r19
#endif
     }
  }
  testend:
#if U_SCALE != 1
  ADCconfig.U_AVCC /= U_SCALE;		// scale back to mV resolution
    147c:	80 91 40 01 	lds	r24, 0x0140
    1480:	90 91 41 01 	lds	r25, 0x0141
    1484:	96 95       	lsr	r25
    1486:	87 95       	ror	r24
    1488:	96 95       	lsr	r25
    148a:	87 95       	ror	r24
    148c:	90 93 41 01 	sts	0x0141, r25
    1490:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.U_Bandgap /= U_SCALE;
    1494:	80 91 3e 01 	lds	r24, 0x013E
    1498:	90 91 3f 01 	lds	r25, 0x013F
    149c:	96 95       	lsr	r25
    149e:	87 95       	ror	r24
    14a0:	96 95       	lsr	r25
    14a2:	87 95       	ror	r24
    14a4:	90 93 3f 01 	sts	0x013F, r25
    14a8:	80 93 3e 01 	sts	0x013E, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = ANZ_MESS;		// switch back to standard number of repetition
    14ac:	89 e1       	ldi	r24, 0x19	; 25
    14ae:	80 93 3c 01 	sts	0x013C, r24
#if DebugOut < 10
  wait_about2s();
#endif
#endif
 clean_ports:
  ADC_DDR = TXD_MSK;		// all ADC-Pins Input
    14b2:	88 e0       	ldi	r24, 0x08	; 8
    14b4:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// all ADC outputs to Ground, keine Pull up
    14b6:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// all resistor-outputs to Input
    14b8:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// all resistor-outputs to Ground, no Pull up
    14ba:	15 b8       	out	0x05, r1	; 5
} // end CheckPins()
    14bc:	66 96       	adiw	r28, 0x16	; 22
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	1f 91       	pop	r17
    14ce:	0f 91       	pop	r16
    14d0:	ff 90       	pop	r15
    14d2:	ef 90       	pop	r14
    14d4:	df 90       	pop	r13
    14d6:	cf 90       	pop	r12
    14d8:	bf 90       	pop	r11
    14da:	af 90       	pop	r10
    14dc:	9f 90       	pop	r9
    14de:	8f 90       	pop	r8
    14e0:	7f 90       	pop	r7
    14e2:	6f 90       	pop	r6
    14e4:	5f 90       	pop	r5
    14e6:	4f 90       	pop	r4
    14e8:	3f 90       	pop	r3
    14ea:	2f 90       	pop	r2
    14ec:	08 95       	ret

000014ee <PinLayout>:
TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
}
#endif

// show the Pin Layout of the device 
void PinLayout(char pin1, char pin2, char pin3) {
    14ee:	ff 92       	push	r15
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	18 2f       	mov	r17, r24
    14f6:	06 2f       	mov	r16, r22
    14f8:	f4 2e       	mov	r15, r20
// pin1-3 is EBC or SGD or CGA
#ifndef EBC_STYLE
   // Layout with 123= style
   lcd_fix_string(N123_str);		//" 123="
    14fa:	80 e1       	ldi	r24, 0x10	; 16
    14fc:	91 e0       	ldi	r25, 0x01	; 1
    14fe:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
   for (ii=0;ii<3;ii++) {
    1502:	10 92 4b 01 	sts	0x014B, r1
    1506:	1e c0       	rjmp	.+60     	; 0x1544 <PinLayout+0x56>
       if (ii == trans.e)  lcd_data(pin1);	// Output Character in right order
    1508:	90 91 5d 01 	lds	r25, 0x015D
    150c:	89 17       	cp	r24, r25
    150e:	19 f4       	brne	.+6      	; 0x1516 <PinLayout+0x28>
    1510:	81 2f       	mov	r24, r17
    1512:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
       if (ii == trans.b)  lcd_data(pin2);
    1516:	90 91 4b 01 	lds	r25, 0x014B
    151a:	80 91 5b 01 	lds	r24, 0x015B
    151e:	98 17       	cp	r25, r24
    1520:	19 f4       	brne	.+6      	; 0x1528 <PinLayout+0x3a>
    1522:	80 2f       	mov	r24, r16
    1524:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
       if (ii == trans.c)  lcd_data(pin3);
    1528:	90 91 4b 01 	lds	r25, 0x014B
    152c:	80 91 5c 01 	lds	r24, 0x015C
    1530:	98 17       	cp	r25, r24
    1532:	19 f4       	brne	.+6      	; 0x153a <PinLayout+0x4c>
    1534:	8f 2d       	mov	r24, r15
    1536:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
void PinLayout(char pin1, char pin2, char pin3) {
// pin1-3 is EBC or SGD or CGA
#ifndef EBC_STYLE
   // Layout with 123= style
   lcd_fix_string(N123_str);		//" 123="
   for (ii=0;ii<3;ii++) {
    153a:	80 91 4b 01 	lds	r24, 0x014B
    153e:	8f 5f       	subi	r24, 0xFF	; 255
    1540:	80 93 4b 01 	sts	0x014B, r24
    1544:	80 91 4b 01 	lds	r24, 0x014B
    1548:	83 30       	cpi	r24, 0x03	; 3
    154a:	f0 f2       	brcs	.-68     	; 0x1508 <PinLayout+0x1a>
   lcd_testpin(trans.e);
   lcd_testpin(trans.b);
   lcd_testpin(trans.c);
 #endif
#endif
}
    154c:	1f 91       	pop	r17
    154e:	0f 91       	pop	r16
    1550:	ff 90       	pop	r15
    1552:	08 95       	ret

00001554 <AutoCheck>:
void AutoCheck(void) {
    1554:	2f 92       	push	r2
    1556:	3f 92       	push	r3
    1558:	4f 92       	push	r4
    155a:	5f 92       	push	r5
    155c:	6f 92       	push	r6
    155e:	7f 92       	push	r7
    1560:	8f 92       	push	r8
    1562:	9f 92       	push	r9
    1564:	af 92       	push	r10
    1566:	bf 92       	push	r11
    1568:	cf 92       	push	r12
    156a:	df 92       	push	r13
    156c:	ef 92       	push	r14
    156e:	ff 92       	push	r15
    1570:	0f 93       	push	r16
    1572:	1f 93       	push	r17
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	2e 97       	sbiw	r28, 0x0e	; 14
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	de bf       	out	0x3e, r29	; 62
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	cd bf       	out	0x3d, r28	; 61
  #ifdef AUTOSCALE_ADC
  int8_t udiff;		// difference between ADC Voltage with VCC or Bandgap reference
  int8_t udiff2;
  #endif
 #endif
  ADC_PORT = TXD_VAL;
    1588:	88 e0       	ldi	r24, 0x08	; 8
    158a:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = TXD_MSK;
    158c:	87 b9       	out	0x07, r24	; 7
  R_PORT = (1<<(TP1*2));		//Pin 1 over RL to +
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	85 b9       	out	0x05, r24	; 5
  R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//Pin 2 over RL to -
    1592:	85 e0       	ldi	r24, 0x05	; 5
    1594:	84 b9       	out	0x04, r24	; 4
  adcmv[0] = W5msReadADC(PC0);		// voltage at Pin 1
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
    159c:	8c 01       	movw	r16, r24
    159e:	9a 83       	std	Y+2, r25	; 0x02
    15a0:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = ReadADC(PC1);		// voltage at Pin 2
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
    15a8:	7c 01       	movw	r14, r24
    15aa:	9c 83       	std	Y+4, r25	; 0x04
    15ac:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = ReadADC(PC2);		// voltage at Pin 3
    15ae:	82 e0       	ldi	r24, 0x02	; 2
    15b0:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
    15b4:	9c 01       	movw	r18, r24
    15b6:	9e 83       	std	Y+6, r25	; 0x06
    15b8:	8d 83       	std	Y+5, r24	; 0x05
  if (abs((int)(adcmv[1] - adcmv[0])) > 20) {
    15ba:	e0 1a       	sub	r14, r16
    15bc:	f1 0a       	sbc	r15, r17
    15be:	f7 fe       	sbrs	r15, 7
    15c0:	04 c0       	rjmp	.+8      	; 0x15ca <AutoCheck+0x76>
    15c2:	f0 94       	com	r15
    15c4:	e1 94       	neg	r14
    15c6:	f1 08       	sbc	r15, r1
    15c8:	f3 94       	inc	r15
    15ca:	85 e1       	ldi	r24, 0x15	; 21
    15cc:	e8 16       	cp	r14, r24
    15ce:	f1 04       	cpc	r15, r1
    15d0:	0c f0       	brlt	.+2      	; 0x15d4 <AutoCheck+0x80>
    15d2:	d2 c3       	rjmp	.+1956   	; 0x1d78 <AutoCheck+0x824>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[2] - adcmv[0])) > 20) {
    15d4:	20 1b       	sub	r18, r16
    15d6:	31 0b       	sbc	r19, r17
    15d8:	37 ff       	sbrs	r19, 7
    15da:	03 c0       	rjmp	.+6      	; 0x15e2 <AutoCheck+0x8e>
    15dc:	30 95       	com	r19
    15de:	21 95       	neg	r18
    15e0:	3f 4f       	sbci	r19, 0xFF	; 255
    15e2:	25 31       	cpi	r18, 0x15	; 21
    15e4:	31 05       	cpc	r19, r1
    15e6:	0c f0       	brlt	.+2      	; 0x15ea <AutoCheck+0x96>
    15e8:	c7 c3       	rjmp	.+1934   	; 0x1d78 <AutoCheck+0x824>
     return;				//difference to big, no selftest
  }
  if (abs((int)((adcmv[0]*2) - ADCconfig.U_AVCC)) > 60) {
    15ea:	00 0f       	add	r16, r16
    15ec:	11 1f       	adc	r17, r17
    15ee:	80 91 40 01 	lds	r24, 0x0140
    15f2:	90 91 41 01 	lds	r25, 0x0141
    15f6:	08 1b       	sub	r16, r24
    15f8:	19 0b       	sbc	r17, r25
    15fa:	17 ff       	sbrs	r17, 7
    15fc:	03 c0       	rjmp	.+6      	; 0x1604 <AutoCheck+0xb0>
    15fe:	10 95       	com	r17
    1600:	01 95       	neg	r16
    1602:	1f 4f       	sbci	r17, 0xFF	; 255
    1604:	0d 33       	cpi	r16, 0x3D	; 61
    1606:	11 05       	cpc	r17, r1
    1608:	0c f0       	brlt	.+2      	; 0x160c <AutoCheck+0xb8>
    160a:	b6 c3       	rjmp	.+1900   	; 0x1d78 <AutoCheck+0x824>
     return;				//difference to big, no selftest
  }
  R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//Pin 3 over RL to - (Pin 1 over RL to +)
    160c:	81 e1       	ldi	r24, 0x11	; 17
    160e:	84 b9       	out	0x04, r24	; 4
  adcmv[0] = W5msReadADC(PC0);		// voltage at Pin 1
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
    1616:	8c 01       	movw	r16, r24
    1618:	9a 83       	std	Y+2, r25	; 0x02
    161a:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = ReadADC(PC1);		// voltage at Pin 2
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
    1622:	7c 01       	movw	r14, r24
    1624:	9c 83       	std	Y+4, r25	; 0x04
    1626:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = ReadADC(PC2);		// voltage at Pin 3
    1628:	82 e0       	ldi	r24, 0x02	; 2
    162a:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
    162e:	9c 01       	movw	r18, r24
    1630:	9e 83       	std	Y+6, r25	; 0x06
    1632:	8d 83       	std	Y+5, r24	; 0x05
  if (abs((int)(adcmv[1] - adcmv[0])) > 20) {
    1634:	e0 1a       	sub	r14, r16
    1636:	f1 0a       	sbc	r15, r17
    1638:	f7 fe       	sbrs	r15, 7
    163a:	04 c0       	rjmp	.+8      	; 0x1644 <AutoCheck+0xf0>
    163c:	f0 94       	com	r15
    163e:	e1 94       	neg	r14
    1640:	f1 08       	sbc	r15, r1
    1642:	f3 94       	inc	r15
    1644:	e5 e1       	ldi	r30, 0x15	; 21
    1646:	ee 16       	cp	r14, r30
    1648:	f1 04       	cpc	r15, r1
    164a:	0c f0       	brlt	.+2      	; 0x164e <AutoCheck+0xfa>
    164c:	95 c3       	rjmp	.+1834   	; 0x1d78 <AutoCheck+0x824>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[2] - adcmv[0])) > 20) {
    164e:	20 1b       	sub	r18, r16
    1650:	31 0b       	sbc	r19, r17
    1652:	37 ff       	sbrs	r19, 7
    1654:	03 c0       	rjmp	.+6      	; 0x165c <AutoCheck+0x108>
    1656:	30 95       	com	r19
    1658:	21 95       	neg	r18
    165a:	3f 4f       	sbci	r19, 0xFF	; 255
    165c:	25 31       	cpi	r18, 0x15	; 21
    165e:	31 05       	cpc	r19, r1
    1660:	0c f0       	brlt	.+2      	; 0x1664 <AutoCheck+0x110>
    1662:	8a c3       	rjmp	.+1812   	; 0x1d78 <AutoCheck+0x824>
     return;				//difference to big, no selftest
  }
  if (abs((int)((adcmv[0]*2) - ADCconfig.U_AVCC)) > 60) {
    1664:	00 0f       	add	r16, r16
    1666:	11 1f       	adc	r17, r17
    1668:	80 91 40 01 	lds	r24, 0x0140
    166c:	90 91 41 01 	lds	r25, 0x0141
    1670:	08 1b       	sub	r16, r24
    1672:	19 0b       	sbc	r17, r25
    1674:	17 ff       	sbrs	r17, 7
    1676:	03 c0       	rjmp	.+6      	; 0x167e <AutoCheck+0x12a>
    1678:	10 95       	com	r17
    167a:	01 95       	neg	r16
    167c:	1f 4f       	sbci	r17, 0xFF	; 255
    167e:	0d 33       	cpi	r16, 0x3D	; 61
    1680:	11 05       	cpc	r17, r1
    1682:	0c f0       	brlt	.+2      	; 0x1686 <AutoCheck+0x132>
    1684:	79 c3       	rjmp	.+1778   	; 0x1d78 <AutoCheck+0x824>
     return;				//difference to big, no selftest
  }
  lcd_clear();
    1686:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_clear>
  lcd_fix_string(SELFTEST);		// "Selftest mode.."
    168a:	85 ec       	ldi	r24, 0xC5	; 197
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
  wait_about1s();
    1692:	88 ec       	ldi	r24, 0xC8	; 200
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>
    169a:	66 24       	eor	r6, r6
    169c:	77 24       	eor	r7, r7
 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    169e:	11 e0       	ldi	r17, 0x01	; 1
           adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
           lcd_fix_string(RH1H);	// "RH_Hi="
        }
        if (tt == 7) { // can we switch the ADC pins to VCC across the R_H resistor?
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_H_VAL*100));
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    16a0:	62 e0       	ldi	r22, 0x02	; 2
    16a2:	f6 2e       	mov	r15, r22
           R_DDR = (2<<(TP1*2)) | (1<<(TP1*2));	//RH1 to +, RL1 to -
           adcmv[0] = W20msReadADC(TP1);
           adcmv[0] -= u680;
           R_PORT = 2<<(TP2*2);		//RH2 to VCC
    16a4:	58 e0       	ldi	r21, 0x08	; 8
    16a6:	e5 2e       	mov	r14, r21
           R_DDR = (2<<(TP2*2)) | (1<<(TP2*2));	//RH2 to +, RL2 to -
           adcmv[1] = W20msReadADC(TP2);
           adcmv[1] -= u680;
           R_PORT = 2<<(TP3*2);		//RH3 to VCC
    16a8:	40 e2       	ldi	r20, 0x20	; 32
    16aa:	a4 2e       	mov	r10, r20
           R_DDR = (2<<(TP3*2)) | (1<<(TP3*2));	//RH3 to +, RL3 to -
    16ac:	30 e3       	ldi	r19, 0x30	; 48
    16ae:	d3 2e       	mov	r13, r19
    16b0:	6e c1       	rjmp	.+732    	; 0x198e <AutoCheck+0x43a>
  wait_about1s();
 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
        lcd_line2();			//Cursor to column 1, row 2
    16b2:	80 ec       	ldi	r24, 0xC0	; 192
    16b4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
        lcd_clear_line();		// clear total line
    16b8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    16bc:	80 e8       	ldi	r24, 0x80	; 128
    16be:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
        lcd_clear_line();		// clear total line
    16c2:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    16c6:	80 e8       	ldi	r24, 0x80	; 128
    16c8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
        lcd_data('T');			//output the Testmode "T"
    16cc:	84 e5       	ldi	r24, 0x54	; 84
    16ce:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
        lcd_string(utoa(tt, outval, 10));	//output Test number
    16d2:	c3 01       	movw	r24, r6
    16d4:	6c e0       	ldi	r22, 0x0C	; 12
    16d6:	71 e0       	ldi	r23, 0x01	; 1
    16d8:	4a e0       	ldi	r20, 0x0A	; 10
    16da:	50 e0       	ldi	r21, 0x00	; 0
    16dc:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <utoa>
    16e0:	0e 94 20 01 	call	0x240	; 0x240 <lcd_string>
        lcd_space();
    16e4:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_space>
                                        //############################################
        if (tt == 1) {   // output of reference voltage and factors for capacity measurement
    16e8:	fc 2d       	mov	r31, r12
    16ea:	f1 30       	cpi	r31, 0x01	; 1
    16ec:	41 f5       	brne	.+80     	; 0x173e <AutoCheck+0x1ea>
           Calibrate_UR();		// get Reference voltage, Pin resistance
    16ee:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <Calibrate_UR>
           lcd_fix2_string(URefT);	//"URef="
    16f2:	88 ed       	ldi	r24, 0xD8	; 216
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	0e 94 34 01 	call	0x268	; 0x268 <lcd_pgm_string>
           DisplayValue(ref_mv,-3,'V',4);
    16fa:	60 91 44 01 	lds	r22, 0x0144
    16fe:	70 91 45 01 	lds	r23, 0x0145
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	4d ef       	ldi	r20, 0xFD	; 253
    1708:	26 e5       	ldi	r18, 0x56	; 86
    170a:	04 e0       	ldi	r16, 0x04	; 4
    170c:	0e 94 81 02 	call	0x502	; 0x502 <DisplayValue>
           lcd_line2();			//Cursor to column 1, row 2
    1710:	80 ec       	ldi	r24, 0xC0	; 192
    1712:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
           lcd_fix2_string(RHfakt);	//"RHf="
    1716:	8d ed       	ldi	r24, 0xDD	; 221
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	0e 94 34 01 	call	0x268	; 0x268 <lcd_pgm_string>
           lcd_string(utoa(RHmultip, outval, 10));
    171e:	80 91 00 01 	lds	r24, 0x0100
    1722:	90 91 01 01 	lds	r25, 0x0101
    1726:	6c e0       	ldi	r22, 0x0C	; 12
    1728:	71 e0       	ldi	r23, 0x01	; 1
    172a:	4a e0       	ldi	r20, 0x0A	; 10
    172c:	50 e0       	ldi	r21, 0x00	; 0
    172e:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <utoa>
    1732:	0e 94 20 01 	call	0x240	; 0x240 <lcd_string>
           ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    1736:	8e eb       	ldi	r24, 0xBE	; 190
    1738:	80 93 3c 01 	sts	0x013C, r24
    173c:	0b c1       	rjmp	.+534    	; 0x1954 <AutoCheck+0x400>
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
    173e:	2c 2d       	mov	r18, r12
    1740:	22 30       	cpi	r18, 0x02	; 2
    1742:	99 f5       	brne	.+102    	; 0x17aa <AutoCheck+0x256>
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1744:	60 91 40 01 	lds	r22, 0x0140
    1748:	70 91 41 01 	lds	r23, 0x0141
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	2e e4       	ldi	r18, 0x4E	; 78
    1752:	3b e1       	ldi	r19, 0x1B	; 27
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	50 e0       	ldi	r21, 0x00	; 0
    1758:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
    175c:	a2 01       	movw	r20, r4
    175e:	91 01       	movw	r18, r2
    1760:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <__divmodsi4>
    1764:	89 01       	movw	r16, r18
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	85 b9       	out	0x05, r24	; 5
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
    176a:	85 e0       	ldi	r24, 0x05	; 5
    176c:	84 b9       	out	0x04, r24	; 4
           adcmv[0] = W20msReadADC(TP1);
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	0e 94 a8 1a 	call	0x3550	; 0x3550 <W20msReadADC>
           adcmv[0] -= u680;
    1774:	80 1b       	sub	r24, r16
    1776:	91 0b       	sbc	r25, r17
    1778:	9a 83       	std	Y+2, r25	; 0x02
    177a:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//RL3 to -
    177c:	e1 e1       	ldi	r30, 0x11	; 17
    177e:	e4 b9       	out	0x04, r30	; 4
           adcmv[1] = W20msReadADC(TP1);
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	0e 94 a8 1a 	call	0x3550	; 0x3550 <W20msReadADC>
           adcmv[1] -= u680;
    1786:	80 1b       	sub	r24, r16
    1788:	91 0b       	sbc	r25, r17
    178a:	9c 83       	std	Y+4, r25	; 0x04
    178c:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 1<<(TP2*2);		//RL2 to VCC
    178e:	f4 e0       	ldi	r31, 0x04	; 4
    1790:	f5 b9       	out	0x05, r31	; 5
           R_DDR = (1<<(TP2*2)) | (1<<(TP3*2));	//RL3 to -
    1792:	24 e1       	ldi	r18, 0x14	; 20
    1794:	24 b9       	out	0x04, r18	; 4
           adcmv[2] = W20msReadADC(TP2);
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	0e 94 a8 1a 	call	0x3550	; 0x3550 <W20msReadADC>
           adcmv[2] -= u680;
    179c:	80 1b       	sub	r24, r16
    179e:	91 0b       	sbc	r25, r17
    17a0:	9e 83       	std	Y+6, r25	; 0x06
    17a2:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RLRL);	// "RLRL"
    17a4:	8d e6       	ldi	r24, 0x6D	; 109
    17a6:	91 e0       	ldi	r25, 0x01	; 1
    17a8:	74 c0       	rjmp	.+232    	; 0x1892 <AutoCheck+0x33e>
        }
                                        //############################################
        if (tt == 3) { // how equal are the RH resistors
    17aa:	8c 2d       	mov	r24, r12
    17ac:	83 30       	cpi	r24, 0x03	; 3
    17ae:	31 f5       	brne	.+76     	; 0x17fc <AutoCheck+0x2a8>
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    17b0:	f5 b8       	out	0x05, r15	; 5
           R_DDR = (2<<(TP1*2)) | (2<<(TP2*2));	//RH2 to -
    17b2:	94 b8       	out	0x04, r9	; 4
           adcmv[0] = W20msReadADC(TP1);
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	0e 94 a8 1a 	call	0x3550	; 0x3550 <W20msReadADC>
           adcmv[3] = ADCconfig.U_AVCC / 2;
    17ba:	00 91 40 01 	lds	r16, 0x0140
    17be:	10 91 41 01 	lds	r17, 0x0141
    17c2:	16 95       	lsr	r17
    17c4:	07 95       	ror	r16
    17c6:	18 87       	std	Y+8, r17	; 0x08
    17c8:	0f 83       	std	Y+7, r16	; 0x07
           adcmv[0] -= adcmv[3];
    17ca:	80 1b       	sub	r24, r16
    17cc:	91 0b       	sbc	r25, r17
    17ce:	9a 83       	std	Y+2, r25	; 0x02
    17d0:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (2<<(TP1*2)) | (2<<(TP3*2));	//RH3 to -
    17d2:	84 b8       	out	0x04, r8	; 4
           adcmv[1] = W20msReadADC(TP1);
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	0e 94 a8 1a 	call	0x3550	; 0x3550 <W20msReadADC>
           adcmv[1] -= adcmv[3];
    17da:	80 1b       	sub	r24, r16
    17dc:	91 0b       	sbc	r25, r17
    17de:	9c 83       	std	Y+4, r25	; 0x04
    17e0:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 2<<(TP2*2);		//RL2 to VCC
    17e2:	e5 b8       	out	0x05, r14	; 5
           R_DDR = (2<<(TP2*2)) | (2<<(TP3*2));	//RH3 to -
    17e4:	e8 e2       	ldi	r30, 0x28	; 40
    17e6:	e4 b9       	out	0x04, r30	; 4
           adcmv[2] = W20msReadADC(TP2);
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	0e 94 a8 1a 	call	0x3550	; 0x3550 <W20msReadADC>
           adcmv[2] -= adcmv[3];
    17ee:	80 1b       	sub	r24, r16
    17f0:	91 0b       	sbc	r25, r17
    17f2:	9e 83       	std	Y+6, r25	; 0x06
    17f4:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RHRH);	// "RHRH"
    17f6:	8b e7       	ldi	r24, 0x7B	; 123
    17f8:	91 e0       	ldi	r25, 0x01	; 1
    17fa:	4b c0       	rjmp	.+150    	; 0x1892 <AutoCheck+0x33e>
        }
                                        //############################################
        if (tt == 4) { // Text release probes
    17fc:	fc 2d       	mov	r31, r12
    17fe:	f4 30       	cpi	r31, 0x04	; 4
    1800:	19 f4       	brne	.+6      	; 0x1808 <AutoCheck+0x2b4>
           lcd_fix_string(RELPROBE);	// "Release Probes"
    1802:	85 ed       	ldi	r24, 0xD5	; 213
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	45 c0       	rjmp	.+138    	; 0x1892 <AutoCheck+0x33e>
        }
                                        //############################################
        if (tt == 5) { // can we switch the ADC pins to GND across R_H resistor?
    1808:	2c 2d       	mov	r18, r12
    180a:	25 30       	cpi	r18, 0x05	; 5
    180c:	b1 f4       	brne	.+44     	; 0x183a <AutoCheck+0x2e6>
           R_PORT = 0;
    180e:	15 b8       	out	0x05, r1	; 5
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to GND
    1810:	f4 b8       	out	0x04, r15	; 4
           adcmv[0] = W20msReadADC(TP1);
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	0e 94 a8 1a 	call	0x3550	; 0x3550 <W20msReadADC>
    1818:	9a 83       	std	Y+2, r25	; 0x02
    181a:	89 83       	std	Y+1, r24	; 0x01

           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to GND
    181c:	e4 b8       	out	0x04, r14	; 4
           adcmv[1] = W20msReadADC(TP2);
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	0e 94 a8 1a 	call	0x3550	; 0x3550 <W20msReadADC>
    1824:	9c 83       	std	Y+4, r25	; 0x04
    1826:	8b 83       	std	Y+3, r24	; 0x03

           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1828:	a4 b8       	out	0x04, r10	; 4
           adcmv[2] = W20msReadADC(TP3);
    182a:	82 e0       	ldi	r24, 0x02	; 2
    182c:	0e 94 a8 1a 	call	0x3550	; 0x3550 <W20msReadADC>
    1830:	9e 83       	std	Y+6, r25	; 0x06
    1832:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RH1L);	// "RH_Lo="
    1834:	85 e6       	ldi	r24, 0x65	; 101
    1836:	91 e0       	ldi	r25, 0x01	; 1
    1838:	2c c0       	rjmp	.+88     	; 0x1892 <AutoCheck+0x33e>
        }
                                        //############################################
        if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
    183a:	8c 2d       	mov	r24, r12
    183c:	86 30       	cpi	r24, 0x06	; 6
    183e:	61 f5       	brne	.+88     	; 0x1898 <AutoCheck+0x344>
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to VCC
    1840:	f4 b8       	out	0x04, r15	; 4
           R_PORT = 2<<(TP1*2);
    1842:	f5 b8       	out	0x05, r15	; 5
           adcmv[0] = W20msReadADC(TP1) - ADCconfig.U_AVCC;
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	0e 94 a8 1a 	call	0x3550	; 0x3550 <W20msReadADC>
    184a:	20 91 40 01 	lds	r18, 0x0140
    184e:	30 91 41 01 	lds	r19, 0x0141
    1852:	82 1b       	sub	r24, r18
    1854:	93 0b       	sbc	r25, r19
    1856:	9a 83       	std	Y+2, r25	; 0x02
    1858:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to VCC
    185a:	e4 b8       	out	0x04, r14	; 4
           R_PORT = 2<<(TP2*2);
    185c:	e5 b8       	out	0x05, r14	; 5
           adcmv[1] = W20msReadADC(TP2) - ADCconfig.U_AVCC;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	0e 94 a8 1a 	call	0x3550	; 0x3550 <W20msReadADC>
    1864:	20 91 40 01 	lds	r18, 0x0140
    1868:	30 91 41 01 	lds	r19, 0x0141
    186c:	82 1b       	sub	r24, r18
    186e:	93 0b       	sbc	r25, r19
    1870:	9c 83       	std	Y+4, r25	; 0x04
    1872:	8b 83       	std	Y+3, r24	; 0x03
           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to VCC
    1874:	a4 b8       	out	0x04, r10	; 4
           R_PORT = 2<<(TP3*2);
    1876:	a5 b8       	out	0x05, r10	; 5
           adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
    1878:	82 e0       	ldi	r24, 0x02	; 2
    187a:	0e 94 a8 1a 	call	0x3550	; 0x3550 <W20msReadADC>
    187e:	20 91 40 01 	lds	r18, 0x0140
    1882:	30 91 41 01 	lds	r19, 0x0141
    1886:	82 1b       	sub	r24, r18
    1888:	93 0b       	sbc	r25, r19
    188a:	9e 83       	std	Y+6, r25	; 0x06
    188c:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RH1H);	// "RH_Hi="
    188e:	89 e6       	ldi	r24, 0x69	; 105
    1890:	91 e0       	ldi	r25, 0x01	; 1
    1892:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
    1896:	39 c0       	rjmp	.+114    	; 0x190a <AutoCheck+0x3b6>
        }
        if (tt == 7) { // can we switch the ADC pins to VCC across the R_H resistor?
    1898:	ec 2d       	mov	r30, r12
    189a:	e7 30       	cpi	r30, 0x07	; 7
    189c:	99 f5       	brne	.+102    	; 0x1904 <AutoCheck+0x3b0>
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_H_VAL*100));
    189e:	60 91 40 01 	lds	r22, 0x0140
    18a2:	70 91 41 01 	lds	r23, 0x0141
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	2e e4       	ldi	r18, 0x4E	; 78
    18ac:	3b e1       	ldi	r19, 0x1B	; 27
    18ae:	40 e0       	ldi	r20, 0x00	; 0
    18b0:	50 e0       	ldi	r21, 0x00	; 0
    18b2:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
    18b6:	2e ea       	ldi	r18, 0xAE	; 174
    18b8:	32 ed       	ldi	r19, 0xD2	; 210
    18ba:	47 e4       	ldi	r20, 0x47	; 71
    18bc:	50 e0       	ldi	r21, 0x00	; 0
    18be:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <__divmodsi4>
    18c2:	89 01       	movw	r16, r18
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    18c4:	f5 b8       	out	0x05, r15	; 5
           R_DDR = (2<<(TP1*2)) | (1<<(TP1*2));	//RH1 to +, RL1 to -
    18c6:	f3 e0       	ldi	r31, 0x03	; 3
    18c8:	f4 b9       	out	0x04, r31	; 4
           adcmv[0] = W20msReadADC(TP1);
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	0e 94 a8 1a 	call	0x3550	; 0x3550 <W20msReadADC>
           adcmv[0] -= u680;
    18d0:	80 1b       	sub	r24, r16
    18d2:	91 0b       	sbc	r25, r17
    18d4:	9a 83       	std	Y+2, r25	; 0x02
    18d6:	89 83       	std	Y+1, r24	; 0x01
           R_PORT = 2<<(TP2*2);		//RH2 to VCC
    18d8:	e5 b8       	out	0x05, r14	; 5
           R_DDR = (2<<(TP2*2)) | (1<<(TP2*2));	//RH2 to +, RL2 to -
    18da:	2c e0       	ldi	r18, 0x0C	; 12
    18dc:	24 b9       	out	0x04, r18	; 4
           adcmv[1] = W20msReadADC(TP2);
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	0e 94 a8 1a 	call	0x3550	; 0x3550 <W20msReadADC>
           adcmv[1] -= u680;
    18e4:	80 1b       	sub	r24, r16
    18e6:	91 0b       	sbc	r25, r17
    18e8:	9c 83       	std	Y+4, r25	; 0x04
    18ea:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 2<<(TP3*2);		//RH3 to VCC
    18ec:	a5 b8       	out	0x05, r10	; 5
           R_DDR = (2<<(TP3*2)) | (1<<(TP3*2));	//RH3 to +, RL3 to -
    18ee:	d4 b8       	out	0x04, r13	; 4
           adcmv[2] = W20msReadADC(TP3);
    18f0:	82 e0       	ldi	r24, 0x02	; 2
    18f2:	0e 94 a8 1a 	call	0x3550	; 0x3550 <W20msReadADC>
           adcmv[2] -= u680;
    18f6:	80 1b       	sub	r24, r16
    18f8:	91 0b       	sbc	r25, r17
    18fa:	9e 83       	std	Y+6, r25	; 0x06
    18fc:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RHRL);	// "RH/RL"
    18fe:	89 e8       	ldi	r24, 0x89	; 137
    1900:	91 e0       	ldi	r25, 0x01	; 1
    1902:	c7 cf       	rjmp	.-114    	; 0x1892 <AutoCheck+0x33e>
        }
                                        //############################################
        if (tt > 1) {	// output 3 voltages 
    1904:	8c 2d       	mov	r24, r12
    1906:	81 30       	cpi	r24, 0x01	; 1
    1908:	29 f1       	breq	.+74     	; 0x1954 <AutoCheck+0x400>
           lcd_line2();			//Cursor to column 1, row 2
    190a:	80 ec       	ldi	r24, 0xC0	; 192
    190c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
           lcd_string(itoa(adcmv[0], outval, 10));	//output voltage 1
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	9a 81       	ldd	r25, Y+2	; 0x02
    1914:	6c e0       	ldi	r22, 0x0C	; 12
    1916:	71 e0       	ldi	r23, 0x01	; 1
    1918:	4a e0       	ldi	r20, 0x0A	; 10
    191a:	50 e0       	ldi	r21, 0x00	; 0
    191c:	0e 94 20 1f 	call	0x3e40	; 0x3e40 <itoa>
    1920:	0e 94 20 01 	call	0x240	; 0x240 <lcd_string>
           lcd_space();
    1924:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_space>
           lcd_string(itoa(adcmv[1], outval, 10));	//output voltage 2
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	9c 81       	ldd	r25, Y+4	; 0x04
    192c:	6c e0       	ldi	r22, 0x0C	; 12
    192e:	71 e0       	ldi	r23, 0x01	; 1
    1930:	4a e0       	ldi	r20, 0x0A	; 10
    1932:	50 e0       	ldi	r21, 0x00	; 0
    1934:	0e 94 20 1f 	call	0x3e40	; 0x3e40 <itoa>
    1938:	0e 94 20 01 	call	0x240	; 0x240 <lcd_string>
           lcd_space();
    193c:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_space>
           lcd_string(itoa(adcmv[2], outval, 10));	//output voltage 3
    1940:	8d 81       	ldd	r24, Y+5	; 0x05
    1942:	9e 81       	ldd	r25, Y+6	; 0x06
    1944:	6c e0       	ldi	r22, 0x0C	; 12
    1946:	71 e0       	ldi	r23, 0x01	; 1
    1948:	4a e0       	ldi	r20, 0x0A	; 10
    194a:	50 e0       	ldi	r21, 0x00	; 0
    194c:	0e 94 20 1f 	call	0x3e40	; 0x3e40 <itoa>
    1950:	0e 94 20 01 	call	0x240	; 0x240 <lcd_string>
        }
        ADC_DDR =  TXD_MSK;		// all-Pins to Input
    1954:	e7 b8       	out	0x07, r14	; 7
        ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
    1956:	e8 b8       	out	0x08, r14	; 8
        R_DDR = 0;			// all R-Ports to Input
    1958:	14 b8       	out	0x04, r1	; 4
        R_PORT = 0;
    195a:	15 b8       	out	0x05, r1	; 5
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    195c:	4f 9b       	sbis	0x09, 7	; 9
    195e:	0f c0       	rjmp	.+30     	; 0x197e <AutoCheck+0x42a>
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
    1960:	84 e6       	ldi	r24, 0x64	; 100
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    1968:	4f 9b       	sbis	0x09, 7	; 9
    196a:	09 c0       	rjmp	.+18     	; 0x197e <AutoCheck+0x42a>
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
    196c:	84 e6       	ldi	r24, 0x64	; 100
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>
  lcd_fix_string(SELFTEST);		// "Selftest mode.."
  wait_about1s();
 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
    1974:	b3 94       	inc	r11
    1976:	eb 2d       	mov	r30, r11
    1978:	e4 30       	cpi	r30, 0x04	; 4
    197a:	09 f0       	breq	.+2      	; 0x197e <AutoCheck+0x42a>
    197c:	9a ce       	rjmp	.-716    	; 0x16b2 <AutoCheck+0x15e>
    197e:	1c 2d       	mov	r17, r12
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
     } //end for ww
     wait_about1s();
    1980:	88 ec       	ldi	r24, 0xC8	; 200
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>
  lcd_clear();
  lcd_fix_string(SELFTEST);		// "Selftest mode.."
  wait_about1s();
 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    1988:	1f 5f       	subi	r17, 0xFF	; 255
    198a:	18 30       	cpi	r17, 0x08	; 8
    198c:	81 f0       	breq	.+32     	; 0x19ae <AutoCheck+0x45a>
void AutoCheck(void) {
    198e:	bb 24       	eor	r11, r11
        lcd_line2();			//Cursor to column 1, row 2
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_data('T');			//output the Testmode "T"
    1990:	08 94       	sec
    1992:	61 1c       	adc	r6, r1
    1994:	71 1c       	adc	r7, r1
           lcd_fix_string(RLRL);	// "RLRL"
        }
                                        //############################################
        if (tt == 3) { // how equal are the RH resistors
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
           R_DDR = (2<<(TP1*2)) | (2<<(TP2*2));	//RH2 to -
    1996:	9a e0       	ldi	r25, 0x0A	; 10
    1998:	99 2e       	mov	r9, r25
           adcmv[0] = W20msReadADC(TP1);
           adcmv[3] = ADCconfig.U_AVCC / 2;
           adcmv[0] -= adcmv[3];
           R_DDR = (2<<(TP1*2)) | (2<<(TP3*2));	//RH3 to -
    199a:	82 e2       	ldi	r24, 0x22	; 34
    199c:	88 2e       	mov	r8, r24
           lcd_string(utoa(RHmultip, outval, 10));
           ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    199e:	0a eb       	ldi	r16, 0xBA	; 186
    19a0:	20 2e       	mov	r2, r16
    19a2:	06 e3       	ldi	r16, 0x36	; 54
    19a4:	30 2e       	mov	r3, r16
    19a6:	41 2c       	mov	r4, r1
    19a8:	51 2c       	mov	r5, r1
    19aa:	c1 2e       	mov	r12, r17
    19ac:	82 ce       	rjmp	.-764    	; 0x16b2 <AutoCheck+0x15e>
        wait_about500ms();
     } //end for ww
     wait_about1s();
  } //end for tt

  lcd_clear();
    19ae:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_clear>
  lcd_fix_string(RIHI);	// "RiHi="
    19b2:	8f e8       	ldi	r24, 0x8F	; 143
    19b4:	91 e0       	ldi	r25, 0x01	; 1
    19b6:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
  DisplayValue(RRpinPL,-1,LCD_CHAR_OMEGA,3);
    19ba:	60 91 42 01 	lds	r22, 0x0142
    19be:	70 91 43 01 	lds	r23, 0x0143
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	4f ef       	ldi	r20, 0xFF	; 255
    19c8:	24 ef       	ldi	r18, 0xF4	; 244
    19ca:	03 e0       	ldi	r16, 0x03	; 3
    19cc:	0e 94 81 02 	call	0x502	; 0x502 <DisplayValue>
  lcd_line2();
    19d0:	80 ec       	ldi	r24, 0xC0	; 192
    19d2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
  lcd_fix_string(RILO);	// "RiLo="
    19d6:	86 e9       	ldi	r24, 0x96	; 150
    19d8:	91 e0       	ldi	r25, 0x01	; 1
    19da:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
  DisplayValue(RRpinMI,-1,LCD_CHAR_OMEGA,3);
    19de:	60 91 47 01 	lds	r22, 0x0147
    19e2:	70 91 48 01 	lds	r23, 0x0148
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	4f ef       	ldi	r20, 0xFF	; 255
    19ec:	24 ef       	ldi	r18, 0xF4	; 244
    19ee:	0e 94 81 02 	call	0x502	; 0x502 <DisplayValue>
  wait_about2s();			//wait 2 seconds
    19f2:	80 e9       	ldi	r24, 0x90	; 144
    19f4:	91 e0       	ldi	r25, 0x01	; 1
    19f6:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>

  //measure Zero offset for Capacity measurement
  adcmv[3] = 0;
    19fa:	18 86       	std	Y+8, r1	; 0x08
    19fc:	1f 82       	std	Y+7, r1	; 0x07
  PartFound = PART_NONE;
    19fe:	10 92 07 01 	sts	0x0107, r1
  ReadCapacity(TP3, TP1);
    1a02:	82 e0       	ldi	r24, 0x02	; 2
    1a04:	60 e0       	ldi	r22, 0x00	; 0
    1a06:	0e 94 80 14 	call	0x2900	; 0x2900 <ReadCapacity>
  adcmv[5] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:3
    1a0a:	00 91 6a 01 	lds	r16, 0x016A
    1a0e:	10 91 6b 01 	lds	r17, 0x016B
    1a12:	1c 87       	std	Y+12, r17	; 0x0c
    1a14:	0b 87       	std	Y+11, r16	; 0x0b
  ReadCapacity(TP3, TP2);
    1a16:	82 e0       	ldi	r24, 0x02	; 2
    1a18:	61 e0       	ldi	r22, 0x01	; 1
    1a1a:	0e 94 80 14 	call	0x2900	; 0x2900 <ReadCapacity>
  adcmv[6] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:3
    1a1e:	e0 90 6a 01 	lds	r14, 0x016A
    1a22:	f0 90 6b 01 	lds	r15, 0x016B
    1a26:	fe 86       	std	Y+14, r15	; 0x0e
    1a28:	ed 86       	std	Y+13, r14	; 0x0d
  ReadCapacity(TP2, TP1);
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	60 e0       	ldi	r22, 0x00	; 0
    1a2e:	0e 94 80 14 	call	0x2900	; 0x2900 <ReadCapacity>
  adcmv[2] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:2
    1a32:	c0 90 6a 01 	lds	r12, 0x016A
    1a36:	d0 90 6b 01 	lds	r13, 0x016B
    1a3a:	de 82       	std	Y+6, r13	; 0x06
    1a3c:	cd 82       	std	Y+5, r12	; 0x05
  ReadCapacity(TP1, TP3);
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	62 e0       	ldi	r22, 0x02	; 2
    1a42:	0e 94 80 14 	call	0x2900	; 0x2900 <ReadCapacity>
  adcmv[1] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:1
    1a46:	80 91 6a 01 	lds	r24, 0x016A
    1a4a:	90 91 6b 01 	lds	r25, 0x016B
    1a4e:	9c 83       	std	Y+4, r25	; 0x04
    1a50:	8b 83       	std	Y+3, r24	; 0x03
  ReadCapacity(TP2, TP3);
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	62 e0       	ldi	r22, 0x02	; 2
    1a56:	0e 94 80 14 	call	0x2900	; 0x2900 <ReadCapacity>
  adcmv[4] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:2
    1a5a:	80 91 6a 01 	lds	r24, 0x016A
    1a5e:	90 91 6b 01 	lds	r25, 0x016B
    1a62:	9a 87       	std	Y+10, r25	; 0x0a
    1a64:	89 87       	std	Y+9, r24	; 0x09
  ReadCapacity(TP1, TP2);
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	61 e0       	ldi	r22, 0x01	; 1
    1a6a:	0e 94 80 14 	call	0x2900	; 0x2900 <ReadCapacity>
  adcmv[0] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:1
    1a6e:	80 91 6a 01 	lds	r24, 0x016A
    1a72:	90 91 6b 01 	lds	r25, 0x016B
    1a76:	9a 83       	std	Y+2, r25	; 0x02
    1a78:	89 83       	std	Y+1, r24	; 0x01
  lcd_clear();
    1a7a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_clear>
  lcd_fix_string(C0_str);			//output "C0 "
    1a7e:	8d e9       	ldi	r24, 0x9D	; 157
    1a80:	91 e0       	ldi	r25, 0x01	; 1
    1a82:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
    1a86:	b8 01       	movw	r22, r16
    1a88:	88 27       	eor	r24, r24
    1a8a:	77 fd       	sbrc	r23, 7
    1a8c:	80 95       	com	r24
    1a8e:	98 2f       	mov	r25, r24
    1a90:	40 e0       	ldi	r20, 0x00	; 0
    1a92:	20 e2       	ldi	r18, 0x20	; 32
    1a94:	03 e0       	ldi	r16, 0x03	; 3
    1a96:	0e 94 81 02 	call	0x502	; 0x502 <DisplayValue>
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
    1a9a:	b7 01       	movw	r22, r14
    1a9c:	88 27       	eor	r24, r24
    1a9e:	77 fd       	sbrc	r23, 7
    1aa0:	80 95       	com	r24
    1aa2:	98 2f       	mov	r25, r24
    1aa4:	40 e0       	ldi	r20, 0x00	; 0
    1aa6:	20 e2       	ldi	r18, 0x20	; 32
    1aa8:	0e 94 81 02 	call	0x502	; 0x502 <DisplayValue>
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
    1aac:	b6 01       	movw	r22, r12
    1aae:	88 27       	eor	r24, r24
    1ab0:	77 fd       	sbrc	r23, 7
    1ab2:	80 95       	com	r24
    1ab4:	98 2f       	mov	r25, r24
    1ab6:	44 ef       	ldi	r20, 0xF4	; 244
    1ab8:	26 e4       	ldi	r18, 0x46	; 70
    1aba:	0e 94 81 02 	call	0x502	; 0x502 <DisplayValue>
    1abe:	8e 01       	movw	r16, r28
    1ac0:	0f 5f       	subi	r16, 0xFF	; 255
    1ac2:	1f 4f       	sbci	r17, 0xFF	; 255
void AutoCheck(void) {
    1ac4:	ce 01       	movw	r24, r28
    1ac6:	0f 96       	adiw	r24, 0x0f	; 15
    1ac8:	f8 01       	movw	r30, r16
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
    1aca:	21 91       	ld	r18, Z+
    1acc:	31 91       	ld	r19, Z+
    1ace:	27 34       	cpi	r18, 0x47	; 71
    1ad0:	31 05       	cpc	r19, r1
    1ad2:	ec f4       	brge	.+58     	; 0x1b0e <AutoCheck+0x5ba>
  lcd_fix_string(C0_str);			//output "C0 "
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
    1ad4:	e8 17       	cp	r30, r24
    1ad6:	f9 07       	cpc	r31, r25
    1ad8:	c1 f7       	brne	.-16     	; 0x1aca <AutoCheck+0x576>
    1ada:	ee 24       	eor	r14, r14
    1adc:	ff 24       	eor	r15, r15
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
    1ade:	f8 01       	movw	r30, r16
    1ae0:	60 81       	ld	r22, Z
    1ae2:	0e 5f       	subi	r16, 0xFE	; 254
    1ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae6:	61 5f       	subi	r22, 0xF1	; 241
    1ae8:	c7 01       	movw	r24, r14
    1aea:	81 51       	subi	r24, 0x11	; 17
    1aec:	9e 4f       	sbci	r25, 0xFE	; 254
    1aee:	0e 94 65 1f 	call	0x3eca	; 0x3eca <__eewr_byte_m168>
    1af2:	08 94       	sec
    1af4:	e1 1c       	adc	r14, r1
    1af6:	f1 1c       	adc	r15, r1
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
    1af8:	f7 e0       	ldi	r31, 0x07	; 7
    1afa:	ef 16       	cp	r14, r31
    1afc:	f1 04       	cpc	r15, r1
    1afe:	79 f7       	brne	.-34     	; 0x1ade <AutoCheck+0x58a>
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
  }
  lcd_line2();
    1b00:	80 ec       	ldi	r24, 0xC0	; 192
    1b02:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
  lcd_fix_string(OK_str);		// output "OK"
    1b06:	83 ef       	ldi	r24, 0xF3	; 243
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
no_c0save:
 #endif
 wait_about2s();		//wait 2 seconds
    1b0e:	80 e9       	ldi	r24, 0x90	; 144
    1b10:	91 e0       	ldi	r25, 0x01	; 1
    1b12:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>
    1b16:	10 e4       	ldi	r17, 0x40	; 64
    1b18:	c1 2e       	mov	r12, r17
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
    1b1a:	10 e0       	ldi	r17, 0x00	; 0
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
    1b1c:	ba e0       	ldi	r27, 0x0A	; 10
    1b1e:	8b 2e       	mov	r8, r27
    1b20:	91 2c       	mov	r9, r1
    1b22:	a1 2c       	mov	r10, r1
    1b24:	b1 2c       	mov	r11, r1
     lcd_data('3');
     lcd_fix_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1b26:	a2 e6       	ldi	r26, 0x62	; 98
    1b28:	ea 2e       	mov	r14, r26
    1b2a:	a1 e0       	ldi	r26, 0x01	; 1
    1b2c:	fa 2e       	mov	r15, r26
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
     lcd_clear();
    1b2e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_clear>
     lcd_data('1');
    1b32:	81 e3       	ldi	r24, 0x31	; 49
    1b34:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
     lcd_fix_string(CapZeich);	// "-||-"
    1b38:	85 e2       	ldi	r24, 0x25	; 37
    1b3a:	91 e0       	ldi	r25, 0x01	; 1
    1b3c:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
     lcd_data('3');
    1b40:	83 e3       	ldi	r24, 0x33	; 51
    1b42:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
     lcd_fix_string(MinCap_str); // " >100nF!"
    1b46:	87 ea       	ldi	r24, 0xA7	; 167
    1b48:	91 e0       	ldi	r25, 0x01	; 1
    1b4a:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
     PartFound = PART_NONE;
    1b4e:	10 92 07 01 	sts	0x0107, r1
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
    1b52:	82 e0       	ldi	r24, 0x02	; 2
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	0e 94 80 14 	call	0x2900	; 0x2900 <ReadCapacity>
    1b5a:	20 91 62 01 	lds	r18, 0x0162
    1b5e:	30 91 63 01 	lds	r19, 0x0163
    1b62:	40 91 64 01 	lds	r20, 0x0164
    1b66:	50 91 65 01 	lds	r21, 0x0165
    1b6a:	00 91 74 01 	lds	r16, 0x0174
     while (cap.cpre < -9) {
    1b6e:	07 c0       	rjmp	.+14     	; 0x1b7e <AutoCheck+0x62a>
        cap.cpre++;
        cap.cval /= 10;
    1b70:	ca 01       	movw	r24, r20
    1b72:	b9 01       	movw	r22, r18
    1b74:	a5 01       	movw	r20, r10
    1b76:	94 01       	movw	r18, r8
    1b78:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
    1b7c:	0f 5f       	subi	r16, 0xFF	; 255
     lcd_data('3');
     lcd_fix_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1b7e:	07 3f       	cpi	r16, 0xF7	; 247
    1b80:	bc f3       	brlt	.-18     	; 0x1b70 <AutoCheck+0x61c>
    1b82:	00 93 74 01 	sts	0x0174, r16
    1b86:	20 93 62 01 	sts	0x0162, r18
    1b8a:	f7 01       	movw	r30, r14
    1b8c:	31 83       	std	Z+1, r19	; 0x01
    1b8e:	42 83       	std	Z+2, r20	; 0x02
    1b90:	53 83       	std	Z+3, r21	; 0x03
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1b92:	07 3f       	cpi	r16, 0xF7	; 247
    1b94:	09 f0       	breq	.+2      	; 0x1b98 <AutoCheck+0x644>
    1b96:	be c0       	rjmp	.+380    	; 0x1d14 <AutoCheck+0x7c0>
    1b98:	20 36       	cpi	r18, 0x60	; 96
    1b9a:	31 05       	cpc	r19, r1
    1b9c:	41 05       	cpc	r20, r1
    1b9e:	51 05       	cpc	r21, r1
    1ba0:	08 f4       	brcc	.+2      	; 0x1ba4 <AutoCheck+0x650>
    1ba2:	b8 c0       	rjmp	.+368    	; 0x1d14 <AutoCheck+0x7c0>
    1ba4:	20 3f       	cpi	r18, 0xF0	; 240
    1ba6:	f5 e5       	ldi	r31, 0x55	; 85
    1ba8:	3f 07       	cpc	r19, r31
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	4f 07       	cpc	r20, r31
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	5f 07       	cpc	r21, r31
    1bb2:	08 f0       	brcs	.+2      	; 0x1bb6 <AutoCheck+0x662>
    1bb4:	af c0       	rjmp	.+350    	; 0x1d14 <AutoCheck+0x7c0>
        cap_found++;
    1bb6:	1f 5f       	subi	r17, 0xFF	; 255
     } else {
        cap_found = 0;		// wait for stable connection
     }
     if (cap_found > 1) {
    1bb8:	12 30       	cpi	r17, 0x02	; 2
    1bba:	09 f0       	breq	.+2      	; 0x1bbe <AutoCheck+0x66a>
    1bbc:	ac c0       	rjmp	.+344    	; 0x1d16 <AutoCheck+0x7c2>
        // value of capacitor is correct
        (void) eeprom_write_word((uint16_t *)(&ref_offset), load_diff);	// hold zero offset + slew rate dependend offset
    1bbe:	60 91 76 01 	lds	r22, 0x0176
    1bc2:	70 91 77 01 	lds	r23, 0x0177
    1bc6:	8d ee       	ldi	r24, 0xED	; 237
    1bc8:	91 e0       	ldi	r25, 0x01	; 1
    1bca:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <__eewr_word_m168>
        lcd_clear();
    1bce:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_clear>
        lcd_fix_string(REF_C_str);	// "REF_C="
    1bd2:	8f ea       	ldi	r24, 0xAF	; 175
    1bd4:	91 e0       	ldi	r25, 0x01	; 1
    1bd6:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
        lcd_string(itoa(load_diff, outval, 10));	//output REF_C_KORR
    1bda:	80 91 76 01 	lds	r24, 0x0176
    1bde:	90 91 77 01 	lds	r25, 0x0177
    1be2:	6c e0       	ldi	r22, 0x0C	; 12
    1be4:	71 e0       	ldi	r23, 0x01	; 1
    1be6:	4a e0       	ldi	r20, 0x0A	; 10
    1be8:	50 e0       	ldi	r21, 0x00	; 0
    1bea:	0e 94 20 1f 	call	0x3e40	; 0x3e40 <itoa>
    1bee:	0e 94 20 01 	call	0x240	; 0x240 <lcd_string>
        eeprom_write_byte((uint8_t *)(&EE_ESR_ZERO), (uint8_t)ESR_ZERO); // set to initial zero offset
    1bf2:	86 ef       	ldi	r24, 0xF6	; 246
    1bf4:	91 e0       	ldi	r25, 0x01	; 1
    1bf6:	68 e2       	ldi	r22, 0x28	; 40
    1bf8:	0e 94 65 1f 	call	0x3eca	; 0x3eca <__eewr_byte_m168>
        wait_about1s();
        }
//#######################################
#endif
  #ifdef AUTOSCALE_ADC
        ADC_PORT =  TXD_VAL;	//ADC-Port 1 to GND
    1bfc:	88 e0       	ldi	r24, 0x08	; 8
    1bfe:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    1c00:	89 e0       	ldi	r24, 0x09	; 9
    1c02:	87 b9       	out	0x07, r24	; 7
        R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1c04:	80 e2       	ldi	r24, 0x20	; 32
    1c06:	84 b9       	out	0x04, r24	; 4
        do {
           adcmv[0] = ReadADC(TP3);
    1c08:	82 e0       	ldi	r24, 0x02	; 2
    1c0a:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
        } while (adcmv[0] > 980);
    1c0e:	23 e0       	ldi	r18, 0x03	; 3
    1c10:	85 3d       	cpi	r24, 0xD5	; 213
    1c12:	92 07       	cpc	r25, r18
    1c14:	cc f7       	brge	.-14     	; 0x1c08 <AutoCheck+0x6b4>
        R_DDR = 0;		//all Pins to input 
    1c16:	14 b8       	out	0x04, r1	; 4
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1c18:	10 92 3f 01 	sts	0x013F, r1
    1c1c:	10 92 3e 01 	sts	0x013E, r1
        adcmv[0] = ReadADC(TP3);  // get cap voltage with VCC reference
    1c20:	82 e0       	ldi	r24, 0x02	; 2
    1c22:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
    1c26:	4c 01       	movw	r8, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1c28:	85 ee       	ldi	r24, 0xE5	; 229
    1c2a:	91 e0       	ldi	r25, 0x01	; 1
    1c2c:	0e 94 57 1f 	call	0x3eae	; 0x3eae <__eerd_byte_m168>
    1c30:	99 27       	eor	r25, r25
    1c32:	87 fd       	sbrc	r24, 7
    1c34:	90 95       	com	r25
    1c36:	20 91 44 01 	lds	r18, 0x0144
    1c3a:	30 91 45 01 	lds	r19, 0x0145
    1c3e:	82 0f       	add	r24, r18
    1c40:	93 1f       	adc	r25, r19
    1c42:	90 93 3f 01 	sts	0x013F, r25
    1c46:	80 93 3e 01 	sts	0x013E, r24
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
    1c4a:	82 e0       	ldi	r24, 0x02	; 2
    1c4c:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
    1c50:	8c 01       	movw	r16, r24
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1c52:	10 92 3f 01 	sts	0x013F, r1
    1c56:	10 92 3e 01 	sts	0x013E, r1
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
    1c5a:	82 e0       	ldi	r24, 0x02	; 2
    1c5c:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
    1c60:	5c 01       	movw	r10, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1c62:	c0 90 44 01 	lds	r12, 0x0144
    1c66:	d0 90 45 01 	lds	r13, 0x0145
    1c6a:	85 ee       	ldi	r24, 0xE5	; 229
    1c6c:	91 e0       	ldi	r25, 0x01	; 1
    1c6e:	0e 94 57 1f 	call	0x3eae	; 0x3eae <__eerd_byte_m168>
    1c72:	99 27       	eor	r25, r25
    1c74:	87 fd       	sbrc	r24, 7
    1c76:	90 95       	com	r25
    1c78:	8c 0d       	add	r24, r12
    1c7a:	9d 1d       	adc	r25, r13
    1c7c:	90 93 3f 01 	sts	0x013F, r25
    1c80:	80 93 3e 01 	sts	0x013E, r24
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1c84:	85 ee       	ldi	r24, 0xE5	; 229
    1c86:	91 e0       	ldi	r25, 0x01	; 1
    1c88:	0e 94 57 1f 	call	0x3eae	; 0x3eae <__eerd_byte_m168>
    1c8c:	e8 2e       	mov	r14, r24
        lcd_line2();
    1c8e:	80 ec       	ldi	r24, 0xC0	; 192
    1c90:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
        lcd_fix_string(REF_R_str);	// "REF_R="
    1c94:	86 eb       	ldi	r24, 0xB6	; 182
    1c96:	91 e0       	ldi	r25, 0x01	; 1
    1c98:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1c9c:	85 ee       	ldi	r24, 0xE5	; 229
    1c9e:	91 e0       	ldi	r25, 0x01	; 1
    1ca0:	0e 94 57 1f 	call	0x3eae	; 0x3eae <__eerd_byte_m168>
        ADCconfig.U_Bandgap = ADC_internal_reference;
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
        ADCconfig.U_Bandgap = ADC_internal_reference;
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1ca4:	f3 e0       	ldi	r31, 0x03	; 3
    1ca6:	ff 2e       	mov	r15, r31
    1ca8:	f8 0e       	add	r15, r24
    1caa:	a8 0c       	add	r10, r8
    1cac:	b9 1c       	adc	r11, r9
    1cae:	a0 1a       	sub	r10, r16
    1cb0:	b1 0a       	sbc	r11, r17
    1cb2:	a0 1a       	sub	r10, r16
    1cb4:	b1 0a       	sbc	r11, r17
    1cb6:	b5 01       	movw	r22, r10
    1cb8:	88 27       	eor	r24, r24
    1cba:	77 fd       	sbrc	r23, 7
    1cbc:	80 95       	com	r24
    1cbe:	98 2f       	mov	r25, r24
    1cc0:	2e 2d       	mov	r18, r14
    1cc2:	33 27       	eor	r19, r19
    1cc4:	27 fd       	sbrc	r18, 7
    1cc6:	30 95       	com	r19
    1cc8:	2c 0d       	add	r18, r12
    1cca:	3d 1d       	adc	r19, r13
    1ccc:	40 e0       	ldi	r20, 0x00	; 0
    1cce:	50 e0       	ldi	r21, 0x00	; 0
    1cd0:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
    1cd4:	00 0f       	add	r16, r16
    1cd6:	11 1f       	adc	r17, r17
    1cd8:	98 01       	movw	r18, r16
    1cda:	44 27       	eor	r20, r20
    1cdc:	37 fd       	sbrc	r19, 7
    1cde:	40 95       	com	r20
    1ce0:	54 2f       	mov	r21, r20
    1ce2:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <__divmodsi4>
        lcd_line2();
        lcd_fix_string(REF_R_str);	// "REF_R="
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1ce6:	f2 0e       	add	r15, r18
        (void) eeprom_write_byte((uint8_t *)(&RefDiff), (uint8_t)udiff2);	// hold offset for true reference Voltage
    1ce8:	85 ee       	ldi	r24, 0xE5	; 229
    1cea:	91 e0       	ldi	r25, 0x01	; 1
    1cec:	6f 2d       	mov	r22, r15
    1cee:	0e 94 65 1f 	call	0x3eca	; 0x3eca <__eewr_byte_m168>
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
    1cf2:	8f 2d       	mov	r24, r15
    1cf4:	99 27       	eor	r25, r25
    1cf6:	87 fd       	sbrc	r24, 7
    1cf8:	90 95       	com	r25
    1cfa:	6c e0       	ldi	r22, 0x0C	; 12
    1cfc:	71 e0       	ldi	r23, 0x01	; 1
    1cfe:	4a e0       	ldi	r20, 0x0A	; 10
    1d00:	50 e0       	ldi	r21, 0x00	; 0
    1d02:	0e 94 20 1f 	call	0x3e40	; 0x3e40 <itoa>
    1d06:	0e 94 20 01 	call	0x240	; 0x240 <lcd_string>
  #endif
        wait_about4s();
    1d0a:	80 e2       	ldi	r24, 0x20	; 32
    1d0c:	93 e0       	ldi	r25, 0x03	; 3
    1d0e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>
        break;
    1d12:	19 c0       	rjmp	.+50     	; 0x1d46 <AutoCheck+0x7f2>
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1d14:	10 e0       	ldi	r17, 0x00	; 0
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
  #endif
        wait_about4s();
        break;
     }
     lcd_line2();
    1d16:	80 ec       	ldi	r24, 0xC0	; 192
    1d18:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
     DisplayValue(cap.cval,cap.cpre,'F',4);
    1d1c:	60 91 62 01 	lds	r22, 0x0162
    1d20:	70 91 63 01 	lds	r23, 0x0163
    1d24:	80 91 64 01 	lds	r24, 0x0164
    1d28:	90 91 65 01 	lds	r25, 0x0165
    1d2c:	40 91 74 01 	lds	r20, 0x0174
    1d30:	26 e4       	ldi	r18, 0x46	; 70
    1d32:	04 e0       	ldi	r16, 0x04	; 4
    1d34:	0e 94 81 02 	call	0x502	; 0x502 <DisplayValue>
     wait_about200ms();			// wait additional time
    1d38:	88 e2       	ldi	r24, 0x28	; 40
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>
    1d40:	ca 94       	dec	r12
 wait_about2s();		//wait 2 seconds
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
    1d42:	09 f0       	breq	.+2      	; 0x1d46 <AutoCheck+0x7f2>
    1d44:	f4 ce       	rjmp	.-536    	; 0x1b2e <AutoCheck+0x5da>
     wait_about200ms();			// wait additional time
  } // end for ww
 #endif


  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    1d46:	89 e1       	ldi	r24, 0x19	; 25
    1d48:	80 93 3c 01 	sts	0x013C, r24
  lcd_clear();
    1d4c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_clear>
  lcd_line2();
    1d50:	80 ec       	ldi	r24, 0xC0	; 192
    1d52:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
  lcd_fix_string(VERSION_str);	//"Version ..."
    1d56:	87 e5       	ldi	r24, 0x57	; 87
    1d58:	91 e0       	ldi	r25, 0x01	; 1
    1d5a:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
  lcd_line1();
    1d5e:	80 e8       	ldi	r24, 0x80	; 128
    1d60:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
  lcd_fix_string(ATE);		//"Selftest End"
    1d64:	84 ee       	ldi	r24, 0xE4	; 228
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
        // if key is pressed, don't repeat
        break;
     }
  }
 #endif
 PartFound = PART_NONE;
    1d6c:	10 92 07 01 	sts	0x0107, r1
 wait_about1s();			//wait 1 seconds
    1d70:	88 ec       	ldi	r24, 0xC8	; 200
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>
#endif
 } 
    1d78:	2e 96       	adiw	r28, 0x0e	; 14
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	cf 91       	pop	r28
    1d86:	df 91       	pop	r29
    1d88:	1f 91       	pop	r17
    1d8a:	0f 91       	pop	r16
    1d8c:	ff 90       	pop	r15
    1d8e:	ef 90       	pop	r14
    1d90:	df 90       	pop	r13
    1d92:	cf 90       	pop	r12
    1d94:	bf 90       	pop	r11
    1d96:	af 90       	pop	r10
    1d98:	9f 90       	pop	r9
    1d9a:	8f 90       	pop	r8
    1d9c:	7f 90       	pop	r7
    1d9e:	6f 90       	pop	r6
    1da0:	5f 90       	pop	r5
    1da2:	4f 90       	pop	r4
    1da4:	3f 90       	pop	r3
    1da6:	2f 90       	pop	r2
    1da8:	08 95       	ret

00001daa <main>:
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
  EMPTY_INTERRUPT(ADC_vect);
#endif

//begin of transistortester program
int main(void) {
    1daa:	0f 93       	push	r16
    1dac:	1f 93       	push	r17
  //switch on
  ON_DDR = (1<<ON_PIN);			// switch to output
    1dae:	80 e4       	ldi	r24, 0x40	; 64
    1db0:	8a b9       	out	0x0a, r24	; 10
#ifdef PULLUP_DISABLE
  ON_PORT = (1<<ON_PIN); 		// switch power on 
    1db2:	8b b9       	out	0x0b, r24	; 11
#else
  ON_PORT = (1<<ON_PIN)|(1<<RST_PIN); 	// switch power on , enable internal Pullup for Start-Pin
#endif
  uint8_t tmp;
  //ADC-Init
  ADCSRA = (1<<ADEN) | AUTO_CLOCK_DIV;	//prescaler=8 or 64 (if 8Mhz clock)
    1db4:	86 e8       	ldi	r24, 0x86	; 134
    1db6:	80 93 7a 00 	sts	0x007A, r24
// #define WDRF_HOME MCU_STATUS_REG
 #define WDRF_HOME MCUCSR
#else
 #define WDRF_HOME MCUSR
#endif
  tmp = (WDRF_HOME & (1<<WDRF));	// save Watch Dog Flag
    1dba:	14 b7       	in	r17, 0x34	; 52
  WDRF_HOME &= ~(1<<WDRF);	 	//reset Watch Dog flag
    1dbc:	84 b7       	in	r24, 0x34	; 52
    1dbe:	87 7f       	andi	r24, 0xF7	; 247
    1dc0:	84 bf       	out	0x34, r24	; 52
  wdt_disable();			// disable Watch Dog
    1dc2:	88 e1       	ldi	r24, 0x18	; 24
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	f8 94       	cli
    1dc8:	80 93 60 00 	sts	0x0060, r24
    1dcc:	10 92 60 00 	sts	0x0060, r1
    1dd0:	0f be       	out	0x3f, r0	; 63
#ifndef INHIBIT_SLEEP_MODE
  // switch off unused Parts
  PRR = (1<<PRTWI) | (1<<PRTIM0) | (1<<PRSPI) | (1<<PRUSART0);
    1dd2:	86 ea       	ldi	r24, 0xA6	; 166
    1dd4:	80 93 64 00 	sts	0x0064, r24
  DIDR0 = (1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D);	
    1dd8:	88 e3       	ldi	r24, 0x38	; 56
    1dda:	80 93 7e 00 	sts	0x007E, r24
  TCCR2A = (0<<WGM21) | (0<<WGM20);		// Counter 2 normal mode
    1dde:	10 92 b0 00 	sts	0x00B0, r1
 #if F_CPU == 4000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (0<<CS20);	//prescaler 256, 64us @ 2MHz
  #define T2_PERIOD 64
 #endif 
 #if F_CPU >= 8000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (1<<CS20);	//prescaler 1024, 128us @ 8MHz, 64us @ 16MHz
    1de2:	87 e0       	ldi	r24, 0x07	; 7
    1de4:	80 93 b1 00 	sts	0x00B1, r24
  #define T2_PERIOD (1024 / (F_CPU / 1000000UL));	/* set to 128 or 64 us */
 #endif 
  sei();				// enable interrupts
    1de8:	78 94       	sei
#endif
  lcd_init();				//initialize LCD
    1dea:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_init>
	
//  ADC_PORT = TXD_VAL;
//  ADC_DDR = TXD_MSK;
  if(tmp) { 
    1dee:	13 ff       	sbrs	r17, 3
    1df0:	0a c0       	rjmp	.+20     	; 0x1e06 <main+0x5c>
     // check if  Watchdog-Event 
     // this happens, if the Watchdog is not reset for 2s
     // can happen, if any loop in the Program doen't finish.
     lcd_line1();
    1df2:	80 e8       	ldi	r24, 0x80	; 128
    1df4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
     lcd_fix_string(TestTimedOut);	//Output Timeout
    1df8:	8c eb       	ldi	r24, 0xBC	; 188
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
     wait_about3s();				//wait for 3 s
    1e00:	88 e5       	ldi	r24, 0x58	; 88
    1e02:	92 e0       	ldi	r25, 0x02	; 2
    1e04:	92 c0       	rjmp	.+292    	; 0x1f2a <main+0x180>
     ON_PORT = 0;			//shut off!
//     ON_DDR = (1<<ON_PIN);		//switch to GND
     return 0;
  }
  LCDLoadCustomChar(LCD_CHAR_DIODE1);	//Custom-Character Diode symbol
    1e06:	88 e4       	ldi	r24, 0x48	; 72
    1e08:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
  lcd_fix_customchar(DiodeIcon1);	//load Character  >|
    1e0c:	8d eb       	ldi	r24, 0xBD	; 189
    1e0e:	91 e0       	ldi	r25, 0x01	; 1
    1e10:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_DIODE2);	//Custom-Character 
    1e14:	80 e5       	ldi	r24, 0x50	; 80
    1e16:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
  lcd_fix_customchar(DiodeIcon2);	//load Character  |<
    1e1a:	85 ec       	ldi	r24, 0xC5	; 197
    1e1c:	91 e0       	ldi	r25, 0x01	; 1
    1e1e:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_CAP);	//Custom-Character  Capacitor symbol
    1e22:	88 e5       	ldi	r24, 0x58	; 88
    1e24:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
  lcd_fix_customchar(CapIcon);		//load Character  ||
    1e28:	8d ec       	ldi	r24, 0xCD	; 205
    1e2a:	91 e0       	ldi	r25, 0x01	; 1
    1e2c:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS1);	//Custom-Character Resistor symbol
    1e30:	88 e7       	ldi	r24, 0x78	; 120
    1e32:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
  lcd_fix_customchar(ResIcon1);		//load Character  [
    1e36:	85 ed       	ldi	r24, 0xD5	; 213
    1e38:	91 e0       	ldi	r25, 0x01	; 1
    1e3a:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS2);	//Custom-Character 
    1e3e:	80 e7       	ldi	r24, 0x70	; 112
    1e40:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
  lcd_fix_customchar(ResIcon2);		//load Character  ]
    1e44:	8d ed       	ldi	r24, 0xDD	; 221
    1e46:	91 e0       	ldi	r25, 0x01	; 1
    1e48:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_fix_customchar>
#endif
#ifdef PULLUP_DISABLE
 #ifdef __AVR_ATmega8__
  SFIOR = (1<<PUD);		// disable Pull-Up Resistors mega8
 #else
  MCUCR = (1<<PUD);		// disable Pull-Up Resistors mega168 family
    1e4c:	80 e1       	ldi	r24, 0x10	; 16
    1e4e:	85 bf       	out	0x35, r24	; 53
  }
#else
  #define display_time OFF_WAIT_TIME
#endif

  empty_count = 0;
    1e50:	10 92 4a 01 	sts	0x014A, r1
  mess_count = 0;
    1e54:	10 92 0b 01 	sts	0x010B, r1


//*****************************************************************
//Entry: if start key is pressed before shut down
start:
  PartFound = PART_NONE;	// no part found
    1e58:	10 92 07 01 	sts	0x0107, r1
  NumOfDiodes = 0;		// Number of diodes = 0
    1e5c:	10 92 05 01 	sts	0x0105, r1
  PartReady = 0;
    1e60:	10 92 04 01 	sts	0x0104, r1
  PartMode = 0;
    1e64:	10 92 06 01 	sts	0x0106, r1
  WithReference = 0;		// no precision reference voltage
    1e68:	10 92 49 01 	sts	0x0149, r1
  lcd_clear();
    1e6c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_clear>
  ADC_DDR = TXD_MSK;		//activate Software-UART 
    1e70:	88 e0       	ldi	r24, 0x08	; 8
    1e72:	87 b9       	out	0x07, r24	; 7
  ResistorsFound = 0;		// no resistors found
    1e74:	10 92 5e 01 	sts	0x015E, r1
  cap.ca = 0;
    1e78:	10 92 72 01 	sts	0x0172, r1
  cap.cb = 0;
    1e7c:	10 92 73 01 	sts	0x0173, r1
#ifdef WITH_UART
  uart_newline();		// start of new measurement
    1e80:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <uart_newline>
#endif
  ADCconfig.RefFlag = 0;
    1e84:	10 92 3d 01 	sts	0x013D, r1
  Calibrate_UR();		// get Ref Voltages and Pin resistance
    1e88:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <Calibrate_UR>
  lcd_line1();	//1. row 
    1e8c:	80 e8       	ldi	r24, 0x80	; 128
    1e8e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
  
  ADCconfig.U_Bandgap = ADC_internal_reference;	// set internal reference voltage for ADC
    1e92:	85 ee       	ldi	r24, 0xE5	; 229
    1e94:	91 e0       	ldi	r25, 0x01	; 1
    1e96:	0e 94 57 1f 	call	0x3eae	; 0x3eae <__eerd_byte_m168>
    1e9a:	99 27       	eor	r25, r25
    1e9c:	87 fd       	sbrc	r24, 7
    1e9e:	90 95       	com	r25
    1ea0:	20 91 44 01 	lds	r18, 0x0144
    1ea4:	30 91 45 01 	lds	r19, 0x0145
    1ea8:	82 0f       	add	r24, r18
    1eaa:	93 1f       	adc	r25, r19
    1eac:	90 93 3f 01 	sts	0x013F, r25
    1eb0:	80 93 3e 01 	sts	0x013E, r24

#ifdef BAT_CHECK
  // Battery check is selected
  ReadADC(TPBAT);	//Dummy-Readout
    1eb4:	85 e0       	ldi	r24, 0x05	; 5
    1eb6:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
  trans.uBE[0] = W5msReadADC(TPBAT); 	//with 5V reference
    1eba:	85 e0       	ldi	r24, 0x05	; 5
    1ebc:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
    1ec0:	90 93 58 01 	sts	0x0158, r25
    1ec4:	80 93 57 01 	sts	0x0157, r24
  lcd_fix_string(Bat_str);		//output: "Bat. "
    1ec8:	8d ee       	ldi	r24, 0xED	; 237
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
  // display Battery voltage
  // The divisor to get the voltage in 0.01V units is ((10*33)/133) witch is about 2.4812
  // A good result can be get with multiply by 4 and divide by 10 (about 0.75%).
//  cap.cval = (trans.uBE[0]*4)/10+((BAT_OUT+5)/10); // usually output only 2 digits
//  DisplayValue(cap.cval,-2,'V',2);		// Display 2 Digits of this 10mV units
  cap.cval = (trans.uBE[0]*4)+BAT_OUT;		// usually output only 2 digits
    1ed0:	60 91 57 01 	lds	r22, 0x0157
    1ed4:	70 91 58 01 	lds	r23, 0x0158
    1ed8:	66 0f       	add	r22, r22
    1eda:	77 1f       	adc	r23, r23
    1edc:	66 0f       	add	r22, r22
    1ede:	77 1f       	adc	r23, r23
    1ee0:	6a 56       	subi	r22, 0x6A	; 106
    1ee2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	60 93 62 01 	sts	0x0162, r22
    1eec:	70 93 63 01 	sts	0x0163, r23
    1ef0:	80 93 64 01 	sts	0x0164, r24
    1ef4:	90 93 65 01 	sts	0x0165, r25
  DisplayValue(cap.cval,-3,'V',2);		// Display 2 Digits of this 10mV units
    1ef8:	4d ef       	ldi	r20, 0xFD	; 253
    1efa:	26 e5       	ldi	r18, 0x56	; 86
    1efc:	02 e0       	ldi	r16, 0x02	; 2
    1efe:	0e 94 81 02 	call	0x502	; 0x502 <DisplayValue>
  lcd_space();
    1f02:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_space>
  // less than 1.3 V only .1V difference to Warn-Level
  #define WARN_LEVEL (((unsigned long)(BAT_POOR+100)*(unsigned long)33)/133)
 #endif
 #define POOR_LEVEL (((unsigned long)(BAT_POOR)*(unsigned long)33)/133)
  // check the battery voltage
  if (trans.uBE[0] <  WARN_LEVEL) {
    1f06:	80 91 57 01 	lds	r24, 0x0157
    1f0a:	90 91 58 01 	lds	r25, 0x0158
    1f0e:	26 e0       	ldi	r18, 0x06	; 6
    1f10:	8a 3f       	cpi	r24, 0xFA	; 250
    1f12:	92 07       	cpc	r25, r18
    1f14:	a8 f4       	brcc	.+42     	; 0x1f40 <main+0x196>
     //Vcc < 7,3V; show Warning 
     if(trans.uBE[0] < POOR_LEVEL) {	
    1f16:	26 e0       	ldi	r18, 0x06	; 6
    1f18:	83 33       	cpi	r24, 0x33	; 51
    1f1a:	92 07       	cpc	r25, r18
    1f1c:	70 f4       	brcc	.+28     	; 0x1f3a <main+0x190>
        //Vcc <6,3V; no proper operation is possible
        lcd_fix_string(BatEmpty);	//Battery empty!
    1f1e:	8a e6       	ldi	r24, 0x6A	; 106
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
        wait_about2s();
    1f26:	80 e9       	ldi	r24, 0x90	; 144
    1f28:	91 e0       	ldi	r25, 0x01	; 1
    1f2a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>
        PORTD = 0;			//switch power off
    1f2e:	1b b8       	out	0x0b, r1	; 11
  }
#else
  goto start;	// POWER_OFF not selected, repeat measurement
#endif
  return 0;
}   // end main
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	1f 91       	pop	r17
    1f36:	0f 91       	pop	r16
    1f38:	08 95       	ret
        lcd_fix_string(BatEmpty);	//Battery empty!
        wait_about2s();
        PORTD = 0;			//switch power off
        return 0;
     }
     lcd_fix_string(BatWeak);		//Battery weak
    1f3a:	85 e6       	ldi	r24, 0x65	; 101
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <main+0x19a>
  } else { // Battery-voltage OK
     lcd_fix_string(OK_str); 		// "OK"
    1f40:	83 ef       	ldi	r24, 0xF3	; 243
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
  }
#else
  lcd_fix_string(VERSION_str);		// if no Battery check, Version .. in row 1
#endif
#ifdef WDT_enabled
  wdt_enable(WDTO_2S);		//Watchdog on
    1f48:	2f e0       	ldi	r18, 0x0F	; 15
    1f4a:	88 e1       	ldi	r24, 0x18	; 24
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	a8 95       	wdr
    1f54:	80 93 60 00 	sts	0x0060, r24
    1f58:	0f be       	out	0x3f, r0	; 63
    1f5a:	20 93 60 00 	sts	0x0060, r18
#endif

//  wait_about1s();			// add more time for reading batterie voltage
  // begin tests
#ifdef AUTO_RH
  RefVoltage();			//compute RHmultip = f(reference voltage)
    1f5e:	0e 94 37 02 	call	0x46e	; 0x46e <RefVoltage>
#endif
#if FLASHEND > 0x1fff
  if (WithReference) {
    1f62:	80 91 49 01 	lds	r24, 0x0149
    1f66:	88 23       	and	r24, r24
    1f68:	f1 f0       	breq	.+60     	; 0x1fa6 <main+0x1fc>
     /* 2.5V precision reference is checked OK */
     if ((mess_count == 0) && (empty_count == 0)) {
    1f6a:	80 91 0b 01 	lds	r24, 0x010B
    1f6e:	88 23       	and	r24, r24
    1f70:	d1 f4       	brne	.+52     	; 0x1fa6 <main+0x1fc>
    1f72:	80 91 4a 01 	lds	r24, 0x014A
    1f76:	88 23       	and	r24, r24
    1f78:	b1 f4       	brne	.+44     	; 0x1fa6 <main+0x1fc>
         /* display VCC= only first time */
         lcd_line2();
    1f7a:	80 ec       	ldi	r24, 0xC0	; 192
    1f7c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
         lcd_fix_string(VCC_str);		// VCC=
    1f80:	8f e2       	ldi	r24, 0x2F	; 47
    1f82:	91 e0       	ldi	r25, 0x01	; 1
    1f84:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
         DisplayValue(ADCconfig.U_AVCC,-3,'V',3);	// Display 3 Digits of this mV units
    1f88:	60 91 40 01 	lds	r22, 0x0140
    1f8c:	70 91 41 01 	lds	r23, 0x0141
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	4d ef       	ldi	r20, 0xFD	; 253
    1f96:	26 e5       	ldi	r18, 0x56	; 86
    1f98:	03 e0       	ldi	r16, 0x03	; 3
    1f9a:	0e 94 81 02 	call	0x502	; 0x502 <DisplayValue>
//         lcd_space();
//         DisplayValue(RRpinMI,-1,LCD_CHAR_OMEGA,4);
         wait_about1s();
    1f9e:	88 ec       	ldi	r24, 0xC8	; 200
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>
     DisplayValue(trans.uBE[1]*10,-3,'V',3);	// Display 3 Digits of this mV units
     wait_about300ms();
  }
#endif

  lcd_line2();			//LCD position row2, column 1
    1fa6:	80 ec       	ldi	r24, 0xC0	; 192
    1fa8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
  lcd_fix_string(TestRunning);		//String: testing...
    1fac:	8a e5       	ldi	r24, 0x5A	; 90
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
#ifndef DebugOut
  lcd_line2();			//LCD position row 2, column 1
    1fb4:	80 ec       	ldi	r24, 0xC0	; 192
    1fb6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
#endif
  EntladePins();		// discharge all capacitors!
    1fba:	0e 94 9c 01 	call	0x338	; 0x338 <EntladePins>
  if(PartFound == PART_CELL) {
    1fbe:	80 91 07 01 	lds	r24, 0x0107
    1fc2:	88 30       	cpi	r24, 0x08	; 8
    1fc4:	39 f4       	brne	.+14     	; 0x1fd4 <main+0x22a>
    lcd_clear();
    1fc6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_clear>
    lcd_fix_string(Cell_str);	// display "Cell!"
    1fca:	89 e2       	ldi	r24, 0x29	; 41
    1fcc:	91 e0       	ldi	r25, 0x01	; 1
    1fce:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
    goto end2;
    1fd2:	9c c3       	rjmp	.+1848   	; 0x270c <main+0x962>
  }

#ifdef CHECK_CALL
  AutoCheck();			//check, if selftest should be done
    1fd4:	0e 94 aa 0a 	call	0x1554	; 0x1554 <AutoCheck>
#endif
     
  // check all 6 combinations for the 3 pins 
//         High  Low  Tri
  CheckPins(TP1, TP2, TP3);
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	61 e0       	ldi	r22, 0x01	; 1
    1fdc:	42 e0       	ldi	r20, 0x02	; 2
    1fde:	0e 94 bb 03 	call	0x776	; 0x776 <CheckPins>
  CheckPins(TP2, TP1, TP3);
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	60 e0       	ldi	r22, 0x00	; 0
    1fe6:	42 e0       	ldi	r20, 0x02	; 2
    1fe8:	0e 94 bb 03 	call	0x776	; 0x776 <CheckPins>

  CheckPins(TP1, TP3, TP2);
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	62 e0       	ldi	r22, 0x02	; 2
    1ff0:	41 e0       	ldi	r20, 0x01	; 1
    1ff2:	0e 94 bb 03 	call	0x776	; 0x776 <CheckPins>
  CheckPins(TP3, TP1, TP2);
    1ff6:	82 e0       	ldi	r24, 0x02	; 2
    1ff8:	60 e0       	ldi	r22, 0x00	; 0
    1ffa:	41 e0       	ldi	r20, 0x01	; 1
    1ffc:	0e 94 bb 03 	call	0x776	; 0x776 <CheckPins>

  CheckPins(TP2, TP3, TP1);
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	62 e0       	ldi	r22, 0x02	; 2
    2004:	40 e0       	ldi	r20, 0x00	; 0
    2006:	0e 94 bb 03 	call	0x776	; 0x776 <CheckPins>
  CheckPins(TP3, TP2, TP1);
    200a:	82 e0       	ldi	r24, 0x02	; 2
    200c:	61 e0       	ldi	r22, 0x01	; 1
    200e:	40 e0       	ldi	r20, 0x00	; 0
    2010:	0e 94 bb 03 	call	0x776	; 0x776 <CheckPins>
  
  //separate check if is is a capacitor
  if(((PartFound == PART_NONE) || (PartFound == PART_RESISTOR) || (PartFound == PART_DIODE)) ) {
    2014:	80 91 07 01 	lds	r24, 0x0107
    2018:	88 23       	and	r24, r24
    201a:	21 f0       	breq	.+8      	; 0x2024 <main+0x27a>
    201c:	86 30       	cpi	r24, 0x06	; 6
    201e:	11 f0       	breq	.+4      	; 0x2024 <main+0x27a>
    2020:	81 30       	cpi	r24, 0x01	; 1
    2022:	d9 f4       	brne	.+54     	; 0x205a <main+0x2b0>
     EntladePins();		// discharge capacities
    2024:	0e 94 9c 01 	call	0x338	; 0x338 <EntladePins>
     //measurement of capacities in all 3 combinations
     cap.cval_max = 0;		// set max to zero
    2028:	10 92 66 01 	sts	0x0166, r1
    202c:	10 92 67 01 	sts	0x0167, r1
    2030:	10 92 68 01 	sts	0x0168, r1
    2034:	10 92 69 01 	sts	0x0169, r1
     cap.cpre_max = -12;	// set max to pF unit
    2038:	84 ef       	ldi	r24, 0xF4	; 244
    203a:	80 93 75 01 	sts	0x0175, r24
     ReadCapacity(TP3, TP1);
    203e:	82 e0       	ldi	r24, 0x02	; 2
    2040:	60 e0       	ldi	r22, 0x00	; 0
    2042:	0e 94 80 14 	call	0x2900	; 0x2900 <ReadCapacity>
     ReadCapacity(TP3, TP2);
    2046:	82 e0       	ldi	r24, 0x02	; 2
    2048:	61 e0       	ldi	r22, 0x01	; 1
    204a:	0e 94 80 14 	call	0x2900	; 0x2900 <ReadCapacity>
     ReadCapacity(TP2, TP1);
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	60 e0       	ldi	r22, 0x00	; 0
    2052:	0e 94 80 14 	call	0x2900	; 0x2900 <ReadCapacity>

#if FLASHEND > 0x1fff
     ReadInductance();			// measure inductance
    2056:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <ReadInductance>
#endif
  }
  //All checks are done, output result to display
  lcd_clear();
    205a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_clear>
  if(PartFound == PART_DIODE) {
    205e:	80 91 07 01 	lds	r24, 0x0107
    2062:	81 30       	cpi	r24, 0x01	; 1
    2064:	09 f0       	breq	.+2      	; 0x2068 <main+0x2be>
    2066:	0d c1       	rjmp	.+538    	; 0x2282 <main+0x4d8>
     if(NumOfDiodes == 1) {		//single Diode
    2068:	90 91 05 01 	lds	r25, 0x0105
    206c:	91 30       	cpi	r25, 0x01	; 1
    206e:	b9 f5       	brne	.+110    	; 0x20de <main+0x334>
        lcd_fix_string(Diode);		//"Diode: "
    2070:	8f e7       	ldi	r24, 0x7F	; 127
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
           lcd_fix_string(KatAn);	//"-|<-"
           lcd_testpin(diodes[0].Anode);
        }
 #else
        // the higher test pin number is right side
        if (diodes[0].Anode < diodes[0].Cathode) {
    2078:	90 91 78 01 	lds	r25, 0x0178
    207c:	80 91 79 01 	lds	r24, 0x0179
    2080:	98 17       	cp	r25, r24
    2082:	50 f4       	brcc	.+20     	; 0x2098 <main+0x2ee>
           lcd_testpin(diodes[0].Anode);
    2084:	89 2f       	mov	r24, r25
    2086:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    208a:	85 e4       	ldi	r24, 0x45	; 69
    208c:	91 e0       	ldi	r25, 0x01	; 1
    208e:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
           lcd_testpin(diodes[0].Cathode);
    2092:	80 91 79 01 	lds	r24, 0x0179
    2096:	08 c0       	rjmp	.+16     	; 0x20a8 <main+0x2fe>
        } else {
           lcd_testpin(diodes[0].Cathode);
    2098:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    209c:	89 e4       	ldi	r24, 0x49	; 73
    209e:	91 e0       	ldi	r25, 0x01	; 1
    20a0:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    20a4:	80 91 78 01 	lds	r24, 0x0178
    20a8:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_testpin>
        // too less memory to sort the pins
        lcd_testpin(diodes[0].Anode);
        lcd_fix_string(AnKat);		//"->|-"
        lcd_testpin(diodes[0].Cathode);
#endif
        UfAusgabe(0x70);
    20ac:	80 e7       	ldi	r24, 0x70	; 112
    20ae:	0e 94 69 03 	call	0x6d2	; 0x6d2 <UfAusgabe>
        lcd_fix_string(GateCap_str);	//"C="
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	91 e0       	ldi	r25, 0x01	; 1
    20b6:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
        ReadCapacity(diodes[0].Cathode,diodes[0].Anode);	// Capacity opposite flow direction
    20ba:	80 91 79 01 	lds	r24, 0x0179
    20be:	60 91 78 01 	lds	r22, 0x0178
    20c2:	0e 94 80 14 	call	0x2900	; 0x2900 <ReadCapacity>
        DisplayValue(cap.cval,cap.cpre,'F',3);
    20c6:	60 91 62 01 	lds	r22, 0x0162
    20ca:	70 91 63 01 	lds	r23, 0x0163
    20ce:	80 91 64 01 	lds	r24, 0x0164
    20d2:	90 91 65 01 	lds	r25, 0x0165
    20d6:	40 91 74 01 	lds	r20, 0x0174
    20da:	26 e4       	ldi	r18, 0x46	; 70
    20dc:	83 c2       	rjmp	.+1286   	; 0x25e4 <main+0x83a>
        goto end;
     } else if(NumOfDiodes == 2) { // double diode
    20de:	92 30       	cpi	r25, 0x02	; 2
    20e0:	09 f0       	breq	.+2      	; 0x20e4 <main+0x33a>
    20e2:	4c c0       	rjmp	.+152    	; 0x217c <main+0x3d2>
        lcd_data('2');
    20e4:	82 e3       	ldi	r24, 0x32	; 50
    20e6:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
        lcd_fix_string(Dioden);		//"diodes "
    20ea:	8d e4       	ldi	r24, 0x4D	; 77
    20ec:	91 e0       	ldi	r25, 0x01	; 1
    20ee:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
        if(diodes[0].Anode == diodes[1].Anode) { //Common Anode
    20f2:	90 91 78 01 	lds	r25, 0x0178
    20f6:	20 91 7c 01 	lds	r18, 0x017C
    20fa:	92 17       	cp	r25, r18
    20fc:	59 f4       	brne	.+22     	; 0x2114 <main+0x36a>
           lcd_testpin(diodes[0].Cathode);
    20fe:	80 91 79 01 	lds	r24, 0x0179
    2102:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    2106:	89 e4       	ldi	r24, 0x49	; 73
    2108:	91 e0       	ldi	r25, 0x01	; 1
    210a:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    210e:	80 91 78 01 	lds	r24, 0x0178
    2112:	2b c0       	rjmp	.+86     	; 0x216a <main+0x3c0>
           lcd_fix_string(AnKat);	//"->|-"
           lcd_testpin(diodes[1].Cathode);
           UfAusgabe(0x01);
           goto end;
        } else if(diodes[0].Cathode == diodes[1].Cathode) { //Common Cathode
    2114:	30 91 79 01 	lds	r19, 0x0179
    2118:	80 91 7d 01 	lds	r24, 0x017D
    211c:	38 17       	cp	r19, r24
    211e:	b9 f4       	brne	.+46     	; 0x214e <main+0x3a4>
           lcd_testpin(diodes[0].Anode);
    2120:	89 2f       	mov	r24, r25
    2122:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2126:	85 e4       	ldi	r24, 0x45	; 69
    2128:	91 e0       	ldi	r25, 0x01	; 1
    212a:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
	   lcd_testpin(diodes[0].Cathode);
    212e:	80 91 79 01 	lds	r24, 0x0179
    2132:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    2136:	89 e4       	ldi	r24, 0x49	; 73
    2138:	91 e0       	ldi	r25, 0x01	; 1
    213a:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
           lcd_testpin(diodes[1].Anode);
    213e:	80 91 7c 01 	lds	r24, 0x017C
    2142:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_testpin>
           UfAusgabe(0x01);
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	0e 94 69 03 	call	0x6d2	; 0x6d2 <UfAusgabe>
           goto end;
    214c:	d8 c2       	rjmp	.+1456   	; 0x26fe <main+0x954>
          }
        else if ((diodes[0].Cathode == diodes[1].Anode) && (diodes[1].Cathode == diodes[0].Anode)) {
    214e:	32 17       	cp	r19, r18
    2150:	09 f0       	breq	.+2      	; 0x2154 <main+0x3aa>
    2152:	a3 c2       	rjmp	.+1350   	; 0x269a <main+0x8f0>
    2154:	89 17       	cp	r24, r25
    2156:	09 f0       	breq	.+2      	; 0x215a <main+0x3b0>
    2158:	a0 c2       	rjmp	.+1344   	; 0x269a <main+0x8f0>
           //Antiparallel
           lcd_testpin(diodes[0].Anode);
    215a:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    215e:	85 e4       	ldi	r24, 0x45	; 69
    2160:	91 e0       	ldi	r25, 0x01	; 1
    2162:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
           lcd_testpin(diodes[0].Cathode);
    2166:	80 91 79 01 	lds	r24, 0x0179
    216a:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    216e:	85 e4       	ldi	r24, 0x45	; 69
    2170:	91 e0       	ldi	r25, 0x01	; 1
    2172:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
           lcd_testpin(diodes[1].Cathode);
    2176:	80 91 7d 01 	lds	r24, 0x017D
    217a:	e3 cf       	rjmp	.-58     	; 0x2142 <main+0x398>
           UfAusgabe(0x01);
           goto end;
        }
     } else if(NumOfDiodes == 3) {
    217c:	93 30       	cpi	r25, 0x03	; 3
    217e:	09 f0       	breq	.+2      	; 0x2182 <main+0x3d8>
    2180:	8c c2       	rjmp	.+1304   	; 0x269a <main+0x8f0>
        //Serial of 2 Diodes; was detected as 3 Diodes 
        trans.b = 3;
    2182:	90 93 5b 01 	sts	0x015B, r25
        trans.c = 3;
    2186:	90 93 5c 01 	sts	0x015C, r25
        /* Check for any constallation of 2 serial diodes:
          Only once the pin No of anyone Cathode is identical of another anode.
          two diodes in series is additionally detected as third big diode.
        */
        if(diodes[0].Cathode == diodes[1].Anode)
    218a:	50 91 79 01 	lds	r21, 0x0179
    218e:	90 91 7c 01 	lds	r25, 0x017C
    2192:	59 17       	cp	r21, r25
    2194:	21 f4       	brne	.+8      	; 0x219e <main+0x3f4>
          {
           trans.b = 0;
    2196:	10 92 5b 01 	sts	0x015B, r1
           trans.c = 1;
    219a:	80 93 5c 01 	sts	0x015C, r24
          }
        if(diodes[0].Anode == diodes[1].Cathode)
    219e:	40 91 78 01 	lds	r20, 0x0178
    21a2:	30 91 7d 01 	lds	r19, 0x017D
    21a6:	43 17       	cp	r20, r19
    21a8:	29 f4       	brne	.+10     	; 0x21b4 <main+0x40a>
          {
           trans.b = 1;
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	80 93 5b 01 	sts	0x015B, r24
           trans.c = 0;
    21b0:	10 92 5c 01 	sts	0x015C, r1
          }
        if(diodes[0].Cathode == diodes[2].Anode)
    21b4:	20 91 80 01 	lds	r18, 0x0180
    21b8:	52 17       	cp	r21, r18
    21ba:	29 f4       	brne	.+10     	; 0x21c6 <main+0x41c>
          {
           trans.b = 0;
    21bc:	10 92 5b 01 	sts	0x015B, r1
           trans.c = 2;
    21c0:	82 e0       	ldi	r24, 0x02	; 2
    21c2:	80 93 5c 01 	sts	0x015C, r24
          }
        if(diodes[0].Anode == diodes[2].Cathode)
    21c6:	80 91 81 01 	lds	r24, 0x0181
    21ca:	48 17       	cp	r20, r24
    21cc:	29 f4       	brne	.+10     	; 0x21d8 <main+0x42e>
          {
           trans.b = 2;
    21ce:	42 e0       	ldi	r20, 0x02	; 2
    21d0:	40 93 5b 01 	sts	0x015B, r20
           trans.c = 0;
    21d4:	10 92 5c 01 	sts	0x015C, r1
          }
        if(diodes[1].Cathode == diodes[2].Anode)
    21d8:	32 17       	cp	r19, r18
    21da:	31 f4       	brne	.+12     	; 0x21e8 <main+0x43e>
          {
           trans.b = 1;
    21dc:	21 e0       	ldi	r18, 0x01	; 1
    21de:	20 93 5b 01 	sts	0x015B, r18
           trans.c = 2;
    21e2:	22 e0       	ldi	r18, 0x02	; 2
    21e4:	20 93 5c 01 	sts	0x015C, r18
          }
        if(diodes[1].Anode == diodes[2].Cathode)
    21e8:	98 17       	cp	r25, r24
    21ea:	31 f4       	brne	.+12     	; 0x21f8 <main+0x44e>
          {
           trans.b = 2;
    21ec:	82 e0       	ldi	r24, 0x02	; 2
    21ee:	80 93 5b 01 	sts	0x015B, r24
           trans.c = 1;
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	80 93 5c 01 	sts	0x015C, r24
        lcd_testpin(diodes[2].Cathode);
        lcd_space();
        lcd_string(utoa(diodes[2].Voltage, outval, 10));
        lcd_line1();
#endif
        if((trans.b<3) && (trans.c<3)) {
    21f8:	80 91 5b 01 	lds	r24, 0x015B
    21fc:	83 30       	cpi	r24, 0x03	; 3
    21fe:	08 f0       	brcs	.+2      	; 0x2202 <main+0x458>
    2200:	4c c2       	rjmp	.+1176   	; 0x269a <main+0x8f0>
    2202:	80 91 5c 01 	lds	r24, 0x015C
    2206:	83 30       	cpi	r24, 0x03	; 3
    2208:	08 f0       	brcs	.+2      	; 0x220c <main+0x462>
    220a:	47 c2       	rjmp	.+1166   	; 0x269a <main+0x8f0>
           lcd_data('3');
    220c:	83 e3       	ldi	r24, 0x33	; 51
    220e:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
           lcd_fix_string(Dioden);	//"Diodes "
    2212:	8d e4       	ldi	r24, 0x4D	; 77
    2214:	91 e0       	ldi	r25, 0x01	; 1
    2216:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Anode);
    221a:	e0 91 5b 01 	lds	r30, 0x015B
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	ee 0f       	add	r30, r30
    2222:	ff 1f       	adc	r31, r31
    2224:	ee 0f       	add	r30, r30
    2226:	ff 1f       	adc	r31, r31
    2228:	e8 58       	subi	r30, 0x88	; 136
    222a:	fe 4f       	sbci	r31, 0xFE	; 254
    222c:	80 81       	ld	r24, Z
    222e:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2232:	85 e4       	ldi	r24, 0x45	; 69
    2234:	91 e0       	ldi	r25, 0x01	; 1
    2236:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Cathode);
    223a:	e0 91 5b 01 	lds	r30, 0x015B
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	ee 0f       	add	r30, r30
    2242:	ff 1f       	adc	r31, r31
    2244:	ee 0f       	add	r30, r30
    2246:	ff 1f       	adc	r31, r31
    2248:	e8 58       	subi	r30, 0x88	; 136
    224a:	fe 4f       	sbci	r31, 0xFE	; 254
    224c:	81 81       	ldd	r24, Z+1	; 0x01
    224e:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2252:	85 e4       	ldi	r24, 0x45	; 69
    2254:	91 e0       	ldi	r25, 0x01	; 1
    2256:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
           lcd_testpin(diodes[trans.c].Cathode);
    225a:	e0 91 5c 01 	lds	r30, 0x015C
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	ee 0f       	add	r30, r30
    2262:	ff 1f       	adc	r31, r31
    2264:	ee 0f       	add	r30, r30
    2266:	ff 1f       	adc	r31, r31
    2268:	e8 58       	subi	r30, 0x88	; 136
    226a:	fe 4f       	sbci	r31, 0xFE	; 254
    226c:	81 81       	ldd	r24, Z+1	; 0x01
    226e:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_testpin>
           UfAusgabe( (trans.b<<4)|trans.c);
    2272:	80 91 5b 01 	lds	r24, 0x015B
    2276:	82 95       	swap	r24
    2278:	80 7f       	andi	r24, 0xF0	; 240
    227a:	90 91 5c 01 	lds	r25, 0x015C
    227e:	89 2b       	or	r24, r25
    2280:	63 cf       	rjmp	.-314    	; 0x2148 <main+0x39e>
           goto end;
        }
     }
     // end (PartFound == PART_DIODE)
  } else if (PartFound == PART_TRANSISTOR) {
    2282:	82 30       	cpi	r24, 0x02	; 2
    2284:	09 f0       	breq	.+2      	; 0x2288 <main+0x4de>
    2286:	7d c0       	rjmp	.+250    	; 0x2382 <main+0x5d8>
    if(PartReady != 0) {
    2288:	80 91 04 01 	lds	r24, 0x0104
    228c:	88 23       	and	r24, r24
    228e:	71 f1       	breq	.+92     	; 0x22ec <main+0x542>
       if((trans.hfe[0]>trans.hfe[1])) {
    2290:	80 91 53 01 	lds	r24, 0x0153
    2294:	90 91 54 01 	lds	r25, 0x0154
    2298:	a0 91 55 01 	lds	r26, 0x0155
    229c:	b0 91 56 01 	lds	r27, 0x0156
    22a0:	20 91 4f 01 	lds	r18, 0x014F
    22a4:	30 91 50 01 	lds	r19, 0x0150
    22a8:	40 91 51 01 	lds	r20, 0x0151
    22ac:	50 91 52 01 	lds	r21, 0x0152
    22b0:	82 17       	cp	r24, r18
    22b2:	93 07       	cpc	r25, r19
    22b4:	a4 07       	cpc	r26, r20
    22b6:	b5 07       	cpc	r27, r21
    22b8:	48 f4       	brcc	.+18     	; 0x22cc <main+0x522>
          //if the amplification factor was higher at first testr: swap C and E !
          tmp = trans.c;
    22ba:	80 91 5c 01 	lds	r24, 0x015C
          trans.c = trans.e;
    22be:	90 91 5d 01 	lds	r25, 0x015D
    22c2:	90 93 5c 01 	sts	0x015C, r25
          trans.e = tmp;
    22c6:	80 93 5d 01 	sts	0x015D, r24
    22ca:	10 c0       	rjmp	.+32     	; 0x22ec <main+0x542>
       } else {
          trans.hfe[0] = trans.hfe[1];
    22cc:	80 93 4f 01 	sts	0x014F, r24
    22d0:	90 93 50 01 	sts	0x0150, r25
    22d4:	a0 93 51 01 	sts	0x0151, r26
    22d8:	b0 93 52 01 	sts	0x0152, r27
          trans.uBE[0] = trans.uBE[1];
    22dc:	80 91 59 01 	lds	r24, 0x0159
    22e0:	90 91 5a 01 	lds	r25, 0x015A
    22e4:	90 93 58 01 	sts	0x0158, r25
    22e8:	80 93 57 01 	sts	0x0157, r24
       }
    }

    if(PartMode == PART_MODE_NPN) {
    22ec:	80 91 06 01 	lds	r24, 0x0106
    22f0:	81 30       	cpi	r24, 0x01	; 1
    22f2:	19 f4       	brne	.+6      	; 0x22fa <main+0x550>
       lcd_fix_string(NPN_str);		//"NPN "
    22f4:	86 e0       	ldi	r24, 0x06	; 6
    22f6:	91 e0       	ldi	r25, 0x01	; 1
    22f8:	02 c0       	rjmp	.+4      	; 0x22fe <main+0x554>
    } else {
       lcd_fix_string(PNP_str);		//"PNP "
    22fa:	8b e0       	ldi	r24, 0x0B	; 11
    22fc:	91 e0       	ldi	r25, 0x01	; 1
    22fe:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
    }
    if( NumOfDiodes > 2) {	//Transistor with protection diode
    2302:	80 91 05 01 	lds	r24, 0x0105
    2306:	83 30       	cpi	r24, 0x03	; 3
    2308:	a0 f0       	brcs	.+40     	; 0x2332 <main+0x588>
       // Layout with EBC= style
       if(PartMode == PART_MODE_NPN)
 #endif
#else
       // Layout with 123= style
       if (((PartMode == PART_MODE_NPN) && (trans.c > trans.e)) || ((PartMode != PART_MODE_NPN) && (trans.c < trans.e)))
    230a:	20 91 06 01 	lds	r18, 0x0106
    230e:	90 91 5c 01 	lds	r25, 0x015C
    2312:	80 91 5d 01 	lds	r24, 0x015D
    2316:	21 30       	cpi	r18, 0x01	; 1
    2318:	19 f4       	brne	.+6      	; 0x2320 <main+0x576>
    231a:	89 17       	cp	r24, r25
    231c:	18 f0       	brcs	.+6      	; 0x2324 <main+0x57a>
    231e:	05 c0       	rjmp	.+10     	; 0x232a <main+0x580>
    2320:	98 17       	cp	r25, r24
    2322:	18 f4       	brcc	.+6      	; 0x232a <main+0x580>
#endif
       {
          lcd_fix_string(AnKat);	//"->|-"
    2324:	85 e4       	ldi	r24, 0x45	; 69
    2326:	91 e0       	ldi	r25, 0x01	; 1
    2328:	02 c0       	rjmp	.+4      	; 0x232e <main+0x584>
       } else {
          lcd_fix_string(KatAn);	//"-|<-"
    232a:	89 e4       	ldi	r24, 0x49	; 73
    232c:	91 e0       	ldi	r25, 0x01	; 1
    232e:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
       }
    }
    PinLayout('E','B','C'); 		//  EBC= or 123=...
    2332:	85 e4       	ldi	r24, 0x45	; 69
    2334:	62 e4       	ldi	r22, 0x42	; 66
    2336:	43 e4       	ldi	r20, 0x43	; 67
    2338:	0e 94 77 0a 	call	0x14ee	; 0x14ee <PinLayout>
    lcd_line2(); //2. row 
    233c:	80 ec       	ldi	r24, 0xC0	; 192
    233e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
    lcd_fix_string(hfe_str);		//"B="  (hFE)
    2342:	83 e0       	ldi	r24, 0x03	; 3
    2344:	91 e0       	ldi	r25, 0x01	; 1
    2346:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
    DisplayValue(trans.hfe[0],0,0,3);
    234a:	60 91 4f 01 	lds	r22, 0x014F
    234e:	70 91 50 01 	lds	r23, 0x0150
    2352:	80 91 51 01 	lds	r24, 0x0151
    2356:	90 91 52 01 	lds	r25, 0x0152
    235a:	40 e0       	ldi	r20, 0x00	; 0
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	03 e0       	ldi	r16, 0x03	; 3
    2360:	0e 94 81 02 	call	0x502	; 0x502 <DisplayValue>
    lcd_space();
    2364:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_space>

    lcd_fix_string(Uf_str);		//"Uf="
    2368:	86 e1       	ldi	r24, 0x16	; 22
    236a:	91 e0       	ldi	r25, 0x01	; 1
    236c:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
    DisplayValue(trans.uBE[0],-3,'V',3);
    2370:	60 91 57 01 	lds	r22, 0x0157
    2374:	70 91 58 01 	lds	r23, 0x0158
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	4d ef       	ldi	r20, 0xFD	; 253
    237e:	26 e5       	ldi	r18, 0x56	; 86
    2380:	32 c1       	rjmp	.+612    	; 0x25e6 <main+0x83c>
    goto end;
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    2382:	83 30       	cpi	r24, 0x03	; 3
    2384:	09 f0       	breq	.+2      	; 0x2388 <main+0x5de>
    2386:	7f c0       	rjmp	.+254    	; 0x2486 <main+0x6dc>
    if(PartMode&1) {
    2388:	80 91 06 01 	lds	r24, 0x0106
    238c:	80 ff       	sbrs	r24, 0
    238e:	02 c0       	rjmp	.+4      	; 0x2394 <main+0x5ea>
       lcd_data('P');			//P-channel
    2390:	80 e5       	ldi	r24, 0x50	; 80
    2392:	01 c0       	rjmp	.+2      	; 0x2396 <main+0x5ec>
    } else {
       lcd_data('N');			//N-channel
    2394:	8e e4       	ldi	r24, 0x4E	; 78
    2396:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
    }
    lcd_data('-');
    239a:	8d e2       	ldi	r24, 0x2D	; 45
    239c:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>

    tmp = PartMode/2;
    23a0:	80 91 06 01 	lds	r24, 0x0106
    23a4:	86 95       	lsr	r24
    if (tmp == (PART_MODE_N_D_MOS/2)) {
    23a6:	82 30       	cpi	r24, 0x02	; 2
    23a8:	11 f4       	brne	.+4      	; 0x23ae <main+0x604>
       lcd_data('D');			// N-D
    23aa:	84 e4       	ldi	r24, 0x44	; 68
    23ac:	03 c0       	rjmp	.+6      	; 0x23b4 <main+0x60a>
    }
    if (tmp == (PART_MODE_N_E_MOS/2)) {
    23ae:	81 30       	cpi	r24, 0x01	; 1
    23b0:	21 f4       	brne	.+8      	; 0x23ba <main+0x610>
       lcd_data('E');			// N-E
    23b2:	85 e4       	ldi	r24, 0x45	; 69
    23b4:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
    23b8:	05 c0       	rjmp	.+10     	; 0x23c4 <main+0x61a>
    }
    if (tmp == (PART_MODE_N_JFET/2)) {
    23ba:	83 30       	cpi	r24, 0x03	; 3
    23bc:	19 f4       	brne	.+6      	; 0x23c4 <main+0x61a>
       lcd_fix_string(jfet_str);	//"JFET"
    23be:	8b ef       	ldi	r24, 0xFB	; 251
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	02 c0       	rjmp	.+4      	; 0x23c8 <main+0x61e>
    } else {
       lcd_fix_string(mosfet_str);	//"-MOS "
    23c4:	86 ef       	ldi	r24, 0xF6	; 246
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
    }
    PinLayout('S','G','D'); 		//  SGD= or 123=...
    23cc:	83 e5       	ldi	r24, 0x53	; 83
    23ce:	67 e4       	ldi	r22, 0x47	; 71
    23d0:	44 e4       	ldi	r20, 0x44	; 68
    23d2:	0e 94 77 0a 	call	0x14ee	; 0x14ee <PinLayout>
    if((NumOfDiodes > 0) && (PartMode < PART_MODE_N_D_MOS)) {
    23d6:	80 91 05 01 	lds	r24, 0x0105
    23da:	88 23       	and	r24, r24
    23dc:	a1 f0       	breq	.+40     	; 0x2406 <main+0x65c>
    23de:	20 91 06 01 	lds	r18, 0x0106
    23e2:	24 30       	cpi	r18, 0x04	; 4
    23e4:	80 f4       	brcc	.+32     	; 0x2406 <main+0x65c>
    23e6:	90 91 5c 01 	lds	r25, 0x015C
    23ea:	80 91 5d 01 	lds	r24, 0x015D
       // Layout with SGD= style
       if (PartMode&1) /* N or P MOS */
 #endif
#else
       // layout with 123= style
       if (((PartMode&1) && (trans.c < trans.e)) || ((!(PartMode&1)) && (trans.c > trans.e)))
    23ee:	20 ff       	sbrs	r18, 0
    23f0:	03 c0       	rjmp	.+6      	; 0x23f8 <main+0x64e>
    23f2:	98 17       	cp	r25, r24
    23f4:	18 f0       	brcs	.+6      	; 0x23fc <main+0x652>
    23f6:	04 c0       	rjmp	.+8      	; 0x2400 <main+0x656>
    23f8:	89 17       	cp	r24, r25
    23fa:	10 f4       	brcc	.+4      	; 0x2400 <main+0x656>
#endif
       {
          lcd_data(LCD_CHAR_DIODE1);	//show Diode symbol >|
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	01 c0       	rjmp	.+2      	; 0x2402 <main+0x658>
       } else {
          lcd_data(LCD_CHAR_DIODE2);	//show Diode symbol |<
    2400:	82 e0       	ldi	r24, 0x02	; 2
    2402:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
       }
    }
    lcd_line2();			//2. Row
    2406:	80 ec       	ldi	r24, 0xC0	; 192
    2408:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
    if(PartMode < PART_MODE_N_D_MOS) {	//enhancement-MOSFET
    240c:	80 91 06 01 	lds	r24, 0x0106
    2410:	84 30       	cpi	r24, 0x04	; 4
    2412:	d8 f4       	brcc	.+54     	; 0x244a <main+0x6a0>
	//Gate capacity
       lcd_fix_string(GateCap_str);		//"C="
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	91 e0       	ldi	r25, 0x01	; 1
    2418:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
       ReadCapacity(trans.b,trans.e);	//measure capacity
    241c:	80 91 5b 01 	lds	r24, 0x015B
    2420:	60 91 5d 01 	lds	r22, 0x015D
    2424:	0e 94 80 14 	call	0x2900	; 0x2900 <ReadCapacity>
       DisplayValue(cap.cval,cap.cpre,'F',3);
    2428:	60 91 62 01 	lds	r22, 0x0162
    242c:	70 91 63 01 	lds	r23, 0x0163
    2430:	80 91 64 01 	lds	r24, 0x0164
    2434:	90 91 65 01 	lds	r25, 0x0165
    2438:	40 91 74 01 	lds	r20, 0x0174
    243c:	26 e4       	ldi	r18, 0x46	; 70
    243e:	03 e0       	ldi	r16, 0x03	; 3
    2440:	0e 94 81 02 	call	0x502	; 0x502 <DisplayValue>
       lcd_fix_string(vt_str);		// "Vt="
    2444:	8a e1       	ldi	r24, 0x1A	; 26
    2446:	91 e0       	ldi	r25, 0x01	; 1
    2448:	13 c0       	rjmp	.+38     	; 0x2470 <main+0x6c6>
    } else {
       lcd_data('I');
    244a:	89 e4       	ldi	r24, 0x49	; 73
    244c:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
       lcd_data('=');
    2450:	8d e3       	ldi	r24, 0x3D	; 61
    2452:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
       DisplayValue(trans.uBE[1],-5,'A',2);
    2456:	60 91 59 01 	lds	r22, 0x0159
    245a:	70 91 5a 01 	lds	r23, 0x015A
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	4b ef       	ldi	r20, 0xFB	; 251
    2464:	21 e4       	ldi	r18, 0x41	; 65
    2466:	02 e0       	ldi	r16, 0x02	; 2
    2468:	0e 94 81 02 	call	0x502	; 0x502 <DisplayValue>
       lcd_fix_string(Vgs_str);		// " Vgs="
    246c:	8f e1       	ldi	r24, 0x1F	; 31
    246e:	91 e0       	ldi	r25, 0x01	; 1
    2470:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
    }
    //Gate-threshold voltage
    DisplayValue(gthvoltage,-3,'V',3);
    2474:	60 91 5f 01 	lds	r22, 0x015F
    2478:	70 91 60 01 	lds	r23, 0x0160
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	4d ef       	ldi	r20, 0xFD	; 253
    2482:	26 e5       	ldi	r18, 0x56	; 86
    2484:	af c0       	rjmp	.+350    	; 0x25e4 <main+0x83a>
    goto end;
    // end (PartFound == PART_FET)
  } else if (PartFound == PART_THYRISTOR) {
    2486:	85 30       	cpi	r24, 0x05	; 5
    2488:	19 f4       	brne	.+6      	; 0x2490 <main+0x6e6>
    lcd_fix_string(Thyristor);		//"Thyristor"
    248a:	8d e8       	ldi	r24, 0x8D	; 141
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	04 c0       	rjmp	.+8      	; 0x2498 <main+0x6ee>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    2490:	84 30       	cpi	r24, 0x04	; 4
    2492:	69 f4       	brne	.+26     	; 0x24ae <main+0x704>
    lcd_fix_string(Triac);		//"Triac"
    2494:	87 e8       	ldi	r24, 0x87	; 135
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
  mess_count = 0;
  goto end2;


gakAusgabe:
  lcd_line2(); //2. row 
    249c:	80 ec       	ldi	r24, 0xC0	; 192
    249e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
  PinLayout(Cathode_char,'G','A'); 	// CGA= or 123=...
    24a2:	83 e4       	ldi	r24, 0x43	; 67
    24a4:	67 e4       	ldi	r22, 0x47	; 71
    24a6:	41 e4       	ldi	r20, 0x41	; 65
    24a8:	0e 94 77 0a 	call	0x14ee	; 0x14ee <PinLayout>
    24ac:	28 c1       	rjmp	.+592    	; 0x26fe <main+0x954>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    lcd_fix_string(Triac);		//"Triac"
    goto gakAusgabe;
  }
  else if(PartFound == PART_RESISTOR) {
    24ae:	86 30       	cpi	r24, 0x06	; 6
    24b0:	09 f0       	breq	.+2      	; 0x24b4 <main+0x70a>
    24b2:	bc c0       	rjmp	.+376    	; 0x262c <main+0x882>
    if (ResistorsFound == 1) { // single resistor
    24b4:	60 91 5e 01 	lds	r22, 0x015E
    24b8:	61 30       	cpi	r22, 0x01	; 1
    24ba:	69 f4       	brne	.+26     	; 0x24d6 <main+0x72c>
       lcd_testpin(resis[0].rb);  	//Pin-number 1
    24bc:	80 91 22 01 	lds	r24, 0x0122
    24c0:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_testpin>
       lcd_fix_string(Resistor_str);
    24c4:	82 e5       	ldi	r24, 0x52	; 82
    24c6:	91 e0       	ldi	r25, 0x01	; 1
    24c8:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
       lcd_testpin(resis[0].ra);		//Pin-number 2
    24cc:	80 91 21 01 	lds	r24, 0x0121
    24d0:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_testpin>
    24d4:	61 c0       	rjmp	.+194    	; 0x2598 <main+0x7ee>
    } else { // R-Max suchen
       ii = 0;
    24d6:	10 92 4b 01 	sts	0x014B, r1
       if (resis[1].rx > resis[0].rx)
    24da:	20 91 24 01 	lds	r18, 0x0124
    24de:	30 91 25 01 	lds	r19, 0x0125
    24e2:	40 91 26 01 	lds	r20, 0x0126
    24e6:	50 91 27 01 	lds	r21, 0x0127
    24ea:	80 91 18 01 	lds	r24, 0x0118
    24ee:	90 91 19 01 	lds	r25, 0x0119
    24f2:	a0 91 1a 01 	lds	r26, 0x011A
    24f6:	b0 91 1b 01 	lds	r27, 0x011B
    24fa:	82 17       	cp	r24, r18
    24fc:	93 07       	cpc	r25, r19
    24fe:	a4 07       	cpc	r26, r20
    2500:	b5 07       	cpc	r27, r21
    2502:	18 f4       	brcc	.+6      	; 0x250a <main+0x760>
          ii = 1;
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	80 93 4b 01 	sts	0x014B, r24
       if (ResistorsFound == 2) {
    250a:	62 30       	cpi	r22, 0x02	; 2
    250c:	19 f4       	brne	.+6      	; 0x2514 <main+0x76a>
          ii = 2;
    250e:	60 93 4b 01 	sts	0x014B, r22
    2512:	22 c0       	rjmp	.+68     	; 0x2558 <main+0x7ae>
       } else {
          if (resis[2].rx > resis[ii].rx) {
    2514:	80 91 4b 01 	lds	r24, 0x014B
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	fc 01       	movw	r30, r24
    251c:	ee 0f       	add	r30, r30
    251e:	ff 1f       	adc	r31, r31
    2520:	e8 0f       	add	r30, r24
    2522:	f9 1f       	adc	r31, r25
    2524:	ee 0f       	add	r30, r30
    2526:	ff 1f       	adc	r31, r31
    2528:	ee 0f       	add	r30, r30
    252a:	ff 1f       	adc	r31, r31
    252c:	e8 5e       	subi	r30, 0xE8	; 232
    252e:	fe 4f       	sbci	r31, 0xFE	; 254
    2530:	20 91 30 01 	lds	r18, 0x0130
    2534:	30 91 31 01 	lds	r19, 0x0131
    2538:	40 91 32 01 	lds	r20, 0x0132
    253c:	50 91 33 01 	lds	r21, 0x0133
    2540:	80 81       	ld	r24, Z
    2542:	91 81       	ldd	r25, Z+1	; 0x01
    2544:	a2 81       	ldd	r26, Z+2	; 0x02
    2546:	b3 81       	ldd	r27, Z+3	; 0x03
    2548:	82 17       	cp	r24, r18
    254a:	93 07       	cpc	r25, r19
    254c:	a4 07       	cpc	r26, r20
    254e:	b5 07       	cpc	r27, r21
    2550:	18 f4       	brcc	.+6      	; 0x2558 <main+0x7ae>
             ii = 2;
    2552:	82 e0       	ldi	r24, 0x02	; 2
    2554:	80 93 4b 01 	sts	0x014B, r24
       }
       char x = '1';
       char y = '3';
       char z = '2';
   
       if (ii == 1) {
    2558:	80 91 4b 01 	lds	r24, 0x014B
    255c:	81 30       	cpi	r24, 0x01	; 1
    255e:	29 f0       	breq	.+10     	; 0x256a <main+0x7c0>
          // x = '1';
          y = '2';
          z = '3';
       }
       if (ii == 2) {
    2560:	82 30       	cpi	r24, 0x02	; 2
    2562:	39 f0       	breq	.+14     	; 0x2572 <main+0x7c8>
             ii = 2;
          }
       }
       char x = '1';
       char y = '3';
       char z = '2';
    2564:	12 e3       	ldi	r17, 0x32	; 50
          if (resis[2].rx > resis[ii].rx) {
             ii = 2;
          }
       }
       char x = '1';
       char y = '3';
    2566:	03 e3       	ldi	r16, 0x33	; 51
    2568:	02 c0       	rjmp	.+4      	; 0x256e <main+0x7c4>
       char z = '2';
   
       if (ii == 1) {
          // x = '1';
          y = '2';
          z = '3';
    256a:	13 e3       	ldi	r17, 0x33	; 51
       char y = '3';
       char z = '2';
   
       if (ii == 1) {
          // x = '1';
          y = '2';
    256c:	02 e3       	ldi	r16, 0x32	; 50
       } else {
          if (resis[2].rx > resis[ii].rx) {
             ii = 2;
          }
       }
       char x = '1';
    256e:	81 e3       	ldi	r24, 0x31	; 49
    2570:	03 c0       	rjmp	.+6      	; 0x2578 <main+0x7ce>
          z = '3';
       }
       if (ii == 2) {
          x = '2';
          y = '1';
          z = '3';
    2572:	13 e3       	ldi	r17, 0x33	; 51
          y = '2';
          z = '3';
       }
       if (ii == 2) {
          x = '2';
          y = '1';
    2574:	01 e3       	ldi	r16, 0x31	; 49
          // x = '1';
          y = '2';
          z = '3';
       }
       if (ii == 2) {
          x = '2';
    2576:	82 e3       	ldi	r24, 0x32	; 50
          y = '1';
          z = '3';
       }
       lcd_data(x);
    2578:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
       lcd_fix_string(Resistor_str);    // -[=]-
    257c:	82 e5       	ldi	r24, 0x52	; 82
    257e:	91 e0       	ldi	r25, 0x01	; 1
    2580:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
       lcd_data(y);
    2584:	80 2f       	mov	r24, r16
    2586:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
       lcd_fix_string(Resistor_str);    // -[=]-
    258a:	82 e5       	ldi	r24, 0x52	; 82
    258c:	91 e0       	ldi	r25, 0x01	; 1
    258e:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
       lcd_data(z);
    2592:	81 2f       	mov	r24, r17
    2594:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
    }
    lcd_line2(); //2. row 
    2598:	80 ec       	ldi	r24, 0xC0	; 192
    259a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
    if (ResistorsFound == 1) {
    259e:	80 91 5e 01 	lds	r24, 0x015E
    25a2:	81 30       	cpi	r24, 0x01	; 1
    25a4:	19 f5       	brne	.+70     	; 0x25ec <main+0x842>
       RvalOut(0);
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	0e 94 37 03 	call	0x66e	; 0x66e <RvalOut>
#if FLASHEND > 0x1fff
       if (resis[0].lx != 0) {
    25ac:	80 91 1c 01 	lds	r24, 0x011C
    25b0:	90 91 1d 01 	lds	r25, 0x011D
    25b4:	a0 91 1e 01 	lds	r26, 0x011E
    25b8:	b0 91 1f 01 	lds	r27, 0x011F
    25bc:	00 97       	sbiw	r24, 0x00	; 0
    25be:	a1 05       	cpc	r26, r1
    25c0:	b1 05       	cpc	r27, r1
    25c2:	09 f4       	brne	.+2      	; 0x25c6 <main+0x81c>
    25c4:	9c c0       	rjmp	.+312    	; 0x26fe <main+0x954>
	  // resistor have also Inductance
          lcd_fix_string(Lis_str);	// "L="
    25c6:	82 e4       	ldi	r24, 0x42	; 66
    25c8:	91 e0       	ldi	r25, 0x01	; 1
    25ca:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
          DisplayValue(resis[0].lx,resis[0].lpre,'H',3);	// output inductance
    25ce:	60 91 1c 01 	lds	r22, 0x011C
    25d2:	70 91 1d 01 	lds	r23, 0x011D
    25d6:	80 91 1e 01 	lds	r24, 0x011E
    25da:	90 91 1f 01 	lds	r25, 0x011F
    25de:	40 91 20 01 	lds	r20, 0x0120
    25e2:	28 e4       	ldi	r18, 0x48	; 72
    25e4:	03 e0       	ldi	r16, 0x03	; 3
    25e6:	0e 94 81 02 	call	0x502	; 0x502 <DisplayValue>
    25ea:	89 c0       	rjmp	.+274    	; 0x26fe <main+0x954>
       }
#endif
    } else {
       // output resistor values in right order
       if (ii == 0) {
    25ec:	80 91 4b 01 	lds	r24, 0x014B
    25f0:	88 23       	and	r24, r24
    25f2:	31 f4       	brne	.+12     	; 0x2600 <main+0x856>
          RvalOut(1);
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	0e 94 37 03 	call	0x66e	; 0x66e <RvalOut>
          RvalOut(2);
    25fa:	82 e0       	ldi	r24, 0x02	; 2
    25fc:	0e 94 37 03 	call	0x66e	; 0x66e <RvalOut>
       }
       if (ii == 1) {
    2600:	80 91 4b 01 	lds	r24, 0x014B
    2604:	81 30       	cpi	r24, 0x01	; 1
    2606:	31 f4       	brne	.+12     	; 0x2614 <main+0x86a>
          RvalOut(0);
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	0e 94 37 03 	call	0x66e	; 0x66e <RvalOut>
          RvalOut(2);
    260e:	82 e0       	ldi	r24, 0x02	; 2
    2610:	0e 94 37 03 	call	0x66e	; 0x66e <RvalOut>
       }
       if (ii == 2) {
    2614:	80 91 4b 01 	lds	r24, 0x014B
    2618:	82 30       	cpi	r24, 0x02	; 2
    261a:	09 f0       	breq	.+2      	; 0x261e <main+0x874>
    261c:	70 c0       	rjmp	.+224    	; 0x26fe <main+0x954>
          RvalOut(0);
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	0e 94 37 03 	call	0x66e	; 0x66e <RvalOut>
          RvalOut(1);
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	0e 94 37 03 	call	0x66e	; 0x66e <RvalOut>
    262a:	69 c0       	rjmp	.+210    	; 0x26fe <main+0x954>
    goto end;

  } // end (PartFound == PART_RESISTOR)

//capacity measurement is wanted
  else if(PartFound == PART_CAPACITOR) {
    262c:	87 30       	cpi	r24, 0x07	; 7
    262e:	a9 f5       	brne	.+106    	; 0x269a <main+0x8f0>
//     lcd_fix_string(Capacitor);
     lcd_testpin(cap.ca);		//Pin number 1
    2630:	80 91 72 01 	lds	r24, 0x0172
    2634:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_testpin>
     lcd_fix_string(CapZeich);		// capacitor sign
    2638:	85 e2       	ldi	r24, 0x25	; 37
    263a:	91 e0       	ldi	r25, 0x01	; 1
    263c:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
     lcd_testpin(cap.cb);		//Pin number 2
    2640:	80 91 73 01 	lds	r24, 0x0173
    2644:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_testpin>
#if FLASHEND > 0x1fff
 #if FLASHEND > 0x3fff
     GetVloss();			// get Voltage loss of capacitor
 #endif
     if (cap.v_loss != 0) {
    2648:	80 91 70 01 	lds	r24, 0x0170
    264c:	90 91 71 01 	lds	r25, 0x0171
    2650:	00 97       	sbiw	r24, 0x00	; 0
    2652:	79 f0       	breq	.+30     	; 0x2672 <main+0x8c8>
        lcd_fix_string(VLOSS_str);	// "  Vloss="
    2654:	8a e3       	ldi	r24, 0x3A	; 58
    2656:	91 e0       	ldi	r25, 0x01	; 1
    2658:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
        DisplayValue(cap.v_loss,-1,'%',2);
    265c:	60 91 70 01 	lds	r22, 0x0170
    2660:	70 91 71 01 	lds	r23, 0x0171
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	4f ef       	ldi	r20, 0xFF	; 255
    266a:	25 e2       	ldi	r18, 0x25	; 37
    266c:	02 e0       	ldi	r16, 0x02	; 2
    266e:	0e 94 81 02 	call	0x502	; 0x502 <DisplayValue>
     }
#endif
     lcd_line2(); 			//2. row 
    2672:	80 ec       	ldi	r24, 0xC0	; 192
    2674:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
     DisplayValue(cap.cval_max,cap.cpre_max,'F',4);
    2678:	60 91 66 01 	lds	r22, 0x0166
    267c:	70 91 67 01 	lds	r23, 0x0167
    2680:	80 91 68 01 	lds	r24, 0x0168
    2684:	90 91 69 01 	lds	r25, 0x0169
    2688:	40 91 75 01 	lds	r20, 0x0175
    268c:	26 e4       	ldi	r18, 0x46	; 70
    268e:	04 e0       	ldi	r16, 0x04	; 4
    2690:	0e 94 81 02 	call	0x502	; 0x502 <DisplayValue>
#if FLASHEND > 0x1fff
     GetESR();				// get ESR of capacitor
    2694:	0e 94 b3 1a 	call	0x3566	; 0x3566 <GetESR>
#endif
     goto end;
    2698:	32 c0       	rjmp	.+100    	; 0x26fe <main+0x954>
  }
  if(NumOfDiodes == 0) { //no diodes are found
    269a:	80 91 05 01 	lds	r24, 0x0105
    269e:	88 23       	and	r24, r24
    26a0:	71 f4       	brne	.+28     	; 0x26be <main+0x914>
     lcd_fix_string(TestFailed1); 	//"Kein,unbek. oder"
    26a2:	80 ea       	ldi	r24, 0xA0	; 160
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
     lcd_line2(); //2. row 
    26aa:	80 ec       	ldi	r24, 0xC0	; 192
    26ac:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
     lcd_fix_string(TestFailed2); 	//"defektes "
    26b0:	81 e7       	ldi	r24, 0x71	; 113
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
     lcd_fix_string(Bauteil);		//"Bauteil"
    26b8:	8a e7       	ldi	r24, 0x7A	; 122
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	16 c0       	rjmp	.+44     	; 0x26ea <main+0x940>
  } else {
     lcd_fix_string(Bauteil);		//"Bauteil"
    26be:	8a e7       	ldi	r24, 0x7A	; 122
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
     lcd_fix_string(Unknown); 		//" unbek."
    26c6:	87 e9       	ldi	r24, 0x97	; 151
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
     lcd_line2(); //2. row 
    26ce:	80 ec       	ldi	r24, 0xC0	; 192
    26d0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_command>
     lcd_fix_string(OrBroken); 		//"oder defekt "
    26d4:	80 eb       	ldi	r24, 0xB0	; 176
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
     lcd_data(NumOfDiodes + '0');
    26dc:	80 91 05 01 	lds	r24, 0x0105
    26e0:	80 5d       	subi	r24, 0xD0	; 208
    26e2:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
     lcd_fix_string(AnKat);		//"->|-"
    26e6:	85 e4       	ldi	r24, 0x45	; 69
    26e8:	91 e0       	ldi	r25, 0x01	; 1
    26ea:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
  }
  empty_count++;
    26ee:	80 91 4a 01 	lds	r24, 0x014A
    26f2:	8f 5f       	subi	r24, 0xFF	; 255
    26f4:	80 93 4a 01 	sts	0x014A, r24
  mess_count = 0;
    26f8:	10 92 0b 01 	sts	0x010B, r1
  goto end2;
    26fc:	07 c0       	rjmp	.+14     	; 0x270c <main+0x962>
gakAusgabe:
  lcd_line2(); //2. row 
  PinLayout(Cathode_char,'G','A'); 	// CGA= or 123=...
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 end:
  empty_count = 0;		// reset counter, if part is found
    26fe:	10 92 4a 01 	sts	0x014A, r1
  mess_count++;			// count measurements
    2702:	80 91 0b 01 	lds	r24, 0x010B
    2706:	8f 5f       	subi	r24, 0xFF	; 255
    2708:	80 93 0b 01 	sts	0x010B, r24

 end2:
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND, release relay
    270c:	88 e1       	ldi	r24, 0x18	; 24
    270e:	87 b9       	out	0x07, r24	; 7
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
    2710:	4f 9b       	sbis	0x09, 7	; 9
    2712:	fe cf       	rjmp	.-4      	; 0x2710 <main+0x966>
  wait_about200ms();
    2714:	88 e2       	ldi	r24, 0x28	; 40
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>
// wait 14 seconds or 5 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage+=10) {
    271c:	10 92 60 01 	sts	0x0160, r1
    2720:	10 92 5f 01 	sts	0x015F, r1
    2724:	10 c0       	rjmp	.+32     	; 0x2746 <main+0x99c>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    2726:	4f 9b       	sbis	0x09, 7	; 9
    2728:	97 cb       	rjmp	.-2258   	; 0x1e58 <main+0xae>
        // If the key is pressed again... 
        // goto start of measurement 
        goto start;
     }
     wdt_reset();
    272a:	a8 95       	wdr
     wait_about10ms();
    272c:	82 e0       	ldi	r24, 0x02	; 2
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>
 end2:
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND, release relay
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
  wait_about200ms();
// wait 14 seconds or 5 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage+=10) {
    2734:	80 91 5f 01 	lds	r24, 0x015F
    2738:	90 91 60 01 	lds	r25, 0x0160
    273c:	0a 96       	adiw	r24, 0x0a	; 10
    273e:	90 93 60 01 	sts	0x0160, r25
    2742:	80 93 5f 01 	sts	0x015F, r24
    2746:	80 91 5f 01 	lds	r24, 0x015F
    274a:	90 91 60 01 	lds	r25, 0x0160
    274e:	2d e6       	ldi	r18, 0x6D	; 109
    2750:	80 36       	cpi	r24, 0x60	; 96
    2752:	92 07       	cpc	r25, r18
    2754:	40 f3       	brcs	.-48     	; 0x2726 <main+0x97c>
     goto start;			// repeat measurement POWER_OFF times
  }
 #endif
  // only one Measurement requested, shut off
//  MCUSR = 0;
  ON_PORT &= ~(1<<ON_PIN);		//switch off power
    2756:	5e 98       	cbi	0x0b, 6	; 11
  //never ending loop 
  while(1) {
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    2758:	4f 9b       	sbis	0x09, 7	; 9
    275a:	7e cb       	rjmp	.-2308   	; 0x1e58 <main+0xae>
        // The statement is only reached if no auto off equipment is installed
        goto start;
     }
     wdt_reset();
    275c:	a8 95       	wdr
     wait_about10ms();
    275e:	82 e0       	ldi	r24, 0x02	; 2
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>
  }
    2766:	f8 cf       	rjmp	.-16     	; 0x2758 <main+0x9ae>

00002768 <uart_putc>:
    2768:	2f 93       	push	r18
    276a:	5f b7       	in	r21, 0x3f	; 63
    276c:	2f 93       	push	r18
    276e:	2a e0       	ldi	r18, 0x0A	; 10
    2770:	80 95       	com	r24
    2772:	08 94       	sec

00002774 <putchar0>:
    2774:	10 f4       	brcc	.+4      	; 0x277a <putchar1>
    2776:	43 98       	cbi	0x08, 3	; 8
    2778:	02 c0       	rjmp	.+4      	; 0x277e <putchar2>

0000277a <putchar1>:
    277a:	43 9a       	sbi	0x08, 3	; 8
	...

0000277e <putchar2>:
    277e:	22 d0       	rcall	.+68     	; 0x27c4 <wait100us>
    2780:	29 d0       	rcall	.+82     	; 0x27d4 <wait3us>
    2782:	86 95       	lsr	r24
    2784:	2a 95       	dec	r18
    2786:	b1 f7       	brne	.-20     	; 0x2774 <putchar0>
    2788:	2f 91       	pop	r18
    278a:	5f bf       	out	0x3f, r21	; 63
    278c:	2f 91       	pop	r18
    278e:	08 95       	ret

00002790 <UART_delay1>:
    2790:	08 95       	ret

00002792 <wait5s>:
    2792:	03 d0       	rcall	.+6      	; 0x279a <wait1000ms>

00002794 <wait4s>:
    2794:	02 d0       	rcall	.+4      	; 0x279a <wait1000ms>

00002796 <wait3s>:
    2796:	01 d0       	rcall	.+2      	; 0x279a <wait1000ms>

00002798 <wait2s>:
    2798:	00 d0       	rcall	.+0      	; 0x279a <wait1000ms>

0000279a <wait1000ms>:
    279a:	00 d0       	rcall	.+0      	; 0x279c <wait500ms>

0000279c <wait500ms>:
    279c:	03 d0       	rcall	.+6      	; 0x27a4 <wait100ms>

0000279e <wait400ms>:
    279e:	02 d0       	rcall	.+4      	; 0x27a4 <wait100ms>

000027a0 <wait300ms>:
    27a0:	01 d0       	rcall	.+2      	; 0x27a4 <wait100ms>

000027a2 <wait200ms>:
    27a2:	00 d0       	rcall	.+0      	; 0x27a4 <wait100ms>

000027a4 <wait100ms>:
    27a4:	a8 95       	wdr
    27a6:	00 d0       	rcall	.+0      	; 0x27a8 <wait50ms>

000027a8 <wait50ms>:
    27a8:	03 d0       	rcall	.+6      	; 0x27b0 <wait10ms>

000027aa <wait40ms>:
    27aa:	02 d0       	rcall	.+4      	; 0x27b0 <wait10ms>

000027ac <wait30ms>:
    27ac:	01 d0       	rcall	.+2      	; 0x27b0 <wait10ms>

000027ae <wait20ms>:
    27ae:	00 d0       	rcall	.+0      	; 0x27b0 <wait10ms>

000027b0 <wait10ms>:
    27b0:	00 d0       	rcall	.+0      	; 0x27b2 <wait5ms>

000027b2 <wait5ms>:
    27b2:	03 d0       	rcall	.+6      	; 0x27ba <wait1ms>

000027b4 <wait4ms>:
    27b4:	02 d0       	rcall	.+4      	; 0x27ba <wait1ms>

000027b6 <wait3ms>:
    27b6:	01 d0       	rcall	.+2      	; 0x27ba <wait1ms>

000027b8 <wait2ms>:
    27b8:	00 d0       	rcall	.+0      	; 0x27ba <wait1ms>

000027ba <wait1ms>:
    27ba:	00 d0       	rcall	.+0      	; 0x27bc <wait500us>

000027bc <wait500us>:
    27bc:	03 d0       	rcall	.+6      	; 0x27c4 <wait100us>

000027be <wait400us>:
    27be:	02 d0       	rcall	.+4      	; 0x27c4 <wait100us>

000027c0 <wait300us>:
    27c0:	01 d0       	rcall	.+2      	; 0x27c4 <wait100us>

000027c2 <wait200us>:
    27c2:	00 d0       	rcall	.+0      	; 0x27c4 <wait100us>

000027c4 <wait100us>:
    27c4:	00 d0       	rcall	.+0      	; 0x27c6 <wait50us>

000027c6 <wait50us>:
    27c6:	03 d0       	rcall	.+6      	; 0x27ce <wait10us>

000027c8 <wait40us>:
    27c8:	02 d0       	rcall	.+4      	; 0x27ce <wait10us>

000027ca <wait30us>:
    27ca:	01 d0       	rcall	.+2      	; 0x27ce <wait10us>

000027cc <wait20us>:
    27cc:	00 d0       	rcall	.+0      	; 0x27ce <wait10us>

000027ce <wait10us>:
    27ce:	00 d0       	rcall	.+0      	; 0x27d0 <wait5us>

000027d0 <wait5us>:
    27d0:	03 d0       	rcall	.+6      	; 0x27d8 <wait1us>

000027d2 <wait4us>:
    27d2:	02 d0       	rcall	.+4      	; 0x27d8 <wait1us>

000027d4 <wait3us>:
    27d4:	01 d0       	rcall	.+2      	; 0x27d8 <wait1us>

000027d6 <wait2us>:
    27d6:	00 d0       	rcall	.+0      	; 0x27d8 <wait1us>

000027d8 <wait1us>:
    27d8:	00 00       	nop
    27da:	08 95       	ret

000027dc <getRLmultip>:
  R_DDR = 0;			// switch all resistor ports to input
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
  return;
 } // end ReadCapacity()

unsigned int getRLmultip(unsigned int cvolt) {
    27dc:	ff 92       	push	r15
    27de:	0f 93       	push	r16
    27e0:	1f 93       	push	r17
    27e2:	cf 93       	push	r28
    27e4:	df 93       	push	r29

  unsigned int uvolt;
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;
  if (cvolt >= RL_Tab_Beginn) {
    27e6:	21 e0       	ldi	r18, 0x01	; 1
    27e8:	8c 32       	cpi	r24, 0x2C	; 44
    27ea:	92 07       	cpc	r25, r18
    27ec:	18 f0       	brcs	.+6      	; 0x27f4 <getRLmultip+0x18>
     uvolt = cvolt - RL_Tab_Beginn;
    27ee:	8c 52       	subi	r24, 0x2C	; 44
    27f0:	91 40       	sbci	r25, 0x01	; 1
    27f2:	02 c0       	rjmp	.+4      	; 0x27f8 <getRLmultip+0x1c>
  } else {
     uvolt = 0;			// limit to begin of table
    27f4:	80 e0       	ldi	r24, 0x00	; 0
    27f6:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = uvolt / RL_Tab_Abstand;
    27f8:	69 e1       	ldi	r22, 0x19	; 25
    27fa:	70 e0       	ldi	r23, 0x00	; 0
    27fc:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__udivmodhi4>
  tabres = uvolt % RL_Tab_Abstand;
    2800:	f8 2e       	mov	r15, r24
  tabres = RL_Tab_Abstand - tabres;
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
    2802:	6d 32       	cpi	r22, 0x2D	; 45
    2804:	08 f0       	brcs	.+2      	; 0x2808 <getRLmultip+0x2c>
    2806:	6c e2       	ldi	r22, 0x2C	; 44
    2808:	c6 2f       	mov	r28, r22
    280a:	d0 e0       	ldi	r29, 0x00	; 0
    280c:	ce 01       	movw	r24, r28
    280e:	88 0f       	add	r24, r24
    2810:	99 1f       	adc	r25, r25
    2812:	80 50       	subi	r24, 0x00	; 0
    2814:	90 40       	sbci	r25, 0x00	; 0
    2816:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <__eerd_word_m168>
    281a:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RLtab[tabind+1]);
    281c:	ce 01       	movw	r24, r28
    281e:	88 0f       	add	r24, r24
    2820:	99 1f       	adc	r25, r25
    2822:	8e 5f       	subi	r24, 0xFE	; 254
    2824:	9f 4f       	sbci	r25, 0xFF	; 255
    2826:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <__eerd_word_m168>
    282a:	9c 01       	movw	r18, r24
  } else {
     uvolt = 0;			// limit to begin of table
  }
  tabind = uvolt / RL_Tab_Abstand;
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
    282c:	49 e1       	ldi	r20, 0x19	; 25
    282e:	4f 19       	sub	r20, r15
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
    2830:	50 e0       	ldi	r21, 0x00	; 0
    2832:	08 1b       	sub	r16, r24
    2834:	19 0b       	sbc	r17, r25
    2836:	40 9f       	mul	r20, r16
    2838:	c0 01       	movw	r24, r0
    283a:	41 9f       	mul	r20, r17
    283c:	90 0d       	add	r25, r0
    283e:	50 9f       	mul	r21, r16
    2840:	90 0d       	add	r25, r0
    2842:	11 24       	eor	r1, r1
    2844:	0c 96       	adiw	r24, 0x0c	; 12
    2846:	69 e1       	ldi	r22, 0x19	; 25
    2848:	70 e0       	ldi	r23, 0x00	; 0
    284a:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__udivmodhi4>
    284e:	62 0f       	add	r22, r18
    2850:	73 1f       	adc	r23, r19
}
    2852:	cb 01       	movw	r24, r22
    2854:	df 91       	pop	r29
    2856:	cf 91       	pop	r28
    2858:	1f 91       	pop	r17
    285a:	0f 91       	pop	r16
    285c:	ff 90       	pop	r15
    285e:	08 95       	ret

00002860 <Scale_C_with_vcc>:

void Scale_C_with_vcc(void) {
    2860:	8f 92       	push	r8
    2862:	9f 92       	push	r9
    2864:	af 92       	push	r10
    2866:	bf 92       	push	r11
    2868:	df 92       	push	r13
    286a:	ef 92       	push	r14
    286c:	ff 92       	push	r15
    286e:	0f 93       	push	r16
    2870:	1f 93       	push	r17
    2872:	e0 90 62 01 	lds	r14, 0x0162
    2876:	f0 90 63 01 	lds	r15, 0x0163
    287a:	00 91 64 01 	lds	r16, 0x0164
    287e:	10 91 65 01 	lds	r17, 0x0165
    2882:	d0 90 74 01 	lds	r13, 0x0174
   while (cap.cval > 100000) {
      cap.cval /= 10;
    2886:	4a e0       	ldi	r20, 0x0A	; 10
    2888:	84 2e       	mov	r8, r20
    288a:	91 2c       	mov	r9, r1
    288c:	a1 2c       	mov	r10, r1
    288e:	b1 2c       	mov	r11, r1
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    2890:	08 c0       	rjmp	.+16     	; 0x28a2 <Scale_C_with_vcc+0x42>
      cap.cval /= 10;
    2892:	c8 01       	movw	r24, r16
    2894:	b7 01       	movw	r22, r14
    2896:	a5 01       	movw	r20, r10
    2898:	94 01       	movw	r18, r8
    289a:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
    289e:	79 01       	movw	r14, r18
    28a0:	8a 01       	movw	r16, r20
    28a2:	8d 2d       	mov	r24, r13
    28a4:	d3 94       	inc	r13
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    28a6:	91 ea       	ldi	r25, 0xA1	; 161
    28a8:	e9 16       	cp	r14, r25
    28aa:	96 e8       	ldi	r25, 0x86	; 134
    28ac:	f9 06       	cpc	r15, r25
    28ae:	91 e0       	ldi	r25, 0x01	; 1
    28b0:	09 07       	cpc	r16, r25
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	19 07       	cpc	r17, r25
    28b6:	68 f7       	brcc	.-38     	; 0x2892 <Scale_C_with_vcc+0x32>
    28b8:	80 93 74 01 	sts	0x0174, r24
      cap.cval /= 10;
      cap.cpre ++;			// prevent overflow
   }
   cap.cval *= ADCconfig.U_AVCC;	// scale with measured voltage
    28bc:	20 91 40 01 	lds	r18, 0x0140
    28c0:	30 91 41 01 	lds	r19, 0x0141
    28c4:	40 e0       	ldi	r20, 0x00	; 0
    28c6:	50 e0       	ldi	r21, 0x00	; 0
    28c8:	c8 01       	movw	r24, r16
    28ca:	b7 01       	movw	r22, r14
    28cc:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
    28d0:	28 e8       	ldi	r18, 0x88	; 136
    28d2:	33 e1       	ldi	r19, 0x13	; 19
    28d4:	40 e0       	ldi	r20, 0x00	; 0
    28d6:	50 e0       	ldi	r21, 0x00	; 0
    28d8:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
    28dc:	20 93 62 01 	sts	0x0162, r18
    28e0:	30 93 63 01 	sts	0x0163, r19
    28e4:	40 93 64 01 	sts	0x0164, r20
    28e8:	50 93 65 01 	sts	0x0165, r21
}
    28ec:	1f 91       	pop	r17
    28ee:	0f 91       	pop	r16
    28f0:	ff 90       	pop	r15
    28f2:	ef 90       	pop	r14
    28f4:	df 90       	pop	r13
    28f6:	bf 90       	pop	r11
    28f8:	af 90       	pop	r10
    28fa:	9f 90       	pop	r9
    28fc:	8f 90       	pop	r8
    28fe:	08 95       	ret

00002900 <ReadCapacity>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    2900:	8f 92       	push	r8
    2902:	9f 92       	push	r9
    2904:	af 92       	push	r10
    2906:	bf 92       	push	r11
    2908:	cf 92       	push	r12
    290a:	df 92       	push	r13
    290c:	ef 92       	push	r14
    290e:	ff 92       	push	r15
    2910:	0f 93       	push	r16
    2912:	1f 93       	push	r17
    2914:	cf 93       	push	r28
    2916:	df 93       	push	r29
    2918:	18 2f       	mov	r17, r24
    291a:	06 2f       	mov	r16, r22
#if FLASHEND > 0x1fff
  unsigned int vloss;	// lost voltage after load pulse in 0.1% 
#endif

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
    291c:	88 0f       	add	r24, r24
    291e:	81 0f       	add	r24, r17
    2920:	86 0f       	add	r24, r22
    2922:	81 50       	subi	r24, 0x01	; 1
    2924:	80 93 4c 01 	sts	0x014C, r24
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2928:	e6 2f       	mov	r30, r22
    292a:	f0 e0       	ldi	r31, 0x00	; 0
    292c:	eb 51       	subi	r30, 0x1B	; 27
    292e:	ff 4f       	sbci	r31, 0xFF	; 255
    2930:	24 91       	lpm	r18, Z+
  HiPinR_L = pgm_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
    2932:	e1 2f       	mov	r30, r17
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	ee 51       	subi	r30, 0x1E	; 30
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	c4 90       	lpm	r12, Z+
  lcd_testpin(LowPin);
  lcd_data('C');
  lcd_testpin(HighPin);
  lcd_space();
#endif
  if(PartFound == PART_RESISTOR) {
    293c:	80 91 07 01 	lds	r24, 0x0107
    2940:	86 30       	cpi	r24, 0x06	; 6
    2942:	09 f4       	brne	.+2      	; 0x2946 <ReadCapacity+0x46>
    2944:	9f c2       	rjmp	.+1342   	; 0x2e84 <ReadCapacity+0x584>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    2946:	40 91 05 01 	lds	r20, 0x0105
    294a:	a8 e7       	ldi	r26, 0x78	; 120
    294c:	b1 e0       	ldi	r27, 0x01	; 1
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	13 c0       	rjmp	.+38     	; 0x2978 <ReadCapacity+0x78>
     if ((diodes[ii].Cathode == LowPin) && (diodes[ii].Anode == HighPin) && (diodes[ii].Voltage < 1500)) {
    2952:	11 96       	adiw	r26, 0x01	; 1
    2954:	8c 91       	ld	r24, X
    2956:	11 97       	sbiw	r26, 0x01	; 1
    2958:	80 17       	cp	r24, r16
    295a:	61 f4       	brne	.+24     	; 0x2974 <ReadCapacity+0x74>
    295c:	8c 91       	ld	r24, X
    295e:	81 17       	cp	r24, r17
    2960:	49 f4       	brne	.+18     	; 0x2974 <ReadCapacity+0x74>
    2962:	12 96       	adiw	r26, 0x02	; 2
    2964:	8d 91       	ld	r24, X+
    2966:	9c 91       	ld	r25, X
    2968:	13 97       	sbiw	r26, 0x03	; 3
    296a:	55 e0       	ldi	r21, 0x05	; 5
    296c:	8c 3d       	cpi	r24, 0xDC	; 220
    296e:	95 07       	cpc	r25, r21
    2970:	08 f4       	brcc	.+2      	; 0x2974 <ReadCapacity+0x74>
    2972:	88 c2       	rjmp	.+1296   	; 0x2e84 <ReadCapacity+0x584>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    2974:	3f 5f       	subi	r19, 0xFF	; 255
    2976:	14 96       	adiw	r26, 0x04	; 4
    2978:	34 17       	cp	r19, r20
    297a:	58 f3       	brcs	.-42     	; 0x2952 <ReadCapacity+0x52>

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    297c:	58 e0       	ldi	r21, 0x08	; 8
    297e:	85 2e       	mov	r8, r21
    2980:	82 2a       	or	r8, r18
        return;
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
    2982:	10 92 6f 01 	sts	0x016F, r1
    2986:	10 92 6e 01 	sts	0x016E, r1
  vloss = 0;				// set lost voltage to zero
#endif
  cap.cval = 0;				// set capacity value to zero
    298a:	10 92 62 01 	sts	0x0162, r1
    298e:	10 92 63 01 	sts	0x0163, r1
    2992:	10 92 64 01 	sts	0x0164, r1
    2996:	10 92 65 01 	sts	0x0165, r1
  cap.cpre = -12;			//default unit is pF
    299a:	84 ef       	ldi	r24, 0xF4	; 244
    299c:	80 93 74 01 	sts	0x0174, r24
  EntladePins();			// discharge capacitor
    29a0:	0e 94 9c 01 	call	0x338	; 0x338 <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    29a4:	88 e0       	ldi	r24, 0x08	; 8
    29a6:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    29a8:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    29aa:	87 b8       	out	0x07, r8	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    29ac:	c4 b8       	out	0x04, r12	; 4
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    29ae:	81 2f       	mov	r24, r17
    29b0:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
    29b4:	7c 01       	movw	r14, r24
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    29b6:	10 92 4e 01 	sts	0x014E, r1
    29ba:	10 92 4d 01 	sts	0x014D, r1
  EntladePins();			// discharge capacitor
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
  R_PORT = 0;				// switch R-Port to GND
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    29be:	ec 01       	movw	r28, r24
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    29c0:	2d c0       	rjmp	.+90     	; 0x2a1c <ReadCapacity+0x11c>
     R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    29c2:	c5 b8       	out	0x05, r12	; 5
     R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    29c4:	c4 b8       	out	0x04, r12	; 4
     wait10ms();			// wait exactly 10ms, do not sleep
    29c6:	0e 94 d8 13 	call	0x27b0	; 0x27b0 <wait10ms>
     R_DDR = 0;				// switch back to input
    29ca:	14 b8       	out	0x04, r1	; 4
     R_PORT = 0;			// no Pull up
    29cc:	15 b8       	out	0x05, r1	; 5
     wait500us();			//wait a little time
    29ce:	0e 94 de 13 	call	0x27bc	; 0x27bc <wait500us>
     wdt_reset();
    29d2:	a8 95       	wdr
     // read voltage without current, is already charged enough?
     adcv[2] = ReadADC(HighPin);
    29d4:	81 2f       	mov	r24, r17
    29d6:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
     if (adcv[2] > adcv[0]) {
    29da:	e8 16       	cp	r14, r24
    29dc:	f9 06       	cpc	r15, r25
    29de:	20 f4       	brcc	.+8      	; 0x29e8 <ReadCapacity+0xe8>
        adcv[2] -= adcv[0];		//difference to beginning voltage
    29e0:	ec 01       	movw	r28, r24
    29e2:	ce 19       	sub	r28, r14
    29e4:	df 09       	sbc	r29, r15
    29e6:	02 c0       	rjmp	.+4      	; 0x29ec <ReadCapacity+0xec>
     } else {
        adcv[2] = 0;			// voltage is lower or same as beginning voltage
    29e8:	c0 e0       	ldi	r28, 0x00	; 0
    29ea:	d0 e0       	ldi	r29, 0x00	; 0
     }
     if ((ovcnt16 == 126) && (adcv[2] < 75)) {
    29ec:	80 91 4d 01 	lds	r24, 0x014D
    29f0:	90 91 4e 01 	lds	r25, 0x014E
    29f4:	8e 37       	cpi	r24, 0x7E	; 126
    29f6:	91 05       	cpc	r25, r1
    29f8:	21 f4       	brne	.+8      	; 0x2a02 <ReadCapacity+0x102>
    29fa:	cb 34       	cpi	r28, 0x4B	; 75
    29fc:	d1 05       	cpc	r29, r1
    29fe:	08 f4       	brcc	.+2      	; 0x2a02 <ReadCapacity+0x102>
    2a00:	3c c2       	rjmp	.+1144   	; 0x2e7a <ReadCapacity+0x57a>
        // 300mV can not be reached well-timed 
        break;		// don't try to load any more
     }
     if (adcv[2] > 300) {
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	cd 32       	cpi	r28, 0x2D	; 45
    2a06:	d8 07       	cpc	r29, r24
    2a08:	b0 f4       	brcc	.+44     	; 0x2a36 <ReadCapacity+0x136>
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2a0a:	80 91 4d 01 	lds	r24, 0x014D
    2a0e:	90 91 4e 01 	lds	r25, 0x014E
    2a12:	01 96       	adiw	r24, 0x01	; 1
    2a14:	90 93 4e 01 	sts	0x014E, r25
    2a18:	80 93 4d 01 	sts	0x014D, r24
    2a1c:	80 91 4d 01 	lds	r24, 0x014D
    2a20:	90 91 4e 01 	lds	r25, 0x014E
    2a24:	21 e0       	ldi	r18, 0x01	; 1
    2a26:	84 3f       	cpi	r24, 0xF4	; 244
    2a28:	92 07       	cpc	r25, r18
    2a2a:	58 f2       	brcs	.-106    	; 0x29c2 <ReadCapacity+0xc2>
     }
  }
  // wait 5ms and read voltage again, does the capacitor keep the voltage?
//  adcv[1] = W5msReadADC(HighPin) - adcv[0];
//  wdt_reset();
  if (adcv[2] < 301) {
    2a2c:	51 e0       	ldi	r21, 0x01	; 1
    2a2e:	cd 32       	cpi	r28, 0x2D	; 45
    2a30:	d5 07       	cpc	r29, r21
    2a32:	08 f4       	brcc	.+2      	; 0x2a36 <ReadCapacity+0x136>
    2a34:	22 c2       	rjmp	.+1092   	; 0x2e7a <ReadCapacity+0x57a>
#if DebugOut == 10
  DisplayValue(ovcnt16,0,' ',4);
  DisplayValue(adcv[2],-3,'V',4);
#endif
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    2a36:	80 91 4d 01 	lds	r24, 0x014D
    2a3a:	90 91 4e 01 	lds	r25, 0x014E
    2a3e:	00 97       	sbiw	r24, 0x00	; 0
    2a40:	29 f4       	brne	.+10     	; 0x2a4c <ReadCapacity+0x14c>
    2a42:	85 e0       	ldi	r24, 0x05	; 5
    2a44:	c5 31       	cpi	r28, 0x15	; 21
    2a46:	d8 07       	cpc	r29, r24
    2a48:	08 f0       	brcs	.+2      	; 0x2a4c <ReadCapacity+0x14c>
    2a4a:	8b c0       	rjmp	.+278    	; 0x2b62 <ReadCapacity+0x262>
     goto messe_mit_rh;		// Voltage of more than 1300mV is reached in one pulse, to fast loaded
  }
  // Capacity is more than about 50µF
  cap.cpre = -9;		// switch units to nF 
    2a4c:	87 ef       	ldi	r24, 0xF7	; 247
    2a4e:	80 93 74 01 	sts	0x0174, r24
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2a52:	ce 01       	movw	r24, r28
    2a54:	cc 24       	eor	r12, r12
    2a56:	dd 24       	eor	r13, r13
    2a58:	09 c0       	rjmp	.+18     	; 0x2a6c <ReadCapacity+0x16c>
     wait5ms();
    2a5a:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <wait5ms>
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
    2a5e:	81 2f       	mov	r24, r17
    2a60:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
     wdt_reset();
    2a64:	a8 95       	wdr
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2a66:	08 94       	sec
    2a68:	c1 1c       	adc	r12, r1
    2a6a:	d1 1c       	adc	r13, r1
    2a6c:	20 91 4d 01 	lds	r18, 0x014D
    2a70:	30 91 4e 01 	lds	r19, 0x014E
    2a74:	2c 15       	cp	r18, r12
    2a76:	3d 05       	cpc	r19, r13
    2a78:	80 f7       	brcc	.-32     	; 0x2a5a <ReadCapacity+0x15a>
     wait5ms();
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
    2a7a:	e8 16       	cp	r14, r24
    2a7c:	f9 06       	cpc	r15, r25
    2a7e:	30 f4       	brcc	.+12     	; 0x2a8c <ReadCapacity+0x18c>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    2a80:	8e 19       	sub	r24, r14
    2a82:	9f 09       	sbc	r25, r15
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    2a84:	8c 17       	cp	r24, r28
    2a86:	9d 07       	cpc	r25, r29
    2a88:	e0 f4       	brcc	.+56     	; 0x2ac2 <ReadCapacity+0x1c2>
    2a8a:	02 c0       	rjmp	.+4      	; 0x2a90 <ReadCapacity+0x190>
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
    2a90:	7e 01       	movw	r14, r28
    2a92:	e8 1a       	sub	r14, r24
    2a94:	f9 0a       	sbc	r15, r25
  } else {
     adcv[3] = 0;			// no lost voltage
  }
#if FLASHEND > 0x1fff
  // compute equivalent parallel resistance from voltage drop
  if (adcv[3] > 0) {
    2a96:	b9 f0       	breq	.+46     	; 0x2ac6 <ReadCapacity+0x1c6>
     // there is any voltage drop (adcv[3]) !
     // adcv[2] is the loaded voltage.
     vloss = (unsigned long)(adcv[3] * 1000UL) / adcv[2];
  }
#endif
  if (adcv[3] > 100) {
    2a98:	25 e6       	ldi	r18, 0x65	; 101
    2a9a:	e2 16       	cp	r14, r18
    2a9c:	f1 04       	cpc	r15, r1
    2a9e:	08 f0       	brcs	.+2      	; 0x2aa2 <ReadCapacity+0x1a2>
    2aa0:	ec c1       	rjmp	.+984    	; 0x2e7a <ReadCapacity+0x57a>
#if FLASHEND > 0x1fff
  // compute equivalent parallel resistance from voltage drop
  if (adcv[3] > 0) {
     // there is any voltage drop (adcv[3]) !
     // adcv[2] is the loaded voltage.
     vloss = (unsigned long)(adcv[3] * 1000UL) / adcv[2];
    2aa2:	b7 01       	movw	r22, r14
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	28 ee       	ldi	r18, 0xE8	; 232
    2aaa:	33 e0       	ldi	r19, 0x03	; 3
    2aac:	40 e0       	ldi	r20, 0x00	; 0
    2aae:	50 e0       	ldi	r21, 0x00	; 0
    2ab0:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
    2ab4:	9e 01       	movw	r18, r28
    2ab6:	40 e0       	ldi	r20, 0x00	; 0
    2ab8:	50 e0       	ldi	r21, 0x00	; 0
    2aba:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
    2abe:	69 01       	movw	r12, r18
    2ac0:	04 c0       	rjmp	.+8      	; 0x2aca <ReadCapacity+0x1ca>
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    2ac2:	ee 24       	eor	r14, r14
    2ac4:	ff 24       	eor	r15, r15
  } else {
     adcv[3] = 0;			// no lost voltage
  }
#if FLASHEND > 0x1fff
  // compute equivalent parallel resistance from voltage drop
  if (adcv[3] > 0) {
    2ac6:	cc 24       	eor	r12, r12
    2ac8:	dd 24       	eor	r13, r13
     lcd_space();
     wait_about1s();
 #endif
     goto keinC;			// capacitor does not keep the voltage about 5ms
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
    2aca:	80 90 4d 01 	lds	r8, 0x014D
    2ace:	90 90 4e 01 	lds	r9, 0x014E
    2ad2:	08 94       	sec
    2ad4:	81 1c       	adc	r8, r1
    2ad6:	91 1c       	adc	r9, r1
    2ad8:	aa 24       	eor	r10, r10
    2ada:	bb 24       	eor	r11, r11
    2adc:	80 92 6a 01 	sts	0x016A, r8
    2ae0:	90 92 6b 01 	sts	0x016B, r9
    2ae4:	a0 92 6c 01 	sts	0x016C, r10
    2ae8:	b0 92 6d 01 	sts	0x016D, r11
  // compute factor with load voltage + lost voltage during the voltage load time
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]+adcv[3]);	// get factor to convert time to capacity from table
    2aec:	c7 01       	movw	r24, r14
    2aee:	8c 0f       	add	r24, r28
    2af0:	9d 1f       	adc	r25, r29
    2af2:	0e 94 ee 13 	call	0x27dc	; 0x27dc <getRLmultip>
    2af6:	bc 01       	movw	r22, r24
    2af8:	80 e0       	ldi	r24, 0x00	; 0
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	a5 01       	movw	r20, r10
    2afe:	94 01       	movw	r18, r8
    2b00:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
    2b04:	60 93 6a 01 	sts	0x016A, r22
    2b08:	70 93 6b 01 	sts	0x016B, r23
    2b0c:	80 93 6c 01 	sts	0x016C, r24
    2b10:	90 93 6d 01 	sts	0x016D, r25
#endif
   cap.cval = cap.cval_uncorrected.dw;	// set result to uncorrected
    2b14:	60 93 62 01 	sts	0x0162, r22
    2b18:	70 93 63 01 	sts	0x0163, r23
    2b1c:	80 93 64 01 	sts	0x0164, r24
    2b20:	90 93 65 01 	sts	0x0165, r25
   Scale_C_with_vcc();
    2b24:	0e 94 30 14 	call	0x2860	; 0x2860 <Scale_C_with_vcc>
   // cap.cval for this type is at least 40000nF, so the last digit will be never shown
   cap.cval *= (1000 - C_H_KORR);	// correct with C_H_KORR with 0.1% resolution, but prevent overflow
    2b28:	60 91 62 01 	lds	r22, 0x0162
    2b2c:	70 91 63 01 	lds	r23, 0x0163
    2b30:	80 91 64 01 	lds	r24, 0x0164
    2b34:	90 91 65 01 	lds	r25, 0x0165
    2b38:	28 ee       	ldi	r18, 0xE8	; 232
    2b3a:	33 e0       	ldi	r19, 0x03	; 3
    2b3c:	40 e0       	ldi	r20, 0x00	; 0
    2b3e:	50 e0       	ldi	r21, 0x00	; 0
    2b40:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
   cap.cval /= 100;
    2b44:	24 e6       	ldi	r18, 0x64	; 100
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e0       	ldi	r20, 0x00	; 0
    2b4a:	50 e0       	ldi	r21, 0x00	; 0
    2b4c:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
    2b50:	20 93 62 01 	sts	0x0162, r18
    2b54:	30 93 63 01 	sts	0x0163, r19
    2b58:	40 93 64 01 	sts	0x0164, r20
    2b5c:	50 93 65 01 	sts	0x0165, r21
   DisplayValue(cap.cval,cap.cpre,'F',4);
   lcd_space();
   lcd_string(utoa(ovcnt16,outval,10));
   wait_about3s();
#endif
   goto checkDiodes;
    2b60:	4d c1       	rjmp	.+666    	; 0x2dfc <ReadCapacity+0x4fc>
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
  HiPinR_L = pgm_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load
    2b62:	ec 2c       	mov	r14, r12
    2b64:	ee 0c       	add	r14, r14

//==================================================================================
// Measurement of little capacity values
messe_mit_rh:
  //little capacity value, about  < 50 µF
  EntladePins();			// discharge capacitor
    2b66:	0e 94 9c 01 	call	0x338	; 0x338 <EntladePins>
  //measure with the R_H (470kOhm) resistor 
  R_PORT = 0;		// R_DDR ist HiPinR_L
    2b6a:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = (1<<TP1) | (1<<TP2) | (1<<TP3) | (1<<TxD);	//switch all Pins to output
    2b6c:	8f e0       	ldi	r24, 0x0F	; 15
    2b6e:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		//switch all ADC Pins to GND
    2b70:	88 e0       	ldi	r24, 0x08	; 8
    2b72:	88 b9       	out	0x08, r24	; 8
  R_DDR = HiPinR_H;   		// switch R_H resistor port for HighPin to output (GND)
    2b74:	e4 b8       	out	0x04, r14	; 4
// setup Analog Comparator
  ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    2b76:	80 e4       	ldi	r24, 0x40	; 64
    2b78:	80 93 7b 00 	sts	0x007B, r24
  ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    2b7c:	84 e5       	ldi	r24, 0x54	; 84
    2b7e:	80 bf       	out	0x30, r24	; 48
  ADMUX = (1<<REFS0) | HighPin;			// switch Mux to High-Pin
    2b80:	81 2f       	mov	r24, r17
    2b82:	80 64       	ori	r24, 0x40	; 64
    2b84:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    2b88:	86 e1       	ldi	r24, 0x16	; 22
    2b8a:	80 93 7a 00 	sts	0x007A, r24
  wait200us();			//wait for bandgap to start up
    2b8e:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <wait200us>

// setup Counter1
  ovcnt16 = 0;
    2b92:	10 92 4e 01 	sts	0x014E, r1
    2b96:	10 92 4d 01 	sts	0x014D, r1
  TCCR1A = 0;			// set Counter1 to normal Mode
    2b9a:	10 92 80 00 	sts	0x0080, r1
  TCNT1 = 0;			//set Counter to 0
    2b9e:	10 92 85 00 	sts	0x0085, r1
    2ba2:	10 92 84 00 	sts	0x0084, r1
  TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// clear interrupt flags
    2ba6:	87 e2       	ldi	r24, 0x27	; 39
    2ba8:	86 bb       	out	0x16, r24	; 22
#ifndef INHIBIT_SLEEP_MODE
  TIMSK1 = (1<<TOIE1) | (1<<ICIE1);	// enable Timer overflow interrupt and input capture interrupt
    2baa:	81 e2       	ldi	r24, 0x21	; 33
    2bac:	80 93 6f 00 	sts	0x006F, r24
  unfinished = 1;
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	80 93 61 01 	sts	0x0161, r24
#endif
  R_PORT = HiPinR_H;           	// switch R_H resistor port for HighPin to VCC
    2bb6:	e5 b8       	out	0x05, r14	; 5
  if(PartFound == PART_FET) {
    2bb8:	90 91 07 01 	lds	r25, 0x0107
    2bbc:	93 30       	cpi	r25, 0x03	; 3
    2bbe:	71 f4       	brne	.+28     	; 0x2bdc <ReadCapacity+0x2dc>
     // charge capacitor with R_H resistor
     TCCR1B = (1<<CS10);	//Start counter 1MHz or 8MHz
    2bc0:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = (((1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK) & ~(1<<HighPin));	// release only HighPin ADC port
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	01 2e       	mov	r0, r17
    2bca:	02 c0       	rjmp	.+4      	; 0x2bd0 <ReadCapacity+0x2d0>
    2bcc:	88 0f       	add	r24, r24
    2bce:	99 1f       	adc	r25, r25
    2bd0:	0a 94       	dec	r0
    2bd2:	e2 f7       	brpl	.-8      	; 0x2bcc <ReadCapacity+0x2cc>
    2bd4:	80 95       	com	r24
    2bd6:	8f 70       	andi	r24, 0x0F	; 15
    2bd8:	87 b9       	out	0x07, r24	; 7
    2bda:	17 c0       	rjmp	.+46     	; 0x2c0a <ReadCapacity+0x30a>
  } else {
     TCCR1B =  (1<<CS10);	//start counter 1MHz or 8MHz
    2bdc:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
    2be0:	87 b8       	out	0x07, r8	; 7
    2be2:	13 c0       	rjmp	.+38     	; 0x2c0a <ReadCapacity+0x30a>
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
     ovcnt16++;
  }
#else
  while(unfinished) {
    set_sleep_mode(SLEEP_MODE_IDLE);
    2be4:	83 b7       	in	r24, 0x33	; 51
    2be6:	81 7f       	andi	r24, 0xF1	; 241
    2be8:	83 bf       	out	0x33, r24	; 51
    sleep_mode();       /* wait for interrupt */
    2bea:	83 b7       	in	r24, 0x33	; 51
    2bec:	81 60       	ori	r24, 0x01	; 1
    2bee:	83 bf       	out	0x33, r24	; 51
    2bf0:	88 95       	sleep
    2bf2:	83 b7       	in	r24, 0x33	; 51
    2bf4:	8e 7f       	andi	r24, 0xFE	; 254
    2bf6:	83 bf       	out	0x33, r24	; 51
    wdt_reset();
    2bf8:	a8 95       	wdr
    if(ovcnt16 == (F_CPU/5000)) {
    2bfa:	80 91 4d 01 	lds	r24, 0x014D
    2bfe:	90 91 4e 01 	lds	r25, 0x014E
    2c02:	56 e0       	ldi	r21, 0x06	; 6
    2c04:	80 34       	cpi	r24, 0x40	; 64
    2c06:	95 07       	cpc	r25, r21
    2c08:	21 f0       	breq	.+8      	; 0x2c12 <ReadCapacity+0x312>
     // this OV was not counted, but was before the Input Capture
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
     ovcnt16++;
  }
#else
  while(unfinished) {
    2c0a:	80 91 61 01 	lds	r24, 0x0161
    2c0e:	88 23       	and	r24, r24
    2c10:	49 f7       	brne	.-46     	; 0x2be4 <ReadCapacity+0x2e4>
    wdt_reset();
    if(ovcnt16 == (F_CPU/5000)) {
       break; 		//Timeout for Charging, above 12 s
    }
  }
  TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    2c12:	10 92 81 00 	sts	0x0081, r1
  tmpint = ICR1;		// get previous Input Capture Counter flag
    2c16:	c0 91 86 00 	lds	r28, 0x0086
    2c1a:	d0 91 87 00 	lds	r29, 0x0087
  TIMSK1 = (0<<TOIE1) | (0<<ICIE1);	// disable Timer overflow interrupt and input capture interrupt
    2c1e:	10 92 6f 00 	sts	0x006F, r1
  if (TCNT1 < tmpint) {
    2c22:	80 91 84 00 	lds	r24, 0x0084
    2c26:	90 91 85 00 	lds	r25, 0x0085
    2c2a:	8c 17       	cp	r24, r28
    2c2c:	9d 07       	cpc	r25, r29
    2c2e:	48 f4       	brcc	.+18     	; 0x2c42 <ReadCapacity+0x342>
     ovcnt16--;			// one ov to much
    2c30:	80 91 4d 01 	lds	r24, 0x014D
    2c34:	90 91 4e 01 	lds	r25, 0x014E
    2c38:	01 97       	sbiw	r24, 0x01	; 1
    2c3a:	90 93 4e 01 	sts	0x014E, r25
    2c3e:	80 93 4d 01 	sts	0x014D, r24
  }

#endif
//############################################################
  ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    2c42:	86 e9       	ldi	r24, 0x96	; 150
    2c44:	80 93 7a 00 	sts	0x007A, r24
  R_DDR = 0;			// switch R_H resistor port for input
    2c48:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// switch R_H resistor port pull up for HighPin off
    2c4a:	15 b8       	out	0x05, r1	; 5
  adcv[2] = ReadADC(HighPin);   // get loaded voltage
    2c4c:	81 2f       	mov	r24, r17
    2c4e:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
  load_diff = adcv[2] + REF_C_KORR - ref_mv;	// build difference of capacitor voltage to Reference Voltage
    2c52:	20 91 44 01 	lds	r18, 0x0144
    2c56:	30 91 45 01 	lds	r19, 0x0145
    2c5a:	82 1b       	sub	r24, r18
    2c5c:	93 0b       	sbc	r25, r19
    2c5e:	0c 96       	adiw	r24, 0x0c	; 12
    2c60:	90 93 77 01 	sts	0x0177, r25
    2c64:	80 93 76 01 	sts	0x0176, r24
//############################################################
  if (ovcnt16 >= (F_CPU/10000)) {
    2c68:	80 91 4d 01 	lds	r24, 0x014D
    2c6c:	90 91 4e 01 	lds	r25, 0x014E
    2c70:	23 e0       	ldi	r18, 0x03	; 3
    2c72:	80 32       	cpi	r24, 0x20	; 32
    2c74:	92 07       	cpc	r25, r18
    2c76:	08 f0       	brcs	.+2      	; 0x2c7a <ReadCapacity+0x37a>
    2c78:	00 c1       	rjmp	.+512    	; 0x2e7a <ReadCapacity+0x57a>
     goto keinC;	// no normal end
  }
//  cap.cval_uncorrected = CombineII2Long(ovcnt16, tmpint);
  cap.cval_uncorrected.w[1] = ovcnt16;
    2c7a:	80 91 4d 01 	lds	r24, 0x014D
    2c7e:	90 91 4e 01 	lds	r25, 0x014E
    2c82:	90 93 6d 01 	sts	0x016D, r25
    2c86:	80 93 6c 01 	sts	0x016C, r24
  cap.cval_uncorrected.w[0] = tmpint;
    2c8a:	d0 93 6b 01 	sts	0x016B, r29
    2c8e:	c0 93 6a 01 	sts	0x016A, r28

  cap.cpre = -12;			// cap.cval unit is pF 
    2c92:	84 ef       	ldi	r24, 0xF4	; 244
    2c94:	80 93 74 01 	sts	0x0174, r24
  if (ovcnt16 > 65) {
    2c98:	80 91 4d 01 	lds	r24, 0x014D
    2c9c:	90 91 4e 01 	lds	r25, 0x014E
    2ca0:	82 34       	cpi	r24, 0x42	; 66
    2ca2:	91 05       	cpc	r25, r1
    2ca4:	c8 f0       	brcs	.+50     	; 0x2cd8 <ReadCapacity+0x3d8>
     cap.cval_uncorrected.dw /= 100;	// switch to next unit
    2ca6:	60 91 6a 01 	lds	r22, 0x016A
    2caa:	70 91 6b 01 	lds	r23, 0x016B
    2cae:	80 91 6c 01 	lds	r24, 0x016C
    2cb2:	90 91 6d 01 	lds	r25, 0x016D
    2cb6:	24 e6       	ldi	r18, 0x64	; 100
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	40 e0       	ldi	r20, 0x00	; 0
    2cbc:	50 e0       	ldi	r21, 0x00	; 0
    2cbe:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
    2cc2:	20 93 6a 01 	sts	0x016A, r18
    2cc6:	30 93 6b 01 	sts	0x016B, r19
    2cca:	40 93 6c 01 	sts	0x016C, r20
    2cce:	50 93 6d 01 	sts	0x016D, r21
     cap.cpre += 2;			// set unit, prevent overflow
    2cd2:	86 ef       	ldi	r24, 0xF6	; 246
    2cd4:	80 93 74 01 	sts	0x0174, r24
  }
  cap.cval_uncorrected.dw *= RHmultip;		// 708
    2cd8:	60 91 00 01 	lds	r22, 0x0100
    2cdc:	70 91 01 01 	lds	r23, 0x0101
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	20 91 6a 01 	lds	r18, 0x016A
    2ce8:	30 91 6b 01 	lds	r19, 0x016B
    2cec:	40 91 6c 01 	lds	r20, 0x016C
    2cf0:	50 91 6d 01 	lds	r21, 0x016D
    2cf4:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
  cap.cval_uncorrected.dw /= (F_CPU / 10000);	// divide by 100 (@ 1MHz clock), 800 (@ 8MHz clock)
    2cf8:	20 e2       	ldi	r18, 0x20	; 32
    2cfa:	33 e0       	ldi	r19, 0x03	; 3
    2cfc:	40 e0       	ldi	r20, 0x00	; 0
    2cfe:	50 e0       	ldi	r21, 0x00	; 0
    2d00:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
    2d04:	20 93 6a 01 	sts	0x016A, r18
    2d08:	30 93 6b 01 	sts	0x016B, r19
    2d0c:	40 93 6c 01 	sts	0x016C, r20
    2d10:	50 93 6d 01 	sts	0x016D, r21
  cap.cval = cap.cval_uncorrected.dw;		// set the corrected cap.cval
    2d14:	e2 e6       	ldi	r30, 0x62	; 98
    2d16:	f1 e0       	ldi	r31, 0x01	; 1
    2d18:	20 93 62 01 	sts	0x0162, r18
    2d1c:	31 83       	std	Z+1, r19	; 0x01
    2d1e:	42 83       	std	Z+2, r20	; 0x02
    2d20:	53 83       	std	Z+3, r21	; 0x03
  Scale_C_with_vcc();
    2d22:	0e 94 30 14 	call	0x2860	; 0x2860 <Scale_C_with_vcc>
  if (cap.cpre == -12) {
    2d26:	80 91 74 01 	lds	r24, 0x0174
    2d2a:	84 3f       	cpi	r24, 0xF4	; 244
    2d2c:	09 f0       	breq	.+2      	; 0x2d30 <ReadCapacity+0x430>
    2d2e:	55 c0       	rjmp	.+170    	; 0x2dda <ReadCapacity+0x4da>
#if COMP_SLEW1 > COMP_SLEW2
     if (cap.cval < COMP_SLEW1) {
    2d30:	80 90 62 01 	lds	r8, 0x0162
    2d34:	90 90 63 01 	lds	r9, 0x0163
    2d38:	a0 90 64 01 	lds	r10, 0x0164
    2d3c:	b0 90 65 01 	lds	r11, 0x0165
    2d40:	50 ea       	ldi	r21, 0xA0	; 160
    2d42:	85 16       	cp	r8, r21
    2d44:	5f e0       	ldi	r21, 0x0F	; 15
    2d46:	95 06       	cpc	r9, r21
    2d48:	50 e0       	ldi	r21, 0x00	; 0
    2d4a:	a5 06       	cpc	r10, r21
    2d4c:	50 e0       	ldi	r21, 0x00	; 0
    2d4e:	b5 06       	cpc	r11, r21
    2d50:	c0 f4       	brcc	.+48     	; 0x2d82 <ReadCapacity+0x482>
        // add slew rate dependent offset
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
    2d52:	a5 01       	movw	r20, r10
    2d54:	94 01       	movw	r18, r8
    2d56:	24 52       	subi	r18, 0x24	; 36
    2d58:	3f 4f       	sbci	r19, 0xFF	; 255
    2d5a:	4f 4f       	sbci	r20, 0xFF	; 255
    2d5c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d5e:	60 ea       	ldi	r22, 0xA0	; 160
    2d60:	7f e0       	ldi	r23, 0x0F	; 15
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
    2d6a:	28 0d       	add	r18, r8
    2d6c:	39 1d       	adc	r19, r9
    2d6e:	4a 1d       	adc	r20, r10
    2d70:	5b 1d       	adc	r21, r11
    2d72:	20 93 62 01 	sts	0x0162, r18
    2d76:	30 93 63 01 	sts	0x0163, r19
    2d7a:	40 93 64 01 	sts	0x0164, r20
    2d7e:	50 93 65 01 	sts	0x0165, r21
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2d82:	80 91 4c 01 	lds	r24, 0x014C
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	81 51       	subi	r24, 0x11	; 17
    2d8a:	9e 4f       	sbci	r25, 0xFE	; 254
    2d8c:	0e 94 57 1f 	call	0x3eae	; 0x3eae <__eerd_byte_m168>
     if (cap.cval > tmpint) {
    2d90:	20 91 62 01 	lds	r18, 0x0162
    2d94:	30 91 63 01 	lds	r19, 0x0163
    2d98:	40 91 64 01 	lds	r20, 0x0164
    2d9c:	50 91 65 01 	lds	r21, 0x0165
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2da0:	90 e0       	ldi	r25, 0x00	; 0
     if (cap.cval > tmpint) {
    2da2:	a0 e0       	ldi	r26, 0x00	; 0
    2da4:	b0 e0       	ldi	r27, 0x00	; 0
    2da6:	82 17       	cp	r24, r18
    2da8:	93 07       	cpc	r25, r19
    2daa:	a4 07       	cpc	r26, r20
    2dac:	b5 07       	cpc	r27, r21
    2dae:	68 f4       	brcc	.+26     	; 0x2dca <ReadCapacity+0x4ca>
         cap.cval -= tmpint;		//subtract zero offset (pF)
    2db0:	28 1b       	sub	r18, r24
    2db2:	39 0b       	sbc	r19, r25
    2db4:	4a 0b       	sbc	r20, r26
    2db6:	5b 0b       	sbc	r21, r27
    2db8:	20 93 62 01 	sts	0x0162, r18
    2dbc:	30 93 63 01 	sts	0x0163, r19
    2dc0:	40 93 64 01 	sts	0x0164, r20
    2dc4:	50 93 65 01 	sts	0x0165, r21
    2dc8:	08 c0       	rjmp	.+16     	; 0x2dda <ReadCapacity+0x4da>
     } else {
         cap.cval = 0;			//unsigned long may not reach negativ value
    2dca:	10 92 62 01 	sts	0x0162, r1
    2dce:	10 92 63 01 	sts	0x0163, r1
    2dd2:	10 92 64 01 	sts	0x0164, r1
    2dd6:	10 92 65 01 	sts	0x0165, r1
  lcd_testpin(HighPin);
  lcd_space();
  DisplayValue(cap.cval,cap.cpre,'F',4);
  wait_about3s();
#endif
  R_DDR = HiPinR_L; 		//switch R_L for High-Pin to GND
    2dda:	c4 b8       	out	0x04, r12	; 4
#if F_CPU < 2000001
   if(cap.cval < 50)
#else 
   if(cap.cval < 25)
    2ddc:	80 91 62 01 	lds	r24, 0x0162
    2de0:	90 91 63 01 	lds	r25, 0x0163
    2de4:	a0 91 64 01 	lds	r26, 0x0164
    2de8:	b0 91 65 01 	lds	r27, 0x0165
    2dec:	89 31       	cpi	r24, 0x19	; 25
    2dee:	91 05       	cpc	r25, r1
    2df0:	a1 05       	cpc	r26, r1
    2df2:	b1 05       	cpc	r27, r1
    2df4:	08 f4       	brcc	.+2      	; 0x2df8 <ReadCapacity+0x4f8>
    2df6:	41 c0       	rjmp	.+130    	; 0x2e7a <ReadCapacity+0x57a>
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
  vloss = 0;				// set lost voltage to zero
    2df8:	cc 24       	eor	r12, r12
    2dfa:	dd 24       	eor	r13, r13
#endif
      goto keinC;	//capacity to low, < 70pF @1MHz (35pF @8MHz)
   }
   // end low capacity 
checkDiodes:
   if((NumOfDiodes > 0)  && (PartFound != PART_FET)) {
    2dfc:	80 91 05 01 	lds	r24, 0x0105
    2e00:	88 23       	and	r24, r24
    2e02:	21 f0       	breq	.+8      	; 0x2e0c <ReadCapacity+0x50c>
    2e04:	80 91 07 01 	lds	r24, 0x0107
    2e08:	83 30       	cpi	r24, 0x03	; 3
    2e0a:	b9 f5       	brne	.+110    	; 0x2e7a <ReadCapacity+0x57a>
      wait_about1s();
#endif
      // nearly shure, that there is one or more diodes in reverse direction,
      // which would be wrongly detected as capacitor 
   } else {
      PartFound = PART_CAPACITOR;	//capacitor is found
    2e0c:	87 e0       	ldi	r24, 0x07	; 7
    2e0e:	80 93 07 01 	sts	0x0107, r24
      if ((cap.cpre > cap.cpre_max) || ((cap.cpre == cap.cpre_max) && (cap.cval > cap.cval_max))) {
    2e12:	60 91 74 01 	lds	r22, 0x0174
    2e16:	80 91 75 01 	lds	r24, 0x0175
    2e1a:	86 17       	cp	r24, r22
    2e1c:	bc f0       	brlt	.+46     	; 0x2e4c <ReadCapacity+0x54c>
    2e1e:	68 17       	cp	r22, r24
    2e20:	61 f5       	brne	.+88     	; 0x2e7a <ReadCapacity+0x57a>
    2e22:	20 91 62 01 	lds	r18, 0x0162
    2e26:	30 91 63 01 	lds	r19, 0x0163
    2e2a:	40 91 64 01 	lds	r20, 0x0164
    2e2e:	50 91 65 01 	lds	r21, 0x0165
    2e32:	80 91 66 01 	lds	r24, 0x0166
    2e36:	90 91 67 01 	lds	r25, 0x0167
    2e3a:	a0 91 68 01 	lds	r26, 0x0168
    2e3e:	b0 91 69 01 	lds	r27, 0x0169
    2e42:	82 17       	cp	r24, r18
    2e44:	93 07       	cpc	r25, r19
    2e46:	a4 07       	cpc	r26, r20
    2e48:	b5 07       	cpc	r27, r21
    2e4a:	b8 f4       	brcc	.+46     	; 0x2e7a <ReadCapacity+0x57a>
         // we have found a greater one
         cap.cval_max = cap.cval;
    2e4c:	e2 e6       	ldi	r30, 0x62	; 98
    2e4e:	f1 e0       	ldi	r31, 0x01	; 1
    2e50:	80 91 62 01 	lds	r24, 0x0162
    2e54:	90 91 63 01 	lds	r25, 0x0163
    2e58:	a0 91 64 01 	lds	r26, 0x0164
    2e5c:	b0 91 65 01 	lds	r27, 0x0165
    2e60:	80 93 66 01 	sts	0x0166, r24
    2e64:	90 93 67 01 	sts	0x0167, r25
    2e68:	a0 93 68 01 	sts	0x0168, r26
    2e6c:	b0 93 69 01 	sts	0x0169, r27
         cap.cpre_max = cap.cpre;
    2e70:	63 8b       	std	Z+19, r22	; 0x13
#if FLASHEND > 0x1fff
         cap.v_loss = vloss;		// lost voltage in 0.01%
    2e72:	d7 86       	std	Z+15, r13	; 0x0f
    2e74:	c6 86       	std	Z+14, r12	; 0x0e
#endif
         cap.ca = LowPin;		// save LowPin
    2e76:	00 8b       	std	Z+16, r16	; 0x10
         cap.cb = HighPin;		// save HighPin
    2e78:	11 8b       	std	Z+17, r17	; 0x11
keinC:
  // discharge capacitor again
//  EntladePins();		// discharge capacitors
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    2e7a:	88 e0       	ldi	r24, 0x08	; 8
    2e7c:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    2e7e:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    2e80:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    2e82:	15 b8       	out	0x05, r1	; 5
  return;
 } // end ReadCapacity()
    2e84:	df 91       	pop	r29
    2e86:	cf 91       	pop	r28
    2e88:	1f 91       	pop	r17
    2e8a:	0f 91       	pop	r16
    2e8c:	ff 90       	pop	r15
    2e8e:	ef 90       	pop	r14
    2e90:	df 90       	pop	r13
    2e92:	cf 90       	pop	r12
    2e94:	bf 90       	pop	r11
    2e96:	af 90       	pop	r10
    2e98:	9f 90       	pop	r9
    2e9a:	8f 90       	pop	r8
    2e9c:	08 95       	ret

00002e9e <__vector_13>:
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
}
#ifndef INHIBIT_SLEEP_MODE

 ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    2e9e:	1f 92       	push	r1
    2ea0:	0f 92       	push	r0
    2ea2:	0f b6       	in	r0, 0x3f	; 63
    2ea4:	0f 92       	push	r0
    2ea6:	11 24       	eor	r1, r1
    2ea8:	8f 93       	push	r24
    2eaa:	9f 93       	push	r25
 ovcnt16++;				// count overflow
    2eac:	80 91 4d 01 	lds	r24, 0x014D
    2eb0:	90 91 4e 01 	lds	r25, 0x014E
    2eb4:	01 96       	adiw	r24, 0x01	; 1
    2eb6:	90 93 4e 01 	sts	0x014E, r25
    2eba:	80 93 4d 01 	sts	0x014D, r24
}
    2ebe:	9f 91       	pop	r25
    2ec0:	8f 91       	pop	r24
    2ec2:	0f 90       	pop	r0
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	0f 90       	pop	r0
    2ec8:	1f 90       	pop	r1
    2eca:	18 95       	reti

00002ecc <__vector_10>:
 ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    2ecc:	1f 92       	push	r1
    2ece:	0f 92       	push	r0
    2ed0:	0f b6       	in	r0, 0x3f	; 63
    2ed2:	0f 92       	push	r0
    2ed4:	11 24       	eor	r1, r1
 unfinished = 0;			// clear unfinished flag
    2ed6:	10 92 61 01 	sts	0x0161, r1
}
    2eda:	0f 90       	pop	r0
    2edc:	0f be       	out	0x3f, r0	; 63
    2ede:	0f 90       	pop	r0
    2ee0:	1f 90       	pop	r1
    2ee2:	18 95       	reti

00002ee4 <get_log>:
 } // end ReadInductance()


#if FLASHEND > 0x1fff
// get_log interpolate a table with the function -log(1 - (permil/1000))
uint16_t get_log(uint16_t permil) {
    2ee4:	cf 93       	push	r28
    2ee6:	df 93       	push	r29
  uint16_t y1, y2;			// table values
  uint16_t result;			// result of interpolation
  uint8_t tabind;			// index to table value
  uint8_t tabres;			// distance to lower table value, fraction of Log_Tab_Distance

  tabind = permil / Log_Tab_Distance;	// index to table
    2ee8:	24 e1       	ldi	r18, 0x14	; 20
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	b9 01       	movw	r22, r18
    2eee:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__udivmodhi4>
    2ef2:	dc 01       	movw	r26, r24
  tabres = permil % Log_Tab_Distance;	// fraction of table distance
  // interpolate the table of factors
  y1 = pgm_read_word(&LogTab[tabind]);	// get the lower table value
    2ef4:	70 e0       	ldi	r23, 0x00	; 0
    2ef6:	fb 01       	movw	r30, r22
    2ef8:	ee 0f       	add	r30, r30
    2efa:	ff 1f       	adc	r31, r31
    2efc:	e8 59       	subi	r30, 0x98	; 152
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	c5 91       	lpm	r28, Z+
    2f02:	d4 91       	lpm	r29, Z+
  y2 = pgm_read_word(&LogTab[tabind+1]); // get the higher table value
    2f04:	fb 01       	movw	r30, r22
    2f06:	ee 0f       	add	r30, r30
    2f08:	ff 1f       	adc	r31, r31
    2f0a:	e6 59       	subi	r30, 0x96	; 150
    2f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0e:	45 91       	lpm	r20, Z+
    2f10:	54 91       	lpm	r21, Z+
  result = ((y2 - y1) * tabres ) / Log_Tab_Distance + y1; // interpolate
    2f12:	4c 1b       	sub	r20, r28
    2f14:	5d 0b       	sbc	r21, r29
    2f16:	4a 9f       	mul	r20, r26
    2f18:	c0 01       	movw	r24, r0
    2f1a:	4b 9f       	mul	r20, r27
    2f1c:	90 0d       	add	r25, r0
    2f1e:	5a 9f       	mul	r21, r26
    2f20:	90 0d       	add	r25, r0
    2f22:	11 24       	eor	r1, r1
    2f24:	b9 01       	movw	r22, r18
    2f26:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__udivmodhi4>
    2f2a:	6c 0f       	add	r22, r28
    2f2c:	7d 1f       	adc	r23, r29
  return(result);
 }
    2f2e:	cb 01       	movw	r24, r22
    2f30:	df 91       	pop	r29
    2f32:	cf 91       	pop	r28
    2f34:	08 95       	ret

00002f36 <ReadInductance>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadInductance(void) {
    2f36:	2f 92       	push	r2
    2f38:	3f 92       	push	r3
    2f3a:	4f 92       	push	r4
    2f3c:	5f 92       	push	r5
    2f3e:	6f 92       	push	r6
    2f40:	7f 92       	push	r7
    2f42:	8f 92       	push	r8
    2f44:	9f 92       	push	r9
    2f46:	af 92       	push	r10
    2f48:	bf 92       	push	r11
    2f4a:	cf 92       	push	r12
    2f4c:	df 92       	push	r13
    2f4e:	ef 92       	push	r14
    2f50:	ff 92       	push	r15
    2f52:	0f 93       	push	r16
    2f54:	1f 93       	push	r17
    2f56:	df 93       	push	r29
    2f58:	cf 93       	push	r28
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
    2f5e:	68 97       	sbiw	r28, 0x18	; 24
    2f60:	0f b6       	in	r0, 0x3f	; 63
    2f62:	f8 94       	cli
    2f64:	de bf       	out	0x3e, r29	; 62
    2f66:	0f be       	out	0x3f, r0	; 63
    2f68:	cd bf       	out	0x3d, r28	; 61
  int8_t ukorr;		// correction of comparator voltage
  uint8_t nr_pol1;	// number of successfull inductance measurement with polarity 1
  uint8_t nr_pol2;	// number of successfull inductance measurement with polarity 2


  if(PartFound != PART_RESISTOR) {
    2f6a:	80 91 07 01 	lds	r24, 0x0107
    2f6e:	86 30       	cpi	r24, 0x06	; 6
    2f70:	09 f0       	breq	.+2      	; 0x2f74 <ReadInductance+0x3e>
    2f72:	4b c2       	rjmp	.+1174   	; 0x340a <ReadInductance+0x4d4>
     return;	//We have found no resistor  
  }
  if (ResistorsFound != 1) {
    2f74:	80 91 5e 01 	lds	r24, 0x015E
    2f78:	81 30       	cpi	r24, 0x01	; 1
    2f7a:	09 f0       	breq	.+2      	; 0x2f7e <ReadInductance+0x48>
    2f7c:	46 c2       	rjmp	.+1164   	; 0x340a <ReadInductance+0x4d4>
     return;	// do not search for inductance, more than 1 resistor
  }
//  for (found=0;found<ResistorsFound;found++) {
//     if (resis[found].rx > 21000) continue;
     if (resis[found].rx > 21000) return;
    2f7e:	80 91 18 01 	lds	r24, 0x0118
    2f82:	90 91 19 01 	lds	r25, 0x0119
    2f86:	a0 91 1a 01 	lds	r26, 0x011A
    2f8a:	b0 91 1b 01 	lds	r27, 0x011B
    2f8e:	89 30       	cpi	r24, 0x09	; 9
    2f90:	22 e5       	ldi	r18, 0x52	; 82
    2f92:	92 07       	cpc	r25, r18
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	a2 07       	cpc	r26, r18
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	b2 07       	cpc	r27, r18
    2f9c:	08 f0       	brcs	.+2      	; 0x2fa0 <ReadInductance+0x6a>
    2f9e:	35 c2       	rjmp	.+1130   	; 0x340a <ReadInductance+0x4d4>
    2fa0:	99 24       	eor	r9, r9
    2fa2:	80 91 21 01 	lds	r24, 0x0121
    2fa6:	40 90 22 01 	lds	r4, 0x0122

     // we can check for Inductance, if resistance is below 2100 Ohm
     for (count=0;count<4;count++) {
        // Try four times (different direction and with delayed counter start)
        if (count < 2) {
    2faa:	99 2d       	mov	r25, r9
    2fac:	92 30       	cpi	r25, 0x02	; 2
    2fae:	10 f4       	brcc	.+4      	; 0x2fb4 <ReadInductance+0x7e>
           // first and second pass, direction 1
           LowPin = resis[found].ra;
    2fb0:	88 2e       	mov	r8, r24
    2fb2:	02 c0       	rjmp	.+4      	; 0x2fb8 <ReadInductance+0x82>
           HighPin = resis[found].rb;
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    2fb4:	84 2c       	mov	r8, r4
           HighPin = resis[found].ra;
    2fb6:	48 2e       	mov	r4, r24
        }
        HiADC = pgm_read_byte(&PinADCtab[HighPin]);
    2fb8:	e4 2d       	mov	r30, r4
    2fba:	f0 e0       	ldi	r31, 0x00	; 0
    2fbc:	eb 51       	subi	r30, 0x1B	; 27
    2fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc0:	24 91       	lpm	r18, Z+
        LoPinR_L = pgm_read_byte(&PinRLtab[LowPin]);	//R_L mask for HighPin R_L load
    2fc2:	e8 2d       	mov	r30, r8
    2fc4:	f0 e0       	ldi	r31, 0x00	; 0
    2fc6:	ee 51       	subi	r30, 0x1E	; 30
    2fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fca:	e4 91       	lpm	r30, Z+
        //==================================================================================
        // Measurement of Inductance values
        R_PORT = 0;		// switch R port to GND
    2fcc:	15 b8       	out	0x05, r1	; 5
        ADC_PORT =   TXD_VAL;		// switch ADC-Port to GND
    2fce:	a8 e0       	ldi	r26, 0x08	; 8
    2fd0:	a8 b9       	out	0x08, r26	; 8
        if ((resis[found].rx < 240) && ((count & 0x01) == 0)) {
    2fd2:	80 91 18 01 	lds	r24, 0x0118
    2fd6:	90 91 19 01 	lds	r25, 0x0119
    2fda:	a0 91 1a 01 	lds	r26, 0x011A
    2fde:	b0 91 1b 01 	lds	r27, 0x011B
    2fe2:	80 3f       	cpi	r24, 0xF0	; 240
    2fe4:	91 05       	cpc	r25, r1
    2fe6:	a1 05       	cpc	r26, r1
    2fe8:	b1 05       	cpc	r27, r1
    2fea:	b8 f4       	brcc	.+46     	; 0x301a <ReadInductance+0xe4>
    2fec:	90 fc       	sbrc	r9, 0
    2fee:	15 c0       	rjmp	.+42     	; 0x301a <ReadInductance+0xe4>
           // we can use PinR_L for measurement
           mess_r = RR680MI - R_L_VAL;			// use only pin output resistance
    2ff0:	a0 90 02 01 	lds	r10, 0x0102
    2ff4:	b0 90 03 01 	lds	r11, 0x0103
    2ff8:	80 e7       	ldi	r24, 0x70	; 112
    2ffa:	95 ee       	ldi	r25, 0xE5	; 229
    2ffc:	a8 0e       	add	r10, r24
    2ffe:	b9 1e       	adc	r11, r25
           ADC_DDR = HiADC | (1<<LowPin) | TXD_MSK;	// switch HiADC and Low Pin to GND, 
    3000:	32 2f       	mov	r19, r18
    3002:	38 60       	ori	r19, 0x08	; 8
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	08 2c       	mov	r0, r8
    300a:	02 c0       	rjmp	.+4      	; 0x3010 <ReadInductance+0xda>
    300c:	88 0f       	add	r24, r24
    300e:	99 1f       	adc	r25, r25
    3010:	0a 94       	dec	r0
    3012:	e2 f7       	brpl	.-8      	; 0x300c <ReadInductance+0xd6>
    3014:	38 2b       	or	r19, r24
    3016:	37 b9       	out	0x07, r19	; 7
    3018:	08 c0       	rjmp	.+16     	; 0x302a <ReadInductance+0xf4>
        } else {
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
    301a:	e4 b9       	out	0x04, r30	; 4
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
    301c:	82 2f       	mov	r24, r18
    301e:	88 60       	ori	r24, 0x08	; 8
    3020:	87 b9       	out	0x07, r24	; 7
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
    3022:	a0 90 02 01 	lds	r10, 0x0102
    3026:	b0 90 03 01 	lds	r11, 0x0103
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    302a:	30 e0       	ldi	r19, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    302c:	88 2d       	mov	r24, r8
    302e:	28 8f       	std	Y+24, r18	; 0x18
    3030:	3f 8b       	std	Y+23, r19	; 0x17
    3032:	0e 94 9d 1a 	call	0x353a	; 0x353a <W10msReadADC>
    3036:	6c 01       	movw	r12, r24
            total_r =  ReadADC(HighPin);
    3038:	84 2d       	mov	r24, r4
    303a:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
    303e:	ac 01       	movw	r20, r24
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    3040:	28 8d       	ldd	r18, Y+24	; 0x18
    3042:	3f 89       	ldd	r19, Y+23	; 0x17
    3044:	92 e0       	ldi	r25, 0x02	; 2
    3046:	c9 16       	cp	r12, r25
    3048:	d1 04       	cpc	r13, r1
    304a:	18 f4       	brcc	.+6      	; 0x3052 <ReadInductance+0x11c>
    304c:	42 30       	cpi	r20, 0x02	; 2
    304e:	51 05       	cpc	r21, r1
    3050:	18 f0       	brcs	.+6      	; 0x3058 <ReadInductance+0x122>
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    3052:	3f 5f       	subi	r19, 0xFF	; 255
    3054:	34 31       	cpi	r19, 0x14	; 20
    3056:	51 f7       	brne	.-44     	; 0x302c <ReadInductance+0xf6>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
        // setup Analog Comparator
        ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    3058:	a0 e4       	ldi	r26, 0x40	; 64
    305a:	a0 93 7b 00 	sts	0x007B, r26
        ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    305e:	b4 e5       	ldi	r27, 0x54	; 84
    3060:	b0 bf       	out	0x30, r27	; 48
        ADMUX = (1<<REFS0) | LowPin;			// switch Mux to Low-Pin
    3062:	88 2d       	mov	r24, r8
    3064:	80 64       	ori	r24, 0x40	; 64
    3066:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    306a:	86 e1       	ldi	r24, 0x16	; 22
    306c:	80 93 7a 00 	sts	0x007A, r24
   
      // setup Counter1
        timeconstant.w[1] = 0;		// set ov counter to 0
    3070:	00 e0       	ldi	r16, 0x00	; 0
    3072:	10 e0       	ldi	r17, 0x00	; 0
        TCCR1A = 0;			// set Counter1 to normal Mode
    3074:	10 92 80 00 	sts	0x0080, r1
        TCNT1 = 0;			//set Counter to 0
    3078:	10 92 85 00 	sts	0x0085, r1
    307c:	10 92 84 00 	sts	0x0084, r1
        TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// reset TIFR or TIFR1
    3080:	97 e2       	ldi	r25, 0x27	; 39
    3082:	96 bb       	out	0x16, r25	; 22
        HiADC |= TXD_VAL;
    3084:	28 60       	ori	r18, 0x08	; 8
        wait200us();			// wait for bandgap to start up
    3086:	28 8f       	std	Y+24, r18	; 0x18
    3088:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <wait200us>
        if ((count & 0x01) == 0 ) {
    308c:	29 2c       	mov	r2, r9
    308e:	33 24       	eor	r3, r3
    3090:	d1 01       	movw	r26, r2
    3092:	a1 70       	andi	r26, 0x01	; 1
    3094:	b0 70       	andi	r27, 0x00	; 0
    3096:	ba 8b       	std	Y+18, r27	; 0x12
    3098:	a9 8b       	std	Y+17, r26	; 0x11
    309a:	28 8d       	ldd	r18, Y+24	; 0x18
    309c:	90 fc       	sbrc	r9, 0
    309e:	05 c0       	rjmp	.+10     	; 0x30aa <ReadInductance+0x174>
           //first start counter, then start current
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    30a0:	b1 e8       	ldi	r27, 0x81	; 129
    30a2:	b0 93 81 00 	sts	0x0081, r27
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    30a6:	28 b9       	out	0x08, r18	; 8
    30a8:	08 c0       	rjmp	.+16     	; 0x30ba <ReadInductance+0x184>
        } else {
           //first start current, then start counter with delay
           //parasitic capacity of coil can cause high current at the beginning
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    30aa:	28 b9       	out	0x08, r18	; 8
      #if F_CPU >= 8000000UL
           wait3us();		// ignore current peak from capacity
    30ac:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <wait3us>
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
    30b0:	20 e2       	ldi	r18, 0x20	; 32
    30b2:	26 bb       	out	0x16, r18	; 22
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    30b4:	81 e8       	ldi	r24, 0x81	; 129
    30b6:	80 93 81 00 	sts	0x0081, r24
    30ba:	c8 01       	movw	r24, r16
        }
      
      //******************************
        while(1) {
           // Wait, until  Input Capture is set
           ii = TI1_INT_FLAGS;		//read Timer flags
    30bc:	46 b3       	in	r20, 0x16	; 22
           if (ii & (1<<ICF1))  {
    30be:	45 ff       	sbrs	r20, 5
    30c0:	02 c0       	rjmp	.+4      	; 0x30c6 <ReadInductance+0x190>
    30c2:	8c 01       	movw	r16, r24
    30c4:	0b c0       	rjmp	.+22     	; 0x30dc <ReadInductance+0x1a6>
              break;
           }
           if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    30c6:	40 ff       	sbrs	r20, 0
    30c8:	f9 cf       	rjmp	.-14     	; 0x30bc <ReadInductance+0x186>
              TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    30ca:	a1 e0       	ldi	r26, 0x01	; 1
    30cc:	a6 bb       	out	0x16, r26	; 22
              wdt_reset();
    30ce:	a8 95       	wdr
    30d0:	01 96       	adiw	r24, 0x01	; 1
              timeconstant.w[1]++;		// count one OV
              if(timeconstant.w[1] == (F_CPU/100000UL)) {
    30d2:	80 35       	cpi	r24, 0x50	; 80
    30d4:	91 05       	cpc	r25, r1
    30d6:	91 f7       	brne	.-28     	; 0x30bc <ReadInductance+0x186>
    30d8:	00 e5       	ldi	r16, 0x50	; 80
    30da:	10 e0       	ldi	r17, 0x00	; 0
                 break; 	//Timeout for Charging, above 0.13 s
              }
           }
        }
        TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    30dc:	10 92 81 00 	sts	0x0081, r1
        TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    30e0:	b0 e2       	ldi	r27, 0x20	; 32
    30e2:	b6 bb       	out	0x16, r27	; 22
        timeconstant.w[0] = ICR1;		// get previous Input Capture Counter flag
    30e4:	20 91 86 00 	lds	r18, 0x0086
    30e8:	30 91 87 00 	lds	r19, 0x0087
    30ec:	79 01       	movw	r14, r18
      // check actual counter, if an additional overflow must be added
        if((TCNT1 > timeconstant.w[0]) && (ii & (1<<TOV1))) {
    30ee:	80 91 84 00 	lds	r24, 0x0084
    30f2:	90 91 85 00 	lds	r25, 0x0085
    30f6:	28 17       	cp	r18, r24
    30f8:	39 07       	cpc	r19, r25
    30fa:	30 f4       	brcc	.+12     	; 0x3108 <ReadInductance+0x1d2>
    30fc:	40 ff       	sbrs	r20, 0
    30fe:	04 c0       	rjmp	.+8      	; 0x3108 <ReadInductance+0x1d2>
           // this OV was not counted, but was before the Input Capture
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    3100:	21 e0       	ldi	r18, 0x01	; 1
    3102:	26 bb       	out	0x16, r18	; 22
           timeconstant.w[1]++;			// count one additional OV
    3104:	0f 5f       	subi	r16, 0xFF	; 255
    3106:	1f 4f       	sbci	r17, 0xFF	; 255
        }

        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    3108:	88 e0       	ldi	r24, 0x08	; 8
    310a:	88 b9       	out	0x08, r24	; 8
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    310c:	96 e9       	ldi	r25, 0x96	; 150
    310e:	90 93 7a 00 	sts	0x007A, r25
        for (ii=0;ii<20;ii++) {
    3112:	20 e0       	ldi	r18, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    3114:	88 2d       	mov	r24, r8
    3116:	28 8f       	std	Y+24, r18	; 0x18
    3118:	0e 94 9d 1a 	call	0x353a	; 0x353a <W10msReadADC>
    311c:	6c 01       	movw	r12, r24
            total_r =  ReadADC(HighPin);
    311e:	84 2d       	mov	r24, r4
    3120:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    3124:	28 8d       	ldd	r18, Y+24	; 0x18
    3126:	a2 e0       	ldi	r26, 0x02	; 2
    3128:	ca 16       	cp	r12, r26
    312a:	d1 04       	cpc	r13, r1
    312c:	18 f4       	brcc	.+6      	; 0x3134 <ReadInductance+0x1fe>
    312e:	82 30       	cpi	r24, 0x02	; 2
    3130:	91 05       	cpc	r25, r1
    3132:	18 f0       	brcs	.+6      	; 0x313a <ReadInductance+0x204>
           timeconstant.w[1]++;			// count one additional OV
        }

        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
        for (ii=0;ii<20;ii++) {
    3134:	2f 5f       	subi	r18, 0xFF	; 255
    3136:	24 31       	cpi	r18, 0x14	; 20
    3138:	69 f7       	brne	.-38     	; 0x3114 <ReadInductance+0x1de>
//  #undef CNT_ZERO_42
//  #undef CNT_ZERO_720
//  #define CNT_ZERO_42 7
//  #define CNT_ZERO_720 10
//#endif
        total_r = (mess_r + resis[found].rx + RRpinMI);
    313a:	c0 90 18 01 	lds	r12, 0x0118
    313e:	d0 90 19 01 	lds	r13, 0x0119
    3142:	80 91 47 01 	lds	r24, 0x0147
    3146:	90 91 48 01 	lds	r25, 0x0148
    314a:	c8 0e       	add	r12, r24
    314c:	d9 1e       	adc	r13, r25
    314e:	ca 0c       	add	r12, r10
    3150:	db 1c       	adc	r13, r11
//        if (total_r > 7000) cnt_diff = 1;
//        if (total_r > 14000) cnt_diff = 2;
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
        // Voltage of comparator in % of umax
     #ifdef AUTO_CAL
        tmpint = (ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset))) ;
    3152:	8d ee       	ldi	r24, 0xED	; 237
    3154:	91 e0       	ldi	r25, 0x01	; 1
    3156:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <__eerd_word_m168>
    315a:	20 91 44 01 	lds	r18, 0x0144
    315e:	30 91 45 01 	lds	r19, 0x0145
    3162:	28 0f       	add	r18, r24
    3164:	39 1f       	adc	r19, r25
     #else
        tmpint = (ref_mv + REF_C_KORR);
     #endif
        if (mess_r < R_L_VAL) {
    3166:	b0 e9       	ldi	r27, 0x90	; 144
    3168:	ab 16       	cp	r10, r27
    316a:	ba e1       	ldi	r27, 0x1A	; 26
    316c:	bb 06       	cpc	r11, r27
    316e:	b8 f4       	brcc	.+46     	; 0x319e <ReadInductance+0x268>
           // measurement without 680 Ohm
           cnt_diff = CNT_ZERO_42;
           if (timeconstant.dw < 225) {
    3170:	81 ee       	ldi	r24, 0xE1	; 225
    3172:	e8 16       	cp	r14, r24
    3174:	f1 04       	cpc	r15, r1
    3176:	01 05       	cpc	r16, r1
    3178:	11 05       	cpc	r17, r1
    317a:	38 f4       	brcc	.+14     	; 0x318a <ReadInductance+0x254>
              ukorr = (timeconstant.w[0] / 5) - 20;
    317c:	c7 01       	movw	r24, r14
    317e:	65 e0       	ldi	r22, 0x05	; 5
    3180:	70 e0       	ldi	r23, 0x00	; 0
    3182:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__udivmodhi4>
    3186:	64 51       	subi	r22, 0x14	; 20
    3188:	01 c0       	rjmp	.+2      	; 0x318c <ReadInductance+0x256>
           } else {
              ukorr = 25;
    318a:	69 e1       	ldi	r22, 0x19	; 25
           }
           tmpint -= (((REF_L_KORR * 10) / 10) + ukorr);
    318c:	28 52       	subi	r18, 0x28	; 40
    318e:	30 40       	sbci	r19, 0x00	; 0
    3190:	77 27       	eor	r23, r23
    3192:	67 fd       	sbrc	r22, 7
    3194:	70 95       	com	r23
    3196:	26 1b       	sub	r18, r22
    3198:	37 0b       	sbc	r19, r23
     #else
        tmpint = (ref_mv + REF_C_KORR);
     #endif
        if (mess_r < R_L_VAL) {
           // measurement without 680 Ohm
           cnt_diff = CNT_ZERO_42;
    319a:	66 e0       	ldi	r22, 0x06	; 6
    319c:	08 c0       	rjmp	.+16     	; 0x31ae <ReadInductance+0x278>
//#endif
        total_r = (mess_r + resis[found].rx + RRpinMI);
//        cnt_diff = 0;
//        if (total_r > 7000) cnt_diff = 1;
//        if (total_r > 14000) cnt_diff = 2;
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
    319e:	c6 01       	movw	r24, r12
    31a0:	60 eb       	ldi	r22, 0xB0	; 176
    31a2:	76 e3       	ldi	r23, 0x36	; 54
    31a4:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__udivmodhi4>
           }
           tmpint -= (((REF_L_KORR * 10) / 10) + ukorr);
        } else {
           // measurement with 680 Ohm resistor
           // if 680 Ohm resistor is used, use REF_L_KORR for correction
           cnt_diff += CNT_ZERO_720;
    31a8:	69 5f       	subi	r22, 0xF9	; 249
           tmpint += REF_L_KORR;
    31aa:	28 5d       	subi	r18, 0xD8	; 216
    31ac:	3f 4f       	sbci	r19, 0xFF	; 255
        }
        if (timeconstant.dw > cnt_diff) timeconstant.dw -= cnt_diff;
    31ae:	70 e0       	ldi	r23, 0x00	; 0
    31b0:	80 e0       	ldi	r24, 0x00	; 0
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	6e 15       	cp	r22, r14
    31b6:	7f 05       	cpc	r23, r15
    31b8:	80 07       	cpc	r24, r16
    31ba:	91 07       	cpc	r25, r17
    31bc:	28 f4       	brcc	.+10     	; 0x31c8 <ReadInductance+0x292>
    31be:	e6 1a       	sub	r14, r22
    31c0:	f7 0a       	sbc	r15, r23
    31c2:	08 0b       	sbc	r16, r24
    31c4:	19 0b       	sbc	r17, r25
    31c6:	03 c0       	rjmp	.+6      	; 0x31ce <ReadInductance+0x298>
        else          timeconstant.dw = 0;
    31c8:	ee 24       	eor	r14, r14
    31ca:	ff 24       	eor	r15, r15
    31cc:	87 01       	movw	r16, r14
       
        if ((count&0x01) == 1) {
    31ce:	a9 89       	ldd	r26, Y+17	; 0x11
    31d0:	ba 89       	ldd	r27, Y+18	; 0x12
    31d2:	10 97       	sbiw	r26, 0x00	; 0
    31d4:	41 f0       	breq	.+16     	; 0x31e6 <ReadInductance+0x2b0>
           // second pass with delayed counter start
           timeconstant.dw += (3 * (F_CPU/1000000UL))+10;
    31d6:	82 e2       	ldi	r24, 0x22	; 34
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	a0 e0       	ldi	r26, 0x00	; 0
    31dc:	b0 e0       	ldi	r27, 0x00	; 0
    31de:	e8 0e       	add	r14, r24
    31e0:	f9 1e       	adc	r15, r25
    31e2:	0a 1f       	adc	r16, r26
    31e4:	1b 1f       	adc	r17, r27
        }
        if (timeconstant.w[1] >= (F_CPU/100000UL)) timeconstant.dw = 0; // no transition found
    31e6:	00 35       	cpi	r16, 0x50	; 80
    31e8:	11 05       	cpc	r17, r1
    31ea:	18 f0       	brcs	.+6      	; 0x31f2 <ReadInductance+0x2bc>
    31ec:	ee 24       	eor	r14, r14
    31ee:	ff 24       	eor	r15, r15
    31f0:	87 01       	movw	r16, r14
        if (timeconstant.dw > 10) {
    31f2:	9b e0       	ldi	r25, 0x0B	; 11
    31f4:	e9 16       	cp	r14, r25
    31f6:	f1 04       	cpc	r15, r1
    31f8:	01 05       	cpc	r16, r1
    31fa:	11 05       	cpc	r17, r1
    31fc:	28 f0       	brcs	.+10     	; 0x3208 <ReadInductance+0x2d2>
           timeconstant.dw -= 1;
    31fe:	08 94       	sec
    3200:	e1 08       	sbc	r14, r1
    3202:	f1 08       	sbc	r15, r1
    3204:	01 09       	sbc	r16, r1
    3206:	11 09       	sbc	r17, r1
        }
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    3208:	c6 01       	movw	r24, r12
    320a:	a0 e0       	ldi	r26, 0x00	; 0
    320c:	b0 e0       	ldi	r27, 0x00	; 0
    320e:	8b 8b       	std	Y+19, r24	; 0x13
    3210:	9c 8b       	std	Y+20, r25	; 0x14
    3212:	ad 8b       	std	Y+21, r26	; 0x15
    3214:	be 8b       	std	Y+22, r27	; 0x16
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    3216:	b9 01       	movw	r22, r18
    3218:	80 e0       	ldi	r24, 0x00	; 0
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	28 ee       	ldi	r18, 0xE8	; 232
    321e:	33 e0       	ldi	r19, 0x03	; 3
    3220:	40 e0       	ldi	r20, 0x00	; 0
    3222:	50 e0       	ldi	r21, 0x00	; 0
    3224:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
    3228:	2b 01       	movw	r4, r22
    322a:	3c 01       	movw	r6, r24
        if (timeconstant.w[1] >= (F_CPU/100000UL)) timeconstant.dw = 0; // no transition found
        if (timeconstant.dw > 10) {
           timeconstant.dw -= 1;
        }
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    322c:	b5 01       	movw	r22, r10
    322e:	80 e0       	ldi	r24, 0x00	; 0
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	20 91 40 01 	lds	r18, 0x0140
    3236:	30 91 41 01 	lds	r19, 0x0141
    323a:	40 e0       	ldi	r20, 0x00	; 0
    323c:	50 e0       	ldi	r21, 0x00	; 0
    323e:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
    3242:	2b 89       	ldd	r18, Y+19	; 0x13
    3244:	3c 89       	ldd	r19, Y+20	; 0x14
    3246:	4d 89       	ldd	r20, Y+21	; 0x15
    3248:	5e 89       	ldd	r21, Y+22	; 0x16
    324a:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    324e:	40 e0       	ldi	r20, 0x00	; 0
    3250:	50 e0       	ldi	r21, 0x00	; 0
    3252:	c3 01       	movw	r24, r6
    3254:	b2 01       	movw	r22, r4
    3256:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
//        per_ref2 = (uint8_t)MEM2_read_byte(&LogTab[per_ref1]);	// -log(1 - per_ref1/100)
        per_ref2 = get_log(per_ref1);		// -log(1 - per_ref1/1000)
    325a:	c9 01       	movw	r24, r18
    325c:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <get_log>
    3260:	6c 01       	movw	r12, r24
          }
#endif
/* ********************************************************* */
        // lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    3262:	6b 89       	ldd	r22, Y+19	; 0x13
    3264:	7c 89       	ldd	r23, Y+20	; 0x14
    3266:	8d 89       	ldd	r24, Y+21	; 0x15
    3268:	9e 89       	ldd	r25, Y+22	; 0x16
    326a:	a8 01       	movw	r20, r16
    326c:	97 01       	movw	r18, r14
    326e:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
    3272:	2b 01       	movw	r4, r22
    3274:	3c 01       	movw	r6, r24
             wait_about2s();
          }
#endif
/* ********************************************************* */
        // lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
    3276:	b6 01       	movw	r22, r12
    3278:	80 e0       	ldi	r24, 0x00	; 0
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	e3 e0       	ldi	r30, 0x03	; 3
    327e:	66 0f       	add	r22, r22
    3280:	77 1f       	adc	r23, r23
    3282:	88 1f       	adc	r24, r24
    3284:	99 1f       	adc	r25, r25
    3286:	ea 95       	dec	r30
    3288:	d1 f7       	brne	.-12     	; 0x327e <ReadInductance+0x348>
    328a:	6b 5f       	subi	r22, 0xFB	; 251
    328c:	7f 4f       	sbci	r23, 0xFF	; 255
    328e:	8f 4f       	sbci	r24, 0xFF	; 255
    3290:	9f 4f       	sbci	r25, 0xFF	; 255
    3292:	2a e0       	ldi	r18, 0x0A	; 10
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	40 e0       	ldi	r20, 0x00	; 0
    3298:	50 e0       	ldi	r21, 0x00	; 0
    329a:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    329e:	40 e0       	ldi	r20, 0x00	; 0
    32a0:	50 e0       	ldi	r21, 0x00	; 0
    32a2:	c3 01       	movw	r24, r6
    32a4:	b2 01       	movw	r22, r4
    32a6:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
    32aa:	f1 01       	movw	r30, r2
    32ac:	ee 0f       	add	r30, r30
    32ae:	ff 1f       	adc	r31, r31
    32b0:	ee 0f       	add	r30, r30
    32b2:	ff 1f       	adc	r31, r31
    32b4:	a1 e0       	ldi	r26, 0x01	; 1
    32b6:	b0 e0       	ldi	r27, 0x00	; 0
    32b8:	ac 0f       	add	r26, r28
    32ba:	bd 1f       	adc	r27, r29
    32bc:	ea 0f       	add	r30, r26
    32be:	fb 1f       	adc	r31, r27
    32c0:	20 83       	st	Z, r18
    32c2:	31 83       	std	Z+1, r19	; 0x01
    32c4:	42 83       	std	Z+2, r20	; 0x02
    32c6:	53 83       	std	Z+3, r21	; 0x03
        if (((count&0x01) == 0) && (timeconstant.dw > ((F_CPU/1000000UL)+3))) {
    32c8:	89 89       	ldd	r24, Y+17	; 0x11
    32ca:	9a 89       	ldd	r25, Y+18	; 0x12
    32cc:	00 97       	sbiw	r24, 0x00	; 0
    32ce:	99 f4       	brne	.+38     	; 0x32f6 <ReadInductance+0x3c0>
    32d0:	9c e0       	ldi	r25, 0x0C	; 12
    32d2:	e9 16       	cp	r14, r25
    32d4:	f1 04       	cpc	r15, r1
    32d6:	01 05       	cpc	r16, r1
    32d8:	11 05       	cpc	r17, r1
    32da:	68 f0       	brcs	.+26     	; 0x32f6 <ReadInductance+0x3c0>
           // transition is found, measurement with delayed counter start is not necessary
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
    32dc:	f1 01       	movw	r30, r2
    32de:	31 96       	adiw	r30, 0x01	; 1
    32e0:	ee 0f       	add	r30, r30
    32e2:	ff 1f       	adc	r31, r31
    32e4:	ee 0f       	add	r30, r30
    32e6:	ff 1f       	adc	r31, r31
    32e8:	ea 0f       	add	r30, r26
    32ea:	fb 1f       	adc	r31, r27
    32ec:	20 83       	st	Z, r18
    32ee:	31 83       	std	Z+1, r19	; 0x01
    32f0:	42 83       	std	Z+2, r20	; 0x02
    32f2:	53 83       	std	Z+3, r21	; 0x03
           count++;		// skip the delayed measurement
    32f4:	93 94       	inc	r9
        }
        wdt_reset();
    32f6:	a8 95       	wdr
//  for (found=0;found<ResistorsFound;found++) {
//     if (resis[found].rx > 21000) continue;
     if (resis[found].rx > 21000) return;

     // we can check for Inductance, if resistance is below 2100 Ohm
     for (count=0;count<4;count++) {
    32f8:	93 94       	inc	r9
    32fa:	a9 2d       	mov	r26, r9
    32fc:	a4 30       	cpi	r26, 0x04	; 4
    32fe:	08 f4       	brcc	.+2      	; 0x3302 <ReadInductance+0x3cc>
    3300:	50 ce       	rjmp	.-864    	; 0x2fa2 <ReadInductance+0x6c>
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
           count++;		// skip the delayed measurement
        }
        wdt_reset();
     }  //end for count
     ADC_PORT = TXD_VAL;		// switch ADC Port to GND
    3302:	88 e0       	ldi	r24, 0x08	; 8
    3304:	88 b9       	out	0x08, r24	; 8
     wait_about20ms();
    3306:	84 e0       	ldi	r24, 0x04	; 4
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>
        resis[found].lx = inductance[0];
     }
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];		// other polarity, delayed start
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
#else
     nr_pol1 = 0;
    330e:	61 e0       	ldi	r22, 0x01	; 1
    3310:	2d 81       	ldd	r18, Y+5	; 0x05
    3312:	3e 81       	ldd	r19, Y+6	; 0x06
    3314:	4f 81       	ldd	r20, Y+7	; 0x07
    3316:	58 85       	ldd	r21, Y+8	; 0x08
    3318:	89 81       	ldd	r24, Y+1	; 0x01
    331a:	9a 81       	ldd	r25, Y+2	; 0x02
    331c:	ab 81       	ldd	r26, Y+3	; 0x03
    331e:	bc 81       	ldd	r27, Y+4	; 0x04
    3320:	82 17       	cp	r24, r18
    3322:	93 07       	cpc	r25, r19
    3324:	a4 07       	cpc	r26, r20
    3326:	b5 07       	cpc	r27, r21
    3328:	08 f0       	brcs	.+2      	; 0x332c <ReadInductance+0x3f6>
    332a:	60 e0       	ldi	r22, 0x00	; 0
     if (inductance[1] > inductance[0]) { nr_pol1 = 1; } 
     nr_pol2 = 2;
     if (inductance[3] > inductance[2]) { nr_pol2 = 3; } 
    332c:	2d 85       	ldd	r18, Y+13	; 0x0d
    332e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3330:	4f 85       	ldd	r20, Y+15	; 0x0f
    3332:	58 89       	ldd	r21, Y+16	; 0x10
    3334:	89 85       	ldd	r24, Y+9	; 0x09
    3336:	9a 85       	ldd	r25, Y+10	; 0x0a
    3338:	ab 85       	ldd	r26, Y+11	; 0x0b
    333a:	bc 85       	ldd	r27, Y+12	; 0x0c
    333c:	82 17       	cp	r24, r18
    333e:	93 07       	cpc	r25, r19
    3340:	a4 07       	cpc	r26, r20
    3342:	b5 07       	cpc	r27, r21
    3344:	10 f0       	brcs	.+4      	; 0x334a <ReadInductance+0x414>
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];		// other polarity, delayed start
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
#else
     nr_pol1 = 0;
     if (inductance[1] > inductance[0]) { nr_pol1 = 1; } 
     nr_pol2 = 2;
    3346:	72 e0       	ldi	r23, 0x02	; 2
    3348:	01 c0       	rjmp	.+2      	; 0x334c <ReadInductance+0x416>
     if (inductance[3] > inductance[2]) { nr_pol2 = 3; } 
    334a:	73 e0       	ldi	r23, 0x03	; 3
     if (inductance[nr_pol2] < inductance[nr_pol1]) nr_pol1 = nr_pol2;
    334c:	a7 2f       	mov	r26, r23
    334e:	b0 e0       	ldi	r27, 0x00	; 0
    3350:	aa 0f       	add	r26, r26
    3352:	bb 1f       	adc	r27, r27
    3354:	aa 0f       	add	r26, r26
    3356:	bb 1f       	adc	r27, r27
    3358:	ce 01       	movw	r24, r28
    335a:	01 96       	adiw	r24, 0x01	; 1
    335c:	a8 0f       	add	r26, r24
    335e:	b9 1f       	adc	r27, r25
    3360:	e6 2f       	mov	r30, r22
    3362:	f0 e0       	ldi	r31, 0x00	; 0
    3364:	ee 0f       	add	r30, r30
    3366:	ff 1f       	adc	r31, r31
    3368:	ee 0f       	add	r30, r30
    336a:	ff 1f       	adc	r31, r31
    336c:	e8 0f       	add	r30, r24
    336e:	f9 1f       	adc	r31, r25
    3370:	2d 91       	ld	r18, X+
    3372:	3d 91       	ld	r19, X+
    3374:	4d 91       	ld	r20, X+
    3376:	5c 91       	ld	r21, X
    3378:	80 81       	ld	r24, Z
    337a:	91 81       	ldd	r25, Z+1	; 0x01
    337c:	a2 81       	ldd	r26, Z+2	; 0x02
    337e:	b3 81       	ldd	r27, Z+3	; 0x03
    3380:	28 17       	cp	r18, r24
    3382:	39 07       	cpc	r19, r25
    3384:	4a 07       	cpc	r20, r26
    3386:	5b 07       	cpc	r21, r27
    3388:	08 f4       	brcc	.+2      	; 0x338c <ReadInductance+0x456>
    338a:	67 2f       	mov	r22, r23
     resis[found].lx = inductance[nr_pol1];
    338c:	26 2f       	mov	r18, r22
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	f9 01       	movw	r30, r18
    3392:	ee 0f       	add	r30, r30
    3394:	ff 1f       	adc	r31, r31
    3396:	ee 0f       	add	r30, r30
    3398:	ff 1f       	adc	r31, r31
    339a:	ec 0f       	add	r30, r28
    339c:	fd 1f       	adc	r31, r29
    339e:	61 81       	ldd	r22, Z+1	; 0x01
    33a0:	72 81       	ldd	r23, Z+2	; 0x02
    33a2:	83 81       	ldd	r24, Z+3	; 0x03
    33a4:	94 81       	ldd	r25, Z+4	; 0x04
    33a6:	60 93 1c 01 	sts	0x011C, r22
    33aa:	70 93 1d 01 	sts	0x011D, r23
    33ae:	80 93 1e 01 	sts	0x011E, r24
    33b2:	90 93 1f 01 	sts	0x011F, r25
     resis[found].lpre = -5;	// 10 uH units
    33b6:	4b ef       	ldi	r20, 0xFB	; 251
    33b8:	40 93 20 01 	sts	0x0120, r20
     if (((nr_pol1 & 1) == 1) || (resis[found].rx >= 240)) {
    33bc:	20 fd       	sbrc	r18, 0
    33be:	0d c0       	rjmp	.+26     	; 0x33da <ReadInductance+0x4a4>
    33c0:	20 91 18 01 	lds	r18, 0x0118
    33c4:	30 91 19 01 	lds	r19, 0x0119
    33c8:	40 91 1a 01 	lds	r20, 0x011A
    33cc:	50 91 1b 01 	lds	r21, 0x011B
    33d0:	20 3f       	cpi	r18, 0xF0	; 240
    33d2:	31 05       	cpc	r19, r1
    33d4:	41 05       	cpc	r20, r1
    33d6:	51 05       	cpc	r21, r1
    33d8:	a8 f0       	brcs	.+42     	; 0x3404 <ReadInductance+0x4ce>
        // with 680 Ohm resistor total_r is more than 7460
        resis[found].lpre = -4;	// 100 uH units
    33da:	2c ef       	ldi	r18, 0xFC	; 252
    33dc:	20 93 20 01 	sts	0x0120, r18
        resis[found].lx = (resis[found].lx + 5) / 10;
    33e0:	6b 5f       	subi	r22, 0xFB	; 251
    33e2:	7f 4f       	sbci	r23, 0xFF	; 255
    33e4:	8f 4f       	sbci	r24, 0xFF	; 255
    33e6:	9f 4f       	sbci	r25, 0xFF	; 255
    33e8:	2a e0       	ldi	r18, 0x0A	; 10
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	40 e0       	ldi	r20, 0x00	; 0
    33ee:	50 e0       	ldi	r21, 0x00	; 0
    33f0:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
    33f4:	20 93 1c 01 	sts	0x011C, r18
    33f8:	30 93 1d 01 	sts	0x011D, r19
    33fc:	40 93 1e 01 	sts	0x011E, r20
    3400:	50 93 1f 01 	sts	0x011F, r21
     } 
#endif
//  } // end loop for all resistors

  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    3404:	88 e0       	ldi	r24, 0x08	; 8
    3406:	87 b9       	out	0x07, r24	; 7
  R_DDR = 0;			// switch all resistor ports to input
    3408:	14 b8       	out	0x04, r1	; 4
#endif
  return;
 } // end ReadInductance()
    340a:	68 96       	adiw	r28, 0x18	; 24
    340c:	0f b6       	in	r0, 0x3f	; 63
    340e:	f8 94       	cli
    3410:	de bf       	out	0x3e, r29	; 62
    3412:	0f be       	out	0x3f, r0	; 63
    3414:	cd bf       	out	0x3d, r28	; 61
    3416:	cf 91       	pop	r28
    3418:	df 91       	pop	r29
    341a:	1f 91       	pop	r17
    341c:	0f 91       	pop	r16
    341e:	ff 90       	pop	r15
    3420:	ef 90       	pop	r14
    3422:	df 90       	pop	r13
    3424:	cf 90       	pop	r12
    3426:	bf 90       	pop	r11
    3428:	af 90       	pop	r10
    342a:	9f 90       	pop	r9
    342c:	8f 90       	pop	r8
    342e:	7f 90       	pop	r7
    3430:	6f 90       	pop	r6
    3432:	5f 90       	pop	r5
    3434:	4f 90       	pop	r4
    3436:	3f 90       	pop	r3
    3438:	2f 90       	pop	r2
    343a:	08 95       	ret

0000343c <ReadADC>:
  uint16_t U_AVCC;		// Voltage of AVCC
} ADCconfig;
*/


unsigned int ReadADC (uint8_t Probe) {
    343c:	df 92       	push	r13
    343e:	ef 92       	push	r14
    3440:	ff 92       	push	r15
    3442:	0f 93       	push	r16
    3444:	1f 93       	push	r17
 unsigned int U; /* return value (mV) */
 uint8_t Samples; /* loop counter */
 unsigned long Value; /* ADC value */
 Probe |= (1 << REFS0); /* use internal reference anyway */
    3446:	18 2f       	mov	r17, r24
    3448:	10 64       	ori	r17, 0x40	; 64
#ifdef INHIBIT_SLEEP_MODE
// one dummy read of ADC, 112us
    ADCSRA |= (1 << ADSC); /* start conversion */
    while (ADCSRA & (1 << ADSC)); /* wait until conversion is done */
#else
    ADCSRA = (1<<ADEN) | (1<<ADIF) | (1<<ADIE) | AUTO_CLOCK_DIV; //enable ADC and Interrupt
    344a:	0e e9       	ldi	r16, 0x9E	; 158
 unsigned long Value; /* ADC value */
 Probe |= (1 << REFS0); /* use internal reference anyway */
#ifdef AUTOSCALE_ADC
sample:
#endif
 ADMUX = Probe; /* set input channel and U reference */
    344c:	10 93 7c 00 	sts	0x007C, r17
#ifdef AUTOSCALE_ADC
 /* if voltage reference changed run a dummy conversion */
// Samples = Probe & (1 << REFS1); /* get REFS1 bit flag */
// if (Samples != ADCconfig.RefFlag) {
 if ((Probe & (1 << REFS1)) != 0) {
    3450:	17 ff       	sbrs	r17, 7
    3452:	02 c0       	rjmp	.+4      	; 0x3458 <ReadADC+0x1c>
    // switch to 1.1V Reference
 #ifdef NO_AREF_CAP
    wait100us(); /* time for voltage stabilization */
    3454:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <wait100us>
#ifdef INHIBIT_SLEEP_MODE
// one dummy read of ADC, 112us
    ADCSRA |= (1 << ADSC); /* start conversion */
    while (ADCSRA & (1 << ADSC)); /* wait until conversion is done */
#else
    ADCSRA = (1<<ADEN) | (1<<ADIF) | (1<<ADIE) | AUTO_CLOCK_DIV; //enable ADC and Interrupt
    3458:	00 93 7a 00 	sts	0x007A, r16
    set_sleep_mode(SLEEP_MODE_ADC);
    345c:	83 b7       	in	r24, 0x33	; 51
    345e:	81 7f       	andi	r24, 0xF1	; 241
    3460:	82 60       	ori	r24, 0x02	; 2
    3462:	83 bf       	out	0x33, r24	; 51
    sleep_mode();	/* Start ADC, return, if ADC has finished */
    3464:	83 b7       	in	r24, 0x33	; 51
    3466:	81 60       	ori	r24, 0x01	; 1
    3468:	83 bf       	out	0x33, r24	; 51
    346a:	88 95       	sleep
    346c:	83 b7       	in	r24, 0x33	; 51
    346e:	8e 7f       	andi	r24, 0xFE	; 254
    3470:	83 bf       	out	0x33, r24	; 51
#endif
 /* * sample ADC readings */
 Value = 0UL; /* reset sampling variable */
    3472:	20 e0       	ldi	r18, 0x00	; 0
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	a9 01       	movw	r20, r18
 Samples = 0; /* number of samples to take */
    3478:	e0 e0       	ldi	r30, 0x00	; 0
 while (Samples < ADCconfig.Samples) /* take samples */ {
    347a:	2a c0       	rjmp	.+84     	; 0x34d0 <ReadADC+0x94>
#ifdef INHIBIT_SLEEP_MODE
    ADCSRA |= (1 << ADSC); /* start conversion */
    while (ADCSRA & (1 << ADSC)); /* wait until conversion is done */
#else
    ADCSRA = (1<<ADEN) | (1<<ADIF) | (1<<ADIE) | AUTO_CLOCK_DIV; //enable ADC and Interrupt
    347c:	00 93 7a 00 	sts	0x007A, r16
    set_sleep_mode(SLEEP_MODE_ADC);
    3480:	83 b7       	in	r24, 0x33	; 51
    3482:	81 7f       	andi	r24, 0xF1	; 241
    3484:	82 60       	ori	r24, 0x02	; 2
    3486:	83 bf       	out	0x33, r24	; 51
    sleep_mode();	/* Start ADC, return, if ADC has finished */
    3488:	83 b7       	in	r24, 0x33	; 51
    348a:	81 60       	ori	r24, 0x01	; 1
    348c:	83 bf       	out	0x33, r24	; 51
    348e:	88 95       	sleep
    3490:	83 b7       	in	r24, 0x33	; 51
    3492:	8e 7f       	andi	r24, 0xFE	; 254
    3494:	83 bf       	out	0x33, r24	; 51
#endif
    Value += ADCW; /* add ADC reading */
    3496:	60 91 78 00 	lds	r22, 0x0078
    349a:	70 91 79 00 	lds	r23, 0x0079
    349e:	80 e0       	ldi	r24, 0x00	; 0
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	26 0f       	add	r18, r22
    34a4:	37 1f       	adc	r19, r23
    34a6:	48 1f       	adc	r20, r24
    34a8:	59 1f       	adc	r21, r25
#ifdef AUTOSCALE_ADC
    /* auto-switch voltage reference for low readings */
    if ((Samples == 4) && (ADCconfig.U_Bandgap > 255) && ((uint16_t)Value < 1024) && !(Probe & (1 << REFS1))) {
    34aa:	e4 30       	cpi	r30, 0x04	; 4
    34ac:	81 f4       	brne	.+32     	; 0x34ce <ReadADC+0x92>
    34ae:	60 91 3e 01 	lds	r22, 0x013E
    34b2:	70 91 3f 01 	lds	r23, 0x013F
    34b6:	6f 3f       	cpi	r22, 0xFF	; 255
    34b8:	71 05       	cpc	r23, r1
    34ba:	49 f0       	breq	.+18     	; 0x34ce <ReadADC+0x92>
    34bc:	40 f0       	brcs	.+16     	; 0x34ce <ReadADC+0x92>
    34be:	84 e0       	ldi	r24, 0x04	; 4
    34c0:	20 30       	cpi	r18, 0x00	; 0
    34c2:	38 07       	cpc	r19, r24
    34c4:	20 f4       	brcc	.+8      	; 0x34ce <ReadADC+0x92>
    34c6:	17 fd       	sbrc	r17, 7
    34c8:	02 c0       	rjmp	.+4      	; 0x34ce <ReadADC+0x92>
       Probe |= (1 << REFS1); /* select internal bandgap reference */
    34ca:	10 68       	ori	r17, 0x80	; 128
 #if PROCESSOR_TYP == 1280
       Probe &= ~(1 << REFS0);	/* ATmega640/1280/2560 1.1V Reference with REFS0=0 */
 #endif
       goto sample; /* re-run sampling */
    34cc:	bf cf       	rjmp	.-130    	; 0x344c <ReadADC+0x10>
    }
#endif
    Samples++; /* one more done */
    34ce:	ef 5f       	subi	r30, 0xFF	; 255
    sleep_mode();	/* Start ADC, return, if ADC has finished */
#endif
 /* * sample ADC readings */
 Value = 0UL; /* reset sampling variable */
 Samples = 0; /* number of samples to take */
 while (Samples < ADCconfig.Samples) /* take samples */ {
    34d0:	d0 90 3c 01 	lds	r13, 0x013C
    34d4:	ed 15       	cp	r30, r13
    34d6:	90 f2       	brcs	.-92     	; 0x347c <ReadADC+0x40>
    Samples++; /* one more done */
 }
#ifdef AUTOSCALE_ADC
 /* * convert ADC reading to voltage * - single sample: U = ADC reading * U_ref / 1024 */
 /* get voltage of reference used */
 if (Probe & (1 << REFS1)) U = ADCconfig.U_Bandgap; /* bandgap reference */
    34d8:	17 ff       	sbrs	r17, 7
    34da:	05 c0       	rjmp	.+10     	; 0x34e6 <ReadADC+0xaa>
    34dc:	60 91 3e 01 	lds	r22, 0x013E
    34e0:	70 91 3f 01 	lds	r23, 0x013F
    34e4:	04 c0       	rjmp	.+8      	; 0x34ee <ReadADC+0xb2>
 else U = ADCconfig.U_AVCC; /* Vcc reference */
    34e6:	60 91 40 01 	lds	r22, 0x0140
    34ea:	70 91 41 01 	lds	r23, 0x0141
#else
 U = ADCconfig.U_AVCC; /* Vcc reference */
#endif
 /* convert to voltage; */
 Value *= U; /* ADC readings * U_ref */
    34ee:	80 e0       	ldi	r24, 0x00	; 0
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
 Value /= 1023; /* / 1024 for 10bit ADC */
    34f6:	2f ef       	ldi	r18, 0xFF	; 255
    34f8:	33 e0       	ldi	r19, 0x03	; 3
    34fa:	40 e0       	ldi	r20, 0x00	; 0
    34fc:	50 e0       	ldi	r21, 0x00	; 0
    34fe:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
    3502:	79 01       	movw	r14, r18
    3504:	8a 01       	movw	r16, r20
 /* de-sample to get average voltage */
 Value /= ADCconfig.Samples;
    3506:	2d 2d       	mov	r18, r13
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	40 e0       	ldi	r20, 0x00	; 0
    350c:	50 e0       	ldi	r21, 0x00	; 0
    350e:	c8 01       	movw	r24, r16
    3510:	b7 01       	movw	r22, r14
    3512:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
 U = (unsigned int)Value;
 return U;
//   return ((unsigned int)(Value / (1023 * (unsigned long)ADCconfig.Samples)));
}
    3516:	c9 01       	movw	r24, r18
    3518:	1f 91       	pop	r17
    351a:	0f 91       	pop	r16
    351c:	ff 90       	pop	r15
    351e:	ef 90       	pop	r14
    3520:	df 90       	pop	r13
    3522:	08 95       	ret

00003524 <W5msReadADC>:
unsigned int W5msReadADC (uint8_t Probe) {
    3524:	1f 93       	push	r17
    3526:	18 2f       	mov	r17, r24
  wait_about5ms();
    3528:	81 e0       	ldi	r24, 0x01	; 1
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>
  return (ReadADC(Probe));
    3530:	81 2f       	mov	r24, r17
    3532:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
}
    3536:	1f 91       	pop	r17
    3538:	08 95       	ret

0000353a <W10msReadADC>:
unsigned int W10msReadADC (uint8_t Probe) {
    353a:	1f 93       	push	r17
    353c:	18 2f       	mov	r17, r24
  wait_about10ms();
    353e:	82 e0       	ldi	r24, 0x02	; 2
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>
  return (ReadADC(Probe));
    3546:	81 2f       	mov	r24, r17
    3548:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
}
    354c:	1f 91       	pop	r17
    354e:	08 95       	ret

00003550 <W20msReadADC>:
unsigned int W20msReadADC (uint8_t Probe) {
    3550:	1f 93       	push	r17
    3552:	18 2f       	mov	r17, r24
  wait_about20ms();
    3554:	84 e0       	ldi	r24, 0x04	; 4
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	0e 94 7d 03 	call	0x6fa	; 0x6fa <sleep_5ms>
  return (ReadADC(Probe));
    355c:	81 2f       	mov	r24, r17
    355e:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
}
    3562:	1f 91       	pop	r17
    3564:	08 95       	ret

00003566 <GetESR>:
    3566:	2f 92       	push	r2
    3568:	3f 92       	push	r3
    356a:	4f 92       	push	r4
    356c:	5f 92       	push	r5
    356e:	6f 92       	push	r6
    3570:	7f 92       	push	r7
    3572:	8f 92       	push	r8
    3574:	9f 92       	push	r9
    3576:	af 92       	push	r10
    3578:	bf 92       	push	r11
    357a:	cf 92       	push	r12
    357c:	df 92       	push	r13
    357e:	ef 92       	push	r14
    3580:	ff 92       	push	r15
    3582:	0f 93       	push	r16
    3584:	1f 93       	push	r17
    3586:	df 93       	push	r29
    3588:	cf 93       	push	r28
    358a:	cd b7       	in	r28, 0x3d	; 61
    358c:	de b7       	in	r29, 0x3e	; 62
    358e:	6a 97       	sbiw	r28, 0x1a	; 26
    3590:	0f b6       	in	r0, 0x3f	; 63
    3592:	f8 94       	cli
    3594:	de bf       	out	0x3e, r29	; 62
    3596:	0f be       	out	0x3f, r0	; 63
    3598:	cd bf       	out	0x3d, r28	; 61
    359a:	20 91 66 01 	lds	r18, 0x0166
    359e:	30 91 67 01 	lds	r19, 0x0167
    35a2:	40 91 68 01 	lds	r20, 0x0168
    35a6:	50 91 69 01 	lds	r21, 0x0169
    35aa:	10 91 75 01 	lds	r17, 0x0175
    35ae:	09 c0       	rjmp	.+18     	; 0x35c2 <ad_35ba>

000035b0 <ad_35ac>:
    35b0:	ca 01       	movw	r24, r20
    35b2:	b9 01       	movw	r22, r18
    35b4:	2a e0       	ldi	r18, 0x0A	; 10
    35b6:	31 2d       	mov	r19, r1
    35b8:	41 2d       	mov	r20, r1
    35ba:	51 2d       	mov	r21, r1
    35bc:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
    35c0:	1f 5f       	subi	r17, 0xFF	; 255

000035c2 <ad_35ba>:
    35c2:	17 3f       	cpi	r17, 0xF7	; 247
    35c4:	ac f3       	brlt	.-22     	; 0x35b0 <ad_35ac>
    35c6:	2c 8b       	std	Y+20, r18	; 0x14
    35c8:	3d 8b       	std	Y+21, r19	; 0x15
    35ca:	4e 8b       	std	Y+22, r20	; 0x16
    35cc:	5f 8b       	std	Y+23, r21	; 0x17
    35ce:	22 3c       	cpi	r18, 0xC2	; 194
    35d0:	61 e0       	ldi	r22, 0x01	; 1
    35d2:	36 07       	cpc	r19, r22
    35d4:	41 05       	cpc	r20, r1
    35d6:	51 05       	cpc	r21, r1
    35d8:	08 f4       	brcc	.+2      	; 0x35dc <ad_35e4>
    35da:	e4 c1       	rjmp	.+968    	; 0x39a4 <ad_exit>

000035dc <ad_35e4>:
    35dc:	21 31       	cpi	r18, 0x11	; 17
    35de:	7e e0       	ldi	r23, 0x0E	; 14
    35e0:	37 07       	cpc	r19, r23
    35e2:	41 05       	cpc	r20, r1
    35e4:	51 05       	cpc	r21, r1
    35e6:	68 f0       	brcs	.+26     	; 0x3602 <ad_35fe>
    35e8:	81 e0       	ldi	r24, 0x01	; 1
    35ea:	89 83       	std	Y+1, r24	; 0x01
    35ec:	20 35       	cpi	r18, 0x50	; 80
    35ee:	73 ec       	ldi	r23, 0xC3	; 195
    35f0:	37 07       	cpc	r19, r23
    35f2:	41 05       	cpc	r20, r1
    35f4:	51 05       	cpc	r21, r1
    35f6:	10 f0       	brcs	.+4      	; 0x35fc <not_very_big>
    35f8:	82 e0       	ldi	r24, 0x02	; 2
    35fa:	89 83       	std	Y+1, r24	; 0x01

000035fc <not_very_big>:
    35fc:	26 ed       	ldi	r18, 0xD6	; 214
    35fe:	a2 2e       	mov	r10, r18
    3600:	03 c0       	rjmp	.+6      	; 0x3608 <ad_3604>

00003602 <ad_35fe>:
    3602:	94 ed       	ldi	r25, 0xD4	; 212
    3604:	a9 2e       	mov	r10, r25
    3606:	19 82       	std	Y+1, r1	; 0x01

00003608 <ad_3604>:
    3608:	84 e3       	ldi	r24, 0x34	; 52
    360a:	91 e0       	ldi	r25, 0x01	; 1
    360c:	0e 94 44 01 	call	0x288	; 0x288 <lcd_fix_string>
    3610:	e0 90 72 01 	lds	r14, 0x0172
    3614:	6e 2c       	mov	r6, r14
    3616:	e5 ee       	ldi	r30, 0xE5	; 229
    3618:	f0 e0       	ldi	r31, 0x00	; 0
    361a:	ee 0d       	add	r30, r14
    361c:	f1 1d       	adc	r31, r1
    361e:	85 91       	lpm	r24, Z+
    3620:	88 60       	ori	r24, 0x08	; 8
    3622:	8e 87       	std	Y+14, r24	; 0x0e
    3624:	f0 90 73 01 	lds	r15, 0x0173
    3628:	bf 2c       	mov	r11, r15
    362a:	e5 ee       	ldi	r30, 0xE5	; 229
    362c:	f0 e0       	ldi	r31, 0x00	; 0
    362e:	ef 0d       	add	r30, r15
    3630:	f1 1d       	adc	r31, r1
    3632:	85 91       	lpm	r24, Z+
    3634:	88 60       	ori	r24, 0x08	; 8
    3636:	8f 87       	std	Y+15, r24	; 0x0f
    3638:	e2 ee       	ldi	r30, 0xE2	; 226
    363a:	f0 e0       	ldi	r31, 0x00	; 0
    363c:	ee 0d       	add	r30, r14
    363e:	f1 1d       	adc	r31, r1
    3640:	75 90       	lpm	r7, Z+
    3642:	e2 ee       	ldi	r30, 0xE2	; 226
    3644:	f0 e0       	ldi	r31, 0x00	; 0
    3646:	ef 0d       	add	r30, r15
    3648:	f1 1d       	adc	r31, r1
    364a:	c5 90       	lpm	r12, Z+
    364c:	90 ec       	ldi	r25, 0xC0	; 192
    364e:	69 2a       	or	r6, r25
    3650:	b9 2a       	or	r11, r25
    3652:	81 e0       	ldi	r24, 0x01	; 1
    3654:	e8 2e       	mov	r14, r24
    3656:	f1 2c       	mov	r15, r1
    3658:	01 2d       	mov	r16, r1
    365a:	11 2d       	mov	r17, r1
    365c:	8e 83       	std	Y+6, r24	; 0x06
    365e:	1f 82       	std	Y+7, r1	; 0x07
    3660:	18 86       	std	Y+8, r1	; 0x08
    3662:	19 86       	std	Y+9, r1	; 0x09
    3664:	1a 86       	std	Y+10, r1	; 0x0a
    3666:	1b 86       	std	Y+11, r1	; 0x0b
    3668:	1c 86       	std	Y+12, r1	; 0x0c
    366a:	1d 86       	std	Y+13, r1	; 0x0d
    366c:	0e 94 9c 01 	call	0x338	; 0x338 <EntladePins>
    3670:	88 e0       	ldi	r24, 0x08	; 8
    3672:	88 b9       	out	0x08, r24	; 8
    3674:	60 92 7c 00 	sts	0x007C, r6
    3678:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <wait100us>
    367c:	dd 24       	eor	r13, r13
    367e:	b4 ed       	ldi	r27, 0xD4	; 212
    3680:	9b 2e       	mov	r9, r27
    3682:	a6 ed       	ldi	r26, 0xD6	; 214
    3684:	8a 2e       	mov	r8, r26

00003686 <ad_3692>:
    3686:	3e 85       	ldd	r19, Y+14	; 0x0e
    3688:	37 b9       	out	0x07, r19	; 7
    368a:	60 92 7c 00 	sts	0x007C, r6
    368e:	a0 92 7a 00 	sts	0x007A, r10
    3692:	80 91 7a 00 	lds	r24, 0x007A
    3696:	86 fd       	sbrc	r24, 6
    3698:	fc cf       	rjmp	.-8      	; 0x3692 <ad_3692+0xc>

0000369a <while_lop1>:
    369a:	a8 95       	wdr
    369c:	60 92 7c 00 	sts	0x007C, r6
    36a0:	c5 b8       	out	0x05, r12	; 5
    36a2:	c4 b8       	out	0x04, r12	; 4
    36a4:	a0 92 7a 00 	sts	0x007A, r10
    36a8:	80 91 7a 00 	lds	r24, 0x007A
    36ac:	86 fd       	sbrc	r24, 6
    36ae:	fc cf       	rjmp	.-8      	; 0x36a8 <while_lop1+0xe>
    36b0:	a0 92 7a 00 	sts	0x007A, r10
    36b4:	80 91 7a 00 	lds	r24, 0x007A
    36b8:	86 fd       	sbrc	r24, 6
    36ba:	fc cf       	rjmp	.-8      	; 0x36b4 <while_lop1+0x1a>
    36bc:	20 90 78 00 	lds	r2, 0x0078
    36c0:	30 90 79 00 	lds	r3, 0x0079
    36c4:	b0 92 7c 00 	sts	0x007C, r11
    36c8:	49 81       	ldd	r20, Y+1	; 0x01
    36ca:	44 23       	and	r20, r20
    36cc:	59 f4       	brne	.+22     	; 0x36e4 <ad_big1>
    36ce:	a0 92 7a 00 	sts	0x007A, r10
    36d2:	80 91 7a 00 	lds	r24, 0x007A
    36d6:	86 fd       	sbrc	r24, 6
    36d8:	fc cf       	rjmp	.-8      	; 0x36d2 <while_lop1+0x38>
    36da:	90 92 7a 00 	sts	0x007A, r9
    36de:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <wait4us>
    36e2:	0e c0       	rjmp	.+28     	; 0x3700 <ad_swoff1>

000036e4 <ad_big1>:
    36e4:	a0 92 7a 00 	sts	0x007A, r10
    36e8:	80 91 7a 00 	lds	r24, 0x007A
    36ec:	86 fd       	sbrc	r24, 6
    36ee:	fc cf       	rjmp	.-8      	; 0x36e8 <ad_big1+0x4>
    36f0:	80 92 7a 00 	sts	0x007A, r8
    36f4:	0e 94 e7 13 	call	0x27ce	; 0x27ce <wait10us>
    36f8:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <wait5us>
    36fc:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <wait4us>

00003700 <ad_swoff1>:
    3700:	14 b8       	out	0x04, r1	; 4
    3702:	15 b8       	out	0x05, r1	; 5

00003704 <ad_370c>:
    3704:	80 91 7a 00 	lds	r24, 0x007A
    3708:	86 fd       	sbrc	r24, 6
    370a:	fc cf       	rjmp	.-8      	; 0x3704 <ad_370c>
    370c:	20 91 78 00 	lds	r18, 0x0078
    3710:	30 91 79 00 	lds	r19, 0x0079
    3714:	a0 92 7a 00 	sts	0x007A, r10
    3718:	80 91 7a 00 	lds	r24, 0x007A
    371c:	86 fd       	sbrc	r24, 6
    371e:	fc cf       	rjmp	.-8      	; 0x3718 <ad_370c+0x14>
    3720:	a0 92 7a 00 	sts	0x007A, r10
    3724:	80 91 7a 00 	lds	r24, 0x007A
    3728:	86 fd       	sbrc	r24, 6
    372a:	fc cf       	rjmp	.-8      	; 0x3724 <ad_370c+0x20>
    372c:	80 91 78 00 	lds	r24, 0x0078
    3730:	90 91 79 00 	lds	r25, 0x0079
    3734:	83 30       	cpi	r24, 0x03	; 3
    3736:	91 05       	cpc	r25, r1
    3738:	08 f4       	brcc	.+2      	; 0x373c <end_while1>
    373a:	af cf       	rjmp	.-162    	; 0x369a <while_lop1>

0000373c <end_while1>:
    373c:	28 8b       	std	Y+16, r18	; 0x10
    373e:	39 8b       	std	Y+17, r19	; 0x11
    3740:	8a 8b       	std	Y+18, r24	; 0x12
    3742:	9b 8b       	std	Y+19, r25	; 0x13
    3744:	3f 85       	ldd	r19, Y+15	; 0x0f
    3746:	37 b9       	out	0x07, r19	; 7
    3748:	a0 92 7a 00 	sts	0x007A, r10
    374c:	80 91 7a 00 	lds	r24, 0x007A
    3750:	86 fd       	sbrc	r24, 6
    3752:	fc cf       	rjmp	.-8      	; 0x374c <end_while1+0x10>

00003754 <while_lop2>:
    3754:	a8 95       	wdr
    3756:	b0 92 7c 00 	sts	0x007C, r11
    375a:	75 b8       	out	0x05, r7	; 5
    375c:	74 b8       	out	0x04, r7	; 4
    375e:	a0 92 7a 00 	sts	0x007A, r10
    3762:	80 91 7a 00 	lds	r24, 0x007A
    3766:	86 fd       	sbrc	r24, 6
    3768:	fc cf       	rjmp	.-8      	; 0x3762 <while_lop2+0xe>
    376a:	a0 92 7a 00 	sts	0x007A, r10
    376e:	80 91 7a 00 	lds	r24, 0x007A
    3772:	86 fd       	sbrc	r24, 6
    3774:	fc cf       	rjmp	.-8      	; 0x376e <while_lop2+0x1a>
    3776:	60 91 78 00 	lds	r22, 0x0078
    377a:	70 91 79 00 	lds	r23, 0x0079
    377e:	60 92 7c 00 	sts	0x007C, r6
    3782:	49 81       	ldd	r20, Y+1	; 0x01
    3784:	44 23       	and	r20, r20
    3786:	59 f4       	brne	.+22     	; 0x379e <ad_big2>
    3788:	a0 92 7a 00 	sts	0x007A, r10
    378c:	80 91 7a 00 	lds	r24, 0x007A
    3790:	86 fd       	sbrc	r24, 6
    3792:	fc cf       	rjmp	.-8      	; 0x378c <while_lop2+0x38>
    3794:	90 92 7a 00 	sts	0x007A, r9
    3798:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <wait4us>
    379c:	0e c0       	rjmp	.+28     	; 0x37ba <ad_swoff2>

0000379e <ad_big2>:
    379e:	a0 92 7a 00 	sts	0x007A, r10
    37a2:	80 91 7a 00 	lds	r24, 0x007A
    37a6:	86 fd       	sbrc	r24, 6
    37a8:	fc cf       	rjmp	.-8      	; 0x37a2 <ad_big2+0x4>
    37aa:	80 92 7a 00 	sts	0x007A, r8
    37ae:	0e 94 e7 13 	call	0x27ce	; 0x27ce <wait10us>
    37b2:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <wait5us>
    37b6:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <wait4us>

000037ba <ad_swoff2>:
    37ba:	14 b8       	out	0x04, r1	; 4
    37bc:	15 b8       	out	0x05, r1	; 5

000037be <ad_37f4>:
    37be:	80 91 7a 00 	lds	r24, 0x007A
    37c2:	86 fd       	sbrc	r24, 6
    37c4:	fc cf       	rjmp	.-8      	; 0x37be <ad_37f4>
    37c6:	40 91 78 00 	lds	r20, 0x0078
    37ca:	50 91 79 00 	lds	r21, 0x0079
    37ce:	a0 92 7a 00 	sts	0x007A, r10
    37d2:	80 91 7a 00 	lds	r24, 0x007A
    37d6:	86 fd       	sbrc	r24, 6
    37d8:	fc cf       	rjmp	.-8      	; 0x37d2 <ad_37f4+0x14>
    37da:	a0 92 7a 00 	sts	0x007A, r10
    37de:	80 91 7a 00 	lds	r24, 0x007A
    37e2:	86 fd       	sbrc	r24, 6
    37e4:	fc cf       	rjmp	.-8      	; 0x37de <ad_37f4+0x20>
    37e6:	20 91 78 00 	lds	r18, 0x0078
    37ea:	30 91 79 00 	lds	r19, 0x0079
    37ee:	23 30       	cpi	r18, 0x03	; 3
    37f0:	31 05       	cpc	r19, r1
    37f2:	08 f4       	brcc	.+2      	; 0x37f6 <end_while2>
    37f4:	af cf       	rjmp	.-162    	; 0x3754 <while_lop2>

000037f6 <end_while2>:
    37f6:	14 b8       	out	0x04, r1	; 4
    37f8:	cb 01       	movw	r24, r22
    37fa:	82 0d       	add	r24, r2
    37fc:	93 1d       	adc	r25, r3
    37fe:	e8 0e       	add	r14, r24
    3800:	f9 1e       	adc	r15, r25
    3802:	01 1d       	adc	r16, r1
    3804:	11 1d       	adc	r17, r1
    3806:	ea 82       	std	Y+2, r14	; 0x02
    3808:	fb 82       	std	Y+3, r15	; 0x03
    380a:	0c 83       	std	Y+4, r16	; 0x04
    380c:	1d 83       	std	Y+5, r17	; 0x05
    380e:	88 89       	ldd	r24, Y+16	; 0x10
    3810:	99 89       	ldd	r25, Y+17	; 0x11
    3812:	84 0f       	add	r24, r20
    3814:	95 1f       	adc	r25, r21
    3816:	4e 81       	ldd	r20, Y+6	; 0x06
    3818:	5f 81       	ldd	r21, Y+7	; 0x07
    381a:	68 85       	ldd	r22, Y+8	; 0x08
    381c:	79 85       	ldd	r23, Y+9	; 0x09
    381e:	48 0f       	add	r20, r24
    3820:	59 1f       	adc	r21, r25
    3822:	61 1d       	adc	r22, r1
    3824:	71 1d       	adc	r23, r1
    3826:	4e 83       	std	Y+6, r20	; 0x06
    3828:	5f 83       	std	Y+7, r21	; 0x07
    382a:	68 87       	std	Y+8, r22	; 0x08
    382c:	79 87       	std	Y+9, r23	; 0x09
    382e:	8a 89       	ldd	r24, Y+18	; 0x12
    3830:	9b 89       	ldd	r25, Y+19	; 0x13
    3832:	82 0f       	add	r24, r18
    3834:	93 1f       	adc	r25, r19
    3836:	4a 85       	ldd	r20, Y+10	; 0x0a
    3838:	5b 85       	ldd	r21, Y+11	; 0x0b
    383a:	6c 85       	ldd	r22, Y+12	; 0x0c
    383c:	7d 85       	ldd	r23, Y+13	; 0x0d
    383e:	48 0f       	add	r20, r24
    3840:	59 1f       	adc	r21, r25
    3842:	61 1d       	adc	r22, r1
    3844:	71 1d       	adc	r23, r1
    3846:	4a 87       	std	Y+10, r20	; 0x0a
    3848:	5b 87       	std	Y+11, r21	; 0x0b
    384a:	6c 87       	std	Y+12, r22	; 0x0c
    384c:	7d 87       	std	Y+13, r23	; 0x0d
    384e:	d3 94       	inc	r13
    3850:	5d 2d       	mov	r21, r13
    3852:	50 38       	cpi	r21, 0x80	; 128
    3854:	09 f0       	breq	.+2      	; 0x3858 <ad_38ac>
    3856:	17 cf       	rjmp	.-466    	; 0x3686 <ad_3692>

00003858 <ad_38ac>:
    3858:	ac 88       	ldd	r10, Y+20	; 0x14
    385a:	bd 88       	ldd	r11, Y+21	; 0x15
    385c:	ce 88       	ldd	r12, Y+22	; 0x16
    385e:	df 88       	ldd	r13, Y+23	; 0x17
    3860:	69 81       	ldd	r22, Y+1	; 0x01
    3862:	66 23       	and	r22, r22
    3864:	19 f0       	breq	.+6      	; 0x386c <is_small>
    3866:	26 e3       	ldi	r18, 0x36	; 54
    3868:	31 e0       	ldi	r19, 0x01	; 1
    386a:	02 c0       	rjmp	.+4      	; 0x3870 <ad_38dc>

0000386c <is_small>:
    386c:	29 e6       	ldi	r18, 0x69	; 105
    386e:	30 e0       	ldi	r19, 0x00	; 0

00003870 <ad_38dc>:
    3870:	40 e0       	ldi	r20, 0x00	; 0
    3872:	50 e0       	ldi	r21, 0x00	; 0
    3874:	6a 81       	ldd	r22, Y+2	; 0x02
    3876:	7b 81       	ldd	r23, Y+3	; 0x03
    3878:	8c 81       	ldd	r24, Y+4	; 0x04
    387a:	9d 81       	ldd	r25, Y+5	; 0x05
    387c:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
    3880:	95 01       	movw	r18, r10
    3882:	a6 01       	movw	r20, r12
    3884:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
    3888:	aa 80       	ldd	r10, Y+2	; 0x02
    388a:	bb 80       	ldd	r11, Y+3	; 0x03
    388c:	cc 80       	ldd	r12, Y+4	; 0x04
    388e:	dd 80       	ldd	r13, Y+5	; 0x05
    3890:	a2 1a       	sub	r10, r18
    3892:	b3 0a       	sbc	r11, r19
    3894:	c4 0a       	sbc	r12, r20
    3896:	d5 0a       	sbc	r13, r21
    3898:	86 ef       	ldi	r24, 0xF6	; 246
    389a:	91 e0       	ldi	r25, 0x01	; 1
    389c:	0e 94 57 1f 	call	0x3eae	; 0x3eae <__eerd_byte_m168>
    38a0:	28 2e       	mov	r2, r24
    38a2:	68 2f       	mov	r22, r24
    38a4:	77 27       	eor	r23, r23
    38a6:	67 fd       	sbrc	r22, 7
    38a8:	70 95       	com	r23
    38aa:	87 2f       	mov	r24, r23
    38ac:	97 2f       	mov	r25, r23
    38ae:	95 01       	movw	r18, r10
    38b0:	a6 01       	movw	r20, r12
    38b2:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
    38b6:	40 90 47 01 	lds	r4, 0x0147
    38ba:	50 90 48 01 	lds	r5, 0x0148
    38be:	44 0c       	add	r4, r4
    38c0:	55 1c       	adc	r5, r5
    38c2:	92 01       	movw	r18, r4
    38c4:	e4 e0       	ldi	r30, 0x04	; 4

000038c6 <ad_3924>:
    38c6:	24 0d       	add	r18, r4
    38c8:	35 1d       	adc	r19, r5
    38ca:	ea 95       	dec	r30
    38cc:	e1 f7       	brne	.-8      	; 0x38c6 <ad_3924>
    38ce:	29 01       	movw	r4, r18
    38d0:	40 e0       	ldi	r20, 0x00	; 0
    38d2:	50 e0       	ldi	r21, 0x00	; 0
    38d4:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <__divmodsi4>
    38d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    38da:	9b 85       	ldd	r25, Y+11	; 0x0b
    38dc:	ac 85       	ldd	r26, Y+12	; 0x0c
    38de:	bd 85       	ldd	r27, Y+13	; 0x0d
    38e0:	28 0f       	add	r18, r24
    38e2:	39 1f       	adc	r19, r25
    38e4:	4a 1f       	adc	r20, r26
    38e6:	5b 1f       	adc	r21, r27
    38e8:	2a 87       	std	Y+10, r18	; 0x0a
    38ea:	3b 87       	std	Y+11, r19	; 0x0b
    38ec:	4c 87       	std	Y+12, r20	; 0x0c
    38ee:	5d 87       	std	Y+13, r21	; 0x0d
    38f0:	6e 80       	ldd	r6, Y+6	; 0x06
    38f2:	7f 80       	ldd	r7, Y+7	; 0x07
    38f4:	88 84       	ldd	r8, Y+8	; 0x08
    38f6:	99 84       	ldd	r9, Y+9	; 0x09
    38f8:	a6 14       	cp	r10, r6
    38fa:	b7 04       	cpc	r11, r7
    38fc:	c8 04       	cpc	r12, r8
    38fe:	d9 04       	cpc	r13, r9
    3900:	28 f4       	brcc	.+10     	; 0x390c <ad_396c>
    3902:	6a 18       	sub	r6, r10
    3904:	7b 08       	sbc	r7, r11
    3906:	8c 08       	sbc	r8, r12
    3908:	9d 08       	sbc	r9, r13
    390a:	03 c0       	rjmp	.+6      	; 0x3912 <ad_3972>

0000390c <ad_396c>:
    390c:	66 24       	eor	r6, r6
    390e:	77 24       	eor	r7, r7
    3910:	43 01       	movw	r8, r6

00003912 <ad_3972>:
    3912:	b2 01       	movw	r22, r4
    3914:	80 e0       	ldi	r24, 0x00	; 0
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	ea 84       	ldd	r14, Y+10	; 0x0a
    391a:	fb 84       	ldd	r15, Y+11	; 0x0b
    391c:	0c 85       	ldd	r16, Y+12	; 0x0c
    391e:	1d 85       	ldd	r17, Y+13	; 0x0d
    3920:	6e 14       	cp	r6, r14
    3922:	7f 04       	cpc	r7, r15
    3924:	80 06       	cpc	r8, r16
    3926:	91 06       	cpc	r9, r17
    3928:	c8 f0       	brcs	.+50     	; 0x395c <ad_39c0>
    392a:	93 01       	movw	r18, r6
    392c:	a4 01       	movw	r20, r8
    392e:	2e 19       	sub	r18, r14
    3930:	3f 09       	sbc	r19, r15
    3932:	40 0b       	sbc	r20, r16
    3934:	51 0b       	sbc	r21, r17
    3936:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
    393a:	95 01       	movw	r18, r10
    393c:	a6 01       	movw	r20, r12
    393e:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
    3942:	20 93 6e 01 	sts	0x016E, r18
    3946:	30 93 6f 01 	sts	0x016F, r19
    394a:	b9 01       	movw	r22, r18
    394c:	80 e0       	ldi	r24, 0x00	; 0
    394e:	90 e0       	ldi	r25, 0x00	; 0
    3950:	4e ef       	ldi	r20, 0xFE	; 254
    3952:	24 ef       	ldi	r18, 0xF4	; 244
    3954:	02 e0       	ldi	r16, 0x02	; 2
    3956:	0e 94 81 02 	call	0x502	; 0x502 <DisplayValue>
    395a:	24 c0       	rjmp	.+72     	; 0x39a4 <ad_exit>

0000395c <ad_39c0>:
    395c:	97 01       	movw	r18, r14
    395e:	a8 01       	movw	r20, r16
    3960:	26 19       	sub	r18, r6
    3962:	37 09       	sbc	r19, r7
    3964:	48 09       	sbc	r20, r8
    3966:	59 09       	sbc	r21, r9
    3968:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
    396c:	95 01       	movw	r18, r10
    396e:	a6 01       	movw	r20, r12
    3970:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
    3974:	12 2f       	mov	r17, r18
    3976:	80 e3       	ldi	r24, 0x30	; 48
    3978:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
    397c:	81 2f       	mov	r24, r17
    397e:	81 50       	subi	r24, 0x01	; 1
    3980:	83 36       	cpi	r24, 0x63	; 99
    3982:	80 f4       	brcc	.+32     	; 0x39a4 <ad_exit>
    3984:	39 81       	ldd	r19, Y+1	; 0x01
    3986:	32 30       	cpi	r19, 0x02	; 2
    3988:	51 f4       	brne	.+20     	; 0x399e <ad_3a0e>
    398a:	8f e3       	ldi	r24, 0x3F	; 63
    398c:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>
    3990:	62 2d       	mov	r22, r2
    3992:	61 1b       	sub	r22, r17
    3994:	86 ef       	ldi	r24, 0xF6	; 246
    3996:	91 e0       	ldi	r25, 0x01	; 1
    3998:	0e 94 65 1f 	call	0x3eca	; 0x3eca <__eewr_byte_m168>
    399c:	03 c0       	rjmp	.+6      	; 0x39a4 <ad_exit>

0000399e <ad_3a0e>:
    399e:	81 e2       	ldi	r24, 0x21	; 33
    39a0:	0e 94 93 00 	call	0x126	; 0x126 <lcd_data>

000039a4 <ad_exit>:
    39a4:	6a 96       	adiw	r28, 0x1a	; 26
    39a6:	0f b6       	in	r0, 0x3f	; 63
    39a8:	f8 94       	cli
    39aa:	de bf       	out	0x3e, r29	; 62
    39ac:	0f be       	out	0x3f, r0	; 63
    39ae:	cd bf       	out	0x3d, r28	; 61
    39b0:	cf 91       	pop	r28
    39b2:	df 91       	pop	r29
    39b4:	1f 91       	pop	r17
    39b6:	0f 91       	pop	r16
    39b8:	ff 90       	pop	r15
    39ba:	ef 90       	pop	r14
    39bc:	df 90       	pop	r13
    39be:	cf 90       	pop	r12
    39c0:	bf 90       	pop	r11
    39c2:	af 90       	pop	r10
    39c4:	9f 90       	pop	r9
    39c6:	8f 90       	pop	r8
    39c8:	7f 90       	pop	r7
    39ca:	6f 90       	pop	r6
    39cc:	5f 90       	pop	r5
    39ce:	4f 90       	pop	r4
    39d0:	3f 90       	pop	r3
    39d2:	2f 90       	pop	r2
    39d4:	08 95       	ret

000039d6 <GetVloss>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void GetVloss() {
    39d6:	8f 92       	push	r8
    39d8:	9f 92       	push	r9
    39da:	af 92       	push	r10
    39dc:	bf 92       	push	r11
    39de:	df 92       	push	r13
    39e0:	ef 92       	push	r14
    39e2:	ff 92       	push	r15
    39e4:	0f 93       	push	r16
    39e6:	1f 93       	push	r17
    39e8:	cf 93       	push	r28
    39ea:	df 93       	push	r29
  } lval;
  uint8_t ii;
  uint8_t HiPinR_L;
  uint8_t LoADC;

  if (cap.v_loss > 0) return;		// Voltage loss is already known
    39ec:	80 91 70 01 	lds	r24, 0x0170
    39f0:	90 91 71 01 	lds	r25, 0x0171
    39f4:	00 97       	sbiw	r24, 0x00	; 0
    39f6:	09 f0       	breq	.+2      	; 0x39fa <GetVloss+0x24>
    39f8:	98 c0       	rjmp	.+304    	; 0x3b2a <GetVloss+0x154>
  LoADC = pgm_read_byte(&PinADCtab[cap.ca]) | TXD_MSK;
    39fa:	e0 91 72 01 	lds	r30, 0x0172
    39fe:	f0 e0       	ldi	r31, 0x00	; 0
    3a00:	eb 51       	subi	r30, 0x1B	; 27
    3a02:	ff 4f       	sbci	r31, 0xFF	; 255
    3a04:	04 91       	lpm	r16, Z+
    3a06:	08 60       	ori	r16, 0x08	; 8
  HiPinR_L = pgm_read_byte(&PinRLtab[cap.cb]);	//R_L mask for HighPin R_L load
    3a08:	e0 91 73 01 	lds	r30, 0x0173
    3a0c:	f0 e0       	ldi	r31, 0x00	; 0
    3a0e:	ee 51       	subi	r30, 0x1E	; 30
    3a10:	ff 4f       	sbci	r31, 0xFF	; 255
    3a12:	d4 90       	lpm	r13, Z+

  EntladePins();			// discharge capacitor
    3a14:	0e 94 9c 01 	call	0x338	; 0x338 <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    3a18:	88 e0       	ldi	r24, 0x08	; 8
    3a1a:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    3a1c:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    3a1e:	07 b9       	out	0x07, r16	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    3a20:	d4 b8       	out	0x04, r13	; 4
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
    3a22:	80 91 73 01 	lds	r24, 0x0173
    3a26:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
    3a2a:	7c 01       	movw	r14, r24
//  ovcnt16 = 0;
//  if (cap.cpre_max == -12) ovcnt16 = (cap.cval_max + 50000) / 100000UL;
//  if (cap.cpre_max == -11) ovcnt16 = (cap.cval_max + 5000) / 10000UL;
//  if (cap.cpre_max == -10) ovcnt16 = (cap.cval_max + 500) / 1000;
//  if (cap.cpre_max == -9)  ovcnt16 = (cap.cval_max + 50) / 100;
  if (cap.cpre_max > -9) return;	// too much capacity
    3a2c:	00 91 75 01 	lds	r16, 0x0175
    3a30:	08 3f       	cpi	r16, 0xF8	; 248
    3a32:	0c f0       	brlt	.+2      	; 0x3a36 <GetVloss+0x60>
    3a34:	7a c0       	rjmp	.+244    	; 0x3b2a <GetVloss+0x154>
  lval.dw = cap.cval_max;
    3a36:	20 91 66 01 	lds	r18, 0x0166
    3a3a:	30 91 67 01 	lds	r19, 0x0167
    3a3e:	40 91 68 01 	lds	r20, 0x0168
    3a42:	50 91 69 01 	lds	r21, 0x0169
  for (ii=cap.cpre_max+12;ii<5;ii++) {
    3a46:	04 5f       	subi	r16, 0xF4	; 244
     lval.dw = (lval.dw + 5) / 10;
    3a48:	8a e0       	ldi	r24, 0x0A	; 10
    3a4a:	88 2e       	mov	r8, r24
    3a4c:	91 2c       	mov	r9, r1
    3a4e:	a1 2c       	mov	r10, r1
    3a50:	b1 2c       	mov	r11, r1
//  if (cap.cpre_max == -11) ovcnt16 = (cap.cval_max + 5000) / 10000UL;
//  if (cap.cpre_max == -10) ovcnt16 = (cap.cval_max + 500) / 1000;
//  if (cap.cpre_max == -9)  ovcnt16 = (cap.cval_max + 50) / 100;
  if (cap.cpre_max > -9) return;	// too much capacity
  lval.dw = cap.cval_max;
  for (ii=cap.cpre_max+12;ii<5;ii++) {
    3a52:	0b c0       	rjmp	.+22     	; 0x3a6a <GetVloss+0x94>
     lval.dw = (lval.dw + 5) / 10;
    3a54:	ca 01       	movw	r24, r20
    3a56:	b9 01       	movw	r22, r18
    3a58:	6b 5f       	subi	r22, 0xFB	; 251
    3a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a5c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a60:	a5 01       	movw	r20, r10
    3a62:	94 01       	movw	r18, r8
    3a64:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
//  if (cap.cpre_max == -11) ovcnt16 = (cap.cval_max + 5000) / 10000UL;
//  if (cap.cpre_max == -10) ovcnt16 = (cap.cval_max + 500) / 1000;
//  if (cap.cpre_max == -9)  ovcnt16 = (cap.cval_max + 50) / 100;
  if (cap.cpre_max > -9) return;	// too much capacity
  lval.dw = cap.cval_max;
  for (ii=cap.cpre_max+12;ii<5;ii++) {
    3a68:	0f 5f       	subi	r16, 0xFF	; 255
    3a6a:	05 30       	cpi	r16, 0x05	; 5
    3a6c:	98 f3       	brcs	.-26     	; 0x3a54 <GetVloss+0x7e>
     lval.dw = (lval.dw + 5) / 10;
  }
  if ((lval.w[0] == 0) || (lval.w[0] > 500)) return;
    3a6e:	89 01       	movw	r16, r18
    3a70:	c9 01       	movw	r24, r18
    3a72:	01 97       	sbiw	r24, 0x01	; 1
    3a74:	21 e0       	ldi	r18, 0x01	; 1
    3a76:	84 3f       	cpi	r24, 0xF4	; 244
    3a78:	92 07       	cpc	r25, r18
    3a7a:	08 f0       	brcs	.+2      	; 0x3a7e <GetVloss+0xa8>
    3a7c:	56 c0       	rjmp	.+172    	; 0x3b2a <GetVloss+0x154>
  R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    3a7e:	d5 b8       	out	0x05, r13	; 5
  R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    3a80:	d4 b8       	out	0x04, r13	; 4
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    3a82:	c0 e0       	ldi	r28, 0x00	; 0
    3a84:	d0 e0       	ldi	r29, 0x00	; 0
     wait50us();			// wait exactly 50us
    3a86:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <wait50us>
     lval.dw = (lval.dw + 5) / 10;
  }
  if ((lval.w[0] == 0) || (lval.w[0] > 500)) return;
  R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
  R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    3a8a:	22 96       	adiw	r28, 0x02	; 2
    3a8c:	c0 17       	cp	r28, r16
    3a8e:	d1 07       	cpc	r29, r17
    3a90:	d0 f3       	brcs	.-12     	; 0x3a86 <GetVloss+0xb0>
     wait50us();			// wait exactly 50us
  }
  R_DDR = 0;				// switch back to input
    3a92:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// no Pull up
    3a94:	15 b8       	out	0x05, r1	; 5
 // wait10us();			//wait a little time
  wdt_reset();
    3a96:	a8 95       	wdr
  // read voltage without current
  ADCconfig.Samples = 5;		// set ADC to only 5 samples
    3a98:	85 e0       	ldi	r24, 0x05	; 5
    3a9a:	80 93 3c 01 	sts	0x013C, r24
  adcv[2] = ReadADC(cap.cb);
    3a9e:	80 91 73 01 	lds	r24, 0x0173
    3aa2:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
  if (adcv[2] > adcv[0]) {
    3aa6:	e8 16       	cp	r14, r24
    3aa8:	f9 06       	cpc	r15, r25
    3aaa:	20 f4       	brcc	.+8      	; 0x3ab4 <GetVloss+0xde>
     adcv[2] -= adcv[0];		//difference to beginning voltage
    3aac:	ec 01       	movw	r28, r24
    3aae:	ce 19       	sub	r28, r14
    3ab0:	df 09       	sbc	r29, r15
    3ab2:	02 c0       	rjmp	.+4      	; 0x3ab8 <GetVloss+0xe2>
  } else {
     adcv[2] = 0;			// voltage is lower or same as beginning voltage
    3ab4:	c0 e0       	ldi	r28, 0x00	; 0
    3ab6:	d0 e0       	ldi	r29, 0x00	; 0
  }
  // wait 2x the time which was required for loading
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    3ab8:	88 24       	eor	r8, r8
    3aba:	99 24       	eor	r9, r9
     wait50us();
    3abc:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <wait50us>
     adcv[2] -= adcv[0];		//difference to beginning voltage
  } else {
     adcv[2] = 0;			// voltage is lower or same as beginning voltage
  }
  // wait 2x the time which was required for loading
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    3ac0:	08 94       	sec
    3ac2:	81 1c       	adc	r8, r1
    3ac4:	91 1c       	adc	r9, r1
    3ac6:	80 16       	cp	r8, r16
    3ac8:	91 06       	cpc	r9, r17
    3aca:	c0 f3       	brcs	.-16     	; 0x3abc <GetVloss+0xe6>
     wait50us();
  }
  adcv[3] = ReadADC(cap.cb);	// read voltage again, is discharged only a little bit ?
    3acc:	80 91 73 01 	lds	r24, 0x0173
    3ad0:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
  ADCconfig.Samples = ANZ_MESS;		// set ADC back to configured No. of samples
    3ad4:	29 e1       	ldi	r18, 0x19	; 25
    3ad6:	20 93 3c 01 	sts	0x013C, r18
  wdt_reset();
    3ada:	a8 95       	wdr
  if (adcv[3] > adcv[0]) {
    3adc:	e8 16       	cp	r14, r24
    3ade:	f9 06       	cpc	r15, r25
    3ae0:	18 f4       	brcc	.+6      	; 0x3ae8 <GetVloss+0x112>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    3ae2:	8e 19       	sub	r24, r14
    3ae4:	9f 09       	sbc	r25, r15
    3ae6:	02 c0       	rjmp	.+4      	; 0x3aec <GetVloss+0x116>
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    3ae8:	80 e0       	ldi	r24, 0x00	; 0
    3aea:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
    3aec:	8c 17       	cp	r24, r28
    3aee:	9d 07       	cpc	r25, r29
    3af0:	a8 f4       	brcc	.+42     	; 0x3b1c <GetVloss+0x146>
     // build difference to load voltage
     adcv[1] = adcv[2] - adcv[3];	// lost voltage during load time wait
    3af2:	be 01       	movw	r22, r28
    3af4:	68 1b       	sub	r22, r24
    3af6:	79 0b       	sbc	r23, r25
  } else {
     adcv[1] = 0;			// no lost voltage
  }
  // compute voltage drop as part from loaded voltage
  if (adcv[1] > 0) {
    3af8:	89 f0       	breq	.+34     	; 0x3b1c <GetVloss+0x146>
     // there is any voltage drop (adcv[1]) !
     // adcv[2] is the loaded voltage.
//     cap.v_loss = (unsigned long)(adcv[1] * 500UL) / adcv[2];
     cap.v_loss = (unsigned long)(adcv[1] * 500UL) / adcv[2];
    3afa:	80 e0       	ldi	r24, 0x00	; 0
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	24 ef       	ldi	r18, 0xF4	; 244
    3b00:	31 e0       	ldi	r19, 0x01	; 1
    3b02:	40 e0       	ldi	r20, 0x00	; 0
    3b04:	50 e0       	ldi	r21, 0x00	; 0
    3b06:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
    3b0a:	9e 01       	movw	r18, r28
    3b0c:	40 e0       	ldi	r20, 0x00	; 0
    3b0e:	50 e0       	ldi	r21, 0x00	; 0
    3b10:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
    3b14:	30 93 71 01 	sts	0x0171, r19
    3b18:	20 93 70 01 	sts	0x0170, r18
  lcd_line4();
  DisplayValue(lval.w[0],0,'x',4);
#endif

  // discharge capacitor again
  EntladePins();		// discharge capacitors
    3b1c:	0e 94 9c 01 	call	0x338	; 0x338 <EntladePins>
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    3b20:	88 e0       	ldi	r24, 0x08	; 8
    3b22:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    3b24:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    3b26:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    3b28:	15 b8       	out	0x05, r1	; 5
#endif
  return;
 } // end GetVdrop()
    3b2a:	df 91       	pop	r29
    3b2c:	cf 91       	pop	r28
    3b2e:	1f 91       	pop	r17
    3b30:	0f 91       	pop	r16
    3b32:	ff 90       	pop	r15
    3b34:	ef 90       	pop	r14
    3b36:	df 90       	pop	r13
    3b38:	bf 90       	pop	r11
    3b3a:	af 90       	pop	r10
    3b3c:	9f 90       	pop	r9
    3b3e:	8f 90       	pop	r8
    3b40:	08 95       	ret

00003b42 <Calibrate_UR>:
#include "Transistortester.h"
void Calibrate_UR(void) {
    3b42:	8f 92       	push	r8
    3b44:	9f 92       	push	r9
    3b46:	af 92       	push	r10
    3b48:	bf 92       	push	r11
    3b4a:	cf 92       	push	r12
    3b4c:	df 92       	push	r13
    3b4e:	ef 92       	push	r14
    3b50:	ff 92       	push	r15
    3b52:	0f 93       	push	r16
    3b54:	1f 93       	push	r17
    3b56:	cf 93       	push	r28
    3b58:	df 93       	push	r29
  uint16_t u680;	// 3 * (Voltage at 680 Ohm)
 #endif


                                        //############################################
  ADCconfig.U_AVCC = U_VCC;     // set initial VCC Voltage
    3b5a:	88 e8       	ldi	r24, 0x88	; 136
    3b5c:	93 e1       	ldi	r25, 0x13	; 19
    3b5e:	90 93 41 01 	sts	0x0141, r25
    3b62:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    3b66:	8e eb       	ldi	r24, 0xBE	; 190
    3b68:	80 93 3c 01 	sts	0x013C, r24
#if FLASHEND > 0x1fff
  ADC_PORT = TXD_VAL;                   // switch to 0V
    3b6c:	08 e0       	ldi	r16, 0x08	; 8
    3b6e:	08 b9       	out	0x08, r16	; 8
  ADC_DDR = (1<<TPREF) | TXD_MSK;       // switch pin with 2.5V reference to GND
    3b70:	88 e1       	ldi	r24, 0x18	; 24
    3b72:	87 b9       	out	0x07, r24	; 7
  wait1ms();
    3b74:	0e 94 dd 13 	call	0x27ba	; 0x27ba <wait1ms>
  ADC_DDR =  TXD_MSK;   // switch pin with reference back to input
    3b78:	07 b9       	out	0x07, r16	; 7
  trans.uBE[1] = W5msReadADC(TPREF); // read voltage of 2.5V precision reference
    3b7a:	84 e0       	ldi	r24, 0x04	; 4
    3b7c:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
    3b80:	ec 01       	movw	r28, r24
    3b82:	90 93 5a 01 	sts	0x015A, r25
    3b86:	80 93 59 01 	sts	0x0159, r24
  if ((trans.uBE[1] > 2250) && (trans.uBE[1] < 2750)) {
    3b8a:	8b 5c       	subi	r24, 0xCB	; 203
    3b8c:	98 40       	sbci	r25, 0x08	; 8
    3b8e:	21 e0       	ldi	r18, 0x01	; 1
    3b90:	83 3f       	cpi	r24, 0xF3	; 243
    3b92:	92 07       	cpc	r25, r18
    3b94:	c0 f4       	brcc	.+48     	; 0x3bc6 <Calibrate_UR+0x84>
     // precision voltage reference connected, update U_AVCC
     WithReference = 1;
    3b96:	81 e0       	ldi	r24, 0x01	; 1
    3b98:	80 93 49 01 	sts	0x0149, r24
     ADCconfig.U_AVCC = (unsigned long)((unsigned long)ADCconfig.U_AVCC * 2495) / trans.uBE[1];
    3b9c:	60 91 40 01 	lds	r22, 0x0140
    3ba0:	70 91 41 01 	lds	r23, 0x0141
    3ba4:	80 e0       	ldi	r24, 0x00	; 0
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	2f eb       	ldi	r18, 0xBF	; 191
    3baa:	39 e0       	ldi	r19, 0x09	; 9
    3bac:	40 e0       	ldi	r20, 0x00	; 0
    3bae:	50 e0       	ldi	r21, 0x00	; 0
    3bb0:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
    3bb4:	9e 01       	movw	r18, r28
    3bb6:	40 e0       	ldi	r20, 0x00	; 0
    3bb8:	50 e0       	ldi	r21, 0x00	; 0
    3bba:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
    3bbe:	30 93 41 01 	sts	0x0141, r19
    3bc2:	20 93 40 01 	sts	0x0140, r18
  }
#endif
 #ifdef WITH_AUTO_REF
  (void) ReadADC(MUX_INT_REF);	// read reference voltage 
    3bc6:	8e e0       	ldi	r24, 0x0E	; 14
    3bc8:	0e 94 1e 1a 	call	0x343c	; 0x343c <ReadADC>
  ref_mv = W5msReadADC(MUX_INT_REF);	// read reference voltage 
    3bcc:	8e e0       	ldi	r24, 0x0E	; 14
    3bce:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
    3bd2:	90 93 45 01 	sts	0x0145, r25
    3bd6:	80 93 44 01 	sts	0x0144, r24
  RefVoltage();		//compute RHmultip = f(reference voltage)
    3bda:	0e 94 37 02 	call	0x46e	; 0x46e <RefVoltage>
 #else
  ref_mv = DEFAULT_BAND_GAP;    // set to default Reference Voltage
 #endif
  ADCconfig.U_Bandgap = ADC_internal_reference; // set internal reference voltage for ADC
    3bde:	85 ee       	ldi	r24, 0xE5	; 229
    3be0:	91 e0       	ldi	r25, 0x01	; 1
    3be2:	0e 94 57 1f 	call	0x3eae	; 0x3eae <__eerd_byte_m168>
    3be6:	99 27       	eor	r25, r25
    3be8:	87 fd       	sbrc	r24, 7
    3bea:	90 95       	com	r25
    3bec:	20 91 44 01 	lds	r18, 0x0144
    3bf0:	30 91 45 01 	lds	r19, 0x0145
    3bf4:	82 0f       	add	r24, r18
    3bf6:	93 1f       	adc	r25, r19
    3bf8:	90 93 3f 01 	sts	0x013F, r25
    3bfc:	80 93 3e 01 	sts	0x013E, r24
                                        //############################################

 #ifdef AUTO_CAL
  // measurement of internal resistance of the ADC port outputs switched to GND
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    3c00:	79 e0       	ldi	r23, 0x09	; 9
    3c02:	d7 2e       	mov	r13, r23
    3c04:	d7 b8       	out	0x07, r13	; 7
  R_PORT = 1<<(TP1*2);		//R_L-PORT 1 to VCC
    3c06:	aa 24       	eor	r10, r10
    3c08:	a3 94       	inc	r10
    3c0a:	a5 b8       	out	0x05, r10	; 5
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to VCC
    3c0c:	a4 b8       	out	0x04, r10	; 4
  sum_rm = W5msReadADC(TP1);
    3c0e:	80 e0       	ldi	r24, 0x00	; 0
    3c10:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
    3c14:	8c 01       	movw	r16, r24

  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin 2 to output 0V
    3c16:	6a e0       	ldi	r22, 0x0A	; 10
    3c18:	86 2e       	mov	r8, r22
    3c1a:	87 b8       	out	0x07, r8	; 7
  R_PORT =  1<<(TP2*2);		//R_L-PORT 2 to VCC
    3c1c:	54 e0       	ldi	r21, 0x04	; 4
    3c1e:	c5 2e       	mov	r12, r21
    3c20:	c5 b8       	out	0x05, r12	; 5
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to VCC
    3c22:	c4 b8       	out	0x04, r12	; 4
  sum_rm += W5msReadADC(TP2);
    3c24:	81 e0       	ldi	r24, 0x01	; 1
    3c26:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
    3c2a:	08 0f       	add	r16, r24
    3c2c:	19 1f       	adc	r17, r25

  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin 3 to output 0V
    3c2e:	4c e0       	ldi	r20, 0x0C	; 12
    3c30:	f4 2e       	mov	r15, r20
    3c32:	f7 b8       	out	0x07, r15	; 7
  R_PORT =  1<<(TP3*2);		//R_L-PORT 3 to VCC
    3c34:	30 e1       	ldi	r19, 0x10	; 16
    3c36:	e3 2e       	mov	r14, r19
    3c38:	e5 b8       	out	0x05, r14	; 5
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to VCC
    3c3a:	e4 b8       	out	0x04, r14	; 4
  sum_rm += W5msReadADC(TP3);	//add all three values
    3c3c:	82 e0       	ldi	r24, 0x02	; 2
    3c3e:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
    3c42:	08 0f       	add	r16, r24
    3c44:	19 1f       	adc	r17, r25

  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
    3c46:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
    3c48:	d8 b8       	out	0x08, r13	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    3c4a:	d7 b8       	out	0x07, r13	; 7
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
    3c4c:	a4 b8       	out	0x04, r10	; 4
  sum_rp = ADCconfig.U_AVCC - W5msReadADC(TP1);
    3c4e:	c0 91 40 01 	lds	r28, 0x0140
    3c52:	d0 91 41 01 	lds	r29, 0x0141
    3c56:	80 e0       	ldi	r24, 0x00	; 0
    3c58:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
    3c5c:	5c 01       	movw	r10, r24
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
    3c5e:	88 b8       	out	0x08, r8	; 8
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
    3c60:	87 b8       	out	0x07, r8	; 7
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
    3c62:	c4 b8       	out	0x04, r12	; 4
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP2);
    3c64:	c0 90 40 01 	lds	r12, 0x0140
    3c68:	d0 90 41 01 	lds	r13, 0x0141
    3c6c:	81 e0       	ldi	r24, 0x01	; 1
    3c6e:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
    3c72:	4c 01       	movw	r8, r24

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
    3c74:	f8 b8       	out	0x08, r15	; 8
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
    3c76:	f7 b8       	out	0x07, r15	; 7
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
    3c78:	e4 b8       	out	0x04, r14	; 4
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP3);
    3c7a:	e0 90 40 01 	lds	r14, 0x0140
    3c7e:	f0 90 41 01 	lds	r15, 0x0141
    3c82:	82 e0       	ldi	r24, 0x02	; 2
    3c84:	0e 94 92 1a 	call	0x3524	; 0x3524 <W5msReadADC>
  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
  sum_rp = ADCconfig.U_AVCC - W5msReadADC(TP1);
    3c88:	cc 0d       	add	r28, r12
    3c8a:	dd 1d       	adc	r29, r13
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP2);
    3c8c:	ce 0d       	add	r28, r14
    3c8e:	df 1d       	adc	r29, r15
    3c90:	c8 1b       	sub	r28, r24
    3c92:	d9 0b       	sbc	r29, r25

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP3);
    3c94:	ca 19       	sub	r28, r10
    3c96:	db 09       	sbc	r29, r11
    3c98:	c8 19       	sub	r28, r8
    3c9a:	d9 09       	sbc	r29, r9

  u680 = ((ADCconfig.U_AVCC * 3) - sum_rm - sum_rp);	//three times the voltage at the 680 Ohm
    3c9c:	80 91 40 01 	lds	r24, 0x0140
    3ca0:	90 91 41 01 	lds	r25, 0x0141
    3ca4:	6c 01       	movw	r12, r24
    3ca6:	cc 0c       	add	r12, r12
    3ca8:	dd 1c       	adc	r13, r13
    3caa:	c8 0e       	add	r12, r24
    3cac:	d9 1e       	adc	r13, r25
    3cae:	c0 1a       	sub	r12, r16
    3cb0:	d1 0a       	sbc	r13, r17
    3cb2:	cc 1a       	sub	r12, r28
    3cb4:	dd 0a       	sbc	r13, r29
  pin_rmi = (unsigned long)((unsigned long)sum_rm * (unsigned long)R_L_VAL) / (unsigned long)u680;
    3cb6:	ee 24       	eor	r14, r14
    3cb8:	ff 24       	eor	r15, r15
    3cba:	b8 01       	movw	r22, r16
    3cbc:	80 e0       	ldi	r24, 0x00	; 0
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	20 e9       	ldi	r18, 0x90	; 144
    3cc2:	3a e1       	ldi	r19, 0x1A	; 26
    3cc4:	40 e0       	ldi	r20, 0x00	; 0
    3cc6:	50 e0       	ldi	r21, 0x00	; 0
    3cc8:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
    3ccc:	a7 01       	movw	r20, r14
    3cce:	96 01       	movw	r18, r12
    3cd0:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
    3cd4:	89 01       	movw	r16, r18
    3cd6:	30 93 48 01 	sts	0x0148, r19
    3cda:	20 93 47 01 	sts	0x0147, r18
//  adcmv[2] = pin_rm;	// for last output in row 2
  pin_rpl = (unsigned long)((unsigned long)sum_rp * (unsigned long)R_L_VAL) / (unsigned long)u680;
    3cde:	be 01       	movw	r22, r28
    3ce0:	80 e0       	ldi	r24, 0x00	; 0
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	20 e9       	ldi	r18, 0x90	; 144
    3ce6:	3a e1       	ldi	r19, 0x1A	; 26
    3ce8:	40 e0       	ldi	r20, 0x00	; 0
    3cea:	50 e0       	ldi	r21, 0x00	; 0
    3cec:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__mulsi3>
    3cf0:	a7 01       	movw	r20, r14
    3cf2:	96 01       	movw	r18, r12
    3cf4:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <__udivmodsi4>
    3cf8:	c9 01       	movw	r24, r18
    3cfa:	30 93 43 01 	sts	0x0143, r19
    3cfe:	20 93 42 01 	sts	0x0142, r18
  if ((pin_rpl < 280) && (pin_rmi < 250)) {
    3d02:	21 e0       	ldi	r18, 0x01	; 1
    3d04:	88 31       	cpi	r24, 0x18	; 24
    3d06:	92 07       	cpc	r25, r18
    3d08:	78 f4       	brcc	.+30     	; 0x3d28 <Calibrate_UR+0x1e6>
    3d0a:	0a 3f       	cpi	r16, 0xFA	; 250
    3d0c:	11 05       	cpc	r17, r1
    3d0e:	60 f4       	brcc	.+24     	; 0x3d28 <Calibrate_UR+0x1e6>
     // rp is below 28 Ohm and rm is below 25 Ohm
     resis680pl = pin_rpl + R_L_VAL;
    3d10:	80 57       	subi	r24, 0x70	; 112
    3d12:	95 4e       	sbci	r25, 0xE5	; 229
    3d14:	90 93 09 01 	sts	0x0109, r25
    3d18:	80 93 08 01 	sts	0x0108, r24
     resis680mi = pin_rmi + R_L_VAL;
    3d1c:	00 57       	subi	r16, 0x70	; 112
    3d1e:	15 4e       	sbci	r17, 0xE5	; 229
    3d20:	10 93 03 01 	sts	0x0103, r17
    3d24:	00 93 02 01 	sts	0x0102, r16
  }
#endif

  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    3d28:	89 e1       	ldi	r24, 0x19	; 25
    3d2a:	80 93 3c 01 	sts	0x013C, r24
 } 
    3d2e:	df 91       	pop	r29
    3d30:	cf 91       	pop	r28
    3d32:	1f 91       	pop	r17
    3d34:	0f 91       	pop	r16
    3d36:	ff 90       	pop	r15
    3d38:	ef 90       	pop	r14
    3d3a:	df 90       	pop	r13
    3d3c:	cf 90       	pop	r12
    3d3e:	bf 90       	pop	r11
    3d40:	af 90       	pop	r10
    3d42:	9f 90       	pop	r9
    3d44:	8f 90       	pop	r8
    3d46:	08 95       	ret

00003d48 <__mulsi3>:
    3d48:	62 9f       	mul	r22, r18
    3d4a:	d0 01       	movw	r26, r0
    3d4c:	73 9f       	mul	r23, r19
    3d4e:	f0 01       	movw	r30, r0
    3d50:	82 9f       	mul	r24, r18
    3d52:	e0 0d       	add	r30, r0
    3d54:	f1 1d       	adc	r31, r1
    3d56:	64 9f       	mul	r22, r20
    3d58:	e0 0d       	add	r30, r0
    3d5a:	f1 1d       	adc	r31, r1
    3d5c:	92 9f       	mul	r25, r18
    3d5e:	f0 0d       	add	r31, r0
    3d60:	83 9f       	mul	r24, r19
    3d62:	f0 0d       	add	r31, r0
    3d64:	74 9f       	mul	r23, r20
    3d66:	f0 0d       	add	r31, r0
    3d68:	65 9f       	mul	r22, r21
    3d6a:	f0 0d       	add	r31, r0
    3d6c:	99 27       	eor	r25, r25
    3d6e:	72 9f       	mul	r23, r18
    3d70:	b0 0d       	add	r27, r0
    3d72:	e1 1d       	adc	r30, r1
    3d74:	f9 1f       	adc	r31, r25
    3d76:	63 9f       	mul	r22, r19
    3d78:	b0 0d       	add	r27, r0
    3d7a:	e1 1d       	adc	r30, r1
    3d7c:	f9 1f       	adc	r31, r25
    3d7e:	bd 01       	movw	r22, r26
    3d80:	cf 01       	movw	r24, r30
    3d82:	11 24       	eor	r1, r1
    3d84:	08 95       	ret

00003d86 <__udivmodqi4>:
    3d86:	99 1b       	sub	r25, r25
    3d88:	79 e0       	ldi	r23, 0x09	; 9
    3d8a:	04 c0       	rjmp	.+8      	; 0x3d94 <__udivmodqi4_ep>

00003d8c <__udivmodqi4_loop>:
    3d8c:	99 1f       	adc	r25, r25
    3d8e:	96 17       	cp	r25, r22
    3d90:	08 f0       	brcs	.+2      	; 0x3d94 <__udivmodqi4_ep>
    3d92:	96 1b       	sub	r25, r22

00003d94 <__udivmodqi4_ep>:
    3d94:	88 1f       	adc	r24, r24
    3d96:	7a 95       	dec	r23
    3d98:	c9 f7       	brne	.-14     	; 0x3d8c <__udivmodqi4_loop>
    3d9a:	80 95       	com	r24
    3d9c:	08 95       	ret

00003d9e <__udivmodhi4>:
    3d9e:	aa 1b       	sub	r26, r26
    3da0:	bb 1b       	sub	r27, r27
    3da2:	51 e1       	ldi	r21, 0x11	; 17
    3da4:	07 c0       	rjmp	.+14     	; 0x3db4 <__udivmodhi4_ep>

00003da6 <__udivmodhi4_loop>:
    3da6:	aa 1f       	adc	r26, r26
    3da8:	bb 1f       	adc	r27, r27
    3daa:	a6 17       	cp	r26, r22
    3dac:	b7 07       	cpc	r27, r23
    3dae:	10 f0       	brcs	.+4      	; 0x3db4 <__udivmodhi4_ep>
    3db0:	a6 1b       	sub	r26, r22
    3db2:	b7 0b       	sbc	r27, r23

00003db4 <__udivmodhi4_ep>:
    3db4:	88 1f       	adc	r24, r24
    3db6:	99 1f       	adc	r25, r25
    3db8:	5a 95       	dec	r21
    3dba:	a9 f7       	brne	.-22     	; 0x3da6 <__udivmodhi4_loop>
    3dbc:	80 95       	com	r24
    3dbe:	90 95       	com	r25
    3dc0:	bc 01       	movw	r22, r24
    3dc2:	cd 01       	movw	r24, r26
    3dc4:	08 95       	ret

00003dc6 <__udivmodsi4>:
    3dc6:	a1 e2       	ldi	r26, 0x21	; 33
    3dc8:	1a 2e       	mov	r1, r26
    3dca:	aa 1b       	sub	r26, r26
    3dcc:	bb 1b       	sub	r27, r27
    3dce:	fd 01       	movw	r30, r26
    3dd0:	0d c0       	rjmp	.+26     	; 0x3dec <__udivmodsi4_ep>

00003dd2 <__udivmodsi4_loop>:
    3dd2:	aa 1f       	adc	r26, r26
    3dd4:	bb 1f       	adc	r27, r27
    3dd6:	ee 1f       	adc	r30, r30
    3dd8:	ff 1f       	adc	r31, r31
    3dda:	a2 17       	cp	r26, r18
    3ddc:	b3 07       	cpc	r27, r19
    3dde:	e4 07       	cpc	r30, r20
    3de0:	f5 07       	cpc	r31, r21
    3de2:	20 f0       	brcs	.+8      	; 0x3dec <__udivmodsi4_ep>
    3de4:	a2 1b       	sub	r26, r18
    3de6:	b3 0b       	sbc	r27, r19
    3de8:	e4 0b       	sbc	r30, r20
    3dea:	f5 0b       	sbc	r31, r21

00003dec <__udivmodsi4_ep>:
    3dec:	66 1f       	adc	r22, r22
    3dee:	77 1f       	adc	r23, r23
    3df0:	88 1f       	adc	r24, r24
    3df2:	99 1f       	adc	r25, r25
    3df4:	1a 94       	dec	r1
    3df6:	69 f7       	brne	.-38     	; 0x3dd2 <__udivmodsi4_loop>
    3df8:	60 95       	com	r22
    3dfa:	70 95       	com	r23
    3dfc:	80 95       	com	r24
    3dfe:	90 95       	com	r25
    3e00:	9b 01       	movw	r18, r22
    3e02:	ac 01       	movw	r20, r24
    3e04:	bd 01       	movw	r22, r26
    3e06:	cf 01       	movw	r24, r30
    3e08:	08 95       	ret

00003e0a <__divmodsi4>:
    3e0a:	97 fb       	bst	r25, 7
    3e0c:	09 2e       	mov	r0, r25
    3e0e:	05 26       	eor	r0, r21
    3e10:	0e d0       	rcall	.+28     	; 0x3e2e <__divmodsi4_neg1>
    3e12:	57 fd       	sbrc	r21, 7
    3e14:	04 d0       	rcall	.+8      	; 0x3e1e <__divmodsi4_neg2>
    3e16:	d7 df       	rcall	.-82     	; 0x3dc6 <__udivmodsi4>
    3e18:	0a d0       	rcall	.+20     	; 0x3e2e <__divmodsi4_neg1>
    3e1a:	00 1c       	adc	r0, r0
    3e1c:	38 f4       	brcc	.+14     	; 0x3e2c <__divmodsi4_exit>

00003e1e <__divmodsi4_neg2>:
    3e1e:	50 95       	com	r21
    3e20:	40 95       	com	r20
    3e22:	30 95       	com	r19
    3e24:	21 95       	neg	r18
    3e26:	3f 4f       	sbci	r19, 0xFF	; 255
    3e28:	4f 4f       	sbci	r20, 0xFF	; 255
    3e2a:	5f 4f       	sbci	r21, 0xFF	; 255

00003e2c <__divmodsi4_exit>:
    3e2c:	08 95       	ret

00003e2e <__divmodsi4_neg1>:
    3e2e:	f6 f7       	brtc	.-4      	; 0x3e2c <__divmodsi4_exit>
    3e30:	90 95       	com	r25
    3e32:	80 95       	com	r24
    3e34:	70 95       	com	r23
    3e36:	61 95       	neg	r22
    3e38:	7f 4f       	sbci	r23, 0xFF	; 255
    3e3a:	8f 4f       	sbci	r24, 0xFF	; 255
    3e3c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e3e:	08 95       	ret

00003e40 <itoa>:
    3e40:	fb 01       	movw	r30, r22
    3e42:	9f 01       	movw	r18, r30
    3e44:	e8 94       	clt
    3e46:	42 30       	cpi	r20, 0x02	; 2
    3e48:	c4 f0       	brlt	.+48     	; 0x3e7a <itoa+0x3a>
    3e4a:	45 32       	cpi	r20, 0x25	; 37
    3e4c:	b4 f4       	brge	.+44     	; 0x3e7a <itoa+0x3a>
    3e4e:	4a 30       	cpi	r20, 0x0A	; 10
    3e50:	29 f4       	brne	.+10     	; 0x3e5c <itoa+0x1c>
    3e52:	97 fb       	bst	r25, 7
    3e54:	1e f4       	brtc	.+6      	; 0x3e5c <itoa+0x1c>
    3e56:	90 95       	com	r25
    3e58:	81 95       	neg	r24
    3e5a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e5c:	64 2f       	mov	r22, r20
    3e5e:	77 27       	eor	r23, r23
    3e60:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__udivmodhi4>
    3e64:	80 5d       	subi	r24, 0xD0	; 208
    3e66:	8a 33       	cpi	r24, 0x3A	; 58
    3e68:	0c f0       	brlt	.+2      	; 0x3e6c <itoa+0x2c>
    3e6a:	89 5d       	subi	r24, 0xD9	; 217
    3e6c:	81 93       	st	Z+, r24
    3e6e:	cb 01       	movw	r24, r22
    3e70:	00 97       	sbiw	r24, 0x00	; 0
    3e72:	a1 f7       	brne	.-24     	; 0x3e5c <itoa+0x1c>
    3e74:	16 f4       	brtc	.+4      	; 0x3e7a <itoa+0x3a>
    3e76:	5d e2       	ldi	r21, 0x2D	; 45
    3e78:	51 93       	st	Z+, r21
    3e7a:	10 82       	st	Z, r1
    3e7c:	c9 01       	movw	r24, r18
    3e7e:	0c 94 78 1f 	jmp	0x3ef0	; 0x3ef0 <strrev>

00003e82 <utoa>:
    3e82:	fb 01       	movw	r30, r22
    3e84:	9f 01       	movw	r18, r30
    3e86:	42 30       	cpi	r20, 0x02	; 2
    3e88:	74 f0       	brlt	.+28     	; 0x3ea6 <utoa+0x24>
    3e8a:	45 32       	cpi	r20, 0x25	; 37
    3e8c:	64 f4       	brge	.+24     	; 0x3ea6 <utoa+0x24>
    3e8e:	64 2f       	mov	r22, r20
    3e90:	77 27       	eor	r23, r23
    3e92:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__udivmodhi4>
    3e96:	80 5d       	subi	r24, 0xD0	; 208
    3e98:	8a 33       	cpi	r24, 0x3A	; 58
    3e9a:	0c f0       	brlt	.+2      	; 0x3e9e <utoa+0x1c>
    3e9c:	89 5d       	subi	r24, 0xD9	; 217
    3e9e:	81 93       	st	Z+, r24
    3ea0:	cb 01       	movw	r24, r22
    3ea2:	00 97       	sbiw	r24, 0x00	; 0
    3ea4:	a1 f7       	brne	.-24     	; 0x3e8e <utoa+0xc>
    3ea6:	10 82       	st	Z, r1
    3ea8:	c9 01       	movw	r24, r18
    3eaa:	0c 94 78 1f 	jmp	0x3ef0	; 0x3ef0 <strrev>

00003eae <__eerd_byte_m168>:
    3eae:	f9 99       	sbic	0x1f, 1	; 31
    3eb0:	fe cf       	rjmp	.-4      	; 0x3eae <__eerd_byte_m168>
    3eb2:	92 bd       	out	0x22, r25	; 34
    3eb4:	81 bd       	out	0x21, r24	; 33
    3eb6:	f8 9a       	sbi	0x1f, 0	; 31
    3eb8:	99 27       	eor	r25, r25
    3eba:	80 b5       	in	r24, 0x20	; 32
    3ebc:	08 95       	ret

00003ebe <__eerd_word_m168>:
    3ebe:	a8 e1       	ldi	r26, 0x18	; 24
    3ec0:	b0 e0       	ldi	r27, 0x00	; 0
    3ec2:	42 e0       	ldi	r20, 0x02	; 2
    3ec4:	50 e0       	ldi	r21, 0x00	; 0
    3ec6:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__eerd_blraw_m168>

00003eca <__eewr_byte_m168>:
    3eca:	26 2f       	mov	r18, r22

00003ecc <__eewr_r18_m168>:
    3ecc:	f9 99       	sbic	0x1f, 1	; 31
    3ece:	fe cf       	rjmp	.-4      	; 0x3ecc <__eewr_r18_m168>
    3ed0:	1f ba       	out	0x1f, r1	; 31
    3ed2:	92 bd       	out	0x22, r25	; 34
    3ed4:	81 bd       	out	0x21, r24	; 33
    3ed6:	20 bd       	out	0x20, r18	; 32
    3ed8:	0f b6       	in	r0, 0x3f	; 63
    3eda:	f8 94       	cli
    3edc:	fa 9a       	sbi	0x1f, 2	; 31
    3ede:	f9 9a       	sbi	0x1f, 1	; 31
    3ee0:	0f be       	out	0x3f, r0	; 63
    3ee2:	01 96       	adiw	r24, 0x01	; 1
    3ee4:	08 95       	ret

00003ee6 <__eewr_word_m168>:
    3ee6:	0e 94 65 1f 	call	0x3eca	; 0x3eca <__eewr_byte_m168>
    3eea:	27 2f       	mov	r18, r23
    3eec:	0c 94 66 1f 	jmp	0x3ecc	; 0x3ecc <__eewr_r18_m168>

00003ef0 <strrev>:
    3ef0:	dc 01       	movw	r26, r24
    3ef2:	fc 01       	movw	r30, r24
    3ef4:	67 2f       	mov	r22, r23
    3ef6:	71 91       	ld	r23, Z+
    3ef8:	77 23       	and	r23, r23
    3efa:	e1 f7       	brne	.-8      	; 0x3ef4 <strrev+0x4>
    3efc:	32 97       	sbiw	r30, 0x02	; 2
    3efe:	04 c0       	rjmp	.+8      	; 0x3f08 <strrev+0x18>
    3f00:	7c 91       	ld	r23, X
    3f02:	6d 93       	st	X+, r22
    3f04:	70 83       	st	Z, r23
    3f06:	62 91       	ld	r22, -Z
    3f08:	ae 17       	cp	r26, r30
    3f0a:	bf 07       	cpc	r27, r31
    3f0c:	c8 f3       	brcs	.-14     	; 0x3f00 <strrev+0x10>
    3f0e:	08 95       	ret

00003f10 <__eerd_block_m168>:
    3f10:	dc 01       	movw	r26, r24
    3f12:	cb 01       	movw	r24, r22

00003f14 <__eerd_blraw_m168>:
    3f14:	fc 01       	movw	r30, r24
    3f16:	f9 99       	sbic	0x1f, 1	; 31
    3f18:	fe cf       	rjmp	.-4      	; 0x3f16 <__eerd_blraw_m168+0x2>
    3f1a:	06 c0       	rjmp	.+12     	; 0x3f28 <__eerd_blraw_m168+0x14>
    3f1c:	f2 bd       	out	0x22, r31	; 34
    3f1e:	e1 bd       	out	0x21, r30	; 33
    3f20:	f8 9a       	sbi	0x1f, 0	; 31
    3f22:	31 96       	adiw	r30, 0x01	; 1
    3f24:	00 b4       	in	r0, 0x20	; 32
    3f26:	0d 92       	st	X+, r0
    3f28:	41 50       	subi	r20, 0x01	; 1
    3f2a:	50 40       	sbci	r21, 0x00	; 0
    3f2c:	b8 f7       	brcc	.-18     	; 0x3f1c <__eerd_blraw_m168+0x8>
    3f2e:	08 95       	ret

00003f30 <_exit>:
    3f30:	f8 94       	cli

00003f32 <__stop_program>:
    3f32:	ff cf       	rjmp	.-2      	; 0x3f32 <__stop_program>
