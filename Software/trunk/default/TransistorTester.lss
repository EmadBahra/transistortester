
TransistorTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00003f66  0000401a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f66  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  00800102  00800102  0000401c  2**0
                  ALLOC
  3 .eeprom       000001d4  00810000  00810000  0000401c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         00000dbc  00000000  00000000  000041f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001d2  00000000  00000000  00004fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000000c0  00000000  00000000  0000517e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000783  00000000  00000000  0000523e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002edc  00000000  00000000  000059c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000008ad  00000000  00000000  0000889d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000034f3  00000000  00000000  0000914a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000002c0  00000000  00000000  0000c640  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000988  00000000  00000000  0000c900  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000019b2  00000000  00000000  0000d288  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 0000021f  00000000  00000000  0000ec3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 88 00 	jmp	0x110	; 0x110 <__ctors_end>
       4:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
       8:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
       c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      10:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      14:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      18:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      1c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__vector_7>
      20:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      24:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      28:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__vector_10>
      2c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      30:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      34:	0c 94 f7 17 	jmp	0x2fee	; 0x2fee <__vector_13>
      38:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      3c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      40:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      44:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      48:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      4c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      50:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      54:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_21>
      58:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      5c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      60:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      64:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>

00000068 <LogTab>:
      68:	00 00 14 00 29 00 3e 00 53 00 69 00 80 00 97 00     ....).>.S.i.....
      78:	ae 00 c6 00 df 00 f8 00 12 01 2d 01 49 01 65 01     ..........-.I.e.
      88:	82 01 a0 01 be 01 de 01 ff 01 21 02 44 02 68 02     ..........!.D.h.
      98:	8e 02 b5 02 de 02 09 03 35 03 64 03 94 03 c8 03     ........5.d.....
      a8:	fe 03 37 04 73 04 b4 04 f9 04 43 05 93 05 ea 05     ..7.s.....C.....
      b8:	49 06 b3 06 29 07 ae 07 48 08 ff 08 de 09           I...)...H.....

000000c6 <RHtab>:
      c6:	ba 03 87 03 58 03 2e 03 07 03 e4 02 c3 02 a4 02     ....X...........
      d6:	88 02                                               ..

000000d8 <VERSION_str>:
      d8:	56 65 72 73 69 6f 6e 20 31 2e 30 39 6b 00           Version 1.09k.

000000e6 <URefT>:
      e6:	52 65 66 3d 00                                      Ref=.

000000eb <RHfakt>:
      eb:	52 48 66 3d 00                                      RHf=.

000000f0 <R0_str>:
      f0:	52 30 3d 00                                         R0=.

000000f4 <MinCap_str>:
      f4:	20 3e 31 30 30 6e 46 00                              >100nF.

000000fc <REF_C_str>:
      fc:	52 45 46 5f 43 3d 00                                REF_C=.

00000103 <REF_R_str>:
     103:	52 45 46 5f 52 3d 00                                REF_R=.

0000010a <PinRLtab>:
     10a:	01 04 10                                            ...

0000010d <PinADCtab>:
     10d:	01 02 04                                            ...

00000110 <__ctors_end>:
     110:	11 24       	eor	r1, r1
     112:	1f be       	out	0x3f, r1	; 63
     114:	cf ef       	ldi	r28, 0xFF	; 255
     116:	d4 e0       	ldi	r29, 0x04	; 4
     118:	de bf       	out	0x3e, r29	; 62
     11a:	cd bf       	out	0x3d, r28	; 61

0000011c <__do_copy_data>:
     11c:	11 e0       	ldi	r17, 0x01	; 1
     11e:	a0 e0       	ldi	r26, 0x00	; 0
     120:	b1 e0       	ldi	r27, 0x01	; 1
     122:	e6 e6       	ldi	r30, 0x66	; 102
     124:	ff e3       	ldi	r31, 0x3F	; 63
     126:	02 c0       	rjmp	.+4      	; 0x12c <__do_copy_data+0x10>
     128:	05 90       	lpm	r0, Z+
     12a:	0d 92       	st	X+, r0
     12c:	a2 30       	cpi	r26, 0x02	; 2
     12e:	b1 07       	cpc	r27, r17
     130:	d9 f7       	brne	.-10     	; 0x128 <__do_copy_data+0xc>

00000132 <__do_clear_bss>:
     132:	11 e0       	ldi	r17, 0x01	; 1
     134:	a2 e0       	ldi	r26, 0x02	; 2
     136:	b1 e0       	ldi	r27, 0x01	; 1
     138:	01 c0       	rjmp	.+2      	; 0x13c <.do_clear_bss_start>

0000013a <.do_clear_bss_loop>:
     13a:	1d 92       	st	X+, r1

0000013c <.do_clear_bss_start>:
     13c:	a0 39       	cpi	r26, 0x90	; 144
     13e:	b1 07       	cpc	r27, r17
     140:	e1 f7       	brne	.-8      	; 0x13a <.do_clear_bss_loop>
     142:	0e 94 57 0f 	call	0x1eae	; 0x1eae <main>
     146:	0c 94 b1 1f 	jmp	0x3f62	; 0x3f62 <_exit>

0000014a <__bad_interrupt>:
     14a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014e <lcd_data>:
void lcd_space(void) {
   lcd_data(' ');
}

// sends data byte to the LCD 
void lcd_data(unsigned char temp1) {
     14e:	1f 93       	push	r17
     150:	18 2f       	mov	r17, r24
 lcd_write_data(temp1);		// set RS to 1
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	61 2f       	mov	r22, r17
     156:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
     15a:	0e 94 84 14 	call	0x2908	; 0x2908 <wait50us>
#ifdef WITH_UART
 switch(temp1) {
     15e:	18 30       	cpi	r17, 0x08	; 8
     160:	48 f4       	brcc	.+18     	; 0x174 <lcd_data+0x26>
     162:	16 30       	cpi	r17, 0x06	; 6
     164:	c0 f4       	brcc	.+48     	; 0x196 <lcd_data+0x48>
     166:	12 30       	cpi	r17, 0x02	; 2
     168:	61 f0       	breq	.+24     	; 0x182 <lcd_data+0x34>
     16a:	13 30       	cpi	r17, 0x03	; 3
     16c:	79 f0       	breq	.+30     	; 0x18c <lcd_data+0x3e>
     16e:	11 30       	cpi	r17, 0x01	; 1
     170:	f1 f4       	brne	.+60     	; 0x1ae <lcd_data+0x60>
     172:	05 c0       	rjmp	.+10     	; 0x17e <lcd_data+0x30>
     174:	14 3e       	cpi	r17, 0xE4	; 228
     176:	89 f0       	breq	.+34     	; 0x19a <lcd_data+0x4c>
     178:	14 3f       	cpi	r17, 0xF4	; 244
     17a:	c9 f4       	brne	.+50     	; 0x1ae <lcd_data+0x60>
     17c:	10 c0       	rjmp	.+32     	; 0x19e <lcd_data+0x50>
    case LCD_CHAR_DIODE1:
    	uart_putc('>');
     17e:	8e e3       	ldi	r24, 0x3E	; 62
     180:	06 c0       	rjmp	.+12     	; 0x18e <lcd_data+0x40>
    	uart_putc('|');
    	break;
    case LCD_CHAR_DIODE2:
    	uart_putc('|');
     182:	8c e7       	ldi	r24, 0x7C	; 124
     184:	0e 94 55 14 	call	0x28aa	; 0x28aa <uart_putc>
    	uart_putc('<');
     188:	8c e3       	ldi	r24, 0x3C	; 60
     18a:	12 c0       	rjmp	.+36     	; 0x1b0 <lcd_data+0x62>
    	break;
    case LCD_CHAR_CAP:
    	uart_putc('|');
     18c:	8c e7       	ldi	r24, 0x7C	; 124
     18e:	0e 94 55 14 	call	0x28aa	; 0x28aa <uart_putc>
    	uart_putc('|');
     192:	8c e7       	ldi	r24, 0x7C	; 124
     194:	0d c0       	rjmp	.+26     	; 0x1b0 <lcd_data+0x62>
    	break;
    case LCD_CHAR_RESIS1:
    case LCD_CHAR_RESIS2:
    	uart_putc('R');
     196:	82 e5       	ldi	r24, 0x52	; 82
     198:	0b c0       	rjmp	.+22     	; 0x1b0 <lcd_data+0x62>
//    case LCD_CHAR_DEGREE:	// degree sign
//    	uart_putc(0xf8);	// codepage 437 or 850 has degree
//    	break;
    case LCD_CHAR_U:		//µ
//    	uart_putc(0xe6);	// codepage 437 or 850 has my
    	uart_putc('u');		// better use the ASCII u
     19a:	85 e7       	ldi	r24, 0x75	; 117
     19c:	09 c0       	rjmp	.+18     	; 0x1b0 <lcd_data+0x62>
    	break;
    case LCD_CHAR_OMEGA:	//Omega
//	uart_putc(0xea);	// only codepage 437 has Omega
        uart_putc('O');
     19e:	8f e4       	ldi	r24, 0x4F	; 79
     1a0:	0e 94 55 14 	call	0x28aa	; 0x28aa <uart_putc>
        uart_putc('h');
     1a4:	88 e6       	ldi	r24, 0x68	; 104
     1a6:	0e 94 55 14 	call	0x28aa	; 0x28aa <uart_putc>
        uart_putc('m');
     1aa:	8d e6       	ldi	r24, 0x6D	; 109
     1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <lcd_data+0x62>
    	break;
    default:
    	uart_putc(temp1);
     1ae:	81 2f       	mov	r24, r17
     1b0:	0e 94 55 14 	call	0x28aa	; 0x28aa <uart_putc>
 }
#endif
}
     1b4:	1f 91       	pop	r17
     1b6:	08 95       	ret

000001b8 <lcd_space>:
   lcd_data(temp + '1');
}

// send space character to LCD
void lcd_space(void) {
   lcd_data(' ');
     1b8:	80 e2       	ldi	r24, 0x20	; 32
     1ba:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
}
     1be:	08 95       	ret

000001c0 <lcd_testpin>:
 

// sends numeric character (Pin Number) to the LCD 
// from binary 0 we send ASCII 1 ....
void lcd_testpin(unsigned char temp) {
   lcd_data(temp + '1');
     1c0:	8f 5c       	subi	r24, 0xCF	; 207
     1c2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
}
     1c6:	08 95       	ret

000001c8 <uart_newline>:
}


#ifdef WITH_UART
void uart_newline(void) {
   uart_putc('\r');
     1c8:	8d e0       	ldi	r24, 0x0D	; 13
     1ca:	0e 94 55 14 	call	0x28aa	; 0x28aa <uart_putc>
   uart_putc('\n');
     1ce:	8a e0       	ldi	r24, 0x0A	; 10
     1d0:	0e 94 55 14 	call	0x28aa	; 0x28aa <uart_putc>
}
     1d4:	08 95       	ret

000001d6 <lcd_command>:
#endif
}
 
// sends a command to the LCD
 
void lcd_command(unsigned char temp1) {
     1d6:	1f 93       	push	r17
     1d8:	18 2f       	mov	r17, r24
        lcd_write_cmd(temp1);		// set RS to 0
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	61 2f       	mov	r22, r17
     1de:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
     1e2:	0e 94 84 14 	call	0x2908	; 0x2908 <wait50us>
#ifdef WITH_UART
	if((temp1 == 0x80) || (temp1 == 0xC0)) {
     1e6:	10 38       	cpi	r17, 0x80	; 128
     1e8:	11 f0       	breq	.+4      	; 0x1ee <lcd_command+0x18>
     1ea:	10 3c       	cpi	r17, 0xC0	; 192
     1ec:	11 f4       	brne	.+4      	; 0x1f2 <lcd_command+0x1c>
		uart_newline();
     1ee:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <uart_newline>
	}
#endif
}
     1f2:	1f 91       	pop	r17
     1f4:	08 95       	ret

000001f6 <lcd_clear>:
}
 
// send the command to clear the display 
 
void lcd_clear(void) {
   lcd_command(CLEAR_DISPLAY);
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
   wait_about10ms();
     1fc:	82 e0       	ldi	r24, 0x02	; 2
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
#ifdef WITH_UART
   uart_newline();
     204:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <uart_newline>
#endif
   lcd_line1();			// set cursor to Line1 Column 1, (only for OLED-Display)
     208:	80 e8       	ldi	r24, 0x80	; 128
     20a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
}
     20e:	08 95       	ret

00000210 <lcd_init>:
 
// Initialise: 
// Must be called first .
 
void lcd_init(void) {
   wait_about30ms();
     210:	86 e0       	ldi	r24, 0x06	; 6
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
   // to initialise, send 3 times to be shure to be in 8 Bit mode
   lcd_write_init(1);
     218:	80 e8       	ldi	r24, 0x80	; 128
     21a:	60 e3       	ldi	r22, 0x30	; 48
     21c:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
   wait_about5ms();
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
   
   lcd_write_init(1);
     228:	80 e8       	ldi	r24, 0x80	; 128
     22a:	60 e3       	ldi	r22, 0x30	; 48
     22c:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
   wait1ms();
     230:	0e 94 7e 14 	call	0x28fc	; 0x28fc <wait1ms>

   lcd_write_init(1);
     234:	80 e8       	ldi	r24, 0x80	; 128
     236:	60 e3       	ldi	r22, 0x30	; 48
     238:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
   wait1ms();
     23c:	0e 94 7e 14 	call	0x28fc	; 0x28fc <wait1ms>

   lcd_write_init(0);		// switch to 4 Bit mode
     240:	80 e8       	ldi	r24, 0x80	; 128
     242:	60 e2       	ldi	r22, 0x20	; 32
     244:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
   wait_about10ms();
     248:	82 e0       	ldi	r24, 0x02	; 2
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
   lcd_command(CMD1_SetBias | 0x0c);		// 1/4 bias     (5V)
   lcd_command(CMD1_PowerControl | 0x02);	// booster off / set contrast C5:C4 = 2
   lcd_command(CMD1_FollowerControl | 0x09);	// Follower on / Rab2:0 = 1
   lcd_command(CMD1_SetContrast | 0x04);	// set contrast C3:0 = 4
#endif
   lcd_command(CMD_SetIFOptions | 0x08);	// 4Bit / 2 rows / 5x7
     250:	88 e2       	ldi	r24, 0x28	; 40
     252:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>

   lcd_command(CMD_SetDisplayAndCursor | 0x04); // Display on / Cursor off / no Blinking
     256:	8c e0       	ldi	r24, 0x0C	; 12
     258:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>

   lcd_command(CMD_SetEntryMode | 0x02);	// increment / no Scroll    
     25c:	86 e0       	ldi	r24, 0x06	; 6
     25e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
   lcd_clear();
     262:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
}
     266:	08 95       	ret

00000268 <lcd_string>:
#endif
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
     268:	ef 92       	push	r14
     26a:	ff 92       	push	r15
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	e8 2e       	mov	r14, r24
     272:	e7 01       	movw	r28, r14
     274:	7e 01       	movw	r14, r28
     276:	f9 2e       	mov	r15, r25
     278:	e7 01       	movw	r28, r14
    while(*data) {
     27a:	02 c0       	rjmp	.+4      	; 0x280 <lcd_string+0x18>
        lcd_data(*data);
     27c:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
    while(*data) {
     280:	89 91       	ld	r24, Y+
     282:	88 23       	and	r24, r24
     284:	d9 f7       	brne	.-10     	; 0x27c <lcd_string+0x14>
        lcd_data(*data);
        data++;
    }
}
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	ff 90       	pop	r15
     28c:	ef 90       	pop	r14
     28e:	08 95       	ret

00000290 <lcd_pgm_string>:

#ifdef use_lcd_pgm
//Load string from PGM  and send to LCD 
void lcd_pgm_string(const unsigned char *data) {
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = pgm_read_byte(data);
     296:	fe 01       	movw	r30, r28
     298:	84 91       	lpm	r24, Z+
      if((cc==0) || (cc==128)) {
     29a:	88 23       	and	r24, r24
     29c:	31 f0       	breq	.+12     	; 0x2aa <lcd_pgm_string+0x1a>
     29e:	80 38       	cpi	r24, 0x80	; 128
     2a0:	21 f0       	breq	.+8      	; 0x2aa <lcd_pgm_string+0x1a>
         return;
      }
      lcd_data(cc);
     2a2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
      data++;
     2a6:	21 96       	adiw	r28, 0x01	; 1
   }
     2a8:	f6 cf       	rjmp	.-20     	; 0x296 <lcd_pgm_string+0x6>
}
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	08 95       	ret

000002b0 <lcd_fix_string>:
#endif

//Load string from PGM or EEprom and send to LCD 
void lcd_fix_string(const unsigned char *data) {
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = MEM_read_byte(data);
     2b6:	ce 01       	movw	r24, r28
     2b8:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__eerd_byte_m168>
      if((cc==0) || (cc==128)) {
     2bc:	88 23       	and	r24, r24
     2be:	31 f0       	breq	.+12     	; 0x2cc <lcd_fix_string+0x1c>
     2c0:	80 38       	cpi	r24, 0x80	; 128
     2c2:	21 f0       	breq	.+8      	; 0x2cc <lcd_fix_string+0x1c>
         return;
      }
      lcd_data(cc);
     2c4:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
      data++;
     2c8:	21 96       	adiw	r28, 0x01	; 1
   }
     2ca:	f5 cf       	rjmp	.-22     	; 0x2b6 <lcd_fix_string+0x6>
}
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	08 95       	ret

000002d2 <lcd_fix_customchar>:

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
     2d2:	0f 93       	push	r16
     2d4:	1f 93       	push	r17
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	8c 01       	movw	r16, r24
     2dc:	c0 e0       	ldi	r28, 0x00	; 0
     2de:	d0 e0       	ldi	r29, 0x00	; 0
    for(uint8_t i=0;i<8;i++) {
        lcd_data(MEM_read_byte(chardata));
     2e0:	c8 01       	movw	r24, r16
     2e2:	8c 0f       	add	r24, r28
     2e4:	9d 1f       	adc	r25, r29
     2e6:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__eerd_byte_m168>
     2ea:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
     2ee:	21 96       	adiw	r28, 0x01	; 1
   }
}

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
    for(uint8_t i=0;i<8;i++) {
     2f0:	c8 30       	cpi	r28, 0x08	; 8
     2f2:	d1 05       	cpc	r29, r1
     2f4:	a9 f7       	brne	.-22     	; 0x2e0 <lcd_fix_customchar+0xe>
        lcd_data(MEM_read_byte(chardata));
        chardata++;
    }
}
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	1f 91       	pop	r17
     2fc:	0f 91       	pop	r16
     2fe:	08 95       	ret

00000300 <_lcd_hw_write>:
     300:	80 fd       	sbrc	r24, 0
     302:	5c 9a       	sbi	0x0b, 4	; 11
     304:	80 ff       	sbrs	r24, 0
     306:	5c 98       	cbi	0x0b, 4	; 11
     308:	54 9a       	sbi	0x0a, 4	; 10
     30a:	00 00       	nop
     30c:	5d 9a       	sbi	0x0b, 5	; 11
     30e:	55 9a       	sbi	0x0a, 5	; 10
     310:	58 98       	cbi	0x0b, 0	; 11
     312:	59 98       	cbi	0x0b, 1	; 11
     314:	5a 98       	cbi	0x0b, 2	; 11
     316:	5b 98       	cbi	0x0b, 3	; 11
     318:	64 fd       	sbrc	r22, 4
     31a:	58 9a       	sbi	0x0b, 0	; 11
     31c:	50 9a       	sbi	0x0a, 0	; 10
     31e:	65 fd       	sbrc	r22, 5
     320:	59 9a       	sbi	0x0b, 1	; 11
     322:	51 9a       	sbi	0x0a, 1	; 10
     324:	66 fd       	sbrc	r22, 6
     326:	5a 9a       	sbi	0x0b, 2	; 11
     328:	52 9a       	sbi	0x0a, 2	; 10
     32a:	67 fd       	sbrc	r22, 7
     32c:	5b 9a       	sbi	0x0b, 3	; 11
     32e:	53 9a       	sbi	0x0a, 3	; 10
     330:	00 00       	nop
     332:	5d 98       	cbi	0x0b, 5	; 11
     334:	0e 94 8d 14 	call	0x291a	; 0x291a <wait1us>
     338:	87 fd       	sbrc	r24, 7
     33a:	11 c0       	rjmp	.+34     	; 0x35e <_lcd_hw_write_exit>
     33c:	5d 9a       	sbi	0x0b, 5	; 11
     33e:	58 98       	cbi	0x0b, 0	; 11
     340:	59 98       	cbi	0x0b, 1	; 11
     342:	5a 98       	cbi	0x0b, 2	; 11
     344:	5b 98       	cbi	0x0b, 3	; 11
     346:	60 fd       	sbrc	r22, 0
     348:	58 9a       	sbi	0x0b, 0	; 11
     34a:	61 fd       	sbrc	r22, 1
     34c:	59 9a       	sbi	0x0b, 1	; 11
     34e:	62 fd       	sbrc	r22, 2
     350:	5a 9a       	sbi	0x0b, 2	; 11
     352:	63 fd       	sbrc	r22, 3
     354:	5b 9a       	sbi	0x0b, 3	; 11
     356:	00 00       	nop
     358:	5d 98       	cbi	0x0b, 5	; 11
     35a:	0e 94 8d 14 	call	0x291a	; 0x291a <wait1us>

0000035e <_lcd_hw_write_exit>:
     35e:	08 95       	ret

00000360 <__vector_7>:
#define MAIN_C
#include "Transistortester.h"

#ifndef INHIBIT_SLEEP_MODE
  // prepare sleep mode
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
     360:	18 95       	reti

00000362 <__vector_21>:
  EMPTY_INTERRUPT(ADC_vect);
     362:	18 95       	reti

00000364 <EntladePins>:
   R_DDR &= ~PinToCharge;	// switch back to input
   R_PORT &= ~PinToCharge;	// no Pull up
}

// first discharge any charge of capacitors
void EntladePins() {
     364:	af 92       	push	r10
     366:	bf 92       	push	r11
     368:	cf 92       	push	r12
     36a:	df 92       	push	r13
     36c:	ef 92       	push	r14
     36e:	ff 92       	push	r15
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	3a e0       	ldi	r19, 0x0A	; 10
     37a:	c3 2e       	mov	r12, r19
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     37c:	28 e0       	ldi	r18, 0x08	; 8
     37e:	d2 2e       	mov	r13, r18
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     R_PORT = 0;			// R-outputs auf 0
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     380:	9a e2       	ldi	r25, 0x2A	; 42
     382:	a9 2e       	mov	r10, r25
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     384:	85 e1       	ldi	r24, 0x15	; 21
     386:	b8 2e       	mov	r11, r24
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     388:	d7 b8       	out	0x07, r13	; 7
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     38a:	d8 b8       	out	0x08, r13	; 8
     R_PORT = 0;			// R-outputs auf 0
     38c:	15 b8       	out	0x05, r1	; 5
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     38e:	a4 b8       	out	0x04, r10	; 4
     adcmv[0] = W5msReadADC(PC0);	// which voltage has Pin 1?
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
     396:	8c 01       	movw	r16, r24
     adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
     39e:	ec 01       	movw	r28, r24
     adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     3a0:	82 e0       	ldi	r24, 0x02	; 2
     3a2:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
     if ((PartFound == PART_CELL) || (adcmv[0] < CAP_EMPTY_LEVEL) & (adcmv[1] < CAP_EMPTY_LEVEL) & (adcmv[2] < CAP_EMPTY_LEVEL)) {
     3a6:	20 91 07 01 	lds	r18, 0x0107
     3aa:	28 30       	cpi	r18, 0x08	; 8
     3ac:	c1 f0       	breq	.+48     	; 0x3de <EntladePins+0x7a>
     3ae:	41 e0       	ldi	r20, 0x01	; 1
     3b0:	c4 30       	cpi	r28, 0x04	; 4
     3b2:	d1 05       	cpc	r29, r1
     3b4:	08 f0       	brcs	.+2      	; 0x3b8 <EntladePins+0x54>
     3b6:	40 e0       	ldi	r20, 0x00	; 0
     3b8:	21 e0       	ldi	r18, 0x01	; 1
     3ba:	04 30       	cpi	r16, 0x04	; 4
     3bc:	11 05       	cpc	r17, r1
     3be:	08 f0       	brcs	.+2      	; 0x3c2 <EntladePins+0x5e>
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	42 23       	and	r20, r18
     3c4:	50 e0       	ldi	r21, 0x00	; 0
     3c6:	21 e0       	ldi	r18, 0x01	; 1
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	84 30       	cpi	r24, 0x04	; 4
     3cc:	91 05       	cpc	r25, r1
     3ce:	10 f0       	brcs	.+4      	; 0x3d4 <EntladePins+0x70>
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	24 23       	and	r18, r20
     3d6:	35 23       	and	r19, r21
     3d8:	21 15       	cp	r18, r1
     3da:	31 05       	cpc	r19, r1
     3dc:	21 f0       	breq	.+8      	; 0x3e6 <EntladePins+0x82>
        ADC_DDR = TXD_MSK;		// switch all ADC-Pins to input
     3de:	88 e0       	ldi	r24, 0x08	; 8
     3e0:	87 b9       	out	0x07, r24	; 7
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
     3e2:	14 b8       	out	0x04, r1	; 4
        return;			// all is discharged
     3e4:	4f c0       	rjmp	.+158    	; 0x484 <EntladePins+0x120>
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
     3e6:	23 e0       	ldi	r18, 0x03	; 3
     3e8:	08 3e       	cpi	r16, 0xE8	; 232
     3ea:	12 07       	cpc	r17, r18
     3ec:	10 f0       	brcs	.+4      	; 0x3f2 <EntladePins+0x8e>
  uint8_t lop_cnt;		// loop counter
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     3ee:	28 e0       	ldi	r18, 0x08	; 8
     3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <EntladePins+0x90>
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
        return;			// all is discharged
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
        adc_gnd |= (1<<PC0);	//Pin 1 directly to GND
     3f2:	29 e0       	ldi	r18, 0x09	; 9
     }
     if (adcmv[1] < 1000) {
     3f4:	33 e0       	ldi	r19, 0x03	; 3
     3f6:	c8 3e       	cpi	r28, 0xE8	; 232
     3f8:	d3 07       	cpc	r29, r19
     3fa:	08 f4       	brcc	.+2      	; 0x3fe <EntladePins+0x9a>
        adc_gnd |= (1<<PC1);	//Pin 2 directly to GND
     3fc:	22 60       	ori	r18, 0x02	; 2
     }
     if (adcmv[2] < 1000) {
     3fe:	33 e0       	ldi	r19, 0x03	; 3
     400:	88 3e       	cpi	r24, 0xE8	; 232
     402:	93 07       	cpc	r25, r19
     404:	08 f4       	brcc	.+2      	; 0x408 <EntladePins+0xa4>
        adc_gnd |= (1<<PC2);	//Pin 3 directly to  GND
     406:	24 60       	ori	r18, 0x04	; 4
     }
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time
     408:	27 b9       	out	0x07, r18	; 7

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     40a:	b4 b8       	out	0x04, r11	; 4
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     40c:	c0 e0       	ldi	r28, 0x00	; 0
     40e:	d0 e0       	ldi	r29, 0x00	; 0
        wdt_reset();
     410:	a8 95       	wdr
        adcmv[0] = W20msReadADC(PC0);	// which voltage has Pin 1?
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	0e 94 c6 1a 	call	0x358c	; 0x358c <W20msReadADC>
     418:	7c 01       	movw	r14, r24
        adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
     420:	8c 01       	movw	r16, r24
        adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     422:	82 e0       	ldi	r24, 0x02	; 2
     424:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
        if (adcmv[0] < 1300) {
     428:	24 e1       	ldi	r18, 0x14	; 20
     42a:	e2 16       	cp	r14, r18
     42c:	25 e0       	ldi	r18, 0x05	; 5
     42e:	f2 06       	cpc	r15, r18
     430:	08 f4       	brcc	.+2      	; 0x434 <EntladePins+0xd0>
           ADC_DDR |= (1<<PC0);	// below 1.3V , switch directly with ADC-Port to GND
     432:	38 9a       	sbi	0x07, 0	; 7
        }
        if (adcmv[1] < 1300) {
     434:	35 e0       	ldi	r19, 0x05	; 5
     436:	04 31       	cpi	r16, 0x14	; 20
     438:	13 07       	cpc	r17, r19
     43a:	08 f4       	brcc	.+2      	; 0x43e <EntladePins+0xda>
           ADC_DDR |= (1<<PC1);	// below 1.3V, switch directly with ADC-Port to GND
     43c:	39 9a       	sbi	0x07, 1	; 7
        }
        if (adcmv[2] < 1300) {
     43e:	25 e0       	ldi	r18, 0x05	; 5
     440:	84 31       	cpi	r24, 0x14	; 20
     442:	92 07       	cpc	r25, r18
     444:	08 f4       	brcc	.+2      	; 0x448 <EntladePins+0xe4>
           ADC_DDR |= (1<<PC2);	// below 1.3V, switch directly with ADC-Port to GND
     446:	3a 9a       	sbi	0x07, 2	; 7
        }
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
     448:	36 e0       	ldi	r19, 0x06	; 6
     44a:	e3 16       	cp	r14, r19
     44c:	f1 04       	cpc	r15, r1
     44e:	30 f4       	brcc	.+12     	; 0x45c <EntladePins+0xf8>
     450:	06 30       	cpi	r16, 0x06	; 6
     452:	11 05       	cpc	r17, r1
     454:	18 f4       	brcc	.+6      	; 0x45c <EntladePins+0xf8>
     456:	86 30       	cpi	r24, 0x06	; 6
     458:	91 05       	cpc	r25, r1
     45a:	38 f0       	brcs	.+14     	; 0x46a <EntladePins+0x106>

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     45c:	21 96       	adiw	r28, 0x01	; 1
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	c4 3f       	cpi	r28, 0xF4	; 244
     462:	d8 07       	cpc	r29, r24
     464:	a9 f6       	brne	.-86     	; 0x410 <EntladePins+0xac>
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
           break;
        }
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
     466:	d0 92 07 01 	sts	0x0107, r13

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     46a:	00 e0       	ldi	r16, 0x00	; 0
     46c:	10 e0       	ldi	r17, 0x00	; 0
     46e:	04 c0       	rjmp	.+8      	; 0x478 <EntladePins+0x114>
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     470:	0e 94 7e 14 	call	0x28fc	; 0x28fc <wait1ms>
     474:	0f 5f       	subi	r16, 0xFF	; 255
     476:	1f 4f       	sbci	r17, 0xFF	; 255
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
     478:	0c 17       	cp	r16, r28
     47a:	1d 07       	cpc	r17, r29
     47c:	c8 f3       	brcs	.-14     	; 0x470 <EntladePins+0x10c>
     47e:	ca 94       	dec	r12
  unsigned int clr_cnt;		// Clear Counter
  uint8_t lop_cnt;		// loop counter
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     480:	09 f0       	breq	.+2      	; 0x484 <EntladePins+0x120>
     482:	82 cf       	rjmp	.-252    	; 0x388 <EntladePins+0x24>
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     }
  } // end for lop_cnt
 }
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	0f 91       	pop	r16
     48c:	ff 90       	pop	r15
     48e:	ef 90       	pop	r14
     490:	df 90       	pop	r13
     492:	cf 90       	pop	r12
     494:	bf 90       	pop	r11
     496:	af 90       	pop	r10
     498:	08 95       	ret

0000049a <RefVoltage>:
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;

  #ifdef AUTO_CAL
  referenz = ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset));
     49a:	87 ec       	ldi	r24, 0xC7	; 199
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <__eerd_word_m168>
     4a2:	20 91 44 01 	lds	r18, 0x0144
     4a6:	30 91 45 01 	lds	r19, 0x0145
     4aa:	28 0f       	add	r18, r24
     4ac:	39 1f       	adc	r19, r25
  #else
  referenz = ref_mv + REF_C_KORR;
  #endif
  if (referenz >= Ref_Tab_Beginn) {
     4ae:	83 e0       	ldi	r24, 0x03	; 3
     4b0:	28 3e       	cpi	r18, 0xE8	; 232
     4b2:	38 07       	cpc	r19, r24
     4b4:	20 f0       	brcs	.+8      	; 0x4be <RefVoltage+0x24>
     referenz -= Ref_Tab_Beginn;
     4b6:	c9 01       	movw	r24, r18
     4b8:	88 5e       	subi	r24, 0xE8	; 232
     4ba:	93 40       	sbci	r25, 0x03	; 3
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <RefVoltage+0x28>
  } else  {
     referenz = 0;		// limit to begin of table
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = referenz / Ref_Tab_Abstand;
     4c2:	62 e3       	ldi	r22, 0x32	; 50
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__udivmodhi4>
  tabres = Ref_Tab_Abstand-tabres;
  if (tabind > 7) {
     tabind = 7;		// limit to end of table
  }
  // interpolate the table of factors
  y1 = pgm_read_word(&RHtab[tabind]);
     4ca:	68 30       	cpi	r22, 0x08	; 8
     4cc:	08 f0       	brcs	.+2      	; 0x4d0 <RefVoltage+0x36>
     4ce:	67 e0       	ldi	r22, 0x07	; 7
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	fb 01       	movw	r30, r22
     4d4:	ee 0f       	add	r30, r30
     4d6:	ff 1f       	adc	r31, r31
     4d8:	ea 53       	subi	r30, 0x3A	; 58
     4da:	ff 4f       	sbci	r31, 0xFF	; 255
     4dc:	45 91       	lpm	r20, Z+
     4de:	54 91       	lpm	r21, Z+
  y2 = pgm_read_word(&RHtab[tabind+1]);
     4e0:	fb 01       	movw	r30, r22
     4e2:	ee 0f       	add	r30, r30
     4e4:	ff 1f       	adc	r31, r31
     4e6:	e8 53       	subi	r30, 0x38	; 56
     4e8:	ff 4f       	sbci	r31, 0xFF	; 255
     4ea:	25 91       	lpm	r18, Z+
     4ec:	34 91       	lpm	r19, Z+
  } else  {
     referenz = 0;		// limit to begin of table
  }
  tabind = referenz / Ref_Tab_Abstand;
  tabres = referenz % Ref_Tab_Abstand;
  tabres = Ref_Tab_Abstand-tabres;
     4ee:	62 e3       	ldi	r22, 0x32	; 50
     4f0:	68 1b       	sub	r22, r24
  }
  // interpolate the table of factors
  y1 = pgm_read_word(&RHtab[tabind]);
  y2 = pgm_read_word(&RHtab[tabind+1]);
  // RHmultip is the interpolated factor to compute capacity from load time with 470k
  RHmultip = ((y1 - y2) * tabres + (Ref_Tab_Abstand/2)) / Ref_Tab_Abstand + y2;
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	42 1b       	sub	r20, r18
     4f6:	53 0b       	sbc	r21, r19
     4f8:	64 9f       	mul	r22, r20
     4fa:	c0 01       	movw	r24, r0
     4fc:	65 9f       	mul	r22, r21
     4fe:	90 0d       	add	r25, r0
     500:	74 9f       	mul	r23, r20
     502:	90 0d       	add	r25, r0
     504:	11 24       	eor	r1, r1
     506:	49 96       	adiw	r24, 0x19	; 25
     508:	62 e3       	ldi	r22, 0x32	; 50
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__udivmodhi4>
     510:	62 0f       	add	r22, r18
     512:	73 1f       	adc	r23, r19
     514:	70 93 01 01 	sts	0x0101, r23
     518:	60 93 00 01 	sts	0x0100, r22
 }
     51c:	08 95       	ret

0000051e <lcd_clear_line>:
#endif

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
     51e:	1f 93       	push	r17
     520:	14 e1       	ldi	r17, 0x14	; 20
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    lcd_space();
     522:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
     526:	11 50       	subi	r17, 0x01	; 1

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
     528:	e1 f7       	brne	.-8      	; 0x522 <lcd_clear_line+0x4>
    lcd_space();
 }
}
     52a:	1f 91       	pop	r17
     52c:	08 95       	ret

0000052e <DisplayValue>:
 *    e.g: p = 10^-12 -> -12
 *  - unit character (0 = none)
 *  digits = 2, 3 or 4
 */
void DisplayValue(unsigned long Value, int8_t Exponent, unsigned char Unit, unsigned char digits)
{
     52e:	2f 92       	push	r2
     530:	3f 92       	push	r3
     532:	4f 92       	push	r4
     534:	5f 92       	push	r5
     536:	7f 92       	push	r7
     538:	8f 92       	push	r8
     53a:	9f 92       	push	r9
     53c:	af 92       	push	r10
     53e:	bf 92       	push	r11
     540:	cf 92       	push	r12
     542:	df 92       	push	r13
     544:	ef 92       	push	r14
     546:	ff 92       	push	r15
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
     54c:	df 93       	push	r29
     54e:	cf 93       	push	r28
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
     554:	2f 97       	sbiw	r28, 0x0f	; 15
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	f8 94       	cli
     55a:	de bf       	out	0x3e, r29	; 62
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	cd bf       	out	0x3d, r28	; 61
     560:	6b 01       	movw	r12, r22
     562:	7c 01       	movw	r14, r24
     564:	14 2f       	mov	r17, r20
     566:	72 2e       	mov	r7, r18
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
     568:	03 30       	cpi	r16, 0x03	; 3
     56a:	29 f0       	breq	.+10     	; 0x576 <DisplayValue+0x48>
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
     56c:	04 30       	cpi	r16, 0x04	; 4
     56e:	31 f0       	breq	.+12     	; 0x57c <DisplayValue+0x4e>
  uint8_t           Offset;		/* exponent of offset to next 10^3 step */
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
     570:	84 e6       	ldi	r24, 0x64	; 100
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	14 c0       	rjmp	.+40     	; 0x59e <DisplayValue+0x70>
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
     576:	88 ee       	ldi	r24, 0xE8	; 232
     578:	93 e0       	ldi	r25, 0x03	; 3
     57a:	11 c0       	rjmp	.+34     	; 0x59e <DisplayValue+0x70>
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
     57c:	80 e1       	ldi	r24, 0x10	; 16
     57e:	97 e2       	ldi	r25, 0x27	; 39
     580:	0e c0       	rjmp	.+28     	; 0x59e <DisplayValue+0x70>
  while (Value >= Limit)
  {
    Value += 5;				/* for automatic rounding */
     582:	c7 01       	movw	r24, r14
     584:	b6 01       	movw	r22, r12
     586:	6b 5f       	subi	r22, 0xFB	; 251
     588:	7f 4f       	sbci	r23, 0xFF	; 255
     58a:	8f 4f       	sbci	r24, 0xFF	; 255
     58c:	9f 4f       	sbci	r25, 0xFF	; 255
    Value = Value / 10;			/* scale down by 10^1 */
     58e:	a5 01       	movw	r20, r10
     590:	94 01       	movw	r18, r8
     592:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
     596:	69 01       	movw	r12, r18
     598:	7a 01       	movw	r14, r20
    Exponent++;				/* increase exponent by 1 */
     59a:	1f 5f       	subi	r17, 0xFF	; 255
     59c:	08 c0       	rjmp	.+16     	; 0x5ae <DisplayValue+0x80>


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
  while (Value >= Limit)
     59e:	1c 01       	movw	r2, r24
     5a0:	44 24       	eor	r4, r4
     5a2:	55 24       	eor	r5, r5
  {
    Value += 5;				/* for automatic rounding */
    Value = Value / 10;			/* scale down by 10^1 */
     5a4:	ba e0       	ldi	r27, 0x0A	; 10
     5a6:	8b 2e       	mov	r8, r27
     5a8:	91 2c       	mov	r9, r1
     5aa:	a1 2c       	mov	r10, r1
     5ac:	b1 2c       	mov	r11, r1


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
  while (Value >= Limit)
     5ae:	c2 14       	cp	r12, r2
     5b0:	d3 04       	cpc	r13, r3
     5b2:	e4 04       	cpc	r14, r4
     5b4:	f5 04       	cpc	r15, r5
     5b6:	28 f7       	brcc	.-54     	; 0x582 <DisplayValue+0x54>


  /*
   *  determine prefix
   */
  Length = Exponent + 12;
     5b8:	81 2f       	mov	r24, r17
     5ba:	84 5f       	subi	r24, 0xF4	; 244
  if ((int8_t)Length <  0) Length = 0;		/* Limit to minimum prefix */
     5bc:	87 fd       	sbrc	r24, 7
     5be:	03 c0       	rjmp	.+6      	; 0x5c6 <DisplayValue+0x98>
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
     5c0:	83 31       	cpi	r24, 0x13	; 19
     5c2:	18 f4       	brcc	.+6      	; 0x5ca <DisplayValue+0x9c>
     5c4:	03 c0       	rjmp	.+6      	; 0x5cc <DisplayValue+0x9e>

  /*
   *  determine prefix
   */
  Length = Exponent + 12;
  if ((int8_t)Length <  0) Length = 0;		/* Limit to minimum prefix */
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	01 c0       	rjmp	.+2      	; 0x5cc <DisplayValue+0x9e>
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
     5ca:	82 e1       	ldi	r24, 0x12	; 18
  Index = Length / 3;
     5cc:	23 e0       	ldi	r18, 0x03	; 3
  Offset = Length % 3;
     5ce:	62 2f       	mov	r22, r18
     5d0:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <__udivmodqi4>
     5d4:	19 2f       	mov	r17, r25
  if (Offset > 0)
     5d6:	99 23       	and	r25, r25
     5d8:	19 f0       	breq	.+6      	; 0x5e0 <DisplayValue+0xb2>
    {
      Index++;				/* adjust index for exponent offset, take next prefix */
     5da:	8f 5f       	subi	r24, 0xFF	; 255
      Offset = 3 - Offset;		/* reverse value (1 or 2) */
     5dc:	29 1b       	sub	r18, r25
     5de:	12 2f       	mov	r17, r18
    { /* use no nano */
      Index++;				/* use mikro instead of nano */
      Offset += 3;			/* can be 3,4 or 5 */
    }
#endif
  Prefix = MEM_read_byte((uint8_t *)(&PrefixTab[Index]));   /* look up prefix in table */
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	80 54       	subi	r24, 0x40	; 64
     5e4:	9e 4f       	sbci	r25, 0xFE	; 254
     5e6:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__eerd_byte_m168>
     5ea:	b8 2e       	mov	r11, r24
  /*
   *  display value
   */

  /* convert value into string */
  utoa((unsigned int)Value, OutBuffer, 10);
     5ec:	c6 01       	movw	r24, r12
     5ee:	6e 01       	movw	r12, r28
     5f0:	08 94       	sec
     5f2:	c1 1c       	adc	r12, r1
     5f4:	d1 1c       	adc	r13, r1
     5f6:	b6 01       	movw	r22, r12
     5f8:	4a e0       	ldi	r20, 0x0A	; 10
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <utoa>
  Length = strlen(OutBuffer);
     600:	f6 01       	movw	r30, r12
     602:	01 90       	ld	r0, Z+
     604:	00 20       	and	r0, r0
     606:	e9 f7       	brne	.-6      	; 0x602 <DisplayValue+0xd4>
     608:	31 97       	sbiw	r30, 0x01	; 1
     60a:	2e 2e       	mov	r2, r30
     60c:	2c 18       	sub	r2, r12

  /* position of dot */
  Exponent = Length - Offset;		/* calculate position */
     60e:	82 2c       	mov	r8, r2
     610:	81 1a       	sub	r8, r17

  if (Exponent <= 0)			/* we have to prepend "0." */
     612:	18 14       	cp	r1, r8
     614:	44 f0       	brlt	.+16     	; 0x626 <DisplayValue+0xf8>
  {
    /* 0: factor 10 / -1: factor 100 */
//    lcd_data('0');
    lcd_data('.');
     616:	8e e2       	ldi	r24, 0x2E	; 46
     618:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
      {
       lcd_data('0');	/* extra 0 for factor 10 */
       Exponent++;
      }
#else
    if (Exponent < 0) lcd_data('0');	/* extra 0 for factor 100 */
     61c:	88 20       	and	r8, r8
     61e:	19 f0       	breq	.+6      	; 0x626 <DisplayValue+0xf8>
     620:	80 e3       	ldi	r24, 0x30	; 48
     622:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
#endif
  }

  if (Offset == 0) Exponent = -1;	/* disable dot if not needed */
     626:	11 23       	and	r17, r17
     628:	11 f4       	brne	.+4      	; 0x62e <DisplayValue+0x100>
     62a:	88 24       	eor	r8, r8
     62c:	8a 94       	dec	r8
     62e:	6e 01       	movw	r12, r28
     630:	08 94       	sec
     632:	c1 1c       	adc	r12, r1
     634:	d1 1c       	adc	r13, r1
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     636:	00 e0       	ldi	r16, 0x00	; 0
     638:	10 e0       	ldi	r17, 0x00	; 0
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    Index++;				/* next one */
    if (Index == Exponent) {
     63a:	99 24       	eor	r9, r9
     63c:	87 fc       	sbrc	r8, 7
     63e:	90 94       	com	r9
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     640:	0d c0       	rjmp	.+26     	; 0x65c <DisplayValue+0x12e>
  {
    lcd_data(OutBuffer[Index]);		/* display char */
     642:	0f 5f       	subi	r16, 0xFF	; 255
     644:	1f 4f       	sbci	r17, 0xFF	; 255
     646:	f6 01       	movw	r30, r12
     648:	81 91       	ld	r24, Z+
     64a:	6f 01       	movw	r12, r30
     64c:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
    Index++;				/* next one */
    if (Index == Exponent) {
     650:	08 15       	cp	r16, r8
     652:	19 05       	cpc	r17, r9
     654:	19 f4       	brne	.+6      	; 0x65c <DisplayValue+0x12e>
      lcd_data('.');			/* display dot */
     656:	8e e2       	ldi	r24, 0x2E	; 46
     658:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     65c:	02 15       	cp	r16, r2
     65e:	88 f3       	brcs	.-30     	; 0x642 <DisplayValue+0x114>
      lcd_data('.');			/* display dot */
    }
  }

  /* display prefix and unit */
  if (Prefix != 0) lcd_data(Prefix);
     660:	bb 20       	and	r11, r11
     662:	19 f0       	breq	.+6      	; 0x66a <DisplayValue+0x13c>
     664:	8b 2d       	mov	r24, r11
     666:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
  if (Unit) lcd_data(Unit);
     66a:	77 20       	and	r7, r7
     66c:	19 f0       	breq	.+6      	; 0x674 <DisplayValue+0x146>
     66e:	87 2d       	mov	r24, r7
     670:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
}
     674:	2f 96       	adiw	r28, 0x0f	; 15
     676:	0f b6       	in	r0, 0x3f	; 63
     678:	f8 94       	cli
     67a:	de bf       	out	0x3e, r29	; 62
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	cd bf       	out	0x3d, r28	; 61
     680:	cf 91       	pop	r28
     682:	df 91       	pop	r29
     684:	1f 91       	pop	r17
     686:	0f 91       	pop	r16
     688:	ff 90       	pop	r15
     68a:	ef 90       	pop	r14
     68c:	df 90       	pop	r13
     68e:	cf 90       	pop	r12
     690:	bf 90       	pop	r11
     692:	af 90       	pop	r10
     694:	9f 90       	pop	r9
     696:	8f 90       	pop	r8
     698:	7f 90       	pop	r7
     69a:	5f 90       	pop	r5
     69c:	4f 90       	pop	r4
     69e:	3f 90       	pop	r3
     6a0:	2f 90       	pop	r2
     6a2:	08 95       	ret

000006a4 <RvalOut>:
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
      lcd_space();
   }
}

void RvalOut(uint8_t ii) {	
     6a4:	0f 93       	push	r16
   // output of resistor value
#if FLASHEND > 0x1fff
   uint16_t rr;
   if ((resis[ii].rx < 100) && (resis[0].lx == 0)) {
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	fc 01       	movw	r30, r24
     6aa:	ee 0f       	add	r30, r30
     6ac:	ff 1f       	adc	r31, r31
     6ae:	e8 0f       	add	r30, r24
     6b0:	f9 1f       	adc	r31, r25
     6b2:	ee 0f       	add	r30, r30
     6b4:	ff 1f       	adc	r31, r31
     6b6:	ee 0f       	add	r30, r30
     6b8:	ff 1f       	adc	r31, r31
     6ba:	e8 5e       	subi	r30, 0xE8	; 232
     6bc:	fe 4f       	sbci	r31, 0xFE	; 254
     6be:	60 81       	ld	r22, Z
     6c0:	71 81       	ldd	r23, Z+1	; 0x01
     6c2:	82 81       	ldd	r24, Z+2	; 0x02
     6c4:	93 81       	ldd	r25, Z+3	; 0x03
     6c6:	64 36       	cpi	r22, 0x64	; 100
     6c8:	71 05       	cpc	r23, r1
     6ca:	81 05       	cpc	r24, r1
     6cc:	91 05       	cpc	r25, r1
     6ce:	c0 f4       	brcc	.+48     	; 0x700 <RvalOut+0x5c>
     6d0:	20 91 1c 01 	lds	r18, 0x011C
     6d4:	30 91 1d 01 	lds	r19, 0x011D
     6d8:	40 91 1e 01 	lds	r20, 0x011E
     6dc:	50 91 1f 01 	lds	r21, 0x011F
     6e0:	21 15       	cp	r18, r1
     6e2:	31 05       	cpc	r19, r1
     6e4:	41 05       	cpc	r20, r1
     6e6:	51 05       	cpc	r21, r1
     6e8:	59 f4       	brne	.+22     	; 0x700 <RvalOut+0x5c>
      rr = GetESR(resis[ii].ra,resis[ii].rb);
     6ea:	81 85       	ldd	r24, Z+9	; 0x09
     6ec:	62 85       	ldd	r22, Z+10	; 0x0a
     6ee:	0e 94 38 1b 	call	0x3670	; 0x3670 <GetESR>
      DisplayValue(rr,-2,LCD_CHAR_OMEGA,3);
     6f2:	bc 01       	movw	r22, r24
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	4e ef       	ldi	r20, 0xFE	; 254
     6fa:	24 ef       	ldi	r18, 0xF4	; 244
     6fc:	03 e0       	ldi	r16, 0x03	; 3
     6fe:	03 c0       	rjmp	.+6      	; 0x706 <RvalOut+0x62>
   } else {
      DisplayValue(resis[ii].rx,-1,LCD_CHAR_OMEGA,4);
     700:	4f ef       	ldi	r20, 0xFF	; 255
     702:	24 ef       	ldi	r18, 0xF4	; 244
     704:	04 e0       	ldi	r16, 0x04	; 4
     706:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
   }
#else
   DisplayValue(resis[ii].rx,-1,LCD_CHAR_OMEGA,4);
#endif
   lcd_space();
     70a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
 }
     70e:	0f 91       	pop	r16
     710:	08 95       	ret

00000712 <mVAusgabe>:
   lcd_line2(); 				//2. row
   lcd_fix_string(Uf_str);			//"Uf="
   mVAusgabe(bcdnum >> 4);
   mVAusgabe(bcdnum & 0x0f);
}
void mVAusgabe(uint8_t nn) {
     712:	0f 93       	push	r16
   if (nn < 3) {
     714:	83 30       	cpi	r24, 0x03	; 3
     716:	98 f4       	brcc	.+38     	; 0x73e <mVAusgabe+0x2c>
      // Output in mV units
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
     718:	e8 2f       	mov	r30, r24
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	ee 0f       	add	r30, r30
     71e:	ff 1f       	adc	r31, r31
     720:	ee 0f       	add	r30, r30
     722:	ff 1f       	adc	r31, r31
     724:	e8 58       	subi	r30, 0x88	; 136
     726:	fe 4f       	sbci	r31, 0xFE	; 254
     728:	62 81       	ldd	r22, Z+2	; 0x02
     72a:	73 81       	ldd	r23, Z+3	; 0x03
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	4d ef       	ldi	r20, 0xFD	; 253
     732:	26 e5       	ldi	r18, 0x56	; 86
     734:	03 e0       	ldi	r16, 0x03	; 3
     736:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
      lcd_space();
     73a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
   }
}
     73e:	0f 91       	pop	r16
     740:	08 95       	ret

00000742 <UfAusgabe>:
// output of flux voltage for 1-2 diodes in row 2
// bcdnum = Numbers of both Diodes:
// higher 4 Bit  number of first Diode
// lower 4 Bit  number of second Diode (Structure diodes[nn])
// if number >= 3  no output is done
void UfAusgabe(uint8_t bcdnum) {
     742:	1f 93       	push	r17
     744:	18 2f       	mov	r17, r24

   lcd_line2(); 				//2. row
     746:	80 ec       	ldi	r24, 0xC0	; 192
     748:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
   lcd_fix_string(Uf_str);			//"Uf="
     74c:	8e e0       	ldi	r24, 0x0E	; 14
     74e:	91 e0       	ldi	r25, 0x01	; 1
     750:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
   mVAusgabe(bcdnum >> 4);
     754:	81 2f       	mov	r24, r17
     756:	82 95       	swap	r24
     758:	8f 70       	andi	r24, 0x0F	; 15
     75a:	0e 94 89 03 	call	0x712	; 0x712 <mVAusgabe>
   mVAusgabe(bcdnum & 0x0f);
     75e:	81 2f       	mov	r24, r17
     760:	8f 70       	andi	r24, 0x0F	; 15
     762:	0e 94 89 03 	call	0x712	; 0x712 <mVAusgabe>
}
     766:	1f 91       	pop	r17
     768:	08 95       	ret

0000076a <sleep_5ms>:
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
      pause = 0;
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     76a:	42 e0       	ldi	r20, 0x02	; 2
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     76c:	1c c0       	rjmp	.+56     	; 0x7a6 <sleep_5ms+0x3c>
  {
 #if 3000 > RESTART_DELAY_US
   if (pause > 1)
     76e:	82 30       	cpi	r24, 0x02	; 2
     770:	91 05       	cpc	r25, r1
     772:	18 f0       	brcs	.+6      	; 0x77a <sleep_5ms+0x10>
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
      pause -= 2;
     774:	02 97       	sbiw	r24, 0x02	; 2
  {
 #if 3000 > RESTART_DELAY_US
   if (pause > 1)
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
     776:	3e e3       	ldi	r19, 0x3E	; 62
     778:	03 c0       	rjmp	.+6      	; 0x780 <sleep_5ms+0x16>
      pause -= 2;
     } else {
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
     77a:	37 e1       	ldi	r19, 0x17	; 23
      pause = 0;
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	90 e0       	ldi	r25, 0x00	; 0
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
     780:	20 91 b2 00 	lds	r18, 0x00B2
     784:	23 0f       	add	r18, r19
     786:	20 93 b3 00 	sts	0x00B3, r18
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     78a:	40 93 70 00 	sts	0x0070, r20
   set_sleep_mode(SLEEP_MODE_PWR_SAVE);
     78e:	23 b7       	in	r18, 0x33	; 51
     790:	21 7f       	andi	r18, 0xF1	; 241
     792:	26 60       	ori	r18, 0x06	; 6
     794:	23 bf       	out	0x33, r18	; 51
//   set_sleep_mode(SLEEP_MODE_IDLE);
   sleep_mode();
     796:	23 b7       	in	r18, 0x33	; 51
     798:	21 60       	ori	r18, 0x01	; 1
     79a:	23 bf       	out	0x33, r18	; 51
     79c:	88 95       	sleep
     79e:	23 b7       	in	r18, 0x33	; 51
     7a0:	2e 7f       	andi	r18, 0xFE	; 254
     7a2:	23 bf       	out	0x33, r18	; 51
// wake up after output compare match interrupt
 #else
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
 #endif
   wdt_reset();
     7a4:	a8 95       	wdr
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     7a6:	00 97       	sbiw	r24, 0x00	; 0
     7a8:	11 f7       	brne	.-60     	; 0x76e <sleep_5ms+0x4>
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
 #endif
   wdt_reset();
  }
TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
     7aa:	10 92 70 00 	sts	0x0070, r1
}
     7ae:	08 95       	ret

000007b0 <ChargePin10ms>:
 }

//******************************************************************
#include "CheckPins.c"

void ChargePin10ms(uint8_t PinToCharge, uint8_t ChargeDirection) {
     7b0:	1f 93       	push	r17
     7b2:	18 2f       	mov	r17, r24
   //Will be used by discharge of MOSFET Gates or to load big capacities.
   //Parameters:
   //PinToCharge: specifies the pin as mask for R-Port
   //ChargeDirection: 0 = switch to GND (N-Kanal-FET), 1= switch to VCC(P-Kanal-FET)

   if(ChargeDirection&1) {
     7b4:	60 ff       	sbrs	r22, 0
     7b6:	03 c0       	rjmp	.+6      	; 0x7be <ChargePin10ms+0xe>
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
     7b8:	85 b1       	in	r24, 0x05	; 5
     7ba:	81 2b       	or	r24, r17
     7bc:	03 c0       	rjmp	.+6      	; 0x7c4 <ChargePin10ms+0x14>
   } else {
      R_PORT &= ~PinToCharge; // or 0 (GND)
     7be:	95 b1       	in	r25, 0x05	; 5
     7c0:	80 95       	com	r24
     7c2:	89 23       	and	r24, r25
     7c4:	85 b9       	out	0x05, r24	; 5
   }
   R_DDR |= PinToCharge;		//switch Pin to output, across R to GND or VCC
     7c6:	84 b1       	in	r24, 0x04	; 4
     7c8:	81 2b       	or	r24, r17
     7ca:	84 b9       	out	0x04, r24	; 4
   wait_about10ms();			// wait about 10ms
     7cc:	82 e0       	ldi	r24, 0x02	; 2
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
   // switch back Input, no current
   R_DDR &= ~PinToCharge;	// switch back to input
     7d4:	84 b1       	in	r24, 0x04	; 4
     7d6:	10 95       	com	r17
     7d8:	81 23       	and	r24, r17
     7da:	84 b9       	out	0x04, r24	; 4
   R_PORT &= ~PinToCharge;	// no Pull up
     7dc:	85 b1       	in	r24, 0x05	; 5
     7de:	81 23       	and	r24, r17
     7e0:	85 b9       	out	0x05, r24	; 5
}
     7e2:	1f 91       	pop	r17
     7e4:	08 95       	ret

000007e6 <CheckPins>:
//******************************************************************
void CheckPins(uint8_t HighPin, uint8_t LowPin, uint8_t TristatePin)
  {
     7e6:	2f 92       	push	r2
     7e8:	3f 92       	push	r3
     7ea:	4f 92       	push	r4
     7ec:	5f 92       	push	r5
     7ee:	6f 92       	push	r6
     7f0:	7f 92       	push	r7
     7f2:	8f 92       	push	r8
     7f4:	9f 92       	push	r9
     7f6:	af 92       	push	r10
     7f8:	bf 92       	push	r11
     7fa:	cf 92       	push	r12
     7fc:	df 92       	push	r13
     7fe:	ef 92       	push	r14
     800:	ff 92       	push	r15
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	df 93       	push	r29
     808:	cf 93       	push	r28
     80a:	cd b7       	in	r28, 0x3d	; 61
     80c:	de b7       	in	r29, 0x3e	; 62
     80e:	2e 97       	sbiw	r28, 0x0e	; 14
     810:	0f b6       	in	r0, 0x3f	; 63
     812:	f8 94       	cli
     814:	de bf       	out	0x3e, r29	; 62
     816:	0f be       	out	0x3f, r0	; 63
     818:	cd bf       	out	0x3d, r28	; 61
     81a:	18 2f       	mov	r17, r24
     81c:	76 2e       	mov	r7, r22
     81e:	49 83       	std	Y+1, r20	; 0x01
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
     820:	a8 95       	wdr
//  #define RR680MI resis680mi
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = pgm_read_byte(&PinRLtab[LowPin]);		// instruction for LowPin R_L
     822:	86 2f       	mov	r24, r22
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	fc 01       	movw	r30, r24
     828:	e6 5f       	subi	r30, 0xF6	; 246
     82a:	fe 4f       	sbci	r31, 0xFE	; 254
     82c:	24 91       	lpm	r18, Z+
     82e:	2b 83       	std	Y+3, r18	; 0x03
  LoPinRH = LoPinRL + LoPinRL;				// instruction for LowPin R_H
  TriPinRL = pgm_read_byte(&PinRLtab[TristatePin]);	// instruction for TristatePin R_L
     830:	e4 2f       	mov	r30, r20
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	e6 5f       	subi	r30, 0xF6	; 246
     836:	fe 4f       	sbci	r31, 0xFE	; 254
     838:	04 91       	lpm	r16, Z+
  TriPinRH = TriPinRL + TriPinRL;			// instruction for TristatePin R_H
     83a:	30 2f       	mov	r19, r16
     83c:	33 0f       	add	r19, r19
     83e:	3c 83       	std	Y+4, r19	; 0x04
  HiPinRL = pgm_read_byte(&PinRLtab[HighPin]);		// instruction for HighPin R_L
     840:	21 2f       	mov	r18, r17
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	f9 01       	movw	r30, r18
     846:	e6 5f       	subi	r30, 0xF6	; 246
     848:	fe 4f       	sbci	r31, 0xFE	; 254
     84a:	c4 90       	lpm	r12, Z+
  HiPinRH = HiPinRL + HiPinRL;				// instruction for HighPin R_H
     84c:	4c 2d       	mov	r20, r12
     84e:	44 0f       	add	r20, r20
     850:	4d 83       	std	Y+5, r20	; 0x05

  HiADCp = pgm_read_byte(&PinADCtab[HighPin]);		// instruction for ADC High-Pin 
     852:	23 5f       	subi	r18, 0xF3	; 243
     854:	3e 4f       	sbci	r19, 0xFE	; 254
     856:	f9 01       	movw	r30, r18
     858:	d4 90       	lpm	r13, Z+
  LoADCp = pgm_read_byte(&PinADCtab[LowPin]);		// instruction for ADC Low-Pin
     85a:	83 5f       	subi	r24, 0xF3	; 243
     85c:	9e 4f       	sbci	r25, 0xFE	; 254
     85e:	fc 01       	movw	r30, r24
     860:	f4 91       	lpm	r31, Z+
  HiADCm = HiADCp | TXD_MSK;
     862:	28 e0       	ldi	r18, 0x08	; 8
     864:	d2 2a       	or	r13, r18
  HiADCp |= TXD_VAL;
  LoADCm = LoADCp | TXD_MSK;
     866:	f8 60       	ori	r31, 0x08	; 8
     868:	fa 83       	std	Y+2, r31	; 0x02
  LoADCp |= TXD_VAL;

  //setting of Pins 
  R_PORT = 0;				//resistor-Port outputs to 0
     86a:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//Low-Pin to output and across R_L to GND
     86c:	3b 81       	ldd	r19, Y+3	; 0x03
     86e:	34 b9       	out	0x04, r19	; 4
  ADC_DDR = HiADCm;		//High-Pin to output
     870:	d7 b8       	out	0x07, r13	; 7
  ADC_PORT = HiADCp;		//High-Pin fix to Vcc
     872:	d8 b8       	out	0x08, r13	; 8
  //for some MOSFET the gate (TristatePin) must be discharged
  ChargePin10ms(TriPinRL,0);		//discharge for N-Kanal
     874:	80 2f       	mov	r24, r16
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <ChargePin10ms>
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin 
     87c:	87 2d       	mov	r24, r7
     87e:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
     882:	9f 83       	std	Y+7, r25	; 0x07
     884:	8e 83       	std	Y+6, r24	; 0x06
  if(adc.lp_otr >= 977) {		//no current now? 
     886:	43 e0       	ldi	r20, 0x03	; 3
     888:	81 3d       	cpi	r24, 0xD1	; 209
     88a:	94 07       	cpc	r25, r20
     88c:	48 f0       	brcs	.+18     	; 0x8a0 <CheckPins+0xba>
     ChargePin10ms(TriPinRL,1);	 	//else: discharge for P-channel (Gate to VCC)
     88e:	80 2f       	mov	r24, r16
     890:	61 e0       	ldi	r22, 0x01	; 1
     892:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <ChargePin10ms>
     adc.lp_otr = ReadADC(LowPin);	//read voltage of Low-Pin again
     896:	87 2d       	mov	r24, r7
     898:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
     89c:	9f 83       	std	Y+7, r25	; 0x07
     89e:	8e 83       	std	Y+6, r24	; 0x06
  lcd_clear_line();
  lcd_line2();
#endif

//  if(adc.lp_otr > 92) {  //there is some current without TristatePin current 
  if(adc.lp_otr > 455) {  //there is more than 650uA current without TristatePin current 
     8a0:	8e 81       	ldd	r24, Y+6	; 0x06
     8a2:	9f 81       	ldd	r25, Y+7	; 0x07
     8a4:	a1 e0       	ldi	r26, 0x01	; 1
     8a6:	88 3c       	cpi	r24, 0xC8	; 200
     8a8:	9a 07       	cpc	r25, r26
     8aa:	08 f4       	brcc	.+2      	; 0x8ae <CheckPins+0xc8>
     8ac:	b7 c0       	rjmp	.+366    	; 0xa1c <CheckPins+0x236>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test if N-JFET or if self-conducting N-MOSFET
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
     8ae:	8c 81       	ldd	r24, Y+4	; 0x04
     8b0:	bb 81       	ldd	r27, Y+3	; 0x03
     8b2:	8b 2b       	or	r24, r27
     8b4:	84 b9       	out	0x04, r24	; 4
     adc.lp1 = W20msReadADC(LowPin);	//measure voltage at the assumed Source 
     8b6:	87 2d       	mov	r24, r7
     8b8:	0e 94 c6 1a 	call	0x358c	; 0x358c <W20msReadADC>
     8bc:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     8be:	89 81       	ldd	r24, Y+1	; 0x01
     8c0:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
     8c4:	7c 01       	movw	r14, r24
     R_PORT = TriPinRH;			//switch R_H for Tristate-Pin (probably Gate) to VCC
     8c6:	ec 81       	ldd	r30, Y+4	; 0x04
     8c8:	e5 b9       	out	0x05, r30	; 5
     adc.lp2 = W20msReadADC(LowPin);	//measure voltage at the assumed Source again
     8ca:	87 2d       	mov	r24, r7
     8cc:	0e 94 c6 1a 	call	0x358c	; 0x358c <W20msReadADC>
     //If it is a self-conducting MOSFET or JFET, then must be: adc.lp2 > adc.lp1 
     if(adc.lp2>(adc.lp1+488)) {
     8d0:	95 01       	movw	r18, r10
     8d2:	28 51       	subi	r18, 0x18	; 24
     8d4:	3e 4f       	sbci	r19, 0xFE	; 254
     8d6:	28 17       	cp	r18, r24
     8d8:	39 07       	cpc	r19, r25
     8da:	08 f0       	brcs	.+2      	; 0x8de <CheckPins+0xf8>
     8dc:	46 c0       	rjmp	.+140    	; 0x96a <CheckPins+0x184>
        if (PartFound != PART_FET) {
     8de:	80 91 07 01 	lds	r24, 0x0107
     8e2:	83 30       	cpi	r24, 0x03	; 3
     8e4:	09 f4       	brne	.+2      	; 0x8e8 <CheckPins+0x102>
     8e6:	41 c0       	rjmp	.+130    	; 0x96a <CheckPins+0x184>
           //measure voltage at the  Gate, differ between MOSFET and JFET
           ADC_PORT = TXD_VAL;
     8e8:	88 e0       	ldi	r24, 0x08	; 8
     8ea:	88 b9       	out	0x08, r24	; 8
           ADC_DDR = LoADCm;	//Low-Pin fix to GND
     8ec:	fa 81       	ldd	r31, Y+2	; 0x02
     8ee:	f7 b9       	out	0x07, r31	; 7
           R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     8f0:	8c 81       	ldd	r24, Y+4	; 0x04
     8f2:	8c 29       	or	r24, r12
     8f4:	84 b9       	out	0x04, r24	; 4
           R_PORT = TriPinRH | HiPinRL;	//switch R_L for High-Pin to VCC
     8f6:	85 b9       	out	0x05, r24	; 5
           adc.lp2 = W20msReadADC(TristatePin); //read voltage of assumed Gate 
     8f8:	89 81       	ldd	r24, Y+1	; 0x01
     8fa:	0e 94 c6 1a 	call	0x358c	; 0x358c <W20msReadADC>
           if(adc.lp2>3911) {  //MOSFET
     8fe:	2f e0       	ldi	r18, 0x0F	; 15
     900:	88 34       	cpi	r24, 0x48	; 72
     902:	92 07       	cpc	r25, r18
     904:	28 f0       	brcs	.+10     	; 0x910 <CheckPins+0x12a>
              PartFound = PART_FET;	//N-Kanal-MOSFET
     906:	83 e0       	ldi	r24, 0x03	; 3
     908:	80 93 07 01 	sts	0x0107, r24
              PartMode = PART_MODE_N_D_MOS; //Depletion-MOSFET
     90c:	84 e0       	ldi	r24, 0x04	; 4
     90e:	04 c0       	rjmp	.+8      	; 0x918 <CheckPins+0x132>
           } else {  //JFET (pn-passage between Gate and Source is conducting )
              PartFound = PART_FET;	//N-Kanal-JFET
     910:	83 e0       	ldi	r24, 0x03	; 3
     912:	80 93 07 01 	sts	0x0107, r24
              PartMode = PART_MODE_N_JFET;
     916:	86 e0       	ldi	r24, 0x06	; 6
     918:	80 93 06 01 	sts	0x0106, r24
           lcd_data('N');
           lcd_data('J');
#endif
//         if ((PartReady == 0) || (adc.lp1 > trans.uBE[0])) 
//         there is no way to find out the right Source / Drain
           trans.uBE[0] = adc.lp1;
     91c:	b0 92 58 01 	sts	0x0158, r11
     920:	a0 92 57 01 	sts	0x0157, r10
           gthvoltage = adc.lp1 - adc.tp1;	//voltage GS (Source - Gate)
     924:	c5 01       	movw	r24, r10
     926:	8e 19       	sub	r24, r14
     928:	9f 09       	sbc	r25, r15
     92a:	90 93 60 01 	sts	0x0160, r25
     92e:	80 93 5f 01 	sts	0x015F, r24
           trans.uBE[1] = (unsigned int)(((unsigned long)adc.lp1 * 1000) / RR680MI); // Id 0.01mA
     932:	b5 01       	movw	r22, r10
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	28 ee       	ldi	r18, 0xE8	; 232
     93a:	33 e0       	ldi	r19, 0x03	; 3
     93c:	40 e0       	ldi	r20, 0x00	; 0
     93e:	50 e0       	ldi	r21, 0x00	; 0
     940:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
     944:	20 91 02 01 	lds	r18, 0x0102
     948:	30 91 03 01 	lds	r19, 0x0103
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
     954:	30 93 5a 01 	sts	0x015A, r19
     958:	20 93 59 01 	sts	0x0159, r18
           trans.b = TristatePin;		//save Pin numbers found for this FET
     95c:	39 81       	ldd	r19, Y+1	; 0x01
     95e:	30 93 5b 01 	sts	0x015B, r19
           trans.c = HighPin;
     962:	10 93 5c 01 	sts	0x015C, r17
           trans.e = LowPin;
     966:	70 92 5d 01 	sts	0x015D, r7
        }
     }

     ADC_PORT = TXD_VAL;		// direct outputs to GND
     96a:	88 e0       	ldi	r24, 0x08	; 8
     96c:	88 b9       	out	0x08, r24	; 8

     //Test, if P-JFET or if self-conducting P-MOSFET
     ADC_DDR = LoADCm;		//switch Low-Pin (assumed Drain) direct to GND,
     96e:	4a 81       	ldd	r20, Y+2	; 0x02
     970:	47 b9       	out	0x07, r20	; 7
				//R_H for Tristate-Pin (assumed Gate) is already switched to VCC
     R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     972:	8c 81       	ldd	r24, Y+4	; 0x04
     974:	8c 29       	or	r24, r12
     976:	84 b9       	out	0x04, r24	; 4
     R_PORT = TriPinRH | HiPinRL;	//High-Pin across R_L to Vcc
     978:	85 b9       	out	0x05, r24	; 5
     adc.hp1 = W20msReadADC(HighPin);	//measure voltage at assumed Source 
     97a:	81 2f       	mov	r24, r17
     97c:	0e 94 c6 1a 	call	0x358c	; 0x358c <W20msReadADC>
     980:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     982:	89 81       	ldd	r24, Y+1	; 0x01
     984:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
     988:	7c 01       	movw	r14, r24
     R_PORT = HiPinRL;			//switch R_H for Tristate-Pin (assumed Gate) to GND
     98a:	c5 b8       	out	0x05, r12	; 5
     adc.hp2 = W20msReadADC(HighPin);	//read voltage at assumed Source again
     98c:	81 2f       	mov	r24, r17
     98e:	0e 94 c6 1a 	call	0x358c	; 0x358c <W20msReadADC>
     //if it is a self-conducting P_MOSFET or P-JFET , then must be:  adc.hp1 > adc.hp2 
     if(adc.hp1>(adc.hp2+488)) {
     992:	88 51       	subi	r24, 0x18	; 24
     994:	9e 4f       	sbci	r25, 0xFE	; 254
     996:	8a 15       	cp	r24, r10
     998:	9b 05       	cpc	r25, r11
     99a:	08 f0       	brcs	.+2      	; 0x99e <CheckPins+0x1b8>
     99c:	3f c0       	rjmp	.+126    	; 0xa1c <CheckPins+0x236>
        if (PartFound != PART_FET) {
     99e:	80 91 07 01 	lds	r24, 0x0107
     9a2:	83 30       	cpi	r24, 0x03	; 3
     9a4:	d9 f1       	breq	.+118    	; 0xa1c <CheckPins+0x236>
           //read voltage at the Gate , to differ between MOSFET and JFET
           ADC_PORT = HiADCp;	//switch High-Pin directly to VCC
     9a6:	d8 b8       	out	0x08, r13	; 8
           ADC_DDR = HiADCm;	//switch High-Pin to output
     9a8:	d7 b8       	out	0x07, r13	; 7
           adc.tp2 = W20msReadADC(TristatePin); //read voltage at the assumed Gate 
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	0e 94 c6 1a 	call	0x358c	; 0x358c <W20msReadADC>
           if(adc.tp2<977) { 		//MOSFET
     9b0:	a3 e0       	ldi	r26, 0x03	; 3
     9b2:	81 3d       	cpi	r24, 0xD1	; 209
     9b4:	9a 07       	cpc	r25, r26
     9b6:	28 f4       	brcc	.+10     	; 0x9c2 <CheckPins+0x1dc>
              PartFound = PART_FET;	//P-Kanal-MOSFET
     9b8:	83 e0       	ldi	r24, 0x03	; 3
     9ba:	80 93 07 01 	sts	0x0107, r24
              PartMode = PART_MODE_P_D_MOS; //Depletion-MOSFET
     9be:	85 e0       	ldi	r24, 0x05	; 5
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <CheckPins+0x1e4>
           } else { 			//JFET (pn-passage between Gate and Source is conducting)
              PartFound = PART_FET;	//P-Kanal-JFET
     9c2:	83 e0       	ldi	r24, 0x03	; 3
     9c4:	80 93 07 01 	sts	0x0107, r24
              PartMode = PART_MODE_P_JFET;
     9c8:	87 e0       	ldi	r24, 0x07	; 7
     9ca:	80 93 06 01 	sts	0x0106, r24
           }
#if DebugOut == 5
           lcd_data('P');
           lcd_data('J');
#endif
           gthvoltage = adc.tp1 - adc.hp1;		//voltage GS (Gate - Source)
     9ce:	ea 18       	sub	r14, r10
     9d0:	fb 08       	sbc	r15, r11
     9d2:	f0 92 60 01 	sts	0x0160, r15
     9d6:	e0 92 5f 01 	sts	0x015F, r14
           trans.uBE[1] = (unsigned int)(((unsigned long)(ADCconfig.U_AVCC - adc.hp1) * 1000) / RR680PL); // Id 0.01mA
     9da:	60 91 40 01 	lds	r22, 0x0140
     9de:	70 91 41 01 	lds	r23, 0x0141
     9e2:	6a 19       	sub	r22, r10
     9e4:	7b 09       	sbc	r23, r11
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	28 ee       	ldi	r18, 0xE8	; 232
     9ec:	33 e0       	ldi	r19, 0x03	; 3
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
     9f6:	20 91 08 01 	lds	r18, 0x0108
     9fa:	30 91 09 01 	lds	r19, 0x0109
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e0       	ldi	r21, 0x00	; 0
     a02:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
     a06:	30 93 5a 01 	sts	0x015A, r19
     a0a:	20 93 59 01 	sts	0x0159, r18
           trans.b = TristatePin;		//save Pin numbers found for this FET
     a0e:	b9 81       	ldd	r27, Y+1	; 0x01
     a10:	b0 93 5b 01 	sts	0x015B, r27
           trans.c = LowPin;
     a14:	70 92 5c 01 	sts	0x015C, r7
           trans.e = HighPin;
     a18:	10 93 5d 01 	sts	0x015D, r17
  } // end component has current without TristatePin signal


#ifdef COMMON_COLLECTOR
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
     a1c:	88 e0       	ldi	r24, 0x08	; 8
     a1e:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;			// Collector direct to GND
     a20:	ea 81       	ldd	r30, Y+2	; 0x02
     a22:	e7 b9       	out	0x07, r30	; 7
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
     a24:	c5 b8       	out	0x05, r12	; 5
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
     a26:	fc 2d       	mov	r31, r12
     a28:	f0 2b       	or	r31, r16
     a2a:	f8 87       	std	Y+8, r31	; 0x08
     a2c:	f4 b9       	out	0x04, r31	; 4
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     a2e:	80 90 40 01 	lds	r8, 0x0140
     a32:	90 90 41 01 	lds	r9, 0x0141
     a36:	81 2f       	mov	r24, r17
     a38:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
     a3c:	5c 01       	movw	r10, r24
  adc.tp1 = ReadADC(TristatePin);	// voltage at the base resistor
     a3e:	89 81       	ldd	r24, Y+1	; 0x01
     a40:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
     a44:	7c 01       	movw	r14, r24

  if (adc.tp1 < 10) {
     a46:	8a 30       	cpi	r24, 0x0A	; 10
     a48:	91 05       	cpc	r25, r1
     a4a:	98 f5       	brcc	.+102    	; 0xab2 <CheckPins+0x2cc>
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
     a4c:	8c 81       	ldd	r24, Y+4	; 0x04
     a4e:	8c 29       	or	r24, r12
     a50:	84 b9       	out	0x04, r24	; 4
     adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);
     a52:	80 91 40 01 	lds	r24, 0x0140
     a56:	90 91 41 01 	lds	r25, 0x0141
     a5a:	9a 87       	std	Y+10, r25	; 0x0a
     a5c:	89 87       	std	Y+9, r24	; 0x09
     a5e:	81 2f       	mov	r24, r17
     a60:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
     a64:	a9 85       	ldd	r26, Y+9	; 0x09
     a66:	ba 85       	ldd	r27, Y+10	; 0x0a
     a68:	a8 1b       	sub	r26, r24
     a6a:	b9 0b       	sbc	r27, r25
     a6c:	ba 87       	std	Y+10, r27	; 0x0a
     a6e:	a9 87       	std	Y+9, r26	; 0x09
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
     a70:	89 81       	ldd	r24, Y+1	; 0x01
     a72:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
     a76:	7c 01       	movw	r14, r24
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     a78:	e9 85       	ldd	r30, Y+9	; 0x09
     a7a:	fa 85       	ldd	r31, Y+10	; 0x0a
     a7c:	4f 01       	movw	r8, r30
     a7e:	aa 24       	eor	r10, r10
     a80:	bb 24       	eor	r11, r11
     a82:	20 91 08 01 	lds	r18, 0x0108
     a86:	30 91 09 01 	lds	r19, 0x0109
     a8a:	40 e0       	ldi	r20, 0x00	; 0
     a8c:	50 e0       	ldi	r21, 0x00	; 0
     a8e:	60 e6       	ldi	r22, 0x60	; 96
     a90:	77 eb       	ldi	r23, 0xB7	; 183
     a92:	87 e4       	ldi	r24, 0x47	; 71
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
     a9a:	c5 01       	movw	r24, r10
     a9c:	b4 01       	movw	r22, r8
     a9e:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
     aa2:	97 01       	movw	r18, r14
     aa4:	40 e0       	ldi	r20, 0x00	; 0
     aa6:	50 e0       	ldi	r21, 0x00	; 0
  if (adc.tp1 < 10) {
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
     adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     aa8:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
     aac:	49 01       	movw	r8, r18
     aae:	5a 01       	movw	r10, r20
     ab0:	0e c0       	rjmp	.+28     	; 0xace <CheckPins+0x2e8>
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
  ADC_DDR = LoADCm;			// Collector direct to GND
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     ab2:	94 01       	movw	r18, r8
     ab4:	2a 19       	sub	r18, r10
     ab6:	3b 09       	sbc	r19, r11
     ab8:	3a 87       	std	Y+10, r19	; 0x0a
     aba:	29 87       	std	Y+9, r18	; 0x09
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
 #else
     c_hfe = ((adc.hp1 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp1/500);
 #endif
  } else {
     c_hfe = (unsigned long)((adc.hp1 - adc.tp1) / adc.tp1);
     abc:	c9 01       	movw	r24, r18
     abe:	8e 19       	sub	r24, r14
     ac0:	9f 09       	sbc	r25, r15
     ac2:	b7 01       	movw	r22, r14
     ac4:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__udivmodhi4>
     ac8:	4b 01       	movw	r8, r22
     aca:	aa 24       	eor	r10, r10
     acc:	bb 24       	eor	r11, r11
  }
#endif

  //set Pins again for circuit with common Emitter PNP
  R_DDR = LoPinRL;		//switch R_L port for Low-Pin to output (GND)
     ace:	3b 81       	ldd	r19, Y+3	; 0x03
     ad0:	34 b9       	out	0x04, r19	; 4
  R_PORT = 0;			//switch all resistor ports to GND
     ad2:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = HiADCm;		//switch High-Pin to output
     ad4:	d7 b8       	out	0x07, r13	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
     ad6:	d8 b8       	out	0x08, r13	; 8
  wait_about5ms();
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
  
  if(adc.lp_otr < 977) {
     ae0:	8e 81       	ldd	r24, Y+6	; 0x06
     ae2:	9f 81       	ldd	r25, Y+7	; 0x07
     ae4:	a3 e0       	ldi	r26, 0x03	; 3
     ae6:	81 3d       	cpi	r24, 0xD1	; 209
     ae8:	9a 07       	cpc	r25, r26
     aea:	08 f0       	brcs	.+2      	; 0xaee <CheckPins+0x308>
     aec:	17 c2       	rjmp	.+1070   	; 0xf1c <CheckPins+0x736>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test to PNP
     R_DDR = LoPinRL | TriPinRL;	//switch R_L port for Tristate-Pin to output (GND), for Test of PNP
     aee:	6b 80       	ldd	r6, Y+3	; 0x03
     af0:	60 2a       	or	r6, r16
     af2:	64 b8       	out	0x04, r6	; 4
     adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin
     af4:	87 2d       	mov	r24, r7
     af6:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
     if(adc.lp1 > 3422) {
     afa:	bd e0       	ldi	r27, 0x0D	; 13
     afc:	8f 35       	cpi	r24, 0x5F	; 95
     afe:	9b 07       	cpc	r25, r27
     b00:	08 f4       	brcc	.+2      	; 0xb04 <CheckPins+0x31e>
     b02:	99 c0       	rjmp	.+306    	; 0xc36 <CheckPins+0x450>
        //component has current => PNP-Transistor or equivalent
        //compute current amplification factor in both directions
        R_DDR = LoPinRL | TriPinRH;	//switch R_H port for Tristate-Pin (Base) to output (GND)
     b04:	2c 80       	ldd	r2, Y+4	; 0x04
     b06:	eb 81       	ldd	r30, Y+3	; 0x03
     b08:	2e 2a       	or	r2, r30
     b0a:	24 b8       	out	0x04, r2	; 4

        adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin (assumed Collector)
     b0c:	87 2d       	mov	r24, r7
     b0e:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
     b12:	2c 01       	movw	r4, r24
        adc.tp2 = ReadADC(TristatePin);	//measure voltage at TristatePin (Base) 
     b14:	89 81       	ldd	r24, Y+1	; 0x01
     b16:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
        //check, if Test is done before 
        if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     b1a:	60 91 07 01 	lds	r22, 0x0107
     b1e:	26 2f       	mov	r18, r22
     b20:	22 50       	subi	r18, 0x02	; 2
     b22:	22 30       	cpi	r18, 0x02	; 2
     b24:	18 f4       	brcc	.+6      	; 0xb2c <CheckPins+0x346>
           PartReady = 1;
     b26:	21 e0       	ldi	r18, 0x01	; 1
     b28:	20 93 04 01 	sts	0x0104, r18
        //current amplification factor for common  Collector (Emitter follower)
        // c_hFE = (Emitter current - Base current) / Base current
 #ifdef COMMON_EMITTER
        if (c_hfe > trans.hfe[PartReady]) {
 #endif
           trans.hfe[PartReady] = c_hfe;
     b2c:	20 91 04 01 	lds	r18, 0x0104
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	f9 01       	movw	r30, r18
     b34:	ee 0f       	add	r30, r30
     b36:	ff 1f       	adc	r31, r31
     b38:	ee 0f       	add	r30, r30
     b3a:	ff 1f       	adc	r31, r31
     b3c:	e1 5b       	subi	r30, 0xB1	; 177
     b3e:	fe 4f       	sbci	r31, 0xFE	; 254
     b40:	80 82       	st	Z, r8
     b42:	91 82       	std	Z+1, r9	; 0x01
     b44:	a2 82       	std	Z+2, r10	; 0x02
     b46:	b3 82       	std	Z+3, r11	; 0x03
           trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.hp1 - adc.tp1;	// Base Emitter Voltage common collector
     b48:	f9 01       	movw	r30, r18
     b4a:	ee 0f       	add	r30, r30
     b4c:	ff 1f       	adc	r31, r31
     b4e:	e9 5a       	subi	r30, 0xA9	; 169
     b50:	fe 4f       	sbci	r31, 0xFE	; 254
     b52:	40 91 40 01 	lds	r20, 0x0140
     b56:	50 91 41 01 	lds	r21, 0x0141
     b5a:	29 85       	ldd	r18, Y+9	; 0x09
     b5c:	3a 85       	ldd	r19, Y+10	; 0x0a
     b5e:	42 1b       	sub	r20, r18
     b60:	53 0b       	sbc	r21, r19
     b62:	4e 19       	sub	r20, r14
     b64:	5f 09       	sbc	r21, r15
     b66:	51 83       	std	Z+1, r21	; 0x01
     b68:	40 83       	st	Z, r20
        }
 #endif
#endif

 
        if(PartFound != PART_THYRISTOR) {
     b6a:	65 30       	cpi	r22, 0x05	; 5
     b6c:	09 f4       	brne	.+2      	; 0xb70 <CheckPins+0x38a>
     b6e:	63 c0       	rjmp	.+198    	; 0xc36 <CheckPins+0x450>
           if(adc.tp2 > 977) {
     b70:	33 e0       	ldi	r19, 0x03	; 3
     b72:	82 3d       	cpi	r24, 0xD2	; 210
     b74:	93 07       	cpc	r25, r19
     b76:	30 f0       	brcs	.+12     	; 0xb84 <CheckPins+0x39e>
              //PNP-Transistor is found (Base voltage moves to VCC)
              PartFound = PART_TRANSISTOR;
     b78:	82 e0       	ldi	r24, 0x02	; 2
     b7a:	80 93 07 01 	sts	0x0107, r24
              PartMode = PART_MODE_PNP;
     b7e:	80 93 06 01 	sts	0x0106, r24
     b82:	52 c0       	rjmp	.+164    	; 0xc28 <CheckPins+0x442>
           } else {
              if((adc.lp_otr < 97) && (adc.lp1 > 2000)) {
     b84:	8e 81       	ldd	r24, Y+6	; 0x06
     b86:	9f 81       	ldd	r25, Y+7	; 0x07
     b88:	81 36       	cpi	r24, 0x61	; 97
     b8a:	91 05       	cpc	r25, r1
     b8c:	08 f0       	brcs	.+2      	; 0xb90 <CheckPins+0x3aa>
     b8e:	4c c0       	rjmp	.+152    	; 0xc28 <CheckPins+0x442>
     b90:	91 ed       	ldi	r25, 0xD1	; 209
     b92:	49 16       	cp	r4, r25
     b94:	97 e0       	ldi	r25, 0x07	; 7
     b96:	59 06       	cpc	r5, r25
     b98:	08 f4       	brcc	.+2      	; 0xb9c <CheckPins+0x3b6>
     b9a:	46 c0       	rjmp	.+140    	; 0xc28 <CheckPins+0x442>
                 //is flow voltage low enough in the closed  state?
                 //(since D-Mode-FET would be by mistake detected as E-Mode )
        	 PartFound = PART_FET;		//P-Kanal-MOSFET is found (Basis/Gate moves not to VCC)
     b9c:	83 e0       	ldi	r24, 0x03	; 3
     b9e:	80 93 07 01 	sts	0x0107, r24
        	 PartMode = PART_MODE_P_E_MOS;
     ba2:	80 93 06 01 	sts	0x0106, r24
        	 //measure the Gate threshold voltage
                 //Switching of Drain is monitored with digital input
                 // Low level is specified up to 0.3 * VCC
                 // High level is specified above 0.6 * VCC
                 PinMSK = LoADCm & 7;
     ba6:	aa 80       	ldd	r10, Y+2	; 0x02
     ba8:	a7 e0       	ldi	r26, 0x07	; 7
     baa:	aa 22       	and	r10, r26
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
     bac:	89 81       	ldd	r24, Y+1	; 0x01
     bae:	80 64       	ori	r24, 0x40	; 64
     bb0:	80 93 7c 00 	sts	0x007C, r24
        	 gthvoltage = 1;			// round up ((1*4)/9)
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	90 93 60 01 	sts	0x0160, r25
     bbc:	80 93 5f 01 	sts	0x015F, r24
     bc0:	3b e0       	ldi	r19, 0x0B	; 11
     bc2:	e3 2e       	mov	r14, r19
        	 for(ii=0;ii<11;ii++) {
        	    wdt_reset();
     bc4:	a8 95       	wdr
        	    ChargePin10ms(TriPinRL,1);
     bc6:	80 2f       	mov	r24, r16
     bc8:	61 e0       	ldi	r22, 0x01	; 1
     bca:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <ChargePin10ms>
                    R_DDR = LoPinRL | TriPinRH;		//switch R_H for Tristate-Pin (Basis) to GND
     bce:	24 b8       	out	0x04, r2	; 4
        	    while (!(ADC_PIN&PinMSK));		// Wait, until the MOSFET switches and Drain moves to VCC
     bd0:	86 b1       	in	r24, 0x06	; 6
     bd2:	8a 21       	and	r24, r10
     bd4:	e9 f3       	breq	.-6      	; 0xbd0 <CheckPins+0x3ea>
                    			// 1 is detected with more than 2.5V (up to 2.57V) with tests of mega168 and mega328
        	    R_DDR = LoPinRL;
     bd6:	bb 81       	ldd	r27, Y+3	; 0x03
     bd8:	b4 b9       	out	0x04, r27	; 4
        	    ADCSRA |= (1<<ADSC);		// Start Conversion
     bda:	80 91 7a 00 	lds	r24, 0x007A
     bde:	80 64       	ori	r24, 0x40	; 64
     be0:	80 93 7a 00 	sts	0x007A, r24
        	    while (ADCSRA&(1<<ADSC));		// wait
     be4:	80 91 7a 00 	lds	r24, 0x007A
     be8:	86 fd       	sbrc	r24, 6
     bea:	fc cf       	rjmp	.-8      	; 0xbe4 <CheckPins+0x3fe>
      		    gthvoltage += (1023 - ADCW);	// Add Tristatepin-Voltage
     bec:	20 91 78 00 	lds	r18, 0x0078
     bf0:	30 91 79 00 	lds	r19, 0x0079
     bf4:	80 91 5f 01 	lds	r24, 0x015F
     bf8:	90 91 60 01 	lds	r25, 0x0160
     bfc:	81 50       	subi	r24, 0x01	; 1
     bfe:	9c 4f       	sbci	r25, 0xFC	; 252
     c00:	82 1b       	sub	r24, r18
     c02:	93 0b       	sbc	r25, r19
     c04:	90 93 60 01 	sts	0x0160, r25
     c08:	80 93 5f 01 	sts	0x015F, r24
     c0c:	ea 94       	dec	r14
                 // Low level is specified up to 0.3 * VCC
                 // High level is specified above 0.6 * VCC
                 PinMSK = LoADCm & 7;
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
        	 gthvoltage = 1;			// round up ((1*4)/9)
        	 for(ii=0;ii<11;ii++) {
     c0e:	d1 f6       	brne	.-76     	; 0xbc4 <CheckPins+0x3de>
        	    R_DDR = LoPinRL;
        	    ADCSRA |= (1<<ADSC);		// Start Conversion
        	    while (ADCSRA&(1<<ADSC));		// wait
      		    gthvoltage += (1023 - ADCW);	// Add Tristatepin-Voltage
                 }
                 gthvoltage *= 4;		// is equal to 44*ADCW
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
                 gthvoltage /= 9;		// gives resolution in mV
     c18:	69 e0       	ldi	r22, 0x09	; 9
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__udivmodhi4>
     c20:	70 93 60 01 	sts	0x0160, r23
     c24:	60 93 5f 01 	sts	0x015F, r22
              }
           }
           trans.b = TristatePin;
     c28:	e9 81       	ldd	r30, Y+1	; 0x01
     c2a:	e0 93 5b 01 	sts	0x015B, r30
           trans.c = LowPin;
     c2e:	70 92 5c 01 	sts	0x015C, r7
           trans.e = HighPin;
     c32:	10 93 5d 01 	sts	0x015D, r17
        }  // end if PartFound != PART_THYRISTOR
    } // end component has current => PNP

#ifdef COMMON_COLLECTOR
    // Low-Pin=RL- HighPin=VCC
    R_DDR = LoPinRL | TriPinRL;
     c36:	64 b8       	out	0x04, r6	; 4
    R_PORT = TriPinRL;			// TriPin=RL+  NPN with common Collector
     c38:	05 b9       	out	0x05, r16	; 5
    adc.lp1 = W5msReadADC(LowPin);	// voltage at Emitter resistor
     c3a:	87 2d       	mov	r24, r7
     c3c:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
     c40:	9a 87       	std	Y+10, r25	; 0x0a
     c42:	89 87       	std	Y+9, r24	; 0x09
    adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     c44:	e0 90 40 01 	lds	r14, 0x0140
     c48:	f0 90 41 01 	lds	r15, 0x0141
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
     c52:	e8 1a       	sub	r14, r24
     c54:	f9 0a       	sbc	r15, r25
    if (adc.tp1 < 10) {
     c56:	fa e0       	ldi	r31, 0x0A	; 10
     c58:	ef 16       	cp	r14, r31
     c5a:	f1 04       	cpc	r15, r1
     c5c:	88 f5       	brcc	.+98     	; 0xcc0 <CheckPins+0x4da>
       R_DDR = LoPinRL | TriPinRH;
     c5e:	8c 81       	ldd	r24, Y+4	; 0x04
     c60:	2b 81       	ldd	r18, Y+3	; 0x03
     c62:	82 2b       	or	r24, r18
     c64:	84 b9       	out	0x04, r24	; 4
       R_PORT = TriPinRH;		// Tripin=RH+
     c66:	3c 81       	ldd	r19, Y+4	; 0x04
     c68:	35 b9       	out	0x05, r19	; 5
       adc.lp1 = W5msReadADC(LowPin);
     c6a:	87 2d       	mov	r24, r7
     c6c:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
     c70:	9a 87       	std	Y+10, r25	; 0x0a
     c72:	89 87       	std	Y+9, r24	; 0x09
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     c74:	e0 90 40 01 	lds	r14, 0x0140
     c78:	f0 90 41 01 	lds	r15, 0x0141
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
     c7e:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
     c82:	e8 1a       	sub	r14, r24
     c84:	f9 0a       	sbc	r15, r25
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     c86:	89 85       	ldd	r24, Y+9	; 0x09
     c88:	9a 85       	ldd	r25, Y+10	; 0x0a
     c8a:	4c 01       	movw	r8, r24
     c8c:	aa 24       	eor	r10, r10
     c8e:	bb 24       	eor	r11, r11
     c90:	20 91 02 01 	lds	r18, 0x0102
     c94:	30 91 03 01 	lds	r19, 0x0103
     c98:	40 e0       	ldi	r20, 0x00	; 0
     c9a:	50 e0       	ldi	r21, 0x00	; 0
     c9c:	60 e6       	ldi	r22, 0x60	; 96
     c9e:	77 eb       	ldi	r23, 0xB7	; 183
     ca0:	87 e4       	ldi	r24, 0x47	; 71
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
     ca8:	c5 01       	movw	r24, r10
     caa:	b4 01       	movw	r22, r8
     cac:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
     cb0:	97 01       	movw	r18, r14
     cb2:	40 e0       	ldi	r20, 0x00	; 0
     cb4:	50 e0       	ldi	r21, 0x00	; 0
       R_DDR = LoPinRL | TriPinRH;
       R_PORT = TriPinRH;		// Tripin=RH+
       adc.lp1 = W5msReadADC(LowPin);
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     cb6:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
     cba:	19 01       	movw	r2, r18
     cbc:	2a 01       	movw	r4, r20
     cbe:	0a c0       	rjmp	.+20     	; 0xcd4 <CheckPins+0x4ee>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
 #else
       c_hfe = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
    } else {
       c_hfe = (adc.lp1 - adc.tp1) / adc.tp1;
     cc0:	89 85       	ldd	r24, Y+9	; 0x09
     cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     cc4:	8e 19       	sub	r24, r14
     cc6:	9f 09       	sbc	r25, r15
     cc8:	b7 01       	movw	r22, r14
     cca:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__udivmodhi4>
     cce:	1b 01       	movw	r2, r22
     cd0:	44 24       	eor	r4, r4
     cd2:	55 24       	eor	r5, r5
       lcd_string(utoa(adc.tp1,outval,10));
       wait_about1s();
#endif
#endif
    //Tristate (can be Base) to VCC, Test if NPN
    ADC_DDR = LoADCm;		//Low-Pin to output 0V
     cd4:	9a 81       	ldd	r25, Y+2	; 0x02
     cd6:	97 b9       	out	0x07, r25	; 7
    ADC_PORT = TXD_VAL;			//switch Low-Pin to GND
     cd8:	88 e0       	ldi	r24, 0x08	; 8
     cda:	88 b9       	out	0x08, r24	; 8
    R_DDR = TriPinRL | HiPinRL;		//RL port for High-Pin and Tristate-Pin to output
     cdc:	a8 85       	ldd	r26, Y+8	; 0x08
     cde:	a4 b9       	out	0x04, r26	; 4
    R_PORT = TriPinRL | HiPinRL;	//RL port for High-Pin and Tristate-Pin to Vcc
     ce0:	a5 b9       	out	0x05, r26	; 5
    adc.hp1 = W5msReadADC(HighPin);	//measure voltage at High-Pin  (Collector)
     ce2:	81 2f       	mov	r24, r17
     ce4:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
    if(adc.hp1 < 1600) {
     ce8:	b6 e0       	ldi	r27, 0x06	; 6
     cea:	80 34       	cpi	r24, 0x40	; 64
     cec:	9b 07       	cpc	r25, r27
     cee:	08 f0       	brcs	.+2      	; 0xcf2 <CheckPins+0x50c>
     cf0:	11 c1       	rjmp	.+546    	; 0xf14 <CheckPins+0x72e>
       lcd_data('N');
       lcd_testpin(HighPin);
       lcd_space();
       wait_about1s();
#endif
       if(PartReady==1) {
     cf2:	80 91 04 01 	lds	r24, 0x0104
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	09 f4       	brne	.+2      	; 0xcfc <CheckPins+0x516>
     cfa:	9e c1       	rjmp	.+828    	; 0x1038 <CheckPins+0x852>
          goto widmes;
       }

       //Test auf Thyristor:
       //Gate discharge
       ChargePin10ms(TriPinRL,0);	//Tristate-Pin (Gate) across R_L 10ms to GND
     cfc:	80 2f       	mov	r24, r16
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <ChargePin10ms>
       adc.hp3 = W5msReadADC(HighPin);	//read voltage at High-Pin (probably Anode) again
     d04:	81 2f       	mov	r24, r17
     d06:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
     d0a:	5c 01       	movw	r10, r24
					//current should still flow, if not,
					// no Thyristor or holding current to low 
		 	
       R_PORT = 0;			//switch R_L for High-Pin (probably Anode) to GND (turn off)
     d0c:	15 b8       	out	0x05, r1	; 5
       wait_about5ms();
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
       R_PORT = HiPinRL;		//switch R_L for High-Pin (probably Anode) again to VCC
     d16:	c5 b8       	out	0x05, r12	; 5
       adc.hp2 = W5msReadADC(HighPin);	//measure voltage at the High-Pin (probably Anode) again
     d18:	81 2f       	mov	r24, r17
     d1a:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
       if((adc.hp3 < 1600) && (adc.hp2 > 4400)) {
     d1e:	e0 e4       	ldi	r30, 0x40	; 64
     d20:	ae 16       	cp	r10, r30
     d22:	e6 e0       	ldi	r30, 0x06	; 6
     d24:	be 06       	cpc	r11, r30
     d26:	08 f0       	brcs	.+2      	; 0xd2a <CheckPins+0x544>
     d28:	47 c0       	rjmp	.+142    	; 0xdb8 <CheckPins+0x5d2>
     d2a:	f1 e1       	ldi	r31, 0x11	; 17
     d2c:	81 33       	cpi	r24, 0x31	; 49
     d2e:	9f 07       	cpc	r25, r31
     d30:	08 f4       	brcc	.+2      	; 0xd34 <CheckPins+0x54e>
     d32:	42 c0       	rjmp	.+132    	; 0xdb8 <CheckPins+0x5d2>
          //if the holding current was switched off the thyristor must be switched off too. 
          //if Thyristor was still swiched on, if gate was switched off => Thyristor
          PartFound = PART_THYRISTOR;
     d34:	85 e0       	ldi	r24, 0x05	; 5
     d36:	80 93 07 01 	sts	0x0107, r24
          //Test if Triac
          R_DDR = 0;
     d3a:	14 b8       	out	0x04, r1	; 4
          R_PORT = 0;
     d3c:	15 b8       	out	0x05, r1	; 5
          ADC_PORT = LoADCp;	//Low-Pin fix to VCC
     d3e:	2a 81       	ldd	r18, Y+2	; 0x02
     d40:	28 b9       	out	0x08, r18	; 8
          wait_about5ms();
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
          R_DDR = HiPinRL;		//switch R_L port HighPin to output (GND)
     d4a:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) > 244) {
     d4c:	81 2f       	mov	r24, r17
     d4e:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
     d52:	85 3f       	cpi	r24, 0xF5	; 245
     d54:	91 05       	cpc	r25, r1
     d56:	08 f0       	brcs	.+2      	; 0xd5a <CheckPins+0x574>
     d58:	d6 c0       	rjmp	.+428    	; 0xf06 <CheckPins+0x720>
             goto savenresult;		//measure voltage at the  High-Pin (probably A2); if too high:
                                	//component has current => kein Triac
          }
          R_DDR = HiPinRL | TriPinRL;	//switch R_L port for TristatePin (Gate) to output (GND) => Triac should be triggered 
     d5a:	38 85       	ldd	r19, Y+8	; 0x08
     d5c:	34 b9       	out	0x04, r19	; 4
          if(W5msReadADC(TristatePin) < 977) {
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
     d64:	43 e0       	ldi	r20, 0x03	; 3
     d66:	81 3d       	cpi	r24, 0xD1	; 209
     d68:	94 07       	cpc	r25, r20
     d6a:	08 f4       	brcc	.+2      	; 0xd6e <CheckPins+0x588>
     d6c:	cc c0       	rjmp	.+408    	; 0xf06 <CheckPins+0x720>
             goto savenresult; 		//measure voltage at the Tristate-Pin (probably Gate) ;
                              		// if to low, abort 
          }
          if(ReadADC(HighPin) < 733) {
     d6e:	81 2f       	mov	r24, r17
     d70:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
     d74:	a2 e0       	ldi	r26, 0x02	; 2
     d76:	8d 3d       	cpi	r24, 0xDD	; 221
     d78:	9a 07       	cpc	r25, r26
     d7a:	08 f4       	brcc	.+2      	; 0xd7e <CheckPins+0x598>
     d7c:	c4 c0       	rjmp	.+392    	; 0xf06 <CheckPins+0x720>
             goto savenresult; 		//component has no current => no Triac => abort
          }
          R_DDR = HiPinRL;		//TristatePin (Gate) to input 
     d7e:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) < 733) {
     d80:	81 2f       	mov	r24, r17
     d82:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
     d86:	b2 e0       	ldi	r27, 0x02	; 2
     d88:	8d 3d       	cpi	r24, 0xDD	; 221
     d8a:	9b 07       	cpc	r25, r27
     d8c:	08 f4       	brcc	.+2      	; 0xd90 <CheckPins+0x5aa>
     d8e:	bb c0       	rjmp	.+374    	; 0xf06 <CheckPins+0x720>
             goto savenresult; 		//component has no current without base current => no Triac => abort
          }
          R_PORT = HiPinRL;		//switch R_L port for HighPin to VCC => switch off holding current 
     d90:	c5 b8       	out	0x05, r12	; 5
          wait_about5ms();
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
          R_PORT = 0;			//switch R_L port for HighPin again to GND; Triac should now switched off
     d9a:	15 b8       	out	0x05, r1	; 5
          if(W5msReadADC(HighPin) > 244) {
     d9c:	81 2f       	mov	r24, r17
     d9e:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
     da2:	85 3f       	cpi	r24, 0xF5	; 245
     da4:	91 05       	cpc	r25, r1
     da6:	08 f0       	brcs	.+2      	; 0xdaa <CheckPins+0x5c4>
     da8:	ae c0       	rjmp	.+348    	; 0xf06 <CheckPins+0x720>
             goto savenresult;		//measure voltage at the High-Pin (probably A2) ;
                                	//if to high, component is not switched off => no Triac, abort
         }
         PartFound = PART_TRIAC;
     daa:	84 e0       	ldi	r24, 0x04	; 4
     dac:	80 93 07 01 	sts	0x0107, r24
         PartReady = 1;
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	80 93 04 01 	sts	0x0104, r24
         goto savenresult;
     db6:	a7 c0       	rjmp	.+334    	; 0xf06 <CheckPins+0x720>
        }
      //Test if NPN Transistor or MOSFET
      // ADC_DDR = LoADCm;	//Low-Pin to output 0V
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
     db8:	ac 80       	ldd	r10, Y+4	; 0x04
     dba:	ac 28       	or	r10, r12
     dbc:	a4 b8       	out	0x04, r10	; 4
      R_PORT = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to VCC
     dbe:	a5 b8       	out	0x05, r10	; 5
      wait_about50ms();
     dc0:	8a e0       	ldi	r24, 0x0A	; 10
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
      adc.hp2 = ADCconfig.U_AVCC - ReadADC(HighPin);	//measure the voltage at the collector resistor 
     dc8:	80 90 40 01 	lds	r8, 0x0140
     dcc:	90 90 41 01 	lds	r9, 0x0141
     dd0:	81 2f       	mov	r24, r17
     dd2:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
     dd6:	ac 01       	movw	r20, r24
      adc.tp2 = ADCconfig.U_AVCC - ReadADC(TristatePin);	//measure the voltage at the base resistor 
     dd8:	20 91 40 01 	lds	r18, 0x0140
     ddc:	30 91 41 01 	lds	r19, 0x0141
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	2e 87       	std	Y+14, r18	; 0x0e
     de4:	3b 87       	std	Y+11, r19	; 0x0b
     de6:	4c 87       	std	Y+12, r20	; 0x0c
     de8:	5d 87       	std	Y+13, r21	; 0x0d
     dea:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
     dee:	2e 85       	ldd	r18, Y+14	; 0x0e
     df0:	3b 85       	ldd	r19, Y+11	; 0x0b
     df2:	b9 01       	movw	r22, r18
     df4:	68 1b       	sub	r22, r24
     df6:	79 0b       	sbc	r23, r25
       lcd_space();
       lcd_data('T');
       lcd_data('P');
       lcd_string(utoa(adc.tp2,outval,10));
#endif
      if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     df8:	80 91 07 01 	lds	r24, 0x0107
     dfc:	82 50       	subi	r24, 0x02	; 2
     dfe:	4c 85       	ldd	r20, Y+12	; 0x0c
     e00:	5d 85       	ldd	r21, Y+13	; 0x0d
     e02:	82 30       	cpi	r24, 0x02	; 2
     e04:	18 f4       	brcc	.+6      	; 0xe0c <CheckPins+0x626>
         PartReady = 1;	//check, if test is already done once
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	80 93 04 01 	sts	0x0104, r24
       //compare current amplification factor for common Collector (Emitter follower)
       // hFE = (Emitterstrom - Basisstrom) / Basisstrom
 #ifdef COMMON_EMITTER
       if (c_hfe >  trans.hfe[PartReady]) {
 #endif
          trans.hfe[PartReady] = c_hfe;
     e0c:	80 91 04 01 	lds	r24, 0x0104
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	fc 01       	movw	r30, r24
     e14:	ee 0f       	add	r30, r30
     e16:	ff 1f       	adc	r31, r31
     e18:	ee 0f       	add	r30, r30
     e1a:	ff 1f       	adc	r31, r31
     e1c:	e1 5b       	subi	r30, 0xB1	; 177
     e1e:	fe 4f       	sbci	r31, 0xFE	; 254
     e20:	20 82       	st	Z, r2
     e22:	31 82       	std	Z+1, r3	; 0x01
     e24:	42 82       	std	Z+2, r4	; 0x02
     e26:	53 82       	std	Z+3, r5	; 0x03
          trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.lp1 - adc.tp1;
     e28:	fc 01       	movw	r30, r24
     e2a:	ee 0f       	add	r30, r30
     e2c:	ff 1f       	adc	r31, r31
     e2e:	e9 5a       	subi	r30, 0xA9	; 169
     e30:	fe 4f       	sbci	r31, 0xFE	; 254
     e32:	20 91 40 01 	lds	r18, 0x0140
     e36:	30 91 41 01 	lds	r19, 0x0141
     e3a:	89 85       	ldd	r24, Y+9	; 0x09
     e3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e3e:	28 1b       	sub	r18, r24
     e40:	39 0b       	sbc	r19, r25
     e42:	2e 19       	sub	r18, r14
     e44:	3f 09       	sbc	r19, r15
     e46:	31 83       	std	Z+1, r19	; 0x01
     e48:	20 83       	st	Z, r18
 #ifdef COMMON_EMITTER
       }
 #endif
#endif

      if(adc.tp2 > 2557) {		// Basis-voltage R_H is low enough
     e4a:	99 e0       	ldi	r25, 0x09	; 9
     e4c:	6e 3f       	cpi	r22, 0xFE	; 254
     e4e:	79 07       	cpc	r23, r25
     e50:	38 f0       	brcs	.+14     	; 0xe60 <CheckPins+0x67a>
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
     e52:	82 e0       	ldi	r24, 0x02	; 2
     e54:	80 93 07 01 	sts	0x0107, r24
         PartMode = PART_MODE_NPN;
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	80 93 06 01 	sts	0x0106, r24
     e5e:	53 c0       	rjmp	.+166    	; 0xf06 <CheckPins+0x720>
      } else { // Basis has low current
         if((adc.lp_otr < 97) && (adc.hp2 > 3400)) {
     e60:	ae 81       	ldd	r26, Y+6	; 0x06
     e62:	bf 81       	ldd	r27, Y+7	; 0x07
     e64:	a1 36       	cpi	r26, 0x61	; 97
     e66:	b1 05       	cpc	r27, r1
     e68:	08 f0       	brcs	.+2      	; 0xe6c <CheckPins+0x686>
     e6a:	4d c0       	rjmp	.+154    	; 0xf06 <CheckPins+0x720>
      //Test if NPN Transistor or MOSFET
      // ADC_DDR = LoADCm;	//Low-Pin to output 0V
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
      R_PORT = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to VCC
      wait_about50ms();
      adc.hp2 = ADCconfig.U_AVCC - ReadADC(HighPin);	//measure the voltage at the collector resistor 
     e6c:	84 1a       	sub	r8, r20
     e6e:	95 0a       	sbc	r9, r21

      if(adc.tp2 > 2557) {		// Basis-voltage R_H is low enough
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
         PartMode = PART_MODE_NPN;
      } else { // Basis has low current
         if((adc.lp_otr < 97) && (adc.hp2 > 3400)) {
     e70:	b9 e4       	ldi	r27, 0x49	; 73
     e72:	8b 16       	cp	r8, r27
     e74:	bd e0       	ldi	r27, 0x0D	; 13
     e76:	9b 06       	cpc	r9, r27
     e78:	08 f4       	brcc	.+2      	; 0xe7c <CheckPins+0x696>
     e7a:	45 c0       	rjmp	.+138    	; 0xf06 <CheckPins+0x720>
            //if flow voltage in switched off mode low enough?
            //(since D-Mode-FET will be detected in error as E-Mode )
            PartFound = PART_FET;	//N-Kanal-MOSFET is found (Basis/Gate will Not be pulled down)
     e7c:	83 e0       	ldi	r24, 0x03	; 3
     e7e:	80 93 07 01 	sts	0x0107, r24
            PartMode = PART_MODE_N_E_MOS;
     e82:	82 e0       	ldi	r24, 0x02	; 2
     e84:	80 93 06 01 	sts	0x0106, r24
            wait_about1s();
#endif
            //Switching of Drain is monitored with digital input
            // Low level is specified up to 0.3 * VCC
            // High level is specified above 0.6 * VCC
            PinMSK = HiADCm & 7;
     e88:	f7 e0       	ldi	r31, 0x07	; 7
     e8a:	ef 2e       	mov	r14, r31
     e8c:	ed 20       	and	r14, r13
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	80 64       	ori	r24, 0x40	; 64
     e92:	80 93 7c 00 	sts	0x007C, r24
            gthvoltage = 1;			// round up ((1*4)/9)
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	90 93 60 01 	sts	0x0160, r25
     e9e:	80 93 5f 01 	sts	0x015F, r24
     ea2:	eb e0       	ldi	r30, 0x0B	; 11
     ea4:	8e 2e       	mov	r8, r30
            for(ii=0;ii<11;ii++) {
            	wdt_reset();
     ea6:	a8 95       	wdr
            	ChargePin10ms(TriPinRL,0);	// discharge Gate 10ms with RL 
     ea8:	80 2f       	mov	r24, r16
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <ChargePin10ms>
                R_DDR = HiPinRL | TriPinRH;	// slowly charge Gate 
     eb0:	a4 b8       	out	0x04, r10	; 4
                R_PORT = HiPinRL | TriPinRH;
     eb2:	a5 b8       	out	0x05, r10	; 5
            	while ((ADC_PIN&PinMSK));	// Wait, until the MOSFET switch and Drain moved to low 
     eb4:	86 b1       	in	r24, 0x06	; 6
     eb6:	8e 21       	and	r24, r14
     eb8:	e9 f7       	brne	.-6      	; 0xeb4 <CheckPins+0x6ce>
                		// 0 is detected with input voltage of 2.12V to 2.24V (tested with mega168 & mega328)
                R_DDR = HiPinRL;		// switch off current
     eba:	c4 b8       	out	0x04, r12	; 4
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
     ebc:	80 91 7a 00 	lds	r24, 0x007A
     ec0:	80 64       	ori	r24, 0x40	; 64
     ec2:	80 93 7a 00 	sts	0x007A, r24
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
     ec6:	80 91 7a 00 	lds	r24, 0x007A
     eca:	86 fd       	sbrc	r24, 6
     ecc:	fc cf       	rjmp	.-8      	; 0xec6 <CheckPins+0x6e0>
            	gthvoltage += ADCW;		// add result of ADC
     ece:	80 91 78 00 	lds	r24, 0x0078
     ed2:	90 91 79 00 	lds	r25, 0x0079
     ed6:	20 91 5f 01 	lds	r18, 0x015F
     eda:	30 91 60 01 	lds	r19, 0x0160
     ede:	82 0f       	add	r24, r18
     ee0:	93 1f       	adc	r25, r19
     ee2:	90 93 60 01 	sts	0x0160, r25
     ee6:	80 93 5f 01 	sts	0x015F, r24
     eea:	8a 94       	dec	r8
            // High level is specified above 0.6 * VCC
            PinMSK = HiADCm & 7;
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
            gthvoltage = 1;			// round up ((1*4)/9)
            for(ii=0;ii<11;ii++) {
     eec:	e1 f6       	brne	.-72     	; 0xea6 <CheckPins+0x6c0>
                R_DDR = HiPinRL;		// switch off current
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
            	gthvoltage += ADCW;		// add result of ADC
            }
            gthvoltage *= 4;	//is equal to 44 * ADCW
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
            gthvoltage /= 9;	//scale to mV
     ef6:	69 e0       	ldi	r22, 0x09	; 9
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__udivmodhi4>
     efe:	70 93 60 01 	sts	0x0160, r23
     f02:	60 93 5f 01 	sts	0x015F, r22
         }
      }
savenresult:
      trans.b = TristatePin;	// save Pin-constellation
     f06:	e9 81       	ldd	r30, Y+1	; 0x01
     f08:	e0 93 5b 01 	sts	0x015B, r30
      trans.c = HighPin;
     f0c:	10 93 5c 01 	sts	0x015C, r17
      trans.e = LowPin;
     f10:	70 92 5d 01 	sts	0x015D, r7
   } // end component conduct => npn
   ADC_DDR = TXD_MSK;		// switch all ADC-Ports to input
     f14:	88 e0       	ldi	r24, 0x08	; 8
     f16:	87 b9       	out	0x07, r24	; 7
   ADC_PORT = TXD_VAL;		// switch all ADC-Ports to 0 (no Pull up)
     f18:	88 b9       	out	0x08, r24	; 8
   //Fertig
   //end das component has no connection between HighPin and LowPin
   goto widmes;
     f1a:	8e c0       	rjmp	.+284    	; 0x1038 <CheckPins+0x852>
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
     f1c:	88 e0       	ldi	r24, 0x08	; 8
     f1e:	88 b9       	out	0x08, r24	; 8
     f20:	68 ec       	ldi	r22, 0xC8	; 200
     f22:	e6 2e       	mov	r14, r22
  for (ii=0;ii<200;ii++) {
     ADC_DDR = LoADCm | HiADCm; // discharge by short of Low and High side
     f24:	aa 80       	ldd	r10, Y+2	; 0x02
     f26:	ad 28       	or	r10, r13
     f28:	a7 b8       	out	0x07, r10	; 7
     wait_about5ms();		// Low and Highpin to GND for discharge
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
     ADC_DDR = LoADCm;		// switch only Low-Pin fix to GND
     f32:	fa 81       	ldd	r31, Y+2	; 0x02
     f34:	f7 b9       	out	0x07, r31	; 7
     adc.hp1 = ReadADC(HighPin); // read voltage at High-Pin
     f36:	81 2f       	mov	r24, r17
     f38:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
     if (adc.hp1 < (150/8)) break;
     f3c:	82 31       	cpi	r24, 0x12	; 18
     f3e:	91 05       	cpc	r25, r1
     f40:	10 f0       	brcs	.+4      	; 0xf46 <CheckPins+0x760>
     f42:	ea 94       	dec	r14
   goto widmes;
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
  for (ii=0;ii<200;ii++) {
     f44:	89 f7       	brne	.-30     	; 0xf28 <CheckPins+0x742>
  }
#else
  /* check first with low current (R_H=470k) */
  /* With this method the diode can be better differed from a capacitor, */
  /* but a parallel to a capacitor mounted diode can not be found. */
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
     f46:	2d 81       	ldd	r18, Y+5	; 0x05
     f48:	24 b9       	out	0x04, r18	; 4
  R_PORT = HiPinRH;
     f4a:	25 b9       	out	0x05, r18	; 5
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
     f4c:	80 2f       	mov	r24, r16
     f4e:	61 e0       	ldi	r22, 0x01	; 1
     f50:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <ChargePin10ms>
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
     f54:	81 2f       	mov	r24, r17
     f56:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
     f5a:	5c 01       	movw	r10, r24
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
     f5c:	80 2f       	mov	r24, r16
     f5e:	60 e0       	ldi	r22, 0x00	; 0
     f60:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <ChargePin10ms>
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
     f64:	81 2f       	mov	r24, r17
     f66:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
     f6a:	68 2e       	mov	r6, r24
     f6c:	89 2e       	mov	r8, r25

  /* check with higher current (R_L=680) */
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     f6e:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
     f70:	c5 b8       	out	0x05, r12	; 5
  adc.hp1 = W5msReadADC(HighPin) - ReadADC(LowPin);
     f72:	81 2f       	mov	r24, r17
     f74:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
     f78:	7c 01       	movw	r14, r24
     f7a:	87 2d       	mov	r24, r7
     f7c:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
     f80:	e8 1a       	sub	r14, r24
     f82:	f9 0a       	sbc	r15, r25
  ChargePin10ms(TriPinRL,1);	//discharge for N-Kanal-MOSFET gate
     f84:	80 2f       	mov	r24, r16
     f86:	61 e0       	ldi	r22, 0x01	; 1
     f88:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <ChargePin10ms>
  adc.lp_otr = W5msReadADC(HighPin) - ReadADC(LowPin);
     f8c:	81 2f       	mov	r24, r17
     f8e:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
     f92:	2c 01       	movw	r4, r24
     f94:	87 2d       	mov	r24, r7
     f96:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
     f9a:	48 1a       	sub	r4, r24
     f9c:	59 0a       	sbc	r5, r25

  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
     f9e:	3d 81       	ldd	r19, Y+5	; 0x05
     fa0:	34 b9       	out	0x04, r19	; 4
  R_PORT = HiPinRH;
     fa2:	35 b9       	out	0x05, r19	; 5
  if(adc.lp_otr > adc.hp1) {
     fa4:	e4 14       	cp	r14, r4
     fa6:	f5 04       	cpc	r15, r5
     fa8:	38 f0       	brcs	.+14     	; 0xfb8 <CheckPins+0x7d2>
      adc.hp1 = adc.lp_otr;	//the higher value wins
      adc.hp3 = adc.hp2;
  } else {
      ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
     faa:	80 2f       	mov	r24, r16
     fac:	60 e0       	ldi	r22, 0x00	; 0
     fae:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <ChargePin10ms>
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
  R_PORT = HiPinRH;
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
     fb2:	a6 2c       	mov	r10, r6
     fb4:	b8 2c       	mov	r11, r8
  R_PORT = HiPinRH;
  if(adc.lp_otr > adc.hp1) {
      adc.hp1 = adc.lp_otr;	//the higher value wins
      adc.hp3 = adc.hp2;
  } else {
      ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
     fb6:	27 01       	movw	r4, r14
  }
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
     fb8:	81 2f       	mov	r24, r17
     fba:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
#endif
  volt_dif = adc.hp3/8;
  if (volt_dif > 200) volt_dif = 200;

//  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp2 < adc.hp1) && (adc.hp1 > (adc.hp3+volt_dif)) && (adc.hp3 > adc.hp1/16)) {
     fbe:	92 01       	movw	r18, r4
     fc0:	27 59       	subi	r18, 0x97	; 151
     fc2:	30 40       	sbci	r19, 0x00	; 0
     fc4:	41 e1       	ldi	r20, 0x11	; 17
     fc6:	29 38       	cpi	r18, 0x89	; 137
     fc8:	34 07       	cpc	r19, r20
     fca:	b0 f5       	brcc	.+108    	; 0x1038 <CheckPins+0x852>
     fcc:	84 15       	cp	r24, r4
     fce:	95 05       	cpc	r25, r5
     fd0:	98 f5       	brcc	.+102    	; 0x1038 <CheckPins+0x852>
  lcd_data('H');
  lcd_string(utoa(adc.hp2,outval,10));
  lcd_space();
  wait_about1s();
#endif
  volt_dif = adc.hp3/8;
     fd2:	c5 01       	movw	r24, r10
     fd4:	53 e0       	ldi	r21, 0x03	; 3
     fd6:	96 95       	lsr	r25
     fd8:	87 95       	ror	r24
     fda:	5a 95       	dec	r21
     fdc:	e1 f7       	brne	.-8      	; 0xfd6 <CheckPins+0x7f0>
  if (volt_dif > 200) volt_dif = 200;

//  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp2 < adc.hp1) && (adc.hp1 > (adc.hp3+volt_dif)) && (adc.hp3 > adc.hp1/16)) {
     fde:	89 3c       	cpi	r24, 0xC9	; 201
     fe0:	91 05       	cpc	r25, r1
     fe2:	10 f0       	brcs	.+4      	; 0xfe8 <CheckPins+0x802>
     fe4:	88 ec       	ldi	r24, 0xC8	; 200
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	8a 0d       	add	r24, r10
     fea:	9b 1d       	adc	r25, r11
     fec:	84 15       	cp	r24, r4
     fee:	95 05       	cpc	r25, r5
     ff0:	18 f5       	brcc	.+70     	; 0x1038 <CheckPins+0x852>
     ff2:	c2 01       	movw	r24, r4
     ff4:	44 e0       	ldi	r20, 0x04	; 4
     ff6:	96 95       	lsr	r25
     ff8:	87 95       	ror	r24
     ffa:	4a 95       	dec	r20
     ffc:	e1 f7       	brne	.-8      	; 0xff6 <CheckPins+0x810>
     ffe:	8a 15       	cp	r24, r10
    1000:	9b 05       	cpc	r25, r11
    1002:	d0 f4       	brcc	.+52     	; 0x1038 <CheckPins+0x852>
     //voltage is above 0,15V and below 4,64V => Ok
     // hp2 >= hp1 is only possible with capacitor, not with a diode, hp2 is measured with 470k
     if((PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
    1004:	80 91 07 01 	lds	r24, 0x0107
    1008:	88 23       	and	r24, r24
    100a:	11 f0       	breq	.+4      	; 0x1010 <CheckPins+0x82a>
    100c:	86 30       	cpi	r24, 0x06	; 6
    100e:	19 f4       	brne	.+6      	; 0x1016 <CheckPins+0x830>
        PartFound = PART_DIODE;	//mark for diode only, if no other component is found
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	80 93 07 01 	sts	0x0107, r24
				//since there is a problem with Transistors with a protection diode
#if DebugOut == 4
        lcd_data('D');
#endif
     }
     diodes[NumOfDiodes].Anode = HighPin;
    1016:	80 91 05 01 	lds	r24, 0x0105
    101a:	e8 2f       	mov	r30, r24
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	ee 0f       	add	r30, r30
    1020:	ff 1f       	adc	r31, r31
    1022:	ee 0f       	add	r30, r30
    1024:	ff 1f       	adc	r31, r31
    1026:	e8 58       	subi	r30, 0x88	; 136
    1028:	fe 4f       	sbci	r31, 0xFE	; 254
    102a:	10 83       	st	Z, r17
     diodes[NumOfDiodes].Cathode = LowPin;
    102c:	71 82       	std	Z+1, r7	; 0x01
     diodes[NumOfDiodes].Voltage = adc.hp1;	// voltage in Millivolt 
    102e:	53 82       	std	Z+3, r5	; 0x03
    1030:	42 82       	std	Z+2, r4	; 0x02
     NumOfDiodes++;
    1032:	8f 5f       	subi	r24, 0xFF	; 255
    1034:	80 93 05 01 	sts	0x0105, r24
#if DebugOut == 4
  lcd_data(NumOfDiodes+'0');
#endif

widmes:
  if (NumOfDiodes > 0) goto clean_ports;
    1038:	80 91 05 01 	lds	r24, 0x0105
    103c:	88 23       	and	r24, r24
    103e:	09 f0       	breq	.+2      	; 0x1042 <CheckPins+0x85c>
    1040:	15 c2       	rjmp	.+1066   	; 0x146c <CheckPins+0xc86>
  // resistor measurement
  wdt_reset();
    1042:	a8 95       	wdr
// U_SCALE can be set to 4 for better resolution of ReadADC result
#if U_SCALE != 1
  ADCconfig.U_AVCC *= U_SCALE;	// scale to higher resolution, mV scale is not required
    1044:	80 91 40 01 	lds	r24, 0x0140
    1048:	90 91 41 01 	lds	r25, 0x0141
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	90 93 41 01 	sts	0x0141, r25
    1058:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.U_Bandgap *= U_SCALE;
    105c:	80 91 3e 01 	lds	r24, 0x013E
    1060:	90 91 3f 01 	lds	r25, 0x013F
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	90 93 3f 01 	sts	0x013F, r25
    1070:	80 93 3e 01 	sts	0x013E, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = R_ANZ_MESS;	// switch to special number of repetitions
    1074:	8e eb       	ldi	r24, 0xBE	; 190
    1076:	80 93 3c 01 	sts	0x013C, r24
#endif
  #define MAX_REPEAT (700 / (5 + R_ANZ_MESS/8))
  ADC_PORT = TXD_VAL;
    107a:	88 e0       	ldi	r24, 0x08	; 8
    107c:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	87 b9       	out	0x07, r24	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    1082:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;	
    1084:	c5 b8       	out	0x05, r12	; 5
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
    1086:	ee 24       	eor	r14, r14
    1088:	ff 24       	eor	r15, r15
  for (ii=1;ii<MAX_REPEAT;ii++) {
    108a:	21 e0       	ldi	r18, 0x01	; 1
    108c:	01 c0       	rjmp	.+2      	; 0x1090 <CheckPins+0x8aa>
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    108e:	7c 01       	movw	r14, r24
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
    1090:	87 2d       	mov	r24, r7
    1092:	2e 87       	std	Y+14, r18	; 0x0e
    1094:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
    1098:	08 2f       	mov	r16, r24
    109a:	59 2e       	mov	r5, r25
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    109c:	81 2f       	mov	r24, r17
    109e:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
     udiff = adc.hp1 - adc.hp2;
    10a2:	ac 01       	movw	r20, r24
    10a4:	4e 19       	sub	r20, r14
    10a6:	5f 09       	sbc	r21, r15
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    10a8:	2e 85       	ldd	r18, Y+14	; 0x0e
    10aa:	57 ff       	sbrs	r21, 7
    10ac:	03 c0       	rjmp	.+6      	; 0x10b4 <CheckPins+0x8ce>
    10ae:	50 95       	com	r21
    10b0:	41 95       	neg	r20
    10b2:	5f 4f       	sbci	r21, 0xFF	; 255
    10b4:	43 30       	cpi	r20, 0x03	; 3
    10b6:	51 05       	cpc	r21, r1
    10b8:	84 f4       	brge	.+32     	; 0x10da <CheckPins+0x8f4>
    10ba:	ac 01       	movw	r20, r24
  adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
#endif
  if (adc.tp1 > adc.hp1) {
     adc.tp1 = adc.hp1;
  }
  R_PORT = 0;
    10bc:	15 b8       	out	0x05, r1	; 5
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (GND)
    10be:	9d 81       	ldd	r25, Y+5	; 0x05
    10c0:	94 b9       	out	0x04, r25	; 4
  adc.hp2 = W5msReadADC(HighPin);	// read voltage, should be down
    10c2:	81 2f       	mov	r24, r17
    10c4:	4c 87       	std	Y+12, r20	; 0x0c
    10c6:	5d 87       	std	Y+13, r21	; 0x0d
    10c8:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
  if (adc.hp2 > (20*U_SCALE)) {
    10cc:	4c 85       	ldd	r20, Y+12	; 0x0c
    10ce:	5d 85       	ldd	r21, Y+13	; 0x0d
    10d0:	81 35       	cpi	r24, 0x51	; 81
    10d2:	91 05       	cpc	r25, r1
    10d4:	08 f0       	brcs	.+2      	; 0x10d8 <CheckPins+0x8f2>
    10d6:	af c1       	rjmp	.+862    	; 0x1436 <CheckPins+0xc50>
    10d8:	05 c0       	rjmp	.+10     	; 0x10e4 <CheckPins+0x8fe>
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     udiff = adc.hp1 - adc.hp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.hp2 = adc.hp1;
     wdt_reset();
    10da:	a8 95       	wdr
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    10dc:	2f 5f       	subi	r18, 0xFF	; 255
    10de:	29 31       	cpi	r18, 0x19	; 25
    10e0:	b1 f6       	brne	.-84     	; 0x108e <CheckPins+0x8a8>
    10e2:	a9 c1       	rjmp	.+850    	; 0x1436 <CheckPins+0xc50>
     lcd_string(utoa(adc.hp2, outval, 10));
     lcd_space();
#endif
     goto testend;
  }
  R_PORT = HiPinRH;		//switch R_H for High-Pin to VCC
    10e4:	ad 81       	ldd	r26, Y+5	; 0x05
    10e6:	a5 b9       	out	0x05, r26	; 5
  adc.hp2 = W5msReadADC(HighPin);	// voltage at resistor Rx with R_H
    10e8:	81 2f       	mov	r24, r17
    10ea:	4c 87       	std	Y+12, r20	; 0x0c
    10ec:	5d 87       	std	Y+13, r21	; 0x0d
    10ee:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
    10f2:	7c 01       	movw	r14, r24

  ADC_DDR = HiADCm;		//switch High-Pin to output
    10f4:	d7 b8       	out	0x07, r13	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
    10f6:	d8 b8       	out	0x08, r13	; 8
  R_PORT = 0;
    10f8:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
    10fa:	bb 81       	ldd	r27, Y+3	; 0x03
    10fc:	b4 b9       	out	0x04, r27	; 4
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
    10fe:	aa 24       	eor	r10, r10
    1100:	bb 24       	eor	r11, r11
  for (ii=1;ii<MAX_REPEAT;ii++) {
    1102:	21 e0       	ldi	r18, 0x01	; 1
    1104:	4c 85       	ldd	r20, Y+12	; 0x0c
    1106:	5d 85       	ldd	r21, Y+13	; 0x0d
    1108:	4a 01       	movw	r8, r20
    110a:	01 c0       	rjmp	.+2      	; 0x110e <CheckPins+0x928>
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    110c:	56 01       	movw	r10, r12
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
    110e:	81 2f       	mov	r24, r17
    1110:	2e 87       	std	Y+14, r18	; 0x0e
    1112:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
    1116:	28 2e       	mov	r2, r24
    1118:	69 2e       	mov	r6, r25
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    111a:	87 2d       	mov	r24, r7
    111c:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
    1120:	6c 01       	movw	r12, r24
     udiff = adc.lp1 - adc.lp2;
    1122:	8a 19       	sub	r24, r10
    1124:	9b 09       	sbc	r25, r11
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    1126:	2e 85       	ldd	r18, Y+14	; 0x0e
    1128:	97 ff       	sbrs	r25, 7
    112a:	03 c0       	rjmp	.+6      	; 0x1132 <CheckPins+0x94c>
    112c:	90 95       	com	r25
    112e:	81 95       	neg	r24
    1130:	9f 4f       	sbci	r25, 0xFF	; 255
    1132:	83 30       	cpi	r24, 0x03	; 3
    1134:	91 05       	cpc	r25, r1
    1136:	8c f4       	brge	.+34     	; 0x115a <CheckPins+0x974>
    1138:	a4 01       	movw	r20, r8
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = pgm_read_byte(&PinRLtab[LowPin]);		// instruction for LowPin R_L
  LoPinRH = LoPinRL + LoPinRL;				// instruction for LowPin R_H
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	88 0f       	add	r24, r24
  adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
#endif
  if (adc.tp2 < adc.lp1) {
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
    113e:	84 b9       	out	0x04, r24	; 4
  adc.lp2 = W5msReadADC(LowPin);
    1140:	87 2d       	mov	r24, r7
    1142:	8c 86       	std	Y+12, r8	; 0x0c
    1144:	5d 87       	std	Y+13, r21	; 0x0d
    1146:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
    114a:	4c 01       	movw	r8, r24
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    114c:	4c 85       	ldd	r20, Y+12	; 0x0c
    114e:	5d 85       	ldd	r21, Y+13	; 0x0d
    1150:	e4 e4       	ldi	r30, 0x44	; 68
    1152:	40 3c       	cpi	r20, 0xC0	; 192
    1154:	5e 07       	cpc	r21, r30
    1156:	30 f0       	brcs	.+12     	; 0x1164 <CheckPins+0x97e>
    1158:	0c c0       	rjmp	.+24     	; 0x1172 <CheckPins+0x98c>
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     udiff = adc.lp1 - adc.lp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.lp2 = adc.lp1;
     wdt_reset();
    115a:	a8 95       	wdr
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
  R_PORT = 0;
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    115c:	2f 5f       	subi	r18, 0xFF	; 255
    115e:	29 31       	cpi	r18, 0x19	; 25
    1160:	a9 f6       	brne	.-86     	; 0x110c <CheckPins+0x926>
    1162:	69 c1       	rjmp	.+722    	; 0x1436 <CheckPins+0xc50>
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
  adc.lp2 = W5msReadADC(LowPin);
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    1164:	f5 e8       	ldi	r31, 0x85	; 133
    1166:	ef 16       	cp	r14, r31
    1168:	f1 e0       	ldi	r31, 0x01	; 1
    116a:	ff 06       	cpc	r15, r31
    116c:	08 f0       	brcs	.+2      	; 0x1170 <CheckPins+0x98a>
    116e:	63 c1       	rjmp	.+710    	; 0x1436 <CheckPins+0xc50>
    1170:	06 c0       	rjmp	.+12     	; 0x117e <CheckPins+0x998>
     lcd_data('F');
#endif
     goto testend; 
  }
//    if((adc.hp2 + (adc.hp2 / 61)) < adc.hp1)
  if (adc.hp2 < (4972*U_SCALE)) { 
    1172:	20 eb       	ldi	r18, 0xB0	; 176
    1174:	e2 16       	cp	r14, r18
    1176:	2d e4       	ldi	r18, 0x4D	; 77
    1178:	f2 06       	cpc	r15, r18
    117a:	08 f0       	brcs	.+2      	; 0x117e <CheckPins+0x998>
    117c:	5c c1       	rjmp	.+696    	; 0x1436 <CheckPins+0xc50>
     // voltage breaks down with low test current and it is not nearly shorted  => resistor
//     if (adc.lp1 < 120) { // take measurement with R_H 
     if (adc.lp1 < (169*U_SCALE)) { // take measurement with R_H 
    117e:	34 ea       	ldi	r19, 0xA4	; 164
    1180:	c3 16       	cp	r12, r19
    1182:	32 e0       	ldi	r19, 0x02	; 2
    1184:	d3 06       	cpc	r13, r19
    1186:	08 f0       	brcs	.+2      	; 0x118a <CheckPins+0x9a4>
    1188:	72 c0       	rjmp	.+228    	; 0x126e <CheckPins+0xa88>
        ii = 'H';
        if (adc.lp2 < (38*U_SCALE)) {
    118a:	48 e9       	ldi	r20, 0x98	; 152
    118c:	84 16       	cp	r8, r20
    118e:	91 04       	cpc	r9, r1
    1190:	08 f4       	brcc	.+2      	; 0x1194 <CheckPins+0x9ae>
    1192:	51 c1       	rjmp	.+674    	; 0x1436 <CheckPins+0xc50>
           // measurement > 60MOhm to big resistance
           goto testend;
        }
        // two measurements with R_H resistors (470k) are made:
        // lirx1 (measurement at HighPin)
        lirx1 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)adc.hp2 / (ADCconfig.U_AVCC - adc.hp2);
    1194:	40 90 40 01 	lds	r4, 0x0140
    1198:	50 90 41 01 	lds	r5, 0x0141
    119c:	b7 01       	movw	r22, r14
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	28 e9       	ldi	r18, 0x98	; 152
    11a4:	37 eb       	ldi	r19, 0xB7	; 183
    11a6:	40 e0       	ldi	r20, 0x00	; 0
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
    11ae:	92 01       	movw	r18, r4
    11b0:	2e 19       	sub	r18, r14
    11b2:	3f 09       	sbc	r19, r15
    11b4:	40 e0       	ldi	r20, 0x00	; 0
    11b6:	50 e0       	ldi	r21, 0x00	; 0
    11b8:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
    11bc:	59 01       	movw	r10, r18
    11be:	6a 01       	movw	r12, r20
        // lirx2 (measurement at LowPin)
        lirx2 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)(ADCconfig.U_AVCC - adc.lp2) / adc.lp2;
    11c0:	48 18       	sub	r4, r8
    11c2:	59 08       	sbc	r5, r9
    11c4:	b2 01       	movw	r22, r4
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	28 e9       	ldi	r18, 0x98	; 152
    11cc:	37 eb       	ldi	r19, 0xB7	; 183
    11ce:	40 e0       	ldi	r20, 0x00	; 0
    11d0:	50 e0       	ldi	r21, 0x00	; 0
    11d2:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
    11d6:	94 01       	movw	r18, r8
    11d8:	40 e0       	ldi	r20, 0x00	; 0
    11da:	50 e0       	ldi	r21, 0x00	; 0
    11dc:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
#define FAKT_LOW 2		//resolution is about twice as good
#else
#define FAKT_LOW 4		//resolution is about four times better
#endif
#ifdef AUTOSCALE_ADC
        if (adc.hp2 < U_INT_LIMIT) {
    11e0:	88 e7       	ldi	r24, 0x78	; 120
    11e2:	e8 16       	cp	r14, r24
    11e4:	8f e0       	ldi	r24, 0x0F	; 15
    11e6:	f8 06       	cpc	r15, r24
    11e8:	70 f4       	brcc	.+28     	; 0x1206 <CheckPins+0xa20>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    11ea:	c6 01       	movw	r24, r12
    11ec:	b5 01       	movw	r22, r10
    11ee:	b2 e0       	ldi	r27, 0x02	; 2
    11f0:	66 0f       	add	r22, r22
    11f2:	77 1f       	adc	r23, r23
    11f4:	88 1f       	adc	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	ba 95       	dec	r27
    11fa:	d1 f7       	brne	.-12     	; 0x11f0 <CheckPins+0xa0a>
    11fc:	62 0f       	add	r22, r18
    11fe:	73 1f       	adc	r23, r19
    1200:	84 1f       	adc	r24, r20
    1202:	95 1f       	adc	r25, r21
    1204:	12 c0       	rjmp	.+36     	; 0x122a <CheckPins+0xa44>
        } else if (adc.lp2 < U_INT_LIMIT){
    1206:	98 e7       	ldi	r25, 0x78	; 120
    1208:	89 16       	cp	r8, r25
    120a:	9f e0       	ldi	r25, 0x0F	; 15
    120c:	99 06       	cpc	r9, r25
    120e:	a0 f4       	brcc	.+40     	; 0x1238 <CheckPins+0xa52>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    1210:	ca 01       	movw	r24, r20
    1212:	b9 01       	movw	r22, r18
    1214:	a2 e0       	ldi	r26, 0x02	; 2
    1216:	66 0f       	add	r22, r22
    1218:	77 1f       	adc	r23, r23
    121a:	88 1f       	adc	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	aa 95       	dec	r26
    1220:	d1 f7       	brne	.-12     	; 0x1216 <CheckPins+0xa30>
    1222:	6a 0d       	add	r22, r10
    1224:	7b 1d       	adc	r23, r11
    1226:	8c 1d       	adc	r24, r12
    1228:	9d 1d       	adc	r25, r13
    122a:	25 e0       	ldi	r18, 0x05	; 5
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	40 e0       	ldi	r20, 0x00	; 0
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
    1236:	08 c0       	rjmp	.+16     	; 0x1248 <CheckPins+0xa62>
        } else 
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_H measurements
    1238:	2a 0d       	add	r18, r10
    123a:	3b 1d       	adc	r19, r11
    123c:	4c 1d       	adc	r20, r12
    123e:	5d 1d       	adc	r21, r13
    1240:	56 95       	lsr	r21
    1242:	47 95       	ror	r20
    1244:	37 95       	ror	r19
    1246:	27 95       	ror	r18
        }
        lrx1 *= 100;
    1248:	ca 01       	movw	r24, r20
    124a:	b9 01       	movw	r22, r18
    124c:	24 e6       	ldi	r18, 0x64	; 100
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e0       	ldi	r20, 0x00	; 0
    1252:	50 e0       	ldi	r21, 0x00	; 0
    1254:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
    1258:	6b 01       	movw	r12, r22
    125a:	7c 01       	movw	r14, r24
        lrx1 += RH_OFFSET;			// add constant for correction of systematic error
    125c:	8c ea       	ldi	r24, 0xAC	; 172
    125e:	9d e0       	ldi	r25, 0x0D	; 13
    1260:	a0 e0       	ldi	r26, 0x00	; 0
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	c8 0e       	add	r12, r24
    1266:	d9 1e       	adc	r13, r25
    1268:	ea 1e       	adc	r14, r26
    126a:	fb 1e       	adc	r15, r27
    126c:	79 c0       	rjmp	.+242    	; 0x1360 <CheckPins+0xb7a>
    126e:	80 2f       	mov	r24, r16
    1270:	95 2d       	mov	r25, r5
    1272:	48 17       	cp	r20, r24
    1274:	59 07       	cpc	r21, r25
    1276:	08 f4       	brcc	.+2      	; 0x127a <CheckPins+0xa94>
    1278:	ca 01       	movw	r24, r20
    127a:	e2 2c       	mov	r14, r2
    127c:	f6 2c       	mov	r15, r6
    127e:	ec 14       	cp	r14, r12
    1280:	fd 04       	cpc	r15, r13
    1282:	08 f4       	brcc	.+2      	; 0x1286 <CheckPins+0xaa0>
    1284:	76 01       	movw	r14, r12
    1286:	1c 01       	movw	r2, r24
    1288:	84 17       	cp	r24, r20
    128a:	95 07       	cpc	r25, r21
    128c:	08 f4       	brcc	.+2      	; 0x1290 <CheckPins+0xaaa>
    128e:	1a 01       	movw	r2, r20
        // two measurements with R_L resistors (680) are made:
        // lirx1 (measurement at HighPin)
        if (adc.tp1 > adc.hp1) {
           adc.hp1 = adc.tp1;		//diff negativ is illegal
        }
        lirx1 =(unsigned long)RR680PL * (unsigned long)(adc.hp1 - adc.tp1) / (ADCconfig.U_AVCC - adc.hp1);
    1290:	b1 01       	movw	r22, r2
    1292:	68 1b       	sub	r22, r24
    1294:	79 0b       	sbc	r23, r25
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	20 91 08 01 	lds	r18, 0x0108
    129e:	30 91 09 01 	lds	r19, 0x0109
    12a2:	40 e0       	ldi	r20, 0x00	; 0
    12a4:	50 e0       	ldi	r21, 0x00	; 0
    12a6:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
    12aa:	20 91 40 01 	lds	r18, 0x0140
    12ae:	30 91 41 01 	lds	r19, 0x0141
    12b2:	22 19       	sub	r18, r2
    12b4:	33 09       	sbc	r19, r3
    12b6:	40 e0       	ldi	r20, 0x00	; 0
    12b8:	50 e0       	ldi	r21, 0x00	; 0
    12ba:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
    12be:	49 01       	movw	r8, r18
    12c0:	5a 01       	movw	r10, r20
    12c2:	27 01       	movw	r4, r14
    12c4:	ce 14       	cp	r12, r14
    12c6:	df 04       	cpc	r13, r15
    12c8:	08 f4       	brcc	.+2      	; 0x12cc <CheckPins+0xae6>
    12ca:	26 01       	movw	r4, r12
        if (adc.tp2 < adc.lp1) {
           adc.lp1 = adc.tp2;		//diff negativ is illegal
        }
        // lirx2 (Measurement at LowPin)
        lirx2 =(unsigned long)RR680MI * (unsigned long)(adc.tp2 -adc.lp1) / adc.lp1;
    12cc:	e4 18       	sub	r14, r4
    12ce:	f5 08       	sbc	r15, r5
    12d0:	b7 01       	movw	r22, r14
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	20 91 02 01 	lds	r18, 0x0102
    12da:	30 91 03 01 	lds	r19, 0x0103
    12de:	40 e0       	ldi	r20, 0x00	; 0
    12e0:	50 e0       	ldi	r21, 0x00	; 0
    12e2:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
    12e6:	92 01       	movw	r18, r4
    12e8:	40 e0       	ldi	r20, 0x00	; 0
    12ea:	50 e0       	ldi	r21, 0x00	; 0
    12ec:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
//     lrx1 =(unsigned long)R_L_VAL * (unsigned long)adc.hp1 / (adc.hp3 - adc.hp1);

#ifdef AUTOSCALE_ADC
        if (adc.hp1 < U_INT_LIMIT) {
    12f0:	98 e7       	ldi	r25, 0x78	; 120
    12f2:	29 16       	cp	r2, r25
    12f4:	9f e0       	ldi	r25, 0x0F	; 15
    12f6:	39 06       	cpc	r3, r25
    12f8:	70 f4       	brcc	.+28     	; 0x1316 <CheckPins+0xb30>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    12fa:	c5 01       	movw	r24, r10
    12fc:	b4 01       	movw	r22, r8
    12fe:	e2 e0       	ldi	r30, 0x02	; 2
    1300:	66 0f       	add	r22, r22
    1302:	77 1f       	adc	r23, r23
    1304:	88 1f       	adc	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	ea 95       	dec	r30
    130a:	d1 f7       	brne	.-12     	; 0x1300 <CheckPins+0xb1a>
    130c:	62 0f       	add	r22, r18
    130e:	73 1f       	adc	r23, r19
    1310:	84 1f       	adc	r24, r20
    1312:	95 1f       	adc	r25, r21
    1314:	12 c0       	rjmp	.+36     	; 0x133a <CheckPins+0xb54>
        } else if (adc.lp1 < U_INT_LIMIT) {
    1316:	a8 e7       	ldi	r26, 0x78	; 120
    1318:	4a 16       	cp	r4, r26
    131a:	af e0       	ldi	r26, 0x0F	; 15
    131c:	5a 06       	cpc	r5, r26
    131e:	b0 f4       	brcc	.+44     	; 0x134c <CheckPins+0xb66>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    1320:	ca 01       	movw	r24, r20
    1322:	b9 01       	movw	r22, r18
    1324:	22 e0       	ldi	r18, 0x02	; 2
    1326:	66 0f       	add	r22, r22
    1328:	77 1f       	adc	r23, r23
    132a:	88 1f       	adc	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	2a 95       	dec	r18
    1330:	d1 f7       	brne	.-12     	; 0x1326 <CheckPins+0xb40>
    1332:	68 0d       	add	r22, r8
    1334:	79 1d       	adc	r23, r9
    1336:	8a 1d       	adc	r24, r10
    1338:	9b 1d       	adc	r25, r11
    133a:	25 e0       	ldi	r18, 0x05	; 5
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	50 e0       	ldi	r21, 0x00	; 0
    1342:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
    1346:	69 01       	movw	r12, r18
    1348:	7a 01       	movw	r14, r20
    134a:	0a c0       	rjmp	.+20     	; 0x1360 <CheckPins+0xb7a>
        } else
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_L measurements
    134c:	69 01       	movw	r12, r18
    134e:	7a 01       	movw	r14, r20
    1350:	c8 0c       	add	r12, r8
    1352:	d9 1c       	adc	r13, r9
    1354:	ea 1c       	adc	r14, r10
    1356:	fb 1c       	adc	r15, r11
    1358:	f6 94       	lsr	r15
    135a:	e7 94       	ror	r14
    135c:	d7 94       	ror	r13
    135e:	c7 94       	ror	r12
  lcd_line4();
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
    1360:	80 91 07 01 	lds	r24, 0x0107
    1364:	82 30       	cpi	r24, 0x02	; 2
    1366:	18 f0       	brcs	.+6      	; 0x136e <CheckPins+0xb88>
    1368:	86 30       	cpi	r24, 0x06	; 6
    136a:	09 f0       	breq	.+2      	; 0x136e <CheckPins+0xb88>
    136c:	64 c0       	rjmp	.+200    	; 0x1436 <CheckPins+0xc50>
        for (ii=0; ii<ResistorsFound; ii++) {
    136e:	30 91 5e 01 	lds	r19, 0x015E
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	41 c0       	rjmp	.+130    	; 0x13f8 <CheckPins+0xc12>
           // search measurements with inverse polarity 
           thisR = &resis[ii];
    1376:	82 2f       	mov	r24, r18
    1378:	90 e0       	ldi	r25, 0x00	; 0
           if (thisR->rt != TristatePin) {
    137a:	fc 01       	movw	r30, r24
    137c:	ee 0f       	add	r30, r30
    137e:	ff 1f       	adc	r31, r31
    1380:	e8 0f       	add	r30, r24
    1382:	f9 1f       	adc	r31, r25
    1384:	ee 0f       	add	r30, r30
    1386:	ff 1f       	adc	r31, r31
    1388:	ee 0f       	add	r30, r30
    138a:	ff 1f       	adc	r31, r31
    138c:	e8 5e       	subi	r30, 0xE8	; 232
    138e:	fe 4f       	sbci	r31, 0xFE	; 254
    1390:	83 85       	ldd	r24, Z+11	; 0x0b
    1392:	b9 81       	ldd	r27, Y+1	; 0x01
    1394:	8b 17       	cp	r24, r27
    1396:	11 f0       	breq	.+4      	; 0x139c <CheckPins+0xbb6>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    1398:	2f 5f       	subi	r18, 0xFF	; 255
    139a:	2e c0       	rjmp	.+92     	; 0x13f8 <CheckPins+0xc12>
           if (thisR->rt != TristatePin) {
              continue;
           }
           // must be measurement with inverse polarity 
           // resolution is 0.1 Ohm, 1 Ohm = 10 !
           lirx1 = (labs((long)lrx1 - (long)thisR->rx) * 10) / (lrx1 + thisR->rx + 100);
    139c:	80 80       	ld	r8, Z
    139e:	91 80       	ldd	r9, Z+1	; 0x01
    13a0:	a2 80       	ldd	r10, Z+2	; 0x02
    13a2:	b3 80       	ldd	r11, Z+3	; 0x03
    13a4:	c7 01       	movw	r24, r14
    13a6:	b6 01       	movw	r22, r12
    13a8:	68 19       	sub	r22, r8
    13aa:	79 09       	sbc	r23, r9
    13ac:	8a 09       	sbc	r24, r10
    13ae:	9b 09       	sbc	r25, r11
    13b0:	97 ff       	sbrs	r25, 7
    13b2:	07 c0       	rjmp	.+14     	; 0x13c2 <CheckPins+0xbdc>
    13b4:	90 95       	com	r25
    13b6:	80 95       	com	r24
    13b8:	70 95       	com	r23
    13ba:	61 95       	neg	r22
    13bc:	7f 4f       	sbci	r23, 0xFF	; 255
    13be:	8f 4f       	sbci	r24, 0xFF	; 255
    13c0:	9f 4f       	sbci	r25, 0xFF	; 255
    13c2:	2a e0       	ldi	r18, 0x0A	; 10
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	40 e0       	ldi	r20, 0x00	; 0
    13c8:	50 e0       	ldi	r21, 0x00	; 0
    13ca:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
    13ce:	a5 01       	movw	r20, r10
    13d0:	94 01       	movw	r18, r8
    13d2:	2c 59       	subi	r18, 0x9C	; 156
    13d4:	3f 4f       	sbci	r19, 0xFF	; 255
    13d6:	4f 4f       	sbci	r20, 0xFF	; 255
    13d8:	5f 4f       	sbci	r21, 0xFF	; 255
    13da:	2c 0d       	add	r18, r12
    13dc:	3d 1d       	adc	r19, r13
    13de:	4e 1d       	adc	r20, r14
    13e0:	5f 1d       	adc	r21, r15
    13e2:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
           if (lirx1  > 0) {
    13e6:	21 15       	cp	r18, r1
    13e8:	31 05       	cpc	r19, r1
    13ea:	41 05       	cpc	r20, r1
    13ec:	51 05       	cpc	r21, r1
    13ee:	19 f5       	brne	.+70     	; 0x1436 <CheckPins+0xc50>
              DisplayValue(lirx1,-1,LCD_CHAR_OMEGA,3)
              lcd_space();
#endif
              goto testend; // <10% mismatch
           }
           PartFound = PART_RESISTOR;
    13f0:	86 e0       	ldi	r24, 0x06	; 6
    13f2:	80 93 07 01 	sts	0x0107, r24
           goto testend;
    13f6:	1f c0       	rjmp	.+62     	; 0x1436 <CheckPins+0xc50>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    13f8:	23 17       	cp	r18, r19
    13fa:	08 f4       	brcc	.+2      	; 0x13fe <CheckPins+0xc18>
    13fc:	bc cf       	rjmp	.-136    	; 0x1376 <CheckPins+0xb90>
           }
           PartFound = PART_RESISTOR;
           goto testend;
        } // end for
        // no same resistor with the same Tristate-Pin found, new one
        thisR = &resis[ResistorsFound];		// pointer to a free resistor structure
    13fe:	83 2f       	mov	r24, r19
    1400:	90 e0       	ldi	r25, 0x00	; 0
        thisR->rx = lrx1;		// save resistor value
    1402:	fc 01       	movw	r30, r24
    1404:	ee 0f       	add	r30, r30
    1406:	ff 1f       	adc	r31, r31
    1408:	e8 0f       	add	r30, r24
    140a:	f9 1f       	adc	r31, r25
    140c:	ee 0f       	add	r30, r30
    140e:	ff 1f       	adc	r31, r31
    1410:	ee 0f       	add	r30, r30
    1412:	ff 1f       	adc	r31, r31
    1414:	e8 5e       	subi	r30, 0xE8	; 232
    1416:	fe 4f       	sbci	r31, 0xFE	; 254
    1418:	c0 82       	st	Z, r12
    141a:	d1 82       	std	Z+1, r13	; 0x01
    141c:	e2 82       	std	Z+2, r14	; 0x02
    141e:	f3 82       	std	Z+3, r15	; 0x03
#if FLASHEND > 0x1fff
        thisR->lx = 0;			// no inductance
    1420:	14 82       	std	Z+4, r1	; 0x04
    1422:	15 82       	std	Z+5, r1	; 0x05
    1424:	16 82       	std	Z+6, r1	; 0x06
    1426:	17 82       	std	Z+7, r1	; 0x07
#endif
        thisR->ra = LowPin;		// save Pin numbers
    1428:	71 86       	std	Z+9, r7	; 0x09
        thisR->rb = HighPin;
    142a:	12 87       	std	Z+10, r17	; 0x0a
        thisR->rt = TristatePin;	// Tristate is saved for easier search of inverse measurement
    142c:	29 81       	ldd	r18, Y+1	; 0x01
    142e:	23 87       	std	Z+11, r18	; 0x0b
        ResistorsFound++;			// 1 more resistor found
    1430:	3f 5f       	subi	r19, 0xFF	; 255
    1432:	30 93 5e 01 	sts	0x015E, r19
#endif
     }
  }
  testend:
#if U_SCALE != 1
  ADCconfig.U_AVCC /= U_SCALE;		// scale back to mV resolution
    1436:	80 91 40 01 	lds	r24, 0x0140
    143a:	90 91 41 01 	lds	r25, 0x0141
    143e:	96 95       	lsr	r25
    1440:	87 95       	ror	r24
    1442:	96 95       	lsr	r25
    1444:	87 95       	ror	r24
    1446:	90 93 41 01 	sts	0x0141, r25
    144a:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.U_Bandgap /= U_SCALE;
    144e:	80 91 3e 01 	lds	r24, 0x013E
    1452:	90 91 3f 01 	lds	r25, 0x013F
    1456:	96 95       	lsr	r25
    1458:	87 95       	ror	r24
    145a:	96 95       	lsr	r25
    145c:	87 95       	ror	r24
    145e:	90 93 3f 01 	sts	0x013F, r25
    1462:	80 93 3e 01 	sts	0x013E, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = ANZ_MESS;		// switch back to standard number of repetition
    1466:	89 e1       	ldi	r24, 0x19	; 25
    1468:	80 93 3c 01 	sts	0x013C, r24
#if DebugOut < 10
  wait_about2s();
#endif
#endif
 clean_ports:
  ADC_DDR = TXD_MSK;		// all ADC-Pins Input
    146c:	88 e0       	ldi	r24, 0x08	; 8
    146e:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// all ADC outputs to Ground, keine Pull up
    1470:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// all resistor-outputs to Input
    1472:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// all resistor-outputs to Ground, no Pull up
    1474:	15 b8       	out	0x05, r1	; 5
} // end CheckPins()
    1476:	2e 96       	adiw	r28, 0x0e	; 14
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	f8 94       	cli
    147c:	de bf       	out	0x3e, r29	; 62
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	cd bf       	out	0x3d, r28	; 61
    1482:	cf 91       	pop	r28
    1484:	df 91       	pop	r29
    1486:	1f 91       	pop	r17
    1488:	0f 91       	pop	r16
    148a:	ff 90       	pop	r15
    148c:	ef 90       	pop	r14
    148e:	df 90       	pop	r13
    1490:	cf 90       	pop	r12
    1492:	bf 90       	pop	r11
    1494:	af 90       	pop	r10
    1496:	9f 90       	pop	r9
    1498:	8f 90       	pop	r8
    149a:	7f 90       	pop	r7
    149c:	6f 90       	pop	r6
    149e:	5f 90       	pop	r5
    14a0:	4f 90       	pop	r4
    14a2:	3f 90       	pop	r3
    14a4:	2f 90       	pop	r2
    14a6:	08 95       	ret

000014a8 <PinLayout>:
TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
}
#endif

// show the Pin Layout of the device 
void PinLayout(char pin1, char pin2, char pin3) {
    14a8:	ff 92       	push	r15
    14aa:	0f 93       	push	r16
    14ac:	1f 93       	push	r17
    14ae:	18 2f       	mov	r17, r24
    14b0:	06 2f       	mov	r16, r22
    14b2:	f4 2e       	mov	r15, r20
// pin1-3 is EBC or SGD or CGA
#ifndef EBC_STYLE
   // Layout with 123= style
   lcd_fix_string(N123_str);		//" 123="
    14b4:	88 e0       	ldi	r24, 0x08	; 8
    14b6:	91 e0       	ldi	r25, 0x01	; 1
    14b8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
   for (ii=0;ii<3;ii++) {
    14bc:	10 92 4b 01 	sts	0x014B, r1
    14c0:	1e c0       	rjmp	.+60     	; 0x14fe <PinLayout+0x56>
       if (ii == trans.e)  lcd_data(pin1);	// Output Character in right order
    14c2:	90 91 5d 01 	lds	r25, 0x015D
    14c6:	89 17       	cp	r24, r25
    14c8:	19 f4       	brne	.+6      	; 0x14d0 <PinLayout+0x28>
    14ca:	81 2f       	mov	r24, r17
    14cc:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       if (ii == trans.b)  lcd_data(pin2);
    14d0:	90 91 4b 01 	lds	r25, 0x014B
    14d4:	80 91 5b 01 	lds	r24, 0x015B
    14d8:	98 17       	cp	r25, r24
    14da:	19 f4       	brne	.+6      	; 0x14e2 <PinLayout+0x3a>
    14dc:	80 2f       	mov	r24, r16
    14de:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       if (ii == trans.c)  lcd_data(pin3);
    14e2:	90 91 4b 01 	lds	r25, 0x014B
    14e6:	80 91 5c 01 	lds	r24, 0x015C
    14ea:	98 17       	cp	r25, r24
    14ec:	19 f4       	brne	.+6      	; 0x14f4 <PinLayout+0x4c>
    14ee:	8f 2d       	mov	r24, r15
    14f0:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
void PinLayout(char pin1, char pin2, char pin3) {
// pin1-3 is EBC or SGD or CGA
#ifndef EBC_STYLE
   // Layout with 123= style
   lcd_fix_string(N123_str);		//" 123="
   for (ii=0;ii<3;ii++) {
    14f4:	80 91 4b 01 	lds	r24, 0x014B
    14f8:	8f 5f       	subi	r24, 0xFF	; 255
    14fa:	80 93 4b 01 	sts	0x014B, r24
    14fe:	80 91 4b 01 	lds	r24, 0x014B
    1502:	83 30       	cpi	r24, 0x03	; 3
    1504:	f0 f2       	brcs	.-68     	; 0x14c2 <PinLayout+0x1a>
   lcd_testpin(trans.e);
   lcd_testpin(trans.b);
   lcd_testpin(trans.c);
 #endif
#endif
}
    1506:	1f 91       	pop	r17
    1508:	0f 91       	pop	r16
    150a:	ff 90       	pop	r15
    150c:	08 95       	ret

0000150e <ShortedProbes>:
 *  - 0 if not shorted
 *  - 1 if shorted
 */

uint8_t ShortedProbes(uint8_t Probe1, uint8_t Probe2)
{
    150e:	0f 93       	push	r16
    1510:	1f 93       	push	r17
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	0f 92       	push	r0
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
   *  Set up a voltage divider between the two probes:
   *  - Probe1: Rl pull-up
   *  - Probe2: Rl pull-down
   */

  R_PORT = pgm_read_byte(&PinRLtab[Probe1]);
    151c:	e8 2f       	mov	r30, r24
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	e6 5f       	subi	r30, 0xF6	; 246
    1522:	fe 4f       	sbci	r31, 0xFE	; 254
    1524:	94 91       	lpm	r25, Z+
    1526:	95 b9       	out	0x05, r25	; 5
  R_DDR = pgm_read_byte(&PinRLtab[Probe1]) | pgm_read_byte(&PinRLtab[Probe2]);
    1528:	e6 2f       	mov	r30, r22
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	e6 5f       	subi	r30, 0xF6	; 246
    152e:	fe 4f       	sbci	r31, 0xFE	; 254
    1530:	e4 91       	lpm	r30, Z+
    1532:	e9 2b       	or	r30, r25
    1534:	e4 b9       	out	0x04, r30	; 4

  /* read voltages */
  U1 = ReadADC(Probe1);
    1536:	69 83       	std	Y+1, r22	; 0x01
    1538:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
    153c:	8c 01       	movw	r16, r24
  U2 = ReadADC(Probe2);
    153e:	69 81       	ldd	r22, Y+1	; 0x01
    1540:	86 2f       	mov	r24, r22
    1542:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
    1546:	ac 01       	movw	r20, r24
  /*
   *  We expect both probe voltages to be about the same and
   *  to be half of Vcc (allowed difference +/- 20mV).
   */

  URH = ADCconfig.U_AVCC / 2;
    1548:	20 91 40 01 	lds	r18, 0x0140
    154c:	30 91 41 01 	lds	r19, 0x0141
    1550:	36 95       	lsr	r19
    1552:	27 95       	ror	r18
  if ((U1 > URH - 20) && (U1 < URH + 20))
    1554:	c9 01       	movw	r24, r18
    1556:	44 97       	sbiw	r24, 0x14	; 20
    1558:	80 17       	cp	r24, r16
    155a:	91 07       	cpc	r25, r17
    155c:	60 f4       	brcc	.+24     	; 0x1576 <ShortedProbes+0x68>
    155e:	2c 5e       	subi	r18, 0xEC	; 236
    1560:	3f 4f       	sbci	r19, 0xFF	; 255
    1562:	02 17       	cp	r16, r18
    1564:	13 07       	cpc	r17, r19
    1566:	38 f4       	brcc	.+14     	; 0x1576 <ShortedProbes+0x68>
  {
    if ((U2 > URH - 20) && (U2 < URH + 20))
    1568:	84 17       	cp	r24, r20
    156a:	95 07       	cpc	r25, r21
    156c:	20 f4       	brcc	.+8      	; 0x1576 <ShortedProbes+0x68>
 *  - 1 if shorted
 */

uint8_t ShortedProbes(uint8_t Probe1, uint8_t Probe2)
{
  uint8_t           Flag1 = 0;      /* return value */
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	42 17       	cp	r20, r18
    1572:	53 07       	cpc	r21, r19
    1574:	08 f0       	brcs	.+2      	; 0x1578 <ShortedProbes+0x6a>
    1576:	80 e0       	ldi	r24, 0x00	; 0
      Flag1 = 1;
    }
  }

  /* reset port */
  R_DDR = 0;
    1578:	14 b8       	out	0x04, r1	; 4

  return Flag1;
}
    157a:	0f 90       	pop	r0
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	1f 91       	pop	r17
    1582:	0f 91       	pop	r16
    1584:	08 95       	ret

00001586 <AllProbesShorted>:
 *  - 0 if no probes are short-circuited
 *  - number of probe pairs short-circuited (3 = all)
 */

uint8_t AllProbesShorted(void)
{
    1586:	1f 93       	push	r17
  uint8_t           Flag2;      /* return value */

  /* check all possible combinations */
  Flag2 = ShortedProbes(TP1, TP2);
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	61 e0       	ldi	r22, 0x01	; 1
    158c:	0e 94 87 0a 	call	0x150e	; 0x150e <ShortedProbes>
    1590:	18 2f       	mov	r17, r24
  Flag2 += ShortedProbes(TP1, TP3);
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	62 e0       	ldi	r22, 0x02	; 2
    1596:	0e 94 87 0a 	call	0x150e	; 0x150e <ShortedProbes>
    159a:	18 0f       	add	r17, r24
  Flag2 += ShortedProbes(TP2, TP3);
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	62 e0       	ldi	r22, 0x02	; 2
    15a0:	0e 94 87 0a 	call	0x150e	; 0x150e <ShortedProbes>

  return Flag2;
}
    15a4:	81 0f       	add	r24, r17
    15a6:	1f 91       	pop	r17
    15a8:	08 95       	ret

000015aa <AutoCheck>:
void AutoCheck(void) {
    15aa:	2f 92       	push	r2
    15ac:	3f 92       	push	r3
    15ae:	4f 92       	push	r4
    15b0:	5f 92       	push	r5
    15b2:	6f 92       	push	r6
    15b4:	7f 92       	push	r7
    15b6:	8f 92       	push	r8
    15b8:	9f 92       	push	r9
    15ba:	af 92       	push	r10
    15bc:	bf 92       	push	r11
    15be:	cf 92       	push	r12
    15c0:	df 92       	push	r13
    15c2:	ef 92       	push	r14
    15c4:	ff 92       	push	r15
    15c6:	0f 93       	push	r16
    15c8:	1f 93       	push	r17
    15ca:	df 93       	push	r29
    15cc:	cf 93       	push	r28
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	2e 97       	sbiw	r28, 0x0e	; 14
    15d4:	0f b6       	in	r0, 0x3f	; 63
    15d6:	f8 94       	cli
    15d8:	de bf       	out	0x3e, r29	; 62
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	cd bf       	out	0x3d, r28	; 61
  #ifdef AUTOSCALE_ADC
  int8_t udiff;		// difference between ADC Voltage with VCC or Bandgap reference
  int8_t udiff2;
  #endif
 #endif
  ADC_PORT = TXD_VAL;
    15de:	88 e0       	ldi	r24, 0x08	; 8
    15e0:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = TXD_MSK;
    15e2:	87 b9       	out	0x07, r24	; 7
  #define RequireShortedProbes
  if (AllProbesShorted() != 3) return;
    15e4:	0e 94 c3 0a 	call	0x1586	; 0x1586 <AllProbesShorted>
    15e8:	83 30       	cpi	r24, 0x03	; 3
    15ea:	09 f0       	breq	.+2      	; 0x15ee <AutoCheck+0x44>
    15ec:	0b c4       	rjmp	.+2070   	; 0x1e04 <AutoCheck+0x85a>
  lcd_clear();
    15ee:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_fix_string(SELFTEST);		// "Selftest mode.."
    15f2:	8d eb       	ldi	r24, 0xBD	; 189
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  lcd_line2();
    15fa:	80 ec       	ldi	r24, 0xC0	; 192
    15fc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_data('?');			// wait for key pressed
    1600:	8f e3       	ldi	r24, 0x3F	; 63
    1602:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
  for (tt=0;tt<50;tt++) {
    1606:	10 e0       	ldi	r17, 0x00	; 0
     if ((ON_PIN_REG & (1<<RST_PIN)) != 0) break;	// key is unpressed
    1608:	4f 99       	sbic	0x09, 7	; 9
    160a:	08 c0       	rjmp	.+16     	; 0x161c <AutoCheck+0x72>
     wait_about10ms();			// key is still pressed, wait for release
    160c:	82 e0       	ldi	r24, 0x02	; 2
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
  if (AllProbesShorted() != 3) return;
  lcd_clear();
  lcd_fix_string(SELFTEST);		// "Selftest mode.."
  lcd_line2();
  lcd_data('?');			// wait for key pressed
  for (tt=0;tt<50;tt++) {
    1614:	1f 5f       	subi	r17, 0xFF	; 255
    1616:	12 33       	cpi	r17, 0x32	; 50
    1618:	b9 f7       	brne	.-18     	; 0x1608 <AutoCheck+0x5e>
    161a:	09 c0       	rjmp	.+18     	; 0x162e <AutoCheck+0x84>
     if ((ON_PIN_REG & (1<<RST_PIN)) != 0) break;	// key is unpressed
    161c:	18 ec       	ldi	r17, 0xC8	; 200
     wait_about10ms();			// key is still pressed, wait for release
    }
  if (tt == 50) goto no_selftest;		// key is more than 500ms pressed
  for (tt=0;tt<200;tt++) {
     if(!(ON_PIN_REG & (1<<RST_PIN))) goto begin_selftest;	// key is pressed again
    161e:	4f 9b       	sbis	0x09, 7	; 9
    1620:	0d c0       	rjmp	.+26     	; 0x163c <AutoCheck+0x92>
     wait_about10ms();
    1622:	82 e0       	ldi	r24, 0x02	; 2
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
    162a:	11 50       	subi	r17, 0x01	; 1
  for (tt=0;tt<50;tt++) {
     if ((ON_PIN_REG & (1<<RST_PIN)) != 0) break;	// key is unpressed
     wait_about10ms();			// key is still pressed, wait for release
    }
  if (tt == 50) goto no_selftest;		// key is more than 500ms pressed
  for (tt=0;tt<200;tt++) {
    162c:	c1 f7       	brne	.-16     	; 0x161e <AutoCheck+0x74>
     if(!(ON_PIN_REG & (1<<RST_PIN))) goto begin_selftest;	// key is pressed again
     wait_about10ms();
    }
  // no key pressed for 2s
no_selftest:
  lcd_clear();
    162e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_fix2_string(VERSION_str);	//"Version ..."
    1632:	88 ed       	ldi	r24, 0xD8	; 216
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
  return;
    163a:	e4 c3       	rjmp	.+1992   	; 0x1e04 <AutoCheck+0x85a>
begin_selftest:
  lcd_line2();
    163c:	80 ec       	ldi	r24, 0xC0	; 192
    163e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix2_string(R0_str);		// "R0="
    1642:	80 ef       	ldi	r24, 0xF0	; 240
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[2]), (int8_t)0);	// clear zero offset
    164a:	82 ed       	ldi	r24, 0xD2	; 210
    164c:	91 e0       	ldi	r25, 0x01	; 1
    164e:	60 e0       	ldi	r22, 0x00	; 0
    1650:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__eewr_byte_m168>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (int8_t)0);	// clear zero offset
    1654:	83 ed       	ldi	r24, 0xD3	; 211
    1656:	91 e0       	ldi	r25, 0x01	; 1
    1658:	60 e0       	ldi	r22, 0x00	; 0
    165a:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__eewr_byte_m168>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)0);	// clear zero offset
    165e:	81 ed       	ldi	r24, 0xD1	; 209
    1660:	91 e0       	ldi	r25, 0x01	; 1
    1662:	60 e0       	ldi	r22, 0x00	; 0
    1664:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__eewr_byte_m168>

  adcmv[0] = GetESR(TP3, TP1);
    1668:	82 e0       	ldi	r24, 0x02	; 2
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	0e 94 38 1b 	call	0x3670	; 0x3670 <GetESR>
    1670:	7c 01       	movw	r14, r24
    1672:	9a 83       	std	Y+2, r25	; 0x02
    1674:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = GetESR(TP3, TP2);
    1676:	82 e0       	ldi	r24, 0x02	; 2
    1678:	61 e0       	ldi	r22, 0x01	; 1
    167a:	0e 94 38 1b 	call	0x3670	; 0x3670 <GetESR>
    167e:	6c 01       	movw	r12, r24
    1680:	9c 83       	std	Y+4, r25	; 0x04
    1682:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = GetESR(TP2, TP1);
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	60 e0       	ldi	r22, 0x00	; 0
    1688:	0e 94 38 1b 	call	0x3670	; 0x3670 <GetESR>
    168c:	5c 01       	movw	r10, r24
    168e:	9e 83       	std	Y+6, r25	; 0x06
    1690:	8d 83       	std	Y+5, r24	; 0x05
  DisplayValue(adcmv[0],-2,' ',3);
    1692:	b7 01       	movw	r22, r14
    1694:	88 27       	eor	r24, r24
    1696:	77 fd       	sbrc	r23, 7
    1698:	80 95       	com	r24
    169a:	98 2f       	mov	r25, r24
    169c:	4e ef       	ldi	r20, 0xFE	; 254
    169e:	20 e2       	ldi	r18, 0x20	; 32
    16a0:	03 e0       	ldi	r16, 0x03	; 3
    16a2:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
  DisplayValue(adcmv[1],-2,' ',3);
    16a6:	b6 01       	movw	r22, r12
    16a8:	88 27       	eor	r24, r24
    16aa:	77 fd       	sbrc	r23, 7
    16ac:	80 95       	com	r24
    16ae:	98 2f       	mov	r25, r24
    16b0:	4e ef       	ldi	r20, 0xFE	; 254
    16b2:	20 e2       	ldi	r18, 0x20	; 32
    16b4:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
  DisplayValue(adcmv[2],-2,LCD_CHAR_OMEGA,3);
    16b8:	b5 01       	movw	r22, r10
    16ba:	88 27       	eor	r24, r24
    16bc:	77 fd       	sbrc	r23, 7
    16be:	80 95       	com	r24
    16c0:	98 2f       	mov	r25, r24
    16c2:	4e ef       	ldi	r20, 0xFE	; 254
    16c4:	24 ef       	ldi	r18, 0xF4	; 244
    16c6:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
  if (adcmv[0] < 60) {
    16ca:	2c e3       	ldi	r18, 0x3C	; 60
    16cc:	e2 16       	cp	r14, r18
    16ce:	f1 04       	cpc	r15, r1
    16d0:	2c f4       	brge	.+10     	; 0x16dc <AutoCheck+0x132>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[2]), (int8_t)adcmv[0]);	// fix zero offset
    16d2:	82 ed       	ldi	r24, 0xD2	; 210
    16d4:	91 e0       	ldi	r25, 0x01	; 1
    16d6:	6e 2d       	mov	r22, r14
    16d8:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__eewr_byte_m168>
  }
  if (adcmv[1] < 60) {
    16dc:	8c e3       	ldi	r24, 0x3C	; 60
    16de:	c8 16       	cp	r12, r24
    16e0:	d1 04       	cpc	r13, r1
    16e2:	2c f4       	brge	.+10     	; 0x16ee <AutoCheck+0x144>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (int8_t)adcmv[1]);	// fix zero offset
    16e4:	83 ed       	ldi	r24, 0xD3	; 211
    16e6:	91 e0       	ldi	r25, 0x01	; 1
    16e8:	6c 2d       	mov	r22, r12
    16ea:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__eewr_byte_m168>
  }
  if (adcmv[2] < 60) {
    16ee:	ec e3       	ldi	r30, 0x3C	; 60
    16f0:	ae 16       	cp	r10, r30
    16f2:	b1 04       	cpc	r11, r1
    16f4:	2c f4       	brge	.+10     	; 0x1700 <AutoCheck+0x156>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
    16f6:	81 ed       	ldi	r24, 0xD1	; 209
    16f8:	91 e0       	ldi	r25, 0x01	; 1
    16fa:	6a 2d       	mov	r22, r10
    16fc:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__eewr_byte_m168>
  lcd_clear();
  lcd_fix_string(SELFTEST);		// "Selftest mode.."
  lcd_line2();
  lcd_data('?');			// wait for key pressed
  for (tt=0;tt<50;tt++) {
     if ((ON_PIN_REG & (1<<RST_PIN)) != 0) break;	// key is unpressed
    1700:	10 e0       	ldi	r17, 0x00	; 0
  }
  if (adcmv[2] < 60) {
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
  }
  for(tt=0;tt<12;tt++) {
     wait_about500ms();
    1702:	84 e6       	ldi	r24, 0x64	; 100
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    170a:	4f 9b       	sbis	0x09, 7	; 9
    170c:	7b c1       	rjmp	.+758    	; 0x1a04 <AutoCheck+0x45a>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (int8_t)adcmv[1]);	// fix zero offset
  }
  if (adcmv[2] < 60) {
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
  }
  for(tt=0;tt<12;tt++) {
    170e:	1f 5f       	subi	r17, 0xFF	; 255
    1710:	1c 30       	cpi	r17, 0x0C	; 12
    1712:	b9 f7       	brne	.-18     	; 0x1702 <AutoCheck+0x158>
    1714:	77 c1       	rjmp	.+750    	; 0x1a04 <AutoCheck+0x45a>

 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
        lcd_line2();			//Cursor to column 1, row 2
    1716:	80 ec       	ldi	r24, 0xC0	; 192
    1718:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_clear_line();		// clear total line
    171c:	0e 94 8f 02 	call	0x51e	; 0x51e <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    1720:	80 e8       	ldi	r24, 0x80	; 128
    1722:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_clear_line();		// clear total line
    1726:	0e 94 8f 02 	call	0x51e	; 0x51e <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    172a:	80 e8       	ldi	r24, 0x80	; 128
    172c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_data('T');			//output the Testmode "T"
    1730:	84 e5       	ldi	r24, 0x54	; 84
    1732:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
        lcd_string(utoa(tt, outval, 10));	//output Test number
    1736:	8c 2d       	mov	r24, r12
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	6c e0       	ldi	r22, 0x0C	; 12
    173c:	71 e0       	ldi	r23, 0x01	; 1
    173e:	4a e0       	ldi	r20, 0x0A	; 10
    1740:	50 e0       	ldi	r21, 0x00	; 0
    1742:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <utoa>
    1746:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
        lcd_space();
    174a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
                                        //############################################
        if (tt == 1) {   // output of reference voltage and factors for capacity measurement
    174e:	fc 2d       	mov	r31, r12
    1750:	f1 30       	cpi	r31, 0x01	; 1
    1752:	41 f5       	brne	.+80     	; 0x17a4 <AutoCheck+0x1fa>
           Calibrate_UR();		// get Reference voltage, Pin resistance
    1754:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <Calibrate_UR>
           lcd_fix2_string(URefT);	//"URef="
    1758:	86 ee       	ldi	r24, 0xE6	; 230
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
           DisplayValue(ref_mv,-3,'V',4);
    1760:	60 91 44 01 	lds	r22, 0x0144
    1764:	70 91 45 01 	lds	r23, 0x0145
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	4d ef       	ldi	r20, 0xFD	; 253
    176e:	26 e5       	ldi	r18, 0x56	; 86
    1770:	04 e0       	ldi	r16, 0x04	; 4
    1772:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
           lcd_line2();			//Cursor to column 1, row 2
    1776:	80 ec       	ldi	r24, 0xC0	; 192
    1778:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
           lcd_fix2_string(RHfakt);	//"RHf="
    177c:	8b ee       	ldi	r24, 0xEB	; 235
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
           lcd_string(utoa(RHmultip, outval, 10));
    1784:	80 91 00 01 	lds	r24, 0x0100
    1788:	90 91 01 01 	lds	r25, 0x0101
    178c:	6c e0       	ldi	r22, 0x0C	; 12
    178e:	71 e0       	ldi	r23, 0x01	; 1
    1790:	4a e0       	ldi	r20, 0x0A	; 10
    1792:	50 e0       	ldi	r21, 0x00	; 0
    1794:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <utoa>
    1798:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
           ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    179c:	2e eb       	ldi	r18, 0xBE	; 190
    179e:	20 93 3c 01 	sts	0x013C, r18
    17a2:	12 c1       	rjmp	.+548    	; 0x19c8 <AutoCheck+0x41e>
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
    17a4:	8c 2d       	mov	r24, r12
    17a6:	82 30       	cpi	r24, 0x02	; 2
    17a8:	99 f5       	brne	.+102    	; 0x1810 <AutoCheck+0x266>
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    17aa:	60 91 40 01 	lds	r22, 0x0140
    17ae:	70 91 41 01 	lds	r23, 0x0141
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	2e e4       	ldi	r18, 0x4E	; 78
    17b8:	3b e1       	ldi	r19, 0x1B	; 27
    17ba:	40 e0       	ldi	r20, 0x00	; 0
    17bc:	50 e0       	ldi	r21, 0x00	; 0
    17be:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
    17c2:	a4 01       	movw	r20, r8
    17c4:	93 01       	movw	r18, r6
    17c6:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <__divmodsi4>
    17ca:	89 01       	movw	r16, r18
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	85 b9       	out	0x05, r24	; 5
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
    17d0:	e5 e0       	ldi	r30, 0x05	; 5
    17d2:	e4 b9       	out	0x04, r30	; 4
           adcmv[0] = W20msReadADC(TP1);
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	0e 94 c6 1a 	call	0x358c	; 0x358c <W20msReadADC>
           adcmv[0] -= u680;
    17da:	80 1b       	sub	r24, r16
    17dc:	91 0b       	sbc	r25, r17
    17de:	9a 83       	std	Y+2, r25	; 0x02
    17e0:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//RL3 to -
    17e2:	f1 e1       	ldi	r31, 0x11	; 17
    17e4:	f4 b9       	out	0x04, r31	; 4
           adcmv[1] = W20msReadADC(TP1);
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	0e 94 c6 1a 	call	0x358c	; 0x358c <W20msReadADC>
           adcmv[1] -= u680;
    17ec:	80 1b       	sub	r24, r16
    17ee:	91 0b       	sbc	r25, r17
    17f0:	9c 83       	std	Y+4, r25	; 0x04
    17f2:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 1<<(TP2*2);		//RL2 to VCC
    17f4:	24 e0       	ldi	r18, 0x04	; 4
    17f6:	25 b9       	out	0x05, r18	; 5
           R_DDR = (1<<(TP2*2)) | (1<<(TP3*2));	//RL3 to -
    17f8:	84 e1       	ldi	r24, 0x14	; 20
    17fa:	84 b9       	out	0x04, r24	; 4
           adcmv[2] = W20msReadADC(TP2);
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	0e 94 c6 1a 	call	0x358c	; 0x358c <W20msReadADC>
           adcmv[2] -= u680;
    1802:	80 1b       	sub	r24, r16
    1804:	91 0b       	sbc	r25, r17
    1806:	9e 83       	std	Y+6, r25	; 0x06
    1808:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RLRL);	// "RLRL"
    180a:	8d e5       	ldi	r24, 0x5D	; 93
    180c:	91 e0       	ldi	r25, 0x01	; 1
    180e:	b1 c0       	rjmp	.+354    	; 0x1972 <AutoCheck+0x3c8>
        }
                                        //############################################
        if (tt == 3) { // how equal are the RH resistors
    1810:	ec 2d       	mov	r30, r12
    1812:	e3 30       	cpi	r30, 0x03	; 3
    1814:	41 f5       	brne	.+80     	; 0x1866 <AutoCheck+0x2bc>
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    1816:	f5 b8       	out	0x05, r15	; 5
           R_DDR = (2<<(TP1*2)) | (2<<(TP2*2));	//RH2 to -
    1818:	fa e0       	ldi	r31, 0x0A	; 10
    181a:	f4 b9       	out	0x04, r31	; 4
           adcmv[0] = W20msReadADC(TP1);
    181c:	80 e0       	ldi	r24, 0x00	; 0
    181e:	0e 94 c6 1a 	call	0x358c	; 0x358c <W20msReadADC>
           adcmv[3] = ADCconfig.U_AVCC / 2;
    1822:	00 91 40 01 	lds	r16, 0x0140
    1826:	10 91 41 01 	lds	r17, 0x0141
    182a:	16 95       	lsr	r17
    182c:	07 95       	ror	r16
    182e:	18 87       	std	Y+8, r17	; 0x08
    1830:	0f 83       	std	Y+7, r16	; 0x07
           adcmv[0] -= adcmv[3];
    1832:	80 1b       	sub	r24, r16
    1834:	91 0b       	sbc	r25, r17
    1836:	9a 83       	std	Y+2, r25	; 0x02
    1838:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (2<<(TP1*2)) | (2<<(TP3*2));	//RH3 to -
    183a:	22 e2       	ldi	r18, 0x22	; 34
    183c:	24 b9       	out	0x04, r18	; 4
           adcmv[1] = W20msReadADC(TP1);
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	0e 94 c6 1a 	call	0x358c	; 0x358c <W20msReadADC>
           adcmv[1] -= adcmv[3];
    1844:	80 1b       	sub	r24, r16
    1846:	91 0b       	sbc	r25, r17
    1848:	9c 83       	std	Y+4, r25	; 0x04
    184a:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 2<<(TP2*2);		//RH2 to VCC
    184c:	e5 b8       	out	0x05, r14	; 5
           R_DDR = (2<<(TP2*2)) | (2<<(TP3*2));	//RH3 to -
    184e:	88 e2       	ldi	r24, 0x28	; 40
    1850:	84 b9       	out	0x04, r24	; 4
           adcmv[2] = W20msReadADC(TP2);
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	0e 94 c6 1a 	call	0x358c	; 0x358c <W20msReadADC>
           adcmv[2] -= adcmv[3];
    1858:	80 1b       	sub	r24, r16
    185a:	91 0b       	sbc	r25, r17
    185c:	9e 83       	std	Y+6, r25	; 0x06
    185e:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RHRH);	// "RHRH"
    1860:	8b e6       	ldi	r24, 0x6B	; 107
    1862:	91 e0       	ldi	r25, 0x01	; 1
    1864:	86 c0       	rjmp	.+268    	; 0x1972 <AutoCheck+0x3c8>
        }
                                        //############################################
        if (tt == 4) { // Text release probes
    1866:	ec 2d       	mov	r30, r12
    1868:	e4 30       	cpi	r30, 0x04	; 4
    186a:	51 f4       	brne	.+20     	; 0x1880 <AutoCheck+0x2d6>
           lcd_fix_string(RELPROBE);	// "Release Probes"
    186c:	8d ec       	ldi	r24, 0xCD	; 205
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           if (AllProbesShorted() != 0) ww = MAX_REP-2;
    1874:	0e 94 c3 0a 	call	0x1586	; 0x1586 <AllProbesShorted>
    1878:	88 23       	and	r24, r24
    187a:	09 f0       	breq	.+2      	; 0x187e <AutoCheck+0x2d4>
    187c:	c0 c2       	rjmp	.+1408   	; 0x1dfe <AutoCheck+0x854>
    187e:	7f c0       	rjmp	.+254    	; 0x197e <AutoCheck+0x3d4>
        }
                                        //############################################
        if (tt == 5) { // can we switch the ADC pins to GND across R_H resistor?
    1880:	fc 2d       	mov	r31, r12
    1882:	f5 30       	cpi	r31, 0x05	; 5
    1884:	b1 f4       	brne	.+44     	; 0x18b2 <AutoCheck+0x308>
           R_PORT = 0;
    1886:	15 b8       	out	0x05, r1	; 5
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to GND
    1888:	f4 b8       	out	0x04, r15	; 4
           adcmv[0] = W20msReadADC(TP1);
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	0e 94 c6 1a 	call	0x358c	; 0x358c <W20msReadADC>
    1890:	9a 83       	std	Y+2, r25	; 0x02
    1892:	89 83       	std	Y+1, r24	; 0x01

           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to GND
    1894:	e4 b8       	out	0x04, r14	; 4
           adcmv[1] = W20msReadADC(TP2);
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	0e 94 c6 1a 	call	0x358c	; 0x358c <W20msReadADC>
    189c:	9c 83       	std	Y+4, r25	; 0x04
    189e:	8b 83       	std	Y+3, r24	; 0x03

           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    18a0:	b4 b8       	out	0x04, r11	; 4
           adcmv[2] = W20msReadADC(TP3);
    18a2:	82 e0       	ldi	r24, 0x02	; 2
    18a4:	0e 94 c6 1a 	call	0x358c	; 0x358c <W20msReadADC>
    18a8:	9e 83       	std	Y+6, r25	; 0x06
    18aa:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RH1L);	// "RH_Lo="
    18ac:	85 e5       	ldi	r24, 0x55	; 85
    18ae:	91 e0       	ldi	r25, 0x01	; 1
    18b0:	60 c0       	rjmp	.+192    	; 0x1972 <AutoCheck+0x3c8>
        }
                                        //############################################
        if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
    18b2:	2c 2d       	mov	r18, r12
    18b4:	26 30       	cpi	r18, 0x06	; 6
    18b6:	51 f5       	brne	.+84     	; 0x190c <AutoCheck+0x362>
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to VCC
    18b8:	f4 b8       	out	0x04, r15	; 4
           R_PORT = 2<<(TP1*2);
    18ba:	f5 b8       	out	0x05, r15	; 5
           adcmv[0] = W20msReadADC(TP1) - ADCconfig.U_AVCC;
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	0e 94 c6 1a 	call	0x358c	; 0x358c <W20msReadADC>
    18c2:	20 91 40 01 	lds	r18, 0x0140
    18c6:	30 91 41 01 	lds	r19, 0x0141
    18ca:	82 1b       	sub	r24, r18
    18cc:	93 0b       	sbc	r25, r19
    18ce:	9a 83       	std	Y+2, r25	; 0x02
    18d0:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to VCC
    18d2:	e4 b8       	out	0x04, r14	; 4
           R_PORT = 2<<(TP2*2);
    18d4:	e5 b8       	out	0x05, r14	; 5
           adcmv[1] = W20msReadADC(TP2) - ADCconfig.U_AVCC;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	0e 94 c6 1a 	call	0x358c	; 0x358c <W20msReadADC>
    18dc:	20 91 40 01 	lds	r18, 0x0140
    18e0:	30 91 41 01 	lds	r19, 0x0141
    18e4:	82 1b       	sub	r24, r18
    18e6:	93 0b       	sbc	r25, r19
    18e8:	9c 83       	std	Y+4, r25	; 0x04
    18ea:	8b 83       	std	Y+3, r24	; 0x03
           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to VCC
    18ec:	b4 b8       	out	0x04, r11	; 4
           R_PORT = 2<<(TP3*2);
    18ee:	b5 b8       	out	0x05, r11	; 5
           adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
    18f0:	82 e0       	ldi	r24, 0x02	; 2
    18f2:	0e 94 c6 1a 	call	0x358c	; 0x358c <W20msReadADC>
    18f6:	20 91 40 01 	lds	r18, 0x0140
    18fa:	30 91 41 01 	lds	r19, 0x0141
    18fe:	82 1b       	sub	r24, r18
    1900:	93 0b       	sbc	r25, r19
    1902:	9e 83       	std	Y+6, r25	; 0x06
    1904:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RH1H);	// "RH_Hi="
    1906:	89 e5       	ldi	r24, 0x59	; 89
    1908:	91 e0       	ldi	r25, 0x01	; 1
    190a:	33 c0       	rjmp	.+102    	; 0x1972 <AutoCheck+0x3c8>
        }
        if (tt == 7) { // can we switch the ADC pins to VCC across the R_H resistor?
    190c:	8c 2d       	mov	r24, r12
    190e:	87 30       	cpi	r24, 0x07	; 7
    1910:	99 f5       	brne	.+102    	; 0x1978 <AutoCheck+0x3ce>
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_H_VAL*100));
    1912:	60 91 40 01 	lds	r22, 0x0140
    1916:	70 91 41 01 	lds	r23, 0x0141
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	2e e4       	ldi	r18, 0x4E	; 78
    1920:	3b e1       	ldi	r19, 0x1B	; 27
    1922:	40 e0       	ldi	r20, 0x00	; 0
    1924:	50 e0       	ldi	r21, 0x00	; 0
    1926:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
    192a:	a2 01       	movw	r20, r4
    192c:	91 01       	movw	r18, r2
    192e:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <__divmodsi4>
    1932:	89 01       	movw	r16, r18
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    1934:	f5 b8       	out	0x05, r15	; 5
           R_DDR = (2<<(TP1*2)) | (1<<(TP1*2));	//RH1 to +, RL1 to -
    1936:	e3 e0       	ldi	r30, 0x03	; 3
    1938:	e4 b9       	out	0x04, r30	; 4
           adcmv[0] = W20msReadADC(TP1);
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	0e 94 c6 1a 	call	0x358c	; 0x358c <W20msReadADC>
           adcmv[0] -= u680;
    1940:	80 1b       	sub	r24, r16
    1942:	91 0b       	sbc	r25, r17
    1944:	9a 83       	std	Y+2, r25	; 0x02
    1946:	89 83       	std	Y+1, r24	; 0x01
           R_PORT = 2<<(TP2*2);		//RH2 to VCC
    1948:	e5 b8       	out	0x05, r14	; 5
           R_DDR = (2<<(TP2*2)) | (1<<(TP2*2));	//RH2 to +, RL2 to -
    194a:	fc e0       	ldi	r31, 0x0C	; 12
    194c:	f4 b9       	out	0x04, r31	; 4
           adcmv[1] = W20msReadADC(TP2);
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	0e 94 c6 1a 	call	0x358c	; 0x358c <W20msReadADC>
           adcmv[1] -= u680;
    1954:	80 1b       	sub	r24, r16
    1956:	91 0b       	sbc	r25, r17
    1958:	9c 83       	std	Y+4, r25	; 0x04
    195a:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 2<<(TP3*2);		//RH3 to VCC
    195c:	b5 b8       	out	0x05, r11	; 5
           R_DDR = (2<<(TP3*2)) | (1<<(TP3*2));	//RH3 to +, RL3 to -
    195e:	d4 b8       	out	0x04, r13	; 4
           adcmv[2] = W20msReadADC(TP3);
    1960:	82 e0       	ldi	r24, 0x02	; 2
    1962:	0e 94 c6 1a 	call	0x358c	; 0x358c <W20msReadADC>
           adcmv[2] -= u680;
    1966:	80 1b       	sub	r24, r16
    1968:	91 0b       	sbc	r25, r17
    196a:	9e 83       	std	Y+6, r25	; 0x06
    196c:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RHRL);	// "RH/RL"
    196e:	89 e7       	ldi	r24, 0x79	; 121
    1970:	91 e0       	ldi	r25, 0x01	; 1
    1972:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    1976:	03 c0       	rjmp	.+6      	; 0x197e <AutoCheck+0x3d4>
        }
                                        //############################################
        if (tt > 1) {	// output 3 voltages 
    1978:	2c 2d       	mov	r18, r12
    197a:	21 30       	cpi	r18, 0x01	; 1
    197c:	29 f1       	breq	.+74     	; 0x19c8 <AutoCheck+0x41e>
           lcd_line2();			//Cursor to column 1, row 2
    197e:	80 ec       	ldi	r24, 0xC0	; 192
    1980:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
           lcd_string(itoa(adcmv[0], outval, 10));	//output voltage 1
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	9a 81       	ldd	r25, Y+2	; 0x02
    1988:	6c e0       	ldi	r22, 0x0C	; 12
    198a:	71 e0       	ldi	r23, 0x01	; 1
    198c:	4a e0       	ldi	r20, 0x0A	; 10
    198e:	50 e0       	ldi	r21, 0x00	; 0
    1990:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <itoa>
    1994:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
           lcd_space();
    1998:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
           lcd_string(itoa(adcmv[1], outval, 10));	//output voltage 2
    199c:	8b 81       	ldd	r24, Y+3	; 0x03
    199e:	9c 81       	ldd	r25, Y+4	; 0x04
    19a0:	6c e0       	ldi	r22, 0x0C	; 12
    19a2:	71 e0       	ldi	r23, 0x01	; 1
    19a4:	4a e0       	ldi	r20, 0x0A	; 10
    19a6:	50 e0       	ldi	r21, 0x00	; 0
    19a8:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <itoa>
    19ac:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
           lcd_space();
    19b0:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
           lcd_string(itoa(adcmv[2], outval, 10));	//output voltage 3
    19b4:	8d 81       	ldd	r24, Y+5	; 0x05
    19b6:	9e 81       	ldd	r25, Y+6	; 0x06
    19b8:	6c e0       	ldi	r22, 0x0C	; 12
    19ba:	71 e0       	ldi	r23, 0x01	; 1
    19bc:	4a e0       	ldi	r20, 0x0A	; 10
    19be:	50 e0       	ldi	r21, 0x00	; 0
    19c0:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <itoa>
    19c4:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
        }
        ADC_DDR =  TXD_MSK;		// all-Pins to Input
    19c8:	e7 b8       	out	0x07, r14	; 7
        ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
    19ca:	e8 b8       	out	0x08, r14	; 8
        R_DDR = 0;			// all R-Ports to Input
    19cc:	14 b8       	out	0x04, r1	; 4
        R_PORT = 0;
    19ce:	15 b8       	out	0x05, r1	; 5
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    19d0:	4f 9b       	sbis	0x09, 7	; 9
    19d2:	0f c0       	rjmp	.+30     	; 0x19f2 <AutoCheck+0x448>
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
    19d4:	84 e6       	ldi	r24, 0x64	; 100
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    19dc:	4f 9b       	sbis	0x09, 7	; 9
    19de:	09 c0       	rjmp	.+18     	; 0x19f2 <AutoCheck+0x448>
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
    19e0:	84 e6       	ldi	r24, 0x64	; 100
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
  } /* end for tt */

 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
    19e8:	a3 94       	inc	r10
    19ea:	8a 2d       	mov	r24, r10
    19ec:	84 30       	cpi	r24, 0x04	; 4
    19ee:	08 f4       	brcc	.+2      	; 0x19f2 <AutoCheck+0x448>
    19f0:	92 ce       	rjmp	.-732    	; 0x1716 <AutoCheck+0x16c>
    19f2:	1c 2d       	mov	r17, r12
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
     } //end for ww
     wait_about1s();
    19f4:	88 ec       	ldi	r24, 0xC8	; 200
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
     }
  } /* end for tt */

 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    19fc:	1f 5f       	subi	r17, 0xFF	; 255
    19fe:	18 30       	cpi	r17, 0x08	; 8
    1a00:	89 f4       	brne	.+34     	; 0x1a24 <AutoCheck+0x47a>
    1a02:	19 c0       	rjmp	.+50     	; 0x1a36 <AutoCheck+0x48c>
  if (adcmv[2] < 60) {
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
  }
  for(tt=0;tt<12;tt++) {
     wait_about500ms();
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    1a04:	11 e0       	ldi	r17, 0x01	; 1
           R_PORT = 2<<(TP3*2);
           adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
           lcd_fix_string(RH1H);	// "RH_Hi="
        }
        if (tt == 7) { // can we switch the ADC pins to VCC across the R_H resistor?
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_H_VAL*100));
    1a06:	4e ea       	ldi	r20, 0xAE	; 174
    1a08:	24 2e       	mov	r2, r20
    1a0a:	42 ed       	ldi	r20, 0xD2	; 210
    1a0c:	34 2e       	mov	r3, r20
    1a0e:	47 e4       	ldi	r20, 0x47	; 71
    1a10:	44 2e       	mov	r4, r20
    1a12:	51 2c       	mov	r5, r1
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    1a14:	32 e0       	ldi	r19, 0x02	; 2
    1a16:	f3 2e       	mov	r15, r19
           R_DDR = (2<<(TP1*2)) | (1<<(TP1*2));	//RH1 to +, RL1 to -
           adcmv[0] = W20msReadADC(TP1);
           adcmv[0] -= u680;
           R_PORT = 2<<(TP2*2);		//RH2 to VCC
    1a18:	28 e0       	ldi	r18, 0x08	; 8
    1a1a:	e2 2e       	mov	r14, r18
           R_DDR = (2<<(TP2*2)) | (1<<(TP2*2));	//RH2 to +, RL2 to -
           adcmv[1] = W20msReadADC(TP2);
           adcmv[1] -= u680;
           R_PORT = 2<<(TP3*2);		//RH3 to VCC
    1a1c:	90 e2       	ldi	r25, 0x20	; 32
    1a1e:	b9 2e       	mov	r11, r25
           R_DDR = (2<<(TP3*2)) | (1<<(TP3*2));	//RH3 to +, RL3 to -
    1a20:	80 e3       	ldi	r24, 0x30	; 48
    1a22:	d8 2e       	mov	r13, r24
  lcd_clear();
  lcd_fix_string(SELFTEST);		// "Selftest mode.."
  lcd_line2();
  lcd_data('?');			// wait for key pressed
  for (tt=0;tt<50;tt++) {
     if ((ON_PIN_REG & (1<<RST_PIN)) != 0) break;	// key is unpressed
    1a24:	aa 24       	eor	r10, r10
           lcd_string(utoa(RHmultip, outval, 10));
           ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1a26:	0a eb       	ldi	r16, 0xBA	; 186
    1a28:	60 2e       	mov	r6, r16
    1a2a:	06 e3       	ldi	r16, 0x36	; 54
    1a2c:	70 2e       	mov	r7, r16
    1a2e:	81 2c       	mov	r8, r1
    1a30:	91 2c       	mov	r9, r1
    1a32:	c1 2e       	mov	r12, r17
    1a34:	70 ce       	rjmp	.-800    	; 0x1716 <AutoCheck+0x16c>
        wait_about500ms();
     } //end for ww
     wait_about1s();
  } //end for tt

  lcd_clear();
    1a36:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_fix_string(RIHI);	// "RiHi="
    1a3a:	8f e7       	ldi	r24, 0x7F	; 127
    1a3c:	91 e0       	ldi	r25, 0x01	; 1
    1a3e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  DisplayValue(RRpinPL,-1,LCD_CHAR_OMEGA,3);
    1a42:	60 91 42 01 	lds	r22, 0x0142
    1a46:	70 91 43 01 	lds	r23, 0x0143
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	4f ef       	ldi	r20, 0xFF	; 255
    1a50:	24 ef       	ldi	r18, 0xF4	; 244
    1a52:	03 e0       	ldi	r16, 0x03	; 3
    1a54:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
  lcd_line2();
    1a58:	80 ec       	ldi	r24, 0xC0	; 192
    1a5a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(RILO);	// "RiLo="
    1a5e:	86 e8       	ldi	r24, 0x86	; 134
    1a60:	91 e0       	ldi	r25, 0x01	; 1
    1a62:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  DisplayValue(RRpinMI,-1,LCD_CHAR_OMEGA,3);
    1a66:	60 91 47 01 	lds	r22, 0x0147
    1a6a:	70 91 48 01 	lds	r23, 0x0148
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	4f ef       	ldi	r20, 0xFF	; 255
    1a74:	24 ef       	ldi	r18, 0xF4	; 244
    1a76:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
  wait_about2s();			//wait 2 seconds
    1a7a:	80 e9       	ldi	r24, 0x90	; 144
    1a7c:	91 e0       	ldi	r25, 0x01	; 1
    1a7e:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>

  //measure Zero offset for Capacity measurement
  adcmv[3] = 0;
    1a82:	18 86       	std	Y+8, r1	; 0x08
    1a84:	1f 82       	std	Y+7, r1	; 0x07
  PartFound = PART_NONE;
    1a86:	10 92 07 01 	sts	0x0107, r1
  ReadCapacity(TP3, TP1);
    1a8a:	82 e0       	ldi	r24, 0x02	; 2
    1a8c:	60 e0       	ldi	r22, 0x00	; 0
    1a8e:	0e 94 21 15 	call	0x2a42	; 0x2a42 <ReadCapacity>
  adcmv[5] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:3
    1a92:	00 91 6a 01 	lds	r16, 0x016A
    1a96:	10 91 6b 01 	lds	r17, 0x016B
    1a9a:	1c 87       	std	Y+12, r17	; 0x0c
    1a9c:	0b 87       	std	Y+11, r16	; 0x0b
  ReadCapacity(TP3, TP2);
    1a9e:	82 e0       	ldi	r24, 0x02	; 2
    1aa0:	61 e0       	ldi	r22, 0x01	; 1
    1aa2:	0e 94 21 15 	call	0x2a42	; 0x2a42 <ReadCapacity>
  adcmv[6] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:3
    1aa6:	e0 90 6a 01 	lds	r14, 0x016A
    1aaa:	f0 90 6b 01 	lds	r15, 0x016B
    1aae:	fe 86       	std	Y+14, r15	; 0x0e
    1ab0:	ed 86       	std	Y+13, r14	; 0x0d
  ReadCapacity(TP2, TP1);
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	60 e0       	ldi	r22, 0x00	; 0
    1ab6:	0e 94 21 15 	call	0x2a42	; 0x2a42 <ReadCapacity>
  adcmv[2] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:2
    1aba:	c0 90 6a 01 	lds	r12, 0x016A
    1abe:	d0 90 6b 01 	lds	r13, 0x016B
    1ac2:	de 82       	std	Y+6, r13	; 0x06
    1ac4:	cd 82       	std	Y+5, r12	; 0x05
  ReadCapacity(TP1, TP3);
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	62 e0       	ldi	r22, 0x02	; 2
    1aca:	0e 94 21 15 	call	0x2a42	; 0x2a42 <ReadCapacity>
  adcmv[1] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:1
    1ace:	80 91 6a 01 	lds	r24, 0x016A
    1ad2:	90 91 6b 01 	lds	r25, 0x016B
    1ad6:	9c 83       	std	Y+4, r25	; 0x04
    1ad8:	8b 83       	std	Y+3, r24	; 0x03
  ReadCapacity(TP2, TP3);
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	62 e0       	ldi	r22, 0x02	; 2
    1ade:	0e 94 21 15 	call	0x2a42	; 0x2a42 <ReadCapacity>
  adcmv[4] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:2
    1ae2:	80 91 6a 01 	lds	r24, 0x016A
    1ae6:	90 91 6b 01 	lds	r25, 0x016B
    1aea:	9a 87       	std	Y+10, r25	; 0x0a
    1aec:	89 87       	std	Y+9, r24	; 0x09
  ReadCapacity(TP1, TP2);
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	61 e0       	ldi	r22, 0x01	; 1
    1af2:	0e 94 21 15 	call	0x2a42	; 0x2a42 <ReadCapacity>
  adcmv[0] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:1
    1af6:	80 91 6a 01 	lds	r24, 0x016A
    1afa:	90 91 6b 01 	lds	r25, 0x016B
    1afe:	9a 83       	std	Y+2, r25	; 0x02
    1b00:	89 83       	std	Y+1, r24	; 0x01
  lcd_clear();
    1b02:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_fix_string(C0_str);			//output "C0 "
    1b06:	8d e8       	ldi	r24, 0x8D	; 141
    1b08:	91 e0       	ldi	r25, 0x01	; 1
    1b0a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
    1b0e:	b8 01       	movw	r22, r16
    1b10:	88 27       	eor	r24, r24
    1b12:	77 fd       	sbrc	r23, 7
    1b14:	80 95       	com	r24
    1b16:	98 2f       	mov	r25, r24
    1b18:	40 e0       	ldi	r20, 0x00	; 0
    1b1a:	20 e2       	ldi	r18, 0x20	; 32
    1b1c:	03 e0       	ldi	r16, 0x03	; 3
    1b1e:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
    1b22:	b7 01       	movw	r22, r14
    1b24:	88 27       	eor	r24, r24
    1b26:	77 fd       	sbrc	r23, 7
    1b28:	80 95       	com	r24
    1b2a:	98 2f       	mov	r25, r24
    1b2c:	40 e0       	ldi	r20, 0x00	; 0
    1b2e:	20 e2       	ldi	r18, 0x20	; 32
    1b30:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
    1b34:	b6 01       	movw	r22, r12
    1b36:	88 27       	eor	r24, r24
    1b38:	77 fd       	sbrc	r23, 7
    1b3a:	80 95       	com	r24
    1b3c:	98 2f       	mov	r25, r24
    1b3e:	44 ef       	ldi	r20, 0xF4	; 244
    1b40:	26 e4       	ldi	r18, 0x46	; 70
    1b42:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
    1b46:	8e 01       	movw	r16, r28
    1b48:	0f 5f       	subi	r16, 0xFF	; 255
    1b4a:	1f 4f       	sbci	r17, 0xFF	; 255
void AutoCheck(void) {
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	0f 96       	adiw	r24, 0x0f	; 15
    1b50:	f8 01       	movw	r30, r16
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
    1b52:	21 91       	ld	r18, Z+
    1b54:	31 91       	ld	r19, Z+
    1b56:	27 34       	cpi	r18, 0x47	; 71
    1b58:	31 05       	cpc	r19, r1
    1b5a:	ec f4       	brge	.+58     	; 0x1b96 <AutoCheck+0x5ec>
  lcd_fix_string(C0_str);			//output "C0 "
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
    1b5c:	e8 17       	cp	r30, r24
    1b5e:	f9 07       	cpc	r31, r25
    1b60:	c1 f7       	brne	.-16     	; 0x1b52 <AutoCheck+0x5a8>
    1b62:	ee 24       	eor	r14, r14
    1b64:	ff 24       	eor	r15, r15
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
    1b66:	f8 01       	movw	r30, r16
    1b68:	60 81       	ld	r22, Z
    1b6a:	0e 5f       	subi	r16, 0xFE	; 254
    1b6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6e:	61 5f       	subi	r22, 0xF1	; 241
    1b70:	c7 01       	movw	r24, r14
    1b72:	87 53       	subi	r24, 0x37	; 55
    1b74:	9e 4f       	sbci	r25, 0xFE	; 254
    1b76:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__eewr_byte_m168>
    1b7a:	08 94       	sec
    1b7c:	e1 1c       	adc	r14, r1
    1b7e:	f1 1c       	adc	r15, r1
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
    1b80:	f7 e0       	ldi	r31, 0x07	; 7
    1b82:	ef 16       	cp	r14, r31
    1b84:	f1 04       	cpc	r15, r1
    1b86:	79 f7       	brne	.-34     	; 0x1b66 <AutoCheck+0x5bc>
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
  }
  lcd_line2();
    1b88:	80 ec       	ldi	r24, 0xC0	; 192
    1b8a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(OK_str);		// output "OK"
    1b8e:	8b ee       	ldi	r24, 0xEB	; 235
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
no_c0save:
 #endif
 wait_about2s();		//wait 2 seconds
    1b96:	80 e9       	ldi	r24, 0x90	; 144
    1b98:	91 e0       	ldi	r25, 0x01	; 1
    1b9a:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
    1b9e:	10 e0       	ldi	r17, 0x00	; 0
 for (ww=0;ww<64;ww++) {
    1ba0:	cc 24       	eor	r12, r12
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
    1ba2:	ba e0       	ldi	r27, 0x0A	; 10
    1ba4:	8b 2e       	mov	r8, r27
    1ba6:	91 2c       	mov	r9, r1
    1ba8:	a1 2c       	mov	r10, r1
    1baa:	b1 2c       	mov	r11, r1
     lcd_data('3');
     lcd_fix2_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1bac:	a2 e6       	ldi	r26, 0x62	; 98
    1bae:	ea 2e       	mov	r14, r26
    1bb0:	a1 e0       	ldi	r26, 0x01	; 1
    1bb2:	fa 2e       	mov	r15, r26
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
     lcd_clear();
    1bb4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
     lcd_data('1');
    1bb8:	81 e3       	ldi	r24, 0x31	; 49
    1bba:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
     lcd_fix_string(CapZeich);	// "-||-"
    1bbe:	8d e1       	ldi	r24, 0x1D	; 29
    1bc0:	91 e0       	ldi	r25, 0x01	; 1
    1bc2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_data('3');
    1bc6:	83 e3       	ldi	r24, 0x33	; 51
    1bc8:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
     lcd_fix2_string(MinCap_str); // " >100nF!"
    1bcc:	84 ef       	ldi	r24, 0xF4	; 244
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
     PartFound = PART_NONE;
    1bd4:	10 92 07 01 	sts	0x0107, r1
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
    1bd8:	82 e0       	ldi	r24, 0x02	; 2
    1bda:	60 e0       	ldi	r22, 0x00	; 0
    1bdc:	0e 94 21 15 	call	0x2a42	; 0x2a42 <ReadCapacity>
    1be0:	20 91 62 01 	lds	r18, 0x0162
    1be4:	30 91 63 01 	lds	r19, 0x0163
    1be8:	40 91 64 01 	lds	r20, 0x0164
    1bec:	50 91 65 01 	lds	r21, 0x0165
    1bf0:	00 91 74 01 	lds	r16, 0x0174
     while (cap.cpre < -9) {
    1bf4:	07 c0       	rjmp	.+14     	; 0x1c04 <AutoCheck+0x65a>
        cap.cpre++;
        cap.cval /= 10;
    1bf6:	ca 01       	movw	r24, r20
    1bf8:	b9 01       	movw	r22, r18
    1bfa:	a5 01       	movw	r20, r10
    1bfc:	94 01       	movw	r18, r8
    1bfe:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
    1c02:	0f 5f       	subi	r16, 0xFF	; 255
     lcd_data('3');
     lcd_fix2_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1c04:	07 3f       	cpi	r16, 0xF7	; 247
    1c06:	bc f3       	brlt	.-18     	; 0x1bf6 <AutoCheck+0x64c>
    1c08:	00 93 74 01 	sts	0x0174, r16
    1c0c:	20 93 62 01 	sts	0x0162, r18
    1c10:	f7 01       	movw	r30, r14
    1c12:	31 83       	std	Z+1, r19	; 0x01
    1c14:	42 83       	std	Z+2, r20	; 0x02
    1c16:	53 83       	std	Z+3, r21	; 0x03
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1c18:	07 3f       	cpi	r16, 0xF7	; 247
    1c1a:	09 f0       	breq	.+2      	; 0x1c1e <AutoCheck+0x674>
    1c1c:	b9 c0       	rjmp	.+370    	; 0x1d90 <AutoCheck+0x7e6>
    1c1e:	20 36       	cpi	r18, 0x60	; 96
    1c20:	31 05       	cpc	r19, r1
    1c22:	41 05       	cpc	r20, r1
    1c24:	51 05       	cpc	r21, r1
    1c26:	08 f4       	brcc	.+2      	; 0x1c2a <AutoCheck+0x680>
    1c28:	b3 c0       	rjmp	.+358    	; 0x1d90 <AutoCheck+0x7e6>
    1c2a:	20 3f       	cpi	r18, 0xF0	; 240
    1c2c:	f5 e5       	ldi	r31, 0x55	; 85
    1c2e:	3f 07       	cpc	r19, r31
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	4f 07       	cpc	r20, r31
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	5f 07       	cpc	r21, r31
    1c38:	08 f0       	brcs	.+2      	; 0x1c3c <AutoCheck+0x692>
    1c3a:	aa c0       	rjmp	.+340    	; 0x1d90 <AutoCheck+0x7e6>
        cap_found++;
    1c3c:	1f 5f       	subi	r17, 0xFF	; 255
     } else {
        cap_found = 0;		// wait for stable connection
     }
     if (cap_found > 1) {
    1c3e:	12 30       	cpi	r17, 0x02	; 2
    1c40:	09 f0       	breq	.+2      	; 0x1c44 <AutoCheck+0x69a>
    1c42:	a7 c0       	rjmp	.+334    	; 0x1d92 <AutoCheck+0x7e8>
        // value of capacitor is correct
        (void) eeprom_write_word((uint16_t *)(&ref_offset), load_diff);	// hold zero offset + slew rate dependend offset
    1c44:	60 91 76 01 	lds	r22, 0x0176
    1c48:	70 91 77 01 	lds	r23, 0x0177
    1c4c:	87 ec       	ldi	r24, 0xC7	; 199
    1c4e:	91 e0       	ldi	r25, 0x01	; 1
    1c50:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <__eewr_word_m168>
        lcd_clear();
    1c54:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
        lcd_fix2_string(REF_C_str);	// "REF_C="
    1c58:	8c ef       	ldi	r24, 0xFC	; 252
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
        lcd_string(itoa(load_diff, outval, 10));	//output REF_C_KORR
    1c60:	80 91 76 01 	lds	r24, 0x0176
    1c64:	90 91 77 01 	lds	r25, 0x0177
    1c68:	6c e0       	ldi	r22, 0x0C	; 12
    1c6a:	71 e0       	ldi	r23, 0x01	; 1
    1c6c:	4a e0       	ldi	r20, 0x0A	; 10
    1c6e:	50 e0       	ldi	r21, 0x00	; 0
    1c70:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <itoa>
    1c74:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
        wait_about1s();
        }
//#######################################
#endif
  #ifdef AUTOSCALE_ADC
        ADC_PORT =  TXD_VAL;	//ADC-Port 1 to GND
    1c78:	88 e0       	ldi	r24, 0x08	; 8
    1c7a:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    1c7c:	89 e0       	ldi	r24, 0x09	; 9
    1c7e:	87 b9       	out	0x07, r24	; 7
        R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1c80:	80 e2       	ldi	r24, 0x20	; 32
    1c82:	84 b9       	out	0x04, r24	; 4
        do {
           adcmv[0] = ReadADC(TP3);
    1c84:	82 e0       	ldi	r24, 0x02	; 2
    1c86:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
        } while (adcmv[0] > 980);
    1c8a:	23 e0       	ldi	r18, 0x03	; 3
    1c8c:	85 3d       	cpi	r24, 0xD5	; 213
    1c8e:	92 07       	cpc	r25, r18
    1c90:	cc f7       	brge	.-14     	; 0x1c84 <AutoCheck+0x6da>
        R_DDR = 0;		//all Pins to input 
    1c92:	14 b8       	out	0x04, r1	; 4
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1c94:	10 92 3f 01 	sts	0x013F, r1
    1c98:	10 92 3e 01 	sts	0x013E, r1
        adcmv[0] = ReadADC(TP3);  // get cap voltage with VCC reference
    1c9c:	82 e0       	ldi	r24, 0x02	; 2
    1c9e:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
    1ca2:	4c 01       	movw	r8, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1ca4:	8f eb       	ldi	r24, 0xBF	; 191
    1ca6:	91 e0       	ldi	r25, 0x01	; 1
    1ca8:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__eerd_byte_m168>
    1cac:	99 27       	eor	r25, r25
    1cae:	87 fd       	sbrc	r24, 7
    1cb0:	90 95       	com	r25
    1cb2:	20 91 44 01 	lds	r18, 0x0144
    1cb6:	30 91 45 01 	lds	r19, 0x0145
    1cba:	82 0f       	add	r24, r18
    1cbc:	93 1f       	adc	r25, r19
    1cbe:	90 93 3f 01 	sts	0x013F, r25
    1cc2:	80 93 3e 01 	sts	0x013E, r24
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
    1cc6:	82 e0       	ldi	r24, 0x02	; 2
    1cc8:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
    1ccc:	8c 01       	movw	r16, r24
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1cce:	10 92 3f 01 	sts	0x013F, r1
    1cd2:	10 92 3e 01 	sts	0x013E, r1
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
    1cd6:	82 e0       	ldi	r24, 0x02	; 2
    1cd8:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
    1cdc:	5c 01       	movw	r10, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1cde:	c0 90 44 01 	lds	r12, 0x0144
    1ce2:	d0 90 45 01 	lds	r13, 0x0145
    1ce6:	8f eb       	ldi	r24, 0xBF	; 191
    1ce8:	91 e0       	ldi	r25, 0x01	; 1
    1cea:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__eerd_byte_m168>
    1cee:	99 27       	eor	r25, r25
    1cf0:	87 fd       	sbrc	r24, 7
    1cf2:	90 95       	com	r25
    1cf4:	8c 0d       	add	r24, r12
    1cf6:	9d 1d       	adc	r25, r13
    1cf8:	90 93 3f 01 	sts	0x013F, r25
    1cfc:	80 93 3e 01 	sts	0x013E, r24
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1d00:	8f eb       	ldi	r24, 0xBF	; 191
    1d02:	91 e0       	ldi	r25, 0x01	; 1
    1d04:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__eerd_byte_m168>
    1d08:	e8 2e       	mov	r14, r24
        lcd_line2();
    1d0a:	80 ec       	ldi	r24, 0xC0	; 192
    1d0c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_fix2_string(REF_R_str);	// "REF_R="
    1d10:	83 e0       	ldi	r24, 0x03	; 3
    1d12:	91 e0       	ldi	r25, 0x01	; 1
    1d14:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1d18:	8f eb       	ldi	r24, 0xBF	; 191
    1d1a:	91 e0       	ldi	r25, 0x01	; 1
    1d1c:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__eerd_byte_m168>
        ADCconfig.U_Bandgap = ADC_internal_reference;
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
        ADCconfig.U_Bandgap = ADC_internal_reference;
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1d20:	f3 e0       	ldi	r31, 0x03	; 3
    1d22:	ff 2e       	mov	r15, r31
    1d24:	f8 0e       	add	r15, r24
    1d26:	a8 0c       	add	r10, r8
    1d28:	b9 1c       	adc	r11, r9
    1d2a:	a0 1a       	sub	r10, r16
    1d2c:	b1 0a       	sbc	r11, r17
    1d2e:	a0 1a       	sub	r10, r16
    1d30:	b1 0a       	sbc	r11, r17
    1d32:	b5 01       	movw	r22, r10
    1d34:	88 27       	eor	r24, r24
    1d36:	77 fd       	sbrc	r23, 7
    1d38:	80 95       	com	r24
    1d3a:	98 2f       	mov	r25, r24
    1d3c:	2e 2d       	mov	r18, r14
    1d3e:	33 27       	eor	r19, r19
    1d40:	27 fd       	sbrc	r18, 7
    1d42:	30 95       	com	r19
    1d44:	2c 0d       	add	r18, r12
    1d46:	3d 1d       	adc	r19, r13
    1d48:	40 e0       	ldi	r20, 0x00	; 0
    1d4a:	50 e0       	ldi	r21, 0x00	; 0
    1d4c:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
    1d50:	00 0f       	add	r16, r16
    1d52:	11 1f       	adc	r17, r17
    1d54:	98 01       	movw	r18, r16
    1d56:	44 27       	eor	r20, r20
    1d58:	37 fd       	sbrc	r19, 7
    1d5a:	40 95       	com	r20
    1d5c:	54 2f       	mov	r21, r20
    1d5e:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <__divmodsi4>
        lcd_line2();
        lcd_fix2_string(REF_R_str);	// "REF_R="
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1d62:	f2 0e       	add	r15, r18
        (void) eeprom_write_byte((uint8_t *)(&RefDiff), (uint8_t)udiff2);	// hold offset for true reference Voltage
    1d64:	8f eb       	ldi	r24, 0xBF	; 191
    1d66:	91 e0       	ldi	r25, 0x01	; 1
    1d68:	6f 2d       	mov	r22, r15
    1d6a:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__eewr_byte_m168>
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
    1d6e:	8f 2d       	mov	r24, r15
    1d70:	99 27       	eor	r25, r25
    1d72:	87 fd       	sbrc	r24, 7
    1d74:	90 95       	com	r25
    1d76:	6c e0       	ldi	r22, 0x0C	; 12
    1d78:	71 e0       	ldi	r23, 0x01	; 1
    1d7a:	4a e0       	ldi	r20, 0x0A	; 10
    1d7c:	50 e0       	ldi	r21, 0x00	; 0
    1d7e:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <itoa>
    1d82:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
  #endif
        wait_about4s();
    1d86:	80 e2       	ldi	r24, 0x20	; 32
    1d88:	93 e0       	ldi	r25, 0x03	; 3
    1d8a:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
        break;
    1d8e:	1b c0       	rjmp	.+54     	; 0x1dc6 <AutoCheck+0x81c>
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1d90:	10 e0       	ldi	r17, 0x00	; 0
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
  #endif
        wait_about4s();
        break;
     }
     lcd_line2();
    1d92:	80 ec       	ldi	r24, 0xC0	; 192
    1d94:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     DisplayValue(cap.cval,cap.cpre,'F',4);
    1d98:	60 91 62 01 	lds	r22, 0x0162
    1d9c:	70 91 63 01 	lds	r23, 0x0163
    1da0:	80 91 64 01 	lds	r24, 0x0164
    1da4:	90 91 65 01 	lds	r25, 0x0165
    1da8:	40 91 74 01 	lds	r20, 0x0174
    1dac:	26 e4       	ldi	r18, 0x46	; 70
    1dae:	04 e0       	ldi	r16, 0x04	; 4
    1db0:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
     wait_about200ms();			// wait additional time
    1db4:	88 e2       	ldi	r24, 0x28	; 40
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
 wait_about2s();		//wait 2 seconds
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
    1dbc:	c3 94       	inc	r12
    1dbe:	8c 2d       	mov	r24, r12
    1dc0:	80 34       	cpi	r24, 0x40	; 64
    1dc2:	09 f0       	breq	.+2      	; 0x1dc6 <AutoCheck+0x81c>
    1dc4:	f7 ce       	rjmp	.-530    	; 0x1bb4 <AutoCheck+0x60a>
     wait_about200ms();			// wait additional time
  } // end for ww
 #endif


  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    1dc6:	89 e1       	ldi	r24, 0x19	; 25
    1dc8:	80 93 3c 01 	sts	0x013C, r24
  lcd_clear();
    1dcc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_fix2_string(VERSION_str);	//"Version ..."
    1dd0:	88 ed       	ldi	r24, 0xD8	; 216
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
  lcd_line2();
    1dd8:	80 ec       	ldi	r24, 0xC0	; 192
    1dda:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(ATE);		//"Selftest End"
    1dde:	8c ed       	ldi	r24, 0xDC	; 220
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        // if key is pressed, don't repeat
        break;
     }
  }
 #endif
 PartFound = PART_NONE;
    1de6:	10 92 07 01 	sts	0x0107, r1
 wait_about1s();			//wait 1 seconds
    1dea:	88 ec       	ldi	r24, 0xC8	; 200
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
 lcd_line2();
    1df2:	80 ec       	ldi	r24, 0xC0	; 192
    1df4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
 lcd_clear_line();			// clear total line
    1df8:	0e 94 8f 02 	call	0x51e	; 0x51e <lcd_clear_line>
    1dfc:	03 c0       	rjmp	.+6      	; 0x1e04 <AutoCheck+0x85a>
           lcd_fix_string(RHRH);	// "RHRH"
        }
                                        //############################################
        if (tt == 4) { // Text release probes
           lcd_fix_string(RELPROBE);	// "Release Probes"
           if (AllProbesShorted() != 0) ww = MAX_REP-2;
    1dfe:	72 e0       	ldi	r23, 0x02	; 2
    1e00:	a7 2e       	mov	r10, r23
    1e02:	bd cd       	rjmp	.-1158   	; 0x197e <AutoCheck+0x3d4>
 PartFound = PART_NONE;
 wait_about1s();			//wait 1 seconds
 lcd_line2();
 lcd_clear_line();			// clear total line
#endif
 } 
    1e04:	2e 96       	adiw	r28, 0x0e	; 14
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	cf 91       	pop	r28
    1e12:	df 91       	pop	r29
    1e14:	1f 91       	pop	r17
    1e16:	0f 91       	pop	r16
    1e18:	ff 90       	pop	r15
    1e1a:	ef 90       	pop	r14
    1e1c:	df 90       	pop	r13
    1e1e:	cf 90       	pop	r12
    1e20:	bf 90       	pop	r11
    1e22:	af 90       	pop	r10
    1e24:	9f 90       	pop	r9
    1e26:	8f 90       	pop	r8
    1e28:	7f 90       	pop	r7
    1e2a:	6f 90       	pop	r6
    1e2c:	5f 90       	pop	r5
    1e2e:	4f 90       	pop	r4
    1e30:	3f 90       	pop	r3
    1e32:	2f 90       	pop	r2
    1e34:	08 95       	ret

00001e36 <GetIr>:
/* Get residual current in reverse direction of a diode */ 



//=================================================================
void GetIr(uint8_t hipin, uint8_t lopin) {
    1e36:	0f 93       	push	r16
    1e38:	cf 93       	push	r28
    1e3a:	df 93       	push	r29
  unsigned int ir_nano;
//  unsigned int ir_micro;
  uint8_t LoPinR_L;
  uint8_t HiADC;

  HiADC = pgm_read_byte(&PinADCtab[hipin]);
    1e3c:	e8 2f       	mov	r30, r24
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	e3 5f       	subi	r30, 0xF3	; 243
    1e42:	fe 4f       	sbci	r31, 0xFE	; 254
    1e44:	e4 91       	lpm	r30, Z+
  ADC_PORT = HiADC | TXD_VAL;		// switch ADC port to high level
    1e46:	e8 60       	ori	r30, 0x08	; 8
    1e48:	e8 b9       	out	0x08, r30	; 8
  ADC_DDR = HiADC | TXD_MSK;		// switch High Pin direct to VCC
    1e4a:	e7 b9       	out	0x07, r30	; 7
  LoPinR_L = pgm_read_byte(&PinRLtab[lopin]);  //R_L mask for LowPin R_L load
    1e4c:	e6 2f       	mov	r30, r22
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	e6 5f       	subi	r30, 0xF6	; 246
    1e52:	fe 4f       	sbci	r31, 0xFE	; 254
    1e54:	e4 91       	lpm	r30, Z+
  R_PORT = 0;				// switch R-Port to GND
    1e56:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinR_L + LoPinR_L;		// switch R_H port for LowPin to output (GND)
    1e58:	ee 0f       	add	r30, r30
    1e5a:	e4 b9       	out	0x04, r30	; 4
  u_res = W5msReadADC(lopin);		// read voltage
    1e5c:	86 2f       	mov	r24, r22
    1e5e:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
    1e62:	ec 01       	movw	r28, r24
  if (u_res == 0) return;		// no Output, if no current in reverse direction
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	f9 f0       	breq	.+62     	; 0x1ea6 <GetIr+0x70>
  lcd_fix_string(Ir_str);		// output text "  Ir="
    1e68:	8d e3       	ldi	r24, 0x3D	; 61
    1e6a:	91 e0       	ldi	r25, 0x01	; 1
    1e6c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
#ifdef WITH_IRMICRO
  if (u_res < 2500) {
#endif
     /* R_H_VAL has units of 10 Ohm, u_res has units of mV, ir_nano has units of nA */
     ir_nano = (unsigned long)(u_res * 100000UL) / R_H_VAL;
    1e70:	be 01       	movw	r22, r28
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	20 ea       	ldi	r18, 0xA0	; 160
    1e78:	36 e8       	ldi	r19, 0x86	; 134
    1e7a:	41 e0       	ldi	r20, 0x01	; 1
    1e7c:	50 e0       	ldi	r21, 0x00	; 0
    1e7e:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
    1e82:	28 e9       	ldi	r18, 0x98	; 152
    1e84:	37 eb       	ldi	r19, 0xB7	; 183
    1e86:	40 e0       	ldi	r20, 0x00	; 0
    1e88:	50 e0       	ldi	r21, 0x00	; 0
    1e8a:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
     DisplayValue(ir_nano,-9,'A',2);	// output two digits of current with nA units
    1e8e:	b9 01       	movw	r22, r18
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	47 ef       	ldi	r20, 0xF7	; 247
    1e96:	21 e4       	ldi	r18, 0x41	; 65
    1e98:	02 e0       	ldi	r16, 0x02	; 2
    1e9a:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
     /* RR680MI has units of 0.1 Ohm, u_res has units of mV, ir_micro has units of uA */
     ir_micro = (unsigned long)(u_res * 10000UL) / RR680MI;
     DisplayValue(ir_micro,-6,'A',2);	// output two digits of current in uA units
  }
#endif
  ADC_DDR = TXD_MSK;			// switch off
    1e9e:	88 e0       	ldi	r24, 0x08	; 8
    1ea0:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;			// switch off
    1ea2:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;				// switch off current
    1ea4:	14 b8       	out	0x04, r1	; 4

  return ;
}
    1ea6:	df 91       	pop	r29
    1ea8:	cf 91       	pop	r28
    1eaa:	0f 91       	pop	r16
    1eac:	08 95       	ret

00001eae <main>:
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
  EMPTY_INTERRUPT(ADC_vect);
#endif

//begin of transistortester program
int main(void) {
    1eae:	0f 93       	push	r16
    1eb0:	1f 93       	push	r17
  //switch on
  ON_DDR = (1<<ON_PIN);			// switch to output
    1eb2:	80 e4       	ldi	r24, 0x40	; 64
    1eb4:	8a b9       	out	0x0a, r24	; 10
#ifdef PULLUP_DISABLE
  ON_PORT = (1<<ON_PIN); 		// switch power on 
    1eb6:	8b b9       	out	0x0b, r24	; 11
#else
  ON_PORT = (1<<ON_PIN)|(1<<RST_PIN); 	// switch power on , enable internal Pullup for Start-Pin
#endif
  uint8_t tmp;
  //ADC-Init
  ADCSRA = (1<<ADEN) | AUTO_CLOCK_DIV;	//prescaler=8 or 64 (if 8Mhz clock)
    1eb8:	86 e8       	ldi	r24, 0x86	; 134
    1eba:	80 93 7a 00 	sts	0x007A, r24
// #define WDRF_HOME MCU_STATUS_REG
 #define WDRF_HOME MCUCSR
#else
 #define WDRF_HOME MCUSR
#endif
  tmp = (WDRF_HOME & (1<<WDRF));	// save Watch Dog Flag
    1ebe:	14 b7       	in	r17, 0x34	; 52
  WDRF_HOME &= ~(1<<WDRF);	 	//reset Watch Dog flag
    1ec0:	84 b7       	in	r24, 0x34	; 52
    1ec2:	87 7f       	andi	r24, 0xF7	; 247
    1ec4:	84 bf       	out	0x34, r24	; 52
  wdt_disable();			// disable Watch Dog
    1ec6:	88 e1       	ldi	r24, 0x18	; 24
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	f8 94       	cli
    1ecc:	80 93 60 00 	sts	0x0060, r24
    1ed0:	10 92 60 00 	sts	0x0060, r1
    1ed4:	0f be       	out	0x3f, r0	; 63
#ifndef INHIBIT_SLEEP_MODE
  // switch off unused Parts
  PRR = (1<<PRTWI) | (1<<PRTIM0) | (1<<PRSPI) | (1<<PRUSART0);
    1ed6:	86 ea       	ldi	r24, 0xA6	; 166
    1ed8:	80 93 64 00 	sts	0x0064, r24
  DIDR0 = (1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D);	
    1edc:	88 e3       	ldi	r24, 0x38	; 56
    1ede:	80 93 7e 00 	sts	0x007E, r24
  TCCR2A = (0<<WGM21) | (0<<WGM20);		// Counter 2 normal mode
    1ee2:	10 92 b0 00 	sts	0x00B0, r1
 #if F_CPU == 4000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (0<<CS20);	//prescaler 256, 64us @ 2MHz
  #define T2_PERIOD 64
 #endif 
 #if F_CPU >= 8000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (1<<CS20);	//prescaler 1024, 128us @ 8MHz, 64us @ 16MHz
    1ee6:	87 e0       	ldi	r24, 0x07	; 7
    1ee8:	80 93 b1 00 	sts	0x00B1, r24
  #define T2_PERIOD (1024 / (F_CPU / 1000000UL));	/* set to 128 or 64 us */
 #endif 
  sei();				// enable interrupts
    1eec:	78 94       	sei
#endif
  lcd_init();				//initialize LCD
    1eee:	0e 94 08 01 	call	0x210	; 0x210 <lcd_init>
	
//  ADC_PORT = TXD_VAL;
//  ADC_DDR = TXD_MSK;
  if(tmp) { 
    1ef2:	13 ff       	sbrs	r17, 3
    1ef4:	0a c0       	rjmp	.+20     	; 0x1f0a <main+0x5c>
     // check if  Watchdog-Event 
     // this happens, if the Watchdog is not reset for 2s
     // can happen, if any loop in the Program doen't finish.
     lcd_line1();
    1ef6:	80 e8       	ldi	r24, 0x80	; 128
    1ef8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     lcd_fix_string(TestTimedOut);	//Output Timeout
    1efc:	84 eb       	ldi	r24, 0xB4	; 180
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     wait_about3s();				//wait for 3 s
    1f04:	88 e5       	ldi	r24, 0x58	; 88
    1f06:	92 e0       	ldi	r25, 0x02	; 2
    1f08:	92 c0       	rjmp	.+292    	; 0x202e <main+0x180>
     ON_PORT = 0;			//shut off!
//     ON_DDR = (1<<ON_PIN);		//switch to GND
     return 0;
  }
  LCDLoadCustomChar(LCD_CHAR_DIODE1);	//Custom-Character Diode symbol
    1f0a:	88 e4       	ldi	r24, 0x48	; 72
    1f0c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(DiodeIcon1);	//load Character  >|
    1f10:	87 e9       	ldi	r24, 0x97	; 151
    1f12:	91 e0       	ldi	r25, 0x01	; 1
    1f14:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_DIODE2);	//Custom-Character 
    1f18:	80 e5       	ldi	r24, 0x50	; 80
    1f1a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(DiodeIcon2);	//load Character  |<
    1f1e:	8f e9       	ldi	r24, 0x9F	; 159
    1f20:	91 e0       	ldi	r25, 0x01	; 1
    1f22:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_CAP);	//Custom-Character  Capacitor symbol
    1f26:	88 e5       	ldi	r24, 0x58	; 88
    1f28:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(CapIcon);		//load Character  ||
    1f2c:	87 ea       	ldi	r24, 0xA7	; 167
    1f2e:	91 e0       	ldi	r25, 0x01	; 1
    1f30:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS1);	//Custom-Character Resistor symbol
    1f34:	88 e7       	ldi	r24, 0x78	; 120
    1f36:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(ResIcon1);		//load Character  [
    1f3a:	8f ea       	ldi	r24, 0xAF	; 175
    1f3c:	91 e0       	ldi	r25, 0x01	; 1
    1f3e:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS2);	//Custom-Character 
    1f42:	80 e7       	ldi	r24, 0x70	; 112
    1f44:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(ResIcon2);		//load Character  ]
    1f48:	87 eb       	ldi	r24, 0xB7	; 183
    1f4a:	91 e0       	ldi	r25, 0x01	; 1
    1f4c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_fix_customchar>
#endif
#ifdef PULLUP_DISABLE
 #ifdef __AVR_ATmega8__
  SFIOR = (1<<PUD);		// disable Pull-Up Resistors mega8
 #else
  MCUCR = (1<<PUD);		// disable Pull-Up Resistors mega168 family
    1f50:	80 e1       	ldi	r24, 0x10	; 16
    1f52:	85 bf       	out	0x35, r24	; 53
  }
#else
  #define display_time OFF_WAIT_TIME
#endif

  empty_count = 0;
    1f54:	10 92 4a 01 	sts	0x014A, r1
  mess_count = 0;
    1f58:	10 92 0b 01 	sts	0x010B, r1

//*****************************************************************
//Entry: if start key is pressed before shut down
start:
  PartFound = PART_NONE;	// no part found
    1f5c:	10 92 07 01 	sts	0x0107, r1
  NumOfDiodes = 0;		// Number of diodes = 0
    1f60:	10 92 05 01 	sts	0x0105, r1
  PartReady = 0;
    1f64:	10 92 04 01 	sts	0x0104, r1
  PartMode = 0;
    1f68:	10 92 06 01 	sts	0x0106, r1
  WithReference = 0;		// no precision reference voltage
    1f6c:	10 92 49 01 	sts	0x0149, r1
  lcd_clear();
    1f70:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  ADC_DDR = TXD_MSK;		//activate Software-UART 
    1f74:	88 e0       	ldi	r24, 0x08	; 8
    1f76:	87 b9       	out	0x07, r24	; 7
  ResistorsFound = 0;		// no resistors found
    1f78:	10 92 5e 01 	sts	0x015E, r1
  cap.ca = 0;
    1f7c:	10 92 72 01 	sts	0x0172, r1
  cap.cb = 0;
    1f80:	10 92 73 01 	sts	0x0173, r1
#ifdef WITH_UART
  uart_newline();		// start of new measurement
    1f84:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <uart_newline>
#endif
  ADCconfig.RefFlag = 0;
    1f88:	10 92 3d 01 	sts	0x013D, r1
  Calibrate_UR();		// get Ref Voltages and Pin resistance
    1f8c:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <Calibrate_UR>
  lcd_line1();	//1. row 
    1f90:	80 e8       	ldi	r24, 0x80	; 128
    1f92:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  
  ADCconfig.U_Bandgap = ADC_internal_reference;	// set internal reference voltage for ADC
    1f96:	8f eb       	ldi	r24, 0xBF	; 191
    1f98:	91 e0       	ldi	r25, 0x01	; 1
    1f9a:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__eerd_byte_m168>
    1f9e:	99 27       	eor	r25, r25
    1fa0:	87 fd       	sbrc	r24, 7
    1fa2:	90 95       	com	r25
    1fa4:	20 91 44 01 	lds	r18, 0x0144
    1fa8:	30 91 45 01 	lds	r19, 0x0145
    1fac:	82 0f       	add	r24, r18
    1fae:	93 1f       	adc	r25, r19
    1fb0:	90 93 3f 01 	sts	0x013F, r25
    1fb4:	80 93 3e 01 	sts	0x013E, r24

#ifdef BAT_CHECK
  // Battery check is selected
  ReadADC(TPBAT);	//Dummy-Readout
    1fb8:	85 e0       	ldi	r24, 0x05	; 5
    1fba:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
  trans.uBE[0] = W5msReadADC(TPBAT); 	//with 5V reference
    1fbe:	85 e0       	ldi	r24, 0x05	; 5
    1fc0:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
    1fc4:	90 93 58 01 	sts	0x0158, r25
    1fc8:	80 93 57 01 	sts	0x0157, r24
  lcd_fix_string(Bat_str);		//output: "Bat. "
    1fcc:	85 ee       	ldi	r24, 0xE5	; 229
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  // display Battery voltage
  // The divisor to get the voltage in 0.01V units is ((10*33)/133) witch is about 2.4812
  // A good result can be get with multiply by 4 and divide by 10 (about 0.75%).
//  cap.cval = (trans.uBE[0]*4)/10+((BAT_OUT+5)/10); // usually output only 2 digits
//  DisplayValue(cap.cval,-2,'V',2);		// Display 2 Digits of this 10mV units
  cap.cval = (trans.uBE[0]*4)+BAT_OUT;		// usually output only 2 digits
    1fd4:	60 91 57 01 	lds	r22, 0x0157
    1fd8:	70 91 58 01 	lds	r23, 0x0158
    1fdc:	66 0f       	add	r22, r22
    1fde:	77 1f       	adc	r23, r23
    1fe0:	66 0f       	add	r22, r22
    1fe2:	77 1f       	adc	r23, r23
    1fe4:	6a 56       	subi	r22, 0x6A	; 106
    1fe6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	60 93 62 01 	sts	0x0162, r22
    1ff0:	70 93 63 01 	sts	0x0163, r23
    1ff4:	80 93 64 01 	sts	0x0164, r24
    1ff8:	90 93 65 01 	sts	0x0165, r25
  DisplayValue(cap.cval,-3,'V',2);		// Display 2 Digits of this 10mV units
    1ffc:	4d ef       	ldi	r20, 0xFD	; 253
    1ffe:	26 e5       	ldi	r18, 0x56	; 86
    2000:	02 e0       	ldi	r16, 0x02	; 2
    2002:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
  lcd_space();
    2006:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
  // less than 1.3 V only .1V difference to Warn-Level
  #define WARN_LEVEL (((unsigned long)(BAT_POOR+100)*(unsigned long)33)/133)
 #endif
 #define POOR_LEVEL (((unsigned long)(BAT_POOR)*(unsigned long)33)/133)
  // check the battery voltage
  if (trans.uBE[0] <  WARN_LEVEL) {
    200a:	80 91 57 01 	lds	r24, 0x0157
    200e:	90 91 58 01 	lds	r25, 0x0158
    2012:	26 e0       	ldi	r18, 0x06	; 6
    2014:	8a 3f       	cpi	r24, 0xFA	; 250
    2016:	92 07       	cpc	r25, r18
    2018:	a8 f4       	brcc	.+42     	; 0x2044 <main+0x196>
     //Vcc < 7,3V; show Warning 
     if(trans.uBE[0] < POOR_LEVEL) {	
    201a:	26 e0       	ldi	r18, 0x06	; 6
    201c:	83 33       	cpi	r24, 0x33	; 51
    201e:	92 07       	cpc	r25, r18
    2020:	70 f4       	brcc	.+28     	; 0x203e <main+0x190>
        //Vcc <6,3V; no proper operation is possible
        lcd_fix_string(BatEmpty);	//Battery empty!
    2022:	8a e6       	ldi	r24, 0x6A	; 106
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        wait_about2s();
    202a:	80 e9       	ldi	r24, 0x90	; 144
    202c:	91 e0       	ldi	r25, 0x01	; 1
    202e:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
        PORTD = 0;			//switch power off
    2032:	1b b8       	out	0x0b, r1	; 11
  }
#else
  goto start;	// POWER_OFF not selected, repeat measurement
#endif
  return 0;
}   // end main
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	1f 91       	pop	r17
    203a:	0f 91       	pop	r16
    203c:	08 95       	ret
        lcd_fix_string(BatEmpty);	//Battery empty!
        wait_about2s();
        PORTD = 0;			//switch power off
        return 0;
     }
     lcd_fix_string(BatWeak);		//Battery weak
    203e:	85 e6       	ldi	r24, 0x65	; 101
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	02 c0       	rjmp	.+4      	; 0x2048 <main+0x19a>
  } else { // Battery-voltage OK
     lcd_fix_string(OK_str); 		// "OK"
    2044:	8b ee       	ldi	r24, 0xEB	; 235
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  }
#else
  lcd_fix2_string(VERSION_str);		// if no Battery check, Version .. in row 1
#endif
#ifdef WDT_enabled
  wdt_enable(WDTO_2S);		//Watchdog on
    204c:	2f e0       	ldi	r18, 0x0F	; 15
    204e:	88 e1       	ldi	r24, 0x18	; 24
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	0f b6       	in	r0, 0x3f	; 63
    2054:	f8 94       	cli
    2056:	a8 95       	wdr
    2058:	80 93 60 00 	sts	0x0060, r24
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	20 93 60 00 	sts	0x0060, r18
#endif

//  wait_about1s();			// add more time for reading batterie voltage
  // begin tests
#ifdef AUTO_RH
  RefVoltage();			//compute RHmultip = f(reference voltage)
    2062:	0e 94 4d 02 	call	0x49a	; 0x49a <RefVoltage>
#endif
#if FLASHEND > 0x1fff
  if (WithReference) {
    2066:	80 91 49 01 	lds	r24, 0x0149
    206a:	88 23       	and	r24, r24
    206c:	f1 f0       	breq	.+60     	; 0x20aa <main+0x1fc>
     /* 2.5V precision reference is checked OK */
     if ((mess_count == 0) && (empty_count == 0)) {
    206e:	80 91 0b 01 	lds	r24, 0x010B
    2072:	88 23       	and	r24, r24
    2074:	d1 f4       	brne	.+52     	; 0x20aa <main+0x1fc>
    2076:	80 91 4a 01 	lds	r24, 0x014A
    207a:	88 23       	and	r24, r24
    207c:	b1 f4       	brne	.+44     	; 0x20aa <main+0x1fc>
         /* display VCC= only first time */
         lcd_line2();
    207e:	80 ec       	ldi	r24, 0xC0	; 192
    2080:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
         lcd_fix_string(VCC_str);		// VCC=
    2084:	87 e2       	ldi	r24, 0x27	; 39
    2086:	91 e0       	ldi	r25, 0x01	; 1
    2088:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
         DisplayValue(ADCconfig.U_AVCC,-3,'V',3);	// Display 3 Digits of this mV units
    208c:	60 91 40 01 	lds	r22, 0x0140
    2090:	70 91 41 01 	lds	r23, 0x0141
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	4d ef       	ldi	r20, 0xFD	; 253
    209a:	26 e5       	ldi	r18, 0x56	; 86
    209c:	03 e0       	ldi	r16, 0x03	; 3
    209e:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
//         lcd_space();
//         DisplayValue(RRpinMI,-1,LCD_CHAR_OMEGA,4);
         wait_about1s();
    20a2:	88 ec       	ldi	r24, 0xC8	; 200
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
     wait_about300ms();
  }
#endif

#ifndef DebugOut
  lcd_line2();			//LCD position row 2, column 1
    20aa:	80 ec       	ldi	r24, 0xC0	; 192
    20ac:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
#endif
  EntladePins();		// discharge all capacitors!
    20b0:	0e 94 b2 01 	call	0x364	; 0x364 <EntladePins>
  if(PartFound == PART_CELL) {
    20b4:	80 91 07 01 	lds	r24, 0x0107
    20b8:	88 30       	cpi	r24, 0x08	; 8
    20ba:	39 f4       	brne	.+14     	; 0x20ca <main+0x21c>
    lcd_clear();
    20bc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
    lcd_fix_string(Cell_str);	// display "Cell!"
    20c0:	81 e2       	ldi	r24, 0x21	; 33
    20c2:	91 e0       	ldi	r25, 0x01	; 1
    20c4:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    goto end2;
    20c8:	c2 c3       	rjmp	.+1924   	; 0x284e <main+0x9a0>
  }

#ifdef CHECK_CALL
  AutoCheck();			//check, if selftest should be done
    20ca:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <AutoCheck>
#endif
  lcd_line2();			//LCD position row2, column 1
    20ce:	80 ec       	ldi	r24, 0xC0	; 192
    20d0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(TestRunning);		//String: testing...
    20d4:	8a e5       	ldi	r24, 0x5A	; 90
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     
  // check all 6 combinations for the 3 pins 
//         High  Low  Tri
  CheckPins(TP1, TP2, TP3);
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	61 e0       	ldi	r22, 0x01	; 1
    20e0:	42 e0       	ldi	r20, 0x02	; 2
    20e2:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <CheckPins>
  CheckPins(TP2, TP1, TP3);
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	60 e0       	ldi	r22, 0x00	; 0
    20ea:	42 e0       	ldi	r20, 0x02	; 2
    20ec:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <CheckPins>

  CheckPins(TP1, TP3, TP2);
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	62 e0       	ldi	r22, 0x02	; 2
    20f4:	41 e0       	ldi	r20, 0x01	; 1
    20f6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <CheckPins>
  CheckPins(TP3, TP1, TP2);
    20fa:	82 e0       	ldi	r24, 0x02	; 2
    20fc:	60 e0       	ldi	r22, 0x00	; 0
    20fe:	41 e0       	ldi	r20, 0x01	; 1
    2100:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <CheckPins>

  CheckPins(TP2, TP3, TP1);
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	62 e0       	ldi	r22, 0x02	; 2
    2108:	40 e0       	ldi	r20, 0x00	; 0
    210a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <CheckPins>
  CheckPins(TP3, TP2, TP1);
    210e:	82 e0       	ldi	r24, 0x02	; 2
    2110:	61 e0       	ldi	r22, 0x01	; 1
    2112:	40 e0       	ldi	r20, 0x00	; 0
    2114:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <CheckPins>
  
  //separate check if is is a capacitor
  if(((PartFound == PART_NONE) || (PartFound == PART_RESISTOR) || (PartFound == PART_DIODE)) ) {
    2118:	80 91 07 01 	lds	r24, 0x0107
    211c:	88 23       	and	r24, r24
    211e:	21 f0       	breq	.+8      	; 0x2128 <main+0x27a>
    2120:	86 30       	cpi	r24, 0x06	; 6
    2122:	11 f0       	breq	.+4      	; 0x2128 <main+0x27a>
    2124:	81 30       	cpi	r24, 0x01	; 1
    2126:	d9 f4       	brne	.+54     	; 0x215e <main+0x2b0>
     EntladePins();		// discharge capacities
    2128:	0e 94 b2 01 	call	0x364	; 0x364 <EntladePins>
     //measurement of capacities in all 3 combinations
     cap.cval_max = 0;		// set max to zero
    212c:	10 92 66 01 	sts	0x0166, r1
    2130:	10 92 67 01 	sts	0x0167, r1
    2134:	10 92 68 01 	sts	0x0168, r1
    2138:	10 92 69 01 	sts	0x0169, r1
     cap.cpre_max = -12;	// set max to pF unit
    213c:	84 ef       	ldi	r24, 0xF4	; 244
    213e:	80 93 75 01 	sts	0x0175, r24
     ReadCapacity(TP3, TP1);
    2142:	82 e0       	ldi	r24, 0x02	; 2
    2144:	60 e0       	ldi	r22, 0x00	; 0
    2146:	0e 94 21 15 	call	0x2a42	; 0x2a42 <ReadCapacity>
     ReadCapacity(TP3, TP2);
    214a:	82 e0       	ldi	r24, 0x02	; 2
    214c:	61 e0       	ldi	r22, 0x01	; 1
    214e:	0e 94 21 15 	call	0x2a42	; 0x2a42 <ReadCapacity>
     ReadCapacity(TP2, TP1);
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	60 e0       	ldi	r22, 0x00	; 0
    2156:	0e 94 21 15 	call	0x2a42	; 0x2a42 <ReadCapacity>

#if FLASHEND > 0x1fff
     ReadInductance();			// measure inductance
    215a:	0e 94 43 18 	call	0x3086	; 0x3086 <ReadInductance>
#endif
  }
  //All checks are done, output result to display
  lcd_clear();
    215e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  if(PartFound == PART_DIODE) {
    2162:	80 91 07 01 	lds	r24, 0x0107
    2166:	81 30       	cpi	r24, 0x01	; 1
    2168:	09 f0       	breq	.+2      	; 0x216c <main+0x2be>
    216a:	10 c1       	rjmp	.+544    	; 0x238c <main+0x4de>
     if(NumOfDiodes == 1) {		//single Diode
    216c:	90 91 05 01 	lds	r25, 0x0105
    2170:	91 30       	cpi	r25, 0x01	; 1
    2172:	d1 f5       	brne	.+116    	; 0x21e8 <main+0x33a>
           lcd_fix_string(KatAn);	//"-|<-"
           lcd_testpin(diodes[0].Anode);
        }
 #else
        // the higher test pin number is right side
        if (diodes[0].Anode < diodes[0].Cathode) {
    2174:	90 91 78 01 	lds	r25, 0x0178
    2178:	80 91 79 01 	lds	r24, 0x0179
    217c:	98 17       	cp	r25, r24
    217e:	50 f4       	brcc	.+20     	; 0x2194 <main+0x2e6>
           lcd_testpin(diodes[0].Anode);
    2180:	89 2f       	mov	r24, r25
    2182:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2186:	83 e4       	ldi	r24, 0x43	; 67
    2188:	91 e0       	ldi	r25, 0x01	; 1
    218a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[0].Cathode);
    218e:	80 91 79 01 	lds	r24, 0x0179
    2192:	08 c0       	rjmp	.+16     	; 0x21a4 <main+0x2f6>
        } else {
           lcd_testpin(diodes[0].Cathode);
    2194:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    2198:	87 e4       	ldi	r24, 0x47	; 71
    219a:	91 e0       	ldi	r25, 0x01	; 1
    219c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    21a0:	80 91 78 01 	lds	r24, 0x0178
    21a4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
        lcd_testpin(diodes[0].Anode);
        lcd_fix_string(AnKat);		//"->|-"
        lcd_testpin(diodes[0].Cathode);
#endif
#if FLASHEND > 0x1fff
	GetIr(diodes[0].Cathode,diodes[0].Anode);
    21a8:	80 91 79 01 	lds	r24, 0x0179
    21ac:	60 91 78 01 	lds	r22, 0x0178
    21b0:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <GetIr>
#endif
        UfAusgabe(0x70);
    21b4:	80 e7       	ldi	r24, 0x70	; 112
    21b6:	0e 94 a1 03 	call	0x742	; 0x742 <UfAusgabe>
        /* load current of capacity is (5V-1.1V)/(470000 Ohm) = 8298nA */
        lcd_fix_string(GateCap_str);	//"C="
    21ba:	88 ef       	ldi	r24, 0xF8	; 248
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        ReadCapacity(diodes[0].Cathode,diodes[0].Anode);	// Capacity opposite flow direction
    21c2:	80 91 79 01 	lds	r24, 0x0179
    21c6:	60 91 78 01 	lds	r22, 0x0178
    21ca:	0e 94 21 15 	call	0x2a42	; 0x2a42 <ReadCapacity>
        DisplayValue(cap.cval,cap.cpre,'F',3);
    21ce:	60 91 62 01 	lds	r22, 0x0162
    21d2:	70 91 63 01 	lds	r23, 0x0163
    21d6:	80 91 64 01 	lds	r24, 0x0164
    21da:	90 91 65 01 	lds	r25, 0x0165
    21de:	40 91 74 01 	lds	r20, 0x0174
    21e2:	26 e4       	ldi	r18, 0x46	; 70
    21e4:	03 e0       	ldi	r16, 0x03	; 3
    21e6:	51 c1       	rjmp	.+674    	; 0x248a <main+0x5dc>
        goto end;
     } else if(NumOfDiodes == 2) { // double diode
    21e8:	92 30       	cpi	r25, 0x02	; 2
    21ea:	09 f0       	breq	.+2      	; 0x21ee <main+0x340>
    21ec:	4c c0       	rjmp	.+152    	; 0x2286 <main+0x3d8>
        lcd_data('2');
    21ee:	82 e3       	ldi	r24, 0x32	; 50
    21f0:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
        lcd_fix_string(Dioden);		//"diodes "
    21f4:	8b e4       	ldi	r24, 0x4B	; 75
    21f6:	91 e0       	ldi	r25, 0x01	; 1
    21f8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        if(diodes[0].Anode == diodes[1].Anode) { //Common Anode
    21fc:	90 91 78 01 	lds	r25, 0x0178
    2200:	20 91 7c 01 	lds	r18, 0x017C
    2204:	92 17       	cp	r25, r18
    2206:	59 f4       	brne	.+22     	; 0x221e <main+0x370>
           lcd_testpin(diodes[0].Cathode);
    2208:	80 91 79 01 	lds	r24, 0x0179
    220c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    2210:	87 e4       	ldi	r24, 0x47	; 71
    2212:	91 e0       	ldi	r25, 0x01	; 1
    2214:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    2218:	80 91 78 01 	lds	r24, 0x0178
    221c:	2b c0       	rjmp	.+86     	; 0x2274 <main+0x3c6>
           lcd_fix_string(AnKat);	//"->|-"
           lcd_testpin(diodes[1].Cathode);
           UfAusgabe(0x01);
           goto end;
        } else if(diodes[0].Cathode == diodes[1].Cathode) { //Common Cathode
    221e:	30 91 79 01 	lds	r19, 0x0179
    2222:	80 91 7d 01 	lds	r24, 0x017D
    2226:	38 17       	cp	r19, r24
    2228:	b9 f4       	brne	.+46     	; 0x2258 <main+0x3aa>
           lcd_testpin(diodes[0].Anode);
    222a:	89 2f       	mov	r24, r25
    222c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2230:	83 e4       	ldi	r24, 0x43	; 67
    2232:	91 e0       	ldi	r25, 0x01	; 1
    2234:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
	   lcd_testpin(diodes[0].Cathode);
    2238:	80 91 79 01 	lds	r24, 0x0179
    223c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    2240:	87 e4       	ldi	r24, 0x47	; 71
    2242:	91 e0       	ldi	r25, 0x01	; 1
    2244:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[1].Anode);
    2248:	80 91 7c 01 	lds	r24, 0x017C
    224c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           UfAusgabe(0x01);
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	0e 94 a1 03 	call	0x742	; 0x742 <UfAusgabe>
           goto end;
    2256:	f4 c2       	rjmp	.+1512   	; 0x2840 <main+0x992>
          }
        else if ((diodes[0].Cathode == diodes[1].Anode) && (diodes[1].Cathode == diodes[0].Anode)) {
    2258:	32 17       	cp	r19, r18
    225a:	09 f0       	breq	.+2      	; 0x225e <main+0x3b0>
    225c:	bf c2       	rjmp	.+1406   	; 0x27dc <main+0x92e>
    225e:	89 17       	cp	r24, r25
    2260:	09 f0       	breq	.+2      	; 0x2264 <main+0x3b6>
    2262:	bc c2       	rjmp	.+1400   	; 0x27dc <main+0x92e>
           //Antiparallel
           lcd_testpin(diodes[0].Anode);
    2264:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2268:	83 e4       	ldi	r24, 0x43	; 67
    226a:	91 e0       	ldi	r25, 0x01	; 1
    226c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[0].Cathode);
    2270:	80 91 79 01 	lds	r24, 0x0179
    2274:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2278:	83 e4       	ldi	r24, 0x43	; 67
    227a:	91 e0       	ldi	r25, 0x01	; 1
    227c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[1].Cathode);
    2280:	80 91 7d 01 	lds	r24, 0x017D
    2284:	e3 cf       	rjmp	.-58     	; 0x224c <main+0x39e>
           UfAusgabe(0x01);
           goto end;
        }
     } else if(NumOfDiodes == 3) {
    2286:	93 30       	cpi	r25, 0x03	; 3
    2288:	09 f0       	breq	.+2      	; 0x228c <main+0x3de>
    228a:	a8 c2       	rjmp	.+1360   	; 0x27dc <main+0x92e>
        //Serial of 2 Diodes; was detected as 3 Diodes 
        trans.b = 3;
    228c:	90 93 5b 01 	sts	0x015B, r25
        trans.c = 3;
    2290:	90 93 5c 01 	sts	0x015C, r25
        /* Check for any constallation of 2 serial diodes:
          Only once the pin No of anyone Cathode is identical of another anode.
          two diodes in series is additionally detected as third big diode.
        */
        if(diodes[0].Cathode == diodes[1].Anode)
    2294:	50 91 79 01 	lds	r21, 0x0179
    2298:	90 91 7c 01 	lds	r25, 0x017C
    229c:	59 17       	cp	r21, r25
    229e:	21 f4       	brne	.+8      	; 0x22a8 <main+0x3fa>
          {
           trans.b = 0;
    22a0:	10 92 5b 01 	sts	0x015B, r1
           trans.c = 1;
    22a4:	80 93 5c 01 	sts	0x015C, r24
          }
        if(diodes[0].Anode == diodes[1].Cathode)
    22a8:	40 91 78 01 	lds	r20, 0x0178
    22ac:	30 91 7d 01 	lds	r19, 0x017D
    22b0:	43 17       	cp	r20, r19
    22b2:	29 f4       	brne	.+10     	; 0x22be <main+0x410>
          {
           trans.b = 1;
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	80 93 5b 01 	sts	0x015B, r24
           trans.c = 0;
    22ba:	10 92 5c 01 	sts	0x015C, r1
          }
        if(diodes[0].Cathode == diodes[2].Anode)
    22be:	20 91 80 01 	lds	r18, 0x0180
    22c2:	52 17       	cp	r21, r18
    22c4:	29 f4       	brne	.+10     	; 0x22d0 <main+0x422>
          {
           trans.b = 0;
    22c6:	10 92 5b 01 	sts	0x015B, r1
           trans.c = 2;
    22ca:	82 e0       	ldi	r24, 0x02	; 2
    22cc:	80 93 5c 01 	sts	0x015C, r24
          }
        if(diodes[0].Anode == diodes[2].Cathode)
    22d0:	80 91 81 01 	lds	r24, 0x0181
    22d4:	48 17       	cp	r20, r24
    22d6:	29 f4       	brne	.+10     	; 0x22e2 <main+0x434>
          {
           trans.b = 2;
    22d8:	42 e0       	ldi	r20, 0x02	; 2
    22da:	40 93 5b 01 	sts	0x015B, r20
           trans.c = 0;
    22de:	10 92 5c 01 	sts	0x015C, r1
          }
        if(diodes[1].Cathode == diodes[2].Anode)
    22e2:	32 17       	cp	r19, r18
    22e4:	31 f4       	brne	.+12     	; 0x22f2 <main+0x444>
          {
           trans.b = 1;
    22e6:	21 e0       	ldi	r18, 0x01	; 1
    22e8:	20 93 5b 01 	sts	0x015B, r18
           trans.c = 2;
    22ec:	22 e0       	ldi	r18, 0x02	; 2
    22ee:	20 93 5c 01 	sts	0x015C, r18
          }
        if(diodes[1].Anode == diodes[2].Cathode)
    22f2:	98 17       	cp	r25, r24
    22f4:	31 f4       	brne	.+12     	; 0x2302 <main+0x454>
          {
           trans.b = 2;
    22f6:	82 e0       	ldi	r24, 0x02	; 2
    22f8:	80 93 5b 01 	sts	0x015B, r24
           trans.c = 1;
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	80 93 5c 01 	sts	0x015C, r24
        lcd_testpin(diodes[2].Cathode);
        lcd_space();
        lcd_string(utoa(diodes[2].Voltage, outval, 10));
        lcd_line1();
#endif
        if((trans.b<3) && (trans.c<3)) {
    2302:	80 91 5b 01 	lds	r24, 0x015B
    2306:	83 30       	cpi	r24, 0x03	; 3
    2308:	08 f0       	brcs	.+2      	; 0x230c <main+0x45e>
    230a:	68 c2       	rjmp	.+1232   	; 0x27dc <main+0x92e>
    230c:	80 91 5c 01 	lds	r24, 0x015C
    2310:	83 30       	cpi	r24, 0x03	; 3
    2312:	08 f0       	brcs	.+2      	; 0x2316 <main+0x468>
    2314:	63 c2       	rjmp	.+1222   	; 0x27dc <main+0x92e>
           lcd_data('3');
    2316:	83 e3       	ldi	r24, 0x33	; 51
    2318:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
           lcd_fix_string(Dioden);	//"Diodes "
    231c:	8b e4       	ldi	r24, 0x4B	; 75
    231e:	91 e0       	ldi	r25, 0x01	; 1
    2320:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Anode);
    2324:	e0 91 5b 01 	lds	r30, 0x015B
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	ee 0f       	add	r30, r30
    232c:	ff 1f       	adc	r31, r31
    232e:	ee 0f       	add	r30, r30
    2330:	ff 1f       	adc	r31, r31
    2332:	e8 58       	subi	r30, 0x88	; 136
    2334:	fe 4f       	sbci	r31, 0xFE	; 254
    2336:	80 81       	ld	r24, Z
    2338:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    233c:	83 e4       	ldi	r24, 0x43	; 67
    233e:	91 e0       	ldi	r25, 0x01	; 1
    2340:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Cathode);
    2344:	e0 91 5b 01 	lds	r30, 0x015B
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	ee 0f       	add	r30, r30
    234c:	ff 1f       	adc	r31, r31
    234e:	ee 0f       	add	r30, r30
    2350:	ff 1f       	adc	r31, r31
    2352:	e8 58       	subi	r30, 0x88	; 136
    2354:	fe 4f       	sbci	r31, 0xFE	; 254
    2356:	81 81       	ldd	r24, Z+1	; 0x01
    2358:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    235c:	83 e4       	ldi	r24, 0x43	; 67
    235e:	91 e0       	ldi	r25, 0x01	; 1
    2360:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[trans.c].Cathode);
    2364:	e0 91 5c 01 	lds	r30, 0x015C
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	ee 0f       	add	r30, r30
    236c:	ff 1f       	adc	r31, r31
    236e:	ee 0f       	add	r30, r30
    2370:	ff 1f       	adc	r31, r31
    2372:	e8 58       	subi	r30, 0x88	; 136
    2374:	fe 4f       	sbci	r31, 0xFE	; 254
    2376:	81 81       	ldd	r24, Z+1	; 0x01
    2378:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           UfAusgabe( (trans.b<<4)|trans.c);
    237c:	80 91 5b 01 	lds	r24, 0x015B
    2380:	82 95       	swap	r24
    2382:	80 7f       	andi	r24, 0xF0	; 240
    2384:	90 91 5c 01 	lds	r25, 0x015C
    2388:	89 2b       	or	r24, r25
    238a:	63 cf       	rjmp	.-314    	; 0x2252 <main+0x3a4>
           goto end;
        }
     }
     // end (PartFound == PART_DIODE)
  } else if (PartFound == PART_TRANSISTOR) {
    238c:	82 30       	cpi	r24, 0x02	; 2
    238e:	09 f0       	breq	.+2      	; 0x2392 <main+0x4e4>
    2390:	7f c0       	rjmp	.+254    	; 0x2490 <main+0x5e2>
    if(PartReady != 0) {
    2392:	80 91 04 01 	lds	r24, 0x0104
    2396:	88 23       	and	r24, r24
    2398:	71 f1       	breq	.+92     	; 0x23f6 <main+0x548>
       if((trans.hfe[0]>trans.hfe[1])) {
    239a:	80 91 53 01 	lds	r24, 0x0153
    239e:	90 91 54 01 	lds	r25, 0x0154
    23a2:	a0 91 55 01 	lds	r26, 0x0155
    23a6:	b0 91 56 01 	lds	r27, 0x0156
    23aa:	20 91 4f 01 	lds	r18, 0x014F
    23ae:	30 91 50 01 	lds	r19, 0x0150
    23b2:	40 91 51 01 	lds	r20, 0x0151
    23b6:	50 91 52 01 	lds	r21, 0x0152
    23ba:	82 17       	cp	r24, r18
    23bc:	93 07       	cpc	r25, r19
    23be:	a4 07       	cpc	r26, r20
    23c0:	b5 07       	cpc	r27, r21
    23c2:	48 f4       	brcc	.+18     	; 0x23d6 <main+0x528>
          //if the amplification factor was higher at first testr: swap C and E !
          tmp = trans.c;
    23c4:	80 91 5c 01 	lds	r24, 0x015C
          trans.c = trans.e;
    23c8:	90 91 5d 01 	lds	r25, 0x015D
    23cc:	90 93 5c 01 	sts	0x015C, r25
          trans.e = tmp;
    23d0:	80 93 5d 01 	sts	0x015D, r24
    23d4:	10 c0       	rjmp	.+32     	; 0x23f6 <main+0x548>
       } else {
          trans.hfe[0] = trans.hfe[1];
    23d6:	80 93 4f 01 	sts	0x014F, r24
    23da:	90 93 50 01 	sts	0x0150, r25
    23de:	a0 93 51 01 	sts	0x0151, r26
    23e2:	b0 93 52 01 	sts	0x0152, r27
          trans.uBE[0] = trans.uBE[1];
    23e6:	80 91 59 01 	lds	r24, 0x0159
    23ea:	90 91 5a 01 	lds	r25, 0x015A
    23ee:	90 93 58 01 	sts	0x0158, r25
    23f2:	80 93 57 01 	sts	0x0157, r24
       }
    }

    if(PartMode == PART_MODE_NPN) {
    23f6:	80 91 06 01 	lds	r24, 0x0106
    23fa:	81 30       	cpi	r24, 0x01	; 1
    23fc:	19 f4       	brne	.+6      	; 0x2404 <main+0x556>
       lcd_fix_string(NPN_str);		//"NPN "
    23fe:	8e ef       	ldi	r24, 0xFE	; 254
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <main+0x55a>
    } else {
       lcd_fix_string(PNP_str);		//"PNP "
    2404:	83 e0       	ldi	r24, 0x03	; 3
    2406:	91 e0       	ldi	r25, 0x01	; 1
    2408:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    }
    if( NumOfDiodes > 2) {	//Transistor with protection diode
    240c:	80 91 05 01 	lds	r24, 0x0105
    2410:	83 30       	cpi	r24, 0x03	; 3
    2412:	a0 f0       	brcs	.+40     	; 0x243c <main+0x58e>
       // Layout with EBC= style
       if(PartMode == PART_MODE_NPN)
 #endif
#else
       // Layout with 123= style
       if (((PartMode == PART_MODE_NPN) && (trans.c > trans.e)) || ((PartMode != PART_MODE_NPN) && (trans.c < trans.e)))
    2414:	20 91 06 01 	lds	r18, 0x0106
    2418:	90 91 5c 01 	lds	r25, 0x015C
    241c:	80 91 5d 01 	lds	r24, 0x015D
    2420:	21 30       	cpi	r18, 0x01	; 1
    2422:	19 f4       	brne	.+6      	; 0x242a <main+0x57c>
    2424:	89 17       	cp	r24, r25
    2426:	18 f0       	brcs	.+6      	; 0x242e <main+0x580>
    2428:	05 c0       	rjmp	.+10     	; 0x2434 <main+0x586>
    242a:	98 17       	cp	r25, r24
    242c:	18 f4       	brcc	.+6      	; 0x2434 <main+0x586>
#endif
       {
          lcd_fix_string(AnKat);	//"->|-"
    242e:	83 e4       	ldi	r24, 0x43	; 67
    2430:	91 e0       	ldi	r25, 0x01	; 1
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <main+0x58a>
       } else {
          lcd_fix_string(KatAn);	//"-|<-"
    2434:	87 e4       	ldi	r24, 0x47	; 71
    2436:	91 e0       	ldi	r25, 0x01	; 1
    2438:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
       }
    }
    PinLayout('E','B','C'); 		//  EBC= or 123=...
    243c:	85 e4       	ldi	r24, 0x45	; 69
    243e:	62 e4       	ldi	r22, 0x42	; 66
    2440:	43 e4       	ldi	r20, 0x43	; 67
    2442:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <PinLayout>
    lcd_line2(); //2. row 
    2446:	80 ec       	ldi	r24, 0xC0	; 192
    2448:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
    lcd_fix_string(hfe_str);		//"B="  (hFE)
    244c:	8b ef       	ldi	r24, 0xFB	; 251
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    DisplayValue(trans.hfe[0],0,0,3);
    2454:	60 91 4f 01 	lds	r22, 0x014F
    2458:	70 91 50 01 	lds	r23, 0x0150
    245c:	80 91 51 01 	lds	r24, 0x0151
    2460:	90 91 52 01 	lds	r25, 0x0152
    2464:	40 e0       	ldi	r20, 0x00	; 0
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	03 e0       	ldi	r16, 0x03	; 3
    246a:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
    lcd_space();
    246e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>

    lcd_fix_string(Uf_str);		//"Uf="
    2472:	8e e0       	ldi	r24, 0x0E	; 14
    2474:	91 e0       	ldi	r25, 0x01	; 1
    2476:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    DisplayValue(trans.uBE[0],-3,'V',3);
    247a:	60 91 57 01 	lds	r22, 0x0157
    247e:	70 91 58 01 	lds	r23, 0x0158
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	4d ef       	ldi	r20, 0xFD	; 253
    2488:	26 e5       	ldi	r18, 0x56	; 86
    248a:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
    goto end;
    248e:	d8 c1       	rjmp	.+944    	; 0x2840 <main+0x992>
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    2490:	83 30       	cpi	r24, 0x03	; 3
    2492:	09 f0       	breq	.+2      	; 0x2496 <main+0x5e8>
    2494:	7f c0       	rjmp	.+254    	; 0x2594 <main+0x6e6>
    if(PartMode&1) {
    2496:	80 91 06 01 	lds	r24, 0x0106
    249a:	80 ff       	sbrs	r24, 0
    249c:	02 c0       	rjmp	.+4      	; 0x24a2 <main+0x5f4>
       lcd_data('P');			//P-channel
    249e:	80 e5       	ldi	r24, 0x50	; 80
    24a0:	01 c0       	rjmp	.+2      	; 0x24a4 <main+0x5f6>
    } else {
       lcd_data('N');			//N-channel
    24a2:	8e e4       	ldi	r24, 0x4E	; 78
    24a4:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
    }
    lcd_data('-');
    24a8:	8d e2       	ldi	r24, 0x2D	; 45
    24aa:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>

    tmp = PartMode/2;
    24ae:	80 91 06 01 	lds	r24, 0x0106
    24b2:	86 95       	lsr	r24
    if (tmp == (PART_MODE_N_D_MOS/2)) {
    24b4:	82 30       	cpi	r24, 0x02	; 2
    24b6:	11 f4       	brne	.+4      	; 0x24bc <main+0x60e>
       lcd_data('D');			// N-D
    24b8:	84 e4       	ldi	r24, 0x44	; 68
    24ba:	03 c0       	rjmp	.+6      	; 0x24c2 <main+0x614>
    }
    if (tmp == (PART_MODE_N_E_MOS/2)) {
    24bc:	81 30       	cpi	r24, 0x01	; 1
    24be:	21 f4       	brne	.+8      	; 0x24c8 <main+0x61a>
       lcd_data('E');			// N-E
    24c0:	85 e4       	ldi	r24, 0x45	; 69
    24c2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
    24c6:	05 c0       	rjmp	.+10     	; 0x24d2 <main+0x624>
    }
    if (tmp == (PART_MODE_N_JFET/2)) {
    24c8:	83 30       	cpi	r24, 0x03	; 3
    24ca:	19 f4       	brne	.+6      	; 0x24d2 <main+0x624>
       lcd_fix_string(jfet_str);	//"JFET"
    24cc:	83 ef       	ldi	r24, 0xF3	; 243
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	02 c0       	rjmp	.+4      	; 0x24d6 <main+0x628>
    } else {
       lcd_fix_string(mosfet_str);	//"-MOS "
    24d2:	8e ee       	ldi	r24, 0xEE	; 238
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    }
    PinLayout('S','G','D'); 		//  SGD= or 123=...
    24da:	83 e5       	ldi	r24, 0x53	; 83
    24dc:	67 e4       	ldi	r22, 0x47	; 71
    24de:	44 e4       	ldi	r20, 0x44	; 68
    24e0:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <PinLayout>
    if((NumOfDiodes > 0) && (PartMode < PART_MODE_N_D_MOS)) {
    24e4:	80 91 05 01 	lds	r24, 0x0105
    24e8:	88 23       	and	r24, r24
    24ea:	a1 f0       	breq	.+40     	; 0x2514 <main+0x666>
    24ec:	20 91 06 01 	lds	r18, 0x0106
    24f0:	24 30       	cpi	r18, 0x04	; 4
    24f2:	80 f4       	brcc	.+32     	; 0x2514 <main+0x666>
    24f4:	90 91 5c 01 	lds	r25, 0x015C
    24f8:	80 91 5d 01 	lds	r24, 0x015D
       // Layout with SGD= style
       if (PartMode&1) /* N or P MOS */
 #endif
#else
       // layout with 123= style
       if (((PartMode&1) && (trans.c < trans.e)) || ((!(PartMode&1)) && (trans.c > trans.e)))
    24fc:	20 ff       	sbrs	r18, 0
    24fe:	03 c0       	rjmp	.+6      	; 0x2506 <main+0x658>
    2500:	98 17       	cp	r25, r24
    2502:	18 f0       	brcs	.+6      	; 0x250a <main+0x65c>
    2504:	04 c0       	rjmp	.+8      	; 0x250e <main+0x660>
    2506:	89 17       	cp	r24, r25
    2508:	10 f4       	brcc	.+4      	; 0x250e <main+0x660>
#endif
       {
          lcd_data(LCD_CHAR_DIODE1);	//show Diode symbol >|
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	01 c0       	rjmp	.+2      	; 0x2510 <main+0x662>
       } else {
          lcd_data(LCD_CHAR_DIODE2);	//show Diode symbol |<
    250e:	82 e0       	ldi	r24, 0x02	; 2
    2510:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       }
    }
    lcd_line2();			//2. Row
    2514:	80 ec       	ldi	r24, 0xC0	; 192
    2516:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
    if(PartMode < PART_MODE_N_D_MOS) {	//enhancement-MOSFET
    251a:	80 91 06 01 	lds	r24, 0x0106
    251e:	84 30       	cpi	r24, 0x04	; 4
    2520:	d8 f4       	brcc	.+54     	; 0x2558 <main+0x6aa>
	//Gate capacity
       lcd_fix_string(GateCap_str);		//"C="
    2522:	88 ef       	ldi	r24, 0xF8	; 248
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
       ReadCapacity(trans.b,trans.e);	//measure capacity
    252a:	80 91 5b 01 	lds	r24, 0x015B
    252e:	60 91 5d 01 	lds	r22, 0x015D
    2532:	0e 94 21 15 	call	0x2a42	; 0x2a42 <ReadCapacity>
       DisplayValue(cap.cval,cap.cpre,'F',3);
    2536:	60 91 62 01 	lds	r22, 0x0162
    253a:	70 91 63 01 	lds	r23, 0x0163
    253e:	80 91 64 01 	lds	r24, 0x0164
    2542:	90 91 65 01 	lds	r25, 0x0165
    2546:	40 91 74 01 	lds	r20, 0x0174
    254a:	26 e4       	ldi	r18, 0x46	; 70
    254c:	03 e0       	ldi	r16, 0x03	; 3
    254e:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
       lcd_fix_string(vt_str);		// "Vt="
    2552:	82 e1       	ldi	r24, 0x12	; 18
    2554:	91 e0       	ldi	r25, 0x01	; 1
    2556:	13 c0       	rjmp	.+38     	; 0x257e <main+0x6d0>
    } else {
       lcd_data('I');
    2558:	89 e4       	ldi	r24, 0x49	; 73
    255a:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       lcd_data('=');
    255e:	8d e3       	ldi	r24, 0x3D	; 61
    2560:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       DisplayValue(trans.uBE[1],-5,'A',2);
    2564:	60 91 59 01 	lds	r22, 0x0159
    2568:	70 91 5a 01 	lds	r23, 0x015A
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	4b ef       	ldi	r20, 0xFB	; 251
    2572:	21 e4       	ldi	r18, 0x41	; 65
    2574:	02 e0       	ldi	r16, 0x02	; 2
    2576:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
       lcd_fix_string(Vgs_str);		// " Vgs="
    257a:	87 e1       	ldi	r24, 0x17	; 23
    257c:	91 e0       	ldi	r25, 0x01	; 1
    257e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    }
    //Gate-threshold voltage
    DisplayValue(gthvoltage,-3,'V',2);
    2582:	60 91 5f 01 	lds	r22, 0x015F
    2586:	70 91 60 01 	lds	r23, 0x0160
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	4d ef       	ldi	r20, 0xFD	; 253
    2590:	26 e5       	ldi	r18, 0x56	; 86
    2592:	22 c1       	rjmp	.+580    	; 0x27d8 <main+0x92a>
    goto end;
    // end (PartFound == PART_FET)
  } else if (PartFound == PART_THYRISTOR) {
    2594:	85 30       	cpi	r24, 0x05	; 5
    2596:	19 f4       	brne	.+6      	; 0x259e <main+0x6f0>
    lcd_fix_string(Thyristor);		//"Thyristor"
    2598:	85 e8       	ldi	r24, 0x85	; 133
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	04 c0       	rjmp	.+8      	; 0x25a6 <main+0x6f8>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    259e:	84 30       	cpi	r24, 0x04	; 4
    25a0:	69 f4       	brne	.+26     	; 0x25bc <main+0x70e>
    lcd_fix_string(Triac);		//"Triac"
    25a2:	8f e7       	ldi	r24, 0x7F	; 127
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  mess_count = 0;
  goto end2;


gakAusgabe:
  lcd_line2(); //2. row 
    25aa:	80 ec       	ldi	r24, 0xC0	; 192
    25ac:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  PinLayout(Cathode_char,'G','A'); 	// CGA= or 123=...
    25b0:	83 e4       	ldi	r24, 0x43	; 67
    25b2:	67 e4       	ldi	r22, 0x47	; 71
    25b4:	41 e4       	ldi	r20, 0x41	; 65
    25b6:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <PinLayout>
    25ba:	42 c1       	rjmp	.+644    	; 0x2840 <main+0x992>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    lcd_fix_string(Triac);		//"Triac"
    goto gakAusgabe;
  }
  else if(PartFound == PART_RESISTOR) {
    25bc:	86 30       	cpi	r24, 0x06	; 6
    25be:	09 f0       	breq	.+2      	; 0x25c2 <main+0x714>
    25c0:	b9 c0       	rjmp	.+370    	; 0x2734 <main+0x886>
    if (ResistorsFound == 1) { // single resistor
    25c2:	60 91 5e 01 	lds	r22, 0x015E
    25c6:	61 30       	cpi	r22, 0x01	; 1
    25c8:	69 f4       	brne	.+26     	; 0x25e4 <main+0x736>
       lcd_testpin(resis[0].rb);  	//Pin-number 1
    25ca:	80 91 22 01 	lds	r24, 0x0122
    25ce:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
       lcd_fix_string(Resistor_str);
    25d2:	80 e5       	ldi	r24, 0x50	; 80
    25d4:	91 e0       	ldi	r25, 0x01	; 1
    25d6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
       lcd_testpin(resis[0].ra);		//Pin-number 2
    25da:	80 91 21 01 	lds	r24, 0x0121
    25de:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
    25e2:	61 c0       	rjmp	.+194    	; 0x26a6 <main+0x7f8>
    } else { // R-Max suchen
       ii = 0;
    25e4:	10 92 4b 01 	sts	0x014B, r1
       if (resis[1].rx > resis[0].rx)
    25e8:	20 91 24 01 	lds	r18, 0x0124
    25ec:	30 91 25 01 	lds	r19, 0x0125
    25f0:	40 91 26 01 	lds	r20, 0x0126
    25f4:	50 91 27 01 	lds	r21, 0x0127
    25f8:	80 91 18 01 	lds	r24, 0x0118
    25fc:	90 91 19 01 	lds	r25, 0x0119
    2600:	a0 91 1a 01 	lds	r26, 0x011A
    2604:	b0 91 1b 01 	lds	r27, 0x011B
    2608:	82 17       	cp	r24, r18
    260a:	93 07       	cpc	r25, r19
    260c:	a4 07       	cpc	r26, r20
    260e:	b5 07       	cpc	r27, r21
    2610:	18 f4       	brcc	.+6      	; 0x2618 <main+0x76a>
          ii = 1;
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	80 93 4b 01 	sts	0x014B, r24
       if (ResistorsFound == 2) {
    2618:	62 30       	cpi	r22, 0x02	; 2
    261a:	19 f4       	brne	.+6      	; 0x2622 <main+0x774>
          ii = 2;
    261c:	60 93 4b 01 	sts	0x014B, r22
    2620:	22 c0       	rjmp	.+68     	; 0x2666 <main+0x7b8>
       } else {
          if (resis[2].rx > resis[ii].rx) {
    2622:	80 91 4b 01 	lds	r24, 0x014B
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	fc 01       	movw	r30, r24
    262a:	ee 0f       	add	r30, r30
    262c:	ff 1f       	adc	r31, r31
    262e:	e8 0f       	add	r30, r24
    2630:	f9 1f       	adc	r31, r25
    2632:	ee 0f       	add	r30, r30
    2634:	ff 1f       	adc	r31, r31
    2636:	ee 0f       	add	r30, r30
    2638:	ff 1f       	adc	r31, r31
    263a:	e8 5e       	subi	r30, 0xE8	; 232
    263c:	fe 4f       	sbci	r31, 0xFE	; 254
    263e:	20 91 30 01 	lds	r18, 0x0130
    2642:	30 91 31 01 	lds	r19, 0x0131
    2646:	40 91 32 01 	lds	r20, 0x0132
    264a:	50 91 33 01 	lds	r21, 0x0133
    264e:	80 81       	ld	r24, Z
    2650:	91 81       	ldd	r25, Z+1	; 0x01
    2652:	a2 81       	ldd	r26, Z+2	; 0x02
    2654:	b3 81       	ldd	r27, Z+3	; 0x03
    2656:	82 17       	cp	r24, r18
    2658:	93 07       	cpc	r25, r19
    265a:	a4 07       	cpc	r26, r20
    265c:	b5 07       	cpc	r27, r21
    265e:	18 f4       	brcc	.+6      	; 0x2666 <main+0x7b8>
             ii = 2;
    2660:	82 e0       	ldi	r24, 0x02	; 2
    2662:	80 93 4b 01 	sts	0x014B, r24
       }
       char x = '1';
       char y = '3';
       char z = '2';
   
       if (ii == 1) {
    2666:	80 91 4b 01 	lds	r24, 0x014B
    266a:	81 30       	cpi	r24, 0x01	; 1
    266c:	29 f0       	breq	.+10     	; 0x2678 <main+0x7ca>
          // x = '1';
          y = '2';
          z = '3';
       }
       if (ii == 2) {
    266e:	82 30       	cpi	r24, 0x02	; 2
    2670:	39 f0       	breq	.+14     	; 0x2680 <main+0x7d2>
             ii = 2;
          }
       }
       char x = '1';
       char y = '3';
       char z = '2';
    2672:	12 e3       	ldi	r17, 0x32	; 50
          if (resis[2].rx > resis[ii].rx) {
             ii = 2;
          }
       }
       char x = '1';
       char y = '3';
    2674:	03 e3       	ldi	r16, 0x33	; 51
    2676:	02 c0       	rjmp	.+4      	; 0x267c <main+0x7ce>
       char z = '2';
   
       if (ii == 1) {
          // x = '1';
          y = '2';
          z = '3';
    2678:	13 e3       	ldi	r17, 0x33	; 51
       char y = '3';
       char z = '2';
   
       if (ii == 1) {
          // x = '1';
          y = '2';
    267a:	02 e3       	ldi	r16, 0x32	; 50
       } else {
          if (resis[2].rx > resis[ii].rx) {
             ii = 2;
          }
       }
       char x = '1';
    267c:	81 e3       	ldi	r24, 0x31	; 49
    267e:	03 c0       	rjmp	.+6      	; 0x2686 <main+0x7d8>
          z = '3';
       }
       if (ii == 2) {
          x = '2';
          y = '1';
          z = '3';
    2680:	13 e3       	ldi	r17, 0x33	; 51
          y = '2';
          z = '3';
       }
       if (ii == 2) {
          x = '2';
          y = '1';
    2682:	01 e3       	ldi	r16, 0x31	; 49
          // x = '1';
          y = '2';
          z = '3';
       }
       if (ii == 2) {
          x = '2';
    2684:	82 e3       	ldi	r24, 0x32	; 50
          y = '1';
          z = '3';
       }
       lcd_data(x);
    2686:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       lcd_fix_string(Resistor_str);    // -[=]-
    268a:	80 e5       	ldi	r24, 0x50	; 80
    268c:	91 e0       	ldi	r25, 0x01	; 1
    268e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
       lcd_data(y);
    2692:	80 2f       	mov	r24, r16
    2694:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       lcd_fix_string(Resistor_str);    // -[=]-
    2698:	80 e5       	ldi	r24, 0x50	; 80
    269a:	91 e0       	ldi	r25, 0x01	; 1
    269c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
       lcd_data(z);
    26a0:	81 2f       	mov	r24, r17
    26a2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
    }
    lcd_line2(); //2. row 
    26a6:	80 ec       	ldi	r24, 0xC0	; 192
    26a8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
    if (ResistorsFound == 1) {
    26ac:	80 91 5e 01 	lds	r24, 0x015E
    26b0:	81 30       	cpi	r24, 0x01	; 1
    26b2:	01 f5       	brne	.+64     	; 0x26f4 <main+0x846>
       RvalOut(0);
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <RvalOut>
#if FLASHEND > 0x1fff
       if (resis[0].lx != 0) {
    26ba:	80 91 1c 01 	lds	r24, 0x011C
    26be:	90 91 1d 01 	lds	r25, 0x011D
    26c2:	a0 91 1e 01 	lds	r26, 0x011E
    26c6:	b0 91 1f 01 	lds	r27, 0x011F
    26ca:	00 97       	sbiw	r24, 0x00	; 0
    26cc:	a1 05       	cpc	r26, r1
    26ce:	b1 05       	cpc	r27, r1
    26d0:	09 f4       	brne	.+2      	; 0x26d4 <main+0x826>
    26d2:	b6 c0       	rjmp	.+364    	; 0x2840 <main+0x992>
	  // resistor have also Inductance
          lcd_fix_string(Lis_str);	// "L="
    26d4:	8a e3       	ldi	r24, 0x3A	; 58
    26d6:	91 e0       	ldi	r25, 0x01	; 1
    26d8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
          DisplayValue(resis[0].lx,resis[0].lpre,'H',3);	// output inductance
    26dc:	60 91 1c 01 	lds	r22, 0x011C
    26e0:	70 91 1d 01 	lds	r23, 0x011D
    26e4:	80 91 1e 01 	lds	r24, 0x011E
    26e8:	90 91 1f 01 	lds	r25, 0x011F
    26ec:	40 91 20 01 	lds	r20, 0x0120
    26f0:	28 e4       	ldi	r18, 0x48	; 72
    26f2:	78 cd       	rjmp	.-1296   	; 0x21e4 <main+0x336>
       }
#endif
    } else {
       // output resistor values in right order
       if (ii == 0) {
    26f4:	80 91 4b 01 	lds	r24, 0x014B
    26f8:	88 23       	and	r24, r24
    26fa:	31 f4       	brne	.+12     	; 0x2708 <main+0x85a>
          RvalOut(1);
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	0e 94 52 03 	call	0x6a4	; 0x6a4 <RvalOut>
          RvalOut(2);
    2702:	82 e0       	ldi	r24, 0x02	; 2
    2704:	0e 94 52 03 	call	0x6a4	; 0x6a4 <RvalOut>
       }
       if (ii == 1) {
    2708:	80 91 4b 01 	lds	r24, 0x014B
    270c:	81 30       	cpi	r24, 0x01	; 1
    270e:	31 f4       	brne	.+12     	; 0x271c <main+0x86e>
          RvalOut(0);
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	0e 94 52 03 	call	0x6a4	; 0x6a4 <RvalOut>
          RvalOut(2);
    2716:	82 e0       	ldi	r24, 0x02	; 2
    2718:	0e 94 52 03 	call	0x6a4	; 0x6a4 <RvalOut>
       }
       if (ii == 2) {
    271c:	80 91 4b 01 	lds	r24, 0x014B
    2720:	82 30       	cpi	r24, 0x02	; 2
    2722:	09 f0       	breq	.+2      	; 0x2726 <main+0x878>
    2724:	8d c0       	rjmp	.+282    	; 0x2840 <main+0x992>
          RvalOut(0);
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	0e 94 52 03 	call	0x6a4	; 0x6a4 <RvalOut>
          RvalOut(1);
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <RvalOut>
    2732:	86 c0       	rjmp	.+268    	; 0x2840 <main+0x992>
    goto end;

  } // end (PartFound == PART_RESISTOR)

//capacity measurement is wanted
  else if(PartFound == PART_CAPACITOR) {
    2734:	87 30       	cpi	r24, 0x07	; 7
    2736:	09 f0       	breq	.+2      	; 0x273a <main+0x88c>
    2738:	51 c0       	rjmp	.+162    	; 0x27dc <main+0x92e>
//     lcd_fix_string(Capacitor);
     lcd_testpin(cap.ca);		//Pin number 1
    273a:	80 91 72 01 	lds	r24, 0x0172
    273e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
     lcd_fix_string(CapZeich);		// capacitor sign
    2742:	8d e1       	ldi	r24, 0x1D	; 29
    2744:	91 e0       	ldi	r25, 0x01	; 1
    2746:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_testpin(cap.cb);		//Pin number 2
    274a:	80 91 73 01 	lds	r24, 0x0173
    274e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
#if FLASHEND > 0x1fff
     GetVloss();			// get Voltage loss of capacitor
    2752:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <GetVloss>
     if (cap.v_loss != 0) {
    2756:	80 91 70 01 	lds	r24, 0x0170
    275a:	90 91 71 01 	lds	r25, 0x0171
    275e:	00 97       	sbiw	r24, 0x00	; 0
    2760:	79 f0       	breq	.+30     	; 0x2780 <main+0x8d2>
        lcd_fix_string(VLOSS_str);	// "  Vloss="
    2762:	82 e3       	ldi	r24, 0x32	; 50
    2764:	91 e0       	ldi	r25, 0x01	; 1
    2766:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        DisplayValue(cap.v_loss,-1,'%',2);
    276a:	60 91 70 01 	lds	r22, 0x0170
    276e:	70 91 71 01 	lds	r23, 0x0171
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	4f ef       	ldi	r20, 0xFF	; 255
    2778:	25 e2       	ldi	r18, 0x25	; 37
    277a:	02 e0       	ldi	r16, 0x02	; 2
    277c:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
     }
#endif
     lcd_line2(); 			//2. row 
    2780:	80 ec       	ldi	r24, 0xC0	; 192
    2782:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     DisplayValue(cap.cval_max,cap.cpre_max,'F',4);
    2786:	60 91 66 01 	lds	r22, 0x0166
    278a:	70 91 67 01 	lds	r23, 0x0167
    278e:	80 91 68 01 	lds	r24, 0x0168
    2792:	90 91 69 01 	lds	r25, 0x0169
    2796:	40 91 75 01 	lds	r20, 0x0175
    279a:	26 e4       	ldi	r18, 0x46	; 70
    279c:	04 e0       	ldi	r16, 0x04	; 4
    279e:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
#if FLASHEND > 0x1fff
     cap.esr = GetESR(cap.cb, cap.ca);		// get ESR of capacitor
    27a2:	80 91 73 01 	lds	r24, 0x0173
    27a6:	60 91 72 01 	lds	r22, 0x0172
    27aa:	0e 94 38 1b 	call	0x3670	; 0x3670 <GetESR>
    27ae:	90 93 6f 01 	sts	0x016F, r25
    27b2:	80 93 6e 01 	sts	0x016E, r24
     if ( cap.esr < 65530) {
    27b6:	2f ef       	ldi	r18, 0xFF	; 255
    27b8:	8a 3f       	cpi	r24, 0xFA	; 250
    27ba:	92 07       	cpc	r25, r18
    27bc:	08 f0       	brcs	.+2      	; 0x27c0 <main+0x912>
    27be:	40 c0       	rjmp	.+128    	; 0x2840 <main+0x992>
        lcd_fix_string(ESR_str);
    27c0:	8c e2       	ldi	r24, 0x2C	; 44
    27c2:	91 e0       	ldi	r25, 0x01	; 1
    27c4:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        DisplayValue(cap.esr,-2,LCD_CHAR_OMEGA,2);
    27c8:	60 91 6e 01 	lds	r22, 0x016E
    27cc:	70 91 6f 01 	lds	r23, 0x016F
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	4e ef       	ldi	r20, 0xFE	; 254
    27d6:	24 ef       	ldi	r18, 0xF4	; 244
    27d8:	02 e0       	ldi	r16, 0x02	; 2
    27da:	57 ce       	rjmp	.-850    	; 0x248a <main+0x5dc>
     }
#endif
     goto end;
  }
  if(NumOfDiodes == 0) { //no diodes are found
    27dc:	80 91 05 01 	lds	r24, 0x0105
    27e0:	88 23       	and	r24, r24
    27e2:	71 f4       	brne	.+28     	; 0x2800 <main+0x952>
     lcd_fix_string(TestFailed1); 	//"Kein,unbek. oder"
    27e4:	88 e9       	ldi	r24, 0x98	; 152
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_line2(); //2. row 
    27ec:	80 ec       	ldi	r24, 0xC0	; 192
    27ee:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     lcd_fix_string(TestFailed2); 	//"defektes "
    27f2:	81 e7       	ldi	r24, 0x71	; 113
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_fix_string(Bauteil);		//"Bauteil"
    27fa:	8a e7       	ldi	r24, 0x7A	; 122
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	16 c0       	rjmp	.+44     	; 0x282c <main+0x97e>
  } else {
     lcd_fix_string(Bauteil);		//"Bauteil"
    2800:	8a e7       	ldi	r24, 0x7A	; 122
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_fix_string(Unknown); 		//" unbek."
    2808:	8f e8       	ldi	r24, 0x8F	; 143
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_line2(); //2. row 
    2810:	80 ec       	ldi	r24, 0xC0	; 192
    2812:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     lcd_fix_string(OrBroken); 		//"oder defekt "
    2816:	88 ea       	ldi	r24, 0xA8	; 168
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_data(NumOfDiodes + '0');
    281e:	80 91 05 01 	lds	r24, 0x0105
    2822:	80 5d       	subi	r24, 0xD0	; 208
    2824:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
     lcd_fix_string(AnKat);		//"->|-"
    2828:	83 e4       	ldi	r24, 0x43	; 67
    282a:	91 e0       	ldi	r25, 0x01	; 1
    282c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  }
  empty_count++;
    2830:	80 91 4a 01 	lds	r24, 0x014A
    2834:	8f 5f       	subi	r24, 0xFF	; 255
    2836:	80 93 4a 01 	sts	0x014A, r24
  mess_count = 0;
    283a:	10 92 0b 01 	sts	0x010B, r1
  goto end2;
    283e:	07 c0       	rjmp	.+14     	; 0x284e <main+0x9a0>
gakAusgabe:
  lcd_line2(); //2. row 
  PinLayout(Cathode_char,'G','A'); 	// CGA= or 123=...
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 end:
  empty_count = 0;		// reset counter, if part is found
    2840:	10 92 4a 01 	sts	0x014A, r1
  mess_count++;			// count measurements
    2844:	80 91 0b 01 	lds	r24, 0x010B
    2848:	8f 5f       	subi	r24, 0xFF	; 255
    284a:	80 93 0b 01 	sts	0x010B, r24

 end2:
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND, release relay
    284e:	88 e1       	ldi	r24, 0x18	; 24
    2850:	87 b9       	out	0x07, r24	; 7
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
    2852:	4f 9b       	sbis	0x09, 7	; 9
    2854:	fe cf       	rjmp	.-4      	; 0x2852 <main+0x9a4>
  wait_about200ms();
    2856:	88 e2       	ldi	r24, 0x28	; 40
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
// wait 28 seconds or 5 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage+=10) {
    285e:	10 92 60 01 	sts	0x0160, r1
    2862:	10 92 5f 01 	sts	0x015F, r1
    2866:	10 c0       	rjmp	.+32     	; 0x2888 <main+0x9da>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    2868:	4f 9b       	sbis	0x09, 7	; 9
    286a:	78 cb       	rjmp	.-2320   	; 0x1f5c <main+0xae>
        // If the key is pressed again... 
        // goto start of measurement 
        goto start;
     }
     wdt_reset();
    286c:	a8 95       	wdr
     wait_about10ms();
    286e:	82 e0       	ldi	r24, 0x02	; 2
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
 end2:
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND, release relay
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
  wait_about200ms();
// wait 28 seconds or 5 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage+=10) {
    2876:	80 91 5f 01 	lds	r24, 0x015F
    287a:	90 91 60 01 	lds	r25, 0x0160
    287e:	0a 96       	adiw	r24, 0x0a	; 10
    2880:	90 93 60 01 	sts	0x0160, r25
    2884:	80 93 5f 01 	sts	0x015F, r24
    2888:	80 91 5f 01 	lds	r24, 0x015F
    288c:	90 91 60 01 	lds	r25, 0x0160
    2890:	2d e6       	ldi	r18, 0x6D	; 109
    2892:	80 36       	cpi	r24, 0x60	; 96
    2894:	92 07       	cpc	r25, r18
    2896:	40 f3       	brcs	.-48     	; 0x2868 <main+0x9ba>
     goto start;			// repeat measurement POWER_OFF times
  }
 #endif
  // only one Measurement requested, shut off
//  MCUSR = 0;
  ON_PORT &= ~(1<<ON_PIN);		//switch off power
    2898:	5e 98       	cbi	0x0b, 6	; 11
  //never ending loop 
  while(1) {
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    289a:	4f 9b       	sbis	0x09, 7	; 9
    289c:	5f cb       	rjmp	.-2370   	; 0x1f5c <main+0xae>
        // The statement is only reached if no auto off equipment is installed
        goto start;
     }
     wdt_reset();
    289e:	a8 95       	wdr
     wait_about10ms();
    28a0:	82 e0       	ldi	r24, 0x02	; 2
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
  }
    28a8:	f8 cf       	rjmp	.-16     	; 0x289a <main+0x9ec>

000028aa <uart_putc>:
    28aa:	2f 93       	push	r18
    28ac:	5f b7       	in	r21, 0x3f	; 63
    28ae:	2f 93       	push	r18
    28b0:	2a e0       	ldi	r18, 0x0A	; 10
    28b2:	80 95       	com	r24
    28b4:	08 94       	sec

000028b6 <putchar0>:
    28b6:	10 f4       	brcc	.+4      	; 0x28bc <putchar1>
    28b8:	43 98       	cbi	0x08, 3	; 8
    28ba:	02 c0       	rjmp	.+4      	; 0x28c0 <putchar2>

000028bc <putchar1>:
    28bc:	43 9a       	sbi	0x08, 3	; 8
	...

000028c0 <putchar2>:
    28c0:	22 d0       	rcall	.+68     	; 0x2906 <wait100us>
    28c2:	29 d0       	rcall	.+82     	; 0x2916 <wait3us>
    28c4:	86 95       	lsr	r24
    28c6:	2a 95       	dec	r18
    28c8:	b1 f7       	brne	.-20     	; 0x28b6 <putchar0>
    28ca:	2f 91       	pop	r18
    28cc:	5f bf       	out	0x3f, r21	; 63
    28ce:	2f 91       	pop	r18
    28d0:	08 95       	ret

000028d2 <UART_delay1>:
    28d2:	08 95       	ret

000028d4 <wait5s>:
    28d4:	03 d0       	rcall	.+6      	; 0x28dc <wait1000ms>

000028d6 <wait4s>:
    28d6:	02 d0       	rcall	.+4      	; 0x28dc <wait1000ms>

000028d8 <wait3s>:
    28d8:	01 d0       	rcall	.+2      	; 0x28dc <wait1000ms>

000028da <wait2s>:
    28da:	00 d0       	rcall	.+0      	; 0x28dc <wait1000ms>

000028dc <wait1000ms>:
    28dc:	00 d0       	rcall	.+0      	; 0x28de <wait500ms>

000028de <wait500ms>:
    28de:	03 d0       	rcall	.+6      	; 0x28e6 <wait100ms>

000028e0 <wait400ms>:
    28e0:	02 d0       	rcall	.+4      	; 0x28e6 <wait100ms>

000028e2 <wait300ms>:
    28e2:	01 d0       	rcall	.+2      	; 0x28e6 <wait100ms>

000028e4 <wait200ms>:
    28e4:	00 d0       	rcall	.+0      	; 0x28e6 <wait100ms>

000028e6 <wait100ms>:
    28e6:	a8 95       	wdr
    28e8:	00 d0       	rcall	.+0      	; 0x28ea <wait50ms>

000028ea <wait50ms>:
    28ea:	03 d0       	rcall	.+6      	; 0x28f2 <wait10ms>

000028ec <wait40ms>:
    28ec:	02 d0       	rcall	.+4      	; 0x28f2 <wait10ms>

000028ee <wait30ms>:
    28ee:	01 d0       	rcall	.+2      	; 0x28f2 <wait10ms>

000028f0 <wait20ms>:
    28f0:	00 d0       	rcall	.+0      	; 0x28f2 <wait10ms>

000028f2 <wait10ms>:
    28f2:	00 d0       	rcall	.+0      	; 0x28f4 <wait5ms>

000028f4 <wait5ms>:
    28f4:	03 d0       	rcall	.+6      	; 0x28fc <wait1ms>

000028f6 <wait4ms>:
    28f6:	02 d0       	rcall	.+4      	; 0x28fc <wait1ms>

000028f8 <wait3ms>:
    28f8:	01 d0       	rcall	.+2      	; 0x28fc <wait1ms>

000028fa <wait2ms>:
    28fa:	00 d0       	rcall	.+0      	; 0x28fc <wait1ms>

000028fc <wait1ms>:
    28fc:	00 d0       	rcall	.+0      	; 0x28fe <wait500us>

000028fe <wait500us>:
    28fe:	03 d0       	rcall	.+6      	; 0x2906 <wait100us>

00002900 <wait400us>:
    2900:	02 d0       	rcall	.+4      	; 0x2906 <wait100us>

00002902 <wait300us>:
    2902:	01 d0       	rcall	.+2      	; 0x2906 <wait100us>

00002904 <wait200us>:
    2904:	00 d0       	rcall	.+0      	; 0x2906 <wait100us>

00002906 <wait100us>:
    2906:	00 d0       	rcall	.+0      	; 0x2908 <wait50us>

00002908 <wait50us>:
    2908:	03 d0       	rcall	.+6      	; 0x2910 <wait10us>

0000290a <wait40us>:
    290a:	02 d0       	rcall	.+4      	; 0x2910 <wait10us>

0000290c <wait30us>:
    290c:	01 d0       	rcall	.+2      	; 0x2910 <wait10us>

0000290e <wait20us>:
    290e:	00 d0       	rcall	.+0      	; 0x2910 <wait10us>

00002910 <wait10us>:
    2910:	00 d0       	rcall	.+0      	; 0x2912 <wait5us>

00002912 <wait5us>:
    2912:	03 d0       	rcall	.+6      	; 0x291a <wait1us>

00002914 <wait4us>:
    2914:	02 d0       	rcall	.+4      	; 0x291a <wait1us>

00002916 <wait3us>:
    2916:	01 d0       	rcall	.+2      	; 0x291a <wait1us>

00002918 <wait2us>:
    2918:	00 d0       	rcall	.+0      	; 0x291a <wait1us>

0000291a <wait1us>:
    291a:	00 00       	nop
    291c:	08 95       	ret

0000291e <getRLmultip>:
  R_DDR = 0;			// switch all resistor ports to input
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
  return;
 } // end ReadCapacity()

unsigned int getRLmultip(unsigned int cvolt) {
    291e:	ff 92       	push	r15
    2920:	0f 93       	push	r16
    2922:	1f 93       	push	r17
    2924:	cf 93       	push	r28
    2926:	df 93       	push	r29

  unsigned int uvolt;
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;
  if (cvolt >= RL_Tab_Beginn) {
    2928:	21 e0       	ldi	r18, 0x01	; 1
    292a:	8c 32       	cpi	r24, 0x2C	; 44
    292c:	92 07       	cpc	r25, r18
    292e:	18 f0       	brcs	.+6      	; 0x2936 <getRLmultip+0x18>
     uvolt = cvolt - RL_Tab_Beginn;
    2930:	8c 52       	subi	r24, 0x2C	; 44
    2932:	91 40       	sbci	r25, 0x01	; 1
    2934:	02 c0       	rjmp	.+4      	; 0x293a <getRLmultip+0x1c>
  } else {
     uvolt = 0;			// limit to begin of table
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = uvolt / RL_Tab_Abstand;
    293a:	69 e1       	ldi	r22, 0x19	; 25
    293c:	70 e0       	ldi	r23, 0x00	; 0
    293e:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__udivmodhi4>
  tabres = uvolt % RL_Tab_Abstand;
    2942:	f8 2e       	mov	r15, r24
  tabres = RL_Tab_Abstand - tabres;
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
    2944:	6d 32       	cpi	r22, 0x2D	; 45
    2946:	08 f0       	brcs	.+2      	; 0x294a <getRLmultip+0x2c>
    2948:	6c e2       	ldi	r22, 0x2C	; 44
    294a:	c6 2f       	mov	r28, r22
    294c:	d0 e0       	ldi	r29, 0x00	; 0
    294e:	ce 01       	movw	r24, r28
    2950:	88 0f       	add	r24, r24
    2952:	99 1f       	adc	r25, r25
    2954:	80 50       	subi	r24, 0x00	; 0
    2956:	90 40       	sbci	r25, 0x00	; 0
    2958:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <__eerd_word_m168>
    295c:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RLtab[tabind+1]);
    295e:	ce 01       	movw	r24, r28
    2960:	88 0f       	add	r24, r24
    2962:	99 1f       	adc	r25, r25
    2964:	8e 5f       	subi	r24, 0xFE	; 254
    2966:	9f 4f       	sbci	r25, 0xFF	; 255
    2968:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <__eerd_word_m168>
    296c:	9c 01       	movw	r18, r24
  } else {
     uvolt = 0;			// limit to begin of table
  }
  tabind = uvolt / RL_Tab_Abstand;
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
    296e:	49 e1       	ldi	r20, 0x19	; 25
    2970:	4f 19       	sub	r20, r15
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
    2972:	50 e0       	ldi	r21, 0x00	; 0
    2974:	08 1b       	sub	r16, r24
    2976:	19 0b       	sbc	r17, r25
    2978:	40 9f       	mul	r20, r16
    297a:	c0 01       	movw	r24, r0
    297c:	41 9f       	mul	r20, r17
    297e:	90 0d       	add	r25, r0
    2980:	50 9f       	mul	r21, r16
    2982:	90 0d       	add	r25, r0
    2984:	11 24       	eor	r1, r1
    2986:	0c 96       	adiw	r24, 0x0c	; 12
    2988:	69 e1       	ldi	r22, 0x19	; 25
    298a:	70 e0       	ldi	r23, 0x00	; 0
    298c:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__udivmodhi4>
    2990:	62 0f       	add	r22, r18
    2992:	73 1f       	adc	r23, r19
}
    2994:	cb 01       	movw	r24, r22
    2996:	df 91       	pop	r29
    2998:	cf 91       	pop	r28
    299a:	1f 91       	pop	r17
    299c:	0f 91       	pop	r16
    299e:	ff 90       	pop	r15
    29a0:	08 95       	ret

000029a2 <Scale_C_with_vcc>:

void Scale_C_with_vcc(void) {
    29a2:	8f 92       	push	r8
    29a4:	9f 92       	push	r9
    29a6:	af 92       	push	r10
    29a8:	bf 92       	push	r11
    29aa:	df 92       	push	r13
    29ac:	ef 92       	push	r14
    29ae:	ff 92       	push	r15
    29b0:	0f 93       	push	r16
    29b2:	1f 93       	push	r17
    29b4:	e0 90 62 01 	lds	r14, 0x0162
    29b8:	f0 90 63 01 	lds	r15, 0x0163
    29bc:	00 91 64 01 	lds	r16, 0x0164
    29c0:	10 91 65 01 	lds	r17, 0x0165
    29c4:	d0 90 74 01 	lds	r13, 0x0174
   while (cap.cval > 100000) {
      cap.cval /= 10;
    29c8:	4a e0       	ldi	r20, 0x0A	; 10
    29ca:	84 2e       	mov	r8, r20
    29cc:	91 2c       	mov	r9, r1
    29ce:	a1 2c       	mov	r10, r1
    29d0:	b1 2c       	mov	r11, r1
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    29d2:	08 c0       	rjmp	.+16     	; 0x29e4 <Scale_C_with_vcc+0x42>
      cap.cval /= 10;
    29d4:	c8 01       	movw	r24, r16
    29d6:	b7 01       	movw	r22, r14
    29d8:	a5 01       	movw	r20, r10
    29da:	94 01       	movw	r18, r8
    29dc:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
    29e0:	79 01       	movw	r14, r18
    29e2:	8a 01       	movw	r16, r20
    29e4:	8d 2d       	mov	r24, r13
    29e6:	d3 94       	inc	r13
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    29e8:	91 ea       	ldi	r25, 0xA1	; 161
    29ea:	e9 16       	cp	r14, r25
    29ec:	96 e8       	ldi	r25, 0x86	; 134
    29ee:	f9 06       	cpc	r15, r25
    29f0:	91 e0       	ldi	r25, 0x01	; 1
    29f2:	09 07       	cpc	r16, r25
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	19 07       	cpc	r17, r25
    29f8:	68 f7       	brcc	.-38     	; 0x29d4 <Scale_C_with_vcc+0x32>
    29fa:	80 93 74 01 	sts	0x0174, r24
      cap.cval /= 10;
      cap.cpre ++;			// prevent overflow
   }
   cap.cval *= ADCconfig.U_AVCC;	// scale with measured voltage
    29fe:	20 91 40 01 	lds	r18, 0x0140
    2a02:	30 91 41 01 	lds	r19, 0x0141
    2a06:	40 e0       	ldi	r20, 0x00	; 0
    2a08:	50 e0       	ldi	r21, 0x00	; 0
    2a0a:	c8 01       	movw	r24, r16
    2a0c:	b7 01       	movw	r22, r14
    2a0e:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
    2a12:	28 e8       	ldi	r18, 0x88	; 136
    2a14:	33 e1       	ldi	r19, 0x13	; 19
    2a16:	40 e0       	ldi	r20, 0x00	; 0
    2a18:	50 e0       	ldi	r21, 0x00	; 0
    2a1a:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
    2a1e:	20 93 62 01 	sts	0x0162, r18
    2a22:	30 93 63 01 	sts	0x0163, r19
    2a26:	40 93 64 01 	sts	0x0164, r20
    2a2a:	50 93 65 01 	sts	0x0165, r21
}
    2a2e:	1f 91       	pop	r17
    2a30:	0f 91       	pop	r16
    2a32:	ff 90       	pop	r15
    2a34:	ef 90       	pop	r14
    2a36:	df 90       	pop	r13
    2a38:	bf 90       	pop	r11
    2a3a:	af 90       	pop	r10
    2a3c:	9f 90       	pop	r9
    2a3e:	8f 90       	pop	r8
    2a40:	08 95       	ret

00002a42 <ReadCapacity>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    2a42:	7f 92       	push	r7
    2a44:	8f 92       	push	r8
    2a46:	9f 92       	push	r9
    2a48:	af 92       	push	r10
    2a4a:	bf 92       	push	r11
    2a4c:	cf 92       	push	r12
    2a4e:	df 92       	push	r13
    2a50:	ef 92       	push	r14
    2a52:	ff 92       	push	r15
    2a54:	0f 93       	push	r16
    2a56:	1f 93       	push	r17
    2a58:	cf 93       	push	r28
    2a5a:	df 93       	push	r29
    2a5c:	18 2f       	mov	r17, r24
    2a5e:	76 2e       	mov	r7, r22
#if FLASHEND > 0x1fff
  unsigned int vloss;	// lost voltage after load pulse in 0.1% 
#endif

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
    2a60:	88 0f       	add	r24, r24
    2a62:	81 0f       	add	r24, r17
    2a64:	86 0f       	add	r24, r22
    2a66:	81 50       	subi	r24, 0x01	; 1
    2a68:	80 93 4c 01 	sts	0x014C, r24
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2a6c:	e6 2f       	mov	r30, r22
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	e3 5f       	subi	r30, 0xF3	; 243
    2a72:	fe 4f       	sbci	r31, 0xFE	; 254
    2a74:	04 91       	lpm	r16, Z+
  HiPinR_L = pgm_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
    2a76:	e1 2f       	mov	r30, r17
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	e6 5f       	subi	r30, 0xF6	; 246
    2a7c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a7e:	a4 90       	lpm	r10, Z+
  lcd_testpin(LowPin);
  lcd_data('C');
  lcd_testpin(HighPin);
  lcd_space();
#endif
  if(PartFound == PART_RESISTOR) {
    2a80:	80 91 07 01 	lds	r24, 0x0107
    2a84:	86 30       	cpi	r24, 0x06	; 6
    2a86:	09 f4       	brne	.+2      	; 0x2a8a <ReadCapacity+0x48>
    2a88:	a4 c2       	rjmp	.+1352   	; 0x2fd2 <ReadCapacity+0x590>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    2a8a:	30 91 05 01 	lds	r19, 0x0105
    2a8e:	a8 e7       	ldi	r26, 0x78	; 120
    2a90:	b1 e0       	ldi	r27, 0x01	; 1
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	13 c0       	rjmp	.+38     	; 0x2abc <ReadCapacity+0x7a>
     if ((diodes[ii].Cathode == LowPin) && (diodes[ii].Anode == HighPin) && (diodes[ii].Voltage < 1500)) {
    2a96:	11 96       	adiw	r26, 0x01	; 1
    2a98:	8c 91       	ld	r24, X
    2a9a:	11 97       	sbiw	r26, 0x01	; 1
    2a9c:	87 15       	cp	r24, r7
    2a9e:	61 f4       	brne	.+24     	; 0x2ab8 <ReadCapacity+0x76>
    2aa0:	8c 91       	ld	r24, X
    2aa2:	81 17       	cp	r24, r17
    2aa4:	49 f4       	brne	.+18     	; 0x2ab8 <ReadCapacity+0x76>
    2aa6:	12 96       	adiw	r26, 0x02	; 2
    2aa8:	8d 91       	ld	r24, X+
    2aaa:	9c 91       	ld	r25, X
    2aac:	13 97       	sbiw	r26, 0x03	; 3
    2aae:	45 e0       	ldi	r20, 0x05	; 5
    2ab0:	8c 3d       	cpi	r24, 0xDC	; 220
    2ab2:	94 07       	cpc	r25, r20
    2ab4:	08 f4       	brcc	.+2      	; 0x2ab8 <ReadCapacity+0x76>
    2ab6:	8d c2       	rjmp	.+1306   	; 0x2fd2 <ReadCapacity+0x590>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    2ab8:	2f 5f       	subi	r18, 0xFF	; 255
    2aba:	14 96       	adiw	r26, 0x04	; 4
    2abc:	23 17       	cp	r18, r19
    2abe:	58 f3       	brcs	.-42     	; 0x2a96 <ReadCapacity+0x54>

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2ac0:	08 60       	ori	r16, 0x08	; 8
        return;
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
    2ac2:	10 92 6f 01 	sts	0x016F, r1
    2ac6:	10 92 6e 01 	sts	0x016E, r1
  vloss = 0;				// set lost voltage to zero
#endif
  cap.cval = 0;				// set capacity value to zero
    2aca:	10 92 62 01 	sts	0x0162, r1
    2ace:	10 92 63 01 	sts	0x0163, r1
    2ad2:	10 92 64 01 	sts	0x0164, r1
    2ad6:	10 92 65 01 	sts	0x0165, r1
  cap.cpre = -12;			//default unit is pF
    2ada:	84 ef       	ldi	r24, 0xF4	; 244
    2adc:	80 93 74 01 	sts	0x0174, r24
  EntladePins();			// discharge capacitor
    2ae0:	0e 94 b2 01 	call	0x364	; 0x364 <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    2ae4:	88 e0       	ldi	r24, 0x08	; 8
    2ae6:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    2ae8:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    2aea:	07 b9       	out	0x07, r16	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    2aec:	a4 b8       	out	0x04, r10	; 4
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    2aee:	81 2f       	mov	r24, r17
    2af0:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
    2af4:	7c 01       	movw	r14, r24
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2af6:	10 92 4e 01 	sts	0x014E, r1
    2afa:	10 92 4d 01 	sts	0x014D, r1
  EntladePins();			// discharge capacitor
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
  R_PORT = 0;				// switch R-Port to GND
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    2afe:	ec 01       	movw	r28, r24
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2b00:	2d c0       	rjmp	.+90     	; 0x2b5c <ReadCapacity+0x11a>
     R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    2b02:	a5 b8       	out	0x05, r10	; 5
     R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    2b04:	a4 b8       	out	0x04, r10	; 4
     wait10ms();			// wait exactly 10ms, do not sleep
    2b06:	0e 94 79 14 	call	0x28f2	; 0x28f2 <wait10ms>
     R_DDR = 0;				// switch back to input
    2b0a:	14 b8       	out	0x04, r1	; 4
     R_PORT = 0;			// no Pull up
    2b0c:	15 b8       	out	0x05, r1	; 5
     wait500us();			//wait a little time
    2b0e:	0e 94 7f 14 	call	0x28fe	; 0x28fe <wait500us>
     wdt_reset();
    2b12:	a8 95       	wdr
     // read voltage without current, is already charged enough?
     adcv[2] = ReadADC(HighPin);
    2b14:	81 2f       	mov	r24, r17
    2b16:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
     if (adcv[2] > adcv[0]) {
    2b1a:	e8 16       	cp	r14, r24
    2b1c:	f9 06       	cpc	r15, r25
    2b1e:	20 f4       	brcc	.+8      	; 0x2b28 <ReadCapacity+0xe6>
        adcv[2] -= adcv[0];		//difference to beginning voltage
    2b20:	ec 01       	movw	r28, r24
    2b22:	ce 19       	sub	r28, r14
    2b24:	df 09       	sbc	r29, r15
    2b26:	02 c0       	rjmp	.+4      	; 0x2b2c <ReadCapacity+0xea>
     } else {
        adcv[2] = 0;			// voltage is lower or same as beginning voltage
    2b28:	c0 e0       	ldi	r28, 0x00	; 0
    2b2a:	d0 e0       	ldi	r29, 0x00	; 0
     }
     if ((ovcnt16 == 126) && (adcv[2] < 75)) {
    2b2c:	80 91 4d 01 	lds	r24, 0x014D
    2b30:	90 91 4e 01 	lds	r25, 0x014E
    2b34:	8e 37       	cpi	r24, 0x7E	; 126
    2b36:	91 05       	cpc	r25, r1
    2b38:	21 f4       	brne	.+8      	; 0x2b42 <ReadCapacity+0x100>
    2b3a:	cb 34       	cpi	r28, 0x4B	; 75
    2b3c:	d1 05       	cpc	r29, r1
    2b3e:	08 f4       	brcc	.+2      	; 0x2b42 <ReadCapacity+0x100>
    2b40:	43 c2       	rjmp	.+1158   	; 0x2fc8 <ReadCapacity+0x586>
        // 300mV can not be reached well-timed 
        break;		// don't try to load any more
     }
     if (adcv[2] > 300) {
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	cd 32       	cpi	r28, 0x2D	; 45
    2b46:	d8 07       	cpc	r29, r24
    2b48:	b0 f4       	brcc	.+44     	; 0x2b76 <ReadCapacity+0x134>
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2b4a:	80 91 4d 01 	lds	r24, 0x014D
    2b4e:	90 91 4e 01 	lds	r25, 0x014E
    2b52:	01 96       	adiw	r24, 0x01	; 1
    2b54:	90 93 4e 01 	sts	0x014E, r25
    2b58:	80 93 4d 01 	sts	0x014D, r24
    2b5c:	80 91 4d 01 	lds	r24, 0x014D
    2b60:	90 91 4e 01 	lds	r25, 0x014E
    2b64:	21 e0       	ldi	r18, 0x01	; 1
    2b66:	84 3f       	cpi	r24, 0xF4	; 244
    2b68:	92 07       	cpc	r25, r18
    2b6a:	58 f2       	brcs	.-106    	; 0x2b02 <ReadCapacity+0xc0>
//  wdt_reset();
#if DebugOut == 10
  DisplayValue(ovcnt16,0,' ',4);
  DisplayValue(adcv[2],-3,'V',4);
#endif
  if (adcv[2] < 301) {
    2b6c:	41 e0       	ldi	r20, 0x01	; 1
    2b6e:	cd 32       	cpi	r28, 0x2D	; 45
    2b70:	d4 07       	cpc	r29, r20
    2b72:	08 f4       	brcc	.+2      	; 0x2b76 <ReadCapacity+0x134>
    2b74:	29 c2       	rjmp	.+1106   	; 0x2fc8 <ReadCapacity+0x586>
#endif
//     if (NumOfDiodes != 0) goto messe_mit_rh; /* ****************************** */
     goto keinC;		// was never charged enough, >100mF or shorted
  }
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    2b76:	80 91 4d 01 	lds	r24, 0x014D
    2b7a:	90 91 4e 01 	lds	r25, 0x014E
    2b7e:	00 97       	sbiw	r24, 0x00	; 0
    2b80:	81 f4       	brne	.+32     	; 0x2ba2 <ReadCapacity+0x160>
    2b82:	85 e0       	ldi	r24, 0x05	; 5
    2b84:	c5 31       	cpi	r28, 0x15	; 21
    2b86:	d8 07       	cpc	r29, r24
    2b88:	08 f0       	brcs	.+2      	; 0x2b8c <ReadCapacity+0x14a>
    2b8a:	92 c0       	rjmp	.+292    	; 0x2cb0 <ReadCapacity+0x26e>
    2b8c:	0a c0       	rjmp	.+20     	; 0x2ba2 <ReadCapacity+0x160>
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
     wait5ms();
    2b8e:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <wait5ms>
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
    2b92:	81 2f       	mov	r24, r17
    2b94:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
     wdt_reset();
    2b98:	a8 95       	wdr
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2b9a:	08 94       	sec
    2b9c:	c1 1c       	adc	r12, r1
    2b9e:	d1 1c       	adc	r13, r1
    2ba0:	03 c0       	rjmp	.+6      	; 0x2ba8 <ReadCapacity+0x166>
#endif
//     if (NumOfDiodes != 0) goto messe_mit_rh; /* ****************************** */
     goto keinC;		// was never charged enough, >100mF or shorted
  }
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    2ba2:	ce 01       	movw	r24, r28
    2ba4:	cc 24       	eor	r12, r12
    2ba6:	dd 24       	eor	r13, r13
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2ba8:	20 91 4d 01 	lds	r18, 0x014D
    2bac:	30 91 4e 01 	lds	r19, 0x014E
    2bb0:	2c 15       	cp	r18, r12
    2bb2:	3d 05       	cpc	r19, r13
    2bb4:	60 f7       	brcc	.-40     	; 0x2b8e <ReadCapacity+0x14c>
     wait5ms();
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
    2bb6:	e8 16       	cp	r14, r24
    2bb8:	f9 06       	cpc	r15, r25
    2bba:	30 f4       	brcc	.+12     	; 0x2bc8 <ReadCapacity+0x186>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    2bbc:	8e 19       	sub	r24, r14
    2bbe:	9f 09       	sbc	r25, r15
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    2bc0:	8c 17       	cp	r24, r28
    2bc2:	9d 07       	cpc	r25, r29
    2bc4:	10 f5       	brcc	.+68     	; 0x2c0a <ReadCapacity+0x1c8>
    2bc6:	02 c0       	rjmp	.+4      	; 0x2bcc <ReadCapacity+0x18a>
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
    2bcc:	7e 01       	movw	r14, r28
    2bce:	e8 1a       	sub	r14, r24
    2bd0:	f9 0a       	sbc	r15, r25
  } else {
     adcv[3] = 0;			// no lost voltage
  }
#if FLASHEND > 0x1fff
  // compute equivalent parallel resistance from voltage drop
  if (adcv[3] > 0) {
    2bd2:	e9 f0       	breq	.+58     	; 0x2c0e <ReadCapacity+0x1cc>
     // there is any voltage drop (adcv[3]) !
     // adcv[2] is the loaded voltage.
     vloss = (unsigned long)(adcv[3] * 1000UL) / adcv[2];
    2bd4:	b7 01       	movw	r22, r14
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	28 ee       	ldi	r18, 0xE8	; 232
    2bdc:	33 e0       	ldi	r19, 0x03	; 3
    2bde:	40 e0       	ldi	r20, 0x00	; 0
    2be0:	50 e0       	ldi	r21, 0x00	; 0
    2be2:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
    2be6:	9e 01       	movw	r18, r28
    2be8:	40 e0       	ldi	r20, 0x00	; 0
    2bea:	50 e0       	ldi	r21, 0x00	; 0
    2bec:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
    2bf0:	49 01       	movw	r8, r18
  }
#endif
  if (adcv[3] > 100) {
    2bf2:	25 e6       	ldi	r18, 0x65	; 101
    2bf4:	e2 16       	cp	r14, r18
    2bf6:	f1 04       	cpc	r15, r1
    2bf8:	60 f0       	brcs	.+24     	; 0x2c12 <ReadCapacity+0x1d0>
 #if DebugOut == 10
     lcd_data('L');
     lcd_space();
     wait_about1s();
 #endif
     if (ovcnt16 == 0 )  {
    2bfa:	80 91 4d 01 	lds	r24, 0x014D
    2bfe:	90 91 4e 01 	lds	r25, 0x014E
    2c02:	00 97       	sbiw	r24, 0x00	; 0
    2c04:	09 f4       	brne	.+2      	; 0x2c08 <ReadCapacity+0x1c6>
    2c06:	56 c0       	rjmp	.+172    	; 0x2cb4 <ReadCapacity+0x272>
    2c08:	df c1       	rjmp	.+958    	; 0x2fc8 <ReadCapacity+0x586>
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    2c0a:	ee 24       	eor	r14, r14
    2c0c:	ff 24       	eor	r15, r15
  } else {
     adcv[3] = 0;			// no lost voltage
  }
#if FLASHEND > 0x1fff
  // compute equivalent parallel resistance from voltage drop
  if (adcv[3] > 0) {
    2c0e:	88 24       	eor	r8, r8
    2c10:	99 24       	eor	r9, r9
     if (ovcnt16 == 0 )  {
        goto messe_mit_rh;		// Voltage of more than 1300mV is reached in one pulse, but not hold
     }
     goto keinC;			// capacitor does not keep the voltage about 5ms
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
    2c12:	a0 90 4d 01 	lds	r10, 0x014D
    2c16:	b0 90 4e 01 	lds	r11, 0x014E
    2c1a:	08 94       	sec
    2c1c:	a1 1c       	adc	r10, r1
    2c1e:	b1 1c       	adc	r11, r1
    2c20:	cc 24       	eor	r12, r12
    2c22:	dd 24       	eor	r13, r13
    2c24:	a0 92 6a 01 	sts	0x016A, r10
    2c28:	b0 92 6b 01 	sts	0x016B, r11
    2c2c:	c0 92 6c 01 	sts	0x016C, r12
    2c30:	d0 92 6d 01 	sts	0x016D, r13
  // compute factor with load voltage + lost voltage during the voltage load time
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]+adcv[3]);	// get factor to convert time to capacity from table
    2c34:	c7 01       	movw	r24, r14
    2c36:	8c 0f       	add	r24, r28
    2c38:	9d 1f       	adc	r25, r29
    2c3a:	0e 94 8f 14 	call	0x291e	; 0x291e <getRLmultip>
    2c3e:	bc 01       	movw	r22, r24
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	a6 01       	movw	r20, r12
    2c46:	95 01       	movw	r18, r10
    2c48:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
    2c4c:	60 93 6a 01 	sts	0x016A, r22
    2c50:	70 93 6b 01 	sts	0x016B, r23
    2c54:	80 93 6c 01 	sts	0x016C, r24
    2c58:	90 93 6d 01 	sts	0x016D, r25
#endif
   cap.cval = cap.cval_uncorrected.dw;	// set result to uncorrected
    2c5c:	60 93 62 01 	sts	0x0162, r22
    2c60:	70 93 63 01 	sts	0x0163, r23
    2c64:	80 93 64 01 	sts	0x0164, r24
    2c68:	90 93 65 01 	sts	0x0165, r25
   cap.cpre = -9;		// switch units to nF 
    2c6c:	87 ef       	ldi	r24, 0xF7	; 247
    2c6e:	80 93 74 01 	sts	0x0174, r24
   Scale_C_with_vcc();
    2c72:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <Scale_C_with_vcc>
   // cap.cval for this type is at least 40000nF, so the last digit will be never shown
   cap.cval *= (1000 - C_H_KORR);	// correct with C_H_KORR with 0.1% resolution, but prevent overflow
    2c76:	60 91 62 01 	lds	r22, 0x0162
    2c7a:	70 91 63 01 	lds	r23, 0x0163
    2c7e:	80 91 64 01 	lds	r24, 0x0164
    2c82:	90 91 65 01 	lds	r25, 0x0165
    2c86:	28 ee       	ldi	r18, 0xE8	; 232
    2c88:	33 e0       	ldi	r19, 0x03	; 3
    2c8a:	40 e0       	ldi	r20, 0x00	; 0
    2c8c:	50 e0       	ldi	r21, 0x00	; 0
    2c8e:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
   cap.cval /= 100;
    2c92:	24 e6       	ldi	r18, 0x64	; 100
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	40 e0       	ldi	r20, 0x00	; 0
    2c98:	50 e0       	ldi	r21, 0x00	; 0
    2c9a:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
    2c9e:	20 93 62 01 	sts	0x0162, r18
    2ca2:	30 93 63 01 	sts	0x0163, r19
    2ca6:	40 93 64 01 	sts	0x0164, r20
    2caa:	50 93 65 01 	sts	0x0165, r21
   DisplayValue(cap.cval,cap.cpre,'F',4);
   lcd_space();
   lcd_string(utoa(ovcnt16,outval,10));
   wait_about3s();
#endif
   goto checkDiodes;
    2cae:	4d c1       	rjmp	.+666    	; 0x2f4a <ReadCapacity+0x508>
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
  vloss = 0;				// set lost voltage to zero
    2cb0:	88 24       	eor	r8, r8
    2cb2:	99 24       	eor	r9, r9
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
  HiPinR_L = pgm_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load
    2cb4:	ea 2c       	mov	r14, r10
    2cb6:	ee 0c       	add	r14, r14

//==================================================================================
// Measurement of little capacity values
messe_mit_rh:
  //little capacity value, about  < 50 µF
  EntladePins();			// discharge capacitor
    2cb8:	0e 94 b2 01 	call	0x364	; 0x364 <EntladePins>
  //measure with the R_H (470kOhm) resistor 
  R_PORT = 0;		// R_DDR ist HiPinR_L
    2cbc:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = (1<<TP1) | (1<<TP2) | (1<<TP3) | (1<<TxD);	//switch all Pins to output
    2cbe:	8f e0       	ldi	r24, 0x0F	; 15
    2cc0:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		//switch all ADC Pins to GND
    2cc2:	88 e0       	ldi	r24, 0x08	; 8
    2cc4:	88 b9       	out	0x08, r24	; 8
  R_DDR = HiPinR_H;   		// switch R_H resistor port for HighPin to output (GND)
    2cc6:	e4 b8       	out	0x04, r14	; 4
// setup Analog Comparator
  ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    2cc8:	80 e4       	ldi	r24, 0x40	; 64
    2cca:	80 93 7b 00 	sts	0x007B, r24
  ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    2cce:	84 e5       	ldi	r24, 0x54	; 84
    2cd0:	80 bf       	out	0x30, r24	; 48
  ADMUX = (1<<REFS0) | HighPin;			// switch Mux to High-Pin
    2cd2:	81 2f       	mov	r24, r17
    2cd4:	80 64       	ori	r24, 0x40	; 64
    2cd6:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    2cda:	86 e1       	ldi	r24, 0x16	; 22
    2cdc:	80 93 7a 00 	sts	0x007A, r24
  wait200us();			//wait for bandgap to start up
    2ce0:	0e 94 82 14 	call	0x2904	; 0x2904 <wait200us>

// setup Counter1
  ovcnt16 = 0;
    2ce4:	10 92 4e 01 	sts	0x014E, r1
    2ce8:	10 92 4d 01 	sts	0x014D, r1
  TCCR1A = 0;			// set Counter1 to normal Mode
    2cec:	10 92 80 00 	sts	0x0080, r1
  TCNT1 = 0;			//set Counter to 0
    2cf0:	10 92 85 00 	sts	0x0085, r1
    2cf4:	10 92 84 00 	sts	0x0084, r1
  TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// clear interrupt flags
    2cf8:	87 e2       	ldi	r24, 0x27	; 39
    2cfa:	86 bb       	out	0x16, r24	; 22
#ifndef INHIBIT_SLEEP_MODE
  TIMSK1 = (1<<TOIE1) | (1<<ICIE1);	// enable Timer overflow interrupt and input capture interrupt
    2cfc:	81 e2       	ldi	r24, 0x21	; 33
    2cfe:	80 93 6f 00 	sts	0x006F, r24
  unfinished = 1;
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	80 93 61 01 	sts	0x0161, r24
#endif
  R_PORT = HiPinR_H;           	// switch R_H resistor port for HighPin to VCC
    2d08:	e5 b8       	out	0x05, r14	; 5
  if(PartFound == PART_FET) {
    2d0a:	90 91 07 01 	lds	r25, 0x0107
    2d0e:	93 30       	cpi	r25, 0x03	; 3
    2d10:	71 f4       	brne	.+28     	; 0x2d2e <ReadCapacity+0x2ec>
     // charge capacitor with R_H resistor
     TCCR1B = (1<<CS10);	//Start counter 1MHz or 8MHz
    2d12:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = (((1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK) & ~(1<<HighPin));	// release only HighPin ADC port
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	01 2e       	mov	r0, r17
    2d1c:	02 c0       	rjmp	.+4      	; 0x2d22 <ReadCapacity+0x2e0>
    2d1e:	88 0f       	add	r24, r24
    2d20:	99 1f       	adc	r25, r25
    2d22:	0a 94       	dec	r0
    2d24:	e2 f7       	brpl	.-8      	; 0x2d1e <ReadCapacity+0x2dc>
    2d26:	80 95       	com	r24
    2d28:	8f 70       	andi	r24, 0x0F	; 15
    2d2a:	87 b9       	out	0x07, r24	; 7
    2d2c:	17 c0       	rjmp	.+46     	; 0x2d5c <ReadCapacity+0x31a>
  } else {
     TCCR1B =  (1<<CS10);	//start counter 1MHz or 8MHz
    2d2e:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
    2d32:	07 b9       	out	0x07, r16	; 7
    2d34:	13 c0       	rjmp	.+38     	; 0x2d5c <ReadCapacity+0x31a>
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
     ovcnt16++;
  }
#else
  while(unfinished) {
    set_sleep_mode(SLEEP_MODE_IDLE);
    2d36:	83 b7       	in	r24, 0x33	; 51
    2d38:	81 7f       	andi	r24, 0xF1	; 241
    2d3a:	83 bf       	out	0x33, r24	; 51
    sleep_mode();       /* wait for interrupt */
    2d3c:	83 b7       	in	r24, 0x33	; 51
    2d3e:	81 60       	ori	r24, 0x01	; 1
    2d40:	83 bf       	out	0x33, r24	; 51
    2d42:	88 95       	sleep
    2d44:	83 b7       	in	r24, 0x33	; 51
    2d46:	8e 7f       	andi	r24, 0xFE	; 254
    2d48:	83 bf       	out	0x33, r24	; 51
    wdt_reset();
    2d4a:	a8 95       	wdr
    if(ovcnt16 == (F_CPU/5000)) {
    2d4c:	80 91 4d 01 	lds	r24, 0x014D
    2d50:	90 91 4e 01 	lds	r25, 0x014E
    2d54:	46 e0       	ldi	r20, 0x06	; 6
    2d56:	80 34       	cpi	r24, 0x40	; 64
    2d58:	94 07       	cpc	r25, r20
    2d5a:	21 f0       	breq	.+8      	; 0x2d64 <ReadCapacity+0x322>
     // this OV was not counted, but was before the Input Capture
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
     ovcnt16++;
  }
#else
  while(unfinished) {
    2d5c:	80 91 61 01 	lds	r24, 0x0161
    2d60:	88 23       	and	r24, r24
    2d62:	49 f7       	brne	.-46     	; 0x2d36 <ReadCapacity+0x2f4>
    wdt_reset();
    if(ovcnt16 == (F_CPU/5000)) {
       break; 		//Timeout for Charging, above 12 s
    }
  }
  TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    2d64:	10 92 81 00 	sts	0x0081, r1
  tmpint = ICR1;		// get previous Input Capture Counter flag
    2d68:	c0 91 86 00 	lds	r28, 0x0086
    2d6c:	d0 91 87 00 	lds	r29, 0x0087
  TIMSK1 = (0<<TOIE1) | (0<<ICIE1);	// disable Timer overflow interrupt and input capture interrupt
    2d70:	10 92 6f 00 	sts	0x006F, r1
  if (TCNT1 < tmpint) {
    2d74:	80 91 84 00 	lds	r24, 0x0084
    2d78:	90 91 85 00 	lds	r25, 0x0085
    2d7c:	8c 17       	cp	r24, r28
    2d7e:	9d 07       	cpc	r25, r29
    2d80:	48 f4       	brcc	.+18     	; 0x2d94 <ReadCapacity+0x352>
     ovcnt16--;			// one ov to much
    2d82:	80 91 4d 01 	lds	r24, 0x014D
    2d86:	90 91 4e 01 	lds	r25, 0x014E
    2d8a:	01 97       	sbiw	r24, 0x01	; 1
    2d8c:	90 93 4e 01 	sts	0x014E, r25
    2d90:	80 93 4d 01 	sts	0x014D, r24
  }

#endif
//############################################################
  ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    2d94:	86 e9       	ldi	r24, 0x96	; 150
    2d96:	80 93 7a 00 	sts	0x007A, r24
  R_DDR = 0;			// switch R_H resistor port for input
    2d9a:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// switch R_H resistor port pull up for HighPin off
    2d9c:	15 b8       	out	0x05, r1	; 5
  adcv[2] = ReadADC(HighPin);   // get loaded voltage
    2d9e:	81 2f       	mov	r24, r17
    2da0:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
  load_diff = adcv[2] + REF_C_KORR - ref_mv;	// build difference of capacitor voltage to Reference Voltage
    2da4:	20 91 44 01 	lds	r18, 0x0144
    2da8:	30 91 45 01 	lds	r19, 0x0145
    2dac:	82 1b       	sub	r24, r18
    2dae:	93 0b       	sbc	r25, r19
    2db0:	0c 96       	adiw	r24, 0x0c	; 12
    2db2:	90 93 77 01 	sts	0x0177, r25
    2db6:	80 93 76 01 	sts	0x0176, r24
//############################################################
  if (ovcnt16 >= (F_CPU/10000)) {
    2dba:	80 91 4d 01 	lds	r24, 0x014D
    2dbe:	90 91 4e 01 	lds	r25, 0x014E
    2dc2:	23 e0       	ldi	r18, 0x03	; 3
    2dc4:	80 32       	cpi	r24, 0x20	; 32
    2dc6:	92 07       	cpc	r25, r18
    2dc8:	08 f0       	brcs	.+2      	; 0x2dcc <ReadCapacity+0x38a>
    2dca:	fe c0       	rjmp	.+508    	; 0x2fc8 <ReadCapacity+0x586>
     wait_about1s();
#endif
     goto keinC;	// no normal end
  }
//  cap.cval_uncorrected = CombineII2Long(ovcnt16, tmpint);
  cap.cval_uncorrected.w[1] = ovcnt16;
    2dcc:	80 91 4d 01 	lds	r24, 0x014D
    2dd0:	90 91 4e 01 	lds	r25, 0x014E
    2dd4:	90 93 6d 01 	sts	0x016D, r25
    2dd8:	80 93 6c 01 	sts	0x016C, r24
  cap.cval_uncorrected.w[0] = tmpint;
    2ddc:	d0 93 6b 01 	sts	0x016B, r29
    2de0:	c0 93 6a 01 	sts	0x016A, r28

  cap.cpre = -12;			// cap.cval unit is pF 
    2de4:	84 ef       	ldi	r24, 0xF4	; 244
    2de6:	80 93 74 01 	sts	0x0174, r24
  if (ovcnt16 > 65) {
    2dea:	80 91 4d 01 	lds	r24, 0x014D
    2dee:	90 91 4e 01 	lds	r25, 0x014E
    2df2:	82 34       	cpi	r24, 0x42	; 66
    2df4:	91 05       	cpc	r25, r1
    2df6:	c8 f0       	brcs	.+50     	; 0x2e2a <ReadCapacity+0x3e8>
     cap.cval_uncorrected.dw /= 100;	// switch to next unit
    2df8:	60 91 6a 01 	lds	r22, 0x016A
    2dfc:	70 91 6b 01 	lds	r23, 0x016B
    2e00:	80 91 6c 01 	lds	r24, 0x016C
    2e04:	90 91 6d 01 	lds	r25, 0x016D
    2e08:	24 e6       	ldi	r18, 0x64	; 100
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	40 e0       	ldi	r20, 0x00	; 0
    2e0e:	50 e0       	ldi	r21, 0x00	; 0
    2e10:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
    2e14:	20 93 6a 01 	sts	0x016A, r18
    2e18:	30 93 6b 01 	sts	0x016B, r19
    2e1c:	40 93 6c 01 	sts	0x016C, r20
    2e20:	50 93 6d 01 	sts	0x016D, r21
     cap.cpre += 2;			// set unit, prevent overflow
    2e24:	86 ef       	ldi	r24, 0xF6	; 246
    2e26:	80 93 74 01 	sts	0x0174, r24
  }
  cap.cval_uncorrected.dw *= RHmultip;		// 708
    2e2a:	60 91 00 01 	lds	r22, 0x0100
    2e2e:	70 91 01 01 	lds	r23, 0x0101
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	20 91 6a 01 	lds	r18, 0x016A
    2e3a:	30 91 6b 01 	lds	r19, 0x016B
    2e3e:	40 91 6c 01 	lds	r20, 0x016C
    2e42:	50 91 6d 01 	lds	r21, 0x016D
    2e46:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
  cap.cval_uncorrected.dw /= (F_CPU / 10000);	// divide by 100 (@ 1MHz clock), 800 (@ 8MHz clock)
    2e4a:	20 e2       	ldi	r18, 0x20	; 32
    2e4c:	33 e0       	ldi	r19, 0x03	; 3
    2e4e:	40 e0       	ldi	r20, 0x00	; 0
    2e50:	50 e0       	ldi	r21, 0x00	; 0
    2e52:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
    2e56:	20 93 6a 01 	sts	0x016A, r18
    2e5a:	30 93 6b 01 	sts	0x016B, r19
    2e5e:	40 93 6c 01 	sts	0x016C, r20
    2e62:	50 93 6d 01 	sts	0x016D, r21
  cap.cval = cap.cval_uncorrected.dw;		// set the corrected cap.cval
    2e66:	e2 e6       	ldi	r30, 0x62	; 98
    2e68:	f1 e0       	ldi	r31, 0x01	; 1
    2e6a:	20 93 62 01 	sts	0x0162, r18
    2e6e:	31 83       	std	Z+1, r19	; 0x01
    2e70:	42 83       	std	Z+2, r20	; 0x02
    2e72:	53 83       	std	Z+3, r21	; 0x03
  Scale_C_with_vcc();
    2e74:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <Scale_C_with_vcc>
  if (cap.cpre == -12) {
    2e78:	80 91 74 01 	lds	r24, 0x0174
    2e7c:	84 3f       	cpi	r24, 0xF4	; 244
    2e7e:	09 f0       	breq	.+2      	; 0x2e82 <ReadCapacity+0x440>
    2e80:	55 c0       	rjmp	.+170    	; 0x2f2c <ReadCapacity+0x4ea>
#if COMP_SLEW1 > COMP_SLEW2
     if (cap.cval < COMP_SLEW1) {
    2e82:	c0 90 62 01 	lds	r12, 0x0162
    2e86:	d0 90 63 01 	lds	r13, 0x0163
    2e8a:	e0 90 64 01 	lds	r14, 0x0164
    2e8e:	f0 90 65 01 	lds	r15, 0x0165
    2e92:	40 ea       	ldi	r20, 0xA0	; 160
    2e94:	c4 16       	cp	r12, r20
    2e96:	4f e0       	ldi	r20, 0x0F	; 15
    2e98:	d4 06       	cpc	r13, r20
    2e9a:	40 e0       	ldi	r20, 0x00	; 0
    2e9c:	e4 06       	cpc	r14, r20
    2e9e:	40 e0       	ldi	r20, 0x00	; 0
    2ea0:	f4 06       	cpc	r15, r20
    2ea2:	c0 f4       	brcc	.+48     	; 0x2ed4 <ReadCapacity+0x492>
        // add slew rate dependent offset
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
    2ea4:	a7 01       	movw	r20, r14
    2ea6:	96 01       	movw	r18, r12
    2ea8:	24 52       	subi	r18, 0x24	; 36
    2eaa:	3f 4f       	sbci	r19, 0xFF	; 255
    2eac:	4f 4f       	sbci	r20, 0xFF	; 255
    2eae:	5f 4f       	sbci	r21, 0xFF	; 255
    2eb0:	60 ea       	ldi	r22, 0xA0	; 160
    2eb2:	7f e0       	ldi	r23, 0x0F	; 15
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
    2ebc:	2c 0d       	add	r18, r12
    2ebe:	3d 1d       	adc	r19, r13
    2ec0:	4e 1d       	adc	r20, r14
    2ec2:	5f 1d       	adc	r21, r15
    2ec4:	20 93 62 01 	sts	0x0162, r18
    2ec8:	30 93 63 01 	sts	0x0163, r19
    2ecc:	40 93 64 01 	sts	0x0164, r20
    2ed0:	50 93 65 01 	sts	0x0165, r21
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2ed4:	80 91 4c 01 	lds	r24, 0x014C
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	87 53       	subi	r24, 0x37	; 55
    2edc:	9e 4f       	sbci	r25, 0xFE	; 254
    2ede:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__eerd_byte_m168>
     if (cap.cval > tmpint) {
    2ee2:	20 91 62 01 	lds	r18, 0x0162
    2ee6:	30 91 63 01 	lds	r19, 0x0163
    2eea:	40 91 64 01 	lds	r20, 0x0164
    2eee:	50 91 65 01 	lds	r21, 0x0165
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
     if (cap.cval > tmpint) {
    2ef4:	a0 e0       	ldi	r26, 0x00	; 0
    2ef6:	b0 e0       	ldi	r27, 0x00	; 0
    2ef8:	82 17       	cp	r24, r18
    2efa:	93 07       	cpc	r25, r19
    2efc:	a4 07       	cpc	r26, r20
    2efe:	b5 07       	cpc	r27, r21
    2f00:	68 f4       	brcc	.+26     	; 0x2f1c <ReadCapacity+0x4da>
         cap.cval -= tmpint;		//subtract zero offset (pF)
    2f02:	28 1b       	sub	r18, r24
    2f04:	39 0b       	sbc	r19, r25
    2f06:	4a 0b       	sbc	r20, r26
    2f08:	5b 0b       	sbc	r21, r27
    2f0a:	20 93 62 01 	sts	0x0162, r18
    2f0e:	30 93 63 01 	sts	0x0163, r19
    2f12:	40 93 64 01 	sts	0x0164, r20
    2f16:	50 93 65 01 	sts	0x0165, r21
    2f1a:	08 c0       	rjmp	.+16     	; 0x2f2c <ReadCapacity+0x4ea>
     } else {
         cap.cval = 0;			//unsigned long may not reach negativ value
    2f1c:	10 92 62 01 	sts	0x0162, r1
    2f20:	10 92 63 01 	sts	0x0163, r1
    2f24:	10 92 64 01 	sts	0x0164, r1
    2f28:	10 92 65 01 	sts	0x0165, r1
  lcd_testpin(HighPin);
  lcd_space();
  DisplayValue(cap.cval,cap.cpre,'F',4);
  wait_about3s();
#endif
  R_DDR = HiPinR_L; 		//switch R_L for High-Pin to GND
    2f2c:	a4 b8       	out	0x04, r10	; 4
#if F_CPU < 2000001
   if(cap.cval < 50)
#else 
   if(cap.cval < 25)
    2f2e:	80 91 62 01 	lds	r24, 0x0162
    2f32:	90 91 63 01 	lds	r25, 0x0163
    2f36:	a0 91 64 01 	lds	r26, 0x0164
    2f3a:	b0 91 65 01 	lds	r27, 0x0165
    2f3e:	89 31       	cpi	r24, 0x19	; 25
    2f40:	91 05       	cpc	r25, r1
    2f42:	a1 05       	cpc	r26, r1
    2f44:	b1 05       	cpc	r27, r1
    2f46:	08 f4       	brcc	.+2      	; 0x2f4a <ReadCapacity+0x508>
    2f48:	3f c0       	rjmp	.+126    	; 0x2fc8 <ReadCapacity+0x586>
#endif
      goto keinC;	//capacity to low, < 50pF @1MHz (25pF @8MHz)
   }
   // end low capacity 
checkDiodes:
   if((NumOfDiodes > 0)  && (PartFound != PART_FET)) {
    2f4a:	80 91 05 01 	lds	r24, 0x0105
    2f4e:	88 23       	and	r24, r24
    2f50:	21 f0       	breq	.+8      	; 0x2f5a <ReadCapacity+0x518>
    2f52:	80 91 07 01 	lds	r24, 0x0107
    2f56:	83 30       	cpi	r24, 0x03	; 3
    2f58:	b9 f5       	brne	.+110    	; 0x2fc8 <ReadCapacity+0x586>
      wait_about1s();
#endif
      // nearly shure, that there is one or more diodes in reverse direction,
      // which would be wrongly detected as capacitor 
   } else {
      PartFound = PART_CAPACITOR;	//capacitor is found
    2f5a:	87 e0       	ldi	r24, 0x07	; 7
    2f5c:	80 93 07 01 	sts	0x0107, r24
      if ((cap.cpre > cap.cpre_max) || ((cap.cpre == cap.cpre_max) && (cap.cval > cap.cval_max))) {
    2f60:	60 91 74 01 	lds	r22, 0x0174
    2f64:	80 91 75 01 	lds	r24, 0x0175
    2f68:	86 17       	cp	r24, r22
    2f6a:	bc f0       	brlt	.+46     	; 0x2f9a <ReadCapacity+0x558>
    2f6c:	68 17       	cp	r22, r24
    2f6e:	61 f5       	brne	.+88     	; 0x2fc8 <ReadCapacity+0x586>
    2f70:	20 91 62 01 	lds	r18, 0x0162
    2f74:	30 91 63 01 	lds	r19, 0x0163
    2f78:	40 91 64 01 	lds	r20, 0x0164
    2f7c:	50 91 65 01 	lds	r21, 0x0165
    2f80:	80 91 66 01 	lds	r24, 0x0166
    2f84:	90 91 67 01 	lds	r25, 0x0167
    2f88:	a0 91 68 01 	lds	r26, 0x0168
    2f8c:	b0 91 69 01 	lds	r27, 0x0169
    2f90:	82 17       	cp	r24, r18
    2f92:	93 07       	cpc	r25, r19
    2f94:	a4 07       	cpc	r26, r20
    2f96:	b5 07       	cpc	r27, r21
    2f98:	b8 f4       	brcc	.+46     	; 0x2fc8 <ReadCapacity+0x586>
         // we have found a greater one
         cap.cval_max = cap.cval;
    2f9a:	e2 e6       	ldi	r30, 0x62	; 98
    2f9c:	f1 e0       	ldi	r31, 0x01	; 1
    2f9e:	80 91 62 01 	lds	r24, 0x0162
    2fa2:	90 91 63 01 	lds	r25, 0x0163
    2fa6:	a0 91 64 01 	lds	r26, 0x0164
    2faa:	b0 91 65 01 	lds	r27, 0x0165
    2fae:	80 93 66 01 	sts	0x0166, r24
    2fb2:	90 93 67 01 	sts	0x0167, r25
    2fb6:	a0 93 68 01 	sts	0x0168, r26
    2fba:	b0 93 69 01 	sts	0x0169, r27
         cap.cpre_max = cap.cpre;
    2fbe:	63 8b       	std	Z+19, r22	; 0x13
#if FLASHEND > 0x1fff
         cap.v_loss = vloss;		// lost voltage in 0.01%
    2fc0:	97 86       	std	Z+15, r9	; 0x0f
    2fc2:	86 86       	std	Z+14, r8	; 0x0e
#endif
         cap.ca = LowPin;		// save LowPin
    2fc4:	70 8a       	std	Z+16, r7	; 0x10
         cap.cb = HighPin;		// save HighPin
    2fc6:	11 8b       	std	Z+17, r17	; 0x11
keinC:
  // discharge capacitor again
//  EntladePins();		// discharge capacitors
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    2fc8:	88 e0       	ldi	r24, 0x08	; 8
    2fca:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    2fcc:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    2fce:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    2fd0:	15 b8       	out	0x05, r1	; 5
  return;
 } // end ReadCapacity()
    2fd2:	df 91       	pop	r29
    2fd4:	cf 91       	pop	r28
    2fd6:	1f 91       	pop	r17
    2fd8:	0f 91       	pop	r16
    2fda:	ff 90       	pop	r15
    2fdc:	ef 90       	pop	r14
    2fde:	df 90       	pop	r13
    2fe0:	cf 90       	pop	r12
    2fe2:	bf 90       	pop	r11
    2fe4:	af 90       	pop	r10
    2fe6:	9f 90       	pop	r9
    2fe8:	8f 90       	pop	r8
    2fea:	7f 90       	pop	r7
    2fec:	08 95       	ret

00002fee <__vector_13>:
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
}
#ifndef INHIBIT_SLEEP_MODE
/* Interrupt Service Routine for timer1 Overflow */
 ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    2fee:	1f 92       	push	r1
    2ff0:	0f 92       	push	r0
    2ff2:	0f b6       	in	r0, 0x3f	; 63
    2ff4:	0f 92       	push	r0
    2ff6:	11 24       	eor	r1, r1
    2ff8:	8f 93       	push	r24
    2ffa:	9f 93       	push	r25
 ovcnt16++;				// count overflow
    2ffc:	80 91 4d 01 	lds	r24, 0x014D
    3000:	90 91 4e 01 	lds	r25, 0x014E
    3004:	01 96       	adiw	r24, 0x01	; 1
    3006:	90 93 4e 01 	sts	0x014E, r25
    300a:	80 93 4d 01 	sts	0x014D, r24
}
    300e:	9f 91       	pop	r25
    3010:	8f 91       	pop	r24
    3012:	0f 90       	pop	r0
    3014:	0f be       	out	0x3f, r0	; 63
    3016:	0f 90       	pop	r0
    3018:	1f 90       	pop	r1
    301a:	18 95       	reti

0000301c <__vector_10>:
/* Interrupt Service Routine for timer1 capture event (Comparator) */
 ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    301c:	1f 92       	push	r1
    301e:	0f 92       	push	r0
    3020:	0f b6       	in	r0, 0x3f	; 63
    3022:	0f 92       	push	r0
    3024:	11 24       	eor	r1, r1
 unfinished = 0;			// clear unfinished flag
    3026:	10 92 61 01 	sts	0x0161, r1
}
    302a:	0f 90       	pop	r0
    302c:	0f be       	out	0x3f, r0	; 63
    302e:	0f 90       	pop	r0
    3030:	1f 90       	pop	r1
    3032:	18 95       	reti

00003034 <get_log>:
 } // end ReadInductance()


#if FLASHEND > 0x1fff
// get_log interpolate a table with the function -log(1 - (permil/1000))
uint16_t get_log(uint16_t permil) {
    3034:	cf 93       	push	r28
    3036:	df 93       	push	r29
  uint16_t y1, y2;			// table values
  uint16_t result;			// result of interpolation
  uint8_t tabind;			// index to table value
  uint8_t tabres;			// distance to lower table value, fraction of Log_Tab_Distance

  tabind = permil / Log_Tab_Distance;	// index to table
    3038:	24 e1       	ldi	r18, 0x14	; 20
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	b9 01       	movw	r22, r18
    303e:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__udivmodhi4>
    3042:	dc 01       	movw	r26, r24
  tabres = permil % Log_Tab_Distance;	// fraction of table distance
  // interpolate the table of factors
  y1 = pgm_read_word(&LogTab[tabind]);	// get the lower table value
    3044:	70 e0       	ldi	r23, 0x00	; 0
    3046:	fb 01       	movw	r30, r22
    3048:	ee 0f       	add	r30, r30
    304a:	ff 1f       	adc	r31, r31
    304c:	e8 59       	subi	r30, 0x98	; 152
    304e:	ff 4f       	sbci	r31, 0xFF	; 255
    3050:	c5 91       	lpm	r28, Z+
    3052:	d4 91       	lpm	r29, Z+
  y2 = pgm_read_word(&LogTab[tabind+1]); // get the higher table value
    3054:	fb 01       	movw	r30, r22
    3056:	ee 0f       	add	r30, r30
    3058:	ff 1f       	adc	r31, r31
    305a:	e6 59       	subi	r30, 0x96	; 150
    305c:	ff 4f       	sbci	r31, 0xFF	; 255
    305e:	45 91       	lpm	r20, Z+
    3060:	54 91       	lpm	r21, Z+
  result = ((y2 - y1) * tabres ) / Log_Tab_Distance + y1; // interpolate
    3062:	4c 1b       	sub	r20, r28
    3064:	5d 0b       	sbc	r21, r29
    3066:	4a 9f       	mul	r20, r26
    3068:	c0 01       	movw	r24, r0
    306a:	4b 9f       	mul	r20, r27
    306c:	90 0d       	add	r25, r0
    306e:	5a 9f       	mul	r21, r26
    3070:	90 0d       	add	r25, r0
    3072:	11 24       	eor	r1, r1
    3074:	b9 01       	movw	r22, r18
    3076:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__udivmodhi4>
    307a:	6c 0f       	add	r22, r28
    307c:	7d 1f       	adc	r23, r29
  return(result);
 }
    307e:	cb 01       	movw	r24, r22
    3080:	df 91       	pop	r29
    3082:	cf 91       	pop	r28
    3084:	08 95       	ret

00003086 <ReadInductance>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadInductance(void) {
    3086:	2f 92       	push	r2
    3088:	3f 92       	push	r3
    308a:	4f 92       	push	r4
    308c:	5f 92       	push	r5
    308e:	6f 92       	push	r6
    3090:	7f 92       	push	r7
    3092:	8f 92       	push	r8
    3094:	9f 92       	push	r9
    3096:	af 92       	push	r10
    3098:	bf 92       	push	r11
    309a:	cf 92       	push	r12
    309c:	df 92       	push	r13
    309e:	ef 92       	push	r14
    30a0:	ff 92       	push	r15
    30a2:	0f 93       	push	r16
    30a4:	1f 93       	push	r17
    30a6:	df 93       	push	r29
    30a8:	cf 93       	push	r28
    30aa:	cd b7       	in	r28, 0x3d	; 61
    30ac:	de b7       	in	r29, 0x3e	; 62
    30ae:	68 97       	sbiw	r28, 0x18	; 24
    30b0:	0f b6       	in	r0, 0x3f	; 63
    30b2:	f8 94       	cli
    30b4:	de bf       	out	0x3e, r29	; 62
    30b6:	0f be       	out	0x3f, r0	; 63
    30b8:	cd bf       	out	0x3d, r28	; 61
  int8_t ukorr;		// correction of comparator voltage
  uint8_t nr_pol1;	// number of successfull inductance measurement with polarity 1
  uint8_t nr_pol2;	// number of successfull inductance measurement with polarity 2


  if(PartFound != PART_RESISTOR) {
    30ba:	80 91 07 01 	lds	r24, 0x0107
    30be:	86 30       	cpi	r24, 0x06	; 6
    30c0:	09 f0       	breq	.+2      	; 0x30c4 <ReadInductance+0x3e>
    30c2:	4b c2       	rjmp	.+1174   	; 0x355a <ReadInductance+0x4d4>
     return;	//We have found no resistor  
  }
  if (ResistorsFound != 1) {
    30c4:	80 91 5e 01 	lds	r24, 0x015E
    30c8:	81 30       	cpi	r24, 0x01	; 1
    30ca:	09 f0       	breq	.+2      	; 0x30ce <ReadInductance+0x48>
    30cc:	46 c2       	rjmp	.+1164   	; 0x355a <ReadInductance+0x4d4>
     return;	// do not search for inductance, more than 1 resistor
  }
//  for (found=0;found<ResistorsFound;found++) {
//     if (resis[found].rx > 21000) continue;
     if (resis[found].rx > 21000) return;
    30ce:	80 91 18 01 	lds	r24, 0x0118
    30d2:	90 91 19 01 	lds	r25, 0x0119
    30d6:	a0 91 1a 01 	lds	r26, 0x011A
    30da:	b0 91 1b 01 	lds	r27, 0x011B
    30de:	89 30       	cpi	r24, 0x09	; 9
    30e0:	22 e5       	ldi	r18, 0x52	; 82
    30e2:	92 07       	cpc	r25, r18
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	a2 07       	cpc	r26, r18
    30e8:	20 e0       	ldi	r18, 0x00	; 0
    30ea:	b2 07       	cpc	r27, r18
    30ec:	08 f0       	brcs	.+2      	; 0x30f0 <ReadInductance+0x6a>
    30ee:	35 c2       	rjmp	.+1130   	; 0x355a <ReadInductance+0x4d4>
    30f0:	99 24       	eor	r9, r9
    30f2:	80 91 21 01 	lds	r24, 0x0121
    30f6:	40 90 22 01 	lds	r4, 0x0122

     // we can check for Inductance, if resistance is below 2100 Ohm
     for (count=0;count<4;count++) {
        // Try four times (different direction and with delayed counter start)
        if (count < 2) {
    30fa:	99 2d       	mov	r25, r9
    30fc:	92 30       	cpi	r25, 0x02	; 2
    30fe:	10 f4       	brcc	.+4      	; 0x3104 <ReadInductance+0x7e>
           // first and second pass, direction 1
           LowPin = resis[found].ra;
    3100:	88 2e       	mov	r8, r24
    3102:	02 c0       	rjmp	.+4      	; 0x3108 <ReadInductance+0x82>
           HighPin = resis[found].rb;
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    3104:	84 2c       	mov	r8, r4
           HighPin = resis[found].ra;
    3106:	48 2e       	mov	r4, r24
        }
        HiADC = pgm_read_byte(&PinADCtab[HighPin]);
    3108:	e4 2d       	mov	r30, r4
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	e3 5f       	subi	r30, 0xF3	; 243
    310e:	fe 4f       	sbci	r31, 0xFE	; 254
    3110:	24 91       	lpm	r18, Z+
        LoPinR_L = pgm_read_byte(&PinRLtab[LowPin]);	//R_L mask for HighPin R_L load
    3112:	e8 2d       	mov	r30, r8
    3114:	f0 e0       	ldi	r31, 0x00	; 0
    3116:	e6 5f       	subi	r30, 0xF6	; 246
    3118:	fe 4f       	sbci	r31, 0xFE	; 254
    311a:	e4 91       	lpm	r30, Z+
        //==================================================================================
        // Measurement of Inductance values
        R_PORT = 0;		// switch R port to GND
    311c:	15 b8       	out	0x05, r1	; 5
        ADC_PORT =   TXD_VAL;		// switch ADC-Port to GND
    311e:	a8 e0       	ldi	r26, 0x08	; 8
    3120:	a8 b9       	out	0x08, r26	; 8
        if ((resis[found].rx < 240) && ((count & 0x01) == 0)) {
    3122:	80 91 18 01 	lds	r24, 0x0118
    3126:	90 91 19 01 	lds	r25, 0x0119
    312a:	a0 91 1a 01 	lds	r26, 0x011A
    312e:	b0 91 1b 01 	lds	r27, 0x011B
    3132:	80 3f       	cpi	r24, 0xF0	; 240
    3134:	91 05       	cpc	r25, r1
    3136:	a1 05       	cpc	r26, r1
    3138:	b1 05       	cpc	r27, r1
    313a:	b8 f4       	brcc	.+46     	; 0x316a <ReadInductance+0xe4>
    313c:	90 fc       	sbrc	r9, 0
    313e:	15 c0       	rjmp	.+42     	; 0x316a <ReadInductance+0xe4>
           // we can use PinR_L for measurement
           mess_r = RR680MI - R_L_VAL;			// use only pin output resistance
    3140:	a0 90 02 01 	lds	r10, 0x0102
    3144:	b0 90 03 01 	lds	r11, 0x0103
    3148:	80 e7       	ldi	r24, 0x70	; 112
    314a:	95 ee       	ldi	r25, 0xE5	; 229
    314c:	a8 0e       	add	r10, r24
    314e:	b9 1e       	adc	r11, r25
           ADC_DDR = HiADC | (1<<LowPin) | TXD_MSK;	// switch HiADC and Low Pin to GND, 
    3150:	32 2f       	mov	r19, r18
    3152:	38 60       	ori	r19, 0x08	; 8
    3154:	81 e0       	ldi	r24, 0x01	; 1
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	08 2c       	mov	r0, r8
    315a:	02 c0       	rjmp	.+4      	; 0x3160 <ReadInductance+0xda>
    315c:	88 0f       	add	r24, r24
    315e:	99 1f       	adc	r25, r25
    3160:	0a 94       	dec	r0
    3162:	e2 f7       	brpl	.-8      	; 0x315c <ReadInductance+0xd6>
    3164:	38 2b       	or	r19, r24
    3166:	37 b9       	out	0x07, r19	; 7
    3168:	08 c0       	rjmp	.+16     	; 0x317a <ReadInductance+0xf4>
        } else {
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
    316a:	e4 b9       	out	0x04, r30	; 4
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
    316c:	82 2f       	mov	r24, r18
    316e:	88 60       	ori	r24, 0x08	; 8
    3170:	87 b9       	out	0x07, r24	; 7
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
    3172:	a0 90 02 01 	lds	r10, 0x0102
    3176:	b0 90 03 01 	lds	r11, 0x0103
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    317a:	30 e0       	ldi	r19, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    317c:	88 2d       	mov	r24, r8
    317e:	28 8f       	std	Y+24, r18	; 0x18
    3180:	3f 8b       	std	Y+23, r19	; 0x17
    3182:	0e 94 cc 1a 	call	0x3598	; 0x3598 <W10msReadADC>
    3186:	6c 01       	movw	r12, r24
            total_r =  ReadADC(HighPin);
    3188:	84 2d       	mov	r24, r4
    318a:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
    318e:	ac 01       	movw	r20, r24
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    3190:	28 8d       	ldd	r18, Y+24	; 0x18
    3192:	3f 89       	ldd	r19, Y+23	; 0x17
    3194:	92 e0       	ldi	r25, 0x02	; 2
    3196:	c9 16       	cp	r12, r25
    3198:	d1 04       	cpc	r13, r1
    319a:	18 f4       	brcc	.+6      	; 0x31a2 <ReadInductance+0x11c>
    319c:	42 30       	cpi	r20, 0x02	; 2
    319e:	51 05       	cpc	r21, r1
    31a0:	18 f0       	brcs	.+6      	; 0x31a8 <ReadInductance+0x122>
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    31a2:	3f 5f       	subi	r19, 0xFF	; 255
    31a4:	34 31       	cpi	r19, 0x14	; 20
    31a6:	51 f7       	brne	.-44     	; 0x317c <ReadInductance+0xf6>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
        // setup Analog Comparator
        ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    31a8:	a0 e4       	ldi	r26, 0x40	; 64
    31aa:	a0 93 7b 00 	sts	0x007B, r26
        ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    31ae:	b4 e5       	ldi	r27, 0x54	; 84
    31b0:	b0 bf       	out	0x30, r27	; 48
        ADMUX = (1<<REFS0) | LowPin;			// switch Mux to Low-Pin
    31b2:	88 2d       	mov	r24, r8
    31b4:	80 64       	ori	r24, 0x40	; 64
    31b6:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    31ba:	86 e1       	ldi	r24, 0x16	; 22
    31bc:	80 93 7a 00 	sts	0x007A, r24
   
      // setup Counter1
        timeconstant.w[1] = 0;		// set ov counter to 0
    31c0:	00 e0       	ldi	r16, 0x00	; 0
    31c2:	10 e0       	ldi	r17, 0x00	; 0
        TCCR1A = 0;			// set Counter1 to normal Mode
    31c4:	10 92 80 00 	sts	0x0080, r1
        TCNT1 = 0;			//set Counter to 0
    31c8:	10 92 85 00 	sts	0x0085, r1
    31cc:	10 92 84 00 	sts	0x0084, r1
        TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// reset TIFR or TIFR1
    31d0:	97 e2       	ldi	r25, 0x27	; 39
    31d2:	96 bb       	out	0x16, r25	; 22
        HiADC |= TXD_VAL;
    31d4:	28 60       	ori	r18, 0x08	; 8
        wait200us();			// wait for bandgap to start up
    31d6:	28 8f       	std	Y+24, r18	; 0x18
    31d8:	0e 94 82 14 	call	0x2904	; 0x2904 <wait200us>
        if ((count & 0x01) == 0 ) {
    31dc:	29 2c       	mov	r2, r9
    31de:	33 24       	eor	r3, r3
    31e0:	d1 01       	movw	r26, r2
    31e2:	a1 70       	andi	r26, 0x01	; 1
    31e4:	b0 70       	andi	r27, 0x00	; 0
    31e6:	ba 8b       	std	Y+18, r27	; 0x12
    31e8:	a9 8b       	std	Y+17, r26	; 0x11
    31ea:	28 8d       	ldd	r18, Y+24	; 0x18
    31ec:	90 fc       	sbrc	r9, 0
    31ee:	05 c0       	rjmp	.+10     	; 0x31fa <ReadInductance+0x174>
           //first start counter, then start current
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    31f0:	b1 e8       	ldi	r27, 0x81	; 129
    31f2:	b0 93 81 00 	sts	0x0081, r27
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    31f6:	28 b9       	out	0x08, r18	; 8
    31f8:	08 c0       	rjmp	.+16     	; 0x320a <ReadInductance+0x184>
        } else {
           //first start current, then start counter with delay
           //parasitic capacity of coil can cause high current at the beginning
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    31fa:	28 b9       	out	0x08, r18	; 8
      #if F_CPU >= 8000000UL
           wait3us();		// ignore current peak from capacity
    31fc:	0e 94 8b 14 	call	0x2916	; 0x2916 <wait3us>
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
    3200:	20 e2       	ldi	r18, 0x20	; 32
    3202:	26 bb       	out	0x16, r18	; 22
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    3204:	81 e8       	ldi	r24, 0x81	; 129
    3206:	80 93 81 00 	sts	0x0081, r24
    320a:	c8 01       	movw	r24, r16
        }
      
      //******************************
        while(1) {
           // Wait, until  Input Capture is set
           ii = TI1_INT_FLAGS;		//read Timer flags
    320c:	46 b3       	in	r20, 0x16	; 22
           if (ii & (1<<ICF1))  {
    320e:	45 ff       	sbrs	r20, 5
    3210:	02 c0       	rjmp	.+4      	; 0x3216 <ReadInductance+0x190>
    3212:	8c 01       	movw	r16, r24
    3214:	0b c0       	rjmp	.+22     	; 0x322c <ReadInductance+0x1a6>
              break;
           }
           if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    3216:	40 ff       	sbrs	r20, 0
    3218:	f9 cf       	rjmp	.-14     	; 0x320c <ReadInductance+0x186>
              TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    321a:	a1 e0       	ldi	r26, 0x01	; 1
    321c:	a6 bb       	out	0x16, r26	; 22
              wdt_reset();
    321e:	a8 95       	wdr
    3220:	01 96       	adiw	r24, 0x01	; 1
              timeconstant.w[1]++;		// count one OV
              if(timeconstant.w[1] == (F_CPU/100000UL)) {
    3222:	80 35       	cpi	r24, 0x50	; 80
    3224:	91 05       	cpc	r25, r1
    3226:	91 f7       	brne	.-28     	; 0x320c <ReadInductance+0x186>
    3228:	00 e5       	ldi	r16, 0x50	; 80
    322a:	10 e0       	ldi	r17, 0x00	; 0
                 break; 	//Timeout for Charging, above 0.13 s
              }
           }
        }
        TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    322c:	10 92 81 00 	sts	0x0081, r1
        TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    3230:	b0 e2       	ldi	r27, 0x20	; 32
    3232:	b6 bb       	out	0x16, r27	; 22
        timeconstant.w[0] = ICR1;		// get previous Input Capture Counter flag
    3234:	20 91 86 00 	lds	r18, 0x0086
    3238:	30 91 87 00 	lds	r19, 0x0087
    323c:	79 01       	movw	r14, r18
      // check actual counter, if an additional overflow must be added
        if((TCNT1 > timeconstant.w[0]) && (ii & (1<<TOV1))) {
    323e:	80 91 84 00 	lds	r24, 0x0084
    3242:	90 91 85 00 	lds	r25, 0x0085
    3246:	28 17       	cp	r18, r24
    3248:	39 07       	cpc	r19, r25
    324a:	30 f4       	brcc	.+12     	; 0x3258 <ReadInductance+0x1d2>
    324c:	40 ff       	sbrs	r20, 0
    324e:	04 c0       	rjmp	.+8      	; 0x3258 <ReadInductance+0x1d2>
           // this OV was not counted, but was before the Input Capture
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    3250:	21 e0       	ldi	r18, 0x01	; 1
    3252:	26 bb       	out	0x16, r18	; 22
           timeconstant.w[1]++;			// count one additional OV
    3254:	0f 5f       	subi	r16, 0xFF	; 255
    3256:	1f 4f       	sbci	r17, 0xFF	; 255
        }

        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    3258:	88 e0       	ldi	r24, 0x08	; 8
    325a:	88 b9       	out	0x08, r24	; 8
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    325c:	96 e9       	ldi	r25, 0x96	; 150
    325e:	90 93 7a 00 	sts	0x007A, r25
        for (ii=0;ii<20;ii++) {
    3262:	20 e0       	ldi	r18, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    3264:	88 2d       	mov	r24, r8
    3266:	28 8f       	std	Y+24, r18	; 0x18
    3268:	0e 94 cc 1a 	call	0x3598	; 0x3598 <W10msReadADC>
    326c:	6c 01       	movw	r12, r24
            total_r =  ReadADC(HighPin);
    326e:	84 2d       	mov	r24, r4
    3270:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    3274:	28 8d       	ldd	r18, Y+24	; 0x18
    3276:	a2 e0       	ldi	r26, 0x02	; 2
    3278:	ca 16       	cp	r12, r26
    327a:	d1 04       	cpc	r13, r1
    327c:	18 f4       	brcc	.+6      	; 0x3284 <ReadInductance+0x1fe>
    327e:	82 30       	cpi	r24, 0x02	; 2
    3280:	91 05       	cpc	r25, r1
    3282:	18 f0       	brcs	.+6      	; 0x328a <ReadInductance+0x204>
           timeconstant.w[1]++;			// count one additional OV
        }

        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
        for (ii=0;ii<20;ii++) {
    3284:	2f 5f       	subi	r18, 0xFF	; 255
    3286:	24 31       	cpi	r18, 0x14	; 20
    3288:	69 f7       	brne	.-38     	; 0x3264 <ReadInductance+0x1de>
//  #undef CNT_ZERO_42
//  #undef CNT_ZERO_720
//  #define CNT_ZERO_42 7
//  #define CNT_ZERO_720 10
//#endif
        total_r = (mess_r + resis[found].rx + RRpinMI);
    328a:	c0 90 18 01 	lds	r12, 0x0118
    328e:	d0 90 19 01 	lds	r13, 0x0119
    3292:	80 91 47 01 	lds	r24, 0x0147
    3296:	90 91 48 01 	lds	r25, 0x0148
    329a:	c8 0e       	add	r12, r24
    329c:	d9 1e       	adc	r13, r25
    329e:	ca 0c       	add	r12, r10
    32a0:	db 1c       	adc	r13, r11
//        if (total_r > 7000) cnt_diff = 1;
//        if (total_r > 14000) cnt_diff = 2;
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
        // Voltage of comparator in % of umax
     #ifdef AUTO_CAL
        tmpint = (ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset))) ;
    32a2:	87 ec       	ldi	r24, 0xC7	; 199
    32a4:	91 e0       	ldi	r25, 0x01	; 1
    32a6:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <__eerd_word_m168>
    32aa:	20 91 44 01 	lds	r18, 0x0144
    32ae:	30 91 45 01 	lds	r19, 0x0145
    32b2:	28 0f       	add	r18, r24
    32b4:	39 1f       	adc	r19, r25
     #else
        tmpint = (ref_mv + REF_C_KORR);
     #endif
        if (mess_r < R_L_VAL) {
    32b6:	b0 e9       	ldi	r27, 0x90	; 144
    32b8:	ab 16       	cp	r10, r27
    32ba:	ba e1       	ldi	r27, 0x1A	; 26
    32bc:	bb 06       	cpc	r11, r27
    32be:	b8 f4       	brcc	.+46     	; 0x32ee <ReadInductance+0x268>
           // measurement without 680 Ohm
           cnt_diff = CNT_ZERO_42;
           if (timeconstant.dw < 225) {
    32c0:	81 ee       	ldi	r24, 0xE1	; 225
    32c2:	e8 16       	cp	r14, r24
    32c4:	f1 04       	cpc	r15, r1
    32c6:	01 05       	cpc	r16, r1
    32c8:	11 05       	cpc	r17, r1
    32ca:	38 f4       	brcc	.+14     	; 0x32da <ReadInductance+0x254>
              ukorr = (timeconstant.w[0] / 5) - 20;
    32cc:	c7 01       	movw	r24, r14
    32ce:	65 e0       	ldi	r22, 0x05	; 5
    32d0:	70 e0       	ldi	r23, 0x00	; 0
    32d2:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__udivmodhi4>
    32d6:	64 51       	subi	r22, 0x14	; 20
    32d8:	01 c0       	rjmp	.+2      	; 0x32dc <ReadInductance+0x256>
           } else {
              ukorr = 25;
    32da:	69 e1       	ldi	r22, 0x19	; 25
           }
           tmpint -= (((REF_L_KORR * 10) / 10) + ukorr);
    32dc:	28 52       	subi	r18, 0x28	; 40
    32de:	30 40       	sbci	r19, 0x00	; 0
    32e0:	77 27       	eor	r23, r23
    32e2:	67 fd       	sbrc	r22, 7
    32e4:	70 95       	com	r23
    32e6:	26 1b       	sub	r18, r22
    32e8:	37 0b       	sbc	r19, r23
     #else
        tmpint = (ref_mv + REF_C_KORR);
     #endif
        if (mess_r < R_L_VAL) {
           // measurement without 680 Ohm
           cnt_diff = CNT_ZERO_42;
    32ea:	66 e0       	ldi	r22, 0x06	; 6
    32ec:	08 c0       	rjmp	.+16     	; 0x32fe <ReadInductance+0x278>
//#endif
        total_r = (mess_r + resis[found].rx + RRpinMI);
//        cnt_diff = 0;
//        if (total_r > 7000) cnt_diff = 1;
//        if (total_r > 14000) cnt_diff = 2;
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
    32ee:	c6 01       	movw	r24, r12
    32f0:	60 eb       	ldi	r22, 0xB0	; 176
    32f2:	76 e3       	ldi	r23, 0x36	; 54
    32f4:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__udivmodhi4>
           }
           tmpint -= (((REF_L_KORR * 10) / 10) + ukorr);
        } else {
           // measurement with 680 Ohm resistor
           // if 680 Ohm resistor is used, use REF_L_KORR for correction
           cnt_diff += CNT_ZERO_720;
    32f8:	69 5f       	subi	r22, 0xF9	; 249
           tmpint += REF_L_KORR;
    32fa:	28 5d       	subi	r18, 0xD8	; 216
    32fc:	3f 4f       	sbci	r19, 0xFF	; 255
        }
        if (timeconstant.dw > cnt_diff) timeconstant.dw -= cnt_diff;
    32fe:	70 e0       	ldi	r23, 0x00	; 0
    3300:	80 e0       	ldi	r24, 0x00	; 0
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	6e 15       	cp	r22, r14
    3306:	7f 05       	cpc	r23, r15
    3308:	80 07       	cpc	r24, r16
    330a:	91 07       	cpc	r25, r17
    330c:	28 f4       	brcc	.+10     	; 0x3318 <ReadInductance+0x292>
    330e:	e6 1a       	sub	r14, r22
    3310:	f7 0a       	sbc	r15, r23
    3312:	08 0b       	sbc	r16, r24
    3314:	19 0b       	sbc	r17, r25
    3316:	03 c0       	rjmp	.+6      	; 0x331e <ReadInductance+0x298>
        else          timeconstant.dw = 0;
    3318:	ee 24       	eor	r14, r14
    331a:	ff 24       	eor	r15, r15
    331c:	87 01       	movw	r16, r14
       
        if ((count&0x01) == 1) {
    331e:	a9 89       	ldd	r26, Y+17	; 0x11
    3320:	ba 89       	ldd	r27, Y+18	; 0x12
    3322:	10 97       	sbiw	r26, 0x00	; 0
    3324:	41 f0       	breq	.+16     	; 0x3336 <ReadInductance+0x2b0>
           // second pass with delayed counter start
           timeconstant.dw += (3 * (F_CPU/1000000UL))+10;
    3326:	82 e2       	ldi	r24, 0x22	; 34
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	a0 e0       	ldi	r26, 0x00	; 0
    332c:	b0 e0       	ldi	r27, 0x00	; 0
    332e:	e8 0e       	add	r14, r24
    3330:	f9 1e       	adc	r15, r25
    3332:	0a 1f       	adc	r16, r26
    3334:	1b 1f       	adc	r17, r27
        }
        if (timeconstant.w[1] >= (F_CPU/100000UL)) timeconstant.dw = 0; // no transition found
    3336:	00 35       	cpi	r16, 0x50	; 80
    3338:	11 05       	cpc	r17, r1
    333a:	18 f0       	brcs	.+6      	; 0x3342 <ReadInductance+0x2bc>
    333c:	ee 24       	eor	r14, r14
    333e:	ff 24       	eor	r15, r15
    3340:	87 01       	movw	r16, r14
        if (timeconstant.dw > 10) {
    3342:	9b e0       	ldi	r25, 0x0B	; 11
    3344:	e9 16       	cp	r14, r25
    3346:	f1 04       	cpc	r15, r1
    3348:	01 05       	cpc	r16, r1
    334a:	11 05       	cpc	r17, r1
    334c:	28 f0       	brcs	.+10     	; 0x3358 <ReadInductance+0x2d2>
           timeconstant.dw -= 1;
    334e:	08 94       	sec
    3350:	e1 08       	sbc	r14, r1
    3352:	f1 08       	sbc	r15, r1
    3354:	01 09       	sbc	r16, r1
    3356:	11 09       	sbc	r17, r1
        }
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    3358:	c6 01       	movw	r24, r12
    335a:	a0 e0       	ldi	r26, 0x00	; 0
    335c:	b0 e0       	ldi	r27, 0x00	; 0
    335e:	8b 8b       	std	Y+19, r24	; 0x13
    3360:	9c 8b       	std	Y+20, r25	; 0x14
    3362:	ad 8b       	std	Y+21, r26	; 0x15
    3364:	be 8b       	std	Y+22, r27	; 0x16
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    3366:	b9 01       	movw	r22, r18
    3368:	80 e0       	ldi	r24, 0x00	; 0
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	28 ee       	ldi	r18, 0xE8	; 232
    336e:	33 e0       	ldi	r19, 0x03	; 3
    3370:	40 e0       	ldi	r20, 0x00	; 0
    3372:	50 e0       	ldi	r21, 0x00	; 0
    3374:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
    3378:	2b 01       	movw	r4, r22
    337a:	3c 01       	movw	r6, r24
        if (timeconstant.w[1] >= (F_CPU/100000UL)) timeconstant.dw = 0; // no transition found
        if (timeconstant.dw > 10) {
           timeconstant.dw -= 1;
        }
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    337c:	b5 01       	movw	r22, r10
    337e:	80 e0       	ldi	r24, 0x00	; 0
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	20 91 40 01 	lds	r18, 0x0140
    3386:	30 91 41 01 	lds	r19, 0x0141
    338a:	40 e0       	ldi	r20, 0x00	; 0
    338c:	50 e0       	ldi	r21, 0x00	; 0
    338e:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
    3392:	2b 89       	ldd	r18, Y+19	; 0x13
    3394:	3c 89       	ldd	r19, Y+20	; 0x14
    3396:	4d 89       	ldd	r20, Y+21	; 0x15
    3398:	5e 89       	ldd	r21, Y+22	; 0x16
    339a:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    339e:	40 e0       	ldi	r20, 0x00	; 0
    33a0:	50 e0       	ldi	r21, 0x00	; 0
    33a2:	c3 01       	movw	r24, r6
    33a4:	b2 01       	movw	r22, r4
    33a6:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
//        per_ref2 = (uint8_t)MEM2_read_byte(&LogTab[per_ref1]);	// -log(1 - per_ref1/100)
        per_ref2 = get_log(per_ref1);		// -log(1 - per_ref1/1000)
    33aa:	c9 01       	movw	r24, r18
    33ac:	0e 94 1a 18 	call	0x3034	; 0x3034 <get_log>
    33b0:	6c 01       	movw	r12, r24
          }
#endif
/* ********************************************************* */
        // lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    33b2:	6b 89       	ldd	r22, Y+19	; 0x13
    33b4:	7c 89       	ldd	r23, Y+20	; 0x14
    33b6:	8d 89       	ldd	r24, Y+21	; 0x15
    33b8:	9e 89       	ldd	r25, Y+22	; 0x16
    33ba:	a8 01       	movw	r20, r16
    33bc:	97 01       	movw	r18, r14
    33be:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
    33c2:	2b 01       	movw	r4, r22
    33c4:	3c 01       	movw	r6, r24
             wait_about2s();
          }
#endif
/* ********************************************************* */
        // lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
    33c6:	b6 01       	movw	r22, r12
    33c8:	80 e0       	ldi	r24, 0x00	; 0
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	e3 e0       	ldi	r30, 0x03	; 3
    33ce:	66 0f       	add	r22, r22
    33d0:	77 1f       	adc	r23, r23
    33d2:	88 1f       	adc	r24, r24
    33d4:	99 1f       	adc	r25, r25
    33d6:	ea 95       	dec	r30
    33d8:	d1 f7       	brne	.-12     	; 0x33ce <ReadInductance+0x348>
    33da:	6b 5f       	subi	r22, 0xFB	; 251
    33dc:	7f 4f       	sbci	r23, 0xFF	; 255
    33de:	8f 4f       	sbci	r24, 0xFF	; 255
    33e0:	9f 4f       	sbci	r25, 0xFF	; 255
    33e2:	2a e0       	ldi	r18, 0x0A	; 10
    33e4:	30 e0       	ldi	r19, 0x00	; 0
    33e6:	40 e0       	ldi	r20, 0x00	; 0
    33e8:	50 e0       	ldi	r21, 0x00	; 0
    33ea:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    33ee:	40 e0       	ldi	r20, 0x00	; 0
    33f0:	50 e0       	ldi	r21, 0x00	; 0
    33f2:	c3 01       	movw	r24, r6
    33f4:	b2 01       	movw	r22, r4
    33f6:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
    33fa:	f1 01       	movw	r30, r2
    33fc:	ee 0f       	add	r30, r30
    33fe:	ff 1f       	adc	r31, r31
    3400:	ee 0f       	add	r30, r30
    3402:	ff 1f       	adc	r31, r31
    3404:	a1 e0       	ldi	r26, 0x01	; 1
    3406:	b0 e0       	ldi	r27, 0x00	; 0
    3408:	ac 0f       	add	r26, r28
    340a:	bd 1f       	adc	r27, r29
    340c:	ea 0f       	add	r30, r26
    340e:	fb 1f       	adc	r31, r27
    3410:	20 83       	st	Z, r18
    3412:	31 83       	std	Z+1, r19	; 0x01
    3414:	42 83       	std	Z+2, r20	; 0x02
    3416:	53 83       	std	Z+3, r21	; 0x03
        if (((count&0x01) == 0) && (timeconstant.dw > ((F_CPU/1000000UL)+3))) {
    3418:	89 89       	ldd	r24, Y+17	; 0x11
    341a:	9a 89       	ldd	r25, Y+18	; 0x12
    341c:	00 97       	sbiw	r24, 0x00	; 0
    341e:	99 f4       	brne	.+38     	; 0x3446 <ReadInductance+0x3c0>
    3420:	9c e0       	ldi	r25, 0x0C	; 12
    3422:	e9 16       	cp	r14, r25
    3424:	f1 04       	cpc	r15, r1
    3426:	01 05       	cpc	r16, r1
    3428:	11 05       	cpc	r17, r1
    342a:	68 f0       	brcs	.+26     	; 0x3446 <ReadInductance+0x3c0>
           // transition is found, measurement with delayed counter start is not necessary
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
    342c:	f1 01       	movw	r30, r2
    342e:	31 96       	adiw	r30, 0x01	; 1
    3430:	ee 0f       	add	r30, r30
    3432:	ff 1f       	adc	r31, r31
    3434:	ee 0f       	add	r30, r30
    3436:	ff 1f       	adc	r31, r31
    3438:	ea 0f       	add	r30, r26
    343a:	fb 1f       	adc	r31, r27
    343c:	20 83       	st	Z, r18
    343e:	31 83       	std	Z+1, r19	; 0x01
    3440:	42 83       	std	Z+2, r20	; 0x02
    3442:	53 83       	std	Z+3, r21	; 0x03
           count++;		// skip the delayed measurement
    3444:	93 94       	inc	r9
        }
        wdt_reset();
    3446:	a8 95       	wdr
//  for (found=0;found<ResistorsFound;found++) {
//     if (resis[found].rx > 21000) continue;
     if (resis[found].rx > 21000) return;

     // we can check for Inductance, if resistance is below 2100 Ohm
     for (count=0;count<4;count++) {
    3448:	93 94       	inc	r9
    344a:	a9 2d       	mov	r26, r9
    344c:	a4 30       	cpi	r26, 0x04	; 4
    344e:	08 f4       	brcc	.+2      	; 0x3452 <ReadInductance+0x3cc>
    3450:	50 ce       	rjmp	.-864    	; 0x30f2 <ReadInductance+0x6c>
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
           count++;		// skip the delayed measurement
        }
        wdt_reset();
     }  //end for count
     ADC_PORT = TXD_VAL;		// switch ADC Port to GND
    3452:	88 e0       	ldi	r24, 0x08	; 8
    3454:	88 b9       	out	0x08, r24	; 8
     wait_about20ms();
    3456:	84 e0       	ldi	r24, 0x04	; 4
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
        resis[found].lx = inductance[0];
     }
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];		// other polarity, delayed start
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
#else
     nr_pol1 = 0;
    345e:	61 e0       	ldi	r22, 0x01	; 1
    3460:	2d 81       	ldd	r18, Y+5	; 0x05
    3462:	3e 81       	ldd	r19, Y+6	; 0x06
    3464:	4f 81       	ldd	r20, Y+7	; 0x07
    3466:	58 85       	ldd	r21, Y+8	; 0x08
    3468:	89 81       	ldd	r24, Y+1	; 0x01
    346a:	9a 81       	ldd	r25, Y+2	; 0x02
    346c:	ab 81       	ldd	r26, Y+3	; 0x03
    346e:	bc 81       	ldd	r27, Y+4	; 0x04
    3470:	82 17       	cp	r24, r18
    3472:	93 07       	cpc	r25, r19
    3474:	a4 07       	cpc	r26, r20
    3476:	b5 07       	cpc	r27, r21
    3478:	08 f0       	brcs	.+2      	; 0x347c <ReadInductance+0x3f6>
    347a:	60 e0       	ldi	r22, 0x00	; 0
     if (inductance[1] > inductance[0]) { nr_pol1 = 1; } 
     nr_pol2 = 2;
     if (inductance[3] > inductance[2]) { nr_pol2 = 3; } 
    347c:	2d 85       	ldd	r18, Y+13	; 0x0d
    347e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3480:	4f 85       	ldd	r20, Y+15	; 0x0f
    3482:	58 89       	ldd	r21, Y+16	; 0x10
    3484:	89 85       	ldd	r24, Y+9	; 0x09
    3486:	9a 85       	ldd	r25, Y+10	; 0x0a
    3488:	ab 85       	ldd	r26, Y+11	; 0x0b
    348a:	bc 85       	ldd	r27, Y+12	; 0x0c
    348c:	82 17       	cp	r24, r18
    348e:	93 07       	cpc	r25, r19
    3490:	a4 07       	cpc	r26, r20
    3492:	b5 07       	cpc	r27, r21
    3494:	10 f0       	brcs	.+4      	; 0x349a <ReadInductance+0x414>
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];		// other polarity, delayed start
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
#else
     nr_pol1 = 0;
     if (inductance[1] > inductance[0]) { nr_pol1 = 1; } 
     nr_pol2 = 2;
    3496:	72 e0       	ldi	r23, 0x02	; 2
    3498:	01 c0       	rjmp	.+2      	; 0x349c <ReadInductance+0x416>
     if (inductance[3] > inductance[2]) { nr_pol2 = 3; } 
    349a:	73 e0       	ldi	r23, 0x03	; 3
     if (inductance[nr_pol2] < inductance[nr_pol1]) nr_pol1 = nr_pol2;
    349c:	a7 2f       	mov	r26, r23
    349e:	b0 e0       	ldi	r27, 0x00	; 0
    34a0:	aa 0f       	add	r26, r26
    34a2:	bb 1f       	adc	r27, r27
    34a4:	aa 0f       	add	r26, r26
    34a6:	bb 1f       	adc	r27, r27
    34a8:	ce 01       	movw	r24, r28
    34aa:	01 96       	adiw	r24, 0x01	; 1
    34ac:	a8 0f       	add	r26, r24
    34ae:	b9 1f       	adc	r27, r25
    34b0:	e6 2f       	mov	r30, r22
    34b2:	f0 e0       	ldi	r31, 0x00	; 0
    34b4:	ee 0f       	add	r30, r30
    34b6:	ff 1f       	adc	r31, r31
    34b8:	ee 0f       	add	r30, r30
    34ba:	ff 1f       	adc	r31, r31
    34bc:	e8 0f       	add	r30, r24
    34be:	f9 1f       	adc	r31, r25
    34c0:	2d 91       	ld	r18, X+
    34c2:	3d 91       	ld	r19, X+
    34c4:	4d 91       	ld	r20, X+
    34c6:	5c 91       	ld	r21, X
    34c8:	80 81       	ld	r24, Z
    34ca:	91 81       	ldd	r25, Z+1	; 0x01
    34cc:	a2 81       	ldd	r26, Z+2	; 0x02
    34ce:	b3 81       	ldd	r27, Z+3	; 0x03
    34d0:	28 17       	cp	r18, r24
    34d2:	39 07       	cpc	r19, r25
    34d4:	4a 07       	cpc	r20, r26
    34d6:	5b 07       	cpc	r21, r27
    34d8:	08 f4       	brcc	.+2      	; 0x34dc <ReadInductance+0x456>
    34da:	67 2f       	mov	r22, r23
     resis[found].lx = inductance[nr_pol1];
    34dc:	26 2f       	mov	r18, r22
    34de:	30 e0       	ldi	r19, 0x00	; 0
    34e0:	f9 01       	movw	r30, r18
    34e2:	ee 0f       	add	r30, r30
    34e4:	ff 1f       	adc	r31, r31
    34e6:	ee 0f       	add	r30, r30
    34e8:	ff 1f       	adc	r31, r31
    34ea:	ec 0f       	add	r30, r28
    34ec:	fd 1f       	adc	r31, r29
    34ee:	61 81       	ldd	r22, Z+1	; 0x01
    34f0:	72 81       	ldd	r23, Z+2	; 0x02
    34f2:	83 81       	ldd	r24, Z+3	; 0x03
    34f4:	94 81       	ldd	r25, Z+4	; 0x04
    34f6:	60 93 1c 01 	sts	0x011C, r22
    34fa:	70 93 1d 01 	sts	0x011D, r23
    34fe:	80 93 1e 01 	sts	0x011E, r24
    3502:	90 93 1f 01 	sts	0x011F, r25
     resis[found].lpre = -5;	// 10 uH units
    3506:	4b ef       	ldi	r20, 0xFB	; 251
    3508:	40 93 20 01 	sts	0x0120, r20
     if (((nr_pol1 & 1) == 1) || (resis[found].rx >= 240)) {
    350c:	20 fd       	sbrc	r18, 0
    350e:	0d c0       	rjmp	.+26     	; 0x352a <ReadInductance+0x4a4>
    3510:	20 91 18 01 	lds	r18, 0x0118
    3514:	30 91 19 01 	lds	r19, 0x0119
    3518:	40 91 1a 01 	lds	r20, 0x011A
    351c:	50 91 1b 01 	lds	r21, 0x011B
    3520:	20 3f       	cpi	r18, 0xF0	; 240
    3522:	31 05       	cpc	r19, r1
    3524:	41 05       	cpc	r20, r1
    3526:	51 05       	cpc	r21, r1
    3528:	a8 f0       	brcs	.+42     	; 0x3554 <ReadInductance+0x4ce>
        // with 680 Ohm resistor total_r is more than 7460
        resis[found].lpre = -4;	// 100 uH units
    352a:	2c ef       	ldi	r18, 0xFC	; 252
    352c:	20 93 20 01 	sts	0x0120, r18
        resis[found].lx = (resis[found].lx + 5) / 10;
    3530:	6b 5f       	subi	r22, 0xFB	; 251
    3532:	7f 4f       	sbci	r23, 0xFF	; 255
    3534:	8f 4f       	sbci	r24, 0xFF	; 255
    3536:	9f 4f       	sbci	r25, 0xFF	; 255
    3538:	2a e0       	ldi	r18, 0x0A	; 10
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	40 e0       	ldi	r20, 0x00	; 0
    353e:	50 e0       	ldi	r21, 0x00	; 0
    3540:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
    3544:	20 93 1c 01 	sts	0x011C, r18
    3548:	30 93 1d 01 	sts	0x011D, r19
    354c:	40 93 1e 01 	sts	0x011E, r20
    3550:	50 93 1f 01 	sts	0x011F, r21
     } 
#endif
//  } // end loop for all resistors

  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    3554:	88 e0       	ldi	r24, 0x08	; 8
    3556:	87 b9       	out	0x07, r24	; 7
  R_DDR = 0;			// switch all resistor ports to input
    3558:	14 b8       	out	0x04, r1	; 4
#endif
  return;
 } // end ReadInductance()
    355a:	68 96       	adiw	r28, 0x18	; 24
    355c:	0f b6       	in	r0, 0x3f	; 63
    355e:	f8 94       	cli
    3560:	de bf       	out	0x3e, r29	; 62
    3562:	0f be       	out	0x3f, r0	; 63
    3564:	cd bf       	out	0x3d, r28	; 61
    3566:	cf 91       	pop	r28
    3568:	df 91       	pop	r29
    356a:	1f 91       	pop	r17
    356c:	0f 91       	pop	r16
    356e:	ff 90       	pop	r15
    3570:	ef 90       	pop	r14
    3572:	df 90       	pop	r13
    3574:	cf 90       	pop	r12
    3576:	bf 90       	pop	r11
    3578:	af 90       	pop	r10
    357a:	9f 90       	pop	r9
    357c:	8f 90       	pop	r8
    357e:	7f 90       	pop	r7
    3580:	6f 90       	pop	r6
    3582:	5f 90       	pop	r5
    3584:	4f 90       	pop	r4
    3586:	3f 90       	pop	r3
    3588:	2f 90       	pop	r2
    358a:	08 95       	ret

0000358c <W20msReadADC>:
    358c:	8f 93       	push	r24
    358e:	84 e0       	ldi	r24, 0x04	; 4
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
    3596:	0b c0       	rjmp	.+22     	; 0x35ae <to_read>

00003598 <W10msReadADC>:
    3598:	8f 93       	push	r24
    359a:	82 e0       	ldi	r24, 0x02	; 2
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
    35a2:	05 c0       	rjmp	.+10     	; 0x35ae <to_read>

000035a4 <W5msReadADC>:
    35a4:	8f 93       	push	r24
    35a6:	81 e0       	ldi	r24, 0x01	; 1
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>

000035ae <to_read>:
    35ae:	8f 91       	pop	r24

000035b0 <ReadADC>:
    35b0:	1f 93       	push	r17
    35b2:	18 2f       	mov	r17, r24
    35b4:	10 64       	ori	r17, 0x40	; 64

000035b6 <get_sample>:
    35b6:	10 93 7c 00 	sts	0x007C, r17
    35ba:	e1 2f       	mov	r30, r17
    35bc:	e0 78       	andi	r30, 0x80	; 128
    35be:	80 91 3d 01 	lds	r24, 0x013D
    35c2:	e8 17       	cp	r30, r24
    35c4:	61 f0       	breq	.+24     	; 0x35de <r2aa2>
    35c6:	0e 94 83 14 	call	0x2906	; 0x2906 <wait100us>
    35ca:	8e e9       	ldi	r24, 0x9E	; 158
    35cc:	80 93 7a 00 	sts	0x007A, r24
    35d0:	83 e0       	ldi	r24, 0x03	; 3
    35d2:	83 bf       	out	0x33, r24	; 51
    35d4:	88 95       	sleep
    35d6:	82 e0       	ldi	r24, 0x02	; 2
    35d8:	83 bf       	out	0x33, r24	; 51
    35da:	e0 93 3d 01 	sts	0x013D, r30

000035de <r2aa2>:
    35de:	20 e0       	ldi	r18, 0x00	; 0
    35e0:	30 e0       	ldi	r19, 0x00	; 0
    35e2:	a9 01       	movw	r20, r18
    35e4:	e0 e0       	ldi	r30, 0x00	; 0
    35e6:	1f c0       	rjmp	.+62     	; 0x3626 <r2ae8>

000035e8 <Loop>:
    35e8:	8e e9       	ldi	r24, 0x9E	; 158
    35ea:	80 93 7a 00 	sts	0x007A, r24
    35ee:	83 e0       	ldi	r24, 0x03	; 3
    35f0:	83 bf       	out	0x33, r24	; 51
    35f2:	88 95       	sleep
    35f4:	82 e0       	ldi	r24, 0x02	; 2
    35f6:	83 bf       	out	0x33, r24	; 51
    35f8:	60 91 78 00 	lds	r22, 0x0078
    35fc:	70 91 79 00 	lds	r23, 0x0079
    3600:	26 0f       	add	r18, r22
    3602:	37 1f       	adc	r19, r23
    3604:	41 1d       	adc	r20, r1
    3606:	51 1d       	adc	r21, r1
    3608:	e4 30       	cpi	r30, 0x04	; 4
    360a:	61 f4       	brne	.+24     	; 0x3624 <r2ae6>
    360c:	80 91 3f 01 	lds	r24, 0x013F
    3610:	80 30       	cpi	r24, 0x00	; 0
    3612:	41 f0       	breq	.+16     	; 0x3624 <r2ae6>
    3614:	84 e0       	ldi	r24, 0x04	; 4
    3616:	20 30       	cpi	r18, 0x00	; 0
    3618:	38 07       	cpc	r19, r24
    361a:	20 f4       	brcc	.+8      	; 0x3624 <r2ae6>
    361c:	17 fd       	sbrc	r17, 7
    361e:	02 c0       	rjmp	.+4      	; 0x3624 <r2ae6>
    3620:	10 68       	ori	r17, 0x80	; 128
    3622:	c9 cf       	rjmp	.-110    	; 0x35b6 <get_sample>

00003624 <r2ae6>:
    3624:	ef 5f       	subi	r30, 0xFF	; 255

00003626 <r2ae8>:
    3626:	80 91 3c 01 	lds	r24, 0x013C
    362a:	e8 17       	cp	r30, r24
    362c:	e8 f2       	brcs	.-70     	; 0x35e8 <Loop>
    362e:	17 ff       	sbrs	r17, 7
    3630:	05 c0       	rjmp	.+10     	; 0x363c <r2afe>
    3632:	60 91 3e 01 	lds	r22, 0x013E
    3636:	70 91 3f 01 	lds	r23, 0x013F
    363a:	04 c0       	rjmp	.+8      	; 0x3644 <r2b02>

0000363c <r2afe>:
    363c:	60 91 40 01 	lds	r22, 0x0140
    3640:	70 91 41 01 	lds	r23, 0x0141

00003644 <r2b02>:
    3644:	80 e0       	ldi	r24, 0x00	; 0
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
    364c:	2f ef       	ldi	r18, 0xFF	; 255
    364e:	33 e0       	ldi	r19, 0x03	; 3
    3650:	40 e0       	ldi	r20, 0x00	; 0
    3652:	50 e0       	ldi	r21, 0x00	; 0
    3654:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
    3658:	b9 01       	movw	r22, r18
    365a:	ca 01       	movw	r24, r20
    365c:	20 91 3c 01 	lds	r18, 0x013C
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	40 e0       	ldi	r20, 0x00	; 0
    3664:	50 e0       	ldi	r21, 0x00	; 0
    3666:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
    366a:	c9 01       	movw	r24, r18
    366c:	1f 91       	pop	r17
    366e:	08 95       	ret

00003670 <GetESR>:
    3670:	2f 92       	push	r2
    3672:	3f 92       	push	r3
    3674:	4f 92       	push	r4
    3676:	5f 92       	push	r5
    3678:	6f 92       	push	r6
    367a:	7f 92       	push	r7
    367c:	8f 92       	push	r8
    367e:	9f 92       	push	r9
    3680:	af 92       	push	r10
    3682:	bf 92       	push	r11
    3684:	cf 92       	push	r12
    3686:	df 92       	push	r13
    3688:	ef 92       	push	r14
    368a:	ff 92       	push	r15
    368c:	0f 93       	push	r16
    368e:	1f 93       	push	r17
    3690:	df 93       	push	r29
    3692:	cf 93       	push	r28
    3694:	cd b7       	in	r28, 0x3d	; 61
    3696:	de b7       	in	r29, 0x3e	; 62
    3698:	6e 97       	sbiw	r28, 0x1e	; 30
    369a:	0f b6       	in	r0, 0x3f	; 63
    369c:	f8 94       	cli
    369e:	de bf       	out	0x3e, r29	; 62
    36a0:	0f be       	out	0x3f, r0	; 63
    36a2:	cd bf       	out	0x3d, r28	; 61
    36a4:	66 2e       	mov	r6, r22
    36a6:	b8 2e       	mov	r11, r24
    36a8:	86 0f       	add	r24, r22
    36aa:	89 83       	std	Y+1, r24	; 0x01
    36ac:	20 91 07 01 	lds	r18, 0x0107
    36b0:	27 30       	cpi	r18, 0x07	; 7
    36b2:	19 f5       	brne	.+70     	; 0x36fa <ad_35e4>
    36b4:	20 91 66 01 	lds	r18, 0x0166
    36b8:	30 91 67 01 	lds	r19, 0x0167
    36bc:	40 91 68 01 	lds	r20, 0x0168
    36c0:	50 91 69 01 	lds	r21, 0x0169
    36c4:	10 91 75 01 	lds	r17, 0x0175
    36c8:	09 c0       	rjmp	.+18     	; 0x36dc <ad_35ba>

000036ca <ad_35ac>:
    36ca:	ca 01       	movw	r24, r20
    36cc:	b9 01       	movw	r22, r18
    36ce:	2a e0       	ldi	r18, 0x0A	; 10
    36d0:	31 2d       	mov	r19, r1
    36d2:	41 2d       	mov	r20, r1
    36d4:	51 2d       	mov	r21, r1
    36d6:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
    36da:	1f 5f       	subi	r17, 0xFF	; 255

000036dc <ad_35ba>:
    36dc:	17 3f       	cpi	r17, 0xF7	; 247
    36de:	ac f3       	brlt	.-22     	; 0x36ca <ad_35ac>
    36e0:	2c 8b       	std	Y+20, r18	; 0x14
    36e2:	3d 8b       	std	Y+21, r19	; 0x15
    36e4:	4e 8b       	std	Y+22, r20	; 0x16
    36e6:	5f 8b       	std	Y+23, r21	; 0x17
    36e8:	24 3b       	cpi	r18, 0xB4	; 180
    36ea:	60 e0       	ldi	r22, 0x00	; 0
    36ec:	36 07       	cpc	r19, r22
    36ee:	41 05       	cpc	r20, r1
    36f0:	51 05       	cpc	r21, r1
    36f2:	18 f4       	brcc	.+6      	; 0x36fa <ad_35e4>
    36f4:	8f ef       	ldi	r24, 0xFF	; 255
    36f6:	9f ef       	ldi	r25, 0xFF	; 255
    36f8:	71 c1       	rjmp	.+738    	; 0x39dc <ad_exit>

000036fa <ad_35e4>:
    36fa:	26 ed       	ldi	r18, 0xD6	; 214
    36fc:	a2 2e       	mov	r10, r18
    36fe:	02 c0       	rjmp	.+4      	; 0x3704 <ad_3604>

00003700 <ad_35fe>:
    3700:	94 ed       	ldi	r25, 0xD4	; 212
    3702:	a9 2e       	mov	r10, r25

00003704 <ad_3604>:
    3704:	ed e0       	ldi	r30, 0x0D	; 13
    3706:	f1 e0       	ldi	r31, 0x01	; 1
    3708:	e6 0d       	add	r30, r6
    370a:	f1 1d       	adc	r31, r1
    370c:	85 91       	lpm	r24, Z+
    370e:	88 60       	ori	r24, 0x08	; 8
    3710:	8e 87       	std	Y+14, r24	; 0x0e
    3712:	ed e0       	ldi	r30, 0x0D	; 13
    3714:	f1 e0       	ldi	r31, 0x01	; 1
    3716:	eb 0d       	add	r30, r11
    3718:	f1 1d       	adc	r31, r1
    371a:	85 91       	lpm	r24, Z+
    371c:	88 60       	ori	r24, 0x08	; 8
    371e:	8f 87       	std	Y+15, r24	; 0x0f
    3720:	ea e0       	ldi	r30, 0x0A	; 10
    3722:	f1 e0       	ldi	r31, 0x01	; 1
    3724:	e6 0d       	add	r30, r6
    3726:	f1 1d       	adc	r31, r1
    3728:	75 90       	lpm	r7, Z+
    372a:	ea e0       	ldi	r30, 0x0A	; 10
    372c:	f1 e0       	ldi	r31, 0x01	; 1
    372e:	eb 0d       	add	r30, r11
    3730:	f1 1d       	adc	r31, r1
    3732:	c5 90       	lpm	r12, Z+
    3734:	90 ec       	ldi	r25, 0xC0	; 192
    3736:	69 2a       	or	r6, r25
    3738:	b9 2a       	or	r11, r25
    373a:	81 e0       	ldi	r24, 0x01	; 1
    373c:	e8 2e       	mov	r14, r24
    373e:	f1 2c       	mov	r15, r1
    3740:	01 2d       	mov	r16, r1
    3742:	11 2d       	mov	r17, r1
    3744:	8e 83       	std	Y+6, r24	; 0x06
    3746:	1f 82       	std	Y+7, r1	; 0x07
    3748:	18 86       	std	Y+8, r1	; 0x08
    374a:	19 86       	std	Y+9, r1	; 0x09
    374c:	1a 86       	std	Y+10, r1	; 0x0a
    374e:	1b 86       	std	Y+11, r1	; 0x0b
    3750:	1c 86       	std	Y+12, r1	; 0x0c
    3752:	1d 86       	std	Y+13, r1	; 0x0d
    3754:	18 8e       	std	Y+24, r1	; 0x18
    3756:	19 8e       	std	Y+25, r1	; 0x19
    3758:	0e 94 b2 01 	call	0x364	; 0x364 <EntladePins>
    375c:	88 e0       	ldi	r24, 0x08	; 8
    375e:	88 b9       	out	0x08, r24	; 8
    3760:	60 92 7c 00 	sts	0x007C, r6
    3764:	0e 94 83 14 	call	0x2906	; 0x2906 <wait100us>
    3768:	3f 85       	ldd	r19, Y+15	; 0x0f
    376a:	37 b9       	out	0x07, r19	; 7
    376c:	75 b8       	out	0x05, r7	; 5
    376e:	74 b8       	out	0x04, r7	; 4
    3770:	0e 94 88 14 	call	0x2910	; 0x2910 <wait10us>
    3774:	0e 94 8c 14 	call	0x2918	; 0x2918 <wait2us>
    3778:	15 b8       	out	0x05, r1	; 5
    377a:	14 b8       	out	0x04, r1	; 4
    377c:	dd 24       	eor	r13, r13
    377e:	b4 ed       	ldi	r27, 0xD4	; 212
    3780:	9b 2e       	mov	r9, r27
    3782:	a6 ed       	ldi	r26, 0xD6	; 214
    3784:	8a 2e       	mov	r8, r26

00003786 <ad_3692>:
    3786:	3e 85       	ldd	r19, Y+14	; 0x0e
    3788:	37 b9       	out	0x07, r19	; 7
    378a:	75 b8       	out	0x05, r7	; 5
    378c:	74 b8       	out	0x04, r7	; 4
    378e:	60 92 7c 00 	sts	0x007C, r6
    3792:	a8 95       	wdr
    3794:	a0 92 7a 00 	sts	0x007A, r10
    3798:	80 91 7a 00 	lds	r24, 0x007A
    379c:	86 fd       	sbrc	r24, 6
    379e:	fc cf       	rjmp	.-8      	; 0x3798 <ad_3692+0x12>
    37a0:	a0 92 7a 00 	sts	0x007A, r10
    37a4:	80 91 7a 00 	lds	r24, 0x007A
    37a8:	86 fd       	sbrc	r24, 6
    37aa:	fc cf       	rjmp	.-8      	; 0x37a4 <ad_3692+0x1e>
    37ac:	20 90 78 00 	lds	r2, 0x0078
    37b0:	30 90 79 00 	lds	r3, 0x0079
    37b4:	b0 92 7c 00 	sts	0x007C, r11
    37b8:	a0 92 7a 00 	sts	0x007A, r10
    37bc:	80 91 7a 00 	lds	r24, 0x007A
    37c0:	86 fd       	sbrc	r24, 6
    37c2:	fc cf       	rjmp	.-8      	; 0x37bc <ad_3692+0x36>
    37c4:	80 92 7a 00 	sts	0x007A, r8
    37c8:	0e 94 89 14 	call	0x2912	; 0x2912 <wait5us>
    37cc:	c5 b8       	out	0x05, r12	; 5
    37ce:	c4 b8       	out	0x04, r12	; 4
    37d0:	0e 94 87 14 	call	0x290e	; 0x290e <wait20us>
    37d4:	0e 94 89 14 	call	0x2912	; 0x2912 <wait5us>
    37d8:	0e 94 8d 14 	call	0x291a	; 0x291a <wait1us>
    37dc:	8f 93       	push	r24
    37de:	8f 91       	pop	r24
    37e0:	a8 95       	wdr
    37e2:	a8 95       	wdr
    37e4:	14 b8       	out	0x04, r1	; 4
    37e6:	15 b8       	out	0x05, r1	; 5

000037e8 <ad_370c>:
    37e8:	80 91 7a 00 	lds	r24, 0x007A
    37ec:	86 fd       	sbrc	r24, 6
    37ee:	fc cf       	rjmp	.-8      	; 0x37e8 <ad_370c>
    37f0:	20 91 78 00 	lds	r18, 0x0078
    37f4:	30 91 79 00 	lds	r19, 0x0079
    37f8:	28 8b       	std	Y+16, r18	; 0x10
    37fa:	39 8b       	std	Y+17, r19	; 0x11
    37fc:	3f 85       	ldd	r19, Y+15	; 0x0f
    37fe:	37 b9       	out	0x07, r19	; 7
    3800:	c5 b8       	out	0x05, r12	; 5
    3802:	c4 b8       	out	0x04, r12	; 4
    3804:	a8 95       	wdr
    3806:	b0 92 7c 00 	sts	0x007C, r11
    380a:	a0 92 7a 00 	sts	0x007A, r10
    380e:	80 91 7a 00 	lds	r24, 0x007A
    3812:	86 fd       	sbrc	r24, 6
    3814:	fc cf       	rjmp	.-8      	; 0x380e <ad_370c+0x26>
    3816:	a0 92 7a 00 	sts	0x007A, r10
    381a:	80 91 7a 00 	lds	r24, 0x007A
    381e:	86 fd       	sbrc	r24, 6
    3820:	fc cf       	rjmp	.-8      	; 0x381a <ad_370c+0x32>
    3822:	60 91 78 00 	lds	r22, 0x0078
    3826:	70 91 79 00 	lds	r23, 0x0079
    382a:	60 92 7c 00 	sts	0x007C, r6
    382e:	a0 92 7a 00 	sts	0x007A, r10
    3832:	80 91 7a 00 	lds	r24, 0x007A
    3836:	86 fd       	sbrc	r24, 6
    3838:	fc cf       	rjmp	.-8      	; 0x3832 <ad_370c+0x4a>
    383a:	80 92 7a 00 	sts	0x007A, r8
    383e:	0e 94 89 14 	call	0x2912	; 0x2912 <wait5us>
    3842:	75 b8       	out	0x05, r7	; 5
    3844:	74 b8       	out	0x04, r7	; 4
    3846:	0e 94 87 14 	call	0x290e	; 0x290e <wait20us>
    384a:	0e 94 89 14 	call	0x2912	; 0x2912 <wait5us>
    384e:	0e 94 8d 14 	call	0x291a	; 0x291a <wait1us>
    3852:	8f 93       	push	r24
    3854:	8f 91       	pop	r24
    3856:	a8 95       	wdr
    3858:	a8 95       	wdr
    385a:	14 b8       	out	0x04, r1	; 4
    385c:	15 b8       	out	0x05, r1	; 5

0000385e <ad_37f4>:
    385e:	80 91 7a 00 	lds	r24, 0x007A
    3862:	86 fd       	sbrc	r24, 6
    3864:	fc cf       	rjmp	.-8      	; 0x385e <ad_37f4>
    3866:	40 91 78 00 	lds	r20, 0x0078
    386a:	50 91 79 00 	lds	r21, 0x0079
    386e:	14 b8       	out	0x04, r1	; 4
    3870:	cb 01       	movw	r24, r22
    3872:	82 0d       	add	r24, r2
    3874:	93 1d       	adc	r25, r3
    3876:	e8 0e       	add	r14, r24
    3878:	f9 1e       	adc	r15, r25
    387a:	01 1d       	adc	r16, r1
    387c:	11 1d       	adc	r17, r1
    387e:	ea 82       	std	Y+2, r14	; 0x02
    3880:	fb 82       	std	Y+3, r15	; 0x03
    3882:	0c 83       	std	Y+4, r16	; 0x04
    3884:	1d 83       	std	Y+5, r17	; 0x05
    3886:	88 89       	ldd	r24, Y+16	; 0x10
    3888:	99 89       	ldd	r25, Y+17	; 0x11
    388a:	84 0f       	add	r24, r20
    388c:	95 1f       	adc	r25, r21
    388e:	2e 81       	ldd	r18, Y+6	; 0x06
    3890:	3f 81       	ldd	r19, Y+7	; 0x07
    3892:	68 85       	ldd	r22, Y+8	; 0x08
    3894:	79 85       	ldd	r23, Y+9	; 0x09
    3896:	28 0f       	add	r18, r24
    3898:	39 1f       	adc	r19, r25
    389a:	61 1d       	adc	r22, r1
    389c:	71 1d       	adc	r23, r1
    389e:	2e 83       	std	Y+6, r18	; 0x06
    38a0:	3f 83       	std	Y+7, r19	; 0x07
    38a2:	68 87       	std	Y+8, r22	; 0x08
    38a4:	79 87       	std	Y+9, r23	; 0x09
    38a6:	24 e6       	ldi	r18, 0x64	; 100
    38a8:	24 17       	cp	r18, r20
    38aa:	15 06       	cpc	r1, r21
    38ac:	50 f0       	brcs	.+20     	; 0x38c2 <is_ok1>
    38ae:	75 b8       	out	0x05, r7	; 5
    38b0:	74 b8       	out	0x04, r7	; 4
    38b2:	0e 94 8c 14 	call	0x2918	; 0x2918 <wait2us>
    38b6:	14 b8       	out	0x04, r1	; 4
    38b8:	15 b8       	out	0x05, r1	; 5
    38ba:	88 8d       	ldd	r24, Y+24	; 0x18
    38bc:	83 95       	inc	r24
    38be:	88 8f       	std	Y+24, r24	; 0x18
    38c0:	07 c0       	rjmp	.+14     	; 0x38d0 <is_ok1b>

000038c2 <is_ok1>:
    38c2:	48 3e       	cpi	r20, 0xE8	; 232
    38c4:	73 e0       	ldi	r23, 0x03	; 3
    38c6:	57 07       	cpc	r21, r23
    38c8:	18 f0       	brcs	.+6      	; 0x38d0 <is_ok1b>
    38ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    38cc:	83 95       	inc	r24
    38ce:	8a 8f       	std	Y+26, r24	; 0x1a

000038d0 <is_ok1b>:
    38d0:	88 89       	ldd	r24, Y+16	; 0x10
    38d2:	99 89       	ldd	r25, Y+17	; 0x11
    38d4:	28 17       	cp	r18, r24
    38d6:	19 06       	cpc	r1, r25
    38d8:	b0 f0       	brcs	.+44     	; 0x3906 <is_ok2>
    38da:	3e 85       	ldd	r19, Y+14	; 0x0e
    38dc:	37 b9       	out	0x07, r19	; 7
    38de:	c5 b8       	out	0x05, r12	; 5
    38e0:	c4 b8       	out	0x04, r12	; 4
    38e2:	0e 94 8c 14 	call	0x2918	; 0x2918 <wait2us>
    38e6:	0e 94 87 14 	call	0x290e	; 0x290e <wait20us>
    38ea:	0e 94 89 14 	call	0x2912	; 0x2912 <wait5us>
    38ee:	0e 94 8d 14 	call	0x291a	; 0x291a <wait1us>
    38f2:	8f 93       	push	r24
    38f4:	8f 91       	pop	r24
    38f6:	a8 95       	wdr
    38f8:	a8 95       	wdr
    38fa:	14 b8       	out	0x04, r1	; 4
    38fc:	15 b8       	out	0x05, r1	; 5
    38fe:	89 8d       	ldd	r24, Y+25	; 0x19
    3900:	83 95       	inc	r24
    3902:	89 8f       	std	Y+25, r24	; 0x19
    3904:	07 c0       	rjmp	.+14     	; 0x3914 <is_ok2b>

00003906 <is_ok2>:
    3906:	88 3e       	cpi	r24, 0xE8	; 232
    3908:	73 e0       	ldi	r23, 0x03	; 3
    390a:	97 07       	cpc	r25, r23
    390c:	18 f0       	brcs	.+6      	; 0x3914 <is_ok2b>
    390e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3910:	83 95       	inc	r24
    3912:	8a 8f       	std	Y+26, r24	; 0x1a

00003914 <is_ok2b>:
    3914:	d3 94       	inc	r13
    3916:	5d 2d       	mov	r21, r13
    3918:	5f 3f       	cpi	r21, 0xFF	; 255
    391a:	09 f0       	breq	.+2      	; 0x391e <ad_38ac>
    391c:	34 cf       	rjmp	.-408    	; 0x3786 <ad_3692>

0000391e <ad_38ac>:
    391e:	40 90 47 01 	lds	r4, 0x0147
    3922:	50 90 48 01 	lds	r5, 0x0148
    3926:	44 0c       	add	r4, r4
    3928:	55 1c       	adc	r5, r5
    392a:	92 01       	movw	r18, r4
    392c:	e4 e0       	ldi	r30, 0x04	; 4

0000392e <ad_3924>:
    392e:	24 0d       	add	r18, r4
    3930:	35 1d       	adc	r19, r5
    3932:	ea 95       	dec	r30
    3934:	e1 f7       	brne	.-8      	; 0x392e <ad_3924>
    3936:	29 01       	movw	r4, r18
    3938:	57 01       	movw	r10, r14
    393a:	68 01       	movw	r12, r16
    393c:	6e 80       	ldd	r6, Y+6	; 0x06
    393e:	7f 80       	ldd	r7, Y+7	; 0x07
    3940:	88 84       	ldd	r8, Y+8	; 0x08
    3942:	99 84       	ldd	r9, Y+9	; 0x09
    3944:	20 91 07 01 	lds	r18, 0x0107
    3948:	27 30       	cpi	r18, 0x07	; 7
    394a:	c1 f4       	brne	.+48     	; 0x397c <no_sub>
    394c:	6c 89       	ldd	r22, Y+20	; 0x14
    394e:	7d 89       	ldd	r23, Y+21	; 0x15
    3950:	8e 89       	ldd	r24, Y+22	; 0x16
    3952:	9f 89       	ldd	r25, Y+23	; 0x17
    3954:	9b 01       	movw	r18, r22
    3956:	ac 01       	movw	r20, r24
    3958:	6d 5e       	subi	r22, 0xED	; 237
    395a:	7f 4f       	sbci	r23, 0xFF	; 255
    395c:	8f 4f       	sbci	r24, 0xFF	; 255
    395e:	9f 4f       	sbci	r25, 0xFF	; 255
    3960:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
    3964:	9b 01       	movw	r18, r22
    3966:	ac 01       	movw	r20, r24
    3968:	66 e3       	ldi	r22, 0x36	; 54
    396a:	79 e2       	ldi	r23, 0x29	; 41
    396c:	86 e8       	ldi	r24, 0x86	; 134
    396e:	9a e1       	ldi	r25, 0x1A	; 26
    3970:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
    3974:	62 1a       	sub	r6, r18
    3976:	73 0a       	sbc	r7, r19
    3978:	84 0a       	sbc	r8, r20
    397a:	95 0a       	sbc	r9, r21

0000397c <no_sub>:
    397c:	a6 14       	cp	r10, r6
    397e:	b7 04       	cpc	r11, r7
    3980:	c8 04       	cpc	r12, r8
    3982:	d9 04       	cpc	r13, r9
    3984:	28 f4       	brcc	.+10     	; 0x3990 <ad_396c>
    3986:	6a 18       	sub	r6, r10
    3988:	7b 08       	sbc	r7, r11
    398a:	8c 08       	sbc	r8, r12
    398c:	9d 08       	sbc	r9, r13
    398e:	03 c0       	rjmp	.+6      	; 0x3996 <ad_3972>

00003990 <ad_396c>:
    3990:	66 24       	eor	r6, r6
    3992:	77 24       	eor	r7, r7
    3994:	43 01       	movw	r8, r6

00003996 <ad_3972>:
    3996:	b2 01       	movw	r22, r4
    3998:	80 e0       	ldi	r24, 0x00	; 0
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	93 01       	movw	r18, r6
    399e:	a4 01       	movw	r20, r8
    39a0:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
    39a4:	95 01       	movw	r18, r10
    39a6:	a6 01       	movw	r20, r12
    39a8:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
    39ac:	80 ed       	ldi	r24, 0xD0	; 208
    39ae:	91 e0       	ldi	r25, 0x01	; 1
    39b0:	79 81       	ldd	r23, Y+1	; 0x01
    39b2:	87 0f       	add	r24, r23
    39b4:	91 1d       	adc	r25, r1
    39b6:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__eerd_byte_m168>
    39ba:	68 2e       	mov	r6, r24
    39bc:	c9 01       	movw	r24, r18
    39be:	60 e1       	ldi	r22, 0x10	; 16
    39c0:	70 e0       	ldi	r23, 0x00	; 0
    39c2:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__udivmodhi4>
    39c6:	26 0f       	add	r18, r22
    39c8:	37 1f       	adc	r19, r23
    39ca:	c9 01       	movw	r24, r18
    39cc:	68 16       	cp	r6, r24
    39ce:	19 06       	cpc	r1, r25
    39d0:	18 f4       	brcc	.+6      	; 0x39d8 <esr_too_less>
    39d2:	86 19       	sub	r24, r6
    39d4:	91 09       	sbc	r25, r1
    39d6:	02 c0       	rjmp	.+4      	; 0x39dc <ad_exit>

000039d8 <esr_too_less>:
    39d8:	81 2d       	mov	r24, r1
    39da:	91 2d       	mov	r25, r1

000039dc <ad_exit>:
    39dc:	6e 96       	adiw	r28, 0x1e	; 30
    39de:	0f b6       	in	r0, 0x3f	; 63
    39e0:	f8 94       	cli
    39e2:	de bf       	out	0x3e, r29	; 62
    39e4:	0f be       	out	0x3f, r0	; 63
    39e6:	cd bf       	out	0x3d, r28	; 61
    39e8:	cf 91       	pop	r28
    39ea:	df 91       	pop	r29
    39ec:	1f 91       	pop	r17
    39ee:	0f 91       	pop	r16
    39f0:	ff 90       	pop	r15
    39f2:	ef 90       	pop	r14
    39f4:	df 90       	pop	r13
    39f6:	cf 90       	pop	r12
    39f8:	bf 90       	pop	r11
    39fa:	af 90       	pop	r10
    39fc:	9f 90       	pop	r9
    39fe:	8f 90       	pop	r8
    3a00:	7f 90       	pop	r7
    3a02:	6f 90       	pop	r6
    3a04:	5f 90       	pop	r5
    3a06:	4f 90       	pop	r4
    3a08:	3f 90       	pop	r3
    3a0a:	2f 90       	pop	r2
    3a0c:	08 95       	ret

00003a0e <GetVloss>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void GetVloss() {
    3a0e:	cf 92       	push	r12
    3a10:	df 92       	push	r13
    3a12:	ef 92       	push	r14
    3a14:	ff 92       	push	r15
    3a16:	0f 93       	push	r16
    3a18:	1f 93       	push	r17
    3a1a:	cf 93       	push	r28
    3a1c:	df 93       	push	r29
  } lval;
  uint8_t ii;
  uint8_t HiPinR_L;
  uint8_t LoADC;

  if (cap.v_loss > 0) return;		// Voltage loss is already known
    3a1e:	80 91 70 01 	lds	r24, 0x0170
    3a22:	90 91 71 01 	lds	r25, 0x0171
    3a26:	00 97       	sbiw	r24, 0x00	; 0
    3a28:	09 f0       	breq	.+2      	; 0x3a2c <GetVloss+0x1e>
    3a2a:	a2 c0       	rjmp	.+324    	; 0x3b70 <GetVloss+0x162>
  LoADC = pgm_read_byte(&PinADCtab[cap.ca]) | TXD_MSK;
    3a2c:	e0 91 72 01 	lds	r30, 0x0172
    3a30:	f0 e0       	ldi	r31, 0x00	; 0
    3a32:	e3 5f       	subi	r30, 0xF3	; 243
    3a34:	fe 4f       	sbci	r31, 0xFE	; 254
    3a36:	04 91       	lpm	r16, Z+
    3a38:	08 60       	ori	r16, 0x08	; 8
  HiPinR_L = pgm_read_byte(&PinRLtab[cap.cb]);	//R_L mask for HighPin R_L load
    3a3a:	e0 91 73 01 	lds	r30, 0x0173
    3a3e:	f0 e0       	ldi	r31, 0x00	; 0
    3a40:	e6 5f       	subi	r30, 0xF6	; 246
    3a42:	fe 4f       	sbci	r31, 0xFE	; 254
    3a44:	14 91       	lpm	r17, Z+

  EntladePins();			// discharge capacitor
    3a46:	0e 94 b2 01 	call	0x364	; 0x364 <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    3a4a:	88 e0       	ldi	r24, 0x08	; 8
    3a4c:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    3a4e:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    3a50:	07 b9       	out	0x07, r16	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    3a52:	14 b9       	out	0x04, r17	; 4
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
    3a54:	80 91 73 01 	lds	r24, 0x0173
    3a58:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
    3a5c:	ec 01       	movw	r28, r24
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
    3a5e:	00 91 75 01 	lds	r16, 0x0175
    3a62:	08 3f       	cpi	r16, 0xF8	; 248
    3a64:	0c f0       	brlt	.+2      	; 0x3a68 <GetVloss+0x5a>
    3a66:	84 c0       	rjmp	.+264    	; 0x3b70 <GetVloss+0x162>
  lval.dw = cap.cval_max;
    3a68:	20 91 66 01 	lds	r18, 0x0166
    3a6c:	30 91 67 01 	lds	r19, 0x0167
    3a70:	40 91 68 01 	lds	r20, 0x0168
    3a74:	50 91 69 01 	lds	r21, 0x0169
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    3a78:	04 5f       	subi	r16, 0xF4	; 244
     lval.dw = (lval.dw + 5) / 10;
    3a7a:	8a e0       	ldi	r24, 0x0A	; 10
    3a7c:	c8 2e       	mov	r12, r24
    3a7e:	d1 2c       	mov	r13, r1
    3a80:	e1 2c       	mov	r14, r1
    3a82:	f1 2c       	mov	r15, r1
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
  lval.dw = cap.cval_max;
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    3a84:	0b c0       	rjmp	.+22     	; 0x3a9c <GetVloss+0x8e>
     lval.dw = (lval.dw + 5) / 10;
    3a86:	ca 01       	movw	r24, r20
    3a88:	b9 01       	movw	r22, r18
    3a8a:	6b 5f       	subi	r22, 0xFB	; 251
    3a8c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a8e:	8f 4f       	sbci	r24, 0xFF	; 255
    3a90:	9f 4f       	sbci	r25, 0xFF	; 255
    3a92:	a7 01       	movw	r20, r14
    3a94:	96 01       	movw	r18, r12
    3a96:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
  lval.dw = cap.cval_max;
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    3a9a:	0f 5f       	subi	r16, 0xFF	; 255
    3a9c:	04 30       	cpi	r16, 0x04	; 4
    3a9e:	98 f3       	brcs	.-26     	; 0x3a86 <GetVloss+0x78>
    3aa0:	79 01       	movw	r14, r18
     lval.dw = (lval.dw + 5) / 10;
  }
//  if ((lval.dw == 0) || (lval.dw > 500)) {
  if ((lval.dw == 0) || (lval.dw > 5000)) {
    3aa2:	21 50       	subi	r18, 0x01	; 1
    3aa4:	30 40       	sbci	r19, 0x00	; 0
    3aa6:	40 40       	sbci	r20, 0x00	; 0
    3aa8:	50 40       	sbci	r21, 0x00	; 0
    3aaa:	28 38       	cpi	r18, 0x88	; 136
    3aac:	83 e1       	ldi	r24, 0x13	; 19
    3aae:	38 07       	cpc	r19, r24
    3ab0:	80 e0       	ldi	r24, 0x00	; 0
    3ab2:	48 07       	cpc	r20, r24
    3ab4:	80 e0       	ldi	r24, 0x00	; 0
    3ab6:	58 07       	cpc	r21, r24
    3ab8:	08 f0       	brcs	.+2      	; 0x3abc <GetVloss+0xae>
    3aba:	5a c0       	rjmp	.+180    	; 0x3b70 <GetVloss+0x162>
     /* capacity more than 50uF, Voltage loss is already measured  */
     return;
  }
  R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    3abc:	15 b9       	out	0x05, r17	; 5
  R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    3abe:	14 b9       	out	0x04, r17	; 4
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    3ac0:	00 e0       	ldi	r16, 0x00	; 0
    3ac2:	10 e0       	ldi	r17, 0x00	; 0
    3ac4:	04 c0       	rjmp	.+8      	; 0x3ace <GetVloss+0xc0>
//     wait50us();			// wait exactly 50us
     wait5us();			// wait exactly 5us
    3ac6:	0e 94 89 14 	call	0x2912	; 0x2912 <wait5us>
     /* capacity more than 50uF, Voltage loss is already measured  */
     return;
  }
  R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
  R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    3aca:	0e 5f       	subi	r16, 0xFE	; 254
    3acc:	1f 4f       	sbci	r17, 0xFF	; 255
    3ace:	67 01       	movw	r12, r14
    3ad0:	0e 15       	cp	r16, r14
    3ad2:	1f 05       	cpc	r17, r15
    3ad4:	c0 f3       	brcs	.-16     	; 0x3ac6 <GetVloss+0xb8>
//     wait50us();			// wait exactly 50us
     wait5us();			// wait exactly 5us
  }
  R_DDR = 0;				// switch back to input
    3ad6:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// no Pull up
    3ad8:	15 b8       	out	0x05, r1	; 5
 // wait10us();			//wait a little time
  wdt_reset();
    3ada:	a8 95       	wdr
  // read voltage without current
  ADCconfig.Samples = 5;		// set ADC to only 5 samples
    3adc:	85 e0       	ldi	r24, 0x05	; 5
    3ade:	80 93 3c 01 	sts	0x013C, r24
  adcv[2] = ReadADC(cap.cb);
    3ae2:	80 91 73 01 	lds	r24, 0x0173
    3ae6:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
  if (adcv[2] > adcv[0]) {
    3aea:	c8 17       	cp	r28, r24
    3aec:	d9 07       	cpc	r29, r25
    3aee:	20 f4       	brcc	.+8      	; 0x3af8 <GetVloss+0xea>
     adcv[2] -= adcv[0];		//difference to beginning voltage
    3af0:	8c 01       	movw	r16, r24
    3af2:	0c 1b       	sub	r16, r28
    3af4:	1d 0b       	sbc	r17, r29
    3af6:	02 c0       	rjmp	.+4      	; 0x3afc <GetVloss+0xee>
  } else {
     adcv[2] = 0;			// voltage is lower or same as beginning voltage
    3af8:	00 e0       	ldi	r16, 0x00	; 0
    3afa:	10 e0       	ldi	r17, 0x00	; 0
  }
  // wait 2x the time which was required for loading
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    3afc:	ee 24       	eor	r14, r14
    3afe:	ff 24       	eor	r15, r15
    3b00:	05 c0       	rjmp	.+10     	; 0x3b0c <GetVloss+0xfe>
//     wait50us();
     wait5us();
    3b02:	0e 94 89 14 	call	0x2912	; 0x2912 <wait5us>
     adcv[2] -= adcv[0];		//difference to beginning voltage
  } else {
     adcv[2] = 0;			// voltage is lower or same as beginning voltage
  }
  // wait 2x the time which was required for loading
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    3b06:	08 94       	sec
    3b08:	e1 1c       	adc	r14, r1
    3b0a:	f1 1c       	adc	r15, r1
    3b0c:	ec 14       	cp	r14, r12
    3b0e:	fd 04       	cpc	r15, r13
    3b10:	c0 f3       	brcs	.-16     	; 0x3b02 <GetVloss+0xf4>
//     wait50us();
     wait5us();
  }
  adcv[3] = ReadADC(cap.cb);	// read voltage again, is discharged only a little bit ?
    3b12:	80 91 73 01 	lds	r24, 0x0173
    3b16:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
  ADCconfig.Samples = ANZ_MESS;		// set ADC back to configured No. of samples
    3b1a:	29 e1       	ldi	r18, 0x19	; 25
    3b1c:	20 93 3c 01 	sts	0x013C, r18
  wdt_reset();
    3b20:	a8 95       	wdr
  if (adcv[3] > adcv[0]) {
    3b22:	c8 17       	cp	r28, r24
    3b24:	d9 07       	cpc	r29, r25
    3b26:	18 f4       	brcc	.+6      	; 0x3b2e <GetVloss+0x120>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    3b28:	8c 1b       	sub	r24, r28
    3b2a:	9d 0b       	sbc	r25, r29
    3b2c:	02 c0       	rjmp	.+4      	; 0x3b32 <GetVloss+0x124>
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    3b2e:	80 e0       	ldi	r24, 0x00	; 0
    3b30:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
    3b32:	80 17       	cp	r24, r16
    3b34:	91 07       	cpc	r25, r17
    3b36:	a8 f4       	brcc	.+42     	; 0x3b62 <GetVloss+0x154>
     // build difference to load voltage
     adcv[1] = adcv[2] - adcv[3];	// lost voltage during load time wait
    3b38:	b8 01       	movw	r22, r16
    3b3a:	68 1b       	sub	r22, r24
    3b3c:	79 0b       	sbc	r23, r25
  } else {
     adcv[1] = 0;			// no lost voltage
  }
  // compute voltage drop as part from loaded voltage
  if (adcv[1] > 0) {
    3b3e:	89 f0       	breq	.+34     	; 0x3b62 <GetVloss+0x154>
     // there is any voltage drop (adcv[1]) !
     // adcv[2] is the loaded voltage.
     cap.v_loss = (unsigned long)(adcv[1] * 500UL) / adcv[2];
    3b40:	80 e0       	ldi	r24, 0x00	; 0
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	24 ef       	ldi	r18, 0xF4	; 244
    3b46:	31 e0       	ldi	r19, 0x01	; 1
    3b48:	40 e0       	ldi	r20, 0x00	; 0
    3b4a:	50 e0       	ldi	r21, 0x00	; 0
    3b4c:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
    3b50:	98 01       	movw	r18, r16
    3b52:	40 e0       	ldi	r20, 0x00	; 0
    3b54:	50 e0       	ldi	r21, 0x00	; 0
    3b56:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
    3b5a:	30 93 71 01 	sts	0x0171, r19
    3b5e:	20 93 70 01 	sts	0x0170, r18
  lcd_line4();
  DisplayValue(lval.w[0],0,'x',4);
#endif

  // discharge capacitor again
  EntladePins();		// discharge capacitors
    3b62:	0e 94 b2 01 	call	0x364	; 0x364 <EntladePins>
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    3b66:	88 e0       	ldi	r24, 0x08	; 8
    3b68:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    3b6a:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    3b6c:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    3b6e:	15 b8       	out	0x05, r1	; 5
#endif
  return;
 } // end GetVdrop()
    3b70:	df 91       	pop	r29
    3b72:	cf 91       	pop	r28
    3b74:	1f 91       	pop	r17
    3b76:	0f 91       	pop	r16
    3b78:	ff 90       	pop	r15
    3b7a:	ef 90       	pop	r14
    3b7c:	df 90       	pop	r13
    3b7e:	cf 90       	pop	r12
    3b80:	08 95       	ret

00003b82 <Calibrate_UR>:
#include "Transistortester.h"
void Calibrate_UR(void) {
    3b82:	8f 92       	push	r8
    3b84:	9f 92       	push	r9
    3b86:	af 92       	push	r10
    3b88:	bf 92       	push	r11
    3b8a:	cf 92       	push	r12
    3b8c:	df 92       	push	r13
    3b8e:	ef 92       	push	r14
    3b90:	ff 92       	push	r15
    3b92:	0f 93       	push	r16
    3b94:	1f 93       	push	r17
    3b96:	cf 93       	push	r28
    3b98:	df 93       	push	r29
  uint16_t u680;	// 3 * (Voltage at 680 Ohm)
 #endif


                                        //############################################
  ADCconfig.U_AVCC = U_VCC;     // set initial VCC Voltage
    3b9a:	88 e8       	ldi	r24, 0x88	; 136
    3b9c:	93 e1       	ldi	r25, 0x13	; 19
    3b9e:	90 93 41 01 	sts	0x0141, r25
    3ba2:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    3ba6:	8e eb       	ldi	r24, 0xBE	; 190
    3ba8:	80 93 3c 01 	sts	0x013C, r24
#if FLASHEND > 0x1fff
  ADC_PORT = TXD_VAL;                   // switch to 0V
    3bac:	08 e0       	ldi	r16, 0x08	; 8
    3bae:	08 b9       	out	0x08, r16	; 8
  ADC_DDR = (1<<TPREF) | TXD_MSK;       // switch pin with 2.5V reference to GND
    3bb0:	88 e1       	ldi	r24, 0x18	; 24
    3bb2:	87 b9       	out	0x07, r24	; 7
  wait1ms();
    3bb4:	0e 94 7e 14 	call	0x28fc	; 0x28fc <wait1ms>
  ADC_DDR =  TXD_MSK;   // switch pin with reference back to input
    3bb8:	07 b9       	out	0x07, r16	; 7
  trans.uBE[1] = W5msReadADC(TPREF); // read voltage of 2.5V precision reference
    3bba:	84 e0       	ldi	r24, 0x04	; 4
    3bbc:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
    3bc0:	ec 01       	movw	r28, r24
    3bc2:	90 93 5a 01 	sts	0x015A, r25
    3bc6:	80 93 59 01 	sts	0x0159, r24
  if ((trans.uBE[1] > 2250) && (trans.uBE[1] < 2750)) {
    3bca:	8b 5c       	subi	r24, 0xCB	; 203
    3bcc:	98 40       	sbci	r25, 0x08	; 8
    3bce:	21 e0       	ldi	r18, 0x01	; 1
    3bd0:	83 3f       	cpi	r24, 0xF3	; 243
    3bd2:	92 07       	cpc	r25, r18
    3bd4:	c0 f4       	brcc	.+48     	; 0x3c06 <Calibrate_UR+0x84>
     // precision voltage reference connected, update U_AVCC
     WithReference = 1;
    3bd6:	81 e0       	ldi	r24, 0x01	; 1
    3bd8:	80 93 49 01 	sts	0x0149, r24
     ADCconfig.U_AVCC = (unsigned long)((unsigned long)ADCconfig.U_AVCC * 2495) / trans.uBE[1];
    3bdc:	60 91 40 01 	lds	r22, 0x0140
    3be0:	70 91 41 01 	lds	r23, 0x0141
    3be4:	80 e0       	ldi	r24, 0x00	; 0
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	2f eb       	ldi	r18, 0xBF	; 191
    3bea:	39 e0       	ldi	r19, 0x09	; 9
    3bec:	40 e0       	ldi	r20, 0x00	; 0
    3bee:	50 e0       	ldi	r21, 0x00	; 0
    3bf0:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
    3bf4:	9e 01       	movw	r18, r28
    3bf6:	40 e0       	ldi	r20, 0x00	; 0
    3bf8:	50 e0       	ldi	r21, 0x00	; 0
    3bfa:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
    3bfe:	30 93 41 01 	sts	0x0141, r19
    3c02:	20 93 40 01 	sts	0x0140, r18
  }
#endif
 #ifdef WITH_AUTO_REF
  (void) ReadADC(MUX_INT_REF);	// read reference voltage 
    3c06:	8e e0       	ldi	r24, 0x0E	; 14
    3c08:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <ReadADC>
  ref_mv = W5msReadADC(MUX_INT_REF);	// read reference voltage 
    3c0c:	8e e0       	ldi	r24, 0x0E	; 14
    3c0e:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
    3c12:	90 93 45 01 	sts	0x0145, r25
    3c16:	80 93 44 01 	sts	0x0144, r24
  RefVoltage();		//compute RHmultip = f(reference voltage)
    3c1a:	0e 94 4d 02 	call	0x49a	; 0x49a <RefVoltage>
 #else
  ref_mv = DEFAULT_BAND_GAP;    // set to default Reference Voltage
 #endif
  ADCconfig.U_Bandgap = ADC_internal_reference; // set internal reference voltage for ADC
    3c1e:	8f eb       	ldi	r24, 0xBF	; 191
    3c20:	91 e0       	ldi	r25, 0x01	; 1
    3c22:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <__eerd_byte_m168>
    3c26:	99 27       	eor	r25, r25
    3c28:	87 fd       	sbrc	r24, 7
    3c2a:	90 95       	com	r25
    3c2c:	20 91 44 01 	lds	r18, 0x0144
    3c30:	30 91 45 01 	lds	r19, 0x0145
    3c34:	82 0f       	add	r24, r18
    3c36:	93 1f       	adc	r25, r19
    3c38:	90 93 3f 01 	sts	0x013F, r25
    3c3c:	80 93 3e 01 	sts	0x013E, r24
                                        //############################################

 #ifdef AUTO_CAL
  // measurement of internal resistance of the ADC port outputs switched to GND
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    3c40:	79 e0       	ldi	r23, 0x09	; 9
    3c42:	d7 2e       	mov	r13, r23
    3c44:	d7 b8       	out	0x07, r13	; 7
  R_PORT = 1<<(TP1*2);		//R_L-PORT 1 to VCC
    3c46:	aa 24       	eor	r10, r10
    3c48:	a3 94       	inc	r10
    3c4a:	a5 b8       	out	0x05, r10	; 5
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to VCC
    3c4c:	a4 b8       	out	0x04, r10	; 4
  sum_rm = W5msReadADC(TP1);
    3c4e:	80 e0       	ldi	r24, 0x00	; 0
    3c50:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
    3c54:	8c 01       	movw	r16, r24

  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin 2 to output 0V
    3c56:	6a e0       	ldi	r22, 0x0A	; 10
    3c58:	86 2e       	mov	r8, r22
    3c5a:	87 b8       	out	0x07, r8	; 7
  R_PORT =  1<<(TP2*2);		//R_L-PORT 2 to VCC
    3c5c:	54 e0       	ldi	r21, 0x04	; 4
    3c5e:	c5 2e       	mov	r12, r21
    3c60:	c5 b8       	out	0x05, r12	; 5
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to VCC
    3c62:	c4 b8       	out	0x04, r12	; 4
  sum_rm += W5msReadADC(TP2);
    3c64:	81 e0       	ldi	r24, 0x01	; 1
    3c66:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
    3c6a:	08 0f       	add	r16, r24
    3c6c:	19 1f       	adc	r17, r25

  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin 3 to output 0V
    3c6e:	4c e0       	ldi	r20, 0x0C	; 12
    3c70:	f4 2e       	mov	r15, r20
    3c72:	f7 b8       	out	0x07, r15	; 7
  R_PORT =  1<<(TP3*2);		//R_L-PORT 3 to VCC
    3c74:	30 e1       	ldi	r19, 0x10	; 16
    3c76:	e3 2e       	mov	r14, r19
    3c78:	e5 b8       	out	0x05, r14	; 5
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to VCC
    3c7a:	e4 b8       	out	0x04, r14	; 4
  sum_rm += W5msReadADC(TP3);	//add all three values
    3c7c:	82 e0       	ldi	r24, 0x02	; 2
    3c7e:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
    3c82:	08 0f       	add	r16, r24
    3c84:	19 1f       	adc	r17, r25

  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
    3c86:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
    3c88:	d8 b8       	out	0x08, r13	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    3c8a:	d7 b8       	out	0x07, r13	; 7
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
    3c8c:	a4 b8       	out	0x04, r10	; 4
  sum_rp = ADCconfig.U_AVCC - W5msReadADC(TP1);
    3c8e:	c0 91 40 01 	lds	r28, 0x0140
    3c92:	d0 91 41 01 	lds	r29, 0x0141
    3c96:	80 e0       	ldi	r24, 0x00	; 0
    3c98:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
    3c9c:	5c 01       	movw	r10, r24
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
    3c9e:	88 b8       	out	0x08, r8	; 8
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
    3ca0:	87 b8       	out	0x07, r8	; 7
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
    3ca2:	c4 b8       	out	0x04, r12	; 4
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP2);
    3ca4:	c0 90 40 01 	lds	r12, 0x0140
    3ca8:	d0 90 41 01 	lds	r13, 0x0141
    3cac:	81 e0       	ldi	r24, 0x01	; 1
    3cae:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
    3cb2:	4c 01       	movw	r8, r24

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
    3cb4:	f8 b8       	out	0x08, r15	; 8
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
    3cb6:	f7 b8       	out	0x07, r15	; 7
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
    3cb8:	e4 b8       	out	0x04, r14	; 4
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP3);
    3cba:	e0 90 40 01 	lds	r14, 0x0140
    3cbe:	f0 90 41 01 	lds	r15, 0x0141
    3cc2:	82 e0       	ldi	r24, 0x02	; 2
    3cc4:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <W5msReadADC>
  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
  sum_rp = ADCconfig.U_AVCC - W5msReadADC(TP1);
    3cc8:	cc 0d       	add	r28, r12
    3cca:	dd 1d       	adc	r29, r13
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP2);
    3ccc:	ce 0d       	add	r28, r14
    3cce:	df 1d       	adc	r29, r15
    3cd0:	ca 19       	sub	r28, r10
    3cd2:	db 09       	sbc	r29, r11

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP3);
    3cd4:	c8 19       	sub	r28, r8
    3cd6:	d9 09       	sbc	r29, r9
    3cd8:	c8 1b       	sub	r28, r24
    3cda:	d9 0b       	sbc	r29, r25

  u680 = ((ADCconfig.U_AVCC * 3) - sum_rm - sum_rp);	//three times the voltage at the 680 Ohm
    3cdc:	80 91 40 01 	lds	r24, 0x0140
    3ce0:	90 91 41 01 	lds	r25, 0x0141
    3ce4:	6c 01       	movw	r12, r24
    3ce6:	cc 0c       	add	r12, r12
    3ce8:	dd 1c       	adc	r13, r13
    3cea:	c8 0e       	add	r12, r24
    3cec:	d9 1e       	adc	r13, r25
    3cee:	c0 1a       	sub	r12, r16
    3cf0:	d1 0a       	sbc	r13, r17
    3cf2:	cc 1a       	sub	r12, r28
    3cf4:	dd 0a       	sbc	r13, r29
  pin_rmi = (unsigned long)((unsigned long)sum_rm * (unsigned long)R_L_VAL) / (unsigned long)u680;
    3cf6:	ee 24       	eor	r14, r14
    3cf8:	ff 24       	eor	r15, r15
    3cfa:	b8 01       	movw	r22, r16
    3cfc:	80 e0       	ldi	r24, 0x00	; 0
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	20 e9       	ldi	r18, 0x90	; 144
    3d02:	3a e1       	ldi	r19, 0x1A	; 26
    3d04:	40 e0       	ldi	r20, 0x00	; 0
    3d06:	50 e0       	ldi	r21, 0x00	; 0
    3d08:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
    3d0c:	a7 01       	movw	r20, r14
    3d0e:	96 01       	movw	r18, r12
    3d10:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
    3d14:	89 01       	movw	r16, r18
    3d16:	30 93 48 01 	sts	0x0148, r19
    3d1a:	20 93 47 01 	sts	0x0147, r18
//  adcmv[2] = pin_rm;	// for last output in row 2
  pin_rpl = (unsigned long)((unsigned long)sum_rp * (unsigned long)R_L_VAL) / (unsigned long)u680;
    3d1e:	be 01       	movw	r22, r28
    3d20:	80 e0       	ldi	r24, 0x00	; 0
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	20 e9       	ldi	r18, 0x90	; 144
    3d26:	3a e1       	ldi	r19, 0x1A	; 26
    3d28:	40 e0       	ldi	r20, 0x00	; 0
    3d2a:	50 e0       	ldi	r21, 0x00	; 0
    3d2c:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__mulsi3>
    3d30:	a7 01       	movw	r20, r14
    3d32:	96 01       	movw	r18, r12
    3d34:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <__udivmodsi4>
    3d38:	c9 01       	movw	r24, r18
    3d3a:	30 93 43 01 	sts	0x0143, r19
    3d3e:	20 93 42 01 	sts	0x0142, r18
  resis680pl = pin_rpl + R_L_VAL;
    3d42:	80 57       	subi	r24, 0x70	; 112
    3d44:	95 4e       	sbci	r25, 0xE5	; 229
    3d46:	90 93 09 01 	sts	0x0109, r25
    3d4a:	80 93 08 01 	sts	0x0108, r24
  resis680mi = pin_rmi + R_L_VAL;
    3d4e:	00 57       	subi	r16, 0x70	; 112
    3d50:	15 4e       	sbci	r17, 0xE5	; 229
    3d52:	10 93 03 01 	sts	0x0103, r17
    3d56:	00 93 02 01 	sts	0x0102, r16
#endif

  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    3d5a:	89 e1       	ldi	r24, 0x19	; 25
    3d5c:	80 93 3c 01 	sts	0x013C, r24
 } 
    3d60:	df 91       	pop	r29
    3d62:	cf 91       	pop	r28
    3d64:	1f 91       	pop	r17
    3d66:	0f 91       	pop	r16
    3d68:	ff 90       	pop	r15
    3d6a:	ef 90       	pop	r14
    3d6c:	df 90       	pop	r13
    3d6e:	cf 90       	pop	r12
    3d70:	bf 90       	pop	r11
    3d72:	af 90       	pop	r10
    3d74:	9f 90       	pop	r9
    3d76:	8f 90       	pop	r8
    3d78:	08 95       	ret

00003d7a <__mulsi3>:
    3d7a:	62 9f       	mul	r22, r18
    3d7c:	d0 01       	movw	r26, r0
    3d7e:	73 9f       	mul	r23, r19
    3d80:	f0 01       	movw	r30, r0
    3d82:	82 9f       	mul	r24, r18
    3d84:	e0 0d       	add	r30, r0
    3d86:	f1 1d       	adc	r31, r1
    3d88:	64 9f       	mul	r22, r20
    3d8a:	e0 0d       	add	r30, r0
    3d8c:	f1 1d       	adc	r31, r1
    3d8e:	92 9f       	mul	r25, r18
    3d90:	f0 0d       	add	r31, r0
    3d92:	83 9f       	mul	r24, r19
    3d94:	f0 0d       	add	r31, r0
    3d96:	74 9f       	mul	r23, r20
    3d98:	f0 0d       	add	r31, r0
    3d9a:	65 9f       	mul	r22, r21
    3d9c:	f0 0d       	add	r31, r0
    3d9e:	99 27       	eor	r25, r25
    3da0:	72 9f       	mul	r23, r18
    3da2:	b0 0d       	add	r27, r0
    3da4:	e1 1d       	adc	r30, r1
    3da6:	f9 1f       	adc	r31, r25
    3da8:	63 9f       	mul	r22, r19
    3daa:	b0 0d       	add	r27, r0
    3dac:	e1 1d       	adc	r30, r1
    3dae:	f9 1f       	adc	r31, r25
    3db0:	bd 01       	movw	r22, r26
    3db2:	cf 01       	movw	r24, r30
    3db4:	11 24       	eor	r1, r1
    3db6:	08 95       	ret

00003db8 <__udivmodqi4>:
    3db8:	99 1b       	sub	r25, r25
    3dba:	79 e0       	ldi	r23, 0x09	; 9
    3dbc:	04 c0       	rjmp	.+8      	; 0x3dc6 <__udivmodqi4_ep>

00003dbe <__udivmodqi4_loop>:
    3dbe:	99 1f       	adc	r25, r25
    3dc0:	96 17       	cp	r25, r22
    3dc2:	08 f0       	brcs	.+2      	; 0x3dc6 <__udivmodqi4_ep>
    3dc4:	96 1b       	sub	r25, r22

00003dc6 <__udivmodqi4_ep>:
    3dc6:	88 1f       	adc	r24, r24
    3dc8:	7a 95       	dec	r23
    3dca:	c9 f7       	brne	.-14     	; 0x3dbe <__udivmodqi4_loop>
    3dcc:	80 95       	com	r24
    3dce:	08 95       	ret

00003dd0 <__udivmodhi4>:
    3dd0:	aa 1b       	sub	r26, r26
    3dd2:	bb 1b       	sub	r27, r27
    3dd4:	51 e1       	ldi	r21, 0x11	; 17
    3dd6:	07 c0       	rjmp	.+14     	; 0x3de6 <__udivmodhi4_ep>

00003dd8 <__udivmodhi4_loop>:
    3dd8:	aa 1f       	adc	r26, r26
    3dda:	bb 1f       	adc	r27, r27
    3ddc:	a6 17       	cp	r26, r22
    3dde:	b7 07       	cpc	r27, r23
    3de0:	10 f0       	brcs	.+4      	; 0x3de6 <__udivmodhi4_ep>
    3de2:	a6 1b       	sub	r26, r22
    3de4:	b7 0b       	sbc	r27, r23

00003de6 <__udivmodhi4_ep>:
    3de6:	88 1f       	adc	r24, r24
    3de8:	99 1f       	adc	r25, r25
    3dea:	5a 95       	dec	r21
    3dec:	a9 f7       	brne	.-22     	; 0x3dd8 <__udivmodhi4_loop>
    3dee:	80 95       	com	r24
    3df0:	90 95       	com	r25
    3df2:	bc 01       	movw	r22, r24
    3df4:	cd 01       	movw	r24, r26
    3df6:	08 95       	ret

00003df8 <__udivmodsi4>:
    3df8:	a1 e2       	ldi	r26, 0x21	; 33
    3dfa:	1a 2e       	mov	r1, r26
    3dfc:	aa 1b       	sub	r26, r26
    3dfe:	bb 1b       	sub	r27, r27
    3e00:	fd 01       	movw	r30, r26
    3e02:	0d c0       	rjmp	.+26     	; 0x3e1e <__udivmodsi4_ep>

00003e04 <__udivmodsi4_loop>:
    3e04:	aa 1f       	adc	r26, r26
    3e06:	bb 1f       	adc	r27, r27
    3e08:	ee 1f       	adc	r30, r30
    3e0a:	ff 1f       	adc	r31, r31
    3e0c:	a2 17       	cp	r26, r18
    3e0e:	b3 07       	cpc	r27, r19
    3e10:	e4 07       	cpc	r30, r20
    3e12:	f5 07       	cpc	r31, r21
    3e14:	20 f0       	brcs	.+8      	; 0x3e1e <__udivmodsi4_ep>
    3e16:	a2 1b       	sub	r26, r18
    3e18:	b3 0b       	sbc	r27, r19
    3e1a:	e4 0b       	sbc	r30, r20
    3e1c:	f5 0b       	sbc	r31, r21

00003e1e <__udivmodsi4_ep>:
    3e1e:	66 1f       	adc	r22, r22
    3e20:	77 1f       	adc	r23, r23
    3e22:	88 1f       	adc	r24, r24
    3e24:	99 1f       	adc	r25, r25
    3e26:	1a 94       	dec	r1
    3e28:	69 f7       	brne	.-38     	; 0x3e04 <__udivmodsi4_loop>
    3e2a:	60 95       	com	r22
    3e2c:	70 95       	com	r23
    3e2e:	80 95       	com	r24
    3e30:	90 95       	com	r25
    3e32:	9b 01       	movw	r18, r22
    3e34:	ac 01       	movw	r20, r24
    3e36:	bd 01       	movw	r22, r26
    3e38:	cf 01       	movw	r24, r30
    3e3a:	08 95       	ret

00003e3c <__divmodsi4>:
    3e3c:	97 fb       	bst	r25, 7
    3e3e:	09 2e       	mov	r0, r25
    3e40:	05 26       	eor	r0, r21
    3e42:	0e d0       	rcall	.+28     	; 0x3e60 <__divmodsi4_neg1>
    3e44:	57 fd       	sbrc	r21, 7
    3e46:	04 d0       	rcall	.+8      	; 0x3e50 <__divmodsi4_neg2>
    3e48:	d7 df       	rcall	.-82     	; 0x3df8 <__udivmodsi4>
    3e4a:	0a d0       	rcall	.+20     	; 0x3e60 <__divmodsi4_neg1>
    3e4c:	00 1c       	adc	r0, r0
    3e4e:	38 f4       	brcc	.+14     	; 0x3e5e <__divmodsi4_exit>

00003e50 <__divmodsi4_neg2>:
    3e50:	50 95       	com	r21
    3e52:	40 95       	com	r20
    3e54:	30 95       	com	r19
    3e56:	21 95       	neg	r18
    3e58:	3f 4f       	sbci	r19, 0xFF	; 255
    3e5a:	4f 4f       	sbci	r20, 0xFF	; 255
    3e5c:	5f 4f       	sbci	r21, 0xFF	; 255

00003e5e <__divmodsi4_exit>:
    3e5e:	08 95       	ret

00003e60 <__divmodsi4_neg1>:
    3e60:	f6 f7       	brtc	.-4      	; 0x3e5e <__divmodsi4_exit>
    3e62:	90 95       	com	r25
    3e64:	80 95       	com	r24
    3e66:	70 95       	com	r23
    3e68:	61 95       	neg	r22
    3e6a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e6c:	8f 4f       	sbci	r24, 0xFF	; 255
    3e6e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e70:	08 95       	ret

00003e72 <itoa>:
    3e72:	fb 01       	movw	r30, r22
    3e74:	9f 01       	movw	r18, r30
    3e76:	e8 94       	clt
    3e78:	42 30       	cpi	r20, 0x02	; 2
    3e7a:	c4 f0       	brlt	.+48     	; 0x3eac <itoa+0x3a>
    3e7c:	45 32       	cpi	r20, 0x25	; 37
    3e7e:	b4 f4       	brge	.+44     	; 0x3eac <itoa+0x3a>
    3e80:	4a 30       	cpi	r20, 0x0A	; 10
    3e82:	29 f4       	brne	.+10     	; 0x3e8e <itoa+0x1c>
    3e84:	97 fb       	bst	r25, 7
    3e86:	1e f4       	brtc	.+6      	; 0x3e8e <itoa+0x1c>
    3e88:	90 95       	com	r25
    3e8a:	81 95       	neg	r24
    3e8c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e8e:	64 2f       	mov	r22, r20
    3e90:	77 27       	eor	r23, r23
    3e92:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__udivmodhi4>
    3e96:	80 5d       	subi	r24, 0xD0	; 208
    3e98:	8a 33       	cpi	r24, 0x3A	; 58
    3e9a:	0c f0       	brlt	.+2      	; 0x3e9e <itoa+0x2c>
    3e9c:	89 5d       	subi	r24, 0xD9	; 217
    3e9e:	81 93       	st	Z+, r24
    3ea0:	cb 01       	movw	r24, r22
    3ea2:	00 97       	sbiw	r24, 0x00	; 0
    3ea4:	a1 f7       	brne	.-24     	; 0x3e8e <itoa+0x1c>
    3ea6:	16 f4       	brtc	.+4      	; 0x3eac <itoa+0x3a>
    3ea8:	5d e2       	ldi	r21, 0x2D	; 45
    3eaa:	51 93       	st	Z+, r21
    3eac:	10 82       	st	Z, r1
    3eae:	c9 01       	movw	r24, r18
    3eb0:	0c 94 91 1f 	jmp	0x3f22	; 0x3f22 <strrev>

00003eb4 <utoa>:
    3eb4:	fb 01       	movw	r30, r22
    3eb6:	9f 01       	movw	r18, r30
    3eb8:	42 30       	cpi	r20, 0x02	; 2
    3eba:	74 f0       	brlt	.+28     	; 0x3ed8 <utoa+0x24>
    3ebc:	45 32       	cpi	r20, 0x25	; 37
    3ebe:	64 f4       	brge	.+24     	; 0x3ed8 <utoa+0x24>
    3ec0:	64 2f       	mov	r22, r20
    3ec2:	77 27       	eor	r23, r23
    3ec4:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__udivmodhi4>
    3ec8:	80 5d       	subi	r24, 0xD0	; 208
    3eca:	8a 33       	cpi	r24, 0x3A	; 58
    3ecc:	0c f0       	brlt	.+2      	; 0x3ed0 <utoa+0x1c>
    3ece:	89 5d       	subi	r24, 0xD9	; 217
    3ed0:	81 93       	st	Z+, r24
    3ed2:	cb 01       	movw	r24, r22
    3ed4:	00 97       	sbiw	r24, 0x00	; 0
    3ed6:	a1 f7       	brne	.-24     	; 0x3ec0 <utoa+0xc>
    3ed8:	10 82       	st	Z, r1
    3eda:	c9 01       	movw	r24, r18
    3edc:	0c 94 91 1f 	jmp	0x3f22	; 0x3f22 <strrev>

00003ee0 <__eerd_byte_m168>:
    3ee0:	f9 99       	sbic	0x1f, 1	; 31
    3ee2:	fe cf       	rjmp	.-4      	; 0x3ee0 <__eerd_byte_m168>
    3ee4:	92 bd       	out	0x22, r25	; 34
    3ee6:	81 bd       	out	0x21, r24	; 33
    3ee8:	f8 9a       	sbi	0x1f, 0	; 31
    3eea:	99 27       	eor	r25, r25
    3eec:	80 b5       	in	r24, 0x20	; 32
    3eee:	08 95       	ret

00003ef0 <__eerd_word_m168>:
    3ef0:	a8 e1       	ldi	r26, 0x18	; 24
    3ef2:	b0 e0       	ldi	r27, 0x00	; 0
    3ef4:	42 e0       	ldi	r20, 0x02	; 2
    3ef6:	50 e0       	ldi	r21, 0x00	; 0
    3ef8:	0c 94 a3 1f 	jmp	0x3f46	; 0x3f46 <__eerd_blraw_m168>

00003efc <__eewr_byte_m168>:
    3efc:	26 2f       	mov	r18, r22

00003efe <__eewr_r18_m168>:
    3efe:	f9 99       	sbic	0x1f, 1	; 31
    3f00:	fe cf       	rjmp	.-4      	; 0x3efe <__eewr_r18_m168>
    3f02:	1f ba       	out	0x1f, r1	; 31
    3f04:	92 bd       	out	0x22, r25	; 34
    3f06:	81 bd       	out	0x21, r24	; 33
    3f08:	20 bd       	out	0x20, r18	; 32
    3f0a:	0f b6       	in	r0, 0x3f	; 63
    3f0c:	f8 94       	cli
    3f0e:	fa 9a       	sbi	0x1f, 2	; 31
    3f10:	f9 9a       	sbi	0x1f, 1	; 31
    3f12:	0f be       	out	0x3f, r0	; 63
    3f14:	01 96       	adiw	r24, 0x01	; 1
    3f16:	08 95       	ret

00003f18 <__eewr_word_m168>:
    3f18:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <__eewr_byte_m168>
    3f1c:	27 2f       	mov	r18, r23
    3f1e:	0c 94 7f 1f 	jmp	0x3efe	; 0x3efe <__eewr_r18_m168>

00003f22 <strrev>:
    3f22:	dc 01       	movw	r26, r24
    3f24:	fc 01       	movw	r30, r24
    3f26:	67 2f       	mov	r22, r23
    3f28:	71 91       	ld	r23, Z+
    3f2a:	77 23       	and	r23, r23
    3f2c:	e1 f7       	brne	.-8      	; 0x3f26 <strrev+0x4>
    3f2e:	32 97       	sbiw	r30, 0x02	; 2
    3f30:	04 c0       	rjmp	.+8      	; 0x3f3a <strrev+0x18>
    3f32:	7c 91       	ld	r23, X
    3f34:	6d 93       	st	X+, r22
    3f36:	70 83       	st	Z, r23
    3f38:	62 91       	ld	r22, -Z
    3f3a:	ae 17       	cp	r26, r30
    3f3c:	bf 07       	cpc	r27, r31
    3f3e:	c8 f3       	brcs	.-14     	; 0x3f32 <strrev+0x10>
    3f40:	08 95       	ret

00003f42 <__eerd_block_m168>:
    3f42:	dc 01       	movw	r26, r24
    3f44:	cb 01       	movw	r24, r22

00003f46 <__eerd_blraw_m168>:
    3f46:	fc 01       	movw	r30, r24
    3f48:	f9 99       	sbic	0x1f, 1	; 31
    3f4a:	fe cf       	rjmp	.-4      	; 0x3f48 <__eerd_blraw_m168+0x2>
    3f4c:	06 c0       	rjmp	.+12     	; 0x3f5a <__eerd_blraw_m168+0x14>
    3f4e:	f2 bd       	out	0x22, r31	; 34
    3f50:	e1 bd       	out	0x21, r30	; 33
    3f52:	f8 9a       	sbi	0x1f, 0	; 31
    3f54:	31 96       	adiw	r30, 0x01	; 1
    3f56:	00 b4       	in	r0, 0x20	; 32
    3f58:	0d 92       	st	X+, r0
    3f5a:	41 50       	subi	r20, 0x01	; 1
    3f5c:	50 40       	sbci	r21, 0x00	; 0
    3f5e:	b8 f7       	brcc	.-18     	; 0x3f4e <__eerd_blraw_m168+0x8>
    3f60:	08 95       	ret

00003f62 <_exit>:
    3f62:	f8 94       	cli

00003f64 <__stop_program>:
    3f64:	ff cf       	rjmp	.-2      	; 0x3f64 <__stop_program>
