
TransistorTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00003ddc  00003e90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003ddc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  00800102  00800102  00003e92  2**0
                  ALLOC
  3 .eeprom       000001aa  00810000  00810000  00003e92  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         00000dbc  00000000  00000000  0000403c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001d2  00000000  00000000  00004df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000000c0  00000000  00000000  00004fca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000759  00000000  00000000  0000508a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002dc8  00000000  00000000  000057e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000008b3  00000000  00000000  000085ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000032ef  00000000  00000000  00008e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000002d0  00000000  00000000  0000c150  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000097c  00000000  00000000  0000c420  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001a22  00000000  00000000  0000cd9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 0000021f  00000000  00000000  0000e7be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 83 00 	jmp	0x106	; 0x106 <__ctors_end>
       4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
       8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
       c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      10:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      14:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      18:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      1c:	0c 94 ab 01 	jmp	0x356	; 0x356 <__vector_7>
      20:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      24:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      28:	0c 94 33 17 	jmp	0x2e66	; 0x2e66 <__vector_10>
      2c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      30:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      34:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <__vector_13>
      38:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      3c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      40:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      44:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      48:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      4c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      50:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      54:	0c 94 ac 01 	jmp	0x358	; 0x358 <__vector_21>
      58:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      5c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      60:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      64:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>

00000068 <LogTab>:
      68:	00 00 14 00 29 00 3e 00 53 00 69 00 80 00 97 00     ....).>.S.i.....
      78:	ae 00 c6 00 df 00 f8 00 12 01 2d 01 49 01 65 01     ..........-.I.e.
      88:	82 01 a0 01 be 01 de 01 ff 01 21 02 44 02 68 02     ..........!.D.h.
      98:	8e 02 b5 02 de 02 09 03 35 03 64 03 94 03 c8 03     ........5.d.....
      a8:	fe 03 37 04 73 04 b4 04 f9 04 43 05 93 05 ea 05     ..7.s.....C.....
      b8:	49 06 b3 06 29 07 ae 07 48 08 ff 08 de 09           I...)...H.....

000000c6 <RHtab>:
      c6:	ba 03 87 03 58 03 2e 03 07 03 e4 02 c3 02 a4 02     ....X...........
      d6:	88 02                                               ..

000000d8 <VERSION_str>:
      d8:	56 65 72 73 69 6f 6e 20 31 2e 30 39 6b 00           Version 1.09k.

000000e6 <R0_str>:
      e6:	52 30 3d 00                                         R0=.

000000ea <MinCap_str>:
      ea:	20 3e 31 30 30 6e 46 00                              >100nF.

000000f2 <REF_C_str>:
      f2:	52 45 46 5f 43 3d 00                                REF_C=.

000000f9 <REF_R_str>:
      f9:	52 45 46 5f 52 3d 00                                REF_R=.

00000100 <PinRLtab>:
     100:	01 04 10                                            ...

00000103 <PinADCtab>:
     103:	01 02 04                                            ...

00000106 <__ctors_end>:
     106:	11 24       	eor	r1, r1
     108:	1f be       	out	0x3f, r1	; 63
     10a:	cf ef       	ldi	r28, 0xFF	; 255
     10c:	d4 e0       	ldi	r29, 0x04	; 4
     10e:	de bf       	out	0x3e, r29	; 62
     110:	cd bf       	out	0x3d, r28	; 61

00000112 <__do_copy_data>:
     112:	11 e0       	ldi	r17, 0x01	; 1
     114:	a0 e0       	ldi	r26, 0x00	; 0
     116:	b1 e0       	ldi	r27, 0x01	; 1
     118:	ec ed       	ldi	r30, 0xDC	; 220
     11a:	fd e3       	ldi	r31, 0x3D	; 61
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x10>
     11e:	05 90       	lpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	a2 30       	cpi	r26, 0x02	; 2
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0xc>

00000128 <__do_clear_bss>:
     128:	11 e0       	ldi	r17, 0x01	; 1
     12a:	a2 e0       	ldi	r26, 0x02	; 2
     12c:	b1 e0       	ldi	r27, 0x01	; 1
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	a0 39       	cpi	r26, 0x90	; 144
     134:	b1 07       	cpc	r27, r17
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <main>
     13c:	0c 94 ec 1e 	jmp	0x3dd8	; 0x3dd8 <_exit>

00000140 <__bad_interrupt>:
     140:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000144 <lcd_data>:
void lcd_space(void) {
   lcd_data(' ');
}

// sends data byte to the LCD 
void lcd_data(unsigned char temp1) {
     144:	1f 93       	push	r17
     146:	18 2f       	mov	r17, r24
 lcd_write_data(temp1);		// set RS to 1
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	61 2f       	mov	r22, r17
     14c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
     150:	0e 94 9d 13 	call	0x273a	; 0x273a <wait50us>
#ifdef WITH_UART
 switch(temp1) {
     154:	18 30       	cpi	r17, 0x08	; 8
     156:	48 f4       	brcc	.+18     	; 0x16a <lcd_data+0x26>
     158:	16 30       	cpi	r17, 0x06	; 6
     15a:	c0 f4       	brcc	.+48     	; 0x18c <lcd_data+0x48>
     15c:	12 30       	cpi	r17, 0x02	; 2
     15e:	61 f0       	breq	.+24     	; 0x178 <lcd_data+0x34>
     160:	13 30       	cpi	r17, 0x03	; 3
     162:	79 f0       	breq	.+30     	; 0x182 <lcd_data+0x3e>
     164:	11 30       	cpi	r17, 0x01	; 1
     166:	f1 f4       	brne	.+60     	; 0x1a4 <lcd_data+0x60>
     168:	05 c0       	rjmp	.+10     	; 0x174 <lcd_data+0x30>
     16a:	14 3e       	cpi	r17, 0xE4	; 228
     16c:	89 f0       	breq	.+34     	; 0x190 <lcd_data+0x4c>
     16e:	14 3f       	cpi	r17, 0xF4	; 244
     170:	c9 f4       	brne	.+50     	; 0x1a4 <lcd_data+0x60>
     172:	10 c0       	rjmp	.+32     	; 0x194 <lcd_data+0x50>
    case LCD_CHAR_DIODE1:
    	uart_putc('>');
     174:	8e e3       	ldi	r24, 0x3E	; 62
     176:	06 c0       	rjmp	.+12     	; 0x184 <lcd_data+0x40>
    	uart_putc('|');
    	break;
    case LCD_CHAR_DIODE2:
    	uart_putc('|');
     178:	8c e7       	ldi	r24, 0x7C	; 124
     17a:	0e 94 6e 13 	call	0x26dc	; 0x26dc <uart_putc>
    	uart_putc('<');
     17e:	8c e3       	ldi	r24, 0x3C	; 60
     180:	12 c0       	rjmp	.+36     	; 0x1a6 <lcd_data+0x62>
    	break;
    case LCD_CHAR_CAP:
    	uart_putc('|');
     182:	8c e7       	ldi	r24, 0x7C	; 124
     184:	0e 94 6e 13 	call	0x26dc	; 0x26dc <uart_putc>
    	uart_putc('|');
     188:	8c e7       	ldi	r24, 0x7C	; 124
     18a:	0d c0       	rjmp	.+26     	; 0x1a6 <lcd_data+0x62>
    	break;
    case LCD_CHAR_RESIS1:
    case LCD_CHAR_RESIS2:
    	uart_putc('R');
     18c:	82 e5       	ldi	r24, 0x52	; 82
     18e:	0b c0       	rjmp	.+22     	; 0x1a6 <lcd_data+0x62>
//    case LCD_CHAR_DEGREE:	// degree sign
//    	uart_putc(0xf8);	// codepage 437 or 850 has degree
//    	break;
    case LCD_CHAR_U:		//µ
//    	uart_putc(0xe6);	// codepage 437 or 850 has my
    	uart_putc('u');		// better use the ASCII u
     190:	85 e7       	ldi	r24, 0x75	; 117
     192:	09 c0       	rjmp	.+18     	; 0x1a6 <lcd_data+0x62>
    	break;
    case LCD_CHAR_OMEGA:	//Omega
//	uart_putc(0xea);	// only codepage 437 has Omega
        uart_putc('O');
     194:	8f e4       	ldi	r24, 0x4F	; 79
     196:	0e 94 6e 13 	call	0x26dc	; 0x26dc <uart_putc>
        uart_putc('h');
     19a:	88 e6       	ldi	r24, 0x68	; 104
     19c:	0e 94 6e 13 	call	0x26dc	; 0x26dc <uart_putc>
        uart_putc('m');
     1a0:	8d e6       	ldi	r24, 0x6D	; 109
     1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <lcd_data+0x62>
    	break;
    default:
    	uart_putc(temp1);
     1a4:	81 2f       	mov	r24, r17
     1a6:	0e 94 6e 13 	call	0x26dc	; 0x26dc <uart_putc>
 }
#endif
}
     1aa:	1f 91       	pop	r17
     1ac:	08 95       	ret

000001ae <lcd_space>:
   lcd_data(temp + '1');
}

// send space character to LCD
void lcd_space(void) {
   lcd_data(' ');
     1ae:	80 e2       	ldi	r24, 0x20	; 32
     1b0:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
}
     1b4:	08 95       	ret

000001b6 <lcd_testpin>:
 

// sends numeric character (Pin Number) to the LCD 
// from binary 0 we send ASCII 1 ....
void lcd_testpin(unsigned char temp) {
   lcd_data(temp + '1');
     1b6:	8f 5c       	subi	r24, 0xCF	; 207
     1b8:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
}
     1bc:	08 95       	ret

000001be <uart_newline>:
}


#ifdef WITH_UART
void uart_newline(void) {
   uart_putc('\r');
     1be:	8d e0       	ldi	r24, 0x0D	; 13
     1c0:	0e 94 6e 13 	call	0x26dc	; 0x26dc <uart_putc>
   uart_putc('\n');
     1c4:	8a e0       	ldi	r24, 0x0A	; 10
     1c6:	0e 94 6e 13 	call	0x26dc	; 0x26dc <uart_putc>
}
     1ca:	08 95       	ret

000001cc <lcd_command>:
#endif
}
 
// sends a command to the LCD
 
void lcd_command(unsigned char temp1) {
     1cc:	1f 93       	push	r17
     1ce:	18 2f       	mov	r17, r24
        lcd_write_cmd(temp1);		// set RS to 0
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	61 2f       	mov	r22, r17
     1d4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
     1d8:	0e 94 9d 13 	call	0x273a	; 0x273a <wait50us>
#ifdef WITH_UART
	if((temp1 == 0x80) || (temp1 == 0xC0)) {
     1dc:	10 38       	cpi	r17, 0x80	; 128
     1de:	11 f0       	breq	.+4      	; 0x1e4 <lcd_command+0x18>
     1e0:	10 3c       	cpi	r17, 0xC0	; 192
     1e2:	11 f4       	brne	.+4      	; 0x1e8 <lcd_command+0x1c>
		uart_newline();
     1e4:	0e 94 df 00 	call	0x1be	; 0x1be <uart_newline>
	}
#endif
}
     1e8:	1f 91       	pop	r17
     1ea:	08 95       	ret

000001ec <lcd_clear>:
}
 
// send the command to clear the display 
 
void lcd_clear(void) {
   lcd_command(CLEAR_DISPLAY);
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
   wait_about10ms();
     1f2:	82 e0       	ldi	r24, 0x02	; 2
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>
#ifdef WITH_UART
   uart_newline();
     1fa:	0e 94 df 00 	call	0x1be	; 0x1be <uart_newline>
#endif
   lcd_line1();			// set cursor to Line1 Column 1, (only for OLED-Display)
     1fe:	80 e8       	ldi	r24, 0x80	; 128
     200:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
}
     204:	08 95       	ret

00000206 <lcd_init>:
 
// Initialise: 
// Must be called first .
 
void lcd_init(void) {
   wait_about30ms();
     206:	86 e0       	ldi	r24, 0x06	; 6
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>
   // to initialise, send 3 times to be shure to be in 8 Bit mode
   lcd_write_init(1);
     20e:	80 e8       	ldi	r24, 0x80	; 128
     210:	60 e3       	ldi	r22, 0x30	; 48
     212:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait_about5ms();
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>
   
   lcd_write_init(1);
     21e:	80 e8       	ldi	r24, 0x80	; 128
     220:	60 e3       	ldi	r22, 0x30	; 48
     222:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait1ms();
     226:	0e 94 97 13 	call	0x272e	; 0x272e <wait1ms>

   lcd_write_init(1);
     22a:	80 e8       	ldi	r24, 0x80	; 128
     22c:	60 e3       	ldi	r22, 0x30	; 48
     22e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait1ms();
     232:	0e 94 97 13 	call	0x272e	; 0x272e <wait1ms>

   lcd_write_init(0);		// switch to 4 Bit mode
     236:	80 e8       	ldi	r24, 0x80	; 128
     238:	60 e2       	ldi	r22, 0x20	; 32
     23a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait_about10ms();
     23e:	82 e0       	ldi	r24, 0x02	; 2
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>
   lcd_command(CMD1_SetBias | 0x0c);		// 1/4 bias     (5V)
   lcd_command(CMD1_PowerControl | 0x02);	// booster off / set contrast C5:C4 = 2
   lcd_command(CMD1_FollowerControl | 0x09);	// Follower on / Rab2:0 = 1
   lcd_command(CMD1_SetContrast | 0x04);	// set contrast C3:0 = 4
#endif
   lcd_command(CMD_SetIFOptions | 0x08);	// 4Bit / 2 rows / 5x7
     246:	88 e2       	ldi	r24, 0x28	; 40
     248:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>

   lcd_command(CMD_SetDisplayAndCursor | 0x04); // Display on / Cursor off / no Blinking
     24c:	8c e0       	ldi	r24, 0x0C	; 12
     24e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>

   lcd_command(CMD_SetEntryMode | 0x02);	// increment / no Scroll    
     252:	86 e0       	ldi	r24, 0x06	; 6
     254:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
   lcd_clear();
     258:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
}
     25c:	08 95       	ret

0000025e <lcd_string>:
#endif
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
     25e:	ef 92       	push	r14
     260:	ff 92       	push	r15
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	e8 2e       	mov	r14, r24
     268:	e7 01       	movw	r28, r14
     26a:	7e 01       	movw	r14, r28
     26c:	f9 2e       	mov	r15, r25
     26e:	e7 01       	movw	r28, r14
    while(*data) {
     270:	02 c0       	rjmp	.+4      	; 0x276 <lcd_string+0x18>
        lcd_data(*data);
     272:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
    while(*data) {
     276:	89 91       	ld	r24, Y+
     278:	88 23       	and	r24, r24
     27a:	d9 f7       	brne	.-10     	; 0x272 <lcd_string+0x14>
        lcd_data(*data);
        data++;
    }
}
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	ff 90       	pop	r15
     282:	ef 90       	pop	r14
     284:	08 95       	ret

00000286 <lcd_pgm_string>:

#ifdef use_lcd_pgm
//Load string from PGM  and send to LCD 
void lcd_pgm_string(const unsigned char *data) {
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = pgm_read_byte(data);
     28c:	fe 01       	movw	r30, r28
     28e:	84 91       	lpm	r24, Z+
      if((cc==0) || (cc==128)) {
     290:	88 23       	and	r24, r24
     292:	31 f0       	breq	.+12     	; 0x2a0 <lcd_pgm_string+0x1a>
     294:	80 38       	cpi	r24, 0x80	; 128
     296:	21 f0       	breq	.+8      	; 0x2a0 <lcd_pgm_string+0x1a>
         return;
      }
      lcd_data(cc);
     298:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
      data++;
     29c:	21 96       	adiw	r28, 0x01	; 1
   }
     29e:	f6 cf       	rjmp	.-20     	; 0x28c <lcd_pgm_string+0x6>
}
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <lcd_fix_string>:
#endif

//Load string from PGM or EEprom and send to LCD 
void lcd_fix_string(const unsigned char *data) {
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = MEM_read_byte(data);
     2ac:	ce 01       	movw	r24, r28
     2ae:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__eerd_byte_m168>
      if((cc==0) || (cc==128)) {
     2b2:	88 23       	and	r24, r24
     2b4:	31 f0       	breq	.+12     	; 0x2c2 <lcd_fix_string+0x1c>
     2b6:	80 38       	cpi	r24, 0x80	; 128
     2b8:	21 f0       	breq	.+8      	; 0x2c2 <lcd_fix_string+0x1c>
         return;
      }
      lcd_data(cc);
     2ba:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
      data++;
     2be:	21 96       	adiw	r28, 0x01	; 1
   }
     2c0:	f5 cf       	rjmp	.-22     	; 0x2ac <lcd_fix_string+0x6>
}
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	08 95       	ret

000002c8 <lcd_fix_customchar>:

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	8c 01       	movw	r16, r24
     2d2:	c0 e0       	ldi	r28, 0x00	; 0
     2d4:	d0 e0       	ldi	r29, 0x00	; 0
    for(uint8_t i=0;i<8;i++) {
        lcd_data(MEM_read_byte(chardata));
     2d6:	c8 01       	movw	r24, r16
     2d8:	8c 0f       	add	r24, r28
     2da:	9d 1f       	adc	r25, r29
     2dc:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__eerd_byte_m168>
     2e0:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
     2e4:	21 96       	adiw	r28, 0x01	; 1
   }
}

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
    for(uint8_t i=0;i<8;i++) {
     2e6:	c8 30       	cpi	r28, 0x08	; 8
     2e8:	d1 05       	cpc	r29, r1
     2ea:	a9 f7       	brne	.-22     	; 0x2d6 <lcd_fix_customchar+0xe>
        lcd_data(MEM_read_byte(chardata));
        chardata++;
    }
}
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	0f 91       	pop	r16
     2f4:	08 95       	ret

000002f6 <_lcd_hw_write>:
     2f6:	80 fd       	sbrc	r24, 0
     2f8:	5c 9a       	sbi	0x0b, 4	; 11
     2fa:	80 ff       	sbrs	r24, 0
     2fc:	5c 98       	cbi	0x0b, 4	; 11
     2fe:	54 9a       	sbi	0x0a, 4	; 10
     300:	00 00       	nop
     302:	5d 9a       	sbi	0x0b, 5	; 11
     304:	55 9a       	sbi	0x0a, 5	; 10
     306:	58 98       	cbi	0x0b, 0	; 11
     308:	59 98       	cbi	0x0b, 1	; 11
     30a:	5a 98       	cbi	0x0b, 2	; 11
     30c:	5b 98       	cbi	0x0b, 3	; 11
     30e:	64 fd       	sbrc	r22, 4
     310:	58 9a       	sbi	0x0b, 0	; 11
     312:	50 9a       	sbi	0x0a, 0	; 10
     314:	65 fd       	sbrc	r22, 5
     316:	59 9a       	sbi	0x0b, 1	; 11
     318:	51 9a       	sbi	0x0a, 1	; 10
     31a:	66 fd       	sbrc	r22, 6
     31c:	5a 9a       	sbi	0x0b, 2	; 11
     31e:	52 9a       	sbi	0x0a, 2	; 10
     320:	67 fd       	sbrc	r22, 7
     322:	5b 9a       	sbi	0x0b, 3	; 11
     324:	53 9a       	sbi	0x0a, 3	; 10
     326:	00 00       	nop
     328:	5d 98       	cbi	0x0b, 5	; 11
     32a:	0e 94 a6 13 	call	0x274c	; 0x274c <wait1us>
     32e:	87 fd       	sbrc	r24, 7
     330:	11 c0       	rjmp	.+34     	; 0x354 <_lcd_hw_write_exit>
     332:	5d 9a       	sbi	0x0b, 5	; 11
     334:	58 98       	cbi	0x0b, 0	; 11
     336:	59 98       	cbi	0x0b, 1	; 11
     338:	5a 98       	cbi	0x0b, 2	; 11
     33a:	5b 98       	cbi	0x0b, 3	; 11
     33c:	60 fd       	sbrc	r22, 0
     33e:	58 9a       	sbi	0x0b, 0	; 11
     340:	61 fd       	sbrc	r22, 1
     342:	59 9a       	sbi	0x0b, 1	; 11
     344:	62 fd       	sbrc	r22, 2
     346:	5a 9a       	sbi	0x0b, 2	; 11
     348:	63 fd       	sbrc	r22, 3
     34a:	5b 9a       	sbi	0x0b, 3	; 11
     34c:	00 00       	nop
     34e:	5d 98       	cbi	0x0b, 5	; 11
     350:	0e 94 a6 13 	call	0x274c	; 0x274c <wait1us>

00000354 <_lcd_hw_write_exit>:
     354:	08 95       	ret

00000356 <__vector_7>:
#define MAIN_C
#include "Transistortester.h"

#ifndef INHIBIT_SLEEP_MODE
  // prepare sleep mode
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
     356:	18 95       	reti

00000358 <__vector_21>:
  EMPTY_INTERRUPT(ADC_vect);
     358:	18 95       	reti

0000035a <EntladePins>:
   R_DDR &= ~PinToCharge;	// switch back to input
   R_PORT &= ~PinToCharge;	// no Pull up
}

// first discharge any charge of capacitors
void EntladePins() {
     35a:	af 92       	push	r10
     35c:	bf 92       	push	r11
     35e:	cf 92       	push	r12
     360:	df 92       	push	r13
     362:	ef 92       	push	r14
     364:	ff 92       	push	r15
     366:	0f 93       	push	r16
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	3a e0       	ldi	r19, 0x0A	; 10
     370:	c3 2e       	mov	r12, r19
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     372:	28 e0       	ldi	r18, 0x08	; 8
     374:	d2 2e       	mov	r13, r18
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     R_PORT = 0;			// R-outputs auf 0
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     376:	9a e2       	ldi	r25, 0x2A	; 42
     378:	a9 2e       	mov	r10, r25
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     37a:	85 e1       	ldi	r24, 0x15	; 21
     37c:	b8 2e       	mov	r11, r24
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     37e:	d7 b8       	out	0x07, r13	; 7
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     380:	d8 b8       	out	0x08, r13	; 8
     R_PORT = 0;			// R-outputs auf 0
     382:	15 b8       	out	0x05, r1	; 5
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     384:	a4 b8       	out	0x04, r10	; 4
     adcmv[0] = W5msReadADC(PC0);	// which voltage has Pin 1?
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
     38c:	8c 01       	movw	r16, r24
     adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
     394:	ec 01       	movw	r28, r24
     adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     396:	82 e0       	ldi	r24, 0x02	; 2
     398:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
     if ((PartFound == PART_CELL) || (adcmv[0] < CAP_EMPTY_LEVEL) & (adcmv[1] < CAP_EMPTY_LEVEL) & (adcmv[2] < CAP_EMPTY_LEVEL)) {
     39c:	20 91 07 01 	lds	r18, 0x0107
     3a0:	28 30       	cpi	r18, 0x08	; 8
     3a2:	c1 f0       	breq	.+48     	; 0x3d4 <EntladePins+0x7a>
     3a4:	41 e0       	ldi	r20, 0x01	; 1
     3a6:	c4 30       	cpi	r28, 0x04	; 4
     3a8:	d1 05       	cpc	r29, r1
     3aa:	08 f0       	brcs	.+2      	; 0x3ae <EntladePins+0x54>
     3ac:	40 e0       	ldi	r20, 0x00	; 0
     3ae:	21 e0       	ldi	r18, 0x01	; 1
     3b0:	04 30       	cpi	r16, 0x04	; 4
     3b2:	11 05       	cpc	r17, r1
     3b4:	08 f0       	brcs	.+2      	; 0x3b8 <EntladePins+0x5e>
     3b6:	20 e0       	ldi	r18, 0x00	; 0
     3b8:	42 23       	and	r20, r18
     3ba:	50 e0       	ldi	r21, 0x00	; 0
     3bc:	21 e0       	ldi	r18, 0x01	; 1
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	84 30       	cpi	r24, 0x04	; 4
     3c2:	91 05       	cpc	r25, r1
     3c4:	10 f0       	brcs	.+4      	; 0x3ca <EntladePins+0x70>
     3c6:	20 e0       	ldi	r18, 0x00	; 0
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	24 23       	and	r18, r20
     3cc:	35 23       	and	r19, r21
     3ce:	21 15       	cp	r18, r1
     3d0:	31 05       	cpc	r19, r1
     3d2:	21 f0       	breq	.+8      	; 0x3dc <EntladePins+0x82>
        ADC_DDR = TXD_MSK;		// switch all ADC-Pins to input
     3d4:	88 e0       	ldi	r24, 0x08	; 8
     3d6:	87 b9       	out	0x07, r24	; 7
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
     3d8:	14 b8       	out	0x04, r1	; 4
        return;			// all is discharged
     3da:	4f c0       	rjmp	.+158    	; 0x47a <EntladePins+0x120>
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
     3dc:	23 e0       	ldi	r18, 0x03	; 3
     3de:	08 3e       	cpi	r16, 0xE8	; 232
     3e0:	12 07       	cpc	r17, r18
     3e2:	10 f0       	brcs	.+4      	; 0x3e8 <EntladePins+0x8e>
  uint8_t lop_cnt;		// loop counter
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     3e4:	28 e0       	ldi	r18, 0x08	; 8
     3e6:	01 c0       	rjmp	.+2      	; 0x3ea <EntladePins+0x90>
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
        return;			// all is discharged
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
        adc_gnd |= (1<<PC0);	//Pin 1 directly to GND
     3e8:	29 e0       	ldi	r18, 0x09	; 9
     }
     if (adcmv[1] < 1000) {
     3ea:	33 e0       	ldi	r19, 0x03	; 3
     3ec:	c8 3e       	cpi	r28, 0xE8	; 232
     3ee:	d3 07       	cpc	r29, r19
     3f0:	08 f4       	brcc	.+2      	; 0x3f4 <EntladePins+0x9a>
        adc_gnd |= (1<<PC1);	//Pin 2 directly to GND
     3f2:	22 60       	ori	r18, 0x02	; 2
     }
     if (adcmv[2] < 1000) {
     3f4:	33 e0       	ldi	r19, 0x03	; 3
     3f6:	88 3e       	cpi	r24, 0xE8	; 232
     3f8:	93 07       	cpc	r25, r19
     3fa:	08 f4       	brcc	.+2      	; 0x3fe <EntladePins+0xa4>
        adc_gnd |= (1<<PC2);	//Pin 3 directly to  GND
     3fc:	24 60       	ori	r18, 0x04	; 4
     }
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time
     3fe:	27 b9       	out	0x07, r18	; 7

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     400:	b4 b8       	out	0x04, r11	; 4
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     402:	c0 e0       	ldi	r28, 0x00	; 0
     404:	d0 e0       	ldi	r29, 0x00	; 0
        wdt_reset();
     406:	a8 95       	wdr
        adcmv[0] = W20msReadADC(PC0);	// which voltage has Pin 1?
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	0e 94 01 1a 	call	0x3402	; 0x3402 <W20msReadADC>
     40e:	7c 01       	movw	r14, r24
        adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
     416:	8c 01       	movw	r16, r24
        adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     418:	82 e0       	ldi	r24, 0x02	; 2
     41a:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
        if (adcmv[0] < 1300) {
     41e:	24 e1       	ldi	r18, 0x14	; 20
     420:	e2 16       	cp	r14, r18
     422:	25 e0       	ldi	r18, 0x05	; 5
     424:	f2 06       	cpc	r15, r18
     426:	08 f4       	brcc	.+2      	; 0x42a <EntladePins+0xd0>
           ADC_DDR |= (1<<PC0);	// below 1.3V , switch directly with ADC-Port to GND
     428:	38 9a       	sbi	0x07, 0	; 7
        }
        if (adcmv[1] < 1300) {
     42a:	35 e0       	ldi	r19, 0x05	; 5
     42c:	04 31       	cpi	r16, 0x14	; 20
     42e:	13 07       	cpc	r17, r19
     430:	08 f4       	brcc	.+2      	; 0x434 <EntladePins+0xda>
           ADC_DDR |= (1<<PC1);	// below 1.3V, switch directly with ADC-Port to GND
     432:	39 9a       	sbi	0x07, 1	; 7
        }
        if (adcmv[2] < 1300) {
     434:	25 e0       	ldi	r18, 0x05	; 5
     436:	84 31       	cpi	r24, 0x14	; 20
     438:	92 07       	cpc	r25, r18
     43a:	08 f4       	brcc	.+2      	; 0x43e <EntladePins+0xe4>
           ADC_DDR |= (1<<PC2);	// below 1.3V, switch directly with ADC-Port to GND
     43c:	3a 9a       	sbi	0x07, 2	; 7
        }
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
     43e:	36 e0       	ldi	r19, 0x06	; 6
     440:	e3 16       	cp	r14, r19
     442:	f1 04       	cpc	r15, r1
     444:	30 f4       	brcc	.+12     	; 0x452 <EntladePins+0xf8>
     446:	06 30       	cpi	r16, 0x06	; 6
     448:	11 05       	cpc	r17, r1
     44a:	18 f4       	brcc	.+6      	; 0x452 <EntladePins+0xf8>
     44c:	86 30       	cpi	r24, 0x06	; 6
     44e:	91 05       	cpc	r25, r1
     450:	38 f0       	brcs	.+14     	; 0x460 <EntladePins+0x106>

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     452:	21 96       	adiw	r28, 0x01	; 1
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	c4 3f       	cpi	r28, 0xF4	; 244
     458:	d8 07       	cpc	r29, r24
     45a:	a9 f6       	brne	.-86     	; 0x406 <EntladePins+0xac>
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
           break;
        }
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
     45c:	d0 92 07 01 	sts	0x0107, r13

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     460:	00 e0       	ldi	r16, 0x00	; 0
     462:	10 e0       	ldi	r17, 0x00	; 0
     464:	04 c0       	rjmp	.+8      	; 0x46e <EntladePins+0x114>
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     466:	0e 94 97 13 	call	0x272e	; 0x272e <wait1ms>
     46a:	0f 5f       	subi	r16, 0xFF	; 255
     46c:	1f 4f       	sbci	r17, 0xFF	; 255
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
     46e:	0c 17       	cp	r16, r28
     470:	1d 07       	cpc	r17, r29
     472:	c8 f3       	brcs	.-14     	; 0x466 <EntladePins+0x10c>
     474:	ca 94       	dec	r12
  unsigned int clr_cnt;		// Clear Counter
  uint8_t lop_cnt;		// loop counter
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     476:	09 f0       	breq	.+2      	; 0x47a <EntladePins+0x120>
     478:	82 cf       	rjmp	.-252    	; 0x37e <EntladePins+0x24>
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     }
  } // end for lop_cnt
 }
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	1f 91       	pop	r17
     480:	0f 91       	pop	r16
     482:	ff 90       	pop	r15
     484:	ef 90       	pop	r14
     486:	df 90       	pop	r13
     488:	cf 90       	pop	r12
     48a:	bf 90       	pop	r11
     48c:	af 90       	pop	r10
     48e:	08 95       	ret

00000490 <RefVoltage>:
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;

  #ifdef AUTO_CAL
  referenz = ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset));
     490:	8d e9       	ldi	r24, 0x9D	; 157
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__eerd_word_m168>
     498:	20 91 44 01 	lds	r18, 0x0144
     49c:	30 91 45 01 	lds	r19, 0x0145
     4a0:	28 0f       	add	r18, r24
     4a2:	39 1f       	adc	r19, r25
  #else
  referenz = ref_mv + REF_C_KORR;
  #endif
  if (referenz >= Ref_Tab_Beginn) {
     4a4:	83 e0       	ldi	r24, 0x03	; 3
     4a6:	28 3e       	cpi	r18, 0xE8	; 232
     4a8:	38 07       	cpc	r19, r24
     4aa:	20 f0       	brcs	.+8      	; 0x4b4 <RefVoltage+0x24>
     referenz -= Ref_Tab_Beginn;
     4ac:	c9 01       	movw	r24, r18
     4ae:	88 5e       	subi	r24, 0xE8	; 232
     4b0:	93 40       	sbci	r25, 0x03	; 3
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <RefVoltage+0x28>
  } else  {
     referenz = 0;		// limit to begin of table
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = referenz / Ref_Tab_Abstand;
     4b8:	62 e3       	ldi	r22, 0x32	; 50
     4ba:	70 e0       	ldi	r23, 0x00	; 0
     4bc:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <__udivmodhi4>
  tabres = Ref_Tab_Abstand-tabres;
  if (tabind > 7) {
     tabind = 7;		// limit to end of table
  }
  // interpolate the table of factors
  y1 = pgm_read_word(&RHtab[tabind]);
     4c0:	68 30       	cpi	r22, 0x08	; 8
     4c2:	08 f0       	brcs	.+2      	; 0x4c6 <RefVoltage+0x36>
     4c4:	67 e0       	ldi	r22, 0x07	; 7
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	fb 01       	movw	r30, r22
     4ca:	ee 0f       	add	r30, r30
     4cc:	ff 1f       	adc	r31, r31
     4ce:	ea 53       	subi	r30, 0x3A	; 58
     4d0:	ff 4f       	sbci	r31, 0xFF	; 255
     4d2:	45 91       	lpm	r20, Z+
     4d4:	54 91       	lpm	r21, Z+
  y2 = pgm_read_word(&RHtab[tabind+1]);
     4d6:	fb 01       	movw	r30, r22
     4d8:	ee 0f       	add	r30, r30
     4da:	ff 1f       	adc	r31, r31
     4dc:	e8 53       	subi	r30, 0x38	; 56
     4de:	ff 4f       	sbci	r31, 0xFF	; 255
     4e0:	25 91       	lpm	r18, Z+
     4e2:	34 91       	lpm	r19, Z+
  } else  {
     referenz = 0;		// limit to begin of table
  }
  tabind = referenz / Ref_Tab_Abstand;
  tabres = referenz % Ref_Tab_Abstand;
  tabres = Ref_Tab_Abstand-tabres;
     4e4:	62 e3       	ldi	r22, 0x32	; 50
     4e6:	68 1b       	sub	r22, r24
  }
  // interpolate the table of factors
  y1 = pgm_read_word(&RHtab[tabind]);
  y2 = pgm_read_word(&RHtab[tabind+1]);
  // RHmultip is the interpolated factor to compute capacity from load time with 470k
  RHmultip = ((y1 - y2) * tabres + (Ref_Tab_Abstand/2)) / Ref_Tab_Abstand + y2;
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	42 1b       	sub	r20, r18
     4ec:	53 0b       	sbc	r21, r19
     4ee:	64 9f       	mul	r22, r20
     4f0:	c0 01       	movw	r24, r0
     4f2:	65 9f       	mul	r22, r21
     4f4:	90 0d       	add	r25, r0
     4f6:	74 9f       	mul	r23, r20
     4f8:	90 0d       	add	r25, r0
     4fa:	11 24       	eor	r1, r1
     4fc:	49 96       	adiw	r24, 0x19	; 25
     4fe:	62 e3       	ldi	r22, 0x32	; 50
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <__udivmodhi4>
     506:	62 0f       	add	r22, r18
     508:	73 1f       	adc	r23, r19
     50a:	70 93 01 01 	sts	0x0101, r23
     50e:	60 93 00 01 	sts	0x0100, r22
 }
     512:	08 95       	ret

00000514 <lcd_clear_line>:
#endif

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
     514:	1f 93       	push	r17
     516:	14 e1       	ldi	r17, 0x14	; 20
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    lcd_space();
     518:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>
     51c:	11 50       	subi	r17, 0x01	; 1

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
     51e:	e1 f7       	brne	.-8      	; 0x518 <lcd_clear_line+0x4>
    lcd_space();
 }
}
     520:	1f 91       	pop	r17
     522:	08 95       	ret

00000524 <DisplayValue>:
 *    e.g: p = 10^-12 -> -12
 *  - unit character (0 = none)
 *  digits = 2, 3 or 4
 */
void DisplayValue(unsigned long Value, int8_t Exponent, unsigned char Unit, unsigned char digits)
{
     524:	2f 92       	push	r2
     526:	3f 92       	push	r3
     528:	4f 92       	push	r4
     52a:	5f 92       	push	r5
     52c:	7f 92       	push	r7
     52e:	8f 92       	push	r8
     530:	9f 92       	push	r9
     532:	af 92       	push	r10
     534:	bf 92       	push	r11
     536:	cf 92       	push	r12
     538:	df 92       	push	r13
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	df 93       	push	r29
     544:	cf 93       	push	r28
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
     54a:	2f 97       	sbiw	r28, 0x0f	; 15
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	de bf       	out	0x3e, r29	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	cd bf       	out	0x3d, r28	; 61
     556:	6b 01       	movw	r12, r22
     558:	7c 01       	movw	r14, r24
     55a:	14 2f       	mov	r17, r20
     55c:	72 2e       	mov	r7, r18
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
     55e:	03 30       	cpi	r16, 0x03	; 3
     560:	29 f0       	breq	.+10     	; 0x56c <DisplayValue+0x48>
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
     562:	04 30       	cpi	r16, 0x04	; 4
     564:	31 f0       	breq	.+12     	; 0x572 <DisplayValue+0x4e>
  uint8_t           Offset;		/* exponent of offset to next 10^3 step */
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
     566:	84 e6       	ldi	r24, 0x64	; 100
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	14 c0       	rjmp	.+40     	; 0x594 <DisplayValue+0x70>
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
     56c:	88 ee       	ldi	r24, 0xE8	; 232
     56e:	93 e0       	ldi	r25, 0x03	; 3
     570:	11 c0       	rjmp	.+34     	; 0x594 <DisplayValue+0x70>
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
     572:	80 e1       	ldi	r24, 0x10	; 16
     574:	97 e2       	ldi	r25, 0x27	; 39
     576:	0e c0       	rjmp	.+28     	; 0x594 <DisplayValue+0x70>
  while (Value >= Limit)
  {
    Value += 5;				/* for automatic rounding */
     578:	c7 01       	movw	r24, r14
     57a:	b6 01       	movw	r22, r12
     57c:	6b 5f       	subi	r22, 0xFB	; 251
     57e:	7f 4f       	sbci	r23, 0xFF	; 255
     580:	8f 4f       	sbci	r24, 0xFF	; 255
     582:	9f 4f       	sbci	r25, 0xFF	; 255
    Value = Value / 10;			/* scale down by 10^1 */
     584:	a5 01       	movw	r20, r10
     586:	94 01       	movw	r18, r8
     588:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
     58c:	69 01       	movw	r12, r18
     58e:	7a 01       	movw	r14, r20
    Exponent++;				/* increase exponent by 1 */
     590:	1f 5f       	subi	r17, 0xFF	; 255
     592:	08 c0       	rjmp	.+16     	; 0x5a4 <DisplayValue+0x80>


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
  while (Value >= Limit)
     594:	1c 01       	movw	r2, r24
     596:	44 24       	eor	r4, r4
     598:	55 24       	eor	r5, r5
  {
    Value += 5;				/* for automatic rounding */
    Value = Value / 10;			/* scale down by 10^1 */
     59a:	ba e0       	ldi	r27, 0x0A	; 10
     59c:	8b 2e       	mov	r8, r27
     59e:	91 2c       	mov	r9, r1
     5a0:	a1 2c       	mov	r10, r1
     5a2:	b1 2c       	mov	r11, r1


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
  while (Value >= Limit)
     5a4:	c2 14       	cp	r12, r2
     5a6:	d3 04       	cpc	r13, r3
     5a8:	e4 04       	cpc	r14, r4
     5aa:	f5 04       	cpc	r15, r5
     5ac:	28 f7       	brcc	.-54     	; 0x578 <DisplayValue+0x54>


  /*
   *  determine prefix
   */
  Length = Exponent + 12;
     5ae:	81 2f       	mov	r24, r17
     5b0:	84 5f       	subi	r24, 0xF4	; 244
  if ((int8_t)Length <  0) Length = 0;		/* Limit to minimum prefix */
     5b2:	87 fd       	sbrc	r24, 7
     5b4:	03 c0       	rjmp	.+6      	; 0x5bc <DisplayValue+0x98>
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
     5b6:	83 31       	cpi	r24, 0x13	; 19
     5b8:	18 f4       	brcc	.+6      	; 0x5c0 <DisplayValue+0x9c>
     5ba:	03 c0       	rjmp	.+6      	; 0x5c2 <DisplayValue+0x9e>

  /*
   *  determine prefix
   */
  Length = Exponent + 12;
  if ((int8_t)Length <  0) Length = 0;		/* Limit to minimum prefix */
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	01 c0       	rjmp	.+2      	; 0x5c2 <DisplayValue+0x9e>
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
     5c0:	82 e1       	ldi	r24, 0x12	; 18
  Index = Length / 3;
     5c2:	23 e0       	ldi	r18, 0x03	; 3
  Offset = Length % 3;
     5c4:	62 2f       	mov	r22, r18
     5c6:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <__udivmodqi4>
     5ca:	19 2f       	mov	r17, r25
  if (Offset > 0)
     5cc:	99 23       	and	r25, r25
     5ce:	19 f0       	breq	.+6      	; 0x5d6 <DisplayValue+0xb2>
    {
      Index++;				/* adjust index for exponent offset, take next prefix */
     5d0:	8f 5f       	subi	r24, 0xFF	; 255
      Offset = 3 - Offset;		/* reverse value (1 or 2) */
     5d2:	29 1b       	sub	r18, r25
     5d4:	12 2f       	mov	r17, r18
    { /* use no nano */
      Index++;				/* use mikro instead of nano */
      Offset += 3;			/* can be 3,4 or 5 */
    }
#endif
  Prefix = MEM_read_byte((uint8_t *)(&PrefixTab[Index]));   /* look up prefix in table */
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	8a 56       	subi	r24, 0x6A	; 106
     5da:	9e 4f       	sbci	r25, 0xFE	; 254
     5dc:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__eerd_byte_m168>
     5e0:	b8 2e       	mov	r11, r24
  /*
   *  display value
   */

  /* convert value into string */
  utoa((unsigned int)Value, OutBuffer, 10);
     5e2:	c6 01       	movw	r24, r12
     5e4:	6e 01       	movw	r12, r28
     5e6:	08 94       	sec
     5e8:	c1 1c       	adc	r12, r1
     5ea:	d1 1c       	adc	r13, r1
     5ec:	b6 01       	movw	r22, r12
     5ee:	4a e0       	ldi	r20, 0x0A	; 10
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <utoa>
  Length = strlen(OutBuffer);
     5f6:	f6 01       	movw	r30, r12
     5f8:	01 90       	ld	r0, Z+
     5fa:	00 20       	and	r0, r0
     5fc:	e9 f7       	brne	.-6      	; 0x5f8 <DisplayValue+0xd4>
     5fe:	31 97       	sbiw	r30, 0x01	; 1
     600:	2e 2e       	mov	r2, r30
     602:	2c 18       	sub	r2, r12

  /* position of dot */
  Exponent = Length - Offset;		/* calculate position */
     604:	82 2c       	mov	r8, r2
     606:	81 1a       	sub	r8, r17

  if (Exponent <= 0)			/* we have to prepend "0." */
     608:	18 14       	cp	r1, r8
     60a:	44 f0       	brlt	.+16     	; 0x61c <DisplayValue+0xf8>
  {
    /* 0: factor 10 / -1: factor 100 */
//    lcd_data('0');
    lcd_data('.');
     60c:	8e e2       	ldi	r24, 0x2E	; 46
     60e:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
      {
       lcd_data('0');	/* extra 0 for factor 10 */
       Exponent++;
      }
#else
    if (Exponent < 0) lcd_data('0');	/* extra 0 for factor 100 */
     612:	88 20       	and	r8, r8
     614:	19 f0       	breq	.+6      	; 0x61c <DisplayValue+0xf8>
     616:	80 e3       	ldi	r24, 0x30	; 48
     618:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
#endif
  }

  if (Offset == 0) Exponent = -1;	/* disable dot if not needed */
     61c:	11 23       	and	r17, r17
     61e:	11 f4       	brne	.+4      	; 0x624 <DisplayValue+0x100>
     620:	88 24       	eor	r8, r8
     622:	8a 94       	dec	r8
     624:	6e 01       	movw	r12, r28
     626:	08 94       	sec
     628:	c1 1c       	adc	r12, r1
     62a:	d1 1c       	adc	r13, r1
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     62c:	00 e0       	ldi	r16, 0x00	; 0
     62e:	10 e0       	ldi	r17, 0x00	; 0
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    Index++;				/* next one */
    if (Index == Exponent) {
     630:	99 24       	eor	r9, r9
     632:	87 fc       	sbrc	r8, 7
     634:	90 94       	com	r9
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     636:	0d c0       	rjmp	.+26     	; 0x652 <DisplayValue+0x12e>
  {
    lcd_data(OutBuffer[Index]);		/* display char */
     638:	0f 5f       	subi	r16, 0xFF	; 255
     63a:	1f 4f       	sbci	r17, 0xFF	; 255
     63c:	f6 01       	movw	r30, r12
     63e:	81 91       	ld	r24, Z+
     640:	6f 01       	movw	r12, r30
     642:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
    Index++;				/* next one */
    if (Index == Exponent) {
     646:	08 15       	cp	r16, r8
     648:	19 05       	cpc	r17, r9
     64a:	19 f4       	brne	.+6      	; 0x652 <DisplayValue+0x12e>
      lcd_data('.');			/* display dot */
     64c:	8e e2       	ldi	r24, 0x2E	; 46
     64e:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     652:	02 15       	cp	r16, r2
     654:	88 f3       	brcs	.-30     	; 0x638 <DisplayValue+0x114>
      lcd_data('.');			/* display dot */
    }
  }

  /* display prefix and unit */
  if (Prefix != 0) lcd_data(Prefix);
     656:	bb 20       	and	r11, r11
     658:	19 f0       	breq	.+6      	; 0x660 <DisplayValue+0x13c>
     65a:	8b 2d       	mov	r24, r11
     65c:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
  if (Unit) lcd_data(Unit);
     660:	77 20       	and	r7, r7
     662:	19 f0       	breq	.+6      	; 0x66a <DisplayValue+0x146>
     664:	87 2d       	mov	r24, r7
     666:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
}
     66a:	2f 96       	adiw	r28, 0x0f	; 15
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	de bf       	out	0x3e, r29	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	cd bf       	out	0x3d, r28	; 61
     676:	cf 91       	pop	r28
     678:	df 91       	pop	r29
     67a:	1f 91       	pop	r17
     67c:	0f 91       	pop	r16
     67e:	ff 90       	pop	r15
     680:	ef 90       	pop	r14
     682:	df 90       	pop	r13
     684:	cf 90       	pop	r12
     686:	bf 90       	pop	r11
     688:	af 90       	pop	r10
     68a:	9f 90       	pop	r9
     68c:	8f 90       	pop	r8
     68e:	7f 90       	pop	r7
     690:	5f 90       	pop	r5
     692:	4f 90       	pop	r4
     694:	3f 90       	pop	r3
     696:	2f 90       	pop	r2
     698:	08 95       	ret

0000069a <RvalOut>:
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
      lcd_space();
   }
}

void RvalOut(uint8_t ii) {	
     69a:	0f 93       	push	r16
   // output of resistor value
#if FLASHEND > 0x1fff
   uint16_t rr;
   if ((resis[ii].rx < 100) && (resis[0].lx == 0)) {
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	fc 01       	movw	r30, r24
     6a0:	ee 0f       	add	r30, r30
     6a2:	ff 1f       	adc	r31, r31
     6a4:	e8 0f       	add	r30, r24
     6a6:	f9 1f       	adc	r31, r25
     6a8:	ee 0f       	add	r30, r30
     6aa:	ff 1f       	adc	r31, r31
     6ac:	ee 0f       	add	r30, r30
     6ae:	ff 1f       	adc	r31, r31
     6b0:	e8 5e       	subi	r30, 0xE8	; 232
     6b2:	fe 4f       	sbci	r31, 0xFE	; 254
     6b4:	60 81       	ld	r22, Z
     6b6:	71 81       	ldd	r23, Z+1	; 0x01
     6b8:	82 81       	ldd	r24, Z+2	; 0x02
     6ba:	93 81       	ldd	r25, Z+3	; 0x03
     6bc:	64 36       	cpi	r22, 0x64	; 100
     6be:	71 05       	cpc	r23, r1
     6c0:	81 05       	cpc	r24, r1
     6c2:	91 05       	cpc	r25, r1
     6c4:	c0 f4       	brcc	.+48     	; 0x6f6 <RvalOut+0x5c>
     6c6:	20 91 1c 01 	lds	r18, 0x011C
     6ca:	30 91 1d 01 	lds	r19, 0x011D
     6ce:	40 91 1e 01 	lds	r20, 0x011E
     6d2:	50 91 1f 01 	lds	r21, 0x011F
     6d6:	21 15       	cp	r18, r1
     6d8:	31 05       	cpc	r19, r1
     6da:	41 05       	cpc	r20, r1
     6dc:	51 05       	cpc	r21, r1
     6de:	59 f4       	brne	.+22     	; 0x6f6 <RvalOut+0x5c>
      rr = GetESR(resis[ii].ra,resis[ii].rb);
     6e0:	81 85       	ldd	r24, Z+9	; 0x09
     6e2:	62 85       	ldd	r22, Z+10	; 0x0a
     6e4:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <GetESR>
      DisplayValue(rr,-2,LCD_CHAR_OMEGA,3);
     6e8:	bc 01       	movw	r22, r24
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	4e ef       	ldi	r20, 0xFE	; 254
     6f0:	24 ef       	ldi	r18, 0xF4	; 244
     6f2:	03 e0       	ldi	r16, 0x03	; 3
     6f4:	03 c0       	rjmp	.+6      	; 0x6fc <RvalOut+0x62>
   } else {
      DisplayValue(resis[ii].rx,-1,LCD_CHAR_OMEGA,4);
     6f6:	4f ef       	ldi	r20, 0xFF	; 255
     6f8:	24 ef       	ldi	r18, 0xF4	; 244
     6fa:	04 e0       	ldi	r16, 0x04	; 4
     6fc:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
   }
#else
   DisplayValue(resis[ii].rx,-1,LCD_CHAR_OMEGA,4);
#endif
   lcd_space();
     700:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>
 }
     704:	0f 91       	pop	r16
     706:	08 95       	ret

00000708 <mVAusgabe>:
   lcd_line2(); 				//2. row
   lcd_fix_string(Uf_str);			//"Uf="
   mVAusgabe(bcdnum >> 4);
   mVAusgabe(bcdnum & 0x0f);
}
void mVAusgabe(uint8_t nn) {
     708:	0f 93       	push	r16
   if (nn < 3) {
     70a:	83 30       	cpi	r24, 0x03	; 3
     70c:	98 f4       	brcc	.+38     	; 0x734 <mVAusgabe+0x2c>
      // Output in mV units
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
     70e:	e8 2f       	mov	r30, r24
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	ee 0f       	add	r30, r30
     714:	ff 1f       	adc	r31, r31
     716:	ee 0f       	add	r30, r30
     718:	ff 1f       	adc	r31, r31
     71a:	e8 58       	subi	r30, 0x88	; 136
     71c:	fe 4f       	sbci	r31, 0xFE	; 254
     71e:	62 81       	ldd	r22, Z+2	; 0x02
     720:	73 81       	ldd	r23, Z+3	; 0x03
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	4d ef       	ldi	r20, 0xFD	; 253
     728:	26 e5       	ldi	r18, 0x56	; 86
     72a:	03 e0       	ldi	r16, 0x03	; 3
     72c:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
      lcd_space();
     730:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>
   }
}
     734:	0f 91       	pop	r16
     736:	08 95       	ret

00000738 <UfAusgabe>:
// output of flux voltage for 1-2 diodes in row 2
// bcdnum = Numbers of both Diodes:
// higher 4 Bit  number of first Diode
// lower 4 Bit  number of second Diode (Structure diodes[nn])
// if number >= 3  no output is done
void UfAusgabe(uint8_t bcdnum) {
     738:	1f 93       	push	r17
     73a:	18 2f       	mov	r17, r24

   lcd_line2(); 				//2. row
     73c:	80 ec       	ldi	r24, 0xC0	; 192
     73e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
   lcd_fix_string(Uf_str);			//"Uf="
     742:	8e e0       	ldi	r24, 0x0E	; 14
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
   mVAusgabe(bcdnum >> 4);
     74a:	81 2f       	mov	r24, r17
     74c:	82 95       	swap	r24
     74e:	8f 70       	andi	r24, 0x0F	; 15
     750:	0e 94 84 03 	call	0x708	; 0x708 <mVAusgabe>
   mVAusgabe(bcdnum & 0x0f);
     754:	81 2f       	mov	r24, r17
     756:	8f 70       	andi	r24, 0x0F	; 15
     758:	0e 94 84 03 	call	0x708	; 0x708 <mVAusgabe>
}
     75c:	1f 91       	pop	r17
     75e:	08 95       	ret

00000760 <SerienDiodenAusgabe>:
  goto start;	// POWER_OFF not selected, repeat measurement
#endif
  return 0;
}   // end main

void SerienDiodenAusgabe() {
     760:	0f 93       	push	r16
     762:	1f 93       	push	r17
     764:	cf 93       	push	r28
     766:	df 93       	push	r29

   lcd_testpin(diodes[trans.b].Anode);
     768:	e0 91 5b 01 	lds	r30, 0x015B
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	c8 e7       	ldi	r28, 0x78	; 120
     770:	d1 e0       	ldi	r29, 0x01	; 1
     772:	ee 0f       	add	r30, r30
     774:	ff 1f       	adc	r31, r31
     776:	ee 0f       	add	r30, r30
     778:	ff 1f       	adc	r31, r31
     77a:	ec 0f       	add	r30, r28
     77c:	fd 1f       	adc	r31, r29
     77e:	80 81       	ld	r24, Z
     780:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
   lcd_fix_string(AnKat);	//"->|-"
     784:	03 e4       	ldi	r16, 0x43	; 67
     786:	11 e0       	ldi	r17, 0x01	; 1
     788:	c8 01       	movw	r24, r16
     78a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
   lcd_testpin(diodes[trans.b].Cathode);
     78e:	e0 91 5b 01 	lds	r30, 0x015B
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	ee 0f       	add	r30, r30
     796:	ff 1f       	adc	r31, r31
     798:	ee 0f       	add	r30, r30
     79a:	ff 1f       	adc	r31, r31
     79c:	ec 0f       	add	r30, r28
     79e:	fd 1f       	adc	r31, r29
     7a0:	81 81       	ldd	r24, Z+1	; 0x01
     7a2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
   lcd_fix_string(AnKat);	//"->|-"
     7a6:	c8 01       	movw	r24, r16
     7a8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
   lcd_testpin(diodes[trans.c].Cathode);
     7ac:	e0 91 5c 01 	lds	r30, 0x015C
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	ee 0f       	add	r30, r30
     7b4:	ff 1f       	adc	r31, r31
     7b6:	ee 0f       	add	r30, r30
     7b8:	ff 1f       	adc	r31, r31
     7ba:	ec 0f       	add	r30, r28
     7bc:	fd 1f       	adc	r31, r29
     7be:	81 81       	ldd	r24, Z+1	; 0x01
     7c0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
   UfAusgabe( (trans.b<<4)|trans.c);
     7c4:	80 91 5b 01 	lds	r24, 0x015B
     7c8:	82 95       	swap	r24
     7ca:	80 7f       	andi	r24, 0xF0	; 240
     7cc:	90 91 5c 01 	lds	r25, 0x015C
     7d0:	89 2b       	or	r24, r25
     7d2:	0e 94 9c 03 	call	0x738	; 0x738 <UfAusgabe>
}
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	08 95       	ret

000007e0 <sleep_5ms>:
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
      pause = 0;
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     7e0:	42 e0       	ldi	r20, 0x02	; 2
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     7e2:	1c c0       	rjmp	.+56     	; 0x81c <sleep_5ms+0x3c>
  {
 #if 3000 > RESTART_DELAY_US
   if (pause > 1)
     7e4:	82 30       	cpi	r24, 0x02	; 2
     7e6:	91 05       	cpc	r25, r1
     7e8:	18 f0       	brcs	.+6      	; 0x7f0 <sleep_5ms+0x10>
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
      pause -= 2;
     7ea:	02 97       	sbiw	r24, 0x02	; 2
  {
 #if 3000 > RESTART_DELAY_US
   if (pause > 1)
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
     7ec:	3e e3       	ldi	r19, 0x3E	; 62
     7ee:	03 c0       	rjmp	.+6      	; 0x7f6 <sleep_5ms+0x16>
      pause -= 2;
     } else {
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
     7f0:	37 e1       	ldi	r19, 0x17	; 23
      pause = 0;
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
     7f6:	20 91 b2 00 	lds	r18, 0x00B2
     7fa:	23 0f       	add	r18, r19
     7fc:	20 93 b3 00 	sts	0x00B3, r18
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     800:	40 93 70 00 	sts	0x0070, r20
   set_sleep_mode(SLEEP_MODE_PWR_SAVE);
     804:	23 b7       	in	r18, 0x33	; 51
     806:	21 7f       	andi	r18, 0xF1	; 241
     808:	26 60       	ori	r18, 0x06	; 6
     80a:	23 bf       	out	0x33, r18	; 51
//   set_sleep_mode(SLEEP_MODE_IDLE);
   sleep_mode();
     80c:	23 b7       	in	r18, 0x33	; 51
     80e:	21 60       	ori	r18, 0x01	; 1
     810:	23 bf       	out	0x33, r18	; 51
     812:	88 95       	sleep
     814:	23 b7       	in	r18, 0x33	; 51
     816:	2e 7f       	andi	r18, 0xFE	; 254
     818:	23 bf       	out	0x33, r18	; 51
// wake up after output compare match interrupt
 #else
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
 #endif
   wdt_reset();
     81a:	a8 95       	wdr
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     81c:	00 97       	sbiw	r24, 0x00	; 0
     81e:	11 f7       	brne	.-60     	; 0x7e4 <sleep_5ms+0x4>
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
 #endif
   wdt_reset();
  }
TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
     820:	10 92 70 00 	sts	0x0070, r1
}
     824:	08 95       	ret

00000826 <ChargePin10ms>:
 }

//******************************************************************
#include "CheckPins.c"

void ChargePin10ms(uint8_t PinToCharge, uint8_t ChargeDirection) {
     826:	1f 93       	push	r17
     828:	18 2f       	mov	r17, r24
   //Will be used by discharge of MOSFET Gates or to load big capacities.
   //Parameters:
   //PinToCharge: specifies the pin as mask for R-Port
   //ChargeDirection: 0 = switch to GND (N-Kanal-FET), 1= switch to VCC(P-Kanal-FET)

   if(ChargeDirection&1) {
     82a:	60 ff       	sbrs	r22, 0
     82c:	03 c0       	rjmp	.+6      	; 0x834 <ChargePin10ms+0xe>
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
     82e:	85 b1       	in	r24, 0x05	; 5
     830:	81 2b       	or	r24, r17
     832:	03 c0       	rjmp	.+6      	; 0x83a <ChargePin10ms+0x14>
   } else {
      R_PORT &= ~PinToCharge; // or 0 (GND)
     834:	95 b1       	in	r25, 0x05	; 5
     836:	80 95       	com	r24
     838:	89 23       	and	r24, r25
     83a:	85 b9       	out	0x05, r24	; 5
   }
   R_DDR |= PinToCharge;		//switch Pin to output, across R to GND or VCC
     83c:	84 b1       	in	r24, 0x04	; 4
     83e:	81 2b       	or	r24, r17
     840:	84 b9       	out	0x04, r24	; 4
   wait_about10ms();			// wait about 10ms
     842:	82 e0       	ldi	r24, 0x02	; 2
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>
   // switch back Input, no current
   R_DDR &= ~PinToCharge;	// switch back to input
     84a:	84 b1       	in	r24, 0x04	; 4
     84c:	10 95       	com	r17
     84e:	81 23       	and	r24, r17
     850:	84 b9       	out	0x04, r24	; 4
   R_PORT &= ~PinToCharge;	// no Pull up
     852:	85 b1       	in	r24, 0x05	; 5
     854:	81 23       	and	r24, r17
     856:	85 b9       	out	0x05, r24	; 5
}
     858:	1f 91       	pop	r17
     85a:	08 95       	ret

0000085c <CheckPins>:
//******************************************************************
void CheckPins(uint8_t HighPin, uint8_t LowPin, uint8_t TristatePin)
  {
     85c:	2f 92       	push	r2
     85e:	3f 92       	push	r3
     860:	4f 92       	push	r4
     862:	5f 92       	push	r5
     864:	6f 92       	push	r6
     866:	7f 92       	push	r7
     868:	8f 92       	push	r8
     86a:	9f 92       	push	r9
     86c:	af 92       	push	r10
     86e:	bf 92       	push	r11
     870:	cf 92       	push	r12
     872:	df 92       	push	r13
     874:	ef 92       	push	r14
     876:	ff 92       	push	r15
     878:	0f 93       	push	r16
     87a:	1f 93       	push	r17
     87c:	df 93       	push	r29
     87e:	cf 93       	push	r28
     880:	cd b7       	in	r28, 0x3d	; 61
     882:	de b7       	in	r29, 0x3e	; 62
     884:	65 97       	sbiw	r28, 0x15	; 21
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	f8 94       	cli
     88a:	de bf       	out	0x3e, r29	; 62
     88c:	0f be       	out	0x3f, r0	; 63
     88e:	cd bf       	out	0x3d, r28	; 61
     890:	18 2f       	mov	r17, r24
     892:	69 83       	std	Y+1, r22	; 0x01
     894:	4a 83       	std	Y+2, r20	; 0x02
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
     896:	a8 95       	wdr
//  #define RR680MI resis680mi
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = pgm_read_byte(&PinRLtab[LowPin]);		// instruction for LowPin R_L
     898:	86 2f       	mov	r24, r22
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	fc 01       	movw	r30, r24
     89e:	e0 50       	subi	r30, 0x00	; 0
     8a0:	ff 4f       	sbci	r31, 0xFF	; 255
     8a2:	34 91       	lpm	r19, Z+
     8a4:	3f 83       	std	Y+7, r19	; 0x07
  LoPinRH = LoPinRL + LoPinRL;				// instruction for LowPin R_H
  TriPinRL = pgm_read_byte(&PinRLtab[TristatePin]);	// instruction for TristatePin R_L
     8a6:	e4 2f       	mov	r30, r20
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	e0 50       	subi	r30, 0x00	; 0
     8ac:	ff 4f       	sbci	r31, 0xFF	; 255
     8ae:	84 90       	lpm	r8, Z+
  TriPinRH = TriPinRL + TriPinRL;			// instruction for TristatePin R_H
     8b0:	98 2c       	mov	r9, r8
     8b2:	99 0c       	add	r9, r9
  HiPinRL = pgm_read_byte(&PinRLtab[HighPin]);		// instruction for HighPin R_L
     8b4:	21 2f       	mov	r18, r17
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	f9 01       	movw	r30, r18
     8ba:	e0 50       	subi	r30, 0x00	; 0
     8bc:	ff 4f       	sbci	r31, 0xFF	; 255
     8be:	04 91       	lpm	r16, Z+
  HiPinRH = HiPinRL + HiPinRL;				// instruction for HighPin R_H
     8c0:	40 2f       	mov	r20, r16
     8c2:	44 0f       	add	r20, r20
     8c4:	4c 87       	std	Y+12, r20	; 0x0c

  HiADCp = pgm_read_byte(&PinADCtab[HighPin]);		// instruction for ADC High-Pin 
     8c6:	2d 5f       	subi	r18, 0xFD	; 253
     8c8:	3e 4f       	sbci	r19, 0xFE	; 254
     8ca:	f9 01       	movw	r30, r18
     8cc:	f4 91       	lpm	r31, Z+
     8ce:	fb 83       	std	Y+3, r31	; 0x03
  LoADCp = pgm_read_byte(&PinADCtab[LowPin]);		// instruction for ADC Low-Pin
     8d0:	8d 5f       	subi	r24, 0xFD	; 253
     8d2:	9e 4f       	sbci	r25, 0xFE	; 254
     8d4:	fc 01       	movw	r30, r24
     8d6:	f4 91       	lpm	r31, Z+
  HiADCm = HiADCp | TXD_MSK;
     8d8:	2b 81       	ldd	r18, Y+3	; 0x03
     8da:	28 60       	ori	r18, 0x08	; 8
     8dc:	2b 83       	std	Y+3, r18	; 0x03
  HiADCp |= TXD_VAL;
  LoADCm = LoADCp | TXD_MSK;
     8de:	f8 60       	ori	r31, 0x08	; 8
     8e0:	fc 83       	std	Y+4, r31	; 0x04
  LoADCp |= TXD_VAL;

  //setting of Pins 
  R_PORT = 0;				//resistor-Port outputs to 0
     8e2:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//Low-Pin to output and across R_L to GND
     8e4:	3f 81       	ldd	r19, Y+7	; 0x07
     8e6:	34 b9       	out	0x04, r19	; 4
  ADC_DDR = HiADCm;		//High-Pin to output
     8e8:	27 b9       	out	0x07, r18	; 7
  ADC_PORT = HiADCp;		//High-Pin fix to Vcc
     8ea:	28 b9       	out	0x08, r18	; 8
  //for some MOSFET the gate (TristatePin) must be discharged
  ChargePin10ms(TriPinRL,0);		//discharge for N-Kanal
     8ec:	88 2d       	mov	r24, r8
     8ee:	60 e0       	ldi	r22, 0x00	; 0
     8f0:	0e 94 13 04 	call	0x826	; 0x826 <ChargePin10ms>
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin 
     8f4:	89 81       	ldd	r24, Y+1	; 0x01
     8f6:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
     8fa:	9e 83       	std	Y+6, r25	; 0x06
     8fc:	8d 83       	std	Y+5, r24	; 0x05
  if(adc.lp_otr >= 977) {		//no current now? 
     8fe:	43 e0       	ldi	r20, 0x03	; 3
     900:	81 3d       	cpi	r24, 0xD1	; 209
     902:	94 07       	cpc	r25, r20
     904:	48 f0       	brcs	.+18     	; 0x918 <CheckPins+0xbc>
     ChargePin10ms(TriPinRL,1);	 	//else: discharge for P-channel (Gate to VCC)
     906:	88 2d       	mov	r24, r8
     908:	61 e0       	ldi	r22, 0x01	; 1
     90a:	0e 94 13 04 	call	0x826	; 0x826 <ChargePin10ms>
     adc.lp_otr = ReadADC(LowPin);	//read voltage of Low-Pin again
     90e:	89 81       	ldd	r24, Y+1	; 0x01
     910:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
     914:	9e 83       	std	Y+6, r25	; 0x06
     916:	8d 83       	std	Y+5, r24	; 0x05
  lcd_clear_line();
  lcd_line2();
#endif

//  if(adc.lp_otr > 92) {  //there is some current without TristatePin current 
  if(adc.lp_otr > 455) {  //there is more than 650uA current without TristatePin current 
     918:	8d 81       	ldd	r24, Y+5	; 0x05
     91a:	9e 81       	ldd	r25, Y+6	; 0x06
     91c:	a1 e0       	ldi	r26, 0x01	; 1
     91e:	88 3c       	cpi	r24, 0xC8	; 200
     920:	9a 07       	cpc	r25, r26
     922:	08 f4       	brcc	.+2      	; 0x926 <CheckPins+0xca>
     924:	b8 c0       	rjmp	.+368    	; 0xa96 <CheckPins+0x23a>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test if N-JFET or if self-conducting N-MOSFET
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
     926:	8f 81       	ldd	r24, Y+7	; 0x07
     928:	89 29       	or	r24, r9
     92a:	84 b9       	out	0x04, r24	; 4
     adc.lp1 = W20msReadADC(LowPin);	//measure voltage at the assumed Source 
     92c:	89 81       	ldd	r24, Y+1	; 0x01
     92e:	0e 94 01 1a 	call	0x3402	; 0x3402 <W20msReadADC>
     932:	6c 01       	movw	r12, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     934:	8a 81       	ldd	r24, Y+2	; 0x02
     936:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
     93a:	7c 01       	movw	r14, r24
     R_PORT = TriPinRH;			//switch R_H for Tristate-Pin (probably Gate) to VCC
     93c:	95 b8       	out	0x05, r9	; 5
     adc.lp2 = W20msReadADC(LowPin);	//measure voltage at the assumed Source again
     93e:	89 81       	ldd	r24, Y+1	; 0x01
     940:	0e 94 01 1a 	call	0x3402	; 0x3402 <W20msReadADC>
     //If it is a self-conducting MOSFET or JFET, then must be: adc.lp2 > adc.lp1 
     if(adc.lp2>(adc.lp1+488)) {
     944:	96 01       	movw	r18, r12
     946:	28 51       	subi	r18, 0x18	; 24
     948:	3e 4f       	sbci	r19, 0xFE	; 254
     94a:	28 17       	cp	r18, r24
     94c:	39 07       	cpc	r19, r25
     94e:	08 f0       	brcs	.+2      	; 0x952 <CheckPins+0xf6>
     950:	47 c0       	rjmp	.+142    	; 0x9e0 <CheckPins+0x184>
        if (PartFound != PART_FET) {
     952:	80 91 07 01 	lds	r24, 0x0107
     956:	83 30       	cpi	r24, 0x03	; 3
     958:	09 f4       	brne	.+2      	; 0x95c <CheckPins+0x100>
     95a:	42 c0       	rjmp	.+132    	; 0x9e0 <CheckPins+0x184>
           //measure voltage at the  Gate, differ between MOSFET and JFET
           ADC_PORT = TXD_VAL;
     95c:	88 e0       	ldi	r24, 0x08	; 8
     95e:	88 b9       	out	0x08, r24	; 8
           ADC_DDR = LoADCm;	//Low-Pin fix to GND
     960:	bc 81       	ldd	r27, Y+4	; 0x04
     962:	b7 b9       	out	0x07, r27	; 7
           R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     964:	89 2d       	mov	r24, r9
     966:	80 2b       	or	r24, r16
     968:	84 b9       	out	0x04, r24	; 4
           R_PORT = TriPinRH | HiPinRL;	//switch R_L for High-Pin to VCC
     96a:	85 b9       	out	0x05, r24	; 5
           adc.lp2 = W20msReadADC(TristatePin); //read voltage of assumed Gate 
     96c:	8a 81       	ldd	r24, Y+2	; 0x02
     96e:	0e 94 01 1a 	call	0x3402	; 0x3402 <W20msReadADC>
           if(adc.lp2>3911) {  //MOSFET
     972:	ef e0       	ldi	r30, 0x0F	; 15
     974:	88 34       	cpi	r24, 0x48	; 72
     976:	9e 07       	cpc	r25, r30
     978:	28 f0       	brcs	.+10     	; 0x984 <CheckPins+0x128>
              PartFound = PART_FET;	//N-Kanal-MOSFET
     97a:	83 e0       	ldi	r24, 0x03	; 3
     97c:	80 93 07 01 	sts	0x0107, r24
              PartMode = PART_MODE_N_D_MOS; //Depletion-MOSFET
     980:	84 e0       	ldi	r24, 0x04	; 4
     982:	04 c0       	rjmp	.+8      	; 0x98c <CheckPins+0x130>
           } else {  //JFET (pn-passage between Gate and Source is conducting )
              PartFound = PART_FET;	//N-Kanal-JFET
     984:	83 e0       	ldi	r24, 0x03	; 3
     986:	80 93 07 01 	sts	0x0107, r24
              PartMode = PART_MODE_N_JFET;
     98a:	86 e0       	ldi	r24, 0x06	; 6
     98c:	80 93 06 01 	sts	0x0106, r24
           lcd_data('N');
           lcd_data('J');
#endif
//         if ((PartReady == 0) || (adc.lp1 > trans.uBE[0])) 
//         there is no way to find out the right Source / Drain
           trans.uBE[0] = adc.lp1;
     990:	d0 92 58 01 	sts	0x0158, r13
     994:	c0 92 57 01 	sts	0x0157, r12
           gthvoltage = adc.lp1 - adc.tp1;	//voltage GS (Source - Gate)
     998:	c6 01       	movw	r24, r12
     99a:	8e 19       	sub	r24, r14
     99c:	9f 09       	sbc	r25, r15
     99e:	90 93 60 01 	sts	0x0160, r25
     9a2:	80 93 5f 01 	sts	0x015F, r24
           trans.uBE[1] = (unsigned int)(((unsigned long)adc.lp1 * 1000) / RR680MI); // Id 0.01mA
     9a6:	b6 01       	movw	r22, r12
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	28 ee       	ldi	r18, 0xE8	; 232
     9ae:	33 e0       	ldi	r19, 0x03	; 3
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	50 e0       	ldi	r21, 0x00	; 0
     9b4:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
     9b8:	20 91 02 01 	lds	r18, 0x0102
     9bc:	30 91 03 01 	lds	r19, 0x0103
     9c0:	40 e0       	ldi	r20, 0x00	; 0
     9c2:	50 e0       	ldi	r21, 0x00	; 0
     9c4:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
     9c8:	30 93 5a 01 	sts	0x015A, r19
     9cc:	20 93 59 01 	sts	0x0159, r18
           trans.b = TristatePin;		//save Pin numbers found for this FET
     9d0:	fa 81       	ldd	r31, Y+2	; 0x02
     9d2:	f0 93 5b 01 	sts	0x015B, r31
           trans.c = HighPin;
     9d6:	10 93 5c 01 	sts	0x015C, r17
           trans.e = LowPin;
     9da:	29 81       	ldd	r18, Y+1	; 0x01
     9dc:	20 93 5d 01 	sts	0x015D, r18
        }
     }

     ADC_PORT = TXD_VAL;		// direct outputs to GND
     9e0:	88 e0       	ldi	r24, 0x08	; 8
     9e2:	88 b9       	out	0x08, r24	; 8

     //Test, if P-JFET or if self-conducting P-MOSFET
     ADC_DDR = LoADCm;		//switch Low-Pin (assumed Drain) direct to GND,
     9e4:	3c 81       	ldd	r19, Y+4	; 0x04
     9e6:	37 b9       	out	0x07, r19	; 7
				//R_H for Tristate-Pin (assumed Gate) is already switched to VCC
     R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     9e8:	89 2d       	mov	r24, r9
     9ea:	80 2b       	or	r24, r16
     9ec:	84 b9       	out	0x04, r24	; 4
     R_PORT = TriPinRH | HiPinRL;	//High-Pin across R_L to Vcc
     9ee:	85 b9       	out	0x05, r24	; 5
     adc.hp1 = W20msReadADC(HighPin);	//measure voltage at assumed Source 
     9f0:	81 2f       	mov	r24, r17
     9f2:	0e 94 01 1a 	call	0x3402	; 0x3402 <W20msReadADC>
     9f6:	6c 01       	movw	r12, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     9f8:	8a 81       	ldd	r24, Y+2	; 0x02
     9fa:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
     9fe:	7c 01       	movw	r14, r24
     R_PORT = HiPinRL;			//switch R_H for Tristate-Pin (assumed Gate) to GND
     a00:	05 b9       	out	0x05, r16	; 5
     adc.hp2 = W20msReadADC(HighPin);	//read voltage at assumed Source again
     a02:	81 2f       	mov	r24, r17
     a04:	0e 94 01 1a 	call	0x3402	; 0x3402 <W20msReadADC>
     //if it is a self-conducting P_MOSFET or P-JFET , then must be:  adc.hp1 > adc.hp2 
     if(adc.hp1>(adc.hp2+488)) {
     a08:	88 51       	subi	r24, 0x18	; 24
     a0a:	9e 4f       	sbci	r25, 0xFE	; 254
     a0c:	8c 15       	cp	r24, r12
     a0e:	9d 05       	cpc	r25, r13
     a10:	08 f0       	brcs	.+2      	; 0xa14 <CheckPins+0x1b8>
     a12:	41 c0       	rjmp	.+130    	; 0xa96 <CheckPins+0x23a>
        if (PartFound != PART_FET) {
     a14:	80 91 07 01 	lds	r24, 0x0107
     a18:	83 30       	cpi	r24, 0x03	; 3
     a1a:	e9 f1       	breq	.+122    	; 0xa96 <CheckPins+0x23a>
           //read voltage at the Gate , to differ between MOSFET and JFET
           ADC_PORT = HiADCp;	//switch High-Pin directly to VCC
     a1c:	4b 81       	ldd	r20, Y+3	; 0x03
     a1e:	48 b9       	out	0x08, r20	; 8
           ADC_DDR = HiADCm;	//switch High-Pin to output
     a20:	47 b9       	out	0x07, r20	; 7
           adc.tp2 = W20msReadADC(TristatePin); //read voltage at the assumed Gate 
     a22:	8a 81       	ldd	r24, Y+2	; 0x02
     a24:	0e 94 01 1a 	call	0x3402	; 0x3402 <W20msReadADC>
           if(adc.tp2<977) { 		//MOSFET
     a28:	a3 e0       	ldi	r26, 0x03	; 3
     a2a:	81 3d       	cpi	r24, 0xD1	; 209
     a2c:	9a 07       	cpc	r25, r26
     a2e:	28 f4       	brcc	.+10     	; 0xa3a <CheckPins+0x1de>
              PartFound = PART_FET;	//P-Kanal-MOSFET
     a30:	83 e0       	ldi	r24, 0x03	; 3
     a32:	80 93 07 01 	sts	0x0107, r24
              PartMode = PART_MODE_P_D_MOS; //Depletion-MOSFET
     a36:	85 e0       	ldi	r24, 0x05	; 5
     a38:	04 c0       	rjmp	.+8      	; 0xa42 <CheckPins+0x1e6>
           } else { 			//JFET (pn-passage between Gate and Source is conducting)
              PartFound = PART_FET;	//P-Kanal-JFET
     a3a:	83 e0       	ldi	r24, 0x03	; 3
     a3c:	80 93 07 01 	sts	0x0107, r24
              PartMode = PART_MODE_P_JFET;
     a40:	87 e0       	ldi	r24, 0x07	; 7
     a42:	80 93 06 01 	sts	0x0106, r24
           }
#if DebugOut == 5
           lcd_data('P');
           lcd_data('J');
#endif
           gthvoltage = adc.tp1 - adc.hp1;		//voltage GS (Gate - Source)
     a46:	ec 18       	sub	r14, r12
     a48:	fd 08       	sbc	r15, r13
     a4a:	f0 92 60 01 	sts	0x0160, r15
     a4e:	e0 92 5f 01 	sts	0x015F, r14
           trans.uBE[1] = (unsigned int)(((unsigned long)(ADCconfig.U_AVCC - adc.hp1) * 1000) / RR680PL); // Id 0.01mA
     a52:	60 91 40 01 	lds	r22, 0x0140
     a56:	70 91 41 01 	lds	r23, 0x0141
     a5a:	6c 19       	sub	r22, r12
     a5c:	7d 09       	sbc	r23, r13
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	28 ee       	ldi	r18, 0xE8	; 232
     a64:	33 e0       	ldi	r19, 0x03	; 3
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
     a6e:	20 91 08 01 	lds	r18, 0x0108
     a72:	30 91 09 01 	lds	r19, 0x0109
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
     a7e:	30 93 5a 01 	sts	0x015A, r19
     a82:	20 93 59 01 	sts	0x0159, r18
           trans.b = TristatePin;		//save Pin numbers found for this FET
     a86:	ba 81       	ldd	r27, Y+2	; 0x02
     a88:	b0 93 5b 01 	sts	0x015B, r27
           trans.c = LowPin;
     a8c:	e9 81       	ldd	r30, Y+1	; 0x01
     a8e:	e0 93 5c 01 	sts	0x015C, r30
           trans.e = HighPin;
     a92:	10 93 5d 01 	sts	0x015D, r17
  } // end component has current without TristatePin signal


#ifdef COMMON_COLLECTOR
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
     a96:	88 e0       	ldi	r24, 0x08	; 8
     a98:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;			// Collector direct to GND
     a9a:	fc 81       	ldd	r31, Y+4	; 0x04
     a9c:	f7 b9       	out	0x07, r31	; 7
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
     a9e:	05 b9       	out	0x05, r16	; 5
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
     aa0:	20 2f       	mov	r18, r16
     aa2:	28 29       	or	r18, r8
     aa4:	29 8b       	std	Y+17, r18	; 0x11
     aa6:	24 b9       	out	0x04, r18	; 4
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     aa8:	c0 90 40 01 	lds	r12, 0x0140
     aac:	d0 90 41 01 	lds	r13, 0x0141
     ab0:	81 2f       	mov	r24, r17
     ab2:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
     ab6:	7c 01       	movw	r14, r24
  adc.tp1 = ReadADC(TristatePin);	// voltage at the base resistor
     ab8:	8a 81       	ldd	r24, Y+2	; 0x02
     aba:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
     abe:	3c 01       	movw	r6, r24

  if (adc.tp1 < 10) {
     ac0:	8a 30       	cpi	r24, 0x0A	; 10
     ac2:	91 05       	cpc	r25, r1
     ac4:	68 f5       	brcc	.+90     	; 0xb20 <CheckPins+0x2c4>
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
     ac6:	89 2d       	mov	r24, r9
     ac8:	80 2b       	or	r24, r16
     aca:	84 b9       	out	0x04, r24	; 4
     adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);
     acc:	c0 90 40 01 	lds	r12, 0x0140
     ad0:	d0 90 41 01 	lds	r13, 0x0141
     ad4:	81 2f       	mov	r24, r17
     ad6:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
     ada:	c8 1a       	sub	r12, r24
     adc:	d9 0a       	sbc	r13, r25
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
     ade:	8a 81       	ldd	r24, Y+2	; 0x02
     ae0:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
     ae4:	3c 01       	movw	r6, r24
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     ae6:	16 01       	movw	r2, r12
     ae8:	44 24       	eor	r4, r4
     aea:	55 24       	eor	r5, r5
     aec:	20 91 08 01 	lds	r18, 0x0108
     af0:	30 91 09 01 	lds	r19, 0x0109
     af4:	40 e0       	ldi	r20, 0x00	; 0
     af6:	50 e0       	ldi	r21, 0x00	; 0
     af8:	60 e6       	ldi	r22, 0x60	; 96
     afa:	77 eb       	ldi	r23, 0xB7	; 183
     afc:	87 e4       	ldi	r24, 0x47	; 71
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
     b04:	c2 01       	movw	r24, r4
     b06:	b1 01       	movw	r22, r2
     b08:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
     b0c:	93 01       	movw	r18, r6
     b0e:	40 e0       	ldi	r20, 0x00	; 0
     b10:	50 e0       	ldi	r21, 0x00	; 0
  if (adc.tp1 < 10) {
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
     adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     b12:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
     b16:	28 87       	std	Y+8, r18	; 0x08
     b18:	39 87       	std	Y+9, r19	; 0x09
     b1a:	4a 87       	std	Y+10, r20	; 0x0a
     b1c:	5b 87       	std	Y+11, r21	; 0x0b
     b1e:	0f c0       	rjmp	.+30     	; 0xb3e <CheckPins+0x2e2>
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
  ADC_DDR = LoADCm;			// Collector direct to GND
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     b20:	ce 18       	sub	r12, r14
     b22:	df 08       	sbc	r13, r15
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
 #else
     c_hfe = ((adc.hp1 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp1/500);
 #endif
  } else {
     c_hfe = (unsigned long)((adc.hp1 - adc.tp1) / adc.tp1);
     b24:	c6 01       	movw	r24, r12
     b26:	86 19       	sub	r24, r6
     b28:	97 09       	sbc	r25, r7
     b2a:	b3 01       	movw	r22, r6
     b2c:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <__udivmodhi4>
     b30:	cb 01       	movw	r24, r22
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	88 87       	std	Y+8, r24	; 0x08
     b38:	99 87       	std	Y+9, r25	; 0x09
     b3a:	aa 87       	std	Y+10, r26	; 0x0a
     b3c:	bb 87       	std	Y+11, r27	; 0x0b
  }
#endif

  //set Pins again for circuit with common Emitter PNP
  R_DDR = LoPinRL;		//switch R_L port for Low-Pin to output (GND)
     b3e:	9f 81       	ldd	r25, Y+7	; 0x07
     b40:	94 b9       	out	0x04, r25	; 4
  R_PORT = 0;			//switch all resistor ports to GND
     b42:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = HiADCm;		//switch High-Pin to output
     b44:	ab 81       	ldd	r26, Y+3	; 0x03
     b46:	a7 b9       	out	0x07, r26	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
     b48:	a8 b9       	out	0x08, r26	; 8
  wait_about5ms();
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>
  
  if(adc.lp_otr < 977) {
     b52:	ed 81       	ldd	r30, Y+5	; 0x05
     b54:	fe 81       	ldd	r31, Y+6	; 0x06
     b56:	23 e0       	ldi	r18, 0x03	; 3
     b58:	e1 3d       	cpi	r30, 0xD1	; 209
     b5a:	f2 07       	cpc	r31, r18
     b5c:	08 f0       	brcs	.+2      	; 0xb60 <CheckPins+0x304>
     b5e:	bc c2       	rjmp	.+1400   	; 0x10d8 <CheckPins+0x87c>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test to PNP
     R_DDR = LoPinRL | TriPinRL;	//switch R_L port for Tristate-Pin to output (GND), for Test of PNP
     b60:	3f 81       	ldd	r19, Y+7	; 0x07
     b62:	38 29       	or	r19, r8
     b64:	3d 87       	std	Y+13, r19	; 0x0d
     b66:	34 b9       	out	0x04, r19	; 4
     adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
     if(adc.lp1 > 3422) {
     b6e:	4d e0       	ldi	r20, 0x0D	; 13
     b70:	8f 35       	cpi	r24, 0x5F	; 95
     b72:	94 07       	cpc	r25, r20
     b74:	08 f4       	brcc	.+2      	; 0xb78 <CheckPins+0x31c>
     b76:	e6 c0       	rjmp	.+460    	; 0xd44 <CheckPins+0x4e8>
        //component has current => PNP-Transistor or equivalent
        //compute current amplification factor in both directions
        R_DDR = LoPinRL | TriPinRH;	//switch R_H port for Tristate-Pin (Base) to output (GND)
     b78:	8f 81       	ldd	r24, Y+7	; 0x07
     b7a:	89 29       	or	r24, r9
     b7c:	8a 8b       	std	Y+18, r24	; 0x12
     b7e:	84 b9       	out	0x04, r24	; 4

        adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin (assumed Collector)
     b80:	89 81       	ldd	r24, Y+1	; 0x01
     b82:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
     b86:	5c 01       	movw	r10, r24
        adc.tp2 = ReadADC(TristatePin);	//measure voltage at TristatePin (Base) 
     b88:	8a 81       	ldd	r24, Y+2	; 0x02
     b8a:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
     b8e:	9d 8b       	std	Y+21, r25	; 0x15
     b90:	8c 8b       	std	Y+20, r24	; 0x14
        //check, if Test is done before 
        if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     b92:	80 91 07 01 	lds	r24, 0x0107
     b96:	82 50       	subi	r24, 0x02	; 2
     b98:	82 30       	cpi	r24, 0x02	; 2
     b9a:	18 f4       	brcc	.+6      	; 0xba2 <CheckPins+0x346>
           PartReady = 1;
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	80 93 04 01 	sts	0x0104, r24
        }
 #ifdef COMMON_EMITTER
        trans.uBE[PartReady] = ReadADC(HighPin) - adc.tp2;	// Base Emitter Voltage
     ba2:	e0 90 04 01 	lds	r14, 0x0104
     ba6:	ff 24       	eor	r15, r15
     ba8:	81 2f       	mov	r24, r17
     baa:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
     bae:	f7 01       	movw	r30, r14
     bb0:	ee 0f       	add	r30, r30
     bb2:	ff 1f       	adc	r31, r31
     bb4:	e9 5a       	subi	r30, 0xA9	; 169
     bb6:	fe 4f       	sbci	r31, 0xFE	; 254
     bb8:	ac 89       	ldd	r26, Y+20	; 0x14
     bba:	bd 89       	ldd	r27, Y+21	; 0x15
     bbc:	8a 1b       	sub	r24, r26
     bbe:	9b 0b       	sbc	r25, r27
     bc0:	91 83       	std	Z+1, r25	; 0x01
     bc2:	80 83       	st	Z, r24

        //compute current amplification factor for circuit with common Emitter
        //hFE = B = Collector current / Base current
        if(adc.tp2 < 53) {
     bc4:	a5 33       	cpi	r26, 0x35	; 53
     bc6:	b1 05       	cpc	r27, r1
     bc8:	20 f4       	brcc	.+8      	; 0xbd2 <CheckPins+0x376>
  #if DebugOut == 5
           lcd_data('<');
           lcd_data('5');
           lcd_data('3');
  #endif
           adc.tp2 = 53;
     bca:	e5 e3       	ldi	r30, 0x35	; 53
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	fd 8b       	std	Y+21, r31	; 0x15
     bd0:	ec 8b       	std	Y+20, r30	; 0x14
        }
        tmp16 = adc.lp1;
        if (tmp16 > adc.lp_otr) {
     bd2:	2d 81       	ldd	r18, Y+5	; 0x05
     bd4:	3e 81       	ldd	r19, Y+6	; 0x06
     bd6:	2a 15       	cp	r18, r10
     bd8:	3b 05       	cpc	r19, r11
     bda:	20 f4       	brcc	.+8      	; 0xbe4 <CheckPins+0x388>
           tmp16 -= adc.lp_otr;
     bdc:	15 01       	movw	r2, r10
     bde:	22 1a       	sub	r2, r18
     be0:	33 0a       	sbc	r3, r19
     be2:	01 c0       	rjmp	.+2      	; 0xbe6 <CheckPins+0x38a>
           lcd_data('3');
  #endif
           adc.tp2 = 53;
        }
        tmp16 = adc.lp1;
        if (tmp16 > adc.lp_otr) {
     be4:	15 01       	movw	r2, r10
           tmp16 -= adc.lp_otr;
        }

  #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     be6:	e0 90 04 01 	lds	r14, 0x0104
     bea:	ff 24       	eor	r15, r15
     bec:	44 24       	eor	r4, r4
     bee:	55 24       	eor	r5, r5
     bf0:	20 91 02 01 	lds	r18, 0x0102
     bf4:	30 91 03 01 	lds	r19, 0x0103
     bf8:	40 e0       	ldi	r20, 0x00	; 0
     bfa:	50 e0       	ldi	r21, 0x00	; 0
     bfc:	60 e6       	ldi	r22, 0x60	; 96
     bfe:	77 eb       	ldi	r23, 0xB7	; 183
     c00:	87 e4       	ldi	r24, 0x47	; 71
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
     c08:	c2 01       	movw	r24, r4
     c0a:	b1 01       	movw	r22, r2
     c0c:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
                 (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
     c10:	ac 89       	ldd	r26, Y+20	; 0x14
     c12:	bd 89       	ldd	r27, Y+21	; 0x15
     c14:	9d 01       	movw	r18, r26
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
        if (tmp16 > adc.lp_otr) {
           tmp16 -= adc.lp_otr;
        }

  #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     c1e:	f7 01       	movw	r30, r14
     c20:	ee 0f       	add	r30, r30
     c22:	ff 1f       	adc	r31, r31
     c24:	ee 0f       	add	r30, r30
     c26:	ff 1f       	adc	r31, r31
     c28:	e1 5b       	subi	r30, 0xB1	; 177
     c2a:	fe 4f       	sbci	r31, 0xFE	; 254
     c2c:	20 83       	st	Z, r18
     c2e:	31 83       	std	Z+1, r19	; 0x01
     c30:	42 83       	std	Z+2, r20	; 0x02
     c32:	53 83       	std	Z+3, r21	; 0x03
 #endif
#ifdef COMMON_COLLECTOR
        //current amplification factor for common  Collector (Emitter follower)
        // c_hFE = (Emitter current - Base current) / Base current
 #ifdef COMMON_EMITTER
        if (c_hfe > trans.hfe[PartReady]) {
     c34:	88 85       	ldd	r24, Y+8	; 0x08
     c36:	99 85       	ldd	r25, Y+9	; 0x09
     c38:	aa 85       	ldd	r26, Y+10	; 0x0a
     c3a:	bb 85       	ldd	r27, Y+11	; 0x0b
     c3c:	28 17       	cp	r18, r24
     c3e:	39 07       	cpc	r19, r25
     c40:	4a 07       	cpc	r20, r26
     c42:	5b 07       	cpc	r21, r27
     c44:	98 f4       	brcc	.+38     	; 0xc6c <CheckPins+0x410>
 #endif
           trans.hfe[PartReady] = c_hfe;
     c46:	80 83       	st	Z, r24
     c48:	91 83       	std	Z+1, r25	; 0x01
     c4a:	a2 83       	std	Z+2, r26	; 0x02
     c4c:	b3 83       	std	Z+3, r27	; 0x03
           trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.hp1 - adc.tp1;	// Base Emitter Voltage common collector
     c4e:	f7 01       	movw	r30, r14
     c50:	ee 0f       	add	r30, r30
     c52:	ff 1f       	adc	r31, r31
     c54:	e9 5a       	subi	r30, 0xA9	; 169
     c56:	fe 4f       	sbci	r31, 0xFE	; 254
     c58:	80 91 40 01 	lds	r24, 0x0140
     c5c:	90 91 41 01 	lds	r25, 0x0141
     c60:	8c 19       	sub	r24, r12
     c62:	9d 09       	sbc	r25, r13
     c64:	86 19       	sub	r24, r6
     c66:	97 09       	sbc	r25, r7
     c68:	91 83       	std	Z+1, r25	; 0x01
     c6a:	80 83       	st	Z, r24
        }
 #endif
#endif

 
        if(PartFound != PART_THYRISTOR) {
     c6c:	80 91 07 01 	lds	r24, 0x0107
     c70:	85 30       	cpi	r24, 0x05	; 5
     c72:	09 f4       	brne	.+2      	; 0xc76 <CheckPins+0x41a>
     c74:	67 c0       	rjmp	.+206    	; 0xd44 <CheckPins+0x4e8>
           if(adc.tp2 > 977) {
     c76:	ac 89       	ldd	r26, Y+20	; 0x14
     c78:	bd 89       	ldd	r27, Y+21	; 0x15
     c7a:	e3 e0       	ldi	r30, 0x03	; 3
     c7c:	a2 3d       	cpi	r26, 0xD2	; 210
     c7e:	be 07       	cpc	r27, r30
     c80:	30 f0       	brcs	.+12     	; 0xc8e <CheckPins+0x432>
              //PNP-Transistor is found (Base voltage moves to VCC)
              PartFound = PART_TRANSISTOR;
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	80 93 07 01 	sts	0x0107, r24
              PartMode = PART_MODE_PNP;
     c88:	80 93 06 01 	sts	0x0106, r24
     c8c:	53 c0       	rjmp	.+166    	; 0xd34 <CheckPins+0x4d8>
           } else {
              if((adc.lp_otr < 97) && (adc.lp1 > 2000)) {
     c8e:	2d 81       	ldd	r18, Y+5	; 0x05
     c90:	3e 81       	ldd	r19, Y+6	; 0x06
     c92:	21 36       	cpi	r18, 0x61	; 97
     c94:	31 05       	cpc	r19, r1
     c96:	08 f0       	brcs	.+2      	; 0xc9a <CheckPins+0x43e>
     c98:	4d c0       	rjmp	.+154    	; 0xd34 <CheckPins+0x4d8>
     c9a:	31 ed       	ldi	r19, 0xD1	; 209
     c9c:	a3 16       	cp	r10, r19
     c9e:	37 e0       	ldi	r19, 0x07	; 7
     ca0:	b3 06       	cpc	r11, r19
     ca2:	08 f4       	brcc	.+2      	; 0xca6 <CheckPins+0x44a>
     ca4:	47 c0       	rjmp	.+142    	; 0xd34 <CheckPins+0x4d8>
                 //is flow voltage low enough in the closed  state?
                 //(since D-Mode-FET would be by mistake detected as E-Mode )
        	 PartFound = PART_FET;		//P-Kanal-MOSFET is found (Basis/Gate moves not to VCC)
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	80 93 07 01 	sts	0x0107, r24
        	 PartMode = PART_MODE_P_E_MOS;
     cac:	80 93 06 01 	sts	0x0106, r24
        	 //measure the Gate threshold voltage
                 //Switching of Drain is monitored with digital input
                 // Low level is specified up to 0.3 * VCC
                 // High level is specified above 0.6 * VCC
                 PinMSK = LoADCm & 7;
     cb0:	cc 80       	ldd	r12, Y+4	; 0x04
     cb2:	47 e0       	ldi	r20, 0x07	; 7
     cb4:	c4 22       	and	r12, r20
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
     cb6:	8a 81       	ldd	r24, Y+2	; 0x02
     cb8:	80 64       	ori	r24, 0x40	; 64
     cba:	80 93 7c 00 	sts	0x007C, r24
        	 gthvoltage = 1;			// round up ((1*4)/9)
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	90 93 60 01 	sts	0x0160, r25
     cc6:	80 93 5f 01 	sts	0x015F, r24
     cca:	4b e0       	ldi	r20, 0x0B	; 11
     ccc:	e4 2e       	mov	r14, r20
        	 for(ii=0;ii<11;ii++) {
        	    wdt_reset();
     cce:	a8 95       	wdr
        	    ChargePin10ms(TriPinRL,1);
     cd0:	88 2d       	mov	r24, r8
     cd2:	61 e0       	ldi	r22, 0x01	; 1
     cd4:	0e 94 13 04 	call	0x826	; 0x826 <ChargePin10ms>
                    R_DDR = LoPinRL | TriPinRH;		//switch R_H for Tristate-Pin (Basis) to GND
     cd8:	8a 89       	ldd	r24, Y+18	; 0x12
     cda:	84 b9       	out	0x04, r24	; 4
        	    while (!(ADC_PIN&PinMSK));		// Wait, until the MOSFET switches and Drain moves to VCC
     cdc:	86 b1       	in	r24, 0x06	; 6
     cde:	8c 21       	and	r24, r12
     ce0:	e9 f3       	breq	.-6      	; 0xcdc <CheckPins+0x480>
                    			// 1 is detected with more than 2.5V (up to 2.57V) with tests of mega168 and mega328
        	    R_DDR = LoPinRL;
     ce2:	9f 81       	ldd	r25, Y+7	; 0x07
     ce4:	94 b9       	out	0x04, r25	; 4
        	    ADCSRA |= (1<<ADSC);		// Start Conversion
     ce6:	80 91 7a 00 	lds	r24, 0x007A
     cea:	80 64       	ori	r24, 0x40	; 64
     cec:	80 93 7a 00 	sts	0x007A, r24
        	    while (ADCSRA&(1<<ADSC));		// wait
     cf0:	80 91 7a 00 	lds	r24, 0x007A
     cf4:	86 fd       	sbrc	r24, 6
     cf6:	fc cf       	rjmp	.-8      	; 0xcf0 <CheckPins+0x494>
      		    gthvoltage += (1023 - ADCW);	// Add Tristatepin-Voltage
     cf8:	20 91 78 00 	lds	r18, 0x0078
     cfc:	30 91 79 00 	lds	r19, 0x0079
     d00:	80 91 5f 01 	lds	r24, 0x015F
     d04:	90 91 60 01 	lds	r25, 0x0160
     d08:	81 50       	subi	r24, 0x01	; 1
     d0a:	9c 4f       	sbci	r25, 0xFC	; 252
     d0c:	82 1b       	sub	r24, r18
     d0e:	93 0b       	sbc	r25, r19
     d10:	90 93 60 01 	sts	0x0160, r25
     d14:	80 93 5f 01 	sts	0x015F, r24
     d18:	ea 94       	dec	r14
                 // Low level is specified up to 0.3 * VCC
                 // High level is specified above 0.6 * VCC
                 PinMSK = LoADCm & 7;
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
        	 gthvoltage = 1;			// round up ((1*4)/9)
        	 for(ii=0;ii<11;ii++) {
     d1a:	c9 f6       	brne	.-78     	; 0xcce <CheckPins+0x472>
        	    R_DDR = LoPinRL;
        	    ADCSRA |= (1<<ADSC);		// Start Conversion
        	    while (ADCSRA&(1<<ADSC));		// wait
      		    gthvoltage += (1023 - ADCW);	// Add Tristatepin-Voltage
                 }
                 gthvoltage *= 4;		// is equal to 44*ADCW
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
                 gthvoltage /= 9;		// gives resolution in mV
     d24:	69 e0       	ldi	r22, 0x09	; 9
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <__udivmodhi4>
     d2c:	70 93 60 01 	sts	0x0160, r23
     d30:	60 93 5f 01 	sts	0x015F, r22
              }
           }
           trans.b = TristatePin;
     d34:	aa 81       	ldd	r26, Y+2	; 0x02
     d36:	a0 93 5b 01 	sts	0x015B, r26
           trans.c = LowPin;
     d3a:	b9 81       	ldd	r27, Y+1	; 0x01
     d3c:	b0 93 5c 01 	sts	0x015C, r27
           trans.e = HighPin;
     d40:	10 93 5d 01 	sts	0x015D, r17
        }  // end if PartFound != PART_THYRISTOR
    } // end component has current => PNP

#ifdef COMMON_COLLECTOR
    // Low-Pin=RL- HighPin=VCC
    R_DDR = LoPinRL | TriPinRL;
     d44:	ed 85       	ldd	r30, Y+13	; 0x0d
     d46:	e4 b9       	out	0x04, r30	; 4
    R_PORT = TriPinRL;			// TriPin=RL+  NPN with common Collector
     d48:	85 b8       	out	0x05, r8	; 5
    adc.lp1 = W5msReadADC(LowPin);	// voltage at Emitter resistor
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
     d50:	99 87       	std	Y+9, r25	; 0x09
     d52:	88 87       	std	Y+8, r24	; 0x08
    adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     d54:	20 91 40 01 	lds	r18, 0x0140
     d58:	30 91 41 01 	lds	r19, 0x0141
     d5c:	3d 8b       	std	Y+21, r19	; 0x15
     d5e:	2c 8b       	std	Y+20, r18	; 0x14
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
     d66:	ac 89       	ldd	r26, Y+20	; 0x14
     d68:	bd 89       	ldd	r27, Y+21	; 0x15
     d6a:	a8 1b       	sub	r26, r24
     d6c:	b9 0b       	sbc	r27, r25
     d6e:	bd 8b       	std	Y+21, r27	; 0x15
     d70:	ac 8b       	std	Y+20, r26	; 0x14
    if (adc.tp1 < 10) {
     d72:	aa 30       	cpi	r26, 0x0A	; 10
     d74:	b1 05       	cpc	r27, r1
     d76:	c8 f5       	brcc	.+114    	; 0xdea <CheckPins+0x58e>
       R_DDR = LoPinRL | TriPinRH;
     d78:	8f 81       	ldd	r24, Y+7	; 0x07
     d7a:	89 29       	or	r24, r9
     d7c:	84 b9       	out	0x04, r24	; 4
       R_PORT = TriPinRH;		// Tripin=RH+
     d7e:	95 b8       	out	0x05, r9	; 5
       adc.lp1 = W5msReadADC(LowPin);
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
     d86:	99 87       	std	Y+9, r25	; 0x09
     d88:	88 87       	std	Y+8, r24	; 0x08
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     d8a:	e0 91 40 01 	lds	r30, 0x0140
     d8e:	f0 91 41 01 	lds	r31, 0x0141
     d92:	fd 8b       	std	Y+21, r31	; 0x15
     d94:	ec 8b       	std	Y+20, r30	; 0x14
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
     d9c:	2c 89       	ldd	r18, Y+20	; 0x14
     d9e:	3d 89       	ldd	r19, Y+21	; 0x15
     da0:	28 1b       	sub	r18, r24
     da2:	39 0b       	sbc	r19, r25
     da4:	3d 8b       	std	Y+21, r19	; 0x15
     da6:	2c 8b       	std	Y+20, r18	; 0x14
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     da8:	88 85       	ldd	r24, Y+8	; 0x08
     daa:	99 85       	ldd	r25, Y+9	; 0x09
     dac:	6c 01       	movw	r12, r24
     dae:	ee 24       	eor	r14, r14
     db0:	ff 24       	eor	r15, r15
     db2:	20 91 02 01 	lds	r18, 0x0102
     db6:	30 91 03 01 	lds	r19, 0x0103
     dba:	40 e0       	ldi	r20, 0x00	; 0
     dbc:	50 e0       	ldi	r21, 0x00	; 0
     dbe:	60 e6       	ldi	r22, 0x60	; 96
     dc0:	77 eb       	ldi	r23, 0xB7	; 183
     dc2:	87 e4       	ldi	r24, 0x47	; 71
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
     dca:	c7 01       	movw	r24, r14
     dcc:	b6 01       	movw	r22, r12
     dce:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
     dd2:	ac 89       	ldd	r26, Y+20	; 0x14
     dd4:	bd 89       	ldd	r27, Y+21	; 0x15
     dd6:	9d 01       	movw	r18, r26
     dd8:	40 e0       	ldi	r20, 0x00	; 0
     dda:	50 e0       	ldi	r21, 0x00	; 0
       R_DDR = LoPinRL | TriPinRH;
       R_PORT = TriPinRH;		// Tripin=RH+
       adc.lp1 = W5msReadADC(LowPin);
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     ddc:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
     de0:	2d 87       	std	Y+13, r18	; 0x0d
     de2:	3e 87       	std	Y+14, r19	; 0x0e
     de4:	4f 87       	std	Y+15, r20	; 0x0f
     de6:	58 8b       	std	Y+16, r21	; 0x10
     de8:	10 c0       	rjmp	.+32     	; 0xe0a <CheckPins+0x5ae>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
 #else
       c_hfe = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
    } else {
       c_hfe = (adc.lp1 - adc.tp1) / adc.tp1;
     dea:	88 85       	ldd	r24, Y+8	; 0x08
     dec:	99 85       	ldd	r25, Y+9	; 0x09
     dee:	ec 89       	ldd	r30, Y+20	; 0x14
     df0:	fd 89       	ldd	r31, Y+21	; 0x15
     df2:	8e 1b       	sub	r24, r30
     df4:	9f 0b       	sbc	r25, r31
     df6:	bf 01       	movw	r22, r30
     df8:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <__udivmodhi4>
     dfc:	cb 01       	movw	r24, r22
     dfe:	a0 e0       	ldi	r26, 0x00	; 0
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	8d 87       	std	Y+13, r24	; 0x0d
     e04:	9e 87       	std	Y+14, r25	; 0x0e
     e06:	af 87       	std	Y+15, r26	; 0x0f
     e08:	b8 8b       	std	Y+16, r27	; 0x10
       lcd_string(utoa(adc.tp1,outval,10));
       wait_about1s();
#endif
#endif
    //Tristate (can be Base) to VCC, Test if NPN
    ADC_DDR = LoADCm;		//Low-Pin to output 0V
     e0a:	9c 81       	ldd	r25, Y+4	; 0x04
     e0c:	97 b9       	out	0x07, r25	; 7
    ADC_PORT = TXD_VAL;			//switch Low-Pin to GND
     e0e:	88 e0       	ldi	r24, 0x08	; 8
     e10:	88 b9       	out	0x08, r24	; 8
    R_DDR = TriPinRL | HiPinRL;		//RL port for High-Pin and Tristate-Pin to output
     e12:	a9 89       	ldd	r26, Y+17	; 0x11
     e14:	a4 b9       	out	0x04, r26	; 4
    R_PORT = TriPinRL | HiPinRL;	//RL port for High-Pin and Tristate-Pin to Vcc
     e16:	a5 b9       	out	0x05, r26	; 5
    adc.hp1 = W5msReadADC(HighPin);	//measure voltage at High-Pin  (Collector)
     e18:	81 2f       	mov	r24, r17
     e1a:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
    if(adc.hp1 < 1600) {
     e1e:	b6 e0       	ldi	r27, 0x06	; 6
     e20:	80 34       	cpi	r24, 0x40	; 64
     e22:	9b 07       	cpc	r25, r27
     e24:	08 f0       	brcs	.+2      	; 0xe28 <CheckPins+0x5cc>
     e26:	54 c1       	rjmp	.+680    	; 0x10d0 <CheckPins+0x874>
       lcd_data('N');
       lcd_testpin(HighPin);
       lcd_space();
       wait_about1s();
#endif
       if(PartReady==1) {
     e28:	80 91 04 01 	lds	r24, 0x0104
     e2c:	81 30       	cpi	r24, 0x01	; 1
     e2e:	09 f4       	brne	.+2      	; 0xe32 <CheckPins+0x5d6>
     e30:	e3 c1       	rjmp	.+966    	; 0x11f8 <CheckPins+0x99c>
          goto widmes;
       }

       //Test auf Thyristor:
       //Gate discharge
       ChargePin10ms(TriPinRL,0);	//Tristate-Pin (Gate) across R_L 10ms to GND
     e32:	88 2d       	mov	r24, r8
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	0e 94 13 04 	call	0x826	; 0x826 <ChargePin10ms>
       adc.hp3 = W5msReadADC(HighPin);	//read voltage at High-Pin (probably Anode) again
     e3a:	81 2f       	mov	r24, r17
     e3c:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
     e40:	7c 01       	movw	r14, r24
					//current should still flow, if not,
					// no Thyristor or holding current to low 
		 	
       R_PORT = 0;			//switch R_L for High-Pin (probably Anode) to GND (turn off)
     e42:	15 b8       	out	0x05, r1	; 5
       wait_about5ms();
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>
       R_PORT = HiPinRL;		//switch R_L for High-Pin (probably Anode) again to VCC
     e4c:	05 b9       	out	0x05, r16	; 5
       adc.hp2 = W5msReadADC(HighPin);	//measure voltage at the High-Pin (probably Anode) again
     e4e:	81 2f       	mov	r24, r17
     e50:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
       if((adc.hp3 < 1600) && (adc.hp2 > 4400)) {
     e54:	e0 e4       	ldi	r30, 0x40	; 64
     e56:	ee 16       	cp	r14, r30
     e58:	e6 e0       	ldi	r30, 0x06	; 6
     e5a:	fe 06       	cpc	r15, r30
     e5c:	08 f0       	brcs	.+2      	; 0xe60 <CheckPins+0x604>
     e5e:	47 c0       	rjmp	.+142    	; 0xeee <CheckPins+0x692>
     e60:	f1 e1       	ldi	r31, 0x11	; 17
     e62:	81 33       	cpi	r24, 0x31	; 49
     e64:	9f 07       	cpc	r25, r31
     e66:	08 f4       	brcc	.+2      	; 0xe6a <CheckPins+0x60e>
     e68:	42 c0       	rjmp	.+132    	; 0xeee <CheckPins+0x692>
          //if the holding current was switched off the thyristor must be switched off too. 
          //if Thyristor was still swiched on, if gate was switched off => Thyristor
          PartFound = PART_THYRISTOR;
     e6a:	85 e0       	ldi	r24, 0x05	; 5
     e6c:	80 93 07 01 	sts	0x0107, r24
          //Test if Triac
          R_DDR = 0;
     e70:	14 b8       	out	0x04, r1	; 4
          R_PORT = 0;
     e72:	15 b8       	out	0x05, r1	; 5
          ADC_PORT = LoADCp;	//Low-Pin fix to VCC
     e74:	2c 81       	ldd	r18, Y+4	; 0x04
     e76:	28 b9       	out	0x08, r18	; 8
          wait_about5ms();
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>
          R_DDR = HiPinRL;		//switch R_L port HighPin to output (GND)
     e80:	04 b9       	out	0x04, r16	; 4
          if(W5msReadADC(HighPin) > 244) {
     e82:	81 2f       	mov	r24, r17
     e84:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
     e88:	85 3f       	cpi	r24, 0xF5	; 245
     e8a:	91 05       	cpc	r25, r1
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <CheckPins+0x634>
     e8e:	18 c1       	rjmp	.+560    	; 0x10c0 <CheckPins+0x864>
             goto savenresult;		//measure voltage at the  High-Pin (probably A2); if too high:
                                	//component has current => kein Triac
          }
          R_DDR = HiPinRL | TriPinRL;	//switch R_L port for TristatePin (Gate) to output (GND) => Triac should be triggered 
     e90:	39 89       	ldd	r19, Y+17	; 0x11
     e92:	34 b9       	out	0x04, r19	; 4
          if(W5msReadADC(TristatePin) < 977) {
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
     e9a:	43 e0       	ldi	r20, 0x03	; 3
     e9c:	81 3d       	cpi	r24, 0xD1	; 209
     e9e:	94 07       	cpc	r25, r20
     ea0:	08 f4       	brcc	.+2      	; 0xea4 <CheckPins+0x648>
     ea2:	0e c1       	rjmp	.+540    	; 0x10c0 <CheckPins+0x864>
             goto savenresult; 		//measure voltage at the Tristate-Pin (probably Gate) ;
                              		// if to low, abort 
          }
          if(ReadADC(HighPin) < 733) {
     ea4:	81 2f       	mov	r24, r17
     ea6:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
     eaa:	a2 e0       	ldi	r26, 0x02	; 2
     eac:	8d 3d       	cpi	r24, 0xDD	; 221
     eae:	9a 07       	cpc	r25, r26
     eb0:	08 f4       	brcc	.+2      	; 0xeb4 <CheckPins+0x658>
     eb2:	06 c1       	rjmp	.+524    	; 0x10c0 <CheckPins+0x864>
             goto savenresult; 		//component has no current => no Triac => abort
          }
          R_DDR = HiPinRL;		//TristatePin (Gate) to input 
     eb4:	04 b9       	out	0x04, r16	; 4
          if(W5msReadADC(HighPin) < 733) {
     eb6:	81 2f       	mov	r24, r17
     eb8:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
     ebc:	b2 e0       	ldi	r27, 0x02	; 2
     ebe:	8d 3d       	cpi	r24, 0xDD	; 221
     ec0:	9b 07       	cpc	r25, r27
     ec2:	08 f4       	brcc	.+2      	; 0xec6 <CheckPins+0x66a>
     ec4:	fd c0       	rjmp	.+506    	; 0x10c0 <CheckPins+0x864>
             goto savenresult; 		//component has no current without base current => no Triac => abort
          }
          R_PORT = HiPinRL;		//switch R_L port for HighPin to VCC => switch off holding current 
     ec6:	05 b9       	out	0x05, r16	; 5
          wait_about5ms();
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>
          R_PORT = 0;			//switch R_L port for HighPin again to GND; Triac should now switched off
     ed0:	15 b8       	out	0x05, r1	; 5
          if(W5msReadADC(HighPin) > 244) {
     ed2:	81 2f       	mov	r24, r17
     ed4:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
     ed8:	85 3f       	cpi	r24, 0xF5	; 245
     eda:	91 05       	cpc	r25, r1
     edc:	08 f0       	brcs	.+2      	; 0xee0 <CheckPins+0x684>
     ede:	f0 c0       	rjmp	.+480    	; 0x10c0 <CheckPins+0x864>
             goto savenresult;		//measure voltage at the High-Pin (probably A2) ;
                                	//if to high, component is not switched off => no Triac, abort
         }
         PartFound = PART_TRIAC;
     ee0:	84 e0       	ldi	r24, 0x04	; 4
     ee2:	80 93 07 01 	sts	0x0107, r24
         PartReady = 1;
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	80 93 04 01 	sts	0x0104, r24
         goto savenresult;
     eec:	e9 c0       	rjmp	.+466    	; 0x10c0 <CheckPins+0x864>
        }
      //Test if NPN Transistor or MOSFET
      // ADC_DDR = LoADCm;	//Low-Pin to output 0V
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
     eee:	90 2a       	or	r9, r16
     ef0:	94 b8       	out	0x04, r9	; 4
      R_PORT = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to VCC
     ef2:	95 b8       	out	0x05, r9	; 5
      wait_about50ms();
     ef4:	8a e0       	ldi	r24, 0x0A	; 10
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>
      adc.hp2 = ADCconfig.U_AVCC - ReadADC(HighPin);	//measure the voltage at the collector resistor 
     efc:	a0 90 40 01 	lds	r10, 0x0140
     f00:	b0 90 41 01 	lds	r11, 0x0141
     f04:	81 2f       	mov	r24, r17
     f06:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
     f0a:	a8 1a       	sub	r10, r24
     f0c:	b9 0a       	sbc	r11, r25
      adc.tp2 = ADCconfig.U_AVCC - ReadADC(TristatePin);	//measure the voltage at the base resistor 
     f0e:	c0 90 40 01 	lds	r12, 0x0140
     f12:	d0 90 41 01 	lds	r13, 0x0141
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
     f1c:	c8 1a       	sub	r12, r24
     f1e:	d9 0a       	sbc	r13, r25
       lcd_space();
       lcd_data('T');
       lcd_data('P');
       lcd_string(utoa(adc.tp2,outval,10));
#endif
      if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     f20:	80 91 07 01 	lds	r24, 0x0107
     f24:	82 50       	subi	r24, 0x02	; 2
     f26:	82 30       	cpi	r24, 0x02	; 2
     f28:	18 f4       	brcc	.+6      	; 0xf30 <CheckPins+0x6d4>
         PartReady = 1;	//check, if test is already done once
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	80 93 04 01 	sts	0x0104, r24
      }
 #ifdef COMMON_EMITTER
      trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.tp2 - ReadADC(LowPin);
     f30:	60 90 04 01 	lds	r6, 0x0104
     f34:	77 24       	eor	r7, r7
     f36:	e0 90 40 01 	lds	r14, 0x0140
     f3a:	f0 90 41 01 	lds	r15, 0x0141
     f3e:	ec 18       	sub	r14, r12
     f40:	fd 08       	sbc	r15, r13
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
     f48:	f3 01       	movw	r30, r6
     f4a:	ee 0f       	add	r30, r30
     f4c:	ff 1f       	adc	r31, r31
     f4e:	e9 5a       	subi	r30, 0xA9	; 169
     f50:	fe 4f       	sbci	r31, 0xFE	; 254
     f52:	e8 1a       	sub	r14, r24
     f54:	f9 0a       	sbc	r15, r25
     f56:	f1 82       	std	Z+1, r15	; 0x01
     f58:	e0 82       	st	Z, r14

      //compute current amplification factor for common Emitter
      //hFE = B = Collector current / Base current
      if(adc.tp2 < 53) {
     f5a:	e5 e3       	ldi	r30, 0x35	; 53
     f5c:	ce 16       	cp	r12, r30
     f5e:	d1 04       	cpc	r13, r1
     f60:	18 f4       	brcc	.+6      	; 0xf68 <CheckPins+0x70c>
  #if DebugOut == 5
         lcd_data('<');
         lcd_data('5');
         lcd_data('3');
  #endif
         adc.tp2 = 53;
     f62:	85 e3       	ldi	r24, 0x35	; 53
     f64:	c8 2e       	mov	r12, r24
     f66:	d1 2c       	mov	r13, r1
      }
      tmp16 = adc.hp2;
      if (tmp16 > adc.lp_otr) {
     f68:	2d 81       	ldd	r18, Y+5	; 0x05
     f6a:	3e 81       	ldd	r19, Y+6	; 0x06
     f6c:	2a 15       	cp	r18, r10
     f6e:	3b 05       	cpc	r19, r11
     f70:	20 f4       	brcc	.+8      	; 0xf7a <CheckPins+0x71e>
         tmp16 -= adc.lp_otr;
     f72:	15 01       	movw	r2, r10
     f74:	22 1a       	sub	r2, r18
     f76:	33 0a       	sbc	r3, r19
     f78:	01 c0       	rjmp	.+2      	; 0xf7c <CheckPins+0x720>
         lcd_data('3');
  #endif
         adc.tp2 = 53;
      }
      tmp16 = adc.hp2;
      if (tmp16 > adc.lp_otr) {
     f7a:	15 01       	movw	r2, r10
         tmp16 -= adc.lp_otr;
      }

  #ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     f7c:	e0 90 04 01 	lds	r14, 0x0104
     f80:	ff 24       	eor	r15, r15
     f82:	44 24       	eor	r4, r4
     f84:	55 24       	eor	r5, r5
     f86:	20 91 08 01 	lds	r18, 0x0108
     f8a:	30 91 09 01 	lds	r19, 0x0109
     f8e:	40 e0       	ldi	r20, 0x00	; 0
     f90:	50 e0       	ldi	r21, 0x00	; 0
     f92:	60 e6       	ldi	r22, 0x60	; 96
     f94:	77 eb       	ldi	r23, 0xB7	; 183
     f96:	87 e4       	ldi	r24, 0x47	; 71
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
     f9e:	c2 01       	movw	r24, r4
     fa0:	b1 01       	movw	r22, r2
     fa2:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp2;	
     fa6:	96 01       	movw	r18, r12
     fa8:	40 e0       	ldi	r20, 0x00	; 0
     faa:	50 e0       	ldi	r21, 0x00	; 0
     fac:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
      if (tmp16 > adc.lp_otr) {
         tmp16 -= adc.lp_otr;
      }

  #ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     fb0:	f7 01       	movw	r30, r14
     fb2:	ee 0f       	add	r30, r30
     fb4:	ff 1f       	adc	r31, r31
     fb6:	ee 0f       	add	r30, r30
     fb8:	ff 1f       	adc	r31, r31
     fba:	e1 5b       	subi	r30, 0xB1	; 177
     fbc:	fe 4f       	sbci	r31, 0xFE	; 254
     fbe:	20 83       	st	Z, r18
     fc0:	31 83       	std	Z+1, r19	; 0x01
     fc2:	42 83       	std	Z+2, r20	; 0x02
     fc4:	53 83       	std	Z+3, r21	; 0x03
 #endif
#ifdef COMMON_COLLECTOR
       //compare current amplification factor for common Collector (Emitter follower)
       // hFE = (Emitterstrom - Basisstrom) / Basisstrom
 #ifdef COMMON_EMITTER
       if (c_hfe >  trans.hfe[PartReady]) {
     fc6:	8d 85       	ldd	r24, Y+13	; 0x0d
     fc8:	9e 85       	ldd	r25, Y+14	; 0x0e
     fca:	af 85       	ldd	r26, Y+15	; 0x0f
     fcc:	b8 89       	ldd	r27, Y+16	; 0x10
     fce:	28 17       	cp	r18, r24
     fd0:	39 07       	cpc	r19, r25
     fd2:	4a 07       	cpc	r20, r26
     fd4:	5b 07       	cpc	r21, r27
     fd6:	b8 f4       	brcc	.+46     	; 0x1006 <CheckPins+0x7aa>
 #endif
          trans.hfe[PartReady] = c_hfe;
     fd8:	80 83       	st	Z, r24
     fda:	91 83       	std	Z+1, r25	; 0x01
     fdc:	a2 83       	std	Z+2, r26	; 0x02
     fde:	b3 83       	std	Z+3, r27	; 0x03
          trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.lp1 - adc.tp1;
     fe0:	f7 01       	movw	r30, r14
     fe2:	ee 0f       	add	r30, r30
     fe4:	ff 1f       	adc	r31, r31
     fe6:	e9 5a       	subi	r30, 0xA9	; 169
     fe8:	fe 4f       	sbci	r31, 0xFE	; 254
     fea:	80 91 40 01 	lds	r24, 0x0140
     fee:	90 91 41 01 	lds	r25, 0x0141
     ff2:	a8 85       	ldd	r26, Y+8	; 0x08
     ff4:	b9 85       	ldd	r27, Y+9	; 0x09
     ff6:	8a 1b       	sub	r24, r26
     ff8:	9b 0b       	sbc	r25, r27
     ffa:	2c 89       	ldd	r18, Y+20	; 0x14
     ffc:	3d 89       	ldd	r19, Y+21	; 0x15
     ffe:	82 1b       	sub	r24, r18
    1000:	93 0b       	sbc	r25, r19
    1002:	91 83       	std	Z+1, r25	; 0x01
    1004:	80 83       	st	Z, r24
 #ifdef COMMON_EMITTER
       }
 #endif
#endif

      if(adc.tp2 > 2557) {		// Basis-voltage R_H is low enough
    1006:	3e ef       	ldi	r19, 0xFE	; 254
    1008:	c3 16       	cp	r12, r19
    100a:	39 e0       	ldi	r19, 0x09	; 9
    100c:	d3 06       	cpc	r13, r19
    100e:	38 f0       	brcs	.+14     	; 0x101e <CheckPins+0x7c2>
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
    1010:	82 e0       	ldi	r24, 0x02	; 2
    1012:	80 93 07 01 	sts	0x0107, r24
         PartMode = PART_MODE_NPN;
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	80 93 06 01 	sts	0x0106, r24
    101c:	51 c0       	rjmp	.+162    	; 0x10c0 <CheckPins+0x864>
      } else { // Basis has low current
         if((adc.lp_otr < 97) && (adc.hp2 > 3400)) {
    101e:	8d 81       	ldd	r24, Y+5	; 0x05
    1020:	9e 81       	ldd	r25, Y+6	; 0x06
    1022:	81 36       	cpi	r24, 0x61	; 97
    1024:	91 05       	cpc	r25, r1
    1026:	08 f0       	brcs	.+2      	; 0x102a <CheckPins+0x7ce>
    1028:	4b c0       	rjmp	.+150    	; 0x10c0 <CheckPins+0x864>
    102a:	99 e4       	ldi	r25, 0x49	; 73
    102c:	a9 16       	cp	r10, r25
    102e:	9d e0       	ldi	r25, 0x0D	; 13
    1030:	b9 06       	cpc	r11, r25
    1032:	08 f4       	brcc	.+2      	; 0x1036 <CheckPins+0x7da>
    1034:	45 c0       	rjmp	.+138    	; 0x10c0 <CheckPins+0x864>
            //if flow voltage in switched off mode low enough?
            //(since D-Mode-FET will be detected in error as E-Mode )
            PartFound = PART_FET;	//N-Kanal-MOSFET is found (Basis/Gate will Not be pulled down)
    1036:	83 e0       	ldi	r24, 0x03	; 3
    1038:	80 93 07 01 	sts	0x0107, r24
            PartMode = PART_MODE_N_E_MOS;
    103c:	82 e0       	ldi	r24, 0x02	; 2
    103e:	80 93 06 01 	sts	0x0106, r24
            wait_about1s();
#endif
            //Switching of Drain is monitored with digital input
            // Low level is specified up to 0.3 * VCC
            // High level is specified above 0.6 * VCC
            PinMSK = HiADCm & 7;
    1042:	eb 80       	ldd	r14, Y+3	; 0x03
    1044:	a7 e0       	ldi	r26, 0x07	; 7
    1046:	ea 22       	and	r14, r26
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	80 64       	ori	r24, 0x40	; 64
    104c:	80 93 7c 00 	sts	0x007C, r24
            gthvoltage = 1;			// round up ((1*4)/9)
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	90 93 60 01 	sts	0x0160, r25
    1058:	80 93 5f 01 	sts	0x015F, r24
    105c:	fb e0       	ldi	r31, 0x0B	; 11
    105e:	cf 2e       	mov	r12, r31
            for(ii=0;ii<11;ii++) {
            	wdt_reset();
    1060:	a8 95       	wdr
            	ChargePin10ms(TriPinRL,0);	// discharge Gate 10ms with RL 
    1062:	88 2d       	mov	r24, r8
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	0e 94 13 04 	call	0x826	; 0x826 <ChargePin10ms>
                R_DDR = HiPinRL | TriPinRH;	// slowly charge Gate 
    106a:	94 b8       	out	0x04, r9	; 4
                R_PORT = HiPinRL | TriPinRH;
    106c:	95 b8       	out	0x05, r9	; 5
            	while ((ADC_PIN&PinMSK));	// Wait, until the MOSFET switch and Drain moved to low 
    106e:	86 b1       	in	r24, 0x06	; 6
    1070:	8e 21       	and	r24, r14
    1072:	e9 f7       	brne	.-6      	; 0x106e <CheckPins+0x812>
                		// 0 is detected with input voltage of 2.12V to 2.24V (tested with mega168 & mega328)
                R_DDR = HiPinRL;		// switch off current
    1074:	04 b9       	out	0x04, r16	; 4
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
    1076:	80 91 7a 00 	lds	r24, 0x007A
    107a:	80 64       	ori	r24, 0x40	; 64
    107c:	80 93 7a 00 	sts	0x007A, r24
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
    1080:	80 91 7a 00 	lds	r24, 0x007A
    1084:	86 fd       	sbrc	r24, 6
    1086:	fc cf       	rjmp	.-8      	; 0x1080 <CheckPins+0x824>
            	gthvoltage += ADCW;		// add result of ADC
    1088:	80 91 78 00 	lds	r24, 0x0078
    108c:	90 91 79 00 	lds	r25, 0x0079
    1090:	20 91 5f 01 	lds	r18, 0x015F
    1094:	30 91 60 01 	lds	r19, 0x0160
    1098:	82 0f       	add	r24, r18
    109a:	93 1f       	adc	r25, r19
    109c:	90 93 60 01 	sts	0x0160, r25
    10a0:	80 93 5f 01 	sts	0x015F, r24
    10a4:	ca 94       	dec	r12
            // High level is specified above 0.6 * VCC
            PinMSK = HiADCm & 7;
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
            gthvoltage = 1;			// round up ((1*4)/9)
            for(ii=0;ii<11;ii++) {
    10a6:	e1 f6       	brne	.-72     	; 0x1060 <CheckPins+0x804>
                R_DDR = HiPinRL;		// switch off current
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
            	gthvoltage += ADCW;		// add result of ADC
            }
            gthvoltage *= 4;	//is equal to 44 * ADCW
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
            gthvoltage /= 9;	//scale to mV
    10b0:	69 e0       	ldi	r22, 0x09	; 9
    10b2:	70 e0       	ldi	r23, 0x00	; 0
    10b4:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <__udivmodhi4>
    10b8:	70 93 60 01 	sts	0x0160, r23
    10bc:	60 93 5f 01 	sts	0x015F, r22
         }
      }
savenresult:
      trans.b = TristatePin;	// save Pin-constellation
    10c0:	ba 81       	ldd	r27, Y+2	; 0x02
    10c2:	b0 93 5b 01 	sts	0x015B, r27
      trans.c = HighPin;
    10c6:	10 93 5c 01 	sts	0x015C, r17
      trans.e = LowPin;
    10ca:	e9 81       	ldd	r30, Y+1	; 0x01
    10cc:	e0 93 5d 01 	sts	0x015D, r30
   } // end component conduct => npn
   ADC_DDR = TXD_MSK;		// switch all ADC-Ports to input
    10d0:	88 e0       	ldi	r24, 0x08	; 8
    10d2:	87 b9       	out	0x07, r24	; 7
   ADC_PORT = TXD_VAL;		// switch all ADC-Ports to 0 (no Pull up)
    10d4:	88 b9       	out	0x08, r24	; 8
   //Fertig
   //end das component has no connection between HighPin and LowPin
   goto widmes;
    10d6:	90 c0       	rjmp	.+288    	; 0x11f8 <CheckPins+0x99c>
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
    10d8:	88 e0       	ldi	r24, 0x08	; 8
    10da:	88 b9       	out	0x08, r24	; 8
    10dc:	78 ec       	ldi	r23, 0xC8	; 200
    10de:	e7 2e       	mov	r14, r23
  for (ii=0;ii<200;ii++) {
     ADC_DDR = LoADCm | HiADCm; // discharge by short of Low and High side
    10e0:	cc 80       	ldd	r12, Y+4	; 0x04
    10e2:	fb 81       	ldd	r31, Y+3	; 0x03
    10e4:	cf 2a       	or	r12, r31
    10e6:	c7 b8       	out	0x07, r12	; 7
     wait_about5ms();		// Low and Highpin to GND for discharge
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>
     ADC_DDR = LoADCm;		// switch only Low-Pin fix to GND
    10f0:	2c 81       	ldd	r18, Y+4	; 0x04
    10f2:	27 b9       	out	0x07, r18	; 7
     adc.hp1 = ReadADC(HighPin); // read voltage at High-Pin
    10f4:	81 2f       	mov	r24, r17
    10f6:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
     if (adc.hp1 < (150/8)) break;
    10fa:	82 31       	cpi	r24, 0x12	; 18
    10fc:	91 05       	cpc	r25, r1
    10fe:	10 f0       	brcs	.+4      	; 0x1104 <CheckPins+0x8a8>
    1100:	ea 94       	dec	r14
   goto widmes;
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
  for (ii=0;ii<200;ii++) {
    1102:	89 f7       	brne	.-30     	; 0x10e6 <CheckPins+0x88a>
  }
#else
  /* check first with low current (R_H=470k) */
  /* With this method the diode can be better differed from a capacitor, */
  /* but a parallel to a capacitor mounted diode can not be found. */
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
    1104:	3c 85       	ldd	r19, Y+12	; 0x0c
    1106:	34 b9       	out	0x04, r19	; 4
  R_PORT = HiPinRH;
    1108:	35 b9       	out	0x05, r19	; 5
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
    110a:	88 2d       	mov	r24, r8
    110c:	61 e0       	ldi	r22, 0x01	; 1
    110e:	0e 94 13 04 	call	0x826	; 0x826 <ChargePin10ms>
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
    1112:	81 2f       	mov	r24, r17
    1114:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
    1118:	7c 01       	movw	r14, r24
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
    111a:	88 2d       	mov	r24, r8
    111c:	60 e0       	ldi	r22, 0x00	; 0
    111e:	0e 94 13 04 	call	0x826	; 0x826 <ChargePin10ms>
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
    1122:	81 2f       	mov	r24, r17
    1124:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
    1128:	98 2e       	mov	r9, r24
    112a:	a9 2e       	mov	r10, r25

  /* check with higher current (R_L=680) */
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    112c:	04 b9       	out	0x04, r16	; 4
  R_PORT = HiPinRL;
    112e:	05 b9       	out	0x05, r16	; 5
  adc.hp1 = W5msReadADC(HighPin) - ReadADC(LowPin);
    1130:	81 2f       	mov	r24, r17
    1132:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
    1136:	6c 01       	movw	r12, r24
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
    113e:	c8 1a       	sub	r12, r24
    1140:	d9 0a       	sbc	r13, r25
  ChargePin10ms(TriPinRL,1);	//discharge for N-Kanal-MOSFET gate
    1142:	88 2d       	mov	r24, r8
    1144:	61 e0       	ldi	r22, 0x01	; 1
    1146:	0e 94 13 04 	call	0x826	; 0x826 <ChargePin10ms>
  adc.lp_otr = W5msReadADC(HighPin) - ReadADC(LowPin);
    114a:	81 2f       	mov	r24, r17
    114c:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
    1150:	3c 01       	movw	r6, r24
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
    1158:	68 1a       	sub	r6, r24
    115a:	79 0a       	sbc	r7, r25

  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
    115c:	4c 85       	ldd	r20, Y+12	; 0x0c
    115e:	44 b9       	out	0x04, r20	; 4
  R_PORT = HiPinRH;
    1160:	45 b9       	out	0x05, r20	; 5
  if(adc.lp_otr > adc.hp1) {
    1162:	c6 14       	cp	r12, r6
    1164:	d7 04       	cpc	r13, r7
    1166:	38 f0       	brcs	.+14     	; 0x1176 <CheckPins+0x91a>
      adc.hp1 = adc.lp_otr;	//the higher value wins
      adc.hp3 = adc.hp2;
  } else {
      ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
    1168:	88 2d       	mov	r24, r8
    116a:	60 e0       	ldi	r22, 0x00	; 0
    116c:	0e 94 13 04 	call	0x826	; 0x826 <ChargePin10ms>
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
  R_PORT = HiPinRH;
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
    1170:	e9 2c       	mov	r14, r9
    1172:	fa 2c       	mov	r15, r10
  R_PORT = HiPinRH;
  if(adc.lp_otr > adc.hp1) {
      adc.hp1 = adc.lp_otr;	//the higher value wins
      adc.hp3 = adc.hp2;
  } else {
      ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
    1174:	36 01       	movw	r6, r12
  }
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
    1176:	81 2f       	mov	r24, r17
    1178:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
#endif
  volt_dif = adc.hp3/8;
  if (volt_dif > 200) volt_dif = 200;

//  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp2 < adc.hp1) && (adc.hp1 > (adc.hp3+volt_dif)) && (adc.hp3 > adc.hp1/16)) {
    117c:	93 01       	movw	r18, r6
    117e:	27 59       	subi	r18, 0x97	; 151
    1180:	30 40       	sbci	r19, 0x00	; 0
    1182:	a1 e1       	ldi	r26, 0x11	; 17
    1184:	29 38       	cpi	r18, 0x89	; 137
    1186:	3a 07       	cpc	r19, r26
    1188:	b8 f5       	brcc	.+110    	; 0x11f8 <CheckPins+0x99c>
    118a:	86 15       	cp	r24, r6
    118c:	97 05       	cpc	r25, r7
    118e:	a0 f5       	brcc	.+104    	; 0x11f8 <CheckPins+0x99c>
  lcd_data('H');
  lcd_string(utoa(adc.hp2,outval,10));
  lcd_space();
  wait_about1s();
#endif
  volt_dif = adc.hp3/8;
    1190:	c7 01       	movw	r24, r14
    1192:	63 e0       	ldi	r22, 0x03	; 3
    1194:	96 95       	lsr	r25
    1196:	87 95       	ror	r24
    1198:	6a 95       	dec	r22
    119a:	e1 f7       	brne	.-8      	; 0x1194 <CheckPins+0x938>
  if (volt_dif > 200) volt_dif = 200;

//  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp2 < adc.hp1) && (adc.hp1 > (adc.hp3+volt_dif)) && (adc.hp3 > adc.hp1/16)) {
    119c:	89 3c       	cpi	r24, 0xC9	; 201
    119e:	91 05       	cpc	r25, r1
    11a0:	10 f0       	brcs	.+4      	; 0x11a6 <CheckPins+0x94a>
    11a2:	88 ec       	ldi	r24, 0xC8	; 200
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	8e 0d       	add	r24, r14
    11a8:	9f 1d       	adc	r25, r15
    11aa:	86 15       	cp	r24, r6
    11ac:	97 05       	cpc	r25, r7
    11ae:	20 f5       	brcc	.+72     	; 0x11f8 <CheckPins+0x99c>
    11b0:	c3 01       	movw	r24, r6
    11b2:	54 e0       	ldi	r21, 0x04	; 4
    11b4:	96 95       	lsr	r25
    11b6:	87 95       	ror	r24
    11b8:	5a 95       	dec	r21
    11ba:	e1 f7       	brne	.-8      	; 0x11b4 <CheckPins+0x958>
    11bc:	8e 15       	cp	r24, r14
    11be:	9f 05       	cpc	r25, r15
    11c0:	d8 f4       	brcc	.+54     	; 0x11f8 <CheckPins+0x99c>
     //voltage is above 0,15V and below 4,64V => Ok
     // hp2 >= hp1 is only possible with capacitor, not with a diode, hp2 is measured with 470k
     if((PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
    11c2:	80 91 07 01 	lds	r24, 0x0107
    11c6:	88 23       	and	r24, r24
    11c8:	11 f0       	breq	.+4      	; 0x11ce <CheckPins+0x972>
    11ca:	86 30       	cpi	r24, 0x06	; 6
    11cc:	19 f4       	brne	.+6      	; 0x11d4 <CheckPins+0x978>
        PartFound = PART_DIODE;	//mark for diode only, if no other component is found
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	80 93 07 01 	sts	0x0107, r24
				//since there is a problem with Transistors with a protection diode
#if DebugOut == 4
        lcd_data('D');
#endif
     }
     diodes[NumOfDiodes].Anode = HighPin;
    11d4:	80 91 05 01 	lds	r24, 0x0105
    11d8:	e8 2f       	mov	r30, r24
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	ee 0f       	add	r30, r30
    11de:	ff 1f       	adc	r31, r31
    11e0:	ee 0f       	add	r30, r30
    11e2:	ff 1f       	adc	r31, r31
    11e4:	e8 58       	subi	r30, 0x88	; 136
    11e6:	fe 4f       	sbci	r31, 0xFE	; 254
    11e8:	10 83       	st	Z, r17
     diodes[NumOfDiodes].Cathode = LowPin;
    11ea:	b9 81       	ldd	r27, Y+1	; 0x01
    11ec:	b1 83       	std	Z+1, r27	; 0x01
     diodes[NumOfDiodes].Voltage = adc.hp1;	// voltage in Millivolt 
    11ee:	73 82       	std	Z+3, r7	; 0x03
    11f0:	62 82       	std	Z+2, r6	; 0x02
     NumOfDiodes++;
    11f2:	8f 5f       	subi	r24, 0xFF	; 255
    11f4:	80 93 05 01 	sts	0x0105, r24
#if DebugOut == 4
  lcd_data(NumOfDiodes+'0');
#endif

widmes:
  if (NumOfDiodes > 0) goto clean_ports;
    11f8:	80 91 05 01 	lds	r24, 0x0105
    11fc:	88 23       	and	r24, r24
    11fe:	09 f0       	breq	.+2      	; 0x1202 <CheckPins+0x9a6>
    1200:	06 c2       	rjmp	.+1036   	; 0x160e <CheckPins+0xdb2>
  // resistor measurement
  wdt_reset();
    1202:	a8 95       	wdr
// U_SCALE can be set to 4 for better resolution of ReadADC result
#if U_SCALE != 1
  ADCconfig.U_AVCC *= U_SCALE;	// scale to higher resolution, mV scale is not required
    1204:	80 91 40 01 	lds	r24, 0x0140
    1208:	90 91 41 01 	lds	r25, 0x0141
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	90 93 41 01 	sts	0x0141, r25
    1218:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.U_Bandgap *= U_SCALE;
    121c:	80 91 3e 01 	lds	r24, 0x013E
    1220:	90 91 3f 01 	lds	r25, 0x013F
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	90 93 3f 01 	sts	0x013F, r25
    1230:	80 93 3e 01 	sts	0x013E, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = R_ANZ_MESS;	// switch to special number of repetitions
    1234:	8e eb       	ldi	r24, 0xBE	; 190
    1236:	80 93 3c 01 	sts	0x013C, r24
#endif
  #define MAX_REPEAT (700 / (5 + R_ANZ_MESS/8))
  ADC_PORT = TXD_VAL;
    123a:	88 e0       	ldi	r24, 0x08	; 8
    123c:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
    123e:	ec 81       	ldd	r30, Y+4	; 0x04
    1240:	e7 b9       	out	0x07, r30	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    1242:	04 b9       	out	0x04, r16	; 4
  R_PORT = HiPinRL;	
    1244:	05 b9       	out	0x05, r16	; 5
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
    1246:	ee 24       	eor	r14, r14
    1248:	ff 24       	eor	r15, r15
  for (ii=1;ii<MAX_REPEAT;ii++) {
    124a:	01 e0       	ldi	r16, 0x01	; 1
    124c:	01 c0       	rjmp	.+2      	; 0x1250 <CheckPins+0x9f4>
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    124e:	7c 01       	movw	r14, r24
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
    1256:	4c 01       	movw	r8, r24
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    1258:	81 2f       	mov	r24, r17
    125a:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
     udiff = adc.hp1 - adc.hp2;
    125e:	9c 01       	movw	r18, r24
    1260:	2e 19       	sub	r18, r14
    1262:	3f 09       	sbc	r19, r15
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    1264:	37 ff       	sbrs	r19, 7
    1266:	03 c0       	rjmp	.+6      	; 0x126e <CheckPins+0xa12>
    1268:	30 95       	com	r19
    126a:	21 95       	neg	r18
    126c:	3f 4f       	sbci	r19, 0xFF	; 255
    126e:	23 30       	cpi	r18, 0x03	; 3
    1270:	31 05       	cpc	r19, r1
    1272:	64 f4       	brge	.+24     	; 0x128c <CheckPins+0xa30>
    1274:	2c 01       	movw	r4, r24
  adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
#endif
  if (adc.tp1 > adc.hp1) {
     adc.tp1 = adc.hp1;
  }
  R_PORT = 0;
    1276:	15 b8       	out	0x05, r1	; 5
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (GND)
    1278:	fc 85       	ldd	r31, Y+12	; 0x0c
    127a:	f4 b9       	out	0x04, r31	; 4
  adc.hp2 = W5msReadADC(HighPin);	// read voltage, should be down
    127c:	81 2f       	mov	r24, r17
    127e:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
  if (adc.hp2 > (20*U_SCALE)) {
    1282:	81 35       	cpi	r24, 0x51	; 81
    1284:	91 05       	cpc	r25, r1
    1286:	08 f0       	brcs	.+2      	; 0x128a <CheckPins+0xa2e>
    1288:	a7 c1       	rjmp	.+846    	; 0x15d8 <CheckPins+0xd7c>
    128a:	05 c0       	rjmp	.+10     	; 0x1296 <CheckPins+0xa3a>
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     udiff = adc.hp1 - adc.hp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.hp2 = adc.hp1;
     wdt_reset();
    128c:	a8 95       	wdr
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    128e:	0f 5f       	subi	r16, 0xFF	; 255
    1290:	09 31       	cpi	r16, 0x19	; 25
    1292:	e9 f6       	brne	.-70     	; 0x124e <CheckPins+0x9f2>
    1294:	a1 c1       	rjmp	.+834    	; 0x15d8 <CheckPins+0xd7c>
     lcd_string(utoa(adc.hp2, outval, 10));
     lcd_space();
#endif
     goto testend;
  }
  R_PORT = HiPinRH;		//switch R_H for High-Pin to VCC
    1296:	2c 85       	ldd	r18, Y+12	; 0x0c
    1298:	25 b9       	out	0x05, r18	; 5
  adc.hp2 = W5msReadADC(HighPin);	// voltage at resistor Rx with R_H
    129a:	81 2f       	mov	r24, r17
    129c:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
    12a0:	7c 01       	movw	r14, r24

  ADC_DDR = HiADCm;		//switch High-Pin to output
    12a2:	3b 81       	ldd	r19, Y+3	; 0x03
    12a4:	37 b9       	out	0x07, r19	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
    12a6:	38 b9       	out	0x08, r19	; 8
  R_PORT = 0;
    12a8:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
    12aa:	4f 81       	ldd	r20, Y+7	; 0x07
    12ac:	44 b9       	out	0x04, r20	; 4
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
    12ae:	aa 24       	eor	r10, r10
    12b0:	bb 24       	eor	r11, r11
  for (ii=1;ii<MAX_REPEAT;ii++) {
    12b2:	21 e0       	ldi	r18, 0x01	; 1
    12b4:	01 c0       	rjmp	.+2      	; 0x12b8 <CheckPins+0xa5c>
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    12b6:	56 01       	movw	r10, r12
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
    12b8:	81 2f       	mov	r24, r17
    12ba:	2b 8b       	std	Y+19, r18	; 0x13
    12bc:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
    12c0:	28 2e       	mov	r2, r24
    12c2:	09 2f       	mov	r16, r25
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
    12ca:	6c 01       	movw	r12, r24
     udiff = adc.lp1 - adc.lp2;
    12cc:	8a 19       	sub	r24, r10
    12ce:	9b 09       	sbc	r25, r11
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    12d0:	2b 89       	ldd	r18, Y+19	; 0x13
    12d2:	97 ff       	sbrs	r25, 7
    12d4:	03 c0       	rjmp	.+6      	; 0x12dc <CheckPins+0xa80>
    12d6:	90 95       	com	r25
    12d8:	81 95       	neg	r24
    12da:	9f 4f       	sbci	r25, 0xFF	; 255
    12dc:	83 30       	cpi	r24, 0x03	; 3
    12de:	91 05       	cpc	r25, r1
    12e0:	6c f4       	brge	.+26     	; 0x12fc <CheckPins+0xaa0>
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = pgm_read_byte(&PinRLtab[LowPin]);		// instruction for LowPin R_L
  LoPinRH = LoPinRL + LoPinRL;				// instruction for LowPin R_H
    12e2:	8f 81       	ldd	r24, Y+7	; 0x07
    12e4:	88 0f       	add	r24, r24
  adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
#endif
  if (adc.tp2 < adc.lp1) {
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
    12e6:	84 b9       	out	0x04, r24	; 4
  adc.lp2 = W5msReadADC(LowPin);
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
    12ee:	3c 01       	movw	r6, r24
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    12f0:	80 ec       	ldi	r24, 0xC0	; 192
    12f2:	48 16       	cp	r4, r24
    12f4:	84 e4       	ldi	r24, 0x44	; 68
    12f6:	58 06       	cpc	r5, r24
    12f8:	30 f0       	brcs	.+12     	; 0x1306 <CheckPins+0xaaa>
    12fa:	0c c0       	rjmp	.+24     	; 0x1314 <CheckPins+0xab8>
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     udiff = adc.lp1 - adc.lp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.lp2 = adc.lp1;
     wdt_reset();
    12fc:	a8 95       	wdr
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
  R_PORT = 0;
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    12fe:	2f 5f       	subi	r18, 0xFF	; 255
    1300:	29 31       	cpi	r18, 0x19	; 25
    1302:	c9 f6       	brne	.-78     	; 0x12b6 <CheckPins+0xa5a>
    1304:	69 c1       	rjmp	.+722    	; 0x15d8 <CheckPins+0xd7c>
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
  adc.lp2 = W5msReadADC(LowPin);
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    1306:	95 e8       	ldi	r25, 0x85	; 133
    1308:	e9 16       	cp	r14, r25
    130a:	91 e0       	ldi	r25, 0x01	; 1
    130c:	f9 06       	cpc	r15, r25
    130e:	08 f0       	brcs	.+2      	; 0x1312 <CheckPins+0xab6>
    1310:	63 c1       	rjmp	.+710    	; 0x15d8 <CheckPins+0xd7c>
    1312:	06 c0       	rjmp	.+12     	; 0x1320 <CheckPins+0xac4>
     lcd_data('F');
#endif
     goto testend; 
  }
//    if((adc.hp2 + (adc.hp2 / 61)) < adc.hp1)
  if (adc.hp2 < (4972*U_SCALE)) { 
    1314:	a0 eb       	ldi	r26, 0xB0	; 176
    1316:	ea 16       	cp	r14, r26
    1318:	ad e4       	ldi	r26, 0x4D	; 77
    131a:	fa 06       	cpc	r15, r26
    131c:	08 f0       	brcs	.+2      	; 0x1320 <CheckPins+0xac4>
    131e:	5c c1       	rjmp	.+696    	; 0x15d8 <CheckPins+0xd7c>
     // voltage breaks down with low test current and it is not nearly shorted  => resistor
//     if (adc.lp1 < 120) { // take measurement with R_H 
     if (adc.lp1 < (169*U_SCALE)) { // take measurement with R_H 
    1320:	b4 ea       	ldi	r27, 0xA4	; 164
    1322:	cb 16       	cp	r12, r27
    1324:	b2 e0       	ldi	r27, 0x02	; 2
    1326:	db 06       	cpc	r13, r27
    1328:	08 f0       	brcs	.+2      	; 0x132c <CheckPins+0xad0>
    132a:	72 c0       	rjmp	.+228    	; 0x1410 <CheckPins+0xbb4>
        ii = 'H';
        if (adc.lp2 < (38*U_SCALE)) {
    132c:	e8 e9       	ldi	r30, 0x98	; 152
    132e:	6e 16       	cp	r6, r30
    1330:	71 04       	cpc	r7, r1
    1332:	08 f4       	brcc	.+2      	; 0x1336 <CheckPins+0xada>
    1334:	51 c1       	rjmp	.+674    	; 0x15d8 <CheckPins+0xd7c>
           // measurement > 60MOhm to big resistance
           goto testend;
        }
        // two measurements with R_H resistors (470k) are made:
        // lirx1 (measurement at HighPin)
        lirx1 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)adc.hp2 / (ADCconfig.U_AVCC - adc.hp2);
    1336:	80 90 40 01 	lds	r8, 0x0140
    133a:	90 90 41 01 	lds	r9, 0x0141
    133e:	b7 01       	movw	r22, r14
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	28 e9       	ldi	r18, 0x98	; 152
    1346:	37 eb       	ldi	r19, 0xB7	; 183
    1348:	40 e0       	ldi	r20, 0x00	; 0
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
    1350:	94 01       	movw	r18, r8
    1352:	2e 19       	sub	r18, r14
    1354:	3f 09       	sbc	r19, r15
    1356:	40 e0       	ldi	r20, 0x00	; 0
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
    135e:	59 01       	movw	r10, r18
    1360:	6a 01       	movw	r12, r20
        // lirx2 (measurement at LowPin)
        lirx2 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)(ADCconfig.U_AVCC - adc.lp2) / adc.lp2;
    1362:	86 18       	sub	r8, r6
    1364:	97 08       	sbc	r9, r7
    1366:	b4 01       	movw	r22, r8
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	28 e9       	ldi	r18, 0x98	; 152
    136e:	37 eb       	ldi	r19, 0xB7	; 183
    1370:	40 e0       	ldi	r20, 0x00	; 0
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
    1378:	93 01       	movw	r18, r6
    137a:	40 e0       	ldi	r20, 0x00	; 0
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
#define FAKT_LOW 2		//resolution is about twice as good
#else
#define FAKT_LOW 4		//resolution is about four times better
#endif
#ifdef AUTOSCALE_ADC
        if (adc.hp2 < U_INT_LIMIT) {
    1382:	f8 e7       	ldi	r31, 0x78	; 120
    1384:	ef 16       	cp	r14, r31
    1386:	ff e0       	ldi	r31, 0x0F	; 15
    1388:	ff 06       	cpc	r15, r31
    138a:	70 f4       	brcc	.+28     	; 0x13a8 <CheckPins+0xb4c>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    138c:	c6 01       	movw	r24, r12
    138e:	b5 01       	movw	r22, r10
    1390:	02 e0       	ldi	r16, 0x02	; 2
    1392:	66 0f       	add	r22, r22
    1394:	77 1f       	adc	r23, r23
    1396:	88 1f       	adc	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	0a 95       	dec	r16
    139c:	d1 f7       	brne	.-12     	; 0x1392 <CheckPins+0xb36>
    139e:	62 0f       	add	r22, r18
    13a0:	73 1f       	adc	r23, r19
    13a2:	84 1f       	adc	r24, r20
    13a4:	95 1f       	adc	r25, r21
    13a6:	12 c0       	rjmp	.+36     	; 0x13cc <CheckPins+0xb70>
        } else if (adc.lp2 < U_INT_LIMIT){
    13a8:	88 e7       	ldi	r24, 0x78	; 120
    13aa:	68 16       	cp	r6, r24
    13ac:	8f e0       	ldi	r24, 0x0F	; 15
    13ae:	78 06       	cpc	r7, r24
    13b0:	a0 f4       	brcc	.+40     	; 0x13da <CheckPins+0xb7e>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    13b2:	ca 01       	movw	r24, r20
    13b4:	b9 01       	movw	r22, r18
    13b6:	b2 e0       	ldi	r27, 0x02	; 2
    13b8:	66 0f       	add	r22, r22
    13ba:	77 1f       	adc	r23, r23
    13bc:	88 1f       	adc	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	ba 95       	dec	r27
    13c2:	d1 f7       	brne	.-12     	; 0x13b8 <CheckPins+0xb5c>
    13c4:	6a 0d       	add	r22, r10
    13c6:	7b 1d       	adc	r23, r11
    13c8:	8c 1d       	adc	r24, r12
    13ca:	9d 1d       	adc	r25, r13
    13cc:	25 e0       	ldi	r18, 0x05	; 5
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	50 e0       	ldi	r21, 0x00	; 0
    13d4:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
    13d8:	08 c0       	rjmp	.+16     	; 0x13ea <CheckPins+0xb8e>
        } else 
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_H measurements
    13da:	2a 0d       	add	r18, r10
    13dc:	3b 1d       	adc	r19, r11
    13de:	4c 1d       	adc	r20, r12
    13e0:	5d 1d       	adc	r21, r13
    13e2:	56 95       	lsr	r21
    13e4:	47 95       	ror	r20
    13e6:	37 95       	ror	r19
    13e8:	27 95       	ror	r18
        }
        lrx1 *= 100;
    13ea:	ca 01       	movw	r24, r20
    13ec:	b9 01       	movw	r22, r18
    13ee:	24 e6       	ldi	r18, 0x64	; 100
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	40 e0       	ldi	r20, 0x00	; 0
    13f4:	50 e0       	ldi	r21, 0x00	; 0
    13f6:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
    13fa:	6b 01       	movw	r12, r22
    13fc:	7c 01       	movw	r14, r24
        lrx1 += RH_OFFSET;			// add constant for correction of systematic error
    13fe:	8c ea       	ldi	r24, 0xAC	; 172
    1400:	9d e0       	ldi	r25, 0x0D	; 13
    1402:	a0 e0       	ldi	r26, 0x00	; 0
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	c8 0e       	add	r12, r24
    1408:	d9 1e       	adc	r13, r25
    140a:	ea 1e       	adc	r14, r26
    140c:	fb 1e       	adc	r15, r27
    140e:	78 c0       	rjmp	.+240    	; 0x1500 <CheckPins+0xca4>
    1410:	c2 01       	movw	r24, r4
    1412:	84 14       	cp	r8, r4
    1414:	95 04       	cpc	r9, r5
    1416:	08 f4       	brcc	.+2      	; 0x141a <CheckPins+0xbbe>
    1418:	c4 01       	movw	r24, r8
    141a:	e2 2c       	mov	r14, r2
    141c:	f0 2e       	mov	r15, r16
    141e:	ec 14       	cp	r14, r12
    1420:	fd 04       	cpc	r15, r13
    1422:	08 f4       	brcc	.+2      	; 0x1426 <CheckPins+0xbca>
    1424:	76 01       	movw	r14, r12
    1426:	3c 01       	movw	r6, r24
    1428:	84 15       	cp	r24, r4
    142a:	95 05       	cpc	r25, r5
    142c:	08 f4       	brcc	.+2      	; 0x1430 <CheckPins+0xbd4>
    142e:	32 01       	movw	r6, r4
        // two measurements with R_L resistors (680) are made:
        // lirx1 (measurement at HighPin)
        if (adc.tp1 > adc.hp1) {
           adc.hp1 = adc.tp1;		//diff negativ is illegal
        }
        lirx1 =(unsigned long)RR680PL * (unsigned long)(adc.hp1 - adc.tp1) / (ADCconfig.U_AVCC - adc.hp1);
    1430:	b3 01       	movw	r22, r6
    1432:	68 1b       	sub	r22, r24
    1434:	79 0b       	sbc	r23, r25
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	20 91 08 01 	lds	r18, 0x0108
    143e:	30 91 09 01 	lds	r19, 0x0109
    1442:	40 e0       	ldi	r20, 0x00	; 0
    1444:	50 e0       	ldi	r21, 0x00	; 0
    1446:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
    144a:	20 91 40 01 	lds	r18, 0x0140
    144e:	30 91 41 01 	lds	r19, 0x0141
    1452:	26 19       	sub	r18, r6
    1454:	37 09       	sbc	r19, r7
    1456:	40 e0       	ldi	r20, 0x00	; 0
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
    145e:	49 01       	movw	r8, r18
    1460:	5a 01       	movw	r10, r20
    1462:	27 01       	movw	r4, r14
    1464:	ce 14       	cp	r12, r14
    1466:	df 04       	cpc	r13, r15
    1468:	08 f4       	brcc	.+2      	; 0x146c <CheckPins+0xc10>
    146a:	26 01       	movw	r4, r12
        if (adc.tp2 < adc.lp1) {
           adc.lp1 = adc.tp2;		//diff negativ is illegal
        }
        // lirx2 (Measurement at LowPin)
        lirx2 =(unsigned long)RR680MI * (unsigned long)(adc.tp2 -adc.lp1) / adc.lp1;
    146c:	e4 18       	sub	r14, r4
    146e:	f5 08       	sbc	r15, r5
    1470:	b7 01       	movw	r22, r14
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	20 91 02 01 	lds	r18, 0x0102
    147a:	30 91 03 01 	lds	r19, 0x0103
    147e:	40 e0       	ldi	r20, 0x00	; 0
    1480:	50 e0       	ldi	r21, 0x00	; 0
    1482:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
    1486:	92 01       	movw	r18, r4
    1488:	40 e0       	ldi	r20, 0x00	; 0
    148a:	50 e0       	ldi	r21, 0x00	; 0
    148c:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
//     lrx1 =(unsigned long)R_L_VAL * (unsigned long)adc.hp1 / (adc.hp3 - adc.hp1);

#ifdef AUTOSCALE_ADC
        if (adc.hp1 < U_INT_LIMIT) {
    1490:	98 e7       	ldi	r25, 0x78	; 120
    1492:	69 16       	cp	r6, r25
    1494:	9f e0       	ldi	r25, 0x0F	; 15
    1496:	79 06       	cpc	r7, r25
    1498:	70 f4       	brcc	.+28     	; 0x14b6 <CheckPins+0xc5a>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    149a:	c5 01       	movw	r24, r10
    149c:	b4 01       	movw	r22, r8
    149e:	f2 e0       	ldi	r31, 0x02	; 2
    14a0:	66 0f       	add	r22, r22
    14a2:	77 1f       	adc	r23, r23
    14a4:	88 1f       	adc	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	fa 95       	dec	r31
    14aa:	d1 f7       	brne	.-12     	; 0x14a0 <CheckPins+0xc44>
    14ac:	62 0f       	add	r22, r18
    14ae:	73 1f       	adc	r23, r19
    14b0:	84 1f       	adc	r24, r20
    14b2:	95 1f       	adc	r25, r21
    14b4:	12 c0       	rjmp	.+36     	; 0x14da <CheckPins+0xc7e>
        } else if (adc.lp1 < U_INT_LIMIT) {
    14b6:	a8 e7       	ldi	r26, 0x78	; 120
    14b8:	4a 16       	cp	r4, r26
    14ba:	af e0       	ldi	r26, 0x0F	; 15
    14bc:	5a 06       	cpc	r5, r26
    14be:	b0 f4       	brcc	.+44     	; 0x14ec <CheckPins+0xc90>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    14c0:	ca 01       	movw	r24, r20
    14c2:	b9 01       	movw	r22, r18
    14c4:	e2 e0       	ldi	r30, 0x02	; 2
    14c6:	66 0f       	add	r22, r22
    14c8:	77 1f       	adc	r23, r23
    14ca:	88 1f       	adc	r24, r24
    14cc:	99 1f       	adc	r25, r25
    14ce:	ea 95       	dec	r30
    14d0:	d1 f7       	brne	.-12     	; 0x14c6 <CheckPins+0xc6a>
    14d2:	68 0d       	add	r22, r8
    14d4:	79 1d       	adc	r23, r9
    14d6:	8a 1d       	adc	r24, r10
    14d8:	9b 1d       	adc	r25, r11
    14da:	25 e0       	ldi	r18, 0x05	; 5
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	40 e0       	ldi	r20, 0x00	; 0
    14e0:	50 e0       	ldi	r21, 0x00	; 0
    14e2:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
    14e6:	69 01       	movw	r12, r18
    14e8:	7a 01       	movw	r14, r20
    14ea:	0a c0       	rjmp	.+20     	; 0x1500 <CheckPins+0xca4>
        } else
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_L measurements
    14ec:	69 01       	movw	r12, r18
    14ee:	7a 01       	movw	r14, r20
    14f0:	c8 0c       	add	r12, r8
    14f2:	d9 1c       	adc	r13, r9
    14f4:	ea 1c       	adc	r14, r10
    14f6:	fb 1c       	adc	r15, r11
    14f8:	f6 94       	lsr	r15
    14fa:	e7 94       	ror	r14
    14fc:	d7 94       	ror	r13
    14fe:	c7 94       	ror	r12
  lcd_line4();
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4);
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
    1500:	80 91 07 01 	lds	r24, 0x0107
    1504:	82 30       	cpi	r24, 0x02	; 2
    1506:	18 f0       	brcs	.+6      	; 0x150e <CheckPins+0xcb2>
    1508:	86 30       	cpi	r24, 0x06	; 6
    150a:	09 f0       	breq	.+2      	; 0x150e <CheckPins+0xcb2>
    150c:	65 c0       	rjmp	.+202    	; 0x15d8 <CheckPins+0xd7c>
        for (ii=0; ii<ResistorsFound; ii++) {
    150e:	30 91 5e 01 	lds	r19, 0x015E
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	41 c0       	rjmp	.+130    	; 0x1598 <CheckPins+0xd3c>
           // search measurements with inverse polarity 
           thisR = &resis[ii];
    1516:	82 2f       	mov	r24, r18
    1518:	90 e0       	ldi	r25, 0x00	; 0
           if (thisR->rt != TristatePin) {
    151a:	fc 01       	movw	r30, r24
    151c:	ee 0f       	add	r30, r30
    151e:	ff 1f       	adc	r31, r31
    1520:	e8 0f       	add	r30, r24
    1522:	f9 1f       	adc	r31, r25
    1524:	ee 0f       	add	r30, r30
    1526:	ff 1f       	adc	r31, r31
    1528:	ee 0f       	add	r30, r30
    152a:	ff 1f       	adc	r31, r31
    152c:	e8 5e       	subi	r30, 0xE8	; 232
    152e:	fe 4f       	sbci	r31, 0xFE	; 254
    1530:	83 85       	ldd	r24, Z+11	; 0x0b
    1532:	ba 81       	ldd	r27, Y+2	; 0x02
    1534:	8b 17       	cp	r24, r27
    1536:	11 f0       	breq	.+4      	; 0x153c <CheckPins+0xce0>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4);
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    1538:	2f 5f       	subi	r18, 0xFF	; 255
    153a:	2e c0       	rjmp	.+92     	; 0x1598 <CheckPins+0xd3c>
           if (thisR->rt != TristatePin) {
              continue;
           }
           // must be measurement with inverse polarity 
           // resolution is 0.1 Ohm, 1 Ohm = 10 !
           lirx1 = (labs((long)lrx1 - (long)thisR->rx) * 10) / (lrx1 + thisR->rx + 100);
    153c:	80 80       	ld	r8, Z
    153e:	91 80       	ldd	r9, Z+1	; 0x01
    1540:	a2 80       	ldd	r10, Z+2	; 0x02
    1542:	b3 80       	ldd	r11, Z+3	; 0x03
    1544:	c7 01       	movw	r24, r14
    1546:	b6 01       	movw	r22, r12
    1548:	68 19       	sub	r22, r8
    154a:	79 09       	sbc	r23, r9
    154c:	8a 09       	sbc	r24, r10
    154e:	9b 09       	sbc	r25, r11
    1550:	97 ff       	sbrs	r25, 7
    1552:	07 c0       	rjmp	.+14     	; 0x1562 <CheckPins+0xd06>
    1554:	90 95       	com	r25
    1556:	80 95       	com	r24
    1558:	70 95       	com	r23
    155a:	61 95       	neg	r22
    155c:	7f 4f       	sbci	r23, 0xFF	; 255
    155e:	8f 4f       	sbci	r24, 0xFF	; 255
    1560:	9f 4f       	sbci	r25, 0xFF	; 255
    1562:	2a e0       	ldi	r18, 0x0A	; 10
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	40 e0       	ldi	r20, 0x00	; 0
    1568:	50 e0       	ldi	r21, 0x00	; 0
    156a:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
    156e:	a5 01       	movw	r20, r10
    1570:	94 01       	movw	r18, r8
    1572:	2c 59       	subi	r18, 0x9C	; 156
    1574:	3f 4f       	sbci	r19, 0xFF	; 255
    1576:	4f 4f       	sbci	r20, 0xFF	; 255
    1578:	5f 4f       	sbci	r21, 0xFF	; 255
    157a:	2c 0d       	add	r18, r12
    157c:	3d 1d       	adc	r19, r13
    157e:	4e 1d       	adc	r20, r14
    1580:	5f 1d       	adc	r21, r15
    1582:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
           if (lirx1  > 0) {
    1586:	21 15       	cp	r18, r1
    1588:	31 05       	cpc	r19, r1
    158a:	41 05       	cpc	r20, r1
    158c:	51 05       	cpc	r21, r1
    158e:	21 f5       	brne	.+72     	; 0x15d8 <CheckPins+0xd7c>
              DisplayValue(lirx1,-1,LCD_CHAR_OMEGA,3);
              lcd_space();
#endif
              goto testend; // <10% mismatch
           }
           PartFound = PART_RESISTOR;
    1590:	86 e0       	ldi	r24, 0x06	; 6
    1592:	80 93 07 01 	sts	0x0107, r24
           goto testend;
    1596:	20 c0       	rjmp	.+64     	; 0x15d8 <CheckPins+0xd7c>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4);
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    1598:	23 17       	cp	r18, r19
    159a:	08 f4       	brcc	.+2      	; 0x159e <CheckPins+0xd42>
    159c:	bc cf       	rjmp	.-136    	; 0x1516 <CheckPins+0xcba>
           }
           PartFound = PART_RESISTOR;
           goto testend;
        } // end for
        // no same resistor with the same Tristate-Pin found, new one
        thisR = &resis[ResistorsFound];		// pointer to a free resistor structure
    159e:	83 2f       	mov	r24, r19
    15a0:	90 e0       	ldi	r25, 0x00	; 0
        thisR->rx = lrx1;		// save resistor value
    15a2:	fc 01       	movw	r30, r24
    15a4:	ee 0f       	add	r30, r30
    15a6:	ff 1f       	adc	r31, r31
    15a8:	e8 0f       	add	r30, r24
    15aa:	f9 1f       	adc	r31, r25
    15ac:	ee 0f       	add	r30, r30
    15ae:	ff 1f       	adc	r31, r31
    15b0:	ee 0f       	add	r30, r30
    15b2:	ff 1f       	adc	r31, r31
    15b4:	e8 5e       	subi	r30, 0xE8	; 232
    15b6:	fe 4f       	sbci	r31, 0xFE	; 254
    15b8:	c0 82       	st	Z, r12
    15ba:	d1 82       	std	Z+1, r13	; 0x01
    15bc:	e2 82       	std	Z+2, r14	; 0x02
    15be:	f3 82       	std	Z+3, r15	; 0x03
#if FLASHEND > 0x1fff
        thisR->lx = 0;			// no inductance
    15c0:	14 82       	std	Z+4, r1	; 0x04
    15c2:	15 82       	std	Z+5, r1	; 0x05
    15c4:	16 82       	std	Z+6, r1	; 0x06
    15c6:	17 82       	std	Z+7, r1	; 0x07
#endif
        thisR->ra = LowPin;		// save Pin numbers
    15c8:	29 81       	ldd	r18, Y+1	; 0x01
    15ca:	21 87       	std	Z+9, r18	; 0x09
        thisR->rb = HighPin;
    15cc:	12 87       	std	Z+10, r17	; 0x0a
        thisR->rt = TristatePin;	// Tristate is saved for easier search of inverse measurement
    15ce:	4a 81       	ldd	r20, Y+2	; 0x02
    15d0:	43 87       	std	Z+11, r20	; 0x0b
        ResistorsFound++;			// 1 more resistor found
    15d2:	3f 5f       	subi	r19, 0xFF	; 255
    15d4:	30 93 5e 01 	sts	0x015E, r19
#endif
     }
  }
  testend:
#if U_SCALE != 1
  ADCconfig.U_AVCC /= U_SCALE;		// scale back to mV resolution
    15d8:	80 91 40 01 	lds	r24, 0x0140
    15dc:	90 91 41 01 	lds	r25, 0x0141
    15e0:	96 95       	lsr	r25
    15e2:	87 95       	ror	r24
    15e4:	96 95       	lsr	r25
    15e6:	87 95       	ror	r24
    15e8:	90 93 41 01 	sts	0x0141, r25
    15ec:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.U_Bandgap /= U_SCALE;
    15f0:	80 91 3e 01 	lds	r24, 0x013E
    15f4:	90 91 3f 01 	lds	r25, 0x013F
    15f8:	96 95       	lsr	r25
    15fa:	87 95       	ror	r24
    15fc:	96 95       	lsr	r25
    15fe:	87 95       	ror	r24
    1600:	90 93 3f 01 	sts	0x013F, r25
    1604:	80 93 3e 01 	sts	0x013E, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = ANZ_MESS;		// switch back to standard number of repetition
    1608:	89 e1       	ldi	r24, 0x19	; 25
    160a:	80 93 3c 01 	sts	0x013C, r24
#if DebugOut < 10
  wait_about2s();
#endif
#endif
 clean_ports:
  ADC_DDR = TXD_MSK;		// all ADC-Pins Input
    160e:	88 e0       	ldi	r24, 0x08	; 8
    1610:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// all ADC outputs to Ground, keine Pull up
    1612:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// all resistor-outputs to Input
    1614:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// all resistor-outputs to Ground, no Pull up
    1616:	15 b8       	out	0x05, r1	; 5
} // end CheckPins()
    1618:	65 96       	adiw	r28, 0x15	; 21
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	cd bf       	out	0x3d, r28	; 61
    1624:	cf 91       	pop	r28
    1626:	df 91       	pop	r29
    1628:	1f 91       	pop	r17
    162a:	0f 91       	pop	r16
    162c:	ff 90       	pop	r15
    162e:	ef 90       	pop	r14
    1630:	df 90       	pop	r13
    1632:	cf 90       	pop	r12
    1634:	bf 90       	pop	r11
    1636:	af 90       	pop	r10
    1638:	9f 90       	pop	r9
    163a:	8f 90       	pop	r8
    163c:	7f 90       	pop	r7
    163e:	6f 90       	pop	r6
    1640:	5f 90       	pop	r5
    1642:	4f 90       	pop	r4
    1644:	3f 90       	pop	r3
    1646:	2f 90       	pop	r2
    1648:	08 95       	ret

0000164a <PinLayout>:
TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
}
#endif

// show the Pin Layout of the device 
void PinLayout(char pin1, char pin2, char pin3) {
    164a:	ff 92       	push	r15
    164c:	0f 93       	push	r16
    164e:	1f 93       	push	r17
    1650:	18 2f       	mov	r17, r24
    1652:	06 2f       	mov	r16, r22
    1654:	f4 2e       	mov	r15, r20
// pin1-3 is EBC or SGD or CGA
#ifndef EBC_STYLE
   // Layout with 123= style
   lcd_fix_string(N123_str);		//" 123="
    1656:	88 e0       	ldi	r24, 0x08	; 8
    1658:	91 e0       	ldi	r25, 0x01	; 1
    165a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
   for (ii=0;ii<3;ii++) {
    165e:	10 92 4b 01 	sts	0x014B, r1
    1662:	1e c0       	rjmp	.+60     	; 0x16a0 <PinLayout+0x56>
       if (ii == trans.e)  lcd_data(pin1);	// Output Character in right order
    1664:	90 91 5d 01 	lds	r25, 0x015D
    1668:	89 17       	cp	r24, r25
    166a:	19 f4       	brne	.+6      	; 0x1672 <PinLayout+0x28>
    166c:	81 2f       	mov	r24, r17
    166e:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       if (ii == trans.b)  lcd_data(pin2);
    1672:	90 91 4b 01 	lds	r25, 0x014B
    1676:	80 91 5b 01 	lds	r24, 0x015B
    167a:	98 17       	cp	r25, r24
    167c:	19 f4       	brne	.+6      	; 0x1684 <PinLayout+0x3a>
    167e:	80 2f       	mov	r24, r16
    1680:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       if (ii == trans.c)  lcd_data(pin3);
    1684:	90 91 4b 01 	lds	r25, 0x014B
    1688:	80 91 5c 01 	lds	r24, 0x015C
    168c:	98 17       	cp	r25, r24
    168e:	19 f4       	brne	.+6      	; 0x1696 <PinLayout+0x4c>
    1690:	8f 2d       	mov	r24, r15
    1692:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
void PinLayout(char pin1, char pin2, char pin3) {
// pin1-3 is EBC or SGD or CGA
#ifndef EBC_STYLE
   // Layout with 123= style
   lcd_fix_string(N123_str);		//" 123="
   for (ii=0;ii<3;ii++) {
    1696:	80 91 4b 01 	lds	r24, 0x014B
    169a:	8f 5f       	subi	r24, 0xFF	; 255
    169c:	80 93 4b 01 	sts	0x014B, r24
    16a0:	80 91 4b 01 	lds	r24, 0x014B
    16a4:	83 30       	cpi	r24, 0x03	; 3
    16a6:	f0 f2       	brcs	.-68     	; 0x1664 <PinLayout+0x1a>
   lcd_testpin(trans.e);
   lcd_testpin(trans.b);
   lcd_testpin(trans.c);
 #endif
#endif
}
    16a8:	1f 91       	pop	r17
    16aa:	0f 91       	pop	r16
    16ac:	ff 90       	pop	r15
    16ae:	08 95       	ret

000016b0 <ShortedProbes>:
 *  - 0 if not shorted
 *  - 1 if shorted
 */

uint8_t ShortedProbes(uint8_t Probe1, uint8_t Probe2)
{
    16b0:	0f 93       	push	r16
    16b2:	1f 93       	push	r17
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	0f 92       	push	r0
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
   *  Set up a voltage divider between the two probes:
   *  - Probe1: Rl pull-up
   *  - Probe2: Rl pull-down
   */

  ADC_DDR =  TXD_MSK;		// all-Pins to Input
    16be:	98 e0       	ldi	r25, 0x08	; 8
    16c0:	97 b9       	out	0x07, r25	; 7
  ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
    16c2:	98 b9       	out	0x08, r25	; 8
  R_PORT = pgm_read_byte(&PinRLtab[Probe1]);
    16c4:	e8 2f       	mov	r30, r24
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	e0 50       	subi	r30, 0x00	; 0
    16ca:	ff 4f       	sbci	r31, 0xFF	; 255
    16cc:	94 91       	lpm	r25, Z+
    16ce:	95 b9       	out	0x05, r25	; 5
  R_DDR = pgm_read_byte(&PinRLtab[Probe1]) | pgm_read_byte(&PinRLtab[Probe2]);
    16d0:	e6 2f       	mov	r30, r22
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	e0 50       	subi	r30, 0x00	; 0
    16d6:	ff 4f       	sbci	r31, 0xFF	; 255
    16d8:	e4 91       	lpm	r30, Z+
    16da:	e9 2b       	or	r30, r25
    16dc:	e4 b9       	out	0x04, r30	; 4

  /* read voltages */
  U1 = ReadADC(Probe1);
    16de:	69 83       	std	Y+1, r22	; 0x01
    16e0:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
    16e4:	8c 01       	movw	r16, r24
  U2 = ReadADC(Probe2);
    16e6:	69 81       	ldd	r22, Y+1	; 0x01
    16e8:	86 2f       	mov	r24, r22
    16ea:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
    16ee:	ac 01       	movw	r20, r24
   *  We expect both probe voltages to be about the same and
   *  to be half of Vcc (allowed difference +/- 20mV).
   */
  #define MAX_UH_DIFF 20

  URH = ADCconfig.U_AVCC / 2;
    16f0:	20 91 40 01 	lds	r18, 0x0140
    16f4:	30 91 41 01 	lds	r19, 0x0141
    16f8:	36 95       	lsr	r19
    16fa:	27 95       	ror	r18
  if ((U1 > (URH - MAX_UH_DIFF)) && (U1 < (URH + MAX_UH_DIFF)))
    16fc:	c9 01       	movw	r24, r18
    16fe:	44 97       	sbiw	r24, 0x14	; 20
    1700:	80 17       	cp	r24, r16
    1702:	91 07       	cpc	r25, r17
    1704:	60 f4       	brcc	.+24     	; 0x171e <ShortedProbes+0x6e>
    1706:	2c 5e       	subi	r18, 0xEC	; 236
    1708:	3f 4f       	sbci	r19, 0xFF	; 255
    170a:	02 17       	cp	r16, r18
    170c:	13 07       	cpc	r17, r19
    170e:	38 f4       	brcc	.+14     	; 0x171e <ShortedProbes+0x6e>
  {
    if ((U2 > (URH - MAX_UH_DIFF)) && (U2 < (URH + MAX_UH_DIFF)))
    1710:	84 17       	cp	r24, r20
    1712:	95 07       	cpc	r25, r21
    1714:	20 f4       	brcc	.+8      	; 0x171e <ShortedProbes+0x6e>
 *  - 1 if shorted
 */

uint8_t ShortedProbes(uint8_t Probe1, uint8_t Probe2)
{
  uint8_t           Flag1 = 0;      /* return value */
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	42 17       	cp	r20, r18
    171a:	53 07       	cpc	r21, r19
    171c:	08 f0       	brcs	.+2      	; 0x1720 <ShortedProbes+0x70>
    171e:	80 e0       	ldi	r24, 0x00	; 0
      Flag1 = 1;
    }
  }

  /* reset port */
  R_DDR = 0;
    1720:	14 b8       	out	0x04, r1	; 4

  return Flag1;
}
    1722:	0f 90       	pop	r0
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	1f 91       	pop	r17
    172a:	0f 91       	pop	r16
    172c:	08 95       	ret

0000172e <AllProbesShorted>:
 *  - 0 if no probes are short-circuited
 *  - number of probe pairs short-circuited (3 = all)
 */

uint8_t AllProbesShorted(void)
{
    172e:	1f 93       	push	r17
  uint8_t           Flag2;      /* return value */

  /* check all possible combinations */
  Flag2 = ShortedProbes(TP1, TP2);
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	61 e0       	ldi	r22, 0x01	; 1
    1734:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <ShortedProbes>
    1738:	18 2f       	mov	r17, r24
  Flag2 += ShortedProbes(TP1, TP3);
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	62 e0       	ldi	r22, 0x02	; 2
    173e:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <ShortedProbes>
    1742:	18 0f       	add	r17, r24
  Flag2 += ShortedProbes(TP2, TP3);
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	62 e0       	ldi	r22, 0x02	; 2
    1748:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <ShortedProbes>

  return Flag2;
}
    174c:	81 0f       	add	r24, r17
    174e:	1f 91       	pop	r17
    1750:	08 95       	ret

00001752 <AutoCheck>:
void AutoCheck(void) {
    1752:	8f 92       	push	r8
    1754:	9f 92       	push	r9
    1756:	af 92       	push	r10
    1758:	bf 92       	push	r11
    175a:	cf 92       	push	r12
    175c:	df 92       	push	r13
    175e:	ef 92       	push	r14
    1760:	ff 92       	push	r15
    1762:	0f 93       	push	r16
    1764:	1f 93       	push	r17
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
    176e:	2e 97       	sbiw	r28, 0x0e	; 14
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	f8 94       	cli
    1774:	de bf       	out	0x3e, r29	; 62
    1776:	0f be       	out	0x3f, r0	; 63
    1778:	cd bf       	out	0x3d, r28	; 61
  int8_t udiff;		// difference between ADC Voltage with VCC or Bandgap reference
  int8_t udiff2;
  #endif
 #endif
  #define RequireShortedProbes
  if (AllProbesShorted() != 3) return;
    177a:	0e 94 97 0b 	call	0x172e	; 0x172e <AllProbesShorted>
    177e:	83 30       	cpi	r24, 0x03	; 3
    1780:	09 f0       	breq	.+2      	; 0x1784 <AutoCheck+0x32>
    1782:	91 c2       	rjmp	.+1314   	; 0x1ca6 <AutoCheck+0x554>
  lcd_clear();
    1784:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  lcd_fix_string(SELFTEST);		// "Selftest mode.."
    1788:	8d eb       	ldi	r24, 0xBD	; 189
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  lcd_line2();
    1790:	80 ec       	ldi	r24, 0xC0	; 192
    1792:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_data('?');			// wait for key pressed
    1796:	8f e3       	ldi	r24, 0x3F	; 63
    1798:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
  for (tt=0;tt<50;tt++) {
    179c:	10 e0       	ldi	r17, 0x00	; 0
     if ((ON_PIN_REG & (1<<RST_PIN)) != 0) break;	// key is unpressed
    179e:	4f 99       	sbic	0x09, 7	; 9
    17a0:	08 c0       	rjmp	.+16     	; 0x17b2 <AutoCheck+0x60>
     wait_about10ms();			// key is still pressed, wait for release
    17a2:	82 e0       	ldi	r24, 0x02	; 2
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>
  if (AllProbesShorted() != 3) return;
  lcd_clear();
  lcd_fix_string(SELFTEST);		// "Selftest mode.."
  lcd_line2();
  lcd_data('?');			// wait for key pressed
  for (tt=0;tt<50;tt++) {
    17aa:	1f 5f       	subi	r17, 0xFF	; 255
    17ac:	12 33       	cpi	r17, 0x32	; 50
    17ae:	b9 f7       	brne	.-18     	; 0x179e <AutoCheck+0x4c>
    17b0:	0a c0       	rjmp	.+20     	; 0x17c6 <AutoCheck+0x74>
     if ((ON_PIN_REG & (1<<RST_PIN)) != 0) break;	// key is unpressed
    17b2:	10 e0       	ldi	r17, 0x00	; 0
     wait_about10ms();			// key is still pressed, wait for release
    }
  if (tt == 50) goto no_selftest;		// key is more than 500ms pressed
  for (tt=0;tt<200;tt++) {
     if(!(ON_PIN_REG & (1<<RST_PIN))) goto begin_selftest;	// key is pressed again
    17b4:	4f 9b       	sbis	0x09, 7	; 9
    17b6:	0e c0       	rjmp	.+28     	; 0x17d4 <AutoCheck+0x82>
     wait_about10ms();
    17b8:	82 e0       	ldi	r24, 0x02	; 2
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>
  for (tt=0;tt<50;tt++) {
     if ((ON_PIN_REG & (1<<RST_PIN)) != 0) break;	// key is unpressed
     wait_about10ms();			// key is still pressed, wait for release
    }
  if (tt == 50) goto no_selftest;		// key is more than 500ms pressed
  for (tt=0;tt<200;tt++) {
    17c0:	1f 5f       	subi	r17, 0xFF	; 255
    17c2:	18 3c       	cpi	r17, 0xC8	; 200
    17c4:	b9 f7       	brne	.-18     	; 0x17b4 <AutoCheck+0x62>
     if(!(ON_PIN_REG & (1<<RST_PIN))) goto begin_selftest;	// key is pressed again
     wait_about10ms();
    }
  // no key pressed for 2s
no_selftest:
  lcd_clear();
    17c6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  lcd_fix2_string(VERSION_str);	//"Version ..."
    17ca:	88 ed       	ldi	r24, 0xD8	; 216
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
  return;
    17d2:	69 c2       	rjmp	.+1234   	; 0x1ca6 <AutoCheck+0x554>
begin_selftest:
  lcd_line2();
    17d4:	80 ec       	ldi	r24, 0xC0	; 192
    17d6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix2_string(R0_str);		// "R0="
    17da:	86 ee       	ldi	r24, 0xE6	; 230
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[2]), (int8_t)0);	// clear zero offset
    17e2:	88 ea       	ldi	r24, 0xA8	; 168
    17e4:	91 e0       	ldi	r25, 0x01	; 1
    17e6:	60 e0       	ldi	r22, 0x00	; 0
    17e8:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__eewr_byte_m168>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (int8_t)0);	// clear zero offset
    17ec:	89 ea       	ldi	r24, 0xA9	; 169
    17ee:	91 e0       	ldi	r25, 0x01	; 1
    17f0:	60 e0       	ldi	r22, 0x00	; 0
    17f2:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__eewr_byte_m168>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)0);	// clear zero offset
    17f6:	87 ea       	ldi	r24, 0xA7	; 167
    17f8:	91 e0       	ldi	r25, 0x01	; 1
    17fa:	60 e0       	ldi	r22, 0x00	; 0
    17fc:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__eewr_byte_m168>

  adcmv[0] = GetESR(TP3, TP1);
    1800:	82 e0       	ldi	r24, 0x02	; 2
    1802:	60 e0       	ldi	r22, 0x00	; 0
    1804:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <GetESR>
    1808:	7c 01       	movw	r14, r24
    180a:	9a 83       	std	Y+2, r25	; 0x02
    180c:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = GetESR(TP3, TP2);
    180e:	82 e0       	ldi	r24, 0x02	; 2
    1810:	61 e0       	ldi	r22, 0x01	; 1
    1812:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <GetESR>
    1816:	6c 01       	movw	r12, r24
    1818:	9c 83       	std	Y+4, r25	; 0x04
    181a:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = GetESR(TP2, TP1);
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	60 e0       	ldi	r22, 0x00	; 0
    1820:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <GetESR>
    1824:	5c 01       	movw	r10, r24
    1826:	9e 83       	std	Y+6, r25	; 0x06
    1828:	8d 83       	std	Y+5, r24	; 0x05
  DisplayValue(adcmv[0],-2,' ',3);
    182a:	b7 01       	movw	r22, r14
    182c:	88 27       	eor	r24, r24
    182e:	77 fd       	sbrc	r23, 7
    1830:	80 95       	com	r24
    1832:	98 2f       	mov	r25, r24
    1834:	4e ef       	ldi	r20, 0xFE	; 254
    1836:	20 e2       	ldi	r18, 0x20	; 32
    1838:	03 e0       	ldi	r16, 0x03	; 3
    183a:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
  DisplayValue(adcmv[1],-2,' ',3);
    183e:	b6 01       	movw	r22, r12
    1840:	88 27       	eor	r24, r24
    1842:	77 fd       	sbrc	r23, 7
    1844:	80 95       	com	r24
    1846:	98 2f       	mov	r25, r24
    1848:	4e ef       	ldi	r20, 0xFE	; 254
    184a:	20 e2       	ldi	r18, 0x20	; 32
    184c:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
  DisplayValue(adcmv[2],-2,LCD_CHAR_OMEGA,3);
    1850:	b5 01       	movw	r22, r10
    1852:	88 27       	eor	r24, r24
    1854:	77 fd       	sbrc	r23, 7
    1856:	80 95       	com	r24
    1858:	98 2f       	mov	r25, r24
    185a:	4e ef       	ldi	r20, 0xFE	; 254
    185c:	24 ef       	ldi	r18, 0xF4	; 244
    185e:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
  if (adcmv[0] < 60) {
    1862:	2c e3       	ldi	r18, 0x3C	; 60
    1864:	e2 16       	cp	r14, r18
    1866:	f1 04       	cpc	r15, r1
    1868:	2c f4       	brge	.+10     	; 0x1874 <AutoCheck+0x122>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[2]), (int8_t)adcmv[0]);	// fix zero offset
    186a:	88 ea       	ldi	r24, 0xA8	; 168
    186c:	91 e0       	ldi	r25, 0x01	; 1
    186e:	6e 2d       	mov	r22, r14
    1870:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__eewr_byte_m168>
  }
  if (adcmv[1] < 60) {
    1874:	8c e3       	ldi	r24, 0x3C	; 60
    1876:	c8 16       	cp	r12, r24
    1878:	d1 04       	cpc	r13, r1
    187a:	2c f4       	brge	.+10     	; 0x1886 <AutoCheck+0x134>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (int8_t)adcmv[1]);	// fix zero offset
    187c:	89 ea       	ldi	r24, 0xA9	; 169
    187e:	91 e0       	ldi	r25, 0x01	; 1
    1880:	6c 2d       	mov	r22, r12
    1882:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__eewr_byte_m168>
  }
  if (adcmv[2] < 60) {
    1886:	ec e3       	ldi	r30, 0x3C	; 60
    1888:	ae 16       	cp	r10, r30
    188a:	b1 04       	cpc	r11, r1
    188c:	2c f4       	brge	.+10     	; 0x1898 <AutoCheck+0x146>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
    188e:	87 ea       	ldi	r24, 0xA7	; 167
    1890:	91 e0       	ldi	r25, 0x01	; 1
    1892:	6a 2d       	mov	r22, r10
    1894:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__eewr_byte_m168>
  lcd_clear();
  lcd_fix_string(SELFTEST);		// "Selftest mode.."
  lcd_line2();
  lcd_data('?');			// wait for key pressed
  for (tt=0;tt<50;tt++) {
     if ((ON_PIN_REG & (1<<RST_PIN)) != 0) break;	// key is unpressed
    1898:	10 e0       	ldi	r17, 0x00	; 0
  }
  if (adcmv[2] < 60) {
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
  }
  for(tt=0;tt<12;tt++) {
     wait_about500ms();
    189a:	84 e6       	ldi	r24, 0x64	; 100
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    18a2:	4f 9b       	sbis	0x09, 7	; 9
    18a4:	03 c0       	rjmp	.+6      	; 0x18ac <AutoCheck+0x15a>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (int8_t)adcmv[1]);	// fix zero offset
  }
  if (adcmv[2] < 60) {
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
  }
  for(tt=0;tt<12;tt++) {
    18a6:	1f 5f       	subi	r17, 0xFF	; 255
    18a8:	1c 30       	cpi	r17, 0x0C	; 12
    18aa:	b9 f7       	brne	.-18     	; 0x189a <AutoCheck+0x148>
     wait_about500ms();
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    18ac:	10 e0       	ldi	r17, 0x00	; 0
     wait_about1s();
  } //end for tt
#else
  for (ww=0;ww<120;ww++) {
     // wait 1 minute for releasing the probes
     lcd_line2();		//Cursor to column 1, row 2
    18ae:	80 ec       	ldi	r24, 0xC0	; 192
    18b0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     lcd_clear_line();		// clear total line
    18b4:	0e 94 8a 02 	call	0x514	; 0x514 <lcd_clear_line>
     lcd_line2();		//Cursor to column 1, row 2
    18b8:	80 ec       	ldi	r24, 0xC0	; 192
    18ba:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     lcd_fix_string(RELPROBE);	// "Release Probes"
    18be:	8d ec       	ldi	r24, 0xCD	; 205
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     wait_about500ms();
    18c6:	84 e6       	ldi	r24, 0x64	; 100
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>
     if (AllProbesShorted() == 0) break;
    18ce:	0e 94 97 0b 	call	0x172e	; 0x172e <AllProbesShorted>
    18d2:	88 23       	and	r24, r24
    18d4:	19 f0       	breq	.+6      	; 0x18dc <AutoCheck+0x18a>
        wait_about500ms();
     } //end for ww
     wait_about1s();
  } //end for tt
#else
  for (ww=0;ww<120;ww++) {
    18d6:	1f 5f       	subi	r17, 0xFF	; 255
    18d8:	18 37       	cpi	r17, 0x78	; 120
    18da:	49 f7       	brne	.-46     	; 0x18ae <AutoCheck+0x15c>
     wait_about500ms();
     if (AllProbesShorted() == 0) break;
  }
#endif

  lcd_clear();
    18dc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  lcd_fix_string(RIHI);	// "RiHi="
    18e0:	85 e5       	ldi	r24, 0x55	; 85
    18e2:	91 e0       	ldi	r25, 0x01	; 1
    18e4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  DisplayValue(RRpinPL,-1,LCD_CHAR_OMEGA,3);
    18e8:	60 91 42 01 	lds	r22, 0x0142
    18ec:	70 91 43 01 	lds	r23, 0x0143
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	4f ef       	ldi	r20, 0xFF	; 255
    18f6:	24 ef       	ldi	r18, 0xF4	; 244
    18f8:	03 e0       	ldi	r16, 0x03	; 3
    18fa:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
  lcd_line2();
    18fe:	80 ec       	ldi	r24, 0xC0	; 192
    1900:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_string(RILO);	// "RiLo="
    1904:	8c e5       	ldi	r24, 0x5C	; 92
    1906:	91 e0       	ldi	r25, 0x01	; 1
    1908:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  DisplayValue(RRpinMI,-1,LCD_CHAR_OMEGA,3);
    190c:	60 91 47 01 	lds	r22, 0x0147
    1910:	70 91 48 01 	lds	r23, 0x0148
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	4f ef       	ldi	r20, 0xFF	; 255
    191a:	24 ef       	ldi	r18, 0xF4	; 244
    191c:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
  wait_about2s();			//wait 2 seconds
    1920:	80 e9       	ldi	r24, 0x90	; 144
    1922:	91 e0       	ldi	r25, 0x01	; 1
    1924:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>

  //measure Zero offset for Capacity measurement
  PartFound = PART_NONE;
    1928:	10 92 07 01 	sts	0x0107, r1
  ReadCapacity(TP3, TP1);
    192c:	82 e0       	ldi	r24, 0x02	; 2
    192e:	60 e0       	ldi	r22, 0x00	; 0
    1930:	0e 94 43 14 	call	0x2886	; 0x2886 <ReadCapacity>
  adcmv[5] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:3
    1934:	00 91 6a 01 	lds	r16, 0x016A
    1938:	10 91 6b 01 	lds	r17, 0x016B
    193c:	1c 87       	std	Y+12, r17	; 0x0c
    193e:	0b 87       	std	Y+11, r16	; 0x0b
  ReadCapacity(TP3, TP2);
    1940:	82 e0       	ldi	r24, 0x02	; 2
    1942:	61 e0       	ldi	r22, 0x01	; 1
    1944:	0e 94 43 14 	call	0x2886	; 0x2886 <ReadCapacity>
  adcmv[6] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:3
    1948:	e0 90 6a 01 	lds	r14, 0x016A
    194c:	f0 90 6b 01 	lds	r15, 0x016B
    1950:	fe 86       	std	Y+14, r15	; 0x0e
    1952:	ed 86       	std	Y+13, r14	; 0x0d
  ReadCapacity(TP2, TP1);
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	60 e0       	ldi	r22, 0x00	; 0
    1958:	0e 94 43 14 	call	0x2886	; 0x2886 <ReadCapacity>
  adcmv[2] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:2
    195c:	c0 90 6a 01 	lds	r12, 0x016A
    1960:	d0 90 6b 01 	lds	r13, 0x016B
    1964:	de 82       	std	Y+6, r13	; 0x06
    1966:	cd 82       	std	Y+5, r12	; 0x05
  ReadCapacity(TP1, TP3);
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	62 e0       	ldi	r22, 0x02	; 2
    196c:	0e 94 43 14 	call	0x2886	; 0x2886 <ReadCapacity>
  adcmv[1] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:1
    1970:	80 91 6a 01 	lds	r24, 0x016A
    1974:	90 91 6b 01 	lds	r25, 0x016B
    1978:	9c 83       	std	Y+4, r25	; 0x04
    197a:	8b 83       	std	Y+3, r24	; 0x03
  ReadCapacity(TP2, TP3);
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	62 e0       	ldi	r22, 0x02	; 2
    1980:	0e 94 43 14 	call	0x2886	; 0x2886 <ReadCapacity>
  adcmv[4] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:2
    1984:	80 91 6a 01 	lds	r24, 0x016A
    1988:	90 91 6b 01 	lds	r25, 0x016B
    198c:	9a 87       	std	Y+10, r25	; 0x0a
    198e:	89 87       	std	Y+9, r24	; 0x09
  ReadCapacity(TP1, TP2);
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	61 e0       	ldi	r22, 0x01	; 1
    1994:	0e 94 43 14 	call	0x2886	; 0x2886 <ReadCapacity>
  adcmv[0] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:1
    1998:	80 91 6a 01 	lds	r24, 0x016A
    199c:	90 91 6b 01 	lds	r25, 0x016B
    19a0:	9a 83       	std	Y+2, r25	; 0x02
    19a2:	89 83       	std	Y+1, r24	; 0x01
  adcmv[3] = adcmv[0];				// same as first for the checking loop
    19a4:	98 87       	std	Y+8, r25	; 0x08
    19a6:	8f 83       	std	Y+7, r24	; 0x07
  lcd_clear();
    19a8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  lcd_fix_string(C0_str);			//output "C0 "
    19ac:	83 e6       	ldi	r24, 0x63	; 99
    19ae:	91 e0       	ldi	r25, 0x01	; 1
    19b0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
    19b4:	b8 01       	movw	r22, r16
    19b6:	88 27       	eor	r24, r24
    19b8:	77 fd       	sbrc	r23, 7
    19ba:	80 95       	com	r24
    19bc:	98 2f       	mov	r25, r24
    19be:	40 e0       	ldi	r20, 0x00	; 0
    19c0:	20 e2       	ldi	r18, 0x20	; 32
    19c2:	03 e0       	ldi	r16, 0x03	; 3
    19c4:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
    19c8:	b7 01       	movw	r22, r14
    19ca:	88 27       	eor	r24, r24
    19cc:	77 fd       	sbrc	r23, 7
    19ce:	80 95       	com	r24
    19d0:	98 2f       	mov	r25, r24
    19d2:	40 e0       	ldi	r20, 0x00	; 0
    19d4:	20 e2       	ldi	r18, 0x20	; 32
    19d6:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
    19da:	b6 01       	movw	r22, r12
    19dc:	88 27       	eor	r24, r24
    19de:	77 fd       	sbrc	r23, 7
    19e0:	80 95       	com	r24
    19e2:	98 2f       	mov	r25, r24
    19e4:	44 ef       	ldi	r20, 0xF4	; 244
    19e6:	26 e4       	ldi	r18, 0x46	; 70
    19e8:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
    19ec:	8e 01       	movw	r16, r28
    19ee:	0f 5f       	subi	r16, 0xFF	; 255
    19f0:	1f 4f       	sbci	r17, 0xFF	; 255
void AutoCheck(void) {
    19f2:	9e 01       	movw	r18, r28
    19f4:	21 5f       	subi	r18, 0xF1	; 241
    19f6:	3f 4f       	sbci	r19, 0xFF	; 255
    19f8:	f8 01       	movw	r30, r16
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {			//checking loop
      if ((adcmv[ww] > 90) || (adcmv[ww] <10)) goto no_c0save;
    19fa:	81 91       	ld	r24, Z+
    19fc:	91 91       	ld	r25, Z+
    19fe:	0a 97       	sbiw	r24, 0x0a	; 10
    1a00:	81 35       	cpi	r24, 0x51	; 81
    1a02:	91 05       	cpc	r25, r1
    1a04:	e8 f4       	brcc	.+58     	; 0x1a40 <AutoCheck+0x2ee>
  lcd_fix_string(C0_str);			//output "C0 "
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {			//checking loop
    1a06:	e2 17       	cp	r30, r18
    1a08:	f3 07       	cpc	r31, r19
    1a0a:	b9 f7       	brne	.-18     	; 0x19fa <AutoCheck+0x2a8>
    1a0c:	ee 24       	eor	r14, r14
    1a0e:	ff 24       	eor	r15, r15
      if ((adcmv[ww] > 90) || (adcmv[ww] <10)) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
    1a10:	f8 01       	movw	r30, r16
    1a12:	60 81       	ld	r22, Z
    1a14:	0e 5f       	subi	r16, 0xFE	; 254
    1a16:	1f 4f       	sbci	r17, 0xFF	; 255
    1a18:	61 5f       	subi	r22, 0xF1	; 241
    1a1a:	c7 01       	movw	r24, r14
    1a1c:	81 56       	subi	r24, 0x61	; 97
    1a1e:	9e 4f       	sbci	r25, 0xFE	; 254
    1a20:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__eewr_byte_m168>
    1a24:	08 94       	sec
    1a26:	e1 1c       	adc	r14, r1
    1a28:	f1 1c       	adc	r15, r1
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {			//checking loop
      if ((adcmv[ww] > 90) || (adcmv[ww] <10)) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
    1a2a:	f7 e0       	ldi	r31, 0x07	; 7
    1a2c:	ef 16       	cp	r14, r31
    1a2e:	f1 04       	cpc	r15, r1
    1a30:	79 f7       	brne	.-34     	; 0x1a10 <AutoCheck+0x2be>
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
  }
  lcd_line2();
    1a32:	80 ec       	ldi	r24, 0xC0	; 192
    1a34:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_string(OK_str);		// output "OK"
    1a38:	8b ee       	ldi	r24, 0xEB	; 235
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
no_c0save:
 #endif
 wait_about2s();		//wait 2 seconds
    1a40:	80 e9       	ldi	r24, 0x90	; 144
    1a42:	91 e0       	ldi	r25, 0x01	; 1
    1a44:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
    1a48:	10 e0       	ldi	r17, 0x00	; 0
 for (ww=0;ww<64;ww++) {
    1a4a:	cc 24       	eor	r12, r12
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
    1a4c:	0a e0       	ldi	r16, 0x0A	; 10
    1a4e:	80 2e       	mov	r8, r16
    1a50:	91 2c       	mov	r9, r1
    1a52:	a1 2c       	mov	r10, r1
    1a54:	b1 2c       	mov	r11, r1
     lcd_data('3');
     lcd_fix2_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1a56:	b2 e6       	ldi	r27, 0x62	; 98
    1a58:	eb 2e       	mov	r14, r27
    1a5a:	b1 e0       	ldi	r27, 0x01	; 1
    1a5c:	fb 2e       	mov	r15, r27
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
     lcd_clear();
    1a5e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
     lcd_data('1');
    1a62:	81 e3       	ldi	r24, 0x31	; 49
    1a64:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
     lcd_fix_string(CapZeich);	// "-||-"
    1a68:	8d e1       	ldi	r24, 0x1D	; 29
    1a6a:	91 e0       	ldi	r25, 0x01	; 1
    1a6c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_data('3');
    1a70:	83 e3       	ldi	r24, 0x33	; 51
    1a72:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
     lcd_fix2_string(MinCap_str); // " >100nF!"
    1a76:	8a ee       	ldi	r24, 0xEA	; 234
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
     PartFound = PART_NONE;
    1a7e:	10 92 07 01 	sts	0x0107, r1
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
    1a82:	82 e0       	ldi	r24, 0x02	; 2
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	0e 94 43 14 	call	0x2886	; 0x2886 <ReadCapacity>
    1a8a:	20 91 62 01 	lds	r18, 0x0162
    1a8e:	30 91 63 01 	lds	r19, 0x0163
    1a92:	40 91 64 01 	lds	r20, 0x0164
    1a96:	50 91 65 01 	lds	r21, 0x0165
    1a9a:	00 91 74 01 	lds	r16, 0x0174
     while (cap.cpre < -9) {
    1a9e:	07 c0       	rjmp	.+14     	; 0x1aae <AutoCheck+0x35c>
        cap.cpre++;
        cap.cval /= 10;
    1aa0:	ca 01       	movw	r24, r20
    1aa2:	b9 01       	movw	r22, r18
    1aa4:	a5 01       	movw	r20, r10
    1aa6:	94 01       	movw	r18, r8
    1aa8:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
    1aac:	0f 5f       	subi	r16, 0xFF	; 255
     lcd_data('3');
     lcd_fix2_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1aae:	07 3f       	cpi	r16, 0xF7	; 247
    1ab0:	bc f3       	brlt	.-18     	; 0x1aa0 <AutoCheck+0x34e>
    1ab2:	00 93 74 01 	sts	0x0174, r16
    1ab6:	20 93 62 01 	sts	0x0162, r18
    1aba:	f7 01       	movw	r30, r14
    1abc:	31 83       	std	Z+1, r19	; 0x01
    1abe:	42 83       	std	Z+2, r20	; 0x02
    1ac0:	53 83       	std	Z+3, r21	; 0x03
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1ac2:	07 3f       	cpi	r16, 0xF7	; 247
    1ac4:	09 f0       	breq	.+2      	; 0x1ac8 <AutoCheck+0x376>
    1ac6:	b9 c0       	rjmp	.+370    	; 0x1c3a <AutoCheck+0x4e8>
    1ac8:	20 36       	cpi	r18, 0x60	; 96
    1aca:	31 05       	cpc	r19, r1
    1acc:	41 05       	cpc	r20, r1
    1ace:	51 05       	cpc	r21, r1
    1ad0:	08 f4       	brcc	.+2      	; 0x1ad4 <AutoCheck+0x382>
    1ad2:	b3 c0       	rjmp	.+358    	; 0x1c3a <AutoCheck+0x4e8>
    1ad4:	20 3f       	cpi	r18, 0xF0	; 240
    1ad6:	f5 e5       	ldi	r31, 0x55	; 85
    1ad8:	3f 07       	cpc	r19, r31
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	4f 07       	cpc	r20, r31
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	5f 07       	cpc	r21, r31
    1ae2:	08 f0       	brcs	.+2      	; 0x1ae6 <AutoCheck+0x394>
    1ae4:	aa c0       	rjmp	.+340    	; 0x1c3a <AutoCheck+0x4e8>
        cap_found++;
    1ae6:	1f 5f       	subi	r17, 0xFF	; 255
     } else {
        cap_found = 0;		// wait for stable connection
     }
     if (cap_found > 1) {
    1ae8:	12 30       	cpi	r17, 0x02	; 2
    1aea:	09 f0       	breq	.+2      	; 0x1aee <AutoCheck+0x39c>
    1aec:	a7 c0       	rjmp	.+334    	; 0x1c3c <AutoCheck+0x4ea>
        // value of capacitor is correct
        (void) eeprom_write_word((uint16_t *)(&ref_offset), load_diff);	// hold zero offset + slew rate dependend offset
    1aee:	60 91 76 01 	lds	r22, 0x0176
    1af2:	70 91 77 01 	lds	r23, 0x0177
    1af6:	8d e9       	ldi	r24, 0x9D	; 157
    1af8:	91 e0       	ldi	r25, 0x01	; 1
    1afa:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <__eewr_word_m168>
        lcd_clear();
    1afe:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
        lcd_fix2_string(REF_C_str);	// "REF_C="
    1b02:	82 ef       	ldi	r24, 0xF2	; 242
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
        lcd_string(itoa(load_diff, outval, 10));	//output REF_C_KORR
    1b0a:	80 91 76 01 	lds	r24, 0x0176
    1b0e:	90 91 77 01 	lds	r25, 0x0177
    1b12:	6c e0       	ldi	r22, 0x0C	; 12
    1b14:	71 e0       	ldi	r23, 0x01	; 1
    1b16:	4a e0       	ldi	r20, 0x0A	; 10
    1b18:	50 e0       	ldi	r21, 0x00	; 0
    1b1a:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <itoa>
    1b1e:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_string>
        wait_about1s();
        }
//#######################################
#endif
  #ifdef AUTOSCALE_ADC
        ADC_PORT =  TXD_VAL;	//ADC-Port 1 to GND
    1b22:	88 e0       	ldi	r24, 0x08	; 8
    1b24:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    1b26:	89 e0       	ldi	r24, 0x09	; 9
    1b28:	87 b9       	out	0x07, r24	; 7
        R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1b2a:	80 e2       	ldi	r24, 0x20	; 32
    1b2c:	84 b9       	out	0x04, r24	; 4
        do {
           adcmv[0] = ReadADC(TP3);
    1b2e:	82 e0       	ldi	r24, 0x02	; 2
    1b30:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
        } while (adcmv[0] > 980);
    1b34:	23 e0       	ldi	r18, 0x03	; 3
    1b36:	85 3d       	cpi	r24, 0xD5	; 213
    1b38:	92 07       	cpc	r25, r18
    1b3a:	cc f7       	brge	.-14     	; 0x1b2e <AutoCheck+0x3dc>
        R_DDR = 0;		//all Pins to input 
    1b3c:	14 b8       	out	0x04, r1	; 4
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1b3e:	10 92 3f 01 	sts	0x013F, r1
    1b42:	10 92 3e 01 	sts	0x013E, r1
        adcmv[0] = ReadADC(TP3);  // get cap voltage with VCC reference
    1b46:	82 e0       	ldi	r24, 0x02	; 2
    1b48:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
    1b4c:	4c 01       	movw	r8, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1b4e:	85 e9       	ldi	r24, 0x95	; 149
    1b50:	91 e0       	ldi	r25, 0x01	; 1
    1b52:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__eerd_byte_m168>
    1b56:	99 27       	eor	r25, r25
    1b58:	87 fd       	sbrc	r24, 7
    1b5a:	90 95       	com	r25
    1b5c:	20 91 44 01 	lds	r18, 0x0144
    1b60:	30 91 45 01 	lds	r19, 0x0145
    1b64:	82 0f       	add	r24, r18
    1b66:	93 1f       	adc	r25, r19
    1b68:	90 93 3f 01 	sts	0x013F, r25
    1b6c:	80 93 3e 01 	sts	0x013E, r24
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
    1b70:	82 e0       	ldi	r24, 0x02	; 2
    1b72:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
    1b76:	8c 01       	movw	r16, r24
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1b78:	10 92 3f 01 	sts	0x013F, r1
    1b7c:	10 92 3e 01 	sts	0x013E, r1
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
    1b80:	82 e0       	ldi	r24, 0x02	; 2
    1b82:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
    1b86:	5c 01       	movw	r10, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1b88:	c0 90 44 01 	lds	r12, 0x0144
    1b8c:	d0 90 45 01 	lds	r13, 0x0145
    1b90:	85 e9       	ldi	r24, 0x95	; 149
    1b92:	91 e0       	ldi	r25, 0x01	; 1
    1b94:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__eerd_byte_m168>
    1b98:	99 27       	eor	r25, r25
    1b9a:	87 fd       	sbrc	r24, 7
    1b9c:	90 95       	com	r25
    1b9e:	8c 0d       	add	r24, r12
    1ba0:	9d 1d       	adc	r25, r13
    1ba2:	90 93 3f 01 	sts	0x013F, r25
    1ba6:	80 93 3e 01 	sts	0x013E, r24
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1baa:	85 e9       	ldi	r24, 0x95	; 149
    1bac:	91 e0       	ldi	r25, 0x01	; 1
    1bae:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__eerd_byte_m168>
    1bb2:	f8 2e       	mov	r15, r24
        lcd_line2();
    1bb4:	80 ec       	ldi	r24, 0xC0	; 192
    1bb6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
        lcd_fix2_string(REF_R_str);	// "REF_R="
    1bba:	89 ef       	ldi	r24, 0xF9	; 249
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1bc2:	85 e9       	ldi	r24, 0x95	; 149
    1bc4:	91 e0       	ldi	r25, 0x01	; 1
    1bc6:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__eerd_byte_m168>
        ADCconfig.U_Bandgap = ADC_internal_reference;
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
        ADCconfig.U_Bandgap = ADC_internal_reference;
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1bca:	a3 e0       	ldi	r26, 0x03	; 3
    1bcc:	ea 2e       	mov	r14, r26
    1bce:	e8 0e       	add	r14, r24
    1bd0:	a8 0c       	add	r10, r8
    1bd2:	b9 1c       	adc	r11, r9
    1bd4:	a0 1a       	sub	r10, r16
    1bd6:	b1 0a       	sbc	r11, r17
    1bd8:	a0 1a       	sub	r10, r16
    1bda:	b1 0a       	sbc	r11, r17
    1bdc:	b5 01       	movw	r22, r10
    1bde:	88 27       	eor	r24, r24
    1be0:	77 fd       	sbrc	r23, 7
    1be2:	80 95       	com	r24
    1be4:	98 2f       	mov	r25, r24
    1be6:	2f 2d       	mov	r18, r15
    1be8:	33 27       	eor	r19, r19
    1bea:	27 fd       	sbrc	r18, 7
    1bec:	30 95       	com	r19
    1bee:	2c 0d       	add	r18, r12
    1bf0:	3d 1d       	adc	r19, r13
    1bf2:	40 e0       	ldi	r20, 0x00	; 0
    1bf4:	50 e0       	ldi	r21, 0x00	; 0
    1bf6:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
    1bfa:	00 0f       	add	r16, r16
    1bfc:	11 1f       	adc	r17, r17
    1bfe:	98 01       	movw	r18, r16
    1c00:	44 27       	eor	r20, r20
    1c02:	37 fd       	sbrc	r19, 7
    1c04:	40 95       	com	r20
    1c06:	54 2f       	mov	r21, r20
    1c08:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__divmodsi4>
        lcd_line2();
        lcd_fix2_string(REF_R_str);	// "REF_R="
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1c0c:	e2 0e       	add	r14, r18
        (void) eeprom_write_byte((uint8_t *)(&RefDiff), (uint8_t)udiff2);	// hold offset for true reference Voltage
    1c0e:	85 e9       	ldi	r24, 0x95	; 149
    1c10:	91 e0       	ldi	r25, 0x01	; 1
    1c12:	6e 2d       	mov	r22, r14
    1c14:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__eewr_byte_m168>
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
    1c18:	8e 2d       	mov	r24, r14
    1c1a:	99 27       	eor	r25, r25
    1c1c:	87 fd       	sbrc	r24, 7
    1c1e:	90 95       	com	r25
    1c20:	6c e0       	ldi	r22, 0x0C	; 12
    1c22:	71 e0       	ldi	r23, 0x01	; 1
    1c24:	4a e0       	ldi	r20, 0x0A	; 10
    1c26:	50 e0       	ldi	r21, 0x00	; 0
    1c28:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <itoa>
    1c2c:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_string>
  #endif
        wait_about4s();
    1c30:	80 e2       	ldi	r24, 0x20	; 32
    1c32:	93 e0       	ldi	r25, 0x03	; 3
    1c34:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>
        break;
    1c38:	1b c0       	rjmp	.+54     	; 0x1c70 <AutoCheck+0x51e>
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1c3a:	10 e0       	ldi	r17, 0x00	; 0
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
  #endif
        wait_about4s();
        break;
     }
     lcd_line2();
    1c3c:	80 ec       	ldi	r24, 0xC0	; 192
    1c3e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     DisplayValue(cap.cval,cap.cpre,'F',4);
    1c42:	60 91 62 01 	lds	r22, 0x0162
    1c46:	70 91 63 01 	lds	r23, 0x0163
    1c4a:	80 91 64 01 	lds	r24, 0x0164
    1c4e:	90 91 65 01 	lds	r25, 0x0165
    1c52:	40 91 74 01 	lds	r20, 0x0174
    1c56:	26 e4       	ldi	r18, 0x46	; 70
    1c58:	04 e0       	ldi	r16, 0x04	; 4
    1c5a:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
     wait_about200ms();			// wait additional time
    1c5e:	88 e2       	ldi	r24, 0x28	; 40
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>
 wait_about2s();		//wait 2 seconds
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
    1c66:	c3 94       	inc	r12
    1c68:	8c 2d       	mov	r24, r12
    1c6a:	80 34       	cpi	r24, 0x40	; 64
    1c6c:	09 f0       	breq	.+2      	; 0x1c70 <AutoCheck+0x51e>
    1c6e:	f7 ce       	rjmp	.-530    	; 0x1a5e <AutoCheck+0x30c>
     wait_about200ms();			// wait additional time
  } // end for ww
 #endif


  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    1c70:	89 e1       	ldi	r24, 0x19	; 25
    1c72:	80 93 3c 01 	sts	0x013C, r24
  lcd_clear();
    1c76:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  lcd_fix2_string(VERSION_str);	//"Version ..."
    1c7a:	88 ed       	ldi	r24, 0xD8	; 216
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
  lcd_line2();
    1c82:	80 ec       	ldi	r24, 0xC0	; 192
    1c84:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_string(ATE);		//"Selftest End"
    1c88:	8c ed       	ldi	r24, 0xDC	; 220
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        // if key is pressed, don't repeat
        break;
     }
  }
 #endif
 PartFound = PART_NONE;
    1c90:	10 92 07 01 	sts	0x0107, r1
 wait_about1s();			//wait 1 seconds
    1c94:	88 ec       	ldi	r24, 0xC8	; 200
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>
 lcd_line2();
    1c9c:	80 ec       	ldi	r24, 0xC0	; 192
    1c9e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
 lcd_clear_line();			// clear total line
    1ca2:	0e 94 8a 02 	call	0x514	; 0x514 <lcd_clear_line>
#endif
 } 
    1ca6:	2e 96       	adiw	r28, 0x0e	; 14
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	f8 94       	cli
    1cac:	de bf       	out	0x3e, r29	; 62
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	cd bf       	out	0x3d, r28	; 61
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	1f 91       	pop	r17
    1cb8:	0f 91       	pop	r16
    1cba:	ff 90       	pop	r15
    1cbc:	ef 90       	pop	r14
    1cbe:	df 90       	pop	r13
    1cc0:	cf 90       	pop	r12
    1cc2:	bf 90       	pop	r11
    1cc4:	af 90       	pop	r10
    1cc6:	9f 90       	pop	r9
    1cc8:	8f 90       	pop	r8
    1cca:	08 95       	ret

00001ccc <GetIr>:
/* Get residual current in reverse direction of a diode */ 



//=================================================================
void GetIr(uint8_t hipin, uint8_t lopin) {
    1ccc:	0f 93       	push	r16
    1cce:	cf 93       	push	r28
    1cd0:	df 93       	push	r29
  unsigned int ir_nano;
//  unsigned int ir_micro;
  uint8_t LoPinR_L;
  uint8_t HiADC;

  HiADC = pgm_read_byte(&PinADCtab[hipin]);
    1cd2:	e8 2f       	mov	r30, r24
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	ed 5f       	subi	r30, 0xFD	; 253
    1cd8:	fe 4f       	sbci	r31, 0xFE	; 254
    1cda:	e4 91       	lpm	r30, Z+
  ADC_PORT = HiADC | TXD_VAL;		// switch ADC port to high level
    1cdc:	e8 60       	ori	r30, 0x08	; 8
    1cde:	e8 b9       	out	0x08, r30	; 8
  ADC_DDR = HiADC | TXD_MSK;		// switch High Pin direct to VCC
    1ce0:	e7 b9       	out	0x07, r30	; 7
  LoPinR_L = pgm_read_byte(&PinRLtab[lopin]);  //R_L mask for LowPin R_L load
    1ce2:	e6 2f       	mov	r30, r22
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	e0 50       	subi	r30, 0x00	; 0
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	e4 91       	lpm	r30, Z+
  R_PORT = 0;				// switch R-Port to GND
    1cec:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinR_L + LoPinR_L;		// switch R_H port for LowPin to output (GND)
    1cee:	ee 0f       	add	r30, r30
    1cf0:	e4 b9       	out	0x04, r30	; 4
  u_res = W5msReadADC(lopin);		// read voltage
    1cf2:	86 2f       	mov	r24, r22
    1cf4:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
    1cf8:	ec 01       	movw	r28, r24
  if (u_res == 0) return;		// no Output, if no current in reverse direction
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	f9 f0       	breq	.+62     	; 0x1d3c <GetIr+0x70>
  lcd_fix_string(Ir_str);		// output text "  Ir="
    1cfe:	8d e3       	ldi	r24, 0x3D	; 61
    1d00:	91 e0       	ldi	r25, 0x01	; 1
    1d02:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
#ifdef WITH_IRMICRO
  if (u_res < 2500) {
#endif
     /* R_H_VAL has units of 10 Ohm, u_res has units of mV, ir_nano has units of nA */
     ir_nano = (unsigned long)(u_res * 100000UL) / R_H_VAL;
    1d06:	be 01       	movw	r22, r28
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	20 ea       	ldi	r18, 0xA0	; 160
    1d0e:	36 e8       	ldi	r19, 0x86	; 134
    1d10:	41 e0       	ldi	r20, 0x01	; 1
    1d12:	50 e0       	ldi	r21, 0x00	; 0
    1d14:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
    1d18:	28 e9       	ldi	r18, 0x98	; 152
    1d1a:	37 eb       	ldi	r19, 0xB7	; 183
    1d1c:	40 e0       	ldi	r20, 0x00	; 0
    1d1e:	50 e0       	ldi	r21, 0x00	; 0
    1d20:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
     DisplayValue(ir_nano,-9,'A',2);	// output two digits of current with nA units
    1d24:	b9 01       	movw	r22, r18
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	47 ef       	ldi	r20, 0xF7	; 247
    1d2c:	21 e4       	ldi	r18, 0x41	; 65
    1d2e:	02 e0       	ldi	r16, 0x02	; 2
    1d30:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
     /* RR680MI has units of 0.1 Ohm, u_res has units of mV, ir_micro has units of uA */
     ir_micro = (unsigned long)(u_res * 10000UL) / RR680MI;
     DisplayValue(ir_micro,-6,'A',2);	// output two digits of current in uA units
  }
#endif
  ADC_DDR = TXD_MSK;			// switch off
    1d34:	88 e0       	ldi	r24, 0x08	; 8
    1d36:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;			// switch off
    1d38:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;				// switch off current
    1d3a:	14 b8       	out	0x04, r1	; 4

  return ;
}
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	0f 91       	pop	r16
    1d42:	08 95       	ret

00001d44 <main>:
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
  EMPTY_INTERRUPT(ADC_vect);
#endif

//begin of transistortester program
int main(void) {
    1d44:	0f 93       	push	r16
    1d46:	1f 93       	push	r17
  //switch on
  ON_DDR = (1<<ON_PIN);			// switch to output
    1d48:	80 e4       	ldi	r24, 0x40	; 64
    1d4a:	8a b9       	out	0x0a, r24	; 10
#ifdef PULLUP_DISABLE
  ON_PORT = (1<<ON_PIN); 		// switch power on 
    1d4c:	8b b9       	out	0x0b, r24	; 11
#else
  ON_PORT = (1<<ON_PIN)|(1<<RST_PIN); 	// switch power on , enable internal Pullup for Start-Pin
#endif
  uint8_t tmp;
  //ADC-Init
  ADCSRA = (1<<ADEN) | AUTO_CLOCK_DIV;	//prescaler=8 or 64 (if 8Mhz clock)
    1d4e:	86 e8       	ldi	r24, 0x86	; 134
    1d50:	80 93 7a 00 	sts	0x007A, r24
// #define WDRF_HOME MCU_STATUS_REG
 #define WDRF_HOME MCUCSR
#else
 #define WDRF_HOME MCUSR
#endif
  tmp = (WDRF_HOME & (1<<WDRF));	// save Watch Dog Flag
    1d54:	14 b7       	in	r17, 0x34	; 52
  WDRF_HOME &= ~(1<<WDRF);	 	//reset Watch Dog flag
    1d56:	84 b7       	in	r24, 0x34	; 52
    1d58:	87 7f       	andi	r24, 0xF7	; 247
    1d5a:	84 bf       	out	0x34, r24	; 52
  wdt_disable();			// disable Watch Dog
    1d5c:	88 e1       	ldi	r24, 0x18	; 24
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	f8 94       	cli
    1d62:	80 93 60 00 	sts	0x0060, r24
    1d66:	10 92 60 00 	sts	0x0060, r1
    1d6a:	0f be       	out	0x3f, r0	; 63
#ifndef INHIBIT_SLEEP_MODE
  // switch off unused Parts
  PRR = (1<<PRTWI) | (1<<PRTIM0) | (1<<PRSPI) | (1<<PRUSART0);
    1d6c:	86 ea       	ldi	r24, 0xA6	; 166
    1d6e:	80 93 64 00 	sts	0x0064, r24
  DIDR0 = (1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D);	
    1d72:	88 e3       	ldi	r24, 0x38	; 56
    1d74:	80 93 7e 00 	sts	0x007E, r24
  TCCR2A = (0<<WGM21) | (0<<WGM20);		// Counter 2 normal mode
    1d78:	10 92 b0 00 	sts	0x00B0, r1
 #if F_CPU == 4000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (0<<CS20);	//prescaler 256, 64us @ 2MHz
  #define T2_PERIOD 64
 #endif 
 #if F_CPU >= 8000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (1<<CS20);	//prescaler 1024, 128us @ 8MHz, 64us @ 16MHz
    1d7c:	87 e0       	ldi	r24, 0x07	; 7
    1d7e:	80 93 b1 00 	sts	0x00B1, r24
  #define T2_PERIOD (1024 / (F_CPU / 1000000UL));	/* set to 128 or 64 us */
 #endif 
  sei();				// enable interrupts
    1d82:	78 94       	sei
#endif
  lcd_init();				//initialize LCD
    1d84:	0e 94 03 01 	call	0x206	; 0x206 <lcd_init>
	
//  ADC_PORT = TXD_VAL;
//  ADC_DDR = TXD_MSK;
  if(tmp) { 
    1d88:	13 ff       	sbrs	r17, 3
    1d8a:	0a c0       	rjmp	.+20     	; 0x1da0 <main+0x5c>
     // check if  Watchdog-Event 
     // this happens, if the Watchdog is not reset for 2s
     // can happen, if any loop in the Program doen't finish.
     lcd_line1();
    1d8c:	80 e8       	ldi	r24, 0x80	; 128
    1d8e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     lcd_fix_string(TestTimedOut);	//Output Timeout
    1d92:	84 eb       	ldi	r24, 0xB4	; 180
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     wait_about3s();				//wait for 3 s
    1d9a:	88 e5       	ldi	r24, 0x58	; 88
    1d9c:	92 e0       	ldi	r25, 0x02	; 2
    1d9e:	92 c0       	rjmp	.+292    	; 0x1ec4 <main+0x180>
     ON_PORT = 0;			//shut off!
//     ON_DDR = (1<<ON_PIN);		//switch to GND
     return 0;
  }
  LCDLoadCustomChar(LCD_CHAR_DIODE1);	//Custom-Character Diode symbol
    1da0:	88 e4       	ldi	r24, 0x48	; 72
    1da2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_customchar(DiodeIcon1);	//load Character  >|
    1da6:	8d e6       	ldi	r24, 0x6D	; 109
    1da8:	91 e0       	ldi	r25, 0x01	; 1
    1daa:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_DIODE2);	//Custom-Character 
    1dae:	80 e5       	ldi	r24, 0x50	; 80
    1db0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_customchar(DiodeIcon2);	//load Character  |<
    1db4:	85 e7       	ldi	r24, 0x75	; 117
    1db6:	91 e0       	ldi	r25, 0x01	; 1
    1db8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_CAP);	//Custom-Character  Capacitor symbol
    1dbc:	88 e5       	ldi	r24, 0x58	; 88
    1dbe:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_customchar(CapIcon);		//load Character  ||
    1dc2:	8d e7       	ldi	r24, 0x7D	; 125
    1dc4:	91 e0       	ldi	r25, 0x01	; 1
    1dc6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS1);	//Custom-Character Resistor symbol
    1dca:	88 e7       	ldi	r24, 0x78	; 120
    1dcc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_customchar(ResIcon1);		//load Character  [
    1dd0:	85 e8       	ldi	r24, 0x85	; 133
    1dd2:	91 e0       	ldi	r25, 0x01	; 1
    1dd4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS2);	//Custom-Character 
    1dd8:	80 e7       	ldi	r24, 0x70	; 112
    1dda:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_customchar(ResIcon2);		//load Character  ]
    1dde:	8d e8       	ldi	r24, 0x8D	; 141
    1de0:	91 e0       	ldi	r25, 0x01	; 1
    1de2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
#endif
#ifdef PULLUP_DISABLE
 #ifdef __AVR_ATmega8__
  SFIOR = (1<<PUD);		// disable Pull-Up Resistors mega8
 #else
  MCUCR = (1<<PUD);		// disable Pull-Up Resistors mega168 family
    1de6:	80 e1       	ldi	r24, 0x10	; 16
    1de8:	85 bf       	out	0x35, r24	; 53
  }
#else
  #define display_time OFF_WAIT_TIME
#endif

  empty_count = 0;
    1dea:	10 92 4a 01 	sts	0x014A, r1
  mess_count = 0;
    1dee:	10 92 0b 01 	sts	0x010B, r1

//*****************************************************************
//Entry: if start key is pressed before shut down
start:
  PartFound = PART_NONE;	// no part found
    1df2:	10 92 07 01 	sts	0x0107, r1
  NumOfDiodes = 0;		// Number of diodes = 0
    1df6:	10 92 05 01 	sts	0x0105, r1
  PartReady = 0;
    1dfa:	10 92 04 01 	sts	0x0104, r1
  PartMode = 0;
    1dfe:	10 92 06 01 	sts	0x0106, r1
  WithReference = 0;		// no precision reference voltage
    1e02:	10 92 49 01 	sts	0x0149, r1
  lcd_clear();
    1e06:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  ADC_DDR = TXD_MSK;		//activate Software-UART 
    1e0a:	88 e0       	ldi	r24, 0x08	; 8
    1e0c:	87 b9       	out	0x07, r24	; 7
  ResistorsFound = 0;		// no resistors found
    1e0e:	10 92 5e 01 	sts	0x015E, r1
  cap.ca = 0;
    1e12:	10 92 72 01 	sts	0x0172, r1
  cap.cb = 0;
    1e16:	10 92 73 01 	sts	0x0173, r1
#ifdef WITH_UART
  uart_newline();		// start of new measurement
    1e1a:	0e 94 df 00 	call	0x1be	; 0x1be <uart_newline>
#endif
  ADCconfig.RefFlag = 0;
    1e1e:	10 92 3d 01 	sts	0x013D, r1
  Calibrate_UR();		// get Ref Voltages and Pin resistance
    1e22:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <Calibrate_UR>
  lcd_line1();	//1. row 
    1e26:	80 e8       	ldi	r24, 0x80	; 128
    1e28:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  
  ADCconfig.U_Bandgap = ADC_internal_reference;	// set internal reference voltage for ADC
    1e2c:	85 e9       	ldi	r24, 0x95	; 149
    1e2e:	91 e0       	ldi	r25, 0x01	; 1
    1e30:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__eerd_byte_m168>
    1e34:	99 27       	eor	r25, r25
    1e36:	87 fd       	sbrc	r24, 7
    1e38:	90 95       	com	r25
    1e3a:	20 91 44 01 	lds	r18, 0x0144
    1e3e:	30 91 45 01 	lds	r19, 0x0145
    1e42:	82 0f       	add	r24, r18
    1e44:	93 1f       	adc	r25, r19
    1e46:	90 93 3f 01 	sts	0x013F, r25
    1e4a:	80 93 3e 01 	sts	0x013E, r24

#ifdef BAT_CHECK
  // Battery check is selected
  ReadADC(TPBAT);	//Dummy-Readout
    1e4e:	85 e0       	ldi	r24, 0x05	; 5
    1e50:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
  trans.uBE[0] = W5msReadADC(TPBAT); 	//with 5V reference
    1e54:	85 e0       	ldi	r24, 0x05	; 5
    1e56:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
    1e5a:	90 93 58 01 	sts	0x0158, r25
    1e5e:	80 93 57 01 	sts	0x0157, r24
  lcd_fix_string(Bat_str);		//output: "Bat. "
    1e62:	85 ee       	ldi	r24, 0xE5	; 229
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
//  DisplayValue(cap.cval,-2,'V',2);		// Display 2 Digits of this 10mV units
#if BAT_NUMERATOR <= (65535/U_VCC)
  cap.cval = (trans.uBE[0]*BAT_NUMERATOR)/BAT_DENOMINATOR + BAT_OUT;
#else
 #if (BAT_NUMERATOR == 133) && (BAT_DENOMINATOR == 33)
  cap.cval = (trans.uBE[0]*4)+BAT_OUT;		// usually output only 2 digits
    1e6a:	60 91 57 01 	lds	r22, 0x0157
    1e6e:	70 91 58 01 	lds	r23, 0x0158
    1e72:	66 0f       	add	r22, r22
    1e74:	77 1f       	adc	r23, r23
    1e76:	66 0f       	add	r22, r22
    1e78:	77 1f       	adc	r23, r23
    1e7a:	6a 56       	subi	r22, 0x6A	; 106
    1e7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	60 93 62 01 	sts	0x0162, r22
    1e86:	70 93 63 01 	sts	0x0163, r23
    1e8a:	80 93 64 01 	sts	0x0164, r24
    1e8e:	90 93 65 01 	sts	0x0165, r25
 #else
  cap.cval = ((unsigned long)trans.uBE[0]*BAT_NUMERATOR)/BAT_DENOMINATOR + BAT_OUT;
 #endif
#endif
  DisplayValue(cap.cval,-3,'V',2);		// Display 2 Digits of this 10mV units
    1e92:	4d ef       	ldi	r20, 0xFD	; 253
    1e94:	26 e5       	ldi	r18, 0x56	; 86
    1e96:	02 e0       	ldi	r16, 0x02	; 2
    1e98:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
  lcd_space();
    1e9c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>
  // less than 1.3 V only .1V difference to Warn-Level
  #define WARN_LEVEL (((unsigned long)(BAT_POOR+100)*(unsigned long)BAT_DENOMINATOR)/BAT_NUMERATOR)
 #endif
 #define POOR_LEVEL (((unsigned long)(BAT_POOR)*(unsigned long)BAT_DENOMINATOR)/BAT_NUMERATOR)
  // check the battery voltage
  if (trans.uBE[0] <  WARN_LEVEL) {
    1ea0:	80 91 57 01 	lds	r24, 0x0157
    1ea4:	90 91 58 01 	lds	r25, 0x0158
    1ea8:	26 e0       	ldi	r18, 0x06	; 6
    1eaa:	8a 3f       	cpi	r24, 0xFA	; 250
    1eac:	92 07       	cpc	r25, r18
    1eae:	a8 f4       	brcc	.+42     	; 0x1eda <main+0x196>
     //Vcc < 7,3V; show Warning 
     if(trans.uBE[0] < POOR_LEVEL) {	
    1eb0:	26 e0       	ldi	r18, 0x06	; 6
    1eb2:	83 33       	cpi	r24, 0x33	; 51
    1eb4:	92 07       	cpc	r25, r18
    1eb6:	70 f4       	brcc	.+28     	; 0x1ed4 <main+0x190>
        //Vcc <6,3V; no proper operation is possible
        lcd_fix_string(BatEmpty);	//Battery empty!
    1eb8:	8a e6       	ldi	r24, 0x6A	; 106
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        wait_about2s();
    1ec0:	80 e9       	ldi	r24, 0x90	; 144
    1ec2:	91 e0       	ldi	r25, 0x01	; 1
    1ec4:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>
        PORTD = 0;			//switch power off
    1ec8:	1b b8       	out	0x0b, r1	; 11
  }
#else
  goto start;	// POWER_OFF not selected, repeat measurement
#endif
  return 0;
}   // end main
    1eca:	80 e0       	ldi	r24, 0x00	; 0
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	1f 91       	pop	r17
    1ed0:	0f 91       	pop	r16
    1ed2:	08 95       	ret
        lcd_fix_string(BatEmpty);	//Battery empty!
        wait_about2s();
        PORTD = 0;			//switch power off
        return 0;
     }
     lcd_fix_string(BatWeak);		//Battery weak
    1ed4:	85 e6       	ldi	r24, 0x65	; 101
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <main+0x19a>
  } else { // Battery-voltage OK
     lcd_fix_string(OK_str); 		// "OK"
    1eda:	8b ee       	ldi	r24, 0xEB	; 235
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  }
#else
  lcd_fix2_string(VERSION_str);		// if no Battery check, Version .. in row 1
#endif
#ifdef WDT_enabled
  wdt_enable(WDTO_2S);		//Watchdog on
    1ee2:	2f e0       	ldi	r18, 0x0F	; 15
    1ee4:	88 e1       	ldi	r24, 0x18	; 24
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	f8 94       	cli
    1eec:	a8 95       	wdr
    1eee:	80 93 60 00 	sts	0x0060, r24
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	20 93 60 00 	sts	0x0060, r18
#endif

//  wait_about1s();			// add more time for reading batterie voltage
  // begin tests
#ifdef AUTO_RH
  RefVoltage();			//compute RHmultip = f(reference voltage)
    1ef8:	0e 94 48 02 	call	0x490	; 0x490 <RefVoltage>
#endif
#if FLASHEND > 0x1fff
  if (WithReference) {
    1efc:	80 91 49 01 	lds	r24, 0x0149
    1f00:	88 23       	and	r24, r24
    1f02:	f1 f0       	breq	.+60     	; 0x1f40 <main+0x1fc>
     /* 2.5V precision reference is checked OK */
     if ((mess_count == 0) && (empty_count == 0)) {
    1f04:	80 91 0b 01 	lds	r24, 0x010B
    1f08:	88 23       	and	r24, r24
    1f0a:	d1 f4       	brne	.+52     	; 0x1f40 <main+0x1fc>
    1f0c:	80 91 4a 01 	lds	r24, 0x014A
    1f10:	88 23       	and	r24, r24
    1f12:	b1 f4       	brne	.+44     	; 0x1f40 <main+0x1fc>
         /* display VCC= only first time */
         lcd_line2();
    1f14:	80 ec       	ldi	r24, 0xC0	; 192
    1f16:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
         lcd_fix_string(VCC_str);		// VCC=
    1f1a:	87 e2       	ldi	r24, 0x27	; 39
    1f1c:	91 e0       	ldi	r25, 0x01	; 1
    1f1e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
         DisplayValue(ADCconfig.U_AVCC,-3,'V',3);	// Display 3 Digits of this mV units
    1f22:	60 91 40 01 	lds	r22, 0x0140
    1f26:	70 91 41 01 	lds	r23, 0x0141
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	4d ef       	ldi	r20, 0xFD	; 253
    1f30:	26 e5       	ldi	r18, 0x56	; 86
    1f32:	03 e0       	ldi	r16, 0x03	; 3
    1f34:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
//         lcd_space();
//         DisplayValue(RRpinMI,-1,LCD_CHAR_OMEGA,4);
         wait_about1s();
    1f38:	88 ec       	ldi	r24, 0xC8	; 200
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>
     wait_about300ms();
  }
#endif

#ifndef DebugOut
  lcd_line2();			//LCD position row 2, column 1
    1f40:	80 ec       	ldi	r24, 0xC0	; 192
    1f42:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
#endif
  EntladePins();		// discharge all capacitors!
    1f46:	0e 94 ad 01 	call	0x35a	; 0x35a <EntladePins>
  if(PartFound == PART_CELL) {
    1f4a:	80 91 07 01 	lds	r24, 0x0107
    1f4e:	88 30       	cpi	r24, 0x08	; 8
    1f50:	39 f4       	brne	.+14     	; 0x1f60 <main+0x21c>
    lcd_clear();
    1f52:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
    lcd_fix_string(Cell_str);	// display "Cell!"
    1f56:	81 e2       	ldi	r24, 0x21	; 33
    1f58:	91 e0       	ldi	r25, 0x01	; 1
    1f5a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    goto end2;
    1f5e:	90 c3       	rjmp	.+1824   	; 0x2680 <main+0x93c>
  }

#ifdef CHECK_CALL
  AutoCheck();			//check, if selftest should be done
    1f60:	0e 94 a9 0b 	call	0x1752	; 0x1752 <AutoCheck>
#endif
  lcd_line2();			//LCD position row2, column 1
    1f64:	80 ec       	ldi	r24, 0xC0	; 192
    1f66:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_string(TestRunning);		//String: testing...
    1f6a:	8a e5       	ldi	r24, 0x5A	; 90
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     
  // check all 6 combinations for the 3 pins 
//         High  Low  Tri
  CheckPins(TP1, TP2, TP3);
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	61 e0       	ldi	r22, 0x01	; 1
    1f76:	42 e0       	ldi	r20, 0x02	; 2
    1f78:	0e 94 2e 04 	call	0x85c	; 0x85c <CheckPins>
  CheckPins(TP2, TP1, TP3);
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	60 e0       	ldi	r22, 0x00	; 0
    1f80:	42 e0       	ldi	r20, 0x02	; 2
    1f82:	0e 94 2e 04 	call	0x85c	; 0x85c <CheckPins>

  CheckPins(TP1, TP3, TP2);
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	62 e0       	ldi	r22, 0x02	; 2
    1f8a:	41 e0       	ldi	r20, 0x01	; 1
    1f8c:	0e 94 2e 04 	call	0x85c	; 0x85c <CheckPins>
  CheckPins(TP3, TP1, TP2);
    1f90:	82 e0       	ldi	r24, 0x02	; 2
    1f92:	60 e0       	ldi	r22, 0x00	; 0
    1f94:	41 e0       	ldi	r20, 0x01	; 1
    1f96:	0e 94 2e 04 	call	0x85c	; 0x85c <CheckPins>

  CheckPins(TP2, TP3, TP1);
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	62 e0       	ldi	r22, 0x02	; 2
    1f9e:	40 e0       	ldi	r20, 0x00	; 0
    1fa0:	0e 94 2e 04 	call	0x85c	; 0x85c <CheckPins>
  CheckPins(TP3, TP2, TP1);
    1fa4:	82 e0       	ldi	r24, 0x02	; 2
    1fa6:	61 e0       	ldi	r22, 0x01	; 1
    1fa8:	40 e0       	ldi	r20, 0x00	; 0
    1faa:	0e 94 2e 04 	call	0x85c	; 0x85c <CheckPins>
  
  //separate check if is is a capacitor
  if(((PartFound == PART_NONE) || (PartFound == PART_RESISTOR) || (PartFound == PART_DIODE)) ) {
    1fae:	80 91 07 01 	lds	r24, 0x0107
    1fb2:	88 23       	and	r24, r24
    1fb4:	21 f0       	breq	.+8      	; 0x1fbe <main+0x27a>
    1fb6:	86 30       	cpi	r24, 0x06	; 6
    1fb8:	11 f0       	breq	.+4      	; 0x1fbe <main+0x27a>
    1fba:	81 30       	cpi	r24, 0x01	; 1
    1fbc:	d9 f4       	brne	.+54     	; 0x1ff4 <main+0x2b0>
     EntladePins();		// discharge capacities
    1fbe:	0e 94 ad 01 	call	0x35a	; 0x35a <EntladePins>
     //measurement of capacities in all 3 combinations
     cap.cval_max = 0;		// set max to zero
    1fc2:	10 92 66 01 	sts	0x0166, r1
    1fc6:	10 92 67 01 	sts	0x0167, r1
    1fca:	10 92 68 01 	sts	0x0168, r1
    1fce:	10 92 69 01 	sts	0x0169, r1
     cap.cpre_max = -12;	// set max to pF unit
    1fd2:	84 ef       	ldi	r24, 0xF4	; 244
    1fd4:	80 93 75 01 	sts	0x0175, r24
     ReadCapacity(TP3, TP1);
    1fd8:	82 e0       	ldi	r24, 0x02	; 2
    1fda:	60 e0       	ldi	r22, 0x00	; 0
    1fdc:	0e 94 43 14 	call	0x2886	; 0x2886 <ReadCapacity>
     ReadCapacity(TP3, TP2);
    1fe0:	82 e0       	ldi	r24, 0x02	; 2
    1fe2:	61 e0       	ldi	r22, 0x01	; 1
    1fe4:	0e 94 43 14 	call	0x2886	; 0x2886 <ReadCapacity>
     ReadCapacity(TP2, TP1);
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	60 e0       	ldi	r22, 0x00	; 0
    1fec:	0e 94 43 14 	call	0x2886	; 0x2886 <ReadCapacity>

#if FLASHEND > 0x1fff
     ReadInductance();			// measure inductance
    1ff0:	0e 94 7e 17 	call	0x2efc	; 0x2efc <ReadInductance>
  lcd_line2();
  lcd_line1();
  lcd_clear_line();
  lcd_line1();
#else
  lcd_clear();				// clear total display
    1ff4:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
#endif

  if(PartFound == PART_DIODE) {
    1ff8:	10 91 07 01 	lds	r17, 0x0107
    1ffc:	11 30       	cpi	r17, 0x01	; 1
    1ffe:	09 f0       	breq	.+2      	; 0x2002 <main+0x2be>
    2000:	de c0       	rjmp	.+444    	; 0x21be <main+0x47a>
     if(NumOfDiodes == 1) {		//single Diode
    2002:	80 91 05 01 	lds	r24, 0x0105
    2006:	81 30       	cpi	r24, 0x01	; 1
    2008:	d1 f5       	brne	.+116    	; 0x207e <main+0x33a>
           lcd_fix_string(KatAn);	//"-|<-"
           lcd_testpin(diodes[0].Anode);
        }
 #else
        // the higher test pin number is right side
        if (diodes[0].Anode < diodes[0].Cathode) {
    200a:	90 91 78 01 	lds	r25, 0x0178
    200e:	80 91 79 01 	lds	r24, 0x0179
    2012:	98 17       	cp	r25, r24
    2014:	50 f4       	brcc	.+20     	; 0x202a <main+0x2e6>
           lcd_testpin(diodes[0].Anode);
    2016:	89 2f       	mov	r24, r25
    2018:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    201c:	83 e4       	ldi	r24, 0x43	; 67
    201e:	91 e0       	ldi	r25, 0x01	; 1
    2020:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[0].Cathode);
    2024:	80 91 79 01 	lds	r24, 0x0179
    2028:	08 c0       	rjmp	.+16     	; 0x203a <main+0x2f6>
        } else {
           lcd_testpin(diodes[0].Cathode);
    202a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    202e:	87 e4       	ldi	r24, 0x47	; 71
    2030:	91 e0       	ldi	r25, 0x01	; 1
    2032:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    2036:	80 91 78 01 	lds	r24, 0x0178
    203a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
        lcd_testpin(diodes[0].Anode);
        lcd_fix_string(AnKat);		//"->|-"
        lcd_testpin(diodes[0].Cathode);
#endif
#if FLASHEND > 0x1fff
	GetIr(diodes[0].Cathode,diodes[0].Anode);
    203e:	80 91 79 01 	lds	r24, 0x0179
    2042:	60 91 78 01 	lds	r22, 0x0178
    2046:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <GetIr>
#endif
        UfAusgabe(0x70);
    204a:	80 e7       	ldi	r24, 0x70	; 112
    204c:	0e 94 9c 03 	call	0x738	; 0x738 <UfAusgabe>
        /* load current of capacity is (5V-1.1V)/(470000 Ohm) = 8298nA */
        lcd_fix_string(GateCap_str);	//"C="
    2050:	88 ef       	ldi	r24, 0xF8	; 248
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        ReadCapacity(diodes[0].Cathode,diodes[0].Anode);	// Capacity opposite flow direction
    2058:	80 91 79 01 	lds	r24, 0x0179
    205c:	60 91 78 01 	lds	r22, 0x0178
    2060:	0e 94 43 14 	call	0x2886	; 0x2886 <ReadCapacity>
        DisplayValue(cap.cval,cap.cpre,'F',3);
    2064:	60 91 62 01 	lds	r22, 0x0162
    2068:	70 91 63 01 	lds	r23, 0x0163
    206c:	80 91 64 01 	lds	r24, 0x0164
    2070:	90 91 65 01 	lds	r25, 0x0165
    2074:	40 91 74 01 	lds	r20, 0x0174
    2078:	26 e4       	ldi	r18, 0x46	; 70
    207a:	03 e0       	ldi	r16, 0x03	; 3
    207c:	1f c1       	rjmp	.+574    	; 0x22bc <main+0x578>
        goto end;
     } else if(NumOfDiodes == 2) { // double diode
    207e:	82 30       	cpi	r24, 0x02	; 2
    2080:	09 f0       	breq	.+2      	; 0x2084 <main+0x340>
    2082:	4d c0       	rjmp	.+154    	; 0x211e <main+0x3da>
        lcd_data('2');
    2084:	82 e3       	ldi	r24, 0x32	; 50
    2086:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
        lcd_fix_string(Dioden);		//"diodes "
    208a:	8b e4       	ldi	r24, 0x4B	; 75
    208c:	91 e0       	ldi	r25, 0x01	; 1
    208e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        if(diodes[0].Anode == diodes[1].Anode) { //Common Anode
    2092:	80 91 78 01 	lds	r24, 0x0178
    2096:	20 91 7c 01 	lds	r18, 0x017C
    209a:	82 17       	cp	r24, r18
    209c:	99 f4       	brne	.+38     	; 0x20c4 <main+0x380>
           lcd_testpin(diodes[0].Cathode);
    209e:	80 91 79 01 	lds	r24, 0x0179
    20a2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    20a6:	87 e4       	ldi	r24, 0x47	; 71
    20a8:	91 e0       	ldi	r25, 0x01	; 1
    20aa:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    20ae:	80 91 78 01 	lds	r24, 0x0178
    20b2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    20b6:	83 e4       	ldi	r24, 0x43	; 67
    20b8:	91 e0       	ldi	r25, 0x01	; 1
    20ba:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[1].Cathode);
    20be:	80 91 7d 01 	lds	r24, 0x017D
    20c2:	16 c0       	rjmp	.+44     	; 0x20f0 <main+0x3ac>
           UfAusgabe(0x01);
           goto end;
        } else if(diodes[0].Cathode == diodes[1].Cathode) { //Common Cathode
    20c4:	30 91 79 01 	lds	r19, 0x0179
    20c8:	90 91 7d 01 	lds	r25, 0x017D
    20cc:	39 17       	cp	r19, r25
    20ce:	b1 f4       	brne	.+44     	; 0x20fc <main+0x3b8>
           lcd_testpin(diodes[0].Anode);
    20d0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    20d4:	83 e4       	ldi	r24, 0x43	; 67
    20d6:	91 e0       	ldi	r25, 0x01	; 1
    20d8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
	   lcd_testpin(diodes[0].Cathode);
    20dc:	80 91 79 01 	lds	r24, 0x0179
    20e0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    20e4:	87 e4       	ldi	r24, 0x47	; 71
    20e6:	91 e0       	ldi	r25, 0x01	; 1
    20e8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[1].Anode);
    20ec:	80 91 7c 01 	lds	r24, 0x017C
    20f0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           UfAusgabe(0x01);
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	0e 94 9c 03 	call	0x738	; 0x738 <UfAusgabe>
           goto end;
    20fa:	bb c2       	rjmp	.+1398   	; 0x2672 <main+0x92e>
          }
//        else if ((diodes[0].Cathode == diodes[1].Anode) && (diodes[1].Cathode == diodes[0].Anode)) {
        else if (diodes[0].Cathode == diodes[1].Anode) {
    20fc:	32 17       	cp	r19, r18
    20fe:	29 f4       	brne	.+10     	; 0x210a <main+0x3c6>
           // normaly two serial diodes are detected as three diodes, but if the threshold is high
           // for both diodes, the third diode is not detected.
           // can also be Antiparallel
           trans.b = 0;
    2100:	10 92 5b 01 	sts	0x015B, r1
           trans.c = 1;
    2104:	10 93 5c 01 	sts	0x015C, r17
    2108:	07 c0       	rjmp	.+14     	; 0x2118 <main+0x3d4>
           SerienDiodenAusgabe();
           goto end;
        }
        else if (diodes[1].Cathode == diodes[0].Anode) {
    210a:	98 17       	cp	r25, r24
    210c:	09 f0       	breq	.+2      	; 0x2110 <main+0x3cc>
    210e:	7f c2       	rjmp	.+1278   	; 0x260e <main+0x8ca>
           trans.b = 1;
    2110:	10 93 5b 01 	sts	0x015B, r17
           trans.c = 0;
    2114:	10 92 5c 01 	sts	0x015C, r1
           SerienDiodenAusgabe();
    2118:	0e 94 b0 03 	call	0x760	; 0x760 <SerienDiodenAusgabe>
           goto end;
    211c:	aa c2       	rjmp	.+1364   	; 0x2672 <main+0x92e>
        }
     } else if(NumOfDiodes == 3) {
    211e:	83 30       	cpi	r24, 0x03	; 3
    2120:	09 f0       	breq	.+2      	; 0x2124 <main+0x3e0>
    2122:	75 c2       	rjmp	.+1258   	; 0x260e <main+0x8ca>
        //Serial of 2 Diodes; was detected as 3 Diodes 
        trans.b = 3;
    2124:	80 93 5b 01 	sts	0x015B, r24
        trans.c = 3;
    2128:	80 93 5c 01 	sts	0x015C, r24
        /* Check for any constallation of 2 serial diodes:
          Only once the pin No of anyone Cathode is identical of another anode.
          two diodes in series is additionally detected as third big diode.
        */
        if(diodes[0].Cathode == diodes[1].Anode)
    212c:	80 91 79 01 	lds	r24, 0x0179
    2130:	90 91 7c 01 	lds	r25, 0x017C
    2134:	89 17       	cp	r24, r25
    2136:	21 f4       	brne	.+8      	; 0x2140 <main+0x3fc>
          {
           trans.b = 0;
    2138:	10 92 5b 01 	sts	0x015B, r1
           trans.c = 1;
    213c:	10 93 5c 01 	sts	0x015C, r17
          }
        if(diodes[0].Anode == diodes[1].Cathode)
    2140:	40 91 78 01 	lds	r20, 0x0178
    2144:	30 91 7d 01 	lds	r19, 0x017D
    2148:	43 17       	cp	r20, r19
    214a:	29 f4       	brne	.+10     	; 0x2156 <main+0x412>
          {
           trans.b = 1;
    214c:	21 e0       	ldi	r18, 0x01	; 1
    214e:	20 93 5b 01 	sts	0x015B, r18
           trans.c = 0;
    2152:	10 92 5c 01 	sts	0x015C, r1
          }
        if(diodes[0].Cathode == diodes[2].Anode)
    2156:	20 91 80 01 	lds	r18, 0x0180
    215a:	82 17       	cp	r24, r18
    215c:	29 f4       	brne	.+10     	; 0x2168 <main+0x424>
          {
           trans.b = 0;
    215e:	10 92 5b 01 	sts	0x015B, r1
           trans.c = 2;
    2162:	82 e0       	ldi	r24, 0x02	; 2
    2164:	80 93 5c 01 	sts	0x015C, r24
          }
        if(diodes[0].Anode == diodes[2].Cathode)
    2168:	80 91 81 01 	lds	r24, 0x0181
    216c:	48 17       	cp	r20, r24
    216e:	29 f4       	brne	.+10     	; 0x217a <main+0x436>
          {
           trans.b = 2;
    2170:	42 e0       	ldi	r20, 0x02	; 2
    2172:	40 93 5b 01 	sts	0x015B, r20
           trans.c = 0;
    2176:	10 92 5c 01 	sts	0x015C, r1
          }
        if(diodes[1].Cathode == diodes[2].Anode)
    217a:	32 17       	cp	r19, r18
    217c:	31 f4       	brne	.+12     	; 0x218a <main+0x446>
          {
           trans.b = 1;
    217e:	21 e0       	ldi	r18, 0x01	; 1
    2180:	20 93 5b 01 	sts	0x015B, r18
           trans.c = 2;
    2184:	22 e0       	ldi	r18, 0x02	; 2
    2186:	20 93 5c 01 	sts	0x015C, r18
          }
        if(diodes[1].Anode == diodes[2].Cathode)
    218a:	98 17       	cp	r25, r24
    218c:	31 f4       	brne	.+12     	; 0x219a <main+0x456>
          {
           trans.b = 2;
    218e:	82 e0       	ldi	r24, 0x02	; 2
    2190:	80 93 5b 01 	sts	0x015B, r24
           trans.c = 1;
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	80 93 5c 01 	sts	0x015C, r24
        lcd_testpin(diodes[2].Cathode);
        lcd_space();
        lcd_string(utoa(diodes[2].Voltage, outval, 10));
        lcd_line1();
#endif
        if((trans.b<3) && (trans.c<3)) {
    219a:	80 91 5b 01 	lds	r24, 0x015B
    219e:	83 30       	cpi	r24, 0x03	; 3
    21a0:	08 f0       	brcs	.+2      	; 0x21a4 <main+0x460>
    21a2:	35 c2       	rjmp	.+1130   	; 0x260e <main+0x8ca>
    21a4:	80 91 5c 01 	lds	r24, 0x015C
    21a8:	83 30       	cpi	r24, 0x03	; 3
    21aa:	08 f0       	brcs	.+2      	; 0x21ae <main+0x46a>
    21ac:	30 c2       	rjmp	.+1120   	; 0x260e <main+0x8ca>
           lcd_data('3');
    21ae:	83 e3       	ldi	r24, 0x33	; 51
    21b0:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
           lcd_fix_string(Dioden);	//"Diodes "
    21b4:	8b e4       	ldi	r24, 0x4B	; 75
    21b6:	91 e0       	ldi	r25, 0x01	; 1
    21b8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    21bc:	ad cf       	rjmp	.-166    	; 0x2118 <main+0x3d4>
//           UfAusgabe( (trans.b<<4)|trans.c);
           goto end;
        }
     }
     // end (PartFound == PART_DIODE)
  } else if (PartFound == PART_TRANSISTOR) {
    21be:	12 30       	cpi	r17, 0x02	; 2
    21c0:	09 f0       	breq	.+2      	; 0x21c4 <main+0x480>
    21c2:	7f c0       	rjmp	.+254    	; 0x22c2 <main+0x57e>
    if(PartReady != 0) {
    21c4:	80 91 04 01 	lds	r24, 0x0104
    21c8:	88 23       	and	r24, r24
    21ca:	71 f1       	breq	.+92     	; 0x2228 <main+0x4e4>
       if((trans.hfe[0]>trans.hfe[1])) {
    21cc:	80 91 53 01 	lds	r24, 0x0153
    21d0:	90 91 54 01 	lds	r25, 0x0154
    21d4:	a0 91 55 01 	lds	r26, 0x0155
    21d8:	b0 91 56 01 	lds	r27, 0x0156
    21dc:	20 91 4f 01 	lds	r18, 0x014F
    21e0:	30 91 50 01 	lds	r19, 0x0150
    21e4:	40 91 51 01 	lds	r20, 0x0151
    21e8:	50 91 52 01 	lds	r21, 0x0152
    21ec:	82 17       	cp	r24, r18
    21ee:	93 07       	cpc	r25, r19
    21f0:	a4 07       	cpc	r26, r20
    21f2:	b5 07       	cpc	r27, r21
    21f4:	48 f4       	brcc	.+18     	; 0x2208 <main+0x4c4>
          //if the amplification factor was higher at first testr: swap C and E !
          tmp = trans.c;
    21f6:	80 91 5c 01 	lds	r24, 0x015C
          trans.c = trans.e;
    21fa:	90 91 5d 01 	lds	r25, 0x015D
    21fe:	90 93 5c 01 	sts	0x015C, r25
          trans.e = tmp;
    2202:	80 93 5d 01 	sts	0x015D, r24
    2206:	10 c0       	rjmp	.+32     	; 0x2228 <main+0x4e4>
       } else {
          trans.hfe[0] = trans.hfe[1];
    2208:	80 93 4f 01 	sts	0x014F, r24
    220c:	90 93 50 01 	sts	0x0150, r25
    2210:	a0 93 51 01 	sts	0x0151, r26
    2214:	b0 93 52 01 	sts	0x0152, r27
          trans.uBE[0] = trans.uBE[1];
    2218:	80 91 59 01 	lds	r24, 0x0159
    221c:	90 91 5a 01 	lds	r25, 0x015A
    2220:	90 93 58 01 	sts	0x0158, r25
    2224:	80 93 57 01 	sts	0x0157, r24
       }
    }

    if(PartMode == PART_MODE_NPN) {
    2228:	80 91 06 01 	lds	r24, 0x0106
    222c:	81 30       	cpi	r24, 0x01	; 1
    222e:	19 f4       	brne	.+6      	; 0x2236 <main+0x4f2>
       lcd_fix_string(NPN_str);		//"NPN "
    2230:	8e ef       	ldi	r24, 0xFE	; 254
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	02 c0       	rjmp	.+4      	; 0x223a <main+0x4f6>
    } else {
       lcd_fix_string(PNP_str);		//"PNP "
    2236:	83 e0       	ldi	r24, 0x03	; 3
    2238:	91 e0       	ldi	r25, 0x01	; 1
    223a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    }
    if( NumOfDiodes > 2) {	//Transistor with protection diode
    223e:	80 91 05 01 	lds	r24, 0x0105
    2242:	83 30       	cpi	r24, 0x03	; 3
    2244:	a0 f0       	brcs	.+40     	; 0x226e <main+0x52a>
       // Layout with EBC= style
       if(PartMode == PART_MODE_NPN)
 #endif
#else
       // Layout with 123= style
       if (((PartMode == PART_MODE_NPN) && (trans.c > trans.e)) || ((PartMode != PART_MODE_NPN) && (trans.c < trans.e)))
    2246:	20 91 06 01 	lds	r18, 0x0106
    224a:	90 91 5c 01 	lds	r25, 0x015C
    224e:	80 91 5d 01 	lds	r24, 0x015D
    2252:	21 30       	cpi	r18, 0x01	; 1
    2254:	19 f4       	brne	.+6      	; 0x225c <main+0x518>
    2256:	89 17       	cp	r24, r25
    2258:	18 f0       	brcs	.+6      	; 0x2260 <main+0x51c>
    225a:	05 c0       	rjmp	.+10     	; 0x2266 <main+0x522>
    225c:	98 17       	cp	r25, r24
    225e:	18 f4       	brcc	.+6      	; 0x2266 <main+0x522>
#endif
       {
          lcd_fix_string(AnKat);	//"->|-"
    2260:	83 e4       	ldi	r24, 0x43	; 67
    2262:	91 e0       	ldi	r25, 0x01	; 1
    2264:	02 c0       	rjmp	.+4      	; 0x226a <main+0x526>
       } else {
          lcd_fix_string(KatAn);	//"-|<-"
    2266:	87 e4       	ldi	r24, 0x47	; 71
    2268:	91 e0       	ldi	r25, 0x01	; 1
    226a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       }
    }
    PinLayout('E','B','C'); 		//  EBC= or 123=...
    226e:	85 e4       	ldi	r24, 0x45	; 69
    2270:	62 e4       	ldi	r22, 0x42	; 66
    2272:	43 e4       	ldi	r20, 0x43	; 67
    2274:	0e 94 25 0b 	call	0x164a	; 0x164a <PinLayout>
    lcd_line2(); //2. row 
    2278:	80 ec       	ldi	r24, 0xC0	; 192
    227a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
    lcd_fix_string(hfe_str);		//"B="  (hFE)
    227e:	8b ef       	ldi	r24, 0xFB	; 251
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    DisplayValue(trans.hfe[0],0,0,3);
    2286:	60 91 4f 01 	lds	r22, 0x014F
    228a:	70 91 50 01 	lds	r23, 0x0150
    228e:	80 91 51 01 	lds	r24, 0x0151
    2292:	90 91 52 01 	lds	r25, 0x0152
    2296:	40 e0       	ldi	r20, 0x00	; 0
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	03 e0       	ldi	r16, 0x03	; 3
    229c:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
    lcd_space();
    22a0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>

    lcd_fix_string(Uf_str);		//"Uf="
    22a4:	8e e0       	ldi	r24, 0x0E	; 14
    22a6:	91 e0       	ldi	r25, 0x01	; 1
    22a8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    DisplayValue(trans.uBE[0],-3,'V',3);
    22ac:	60 91 57 01 	lds	r22, 0x0157
    22b0:	70 91 58 01 	lds	r23, 0x0158
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	4d ef       	ldi	r20, 0xFD	; 253
    22ba:	26 e5       	ldi	r18, 0x56	; 86
    22bc:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
    goto end;
    22c0:	d8 c1       	rjmp	.+944    	; 0x2672 <main+0x92e>
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    22c2:	13 30       	cpi	r17, 0x03	; 3
    22c4:	09 f0       	breq	.+2      	; 0x22c8 <main+0x584>
    22c6:	7f c0       	rjmp	.+254    	; 0x23c6 <main+0x682>
    if(PartMode&1) {
    22c8:	80 91 06 01 	lds	r24, 0x0106
    22cc:	80 ff       	sbrs	r24, 0
    22ce:	02 c0       	rjmp	.+4      	; 0x22d4 <main+0x590>
       lcd_data('P');			//P-channel
    22d0:	80 e5       	ldi	r24, 0x50	; 80
    22d2:	01 c0       	rjmp	.+2      	; 0x22d6 <main+0x592>
    } else {
       lcd_data('N');			//N-channel
    22d4:	8e e4       	ldi	r24, 0x4E	; 78
    22d6:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
    }
    lcd_data('-');
    22da:	8d e2       	ldi	r24, 0x2D	; 45
    22dc:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>

    tmp = PartMode/2;
    22e0:	80 91 06 01 	lds	r24, 0x0106
    22e4:	86 95       	lsr	r24
    if (tmp == (PART_MODE_N_D_MOS/2)) {
    22e6:	82 30       	cpi	r24, 0x02	; 2
    22e8:	11 f4       	brne	.+4      	; 0x22ee <main+0x5aa>
       lcd_data('D');			// N-D
    22ea:	84 e4       	ldi	r24, 0x44	; 68
    22ec:	03 c0       	rjmp	.+6      	; 0x22f4 <main+0x5b0>
    }
    if (tmp == (PART_MODE_N_E_MOS/2)) {
    22ee:	81 30       	cpi	r24, 0x01	; 1
    22f0:	21 f4       	brne	.+8      	; 0x22fa <main+0x5b6>
       lcd_data('E');			// N-E
    22f2:	85 e4       	ldi	r24, 0x45	; 69
    22f4:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
    22f8:	05 c0       	rjmp	.+10     	; 0x2304 <main+0x5c0>
    }
    if (tmp == (PART_MODE_N_JFET/2)) {
    22fa:	83 30       	cpi	r24, 0x03	; 3
    22fc:	19 f4       	brne	.+6      	; 0x2304 <main+0x5c0>
       lcd_fix_string(jfet_str);	//"JFET"
    22fe:	83 ef       	ldi	r24, 0xF3	; 243
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	02 c0       	rjmp	.+4      	; 0x2308 <main+0x5c4>
    } else {
       lcd_fix_string(mosfet_str);	//"-MOS "
    2304:	8e ee       	ldi	r24, 0xEE	; 238
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    }
    PinLayout('S','G','D'); 		//  SGD= or 123=...
    230c:	83 e5       	ldi	r24, 0x53	; 83
    230e:	67 e4       	ldi	r22, 0x47	; 71
    2310:	44 e4       	ldi	r20, 0x44	; 68
    2312:	0e 94 25 0b 	call	0x164a	; 0x164a <PinLayout>
    if((NumOfDiodes > 0) && (PartMode < PART_MODE_N_D_MOS)) {
    2316:	80 91 05 01 	lds	r24, 0x0105
    231a:	88 23       	and	r24, r24
    231c:	a1 f0       	breq	.+40     	; 0x2346 <main+0x602>
    231e:	20 91 06 01 	lds	r18, 0x0106
    2322:	24 30       	cpi	r18, 0x04	; 4
    2324:	80 f4       	brcc	.+32     	; 0x2346 <main+0x602>
    2326:	90 91 5c 01 	lds	r25, 0x015C
    232a:	80 91 5d 01 	lds	r24, 0x015D
       // Layout with SGD= style
       if (PartMode&1) /* N or P MOS */
 #endif
#else
       // layout with 123= style
       if (((PartMode&1) && (trans.c < trans.e)) || ((!(PartMode&1)) && (trans.c > trans.e)))
    232e:	20 ff       	sbrs	r18, 0
    2330:	03 c0       	rjmp	.+6      	; 0x2338 <main+0x5f4>
    2332:	98 17       	cp	r25, r24
    2334:	18 f0       	brcs	.+6      	; 0x233c <main+0x5f8>
    2336:	04 c0       	rjmp	.+8      	; 0x2340 <main+0x5fc>
    2338:	89 17       	cp	r24, r25
    233a:	10 f4       	brcc	.+4      	; 0x2340 <main+0x5fc>
#endif
       {
          lcd_data(LCD_CHAR_DIODE1);	//show Diode symbol >|
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	01 c0       	rjmp	.+2      	; 0x2342 <main+0x5fe>
       } else {
          lcd_data(LCD_CHAR_DIODE2);	//show Diode symbol |<
    2340:	82 e0       	ldi	r24, 0x02	; 2
    2342:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       }
    }
    lcd_line2();			//2. Row
    2346:	80 ec       	ldi	r24, 0xC0	; 192
    2348:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
    if(PartMode < PART_MODE_N_D_MOS) {	//enhancement-MOSFET
    234c:	80 91 06 01 	lds	r24, 0x0106
    2350:	84 30       	cpi	r24, 0x04	; 4
    2352:	d8 f4       	brcc	.+54     	; 0x238a <main+0x646>
	//Gate capacity
       lcd_fix_string(GateCap_str);		//"C="
    2354:	88 ef       	ldi	r24, 0xF8	; 248
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       ReadCapacity(trans.b,trans.e);	//measure capacity
    235c:	80 91 5b 01 	lds	r24, 0x015B
    2360:	60 91 5d 01 	lds	r22, 0x015D
    2364:	0e 94 43 14 	call	0x2886	; 0x2886 <ReadCapacity>
       DisplayValue(cap.cval,cap.cpre,'F',3);
    2368:	60 91 62 01 	lds	r22, 0x0162
    236c:	70 91 63 01 	lds	r23, 0x0163
    2370:	80 91 64 01 	lds	r24, 0x0164
    2374:	90 91 65 01 	lds	r25, 0x0165
    2378:	40 91 74 01 	lds	r20, 0x0174
    237c:	26 e4       	ldi	r18, 0x46	; 70
    237e:	03 e0       	ldi	r16, 0x03	; 3
    2380:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
       lcd_fix_string(vt_str);		// "Vt="
    2384:	82 e1       	ldi	r24, 0x12	; 18
    2386:	91 e0       	ldi	r25, 0x01	; 1
    2388:	13 c0       	rjmp	.+38     	; 0x23b0 <main+0x66c>
    } else {
       lcd_data('I');
    238a:	89 e4       	ldi	r24, 0x49	; 73
    238c:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       lcd_data('=');
    2390:	8d e3       	ldi	r24, 0x3D	; 61
    2392:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       DisplayValue(trans.uBE[1],-5,'A',2);
    2396:	60 91 59 01 	lds	r22, 0x0159
    239a:	70 91 5a 01 	lds	r23, 0x015A
    239e:	80 e0       	ldi	r24, 0x00	; 0
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	4b ef       	ldi	r20, 0xFB	; 251
    23a4:	21 e4       	ldi	r18, 0x41	; 65
    23a6:	02 e0       	ldi	r16, 0x02	; 2
    23a8:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
       lcd_fix_string(Vgs_str);		// " Vgs="
    23ac:	87 e1       	ldi	r24, 0x17	; 23
    23ae:	91 e0       	ldi	r25, 0x01	; 1
    23b0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    }
    //Gate-threshold voltage
    DisplayValue(gthvoltage,-3,'V',2);
    23b4:	60 91 5f 01 	lds	r22, 0x015F
    23b8:	70 91 60 01 	lds	r23, 0x0160
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	4d ef       	ldi	r20, 0xFD	; 253
    23c2:	26 e5       	ldi	r18, 0x56	; 86
    23c4:	22 c1       	rjmp	.+580    	; 0x260a <main+0x8c6>
    goto end;
    // end (PartFound == PART_FET)
  } else if (PartFound == PART_THYRISTOR) {
    23c6:	15 30       	cpi	r17, 0x05	; 5
    23c8:	19 f4       	brne	.+6      	; 0x23d0 <main+0x68c>
    lcd_fix_string(Thyristor);		//"Thyristor"
    23ca:	85 e8       	ldi	r24, 0x85	; 133
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	04 c0       	rjmp	.+8      	; 0x23d8 <main+0x694>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    23d0:	14 30       	cpi	r17, 0x04	; 4
    23d2:	69 f4       	brne	.+26     	; 0x23ee <main+0x6aa>
    lcd_fix_string(Triac);		//"Triac"
    23d4:	8f e7       	ldi	r24, 0x7F	; 127
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  mess_count = 0;
  goto end2;


gakAusgabe:
  lcd_line2(); //2. row 
    23dc:	80 ec       	ldi	r24, 0xC0	; 192
    23de:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  PinLayout(Cathode_char,'G','A'); 	// CGA= or 123=...
    23e2:	83 e4       	ldi	r24, 0x43	; 67
    23e4:	67 e4       	ldi	r22, 0x47	; 71
    23e6:	41 e4       	ldi	r20, 0x41	; 65
    23e8:	0e 94 25 0b 	call	0x164a	; 0x164a <PinLayout>
    23ec:	42 c1       	rjmp	.+644    	; 0x2672 <main+0x92e>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    lcd_fix_string(Triac);		//"Triac"
    goto gakAusgabe;
  }
  else if(PartFound == PART_RESISTOR) {
    23ee:	16 30       	cpi	r17, 0x06	; 6
    23f0:	09 f0       	breq	.+2      	; 0x23f4 <main+0x6b0>
    23f2:	b9 c0       	rjmp	.+370    	; 0x2566 <main+0x822>
    if (ResistorsFound == 1) { // single resistor
    23f4:	60 91 5e 01 	lds	r22, 0x015E
    23f8:	61 30       	cpi	r22, 0x01	; 1
    23fa:	69 f4       	brne	.+26     	; 0x2416 <main+0x6d2>
       lcd_testpin(resis[0].rb);  	//Pin-number 1
    23fc:	80 91 22 01 	lds	r24, 0x0122
    2400:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
       lcd_fix_string(Resistor_str);
    2404:	80 e5       	ldi	r24, 0x50	; 80
    2406:	91 e0       	ldi	r25, 0x01	; 1
    2408:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       lcd_testpin(resis[0].ra);		//Pin-number 2
    240c:	80 91 21 01 	lds	r24, 0x0121
    2410:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
    2414:	61 c0       	rjmp	.+194    	; 0x24d8 <main+0x794>
    } else { // R-Max suchen
       ii = 0;
    2416:	10 92 4b 01 	sts	0x014B, r1
       if (resis[1].rx > resis[0].rx)
    241a:	20 91 24 01 	lds	r18, 0x0124
    241e:	30 91 25 01 	lds	r19, 0x0125
    2422:	40 91 26 01 	lds	r20, 0x0126
    2426:	50 91 27 01 	lds	r21, 0x0127
    242a:	80 91 18 01 	lds	r24, 0x0118
    242e:	90 91 19 01 	lds	r25, 0x0119
    2432:	a0 91 1a 01 	lds	r26, 0x011A
    2436:	b0 91 1b 01 	lds	r27, 0x011B
    243a:	82 17       	cp	r24, r18
    243c:	93 07       	cpc	r25, r19
    243e:	a4 07       	cpc	r26, r20
    2440:	b5 07       	cpc	r27, r21
    2442:	18 f4       	brcc	.+6      	; 0x244a <main+0x706>
          ii = 1;
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	80 93 4b 01 	sts	0x014B, r24
       if (ResistorsFound == 2) {
    244a:	62 30       	cpi	r22, 0x02	; 2
    244c:	19 f4       	brne	.+6      	; 0x2454 <main+0x710>
          ii = 2;
    244e:	60 93 4b 01 	sts	0x014B, r22
    2452:	22 c0       	rjmp	.+68     	; 0x2498 <main+0x754>
       } else {
          if (resis[2].rx > resis[ii].rx) {
    2454:	80 91 4b 01 	lds	r24, 0x014B
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	fc 01       	movw	r30, r24
    245c:	ee 0f       	add	r30, r30
    245e:	ff 1f       	adc	r31, r31
    2460:	e8 0f       	add	r30, r24
    2462:	f9 1f       	adc	r31, r25
    2464:	ee 0f       	add	r30, r30
    2466:	ff 1f       	adc	r31, r31
    2468:	ee 0f       	add	r30, r30
    246a:	ff 1f       	adc	r31, r31
    246c:	e8 5e       	subi	r30, 0xE8	; 232
    246e:	fe 4f       	sbci	r31, 0xFE	; 254
    2470:	20 91 30 01 	lds	r18, 0x0130
    2474:	30 91 31 01 	lds	r19, 0x0131
    2478:	40 91 32 01 	lds	r20, 0x0132
    247c:	50 91 33 01 	lds	r21, 0x0133
    2480:	80 81       	ld	r24, Z
    2482:	91 81       	ldd	r25, Z+1	; 0x01
    2484:	a2 81       	ldd	r26, Z+2	; 0x02
    2486:	b3 81       	ldd	r27, Z+3	; 0x03
    2488:	82 17       	cp	r24, r18
    248a:	93 07       	cpc	r25, r19
    248c:	a4 07       	cpc	r26, r20
    248e:	b5 07       	cpc	r27, r21
    2490:	18 f4       	brcc	.+6      	; 0x2498 <main+0x754>
             ii = 2;
    2492:	82 e0       	ldi	r24, 0x02	; 2
    2494:	80 93 4b 01 	sts	0x014B, r24
       }
       char x = '1';
       char y = '3';
       char z = '2';
   
       if (ii == 1) {
    2498:	80 91 4b 01 	lds	r24, 0x014B
    249c:	81 30       	cpi	r24, 0x01	; 1
    249e:	29 f0       	breq	.+10     	; 0x24aa <main+0x766>
          // x = '1';
          y = '2';
          z = '3';
       }
       if (ii == 2) {
    24a0:	82 30       	cpi	r24, 0x02	; 2
    24a2:	39 f0       	breq	.+14     	; 0x24b2 <main+0x76e>
             ii = 2;
          }
       }
       char x = '1';
       char y = '3';
       char z = '2';
    24a4:	12 e3       	ldi	r17, 0x32	; 50
          if (resis[2].rx > resis[ii].rx) {
             ii = 2;
          }
       }
       char x = '1';
       char y = '3';
    24a6:	03 e3       	ldi	r16, 0x33	; 51
    24a8:	02 c0       	rjmp	.+4      	; 0x24ae <main+0x76a>
       char z = '2';
   
       if (ii == 1) {
          // x = '1';
          y = '2';
          z = '3';
    24aa:	13 e3       	ldi	r17, 0x33	; 51
       char y = '3';
       char z = '2';
   
       if (ii == 1) {
          // x = '1';
          y = '2';
    24ac:	02 e3       	ldi	r16, 0x32	; 50
       } else {
          if (resis[2].rx > resis[ii].rx) {
             ii = 2;
          }
       }
       char x = '1';
    24ae:	81 e3       	ldi	r24, 0x31	; 49
    24b0:	03 c0       	rjmp	.+6      	; 0x24b8 <main+0x774>
          z = '3';
       }
       if (ii == 2) {
          x = '2';
          y = '1';
          z = '3';
    24b2:	13 e3       	ldi	r17, 0x33	; 51
          y = '2';
          z = '3';
       }
       if (ii == 2) {
          x = '2';
          y = '1';
    24b4:	01 e3       	ldi	r16, 0x31	; 49
          // x = '1';
          y = '2';
          z = '3';
       }
       if (ii == 2) {
          x = '2';
    24b6:	82 e3       	ldi	r24, 0x32	; 50
          y = '1';
          z = '3';
       }
       lcd_data(x);
    24b8:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       lcd_fix_string(Resistor_str);    // -[=]-
    24bc:	80 e5       	ldi	r24, 0x50	; 80
    24be:	91 e0       	ldi	r25, 0x01	; 1
    24c0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       lcd_data(y);
    24c4:	80 2f       	mov	r24, r16
    24c6:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       lcd_fix_string(Resistor_str);    // -[=]-
    24ca:	80 e5       	ldi	r24, 0x50	; 80
    24cc:	91 e0       	ldi	r25, 0x01	; 1
    24ce:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       lcd_data(z);
    24d2:	81 2f       	mov	r24, r17
    24d4:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
    }
    lcd_line2(); //2. row 
    24d8:	80 ec       	ldi	r24, 0xC0	; 192
    24da:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
    if (ResistorsFound == 1) {
    24de:	80 91 5e 01 	lds	r24, 0x015E
    24e2:	81 30       	cpi	r24, 0x01	; 1
    24e4:	01 f5       	brne	.+64     	; 0x2526 <main+0x7e2>
       RvalOut(0);
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	0e 94 4d 03 	call	0x69a	; 0x69a <RvalOut>
#if FLASHEND > 0x1fff
       if (resis[0].lx != 0) {
    24ec:	80 91 1c 01 	lds	r24, 0x011C
    24f0:	90 91 1d 01 	lds	r25, 0x011D
    24f4:	a0 91 1e 01 	lds	r26, 0x011E
    24f8:	b0 91 1f 01 	lds	r27, 0x011F
    24fc:	00 97       	sbiw	r24, 0x00	; 0
    24fe:	a1 05       	cpc	r26, r1
    2500:	b1 05       	cpc	r27, r1
    2502:	09 f4       	brne	.+2      	; 0x2506 <main+0x7c2>
    2504:	b6 c0       	rjmp	.+364    	; 0x2672 <main+0x92e>
	  // resistor have also Inductance
          lcd_fix_string(Lis_str);	// "L="
    2506:	8a e3       	ldi	r24, 0x3A	; 58
    2508:	91 e0       	ldi	r25, 0x01	; 1
    250a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
          DisplayValue(resis[0].lx,resis[0].lpre,'H',3);	// output inductance
    250e:	60 91 1c 01 	lds	r22, 0x011C
    2512:	70 91 1d 01 	lds	r23, 0x011D
    2516:	80 91 1e 01 	lds	r24, 0x011E
    251a:	90 91 1f 01 	lds	r25, 0x011F
    251e:	40 91 20 01 	lds	r20, 0x0120
    2522:	28 e4       	ldi	r18, 0x48	; 72
    2524:	aa cd       	rjmp	.-1196   	; 0x207a <main+0x336>
       }
#endif
    } else {
       // output resistor values in right order
       if (ii == 0) {
    2526:	80 91 4b 01 	lds	r24, 0x014B
    252a:	88 23       	and	r24, r24
    252c:	31 f4       	brne	.+12     	; 0x253a <main+0x7f6>
          RvalOut(1);
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	0e 94 4d 03 	call	0x69a	; 0x69a <RvalOut>
          RvalOut(2);
    2534:	82 e0       	ldi	r24, 0x02	; 2
    2536:	0e 94 4d 03 	call	0x69a	; 0x69a <RvalOut>
       }
       if (ii == 1) {
    253a:	80 91 4b 01 	lds	r24, 0x014B
    253e:	81 30       	cpi	r24, 0x01	; 1
    2540:	31 f4       	brne	.+12     	; 0x254e <main+0x80a>
          RvalOut(0);
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	0e 94 4d 03 	call	0x69a	; 0x69a <RvalOut>
          RvalOut(2);
    2548:	82 e0       	ldi	r24, 0x02	; 2
    254a:	0e 94 4d 03 	call	0x69a	; 0x69a <RvalOut>
       }
       if (ii == 2) {
    254e:	80 91 4b 01 	lds	r24, 0x014B
    2552:	82 30       	cpi	r24, 0x02	; 2
    2554:	09 f0       	breq	.+2      	; 0x2558 <main+0x814>
    2556:	8d c0       	rjmp	.+282    	; 0x2672 <main+0x92e>
          RvalOut(0);
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	0e 94 4d 03 	call	0x69a	; 0x69a <RvalOut>
          RvalOut(1);
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	0e 94 4d 03 	call	0x69a	; 0x69a <RvalOut>
    2564:	86 c0       	rjmp	.+268    	; 0x2672 <main+0x92e>
    goto end;

  } // end (PartFound == PART_RESISTOR)

//capacity measurement is wanted
  else if(PartFound == PART_CAPACITOR) {
    2566:	17 30       	cpi	r17, 0x07	; 7
    2568:	09 f0       	breq	.+2      	; 0x256c <main+0x828>
    256a:	51 c0       	rjmp	.+162    	; 0x260e <main+0x8ca>
//     lcd_fix_string(Capacitor);
     lcd_testpin(cap.ca);		//Pin number 1
    256c:	80 91 72 01 	lds	r24, 0x0172
    2570:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
     lcd_fix_string(CapZeich);		// capacitor sign
    2574:	8d e1       	ldi	r24, 0x1D	; 29
    2576:	91 e0       	ldi	r25, 0x01	; 1
    2578:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_testpin(cap.cb);		//Pin number 2
    257c:	80 91 73 01 	lds	r24, 0x0173
    2580:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
#if FLASHEND > 0x1fff
     GetVloss();			// get Voltage loss of capacitor
    2584:	0e 94 42 1c 	call	0x3884	; 0x3884 <GetVloss>
     if (cap.v_loss != 0) {
    2588:	80 91 70 01 	lds	r24, 0x0170
    258c:	90 91 71 01 	lds	r25, 0x0171
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	79 f0       	breq	.+30     	; 0x25b2 <main+0x86e>
        lcd_fix_string(VLOSS_str);	// "  Vloss="
    2594:	82 e3       	ldi	r24, 0x32	; 50
    2596:	91 e0       	ldi	r25, 0x01	; 1
    2598:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        DisplayValue(cap.v_loss,-1,'%',2);
    259c:	60 91 70 01 	lds	r22, 0x0170
    25a0:	70 91 71 01 	lds	r23, 0x0171
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	4f ef       	ldi	r20, 0xFF	; 255
    25aa:	25 e2       	ldi	r18, 0x25	; 37
    25ac:	02 e0       	ldi	r16, 0x02	; 2
    25ae:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
     }
#endif
     lcd_line2(); 			//2. row 
    25b2:	80 ec       	ldi	r24, 0xC0	; 192
    25b4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     DisplayValue(cap.cval_max,cap.cpre_max,'F',4);
    25b8:	60 91 66 01 	lds	r22, 0x0166
    25bc:	70 91 67 01 	lds	r23, 0x0167
    25c0:	80 91 68 01 	lds	r24, 0x0168
    25c4:	90 91 69 01 	lds	r25, 0x0169
    25c8:	40 91 75 01 	lds	r20, 0x0175
    25cc:	26 e4       	ldi	r18, 0x46	; 70
    25ce:	04 e0       	ldi	r16, 0x04	; 4
    25d0:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
#if FLASHEND > 0x1fff
     cap.esr = GetESR(cap.cb, cap.ca);		// get ESR of capacitor
    25d4:	80 91 73 01 	lds	r24, 0x0173
    25d8:	60 91 72 01 	lds	r22, 0x0172
    25dc:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <GetESR>
    25e0:	90 93 6f 01 	sts	0x016F, r25
    25e4:	80 93 6e 01 	sts	0x016E, r24
     if ( cap.esr < 65530) {
    25e8:	2f ef       	ldi	r18, 0xFF	; 255
    25ea:	8a 3f       	cpi	r24, 0xFA	; 250
    25ec:	92 07       	cpc	r25, r18
    25ee:	08 f0       	brcs	.+2      	; 0x25f2 <main+0x8ae>
    25f0:	40 c0       	rjmp	.+128    	; 0x2672 <main+0x92e>
        lcd_fix_string(ESR_str);
    25f2:	8c e2       	ldi	r24, 0x2C	; 44
    25f4:	91 e0       	ldi	r25, 0x01	; 1
    25f6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        DisplayValue(cap.esr,-2,LCD_CHAR_OMEGA,2);
    25fa:	60 91 6e 01 	lds	r22, 0x016E
    25fe:	70 91 6f 01 	lds	r23, 0x016F
    2602:	80 e0       	ldi	r24, 0x00	; 0
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	4e ef       	ldi	r20, 0xFE	; 254
    2608:	24 ef       	ldi	r18, 0xF4	; 244
    260a:	02 e0       	ldi	r16, 0x02	; 2
    260c:	57 ce       	rjmp	.-850    	; 0x22bc <main+0x578>
     }
#endif
     goto end;
  }
  if(NumOfDiodes == 0) { //no diodes are found
    260e:	80 91 05 01 	lds	r24, 0x0105
    2612:	88 23       	and	r24, r24
    2614:	71 f4       	brne	.+28     	; 0x2632 <main+0x8ee>
     lcd_fix_string(TestFailed1); 	//"Kein,unbek. oder"
    2616:	88 e9       	ldi	r24, 0x98	; 152
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_line2(); //2. row 
    261e:	80 ec       	ldi	r24, 0xC0	; 192
    2620:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     lcd_fix_string(TestFailed2); 	//"defektes "
    2624:	81 e7       	ldi	r24, 0x71	; 113
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_fix_string(Bauteil);		//"Bauteil"
    262c:	8a e7       	ldi	r24, 0x7A	; 122
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	16 c0       	rjmp	.+44     	; 0x265e <main+0x91a>
  } else {
     lcd_fix_string(Bauteil);		//"Bauteil"
    2632:	8a e7       	ldi	r24, 0x7A	; 122
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_fix_string(Unknown); 		//" unbek."
    263a:	8f e8       	ldi	r24, 0x8F	; 143
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_line2(); //2. row 
    2642:	80 ec       	ldi	r24, 0xC0	; 192
    2644:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     lcd_fix_string(OrBroken); 		//"oder defekt "
    2648:	88 ea       	ldi	r24, 0xA8	; 168
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_data(NumOfDiodes + '0');
    2650:	80 91 05 01 	lds	r24, 0x0105
    2654:	80 5d       	subi	r24, 0xD0	; 208
    2656:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
     lcd_fix_string(AnKat);		//"->|-"
    265a:	83 e4       	ldi	r24, 0x43	; 67
    265c:	91 e0       	ldi	r25, 0x01	; 1
    265e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  }
  empty_count++;
    2662:	80 91 4a 01 	lds	r24, 0x014A
    2666:	8f 5f       	subi	r24, 0xFF	; 255
    2668:	80 93 4a 01 	sts	0x014A, r24
  mess_count = 0;
    266c:	10 92 0b 01 	sts	0x010B, r1
  goto end2;
    2670:	07 c0       	rjmp	.+14     	; 0x2680 <main+0x93c>
gakAusgabe:
  lcd_line2(); //2. row 
  PinLayout(Cathode_char,'G','A'); 	// CGA= or 123=...
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 end:
  empty_count = 0;		// reset counter, if part is found
    2672:	10 92 4a 01 	sts	0x014A, r1
  mess_count++;			// count measurements
    2676:	80 91 0b 01 	lds	r24, 0x010B
    267a:	8f 5f       	subi	r24, 0xFF	; 255
    267c:	80 93 0b 01 	sts	0x010B, r24

 end2:
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND, release relay
    2680:	88 e1       	ldi	r24, 0x18	; 24
    2682:	87 b9       	out	0x07, r24	; 7
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
    2684:	4f 9b       	sbis	0x09, 7	; 9
    2686:	fe cf       	rjmp	.-4      	; 0x2684 <main+0x940>
  wait_about200ms();
    2688:	88 e2       	ldi	r24, 0x28	; 40
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>
// wait 28 seconds or 5 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage+=10) {
    2690:	10 92 60 01 	sts	0x0160, r1
    2694:	10 92 5f 01 	sts	0x015F, r1
    2698:	10 c0       	rjmp	.+32     	; 0x26ba <main+0x976>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    269a:	4f 9b       	sbis	0x09, 7	; 9
    269c:	aa cb       	rjmp	.-2220   	; 0x1df2 <main+0xae>
        // If the key is pressed again... 
        // goto start of measurement 
        goto start;
     }
     wdt_reset();
    269e:	a8 95       	wdr
     wait_about10ms();
    26a0:	82 e0       	ldi	r24, 0x02	; 2
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>
 end2:
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND, release relay
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
  wait_about200ms();
// wait 28 seconds or 5 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage+=10) {
    26a8:	80 91 5f 01 	lds	r24, 0x015F
    26ac:	90 91 60 01 	lds	r25, 0x0160
    26b0:	0a 96       	adiw	r24, 0x0a	; 10
    26b2:	90 93 60 01 	sts	0x0160, r25
    26b6:	80 93 5f 01 	sts	0x015F, r24
    26ba:	80 91 5f 01 	lds	r24, 0x015F
    26be:	90 91 60 01 	lds	r25, 0x0160
    26c2:	2d e6       	ldi	r18, 0x6D	; 109
    26c4:	80 36       	cpi	r24, 0x60	; 96
    26c6:	92 07       	cpc	r25, r18
    26c8:	40 f3       	brcs	.-48     	; 0x269a <main+0x956>
     goto start;			// repeat measurement POWER_OFF times
  }
 #endif
  // only one Measurement requested, shut off
//  MCUSR = 0;
  ON_PORT &= ~(1<<ON_PIN);		//switch off power
    26ca:	5e 98       	cbi	0x0b, 6	; 11
  //never ending loop 
  while(1) {
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    26cc:	4f 9b       	sbis	0x09, 7	; 9
    26ce:	91 cb       	rjmp	.-2270   	; 0x1df2 <main+0xae>
        // The statement is only reached if no auto off equipment is installed
        goto start;
     }
     wdt_reset();
    26d0:	a8 95       	wdr
     wait_about10ms();
    26d2:	82 e0       	ldi	r24, 0x02	; 2
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>
  }
    26da:	f8 cf       	rjmp	.-16     	; 0x26cc <main+0x988>

000026dc <uart_putc>:
    26dc:	2f 93       	push	r18
    26de:	5f b7       	in	r21, 0x3f	; 63
    26e0:	2f 93       	push	r18
    26e2:	2a e0       	ldi	r18, 0x0A	; 10
    26e4:	80 95       	com	r24
    26e6:	08 94       	sec

000026e8 <putchar0>:
    26e8:	10 f4       	brcc	.+4      	; 0x26ee <putchar1>
    26ea:	43 98       	cbi	0x08, 3	; 8
    26ec:	02 c0       	rjmp	.+4      	; 0x26f2 <putchar2>

000026ee <putchar1>:
    26ee:	43 9a       	sbi	0x08, 3	; 8
	...

000026f2 <putchar2>:
    26f2:	22 d0       	rcall	.+68     	; 0x2738 <wait100us>
    26f4:	29 d0       	rcall	.+82     	; 0x2748 <wait3us>
    26f6:	86 95       	lsr	r24
    26f8:	2a 95       	dec	r18
    26fa:	b1 f7       	brne	.-20     	; 0x26e8 <putchar0>
    26fc:	2f 91       	pop	r18
    26fe:	5f bf       	out	0x3f, r21	; 63
    2700:	2f 91       	pop	r18
    2702:	08 95       	ret

00002704 <UART_delay1>:
    2704:	08 95       	ret

00002706 <wait5s>:
    2706:	03 d0       	rcall	.+6      	; 0x270e <wait1000ms>

00002708 <wait4s>:
    2708:	02 d0       	rcall	.+4      	; 0x270e <wait1000ms>

0000270a <wait3s>:
    270a:	01 d0       	rcall	.+2      	; 0x270e <wait1000ms>

0000270c <wait2s>:
    270c:	00 d0       	rcall	.+0      	; 0x270e <wait1000ms>

0000270e <wait1000ms>:
    270e:	00 d0       	rcall	.+0      	; 0x2710 <wait500ms>

00002710 <wait500ms>:
    2710:	03 d0       	rcall	.+6      	; 0x2718 <wait100ms>

00002712 <wait400ms>:
    2712:	02 d0       	rcall	.+4      	; 0x2718 <wait100ms>

00002714 <wait300ms>:
    2714:	01 d0       	rcall	.+2      	; 0x2718 <wait100ms>

00002716 <wait200ms>:
    2716:	00 d0       	rcall	.+0      	; 0x2718 <wait100ms>

00002718 <wait100ms>:
    2718:	a8 95       	wdr
    271a:	00 d0       	rcall	.+0      	; 0x271c <wait50ms>

0000271c <wait50ms>:
    271c:	03 d0       	rcall	.+6      	; 0x2724 <wait10ms>

0000271e <wait40ms>:
    271e:	02 d0       	rcall	.+4      	; 0x2724 <wait10ms>

00002720 <wait30ms>:
    2720:	01 d0       	rcall	.+2      	; 0x2724 <wait10ms>

00002722 <wait20ms>:
    2722:	00 d0       	rcall	.+0      	; 0x2724 <wait10ms>

00002724 <wait10ms>:
    2724:	00 d0       	rcall	.+0      	; 0x2726 <wait5ms>

00002726 <wait5ms>:
    2726:	03 d0       	rcall	.+6      	; 0x272e <wait1ms>

00002728 <wait4ms>:
    2728:	02 d0       	rcall	.+4      	; 0x272e <wait1ms>

0000272a <wait3ms>:
    272a:	01 d0       	rcall	.+2      	; 0x272e <wait1ms>

0000272c <wait2ms>:
    272c:	00 d0       	rcall	.+0      	; 0x272e <wait1ms>

0000272e <wait1ms>:
    272e:	00 d0       	rcall	.+0      	; 0x2730 <wait500us>

00002730 <wait500us>:
    2730:	03 d0       	rcall	.+6      	; 0x2738 <wait100us>

00002732 <wait400us>:
    2732:	02 d0       	rcall	.+4      	; 0x2738 <wait100us>

00002734 <wait300us>:
    2734:	01 d0       	rcall	.+2      	; 0x2738 <wait100us>

00002736 <wait200us>:
    2736:	00 d0       	rcall	.+0      	; 0x2738 <wait100us>

00002738 <wait100us>:
    2738:	00 d0       	rcall	.+0      	; 0x273a <wait50us>

0000273a <wait50us>:
    273a:	03 d0       	rcall	.+6      	; 0x2742 <wait10us>

0000273c <wait40us>:
    273c:	02 d0       	rcall	.+4      	; 0x2742 <wait10us>

0000273e <wait30us>:
    273e:	01 d0       	rcall	.+2      	; 0x2742 <wait10us>

00002740 <wait20us>:
    2740:	00 d0       	rcall	.+0      	; 0x2742 <wait10us>

00002742 <wait10us>:
    2742:	00 d0       	rcall	.+0      	; 0x2744 <wait5us>

00002744 <wait5us>:
    2744:	03 d0       	rcall	.+6      	; 0x274c <wait1us>

00002746 <wait4us>:
    2746:	02 d0       	rcall	.+4      	; 0x274c <wait1us>

00002748 <wait3us>:
    2748:	01 d0       	rcall	.+2      	; 0x274c <wait1us>

0000274a <wait2us>:
    274a:	00 d0       	rcall	.+0      	; 0x274c <wait1us>

0000274c <wait1us>:
    274c:	00 00       	nop
    274e:	08 95       	ret

00002750 <getRLmultip>:
  R_DDR = 0;			// switch all resistor ports to input
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
  return;
 } // end ReadCapacity()

unsigned int getRLmultip(unsigned int cvolt) {
    2750:	ef 92       	push	r14
    2752:	ff 92       	push	r15
    2754:	0f 93       	push	r16
    2756:	1f 93       	push	r17
    2758:	df 93       	push	r29
    275a:	cf 93       	push	r28
    275c:	0f 92       	push	r0
    275e:	cd b7       	in	r28, 0x3d	; 61
    2760:	de b7       	in	r29, 0x3e	; 62

  unsigned int uvolt;
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;
  if (cvolt >= RL_Tab_Beginn) {
    2762:	21 e0       	ldi	r18, 0x01	; 1
    2764:	8c 32       	cpi	r24, 0x2C	; 44
    2766:	92 07       	cpc	r25, r18
    2768:	18 f0       	brcs	.+6      	; 0x2770 <getRLmultip+0x20>
     uvolt = cvolt - RL_Tab_Beginn;
    276a:	8c 52       	subi	r24, 0x2C	; 44
    276c:	91 40       	sbci	r25, 0x01	; 1
    276e:	02 c0       	rjmp	.+4      	; 0x2774 <getRLmultip+0x24>
  } else {
     uvolt = 0;			// limit to begin of table
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = uvolt / RL_Tab_Abstand;
    2774:	69 e1       	ldi	r22, 0x19	; 25
    2776:	70 e0       	ldi	r23, 0x00	; 0
    2778:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <__udivmodhi4>
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
  if (tabind > ((RL_Tab_Length/RL_Tab_Abstand)-1)) {
    277c:	6c 32       	cpi	r22, 0x2C	; 44
    277e:	18 f4       	brcc	.+6      	; 0x2786 <getRLmultip+0x36>
  } else {
     uvolt = 0;			// limit to begin of table
  }
  tabind = uvolt / RL_Tab_Abstand;
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
    2780:	49 e1       	ldi	r20, 0x19	; 25
    2782:	48 1b       	sub	r20, r24
    2784:	02 c0       	rjmp	.+4      	; 0x278a <getRLmultip+0x3a>
  if (tabind > ((RL_Tab_Length/RL_Tab_Abstand)-1)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand)-1;	// limit to end of table
     tabres = 0;
    2786:	40 e0       	ldi	r20, 0x00	; 0
  }
  tabind = uvolt / RL_Tab_Abstand;
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
  if (tabind > ((RL_Tab_Length/RL_Tab_Abstand)-1)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand)-1;	// limit to end of table
    2788:	6b e2       	ldi	r22, 0x2B	; 43
     tabres = 0;
  }
  y1 = MEM_read_word(&RLtab[tabind]);
    278a:	e6 2e       	mov	r14, r22
    278c:	ff 24       	eor	r15, r15
    278e:	c7 01       	movw	r24, r14
    2790:	88 0f       	add	r24, r24
    2792:	99 1f       	adc	r25, r25
    2794:	80 50       	subi	r24, 0x00	; 0
    2796:	90 40       	sbci	r25, 0x00	; 0
    2798:	49 83       	std	Y+1, r20	; 0x01
    279a:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__eerd_word_m168>
    279e:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RLtab[tabind+1]);
    27a0:	c7 01       	movw	r24, r14
    27a2:	88 0f       	add	r24, r24
    27a4:	99 1f       	adc	r25, r25
    27a6:	8e 5f       	subi	r24, 0xFE	; 254
    27a8:	9f 4f       	sbci	r25, 0xFF	; 255
    27aa:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__eerd_word_m168>
    27ae:	9c 01       	movw	r18, r24
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
    27b0:	49 81       	ldd	r20, Y+1	; 0x01
    27b2:	50 e0       	ldi	r21, 0x00	; 0
    27b4:	08 1b       	sub	r16, r24
    27b6:	19 0b       	sbc	r17, r25
    27b8:	40 9f       	mul	r20, r16
    27ba:	c0 01       	movw	r24, r0
    27bc:	41 9f       	mul	r20, r17
    27be:	90 0d       	add	r25, r0
    27c0:	50 9f       	mul	r21, r16
    27c2:	90 0d       	add	r25, r0
    27c4:	11 24       	eor	r1, r1
    27c6:	0c 96       	adiw	r24, 0x0c	; 12
    27c8:	69 e1       	ldi	r22, 0x19	; 25
    27ca:	70 e0       	ldi	r23, 0x00	; 0
    27cc:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <__udivmodhi4>
    27d0:	62 0f       	add	r22, r18
    27d2:	73 1f       	adc	r23, r19
}
    27d4:	cb 01       	movw	r24, r22
    27d6:	0f 90       	pop	r0
    27d8:	cf 91       	pop	r28
    27da:	df 91       	pop	r29
    27dc:	1f 91       	pop	r17
    27de:	0f 91       	pop	r16
    27e0:	ff 90       	pop	r15
    27e2:	ef 90       	pop	r14
    27e4:	08 95       	ret

000027e6 <Scale_C_with_vcc>:

void Scale_C_with_vcc(void) {
    27e6:	8f 92       	push	r8
    27e8:	9f 92       	push	r9
    27ea:	af 92       	push	r10
    27ec:	bf 92       	push	r11
    27ee:	df 92       	push	r13
    27f0:	ef 92       	push	r14
    27f2:	ff 92       	push	r15
    27f4:	0f 93       	push	r16
    27f6:	1f 93       	push	r17
    27f8:	e0 90 62 01 	lds	r14, 0x0162
    27fc:	f0 90 63 01 	lds	r15, 0x0163
    2800:	00 91 64 01 	lds	r16, 0x0164
    2804:	10 91 65 01 	lds	r17, 0x0165
    2808:	d0 90 74 01 	lds	r13, 0x0174
   while (cap.cval > 100000) {
      cap.cval /= 10;
    280c:	4a e0       	ldi	r20, 0x0A	; 10
    280e:	84 2e       	mov	r8, r20
    2810:	91 2c       	mov	r9, r1
    2812:	a1 2c       	mov	r10, r1
    2814:	b1 2c       	mov	r11, r1
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    2816:	08 c0       	rjmp	.+16     	; 0x2828 <Scale_C_with_vcc+0x42>
      cap.cval /= 10;
    2818:	c8 01       	movw	r24, r16
    281a:	b7 01       	movw	r22, r14
    281c:	a5 01       	movw	r20, r10
    281e:	94 01       	movw	r18, r8
    2820:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
    2824:	79 01       	movw	r14, r18
    2826:	8a 01       	movw	r16, r20
    2828:	8d 2d       	mov	r24, r13
    282a:	d3 94       	inc	r13
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    282c:	91 ea       	ldi	r25, 0xA1	; 161
    282e:	e9 16       	cp	r14, r25
    2830:	96 e8       	ldi	r25, 0x86	; 134
    2832:	f9 06       	cpc	r15, r25
    2834:	91 e0       	ldi	r25, 0x01	; 1
    2836:	09 07       	cpc	r16, r25
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	19 07       	cpc	r17, r25
    283c:	68 f7       	brcc	.-38     	; 0x2818 <Scale_C_with_vcc+0x32>
    283e:	80 93 74 01 	sts	0x0174, r24
      cap.cval /= 10;
      cap.cpre ++;			// prevent overflow
   }
   cap.cval *= ADCconfig.U_AVCC;	// scale with measured voltage
    2842:	20 91 40 01 	lds	r18, 0x0140
    2846:	30 91 41 01 	lds	r19, 0x0141
    284a:	40 e0       	ldi	r20, 0x00	; 0
    284c:	50 e0       	ldi	r21, 0x00	; 0
    284e:	c8 01       	movw	r24, r16
    2850:	b7 01       	movw	r22, r14
    2852:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
    2856:	28 e8       	ldi	r18, 0x88	; 136
    2858:	33 e1       	ldi	r19, 0x13	; 19
    285a:	40 e0       	ldi	r20, 0x00	; 0
    285c:	50 e0       	ldi	r21, 0x00	; 0
    285e:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
    2862:	20 93 62 01 	sts	0x0162, r18
    2866:	30 93 63 01 	sts	0x0163, r19
    286a:	40 93 64 01 	sts	0x0164, r20
    286e:	50 93 65 01 	sts	0x0165, r21
}
    2872:	1f 91       	pop	r17
    2874:	0f 91       	pop	r16
    2876:	ff 90       	pop	r15
    2878:	ef 90       	pop	r14
    287a:	df 90       	pop	r13
    287c:	bf 90       	pop	r11
    287e:	af 90       	pop	r10
    2880:	9f 90       	pop	r9
    2882:	8f 90       	pop	r8
    2884:	08 95       	ret

00002886 <ReadCapacity>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    2886:	7f 92       	push	r7
    2888:	8f 92       	push	r8
    288a:	9f 92       	push	r9
    288c:	af 92       	push	r10
    288e:	bf 92       	push	r11
    2890:	cf 92       	push	r12
    2892:	df 92       	push	r13
    2894:	ef 92       	push	r14
    2896:	ff 92       	push	r15
    2898:	0f 93       	push	r16
    289a:	1f 93       	push	r17
    289c:	cf 93       	push	r28
    289e:	df 93       	push	r29
    28a0:	18 2f       	mov	r17, r24
    28a2:	76 2e       	mov	r7, r22
#if FLASHEND > 0x1fff
  unsigned int vloss;	// lost voltage after load pulse in 0.1% 
#endif

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
    28a4:	88 0f       	add	r24, r24
    28a6:	81 0f       	add	r24, r17
    28a8:	86 0f       	add	r24, r22
    28aa:	81 50       	subi	r24, 0x01	; 1
    28ac:	80 93 4c 01 	sts	0x014C, r24
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    28b0:	e6 2f       	mov	r30, r22
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	ed 5f       	subi	r30, 0xFD	; 253
    28b6:	fe 4f       	sbci	r31, 0xFE	; 254
    28b8:	04 91       	lpm	r16, Z+
  HiPinR_L = pgm_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
    28ba:	e1 2f       	mov	r30, r17
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	e0 50       	subi	r30, 0x00	; 0
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	a4 90       	lpm	r10, Z+
  lcd_testpin(LowPin);
  lcd_data('C');
  lcd_testpin(HighPin);
  lcd_space();
#endif
  if(PartFound == PART_RESISTOR) {
    28c4:	80 91 07 01 	lds	r24, 0x0107
    28c8:	86 30       	cpi	r24, 0x06	; 6
    28ca:	09 f4       	brne	.+2      	; 0x28ce <ReadCapacity+0x48>
    28cc:	98 c2       	rjmp	.+1328   	; 0x2dfe <ReadCapacity+0x578>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    28ce:	30 91 05 01 	lds	r19, 0x0105
    28d2:	a8 e7       	ldi	r26, 0x78	; 120
    28d4:	b1 e0       	ldi	r27, 0x01	; 1
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	13 c0       	rjmp	.+38     	; 0x2900 <ReadCapacity+0x7a>
     if ((diodes[ii].Cathode == LowPin) && (diodes[ii].Anode == HighPin) && (diodes[ii].Voltage < 1500)) {
    28da:	11 96       	adiw	r26, 0x01	; 1
    28dc:	8c 91       	ld	r24, X
    28de:	11 97       	sbiw	r26, 0x01	; 1
    28e0:	87 15       	cp	r24, r7
    28e2:	61 f4       	brne	.+24     	; 0x28fc <ReadCapacity+0x76>
    28e4:	8c 91       	ld	r24, X
    28e6:	81 17       	cp	r24, r17
    28e8:	49 f4       	brne	.+18     	; 0x28fc <ReadCapacity+0x76>
    28ea:	12 96       	adiw	r26, 0x02	; 2
    28ec:	8d 91       	ld	r24, X+
    28ee:	9c 91       	ld	r25, X
    28f0:	13 97       	sbiw	r26, 0x03	; 3
    28f2:	45 e0       	ldi	r20, 0x05	; 5
    28f4:	8c 3d       	cpi	r24, 0xDC	; 220
    28f6:	94 07       	cpc	r25, r20
    28f8:	08 f4       	brcc	.+2      	; 0x28fc <ReadCapacity+0x76>
    28fa:	81 c2       	rjmp	.+1282   	; 0x2dfe <ReadCapacity+0x578>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    28fc:	2f 5f       	subi	r18, 0xFF	; 255
    28fe:	14 96       	adiw	r26, 0x04	; 4
    2900:	23 17       	cp	r18, r19
    2902:	58 f3       	brcs	.-42     	; 0x28da <ReadCapacity+0x54>

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2904:	08 60       	ori	r16, 0x08	; 8
        return;
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
    2906:	10 92 6f 01 	sts	0x016F, r1
    290a:	10 92 6e 01 	sts	0x016E, r1
  vloss = 0;				// set lost voltage to zero
#endif
  cap.cval = 0;				// set capacity value to zero
    290e:	10 92 62 01 	sts	0x0162, r1
    2912:	10 92 63 01 	sts	0x0163, r1
    2916:	10 92 64 01 	sts	0x0164, r1
    291a:	10 92 65 01 	sts	0x0165, r1
  cap.cpre = -12;			//default unit is pF
    291e:	84 ef       	ldi	r24, 0xF4	; 244
    2920:	80 93 74 01 	sts	0x0174, r24
  EntladePins();			// discharge capacitor
    2924:	0e 94 ad 01 	call	0x35a	; 0x35a <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    2928:	88 e0       	ldi	r24, 0x08	; 8
    292a:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    292c:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    292e:	07 b9       	out	0x07, r16	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    2930:	a4 b8       	out	0x04, r10	; 4
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    2932:	81 2f       	mov	r24, r17
    2934:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
    2938:	7c 01       	movw	r14, r24
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    293a:	10 92 4e 01 	sts	0x014E, r1
    293e:	10 92 4d 01 	sts	0x014D, r1
  EntladePins();			// discharge capacitor
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
  R_PORT = 0;				// switch R-Port to GND
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    2942:	ec 01       	movw	r28, r24
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2944:	2d c0       	rjmp	.+90     	; 0x29a0 <ReadCapacity+0x11a>
     R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    2946:	a5 b8       	out	0x05, r10	; 5
     R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    2948:	a4 b8       	out	0x04, r10	; 4
     wait10ms();			// wait exactly 10ms, do not sleep
    294a:	0e 94 92 13 	call	0x2724	; 0x2724 <wait10ms>
     R_DDR = 0;				// switch back to input
    294e:	14 b8       	out	0x04, r1	; 4
     R_PORT = 0;			// no Pull up
    2950:	15 b8       	out	0x05, r1	; 5
     wait500us();			//wait a little time
    2952:	0e 94 98 13 	call	0x2730	; 0x2730 <wait500us>
     wdt_reset();
    2956:	a8 95       	wdr
     // read voltage without current, is already charged enough?
     adcv[2] = ReadADC(HighPin);
    2958:	81 2f       	mov	r24, r17
    295a:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
     if (adcv[2] > adcv[0]) {
    295e:	e8 16       	cp	r14, r24
    2960:	f9 06       	cpc	r15, r25
    2962:	20 f4       	brcc	.+8      	; 0x296c <ReadCapacity+0xe6>
        adcv[2] -= adcv[0];		//difference to beginning voltage
    2964:	ec 01       	movw	r28, r24
    2966:	ce 19       	sub	r28, r14
    2968:	df 09       	sbc	r29, r15
    296a:	02 c0       	rjmp	.+4      	; 0x2970 <ReadCapacity+0xea>
     } else {
        adcv[2] = 0;			// voltage is lower or same as beginning voltage
    296c:	c0 e0       	ldi	r28, 0x00	; 0
    296e:	d0 e0       	ldi	r29, 0x00	; 0
     }
     if ((ovcnt16 == 126) && (adcv[2] < 75)) {
    2970:	80 91 4d 01 	lds	r24, 0x014D
    2974:	90 91 4e 01 	lds	r25, 0x014E
    2978:	8e 37       	cpi	r24, 0x7E	; 126
    297a:	91 05       	cpc	r25, r1
    297c:	21 f4       	brne	.+8      	; 0x2986 <ReadCapacity+0x100>
    297e:	cb 34       	cpi	r28, 0x4B	; 75
    2980:	d1 05       	cpc	r29, r1
    2982:	08 f4       	brcc	.+2      	; 0x2986 <ReadCapacity+0x100>
    2984:	37 c2       	rjmp	.+1134   	; 0x2df4 <ReadCapacity+0x56e>
        // 300mV can not be reached well-timed 
        break;		// don't try to load any more
     }
     if (adcv[2] > 300) {
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	cd 32       	cpi	r28, 0x2D	; 45
    298a:	d8 07       	cpc	r29, r24
    298c:	b0 f4       	brcc	.+44     	; 0x29ba <ReadCapacity+0x134>
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    298e:	80 91 4d 01 	lds	r24, 0x014D
    2992:	90 91 4e 01 	lds	r25, 0x014E
    2996:	01 96       	adiw	r24, 0x01	; 1
    2998:	90 93 4e 01 	sts	0x014E, r25
    299c:	80 93 4d 01 	sts	0x014D, r24
    29a0:	80 91 4d 01 	lds	r24, 0x014D
    29a4:	90 91 4e 01 	lds	r25, 0x014E
    29a8:	21 e0       	ldi	r18, 0x01	; 1
    29aa:	84 3f       	cpi	r24, 0xF4	; 244
    29ac:	92 07       	cpc	r25, r18
    29ae:	58 f2       	brcs	.-106    	; 0x2946 <ReadCapacity+0xc0>
//  wdt_reset();
#if DebugOut == 10
  DisplayValue(ovcnt16,0,' ',4);
  DisplayValue(adcv[2],-3,'V',4);
#endif
  if (adcv[2] < 301) {
    29b0:	41 e0       	ldi	r20, 0x01	; 1
    29b2:	cd 32       	cpi	r28, 0x2D	; 45
    29b4:	d4 07       	cpc	r29, r20
    29b6:	08 f4       	brcc	.+2      	; 0x29ba <ReadCapacity+0x134>
    29b8:	1d c2       	rjmp	.+1082   	; 0x2df4 <ReadCapacity+0x56e>
#endif
//     if (NumOfDiodes != 0) goto messe_mit_rh; /* ****************************** */
     goto keinC;		// was never charged enough, >100mF or shorted
  }
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    29ba:	80 91 4d 01 	lds	r24, 0x014D
    29be:	90 91 4e 01 	lds	r25, 0x014E
    29c2:	00 97       	sbiw	r24, 0x00	; 0
    29c4:	81 f4       	brne	.+32     	; 0x29e6 <ReadCapacity+0x160>
    29c6:	85 e0       	ldi	r24, 0x05	; 5
    29c8:	c5 31       	cpi	r28, 0x15	; 21
    29ca:	d8 07       	cpc	r29, r24
    29cc:	08 f0       	brcs	.+2      	; 0x29d0 <ReadCapacity+0x14a>
    29ce:	92 c0       	rjmp	.+292    	; 0x2af4 <ReadCapacity+0x26e>
    29d0:	0a c0       	rjmp	.+20     	; 0x29e6 <ReadCapacity+0x160>
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
     wait5ms();
    29d2:	0e 94 93 13 	call	0x2726	; 0x2726 <wait5ms>
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
    29d6:	81 2f       	mov	r24, r17
    29d8:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
     wdt_reset();
    29dc:	a8 95       	wdr
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    29de:	08 94       	sec
    29e0:	c1 1c       	adc	r12, r1
    29e2:	d1 1c       	adc	r13, r1
    29e4:	03 c0       	rjmp	.+6      	; 0x29ec <ReadCapacity+0x166>
#endif
//     if (NumOfDiodes != 0) goto messe_mit_rh; /* ****************************** */
     goto keinC;		// was never charged enough, >100mF or shorted
  }
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    29e6:	ce 01       	movw	r24, r28
    29e8:	cc 24       	eor	r12, r12
    29ea:	dd 24       	eor	r13, r13
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    29ec:	20 91 4d 01 	lds	r18, 0x014D
    29f0:	30 91 4e 01 	lds	r19, 0x014E
    29f4:	2c 15       	cp	r18, r12
    29f6:	3d 05       	cpc	r19, r13
    29f8:	60 f7       	brcc	.-40     	; 0x29d2 <ReadCapacity+0x14c>
     wait5ms();
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
    29fa:	e8 16       	cp	r14, r24
    29fc:	f9 06       	cpc	r15, r25
    29fe:	30 f4       	brcc	.+12     	; 0x2a0c <ReadCapacity+0x186>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    2a00:	8e 19       	sub	r24, r14
    2a02:	9f 09       	sbc	r25, r15
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    2a04:	8c 17       	cp	r24, r28
    2a06:	9d 07       	cpc	r25, r29
    2a08:	10 f5       	brcc	.+68     	; 0x2a4e <ReadCapacity+0x1c8>
    2a0a:	02 c0       	rjmp	.+4      	; 0x2a10 <ReadCapacity+0x18a>
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
    2a10:	7e 01       	movw	r14, r28
    2a12:	e8 1a       	sub	r14, r24
    2a14:	f9 0a       	sbc	r15, r25
  } else {
     adcv[3] = 0;			// no lost voltage
  }
#if FLASHEND > 0x1fff
  // compute equivalent parallel resistance from voltage drop
  if (adcv[3] > 0) {
    2a16:	e9 f0       	breq	.+58     	; 0x2a52 <ReadCapacity+0x1cc>
     // there is any voltage drop (adcv[3]) !
     // adcv[2] is the loaded voltage.
     vloss = (unsigned long)(adcv[3] * 1000UL) / adcv[2];
    2a18:	b7 01       	movw	r22, r14
    2a1a:	80 e0       	ldi	r24, 0x00	; 0
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	28 ee       	ldi	r18, 0xE8	; 232
    2a20:	33 e0       	ldi	r19, 0x03	; 3
    2a22:	40 e0       	ldi	r20, 0x00	; 0
    2a24:	50 e0       	ldi	r21, 0x00	; 0
    2a26:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
    2a2a:	9e 01       	movw	r18, r28
    2a2c:	40 e0       	ldi	r20, 0x00	; 0
    2a2e:	50 e0       	ldi	r21, 0x00	; 0
    2a30:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
    2a34:	49 01       	movw	r8, r18
  }
#endif
  if (adcv[3] > 100) {
    2a36:	25 e6       	ldi	r18, 0x65	; 101
    2a38:	e2 16       	cp	r14, r18
    2a3a:	f1 04       	cpc	r15, r1
    2a3c:	60 f0       	brcs	.+24     	; 0x2a56 <ReadCapacity+0x1d0>
 #if DebugOut == 10
     lcd_data('L');
     lcd_space();
     wait_about1s();
 #endif
     if (ovcnt16 == 0 )  {
    2a3e:	80 91 4d 01 	lds	r24, 0x014D
    2a42:	90 91 4e 01 	lds	r25, 0x014E
    2a46:	00 97       	sbiw	r24, 0x00	; 0
    2a48:	09 f4       	brne	.+2      	; 0x2a4c <ReadCapacity+0x1c6>
    2a4a:	56 c0       	rjmp	.+172    	; 0x2af8 <ReadCapacity+0x272>
    2a4c:	d3 c1       	rjmp	.+934    	; 0x2df4 <ReadCapacity+0x56e>
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    2a4e:	ee 24       	eor	r14, r14
    2a50:	ff 24       	eor	r15, r15
  } else {
     adcv[3] = 0;			// no lost voltage
  }
#if FLASHEND > 0x1fff
  // compute equivalent parallel resistance from voltage drop
  if (adcv[3] > 0) {
    2a52:	88 24       	eor	r8, r8
    2a54:	99 24       	eor	r9, r9
     if (ovcnt16 == 0 )  {
        goto messe_mit_rh;		// Voltage of more than 1300mV is reached in one pulse, but not hold
     }
     goto keinC;			// capacitor does not keep the voltage about 5ms
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
    2a56:	a0 90 4d 01 	lds	r10, 0x014D
    2a5a:	b0 90 4e 01 	lds	r11, 0x014E
    2a5e:	08 94       	sec
    2a60:	a1 1c       	adc	r10, r1
    2a62:	b1 1c       	adc	r11, r1
    2a64:	cc 24       	eor	r12, r12
    2a66:	dd 24       	eor	r13, r13
    2a68:	a0 92 6a 01 	sts	0x016A, r10
    2a6c:	b0 92 6b 01 	sts	0x016B, r11
    2a70:	c0 92 6c 01 	sts	0x016C, r12
    2a74:	d0 92 6d 01 	sts	0x016D, r13
  // compute factor with load voltage + lost voltage during the voltage load time
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]+adcv[3]);	// get factor to convert time to capacity from table
    2a78:	c7 01       	movw	r24, r14
    2a7a:	8c 0f       	add	r24, r28
    2a7c:	9d 1f       	adc	r25, r29
    2a7e:	0e 94 a8 13 	call	0x2750	; 0x2750 <getRLmultip>
    2a82:	bc 01       	movw	r22, r24
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	a6 01       	movw	r20, r12
    2a8a:	95 01       	movw	r18, r10
    2a8c:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
    2a90:	60 93 6a 01 	sts	0x016A, r22
    2a94:	70 93 6b 01 	sts	0x016B, r23
    2a98:	80 93 6c 01 	sts	0x016C, r24
    2a9c:	90 93 6d 01 	sts	0x016D, r25
#endif
   cap.cval = cap.cval_uncorrected.dw;	// set result to uncorrected
    2aa0:	60 93 62 01 	sts	0x0162, r22
    2aa4:	70 93 63 01 	sts	0x0163, r23
    2aa8:	80 93 64 01 	sts	0x0164, r24
    2aac:	90 93 65 01 	sts	0x0165, r25
   cap.cpre = -9;		// switch units to nF 
    2ab0:	87 ef       	ldi	r24, 0xF7	; 247
    2ab2:	80 93 74 01 	sts	0x0174, r24
   Scale_C_with_vcc();
    2ab6:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <Scale_C_with_vcc>
   // cap.cval for this type is at least 40000nF, so the last digit will be never shown
   cap.cval *= (1000 - C_H_KORR);	// correct with C_H_KORR with 0.1% resolution, but prevent overflow
    2aba:	60 91 62 01 	lds	r22, 0x0162
    2abe:	70 91 63 01 	lds	r23, 0x0163
    2ac2:	80 91 64 01 	lds	r24, 0x0164
    2ac6:	90 91 65 01 	lds	r25, 0x0165
    2aca:	28 ee       	ldi	r18, 0xE8	; 232
    2acc:	33 e0       	ldi	r19, 0x03	; 3
    2ace:	40 e0       	ldi	r20, 0x00	; 0
    2ad0:	50 e0       	ldi	r21, 0x00	; 0
    2ad2:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
   cap.cval /= 100;
    2ad6:	24 e6       	ldi	r18, 0x64	; 100
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e0       	ldi	r20, 0x00	; 0
    2adc:	50 e0       	ldi	r21, 0x00	; 0
    2ade:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
    2ae2:	20 93 62 01 	sts	0x0162, r18
    2ae6:	30 93 63 01 	sts	0x0163, r19
    2aea:	40 93 64 01 	sts	0x0164, r20
    2aee:	50 93 65 01 	sts	0x0165, r21
   DisplayValue(cap.cval,cap.cpre,'F',4);
   lcd_space();
   lcd_string(utoa(ovcnt16,outval,10));
   wait_about3s();
#endif
   goto checkDiodes;
    2af2:	41 c1       	rjmp	.+642    	; 0x2d76 <ReadCapacity+0x4f0>
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
  vloss = 0;				// set lost voltage to zero
    2af4:	88 24       	eor	r8, r8
    2af6:	99 24       	eor	r9, r9
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
  HiPinR_L = pgm_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load
    2af8:	ea 2c       	mov	r14, r10
    2afa:	ee 0c       	add	r14, r14

//==================================================================================
// Measurement of little capacity values
messe_mit_rh:
  //little capacity value, about  < 50 µF
  EntladePins();			// discharge capacitor
    2afc:	0e 94 ad 01 	call	0x35a	; 0x35a <EntladePins>
  //measure with the R_H (470kOhm) resistor 
  R_PORT = 0;		// R_DDR ist HiPinR_L
    2b00:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = (1<<TP1) | (1<<TP2) | (1<<TP3) | (1<<TxD);	//switch all Pins to output
    2b02:	8f e0       	ldi	r24, 0x0F	; 15
    2b04:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		//switch all ADC Pins to GND
    2b06:	88 e0       	ldi	r24, 0x08	; 8
    2b08:	88 b9       	out	0x08, r24	; 8
  R_DDR = HiPinR_H;   		// switch R_H resistor port for HighPin to output (GND)
    2b0a:	e4 b8       	out	0x04, r14	; 4
// setup Analog Comparator
  ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    2b0c:	80 e4       	ldi	r24, 0x40	; 64
    2b0e:	80 93 7b 00 	sts	0x007B, r24
  ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    2b12:	84 e5       	ldi	r24, 0x54	; 84
    2b14:	80 bf       	out	0x30, r24	; 48
  ADMUX = (1<<REFS0) | HighPin;			// switch Mux to High-Pin
    2b16:	81 2f       	mov	r24, r17
    2b18:	80 64       	ori	r24, 0x40	; 64
    2b1a:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    2b1e:	86 e1       	ldi	r24, 0x16	; 22
    2b20:	80 93 7a 00 	sts	0x007A, r24
  wait200us();			//wait for bandgap to start up
    2b24:	0e 94 9b 13 	call	0x2736	; 0x2736 <wait200us>

// setup Counter1
  ovcnt16 = 0;
    2b28:	10 92 4e 01 	sts	0x014E, r1
    2b2c:	10 92 4d 01 	sts	0x014D, r1
  TCCR1A = 0;			// set Counter1 to normal Mode
    2b30:	10 92 80 00 	sts	0x0080, r1
  TCNT1 = 0;			//set Counter to 0
    2b34:	10 92 85 00 	sts	0x0085, r1
    2b38:	10 92 84 00 	sts	0x0084, r1
  TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// clear interrupt flags
    2b3c:	87 e2       	ldi	r24, 0x27	; 39
    2b3e:	86 bb       	out	0x16, r24	; 22
#ifndef INHIBIT_SLEEP_MODE
  TIMSK1 = (1<<TOIE1) | (1<<ICIE1);	// enable Timer overflow interrupt and input capture interrupt
    2b40:	81 e2       	ldi	r24, 0x21	; 33
    2b42:	80 93 6f 00 	sts	0x006F, r24
  unfinished = 1;
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	80 93 61 01 	sts	0x0161, r24
#endif
  R_PORT = HiPinR_H;           	// switch R_H resistor port for HighPin to VCC
    2b4c:	e5 b8       	out	0x05, r14	; 5
  if(PartFound == PART_FET) {
    2b4e:	90 91 07 01 	lds	r25, 0x0107
    2b52:	93 30       	cpi	r25, 0x03	; 3
    2b54:	71 f4       	brne	.+28     	; 0x2b72 <ReadCapacity+0x2ec>
     // charge capacitor with R_H resistor
     TCCR1B = (0<<ICNC1) | (1<<CS10);	//Start counter 1MHz or 8MHz without Noise Canceler
    2b56:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = (((1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK) & ~(1<<HighPin));	// release only HighPin ADC port
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	01 2e       	mov	r0, r17
    2b60:	02 c0       	rjmp	.+4      	; 0x2b66 <ReadCapacity+0x2e0>
    2b62:	88 0f       	add	r24, r24
    2b64:	99 1f       	adc	r25, r25
    2b66:	0a 94       	dec	r0
    2b68:	e2 f7       	brpl	.-8      	; 0x2b62 <ReadCapacity+0x2dc>
    2b6a:	80 95       	com	r24
    2b6c:	8f 70       	andi	r24, 0x0F	; 15
    2b6e:	87 b9       	out	0x07, r24	; 7
    2b70:	03 c0       	rjmp	.+6      	; 0x2b78 <ReadCapacity+0x2f2>
  } else {
     TCCR1B =  (0<<ICNC1) | (1<<CS10);	//start counter 1MHz or 8MHz without Noise Canceler
    2b72:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
    2b76:	07 b9       	out	0x07, r16	; 7
     // this OV was not counted, but was before the Input Capture
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
     ovcnt16++;
  }
#else
  cli();		// disable interrupts to prevent wakeup Interrupts before sleeping
    2b78:	f8 94       	cli
  set_sleep_mode(SLEEP_MODE_IDLE);
    2b7a:	83 b7       	in	r24, 0x33	; 51
    2b7c:	81 7f       	andi	r24, 0xF1	; 241
    2b7e:	83 bf       	out	0x33, r24	; 51
  while(unfinished) {
    2b80:	12 c0       	rjmp	.+36     	; 0x2ba6 <ReadCapacity+0x320>
    sleep_enable();
    2b82:	83 b7       	in	r24, 0x33	; 51
    2b84:	81 60       	ori	r24, 0x01	; 1
    2b86:	83 bf       	out	0x33, r24	; 51
    sei();		// enable interrupts after next instruction
    2b88:	78 94       	sei
    sleep_cpu();	// only enable interrupts during sleeping
    2b8a:	88 95       	sleep
    sleep_disable();
    2b8c:	83 b7       	in	r24, 0x33	; 51
    2b8e:	8e 7f       	andi	r24, 0xFE	; 254
    2b90:	83 bf       	out	0x33, r24	; 51
    cli();		// disable interrupts again
    2b92:	f8 94       	cli
    wdt_reset();	// reset watch dog during waiting
    2b94:	a8 95       	wdr
    if(ovcnt16 == (F_CPU/5000)) {
    2b96:	80 91 4d 01 	lds	r24, 0x014D
    2b9a:	90 91 4e 01 	lds	r25, 0x014E
    2b9e:	46 e0       	ldi	r20, 0x06	; 6
    2ba0:	80 34       	cpi	r24, 0x40	; 64
    2ba2:	94 07       	cpc	r25, r20
    2ba4:	21 f0       	breq	.+8      	; 0x2bae <ReadCapacity+0x328>
     ovcnt16++;
  }
#else
  cli();		// disable interrupts to prevent wakeup Interrupts before sleeping
  set_sleep_mode(SLEEP_MODE_IDLE);
  while(unfinished) {
    2ba6:	80 91 61 01 	lds	r24, 0x0161
    2baa:	88 23       	and	r24, r24
    2bac:	51 f7       	brne	.-44     	; 0x2b82 <ReadCapacity+0x2fc>
    wdt_reset();	// reset watch dog during waiting
    if(ovcnt16 == (F_CPU/5000)) {
       break; 		//Timeout for Charging, above 12 s
    }
  }
  sei();		// enable interrupts again
    2bae:	78 94       	sei
  TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    2bb0:	10 92 81 00 	sts	0x0081, r1
  tmpint = ICR1;		// get previous Input Capture Counter flag
    2bb4:	c0 91 86 00 	lds	r28, 0x0086
    2bb8:	d0 91 87 00 	lds	r29, 0x0087
  TIMSK1 = (0<<TOIE1) | (0<<ICIE1);	// disable Timer overflow interrupt and input capture interrupt
    2bbc:	10 92 6f 00 	sts	0x006F, r1
    lcd_string(utoa(tmpint,outval,10));
  }
#endif

//############################################################
  ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    2bc0:	86 e9       	ldi	r24, 0x96	; 150
    2bc2:	80 93 7a 00 	sts	0x007A, r24
  R_DDR = 0;			// switch R_H resistor port for input
    2bc6:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// switch R_H resistor port pull up for HighPin off
    2bc8:	15 b8       	out	0x05, r1	; 5
  adcv[2] = ReadADC(HighPin);   // get loaded voltage
    2bca:	81 2f       	mov	r24, r17
    2bcc:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
  load_diff = adcv[2] + REF_C_KORR - ref_mv;	// build difference of capacitor voltage to Reference Voltage
    2bd0:	20 91 44 01 	lds	r18, 0x0144
    2bd4:	30 91 45 01 	lds	r19, 0x0145
    2bd8:	82 1b       	sub	r24, r18
    2bda:	93 0b       	sbc	r25, r19
    2bdc:	0c 96       	adiw	r24, 0x0c	; 12
    2bde:	90 93 77 01 	sts	0x0177, r25
    2be2:	80 93 76 01 	sts	0x0176, r24
//############################################################
  if (ovcnt16 >= (F_CPU/10000)) {
    2be6:	80 91 4d 01 	lds	r24, 0x014D
    2bea:	90 91 4e 01 	lds	r25, 0x014E
    2bee:	23 e0       	ldi	r18, 0x03	; 3
    2bf0:	80 32       	cpi	r24, 0x20	; 32
    2bf2:	92 07       	cpc	r25, r18
    2bf4:	08 f0       	brcs	.+2      	; 0x2bf8 <ReadCapacity+0x372>
    2bf6:	fe c0       	rjmp	.+508    	; 0x2df4 <ReadCapacity+0x56e>
     wait_about1s();
#endif
     goto keinC;	// no normal end
  }
//  cap.cval_uncorrected = CombineII2Long(ovcnt16, tmpint);
  cap.cval_uncorrected.w[1] = ovcnt16;
    2bf8:	80 91 4d 01 	lds	r24, 0x014D
    2bfc:	90 91 4e 01 	lds	r25, 0x014E
    2c00:	90 93 6d 01 	sts	0x016D, r25
    2c04:	80 93 6c 01 	sts	0x016C, r24
  cap.cval_uncorrected.w[0] = tmpint;
    2c08:	d0 93 6b 01 	sts	0x016B, r29
    2c0c:	c0 93 6a 01 	sts	0x016A, r28

  cap.cpre = -12;			// cap.cval unit is pF 
    2c10:	84 ef       	ldi	r24, 0xF4	; 244
    2c12:	80 93 74 01 	sts	0x0174, r24
  if (ovcnt16 > 65) {
    2c16:	80 91 4d 01 	lds	r24, 0x014D
    2c1a:	90 91 4e 01 	lds	r25, 0x014E
    2c1e:	82 34       	cpi	r24, 0x42	; 66
    2c20:	91 05       	cpc	r25, r1
    2c22:	c8 f0       	brcs	.+50     	; 0x2c56 <ReadCapacity+0x3d0>
     cap.cval_uncorrected.dw /= 100;	// switch to next unit
    2c24:	60 91 6a 01 	lds	r22, 0x016A
    2c28:	70 91 6b 01 	lds	r23, 0x016B
    2c2c:	80 91 6c 01 	lds	r24, 0x016C
    2c30:	90 91 6d 01 	lds	r25, 0x016D
    2c34:	24 e6       	ldi	r18, 0x64	; 100
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	40 e0       	ldi	r20, 0x00	; 0
    2c3a:	50 e0       	ldi	r21, 0x00	; 0
    2c3c:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
    2c40:	20 93 6a 01 	sts	0x016A, r18
    2c44:	30 93 6b 01 	sts	0x016B, r19
    2c48:	40 93 6c 01 	sts	0x016C, r20
    2c4c:	50 93 6d 01 	sts	0x016D, r21
     cap.cpre += 2;			// set unit, prevent overflow
    2c50:	86 ef       	ldi	r24, 0xF6	; 246
    2c52:	80 93 74 01 	sts	0x0174, r24
  }
  cap.cval_uncorrected.dw *= RHmultip;		// 708
    2c56:	60 91 00 01 	lds	r22, 0x0100
    2c5a:	70 91 01 01 	lds	r23, 0x0101
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	20 91 6a 01 	lds	r18, 0x016A
    2c66:	30 91 6b 01 	lds	r19, 0x016B
    2c6a:	40 91 6c 01 	lds	r20, 0x016C
    2c6e:	50 91 6d 01 	lds	r21, 0x016D
    2c72:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
  cap.cval_uncorrected.dw /= (F_CPU / 10000);	// divide by 100 (@ 1MHz clock), 800 (@ 8MHz clock)
    2c76:	20 e2       	ldi	r18, 0x20	; 32
    2c78:	33 e0       	ldi	r19, 0x03	; 3
    2c7a:	40 e0       	ldi	r20, 0x00	; 0
    2c7c:	50 e0       	ldi	r21, 0x00	; 0
    2c7e:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
    2c82:	20 93 6a 01 	sts	0x016A, r18
    2c86:	30 93 6b 01 	sts	0x016B, r19
    2c8a:	40 93 6c 01 	sts	0x016C, r20
    2c8e:	50 93 6d 01 	sts	0x016D, r21
  cap.cval = cap.cval_uncorrected.dw;		// set the corrected cap.cval
    2c92:	e2 e6       	ldi	r30, 0x62	; 98
    2c94:	f1 e0       	ldi	r31, 0x01	; 1
    2c96:	20 93 62 01 	sts	0x0162, r18
    2c9a:	31 83       	std	Z+1, r19	; 0x01
    2c9c:	42 83       	std	Z+2, r20	; 0x02
    2c9e:	53 83       	std	Z+3, r21	; 0x03
  Scale_C_with_vcc();
    2ca0:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <Scale_C_with_vcc>
  if (cap.cpre == -12) {
    2ca4:	80 91 74 01 	lds	r24, 0x0174
    2ca8:	84 3f       	cpi	r24, 0xF4	; 244
    2caa:	09 f0       	breq	.+2      	; 0x2cae <ReadCapacity+0x428>
    2cac:	55 c0       	rjmp	.+170    	; 0x2d58 <ReadCapacity+0x4d2>
#if COMP_SLEW1 > COMP_SLEW2
     if (cap.cval < COMP_SLEW1) {
    2cae:	c0 90 62 01 	lds	r12, 0x0162
    2cb2:	d0 90 63 01 	lds	r13, 0x0163
    2cb6:	e0 90 64 01 	lds	r14, 0x0164
    2cba:	f0 90 65 01 	lds	r15, 0x0165
    2cbe:	40 ea       	ldi	r20, 0xA0	; 160
    2cc0:	c4 16       	cp	r12, r20
    2cc2:	4f e0       	ldi	r20, 0x0F	; 15
    2cc4:	d4 06       	cpc	r13, r20
    2cc6:	40 e0       	ldi	r20, 0x00	; 0
    2cc8:	e4 06       	cpc	r14, r20
    2cca:	40 e0       	ldi	r20, 0x00	; 0
    2ccc:	f4 06       	cpc	r15, r20
    2cce:	c0 f4       	brcc	.+48     	; 0x2d00 <ReadCapacity+0x47a>
        // add slew rate dependent offset
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
    2cd0:	a7 01       	movw	r20, r14
    2cd2:	96 01       	movw	r18, r12
    2cd4:	24 52       	subi	r18, 0x24	; 36
    2cd6:	3f 4f       	sbci	r19, 0xFF	; 255
    2cd8:	4f 4f       	sbci	r20, 0xFF	; 255
    2cda:	5f 4f       	sbci	r21, 0xFF	; 255
    2cdc:	60 ea       	ldi	r22, 0xA0	; 160
    2cde:	7f e0       	ldi	r23, 0x0F	; 15
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
    2ce8:	2c 0d       	add	r18, r12
    2cea:	3d 1d       	adc	r19, r13
    2cec:	4e 1d       	adc	r20, r14
    2cee:	5f 1d       	adc	r21, r15
    2cf0:	20 93 62 01 	sts	0x0162, r18
    2cf4:	30 93 63 01 	sts	0x0163, r19
    2cf8:	40 93 64 01 	sts	0x0164, r20
    2cfc:	50 93 65 01 	sts	0x0165, r21
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2d00:	80 91 4c 01 	lds	r24, 0x014C
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	81 56       	subi	r24, 0x61	; 97
    2d08:	9e 4f       	sbci	r25, 0xFE	; 254
    2d0a:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__eerd_byte_m168>
     if (cap.cval > tmpint) {
    2d0e:	20 91 62 01 	lds	r18, 0x0162
    2d12:	30 91 63 01 	lds	r19, 0x0163
    2d16:	40 91 64 01 	lds	r20, 0x0164
    2d1a:	50 91 65 01 	lds	r21, 0x0165
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
     if (cap.cval > tmpint) {
    2d20:	a0 e0       	ldi	r26, 0x00	; 0
    2d22:	b0 e0       	ldi	r27, 0x00	; 0
    2d24:	82 17       	cp	r24, r18
    2d26:	93 07       	cpc	r25, r19
    2d28:	a4 07       	cpc	r26, r20
    2d2a:	b5 07       	cpc	r27, r21
    2d2c:	68 f4       	brcc	.+26     	; 0x2d48 <ReadCapacity+0x4c2>
         cap.cval -= tmpint;		//subtract zero offset (pF)
    2d2e:	28 1b       	sub	r18, r24
    2d30:	39 0b       	sbc	r19, r25
    2d32:	4a 0b       	sbc	r20, r26
    2d34:	5b 0b       	sbc	r21, r27
    2d36:	20 93 62 01 	sts	0x0162, r18
    2d3a:	30 93 63 01 	sts	0x0163, r19
    2d3e:	40 93 64 01 	sts	0x0164, r20
    2d42:	50 93 65 01 	sts	0x0165, r21
    2d46:	08 c0       	rjmp	.+16     	; 0x2d58 <ReadCapacity+0x4d2>
     } else {
         cap.cval = 0;			//unsigned long may not reach negativ value
    2d48:	10 92 62 01 	sts	0x0162, r1
    2d4c:	10 92 63 01 	sts	0x0163, r1
    2d50:	10 92 64 01 	sts	0x0164, r1
    2d54:	10 92 65 01 	sts	0x0165, r1
  lcd_testpin(HighPin);
  lcd_space();
  DisplayValue(cap.cval,cap.cpre,'F',4);
  wait_about3s();
#endif
  R_DDR = HiPinR_L; 		//switch R_L for High-Pin to GND
    2d58:	a4 b8       	out	0x04, r10	; 4
#if F_CPU < 2000001
   if(cap.cval < 50)
#else 
   if(cap.cval < 25)
    2d5a:	80 91 62 01 	lds	r24, 0x0162
    2d5e:	90 91 63 01 	lds	r25, 0x0163
    2d62:	a0 91 64 01 	lds	r26, 0x0164
    2d66:	b0 91 65 01 	lds	r27, 0x0165
    2d6a:	89 31       	cpi	r24, 0x19	; 25
    2d6c:	91 05       	cpc	r25, r1
    2d6e:	a1 05       	cpc	r26, r1
    2d70:	b1 05       	cpc	r27, r1
    2d72:	08 f4       	brcc	.+2      	; 0x2d76 <ReadCapacity+0x4f0>
    2d74:	3f c0       	rjmp	.+126    	; 0x2df4 <ReadCapacity+0x56e>
#endif
      goto keinC;	//capacity to low, < 50pF @1MHz (25pF @8MHz)
   }
   // end low capacity 
checkDiodes:
   if((NumOfDiodes > 0)  && (PartFound != PART_FET)) {
    2d76:	80 91 05 01 	lds	r24, 0x0105
    2d7a:	88 23       	and	r24, r24
    2d7c:	21 f0       	breq	.+8      	; 0x2d86 <ReadCapacity+0x500>
    2d7e:	80 91 07 01 	lds	r24, 0x0107
    2d82:	83 30       	cpi	r24, 0x03	; 3
    2d84:	b9 f5       	brne	.+110    	; 0x2df4 <ReadCapacity+0x56e>
      wait_about1s();
#endif
      // nearly shure, that there is one or more diodes in reverse direction,
      // which would be wrongly detected as capacitor 
   } else {
      PartFound = PART_CAPACITOR;	//capacitor is found
    2d86:	87 e0       	ldi	r24, 0x07	; 7
    2d88:	80 93 07 01 	sts	0x0107, r24
      if ((cap.cpre > cap.cpre_max) || ((cap.cpre == cap.cpre_max) && (cap.cval > cap.cval_max))) {
    2d8c:	60 91 74 01 	lds	r22, 0x0174
    2d90:	80 91 75 01 	lds	r24, 0x0175
    2d94:	86 17       	cp	r24, r22
    2d96:	bc f0       	brlt	.+46     	; 0x2dc6 <ReadCapacity+0x540>
    2d98:	68 17       	cp	r22, r24
    2d9a:	61 f5       	brne	.+88     	; 0x2df4 <ReadCapacity+0x56e>
    2d9c:	20 91 62 01 	lds	r18, 0x0162
    2da0:	30 91 63 01 	lds	r19, 0x0163
    2da4:	40 91 64 01 	lds	r20, 0x0164
    2da8:	50 91 65 01 	lds	r21, 0x0165
    2dac:	80 91 66 01 	lds	r24, 0x0166
    2db0:	90 91 67 01 	lds	r25, 0x0167
    2db4:	a0 91 68 01 	lds	r26, 0x0168
    2db8:	b0 91 69 01 	lds	r27, 0x0169
    2dbc:	82 17       	cp	r24, r18
    2dbe:	93 07       	cpc	r25, r19
    2dc0:	a4 07       	cpc	r26, r20
    2dc2:	b5 07       	cpc	r27, r21
    2dc4:	b8 f4       	brcc	.+46     	; 0x2df4 <ReadCapacity+0x56e>
         // we have found a greater one
         cap.cval_max = cap.cval;
    2dc6:	e2 e6       	ldi	r30, 0x62	; 98
    2dc8:	f1 e0       	ldi	r31, 0x01	; 1
    2dca:	80 91 62 01 	lds	r24, 0x0162
    2dce:	90 91 63 01 	lds	r25, 0x0163
    2dd2:	a0 91 64 01 	lds	r26, 0x0164
    2dd6:	b0 91 65 01 	lds	r27, 0x0165
    2dda:	80 93 66 01 	sts	0x0166, r24
    2dde:	90 93 67 01 	sts	0x0167, r25
    2de2:	a0 93 68 01 	sts	0x0168, r26
    2de6:	b0 93 69 01 	sts	0x0169, r27
         cap.cpre_max = cap.cpre;
    2dea:	63 8b       	std	Z+19, r22	; 0x13
#if FLASHEND > 0x1fff
         cap.v_loss = vloss;		// lost voltage in 0.01%
    2dec:	97 86       	std	Z+15, r9	; 0x0f
    2dee:	86 86       	std	Z+14, r8	; 0x0e
#endif
         cap.ca = LowPin;		// save LowPin
    2df0:	70 8a       	std	Z+16, r7	; 0x10
         cap.cb = HighPin;		// save HighPin
    2df2:	11 8b       	std	Z+17, r17	; 0x11
keinC:
  // discharge capacitor again
//  EntladePins();		// discharge capacitors
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    2df4:	88 e0       	ldi	r24, 0x08	; 8
    2df6:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    2df8:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    2dfa:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    2dfc:	15 b8       	out	0x05, r1	; 5
  return;
 } // end ReadCapacity()
    2dfe:	df 91       	pop	r29
    2e00:	cf 91       	pop	r28
    2e02:	1f 91       	pop	r17
    2e04:	0f 91       	pop	r16
    2e06:	ff 90       	pop	r15
    2e08:	ef 90       	pop	r14
    2e0a:	df 90       	pop	r13
    2e0c:	cf 90       	pop	r12
    2e0e:	bf 90       	pop	r11
    2e10:	af 90       	pop	r10
    2e12:	9f 90       	pop	r9
    2e14:	8f 90       	pop	r8
    2e16:	7f 90       	pop	r7
    2e18:	08 95       	ret

00002e1a <__vector_13>:
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
}
#ifndef INHIBIT_SLEEP_MODE
/* Interrupt Service Routine for timer1 Overflow */
 ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    2e1a:	1f 92       	push	r1
    2e1c:	0f 92       	push	r0
    2e1e:	0f b6       	in	r0, 0x3f	; 63
    2e20:	0f 92       	push	r0
    2e22:	11 24       	eor	r1, r1
    2e24:	8f 93       	push	r24
    2e26:	9f 93       	push	r25
 if ((!(TI1_INT_FLAGS & (1<<ICF1)) && (unfinished !=0)) || ((TI1_INT_FLAGS & (1<<ICF1)) && (ICR1 < 250))) {
    2e28:	b5 99       	sbic	0x16, 5	; 22
    2e2a:	04 c0       	rjmp	.+8      	; 0x2e34 <__vector_13+0x1a>
    2e2c:	80 91 61 01 	lds	r24, 0x0161
    2e30:	88 23       	and	r24, r24
    2e32:	49 f4       	brne	.+18     	; 0x2e46 <__vector_13+0x2c>
    2e34:	b5 9b       	sbis	0x16, 5	; 22
    2e36:	10 c0       	rjmp	.+32     	; 0x2e58 <__vector_13+0x3e>
    2e38:	80 91 86 00 	lds	r24, 0x0086
    2e3c:	90 91 87 00 	lds	r25, 0x0087
    2e40:	8a 3f       	cpi	r24, 0xFA	; 250
    2e42:	91 05       	cpc	r25, r1
    2e44:	48 f4       	brcc	.+18     	; 0x2e58 <__vector_13+0x3e>
    // Capture Event not pending or (Capture Event pending and ICR1 < 250
    // the ICR1H is buffered and can not examined alone, we must read the ICR1L first (with ICR1 access) !
   ovcnt16++;				// count Overflow
    2e46:	80 91 4d 01 	lds	r24, 0x014D
    2e4a:	90 91 4e 01 	lds	r25, 0x014E
    2e4e:	01 96       	adiw	r24, 0x01	; 1
    2e50:	90 93 4e 01 	sts	0x014E, r25
    2e54:	80 93 4d 01 	sts	0x014D, r24
 }
}
    2e58:	9f 91       	pop	r25
    2e5a:	8f 91       	pop	r24
    2e5c:	0f 90       	pop	r0
    2e5e:	0f be       	out	0x3f, r0	; 63
    2e60:	0f 90       	pop	r0
    2e62:	1f 90       	pop	r1
    2e64:	18 95       	reti

00002e66 <__vector_10>:
/* Interrupt Service Routine for timer1 capture event (Comparator) */
 ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    2e66:	1f 92       	push	r1
    2e68:	0f 92       	push	r0
    2e6a:	0f b6       	in	r0, 0x3f	; 63
    2e6c:	0f 92       	push	r0
    2e6e:	11 24       	eor	r1, r1
    2e70:	8f 93       	push	r24
    2e72:	9f 93       	push	r25
 unfinished = 0;			// clear unfinished flag
    2e74:	10 92 61 01 	sts	0x0161, r1
 // With unfinished set to 0, we prevent further counting the Overflow.s
 // Is already a Overflow detected?
 if((TI1_INT_FLAGS & (1<<TOV1))) {	// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    2e78:	b0 9b       	sbis	0x16, 0	; 22
    2e7a:	10 c0       	rjmp	.+32     	; 0x2e9c <__vector_10+0x36>
   //there is already a Overflow detected, before or after the capture event?
   // ICR1H is buffered and can not examined alone, we must read the ICR1L first (with ICR1 access) !
   if (ICR1 < 250) {
    2e7c:	80 91 86 00 	lds	r24, 0x0086
    2e80:	90 91 87 00 	lds	r25, 0x0087
    2e84:	8a 3f       	cpi	r24, 0xFA	; 250
    2e86:	91 05       	cpc	r25, r1
    2e88:	48 f4       	brcc	.+18     	; 0x2e9c <__vector_10+0x36>
     //  Yes, Input Capture Counter is low, Overflow has occured before the capture event
     ovcnt16++;				// count Overflow
    2e8a:	80 91 4d 01 	lds	r24, 0x014D
    2e8e:	90 91 4e 01 	lds	r25, 0x014E
    2e92:	01 96       	adiw	r24, 0x01	; 1
    2e94:	90 93 4e 01 	sts	0x014E, r25
    2e98:	80 93 4d 01 	sts	0x014D, r24
   }
 }
}
    2e9c:	9f 91       	pop	r25
    2e9e:	8f 91       	pop	r24
    2ea0:	0f 90       	pop	r0
    2ea2:	0f be       	out	0x3f, r0	; 63
    2ea4:	0f 90       	pop	r0
    2ea6:	1f 90       	pop	r1
    2ea8:	18 95       	reti

00002eaa <get_log>:
 } // end ReadInductance()


#if FLASHEND > 0x1fff
// get_log interpolate a table with the function -log(1 - (permil/1000))
uint16_t get_log(uint16_t permil) {
    2eaa:	cf 93       	push	r28
    2eac:	df 93       	push	r29
  uint16_t y1, y2;			// table values
  uint16_t result;			// result of interpolation
  uint8_t tabind;			// index to table value
  uint8_t tabres;			// distance to lower table value, fraction of Log_Tab_Distance

  tabind = permil / Log_Tab_Distance;	// index to table
    2eae:	24 e1       	ldi	r18, 0x14	; 20
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	b9 01       	movw	r22, r18
    2eb4:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <__udivmodhi4>
    2eb8:	dc 01       	movw	r26, r24
  tabres = permil % Log_Tab_Distance;	// fraction of table distance
  // interpolate the table of factors
  y1 = pgm_read_word(&LogTab[tabind]);	// get the lower table value
    2eba:	70 e0       	ldi	r23, 0x00	; 0
    2ebc:	fb 01       	movw	r30, r22
    2ebe:	ee 0f       	add	r30, r30
    2ec0:	ff 1f       	adc	r31, r31
    2ec2:	e8 59       	subi	r30, 0x98	; 152
    2ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec6:	c5 91       	lpm	r28, Z+
    2ec8:	d4 91       	lpm	r29, Z+
  y2 = pgm_read_word(&LogTab[tabind+1]); // get the higher table value
    2eca:	fb 01       	movw	r30, r22
    2ecc:	ee 0f       	add	r30, r30
    2ece:	ff 1f       	adc	r31, r31
    2ed0:	e6 59       	subi	r30, 0x96	; 150
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	45 91       	lpm	r20, Z+
    2ed6:	54 91       	lpm	r21, Z+
  result = ((y2 - y1) * tabres ) / Log_Tab_Distance + y1; // interpolate
    2ed8:	4c 1b       	sub	r20, r28
    2eda:	5d 0b       	sbc	r21, r29
    2edc:	4a 9f       	mul	r20, r26
    2ede:	c0 01       	movw	r24, r0
    2ee0:	4b 9f       	mul	r20, r27
    2ee2:	90 0d       	add	r25, r0
    2ee4:	5a 9f       	mul	r21, r26
    2ee6:	90 0d       	add	r25, r0
    2ee8:	11 24       	eor	r1, r1
    2eea:	b9 01       	movw	r22, r18
    2eec:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <__udivmodhi4>
    2ef0:	6c 0f       	add	r22, r28
    2ef2:	7d 1f       	adc	r23, r29
  return(result);
 }
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	df 91       	pop	r29
    2ef8:	cf 91       	pop	r28
    2efa:	08 95       	ret

00002efc <ReadInductance>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadInductance(void) {
    2efc:	2f 92       	push	r2
    2efe:	3f 92       	push	r3
    2f00:	4f 92       	push	r4
    2f02:	5f 92       	push	r5
    2f04:	6f 92       	push	r6
    2f06:	7f 92       	push	r7
    2f08:	8f 92       	push	r8
    2f0a:	9f 92       	push	r9
    2f0c:	af 92       	push	r10
    2f0e:	bf 92       	push	r11
    2f10:	cf 92       	push	r12
    2f12:	df 92       	push	r13
    2f14:	ef 92       	push	r14
    2f16:	ff 92       	push	r15
    2f18:	0f 93       	push	r16
    2f1a:	1f 93       	push	r17
    2f1c:	df 93       	push	r29
    2f1e:	cf 93       	push	r28
    2f20:	cd b7       	in	r28, 0x3d	; 61
    2f22:	de b7       	in	r29, 0x3e	; 62
    2f24:	68 97       	sbiw	r28, 0x18	; 24
    2f26:	0f b6       	in	r0, 0x3f	; 63
    2f28:	f8 94       	cli
    2f2a:	de bf       	out	0x3e, r29	; 62
    2f2c:	0f be       	out	0x3f, r0	; 63
    2f2e:	cd bf       	out	0x3d, r28	; 61
  int8_t ukorr;		// correction of comparator voltage
  uint8_t nr_pol1;	// number of successfull inductance measurement with polarity 1
  uint8_t nr_pol2;	// number of successfull inductance measurement with polarity 2


  if(PartFound != PART_RESISTOR) {
    2f30:	80 91 07 01 	lds	r24, 0x0107
    2f34:	86 30       	cpi	r24, 0x06	; 6
    2f36:	09 f0       	breq	.+2      	; 0x2f3a <ReadInductance+0x3e>
    2f38:	4b c2       	rjmp	.+1174   	; 0x33d0 <ReadInductance+0x4d4>
     return;	//We have found no resistor  
  }
  if (ResistorsFound != 1) {
    2f3a:	80 91 5e 01 	lds	r24, 0x015E
    2f3e:	81 30       	cpi	r24, 0x01	; 1
    2f40:	09 f0       	breq	.+2      	; 0x2f44 <ReadInductance+0x48>
    2f42:	46 c2       	rjmp	.+1164   	; 0x33d0 <ReadInductance+0x4d4>
     return;	// do not search for inductance, more than 1 resistor
  }
//  for (found=0;found<ResistorsFound;found++) {
//     if (resis[found].rx > 21000) continue;
     if (resis[found].rx > 21000) return;
    2f44:	80 91 18 01 	lds	r24, 0x0118
    2f48:	90 91 19 01 	lds	r25, 0x0119
    2f4c:	a0 91 1a 01 	lds	r26, 0x011A
    2f50:	b0 91 1b 01 	lds	r27, 0x011B
    2f54:	89 30       	cpi	r24, 0x09	; 9
    2f56:	22 e5       	ldi	r18, 0x52	; 82
    2f58:	92 07       	cpc	r25, r18
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	a2 07       	cpc	r26, r18
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	b2 07       	cpc	r27, r18
    2f62:	08 f0       	brcs	.+2      	; 0x2f66 <ReadInductance+0x6a>
    2f64:	35 c2       	rjmp	.+1130   	; 0x33d0 <ReadInductance+0x4d4>
    2f66:	99 24       	eor	r9, r9
    2f68:	80 91 21 01 	lds	r24, 0x0121
    2f6c:	40 90 22 01 	lds	r4, 0x0122

     // we can check for Inductance, if resistance is below 2100 Ohm
     for (count=0;count<4;count++) {
        // Try four times (different direction and with delayed counter start)
        if (count < 2) {
    2f70:	99 2d       	mov	r25, r9
    2f72:	92 30       	cpi	r25, 0x02	; 2
    2f74:	10 f4       	brcc	.+4      	; 0x2f7a <ReadInductance+0x7e>
           // first and second pass, direction 1
           LowPin = resis[found].ra;
    2f76:	88 2e       	mov	r8, r24
    2f78:	02 c0       	rjmp	.+4      	; 0x2f7e <ReadInductance+0x82>
           HighPin = resis[found].rb;
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    2f7a:	84 2c       	mov	r8, r4
           HighPin = resis[found].ra;
    2f7c:	48 2e       	mov	r4, r24
        }
        HiADC = pgm_read_byte(&PinADCtab[HighPin]);
    2f7e:	e4 2d       	mov	r30, r4
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	ed 5f       	subi	r30, 0xFD	; 253
    2f84:	fe 4f       	sbci	r31, 0xFE	; 254
    2f86:	24 91       	lpm	r18, Z+
        LoPinR_L = pgm_read_byte(&PinRLtab[LowPin]);	//R_L mask for HighPin R_L load
    2f88:	e8 2d       	mov	r30, r8
    2f8a:	f0 e0       	ldi	r31, 0x00	; 0
    2f8c:	e0 50       	subi	r30, 0x00	; 0
    2f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f90:	e4 91       	lpm	r30, Z+
        //==================================================================================
        // Measurement of Inductance values
        R_PORT = 0;		// switch R port to GND
    2f92:	15 b8       	out	0x05, r1	; 5
        ADC_PORT =   TXD_VAL;		// switch ADC-Port to GND
    2f94:	a8 e0       	ldi	r26, 0x08	; 8
    2f96:	a8 b9       	out	0x08, r26	; 8
        if ((resis[found].rx < 240) && ((count & 0x01) == 0)) {
    2f98:	80 91 18 01 	lds	r24, 0x0118
    2f9c:	90 91 19 01 	lds	r25, 0x0119
    2fa0:	a0 91 1a 01 	lds	r26, 0x011A
    2fa4:	b0 91 1b 01 	lds	r27, 0x011B
    2fa8:	80 3f       	cpi	r24, 0xF0	; 240
    2faa:	91 05       	cpc	r25, r1
    2fac:	a1 05       	cpc	r26, r1
    2fae:	b1 05       	cpc	r27, r1
    2fb0:	b8 f4       	brcc	.+46     	; 0x2fe0 <ReadInductance+0xe4>
    2fb2:	90 fc       	sbrc	r9, 0
    2fb4:	15 c0       	rjmp	.+42     	; 0x2fe0 <ReadInductance+0xe4>
           // we can use PinR_L for measurement
           mess_r = RR680MI - R_L_VAL;			// use only pin output resistance
    2fb6:	a0 90 02 01 	lds	r10, 0x0102
    2fba:	b0 90 03 01 	lds	r11, 0x0103
    2fbe:	80 e7       	ldi	r24, 0x70	; 112
    2fc0:	95 ee       	ldi	r25, 0xE5	; 229
    2fc2:	a8 0e       	add	r10, r24
    2fc4:	b9 1e       	adc	r11, r25
           ADC_DDR = HiADC | (1<<LowPin) | TXD_MSK;	// switch HiADC and Low Pin to GND, 
    2fc6:	32 2f       	mov	r19, r18
    2fc8:	38 60       	ori	r19, 0x08	; 8
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	08 2c       	mov	r0, r8
    2fd0:	02 c0       	rjmp	.+4      	; 0x2fd6 <ReadInductance+0xda>
    2fd2:	88 0f       	add	r24, r24
    2fd4:	99 1f       	adc	r25, r25
    2fd6:	0a 94       	dec	r0
    2fd8:	e2 f7       	brpl	.-8      	; 0x2fd2 <ReadInductance+0xd6>
    2fda:	38 2b       	or	r19, r24
    2fdc:	37 b9       	out	0x07, r19	; 7
    2fde:	08 c0       	rjmp	.+16     	; 0x2ff0 <ReadInductance+0xf4>
        } else {
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
    2fe0:	e4 b9       	out	0x04, r30	; 4
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
    2fe2:	82 2f       	mov	r24, r18
    2fe4:	88 60       	ori	r24, 0x08	; 8
    2fe6:	87 b9       	out	0x07, r24	; 7
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
    2fe8:	a0 90 02 01 	lds	r10, 0x0102
    2fec:	b0 90 03 01 	lds	r11, 0x0103
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    2ff2:	88 2d       	mov	r24, r8
    2ff4:	28 8f       	std	Y+24, r18	; 0x18
    2ff6:	3f 8b       	std	Y+23, r19	; 0x17
    2ff8:	0e 94 07 1a 	call	0x340e	; 0x340e <W10msReadADC>
    2ffc:	6c 01       	movw	r12, r24
            total_r =  ReadADC(HighPin);
    2ffe:	84 2d       	mov	r24, r4
    3000:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
    3004:	ac 01       	movw	r20, r24
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    3006:	28 8d       	ldd	r18, Y+24	; 0x18
    3008:	3f 89       	ldd	r19, Y+23	; 0x17
    300a:	92 e0       	ldi	r25, 0x02	; 2
    300c:	c9 16       	cp	r12, r25
    300e:	d1 04       	cpc	r13, r1
    3010:	18 f4       	brcc	.+6      	; 0x3018 <ReadInductance+0x11c>
    3012:	42 30       	cpi	r20, 0x02	; 2
    3014:	51 05       	cpc	r21, r1
    3016:	18 f0       	brcs	.+6      	; 0x301e <ReadInductance+0x122>
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    3018:	3f 5f       	subi	r19, 0xFF	; 255
    301a:	34 31       	cpi	r19, 0x14	; 20
    301c:	51 f7       	brne	.-44     	; 0x2ff2 <ReadInductance+0xf6>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
        // setup Analog Comparator
        ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    301e:	a0 e4       	ldi	r26, 0x40	; 64
    3020:	a0 93 7b 00 	sts	0x007B, r26
        ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    3024:	b4 e5       	ldi	r27, 0x54	; 84
    3026:	b0 bf       	out	0x30, r27	; 48
        ADMUX = (1<<REFS0) | LowPin;			// switch Mux to Low-Pin
    3028:	88 2d       	mov	r24, r8
    302a:	80 64       	ori	r24, 0x40	; 64
    302c:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    3030:	86 e1       	ldi	r24, 0x16	; 22
    3032:	80 93 7a 00 	sts	0x007A, r24
   
      // setup Counter1
        timeconstant.w[1] = 0;		// set ov counter to 0
    3036:	00 e0       	ldi	r16, 0x00	; 0
    3038:	10 e0       	ldi	r17, 0x00	; 0
        TCCR1A = 0;			// set Counter1 to normal Mode
    303a:	10 92 80 00 	sts	0x0080, r1
        TCNT1 = 0;			//set Counter to 0
    303e:	10 92 85 00 	sts	0x0085, r1
    3042:	10 92 84 00 	sts	0x0084, r1
        TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// reset TIFR or TIFR1
    3046:	97 e2       	ldi	r25, 0x27	; 39
    3048:	96 bb       	out	0x16, r25	; 22
        HiADC |= TXD_VAL;
    304a:	28 60       	ori	r18, 0x08	; 8
        wait200us();			// wait for bandgap to start up
    304c:	28 8f       	std	Y+24, r18	; 0x18
    304e:	0e 94 9b 13 	call	0x2736	; 0x2736 <wait200us>
        if ((count & 0x01) == 0 ) {
    3052:	29 2c       	mov	r2, r9
    3054:	33 24       	eor	r3, r3
    3056:	d1 01       	movw	r26, r2
    3058:	a1 70       	andi	r26, 0x01	; 1
    305a:	b0 70       	andi	r27, 0x00	; 0
    305c:	ba 8b       	std	Y+18, r27	; 0x12
    305e:	a9 8b       	std	Y+17, r26	; 0x11
    3060:	28 8d       	ldd	r18, Y+24	; 0x18
    3062:	90 fc       	sbrc	r9, 0
    3064:	05 c0       	rjmp	.+10     	; 0x3070 <ReadInductance+0x174>
           //first start counter, then start current
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    3066:	b1 e8       	ldi	r27, 0x81	; 129
    3068:	b0 93 81 00 	sts	0x0081, r27
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    306c:	28 b9       	out	0x08, r18	; 8
    306e:	08 c0       	rjmp	.+16     	; 0x3080 <ReadInductance+0x184>
        } else {
           //first start current, then start counter with delay
           //parasitic capacity of coil can cause high current at the beginning
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    3070:	28 b9       	out	0x08, r18	; 8
      #if F_CPU >= 8000000UL
           wait3us();		// ignore current peak from capacity
    3072:	0e 94 a4 13 	call	0x2748	; 0x2748 <wait3us>
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
    3076:	20 e2       	ldi	r18, 0x20	; 32
    3078:	26 bb       	out	0x16, r18	; 22
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    307a:	81 e8       	ldi	r24, 0x81	; 129
    307c:	80 93 81 00 	sts	0x0081, r24
    3080:	c8 01       	movw	r24, r16
        }
      
      //******************************
        while(1) {
           // Wait, until  Input Capture is set
           ii = TI1_INT_FLAGS;		//read Timer flags
    3082:	46 b3       	in	r20, 0x16	; 22
           if (ii & (1<<ICF1))  {
    3084:	45 ff       	sbrs	r20, 5
    3086:	02 c0       	rjmp	.+4      	; 0x308c <ReadInductance+0x190>
    3088:	8c 01       	movw	r16, r24
    308a:	0b c0       	rjmp	.+22     	; 0x30a2 <ReadInductance+0x1a6>
              break;
           }
           if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    308c:	40 ff       	sbrs	r20, 0
    308e:	f9 cf       	rjmp	.-14     	; 0x3082 <ReadInductance+0x186>
              TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    3090:	a1 e0       	ldi	r26, 0x01	; 1
    3092:	a6 bb       	out	0x16, r26	; 22
              wdt_reset();
    3094:	a8 95       	wdr
    3096:	01 96       	adiw	r24, 0x01	; 1
              timeconstant.w[1]++;		// count one OV
              if(timeconstant.w[1] == (F_CPU/100000UL)) {
    3098:	80 35       	cpi	r24, 0x50	; 80
    309a:	91 05       	cpc	r25, r1
    309c:	91 f7       	brne	.-28     	; 0x3082 <ReadInductance+0x186>
    309e:	00 e5       	ldi	r16, 0x50	; 80
    30a0:	10 e0       	ldi	r17, 0x00	; 0
                 break; 	//Timeout for Charging, above 0.13 s
              }
           }
        }
        TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    30a2:	10 92 81 00 	sts	0x0081, r1
        TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    30a6:	b0 e2       	ldi	r27, 0x20	; 32
    30a8:	b6 bb       	out	0x16, r27	; 22
        timeconstant.w[0] = ICR1;		// get previous Input Capture Counter flag
    30aa:	20 91 86 00 	lds	r18, 0x0086
    30ae:	30 91 87 00 	lds	r19, 0x0087
    30b2:	79 01       	movw	r14, r18
      // check actual counter, if an additional overflow must be added
        if((TCNT1 > timeconstant.w[0]) && (ii & (1<<TOV1))) {
    30b4:	80 91 84 00 	lds	r24, 0x0084
    30b8:	90 91 85 00 	lds	r25, 0x0085
    30bc:	28 17       	cp	r18, r24
    30be:	39 07       	cpc	r19, r25
    30c0:	30 f4       	brcc	.+12     	; 0x30ce <ReadInductance+0x1d2>
    30c2:	40 ff       	sbrs	r20, 0
    30c4:	04 c0       	rjmp	.+8      	; 0x30ce <ReadInductance+0x1d2>
           // this OV was not counted, but was before the Input Capture
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    30c6:	21 e0       	ldi	r18, 0x01	; 1
    30c8:	26 bb       	out	0x16, r18	; 22
           timeconstant.w[1]++;			// count one additional OV
    30ca:	0f 5f       	subi	r16, 0xFF	; 255
    30cc:	1f 4f       	sbci	r17, 0xFF	; 255
        }

        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    30ce:	88 e0       	ldi	r24, 0x08	; 8
    30d0:	88 b9       	out	0x08, r24	; 8
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    30d2:	96 e9       	ldi	r25, 0x96	; 150
    30d4:	90 93 7a 00 	sts	0x007A, r25
        for (ii=0;ii<20;ii++) {
    30d8:	20 e0       	ldi	r18, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    30da:	88 2d       	mov	r24, r8
    30dc:	28 8f       	std	Y+24, r18	; 0x18
    30de:	0e 94 07 1a 	call	0x340e	; 0x340e <W10msReadADC>
    30e2:	6c 01       	movw	r12, r24
            total_r =  ReadADC(HighPin);
    30e4:	84 2d       	mov	r24, r4
    30e6:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    30ea:	28 8d       	ldd	r18, Y+24	; 0x18
    30ec:	a2 e0       	ldi	r26, 0x02	; 2
    30ee:	ca 16       	cp	r12, r26
    30f0:	d1 04       	cpc	r13, r1
    30f2:	18 f4       	brcc	.+6      	; 0x30fa <ReadInductance+0x1fe>
    30f4:	82 30       	cpi	r24, 0x02	; 2
    30f6:	91 05       	cpc	r25, r1
    30f8:	18 f0       	brcs	.+6      	; 0x3100 <ReadInductance+0x204>
           timeconstant.w[1]++;			// count one additional OV
        }

        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
        for (ii=0;ii<20;ii++) {
    30fa:	2f 5f       	subi	r18, 0xFF	; 255
    30fc:	24 31       	cpi	r18, 0x14	; 20
    30fe:	69 f7       	brne	.-38     	; 0x30da <ReadInductance+0x1de>
//  #undef CNT_ZERO_42
//  #undef CNT_ZERO_720
//  #define CNT_ZERO_42 7
//  #define CNT_ZERO_720 10
//#endif
        total_r = (mess_r + resis[found].rx + RRpinMI);
    3100:	c0 90 18 01 	lds	r12, 0x0118
    3104:	d0 90 19 01 	lds	r13, 0x0119
    3108:	80 91 47 01 	lds	r24, 0x0147
    310c:	90 91 48 01 	lds	r25, 0x0148
    3110:	c8 0e       	add	r12, r24
    3112:	d9 1e       	adc	r13, r25
    3114:	ca 0c       	add	r12, r10
    3116:	db 1c       	adc	r13, r11
//        if (total_r > 7000) cnt_diff = 1;
//        if (total_r > 14000) cnt_diff = 2;
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
        // Voltage of comparator in % of umax
     #ifdef AUTO_CAL
        tmpint = (ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset))) ;
    3118:	8d e9       	ldi	r24, 0x9D	; 157
    311a:	91 e0       	ldi	r25, 0x01	; 1
    311c:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <__eerd_word_m168>
    3120:	20 91 44 01 	lds	r18, 0x0144
    3124:	30 91 45 01 	lds	r19, 0x0145
    3128:	28 0f       	add	r18, r24
    312a:	39 1f       	adc	r19, r25
     #else
        tmpint = (ref_mv + REF_C_KORR);
     #endif
        if (mess_r < R_L_VAL) {
    312c:	b0 e9       	ldi	r27, 0x90	; 144
    312e:	ab 16       	cp	r10, r27
    3130:	ba e1       	ldi	r27, 0x1A	; 26
    3132:	bb 06       	cpc	r11, r27
    3134:	b8 f4       	brcc	.+46     	; 0x3164 <ReadInductance+0x268>
           // measurement without 680 Ohm
           cnt_diff = CNT_ZERO_42;
           if (timeconstant.dw < 225) {
    3136:	81 ee       	ldi	r24, 0xE1	; 225
    3138:	e8 16       	cp	r14, r24
    313a:	f1 04       	cpc	r15, r1
    313c:	01 05       	cpc	r16, r1
    313e:	11 05       	cpc	r17, r1
    3140:	38 f4       	brcc	.+14     	; 0x3150 <ReadInductance+0x254>
              ukorr = (timeconstant.w[0] / 5) - 20;
    3142:	c7 01       	movw	r24, r14
    3144:	65 e0       	ldi	r22, 0x05	; 5
    3146:	70 e0       	ldi	r23, 0x00	; 0
    3148:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <__udivmodhi4>
    314c:	64 51       	subi	r22, 0x14	; 20
    314e:	01 c0       	rjmp	.+2      	; 0x3152 <ReadInductance+0x256>
           } else {
              ukorr = 25;
    3150:	69 e1       	ldi	r22, 0x19	; 25
           }
           tmpint -= (((REF_L_KORR * 10) / 10) + ukorr);
    3152:	28 52       	subi	r18, 0x28	; 40
    3154:	30 40       	sbci	r19, 0x00	; 0
    3156:	77 27       	eor	r23, r23
    3158:	67 fd       	sbrc	r22, 7
    315a:	70 95       	com	r23
    315c:	26 1b       	sub	r18, r22
    315e:	37 0b       	sbc	r19, r23
     #else
        tmpint = (ref_mv + REF_C_KORR);
     #endif
        if (mess_r < R_L_VAL) {
           // measurement without 680 Ohm
           cnt_diff = CNT_ZERO_42;
    3160:	66 e0       	ldi	r22, 0x06	; 6
    3162:	08 c0       	rjmp	.+16     	; 0x3174 <ReadInductance+0x278>
//#endif
        total_r = (mess_r + resis[found].rx + RRpinMI);
//        cnt_diff = 0;
//        if (total_r > 7000) cnt_diff = 1;
//        if (total_r > 14000) cnt_diff = 2;
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
    3164:	c6 01       	movw	r24, r12
    3166:	60 eb       	ldi	r22, 0xB0	; 176
    3168:	76 e3       	ldi	r23, 0x36	; 54
    316a:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <__udivmodhi4>
           }
           tmpint -= (((REF_L_KORR * 10) / 10) + ukorr);
        } else {
           // measurement with 680 Ohm resistor
           // if 680 Ohm resistor is used, use REF_L_KORR for correction
           cnt_diff += CNT_ZERO_720;
    316e:	69 5f       	subi	r22, 0xF9	; 249
           tmpint += REF_L_KORR;
    3170:	28 5d       	subi	r18, 0xD8	; 216
    3172:	3f 4f       	sbci	r19, 0xFF	; 255
        }
        if (timeconstant.dw > cnt_diff) timeconstant.dw -= cnt_diff;
    3174:	70 e0       	ldi	r23, 0x00	; 0
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	6e 15       	cp	r22, r14
    317c:	7f 05       	cpc	r23, r15
    317e:	80 07       	cpc	r24, r16
    3180:	91 07       	cpc	r25, r17
    3182:	28 f4       	brcc	.+10     	; 0x318e <ReadInductance+0x292>
    3184:	e6 1a       	sub	r14, r22
    3186:	f7 0a       	sbc	r15, r23
    3188:	08 0b       	sbc	r16, r24
    318a:	19 0b       	sbc	r17, r25
    318c:	03 c0       	rjmp	.+6      	; 0x3194 <ReadInductance+0x298>
        else          timeconstant.dw = 0;
    318e:	ee 24       	eor	r14, r14
    3190:	ff 24       	eor	r15, r15
    3192:	87 01       	movw	r16, r14
       
        if ((count&0x01) == 1) {
    3194:	a9 89       	ldd	r26, Y+17	; 0x11
    3196:	ba 89       	ldd	r27, Y+18	; 0x12
    3198:	10 97       	sbiw	r26, 0x00	; 0
    319a:	41 f0       	breq	.+16     	; 0x31ac <ReadInductance+0x2b0>
           // second pass with delayed counter start
           timeconstant.dw += (3 * (F_CPU/1000000UL))+10;
    319c:	82 e2       	ldi	r24, 0x22	; 34
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	a0 e0       	ldi	r26, 0x00	; 0
    31a2:	b0 e0       	ldi	r27, 0x00	; 0
    31a4:	e8 0e       	add	r14, r24
    31a6:	f9 1e       	adc	r15, r25
    31a8:	0a 1f       	adc	r16, r26
    31aa:	1b 1f       	adc	r17, r27
        }
        if (timeconstant.w[1] >= (F_CPU/100000UL)) timeconstant.dw = 0; // no transition found
    31ac:	00 35       	cpi	r16, 0x50	; 80
    31ae:	11 05       	cpc	r17, r1
    31b0:	18 f0       	brcs	.+6      	; 0x31b8 <ReadInductance+0x2bc>
    31b2:	ee 24       	eor	r14, r14
    31b4:	ff 24       	eor	r15, r15
    31b6:	87 01       	movw	r16, r14
        if (timeconstant.dw > 10) {
    31b8:	9b e0       	ldi	r25, 0x0B	; 11
    31ba:	e9 16       	cp	r14, r25
    31bc:	f1 04       	cpc	r15, r1
    31be:	01 05       	cpc	r16, r1
    31c0:	11 05       	cpc	r17, r1
    31c2:	28 f0       	brcs	.+10     	; 0x31ce <ReadInductance+0x2d2>
           timeconstant.dw -= 1;
    31c4:	08 94       	sec
    31c6:	e1 08       	sbc	r14, r1
    31c8:	f1 08       	sbc	r15, r1
    31ca:	01 09       	sbc	r16, r1
    31cc:	11 09       	sbc	r17, r1
        }
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    31ce:	c6 01       	movw	r24, r12
    31d0:	a0 e0       	ldi	r26, 0x00	; 0
    31d2:	b0 e0       	ldi	r27, 0x00	; 0
    31d4:	8b 8b       	std	Y+19, r24	; 0x13
    31d6:	9c 8b       	std	Y+20, r25	; 0x14
    31d8:	ad 8b       	std	Y+21, r26	; 0x15
    31da:	be 8b       	std	Y+22, r27	; 0x16
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    31dc:	b9 01       	movw	r22, r18
    31de:	80 e0       	ldi	r24, 0x00	; 0
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	28 ee       	ldi	r18, 0xE8	; 232
    31e4:	33 e0       	ldi	r19, 0x03	; 3
    31e6:	40 e0       	ldi	r20, 0x00	; 0
    31e8:	50 e0       	ldi	r21, 0x00	; 0
    31ea:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
    31ee:	2b 01       	movw	r4, r22
    31f0:	3c 01       	movw	r6, r24
        if (timeconstant.w[1] >= (F_CPU/100000UL)) timeconstant.dw = 0; // no transition found
        if (timeconstant.dw > 10) {
           timeconstant.dw -= 1;
        }
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    31f2:	b5 01       	movw	r22, r10
    31f4:	80 e0       	ldi	r24, 0x00	; 0
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	20 91 40 01 	lds	r18, 0x0140
    31fc:	30 91 41 01 	lds	r19, 0x0141
    3200:	40 e0       	ldi	r20, 0x00	; 0
    3202:	50 e0       	ldi	r21, 0x00	; 0
    3204:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
    3208:	2b 89       	ldd	r18, Y+19	; 0x13
    320a:	3c 89       	ldd	r19, Y+20	; 0x14
    320c:	4d 89       	ldd	r20, Y+21	; 0x15
    320e:	5e 89       	ldd	r21, Y+22	; 0x16
    3210:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    3214:	40 e0       	ldi	r20, 0x00	; 0
    3216:	50 e0       	ldi	r21, 0x00	; 0
    3218:	c3 01       	movw	r24, r6
    321a:	b2 01       	movw	r22, r4
    321c:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
//        per_ref2 = (uint8_t)MEM2_read_byte(&LogTab[per_ref1]);	// -log(1 - per_ref1/100)
        per_ref2 = get_log(per_ref1);		// -log(1 - per_ref1/1000)
    3220:	c9 01       	movw	r24, r18
    3222:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <get_log>
    3226:	6c 01       	movw	r12, r24
          }
#endif
/* ********************************************************* */
        // lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    3228:	6b 89       	ldd	r22, Y+19	; 0x13
    322a:	7c 89       	ldd	r23, Y+20	; 0x14
    322c:	8d 89       	ldd	r24, Y+21	; 0x15
    322e:	9e 89       	ldd	r25, Y+22	; 0x16
    3230:	a8 01       	movw	r20, r16
    3232:	97 01       	movw	r18, r14
    3234:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
    3238:	2b 01       	movw	r4, r22
    323a:	3c 01       	movw	r6, r24
             wait_about2s();
          }
#endif
/* ********************************************************* */
        // lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
    323c:	b6 01       	movw	r22, r12
    323e:	80 e0       	ldi	r24, 0x00	; 0
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	e3 e0       	ldi	r30, 0x03	; 3
    3244:	66 0f       	add	r22, r22
    3246:	77 1f       	adc	r23, r23
    3248:	88 1f       	adc	r24, r24
    324a:	99 1f       	adc	r25, r25
    324c:	ea 95       	dec	r30
    324e:	d1 f7       	brne	.-12     	; 0x3244 <ReadInductance+0x348>
    3250:	6b 5f       	subi	r22, 0xFB	; 251
    3252:	7f 4f       	sbci	r23, 0xFF	; 255
    3254:	8f 4f       	sbci	r24, 0xFF	; 255
    3256:	9f 4f       	sbci	r25, 0xFF	; 255
    3258:	2a e0       	ldi	r18, 0x0A	; 10
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	40 e0       	ldi	r20, 0x00	; 0
    325e:	50 e0       	ldi	r21, 0x00	; 0
    3260:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    3264:	40 e0       	ldi	r20, 0x00	; 0
    3266:	50 e0       	ldi	r21, 0x00	; 0
    3268:	c3 01       	movw	r24, r6
    326a:	b2 01       	movw	r22, r4
    326c:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
    3270:	f1 01       	movw	r30, r2
    3272:	ee 0f       	add	r30, r30
    3274:	ff 1f       	adc	r31, r31
    3276:	ee 0f       	add	r30, r30
    3278:	ff 1f       	adc	r31, r31
    327a:	a1 e0       	ldi	r26, 0x01	; 1
    327c:	b0 e0       	ldi	r27, 0x00	; 0
    327e:	ac 0f       	add	r26, r28
    3280:	bd 1f       	adc	r27, r29
    3282:	ea 0f       	add	r30, r26
    3284:	fb 1f       	adc	r31, r27
    3286:	20 83       	st	Z, r18
    3288:	31 83       	std	Z+1, r19	; 0x01
    328a:	42 83       	std	Z+2, r20	; 0x02
    328c:	53 83       	std	Z+3, r21	; 0x03
        if (((count&0x01) == 0) && (timeconstant.dw > ((F_CPU/1000000UL)+3))) {
    328e:	89 89       	ldd	r24, Y+17	; 0x11
    3290:	9a 89       	ldd	r25, Y+18	; 0x12
    3292:	00 97       	sbiw	r24, 0x00	; 0
    3294:	99 f4       	brne	.+38     	; 0x32bc <ReadInductance+0x3c0>
    3296:	9c e0       	ldi	r25, 0x0C	; 12
    3298:	e9 16       	cp	r14, r25
    329a:	f1 04       	cpc	r15, r1
    329c:	01 05       	cpc	r16, r1
    329e:	11 05       	cpc	r17, r1
    32a0:	68 f0       	brcs	.+26     	; 0x32bc <ReadInductance+0x3c0>
           // transition is found, measurement with delayed counter start is not necessary
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
    32a2:	f1 01       	movw	r30, r2
    32a4:	31 96       	adiw	r30, 0x01	; 1
    32a6:	ee 0f       	add	r30, r30
    32a8:	ff 1f       	adc	r31, r31
    32aa:	ee 0f       	add	r30, r30
    32ac:	ff 1f       	adc	r31, r31
    32ae:	ea 0f       	add	r30, r26
    32b0:	fb 1f       	adc	r31, r27
    32b2:	20 83       	st	Z, r18
    32b4:	31 83       	std	Z+1, r19	; 0x01
    32b6:	42 83       	std	Z+2, r20	; 0x02
    32b8:	53 83       	std	Z+3, r21	; 0x03
           count++;		// skip the delayed measurement
    32ba:	93 94       	inc	r9
        }
        wdt_reset();
    32bc:	a8 95       	wdr
//  for (found=0;found<ResistorsFound;found++) {
//     if (resis[found].rx > 21000) continue;
     if (resis[found].rx > 21000) return;

     // we can check for Inductance, if resistance is below 2100 Ohm
     for (count=0;count<4;count++) {
    32be:	93 94       	inc	r9
    32c0:	a9 2d       	mov	r26, r9
    32c2:	a4 30       	cpi	r26, 0x04	; 4
    32c4:	08 f4       	brcc	.+2      	; 0x32c8 <ReadInductance+0x3cc>
    32c6:	50 ce       	rjmp	.-864    	; 0x2f68 <ReadInductance+0x6c>
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
           count++;		// skip the delayed measurement
        }
        wdt_reset();
     }  //end for count
     ADC_PORT = TXD_VAL;		// switch ADC Port to GND
    32c8:	88 e0       	ldi	r24, 0x08	; 8
    32ca:	88 b9       	out	0x08, r24	; 8
     wait_about20ms();
    32cc:	84 e0       	ldi	r24, 0x04	; 4
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>
        resis[found].lx = inductance[0];
     }
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];		// other polarity, delayed start
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
#else
     nr_pol1 = 0;
    32d4:	61 e0       	ldi	r22, 0x01	; 1
    32d6:	2d 81       	ldd	r18, Y+5	; 0x05
    32d8:	3e 81       	ldd	r19, Y+6	; 0x06
    32da:	4f 81       	ldd	r20, Y+7	; 0x07
    32dc:	58 85       	ldd	r21, Y+8	; 0x08
    32de:	89 81       	ldd	r24, Y+1	; 0x01
    32e0:	9a 81       	ldd	r25, Y+2	; 0x02
    32e2:	ab 81       	ldd	r26, Y+3	; 0x03
    32e4:	bc 81       	ldd	r27, Y+4	; 0x04
    32e6:	82 17       	cp	r24, r18
    32e8:	93 07       	cpc	r25, r19
    32ea:	a4 07       	cpc	r26, r20
    32ec:	b5 07       	cpc	r27, r21
    32ee:	08 f0       	brcs	.+2      	; 0x32f2 <ReadInductance+0x3f6>
    32f0:	60 e0       	ldi	r22, 0x00	; 0
     if (inductance[1] > inductance[0]) { nr_pol1 = 1; } 
     nr_pol2 = 2;
     if (inductance[3] > inductance[2]) { nr_pol2 = 3; } 
    32f2:	2d 85       	ldd	r18, Y+13	; 0x0d
    32f4:	3e 85       	ldd	r19, Y+14	; 0x0e
    32f6:	4f 85       	ldd	r20, Y+15	; 0x0f
    32f8:	58 89       	ldd	r21, Y+16	; 0x10
    32fa:	89 85       	ldd	r24, Y+9	; 0x09
    32fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    32fe:	ab 85       	ldd	r26, Y+11	; 0x0b
    3300:	bc 85       	ldd	r27, Y+12	; 0x0c
    3302:	82 17       	cp	r24, r18
    3304:	93 07       	cpc	r25, r19
    3306:	a4 07       	cpc	r26, r20
    3308:	b5 07       	cpc	r27, r21
    330a:	10 f0       	brcs	.+4      	; 0x3310 <ReadInductance+0x414>
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];		// other polarity, delayed start
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
#else
     nr_pol1 = 0;
     if (inductance[1] > inductance[0]) { nr_pol1 = 1; } 
     nr_pol2 = 2;
    330c:	72 e0       	ldi	r23, 0x02	; 2
    330e:	01 c0       	rjmp	.+2      	; 0x3312 <ReadInductance+0x416>
     if (inductance[3] > inductance[2]) { nr_pol2 = 3; } 
    3310:	73 e0       	ldi	r23, 0x03	; 3
     if (inductance[nr_pol2] < inductance[nr_pol1]) nr_pol1 = nr_pol2;
    3312:	a7 2f       	mov	r26, r23
    3314:	b0 e0       	ldi	r27, 0x00	; 0
    3316:	aa 0f       	add	r26, r26
    3318:	bb 1f       	adc	r27, r27
    331a:	aa 0f       	add	r26, r26
    331c:	bb 1f       	adc	r27, r27
    331e:	ce 01       	movw	r24, r28
    3320:	01 96       	adiw	r24, 0x01	; 1
    3322:	a8 0f       	add	r26, r24
    3324:	b9 1f       	adc	r27, r25
    3326:	e6 2f       	mov	r30, r22
    3328:	f0 e0       	ldi	r31, 0x00	; 0
    332a:	ee 0f       	add	r30, r30
    332c:	ff 1f       	adc	r31, r31
    332e:	ee 0f       	add	r30, r30
    3330:	ff 1f       	adc	r31, r31
    3332:	e8 0f       	add	r30, r24
    3334:	f9 1f       	adc	r31, r25
    3336:	2d 91       	ld	r18, X+
    3338:	3d 91       	ld	r19, X+
    333a:	4d 91       	ld	r20, X+
    333c:	5c 91       	ld	r21, X
    333e:	80 81       	ld	r24, Z
    3340:	91 81       	ldd	r25, Z+1	; 0x01
    3342:	a2 81       	ldd	r26, Z+2	; 0x02
    3344:	b3 81       	ldd	r27, Z+3	; 0x03
    3346:	28 17       	cp	r18, r24
    3348:	39 07       	cpc	r19, r25
    334a:	4a 07       	cpc	r20, r26
    334c:	5b 07       	cpc	r21, r27
    334e:	08 f4       	brcc	.+2      	; 0x3352 <ReadInductance+0x456>
    3350:	67 2f       	mov	r22, r23
     resis[found].lx = inductance[nr_pol1];
    3352:	26 2f       	mov	r18, r22
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	f9 01       	movw	r30, r18
    3358:	ee 0f       	add	r30, r30
    335a:	ff 1f       	adc	r31, r31
    335c:	ee 0f       	add	r30, r30
    335e:	ff 1f       	adc	r31, r31
    3360:	ec 0f       	add	r30, r28
    3362:	fd 1f       	adc	r31, r29
    3364:	61 81       	ldd	r22, Z+1	; 0x01
    3366:	72 81       	ldd	r23, Z+2	; 0x02
    3368:	83 81       	ldd	r24, Z+3	; 0x03
    336a:	94 81       	ldd	r25, Z+4	; 0x04
    336c:	60 93 1c 01 	sts	0x011C, r22
    3370:	70 93 1d 01 	sts	0x011D, r23
    3374:	80 93 1e 01 	sts	0x011E, r24
    3378:	90 93 1f 01 	sts	0x011F, r25
     resis[found].lpre = -5;	// 10 uH units
    337c:	4b ef       	ldi	r20, 0xFB	; 251
    337e:	40 93 20 01 	sts	0x0120, r20
     if (((nr_pol1 & 1) == 1) || (resis[found].rx >= 240)) {
    3382:	20 fd       	sbrc	r18, 0
    3384:	0d c0       	rjmp	.+26     	; 0x33a0 <ReadInductance+0x4a4>
    3386:	20 91 18 01 	lds	r18, 0x0118
    338a:	30 91 19 01 	lds	r19, 0x0119
    338e:	40 91 1a 01 	lds	r20, 0x011A
    3392:	50 91 1b 01 	lds	r21, 0x011B
    3396:	20 3f       	cpi	r18, 0xF0	; 240
    3398:	31 05       	cpc	r19, r1
    339a:	41 05       	cpc	r20, r1
    339c:	51 05       	cpc	r21, r1
    339e:	a8 f0       	brcs	.+42     	; 0x33ca <ReadInductance+0x4ce>
        // with 680 Ohm resistor total_r is more than 7460
        resis[found].lpre = -4;	// 100 uH units
    33a0:	2c ef       	ldi	r18, 0xFC	; 252
    33a2:	20 93 20 01 	sts	0x0120, r18
        resis[found].lx = (resis[found].lx + 5) / 10;
    33a6:	6b 5f       	subi	r22, 0xFB	; 251
    33a8:	7f 4f       	sbci	r23, 0xFF	; 255
    33aa:	8f 4f       	sbci	r24, 0xFF	; 255
    33ac:	9f 4f       	sbci	r25, 0xFF	; 255
    33ae:	2a e0       	ldi	r18, 0x0A	; 10
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	40 e0       	ldi	r20, 0x00	; 0
    33b4:	50 e0       	ldi	r21, 0x00	; 0
    33b6:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
    33ba:	20 93 1c 01 	sts	0x011C, r18
    33be:	30 93 1d 01 	sts	0x011D, r19
    33c2:	40 93 1e 01 	sts	0x011E, r20
    33c6:	50 93 1f 01 	sts	0x011F, r21
     } 
#endif
//  } // end loop for all resistors

  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    33ca:	88 e0       	ldi	r24, 0x08	; 8
    33cc:	87 b9       	out	0x07, r24	; 7
  R_DDR = 0;			// switch all resistor ports to input
    33ce:	14 b8       	out	0x04, r1	; 4
#endif
  return;
 } // end ReadInductance()
    33d0:	68 96       	adiw	r28, 0x18	; 24
    33d2:	0f b6       	in	r0, 0x3f	; 63
    33d4:	f8 94       	cli
    33d6:	de bf       	out	0x3e, r29	; 62
    33d8:	0f be       	out	0x3f, r0	; 63
    33da:	cd bf       	out	0x3d, r28	; 61
    33dc:	cf 91       	pop	r28
    33de:	df 91       	pop	r29
    33e0:	1f 91       	pop	r17
    33e2:	0f 91       	pop	r16
    33e4:	ff 90       	pop	r15
    33e6:	ef 90       	pop	r14
    33e8:	df 90       	pop	r13
    33ea:	cf 90       	pop	r12
    33ec:	bf 90       	pop	r11
    33ee:	af 90       	pop	r10
    33f0:	9f 90       	pop	r9
    33f2:	8f 90       	pop	r8
    33f4:	7f 90       	pop	r7
    33f6:	6f 90       	pop	r6
    33f8:	5f 90       	pop	r5
    33fa:	4f 90       	pop	r4
    33fc:	3f 90       	pop	r3
    33fe:	2f 90       	pop	r2
    3400:	08 95       	ret

00003402 <W20msReadADC>:
    3402:	8f 93       	push	r24
    3404:	84 e0       	ldi	r24, 0x04	; 4
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>
    340c:	0b c0       	rjmp	.+22     	; 0x3424 <to_read>

0000340e <W10msReadADC>:
    340e:	8f 93       	push	r24
    3410:	82 e0       	ldi	r24, 0x02	; 2
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>
    3418:	05 c0       	rjmp	.+10     	; 0x3424 <to_read>

0000341a <W5msReadADC>:
    341a:	8f 93       	push	r24
    341c:	81 e0       	ldi	r24, 0x01	; 1
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <sleep_5ms>

00003424 <to_read>:
    3424:	8f 91       	pop	r24

00003426 <ReadADC>:
    3426:	1f 93       	push	r17
    3428:	18 2f       	mov	r17, r24
    342a:	10 64       	ori	r17, 0x40	; 64

0000342c <get_sample>:
    342c:	10 93 7c 00 	sts	0x007C, r17
    3430:	e1 2f       	mov	r30, r17
    3432:	e0 78       	andi	r30, 0x80	; 128
    3434:	80 91 3d 01 	lds	r24, 0x013D
    3438:	e8 17       	cp	r30, r24
    343a:	61 f0       	breq	.+24     	; 0x3454 <r2aa2>
    343c:	0e 94 9c 13 	call	0x2738	; 0x2738 <wait100us>
    3440:	8e e9       	ldi	r24, 0x9E	; 158
    3442:	80 93 7a 00 	sts	0x007A, r24
    3446:	83 e0       	ldi	r24, 0x03	; 3
    3448:	83 bf       	out	0x33, r24	; 51
    344a:	88 95       	sleep
    344c:	82 e0       	ldi	r24, 0x02	; 2
    344e:	83 bf       	out	0x33, r24	; 51
    3450:	e0 93 3d 01 	sts	0x013D, r30

00003454 <r2aa2>:
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	a9 01       	movw	r20, r18
    345a:	e0 e0       	ldi	r30, 0x00	; 0
    345c:	1f c0       	rjmp	.+62     	; 0x349c <r2ae8>

0000345e <Loop>:
    345e:	8e e9       	ldi	r24, 0x9E	; 158
    3460:	80 93 7a 00 	sts	0x007A, r24
    3464:	83 e0       	ldi	r24, 0x03	; 3
    3466:	83 bf       	out	0x33, r24	; 51
    3468:	88 95       	sleep
    346a:	82 e0       	ldi	r24, 0x02	; 2
    346c:	83 bf       	out	0x33, r24	; 51
    346e:	60 91 78 00 	lds	r22, 0x0078
    3472:	70 91 79 00 	lds	r23, 0x0079
    3476:	26 0f       	add	r18, r22
    3478:	37 1f       	adc	r19, r23
    347a:	41 1d       	adc	r20, r1
    347c:	51 1d       	adc	r21, r1
    347e:	e4 30       	cpi	r30, 0x04	; 4
    3480:	61 f4       	brne	.+24     	; 0x349a <r2ae6>
    3482:	80 91 3f 01 	lds	r24, 0x013F
    3486:	80 30       	cpi	r24, 0x00	; 0
    3488:	41 f0       	breq	.+16     	; 0x349a <r2ae6>
    348a:	84 e0       	ldi	r24, 0x04	; 4
    348c:	20 30       	cpi	r18, 0x00	; 0
    348e:	38 07       	cpc	r19, r24
    3490:	20 f4       	brcc	.+8      	; 0x349a <r2ae6>
    3492:	17 fd       	sbrc	r17, 7
    3494:	02 c0       	rjmp	.+4      	; 0x349a <r2ae6>
    3496:	10 68       	ori	r17, 0x80	; 128
    3498:	c9 cf       	rjmp	.-110    	; 0x342c <get_sample>

0000349a <r2ae6>:
    349a:	ef 5f       	subi	r30, 0xFF	; 255

0000349c <r2ae8>:
    349c:	80 91 3c 01 	lds	r24, 0x013C
    34a0:	e8 17       	cp	r30, r24
    34a2:	e8 f2       	brcs	.-70     	; 0x345e <Loop>
    34a4:	17 ff       	sbrs	r17, 7
    34a6:	05 c0       	rjmp	.+10     	; 0x34b2 <r2afe>
    34a8:	60 91 3e 01 	lds	r22, 0x013E
    34ac:	70 91 3f 01 	lds	r23, 0x013F
    34b0:	04 c0       	rjmp	.+8      	; 0x34ba <r2b02>

000034b2 <r2afe>:
    34b2:	60 91 40 01 	lds	r22, 0x0140
    34b6:	70 91 41 01 	lds	r23, 0x0141

000034ba <r2b02>:
    34ba:	80 e0       	ldi	r24, 0x00	; 0
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
    34c2:	2f ef       	ldi	r18, 0xFF	; 255
    34c4:	33 e0       	ldi	r19, 0x03	; 3
    34c6:	40 e0       	ldi	r20, 0x00	; 0
    34c8:	50 e0       	ldi	r21, 0x00	; 0
    34ca:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
    34ce:	b9 01       	movw	r22, r18
    34d0:	ca 01       	movw	r24, r20
    34d2:	20 91 3c 01 	lds	r18, 0x013C
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	40 e0       	ldi	r20, 0x00	; 0
    34da:	50 e0       	ldi	r21, 0x00	; 0
    34dc:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
    34e0:	c9 01       	movw	r24, r18
    34e2:	1f 91       	pop	r17
    34e4:	08 95       	ret

000034e6 <GetESR>:
    34e6:	2f 92       	push	r2
    34e8:	3f 92       	push	r3
    34ea:	4f 92       	push	r4
    34ec:	5f 92       	push	r5
    34ee:	6f 92       	push	r6
    34f0:	7f 92       	push	r7
    34f2:	8f 92       	push	r8
    34f4:	9f 92       	push	r9
    34f6:	af 92       	push	r10
    34f8:	bf 92       	push	r11
    34fa:	cf 92       	push	r12
    34fc:	df 92       	push	r13
    34fe:	ef 92       	push	r14
    3500:	ff 92       	push	r15
    3502:	0f 93       	push	r16
    3504:	1f 93       	push	r17
    3506:	df 93       	push	r29
    3508:	cf 93       	push	r28
    350a:	cd b7       	in	r28, 0x3d	; 61
    350c:	de b7       	in	r29, 0x3e	; 62
    350e:	6e 97       	sbiw	r28, 0x1e	; 30
    3510:	0f b6       	in	r0, 0x3f	; 63
    3512:	f8 94       	cli
    3514:	de bf       	out	0x3e, r29	; 62
    3516:	0f be       	out	0x3f, r0	; 63
    3518:	cd bf       	out	0x3d, r28	; 61
    351a:	66 2e       	mov	r6, r22
    351c:	b8 2e       	mov	r11, r24
    351e:	86 0f       	add	r24, r22
    3520:	89 83       	std	Y+1, r24	; 0x01
    3522:	20 91 07 01 	lds	r18, 0x0107
    3526:	27 30       	cpi	r18, 0x07	; 7
    3528:	19 f5       	brne	.+70     	; 0x3570 <ad_35e4>
    352a:	20 91 66 01 	lds	r18, 0x0166
    352e:	30 91 67 01 	lds	r19, 0x0167
    3532:	40 91 68 01 	lds	r20, 0x0168
    3536:	50 91 69 01 	lds	r21, 0x0169
    353a:	10 91 75 01 	lds	r17, 0x0175
    353e:	09 c0       	rjmp	.+18     	; 0x3552 <ad_35ba>

00003540 <ad_35ac>:
    3540:	ca 01       	movw	r24, r20
    3542:	b9 01       	movw	r22, r18
    3544:	2a e0       	ldi	r18, 0x0A	; 10
    3546:	31 2d       	mov	r19, r1
    3548:	41 2d       	mov	r20, r1
    354a:	51 2d       	mov	r21, r1
    354c:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
    3550:	1f 5f       	subi	r17, 0xFF	; 255

00003552 <ad_35ba>:
    3552:	17 3f       	cpi	r17, 0xF7	; 247
    3554:	ac f3       	brlt	.-22     	; 0x3540 <ad_35ac>
    3556:	2c 8b       	std	Y+20, r18	; 0x14
    3558:	3d 8b       	std	Y+21, r19	; 0x15
    355a:	4e 8b       	std	Y+22, r20	; 0x16
    355c:	5f 8b       	std	Y+23, r21	; 0x17
    355e:	24 3b       	cpi	r18, 0xB4	; 180
    3560:	60 e0       	ldi	r22, 0x00	; 0
    3562:	36 07       	cpc	r19, r22
    3564:	41 05       	cpc	r20, r1
    3566:	51 05       	cpc	r21, r1
    3568:	18 f4       	brcc	.+6      	; 0x3570 <ad_35e4>
    356a:	8f ef       	ldi	r24, 0xFF	; 255
    356c:	9f ef       	ldi	r25, 0xFF	; 255
    356e:	71 c1       	rjmp	.+738    	; 0x3852 <ad_exit>

00003570 <ad_35e4>:
    3570:	26 ed       	ldi	r18, 0xD6	; 214
    3572:	a2 2e       	mov	r10, r18
    3574:	02 c0       	rjmp	.+4      	; 0x357a <ad_3604>

00003576 <ad_35fe>:
    3576:	94 ed       	ldi	r25, 0xD4	; 212
    3578:	a9 2e       	mov	r10, r25

0000357a <ad_3604>:
    357a:	e3 e0       	ldi	r30, 0x03	; 3
    357c:	f1 e0       	ldi	r31, 0x01	; 1
    357e:	e6 0d       	add	r30, r6
    3580:	f1 1d       	adc	r31, r1
    3582:	85 91       	lpm	r24, Z+
    3584:	88 60       	ori	r24, 0x08	; 8
    3586:	8e 87       	std	Y+14, r24	; 0x0e
    3588:	e3 e0       	ldi	r30, 0x03	; 3
    358a:	f1 e0       	ldi	r31, 0x01	; 1
    358c:	eb 0d       	add	r30, r11
    358e:	f1 1d       	adc	r31, r1
    3590:	85 91       	lpm	r24, Z+
    3592:	88 60       	ori	r24, 0x08	; 8
    3594:	8f 87       	std	Y+15, r24	; 0x0f
    3596:	e0 e0       	ldi	r30, 0x00	; 0
    3598:	f1 e0       	ldi	r31, 0x01	; 1
    359a:	e6 0d       	add	r30, r6
    359c:	f1 1d       	adc	r31, r1
    359e:	75 90       	lpm	r7, Z+
    35a0:	e0 e0       	ldi	r30, 0x00	; 0
    35a2:	f1 e0       	ldi	r31, 0x01	; 1
    35a4:	eb 0d       	add	r30, r11
    35a6:	f1 1d       	adc	r31, r1
    35a8:	c5 90       	lpm	r12, Z+
    35aa:	90 ec       	ldi	r25, 0xC0	; 192
    35ac:	69 2a       	or	r6, r25
    35ae:	b9 2a       	or	r11, r25
    35b0:	81 e0       	ldi	r24, 0x01	; 1
    35b2:	e8 2e       	mov	r14, r24
    35b4:	f1 2c       	mov	r15, r1
    35b6:	01 2d       	mov	r16, r1
    35b8:	11 2d       	mov	r17, r1
    35ba:	8e 83       	std	Y+6, r24	; 0x06
    35bc:	1f 82       	std	Y+7, r1	; 0x07
    35be:	18 86       	std	Y+8, r1	; 0x08
    35c0:	19 86       	std	Y+9, r1	; 0x09
    35c2:	1a 86       	std	Y+10, r1	; 0x0a
    35c4:	1b 86       	std	Y+11, r1	; 0x0b
    35c6:	1c 86       	std	Y+12, r1	; 0x0c
    35c8:	1d 86       	std	Y+13, r1	; 0x0d
    35ca:	18 8e       	std	Y+24, r1	; 0x18
    35cc:	19 8e       	std	Y+25, r1	; 0x19
    35ce:	0e 94 ad 01 	call	0x35a	; 0x35a <EntladePins>
    35d2:	88 e0       	ldi	r24, 0x08	; 8
    35d4:	88 b9       	out	0x08, r24	; 8
    35d6:	60 92 7c 00 	sts	0x007C, r6
    35da:	0e 94 9c 13 	call	0x2738	; 0x2738 <wait100us>
    35de:	3f 85       	ldd	r19, Y+15	; 0x0f
    35e0:	37 b9       	out	0x07, r19	; 7
    35e2:	75 b8       	out	0x05, r7	; 5
    35e4:	74 b8       	out	0x04, r7	; 4
    35e6:	0e 94 a1 13 	call	0x2742	; 0x2742 <wait10us>
    35ea:	0e 94 a5 13 	call	0x274a	; 0x274a <wait2us>
    35ee:	15 b8       	out	0x05, r1	; 5
    35f0:	14 b8       	out	0x04, r1	; 4
    35f2:	dd 24       	eor	r13, r13
    35f4:	b4 ed       	ldi	r27, 0xD4	; 212
    35f6:	9b 2e       	mov	r9, r27
    35f8:	a6 ed       	ldi	r26, 0xD6	; 214
    35fa:	8a 2e       	mov	r8, r26

000035fc <ad_3692>:
    35fc:	3e 85       	ldd	r19, Y+14	; 0x0e
    35fe:	37 b9       	out	0x07, r19	; 7
    3600:	75 b8       	out	0x05, r7	; 5
    3602:	74 b8       	out	0x04, r7	; 4
    3604:	60 92 7c 00 	sts	0x007C, r6
    3608:	a8 95       	wdr
    360a:	a0 92 7a 00 	sts	0x007A, r10
    360e:	80 91 7a 00 	lds	r24, 0x007A
    3612:	86 fd       	sbrc	r24, 6
    3614:	fc cf       	rjmp	.-8      	; 0x360e <ad_3692+0x12>
    3616:	a0 92 7a 00 	sts	0x007A, r10
    361a:	80 91 7a 00 	lds	r24, 0x007A
    361e:	86 fd       	sbrc	r24, 6
    3620:	fc cf       	rjmp	.-8      	; 0x361a <ad_3692+0x1e>
    3622:	20 90 78 00 	lds	r2, 0x0078
    3626:	30 90 79 00 	lds	r3, 0x0079
    362a:	b0 92 7c 00 	sts	0x007C, r11
    362e:	a0 92 7a 00 	sts	0x007A, r10
    3632:	80 91 7a 00 	lds	r24, 0x007A
    3636:	86 fd       	sbrc	r24, 6
    3638:	fc cf       	rjmp	.-8      	; 0x3632 <ad_3692+0x36>
    363a:	80 92 7a 00 	sts	0x007A, r8
    363e:	0e 94 a2 13 	call	0x2744	; 0x2744 <wait5us>
    3642:	c5 b8       	out	0x05, r12	; 5
    3644:	c4 b8       	out	0x04, r12	; 4
    3646:	0e 94 a0 13 	call	0x2740	; 0x2740 <wait20us>
    364a:	0e 94 a2 13 	call	0x2744	; 0x2744 <wait5us>
    364e:	0e 94 a6 13 	call	0x274c	; 0x274c <wait1us>
    3652:	8f 93       	push	r24
    3654:	8f 91       	pop	r24
    3656:	a8 95       	wdr
    3658:	a8 95       	wdr
    365a:	14 b8       	out	0x04, r1	; 4
    365c:	15 b8       	out	0x05, r1	; 5

0000365e <ad_370c>:
    365e:	80 91 7a 00 	lds	r24, 0x007A
    3662:	86 fd       	sbrc	r24, 6
    3664:	fc cf       	rjmp	.-8      	; 0x365e <ad_370c>
    3666:	20 91 78 00 	lds	r18, 0x0078
    366a:	30 91 79 00 	lds	r19, 0x0079
    366e:	28 8b       	std	Y+16, r18	; 0x10
    3670:	39 8b       	std	Y+17, r19	; 0x11
    3672:	3f 85       	ldd	r19, Y+15	; 0x0f
    3674:	37 b9       	out	0x07, r19	; 7
    3676:	c5 b8       	out	0x05, r12	; 5
    3678:	c4 b8       	out	0x04, r12	; 4
    367a:	a8 95       	wdr
    367c:	b0 92 7c 00 	sts	0x007C, r11
    3680:	a0 92 7a 00 	sts	0x007A, r10
    3684:	80 91 7a 00 	lds	r24, 0x007A
    3688:	86 fd       	sbrc	r24, 6
    368a:	fc cf       	rjmp	.-8      	; 0x3684 <ad_370c+0x26>
    368c:	a0 92 7a 00 	sts	0x007A, r10
    3690:	80 91 7a 00 	lds	r24, 0x007A
    3694:	86 fd       	sbrc	r24, 6
    3696:	fc cf       	rjmp	.-8      	; 0x3690 <ad_370c+0x32>
    3698:	60 91 78 00 	lds	r22, 0x0078
    369c:	70 91 79 00 	lds	r23, 0x0079
    36a0:	60 92 7c 00 	sts	0x007C, r6
    36a4:	a0 92 7a 00 	sts	0x007A, r10
    36a8:	80 91 7a 00 	lds	r24, 0x007A
    36ac:	86 fd       	sbrc	r24, 6
    36ae:	fc cf       	rjmp	.-8      	; 0x36a8 <ad_370c+0x4a>
    36b0:	80 92 7a 00 	sts	0x007A, r8
    36b4:	0e 94 a2 13 	call	0x2744	; 0x2744 <wait5us>
    36b8:	75 b8       	out	0x05, r7	; 5
    36ba:	74 b8       	out	0x04, r7	; 4
    36bc:	0e 94 a0 13 	call	0x2740	; 0x2740 <wait20us>
    36c0:	0e 94 a2 13 	call	0x2744	; 0x2744 <wait5us>
    36c4:	0e 94 a6 13 	call	0x274c	; 0x274c <wait1us>
    36c8:	8f 93       	push	r24
    36ca:	8f 91       	pop	r24
    36cc:	a8 95       	wdr
    36ce:	a8 95       	wdr
    36d0:	14 b8       	out	0x04, r1	; 4
    36d2:	15 b8       	out	0x05, r1	; 5

000036d4 <ad_37f4>:
    36d4:	80 91 7a 00 	lds	r24, 0x007A
    36d8:	86 fd       	sbrc	r24, 6
    36da:	fc cf       	rjmp	.-8      	; 0x36d4 <ad_37f4>
    36dc:	40 91 78 00 	lds	r20, 0x0078
    36e0:	50 91 79 00 	lds	r21, 0x0079
    36e4:	14 b8       	out	0x04, r1	; 4
    36e6:	cb 01       	movw	r24, r22
    36e8:	82 0d       	add	r24, r2
    36ea:	93 1d       	adc	r25, r3
    36ec:	e8 0e       	add	r14, r24
    36ee:	f9 1e       	adc	r15, r25
    36f0:	01 1d       	adc	r16, r1
    36f2:	11 1d       	adc	r17, r1
    36f4:	ea 82       	std	Y+2, r14	; 0x02
    36f6:	fb 82       	std	Y+3, r15	; 0x03
    36f8:	0c 83       	std	Y+4, r16	; 0x04
    36fa:	1d 83       	std	Y+5, r17	; 0x05
    36fc:	88 89       	ldd	r24, Y+16	; 0x10
    36fe:	99 89       	ldd	r25, Y+17	; 0x11
    3700:	84 0f       	add	r24, r20
    3702:	95 1f       	adc	r25, r21
    3704:	2e 81       	ldd	r18, Y+6	; 0x06
    3706:	3f 81       	ldd	r19, Y+7	; 0x07
    3708:	68 85       	ldd	r22, Y+8	; 0x08
    370a:	79 85       	ldd	r23, Y+9	; 0x09
    370c:	28 0f       	add	r18, r24
    370e:	39 1f       	adc	r19, r25
    3710:	61 1d       	adc	r22, r1
    3712:	71 1d       	adc	r23, r1
    3714:	2e 83       	std	Y+6, r18	; 0x06
    3716:	3f 83       	std	Y+7, r19	; 0x07
    3718:	68 87       	std	Y+8, r22	; 0x08
    371a:	79 87       	std	Y+9, r23	; 0x09
    371c:	24 e6       	ldi	r18, 0x64	; 100
    371e:	24 17       	cp	r18, r20
    3720:	15 06       	cpc	r1, r21
    3722:	50 f0       	brcs	.+20     	; 0x3738 <is_ok1>
    3724:	75 b8       	out	0x05, r7	; 5
    3726:	74 b8       	out	0x04, r7	; 4
    3728:	0e 94 a5 13 	call	0x274a	; 0x274a <wait2us>
    372c:	14 b8       	out	0x04, r1	; 4
    372e:	15 b8       	out	0x05, r1	; 5
    3730:	88 8d       	ldd	r24, Y+24	; 0x18
    3732:	83 95       	inc	r24
    3734:	88 8f       	std	Y+24, r24	; 0x18
    3736:	07 c0       	rjmp	.+14     	; 0x3746 <is_ok1b>

00003738 <is_ok1>:
    3738:	48 3e       	cpi	r20, 0xE8	; 232
    373a:	73 e0       	ldi	r23, 0x03	; 3
    373c:	57 07       	cpc	r21, r23
    373e:	18 f0       	brcs	.+6      	; 0x3746 <is_ok1b>
    3740:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3742:	83 95       	inc	r24
    3744:	8a 8f       	std	Y+26, r24	; 0x1a

00003746 <is_ok1b>:
    3746:	88 89       	ldd	r24, Y+16	; 0x10
    3748:	99 89       	ldd	r25, Y+17	; 0x11
    374a:	28 17       	cp	r18, r24
    374c:	19 06       	cpc	r1, r25
    374e:	b0 f0       	brcs	.+44     	; 0x377c <is_ok2>
    3750:	3e 85       	ldd	r19, Y+14	; 0x0e
    3752:	37 b9       	out	0x07, r19	; 7
    3754:	c5 b8       	out	0x05, r12	; 5
    3756:	c4 b8       	out	0x04, r12	; 4
    3758:	0e 94 a5 13 	call	0x274a	; 0x274a <wait2us>
    375c:	0e 94 a0 13 	call	0x2740	; 0x2740 <wait20us>
    3760:	0e 94 a2 13 	call	0x2744	; 0x2744 <wait5us>
    3764:	0e 94 a6 13 	call	0x274c	; 0x274c <wait1us>
    3768:	8f 93       	push	r24
    376a:	8f 91       	pop	r24
    376c:	a8 95       	wdr
    376e:	a8 95       	wdr
    3770:	14 b8       	out	0x04, r1	; 4
    3772:	15 b8       	out	0x05, r1	; 5
    3774:	89 8d       	ldd	r24, Y+25	; 0x19
    3776:	83 95       	inc	r24
    3778:	89 8f       	std	Y+25, r24	; 0x19
    377a:	07 c0       	rjmp	.+14     	; 0x378a <is_ok2b>

0000377c <is_ok2>:
    377c:	88 3e       	cpi	r24, 0xE8	; 232
    377e:	73 e0       	ldi	r23, 0x03	; 3
    3780:	97 07       	cpc	r25, r23
    3782:	18 f0       	brcs	.+6      	; 0x378a <is_ok2b>
    3784:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3786:	83 95       	inc	r24
    3788:	8a 8f       	std	Y+26, r24	; 0x1a

0000378a <is_ok2b>:
    378a:	d3 94       	inc	r13
    378c:	5d 2d       	mov	r21, r13
    378e:	5f 3f       	cpi	r21, 0xFF	; 255
    3790:	09 f0       	breq	.+2      	; 0x3794 <ad_38ac>
    3792:	34 cf       	rjmp	.-408    	; 0x35fc <ad_3692>

00003794 <ad_38ac>:
    3794:	40 90 47 01 	lds	r4, 0x0147
    3798:	50 90 48 01 	lds	r5, 0x0148
    379c:	44 0c       	add	r4, r4
    379e:	55 1c       	adc	r5, r5
    37a0:	92 01       	movw	r18, r4
    37a2:	e4 e0       	ldi	r30, 0x04	; 4

000037a4 <ad_3924>:
    37a4:	24 0d       	add	r18, r4
    37a6:	35 1d       	adc	r19, r5
    37a8:	ea 95       	dec	r30
    37aa:	e1 f7       	brne	.-8      	; 0x37a4 <ad_3924>
    37ac:	29 01       	movw	r4, r18
    37ae:	57 01       	movw	r10, r14
    37b0:	68 01       	movw	r12, r16
    37b2:	6e 80       	ldd	r6, Y+6	; 0x06
    37b4:	7f 80       	ldd	r7, Y+7	; 0x07
    37b6:	88 84       	ldd	r8, Y+8	; 0x08
    37b8:	99 84       	ldd	r9, Y+9	; 0x09
    37ba:	20 91 07 01 	lds	r18, 0x0107
    37be:	27 30       	cpi	r18, 0x07	; 7
    37c0:	c1 f4       	brne	.+48     	; 0x37f2 <no_sub>
    37c2:	6c 89       	ldd	r22, Y+20	; 0x14
    37c4:	7d 89       	ldd	r23, Y+21	; 0x15
    37c6:	8e 89       	ldd	r24, Y+22	; 0x16
    37c8:	9f 89       	ldd	r25, Y+23	; 0x17
    37ca:	9b 01       	movw	r18, r22
    37cc:	ac 01       	movw	r20, r24
    37ce:	6d 5e       	subi	r22, 0xED	; 237
    37d0:	7f 4f       	sbci	r23, 0xFF	; 255
    37d2:	8f 4f       	sbci	r24, 0xFF	; 255
    37d4:	9f 4f       	sbci	r25, 0xFF	; 255
    37d6:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
    37da:	9b 01       	movw	r18, r22
    37dc:	ac 01       	movw	r20, r24
    37de:	6c e1       	ldi	r22, 0x1C	; 28
    37e0:	79 e3       	ldi	r23, 0x39	; 57
    37e2:	80 e9       	ldi	r24, 0x90	; 144
    37e4:	9a e1       	ldi	r25, 0x1A	; 26
    37e6:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
    37ea:	62 1a       	sub	r6, r18
    37ec:	73 0a       	sbc	r7, r19
    37ee:	84 0a       	sbc	r8, r20
    37f0:	95 0a       	sbc	r9, r21

000037f2 <no_sub>:
    37f2:	a6 14       	cp	r10, r6
    37f4:	b7 04       	cpc	r11, r7
    37f6:	c8 04       	cpc	r12, r8
    37f8:	d9 04       	cpc	r13, r9
    37fa:	28 f4       	brcc	.+10     	; 0x3806 <ad_396c>
    37fc:	6a 18       	sub	r6, r10
    37fe:	7b 08       	sbc	r7, r11
    3800:	8c 08       	sbc	r8, r12
    3802:	9d 08       	sbc	r9, r13
    3804:	03 c0       	rjmp	.+6      	; 0x380c <ad_3972>

00003806 <ad_396c>:
    3806:	66 24       	eor	r6, r6
    3808:	77 24       	eor	r7, r7
    380a:	43 01       	movw	r8, r6

0000380c <ad_3972>:
    380c:	b2 01       	movw	r22, r4
    380e:	80 e0       	ldi	r24, 0x00	; 0
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	93 01       	movw	r18, r6
    3814:	a4 01       	movw	r20, r8
    3816:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
    381a:	95 01       	movw	r18, r10
    381c:	a6 01       	movw	r20, r12
    381e:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
    3822:	86 ea       	ldi	r24, 0xA6	; 166
    3824:	91 e0       	ldi	r25, 0x01	; 1
    3826:	79 81       	ldd	r23, Y+1	; 0x01
    3828:	87 0f       	add	r24, r23
    382a:	91 1d       	adc	r25, r1
    382c:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__eerd_byte_m168>
    3830:	68 2e       	mov	r6, r24
    3832:	c9 01       	movw	r24, r18
    3834:	60 e1       	ldi	r22, 0x10	; 16
    3836:	70 e0       	ldi	r23, 0x00	; 0
    3838:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <__udivmodhi4>
    383c:	26 0f       	add	r18, r22
    383e:	37 1f       	adc	r19, r23
    3840:	c9 01       	movw	r24, r18
    3842:	68 16       	cp	r6, r24
    3844:	19 06       	cpc	r1, r25
    3846:	18 f4       	brcc	.+6      	; 0x384e <esr_too_less>
    3848:	86 19       	sub	r24, r6
    384a:	91 09       	sbc	r25, r1
    384c:	02 c0       	rjmp	.+4      	; 0x3852 <ad_exit>

0000384e <esr_too_less>:
    384e:	81 2d       	mov	r24, r1
    3850:	91 2d       	mov	r25, r1

00003852 <ad_exit>:
    3852:	6e 96       	adiw	r28, 0x1e	; 30
    3854:	0f b6       	in	r0, 0x3f	; 63
    3856:	f8 94       	cli
    3858:	de bf       	out	0x3e, r29	; 62
    385a:	0f be       	out	0x3f, r0	; 63
    385c:	cd bf       	out	0x3d, r28	; 61
    385e:	cf 91       	pop	r28
    3860:	df 91       	pop	r29
    3862:	1f 91       	pop	r17
    3864:	0f 91       	pop	r16
    3866:	ff 90       	pop	r15
    3868:	ef 90       	pop	r14
    386a:	df 90       	pop	r13
    386c:	cf 90       	pop	r12
    386e:	bf 90       	pop	r11
    3870:	af 90       	pop	r10
    3872:	9f 90       	pop	r9
    3874:	8f 90       	pop	r8
    3876:	7f 90       	pop	r7
    3878:	6f 90       	pop	r6
    387a:	5f 90       	pop	r5
    387c:	4f 90       	pop	r4
    387e:	3f 90       	pop	r3
    3880:	2f 90       	pop	r2
    3882:	08 95       	ret

00003884 <GetVloss>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void GetVloss() {
    3884:	cf 92       	push	r12
    3886:	df 92       	push	r13
    3888:	ef 92       	push	r14
    388a:	ff 92       	push	r15
    388c:	0f 93       	push	r16
    388e:	1f 93       	push	r17
    3890:	cf 93       	push	r28
    3892:	df 93       	push	r29
  } lval;
  uint8_t ii;
  uint8_t HiPinR_L;
  uint8_t LoADC;

  if (cap.v_loss > 0) return;		// Voltage loss is already known
    3894:	80 91 70 01 	lds	r24, 0x0170
    3898:	90 91 71 01 	lds	r25, 0x0171
    389c:	00 97       	sbiw	r24, 0x00	; 0
    389e:	09 f0       	breq	.+2      	; 0x38a2 <GetVloss+0x1e>
    38a0:	a2 c0       	rjmp	.+324    	; 0x39e6 <GetVloss+0x162>
  LoADC = pgm_read_byte(&PinADCtab[cap.ca]) | TXD_MSK;
    38a2:	e0 91 72 01 	lds	r30, 0x0172
    38a6:	f0 e0       	ldi	r31, 0x00	; 0
    38a8:	ed 5f       	subi	r30, 0xFD	; 253
    38aa:	fe 4f       	sbci	r31, 0xFE	; 254
    38ac:	04 91       	lpm	r16, Z+
    38ae:	08 60       	ori	r16, 0x08	; 8
  HiPinR_L = pgm_read_byte(&PinRLtab[cap.cb]);	//R_L mask for HighPin R_L load
    38b0:	e0 91 73 01 	lds	r30, 0x0173
    38b4:	f0 e0       	ldi	r31, 0x00	; 0
    38b6:	e0 50       	subi	r30, 0x00	; 0
    38b8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ba:	14 91       	lpm	r17, Z+

  EntladePins();			// discharge capacitor
    38bc:	0e 94 ad 01 	call	0x35a	; 0x35a <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    38c0:	88 e0       	ldi	r24, 0x08	; 8
    38c2:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    38c4:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    38c6:	07 b9       	out	0x07, r16	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    38c8:	14 b9       	out	0x04, r17	; 4
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
    38ca:	80 91 73 01 	lds	r24, 0x0173
    38ce:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
    38d2:	ec 01       	movw	r28, r24
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
    38d4:	00 91 75 01 	lds	r16, 0x0175
    38d8:	08 3f       	cpi	r16, 0xF8	; 248
    38da:	0c f0       	brlt	.+2      	; 0x38de <GetVloss+0x5a>
    38dc:	84 c0       	rjmp	.+264    	; 0x39e6 <GetVloss+0x162>
  lval.dw = cap.cval_max;
    38de:	20 91 66 01 	lds	r18, 0x0166
    38e2:	30 91 67 01 	lds	r19, 0x0167
    38e6:	40 91 68 01 	lds	r20, 0x0168
    38ea:	50 91 69 01 	lds	r21, 0x0169
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    38ee:	04 5f       	subi	r16, 0xF4	; 244
     lval.dw = (lval.dw + 5) / 10;
    38f0:	8a e0       	ldi	r24, 0x0A	; 10
    38f2:	c8 2e       	mov	r12, r24
    38f4:	d1 2c       	mov	r13, r1
    38f6:	e1 2c       	mov	r14, r1
    38f8:	f1 2c       	mov	r15, r1
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
  lval.dw = cap.cval_max;
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    38fa:	0b c0       	rjmp	.+22     	; 0x3912 <GetVloss+0x8e>
     lval.dw = (lval.dw + 5) / 10;
    38fc:	ca 01       	movw	r24, r20
    38fe:	b9 01       	movw	r22, r18
    3900:	6b 5f       	subi	r22, 0xFB	; 251
    3902:	7f 4f       	sbci	r23, 0xFF	; 255
    3904:	8f 4f       	sbci	r24, 0xFF	; 255
    3906:	9f 4f       	sbci	r25, 0xFF	; 255
    3908:	a7 01       	movw	r20, r14
    390a:	96 01       	movw	r18, r12
    390c:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
  lval.dw = cap.cval_max;
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    3910:	0f 5f       	subi	r16, 0xFF	; 255
    3912:	04 30       	cpi	r16, 0x04	; 4
    3914:	98 f3       	brcs	.-26     	; 0x38fc <GetVloss+0x78>
    3916:	79 01       	movw	r14, r18
     lval.dw = (lval.dw + 5) / 10;
  }
//  if ((lval.dw == 0) || (lval.dw > 500)) {
  if ((lval.dw == 0) || (lval.dw > 5000)) {
    3918:	21 50       	subi	r18, 0x01	; 1
    391a:	30 40       	sbci	r19, 0x00	; 0
    391c:	40 40       	sbci	r20, 0x00	; 0
    391e:	50 40       	sbci	r21, 0x00	; 0
    3920:	28 38       	cpi	r18, 0x88	; 136
    3922:	83 e1       	ldi	r24, 0x13	; 19
    3924:	38 07       	cpc	r19, r24
    3926:	80 e0       	ldi	r24, 0x00	; 0
    3928:	48 07       	cpc	r20, r24
    392a:	80 e0       	ldi	r24, 0x00	; 0
    392c:	58 07       	cpc	r21, r24
    392e:	08 f0       	brcs	.+2      	; 0x3932 <GetVloss+0xae>
    3930:	5a c0       	rjmp	.+180    	; 0x39e6 <GetVloss+0x162>
     /* capacity more than 50uF, Voltage loss is already measured  */
     return;
  }
  R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    3932:	15 b9       	out	0x05, r17	; 5
  R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    3934:	14 b9       	out	0x04, r17	; 4
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    3936:	00 e0       	ldi	r16, 0x00	; 0
    3938:	10 e0       	ldi	r17, 0x00	; 0
    393a:	04 c0       	rjmp	.+8      	; 0x3944 <GetVloss+0xc0>
//     wait50us();			// wait exactly 50us
     wait5us();			// wait exactly 5us
    393c:	0e 94 a2 13 	call	0x2744	; 0x2744 <wait5us>
     /* capacity more than 50uF, Voltage loss is already measured  */
     return;
  }
  R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
  R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    3940:	0e 5f       	subi	r16, 0xFE	; 254
    3942:	1f 4f       	sbci	r17, 0xFF	; 255
    3944:	67 01       	movw	r12, r14
    3946:	0e 15       	cp	r16, r14
    3948:	1f 05       	cpc	r17, r15
    394a:	c0 f3       	brcs	.-16     	; 0x393c <GetVloss+0xb8>
//     wait50us();			// wait exactly 50us
     wait5us();			// wait exactly 5us
  }
  R_DDR = 0;				// switch back to input
    394c:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// no Pull up
    394e:	15 b8       	out	0x05, r1	; 5
 // wait10us();			//wait a little time
  wdt_reset();
    3950:	a8 95       	wdr
  // read voltage without current
  ADCconfig.Samples = 5;		// set ADC to only 5 samples
    3952:	85 e0       	ldi	r24, 0x05	; 5
    3954:	80 93 3c 01 	sts	0x013C, r24
  adcv[2] = ReadADC(cap.cb);
    3958:	80 91 73 01 	lds	r24, 0x0173
    395c:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
  if (adcv[2] > adcv[0]) {
    3960:	c8 17       	cp	r28, r24
    3962:	d9 07       	cpc	r29, r25
    3964:	20 f4       	brcc	.+8      	; 0x396e <GetVloss+0xea>
     adcv[2] -= adcv[0];		//difference to beginning voltage
    3966:	8c 01       	movw	r16, r24
    3968:	0c 1b       	sub	r16, r28
    396a:	1d 0b       	sbc	r17, r29
    396c:	02 c0       	rjmp	.+4      	; 0x3972 <GetVloss+0xee>
  } else {
     adcv[2] = 0;			// voltage is lower or same as beginning voltage
    396e:	00 e0       	ldi	r16, 0x00	; 0
    3970:	10 e0       	ldi	r17, 0x00	; 0
  }
  // wait 2x the time which was required for loading
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    3972:	ee 24       	eor	r14, r14
    3974:	ff 24       	eor	r15, r15
    3976:	05 c0       	rjmp	.+10     	; 0x3982 <GetVloss+0xfe>
//     wait50us();
     wait5us();
    3978:	0e 94 a2 13 	call	0x2744	; 0x2744 <wait5us>
     adcv[2] -= adcv[0];		//difference to beginning voltage
  } else {
     adcv[2] = 0;			// voltage is lower or same as beginning voltage
  }
  // wait 2x the time which was required for loading
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    397c:	08 94       	sec
    397e:	e1 1c       	adc	r14, r1
    3980:	f1 1c       	adc	r15, r1
    3982:	ec 14       	cp	r14, r12
    3984:	fd 04       	cpc	r15, r13
    3986:	c0 f3       	brcs	.-16     	; 0x3978 <GetVloss+0xf4>
//     wait50us();
     wait5us();
  }
  adcv[3] = ReadADC(cap.cb);	// read voltage again, is discharged only a little bit ?
    3988:	80 91 73 01 	lds	r24, 0x0173
    398c:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
  ADCconfig.Samples = ANZ_MESS;		// set ADC back to configured No. of samples
    3990:	29 e1       	ldi	r18, 0x19	; 25
    3992:	20 93 3c 01 	sts	0x013C, r18
  wdt_reset();
    3996:	a8 95       	wdr
  if (adcv[3] > adcv[0]) {
    3998:	c8 17       	cp	r28, r24
    399a:	d9 07       	cpc	r29, r25
    399c:	18 f4       	brcc	.+6      	; 0x39a4 <GetVloss+0x120>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    399e:	8c 1b       	sub	r24, r28
    39a0:	9d 0b       	sbc	r25, r29
    39a2:	02 c0       	rjmp	.+4      	; 0x39a8 <GetVloss+0x124>
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    39a4:	80 e0       	ldi	r24, 0x00	; 0
    39a6:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
    39a8:	80 17       	cp	r24, r16
    39aa:	91 07       	cpc	r25, r17
    39ac:	a8 f4       	brcc	.+42     	; 0x39d8 <GetVloss+0x154>
     // build difference to load voltage
     adcv[1] = adcv[2] - adcv[3];	// lost voltage during load time wait
    39ae:	b8 01       	movw	r22, r16
    39b0:	68 1b       	sub	r22, r24
    39b2:	79 0b       	sbc	r23, r25
  } else {
     adcv[1] = 0;			// no lost voltage
  }
  // compute voltage drop as part from loaded voltage
  if (adcv[1] > 0) {
    39b4:	89 f0       	breq	.+34     	; 0x39d8 <GetVloss+0x154>
     // there is any voltage drop (adcv[1]) !
     // adcv[2] is the loaded voltage.
     cap.v_loss = (unsigned long)(adcv[1] * 500UL) / adcv[2];
    39b6:	80 e0       	ldi	r24, 0x00	; 0
    39b8:	90 e0       	ldi	r25, 0x00	; 0
    39ba:	24 ef       	ldi	r18, 0xF4	; 244
    39bc:	31 e0       	ldi	r19, 0x01	; 1
    39be:	40 e0       	ldi	r20, 0x00	; 0
    39c0:	50 e0       	ldi	r21, 0x00	; 0
    39c2:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
    39c6:	98 01       	movw	r18, r16
    39c8:	40 e0       	ldi	r20, 0x00	; 0
    39ca:	50 e0       	ldi	r21, 0x00	; 0
    39cc:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
    39d0:	30 93 71 01 	sts	0x0171, r19
    39d4:	20 93 70 01 	sts	0x0170, r18
  lcd_line4();
  DisplayValue(lval.w[0],0,'x',4);
#endif

  // discharge capacitor again
  EntladePins();		// discharge capacitors
    39d8:	0e 94 ad 01 	call	0x35a	; 0x35a <EntladePins>
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    39dc:	88 e0       	ldi	r24, 0x08	; 8
    39de:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    39e0:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    39e2:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    39e4:	15 b8       	out	0x05, r1	; 5
#endif
  return;
 } // end GetVdrop()
    39e6:	df 91       	pop	r29
    39e8:	cf 91       	pop	r28
    39ea:	1f 91       	pop	r17
    39ec:	0f 91       	pop	r16
    39ee:	ff 90       	pop	r15
    39f0:	ef 90       	pop	r14
    39f2:	df 90       	pop	r13
    39f4:	cf 90       	pop	r12
    39f6:	08 95       	ret

000039f8 <Calibrate_UR>:
#include "Transistortester.h"
void Calibrate_UR(void) {
    39f8:	8f 92       	push	r8
    39fa:	9f 92       	push	r9
    39fc:	af 92       	push	r10
    39fe:	bf 92       	push	r11
    3a00:	cf 92       	push	r12
    3a02:	df 92       	push	r13
    3a04:	ef 92       	push	r14
    3a06:	ff 92       	push	r15
    3a08:	0f 93       	push	r16
    3a0a:	1f 93       	push	r17
    3a0c:	cf 93       	push	r28
    3a0e:	df 93       	push	r29
  uint16_t u680;	// 3 * (Voltage at 680 Ohm)
 #endif


                                        //############################################
  ADCconfig.U_AVCC = U_VCC;     // set initial VCC Voltage
    3a10:	88 e8       	ldi	r24, 0x88	; 136
    3a12:	93 e1       	ldi	r25, 0x13	; 19
    3a14:	90 93 41 01 	sts	0x0141, r25
    3a18:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    3a1c:	8e eb       	ldi	r24, 0xBE	; 190
    3a1e:	80 93 3c 01 	sts	0x013C, r24
#if FLASHEND > 0x1fff
  ADC_PORT = TXD_VAL;                   // switch to 0V
    3a22:	08 e0       	ldi	r16, 0x08	; 8
    3a24:	08 b9       	out	0x08, r16	; 8
  ADC_DDR = (1<<TPREF) | TXD_MSK;       // switch pin with 2.5V reference to GND
    3a26:	88 e1       	ldi	r24, 0x18	; 24
    3a28:	87 b9       	out	0x07, r24	; 7
  wait1ms();
    3a2a:	0e 94 97 13 	call	0x272e	; 0x272e <wait1ms>
  ADC_DDR =  TXD_MSK;   // switch pin with reference back to input
    3a2e:	07 b9       	out	0x07, r16	; 7
  trans.uBE[1] = W5msReadADC(TPREF); // read voltage of 2.5V precision reference
    3a30:	84 e0       	ldi	r24, 0x04	; 4
    3a32:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
    3a36:	ec 01       	movw	r28, r24
    3a38:	90 93 5a 01 	sts	0x015A, r25
    3a3c:	80 93 59 01 	sts	0x0159, r24
  if ((trans.uBE[1] > 2250) && (trans.uBE[1] < 2750)) {
    3a40:	8b 5c       	subi	r24, 0xCB	; 203
    3a42:	98 40       	sbci	r25, 0x08	; 8
    3a44:	21 e0       	ldi	r18, 0x01	; 1
    3a46:	83 3f       	cpi	r24, 0xF3	; 243
    3a48:	92 07       	cpc	r25, r18
    3a4a:	c0 f4       	brcc	.+48     	; 0x3a7c <Calibrate_UR+0x84>
     // precision voltage reference connected, update U_AVCC
     WithReference = 1;
    3a4c:	81 e0       	ldi	r24, 0x01	; 1
    3a4e:	80 93 49 01 	sts	0x0149, r24
     ADCconfig.U_AVCC = (unsigned long)((unsigned long)ADCconfig.U_AVCC * 2495) / trans.uBE[1];
    3a52:	60 91 40 01 	lds	r22, 0x0140
    3a56:	70 91 41 01 	lds	r23, 0x0141
    3a5a:	80 e0       	ldi	r24, 0x00	; 0
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	2f eb       	ldi	r18, 0xBF	; 191
    3a60:	39 e0       	ldi	r19, 0x09	; 9
    3a62:	40 e0       	ldi	r20, 0x00	; 0
    3a64:	50 e0       	ldi	r21, 0x00	; 0
    3a66:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
    3a6a:	9e 01       	movw	r18, r28
    3a6c:	40 e0       	ldi	r20, 0x00	; 0
    3a6e:	50 e0       	ldi	r21, 0x00	; 0
    3a70:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
    3a74:	30 93 41 01 	sts	0x0141, r19
    3a78:	20 93 40 01 	sts	0x0140, r18
  }
#endif
 #ifdef WITH_AUTO_REF
  (void) ReadADC(MUX_INT_REF);	// read reference voltage 
    3a7c:	8e e0       	ldi	r24, 0x0E	; 14
    3a7e:	0e 94 13 1a 	call	0x3426	; 0x3426 <ReadADC>
  ref_mv = W5msReadADC(MUX_INT_REF);	// read reference voltage 
    3a82:	8e e0       	ldi	r24, 0x0E	; 14
    3a84:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
    3a88:	90 93 45 01 	sts	0x0145, r25
    3a8c:	80 93 44 01 	sts	0x0144, r24
  RefVoltage();		//compute RHmultip = f(reference voltage)
    3a90:	0e 94 48 02 	call	0x490	; 0x490 <RefVoltage>
 #else
  ref_mv = DEFAULT_BAND_GAP;    // set to default Reference Voltage
 #endif
  ADCconfig.U_Bandgap = ADC_internal_reference; // set internal reference voltage for ADC
    3a94:	85 e9       	ldi	r24, 0x95	; 149
    3a96:	91 e0       	ldi	r25, 0x01	; 1
    3a98:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <__eerd_byte_m168>
    3a9c:	99 27       	eor	r25, r25
    3a9e:	87 fd       	sbrc	r24, 7
    3aa0:	90 95       	com	r25
    3aa2:	20 91 44 01 	lds	r18, 0x0144
    3aa6:	30 91 45 01 	lds	r19, 0x0145
    3aaa:	82 0f       	add	r24, r18
    3aac:	93 1f       	adc	r25, r19
    3aae:	90 93 3f 01 	sts	0x013F, r25
    3ab2:	80 93 3e 01 	sts	0x013E, r24
                                        //############################################

 #ifdef AUTO_CAL
  // measurement of internal resistance of the ADC port outputs switched to GND
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    3ab6:	79 e0       	ldi	r23, 0x09	; 9
    3ab8:	d7 2e       	mov	r13, r23
    3aba:	d7 b8       	out	0x07, r13	; 7
  R_PORT = 1<<(TP1*2);		//R_L-PORT 1 to VCC
    3abc:	aa 24       	eor	r10, r10
    3abe:	a3 94       	inc	r10
    3ac0:	a5 b8       	out	0x05, r10	; 5
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to VCC
    3ac2:	a4 b8       	out	0x04, r10	; 4
  sum_rm = W5msReadADC(TP1);
    3ac4:	80 e0       	ldi	r24, 0x00	; 0
    3ac6:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
    3aca:	8c 01       	movw	r16, r24

  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin 2 to output 0V
    3acc:	6a e0       	ldi	r22, 0x0A	; 10
    3ace:	86 2e       	mov	r8, r22
    3ad0:	87 b8       	out	0x07, r8	; 7
  R_PORT =  1<<(TP2*2);		//R_L-PORT 2 to VCC
    3ad2:	54 e0       	ldi	r21, 0x04	; 4
    3ad4:	c5 2e       	mov	r12, r21
    3ad6:	c5 b8       	out	0x05, r12	; 5
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to VCC
    3ad8:	c4 b8       	out	0x04, r12	; 4
  sum_rm += W5msReadADC(TP2);
    3ada:	81 e0       	ldi	r24, 0x01	; 1
    3adc:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
    3ae0:	08 0f       	add	r16, r24
    3ae2:	19 1f       	adc	r17, r25

  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin 3 to output 0V
    3ae4:	4c e0       	ldi	r20, 0x0C	; 12
    3ae6:	f4 2e       	mov	r15, r20
    3ae8:	f7 b8       	out	0x07, r15	; 7
  R_PORT =  1<<(TP3*2);		//R_L-PORT 3 to VCC
    3aea:	30 e1       	ldi	r19, 0x10	; 16
    3aec:	e3 2e       	mov	r14, r19
    3aee:	e5 b8       	out	0x05, r14	; 5
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to VCC
    3af0:	e4 b8       	out	0x04, r14	; 4
  sum_rm += W5msReadADC(TP3);	//add all three values
    3af2:	82 e0       	ldi	r24, 0x02	; 2
    3af4:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
    3af8:	08 0f       	add	r16, r24
    3afa:	19 1f       	adc	r17, r25

  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
    3afc:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
    3afe:	d8 b8       	out	0x08, r13	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    3b00:	d7 b8       	out	0x07, r13	; 7
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
    3b02:	a4 b8       	out	0x04, r10	; 4
  sum_rp = ADCconfig.U_AVCC - W5msReadADC(TP1);
    3b04:	c0 91 40 01 	lds	r28, 0x0140
    3b08:	d0 91 41 01 	lds	r29, 0x0141
    3b0c:	80 e0       	ldi	r24, 0x00	; 0
    3b0e:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
    3b12:	5c 01       	movw	r10, r24
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
    3b14:	88 b8       	out	0x08, r8	; 8
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
    3b16:	87 b8       	out	0x07, r8	; 7
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
    3b18:	c4 b8       	out	0x04, r12	; 4
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP2);
    3b1a:	c0 90 40 01 	lds	r12, 0x0140
    3b1e:	d0 90 41 01 	lds	r13, 0x0141
    3b22:	81 e0       	ldi	r24, 0x01	; 1
    3b24:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
    3b28:	4c 01       	movw	r8, r24

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
    3b2a:	f8 b8       	out	0x08, r15	; 8
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
    3b2c:	f7 b8       	out	0x07, r15	; 7
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
    3b2e:	e4 b8       	out	0x04, r14	; 4
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP3);
    3b30:	e0 90 40 01 	lds	r14, 0x0140
    3b34:	f0 90 41 01 	lds	r15, 0x0141
    3b38:	82 e0       	ldi	r24, 0x02	; 2
    3b3a:	0e 94 0d 1a 	call	0x341a	; 0x341a <W5msReadADC>
  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
  sum_rp = ADCconfig.U_AVCC - W5msReadADC(TP1);
    3b3e:	cc 0d       	add	r28, r12
    3b40:	dd 1d       	adc	r29, r13
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP2);
    3b42:	ce 0d       	add	r28, r14
    3b44:	df 1d       	adc	r29, r15
    3b46:	ca 19       	sub	r28, r10
    3b48:	db 09       	sbc	r29, r11

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP3);
    3b4a:	c8 19       	sub	r28, r8
    3b4c:	d9 09       	sbc	r29, r9
    3b4e:	c8 1b       	sub	r28, r24
    3b50:	d9 0b       	sbc	r29, r25

  u680 = ((ADCconfig.U_AVCC * 3) - sum_rm - sum_rp);	//three times the voltage at the 680 Ohm
    3b52:	80 91 40 01 	lds	r24, 0x0140
    3b56:	90 91 41 01 	lds	r25, 0x0141
    3b5a:	6c 01       	movw	r12, r24
    3b5c:	cc 0c       	add	r12, r12
    3b5e:	dd 1c       	adc	r13, r13
    3b60:	c8 0e       	add	r12, r24
    3b62:	d9 1e       	adc	r13, r25
    3b64:	c0 1a       	sub	r12, r16
    3b66:	d1 0a       	sbc	r13, r17
    3b68:	cc 1a       	sub	r12, r28
    3b6a:	dd 0a       	sbc	r13, r29
  pin_rmi = (unsigned long)((unsigned long)sum_rm * (unsigned long)R_L_VAL) / (unsigned long)u680;
    3b6c:	ee 24       	eor	r14, r14
    3b6e:	ff 24       	eor	r15, r15
    3b70:	b8 01       	movw	r22, r16
    3b72:	80 e0       	ldi	r24, 0x00	; 0
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	20 e9       	ldi	r18, 0x90	; 144
    3b78:	3a e1       	ldi	r19, 0x1A	; 26
    3b7a:	40 e0       	ldi	r20, 0x00	; 0
    3b7c:	50 e0       	ldi	r21, 0x00	; 0
    3b7e:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
    3b82:	a7 01       	movw	r20, r14
    3b84:	96 01       	movw	r18, r12
    3b86:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
    3b8a:	89 01       	movw	r16, r18
    3b8c:	30 93 48 01 	sts	0x0148, r19
    3b90:	20 93 47 01 	sts	0x0147, r18
//  adcmv[2] = pin_rm;	// for last output in row 2
  pin_rpl = (unsigned long)((unsigned long)sum_rp * (unsigned long)R_L_VAL) / (unsigned long)u680;
    3b94:	be 01       	movw	r22, r28
    3b96:	80 e0       	ldi	r24, 0x00	; 0
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	20 e9       	ldi	r18, 0x90	; 144
    3b9c:	3a e1       	ldi	r19, 0x1A	; 26
    3b9e:	40 e0       	ldi	r20, 0x00	; 0
    3ba0:	50 e0       	ldi	r21, 0x00	; 0
    3ba2:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__mulsi3>
    3ba6:	a7 01       	movw	r20, r14
    3ba8:	96 01       	movw	r18, r12
    3baa:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__udivmodsi4>
    3bae:	c9 01       	movw	r24, r18
    3bb0:	30 93 43 01 	sts	0x0143, r19
    3bb4:	20 93 42 01 	sts	0x0142, r18
  resis680pl = pin_rpl + R_L_VAL;
    3bb8:	80 57       	subi	r24, 0x70	; 112
    3bba:	95 4e       	sbci	r25, 0xE5	; 229
    3bbc:	90 93 09 01 	sts	0x0109, r25
    3bc0:	80 93 08 01 	sts	0x0108, r24
  resis680mi = pin_rmi + R_L_VAL;
    3bc4:	00 57       	subi	r16, 0x70	; 112
    3bc6:	15 4e       	sbci	r17, 0xE5	; 229
    3bc8:	10 93 03 01 	sts	0x0103, r17
    3bcc:	00 93 02 01 	sts	0x0102, r16
#endif

  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    3bd0:	89 e1       	ldi	r24, 0x19	; 25
    3bd2:	80 93 3c 01 	sts	0x013C, r24
 } 
    3bd6:	df 91       	pop	r29
    3bd8:	cf 91       	pop	r28
    3bda:	1f 91       	pop	r17
    3bdc:	0f 91       	pop	r16
    3bde:	ff 90       	pop	r15
    3be0:	ef 90       	pop	r14
    3be2:	df 90       	pop	r13
    3be4:	cf 90       	pop	r12
    3be6:	bf 90       	pop	r11
    3be8:	af 90       	pop	r10
    3bea:	9f 90       	pop	r9
    3bec:	8f 90       	pop	r8
    3bee:	08 95       	ret

00003bf0 <__mulsi3>:
    3bf0:	62 9f       	mul	r22, r18
    3bf2:	d0 01       	movw	r26, r0
    3bf4:	73 9f       	mul	r23, r19
    3bf6:	f0 01       	movw	r30, r0
    3bf8:	82 9f       	mul	r24, r18
    3bfa:	e0 0d       	add	r30, r0
    3bfc:	f1 1d       	adc	r31, r1
    3bfe:	64 9f       	mul	r22, r20
    3c00:	e0 0d       	add	r30, r0
    3c02:	f1 1d       	adc	r31, r1
    3c04:	92 9f       	mul	r25, r18
    3c06:	f0 0d       	add	r31, r0
    3c08:	83 9f       	mul	r24, r19
    3c0a:	f0 0d       	add	r31, r0
    3c0c:	74 9f       	mul	r23, r20
    3c0e:	f0 0d       	add	r31, r0
    3c10:	65 9f       	mul	r22, r21
    3c12:	f0 0d       	add	r31, r0
    3c14:	99 27       	eor	r25, r25
    3c16:	72 9f       	mul	r23, r18
    3c18:	b0 0d       	add	r27, r0
    3c1a:	e1 1d       	adc	r30, r1
    3c1c:	f9 1f       	adc	r31, r25
    3c1e:	63 9f       	mul	r22, r19
    3c20:	b0 0d       	add	r27, r0
    3c22:	e1 1d       	adc	r30, r1
    3c24:	f9 1f       	adc	r31, r25
    3c26:	bd 01       	movw	r22, r26
    3c28:	cf 01       	movw	r24, r30
    3c2a:	11 24       	eor	r1, r1
    3c2c:	08 95       	ret

00003c2e <__udivmodqi4>:
    3c2e:	99 1b       	sub	r25, r25
    3c30:	79 e0       	ldi	r23, 0x09	; 9
    3c32:	04 c0       	rjmp	.+8      	; 0x3c3c <__udivmodqi4_ep>

00003c34 <__udivmodqi4_loop>:
    3c34:	99 1f       	adc	r25, r25
    3c36:	96 17       	cp	r25, r22
    3c38:	08 f0       	brcs	.+2      	; 0x3c3c <__udivmodqi4_ep>
    3c3a:	96 1b       	sub	r25, r22

00003c3c <__udivmodqi4_ep>:
    3c3c:	88 1f       	adc	r24, r24
    3c3e:	7a 95       	dec	r23
    3c40:	c9 f7       	brne	.-14     	; 0x3c34 <__udivmodqi4_loop>
    3c42:	80 95       	com	r24
    3c44:	08 95       	ret

00003c46 <__udivmodhi4>:
    3c46:	aa 1b       	sub	r26, r26
    3c48:	bb 1b       	sub	r27, r27
    3c4a:	51 e1       	ldi	r21, 0x11	; 17
    3c4c:	07 c0       	rjmp	.+14     	; 0x3c5c <__udivmodhi4_ep>

00003c4e <__udivmodhi4_loop>:
    3c4e:	aa 1f       	adc	r26, r26
    3c50:	bb 1f       	adc	r27, r27
    3c52:	a6 17       	cp	r26, r22
    3c54:	b7 07       	cpc	r27, r23
    3c56:	10 f0       	brcs	.+4      	; 0x3c5c <__udivmodhi4_ep>
    3c58:	a6 1b       	sub	r26, r22
    3c5a:	b7 0b       	sbc	r27, r23

00003c5c <__udivmodhi4_ep>:
    3c5c:	88 1f       	adc	r24, r24
    3c5e:	99 1f       	adc	r25, r25
    3c60:	5a 95       	dec	r21
    3c62:	a9 f7       	brne	.-22     	; 0x3c4e <__udivmodhi4_loop>
    3c64:	80 95       	com	r24
    3c66:	90 95       	com	r25
    3c68:	bc 01       	movw	r22, r24
    3c6a:	cd 01       	movw	r24, r26
    3c6c:	08 95       	ret

00003c6e <__udivmodsi4>:
    3c6e:	a1 e2       	ldi	r26, 0x21	; 33
    3c70:	1a 2e       	mov	r1, r26
    3c72:	aa 1b       	sub	r26, r26
    3c74:	bb 1b       	sub	r27, r27
    3c76:	fd 01       	movw	r30, r26
    3c78:	0d c0       	rjmp	.+26     	; 0x3c94 <__udivmodsi4_ep>

00003c7a <__udivmodsi4_loop>:
    3c7a:	aa 1f       	adc	r26, r26
    3c7c:	bb 1f       	adc	r27, r27
    3c7e:	ee 1f       	adc	r30, r30
    3c80:	ff 1f       	adc	r31, r31
    3c82:	a2 17       	cp	r26, r18
    3c84:	b3 07       	cpc	r27, r19
    3c86:	e4 07       	cpc	r30, r20
    3c88:	f5 07       	cpc	r31, r21
    3c8a:	20 f0       	brcs	.+8      	; 0x3c94 <__udivmodsi4_ep>
    3c8c:	a2 1b       	sub	r26, r18
    3c8e:	b3 0b       	sbc	r27, r19
    3c90:	e4 0b       	sbc	r30, r20
    3c92:	f5 0b       	sbc	r31, r21

00003c94 <__udivmodsi4_ep>:
    3c94:	66 1f       	adc	r22, r22
    3c96:	77 1f       	adc	r23, r23
    3c98:	88 1f       	adc	r24, r24
    3c9a:	99 1f       	adc	r25, r25
    3c9c:	1a 94       	dec	r1
    3c9e:	69 f7       	brne	.-38     	; 0x3c7a <__udivmodsi4_loop>
    3ca0:	60 95       	com	r22
    3ca2:	70 95       	com	r23
    3ca4:	80 95       	com	r24
    3ca6:	90 95       	com	r25
    3ca8:	9b 01       	movw	r18, r22
    3caa:	ac 01       	movw	r20, r24
    3cac:	bd 01       	movw	r22, r26
    3cae:	cf 01       	movw	r24, r30
    3cb0:	08 95       	ret

00003cb2 <__divmodsi4>:
    3cb2:	97 fb       	bst	r25, 7
    3cb4:	09 2e       	mov	r0, r25
    3cb6:	05 26       	eor	r0, r21
    3cb8:	0e d0       	rcall	.+28     	; 0x3cd6 <__divmodsi4_neg1>
    3cba:	57 fd       	sbrc	r21, 7
    3cbc:	04 d0       	rcall	.+8      	; 0x3cc6 <__divmodsi4_neg2>
    3cbe:	d7 df       	rcall	.-82     	; 0x3c6e <__udivmodsi4>
    3cc0:	0a d0       	rcall	.+20     	; 0x3cd6 <__divmodsi4_neg1>
    3cc2:	00 1c       	adc	r0, r0
    3cc4:	38 f4       	brcc	.+14     	; 0x3cd4 <__divmodsi4_exit>

00003cc6 <__divmodsi4_neg2>:
    3cc6:	50 95       	com	r21
    3cc8:	40 95       	com	r20
    3cca:	30 95       	com	r19
    3ccc:	21 95       	neg	r18
    3cce:	3f 4f       	sbci	r19, 0xFF	; 255
    3cd0:	4f 4f       	sbci	r20, 0xFF	; 255
    3cd2:	5f 4f       	sbci	r21, 0xFF	; 255

00003cd4 <__divmodsi4_exit>:
    3cd4:	08 95       	ret

00003cd6 <__divmodsi4_neg1>:
    3cd6:	f6 f7       	brtc	.-4      	; 0x3cd4 <__divmodsi4_exit>
    3cd8:	90 95       	com	r25
    3cda:	80 95       	com	r24
    3cdc:	70 95       	com	r23
    3cde:	61 95       	neg	r22
    3ce0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ce2:	8f 4f       	sbci	r24, 0xFF	; 255
    3ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ce6:	08 95       	ret

00003ce8 <itoa>:
    3ce8:	fb 01       	movw	r30, r22
    3cea:	9f 01       	movw	r18, r30
    3cec:	e8 94       	clt
    3cee:	42 30       	cpi	r20, 0x02	; 2
    3cf0:	c4 f0       	brlt	.+48     	; 0x3d22 <itoa+0x3a>
    3cf2:	45 32       	cpi	r20, 0x25	; 37
    3cf4:	b4 f4       	brge	.+44     	; 0x3d22 <itoa+0x3a>
    3cf6:	4a 30       	cpi	r20, 0x0A	; 10
    3cf8:	29 f4       	brne	.+10     	; 0x3d04 <itoa+0x1c>
    3cfa:	97 fb       	bst	r25, 7
    3cfc:	1e f4       	brtc	.+6      	; 0x3d04 <itoa+0x1c>
    3cfe:	90 95       	com	r25
    3d00:	81 95       	neg	r24
    3d02:	9f 4f       	sbci	r25, 0xFF	; 255
    3d04:	64 2f       	mov	r22, r20
    3d06:	77 27       	eor	r23, r23
    3d08:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <__udivmodhi4>
    3d0c:	80 5d       	subi	r24, 0xD0	; 208
    3d0e:	8a 33       	cpi	r24, 0x3A	; 58
    3d10:	0c f0       	brlt	.+2      	; 0x3d14 <itoa+0x2c>
    3d12:	89 5d       	subi	r24, 0xD9	; 217
    3d14:	81 93       	st	Z+, r24
    3d16:	cb 01       	movw	r24, r22
    3d18:	00 97       	sbiw	r24, 0x00	; 0
    3d1a:	a1 f7       	brne	.-24     	; 0x3d04 <itoa+0x1c>
    3d1c:	16 f4       	brtc	.+4      	; 0x3d22 <itoa+0x3a>
    3d1e:	5d e2       	ldi	r21, 0x2D	; 45
    3d20:	51 93       	st	Z+, r21
    3d22:	10 82       	st	Z, r1
    3d24:	c9 01       	movw	r24, r18
    3d26:	0c 94 cc 1e 	jmp	0x3d98	; 0x3d98 <strrev>

00003d2a <utoa>:
    3d2a:	fb 01       	movw	r30, r22
    3d2c:	9f 01       	movw	r18, r30
    3d2e:	42 30       	cpi	r20, 0x02	; 2
    3d30:	74 f0       	brlt	.+28     	; 0x3d4e <utoa+0x24>
    3d32:	45 32       	cpi	r20, 0x25	; 37
    3d34:	64 f4       	brge	.+24     	; 0x3d4e <utoa+0x24>
    3d36:	64 2f       	mov	r22, r20
    3d38:	77 27       	eor	r23, r23
    3d3a:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <__udivmodhi4>
    3d3e:	80 5d       	subi	r24, 0xD0	; 208
    3d40:	8a 33       	cpi	r24, 0x3A	; 58
    3d42:	0c f0       	brlt	.+2      	; 0x3d46 <utoa+0x1c>
    3d44:	89 5d       	subi	r24, 0xD9	; 217
    3d46:	81 93       	st	Z+, r24
    3d48:	cb 01       	movw	r24, r22
    3d4a:	00 97       	sbiw	r24, 0x00	; 0
    3d4c:	a1 f7       	brne	.-24     	; 0x3d36 <utoa+0xc>
    3d4e:	10 82       	st	Z, r1
    3d50:	c9 01       	movw	r24, r18
    3d52:	0c 94 cc 1e 	jmp	0x3d98	; 0x3d98 <strrev>

00003d56 <__eerd_byte_m168>:
    3d56:	f9 99       	sbic	0x1f, 1	; 31
    3d58:	fe cf       	rjmp	.-4      	; 0x3d56 <__eerd_byte_m168>
    3d5a:	92 bd       	out	0x22, r25	; 34
    3d5c:	81 bd       	out	0x21, r24	; 33
    3d5e:	f8 9a       	sbi	0x1f, 0	; 31
    3d60:	99 27       	eor	r25, r25
    3d62:	80 b5       	in	r24, 0x20	; 32
    3d64:	08 95       	ret

00003d66 <__eerd_word_m168>:
    3d66:	a8 e1       	ldi	r26, 0x18	; 24
    3d68:	b0 e0       	ldi	r27, 0x00	; 0
    3d6a:	42 e0       	ldi	r20, 0x02	; 2
    3d6c:	50 e0       	ldi	r21, 0x00	; 0
    3d6e:	0c 94 de 1e 	jmp	0x3dbc	; 0x3dbc <__eerd_blraw_m168>

00003d72 <__eewr_byte_m168>:
    3d72:	26 2f       	mov	r18, r22

00003d74 <__eewr_r18_m168>:
    3d74:	f9 99       	sbic	0x1f, 1	; 31
    3d76:	fe cf       	rjmp	.-4      	; 0x3d74 <__eewr_r18_m168>
    3d78:	1f ba       	out	0x1f, r1	; 31
    3d7a:	92 bd       	out	0x22, r25	; 34
    3d7c:	81 bd       	out	0x21, r24	; 33
    3d7e:	20 bd       	out	0x20, r18	; 32
    3d80:	0f b6       	in	r0, 0x3f	; 63
    3d82:	f8 94       	cli
    3d84:	fa 9a       	sbi	0x1f, 2	; 31
    3d86:	f9 9a       	sbi	0x1f, 1	; 31
    3d88:	0f be       	out	0x3f, r0	; 63
    3d8a:	01 96       	adiw	r24, 0x01	; 1
    3d8c:	08 95       	ret

00003d8e <__eewr_word_m168>:
    3d8e:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <__eewr_byte_m168>
    3d92:	27 2f       	mov	r18, r23
    3d94:	0c 94 ba 1e 	jmp	0x3d74	; 0x3d74 <__eewr_r18_m168>

00003d98 <strrev>:
    3d98:	dc 01       	movw	r26, r24
    3d9a:	fc 01       	movw	r30, r24
    3d9c:	67 2f       	mov	r22, r23
    3d9e:	71 91       	ld	r23, Z+
    3da0:	77 23       	and	r23, r23
    3da2:	e1 f7       	brne	.-8      	; 0x3d9c <strrev+0x4>
    3da4:	32 97       	sbiw	r30, 0x02	; 2
    3da6:	04 c0       	rjmp	.+8      	; 0x3db0 <strrev+0x18>
    3da8:	7c 91       	ld	r23, X
    3daa:	6d 93       	st	X+, r22
    3dac:	70 83       	st	Z, r23
    3dae:	62 91       	ld	r22, -Z
    3db0:	ae 17       	cp	r26, r30
    3db2:	bf 07       	cpc	r27, r31
    3db4:	c8 f3       	brcs	.-14     	; 0x3da8 <strrev+0x10>
    3db6:	08 95       	ret

00003db8 <__eerd_block_m168>:
    3db8:	dc 01       	movw	r26, r24
    3dba:	cb 01       	movw	r24, r22

00003dbc <__eerd_blraw_m168>:
    3dbc:	fc 01       	movw	r30, r24
    3dbe:	f9 99       	sbic	0x1f, 1	; 31
    3dc0:	fe cf       	rjmp	.-4      	; 0x3dbe <__eerd_blraw_m168+0x2>
    3dc2:	06 c0       	rjmp	.+12     	; 0x3dd0 <__eerd_blraw_m168+0x14>
    3dc4:	f2 bd       	out	0x22, r31	; 34
    3dc6:	e1 bd       	out	0x21, r30	; 33
    3dc8:	f8 9a       	sbi	0x1f, 0	; 31
    3dca:	31 96       	adiw	r30, 0x01	; 1
    3dcc:	00 b4       	in	r0, 0x20	; 32
    3dce:	0d 92       	st	X+, r0
    3dd0:	41 50       	subi	r20, 0x01	; 1
    3dd2:	50 40       	sbci	r21, 0x00	; 0
    3dd4:	b8 f7       	brcc	.-18     	; 0x3dc4 <__eerd_blraw_m168+0x8>
    3dd6:	08 95       	ret

00003dd8 <_exit>:
    3dd8:	f8 94       	cli

00003dda <__stop_program>:
    3dda:	ff cf       	rjmp	.-2      	; 0x3dda <__stop_program>
