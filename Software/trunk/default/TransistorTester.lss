
TransistorTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00003fc6  0000407a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003fc6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009c  00800102  00800102  0000407c  2**0
                  ALLOC
  3 .eeprom       000001d6  00810000  00810000  0000407c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         00000a98  00000000  00000000  00004254  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000141  00000000  00000000  00004cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000180  00000000  00000000  00004e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000a1d  00000000  00000000  00004fad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00003804  00000000  00000000  000059ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000cb6  00000000  00000000  000091ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003998  00000000  00000000  00009e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000300  00000000  00000000  0000d81c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000aaa  00000000  00000000  0000db1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001988  00000000  00000000  0000e5c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00000362  00000000  00000000  0000ff4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 88 00 	jmp	0x110	; 0x110 <__ctors_end>
       4:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
       8:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
       c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      10:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      14:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      18:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      1c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__vector_7>
      20:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      24:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      28:	0c 94 b7 11 	jmp	0x236e	; 0x236e <__vector_10>
      2c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      30:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      34:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__vector_13>
      38:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      3c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      40:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      44:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      48:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      4c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      50:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      54:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_21>
      58:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      5c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      60:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      64:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>

00000068 <LogTab>:
      68:	00 00 14 00 29 00 3e 00 53 00 69 00 80 00 97 00     ....).>.S.i.....
      78:	ae 00 c6 00 df 00 f8 00 12 01 2d 01 49 01 65 01     ..........-.I.e.
      88:	82 01 a0 01 be 01 de 01 ff 01 21 02 44 02 68 02     ..........!.D.h.
      98:	8e 02 b5 02 de 02 09 03 35 03 64 03 94 03 c8 03     ........5.d.....
      a8:	fe 03 37 04 73 04 b4 04 f9 04 43 05 93 05 ea 05     ..7.s.....C.....
      b8:	49 06 b3 06 29 07 ae 07 48 08 ff 08 de 09           I...)...H.....

000000c6 <RHtab>:
      c6:	ba 03 87 03 58 03 2e 03 07 03 e4 02 c3 02 a4 02     ....X...........
      d6:	88 02                                               ..

000000d8 <VERSION_str>:
      d8:	56 65 72 73 69 6f 6e 20 31 2e 31 30 6b 00           Version 1.10k.

000000e6 <URefT>:
      e6:	52 65 66 3d 00                                      Ref=.

000000eb <RHfakt>:
      eb:	52 48 66 3d 00                                      RHf=.

000000f0 <R0_str>:
      f0:	52 30 3d 00                                         R0=.

000000f4 <PinRLtab>:
      f4:	01 04 10                                            ...

000000f7 <PinADCtab>:
      f7:	01 02 04                                            ...

000000fa <MinCap_str>:
      fa:	20 3e 31 30 30 6e 46 00                              >100nF.

00000102 <REF_C_str>:
     102:	52 45 46 5f 43 3d 00                                REF_C=.

00000109 <REF_R_str>:
     109:	52 45 46 5f 52 3d 00                                REF_R=.

00000110 <__ctors_end>:
     110:	11 24       	eor	r1, r1
     112:	1f be       	out	0x3f, r1	; 63
     114:	cf ef       	ldi	r28, 0xFF	; 255
     116:	d4 e0       	ldi	r29, 0x04	; 4
     118:	de bf       	out	0x3e, r29	; 62
     11a:	cd bf       	out	0x3d, r28	; 61

0000011c <__do_copy_data>:
     11c:	11 e0       	ldi	r17, 0x01	; 1
     11e:	a0 e0       	ldi	r26, 0x00	; 0
     120:	b1 e0       	ldi	r27, 0x01	; 1
     122:	e6 ec       	ldi	r30, 0xC6	; 198
     124:	ff e3       	ldi	r31, 0x3F	; 63
     126:	02 c0       	rjmp	.+4      	; 0x12c <__do_copy_data+0x10>
     128:	05 90       	lpm	r0, Z+
     12a:	0d 92       	st	X+, r0
     12c:	a2 30       	cpi	r26, 0x02	; 2
     12e:	b1 07       	cpc	r27, r17
     130:	d9 f7       	brne	.-10     	; 0x128 <__do_copy_data+0xc>

00000132 <__do_clear_bss>:
     132:	11 e0       	ldi	r17, 0x01	; 1
     134:	a2 e0       	ldi	r26, 0x02	; 2
     136:	b1 e0       	ldi	r27, 0x01	; 1
     138:	01 c0       	rjmp	.+2      	; 0x13c <.do_clear_bss_start>

0000013a <.do_clear_bss_loop>:
     13a:	1d 92       	st	X+, r1

0000013c <.do_clear_bss_start>:
     13c:	ae 39       	cpi	r26, 0x9E	; 158
     13e:	b1 07       	cpc	r27, r17
     140:	e1 f7       	brne	.-8      	; 0x13a <.do_clear_bss_loop>
     142:	0e 94 89 06 	call	0xd12	; 0xd12 <main>
     146:	0c 94 e1 1f 	jmp	0x3fc2	; 0x3fc2 <_exit>

0000014a <__bad_interrupt>:
     14a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014e <lcd_data>:
void lcd_space(void) {
   lcd_data(' ');
}

// sends data byte to the LCD 
void lcd_data(unsigned char temp1) {
     14e:	1f 93       	push	r17
     150:	18 2f       	mov	r17, r24
 lcd_write_data(temp1);		// set RS to 1
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	61 2f       	mov	r22, r17
     156:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
     15a:	0e 94 57 0e 	call	0x1cae	; 0x1cae <wait50us>
#ifdef WITH_UART
 switch(temp1) {
     15e:	18 30       	cpi	r17, 0x08	; 8
     160:	48 f4       	brcc	.+18     	; 0x174 <lcd_data+0x26>
     162:	16 30       	cpi	r17, 0x06	; 6
     164:	c0 f4       	brcc	.+48     	; 0x196 <lcd_data+0x48>
     166:	12 30       	cpi	r17, 0x02	; 2
     168:	61 f0       	breq	.+24     	; 0x182 <lcd_data+0x34>
     16a:	13 30       	cpi	r17, 0x03	; 3
     16c:	79 f0       	breq	.+30     	; 0x18c <lcd_data+0x3e>
     16e:	11 30       	cpi	r17, 0x01	; 1
     170:	f1 f4       	brne	.+60     	; 0x1ae <lcd_data+0x60>
     172:	05 c0       	rjmp	.+10     	; 0x17e <lcd_data+0x30>
     174:	14 3e       	cpi	r17, 0xE4	; 228
     176:	89 f0       	breq	.+34     	; 0x19a <lcd_data+0x4c>
     178:	14 3f       	cpi	r17, 0xF4	; 244
     17a:	c9 f4       	brne	.+50     	; 0x1ae <lcd_data+0x60>
     17c:	10 c0       	rjmp	.+32     	; 0x19e <lcd_data+0x50>
    case LCD_CHAR_DIODE1:
    	uart_putc('>');
     17e:	8e e3       	ldi	r24, 0x3E	; 62
     180:	06 c0       	rjmp	.+12     	; 0x18e <lcd_data+0x40>
    	uart_putc('|');
    	break;
    case LCD_CHAR_DIODE2:
    	uart_putc('|');
     182:	8c e7       	ldi	r24, 0x7C	; 124
     184:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <uart_putc>
    	uart_putc('<');
     188:	8c e3       	ldi	r24, 0x3C	; 60
     18a:	12 c0       	rjmp	.+36     	; 0x1b0 <lcd_data+0x62>
    	break;
    case LCD_CHAR_CAP:
    	uart_putc('|');
     18c:	8c e7       	ldi	r24, 0x7C	; 124
     18e:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <uart_putc>
    	uart_putc('|');
     192:	8c e7       	ldi	r24, 0x7C	; 124
     194:	0d c0       	rjmp	.+26     	; 0x1b0 <lcd_data+0x62>
    	break;
    case LCD_CHAR_RESIS1:
    case LCD_CHAR_RESIS2:
    	uart_putc('R');
     196:	82 e5       	ldi	r24, 0x52	; 82
     198:	0b c0       	rjmp	.+22     	; 0x1b0 <lcd_data+0x62>
//    case LCD_CHAR_DEGREE:	// degree sign
//    	uart_putc(0xf8);	// codepage 437 or 850 has degree
//    	break;
    case LCD_CHAR_U:		//µ
//    	uart_putc(0xe6);	// codepage 437 or 850 has my
    	uart_putc('u');		// better use the ASCII u
     19a:	85 e7       	ldi	r24, 0x75	; 117
     19c:	09 c0       	rjmp	.+18     	; 0x1b0 <lcd_data+0x62>
    	break;
    case LCD_CHAR_OMEGA:	//Omega
//	uart_putc(0xea);	// only codepage 437 has Omega
        uart_putc('O');
     19e:	8f e4       	ldi	r24, 0x4F	; 79
     1a0:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <uart_putc>
        uart_putc('h');
     1a4:	88 e6       	ldi	r24, 0x68	; 104
     1a6:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <uart_putc>
        uart_putc('m');
     1aa:	8d e6       	ldi	r24, 0x6D	; 109
     1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <lcd_data+0x62>
    	break;
    default:
    	uart_putc(temp1);
     1ae:	81 2f       	mov	r24, r17
     1b0:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <uart_putc>
 }
#endif
}
     1b4:	1f 91       	pop	r17
     1b6:	08 95       	ret

000001b8 <lcd_space>:
   lcd_data(temp + '1');
}

// send space character to LCD
void lcd_space(void) {
   lcd_data(' ');
     1b8:	80 e2       	ldi	r24, 0x20	; 32
     1ba:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
}
     1be:	08 95       	ret

000001c0 <lcd_testpin>:
 

// sends numeric character (Pin Number) to the LCD 
// from binary 0 we send ASCII 1 ....
void lcd_testpin(unsigned char temp) {
   lcd_data(temp + '1');
     1c0:	8f 5c       	subi	r24, 0xCF	; 207
     1c2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
}
     1c6:	08 95       	ret

000001c8 <uart_newline>:
}


#ifdef WITH_UART
void uart_newline(void) {
   uart_putc('\r');
     1c8:	8d e0       	ldi	r24, 0x0D	; 13
     1ca:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <uart_putc>
   uart_putc('\n');
     1ce:	8a e0       	ldi	r24, 0x0A	; 10
     1d0:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <uart_putc>
}
     1d4:	08 95       	ret

000001d6 <lcd_command>:
#endif
}
 
// sends a command to the LCD
 
void lcd_command(unsigned char temp1) {
     1d6:	1f 93       	push	r17
     1d8:	18 2f       	mov	r17, r24
        lcd_write_cmd(temp1);		// set RS to 0
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	61 2f       	mov	r22, r17
     1de:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
     1e2:	0e 94 57 0e 	call	0x1cae	; 0x1cae <wait50us>
#ifdef WITH_UART
	if((temp1 == 0x80) || (temp1 == 0xC0)) {
     1e6:	10 38       	cpi	r17, 0x80	; 128
     1e8:	11 f0       	breq	.+4      	; 0x1ee <lcd_command+0x18>
     1ea:	10 3c       	cpi	r17, 0xC0	; 192
     1ec:	11 f4       	brne	.+4      	; 0x1f2 <lcd_command+0x1c>
		uart_newline();
     1ee:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <uart_newline>
	}
#endif
}
     1f2:	1f 91       	pop	r17
     1f4:	08 95       	ret

000001f6 <lcd_clear>:
}
 
// send the command to clear the display 
 
void lcd_clear(void) {
   lcd_command(CLEAR_DISPLAY);
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
   wait_about10ms();
     1fc:	82 e0       	ldi	r24, 0x02	; 2
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	0e 94 ba 01 	call	0x374	; 0x374 <sleep_5ms>
#ifdef WITH_UART
   uart_newline();
     204:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <uart_newline>
#endif
   lcd_line1();			// set cursor to Line1 Column 1, (only for OLED-Display)
     208:	80 e8       	ldi	r24, 0x80	; 128
     20a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
}
     20e:	08 95       	ret

00000210 <lcd_init>:
 
// Initialise: 
// Must be called first .
 
void lcd_init(void) {
   wait_about30ms();
     210:	86 e0       	ldi	r24, 0x06	; 6
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 ba 01 	call	0x374	; 0x374 <sleep_5ms>
   // to initialise, send 3 times to be shure to be in 8 Bit mode
   lcd_write_init(1);
     218:	80 e8       	ldi	r24, 0x80	; 128
     21a:	60 e3       	ldi	r22, 0x30	; 48
     21c:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
   wait_about5ms();
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 ba 01 	call	0x374	; 0x374 <sleep_5ms>
   
   lcd_write_init(1);
     228:	80 e8       	ldi	r24, 0x80	; 128
     22a:	60 e3       	ldi	r22, 0x30	; 48
     22c:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
   wait1ms();
     230:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <wait1ms>

   lcd_write_init(1);
     234:	80 e8       	ldi	r24, 0x80	; 128
     236:	60 e3       	ldi	r22, 0x30	; 48
     238:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
   wait1ms();
     23c:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <wait1ms>

   lcd_write_init(0);		// switch to 4 Bit mode
     240:	80 e8       	ldi	r24, 0x80	; 128
     242:	60 e2       	ldi	r22, 0x20	; 32
     244:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
   wait_about10ms();
     248:	82 e0       	ldi	r24, 0x02	; 2
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 ba 01 	call	0x374	; 0x374 <sleep_5ms>
   lcd_command(CMD1_SetBias | 0x0c);		// 1/4 bias     (5V)
   lcd_command(CMD1_PowerControl | 0x02);	// booster off / set contrast C5:C4 = 2
   lcd_command(CMD1_FollowerControl | 0x09);	// Follower on / Rab2:0 = 1
   lcd_command(CMD1_SetContrast | 0x04);	// set contrast C3:0 = 4
#endif
   lcd_command(CMD_SetIFOptions | 0x08);	// 4Bit / 2 rows / 5x7
     250:	88 e2       	ldi	r24, 0x28	; 40
     252:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>

   lcd_command(CMD_SetDisplayAndCursor | 0x04); // Display on / Cursor off / no Blinking
     256:	8c e0       	ldi	r24, 0x0C	; 12
     258:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>

   lcd_command(CMD_SetEntryMode | 0x02);	// increment / no Scroll    
     25c:	86 e0       	ldi	r24, 0x06	; 6
     25e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
   lcd_clear();
     262:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
}
     266:	08 95       	ret

00000268 <lcd_string>:
#endif
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
     268:	ef 92       	push	r14
     26a:	ff 92       	push	r15
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	e8 2e       	mov	r14, r24
     272:	e7 01       	movw	r28, r14
     274:	7e 01       	movw	r14, r28
     276:	f9 2e       	mov	r15, r25
     278:	e7 01       	movw	r28, r14
    while(*data) {
     27a:	02 c0       	rjmp	.+4      	; 0x280 <lcd_string+0x18>
        lcd_data(*data);
     27c:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
    while(*data) {
     280:	89 91       	ld	r24, Y+
     282:	88 23       	and	r24, r24
     284:	d9 f7       	brne	.-10     	; 0x27c <lcd_string+0x14>
        lcd_data(*data);
        data++;
    }
}
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	ff 90       	pop	r15
     28c:	ef 90       	pop	r14
     28e:	08 95       	ret

00000290 <lcd_pgm_string>:

#ifdef use_lcd_pgm
//Load string from PGM  and send to LCD 
void lcd_pgm_string(const unsigned char *data) {
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = pgm_read_byte(data);
     296:	fe 01       	movw	r30, r28
     298:	84 91       	lpm	r24, Z+
      if((cc==0) || (cc==128)) {
     29a:	88 23       	and	r24, r24
     29c:	31 f0       	breq	.+12     	; 0x2aa <lcd_pgm_string+0x1a>
     29e:	80 38       	cpi	r24, 0x80	; 128
     2a0:	21 f0       	breq	.+8      	; 0x2aa <lcd_pgm_string+0x1a>
         return;
      }
      lcd_data(cc);
     2a2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
      data++;
     2a6:	21 96       	adiw	r28, 0x01	; 1
   }
     2a8:	f6 cf       	rjmp	.-20     	; 0x296 <lcd_pgm_string+0x6>
}
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	08 95       	ret

000002b0 <lcd_fix_string>:
#endif

//Load string from PGM or EEprom and send to LCD 
void lcd_fix_string(const unsigned char *data) {
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = MEM_read_byte(data);
     2b6:	ce 01       	movw	r24, r28
     2b8:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__eerd_byte_m168>
      if((cc==0) || (cc==128)) {
     2bc:	88 23       	and	r24, r24
     2be:	31 f0       	breq	.+12     	; 0x2cc <lcd_fix_string+0x1c>
     2c0:	80 38       	cpi	r24, 0x80	; 128
     2c2:	21 f0       	breq	.+8      	; 0x2cc <lcd_fix_string+0x1c>
         return;
      }
      lcd_data(cc);
     2c4:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
      data++;
     2c8:	21 96       	adiw	r28, 0x01	; 1
   }
     2ca:	f5 cf       	rjmp	.-22     	; 0x2b6 <lcd_fix_string+0x6>
}
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	08 95       	ret

000002d2 <lcd_fix_customchar>:

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
     2d2:	0f 93       	push	r16
     2d4:	1f 93       	push	r17
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	8c 01       	movw	r16, r24
     2dc:	c0 e0       	ldi	r28, 0x00	; 0
     2de:	d0 e0       	ldi	r29, 0x00	; 0
    for(uint8_t i=0;i<8;i++) {
        lcd_data(MEM_read_byte(chardata));
     2e0:	c8 01       	movw	r24, r16
     2e2:	8c 0f       	add	r24, r28
     2e4:	9d 1f       	adc	r25, r29
     2e6:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__eerd_byte_m168>
     2ea:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
     2ee:	21 96       	adiw	r28, 0x01	; 1
   }
}

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
    for(uint8_t i=0;i<8;i++) {
     2f0:	c8 30       	cpi	r28, 0x08	; 8
     2f2:	d1 05       	cpc	r29, r1
     2f4:	a9 f7       	brne	.-22     	; 0x2e0 <lcd_fix_customchar+0xe>
        lcd_data(MEM_read_byte(chardata));
        chardata++;
    }
}
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	1f 91       	pop	r17
     2fc:	0f 91       	pop	r16
     2fe:	08 95       	ret

00000300 <_lcd_hw_write>:
     300:	80 fd       	sbrc	r24, 0
     302:	5c 9a       	sbi	0x0b, 4	; 11
     304:	80 ff       	sbrs	r24, 0
     306:	5c 98       	cbi	0x0b, 4	; 11
     308:	54 9a       	sbi	0x0a, 4	; 10
     30a:	00 00       	nop
     30c:	5d 9a       	sbi	0x0b, 5	; 11
     30e:	55 9a       	sbi	0x0a, 5	; 10
     310:	58 98       	cbi	0x0b, 0	; 11
     312:	59 98       	cbi	0x0b, 1	; 11
     314:	5a 98       	cbi	0x0b, 2	; 11
     316:	5b 98       	cbi	0x0b, 3	; 11
     318:	64 fd       	sbrc	r22, 4
     31a:	58 9a       	sbi	0x0b, 0	; 11
     31c:	50 9a       	sbi	0x0a, 0	; 10
     31e:	65 fd       	sbrc	r22, 5
     320:	59 9a       	sbi	0x0b, 1	; 11
     322:	51 9a       	sbi	0x0a, 1	; 10
     324:	66 fd       	sbrc	r22, 6
     326:	5a 9a       	sbi	0x0b, 2	; 11
     328:	52 9a       	sbi	0x0a, 2	; 10
     32a:	67 fd       	sbrc	r22, 7
     32c:	5b 9a       	sbi	0x0b, 3	; 11
     32e:	53 9a       	sbi	0x0a, 3	; 10
     330:	00 00       	nop
     332:	5d 98       	cbi	0x0b, 5	; 11
     334:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <wait1us>
     338:	87 fd       	sbrc	r24, 7
     33a:	11 c0       	rjmp	.+34     	; 0x35e <_lcd_hw_write_exit>
     33c:	5d 9a       	sbi	0x0b, 5	; 11
     33e:	58 98       	cbi	0x0b, 0	; 11
     340:	59 98       	cbi	0x0b, 1	; 11
     342:	5a 98       	cbi	0x0b, 2	; 11
     344:	5b 98       	cbi	0x0b, 3	; 11
     346:	60 fd       	sbrc	r22, 0
     348:	58 9a       	sbi	0x0b, 0	; 11
     34a:	61 fd       	sbrc	r22, 1
     34c:	59 9a       	sbi	0x0b, 1	; 11
     34e:	62 fd       	sbrc	r22, 2
     350:	5a 9a       	sbi	0x0b, 2	; 11
     352:	63 fd       	sbrc	r22, 3
     354:	5b 9a       	sbi	0x0b, 3	; 11
     356:	00 00       	nop
     358:	5d 98       	cbi	0x0b, 5	; 11
     35a:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <wait1us>

0000035e <_lcd_hw_write_exit>:
     35e:	08 95       	ret

00000360 <__vector_7>:
#define MAIN_C
#include "Transistortester.h"

#ifndef INHIBIT_SLEEP_MODE
  // prepare sleep mode
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
     360:	18 95       	reti

00000362 <__vector_21>:
  EMPTY_INTERRUPT(ADC_vect);
     362:	18 95       	reti

00000364 <lcd_clear_line>:

}   // end main


#ifdef LCD_CLEAR
void lcd_clear_line(void) {
     364:	1f 93       	push	r17
     366:	14 e1       	ldi	r17, 0x14	; 20
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    lcd_space();
     368:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
     36c:	11 50       	subi	r17, 0x01	; 1

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
     36e:	e1 f7       	brne	.-8      	; 0x368 <lcd_clear_line+0x4>
    lcd_space();
 }
}
     370:	1f 91       	pop	r17
     372:	08 95       	ret

00000374 <sleep_5ms>:
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
      pause = 0;
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     374:	42 e0       	ldi	r20, 0x02	; 2
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     376:	1c c0       	rjmp	.+56     	; 0x3b0 <sleep_5ms+0x3c>
  {
 #if 3000 > RESTART_DELAY_US
   if (pause > 1)
     378:	82 30       	cpi	r24, 0x02	; 2
     37a:	91 05       	cpc	r25, r1
     37c:	18 f0       	brcs	.+6      	; 0x384 <sleep_5ms+0x10>
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
      pause -= 2;
     37e:	02 97       	sbiw	r24, 0x02	; 2
  {
 #if 3000 > RESTART_DELAY_US
   if (pause > 1)
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
     380:	3e e3       	ldi	r19, 0x3E	; 62
     382:	03 c0       	rjmp	.+6      	; 0x38a <sleep_5ms+0x16>
      pause -= 2;
     } else {
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
     384:	37 e1       	ldi	r19, 0x17	; 23
      pause = 0;
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	90 e0       	ldi	r25, 0x00	; 0
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
     38a:	20 91 b2 00 	lds	r18, 0x00B2
     38e:	23 0f       	add	r18, r19
     390:	20 93 b3 00 	sts	0x00B3, r18
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     394:	40 93 70 00 	sts	0x0070, r20
   set_sleep_mode(SLEEP_MODE_PWR_SAVE);
     398:	23 b7       	in	r18, 0x33	; 51
     39a:	21 7f       	andi	r18, 0xF1	; 241
     39c:	26 60       	ori	r18, 0x06	; 6
     39e:	23 bf       	out	0x33, r18	; 51
//   set_sleep_mode(SLEEP_MODE_IDLE);
   sleep_mode();
     3a0:	23 b7       	in	r18, 0x33	; 51
     3a2:	21 60       	ori	r18, 0x01	; 1
     3a4:	23 bf       	out	0x33, r18	; 51
     3a6:	88 95       	sleep
     3a8:	23 b7       	in	r18, 0x33	; 51
     3aa:	2e 7f       	andi	r18, 0xFE	; 254
     3ac:	23 bf       	out	0x33, r18	; 51
// wake up after output compare match interrupt
 #else
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
 #endif
   wdt_reset();
     3ae:	a8 95       	wdr
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     3b0:	00 97       	sbiw	r24, 0x00	; 0
     3b2:	11 f7       	brne	.-60     	; 0x378 <sleep_5ms+0x4>
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
 #endif
   wdt_reset();
  }
TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
     3b4:	10 92 70 00 	sts	0x0070, r1
}
     3b8:	08 95       	ret

000003ba <ShortedProbes>:
 *  - 0 if not shorted
 *  - 1 if shorted
 */

uint8_t ShortedProbes(uint8_t Probe1, uint8_t Probe2)
{
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	df 93       	push	r29
     3c0:	cf 93       	push	r28
     3c2:	0f 92       	push	r0
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
   *  Set up a voltage divider between the two probes:
   *  - Probe1: Rl pull-up
   *  - Probe2: Rl pull-down
   */

  ADC_DDR =  TXD_MSK;		// all-Pins to Input
     3c8:	98 e0       	ldi	r25, 0x08	; 8
     3ca:	97 b9       	out	0x07, r25	; 7
  ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
     3cc:	98 b9       	out	0x08, r25	; 8
  R_PORT = pgm_read_byte(&PinRLtab[Probe1]);
     3ce:	e8 2f       	mov	r30, r24
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	ec 50       	subi	r30, 0x0C	; 12
     3d4:	ff 4f       	sbci	r31, 0xFF	; 255
     3d6:	94 91       	lpm	r25, Z+
     3d8:	95 b9       	out	0x05, r25	; 5
  R_DDR = pgm_read_byte(&PinRLtab[Probe1]) | pgm_read_byte(&PinRLtab[Probe2]);
     3da:	e6 2f       	mov	r30, r22
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	ec 50       	subi	r30, 0x0C	; 12
     3e0:	ff 4f       	sbci	r31, 0xFF	; 255
     3e2:	e4 91       	lpm	r30, Z+
     3e4:	e9 2b       	or	r30, r25
     3e6:	e4 b9       	out	0x04, r30	; 4

  /* read voltages */
  U1 = ReadADC(Probe1);
     3e8:	69 83       	std	Y+1, r22	; 0x01
     3ea:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
     3ee:	8c 01       	movw	r16, r24
  U2 = ReadADC(Probe2);
     3f0:	69 81       	ldd	r22, Y+1	; 0x01
     3f2:	86 2f       	mov	r24, r22
     3f4:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
     3f8:	ac 01       	movw	r20, r24
   *  We expect both probe voltages to be about the same and
   *  to be half of Vcc (allowed difference +/- 20mV).
   */
  #define MAX_UH_DIFF 20

  URH = ADCconfig.U_AVCC / 2;
     3fa:	20 91 37 01 	lds	r18, 0x0137
     3fe:	30 91 38 01 	lds	r19, 0x0138
     402:	36 95       	lsr	r19
     404:	27 95       	ror	r18
  if ((U1 > (URH - MAX_UH_DIFF)) && (U1 < (URH + MAX_UH_DIFF)))
     406:	c9 01       	movw	r24, r18
     408:	44 97       	sbiw	r24, 0x14	; 20
     40a:	80 17       	cp	r24, r16
     40c:	91 07       	cpc	r25, r17
     40e:	60 f4       	brcc	.+24     	; 0x428 <ShortedProbes+0x6e>
     410:	2c 5e       	subi	r18, 0xEC	; 236
     412:	3f 4f       	sbci	r19, 0xFF	; 255
     414:	02 17       	cp	r16, r18
     416:	13 07       	cpc	r17, r19
     418:	38 f4       	brcc	.+14     	; 0x428 <ShortedProbes+0x6e>
  {
    if ((U2 > (URH - MAX_UH_DIFF)) && (U2 < (URH + MAX_UH_DIFF)))
     41a:	84 17       	cp	r24, r20
     41c:	95 07       	cpc	r25, r21
     41e:	20 f4       	brcc	.+8      	; 0x428 <ShortedProbes+0x6e>
 *  - 1 if shorted
 */

uint8_t ShortedProbes(uint8_t Probe1, uint8_t Probe2)
{
  uint8_t           Flag1 = 0;      /* return value */
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	42 17       	cp	r20, r18
     424:	53 07       	cpc	r21, r19
     426:	08 f0       	brcs	.+2      	; 0x42a <ShortedProbes+0x70>
     428:	80 e0       	ldi	r24, 0x00	; 0
      Flag1 = 1;
    }
  }

  /* reset port */
  R_DDR = 0;
     42a:	14 b8       	out	0x04, r1	; 4

  return Flag1;
}
     42c:	0f 90       	pop	r0
     42e:	cf 91       	pop	r28
     430:	df 91       	pop	r29
     432:	1f 91       	pop	r17
     434:	0f 91       	pop	r16
     436:	08 95       	ret

00000438 <AllProbesShorted>:
 *  - 0 if no probes are short-circuited
 *  - number of probe pairs short-circuited (3 = all)
 */

uint8_t AllProbesShorted(void)
{
     438:	1f 93       	push	r17
  uint8_t           Flag2;      /* return value */

  /* check all possible combinations */
  Flag2 = ShortedProbes(TP1, TP2);
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	61 e0       	ldi	r22, 0x01	; 1
     43e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <ShortedProbes>
     442:	18 2f       	mov	r17, r24
  Flag2 += ShortedProbes(TP1, TP3);
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	62 e0       	ldi	r22, 0x02	; 2
     448:	0e 94 dd 01 	call	0x3ba	; 0x3ba <ShortedProbes>
     44c:	18 0f       	add	r17, r24
  Flag2 += ShortedProbes(TP2, TP3);
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	62 e0       	ldi	r22, 0x02	; 2
     452:	0e 94 dd 01 	call	0x3ba	; 0x3ba <ShortedProbes>

  return Flag2;
}
     456:	81 0f       	add	r24, r17
     458:	1f 91       	pop	r17
     45a:	08 95       	ret

0000045c <AutoCheck>:
// Selftest of the device and calibration 
void AutoCheck(void) {
     45c:	2f 92       	push	r2
     45e:	3f 92       	push	r3
     460:	4f 92       	push	r4
     462:	5f 92       	push	r5
     464:	6f 92       	push	r6
     466:	7f 92       	push	r7
     468:	8f 92       	push	r8
     46a:	9f 92       	push	r9
     46c:	af 92       	push	r10
     46e:	bf 92       	push	r11
     470:	cf 92       	push	r12
     472:	df 92       	push	r13
     474:	ef 92       	push	r14
     476:	ff 92       	push	r15
     478:	0f 93       	push	r16
     47a:	1f 93       	push	r17
     47c:	df 93       	push	r29
     47e:	cf 93       	push	r28
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
     484:	2e 97       	sbiw	r28, 0x0e	; 14
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	f8 94       	cli
     48a:	de bf       	out	0x3e, r29	; 62
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	cd bf       	out	0x3d, r28	; 61
  int8_t udiff;		// difference between ADC Voltage with VCC or Bandgap reference
  int8_t udiff2;
  #endif
 #endif
  #define RequireShortedProbes
  if (AllProbesShorted() != 3) return;
     490:	0e 94 1c 02 	call	0x438	; 0x438 <AllProbesShorted>
     494:	83 30       	cpi	r24, 0x03	; 3
     496:	09 f0       	breq	.+2      	; 0x49a <AutoCheck+0x3e>
     498:	d5 c3       	rjmp	.+1962   	; 0xc44 <__stack+0x745>
  lcd_clear();
     49a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_fix_string(SELFTEST);		// "Selftest mode.."
     49e:	8c eb       	ldi	r24, 0xBC	; 188
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  lcd_line2();
     4a6:	80 ec       	ldi	r24, 0xC0	; 192
     4a8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_data('?');			// wait for key pressed
     4ac:	8f e3       	ldi	r24, 0x3F	; 63
     4ae:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
  for (tt=0;tt<50;tt++) {
     4b2:	10 e0       	ldi	r17, 0x00	; 0
     if ((ON_PIN_REG & (1<<RST_PIN)) != 0) break;	// key is unpressed
     4b4:	4f 99       	sbic	0x09, 7	; 9
     4b6:	08 c0       	rjmp	.+16     	; 0x4c8 <AutoCheck+0x6c>
     wait_about10ms();			// key is still pressed, wait for release
     4b8:	82 e0       	ldi	r24, 0x02	; 2
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	0e 94 ba 01 	call	0x374	; 0x374 <sleep_5ms>
  if (AllProbesShorted() != 3) return;
  lcd_clear();
  lcd_fix_string(SELFTEST);		// "Selftest mode.."
  lcd_line2();
  lcd_data('?');			// wait for key pressed
  for (tt=0;tt<50;tt++) {
     4c0:	1f 5f       	subi	r17, 0xFF	; 255
     4c2:	12 33       	cpi	r17, 0x32	; 50
     4c4:	b9 f7       	brne	.-18     	; 0x4b4 <AutoCheck+0x58>
     4c6:	09 c0       	rjmp	.+18     	; 0x4da <AutoCheck+0x7e>
     if ((ON_PIN_REG & (1<<RST_PIN)) != 0) break;	// key is unpressed
     4c8:	18 ec       	ldi	r17, 0xC8	; 200
     wait_about10ms();			// key is still pressed, wait for release
    }
  if (tt == 50) goto no_selftest;		// key is more than 500ms pressed
  for (tt=0;tt<200;tt++) {
     if(!(ON_PIN_REG & (1<<RST_PIN))) goto begin_selftest;	// key is pressed again
     4ca:	4f 9b       	sbis	0x09, 7	; 9
     4cc:	0d c0       	rjmp	.+26     	; 0x4e8 <AutoCheck+0x8c>
     wait_about10ms();
     4ce:	82 e0       	ldi	r24, 0x02	; 2
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	0e 94 ba 01 	call	0x374	; 0x374 <sleep_5ms>
     4d6:	11 50       	subi	r17, 0x01	; 1
  for (tt=0;tt<50;tt++) {
     if ((ON_PIN_REG & (1<<RST_PIN)) != 0) break;	// key is unpressed
     wait_about10ms();			// key is still pressed, wait for release
    }
  if (tt == 50) goto no_selftest;		// key is more than 500ms pressed
  for (tt=0;tt<200;tt++) {
     4d8:	c1 f7       	brne	.-16     	; 0x4ca <AutoCheck+0x6e>
     if(!(ON_PIN_REG & (1<<RST_PIN))) goto begin_selftest;	// key is pressed again
     wait_about10ms();
    }
  // no key pressed for 2s
no_selftest:
  lcd_clear();
     4da:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_fix2_string(VERSION_str);	//"Version ..."
     4de:	88 ed       	ldi	r24, 0xD8	; 216
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
  return;
     4e6:	ae c3       	rjmp	.+1884   	; 0xc44 <__stack+0x745>
begin_selftest:
  lcd_line2();
     4e8:	80 ec       	ldi	r24, 0xC0	; 192
     4ea:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix2_string(R0_str);		// "R0="
     4ee:	80 ef       	ldi	r24, 0xF0	; 240
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[2]), (int8_t)0);	// clear zero offset
     4f6:	84 ed       	ldi	r24, 0xD4	; 212
     4f8:	91 e0       	ldi	r25, 0x01	; 1
     4fa:	60 e0       	ldi	r22, 0x00	; 0
     4fc:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <__eewr_byte_m168>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (int8_t)0);	// clear zero offset
     500:	85 ed       	ldi	r24, 0xD5	; 213
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	60 e0       	ldi	r22, 0x00	; 0
     506:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <__eewr_byte_m168>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)0);	// clear zero offset
     50a:	83 ed       	ldi	r24, 0xD3	; 211
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	60 e0       	ldi	r22, 0x00	; 0
     510:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <__eewr_byte_m168>

  adcmv[0] = GetESR(TP3, TP1);
     514:	82 e0       	ldi	r24, 0x02	; 2
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	0e 94 9c 1b 	call	0x3738	; 0x3738 <GetESR>
     51c:	7c 01       	movw	r14, r24
     51e:	9a 83       	std	Y+2, r25	; 0x02
     520:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = GetESR(TP3, TP2);
     522:	82 e0       	ldi	r24, 0x02	; 2
     524:	61 e0       	ldi	r22, 0x01	; 1
     526:	0e 94 9c 1b 	call	0x3738	; 0x3738 <GetESR>
     52a:	6c 01       	movw	r12, r24
     52c:	9c 83       	std	Y+4, r25	; 0x04
     52e:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = GetESR(TP2, TP1);
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	0e 94 9c 1b 	call	0x3738	; 0x3738 <GetESR>
     538:	5c 01       	movw	r10, r24
     53a:	9e 83       	std	Y+6, r25	; 0x06
     53c:	8d 83       	std	Y+5, r24	; 0x05
  DisplayValue(adcmv[0],-2,' ',3);
     53e:	b7 01       	movw	r22, r14
     540:	88 27       	eor	r24, r24
     542:	77 fd       	sbrc	r23, 7
     544:	80 95       	com	r24
     546:	98 2f       	mov	r25, r24
     548:	4e ef       	ldi	r20, 0xFE	; 254
     54a:	20 e2       	ldi	r18, 0x20	; 32
     54c:	03 e0       	ldi	r16, 0x03	; 3
     54e:	0e 94 cd 0c 	call	0x199a	; 0x199a <DisplayValue>
  DisplayValue(adcmv[1],-2,' ',3);
     552:	b6 01       	movw	r22, r12
     554:	88 27       	eor	r24, r24
     556:	77 fd       	sbrc	r23, 7
     558:	80 95       	com	r24
     55a:	98 2f       	mov	r25, r24
     55c:	4e ef       	ldi	r20, 0xFE	; 254
     55e:	20 e2       	ldi	r18, 0x20	; 32
     560:	0e 94 cd 0c 	call	0x199a	; 0x199a <DisplayValue>
  DisplayValue(adcmv[2],-2,LCD_CHAR_OMEGA,3);
     564:	b5 01       	movw	r22, r10
     566:	88 27       	eor	r24, r24
     568:	77 fd       	sbrc	r23, 7
     56a:	80 95       	com	r24
     56c:	98 2f       	mov	r25, r24
     56e:	4e ef       	ldi	r20, 0xFE	; 254
     570:	24 ef       	ldi	r18, 0xF4	; 244
     572:	0e 94 cd 0c 	call	0x199a	; 0x199a <DisplayValue>
  if (adcmv[0] < 90) {
     576:	2a e5       	ldi	r18, 0x5A	; 90
     578:	e2 16       	cp	r14, r18
     57a:	f1 04       	cpc	r15, r1
     57c:	2c f4       	brge	.+10     	; 0x588 <__stack+0x89>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[2]), (int8_t)adcmv[0]);	// fix zero offset
     57e:	84 ed       	ldi	r24, 0xD4	; 212
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	6e 2d       	mov	r22, r14
     584:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <__eewr_byte_m168>
  }
  if (adcmv[1] < 90) {
     588:	8a e5       	ldi	r24, 0x5A	; 90
     58a:	c8 16       	cp	r12, r24
     58c:	d1 04       	cpc	r13, r1
     58e:	2c f4       	brge	.+10     	; 0x59a <__stack+0x9b>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (int8_t)adcmv[1]);	// fix zero offset
     590:	85 ed       	ldi	r24, 0xD5	; 213
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	6c 2d       	mov	r22, r12
     596:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <__eewr_byte_m168>
  }
  if (adcmv[2] < 90) {
     59a:	ea e5       	ldi	r30, 0x5A	; 90
     59c:	ae 16       	cp	r10, r30
     59e:	b1 04       	cpc	r11, r1
     5a0:	2c f4       	brge	.+10     	; 0x5ac <__stack+0xad>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
     5a2:	83 ed       	ldi	r24, 0xD3	; 211
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	6a 2d       	mov	r22, r10
     5a8:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <__eewr_byte_m168>
  }
  wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
     5ac:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <wait_for_key_5s_line2>
     5b0:	88 24       	eor	r8, r8
     5b2:	99 24       	eor	r9, r9
//  } /* end for tt */

#ifdef EXTENDED_TESTS
 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     5b4:	11 e0       	ldi	r17, 0x01	; 1
           adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
           lcd_fix_string(RH1H);	// "RH_Hi="
        }
        if (tt == 7) { // is the voltage of all R_H / R_L dividers correct?
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + (unsigned long)R_H_VAL*100));
           R_PORT = 1<<PIN_RH1;		//RH1 to VCC
     5b6:	82 e0       	ldi	r24, 0x02	; 2
     5b8:	f8 2e       	mov	r15, r24
           R_DDR = (1<<PIN_RH1) | (1<<PIN_RL1);	//RH1 to +, RL1 to -
           adcmv[0] = W20msReadADC(TP1);
           adcmv[0] -= u680;
           R_PORT = 1<<PIN_RH2;		//RH2 to VCC
     5ba:	08 e0       	ldi	r16, 0x08	; 8
     5bc:	e0 2e       	mov	r14, r16
           R_DDR = (1<<PIN_RH2) | (1<<PIN_RL2);	//RH2 to +, RL2 to -
           adcmv[1] = W20msReadADC(TP2);
           adcmv[1] -= u680;
           R_PORT = 1<<PIN_RH3;		//RH3 to VCC
     5be:	b0 e2       	ldi	r27, 0x20	; 32
     5c0:	bb 2e       	mov	r11, r27
           lcd_fix_string(RLRL);	// "RLRL"
        }
                                        //############################################
        if (tt == 3) { // how equal are the RH resistors
           R_PORT = 1<<PIN_RH1;		//RH1 to VCC
           R_DDR = (1<<PIN_RH1) | (1<<PIN_RH2);	//RH2 to -
     5c2:	aa e0       	ldi	r26, 0x0A	; 10
     5c4:	da 2e       	mov	r13, r26
     5c6:	57 c1       	rjmp	.+686    	; 0x876 <__stack+0x377>
#ifdef EXTENDED_TESTS
 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
        lcd_line2();			//Cursor to column 1, row 2
     5c8:	80 ec       	ldi	r24, 0xC0	; 192
     5ca:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_clear_line();		// clear total line
     5ce:	0e 94 b2 01 	call	0x364	; 0x364 <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
     5d2:	80 e8       	ldi	r24, 0x80	; 128
     5d4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_clear_line();		// clear total line
     5d8:	0e 94 b2 01 	call	0x364	; 0x364 <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
     5dc:	80 e8       	ldi	r24, 0x80	; 128
     5de:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_data('T');			//output the Testmode "T"
     5e2:	84 e5       	ldi	r24, 0x54	; 84
     5e4:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
        u2lcd(tt);		//lcd_string(utoa(tt, outval, 10));	//output Test number
     5e8:	c4 01       	movw	r24, r8
     5ea:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <u2lcd>
        lcd_space();
     5ee:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
                                        //############################################
        if (tt == 1) {   // output of reference voltage and factors for capacity measurement
     5f2:	fc 2d       	mov	r31, r12
     5f4:	f1 30       	cpi	r31, 0x01	; 1
     5f6:	11 f5       	brne	.+68     	; 0x63c <__stack+0x13d>
           Calibrate_UR();		// get Reference voltage, Pin resistance
     5f8:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <Calibrate_UR>
           lcd_fix2_string(URefT);	//"URef="
     5fc:	86 ee       	ldi	r24, 0xE6	; 230
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
           DisplayValue(ref_mv,-3,'V',4);
     604:	60 91 3b 01 	lds	r22, 0x013B
     608:	70 91 3c 01 	lds	r23, 0x013C
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	4d ef       	ldi	r20, 0xFD	; 253
     612:	26 e5       	ldi	r18, 0x56	; 86
     614:	04 e0       	ldi	r16, 0x04	; 4
     616:	0e 94 cd 0c 	call	0x199a	; 0x199a <DisplayValue>
           lcd_line2();			//Cursor to column 1, row 2
     61a:	80 ec       	ldi	r24, 0xC0	; 192
     61c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
           lcd_fix2_string(RHfakt);	//"RHf="
     620:	8b ee       	ldi	r24, 0xEB	; 235
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
           u2lcd(RHmultip);	//lcd_string(utoa(RHmultip, outval, 10));
     628:	80 91 00 01 	lds	r24, 0x0100
     62c:	90 91 01 01 	lds	r25, 0x0101
     630:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <u2lcd>
           ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
     634:	2e eb       	ldi	r18, 0xBE	; 190
     636:	20 93 33 01 	sts	0x0133, r18
     63a:	00 c1       	rjmp	.+512    	; 0x83c <__stack+0x33d>
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
     63c:	8c 2d       	mov	r24, r12
     63e:	82 30       	cpi	r24, 0x02	; 2
     640:	99 f5       	brne	.+102    	; 0x6a8 <__stack+0x1a9>
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
     642:	60 91 37 01 	lds	r22, 0x0137
     646:	70 91 38 01 	lds	r23, 0x0138
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	2e e4       	ldi	r18, 0x4E	; 78
     650:	3b e1       	ldi	r19, 0x1B	; 27
     652:	40 e0       	ldi	r20, 0x00	; 0
     654:	50 e0       	ldi	r21, 0x00	; 0
     656:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
     65a:	a3 01       	movw	r20, r6
     65c:	92 01       	movw	r18, r4
     65e:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__divmodsi4>
     662:	89 01       	movw	r16, r18
           R_PORT = 1<<PIN_RL1;		//RL1 to VCC
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	85 b9       	out	0x05, r24	; 5
           R_DDR = (1<<PIN_RL1) | (1<<PIN_RL2);	//RL2 to -
     668:	e5 e0       	ldi	r30, 0x05	; 5
     66a:	e4 b9       	out	0x04, r30	; 4
           adcmv[0] = W20msReadADC(TP1);
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	0e 94 cd 14 	call	0x299a	; 0x299a <W20msReadADC>
           adcmv[0] -= u680;
     672:	80 1b       	sub	r24, r16
     674:	91 0b       	sbc	r25, r17
     676:	9a 83       	std	Y+2, r25	; 0x02
     678:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (1<<PIN_RL1) | (1<<PIN_RL3);	//RL3 to -
     67a:	f1 e1       	ldi	r31, 0x11	; 17
     67c:	f4 b9       	out	0x04, r31	; 4
           adcmv[1] = W20msReadADC(TP1);
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	0e 94 cd 14 	call	0x299a	; 0x299a <W20msReadADC>
           adcmv[1] -= u680;
     684:	80 1b       	sub	r24, r16
     686:	91 0b       	sbc	r25, r17
     688:	9c 83       	std	Y+4, r25	; 0x04
     68a:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 1<<PIN_RL2;		//RL2 to VCC
     68c:	24 e0       	ldi	r18, 0x04	; 4
     68e:	25 b9       	out	0x05, r18	; 5
           R_DDR = (1<<PIN_RL2) | (1<<PIN_RL3);	//RL3 to -
     690:	84 e1       	ldi	r24, 0x14	; 20
     692:	84 b9       	out	0x04, r24	; 4
           adcmv[2] = W20msReadADC(TP2);
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	0e 94 cd 14 	call	0x299a	; 0x299a <W20msReadADC>
           adcmv[2] -= u680;
     69a:	80 1b       	sub	r24, r16
     69c:	91 0b       	sbc	r25, r17
     69e:	9e 83       	std	Y+6, r25	; 0x06
     6a0:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RLRL);	// "RLRL"
     6a2:	8f e5       	ldi	r24, 0x5F	; 95
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	b1 c0       	rjmp	.+354    	; 0x80a <__stack+0x30b>
        }
                                        //############################################
        if (tt == 3) { // how equal are the RH resistors
     6a8:	ec 2d       	mov	r30, r12
     6aa:	e3 30       	cpi	r30, 0x03	; 3
     6ac:	29 f5       	brne	.+74     	; 0x6f8 <__stack+0x1f9>
           R_PORT = 1<<PIN_RH1;		//RH1 to VCC
     6ae:	f5 b8       	out	0x05, r15	; 5
           R_DDR = (1<<PIN_RH1) | (1<<PIN_RH2);	//RH2 to -
     6b0:	d4 b8       	out	0x04, r13	; 4
           adcmv[0] = W20msReadADC(TP1);
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	0e 94 cd 14 	call	0x299a	; 0x299a <W20msReadADC>
           adcmv[3] = ADCconfig.U_AVCC / 2;
     6b8:	00 91 37 01 	lds	r16, 0x0137
     6bc:	10 91 38 01 	lds	r17, 0x0138
     6c0:	16 95       	lsr	r17
     6c2:	07 95       	ror	r16
     6c4:	18 87       	std	Y+8, r17	; 0x08
     6c6:	0f 83       	std	Y+7, r16	; 0x07
           adcmv[0] -= adcmv[3];
     6c8:	80 1b       	sub	r24, r16
     6ca:	91 0b       	sbc	r25, r17
     6cc:	9a 83       	std	Y+2, r25	; 0x02
     6ce:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (1<<PIN_RH1) | (1<<PIN_RH3);	//RH3 to -
     6d0:	34 b8       	out	0x04, r3	; 4
           adcmv[1] = W20msReadADC(TP1);
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	0e 94 cd 14 	call	0x299a	; 0x299a <W20msReadADC>
           adcmv[1] -= adcmv[3];
     6d8:	80 1b       	sub	r24, r16
     6da:	91 0b       	sbc	r25, r17
     6dc:	9c 83       	std	Y+4, r25	; 0x04
     6de:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 1<<PIN_RH2;		//RH2 to VCC
     6e0:	e5 b8       	out	0x05, r14	; 5
           R_DDR = (1<<PIN_RH2) | (1<<PIN_RH3);	//RH3 to -
     6e2:	24 b8       	out	0x04, r2	; 4
           adcmv[2] = W20msReadADC(TP2);
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	0e 94 cd 14 	call	0x299a	; 0x299a <W20msReadADC>
           adcmv[2] -= adcmv[3];
     6ea:	80 1b       	sub	r24, r16
     6ec:	91 0b       	sbc	r25, r17
     6ee:	9e 83       	std	Y+6, r25	; 0x06
     6f0:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RHRH);	// "RHRH"
     6f2:	8d e6       	ldi	r24, 0x6D	; 109
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	89 c0       	rjmp	.+274    	; 0x80a <__stack+0x30b>
        }
                                        //############################################
        if (tt == 4) { // Text release probes
     6f8:	fc 2d       	mov	r31, r12
     6fa:	f4 30       	cpi	r31, 0x04	; 4
     6fc:	51 f4       	brne	.+20     	; 0x712 <__stack+0x213>
           lcd_fix_string(RELPROBE);	// "Release Probes"
     6fe:	8c ec       	ldi	r24, 0xCC	; 204
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           if (AllProbesShorted() != 0) ww = MAX_REP-2;
     706:	0e 94 1c 02 	call	0x438	; 0x438 <AllProbesShorted>
     70a:	88 23       	and	r24, r24
     70c:	09 f0       	breq	.+2      	; 0x710 <__stack+0x211>
     70e:	97 c2       	rjmp	.+1326   	; 0xc3e <__stack+0x73f>
     710:	82 c0       	rjmp	.+260    	; 0x816 <__stack+0x317>
        }
                                        //############################################
        if (tt == 5) { // can we switch the ADC pins to GND across R_H resistor?
     712:	2c 2d       	mov	r18, r12
     714:	25 30       	cpi	r18, 0x05	; 5
     716:	b1 f4       	brne	.+44     	; 0x744 <__stack+0x245>
           R_PORT = 0;
     718:	15 b8       	out	0x05, r1	; 5
           R_DDR = 1<<PIN_RH1;		//Pin 1 over R_H to GND
     71a:	f4 b8       	out	0x04, r15	; 4
           adcmv[0] = W20msReadADC(TP1);
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	0e 94 cd 14 	call	0x299a	; 0x299a <W20msReadADC>
     722:	9a 83       	std	Y+2, r25	; 0x02
     724:	89 83       	std	Y+1, r24	; 0x01

           R_DDR = 1<<PIN_RH2;		//Pin 2 over R_H to GND
     726:	e4 b8       	out	0x04, r14	; 4
           adcmv[1] = W20msReadADC(TP2);
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	0e 94 cd 14 	call	0x299a	; 0x299a <W20msReadADC>
     72e:	9c 83       	std	Y+4, r25	; 0x04
     730:	8b 83       	std	Y+3, r24	; 0x03

           R_DDR = 1<<PIN_RH3;		//Pin 3 over R_H to GND
     732:	b4 b8       	out	0x04, r11	; 4
           adcmv[2] = W20msReadADC(TP3);
     734:	82 e0       	ldi	r24, 0x02	; 2
     736:	0e 94 cd 14 	call	0x299a	; 0x299a <W20msReadADC>
     73a:	9e 83       	std	Y+6, r25	; 0x06
     73c:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RH1L);	// "RH_Lo="
     73e:	87 e5       	ldi	r24, 0x57	; 87
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	63 c0       	rjmp	.+198    	; 0x80a <__stack+0x30b>
        }
                                        //############################################
        if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
     744:	8c 2d       	mov	r24, r12
     746:	86 30       	cpi	r24, 0x06	; 6
     748:	51 f5       	brne	.+84     	; 0x79e <__stack+0x29f>
           R_DDR = 1<<PIN_RH1;		//Pin 1 over R_H to VCC
     74a:	f4 b8       	out	0x04, r15	; 4
           R_PORT = 1<<PIN_RH1;
     74c:	f5 b8       	out	0x05, r15	; 5
           adcmv[0] = W20msReadADC(TP1) - ADCconfig.U_AVCC;
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	0e 94 cd 14 	call	0x299a	; 0x299a <W20msReadADC>
     754:	20 91 37 01 	lds	r18, 0x0137
     758:	30 91 38 01 	lds	r19, 0x0138
     75c:	82 1b       	sub	r24, r18
     75e:	93 0b       	sbc	r25, r19
     760:	9a 83       	std	Y+2, r25	; 0x02
     762:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = 1<<PIN_RH2;		//Pin 2 over R_H to VCC
     764:	e4 b8       	out	0x04, r14	; 4
           R_PORT = 1<<PIN_RH2;
     766:	e5 b8       	out	0x05, r14	; 5
           adcmv[1] = W20msReadADC(TP2) - ADCconfig.U_AVCC;
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	0e 94 cd 14 	call	0x299a	; 0x299a <W20msReadADC>
     76e:	20 91 37 01 	lds	r18, 0x0137
     772:	30 91 38 01 	lds	r19, 0x0138
     776:	82 1b       	sub	r24, r18
     778:	93 0b       	sbc	r25, r19
     77a:	9c 83       	std	Y+4, r25	; 0x04
     77c:	8b 83       	std	Y+3, r24	; 0x03
           R_DDR = 1<<PIN_RH3;		//Pin 3 over R_H to VCC
     77e:	b4 b8       	out	0x04, r11	; 4
           R_PORT = 1<<PIN_RH3;
     780:	b5 b8       	out	0x05, r11	; 5
           adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	0e 94 cd 14 	call	0x299a	; 0x299a <W20msReadADC>
     788:	20 91 37 01 	lds	r18, 0x0137
     78c:	30 91 38 01 	lds	r19, 0x0138
     790:	82 1b       	sub	r24, r18
     792:	93 0b       	sbc	r25, r19
     794:	9e 83       	std	Y+6, r25	; 0x06
     796:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RH1H);	// "RH_Hi="
     798:	8b e5       	ldi	r24, 0x5B	; 91
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	36 c0       	rjmp	.+108    	; 0x80a <__stack+0x30b>
        }
        if (tt == 7) { // is the voltage of all R_H / R_L dividers correct?
     79e:	ec 2d       	mov	r30, r12
     7a0:	e7 30       	cpi	r30, 0x07	; 7
     7a2:	b1 f5       	brne	.+108    	; 0x810 <__stack+0x311>
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + (unsigned long)R_H_VAL*100));
     7a4:	60 91 37 01 	lds	r22, 0x0137
     7a8:	70 91 38 01 	lds	r23, 0x0138
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	2e e4       	ldi	r18, 0x4E	; 78
     7b2:	3b e1       	ldi	r19, 0x1B	; 27
     7b4:	40 e0       	ldi	r20, 0x00	; 0
     7b6:	50 e0       	ldi	r21, 0x00	; 0
     7b8:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
     7bc:	2e ea       	ldi	r18, 0xAE	; 174
     7be:	32 ed       	ldi	r19, 0xD2	; 210
     7c0:	47 e4       	ldi	r20, 0x47	; 71
     7c2:	50 e0       	ldi	r21, 0x00	; 0
     7c4:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
     7c8:	89 01       	movw	r16, r18
           R_PORT = 1<<PIN_RH1;		//RH1 to VCC
     7ca:	f5 b8       	out	0x05, r15	; 5
           R_DDR = (1<<PIN_RH1) | (1<<PIN_RL1);	//RH1 to +, RL1 to -
     7cc:	f3 e0       	ldi	r31, 0x03	; 3
     7ce:	f4 b9       	out	0x04, r31	; 4
           adcmv[0] = W20msReadADC(TP1);
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	0e 94 cd 14 	call	0x299a	; 0x299a <W20msReadADC>
           adcmv[0] -= u680;
     7d6:	80 1b       	sub	r24, r16
     7d8:	91 0b       	sbc	r25, r17
     7da:	9a 83       	std	Y+2, r25	; 0x02
     7dc:	89 83       	std	Y+1, r24	; 0x01
           R_PORT = 1<<PIN_RH2;		//RH2 to VCC
     7de:	e5 b8       	out	0x05, r14	; 5
           R_DDR = (1<<PIN_RH2) | (1<<PIN_RL2);	//RH2 to +, RL2 to -
     7e0:	2c e0       	ldi	r18, 0x0C	; 12
     7e2:	24 b9       	out	0x04, r18	; 4
           adcmv[1] = W20msReadADC(TP2);
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	0e 94 cd 14 	call	0x299a	; 0x299a <W20msReadADC>
           adcmv[1] -= u680;
     7ea:	80 1b       	sub	r24, r16
     7ec:	91 0b       	sbc	r25, r17
     7ee:	9c 83       	std	Y+4, r25	; 0x04
     7f0:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 1<<PIN_RH3;		//RH3 to VCC
     7f2:	b5 b8       	out	0x05, r11	; 5
           R_DDR = (1<<PIN_RH3) | (1<<PIN_RL3);	//RH3 to +, RL3 to -
     7f4:	80 e3       	ldi	r24, 0x30	; 48
     7f6:	84 b9       	out	0x04, r24	; 4
           adcmv[2] = W20msReadADC(TP3);
     7f8:	82 e0       	ldi	r24, 0x02	; 2
     7fa:	0e 94 cd 14 	call	0x299a	; 0x299a <W20msReadADC>
           adcmv[2] -= u680;
     7fe:	80 1b       	sub	r24, r16
     800:	91 0b       	sbc	r25, r17
     802:	9e 83       	std	Y+6, r25	; 0x06
     804:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RHRL);	// "RH/RL"
     806:	8b e7       	ldi	r24, 0x7B	; 123
     808:	91 e0       	ldi	r25, 0x01	; 1
     80a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     80e:	03 c0       	rjmp	.+6      	; 0x816 <__stack+0x317>
        }
                                        //############################################
        if (tt > 1) {	// output 3 voltages 
     810:	ec 2d       	mov	r30, r12
     812:	e1 30       	cpi	r30, 0x01	; 1
     814:	99 f0       	breq	.+38     	; 0x83c <__stack+0x33d>
           lcd_line2();			//Cursor to column 1, row 2
     816:	80 ec       	ldi	r24, 0xC0	; 192
     818:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
//           lcd_string(itoa(adcmv[0], outval, 10));	//output voltage 1
           i2lcd(adcmv[0]);
     81c:	89 81       	ldd	r24, Y+1	; 0x01
     81e:	9a 81       	ldd	r25, Y+2	; 0x02
     820:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <i2lcd>
           lcd_space();
     824:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
//           lcd_string(itoa(adcmv[1], outval, 10));	//output voltage 2
           i2lcd(adcmv[1]);
     828:	8b 81       	ldd	r24, Y+3	; 0x03
     82a:	9c 81       	ldd	r25, Y+4	; 0x04
     82c:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <i2lcd>
           lcd_space();
     830:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
//           lcd_string(itoa(adcmv[2], outval, 10));	//output voltage 3
           i2lcd(adcmv[2]);
     834:	8d 81       	ldd	r24, Y+5	; 0x05
     836:	9e 81       	ldd	r25, Y+6	; 0x06
     838:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <i2lcd>
        }
        ADC_DDR =  TXD_MSK;		// all-Pins to Input
     83c:	e7 b8       	out	0x07, r14	; 7
        ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
     83e:	e8 b8       	out	0x08, r14	; 8
        R_DDR = 0;			// all R-Ports to Input
     840:	14 b8       	out	0x04, r1	; 4
        R_PORT = 0;
     842:	15 b8       	out	0x05, r1	; 5
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
     844:	4f 9b       	sbis	0x09, 7	; 9
     846:	0f c0       	rjmp	.+30     	; 0x866 <__stack+0x367>
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
     848:	84 e6       	ldi	r24, 0x64	; 100
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0e 94 ba 01 	call	0x374	; 0x374 <sleep_5ms>
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
     850:	4f 9b       	sbis	0x09, 7	; 9
     852:	09 c0       	rjmp	.+18     	; 0x866 <__stack+0x367>
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
     854:	84 e6       	ldi	r24, 0x64	; 100
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	0e 94 ba 01 	call	0x374	; 0x374 <sleep_5ms>

#ifdef EXTENDED_TESTS
 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
     85c:	a3 94       	inc	r10
     85e:	fa 2d       	mov	r31, r10
     860:	f4 30       	cpi	r31, 0x04	; 4
     862:	08 f4       	brcc	.+2      	; 0x866 <__stack+0x367>
     864:	b1 ce       	rjmp	.-670    	; 0x5c8 <__stack+0xc9>
     866:	1c 2d       	mov	r17, r12
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
     } //end for ww
     wait_about1s();
     868:	88 ec       	ldi	r24, 0xC8	; 200
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 ba 01 	call	0x374	; 0x374 <sleep_5ms>
//  } /* end for tt */

#ifdef EXTENDED_TESTS
 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     870:	1f 5f       	subi	r17, 0xFF	; 255
     872:	18 30       	cpi	r17, 0x08	; 8
     874:	81 f0       	breq	.+32     	; 0x896 <__stack+0x397>
  lcd_clear();
  lcd_fix_string(SELFTEST);		// "Selftest mode.."
  lcd_line2();
  lcd_data('?');			// wait for key pressed
  for (tt=0;tt<50;tt++) {
     if ((ON_PIN_REG & (1<<RST_PIN)) != 0) break;	// key is unpressed
     876:	aa 24       	eor	r10, r10
        lcd_line2();			//Cursor to column 1, row 2
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_data('T');			//output the Testmode "T"
     878:	08 94       	sec
     87a:	81 1c       	adc	r8, r1
     87c:	91 1c       	adc	r9, r1
           R_PORT = 1<<PIN_RH1;		//RH1 to VCC
           R_DDR = (1<<PIN_RH1) | (1<<PIN_RH2);	//RH2 to -
           adcmv[0] = W20msReadADC(TP1);
           adcmv[3] = ADCconfig.U_AVCC / 2;
           adcmv[0] -= adcmv[3];
           R_DDR = (1<<PIN_RH1) | (1<<PIN_RH3);	//RH3 to -
     87e:	e2 e2       	ldi	r30, 0x22	; 34
     880:	3e 2e       	mov	r3, r30
           adcmv[1] = W20msReadADC(TP1);
           adcmv[1] -= adcmv[3];
           R_PORT = 1<<PIN_RH2;		//RH2 to VCC
           R_DDR = (1<<PIN_RH2) | (1<<PIN_RH3);	//RH3 to -
     882:	78 e2       	ldi	r23, 0x28	; 40
     884:	27 2e       	mov	r2, r23
           u2lcd(RHmultip);	//lcd_string(utoa(RHmultip, outval, 10));
           ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
     886:	6a eb       	ldi	r22, 0xBA	; 186
     888:	46 2e       	mov	r4, r22
     88a:	66 e3       	ldi	r22, 0x36	; 54
     88c:	56 2e       	mov	r5, r22
     88e:	61 2c       	mov	r6, r1
     890:	71 2c       	mov	r7, r1
     892:	c1 2e       	mov	r12, r17
     894:	99 ce       	rjmp	.-718    	; 0x5c8 <__stack+0xc9>
     wait_about500ms();
     if (AllProbesShorted() == 0) break;
  }
#endif

  lcd_clear();
     896:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_fix_string(RIHI);	// "RiHi="
     89a:	81 e8       	ldi	r24, 0x81	; 129
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  DisplayValue(RRpinPL,-1,LCD_CHAR_OMEGA,3);
     8a2:	60 91 39 01 	lds	r22, 0x0139
     8a6:	70 91 3a 01 	lds	r23, 0x013A
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	4f ef       	ldi	r20, 0xFF	; 255
     8b0:	24 ef       	ldi	r18, 0xF4	; 244
     8b2:	03 e0       	ldi	r16, 0x03	; 3
     8b4:	0e 94 cd 0c 	call	0x199a	; 0x199a <DisplayValue>
  lcd_line2();
     8b8:	80 ec       	ldi	r24, 0xC0	; 192
     8ba:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(RILO);	// "RiLo="
     8be:	88 e8       	ldi	r24, 0x88	; 136
     8c0:	91 e0       	ldi	r25, 0x01	; 1
     8c2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  DisplayValue(RRpinMI,-1,LCD_CHAR_OMEGA,3);
     8c6:	60 91 3f 01 	lds	r22, 0x013F
     8ca:	70 91 40 01 	lds	r23, 0x0140
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	4f ef       	ldi	r20, 0xFF	; 255
     8d4:	24 ef       	ldi	r18, 0xF4	; 244
     8d6:	0e 94 cd 0c 	call	0x199a	; 0x199a <DisplayValue>
  wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
     8da:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <wait_for_key_5s_line2>

  //measure Zero offset for Capacity measurement
  PartFound = PART_NONE;
     8de:	10 92 09 01 	sts	0x0109, r1
  lcd_clear();
     8e2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_fix_string(C0_str);			//output "C0 "
     8e6:	8f e8       	ldi	r24, 0x8F	; 143
     8e8:	91 e0       	ldi	r25, 0x01	; 1
     8ea:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  ReadCapacity(TP3, TP1);
     8ee:	82 e0       	ldi	r24, 0x02	; 2
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <ReadCapacity>
  adcmv[5] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:3
     8f6:	00 91 74 01 	lds	r16, 0x0174
     8fa:	10 91 75 01 	lds	r17, 0x0175
     8fe:	1c 87       	std	Y+12, r17	; 0x0c
     900:	0b 87       	std	Y+11, r16	; 0x0b
  ReadCapacity(TP3, TP2);
     902:	82 e0       	ldi	r24, 0x02	; 2
     904:	61 e0       	ldi	r22, 0x01	; 1
     906:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <ReadCapacity>
  adcmv[6] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:3
     90a:	e0 90 74 01 	lds	r14, 0x0174
     90e:	f0 90 75 01 	lds	r15, 0x0175
     912:	fe 86       	std	Y+14, r15	; 0x0e
     914:	ed 86       	std	Y+13, r14	; 0x0d
  ReadCapacity(TP2, TP1);
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <ReadCapacity>
  adcmv[2] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:2
     91e:	c0 90 74 01 	lds	r12, 0x0174
     922:	d0 90 75 01 	lds	r13, 0x0175
     926:	de 82       	std	Y+6, r13	; 0x06
     928:	cd 82       	std	Y+5, r12	; 0x05
  ReadCapacity(TP1, TP3);
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	62 e0       	ldi	r22, 0x02	; 2
     92e:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <ReadCapacity>
  adcmv[1] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:1
     932:	80 91 74 01 	lds	r24, 0x0174
     936:	90 91 75 01 	lds	r25, 0x0175
     93a:	9c 83       	std	Y+4, r25	; 0x04
     93c:	8b 83       	std	Y+3, r24	; 0x03
  ReadCapacity(TP2, TP3);
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	62 e0       	ldi	r22, 0x02	; 2
     942:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <ReadCapacity>
  adcmv[4] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:2
     946:	80 91 74 01 	lds	r24, 0x0174
     94a:	90 91 75 01 	lds	r25, 0x0175
     94e:	9a 87       	std	Y+10, r25	; 0x0a
     950:	89 87       	std	Y+9, r24	; 0x09
  ReadCapacity(TP1, TP2);
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	61 e0       	ldi	r22, 0x01	; 1
     956:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <ReadCapacity>
  adcmv[0] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:1
     95a:	80 91 74 01 	lds	r24, 0x0174
     95e:	90 91 75 01 	lds	r25, 0x0175
     962:	9a 83       	std	Y+2, r25	; 0x02
     964:	89 83       	std	Y+1, r24	; 0x01
  adcmv[3] = adcmv[0];			// same as first for the checking loop, mark as calibrated
     966:	98 87       	std	Y+8, r25	; 0x08
     968:	8f 83       	std	Y+7, r24	; 0x07
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
     96a:	b8 01       	movw	r22, r16
     96c:	88 27       	eor	r24, r24
     96e:	77 fd       	sbrc	r23, 7
     970:	80 95       	com	r24
     972:	98 2f       	mov	r25, r24
     974:	40 e0       	ldi	r20, 0x00	; 0
     976:	20 e2       	ldi	r18, 0x20	; 32
     978:	03 e0       	ldi	r16, 0x03	; 3
     97a:	0e 94 cd 0c 	call	0x199a	; 0x199a <DisplayValue>
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
     97e:	b7 01       	movw	r22, r14
     980:	88 27       	eor	r24, r24
     982:	77 fd       	sbrc	r23, 7
     984:	80 95       	com	r24
     986:	98 2f       	mov	r25, r24
     988:	40 e0       	ldi	r20, 0x00	; 0
     98a:	20 e2       	ldi	r18, 0x20	; 32
     98c:	0e 94 cd 0c 	call	0x199a	; 0x199a <DisplayValue>
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
     990:	b6 01       	movw	r22, r12
     992:	88 27       	eor	r24, r24
     994:	77 fd       	sbrc	r23, 7
     996:	80 95       	com	r24
     998:	98 2f       	mov	r25, r24
     99a:	44 ef       	ldi	r20, 0xF4	; 244
     99c:	26 e4       	ldi	r18, 0x46	; 70
     99e:	0e 94 cd 0c 	call	0x199a	; 0x199a <DisplayValue>
     9a2:	8e 01       	movw	r16, r28
     9a4:	0f 5f       	subi	r16, 0xFF	; 255
     9a6:	1f 4f       	sbci	r17, 0xFF	; 255
// Selftest of the device and calibration 
void AutoCheck(void) {
     9a8:	9e 01       	movw	r18, r28
     9aa:	21 5f       	subi	r18, 0xF1	; 241
     9ac:	3f 4f       	sbci	r19, 0xFF	; 255
     9ae:	f8 01       	movw	r30, r16
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {			//checking loop
      if ((adcmv[ww] > 190) || (adcmv[ww] < 10)) goto no_c0save;
     9b0:	81 91       	ld	r24, Z+
     9b2:	91 91       	ld	r25, Z+
     9b4:	0a 97       	sbiw	r24, 0x0a	; 10
     9b6:	85 3b       	cpi	r24, 0xB5	; 181
     9b8:	91 05       	cpc	r25, r1
     9ba:	e8 f4       	brcc	.+58     	; 0x9f6 <__stack+0x4f7>
  adcmv[3] = adcmv[0];			// same as first for the checking loop, mark as calibrated
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {			//checking loop
     9bc:	e2 17       	cp	r30, r18
     9be:	f3 07       	cpc	r31, r19
     9c0:	b9 f7       	brne	.-18     	; 0x9b0 <__stack+0x4b1>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
      if ((adcmv[ww] > 190) || (adcmv[ww] < 10)) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
     9c6:	f8 01       	movw	r30, r16
     9c8:	60 81       	ld	r22, Z
     9ca:	0e 5f       	subi	r16, 0xFE	; 254
     9cc:	1f 4f       	sbci	r17, 0xFF	; 255
     9ce:	61 5f       	subi	r22, 0xF1	; 241
     9d0:	c7 01       	movw	r24, r14
     9d2:	85 53       	subi	r24, 0x35	; 53
     9d4:	9e 4f       	sbci	r25, 0xFE	; 254
     9d6:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <__eewr_byte_m168>
     9da:	08 94       	sec
     9dc:	e1 1c       	adc	r14, r1
     9de:	f1 1c       	adc	r15, r1
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {			//checking loop
      if ((adcmv[ww] > 190) || (adcmv[ww] < 10)) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
     9e0:	f7 e0       	ldi	r31, 0x07	; 7
     9e2:	ef 16       	cp	r14, r31
     9e4:	f1 04       	cpc	r15, r1
     9e6:	79 f7       	brne	.-34     	; 0x9c6 <__stack+0x4c7>
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
  }
  lcd_line2();
     9e8:	80 ec       	ldi	r24, 0xC0	; 192
     9ea:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(OK_str);		// output "OK"
     9ee:	8a ee       	ldi	r24, 0xEA	; 234
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
no_c0save:
 #endif
 wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
     9f6:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <wait_for_key_5s_line2>
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
     9fa:	10 e0       	ldi	r17, 0x00	; 0
 for (ww=0;ww<64;ww++) {
     9fc:	cc 24       	eor	r12, r12
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
     9fe:	5a e0       	ldi	r21, 0x0A	; 10
     a00:	85 2e       	mov	r8, r21
     a02:	91 2c       	mov	r9, r1
     a04:	a1 2c       	mov	r10, r1
     a06:	b1 2c       	mov	r11, r1
     lcd_data('3');
     lcd_fix2_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
     a08:	4c e6       	ldi	r20, 0x6C	; 108
     a0a:	e4 2e       	mov	r14, r20
     a0c:	41 e0       	ldi	r20, 0x01	; 1
     a0e:	f4 2e       	mov	r15, r20
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
     lcd_clear();
     a10:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
     lcd_data('1');
     a14:	81 e3       	ldi	r24, 0x31	; 49
     a16:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
     lcd_fix_string(CapZeich);	// "-||-"
     a1a:	8f e1       	ldi	r24, 0x1F	; 31
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_data('3');
     a22:	83 e3       	ldi	r24, 0x33	; 51
     a24:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
     lcd_fix2_string(MinCap_str); // " >100nF!"
     a28:	8a ef       	ldi	r24, 0xFA	; 250
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
     PartFound = PART_NONE;
     a30:	10 92 09 01 	sts	0x0109, r1
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     a34:	82 e0       	ldi	r24, 0x02	; 2
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <ReadCapacity>
     a3c:	20 91 6c 01 	lds	r18, 0x016C
     a40:	30 91 6d 01 	lds	r19, 0x016D
     a44:	40 91 6e 01 	lds	r20, 0x016E
     a48:	50 91 6f 01 	lds	r21, 0x016F
     a4c:	00 91 7e 01 	lds	r16, 0x017E
     while (cap.cpre < -9) {
     a50:	07 c0       	rjmp	.+14     	; 0xa60 <__stack+0x561>
        cap.cpre++;
        cap.cval /= 10;
     a52:	ca 01       	movw	r24, r20
     a54:	b9 01       	movw	r22, r18
     a56:	a5 01       	movw	r20, r10
     a58:	94 01       	movw	r18, r8
     a5a:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
     a5e:	0f 5f       	subi	r16, 0xFF	; 255
     lcd_data('3');
     lcd_fix2_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
     a60:	07 3f       	cpi	r16, 0xF7	; 247
     a62:	bc f3       	brlt	.-18     	; 0xa52 <__stack+0x553>
     a64:	00 93 7e 01 	sts	0x017E, r16
     a68:	20 93 6c 01 	sts	0x016C, r18
     a6c:	f7 01       	movw	r30, r14
     a6e:	31 83       	std	Z+1, r19	; 0x01
     a70:	42 83       	std	Z+2, r20	; 0x02
     a72:	53 83       	std	Z+3, r21	; 0x03
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000) &&
     a74:	07 3f       	cpi	r16, 0xF7	; 247
     a76:	09 f0       	breq	.+2      	; 0xa7a <__stack+0x57b>
     a78:	b2 c0       	rjmp	.+356    	; 0xbde <__stack+0x6df>
     a7a:	20 36       	cpi	r18, 0x60	; 96
     a7c:	31 05       	cpc	r19, r1
     a7e:	41 05       	cpc	r20, r1
     a80:	51 05       	cpc	r21, r1
     a82:	08 f4       	brcc	.+2      	; 0xa86 <__stack+0x587>
     a84:	ac c0       	rjmp	.+344    	; 0xbde <__stack+0x6df>
     a86:	20 3f       	cpi	r18, 0xF0	; 240
     a88:	f5 e5       	ldi	r31, 0x55	; 85
     a8a:	3f 07       	cpc	r19, r31
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	4f 07       	cpc	r20, r31
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	5f 07       	cpc	r21, r31
     a94:	08 f0       	brcs	.+2      	; 0xa98 <__stack+0x599>
     a96:	a3 c0       	rjmp	.+326    	; 0xbde <__stack+0x6df>
         (load_diff > -150) && (load_diff < 150)) {
     a98:	60 91 80 01 	lds	r22, 0x0180
     a9c:	70 91 81 01 	lds	r23, 0x0181
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000) &&
     aa0:	2f ef       	ldi	r18, 0xFF	; 255
     aa2:	6b 36       	cpi	r22, 0x6B	; 107
     aa4:	72 07       	cpc	r23, r18
     aa6:	0c f4       	brge	.+2      	; 0xaaa <__stack+0x5ab>
     aa8:	9a c0       	rjmp	.+308    	; 0xbde <__stack+0x6df>
         (load_diff > -150) && (load_diff < 150)) {
     aaa:	66 39       	cpi	r22, 0x96	; 150
     aac:	71 05       	cpc	r23, r1
     aae:	0c f0       	brlt	.+2      	; 0xab2 <__stack+0x5b3>
     ab0:	96 c0       	rjmp	.+300    	; 0xbde <__stack+0x6df>
        cap_found++;
     ab2:	1f 5f       	subi	r17, 0xFF	; 255
     } else {
        cap_found = 0;		// wait for stable connection
     }
     if (cap_found > 1) {
     ab4:	12 30       	cpi	r17, 0x02	; 2
     ab6:	09 f0       	breq	.+2      	; 0xaba <__stack+0x5bb>
     ab8:	93 c0       	rjmp	.+294    	; 0xbe0 <__stack+0x6e1>
        // value of capacitor is correct
        (void) eeprom_write_word((uint16_t *)(&ref_offset), load_diff);	// hold zero offset + slew rate dependend offset
     aba:	89 ec       	ldi	r24, 0xC9	; 201
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	0e 94 cc 1f 	call	0x3f98	; 0x3f98 <__eewr_word_m168>
        lcd_clear();
     ac2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
        lcd_fix2_string(REF_C_str);	// "REF_C="
     ac6:	82 e0       	ldi	r24, 0x02	; 2
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
//        lcd_string(itoa(load_diff, outval, 10));	//output REF_C_KORR
        i2lcd(load_diff);
     ace:	80 91 80 01 	lds	r24, 0x0180
     ad2:	90 91 81 01 	lds	r25, 0x0181
     ad6:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <i2lcd>
        wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
        }
//#######################################
#endif
  #ifdef AUTOSCALE_ADC
        ADC_PORT =  TXD_VAL;	//ADC-Port 1 to GND
     ada:	88 e0       	ldi	r24, 0x08	; 8
     adc:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
     ade:	89 e0       	ldi	r24, 0x09	; 9
     ae0:	87 b9       	out	0x07, r24	; 7
        R_DDR = 1<<PIN_RH3;		//Pin 3 over R_H to GND
     ae2:	80 e2       	ldi	r24, 0x20	; 32
     ae4:	84 b9       	out	0x04, r24	; 4
        do {
           adcmv[0] = ReadADC(TP3);
     ae6:	82 e0       	ldi	r24, 0x02	; 2
     ae8:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
        } while (adcmv[0] > 980);
     aec:	e3 e0       	ldi	r30, 0x03	; 3
     aee:	85 3d       	cpi	r24, 0xD5	; 213
     af0:	9e 07       	cpc	r25, r30
     af2:	cc f7       	brge	.-14     	; 0xae6 <__stack+0x5e7>
        R_DDR = 0;		//all Pins to input 
     af4:	14 b8       	out	0x04, r1	; 4
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
     af6:	10 92 36 01 	sts	0x0136, r1
     afa:	10 92 35 01 	sts	0x0135, r1
        adcmv[0] = ReadADC(TP3);  // get cap voltage with VCC reference
     afe:	82 e0       	ldi	r24, 0x02	; 2
     b00:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
     b04:	4c 01       	movw	r8, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
     b06:	88 ec       	ldi	r24, 0xC8	; 200
     b08:	91 e0       	ldi	r25, 0x01	; 1
     b0a:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__eerd_byte_m168>
     b0e:	99 27       	eor	r25, r25
     b10:	87 fd       	sbrc	r24, 7
     b12:	90 95       	com	r25
     b14:	20 91 3b 01 	lds	r18, 0x013B
     b18:	30 91 3c 01 	lds	r19, 0x013C
     b1c:	82 0f       	add	r24, r18
     b1e:	93 1f       	adc	r25, r19
     b20:	90 93 36 01 	sts	0x0136, r25
     b24:	80 93 35 01 	sts	0x0135, r24
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
     b28:	82 e0       	ldi	r24, 0x02	; 2
     b2a:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
     b2e:	5c 01       	movw	r10, r24
        adcmv[1] += adcmv[1];		// double the value
     b30:	aa 0c       	add	r10, r10
     b32:	bb 1c       	adc	r11, r11
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
     b34:	10 92 36 01 	sts	0x0136, r1
     b38:	10 92 35 01 	sts	0x0135, r1
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
     b42:	6c 01       	movw	r12, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
     b44:	00 91 3b 01 	lds	r16, 0x013B
     b48:	10 91 3c 01 	lds	r17, 0x013C
     b4c:	88 ec       	ldi	r24, 0xC8	; 200
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__eerd_byte_m168>
     b54:	99 27       	eor	r25, r25
     b56:	87 fd       	sbrc	r24, 7
     b58:	90 95       	com	r25
     b5a:	80 0f       	add	r24, r16
     b5c:	91 1f       	adc	r25, r17
     b5e:	90 93 36 01 	sts	0x0136, r25
     b62:	80 93 35 01 	sts	0x0135, r24
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1])) * ADC_internal_reference / adcmv[1])+REF_R_KORR;
     b66:	88 ec       	ldi	r24, 0xC8	; 200
     b68:	91 e0       	ldi	r25, 0x01	; 1
     b6a:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__eerd_byte_m168>
     b6e:	e8 2e       	mov	r14, r24
        lcd_line2();
     b70:	80 ec       	ldi	r24, 0xC0	; 192
     b72:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_fix2_string(REF_R_str);	// "REF_R="
     b76:	89 e0       	ldi	r24, 0x09	; 9
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
     b7e:	88 ec       	ldi	r24, 0xC8	; 200
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__eerd_byte_m168>
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
        adcmv[1] += adcmv[1];		// double the value
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
        ADCconfig.U_Bandgap = ADC_internal_reference;
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1])) * ADC_internal_reference / adcmv[1])+REF_R_KORR;
     b86:	23 e0       	ldi	r18, 0x03	; 3
     b88:	f2 2e       	mov	r15, r18
     b8a:	f8 0e       	add	r15, r24
     b8c:	c8 0c       	add	r12, r8
     b8e:	d9 1c       	adc	r13, r9
     b90:	ca 18       	sub	r12, r10
     b92:	db 08       	sbc	r13, r11
     b94:	b6 01       	movw	r22, r12
     b96:	88 27       	eor	r24, r24
     b98:	77 fd       	sbrc	r23, 7
     b9a:	80 95       	com	r24
     b9c:	98 2f       	mov	r25, r24
     b9e:	2e 2d       	mov	r18, r14
     ba0:	33 27       	eor	r19, r19
     ba2:	27 fd       	sbrc	r18, 7
     ba4:	30 95       	com	r19
     ba6:	20 0f       	add	r18, r16
     ba8:	31 1f       	adc	r19, r17
     baa:	40 e0       	ldi	r20, 0x00	; 0
     bac:	50 e0       	ldi	r21, 0x00	; 0
     bae:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
     bb2:	95 01       	movw	r18, r10
     bb4:	44 27       	eor	r20, r20
     bb6:	37 fd       	sbrc	r19, 7
     bb8:	40 95       	com	r20
     bba:	54 2f       	mov	r21, r20
     bbc:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__divmodsi4>
        lcd_line2();
        lcd_fix2_string(REF_R_str);	// "REF_R="
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
     bc0:	f2 0e       	add	r15, r18
        (void) eeprom_write_byte((uint8_t *)(&RefDiff), (uint8_t)udiff2);	// hold offset for true reference Voltage
     bc2:	88 ec       	ldi	r24, 0xC8	; 200
     bc4:	91 e0       	ldi	r25, 0x01	; 1
     bc6:	6f 2d       	mov	r22, r15
     bc8:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <__eewr_byte_m168>
//        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
        i2lcd(udiff2);
     bcc:	8f 2d       	mov	r24, r15
     bce:	99 27       	eor	r25, r25
     bd0:	87 fd       	sbrc	r24, 7
     bd2:	90 95       	com	r25
     bd4:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <i2lcd>
  #endif
        wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
     bd8:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <wait_for_key_5s_line2>
        break;
     bdc:	1b c0       	rjmp	.+54     	; 0xc14 <__stack+0x715>
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000) &&
         (load_diff > -150) && (load_diff < 150)) {
     bde:	10 e0       	ldi	r17, 0x00	; 0
        i2lcd(udiff2);
  #endif
        wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
        break;
     }
     lcd_line2();
     be0:	80 ec       	ldi	r24, 0xC0	; 192
     be2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     DisplayValue(cap.cval,cap.cpre,'F',4);
     be6:	60 91 6c 01 	lds	r22, 0x016C
     bea:	70 91 6d 01 	lds	r23, 0x016D
     bee:	80 91 6e 01 	lds	r24, 0x016E
     bf2:	90 91 6f 01 	lds	r25, 0x016F
     bf6:	40 91 7e 01 	lds	r20, 0x017E
     bfa:	26 e4       	ldi	r18, 0x46	; 70
     bfc:	04 e0       	ldi	r16, 0x04	; 4
     bfe:	0e 94 cd 0c 	call	0x199a	; 0x199a <DisplayValue>
     wait_about200ms();			// wait additional time
     c02:	88 e2       	ldi	r24, 0x28	; 40
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	0e 94 ba 01 	call	0x374	; 0x374 <sleep_5ms>
 wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
     c0a:	c3 94       	inc	r12
     c0c:	fc 2d       	mov	r31, r12
     c0e:	f0 34       	cpi	r31, 0x40	; 64
     c10:	09 f0       	breq	.+2      	; 0xc14 <__stack+0x715>
     c12:	fe ce       	rjmp	.-516    	; 0xa10 <__stack+0x511>
     wait_about200ms();			// wait additional time
  } // end for ww
 #endif


  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
     c14:	89 e1       	ldi	r24, 0x19	; 25
     c16:	80 93 33 01 	sts	0x0133, r24
  lcd_clear();
     c1a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_fix2_string(VERSION_str);	//"Version ..."
     c1e:	88 ed       	ldi	r24, 0xD8	; 216
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
  lcd_line2();
     c26:	80 ec       	ldi	r24, 0xC0	; 192
     c28:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(ATE);		//"Selftest End"
     c2c:	8b ed       	ldi	r24, 0xDB	; 219
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        // if key is pressed, don't repeat
        break;
     }
  }
 #endif
 PartFound = PART_NONE;
     c34:	10 92 09 01 	sts	0x0109, r1
 wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
     c38:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <wait_for_key_5s_line2>
     c3c:	03 c0       	rjmp	.+6      	; 0xc44 <__stack+0x745>
           lcd_fix_string(RHRH);	// "RHRH"
        }
                                        //############################################
        if (tt == 4) { // Text release probes
           lcd_fix_string(RELPROBE);	// "Release Probes"
           if (AllProbesShorted() != 0) ww = MAX_REP-2;
     c3e:	92 e0       	ldi	r25, 0x02	; 2
     c40:	a9 2e       	mov	r10, r25
     c42:	e9 cd       	rjmp	.-1070   	; 0x816 <__stack+0x317>
     }
  }
 #endif
 PartFound = PART_NONE;
 wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
 } 
     c44:	2e 96       	adiw	r28, 0x0e	; 14
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	f8 94       	cli
     c4a:	de bf       	out	0x3e, r29	; 62
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	cd bf       	out	0x3d, r28	; 61
     c50:	cf 91       	pop	r28
     c52:	df 91       	pop	r29
     c54:	1f 91       	pop	r17
     c56:	0f 91       	pop	r16
     c58:	ff 90       	pop	r15
     c5a:	ef 90       	pop	r14
     c5c:	df 90       	pop	r13
     c5e:	cf 90       	pop	r12
     c60:	bf 90       	pop	r11
     c62:	af 90       	pop	r10
     c64:	9f 90       	pop	r9
     c66:	8f 90       	pop	r8
     c68:	7f 90       	pop	r7
     c6a:	6f 90       	pop	r6
     c6c:	5f 90       	pop	r5
     c6e:	4f 90       	pop	r4
     c70:	3f 90       	pop	r3
     c72:	2f 90       	pop	r2
     c74:	08 95       	ret

00000c76 <mark_as_uncalibrated>:
void mark_as_uncalibrated( void) {
 uint8_t ii;
 if (!UnCalibrated) {
     c76:	80 91 3e 01 	lds	r24, 0x013E
     c7a:	88 23       	and	r24, r24
     c7c:	69 f4       	brne	.+26     	; 0xc98 <mark_as_uncalibrated+0x22>
    // equipment has changed, zero capacity value is too high or zero resistance is too high
    ii = eeprom_read_byte((uint8_t *)&c_zero_tab[0]);	// read first zero offset
     c7e:	8b ec       	ldi	r24, 0xCB	; 203
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__eerd_byte_m168>
    ii++;
     c86:	68 2f       	mov	r22, r24
     c88:	6f 5f       	subi	r22, 0xFF	; 255
    // make the unused c_zero_tab[3] different to c_zero_tab[0] to mark uncalibrated 
    eeprom_write_byte((uint8_t *)&c_zero_tab[3], ii);	// mark uncalibrated permanent
     c8a:	8e ec       	ldi	r24, 0xCE	; 206
     c8c:	91 e0       	ldi	r25, 0x01	; 1
     c8e:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <__eewr_byte_m168>
    UnCalibrated = 1;
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	80 93 3e 01 	sts	0x013E, r24
     c98:	08 95       	ret

00000c9a <GetIr>:
/* Get residual current in reverse direction of a diode */ 



//=================================================================
void GetIr(uint8_t hipin, uint8_t lopin) {
     c9a:	0f 93       	push	r16
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
  unsigned int u_res;	// reverse voltage at 470k
  unsigned int ir_nano;
  uint8_t HiADC;

  HiADC = pgm_read_byte(&PinADCtab[hipin]);
     ca0:	e8 2f       	mov	r30, r24
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	e9 50       	subi	r30, 0x09	; 9
     ca6:	ff 4f       	sbci	r31, 0xFF	; 255
     ca8:	e4 91       	lpm	r30, Z+
  ADC_PORT = HiADC | TXD_VAL;		// switch ADC port to high level
     caa:	e8 60       	ori	r30, 0x08	; 8
     cac:	e8 b9       	out	0x08, r30	; 8
  ADC_DDR = HiADC | TXD_MSK;		// switch High Pin direct to VCC
     cae:	e7 b9       	out	0x07, r30	; 7
  R_PORT = 0;				// switch R-Port to GND
     cb0:	15 b8       	out	0x05, r1	; 5
#if FLASHEND > 0x3fff
  R_DDR = pgm_read_byte(&PinRHtab[lopin]);  //R_H mask for LowPin R_H load
#else
  uint8_t LoPinR_L;
  LoPinR_L = pgm_read_byte(&PinRLtab[lopin]);  //R_L mask for LowPin R_L load
     cb2:	e6 2f       	mov	r30, r22
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	ec 50       	subi	r30, 0x0C	; 12
     cb8:	ff 4f       	sbci	r31, 0xFF	; 255
     cba:	e4 91       	lpm	r30, Z+
  // R_H Pin must always be one pin number higher
  R_DDR = LoPinR_L + LoPinR_L;		// switch R_H port for LowPin to output (GND)
     cbc:	ee 0f       	add	r30, r30
     cbe:	e4 b9       	out	0x04, r30	; 4
#endif
  u_res = W5msReadADC(lopin);		// read voltage
     cc0:	86 2f       	mov	r24, r22
     cc2:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
     cc6:	ec 01       	movw	r28, r24
  if (u_res == 0) return;		// no Output, if no current in reverse direction
     cc8:	00 97       	sbiw	r24, 0x00	; 0
     cca:	f9 f0       	breq	.+62     	; 0xd0a <GetIr+0x70>
  lcd_fix_string(Ir_str);		// output text "  Ir="
     ccc:	8f e3       	ldi	r24, 0x3F	; 63
     cce:	91 e0       	ldi	r25, 0x01	; 1
     cd0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
#ifdef WITH_IRMICRO
  unsigned int ir_micro;
  if (u_res < 2500) {
#endif
     /* R_H_VAL has units of 10 Ohm, u_res has units of mV, ir_nano has units of nA */
     ir_nano = (unsigned long)(u_res * 100000UL) / R_H_VAL;
     cd4:	be 01       	movw	r22, r28
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	20 ea       	ldi	r18, 0xA0	; 160
     cdc:	36 e8       	ldi	r19, 0x86	; 134
     cde:	41 e0       	ldi	r20, 0x01	; 1
     ce0:	50 e0       	ldi	r21, 0x00	; 0
     ce2:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
     ce6:	28 e9       	ldi	r18, 0x98	; 152
     ce8:	37 eb       	ldi	r19, 0xB7	; 183
     cea:	40 e0       	ldi	r20, 0x00	; 0
     cec:	50 e0       	ldi	r21, 0x00	; 0
     cee:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
     DisplayValue(ir_nano,-9,'A',2);	// output two digits of current with nA units
     cf2:	b9 01       	movw	r22, r18
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	47 ef       	ldi	r20, 0xF7	; 247
     cfa:	21 e4       	ldi	r18, 0x41	; 65
     cfc:	02 e0       	ldi	r16, 0x02	; 2
     cfe:	0e 94 cd 0c 	call	0x199a	; 0x199a <DisplayValue>
     /* RR680MI has units of 0.1 Ohm, u_res has units of mV, ir_micro has units of uA */
     ir_micro = (unsigned long)(u_res * 10000UL) / RR680MI;
     DisplayValue(ir_micro,-6,'A',2);	// output two digits of current in uA units
  }
#endif
  ADC_DDR = TXD_MSK;			// switch off
     d02:	88 e0       	ldi	r24, 0x08	; 8
     d04:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;			// switch off
     d06:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;				// switch off current
     d08:	14 b8       	out	0x04, r1	; 4

  return ;
}
     d0a:	df 91       	pop	r29
     d0c:	cf 91       	pop	r28
     d0e:	0f 91       	pop	r16
     d10:	08 95       	ret

00000d12 <main>:
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
  EMPTY_INTERRUPT(ADC_vect);
#endif

//begin of transistortester program
int main(void) {
     d12:	cf 92       	push	r12
     d14:	df 92       	push	r13
     d16:	ef 92       	push	r14
     d18:	ff 92       	push	r15
     d1a:	0f 93       	push	r16
     d1c:	1f 93       	push	r17
     d1e:	df 93       	push	r29
     d20:	cf 93       	push	r28
     d22:	0f 92       	push	r0
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
#ifdef SEARCH_PARASITIC
  unsigned long n_cval;		// capacitor value of NPN B-E diode, for deselecting the parasitic Transistor
  int8_t n_cpre;		// capacitor prefix of NPN B-E diode
#endif
  //switch on
  ON_DDR = (1<<ON_PIN);			// switch to output
     d28:	80 e4       	ldi	r24, 0x40	; 64
     d2a:	8a b9       	out	0x0a, r24	; 10
#ifdef PULLUP_DISABLE
  ON_PORT = (1<<ON_PIN); 		// switch power on 
     d2c:	8b b9       	out	0x0b, r24	; 11
#else
  ON_PORT = (1<<ON_PIN)|(1<<RST_PIN); 	// switch power on , enable internal Pullup for Start-Pin
#endif
  uint8_t tmp;
  //ADC-Init
  ADCSRA = (1<<ADEN) | AUTO_CLOCK_DIV;	//prescaler=8 or 64 (if 8Mhz clock)
     d2e:	86 e8       	ldi	r24, 0x86	; 134
     d30:	80 93 7a 00 	sts	0x007A, r24
// #define WDRF_HOME MCU_STATUS_REG
 #define WDRF_HOME MCUCSR
#else
 #define WDRF_HOME MCUSR
#endif
  tmp = (WDRF_HOME & (1<<WDRF));	// save Watch Dog Flag
     d34:	14 b7       	in	r17, 0x34	; 52
  WDRF_HOME &= ~(1<<WDRF);	 	//reset Watch Dog flag
     d36:	84 b7       	in	r24, 0x34	; 52
     d38:	87 7f       	andi	r24, 0xF7	; 247
     d3a:	84 bf       	out	0x34, r24	; 52
  wdt_disable();			// disable Watch Dog
     d3c:	88 e1       	ldi	r24, 0x18	; 24
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	f8 94       	cli
     d42:	80 93 60 00 	sts	0x0060, r24
     d46:	10 92 60 00 	sts	0x0060, r1
     d4a:	0f be       	out	0x3f, r0	; 63
#ifndef INHIBIT_SLEEP_MODE
  // switch off unused Parts
  PRR = (1<<PRTWI) | (1<<PRTIM0) | (1<<PRSPI) | (1<<PRUSART0);
     d4c:	86 ea       	ldi	r24, 0xA6	; 166
     d4e:	80 93 64 00 	sts	0x0064, r24
  DIDR0 = (1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D);	
     d52:	88 e3       	ldi	r24, 0x38	; 56
     d54:	80 93 7e 00 	sts	0x007E, r24
  TCCR2A = (0<<WGM21) | (0<<WGM20);		// Counter 2 normal mode
     d58:	10 92 b0 00 	sts	0x00B0, r1
 #if F_CPU == 4000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (0<<CS20);	//prescaler 256, 64us @ 2MHz
  #define T2_PERIOD 64
 #endif 
 #if F_CPU >= 8000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (1<<CS20);	//prescaler 1024, 128us @ 8MHz, 64us @ 16MHz
     d5c:	87 e0       	ldi	r24, 0x07	; 7
     d5e:	80 93 b1 00 	sts	0x00B1, r24
  #define T2_PERIOD (1024 / (F_CPU / 1000000UL));	/* set to 128 or 64 us */
 #endif 
  sei();				// enable interrupts
     d62:	78 94       	sei
#endif
  lcd_init();				//initialize LCD
     d64:	0e 94 08 01 	call	0x210	; 0x210 <lcd_init>
	
//  ADC_PORT = TXD_VAL;
//  ADC_DDR = TXD_MSK;
  if(tmp) { 
     d68:	13 ff       	sbrs	r17, 3
     d6a:	0a c0       	rjmp	.+20     	; 0xd80 <main+0x6e>
     // check if  Watchdog-Event 
     // this happens, if the Watchdog is not reset for 2s
     // can happen, if any loop in the Program doen't finish.
     lcd_line1();
     d6c:	80 e8       	ldi	r24, 0x80	; 128
     d6e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     lcd_fix_string(TestTimedOut);	//Output Timeout
     d72:	83 eb       	ldi	r24, 0xB3	; 179
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     wait_about3s();				//wait for 3 s
     d7a:	88 e5       	ldi	r24, 0x58	; 88
     d7c:	92 e0       	ldi	r25, 0x02	; 2
     d7e:	9a c0       	rjmp	.+308    	; 0xeb4 <main+0x1a2>
     ON_PORT = 0;			//shut off!
//     ON_DDR = (1<<ON_PIN);		//switch to GND
     return 0;
  }
  LCDLoadCustomChar(LCD_CHAR_DIODE1);	//Custom-Character Diode symbol
     d80:	88 e4       	ldi	r24, 0x48	; 72
     d82:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(DiodeIcon1);	//load Character  >|
     d86:	89 e9       	ldi	r24, 0x99	; 153
     d88:	91 e0       	ldi	r25, 0x01	; 1
     d8a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_DIODE2);	//Custom-Character 
     d8e:	80 e5       	ldi	r24, 0x50	; 80
     d90:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(DiodeIcon2);	//load Character  |<
     d94:	81 ea       	ldi	r24, 0xA1	; 161
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_CAP);	//Custom-Character  Capacitor symbol
     d9c:	88 e5       	ldi	r24, 0x58	; 88
     d9e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(CapIcon);		//load Character  ||
     da2:	89 ea       	ldi	r24, 0xA9	; 169
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS1);	//Custom-Character Resistor symbol
     daa:	88 e7       	ldi	r24, 0x78	; 120
     dac:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(ResIcon1);		//load Character  [
     db0:	81 eb       	ldi	r24, 0xB1	; 177
     db2:	91 e0       	ldi	r25, 0x01	; 1
     db4:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS2);	//Custom-Character 
     db8:	80 e7       	ldi	r24, 0x70	; 112
     dba:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(ResIcon2);		//load Character  ]
     dbe:	89 eb       	ldi	r24, 0xB9	; 185
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_fix_customchar>
#endif
#ifdef PULLUP_DISABLE
 #ifdef __AVR_ATmega8__
  SFIOR = (1<<PUD);		// disable Pull-Up Resistors mega8
 #else
  MCUCR = (1<<PUD);		// disable Pull-Up Resistors mega168 family
     dc6:	80 e1       	ldi	r24, 0x10	; 16
     dc8:	85 bf       	out	0x35, r24	; 53
  lcd_line1();
#else
  lcd_clear();				// clear total display
#endif

  _trans = &ntrans;			// default transistor structure to show
     dca:	54 e4       	ldi	r21, 0x44	; 68
     dcc:	e5 2e       	mov	r14, r21
     dce:	51 e0       	ldi	r21, 0x01	; 1
     dd0:	f5 2e       	mov	r15, r21
    goto end;
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    if((PartMode&P_CHANNEL) == P_CHANNEL) {
       lcd_data('P');			//P-channel
       _trans = &ptrans;
     dd2:	4c e5       	ldi	r20, 0x5C	; 92
     dd4:	c4 2e       	mov	r12, r20
     dd6:	41 e0       	ldi	r20, 0x01	; 1
     dd8:	d4 2e       	mov	r13, r20
#endif

//*****************************************************************
//Entry: if start key is pressed before shut down
start:
  PartFound = PART_NONE;	// no part found
     dda:	10 92 09 01 	sts	0x0109, r1
  NumOfDiodes = 0;		// Number of diodes = 0
     dde:	10 92 07 01 	sts	0x0107, r1
  ptrans.count = 0;		// Number of found P type transistors
     de2:	10 92 69 01 	sts	0x0169, r1
  ntrans.count = 0;		// Number of found N type transistors
     de6:	10 92 51 01 	sts	0x0151, r1
  PartMode = PART_MODE_NONE;
     dea:	10 92 08 01 	sts	0x0108, r1
  WithReference = 0;		// no precision reference voltage
     dee:	10 92 41 01 	sts	0x0141, r1
  lcd_clear();			// clear the LCD
     df2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  ADC_DDR = TXD_MSK;		//activate Software-UART 
     df6:	88 e0       	ldi	r24, 0x08	; 8
     df8:	87 b9       	out	0x07, r24	; 7
  ResistorsFound = 0;		// no resistors found
     dfa:	10 92 6a 01 	sts	0x016A, r1
  cap.ca = 0;
     dfe:	10 92 7c 01 	sts	0x017C, r1
  cap.cb = 0;
     e02:	10 92 7d 01 	sts	0x017D, r1
#if FLASHEND > 0x1fff
  inductor_lpre = 0;		// mark as zero
     e06:	10 92 0d 01 	sts	0x010D, r1
#endif
#ifdef WITH_UART
  uart_newline();		// start of new measurement
     e0a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <uart_newline>
#endif
  ADCconfig.RefFlag = 0;
     e0e:	10 92 34 01 	sts	0x0134, r1
  Calibrate_UR();		// get Ref Voltages and Pin resistance
     e12:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <Calibrate_UR>
  lcd_line1();			// Cursor to 1. row, column 1
     e16:	80 e8       	ldi	r24, 0x80	; 128
     e18:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  
  ADCconfig.U_Bandgap = ADC_internal_reference;	// set internal reference voltage for ADC
     e1c:	88 ec       	ldi	r24, 0xC8	; 200
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__eerd_byte_m168>
     e24:	99 27       	eor	r25, r25
     e26:	87 fd       	sbrc	r24, 7
     e28:	90 95       	com	r25
     e2a:	20 91 3b 01 	lds	r18, 0x013B
     e2e:	30 91 3c 01 	lds	r19, 0x013C
     e32:	82 0f       	add	r24, r18
     e34:	93 1f       	adc	r25, r19
     e36:	90 93 36 01 	sts	0x0136, r25
     e3a:	80 93 35 01 	sts	0x0135, r24

#ifdef BAT_CHECK
  // Battery check is selected
  ReadADC(TPBAT);	//Dummy-Readout
     e3e:	85 e0       	ldi	r24, 0x05	; 5
     e40:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
  ptrans.uBE = W5msReadADC(TPBAT); 	//with 5V reference
     e44:	85 e0       	ldi	r24, 0x05	; 5
     e46:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
     e4a:	90 93 61 01 	sts	0x0161, r25
     e4e:	80 93 60 01 	sts	0x0160, r24
  lcd_fix_string(Bat_str);		//output: "Bat. "
     e52:	84 ee       	ldi	r24, 0xE4	; 228
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
//  DisplayValue(cap.cval,-2,'V',2);		// Display 2 Digits of this 10mV units
#if BAT_NUMERATOR <= (0xffff/U_VCC)
  cap.cval = (ptrans.uBE*BAT_NUMERATOR)/BAT_DENOMINATOR + BAT_OUT;
#else
 #if (BAT_NUMERATOR == 133) && (BAT_DENOMINATOR == 33)
  cap.cval = (ptrans.uBE*4)+BAT_OUT;		// usually output only 2 digits
     e5a:	60 91 60 01 	lds	r22, 0x0160
     e5e:	70 91 61 01 	lds	r23, 0x0161
     e62:	66 0f       	add	r22, r22
     e64:	77 1f       	adc	r23, r23
     e66:	66 0f       	add	r22, r22
     e68:	77 1f       	adc	r23, r23
     e6a:	6a 56       	subi	r22, 0x6A	; 106
     e6c:	7f 4f       	sbci	r23, 0xFF	; 255
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	60 93 6c 01 	sts	0x016C, r22
     e76:	70 93 6d 01 	sts	0x016D, r23
     e7a:	80 93 6e 01 	sts	0x016E, r24
     e7e:	90 93 6f 01 	sts	0x016F, r25
 #else
  cap.cval = ((unsigned long)ptrans.uBE*BAT_NUMERATOR)/BAT_DENOMINATOR + BAT_OUT;
 #endif
#endif
  DisplayValue(cap.cval,-3,'V',2);		// Display 2 Digits of this 10mV units
     e82:	4d ef       	ldi	r20, 0xFD	; 253
     e84:	26 e5       	ldi	r18, 0x56	; 86
     e86:	02 e0       	ldi	r16, 0x02	; 2
     e88:	0e 94 cd 0c 	call	0x199a	; 0x199a <DisplayValue>
  lcd_space();
     e8c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
  // less than 1.3 V only .1V difference to Warn-Level
  #define WARN_LEVEL (((unsigned long)(BAT_POOR+100)*(unsigned long)BAT_DENOMINATOR)/BAT_NUMERATOR)
 #endif
 #define POOR_LEVEL (((unsigned long)(BAT_POOR)*(unsigned long)BAT_DENOMINATOR)/BAT_NUMERATOR)
  // check the battery voltage
  if (ptrans.uBE <  WARN_LEVEL) {
     e90:	80 91 60 01 	lds	r24, 0x0160
     e94:	90 91 61 01 	lds	r25, 0x0161
     e98:	26 e0       	ldi	r18, 0x06	; 6
     e9a:	8a 3f       	cpi	r24, 0xFA	; 250
     e9c:	92 07       	cpc	r25, r18
     e9e:	88 f4       	brcc	.+34     	; 0xec2 <main+0x1b0>
     //Vcc < 7,3V; show Warning 
     if(ptrans.uBE < POOR_LEVEL) {	
     ea0:	e6 e0       	ldi	r30, 0x06	; 6
     ea2:	83 33       	cpi	r24, 0x33	; 51
     ea4:	9e 07       	cpc	r25, r30
     ea6:	50 f4       	brcc	.+20     	; 0xebc <main+0x1aa>
        //Vcc <6,3V; no proper operation is possible
        lcd_fix_string(BatEmpty);	//Battery empty!
     ea8:	8a e6       	ldi	r24, 0x6A	; 106
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        wait_about2s();
     eb0:	80 e9       	ldi	r24, 0x90	; 144
     eb2:	91 e0       	ldi	r25, 0x01	; 1
     eb4:	0e 94 ba 01 	call	0x374	; 0x374 <sleep_5ms>
        PORTD = 0;			//switch power off
     eb8:	1b b8       	out	0x0b, r1	; 11
        return 0;
     eba:	26 c4       	rjmp	.+2124   	; 0x1708 <main+0x9f6>
     }
     lcd_fix_string(BatWeak);		//Battery weak
     ebc:	85 e6       	ldi	r24, 0x65	; 101
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <main+0x1b4>
  } else { // Battery-voltage OK
     lcd_fix_string(OK_str); 		// "OK"
     ec2:	8a ee       	ldi	r24, 0xEA	; 234
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  }
#else
  lcd_fix2_string(VERSION_str);		// if no Battery check, Version .. in row 1
#endif
#ifdef WDT_enabled
  wdt_enable(WDTO_2S);		//Watchdog on
     eca:	2f e0       	ldi	r18, 0x0F	; 15
     ecc:	88 e1       	ldi	r24, 0x18	; 24
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	a8 95       	wdr
     ed6:	80 93 60 00 	sts	0x0060, r24
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	20 93 60 00 	sts	0x0060, r18
#endif

//  wait_about1s();			// add more time for reading batterie voltage
  // begin tests
#ifdef AUTO_RH
  RefVoltage();			//compute RHmultip = f(reference voltage)
     ee0:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <RefVoltage>
#endif
#if FLASHEND > 0x1fff
  if (WithReference) {
     ee4:	80 91 41 01 	lds	r24, 0x0141
     ee8:	88 23       	and	r24, r24
     eea:	b1 f0       	breq	.+44     	; 0xf18 <main+0x206>
 #if POWER_OFF+0 > 1
     if ((mess_count == 0) && (empty_count == 0))
 #endif
     {
         /* display VCC= only first time */
         lcd_line2();
     eec:	80 ec       	ldi	r24, 0xC0	; 192
     eee:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
         lcd_fix_string(VCC_str);		// VCC=
     ef2:	89 e2       	ldi	r24, 0x29	; 41
     ef4:	91 e0       	ldi	r25, 0x01	; 1
     ef6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
         DisplayValue(ADCconfig.U_AVCC,-3,'V',3);	// Display 3 Digits of this mV units
     efa:	60 91 37 01 	lds	r22, 0x0137
     efe:	70 91 38 01 	lds	r23, 0x0138
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	4d ef       	ldi	r20, 0xFD	; 253
     f08:	26 e5       	ldi	r18, 0x56	; 86
     f0a:	03 e0       	ldi	r16, 0x03	; 3
     f0c:	0e 94 cd 0c 	call	0x199a	; 0x199a <DisplayValue>
         wait_about1s();
     f10:	88 ec       	ldi	r24, 0xC8	; 200
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 ba 01 	call	0x374	; 0x374 <sleep_5ms>
     wait_about300ms();
  }
#endif

#ifndef DebugOut
  lcd_line2();			//LCD position row 2, column 1
     f18:	80 ec       	ldi	r24, 0xC0	; 192
     f1a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
#endif
  EntladePins();		// discharge all capacitors!
     f1e:	0e 94 37 0c 	call	0x186e	; 0x186e <EntladePins>
  if(PartFound == PART_CELL) {
     f22:	80 91 09 01 	lds	r24, 0x0109
     f26:	88 30       	cpi	r24, 0x08	; 8
     f28:	39 f4       	brne	.+14     	; 0xf38 <main+0x226>
    lcd_clear();
     f2a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
    lcd_fix_string(Cell_str);	// display "Cell!"
     f2e:	83 e2       	ldi	r24, 0x23	; 35
     f30:	91 e0       	ldi	r25, 0x01	; 1
     f32:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     f36:	bf c3       	rjmp	.+1918   	; 0x16b6 <main+0x9a4>
#endif
    goto end;
  }

#ifdef CHECK_CALL
  UnCalibrated = 0;
     f38:	10 92 3e 01 	sts	0x013E, r1
  lcd_command(CMD_SetDisplayAndCursor | 0x04); // Display on / Cursor off / no Blinking
     f3c:	8c e0       	ldi	r24, 0x0C	; 12
     f3e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  if (eeprom_read_byte(&c_zero_tab[0]) != eeprom_read_byte(&c_zero_tab[3])) {
     f42:	8b ec       	ldi	r24, 0xCB	; 203
     f44:	91 e0       	ldi	r25, 0x01	; 1
     f46:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__eerd_byte_m168>
     f4a:	18 2f       	mov	r17, r24
     f4c:	8e ec       	ldi	r24, 0xCE	; 206
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__eerd_byte_m168>
     f54:	18 17       	cp	r17, r24
     f56:	31 f0       	breq	.+12     	; 0xf64 <main+0x252>
     // if calibrated, both c_zero_tab values are identical! c_zero_tab[3] is not used otherwise
     UnCalibrated = 1;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	80 93 3e 01 	sts	0x013E, r24
     lcd_command(CMD_SetDisplayAndCursor | 0x06); // Display on / Cursor on / no Blinking
     f5e:	8e e0       	ldi	r24, 0x0E	; 14
     f60:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  }
  AutoCheck();			//check, if selftest should be done
     f64:	0e 94 2e 02 	call	0x45c	; 0x45c <AutoCheck>
  lcd_line2();			//LCD position row2, column 1
     f68:	80 ec       	ldi	r24, 0xC0	; 192
     f6a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
#else
  lcd_line2();			//LCD position row2, column 1
#endif
  lcd_fix_string(TestRunning);		//String: testing...
     f6e:	8a e5       	ldi	r24, 0x5A	; 90
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     
  // check all 6 combinations for the 3 pins 
//         High  Low  Tri
  CheckPins(TP1, TP2, TP3);
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	61 e0       	ldi	r22, 0x01	; 1
     f7a:	42 e0       	ldi	r20, 0x02	; 2
     f7c:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <CheckPins>
  CheckPins(TP2, TP1, TP3);
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	42 e0       	ldi	r20, 0x02	; 2
     f86:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <CheckPins>

  CheckPins(TP1, TP3, TP2);
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	62 e0       	ldi	r22, 0x02	; 2
     f8e:	41 e0       	ldi	r20, 0x01	; 1
     f90:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <CheckPins>
  CheckPins(TP3, TP1, TP2);
     f94:	82 e0       	ldi	r24, 0x02	; 2
     f96:	60 e0       	ldi	r22, 0x00	; 0
     f98:	41 e0       	ldi	r20, 0x01	; 1
     f9a:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <CheckPins>

  CheckPins(TP2, TP3, TP1);
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	62 e0       	ldi	r22, 0x02	; 2
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <CheckPins>
  CheckPins(TP3, TP2, TP1);
     fa8:	82 e0       	ldi	r24, 0x02	; 2
     faa:	61 e0       	ldi	r22, 0x01	; 1
     fac:	40 e0       	ldi	r20, 0x00	; 0
     fae:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <CheckPins>

  if (ResistorsFound != 0) {
     fb2:	80 91 6a 01 	lds	r24, 0x016A
     fb6:	88 23       	and	r24, r24
     fb8:	79 f0       	breq	.+30     	; 0xfd8 <main+0x2c6>
     if (resis[ResistorsFound-1].checked  == 0) {
     fba:	e8 2f       	mov	r30, r24
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	23 e0       	ldi	r18, 0x03	; 3
     fc0:	ee 0f       	add	r30, r30
     fc2:	ff 1f       	adc	r31, r31
     fc4:	2a 95       	dec	r18
     fc6:	e1 f7       	brne	.-8      	; 0xfc0 <main+0x2ae>
     fc8:	ed 5e       	subi	r30, 0xED	; 237
     fca:	fe 4f       	sbci	r31, 0xFE	; 254
     fcc:	97 81       	ldd	r25, Z+7	; 0x07
     fce:	99 23       	and	r25, r25
     fd0:	19 f4       	brne	.+6      	; 0xfd8 <main+0x2c6>
        ResistorsFound--;	// last resistor is not checked in both directions
     fd2:	81 50       	subi	r24, 0x01	; 1
     fd4:	80 93 6a 01 	sts	0x016A, r24
  }
  
  // Capacity measurement is only possible correctly with two Pins connected.
  // A third connected pin will increase the capacity value!
//  if(((PartFound == PART_NONE) || (PartFound == PART_RESISTOR) || (PartFound == PART_DIODE)) ) {
  if(PartFound == PART_NONE) {
     fd8:	80 91 09 01 	lds	r24, 0x0109
     fdc:	88 23       	and	r24, r24
     fde:	e1 f4       	brne	.+56     	; 0x1018 <main+0x306>
     // If no part is found yet, check separate if is is a capacitor
#if FLASHEND > 0x1fff
     lcd_data('C');
     fe0:	83 e4       	ldi	r24, 0x43	; 67
     fe2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
#endif
     EntladePins();		// discharge capacities
     fe6:	0e 94 37 0c 	call	0x186e	; 0x186e <EntladePins>
     //measurement of capacities in all 3 combinations
     cap.cval_max = 0;		// set max to zero
     fea:	10 92 70 01 	sts	0x0170, r1
     fee:	10 92 71 01 	sts	0x0171, r1
     ff2:	10 92 72 01 	sts	0x0172, r1
     ff6:	10 92 73 01 	sts	0x0173, r1
     cap.cpre_max = -12;	// set max to pF unit
     ffa:	84 ef       	ldi	r24, 0xF4	; 244
     ffc:	80 93 7f 01 	sts	0x017F, r24
     ReadCapacity(TP3, TP1);
    1000:	82 e0       	ldi	r24, 0x02	; 2
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <ReadCapacity>
#if DebugOut != 10
     ReadCapacity(TP3, TP2);
    1008:	82 e0       	ldi	r24, 0x02	; 2
    100a:	61 e0       	ldi	r22, 0x01	; 1
    100c:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <ReadCapacity>
     ReadCapacity(TP2, TP1);
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <ReadCapacity>
  lcd_line2();
  lcd_line1();
  lcd_clear_line();
  lcd_line1();
#else
  lcd_clear();				// clear total display
    1018:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
#endif

  _trans = &ntrans;			// default transistor structure to show
    101c:	f0 92 43 01 	sts	0x0143, r15
    1020:	e0 92 42 01 	sts	0x0142, r14
  if (PartFound == PART_THYRISTOR) {
    1024:	80 91 09 01 	lds	r24, 0x0109
    1028:	85 30       	cpi	r24, 0x05	; 5
    102a:	19 f4       	brne	.+6      	; 0x1032 <main+0x320>
    lcd_fix_string(Thyristor);		//"Thyristor"
    102c:	85 e8       	ldi	r24, 0x85	; 133
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	04 c0       	rjmp	.+8      	; 0x103a <main+0x328>
    goto gakAusgabe;
  }

  if (PartFound == PART_TRIAC) {
    1032:	86 30       	cpi	r24, 0x06	; 6
    1034:	51 f4       	brne	.+20     	; 0x104a <main+0x338>
    lcd_fix_string(Triac);		//"Triac"
    1036:	8f e7       	ldi	r24, 0x7F	; 127
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  max_time = SHORT_WAIT_TIME;		// use allways the short wait time
  goto end2;


gakAusgabe:
  PinLayout(Cathode_char,'G','A'); 	// CGA= or 123=...
    103e:	83 e4       	ldi	r24, 0x43	; 67
    1040:	67 e4       	ldi	r22, 0x47	; 71
    1042:	41 e4       	ldi	r20, 0x41	; 65
    1044:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <PinLayout>
    1048:	36 c3       	rjmp	.+1644   	; 0x16b6 <main+0x9a4>
  if (PartFound == PART_TRIAC) {
    lcd_fix_string(Triac);		//"Triac"
    goto gakAusgabe;
  }

  if (PartFound == PART_CAPACITOR) {
    104a:	87 30       	cpi	r24, 0x07	; 7
    104c:	09 f0       	breq	.+2      	; 0x1050 <main+0x33e>
    104e:	50 c0       	rjmp	.+160    	; 0x10f0 <main+0x3de>
//     lcd_fix_string(Capacitor);
     lcd_testpin(cap.ca);		//Pin number 1
    1050:	80 91 7c 01 	lds	r24, 0x017C
    1054:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
     lcd_fix_string(CapZeich);		// capacitor sign
    1058:	8f e1       	ldi	r24, 0x1F	; 31
    105a:	91 e0       	ldi	r25, 0x01	; 1
    105c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_testpin(cap.cb);		//Pin number 2
    1060:	80 91 7d 01 	lds	r24, 0x017D
    1064:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
#if FLASHEND > 0x1fff
     GetVloss();			// get Voltage loss of capacitor
    1068:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <GetVloss>
     if (cap.v_loss != 0) {
    106c:	80 91 7a 01 	lds	r24, 0x017A
    1070:	90 91 7b 01 	lds	r25, 0x017B
    1074:	00 97       	sbiw	r24, 0x00	; 0
    1076:	79 f0       	breq	.+30     	; 0x1096 <main+0x384>
        lcd_fix_string(VLOSS_str);	// "  Vloss="
    1078:	84 e3       	ldi	r24, 0x34	; 52
    107a:	91 e0       	ldi	r25, 0x01	; 1
    107c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        DisplayValue(cap.v_loss,-1,'%',2);
    1080:	60 91 7a 01 	lds	r22, 0x017A
    1084:	70 91 7b 01 	lds	r23, 0x017B
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	4f ef       	ldi	r20, 0xFF	; 255
    108e:	25 e2       	ldi	r18, 0x25	; 37
    1090:	02 e0       	ldi	r16, 0x02	; 2
    1092:	0e 94 cd 0c 	call	0x199a	; 0x199a <DisplayValue>
     }
#endif
     lcd_line2(); 			//2. row 
    1096:	80 ec       	ldi	r24, 0xC0	; 192
    1098:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     DisplayValue(cap.cval_max,cap.cpre_max,'F',4);
    109c:	60 91 70 01 	lds	r22, 0x0170
    10a0:	70 91 71 01 	lds	r23, 0x0171
    10a4:	80 91 72 01 	lds	r24, 0x0172
    10a8:	90 91 73 01 	lds	r25, 0x0173
    10ac:	40 91 7f 01 	lds	r20, 0x017F
    10b0:	26 e4       	ldi	r18, 0x46	; 70
    10b2:	04 e0       	ldi	r16, 0x04	; 4
    10b4:	0e 94 cd 0c 	call	0x199a	; 0x199a <DisplayValue>
#if FLASHEND > 0x1fff
     cap.esr = GetESR(cap.cb, cap.ca);		// get ESR of capacitor
    10b8:	80 91 7d 01 	lds	r24, 0x017D
    10bc:	60 91 7c 01 	lds	r22, 0x017C
    10c0:	0e 94 9c 1b 	call	0x3738	; 0x3738 <GetESR>
    10c4:	90 93 79 01 	sts	0x0179, r25
    10c8:	80 93 78 01 	sts	0x0178, r24
     if ( cap.esr < 65530) {
    10cc:	ff ef       	ldi	r31, 0xFF	; 255
    10ce:	8a 3f       	cpi	r24, 0xFA	; 250
    10d0:	9f 07       	cpc	r25, r31
    10d2:	08 f0       	brcs	.+2      	; 0x10d6 <main+0x3c4>
    10d4:	f0 c2       	rjmp	.+1504   	; 0x16b6 <main+0x9a4>
        lcd_fix_string(ESR_str);
    10d6:	8e e2       	ldi	r24, 0x2E	; 46
    10d8:	91 e0       	ldi	r25, 0x01	; 1
    10da:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        DisplayValue(cap.esr,-2,LCD_CHAR_OMEGA,2);
    10de:	60 91 78 01 	lds	r22, 0x0178
    10e2:	70 91 79 01 	lds	r23, 0x0179
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	4e ef       	ldi	r20, 0xFE	; 254
    10ec:	24 ef       	ldi	r18, 0xF4	; 244
    10ee:	35 c2       	rjmp	.+1130   	; 0x155a <main+0x848>
     }
#endif
     goto end;
  }

  if(PartFound == PART_DIODE) {
    10f0:	82 30       	cpi	r24, 0x02	; 2
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <main+0x3e4>
    10f4:	de c0       	rjmp	.+444    	; 0x12b2 <main+0x5a0>
     if(NumOfDiodes == 1) {		//single Diode
    10f6:	80 91 07 01 	lds	r24, 0x0107
    10fa:	81 30       	cpi	r24, 0x01	; 1
    10fc:	e1 f5       	brne	.+120    	; 0x1176 <main+0x464>
           lcd_fix_string(KatAn);	//"-|<-"
           lcd_testpin(diodes.Anode[0]);
        }
 #else
        // the higher test pin number is right side
        if (diodes.Anode[0] < diodes.Cathode[0]) {
    10fe:	90 91 82 01 	lds	r25, 0x0182
    1102:	80 91 88 01 	lds	r24, 0x0188
    1106:	98 17       	cp	r25, r24
    1108:	50 f4       	brcc	.+20     	; 0x111e <main+0x40c>
           lcd_testpin(diodes.Anode[0]);
    110a:	89 2f       	mov	r24, r25
    110c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    1110:	85 e4       	ldi	r24, 0x45	; 69
    1112:	91 e0       	ldi	r25, 0x01	; 1
    1114:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes.Cathode[0]);
    1118:	80 91 88 01 	lds	r24, 0x0188
    111c:	08 c0       	rjmp	.+16     	; 0x112e <main+0x41c>
        } else {
           lcd_testpin(diodes.Cathode[0]);
    111e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    1122:	89 e4       	ldi	r24, 0x49	; 73
    1124:	91 e0       	ldi	r25, 0x01	; 1
    1126:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes.Anode[0]);
    112a:	80 91 82 01 	lds	r24, 0x0182
    112e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
        lcd_testpin(diodes.Anode[0]);
        lcd_fix_string(AnKat);		//"->|-"
        lcd_testpin(diodes.Cathode[0]);
#endif
#if FLASHEND > 0x1fff
	GetIr(diodes.Cathode[0],diodes.Anode[0]);
    1132:	80 91 88 01 	lds	r24, 0x0188
    1136:	60 91 82 01 	lds	r22, 0x0182
    113a:	0e 94 4d 06 	call	0xc9a	; 0xc9a <GetIr>
#endif
        UfAusgabe(0x70);
    113e:	80 e7       	ldi	r24, 0x70	; 112
    1140:	0e 94 a6 0b 	call	0x174c	; 0x174c <UfAusgabe>
        /* load current of capacity is (5V-1.1V)/(470000 Ohm) = 8298nA */
        lcd_fix_string(GateCap_str);	//"C="
    1144:	8d ef       	ldi	r24, 0xFD	; 253
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        ReadCapacity(diodes.Cathode[0],diodes.Anode[0]);	// Capacity opposite flow direction
    114c:	80 91 88 01 	lds	r24, 0x0188
    1150:	60 91 82 01 	lds	r22, 0x0182
    1154:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <ReadCapacity>
        DisplayValue(cap.cval,cap.cpre,'F',3);
    1158:	60 91 6c 01 	lds	r22, 0x016C
    115c:	70 91 6d 01 	lds	r23, 0x016D
    1160:	80 91 6e 01 	lds	r24, 0x016E
    1164:	90 91 6f 01 	lds	r25, 0x016F
    1168:	40 91 7e 01 	lds	r20, 0x017E
    116c:	26 e4       	ldi	r18, 0x46	; 70
    116e:	03 e0       	ldi	r16, 0x03	; 3
    1170:	0e 94 cd 0c 	call	0x199a	; 0x199a <DisplayValue>
        goto end3;
    1174:	b1 c2       	rjmp	.+1378   	; 0x16d8 <main+0x9c6>
     } else if(NumOfDiodes == 2) { // double diode
    1176:	82 30       	cpi	r24, 0x02	; 2
    1178:	09 f0       	breq	.+2      	; 0x117c <main+0x46a>
    117a:	47 c0       	rjmp	.+142    	; 0x120a <main+0x4f8>
        lcd_data('2');
    117c:	82 e3       	ldi	r24, 0x32	; 50
    117e:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
        lcd_fix_string(Dioden);		//"diodes "
    1182:	8d e4       	ldi	r24, 0x4D	; 77
    1184:	91 e0       	ldi	r25, 0x01	; 1
    1186:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        if(diodes.Anode[0] == diodes.Anode[1]) { //Common Anode
    118a:	80 91 82 01 	lds	r24, 0x0182
    118e:	20 91 83 01 	lds	r18, 0x0183
    1192:	82 17       	cp	r24, r18
    1194:	99 f4       	brne	.+38     	; 0x11bc <main+0x4aa>
           lcd_testpin(diodes.Cathode[0]);
    1196:	80 91 88 01 	lds	r24, 0x0188
    119a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    119e:	89 e4       	ldi	r24, 0x49	; 73
    11a0:	91 e0       	ldi	r25, 0x01	; 1
    11a2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes.Anode[0]);
    11a6:	80 91 82 01 	lds	r24, 0x0182
    11aa:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    11ae:	85 e4       	ldi	r24, 0x45	; 69
    11b0:	91 e0       	ldi	r25, 0x01	; 1
    11b2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes.Cathode[1]);
    11b6:	80 91 89 01 	lds	r24, 0x0189
    11ba:	16 c0       	rjmp	.+44     	; 0x11e8 <main+0x4d6>
           UfAusgabe(0x01);
           goto end3;
        } 
        if(diodes.Cathode[0] == diodes.Cathode[1]) { //Common Cathode
    11bc:	30 91 88 01 	lds	r19, 0x0188
    11c0:	90 91 89 01 	lds	r25, 0x0189
    11c4:	39 17       	cp	r19, r25
    11c6:	b1 f4       	brne	.+44     	; 0x11f4 <main+0x4e2>
           lcd_testpin(diodes.Anode[0]);
    11c8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    11cc:	85 e4       	ldi	r24, 0x45	; 69
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
	   lcd_testpin(diodes.Cathode[0]);
    11d4:	80 91 88 01 	lds	r24, 0x0188
    11d8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    11dc:	89 e4       	ldi	r24, 0x49	; 73
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes.Anode[1]);
    11e4:	80 91 83 01 	lds	r24, 0x0183
    11e8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           UfAusgabe(0x01);
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	0e 94 a6 0b 	call	0x174c	; 0x174c <UfAusgabe>
           goto end3;
    11f2:	72 c2       	rjmp	.+1252   	; 0x16d8 <main+0x9c6>
//        else if ((diodes.Cathode[0] == diodes.Anode[1]) && (diodes.Cathode[1] == diodes.Anode[0])) 
        } 
        if (diodes.Cathode[0] == diodes.Anode[1]) {
    11f4:	32 17       	cp	r19, r18
    11f6:	11 f4       	brne	.+4      	; 0x11fc <main+0x4ea>
           // normaly two serial diodes are detected as three diodes, but if the threshold is high
           // for both diodes, the third diode is not detected.
           // can also be Antiparallel
           diode_sequence = 0x01;	// 0 1
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	04 c0       	rjmp	.+8      	; 0x1204 <main+0x4f2>
           SerienDiodenAusgabe();
           goto end3;
        } 
        if (diodes.Cathode[1] == diodes.Anode[0]) {
    11fc:	98 17       	cp	r25, r24
    11fe:	09 f0       	breq	.+2      	; 0x1202 <main+0x4f0>
    1200:	41 c0       	rjmp	.+130    	; 0x1284 <main+0x572>
           diode_sequence = 0x10;	// 1 0
    1202:	80 e1       	ldi	r24, 0x10	; 16
    1204:	80 93 02 01 	sts	0x0102, r24
    1208:	3a c0       	rjmp	.+116    	; 0x127e <main+0x56c>
           SerienDiodenAusgabe();
           goto end3;
        }
     } else if(NumOfDiodes == 3) {
    120a:	83 30       	cpi	r24, 0x03	; 3
    120c:	d9 f5       	brne	.+118    	; 0x1284 <main+0x572>
        //Serial of 2 Diodes; was detected as 3 Diodes 
        diode_sequence = 0x33;	// 3 3
    120e:	83 e3       	ldi	r24, 0x33	; 51
    1210:	80 93 02 01 	sts	0x0102, r24
        /* Check for any constallation of 2 serial diodes:
          Only once the pin No of anyone Cathode is identical of another anode.
          two diodes in series is additionally detected as third big diode.
        */
        if(diodes.Cathode[0] == diodes.Anode[1])
    1214:	80 91 88 01 	lds	r24, 0x0188
    1218:	90 91 83 01 	lds	r25, 0x0183
    121c:	89 17       	cp	r24, r25
    121e:	19 f4       	brne	.+6      	; 0x1226 <main+0x514>
          {
           diode_sequence = 0x01;	// 0 1
    1220:	21 e0       	ldi	r18, 0x01	; 1
    1222:	20 93 02 01 	sts	0x0102, r18
          }
        if(diodes.Anode[0] == diodes.Cathode[1])
    1226:	40 91 82 01 	lds	r20, 0x0182
    122a:	30 91 89 01 	lds	r19, 0x0189
    122e:	43 17       	cp	r20, r19
    1230:	19 f4       	brne	.+6      	; 0x1238 <main+0x526>
          {
           diode_sequence = 0x10;	// 1 0
    1232:	20 e1       	ldi	r18, 0x10	; 16
    1234:	20 93 02 01 	sts	0x0102, r18
          }
        if(diodes.Cathode[0] == diodes.Anode[2])
    1238:	20 91 84 01 	lds	r18, 0x0184
    123c:	82 17       	cp	r24, r18
    123e:	19 f4       	brne	.+6      	; 0x1246 <main+0x534>
          {
           diode_sequence = 0x02;	// 0 2
    1240:	82 e0       	ldi	r24, 0x02	; 2
    1242:	80 93 02 01 	sts	0x0102, r24
          }
        if(diodes.Anode[0] == diodes.Cathode[2])
    1246:	80 91 8a 01 	lds	r24, 0x018A
    124a:	48 17       	cp	r20, r24
    124c:	19 f4       	brne	.+6      	; 0x1254 <main+0x542>
          {
           diode_sequence = 0x20;	// 2 0
    124e:	40 e2       	ldi	r20, 0x20	; 32
    1250:	40 93 02 01 	sts	0x0102, r20
          }
        if(diodes.Cathode[1] == diodes.Anode[2])
    1254:	32 17       	cp	r19, r18
    1256:	19 f4       	brne	.+6      	; 0x125e <main+0x54c>
          {
           diode_sequence = 0x12;	// 1 2
    1258:	22 e1       	ldi	r18, 0x12	; 18
    125a:	20 93 02 01 	sts	0x0102, r18
          }
        if(diodes.Anode[1] == diodes.Cathode[2])
    125e:	98 17       	cp	r25, r24
    1260:	19 f4       	brne	.+6      	; 0x1268 <main+0x556>
          {
           diode_sequence = 0x21;	// 2 1
    1262:	81 e2       	ldi	r24, 0x21	; 33
    1264:	80 93 02 01 	sts	0x0102, r24
        lcd_space();
        u2lcd(diodes.Voltage[2]);
        lcd_line1();
#endif
//        if((ptrans.b<3) && (ptrans.c<3)) 
        if(diode_sequence < 0x22) {
    1268:	80 91 02 01 	lds	r24, 0x0102
    126c:	82 32       	cpi	r24, 0x22	; 34
    126e:	50 f4       	brcc	.+20     	; 0x1284 <main+0x572>
           lcd_data('3');
    1270:	83 e3       	ldi	r24, 0x33	; 51
    1272:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
           lcd_fix_string(Dioden);	//"Diodes "
    1276:	8d e4       	ldi	r24, 0x4D	; 77
    1278:	91 e0       	ldi	r25, 0x01	; 1
    127a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           SerienDiodenAusgabe();
    127e:	0e 94 c1 0b 	call	0x1782	; 0x1782 <SerienDiodenAusgabe>
           goto end3;
    1282:	2a c2       	rjmp	.+1108   	; 0x16d8 <main+0x9c6>
        }
     }  // end (NumOfDiodes == 3)
     lcd_fix_string(Bauteil);		//"Bauteil"
    1284:	8a e7       	ldi	r24, 0x7A	; 122
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_fix_string(Unknown); 		//" unbek."
    128c:	8e e8       	ldi	r24, 0x8E	; 142
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_line2(); //2. row 
    1294:	80 ec       	ldi	r24, 0xC0	; 192
    1296:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     lcd_fix_string(OrBroken); 		//"oder defekt "
    129a:	87 ea       	ldi	r24, 0xA7	; 167
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_data(NumOfDiodes + '0');
    12a2:	80 91 07 01 	lds	r24, 0x0107
    12a6:	80 5d       	subi	r24, 0xD0	; 208
    12a8:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
     lcd_fix_string(AnKat);		//"->|-"
    12ac:	85 e4       	ldi	r24, 0x45	; 69
    12ae:	91 e0       	ldi	r25, 0x01	; 1
    12b0:	fd c1       	rjmp	.+1018   	; 0x16ac <main+0x99a>
     goto not_known;
     // end (PartFound == PART_DIODE)
  } else if (PartFound == PART_TRANSISTOR) {
    12b2:	83 30       	cpi	r24, 0x03	; 3
    12b4:	09 f0       	breq	.+2      	; 0x12b8 <main+0x5a6>
    12b6:	90 c0       	rjmp	.+288    	; 0x13d8 <main+0x6c6>
          PartMode = PART_MODE_NPN;
       }
    }
#endif
#if FLASHEND > 0x1fff
    if ((ptrans.count != 0) && (ntrans.count !=0) && (!(ON_PIN_REG & (1<<RST_PIN)))) {
    12b8:	80 91 69 01 	lds	r24, 0x0169
    12bc:	88 23       	and	r24, r24
    12be:	79 f0       	breq	.+30     	; 0x12de <main+0x5cc>
    12c0:	80 91 51 01 	lds	r24, 0x0151
    12c4:	88 23       	and	r24, r24
    12c6:	59 f0       	breq	.+22     	; 0x12de <main+0x5cc>
    12c8:	4f 99       	sbic	0x09, 7	; 9
    12ca:	09 c0       	rjmp	.+18     	; 0x12de <main+0x5cc>
       // if the Start key is still pressed, use the other Transistor
       if (PartMode == PART_MODE_NPN) {
    12cc:	80 91 08 01 	lds	r24, 0x0108
    12d0:	8c 30       	cpi	r24, 0x0C	; 12
    12d2:	11 f4       	brne	.+4      	; 0x12d8 <main+0x5c6>
          PartMode = PART_MODE_PNP;	// switch to parasitic transistor
    12d4:	8d e0       	ldi	r24, 0x0D	; 13
    12d6:	01 c0       	rjmp	.+2      	; 0x12da <main+0x5c8>
       } else {
          PartMode = PART_MODE_NPN;	// switch to parasitic transistor
    12d8:	8c e0       	ldi	r24, 0x0C	; 12
    12da:	80 93 08 01 	sts	0x0108, r24
       }
    }
#endif

    if(PartMode == PART_MODE_NPN) {
    12de:	80 91 08 01 	lds	r24, 0x0108
    12e2:	8c 30       	cpi	r24, 0x0C	; 12
    12e4:	61 f4       	brne	.+24     	; 0x12fe <main+0x5ec>
       lcd_fix_string(NPN_str);		//"NPN "
    12e6:	83 e0       	ldi	r24, 0x03	; 3
    12e8:	91 e0       	ldi	r25, 0x01	; 1
    12ea:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
#if FLASHEND > 0x1fff
       if (ptrans.count != 0) {
    12ee:	80 91 69 01 	lds	r24, 0x0169
    12f2:	88 23       	and	r24, r24
    12f4:	99 f0       	breq	.+38     	; 0x131c <main+0x60a>
          lcd_data('p');		// mark for parasitic PNp
    12f6:	80 e7       	ldi	r24, 0x70	; 112
    12f8:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
    12fc:	0f c0       	rjmp	.+30     	; 0x131c <main+0x60a>
       }
#endif
//       _trans = &ntrans;  is allready selected a default
    } else {
       lcd_fix_string(PNP_str);		//"PNP "
    12fe:	87 e0       	ldi	r24, 0x07	; 7
    1300:	91 e0       	ldi	r25, 0x01	; 1
    1302:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
#if FLASHEND > 0x1fff
       if (ntrans.count != 0) {
    1306:	80 91 51 01 	lds	r24, 0x0151
    130a:	88 23       	and	r24, r24
    130c:	19 f0       	breq	.+6      	; 0x1314 <main+0x602>
          lcd_data('n');		// mark for parasitic NPn
    130e:	8e e6       	ldi	r24, 0x6E	; 110
    1310:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       }
#endif
       _trans = &ptrans;		// change transistor structure
    1314:	d0 92 43 01 	sts	0x0143, r13
    1318:	c0 92 42 01 	sts	0x0142, r12
    }
    lcd_space();
    131c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
//    if( NumOfDiodes > 2) 	//Transistor with protection diode
    for (ii=0; ii<NumOfDiodes; ii++) {
    1320:	10 e0       	ldi	r17, 0x00	; 0
    1322:	2a c0       	rjmp	.+84     	; 0x1378 <main+0x666>
       if ((diodes.Anode[ii] == _trans->b) || (diodes.Cathode[ii] == _trans->b)) continue;
    1324:	e1 2f       	mov	r30, r17
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	a0 91 42 01 	lds	r26, 0x0142
    132c:	b0 91 43 01 	lds	r27, 0x0143
    1330:	1a 96       	adiw	r26, 0x0a	; 10
    1332:	8c 91       	ld	r24, X
    1334:	1a 97       	sbiw	r26, 0x0a	; 10
    1336:	ee 57       	subi	r30, 0x7E	; 126
    1338:	fe 4f       	sbci	r31, 0xFE	; 254
    133a:	90 81       	ld	r25, Z
    133c:	98 17       	cp	r25, r24
    133e:	d9 f0       	breq	.+54     	; 0x1376 <main+0x664>
    1340:	96 81       	ldd	r25, Z+6	; 0x06
    1342:	98 17       	cp	r25, r24
    1344:	c1 f0       	breq	.+48     	; 0x1376 <main+0x664>
       // Layout with EBC= style
       if(PartMode == PART_MODE_NPN)
 #endif
#else
       // Layout with 123= style
       if (((PartMode == PART_MODE_NPN) && (ntrans.c > ntrans.e)) || ((PartMode != PART_MODE_NPN) && (ptrans.c < ptrans.e)))
    1346:	80 91 08 01 	lds	r24, 0x0108
    134a:	8c 30       	cpi	r24, 0x0C	; 12
    134c:	39 f4       	brne	.+14     	; 0x135c <main+0x64a>
    134e:	90 91 4f 01 	lds	r25, 0x014F
    1352:	80 91 50 01 	lds	r24, 0x0150
    1356:	89 17       	cp	r24, r25
    1358:	38 f0       	brcs	.+14     	; 0x1368 <main+0x656>
    135a:	09 c0       	rjmp	.+18     	; 0x136e <main+0x65c>
    135c:	90 91 67 01 	lds	r25, 0x0167
    1360:	80 91 68 01 	lds	r24, 0x0168
    1364:	98 17       	cp	r25, r24
    1366:	18 f4       	brcc	.+6      	; 0x136e <main+0x65c>
#endif
       {
          lcd_fix_string(AnKat);	//"->|-"
    1368:	85 e4       	ldi	r24, 0x45	; 69
    136a:	91 e0       	ldi	r25, 0x01	; 1
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <main+0x660>
       } else {
          lcd_fix_string(KatAn);	//"-|<-"
    136e:	89 e4       	ldi	r24, 0x49	; 73
    1370:	91 e0       	ldi	r25, 0x01	; 1
    1372:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
#endif
       _trans = &ptrans;		// change transistor structure
    }
    lcd_space();
//    if( NumOfDiodes > 2) 	//Transistor with protection diode
    for (ii=0; ii<NumOfDiodes; ii++) {
    1376:	1f 5f       	subi	r17, 0xFF	; 255
    1378:	80 91 07 01 	lds	r24, 0x0107
    137c:	18 17       	cp	r17, r24
    137e:	90 f2       	brcs	.-92     	; 0x1324 <main+0x612>
          lcd_fix_string(AnKat);	//"->|-"
       } else {
          lcd_fix_string(KatAn);	//"-|<-"
       }
    }
    PinLayout('E','B','C'); 		//  EBC= or 123=...
    1380:	85 e4       	ldi	r24, 0x45	; 69
    1382:	62 e4       	ldi	r22, 0x42	; 66
    1384:	43 e4       	ldi	r20, 0x43	; 67
    1386:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <PinLayout>
    lcd_line2(); //2. row 
    138a:	80 ec       	ldi	r24, 0xC0	; 192
    138c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
       lcd_fix2_string(ICEs_str);		// "ICEs="
       DisplayValue(_trans->ices,-5,'A',3);
       wait_for_key_5s_line2();		// wait 5s and clear line 2
    }
#endif
    lcd_fix_string(hfe_str);		//"B="  (hFE)
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	91 e0       	ldi	r25, 0x01	; 1
    1394:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    DisplayValue(_trans->hfe,0,0,3);
    1398:	e0 91 42 01 	lds	r30, 0x0142
    139c:	f0 91 43 01 	lds	r31, 0x0143
    13a0:	60 81       	ld	r22, Z
    13a2:	71 81       	ldd	r23, Z+1	; 0x01
    13a4:	82 81       	ldd	r24, Z+2	; 0x02
    13a6:	93 81       	ldd	r25, Z+3	; 0x03
    13a8:	40 e0       	ldi	r20, 0x00	; 0
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	03 e0       	ldi	r16, 0x03	; 3
    13ae:	0e 94 cd 0c 	call	0x199a	; 0x199a <DisplayValue>
    lcd_space();
    13b2:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>

    lcd_fix_string(Uf_str);		//"Uf="
    13b6:	81 e1       	ldi	r24, 0x11	; 17
    13b8:	91 e0       	ldi	r25, 0x01	; 1
    13ba:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    DisplayValue(_trans->uBE,-3,'V',3);
    13be:	e0 91 42 01 	lds	r30, 0x0142
    13c2:	f0 91 43 01 	lds	r31, 0x0143
    13c6:	64 81       	ldd	r22, Z+4	; 0x04
    13c8:	75 81       	ldd	r23, Z+5	; 0x05
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	4d ef       	ldi	r20, 0xFD	; 253
    13d0:	26 e5       	ldi	r18, 0x56	; 86
    13d2:	0e 94 cd 0c 	call	0x199a	; 0x199a <DisplayValue>
    13d6:	6f c1       	rjmp	.+734    	; 0x16b6 <main+0x9a4>
    goto end;
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    13d8:	84 30       	cpi	r24, 0x04	; 4
    13da:	09 f0       	breq	.+2      	; 0x13de <main+0x6cc>
    13dc:	c0 c0       	rjmp	.+384    	; 0x155e <main+0x84c>
    if((PartMode&P_CHANNEL) == P_CHANNEL) {
    13de:	80 91 08 01 	lds	r24, 0x0108
    13e2:	84 ff       	sbrs	r24, 4
    13e4:	08 c0       	rjmp	.+16     	; 0x13f6 <main+0x6e4>
       lcd_data('P');			//P-channel
    13e6:	80 e5       	ldi	r24, 0x50	; 80
    13e8:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       _trans = &ptrans;
    13ec:	d0 92 43 01 	sts	0x0143, r13
    13f0:	c0 92 42 01 	sts	0x0142, r12
    13f4:	03 c0       	rjmp	.+6      	; 0x13fc <main+0x6ea>
    } else {
       lcd_data('N');			//N-channel
    13f6:	8e e4       	ldi	r24, 0x4E	; 78
    13f8:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
//       _trans = &ntrans;	is allready selected as default
    }
    lcd_data('-');
    13fc:	8d e2       	ldi	r24, 0x2D	; 45
    13fe:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>

    tmp = PartMode&0x0f;
    1402:	80 91 08 01 	lds	r24, 0x0108
    1406:	18 2f       	mov	r17, r24
    1408:	1f 70       	andi	r17, 0x0F	; 15
    if (tmp == PART_MODE_JFET) {
    140a:	14 30       	cpi	r17, 0x04	; 4
    140c:	19 f4       	brne	.+6      	; 0x1414 <main+0x702>
       lcd_fix_string(jfet_str);	//"JFET"
    140e:	82 ef       	ldi	r24, 0xF2	; 242
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	13 c0       	rjmp	.+38     	; 0x143a <main+0x728>
    } else {
       if ((PartMode&D_MODE) == D_MODE) {
    1414:	85 ff       	sbrs	r24, 5
    1416:	02 c0       	rjmp	.+4      	; 0x141c <main+0x70a>
          lcd_data('D');			// N-D or P-D
    1418:	84 e4       	ldi	r24, 0x44	; 68
    141a:	01 c0       	rjmp	.+2      	; 0x141e <main+0x70c>
       } else {
          lcd_data('E');			// N-E or P-E
    141c:	85 e4       	ldi	r24, 0x45	; 69
    141e:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       }
       if (tmp == (PART_MODE_IGBT)) {
    1422:	13 30       	cpi	r17, 0x03	; 3
    1424:	41 f4       	brne	.+16     	; 0x1436 <main+0x724>
          lcd_fix_string(igbt_str);	//"-IGBT"
    1426:	87 ef       	ldi	r24, 0xF7	; 247
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
       } else {
          lcd_fix_string(mosfet_str);	//"-MOS "
       }
    }
    if (tmp == PART_MODE_IGBT) {
       PinLayout('E','G','C'); 		//  SGD= or 123=...
    142e:	85 e4       	ldi	r24, 0x45	; 69
    1430:	67 e4       	ldi	r22, 0x47	; 71
    1432:	43 e4       	ldi	r20, 0x43	; 67
    1434:	07 c0       	rjmp	.+14     	; 0x1444 <main+0x732>
          lcd_data('E');			// N-E or P-E
       }
       if (tmp == (PART_MODE_IGBT)) {
          lcd_fix_string(igbt_str);	//"-IGBT"
       } else {
          lcd_fix_string(mosfet_str);	//"-MOS "
    1436:	8d ee       	ldi	r24, 0xED	; 237
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
       }
    }
    if (tmp == PART_MODE_IGBT) {
       PinLayout('E','G','C'); 		//  SGD= or 123=...
    } else {
       PinLayout('S','G','D'); 		//  SGD= or 123=...
    143e:	83 e5       	ldi	r24, 0x53	; 83
    1440:	67 e4       	ldi	r22, 0x47	; 71
    1442:	44 e4       	ldi	r20, 0x44	; 68
    1444:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <PinLayout>
    }
//    if((NumOfDiodes == 1) && ((PartMode&D_MODE) != D_MODE)) 
    if(NumOfDiodes == 1) {
    1448:	80 91 07 01 	lds	r24, 0x0107
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	09 f0       	breq	.+2      	; 0x1452 <main+0x740>
    1450:	3f c0       	rjmp	.+126    	; 0x14d0 <main+0x7be>
       // Layout with SGD= style
       if (PartMode&P_CHANNEL) /* N or P MOS */
 #endif
#else
       // layout with 123= style
       if (((PartMode&P_CHANNEL) && (ptrans.c < ptrans.e)) || ((!(PartMode&P_CHANNEL)) && (ntrans.c > ntrans.e)))
    1452:	80 91 08 01 	lds	r24, 0x0108
    1456:	84 ff       	sbrs	r24, 4
    1458:	07 c0       	rjmp	.+14     	; 0x1468 <main+0x756>
    145a:	90 91 67 01 	lds	r25, 0x0167
    145e:	80 91 68 01 	lds	r24, 0x0168
    1462:	98 17       	cp	r25, r24
    1464:	38 f0       	brcs	.+14     	; 0x1474 <main+0x762>
    1466:	17 c0       	rjmp	.+46     	; 0x1496 <main+0x784>
    1468:	90 91 4f 01 	lds	r25, 0x014F
    146c:	80 91 50 01 	lds	r24, 0x0150
    1470:	89 17       	cp	r24, r25
    1472:	88 f4       	brcc	.+34     	; 0x1496 <main+0x784>
#endif
#if FLASHEND > 0x1fff
       // there is enough space for long form of showing protection diode
       {
          lcd_data(LCD_CHAR_DIODE1);	//show Diode symbol >|
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
          lcd_line2();			//2. Row
    147a:	80 ec       	ldi	r24, 0xC0	; 192
    147c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
          lcd_testpin(diodes.Anode[0]);
    1480:	80 91 82 01 	lds	r24, 0x0182
    1484:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
          lcd_fix_string(AnKat);	//"->|-"
    1488:	85 e4       	ldi	r24, 0x45	; 69
    148a:	91 e0       	ldi	r25, 0x01	; 1
    148c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
          lcd_testpin(diodes.Cathode[0]);
    1490:	80 91 88 01 	lds	r24, 0x0188
    1494:	10 c0       	rjmp	.+32     	; 0x14b6 <main+0x7a4>
       } else {
          lcd_data(LCD_CHAR_DIODE2);	//show Diode symbol |<
    1496:	82 e0       	ldi	r24, 0x02	; 2
    1498:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
          lcd_line2();			//2. Row
    149c:	80 ec       	ldi	r24, 0xC0	; 192
    149e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
          lcd_testpin(diodes.Cathode[0]);
    14a2:	80 91 88 01 	lds	r24, 0x0188
    14a6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
          lcd_fix_string(KatAn);	//"-|<-"
    14aa:	89 e4       	ldi	r24, 0x49	; 73
    14ac:	91 e0       	ldi	r25, 0x01	; 1
    14ae:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
          lcd_testpin(diodes.Anode[0]);
    14b2:	80 91 82 01 	lds	r24, 0x0182
    14b6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
       }
       lcd_space();
    14ba:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
       lcd_fix_string(Uf_str);			//"Uf="
    14be:	81 e1       	ldi	r24, 0x11	; 17
    14c0:	91 e0       	ldi	r25, 0x01	; 1
    14c2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
       mVAusgabe(0);
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	0e 94 90 0b 	call	0x1720	; 0x1720 <mVAusgabe>
       wait_for_key_5s_line2();		// wait 5s and clear line 2
    14cc:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <wait_for_key_5s_line2>
       } else {
          lcd_data(LCD_CHAR_DIODE2);	//show Diode symbol |<
       }
#endif
    }
    lcd_line2();			//2. Row
    14d0:	80 ec       	ldi	r24, 0xC0	; 192
    14d2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
    if((PartMode&D_MODE) != D_MODE) {	//enhancement-MOSFET
    14d6:	80 91 08 01 	lds	r24, 0x0108
    14da:	85 fd       	sbrc	r24, 5
    14dc:	1d c0       	rjmp	.+58     	; 0x1518 <main+0x806>
	//Gate capacity
       lcd_fix_string(GateCap_str);		//"C="
    14de:	8d ef       	ldi	r24, 0xFD	; 253
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
       ReadCapacity(_trans->b,_trans->e);	//measure capacity
    14e6:	e0 91 42 01 	lds	r30, 0x0142
    14ea:	f0 91 43 01 	lds	r31, 0x0143
    14ee:	82 85       	ldd	r24, Z+10	; 0x0a
    14f0:	64 85       	ldd	r22, Z+12	; 0x0c
    14f2:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <ReadCapacity>
       DisplayValue(cap.cval,cap.cpre,'F',3);
    14f6:	60 91 6c 01 	lds	r22, 0x016C
    14fa:	70 91 6d 01 	lds	r23, 0x016D
    14fe:	80 91 6e 01 	lds	r24, 0x016E
    1502:	90 91 6f 01 	lds	r25, 0x016F
    1506:	40 91 7e 01 	lds	r20, 0x017E
    150a:	26 e4       	ldi	r18, 0x46	; 70
    150c:	03 e0       	ldi	r16, 0x03	; 3
    150e:	0e 94 cd 0c 	call	0x199a	; 0x199a <DisplayValue>
       lcd_fix_string(vt_str);		// "Vt="
    1512:	85 e1       	ldi	r24, 0x15	; 21
    1514:	91 e0       	ldi	r25, 0x01	; 1
    1516:	15 c0       	rjmp	.+42     	; 0x1542 <main+0x830>
    } else {
       lcd_data('I');
    1518:	89 e4       	ldi	r24, 0x49	; 73
    151a:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       lcd_data('=');
    151e:	8d e3       	ldi	r24, 0x3D	; 61
    1520:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       DisplayValue(_trans->current,-5,'A',2);
    1524:	e0 91 42 01 	lds	r30, 0x0142
    1528:	f0 91 43 01 	lds	r31, 0x0143
    152c:	66 81       	ldd	r22, Z+6	; 0x06
    152e:	77 81       	ldd	r23, Z+7	; 0x07
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	4b ef       	ldi	r20, 0xFB	; 251
    1536:	21 e4       	ldi	r18, 0x41	; 65
    1538:	02 e0       	ldi	r16, 0x02	; 2
    153a:	0e 94 cd 0c 	call	0x199a	; 0x199a <DisplayValue>
       lcd_fix_string(Vgs_str);		// " Vg="
    153e:	8a e1       	ldi	r24, 0x1A	; 26
    1540:	91 e0       	ldi	r25, 0x01	; 1
    1542:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    }
    //Gate-threshold voltage
    DisplayValue(_trans->gthvoltage,-3,'V',2);
    1546:	e0 91 42 01 	lds	r30, 0x0142
    154a:	f0 91 43 01 	lds	r31, 0x0143
    154e:	60 85       	ldd	r22, Z+8	; 0x08
    1550:	71 85       	ldd	r23, Z+9	; 0x09
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	4d ef       	ldi	r20, 0xFD	; 253
    1558:	26 e5       	ldi	r18, 0x56	; 86
    155a:	02 e0       	ldi	r16, 0x02	; 2
    155c:	3a cf       	rjmp	.-396    	; 0x13d2 <main+0x6c0>
    goto end;
    // end (PartFound == PART_FET)
  }
//   if(PartFound == PART_RESISTOR) 
resistor_out:
   if(ResistorsFound != 0) {
    155e:	60 91 6a 01 	lds	r22, 0x016A
    1562:	66 23       	and	r22, r22
    1564:	09 f4       	brne	.+2      	; 0x1568 <main+0x856>
    1566:	95 c0       	rjmp	.+298    	; 0x1692 <main+0x980>
    ii = 0;
    if (ResistorsFound == 1) { // single resistor
    1568:	61 30       	cpi	r22, 0x01	; 1
    156a:	71 f4       	brne	.+28     	; 0x1588 <main+0x876>
       lcd_testpin(resis[0].rb);  	//Pin-number 1
    156c:	80 91 20 01 	lds	r24, 0x0120
    1570:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
       lcd_fix_string(Resistor_str);
    1574:	82 e5       	ldi	r24, 0x52	; 82
    1576:	91 e0       	ldi	r25, 0x01	; 1
    1578:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
       lcd_testpin(resis[0].ra);		//Pin-number 2
    157c:	80 91 1f 01 	lds	r24, 0x011F
    1580:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
    // end (PartFound == PART_FET)
  }
//   if(PartFound == PART_RESISTOR) 
resistor_out:
   if(ResistorsFound != 0) {
    ii = 0;
    1584:	10 e0       	ldi	r17, 0x00	; 0
    1586:	52 c0       	rjmp	.+164    	; 0x162c <main+0x91a>
    if (ResistorsFound == 1) { // single resistor
       lcd_testpin(resis[0].rb);  	//Pin-number 1
       lcd_fix_string(Resistor_str);
       lcd_testpin(resis[0].ra);		//Pin-number 2
    } else { // R-Max suchen
       if (resis[1].rx > resis[0].rx)
    1588:	20 91 23 01 	lds	r18, 0x0123
    158c:	30 91 24 01 	lds	r19, 0x0124
    1590:	40 91 25 01 	lds	r20, 0x0125
    1594:	50 91 26 01 	lds	r21, 0x0126
    1598:	80 91 1b 01 	lds	r24, 0x011B
    159c:	90 91 1c 01 	lds	r25, 0x011C
    15a0:	a0 91 1d 01 	lds	r26, 0x011D
    15a4:	b0 91 1e 01 	lds	r27, 0x011E
          ii = 1;
       if (ResistorsFound == 2) {
    15a8:	62 30       	cpi	r22, 0x02	; 2
    15aa:	51 f1       	breq	.+84     	; 0x1600 <main+0x8ee>
    // end (PartFound == PART_FET)
  }
//   if(PartFound == PART_RESISTOR) 
resistor_out:
   if(ResistorsFound != 0) {
    ii = 0;
    15ac:	11 e0       	ldi	r17, 0x01	; 1
    15ae:	82 17       	cp	r24, r18
    15b0:	93 07       	cpc	r25, r19
    15b2:	a4 07       	cpc	r26, r20
    15b4:	b5 07       	cpc	r27, r21
    15b6:	08 f0       	brcs	.+2      	; 0x15ba <main+0x8a8>
    15b8:	10 e0       	ldi	r17, 0x00	; 0
       if (resis[1].rx > resis[0].rx)
          ii = 1;
       if (ResistorsFound == 2) {
          ii = 2;
       } else {
          if (resis[2].rx > resis[ii].rx) {
    15ba:	e1 2f       	mov	r30, r17
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	93 e0       	ldi	r25, 0x03	; 3
    15c0:	ee 0f       	add	r30, r30
    15c2:	ff 1f       	adc	r31, r31
    15c4:	9a 95       	dec	r25
    15c6:	e1 f7       	brne	.-8      	; 0x15c0 <main+0x8ae>
    15c8:	e5 5e       	subi	r30, 0xE5	; 229
    15ca:	fe 4f       	sbci	r31, 0xFE	; 254
    15cc:	20 91 2b 01 	lds	r18, 0x012B
    15d0:	30 91 2c 01 	lds	r19, 0x012C
    15d4:	40 91 2d 01 	lds	r20, 0x012D
    15d8:	50 91 2e 01 	lds	r21, 0x012E
    15dc:	80 81       	ld	r24, Z
    15de:	91 81       	ldd	r25, Z+1	; 0x01
    15e0:	a2 81       	ldd	r26, Z+2	; 0x02
    15e2:	b3 81       	ldd	r27, Z+3	; 0x03
    15e4:	82 17       	cp	r24, r18
    15e6:	93 07       	cpc	r25, r19
    15e8:	a4 07       	cpc	r26, r20
    15ea:	b5 07       	cpc	r27, r21
    15ec:	48 f0       	brcs	.+18     	; 0x1600 <main+0x8ee>
       }
       char x = '1';
       char y = '3';
       char z = '2';
   
       if (ii == 1) {
    15ee:	11 30       	cpi	r17, 0x01	; 1
    15f0:	19 f0       	breq	.+6      	; 0x15f8 <main+0x8e6>
    15f2:	02 e3       	ldi	r16, 0x32	; 50
    15f4:	23 e3       	ldi	r18, 0x33	; 51
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <main+0x8ea>
          // x = '1';
          y = '2';
          z = '3';
    15f8:	03 e3       	ldi	r16, 0x33	; 51
       char y = '3';
       char z = '2';
   
       if (ii == 1) {
          // x = '1';
          y = '2';
    15fa:	22 e3       	ldi	r18, 0x32	; 50
       } else {
          if (resis[2].rx > resis[ii].rx) {
             ii = 2;
          }
       }
       char x = '1';
    15fc:	81 e3       	ldi	r24, 0x31	; 49
    15fe:	04 c0       	rjmp	.+8      	; 0x1608 <main+0x8f6>
       if (resis[1].rx > resis[0].rx)
          ii = 1;
       if (ResistorsFound == 2) {
          ii = 2;
       } else {
          if (resis[2].rx > resis[ii].rx) {
    1600:	12 e0       	ldi	r17, 0x02	; 2
          z = '3';
       }
       if (ii == 2) {
          x = '2';
          y = '1';
          z = '3';
    1602:	03 e3       	ldi	r16, 0x33	; 51
          y = '2';
          z = '3';
       }
       if (ii == 2) {
          x = '2';
          y = '1';
    1604:	21 e3       	ldi	r18, 0x31	; 49
          // x = '1';
          y = '2';
          z = '3';
       }
       if (ii == 2) {
          x = '2';
    1606:	82 e3       	ldi	r24, 0x32	; 50
          y = '1';
          z = '3';
       }
       lcd_data(x);
    1608:	29 83       	std	Y+1, r18	; 0x01
    160a:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       lcd_fix_string(Resistor_str);    // -[=]-
    160e:	82 e5       	ldi	r24, 0x52	; 82
    1610:	91 e0       	ldi	r25, 0x01	; 1
    1612:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
       lcd_data(y);
    1616:	29 81       	ldd	r18, Y+1	; 0x01
    1618:	82 2f       	mov	r24, r18
    161a:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       lcd_fix_string(Resistor_str);    // -[=]-
    161e:	82 e5       	ldi	r24, 0x52	; 82
    1620:	91 e0       	ldi	r25, 0x01	; 1
    1622:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
       lcd_data(z);
    1626:	80 2f       	mov	r24, r16
    1628:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
    }
    lcd_line2(); //2. row 
    162c:	80 ec       	ldi	r24, 0xC0	; 192
    162e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
    if (ResistorsFound == 1) {
    1632:	80 91 6a 01 	lds	r24, 0x016A
    1636:	81 30       	cpi	r24, 0x01	; 1
    1638:	d1 f4       	brne	.+52     	; 0x166e <main+0x95c>
       RvalOut(0);
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <RvalOut>
#if FLASHEND > 0x1fff
       ReadInductance();		// measure inductance, possible only with single R<2.1k
    1640:	0e 94 42 12 	call	0x2484	; 0x2484 <ReadInductance>
       if (inductor_lpre != 0) {
    1644:	80 91 0d 01 	lds	r24, 0x010D
    1648:	88 23       	and	r24, r24
    164a:	a9 f1       	breq	.+106    	; 0x16b6 <main+0x9a4>
	  // resistor have also Inductance
          lcd_fix_string(Lis_str);	// "L="
    164c:	8c e3       	ldi	r24, 0x3C	; 60
    164e:	91 e0       	ldi	r25, 0x01	; 1
    1650:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
          DisplayValue(inductor_lx,inductor_lpre,'H',3);	// output inductance
    1654:	60 91 9a 01 	lds	r22, 0x019A
    1658:	70 91 9b 01 	lds	r23, 0x019B
    165c:	80 91 9c 01 	lds	r24, 0x019C
    1660:	90 91 9d 01 	lds	r25, 0x019D
    1664:	40 91 0d 01 	lds	r20, 0x010D
    1668:	28 e4       	ldi	r18, 0x48	; 72
    166a:	03 e0       	ldi	r16, 0x03	; 3
    166c:	b2 ce       	rjmp	.-668    	; 0x13d2 <main+0x6c0>
       }
#endif
    } else {
       // output resistor values in right order
       if (ii == 0) {
    166e:	11 23       	and	r17, r17
    1670:	11 f4       	brne	.+4      	; 0x1676 <main+0x964>
          RvalOut(1);
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	03 c0       	rjmp	.+6      	; 0x167c <main+0x96a>
          RvalOut(2);
       }
       if (ii == 1) {
    1676:	11 30       	cpi	r17, 0x01	; 1
    1678:	29 f4       	brne	.+10     	; 0x1684 <main+0x972>
          RvalOut(0);
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <RvalOut>
          RvalOut(2);
    1680:	82 e0       	ldi	r24, 0x02	; 2
    1682:	04 c0       	rjmp	.+8      	; 0x168c <main+0x97a>
       }
       if (ii == 2) {
          RvalOut(0);
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <RvalOut>
          RvalOut(1);
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <RvalOut>
    1690:	12 c0       	rjmp	.+36     	; 0x16b6 <main+0x9a4>
    }
    goto end;

  } // end (PartFound == PART_RESISTOR)

  lcd_fix_string(TestFailed1); 	//"Kein,unbek. oder"
    1692:	87 e9       	ldi	r24, 0x97	; 151
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  lcd_line2(); //2. row 
    169a:	80 ec       	ldi	r24, 0xC0	; 192
    169c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(TestFailed2); 	//"defektes "
    16a0:	81 e7       	ldi	r24, 0x71	; 113
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  lcd_fix_string(Bauteil);		//"Bauteil"
    16a8:	8a e7       	ldi	r24, 0x7A	; 122
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
not_known:
#if POWER_OFF+0 > 1
  empty_count++;
  mess_count = 0;
#endif
  max_time = SHORT_WAIT_TIME;		// use allways the short wait time
    16b0:	88 e8       	ldi	r24, 0x88	; 136
    16b2:	93 e1       	ldi	r25, 0x13	; 19
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <main+0x9a8>
 end:
#if POWER_OFF+0 > 1
  empty_count = 0;		// reset counter, if part is found
  mess_count++;			// count measurements
#endif
  max_time = display_time;	// full specified wait time
    16b6:	80 e6       	ldi	r24, 0x60	; 96
    16b8:	9d e6       	ldi	r25, 0x6D	; 109

 end2:
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND, release relay
    16ba:	28 e1       	ldi	r18, 0x18	; 24
    16bc:	27 b9       	out	0x07, r18	; 7
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
    16be:	4f 9b       	sbis	0x09, 7	; 9
    16c0:	fe cf       	rjmp	.-4      	; 0x16be <main+0x9ac>
  if ((wait_for_key_ms(max_time)) != 0 ) goto start;
    16c2:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <wait_for_key_ms>
    16c6:	88 23       	and	r24, r24
    16c8:	09 f0       	breq	.+2      	; 0x16cc <main+0x9ba>
    16ca:	87 cb       	rjmp	.-2290   	; 0xdda <main+0xc8>
  // look, if the tester is uncalibrated (C-source will be included directly)
  lcd_command(CMD_SetDisplayAndCursor | 0x04); // Display on / Cursor off / no Blinking
  #include "HelpCalibration.c"
 #endif
//  MCUSR = 0;
  ON_PORT &= ~(1<<ON_PIN);		//switch off power
    16cc:	5e 98       	cbi	0x0b, 6	; 11
  wait_for_key_ms(0); //never ending loop 
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <wait_for_key_ms>
#else
  goto start;	// POWER_OFF not selected, repeat measurement
#endif
  return 0;
    16d6:	18 c0       	rjmp	.+48     	; 0x1708 <main+0x9f6>

end3:
  // the diode  is already shown on the LCD
  if (ResistorsFound == 0) goto end;
    16d8:	80 91 6a 01 	lds	r24, 0x016A
    16dc:	88 23       	and	r24, r24
    16de:	59 f3       	breq	.-42     	; 0x16b6 <main+0x9a4>
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND, release relay
    16e0:	88 e1       	ldi	r24, 0x18	; 24
    16e2:	87 b9       	out	0x07, r24	; 7
  // there is one resistor or more detected
  wait_for_key_ms(display_time);
    16e4:	80 e6       	ldi	r24, 0x60	; 96
    16e6:	9d e6       	ldi	r25, 0x6D	; 109
    16e8:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <wait_for_key_ms>
  ADC_DDR =  TXD_MSK; 	// switch pin with reference to input, activate relay
    16ec:	88 e0       	ldi	r24, 0x08	; 8
    16ee:	87 b9       	out	0x07, r24	; 7
  lcd_clear();
    16f0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
#if FLASHEND > 0x1fff
  lcd_data('0'+NumOfDiodes);
    16f4:	80 91 07 01 	lds	r24, 0x0107
    16f8:	80 5d       	subi	r24, 0xD0	; 208
    16fa:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
  lcd_fix_string(Dioden);	//"Diodes "
    16fe:	8d e4       	ldi	r24, 0x4D	; 77
    1700:	91 e0       	ldi	r25, 0x01	; 1
    1702:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
#endif
  goto resistor_out;
    1706:	2b cf       	rjmp	.-426    	; 0x155e <main+0x84c>

}   // end main
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	0f 90       	pop	r0
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	1f 91       	pop	r17
    1714:	0f 91       	pop	r16
    1716:	ff 90       	pop	r15
    1718:	ef 90       	pop	r14
    171a:	df 90       	pop	r13
    171c:	cf 90       	pop	r12
    171e:	08 95       	ret

00001720 <mVAusgabe>:
    1720:	0f 93       	push	r16
    1722:	83 30       	cpi	r24, 0x03	; 3
    1724:	88 f4       	brcc	.+34     	; 0x1748 <ad1ca4>
    1726:	ee e8       	ldi	r30, 0x8E	; 142
    1728:	f1 e0       	ldi	r31, 0x01	; 1
    172a:	e8 0f       	add	r30, r24
    172c:	f1 1d       	adc	r31, r1
    172e:	e8 0f       	add	r30, r24
    1730:	f1 1d       	adc	r31, r1
    1732:	60 81       	ld	r22, Z
    1734:	71 81       	ldd	r23, Z+1	; 0x01
    1736:	81 2d       	mov	r24, r1
    1738:	91 2d       	mov	r25, r1
    173a:	4d ef       	ldi	r20, 0xFD	; 253
    173c:	26 e5       	ldi	r18, 0x56	; 86
    173e:	03 e0       	ldi	r16, 0x03	; 3
    1740:	0e 94 cd 0c 	call	0x199a	; 0x199a <DisplayValue>
    1744:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>

00001748 <ad1ca4>:
    1748:	0f 91       	pop	r16
    174a:	08 95       	ret

0000174c <UfAusgabe>:
    174c:	1f 93       	push	r17
    174e:	18 2f       	mov	r17, r24
    1750:	80 91 6a 01 	lds	r24, 0x016A
    1754:	88 23       	and	r24, r24
    1756:	29 f0       	breq	.+10     	; 0x1762 <ad1cbe>
    1758:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
    175c:	82 e5       	ldi	r24, 0x52	; 82
    175e:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>

00001762 <ad1cbe>:
    1762:	80 ec       	ldi	r24, 0xC0	; 192
    1764:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
    1768:	81 e1       	ldi	r24, 0x11	; 17
    176a:	91 e0       	ldi	r25, 0x01	; 1
    176c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    1770:	81 2f       	mov	r24, r17
    1772:	82 95       	swap	r24
    1774:	8f 70       	andi	r24, 0x0F	; 15
    1776:	d4 df       	rcall	.-88     	; 0x1720 <mVAusgabe>
    1778:	81 2f       	mov	r24, r17
    177a:	8f 70       	andi	r24, 0x0F	; 15
    177c:	d1 df       	rcall	.-94     	; 0x1720 <mVAusgabe>
    177e:	1f 91       	pop	r17
    1780:	08 95       	ret

00001782 <SerienDiodenAusgabe>:
    1782:	df 92       	push	r13
    1784:	ef 92       	push	r14
    1786:	ff 92       	push	r15
    1788:	0f 93       	push	r16
    178a:	1f 93       	push	r17
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
    1790:	d0 90 02 01 	lds	r13, 0x0102
    1794:	8d 2d       	mov	r24, r13
    1796:	82 95       	swap	r24
    1798:	8f 70       	andi	r24, 0x0F	; 15
    179a:	c2 e8       	ldi	r28, 0x82	; 130
    179c:	d1 e0       	ldi	r29, 0x01	; 1
    179e:	7e 01       	movw	r14, r28
    17a0:	e8 0e       	add	r14, r24
    17a2:	f1 1c       	adc	r15, r1
    17a4:	f7 01       	movw	r30, r14
    17a6:	80 81       	ld	r24, Z
    17a8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
    17ac:	05 e4       	ldi	r16, 0x45	; 69
    17ae:	11 e0       	ldi	r17, 0x01	; 1
    17b0:	c8 01       	movw	r24, r16
    17b2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    17b6:	f7 01       	movw	r30, r14
    17b8:	86 81       	ldd	r24, Z+6	; 0x06
    17ba:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
    17be:	c8 01       	movw	r24, r16
    17c0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    17c4:	8d 2d       	mov	r24, r13
    17c6:	83 70       	andi	r24, 0x03	; 3
    17c8:	c8 0f       	add	r28, r24
    17ca:	d1 1d       	adc	r29, r1
    17cc:	8e 81       	ldd	r24, Y+6	; 0x06
    17ce:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
    17d2:	80 91 02 01 	lds	r24, 0x0102
    17d6:	ba df       	rcall	.-140    	; 0x174c <UfAusgabe>
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	ff 90       	pop	r15
    17e2:	ef 90       	pop	r14
    17e4:	df 90       	pop	r13
    17e6:	08 95       	ret

000017e8 <RvalOut>:
    17e8:	0f 93       	push	r16
    17ea:	eb e1       	ldi	r30, 0x1B	; 27
    17ec:	f1 e0       	ldi	r31, 0x01	; 1
    17ee:	88 0f       	add	r24, r24
    17f0:	88 0f       	add	r24, r24
    17f2:	88 0f       	add	r24, r24
    17f4:	e8 0f       	add	r30, r24
    17f6:	f1 1d       	adc	r31, r1
    17f8:	60 81       	ld	r22, Z
    17fa:	71 81       	ldd	r23, Z+1	; 0x01
    17fc:	82 81       	ldd	r24, Z+2	; 0x02
    17fe:	93 81       	ldd	r25, Z+3	; 0x03
    1800:	64 36       	cpi	r22, 0x64	; 100
    1802:	71 05       	cpc	r23, r1
    1804:	81 05       	cpc	r24, r1
    1806:	91 05       	cpc	r25, r1
    1808:	70 f4       	brcc	.+28     	; 0x1826 <ad1d8e>
    180a:	20 91 0d 01 	lds	r18, 0x010D
    180e:	22 23       	and	r18, r18
    1810:	51 f4       	brne	.+20     	; 0x1826 <ad1d8e>
    1812:	84 81       	ldd	r24, Z+4	; 0x04
    1814:	65 81       	ldd	r22, Z+5	; 0x05
    1816:	0e 94 9c 1b 	call	0x3738	; 0x3738 <GetESR>
    181a:	bc 01       	movw	r22, r24
    181c:	80 e0       	ldi	r24, 0x00	; 0
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	4e ef       	ldi	r20, 0xFE	; 254
    1822:	03 e0       	ldi	r16, 0x03	; 3
    1824:	02 c0       	rjmp	.+4      	; 0x182a <ad1d94>

00001826 <ad1d8e>:
    1826:	4f ef       	ldi	r20, 0xFF	; 255
    1828:	04 e0       	ldi	r16, 0x04	; 4

0000182a <ad1d94>:
    182a:	24 ef       	ldi	r18, 0xF4	; 244
    182c:	0e 94 cd 0c 	call	0x199a	; 0x199a <DisplayValue>
    1830:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
    1834:	0f 91       	pop	r16
    1836:	08 95       	ret

00001838 <ChargePin10ms>:
#include "Transistortester.h"


//******************************************************************

void ChargePin10ms(uint8_t PinToCharge, uint8_t ChargeDirection) {
    1838:	1f 93       	push	r17
    183a:	18 2f       	mov	r17, r24
   //Will be used by discharge of MOSFET Gates or to load big capacities.
   //Parameters:
   //PinToCharge: specifies the pin as mask for R-Port
   //ChargeDirection: 0 = switch to GND (N-Kanal-FET), 1= switch to VCC(P-Kanal-FET)

   if(ChargeDirection&1) {
    183c:	60 ff       	sbrs	r22, 0
    183e:	03 c0       	rjmp	.+6      	; 0x1846 <ChargePin10ms+0xe>
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
    1840:	85 b1       	in	r24, 0x05	; 5
    1842:	81 2b       	or	r24, r17
    1844:	03 c0       	rjmp	.+6      	; 0x184c <ChargePin10ms+0x14>
   } else {
      R_PORT &= ~PinToCharge; // or 0 (GND)
    1846:	95 b1       	in	r25, 0x05	; 5
    1848:	80 95       	com	r24
    184a:	89 23       	and	r24, r25
    184c:	85 b9       	out	0x05, r24	; 5
   }
   R_DDR |= PinToCharge;		//switch Pin to output, across R to GND or VCC
    184e:	84 b1       	in	r24, 0x04	; 4
    1850:	81 2b       	or	r24, r17
    1852:	84 b9       	out	0x04, r24	; 4
   wait_about10ms();			// wait about 10ms
    1854:	82 e0       	ldi	r24, 0x02	; 2
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	0e 94 ba 01 	call	0x374	; 0x374 <sleep_5ms>
   // switch back Input, no current
   R_DDR &= ~PinToCharge;	// switch back to input
    185c:	84 b1       	in	r24, 0x04	; 4
    185e:	10 95       	com	r17
    1860:	81 23       	and	r24, r17
    1862:	84 b9       	out	0x04, r24	; 4
   R_PORT &= ~PinToCharge;	// no Pull up
    1864:	85 b1       	in	r24, 0x05	; 5
    1866:	81 23       	and	r24, r17
    1868:	85 b9       	out	0x05, r24	; 5
}
    186a:	1f 91       	pop	r17
    186c:	08 95       	ret

0000186e <EntladePins>:
#include <avr/pgmspace.h>
#include "Transistortester.h"


// first discharge any charge of capacitors
void EntladePins() {
    186e:	bf 92       	push	r11
    1870:	cf 92       	push	r12
    1872:	df 92       	push	r13
    1874:	ef 92       	push	r14
    1876:	ff 92       	push	r15
    1878:	0f 93       	push	r16
    187a:	1f 93       	push	r17
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	2a e0       	ldi	r18, 0x0A	; 10
    1882:	c2 2e       	mov	r12, r18
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
    1884:	98 e0       	ldi	r25, 0x08	; 8
    1886:	d9 2e       	mov	r13, r25
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     R_PORT = 0;			// R-outputs auf 0
//     R_DDR = (1<<PIN_RH3) | (1<<PIN_RH2) | (1<<PIN_RH1); // R_H for all Pins to GND
     R_DDR = (1<<PIN_RH3) | (1<<PIN_RL3) | (1<<PIN_RH2) | (1<<PIN_RL2) | (1<<PIN_RH1) | (1<<PIN_RL1); // R_H and R_L for all Pins to GND
    1888:	8f e3       	ldi	r24, 0x3F	; 63
    188a:	b8 2e       	mov	r11, r24
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
    188c:	d7 b8       	out	0x07, r13	; 7
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
    188e:	d8 b8       	out	0x08, r13	; 8
     R_PORT = 0;			// R-outputs auf 0
    1890:	15 b8       	out	0x05, r1	; 5
//     R_DDR = (1<<PIN_RH3) | (1<<PIN_RH2) | (1<<PIN_RH1); // R_H for all Pins to GND
     R_DDR = (1<<PIN_RH3) | (1<<PIN_RL3) | (1<<PIN_RH2) | (1<<PIN_RL2) | (1<<PIN_RH1) | (1<<PIN_RL1); // R_H and R_L for all Pins to GND
    1892:	b4 b8       	out	0x04, r11	; 4
     adcmv[0] = W5msReadADC(PC0);	// which voltage has Pin 1?
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    189a:	8c 01       	movw	r16, r24
     adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
    18a2:	ec 01       	movw	r28, r24
     adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
    18a4:	82 e0       	ldi	r24, 0x02	; 2
    18a6:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
     if ((PartFound == PART_CELL) || (adcmv[0] < CAP_EMPTY_LEVEL) & (adcmv[1] < CAP_EMPTY_LEVEL) & (adcmv[2] < CAP_EMPTY_LEVEL)) {
    18aa:	20 91 09 01 	lds	r18, 0x0109
    18ae:	28 30       	cpi	r18, 0x08	; 8
    18b0:	c1 f0       	breq	.+48     	; 0x18e2 <EntladePins+0x74>
    18b2:	41 e0       	ldi	r20, 0x01	; 1
    18b4:	c4 30       	cpi	r28, 0x04	; 4
    18b6:	d1 05       	cpc	r29, r1
    18b8:	08 f0       	brcs	.+2      	; 0x18bc <EntladePins+0x4e>
    18ba:	40 e0       	ldi	r20, 0x00	; 0
    18bc:	21 e0       	ldi	r18, 0x01	; 1
    18be:	04 30       	cpi	r16, 0x04	; 4
    18c0:	11 05       	cpc	r17, r1
    18c2:	08 f0       	brcs	.+2      	; 0x18c6 <EntladePins+0x58>
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	42 23       	and	r20, r18
    18c8:	50 e0       	ldi	r21, 0x00	; 0
    18ca:	21 e0       	ldi	r18, 0x01	; 1
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	84 30       	cpi	r24, 0x04	; 4
    18d0:	91 05       	cpc	r25, r1
    18d2:	10 f0       	brcs	.+4      	; 0x18d8 <EntladePins+0x6a>
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	24 23       	and	r18, r20
    18da:	35 23       	and	r19, r21
    18dc:	21 15       	cp	r18, r1
    18de:	31 05       	cpc	r19, r1
    18e0:	21 f0       	breq	.+8      	; 0x18ea <EntladePins+0x7c>
        ADC_DDR = TXD_MSK;		// switch all ADC-Pins to input
    18e2:	88 e0       	ldi	r24, 0x08	; 8
    18e4:	87 b9       	out	0x07, r24	; 7
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
    18e6:	14 b8       	out	0x04, r1	; 4
#if FLASHEND > 0x3fff
        cell_mv[0] = adcmv[0];		// save the voltage of pin 1
        cell_mv[1] = adcmv[1];		// save the voltage of pin 2
        cell_mv[2] = adcmv[2];		// save the voltage of pin 3
#endif
        return;			// all is discharged
    18e8:	4e c0       	rjmp	.+156    	; 0x1986 <EntladePins+0x118>
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
    18ea:	23 e0       	ldi	r18, 0x03	; 3
    18ec:	08 3e       	cpi	r16, 0xE8	; 232
    18ee:	12 07       	cpc	r17, r18
    18f0:	10 f0       	brcs	.+4      	; 0x18f6 <EntladePins+0x88>
  uint8_t lop_cnt;		// loop counter
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
    18f2:	28 e0       	ldi	r18, 0x08	; 8
    18f4:	01 c0       	rjmp	.+2      	; 0x18f8 <EntladePins+0x8a>
#endif
        return;			// all is discharged
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
        adc_gnd |= (1<<PC0);	//Pin 1 directly to GND
    18f6:	29 e0       	ldi	r18, 0x09	; 9
     }
     if (adcmv[1] < 1000) {
    18f8:	33 e0       	ldi	r19, 0x03	; 3
    18fa:	c8 3e       	cpi	r28, 0xE8	; 232
    18fc:	d3 07       	cpc	r29, r19
    18fe:	08 f4       	brcc	.+2      	; 0x1902 <EntladePins+0x94>
        adc_gnd |= (1<<PC1);	//Pin 2 directly to GND
    1900:	22 60       	ori	r18, 0x02	; 2
     }
     if (adcmv[2] < 1000) {
    1902:	33 e0       	ldi	r19, 0x03	; 3
    1904:	88 3e       	cpi	r24, 0xE8	; 232
    1906:	93 07       	cpc	r25, r19
    1908:	08 f4       	brcc	.+2      	; 0x190c <EntladePins+0x9e>
        adc_gnd |= (1<<PC2);	//Pin 3 directly to  GND
    190a:	24 60       	ori	r18, 0x04	; 4
     }
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time
    190c:	27 b9       	out	0x07, r18	; 7

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
//     R_DDR = (1<<PIN_RL3) | (1<<PIN_RL2) | (1<<PIN_RL1);	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    190e:	c0 e0       	ldi	r28, 0x00	; 0
    1910:	d0 e0       	ldi	r29, 0x00	; 0
        wdt_reset();
    1912:	a8 95       	wdr
        adcmv[0] = W20msReadADC(PC0);	// which voltage has Pin 1?
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	0e 94 cd 14 	call	0x299a	; 0x299a <W20msReadADC>
    191a:	7c 01       	movw	r14, r24
        adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
    1922:	8c 01       	movw	r16, r24
        adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
    1924:	82 e0       	ldi	r24, 0x02	; 2
    1926:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
        if (adcmv[0] < 1300) {
    192a:	24 e1       	ldi	r18, 0x14	; 20
    192c:	e2 16       	cp	r14, r18
    192e:	25 e0       	ldi	r18, 0x05	; 5
    1930:	f2 06       	cpc	r15, r18
    1932:	08 f4       	brcc	.+2      	; 0x1936 <EntladePins+0xc8>
           ADC_DDR |= (1<<PC0);	// below 1.3V , switch directly with ADC-Port to GND
    1934:	38 9a       	sbi	0x07, 0	; 7
        }
        if (adcmv[1] < 1300) {
    1936:	35 e0       	ldi	r19, 0x05	; 5
    1938:	04 31       	cpi	r16, 0x14	; 20
    193a:	13 07       	cpc	r17, r19
    193c:	08 f4       	brcc	.+2      	; 0x1940 <EntladePins+0xd2>
           ADC_DDR |= (1<<PC1);	// below 1.3V, switch directly with ADC-Port to GND
    193e:	39 9a       	sbi	0x07, 1	; 7
        }
        if (adcmv[2] < 1300) {
    1940:	25 e0       	ldi	r18, 0x05	; 5
    1942:	84 31       	cpi	r24, 0x14	; 20
    1944:	92 07       	cpc	r25, r18
    1946:	08 f4       	brcc	.+2      	; 0x194a <EntladePins+0xdc>
           ADC_DDR |= (1<<PC2);	// below 1.3V, switch directly with ADC-Port to GND
    1948:	3a 9a       	sbi	0x07, 2	; 7
        }
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
    194a:	36 e0       	ldi	r19, 0x06	; 6
    194c:	e3 16       	cp	r14, r19
    194e:	f1 04       	cpc	r15, r1
    1950:	30 f4       	brcc	.+12     	; 0x195e <EntladePins+0xf0>
    1952:	06 30       	cpi	r16, 0x06	; 6
    1954:	11 05       	cpc	r17, r1
    1956:	18 f4       	brcc	.+6      	; 0x195e <EntladePins+0xf0>
    1958:	86 30       	cpi	r24, 0x06	; 6
    195a:	91 05       	cpc	r25, r1
    195c:	38 f0       	brcs	.+14     	; 0x196c <EntladePins+0xfe>

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
//     R_DDR = (1<<PIN_RL3) | (1<<PIN_RL2) | (1<<PIN_RL1);	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    195e:	21 96       	adiw	r28, 0x01	; 1
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	c4 3f       	cpi	r28, 0xF4	; 244
    1964:	d8 07       	cpc	r29, r24
    1966:	a9 f6       	brne	.-86     	; 0x1912 <EntladePins+0xa4>
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
           break;
        }
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
    1968:	d0 92 09 01 	sts	0x0109, r13

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
//     R_DDR = (1<<PIN_RL3) | (1<<PIN_RL2) | (1<<PIN_RL1);	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    196c:	00 e0       	ldi	r16, 0x00	; 0
    196e:	10 e0       	ldi	r17, 0x00	; 0
    1970:	04 c0       	rjmp	.+8      	; 0x197a <EntladePins+0x10c>
        lcd_space();
        u2lcd(adcmv[2];		// lcd_string(utoa(adcmv[2], outval, 10));
#endif
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
    1972:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <wait1ms>
    1976:	0f 5f       	subi	r16, 0xFF	; 255
    1978:	1f 4f       	sbci	r17, 0xFF	; 255
        lcd_space();
        u2lcd(adcmv[1];		// lcd_string(utoa(adcmv[1], outval, 10));
        lcd_space();
        u2lcd(adcmv[2];		// lcd_string(utoa(adcmv[2], outval, 10));
#endif
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
    197a:	0c 17       	cp	r16, r28
    197c:	1d 07       	cpc	r17, r29
    197e:	c8 f3       	brcs	.-14     	; 0x1972 <EntladePins+0x104>
    1980:	ca 94       	dec	r12
  unsigned int clr_cnt;		// Clear Counter
  uint8_t lop_cnt;		// loop counter
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
    1982:	09 f0       	breq	.+2      	; 0x1986 <EntladePins+0x118>
    1984:	83 cf       	rjmp	.-250    	; 0x188c <EntladePins+0x1e>
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     }
  } // end for lop_cnt
 }
    1986:	df 91       	pop	r29
    1988:	cf 91       	pop	r28
    198a:	1f 91       	pop	r17
    198c:	0f 91       	pop	r16
    198e:	ff 90       	pop	r15
    1990:	ef 90       	pop	r14
    1992:	df 90       	pop	r13
    1994:	cf 90       	pop	r12
    1996:	bf 90       	pop	r11
    1998:	08 95       	ret

0000199a <DisplayValue>:
 *    e.g: p = 10^-12 -> -12
 *  - unit character (0 = none)
 *  digits = 2, 3 or 4
 */
void DisplayValue(unsigned long Value, int8_t Exponent, unsigned char Unit, unsigned char digits)
{
    199a:	2f 92       	push	r2
    199c:	3f 92       	push	r3
    199e:	4f 92       	push	r4
    19a0:	5f 92       	push	r5
    19a2:	7f 92       	push	r7
    19a4:	8f 92       	push	r8
    19a6:	9f 92       	push	r9
    19a8:	af 92       	push	r10
    19aa:	bf 92       	push	r11
    19ac:	cf 92       	push	r12
    19ae:	df 92       	push	r13
    19b0:	ef 92       	push	r14
    19b2:	ff 92       	push	r15
    19b4:	0f 93       	push	r16
    19b6:	1f 93       	push	r17
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	2f 97       	sbiw	r28, 0x0f	; 15
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	de bf       	out	0x3e, r29	; 62
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	cd bf       	out	0x3d, r28	; 61
    19cc:	6b 01       	movw	r12, r22
    19ce:	7c 01       	movw	r14, r24
    19d0:	14 2f       	mov	r17, r20
    19d2:	72 2e       	mov	r7, r18
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
    19d4:	03 30       	cpi	r16, 0x03	; 3
    19d6:	29 f0       	breq	.+10     	; 0x19e2 <DisplayValue+0x48>
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
    19d8:	04 30       	cpi	r16, 0x04	; 4
    19da:	31 f0       	breq	.+12     	; 0x19e8 <DisplayValue+0x4e>
  uint8_t           Offset;		/* exponent of offset to next 10^3 step */
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
    19dc:	84 e6       	ldi	r24, 0x64	; 100
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	14 c0       	rjmp	.+40     	; 0x1a0a <DisplayValue+0x70>
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
    19e2:	88 ee       	ldi	r24, 0xE8	; 232
    19e4:	93 e0       	ldi	r25, 0x03	; 3
    19e6:	11 c0       	rjmp	.+34     	; 0x1a0a <DisplayValue+0x70>
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
    19e8:	80 e1       	ldi	r24, 0x10	; 16
    19ea:	97 e2       	ldi	r25, 0x27	; 39
    19ec:	0e c0       	rjmp	.+28     	; 0x1a0a <DisplayValue+0x70>
  while (Value >= Limit)
  {
    Value += 5;				/* for automatic rounding */
    19ee:	c7 01       	movw	r24, r14
    19f0:	b6 01       	movw	r22, r12
    19f2:	6b 5f       	subi	r22, 0xFB	; 251
    19f4:	7f 4f       	sbci	r23, 0xFF	; 255
    19f6:	8f 4f       	sbci	r24, 0xFF	; 255
    19f8:	9f 4f       	sbci	r25, 0xFF	; 255
    Value = Value / 10;			/* scale down by 10^1 */
    19fa:	a5 01       	movw	r20, r10
    19fc:	94 01       	movw	r18, r8
    19fe:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
    1a02:	69 01       	movw	r12, r18
    1a04:	7a 01       	movw	r14, r20
    Exponent++;				/* increase exponent by 1 */
    1a06:	1f 5f       	subi	r17, 0xFF	; 255
    1a08:	08 c0       	rjmp	.+16     	; 0x1a1a <DisplayValue+0x80>


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
  while (Value >= Limit)
    1a0a:	1c 01       	movw	r2, r24
    1a0c:	44 24       	eor	r4, r4
    1a0e:	55 24       	eor	r5, r5
  {
    Value += 5;				/* for automatic rounding */
    Value = Value / 10;			/* scale down by 10^1 */
    1a10:	8a e0       	ldi	r24, 0x0A	; 10
    1a12:	88 2e       	mov	r8, r24
    1a14:	91 2c       	mov	r9, r1
    1a16:	a1 2c       	mov	r10, r1
    1a18:	b1 2c       	mov	r11, r1


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
  while (Value >= Limit)
    1a1a:	c2 14       	cp	r12, r2
    1a1c:	d3 04       	cpc	r13, r3
    1a1e:	e4 04       	cpc	r14, r4
    1a20:	f5 04       	cpc	r15, r5
    1a22:	28 f7       	brcc	.-54     	; 0x19ee <DisplayValue+0x54>


  /*
   *  determine prefix
   */
  Length = Exponent + 12;
    1a24:	81 2f       	mov	r24, r17
    1a26:	84 5f       	subi	r24, 0xF4	; 244
  if ((int8_t)Length <  0) Length = 0;		/* Limit to minimum prefix */
    1a28:	87 fd       	sbrc	r24, 7
    1a2a:	03 c0       	rjmp	.+6      	; 0x1a32 <DisplayValue+0x98>
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
    1a2c:	83 31       	cpi	r24, 0x13	; 19
    1a2e:	18 f4       	brcc	.+6      	; 0x1a36 <DisplayValue+0x9c>
    1a30:	03 c0       	rjmp	.+6      	; 0x1a38 <DisplayValue+0x9e>

  /*
   *  determine prefix
   */
  Length = Exponent + 12;
  if ((int8_t)Length <  0) Length = 0;		/* Limit to minimum prefix */
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	01 c0       	rjmp	.+2      	; 0x1a38 <DisplayValue+0x9e>
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
    1a36:	82 e1       	ldi	r24, 0x12	; 18
  Index = Length / 3;
    1a38:	23 e0       	ldi	r18, 0x03	; 3
  Offset = Length % 3;
    1a3a:	62 2f       	mov	r22, r18
    1a3c:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <__udivmodqi4>
    1a40:	19 2f       	mov	r17, r25
  if (Offset > 0)
    1a42:	99 23       	and	r25, r25
    1a44:	19 f0       	breq	.+6      	; 0x1a4c <DisplayValue+0xb2>
    {
      Index++;				/* adjust index for exponent offset, take next prefix */
    1a46:	8f 5f       	subi	r24, 0xFF	; 255
      Offset = 3 - Offset;		/* reverse value (1 or 2) */
    1a48:	29 1b       	sub	r18, r25
    1a4a:	12 2f       	mov	r17, r18
    { /* use no nano */
      Index++;				/* use mikro instead of nano */
      Offset += 3;			/* can be 3,4 or 5 */
    }
#endif
  Prefix = MEM_read_byte((uint8_t *)(&PrefixTab[Index]));   /* look up prefix in table */
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	8f 53       	subi	r24, 0x3F	; 63
    1a50:	9e 4f       	sbci	r25, 0xFE	; 254
    1a52:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__eerd_byte_m168>
    1a56:	b8 2e       	mov	r11, r24
  /*
   *  display value
   */

  /* convert value into string */
  utoa((unsigned int)Value, OutBuffer, 10);
    1a58:	c6 01       	movw	r24, r12
    1a5a:	6e 01       	movw	r12, r28
    1a5c:	08 94       	sec
    1a5e:	c1 1c       	adc	r12, r1
    1a60:	d1 1c       	adc	r13, r1
    1a62:	b6 01       	movw	r22, r12
    1a64:	4a e0       	ldi	r20, 0x0A	; 10
    1a66:	50 e0       	ldi	r21, 0x00	; 0
    1a68:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <utoa>
  Length = strlen(OutBuffer);
    1a6c:	f6 01       	movw	r30, r12
    1a6e:	01 90       	ld	r0, Z+
    1a70:	00 20       	and	r0, r0
    1a72:	e9 f7       	brne	.-6      	; 0x1a6e <DisplayValue+0xd4>
    1a74:	31 97       	sbiw	r30, 0x01	; 1
    1a76:	2e 2e       	mov	r2, r30
    1a78:	2c 18       	sub	r2, r12

  /* position of dot */
  Exponent = Length - Offset;		/* calculate position */
    1a7a:	82 2c       	mov	r8, r2
    1a7c:	81 1a       	sub	r8, r17

  if (Exponent <= 0)			/* we have to prepend "0." */
    1a7e:	18 14       	cp	r1, r8
    1a80:	44 f0       	brlt	.+16     	; 0x1a92 <DisplayValue+0xf8>
  {
    /* 0: factor 10 / -1: factor 100 */
//    lcd_data('0');
    lcd_data('.');
    1a82:	8e e2       	ldi	r24, 0x2E	; 46
    1a84:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
      {
       lcd_data('0');	/* extra 0 for factor 10 */
       Exponent++;
      }
#else
    if (Exponent < 0) lcd_data('0');	/* extra 0 for factor 100 */
    1a88:	88 20       	and	r8, r8
    1a8a:	19 f0       	breq	.+6      	; 0x1a92 <DisplayValue+0xf8>
    1a8c:	80 e3       	ldi	r24, 0x30	; 48
    1a8e:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
#endif
  }

  if (Offset == 0) Exponent = -1;	/* disable dot if not needed */
    1a92:	11 23       	and	r17, r17
    1a94:	11 f4       	brne	.+4      	; 0x1a9a <DisplayValue+0x100>
    1a96:	88 24       	eor	r8, r8
    1a98:	8a 94       	dec	r8
    1a9a:	6e 01       	movw	r12, r28
    1a9c:	08 94       	sec
    1a9e:	c1 1c       	adc	r12, r1
    1aa0:	d1 1c       	adc	r13, r1
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    1aa2:	00 e0       	ldi	r16, 0x00	; 0
    1aa4:	10 e0       	ldi	r17, 0x00	; 0
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    Index++;				/* next one */
    if (Index == Exponent) {
    1aa6:	99 24       	eor	r9, r9
    1aa8:	87 fc       	sbrc	r8, 7
    1aaa:	90 94       	com	r9
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    1aac:	0d c0       	rjmp	.+26     	; 0x1ac8 <DisplayValue+0x12e>
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    1aae:	0f 5f       	subi	r16, 0xFF	; 255
    1ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab2:	f6 01       	movw	r30, r12
    1ab4:	81 91       	ld	r24, Z+
    1ab6:	6f 01       	movw	r12, r30
    1ab8:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
    Index++;				/* next one */
    if (Index == Exponent) {
    1abc:	08 15       	cp	r16, r8
    1abe:	19 05       	cpc	r17, r9
    1ac0:	19 f4       	brne	.+6      	; 0x1ac8 <DisplayValue+0x12e>
      lcd_data('.');			/* display dot */
    1ac2:	8e e2       	ldi	r24, 0x2E	; 46
    1ac4:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    1ac8:	02 15       	cp	r16, r2
    1aca:	88 f3       	brcs	.-30     	; 0x1aae <DisplayValue+0x114>
      lcd_data('.');			/* display dot */
    }
  }

  /* display prefix and unit */
  if (Prefix != 0) lcd_data(Prefix);
    1acc:	bb 20       	and	r11, r11
    1ace:	19 f0       	breq	.+6      	; 0x1ad6 <DisplayValue+0x13c>
    1ad0:	8b 2d       	mov	r24, r11
    1ad2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
  if (Unit) lcd_data(Unit);
    1ad6:	77 20       	and	r7, r7
    1ad8:	19 f0       	breq	.+6      	; 0x1ae0 <DisplayValue+0x146>
    1ada:	87 2d       	mov	r24, r7
    1adc:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
}
    1ae0:	2f 96       	adiw	r28, 0x0f	; 15
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	de bf       	out	0x3e, r29	; 62
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	cd bf       	out	0x3d, r28	; 61
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	1f 91       	pop	r17
    1af2:	0f 91       	pop	r16
    1af4:	ff 90       	pop	r15
    1af6:	ef 90       	pop	r14
    1af8:	df 90       	pop	r13
    1afa:	cf 90       	pop	r12
    1afc:	bf 90       	pop	r11
    1afe:	af 90       	pop	r10
    1b00:	9f 90       	pop	r9
    1b02:	8f 90       	pop	r8
    1b04:	7f 90       	pop	r7
    1b06:	5f 90       	pop	r5
    1b08:	4f 90       	pop	r4
    1b0a:	3f 90       	pop	r3
    1b0c:	2f 90       	pop	r2
    1b0e:	08 95       	ret

00001b10 <PinLayout>:
#include "Transistortester.h"


// show the Pin Layout of the device 
void PinLayout(char pin1, char pin2, char pin3) {
    1b10:	ef 92       	push	r14
    1b12:	ff 92       	push	r15
    1b14:	0f 93       	push	r16
    1b16:	1f 93       	push	r17
    1b18:	18 2f       	mov	r17, r24
    1b1a:	06 2f       	mov	r16, r22
    1b1c:	f4 2e       	mov	r15, r20
// pin1-3 is EBC or SGD or CGA
#ifndef EBC_STYLE
   // Layout with 123= style
   uint8_t ipp;
   lcd_fix_string(N123_str);		//" 123="
    1b1e:	8b e0       	ldi	r24, 0x0B	; 11
    1b20:	91 e0       	ldi	r25, 0x01	; 1
    1b22:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
   for (ipp=0;ipp<3;ipp++) {
    1b26:	ee 24       	eor	r14, r14
       if (ipp == _trans->e)  lcd_data(pin1);	// Output Character in right order
    1b28:	e0 91 42 01 	lds	r30, 0x0142
    1b2c:	f0 91 43 01 	lds	r31, 0x0143
    1b30:	84 85       	ldd	r24, Z+12	; 0x0c
    1b32:	e8 16       	cp	r14, r24
    1b34:	19 f4       	brne	.+6      	; 0x1b3c <PinLayout+0x2c>
    1b36:	81 2f       	mov	r24, r17
    1b38:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       if (ipp == _trans->b)  lcd_data(pin2);
    1b3c:	e0 91 42 01 	lds	r30, 0x0142
    1b40:	f0 91 43 01 	lds	r31, 0x0143
    1b44:	82 85       	ldd	r24, Z+10	; 0x0a
    1b46:	e8 16       	cp	r14, r24
    1b48:	19 f4       	brne	.+6      	; 0x1b50 <PinLayout+0x40>
    1b4a:	80 2f       	mov	r24, r16
    1b4c:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       if (ipp == _trans->c)  lcd_data(pin3);
    1b50:	e0 91 42 01 	lds	r30, 0x0142
    1b54:	f0 91 43 01 	lds	r31, 0x0143
    1b58:	83 85       	ldd	r24, Z+11	; 0x0b
    1b5a:	e8 16       	cp	r14, r24
    1b5c:	19 f4       	brne	.+6      	; 0x1b64 <PinLayout+0x54>
    1b5e:	8f 2d       	mov	r24, r15
    1b60:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
// pin1-3 is EBC or SGD or CGA
#ifndef EBC_STYLE
   // Layout with 123= style
   uint8_t ipp;
   lcd_fix_string(N123_str);		//" 123="
   for (ipp=0;ipp<3;ipp++) {
    1b64:	e3 94       	inc	r14
    1b66:	8e 2d       	mov	r24, r14
    1b68:	83 30       	cpi	r24, 0x03	; 3
    1b6a:	f1 f6       	brne	.-68     	; 0x1b28 <PinLayout+0x18>
   lcd_testpin(_trans->e);
   lcd_testpin(_trans->b);
   lcd_testpin(_trans->c);
 #endif
#endif
}
    1b6c:	1f 91       	pop	r17
    1b6e:	0f 91       	pop	r16
    1b70:	ff 90       	pop	r15
    1b72:	ef 90       	pop	r14
    1b74:	08 95       	ret

00001b76 <RefVoltage>:
    1b76:	89 ec       	ldi	r24, 0xC9	; 201
    1b78:	91 e0       	ldi	r25, 0x01	; 1
    1b7a:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__eerd_byte_m168>
    1b7e:	38 2f       	mov	r19, r24
    1b80:	8a ec       	ldi	r24, 0xCA	; 202
    1b82:	91 e0       	ldi	r25, 0x01	; 1
    1b84:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__eerd_byte_m168>
    1b88:	20 91 3b 01 	lds	r18, 0x013B
    1b8c:	23 0f       	add	r18, r19
    1b8e:	30 91 3c 01 	lds	r19, 0x013C
    1b92:	38 1f       	adc	r19, r24
    1b94:	20 93 05 01 	sts	0x0105, r18
    1b98:	30 93 06 01 	sts	0x0106, r19
    1b9c:	83 e0       	ldi	r24, 0x03	; 3
    1b9e:	28 3e       	cpi	r18, 0xE8	; 232
    1ba0:	38 07       	cpc	r19, r24
    1ba2:	20 f0       	brcs	.+8      	; 0x1bac <ad210e>
    1ba4:	c9 01       	movw	r24, r18
    1ba6:	88 5e       	subi	r24, 0xE8	; 232
    1ba8:	93 40       	sbci	r25, 0x03	; 3
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <ad2112>

00001bac <ad210e>:
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	90 e0       	ldi	r25, 0x00	; 0

00001bb0 <ad2112>:
    1bb0:	62 e3       	ldi	r22, 0x32	; 50
    1bb2:	70 e0       	ldi	r23, 0x00	; 0
    1bb4:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__udivmodhi4>
    1bb8:	68 30       	cpi	r22, 0x08	; 8
    1bba:	08 f0       	brcs	.+2      	; 0x1bbe <ad2120>
    1bbc:	67 e0       	ldi	r22, 0x07	; 7

00001bbe <ad2120>:
    1bbe:	e6 ec       	ldi	r30, 0xC6	; 198
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	e6 0f       	add	r30, r22
    1bc4:	f1 1d       	adc	r31, r1
    1bc6:	e6 0f       	add	r30, r22
    1bc8:	f1 1d       	adc	r31, r1
    1bca:	45 91       	lpm	r20, Z+
    1bcc:	55 91       	lpm	r21, Z+
    1bce:	25 91       	lpm	r18, Z+
    1bd0:	35 91       	lpm	r19, Z+
    1bd2:	62 e3       	ldi	r22, 0x32	; 50
    1bd4:	68 1b       	sub	r22, r24
    1bd6:	42 1b       	sub	r20, r18
    1bd8:	53 0b       	sbc	r21, r19
    1bda:	64 9f       	mul	r22, r20
    1bdc:	c0 01       	movw	r24, r0
    1bde:	65 9f       	mul	r22, r21
    1be0:	90 0d       	add	r25, r0
    1be2:	11 24       	eor	r1, r1
    1be4:	49 96       	adiw	r24, 0x19	; 25
    1be6:	62 e3       	ldi	r22, 0x32	; 50
    1be8:	70 e0       	ldi	r23, 0x00	; 0
    1bea:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__udivmodhi4>
    1bee:	62 0f       	add	r22, r18
    1bf0:	73 1f       	adc	r23, r19
    1bf2:	70 93 01 01 	sts	0x0101, r23
    1bf6:	60 93 00 01 	sts	0x0100, r22
    1bfa:	08 95       	ret

00001bfc <wait_for_key_ms>:
#include "Transistortester.h"


/* wait max_time or previous key press */
/* return value: 1 == key is pressed, 0 == time expired */
uint8_t wait_for_key_ms(int max_time) {
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
    1c00:	ec 01       	movw	r28, r24
  // if key is pressed, return 1
  // if max_time == 0 , do not count, wait endless
  wait_about200ms();
    1c02:	88 e2       	ldi	r24, 0x28	; 40
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	0e 94 ba 01 	call	0x374	; 0x374 <sleep_5ms>
// wait 28 seconds or 5 seconds (if repeat function)
  while (max_time >= 0) {
    1c0a:	0d c0       	rjmp	.+26     	; 0x1c26 <wait_for_key_ms+0x2a>
     wait_about10ms();
    1c0c:	82 e0       	ldi	r24, 0x02	; 2
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	0e 94 ba 01 	call	0x374	; 0x374 <sleep_5ms>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    1c14:	4f 9b       	sbis	0x09, 7	; 9
    1c16:	0b c0       	rjmp	.+22     	; 0x1c2e <wait_for_key_ms+0x32>
        // If the key is pressed again... 
        // goto start of measurement 
        return(1);    // key is pressed
     }
     wdt_reset();
    1c18:	a8 95       	wdr
     if (max_time > 0) {		// count only, if counter > 0
    1c1a:	20 97       	sbiw	r28, 0x00	; 0
    1c1c:	21 f0       	breq	.+8      	; 0x1c26 <wait_for_key_ms+0x2a>
        max_time -= 10;			// 10 ms are done, count down
    1c1e:	2a 97       	sbiw	r28, 0x0a	; 10
        if (max_time == 0) max_time = -1;	// never count to zero, zero is endless!
    1c20:	11 f4       	brne	.+4      	; 0x1c26 <wait_for_key_ms+0x2a>
    1c22:	cf ef       	ldi	r28, 0xFF	; 255
    1c24:	df ef       	ldi	r29, 0xFF	; 255
uint8_t wait_for_key_ms(int max_time) {
  // if key is pressed, return 1
  // if max_time == 0 , do not count, wait endless
  wait_about200ms();
// wait 28 seconds or 5 seconds (if repeat function)
  while (max_time >= 0) {
    1c26:	d7 ff       	sbrs	r29, 7
    1c28:	f1 cf       	rjmp	.-30     	; 0x1c0c <wait_for_key_ms+0x10>
     if (max_time > 0) {		// count only, if counter > 0
        max_time -= 10;			// 10 ms are done, count down
        if (max_time == 0) max_time = -1;	// never count to zero, zero is endless!
     }
  }
 return(0);		// no key pressed within the specified time
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	01 c0       	rjmp	.+2      	; 0x1c30 <wait_for_key_ms+0x34>
  while (max_time >= 0) {
     wait_about10ms();
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
        // If the key is pressed again... 
        // goto start of measurement 
        return(1);    // key is pressed
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
        max_time -= 10;			// 10 ms are done, count down
        if (max_time == 0) max_time = -1;	// never count to zero, zero is endless!
     }
  }
 return(0);		// no key pressed within the specified time
}
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	08 95       	ret

00001c36 <wait_for_key_5s_line2>:

#ifdef WAIT_LINE2_CLEAR
/* wait 5 seconds or previous key press, then clear line 2 of LCD and */
/* set the cursor to the beginning of line 2 */
void wait_for_key_5s_line2(void) {
  wait_for_key_ms(SHORT_WAIT_TIME);
    1c36:	88 e8       	ldi	r24, 0x88	; 136
    1c38:	93 e1       	ldi	r25, 0x13	; 19
    1c3a:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <wait_for_key_ms>
  lcd_line2(); //2. row 
    1c3e:	80 ec       	ldi	r24, 0xC0	; 192
    1c40:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_clear_line();		// clear the whole line
    1c44:	0e 94 b2 01 	call	0x364	; 0x364 <lcd_clear_line>
  lcd_line2(); //2. row 
    1c48:	80 ec       	ldi	r24, 0xC0	; 192
    1c4a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
}
    1c4e:	08 95       	ret

00001c50 <uart_putc>:
    1c50:	2f 93       	push	r18
    1c52:	5f b7       	in	r21, 0x3f	; 63
    1c54:	2f 93       	push	r18
    1c56:	2a e0       	ldi	r18, 0x0A	; 10
    1c58:	80 95       	com	r24
    1c5a:	08 94       	sec

00001c5c <putchar0>:
    1c5c:	10 f4       	brcc	.+4      	; 0x1c62 <putchar1>
    1c5e:	43 98       	cbi	0x08, 3	; 8
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <putchar2>

00001c62 <putchar1>:
    1c62:	43 9a       	sbi	0x08, 3	; 8
	...

00001c66 <putchar2>:
    1c66:	22 d0       	rcall	.+68     	; 0x1cac <wait100us>
    1c68:	29 d0       	rcall	.+82     	; 0x1cbc <wait3us>
    1c6a:	86 95       	lsr	r24
    1c6c:	2a 95       	dec	r18
    1c6e:	b1 f7       	brne	.-20     	; 0x1c5c <putchar0>
    1c70:	2f 91       	pop	r18
    1c72:	5f bf       	out	0x3f, r21	; 63
    1c74:	2f 91       	pop	r18
    1c76:	08 95       	ret

00001c78 <UART_delay1>:
    1c78:	08 95       	ret

00001c7a <wait5s>:
    1c7a:	03 d0       	rcall	.+6      	; 0x1c82 <wait1000ms>

00001c7c <wait4s>:
    1c7c:	02 d0       	rcall	.+4      	; 0x1c82 <wait1000ms>

00001c7e <wait3s>:
    1c7e:	01 d0       	rcall	.+2      	; 0x1c82 <wait1000ms>

00001c80 <wait2s>:
    1c80:	00 d0       	rcall	.+0      	; 0x1c82 <wait1000ms>

00001c82 <wait1000ms>:
    1c82:	00 d0       	rcall	.+0      	; 0x1c84 <wait500ms>

00001c84 <wait500ms>:
    1c84:	03 d0       	rcall	.+6      	; 0x1c8c <wait100ms>

00001c86 <wait400ms>:
    1c86:	02 d0       	rcall	.+4      	; 0x1c8c <wait100ms>

00001c88 <wait300ms>:
    1c88:	01 d0       	rcall	.+2      	; 0x1c8c <wait100ms>

00001c8a <wait200ms>:
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <wait100ms>

00001c8c <wait100ms>:
    1c8c:	a8 95       	wdr
    1c8e:	00 d0       	rcall	.+0      	; 0x1c90 <wait50ms>

00001c90 <wait50ms>:
    1c90:	03 d0       	rcall	.+6      	; 0x1c98 <wait10ms>

00001c92 <wait40ms>:
    1c92:	02 d0       	rcall	.+4      	; 0x1c98 <wait10ms>

00001c94 <wait30ms>:
    1c94:	01 d0       	rcall	.+2      	; 0x1c98 <wait10ms>

00001c96 <wait20ms>:
    1c96:	00 d0       	rcall	.+0      	; 0x1c98 <wait10ms>

00001c98 <wait10ms>:
    1c98:	00 d0       	rcall	.+0      	; 0x1c9a <wait5ms>

00001c9a <wait5ms>:
    1c9a:	03 d0       	rcall	.+6      	; 0x1ca2 <wait1ms>

00001c9c <wait4ms>:
    1c9c:	02 d0       	rcall	.+4      	; 0x1ca2 <wait1ms>

00001c9e <wait3ms>:
    1c9e:	01 d0       	rcall	.+2      	; 0x1ca2 <wait1ms>

00001ca0 <wait2ms>:
    1ca0:	00 d0       	rcall	.+0      	; 0x1ca2 <wait1ms>

00001ca2 <wait1ms>:
    1ca2:	00 d0       	rcall	.+0      	; 0x1ca4 <wait500us>

00001ca4 <wait500us>:
    1ca4:	03 d0       	rcall	.+6      	; 0x1cac <wait100us>

00001ca6 <wait400us>:
    1ca6:	02 d0       	rcall	.+4      	; 0x1cac <wait100us>

00001ca8 <wait300us>:
    1ca8:	01 d0       	rcall	.+2      	; 0x1cac <wait100us>

00001caa <wait200us>:
    1caa:	00 d0       	rcall	.+0      	; 0x1cac <wait100us>

00001cac <wait100us>:
    1cac:	00 d0       	rcall	.+0      	; 0x1cae <wait50us>

00001cae <wait50us>:
    1cae:	03 d0       	rcall	.+6      	; 0x1cb6 <wait10us>

00001cb0 <wait40us>:
    1cb0:	02 d0       	rcall	.+4      	; 0x1cb6 <wait10us>

00001cb2 <wait30us>:
    1cb2:	01 d0       	rcall	.+2      	; 0x1cb6 <wait10us>

00001cb4 <wait20us>:
    1cb4:	00 d0       	rcall	.+0      	; 0x1cb6 <wait10us>

00001cb6 <wait10us>:
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <wait5us>

00001cb8 <wait5us>:
    1cb8:	03 d0       	rcall	.+6      	; 0x1cc0 <wait1us>

00001cba <wait4us>:
    1cba:	02 d0       	rcall	.+4      	; 0x1cc0 <wait1us>

00001cbc <wait3us>:
    1cbc:	01 d0       	rcall	.+2      	; 0x1cc0 <wait1us>

00001cbe <wait2us>:
    1cbe:	00 d0       	rcall	.+0      	; 0x1cc0 <wait1us>

00001cc0 <wait1us>:
    1cc0:	00 00       	nop
    1cc2:	08 95       	ret

00001cc4 <i2lcd>:
    1cc4:	97 ff       	sbrs	r25, 7
    1cc6:	0a c0       	rjmp	.+20     	; 0x1cdc <u2lcd>
    1cc8:	8f 93       	push	r24
    1cca:	9f 93       	push	r25
    1ccc:	8d e2       	ldi	r24, 0x2D	; 45
    1cce:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
    1cd2:	9f 91       	pop	r25
    1cd4:	8f 91       	pop	r24
    1cd6:	90 95       	com	r25
    1cd8:	81 95       	neg	r24
    1cda:	9f 4f       	sbci	r25, 0xFF	; 255

00001cdc <u2lcd>:
    1cdc:	6f e0       	ldi	r22, 0x0F	; 15
    1cde:	71 e0       	ldi	r23, 0x01	; 1
    1ce0:	4a e0       	ldi	r20, 0x0A	; 10
    1ce2:	50 e0       	ldi	r21, 0x00	; 0
    1ce4:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <utoa>
    1ce8:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
    1cec:	08 95       	ret

00001cee <Scale_C_with_vcc>:
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
  return;
 } // end ReadCapacity()


void Scale_C_with_vcc(void) {
    1cee:	8f 92       	push	r8
    1cf0:	9f 92       	push	r9
    1cf2:	af 92       	push	r10
    1cf4:	bf 92       	push	r11
    1cf6:	df 92       	push	r13
    1cf8:	ef 92       	push	r14
    1cfa:	ff 92       	push	r15
    1cfc:	0f 93       	push	r16
    1cfe:	1f 93       	push	r17
    1d00:	e0 90 6c 01 	lds	r14, 0x016C
    1d04:	f0 90 6d 01 	lds	r15, 0x016D
    1d08:	00 91 6e 01 	lds	r16, 0x016E
    1d0c:	10 91 6f 01 	lds	r17, 0x016F
    1d10:	d0 90 7e 01 	lds	r13, 0x017E
   while (cap.cval > 100000) {
      cap.cval /= 10;
    1d14:	8a e0       	ldi	r24, 0x0A	; 10
    1d16:	88 2e       	mov	r8, r24
    1d18:	91 2c       	mov	r9, r1
    1d1a:	a1 2c       	mov	r10, r1
    1d1c:	b1 2c       	mov	r11, r1
  return;
 } // end ReadCapacity()


void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    1d1e:	08 c0       	rjmp	.+16     	; 0x1d30 <Scale_C_with_vcc+0x42>
      cap.cval /= 10;
    1d20:	c8 01       	movw	r24, r16
    1d22:	b7 01       	movw	r22, r14
    1d24:	a5 01       	movw	r20, r10
    1d26:	94 01       	movw	r18, r8
    1d28:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
    1d2c:	79 01       	movw	r14, r18
    1d2e:	8a 01       	movw	r16, r20
    1d30:	8d 2d       	mov	r24, r13
    1d32:	d3 94       	inc	r13
  return;
 } // end ReadCapacity()


void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    1d34:	91 ea       	ldi	r25, 0xA1	; 161
    1d36:	e9 16       	cp	r14, r25
    1d38:	96 e8       	ldi	r25, 0x86	; 134
    1d3a:	f9 06       	cpc	r15, r25
    1d3c:	91 e0       	ldi	r25, 0x01	; 1
    1d3e:	09 07       	cpc	r16, r25
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	19 07       	cpc	r17, r25
    1d44:	68 f7       	brcc	.-38     	; 0x1d20 <Scale_C_with_vcc+0x32>
    1d46:	80 93 7e 01 	sts	0x017E, r24
      cap.cval /= 10;
      cap.cpre ++;			// prevent overflow
   }
   cap.cval *= ADCconfig.U_AVCC;	// scale with measured voltage
    1d4a:	20 91 37 01 	lds	r18, 0x0137
    1d4e:	30 91 38 01 	lds	r19, 0x0138
    1d52:	40 e0       	ldi	r20, 0x00	; 0
    1d54:	50 e0       	ldi	r21, 0x00	; 0
    1d56:	c8 01       	movw	r24, r16
    1d58:	b7 01       	movw	r22, r14
    1d5a:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
    1d5e:	28 e8       	ldi	r18, 0x88	; 136
    1d60:	33 e1       	ldi	r19, 0x13	; 19
    1d62:	40 e0       	ldi	r20, 0x00	; 0
    1d64:	50 e0       	ldi	r21, 0x00	; 0
    1d66:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
    1d6a:	20 93 6c 01 	sts	0x016C, r18
    1d6e:	30 93 6d 01 	sts	0x016D, r19
    1d72:	40 93 6e 01 	sts	0x016E, r20
    1d76:	50 93 6f 01 	sts	0x016F, r21
}
    1d7a:	1f 91       	pop	r17
    1d7c:	0f 91       	pop	r16
    1d7e:	ff 90       	pop	r15
    1d80:	ef 90       	pop	r14
    1d82:	df 90       	pop	r13
    1d84:	bf 90       	pop	r11
    1d86:	af 90       	pop	r10
    1d88:	9f 90       	pop	r9
    1d8a:	8f 90       	pop	r8
    1d8c:	08 95       	ret

00001d8e <ReadCapacity>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    1d8e:	7f 92       	push	r7
    1d90:	8f 92       	push	r8
    1d92:	9f 92       	push	r9
    1d94:	af 92       	push	r10
    1d96:	bf 92       	push	r11
    1d98:	cf 92       	push	r12
    1d9a:	df 92       	push	r13
    1d9c:	ef 92       	push	r14
    1d9e:	ff 92       	push	r15
    1da0:	0f 93       	push	r16
    1da2:	1f 93       	push	r17
    1da4:	cf 93       	push	r28
    1da6:	df 93       	push	r29
    1da8:	18 2f       	mov	r17, r24
    1daa:	76 2e       	mov	r7, r22
#if FLASHEND > 0x1fff
  unsigned int vloss;	// lost voltage after load pulse in 0.1% 
#endif

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
    1dac:	88 0f       	add	r24, r24
    1dae:	81 0f       	add	r24, r17
    1db0:	86 0f       	add	r24, r22
    1db2:	81 50       	subi	r24, 0x01	; 1
    1db4:	80 93 53 01 	sts	0x0153, r24
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    1db8:	e6 2f       	mov	r30, r22
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	e9 50       	subi	r30, 0x09	; 9
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc0:	04 91       	lpm	r16, Z+
  HiPinR_L = pgm_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
    1dc2:	e1 2f       	mov	r30, r17
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	ec 50       	subi	r30, 0x0C	; 12
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	a4 90       	lpm	r10, Z+
  lcd_testpin(LowPin);
  lcd_data('C');
  lcd_testpin(HighPin);
  lcd_space();
#endif
  if(PartFound == PART_RESISTOR) {
    1dcc:	80 91 09 01 	lds	r24, 0x0109
    1dd0:	81 30       	cpi	r24, 0x01	; 1
    1dd2:	09 f4       	brne	.+2      	; 0x1dd6 <ReadCapacity+0x48>
    1dd4:	98 c2       	rjmp	.+1328   	; 0x2306 <ReadCapacity+0x578>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    1dd6:	30 91 07 01 	lds	r19, 0x0107
    1dda:	a8 e8       	ldi	r26, 0x88	; 136
    1ddc:	b1 e0       	ldi	r27, 0x01	; 1
    1dde:	ed 01       	movw	r28, r26
    1de0:	26 96       	adiw	r28, 0x06	; 6
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	11 c0       	rjmp	.+34     	; 0x1e08 <ReadCapacity+0x7a>
     if ((diodes.Cathode[ii] == LowPin) && (diodes.Anode[ii] == HighPin) && (diodes.Voltage[ii] < 1500)) {
    1de6:	8d 91       	ld	r24, X+
    1de8:	87 15       	cp	r24, r7
    1dea:	61 f4       	brne	.+24     	; 0x1e04 <ReadCapacity+0x76>
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    1dec:	fd 01       	movw	r30, r26
    1dee:	37 97       	sbiw	r30, 0x07	; 7
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
     if ((diodes.Cathode[ii] == LowPin) && (diodes.Anode[ii] == HighPin) && (diodes.Voltage[ii] < 1500)) {
    1df0:	80 81       	ld	r24, Z
    1df2:	81 17       	cp	r24, r17
    1df4:	39 f4       	brne	.+14     	; 0x1e04 <ReadCapacity+0x76>
    1df6:	88 81       	ld	r24, Y
    1df8:	99 81       	ldd	r25, Y+1	; 0x01
    1dfa:	45 e0       	ldi	r20, 0x05	; 5
    1dfc:	8c 3d       	cpi	r24, 0xDC	; 220
    1dfe:	94 07       	cpc	r25, r20
    1e00:	08 f4       	brcc	.+2      	; 0x1e04 <ReadCapacity+0x76>
    1e02:	81 c2       	rjmp	.+1282   	; 0x2306 <ReadCapacity+0x578>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    1e04:	2f 5f       	subi	r18, 0xFF	; 255
    1e06:	22 96       	adiw	r28, 0x02	; 2
    1e08:	23 17       	cp	r18, r19
    1e0a:	68 f3       	brcs	.-38     	; 0x1de6 <ReadCapacity+0x58>

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    1e0c:	08 60       	ori	r16, 0x08	; 8
        return;
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
    1e0e:	10 92 79 01 	sts	0x0179, r1
    1e12:	10 92 78 01 	sts	0x0178, r1
  vloss = 0;				// set lost voltage to zero
#endif
  cap.cval = 0;				// set capacity value to zero
    1e16:	10 92 6c 01 	sts	0x016C, r1
    1e1a:	10 92 6d 01 	sts	0x016D, r1
    1e1e:	10 92 6e 01 	sts	0x016E, r1
    1e22:	10 92 6f 01 	sts	0x016F, r1
  cap.cpre = -12;			//default unit is pF
    1e26:	84 ef       	ldi	r24, 0xF4	; 244
    1e28:	80 93 7e 01 	sts	0x017E, r24
  EntladePins();			// discharge capacitor
    1e2c:	0e 94 37 0c 	call	0x186e	; 0x186e <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    1e30:	88 e0       	ldi	r24, 0x08	; 8
    1e32:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    1e34:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    1e36:	07 b9       	out	0x07, r16	; 7
//  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  R_DDR = 0;				// set all R Ports to input (no current)
    1e38:	14 b8       	out	0x04, r1	; 4
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    1e3a:	81 2f       	mov	r24, r17
    1e3c:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
    1e40:	7c 01       	movw	r14, r24
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    1e42:	10 92 55 01 	sts	0x0155, r1
    1e46:	10 92 54 01 	sts	0x0154, r1
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
  R_PORT = 0;				// switch R-Port to GND
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
//  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  R_DDR = 0;				// set all R Ports to input (no current)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    1e4a:	ec 01       	movw	r28, r24
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    1e4c:	2d c0       	rjmp	.+90     	; 0x1ea8 <ReadCapacity+0x11a>
     R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    1e4e:	a5 b8       	out	0x05, r10	; 5
     R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    1e50:	a4 b8       	out	0x04, r10	; 4
     wait10ms();			// wait exactly 10ms, do not sleep
    1e52:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <wait10ms>
     R_DDR = 0;				// switch back to input
    1e56:	14 b8       	out	0x04, r1	; 4
     R_PORT = 0;			// no Pull up
    1e58:	15 b8       	out	0x05, r1	; 5
     wait500us();			//wait a little time
    1e5a:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <wait500us>
     wdt_reset();
    1e5e:	a8 95       	wdr
     // read voltage without current, is already charged enough?
     adcv[2] = ReadADC(HighPin);
    1e60:	81 2f       	mov	r24, r17
    1e62:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
     if (adcv[2] > adcv[0]) {
    1e66:	e8 16       	cp	r14, r24
    1e68:	f9 06       	cpc	r15, r25
    1e6a:	20 f4       	brcc	.+8      	; 0x1e74 <ReadCapacity+0xe6>
        adcv[2] -= adcv[0];		//difference to beginning voltage
    1e6c:	ec 01       	movw	r28, r24
    1e6e:	ce 19       	sub	r28, r14
    1e70:	df 09       	sbc	r29, r15
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <ReadCapacity+0xea>
     } else {
        adcv[2] = 0;			// voltage is lower or same as beginning voltage
    1e74:	c0 e0       	ldi	r28, 0x00	; 0
    1e76:	d0 e0       	ldi	r29, 0x00	; 0
     }
     if ((ovcnt16 == 126) && (adcv[2] < 75)) {
    1e78:	80 91 54 01 	lds	r24, 0x0154
    1e7c:	90 91 55 01 	lds	r25, 0x0155
    1e80:	8e 37       	cpi	r24, 0x7E	; 126
    1e82:	91 05       	cpc	r25, r1
    1e84:	21 f4       	brne	.+8      	; 0x1e8e <ReadCapacity+0x100>
    1e86:	cb 34       	cpi	r28, 0x4B	; 75
    1e88:	d1 05       	cpc	r29, r1
    1e8a:	08 f4       	brcc	.+2      	; 0x1e8e <ReadCapacity+0x100>
    1e8c:	37 c2       	rjmp	.+1134   	; 0x22fc <ReadCapacity+0x56e>
        // 300mV can not be reached well-timed 
        break;		// don't try to load any more
     }
     if (adcv[2] > 300) {
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	cd 32       	cpi	r28, 0x2D	; 45
    1e92:	d8 07       	cpc	r29, r24
    1e94:	b0 f4       	brcc	.+44     	; 0x1ec2 <ReadCapacity+0x134>
//  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  R_DDR = 0;				// set all R Ports to input (no current)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    1e96:	80 91 54 01 	lds	r24, 0x0154
    1e9a:	90 91 55 01 	lds	r25, 0x0155
    1e9e:	01 96       	adiw	r24, 0x01	; 1
    1ea0:	90 93 55 01 	sts	0x0155, r25
    1ea4:	80 93 54 01 	sts	0x0154, r24
    1ea8:	80 91 54 01 	lds	r24, 0x0154
    1eac:	90 91 55 01 	lds	r25, 0x0155
    1eb0:	21 e0       	ldi	r18, 0x01	; 1
    1eb2:	84 3f       	cpi	r24, 0xF4	; 244
    1eb4:	92 07       	cpc	r25, r18
    1eb6:	58 f2       	brcs	.-106    	; 0x1e4e <ReadCapacity+0xc0>
//  wdt_reset();
#if DebugOut == 10
  DisplayValue(ovcnt16,0,' ',4);
  DisplayValue(adcv[2],-3,'V',4);
#endif
  if (adcv[2] < 301) {
    1eb8:	41 e0       	ldi	r20, 0x01	; 1
    1eba:	cd 32       	cpi	r28, 0x2D	; 45
    1ebc:	d4 07       	cpc	r29, r20
    1ebe:	08 f4       	brcc	.+2      	; 0x1ec2 <ReadCapacity+0x134>
    1ec0:	1d c2       	rjmp	.+1082   	; 0x22fc <ReadCapacity+0x56e>
#endif
//     if (NumOfDiodes != 0) goto messe_mit_rh; /* ****************************** */
     goto keinC;		// was never charged enough, >100mF or shorted
  }
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    1ec2:	80 91 54 01 	lds	r24, 0x0154
    1ec6:	90 91 55 01 	lds	r25, 0x0155
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	81 f4       	brne	.+32     	; 0x1eee <ReadCapacity+0x160>
    1ece:	85 e0       	ldi	r24, 0x05	; 5
    1ed0:	c5 31       	cpi	r28, 0x15	; 21
    1ed2:	d8 07       	cpc	r29, r24
    1ed4:	08 f0       	brcs	.+2      	; 0x1ed8 <ReadCapacity+0x14a>
    1ed6:	92 c0       	rjmp	.+292    	; 0x1ffc <ReadCapacity+0x26e>
    1ed8:	0a c0       	rjmp	.+20     	; 0x1eee <ReadCapacity+0x160>
  cap.cval_uncorrected.dw *= GetRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
     wait5ms();
    1eda:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <wait5ms>
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
    1ede:	81 2f       	mov	r24, r17
    1ee0:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
     wdt_reset();
    1ee4:	a8 95       	wdr
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= GetRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    1ee6:	08 94       	sec
    1ee8:	c1 1c       	adc	r12, r1
    1eea:	d1 1c       	adc	r13, r1
    1eec:	03 c0       	rjmp	.+6      	; 0x1ef4 <ReadCapacity+0x166>
#endif
//     if (NumOfDiodes != 0) goto messe_mit_rh; /* ****************************** */
     goto keinC;		// was never charged enough, >100mF or shorted
  }
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    1eee:	ce 01       	movw	r24, r28
    1ef0:	cc 24       	eor	r12, r12
    1ef2:	dd 24       	eor	r13, r13
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= GetRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    1ef4:	20 91 54 01 	lds	r18, 0x0154
    1ef8:	30 91 55 01 	lds	r19, 0x0155
    1efc:	2c 15       	cp	r18, r12
    1efe:	3d 05       	cpc	r19, r13
    1f00:	60 f7       	brcc	.-40     	; 0x1eda <ReadCapacity+0x14c>
     wait5ms();
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
    1f02:	e8 16       	cp	r14, r24
    1f04:	f9 06       	cpc	r15, r25
    1f06:	30 f4       	brcc	.+12     	; 0x1f14 <ReadCapacity+0x186>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    1f08:	8e 19       	sub	r24, r14
    1f0a:	9f 09       	sbc	r25, r15
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    1f0c:	8c 17       	cp	r24, r28
    1f0e:	9d 07       	cpc	r25, r29
    1f10:	10 f5       	brcc	.+68     	; 0x1f56 <ReadCapacity+0x1c8>
    1f12:	02 c0       	rjmp	.+4      	; 0x1f18 <ReadCapacity+0x18a>
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
    1f18:	7e 01       	movw	r14, r28
    1f1a:	e8 1a       	sub	r14, r24
    1f1c:	f9 0a       	sbc	r15, r25
  } else {
     adcv[3] = 0;			// no lost voltage
  }
#if FLASHEND > 0x1fff
  // compute equivalent parallel resistance from voltage drop
  if (adcv[3] > 0) {
    1f1e:	e9 f0       	breq	.+58     	; 0x1f5a <ReadCapacity+0x1cc>
     // there is any voltage drop (adcv[3]) !
     // adcv[2] is the loaded voltage.
     vloss = (unsigned long)(adcv[3] * 1000UL) / adcv[2];
    1f20:	b7 01       	movw	r22, r14
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	28 ee       	ldi	r18, 0xE8	; 232
    1f28:	33 e0       	ldi	r19, 0x03	; 3
    1f2a:	40 e0       	ldi	r20, 0x00	; 0
    1f2c:	50 e0       	ldi	r21, 0x00	; 0
    1f2e:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
    1f32:	9e 01       	movw	r18, r28
    1f34:	40 e0       	ldi	r20, 0x00	; 0
    1f36:	50 e0       	ldi	r21, 0x00	; 0
    1f38:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
    1f3c:	49 01       	movw	r8, r18
  }
#endif
  if (adcv[3] > 100) {
    1f3e:	25 e6       	ldi	r18, 0x65	; 101
    1f40:	e2 16       	cp	r14, r18
    1f42:	f1 04       	cpc	r15, r1
    1f44:	60 f0       	brcs	.+24     	; 0x1f5e <ReadCapacity+0x1d0>
 #if DebugOut == 10
     lcd_data('L');
     lcd_space();
     wait_about1s();
 #endif
     if (ovcnt16 == 0 )  {
    1f46:	80 91 54 01 	lds	r24, 0x0154
    1f4a:	90 91 55 01 	lds	r25, 0x0155
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	09 f4       	brne	.+2      	; 0x1f54 <ReadCapacity+0x1c6>
    1f52:	56 c0       	rjmp	.+172    	; 0x2000 <ReadCapacity+0x272>
    1f54:	d3 c1       	rjmp	.+934    	; 0x22fc <ReadCapacity+0x56e>
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    1f56:	ee 24       	eor	r14, r14
    1f58:	ff 24       	eor	r15, r15
  } else {
     adcv[3] = 0;			// no lost voltage
  }
#if FLASHEND > 0x1fff
  // compute equivalent parallel resistance from voltage drop
  if (adcv[3] > 0) {
    1f5a:	88 24       	eor	r8, r8
    1f5c:	99 24       	eor	r9, r9
     if (ovcnt16 == 0 )  {
        goto messe_mit_rh;		// Voltage of more than 1300mV is reached in one pulse, but not hold
     }
     goto keinC;			// capacitor does not keep the voltage about 5ms
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
    1f5e:	a0 90 54 01 	lds	r10, 0x0154
    1f62:	b0 90 55 01 	lds	r11, 0x0155
    1f66:	08 94       	sec
    1f68:	a1 1c       	adc	r10, r1
    1f6a:	b1 1c       	adc	r11, r1
    1f6c:	cc 24       	eor	r12, r12
    1f6e:	dd 24       	eor	r13, r13
    1f70:	a0 92 74 01 	sts	0x0174, r10
    1f74:	b0 92 75 01 	sts	0x0175, r11
    1f78:	c0 92 76 01 	sts	0x0176, r12
    1f7c:	d0 92 77 01 	sts	0x0177, r13
  // compute factor with load voltage + lost voltage during the voltage load time
  cap.cval_uncorrected.dw *= GetRLmultip(adcv[2]+adcv[3]);	// get factor to convert time to capacity from table
    1f80:	c7 01       	movw	r24, r14
    1f82:	8c 0f       	add	r24, r28
    1f84:	9d 1f       	adc	r25, r29
    1f86:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <GetRLmultip>
    1f8a:	bc 01       	movw	r22, r24
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	a6 01       	movw	r20, r12
    1f92:	95 01       	movw	r18, r10
    1f94:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
    1f98:	60 93 74 01 	sts	0x0174, r22
    1f9c:	70 93 75 01 	sts	0x0175, r23
    1fa0:	80 93 76 01 	sts	0x0176, r24
    1fa4:	90 93 77 01 	sts	0x0177, r25
#endif
   cap.cval = cap.cval_uncorrected.dw;	// set result to uncorrected
    1fa8:	60 93 6c 01 	sts	0x016C, r22
    1fac:	70 93 6d 01 	sts	0x016D, r23
    1fb0:	80 93 6e 01 	sts	0x016E, r24
    1fb4:	90 93 6f 01 	sts	0x016F, r25
   cap.cpre = -9;		// switch units to nF 
    1fb8:	87 ef       	ldi	r24, 0xF7	; 247
    1fba:	80 93 7e 01 	sts	0x017E, r24
   Scale_C_with_vcc();
    1fbe:	0e 94 77 0e 	call	0x1cee	; 0x1cee <Scale_C_with_vcc>
   // cap.cval for this type is at least 40000nF, so the last digit will be never shown
   cap.cval *= (1000 - C_H_KORR);	// correct with C_H_KORR with 0.1% resolution, but prevent overflow
    1fc2:	60 91 6c 01 	lds	r22, 0x016C
    1fc6:	70 91 6d 01 	lds	r23, 0x016D
    1fca:	80 91 6e 01 	lds	r24, 0x016E
    1fce:	90 91 6f 01 	lds	r25, 0x016F
    1fd2:	28 ee       	ldi	r18, 0xE8	; 232
    1fd4:	33 e0       	ldi	r19, 0x03	; 3
    1fd6:	40 e0       	ldi	r20, 0x00	; 0
    1fd8:	50 e0       	ldi	r21, 0x00	; 0
    1fda:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
   cap.cval /= 100;
    1fde:	24 e6       	ldi	r18, 0x64	; 100
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e0       	ldi	r20, 0x00	; 0
    1fe4:	50 e0       	ldi	r21, 0x00	; 0
    1fe6:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
    1fea:	20 93 6c 01 	sts	0x016C, r18
    1fee:	30 93 6d 01 	sts	0x016D, r19
    1ff2:	40 93 6e 01 	sts	0x016E, r20
    1ff6:	50 93 6f 01 	sts	0x016F, r21
   DisplayValue(cap.cval,cap.cpre,'F',4);
   lcd_space();
   u2lcd(ovcnt16);
   wait_about3s();
#endif
   goto checkDiodes;
    1ffa:	41 c1       	rjmp	.+642    	; 0x227e <ReadCapacity+0x4f0>
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
  vloss = 0;				// set lost voltage to zero
    1ffc:	88 24       	eor	r8, r8
    1ffe:	99 24       	eor	r9, r9
  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
  HiPinR_L = pgm_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
#if FLASEND > 0x3fff
  HiPinR_H = pgm_read_byte(&PinRHtab[HighPin]);	//R_H mask for HighPin R_H load
#else
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load
    2000:	ea 2c       	mov	r14, r10
    2002:	ee 0c       	add	r14, r14

//==================================================================================
// Measurement of little capacity values
messe_mit_rh:
  //little capacity value, about  < 50 µF
  EntladePins();			// discharge capacitor
    2004:	0e 94 37 0c 	call	0x186e	; 0x186e <EntladePins>
  //measure with the R_H (470kOhm) resistor 
  R_PORT = 0;		// R_DDR ist HiPinR_L
    2008:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = (1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK;	//switch all Pins to output
    200a:	8f e0       	ldi	r24, 0x0F	; 15
    200c:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		//switch all ADC Pins to GND
    200e:	88 e0       	ldi	r24, 0x08	; 8
    2010:	88 b9       	out	0x08, r24	; 8
  R_DDR = HiPinR_H;   		// switch R_H resistor port for HighPin to output (GND)
    2012:	e4 b8       	out	0x04, r14	; 4
// setup Analog Comparator
  ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    2014:	80 e4       	ldi	r24, 0x40	; 64
    2016:	80 93 7b 00 	sts	0x007B, r24
  ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    201a:	84 e5       	ldi	r24, 0x54	; 84
    201c:	80 bf       	out	0x30, r24	; 48
  ADMUX = (1<<REFS0) | HighPin;			// switch Mux to High-Pin
    201e:	81 2f       	mov	r24, r17
    2020:	80 64       	ori	r24, 0x40	; 64
    2022:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    2026:	86 e1       	ldi	r24, 0x16	; 22
    2028:	80 93 7a 00 	sts	0x007A, r24
  wait200us();			//wait for bandgap to start up
    202c:	0e 94 55 0e 	call	0x1caa	; 0x1caa <wait200us>

// setup Counter1
  ovcnt16 = 0;
    2030:	10 92 55 01 	sts	0x0155, r1
    2034:	10 92 54 01 	sts	0x0154, r1
  TCCR1A = 0;			// set Counter1 to normal Mode
    2038:	10 92 80 00 	sts	0x0080, r1
  TCNT1 = 0;			//set Counter to 0
    203c:	10 92 85 00 	sts	0x0085, r1
    2040:	10 92 84 00 	sts	0x0084, r1
  TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// clear interrupt flags
    2044:	87 e2       	ldi	r24, 0x27	; 39
    2046:	86 bb       	out	0x16, r24	; 22
#ifndef INHIBIT_SLEEP_MODE
  TIMSK1 = (1<<TOIE1) | (1<<ICIE1);	// enable Timer overflow interrupt and input capture interrupt
    2048:	81 e2       	ldi	r24, 0x21	; 33
    204a:	80 93 6f 00 	sts	0x006F, r24
  unfinished = 1;
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	80 93 6b 01 	sts	0x016B, r24
#endif
  R_PORT = HiPinR_H;           	// switch R_H resistor port for HighPin to VCC
    2054:	e5 b8       	out	0x05, r14	; 5
  if(PartFound == PART_FET) {
    2056:	90 91 09 01 	lds	r25, 0x0109
    205a:	94 30       	cpi	r25, 0x04	; 4
    205c:	71 f4       	brne	.+28     	; 0x207a <ReadCapacity+0x2ec>
     // charge capacitor with R_H resistor
     TCCR1B = (0<<ICNC1) | (1<<CS10);	//Start counter 1MHz or 8MHz without Noise Canceler
    205e:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = (((1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK) & ~(1<<HighPin));	// release only HighPin ADC port
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	01 2e       	mov	r0, r17
    2068:	02 c0       	rjmp	.+4      	; 0x206e <ReadCapacity+0x2e0>
    206a:	88 0f       	add	r24, r24
    206c:	99 1f       	adc	r25, r25
    206e:	0a 94       	dec	r0
    2070:	e2 f7       	brpl	.-8      	; 0x206a <ReadCapacity+0x2dc>
    2072:	80 95       	com	r24
    2074:	8f 70       	andi	r24, 0x0F	; 15
    2076:	87 b9       	out	0x07, r24	; 7
    2078:	03 c0       	rjmp	.+6      	; 0x2080 <ReadCapacity+0x2f2>
  } else {
     TCCR1B =  (0<<ICNC1) | (1<<CS10);	//start counter 1MHz or 8MHz without Noise Canceler
    207a:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
    207e:	07 b9       	out	0x07, r16	; 7
     // this OV was not counted, but was before the Input Capture
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
     ovcnt16++;
  }
#else
  cli();		// disable interrupts to prevent wakeup Interrupts before sleeping
    2080:	f8 94       	cli
  set_sleep_mode(SLEEP_MODE_IDLE);
    2082:	83 b7       	in	r24, 0x33	; 51
    2084:	81 7f       	andi	r24, 0xF1	; 241
    2086:	83 bf       	out	0x33, r24	; 51
  while(unfinished) {
    2088:	12 c0       	rjmp	.+36     	; 0x20ae <ReadCapacity+0x320>
    sleep_enable();
    208a:	83 b7       	in	r24, 0x33	; 51
    208c:	81 60       	ori	r24, 0x01	; 1
    208e:	83 bf       	out	0x33, r24	; 51
    sei();		// enable interrupts after next instruction
    2090:	78 94       	sei
    sleep_cpu();	// only enable interrupts during sleeping
    2092:	88 95       	sleep
    sleep_disable();
    2094:	83 b7       	in	r24, 0x33	; 51
    2096:	8e 7f       	andi	r24, 0xFE	; 254
    2098:	83 bf       	out	0x33, r24	; 51
    cli();		// disable interrupts again
    209a:	f8 94       	cli
    wdt_reset();	// reset watch dog during waiting
    209c:	a8 95       	wdr
    if(ovcnt16 == (F_CPU/5000)) {
    209e:	80 91 54 01 	lds	r24, 0x0154
    20a2:	90 91 55 01 	lds	r25, 0x0155
    20a6:	46 e0       	ldi	r20, 0x06	; 6
    20a8:	80 34       	cpi	r24, 0x40	; 64
    20aa:	94 07       	cpc	r25, r20
    20ac:	21 f0       	breq	.+8      	; 0x20b6 <ReadCapacity+0x328>
     ovcnt16++;
  }
#else
  cli();		// disable interrupts to prevent wakeup Interrupts before sleeping
  set_sleep_mode(SLEEP_MODE_IDLE);
  while(unfinished) {
    20ae:	80 91 6b 01 	lds	r24, 0x016B
    20b2:	88 23       	and	r24, r24
    20b4:	51 f7       	brne	.-44     	; 0x208a <ReadCapacity+0x2fc>
    wdt_reset();	// reset watch dog during waiting
    if(ovcnt16 == (F_CPU/5000)) {
       break; 		//Timeout for Charging, above 12 s
    }
  }
  sei();		// enable interrupts again
    20b6:	78 94       	sei
  TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    20b8:	10 92 81 00 	sts	0x0081, r1
  tmpint = ICR1;		// get previous Input Capture Counter flag
    20bc:	c0 91 86 00 	lds	r28, 0x0086
    20c0:	d0 91 87 00 	lds	r29, 0x0087
  TIMSK1 = (0<<TOIE1) | (0<<ICIE1);	// disable Timer overflow interrupt and input capture interrupt
    20c4:	10 92 6f 00 	sts	0x006F, r1
    u2lcd(tmpint);
  }
#endif

//############################################################
  ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    20c8:	86 e9       	ldi	r24, 0x96	; 150
    20ca:	80 93 7a 00 	sts	0x007A, r24
  R_DDR = 0;			// switch R_H resistor port for input
    20ce:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// switch R_H resistor port pull up for HighPin off
    20d0:	15 b8       	out	0x05, r1	; 5
  adcv[2] = ReadADC(HighPin);   // get loaded voltage
    20d2:	81 2f       	mov	r24, r17
    20d4:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
  load_diff = adcv[2] + REF_C_KORR - ref_mv;	// build difference of capacitor voltage to Reference Voltage
    20d8:	20 91 3b 01 	lds	r18, 0x013B
    20dc:	30 91 3c 01 	lds	r19, 0x013C
    20e0:	82 1b       	sub	r24, r18
    20e2:	93 0b       	sbc	r25, r19
    20e4:	0c 96       	adiw	r24, 0x0c	; 12
    20e6:	90 93 81 01 	sts	0x0181, r25
    20ea:	80 93 80 01 	sts	0x0180, r24
//############################################################
  if (ovcnt16 >= (F_CPU/10000)) {
    20ee:	80 91 54 01 	lds	r24, 0x0154
    20f2:	90 91 55 01 	lds	r25, 0x0155
    20f6:	23 e0       	ldi	r18, 0x03	; 3
    20f8:	80 32       	cpi	r24, 0x20	; 32
    20fa:	92 07       	cpc	r25, r18
    20fc:	08 f0       	brcs	.+2      	; 0x2100 <ReadCapacity+0x372>
    20fe:	fe c0       	rjmp	.+508    	; 0x22fc <ReadCapacity+0x56e>
     wait_about1s();
#endif
     goto keinC;	// no normal end
  }
//  cap.cval_uncorrected = CombineII2Long(ovcnt16, tmpint);
  cap.cval_uncorrected.w[1] = ovcnt16;
    2100:	80 91 54 01 	lds	r24, 0x0154
    2104:	90 91 55 01 	lds	r25, 0x0155
    2108:	90 93 77 01 	sts	0x0177, r25
    210c:	80 93 76 01 	sts	0x0176, r24
  cap.cval_uncorrected.w[0] = tmpint;
    2110:	d0 93 75 01 	sts	0x0175, r29
    2114:	c0 93 74 01 	sts	0x0174, r28

  cap.cpre = -12;			// cap.cval unit is pF 
    2118:	84 ef       	ldi	r24, 0xF4	; 244
    211a:	80 93 7e 01 	sts	0x017E, r24
  if (ovcnt16 > 65) {
    211e:	80 91 54 01 	lds	r24, 0x0154
    2122:	90 91 55 01 	lds	r25, 0x0155
    2126:	82 34       	cpi	r24, 0x42	; 66
    2128:	91 05       	cpc	r25, r1
    212a:	c8 f0       	brcs	.+50     	; 0x215e <ReadCapacity+0x3d0>
     cap.cval_uncorrected.dw /= 100;	// switch to next unit
    212c:	60 91 74 01 	lds	r22, 0x0174
    2130:	70 91 75 01 	lds	r23, 0x0175
    2134:	80 91 76 01 	lds	r24, 0x0176
    2138:	90 91 77 01 	lds	r25, 0x0177
    213c:	24 e6       	ldi	r18, 0x64	; 100
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	40 e0       	ldi	r20, 0x00	; 0
    2142:	50 e0       	ldi	r21, 0x00	; 0
    2144:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
    2148:	20 93 74 01 	sts	0x0174, r18
    214c:	30 93 75 01 	sts	0x0175, r19
    2150:	40 93 76 01 	sts	0x0176, r20
    2154:	50 93 77 01 	sts	0x0177, r21
     cap.cpre += 2;			// set unit, prevent overflow
    2158:	86 ef       	ldi	r24, 0xF6	; 246
    215a:	80 93 7e 01 	sts	0x017E, r24
  }
  cap.cval_uncorrected.dw *= RHmultip;		// 708
    215e:	60 91 00 01 	lds	r22, 0x0100
    2162:	70 91 01 01 	lds	r23, 0x0101
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	20 91 74 01 	lds	r18, 0x0174
    216e:	30 91 75 01 	lds	r19, 0x0175
    2172:	40 91 76 01 	lds	r20, 0x0176
    2176:	50 91 77 01 	lds	r21, 0x0177
    217a:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
  cap.cval_uncorrected.dw /= (F_CPU / 10000);	// divide by 100 (@ 1MHz clock), 800 (@ 8MHz clock)
    217e:	20 e2       	ldi	r18, 0x20	; 32
    2180:	33 e0       	ldi	r19, 0x03	; 3
    2182:	40 e0       	ldi	r20, 0x00	; 0
    2184:	50 e0       	ldi	r21, 0x00	; 0
    2186:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
    218a:	20 93 74 01 	sts	0x0174, r18
    218e:	30 93 75 01 	sts	0x0175, r19
    2192:	40 93 76 01 	sts	0x0176, r20
    2196:	50 93 77 01 	sts	0x0177, r21
  cap.cval = cap.cval_uncorrected.dw;		// set the corrected cap.cval
    219a:	ec e6       	ldi	r30, 0x6C	; 108
    219c:	f1 e0       	ldi	r31, 0x01	; 1
    219e:	20 93 6c 01 	sts	0x016C, r18
    21a2:	31 83       	std	Z+1, r19	; 0x01
    21a4:	42 83       	std	Z+2, r20	; 0x02
    21a6:	53 83       	std	Z+3, r21	; 0x03
  Scale_C_with_vcc();
    21a8:	0e 94 77 0e 	call	0x1cee	; 0x1cee <Scale_C_with_vcc>
  if (cap.cpre == -12) {
    21ac:	80 91 7e 01 	lds	r24, 0x017E
    21b0:	84 3f       	cpi	r24, 0xF4	; 244
    21b2:	09 f0       	breq	.+2      	; 0x21b6 <ReadCapacity+0x428>
    21b4:	55 c0       	rjmp	.+170    	; 0x2260 <ReadCapacity+0x4d2>
#if COMP_SLEW1 > COMP_SLEW2
     if (cap.cval < COMP_SLEW1) {
    21b6:	c0 90 6c 01 	lds	r12, 0x016C
    21ba:	d0 90 6d 01 	lds	r13, 0x016D
    21be:	e0 90 6e 01 	lds	r14, 0x016E
    21c2:	f0 90 6f 01 	lds	r15, 0x016F
    21c6:	40 ea       	ldi	r20, 0xA0	; 160
    21c8:	c4 16       	cp	r12, r20
    21ca:	4f e0       	ldi	r20, 0x0F	; 15
    21cc:	d4 06       	cpc	r13, r20
    21ce:	40 e0       	ldi	r20, 0x00	; 0
    21d0:	e4 06       	cpc	r14, r20
    21d2:	40 e0       	ldi	r20, 0x00	; 0
    21d4:	f4 06       	cpc	r15, r20
    21d6:	c0 f4       	brcc	.+48     	; 0x2208 <ReadCapacity+0x47a>
        // add slew rate dependent offset
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
    21d8:	a7 01       	movw	r20, r14
    21da:	96 01       	movw	r18, r12
    21dc:	24 52       	subi	r18, 0x24	; 36
    21de:	3f 4f       	sbci	r19, 0xFF	; 255
    21e0:	4f 4f       	sbci	r20, 0xFF	; 255
    21e2:	5f 4f       	sbci	r21, 0xFF	; 255
    21e4:	60 ea       	ldi	r22, 0xA0	; 160
    21e6:	7f e0       	ldi	r23, 0x0F	; 15
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
    21f0:	2c 0d       	add	r18, r12
    21f2:	3d 1d       	adc	r19, r13
    21f4:	4e 1d       	adc	r20, r14
    21f6:	5f 1d       	adc	r21, r15
    21f8:	20 93 6c 01 	sts	0x016C, r18
    21fc:	30 93 6d 01 	sts	0x016D, r19
    2200:	40 93 6e 01 	sts	0x016E, r20
    2204:	50 93 6f 01 	sts	0x016F, r21
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2208:	80 91 53 01 	lds	r24, 0x0153
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	85 53       	subi	r24, 0x35	; 53
    2210:	9e 4f       	sbci	r25, 0xFE	; 254
    2212:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__eerd_byte_m168>
     if (cap.cval > tmpint) {
    2216:	20 91 6c 01 	lds	r18, 0x016C
    221a:	30 91 6d 01 	lds	r19, 0x016D
    221e:	40 91 6e 01 	lds	r20, 0x016E
    2222:	50 91 6f 01 	lds	r21, 0x016F
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2226:	90 e0       	ldi	r25, 0x00	; 0
     if (cap.cval > tmpint) {
    2228:	a0 e0       	ldi	r26, 0x00	; 0
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	82 17       	cp	r24, r18
    222e:	93 07       	cpc	r25, r19
    2230:	a4 07       	cpc	r26, r20
    2232:	b5 07       	cpc	r27, r21
    2234:	68 f4       	brcc	.+26     	; 0x2250 <ReadCapacity+0x4c2>
         cap.cval -= tmpint;		//subtract zero offset (pF)
    2236:	28 1b       	sub	r18, r24
    2238:	39 0b       	sbc	r19, r25
    223a:	4a 0b       	sbc	r20, r26
    223c:	5b 0b       	sbc	r21, r27
    223e:	20 93 6c 01 	sts	0x016C, r18
    2242:	30 93 6d 01 	sts	0x016D, r19
    2246:	40 93 6e 01 	sts	0x016E, r20
    224a:	50 93 6f 01 	sts	0x016F, r21
    224e:	08 c0       	rjmp	.+16     	; 0x2260 <ReadCapacity+0x4d2>
         lcd_testpin(HighPin);
         lcd_space();
#endif
       }
#endif
         cap.cval = 0;			//unsigned long may not reach negativ value
    2250:	10 92 6c 01 	sts	0x016C, r1
    2254:	10 92 6d 01 	sts	0x016D, r1
    2258:	10 92 6e 01 	sts	0x016E, r1
    225c:	10 92 6f 01 	sts	0x016F, r1
  lcd_testpin(HighPin);
  lcd_space();
  DisplayValue(cap.cval,cap.cpre,'F',4);
  wait_about3s();
#endif
  R_DDR = HiPinR_L; 		//switch R_L for High-Pin to GND
    2260:	a4 b8       	out	0x04, r10	; 4
#if F_CPU < 2000001
   if(cap.cval < 50)
#else 
   if(cap.cval < 25)
    2262:	80 91 6c 01 	lds	r24, 0x016C
    2266:	90 91 6d 01 	lds	r25, 0x016D
    226a:	a0 91 6e 01 	lds	r26, 0x016E
    226e:	b0 91 6f 01 	lds	r27, 0x016F
    2272:	89 31       	cpi	r24, 0x19	; 25
    2274:	91 05       	cpc	r25, r1
    2276:	a1 05       	cpc	r26, r1
    2278:	b1 05       	cpc	r27, r1
    227a:	08 f4       	brcc	.+2      	; 0x227e <ReadCapacity+0x4f0>
    227c:	3f c0       	rjmp	.+126    	; 0x22fc <ReadCapacity+0x56e>
#endif
      goto keinC;	//capacity to low, < 50pF @1MHz (25pF @8MHz)
   }
   // end low capacity 
checkDiodes:
   if((NumOfDiodes > 0)  && (PartFound != PART_FET)) {
    227e:	80 91 07 01 	lds	r24, 0x0107
    2282:	88 23       	and	r24, r24
    2284:	21 f0       	breq	.+8      	; 0x228e <ReadCapacity+0x500>
    2286:	80 91 09 01 	lds	r24, 0x0109
    228a:	84 30       	cpi	r24, 0x04	; 4
    228c:	b9 f5       	brne	.+110    	; 0x22fc <ReadCapacity+0x56e>
      wait_about1s();
#endif
      // nearly shure, that there is one or more diodes in reverse direction,
      // which would be wrongly detected as capacitor 
   } else {
      PartFound = PART_CAPACITOR;	//capacitor is found
    228e:	87 e0       	ldi	r24, 0x07	; 7
    2290:	80 93 09 01 	sts	0x0109, r24
      if ((cap.cpre > cap.cpre_max) || ((cap.cpre == cap.cpre_max) && (cap.cval > cap.cval_max))) {
    2294:	60 91 7e 01 	lds	r22, 0x017E
    2298:	80 91 7f 01 	lds	r24, 0x017F
    229c:	86 17       	cp	r24, r22
    229e:	bc f0       	brlt	.+46     	; 0x22ce <ReadCapacity+0x540>
    22a0:	68 17       	cp	r22, r24
    22a2:	61 f5       	brne	.+88     	; 0x22fc <ReadCapacity+0x56e>
    22a4:	20 91 6c 01 	lds	r18, 0x016C
    22a8:	30 91 6d 01 	lds	r19, 0x016D
    22ac:	40 91 6e 01 	lds	r20, 0x016E
    22b0:	50 91 6f 01 	lds	r21, 0x016F
    22b4:	80 91 70 01 	lds	r24, 0x0170
    22b8:	90 91 71 01 	lds	r25, 0x0171
    22bc:	a0 91 72 01 	lds	r26, 0x0172
    22c0:	b0 91 73 01 	lds	r27, 0x0173
    22c4:	82 17       	cp	r24, r18
    22c6:	93 07       	cpc	r25, r19
    22c8:	a4 07       	cpc	r26, r20
    22ca:	b5 07       	cpc	r27, r21
    22cc:	b8 f4       	brcc	.+46     	; 0x22fc <ReadCapacity+0x56e>
         // we have found a greater one
         cap.cval_max = cap.cval;
    22ce:	ec e6       	ldi	r30, 0x6C	; 108
    22d0:	f1 e0       	ldi	r31, 0x01	; 1
    22d2:	80 91 6c 01 	lds	r24, 0x016C
    22d6:	90 91 6d 01 	lds	r25, 0x016D
    22da:	a0 91 6e 01 	lds	r26, 0x016E
    22de:	b0 91 6f 01 	lds	r27, 0x016F
    22e2:	80 93 70 01 	sts	0x0170, r24
    22e6:	90 93 71 01 	sts	0x0171, r25
    22ea:	a0 93 72 01 	sts	0x0172, r26
    22ee:	b0 93 73 01 	sts	0x0173, r27
         cap.cpre_max = cap.cpre;
    22f2:	63 8b       	std	Z+19, r22	; 0x13
#if FLASHEND > 0x1fff
         cap.v_loss = vloss;		// lost voltage in 0.01%
    22f4:	97 86       	std	Z+15, r9	; 0x0f
    22f6:	86 86       	std	Z+14, r8	; 0x0e
#endif
         cap.ca = LowPin;		// save LowPin
    22f8:	70 8a       	std	Z+16, r7	; 0x10
         cap.cb = HighPin;		// save HighPin
    22fa:	11 8b       	std	Z+17, r17	; 0x11
keinC:
  // discharge capacitor again
//  EntladePins();		// discharge capacitors
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    22fc:	88 e0       	ldi	r24, 0x08	; 8
    22fe:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    2300:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    2302:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    2304:	15 b8       	out	0x05, r1	; 5
  return;
 } // end ReadCapacity()
    2306:	df 91       	pop	r29
    2308:	cf 91       	pop	r28
    230a:	1f 91       	pop	r17
    230c:	0f 91       	pop	r16
    230e:	ff 90       	pop	r15
    2310:	ef 90       	pop	r14
    2312:	df 90       	pop	r13
    2314:	cf 90       	pop	r12
    2316:	bf 90       	pop	r11
    2318:	af 90       	pop	r10
    231a:	9f 90       	pop	r9
    231c:	8f 90       	pop	r8
    231e:	7f 90       	pop	r7
    2320:	08 95       	ret

00002322 <__vector_13>:
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
}
#ifndef INHIBIT_SLEEP_MODE
/* Interrupt Service Routine for timer1 Overflow */
 ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    2322:	1f 92       	push	r1
    2324:	0f 92       	push	r0
    2326:	0f b6       	in	r0, 0x3f	; 63
    2328:	0f 92       	push	r0
    232a:	11 24       	eor	r1, r1
    232c:	8f 93       	push	r24
    232e:	9f 93       	push	r25
 if ((!(TI1_INT_FLAGS & (1<<ICF1)) && (unfinished !=0)) || ((TI1_INT_FLAGS & (1<<ICF1)) && (ICR1 < 250))) {
    2330:	b5 99       	sbic	0x16, 5	; 22
    2332:	04 c0       	rjmp	.+8      	; 0x233c <__vector_13+0x1a>
    2334:	80 91 6b 01 	lds	r24, 0x016B
    2338:	88 23       	and	r24, r24
    233a:	49 f4       	brne	.+18     	; 0x234e <__vector_13+0x2c>
    233c:	b5 9b       	sbis	0x16, 5	; 22
    233e:	10 c0       	rjmp	.+32     	; 0x2360 <__vector_13+0x3e>
    2340:	80 91 86 00 	lds	r24, 0x0086
    2344:	90 91 87 00 	lds	r25, 0x0087
    2348:	8a 3f       	cpi	r24, 0xFA	; 250
    234a:	91 05       	cpc	r25, r1
    234c:	48 f4       	brcc	.+18     	; 0x2360 <__vector_13+0x3e>
    // Capture Event not pending or (Capture Event pending and ICR1 < 250
    // the ICR1H is buffered and can not examined alone, we must read the ICR1L first (with ICR1 access) !
   ovcnt16++;				// count Overflow
    234e:	80 91 54 01 	lds	r24, 0x0154
    2352:	90 91 55 01 	lds	r25, 0x0155
    2356:	01 96       	adiw	r24, 0x01	; 1
    2358:	90 93 55 01 	sts	0x0155, r25
    235c:	80 93 54 01 	sts	0x0154, r24
 }
}
    2360:	9f 91       	pop	r25
    2362:	8f 91       	pop	r24
    2364:	0f 90       	pop	r0
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	0f 90       	pop	r0
    236a:	1f 90       	pop	r1
    236c:	18 95       	reti

0000236e <__vector_10>:
/* Interrupt Service Routine for timer1 capture event (Comparator) */
 ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    236e:	1f 92       	push	r1
    2370:	0f 92       	push	r0
    2372:	0f b6       	in	r0, 0x3f	; 63
    2374:	0f 92       	push	r0
    2376:	11 24       	eor	r1, r1
    2378:	8f 93       	push	r24
    237a:	9f 93       	push	r25
 unfinished = 0;			// clear unfinished flag
    237c:	10 92 6b 01 	sts	0x016B, r1
 // With unfinished set to 0, we prevent further counting the Overflow.s
 // Is already a Overflow detected?
 if((TI1_INT_FLAGS & (1<<TOV1))) {	// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    2380:	b0 9b       	sbis	0x16, 0	; 22
    2382:	10 c0       	rjmp	.+32     	; 0x23a4 <__vector_10+0x36>
   //there is already a Overflow detected, before or after the capture event?
   // ICR1H is buffered and can not examined alone, we must read the ICR1L first (with ICR1 access) !
   if (ICR1 < 250) {
    2384:	80 91 86 00 	lds	r24, 0x0086
    2388:	90 91 87 00 	lds	r25, 0x0087
    238c:	8a 3f       	cpi	r24, 0xFA	; 250
    238e:	91 05       	cpc	r25, r1
    2390:	48 f4       	brcc	.+18     	; 0x23a4 <__vector_10+0x36>
     //  Yes, Input Capture Counter is low, Overflow has occured before the capture event
     ovcnt16++;				// count Overflow
    2392:	80 91 54 01 	lds	r24, 0x0154
    2396:	90 91 55 01 	lds	r25, 0x0155
    239a:	01 96       	adiw	r24, 0x01	; 1
    239c:	90 93 55 01 	sts	0x0155, r25
    23a0:	80 93 54 01 	sts	0x0154, r24
   }
 }
}
    23a4:	9f 91       	pop	r25
    23a6:	8f 91       	pop	r24
    23a8:	0f 90       	pop	r0
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	0f 90       	pop	r0
    23ae:	1f 90       	pop	r1
    23b0:	18 95       	reti

000023b2 <GetRLmultip>:
    23b2:	0f 92       	push	r0
    23b4:	21 e0       	ldi	r18, 0x01	; 1
    23b6:	8c 32       	cpi	r24, 0x2C	; 44
    23b8:	92 07       	cpc	r25, r18
    23ba:	18 f0       	brcs	.+6      	; 0x23c2 <ad221c>
    23bc:	8c 52       	subi	r24, 0x2C	; 44
    23be:	91 40       	sbci	r25, 0x01	; 1
    23c0:	02 c0       	rjmp	.+4      	; 0x23c6 <ad2220>

000023c2 <ad221c>:
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	90 e0       	ldi	r25, 0x00	; 0

000023c6 <ad2220>:
    23c6:	69 e1       	ldi	r22, 0x19	; 25
    23c8:	70 e0       	ldi	r23, 0x00	; 0
    23ca:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__udivmodhi4>
    23ce:	6b 32       	cpi	r22, 0x2B	; 43
    23d0:	18 f4       	brcc	.+6      	; 0x23d8 <ad2232>
    23d2:	99 e1       	ldi	r25, 0x19	; 25
    23d4:	98 1b       	sub	r25, r24
    23d6:	02 c0       	rjmp	.+4      	; 0x23dc <ad2236>

000023d8 <ad2232>:
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	6b e2       	ldi	r22, 0x2B	; 43

000023dc <ad2236>:
    23dc:	e0 e0       	ldi	r30, 0x00	; 0
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	e6 0f       	add	r30, r22
    23e2:	f1 1d       	adc	r31, r1
    23e4:	e6 0f       	add	r30, r22
    23e6:	f1 1d       	adc	r31, r1
    23e8:	cf 01       	movw	r24, r30
    23ea:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__eerd_byte_m168>
    23ee:	48 2f       	mov	r20, r24
    23f0:	31 96       	adiw	r30, 0x01	; 1
    23f2:	cf 01       	movw	r24, r30
    23f4:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__eerd_byte_m168>
    23f8:	58 2f       	mov	r21, r24
    23fa:	31 96       	adiw	r30, 0x01	; 1
    23fc:	cf 01       	movw	r24, r30
    23fe:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__eerd_byte_m168>
    2402:	28 2f       	mov	r18, r24
    2404:	31 96       	adiw	r30, 0x01	; 1
    2406:	cf 01       	movw	r24, r30
    2408:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__eerd_byte_m168>
    240c:	38 2f       	mov	r19, r24
    240e:	69 2f       	mov	r22, r25
    2410:	42 1b       	sub	r20, r18
    2412:	53 0b       	sbc	r21, r19
    2414:	64 9f       	mul	r22, r20
    2416:	c0 01       	movw	r24, r0
    2418:	65 9f       	mul	r22, r21
    241a:	90 0d       	add	r25, r0
    241c:	11 24       	eor	r1, r1
    241e:	0c 96       	adiw	r24, 0x0c	; 12
    2420:	69 e1       	ldi	r22, 0x19	; 25
    2422:	70 e0       	ldi	r23, 0x00	; 0
    2424:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__udivmodhi4>
    2428:	62 0f       	add	r22, r18
    242a:	73 1f       	adc	r23, r19
    242c:	cb 01       	movw	r24, r22
    242e:	0f 90       	pop	r0
    2430:	08 95       	ret

00002432 <get_log>:
 } // end ReadInductance()


#if FLASHEND > 0x1fff
// get_log interpolate a table with the function -log(1 - (permil/1000))
uint16_t get_log(uint16_t permil) {
    2432:	cf 93       	push	r28
    2434:	df 93       	push	r29
  uint16_t y1, y2;			// table values
  uint16_t result;			// result of interpolation
  uint8_t tabind;			// index to table value
  uint8_t tabres;			// distance to lower table value, fraction of Log_Tab_Distance

  tabind = permil / Log_Tab_Distance;	// index to table
    2436:	24 e1       	ldi	r18, 0x14	; 20
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	b9 01       	movw	r22, r18
    243c:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__udivmodhi4>
    2440:	dc 01       	movw	r26, r24
  tabres = permil % Log_Tab_Distance;	// fraction of table distance
  // interpolate the table of factors
  y1 = pgm_read_word(&LogTab[tabind]);	// get the lower table value
    2442:	70 e0       	ldi	r23, 0x00	; 0
    2444:	fb 01       	movw	r30, r22
    2446:	ee 0f       	add	r30, r30
    2448:	ff 1f       	adc	r31, r31
    244a:	e8 59       	subi	r30, 0x98	; 152
    244c:	ff 4f       	sbci	r31, 0xFF	; 255
    244e:	c5 91       	lpm	r28, Z+
    2450:	d4 91       	lpm	r29, Z+
  y2 = pgm_read_word(&LogTab[tabind+1]); // get the higher table value
    2452:	fb 01       	movw	r30, r22
    2454:	ee 0f       	add	r30, r30
    2456:	ff 1f       	adc	r31, r31
    2458:	e6 59       	subi	r30, 0x96	; 150
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	45 91       	lpm	r20, Z+
    245e:	54 91       	lpm	r21, Z+
  result = ((y2 - y1) * tabres ) / Log_Tab_Distance + y1; // interpolate
    2460:	4c 1b       	sub	r20, r28
    2462:	5d 0b       	sbc	r21, r29
    2464:	4a 9f       	mul	r20, r26
    2466:	c0 01       	movw	r24, r0
    2468:	4b 9f       	mul	r20, r27
    246a:	90 0d       	add	r25, r0
    246c:	5a 9f       	mul	r21, r26
    246e:	90 0d       	add	r25, r0
    2470:	11 24       	eor	r1, r1
    2472:	b9 01       	movw	r22, r18
    2474:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__udivmodhi4>
    2478:	6c 0f       	add	r22, r28
    247a:	7d 1f       	adc	r23, r29
  return(result);
 }
    247c:	cb 01       	movw	r24, r22
    247e:	df 91       	pop	r29
    2480:	cf 91       	pop	r28
    2482:	08 95       	ret

00002484 <ReadInductance>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadInductance(void) {
    2484:	2f 92       	push	r2
    2486:	3f 92       	push	r3
    2488:	4f 92       	push	r4
    248a:	5f 92       	push	r5
    248c:	6f 92       	push	r6
    248e:	7f 92       	push	r7
    2490:	8f 92       	push	r8
    2492:	9f 92       	push	r9
    2494:	af 92       	push	r10
    2496:	bf 92       	push	r11
    2498:	cf 92       	push	r12
    249a:	df 92       	push	r13
    249c:	ef 92       	push	r14
    249e:	ff 92       	push	r15
    24a0:	0f 93       	push	r16
    24a2:	1f 93       	push	r17
    24a4:	df 93       	push	r29
    24a6:	cf 93       	push	r28
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	66 97       	sbiw	r28, 0x16	; 22
    24ae:	0f b6       	in	r0, 0x3f	; 63
    24b0:	f8 94       	cli
    24b2:	de bf       	out	0x3e, r29	; 62
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	cd bf       	out	0x3d, r28	; 61
  int8_t ukorr;		// correction of comparator voltage
  uint8_t nr_pol1;	// number of successfull inductance measurement with polarity 1
  uint8_t nr_pol2;	// number of successfull inductance measurement with polarity 2


  inductor_lpre = 0;	// H units, mark inductor as 0
    24b8:	10 92 0d 01 	sts	0x010D, r1
  if(PartFound != PART_RESISTOR) {
    24bc:	80 91 09 01 	lds	r24, 0x0109
    24c0:	81 30       	cpi	r24, 0x01	; 1
    24c2:	09 f0       	breq	.+2      	; 0x24c6 <ReadInductance+0x42>
    24c4:	51 c2       	rjmp	.+1186   	; 0x2968 <ReadInductance+0x4e4>
     return;	//We have found no resistor  
  }
  if (ResistorsFound != 1) {
    24c6:	80 91 6a 01 	lds	r24, 0x016A
    24ca:	81 30       	cpi	r24, 0x01	; 1
    24cc:	09 f0       	breq	.+2      	; 0x24d0 <ReadInductance+0x4c>
    24ce:	4c c2       	rjmp	.+1176   	; 0x2968 <ReadInductance+0x4e4>
     return;	// do not search for inductance, more than 1 resistor
  }
     if (resis[0].rx > 21000) return;
    24d0:	80 91 1b 01 	lds	r24, 0x011B
    24d4:	90 91 1c 01 	lds	r25, 0x011C
    24d8:	a0 91 1d 01 	lds	r26, 0x011D
    24dc:	b0 91 1e 01 	lds	r27, 0x011E
    24e0:	89 30       	cpi	r24, 0x09	; 9
    24e2:	22 e5       	ldi	r18, 0x52	; 82
    24e4:	92 07       	cpc	r25, r18
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	a2 07       	cpc	r26, r18
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	b2 07       	cpc	r27, r18
    24ee:	08 f0       	brcs	.+2      	; 0x24f2 <ReadInductance+0x6e>
    24f0:	3b c2       	rjmp	.+1142   	; 0x2968 <ReadInductance+0x4e4>
    24f2:	bb 24       	eor	r11, r11
        HiADC = pgm_read_byte(&PinADCtab[HighPin]);
        LoPinR_L = pgm_read_byte(&PinRLtab[LowPin]);	//R_L mask for HighPin R_L load
        //==================================================================================
        // Measurement of Inductance values
        R_PORT = 0;		// switch R port to GND
        ADC_PORT =   TXD_VAL;		// switch ADC-Port to GND
    24f4:	f8 e0       	ldi	r31, 0x08	; 8
    24f6:	af 2e       	mov	r10, r31
    24f8:	80 91 1f 01 	lds	r24, 0x011F
    24fc:	20 90 20 01 	lds	r2, 0x0120
     if (resis[0].rx > 21000) return;

     // we can check for Inductance, if resistance is below 2100 Ohm
     for (count=0;count<4;count++) {
        // Try four times (different direction and with delayed counter start)
        if (count < 2) {
    2500:	9b 2d       	mov	r25, r11
    2502:	92 30       	cpi	r25, 0x02	; 2
    2504:	10 f4       	brcc	.+4      	; 0x250a <ReadInductance+0x86>
           // first and second pass, direction 1
           LowPin = resis[0].ra;
    2506:	68 2e       	mov	r6, r24
    2508:	02 c0       	rjmp	.+4      	; 0x250e <ReadInductance+0x8a>
           HighPin = resis[0].rb;
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[0].rb;
    250a:	62 2c       	mov	r6, r2
           HighPin = resis[0].ra;
    250c:	28 2e       	mov	r2, r24
        }
        HiADC = pgm_read_byte(&PinADCtab[HighPin]);
    250e:	e2 2d       	mov	r30, r2
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	e9 50       	subi	r30, 0x09	; 9
    2514:	ff 4f       	sbci	r31, 0xFF	; 255
    2516:	24 91       	lpm	r18, Z+
        LoPinR_L = pgm_read_byte(&PinRLtab[LowPin]);	//R_L mask for HighPin R_L load
    2518:	e6 2d       	mov	r30, r6
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	ec 50       	subi	r30, 0x0C	; 12
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	e4 91       	lpm	r30, Z+
        //==================================================================================
        // Measurement of Inductance values
        R_PORT = 0;		// switch R port to GND
    2522:	15 b8       	out	0x05, r1	; 5
        ADC_PORT =   TXD_VAL;		// switch ADC-Port to GND
    2524:	a8 b8       	out	0x08, r10	; 8
        if ((resis[0].rx < 240) && ((count & 0x01) == 0)) {
    2526:	80 91 1b 01 	lds	r24, 0x011B
    252a:	90 91 1c 01 	lds	r25, 0x011C
    252e:	a0 91 1d 01 	lds	r26, 0x011D
    2532:	b0 91 1e 01 	lds	r27, 0x011E
    2536:	80 3f       	cpi	r24, 0xF0	; 240
    2538:	91 05       	cpc	r25, r1
    253a:	a1 05       	cpc	r26, r1
    253c:	b1 05       	cpc	r27, r1
    253e:	b8 f4       	brcc	.+46     	; 0x256e <ReadInductance+0xea>
    2540:	b0 fc       	sbrc	r11, 0
    2542:	15 c0       	rjmp	.+42     	; 0x256e <ReadInductance+0xea>
           // we can use PinR_L for measurement
           mess_r = RR680MI - R_L_VAL;			// use only pin output resistance
    2544:	c0 90 03 01 	lds	r12, 0x0103
    2548:	d0 90 04 01 	lds	r13, 0x0104
    254c:	a0 e7       	ldi	r26, 0x70	; 112
    254e:	b5 ee       	ldi	r27, 0xE5	; 229
    2550:	ca 0e       	add	r12, r26
    2552:	db 1e       	adc	r13, r27
           ADC_DDR = HiADC | (1<<LowPin) | TXD_MSK;	// switch HiADC and Low Pin to GND, 
    2554:	32 2f       	mov	r19, r18
    2556:	38 60       	ori	r19, 0x08	; 8
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	06 2c       	mov	r0, r6
    255e:	02 c0       	rjmp	.+4      	; 0x2564 <ReadInductance+0xe0>
    2560:	88 0f       	add	r24, r24
    2562:	99 1f       	adc	r25, r25
    2564:	0a 94       	dec	r0
    2566:	e2 f7       	brpl	.-8      	; 0x2560 <ReadInductance+0xdc>
    2568:	38 2b       	or	r19, r24
    256a:	37 b9       	out	0x07, r19	; 7
    256c:	08 c0       	rjmp	.+16     	; 0x257e <ReadInductance+0xfa>
        } else {
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
    256e:	e4 b9       	out	0x04, r30	; 4
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
    2570:	82 2f       	mov	r24, r18
    2572:	88 60       	ori	r24, 0x08	; 8
    2574:	87 b9       	out	0x07, r24	; 7
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
    2576:	c0 90 03 01 	lds	r12, 0x0103
    257a:	d0 90 04 01 	lds	r13, 0x0104
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    257e:	30 e0       	ldi	r19, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    2580:	86 2d       	mov	r24, r6
    2582:	2e 8b       	std	Y+22, r18	; 0x16
    2584:	3d 8b       	std	Y+21, r19	; 0x15
    2586:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <W10msReadADC>
    258a:	4c 01       	movw	r8, r24
            total_r =  ReadADC(HighPin);
    258c:	82 2d       	mov	r24, r2
    258e:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    2592:	2e 89       	ldd	r18, Y+22	; 0x16
    2594:	3d 89       	ldd	r19, Y+21	; 0x15
    2596:	b2 e0       	ldi	r27, 0x02	; 2
    2598:	8b 16       	cp	r8, r27
    259a:	91 04       	cpc	r9, r1
    259c:	18 f4       	brcc	.+6      	; 0x25a4 <ReadInductance+0x120>
    259e:	82 30       	cpi	r24, 0x02	; 2
    25a0:	91 05       	cpc	r25, r1
    25a2:	18 f0       	brcs	.+6      	; 0x25aa <ReadInductance+0x126>
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    25a4:	3f 5f       	subi	r19, 0xFF	; 255
    25a6:	34 31       	cpi	r19, 0x14	; 20
    25a8:	59 f7       	brne	.-42     	; 0x2580 <ReadInductance+0xfc>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
        // setup Analog Comparator
        ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    25aa:	80 e4       	ldi	r24, 0x40	; 64
    25ac:	80 93 7b 00 	sts	0x007B, r24
        ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    25b0:	94 e5       	ldi	r25, 0x54	; 84
    25b2:	90 bf       	out	0x30, r25	; 48
        ADMUX = (1<<REFS0) | LowPin;			// switch Mux to Low-Pin
    25b4:	86 2d       	mov	r24, r6
    25b6:	80 64       	ori	r24, 0x40	; 64
    25b8:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    25bc:	a6 e1       	ldi	r26, 0x16	; 22
    25be:	a0 93 7a 00 	sts	0x007A, r26
   
      // setup Counter1
        timeconstant.w[1] = 0;		// set ov counter to 0
    25c2:	00 e0       	ldi	r16, 0x00	; 0
    25c4:	10 e0       	ldi	r17, 0x00	; 0
        TCCR1A = 0;			// set Counter1 to normal Mode
    25c6:	10 92 80 00 	sts	0x0080, r1
        TCNT1 = 0;			//set Counter to 0
    25ca:	10 92 85 00 	sts	0x0085, r1
    25ce:	10 92 84 00 	sts	0x0084, r1
        TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// reset TIFR or TIFR1
    25d2:	b7 e2       	ldi	r27, 0x27	; 39
    25d4:	b6 bb       	out	0x16, r27	; 22
        HiADC |= TXD_VAL;
    25d6:	28 60       	ori	r18, 0x08	; 8
        wait200us();			// wait for bandgap to start up
    25d8:	2e 8b       	std	Y+22, r18	; 0x16
    25da:	0e 94 55 0e 	call	0x1caa	; 0x1caa <wait200us>
        if ((count & 0x01) == 0 ) {
    25de:	8b 2d       	mov	r24, r11
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	9a 8b       	std	Y+18, r25	; 0x12
    25e4:	89 8b       	std	Y+17, r24	; 0x11
    25e6:	81 70       	andi	r24, 0x01	; 1
    25e8:	90 70       	andi	r25, 0x00	; 0
    25ea:	9c 8b       	std	Y+20, r25	; 0x14
    25ec:	8b 8b       	std	Y+19, r24	; 0x13
    25ee:	2e 89       	ldd	r18, Y+22	; 0x16
    25f0:	99 89       	ldd	r25, Y+17	; 0x11
    25f2:	90 fd       	sbrc	r25, 0
    25f4:	05 c0       	rjmp	.+10     	; 0x2600 <ReadInductance+0x17c>
           //first start counter, then start current
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    25f6:	a1 e8       	ldi	r26, 0x81	; 129
    25f8:	a0 93 81 00 	sts	0x0081, r26
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    25fc:	28 b9       	out	0x08, r18	; 8
    25fe:	08 c0       	rjmp	.+16     	; 0x2610 <ReadInductance+0x18c>
        } else {
           //first start current, then start counter with delay
           //parasitic capacity of coil can cause high current at the beginning
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    2600:	28 b9       	out	0x08, r18	; 8
      #if F_CPU >= 8000000UL
           wait3us();		// ignore current peak from capacity
    2602:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <wait3us>
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
    2606:	b0 e2       	ldi	r27, 0x20	; 32
    2608:	b6 bb       	out	0x16, r27	; 22
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    260a:	21 e8       	ldi	r18, 0x81	; 129
    260c:	20 93 81 00 	sts	0x0081, r18
    2610:	c8 01       	movw	r24, r16
        }
      
      //******************************
        while(1) {
           // Wait, until  Input Capture is set
           ii = TI1_INT_FLAGS;		//read Timer flags
    2612:	46 b3       	in	r20, 0x16	; 22
           if (ii & (1<<ICF1))  {
    2614:	45 ff       	sbrs	r20, 5
    2616:	02 c0       	rjmp	.+4      	; 0x261c <ReadInductance+0x198>
    2618:	8c 01       	movw	r16, r24
    261a:	0b c0       	rjmp	.+22     	; 0x2632 <ReadInductance+0x1ae>
              break;
           }
           if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    261c:	40 ff       	sbrs	r20, 0
    261e:	f9 cf       	rjmp	.-14     	; 0x2612 <ReadInductance+0x18e>
              TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    2620:	a1 e0       	ldi	r26, 0x01	; 1
    2622:	a6 bb       	out	0x16, r26	; 22
              wdt_reset();
    2624:	a8 95       	wdr
    2626:	01 96       	adiw	r24, 0x01	; 1
              timeconstant.w[1]++;		// count one OV
              if(timeconstant.w[1] == (F_CPU/100000UL)) {
    2628:	80 35       	cpi	r24, 0x50	; 80
    262a:	91 05       	cpc	r25, r1
    262c:	91 f7       	brne	.-28     	; 0x2612 <ReadInductance+0x18e>
    262e:	00 e5       	ldi	r16, 0x50	; 80
    2630:	10 e0       	ldi	r17, 0x00	; 0
                 break; 	//Timeout for Charging, above 0.13 s
              }
           }
        }
        TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    2632:	10 92 81 00 	sts	0x0081, r1
        TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    2636:	b0 e2       	ldi	r27, 0x20	; 32
    2638:	b6 bb       	out	0x16, r27	; 22
        timeconstant.w[0] = ICR1;		// get previous Input Capture Counter flag
    263a:	20 91 86 00 	lds	r18, 0x0086
    263e:	30 91 87 00 	lds	r19, 0x0087
    2642:	79 01       	movw	r14, r18
      // check actual counter, if an additional overflow must be added
        if((TCNT1 > timeconstant.w[0]) && (ii & (1<<TOV1))) {
    2644:	80 91 84 00 	lds	r24, 0x0084
    2648:	90 91 85 00 	lds	r25, 0x0085
    264c:	28 17       	cp	r18, r24
    264e:	39 07       	cpc	r19, r25
    2650:	30 f4       	brcc	.+12     	; 0x265e <ReadInductance+0x1da>
    2652:	40 ff       	sbrs	r20, 0
    2654:	04 c0       	rjmp	.+8      	; 0x265e <ReadInductance+0x1da>
           // this OV was not counted, but was before the Input Capture
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    2656:	21 e0       	ldi	r18, 0x01	; 1
    2658:	26 bb       	out	0x16, r18	; 22
           timeconstant.w[1]++;			// count one additional OV
    265a:	0f 5f       	subi	r16, 0xFF	; 255
    265c:	1f 4f       	sbci	r17, 0xFF	; 255
        }

        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    265e:	a8 b8       	out	0x08, r10	; 8
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    2660:	86 e9       	ldi	r24, 0x96	; 150
    2662:	80 93 7a 00 	sts	0x007A, r24
        for (ii=0;ii<20;ii++) {
    2666:	20 e0       	ldi	r18, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    2668:	86 2d       	mov	r24, r6
    266a:	2e 8b       	std	Y+22, r18	; 0x16
    266c:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <W10msReadADC>
    2670:	4c 01       	movw	r8, r24
            total_r =  ReadADC(HighPin);
    2672:	82 2d       	mov	r24, r2
    2674:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
    2678:	ac 01       	movw	r20, r24
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    267a:	2e 89       	ldd	r18, Y+22	; 0x16
    267c:	92 e0       	ldi	r25, 0x02	; 2
    267e:	89 16       	cp	r8, r25
    2680:	91 04       	cpc	r9, r1
    2682:	18 f4       	brcc	.+6      	; 0x268a <ReadInductance+0x206>
    2684:	42 30       	cpi	r20, 0x02	; 2
    2686:	51 05       	cpc	r21, r1
    2688:	18 f0       	brcs	.+6      	; 0x2690 <ReadInductance+0x20c>
           timeconstant.w[1]++;			// count one additional OV
        }

        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
        for (ii=0;ii<20;ii++) {
    268a:	2f 5f       	subi	r18, 0xFF	; 255
    268c:	24 31       	cpi	r18, 0x14	; 20
    268e:	61 f7       	brne	.-40     	; 0x2668 <ReadInductance+0x1e4>
//  #undef CNT_ZERO_42
//  #undef CNT_ZERO_720
//  #define CNT_ZERO_42 7
//  #define CNT_ZERO_720 10
//#endif
        total_r = (mess_r + resis[0].rx + RRpinMI);
    2690:	20 91 1b 01 	lds	r18, 0x011B
    2694:	30 91 1c 01 	lds	r19, 0x011C
    2698:	80 91 3f 01 	lds	r24, 0x013F
    269c:	90 91 40 01 	lds	r25, 0x0140
    26a0:	28 0f       	add	r18, r24
    26a2:	39 1f       	adc	r19, r25
    26a4:	2c 0d       	add	r18, r12
    26a6:	3d 1d       	adc	r19, r13
        tmpint = (ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset))) ;
     #else
        tmpint = (ref_mv + REF_C_KORR);
     #endif
#endif
        tmpint = ref_mv_offs;
    26a8:	e0 91 05 01 	lds	r30, 0x0105
    26ac:	f0 91 06 01 	lds	r31, 0x0106
        if (mess_r < R_L_VAL) {
    26b0:	a0 e9       	ldi	r26, 0x90	; 144
    26b2:	ca 16       	cp	r12, r26
    26b4:	aa e1       	ldi	r26, 0x1A	; 26
    26b6:	da 06       	cpc	r13, r26
    26b8:	c0 f4       	brcc	.+48     	; 0x26ea <ReadInductance+0x266>
           // measurement without 680 Ohm
           cnt_diff = CNT_ZERO_42;
           if (timeconstant.dw < 225) {
    26ba:	b1 ee       	ldi	r27, 0xE1	; 225
    26bc:	eb 16       	cp	r14, r27
    26be:	f1 04       	cpc	r15, r1
    26c0:	01 05       	cpc	r16, r1
    26c2:	11 05       	cpc	r17, r1
    26c4:	38 f4       	brcc	.+14     	; 0x26d4 <ReadInductance+0x250>
              ukorr = (timeconstant.w[0] / 5) - 20;
    26c6:	c7 01       	movw	r24, r14
    26c8:	65 e0       	ldi	r22, 0x05	; 5
    26ca:	70 e0       	ldi	r23, 0x00	; 0
    26cc:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__udivmodhi4>
    26d0:	64 51       	subi	r22, 0x14	; 20
    26d2:	01 c0       	rjmp	.+2      	; 0x26d6 <ReadInductance+0x252>
           } else {
              ukorr = 25;
    26d4:	69 e1       	ldi	r22, 0x19	; 25
           }
           tmpint -= (((REF_L_KORR * 10) / 10) + ukorr);
    26d6:	af 01       	movw	r20, r30
    26d8:	48 52       	subi	r20, 0x28	; 40
    26da:	50 40       	sbci	r21, 0x00	; 0
    26dc:	77 27       	eor	r23, r23
    26de:	67 fd       	sbrc	r22, 7
    26e0:	70 95       	com	r23
    26e2:	46 1b       	sub	r20, r22
    26e4:	57 0b       	sbc	r21, r23
     #endif
#endif
        tmpint = ref_mv_offs;
        if (mess_r < R_L_VAL) {
           // measurement without 680 Ohm
           cnt_diff = CNT_ZERO_42;
    26e6:	66 e0       	ldi	r22, 0x06	; 6
    26e8:	09 c0       	rjmp	.+18     	; 0x26fc <ReadInductance+0x278>
//#endif
        total_r = (mess_r + resis[0].rx + RRpinMI);
//        cnt_diff = 0;
//        if (total_r > 7000) cnt_diff = 1;
//        if (total_r > 14000) cnt_diff = 2;
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
    26ea:	c9 01       	movw	r24, r18
    26ec:	60 eb       	ldi	r22, 0xB0	; 176
    26ee:	76 e3       	ldi	r23, 0x36	; 54
    26f0:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__udivmodhi4>
           }
           tmpint -= (((REF_L_KORR * 10) / 10) + ukorr);
        } else {
           // measurement with 680 Ohm resistor
           // if 680 Ohm resistor is used, use REF_L_KORR for correction
           cnt_diff += CNT_ZERO_720;
    26f4:	69 5f       	subi	r22, 0xF9	; 249
           tmpint += REF_L_KORR;
    26f6:	af 01       	movw	r20, r30
    26f8:	48 5d       	subi	r20, 0xD8	; 216
    26fa:	5f 4f       	sbci	r21, 0xFF	; 255
        }
        if (timeconstant.dw > cnt_diff) timeconstant.dw -= cnt_diff;
    26fc:	70 e0       	ldi	r23, 0x00	; 0
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	6e 15       	cp	r22, r14
    2704:	7f 05       	cpc	r23, r15
    2706:	80 07       	cpc	r24, r16
    2708:	91 07       	cpc	r25, r17
    270a:	28 f4       	brcc	.+10     	; 0x2716 <ReadInductance+0x292>
    270c:	e6 1a       	sub	r14, r22
    270e:	f7 0a       	sbc	r15, r23
    2710:	08 0b       	sbc	r16, r24
    2712:	19 0b       	sbc	r17, r25
    2714:	03 c0       	rjmp	.+6      	; 0x271c <ReadInductance+0x298>
        else          timeconstant.dw = 0;
    2716:	ee 24       	eor	r14, r14
    2718:	ff 24       	eor	r15, r15
    271a:	87 01       	movw	r16, r14
       
        if ((count&0x01) == 1) {
    271c:	8b 89       	ldd	r24, Y+19	; 0x13
    271e:	9c 89       	ldd	r25, Y+20	; 0x14
    2720:	00 97       	sbiw	r24, 0x00	; 0
    2722:	41 f0       	breq	.+16     	; 0x2734 <ReadInductance+0x2b0>
           // second pass with delayed counter start
           timeconstant.dw += (3 * (F_CPU/1000000UL))+10;
    2724:	82 e2       	ldi	r24, 0x22	; 34
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	a0 e0       	ldi	r26, 0x00	; 0
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	e8 0e       	add	r14, r24
    272e:	f9 1e       	adc	r15, r25
    2730:	0a 1f       	adc	r16, r26
    2732:	1b 1f       	adc	r17, r27
        }
        if (timeconstant.w[1] >= (F_CPU/100000UL)) timeconstant.dw = 0; // no transition found
    2734:	00 35       	cpi	r16, 0x50	; 80
    2736:	11 05       	cpc	r17, r1
    2738:	18 f0       	brcs	.+6      	; 0x2740 <ReadInductance+0x2bc>
    273a:	ee 24       	eor	r14, r14
    273c:	ff 24       	eor	r15, r15
    273e:	87 01       	movw	r16, r14
        if (timeconstant.dw > 10) {
    2740:	9b e0       	ldi	r25, 0x0B	; 11
    2742:	e9 16       	cp	r14, r25
    2744:	f1 04       	cpc	r15, r1
    2746:	01 05       	cpc	r16, r1
    2748:	11 05       	cpc	r17, r1
    274a:	28 f0       	brcs	.+10     	; 0x2756 <ReadInductance+0x2d2>
           timeconstant.dw -= 1;
    274c:	08 94       	sec
    274e:	e1 08       	sbc	r14, r1
    2750:	f1 08       	sbc	r15, r1
    2752:	01 09       	sbc	r16, r1
    2754:	11 09       	sbc	r17, r1
        }
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    2756:	19 01       	movw	r2, r18
    2758:	44 24       	eor	r4, r4
    275a:	55 24       	eor	r5, r5
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    275c:	ba 01       	movw	r22, r20
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	28 ee       	ldi	r18, 0xE8	; 232
    2764:	33 e0       	ldi	r19, 0x03	; 3
    2766:	40 e0       	ldi	r20, 0x00	; 0
    2768:	50 e0       	ldi	r21, 0x00	; 0
    276a:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
    276e:	3b 01       	movw	r6, r22
    2770:	4c 01       	movw	r8, r24
        if (timeconstant.w[1] >= (F_CPU/100000UL)) timeconstant.dw = 0; // no transition found
        if (timeconstant.dw > 10) {
           timeconstant.dw -= 1;
        }
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    2772:	b6 01       	movw	r22, r12
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	20 91 37 01 	lds	r18, 0x0137
    277c:	30 91 38 01 	lds	r19, 0x0138
    2780:	40 e0       	ldi	r20, 0x00	; 0
    2782:	50 e0       	ldi	r21, 0x00	; 0
    2784:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
    2788:	a2 01       	movw	r20, r4
    278a:	91 01       	movw	r18, r2
    278c:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    2790:	40 e0       	ldi	r20, 0x00	; 0
    2792:	50 e0       	ldi	r21, 0x00	; 0
    2794:	c4 01       	movw	r24, r8
    2796:	b3 01       	movw	r22, r6
    2798:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
//        per_ref2 = (uint8_t)MEM2_read_byte(&LogTab[per_ref1]);	// -log(1 - per_ref1/100)
        per_ref2 = get_log(per_ref1);		// -log(1 - per_ref1/1000)
    279c:	c9 01       	movw	r24, r18
    279e:	0e 94 19 12 	call	0x2432	; 0x2432 <get_log>
    27a2:	6c 01       	movw	r12, r24
          }
#endif
/* ********************************************************* */
        // inductor_lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    27a4:	c2 01       	movw	r24, r4
    27a6:	b1 01       	movw	r22, r2
    27a8:	a8 01       	movw	r20, r16
    27aa:	97 01       	movw	r18, r14
    27ac:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
    27b0:	3b 01       	movw	r6, r22
    27b2:	4c 01       	movw	r8, r24
             wait_about2s();
          }
#endif
/* ********************************************************* */
        // inductor_lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
    27b4:	b6 01       	movw	r22, r12
    27b6:	80 e0       	ldi	r24, 0x00	; 0
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	e3 e0       	ldi	r30, 0x03	; 3
    27bc:	66 0f       	add	r22, r22
    27be:	77 1f       	adc	r23, r23
    27c0:	88 1f       	adc	r24, r24
    27c2:	99 1f       	adc	r25, r25
    27c4:	ea 95       	dec	r30
    27c6:	d1 f7       	brne	.-12     	; 0x27bc <ReadInductance+0x338>
    27c8:	6b 5f       	subi	r22, 0xFB	; 251
    27ca:	7f 4f       	sbci	r23, 0xFF	; 255
    27cc:	8f 4f       	sbci	r24, 0xFF	; 255
    27ce:	9f 4f       	sbci	r25, 0xFF	; 255
    27d0:	2a e0       	ldi	r18, 0x0A	; 10
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	40 e0       	ldi	r20, 0x00	; 0
    27d6:	50 e0       	ldi	r21, 0x00	; 0
    27d8:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    27dc:	40 e0       	ldi	r20, 0x00	; 0
    27de:	50 e0       	ldi	r21, 0x00	; 0
    27e0:	c4 01       	movw	r24, r8
    27e2:	b3 01       	movw	r22, r6
    27e4:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
    27e8:	e9 89       	ldd	r30, Y+17	; 0x11
    27ea:	fa 89       	ldd	r31, Y+18	; 0x12
    27ec:	ee 0f       	add	r30, r30
    27ee:	ff 1f       	adc	r31, r31
    27f0:	ee 0f       	add	r30, r30
    27f2:	ff 1f       	adc	r31, r31
    27f4:	a1 e0       	ldi	r26, 0x01	; 1
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	ac 0f       	add	r26, r28
    27fa:	bd 1f       	adc	r27, r29
    27fc:	ea 0f       	add	r30, r26
    27fe:	fb 1f       	adc	r31, r27
    2800:	20 83       	st	Z, r18
    2802:	31 83       	std	Z+1, r19	; 0x01
    2804:	42 83       	std	Z+2, r20	; 0x02
    2806:	53 83       	std	Z+3, r21	; 0x03
        if (((count&0x01) == 0) && (timeconstant.dw > ((F_CPU/1000000UL)+3))) {
    2808:	8b 89       	ldd	r24, Y+19	; 0x13
    280a:	9c 89       	ldd	r25, Y+20	; 0x14
    280c:	00 97       	sbiw	r24, 0x00	; 0
    280e:	a1 f4       	brne	.+40     	; 0x2838 <ReadInductance+0x3b4>
    2810:	9c e0       	ldi	r25, 0x0C	; 12
    2812:	e9 16       	cp	r14, r25
    2814:	f1 04       	cpc	r15, r1
    2816:	01 05       	cpc	r16, r1
    2818:	11 05       	cpc	r17, r1
    281a:	70 f0       	brcs	.+28     	; 0x2838 <ReadInductance+0x3b4>
           // transition is found, measurement with delayed counter start is not necessary
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
    281c:	e9 89       	ldd	r30, Y+17	; 0x11
    281e:	fa 89       	ldd	r31, Y+18	; 0x12
    2820:	31 96       	adiw	r30, 0x01	; 1
    2822:	ee 0f       	add	r30, r30
    2824:	ff 1f       	adc	r31, r31
    2826:	ee 0f       	add	r30, r30
    2828:	ff 1f       	adc	r31, r31
    282a:	ea 0f       	add	r30, r26
    282c:	fb 1f       	adc	r31, r27
    282e:	20 83       	st	Z, r18
    2830:	31 83       	std	Z+1, r19	; 0x01
    2832:	42 83       	std	Z+2, r20	; 0x02
    2834:	53 83       	std	Z+3, r21	; 0x03
           count++;		// skip the delayed measurement
    2836:	b3 94       	inc	r11
        }
        wdt_reset();
    2838:	a8 95       	wdr
     return;	// do not search for inductance, more than 1 resistor
  }
     if (resis[0].rx > 21000) return;

     // we can check for Inductance, if resistance is below 2100 Ohm
     for (count=0;count<4;count++) {
    283a:	b3 94       	inc	r11
    283c:	ab 2d       	mov	r26, r11
    283e:	a4 30       	cpi	r26, 0x04	; 4
    2840:	08 f4       	brcc	.+2      	; 0x2844 <ReadInductance+0x3c0>
    2842:	5a ce       	rjmp	.-844    	; 0x24f8 <ReadInductance+0x74>
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
           count++;		// skip the delayed measurement
        }
        wdt_reset();
     }  //end for count
     ADC_PORT = TXD_VAL;		// switch ADC Port to GND
    2844:	88 e0       	ldi	r24, 0x08	; 8
    2846:	88 b9       	out	0x08, r24	; 8
     wait_about20ms();
    2848:	84 e0       	ldi	r24, 0x04	; 4
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	0e 94 ba 01 	call	0x374	; 0x374 <sleep_5ms>
        inductor_.lx = inductance[0];
     }
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];		// other polarity, delayed start
     if (inductance[2] < inductor_lx) inductor_lx = inductance[2];	// use the other polarity
#else
     nr_pol1 = 0;
    2850:	61 e0       	ldi	r22, 0x01	; 1
    2852:	2d 81       	ldd	r18, Y+5	; 0x05
    2854:	3e 81       	ldd	r19, Y+6	; 0x06
    2856:	4f 81       	ldd	r20, Y+7	; 0x07
    2858:	58 85       	ldd	r21, Y+8	; 0x08
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	9a 81       	ldd	r25, Y+2	; 0x02
    285e:	ab 81       	ldd	r26, Y+3	; 0x03
    2860:	bc 81       	ldd	r27, Y+4	; 0x04
    2862:	82 17       	cp	r24, r18
    2864:	93 07       	cpc	r25, r19
    2866:	a4 07       	cpc	r26, r20
    2868:	b5 07       	cpc	r27, r21
    286a:	08 f0       	brcs	.+2      	; 0x286e <ReadInductance+0x3ea>
    286c:	60 e0       	ldi	r22, 0x00	; 0
     if (inductance[1] > inductance[0]) { nr_pol1 = 1; } 
     nr_pol2 = 2;
     if (inductance[3] > inductance[2]) { nr_pol2 = 3; } 
    286e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2870:	3e 85       	ldd	r19, Y+14	; 0x0e
    2872:	4f 85       	ldd	r20, Y+15	; 0x0f
    2874:	58 89       	ldd	r21, Y+16	; 0x10
    2876:	89 85       	ldd	r24, Y+9	; 0x09
    2878:	9a 85       	ldd	r25, Y+10	; 0x0a
    287a:	ab 85       	ldd	r26, Y+11	; 0x0b
    287c:	bc 85       	ldd	r27, Y+12	; 0x0c
    287e:	82 17       	cp	r24, r18
    2880:	93 07       	cpc	r25, r19
    2882:	a4 07       	cpc	r26, r20
    2884:	b5 07       	cpc	r27, r21
    2886:	10 f0       	brcs	.+4      	; 0x288c <ReadInductance+0x408>
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];		// other polarity, delayed start
     if (inductance[2] < inductor_lx) inductor_lx = inductance[2];	// use the other polarity
#else
     nr_pol1 = 0;
     if (inductance[1] > inductance[0]) { nr_pol1 = 1; } 
     nr_pol2 = 2;
    2888:	72 e0       	ldi	r23, 0x02	; 2
    288a:	01 c0       	rjmp	.+2      	; 0x288e <ReadInductance+0x40a>
     if (inductance[3] > inductance[2]) { nr_pol2 = 3; } 
    288c:	73 e0       	ldi	r23, 0x03	; 3
     if (inductance[nr_pol2] < inductance[nr_pol1]) nr_pol1 = nr_pol2;
    288e:	a7 2f       	mov	r26, r23
    2890:	b0 e0       	ldi	r27, 0x00	; 0
    2892:	aa 0f       	add	r26, r26
    2894:	bb 1f       	adc	r27, r27
    2896:	aa 0f       	add	r26, r26
    2898:	bb 1f       	adc	r27, r27
    289a:	ce 01       	movw	r24, r28
    289c:	01 96       	adiw	r24, 0x01	; 1
    289e:	a8 0f       	add	r26, r24
    28a0:	b9 1f       	adc	r27, r25
    28a2:	e6 2f       	mov	r30, r22
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	ee 0f       	add	r30, r30
    28a8:	ff 1f       	adc	r31, r31
    28aa:	ee 0f       	add	r30, r30
    28ac:	ff 1f       	adc	r31, r31
    28ae:	e8 0f       	add	r30, r24
    28b0:	f9 1f       	adc	r31, r25
    28b2:	2d 91       	ld	r18, X+
    28b4:	3d 91       	ld	r19, X+
    28b6:	4d 91       	ld	r20, X+
    28b8:	5c 91       	ld	r21, X
    28ba:	80 81       	ld	r24, Z
    28bc:	91 81       	ldd	r25, Z+1	; 0x01
    28be:	a2 81       	ldd	r26, Z+2	; 0x02
    28c0:	b3 81       	ldd	r27, Z+3	; 0x03
    28c2:	28 17       	cp	r18, r24
    28c4:	39 07       	cpc	r19, r25
    28c6:	4a 07       	cpc	r20, r26
    28c8:	5b 07       	cpc	r21, r27
    28ca:	08 f4       	brcc	.+2      	; 0x28ce <ReadInductance+0x44a>
    28cc:	67 2f       	mov	r22, r23
     inductor_lx = inductance[nr_pol1];
    28ce:	26 2f       	mov	r18, r22
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	f9 01       	movw	r30, r18
    28d4:	ee 0f       	add	r30, r30
    28d6:	ff 1f       	adc	r31, r31
    28d8:	ee 0f       	add	r30, r30
    28da:	ff 1f       	adc	r31, r31
    28dc:	ec 0f       	add	r30, r28
    28de:	fd 1f       	adc	r31, r29
    28e0:	61 81       	ldd	r22, Z+1	; 0x01
    28e2:	72 81       	ldd	r23, Z+2	; 0x02
    28e4:	83 81       	ldd	r24, Z+3	; 0x03
    28e6:	94 81       	ldd	r25, Z+4	; 0x04
    28e8:	60 93 9a 01 	sts	0x019A, r22
    28ec:	70 93 9b 01 	sts	0x019B, r23
    28f0:	80 93 9c 01 	sts	0x019C, r24
    28f4:	90 93 9d 01 	sts	0x019D, r25
     inductor_lpre = -5;	// 10 uH units
    28f8:	4b ef       	ldi	r20, 0xFB	; 251
    28fa:	40 93 0d 01 	sts	0x010D, r20
     if (((nr_pol1 & 1) == 1) || (resis[0].rx >= 240)) {
    28fe:	20 fd       	sbrc	r18, 0
    2900:	0d c0       	rjmp	.+26     	; 0x291c <ReadInductance+0x498>
    2902:	20 91 1b 01 	lds	r18, 0x011B
    2906:	30 91 1c 01 	lds	r19, 0x011C
    290a:	40 91 1d 01 	lds	r20, 0x011D
    290e:	50 91 1e 01 	lds	r21, 0x011E
    2912:	20 3f       	cpi	r18, 0xF0	; 240
    2914:	31 05       	cpc	r19, r1
    2916:	41 05       	cpc	r20, r1
    2918:	51 05       	cpc	r21, r1
    291a:	a8 f0       	brcs	.+42     	; 0x2946 <ReadInductance+0x4c2>
        // with 680 Ohm resistor total_r is more than 7460
        inductor_lpre = -4;	// 100 uH units
    291c:	2c ef       	ldi	r18, 0xFC	; 252
    291e:	20 93 0d 01 	sts	0x010D, r18
        inductor_lx = (inductor_lx + 5) / 10;
    2922:	6b 5f       	subi	r22, 0xFB	; 251
    2924:	7f 4f       	sbci	r23, 0xFF	; 255
    2926:	8f 4f       	sbci	r24, 0xFF	; 255
    2928:	9f 4f       	sbci	r25, 0xFF	; 255
    292a:	2a e0       	ldi	r18, 0x0A	; 10
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	40 e0       	ldi	r20, 0x00	; 0
    2930:	50 e0       	ldi	r21, 0x00	; 0
    2932:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
    2936:	20 93 9a 01 	sts	0x019A, r18
    293a:	30 93 9b 01 	sts	0x019B, r19
    293e:	40 93 9c 01 	sts	0x019C, r20
    2942:	50 93 9d 01 	sts	0x019D, r21
     } 
     if (inductor_lx == 0) inductor_lpre = 0;	//mark as zero
    2946:	80 91 9a 01 	lds	r24, 0x019A
    294a:	90 91 9b 01 	lds	r25, 0x019B
    294e:	a0 91 9c 01 	lds	r26, 0x019C
    2952:	b0 91 9d 01 	lds	r27, 0x019D
    2956:	00 97       	sbiw	r24, 0x00	; 0
    2958:	a1 05       	cpc	r26, r1
    295a:	b1 05       	cpc	r27, r1
    295c:	11 f4       	brne	.+4      	; 0x2962 <ReadInductance+0x4de>
    295e:	10 92 0d 01 	sts	0x010D, r1
#endif

  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    2962:	88 e0       	ldi	r24, 0x08	; 8
    2964:	87 b9       	out	0x07, r24	; 7
  R_DDR = 0;			// switch all resistor ports to input
    2966:	14 b8       	out	0x04, r1	; 4
#endif
  return;
 } // end ReadInductance()
    2968:	66 96       	adiw	r28, 0x16	; 22
    296a:	0f b6       	in	r0, 0x3f	; 63
    296c:	f8 94       	cli
    296e:	de bf       	out	0x3e, r29	; 62
    2970:	0f be       	out	0x3f, r0	; 63
    2972:	cd bf       	out	0x3d, r28	; 61
    2974:	cf 91       	pop	r28
    2976:	df 91       	pop	r29
    2978:	1f 91       	pop	r17
    297a:	0f 91       	pop	r16
    297c:	ff 90       	pop	r15
    297e:	ef 90       	pop	r14
    2980:	df 90       	pop	r13
    2982:	cf 90       	pop	r12
    2984:	bf 90       	pop	r11
    2986:	af 90       	pop	r10
    2988:	9f 90       	pop	r9
    298a:	8f 90       	pop	r8
    298c:	7f 90       	pop	r7
    298e:	6f 90       	pop	r6
    2990:	5f 90       	pop	r5
    2992:	4f 90       	pop	r4
    2994:	3f 90       	pop	r3
    2996:	2f 90       	pop	r2
    2998:	08 95       	ret

0000299a <W20msReadADC>:
    299a:	8f 93       	push	r24
    299c:	84 e0       	ldi	r24, 0x04	; 4
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	0e 94 ba 01 	call	0x374	; 0x374 <sleep_5ms>
    29a4:	0b c0       	rjmp	.+22     	; 0x29bc <to_read>

000029a6 <W10msReadADC>:
    29a6:	8f 93       	push	r24
    29a8:	82 e0       	ldi	r24, 0x02	; 2
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	0e 94 ba 01 	call	0x374	; 0x374 <sleep_5ms>
    29b0:	05 c0       	rjmp	.+10     	; 0x29bc <to_read>

000029b2 <W5msReadADC>:
    29b2:	8f 93       	push	r24
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	0e 94 ba 01 	call	0x374	; 0x374 <sleep_5ms>

000029bc <to_read>:
    29bc:	8f 91       	pop	r24

000029be <ReadADC>:
    29be:	1f 93       	push	r17
    29c0:	18 2f       	mov	r17, r24
    29c2:	10 64       	ori	r17, 0x40	; 64

000029c4 <get_sample>:
    29c4:	10 93 7c 00 	sts	0x007C, r17
    29c8:	e1 2f       	mov	r30, r17
    29ca:	e0 78       	andi	r30, 0x80	; 128
    29cc:	80 91 34 01 	lds	r24, 0x0134
    29d0:	e8 17       	cp	r30, r24
    29d2:	61 f0       	breq	.+24     	; 0x29ec <r2aa2>
    29d4:	0e 94 56 0e 	call	0x1cac	; 0x1cac <wait100us>
    29d8:	8e e9       	ldi	r24, 0x9E	; 158
    29da:	80 93 7a 00 	sts	0x007A, r24
    29de:	83 e0       	ldi	r24, 0x03	; 3
    29e0:	83 bf       	out	0x33, r24	; 51
    29e2:	88 95       	sleep
    29e4:	82 e0       	ldi	r24, 0x02	; 2
    29e6:	83 bf       	out	0x33, r24	; 51
    29e8:	e0 93 34 01 	sts	0x0134, r30

000029ec <r2aa2>:
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	a9 01       	movw	r20, r18
    29f2:	e0 e0       	ldi	r30, 0x00	; 0
    29f4:	1f c0       	rjmp	.+62     	; 0x2a34 <r2ae8>

000029f6 <Loop>:
    29f6:	8e e9       	ldi	r24, 0x9E	; 158
    29f8:	80 93 7a 00 	sts	0x007A, r24
    29fc:	83 e0       	ldi	r24, 0x03	; 3
    29fe:	83 bf       	out	0x33, r24	; 51
    2a00:	88 95       	sleep
    2a02:	82 e0       	ldi	r24, 0x02	; 2
    2a04:	83 bf       	out	0x33, r24	; 51
    2a06:	60 91 78 00 	lds	r22, 0x0078
    2a0a:	70 91 79 00 	lds	r23, 0x0079
    2a0e:	26 0f       	add	r18, r22
    2a10:	37 1f       	adc	r19, r23
    2a12:	41 1d       	adc	r20, r1
    2a14:	51 1d       	adc	r21, r1
    2a16:	e4 30       	cpi	r30, 0x04	; 4
    2a18:	61 f4       	brne	.+24     	; 0x2a32 <r2ae6>
    2a1a:	80 91 36 01 	lds	r24, 0x0136
    2a1e:	80 30       	cpi	r24, 0x00	; 0
    2a20:	41 f0       	breq	.+16     	; 0x2a32 <r2ae6>
    2a22:	84 e0       	ldi	r24, 0x04	; 4
    2a24:	20 30       	cpi	r18, 0x00	; 0
    2a26:	38 07       	cpc	r19, r24
    2a28:	20 f4       	brcc	.+8      	; 0x2a32 <r2ae6>
    2a2a:	17 fd       	sbrc	r17, 7
    2a2c:	02 c0       	rjmp	.+4      	; 0x2a32 <r2ae6>
    2a2e:	10 68       	ori	r17, 0x80	; 128
    2a30:	c9 cf       	rjmp	.-110    	; 0x29c4 <get_sample>

00002a32 <r2ae6>:
    2a32:	ef 5f       	subi	r30, 0xFF	; 255

00002a34 <r2ae8>:
    2a34:	80 91 33 01 	lds	r24, 0x0133
    2a38:	e8 17       	cp	r30, r24
    2a3a:	e8 f2       	brcs	.-70     	; 0x29f6 <Loop>
    2a3c:	17 ff       	sbrs	r17, 7
    2a3e:	05 c0       	rjmp	.+10     	; 0x2a4a <r2afe>
    2a40:	60 91 35 01 	lds	r22, 0x0135
    2a44:	70 91 36 01 	lds	r23, 0x0136
    2a48:	04 c0       	rjmp	.+8      	; 0x2a52 <r2b02>

00002a4a <r2afe>:
    2a4a:	60 91 37 01 	lds	r22, 0x0137
    2a4e:	70 91 38 01 	lds	r23, 0x0138

00002a52 <r2b02>:
    2a52:	80 e0       	ldi	r24, 0x00	; 0
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
    2a5a:	2f ef       	ldi	r18, 0xFF	; 255
    2a5c:	33 e0       	ldi	r19, 0x03	; 3
    2a5e:	40 e0       	ldi	r20, 0x00	; 0
    2a60:	50 e0       	ldi	r21, 0x00	; 0
    2a62:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
    2a66:	b9 01       	movw	r22, r18
    2a68:	ca 01       	movw	r24, r20
    2a6a:	20 91 33 01 	lds	r18, 0x0133
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	40 e0       	ldi	r20, 0x00	; 0
    2a72:	50 e0       	ldi	r21, 0x00	; 0
    2a74:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
    2a78:	c9 01       	movw	r24, r18
    2a7a:	1f 91       	pop	r17
    2a7c:	08 95       	ret

00002a7e <CheckPins>:
#include <stdlib.h>
#include "Transistortester.h"

//******************************************************************
void CheckPins(uint8_t HighPin, uint8_t LowPin, uint8_t TristatePin)
  {
    2a7e:	2f 92       	push	r2
    2a80:	3f 92       	push	r3
    2a82:	4f 92       	push	r4
    2a84:	5f 92       	push	r5
    2a86:	6f 92       	push	r6
    2a88:	7f 92       	push	r7
    2a8a:	8f 92       	push	r8
    2a8c:	9f 92       	push	r9
    2a8e:	af 92       	push	r10
    2a90:	bf 92       	push	r11
    2a92:	cf 92       	push	r12
    2a94:	df 92       	push	r13
    2a96:	ef 92       	push	r14
    2a98:	ff 92       	push	r15
    2a9a:	0f 93       	push	r16
    2a9c:	1f 93       	push	r17
    2a9e:	df 93       	push	r29
    2aa0:	cf 93       	push	r28
    2aa2:	cd b7       	in	r28, 0x3d	; 61
    2aa4:	de b7       	in	r29, 0x3e	; 62
    2aa6:	28 97       	sbiw	r28, 0x08	; 8
    2aa8:	0f b6       	in	r0, 0x3f	; 63
    2aaa:	f8 94       	cli
    2aac:	de bf       	out	0x3e, r29	; 62
    2aae:	0f be       	out	0x3f, r0	; 63
    2ab0:	cd bf       	out	0x3d, r28	; 61
    2ab2:	18 2f       	mov	r17, r24
    2ab4:	06 2f       	mov	r16, r22
    2ab6:	49 83       	std	Y+1, r20	; 0x01
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
    2ab8:	a8 95       	wdr
//  #define RR680MI resis680mi
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = pgm_read_byte(&PinRLtab[LowPin]);		// instruction for LowPin R_L
    2aba:	86 2f       	mov	r24, r22
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	fc 01       	movw	r30, r24
    2ac0:	ec 50       	subi	r30, 0x0C	; 12
    2ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac4:	74 90       	lpm	r7, Z+
#if FLASHEND > 0x3fff
  LoPinRH = pgm_read_byte(&PinRHtab[LowPin]);		// instruction for LowPin R_H
#else
  LoPinRH = LoPinRL + LoPinRL;				// instruction for LowPin R_H
#endif
  TriPinRL = pgm_read_byte(&PinRLtab[TristatePin]);	// instruction for TristatePin R_L
    2ac6:	e4 2f       	mov	r30, r20
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	ec 50       	subi	r30, 0x0C	; 12
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	a4 90       	lpm	r10, Z+
#if FLASHEND > 0x3fff
  TriPinRH = pgm_read_byte(&PinRHtab[TristatePin]);	// instruction for TristatePin R_H
#else
  TriPinRH = TriPinRL + TriPinRL;			// instruction for TristatePin R_H
#endif
  HiPinRL = pgm_read_byte(&PinRLtab[HighPin]);		// instruction for HighPin R_L
    2ad0:	21 2f       	mov	r18, r17
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	f9 01       	movw	r30, r18
    2ad6:	ec 50       	subi	r30, 0x0C	; 12
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	e4 90       	lpm	r14, Z+
  HiPinRH = pgm_read_byte(&PinRHtab[HighPin]);		// instruction for HighPin R_H
#else
  HiPinRH = HiPinRL + HiPinRL;				// instruction for HighPin R_H
#endif

  HiADCp = pgm_read_byte(&PinADCtab[HighPin]);		// instruction for ADC High-Pin 
    2adc:	29 50       	subi	r18, 0x09	; 9
    2ade:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae0:	f9 01       	movw	r30, r18
    2ae2:	f4 90       	lpm	r15, Z+
  LoADCp = pgm_read_byte(&PinADCtab[LowPin]);		// instruction for ADC Low-Pin
    2ae4:	89 50       	subi	r24, 0x09	; 9
    2ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae8:	fc 01       	movw	r30, r24
    2aea:	b4 90       	lpm	r11, Z+
  HiADCm = HiADCp | TXD_MSK;
    2aec:	f8 e0       	ldi	r31, 0x08	; 8
    2aee:	ff 2a       	or	r15, r31
  HiADCp |= TXD_VAL;
  LoADCm = LoADCp | TXD_MSK;
    2af0:	bf 2a       	or	r11, r31
  LoADCp |= TXD_VAL;

  //setting of Pins 
  R_PORT = 0;				//resistor-Port outputs to 0
    2af2:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//Low-Pin to output and across R_L to GND
    2af4:	74 b8       	out	0x04, r7	; 4
  ADC_DDR = HiADCm;		//High-Pin to output
    2af6:	f7 b8       	out	0x07, r15	; 7
  ADC_PORT = HiADCp;		//High-Pin fix to Vcc
    2af8:	f8 b8       	out	0x08, r15	; 8
  //for some MOSFET the gate (TristatePin) must be discharged
  R_DDR = LoPinRL | TriPinRL;
    2afa:	6a 2c       	mov	r6, r10
    2afc:	67 28       	or	r6, r7
    2afe:	64 b8       	out	0x04, r6	; 4
  adc.vCEs = W5msReadADC(LowPin);	// lp1 is the voltage at 680 Ohm with - Gate
    2b00:	86 2f       	mov	r24, r22
    2b02:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    2b06:	2c 01       	movw	r4, r24
  R_DDR = LoPinRL;	
    2b08:	74 b8       	out	0x04, r7	; 4
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin  , without Gate current (-)
    2b0a:	80 2f       	mov	r24, r16
    2b0c:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    2b10:	6c 01       	movw	r12, r24
  R_DDR = 0;
    2b12:	14 b8       	out	0x04, r1	; 4
  wait5ms();				// release all current (clear TRIAC and Thyristor)
    2b14:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <wait5ms>
  R_PORT = TriPinRL;
    2b18:	a5 b8       	out	0x05, r10	; 5
  R_DDR = LoPinRL | TriPinRL;		// start current again
    2b1a:	64 b8       	out	0x04, r6	; 4
  adc.lp2 = W5msReadADC(LowPin);	// lp2 is the voltage at 680 Ohm with + Gate
    2b1c:	80 2f       	mov	r24, r16
    2b1e:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    2b22:	4c 01       	movw	r8, r24
  R_DDR = LoPinRL;
    2b24:	74 b8       	out	0x04, r7	; 4
  R_PORT = 0;
    2b26:	15 b8       	out	0x05, r1	; 5
  if (adc.lp2 < adc.vCEs) {
    2b28:	84 15       	cp	r24, r4
    2b2a:	95 05       	cpc	r25, r5
    2b2c:	68 f4       	brcc	.+26     	; 0x2b48 <CheckPins+0xca>
     adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin again, without Gate current (+)
    2b2e:	80 2f       	mov	r24, r16
    2b30:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    2b34:	6c 01       	movw	r12, r24
     if ((adc.lp2+288) > adc.vCEs) goto checkDiode;	// no significant change
    2b36:	c4 01       	movw	r24, r8
    2b38:	80 5e       	subi	r24, 0xE0	; 224
    2b3a:	9e 4f       	sbci	r25, 0xFE	; 254
    2b3c:	48 16       	cp	r4, r24
    2b3e:	59 06       	cpc	r5, r25
    2b40:	08 f4       	brcc	.+2      	; 0x2b44 <CheckPins+0xc6>
    2b42:	d2 c2       	rjmp	.+1444   	; 0x30e8 <CheckPins+0x66a>
    2b44:	24 01       	movw	r4, r8
    2b46:	07 c0       	rjmp	.+14     	; 0x2b56 <CheckPins+0xd8>
     adc.vCEs = adc.lp2;
  } else {
     if ((adc.vCEs+288) > adc.lp2) goto checkDiode;	// no significant change
    2b48:	c2 01       	movw	r24, r4
    2b4a:	80 5e       	subi	r24, 0xE0	; 224
    2b4c:	9e 4f       	sbci	r25, 0xFE	; 254
    2b4e:	88 16       	cp	r8, r24
    2b50:	99 06       	cpc	r9, r25
    2b52:	08 f4       	brcc	.+2      	; 0x2b56 <CheckPins+0xd8>
    2b54:	c9 c2       	rjmp	.+1426   	; 0x30e8 <CheckPins+0x66a>
  // a TRIAC is marked as two transistors at least (2 or 3)
  // both of NPN transistors (normal and inverse) are found, if ntrans.count == 2
  // both of PNP transistors (normal and inverse) are found, if ptrans.count == 2
  // If Transistor with protection diode is checked, all results are found,
  // if ntrans.count == 1 and ptrans.count == 1
  if ((ntrans.count + ptrans.count) > 1) {
    2b56:	20 91 69 01 	lds	r18, 0x0169
    2b5a:	80 91 51 01 	lds	r24, 0x0151
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	82 0f       	add	r24, r18
    2b62:	91 1d       	adc	r25, r1
    2b64:	82 30       	cpi	r24, 0x02	; 2
    2b66:	91 05       	cpc	r25, r1
    2b68:	0c f0       	brlt	.+2      	; 0x2b6c <CheckPins+0xee>
    2b6a:	be c2       	rjmp	.+1404   	; 0x30e8 <CheckPins+0x66a>
#endif
  TriPinRL = pgm_read_byte(&PinRLtab[TristatePin]);	// instruction for TristatePin R_L
#if FLASHEND > 0x3fff
  TriPinRH = pgm_read_byte(&PinRHtab[TristatePin]);	// instruction for TristatePin R_H
#else
  TriPinRH = TriPinRL + TriPinRL;			// instruction for TristatePin R_H
    2b6c:	8a 2c       	mov	r8, r10
    2b6e:	88 0c       	add	r8, r8
  // Look for Source/Drain current without gate current.
  // Germanium transistors have also high collector current with higher temperature.
  // But this current is lower, if the base is hold at emitter level (adc.hp1).
  // Additional checking of adc.lp1 will prevent to detect a PNP as P-JFET.
//  if((PartMode <= PART_MODE_P_JFET) && (adc.lp_otr > 455)  && (adc.vCEs > 455))
  if((adc.lp_otr > 455)  && (adc.vCEs > 455))
    2b70:	28 ec       	ldi	r18, 0xC8	; 200
    2b72:	c2 16       	cp	r12, r18
    2b74:	21 e0       	ldi	r18, 0x01	; 1
    2b76:	d2 06       	cpc	r13, r18
    2b78:	08 f4       	brcc	.+2      	; 0x2b7c <CheckPins+0xfe>
    2b7a:	b1 c0       	rjmp	.+354    	; 0x2cde <CheckPins+0x260>
    2b7c:	38 ec       	ldi	r19, 0xC8	; 200
    2b7e:	43 16       	cp	r4, r19
    2b80:	31 e0       	ldi	r19, 0x01	; 1
    2b82:	53 06       	cpc	r5, r19
    2b84:	08 f4       	brcc	.+2      	; 0x2b88 <CheckPins+0x10a>
    2b86:	ab c0       	rjmp	.+342    	; 0x2cde <CheckPins+0x260>
     {  //there is more than 650uA current without TristatePin current 
     // can be JFET or D-FET
     //Test if N-JFET or if self-conducting N-MOSFET
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
    2b88:	88 2d       	mov	r24, r8
    2b8a:	87 29       	or	r24, r7
    2b8c:	84 b9       	out	0x04, r24	; 4
     adc.lp1 = W10msReadADC(LowPin);	//measure voltage at the assumed Source 
    2b8e:	80 2f       	mov	r24, r16
    2b90:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <W10msReadADC>
    2b94:	1c 01       	movw	r2, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
    2b96:	89 81       	ldd	r24, Y+1	; 0x01
    2b98:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
    2b9c:	2c 01       	movw	r4, r24
     R_PORT = TriPinRH;			//switch R_H for Tristate-Pin (probably Gate) to VCC
    2b9e:	85 b8       	out	0x05, r8	; 5
     adc.lp2 = W10msReadADC(LowPin);	//measure voltage at the assumed Source again
    2ba0:	80 2f       	mov	r24, r16
    2ba2:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <W10msReadADC>
     lcd_space();
     DisplayValue(adc.lp2,-3,' ',3);
     DisplayValue(adc.lp1,-3,' ',3);
#endif
     //If it is a self-conducting MOSFET or JFET, then must be: adc.lp2 > adc.lp1 
     if(adc.lp2>(adc.lp1+599)) {
    2ba6:	91 01       	movw	r18, r2
    2ba8:	29 5a       	subi	r18, 0xA9	; 169
    2baa:	3d 4f       	sbci	r19, 0xFD	; 253
    2bac:	8e 28       	or	r8, r14
    2bae:	28 17       	cp	r18, r24
    2bb0:	39 07       	cpc	r19, r25
    2bb2:	08 f0       	brcs	.+2      	; 0x2bb6 <CheckPins+0x138>
    2bb4:	40 c0       	rjmp	.+128    	; 0x2c36 <CheckPins+0x1b8>
        //measure voltage at the  Gate, differ between MOSFET and JFET
        ADC_PORT = TXD_VAL;
    2bb6:	88 e0       	ldi	r24, 0x08	; 8
    2bb8:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = LoADCm;	//Low-Pin fix to GND
    2bba:	b7 b8       	out	0x07, r11	; 7
        R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
    2bbc:	84 b8       	out	0x04, r8	; 4
        R_PORT = TriPinRH | HiPinRL;	//switch R_L for High-Pin to VCC
    2bbe:	85 b8       	out	0x05, r8	; 5
        adc.lp2 = W10msReadADC(TristatePin); //read voltage of assumed Gate 
    2bc0:	89 81       	ldd	r24, Y+1	; 0x01
    2bc2:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <W10msReadADC>
        if(adc.lp2>3911) {  //MOSFET
    2bc6:	4f e0       	ldi	r20, 0x0F	; 15
    2bc8:	88 34       	cpi	r24, 0x48	; 72
    2bca:	94 07       	cpc	r25, r20
    2bcc:	28 f0       	brcs	.+10     	; 0x2bd8 <CheckPins+0x15a>
           PartFound = PART_FET;	//N-Kanal-MOSFET
    2bce:	84 e0       	ldi	r24, 0x04	; 4
    2bd0:	80 93 09 01 	sts	0x0109, r24
           PartMode = PART_MODE_MOS|N_CHANNEL|D_MODE; //Depletion-MOSFET
    2bd4:	82 e2       	ldi	r24, 0x22	; 34
    2bd6:	04 c0       	rjmp	.+8      	; 0x2be0 <CheckPins+0x162>
        } else {  //JFET (pn-passage between Gate and Source is conducting )
           PartFound = PART_FET;	//N-Kanal-JFET
    2bd8:	84 e0       	ldi	r24, 0x04	; 4
    2bda:	80 93 09 01 	sts	0x0109, r24
           PartMode = PART_MODE_JFET|N_CHANNEL|D_MODE;
    2bde:	84 e2       	ldi	r24, 0x24	; 36
    2be0:	80 93 08 01 	sts	0x0108, r24
        lcd_data('N');
        lcd_data('J');
#endif
//      if ((PartReady == 0) || (adc.lp1 > ntrans.uBE)) 
//      there is no way to find out the right Source / Drain
        ntrans.uBE = adc.lp1;
    2be4:	30 92 49 01 	sts	0x0149, r3
    2be8:	20 92 48 01 	sts	0x0148, r2
        if(adc.lp1 > adc.tp1) {
    2bec:	42 14       	cp	r4, r2
    2bee:	53 04       	cpc	r5, r3
    2bf0:	40 f4       	brcc	.+16     	; 0x2c02 <CheckPins+0x184>
          ntrans.gthvoltage = adc.lp1 - adc.tp1;	//voltage GS (Source - Gate)
    2bf2:	c1 01       	movw	r24, r2
    2bf4:	84 19       	sub	r24, r4
    2bf6:	95 09       	sbc	r25, r5
    2bf8:	90 93 4d 01 	sts	0x014D, r25
    2bfc:	80 93 4c 01 	sts	0x014C, r24
    2c00:	04 c0       	rjmp	.+8      	; 0x2c0a <CheckPins+0x18c>
        } else {
          ntrans.gthvoltage = 0;	//voltage GS (Source - Gate)
    2c02:	10 92 4d 01 	sts	0x014D, r1
    2c06:	10 92 4c 01 	sts	0x014C, r1
        }
        ntrans.current = (unsigned int)(((unsigned long)adc.lp1 * 1000) / RR680MI); // Id 0.01mA
    2c0a:	b1 01       	movw	r22, r2
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	28 ee       	ldi	r18, 0xE8	; 232
    2c12:	33 e0       	ldi	r19, 0x03	; 3
    2c14:	40 e0       	ldi	r20, 0x00	; 0
    2c16:	50 e0       	ldi	r21, 0x00	; 0
    2c18:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
    2c1c:	20 91 03 01 	lds	r18, 0x0103
    2c20:	30 91 04 01 	lds	r19, 0x0104
    2c24:	40 e0       	ldi	r20, 0x00	; 0
    2c26:	50 e0       	ldi	r21, 0x00	; 0
    2c28:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
    2c2c:	30 93 4b 01 	sts	0x014B, r19
    2c30:	20 93 4a 01 	sts	0x014A, r18
    2c34:	50 c2       	rjmp	.+1184   	; 0x30d6 <CheckPins+0x658>
        ntrans.count++;			// count as two, the inverse is identical
        goto saveNresult;		// save Pin numbers and exit
     }

     ADC_PORT = TXD_VAL;		// direct outputs to GND
    2c36:	88 e0       	ldi	r24, 0x08	; 8
    2c38:	88 b9       	out	0x08, r24	; 8

     //Test, if P-JFET or if self-conducting P-MOSFET
     ADC_DDR = LoADCm;		//switch Low-Pin (assumed Drain) direct to GND,
    2c3a:	b7 b8       	out	0x07, r11	; 7
				//R_H for Tristate-Pin (assumed Gate) is already switched to VCC
     R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
    2c3c:	84 b8       	out	0x04, r8	; 4
     R_PORT = TriPinRH | HiPinRL;	//High-Pin across R_L to Vcc
    2c3e:	85 b8       	out	0x05, r8	; 5
     adc.hp1 = W10msReadADC(HighPin);	//measure voltage at assumed Source 
    2c40:	81 2f       	mov	r24, r17
    2c42:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <W10msReadADC>
    2c46:	2c 01       	movw	r4, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
    2c4a:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
    2c4e:	4c 01       	movw	r8, r24
     R_PORT = HiPinRL;			//switch R_H for Tristate-Pin (assumed Gate) to GND
    2c50:	e5 b8       	out	0x05, r14	; 5
     adc.hp2 = W10msReadADC(HighPin);	//read voltage at assumed Source again
    2c52:	81 2f       	mov	r24, r17
    2c54:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <W10msReadADC>
     //if it is a self-conducting P_MOSFET or P-JFET , then must be:  adc.hp1 > adc.hp2 
     if(adc.hp1>(adc.hp2+599)) {
    2c58:	89 5a       	subi	r24, 0xA9	; 169
    2c5a:	9d 4f       	sbci	r25, 0xFD	; 253
    2c5c:	84 15       	cp	r24, r4
    2c5e:	95 05       	cpc	r25, r5
    2c60:	08 f0       	brcs	.+2      	; 0x2c64 <CheckPins+0x1e6>
    2c62:	42 c2       	rjmp	.+1156   	; 0x30e8 <CheckPins+0x66a>
        //read voltage at the Gate , to differ between MOSFET and JFET
        ADC_PORT = HiADCp;	//switch High-Pin directly to VCC
    2c64:	f8 b8       	out	0x08, r15	; 8
        ADC_DDR = HiADCm;	//switch High-Pin to output
    2c66:	f7 b8       	out	0x07, r15	; 7
        adc.tp2 = W10msReadADC(TristatePin); //read voltage at the assumed Gate 
    2c68:	89 81       	ldd	r24, Y+1	; 0x01
    2c6a:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <W10msReadADC>
        if(adc.tp2<977) { 		//MOSFET
    2c6e:	53 e0       	ldi	r21, 0x03	; 3
    2c70:	81 3d       	cpi	r24, 0xD1	; 209
    2c72:	95 07       	cpc	r25, r21
    2c74:	28 f4       	brcc	.+10     	; 0x2c80 <CheckPins+0x202>
           PartFound = PART_FET;	//P-Kanal-MOSFET
    2c76:	84 e0       	ldi	r24, 0x04	; 4
    2c78:	80 93 09 01 	sts	0x0109, r24
           PartMode = PART_MODE_MOS|P_CHANNEL|D_MODE; //Depletion-MOSFET
    2c7c:	82 e3       	ldi	r24, 0x32	; 50
    2c7e:	04 c0       	rjmp	.+8      	; 0x2c88 <CheckPins+0x20a>
        } else { 			//JFET (pn-passage between Gate and Source is conducting)
           PartFound = PART_FET;	//P-Kanal-JFET
    2c80:	84 e0       	ldi	r24, 0x04	; 4
    2c82:	80 93 09 01 	sts	0x0109, r24
           PartMode = PART_MODE_JFET|P_CHANNEL|D_MODE;
    2c86:	84 e3       	ldi	r24, 0x34	; 52
    2c88:	80 93 08 01 	sts	0x0108, r24
        }
#if DebugOut == 5
        lcd_data('P');
        lcd_data('J');
#endif
        if(adc.tp1 > adc.hp1) {
    2c8c:	48 14       	cp	r4, r8
    2c8e:	59 04       	cpc	r5, r9
    2c90:	38 f4       	brcc	.+14     	; 0x2ca0 <CheckPins+0x222>
          ptrans.gthvoltage = adc.tp1 - adc.hp1;	//voltage GS (Gate - Source)
    2c92:	84 18       	sub	r8, r4
    2c94:	95 08       	sbc	r9, r5
    2c96:	90 92 65 01 	sts	0x0165, r9
    2c9a:	80 92 64 01 	sts	0x0164, r8
    2c9e:	04 c0       	rjmp	.+8      	; 0x2ca8 <CheckPins+0x22a>
        } else {
          ptrans.gthvoltage = 0;
    2ca0:	10 92 65 01 	sts	0x0165, r1
    2ca4:	10 92 64 01 	sts	0x0164, r1
        }
        ptrans.current = (unsigned int)(((unsigned long)(ADCconfig.U_AVCC - adc.hp1) * 1000) / RR680PL); // Id 0.01mA
    2ca8:	60 91 37 01 	lds	r22, 0x0137
    2cac:	70 91 38 01 	lds	r23, 0x0138
    2cb0:	64 19       	sub	r22, r4
    2cb2:	75 09       	sbc	r23, r5
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	28 ee       	ldi	r18, 0xE8	; 232
    2cba:	33 e0       	ldi	r19, 0x03	; 3
    2cbc:	40 e0       	ldi	r20, 0x00	; 0
    2cbe:	50 e0       	ldi	r21, 0x00	; 0
    2cc0:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
    2cc4:	20 91 0a 01 	lds	r18, 0x010A
    2cc8:	30 91 0b 01 	lds	r19, 0x010B
    2ccc:	40 e0       	ldi	r20, 0x00	; 0
    2cce:	50 e0       	ldi	r21, 0x00	; 0
    2cd0:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
    2cd4:	30 93 63 01 	sts	0x0163, r19
    2cd8:	20 93 62 01 	sts	0x0162, r18
    2cdc:	cc c0       	rjmp	.+408    	; 0x2e76 <CheckPins+0x3f8>
     c_hfe = (unsigned long)((adc.rhp - adc.tp1) / adc.tp1);
  }
#endif

  //set Pins again for circuit with common Emitter PNP
  R_DDR = 0;			//all Resistor Ports to Input
    2cde:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			//switch all resistor ports to GND
    2ce0:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
    2ce2:	f8 b8       	out	0x08, r15	; 8
  ADC_DDR = HiADCm;		//switch High-Pin to output
    2ce4:	f7 b8       	out	0x07, r15	; 7
//  R_DDR = LoPinRL;		//switch R_L port for Low-Pin to output (GND)
  wait_about5ms();
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	0e 94 ba 01 	call	0x374	; 0x374 <sleep_5ms>
  
  if(adc.lp_otr < 1977) {
    2cee:	89 eb       	ldi	r24, 0xB9	; 185
    2cf0:	c8 16       	cp	r12, r24
    2cf2:	87 e0       	ldi	r24, 0x07	; 7
    2cf4:	d8 06       	cpc	r13, r24
    2cf6:	08 f0       	brcs	.+2      	; 0x2cfa <CheckPins+0x27c>
    2cf8:	f7 c1       	rjmp	.+1006   	; 0x30e8 <CheckPins+0x66a>
     lcd_data('E');
     lcd_testpin(HighPin);
     lcd_space();
#endif
     //Test to PNP
     R_DDR = LoPinRL | TriPinRL;	//switch R_L port for Tristate-Pin to output (GND), for Test of PNP
    2cfa:	64 b8       	out	0x04, r6	; 4
     adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin
    2cfc:	80 2f       	mov	r24, r16
    2cfe:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
     if(adc.lp1 > 3422) {
    2d02:	ad e0       	ldi	r26, 0x0D	; 13
    2d04:	8f 35       	cpi	r24, 0x5F	; 95
    2d06:	9a 07       	cpc	r25, r26
    2d08:	08 f4       	brcc	.+2      	; 0x2d0c <CheckPins+0x28e>
    2d0a:	bb c0       	rjmp	.+374    	; 0x2e82 <CheckPins+0x404>
        //component has current => PNP-Transistor or equivalent
        R_DDR = 0;
    2d0c:	14 b8       	out	0x04, r1	; 4
        wait_about5ms();		// clear TRIAC and Thyristor
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	0e 94 ba 01 	call	0x374	; 0x374 <sleep_5ms>
        //compute current amplification factor in both directions
        R_DDR = LoPinRL | TriPinRH;	//switch R_H port for Tristate-Pin (Base) to output (GND)
    2d16:	68 2c       	mov	r6, r8
    2d18:	67 28       	or	r6, r7
    2d1a:	64 b8       	out	0x04, r6	; 4

        adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin (assumed Collector)
    2d1c:	80 2f       	mov	r24, r16
    2d1e:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    2d22:	9c 01       	movw	r18, r24
        adc.tp2 = ReadADC(TristatePin);	//measure voltage at TristatePin (Base) 
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
    2d26:	28 87       	std	Y+8, r18	; 0x08
    2d28:	3e 83       	std	Y+6, r19	; 0x06
    2d2a:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
    2d2e:	2c 01       	movw	r4, r24
        adc.hp2 = ReadADC(HighPin);	//measure voltage at HighPin (assumed Emitter)
    2d30:	81 2f       	mov	r24, r17
    2d32:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
    2d36:	1c 01       	movw	r2, r24
//           PartReady = 1;
//        }

 
/*        if(adc.tp2 > 977)  */
        if(adc.tp2 > 2000) {
    2d38:	28 85       	ldd	r18, Y+8	; 0x08
    2d3a:	3e 81       	ldd	r19, Y+6	; 0x06
    2d3c:	b1 ed       	ldi	r27, 0xD1	; 209
    2d3e:	4b 16       	cp	r4, r27
    2d40:	b7 e0       	ldi	r27, 0x07	; 7
    2d42:	5b 06       	cpc	r5, r27
    2d44:	08 f4       	brcc	.+2      	; 0x2d48 <CheckPins+0x2ca>
    2d46:	45 c0       	rjmp	.+138    	; 0x2dd2 <CheckPins+0x354>
           //PNP-Transistor is found (Base voltage moves with Emitter to VCC)
           PartFound = PART_TRANSISTOR;
    2d48:	83 e0       	ldi	r24, 0x03	; 3
    2d4a:	80 93 09 01 	sts	0x0109, r24
           PartMode = PART_MODE_PNP;
    2d4e:	8d e0       	ldi	r24, 0x0D	; 13
    2d50:	80 93 08 01 	sts	0x0108, r24
           update_pins = 0;		// only update pins, if hFE is higher or Thyristor 
#ifdef COMMON_EMITTER
           //compute current amplification factor for circuit with common Emitter
           //e_hFE = B = Collector current / Base current
           tmp16 = adc.lp1;
           if (tmp16 > adc.lp_otr) {
    2d54:	c2 16       	cp	r12, r18
    2d56:	d3 06       	cpc	r13, r19
    2d58:	10 f4       	brcc	.+4      	; 0x2d5e <CheckPins+0x2e0>
              tmp16 -= adc.lp_otr;
    2d5a:	2c 19       	sub	r18, r12
    2d5c:	3d 09       	sbc	r19, r13
           }

 #ifdef LONG_HFE
           e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
    2d5e:	69 01       	movw	r12, r18
    2d60:	ee 24       	eor	r14, r14
    2d62:	ff 24       	eor	r15, r15
    2d64:	20 91 03 01 	lds	r18, 0x0103
    2d68:	30 91 04 01 	lds	r19, 0x0104
    2d6c:	40 e0       	ldi	r20, 0x00	; 0
    2d6e:	50 e0       	ldi	r21, 0x00	; 0
    2d70:	60 e6       	ldi	r22, 0x60	; 96
    2d72:	77 eb       	ldi	r23, 0xB7	; 183
    2d74:	87 e4       	ldi	r24, 0x47	; 71
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
    2d7c:	c7 01       	movw	r24, r14
    2d7e:	b6 01       	movw	r22, r12
    2d80:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
    2d84:	92 01       	movw	r18, r4
    2d86:	40 e0       	ldi	r20, 0x00	; 0
    2d88:	50 e0       	ldi	r21, 0x00	; 0
           if (tmp16 > adc.lp_otr) {
              tmp16 -= adc.lp_otr;
           }

 #ifdef LONG_HFE
           e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
    2d8a:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
 #else
           e_hfe = ((tmp16 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
           // first hFE or e_hfe is greater than last hfe ?
           if ((ptrans.count == 0) || (e_hfe > ptrans.hfe)){
    2d8e:	80 91 69 01 	lds	r24, 0x0169
    2d92:	88 23       	and	r24, r24
    2d94:	71 f0       	breq	.+28     	; 0x2db2 <CheckPins+0x334>
    2d96:	80 91 5c 01 	lds	r24, 0x015C
    2d9a:	90 91 5d 01 	lds	r25, 0x015D
    2d9e:	a0 91 5e 01 	lds	r26, 0x015E
    2da2:	b0 91 5f 01 	lds	r27, 0x015F
    2da6:	82 17       	cp	r24, r18
    2da8:	93 07       	cpc	r25, r19
    2daa:	a4 07       	cpc	r26, r20
    2dac:	b5 07       	cpc	r27, r21
    2dae:	08 f0       	brcs	.+2      	; 0x2db2 <CheckPins+0x334>
    2db0:	a1 c4       	rjmp	.+2370   	; 0x36f4 <CheckPins+0xc76>
              ptrans.hfe = e_hfe;				// hFE with common emitter
    2db2:	20 93 5c 01 	sts	0x015C, r18
    2db6:	30 93 5d 01 	sts	0x015D, r19
    2dba:	40 93 5e 01 	sts	0x015E, r20
    2dbe:	50 93 5f 01 	sts	0x015F, r21
              ptrans.uBE = adc.hp2 - adc.tp2;	// Base Emitter Voltage
    2dc2:	24 18       	sub	r2, r4
    2dc4:	35 08       	sbc	r3, r5
    2dc6:	30 92 61 01 	sts	0x0161, r3
    2dca:	20 92 60 01 	sts	0x0160, r2
              update_pins = 1;		// trans.ebc must be updated
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	92 c4       	rjmp	.+2340   	; 0x36f6 <CheckPins+0xc78>
           }
#endif
           goto savePresult;		// marke P type, save Pins and exit
        }
        // is probably a P-E-MOS, check voltage
        if((adc.lp_otr < 97) && (adc.lp1 > 2000)) {
    2dd2:	e1 e6       	ldi	r30, 0x61	; 97
    2dd4:	ce 16       	cp	r12, r30
    2dd6:	d1 04       	cpc	r13, r1
    2dd8:	08 f0       	brcs	.+2      	; 0x2ddc <CheckPins+0x35e>
    2dda:	53 c0       	rjmp	.+166    	; 0x2e82 <CheckPins+0x404>
    2ddc:	f7 e0       	ldi	r31, 0x07	; 7
    2dde:	21 3d       	cpi	r18, 0xD1	; 209
    2de0:	3f 07       	cpc	r19, r31
    2de2:	08 f4       	brcc	.+2      	; 0x2de6 <CheckPins+0x368>
    2de4:	4e c0       	rjmp	.+156    	; 0x2e82 <CheckPins+0x404>
           //is flow voltage low enough in the closed  state?
           //(since D-Mode-FET would be by mistake detected as E-Mode )
           PartFound = PART_FET;		//P-Kanal-MOSFET is found (Basis/Gate moves not to VCC)
    2de6:	84 e0       	ldi	r24, 0x04	; 4
    2de8:	80 93 09 01 	sts	0x0109, r24
           PartMode = PART_MODE_MOS|P_CHANNEL|E_MODE;
    2dec:	82 e1       	ldi	r24, 0x12	; 18
    2dee:	80 93 08 01 	sts	0x0108, r24
           if (adc.hp2 > (adc.lp1+250)) {
    2df2:	26 50       	subi	r18, 0x06	; 6
    2df4:	3f 4f       	sbci	r19, 0xFF	; 255
    2df6:	22 15       	cp	r18, r2
    2df8:	33 05       	cpc	r19, r3
    2dfa:	18 f4       	brcc	.+6      	; 0x2e02 <CheckPins+0x384>
              //Drain-Source Voltage to high, must be a IGBT
              PartMode = PART_MODE_IGBT|P_CHANNEL|E_MODE;
    2dfc:	83 e1       	ldi	r24, 0x13	; 19
    2dfe:	80 93 08 01 	sts	0x0108, r24
           }
       	   //measure the Gate threshold voltage
           //Switching of Drain is monitored with digital input
           // Low level is specified up to 0.3 * VCC
           // High level is specified above 0.6 * VCC
           PinMSK = LoADCm & 7;
    2e02:	27 e0       	ldi	r18, 0x07	; 7
    2e04:	b2 22       	and	r11, r18
       	   ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
    2e08:	80 64       	ori	r24, 0x40	; 64
    2e0a:	80 93 7c 00 	sts	0x007C, r24
    2e0e:	bb e0       	ldi	r27, 0x0B	; 11
    2e10:	cb 2e       	mov	r12, r27
       	   tmp16 = 1;			// round up ((1*4)/9)
    2e12:	a1 e0       	ldi	r26, 0x01	; 1
    2e14:	8a 2e       	mov	r8, r26
    2e16:	91 2c       	mov	r9, r1
       	      while (!(ADC_PIN&PinMSK));		// Wait, until the MOSFET switches and Drain moves to VCC
                  			// 1 is detected with more than 2.5V (up to 2.57V) with tests of mega168 and mega328
       	      R_DDR = LoPinRL;
       	      ADCSRA |= (1<<ADSC);		// Start Conversion
       	      while (ADCSRA&(1<<ADSC));		// wait
      	      tmp16 += (1023 - ADCW);	// Add Tristatepin-Voltage
    2e18:	ff ef       	ldi	r31, 0xFF	; 255
    2e1a:	ef 2e       	mov	r14, r31
    2e1c:	f3 e0       	ldi	r31, 0x03	; 3
    2e1e:	ff 2e       	mov	r15, r31
           // High level is specified above 0.6 * VCC
           PinMSK = LoADCm & 7;
       	   ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
       	   tmp16 = 1;			// round up ((1*4)/9)
       	   for(ii=0;ii<11;ii++) {
       	      wdt_reset();
    2e20:	a8 95       	wdr
       	      ChargePin10ms(TriPinRL,1);
    2e22:	8a 2d       	mov	r24, r10
    2e24:	61 e0       	ldi	r22, 0x01	; 1
    2e26:	0e 94 1c 0c 	call	0x1838	; 0x1838 <ChargePin10ms>
                R_DDR = LoPinRL | TriPinRH;		//switch R_H for Tristate-Pin (Basis) to GND
    2e2a:	64 b8       	out	0x04, r6	; 4
       	      while (!(ADC_PIN&PinMSK));		// Wait, until the MOSFET switches and Drain moves to VCC
    2e2c:	86 b1       	in	r24, 0x06	; 6
    2e2e:	8b 21       	and	r24, r11
    2e30:	e9 f3       	breq	.-6      	; 0x2e2c <CheckPins+0x3ae>
                  			// 1 is detected with more than 2.5V (up to 2.57V) with tests of mega168 and mega328
       	      R_DDR = LoPinRL;
    2e32:	74 b8       	out	0x04, r7	; 4
       	      ADCSRA |= (1<<ADSC);		// Start Conversion
    2e34:	80 91 7a 00 	lds	r24, 0x007A
    2e38:	80 64       	ori	r24, 0x40	; 64
    2e3a:	80 93 7a 00 	sts	0x007A, r24
       	      while (ADCSRA&(1<<ADSC));		// wait
    2e3e:	80 91 7a 00 	lds	r24, 0x007A
    2e42:	86 fd       	sbrc	r24, 6
    2e44:	fc cf       	rjmp	.-8      	; 0x2e3e <CheckPins+0x3c0>
      	      tmp16 += (1023 - ADCW);	// Add Tristatepin-Voltage
    2e46:	80 91 78 00 	lds	r24, 0x0078
    2e4a:	90 91 79 00 	lds	r25, 0x0079
    2e4e:	a7 01       	movw	r20, r14
    2e50:	48 1b       	sub	r20, r24
    2e52:	59 0b       	sbc	r21, r25
    2e54:	84 0e       	add	r8, r20
    2e56:	95 1e       	adc	r9, r21
    2e58:	ca 94       	dec	r12
           // Low level is specified up to 0.3 * VCC
           // High level is specified above 0.6 * VCC
           PinMSK = LoADCm & 7;
       	   ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
       	   tmp16 = 1;			// round up ((1*4)/9)
       	   for(ii=0;ii<11;ii++) {
    2e5a:	11 f7       	brne	.-60     	; 0x2e20 <CheckPins+0x3a2>
       	      R_DDR = LoPinRL;
       	      ADCSRA |= (1<<ADSC);		// Start Conversion
       	      while (ADCSRA&(1<<ADSC));		// wait
      	      tmp16 += (1023 - ADCW);	// Add Tristatepin-Voltage
           }
           tmp16 *= 4;		// is equal to 44*ADCW
    2e5c:	c4 01       	movw	r24, r8
    2e5e:	88 0f       	add	r24, r24
    2e60:	99 1f       	adc	r25, r25
    2e62:	88 0f       	add	r24, r24
    2e64:	99 1f       	adc	r25, r25
           ptrans.gthvoltage = tmp16 / 9;		// gives resolution in mV
    2e66:	69 e0       	ldi	r22, 0x09	; 9
    2e68:	70 e0       	ldi	r23, 0x00	; 0
    2e6a:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__udivmodhi4>
    2e6e:	70 93 65 01 	sts	0x0165, r23
    2e72:	60 93 64 01 	sts	0x0164, r22
           ptrans.count++;		// count FET as two for accelerate searching
    2e76:	80 91 69 01 	lds	r24, 0x0169
    2e7a:	8f 5f       	subi	r24, 0xFF	; 255
    2e7c:	80 93 69 01 	sts	0x0169, r24
    2e80:	a6 cf       	rjmp	.-180    	; 0x2dce <CheckPins+0x350>
    } else {
       c_hfe = (adc.lp1 - adc.rtp) / adc.rtp;
    }
#endif
    //Tristate (can be Base) to VCC, Test if NPN
    ADC_DDR = LoADCm;		//Low-Pin to output 0V
    2e82:	b7 b8       	out	0x07, r11	; 7
    ADC_PORT = TXD_VAL;			//switch Low-Pin to GND
    2e84:	88 e0       	ldi	r24, 0x08	; 8
    2e86:	88 b9       	out	0x08, r24	; 8
    R_DDR = TriPinRL | HiPinRL;		//RL port for High-Pin and Tristate-Pin to output
    2e88:	6e 2c       	mov	r6, r14
    2e8a:	6a 28       	or	r6, r10
    2e8c:	64 b8       	out	0x04, r6	; 4
#ifdef SHOW_ICE
    R_PORT =  HiPinRL;	//RL port for High-Pin and Tristate-Pin to GND
    adc.vCEs = ADCconfig.U_AVCC - W5msReadADC(HighPin); // measure voltage a High-Pin, Base low
#endif
    R_PORT = TriPinRL | HiPinRL;	//RL port for High-Pin and Tristate-Pin to Vcc
    2e8e:	65 b8       	out	0x05, r6	; 5
    adc.hp1 = W5msReadADC(HighPin);	//measure voltage at High-Pin  (Collector)
    2e90:	81 2f       	mov	r24, r17
    2e92:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
#ifdef WITH_THYRISTOR_GATE_V
    adc.tp2 = ReadADC(TristatePin);	//voltage of gate
    adc.lp2 = ReadADC(LowPin);		//voltage of Cathode
#endif
    if(adc.hp1 < 1600) {
    2e96:	56 e0       	ldi	r21, 0x06	; 6
    2e98:	80 34       	cpi	r24, 0x40	; 64
    2e9a:	95 07       	cpc	r25, r21
    2e9c:	08 f0       	brcs	.+2      	; 0x2ea0 <CheckPins+0x422>
    2e9e:	21 c1       	rjmp	.+578    	; 0x30e2 <CheckPins+0x664>
       //component has current => NPN-Transistor or somthing else

       //Test auf Thyristor:
       //Gate discharge
       ChargePin10ms(TriPinRL,0);	//Tristate-Pin (Gate) across R_L 10ms to GND
    2ea0:	8a 2d       	mov	r24, r10
    2ea2:	60 e0       	ldi	r22, 0x00	; 0
    2ea4:	0e 94 1c 0c 	call	0x1838	; 0x1838 <ChargePin10ms>
       adc.hp3 = W5msReadADC(HighPin);	//read voltage at High-Pin (probably Anode) again
    2ea8:	81 2f       	mov	r24, r17
    2eaa:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    2eae:	2c 01       	movw	r4, r24
					//current should still flow, if not,
					// no Thyristor or holding current to low 
		 	
       R_PORT = 0;			//switch R_L for High-Pin (probably Anode) to GND (turn off)
    2eb0:	15 b8       	out	0x05, r1	; 5
       wait_about5ms();
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	0e 94 ba 01 	call	0x374	; 0x374 <sleep_5ms>
       R_PORT = HiPinRL;		//switch R_L for High-Pin (probably Anode) again to VCC
    2eba:	e5 b8       	out	0x05, r14	; 5
       adc.hp2 = W5msReadADC(HighPin);	//measure voltage at the High-Pin (probably Anode) again
    2ebc:	81 2f       	mov	r24, r17
    2ebe:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
       if((adc.hp3 < 1600) && (adc.hp2 > 4400)) {
    2ec2:	a0 e4       	ldi	r26, 0x40	; 64
    2ec4:	4a 16       	cp	r4, r26
    2ec6:	a6 e0       	ldi	r26, 0x06	; 6
    2ec8:	5a 06       	cpc	r5, r26
    2eca:	08 f0       	brcs	.+2      	; 0x2ece <CheckPins+0x450>
    2ecc:	47 c0       	rjmp	.+142    	; 0x2f5c <CheckPins+0x4de>
    2ece:	b1 e1       	ldi	r27, 0x11	; 17
    2ed0:	81 33       	cpi	r24, 0x31	; 49
    2ed2:	9b 07       	cpc	r25, r27
    2ed4:	08 f4       	brcc	.+2      	; 0x2ed8 <CheckPins+0x45a>
    2ed6:	42 c0       	rjmp	.+132    	; 0x2f5c <CheckPins+0x4de>
          //if the holding current was switched off the thyristor must be switched off too. 
          //if Thyristor was still swiched on, if gate was switched off => Thyristor
          PartFound = PART_THYRISTOR;
    2ed8:	85 e0       	ldi	r24, 0x05	; 5
    2eda:	80 93 09 01 	sts	0x0109, r24
          ntrans.count++;		// mark as two N-type transistors
    2ede:	80 91 51 01 	lds	r24, 0x0151
    2ee2:	8f 5f       	subi	r24, 0xFF	; 255
    2ee4:	80 93 51 01 	sts	0x0151, r24
#ifdef WITH_THYRISTOR_GATE_V
          ntrans.uBE = adc.tp2 - adc.lp2;	// Gate - Cathode Voltage 
          ntrans.gthvoltage = adc.hp1 - adc.lp2;	// Anode-Cathode Voltage
#endif
          //Test if Triac
          R_DDR = 0;
    2ee8:	14 b8       	out	0x04, r1	; 4
          R_PORT = 0;
    2eea:	15 b8       	out	0x05, r1	; 5
          ADC_PORT = LoADCp;	//Low-Pin fix to VCC
    2eec:	b8 b8       	out	0x08, r11	; 8
          wait_about5ms();
    2eee:	81 e0       	ldi	r24, 0x01	; 1
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	0e 94 ba 01 	call	0x374	; 0x374 <sleep_5ms>
          R_DDR = HiPinRL;		//switch R_L port HighPin to output (GND)
    2ef6:	e4 b8       	out	0x04, r14	; 4
          if(W5msReadADC(HighPin) > 244) {
    2ef8:	81 2f       	mov	r24, r17
    2efa:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    2efe:	85 3f       	cpi	r24, 0xF5	; 245
    2f00:	91 05       	cpc	r25, r1
    2f02:	08 f0       	brcs	.+2      	; 0x2f06 <CheckPins+0x488>
    2f04:	07 c4       	rjmp	.+2062   	; 0x3714 <CheckPins+0xc96>
             goto saveNresult;		//measure voltage at the  High-Pin (probably A2); if too high:
                                	//component has current => kein Triac
          }
          R_DDR = HiPinRL | TriPinRL;	//switch R_L port for TristatePin (Gate) to output (GND) => Triac should be triggered 
    2f06:	64 b8       	out	0x04, r6	; 4
          if(W5msReadADC(TristatePin) < 977) {
    2f08:	89 81       	ldd	r24, Y+1	; 0x01
    2f0a:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    2f0e:	e3 e0       	ldi	r30, 0x03	; 3
    2f10:	81 3d       	cpi	r24, 0xD1	; 209
    2f12:	9e 07       	cpc	r25, r30
    2f14:	08 f4       	brcc	.+2      	; 0x2f18 <CheckPins+0x49a>
    2f16:	fe c3       	rjmp	.+2044   	; 0x3714 <CheckPins+0xc96>
             goto saveNresult; 		//measure voltage at the Tristate-Pin (probably Gate) ;
                              		// if to low, abort 
          }
          if(ReadADC(HighPin) < 733) {
    2f18:	81 2f       	mov	r24, r17
    2f1a:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
    2f1e:	f2 e0       	ldi	r31, 0x02	; 2
    2f20:	8d 3d       	cpi	r24, 0xDD	; 221
    2f22:	9f 07       	cpc	r25, r31
    2f24:	08 f4       	brcc	.+2      	; 0x2f28 <CheckPins+0x4aa>
    2f26:	f6 c3       	rjmp	.+2028   	; 0x3714 <CheckPins+0xc96>
             goto saveNresult; 		//component has no current => no Triac => abort
          }
          R_DDR = HiPinRL;		//TristatePin (Gate) to input 
    2f28:	e4 b8       	out	0x04, r14	; 4
          if(W5msReadADC(HighPin) < 733) {
    2f2a:	81 2f       	mov	r24, r17
    2f2c:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    2f30:	22 e0       	ldi	r18, 0x02	; 2
    2f32:	8d 3d       	cpi	r24, 0xDD	; 221
    2f34:	92 07       	cpc	r25, r18
    2f36:	08 f4       	brcc	.+2      	; 0x2f3a <CheckPins+0x4bc>
    2f38:	ed c3       	rjmp	.+2010   	; 0x3714 <CheckPins+0xc96>
             goto saveNresult; 		//component has no current without base current => no Triac => abort
          }
          R_PORT = HiPinRL;		//switch R_L port for HighPin to VCC => switch off holding current 
    2f3a:	e5 b8       	out	0x05, r14	; 5
          wait_about5ms();
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	0e 94 ba 01 	call	0x374	; 0x374 <sleep_5ms>
          R_PORT = 0;			//switch R_L port for HighPin again to GND; Triac should now switched off
    2f44:	15 b8       	out	0x05, r1	; 5
          if(W5msReadADC(HighPin) > 244) {
    2f46:	81 2f       	mov	r24, r17
    2f48:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    2f4c:	85 3f       	cpi	r24, 0xF5	; 245
    2f4e:	91 05       	cpc	r25, r1
    2f50:	08 f0       	brcs	.+2      	; 0x2f54 <CheckPins+0x4d6>
    2f52:	e0 c3       	rjmp	.+1984   	; 0x3714 <CheckPins+0xc96>
             goto saveNresult;		//measure voltage at the High-Pin (probably A2) ;
                                	//if to high, component is not switched off => no Triac, abort
          }
          PartFound = PART_TRIAC;
    2f54:	86 e0       	ldi	r24, 0x06	; 6
    2f56:	80 93 09 01 	sts	0x0109, r24
    2f5a:	dc c3       	rjmp	.+1976   	; 0x3714 <CheckPins+0xc96>
          goto saveNresult;
        }
      //Test if NPN Transistor or MOSFET
      // ADC_DDR = LoADCm;	//Low-Pin to output 0V
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
    2f5c:	8e 28       	or	r8, r14
    2f5e:	84 b8       	out	0x04, r8	; 4
      R_PORT = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to VCC
    2f60:	85 b8       	out	0x05, r8	; 5
      adc.hp2 = W20msReadADC(HighPin);	//measure the voltage at the collector  
    2f62:	81 2f       	mov	r24, r17
    2f64:	0e 94 cd 14 	call	0x299a	; 0x299a <W20msReadADC>
    2f68:	2c 01       	movw	r4, r24
      adc.rhp = ADCconfig.U_AVCC - adc.hp2;	// voltage at the collector resistor
    2f6a:	20 91 37 01 	lds	r18, 0x0137
    2f6e:	30 91 38 01 	lds	r19, 0x0138
    2f72:	28 1b       	sub	r18, r24
    2f74:	39 0b       	sbc	r19, r25
      adc.tp2 = ReadADC(TristatePin);	//measure the voltage at the base 
    2f76:	89 81       	ldd	r24, Y+1	; 0x01
    2f78:	28 87       	std	Y+8, r18	; 0x08
    2f7a:	3e 83       	std	Y+6, r19	; 0x06
    2f7c:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
    2f80:	9b 83       	std	Y+3, r25	; 0x03
    2f82:	8a 83       	std	Y+2, r24	; 0x02
      adc.rtp = ADCconfig.U_AVCC - adc.tp2;	// voltage at the base resistor
    2f84:	20 90 37 01 	lds	r2, 0x0137
    2f88:	30 90 38 01 	lds	r3, 0x0138
    2f8c:	28 1a       	sub	r2, r24
    2f8e:	39 0a       	sbc	r3, r25
      adc.lp2 = ReadADC(LowPin);
    2f90:	80 2f       	mov	r24, r16
    2f92:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
    2f96:	9d 83       	std	Y+5, r25	; 0x05
    2f98:	8c 83       	std	Y+4, r24	; 0x04

//      if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
//         PartReady = 1;	//check, if test is already done once
//      }

      if(adc.rtp > 2557) {		// Basis-voltage R_H is low enough
    2f9a:	28 85       	ldd	r18, Y+8	; 0x08
    2f9c:	3e 81       	ldd	r19, Y+6	; 0x06
    2f9e:	4e ef       	ldi	r20, 0xFE	; 254
    2fa0:	24 16       	cp	r2, r20
    2fa2:	49 e0       	ldi	r20, 0x09	; 9
    2fa4:	34 06       	cpc	r3, r20
    2fa6:	08 f4       	brcc	.+2      	; 0x2faa <CheckPins+0x52c>
    2fa8:	48 c0       	rjmp	.+144    	; 0x303a <CheckPins+0x5bc>
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
    2faa:	83 e0       	ldi	r24, 0x03	; 3
    2fac:	80 93 09 01 	sts	0x0109, r24
         PartMode = PART_MODE_NPN;
    2fb0:	8c e0       	ldi	r24, 0x0C	; 12
    2fb2:	80 93 08 01 	sts	0x0108, r24
 #ifdef COMMON_EMITTER

         //compute current amplification factor for common Emitter
         //hFE = B = Collector current / Base current
         tmp16 = adc.rhp;
         if (tmp16 > adc.lp_otr) {
    2fb6:	c2 16       	cp	r12, r18
    2fb8:	d3 06       	cpc	r13, r19
    2fba:	10 f4       	brcc	.+4      	; 0x2fc0 <CheckPins+0x542>
            tmp16 -= adc.lp_otr;
    2fbc:	2c 19       	sub	r18, r12
    2fbe:	3d 09       	sbc	r19, r13
         }

  #ifdef LONG_HFE
         e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
    2fc0:	69 01       	movw	r12, r18
    2fc2:	ee 24       	eor	r14, r14
    2fc4:	ff 24       	eor	r15, r15
    2fc6:	20 91 0a 01 	lds	r18, 0x010A
    2fca:	30 91 0b 01 	lds	r19, 0x010B
    2fce:	40 e0       	ldi	r20, 0x00	; 0
    2fd0:	50 e0       	ldi	r21, 0x00	; 0
    2fd2:	60 e6       	ldi	r22, 0x60	; 96
    2fd4:	77 eb       	ldi	r23, 0xB7	; 183
    2fd6:	87 e4       	ldi	r24, 0x47	; 71
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
    2fde:	c7 01       	movw	r24, r14
    2fe0:	b6 01       	movw	r22, r12
    2fe2:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.rtp;	
    2fe6:	91 01       	movw	r18, r2
    2fe8:	40 e0       	ldi	r20, 0x00	; 0
    2fea:	50 e0       	ldi	r21, 0x00	; 0
         if (tmp16 > adc.lp_otr) {
            tmp16 -= adc.lp_otr;
         }

  #ifdef LONG_HFE
         e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
    2fec:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
              (unsigned int)RR680PL)) / (unsigned int)adc.rtp;	
  #else
         e_hfe = ((tmp16 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.rtp/500);
  #endif
         if ((ntrans.count == 0) || (e_hfe > ntrans.hfe)){
    2ff0:	80 91 51 01 	lds	r24, 0x0151
    2ff4:	88 23       	and	r24, r24
    2ff6:	71 f0       	breq	.+28     	; 0x3014 <CheckPins+0x596>
    2ff8:	80 91 44 01 	lds	r24, 0x0144
    2ffc:	90 91 45 01 	lds	r25, 0x0145
    3000:	a0 91 46 01 	lds	r26, 0x0146
    3004:	b0 91 47 01 	lds	r27, 0x0147
    3008:	82 17       	cp	r24, r18
    300a:	93 07       	cpc	r25, r19
    300c:	a4 07       	cpc	r26, r20
    300e:	b5 07       	cpc	r27, r21
    3010:	08 f0       	brcs	.+2      	; 0x3014 <CheckPins+0x596>
    3012:	82 c3       	rjmp	.+1796   	; 0x3718 <CheckPins+0xc9a>
            ntrans.hfe = e_hfe;
    3014:	20 93 44 01 	sts	0x0144, r18
    3018:	30 93 45 01 	sts	0x0145, r19
    301c:	40 93 46 01 	sts	0x0146, r20
    3020:	50 93 47 01 	sts	0x0147, r21
            ntrans.uBE = adc.tp2 - adc.lp2;
    3024:	8a 81       	ldd	r24, Y+2	; 0x02
    3026:	9b 81       	ldd	r25, Y+3	; 0x03
    3028:	ac 81       	ldd	r26, Y+4	; 0x04
    302a:	bd 81       	ldd	r27, Y+5	; 0x05
    302c:	8a 1b       	sub	r24, r26
    302e:	9b 0b       	sbc	r25, r27
    3030:	90 93 49 01 	sts	0x0149, r25
    3034:	80 93 48 01 	sts	0x0148, r24
    3038:	6d c3       	rjmp	.+1754   	; 0x3714 <CheckPins+0xc96>
         }
#endif
         goto saveNresult;		// count the found N-Type and exit
      } 
      // Base has low current
      if((adc.lp_otr < 97) && (adc.rhp > 3400)) {
    303a:	b1 e6       	ldi	r27, 0x61	; 97
    303c:	cb 16       	cp	r12, r27
    303e:	d1 04       	cpc	r13, r1
    3040:	08 f0       	brcs	.+2      	; 0x3044 <CheckPins+0x5c6>
    3042:	4f c0       	rjmp	.+158    	; 0x30e2 <CheckPins+0x664>
    3044:	ed e0       	ldi	r30, 0x0D	; 13
    3046:	29 34       	cpi	r18, 0x49	; 73
    3048:	3e 07       	cpc	r19, r30
    304a:	08 f4       	brcc	.+2      	; 0x304e <CheckPins+0x5d0>
    304c:	4a c0       	rjmp	.+148    	; 0x30e2 <CheckPins+0x664>
         //if flow voltage in switched off mode low enough?
         //(since D-Mode-FET will be detected in error as E-Mode )
         PartFound = PART_FET;	//N-Kanal-MOSFET is found (Basis/Gate will Not be pulled down)
    304e:	84 e0       	ldi	r24, 0x04	; 4
    3050:	80 93 09 01 	sts	0x0109, r24
         PartMode = PART_MODE_MOS|N_CHANNEL|E_MODE;
    3054:	82 e0       	ldi	r24, 0x02	; 2
    3056:	80 93 08 01 	sts	0x0108, r24
         if (adc.hp2 > (250+adc.lp2)) {
    305a:	8c 81       	ldd	r24, Y+4	; 0x04
    305c:	9d 81       	ldd	r25, Y+5	; 0x05
    305e:	86 50       	subi	r24, 0x06	; 6
    3060:	9f 4f       	sbci	r25, 0xFF	; 255
    3062:	84 15       	cp	r24, r4
    3064:	95 05       	cpc	r25, r5
    3066:	18 f4       	brcc	.+6      	; 0x306e <CheckPins+0x5f0>
            // Drain-Source Voltage is too high for N_E_MOS
            PartMode = PART_MODE_IGBT|N_CHANNEL|E_MODE;
    3068:	83 e0       	ldi	r24, 0x03	; 3
    306a:	80 93 08 01 	sts	0x0108, r24
         lcd_data('F');
#endif
         //Switching of Drain is monitored with digital input
         // Low level is specified up to 0.3 * VCC
         // High level is specified above 0.6 * VCC
         PinMSK = HiADCm & 7;
    306e:	f7 e0       	ldi	r31, 0x07	; 7
    3070:	ff 22       	and	r15, r31
         // measure Threshold voltage of Gate
         ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	80 64       	ori	r24, 0x40	; 64
    3076:	80 93 7c 00 	sts	0x007C, r24
    307a:	7b e0       	ldi	r23, 0x0B	; 11
    307c:	c7 2e       	mov	r12, r23
         tmp16 = 1;			// round up ((1*4)/9)
    307e:	61 e0       	ldi	r22, 0x01	; 1
    3080:	66 2e       	mov	r6, r22
    3082:	71 2c       	mov	r7, r1
         for(ii=0;ii<11;ii++) {
            wdt_reset();
    3084:	a8 95       	wdr
            ChargePin10ms(TriPinRL,0);	// discharge Gate 10ms with RL 
    3086:	8a 2d       	mov	r24, r10
    3088:	60 e0       	ldi	r22, 0x00	; 0
    308a:	0e 94 1c 0c 	call	0x1838	; 0x1838 <ChargePin10ms>
            R_DDR = HiPinRL | TriPinRH;	// slowly charge Gate 
    308e:	84 b8       	out	0x04, r8	; 4
            R_PORT = HiPinRL | TriPinRH;
    3090:	85 b8       	out	0x05, r8	; 5
            while ((ADC_PIN&PinMSK));	// Wait, until the MOSFET switch and Drain moved to low 
    3092:	86 b1       	in	r24, 0x06	; 6
    3094:	8f 21       	and	r24, r15
    3096:	e9 f7       	brne	.-6      	; 0x3092 <CheckPins+0x614>
             		// 0 is detected with input voltage of 2.12V to 2.24V (tested with mega168 & mega328)
            R_DDR = HiPinRL;		// switch off current
    3098:	e4 b8       	out	0x04, r14	; 4
            ADCSRA |= (1<<ADSC);		// start ADC conversion
    309a:	80 91 7a 00 	lds	r24, 0x007A
    309e:	80 64       	ori	r24, 0x40	; 64
    30a0:	80 93 7a 00 	sts	0x007A, r24
            while (ADCSRA&(1<<ADSC));	// wait until ADC finished
    30a4:	80 91 7a 00 	lds	r24, 0x007A
    30a8:	86 fd       	sbrc	r24, 6
    30aa:	fc cf       	rjmp	.-8      	; 0x30a4 <CheckPins+0x626>
            tmp16 += ADCW;		// add result of ADC
    30ac:	80 91 78 00 	lds	r24, 0x0078
    30b0:	90 91 79 00 	lds	r25, 0x0079
    30b4:	68 0e       	add	r6, r24
    30b6:	79 1e       	adc	r7, r25
    30b8:	ca 94       	dec	r12
         // High level is specified above 0.6 * VCC
         PinMSK = HiADCm & 7;
         // measure Threshold voltage of Gate
         ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
         tmp16 = 1;			// round up ((1*4)/9)
         for(ii=0;ii<11;ii++) {
    30ba:	21 f7       	brne	.-56     	; 0x3084 <CheckPins+0x606>
            R_DDR = HiPinRL;		// switch off current
            ADCSRA |= (1<<ADSC);		// start ADC conversion
            while (ADCSRA&(1<<ADSC));	// wait until ADC finished
            tmp16 += ADCW;		// add result of ADC
         }
         tmp16 *= 4;	//is equal to 44 * ADCW
    30bc:	c3 01       	movw	r24, r6
    30be:	88 0f       	add	r24, r24
    30c0:	99 1f       	adc	r25, r25
    30c2:	88 0f       	add	r24, r24
    30c4:	99 1f       	adc	r25, r25
         ntrans.gthvoltage = tmp16/ 9;	//scale to mV
    30c6:	69 e0       	ldi	r22, 0x09	; 9
    30c8:	70 e0       	ldi	r23, 0x00	; 0
    30ca:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__udivmodhi4>
    30ce:	70 93 4d 01 	sts	0x014D, r23
    30d2:	60 93 4c 01 	sts	0x014C, r22
         ntrans.count++;		// count FET as two to accelerate  searching
    30d6:	80 91 51 01 	lds	r24, 0x0151
    30da:	8f 5f       	subi	r24, 0xFF	; 255
    30dc:	80 93 51 01 	sts	0x0151, r24
    30e0:	19 c3       	rjmp	.+1586   	; 0x3714 <CheckPins+0xc96>
         goto saveNresult;
      }
   } // end component conduct => npn
   ADC_DDR = TXD_MSK;		// switch all ADC-Ports to input
    30e2:	88 e0       	ldi	r24, 0x08	; 8
    30e4:	87 b9       	out	0x07, r24	; 7
   ADC_PORT = TXD_VAL;		// switch all ADC-Ports to 0 (no Pull up)
    30e6:	88 b9       	out	0x08, r24	; 8
//#endif
  LoPinRL = pgm_read_byte(&PinRLtab[LowPin]);		// instruction for LowPin R_L
#if FLASHEND > 0x3fff
  LoPinRH = pgm_read_byte(&PinRHtab[LowPin]);		// instruction for LowPin R_H
#else
  LoPinRH = LoPinRL + LoPinRL;				// instruction for LowPin R_H
    30e8:	27 2c       	mov	r2, r7
    30ea:	22 0c       	add	r2, r2
#endif
  HiPinRL = pgm_read_byte(&PinRLtab[HighPin]);		// instruction for HighPin R_L
#if FLASHEND > 0x3fff
  HiPinRH = pgm_read_byte(&PinRHtab[HighPin]);		// instruction for HighPin R_H
#else
  HiPinRH = HiPinRL + HiPinRL;				// instruction for HighPin R_H
    30ec:	6e 2c       	mov	r6, r14
    30ee:	66 0c       	add	r6, r6
  }
//##########################################################################################
// Search for diodes
//##########################################################################################
checkDiode:
  R_DDR = 0;			//switch off resistor current
    30f0:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;
    30f2:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = TXD_MSK;		// switch ADC ports to input
    30f4:	88 e0       	ldi	r24, 0x08	; 8
    30f6:	87 b9       	out	0x07, r24	; 7
//  if (adc.lp_otr < 977) 
  if (adc.lp_otr < 455) {
    30f8:	27 ec       	ldi	r18, 0xC7	; 199
    30fa:	c2 16       	cp	r12, r18
    30fc:	21 e0       	ldi	r18, 0x01	; 1
    30fe:	d2 06       	cpc	r13, r18
    3100:	08 f4       	brcc	.+2      	; 0x3104 <CheckPins+0x686>
    3102:	ba c0       	rjmp	.+372    	; 0x3278 <CheckPins+0x7fa>
#endif
     goto widmes;
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
    3104:	88 b9       	out	0x08, r24	; 8
    3106:	48 ec       	ldi	r20, 0xC8	; 200
    3108:	c4 2e       	mov	r12, r20
  for (ii=0;ii<200;ii++) {
     ADC_DDR = LoADCm | HiADCm; // discharge by short of Low and High side
    310a:	8b 2c       	mov	r8, r11
    310c:	8f 28       	or	r8, r15
    310e:	87 b8       	out	0x07, r8	; 7
     wait_about5ms();		// Low and Highpin to GND for discharge
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	0e 94 ba 01 	call	0x374	; 0x374 <sleep_5ms>
     ADC_DDR = LoADCm;		// switch only Low-Pin fix to GND
    3118:	b7 b8       	out	0x07, r11	; 7
     adc.hp1 = ReadADC(HighPin); // read voltage at High-Pin
    311a:	81 2f       	mov	r24, r17
    311c:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
     if (adc.hp1 < (150/8)) break;
    3120:	82 31       	cpi	r24, 0x12	; 18
    3122:	91 05       	cpc	r25, r1
    3124:	10 f0       	brcs	.+4      	; 0x312a <CheckPins+0x6ac>
    3126:	ca 94       	dec	r12
     goto widmes;
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
  for (ii=0;ii<200;ii++) {
    3128:	91 f7       	brne	.-28     	; 0x310e <CheckPins+0x690>
 #if FLASHEND > 0x1fff
  /* It is difficult to detect the protection diode of D-mode MOSFET . */
  /* We have to generate a negative gate voltage to isolate the diode. */
  /* For P-mode the resistors must reside on the VCC side. */
  /* For N-mode the resistors must be moved to the GND side. */
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
    312a:	64 b8       	out	0x04, r6	; 4
  R_PORT = HiPinRH;
    312c:	65 b8       	out	0x05, r6	; 5
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
    312e:	8a 2d       	mov	r24, r10
    3130:	61 e0       	ldi	r22, 0x01	; 1
    3132:	0e 94 1c 0c 	call	0x1838	; 0x1838 <ChargePin10ms>
  adc.hp2 = W5msReadADC(HighPin); 		// GND--|<--HP--R_H--VCC
    3136:	81 2f       	mov	r24, r17
    3138:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    313c:	2c 01       	movw	r4, r24
  // now the resistor is moved to the Low side
  R_DDR = LoPinRH;
    313e:	24 b8       	out	0x04, r2	; 4
  R_PORT = 0;
    3140:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = HiADCm;		// switch High-Pin fix to VCC
    3142:	f7 b8       	out	0x07, r15	; 7
  ADC_PORT = HiADCp;
    3144:	f8 b8       	out	0x08, r15	; 8
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
    3146:	8a 2d       	mov	r24, r10
    3148:	60 e0       	ldi	r22, 0x00	; 0
    314a:	0e 94 1c 0c 	call	0x1838	; 0x1838 <ChargePin10ms>
  adc.hp3 = ADCconfig.U_AVCC - W5msReadADC(LowPin); // GND--R_H--LP--|<--VCC
    314e:	c0 90 37 01 	lds	r12, 0x0137
    3152:	d0 90 38 01 	lds	r13, 0x0138
    3156:	80 2f       	mov	r24, r16
    3158:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    315c:	9c 01       	movw	r18, r24
  /* check with higher current (R_L=680) */
  R_DDR = LoPinRL;
    315e:	74 b8       	out	0x04, r7	; 4
  adc.hp1 = W5msReadADC(HighPin) - ReadADC(LowPin); // GND--R_L--LP--|<--VCC
    3160:	81 2f       	mov	r24, r17
    3162:	28 87       	std	Y+8, r18	; 0x08
    3164:	3e 83       	std	Y+6, r19	; 0x06
    3166:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    316a:	9b 83       	std	Y+3, r25	; 0x03
    316c:	8a 83       	std	Y+2, r24	; 0x02
    316e:	80 2f       	mov	r24, r16
    3170:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
    3174:	4a 81       	ldd	r20, Y+2	; 0x02
    3176:	5b 81       	ldd	r21, Y+3	; 0x03
    3178:	48 1b       	sub	r20, r24
    317a:	59 0b       	sbc	r21, r25
    317c:	5b 83       	std	Y+3, r21	; 0x03
    317e:	4a 83       	std	Y+2, r20	; 0x02
  //  the resistor is moved back to the High side
  ADC_PORT = TXD_VAL;
    3180:	88 e0       	ldi	r24, 0x08	; 8
    3182:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;		// switch only Low-Pin fix to GND
    3184:	b7 b8       	out	0x07, r11	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin output (VCC)
    3186:	e4 b8       	out	0x04, r14	; 4
  R_PORT = HiPinRL;
    3188:	e5 b8       	out	0x05, r14	; 5
  ChargePin10ms(TriPinRL,1);	//discharge for P-Kanal-MOSFET gate
    318a:	8a 2d       	mov	r24, r10
    318c:	61 e0       	ldi	r22, 0x01	; 1
    318e:	0e 94 1c 0c 	call	0x1838	; 0x1838 <ChargePin10ms>
  adc.lp_otr = W5msReadADC(HighPin) - ReadADC(LowPin); // GND--|<--HP--R_L--VCC
    3192:	81 2f       	mov	r24, r17
    3194:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    3198:	4c 01       	movw	r8, r24
    319a:	80 2f       	mov	r24, r16
    319c:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
    31a0:	88 1a       	sub	r8, r24
    31a2:	99 0a       	sbc	r9, r25
  if(adc.lp_otr > adc.hp1) {
    31a4:	28 85       	ldd	r18, Y+8	; 0x08
    31a6:	3e 81       	ldd	r19, Y+6	; 0x06
    31a8:	8a 81       	ldd	r24, Y+2	; 0x02
    31aa:	9b 81       	ldd	r25, Y+3	; 0x03
    31ac:	88 15       	cp	r24, r8
    31ae:	99 05       	cpc	r25, r9
    31b0:	40 f4       	brcc	.+16     	; 0x31c2 <CheckPins+0x744>
      adc.hp1 = adc.lp_otr;	//the higher value wins
      adc.hp3 = adc.hp2;
      R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
    31b2:	64 b8       	out	0x04, r6	; 4
      R_PORT = HiPinRH;
    31b4:	65 b8       	out	0x05, r6	; 5
      adc.hp2 = W5msReadADC(HighPin); 		// GND--|<--HP--R_H--VCC
    31b6:	81 2f       	mov	r24, r17
    31b8:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    31bc:	9b 82       	std	Y+3, r9	; 0x03
    31be:	8a 82       	std	Y+2, r8	; 0x02
    31c0:	16 c0       	rjmp	.+44     	; 0x31ee <CheckPins+0x770>
  R_DDR = LoPinRH;
  R_PORT = 0;
  ADC_DDR = HiADCm;		// switch High-Pin fix to VCC
  ADC_PORT = HiADCp;
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
  adc.hp3 = ADCconfig.U_AVCC - W5msReadADC(LowPin); // GND--R_H--LP--|<--VCC
    31c2:	26 01       	movw	r4, r12
    31c4:	42 1a       	sub	r4, r18
    31c6:	53 0a       	sbc	r5, r19
      adc.hp3 = adc.hp2;
      R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
      R_PORT = HiPinRH;
      adc.hp2 = W5msReadADC(HighPin); 		// GND--|<--HP--R_H--VCC
  } else {
      R_DDR = LoPinRH;
    31c8:	24 b8       	out	0x04, r2	; 4
      R_PORT = 0;
    31ca:	15 b8       	out	0x05, r1	; 5
      ADC_DDR = HiADCm;		// switch High-Pin fix to VCC
    31cc:	f7 b8       	out	0x07, r15	; 7
      ADC_PORT = HiADCp;
    31ce:	f8 b8       	out	0x08, r15	; 8
      ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
    31d0:	8a 2d       	mov	r24, r10
    31d2:	60 e0       	ldi	r22, 0x00	; 0
    31d4:	0e 94 1c 0c 	call	0x1838	; 0x1838 <ChargePin10ms>
      adc.hp2 = ADCconfig.U_AVCC - W5msReadADC(LowPin); // GND--R_H--LP--|<--VCC
    31d8:	c0 90 37 01 	lds	r12, 0x0137
    31dc:	d0 90 38 01 	lds	r13, 0x0138
    31e0:	80 2f       	mov	r24, r16
    31e2:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    31e6:	d6 01       	movw	r26, r12
    31e8:	a8 1b       	sub	r26, r24
    31ea:	b9 0b       	sbc	r27, r25
    31ec:	cd 01       	movw	r24, r26
#endif
  volt_dif = adc.hp3/8;
  if (volt_dif > 200) volt_dif = 200;

//  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp2 < adc.hp1) && (adc.hp1 > (adc.hp3+volt_dif)) && (adc.hp3 > adc.hp1/16)) {
    31ee:	2a 81       	ldd	r18, Y+2	; 0x02
    31f0:	3b 81       	ldd	r19, Y+3	; 0x03
    31f2:	27 59       	subi	r18, 0x97	; 151
    31f4:	30 40       	sbci	r19, 0x00	; 0
    31f6:	b1 e1       	ldi	r27, 0x11	; 17
    31f8:	29 38       	cpi	r18, 0x89	; 137
    31fa:	3b 07       	cpc	r19, r27
    31fc:	e8 f5       	brcc	.+122    	; 0x3278 <CheckPins+0x7fa>
    31fe:	ea 81       	ldd	r30, Y+2	; 0x02
    3200:	fb 81       	ldd	r31, Y+3	; 0x03
    3202:	8e 17       	cp	r24, r30
    3204:	9f 07       	cpc	r25, r31
    3206:	c0 f5       	brcc	.+112    	; 0x3278 <CheckPins+0x7fa>
  lcd_data('L');
  DisplayValue(adc.hp1,-3,' ',2);
  lcd_data('H');
  DisplayValue(adc.hp2,-3,' ',2);
#endif
  volt_dif = adc.hp3/8;
    3208:	c2 01       	movw	r24, r4
    320a:	33 e0       	ldi	r19, 0x03	; 3
    320c:	96 95       	lsr	r25
    320e:	87 95       	ror	r24
    3210:	3a 95       	dec	r19
    3212:	e1 f7       	brne	.-8      	; 0x320c <CheckPins+0x78e>
  if (volt_dif > 200) volt_dif = 200;

//  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp2 < adc.hp1) && (adc.hp1 > (adc.hp3+volt_dif)) && (adc.hp3 > adc.hp1/16)) {
    3214:	89 3c       	cpi	r24, 0xC9	; 201
    3216:	91 05       	cpc	r25, r1
    3218:	10 f0       	brcs	.+4      	; 0x321e <CheckPins+0x7a0>
    321a:	88 ec       	ldi	r24, 0xC8	; 200
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	84 0d       	add	r24, r4
    3220:	95 1d       	adc	r25, r5
    3222:	2a 81       	ldd	r18, Y+2	; 0x02
    3224:	3b 81       	ldd	r19, Y+3	; 0x03
    3226:	82 17       	cp	r24, r18
    3228:	93 07       	cpc	r25, r19
    322a:	30 f5       	brcc	.+76     	; 0x3278 <CheckPins+0x7fa>
    322c:	c9 01       	movw	r24, r18
    322e:	24 e0       	ldi	r18, 0x04	; 4
    3230:	96 95       	lsr	r25
    3232:	87 95       	ror	r24
    3234:	2a 95       	dec	r18
    3236:	e1 f7       	brne	.-8      	; 0x3230 <CheckPins+0x7b2>
    3238:	84 15       	cp	r24, r4
    323a:	95 05       	cpc	r25, r5
    323c:	e8 f4       	brcc	.+58     	; 0x3278 <CheckPins+0x7fa>
     //voltage is above 0,15V and below 4,64V => Ok
     // hp2 >= hp1 is only possible with capacitor, not with a diode, hp2 is measured with 470k
//     if((PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
     if(PartFound < PART_DIODE) {
    323e:	80 91 09 01 	lds	r24, 0x0109
    3242:	82 30       	cpi	r24, 0x02	; 2
    3244:	18 f4       	brcc	.+6      	; 0x324c <CheckPins+0x7ce>
        PartFound = PART_DIODE;	//mark for diode only, if no other component is found
    3246:	82 e0       	ldi	r24, 0x02	; 2
    3248:	80 93 09 01 	sts	0x0109, r24
				//since there is a problem with Transistors with a protection diode
#if DebugOut == 4
        lcd_data('D');
#endif
     }
     diodes.Anode[NumOfDiodes] = HighPin;
    324c:	80 91 07 01 	lds	r24, 0x0107
    3250:	e8 2f       	mov	r30, r24
    3252:	f0 e0       	ldi	r31, 0x00	; 0
    3254:	df 01       	movw	r26, r30
    3256:	ae 57       	subi	r26, 0x7E	; 126
    3258:	be 4f       	sbci	r27, 0xFE	; 254
    325a:	1c 93       	st	X, r17
     diodes.Cathode[NumOfDiodes] = LowPin;
    325c:	16 96       	adiw	r26, 0x06	; 6
    325e:	0c 93       	st	X, r16
    3260:	16 97       	sbiw	r26, 0x06	; 6
     diodes.Voltage[NumOfDiodes] = adc.hp1;	// voltage in Millivolt 
    3262:	ee 0f       	add	r30, r30
    3264:	ff 1f       	adc	r31, r31
    3266:	e2 57       	subi	r30, 0x72	; 114
    3268:	fe 4f       	sbci	r31, 0xFE	; 254
    326a:	4a 81       	ldd	r20, Y+2	; 0x02
    326c:	5b 81       	ldd	r21, Y+3	; 0x03
    326e:	51 83       	std	Z+1, r21	; 0x01
    3270:	40 83       	st	Z, r20
     NumOfDiodes++;
    3272:	8f 5f       	subi	r24, 0xFF	; 255
    3274:	80 93 07 01 	sts	0x0107, r24
// Search for resistors
//##########################################################################################
widmes:
//  if ((NumOfDiodes + ptrans.count  + ntrans.count) > 0) {
//     goto clean_ports;	// no resistors are searched, if diodes are detected
  if ((ptrans.count  + ntrans.count) > 0) {
    3278:	20 91 51 01 	lds	r18, 0x0151
    327c:	80 91 69 01 	lds	r24, 0x0169
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	82 0f       	add	r24, r18
    3284:	91 1d       	adc	r25, r1
    3286:	00 97       	sbiw	r24, 0x00	; 0
    3288:	09 f0       	breq	.+2      	; 0x328c <CheckPins+0x80e>
    328a:	16 c2       	rjmp	.+1068   	; 0x36b8 <CheckPins+0xc3a>
     goto clean_ports;	// no resistors are searched, if transistors are detected
  }
  // resistor measurement
  wdt_reset();
    328c:	a8 95       	wdr
// U_SCALE can be set to 4 for better resolution of ReadADC result
#if U_SCALE != 1
  ADCconfig.U_AVCC *= U_SCALE;	// scale to higher resolution, mV scale is not required
    328e:	80 91 37 01 	lds	r24, 0x0137
    3292:	90 91 38 01 	lds	r25, 0x0138
    3296:	88 0f       	add	r24, r24
    3298:	99 1f       	adc	r25, r25
    329a:	88 0f       	add	r24, r24
    329c:	99 1f       	adc	r25, r25
    329e:	90 93 38 01 	sts	0x0138, r25
    32a2:	80 93 37 01 	sts	0x0137, r24
  ADCconfig.U_Bandgap *= U_SCALE;
    32a6:	80 91 35 01 	lds	r24, 0x0135
    32aa:	90 91 36 01 	lds	r25, 0x0136
    32ae:	88 0f       	add	r24, r24
    32b0:	99 1f       	adc	r25, r25
    32b2:	88 0f       	add	r24, r24
    32b4:	99 1f       	adc	r25, r25
    32b6:	90 93 36 01 	sts	0x0136, r25
    32ba:	80 93 35 01 	sts	0x0135, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = R_ANZ_MESS;	// switch to special number of repetitions
    32be:	8e eb       	ldi	r24, 0xBE	; 190
    32c0:	80 93 33 01 	sts	0x0133, r24
#endif
  #define MAX_REPEAT (700 / (5 + R_ANZ_MESS/8))
  ADC_PORT = TXD_VAL;
    32c4:	88 e0       	ldi	r24, 0x08	; 8
    32c6:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
    32c8:	b7 b8       	out	0x07, r11	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    32ca:	e4 b8       	out	0x04, r14	; 4
  R_PORT = HiPinRL;	
    32cc:	e5 b8       	out	0x05, r14	; 5
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
    32ce:	cc 24       	eor	r12, r12
    32d0:	dd 24       	eor	r13, r13
  for (ii=1;ii<MAX_REPEAT;ii++) {
    32d2:	21 e0       	ldi	r18, 0x01	; 1
    32d4:	01 c0       	rjmp	.+2      	; 0x32d8 <CheckPins+0x85a>
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    32d6:	6a 01       	movw	r12, r20
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
    32d8:	80 2f       	mov	r24, r16
    32da:	28 87       	std	Y+8, r18	; 0x08
    32dc:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    32e0:	5c 01       	movw	r10, r24
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    32e2:	81 2f       	mov	r24, r17
    32e4:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
    32e8:	ac 01       	movw	r20, r24
     udiff = adc.hp1 - adc.hp2;
    32ea:	8c 19       	sub	r24, r12
    32ec:	9d 09       	sbc	r25, r13
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    32ee:	28 85       	ldd	r18, Y+8	; 0x08
    32f0:	97 ff       	sbrs	r25, 7
    32f2:	03 c0       	rjmp	.+6      	; 0x32fa <CheckPins+0x87c>
    32f4:	90 95       	com	r25
    32f6:	81 95       	neg	r24
    32f8:	9f 4f       	sbci	r25, 0xFF	; 255
    32fa:	83 30       	cpi	r24, 0x03	; 3
    32fc:	91 05       	cpc	r25, r1
    32fe:	74 f4       	brge	.+28     	; 0x331c <CheckPins+0x89e>
  adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
#endif
  if (adc.tp1 > adc.hp1) {
     adc.tp1 = adc.hp1;
  }
  R_PORT = 0;
    3300:	15 b8       	out	0x05, r1	; 5
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (GND)
    3302:	64 b8       	out	0x04, r6	; 4
  adc.hp2 = W5msReadADC(HighPin);	// read voltage, should be down
    3304:	81 2f       	mov	r24, r17
    3306:	4e 83       	std	Y+6, r20	; 0x06
    3308:	5f 83       	std	Y+7, r21	; 0x07
    330a:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
  if (adc.hp2 > (20*U_SCALE)) {
    330e:	4e 81       	ldd	r20, Y+6	; 0x06
    3310:	5f 81       	ldd	r21, Y+7	; 0x07
    3312:	81 35       	cpi	r24, 0x51	; 81
    3314:	91 05       	cpc	r25, r1
    3316:	08 f0       	brcs	.+2      	; 0x331a <CheckPins+0x89c>
    3318:	b4 c1       	rjmp	.+872    	; 0x3682 <CheckPins+0xc04>
    331a:	05 c0       	rjmp	.+10     	; 0x3326 <CheckPins+0x8a8>
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     udiff = adc.hp1 - adc.hp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.hp2 = adc.hp1;
     wdt_reset();
    331c:	a8 95       	wdr
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    331e:	2f 5f       	subi	r18, 0xFF	; 255
    3320:	29 31       	cpi	r18, 0x19	; 25
    3322:	c9 f6       	brne	.-78     	; 0x32d6 <CheckPins+0x858>
    3324:	ae c1       	rjmp	.+860    	; 0x3682 <CheckPins+0xc04>
     u2lcd(adc.hp2);
     lcd_space();
#endif
     goto testend;
  }
  R_PORT = HiPinRH;		//switch R_H for High-Pin to VCC
    3326:	65 b8       	out	0x05, r6	; 5
  adc.hp2 = W5msReadADC(HighPin);	// voltage at resistor Rx with R_H
    3328:	81 2f       	mov	r24, r17
    332a:	4e 83       	std	Y+6, r20	; 0x06
    332c:	5f 83       	std	Y+7, r21	; 0x07
    332e:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    3332:	4c 01       	movw	r8, r24

  ADC_DDR = HiADCm;		//switch High-Pin to output
    3334:	f7 b8       	out	0x07, r15	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
    3336:	f8 b8       	out	0x08, r15	; 8
  R_PORT = 0;
    3338:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
    333a:	74 b8       	out	0x04, r7	; 4
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
    333c:	cc 24       	eor	r12, r12
    333e:	dd 24       	eor	r13, r13
  for (ii=1;ii<MAX_REPEAT;ii++) {
    3340:	21 e0       	ldi	r18, 0x01	; 1
    3342:	4e 81       	ldd	r20, Y+6	; 0x06
    3344:	5f 81       	ldd	r21, Y+7	; 0x07
    3346:	01 c0       	rjmp	.+2      	; 0x334a <CheckPins+0x8cc>
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    3348:	67 01       	movw	r12, r14
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
    334a:	81 2f       	mov	r24, r17
    334c:	28 87       	std	Y+8, r18	; 0x08
    334e:	4e 83       	std	Y+6, r20	; 0x06
    3350:	5f 83       	std	Y+7, r21	; 0x07
    3352:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    3356:	2c 01       	movw	r4, r24
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    3358:	80 2f       	mov	r24, r16
    335a:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
    335e:	7c 01       	movw	r14, r24
     udiff = adc.lp1 - adc.lp2;
    3360:	8c 19       	sub	r24, r12
    3362:	9d 09       	sbc	r25, r13
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    3364:	28 85       	ldd	r18, Y+8	; 0x08
    3366:	4e 81       	ldd	r20, Y+6	; 0x06
    3368:	5f 81       	ldd	r21, Y+7	; 0x07
    336a:	97 ff       	sbrs	r25, 7
    336c:	03 c0       	rjmp	.+6      	; 0x3374 <CheckPins+0x8f6>
    336e:	90 95       	com	r25
    3370:	81 95       	neg	r24
    3372:	9f 4f       	sbci	r25, 0xFF	; 255
    3374:	83 30       	cpi	r24, 0x03	; 3
    3376:	91 05       	cpc	r25, r1
    3378:	74 f4       	brge	.+28     	; 0x3396 <CheckPins+0x918>
  adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
#endif
  if (adc.tp2 < adc.lp1) {
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
    337a:	24 b8       	out	0x04, r2	; 4
  adc.lp2 = W5msReadADC(LowPin);
    337c:	80 2f       	mov	r24, r16
    337e:	4e 83       	std	Y+6, r20	; 0x06
    3380:	5f 83       	std	Y+7, r21	; 0x07
    3382:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    3386:	3c 01       	movw	r6, r24
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    3388:	4e 81       	ldd	r20, Y+6	; 0x06
    338a:	5f 81       	ldd	r21, Y+7	; 0x07
    338c:	84 e4       	ldi	r24, 0x44	; 68
    338e:	40 3c       	cpi	r20, 0xC0	; 192
    3390:	58 07       	cpc	r21, r24
    3392:	30 f0       	brcs	.+12     	; 0x33a0 <CheckPins+0x922>
    3394:	0c c0       	rjmp	.+24     	; 0x33ae <CheckPins+0x930>
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     udiff = adc.lp1 - adc.lp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.lp2 = adc.lp1;
     wdt_reset();
    3396:	a8 95       	wdr
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
  R_PORT = 0;
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    3398:	2f 5f       	subi	r18, 0xFF	; 255
    339a:	29 31       	cpi	r18, 0x19	; 25
    339c:	a9 f6       	brne	.-86     	; 0x3348 <CheckPins+0x8ca>
    339e:	71 c1       	rjmp	.+738    	; 0x3682 <CheckPins+0xc04>
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
  adc.lp2 = W5msReadADC(LowPin);
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    33a0:	95 e8       	ldi	r25, 0x85	; 133
    33a2:	89 16       	cp	r8, r25
    33a4:	91 e0       	ldi	r25, 0x01	; 1
    33a6:	99 06       	cpc	r9, r25
    33a8:	08 f0       	brcs	.+2      	; 0x33ac <CheckPins+0x92e>
    33aa:	6b c1       	rjmp	.+726    	; 0x3682 <CheckPins+0xc04>
    33ac:	06 c0       	rjmp	.+12     	; 0x33ba <CheckPins+0x93c>
     lcd_data('F');
#endif
     goto testend; 
  }
//    if((adc.hp2 + (adc.hp2 / 61)) < adc.hp1)
  if (adc.hp2 < (4972*U_SCALE)) { 
    33ae:	a0 eb       	ldi	r26, 0xB0	; 176
    33b0:	8a 16       	cp	r8, r26
    33b2:	ad e4       	ldi	r26, 0x4D	; 77
    33b4:	9a 06       	cpc	r9, r26
    33b6:	08 f0       	brcs	.+2      	; 0x33ba <CheckPins+0x93c>
    33b8:	64 c1       	rjmp	.+712    	; 0x3682 <CheckPins+0xc04>
     // voltage breaks down with low test current and it is not nearly shorted  => resistor
//     if (adc.lp1 < 120)  // take measurement with R_H 
     if (adc.lp1 < (169*U_SCALE)) { // take measurement with R_H 
    33ba:	b4 ea       	ldi	r27, 0xA4	; 164
    33bc:	eb 16       	cp	r14, r27
    33be:	b2 e0       	ldi	r27, 0x02	; 2
    33c0:	fb 06       	cpc	r15, r27
    33c2:	08 f0       	brcs	.+2      	; 0x33c6 <CheckPins+0x948>
    33c4:	72 c0       	rjmp	.+228    	; 0x34aa <CheckPins+0xa2c>
        ii = 'H';
        if (adc.lp2 < (38*U_SCALE)) {
    33c6:	e8 e9       	ldi	r30, 0x98	; 152
    33c8:	6e 16       	cp	r6, r30
    33ca:	71 04       	cpc	r7, r1
    33cc:	08 f4       	brcc	.+2      	; 0x33d0 <CheckPins+0x952>
    33ce:	59 c1       	rjmp	.+690    	; 0x3682 <CheckPins+0xc04>
           // measurement > 60MOhm to big resistance
           goto testend;
        }
        // two measurements with R_H resistors (470k) are made:
        // lirx1 (measurement at HighPin)
        lirx1 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)adc.hp2 / (ADCconfig.U_AVCC - adc.hp2);
    33d0:	a0 90 37 01 	lds	r10, 0x0137
    33d4:	b0 90 38 01 	lds	r11, 0x0138
    33d8:	b4 01       	movw	r22, r8
    33da:	80 e0       	ldi	r24, 0x00	; 0
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	28 e9       	ldi	r18, 0x98	; 152
    33e0:	37 eb       	ldi	r19, 0xB7	; 183
    33e2:	40 e0       	ldi	r20, 0x00	; 0
    33e4:	50 e0       	ldi	r21, 0x00	; 0
    33e6:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
    33ea:	95 01       	movw	r18, r10
    33ec:	28 19       	sub	r18, r8
    33ee:	39 09       	sbc	r19, r9
    33f0:	40 e0       	ldi	r20, 0x00	; 0
    33f2:	50 e0       	ldi	r21, 0x00	; 0
    33f4:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
    33f8:	69 01       	movw	r12, r18
    33fa:	7a 01       	movw	r14, r20
        // lirx2 (measurement at LowPin)
        lirx2 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)(ADCconfig.U_AVCC - adc.lp2) / adc.lp2;
    33fc:	a6 18       	sub	r10, r6
    33fe:	b7 08       	sbc	r11, r7
    3400:	b5 01       	movw	r22, r10
    3402:	80 e0       	ldi	r24, 0x00	; 0
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	28 e9       	ldi	r18, 0x98	; 152
    3408:	37 eb       	ldi	r19, 0xB7	; 183
    340a:	40 e0       	ldi	r20, 0x00	; 0
    340c:	50 e0       	ldi	r21, 0x00	; 0
    340e:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
    3412:	93 01       	movw	r18, r6
    3414:	40 e0       	ldi	r20, 0x00	; 0
    3416:	50 e0       	ldi	r21, 0x00	; 0
    3418:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
#define FAKT_LOW 2		//resolution is about twice as good
#else
#define FAKT_LOW 4		//resolution is about four times better
#endif
#ifdef AUTOSCALE_ADC
        if (adc.hp2 < U_INT_LIMIT) {
    341c:	f8 e7       	ldi	r31, 0x78	; 120
    341e:	8f 16       	cp	r8, r31
    3420:	ff e0       	ldi	r31, 0x0F	; 15
    3422:	9f 06       	cpc	r9, r31
    3424:	70 f4       	brcc	.+28     	; 0x3442 <CheckPins+0x9c4>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    3426:	c7 01       	movw	r24, r14
    3428:	b6 01       	movw	r22, r12
    342a:	e2 e0       	ldi	r30, 0x02	; 2
    342c:	66 0f       	add	r22, r22
    342e:	77 1f       	adc	r23, r23
    3430:	88 1f       	adc	r24, r24
    3432:	99 1f       	adc	r25, r25
    3434:	ea 95       	dec	r30
    3436:	d1 f7       	brne	.-12     	; 0x342c <CheckPins+0x9ae>
    3438:	62 0f       	add	r22, r18
    343a:	73 1f       	adc	r23, r19
    343c:	84 1f       	adc	r24, r20
    343e:	95 1f       	adc	r25, r21
    3440:	12 c0       	rjmp	.+36     	; 0x3466 <CheckPins+0x9e8>
        } else if (adc.lp2 < U_INT_LIMIT){
    3442:	88 e7       	ldi	r24, 0x78	; 120
    3444:	68 16       	cp	r6, r24
    3446:	8f e0       	ldi	r24, 0x0F	; 15
    3448:	78 06       	cpc	r7, r24
    344a:	a0 f4       	brcc	.+40     	; 0x3474 <CheckPins+0x9f6>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    344c:	ca 01       	movw	r24, r20
    344e:	b9 01       	movw	r22, r18
    3450:	b2 e0       	ldi	r27, 0x02	; 2
    3452:	66 0f       	add	r22, r22
    3454:	77 1f       	adc	r23, r23
    3456:	88 1f       	adc	r24, r24
    3458:	99 1f       	adc	r25, r25
    345a:	ba 95       	dec	r27
    345c:	d1 f7       	brne	.-12     	; 0x3452 <CheckPins+0x9d4>
    345e:	6c 0d       	add	r22, r12
    3460:	7d 1d       	adc	r23, r13
    3462:	8e 1d       	adc	r24, r14
    3464:	9f 1d       	adc	r25, r15
    3466:	25 e0       	ldi	r18, 0x05	; 5
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	40 e0       	ldi	r20, 0x00	; 0
    346c:	50 e0       	ldi	r21, 0x00	; 0
    346e:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
    3472:	08 c0       	rjmp	.+16     	; 0x3484 <CheckPins+0xa06>
        } else 
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_H measurements
    3474:	2c 0d       	add	r18, r12
    3476:	3d 1d       	adc	r19, r13
    3478:	4e 1d       	adc	r20, r14
    347a:	5f 1d       	adc	r21, r15
    347c:	56 95       	lsr	r21
    347e:	47 95       	ror	r20
    3480:	37 95       	ror	r19
    3482:	27 95       	ror	r18
        }
        lrx1 *= 100;
    3484:	ca 01       	movw	r24, r20
    3486:	b9 01       	movw	r22, r18
    3488:	24 e6       	ldi	r18, 0x64	; 100
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	40 e0       	ldi	r20, 0x00	; 0
    348e:	50 e0       	ldi	r21, 0x00	; 0
    3490:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
    3494:	6b 01       	movw	r12, r22
    3496:	7c 01       	movw	r14, r24
        lrx1 += RH_OFFSET;			// add constant for correction of systematic error
    3498:	2c ea       	ldi	r18, 0xAC	; 172
    349a:	3d e0       	ldi	r19, 0x0D	; 13
    349c:	40 e0       	ldi	r20, 0x00	; 0
    349e:	50 e0       	ldi	r21, 0x00	; 0
    34a0:	c2 0e       	add	r12, r18
    34a2:	d3 1e       	adc	r13, r19
    34a4:	e4 1e       	adc	r14, r20
    34a6:	f5 1e       	adc	r15, r21
    34a8:	78 c0       	rjmp	.+240    	; 0x359a <CheckPins+0xb1c>
    34aa:	ca 01       	movw	r24, r20
    34ac:	a4 16       	cp	r10, r20
    34ae:	b5 06       	cpc	r11, r21
    34b0:	08 f4       	brcc	.+2      	; 0x34b4 <CheckPins+0xa36>
    34b2:	c5 01       	movw	r24, r10
    34b4:	c4 2c       	mov	r12, r4
    34b6:	d5 2c       	mov	r13, r5
    34b8:	ce 14       	cp	r12, r14
    34ba:	df 04       	cpc	r13, r15
    34bc:	08 f4       	brcc	.+2      	; 0x34c0 <CheckPins+0xa42>
    34be:	67 01       	movw	r12, r14
    34c0:	3c 01       	movw	r6, r24
    34c2:	84 17       	cp	r24, r20
    34c4:	95 07       	cpc	r25, r21
    34c6:	08 f4       	brcc	.+2      	; 0x34ca <CheckPins+0xa4c>
    34c8:	3a 01       	movw	r6, r20
        // two measurements with R_L resistors (680) are made:
        // lirx1 (measurement at HighPin)
        if (adc.tp1 > adc.hp1) {
           adc.hp1 = adc.tp1;		//diff negativ is illegal
        }
        lirx1 =(unsigned long)RR680PL * (unsigned long)(adc.hp1 - adc.tp1) / (ADCconfig.U_AVCC - adc.hp1);
    34ca:	b3 01       	movw	r22, r6
    34cc:	68 1b       	sub	r22, r24
    34ce:	79 0b       	sbc	r23, r25
    34d0:	80 e0       	ldi	r24, 0x00	; 0
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	20 91 0a 01 	lds	r18, 0x010A
    34d8:	30 91 0b 01 	lds	r19, 0x010B
    34dc:	40 e0       	ldi	r20, 0x00	; 0
    34de:	50 e0       	ldi	r21, 0x00	; 0
    34e0:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
    34e4:	20 91 37 01 	lds	r18, 0x0137
    34e8:	30 91 38 01 	lds	r19, 0x0138
    34ec:	26 19       	sub	r18, r6
    34ee:	37 09       	sbc	r19, r7
    34f0:	40 e0       	ldi	r20, 0x00	; 0
    34f2:	50 e0       	ldi	r21, 0x00	; 0
    34f4:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
    34f8:	49 01       	movw	r8, r18
    34fa:	5a 01       	movw	r10, r20
    34fc:	26 01       	movw	r4, r12
    34fe:	ec 14       	cp	r14, r12
    3500:	fd 04       	cpc	r15, r13
    3502:	08 f4       	brcc	.+2      	; 0x3506 <CheckPins+0xa88>
    3504:	27 01       	movw	r4, r14
        if (adc.tp2 < adc.lp1) {
           adc.lp1 = adc.tp2;		//diff negativ is illegal
        }
        // lirx2 (Measurement at LowPin)
        lirx2 =(unsigned long)RR680MI * (unsigned long)(adc.tp2 -adc.lp1) / adc.lp1;
    3506:	c4 18       	sub	r12, r4
    3508:	d5 08       	sbc	r13, r5
    350a:	b6 01       	movw	r22, r12
    350c:	80 e0       	ldi	r24, 0x00	; 0
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	20 91 03 01 	lds	r18, 0x0103
    3514:	30 91 04 01 	lds	r19, 0x0104
    3518:	40 e0       	ldi	r20, 0x00	; 0
    351a:	50 e0       	ldi	r21, 0x00	; 0
    351c:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
    3520:	92 01       	movw	r18, r4
    3522:	40 e0       	ldi	r20, 0x00	; 0
    3524:	50 e0       	ldi	r21, 0x00	; 0
    3526:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
//     lrx1 =(unsigned long)R_L_VAL * (unsigned long)adc.hp1 / (adc.hp3 - adc.hp1);

#ifdef AUTOSCALE_ADC
        if (adc.hp1 < U_INT_LIMIT) {
    352a:	88 e7       	ldi	r24, 0x78	; 120
    352c:	68 16       	cp	r6, r24
    352e:	8f e0       	ldi	r24, 0x0F	; 15
    3530:	78 06       	cpc	r7, r24
    3532:	70 f4       	brcc	.+28     	; 0x3550 <CheckPins+0xad2>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    3534:	c5 01       	movw	r24, r10
    3536:	b4 01       	movw	r22, r8
    3538:	f2 e0       	ldi	r31, 0x02	; 2
    353a:	66 0f       	add	r22, r22
    353c:	77 1f       	adc	r23, r23
    353e:	88 1f       	adc	r24, r24
    3540:	99 1f       	adc	r25, r25
    3542:	fa 95       	dec	r31
    3544:	d1 f7       	brne	.-12     	; 0x353a <CheckPins+0xabc>
    3546:	62 0f       	add	r22, r18
    3548:	73 1f       	adc	r23, r19
    354a:	84 1f       	adc	r24, r20
    354c:	95 1f       	adc	r25, r21
    354e:	12 c0       	rjmp	.+36     	; 0x3574 <CheckPins+0xaf6>
        } else if (adc.lp1 < U_INT_LIMIT) {
    3550:	98 e7       	ldi	r25, 0x78	; 120
    3552:	49 16       	cp	r4, r25
    3554:	9f e0       	ldi	r25, 0x0F	; 15
    3556:	59 06       	cpc	r5, r25
    3558:	b0 f4       	brcc	.+44     	; 0x3586 <CheckPins+0xb08>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    355a:	ca 01       	movw	r24, r20
    355c:	b9 01       	movw	r22, r18
    355e:	e2 e0       	ldi	r30, 0x02	; 2
    3560:	66 0f       	add	r22, r22
    3562:	77 1f       	adc	r23, r23
    3564:	88 1f       	adc	r24, r24
    3566:	99 1f       	adc	r25, r25
    3568:	ea 95       	dec	r30
    356a:	d1 f7       	brne	.-12     	; 0x3560 <CheckPins+0xae2>
    356c:	68 0d       	add	r22, r8
    356e:	79 1d       	adc	r23, r9
    3570:	8a 1d       	adc	r24, r10
    3572:	9b 1d       	adc	r25, r11
    3574:	25 e0       	ldi	r18, 0x05	; 5
    3576:	30 e0       	ldi	r19, 0x00	; 0
    3578:	40 e0       	ldi	r20, 0x00	; 0
    357a:	50 e0       	ldi	r21, 0x00	; 0
    357c:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
    3580:	69 01       	movw	r12, r18
    3582:	7a 01       	movw	r14, r20
    3584:	0a c0       	rjmp	.+20     	; 0x359a <CheckPins+0xb1c>
        } else
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_L measurements
    3586:	69 01       	movw	r12, r18
    3588:	7a 01       	movw	r14, r20
    358a:	c8 0c       	add	r12, r8
    358c:	d9 1c       	adc	r13, r9
    358e:	ea 1c       	adc	r14, r10
    3590:	fb 1c       	adc	r15, r11
    3592:	f6 94       	lsr	r15
    3594:	e7 94       	ror	r14
    3596:	d7 94       	ror	r13
    3598:	c7 94       	ror	r12
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4);
  lcd_space();
  lcd_line2();
#endif
//     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
     if(PartFound < PART_TRANSISTOR) {
    359a:	70 90 09 01 	lds	r7, 0x0109
    359e:	a7 2d       	mov	r26, r7
    35a0:	a3 30       	cpi	r26, 0x03	; 3
    35a2:	08 f0       	brcs	.+2      	; 0x35a6 <CheckPins+0xb28>
    35a4:	6e c0       	rjmp	.+220    	; 0x3682 <CheckPins+0xc04>
//        for (ii=0; ii<ResistorsFound; ii++) 
        if (ResistorsFound != 0) {
    35a6:	80 91 6a 01 	lds	r24, 0x016A
    35aa:	88 23       	and	r24, r24
    35ac:	09 f4       	brne	.+2      	; 0x35b0 <CheckPins+0xb32>
    35ae:	52 c0       	rjmp	.+164    	; 0x3654 <CheckPins+0xbd6>
           // probably measurement with inverse polarity 
           thisR = &resis[ResistorsFound-1];
    35b0:	48 2e       	mov	r4, r24
    35b2:	55 24       	eor	r5, r5
    35b4:	08 94       	sec
    35b6:	41 08       	sbc	r4, r1
    35b8:	51 08       	sbc	r5, r1
           if (thisR->rt == TristatePin) { 
    35ba:	f2 01       	movw	r30, r4
    35bc:	63 e0       	ldi	r22, 0x03	; 3
    35be:	ee 0f       	add	r30, r30
    35c0:	ff 1f       	adc	r31, r31
    35c2:	6a 95       	dec	r22
    35c4:	e1 f7       	brne	.-8      	; 0x35be <CheckPins+0xb40>
    35c6:	e5 5e       	subi	r30, 0xE5	; 229
    35c8:	fe 4f       	sbci	r31, 0xFE	; 254
    35ca:	96 81       	ldd	r25, Z+6	; 0x06
    35cc:	b9 81       	ldd	r27, Y+1	; 0x01
    35ce:	9b 17       	cp	r25, r27
    35d0:	d9 f5       	brne	.+118    	; 0x3648 <CheckPins+0xbca>
              // must be measurement with inverse polarity 
              // resolution is 0.1 Ohm, 1 Ohm = 10 !
              lirx1 = (labs((long)lrx1 - (long)thisR->rx) * 10) / (lrx1 + thisR->rx + 100);
    35d2:	80 80       	ld	r8, Z
    35d4:	91 80       	ldd	r9, Z+1	; 0x01
    35d6:	a2 80       	ldd	r10, Z+2	; 0x02
    35d8:	b3 80       	ldd	r11, Z+3	; 0x03
    35da:	c7 01       	movw	r24, r14
    35dc:	b6 01       	movw	r22, r12
    35de:	68 19       	sub	r22, r8
    35e0:	79 09       	sbc	r23, r9
    35e2:	8a 09       	sbc	r24, r10
    35e4:	9b 09       	sbc	r25, r11
    35e6:	97 ff       	sbrs	r25, 7
    35e8:	07 c0       	rjmp	.+14     	; 0x35f8 <CheckPins+0xb7a>
    35ea:	90 95       	com	r25
    35ec:	80 95       	com	r24
    35ee:	70 95       	com	r23
    35f0:	61 95       	neg	r22
    35f2:	7f 4f       	sbci	r23, 0xFF	; 255
    35f4:	8f 4f       	sbci	r24, 0xFF	; 255
    35f6:	9f 4f       	sbci	r25, 0xFF	; 255
    35f8:	2a e0       	ldi	r18, 0x0A	; 10
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	40 e0       	ldi	r20, 0x00	; 0
    35fe:	50 e0       	ldi	r21, 0x00	; 0
    3600:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
    3604:	a5 01       	movw	r20, r10
    3606:	94 01       	movw	r18, r8
    3608:	2c 59       	subi	r18, 0x9C	; 156
    360a:	3f 4f       	sbci	r19, 0xFF	; 255
    360c:	4f 4f       	sbci	r20, 0xFF	; 255
    360e:	5f 4f       	sbci	r21, 0xFF	; 255
    3610:	2c 0d       	add	r18, r12
    3612:	3d 1d       	adc	r19, r13
    3614:	4e 1d       	adc	r20, r14
    3616:	5f 1d       	adc	r21, r15
    3618:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
              if (lirx1  > 0) {
    361c:	21 15       	cp	r18, r1
    361e:	31 05       	cpc	r19, r1
    3620:	41 05       	cpc	r20, r1
    3622:	51 05       	cpc	r21, r1
    3624:	71 f5       	brne	.+92     	; 0x3682 <CheckPins+0xc04>
#endif
//                 ResistorsFound--;		// this one isn't a resistor
//                 goto testend; // <10% mismatch
              } else {
                 // resistor has the same value in both directions
                 if (PartFound < PART_DIODE) {
    3626:	e7 2d       	mov	r30, r7
    3628:	e2 30       	cpi	r30, 0x02	; 2
    362a:	19 f0       	breq	.+6      	; 0x3632 <CheckPins+0xbb4>
                    PartFound = PART_RESISTOR;	// only mark as resistor, if no other part found
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	80 93 09 01 	sts	0x0109, r24
                 }
                 thisR->checked = 1;		// mark as checked in both direction
    3632:	f2 01       	movw	r30, r4
    3634:	53 e0       	ldi	r21, 0x03	; 3
    3636:	ee 0f       	add	r30, r30
    3638:	ff 1f       	adc	r31, r31
    363a:	5a 95       	dec	r21
    363c:	e1 f7       	brne	.-8      	; 0x3636 <CheckPins+0xbb8>
    363e:	e5 5e       	subi	r30, 0xE5	; 229
    3640:	fe 4f       	sbci	r31, 0xFE	; 254
    3642:	81 e0       	ldi	r24, 0x01	; 1
    3644:	87 83       	std	Z+7, r24	; 0x07
    3646:	1d c0       	rjmp	.+58     	; 0x3682 <CheckPins+0xc04>
              }
              goto testend;
           } // end  thisR->rt == TristatePin
           // must be a new one with other pins
           if (thisR->checked == 0) {
    3648:	97 81       	ldd	r25, Z+7	; 0x07
    364a:	99 23       	and	r25, r25
    364c:	19 f4       	brne	.+6      	; 0x3654 <CheckPins+0xbd6>
              // the last resistor has not the same value in both directions
              ResistorsFound--;	//overwrite with new one
    364e:	81 50       	subi	r24, 0x01	; 1
    3650:	80 93 6a 01 	sts	0x016A, r24
           }
        }
        // no same resistor with the same Tristate-Pin found, new one
        thisR = &resis[ResistorsFound];		// pointer to a free resistor structure
    3654:	80 91 6a 01 	lds	r24, 0x016A
    3658:	e8 2f       	mov	r30, r24
    365a:	f0 e0       	ldi	r31, 0x00	; 0
        thisR->rx = lrx1;		// save resistor value
    365c:	43 e0       	ldi	r20, 0x03	; 3
    365e:	ee 0f       	add	r30, r30
    3660:	ff 1f       	adc	r31, r31
    3662:	4a 95       	dec	r20
    3664:	e1 f7       	brne	.-8      	; 0x365e <CheckPins+0xbe0>
    3666:	e5 5e       	subi	r30, 0xE5	; 229
    3668:	fe 4f       	sbci	r31, 0xFE	; 254
    366a:	c0 82       	st	Z, r12
    366c:	d1 82       	std	Z+1, r13	; 0x01
    366e:	e2 82       	std	Z+2, r14	; 0x02
    3670:	f3 82       	std	Z+3, r15	; 0x03
#if FLASHEND > 0x1fff
//        thisR->lx = 0;			// no inductance
#endif
        thisR->ra = LowPin;		// save Pin numbers
    3672:	04 83       	std	Z+4, r16	; 0x04
        thisR->rb = HighPin;
    3674:	15 83       	std	Z+5, r17	; 0x05
        thisR->rt = TristatePin;	// Tristate is saved for easier search of inverse measurement
    3676:	29 81       	ldd	r18, Y+1	; 0x01
    3678:	26 83       	std	Z+6, r18	; 0x06
        thisR->checked = 0;		// only one direction 
    367a:	17 82       	std	Z+7, r1	; 0x07
        ResistorsFound++;			// 1 more resistor found
    367c:	8f 5f       	subi	r24, 0xFF	; 255
    367e:	80 93 6a 01 	sts	0x016A, r24
#endif
     }
  }
  testend:			// end of resistor measurement
#if U_SCALE != 1
  ADCconfig.U_AVCC /= U_SCALE;		// scale back to mV resolution
    3682:	80 91 37 01 	lds	r24, 0x0137
    3686:	90 91 38 01 	lds	r25, 0x0138
    368a:	96 95       	lsr	r25
    368c:	87 95       	ror	r24
    368e:	96 95       	lsr	r25
    3690:	87 95       	ror	r24
    3692:	90 93 38 01 	sts	0x0138, r25
    3696:	80 93 37 01 	sts	0x0137, r24
  ADCconfig.U_Bandgap /= U_SCALE;
    369a:	80 91 35 01 	lds	r24, 0x0135
    369e:	90 91 36 01 	lds	r25, 0x0136
    36a2:	96 95       	lsr	r25
    36a4:	87 95       	ror	r24
    36a6:	96 95       	lsr	r25
    36a8:	87 95       	ror	r24
    36aa:	90 93 36 01 	sts	0x0136, r25
    36ae:	80 93 35 01 	sts	0x0135, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = ANZ_MESS;		// switch back to standard number of repetition
    36b2:	89 e1       	ldi	r24, 0x19	; 25
    36b4:	80 93 33 01 	sts	0x0133, r24
#ifdef DebugOut
#if DebugOut < 10
  wait_for_key_5s_line2();
#endif
#endif
  ADC_DDR = TXD_MSK;		// all ADC-Pins Input
    36b8:	88 e0       	ldi	r24, 0x08	; 8
    36ba:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// all ADC outputs to Ground, keine Pull up
    36bc:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// all resistor-outputs to Input
    36be:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// all resistor-outputs to Ground, no Pull up
    36c0:	15 b8       	out	0x05, r1	; 5
    ntrans.c = HighPin;
    ntrans.e = LowPin;
 }
 goto clean_ports;

} // end CheckPins()
    36c2:	28 96       	adiw	r28, 0x08	; 8
    36c4:	0f b6       	in	r0, 0x3f	; 63
    36c6:	f8 94       	cli
    36c8:	de bf       	out	0x3e, r29	; 62
    36ca:	0f be       	out	0x3f, r0	; 63
    36cc:	cd bf       	out	0x3d, r28	; 61
    36ce:	cf 91       	pop	r28
    36d0:	df 91       	pop	r29
    36d2:	1f 91       	pop	r17
    36d4:	0f 91       	pop	r16
    36d6:	ff 90       	pop	r15
    36d8:	ef 90       	pop	r14
    36da:	df 90       	pop	r13
    36dc:	cf 90       	pop	r12
    36de:	bf 90       	pop	r11
    36e0:	af 90       	pop	r10
    36e2:	9f 90       	pop	r9
    36e4:	8f 90       	pop	r8
    36e6:	7f 90       	pop	r7
    36e8:	6f 90       	pop	r6
    36ea:	5f 90       	pop	r5
    36ec:	4f 90       	pop	r4
    36ee:	3f 90       	pop	r3
    36f0:	2f 90       	pop	r2
    36f2:	08 95       	ret
/*        if(adc.tp2 > 977)  */
        if(adc.tp2 > 2000) {
           //PNP-Transistor is found (Base voltage moves with Emitter to VCC)
           PartFound = PART_TRANSISTOR;
           PartMode = PART_MODE_PNP;
           update_pins = 0;		// only update pins, if hFE is higher or Thyristor 
    36f4:	80 e0       	ldi	r24, 0x00	; 0
//---------------------------------------------------------------------------
savePresult:
#if DebugOut == 5
 lcd_data('P');
#endif
 ptrans.count++;
    36f6:	90 91 69 01 	lds	r25, 0x0169
    36fa:	9f 5f       	subi	r25, 0xFF	; 255
    36fc:	90 93 69 01 	sts	0x0169, r25
 if (update_pins != 0) {
    3700:	88 23       	and	r24, r24
    3702:	d1 f2       	breq	.-76     	; 0x36b8 <CheckPins+0xc3a>
    ptrans.b = TristatePin;	// save Pin-constellation
    3704:	39 81       	ldd	r19, Y+1	; 0x01
    3706:	30 93 66 01 	sts	0x0166, r19
    ptrans.c = LowPin;
    370a:	00 93 67 01 	sts	0x0167, r16
    ptrans.e = HighPin;
    370e:	10 93 68 01 	sts	0x0168, r17
    3712:	d2 cf       	rjmp	.-92     	; 0x36b8 <CheckPins+0xc3a>
#if DebugOut == 5
  lcd_line2();
  lcd_clear_line();
  lcd_line2();
#endif
  update_pins = 1;			// if a part is found, always update the pins
    3714:	81 e0       	ldi	r24, 0x01	; 1
    3716:	01 c0       	rjmp	.+2      	; 0x371a <CheckPins+0xc9c>
//      }

      if(adc.rtp > 2557) {		// Basis-voltage R_H is low enough
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
         PartMode = PART_MODE_NPN;
         update_pins = 0;		// only update pins, if better hFE
    3718:	80 e0       	ldi	r24, 0x00	; 0
//---------------------------------------------------------------------------
saveNresult:
#if DebugOut == 5
 lcd_data('N');
#endif
 ntrans.count++;
    371a:	90 91 51 01 	lds	r25, 0x0151
    371e:	9f 5f       	subi	r25, 0xFF	; 255
    3720:	90 93 51 01 	sts	0x0151, r25
 if (update_pins != 0) {
    3724:	88 23       	and	r24, r24
    3726:	41 f2       	breq	.-112    	; 0x36b8 <CheckPins+0xc3a>
    ntrans.b = TristatePin;	// save Pin-constellation
    3728:	49 81       	ldd	r20, Y+1	; 0x01
    372a:	40 93 4e 01 	sts	0x014E, r20
    ntrans.c = HighPin;
    372e:	10 93 4f 01 	sts	0x014F, r17
    ntrans.e = LowPin;
    3732:	00 93 50 01 	sts	0x0150, r16
    3736:	c0 cf       	rjmp	.-128    	; 0x36b8 <CheckPins+0xc3a>

00003738 <GetESR>:
    3738:	2f 92       	push	r2
    373a:	3f 92       	push	r3
    373c:	4f 92       	push	r4
    373e:	5f 92       	push	r5
    3740:	6f 92       	push	r6
    3742:	7f 92       	push	r7
    3744:	8f 92       	push	r8
    3746:	9f 92       	push	r9
    3748:	af 92       	push	r10
    374a:	bf 92       	push	r11
    374c:	cf 92       	push	r12
    374e:	df 92       	push	r13
    3750:	ef 92       	push	r14
    3752:	ff 92       	push	r15
    3754:	0f 93       	push	r16
    3756:	1f 93       	push	r17
    3758:	df 93       	push	r29
    375a:	cf 93       	push	r28
    375c:	cd b7       	in	r28, 0x3d	; 61
    375e:	de b7       	in	r29, 0x3e	; 62
    3760:	6e 97       	sbiw	r28, 0x1e	; 30
    3762:	0f b6       	in	r0, 0x3f	; 63
    3764:	f8 94       	cli
    3766:	de bf       	out	0x3e, r29	; 62
    3768:	0f be       	out	0x3f, r0	; 63
    376a:	cd bf       	out	0x3d, r28	; 61
    376c:	66 2e       	mov	r6, r22
    376e:	b8 2e       	mov	r11, r24
    3770:	86 0f       	add	r24, r22
    3772:	89 83       	std	Y+1, r24	; 0x01
    3774:	20 91 09 01 	lds	r18, 0x0109
    3778:	27 30       	cpi	r18, 0x07	; 7
    377a:	19 f5       	brne	.+70     	; 0x37c2 <ad_35e4>
    377c:	20 91 70 01 	lds	r18, 0x0170
    3780:	30 91 71 01 	lds	r19, 0x0171
    3784:	40 91 72 01 	lds	r20, 0x0172
    3788:	50 91 73 01 	lds	r21, 0x0173
    378c:	10 91 7f 01 	lds	r17, 0x017F
    3790:	09 c0       	rjmp	.+18     	; 0x37a4 <ad_35ba>

00003792 <ad_35ac>:
    3792:	ca 01       	movw	r24, r20
    3794:	b9 01       	movw	r22, r18
    3796:	2a e0       	ldi	r18, 0x0A	; 10
    3798:	31 2d       	mov	r19, r1
    379a:	41 2d       	mov	r20, r1
    379c:	51 2d       	mov	r21, r1
    379e:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
    37a2:	1f 5f       	subi	r17, 0xFF	; 255

000037a4 <ad_35ba>:
    37a4:	17 3f       	cpi	r17, 0xF7	; 247
    37a6:	ac f3       	brlt	.-22     	; 0x3792 <ad_35ac>
    37a8:	2c 8b       	std	Y+20, r18	; 0x14
    37aa:	3d 8b       	std	Y+21, r19	; 0x15
    37ac:	4e 8b       	std	Y+22, r20	; 0x16
    37ae:	5f 8b       	std	Y+23, r21	; 0x17
    37b0:	24 3b       	cpi	r18, 0xB4	; 180
    37b2:	60 e0       	ldi	r22, 0x00	; 0
    37b4:	36 07       	cpc	r19, r22
    37b6:	41 05       	cpc	r20, r1
    37b8:	51 05       	cpc	r21, r1
    37ba:	18 f4       	brcc	.+6      	; 0x37c2 <ad_35e4>
    37bc:	8f ef       	ldi	r24, 0xFF	; 255
    37be:	9f ef       	ldi	r25, 0xFF	; 255
    37c0:	78 c1       	rjmp	.+752    	; 0x3ab2 <ad_exit>

000037c2 <ad_35e4>:
    37c2:	26 ed       	ldi	r18, 0xD6	; 214
    37c4:	a2 2e       	mov	r10, r18
    37c6:	02 c0       	rjmp	.+4      	; 0x37cc <ad_3604>

000037c8 <ad_35fe>:
    37c8:	94 ed       	ldi	r25, 0xD4	; 212
    37ca:	a9 2e       	mov	r10, r25

000037cc <ad_3604>:
    37cc:	e7 ef       	ldi	r30, 0xF7	; 247
    37ce:	f0 e0       	ldi	r31, 0x00	; 0
    37d0:	e6 0d       	add	r30, r6
    37d2:	f1 1d       	adc	r31, r1
    37d4:	85 91       	lpm	r24, Z+
    37d6:	88 60       	ori	r24, 0x08	; 8
    37d8:	8e 87       	std	Y+14, r24	; 0x0e
    37da:	e7 ef       	ldi	r30, 0xF7	; 247
    37dc:	f0 e0       	ldi	r31, 0x00	; 0
    37de:	eb 0d       	add	r30, r11
    37e0:	f1 1d       	adc	r31, r1
    37e2:	85 91       	lpm	r24, Z+
    37e4:	88 60       	ori	r24, 0x08	; 8
    37e6:	8f 87       	std	Y+15, r24	; 0x0f
    37e8:	e4 ef       	ldi	r30, 0xF4	; 244
    37ea:	f0 e0       	ldi	r31, 0x00	; 0
    37ec:	e6 0d       	add	r30, r6
    37ee:	f1 1d       	adc	r31, r1
    37f0:	75 90       	lpm	r7, Z+
    37f2:	e4 ef       	ldi	r30, 0xF4	; 244
    37f4:	f0 e0       	ldi	r31, 0x00	; 0
    37f6:	eb 0d       	add	r30, r11
    37f8:	f1 1d       	adc	r31, r1
    37fa:	c5 90       	lpm	r12, Z+
    37fc:	90 ec       	ldi	r25, 0xC0	; 192
    37fe:	69 2a       	or	r6, r25
    3800:	b9 2a       	or	r11, r25
    3802:	81 e0       	ldi	r24, 0x01	; 1
    3804:	e8 2e       	mov	r14, r24
    3806:	f1 2c       	mov	r15, r1
    3808:	01 2d       	mov	r16, r1
    380a:	11 2d       	mov	r17, r1
    380c:	8e 83       	std	Y+6, r24	; 0x06
    380e:	1f 82       	std	Y+7, r1	; 0x07
    3810:	18 86       	std	Y+8, r1	; 0x08
    3812:	19 86       	std	Y+9, r1	; 0x09
    3814:	1a 86       	std	Y+10, r1	; 0x0a
    3816:	1b 86       	std	Y+11, r1	; 0x0b
    3818:	1c 86       	std	Y+12, r1	; 0x0c
    381a:	1d 86       	std	Y+13, r1	; 0x0d
    381c:	18 8e       	std	Y+24, r1	; 0x18
    381e:	19 8e       	std	Y+25, r1	; 0x19
    3820:	0e 94 37 0c 	call	0x186e	; 0x186e <EntladePins>
    3824:	88 e0       	ldi	r24, 0x08	; 8
    3826:	88 b9       	out	0x08, r24	; 8
    3828:	60 92 7c 00 	sts	0x007C, r6
    382c:	0e 94 56 0e 	call	0x1cac	; 0x1cac <wait100us>
    3830:	3f 85       	ldd	r19, Y+15	; 0x0f
    3832:	37 b9       	out	0x07, r19	; 7
    3834:	75 b8       	out	0x05, r7	; 5
    3836:	74 b8       	out	0x04, r7	; 4
    3838:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <wait10us>
    383c:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <wait2us>
    3840:	15 b8       	out	0x05, r1	; 5
    3842:	14 b8       	out	0x04, r1	; 4
    3844:	dd 24       	eor	r13, r13
    3846:	b4 ed       	ldi	r27, 0xD4	; 212
    3848:	9b 2e       	mov	r9, r27
    384a:	a6 ed       	ldi	r26, 0xD6	; 214
    384c:	8a 2e       	mov	r8, r26

0000384e <ad_3692>:
    384e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3850:	37 b9       	out	0x07, r19	; 7
    3852:	75 b8       	out	0x05, r7	; 5
    3854:	74 b8       	out	0x04, r7	; 4
    3856:	60 92 7c 00 	sts	0x007C, r6
    385a:	a8 95       	wdr
    385c:	a0 92 7a 00 	sts	0x007A, r10
    3860:	80 91 7a 00 	lds	r24, 0x007A
    3864:	86 fd       	sbrc	r24, 6
    3866:	fc cf       	rjmp	.-8      	; 0x3860 <ad_3692+0x12>
    3868:	a0 92 7a 00 	sts	0x007A, r10
    386c:	80 91 7a 00 	lds	r24, 0x007A
    3870:	86 fd       	sbrc	r24, 6
    3872:	fc cf       	rjmp	.-8      	; 0x386c <ad_3692+0x1e>
    3874:	20 90 78 00 	lds	r2, 0x0078
    3878:	30 90 79 00 	lds	r3, 0x0079
    387c:	b0 92 7c 00 	sts	0x007C, r11
    3880:	a0 92 7a 00 	sts	0x007A, r10
    3884:	80 91 7a 00 	lds	r24, 0x007A
    3888:	86 fd       	sbrc	r24, 6
    388a:	fc cf       	rjmp	.-8      	; 0x3884 <ad_3692+0x36>
    388c:	80 92 7a 00 	sts	0x007A, r8
    3890:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <wait5us>
    3894:	c5 b8       	out	0x05, r12	; 5
    3896:	c4 b8       	out	0x04, r12	; 4
    3898:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <wait20us>
    389c:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <wait5us>
    38a0:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <wait1us>
    38a4:	8f 93       	push	r24
    38a6:	8f 91       	pop	r24
    38a8:	a8 95       	wdr
    38aa:	a8 95       	wdr
    38ac:	14 b8       	out	0x04, r1	; 4
    38ae:	15 b8       	out	0x05, r1	; 5

000038b0 <ad_370c>:
    38b0:	80 91 7a 00 	lds	r24, 0x007A
    38b4:	86 fd       	sbrc	r24, 6
    38b6:	fc cf       	rjmp	.-8      	; 0x38b0 <ad_370c>
    38b8:	20 91 78 00 	lds	r18, 0x0078
    38bc:	30 91 79 00 	lds	r19, 0x0079
    38c0:	28 8b       	std	Y+16, r18	; 0x10
    38c2:	39 8b       	std	Y+17, r19	; 0x11
    38c4:	3f 85       	ldd	r19, Y+15	; 0x0f
    38c6:	37 b9       	out	0x07, r19	; 7
    38c8:	c5 b8       	out	0x05, r12	; 5
    38ca:	c4 b8       	out	0x04, r12	; 4
    38cc:	a8 95       	wdr
    38ce:	b0 92 7c 00 	sts	0x007C, r11
    38d2:	a0 92 7a 00 	sts	0x007A, r10
    38d6:	80 91 7a 00 	lds	r24, 0x007A
    38da:	86 fd       	sbrc	r24, 6
    38dc:	fc cf       	rjmp	.-8      	; 0x38d6 <ad_370c+0x26>
    38de:	a0 92 7a 00 	sts	0x007A, r10
    38e2:	80 91 7a 00 	lds	r24, 0x007A
    38e6:	86 fd       	sbrc	r24, 6
    38e8:	fc cf       	rjmp	.-8      	; 0x38e2 <ad_370c+0x32>
    38ea:	60 91 78 00 	lds	r22, 0x0078
    38ee:	70 91 79 00 	lds	r23, 0x0079
    38f2:	60 92 7c 00 	sts	0x007C, r6
    38f6:	a0 92 7a 00 	sts	0x007A, r10
    38fa:	80 91 7a 00 	lds	r24, 0x007A
    38fe:	86 fd       	sbrc	r24, 6
    3900:	fc cf       	rjmp	.-8      	; 0x38fa <ad_370c+0x4a>
    3902:	80 92 7a 00 	sts	0x007A, r8
    3906:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <wait5us>
    390a:	75 b8       	out	0x05, r7	; 5
    390c:	74 b8       	out	0x04, r7	; 4
    390e:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <wait20us>
    3912:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <wait5us>
    3916:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <wait1us>
    391a:	8f 93       	push	r24
    391c:	8f 91       	pop	r24
    391e:	a8 95       	wdr
    3920:	a8 95       	wdr
    3922:	14 b8       	out	0x04, r1	; 4
    3924:	15 b8       	out	0x05, r1	; 5

00003926 <ad_37f4>:
    3926:	80 91 7a 00 	lds	r24, 0x007A
    392a:	86 fd       	sbrc	r24, 6
    392c:	fc cf       	rjmp	.-8      	; 0x3926 <ad_37f4>
    392e:	40 91 78 00 	lds	r20, 0x0078
    3932:	50 91 79 00 	lds	r21, 0x0079
    3936:	14 b8       	out	0x04, r1	; 4
    3938:	cb 01       	movw	r24, r22
    393a:	82 0d       	add	r24, r2
    393c:	93 1d       	adc	r25, r3
    393e:	e8 0e       	add	r14, r24
    3940:	f9 1e       	adc	r15, r25
    3942:	01 1d       	adc	r16, r1
    3944:	11 1d       	adc	r17, r1
    3946:	ea 82       	std	Y+2, r14	; 0x02
    3948:	fb 82       	std	Y+3, r15	; 0x03
    394a:	0c 83       	std	Y+4, r16	; 0x04
    394c:	1d 83       	std	Y+5, r17	; 0x05
    394e:	88 89       	ldd	r24, Y+16	; 0x10
    3950:	99 89       	ldd	r25, Y+17	; 0x11
    3952:	84 0f       	add	r24, r20
    3954:	95 1f       	adc	r25, r21
    3956:	2e 81       	ldd	r18, Y+6	; 0x06
    3958:	3f 81       	ldd	r19, Y+7	; 0x07
    395a:	68 85       	ldd	r22, Y+8	; 0x08
    395c:	79 85       	ldd	r23, Y+9	; 0x09
    395e:	28 0f       	add	r18, r24
    3960:	39 1f       	adc	r19, r25
    3962:	61 1d       	adc	r22, r1
    3964:	71 1d       	adc	r23, r1
    3966:	2e 83       	std	Y+6, r18	; 0x06
    3968:	3f 83       	std	Y+7, r19	; 0x07
    396a:	68 87       	std	Y+8, r22	; 0x08
    396c:	79 87       	std	Y+9, r23	; 0x09
    396e:	24 e6       	ldi	r18, 0x64	; 100
    3970:	24 17       	cp	r18, r20
    3972:	15 06       	cpc	r1, r21
    3974:	50 f0       	brcs	.+20     	; 0x398a <is_ok1>
    3976:	75 b8       	out	0x05, r7	; 5
    3978:	74 b8       	out	0x04, r7	; 4
    397a:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <wait2us>
    397e:	14 b8       	out	0x04, r1	; 4
    3980:	15 b8       	out	0x05, r1	; 5
    3982:	88 8d       	ldd	r24, Y+24	; 0x18
    3984:	83 95       	inc	r24
    3986:	88 8f       	std	Y+24, r24	; 0x18
    3988:	07 c0       	rjmp	.+14     	; 0x3998 <is_ok1b>

0000398a <is_ok1>:
    398a:	48 3e       	cpi	r20, 0xE8	; 232
    398c:	73 e0       	ldi	r23, 0x03	; 3
    398e:	57 07       	cpc	r21, r23
    3990:	18 f0       	brcs	.+6      	; 0x3998 <is_ok1b>
    3992:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3994:	83 95       	inc	r24
    3996:	8a 8f       	std	Y+26, r24	; 0x1a

00003998 <is_ok1b>:
    3998:	88 89       	ldd	r24, Y+16	; 0x10
    399a:	99 89       	ldd	r25, Y+17	; 0x11
    399c:	28 17       	cp	r18, r24
    399e:	19 06       	cpc	r1, r25
    39a0:	b0 f0       	brcs	.+44     	; 0x39ce <is_ok2>
    39a2:	3e 85       	ldd	r19, Y+14	; 0x0e
    39a4:	37 b9       	out	0x07, r19	; 7
    39a6:	c5 b8       	out	0x05, r12	; 5
    39a8:	c4 b8       	out	0x04, r12	; 4
    39aa:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <wait2us>
    39ae:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <wait20us>
    39b2:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <wait5us>
    39b6:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <wait1us>
    39ba:	8f 93       	push	r24
    39bc:	8f 91       	pop	r24
    39be:	a8 95       	wdr
    39c0:	a8 95       	wdr
    39c2:	14 b8       	out	0x04, r1	; 4
    39c4:	15 b8       	out	0x05, r1	; 5
    39c6:	89 8d       	ldd	r24, Y+25	; 0x19
    39c8:	83 95       	inc	r24
    39ca:	89 8f       	std	Y+25, r24	; 0x19
    39cc:	07 c0       	rjmp	.+14     	; 0x39dc <is_ok2b>

000039ce <is_ok2>:
    39ce:	88 3e       	cpi	r24, 0xE8	; 232
    39d0:	73 e0       	ldi	r23, 0x03	; 3
    39d2:	97 07       	cpc	r25, r23
    39d4:	18 f0       	brcs	.+6      	; 0x39dc <is_ok2b>
    39d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    39d8:	83 95       	inc	r24
    39da:	8a 8f       	std	Y+26, r24	; 0x1a

000039dc <is_ok2b>:
    39dc:	d3 94       	inc	r13
    39de:	5d 2d       	mov	r21, r13
    39e0:	5f 3f       	cpi	r21, 0xFF	; 255
    39e2:	09 f0       	breq	.+2      	; 0x39e6 <ad_38ac>
    39e4:	34 cf       	rjmp	.-408    	; 0x384e <ad_3692>

000039e6 <ad_38ac>:
    39e6:	40 90 3f 01 	lds	r4, 0x013F
    39ea:	50 90 40 01 	lds	r5, 0x0140
    39ee:	44 0c       	add	r4, r4
    39f0:	55 1c       	adc	r5, r5
    39f2:	92 01       	movw	r18, r4
    39f4:	e4 e0       	ldi	r30, 0x04	; 4

000039f6 <ad_3924>:
    39f6:	24 0d       	add	r18, r4
    39f8:	35 1d       	adc	r19, r5
    39fa:	ea 95       	dec	r30
    39fc:	e1 f7       	brne	.-8      	; 0x39f6 <ad_3924>
    39fe:	29 01       	movw	r4, r18
    3a00:	57 01       	movw	r10, r14
    3a02:	68 01       	movw	r12, r16
    3a04:	6e 80       	ldd	r6, Y+6	; 0x06
    3a06:	7f 80       	ldd	r7, Y+7	; 0x07
    3a08:	88 84       	ldd	r8, Y+8	; 0x08
    3a0a:	99 84       	ldd	r9, Y+9	; 0x09
    3a0c:	20 91 09 01 	lds	r18, 0x0109
    3a10:	27 30       	cpi	r18, 0x07	; 7
    3a12:	c1 f4       	brne	.+48     	; 0x3a44 <no_sub>
    3a14:	6c 89       	ldd	r22, Y+20	; 0x14
    3a16:	7d 89       	ldd	r23, Y+21	; 0x15
    3a18:	8e 89       	ldd	r24, Y+22	; 0x16
    3a1a:	9f 89       	ldd	r25, Y+23	; 0x17
    3a1c:	9b 01       	movw	r18, r22
    3a1e:	ac 01       	movw	r20, r24
    3a20:	6d 5e       	subi	r22, 0xED	; 237
    3a22:	7f 4f       	sbci	r23, 0xFF	; 255
    3a24:	8f 4f       	sbci	r24, 0xFF	; 255
    3a26:	9f 4f       	sbci	r25, 0xFF	; 255
    3a28:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
    3a2c:	9b 01       	movw	r18, r22
    3a2e:	ac 01       	movw	r20, r24
    3a30:	6c e1       	ldi	r22, 0x1C	; 28
    3a32:	79 e3       	ldi	r23, 0x39	; 57
    3a34:	80 e9       	ldi	r24, 0x90	; 144
    3a36:	9a e1       	ldi	r25, 0x1A	; 26
    3a38:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
    3a3c:	62 1a       	sub	r6, r18
    3a3e:	73 0a       	sbc	r7, r19
    3a40:	84 0a       	sbc	r8, r20
    3a42:	95 0a       	sbc	r9, r21

00003a44 <no_sub>:
    3a44:	a6 14       	cp	r10, r6
    3a46:	b7 04       	cpc	r11, r7
    3a48:	c8 04       	cpc	r12, r8
    3a4a:	d9 04       	cpc	r13, r9
    3a4c:	28 f4       	brcc	.+10     	; 0x3a58 <ad_396c>
    3a4e:	6a 18       	sub	r6, r10
    3a50:	7b 08       	sbc	r7, r11
    3a52:	8c 08       	sbc	r8, r12
    3a54:	9d 08       	sbc	r9, r13
    3a56:	03 c0       	rjmp	.+6      	; 0x3a5e <ad_3972>

00003a58 <ad_396c>:
    3a58:	66 24       	eor	r6, r6
    3a5a:	77 24       	eor	r7, r7
    3a5c:	43 01       	movw	r8, r6

00003a5e <ad_3972>:
    3a5e:	b2 01       	movw	r22, r4
    3a60:	80 e0       	ldi	r24, 0x00	; 0
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	93 01       	movw	r18, r6
    3a66:	a4 01       	movw	r20, r8
    3a68:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
    3a6c:	95 01       	movw	r18, r10
    3a6e:	a6 01       	movw	r20, r12
    3a70:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
    3a74:	82 ed       	ldi	r24, 0xD2	; 210
    3a76:	91 e0       	ldi	r25, 0x01	; 1
    3a78:	79 81       	ldd	r23, Y+1	; 0x01
    3a7a:	87 0f       	add	r24, r23
    3a7c:	91 1d       	adc	r25, r1
    3a7e:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__eerd_byte_m168>
    3a82:	68 2e       	mov	r6, r24
    3a84:	c9 01       	movw	r24, r18
    3a86:	60 e1       	ldi	r22, 0x10	; 16
    3a88:	70 e0       	ldi	r23, 0x00	; 0
    3a8a:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__udivmodhi4>
    3a8e:	26 0f       	add	r18, r22
    3a90:	37 1f       	adc	r19, r23
    3a92:	c9 01       	movw	r24, r18
    3a94:	68 16       	cp	r6, r24
    3a96:	19 06       	cpc	r1, r25
    3a98:	18 f4       	brcc	.+6      	; 0x3aa0 <esr_too_less>
    3a9a:	86 19       	sub	r24, r6
    3a9c:	91 09       	sbc	r25, r1
    3a9e:	09 c0       	rjmp	.+18     	; 0x3ab2 <ad_exit>

00003aa0 <esr_too_less>:
    3aa0:	8c 5e       	subi	r24, 0xEC	; 236
    3aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    3aa4:	86 15       	cp	r24, r6
    3aa6:	91 05       	cpc	r25, r1
    3aa8:	10 f4       	brcc	.+4      	; 0x3aae <esr_too_less2>
    3aaa:	0e 94 3b 06 	call	0xc76	; 0xc76 <mark_as_uncalibrated>

00003aae <esr_too_less2>:
    3aae:	81 2d       	mov	r24, r1
    3ab0:	91 2d       	mov	r25, r1

00003ab2 <ad_exit>:
    3ab2:	6e 96       	adiw	r28, 0x1e	; 30
    3ab4:	0f b6       	in	r0, 0x3f	; 63
    3ab6:	f8 94       	cli
    3ab8:	de bf       	out	0x3e, r29	; 62
    3aba:	0f be       	out	0x3f, r0	; 63
    3abc:	cd bf       	out	0x3d, r28	; 61
    3abe:	cf 91       	pop	r28
    3ac0:	df 91       	pop	r29
    3ac2:	1f 91       	pop	r17
    3ac4:	0f 91       	pop	r16
    3ac6:	ff 90       	pop	r15
    3ac8:	ef 90       	pop	r14
    3aca:	df 90       	pop	r13
    3acc:	cf 90       	pop	r12
    3ace:	bf 90       	pop	r11
    3ad0:	af 90       	pop	r10
    3ad2:	9f 90       	pop	r9
    3ad4:	8f 90       	pop	r8
    3ad6:	7f 90       	pop	r7
    3ad8:	6f 90       	pop	r6
    3ada:	5f 90       	pop	r5
    3adc:	4f 90       	pop	r4
    3ade:	3f 90       	pop	r3
    3ae0:	2f 90       	pop	r2
    3ae2:	08 95       	ret

00003ae4 <GetVloss>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void GetVloss() {
    3ae4:	cf 92       	push	r12
    3ae6:	df 92       	push	r13
    3ae8:	ef 92       	push	r14
    3aea:	ff 92       	push	r15
    3aec:	0f 93       	push	r16
    3aee:	1f 93       	push	r17
    3af0:	cf 93       	push	r28
    3af2:	df 93       	push	r29
  } lval;
  uint8_t ii;
  uint8_t HiPinR_L;
  uint8_t LoADC;

  if (cap.v_loss > 0) return;		// Voltage loss is already known
    3af4:	80 91 7a 01 	lds	r24, 0x017A
    3af8:	90 91 7b 01 	lds	r25, 0x017B
    3afc:	00 97       	sbiw	r24, 0x00	; 0
    3afe:	09 f0       	breq	.+2      	; 0x3b02 <GetVloss+0x1e>
    3b00:	a2 c0       	rjmp	.+324    	; 0x3c46 <GetVloss+0x162>
  LoADC = pgm_read_byte(&PinADCtab[cap.ca]) | TXD_MSK;
    3b02:	e0 91 7c 01 	lds	r30, 0x017C
    3b06:	f0 e0       	ldi	r31, 0x00	; 0
    3b08:	e9 50       	subi	r30, 0x09	; 9
    3b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0c:	04 91       	lpm	r16, Z+
    3b0e:	08 60       	ori	r16, 0x08	; 8
  HiPinR_L = pgm_read_byte(&PinRLtab[cap.cb]);	//R_L mask for HighPin R_L load
    3b10:	e0 91 7d 01 	lds	r30, 0x017D
    3b14:	f0 e0       	ldi	r31, 0x00	; 0
    3b16:	ec 50       	subi	r30, 0x0C	; 12
    3b18:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1a:	14 91       	lpm	r17, Z+

  EntladePins();			// discharge capacitor
    3b1c:	0e 94 37 0c 	call	0x186e	; 0x186e <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    3b20:	88 e0       	ldi	r24, 0x08	; 8
    3b22:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    3b24:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    3b26:	07 b9       	out	0x07, r16	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    3b28:	14 b9       	out	0x04, r17	; 4
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
    3b2a:	80 91 7d 01 	lds	r24, 0x017D
    3b2e:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
    3b32:	ec 01       	movw	r28, r24
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
    3b34:	00 91 7f 01 	lds	r16, 0x017F
    3b38:	08 3f       	cpi	r16, 0xF8	; 248
    3b3a:	0c f0       	brlt	.+2      	; 0x3b3e <GetVloss+0x5a>
    3b3c:	84 c0       	rjmp	.+264    	; 0x3c46 <GetVloss+0x162>
  lval.dw = cap.cval_max;
    3b3e:	20 91 70 01 	lds	r18, 0x0170
    3b42:	30 91 71 01 	lds	r19, 0x0171
    3b46:	40 91 72 01 	lds	r20, 0x0172
    3b4a:	50 91 73 01 	lds	r21, 0x0173
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    3b4e:	04 5f       	subi	r16, 0xF4	; 244
     lval.dw = (lval.dw + 5) / 10;
    3b50:	8a e0       	ldi	r24, 0x0A	; 10
    3b52:	c8 2e       	mov	r12, r24
    3b54:	d1 2c       	mov	r13, r1
    3b56:	e1 2c       	mov	r14, r1
    3b58:	f1 2c       	mov	r15, r1
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
  lval.dw = cap.cval_max;
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    3b5a:	0b c0       	rjmp	.+22     	; 0x3b72 <GetVloss+0x8e>
     lval.dw = (lval.dw + 5) / 10;
    3b5c:	ca 01       	movw	r24, r20
    3b5e:	b9 01       	movw	r22, r18
    3b60:	6b 5f       	subi	r22, 0xFB	; 251
    3b62:	7f 4f       	sbci	r23, 0xFF	; 255
    3b64:	8f 4f       	sbci	r24, 0xFF	; 255
    3b66:	9f 4f       	sbci	r25, 0xFF	; 255
    3b68:	a7 01       	movw	r20, r14
    3b6a:	96 01       	movw	r18, r12
    3b6c:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
  lval.dw = cap.cval_max;
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    3b70:	0f 5f       	subi	r16, 0xFF	; 255
    3b72:	04 30       	cpi	r16, 0x04	; 4
    3b74:	98 f3       	brcs	.-26     	; 0x3b5c <GetVloss+0x78>
    3b76:	79 01       	movw	r14, r18
     lval.dw = (lval.dw + 5) / 10;
  }
//  if ((lval.dw == 0) || (lval.dw > 500)) {
  if ((lval.dw == 0) || (lval.dw > 5000)) {
    3b78:	21 50       	subi	r18, 0x01	; 1
    3b7a:	30 40       	sbci	r19, 0x00	; 0
    3b7c:	40 40       	sbci	r20, 0x00	; 0
    3b7e:	50 40       	sbci	r21, 0x00	; 0
    3b80:	28 38       	cpi	r18, 0x88	; 136
    3b82:	83 e1       	ldi	r24, 0x13	; 19
    3b84:	38 07       	cpc	r19, r24
    3b86:	80 e0       	ldi	r24, 0x00	; 0
    3b88:	48 07       	cpc	r20, r24
    3b8a:	80 e0       	ldi	r24, 0x00	; 0
    3b8c:	58 07       	cpc	r21, r24
    3b8e:	08 f0       	brcs	.+2      	; 0x3b92 <GetVloss+0xae>
    3b90:	5a c0       	rjmp	.+180    	; 0x3c46 <GetVloss+0x162>
     /* capacity more than 50uF, Voltage loss is already measured  */
     return;
  }
  R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    3b92:	15 b9       	out	0x05, r17	; 5
  R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    3b94:	14 b9       	out	0x04, r17	; 4
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    3b96:	00 e0       	ldi	r16, 0x00	; 0
    3b98:	10 e0       	ldi	r17, 0x00	; 0
    3b9a:	04 c0       	rjmp	.+8      	; 0x3ba4 <GetVloss+0xc0>
//     wait50us();			// wait exactly 50us
     wait5us();			// wait exactly 5us
    3b9c:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <wait5us>
     /* capacity more than 50uF, Voltage loss is already measured  */
     return;
  }
  R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
  R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    3ba0:	0e 5f       	subi	r16, 0xFE	; 254
    3ba2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ba4:	67 01       	movw	r12, r14
    3ba6:	0e 15       	cp	r16, r14
    3ba8:	1f 05       	cpc	r17, r15
    3baa:	c0 f3       	brcs	.-16     	; 0x3b9c <GetVloss+0xb8>
//     wait50us();			// wait exactly 50us
     wait5us();			// wait exactly 5us
  }
  R_DDR = 0;				// switch back to input
    3bac:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// no Pull up
    3bae:	15 b8       	out	0x05, r1	; 5
 // wait10us();			//wait a little time
  wdt_reset();
    3bb0:	a8 95       	wdr
  // read voltage without current
  ADCconfig.Samples = 5;		// set ADC to only 5 samples
    3bb2:	85 e0       	ldi	r24, 0x05	; 5
    3bb4:	80 93 33 01 	sts	0x0133, r24
  adcv[2] = ReadADC(cap.cb);
    3bb8:	80 91 7d 01 	lds	r24, 0x017D
    3bbc:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
  if (adcv[2] > adcv[0]) {
    3bc0:	c8 17       	cp	r28, r24
    3bc2:	d9 07       	cpc	r29, r25
    3bc4:	20 f4       	brcc	.+8      	; 0x3bce <GetVloss+0xea>
     adcv[2] -= adcv[0];		//difference to beginning voltage
    3bc6:	8c 01       	movw	r16, r24
    3bc8:	0c 1b       	sub	r16, r28
    3bca:	1d 0b       	sbc	r17, r29
    3bcc:	02 c0       	rjmp	.+4      	; 0x3bd2 <GetVloss+0xee>
  } else {
     adcv[2] = 0;			// voltage is lower or same as beginning voltage
    3bce:	00 e0       	ldi	r16, 0x00	; 0
    3bd0:	10 e0       	ldi	r17, 0x00	; 0
  }
  // wait 2x the time which was required for loading
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    3bd2:	ee 24       	eor	r14, r14
    3bd4:	ff 24       	eor	r15, r15
    3bd6:	05 c0       	rjmp	.+10     	; 0x3be2 <GetVloss+0xfe>
//     wait50us();
     wait5us();
    3bd8:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <wait5us>
     adcv[2] -= adcv[0];		//difference to beginning voltage
  } else {
     adcv[2] = 0;			// voltage is lower or same as beginning voltage
  }
  // wait 2x the time which was required for loading
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    3bdc:	08 94       	sec
    3bde:	e1 1c       	adc	r14, r1
    3be0:	f1 1c       	adc	r15, r1
    3be2:	ec 14       	cp	r14, r12
    3be4:	fd 04       	cpc	r15, r13
    3be6:	c0 f3       	brcs	.-16     	; 0x3bd8 <GetVloss+0xf4>
//     wait50us();
     wait5us();
  }
  adcv[3] = ReadADC(cap.cb);	// read voltage again, is discharged only a little bit ?
    3be8:	80 91 7d 01 	lds	r24, 0x017D
    3bec:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
  ADCconfig.Samples = ANZ_MESS;		// set ADC back to configured No. of samples
    3bf0:	29 e1       	ldi	r18, 0x19	; 25
    3bf2:	20 93 33 01 	sts	0x0133, r18
  wdt_reset();
    3bf6:	a8 95       	wdr
  if (adcv[3] > adcv[0]) {
    3bf8:	c8 17       	cp	r28, r24
    3bfa:	d9 07       	cpc	r29, r25
    3bfc:	18 f4       	brcc	.+6      	; 0x3c04 <GetVloss+0x120>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    3bfe:	8c 1b       	sub	r24, r28
    3c00:	9d 0b       	sbc	r25, r29
    3c02:	02 c0       	rjmp	.+4      	; 0x3c08 <GetVloss+0x124>
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    3c04:	80 e0       	ldi	r24, 0x00	; 0
    3c06:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
    3c08:	80 17       	cp	r24, r16
    3c0a:	91 07       	cpc	r25, r17
    3c0c:	a8 f4       	brcc	.+42     	; 0x3c38 <GetVloss+0x154>
     // build difference to load voltage
     adcv[1] = adcv[2] - adcv[3];	// lost voltage during load time wait
    3c0e:	b8 01       	movw	r22, r16
    3c10:	68 1b       	sub	r22, r24
    3c12:	79 0b       	sbc	r23, r25
  } else {
     adcv[1] = 0;			// no lost voltage
  }
  // compute voltage drop as part from loaded voltage
  if (adcv[1] > 0) {
    3c14:	89 f0       	breq	.+34     	; 0x3c38 <GetVloss+0x154>
     // there is any voltage drop (adcv[1]) !
     // adcv[2] is the loaded voltage.
     cap.v_loss = (unsigned long)(adcv[1] * 500UL) / adcv[2];
    3c16:	80 e0       	ldi	r24, 0x00	; 0
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	24 ef       	ldi	r18, 0xF4	; 244
    3c1c:	31 e0       	ldi	r19, 0x01	; 1
    3c1e:	40 e0       	ldi	r20, 0x00	; 0
    3c20:	50 e0       	ldi	r21, 0x00	; 0
    3c22:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
    3c26:	98 01       	movw	r18, r16
    3c28:	40 e0       	ldi	r20, 0x00	; 0
    3c2a:	50 e0       	ldi	r21, 0x00	; 0
    3c2c:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
    3c30:	30 93 7b 01 	sts	0x017B, r19
    3c34:	20 93 7a 01 	sts	0x017A, r18
  lcd_line4();
  DisplayValue(lval.w[0],0,'x',4);
#endif

  // discharge capacitor again
  EntladePins();		// discharge capacitors
    3c38:	0e 94 37 0c 	call	0x186e	; 0x186e <EntladePins>
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    3c3c:	88 e0       	ldi	r24, 0x08	; 8
    3c3e:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    3c40:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    3c42:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    3c44:	15 b8       	out	0x05, r1	; 5
#endif
  return;
 } // end GetVdrop()
    3c46:	df 91       	pop	r29
    3c48:	cf 91       	pop	r28
    3c4a:	1f 91       	pop	r17
    3c4c:	0f 91       	pop	r16
    3c4e:	ff 90       	pop	r15
    3c50:	ef 90       	pop	r14
    3c52:	df 90       	pop	r13
    3c54:	cf 90       	pop	r12
    3c56:	08 95       	ret

00003c58 <Calibrate_UR>:
#include "Transistortester.h"
void Calibrate_UR(void) {
    3c58:	8f 92       	push	r8
    3c5a:	9f 92       	push	r9
    3c5c:	af 92       	push	r10
    3c5e:	bf 92       	push	r11
    3c60:	cf 92       	push	r12
    3c62:	df 92       	push	r13
    3c64:	ef 92       	push	r14
    3c66:	ff 92       	push	r15
    3c68:	0f 93       	push	r16
    3c6a:	1f 93       	push	r17
    3c6c:	cf 93       	push	r28
    3c6e:	df 93       	push	r29
  uint16_t sum_rp;	// sum of 3 Pin voltages with 680 Ohm load
  uint16_t u680;	// 3 * (Voltage at 680 Ohm)
#endif


  ADCconfig.U_AVCC = U_VCC;     // set initial VCC Voltage
    3c70:	88 e8       	ldi	r24, 0x88	; 136
    3c72:	93 e1       	ldi	r25, 0x13	; 19
    3c74:	90 93 38 01 	sts	0x0138, r25
    3c78:	80 93 37 01 	sts	0x0137, r24
  ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    3c7c:	8e eb       	ldi	r24, 0xBE	; 190
    3c7e:	80 93 33 01 	sts	0x0133, r24
                                        //############################################
#if FLASHEND > 0x1fff
  uint16_t mv2500;
  ADC_PORT = TXD_VAL;                   // switch to 0V
    3c82:	08 e0       	ldi	r16, 0x08	; 8
    3c84:	08 b9       	out	0x08, r16	; 8
  ADC_DDR = (1<<TPREF) | TXD_MSK;       // switch pin with 2.5V reference to GND
    3c86:	88 e1       	ldi	r24, 0x18	; 24
    3c88:	87 b9       	out	0x07, r24	; 7
  wait20us();			// switch only short time, so that the relais do not really switch
    3c8a:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <wait20us>
  ADC_DDR =  TXD_MSK;		// switch pin with reference back to input
    3c8e:	07 b9       	out	0x07, r16	; 7
  mv2500 = W5msReadADC(TPREF); // read voltage of 2.5V precision reference
    3c90:	84 e0       	ldi	r24, 0x04	; 4
    3c92:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    3c96:	ec 01       	movw	r28, r24
  if ((mv2500 > 2250) && (mv2500 < 2750)) {
    3c98:	8b 5c       	subi	r24, 0xCB	; 203
    3c9a:	98 40       	sbci	r25, 0x08	; 8
    3c9c:	21 e0       	ldi	r18, 0x01	; 1
    3c9e:	83 3f       	cpi	r24, 0xF3	; 243
    3ca0:	92 07       	cpc	r25, r18
    3ca2:	c0 f4       	brcc	.+48     	; 0x3cd4 <Calibrate_UR+0x7c>
     // precision voltage reference connected, update U_AVCC
     WithReference = 1;
    3ca4:	81 e0       	ldi	r24, 0x01	; 1
    3ca6:	80 93 41 01 	sts	0x0141, r24
     ADCconfig.U_AVCC = (unsigned long)((unsigned long)ADCconfig.U_AVCC * 2495) / mv2500;
    3caa:	60 91 37 01 	lds	r22, 0x0137
    3cae:	70 91 38 01 	lds	r23, 0x0138
    3cb2:	80 e0       	ldi	r24, 0x00	; 0
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	2f eb       	ldi	r18, 0xBF	; 191
    3cb8:	39 e0       	ldi	r19, 0x09	; 9
    3cba:	40 e0       	ldi	r20, 0x00	; 0
    3cbc:	50 e0       	ldi	r21, 0x00	; 0
    3cbe:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
    3cc2:	9e 01       	movw	r18, r28
    3cc4:	40 e0       	ldi	r20, 0x00	; 0
    3cc6:	50 e0       	ldi	r21, 0x00	; 0
    3cc8:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
    3ccc:	30 93 38 01 	sts	0x0138, r19
    3cd0:	20 93 37 01 	sts	0x0137, r18
  }
#endif
#ifdef WITH_AUTO_REF
  (void) ReadADC(MUX_INT_REF);	// read reference voltage 
    3cd4:	8e e0       	ldi	r24, 0x0E	; 14
    3cd6:	0e 94 df 14 	call	0x29be	; 0x29be <ReadADC>
  ref_mv = W5msReadADC(MUX_INT_REF);	// read reference voltage 
    3cda:	8e e0       	ldi	r24, 0x0E	; 14
    3cdc:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    3ce0:	90 93 3c 01 	sts	0x013C, r25
    3ce4:	80 93 3b 01 	sts	0x013B, r24
  RefVoltage();			//compute RHmultip = f(reference voltage)
    3ce8:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <RefVoltage>
#else
  ref_mv = DEFAULT_BAND_GAP;    // set to default Reference Voltage
#endif
  ADCconfig.U_Bandgap = ADC_internal_reference; // set internal reference voltage for ADC
    3cec:	88 ec       	ldi	r24, 0xC8	; 200
    3cee:	91 e0       	ldi	r25, 0x01	; 1
    3cf0:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <__eerd_byte_m168>
    3cf4:	99 27       	eor	r25, r25
    3cf6:	87 fd       	sbrc	r24, 7
    3cf8:	90 95       	com	r25
    3cfa:	20 91 3b 01 	lds	r18, 0x013B
    3cfe:	30 91 3c 01 	lds	r19, 0x013C
    3d02:	82 0f       	add	r24, r18
    3d04:	93 1f       	adc	r25, r19
    3d06:	90 93 36 01 	sts	0x0136, r25
    3d0a:	80 93 35 01 	sts	0x0135, r24
                                        //############################################

#ifdef AUTO_CAL
  // measurement of internal resistance of the ADC port outputs switched to GND
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    3d0e:	79 e0       	ldi	r23, 0x09	; 9
    3d10:	d7 2e       	mov	r13, r23
    3d12:	d7 b8       	out	0x07, r13	; 7
  R_PORT = 1<<PIN_RL1;		//R_L-PORT 1 to VCC
    3d14:	aa 24       	eor	r10, r10
    3d16:	a3 94       	inc	r10
    3d18:	a5 b8       	out	0x05, r10	; 5
  R_DDR = 1<<PIN_RL1;		//Pin 1 to output and over R_L to VCC
    3d1a:	a4 b8       	out	0x04, r10	; 4
  sum_rm = W5msReadADC(TP1);
    3d1c:	80 e0       	ldi	r24, 0x00	; 0
    3d1e:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    3d22:	8c 01       	movw	r16, r24

  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin 2 to output 0V
    3d24:	6a e0       	ldi	r22, 0x0A	; 10
    3d26:	86 2e       	mov	r8, r22
    3d28:	87 b8       	out	0x07, r8	; 7
  R_PORT =  1<<PIN_RL2;		//R_L-PORT 2 to VCC
    3d2a:	54 e0       	ldi	r21, 0x04	; 4
    3d2c:	c5 2e       	mov	r12, r21
    3d2e:	c5 b8       	out	0x05, r12	; 5
  R_DDR = 1<<PIN_RL2;		//Pin 2 to output and over R_L to VCC
    3d30:	c4 b8       	out	0x04, r12	; 4
  sum_rm += W5msReadADC(TP2);
    3d32:	81 e0       	ldi	r24, 0x01	; 1
    3d34:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    3d38:	08 0f       	add	r16, r24
    3d3a:	19 1f       	adc	r17, r25

  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin 3 to output 0V
    3d3c:	4c e0       	ldi	r20, 0x0C	; 12
    3d3e:	f4 2e       	mov	r15, r20
    3d40:	f7 b8       	out	0x07, r15	; 7
  R_PORT =  1<<PIN_RL3;		//R_L-PORT 3 to VCC
    3d42:	30 e1       	ldi	r19, 0x10	; 16
    3d44:	e3 2e       	mov	r14, r19
    3d46:	e5 b8       	out	0x05, r14	; 5
  R_DDR = 1<<PIN_RL3;		//Pin 3 to output and over R_L to VCC
    3d48:	e4 b8       	out	0x04, r14	; 4
  sum_rm += W5msReadADC(TP3);	//add all three values
    3d4a:	82 e0       	ldi	r24, 0x02	; 2
    3d4c:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    3d50:	08 0f       	add	r16, r24
    3d52:	19 1f       	adc	r17, r25

  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
    3d54:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
    3d56:	d8 b8       	out	0x08, r13	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    3d58:	d7 b8       	out	0x07, r13	; 7
  R_DDR = 1<<PIN_RL1;		//Pin 1 to output and over R_L to GND
    3d5a:	a4 b8       	out	0x04, r10	; 4
  sum_rp = ADCconfig.U_AVCC - W5msReadADC(TP1);
    3d5c:	c0 91 37 01 	lds	r28, 0x0137
    3d60:	d0 91 38 01 	lds	r29, 0x0138
    3d64:	80 e0       	ldi	r24, 0x00	; 0
    3d66:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    3d6a:	5c 01       	movw	r10, r24
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
    3d6c:	88 b8       	out	0x08, r8	; 8
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
    3d6e:	87 b8       	out	0x07, r8	; 7
  R_DDR = 1<<PIN_RL2;		//Pin 2 to output and over R_L to GND
    3d70:	c4 b8       	out	0x04, r12	; 4
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP2);
    3d72:	c0 90 37 01 	lds	r12, 0x0137
    3d76:	d0 90 38 01 	lds	r13, 0x0138
    3d7a:	81 e0       	ldi	r24, 0x01	; 1
    3d7c:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
    3d80:	4c 01       	movw	r8, r24

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
    3d82:	f8 b8       	out	0x08, r15	; 8
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
    3d84:	f7 b8       	out	0x07, r15	; 7
  R_DDR = 1<<PIN_RL3;		//Pin 3 to output and over R_L to GND
    3d86:	e4 b8       	out	0x04, r14	; 4
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP3);
    3d88:	e0 90 37 01 	lds	r14, 0x0137
    3d8c:	f0 90 38 01 	lds	r15, 0x0138
    3d90:	82 e0       	ldi	r24, 0x02	; 2
    3d92:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <W5msReadADC>
  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
  R_DDR = 1<<PIN_RL1;		//Pin 1 to output and over R_L to GND
  sum_rp = ADCconfig.U_AVCC - W5msReadADC(TP1);
    3d96:	cc 0d       	add	r28, r12
    3d98:	dd 1d       	adc	r29, r13
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
  R_DDR = 1<<PIN_RL2;		//Pin 2 to output and over R_L to GND
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP2);
    3d9a:	ce 0d       	add	r28, r14
    3d9c:	df 1d       	adc	r29, r15
    3d9e:	ca 19       	sub	r28, r10
    3da0:	db 09       	sbc	r29, r11

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
  R_DDR = 1<<PIN_RL3;		//Pin 3 to output and over R_L to GND
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP3);
    3da2:	c8 19       	sub	r28, r8
    3da4:	d9 09       	sbc	r29, r9
    3da6:	c8 1b       	sub	r28, r24
    3da8:	d9 0b       	sbc	r29, r25

  u680 = ((ADCconfig.U_AVCC * 3) - sum_rm - sum_rp);	//three times the voltage at the 680 Ohm
    3daa:	80 91 37 01 	lds	r24, 0x0137
    3dae:	90 91 38 01 	lds	r25, 0x0138
    3db2:	6c 01       	movw	r12, r24
    3db4:	cc 0c       	add	r12, r12
    3db6:	dd 1c       	adc	r13, r13
    3db8:	c8 0e       	add	r12, r24
    3dba:	d9 1e       	adc	r13, r25
    3dbc:	c0 1a       	sub	r12, r16
    3dbe:	d1 0a       	sbc	r13, r17
    3dc0:	cc 1a       	sub	r12, r28
    3dc2:	dd 0a       	sbc	r13, r29
  pin_rmi = (unsigned long)((unsigned long)sum_rm * (unsigned long)R_L_VAL) / (unsigned long)u680;
    3dc4:	ee 24       	eor	r14, r14
    3dc6:	ff 24       	eor	r15, r15
    3dc8:	b8 01       	movw	r22, r16
    3dca:	80 e0       	ldi	r24, 0x00	; 0
    3dcc:	90 e0       	ldi	r25, 0x00	; 0
    3dce:	20 e9       	ldi	r18, 0x90	; 144
    3dd0:	3a e1       	ldi	r19, 0x1A	; 26
    3dd2:	40 e0       	ldi	r20, 0x00	; 0
    3dd4:	50 e0       	ldi	r21, 0x00	; 0
    3dd6:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
    3dda:	a7 01       	movw	r20, r14
    3ddc:	96 01       	movw	r18, r12
    3dde:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
    3de2:	89 01       	movw	r16, r18
    3de4:	30 93 40 01 	sts	0x0140, r19
    3de8:	20 93 3f 01 	sts	0x013F, r18
//  adcmv[2] = pin_rm;	// for last output in row 2
  pin_rpl = (unsigned long)((unsigned long)sum_rp * (unsigned long)R_L_VAL) / (unsigned long)u680;
    3dec:	be 01       	movw	r22, r28
    3dee:	80 e0       	ldi	r24, 0x00	; 0
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	20 e9       	ldi	r18, 0x90	; 144
    3df4:	3a e1       	ldi	r19, 0x1A	; 26
    3df6:	40 e0       	ldi	r20, 0x00	; 0
    3df8:	50 e0       	ldi	r21, 0x00	; 0
    3dfa:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <__mulsi3>
    3dfe:	a7 01       	movw	r20, r14
    3e00:	96 01       	movw	r18, r12
    3e02:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__udivmodsi4>
    3e06:	c9 01       	movw	r24, r18
    3e08:	30 93 3a 01 	sts	0x013A, r19
    3e0c:	20 93 39 01 	sts	0x0139, r18
  resis680pl = pin_rpl + R_L_VAL;
    3e10:	80 57       	subi	r24, 0x70	; 112
    3e12:	95 4e       	sbci	r25, 0xE5	; 229
    3e14:	90 93 0b 01 	sts	0x010B, r25
    3e18:	80 93 0a 01 	sts	0x010A, r24
  resis680mi = pin_rmi + R_L_VAL;
    3e1c:	00 57       	subi	r16, 0x70	; 112
    3e1e:	15 4e       	sbci	r17, 0xE5	; 229
    3e20:	10 93 04 01 	sts	0x0104, r17
    3e24:	00 93 03 01 	sts	0x0103, r16
#endif

  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    3e28:	89 e1       	ldi	r24, 0x19	; 25
    3e2a:	80 93 33 01 	sts	0x0133, r24
 } 
    3e2e:	df 91       	pop	r29
    3e30:	cf 91       	pop	r28
    3e32:	1f 91       	pop	r17
    3e34:	0f 91       	pop	r16
    3e36:	ff 90       	pop	r15
    3e38:	ef 90       	pop	r14
    3e3a:	df 90       	pop	r13
    3e3c:	cf 90       	pop	r12
    3e3e:	bf 90       	pop	r11
    3e40:	af 90       	pop	r10
    3e42:	9f 90       	pop	r9
    3e44:	8f 90       	pop	r8
    3e46:	08 95       	ret

00003e48 <__mulsi3>:
    3e48:	62 9f       	mul	r22, r18
    3e4a:	d0 01       	movw	r26, r0
    3e4c:	73 9f       	mul	r23, r19
    3e4e:	f0 01       	movw	r30, r0
    3e50:	82 9f       	mul	r24, r18
    3e52:	e0 0d       	add	r30, r0
    3e54:	f1 1d       	adc	r31, r1
    3e56:	64 9f       	mul	r22, r20
    3e58:	e0 0d       	add	r30, r0
    3e5a:	f1 1d       	adc	r31, r1
    3e5c:	92 9f       	mul	r25, r18
    3e5e:	f0 0d       	add	r31, r0
    3e60:	83 9f       	mul	r24, r19
    3e62:	f0 0d       	add	r31, r0
    3e64:	74 9f       	mul	r23, r20
    3e66:	f0 0d       	add	r31, r0
    3e68:	65 9f       	mul	r22, r21
    3e6a:	f0 0d       	add	r31, r0
    3e6c:	99 27       	eor	r25, r25
    3e6e:	72 9f       	mul	r23, r18
    3e70:	b0 0d       	add	r27, r0
    3e72:	e1 1d       	adc	r30, r1
    3e74:	f9 1f       	adc	r31, r25
    3e76:	63 9f       	mul	r22, r19
    3e78:	b0 0d       	add	r27, r0
    3e7a:	e1 1d       	adc	r30, r1
    3e7c:	f9 1f       	adc	r31, r25
    3e7e:	bd 01       	movw	r22, r26
    3e80:	cf 01       	movw	r24, r30
    3e82:	11 24       	eor	r1, r1
    3e84:	08 95       	ret

00003e86 <__udivmodqi4>:
    3e86:	99 1b       	sub	r25, r25
    3e88:	79 e0       	ldi	r23, 0x09	; 9
    3e8a:	04 c0       	rjmp	.+8      	; 0x3e94 <__udivmodqi4_ep>

00003e8c <__udivmodqi4_loop>:
    3e8c:	99 1f       	adc	r25, r25
    3e8e:	96 17       	cp	r25, r22
    3e90:	08 f0       	brcs	.+2      	; 0x3e94 <__udivmodqi4_ep>
    3e92:	96 1b       	sub	r25, r22

00003e94 <__udivmodqi4_ep>:
    3e94:	88 1f       	adc	r24, r24
    3e96:	7a 95       	dec	r23
    3e98:	c9 f7       	brne	.-14     	; 0x3e8c <__udivmodqi4_loop>
    3e9a:	80 95       	com	r24
    3e9c:	08 95       	ret

00003e9e <__udivmodhi4>:
    3e9e:	aa 1b       	sub	r26, r26
    3ea0:	bb 1b       	sub	r27, r27
    3ea2:	51 e1       	ldi	r21, 0x11	; 17
    3ea4:	07 c0       	rjmp	.+14     	; 0x3eb4 <__udivmodhi4_ep>

00003ea6 <__udivmodhi4_loop>:
    3ea6:	aa 1f       	adc	r26, r26
    3ea8:	bb 1f       	adc	r27, r27
    3eaa:	a6 17       	cp	r26, r22
    3eac:	b7 07       	cpc	r27, r23
    3eae:	10 f0       	brcs	.+4      	; 0x3eb4 <__udivmodhi4_ep>
    3eb0:	a6 1b       	sub	r26, r22
    3eb2:	b7 0b       	sbc	r27, r23

00003eb4 <__udivmodhi4_ep>:
    3eb4:	88 1f       	adc	r24, r24
    3eb6:	99 1f       	adc	r25, r25
    3eb8:	5a 95       	dec	r21
    3eba:	a9 f7       	brne	.-22     	; 0x3ea6 <__udivmodhi4_loop>
    3ebc:	80 95       	com	r24
    3ebe:	90 95       	com	r25
    3ec0:	bc 01       	movw	r22, r24
    3ec2:	cd 01       	movw	r24, r26
    3ec4:	08 95       	ret

00003ec6 <__udivmodsi4>:
    3ec6:	a1 e2       	ldi	r26, 0x21	; 33
    3ec8:	1a 2e       	mov	r1, r26
    3eca:	aa 1b       	sub	r26, r26
    3ecc:	bb 1b       	sub	r27, r27
    3ece:	fd 01       	movw	r30, r26
    3ed0:	0d c0       	rjmp	.+26     	; 0x3eec <__udivmodsi4_ep>

00003ed2 <__udivmodsi4_loop>:
    3ed2:	aa 1f       	adc	r26, r26
    3ed4:	bb 1f       	adc	r27, r27
    3ed6:	ee 1f       	adc	r30, r30
    3ed8:	ff 1f       	adc	r31, r31
    3eda:	a2 17       	cp	r26, r18
    3edc:	b3 07       	cpc	r27, r19
    3ede:	e4 07       	cpc	r30, r20
    3ee0:	f5 07       	cpc	r31, r21
    3ee2:	20 f0       	brcs	.+8      	; 0x3eec <__udivmodsi4_ep>
    3ee4:	a2 1b       	sub	r26, r18
    3ee6:	b3 0b       	sbc	r27, r19
    3ee8:	e4 0b       	sbc	r30, r20
    3eea:	f5 0b       	sbc	r31, r21

00003eec <__udivmodsi4_ep>:
    3eec:	66 1f       	adc	r22, r22
    3eee:	77 1f       	adc	r23, r23
    3ef0:	88 1f       	adc	r24, r24
    3ef2:	99 1f       	adc	r25, r25
    3ef4:	1a 94       	dec	r1
    3ef6:	69 f7       	brne	.-38     	; 0x3ed2 <__udivmodsi4_loop>
    3ef8:	60 95       	com	r22
    3efa:	70 95       	com	r23
    3efc:	80 95       	com	r24
    3efe:	90 95       	com	r25
    3f00:	9b 01       	movw	r18, r22
    3f02:	ac 01       	movw	r20, r24
    3f04:	bd 01       	movw	r22, r26
    3f06:	cf 01       	movw	r24, r30
    3f08:	08 95       	ret

00003f0a <__divmodsi4>:
    3f0a:	97 fb       	bst	r25, 7
    3f0c:	09 2e       	mov	r0, r25
    3f0e:	05 26       	eor	r0, r21
    3f10:	0e d0       	rcall	.+28     	; 0x3f2e <__divmodsi4_neg1>
    3f12:	57 fd       	sbrc	r21, 7
    3f14:	04 d0       	rcall	.+8      	; 0x3f1e <__divmodsi4_neg2>
    3f16:	d7 df       	rcall	.-82     	; 0x3ec6 <__udivmodsi4>
    3f18:	0a d0       	rcall	.+20     	; 0x3f2e <__divmodsi4_neg1>
    3f1a:	00 1c       	adc	r0, r0
    3f1c:	38 f4       	brcc	.+14     	; 0x3f2c <__divmodsi4_exit>

00003f1e <__divmodsi4_neg2>:
    3f1e:	50 95       	com	r21
    3f20:	40 95       	com	r20
    3f22:	30 95       	com	r19
    3f24:	21 95       	neg	r18
    3f26:	3f 4f       	sbci	r19, 0xFF	; 255
    3f28:	4f 4f       	sbci	r20, 0xFF	; 255
    3f2a:	5f 4f       	sbci	r21, 0xFF	; 255

00003f2c <__divmodsi4_exit>:
    3f2c:	08 95       	ret

00003f2e <__divmodsi4_neg1>:
    3f2e:	f6 f7       	brtc	.-4      	; 0x3f2c <__divmodsi4_exit>
    3f30:	90 95       	com	r25
    3f32:	80 95       	com	r24
    3f34:	70 95       	com	r23
    3f36:	61 95       	neg	r22
    3f38:	7f 4f       	sbci	r23, 0xFF	; 255
    3f3a:	8f 4f       	sbci	r24, 0xFF	; 255
    3f3c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f3e:	08 95       	ret

00003f40 <utoa>:
    3f40:	fb 01       	movw	r30, r22
    3f42:	9f 01       	movw	r18, r30
    3f44:	42 30       	cpi	r20, 0x02	; 2
    3f46:	74 f0       	brlt	.+28     	; 0x3f64 <utoa+0x24>
    3f48:	45 32       	cpi	r20, 0x25	; 37
    3f4a:	64 f4       	brge	.+24     	; 0x3f64 <utoa+0x24>
    3f4c:	64 2f       	mov	r22, r20
    3f4e:	77 27       	eor	r23, r23
    3f50:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__udivmodhi4>
    3f54:	80 5d       	subi	r24, 0xD0	; 208
    3f56:	8a 33       	cpi	r24, 0x3A	; 58
    3f58:	0c f0       	brlt	.+2      	; 0x3f5c <utoa+0x1c>
    3f5a:	89 5d       	subi	r24, 0xD9	; 217
    3f5c:	81 93       	st	Z+, r24
    3f5e:	cb 01       	movw	r24, r22
    3f60:	00 97       	sbiw	r24, 0x00	; 0
    3f62:	a1 f7       	brne	.-24     	; 0x3f4c <utoa+0xc>
    3f64:	10 82       	st	Z, r1
    3f66:	c9 01       	movw	r24, r18
    3f68:	0c 94 d1 1f 	jmp	0x3fa2	; 0x3fa2 <strrev>

00003f6c <__eerd_byte_m168>:
    3f6c:	f9 99       	sbic	0x1f, 1	; 31
    3f6e:	fe cf       	rjmp	.-4      	; 0x3f6c <__eerd_byte_m168>
    3f70:	92 bd       	out	0x22, r25	; 34
    3f72:	81 bd       	out	0x21, r24	; 33
    3f74:	f8 9a       	sbi	0x1f, 0	; 31
    3f76:	99 27       	eor	r25, r25
    3f78:	80 b5       	in	r24, 0x20	; 32
    3f7a:	08 95       	ret

00003f7c <__eewr_byte_m168>:
    3f7c:	26 2f       	mov	r18, r22

00003f7e <__eewr_r18_m168>:
    3f7e:	f9 99       	sbic	0x1f, 1	; 31
    3f80:	fe cf       	rjmp	.-4      	; 0x3f7e <__eewr_r18_m168>
    3f82:	1f ba       	out	0x1f, r1	; 31
    3f84:	92 bd       	out	0x22, r25	; 34
    3f86:	81 bd       	out	0x21, r24	; 33
    3f88:	20 bd       	out	0x20, r18	; 32
    3f8a:	0f b6       	in	r0, 0x3f	; 63
    3f8c:	f8 94       	cli
    3f8e:	fa 9a       	sbi	0x1f, 2	; 31
    3f90:	f9 9a       	sbi	0x1f, 1	; 31
    3f92:	0f be       	out	0x3f, r0	; 63
    3f94:	01 96       	adiw	r24, 0x01	; 1
    3f96:	08 95       	ret

00003f98 <__eewr_word_m168>:
    3f98:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <__eewr_byte_m168>
    3f9c:	27 2f       	mov	r18, r23
    3f9e:	0c 94 bf 1f 	jmp	0x3f7e	; 0x3f7e <__eewr_r18_m168>

00003fa2 <strrev>:
    3fa2:	dc 01       	movw	r26, r24
    3fa4:	fc 01       	movw	r30, r24
    3fa6:	67 2f       	mov	r22, r23
    3fa8:	71 91       	ld	r23, Z+
    3faa:	77 23       	and	r23, r23
    3fac:	e1 f7       	brne	.-8      	; 0x3fa6 <strrev+0x4>
    3fae:	32 97       	sbiw	r30, 0x02	; 2
    3fb0:	04 c0       	rjmp	.+8      	; 0x3fba <strrev+0x18>
    3fb2:	7c 91       	ld	r23, X
    3fb4:	6d 93       	st	X+, r22
    3fb6:	70 83       	st	Z, r23
    3fb8:	62 91       	ld	r22, -Z
    3fba:	ae 17       	cp	r26, r30
    3fbc:	bf 07       	cpc	r27, r31
    3fbe:	c8 f3       	brcs	.-14     	; 0x3fb2 <strrev+0x10>
    3fc0:	08 95       	ret

00003fc2 <_exit>:
    3fc2:	f8 94       	cli

00003fc4 <__stop_program>:
    3fc4:	ff cf       	rjmp	.-2      	; 0x3fc4 <__stop_program>
