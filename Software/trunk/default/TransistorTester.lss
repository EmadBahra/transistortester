
TransistorTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00003d1c  00003dd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003d1c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000082  00800102  00800102  00003dd2  2**0
                  ALLOC
  3 .eeprom       000001c1  00810000  00810000  00003dd2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         00000dbc  00000000  00000000  00003f94  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001d2  00000000  00000000  00004d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000000a0  00000000  00000000  00004f22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000006a8  00000000  00000000  00004fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000025e6  00000000  00000000  0000566a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000071b  00000000  00000000  00007c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000335d  00000000  00000000  0000836b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000220  00000000  00000000  0000b6c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000843  00000000  00000000  0000b8e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000011ed  00000000  00000000  0000c12b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 000001df  00000000  00000000  0000d318  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__ctors_end>
       4:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
       8:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
       c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      10:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      14:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      18:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      1c:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__vector_7>
      20:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      24:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      28:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      2c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      30:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      34:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      38:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      3c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      40:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      44:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      48:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      4c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      50:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      54:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      58:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      5c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      60:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
      64:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>

00000068 <LogTab>:
      68:	00 01 02 03 04 05 06 07 08 09 0b 0c 0d 0e 0f 10     ................
      78:	11 13 14 15 16 18 19 1a 1b 1d 1e 1f 21 22 24 25     ............!"$%
      88:	27 28 2a 2b 2d 2e 30 31 33 35 36 38 3a 3c 3e 3f     '(*+-.013568:<>?
      98:	41 43 45 47 49 4c 4e 50 52 54 57 59 5c 5e 61 63     ACEGILNPRTWY\^ac
      a8:	66 69 6c 6f 72 75 78 7c 7f 83 87 8b 8f 93 97 9c     filorux|........
      b8:	a1 a6 ab b1 b7 be c5 cc d4 dd e6 f1                 ............

000000c4 <SELFTEST>:
      c4:	53 65 6c 66 74 65 73 74 20 6d 6f 64 65 2e 2e 00     Selftest mode...

000000d4 <RELPROBE>:
      d4:	69 73 6f 6c 61 74 65 20 50 72 6f 62 65 21 00        isolate Probe!.

000000e3 <URefT>:
      e3:	52 65 66 3d 00                                      Ref=.

000000e8 <RHfakt>:
      e8:	52 48 66 3d 00                                      RHf=.

000000ed <RH1L>:
      ed:	52 48 2d 00                                         RH-.

000000f1 <RH1H>:
      f1:	52 48 2b 00                                         RH+.

000000f5 <RLRL>:
      f5:	2b 52 4c 2d 20 31 32 20 31 33 20 32 33 00           +RL- 12 13 23.

00000103 <RHRH>:
     103:	2b 52 48 2d 20 31 32 20 31 33 20 32 33 00           +RH- 12 13 23.

00000111 <T50HZ>:
     111:	20 35 30 48 7a 00 00                                 50Hz..

00000118 <__ctors_end>:
     118:	11 24       	eor	r1, r1
     11a:	1f be       	out	0x3f, r1	; 63
     11c:	cf ef       	ldi	r28, 0xFF	; 255
     11e:	d4 e0       	ldi	r29, 0x04	; 4
     120:	de bf       	out	0x3e, r29	; 62
     122:	cd bf       	out	0x3d, r28	; 61

00000124 <__do_copy_data>:
     124:	11 e0       	ldi	r17, 0x01	; 1
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	ec e1       	ldi	r30, 0x1C	; 28
     12c:	fd e3       	ldi	r31, 0x3D	; 61
     12e:	02 c0       	rjmp	.+4      	; 0x134 <__do_copy_data+0x10>
     130:	05 90       	lpm	r0, Z+
     132:	0d 92       	st	X+, r0
     134:	a2 30       	cpi	r26, 0x02	; 2
     136:	b1 07       	cpc	r27, r17
     138:	d9 f7       	brne	.-10     	; 0x130 <__do_copy_data+0xc>

0000013a <__do_clear_bss>:
     13a:	11 e0       	ldi	r17, 0x01	; 1
     13c:	a2 e0       	ldi	r26, 0x02	; 2
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	01 c0       	rjmp	.+2      	; 0x144 <.do_clear_bss_start>

00000142 <.do_clear_bss_loop>:
     142:	1d 92       	st	X+, r1

00000144 <.do_clear_bss_start>:
     144:	a4 38       	cpi	r26, 0x84	; 132
     146:	b1 07       	cpc	r27, r17
     148:	e1 f7       	brne	.-8      	; 0x142 <.do_clear_bss_loop>
     14a:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <main>
     14e:	0c 94 8c 1e 	jmp	0x3d18	; 0x3d18 <_exit>

00000152 <__bad_interrupt>:
     152:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000156 <lcd_data>:
void lcd_space(void) {
   lcd_data(' ');
}

// sends data byte to the LCD 
void lcd_data(unsigned char temp1) {
     156:	1f 93       	push	r17
     158:	18 2f       	mov	r17, r24
 lcd_write_data(temp1);		// set RS to 1
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	61 2f       	mov	r22, r17
     15e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_lcd_hw_write>
     162:	0e 94 fe 14 	call	0x29fc	; 0x29fc <wait50us>
#ifdef WITH_UART
 switch(temp1) {
     166:	18 30       	cpi	r17, 0x08	; 8
     168:	48 f4       	brcc	.+18     	; 0x17c <lcd_data+0x26>
     16a:	16 30       	cpi	r17, 0x06	; 6
     16c:	d0 f4       	brcc	.+52     	; 0x1a2 <lcd_data+0x4c>
     16e:	12 30       	cpi	r17, 0x02	; 2
     170:	71 f0       	breq	.+28     	; 0x18e <lcd_data+0x38>
     172:	13 30       	cpi	r17, 0x03	; 3
     174:	89 f0       	breq	.+34     	; 0x198 <lcd_data+0x42>
     176:	11 30       	cpi	r17, 0x01	; 1
     178:	d1 f4       	brne	.+52     	; 0x1ae <lcd_data+0x58>
     17a:	07 c0       	rjmp	.+14     	; 0x18a <lcd_data+0x34>
     17c:	14 3e       	cpi	r17, 0xE4	; 228
     17e:	a9 f0       	breq	.+42     	; 0x1aa <lcd_data+0x54>
     180:	14 3f       	cpi	r17, 0xF4	; 244
     182:	c1 f0       	breq	.+48     	; 0x1b4 <lcd_data+0x5e>
     184:	11 3e       	cpi	r17, 0xE1	; 225
     186:	99 f4       	brne	.+38     	; 0x1ae <lcd_data+0x58>
     188:	0e c0       	rjmp	.+28     	; 0x1a6 <lcd_data+0x50>
    case LCD_CHAR_DIODE1:
    	uart_putc('>');
     18a:	8e e3       	ldi	r24, 0x3E	; 62
     18c:	06 c0       	rjmp	.+12     	; 0x19a <lcd_data+0x44>
    	uart_putc('|');
    	break;
    case LCD_CHAR_DIODE2:
    	uart_putc('|');
     18e:	8c e7       	ldi	r24, 0x7C	; 124
     190:	0e 94 c4 14 	call	0x2988	; 0x2988 <uart_putc>
    	uart_putc('<');
     194:	8c e3       	ldi	r24, 0x3C	; 60
     196:	0c c0       	rjmp	.+24     	; 0x1b0 <lcd_data+0x5a>
    	break;
    case LCD_CHAR_CAP:
    	uart_putc('|');
     198:	8c e7       	ldi	r24, 0x7C	; 124
     19a:	0e 94 c4 14 	call	0x2988	; 0x2988 <uart_putc>
    	uart_putc('|');
     19e:	8c e7       	ldi	r24, 0x7C	; 124
     1a0:	07 c0       	rjmp	.+14     	; 0x1b0 <lcd_data+0x5a>
    	break;
    case LCD_CHAR_RESIS1:
    case LCD_CHAR_RESIS2:
    	uart_putc('R');
     1a2:	82 e5       	ldi	r24, 0x52	; 82
     1a4:	05 c0       	rjmp	.+10     	; 0x1b0 <lcd_data+0x5a>
    	break;
    case 225:	//ä
    	uart_putc('ä');
     1a6:	84 ee       	ldi	r24, 0xE4	; 228
     1a8:	03 c0       	rjmp	.+6      	; 0x1b0 <lcd_data+0x5a>
    	break;
    case 228:	//µ
    	uart_putc('µ');
     1aa:	85 eb       	ldi	r24, 0xB5	; 181
     1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <lcd_data+0x5a>
    	break;
    case 244:	//Omega
    	break;
    default:
    	uart_putc(temp1);
     1ae:	81 2f       	mov	r24, r17
     1b0:	0e 94 c4 14 	call	0x2988	; 0x2988 <uart_putc>
 }
#endif
}
     1b4:	1f 91       	pop	r17
     1b6:	08 95       	ret

000001b8 <lcd_space>:
   lcd_data(temp + '1');
}

// send space character to LCD
void lcd_space(void) {
   lcd_data(' ');
     1b8:	80 e2       	ldi	r24, 0x20	; 32
     1ba:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
}
     1be:	08 95       	ret

000001c0 <lcd_testpin>:
 

// sends numeric character (Pin Number) to the LCD 
// from binary 0 we send ASCII 1 ....
void lcd_testpin(unsigned char temp) {
   lcd_data(temp + '1');
     1c0:	8f 5c       	subi	r24, 0xCF	; 207
     1c2:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
}
     1c6:	08 95       	ret

000001c8 <uart_newline>:
}


#ifdef WITH_UART
void uart_newline(void) {
   uart_putc('\r');
     1c8:	8d e0       	ldi	r24, 0x0D	; 13
     1ca:	0e 94 c4 14 	call	0x2988	; 0x2988 <uart_putc>
   uart_putc('\n');
     1ce:	8a e0       	ldi	r24, 0x0A	; 10
     1d0:	0e 94 c4 14 	call	0x2988	; 0x2988 <uart_putc>
}
     1d4:	08 95       	ret

000001d6 <lcd_command>:
#endif
}
 
// sends a command to the LCD
 
void lcd_command(unsigned char temp1) {
     1d6:	1f 93       	push	r17
     1d8:	18 2f       	mov	r17, r24
        lcd_write_cmd(temp1);		// set RS to 0
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	61 2f       	mov	r22, r17
     1de:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_lcd_hw_write>
     1e2:	0e 94 fe 14 	call	0x29fc	; 0x29fc <wait50us>
#ifdef WITH_UART
	if((temp1 == 0x80) || (temp1 == 0xC0)) {
     1e6:	10 38       	cpi	r17, 0x80	; 128
     1e8:	11 f0       	breq	.+4      	; 0x1ee <lcd_command+0x18>
     1ea:	10 3c       	cpi	r17, 0xC0	; 192
     1ec:	11 f4       	brne	.+4      	; 0x1f2 <lcd_command+0x1c>
		uart_newline();
     1ee:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <uart_newline>
	}
#endif
}
     1f2:	1f 91       	pop	r17
     1f4:	08 95       	ret

000001f6 <lcd_clear>:
}
 
// send the command to clear the display 
 
void lcd_clear(void) {
   lcd_command(CLEAR_DISPLAY);
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
   wait10ms();
     1fc:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <wait10ms>
#ifdef WITH_UART
   uart_newline();
     200:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <uart_newline>
#endif
   lcd_line1();			// set cursor to Line1 Column 1, (only for OLED-Display)
     204:	80 e8       	ldi	r24, 0x80	; 128
     206:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
}
     20a:	08 95       	ret

0000020c <lcd_init>:
 
// Initialise: 
// Must be called first .
 
void lcd_init(void) {
   wait30ms();
     20c:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <wait30ms>
   // to initialise, send 3 times to be shure to be in 8 Bit mode
   lcd_write_init(1);
     210:	80 e8       	ldi	r24, 0x80	; 128
     212:	60 e3       	ldi	r22, 0x30	; 48
     214:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_lcd_hw_write>
   wait5ms();
     218:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <wait5ms>
   
   lcd_write_init(1);
     21c:	80 e8       	ldi	r24, 0x80	; 128
     21e:	60 e3       	ldi	r22, 0x30	; 48
     220:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_lcd_hw_write>
   wait1ms();
     224:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <wait1ms>

   lcd_write_init(1);
     228:	80 e8       	ldi	r24, 0x80	; 128
     22a:	60 e3       	ldi	r22, 0x30	; 48
     22c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_lcd_hw_write>
   wait1ms();
     230:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <wait1ms>

   lcd_write_init(0);		// switch to 4 Bit mode
     234:	80 e8       	ldi	r24, 0x80	; 128
     236:	60 e2       	ldi	r22, 0x20	; 32
     238:	0e 94 78 01 	call	0x2f0	; 0x2f0 <_lcd_hw_write>
   wait10ms();
     23c:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <wait10ms>

   // 4Bit / 2 rows / 5x7
   lcd_command(CMD_SetIFOptions | 0x08);
     240:	88 e2       	ldi	r24, 0x28	; 40
     242:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>

   // Display on / Cursor off / no Blinking
   lcd_command(CMD_SetDisplayAndCursor | 0x04);
     246:	8c e0       	ldi	r24, 0x0C	; 12
     248:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>

   // increment / no Scroll    
   lcd_command(CMD_SetEntryMode | 0x02);	
     24c:	86 e0       	ldi	r24, 0x06	; 6
     24e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
   lcd_clear();
     252:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
}
     256:	08 95       	ret

00000258 <lcd_string>:
#endif
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
     258:	ef 92       	push	r14
     25a:	ff 92       	push	r15
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	e8 2e       	mov	r14, r24
     262:	e7 01       	movw	r28, r14
     264:	7e 01       	movw	r14, r28
     266:	f9 2e       	mov	r15, r25
     268:	e7 01       	movw	r28, r14
    while(*data) {
     26a:	02 c0       	rjmp	.+4      	; 0x270 <lcd_string+0x18>
        lcd_data(*data);
     26c:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
    while(*data) {
     270:	89 91       	ld	r24, Y+
     272:	88 23       	and	r24, r24
     274:	d9 f7       	brne	.-10     	; 0x26c <lcd_string+0x14>
        lcd_data(*data);
        data++;
    }
}
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	ff 90       	pop	r15
     27c:	ef 90       	pop	r14
     27e:	08 95       	ret

00000280 <lcd_pgm_string>:

#ifdef use_lcd_pgm
//Load string from PGM  and send to LCD 
void lcd_pgm_string(const unsigned char *data) {
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
     284:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = pgm_read_byte(data);
     286:	fe 01       	movw	r30, r28
     288:	84 91       	lpm	r24, Z+
      if((cc==0) || (cc==128)) {
     28a:	88 23       	and	r24, r24
     28c:	31 f0       	breq	.+12     	; 0x29a <lcd_pgm_string+0x1a>
     28e:	80 38       	cpi	r24, 0x80	; 128
     290:	21 f0       	breq	.+8      	; 0x29a <lcd_pgm_string+0x1a>
         return;
      }
      lcd_data(cc);
     292:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
      data++;
     296:	21 96       	adiw	r28, 0x01	; 1
   }
     298:	f6 cf       	rjmp	.-20     	; 0x286 <lcd_pgm_string+0x6>
}
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	08 95       	ret

000002a0 <lcd_fix_string>:
#endif

//Load string from PGM or EEprom and send to LCD 
void lcd_fix_string(const unsigned char *data) {
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = MEM_read_byte(data);
     2a6:	ce 01       	movw	r24, r28
     2a8:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__eerd_byte_m168>
      if((cc==0) || (cc==128)) {
     2ac:	88 23       	and	r24, r24
     2ae:	31 f0       	breq	.+12     	; 0x2bc <lcd_fix_string+0x1c>
     2b0:	80 38       	cpi	r24, 0x80	; 128
     2b2:	21 f0       	breq	.+8      	; 0x2bc <lcd_fix_string+0x1c>
         return;
      }
      lcd_data(cc);
     2b4:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
      data++;
     2b8:	21 96       	adiw	r28, 0x01	; 1
   }
     2ba:	f5 cf       	rjmp	.-22     	; 0x2a6 <lcd_fix_string+0x6>
}
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	08 95       	ret

000002c2 <lcd_fix_customchar>:

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
     2c2:	0f 93       	push	r16
     2c4:	1f 93       	push	r17
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	8c 01       	movw	r16, r24
     2cc:	c0 e0       	ldi	r28, 0x00	; 0
     2ce:	d0 e0       	ldi	r29, 0x00	; 0
    for(uint8_t i=0;i<8;i++) {
        lcd_data(MEM_read_byte(chardata));
     2d0:	c8 01       	movw	r24, r16
     2d2:	8c 0f       	add	r24, r28
     2d4:	9d 1f       	adc	r25, r29
     2d6:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__eerd_byte_m168>
     2da:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
     2de:	21 96       	adiw	r28, 0x01	; 1
   }
}

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
    for(uint8_t i=0;i<8;i++) {
     2e0:	c8 30       	cpi	r28, 0x08	; 8
     2e2:	d1 05       	cpc	r29, r1
     2e4:	a9 f7       	brne	.-22     	; 0x2d0 <lcd_fix_customchar+0xe>
        lcd_data(MEM_read_byte(chardata));
        chardata++;
    }
}
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	1f 91       	pop	r17
     2ec:	0f 91       	pop	r16
     2ee:	08 95       	ret

000002f0 <_lcd_hw_write>:
     2f0:	5d 9a       	sbi	0x0b, 5	; 11
     2f2:	55 9a       	sbi	0x0a, 5	; 10
     2f4:	5c 98       	cbi	0x0b, 4	; 11
     2f6:	54 9a       	sbi	0x0a, 4	; 10
     2f8:	80 fd       	sbrc	r24, 0
     2fa:	5c 9a       	sbi	0x0b, 4	; 11
     2fc:	58 98       	cbi	0x0b, 0	; 11
     2fe:	59 98       	cbi	0x0b, 1	; 11
     300:	5a 98       	cbi	0x0b, 2	; 11
     302:	5b 98       	cbi	0x0b, 3	; 11
     304:	64 fd       	sbrc	r22, 4
     306:	58 9a       	sbi	0x0b, 0	; 11
     308:	50 9a       	sbi	0x0a, 0	; 10
     30a:	65 fd       	sbrc	r22, 5
     30c:	59 9a       	sbi	0x0b, 1	; 11
     30e:	51 9a       	sbi	0x0a, 1	; 10
     310:	66 fd       	sbrc	r22, 6
     312:	5a 9a       	sbi	0x0b, 2	; 11
     314:	52 9a       	sbi	0x0a, 2	; 10
     316:	67 fd       	sbrc	r22, 7
     318:	5b 9a       	sbi	0x0b, 3	; 11
     31a:	53 9a       	sbi	0x0a, 3	; 10
     31c:	00 00       	nop
     31e:	5d 98       	cbi	0x0b, 5	; 11
     320:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <wait1us>
     324:	87 fd       	sbrc	r24, 7
     326:	11 c0       	rjmp	.+34     	; 0x34a <_lcd_hw_write_exit>
     328:	5d 9a       	sbi	0x0b, 5	; 11
     32a:	58 98       	cbi	0x0b, 0	; 11
     32c:	59 98       	cbi	0x0b, 1	; 11
     32e:	5a 98       	cbi	0x0b, 2	; 11
     330:	5b 98       	cbi	0x0b, 3	; 11
     332:	60 fd       	sbrc	r22, 0
     334:	58 9a       	sbi	0x0b, 0	; 11
     336:	61 fd       	sbrc	r22, 1
     338:	59 9a       	sbi	0x0b, 1	; 11
     33a:	62 fd       	sbrc	r22, 2
     33c:	5a 9a       	sbi	0x0b, 2	; 11
     33e:	63 fd       	sbrc	r22, 3
     340:	5b 9a       	sbi	0x0b, 3	; 11
     342:	00 00       	nop
     344:	5d 98       	cbi	0x0b, 5	; 11
     346:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <wait1us>

0000034a <_lcd_hw_write_exit>:
     34a:	08 95       	ret

0000034c <__vector_7>:
#define MAIN_C
#include "Transistortester.h"

#ifndef __AVR_ATmega8__
  // prepare sleep mode
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
     34c:	18 95       	reti

0000034e <ChargePin10ms>:
 }

//******************************************************************
#include "CheckPins.c"

void ChargePin10ms(uint8_t PinToCharge, uint8_t ChargeDirection) {
     34e:	df 93       	push	r29
     350:	cf 93       	push	r28
     352:	0f 92       	push	r0
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
   //Will be used by discharge of MOSFET Gates or to load big capacities.
   //Parameters:
   //PinToCharge: specifies the pin as mask for R-Port
   //ChargeDirection: 0 = switch to GND (N-Kanal-FET), 1= switch to VCC(P-Kanal-FET)

   if(ChargeDirection&1) {
     358:	60 ff       	sbrs	r22, 0
     35a:	03 c0       	rjmp	.+6      	; 0x362 <ChargePin10ms+0x14>
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
     35c:	95 b1       	in	r25, 0x05	; 5
     35e:	98 2b       	or	r25, r24
     360:	04 c0       	rjmp	.+8      	; 0x36a <ChargePin10ms+0x1c>
   } else {
      R_PORT &= ~PinToCharge; // or 0 (GND)
     362:	25 b1       	in	r18, 0x05	; 5
     364:	98 2f       	mov	r25, r24
     366:	90 95       	com	r25
     368:	92 23       	and	r25, r18
     36a:	95 b9       	out	0x05, r25	; 5
   }
   R_DDR |= PinToCharge;		//switch Pin to output, across R to GND or VCC
     36c:	94 b1       	in	r25, 0x04	; 4
     36e:	98 2b       	or	r25, r24
     370:	94 b9       	out	0x04, r25	; 4
   wait10ms();
     372:	89 83       	std	Y+1, r24	; 0x01
     374:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <wait10ms>
   // switch back Input, no current
   R_DDR &= ~PinToCharge;	// switch back to input
     378:	94 b1       	in	r25, 0x04	; 4
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	80 95       	com	r24
     37e:	98 23       	and	r25, r24
     380:	94 b9       	out	0x04, r25	; 4
   R_PORT &= ~PinToCharge;	// no Pull up
     382:	95 b1       	in	r25, 0x05	; 5
     384:	98 23       	and	r25, r24
     386:	95 b9       	out	0x05, r25	; 5
}
     388:	0f 90       	pop	r0
     38a:	cf 91       	pop	r28
     38c:	df 91       	pop	r29
     38e:	08 95       	ret

00000390 <EntladePins>:

// first discharge any charge of capacitors
void EntladePins() {
     390:	af 92       	push	r10
     392:	bf 92       	push	r11
     394:	cf 92       	push	r12
     396:	df 92       	push	r13
     398:	ef 92       	push	r14
     39a:	ff 92       	push	r15
     39c:	0f 93       	push	r16
     39e:	1f 93       	push	r17
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	3a e0       	ldi	r19, 0x0A	; 10
     3a6:	c3 2e       	mov	r12, r19
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     3a8:	28 e0       	ldi	r18, 0x08	; 8
     3aa:	d2 2e       	mov	r13, r18
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     R_PORT = 0;			// R-outputs auf 0
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     3ac:	9a e2       	ldi	r25, 0x2A	; 42
     3ae:	a9 2e       	mov	r10, r25
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     3b0:	85 e1       	ldi	r24, 0x15	; 21
     3b2:	b8 2e       	mov	r11, r24
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     3b4:	d7 b8       	out	0x07, r13	; 7
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     3b6:	d8 b8       	out	0x08, r13	; 8
     R_PORT = 0;			// R-outputs auf 0
     3b8:	15 b8       	out	0x05, r1	; 5
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     3ba:	a4 b8       	out	0x04, r10	; 4
     adcmv[0] = W5msReadADC(PC0);	// which voltage has Pin 1?
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
     3c2:	8c 01       	movw	r16, r24
     adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
     3ca:	ec 01       	movw	r28, r24
     adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     3cc:	82 e0       	ldi	r24, 0x02	; 2
     3ce:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
     if ((PartFound == PART_CELL) || (adcmv[0] < CAP_EMPTY_LEVEL) & (adcmv[1] < CAP_EMPTY_LEVEL) & (adcmv[2] < CAP_EMPTY_LEVEL)) {
     3d2:	20 91 07 01 	lds	r18, 0x0107
     3d6:	28 30       	cpi	r18, 0x08	; 8
     3d8:	c1 f0       	breq	.+48     	; 0x40a <EntladePins+0x7a>
     3da:	41 e0       	ldi	r20, 0x01	; 1
     3dc:	c4 30       	cpi	r28, 0x04	; 4
     3de:	d1 05       	cpc	r29, r1
     3e0:	08 f0       	brcs	.+2      	; 0x3e4 <EntladePins+0x54>
     3e2:	40 e0       	ldi	r20, 0x00	; 0
     3e4:	21 e0       	ldi	r18, 0x01	; 1
     3e6:	04 30       	cpi	r16, 0x04	; 4
     3e8:	11 05       	cpc	r17, r1
     3ea:	08 f0       	brcs	.+2      	; 0x3ee <EntladePins+0x5e>
     3ec:	20 e0       	ldi	r18, 0x00	; 0
     3ee:	42 23       	and	r20, r18
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	21 e0       	ldi	r18, 0x01	; 1
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	84 30       	cpi	r24, 0x04	; 4
     3f8:	91 05       	cpc	r25, r1
     3fa:	10 f0       	brcs	.+4      	; 0x400 <EntladePins+0x70>
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	24 23       	and	r18, r20
     402:	35 23       	and	r19, r21
     404:	21 15       	cp	r18, r1
     406:	31 05       	cpc	r19, r1
     408:	21 f0       	breq	.+8      	; 0x412 <EntladePins+0x82>
        ADC_DDR = TXD_MSK;		// switch all ADC-Pins to input
     40a:	88 e0       	ldi	r24, 0x08	; 8
     40c:	87 b9       	out	0x07, r24	; 7
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
     40e:	14 b8       	out	0x04, r1	; 4
        return;
     410:	4f c0       	rjmp	.+158    	; 0x4b0 <EntladePins+0x120>
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
     412:	23 e0       	ldi	r18, 0x03	; 3
     414:	08 3e       	cpi	r16, 0xE8	; 232
     416:	12 07       	cpc	r17, r18
     418:	10 f0       	brcs	.+4      	; 0x41e <EntladePins+0x8e>
  uint8_t lop_cnt;		// loop counter
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     41a:	28 e0       	ldi	r18, 0x08	; 8
     41c:	01 c0       	rjmp	.+2      	; 0x420 <EntladePins+0x90>
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
        return;
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
        adc_gnd |= (1<<PC0);	//Pin 1 directly to GND
     41e:	29 e0       	ldi	r18, 0x09	; 9
     }
     if (adcmv[1] < 1000) {
     420:	33 e0       	ldi	r19, 0x03	; 3
     422:	c8 3e       	cpi	r28, 0xE8	; 232
     424:	d3 07       	cpc	r29, r19
     426:	08 f4       	brcc	.+2      	; 0x42a <EntladePins+0x9a>
        adc_gnd |= (1<<PC1);	//Pin 2 directly to GND
     428:	22 60       	ori	r18, 0x02	; 2
     }
     if (adcmv[2] < 1000) {
     42a:	33 e0       	ldi	r19, 0x03	; 3
     42c:	88 3e       	cpi	r24, 0xE8	; 232
     42e:	93 07       	cpc	r25, r19
     430:	08 f4       	brcc	.+2      	; 0x434 <EntladePins+0xa4>
        adc_gnd |= (1<<PC2);	//Pin 3 directly to  GND
     432:	24 60       	ori	r18, 0x04	; 4
     }
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time
     434:	27 b9       	out	0x07, r18	; 7

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     436:	b4 b8       	out	0x04, r11	; 4
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     438:	c0 e0       	ldi	r28, 0x00	; 0
     43a:	d0 e0       	ldi	r29, 0x00	; 0
        wdt_reset();
     43c:	a8 95       	wdr
        adcmv[0] = W20msReadADC(PC0);	// which voltage has Pin 1?
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	0e 94 a5 1a 	call	0x354a	; 0x354a <W20msReadADC>
     444:	7c 01       	movw	r14, r24
        adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
     44c:	8c 01       	movw	r16, r24
        adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     44e:	82 e0       	ldi	r24, 0x02	; 2
     450:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
        if (adcmv[0] < 1300) {
     454:	24 e1       	ldi	r18, 0x14	; 20
     456:	e2 16       	cp	r14, r18
     458:	25 e0       	ldi	r18, 0x05	; 5
     45a:	f2 06       	cpc	r15, r18
     45c:	08 f4       	brcc	.+2      	; 0x460 <EntladePins+0xd0>
           ADC_DDR |= (1<<PC0);	// below 1.3V , switch directly with ADC-Port to GND
     45e:	38 9a       	sbi	0x07, 0	; 7
        }
        if (adcmv[1] < 1300) {
     460:	35 e0       	ldi	r19, 0x05	; 5
     462:	04 31       	cpi	r16, 0x14	; 20
     464:	13 07       	cpc	r17, r19
     466:	08 f4       	brcc	.+2      	; 0x46a <EntladePins+0xda>
           ADC_DDR |= (1<<PC1);	// below 1.3V, switch directly with ADC-Port to GND
     468:	39 9a       	sbi	0x07, 1	; 7
        }
        if (adcmv[2] < 1300) {
     46a:	25 e0       	ldi	r18, 0x05	; 5
     46c:	84 31       	cpi	r24, 0x14	; 20
     46e:	92 07       	cpc	r25, r18
     470:	08 f4       	brcc	.+2      	; 0x474 <EntladePins+0xe4>
           ADC_DDR |= (1<<PC2);	// below 1.3V, switch directly with ADC-Port to GND
     472:	3a 9a       	sbi	0x07, 2	; 7
        }
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
     474:	36 e0       	ldi	r19, 0x06	; 6
     476:	e3 16       	cp	r14, r19
     478:	f1 04       	cpc	r15, r1
     47a:	30 f4       	brcc	.+12     	; 0x488 <EntladePins+0xf8>
     47c:	06 30       	cpi	r16, 0x06	; 6
     47e:	11 05       	cpc	r17, r1
     480:	18 f4       	brcc	.+6      	; 0x488 <EntladePins+0xf8>
     482:	86 30       	cpi	r24, 0x06	; 6
     484:	91 05       	cpc	r25, r1
     486:	38 f0       	brcs	.+14     	; 0x496 <EntladePins+0x106>

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     488:	21 96       	adiw	r28, 0x01	; 1
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	c4 3f       	cpi	r28, 0xF4	; 244
     48e:	d8 07       	cpc	r29, r24
     490:	a9 f6       	brne	.-86     	; 0x43c <EntladePins+0xac>
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
           break;
        }
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
     492:	d0 92 07 01 	sts	0x0107, r13

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     496:	00 e0       	ldi	r16, 0x00	; 0
     498:	10 e0       	ldi	r17, 0x00	; 0
     49a:	04 c0       	rjmp	.+8      	; 0x4a4 <EntladePins+0x114>
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     49c:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <wait1ms>
     4a0:	0f 5f       	subi	r16, 0xFF	; 255
     4a2:	1f 4f       	sbci	r17, 0xFF	; 255
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
     4a4:	0c 17       	cp	r16, r28
     4a6:	1d 07       	cpc	r17, r29
     4a8:	c8 f3       	brcs	.-14     	; 0x49c <EntladePins+0x10c>
     4aa:	ca 94       	dec	r12
  unsigned int clr_cnt;		// Clear Counter
  uint8_t lop_cnt;		// loop counter
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     4ac:	09 f0       	breq	.+2      	; 0x4b0 <EntladePins+0x120>
     4ae:	82 cf       	rjmp	.-252    	; 0x3b4 <EntladePins+0x24>
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     }
  } // end while
 }
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	ff 90       	pop	r15
     4ba:	ef 90       	pop	r14
     4bc:	df 90       	pop	r13
     4be:	cf 90       	pop	r12
     4c0:	bf 90       	pop	r11
     4c2:	af 90       	pop	r10
     4c4:	08 95       	ret

000004c6 <RefVoltage>:



#ifdef AUTO_RH
void RefVoltage(void) {
     4c6:	ff 92       	push	r15
     4c8:	0f 93       	push	r16
     4ca:	1f 93       	push	r17
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;

  #ifdef AUTO_CAL
  referenz = ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset));
     4d0:	87 eb       	ldi	r24, 0xB7	; 183
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <__eerd_word_m168>
     4d8:	20 91 3f 01 	lds	r18, 0x013F
     4dc:	30 91 40 01 	lds	r19, 0x0140
     4e0:	28 0f       	add	r18, r24
     4e2:	39 1f       	adc	r19, r25
  #else
  referenz = ref_mv + REF_C_KORR;
  #endif
  if (referenz >= Ref_Tab_Beginn) {
     4e4:	83 e0       	ldi	r24, 0x03	; 3
     4e6:	28 3e       	cpi	r18, 0xE8	; 232
     4e8:	38 07       	cpc	r19, r24
     4ea:	20 f0       	brcs	.+8      	; 0x4f4 <RefVoltage+0x2e>
     referenz -= Ref_Tab_Beginn;
     4ec:	c9 01       	movw	r24, r18
     4ee:	88 5e       	subi	r24, 0xE8	; 232
     4f0:	93 40       	sbci	r25, 0x03	; 3
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <RefVoltage+0x32>
  } else  {
     referenz = 0;		// limit to begin of table
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = referenz / Ref_Tab_Abstand;
     4f8:	62 e3       	ldi	r22, 0x32	; 50
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <__udivmodhi4>
  tabres = referenz % Ref_Tab_Abstand;
     500:	f8 2e       	mov	r15, r24
  tabres = Ref_Tab_Abstand-tabres;
  if (tabind > 7) {
     tabind = 7;		// limit to end of table
  }
  // interpolate the table of factors
  y1 = MEM_read_word(&RHtab[tabind]);
     502:	68 30       	cpi	r22, 0x08	; 8
     504:	08 f0       	brcs	.+2      	; 0x508 <__stack+0x9>
     506:	67 e0       	ldi	r22, 0x07	; 7
     508:	c6 2f       	mov	r28, r22
     50a:	d0 e0       	ldi	r29, 0x00	; 0
     50c:	ce 01       	movw	r24, r28
     50e:	88 0f       	add	r24, r24
     510:	99 1f       	adc	r25, r25
     512:	86 5a       	subi	r24, 0xA6	; 166
     514:	9f 4f       	sbci	r25, 0xFF	; 255
     516:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <__eerd_word_m168>
     51a:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RHtab[tabind+1]);
     51c:	ce 01       	movw	r24, r28
     51e:	88 0f       	add	r24, r24
     520:	99 1f       	adc	r25, r25
     522:	84 5a       	subi	r24, 0xA4	; 164
     524:	9f 4f       	sbci	r25, 0xFF	; 255
     526:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <__eerd_word_m168>
     52a:	9c 01       	movw	r18, r24
  } else  {
     referenz = 0;		// limit to begin of table
  }
  tabind = referenz / Ref_Tab_Abstand;
  tabres = referenz % Ref_Tab_Abstand;
  tabres = Ref_Tab_Abstand-tabres;
     52c:	42 e3       	ldi	r20, 0x32	; 50
     52e:	4f 19       	sub	r20, r15
  }
  // interpolate the table of factors
  y1 = MEM_read_word(&RHtab[tabind]);
  y2 = MEM_read_word(&RHtab[tabind+1]);
  // RHmultip is the interpolated factor to compute capacity from load time with 470k
  RHmultip = ((y1 - y2) * tabres + (Ref_Tab_Abstand/2)) / Ref_Tab_Abstand + y2;
     530:	50 e0       	ldi	r21, 0x00	; 0
     532:	08 1b       	sub	r16, r24
     534:	19 0b       	sbc	r17, r25
     536:	40 9f       	mul	r20, r16
     538:	c0 01       	movw	r24, r0
     53a:	41 9f       	mul	r20, r17
     53c:	90 0d       	add	r25, r0
     53e:	50 9f       	mul	r21, r16
     540:	90 0d       	add	r25, r0
     542:	11 24       	eor	r1, r1
     544:	49 96       	adiw	r24, 0x19	; 25
     546:	62 e3       	ldi	r22, 0x32	; 50
     548:	70 e0       	ldi	r23, 0x00	; 0
     54a:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <__udivmodhi4>
     54e:	62 0f       	add	r22, r18
     550:	73 1f       	adc	r23, r19
     552:	70 93 01 01 	sts	0x0101, r23
     556:	60 93 00 01 	sts	0x0100, r22
 }
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	1f 91       	pop	r17
     560:	0f 91       	pop	r16
     562:	ff 90       	pop	r15
     564:	08 95       	ret

00000566 <lcd_clear_line>:
#endif

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
     566:	1f 93       	push	r17
     568:	14 e1       	ldi	r17, 0x14	; 20
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    lcd_space();
     56a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
     56e:	11 50       	subi	r17, 0x01	; 1

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
     570:	e1 f7       	brne	.-8      	; 0x56a <lcd_clear_line+0x4>
    lcd_space();
 }
}
     572:	1f 91       	pop	r17
     574:	08 95       	ret

00000576 <DisplayValue>:
 *    e.g: p = 10^-12 -> -12
 *  - unit character (0 = none)
 *  digits = 2, 3 or 4
 */
void DisplayValue(unsigned long Value, int8_t Exponent, unsigned char Unit, unsigned char digits)
{
     576:	2f 92       	push	r2
     578:	3f 92       	push	r3
     57a:	4f 92       	push	r4
     57c:	5f 92       	push	r5
     57e:	7f 92       	push	r7
     580:	8f 92       	push	r8
     582:	9f 92       	push	r9
     584:	af 92       	push	r10
     586:	bf 92       	push	r11
     588:	cf 92       	push	r12
     58a:	df 92       	push	r13
     58c:	ef 92       	push	r14
     58e:	ff 92       	push	r15
     590:	0f 93       	push	r16
     592:	1f 93       	push	r17
     594:	df 93       	push	r29
     596:	cf 93       	push	r28
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
     59c:	2f 97       	sbiw	r28, 0x0f	; 15
     59e:	0f b6       	in	r0, 0x3f	; 63
     5a0:	f8 94       	cli
     5a2:	de bf       	out	0x3e, r29	; 62
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	cd bf       	out	0x3d, r28	; 61
     5a8:	6b 01       	movw	r12, r22
     5aa:	7c 01       	movw	r14, r24
     5ac:	14 2f       	mov	r17, r20
     5ae:	72 2e       	mov	r7, r18
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
     5b0:	03 30       	cpi	r16, 0x03	; 3
     5b2:	29 f0       	breq	.+10     	; 0x5be <DisplayValue+0x48>
  if (digits == 4) Limit = 10000;
     5b4:	04 30       	cpi	r16, 0x04	; 4
     5b6:	31 f0       	breq	.+12     	; 0x5c4 <DisplayValue+0x4e>
  uint8_t           Offset;		/* exponent of offset to next 10^3 step */
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
     5b8:	84 e6       	ldi	r24, 0x64	; 100
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	14 c0       	rjmp	.+40     	; 0x5e6 <DisplayValue+0x70>
  if (digits == 3) Limit = 1000;
     5be:	88 ee       	ldi	r24, 0xE8	; 232
     5c0:	93 e0       	ldi	r25, 0x03	; 3
     5c2:	11 c0       	rjmp	.+34     	; 0x5e6 <DisplayValue+0x70>
  if (digits == 4) Limit = 10000;
     5c4:	80 e1       	ldi	r24, 0x10	; 16
     5c6:	97 e2       	ldi	r25, 0x27	; 39
     5c8:	0e c0       	rjmp	.+28     	; 0x5e6 <DisplayValue+0x70>
  while (Value >= Limit)
  {
    Value += 5;				/* for automagic rounding */
     5ca:	c7 01       	movw	r24, r14
     5cc:	b6 01       	movw	r22, r12
     5ce:	6b 5f       	subi	r22, 0xFB	; 251
     5d0:	7f 4f       	sbci	r23, 0xFF	; 255
     5d2:	8f 4f       	sbci	r24, 0xFF	; 255
     5d4:	9f 4f       	sbci	r25, 0xFF	; 255
    Value = Value / 10;			/* scale down by 10^1 */
     5d6:	a5 01       	movw	r20, r10
     5d8:	94 01       	movw	r18, r8
     5da:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     5de:	69 01       	movw	r12, r18
     5e0:	7a 01       	movw	r14, r20
    Exponent++;				/* increase exponent by 1 */
     5e2:	1f 5f       	subi	r17, 0xFF	; 255
     5e4:	08 c0       	rjmp	.+16     	; 0x5f6 <DisplayValue+0x80>


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
  if (digits == 4) Limit = 10000;
  while (Value >= Limit)
     5e6:	1c 01       	movw	r2, r24
     5e8:	44 24       	eor	r4, r4
     5ea:	55 24       	eor	r5, r5
  {
    Value += 5;				/* for automagic rounding */
    Value = Value / 10;			/* scale down by 10^1 */
     5ec:	6a e0       	ldi	r22, 0x0A	; 10
     5ee:	86 2e       	mov	r8, r22
     5f0:	91 2c       	mov	r9, r1
     5f2:	a1 2c       	mov	r10, r1
     5f4:	b1 2c       	mov	r11, r1


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
  if (digits == 4) Limit = 10000;
  while (Value >= Limit)
     5f6:	c2 14       	cp	r12, r2
     5f8:	d3 04       	cpc	r13, r3
     5fa:	e4 04       	cpc	r14, r4
     5fc:	f5 04       	cpc	r15, r5
     5fe:	28 f7       	brcc	.-54     	; 0x5ca <DisplayValue+0x54>


  /*
   *  determine prefix
   */
  Length = Exponent + 12;
     600:	81 2f       	mov	r24, r17
     602:	84 5f       	subi	r24, 0xF4	; 244
     604:	83 31       	cpi	r24, 0x13	; 19
     606:	08 f0       	brcs	.+2      	; 0x60a <DisplayValue+0x94>
     608:	82 e1       	ldi	r24, 0x12	; 18
  if (Length <  0) Length = 0;		/* Limit to minimum prefix */
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
  Index = Length / 3;
     60a:	23 e0       	ldi	r18, 0x03	; 3
  Offset = Length % 3;
     60c:	62 2f       	mov	r22, r18
     60e:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <__udivmodqi4>
     612:	19 2f       	mov	r17, r25
    if (Offset > 0)
     614:	99 23       	and	r25, r25
     616:	19 f0       	breq	.+6      	; 0x61e <DisplayValue+0xa8>
    {
      Index++;				/* adjust index for exponent offset, take next prefix */
     618:	8f 5f       	subi	r24, 0xFF	; 255
      Offset = 3 - Offset;		/* reverse value (1 or 2) */
     61a:	29 1b       	sub	r18, r25
     61c:	12 2f       	mov	r17, r18
    }
  Prefix = MEM_read_byte((uint8_t *)(&PrefixTab[Index]));   /* look up prefix in table */
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	80 55       	subi	r24, 0x50	; 80
     622:	9e 4f       	sbci	r25, 0xFE	; 254
     624:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__eerd_byte_m168>
     628:	b8 2e       	mov	r11, r24
  /*
   *  display value
   */

  /* convert value into string */
  utoa((unsigned int)Value, OutBuffer, 10);
     62a:	c6 01       	movw	r24, r12
     62c:	6e 01       	movw	r12, r28
     62e:	08 94       	sec
     630:	c1 1c       	adc	r12, r1
     632:	d1 1c       	adc	r13, r1
     634:	b6 01       	movw	r22, r12
     636:	4a e0       	ldi	r20, 0x0A	; 10
     638:	50 e0       	ldi	r21, 0x00	; 0
     63a:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <utoa>
  Length = strlen(OutBuffer);
     63e:	f6 01       	movw	r30, r12
     640:	01 90       	ld	r0, Z+
     642:	00 20       	and	r0, r0
     644:	e9 f7       	brne	.-6      	; 0x640 <DisplayValue+0xca>
     646:	31 97       	sbiw	r30, 0x01	; 1
     648:	2e 2e       	mov	r2, r30
     64a:	2c 18       	sub	r2, r12

  /* position of dot */
  Exponent = Length - Offset;		/* calculate position */
     64c:	82 2c       	mov	r8, r2
     64e:	81 1a       	sub	r8, r17

  if (Exponent <= 0)			/* we have to prepend "0." */
     650:	18 14       	cp	r1, r8
     652:	44 f0       	brlt	.+16     	; 0x664 <DisplayValue+0xee>
  {
    /* 0: factor 10 / -1: factor 100 */
//    lcd_data('0');
    lcd_data('.');
     654:	8e e2       	ldi	r24, 0x2E	; 46
     656:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
    if (Exponent < 0) lcd_data('0');	/* extra 0 for factor 100 */
     65a:	88 20       	and	r8, r8
     65c:	19 f0       	breq	.+6      	; 0x664 <DisplayValue+0xee>
     65e:	80 e3       	ldi	r24, 0x30	; 48
     660:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
  }

  if (Offset == 0) Exponent = -1;	/* disable dot if not needed */
     664:	11 23       	and	r17, r17
     666:	11 f4       	brne	.+4      	; 0x66c <DisplayValue+0xf6>
     668:	88 24       	eor	r8, r8
     66a:	8a 94       	dec	r8
     66c:	6e 01       	movw	r12, r28
     66e:	08 94       	sec
     670:	c1 1c       	adc	r12, r1
     672:	d1 1c       	adc	r13, r1
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     674:	00 e0       	ldi	r16, 0x00	; 0
     676:	10 e0       	ldi	r17, 0x00	; 0
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    Index++;				/* next one */
    if (Index == Exponent) {
     678:	99 24       	eor	r9, r9
     67a:	87 fc       	sbrc	r8, 7
     67c:	90 94       	com	r9
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     67e:	0d c0       	rjmp	.+26     	; 0x69a <DisplayValue+0x124>
  {
    lcd_data(OutBuffer[Index]);		/* display char */
     680:	0f 5f       	subi	r16, 0xFF	; 255
     682:	1f 4f       	sbci	r17, 0xFF	; 255
     684:	f6 01       	movw	r30, r12
     686:	81 91       	ld	r24, Z+
     688:	6f 01       	movw	r12, r30
     68a:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
    Index++;				/* next one */
    if (Index == Exponent) {
     68e:	08 15       	cp	r16, r8
     690:	19 05       	cpc	r17, r9
     692:	19 f4       	brne	.+6      	; 0x69a <DisplayValue+0x124>
      lcd_data('.');			/* display dot */
     694:	8e e2       	ldi	r24, 0x2E	; 46
     696:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     69a:	02 15       	cp	r16, r2
     69c:	88 f3       	brcs	.-30     	; 0x680 <DisplayValue+0x10a>
      lcd_data('.');			/* display dot */
    }
  }

  /* display prefix and unit */
  if (Prefix != 0) lcd_data(Prefix);
     69e:	bb 20       	and	r11, r11
     6a0:	19 f0       	breq	.+6      	; 0x6a8 <DisplayValue+0x132>
     6a2:	8b 2d       	mov	r24, r11
     6a4:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
  if (Unit) lcd_data(Unit);
     6a8:	77 20       	and	r7, r7
     6aa:	19 f0       	breq	.+6      	; 0x6b2 <DisplayValue+0x13c>
     6ac:	87 2d       	mov	r24, r7
     6ae:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
}
     6b2:	2f 96       	adiw	r28, 0x0f	; 15
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	f8 94       	cli
     6b8:	de bf       	out	0x3e, r29	; 62
     6ba:	0f be       	out	0x3f, r0	; 63
     6bc:	cd bf       	out	0x3d, r28	; 61
     6be:	cf 91       	pop	r28
     6c0:	df 91       	pop	r29
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	ff 90       	pop	r15
     6c8:	ef 90       	pop	r14
     6ca:	df 90       	pop	r13
     6cc:	cf 90       	pop	r12
     6ce:	bf 90       	pop	r11
     6d0:	af 90       	pop	r10
     6d2:	9f 90       	pop	r9
     6d4:	8f 90       	pop	r8
     6d6:	7f 90       	pop	r7
     6d8:	5f 90       	pop	r5
     6da:	4f 90       	pop	r4
     6dc:	3f 90       	pop	r3
     6de:	2f 90       	pop	r2
     6e0:	08 95       	ret

000006e2 <RvalOut>:
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
      lcd_space();
   }
}

void RvalOut(uint8_t ii) {	
     6e2:	0f 93       	push	r16
   // output of resistor value

   DisplayValue(resis[ii].rx,-1,LCD_CHAR_OMEGA,4);
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	2b e0       	ldi	r18, 0x0B	; 11
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	82 9f       	mul	r24, r18
     6ec:	f0 01       	movw	r30, r0
     6ee:	83 9f       	mul	r24, r19
     6f0:	f0 0d       	add	r31, r0
     6f2:	92 9f       	mul	r25, r18
     6f4:	f0 0d       	add	r31, r0
     6f6:	11 24       	eor	r1, r1
     6f8:	e8 5e       	subi	r30, 0xE8	; 232
     6fa:	fe 4f       	sbci	r31, 0xFE	; 254
     6fc:	60 81       	ld	r22, Z
     6fe:	71 81       	ldd	r23, Z+1	; 0x01
     700:	82 81       	ldd	r24, Z+2	; 0x02
     702:	93 81       	ldd	r25, Z+3	; 0x03
     704:	4f ef       	ldi	r20, 0xFF	; 255
     706:	24 ef       	ldi	r18, 0xF4	; 244
     708:	04 e0       	ldi	r16, 0x04	; 4
     70a:	0e 94 bb 02 	call	0x576	; 0x576 <DisplayValue>
   lcd_space();
     70e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
 }
     712:	0f 91       	pop	r16
     714:	08 95       	ret

00000716 <mVAusgabe>:
   lcd_line2(); 				//2. row
   lcd_fix_string(Uf_str);			//"Uf="
   mVAusgabe(bcdnum >> 4);
   mVAusgabe(bcdnum & 0x0f);
}
void mVAusgabe(uint8_t nn) {
     716:	0f 93       	push	r16
   if (nn < 3) {
     718:	83 30       	cpi	r24, 0x03	; 3
     71a:	98 f4       	brcc	.+38     	; 0x742 <mVAusgabe+0x2c>
      // Output in mV units
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
     71c:	e8 2f       	mov	r30, r24
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	ee 0f       	add	r30, r30
     722:	ff 1f       	adc	r31, r31
     724:	ee 0f       	add	r30, r30
     726:	ff 1f       	adc	r31, r31
     728:	e4 59       	subi	r30, 0x94	; 148
     72a:	fe 4f       	sbci	r31, 0xFE	; 254
     72c:	62 81       	ldd	r22, Z+2	; 0x02
     72e:	73 81       	ldd	r23, Z+3	; 0x03
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	4d ef       	ldi	r20, 0xFD	; 253
     736:	26 e5       	ldi	r18, 0x56	; 86
     738:	03 e0       	ldi	r16, 0x03	; 3
     73a:	0e 94 bb 02 	call	0x576	; 0x576 <DisplayValue>
      lcd_space();
     73e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
   }
}
     742:	0f 91       	pop	r16
     744:	08 95       	ret

00000746 <UfAusgabe>:
// output of flux voltage for 1-2 diodes in row 2
// bcdnum = Numbers of both Diodes:
// higher 4 Bit  number of first Diode
// lower 4 Bit  number of second Diode (Structure diodes[nn])
// if number >= 3  no output is done
void UfAusgabe(uint8_t bcdnum) {
     746:	1f 93       	push	r17
     748:	18 2f       	mov	r17, r24

   lcd_line2(); 				//2. row
     74a:	80 ec       	ldi	r24, 0xC0	; 192
     74c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
   lcd_fix_string(Uf_str);			//"Uf="
     750:	8e e0       	ldi	r24, 0x0E	; 14
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
   mVAusgabe(bcdnum >> 4);
     758:	81 2f       	mov	r24, r17
     75a:	82 95       	swap	r24
     75c:	8f 70       	andi	r24, 0x0F	; 15
     75e:	0e 94 8b 03 	call	0x716	; 0x716 <mVAusgabe>
   mVAusgabe(bcdnum & 0x0f);
     762:	81 2f       	mov	r24, r17
     764:	8f 70       	andi	r24, 0x0F	; 15
     766:	0e 94 8b 03 	call	0x716	; 0x716 <mVAusgabe>
}
     76a:	1f 91       	pop	r17
     76c:	08 95       	ret

0000076e <sleep_5ms>:
      t2_offset =  (5000 - (16384 / (int)(F_CPU / 1000000UL))) / 128;	/* set to 5ms above the actual counter */
      pause = 0;
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     76e:	42 e0       	ldi	r20, 0x02	; 2
/* wake up will be done with compare match interrupt of counter 2 */
void sleep_5ms(uint16_t pause){
// pause is the delay in 5ms units
uint8_t t2_offset;

while (pause > 0)
     770:	1c c0       	rjmp	.+56     	; 0x7aa <sleep_5ms+0x3c>
  {
#if F_CPU >= 8000000UL
   if (pause > 1)
     772:	82 30       	cpi	r24, 0x02	; 2
     774:	91 05       	cpc	r25, r1
     776:	18 f0       	brcs	.+6      	; 0x77e <sleep_5ms+0x10>
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - (16384 / (int)(F_CPU / 1000000UL))) / 128;	/* set to 10ms above the actual counter */
      pause -= 2;
     778:	02 97       	sbiw	r24, 0x02	; 2
  {
#if F_CPU >= 8000000UL
   if (pause > 1)
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - (16384 / (int)(F_CPU / 1000000UL))) / 128;	/* set to 10ms above the actual counter */
     77a:	3e e3       	ldi	r19, 0x3E	; 62
     77c:	03 c0       	rjmp	.+6      	; 0x784 <sleep_5ms+0x16>
      pause -= 2;
     } else {
      t2_offset =  (5000 - (16384 / (int)(F_CPU / 1000000UL))) / 128;	/* set to 5ms above the actual counter */
     77e:	37 e1       	ldi	r19, 0x17	; 23
      pause = 0;
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	90 e0       	ldi	r25, 0x00	; 0
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
     784:	20 91 b2 00 	lds	r18, 0x00B2
     788:	23 0f       	add	r18, r19
     78a:	20 93 b3 00 	sts	0x00B3, r18
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     78e:	40 93 70 00 	sts	0x0070, r20
//   set_sleep_mode(SLEEP_MODE_PWR_SAVE);
   set_sleep_mode(SLEEP_MODE_PWR_SAVE);
     792:	23 b7       	in	r18, 0x33	; 51
     794:	21 7f       	andi	r18, 0xF1	; 241
     796:	26 60       	ori	r18, 0x06	; 6
     798:	23 bf       	out	0x33, r18	; 51
//   set_sleep_mode(SLEEP_MODE_IDLE);
   sleep_mode();
     79a:	23 b7       	in	r18, 0x33	; 51
     79c:	21 60       	ori	r18, 0x01	; 1
     79e:	23 bf       	out	0x33, r18	; 51
     7a0:	88 95       	sleep
     7a2:	23 b7       	in	r18, 0x33	; 51
     7a4:	2e 7f       	andi	r18, 0xFE	; 254
     7a6:	23 bf       	out	0x33, r18	; 51
// wake up after output compare match interrupt
#else
   wait5ms();
#endif
   wdt_reset();
     7a8:	a8 95       	wdr
/* wake up will be done with compare match interrupt of counter 2 */
void sleep_5ms(uint16_t pause){
// pause is the delay in 5ms units
uint8_t t2_offset;

while (pause > 0)
     7aa:	00 97       	sbiw	r24, 0x00	; 0
     7ac:	11 f7       	brne	.-60     	; 0x772 <sleep_5ms+0x4>
#else
   wait5ms();
#endif
   wdt_reset();
  }
TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
     7ae:	10 92 70 00 	sts	0x0070, r1
}
     7b2:	08 95       	ret

000007b4 <CheckPins>:
//******************************************************************
void CheckPins(uint8_t HighPin, uint8_t LowPin, uint8_t TristatePin)
  {
     7b4:	2f 92       	push	r2
     7b6:	3f 92       	push	r3
     7b8:	4f 92       	push	r4
     7ba:	5f 92       	push	r5
     7bc:	6f 92       	push	r6
     7be:	7f 92       	push	r7
     7c0:	8f 92       	push	r8
     7c2:	9f 92       	push	r9
     7c4:	af 92       	push	r10
     7c6:	bf 92       	push	r11
     7c8:	cf 92       	push	r12
     7ca:	df 92       	push	r13
     7cc:	ef 92       	push	r14
     7ce:	ff 92       	push	r15
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	df 93       	push	r29
     7d6:	cf 93       	push	r28
     7d8:	cd b7       	in	r28, 0x3d	; 61
     7da:	de b7       	in	r29, 0x3e	; 62
     7dc:	66 97       	sbiw	r28, 0x16	; 22
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	f8 94       	cli
     7e2:	de bf       	out	0x3e, r29	; 62
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	cd bf       	out	0x3d, r28	; 61
     7e8:	18 2f       	mov	r17, r24
     7ea:	36 2e       	mov	r3, r22
     7ec:	24 2e       	mov	r2, r20
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
     7ee:	a8 95       	wdr
//  #define RR680MI resis680mi
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = MEM_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
     7f0:	a6 2e       	mov	r10, r22
     7f2:	bb 24       	eor	r11, r11
     7f4:	c5 01       	movw	r24, r10
     7f6:	8b 55       	subi	r24, 0x5B	; 91
     7f8:	9e 4f       	sbci	r25, 0xFE	; 254
     7fa:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__eerd_byte_m168>
     7fe:	8a 83       	std	Y+2, r24	; 0x02
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
  TriPinRL = MEM_read_byte(&PinRLtab[TristatePin]);	// intruction for TristatePin R_L
     800:	82 2d       	mov	r24, r2
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	8b 55       	subi	r24, 0x5B	; 91
     806:	9e 4f       	sbci	r25, 0xFE	; 254
     808:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__eerd_byte_m168>
     80c:	d8 2e       	mov	r13, r24
  TriPinRH = TriPinRL + TriPinRL;			// intruction for TristatePin R_H
     80e:	08 2f       	mov	r16, r24
     810:	00 0f       	add	r16, r16
  HiPinRL = MEM_read_byte(&PinRLtab[HighPin]);		// intruction for HighPin R_L
     812:	e1 2e       	mov	r14, r17
     814:	ff 24       	eor	r15, r15
     816:	c7 01       	movw	r24, r14
     818:	8b 55       	subi	r24, 0x5B	; 91
     81a:	9e 4f       	sbci	r25, 0xFE	; 254
     81c:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__eerd_byte_m168>
     820:	c8 2e       	mov	r12, r24
  HiPinRH = HiPinRL + HiPinRL;				// intruction for HighPin R_H
     822:	28 2f       	mov	r18, r24
     824:	22 0f       	add	r18, r18
     826:	28 87       	std	Y+8, r18	; 0x08

  HiADCp = MEM_read_byte(&PinADCtab[HighPin]);		// intruction for ADC High-Pin 
     828:	c7 01       	movw	r24, r14
     82a:	88 55       	subi	r24, 0x58	; 88
     82c:	9e 4f       	sbci	r25, 0xFE	; 254
     82e:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__eerd_byte_m168>
     832:	89 83       	std	Y+1, r24	; 0x01
  LoADCp = MEM_read_byte(&PinADCtab[LowPin]);		// intruction for ADC Low-Pin
     834:	c5 01       	movw	r24, r10
     836:	88 55       	subi	r24, 0x58	; 88
     838:	9e 4f       	sbci	r25, 0xFE	; 254
     83a:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__eerd_byte_m168>
  HiADCm = HiADCp | TXD_MSK;
     83e:	39 81       	ldd	r19, Y+1	; 0x01
     840:	38 60       	ori	r19, 0x08	; 8
     842:	39 83       	std	Y+1, r19	; 0x01
  HiADCp |= TXD_VAL;
  LoADCm = LoADCp | TXD_MSK;
     844:	88 60       	ori	r24, 0x08	; 8
     846:	8b 83       	std	Y+3, r24	; 0x03
  LoADCp |= TXD_VAL;

  //setting of Pins 
  R_PORT = 0;				//resistor-Port outputs to 0
     848:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//Low-Pin to output and across R_L to GND
     84a:	8a 81       	ldd	r24, Y+2	; 0x02
     84c:	84 b9       	out	0x04, r24	; 4
  ADC_DDR = HiADCm;		//High-Pin to output
     84e:	37 b9       	out	0x07, r19	; 7
  ADC_PORT = HiADCp;		//High-Pin fix to Vcc
     850:	38 b9       	out	0x08, r19	; 8
  //for some MOSFET the gate (TristatePin) must be discharged
  ChargePin10ms(TriPinRL,0);		//discharge for N-Kanal
     852:	8d 2d       	mov	r24, r13
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	0e 94 a7 01 	call	0x34e	; 0x34e <ChargePin10ms>
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin 
     85a:	83 2d       	mov	r24, r3
     85c:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
     860:	9a 87       	std	Y+10, r25	; 0x0a
     862:	89 87       	std	Y+9, r24	; 0x09
  if(adc.lp_otr >= 977) {		//no current now? 
     864:	a3 e0       	ldi	r26, 0x03	; 3
     866:	81 3d       	cpi	r24, 0xD1	; 209
     868:	9a 07       	cpc	r25, r26
     86a:	48 f0       	brcs	.+18     	; 0x87e <CheckPins+0xca>
     ChargePin10ms(TriPinRL,1);	 	//else: discharge for P-channel (Gate to VCC)
     86c:	8d 2d       	mov	r24, r13
     86e:	61 e0       	ldi	r22, 0x01	; 1
     870:	0e 94 a7 01 	call	0x34e	; 0x34e <ChargePin10ms>
     adc.lp_otr = ReadADC(LowPin);	//read voltage of Low-Pin again
     874:	83 2d       	mov	r24, r3
     876:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
     87a:	9a 87       	std	Y+10, r25	; 0x0a
     87c:	89 87       	std	Y+9, r24	; 0x09
  lcd_line2();
  lcd_clear_line();
  lcd_line2();
#endif

  if(adc.lp_otr > 92) {  //there is some current without TristatePin current 
     87e:	e9 85       	ldd	r30, Y+9	; 0x09
     880:	fa 85       	ldd	r31, Y+10	; 0x0a
     882:	ed 35       	cpi	r30, 0x5D	; 93
     884:	f1 05       	cpc	r31, r1
     886:	08 f4       	brcc	.+2      	; 0x88a <CheckPins+0xd6>
     888:	aa c0       	rjmp	.+340    	; 0x9de <CheckPins+0x22a>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test if N-JFET or if self-conducting N-MOSFET
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
     88a:	8a 81       	ldd	r24, Y+2	; 0x02
     88c:	80 2b       	or	r24, r16
     88e:	84 b9       	out	0x04, r24	; 4
     adc.lp1 = W20msReadADC(LowPin);	//measure voltage at the assumed Source 
     890:	83 2d       	mov	r24, r3
     892:	0e 94 a5 1a 	call	0x354a	; 0x354a <W20msReadADC>
     896:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     898:	82 2d       	mov	r24, r2
     89a:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
     89e:	7c 01       	movw	r14, r24
     R_PORT = TriPinRH;			//switch R_H for Tristate-Pin (probably Gate) to VCC
     8a0:	05 b9       	out	0x05, r16	; 5
     adc.lp2 = W20msReadADC(LowPin);	//measure voltage at the assumed Source again
     8a2:	83 2d       	mov	r24, r3
     8a4:	0e 94 a5 1a 	call	0x354a	; 0x354a <W20msReadADC>
     //If it is a self-conducting MOSFET or JFET, then must be: adc.lp2 > adc.lp1 
     if(adc.lp2>(adc.lp1+488)) {
     8a8:	95 01       	movw	r18, r10
     8aa:	28 51       	subi	r18, 0x18	; 24
     8ac:	3e 4f       	sbci	r19, 0xFE	; 254
     8ae:	28 17       	cp	r18, r24
     8b0:	39 07       	cpc	r19, r25
     8b2:	08 f0       	brcs	.+2      	; 0x8b6 <CheckPins+0x102>
     8b4:	40 c0       	rjmp	.+128    	; 0x936 <CheckPins+0x182>
        //measure voltage at the  Gate, differ between MOSFET and JFET
        ADC_PORT = TXD_VAL;
     8b6:	88 e0       	ldi	r24, 0x08	; 8
     8b8:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = LoADCm;	//Low-Pin fix to GND
     8ba:	fb 81       	ldd	r31, Y+3	; 0x03
     8bc:	f7 b9       	out	0x07, r31	; 7
        R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     8be:	80 2f       	mov	r24, r16
     8c0:	8c 29       	or	r24, r12
     8c2:	84 b9       	out	0x04, r24	; 4
        R_PORT = TriPinRH | HiPinRL;	//switch R_L for High-Pin to VCC
     8c4:	85 b9       	out	0x05, r24	; 5
        adc.lp2 = W20msReadADC(TristatePin); //read voltage of assumed Gate 
     8c6:	82 2d       	mov	r24, r2
     8c8:	0e 94 a5 1a 	call	0x354a	; 0x354a <W20msReadADC>
        if(adc.lp2>3911) {  //MOSFET
     8cc:	2f e0       	ldi	r18, 0x0F	; 15
     8ce:	88 34       	cpi	r24, 0x48	; 72
     8d0:	92 07       	cpc	r25, r18
     8d2:	28 f0       	brcs	.+10     	; 0x8de <CheckPins+0x12a>
           PartFound = PART_FET;	//N-Kanal-MOSFET
     8d4:	83 e0       	ldi	r24, 0x03	; 3
     8d6:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_N_D_MOS; //Depletion-MOSFET
     8da:	84 e0       	ldi	r24, 0x04	; 4
     8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <CheckPins+0x132>
        } else {  //JFET (pn-passage between Gate and Source is conducting )
           PartFound = PART_FET;	//N-Kanal-JFET
     8de:	83 e0       	ldi	r24, 0x03	; 3
     8e0:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_N_JFET;
     8e4:	86 e0       	ldi	r24, 0x06	; 6
     8e6:	80 93 06 01 	sts	0x0106, r24
        }
//      if ((PartReady == 0) || (adc.lp1 > trans.uBE[0])) 
//      there is no way to find out the right Source / Drain
        trans.uBE[0] = adc.lp1;
     8ea:	b0 92 4f 01 	sts	0x014F, r11
     8ee:	a0 92 4e 01 	sts	0x014E, r10
        gthvoltage = adc.lp1 - adc.tp1;	//voltage GS (Source - Gate)
     8f2:	c5 01       	movw	r24, r10
     8f4:	8e 19       	sub	r24, r14
     8f6:	9f 09       	sbc	r25, r15
     8f8:	90 93 57 01 	sts	0x0157, r25
     8fc:	80 93 56 01 	sts	0x0156, r24
        trans.uBE[1] = (unsigned int)(((unsigned long)adc.lp1 * 1000) / RR680MI); // Id 0.01mA
     900:	b5 01       	movw	r22, r10
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	28 ee       	ldi	r18, 0xE8	; 232
     908:	33 e0       	ldi	r19, 0x03	; 3
     90a:	40 e0       	ldi	r20, 0x00	; 0
     90c:	50 e0       	ldi	r21, 0x00	; 0
     90e:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
     912:	20 91 02 01 	lds	r18, 0x0102
     916:	30 91 03 01 	lds	r19, 0x0103
     91a:	40 e0       	ldi	r20, 0x00	; 0
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     922:	30 93 51 01 	sts	0x0151, r19
     926:	20 93 50 01 	sts	0x0150, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     92a:	20 92 52 01 	sts	0x0152, r2
        trans.c = HighPin;
     92e:	10 93 53 01 	sts	0x0153, r17
        trans.e = LowPin;
     932:	30 92 54 01 	sts	0x0154, r3
     }

     ADC_PORT = TXD_VAL;		// direct outputs to GND
     936:	88 e0       	ldi	r24, 0x08	; 8
     938:	88 b9       	out	0x08, r24	; 8

     //Test, if P-JFET or if self-conducting P-MOSFET
     ADC_DDR = LoADCm;		//switch Low-Pin (assumed Drain) direct to GND,
     93a:	3b 81       	ldd	r19, Y+3	; 0x03
     93c:	37 b9       	out	0x07, r19	; 7
				//R_H for Tristate-Pin (assumed Gate) is already switched to VCC
     R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     93e:	80 2f       	mov	r24, r16
     940:	8c 29       	or	r24, r12
     942:	84 b9       	out	0x04, r24	; 4
     R_PORT = TriPinRH | HiPinRL;	//High-Pin across R_L to Vcc
     944:	85 b9       	out	0x05, r24	; 5
     adc.hp1 = W20msReadADC(HighPin);	//measure voltage at assumed Source 
     946:	81 2f       	mov	r24, r17
     948:	0e 94 a5 1a 	call	0x354a	; 0x354a <W20msReadADC>
     94c:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     94e:	82 2d       	mov	r24, r2
     950:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
     954:	7c 01       	movw	r14, r24
     R_PORT = HiPinRL;			//switch R_H for Tristate-Pin (assumed Gate) to GND
     956:	c5 b8       	out	0x05, r12	; 5
     adc.hp2 = W20msReadADC(HighPin);	//read voltage at assumed Source again
     958:	81 2f       	mov	r24, r17
     95a:	0e 94 a5 1a 	call	0x354a	; 0x354a <W20msReadADC>
     //if it is a self-conducting P_MOSFET or P-JFET , then must be:  adc.hp1 > adc.hp2 
     if(adc.hp1>(adc.hp2+488)) {
     95e:	88 51       	subi	r24, 0x18	; 24
     960:	9e 4f       	sbci	r25, 0xFE	; 254
     962:	8a 15       	cp	r24, r10
     964:	9b 05       	cpc	r25, r11
     966:	d8 f5       	brcc	.+118    	; 0x9de <CheckPins+0x22a>
        //read voltage at the Gate , to differ between MOSFET and JFET
        ADC_PORT = HiADCp;	//switch High-Pin directly to VCC
     968:	89 81       	ldd	r24, Y+1	; 0x01
     96a:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = HiADCm;	//switch High-Pin to output
     96c:	87 b9       	out	0x07, r24	; 7
        adc.tp2 = W20msReadADC(TristatePin); //read voltage at the assumed Gate 
     96e:	82 2d       	mov	r24, r2
     970:	0e 94 a5 1a 	call	0x354a	; 0x354a <W20msReadADC>
        if(adc.tp2<977) { 		//MOSFET
     974:	a3 e0       	ldi	r26, 0x03	; 3
     976:	81 3d       	cpi	r24, 0xD1	; 209
     978:	9a 07       	cpc	r25, r26
     97a:	28 f4       	brcc	.+10     	; 0x986 <CheckPins+0x1d2>
           PartFound = PART_FET;	//P-Kanal-MOSFET
     97c:	83 e0       	ldi	r24, 0x03	; 3
     97e:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_D_MOS; //Depletion-MOSFET
     982:	85 e0       	ldi	r24, 0x05	; 5
     984:	04 c0       	rjmp	.+8      	; 0x98e <CheckPins+0x1da>
        } else { 			//JFET (pn-passage between Gate and Source is conducting)
           PartFound = PART_FET;	//P-Kanal-JFET
     986:	83 e0       	ldi	r24, 0x03	; 3
     988:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_JFET;
     98c:	87 e0       	ldi	r24, 0x07	; 7
     98e:	80 93 06 01 	sts	0x0106, r24
        }
        gthvoltage = adc.tp1 - adc.hp1;		//voltage GS (Gate - Source)
     992:	ea 18       	sub	r14, r10
     994:	fb 08       	sbc	r15, r11
     996:	f0 92 57 01 	sts	0x0157, r15
     99a:	e0 92 56 01 	sts	0x0156, r14
        trans.uBE[1] = (unsigned int)(((unsigned long)(ADCconfig.U_AVCC - adc.hp1) * 1000) / RR680PL); // Id 0.01mA
     99e:	60 91 3d 01 	lds	r22, 0x013D
     9a2:	70 91 3e 01 	lds	r23, 0x013E
     9a6:	6a 19       	sub	r22, r10
     9a8:	7b 09       	sbc	r23, r11
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	28 ee       	ldi	r18, 0xE8	; 232
     9b0:	33 e0       	ldi	r19, 0x03	; 3
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
     9ba:	20 91 08 01 	lds	r18, 0x0108
     9be:	30 91 09 01 	lds	r19, 0x0109
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     9ca:	30 93 51 01 	sts	0x0151, r19
     9ce:	20 93 50 01 	sts	0x0150, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     9d2:	20 92 52 01 	sts	0x0152, r2
        trans.c = LowPin;
     9d6:	30 92 53 01 	sts	0x0153, r3
        trans.e = HighPin;
     9da:	10 93 54 01 	sts	0x0154, r17
  } // end component has current without TristatePin signal


#ifdef COMMON_COLLECTOR
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
     9de:	88 e0       	ldi	r24, 0x08	; 8
     9e0:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;			// Collector direct to GND
     9e2:	bb 81       	ldd	r27, Y+3	; 0x03
     9e4:	b7 b9       	out	0x07, r27	; 7
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
     9e6:	c5 b8       	out	0x05, r12	; 5
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
     9e8:	ec 2d       	mov	r30, r12
     9ea:	ed 29       	or	r30, r13
     9ec:	eb 87       	std	Y+11, r30	; 0x0b
     9ee:	e4 b9       	out	0x04, r30	; 4
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     9f0:	a0 90 3d 01 	lds	r10, 0x013D
     9f4:	b0 90 3e 01 	lds	r11, 0x013E
     9f8:	81 2f       	mov	r24, r17
     9fa:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
     9fe:	7c 01       	movw	r14, r24
  adc.tp1 = ReadADC(TristatePin);	// voltage at the base resistor
     a00:	82 2d       	mov	r24, r2
     a02:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
     a06:	4c 01       	movw	r8, r24

  if (adc.tp1 < 10) {
     a08:	8a 30       	cpi	r24, 0x0A	; 10
     a0a:	91 05       	cpc	r25, r1
     a0c:	68 f5       	brcc	.+90     	; 0xa68 <CheckPins+0x2b4>
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
     a0e:	80 2f       	mov	r24, r16
     a10:	8c 29       	or	r24, r12
     a12:	84 b9       	out	0x04, r24	; 4
     adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);
     a14:	a0 90 3d 01 	lds	r10, 0x013D
     a18:	b0 90 3e 01 	lds	r11, 0x013E
     a1c:	81 2f       	mov	r24, r17
     a1e:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
     a22:	a8 1a       	sub	r10, r24
     a24:	b9 0a       	sbc	r11, r25
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
     a26:	82 2d       	mov	r24, r2
     a28:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
     a2c:	4c 01       	movw	r8, r24
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     a2e:	25 01       	movw	r4, r10
     a30:	66 24       	eor	r6, r6
     a32:	77 24       	eor	r7, r7
     a34:	20 91 08 01 	lds	r18, 0x0108
     a38:	30 91 09 01 	lds	r19, 0x0109
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	50 e0       	ldi	r21, 0x00	; 0
     a40:	60 e6       	ldi	r22, 0x60	; 96
     a42:	77 eb       	ldi	r23, 0xB7	; 183
     a44:	87 e4       	ldi	r24, 0x47	; 71
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     a4c:	c3 01       	movw	r24, r6
     a4e:	b2 01       	movw	r22, r4
     a50:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
     a54:	94 01       	movw	r18, r8
     a56:	40 e0       	ldi	r20, 0x00	; 0
     a58:	50 e0       	ldi	r21, 0x00	; 0
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     a5a:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     a5e:	2c 83       	std	Y+4, r18	; 0x04
     a60:	3d 83       	std	Y+5, r19	; 0x05
     a62:	4e 83       	std	Y+6, r20	; 0x06
     a64:	5f 83       	std	Y+7, r21	; 0x07
     a66:	0f c0       	rjmp	.+30     	; 0xa86 <CheckPins+0x2d2>
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
  ADC_DDR = LoADCm;			// Collector direct to GND
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     a68:	ae 18       	sub	r10, r14
     a6a:	bf 08       	sbc	r11, r15
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
 #else
     c_hfe = ((adc.hp1 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
  } else {
     c_hfe = (unsigned long)((adc.hp1 - adc.tp1) / adc.tp1);
     a6c:	c5 01       	movw	r24, r10
     a6e:	88 19       	sub	r24, r8
     a70:	99 09       	sbc	r25, r9
     a72:	b4 01       	movw	r22, r8
     a74:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <__udivmodhi4>
     a78:	cb 01       	movw	r24, r22
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	8c 83       	std	Y+4, r24	; 0x04
     a80:	9d 83       	std	Y+5, r25	; 0x05
     a82:	ae 83       	std	Y+6, r26	; 0x06
     a84:	bf 83       	std	Y+7, r27	; 0x07
  }
#endif

  //set Pins again for circuit with common Emitter PNP
  R_DDR = LoPinRL;		//switch R_L port for Low-Pin to output (GND)
     a86:	9a 81       	ldd	r25, Y+2	; 0x02
     a88:	94 b9       	out	0x04, r25	; 4
  R_PORT = 0;			//switch all resistor ports to GND
     a8a:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = HiADCm;		//switch High-Pin to output
     a8c:	a9 81       	ldd	r26, Y+1	; 0x01
     a8e:	a7 b9       	out	0x07, r26	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
     a90:	a8 b9       	out	0x08, r26	; 8
  wait5ms();
     a92:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <wait5ms>
  
  if(adc.lp_otr < 977) {
     a96:	e9 85       	ldd	r30, Y+9	; 0x09
     a98:	fa 85       	ldd	r31, Y+10	; 0x0a
     a9a:	23 e0       	ldi	r18, 0x03	; 3
     a9c:	e1 3d       	cpi	r30, 0xD1	; 209
     a9e:	f2 07       	cpc	r31, r18
     aa0:	08 f0       	brcs	.+2      	; 0xaa4 <CheckPins+0x2f0>
     aa2:	a4 c2       	rjmp	.+1352   	; 0xfec <CheckPins+0x838>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test to PNP
     R_DDR = LoPinRL | TriPinRL;	//switch R_L port for Tristate-Pin to output (GND), for Test of PNP
     aa4:	3a 81       	ldd	r19, Y+2	; 0x02
     aa6:	3d 29       	or	r19, r13
     aa8:	3f 87       	std	Y+15, r19	; 0x0f
     aaa:	34 b9       	out	0x04, r19	; 4
     adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin
     aac:	83 2d       	mov	r24, r3
     aae:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
     if(adc.lp1 > 3422) {
     ab2:	ad e0       	ldi	r26, 0x0D	; 13
     ab4:	8f 35       	cpi	r24, 0x5F	; 95
     ab6:	9a 07       	cpc	r25, r26
     ab8:	08 f4       	brcc	.+2      	; 0xabc <CheckPins+0x308>
     aba:	e1 c0       	rjmp	.+450    	; 0xc7e <CheckPins+0x4ca>
        //component has current => PNP-Transistor or equivalent
        //compute current amplification factor in both directions
        R_DDR = LoPinRL | TriPinRH;	//switch R_H port for Tristate-Pin (Base) to output (GND)
     abc:	ba 81       	ldd	r27, Y+2	; 0x02
     abe:	b0 2b       	or	r27, r16
     ac0:	b8 8b       	std	Y+16, r27	; 0x10
     ac2:	b4 b9       	out	0x04, r27	; 4

        adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin (assumed Collector)
     ac4:	83 2d       	mov	r24, r3
     ac6:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
     aca:	9a 8b       	std	Y+18, r25	; 0x12
     acc:	89 8b       	std	Y+17, r24	; 0x11
        adc.tp2 = ReadADC(TristatePin);	//measure voltage at TristatePin (Base) 
     ace:	82 2d       	mov	r24, r2
     ad0:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
     ad4:	9d 8b       	std	Y+21, r25	; 0x15
     ad6:	8c 8b       	std	Y+20, r24	; 0x14
        //check, if Test is done before 
        if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     ad8:	80 91 07 01 	lds	r24, 0x0107
     adc:	82 50       	subi	r24, 0x02	; 2
     ade:	82 30       	cpi	r24, 0x02	; 2
     ae0:	18 f4       	brcc	.+6      	; 0xae8 <CheckPins+0x334>
           PartReady = 1;
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	80 93 04 01 	sts	0x0104, r24
        }
        trans.uBE[PartReady] = ReadADC(HighPin) - adc.tp2;	// Base Emitter Voltage
     ae8:	e0 90 04 01 	lds	r14, 0x0104
     aec:	ff 24       	eor	r15, r15
     aee:	81 2f       	mov	r24, r17
     af0:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
     af4:	f7 01       	movw	r30, r14
     af6:	ee 0f       	add	r30, r30
     af8:	ff 1f       	adc	r31, r31
     afa:	e2 5b       	subi	r30, 0xB2	; 178
     afc:	fe 4f       	sbci	r31, 0xFE	; 254
     afe:	2c 89       	ldd	r18, Y+20	; 0x14
     b00:	3d 89       	ldd	r19, Y+21	; 0x15
     b02:	82 1b       	sub	r24, r18
     b04:	93 0b       	sbc	r25, r19
     b06:	91 83       	std	Z+1, r25	; 0x01
     b08:	80 83       	st	Z, r24

        //compute current amplification factor for circuit with common Emitter
        //hFE = B = Collector current / Base current
        if(adc.tp2 < 53) {
     b0a:	25 33       	cpi	r18, 0x35	; 53
     b0c:	31 05       	cpc	r19, r1
     b0e:	20 f4       	brcc	.+8      	; 0xb18 <CheckPins+0x364>
#if DebugOut == 5
           lcd_data('<');
           lcd_data('5');
           lcd_data('3');
#endif
           adc.tp2 = 53;
     b10:	85 e3       	ldi	r24, 0x35	; 53
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	9d 8b       	std	Y+21, r25	; 0x15
     b16:	8c 8b       	std	Y+20, r24	; 0x14
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     b18:	e0 90 04 01 	lds	r14, 0x0104
     b1c:	ff 24       	eor	r15, r15
     b1e:	a9 89       	ldd	r26, Y+17	; 0x11
     b20:	ba 89       	ldd	r27, Y+18	; 0x12
     b22:	2d 01       	movw	r4, r26
     b24:	66 24       	eor	r6, r6
     b26:	77 24       	eor	r7, r7
     b28:	20 91 02 01 	lds	r18, 0x0102
     b2c:	30 91 03 01 	lds	r19, 0x0103
     b30:	40 e0       	ldi	r20, 0x00	; 0
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	60 e6       	ldi	r22, 0x60	; 96
     b36:	77 eb       	ldi	r23, 0xB7	; 183
     b38:	87 e4       	ldi	r24, 0x47	; 71
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     b40:	c3 01       	movw	r24, r6
     b42:	b2 01       	movw	r22, r4
     b44:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
                 (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
     b48:	ec 89       	ldd	r30, Y+20	; 0x14
     b4a:	fd 89       	ldd	r31, Y+21	; 0x15
     b4c:	9f 01       	movw	r18, r30
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
#endif
           adc.tp2 = 53;
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     b56:	f7 01       	movw	r30, r14
     b58:	ee 0f       	add	r30, r30
     b5a:	ff 1f       	adc	r31, r31
     b5c:	ee 0f       	add	r30, r30
     b5e:	ff 1f       	adc	r31, r31
     b60:	ea 5b       	subi	r30, 0xBA	; 186
     b62:	fe 4f       	sbci	r31, 0xFE	; 254
     b64:	20 83       	st	Z, r18
     b66:	31 83       	std	Z+1, r19	; 0x01
     b68:	42 83       	std	Z+2, r20	; 0x02
     b6a:	53 83       	std	Z+3, r21	; 0x03
        trans.hfe[PartReady] = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
#ifdef COMMON_COLLECTOR
        //current amplification factor for common  Collector (Emitter follower)
        // c_hFE = (Emitter current - Base current) / Base current
        if (c_hfe > trans.hfe[PartReady]) {
     b6c:	8c 81       	ldd	r24, Y+4	; 0x04
     b6e:	9d 81       	ldd	r25, Y+5	; 0x05
     b70:	ae 81       	ldd	r26, Y+6	; 0x06
     b72:	bf 81       	ldd	r27, Y+7	; 0x07
     b74:	28 17       	cp	r18, r24
     b76:	39 07       	cpc	r19, r25
     b78:	4a 07       	cpc	r20, r26
     b7a:	5b 07       	cpc	r21, r27
     b7c:	98 f4       	brcc	.+38     	; 0xba4 <CheckPins+0x3f0>
           trans.hfe[PartReady] = c_hfe;
     b7e:	80 83       	st	Z, r24
     b80:	91 83       	std	Z+1, r25	; 0x01
     b82:	a2 83       	std	Z+2, r26	; 0x02
     b84:	b3 83       	std	Z+3, r27	; 0x03
           trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.hp1 - adc.tp1;	// Base Emitter Voltage common collector
     b86:	f7 01       	movw	r30, r14
     b88:	ee 0f       	add	r30, r30
     b8a:	ff 1f       	adc	r31, r31
     b8c:	e2 5b       	subi	r30, 0xB2	; 178
     b8e:	fe 4f       	sbci	r31, 0xFE	; 254
     b90:	80 91 3d 01 	lds	r24, 0x013D
     b94:	90 91 3e 01 	lds	r25, 0x013E
     b98:	8a 19       	sub	r24, r10
     b9a:	9b 09       	sbc	r25, r11
     b9c:	88 19       	sub	r24, r8
     b9e:	99 09       	sbc	r25, r9
     ba0:	91 83       	std	Z+1, r25	; 0x01
     ba2:	80 83       	st	Z, r24
        }
#endif

 
        if(PartFound != PART_THYRISTOR) {
     ba4:	80 91 07 01 	lds	r24, 0x0107
     ba8:	85 30       	cpi	r24, 0x05	; 5
     baa:	09 f4       	brne	.+2      	; 0xbae <CheckPins+0x3fa>
     bac:	68 c0       	rjmp	.+208    	; 0xc7e <CheckPins+0x4ca>
           if(adc.tp2 > 977) {
     bae:	ac 89       	ldd	r26, Y+20	; 0x14
     bb0:	bd 89       	ldd	r27, Y+21	; 0x15
     bb2:	e3 e0       	ldi	r30, 0x03	; 3
     bb4:	a2 3d       	cpi	r26, 0xD2	; 210
     bb6:	be 07       	cpc	r27, r30
     bb8:	30 f0       	brcs	.+12     	; 0xbc6 <CheckPins+0x412>
              //PNP-Transistor is found (Base voltage moves to VCC)
              PartFound = PART_TRANSISTOR;
     bba:	82 e0       	ldi	r24, 0x02	; 2
     bbc:	80 93 07 01 	sts	0x0107, r24
              PartMode = PART_MODE_PNP;
     bc0:	80 93 06 01 	sts	0x0106, r24
     bc4:	56 c0       	rjmp	.+172    	; 0xc72 <CheckPins+0x4be>
           } else {
              if((adc.lp_otr < 97) && (adc.lp1 > 2000)) {
     bc6:	29 85       	ldd	r18, Y+9	; 0x09
     bc8:	3a 85       	ldd	r19, Y+10	; 0x0a
     bca:	21 36       	cpi	r18, 0x61	; 97
     bcc:	31 05       	cpc	r19, r1
     bce:	08 f0       	brcs	.+2      	; 0xbd2 <CheckPins+0x41e>
     bd0:	50 c0       	rjmp	.+160    	; 0xc72 <CheckPins+0x4be>
     bd2:	89 89       	ldd	r24, Y+17	; 0x11
     bd4:	9a 89       	ldd	r25, Y+18	; 0x12
     bd6:	a7 e0       	ldi	r26, 0x07	; 7
     bd8:	81 3d       	cpi	r24, 0xD1	; 209
     bda:	9a 07       	cpc	r25, r26
     bdc:	08 f4       	brcc	.+2      	; 0xbe0 <CheckPins+0x42c>
     bde:	49 c0       	rjmp	.+146    	; 0xc72 <CheckPins+0x4be>
                 //is flow voltage low enough in the closed  state?
                 //(since D-Mode-FET would be by mistake detected as E-Mode )
        	 PartFound = PART_FET;		//P-Kanal-MOSFET is found (Basis/Gate moves not to VCC)
     be0:	83 e0       	ldi	r24, 0x03	; 3
     be2:	80 93 07 01 	sts	0x0107, r24
        	 PartMode = PART_MODE_P_E_MOS;
     be6:	80 93 06 01 	sts	0x0106, r24
                 }
#else
                 //Switching of Drain is monitored with digital input
                 // Low level is specified up to 0.3 * VCC
                 // High level is specified above 0.6 * VCC
                 PinMSK = LoADCm & 7;
     bea:	eb 80       	ldd	r14, Y+3	; 0x03
     bec:	b7 e0       	ldi	r27, 0x07	; 7
     bee:	eb 22       	and	r14, r27
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
     bf0:	82 2d       	mov	r24, r2
     bf2:	80 64       	ori	r24, 0x40	; 64
     bf4:	80 93 7c 00 	sts	0x007C, r24
        	 gthvoltage = 1;			// round up ((1*4)/9)
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	90 93 57 01 	sts	0x0157, r25
     c00:	80 93 56 01 	sts	0x0156, r24
        	 for(ii=0;ii<11;ii++) {
     c04:	40 e0       	ldi	r20, 0x00	; 0
        	    wdt_reset();
     c06:	a8 95       	wdr
        	    ChargePin10ms(TriPinRL,1);
     c08:	8d 2d       	mov	r24, r13
     c0a:	61 e0       	ldi	r22, 0x01	; 1
     c0c:	4e 8b       	std	Y+22, r20	; 0x16
     c0e:	0e 94 a7 01 	call	0x34e	; 0x34e <ChargePin10ms>
                    R_DDR = LoPinRL | TriPinRH;		//switch R_H for Tristate-Pin (Basis) to GND
     c12:	e8 89       	ldd	r30, Y+16	; 0x10
     c14:	e4 b9       	out	0x04, r30	; 4
     c16:	4e 89       	ldd	r20, Y+22	; 0x16
        	    while (!(ADC_PIN&PinMSK));		// Wait, until the MOSFET switches and Drain moves to VCC
     c18:	86 b1       	in	r24, 0x06	; 6
     c1a:	8e 21       	and	r24, r14
     c1c:	e9 f3       	breq	.-6      	; 0xc18 <CheckPins+0x464>
                    			// 1 is detected with more than 2.5V (up to 2.57V) with tests of mega168 and mega328
        	    R_DDR = LoPinRL;
     c1e:	fa 81       	ldd	r31, Y+2	; 0x02
     c20:	f4 b9       	out	0x04, r31	; 4
        	    ADCSRA |= (1<<ADSC);		// Start Conversion
     c22:	80 91 7a 00 	lds	r24, 0x007A
     c26:	80 64       	ori	r24, 0x40	; 64
     c28:	80 93 7a 00 	sts	0x007A, r24
        	    while (ADCSRA&(1<<ADSC));		// wait
     c2c:	80 91 7a 00 	lds	r24, 0x007A
     c30:	86 fd       	sbrc	r24, 6
     c32:	fc cf       	rjmp	.-8      	; 0xc2c <CheckPins+0x478>
      		    gthvoltage += (1023 - ADCW);	// Add Tristatepin-Voltage
     c34:	20 91 78 00 	lds	r18, 0x0078
     c38:	30 91 79 00 	lds	r19, 0x0079
     c3c:	80 91 56 01 	lds	r24, 0x0156
     c40:	90 91 57 01 	lds	r25, 0x0157
     c44:	81 50       	subi	r24, 0x01	; 1
     c46:	9c 4f       	sbci	r25, 0xFC	; 252
     c48:	82 1b       	sub	r24, r18
     c4a:	93 0b       	sbc	r25, r19
     c4c:	90 93 57 01 	sts	0x0157, r25
     c50:	80 93 56 01 	sts	0x0156, r24
                 // Low level is specified up to 0.3 * VCC
                 // High level is specified above 0.6 * VCC
                 PinMSK = LoADCm & 7;
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
        	 gthvoltage = 1;			// round up ((1*4)/9)
        	 for(ii=0;ii<11;ii++) {
     c54:	4f 5f       	subi	r20, 0xFF	; 255
     c56:	4b 30       	cpi	r20, 0x0B	; 11
     c58:	b1 f6       	brne	.-84     	; 0xc06 <CheckPins+0x452>
        	    ADCSRA |= (1<<ADSC);		// Start Conversion
        	    while (ADCSRA&(1<<ADSC));		// wait
      		    gthvoltage += (1023 - ADCW);	// Add Tristatepin-Voltage
                 }
#endif
                 gthvoltage *= 4;		// is equal to 44*ADCW
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
                 gthvoltage /= 9;		// gives resolution in mV
     c62:	69 e0       	ldi	r22, 0x09	; 9
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <__udivmodhi4>
     c6a:	70 93 57 01 	sts	0x0157, r23
     c6e:	60 93 56 01 	sts	0x0156, r22
              }
           }
           trans.b = TristatePin;
     c72:	20 92 52 01 	sts	0x0152, r2
           trans.c = LowPin;
     c76:	30 92 53 01 	sts	0x0153, r3
           trans.e = HighPin;
     c7a:	10 93 54 01 	sts	0x0154, r17
        }  // end if PartFound != PART_THYRISTOR
    } // end component has current => PNP

#ifdef COMMON_COLLECTOR
    // Low-Pin=RL- HighPin=VCC
    R_DDR = LoPinRL | TriPinRL;
     c7e:	2f 85       	ldd	r18, Y+15	; 0x0f
     c80:	24 b9       	out	0x04, r18	; 4
    R_PORT = TriPinRL;			// TriPin=RL+  NPN with common Collector
     c82:	d5 b8       	out	0x05, r13	; 5
    adc.lp1 = W5msReadADC(LowPin);	// voltage at Emitter resistor
     c84:	83 2d       	mov	r24, r3
     c86:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
     c8a:	2c 01       	movw	r4, r24
    adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     c8c:	80 91 3d 01 	lds	r24, 0x013D
     c90:	90 91 3e 01 	lds	r25, 0x013E
     c94:	9a 8b       	std	Y+18, r25	; 0x12
     c96:	89 8b       	std	Y+17, r24	; 0x11
     c98:	82 2d       	mov	r24, r2
     c9a:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
     c9e:	a9 89       	ldd	r26, Y+17	; 0x11
     ca0:	ba 89       	ldd	r27, Y+18	; 0x12
     ca2:	a8 1b       	sub	r26, r24
     ca4:	b9 0b       	sbc	r27, r25
     ca6:	ba 8b       	std	Y+18, r27	; 0x12
     ca8:	a9 8b       	std	Y+17, r26	; 0x11
    if (adc.tp1 < 10) {
     caa:	aa 30       	cpi	r26, 0x0A	; 10
     cac:	b1 05       	cpc	r27, r1
     cae:	b0 f5       	brcc	.+108    	; 0xd1c <CheckPins+0x568>
       R_DDR = LoPinRL | TriPinRH;
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	80 2b       	or	r24, r16
     cb4:	84 b9       	out	0x04, r24	; 4
       R_PORT = TriPinRH;		// Tripin=RH+
     cb6:	05 b9       	out	0x05, r16	; 5
       adc.lp1 = W5msReadADC(LowPin);
     cb8:	83 2d       	mov	r24, r3
     cba:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
     cbe:	2c 01       	movw	r4, r24
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     cc0:	e0 91 3d 01 	lds	r30, 0x013D
     cc4:	f0 91 3e 01 	lds	r31, 0x013E
     cc8:	fa 8b       	std	Y+18, r31	; 0x12
     cca:	e9 8b       	std	Y+17, r30	; 0x11
     ccc:	82 2d       	mov	r24, r2
     cce:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
     cd2:	29 89       	ldd	r18, Y+17	; 0x11
     cd4:	3a 89       	ldd	r19, Y+18	; 0x12
     cd6:	28 1b       	sub	r18, r24
     cd8:	39 0b       	sbc	r19, r25
     cda:	3a 8b       	std	Y+18, r19	; 0x12
     cdc:	29 8b       	std	Y+17, r18	; 0x11
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     cde:	42 01       	movw	r8, r4
     ce0:	aa 24       	eor	r10, r10
     ce2:	bb 24       	eor	r11, r11
     ce4:	20 91 02 01 	lds	r18, 0x0102
     ce8:	30 91 03 01 	lds	r19, 0x0103
     cec:	40 e0       	ldi	r20, 0x00	; 0
     cee:	50 e0       	ldi	r21, 0x00	; 0
     cf0:	60 e6       	ldi	r22, 0x60	; 96
     cf2:	77 eb       	ldi	r23, 0xB7	; 183
     cf4:	87 e4       	ldi	r24, 0x47	; 71
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     cfc:	c5 01       	movw	r24, r10
     cfe:	b4 01       	movw	r22, r8
     d00:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
     d04:	a9 89       	ldd	r26, Y+17	; 0x11
     d06:	ba 89       	ldd	r27, Y+18	; 0x12
     d08:	9d 01       	movw	r18, r26
     d0a:	40 e0       	ldi	r20, 0x00	; 0
     d0c:	50 e0       	ldi	r21, 0x00	; 0
       R_DDR = LoPinRL | TriPinRH;
       R_PORT = TriPinRH;		// Tripin=RH+
       adc.lp1 = W5msReadADC(LowPin);
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     d0e:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     d12:	2c 83       	std	Y+4, r18	; 0x04
     d14:	3d 83       	std	Y+5, r19	; 0x05
     d16:	4e 83       	std	Y+6, r20	; 0x06
     d18:	5f 83       	std	Y+7, r21	; 0x07
     d1a:	0f c0       	rjmp	.+30     	; 0xd3a <CheckPins+0x586>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
 #else
       c_hfe = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
    } else {
       c_hfe = (adc.lp1 - adc.tp1) / adc.tp1;
     d1c:	c2 01       	movw	r24, r4
     d1e:	e9 89       	ldd	r30, Y+17	; 0x11
     d20:	fa 89       	ldd	r31, Y+18	; 0x12
     d22:	8e 1b       	sub	r24, r30
     d24:	9f 0b       	sbc	r25, r31
     d26:	bf 01       	movw	r22, r30
     d28:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <__udivmodhi4>
     d2c:	cb 01       	movw	r24, r22
     d2e:	a0 e0       	ldi	r26, 0x00	; 0
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	8c 83       	std	Y+4, r24	; 0x04
     d34:	9d 83       	std	Y+5, r25	; 0x05
     d36:	ae 83       	std	Y+6, r26	; 0x06
     d38:	bf 83       	std	Y+7, r27	; 0x07
       lcd_string(utoa(adc.tp1,outval,10));
       wait_about1s();
#endif
#endif
    //Tristate (can be Base) to VCC, Test if NPN
    ADC_DDR = LoADCm;		//Low-Pin to output 0V
     d3a:	9b 81       	ldd	r25, Y+3	; 0x03
     d3c:	97 b9       	out	0x07, r25	; 7
    ADC_PORT = TXD_VAL;			//switch Low-Pin to GND
     d3e:	88 e0       	ldi	r24, 0x08	; 8
     d40:	88 b9       	out	0x08, r24	; 8
    R_DDR = TriPinRL | HiPinRL;		//RL port for High-Pin and Tristate-Pin to output
     d42:	ab 85       	ldd	r26, Y+11	; 0x0b
     d44:	a4 b9       	out	0x04, r26	; 4
    R_PORT = TriPinRL | HiPinRL;	//RL port for High-Pin and Tristate-Pin to Vcc
     d46:	a5 b9       	out	0x05, r26	; 5
    adc.hp1 = W5msReadADC(HighPin);	//measure voltage at High-Pin  (Collector)
     d48:	81 2f       	mov	r24, r17
     d4a:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
    if(adc.hp1 < 1600) {
     d4e:	b6 e0       	ldi	r27, 0x06	; 6
     d50:	80 34       	cpi	r24, 0x40	; 64
     d52:	9b 07       	cpc	r25, r27
     d54:	08 f0       	brcs	.+2      	; 0xd58 <CheckPins+0x5a4>
     d56:	46 c1       	rjmp	.+652    	; 0xfe4 <CheckPins+0x830>
       lcd_data('N');
       lcd_testpin(HighPin);
       lcd_space();
       wait_about1s();
#endif
       if(PartReady==1) {
     d58:	80 91 04 01 	lds	r24, 0x0104
     d5c:	81 30       	cpi	r24, 0x01	; 1
     d5e:	09 f4       	brne	.+2      	; 0xd62 <CheckPins+0x5ae>
     d60:	ae c1       	rjmp	.+860    	; 0x10be <CheckPins+0x90a>
          goto widmes;
       }

       //Test auf Thyristor:
       //Gate discharge
       ChargePin10ms(TriPinRL,0);	//Tristate-Pin (Gate) across R_L 10ms to GND
     d62:	8d 2d       	mov	r24, r13
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	0e 94 a7 01 	call	0x34e	; 0x34e <ChargePin10ms>
       adc.hp3 = W5msReadADC(HighPin);	//read voltage at High-Pin (probably Anode) again
     d6a:	81 2f       	mov	r24, r17
     d6c:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
     d70:	7c 01       	movw	r14, r24
					//current should still flow, if not,
					// no Thyristor or holding current to low 
		 	
       R_PORT = 0;			//switch R_L for High-Pin (probably Anode) to GND (turn off)
     d72:	15 b8       	out	0x05, r1	; 5
       wait5ms();
     d74:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <wait5ms>
       R_PORT = HiPinRL;		//switch R_L for High-Pin (probably Anode) again to VCC
     d78:	c5 b8       	out	0x05, r12	; 5
       adc.hp2 = W5msReadADC(HighPin);	//measure voltage at the High-Pin (probably Anode) again
     d7a:	81 2f       	mov	r24, r17
     d7c:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
       if((adc.hp3 < 1600) && (adc.hp2 > 4400)) {
     d80:	e0 e4       	ldi	r30, 0x40	; 64
     d82:	ee 16       	cp	r14, r30
     d84:	e6 e0       	ldi	r30, 0x06	; 6
     d86:	fe 06       	cpc	r15, r30
     d88:	08 f0       	brcs	.+2      	; 0xd8c <CheckPins+0x5d8>
     d8a:	42 c0       	rjmp	.+132    	; 0xe10 <CheckPins+0x65c>
     d8c:	f1 e1       	ldi	r31, 0x11	; 17
     d8e:	81 33       	cpi	r24, 0x31	; 49
     d90:	9f 07       	cpc	r25, r31
     d92:	f0 f1       	brcs	.+124    	; 0xe10 <CheckPins+0x65c>
          //if the holding current was switched off the thyristor must be switched off too. 
          //if Thyristor was still swiched on, if gate was switched off => Thyristor
          PartFound = PART_THYRISTOR;
     d94:	85 e0       	ldi	r24, 0x05	; 5
     d96:	80 93 07 01 	sts	0x0107, r24
          //Test if Triac
          R_DDR = 0;
     d9a:	14 b8       	out	0x04, r1	; 4
          R_PORT = 0;
     d9c:	15 b8       	out	0x05, r1	; 5
          ADC_PORT = LoADCp;	//Low-Pin fix to VCC
     d9e:	2b 81       	ldd	r18, Y+3	; 0x03
     da0:	28 b9       	out	0x08, r18	; 8
          wait5ms();
     da2:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <wait5ms>
          R_DDR = HiPinRL;		//switch R_L port HighPin to output (GND)
     da6:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) > 244) {
     da8:	81 2f       	mov	r24, r17
     daa:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
     dae:	85 3f       	cpi	r24, 0xF5	; 245
     db0:	91 05       	cpc	r25, r1
     db2:	08 f0       	brcs	.+2      	; 0xdb6 <CheckPins+0x602>
     db4:	11 c1       	rjmp	.+546    	; 0xfd8 <CheckPins+0x824>
             goto savenresult;		//measure voltage at the  High-Pin (probably A2); if too high:
                                	//component has current => kein Triac
          }
          R_DDR = HiPinRL | TriPinRL;	//switch R_L port for TristatePin (Gate) to output (GND) => Triac should be triggered 
     db6:	3b 85       	ldd	r19, Y+11	; 0x0b
     db8:	34 b9       	out	0x04, r19	; 4
          if(W5msReadADC(TristatePin) < 977) {
     dba:	82 2d       	mov	r24, r2
     dbc:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
     dc0:	a3 e0       	ldi	r26, 0x03	; 3
     dc2:	81 3d       	cpi	r24, 0xD1	; 209
     dc4:	9a 07       	cpc	r25, r26
     dc6:	08 f4       	brcc	.+2      	; 0xdca <CheckPins+0x616>
     dc8:	07 c1       	rjmp	.+526    	; 0xfd8 <CheckPins+0x824>
             goto savenresult; 		//measure voltage at the Tristate-Pin (probably Gate) ;
                              		// if to low, abort 
          }
          if(ReadADC(HighPin) < 733) {
     dca:	81 2f       	mov	r24, r17
     dcc:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
     dd0:	b2 e0       	ldi	r27, 0x02	; 2
     dd2:	8d 3d       	cpi	r24, 0xDD	; 221
     dd4:	9b 07       	cpc	r25, r27
     dd6:	08 f4       	brcc	.+2      	; 0xdda <CheckPins+0x626>
     dd8:	ff c0       	rjmp	.+510    	; 0xfd8 <CheckPins+0x824>
             goto savenresult; 		//component has no current => no Triac => abort
          }
          R_DDR = HiPinRL;		//TristatePin (Gate) to input 
     dda:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) < 733) {
     ddc:	81 2f       	mov	r24, r17
     dde:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
     de2:	e2 e0       	ldi	r30, 0x02	; 2
     de4:	8d 3d       	cpi	r24, 0xDD	; 221
     de6:	9e 07       	cpc	r25, r30
     de8:	08 f4       	brcc	.+2      	; 0xdec <CheckPins+0x638>
     dea:	f6 c0       	rjmp	.+492    	; 0xfd8 <CheckPins+0x824>
             goto savenresult; 		//component has no current without base current => no Triac => abort
          }
          R_PORT = HiPinRL;		//switch R_L port for HighPin to VCC => switch off holding current 
     dec:	c5 b8       	out	0x05, r12	; 5
          wait5ms();
     dee:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <wait5ms>
          R_PORT = 0;			//switch R_L port for HighPin again to GND; Triac should now switched off
     df2:	15 b8       	out	0x05, r1	; 5
          if(W5msReadADC(HighPin) > 244) {
     df4:	81 2f       	mov	r24, r17
     df6:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
     dfa:	85 3f       	cpi	r24, 0xF5	; 245
     dfc:	91 05       	cpc	r25, r1
     dfe:	08 f0       	brcs	.+2      	; 0xe02 <CheckPins+0x64e>
     e00:	eb c0       	rjmp	.+470    	; 0xfd8 <CheckPins+0x824>
             goto savenresult;		//measure voltage at the High-Pin (probably A2) ;
                                	//if to high, component is not switched off => no Triac, abort
         }
         PartFound = PART_TRIAC;
     e02:	84 e0       	ldi	r24, 0x04	; 4
     e04:	80 93 07 01 	sts	0x0107, r24
         PartReady = 1;
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	80 93 04 01 	sts	0x0104, r24
         goto savenresult;
     e0e:	e4 c0       	rjmp	.+456    	; 0xfd8 <CheckPins+0x824>
        }
      //Test if NPN Transistor or MOSFET
      // ADC_DDR = LoADCm;	//Low-Pin to output 0V
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
     e10:	0c 29       	or	r16, r12
     e12:	04 b9       	out	0x04, r16	; 4
      R_PORT = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to VCC
     e14:	05 b9       	out	0x05, r16	; 5
      wait_about50ms();
     e16:	8a e0       	ldi	r24, 0x0A	; 10
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 b7 03 	call	0x76e	; 0x76e <sleep_5ms>
      adc.hp2 = ADCconfig.U_AVCC - ReadADC(HighPin);	//measure the voltage at the collector resistor 
     e1e:	60 90 3d 01 	lds	r6, 0x013D
     e22:	70 90 3e 01 	lds	r7, 0x013E
     e26:	81 2f       	mov	r24, r17
     e28:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
     e2c:	68 1a       	sub	r6, r24
     e2e:	79 0a       	sbc	r7, r25
      adc.tp2 = ADCconfig.U_AVCC - ReadADC(TristatePin);	//measure the voltage at the base resistor 
     e30:	a0 90 3d 01 	lds	r10, 0x013D
     e34:	b0 90 3e 01 	lds	r11, 0x013E
     e38:	82 2d       	mov	r24, r2
     e3a:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
     e3e:	a8 1a       	sub	r10, r24
     e40:	b9 0a       	sbc	r11, r25
       lcd_space();
       lcd_data('T');
       lcd_data('P');
       lcd_string(utoa(adc.tp2,outval,10));
#endif
      if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     e42:	80 91 07 01 	lds	r24, 0x0107
     e46:	82 50       	subi	r24, 0x02	; 2
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	18 f4       	brcc	.+6      	; 0xe52 <CheckPins+0x69e>
         PartReady = 1;	//check, if test is already done once
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	80 93 04 01 	sts	0x0104, r24
      }
      trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.tp2 - ReadADC(LowPin);
     e52:	80 90 04 01 	lds	r8, 0x0104
     e56:	99 24       	eor	r9, r9
     e58:	e0 90 3d 01 	lds	r14, 0x013D
     e5c:	f0 90 3e 01 	lds	r15, 0x013E
     e60:	ea 18       	sub	r14, r10
     e62:	fb 08       	sbc	r15, r11
     e64:	83 2d       	mov	r24, r3
     e66:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
     e6a:	f4 01       	movw	r30, r8
     e6c:	ee 0f       	add	r30, r30
     e6e:	ff 1f       	adc	r31, r31
     e70:	e2 5b       	subi	r30, 0xB2	; 178
     e72:	fe 4f       	sbci	r31, 0xFE	; 254
     e74:	e8 1a       	sub	r14, r24
     e76:	f9 0a       	sbc	r15, r25
     e78:	f1 82       	std	Z+1, r15	; 0x01
     e7a:	e0 82       	st	Z, r14

      //compute current amplification factor for common Emitter
      //hFE = B = Collector current / Base current
      if(adc.tp2 < 53) {
     e7c:	f5 e3       	ldi	r31, 0x35	; 53
     e7e:	af 16       	cp	r10, r31
     e80:	b1 04       	cpc	r11, r1
     e82:	18 f4       	brcc	.+6      	; 0xe8a <CheckPins+0x6d6>
#if DebugOut == 5
         lcd_data('<');
         lcd_data('5');
         lcd_data('3');
#endif
         adc.tp2 = 53;
     e84:	75 e3       	ldi	r23, 0x35	; 53
     e86:	a7 2e       	mov	r10, r23
     e88:	b1 2c       	mov	r11, r1
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     e8a:	e0 90 04 01 	lds	r14, 0x0104
     e8e:	ff 24       	eor	r15, r15
     e90:	c3 01       	movw	r24, r6
     e92:	a0 e0       	ldi	r26, 0x00	; 0
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	8b 87       	std	Y+11, r24	; 0x0b
     e98:	9c 87       	std	Y+12, r25	; 0x0c
     e9a:	ad 87       	std	Y+13, r26	; 0x0d
     e9c:	be 87       	std	Y+14, r27	; 0x0e
     e9e:	20 91 08 01 	lds	r18, 0x0108
     ea2:	30 91 09 01 	lds	r19, 0x0109
     ea6:	40 e0       	ldi	r20, 0x00	; 0
     ea8:	50 e0       	ldi	r21, 0x00	; 0
     eaa:	60 e6       	ldi	r22, 0x60	; 96
     eac:	77 eb       	ldi	r23, 0xB7	; 183
     eae:	87 e4       	ldi	r24, 0x47	; 71
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     eb6:	6b 85       	ldd	r22, Y+11	; 0x0b
     eb8:	7c 85       	ldd	r23, Y+12	; 0x0c
     eba:	8d 85       	ldd	r24, Y+13	; 0x0d
     ebc:	9e 85       	ldd	r25, Y+14	; 0x0e
     ebe:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp2;	
     ec2:	95 01       	movw	r18, r10
     ec4:	40 e0       	ldi	r20, 0x00	; 0
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
#endif
         adc.tp2 = 53;
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     ecc:	f7 01       	movw	r30, r14
     ece:	ee 0f       	add	r30, r30
     ed0:	ff 1f       	adc	r31, r31
     ed2:	ee 0f       	add	r30, r30
     ed4:	ff 1f       	adc	r31, r31
     ed6:	ea 5b       	subi	r30, 0xBA	; 186
     ed8:	fe 4f       	sbci	r31, 0xFE	; 254
     eda:	20 83       	st	Z, r18
     edc:	31 83       	std	Z+1, r19	; 0x01
     ede:	42 83       	std	Z+2, r20	; 0x02
     ee0:	53 83       	std	Z+3, r21	; 0x03
      trans.hfe[PartReady] = ((adc.hp2 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
#endif
#ifdef COMMON_COLLECTOR
       //compare current amplification factor for common Collector (Emitter follower)
       // hFE = (Emitterstrom - Basisstrom) / Basisstrom
       if (c_hfe >  trans.hfe[PartReady]) {
     ee2:	8c 81       	ldd	r24, Y+4	; 0x04
     ee4:	9d 81       	ldd	r25, Y+5	; 0x05
     ee6:	ae 81       	ldd	r26, Y+6	; 0x06
     ee8:	bf 81       	ldd	r27, Y+7	; 0x07
     eea:	28 17       	cp	r18, r24
     eec:	39 07       	cpc	r19, r25
     eee:	4a 07       	cpc	r20, r26
     ef0:	5b 07       	cpc	r21, r27
     ef2:	a8 f4       	brcc	.+42     	; 0xf1e <CheckPins+0x76a>
          trans.hfe[PartReady] = c_hfe;
     ef4:	80 83       	st	Z, r24
     ef6:	91 83       	std	Z+1, r25	; 0x01
     ef8:	a2 83       	std	Z+2, r26	; 0x02
     efa:	b3 83       	std	Z+3, r27	; 0x03
          trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.lp1 - adc.tp1;
     efc:	f7 01       	movw	r30, r14
     efe:	ee 0f       	add	r30, r30
     f00:	ff 1f       	adc	r31, r31
     f02:	e2 5b       	subi	r30, 0xB2	; 178
     f04:	fe 4f       	sbci	r31, 0xFE	; 254
     f06:	80 91 3d 01 	lds	r24, 0x013D
     f0a:	90 91 3e 01 	lds	r25, 0x013E
     f0e:	84 19       	sub	r24, r4
     f10:	95 09       	sbc	r25, r5
     f12:	a9 89       	ldd	r26, Y+17	; 0x11
     f14:	ba 89       	ldd	r27, Y+18	; 0x12
     f16:	8a 1b       	sub	r24, r26
     f18:	9b 0b       	sbc	r25, r27
     f1a:	91 83       	std	Z+1, r25	; 0x01
     f1c:	80 83       	st	Z, r24
       }
#endif

      if(adc.tp2 > 2557) {		// Basis-voltage R_H is low enough
     f1e:	be ef       	ldi	r27, 0xFE	; 254
     f20:	ab 16       	cp	r10, r27
     f22:	b9 e0       	ldi	r27, 0x09	; 9
     f24:	bb 06       	cpc	r11, r27
     f26:	38 f0       	brcs	.+14     	; 0xf36 <CheckPins+0x782>
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
     f28:	82 e0       	ldi	r24, 0x02	; 2
     f2a:	80 93 07 01 	sts	0x0107, r24
         PartMode = PART_MODE_NPN;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	80 93 06 01 	sts	0x0106, r24
     f34:	51 c0       	rjmp	.+162    	; 0xfd8 <CheckPins+0x824>
      } else { // Basis has low current
         if((adc.lp_otr < 97) && (adc.hp2 > 3400)) {
     f36:	e9 85       	ldd	r30, Y+9	; 0x09
     f38:	fa 85       	ldd	r31, Y+10	; 0x0a
     f3a:	e1 36       	cpi	r30, 0x61	; 97
     f3c:	f1 05       	cpc	r31, r1
     f3e:	08 f0       	brcs	.+2      	; 0xf42 <CheckPins+0x78e>
     f40:	4b c0       	rjmp	.+150    	; 0xfd8 <CheckPins+0x824>
     f42:	f9 e4       	ldi	r31, 0x49	; 73
     f44:	6f 16       	cp	r6, r31
     f46:	fd e0       	ldi	r31, 0x0D	; 13
     f48:	7f 06       	cpc	r7, r31
     f4a:	08 f4       	brcc	.+2      	; 0xf4e <CheckPins+0x79a>
     f4c:	45 c0       	rjmp	.+138    	; 0xfd8 <CheckPins+0x824>
            //if flow voltage in switched off mode low enough?
            //(since D-Mode-FET will be detected in error as E-Mode )
            PartFound = PART_FET;	//N-Kanal-MOSFET is found (Basis/Gate will Not be pulled down)
     f4e:	83 e0       	ldi	r24, 0x03	; 3
     f50:	80 93 07 01 	sts	0x0107, r24
            PartMode = PART_MODE_N_E_MOS;
     f54:	82 e0       	ldi	r24, 0x02	; 2
     f56:	80 93 06 01 	sts	0x0106, r24
            }
#else
            //Switching of Drain is monitored with digital input
            // Low level is specified up to 0.3 * VCC
            // High level is specified above 0.6 * VCC
            PinMSK = HiADCm & 7;
     f5a:	e9 80       	ldd	r14, Y+1	; 0x01
     f5c:	27 e0       	ldi	r18, 0x07	; 7
     f5e:	e2 22       	and	r14, r18
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
     f60:	82 2d       	mov	r24, r2
     f62:	80 64       	ori	r24, 0x40	; 64
     f64:	80 93 7c 00 	sts	0x007C, r24
            gthvoltage = 1;			// round up ((1*4)/9)
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	90 93 57 01 	sts	0x0157, r25
     f70:	80 93 56 01 	sts	0x0156, r24
     f74:	4b e0       	ldi	r20, 0x0B	; 11
     f76:	a4 2e       	mov	r10, r20
            for(ii=0;ii<11;ii++) {
            	wdt_reset();
     f78:	a8 95       	wdr
            	ChargePin10ms(TriPinRL,0);	// discharge Gate 10ms with RL 
     f7a:	8d 2d       	mov	r24, r13
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	0e 94 a7 01 	call	0x34e	; 0x34e <ChargePin10ms>
                R_DDR = HiPinRL | TriPinRH;	// slowly charge Gate 
     f82:	04 b9       	out	0x04, r16	; 4
                R_PORT = HiPinRL | TriPinRH;
     f84:	05 b9       	out	0x05, r16	; 5
            	while ((ADC_PIN&PinMSK));	// Wait, until the MOSFET switch and Drain moved to low 
     f86:	86 b1       	in	r24, 0x06	; 6
     f88:	8e 21       	and	r24, r14
     f8a:	e9 f7       	brne	.-6      	; 0xf86 <CheckPins+0x7d2>
                		// 0 is detected with input voltage of 2.12V to 2.24V (tested with mega168 & mega328)
                R_DDR = HiPinRL;		// switch off current
     f8c:	c4 b8       	out	0x04, r12	; 4
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
     f8e:	80 91 7a 00 	lds	r24, 0x007A
     f92:	80 64       	ori	r24, 0x40	; 64
     f94:	80 93 7a 00 	sts	0x007A, r24
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
     f98:	80 91 7a 00 	lds	r24, 0x007A
     f9c:	86 fd       	sbrc	r24, 6
     f9e:	fc cf       	rjmp	.-8      	; 0xf98 <CheckPins+0x7e4>
            	gthvoltage += ADCW;		// add result of ADC
     fa0:	80 91 78 00 	lds	r24, 0x0078
     fa4:	90 91 79 00 	lds	r25, 0x0079
     fa8:	20 91 56 01 	lds	r18, 0x0156
     fac:	30 91 57 01 	lds	r19, 0x0157
     fb0:	82 0f       	add	r24, r18
     fb2:	93 1f       	adc	r25, r19
     fb4:	90 93 57 01 	sts	0x0157, r25
     fb8:	80 93 56 01 	sts	0x0156, r24
     fbc:	aa 94       	dec	r10
            // High level is specified above 0.6 * VCC
            PinMSK = HiADCm & 7;
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
            gthvoltage = 1;			// round up ((1*4)/9)
            for(ii=0;ii<11;ii++) {
     fbe:	e1 f6       	brne	.-72     	; 0xf78 <CheckPins+0x7c4>
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
            	gthvoltage += ADCW;		// add result of ADC
            }
#endif
            gthvoltage *= 4;	//is equal to 44 * ADCW
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
            gthvoltage /= 9;	//scale to mV
     fc8:	69 e0       	ldi	r22, 0x09	; 9
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <__udivmodhi4>
     fd0:	70 93 57 01 	sts	0x0157, r23
     fd4:	60 93 56 01 	sts	0x0156, r22
         }
      }
savenresult:
      trans.b = TristatePin;	// save Pin-constellation
     fd8:	20 92 52 01 	sts	0x0152, r2
      trans.c = HighPin;
     fdc:	10 93 53 01 	sts	0x0153, r17
      trans.e = LowPin;
     fe0:	30 92 54 01 	sts	0x0154, r3
   } // end component conduct => npn
   ADC_DDR = TXD_MSK;		// switch all ADC-Ports to input
     fe4:	88 e0       	ldi	r24, 0x08	; 8
     fe6:	87 b9       	out	0x07, r24	; 7
   ADC_PORT = TXD_VAL;		// switch all ADC-Ports to 0 (no Pull up)
     fe8:	88 b9       	out	0x08, r24	; 8
   //Fertig
   //end das component has no connection between HighPin and LowPin
   goto widmes;
     fea:	69 c0       	rjmp	.+210    	; 0x10be <CheckPins+0x90a>
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
     fec:	88 e0       	ldi	r24, 0x08	; 8
     fee:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;	//Low-Pin fix to GND
     ff0:	3b 81       	ldd	r19, Y+3	; 0x03
     ff2:	37 b9       	out	0x07, r19	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     ff4:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
     ff6:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
     ff8:	8d 2d       	mov	r24, r13
     ffa:	61 e0       	ldi	r22, 0x01	; 1
     ffc:	0e 94 a7 01 	call	0x34e	; 0x34e <ChargePin10ms>
  adc.lp_otr = W5msReadADC(HighPin) - ReadADC(LowPin);
    1000:	81 2f       	mov	r24, r17
    1002:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
    1006:	4c 01       	movw	r8, r24
    1008:	83 2d       	mov	r24, r3
    100a:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
    100e:	88 1a       	sub	r8, r24
    1010:	99 0a       	sbc	r9, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
    1012:	88 85       	ldd	r24, Y+8	; 0x08
    1014:	84 b9       	out	0x04, r24	; 4
  R_PORT = HiPinRH;
    1016:	85 b9       	out	0x05, r24	; 5
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
    1018:	81 2f       	mov	r24, r17
    101a:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
    101e:	5c 01       	movw	r10, r24

  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    1020:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
    1022:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
    1024:	8d 2d       	mov	r24, r13
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	0e 94 a7 01 	call	0x34e	; 0x34e <ChargePin10ms>
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
    102c:	81 2f       	mov	r24, r17
    102e:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
    1032:	7c 01       	movw	r14, r24
    1034:	83 2d       	mov	r24, r3
    1036:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
    103a:	e8 1a       	sub	r14, r24
    103c:	f9 0a       	sbc	r15, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
    103e:	98 85       	ldd	r25, Y+8	; 0x08
    1040:	94 b9       	out	0x04, r25	; 4
  R_PORT = HiPinRH;
    1042:	95 b9       	out	0x05, r25	; 5
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
    1044:	81 2f       	mov	r24, r17
    1046:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
    104a:	e8 14       	cp	r14, r8
    104c:	f9 04       	cpc	r15, r9
    104e:	18 f0       	brcs	.+6      	; 0x1056 <CheckPins+0x8a2>
  R_PORT = HiPinRL;
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
  R_PORT = HiPinRH;
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
    1050:	a8 2e       	mov	r10, r24
    1052:	b9 2e       	mov	r11, r25
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
    1054:	47 01       	movw	r8, r14
  lcd_string(utoa(adc.hp3,outval,10));
  lcd_space();
  wait_about1s();
#endif

  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
    1056:	c4 01       	movw	r24, r8
    1058:	87 59       	subi	r24, 0x97	; 151
    105a:	90 40       	sbci	r25, 0x00	; 0
    105c:	a1 e1       	ldi	r26, 0x11	; 17
    105e:	89 38       	cpi	r24, 0x89	; 137
    1060:	9a 07       	cpc	r25, r26
    1062:	68 f5       	brcc	.+90     	; 0x10be <CheckPins+0x90a>
    1064:	c5 01       	movw	r24, r10
    1066:	23 e0       	ldi	r18, 0x03	; 3
    1068:	96 95       	lsr	r25
    106a:	87 95       	ror	r24
    106c:	2a 95       	dec	r18
    106e:	e1 f7       	brne	.-8      	; 0x1068 <CheckPins+0x8b4>
    1070:	8a 0d       	add	r24, r10
    1072:	9b 1d       	adc	r25, r11
    1074:	88 15       	cp	r24, r8
    1076:	99 05       	cpc	r25, r9
    1078:	10 f5       	brcc	.+68     	; 0x10be <CheckPins+0x90a>
    107a:	03 e0       	ldi	r16, 0x03	; 3
    107c:	aa 0c       	add	r10, r10
    107e:	bb 1c       	adc	r11, r11
    1080:	0a 95       	dec	r16
    1082:	e1 f7       	brne	.-8      	; 0x107c <CheckPins+0x8c8>
    1084:	8a 14       	cp	r8, r10
    1086:	9b 04       	cpc	r9, r11
    1088:	d0 f4       	brcc	.+52     	; 0x10be <CheckPins+0x90a>
     //voltage is above 0,15V and below 4,64V => Ok
     if((PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
    108a:	80 91 07 01 	lds	r24, 0x0107
    108e:	88 23       	and	r24, r24
    1090:	11 f0       	breq	.+4      	; 0x1096 <CheckPins+0x8e2>
    1092:	86 30       	cpi	r24, 0x06	; 6
    1094:	19 f4       	brne	.+6      	; 0x109c <CheckPins+0x8e8>
        PartFound = PART_DIODE;	//mark for diode only, if no other component is found
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	80 93 07 01 	sts	0x0107, r24
				//since there is a problem with Transistors with a protection diode
#if DebugOut == 4
        lcd_data('D');
#endif
     }
     diodes[NumOfDiodes].Anode = HighPin;
    109c:	80 91 05 01 	lds	r24, 0x0105
    10a0:	e8 2f       	mov	r30, r24
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	ee 0f       	add	r30, r30
    10a6:	ff 1f       	adc	r31, r31
    10a8:	ee 0f       	add	r30, r30
    10aa:	ff 1f       	adc	r31, r31
    10ac:	e4 59       	subi	r30, 0x94	; 148
    10ae:	fe 4f       	sbci	r31, 0xFE	; 254
    10b0:	10 83       	st	Z, r17
     diodes[NumOfDiodes].Cathode = LowPin;
    10b2:	31 82       	std	Z+1, r3	; 0x01
     diodes[NumOfDiodes].Voltage = adc.hp1;	// voltage in Millivolt 
    10b4:	93 82       	std	Z+3, r9	; 0x03
    10b6:	82 82       	std	Z+2, r8	; 0x02
     NumOfDiodes++;
    10b8:	8f 5f       	subi	r24, 0xFF	; 255
    10ba:	80 93 05 01 	sts	0x0105, r24
#if DebugOut == 4
  lcd_data(NumOfDiodes+'0');
#endif

widmes:
  if (NumOfDiodes > 0) goto clean_ports;
    10be:	80 91 05 01 	lds	r24, 0x0105
    10c2:	88 23       	and	r24, r24
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <CheckPins+0x914>
    10c6:	12 c2       	rjmp	.+1060   	; 0x14ec <CheckPins+0xd38>
  // resistor measurement
  wdt_reset();
    10c8:	a8 95       	wdr
// U_SCALE can be set to 4 for better resolution of ReadADC result
#if U_SCALE != 1
  ADCconfig.U_AVCC *= U_SCALE;	// scale to higher resolution, mV scale is not required
    10ca:	80 91 3d 01 	lds	r24, 0x013D
    10ce:	90 91 3e 01 	lds	r25, 0x013E
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	90 93 3e 01 	sts	0x013E, r25
    10de:	80 93 3d 01 	sts	0x013D, r24
  ADCconfig.U_Bandgap *= U_SCALE;
    10e2:	80 91 3b 01 	lds	r24, 0x013B
    10e6:	90 91 3c 01 	lds	r25, 0x013C
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	90 93 3c 01 	sts	0x013C, r25
    10f6:	80 93 3b 01 	sts	0x013B, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = R_ANZ_MESS;	// switch to special number of repetitions
    10fa:	8e eb       	ldi	r24, 0xBE	; 190
    10fc:	80 93 39 01 	sts	0x0139, r24
#endif
  #define MAX_REPEAT (700 / (5 + R_ANZ_MESS/8))
  ADC_PORT = TXD_VAL;
    1100:	88 e0       	ldi	r24, 0x08	; 8
    1102:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
    1104:	bb 81       	ldd	r27, Y+3	; 0x03
    1106:	b7 b9       	out	0x07, r27	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    1108:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;	
    110a:	c5 b8       	out	0x05, r12	; 5
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
    110c:	ee 24       	eor	r14, r14
    110e:	ff 24       	eor	r15, r15
  for (ii=1;ii<MAX_REPEAT;ii++) {
    1110:	21 e0       	ldi	r18, 0x01	; 1
    1112:	01 c0       	rjmp	.+2      	; 0x1116 <CheckPins+0x962>
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    1114:	7c 01       	movw	r14, r24
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
    1116:	83 2d       	mov	r24, r3
    1118:	2b 8b       	std	Y+19, r18	; 0x13
    111a:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
    111e:	08 2f       	mov	r16, r24
    1120:	49 2e       	mov	r4, r25
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    1122:	81 2f       	mov	r24, r17
    1124:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
     udiff = adc.hp1 - adc.hp2;
    1128:	ac 01       	movw	r20, r24
    112a:	4e 19       	sub	r20, r14
    112c:	5f 09       	sbc	r21, r15
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    112e:	2b 89       	ldd	r18, Y+19	; 0x13
    1130:	57 ff       	sbrs	r21, 7
    1132:	03 c0       	rjmp	.+6      	; 0x113a <CheckPins+0x986>
    1134:	50 95       	com	r21
    1136:	41 95       	neg	r20
    1138:	5f 4f       	sbci	r21, 0xFF	; 255
    113a:	43 30       	cpi	r20, 0x03	; 3
    113c:	51 05       	cpc	r21, r1
    113e:	84 f4       	brge	.+32     	; 0x1160 <CheckPins+0x9ac>
    1140:	ac 01       	movw	r20, r24
  adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
#endif
  if (adc.tp1 > adc.hp1) {
     adc.tp1 = adc.hp1;
  }
  R_PORT = 0;
    1142:	15 b8       	out	0x05, r1	; 5
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (GND)
    1144:	e8 85       	ldd	r30, Y+8	; 0x08
    1146:	e4 b9       	out	0x04, r30	; 4
  adc.hp2 = W5msReadADC(HighPin);	// read voltage, should be down
    1148:	81 2f       	mov	r24, r17
    114a:	4e 8b       	std	Y+22, r20	; 0x16
    114c:	5b 8b       	std	Y+19, r21	; 0x13
    114e:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
  if (adc.hp2 > (20*U_SCALE)) {
    1152:	4e 89       	ldd	r20, Y+22	; 0x16
    1154:	5b 89       	ldd	r21, Y+19	; 0x13
    1156:	81 35       	cpi	r24, 0x51	; 81
    1158:	91 05       	cpc	r25, r1
    115a:	08 f0       	brcs	.+2      	; 0x115e <CheckPins+0x9aa>
    115c:	ac c1       	rjmp	.+856    	; 0x14b6 <CheckPins+0xd02>
    115e:	05 c0       	rjmp	.+10     	; 0x116a <CheckPins+0x9b6>
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     udiff = adc.hp1 - adc.hp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.hp2 = adc.hp1;
     wdt_reset();
    1160:	a8 95       	wdr
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    1162:	2f 5f       	subi	r18, 0xFF	; 255
    1164:	29 31       	cpi	r18, 0x19	; 25
    1166:	b1 f6       	brne	.-84     	; 0x1114 <CheckPins+0x960>
    1168:	a6 c1       	rjmp	.+844    	; 0x14b6 <CheckPins+0xd02>
     lcd_string(utoa(adc.hp2, outval, 10));
     lcd_space();
#endif
     goto testend;
  }
  R_PORT = HiPinRH;		//switch R_H for High-Pin to VCC
    116a:	f8 85       	ldd	r31, Y+8	; 0x08
    116c:	f5 b9       	out	0x05, r31	; 5
  adc.hp2 = W5msReadADC(HighPin);	// voltage at resistor Rx with R_H
    116e:	81 2f       	mov	r24, r17
    1170:	4e 8b       	std	Y+22, r20	; 0x16
    1172:	5b 8b       	std	Y+19, r21	; 0x13
    1174:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
    1178:	7c 01       	movw	r14, r24

  ADC_DDR = HiADCm;		//switch High-Pin to output
    117a:	29 81       	ldd	r18, Y+1	; 0x01
    117c:	27 b9       	out	0x07, r18	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
    117e:	28 b9       	out	0x08, r18	; 8
  R_PORT = 0;
    1180:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
    1182:	3a 81       	ldd	r19, Y+2	; 0x02
    1184:	34 b9       	out	0x04, r19	; 4
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
    1186:	aa 24       	eor	r10, r10
    1188:	bb 24       	eor	r11, r11
  for (ii=1;ii<MAX_REPEAT;ii++) {
    118a:	21 e0       	ldi	r18, 0x01	; 1
    118c:	4e 89       	ldd	r20, Y+22	; 0x16
    118e:	5b 89       	ldd	r21, Y+19	; 0x13
    1190:	3a 01       	movw	r6, r20
    1192:	01 c0       	rjmp	.+2      	; 0x1196 <CheckPins+0x9e2>
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    1194:	56 01       	movw	r10, r12
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
    1196:	81 2f       	mov	r24, r17
    1198:	2b 8b       	std	Y+19, r18	; 0x13
    119a:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
    119e:	4c 01       	movw	r8, r24
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    11a0:	83 2d       	mov	r24, r3
    11a2:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
    11a6:	6c 01       	movw	r12, r24
     udiff = adc.lp1 - adc.lp2;
    11a8:	8a 19       	sub	r24, r10
    11aa:	9b 09       	sbc	r25, r11
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    11ac:	2b 89       	ldd	r18, Y+19	; 0x13
    11ae:	97 ff       	sbrs	r25, 7
    11b0:	03 c0       	rjmp	.+6      	; 0x11b8 <CheckPins+0xa04>
    11b2:	90 95       	com	r25
    11b4:	81 95       	neg	r24
    11b6:	9f 4f       	sbci	r25, 0xFF	; 255
    11b8:	83 30       	cpi	r24, 0x03	; 3
    11ba:	91 05       	cpc	r25, r1
    11bc:	8c f4       	brge	.+34     	; 0x11e0 <CheckPins+0xa2c>
    11be:	a3 01       	movw	r20, r6
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = MEM_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	88 0f       	add	r24, r24
  adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
#endif
  if (adc.tp2 < adc.lp1) {
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
    11c4:	84 b9       	out	0x04, r24	; 4
  adc.lp2 = W5msReadADC(LowPin);
    11c6:	83 2d       	mov	r24, r3
    11c8:	6e 8a       	std	Y+22, r6	; 0x16
    11ca:	5b 8b       	std	Y+19, r21	; 0x13
    11cc:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
    11d0:	3c 01       	movw	r6, r24
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    11d2:	4e 89       	ldd	r20, Y+22	; 0x16
    11d4:	5b 89       	ldd	r21, Y+19	; 0x13
    11d6:	84 e4       	ldi	r24, 0x44	; 68
    11d8:	40 3c       	cpi	r20, 0xC0	; 192
    11da:	58 07       	cpc	r21, r24
    11dc:	30 f0       	brcs	.+12     	; 0x11ea <CheckPins+0xa36>
    11de:	0c c0       	rjmp	.+24     	; 0x11f8 <CheckPins+0xa44>
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     udiff = adc.lp1 - adc.lp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.lp2 = adc.lp1;
     wdt_reset();
    11e0:	a8 95       	wdr
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
  R_PORT = 0;
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    11e2:	2f 5f       	subi	r18, 0xFF	; 255
    11e4:	29 31       	cpi	r18, 0x19	; 25
    11e6:	b1 f6       	brne	.-84     	; 0x1194 <CheckPins+0x9e0>
    11e8:	66 c1       	rjmp	.+716    	; 0x14b6 <CheckPins+0xd02>
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
  adc.lp2 = W5msReadADC(LowPin);
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    11ea:	95 e8       	ldi	r25, 0x85	; 133
    11ec:	e9 16       	cp	r14, r25
    11ee:	91 e0       	ldi	r25, 0x01	; 1
    11f0:	f9 06       	cpc	r15, r25
    11f2:	08 f0       	brcs	.+2      	; 0x11f6 <CheckPins+0xa42>
    11f4:	60 c1       	rjmp	.+704    	; 0x14b6 <CheckPins+0xd02>
    11f6:	06 c0       	rjmp	.+12     	; 0x1204 <CheckPins+0xa50>
     lcd_data('F');
#endif
     goto testend; 
  }
//    if((adc.hp2 + (adc.hp2 / 61)) < adc.hp1)
  if (adc.hp2 < (4972*U_SCALE)) { 
    11f8:	a0 eb       	ldi	r26, 0xB0	; 176
    11fa:	ea 16       	cp	r14, r26
    11fc:	ad e4       	ldi	r26, 0x4D	; 77
    11fe:	fa 06       	cpc	r15, r26
    1200:	08 f0       	brcs	.+2      	; 0x1204 <CheckPins+0xa50>
    1202:	59 c1       	rjmp	.+690    	; 0x14b6 <CheckPins+0xd02>
     // voltage breaks down with low test current and it is not nearly shorted  => resistor
//     if (adc.lp1 < 120) { // take measurement with R_H 
     if (adc.lp1 < (169*U_SCALE)) { // take measurement with R_H 
    1204:	b4 ea       	ldi	r27, 0xA4	; 164
    1206:	cb 16       	cp	r12, r27
    1208:	b2 e0       	ldi	r27, 0x02	; 2
    120a:	db 06       	cpc	r13, r27
    120c:	08 f0       	brcs	.+2      	; 0x1210 <CheckPins+0xa5c>
    120e:	72 c0       	rjmp	.+228    	; 0x12f4 <CheckPins+0xb40>
        ii = 'H';
        if (adc.lp2 < (38*U_SCALE)) {
    1210:	e8 e9       	ldi	r30, 0x98	; 152
    1212:	6e 16       	cp	r6, r30
    1214:	71 04       	cpc	r7, r1
    1216:	08 f4       	brcc	.+2      	; 0x121a <CheckPins+0xa66>
    1218:	4e c1       	rjmp	.+668    	; 0x14b6 <CheckPins+0xd02>
           // measurement > 60MOhm to big resistance
           goto testend;
        }
        // two measurements with R_H resistors (470k) are made:
        // lirx1 (measurement at HighPin)
        lirx1 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)adc.hp2 / (ADCconfig.U_AVCC - adc.hp2);
    121a:	80 90 3d 01 	lds	r8, 0x013D
    121e:	90 90 3e 01 	lds	r9, 0x013E
    1222:	b7 01       	movw	r22, r14
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	28 e9       	ldi	r18, 0x98	; 152
    122a:	37 eb       	ldi	r19, 0xB7	; 183
    122c:	40 e0       	ldi	r20, 0x00	; 0
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    1234:	94 01       	movw	r18, r8
    1236:	2e 19       	sub	r18, r14
    1238:	3f 09       	sbc	r19, r15
    123a:	40 e0       	ldi	r20, 0x00	; 0
    123c:	50 e0       	ldi	r21, 0x00	; 0
    123e:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
    1242:	59 01       	movw	r10, r18
    1244:	6a 01       	movw	r12, r20
        // lirx2 (measurement at LowPin)
        lirx2 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)(ADCconfig.U_AVCC - adc.lp2) / adc.lp2;
    1246:	86 18       	sub	r8, r6
    1248:	97 08       	sbc	r9, r7
    124a:	b4 01       	movw	r22, r8
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	28 e9       	ldi	r18, 0x98	; 152
    1252:	37 eb       	ldi	r19, 0xB7	; 183
    1254:	40 e0       	ldi	r20, 0x00	; 0
    1256:	50 e0       	ldi	r21, 0x00	; 0
    1258:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    125c:	93 01       	movw	r18, r6
    125e:	40 e0       	ldi	r20, 0x00	; 0
    1260:	50 e0       	ldi	r21, 0x00	; 0
    1262:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
#define FAKT_LOW 2		//resolution is about twice as good
#else
#define FAKT_LOW 4		//resolution is about four times better
#endif
#ifdef AUTOSCALE_ADC
        if (adc.hp2 < U_INT_LIMIT) {
    1266:	f8 e7       	ldi	r31, 0x78	; 120
    1268:	ef 16       	cp	r14, r31
    126a:	ff e0       	ldi	r31, 0x0F	; 15
    126c:	ff 06       	cpc	r15, r31
    126e:	70 f4       	brcc	.+28     	; 0x128c <CheckPins+0xad8>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    1270:	c6 01       	movw	r24, r12
    1272:	b5 01       	movw	r22, r10
    1274:	e2 e0       	ldi	r30, 0x02	; 2
    1276:	66 0f       	add	r22, r22
    1278:	77 1f       	adc	r23, r23
    127a:	88 1f       	adc	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	ea 95       	dec	r30
    1280:	d1 f7       	brne	.-12     	; 0x1276 <CheckPins+0xac2>
    1282:	62 0f       	add	r22, r18
    1284:	73 1f       	adc	r23, r19
    1286:	84 1f       	adc	r24, r20
    1288:	95 1f       	adc	r25, r21
    128a:	12 c0       	rjmp	.+36     	; 0x12b0 <CheckPins+0xafc>
        } else if (adc.lp2 < U_INT_LIMIT){
    128c:	88 e7       	ldi	r24, 0x78	; 120
    128e:	68 16       	cp	r6, r24
    1290:	8f e0       	ldi	r24, 0x0F	; 15
    1292:	78 06       	cpc	r7, r24
    1294:	a0 f4       	brcc	.+40     	; 0x12be <CheckPins+0xb0a>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    1296:	ca 01       	movw	r24, r20
    1298:	b9 01       	movw	r22, r18
    129a:	22 e0       	ldi	r18, 0x02	; 2
    129c:	66 0f       	add	r22, r22
    129e:	77 1f       	adc	r23, r23
    12a0:	88 1f       	adc	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	2a 95       	dec	r18
    12a6:	d1 f7       	brne	.-12     	; 0x129c <CheckPins+0xae8>
    12a8:	6a 0d       	add	r22, r10
    12aa:	7b 1d       	adc	r23, r11
    12ac:	8c 1d       	adc	r24, r12
    12ae:	9d 1d       	adc	r25, r13
    12b0:	25 e0       	ldi	r18, 0x05	; 5
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	40 e0       	ldi	r20, 0x00	; 0
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
    12bc:	08 c0       	rjmp	.+16     	; 0x12ce <CheckPins+0xb1a>
        } else 
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_H measurements
    12be:	2a 0d       	add	r18, r10
    12c0:	3b 1d       	adc	r19, r11
    12c2:	4c 1d       	adc	r20, r12
    12c4:	5d 1d       	adc	r21, r13
    12c6:	56 95       	lsr	r21
    12c8:	47 95       	ror	r20
    12ca:	37 95       	ror	r19
    12cc:	27 95       	ror	r18
        }
        lrx1 *= 100;
    12ce:	ca 01       	movw	r24, r20
    12d0:	b9 01       	movw	r22, r18
    12d2:	24 e6       	ldi	r18, 0x64	; 100
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	40 e0       	ldi	r20, 0x00	; 0
    12d8:	50 e0       	ldi	r21, 0x00	; 0
    12da:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    12de:	6b 01       	movw	r12, r22
    12e0:	7c 01       	movw	r14, r24
        lrx1 += RH_OFFSET;			// add constant for correction of systematic error
    12e2:	8c ea       	ldi	r24, 0xAC	; 172
    12e4:	9d e0       	ldi	r25, 0x0D	; 13
    12e6:	a0 e0       	ldi	r26, 0x00	; 0
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	c8 0e       	add	r12, r24
    12ec:	d9 1e       	adc	r13, r25
    12ee:	ea 1e       	adc	r14, r26
    12f0:	fb 1e       	adc	r15, r27
    12f2:	78 c0       	rjmp	.+240    	; 0x13e4 <CheckPins+0xc30>
    12f4:	80 2f       	mov	r24, r16
    12f6:	94 2d       	mov	r25, r4
    12f8:	48 17       	cp	r20, r24
    12fa:	59 07       	cpc	r21, r25
    12fc:	08 f4       	brcc	.+2      	; 0x1300 <CheckPins+0xb4c>
    12fe:	ca 01       	movw	r24, r20
    1300:	76 01       	movw	r14, r12
    1302:	c8 14       	cp	r12, r8
    1304:	d9 04       	cpc	r13, r9
    1306:	08 f4       	brcc	.+2      	; 0x130a <CheckPins+0xb56>
    1308:	74 01       	movw	r14, r8
    130a:	3c 01       	movw	r6, r24
    130c:	84 17       	cp	r24, r20
    130e:	95 07       	cpc	r25, r21
    1310:	08 f4       	brcc	.+2      	; 0x1314 <CheckPins+0xb60>
    1312:	3a 01       	movw	r6, r20
        // two measurements with R_L resistors (680) are made:
        // lirx1 (measurement at HighPin)
        if (adc.tp1 > adc.hp1) {
           adc.hp1 = adc.tp1;		//diff negativ is illegal
        }
        lirx1 =(unsigned long)RR680PL * (unsigned long)(adc.hp1 - adc.tp1) / (ADCconfig.U_AVCC - adc.hp1);
    1314:	b3 01       	movw	r22, r6
    1316:	68 1b       	sub	r22, r24
    1318:	79 0b       	sbc	r23, r25
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	20 91 08 01 	lds	r18, 0x0108
    1322:	30 91 09 01 	lds	r19, 0x0109
    1326:	40 e0       	ldi	r20, 0x00	; 0
    1328:	50 e0       	ldi	r21, 0x00	; 0
    132a:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    132e:	20 91 3d 01 	lds	r18, 0x013D
    1332:	30 91 3e 01 	lds	r19, 0x013E
    1336:	26 19       	sub	r18, r6
    1338:	37 09       	sbc	r19, r7
    133a:	40 e0       	ldi	r20, 0x00	; 0
    133c:	50 e0       	ldi	r21, 0x00	; 0
    133e:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
    1342:	49 01       	movw	r8, r18
    1344:	5a 01       	movw	r10, r20
    1346:	27 01       	movw	r4, r14
    1348:	ce 14       	cp	r12, r14
    134a:	df 04       	cpc	r13, r15
    134c:	08 f4       	brcc	.+2      	; 0x1350 <CheckPins+0xb9c>
    134e:	26 01       	movw	r4, r12
        if (adc.tp2 < adc.lp1) {
           adc.lp1 = adc.tp2;		//diff negativ is illegal
        }
        // lirx2 (Measurement at LowPin)
        lirx2 =(unsigned long)RR680MI * (unsigned long)(adc.tp2 -adc.lp1) / adc.lp1;
    1350:	e4 18       	sub	r14, r4
    1352:	f5 08       	sbc	r15, r5
    1354:	b7 01       	movw	r22, r14
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	20 91 02 01 	lds	r18, 0x0102
    135e:	30 91 03 01 	lds	r19, 0x0103
    1362:	40 e0       	ldi	r20, 0x00	; 0
    1364:	50 e0       	ldi	r21, 0x00	; 0
    1366:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    136a:	92 01       	movw	r18, r4
    136c:	40 e0       	ldi	r20, 0x00	; 0
    136e:	50 e0       	ldi	r21, 0x00	; 0
    1370:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
//     lrx1 =(unsigned long)R_L_VAL * (unsigned long)adc.hp1 / (adc.hp3 - adc.hp1);

#ifdef AUTOSCALE_ADC
        if (adc.hp1 < U_INT_LIMIT) {
    1374:	98 e7       	ldi	r25, 0x78	; 120
    1376:	69 16       	cp	r6, r25
    1378:	9f e0       	ldi	r25, 0x0F	; 15
    137a:	79 06       	cpc	r7, r25
    137c:	70 f4       	brcc	.+28     	; 0x139a <CheckPins+0xbe6>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    137e:	c5 01       	movw	r24, r10
    1380:	b4 01       	movw	r22, r8
    1382:	02 e0       	ldi	r16, 0x02	; 2
    1384:	66 0f       	add	r22, r22
    1386:	77 1f       	adc	r23, r23
    1388:	88 1f       	adc	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	0a 95       	dec	r16
    138e:	d1 f7       	brne	.-12     	; 0x1384 <CheckPins+0xbd0>
    1390:	62 0f       	add	r22, r18
    1392:	73 1f       	adc	r23, r19
    1394:	84 1f       	adc	r24, r20
    1396:	95 1f       	adc	r25, r21
    1398:	12 c0       	rjmp	.+36     	; 0x13be <CheckPins+0xc0a>
        } else if (adc.lp1 < U_INT_LIMIT) {
    139a:	a8 e7       	ldi	r26, 0x78	; 120
    139c:	4a 16       	cp	r4, r26
    139e:	af e0       	ldi	r26, 0x0F	; 15
    13a0:	5a 06       	cpc	r5, r26
    13a2:	b0 f4       	brcc	.+44     	; 0x13d0 <CheckPins+0xc1c>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    13a4:	ca 01       	movw	r24, r20
    13a6:	b9 01       	movw	r22, r18
    13a8:	b2 e0       	ldi	r27, 0x02	; 2
    13aa:	66 0f       	add	r22, r22
    13ac:	77 1f       	adc	r23, r23
    13ae:	88 1f       	adc	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	ba 95       	dec	r27
    13b4:	d1 f7       	brne	.-12     	; 0x13aa <CheckPins+0xbf6>
    13b6:	68 0d       	add	r22, r8
    13b8:	79 1d       	adc	r23, r9
    13ba:	8a 1d       	adc	r24, r10
    13bc:	9b 1d       	adc	r25, r11
    13be:	25 e0       	ldi	r18, 0x05	; 5
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	40 e0       	ldi	r20, 0x00	; 0
    13c4:	50 e0       	ldi	r21, 0x00	; 0
    13c6:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
    13ca:	69 01       	movw	r12, r18
    13cc:	7a 01       	movw	r14, r20
    13ce:	0a c0       	rjmp	.+20     	; 0x13e4 <CheckPins+0xc30>
        } else
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_L measurements
    13d0:	69 01       	movw	r12, r18
    13d2:	7a 01       	movw	r14, r20
    13d4:	c8 0c       	add	r12, r8
    13d6:	d9 1c       	adc	r13, r9
    13d8:	ea 1c       	adc	r14, r10
    13da:	fb 1c       	adc	r15, r11
    13dc:	f6 94       	lsr	r15
    13de:	e7 94       	ror	r14
    13e0:	d7 94       	ror	r13
    13e2:	c7 94       	ror	r12
  lcd_line4();
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
    13e4:	80 91 07 01 	lds	r24, 0x0107
    13e8:	82 30       	cpi	r24, 0x02	; 2
    13ea:	18 f0       	brcs	.+6      	; 0x13f2 <CheckPins+0xc3e>
    13ec:	86 30       	cpi	r24, 0x06	; 6
    13ee:	09 f0       	breq	.+2      	; 0x13f2 <CheckPins+0xc3e>
    13f0:	62 c0       	rjmp	.+196    	; 0x14b6 <CheckPins+0xd02>
        for (ii=0; ii<ResistorsFound; ii++) {
    13f2:	50 91 55 01 	lds	r21, 0x0155
    13f6:	40 e0       	ldi	r20, 0x00	; 0
           // search measurements with inverse polarity 
           thisR = &resis[ii];
           if (thisR->rt != TristatePin) {
    13f8:	8b e0       	ldi	r24, 0x0B	; 11
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	3e c0       	rjmp	.+124    	; 0x147a <CheckPins+0xcc6>
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
           // search measurements with inverse polarity 
           thisR = &resis[ii];
    13fe:	24 2f       	mov	r18, r20
    1400:	30 e0       	ldi	r19, 0x00	; 0
           if (thisR->rt != TristatePin) {
    1402:	28 9f       	mul	r18, r24
    1404:	f0 01       	movw	r30, r0
    1406:	29 9f       	mul	r18, r25
    1408:	f0 0d       	add	r31, r0
    140a:	38 9f       	mul	r19, r24
    140c:	f0 0d       	add	r31, r0
    140e:	11 24       	eor	r1, r1
    1410:	e8 5e       	subi	r30, 0xE8	; 232
    1412:	fe 4f       	sbci	r31, 0xFE	; 254
    1414:	22 85       	ldd	r18, Z+10	; 0x0a
    1416:	22 15       	cp	r18, r2
    1418:	11 f0       	breq	.+4      	; 0x141e <CheckPins+0xc6a>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    141a:	4f 5f       	subi	r20, 0xFF	; 255
    141c:	2e c0       	rjmp	.+92     	; 0x147a <CheckPins+0xcc6>
           if (thisR->rt != TristatePin) {
              continue;
           }
           // must be measurement with inverse polarity 
           // resolution is 0.1 Ohm, 1 Ohm = 10 !
           lirx1 = (labs((long)lrx1 - (long)thisR->rx) * 10) / (lrx1 + thisR->rx + 100);
    141e:	80 80       	ld	r8, Z
    1420:	91 80       	ldd	r9, Z+1	; 0x01
    1422:	a2 80       	ldd	r10, Z+2	; 0x02
    1424:	b3 80       	ldd	r11, Z+3	; 0x03
    1426:	c7 01       	movw	r24, r14
    1428:	b6 01       	movw	r22, r12
    142a:	68 19       	sub	r22, r8
    142c:	79 09       	sbc	r23, r9
    142e:	8a 09       	sbc	r24, r10
    1430:	9b 09       	sbc	r25, r11
    1432:	97 ff       	sbrs	r25, 7
    1434:	07 c0       	rjmp	.+14     	; 0x1444 <CheckPins+0xc90>
    1436:	90 95       	com	r25
    1438:	80 95       	com	r24
    143a:	70 95       	com	r23
    143c:	61 95       	neg	r22
    143e:	7f 4f       	sbci	r23, 0xFF	; 255
    1440:	8f 4f       	sbci	r24, 0xFF	; 255
    1442:	9f 4f       	sbci	r25, 0xFF	; 255
    1444:	2a e0       	ldi	r18, 0x0A	; 10
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	40 e0       	ldi	r20, 0x00	; 0
    144a:	50 e0       	ldi	r21, 0x00	; 0
    144c:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    1450:	a5 01       	movw	r20, r10
    1452:	94 01       	movw	r18, r8
    1454:	2c 59       	subi	r18, 0x9C	; 156
    1456:	3f 4f       	sbci	r19, 0xFF	; 255
    1458:	4f 4f       	sbci	r20, 0xFF	; 255
    145a:	5f 4f       	sbci	r21, 0xFF	; 255
    145c:	2c 0d       	add	r18, r12
    145e:	3d 1d       	adc	r19, r13
    1460:	4e 1d       	adc	r20, r14
    1462:	5f 1d       	adc	r21, r15
    1464:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
           if (lirx1  > 0) {
    1468:	21 15       	cp	r18, r1
    146a:	31 05       	cpc	r19, r1
    146c:	41 05       	cpc	r20, r1
    146e:	51 05       	cpc	r21, r1
    1470:	11 f5       	brne	.+68     	; 0x14b6 <CheckPins+0xd02>
              DisplayValue(lirx1,-1,LCD_CHAR_OMEGA,3)
              lcd_space();
#endif
              goto testend; // <10% mismatch
           }
           PartFound = PART_RESISTOR;
    1472:	86 e0       	ldi	r24, 0x06	; 6
    1474:	80 93 07 01 	sts	0x0107, r24
           goto testend;
    1478:	1e c0       	rjmp	.+60     	; 0x14b6 <CheckPins+0xd02>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    147a:	45 17       	cp	r20, r21
    147c:	08 f4       	brcc	.+2      	; 0x1480 <CheckPins+0xccc>
    147e:	bf cf       	rjmp	.-130    	; 0x13fe <CheckPins+0xc4a>
           }
           PartFound = PART_RESISTOR;
           goto testend;
        } // end for
        // no same resistor with the same Tristate-Pin found, new one
        thisR = &resis[ResistorsFound];		// pointer to a free resistor structure
    1480:	25 2f       	mov	r18, r21
    1482:	30 e0       	ldi	r19, 0x00	; 0
        thisR->rx = lrx1;		// save resistor value
    1484:	8b e0       	ldi	r24, 0x0B	; 11
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	28 9f       	mul	r18, r24
    148a:	f0 01       	movw	r30, r0
    148c:	29 9f       	mul	r18, r25
    148e:	f0 0d       	add	r31, r0
    1490:	38 9f       	mul	r19, r24
    1492:	f0 0d       	add	r31, r0
    1494:	11 24       	eor	r1, r1
    1496:	e8 5e       	subi	r30, 0xE8	; 232
    1498:	fe 4f       	sbci	r31, 0xFE	; 254
    149a:	c0 82       	st	Z, r12
    149c:	d1 82       	std	Z+1, r13	; 0x01
    149e:	e2 82       	std	Z+2, r14	; 0x02
    14a0:	f3 82       	std	Z+3, r15	; 0x03
#if FLASHEND > 0x1fff
        thisR->lx = 0;			// no inductance
    14a2:	14 82       	std	Z+4, r1	; 0x04
    14a4:	15 82       	std	Z+5, r1	; 0x05
    14a6:	16 82       	std	Z+6, r1	; 0x06
    14a8:	17 82       	std	Z+7, r1	; 0x07
#endif
        thisR->ra = LowPin;		// save Pin numbers
    14aa:	30 86       	std	Z+8, r3	; 0x08
        thisR->rb = HighPin;
    14ac:	11 87       	std	Z+9, r17	; 0x09
        thisR->rt = TristatePin;	// Tristate is saved for easier search of inverse measurement
    14ae:	22 86       	std	Z+10, r2	; 0x0a
        ResistorsFound++;			// 1 more resistor found
    14b0:	5f 5f       	subi	r21, 0xFF	; 255
    14b2:	50 93 55 01 	sts	0x0155, r21
#endif
     }
  }
  testend:
#if U_SCALE != 1
  ADCconfig.U_AVCC /= U_SCALE;		// scale back to mV resolution
    14b6:	80 91 3d 01 	lds	r24, 0x013D
    14ba:	90 91 3e 01 	lds	r25, 0x013E
    14be:	96 95       	lsr	r25
    14c0:	87 95       	ror	r24
    14c2:	96 95       	lsr	r25
    14c4:	87 95       	ror	r24
    14c6:	90 93 3e 01 	sts	0x013E, r25
    14ca:	80 93 3d 01 	sts	0x013D, r24
  ADCconfig.U_Bandgap /= U_SCALE;
    14ce:	80 91 3b 01 	lds	r24, 0x013B
    14d2:	90 91 3c 01 	lds	r25, 0x013C
    14d6:	96 95       	lsr	r25
    14d8:	87 95       	ror	r24
    14da:	96 95       	lsr	r25
    14dc:	87 95       	ror	r24
    14de:	90 93 3c 01 	sts	0x013C, r25
    14e2:	80 93 3b 01 	sts	0x013B, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = ANZ_MESS;		// switch back to standard number of repetition
    14e6:	89 e1       	ldi	r24, 0x19	; 25
    14e8:	80 93 39 01 	sts	0x0139, r24
#if DebugOut < 10
  wait_about2s();
#endif
#endif
 clean_ports:
  ADC_DDR = TXD_MSK;		// all ADC-Pins Input
    14ec:	88 e0       	ldi	r24, 0x08	; 8
    14ee:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// all ADC outputs to Ground, keine Pull up
    14f0:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// all resistor-outputs to Input
    14f2:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// all resistor-outputs to Ground, no Pull up
    14f4:	15 b8       	out	0x05, r1	; 5
} // end CheckPins()
    14f6:	66 96       	adiw	r28, 0x16	; 22
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	f8 94       	cli
    14fc:	de bf       	out	0x3e, r29	; 62
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	cd bf       	out	0x3d, r28	; 61
    1502:	cf 91       	pop	r28
    1504:	df 91       	pop	r29
    1506:	1f 91       	pop	r17
    1508:	0f 91       	pop	r16
    150a:	ff 90       	pop	r15
    150c:	ef 90       	pop	r14
    150e:	df 90       	pop	r13
    1510:	cf 90       	pop	r12
    1512:	bf 90       	pop	r11
    1514:	af 90       	pop	r10
    1516:	9f 90       	pop	r9
    1518:	8f 90       	pop	r8
    151a:	7f 90       	pop	r7
    151c:	6f 90       	pop	r6
    151e:	5f 90       	pop	r5
    1520:	4f 90       	pop	r4
    1522:	3f 90       	pop	r3
    1524:	2f 90       	pop	r2
    1526:	08 95       	ret

00001528 <AutoCheck>:
void AutoCheck(void) {
    1528:	2f 92       	push	r2
    152a:	3f 92       	push	r3
    152c:	4f 92       	push	r4
    152e:	5f 92       	push	r5
    1530:	6f 92       	push	r6
    1532:	7f 92       	push	r7
    1534:	8f 92       	push	r8
    1536:	9f 92       	push	r9
    1538:	af 92       	push	r10
    153a:	bf 92       	push	r11
    153c:	cf 92       	push	r12
    153e:	df 92       	push	r13
    1540:	ef 92       	push	r14
    1542:	ff 92       	push	r15
    1544:	0f 93       	push	r16
    1546:	1f 93       	push	r17
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	2e 97       	sbiw	r28, 0x0e	; 14
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	f8 94       	cli
    1556:	de bf       	out	0x3e, r29	; 62
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	cd bf       	out	0x3d, r28	; 61

#ifdef AUTO_CAL
  uint8_t cap_found;	// counter for found capacitor
  int8_t udiff2;
#endif
  ADC_PORT = TXD_VAL;
    155c:	88 e0       	ldi	r24, 0x08	; 8
    155e:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = TXD_MSK;
    1560:	87 b9       	out	0x07, r24	; 7
  R_PORT = (1<<(TP1*2));		//Pin 1 over RL to +
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	85 b9       	out	0x05, r24	; 5
  R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//Pin 2 over RL to -
    1566:	85 e0       	ldi	r24, 0x05	; 5
    1568:	84 b9       	out	0x04, r24	; 4
  adcmv[0] = W5msReadADC(PC0);		// voltage at Pin 1
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
    1570:	8c 01       	movw	r16, r24
    1572:	9a 83       	std	Y+2, r25	; 0x02
    1574:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = ReadADC(PC1);		// voltage at Pin 2
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
    157c:	7c 01       	movw	r14, r24
    157e:	9c 83       	std	Y+4, r25	; 0x04
    1580:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = ReadADC(PC2);		// voltage at Pin 3
    1582:	82 e0       	ldi	r24, 0x02	; 2
    1584:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
    1588:	9c 01       	movw	r18, r24
    158a:	9e 83       	std	Y+6, r25	; 0x06
    158c:	8d 83       	std	Y+5, r24	; 0x05
  if (abs((int)(adcmv[1] - adcmv[0])) > 20) {
    158e:	e0 1a       	sub	r14, r16
    1590:	f1 0a       	sbc	r15, r17
    1592:	f7 fe       	sbrs	r15, 7
    1594:	04 c0       	rjmp	.+8      	; 0x159e <AutoCheck+0x76>
    1596:	f0 94       	com	r15
    1598:	e1 94       	neg	r14
    159a:	f1 08       	sbc	r15, r1
    159c:	f3 94       	inc	r15
    159e:	85 e1       	ldi	r24, 0x15	; 21
    15a0:	e8 16       	cp	r14, r24
    15a2:	f1 04       	cpc	r15, r1
    15a4:	0c f0       	brlt	.+2      	; 0x15a8 <AutoCheck+0x80>
    15a6:	57 c4       	rjmp	.+2222   	; 0x1e56 <AutoCheck+0x92e>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[2] - adcmv[0])) > 20) {
    15a8:	20 1b       	sub	r18, r16
    15aa:	31 0b       	sbc	r19, r17
    15ac:	37 ff       	sbrs	r19, 7
    15ae:	03 c0       	rjmp	.+6      	; 0x15b6 <AutoCheck+0x8e>
    15b0:	30 95       	com	r19
    15b2:	21 95       	neg	r18
    15b4:	3f 4f       	sbci	r19, 0xFF	; 255
    15b6:	25 31       	cpi	r18, 0x15	; 21
    15b8:	31 05       	cpc	r19, r1
    15ba:	0c f0       	brlt	.+2      	; 0x15be <AutoCheck+0x96>
    15bc:	4c c4       	rjmp	.+2200   	; 0x1e56 <AutoCheck+0x92e>
     return;				//difference to big, no selftest
  }
  if (abs((int)((adcmv[0]*2) - ADCconfig.U_AVCC)) > 60) {
    15be:	00 0f       	add	r16, r16
    15c0:	11 1f       	adc	r17, r17
    15c2:	80 91 3d 01 	lds	r24, 0x013D
    15c6:	90 91 3e 01 	lds	r25, 0x013E
    15ca:	08 1b       	sub	r16, r24
    15cc:	19 0b       	sbc	r17, r25
    15ce:	17 ff       	sbrs	r17, 7
    15d0:	03 c0       	rjmp	.+6      	; 0x15d8 <AutoCheck+0xb0>
    15d2:	10 95       	com	r17
    15d4:	01 95       	neg	r16
    15d6:	1f 4f       	sbci	r17, 0xFF	; 255
    15d8:	0d 33       	cpi	r16, 0x3D	; 61
    15da:	11 05       	cpc	r17, r1
    15dc:	0c f0       	brlt	.+2      	; 0x15e0 <AutoCheck+0xb8>
    15de:	3b c4       	rjmp	.+2166   	; 0x1e56 <AutoCheck+0x92e>
     return;				//difference to big, no selftest
  }
  R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//Pin 3 over RL to - (Pin 1 over RL to +)
    15e0:	81 e1       	ldi	r24, 0x11	; 17
    15e2:	84 b9       	out	0x04, r24	; 4
  adcmv[0] = W5msReadADC(PC0);		// voltage at Pin 1
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
    15ea:	8c 01       	movw	r16, r24
    15ec:	9a 83       	std	Y+2, r25	; 0x02
    15ee:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = ReadADC(PC1);		// voltage at Pin 2
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
    15f6:	7c 01       	movw	r14, r24
    15f8:	9c 83       	std	Y+4, r25	; 0x04
    15fa:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = ReadADC(PC2);		// voltage at Pin 3
    15fc:	82 e0       	ldi	r24, 0x02	; 2
    15fe:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
    1602:	9c 01       	movw	r18, r24
    1604:	9e 83       	std	Y+6, r25	; 0x06
    1606:	8d 83       	std	Y+5, r24	; 0x05
  if (abs((int)(adcmv[1] - adcmv[0])) > 20) {
    1608:	e0 1a       	sub	r14, r16
    160a:	f1 0a       	sbc	r15, r17
    160c:	f7 fe       	sbrs	r15, 7
    160e:	04 c0       	rjmp	.+8      	; 0x1618 <AutoCheck+0xf0>
    1610:	f0 94       	com	r15
    1612:	e1 94       	neg	r14
    1614:	f1 08       	sbc	r15, r1
    1616:	f3 94       	inc	r15
    1618:	e5 e1       	ldi	r30, 0x15	; 21
    161a:	ee 16       	cp	r14, r30
    161c:	f1 04       	cpc	r15, r1
    161e:	0c f0       	brlt	.+2      	; 0x1622 <AutoCheck+0xfa>
    1620:	1a c4       	rjmp	.+2100   	; 0x1e56 <AutoCheck+0x92e>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[2] - adcmv[0])) > 20) {
    1622:	20 1b       	sub	r18, r16
    1624:	31 0b       	sbc	r19, r17
    1626:	37 ff       	sbrs	r19, 7
    1628:	03 c0       	rjmp	.+6      	; 0x1630 <AutoCheck+0x108>
    162a:	30 95       	com	r19
    162c:	21 95       	neg	r18
    162e:	3f 4f       	sbci	r19, 0xFF	; 255
    1630:	25 31       	cpi	r18, 0x15	; 21
    1632:	31 05       	cpc	r19, r1
    1634:	0c f0       	brlt	.+2      	; 0x1638 <AutoCheck+0x110>
    1636:	0f c4       	rjmp	.+2078   	; 0x1e56 <AutoCheck+0x92e>
     return;				//difference to big, no selftest
  }
  if (abs((int)((adcmv[0]*2) - ADCconfig.U_AVCC)) > 60) {
    1638:	00 0f       	add	r16, r16
    163a:	11 1f       	adc	r17, r17
    163c:	80 91 3d 01 	lds	r24, 0x013D
    1640:	90 91 3e 01 	lds	r25, 0x013E
    1644:	08 1b       	sub	r16, r24
    1646:	19 0b       	sbc	r17, r25
    1648:	17 ff       	sbrs	r17, 7
    164a:	03 c0       	rjmp	.+6      	; 0x1652 <AutoCheck+0x12a>
    164c:	10 95       	com	r17
    164e:	01 95       	neg	r16
    1650:	1f 4f       	sbci	r17, 0xFF	; 255
    1652:	0d 33       	cpi	r16, 0x3D	; 61
    1654:	11 05       	cpc	r17, r1
    1656:	0c f0       	brlt	.+2      	; 0x165a <AutoCheck+0x132>
    1658:	fe c3       	rjmp	.+2044   	; 0x1e56 <AutoCheck+0x92e>
     return;				//difference to big, no selftest
  }
#ifdef WITH_SELFTEST
  lcd_clear();
    165a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
    165e:	84 ec       	ldi	r24, 0xC4	; 196
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	0e 94 40 01 	call	0x280	; 0x280 <lcd_pgm_string>
  wait_about1s();
    1666:	88 ec       	ldi	r24, 0xC8	; 200
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	0e 94 b7 03 	call	0x76e	; 0x76e <sleep_5ms>
    166e:	44 24       	eor	r4, r4
    1670:	55 24       	eor	r5, r5
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    1672:	11 e0       	ldi	r17, 0x01	; 1
           adcmv[2] = W20msReadADC(TP3);
           lcd_fix2_string(RH1L);	// "RH_Lo="
        }
                                        //############################################
        if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to VCC
    1674:	72 e0       	ldi	r23, 0x02	; 2
    1676:	a7 2e       	mov	r10, r23
           R_PORT = 2<<(TP1*2);
           adcmv[0] = W20msReadADC(TP1) - ADCconfig.U_AVCC;
           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to VCC
    1678:	68 e0       	ldi	r22, 0x08	; 8
    167a:	c6 2e       	mov	r12, r22
           R_PORT = 2<<(TP2*2);
           adcmv[1] = W20msReadADC(TP2) - ADCconfig.U_AVCC;
           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to VCC
    167c:	50 e2       	ldi	r21, 0x20	; 32
    167e:	b5 2e       	mov	r11, r21
           lcd_string(utoa(RHmultip, outval, 10));
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
    1680:	45 e0       	ldi	r20, 0x05	; 5
    1682:	f4 2e       	mov	r15, r20
           adcmv[0] = W20msReadADC(TP1);
           adcmv[0] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1684:	36 e4       	ldi	r19, 0x46	; 70
    1686:	63 2e       	mov	r6, r19
    1688:	39 ec       	ldi	r19, 0xC9	; 201
    168a:	73 2e       	mov	r7, r19
    168c:	3f ef       	ldi	r19, 0xFF	; 255
    168e:	83 2e       	mov	r8, r19
    1690:	3f ef       	ldi	r19, 0xFF	; 255
    1692:	93 2e       	mov	r9, r19
    1694:	60 c1       	rjmp	.+704    	; 0x1956 <AutoCheck+0x42e>
  wait_about1s();
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
        lcd_line2();			//Cursor to column 1, row 2
    1696:	80 ec       	ldi	r24, 0xC0	; 192
    1698:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_clear_line();		// clear total line
    169c:	0e 94 b3 02 	call	0x566	; 0x566 <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    16a0:	80 e8       	ldi	r24, 0x80	; 128
    16a2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_clear_line();		// clear total line
    16a6:	0e 94 b3 02 	call	0x566	; 0x566 <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    16aa:	80 e8       	ldi	r24, 0x80	; 128
    16ac:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_data('T');			//output the Testmode "T"
    16b0:	84 e5       	ldi	r24, 0x54	; 84
    16b2:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
        lcd_string(utoa(tt, outval, 10));	//output Test number
    16b6:	c2 01       	movw	r24, r4
    16b8:	6c e0       	ldi	r22, 0x0C	; 12
    16ba:	71 e0       	ldi	r23, 0x01	; 1
    16bc:	4a e0       	ldi	r20, 0x0A	; 10
    16be:	50 e0       	ldi	r21, 0x00	; 0
    16c0:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <utoa>
    16c4:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_string>
        lcd_space();
    16c8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
                                        //############################################
        if (tt == 1) {   // output of reference voltage and factors for capacity measurement
    16cc:	fe 2d       	mov	r31, r14
    16ce:	f1 30       	cpi	r31, 0x01	; 1
    16d0:	81 f5       	brne	.+96     	; 0x1732 <AutoCheck+0x20a>
           ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    16d2:	2e eb       	ldi	r18, 0xBE	; 190
    16d4:	20 93 39 01 	sts	0x0139, r18
 #ifdef WITH_AUTO_REF
           (void) ReadADC(0x0e);	// read reference voltage 
    16d8:	8e e0       	ldi	r24, 0x0E	; 14
    16da:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
           ref_mv = W5msReadADC(0x0e);	// read reference voltage 
    16de:	8e e0       	ldi	r24, 0x0E	; 14
    16e0:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
    16e4:	90 93 40 01 	sts	0x0140, r25
    16e8:	80 93 3f 01 	sts	0x013F, r24
           RefVoltage();		//compute RHmultip = f(reference voltage)
    16ec:	0e 94 63 02 	call	0x4c6	; 0x4c6 <RefVoltage>
 #endif
           lcd_fix2_string(URefT);	//"URef="
    16f0:	83 ee       	ldi	r24, 0xE3	; 227
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	0e 94 40 01 	call	0x280	; 0x280 <lcd_pgm_string>
           DisplayValue(ref_mv,-3,'V',4);
    16f8:	60 91 3f 01 	lds	r22, 0x013F
    16fc:	70 91 40 01 	lds	r23, 0x0140
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	4d ef       	ldi	r20, 0xFD	; 253
    1706:	26 e5       	ldi	r18, 0x56	; 86
    1708:	04 e0       	ldi	r16, 0x04	; 4
    170a:	0e 94 bb 02 	call	0x576	; 0x576 <DisplayValue>
           lcd_line2();			//Cursor to column 1, row 2
    170e:	80 ec       	ldi	r24, 0xC0	; 192
    1710:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
           lcd_fix2_string(RHfakt);	//"RHf="
    1714:	88 ee       	ldi	r24, 0xE8	; 232
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	0e 94 40 01 	call	0x280	; 0x280 <lcd_pgm_string>
           lcd_string(utoa(RHmultip, outval, 10));
    171c:	80 91 00 01 	lds	r24, 0x0100
    1720:	90 91 01 01 	lds	r25, 0x0101
    1724:	6c e0       	ldi	r22, 0x0C	; 12
    1726:	71 e0       	ldi	r23, 0x01	; 1
    1728:	4a e0       	ldi	r20, 0x0A	; 10
    172a:	50 e0       	ldi	r21, 0x00	; 0
    172c:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <utoa>
    1730:	f5 c0       	rjmp	.+490    	; 0x191c <AutoCheck+0x3f4>
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
    1732:	8e 2d       	mov	r24, r14
    1734:	82 30       	cpi	r24, 0x02	; 2
    1736:	09 f0       	breq	.+2      	; 0x173a <AutoCheck+0x212>
    1738:	52 c0       	rjmp	.+164    	; 0x17de <AutoCheck+0x2b6>
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	85 b9       	out	0x05, r24	; 5
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
    173e:	f4 b8       	out	0x04, r15	; 4
           adcmv[0] = W20msReadADC(TP1);
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	0e 94 a5 1a 	call	0x354a	; 0x354a <W20msReadADC>
    1746:	8c 01       	movw	r16, r24
           adcmv[0] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1748:	60 91 3d 01 	lds	r22, 0x013D
    174c:	70 91 3e 01 	lds	r23, 0x013E
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	2e e4       	ldi	r18, 0x4E	; 78
    1756:	3b e1       	ldi	r19, 0x1B	; 27
    1758:	40 e0       	ldi	r20, 0x00	; 0
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    1760:	a4 01       	movw	r20, r8
    1762:	93 01       	movw	r18, r6
    1764:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__divmodsi4>
    1768:	02 0f       	add	r16, r18
    176a:	13 1f       	adc	r17, r19
    176c:	1a 83       	std	Y+2, r17	; 0x02
    176e:	09 83       	std	Y+1, r16	; 0x01
           R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//RL3 to -
    1770:	34 b8       	out	0x04, r3	; 4
           adcmv[1] = W20msReadADC(TP1);
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	0e 94 a5 1a 	call	0x354a	; 0x354a <W20msReadADC>
    1778:	8c 01       	movw	r16, r24
           adcmv[1] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    177a:	60 91 3d 01 	lds	r22, 0x013D
    177e:	70 91 3e 01 	lds	r23, 0x013E
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	2e e4       	ldi	r18, 0x4E	; 78
    1788:	3b e1       	ldi	r19, 0x1B	; 27
    178a:	40 e0       	ldi	r20, 0x00	; 0
    178c:	50 e0       	ldi	r21, 0x00	; 0
    178e:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    1792:	a4 01       	movw	r20, r8
    1794:	93 01       	movw	r18, r6
    1796:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__divmodsi4>
    179a:	02 0f       	add	r16, r18
    179c:	13 1f       	adc	r17, r19
    179e:	1c 83       	std	Y+4, r17	; 0x04
    17a0:	0b 83       	std	Y+3, r16	; 0x03
           R_PORT = 1<<(TP2*2);		//RL2 to VCC
    17a2:	25 b8       	out	0x05, r2	; 5
           R_DDR = (1<<(TP2*2)) | (1<<(TP3*2));	//RL3 to -
    17a4:	e4 e1       	ldi	r30, 0x14	; 20
    17a6:	e4 b9       	out	0x04, r30	; 4
           adcmv[2] = W20msReadADC(TP2);
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	0e 94 a5 1a 	call	0x354a	; 0x354a <W20msReadADC>
    17ae:	8c 01       	movw	r16, r24
           adcmv[2] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    17b0:	60 91 3d 01 	lds	r22, 0x013D
    17b4:	70 91 3e 01 	lds	r23, 0x013E
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	2e e4       	ldi	r18, 0x4E	; 78
    17be:	3b e1       	ldi	r19, 0x1B	; 27
    17c0:	40 e0       	ldi	r20, 0x00	; 0
    17c2:	50 e0       	ldi	r21, 0x00	; 0
    17c4:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    17c8:	a4 01       	movw	r20, r8
    17ca:	93 01       	movw	r18, r6
    17cc:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__divmodsi4>
    17d0:	02 0f       	add	r16, r18
    17d2:	13 1f       	adc	r17, r19
    17d4:	1e 83       	std	Y+6, r17	; 0x06
    17d6:	0d 83       	std	Y+5, r16	; 0x05
           lcd_fix2_string(RLRL);	// "RLRL"
    17d8:	85 ef       	ldi	r24, 0xF5	; 245
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	49 c0       	rjmp	.+146    	; 0x1870 <AutoCheck+0x348>
        }
                                        //############################################
        if (tt == 3) { // how equal are the RH resistors
    17de:	fe 2d       	mov	r31, r14
    17e0:	f3 30       	cpi	r31, 0x03	; 3
    17e2:	41 f5       	brne	.+80     	; 0x1834 <AutoCheck+0x30c>
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    17e4:	a5 b8       	out	0x05, r10	; 5
           R_DDR = (2<<(TP1*2)) | (2<<(TP2*2));	//RH2 to -
    17e6:	2a e0       	ldi	r18, 0x0A	; 10
    17e8:	24 b9       	out	0x04, r18	; 4
           adcmv[0] = W20msReadADC(TP1);
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	0e 94 a5 1a 	call	0x354a	; 0x354a <W20msReadADC>
           adcmv[3] = ADCconfig.U_AVCC / 2;
    17f0:	00 91 3d 01 	lds	r16, 0x013D
    17f4:	10 91 3e 01 	lds	r17, 0x013E
    17f8:	16 95       	lsr	r17
    17fa:	07 95       	ror	r16
    17fc:	18 87       	std	Y+8, r17	; 0x08
    17fe:	0f 83       	std	Y+7, r16	; 0x07
           adcmv[0] -= adcmv[3];
    1800:	80 1b       	sub	r24, r16
    1802:	91 0b       	sbc	r25, r17
    1804:	9a 83       	std	Y+2, r25	; 0x02
    1806:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (2<<(TP1*2)) | (2<<(TP3*2));	//RH3 to -
    1808:	82 e2       	ldi	r24, 0x22	; 34
    180a:	84 b9       	out	0x04, r24	; 4
           adcmv[1] = W20msReadADC(TP1);
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	0e 94 a5 1a 	call	0x354a	; 0x354a <W20msReadADC>
           adcmv[1] -= adcmv[3];
    1812:	80 1b       	sub	r24, r16
    1814:	91 0b       	sbc	r25, r17
    1816:	9c 83       	std	Y+4, r25	; 0x04
    1818:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 2<<(TP2*2);		//RL2 to VCC
    181a:	c5 b8       	out	0x05, r12	; 5
           R_DDR = (2<<(TP2*2)) | (2<<(TP3*2));	//RH3 to -
    181c:	e8 e2       	ldi	r30, 0x28	; 40
    181e:	e4 b9       	out	0x04, r30	; 4
           adcmv[2] = W20msReadADC(TP2);
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	0e 94 a5 1a 	call	0x354a	; 0x354a <W20msReadADC>
           adcmv[2] -= adcmv[3];
    1826:	80 1b       	sub	r24, r16
    1828:	91 0b       	sbc	r25, r17
    182a:	9e 83       	std	Y+6, r25	; 0x06
    182c:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RHRH);	// "RHRH"
    182e:	83 e0       	ldi	r24, 0x03	; 3
    1830:	91 e0       	ldi	r25, 0x01	; 1
    1832:	1e c0       	rjmp	.+60     	; 0x1870 <AutoCheck+0x348>
        }
                                        //############################################
        if (tt == 4) { // Text release probes
    1834:	fe 2d       	mov	r31, r14
    1836:	f4 30       	cpi	r31, 0x04	; 4
    1838:	19 f4       	brne	.+6      	; 0x1840 <AutoCheck+0x318>
           lcd_fix2_string(RELPROBE);	// "Release Probes"
    183a:	84 ed       	ldi	r24, 0xD4	; 212
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	18 c0       	rjmp	.+48     	; 0x1870 <AutoCheck+0x348>
        }
                                        //############################################
        if (tt == 5) { // can we switch the ADC pins to GND across R_H resistor?
    1840:	2e 2d       	mov	r18, r14
    1842:	25 30       	cpi	r18, 0x05	; 5
    1844:	c1 f4       	brne	.+48     	; 0x1876 <AutoCheck+0x34e>
           R_PORT = 0;
    1846:	15 b8       	out	0x05, r1	; 5
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to GND
    1848:	a4 b8       	out	0x04, r10	; 4
           adcmv[0] = W20msReadADC(TP1);
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	0e 94 a5 1a 	call	0x354a	; 0x354a <W20msReadADC>
    1850:	9a 83       	std	Y+2, r25	; 0x02
    1852:	89 83       	std	Y+1, r24	; 0x01

           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to GND
    1854:	c4 b8       	out	0x04, r12	; 4
           adcmv[1] = W20msReadADC(TP2);
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	0e 94 a5 1a 	call	0x354a	; 0x354a <W20msReadADC>
    185c:	9c 83       	std	Y+4, r25	; 0x04
    185e:	8b 83       	std	Y+3, r24	; 0x03

           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1860:	b4 b8       	out	0x04, r11	; 4
           adcmv[2] = W20msReadADC(TP3);
    1862:	82 e0       	ldi	r24, 0x02	; 2
    1864:	0e 94 a5 1a 	call	0x354a	; 0x354a <W20msReadADC>
    1868:	9e 83       	std	Y+6, r25	; 0x06
    186a:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RH1L);	// "RH_Lo="
    186c:	8d ee       	ldi	r24, 0xED	; 237
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	0e 94 40 01 	call	0x280	; 0x280 <lcd_pgm_string>
    1874:	30 c0       	rjmp	.+96     	; 0x18d6 <AutoCheck+0x3ae>
        }
                                        //############################################
        if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
    1876:	8e 2d       	mov	r24, r14
    1878:	86 30       	cpi	r24, 0x06	; 6
    187a:	51 f5       	brne	.+84     	; 0x18d0 <AutoCheck+0x3a8>
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to VCC
    187c:	a4 b8       	out	0x04, r10	; 4
           R_PORT = 2<<(TP1*2);
    187e:	a5 b8       	out	0x05, r10	; 5
           adcmv[0] = W20msReadADC(TP1) - ADCconfig.U_AVCC;
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	0e 94 a5 1a 	call	0x354a	; 0x354a <W20msReadADC>
    1886:	20 91 3d 01 	lds	r18, 0x013D
    188a:	30 91 3e 01 	lds	r19, 0x013E
    188e:	82 1b       	sub	r24, r18
    1890:	93 0b       	sbc	r25, r19
    1892:	9a 83       	std	Y+2, r25	; 0x02
    1894:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to VCC
    1896:	c4 b8       	out	0x04, r12	; 4
           R_PORT = 2<<(TP2*2);
    1898:	c5 b8       	out	0x05, r12	; 5
           adcmv[1] = W20msReadADC(TP2) - ADCconfig.U_AVCC;
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	0e 94 a5 1a 	call	0x354a	; 0x354a <W20msReadADC>
    18a0:	20 91 3d 01 	lds	r18, 0x013D
    18a4:	30 91 3e 01 	lds	r19, 0x013E
    18a8:	82 1b       	sub	r24, r18
    18aa:	93 0b       	sbc	r25, r19
    18ac:	9c 83       	std	Y+4, r25	; 0x04
    18ae:	8b 83       	std	Y+3, r24	; 0x03
           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to VCC
    18b0:	b4 b8       	out	0x04, r11	; 4
           R_PORT = 2<<(TP3*2);
    18b2:	b5 b8       	out	0x05, r11	; 5
           adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
    18b4:	82 e0       	ldi	r24, 0x02	; 2
    18b6:	0e 94 a5 1a 	call	0x354a	; 0x354a <W20msReadADC>
    18ba:	20 91 3d 01 	lds	r18, 0x013D
    18be:	30 91 3e 01 	lds	r19, 0x013E
    18c2:	82 1b       	sub	r24, r18
    18c4:	93 0b       	sbc	r25, r19
    18c6:	9e 83       	std	Y+6, r25	; 0x06
    18c8:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RH1H);	// "RH_Hi="
    18ca:	81 ef       	ldi	r24, 0xF1	; 241
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	d0 cf       	rjmp	.-96     	; 0x1870 <AutoCheck+0x348>
        }
                                        //############################################
        if (tt > 1) {	// output 3 voltages 
    18d0:	ee 2d       	mov	r30, r14
    18d2:	e1 30       	cpi	r30, 0x01	; 1
    18d4:	29 f1       	breq	.+74     	; 0x1920 <AutoCheck+0x3f8>
           lcd_line2();			//Cursor to column 1, row 2
    18d6:	80 ec       	ldi	r24, 0xC0	; 192
    18d8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
           lcd_string(itoa(adcmv[0], outval, 10));	//output voltage 1
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	9a 81       	ldd	r25, Y+2	; 0x02
    18e0:	6c e0       	ldi	r22, 0x0C	; 12
    18e2:	71 e0       	ldi	r23, 0x01	; 1
    18e4:	4a e0       	ldi	r20, 0x0A	; 10
    18e6:	50 e0       	ldi	r21, 0x00	; 0
    18e8:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <itoa>
    18ec:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_string>
           lcd_space();
    18f0:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
           lcd_string(itoa(adcmv[1], outval, 10));	//output voltage 2
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	9c 81       	ldd	r25, Y+4	; 0x04
    18f8:	6c e0       	ldi	r22, 0x0C	; 12
    18fa:	71 e0       	ldi	r23, 0x01	; 1
    18fc:	4a e0       	ldi	r20, 0x0A	; 10
    18fe:	50 e0       	ldi	r21, 0x00	; 0
    1900:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <itoa>
    1904:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_string>
           lcd_space();
    1908:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
           lcd_string(itoa(adcmv[2], outval, 10));	//output voltage 3
    190c:	8d 81       	ldd	r24, Y+5	; 0x05
    190e:	9e 81       	ldd	r25, Y+6	; 0x06
    1910:	6c e0       	ldi	r22, 0x0C	; 12
    1912:	71 e0       	ldi	r23, 0x01	; 1
    1914:	4a e0       	ldi	r20, 0x0A	; 10
    1916:	50 e0       	ldi	r21, 0x00	; 0
    1918:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <itoa>
    191c:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_string>
        }
        ADC_DDR =  TXD_MSK;		// all-Pins to Input
    1920:	c7 b8       	out	0x07, r12	; 7
        ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
    1922:	c8 b8       	out	0x08, r12	; 8
        R_DDR = 0;			// all R-Ports to Input
    1924:	14 b8       	out	0x04, r1	; 4
        R_PORT = 0;
    1926:	15 b8       	out	0x05, r1	; 5
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    1928:	4f 9b       	sbis	0x09, 7	; 9
    192a:	0d c0       	rjmp	.+26     	; 0x1946 <AutoCheck+0x41e>
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
    192c:	84 e6       	ldi	r24, 0x64	; 100
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	0e 94 b7 03 	call	0x76e	; 0x76e <sleep_5ms>
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    1934:	4f 9b       	sbis	0x09, 7	; 9
    1936:	07 c0       	rjmp	.+14     	; 0x1946 <AutoCheck+0x41e>
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
    1938:	84 e6       	ldi	r24, 0x64	; 100
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	0e 94 b7 03 	call	0x76e	; 0x76e <sleep_5ms>
    1940:	da 94       	dec	r13
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
  wait_about1s();
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
    1942:	09 f0       	breq	.+2      	; 0x1946 <AutoCheck+0x41e>
    1944:	a8 ce       	rjmp	.-688    	; 0x1696 <AutoCheck+0x16e>
    1946:	1e 2d       	mov	r17, r14
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
     } //end for ww
     wait_about1s();
    1948:	88 ec       	ldi	r24, 0xC8	; 200
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	0e 94 b7 03 	call	0x76e	; 0x76e <sleep_5ms>
  lcd_clear();
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
  wait_about1s();
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    1950:	1f 5f       	subi	r17, 0xFF	; 255
    1952:	17 30       	cpi	r17, 0x07	; 7
    1954:	59 f0       	breq	.+22     	; 0x196c <AutoCheck+0x444>
void AutoCheck(void) {
    1956:	94 e0       	ldi	r25, 0x04	; 4
    1958:	d9 2e       	mov	r13, r25
        lcd_line2();			//Cursor to column 1, row 2
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_data('T');			//output the Testmode "T"
    195a:	08 94       	sec
    195c:	41 1c       	adc	r4, r1
    195e:	51 1c       	adc	r5, r1
        if (tt == 2) { // how equal are the RL resistors? 
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
           adcmv[0] = W20msReadADC(TP1);
           adcmv[0] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
           R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//RL3 to -
    1960:	81 e1       	ldi	r24, 0x11	; 17
    1962:	38 2e       	mov	r3, r24
           adcmv[1] = W20msReadADC(TP1);
           adcmv[1] -= ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
           R_PORT = 1<<(TP2*2);		//RL2 to VCC
    1964:	04 e0       	ldi	r16, 0x04	; 4
    1966:	20 2e       	mov	r2, r16
    1968:	e1 2e       	mov	r14, r17
    196a:	95 ce       	rjmp	.-726    	; 0x1696 <AutoCheck+0x16e>
     wait_about1s();
  } //end for tt
#endif

  // measurement of internal resistance of the ADC port outputs switched to GND
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    196c:	19 e0       	ldi	r17, 0x09	; 9
    196e:	c1 2e       	mov	r12, r17
    1970:	c7 b8       	out	0x07, r12	; 7
  R_PORT = 1<<(TP1*2);		//R_L-PORT 1 to VCC
    1972:	dd 24       	eor	r13, r13
    1974:	d3 94       	inc	r13
    1976:	d5 b8       	out	0x05, r13	; 5
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to VCC
    1978:	d4 b8       	out	0x04, r13	; 4
  adcmv[0] = W5msReadADC(TP1);
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
    1980:	7c 01       	movw	r14, r24

  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin 2 to output 0V
    1982:	ba e0       	ldi	r27, 0x0A	; 10
    1984:	6b 2e       	mov	r6, r27
    1986:	67 b8       	out	0x07, r6	; 7
  R_PORT =  1<<(TP2*2);	//R_L-PORT 2 to VCC
    1988:	a4 e0       	ldi	r26, 0x04	; 4
    198a:	8a 2e       	mov	r8, r26
    198c:	85 b8       	out	0x05, r8	; 5
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to VCC
    198e:	84 b8       	out	0x04, r8	; 4
  adcmv[1] = W5msReadADC(TP2);
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
    1996:	8c 01       	movw	r16, r24

  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin 3 to output 0V
    1998:	fc e0       	ldi	r31, 0x0C	; 12
    199a:	af 2e       	mov	r10, r31
    199c:	a7 b8       	out	0x07, r10	; 7
  R_PORT =  1<<(TP3*2);	//R_L-PORT 3 to VCC
    199e:	e0 e1       	ldi	r30, 0x10	; 16
    19a0:	be 2e       	mov	r11, r30
    19a2:	b5 b8       	out	0x05, r11	; 5
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to VCC
    19a4:	b4 b8       	out	0x04, r11	; 4
  adcmv[2] = W5msReadADC(TP3);
    19a6:	82 e0       	ldi	r24, 0x02	; 2
    19a8:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
  sum_rm = (adcmv[0] + adcmv[1] + adcmv[2]); //add all three values
    19ac:	0e 0d       	add	r16, r14
    19ae:	1f 1d       	adc	r17, r15
    19b0:	08 0f       	add	r16, r24
    19b2:	19 1f       	adc	r17, r25

  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
    19b4:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
    19b6:	c8 b8       	out	0x08, r12	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    19b8:	c7 b8       	out	0x07, r12	; 7
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
    19ba:	d4 b8       	out	0x04, r13	; 4
  adcmv[0] = ADCconfig.U_AVCC - W5msReadADC(TP1);
    19bc:	c0 90 3d 01 	lds	r12, 0x013D
    19c0:	d0 90 3e 01 	lds	r13, 0x013E
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
    19ca:	c8 1a       	sub	r12, r24
    19cc:	d9 0a       	sbc	r13, r25
    19ce:	da 82       	std	Y+2, r13	; 0x02
    19d0:	c9 82       	std	Y+1, r12	; 0x01
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
    19d2:	68 b8       	out	0x08, r6	; 8
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
    19d4:	67 b8       	out	0x07, r6	; 7
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
    19d6:	84 b8       	out	0x04, r8	; 4
  adcmv[1] = ADCconfig.U_AVCC - W5msReadADC(TP2);
    19d8:	e0 90 3d 01 	lds	r14, 0x013D
    19dc:	f0 90 3e 01 	lds	r15, 0x013E
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
    19e6:	e8 1a       	sub	r14, r24
    19e8:	f9 0a       	sbc	r15, r25
    19ea:	fc 82       	std	Y+4, r15	; 0x04
    19ec:	eb 82       	std	Y+3, r14	; 0x03

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
    19ee:	a8 b8       	out	0x08, r10	; 8
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
    19f0:	a7 b8       	out	0x07, r10	; 7
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
    19f2:	b4 b8       	out	0x04, r11	; 4
  adcmv[2] = ADCconfig.U_AVCC - W5msReadADC(TP3);
    19f4:	a0 90 3d 01 	lds	r10, 0x013D
    19f8:	b0 90 3e 01 	lds	r11, 0x013E
    19fc:	82 e0       	ldi	r24, 0x02	; 2
    19fe:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>

  sum_c0 = (adcmv[0] + adcmv[1] + adcmv[2]);
    1a02:	ec 0c       	add	r14, r12
    1a04:	fd 1c       	adc	r15, r13
  adcmv[1] = ADCconfig.U_AVCC - W5msReadADC(TP2);

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
  adcmv[2] = ADCconfig.U_AVCC - W5msReadADC(TP3);
    1a06:	a8 1a       	sub	r10, r24
    1a08:	b9 0a       	sbc	r11, r25

  sum_c0 = (adcmv[0] + adcmv[1] + adcmv[2]);
    1a0a:	ea 0c       	add	r14, r10
    1a0c:	fb 1c       	adc	r15, r11
  u680 = ((ADCconfig.U_AVCC * 3) - sum_rm - sum_c0);	//three times the voltage at the 680 Ohm
    1a0e:	80 91 3d 01 	lds	r24, 0x013D
    1a12:	90 91 3e 01 	lds	r25, 0x013E
    1a16:	5c 01       	movw	r10, r24
    1a18:	aa 0c       	add	r10, r10
    1a1a:	bb 1c       	adc	r11, r11
    1a1c:	a8 0e       	add	r10, r24
    1a1e:	b9 1e       	adc	r11, r25
    1a20:	a0 1a       	sub	r10, r16
    1a22:	b1 0a       	sbc	r11, r17
    1a24:	ae 18       	sub	r10, r14
    1a26:	bf 08       	sbc	r11, r15
  pin_rm = (unsigned long)((unsigned long)sum_rm * (unsigned long)R_L_VAL) / (unsigned long)u680;
    1a28:	cc 24       	eor	r12, r12
    1a2a:	dd 24       	eor	r13, r13
    1a2c:	b8 01       	movw	r22, r16
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	20 e9       	ldi	r18, 0x90	; 144
    1a34:	3a e1       	ldi	r19, 0x1A	; 26
    1a36:	40 e0       	ldi	r20, 0x00	; 0
    1a38:	50 e0       	ldi	r21, 0x00	; 0
    1a3a:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    1a3e:	a6 01       	movw	r20, r12
    1a40:	95 01       	movw	r18, r10
    1a42:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
    1a46:	49 01       	movw	r8, r18
  adcmv[2] = pin_rm;	// for last output in row 2
    1a48:	3e 83       	std	Y+6, r19	; 0x06
    1a4a:	2d 83       	std	Y+5, r18	; 0x05
  pin_rp = (unsigned long)((unsigned long)sum_c0 * (unsigned long)R_L_VAL) / (unsigned long)u680;
    1a4c:	b7 01       	movw	r22, r14
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	20 e9       	ldi	r18, 0x90	; 144
    1a54:	3a e1       	ldi	r19, 0x1A	; 26
    1a56:	40 e0       	ldi	r20, 0x00	; 0
    1a58:	50 e0       	ldi	r21, 0x00	; 0
    1a5a:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    1a5e:	a6 01       	movw	r20, r12
    1a60:	95 01       	movw	r18, r10
    1a62:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
    1a66:	79 01       	movw	r14, r18
  lcd_clear();
    1a68:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_fix_string(RIHI);	// "RiHi="
    1a6c:	85 e5       	ldi	r24, 0x55	; 85
    1a6e:	91 e0       	ldi	r25, 0x01	; 1
    1a70:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
  DisplayValue(pin_rp,-1,LCD_CHAR_OMEGA,3);
    1a74:	b7 01       	movw	r22, r14
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	4f ef       	ldi	r20, 0xFF	; 255
    1a7c:	24 ef       	ldi	r18, 0xF4	; 244
    1a7e:	03 e0       	ldi	r16, 0x03	; 3
    1a80:	0e 94 bb 02 	call	0x576	; 0x576 <DisplayValue>
  lcd_line2();
    1a84:	80 ec       	ldi	r24, 0xC0	; 192
    1a86:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(RILO);	// "RiLo="
    1a8a:	8c e5       	ldi	r24, 0x5C	; 92
    1a8c:	91 e0       	ldi	r25, 0x01	; 1
    1a8e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
  DisplayValue(pin_rm,-1,LCD_CHAR_OMEGA,3);
    1a92:	b4 01       	movw	r22, r8
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	4f ef       	ldi	r20, 0xFF	; 255
    1a9a:	24 ef       	ldi	r18, 0xF4	; 244
    1a9c:	0e 94 bb 02 	call	0x576	; 0x576 <DisplayValue>
  wait_about2s();			//wait 2 seconds
    1aa0:	80 e9       	ldi	r24, 0x90	; 144
    1aa2:	91 e0       	ldi	r25, 0x01	; 1
    1aa4:	0e 94 b7 03 	call	0x76e	; 0x76e <sleep_5ms>
#ifdef AUTO_CAL
  if ((pin_rp < 280) && (pin_rm < 250)) {
    1aa8:	f8 e1       	ldi	r31, 0x18	; 24
    1aaa:	ef 16       	cp	r14, r31
    1aac:	f1 e0       	ldi	r31, 0x01	; 1
    1aae:	ff 06       	cpc	r15, r31
    1ab0:	90 f4       	brcc	.+36     	; 0x1ad6 <AutoCheck+0x5ae>
    1ab2:	2a ef       	ldi	r18, 0xFA	; 250
    1ab4:	82 16       	cp	r8, r18
    1ab6:	91 04       	cpc	r9, r1
    1ab8:	70 f4       	brcc	.+28     	; 0x1ad6 <AutoCheck+0x5ae>
     // rp is below 28 Ohm and rm is below 25 Ohm
     (void) eeprom_write_word((uint16_t *)(&R680pl), pin_rp+R_L_VAL);  //hold VCC resistance value in EEprom
    1aba:	b7 01       	movw	r22, r14
    1abc:	60 57       	subi	r22, 0x70	; 112
    1abe:	75 4e       	sbci	r23, 0xE5	; 229
    1ac0:	8b ea       	ldi	r24, 0xAB	; 171
    1ac2:	91 e0       	ldi	r25, 0x01	; 1
    1ac4:	0e 94 67 1e 	call	0x3cce	; 0x3cce <__eewr_word_m168>
     (void) eeprom_write_word((uint16_t *)(&R680mi), pin_rm+R_L_VAL);  //hold GND resistance value in EEprom
    1ac8:	b4 01       	movw	r22, r8
    1aca:	60 57       	subi	r22, 0x70	; 112
    1acc:	75 4e       	sbci	r23, 0xE5	; 229
    1ace:	8d ea       	ldi	r24, 0xAD	; 173
    1ad0:	91 e0       	ldi	r25, 0x01	; 1
    1ad2:	0e 94 67 1e 	call	0x3cce	; 0x3cce <__eewr_word_m168>
  }
#endif

  //measure Zero offset for Capacity measurement
  adcmv[3] = 0;
    1ad6:	18 86       	std	Y+8, r1	; 0x08
    1ad8:	1f 82       	std	Y+7, r1	; 0x07
  PartFound = PART_NONE;
    1ada:	10 92 07 01 	sts	0x0107, r1
  ReadCapacity(TP3, TP1);
    1ade:	82 e0       	ldi	r24, 0x02	; 2
    1ae0:	60 e0       	ldi	r22, 0x00	; 0
    1ae2:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <ReadCapacity>
  adcmv[5] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:3
    1ae6:	00 91 60 01 	lds	r16, 0x0160
    1aea:	10 91 61 01 	lds	r17, 0x0161
    1aee:	1c 87       	std	Y+12, r17	; 0x0c
    1af0:	0b 87       	std	Y+11, r16	; 0x0b
  ReadCapacity(TP3, TP2);
    1af2:	82 e0       	ldi	r24, 0x02	; 2
    1af4:	61 e0       	ldi	r22, 0x01	; 1
    1af6:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <ReadCapacity>
  adcmv[6] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:3
    1afa:	e0 90 60 01 	lds	r14, 0x0160
    1afe:	f0 90 61 01 	lds	r15, 0x0161
    1b02:	fe 86       	std	Y+14, r15	; 0x0e
    1b04:	ed 86       	std	Y+13, r14	; 0x0d
  ReadCapacity(TP2, TP1);
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <ReadCapacity>
  adcmv[2] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:2
    1b0e:	c0 90 60 01 	lds	r12, 0x0160
    1b12:	d0 90 61 01 	lds	r13, 0x0161
    1b16:	de 82       	std	Y+6, r13	; 0x06
    1b18:	cd 82       	std	Y+5, r12	; 0x05
  ReadCapacity(TP1, TP3);
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	62 e0       	ldi	r22, 0x02	; 2
    1b1e:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <ReadCapacity>
  adcmv[1] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:1
    1b22:	80 91 60 01 	lds	r24, 0x0160
    1b26:	90 91 61 01 	lds	r25, 0x0161
    1b2a:	9c 83       	std	Y+4, r25	; 0x04
    1b2c:	8b 83       	std	Y+3, r24	; 0x03
  ReadCapacity(TP2, TP3);
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	62 e0       	ldi	r22, 0x02	; 2
    1b32:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <ReadCapacity>
  adcmv[4] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:2
    1b36:	80 91 60 01 	lds	r24, 0x0160
    1b3a:	90 91 61 01 	lds	r25, 0x0161
    1b3e:	9a 87       	std	Y+10, r25	; 0x0a
    1b40:	89 87       	std	Y+9, r24	; 0x09
  ReadCapacity(TP1, TP2);
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	61 e0       	ldi	r22, 0x01	; 1
    1b46:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <ReadCapacity>
  adcmv[0] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:1
    1b4a:	80 91 60 01 	lds	r24, 0x0160
    1b4e:	90 91 61 01 	lds	r25, 0x0161
    1b52:	9a 83       	std	Y+2, r25	; 0x02
    1b54:	89 83       	std	Y+1, r24	; 0x01
  lcd_clear();
    1b56:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_fix_string(C0_str);			//output "C0 "
    1b5a:	83 e6       	ldi	r24, 0x63	; 99
    1b5c:	91 e0       	ldi	r25, 0x01	; 1
    1b5e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
    1b62:	b8 01       	movw	r22, r16
    1b64:	88 27       	eor	r24, r24
    1b66:	77 fd       	sbrc	r23, 7
    1b68:	80 95       	com	r24
    1b6a:	98 2f       	mov	r25, r24
    1b6c:	40 e0       	ldi	r20, 0x00	; 0
    1b6e:	20 e2       	ldi	r18, 0x20	; 32
    1b70:	03 e0       	ldi	r16, 0x03	; 3
    1b72:	0e 94 bb 02 	call	0x576	; 0x576 <DisplayValue>
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
    1b76:	b7 01       	movw	r22, r14
    1b78:	88 27       	eor	r24, r24
    1b7a:	77 fd       	sbrc	r23, 7
    1b7c:	80 95       	com	r24
    1b7e:	98 2f       	mov	r25, r24
    1b80:	40 e0       	ldi	r20, 0x00	; 0
    1b82:	20 e2       	ldi	r18, 0x20	; 32
    1b84:	0e 94 bb 02 	call	0x576	; 0x576 <DisplayValue>
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
    1b88:	b6 01       	movw	r22, r12
    1b8a:	88 27       	eor	r24, r24
    1b8c:	77 fd       	sbrc	r23, 7
    1b8e:	80 95       	com	r24
    1b90:	98 2f       	mov	r25, r24
    1b92:	44 ef       	ldi	r20, 0xF4	; 244
    1b94:	26 e4       	ldi	r18, 0x46	; 70
    1b96:	0e 94 bb 02 	call	0x576	; 0x576 <DisplayValue>
    1b9a:	8e 01       	movw	r16, r28
    1b9c:	0f 5f       	subi	r16, 0xFF	; 255
    1b9e:	1f 4f       	sbci	r17, 0xFF	; 255
void AutoCheck(void) {
    1ba0:	ce 01       	movw	r24, r28
    1ba2:	0f 96       	adiw	r24, 0x0f	; 15
    1ba4:	f8 01       	movw	r30, r16
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
#ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
    1ba6:	21 91       	ld	r18, Z+
    1ba8:	31 91       	ld	r19, Z+
    1baa:	27 34       	cpi	r18, 0x47	; 71
    1bac:	31 05       	cpc	r19, r1
    1bae:	ec f4       	brge	.+58     	; 0x1bea <AutoCheck+0x6c2>
  lcd_fix_string(C0_str);			//output "C0 "
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
#ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
    1bb0:	e8 17       	cp	r30, r24
    1bb2:	f9 07       	cpc	r31, r25
    1bb4:	c1 f7       	brne	.-16     	; 0x1ba6 <AutoCheck+0x67e>
    1bb6:	ee 24       	eor	r14, r14
    1bb8:	ff 24       	eor	r15, r15
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
    1bba:	f8 01       	movw	r30, r16
    1bbc:	60 81       	ld	r22, Z
    1bbe:	0e 5f       	subi	r16, 0xFE	; 254
    1bc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc2:	61 5f       	subi	r22, 0xF1	; 241
    1bc4:	c7 01       	movw	r24, r14
    1bc6:	87 54       	subi	r24, 0x47	; 71
    1bc8:	9e 4f       	sbci	r25, 0xFE	; 254
    1bca:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__eewr_byte_m168>
    1bce:	08 94       	sec
    1bd0:	e1 1c       	adc	r14, r1
    1bd2:	f1 1c       	adc	r15, r1
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
#ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
    1bd4:	f7 e0       	ldi	r31, 0x07	; 7
    1bd6:	ef 16       	cp	r14, r31
    1bd8:	f1 04       	cpc	r15, r1
    1bda:	79 f7       	brne	.-34     	; 0x1bba <AutoCheck+0x692>
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
  }
  lcd_line2();
    1bdc:	80 ec       	ldi	r24, 0xC0	; 192
    1bde:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(OK_str);		// output "OK"
    1be2:	8b ee       	ldi	r24, 0xEB	; 235
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
no_c0save:
#endif
 wait_about2s();		//wait 2 seconds
    1bea:	80 e9       	ldi	r24, 0x90	; 144
    1bec:	91 e0       	ldi	r25, 0x01	; 1
    1bee:	0e 94 b7 03 	call	0x76e	; 0x76e <sleep_5ms>
 
#ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
    1bf2:	10 e0       	ldi	r17, 0x00	; 0
 for (ww=0;ww<64;ww++) {
    1bf4:	cc 24       	eor	r12, r12
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
    1bf6:	6a e0       	ldi	r22, 0x0A	; 10
    1bf8:	86 2e       	mov	r8, r22
    1bfa:	91 2c       	mov	r9, r1
    1bfc:	a1 2c       	mov	r10, r1
    1bfe:	b1 2c       	mov	r11, r1
     lcd_data('3');
     lcd_fix_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1c00:	58 e5       	ldi	r21, 0x58	; 88
    1c02:	e5 2e       	mov	r14, r21
    1c04:	51 e0       	ldi	r21, 0x01	; 1
    1c06:	f5 2e       	mov	r15, r21
 
#ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
     lcd_clear();
    1c08:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
     lcd_data('1');
    1c0c:	81 e3       	ldi	r24, 0x31	; 49
    1c0e:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
     lcd_fix_string(CapZeich);	// "-||-"
    1c12:	8d e1       	ldi	r24, 0x1D	; 29
    1c14:	91 e0       	ldi	r25, 0x01	; 1
    1c16:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
     lcd_data('3');
    1c1a:	83 e3       	ldi	r24, 0x33	; 51
    1c1c:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
     lcd_fix_string(MinCap_str); // " >100nF!"
    1c20:	87 e6       	ldi	r24, 0x67	; 103
    1c22:	91 e0       	ldi	r25, 0x01	; 1
    1c24:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
     PartFound = PART_NONE;
    1c28:	10 92 07 01 	sts	0x0107, r1
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
    1c2c:	82 e0       	ldi	r24, 0x02	; 2
    1c2e:	60 e0       	ldi	r22, 0x00	; 0
    1c30:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <ReadCapacity>
    1c34:	20 91 58 01 	lds	r18, 0x0158
    1c38:	30 91 59 01 	lds	r19, 0x0159
    1c3c:	40 91 5a 01 	lds	r20, 0x015A
    1c40:	50 91 5b 01 	lds	r21, 0x015B
    1c44:	00 91 68 01 	lds	r16, 0x0168
     while (cap.cpre < -9) {
    1c48:	07 c0       	rjmp	.+14     	; 0x1c58 <AutoCheck+0x730>
        cap.cpre++;
        cap.cval /= 10;
    1c4a:	ca 01       	movw	r24, r20
    1c4c:	b9 01       	movw	r22, r18
    1c4e:	a5 01       	movw	r20, r10
    1c50:	94 01       	movw	r18, r8
    1c52:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
    1c56:	0f 5f       	subi	r16, 0xFF	; 255
     lcd_data('3');
     lcd_fix_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1c58:	07 3f       	cpi	r16, 0xF7	; 247
    1c5a:	bc f3       	brlt	.-18     	; 0x1c4a <AutoCheck+0x722>
    1c5c:	00 93 68 01 	sts	0x0168, r16
    1c60:	20 93 58 01 	sts	0x0158, r18
    1c64:	f7 01       	movw	r30, r14
    1c66:	31 83       	std	Z+1, r19	; 0x01
    1c68:	42 83       	std	Z+2, r20	; 0x02
    1c6a:	53 83       	std	Z+3, r21	; 0x03
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1c6c:	07 3f       	cpi	r16, 0xF7	; 247
    1c6e:	09 f0       	breq	.+2      	; 0x1c72 <AutoCheck+0x74a>
    1c70:	be c0       	rjmp	.+380    	; 0x1dee <AutoCheck+0x8c6>
    1c72:	20 36       	cpi	r18, 0x60	; 96
    1c74:	31 05       	cpc	r19, r1
    1c76:	41 05       	cpc	r20, r1
    1c78:	51 05       	cpc	r21, r1
    1c7a:	08 f4       	brcc	.+2      	; 0x1c7e <AutoCheck+0x756>
    1c7c:	b8 c0       	rjmp	.+368    	; 0x1dee <AutoCheck+0x8c6>
    1c7e:	20 3f       	cpi	r18, 0xF0	; 240
    1c80:	f5 e5       	ldi	r31, 0x55	; 85
    1c82:	3f 07       	cpc	r19, r31
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	4f 07       	cpc	r20, r31
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	5f 07       	cpc	r21, r31
    1c8c:	08 f0       	brcs	.+2      	; 0x1c90 <AutoCheck+0x768>
    1c8e:	af c0       	rjmp	.+350    	; 0x1dee <AutoCheck+0x8c6>
        cap_found++;
    1c90:	1f 5f       	subi	r17, 0xFF	; 255
     } else {
        cap_found = 0;		// wait for stable connection
     }
     if (cap_found > 1) {
    1c92:	12 30       	cpi	r17, 0x02	; 2
    1c94:	09 f0       	breq	.+2      	; 0x1c98 <AutoCheck+0x770>
    1c96:	ac c0       	rjmp	.+344    	; 0x1df0 <AutoCheck+0x8c8>
        // value of capacitor is correct
        (void) eeprom_write_word((uint16_t *)(&ref_offset), load_diff);	// hold zero offset + slew rate dependend offset
    1c98:	60 91 6a 01 	lds	r22, 0x016A
    1c9c:	70 91 6b 01 	lds	r23, 0x016B
    1ca0:	87 eb       	ldi	r24, 0xB7	; 183
    1ca2:	91 e0       	ldi	r25, 0x01	; 1
    1ca4:	0e 94 67 1e 	call	0x3cce	; 0x3cce <__eewr_word_m168>
        lcd_clear();
    1ca8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
        lcd_fix_string(REF_C_str);	// "REF_C="
    1cac:	8f e6       	ldi	r24, 0x6F	; 111
    1cae:	91 e0       	ldi	r25, 0x01	; 1
    1cb0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
        lcd_string(itoa(load_diff, outval, 10));	//output REF_C_KORR
    1cb4:	80 91 6a 01 	lds	r24, 0x016A
    1cb8:	90 91 6b 01 	lds	r25, 0x016B
    1cbc:	6c e0       	ldi	r22, 0x0C	; 12
    1cbe:	71 e0       	ldi	r23, 0x01	; 1
    1cc0:	4a e0       	ldi	r20, 0x0A	; 10
    1cc2:	50 e0       	ldi	r21, 0x00	; 0
    1cc4:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <itoa>
    1cc8:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_string>
        eeprom_write_byte((uint8_t *)(&EE_ESR_ZERO), (uint8_t)ESR_ZERO); // set to initial zero offset
    1ccc:	80 ec       	ldi	r24, 0xC0	; 192
    1cce:	91 e0       	ldi	r25, 0x01	; 1
    1cd0:	6d e1       	ldi	r22, 0x1D	; 29
    1cd2:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__eewr_byte_m168>
        wait_about1s();
        }
//#######################################
#endif
 #ifdef AUTOSCALE_ADC
        ADC_PORT =  TXD_VAL;	//ADC-Port 1 to GND
    1cd6:	88 e0       	ldi	r24, 0x08	; 8
    1cd8:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    1cda:	89 e0       	ldi	r24, 0x09	; 9
    1cdc:	87 b9       	out	0x07, r24	; 7
        R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1cde:	80 e2       	ldi	r24, 0x20	; 32
    1ce0:	84 b9       	out	0x04, r24	; 4
        do {
           adcmv[0] = ReadADC(TP3);
    1ce2:	82 e0       	ldi	r24, 0x02	; 2
    1ce4:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
        } while (adcmv[0] > 980);
    1ce8:	23 e0       	ldi	r18, 0x03	; 3
    1cea:	85 3d       	cpi	r24, 0xD5	; 213
    1cec:	92 07       	cpc	r25, r18
    1cee:	cc f7       	brge	.-14     	; 0x1ce2 <AutoCheck+0x7ba>
        R_DDR = 0;		//all Pins to input 
    1cf0:	14 b8       	out	0x04, r1	; 4
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1cf2:	10 92 3c 01 	sts	0x013C, r1
    1cf6:	10 92 3b 01 	sts	0x013B, r1
        adcmv[0] = ReadADC(TP3);  // get cap voltage with VCC reference
    1cfa:	82 e0       	ldi	r24, 0x02	; 2
    1cfc:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
    1d00:	4c 01       	movw	r8, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1d02:	8f ea       	ldi	r24, 0xAF	; 175
    1d04:	91 e0       	ldi	r25, 0x01	; 1
    1d06:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__eerd_byte_m168>
    1d0a:	99 27       	eor	r25, r25
    1d0c:	87 fd       	sbrc	r24, 7
    1d0e:	90 95       	com	r25
    1d10:	20 91 3f 01 	lds	r18, 0x013F
    1d14:	30 91 40 01 	lds	r19, 0x0140
    1d18:	82 0f       	add	r24, r18
    1d1a:	93 1f       	adc	r25, r19
    1d1c:	90 93 3c 01 	sts	0x013C, r25
    1d20:	80 93 3b 01 	sts	0x013B, r24
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
    1d24:	82 e0       	ldi	r24, 0x02	; 2
    1d26:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
    1d2a:	8c 01       	movw	r16, r24
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1d2c:	10 92 3c 01 	sts	0x013C, r1
    1d30:	10 92 3b 01 	sts	0x013B, r1
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
    1d34:	82 e0       	ldi	r24, 0x02	; 2
    1d36:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
    1d3a:	5c 01       	movw	r10, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1d3c:	c0 90 3f 01 	lds	r12, 0x013F
    1d40:	d0 90 40 01 	lds	r13, 0x0140
    1d44:	8f ea       	ldi	r24, 0xAF	; 175
    1d46:	91 e0       	ldi	r25, 0x01	; 1
    1d48:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__eerd_byte_m168>
    1d4c:	99 27       	eor	r25, r25
    1d4e:	87 fd       	sbrc	r24, 7
    1d50:	90 95       	com	r25
    1d52:	8c 0d       	add	r24, r12
    1d54:	9d 1d       	adc	r25, r13
    1d56:	90 93 3c 01 	sts	0x013C, r25
    1d5a:	80 93 3b 01 	sts	0x013B, r24
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1d5e:	8f ea       	ldi	r24, 0xAF	; 175
    1d60:	91 e0       	ldi	r25, 0x01	; 1
    1d62:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__eerd_byte_m168>
    1d66:	68 2e       	mov	r6, r24
        lcd_line2();
    1d68:	80 ec       	ldi	r24, 0xC0	; 192
    1d6a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_fix_string(REF_R_str);	// "REF_R="
    1d6e:	86 e7       	ldi	r24, 0x76	; 118
    1d70:	91 e0       	ldi	r25, 0x01	; 1
    1d72:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1d76:	8f ea       	ldi	r24, 0xAF	; 175
    1d78:	91 e0       	ldi	r25, 0x01	; 1
    1d7a:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__eerd_byte_m168>
        ADCconfig.U_Bandgap = ADC_internal_reference;
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
        ADCconfig.U_Bandgap = ADC_internal_reference;
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1d7e:	43 e0       	ldi	r20, 0x03	; 3
    1d80:	e4 2e       	mov	r14, r20
    1d82:	e8 0e       	add	r14, r24
    1d84:	a8 0c       	add	r10, r8
    1d86:	b9 1c       	adc	r11, r9
    1d88:	a0 1a       	sub	r10, r16
    1d8a:	b1 0a       	sbc	r11, r17
    1d8c:	a0 1a       	sub	r10, r16
    1d8e:	b1 0a       	sbc	r11, r17
    1d90:	b5 01       	movw	r22, r10
    1d92:	88 27       	eor	r24, r24
    1d94:	77 fd       	sbrc	r23, 7
    1d96:	80 95       	com	r24
    1d98:	98 2f       	mov	r25, r24
    1d9a:	26 2d       	mov	r18, r6
    1d9c:	33 27       	eor	r19, r19
    1d9e:	27 fd       	sbrc	r18, 7
    1da0:	30 95       	com	r19
    1da2:	2c 0d       	add	r18, r12
    1da4:	3d 1d       	adc	r19, r13
    1da6:	40 e0       	ldi	r20, 0x00	; 0
    1da8:	50 e0       	ldi	r21, 0x00	; 0
    1daa:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    1dae:	00 0f       	add	r16, r16
    1db0:	11 1f       	adc	r17, r17
    1db2:	98 01       	movw	r18, r16
    1db4:	44 27       	eor	r20, r20
    1db6:	37 fd       	sbrc	r19, 7
    1db8:	40 95       	com	r20
    1dba:	54 2f       	mov	r21, r20
    1dbc:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__divmodsi4>
        lcd_line2();
        lcd_fix_string(REF_R_str);	// "REF_R="
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1dc0:	e2 0e       	add	r14, r18
        (void) eeprom_write_byte((uint8_t *)(&RefDiff), (uint8_t)udiff2);	// hold offset for true reference Voltage
    1dc2:	8f ea       	ldi	r24, 0xAF	; 175
    1dc4:	91 e0       	ldi	r25, 0x01	; 1
    1dc6:	6e 2d       	mov	r22, r14
    1dc8:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__eewr_byte_m168>
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
    1dcc:	8e 2d       	mov	r24, r14
    1dce:	99 27       	eor	r25, r25
    1dd0:	87 fd       	sbrc	r24, 7
    1dd2:	90 95       	com	r25
    1dd4:	6c e0       	ldi	r22, 0x0C	; 12
    1dd6:	71 e0       	ldi	r23, 0x01	; 1
    1dd8:	4a e0       	ldi	r20, 0x0A	; 10
    1dda:	50 e0       	ldi	r21, 0x00	; 0
    1ddc:	0e 94 14 1e 	call	0x3c28	; 0x3c28 <itoa>
    1de0:	0e 94 2c 01 	call	0x258	; 0x258 <lcd_string>
 #endif
        wait_about4s();
    1de4:	80 e2       	ldi	r24, 0x20	; 32
    1de6:	93 e0       	ldi	r25, 0x03	; 3
    1de8:	0e 94 b7 03 	call	0x76e	; 0x76e <sleep_5ms>
        break;
    1dec:	1b c0       	rjmp	.+54     	; 0x1e24 <AutoCheck+0x8fc>
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1dee:	10 e0       	ldi	r17, 0x00	; 0
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
 #endif
        wait_about4s();
        break;
     }
     lcd_line2();
    1df0:	80 ec       	ldi	r24, 0xC0	; 192
    1df2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     DisplayValue(cap.cval,cap.cpre,'F',4);
    1df6:	60 91 58 01 	lds	r22, 0x0158
    1dfa:	70 91 59 01 	lds	r23, 0x0159
    1dfe:	80 91 5a 01 	lds	r24, 0x015A
    1e02:	90 91 5b 01 	lds	r25, 0x015B
    1e06:	40 91 68 01 	lds	r20, 0x0168
    1e0a:	26 e4       	ldi	r18, 0x46	; 70
    1e0c:	04 e0       	ldi	r16, 0x04	; 4
    1e0e:	0e 94 bb 02 	call	0x576	; 0x576 <DisplayValue>
     wait_about200ms();			// wait additional time
    1e12:	88 e2       	ldi	r24, 0x28	; 40
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	0e 94 b7 03 	call	0x76e	; 0x76e <sleep_5ms>
 wait_about2s();		//wait 2 seconds
 
#ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
    1e1a:	c3 94       	inc	r12
    1e1c:	8c 2d       	mov	r24, r12
    1e1e:	80 34       	cpi	r24, 0x40	; 64
    1e20:	09 f0       	breq	.+2      	; 0x1e24 <AutoCheck+0x8fc>
    1e22:	f2 ce       	rjmp	.-540    	; 0x1c08 <AutoCheck+0x6e0>
     wait_about200ms();			// wait additional time
  } // end for ww

#endif

  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    1e24:	89 e1       	ldi	r24, 0x19	; 25
    1e26:	80 93 39 01 	sts	0x0139, r24
  lcd_clear();
    1e2a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_line2();
    1e2e:	80 ec       	ldi	r24, 0xC0	; 192
    1e30:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(VERSION_str);	//"Version ..."
    1e34:	87 e4       	ldi	r24, 0x47	; 71
    1e36:	91 e0       	ldi	r25, 0x01	; 1
    1e38:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
  lcd_line1();
    1e3c:	80 e8       	ldi	r24, 0x80	; 128
    1e3e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(ATE);		//"Selftest End"
    1e42:	8c ed       	ldi	r24, 0xDC	; 220
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
        // if key is pressed, don't repeat
        break;
     }
  }
#endif
 PartFound = PART_NONE;
    1e4a:	10 92 07 01 	sts	0x0107, r1
 wait_about1s();			//wait 1 seconds
    1e4e:	88 ec       	ldi	r24, 0xC8	; 200
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	0e 94 b7 03 	call	0x76e	; 0x76e <sleep_5ms>
 } 
    1e56:	2e 96       	adiw	r28, 0x0e	; 14
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	1f 91       	pop	r17
    1e68:	0f 91       	pop	r16
    1e6a:	ff 90       	pop	r15
    1e6c:	ef 90       	pop	r14
    1e6e:	df 90       	pop	r13
    1e70:	cf 90       	pop	r12
    1e72:	bf 90       	pop	r11
    1e74:	af 90       	pop	r10
    1e76:	9f 90       	pop	r9
    1e78:	8f 90       	pop	r8
    1e7a:	7f 90       	pop	r7
    1e7c:	6f 90       	pop	r6
    1e7e:	5f 90       	pop	r5
    1e80:	4f 90       	pop	r4
    1e82:	3f 90       	pop	r3
    1e84:	2f 90       	pop	r2
    1e86:	08 95       	ret

00001e88 <main>:
  // prepare sleep mode
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
#endif

//begin of transistortester program
int main(void) {
    1e88:	0f 93       	push	r16
    1e8a:	1f 93       	push	r17
    1e8c:	cf 93       	push	r28
    1e8e:	df 93       	push	r29
  //switch on
#ifndef EXTREF2PD6
  // Switch on directly only without the PC4-PD6 connection.
  // With this connection the PD6 (AIN0) is connected to the external 2.5V reference voltage
  // and should never be switched to VCC directly.
  ON_DDR = (1<<ON_PIN);
    1e90:	10 e4       	ldi	r17, 0x40	; 64
    1e92:	1a b9       	out	0x0a, r17	; 10
#endif
#ifdef PULLUP_DISABLE
  ON_PORT = (1<<ON_PIN); 		// switch power on 
    1e94:	1b b9       	out	0x0b, r17	; 11
#else
  ON_PORT = (1<<ON_PIN)|(1<<RST_PIN); 	// switch power on , enable internal Pullup for Start-Pin
#endif
  uint8_t tmp;
  //ADC-Init
  ADCSRA = (1<<ADEN) | AUTO_CLOCK_DIV;	//prescaler=8 or 64 (if 8Mhz clock)
    1e96:	86 e8       	ldi	r24, 0x86	; 134
    1e98:	80 93 7a 00 	sts	0x007A, r24
// #define WDRF_HOME MCU_STATUS_REG
 #define WDRF_HOME MCUCSR
#else
 #define WDRF_HOME MCUSR
#endif
  tmp = (WDRF_HOME & (1<<WDRF));	// save Watch Dog Flag
    1e9c:	04 b7       	in	r16, 0x34	; 52
  WDRF_HOME &= ~(1<<WDRF);	 	//reset Watch Dog flag
    1e9e:	84 b7       	in	r24, 0x34	; 52
    1ea0:	87 7f       	andi	r24, 0xF7	; 247
    1ea2:	84 bf       	out	0x34, r24	; 52
  wdt_disable();			// disable Watch Dog
    1ea4:	88 e1       	ldi	r24, 0x18	; 24
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	80 93 60 00 	sts	0x0060, r24
    1eae:	10 92 60 00 	sts	0x0060, r1
    1eb2:	0f be       	out	0x3f, r0	; 63
#ifndef __AVR_ATmega8__
  // switch off unused Parts
  PRR = (1<<PRTWI) | (1<<PRTIM0) | (1<<PRSPI) | (1<<PRUSART0);
    1eb4:	86 ea       	ldi	r24, 0xA6	; 166
    1eb6:	80 93 64 00 	sts	0x0064, r24
  DIDR0 = (1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D);	
    1eba:	88 e3       	ldi	r24, 0x38	; 56
    1ebc:	80 93 7e 00 	sts	0x007E, r24
  TCCR2A = (0<<WGM21) | (0<<WGM20);		// Counter 2 normal mode
    1ec0:	10 92 b0 00 	sts	0x00B0, r1
 #if F_CPU == 1000000UL
  TCCR2B = (1<<CS22) | (0<<CS21) | (1<<CS20);	//prescaler 128, 128us
 #endif 
 #if F_CPU == 8000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (1<<CS20);	//prescaler 1024, 128us
    1ec4:	87 e0       	ldi	r24, 0x07	; 7
    1ec6:	80 93 b1 00 	sts	0x00B1, r24
 #endif 
  sei();				// enable interrupts
    1eca:	78 94       	sei
#endif
  lcd_init();				//initialize LCD
    1ecc:	0e 94 06 01 	call	0x20c	; 0x20c <lcd_init>
	
//  ADC_PORT = TXD_VAL;
//  ADC_DDR = TXD_MSK;
  if(tmp) { 
    1ed0:	03 ff       	sbrs	r16, 3
    1ed2:	0c c0       	rjmp	.+24     	; 0x1eec <main+0x64>
     // check if  Watchdog-Event 
     // this happens, if the Watchdog is not reset for 2s
     // can happen, if any loop in the Program doen't finish.
     lcd_line1();
    1ed4:	80 e8       	ldi	r24, 0x80	; 128
    1ed6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     lcd_fix_string(TestTimedOut);	//Output Timeout
    1eda:	83 ed       	ldi	r24, 0xD3	; 211
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
     wait3s();				//wait for 3 s
    1ee2:	0e 94 e6 14 	call	0x29cc	; 0x29cc <wait3s>
     ON_PORT = 0;			//shut off!
    1ee6:	1b b8       	out	0x0b, r1	; 11
     ON_DDR = (1<<ON_PIN);		//switch to GND
    1ee8:	1a b9       	out	0x0a, r17	; 10
     return 0;
    1eea:	47 c5       	rjmp	.+2702   	; 0x297a <main+0xaf2>
  }
  LCDLoadCustomChar(LCD_CHAR_DIODE1);	//Custom-Character Diode symbol
    1eec:	88 e4       	ldi	r24, 0x48	; 72
    1eee:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(DiodeIcon1);	//load Character  >|
    1ef2:	8d e7       	ldi	r24, 0x7D	; 125
    1ef4:	91 e0       	ldi	r25, 0x01	; 1
    1ef6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_DIODE2);	//Custom-Character 
    1efa:	80 e5       	ldi	r24, 0x50	; 80
    1efc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(DiodeIcon2);	//load Character  |<
    1f00:	85 e8       	ldi	r24, 0x85	; 133
    1f02:	91 e0       	ldi	r25, 0x01	; 1
    1f04:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_CAP);	//Custom-Character  Capacitor symbol
    1f08:	88 e5       	ldi	r24, 0x58	; 88
    1f0a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(CapIcon);		//load Character  ||
    1f0e:	8d e8       	ldi	r24, 0x8D	; 141
    1f10:	91 e0       	ldi	r25, 0x01	; 1
    1f12:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS1);	//Custom-Character Resistor symbol
    1f16:	88 e7       	ldi	r24, 0x78	; 120
    1f18:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(ResIcon1);		//load Character  [
    1f1c:	85 e9       	ldi	r24, 0x95	; 149
    1f1e:	91 e0       	ldi	r25, 0x01	; 1
    1f20:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS2);	//Custom-Character 
    1f24:	80 e7       	ldi	r24, 0x70	; 112
    1f26:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(ResIcon2);		//load Character  ]
    1f2a:	8d e9       	ldi	r24, 0x9D	; 157
    1f2c:	91 e0       	ldi	r25, 0x01	; 1
    1f2e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <lcd_fix_customchar>
#endif
#ifdef PULLUP_DISABLE
 #ifdef __AVR_ATmega8__
  SFIOR = (1<<PUD);		// disable Pull-Up Resistors mega8
 #else
  MCUCR = (1<<PUD);		// disable Pull-Up Resistors mega168 family
    1f32:	80 e1       	ldi	r24, 0x10	; 16
    1f34:	85 bf       	out	0x35, r24	; 53
  }
#else
  #define display_time OFF_WAIT_TIME
#endif

  empty_count = 0;
    1f36:	10 92 43 01 	sts	0x0143, r1
  mess_count = 0;
    1f3a:	10 92 0b 01 	sts	0x010B, r1


//*****************************************************************
//Entry: if start key is pressed before shut down
start:
  PartFound = PART_NONE;
    1f3e:	10 92 07 01 	sts	0x0107, r1
  NumOfDiodes = 0;
    1f42:	10 92 05 01 	sts	0x0105, r1
  PartReady = 0;
    1f46:	10 92 04 01 	sts	0x0104, r1
  PartMode = 0;
    1f4a:	10 92 06 01 	sts	0x0106, r1
  WithReference = 0;		// no precision reference voltage
    1f4e:	10 92 42 01 	sts	0x0142, r1
  lcd_clear();
    1f52:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  ADC_DDR = TXD_MSK;		//activate Software-UART 
    1f56:	18 e0       	ldi	r17, 0x08	; 8
    1f58:	17 b9       	out	0x07, r17	; 7
#ifdef AUTO_CAL
  resis680pl = eeprom_read_word(&R680pl);
    1f5a:	8b ea       	ldi	r24, 0xAB	; 171
    1f5c:	91 e0       	ldi	r25, 0x01	; 1
    1f5e:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <__eerd_word_m168>
    1f62:	90 93 09 01 	sts	0x0109, r25
    1f66:	80 93 08 01 	sts	0x0108, r24
  resis680mi = eeprom_read_word(&R680mi);
    1f6a:	8d ea       	ldi	r24, 0xAD	; 173
    1f6c:	91 e0       	ldi	r25, 0x01	; 1
    1f6e:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <__eerd_word_m168>
    1f72:	90 93 03 01 	sts	0x0103, r25
    1f76:	80 93 02 01 	sts	0x0102, r24
#endif

  ResistorsFound = 0;
    1f7a:	10 92 55 01 	sts	0x0155, r1
  cap.ca = 0;
    1f7e:	10 92 66 01 	sts	0x0166, r1
  cap.cb = 0;
    1f82:	10 92 67 01 	sts	0x0167, r1
#ifdef WITH_UART
  uart_newline();		// start of new measurement
    1f86:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <uart_newline>
#endif
  ADCconfig.RefFlag = 0;
    1f8a:	10 92 3a 01 	sts	0x013A, r1
  ADCconfig.U_AVCC = U_VCC;	// set initial VCC Voltage
    1f8e:	88 e8       	ldi	r24, 0x88	; 136
    1f90:	93 e1       	ldi	r25, 0x13	; 19
    1f92:	90 93 3e 01 	sts	0x013E, r25
    1f96:	80 93 3d 01 	sts	0x013D, r24
  ADCconfig.Samples = 190;		// set number of ADC samples near to max
    1f9a:	8e eb       	ldi	r24, 0xBE	; 190
    1f9c:	80 93 39 01 	sts	0x0139, r24
  ADC_PORT = TXD_VAL;
    1fa0:	18 b9       	out	0x08, r17	; 8
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND
    1fa2:	88 e1       	ldi	r24, 0x18	; 24
    1fa4:	87 b9       	out	0x07, r24	; 7
  wait1ms();
    1fa6:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <wait1ms>
  ADC_DDR =  TXD_MSK; 	// switch pin with reference back to input
    1faa:	17 b9       	out	0x07, r17	; 7
#if FLASHEND > 0x1fff
  trans.uBE[1] = W5msReadADC(TPREF); // read voltage of precision reference
    1fac:	84 e0       	ldi	r24, 0x04	; 4
    1fae:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
    1fb2:	ec 01       	movw	r28, r24
    1fb4:	90 93 51 01 	sts	0x0151, r25
    1fb8:	80 93 50 01 	sts	0x0150, r24
  if ((trans.uBE[1] > 2250) && (trans.uBE[1] < 2750)) {
    1fbc:	8b 5c       	subi	r24, 0xCB	; 203
    1fbe:	98 40       	sbci	r25, 0x08	; 8
    1fc0:	21 e0       	ldi	r18, 0x01	; 1
    1fc2:	83 3f       	cpi	r24, 0xF3	; 243
    1fc4:	92 07       	cpc	r25, r18
    1fc6:	c0 f4       	brcc	.+48     	; 0x1ff8 <main+0x170>
     // precision voltage reference connected, update U_AVCC
     WithReference = 1;
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	80 93 42 01 	sts	0x0142, r24
     ADCconfig.U_AVCC = (unsigned long)((unsigned long)ADCconfig.U_AVCC * 2495) / trans.uBE[1];
    1fce:	60 91 3d 01 	lds	r22, 0x013D
    1fd2:	70 91 3e 01 	lds	r23, 0x013E
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	2f eb       	ldi	r18, 0xBF	; 191
    1fdc:	39 e0       	ldi	r19, 0x09	; 9
    1fde:	40 e0       	ldi	r20, 0x00	; 0
    1fe0:	50 e0       	ldi	r21, 0x00	; 0
    1fe2:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    1fe6:	9e 01       	movw	r18, r28
    1fe8:	40 e0       	ldi	r20, 0x00	; 0
    1fea:	50 e0       	ldi	r21, 0x00	; 0
    1fec:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
    1ff0:	30 93 3e 01 	sts	0x013E, r19
    1ff4:	20 93 3d 01 	sts	0x013D, r18
  }
#endif
  lcd_line1();	//1. row 
    1ff8:	80 e8       	ldi	r24, 0x80	; 128
    1ffa:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  
#ifdef WITH_AUTO_REF
  (void) ReadADC(0x0e);		// read Reference-voltage 
    1ffe:	8e e0       	ldi	r24, 0x0E	; 14
    2000:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
  ref_mv = W20msReadADC(0x0e);	// read Reference-voltage
    2004:	8e e0       	ldi	r24, 0x0E	; 14
    2006:	0e 94 a5 1a 	call	0x354a	; 0x354a <W20msReadADC>
    200a:	ec 01       	movw	r28, r24
    200c:	90 93 40 01 	sts	0x0140, r25
    2010:	80 93 3f 01 	sts	0x013F, r24
#else
  ref_mv = DEFAULT_BAND_GAP;	// set to default Reference Voltage
#endif
  ADCconfig.U_Bandgap = ADC_internal_reference;	// set internal reference voltage for ADC
    2014:	8f ea       	ldi	r24, 0xAF	; 175
    2016:	91 e0       	ldi	r25, 0x01	; 1
    2018:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__eerd_byte_m168>
    201c:	99 27       	eor	r25, r25
    201e:	87 fd       	sbrc	r24, 7
    2020:	90 95       	com	r25
    2022:	8c 0f       	add	r24, r28
    2024:	9d 1f       	adc	r25, r29
    2026:	90 93 3c 01 	sts	0x013C, r25
    202a:	80 93 3b 01 	sts	0x013B, r24
  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    202e:	89 e1       	ldi	r24, 0x19	; 25
    2030:	80 93 39 01 	sts	0x0139, r24

#ifdef BAT_CHECK
  // Battery check is selected
  ReadADC(TPBAT);	//Dummy-Readout
    2034:	85 e0       	ldi	r24, 0x05	; 5
    2036:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
  trans.uBE[0] = W5msReadADC(TPBAT); 	//with 5V reference
    203a:	85 e0       	ldi	r24, 0x05	; 5
    203c:	0e 94 a9 1a 	call	0x3552	; 0x3552 <W5msReadADC>
    2040:	90 93 4f 01 	sts	0x014F, r25
    2044:	80 93 4e 01 	sts	0x014E, r24
  lcd_fix_string(Bat_str);		//output: "Bat. "
    2048:	85 ee       	ldi	r24, 0xE5	; 229
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
 #ifdef BAT_OUT
  // display Battery voltage
  // The divisor to get the voltage in 0.01V units is ((10*33)/133) witch is about 2.4812
  // A good result can be get with multiply by 4 and divide by 10 (about 0.75%).
  cap.cval = (trans.uBE[0]*4)/10+((BAT_OUT+5)/10); // usually output only 2 digits
    2050:	80 91 4e 01 	lds	r24, 0x014E
    2054:	90 91 4f 01 	lds	r25, 0x014F
    2058:	88 0f       	add	r24, r24
    205a:	99 1f       	adc	r25, r25
    205c:	88 0f       	add	r24, r24
    205e:	99 1f       	adc	r25, r25
    2060:	6a e0       	ldi	r22, 0x0A	; 10
    2062:	70 e0       	ldi	r23, 0x00	; 0
    2064:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <__udivmodhi4>
    2068:	61 5f       	subi	r22, 0xF1	; 241
    206a:	7f 4f       	sbci	r23, 0xFF	; 255
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	60 93 58 01 	sts	0x0158, r22
    2074:	70 93 59 01 	sts	0x0159, r23
    2078:	80 93 5a 01 	sts	0x015A, r24
    207c:	90 93 5b 01 	sts	0x015B, r25
  DisplayValue(cap.cval,-2,'V',2);		// Display 2 Digits of this 10mV units
    2080:	4e ef       	ldi	r20, 0xFE	; 254
    2082:	26 e5       	ldi	r18, 0x56	; 86
    2084:	02 e0       	ldi	r16, 0x02	; 2
    2086:	0e 94 bb 02 	call	0x576	; 0x576 <DisplayValue>
  lcd_space();
    208a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
 #warning "Battery POOR level is set for stepup regulator"
 #define WARN_LEVEL (((unsigned long)(BAT_POOR*100+500)*(unsigned long)33)/133)
 #endif
 #define POOR_LEVEL (((unsigned long)(BAT_POOR*100)*(unsigned long)33)/133)
  // check the battery voltage
  if (trans.uBE[0] <  WARN_LEVEL) {
    208e:	80 91 4e 01 	lds	r24, 0x014E
    2092:	90 91 4f 01 	lds	r25, 0x014F
    2096:	27 e0       	ldi	r18, 0x07	; 7
    2098:	8c 32       	cpi	r24, 0x2C	; 44
    209a:	92 07       	cpc	r25, r18
    209c:	88 f4       	brcc	.+34     	; 0x20c0 <main+0x238>
     //Vcc < 7,3V; show Warning 
     if(trans.uBE[0] < POOR_LEVEL) {	
    209e:	26 e0       	ldi	r18, 0x06	; 6
    20a0:	83 33       	cpi	r24, 0x33	; 51
    20a2:	92 07       	cpc	r25, r18
    20a4:	50 f4       	brcc	.+20     	; 0x20ba <main+0x232>
        //Vcc <6,3V; no proper operation is possible
        lcd_fix_string(BatEmpty);	//Battery empty!
    20a6:	8c e7       	ldi	r24, 0x7C	; 124
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
        wait_about2s();
    20ae:	80 e9       	ldi	r24, 0x90	; 144
    20b0:	91 e0       	ldi	r25, 0x01	; 1
    20b2:	0e 94 b7 03 	call	0x76e	; 0x76e <sleep_5ms>
        PORTD = 0;			//switch power off
    20b6:	1b b8       	out	0x0b, r1	; 11
        return 0;
    20b8:	60 c4       	rjmp	.+2240   	; 0x297a <main+0xaf2>
     }
     lcd_fix_string(BatWeak);		//Battery weak
    20ba:	87 e7       	ldi	r24, 0x77	; 119
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	02 c0       	rjmp	.+4      	; 0x20c4 <main+0x23c>
  } else { // Battery-voltage OK
     lcd_fix_string(OK_str); 		// "OK"
    20c0:	8b ee       	ldi	r24, 0xEB	; 235
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
  }
#else
  lcd_fix_string(VERSION_str);		// if no Battery check, Version .. in row 1
#endif
#ifdef WDT_enabled
  wdt_enable(WDTO_2S);		//Watchdog on
    20c8:	2f e0       	ldi	r18, 0x0F	; 15
    20ca:	88 e1       	ldi	r24, 0x18	; 24
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	a8 95       	wdr
    20d4:	80 93 60 00 	sts	0x0060, r24
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	20 93 60 00 	sts	0x0060, r18
#endif

//  wait1s();			// add more time for reading batterie voltage
  // begin tests
#ifdef AUTO_RH
  RefVoltage();			//compute RHmultip = f(reference voltage)
    20de:	0e 94 63 02 	call	0x4c6	; 0x4c6 <RefVoltage>
#endif
#if FLASHEND > 0x1fff
  if (WithReference) {
    20e2:	80 91 42 01 	lds	r24, 0x0142
    20e6:	88 23       	and	r24, r24
    20e8:	b1 f0       	breq	.+44     	; 0x2116 <main+0x28e>
     lcd_line2();
    20ea:	80 ec       	ldi	r24, 0xC0	; 192
    20ec:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     lcd_fix_string(VCC_str);		// VCC=
    20f0:	87 e2       	ldi	r24, 0x27	; 39
    20f2:	91 e0       	ldi	r25, 0x01	; 1
    20f4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
     DisplayValue(ADCconfig.U_AVCC,-3,'V',3);	// Display 3 Digits of this mV units
    20f8:	60 91 3d 01 	lds	r22, 0x013D
    20fc:	70 91 3e 01 	lds	r23, 0x013E
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	4d ef       	ldi	r20, 0xFD	; 253
    2106:	26 e5       	ldi	r18, 0x56	; 86
    2108:	03 e0       	ldi	r16, 0x03	; 3
    210a:	0e 94 bb 02 	call	0x576	; 0x576 <DisplayValue>
     wait_about1s();
    210e:	88 ec       	ldi	r24, 0xC8	; 200
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	0e 94 b7 03 	call	0x76e	; 0x76e <sleep_5ms>
  }
#endif

  lcd_line2();			//LCD position row2, column 1
    2116:	80 ec       	ldi	r24, 0xC0	; 192
    2118:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(TestRunning);		//String: testing...
    211c:	8c e6       	ldi	r24, 0x6C	; 108
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
#ifndef DebugOut
  lcd_line2();			//LCD position row 2, column 1
    2124:	80 ec       	ldi	r24, 0xC0	; 192
    2126:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
#endif
  EntladePins();		// discharge all capacitors!
    212a:	0e 94 c8 01 	call	0x390	; 0x390 <EntladePins>
  if(PartFound == PART_CELL) {
    212e:	80 91 07 01 	lds	r24, 0x0107
    2132:	88 30       	cpi	r24, 0x08	; 8
    2134:	39 f4       	brne	.+14     	; 0x2144 <main+0x2bc>
    lcd_clear();
    2136:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
    lcd_fix_string(Cell_str);	// display "Cell!"
    213a:	81 e2       	ldi	r24, 0x21	; 33
    213c:	91 e0       	ldi	r25, 0x01	; 1
    213e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
    goto end2;
    2142:	ea c3       	rjmp	.+2004   	; 0x2918 <main+0xa90>
  }

#ifdef CHECK_CALL
  AutoCheck();			//check, if selftest should be done
    2144:	0e 94 94 0a 	call	0x1528	; 0x1528 <AutoCheck>
#endif
     
  // check all 6 combinations for the 3 pins 
//         High  Low  Tri
  CheckPins(TP1, TP2, TP3);
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	61 e0       	ldi	r22, 0x01	; 1
    214c:	42 e0       	ldi	r20, 0x02	; 2
    214e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <CheckPins>
  CheckPins(TP2, TP1, TP3);
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	60 e0       	ldi	r22, 0x00	; 0
    2156:	42 e0       	ldi	r20, 0x02	; 2
    2158:	0e 94 da 03 	call	0x7b4	; 0x7b4 <CheckPins>

  CheckPins(TP1, TP3, TP2);
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	62 e0       	ldi	r22, 0x02	; 2
    2160:	41 e0       	ldi	r20, 0x01	; 1
    2162:	0e 94 da 03 	call	0x7b4	; 0x7b4 <CheckPins>
  CheckPins(TP3, TP1, TP2);
    2166:	82 e0       	ldi	r24, 0x02	; 2
    2168:	60 e0       	ldi	r22, 0x00	; 0
    216a:	41 e0       	ldi	r20, 0x01	; 1
    216c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <CheckPins>

  CheckPins(TP2, TP3, TP1);
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	62 e0       	ldi	r22, 0x02	; 2
    2174:	40 e0       	ldi	r20, 0x00	; 0
    2176:	0e 94 da 03 	call	0x7b4	; 0x7b4 <CheckPins>
  CheckPins(TP3, TP2, TP1);
    217a:	82 e0       	ldi	r24, 0x02	; 2
    217c:	61 e0       	ldi	r22, 0x01	; 1
    217e:	40 e0       	ldi	r20, 0x00	; 0
    2180:	0e 94 da 03 	call	0x7b4	; 0x7b4 <CheckPins>
  
  //separate check if is is a capacitor
  if(((PartFound == PART_NONE) || (PartFound == PART_RESISTOR) || (PartFound == PART_DIODE)) ) {
    2184:	80 91 07 01 	lds	r24, 0x0107
    2188:	88 23       	and	r24, r24
    218a:	21 f0       	breq	.+8      	; 0x2194 <main+0x30c>
    218c:	86 30       	cpi	r24, 0x06	; 6
    218e:	11 f0       	breq	.+4      	; 0x2194 <main+0x30c>
    2190:	81 30       	cpi	r24, 0x01	; 1
    2192:	d9 f4       	brne	.+54     	; 0x21ca <main+0x342>
     EntladePins();		// discharge capacities
    2194:	0e 94 c8 01 	call	0x390	; 0x390 <EntladePins>
     //measurement of capacities in all 3 combinations
     cap.cval_max = 0;		// set max to zero
    2198:	10 92 5c 01 	sts	0x015C, r1
    219c:	10 92 5d 01 	sts	0x015D, r1
    21a0:	10 92 5e 01 	sts	0x015E, r1
    21a4:	10 92 5f 01 	sts	0x015F, r1
     cap.cpre_max = -12;	// set max to pF unit
    21a8:	84 ef       	ldi	r24, 0xF4	; 244
    21aa:	80 93 69 01 	sts	0x0169, r24
     ReadCapacity(TP3, TP1);
    21ae:	82 e0       	ldi	r24, 0x02	; 2
    21b0:	60 e0       	ldi	r22, 0x00	; 0
    21b2:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <ReadCapacity>
     ReadCapacity(TP3, TP2);
    21b6:	82 e0       	ldi	r24, 0x02	; 2
    21b8:	61 e0       	ldi	r22, 0x01	; 1
    21ba:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <ReadCapacity>
     ReadCapacity(TP2, TP1);
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	60 e0       	ldi	r22, 0x00	; 0
    21c2:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <ReadCapacity>

#if FLASHEND > 0x1fff
     ReadInductance();			// measure inductance
    21c6:	0e 94 06 18 	call	0x300c	; 0x300c <ReadInductance>
#endif
  }
  //All checks are done, output result to display
  lcd_clear();
    21ca:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  if(PartFound == PART_DIODE) {
    21ce:	80 91 07 01 	lds	r24, 0x0107
    21d2:	81 30       	cpi	r24, 0x01	; 1
    21d4:	09 f0       	breq	.+2      	; 0x21d8 <main+0x350>
    21d6:	ff c0       	rjmp	.+510    	; 0x23d6 <main+0x54e>
     if(NumOfDiodes == 1) {		//single Diode
    21d8:	90 91 05 01 	lds	r25, 0x0105
    21dc:	91 30       	cpi	r25, 0x01	; 1
    21de:	49 f5       	brne	.+82     	; 0x2232 <main+0x3aa>
        lcd_fix_string(Diode);		//"Diode: "
    21e0:	81 e9       	ldi	r24, 0x91	; 145
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
        lcd_testpin(diodes[0].Anode);
    21e8:	80 91 6c 01 	lds	r24, 0x016C
    21ec:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
        lcd_fix_string(AnKat);		//"->|-"
    21f0:	85 e3       	ldi	r24, 0x35	; 53
    21f2:	91 e0       	ldi	r25, 0x01	; 1
    21f4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
        lcd_testpin(diodes[0].Cathode);
    21f8:	80 91 6d 01 	lds	r24, 0x016D
    21fc:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
        UfAusgabe(0x70);
    2200:	80 e7       	ldi	r24, 0x70	; 112
    2202:	0e 94 a3 03 	call	0x746	; 0x746 <UfAusgabe>
        lcd_fix_string(GateCap_str);	//"C="
    2206:	88 ef       	ldi	r24, 0xF8	; 248
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
        ReadCapacity(diodes[0].Cathode,diodes[0].Anode);	// Capacity opposite flow direction
    220e:	80 91 6d 01 	lds	r24, 0x016D
    2212:	60 91 6c 01 	lds	r22, 0x016C
    2216:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <ReadCapacity>
        DisplayValue(cap.cval,cap.cpre,'F',3);
    221a:	60 91 58 01 	lds	r22, 0x0158
    221e:	70 91 59 01 	lds	r23, 0x0159
    2222:	80 91 5a 01 	lds	r24, 0x015A
    2226:	90 91 5b 01 	lds	r25, 0x015B
    222a:	40 91 68 01 	lds	r20, 0x0168
    222e:	26 e4       	ldi	r18, 0x46	; 70
    2230:	f4 c2       	rjmp	.+1512   	; 0x281a <main+0x992>
        goto end;
     } else if(NumOfDiodes == 2) { // double diode
    2232:	92 30       	cpi	r25, 0x02	; 2
    2234:	09 f0       	breq	.+2      	; 0x2238 <main+0x3b0>
    2236:	4c c0       	rjmp	.+152    	; 0x22d0 <main+0x448>
        lcd_data('2');
    2238:	82 e3       	ldi	r24, 0x32	; 50
    223a:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
        lcd_fix_string(Dioden);		//"diodes "
    223e:	8d e3       	ldi	r24, 0x3D	; 61
    2240:	91 e0       	ldi	r25, 0x01	; 1
    2242:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
        if(diodes[0].Anode == diodes[1].Anode) { //Common Anode
    2246:	90 91 6c 01 	lds	r25, 0x016C
    224a:	20 91 70 01 	lds	r18, 0x0170
    224e:	92 17       	cp	r25, r18
    2250:	59 f4       	brne	.+22     	; 0x2268 <main+0x3e0>
           lcd_testpin(diodes[0].Cathode);
    2252:	80 91 6d 01 	lds	r24, 0x016D
    2256:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    225a:	89 e3       	ldi	r24, 0x39	; 57
    225c:	91 e0       	ldi	r25, 0x01	; 1
    225e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    2262:	80 91 6c 01 	lds	r24, 0x016C
    2266:	2b c0       	rjmp	.+86     	; 0x22be <main+0x436>
           lcd_fix_string(AnKat);	//"->|-"
           lcd_testpin(diodes[1].Cathode);
           UfAusgabe(0x01);
           goto end;
        } else if(diodes[0].Cathode == diodes[1].Cathode) { //Common Cathode
    2268:	30 91 6d 01 	lds	r19, 0x016D
    226c:	80 91 71 01 	lds	r24, 0x0171
    2270:	38 17       	cp	r19, r24
    2272:	b9 f4       	brne	.+46     	; 0x22a2 <main+0x41a>
           lcd_testpin(diodes[0].Anode);
    2274:	89 2f       	mov	r24, r25
    2276:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    227a:	85 e3       	ldi	r24, 0x35	; 53
    227c:	91 e0       	ldi	r25, 0x01	; 1
    227e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
	   lcd_testpin(diodes[0].Cathode);
    2282:	80 91 6d 01 	lds	r24, 0x016D
    2286:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    228a:	89 e3       	ldi	r24, 0x39	; 57
    228c:	91 e0       	ldi	r25, 0x01	; 1
    228e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
           lcd_testpin(diodes[1].Anode);
    2292:	80 91 70 01 	lds	r24, 0x0170
    2296:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           UfAusgabe(0x01);
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	0e 94 a3 03 	call	0x746	; 0x746 <UfAusgabe>
           goto end;
    22a0:	34 c3       	rjmp	.+1640   	; 0x290a <main+0xa82>
          }
        else if ((diodes[0].Cathode == diodes[1].Anode) && (diodes[1].Cathode == diodes[0].Anode)) {
    22a2:	32 17       	cp	r19, r18
    22a4:	09 f0       	breq	.+2      	; 0x22a8 <main+0x420>
    22a6:	ff c2       	rjmp	.+1534   	; 0x28a6 <main+0xa1e>
    22a8:	89 17       	cp	r24, r25
    22aa:	09 f0       	breq	.+2      	; 0x22ae <main+0x426>
    22ac:	fc c2       	rjmp	.+1528   	; 0x28a6 <main+0xa1e>
           //Antiparallel
           lcd_testpin(diodes[0].Anode);
    22ae:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    22b2:	85 e3       	ldi	r24, 0x35	; 53
    22b4:	91 e0       	ldi	r25, 0x01	; 1
    22b6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
           lcd_testpin(diodes[0].Cathode);
    22ba:	80 91 6d 01 	lds	r24, 0x016D
    22be:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    22c2:	85 e3       	ldi	r24, 0x35	; 53
    22c4:	91 e0       	ldi	r25, 0x01	; 1
    22c6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
           lcd_testpin(diodes[1].Cathode);
    22ca:	80 91 71 01 	lds	r24, 0x0171
    22ce:	e3 cf       	rjmp	.-58     	; 0x2296 <main+0x40e>
           UfAusgabe(0x01);
           goto end;
        }
     } else if(NumOfDiodes == 3) {
    22d0:	93 30       	cpi	r25, 0x03	; 3
    22d2:	09 f0       	breq	.+2      	; 0x22d6 <main+0x44e>
    22d4:	e8 c2       	rjmp	.+1488   	; 0x28a6 <main+0xa1e>
        //Serial of 2 Diodes; was detected as 3 Diodes 
        trans.b = 3;
    22d6:	90 93 52 01 	sts	0x0152, r25
        trans.c = 3;
    22da:	90 93 53 01 	sts	0x0153, r25
        /* Check for any constallation of 2 serial diodes:
          Only once the pin No of anyone Cathode is identical of another anode.
          two diodes in series is additionally detected as third big diode.
        */
        if(diodes[0].Cathode == diodes[1].Anode)
    22de:	50 91 6d 01 	lds	r21, 0x016D
    22e2:	90 91 70 01 	lds	r25, 0x0170
    22e6:	59 17       	cp	r21, r25
    22e8:	21 f4       	brne	.+8      	; 0x22f2 <main+0x46a>
          {
           trans.b = 0;
    22ea:	10 92 52 01 	sts	0x0152, r1
           trans.c = 1;
    22ee:	80 93 53 01 	sts	0x0153, r24
          }
        if(diodes[0].Anode == diodes[1].Cathode)
    22f2:	40 91 6c 01 	lds	r20, 0x016C
    22f6:	30 91 71 01 	lds	r19, 0x0171
    22fa:	43 17       	cp	r20, r19
    22fc:	29 f4       	brne	.+10     	; 0x2308 <main+0x480>
          {
           trans.b = 1;
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	80 93 52 01 	sts	0x0152, r24
           trans.c = 0;
    2304:	10 92 53 01 	sts	0x0153, r1
          }
        if(diodes[0].Cathode == diodes[2].Anode)
    2308:	20 91 74 01 	lds	r18, 0x0174
    230c:	52 17       	cp	r21, r18
    230e:	29 f4       	brne	.+10     	; 0x231a <main+0x492>
          {
           trans.b = 0;
    2310:	10 92 52 01 	sts	0x0152, r1
           trans.c = 2;
    2314:	82 e0       	ldi	r24, 0x02	; 2
    2316:	80 93 53 01 	sts	0x0153, r24
          }
        if(diodes[0].Anode == diodes[2].Cathode)
    231a:	80 91 75 01 	lds	r24, 0x0175
    231e:	48 17       	cp	r20, r24
    2320:	29 f4       	brne	.+10     	; 0x232c <main+0x4a4>
          {
           trans.b = 2;
    2322:	42 e0       	ldi	r20, 0x02	; 2
    2324:	40 93 52 01 	sts	0x0152, r20
           trans.c = 0;
    2328:	10 92 53 01 	sts	0x0153, r1
          }
        if(diodes[1].Cathode == diodes[2].Anode)
    232c:	32 17       	cp	r19, r18
    232e:	31 f4       	brne	.+12     	; 0x233c <main+0x4b4>
          {
           trans.b = 1;
    2330:	21 e0       	ldi	r18, 0x01	; 1
    2332:	20 93 52 01 	sts	0x0152, r18
           trans.c = 2;
    2336:	22 e0       	ldi	r18, 0x02	; 2
    2338:	20 93 53 01 	sts	0x0153, r18
          }
        if(diodes[1].Anode == diodes[2].Cathode)
    233c:	98 17       	cp	r25, r24
    233e:	31 f4       	brne	.+12     	; 0x234c <main+0x4c4>
          {
           trans.b = 2;
    2340:	82 e0       	ldi	r24, 0x02	; 2
    2342:	80 93 52 01 	sts	0x0152, r24
           trans.c = 1;
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	80 93 53 01 	sts	0x0153, r24
        lcd_testpin(diodes[2].Cathode);
        lcd_space();
        lcd_string(utoa(diodes[2].Voltage, outval, 10));
        lcd_line1();
#endif
        if((trans.b<3) && (trans.c<3)) {
    234c:	80 91 52 01 	lds	r24, 0x0152
    2350:	83 30       	cpi	r24, 0x03	; 3
    2352:	08 f0       	brcs	.+2      	; 0x2356 <main+0x4ce>
    2354:	a8 c2       	rjmp	.+1360   	; 0x28a6 <main+0xa1e>
    2356:	80 91 53 01 	lds	r24, 0x0153
    235a:	83 30       	cpi	r24, 0x03	; 3
    235c:	08 f0       	brcs	.+2      	; 0x2360 <main+0x4d8>
    235e:	a3 c2       	rjmp	.+1350   	; 0x28a6 <main+0xa1e>
           lcd_data('3');
    2360:	83 e3       	ldi	r24, 0x33	; 51
    2362:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
           lcd_fix_string(Dioden);	//"Diodes "
    2366:	8d e3       	ldi	r24, 0x3D	; 61
    2368:	91 e0       	ldi	r25, 0x01	; 1
    236a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Anode);
    236e:	e0 91 52 01 	lds	r30, 0x0152
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	ee 0f       	add	r30, r30
    2376:	ff 1f       	adc	r31, r31
    2378:	ee 0f       	add	r30, r30
    237a:	ff 1f       	adc	r31, r31
    237c:	e4 59       	subi	r30, 0x94	; 148
    237e:	fe 4f       	sbci	r31, 0xFE	; 254
    2380:	80 81       	ld	r24, Z
    2382:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2386:	85 e3       	ldi	r24, 0x35	; 53
    2388:	91 e0       	ldi	r25, 0x01	; 1
    238a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Cathode);
    238e:	e0 91 52 01 	lds	r30, 0x0152
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	ee 0f       	add	r30, r30
    2396:	ff 1f       	adc	r31, r31
    2398:	ee 0f       	add	r30, r30
    239a:	ff 1f       	adc	r31, r31
    239c:	e4 59       	subi	r30, 0x94	; 148
    239e:	fe 4f       	sbci	r31, 0xFE	; 254
    23a0:	81 81       	ldd	r24, Z+1	; 0x01
    23a2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    23a6:	85 e3       	ldi	r24, 0x35	; 53
    23a8:	91 e0       	ldi	r25, 0x01	; 1
    23aa:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
           lcd_testpin(diodes[trans.c].Cathode);
    23ae:	e0 91 53 01 	lds	r30, 0x0153
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	ee 0f       	add	r30, r30
    23b6:	ff 1f       	adc	r31, r31
    23b8:	ee 0f       	add	r30, r30
    23ba:	ff 1f       	adc	r31, r31
    23bc:	e4 59       	subi	r30, 0x94	; 148
    23be:	fe 4f       	sbci	r31, 0xFE	; 254
    23c0:	81 81       	ldd	r24, Z+1	; 0x01
    23c2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           UfAusgabe( (trans.b<<4)|trans.c);
    23c6:	80 91 52 01 	lds	r24, 0x0152
    23ca:	82 95       	swap	r24
    23cc:	80 7f       	andi	r24, 0xF0	; 240
    23ce:	90 91 53 01 	lds	r25, 0x0153
    23d2:	89 2b       	or	r24, r25
    23d4:	63 cf       	rjmp	.-314    	; 0x229c <main+0x414>
           goto end;
        }
     }
     // end (PartFound == PART_DIODE)
  } else if (PartFound == PART_TRANSISTOR) {
    23d6:	82 30       	cpi	r24, 0x02	; 2
    23d8:	09 f0       	breq	.+2      	; 0x23dc <main+0x554>
    23da:	a1 c0       	rjmp	.+322    	; 0x251e <main+0x696>
    if(PartReady != 0) {
    23dc:	80 91 04 01 	lds	r24, 0x0104
    23e0:	88 23       	and	r24, r24
    23e2:	71 f1       	breq	.+92     	; 0x2440 <main+0x5b8>
       if((trans.hfe[0]>trans.hfe[1])) {
    23e4:	80 91 4a 01 	lds	r24, 0x014A
    23e8:	90 91 4b 01 	lds	r25, 0x014B
    23ec:	a0 91 4c 01 	lds	r26, 0x014C
    23f0:	b0 91 4d 01 	lds	r27, 0x014D
    23f4:	20 91 46 01 	lds	r18, 0x0146
    23f8:	30 91 47 01 	lds	r19, 0x0147
    23fc:	40 91 48 01 	lds	r20, 0x0148
    2400:	50 91 49 01 	lds	r21, 0x0149
    2404:	82 17       	cp	r24, r18
    2406:	93 07       	cpc	r25, r19
    2408:	a4 07       	cpc	r26, r20
    240a:	b5 07       	cpc	r27, r21
    240c:	48 f4       	brcc	.+18     	; 0x2420 <main+0x598>
          //if the amplification factor was higher at first testr: swap C and E !
          tmp = trans.c;
    240e:	80 91 53 01 	lds	r24, 0x0153
          trans.c = trans.e;
    2412:	90 91 54 01 	lds	r25, 0x0154
    2416:	90 93 53 01 	sts	0x0153, r25
          trans.e = tmp;
    241a:	80 93 54 01 	sts	0x0154, r24
    241e:	10 c0       	rjmp	.+32     	; 0x2440 <main+0x5b8>
       } else {
          trans.hfe[0] = trans.hfe[1];
    2420:	80 93 46 01 	sts	0x0146, r24
    2424:	90 93 47 01 	sts	0x0147, r25
    2428:	a0 93 48 01 	sts	0x0148, r26
    242c:	b0 93 49 01 	sts	0x0149, r27
          trans.uBE[0] = trans.uBE[1];
    2430:	80 91 50 01 	lds	r24, 0x0150
    2434:	90 91 51 01 	lds	r25, 0x0151
    2438:	90 93 4f 01 	sts	0x014F, r25
    243c:	80 93 4e 01 	sts	0x014E, r24
       }
    }

    if(PartMode == PART_MODE_NPN) {
    2440:	80 91 06 01 	lds	r24, 0x0106
    2444:	81 30       	cpi	r24, 0x01	; 1
    2446:	19 f4       	brne	.+6      	; 0x244e <main+0x5c6>
       lcd_fix_string(NPN_str);		//"NPN "
    2448:	8e ef       	ldi	r24, 0xFE	; 254
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	02 c0       	rjmp	.+4      	; 0x2452 <main+0x5ca>
    } else {
       lcd_fix_string(PNP_str);		//"PNP "
    244e:	83 e0       	ldi	r24, 0x03	; 3
    2450:	91 e0       	ldi	r25, 0x01	; 1
    2452:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
    }
    if( NumOfDiodes > 2) {	//Transistor with protection diode
    2456:	80 91 05 01 	lds	r24, 0x0105
    245a:	83 30       	cpi	r24, 0x03	; 3
    245c:	a0 f0       	brcs	.+40     	; 0x2486 <main+0x5fe>
#ifdef EBC_STYLE
       if(PartMode == PART_MODE_NPN)
#else
       if (((PartMode == PART_MODE_NPN) && (trans.c > trans.e)) || ((PartMode != PART_MODE_NPN) && (trans.c < trans.e)))
    245e:	20 91 06 01 	lds	r18, 0x0106
    2462:	90 91 53 01 	lds	r25, 0x0153
    2466:	80 91 54 01 	lds	r24, 0x0154
    246a:	21 30       	cpi	r18, 0x01	; 1
    246c:	19 f4       	brne	.+6      	; 0x2474 <main+0x5ec>
    246e:	89 17       	cp	r24, r25
    2470:	18 f0       	brcs	.+6      	; 0x2478 <main+0x5f0>
    2472:	05 c0       	rjmp	.+10     	; 0x247e <main+0x5f6>
    2474:	98 17       	cp	r25, r24
    2476:	18 f4       	brcc	.+6      	; 0x247e <main+0x5f6>
#endif
       {
          lcd_fix_string(AnKat);	//"->|-"
    2478:	85 e3       	ldi	r24, 0x35	; 53
    247a:	91 e0       	ldi	r25, 0x01	; 1
    247c:	02 c0       	rjmp	.+4      	; 0x2482 <main+0x5fa>
       } else {
          lcd_fix_string(KatAn);	//"-|<-"
    247e:	89 e3       	ldi	r24, 0x39	; 57
    2480:	91 e0       	ldi	r25, 0x01	; 1
    2482:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
    lcd_fix_string(EBC_str);		//" EBC="
    lcd_testpin(trans.e);
    lcd_testpin(trans.b);
    lcd_testpin(trans.c);
#else
    lcd_fix_string(N123_str);		//" 123="
    2486:	88 e0       	ldi	r24, 0x08	; 8
    2488:	91 e0       	ldi	r25, 0x01	; 1
    248a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
    for (ii=0;ii<3;ii++) {
    248e:	10 92 44 01 	sts	0x0144, r1
    2492:	1e c0       	rjmp	.+60     	; 0x24d0 <main+0x648>
        if (ii == trans.e)  lcd_data('E');	// Output Character in right order
    2494:	90 91 54 01 	lds	r25, 0x0154
    2498:	89 17       	cp	r24, r25
    249a:	19 f4       	brne	.+6      	; 0x24a2 <main+0x61a>
    249c:	85 e4       	ldi	r24, 0x45	; 69
    249e:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
        if (ii == trans.b)  lcd_data('B');
    24a2:	90 91 44 01 	lds	r25, 0x0144
    24a6:	80 91 52 01 	lds	r24, 0x0152
    24aa:	98 17       	cp	r25, r24
    24ac:	19 f4       	brne	.+6      	; 0x24b4 <main+0x62c>
    24ae:	82 e4       	ldi	r24, 0x42	; 66
    24b0:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
        if (ii == trans.c)  lcd_data('C');
    24b4:	90 91 44 01 	lds	r25, 0x0144
    24b8:	80 91 53 01 	lds	r24, 0x0153
    24bc:	98 17       	cp	r25, r24
    24be:	19 f4       	brne	.+6      	; 0x24c6 <main+0x63e>
    24c0:	83 e4       	ldi	r24, 0x43	; 67
    24c2:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
    lcd_testpin(trans.e);
    lcd_testpin(trans.b);
    lcd_testpin(trans.c);
#else
    lcd_fix_string(N123_str);		//" 123="
    for (ii=0;ii<3;ii++) {
    24c6:	80 91 44 01 	lds	r24, 0x0144
    24ca:	8f 5f       	subi	r24, 0xFF	; 255
    24cc:	80 93 44 01 	sts	0x0144, r24
    24d0:	80 91 44 01 	lds	r24, 0x0144
    24d4:	83 30       	cpi	r24, 0x03	; 3
    24d6:	f0 f2       	brcs	.-68     	; 0x2494 <main+0x60c>
        if (ii == trans.e)  lcd_data('E');	// Output Character in right order
        if (ii == trans.b)  lcd_data('B');
        if (ii == trans.c)  lcd_data('C');
    }
#endif
    lcd_line2(); //2. row 
    24d8:	80 ec       	ldi	r24, 0xC0	; 192
    24da:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
    lcd_fix_string(hfe_str);		//"B="  (hFE)
    24de:	8b ef       	ldi	r24, 0xFB	; 251
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
    DisplayValue(trans.hfe[0],0,0,3);
    24e6:	60 91 46 01 	lds	r22, 0x0146
    24ea:	70 91 47 01 	lds	r23, 0x0147
    24ee:	80 91 48 01 	lds	r24, 0x0148
    24f2:	90 91 49 01 	lds	r25, 0x0149
    24f6:	40 e0       	ldi	r20, 0x00	; 0
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	03 e0       	ldi	r16, 0x03	; 3
    24fc:	0e 94 bb 02 	call	0x576	; 0x576 <DisplayValue>
    lcd_space();
    2500:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>

    lcd_fix_string(Uf_str);		//"Uf="
    2504:	8e e0       	ldi	r24, 0x0E	; 14
    2506:	91 e0       	ldi	r25, 0x01	; 1
    2508:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
    DisplayValue(trans.uBE[0],-3,'V',3);
    250c:	60 91 4e 01 	lds	r22, 0x014E
    2510:	70 91 4f 01 	lds	r23, 0x014F
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	4d ef       	ldi	r20, 0xFD	; 253
    251a:	26 e5       	ldi	r18, 0x56	; 86
    251c:	7f c1       	rjmp	.+766    	; 0x281c <main+0x994>
    goto end;
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    251e:	83 30       	cpi	r24, 0x03	; 3
    2520:	09 f0       	breq	.+2      	; 0x2524 <main+0x69c>
    2522:	a3 c0       	rjmp	.+326    	; 0x266a <main+0x7e2>
    if(PartMode&1) {
    2524:	80 91 06 01 	lds	r24, 0x0106
    2528:	80 ff       	sbrs	r24, 0
    252a:	02 c0       	rjmp	.+4      	; 0x2530 <main+0x6a8>
       //N-Kanal
       lcd_data('P');			//P-channel
    252c:	80 e5       	ldi	r24, 0x50	; 80
    252e:	01 c0       	rjmp	.+2      	; 0x2532 <main+0x6aa>
    } else {
       lcd_data('N');			//N-channel
    2530:	8e e4       	ldi	r24, 0x4E	; 78
    2532:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
    }
    lcd_data('-');
    2536:	8d e2       	ldi	r24, 0x2D	; 45
    2538:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>

    tmp = PartMode/2;
    253c:	80 91 06 01 	lds	r24, 0x0106
    2540:	86 95       	lsr	r24
    if (tmp == (PART_MODE_N_D_MOS/2)) {
    2542:	82 30       	cpi	r24, 0x02	; 2
    2544:	11 f4       	brne	.+4      	; 0x254a <main+0x6c2>
       lcd_data('D');			// N-D
    2546:	84 e4       	ldi	r24, 0x44	; 68
    2548:	03 c0       	rjmp	.+6      	; 0x2550 <main+0x6c8>
    }
    if (tmp == (PART_MODE_N_E_MOS/2)) {
    254a:	81 30       	cpi	r24, 0x01	; 1
    254c:	21 f4       	brne	.+8      	; 0x2556 <main+0x6ce>
       lcd_data('E');			// N-E
    254e:	85 e4       	ldi	r24, 0x45	; 69
    2550:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
    2554:	05 c0       	rjmp	.+10     	; 0x2560 <main+0x6d8>
    }
    if (tmp == (PART_MODE_N_JFET/2)) {
    2556:	83 30       	cpi	r24, 0x03	; 3
    2558:	19 f4       	brne	.+6      	; 0x2560 <main+0x6d8>
       lcd_fix_string(jfet_str);	//"JFET"
    255a:	83 ef       	ldi	r24, 0xF3	; 243
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	02 c0       	rjmp	.+4      	; 0x2564 <main+0x6dc>
    } else {
       lcd_fix_string(mosfet_str);	//"-MOS "
    2560:	8e ee       	ldi	r24, 0xEE	; 238
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
    lcd_fix_string(GDS_str);		//"GDS="
    lcd_testpin(trans.b);
    lcd_testpin(trans.c);
    lcd_testpin(trans.e);
#else
    lcd_fix_string(N123_str);		//" 123="
    2568:	88 e0       	ldi	r24, 0x08	; 8
    256a:	91 e0       	ldi	r25, 0x01	; 1
    256c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
    for (ii=0;ii<3;ii++) {
    2570:	10 92 44 01 	sts	0x0144, r1
    2574:	1e c0       	rjmp	.+60     	; 0x25b2 <main+0x72a>
        if (ii == trans.e)  lcd_data('S');	// Output Character in right order
    2576:	90 91 54 01 	lds	r25, 0x0154
    257a:	89 17       	cp	r24, r25
    257c:	19 f4       	brne	.+6      	; 0x2584 <main+0x6fc>
    257e:	83 e5       	ldi	r24, 0x53	; 83
    2580:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
        if (ii == trans.b)  lcd_data('G');
    2584:	90 91 44 01 	lds	r25, 0x0144
    2588:	80 91 52 01 	lds	r24, 0x0152
    258c:	98 17       	cp	r25, r24
    258e:	19 f4       	brne	.+6      	; 0x2596 <main+0x70e>
    2590:	87 e4       	ldi	r24, 0x47	; 71
    2592:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
        if (ii == trans.c)  lcd_data('D');
    2596:	90 91 44 01 	lds	r25, 0x0144
    259a:	80 91 53 01 	lds	r24, 0x0153
    259e:	98 17       	cp	r25, r24
    25a0:	19 f4       	brne	.+6      	; 0x25a8 <main+0x720>
    25a2:	84 e4       	ldi	r24, 0x44	; 68
    25a4:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
    lcd_testpin(trans.b);
    lcd_testpin(trans.c);
    lcd_testpin(trans.e);
#else
    lcd_fix_string(N123_str);		//" 123="
    for (ii=0;ii<3;ii++) {
    25a8:	80 91 44 01 	lds	r24, 0x0144
    25ac:	8f 5f       	subi	r24, 0xFF	; 255
    25ae:	80 93 44 01 	sts	0x0144, r24
    25b2:	80 91 44 01 	lds	r24, 0x0144
    25b6:	83 30       	cpi	r24, 0x03	; 3
    25b8:	f0 f2       	brcs	.-68     	; 0x2576 <main+0x6ee>
        if (ii == trans.e)  lcd_data('S');	// Output Character in right order
        if (ii == trans.b)  lcd_data('G');
        if (ii == trans.c)  lcd_data('D');
    }
#endif
    if((NumOfDiodes > 0) && (PartMode < PART_MODE_N_D_MOS)) {
    25ba:	80 91 05 01 	lds	r24, 0x0105
    25be:	88 23       	and	r24, r24
    25c0:	a1 f0       	breq	.+40     	; 0x25ea <main+0x762>
    25c2:	20 91 06 01 	lds	r18, 0x0106
    25c6:	24 30       	cpi	r18, 0x04	; 4
    25c8:	80 f4       	brcc	.+32     	; 0x25ea <main+0x762>
    25ca:	90 91 53 01 	lds	r25, 0x0153
    25ce:	80 91 54 01 	lds	r24, 0x0154
       //MOSFET with protection diode; only with enhancement-FETs
#ifdef EBC_STYLE
       if (PartMode&1)
#else
       if (((PartMode&1) && (trans.c < trans.e)) || ((!(PartMode&1)) && (trans.c > trans.e)))
    25d2:	20 ff       	sbrs	r18, 0
    25d4:	03 c0       	rjmp	.+6      	; 0x25dc <main+0x754>
    25d6:	98 17       	cp	r25, r24
    25d8:	18 f0       	brcs	.+6      	; 0x25e0 <main+0x758>
    25da:	04 c0       	rjmp	.+8      	; 0x25e4 <main+0x75c>
    25dc:	89 17       	cp	r24, r25
    25de:	10 f4       	brcc	.+4      	; 0x25e4 <main+0x75c>
#endif
       {
          lcd_data(LCD_CHAR_DIODE1);	//show Diode symbol >|
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	01 c0       	rjmp	.+2      	; 0x25e6 <main+0x75e>
       } else {
          lcd_data(LCD_CHAR_DIODE2);	//show Diode symbol |<
    25e4:	82 e0       	ldi	r24, 0x02	; 2
    25e6:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
       }
    }
    lcd_line2();			//2. Row
    25ea:	80 ec       	ldi	r24, 0xC0	; 192
    25ec:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
    if(PartMode < PART_MODE_N_D_MOS) {	//enhancement-MOSFET
    25f0:	80 91 06 01 	lds	r24, 0x0106
    25f4:	84 30       	cpi	r24, 0x04	; 4
    25f6:	d8 f4       	brcc	.+54     	; 0x262e <main+0x7a6>
	//Gate capacity
       lcd_fix_string(GateCap_str);		//"C="
    25f8:	88 ef       	ldi	r24, 0xF8	; 248
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
       ReadCapacity(trans.b,trans.e);	//measure capacity
    2600:	80 91 52 01 	lds	r24, 0x0152
    2604:	60 91 54 01 	lds	r22, 0x0154
    2608:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <ReadCapacity>
       DisplayValue(cap.cval,cap.cpre,'F',3);
    260c:	60 91 58 01 	lds	r22, 0x0158
    2610:	70 91 59 01 	lds	r23, 0x0159
    2614:	80 91 5a 01 	lds	r24, 0x015A
    2618:	90 91 5b 01 	lds	r25, 0x015B
    261c:	40 91 68 01 	lds	r20, 0x0168
    2620:	26 e4       	ldi	r18, 0x46	; 70
    2622:	03 e0       	ldi	r16, 0x03	; 3
    2624:	0e 94 bb 02 	call	0x576	; 0x576 <DisplayValue>
       lcd_fix_string(vt_str);		// "Vt="
    2628:	82 e1       	ldi	r24, 0x12	; 18
    262a:	91 e0       	ldi	r25, 0x01	; 1
    262c:	13 c0       	rjmp	.+38     	; 0x2654 <main+0x7cc>
    } else {
       lcd_data('I');
    262e:	89 e4       	ldi	r24, 0x49	; 73
    2630:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
       lcd_data('=');
    2634:	8d e3       	ldi	r24, 0x3D	; 61
    2636:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
       DisplayValue(trans.uBE[1],-5,'A',2);
    263a:	60 91 50 01 	lds	r22, 0x0150
    263e:	70 91 51 01 	lds	r23, 0x0151
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	4b ef       	ldi	r20, 0xFB	; 251
    2648:	21 e4       	ldi	r18, 0x41	; 65
    264a:	02 e0       	ldi	r16, 0x02	; 2
    264c:	0e 94 bb 02 	call	0x576	; 0x576 <DisplayValue>
       lcd_fix_string(Vgs_str);		// " Vgs="
    2650:	87 e1       	ldi	r24, 0x17	; 23
    2652:	91 e0       	ldi	r25, 0x01	; 1
    2654:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
    }
    //Gate-threshold voltage
    DisplayValue(gthvoltage,-3,'V',3);
    2658:	60 91 56 01 	lds	r22, 0x0156
    265c:	70 91 57 01 	lds	r23, 0x0157
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	4d ef       	ldi	r20, 0xFD	; 253
    2666:	26 e5       	ldi	r18, 0x56	; 86
    2668:	d8 c0       	rjmp	.+432    	; 0x281a <main+0x992>
    goto end;
    // end (PartFound == PART_FET)
  } else if (PartFound == PART_THYRISTOR) {
    266a:	85 30       	cpi	r24, 0x05	; 5
    266c:	19 f4       	brne	.+6      	; 0x2674 <main+0x7ec>
    lcd_fix_string(Thyristor);		//"Thyristor"
    266e:	84 ea       	ldi	r24, 0xA4	; 164
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	04 c0       	rjmp	.+8      	; 0x267c <main+0x7f4>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    2674:	84 30       	cpi	r24, 0x04	; 4
    2676:	c1 f4       	brne	.+48     	; 0x26a8 <main+0x820>
    lcd_fix_string(Triac);		//"Triac"
    2678:	8e e9       	ldi	r24, 0x9E	; 158
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
  mess_count = 0;
  goto end2;


gakAusgabe:
  lcd_line2(); //2. row 
    2680:	80 ec       	ldi	r24, 0xC0	; 192
    2682:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(GAK);		//"GAK="
    2686:	89 e9       	ldi	r24, 0x99	; 153
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
  lcd_testpin(trans.b);
    268e:	80 91 52 01 	lds	r24, 0x0152
    2692:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
  lcd_testpin(trans.c);
    2696:	80 91 53 01 	lds	r24, 0x0153
    269a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
  lcd_testpin(trans.e);
    269e:	80 91 54 01 	lds	r24, 0x0154
    26a2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
    26a6:	31 c1       	rjmp	.+610    	; 0x290a <main+0xa82>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    lcd_fix_string(Triac);		//"Triac"
    goto gakAusgabe;
  }
  else if(PartFound == PART_RESISTOR) {
    26a8:	86 30       	cpi	r24, 0x06	; 6
    26aa:	09 f0       	breq	.+2      	; 0x26ae <main+0x826>
    26ac:	da c0       	rjmp	.+436    	; 0x2862 <main+0x9da>
    if (ResistorsFound == 1) { // single resistor
    26ae:	60 91 55 01 	lds	r22, 0x0155
    26b2:	61 30       	cpi	r22, 0x01	; 1
    26b4:	69 f4       	brne	.+26     	; 0x26d0 <main+0x848>
       lcd_testpin(resis[0].rb);  	//Pin-number 1
    26b6:	80 91 21 01 	lds	r24, 0x0121
    26ba:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
       lcd_fix_string(Resistor_str);
    26be:	82 e4       	ldi	r24, 0x42	; 66
    26c0:	91 e0       	ldi	r25, 0x01	; 1
    26c2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
       lcd_testpin(resis[0].ra);		//Pin-number 2
    26c6:	80 91 20 01 	lds	r24, 0x0120
    26ca:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
    26ce:	80 c0       	rjmp	.+256    	; 0x27d0 <main+0x948>
    } else { // R-Max suchen
       ii = 0;
    26d0:	10 92 44 01 	sts	0x0144, r1
       if (resis[1].rx > resis[0].rx)
    26d4:	20 91 23 01 	lds	r18, 0x0123
    26d8:	30 91 24 01 	lds	r19, 0x0124
    26dc:	40 91 25 01 	lds	r20, 0x0125
    26e0:	50 91 26 01 	lds	r21, 0x0126
    26e4:	80 91 18 01 	lds	r24, 0x0118
    26e8:	90 91 19 01 	lds	r25, 0x0119
    26ec:	a0 91 1a 01 	lds	r26, 0x011A
    26f0:	b0 91 1b 01 	lds	r27, 0x011B
    26f4:	82 17       	cp	r24, r18
    26f6:	93 07       	cpc	r25, r19
    26f8:	a4 07       	cpc	r26, r20
    26fa:	b5 07       	cpc	r27, r21
    26fc:	18 f4       	brcc	.+6      	; 0x2704 <main+0x87c>
          ii = 1;
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	80 93 44 01 	sts	0x0144, r24
       if (ResistorsFound == 2) {
    2704:	62 30       	cpi	r22, 0x02	; 2
    2706:	19 f4       	brne	.+6      	; 0x270e <main+0x886>
          ii = 2;
    2708:	60 93 44 01 	sts	0x0144, r22
    270c:	22 c0       	rjmp	.+68     	; 0x2752 <main+0x8ca>
       } else {
          if (resis[2].rx > resis[ii].rx) {
    270e:	20 91 44 01 	lds	r18, 0x0144
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	8b e0       	ldi	r24, 0x0B	; 11
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	28 9f       	mul	r18, r24
    271a:	f0 01       	movw	r30, r0
    271c:	29 9f       	mul	r18, r25
    271e:	f0 0d       	add	r31, r0
    2720:	38 9f       	mul	r19, r24
    2722:	f0 0d       	add	r31, r0
    2724:	11 24       	eor	r1, r1
    2726:	e8 5e       	subi	r30, 0xE8	; 232
    2728:	fe 4f       	sbci	r31, 0xFE	; 254
    272a:	20 91 2e 01 	lds	r18, 0x012E
    272e:	30 91 2f 01 	lds	r19, 0x012F
    2732:	40 91 30 01 	lds	r20, 0x0130
    2736:	50 91 31 01 	lds	r21, 0x0131
    273a:	80 81       	ld	r24, Z
    273c:	91 81       	ldd	r25, Z+1	; 0x01
    273e:	a2 81       	ldd	r26, Z+2	; 0x02
    2740:	b3 81       	ldd	r27, Z+3	; 0x03
    2742:	82 17       	cp	r24, r18
    2744:	93 07       	cpc	r25, r19
    2746:	a4 07       	cpc	r26, r20
    2748:	b5 07       	cpc	r27, r21
    274a:	18 f4       	brcc	.+6      	; 0x2752 <main+0x8ca>
             ii = 2;
    274c:	82 e0       	ldi	r24, 0x02	; 2
    274e:	80 93 44 01 	sts	0x0144, r24
          }
       }

       if (ii == 0) {
    2752:	80 91 44 01 	lds	r24, 0x0144
    2756:	88 23       	and	r24, r24
    2758:	89 f4       	brne	.+34     	; 0x277c <main+0x8f4>
          lcd_data('1');
    275a:	81 e3       	ldi	r24, 0x31	; 49
    275c:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    2760:	82 e4       	ldi	r24, 0x42	; 66
    2762:	91 e0       	ldi	r25, 0x01	; 1
    2764:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
          lcd_data('3');
    2768:	83 e3       	ldi	r24, 0x33	; 51
    276a:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    276e:	82 e4       	ldi	r24, 0x42	; 66
    2770:	91 e0       	ldi	r25, 0x01	; 1
    2772:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
          lcd_data('2');
    2776:	82 e3       	ldi	r24, 0x32	; 50
    2778:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
       }
       if (ii == 1) {
    277c:	80 91 44 01 	lds	r24, 0x0144
    2780:	81 30       	cpi	r24, 0x01	; 1
    2782:	89 f4       	brne	.+34     	; 0x27a6 <main+0x91e>
          lcd_data('1');
    2784:	81 e3       	ldi	r24, 0x31	; 49
    2786:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    278a:	82 e4       	ldi	r24, 0x42	; 66
    278c:	91 e0       	ldi	r25, 0x01	; 1
    278e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
          lcd_data('2');
    2792:	82 e3       	ldi	r24, 0x32	; 50
    2794:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    2798:	82 e4       	ldi	r24, 0x42	; 66
    279a:	91 e0       	ldi	r25, 0x01	; 1
    279c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
          lcd_data('3');
    27a0:	83 e3       	ldi	r24, 0x33	; 51
    27a2:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
       }
       if (ii == 2) {
    27a6:	80 91 44 01 	lds	r24, 0x0144
    27aa:	82 30       	cpi	r24, 0x02	; 2
    27ac:	89 f4       	brne	.+34     	; 0x27d0 <main+0x948>
          lcd_data('2');
    27ae:	82 e3       	ldi	r24, 0x32	; 50
    27b0:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    27b4:	82 e4       	ldi	r24, 0x42	; 66
    27b6:	91 e0       	ldi	r25, 0x01	; 1
    27b8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
          lcd_data('1');
    27bc:	81 e3       	ldi	r24, 0x31	; 49
    27be:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    27c2:	82 e4       	ldi	r24, 0x42	; 66
    27c4:	91 e0       	ldi	r25, 0x01	; 1
    27c6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
          lcd_data('3');
    27ca:	83 e3       	ldi	r24, 0x33	; 51
    27cc:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
       }
    }
    lcd_line2(); //2. row 
    27d0:	80 ec       	ldi	r24, 0xC0	; 192
    27d2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
    if (ResistorsFound == 1) {
    27d6:	80 91 55 01 	lds	r24, 0x0155
    27da:	81 30       	cpi	r24, 0x01	; 1
    27dc:	11 f5       	brne	.+68     	; 0x2822 <main+0x99a>
       RvalOut(0);
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <RvalOut>
#if FLASHEND > 0x1fff
       if (resis[0].lx != 0) {
    27e4:	80 91 1c 01 	lds	r24, 0x011C
    27e8:	90 91 1d 01 	lds	r25, 0x011D
    27ec:	a0 91 1e 01 	lds	r26, 0x011E
    27f0:	b0 91 1f 01 	lds	r27, 0x011F
    27f4:	00 97       	sbiw	r24, 0x00	; 0
    27f6:	a1 05       	cpc	r26, r1
    27f8:	b1 05       	cpc	r27, r1
    27fa:	09 f4       	brne	.+2      	; 0x27fe <main+0x976>
    27fc:	86 c0       	rjmp	.+268    	; 0x290a <main+0xa82>
	  // resistor have also Inductance
          lcd_fix_string(Lis_str);	// "L="
    27fe:	82 e3       	ldi	r24, 0x32	; 50
    2800:	91 e0       	ldi	r25, 0x01	; 1
    2802:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
          DisplayValue(resis[0].lx,-5,'H',3);	// output inductance
    2806:	60 91 1c 01 	lds	r22, 0x011C
    280a:	70 91 1d 01 	lds	r23, 0x011D
    280e:	80 91 1e 01 	lds	r24, 0x011E
    2812:	90 91 1f 01 	lds	r25, 0x011F
    2816:	4b ef       	ldi	r20, 0xFB	; 251
    2818:	28 e4       	ldi	r18, 0x48	; 72
    281a:	03 e0       	ldi	r16, 0x03	; 3
    281c:	0e 94 bb 02 	call	0x576	; 0x576 <DisplayValue>
    2820:	74 c0       	rjmp	.+232    	; 0x290a <main+0xa82>
       }
#endif
    } else {
       // output resistor values in right order
       if (ii == 0) {
    2822:	80 91 44 01 	lds	r24, 0x0144
    2826:	88 23       	and	r24, r24
    2828:	31 f4       	brne	.+12     	; 0x2836 <main+0x9ae>
          RvalOut(1);
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <RvalOut>
          RvalOut(2);
    2830:	82 e0       	ldi	r24, 0x02	; 2
    2832:	0e 94 71 03 	call	0x6e2	; 0x6e2 <RvalOut>
       }
       if (ii == 1) {
    2836:	80 91 44 01 	lds	r24, 0x0144
    283a:	81 30       	cpi	r24, 0x01	; 1
    283c:	31 f4       	brne	.+12     	; 0x284a <main+0x9c2>
          RvalOut(0);
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	0e 94 71 03 	call	0x6e2	; 0x6e2 <RvalOut>
          RvalOut(2);
    2844:	82 e0       	ldi	r24, 0x02	; 2
    2846:	0e 94 71 03 	call	0x6e2	; 0x6e2 <RvalOut>
       }
       if (ii == 2) {
    284a:	80 91 44 01 	lds	r24, 0x0144
    284e:	82 30       	cpi	r24, 0x02	; 2
    2850:	09 f0       	breq	.+2      	; 0x2854 <main+0x9cc>
    2852:	5b c0       	rjmp	.+182    	; 0x290a <main+0xa82>
          RvalOut(0);
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	0e 94 71 03 	call	0x6e2	; 0x6e2 <RvalOut>
          RvalOut(1);
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <RvalOut>
    2860:	54 c0       	rjmp	.+168    	; 0x290a <main+0xa82>
    goto end;

  } // end (PartFound == PART_RESISTOR)

//capacity measurement is wanted
  else if(PartFound == PART_CAPACITOR) {
    2862:	87 30       	cpi	r24, 0x07	; 7
    2864:	01 f5       	brne	.+64     	; 0x28a6 <main+0xa1e>
//     lcd_fix_string(Capacitor);
     lcd_testpin(cap.ca);		//Pin number 1
    2866:	80 91 66 01 	lds	r24, 0x0166
    286a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
     lcd_fix_string(CapZeich);		// capacitor sign
    286e:	8d e1       	ldi	r24, 0x1D	; 29
    2870:	91 e0       	ldi	r25, 0x01	; 1
    2872:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
//#if FLASHEND > 0x1fff
//     lcd_fix_string(Resistor_str);	// -[=]-
//#endif
     lcd_testpin(cap.cb);		//Pin number 2
    2876:	80 91 67 01 	lds	r24, 0x0167
    287a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
     lcd_line2(); 			//2. row 
    287e:	80 ec       	ldi	r24, 0xC0	; 192
    2880:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     DisplayValue(cap.cval_max,cap.cpre_max,'F',4);
    2884:	60 91 5c 01 	lds	r22, 0x015C
    2888:	70 91 5d 01 	lds	r23, 0x015D
    288c:	80 91 5e 01 	lds	r24, 0x015E
    2890:	90 91 5f 01 	lds	r25, 0x015F
    2894:	40 91 69 01 	lds	r20, 0x0169
    2898:	26 e4       	ldi	r18, 0x46	; 70
    289a:	04 e0       	ldi	r16, 0x04	; 4
    289c:	0e 94 bb 02 	call	0x576	; 0x576 <DisplayValue>
#if FLASHEND > 0x1fff
     GetESR();				// get ESR of capacitor
    28a0:	0e 94 18 1b 	call	0x3630	; 0x3630 <GetESR>
#endif
     goto end;
    28a4:	32 c0       	rjmp	.+100    	; 0x290a <main+0xa82>
  }
  if(NumOfDiodes == 0) { //no diodes are found
    28a6:	80 91 05 01 	lds	r24, 0x0105
    28aa:	88 23       	and	r24, r24
    28ac:	71 f4       	brne	.+28     	; 0x28ca <main+0xa42>
     lcd_fix_string(TestFailed1); 	//"Kein,unbek. oder"
    28ae:	87 eb       	ldi	r24, 0xB7	; 183
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
     lcd_line2(); //2. row 
    28b6:	80 ec       	ldi	r24, 0xC0	; 192
    28b8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     lcd_fix_string(TestFailed2); 	//"defektes "
    28bc:	83 e8       	ldi	r24, 0x83	; 131
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
     lcd_fix_string(Bauteil);		//"Bauteil"
    28c4:	8c e8       	ldi	r24, 0x8C	; 140
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	16 c0       	rjmp	.+44     	; 0x28f6 <main+0xa6e>
  } else {
     lcd_fix_string(Bauteil);		//"Bauteil"
    28ca:	8c e8       	ldi	r24, 0x8C	; 140
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
     lcd_fix_string(Unknown); 		//" unbek."
    28d2:	8e ea       	ldi	r24, 0xAE	; 174
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
     lcd_line2(); //2. row 
    28da:	80 ec       	ldi	r24, 0xC0	; 192
    28dc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     lcd_fix_string(OrBroken); 		//"oder defekt "
    28e0:	87 ec       	ldi	r24, 0xC7	; 199
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
     lcd_data(NumOfDiodes + '0');
    28e8:	80 91 05 01 	lds	r24, 0x0105
    28ec:	80 5d       	subi	r24, 0xD0	; 208
    28ee:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
     lcd_fix_string(AnKat);		//"->|-"
    28f2:	85 e3       	ldi	r24, 0x35	; 53
    28f4:	91 e0       	ldi	r25, 0x01	; 1
    28f6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
  }
  empty_count++;
    28fa:	80 91 43 01 	lds	r24, 0x0143
    28fe:	8f 5f       	subi	r24, 0xFF	; 255
    2900:	80 93 43 01 	sts	0x0143, r24
  mess_count = 0;
    2904:	10 92 0b 01 	sts	0x010B, r1
  goto end2;
    2908:	07 c0       	rjmp	.+14     	; 0x2918 <main+0xa90>
  lcd_testpin(trans.b);
  lcd_testpin(trans.c);
  lcd_testpin(trans.e);
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 end:
  empty_count = 0;		// reset counter, if part is found
    290a:	10 92 43 01 	sts	0x0143, r1
  mess_count++;			// count measurements
    290e:	80 91 0b 01 	lds	r24, 0x010B
    2912:	8f 5f       	subi	r24, 0xFF	; 255
    2914:	80 93 0b 01 	sts	0x010B, r24

 end2:
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
    2918:	4f 9b       	sbis	0x09, 7	; 9
    291a:	fe cf       	rjmp	.-4      	; 0x2918 <main+0xa90>
  wait_about200ms();
    291c:	88 e2       	ldi	r24, 0x28	; 40
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	0e 94 b7 03 	call	0x76e	; 0x76e <sleep_5ms>
// wait 14 seconds or 5 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage+=5) {
    2924:	10 92 57 01 	sts	0x0157, r1
    2928:	10 92 56 01 	sts	0x0156, r1
    292c:	10 c0       	rjmp	.+32     	; 0x294e <main+0xac6>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    292e:	4f 9b       	sbis	0x09, 7	; 9
    2930:	06 cb       	rjmp	.-2548   	; 0x1f3e <main+0xb6>
        // If the key is pressed again... 
        // goto start of measurement 
        goto start;
     }
     wdt_reset();
    2932:	a8 95       	wdr
     wait_about10ms();
    2934:	82 e0       	ldi	r24, 0x02	; 2
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	0e 94 b7 03 	call	0x76e	; 0x76e <sleep_5ms>

 end2:
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
  wait_about200ms();
// wait 14 seconds or 5 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage+=5) {
    293c:	80 91 56 01 	lds	r24, 0x0156
    2940:	90 91 57 01 	lds	r25, 0x0157
    2944:	05 96       	adiw	r24, 0x05	; 5
    2946:	90 93 57 01 	sts	0x0157, r25
    294a:	80 93 56 01 	sts	0x0156, r24
    294e:	80 91 56 01 	lds	r24, 0x0156
    2952:	90 91 57 01 	lds	r25, 0x0157
    2956:	26 e3       	ldi	r18, 0x36	; 54
    2958:	80 3b       	cpi	r24, 0xB0	; 176
    295a:	92 07       	cpc	r25, r18
    295c:	40 f3       	brcs	.-48     	; 0x292e <main+0xaa6>
  if ((empty_count < POWER_OFF) && (mess_count < POWER2_OFF)) {
     goto start;			// repeat measurement POWER_OFF times
  }
 #endif
  // only one Measurement requested, shut off
  wdt_disable();			//Watchdog off
    295e:	88 e1       	ldi	r24, 0x18	; 24
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	f8 94       	cli
    2964:	80 93 60 00 	sts	0x0060, r24
    2968:	10 92 60 00 	sts	0x0060, r1
    296c:	0f be       	out	0x3f, r0	; 63
  ON_PORT &= ~(1<<ON_PIN);		//switch off power
    296e:	5e 98       	cbi	0x0b, 6	; 11
  ON_DDR = (1<<ON_PIN);			//switch to GND
    2970:	80 e4       	ldi	r24, 0x40	; 64
    2972:	8a b9       	out	0x0a, r24	; 10
  //never ending loop 
  while(1) {
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    2974:	4f 99       	sbic	0x09, 7	; 9
    2976:	fe cf       	rjmp	.-4      	; 0x2974 <main+0xaec>
    2978:	e2 ca       	rjmp	.-2620   	; 0x1f3e <main+0xb6>
  }
#else
  goto start;	// POWER_OFF not selected, repeat measurement
#endif
  return 0;
}   // end main
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	df 91       	pop	r29
    2980:	cf 91       	pop	r28
    2982:	1f 91       	pop	r17
    2984:	0f 91       	pop	r16
    2986:	08 95       	ret

00002988 <uart_putc>:
    2988:	2f 93       	push	r18
    298a:	5f b7       	in	r21, 0x3f	; 63
    298c:	2f 93       	push	r18
    298e:	2a e0       	ldi	r18, 0x0A	; 10
    2990:	80 95       	com	r24
    2992:	08 94       	sec

00002994 <putchar0>:
    2994:	10 f4       	brcc	.+4      	; 0x299a <putchar1>
    2996:	43 98       	cbi	0x08, 3	; 8
    2998:	02 c0       	rjmp	.+4      	; 0x299e <putchar2>

0000299a <putchar1>:
    299a:	43 9a       	sbi	0x08, 3	; 8
	...

0000299e <putchar2>:
    299e:	08 d0       	rcall	.+16     	; 0x29b0 <UART_delay>
    29a0:	07 d0       	rcall	.+14     	; 0x29b0 <UART_delay>
    29a2:	86 95       	lsr	r24
    29a4:	2a 95       	dec	r18
    29a6:	b1 f7       	brne	.-20     	; 0x2994 <putchar0>
    29a8:	2f 91       	pop	r18
    29aa:	5f bf       	out	0x3f, r21	; 63
    29ac:	2f 91       	pop	r18
    29ae:	08 95       	ret

000029b0 <UART_delay>:
    29b0:	5f 93       	push	r21
    29b2:	5f b7       	in	r21, 0x3f	; 63
    29b4:	5f 93       	push	r21
    29b6:	00 00       	nop
    29b8:	5e e3       	ldi	r21, 0x3E	; 62

000029ba <UART_delay1>:
    29ba:	5a 95       	dec	r21
    29bc:	f1 f7       	brne	.-4      	; 0x29ba <UART_delay1>
    29be:	00 00       	nop
    29c0:	5f 91       	pop	r21
    29c2:	5f bf       	out	0x3f, r21	; 63
    29c4:	5f 91       	pop	r21
    29c6:	08 95       	ret

000029c8 <wait5s>:
    29c8:	03 d0       	rcall	.+6      	; 0x29d0 <wait1000ms>

000029ca <wait4s>:
    29ca:	02 d0       	rcall	.+4      	; 0x29d0 <wait1000ms>

000029cc <wait3s>:
    29cc:	01 d0       	rcall	.+2      	; 0x29d0 <wait1000ms>

000029ce <wait2s>:
    29ce:	00 d0       	rcall	.+0      	; 0x29d0 <wait1000ms>

000029d0 <wait1000ms>:
    29d0:	00 d0       	rcall	.+0      	; 0x29d2 <wait500ms>

000029d2 <wait500ms>:
    29d2:	03 d0       	rcall	.+6      	; 0x29da <wait100ms>

000029d4 <wait400ms>:
    29d4:	02 d0       	rcall	.+4      	; 0x29da <wait100ms>

000029d6 <wait300ms>:
    29d6:	01 d0       	rcall	.+2      	; 0x29da <wait100ms>

000029d8 <wait200ms>:
    29d8:	00 d0       	rcall	.+0      	; 0x29da <wait100ms>

000029da <wait100ms>:
    29da:	a8 95       	wdr
    29dc:	00 d0       	rcall	.+0      	; 0x29de <wait50ms>

000029de <wait50ms>:
    29de:	03 d0       	rcall	.+6      	; 0x29e6 <wait10ms>

000029e0 <wait40ms>:
    29e0:	02 d0       	rcall	.+4      	; 0x29e6 <wait10ms>

000029e2 <wait30ms>:
    29e2:	01 d0       	rcall	.+2      	; 0x29e6 <wait10ms>

000029e4 <wait20ms>:
    29e4:	00 d0       	rcall	.+0      	; 0x29e6 <wait10ms>

000029e6 <wait10ms>:
    29e6:	00 d0       	rcall	.+0      	; 0x29e8 <wait5ms>

000029e8 <wait5ms>:
    29e8:	03 d0       	rcall	.+6      	; 0x29f0 <wait1ms>

000029ea <wait4ms>:
    29ea:	02 d0       	rcall	.+4      	; 0x29f0 <wait1ms>

000029ec <wait3ms>:
    29ec:	01 d0       	rcall	.+2      	; 0x29f0 <wait1ms>

000029ee <wait2ms>:
    29ee:	00 d0       	rcall	.+0      	; 0x29f0 <wait1ms>

000029f0 <wait1ms>:
    29f0:	00 d0       	rcall	.+0      	; 0x29f2 <wait500us>

000029f2 <wait500us>:
    29f2:	03 d0       	rcall	.+6      	; 0x29fa <wait100us>

000029f4 <wait400us>:
    29f4:	02 d0       	rcall	.+4      	; 0x29fa <wait100us>

000029f6 <wait300us>:
    29f6:	01 d0       	rcall	.+2      	; 0x29fa <wait100us>

000029f8 <wait200us>:
    29f8:	00 d0       	rcall	.+0      	; 0x29fa <wait100us>

000029fa <wait100us>:
    29fa:	00 d0       	rcall	.+0      	; 0x29fc <wait50us>

000029fc <wait50us>:
    29fc:	03 d0       	rcall	.+6      	; 0x2a04 <wait10us>

000029fe <wait40us>:
    29fe:	02 d0       	rcall	.+4      	; 0x2a04 <wait10us>

00002a00 <wait30us>:
    2a00:	01 d0       	rcall	.+2      	; 0x2a04 <wait10us>

00002a02 <wait20us>:
    2a02:	00 d0       	rcall	.+0      	; 0x2a04 <wait10us>

00002a04 <wait10us>:
    2a04:	00 d0       	rcall	.+0      	; 0x2a06 <wait5us>

00002a06 <wait5us>:
    2a06:	03 d0       	rcall	.+6      	; 0x2a0e <wait1us>

00002a08 <wait4us>:
    2a08:	02 d0       	rcall	.+4      	; 0x2a0e <wait1us>

00002a0a <wait3us>:
    2a0a:	01 d0       	rcall	.+2      	; 0x2a0e <wait1us>

00002a0c <wait2us>:
    2a0c:	00 d0       	rcall	.+0      	; 0x2a0e <wait1us>

00002a0e <wait1us>:
    2a0e:	00 00       	nop
    2a10:	08 95       	ret

00002a12 <getRLmultip>:
  R_DDR = 0;			// switch all resistor ports to input
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
  return;
 } // end ReadCapacity()

unsigned int getRLmultip(unsigned int cvolt) {
    2a12:	ff 92       	push	r15
    2a14:	0f 93       	push	r16
    2a16:	1f 93       	push	r17
    2a18:	cf 93       	push	r28
    2a1a:	df 93       	push	r29

  unsigned int uvolt;
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;
  if (cvolt >= RL_Tab_Beginn) {
    2a1c:	21 e0       	ldi	r18, 0x01	; 1
    2a1e:	8c 32       	cpi	r24, 0x2C	; 44
    2a20:	92 07       	cpc	r25, r18
    2a22:	18 f0       	brcs	.+6      	; 0x2a2a <getRLmultip+0x18>
     uvolt = cvolt - RL_Tab_Beginn;
    2a24:	8c 52       	subi	r24, 0x2C	; 44
    2a26:	91 40       	sbci	r25, 0x01	; 1
    2a28:	02 c0       	rjmp	.+4      	; 0x2a2e <getRLmultip+0x1c>
  } else {
     uvolt = 0;			// limit to begin of table
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = uvolt / RL_Tab_Abstand;
    2a2e:	69 e1       	ldi	r22, 0x19	; 25
    2a30:	70 e0       	ldi	r23, 0x00	; 0
    2a32:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <__udivmodhi4>
  tabres = uvolt % RL_Tab_Abstand;
    2a36:	f8 2e       	mov	r15, r24
  tabres = RL_Tab_Abstand - tabres;
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
    2a38:	6d 32       	cpi	r22, 0x2D	; 45
    2a3a:	08 f0       	brcs	.+2      	; 0x2a3e <getRLmultip+0x2c>
    2a3c:	6c e2       	ldi	r22, 0x2C	; 44
    2a3e:	c6 2f       	mov	r28, r22
    2a40:	d0 e0       	ldi	r29, 0x00	; 0
    2a42:	ce 01       	movw	r24, r28
    2a44:	88 0f       	add	r24, r24
    2a46:	99 1f       	adc	r25, r25
    2a48:	80 50       	subi	r24, 0x00	; 0
    2a4a:	90 40       	sbci	r25, 0x00	; 0
    2a4c:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <__eerd_word_m168>
    2a50:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RLtab[tabind+1]);
    2a52:	ce 01       	movw	r24, r28
    2a54:	88 0f       	add	r24, r24
    2a56:	99 1f       	adc	r25, r25
    2a58:	8e 5f       	subi	r24, 0xFE	; 254
    2a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a5c:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <__eerd_word_m168>
    2a60:	9c 01       	movw	r18, r24
  } else {
     uvolt = 0;			// limit to begin of table
  }
  tabind = uvolt / RL_Tab_Abstand;
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
    2a62:	49 e1       	ldi	r20, 0x19	; 25
    2a64:	4f 19       	sub	r20, r15
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
    2a66:	50 e0       	ldi	r21, 0x00	; 0
    2a68:	08 1b       	sub	r16, r24
    2a6a:	19 0b       	sbc	r17, r25
    2a6c:	40 9f       	mul	r20, r16
    2a6e:	c0 01       	movw	r24, r0
    2a70:	41 9f       	mul	r20, r17
    2a72:	90 0d       	add	r25, r0
    2a74:	50 9f       	mul	r21, r16
    2a76:	90 0d       	add	r25, r0
    2a78:	11 24       	eor	r1, r1
    2a7a:	0c 96       	adiw	r24, 0x0c	; 12
    2a7c:	69 e1       	ldi	r22, 0x19	; 25
    2a7e:	70 e0       	ldi	r23, 0x00	; 0
    2a80:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <__udivmodhi4>
    2a84:	62 0f       	add	r22, r18
    2a86:	73 1f       	adc	r23, r19
}
    2a88:	cb 01       	movw	r24, r22
    2a8a:	df 91       	pop	r29
    2a8c:	cf 91       	pop	r28
    2a8e:	1f 91       	pop	r17
    2a90:	0f 91       	pop	r16
    2a92:	ff 90       	pop	r15
    2a94:	08 95       	ret

00002a96 <Scale_C_with_vcc>:

void Scale_C_with_vcc(void) {
    2a96:	8f 92       	push	r8
    2a98:	9f 92       	push	r9
    2a9a:	af 92       	push	r10
    2a9c:	bf 92       	push	r11
    2a9e:	df 92       	push	r13
    2aa0:	ef 92       	push	r14
    2aa2:	ff 92       	push	r15
    2aa4:	0f 93       	push	r16
    2aa6:	1f 93       	push	r17
    2aa8:	e0 90 58 01 	lds	r14, 0x0158
    2aac:	f0 90 59 01 	lds	r15, 0x0159
    2ab0:	00 91 5a 01 	lds	r16, 0x015A
    2ab4:	10 91 5b 01 	lds	r17, 0x015B
    2ab8:	d0 90 68 01 	lds	r13, 0x0168
   while (cap.cval > 100000) {
      cap.cval /= 10;
    2abc:	4a e0       	ldi	r20, 0x0A	; 10
    2abe:	84 2e       	mov	r8, r20
    2ac0:	91 2c       	mov	r9, r1
    2ac2:	a1 2c       	mov	r10, r1
    2ac4:	b1 2c       	mov	r11, r1
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    2ac6:	08 c0       	rjmp	.+16     	; 0x2ad8 <Scale_C_with_vcc+0x42>
      cap.cval /= 10;
    2ac8:	c8 01       	movw	r24, r16
    2aca:	b7 01       	movw	r22, r14
    2acc:	a5 01       	movw	r20, r10
    2ace:	94 01       	movw	r18, r8
    2ad0:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
    2ad4:	79 01       	movw	r14, r18
    2ad6:	8a 01       	movw	r16, r20
    2ad8:	8d 2d       	mov	r24, r13
    2ada:	d3 94       	inc	r13
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    2adc:	91 ea       	ldi	r25, 0xA1	; 161
    2ade:	e9 16       	cp	r14, r25
    2ae0:	96 e8       	ldi	r25, 0x86	; 134
    2ae2:	f9 06       	cpc	r15, r25
    2ae4:	91 e0       	ldi	r25, 0x01	; 1
    2ae6:	09 07       	cpc	r16, r25
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	19 07       	cpc	r17, r25
    2aec:	68 f7       	brcc	.-38     	; 0x2ac8 <Scale_C_with_vcc+0x32>
    2aee:	80 93 68 01 	sts	0x0168, r24
      cap.cval /= 10;
      cap.cpre ++;			// prevent overflow
   }
   cap.cval *= ADCconfig.U_AVCC;	// scale with measured voltage
    2af2:	20 91 3d 01 	lds	r18, 0x013D
    2af6:	30 91 3e 01 	lds	r19, 0x013E
    2afa:	40 e0       	ldi	r20, 0x00	; 0
    2afc:	50 e0       	ldi	r21, 0x00	; 0
    2afe:	c8 01       	movw	r24, r16
    2b00:	b7 01       	movw	r22, r14
    2b02:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
    2b06:	28 e8       	ldi	r18, 0x88	; 136
    2b08:	33 e1       	ldi	r19, 0x13	; 19
    2b0a:	40 e0       	ldi	r20, 0x00	; 0
    2b0c:	50 e0       	ldi	r21, 0x00	; 0
    2b0e:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
    2b12:	20 93 58 01 	sts	0x0158, r18
    2b16:	30 93 59 01 	sts	0x0159, r19
    2b1a:	40 93 5a 01 	sts	0x015A, r20
    2b1e:	50 93 5b 01 	sts	0x015B, r21
}
    2b22:	1f 91       	pop	r17
    2b24:	0f 91       	pop	r16
    2b26:	ff 90       	pop	r15
    2b28:	ef 90       	pop	r14
    2b2a:	df 90       	pop	r13
    2b2c:	bf 90       	pop	r11
    2b2e:	af 90       	pop	r10
    2b30:	9f 90       	pop	r9
    2b32:	8f 90       	pop	r8
    2b34:	08 95       	ret

00002b36 <ReadCapacity>:
#include "config.h"
#include "Transistortester.h"


//=================================================================
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    2b36:	af 92       	push	r10
    2b38:	bf 92       	push	r11
    2b3a:	cf 92       	push	r12
    2b3c:	df 92       	push	r13
    2b3e:	ef 92       	push	r14
    2b40:	ff 92       	push	r15
    2b42:	0f 93       	push	r16
    2b44:	1f 93       	push	r17
    2b46:	cf 93       	push	r28
    2b48:	df 93       	push	r29
    2b4a:	18 2f       	mov	r17, r24
    2b4c:	06 2f       	mov	r16, r22
  uint8_t HiPinR_L, HiPinR_H;
  uint8_t LoADC;
  uint8_t ii;

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
    2b4e:	88 0f       	add	r24, r24
    2b50:	81 0f       	add	r24, r17
    2b52:	86 0f       	add	r24, r22
    2b54:	81 50       	subi	r24, 0x01	; 1
    2b56:	80 93 45 01 	sts	0x0145, r24
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2b5a:	86 2f       	mov	r24, r22
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	88 55       	subi	r24, 0x58	; 88
    2b60:	9e 4f       	sbci	r25, 0xFE	; 254
    2b62:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__eerd_byte_m168>
    2b66:	b8 2e       	mov	r11, r24
  HiPinR_L = MEM_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
    2b68:	21 2f       	mov	r18, r17
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	c9 01       	movw	r24, r18
    2b6e:	8b 55       	subi	r24, 0x5B	; 91
    2b70:	9e 4f       	sbci	r25, 0xFE	; 254
    2b72:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__eerd_byte_m168>
    2b76:	a8 2e       	mov	r10, r24
//     DisplayValue(cap.cval,cap.cpre,'F',3);
//     wait_about2s();
//#endif
//     return;	//We have found a capacitor already
//  }
  if(PartFound == PART_RESISTOR) {
    2b78:	80 91 07 01 	lds	r24, 0x0107
    2b7c:	86 30       	cpi	r24, 0x06	; 6
    2b7e:	09 f4       	brne	.+2      	; 0x2b82 <ReadCapacity+0x4c>
    2b80:	3a c2       	rjmp	.+1140   	; 0x2ff6 <ReadCapacity+0x4c0>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    2b82:	90 91 05 01 	lds	r25, 0x0105
    2b86:	ec e6       	ldi	r30, 0x6C	; 108
    2b88:	f1 e0       	ldi	r31, 0x01	; 1
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	0f c0       	rjmp	.+30     	; 0x2bac <ReadCapacity+0x76>
     if ((diodes[ii].Cathode == LowPin) && (diodes[ii].Anode == HighPin) && (diodes[ii].Voltage < 1500)) {
    2b8e:	21 81       	ldd	r18, Z+1	; 0x01
    2b90:	20 17       	cp	r18, r16
    2b92:	51 f4       	brne	.+20     	; 0x2ba8 <ReadCapacity+0x72>
    2b94:	20 81       	ld	r18, Z
    2b96:	21 17       	cp	r18, r17
    2b98:	39 f4       	brne	.+14     	; 0x2ba8 <ReadCapacity+0x72>
    2b9a:	22 81       	ldd	r18, Z+2	; 0x02
    2b9c:	33 81       	ldd	r19, Z+3	; 0x03
    2b9e:	45 e0       	ldi	r20, 0x05	; 5
    2ba0:	2c 3d       	cpi	r18, 0xDC	; 220
    2ba2:	34 07       	cpc	r19, r20
    2ba4:	08 f4       	brcc	.+2      	; 0x2ba8 <ReadCapacity+0x72>
    2ba6:	27 c2       	rjmp	.+1102   	; 0x2ff6 <ReadCapacity+0x4c0>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    2ba8:	8f 5f       	subi	r24, 0xFF	; 255
    2baa:	34 96       	adiw	r30, 0x04	; 4
    2bac:	89 17       	cp	r24, r25
    2bae:	78 f3       	brcs	.-34     	; 0x2b8e <ReadCapacity+0x58>

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2bb0:	88 e0       	ldi	r24, 0x08	; 8
    2bb2:	b8 2a       	or	r11, r24
        return;
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
    2bb4:	10 92 65 01 	sts	0x0165, r1
    2bb8:	10 92 64 01 	sts	0x0164, r1
#endif
  cap.cval = 0;				// set capacity value to zero
    2bbc:	10 92 58 01 	sts	0x0158, r1
    2bc0:	10 92 59 01 	sts	0x0159, r1
    2bc4:	10 92 5a 01 	sts	0x015A, r1
    2bc8:	10 92 5b 01 	sts	0x015B, r1
  cap.cpre = -12;			//default unit is pF
    2bcc:	84 ef       	ldi	r24, 0xF4	; 244
    2bce:	80 93 68 01 	sts	0x0168, r24
  EntladePins();			// discharge capacitor
    2bd2:	0e 94 c8 01 	call	0x390	; 0x390 <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    2bd6:	88 e0       	ldi	r24, 0x08	; 8
    2bd8:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    2bda:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    2bdc:	b7 b8       	out	0x07, r11	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    2bde:	a4 b8       	out	0x04, r10	; 4
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    2be0:	81 2f       	mov	r24, r17
    2be2:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
    2be6:	6c 01       	movw	r12, r24
// ******** should adcv[0] be measured without current???
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2be8:	c0 e0       	ldi	r28, 0x00	; 0
    2bea:	d0 e0       	ldi	r29, 0x00	; 0
     ChargePin10ms(HiPinR_L,1);		//HighPin with R_L 10ms to VCC ,then currentless
    2bec:	8a 2d       	mov	r24, r10
    2bee:	61 e0       	ldi	r22, 0x01	; 1
    2bf0:	0e 94 a7 01 	call	0x34e	; 0x34e <ChargePin10ms>
     wait500us();			//wait a little time
    2bf4:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <wait500us>
     wdt_reset();
    2bf8:	a8 95       	wdr
     // read voltage without current, is already charged enough?
     adcv[2] = ReadADC(HighPin);
    2bfa:	81 2f       	mov	r24, r17
    2bfc:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
    2c00:	7c 01       	movw	r14, r24
     if (adcv[2] > adcv[0]) {
    2c02:	c8 16       	cp	r12, r24
    2c04:	d9 06       	cpc	r13, r25
    2c06:	18 f4       	brcc	.+6      	; 0x2c0e <ReadCapacity+0xd8>
        adcv[2] -= adcv[0];		//difference to beginning voltage
    2c08:	ec 18       	sub	r14, r12
    2c0a:	fd 08       	sbc	r15, r13
    2c0c:	02 c0       	rjmp	.+4      	; 0x2c12 <ReadCapacity+0xdc>
     } else {
        adcv[2] = 0;			// voltage is lower or same as beginning voltage
    2c0e:	ee 24       	eor	r14, r14
    2c10:	ff 24       	eor	r15, r15
     }
     if ((ovcnt16 == 126) && (adcv[2] < 75)) {
    2c12:	ce 37       	cpi	r28, 0x7E	; 126
    2c14:	d1 05       	cpc	r29, r1
    2c16:	29 f4       	brne	.+10     	; 0x2c22 <ReadCapacity+0xec>
    2c18:	9b e4       	ldi	r25, 0x4B	; 75
    2c1a:	e9 16       	cp	r14, r25
    2c1c:	f1 04       	cpc	r15, r1
    2c1e:	08 f4       	brcc	.+2      	; 0x2c22 <ReadCapacity+0xec>
    2c20:	e5 c1       	rjmp	.+970    	; 0x2fec <ReadCapacity+0x4b6>
        // 300mV can not be reached well-timed 
        break;		// don't try to load any more
     }
     if (adcv[2] > 300) {
    2c22:	2d e2       	ldi	r18, 0x2D	; 45
    2c24:	e2 16       	cp	r14, r18
    2c26:	21 e0       	ldi	r18, 0x01	; 1
    2c28:	f2 06       	cpc	r15, r18
    2c2a:	18 f0       	brcs	.+6      	; 0x2c32 <ReadCapacity+0xfc>
#if DebugOut == 10
  DisplayValue(ovcnt16,0,' ',4);
  DisplayValue(adcv[2],-3,'V',4);
#endif
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    2c2c:	20 97       	sbiw	r28, 0x00	; 0
    2c2e:	39 f0       	breq	.+14     	; 0x2c3e <ReadCapacity+0x108>
    2c30:	0c c0       	rjmp	.+24     	; 0x2c4a <ReadCapacity+0x114>
  R_PORT = 0;				// switch R-Port to GND
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2c32:	21 96       	adiw	r28, 0x01	; 1
    2c34:	31 e0       	ldi	r19, 0x01	; 1
    2c36:	c4 3f       	cpi	r28, 0xF4	; 244
    2c38:	d3 07       	cpc	r29, r19
    2c3a:	c1 f6       	brne	.-80     	; 0x2bec <ReadCapacity+0xb6>
    2c3c:	d7 c1       	rjmp	.+942    	; 0x2fec <ReadCapacity+0x4b6>
#if DebugOut == 10
  DisplayValue(ovcnt16,0,' ',4);
  DisplayValue(adcv[2],-3,'V',4);
#endif
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    2c3e:	45 e1       	ldi	r20, 0x15	; 21
    2c40:	e4 16       	cp	r14, r20
    2c42:	45 e0       	ldi	r20, 0x05	; 5
    2c44:	f4 06       	cpc	r15, r20
    2c46:	08 f0       	brcs	.+2      	; 0x2c4a <ReadCapacity+0x114>
    2c48:	6d c0       	rjmp	.+218    	; 0x2d24 <ReadCapacity+0x1ee>
     goto messe_mit_rh;		// Voltage of more than 1300mV is reached in one pulse, to fast loaded
  }
  // Capacity is more than about 50µF
  cap.cpre = -9;		// switch units to nF 
    2c4a:	87 ef       	ldi	r24, 0xF7	; 247
    2c4c:	80 93 68 01 	sts	0x0168, r24
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the same time which is required for loading
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2c50:	aa 24       	eor	r10, r10
    2c52:	bb 24       	eor	r11, r11
     wait5ms();
    2c54:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <wait5ms>
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
    2c58:	81 2f       	mov	r24, r17
    2c5a:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
     wdt_reset();
    2c5e:	a8 95       	wdr
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the same time which is required for loading
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2c60:	08 94       	sec
    2c62:	a1 1c       	adc	r10, r1
    2c64:	b1 1c       	adc	r11, r1
    2c66:	ca 15       	cp	r28, r10
    2c68:	db 05       	cpc	r29, r11
    2c6a:	a0 f7       	brcc	.-24     	; 0x2c54 <ReadCapacity+0x11e>
     wait5ms();
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
    2c6c:	c8 16       	cp	r12, r24
    2c6e:	d9 06       	cpc	r13, r25
    2c70:	30 f4       	brcc	.+12     	; 0x2c7e <ReadCapacity+0x148>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    2c72:	8c 19       	sub	r24, r12
    2c74:	9d 09       	sbc	r25, r13
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    2c76:	8e 15       	cp	r24, r14
    2c78:	9f 05       	cpc	r25, r15
    2c7a:	60 f4       	brcc	.+24     	; 0x2c94 <ReadCapacity+0x15e>
    2c7c:	02 c0       	rjmp	.+4      	; 0x2c82 <ReadCapacity+0x14c>
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
    2c82:	97 01       	movw	r18, r14
    2c84:	28 1b       	sub	r18, r24
    2c86:	39 0b       	sbc	r19, r25
    2c88:	c9 01       	movw	r24, r18
  } else {
     adcv[3] = 0;			// no lost voltage
  }
  if (adcv[3] > 100) {
    2c8a:	25 36       	cpi	r18, 0x65	; 101
    2c8c:	31 05       	cpc	r19, r1
    2c8e:	08 f0       	brcs	.+2      	; 0x2c92 <ReadCapacity+0x15c>
    2c90:	ad c1       	rjmp	.+858    	; 0x2fec <ReadCapacity+0x4b6>
    2c92:	02 c0       	rjmp	.+4      	; 0x2c98 <ReadCapacity+0x162>
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
  } else {
     adcv[3] = 0;			// no lost voltage
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	90 e0       	ldi	r25, 0x00	; 0
     lcd_space();
     wait_about1s();
 #endif
     goto keinC;			// capacitor does not keep the voltage about 5ms
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
    2c98:	21 96       	adiw	r28, 0x01	; 1
    2c9a:	5e 01       	movw	r10, r28
    2c9c:	cc 24       	eor	r12, r12
    2c9e:	dd 24       	eor	r13, r13
    2ca0:	a0 92 60 01 	sts	0x0160, r10
    2ca4:	b0 92 61 01 	sts	0x0161, r11
    2ca8:	c0 92 62 01 	sts	0x0162, r12
    2cac:	d0 92 63 01 	sts	0x0163, r13
  // compute factor with load voltage + lost voltage during the voltage load time
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]+adcv[3]);	// get factor to convert time to capacity from table
    2cb0:	8e 0d       	add	r24, r14
    2cb2:	9f 1d       	adc	r25, r15
    2cb4:	0e 94 09 15 	call	0x2a12	; 0x2a12 <getRLmultip>
    2cb8:	bc 01       	movw	r22, r24
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	a6 01       	movw	r20, r12
    2cc0:	95 01       	movw	r18, r10
    2cc2:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    2cc6:	60 93 60 01 	sts	0x0160, r22
    2cca:	70 93 61 01 	sts	0x0161, r23
    2cce:	80 93 62 01 	sts	0x0162, r24
    2cd2:	90 93 63 01 	sts	0x0163, r25
#endif
   cap.cval = cap.cval_uncorrected.dw;	// set result to uncorrected
    2cd6:	60 93 58 01 	sts	0x0158, r22
    2cda:	70 93 59 01 	sts	0x0159, r23
    2cde:	80 93 5a 01 	sts	0x015A, r24
    2ce2:	90 93 5b 01 	sts	0x015B, r25
   Scale_C_with_vcc();
    2ce6:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <Scale_C_with_vcc>
   // cap.cval for this type is at least 40000nF, so the last digit will be never shown
   cap.cval *= (1000 - C_H_KORR);	// correct with C_H_KORR with 0.1% resolution, but prevent overflow
    2cea:	60 91 58 01 	lds	r22, 0x0158
    2cee:	70 91 59 01 	lds	r23, 0x0159
    2cf2:	80 91 5a 01 	lds	r24, 0x015A
    2cf6:	90 91 5b 01 	lds	r25, 0x015B
    2cfa:	28 ee       	ldi	r18, 0xE8	; 232
    2cfc:	33 e0       	ldi	r19, 0x03	; 3
    2cfe:	40 e0       	ldi	r20, 0x00	; 0
    2d00:	50 e0       	ldi	r21, 0x00	; 0
    2d02:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
   cap.cval /= 100;
    2d06:	24 e6       	ldi	r18, 0x64	; 100
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	40 e0       	ldi	r20, 0x00	; 0
    2d0c:	50 e0       	ldi	r21, 0x00	; 0
    2d0e:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
    2d12:	20 93 58 01 	sts	0x0158, r18
    2d16:	30 93 59 01 	sts	0x0159, r19
    2d1a:	40 93 5a 01 	sts	0x015A, r20
    2d1e:	50 93 5b 01 	sts	0x015B, r21
   DisplayValue(cap.cval,cap.cpre,'F',4);
   lcd_space();
   lcd_string(utoa(ovcnt16,outval,10));
   wait_about3s();
#endif
   goto checkDiodes;
    2d22:	27 c1       	rjmp	.+590    	; 0x2f72 <ReadCapacity+0x43c>
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
  HiPinR_L = MEM_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load
    2d24:	ea 2c       	mov	r14, r10
    2d26:	ee 0c       	add	r14, r14

//==================================================================================
// Measurement of little capacity values
messe_mit_rh:
  //little capacity value, about  < 50 µF
  EntladePins();			// discharge capacitor
    2d28:	0e 94 c8 01 	call	0x390	; 0x390 <EntladePins>
  //measure with the R_H (470kOhm) resistor 
  R_PORT = 0;		// R_DDR ist HiPinR_L
    2d2c:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = (1<<TP1) | (1<<TP2) | (1<<TP3) | (1<<TxD);	//switch all Pins to output
    2d2e:	8f e0       	ldi	r24, 0x0F	; 15
    2d30:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		//switch all ADC Pins to GND
    2d32:	88 e0       	ldi	r24, 0x08	; 8
    2d34:	88 b9       	out	0x08, r24	; 8
  R_DDR = HiPinR_H;   		// switch R_H resistor port for HighPin to output (GND)
    2d36:	e4 b8       	out	0x04, r14	; 4
// setup Analog Comparator
  ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    2d38:	80 e4       	ldi	r24, 0x40	; 64
    2d3a:	80 93 7b 00 	sts	0x007B, r24
  ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    2d3e:	84 e5       	ldi	r24, 0x54	; 84
    2d40:	80 bf       	out	0x30, r24	; 48
  ADMUX = (1<<REFS0) | HighPin;			// switch Mux to High-Pin
    2d42:	81 2f       	mov	r24, r17
    2d44:	80 64       	ori	r24, 0x40	; 64
    2d46:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    2d4a:	86 e1       	ldi	r24, 0x16	; 22
    2d4c:	80 93 7a 00 	sts	0x007A, r24
  wait200us();			//wait for bandgap to start up
    2d50:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <wait200us>

  ovcnt16 = 0;
// setup Counter1
  TCCR1A = 0;			// set Counter1 to normal Mode
    2d54:	10 92 80 00 	sts	0x0080, r1
  TCNT1 = 0;			//set Counter to 0
    2d58:	10 92 85 00 	sts	0x0085, r1
    2d5c:	10 92 84 00 	sts	0x0084, r1
  TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// mega88
    2d60:	87 e2       	ldi	r24, 0x27	; 39
    2d62:	86 bb       	out	0x16, r24	; 22
  R_PORT = HiPinR_H;           	// switch R_H resistor port for HighPin to VCC
    2d64:	e5 b8       	out	0x05, r14	; 5
  if(PartFound == PART_FET) {
    2d66:	80 91 07 01 	lds	r24, 0x0107
    2d6a:	83 30       	cpi	r24, 0x03	; 3
    2d6c:	79 f4       	brne	.+30     	; 0x2d8c <ReadCapacity+0x256>
     // charge capacitor with R_H resistor
     TCCR1B = (1<<CS10);	//Start counter 1MHz or 8MHz
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
    2d70:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = (((1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK) & ~(1<<HighPin));	// release only HighPin ADC port
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	01 2e       	mov	r0, r17
    2d7a:	02 c0       	rjmp	.+4      	; 0x2d80 <ReadCapacity+0x24a>
    2d7c:	88 0f       	add	r24, r24
    2d7e:	99 1f       	adc	r25, r25
    2d80:	0a 94       	dec	r0
    2d82:	e2 f7       	brpl	.-8      	; 0x2d7c <ReadCapacity+0x246>
    2d84:	80 95       	com	r24
    2d86:	8f 70       	andi	r24, 0x0F	; 15
    2d88:	87 b9       	out	0x07, r24	; 7
    2d8a:	04 c0       	rjmp	.+8      	; 0x2d94 <ReadCapacity+0x25e>
  } else {
     TCCR1B =  (1<<CS10);	//start counter 1MHz or 8MHz
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
    2d92:	b7 b8       	out	0x07, r11	; 7
     ii = TI1_INT_FLAGS;	//read Timer flags
     if (ii & (1<<ICF1))  {
        break;
     }
     if((ii & (1<<TOV1))) {	// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
        TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    2d94:	81 e0       	ldi	r24, 0x01	; 1
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
  }
//******************************
  while(1) {
     // Wait, until  Input Capture is set
     ii = TI1_INT_FLAGS;	//read Timer flags
    2d96:	26 b3       	in	r18, 0x16	; 22
     if (ii & (1<<ICF1))  {
    2d98:	25 fd       	sbrc	r18, 5
    2d9a:	09 c0       	rjmp	.+18     	; 0x2dae <ReadCapacity+0x278>
        break;
     }
     if((ii & (1<<TOV1))) {	// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    2d9c:	20 ff       	sbrs	r18, 0
    2d9e:	fb cf       	rjmp	.-10     	; 0x2d96 <ReadCapacity+0x260>
        TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    2da0:	86 bb       	out	0x16, r24	; 22
        wdt_reset();
    2da2:	a8 95       	wdr
        ovcnt16++;
    2da4:	21 96       	adiw	r28, 0x01	; 1
        if(ovcnt16 == (F_CPU/5000)) {
    2da6:	36 e0       	ldi	r19, 0x06	; 6
    2da8:	c0 34       	cpi	r28, 0x40	; 64
    2daa:	d3 07       	cpc	r29, r19
    2dac:	a1 f7       	brne	.-24     	; 0x2d96 <ReadCapacity+0x260>
           break; 		//Timeout for Charging, above 12 s
        }
     }
  }
  TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    2dae:	10 92 81 00 	sts	0x0081, r1
  TI1_INT_FLAGS = (1<<ICF1);		// Reset Input Capture
    2db2:	80 e2       	ldi	r24, 0x20	; 32
    2db4:	86 bb       	out	0x16, r24	; 22
  tmpint = ICR1;		// get previous Input Capture Counter flag
    2db6:	e0 90 86 00 	lds	r14, 0x0086
    2dba:	f0 90 87 00 	lds	r15, 0x0087
// check actual counter, if an additional overflow must be added
  if((TCNT1 > tmpint) && (ii & (1<<TOV1))) {
    2dbe:	80 91 84 00 	lds	r24, 0x0084
    2dc2:	90 91 85 00 	lds	r25, 0x0085
    2dc6:	e8 16       	cp	r14, r24
    2dc8:	f9 06       	cpc	r15, r25
    2dca:	28 f4       	brcc	.+10     	; 0x2dd6 <ReadCapacity+0x2a0>
    2dcc:	20 ff       	sbrs	r18, 0
    2dce:	03 c0       	rjmp	.+6      	; 0x2dd6 <ReadCapacity+0x2a0>
     // this OV was not counted, but was before the Input Capture
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	86 bb       	out	0x16, r24	; 22
     ovcnt16++;
    2dd4:	21 96       	adiw	r28, 0x01	; 1
  }
//############################################################
  ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    2dd6:	86 e9       	ldi	r24, 0x96	; 150
    2dd8:	80 93 7a 00 	sts	0x007A, r24
  R_DDR = 0;			// switch R_H resistor port for input
    2ddc:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// switch R_H resistor port pull up for HighPin off
    2dde:	15 b8       	out	0x05, r1	; 5
  load_diff = ReadADC(HighPin) + REF_C_KORR - ref_mv;	// build difference of capacitor voltage to Reference Voltage
    2de0:	81 2f       	mov	r24, r17
    2de2:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
    2de6:	20 91 3f 01 	lds	r18, 0x013F
    2dea:	30 91 40 01 	lds	r19, 0x0140
    2dee:	82 1b       	sub	r24, r18
    2df0:	93 0b       	sbc	r25, r19
    2df2:	0c 96       	adiw	r24, 0x0c	; 12
    2df4:	90 93 6b 01 	sts	0x016B, r25
    2df8:	80 93 6a 01 	sts	0x016A, r24
//############################################################
  if (ovcnt16 >= (F_CPU/10000)) {
    2dfc:	43 e0       	ldi	r20, 0x03	; 3
    2dfe:	c0 32       	cpi	r28, 0x20	; 32
    2e00:	d4 07       	cpc	r29, r20
    2e02:	08 f0       	brcs	.+2      	; 0x2e06 <ReadCapacity+0x2d0>
    2e04:	f3 c0       	rjmp	.+486    	; 0x2fec <ReadCapacity+0x4b6>
     goto keinC;	// no normal end
  }
//  cap.cval_uncorrected = CombineII2Long(ovcnt16, tmpint);
  cap.cval_uncorrected.w[1] = ovcnt16;
    2e06:	d0 93 63 01 	sts	0x0163, r29
    2e0a:	c0 93 62 01 	sts	0x0162, r28
  cap.cval_uncorrected.w[0] = tmpint;
    2e0e:	f0 92 61 01 	sts	0x0161, r15
    2e12:	e0 92 60 01 	sts	0x0160, r14

  cap.cpre = -12;			// cap.cval unit is pF 
    2e16:	84 ef       	ldi	r24, 0xF4	; 244
    2e18:	80 93 68 01 	sts	0x0168, r24
  if (ovcnt16 > 65) {
    2e1c:	c2 34       	cpi	r28, 0x42	; 66
    2e1e:	d1 05       	cpc	r29, r1
    2e20:	c8 f0       	brcs	.+50     	; 0x2e54 <ReadCapacity+0x31e>
     cap.cval_uncorrected.dw /= 100;	// switch to next unit
    2e22:	60 91 60 01 	lds	r22, 0x0160
    2e26:	70 91 61 01 	lds	r23, 0x0161
    2e2a:	80 91 62 01 	lds	r24, 0x0162
    2e2e:	90 91 63 01 	lds	r25, 0x0163
    2e32:	24 e6       	ldi	r18, 0x64	; 100
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	40 e0       	ldi	r20, 0x00	; 0
    2e38:	50 e0       	ldi	r21, 0x00	; 0
    2e3a:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
    2e3e:	20 93 60 01 	sts	0x0160, r18
    2e42:	30 93 61 01 	sts	0x0161, r19
    2e46:	40 93 62 01 	sts	0x0162, r20
    2e4a:	50 93 63 01 	sts	0x0163, r21
     cap.cpre += 2;			// set unit, prevent overflow
    2e4e:	86 ef       	ldi	r24, 0xF6	; 246
    2e50:	80 93 68 01 	sts	0x0168, r24
  }
  cap.cval_uncorrected.dw *= RHmultip;		// 708
    2e54:	60 91 00 01 	lds	r22, 0x0100
    2e58:	70 91 01 01 	lds	r23, 0x0101
    2e5c:	80 e0       	ldi	r24, 0x00	; 0
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	20 91 60 01 	lds	r18, 0x0160
    2e64:	30 91 61 01 	lds	r19, 0x0161
    2e68:	40 91 62 01 	lds	r20, 0x0162
    2e6c:	50 91 63 01 	lds	r21, 0x0163
    2e70:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
  cap.cval_uncorrected.dw /= (F_CPU / 10000);	// divide by 100 (@ 1MHz clock), 800 (@ 8MHz clock)
    2e74:	20 e2       	ldi	r18, 0x20	; 32
    2e76:	33 e0       	ldi	r19, 0x03	; 3
    2e78:	40 e0       	ldi	r20, 0x00	; 0
    2e7a:	50 e0       	ldi	r21, 0x00	; 0
    2e7c:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
    2e80:	20 93 60 01 	sts	0x0160, r18
    2e84:	30 93 61 01 	sts	0x0161, r19
    2e88:	40 93 62 01 	sts	0x0162, r20
    2e8c:	50 93 63 01 	sts	0x0163, r21
  cap.cval = cap.cval_uncorrected.dw;		// set the corrected cap.cval
    2e90:	e8 e5       	ldi	r30, 0x58	; 88
    2e92:	f1 e0       	ldi	r31, 0x01	; 1
    2e94:	20 93 58 01 	sts	0x0158, r18
    2e98:	31 83       	std	Z+1, r19	; 0x01
    2e9a:	42 83       	std	Z+2, r20	; 0x02
    2e9c:	53 83       	std	Z+3, r21	; 0x03
  Scale_C_with_vcc();
    2e9e:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <Scale_C_with_vcc>
  if (cap.cpre == -12) {
    2ea2:	80 91 68 01 	lds	r24, 0x0168
    2ea6:	84 3f       	cpi	r24, 0xF4	; 244
    2ea8:	09 f0       	breq	.+2      	; 0x2eac <ReadCapacity+0x376>
    2eaa:	55 c0       	rjmp	.+170    	; 0x2f56 <ReadCapacity+0x420>
#if COMP_SLEW1 > COMP_SLEW2
     if (cap.cval < COMP_SLEW1) {
    2eac:	c0 90 58 01 	lds	r12, 0x0158
    2eb0:	d0 90 59 01 	lds	r13, 0x0159
    2eb4:	e0 90 5a 01 	lds	r14, 0x015A
    2eb8:	f0 90 5b 01 	lds	r15, 0x015B
    2ebc:	80 ea       	ldi	r24, 0xA0	; 160
    2ebe:	c8 16       	cp	r12, r24
    2ec0:	8f e0       	ldi	r24, 0x0F	; 15
    2ec2:	d8 06       	cpc	r13, r24
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	e8 06       	cpc	r14, r24
    2ec8:	80 e0       	ldi	r24, 0x00	; 0
    2eca:	f8 06       	cpc	r15, r24
    2ecc:	c0 f4       	brcc	.+48     	; 0x2efe <ReadCapacity+0x3c8>
        // add slew rate dependent offset
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
    2ece:	a7 01       	movw	r20, r14
    2ed0:	96 01       	movw	r18, r12
    2ed2:	24 52       	subi	r18, 0x24	; 36
    2ed4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ed6:	4f 4f       	sbci	r20, 0xFF	; 255
    2ed8:	5f 4f       	sbci	r21, 0xFF	; 255
    2eda:	60 ea       	ldi	r22, 0xA0	; 160
    2edc:	7f e0       	ldi	r23, 0x0F	; 15
    2ede:	80 e0       	ldi	r24, 0x00	; 0
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
    2ee6:	2c 0d       	add	r18, r12
    2ee8:	3d 1d       	adc	r19, r13
    2eea:	4e 1d       	adc	r20, r14
    2eec:	5f 1d       	adc	r21, r15
    2eee:	20 93 58 01 	sts	0x0158, r18
    2ef2:	30 93 59 01 	sts	0x0159, r19
    2ef6:	40 93 5a 01 	sts	0x015A, r20
    2efa:	50 93 5b 01 	sts	0x015B, r21
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2efe:	80 91 45 01 	lds	r24, 0x0145
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	87 54       	subi	r24, 0x47	; 71
    2f06:	9e 4f       	sbci	r25, 0xFE	; 254
    2f08:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__eerd_byte_m168>
     if (cap.cval > tmpint) {
    2f0c:	20 91 58 01 	lds	r18, 0x0158
    2f10:	30 91 59 01 	lds	r19, 0x0159
    2f14:	40 91 5a 01 	lds	r20, 0x015A
    2f18:	50 91 5b 01 	lds	r21, 0x015B
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
     if (cap.cval > tmpint) {
    2f1e:	a0 e0       	ldi	r26, 0x00	; 0
    2f20:	b0 e0       	ldi	r27, 0x00	; 0
    2f22:	82 17       	cp	r24, r18
    2f24:	93 07       	cpc	r25, r19
    2f26:	a4 07       	cpc	r26, r20
    2f28:	b5 07       	cpc	r27, r21
    2f2a:	68 f4       	brcc	.+26     	; 0x2f46 <ReadCapacity+0x410>
         cap.cval -= tmpint;		//subtract zero offset (pF)
    2f2c:	28 1b       	sub	r18, r24
    2f2e:	39 0b       	sbc	r19, r25
    2f30:	4a 0b       	sbc	r20, r26
    2f32:	5b 0b       	sbc	r21, r27
    2f34:	20 93 58 01 	sts	0x0158, r18
    2f38:	30 93 59 01 	sts	0x0159, r19
    2f3c:	40 93 5a 01 	sts	0x015A, r20
    2f40:	50 93 5b 01 	sts	0x015B, r21
    2f44:	08 c0       	rjmp	.+16     	; 0x2f56 <ReadCapacity+0x420>
     } else {
         cap.cval = 0;			//unsigned long may not reach negativ value
    2f46:	10 92 58 01 	sts	0x0158, r1
    2f4a:	10 92 59 01 	sts	0x0159, r1
    2f4e:	10 92 5a 01 	sts	0x015A, r1
    2f52:	10 92 5b 01 	sts	0x015B, r1
  lcd_testpin(HighPin);
  lcd_space();
  DisplayValue(cap.cval,cap.cpre,'F',4);
  wait_about3s();
#endif
  R_DDR = HiPinR_L; 		//switch R_L for High-Pin to GND
    2f56:	a4 b8       	out	0x04, r10	; 4
#if F_CPU < 2000001
   if(cap.cval < 50)
#else 
   if(cap.cval < 25)
    2f58:	80 91 58 01 	lds	r24, 0x0158
    2f5c:	90 91 59 01 	lds	r25, 0x0159
    2f60:	a0 91 5a 01 	lds	r26, 0x015A
    2f64:	b0 91 5b 01 	lds	r27, 0x015B
    2f68:	89 31       	cpi	r24, 0x19	; 25
    2f6a:	91 05       	cpc	r25, r1
    2f6c:	a1 05       	cpc	r26, r1
    2f6e:	b1 05       	cpc	r27, r1
    2f70:	e8 f1       	brcs	.+122    	; 0x2fec <ReadCapacity+0x4b6>
//   if (ovcnt16 > (6 * ((unsigned long)F_CPU/1000000))) {	// above 3 uF
//      GetESR(HighPin,LowPin);
//   }
#endif
checkDiodes:
   if((NumOfDiodes > 0)  && (PartFound != PART_FET)) {
    2f72:	80 91 05 01 	lds	r24, 0x0105
    2f76:	88 23       	and	r24, r24
    2f78:	21 f0       	breq	.+8      	; 0x2f82 <ReadCapacity+0x44c>
    2f7a:	80 91 07 01 	lds	r24, 0x0107
    2f7e:	83 30       	cpi	r24, 0x03	; 3
    2f80:	a9 f5       	brne	.+106    	; 0x2fec <ReadCapacity+0x4b6>
      wait_about1s();
#endif
      // nearly shure, that there is one or more diodes in reverse direction,
      // which would be wrongly detected as capacitor 
   } else {
      PartFound = PART_CAPACITOR;	//capacitor is found
    2f82:	87 e0       	ldi	r24, 0x07	; 7
    2f84:	80 93 07 01 	sts	0x0107, r24
      if ((cap.cpre > cap.cpre_max) || ((cap.cpre == cap.cpre_max) && (cap.cval > cap.cval_max))) {
    2f88:	60 91 68 01 	lds	r22, 0x0168
    2f8c:	80 91 69 01 	lds	r24, 0x0169
    2f90:	86 17       	cp	r24, r22
    2f92:	bc f0       	brlt	.+46     	; 0x2fc2 <ReadCapacity+0x48c>
    2f94:	68 17       	cp	r22, r24
    2f96:	51 f5       	brne	.+84     	; 0x2fec <ReadCapacity+0x4b6>
    2f98:	20 91 58 01 	lds	r18, 0x0158
    2f9c:	30 91 59 01 	lds	r19, 0x0159
    2fa0:	40 91 5a 01 	lds	r20, 0x015A
    2fa4:	50 91 5b 01 	lds	r21, 0x015B
    2fa8:	80 91 5c 01 	lds	r24, 0x015C
    2fac:	90 91 5d 01 	lds	r25, 0x015D
    2fb0:	a0 91 5e 01 	lds	r26, 0x015E
    2fb4:	b0 91 5f 01 	lds	r27, 0x015F
    2fb8:	82 17       	cp	r24, r18
    2fba:	93 07       	cpc	r25, r19
    2fbc:	a4 07       	cpc	r26, r20
    2fbe:	b5 07       	cpc	r27, r21
    2fc0:	a8 f4       	brcc	.+42     	; 0x2fec <ReadCapacity+0x4b6>
         // we have found a greater one
         cap.cval_max = cap.cval;
    2fc2:	e8 e5       	ldi	r30, 0x58	; 88
    2fc4:	f1 e0       	ldi	r31, 0x01	; 1
    2fc6:	80 91 58 01 	lds	r24, 0x0158
    2fca:	90 91 59 01 	lds	r25, 0x0159
    2fce:	a0 91 5a 01 	lds	r26, 0x015A
    2fd2:	b0 91 5b 01 	lds	r27, 0x015B
    2fd6:	80 93 5c 01 	sts	0x015C, r24
    2fda:	90 93 5d 01 	sts	0x015D, r25
    2fde:	a0 93 5e 01 	sts	0x015E, r26
    2fe2:	b0 93 5f 01 	sts	0x015F, r27
         cap.cpre_max = cap.cpre;
    2fe6:	61 8b       	std	Z+17, r22	; 0x11
         cap.ca = LowPin;		// save LowPin
    2fe8:	06 87       	std	Z+14, r16	; 0x0e
         cap.cb = HighPin;		// save HighPin
    2fea:	17 87       	std	Z+15, r17	; 0x0f
keinC:
  // discharge capacitor again
//  EntladePins();		// discharge capacitors
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    2fec:	88 e0       	ldi	r24, 0x08	; 8
    2fee:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    2ff0:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    2ff2:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    2ff4:	15 b8       	out	0x05, r1	; 5
  return;
 } // end ReadCapacity()
    2ff6:	df 91       	pop	r29
    2ff8:	cf 91       	pop	r28
    2ffa:	1f 91       	pop	r17
    2ffc:	0f 91       	pop	r16
    2ffe:	ff 90       	pop	r15
    3000:	ef 90       	pop	r14
    3002:	df 90       	pop	r13
    3004:	cf 90       	pop	r12
    3006:	bf 90       	pop	r11
    3008:	af 90       	pop	r10
    300a:	08 95       	ret

0000300c <ReadInductance>:
#include "config.h"
#include "Transistortester.h"


//=================================================================
void ReadInductance(void) {
    300c:	2f 92       	push	r2
    300e:	3f 92       	push	r3
    3010:	4f 92       	push	r4
    3012:	5f 92       	push	r5
    3014:	6f 92       	push	r6
    3016:	7f 92       	push	r7
    3018:	8f 92       	push	r8
    301a:	9f 92       	push	r9
    301c:	af 92       	push	r10
    301e:	bf 92       	push	r11
    3020:	cf 92       	push	r12
    3022:	df 92       	push	r13
    3024:	ef 92       	push	r14
    3026:	ff 92       	push	r15
    3028:	0f 93       	push	r16
    302a:	1f 93       	push	r17
    302c:	df 93       	push	r29
    302e:	cf 93       	push	r28
    3030:	cd b7       	in	r28, 0x3d	; 61
    3032:	de b7       	in	r29, 0x3e	; 62
    3034:	6e 97       	sbiw	r28, 0x1e	; 30
    3036:	0f b6       	in	r0, 0x3f	; 63
    3038:	f8 94       	cli
    303a:	de bf       	out	0x3e, r29	; 62
    303c:	0f be       	out	0x3f, r0	; 63
    303e:	cd bf       	out	0x3d, r28	; 61
  uint8_t found;	// variable used for searching resistors 
  uint8_t LowPin;	// number of pin with low voltage
  uint8_t HighPin;	// number of pin with high voltage 


  if(PartFound != PART_RESISTOR) {
    3040:	80 91 07 01 	lds	r24, 0x0107
    3044:	86 30       	cpi	r24, 0x06	; 6
    3046:	09 f0       	breq	.+2      	; 0x304a <ReadInductance+0x3e>
    3048:	67 c2       	rjmp	.+1230   	; 0x3518 <ReadInductance+0x50c>
    304a:	19 8a       	std	Y+17, r1	; 0x11
    304c:	5c c2       	rjmp	.+1208   	; 0x3506 <ReadInductance+0x4fa>
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 21000) continue;
    304e:	29 89       	ldd	r18, Y+17	; 0x11
    3050:	22 2e       	mov	r2, r18
    3052:	33 24       	eor	r3, r3
    3054:	8b e0       	ldi	r24, 0x0B	; 11
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	28 9e       	mul	r2, r24
    305a:	f0 01       	movw	r30, r0
    305c:	29 9e       	mul	r2, r25
    305e:	f0 0d       	add	r31, r0
    3060:	38 9e       	mul	r3, r24
    3062:	f0 0d       	add	r31, r0
    3064:	11 24       	eor	r1, r1
    3066:	e8 5e       	subi	r30, 0xE8	; 232
    3068:	fe 4f       	sbci	r31, 0xFE	; 254
    306a:	80 81       	ld	r24, Z
    306c:	91 81       	ldd	r25, Z+1	; 0x01
    306e:	a2 81       	ldd	r26, Z+2	; 0x02
    3070:	b3 81       	ldd	r27, Z+3	; 0x03
    3072:	89 30       	cpi	r24, 0x09	; 9
    3074:	22 e5       	ldi	r18, 0x52	; 82
    3076:	92 07       	cpc	r25, r18
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	a2 07       	cpc	r26, r18
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	b2 07       	cpc	r27, r18
    3080:	08 f0       	brcs	.+2      	; 0x3084 <ReadInductance+0x78>
    3082:	3e c2       	rjmp	.+1148   	; 0x3500 <ReadInductance+0x4f4>
    3084:	ff 24       	eor	r15, r15
           // first and second pass, direction 1
           LowPin = resis[found].ra;
           HighPin = resis[found].rb;
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    3086:	5f 01       	movw	r10, r30
    3088:	cf 01       	movw	r24, r30
    308a:	09 96       	adiw	r24, 0x09	; 9
    308c:	9d 8b       	std	Y+21, r25	; 0x15
    308e:	8c 8b       	std	Y+20, r24	; 0x14
           HighPin = resis[found].ra;
    3090:	38 96       	adiw	r30, 0x08	; 8
    3092:	ff 8b       	std	Y+23, r31	; 0x17
    3094:	ee 8b       	std	Y+22, r30	; 0x16
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    3096:	3d 8e       	std	Y+29, r3	; 0x1d
    3098:	2c 8e       	std	Y+28, r2	; 0x1c
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 21000) continue;
     // we can check for Inductance, if resistance is below 2800 Ohm
     for (count=0;count<4;count++) {
        // Try four times (different direction and with delayed counter start)
        if (count < 2) {
    309a:	ff 2d       	mov	r31, r15
    309c:	f2 30       	cpi	r31, 0x02	; 2
    309e:	30 f4       	brcc	.+12     	; 0x30ac <ReadInductance+0xa0>
           // first and second pass, direction 1
           LowPin = resis[found].ra;
    30a0:	ee 89       	ldd	r30, Y+22	; 0x16
    30a2:	ff 89       	ldd	r31, Y+23	; 0x17
    30a4:	e0 80       	ld	r14, Z
           HighPin = resis[found].rb;
    30a6:	ec 89       	ldd	r30, Y+20	; 0x14
    30a8:	fd 89       	ldd	r31, Y+21	; 0x15
    30aa:	05 c0       	rjmp	.+10     	; 0x30b6 <ReadInductance+0xaa>
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    30ac:	ec 89       	ldd	r30, Y+20	; 0x14
    30ae:	fd 89       	ldd	r31, Y+21	; 0x15
    30b0:	e0 80       	ld	r14, Z
           HighPin = resis[found].ra;
    30b2:	ee 89       	ldd	r30, Y+22	; 0x16
    30b4:	ff 89       	ldd	r31, Y+23	; 0x17
    30b6:	70 80       	ld	r7, Z
        }
        HiADC = MEM_read_byte(&PinADCtab[HighPin]);
    30b8:	87 2d       	mov	r24, r7
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	88 55       	subi	r24, 0x58	; 88
    30be:	9e 4f       	sbci	r25, 0xFE	; 254
    30c0:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__eerd_byte_m168>
    30c4:	88 2e       	mov	r8, r24
        LoPinR_L = MEM_read_byte(&PinRLtab[LowPin]);	//R_L mask for HighPin R_L load
    30c6:	8e 2d       	mov	r24, r14
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	8b 55       	subi	r24, 0x5B	; 91
    30cc:	9e 4f       	sbci	r25, 0xFE	; 254
    30ce:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__eerd_byte_m168>
        //==================================================================================
        // Measurement of Inductance values
        R_PORT = 0;		// switch R port to GND
    30d2:	15 b8       	out	0x05, r1	; 5
        ADC_PORT =   TXD_VAL;		// switch ADC-Port to GND
    30d4:	f8 e0       	ldi	r31, 0x08	; 8
    30d6:	f8 b9       	out	0x08, r31	; 8
        if ((resis[found].rx < 240) && ((count & 0x01) == 0)) {
    30d8:	f5 01       	movw	r30, r10
    30da:	20 81       	ld	r18, Z
    30dc:	31 81       	ldd	r19, Z+1	; 0x01
    30de:	42 81       	ldd	r20, Z+2	; 0x02
    30e0:	53 81       	ldd	r21, Z+3	; 0x03
    30e2:	20 3f       	cpi	r18, 0xF0	; 240
    30e4:	31 05       	cpc	r19, r1
    30e6:	41 05       	cpc	r20, r1
    30e8:	51 05       	cpc	r21, r1
    30ea:	a8 f4       	brcc	.+42     	; 0x3116 <ReadInductance+0x10a>
    30ec:	f0 fc       	sbrc	r15, 0
    30ee:	13 c0       	rjmp	.+38     	; 0x3116 <ReadInductance+0x10a>
           // we can use PinR_L for measurement
           mess_r = RR680MI - R_L_VAL;
    30f0:	00 91 02 01 	lds	r16, 0x0102
    30f4:	10 91 03 01 	lds	r17, 0x0103
    30f8:	00 59       	subi	r16, 0x90	; 144
    30fa:	1a 41       	sbci	r17, 0x1A	; 26
           ADC_DDR = HiADC | (1<<LowPin) | TXD_MSK;	// switch HiADC and Low Pin to GND, 
    30fc:	28 2d       	mov	r18, r8
    30fe:	28 60       	ori	r18, 0x08	; 8
    3100:	81 e0       	ldi	r24, 0x01	; 1
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	0e 2c       	mov	r0, r14
    3106:	02 c0       	rjmp	.+4      	; 0x310c <ReadInductance+0x100>
    3108:	88 0f       	add	r24, r24
    310a:	99 1f       	adc	r25, r25
    310c:	0a 94       	dec	r0
    310e:	e2 f7       	brpl	.-8      	; 0x3108 <ReadInductance+0xfc>
    3110:	28 2b       	or	r18, r24
    3112:	27 b9       	out	0x07, r18	; 7
    3114:	08 c0       	rjmp	.+16     	; 0x3126 <ReadInductance+0x11a>
        } else {
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
    3116:	84 b9       	out	0x04, r24	; 4
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
    3118:	88 2d       	mov	r24, r8
    311a:	88 60       	ori	r24, 0x08	; 8
    311c:	87 b9       	out	0x07, r24	; 7
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
    311e:	00 91 02 01 	lds	r16, 0x0102
    3122:	10 91 03 01 	lds	r17, 0x0103
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    3126:	20 e0       	ldi	r18, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    3128:	8e 2d       	mov	r24, r14
    312a:	2e 8f       	std	Y+30, r18	; 0x1e
    312c:	0e 94 a7 1a 	call	0x354e	; 0x354e <W10msReadADC>
    3130:	6c 01       	movw	r12, r24
            total_r =  ReadADC(HighPin);
    3132:	87 2d       	mov	r24, r7
    3134:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    3138:	2e 8d       	ldd	r18, Y+30	; 0x1e
    313a:	f2 e0       	ldi	r31, 0x02	; 2
    313c:	cf 16       	cp	r12, r31
    313e:	d1 04       	cpc	r13, r1
    3140:	18 f4       	brcc	.+6      	; 0x3148 <ReadInductance+0x13c>
    3142:	82 30       	cpi	r24, 0x02	; 2
    3144:	91 05       	cpc	r25, r1
    3146:	18 f0       	brcs	.+6      	; 0x314e <ReadInductance+0x142>
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    3148:	2f 5f       	subi	r18, 0xFF	; 255
    314a:	24 31       	cpi	r18, 0x14	; 20
    314c:	69 f7       	brne	.-38     	; 0x3128 <ReadInductance+0x11c>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
        // setup Analog Comparator
        ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    314e:	20 e4       	ldi	r18, 0x40	; 64
    3150:	20 93 7b 00 	sts	0x007B, r18
        ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    3154:	34 e5       	ldi	r19, 0x54	; 84
    3156:	30 bf       	out	0x30, r19	; 48
        ADMUX = (1<<REFS0) | LowPin;			// switch Mux to Low-Pin
    3158:	8e 2d       	mov	r24, r14
    315a:	80 64       	ori	r24, 0x40	; 64
    315c:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    3160:	86 e1       	ldi	r24, 0x16	; 22
    3162:	80 93 7a 00 	sts	0x007A, r24
   
      // setup Counter1
        ovcnt16 = 0;
        TCCR1A = 0;			// set Counter1 to normal Mode
    3166:	10 92 80 00 	sts	0x0080, r1
        TCNT1 = 0;			//set Counter to 0
    316a:	10 92 85 00 	sts	0x0085, r1
    316e:	10 92 84 00 	sts	0x0084, r1
        TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// mega88
    3172:	97 e2       	ldi	r25, 0x27	; 39
    3174:	96 bb       	out	0x16, r25	; 22
        HiADC |= TXD_VAL;
    3176:	e8 e0       	ldi	r30, 0x08	; 8
    3178:	8e 2a       	or	r8, r30
        wait200us();			// wait for bandgap to start up
    317a:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <wait200us>
        if ((count & 0x01) == 0 ) {
    317e:	2f 2c       	mov	r2, r15
    3180:	33 24       	eor	r3, r3
    3182:	91 01       	movw	r18, r2
    3184:	21 70       	andi	r18, 0x01	; 1
    3186:	30 70       	andi	r19, 0x00	; 0
    3188:	3b 8b       	std	Y+19, r19	; 0x13
    318a:	2a 8b       	std	Y+18, r18	; 0x12
    318c:	f0 fc       	sbrc	r15, 0
    318e:	05 c0       	rjmp	.+10     	; 0x319a <ReadInductance+0x18e>
           //first start counter, then start current
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    3190:	31 e8       	ldi	r19, 0x81	; 129
    3192:	30 93 81 00 	sts	0x0081, r19
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    3196:	88 b8       	out	0x08, r8	; 8
    3198:	08 c0       	rjmp	.+16     	; 0x31aa <ReadInductance+0x19e>
        } else {
           //first start current, then start counter with delay
           //parasitic capacity of coil can cause high current at the beginning
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    319a:	88 b8       	out	0x08, r8	; 8
      #if F_CPU >= 8000000UL
           wait3us();		// ignore current peak from capacity
    319c:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <wait3us>
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
    31a0:	80 e2       	ldi	r24, 0x20	; 32
    31a2:	86 bb       	out	0x16, r24	; 22
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    31a4:	91 e8       	ldi	r25, 0x81	; 129
    31a6:	90 93 81 00 	sts	0x0081, r25
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    31aa:	cc 24       	eor	r12, r12
    31ac:	dd 24       	eor	r13, r13
        }
      
      //******************************
        while(1) {
           // Wait, until  Input Capture is set
           ii = TI1_INT_FLAGS;		//read Timer flags
    31ae:	26 b3       	in	r18, 0x16	; 22
           if (ii & (1<<ICF1))  {
    31b0:	25 fd       	sbrc	r18, 5
    31b2:	0c c0       	rjmp	.+24     	; 0x31cc <ReadInductance+0x1c0>
              break;
           }
           if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    31b4:	20 ff       	sbrs	r18, 0
    31b6:	fb cf       	rjmp	.-10     	; 0x31ae <ReadInductance+0x1a2>
              TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    31b8:	e1 e0       	ldi	r30, 0x01	; 1
    31ba:	e6 bb       	out	0x16, r30	; 22
              wdt_reset();
    31bc:	a8 95       	wdr
              ovcnt16++;
    31be:	08 94       	sec
    31c0:	c1 1c       	adc	r12, r1
    31c2:	d1 1c       	adc	r13, r1
              if(ovcnt16 == (F_CPU/100000)) {
    31c4:	f0 e5       	ldi	r31, 0x50	; 80
    31c6:	cf 16       	cp	r12, r31
    31c8:	d1 04       	cpc	r13, r1
    31ca:	89 f7       	brne	.-30     	; 0x31ae <ReadInductance+0x1a2>
                 break; 	//Timeout for Charging, above 0.13 s
              }
           }
        }
        TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    31cc:	10 92 81 00 	sts	0x0081, r1
        TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    31d0:	30 e2       	ldi	r19, 0x20	; 32
    31d2:	36 bb       	out	0x16, r19	; 22
        tmpint = ICR1;		// get previous Input Capture Counter flag
    31d4:	80 90 86 00 	lds	r8, 0x0086
    31d8:	90 90 87 00 	lds	r9, 0x0087
      // check actual counter, if an additional overflow must be added
        if((TCNT1 > tmpint) && (ii & (1<<TOV1))) {
    31dc:	80 91 84 00 	lds	r24, 0x0084
    31e0:	90 91 85 00 	lds	r25, 0x0085
    31e4:	88 16       	cp	r8, r24
    31e6:	99 06       	cpc	r9, r25
    31e8:	38 f4       	brcc	.+14     	; 0x31f8 <ReadInductance+0x1ec>
    31ea:	20 ff       	sbrs	r18, 0
    31ec:	05 c0       	rjmp	.+10     	; 0x31f8 <ReadInductance+0x1ec>
           // this OV was not counted, but was before the Input Capture
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	86 bb       	out	0x16, r24	; 22
           ovcnt16++;
    31f2:	08 94       	sec
    31f4:	c1 1c       	adc	r12, r1
    31f6:	d1 1c       	adc	r13, r1
        }
        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    31f8:	98 e0       	ldi	r25, 0x08	; 8
    31fa:	98 b9       	out	0x08, r25	; 8
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    31fc:	e6 e9       	ldi	r30, 0x96	; 150
    31fe:	e0 93 7a 00 	sts	0x007A, r30
        for (ii=0;ii<20;ii++) {
    3202:	40 e0       	ldi	r20, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    3204:	8e 2d       	mov	r24, r14
    3206:	4e 8f       	std	Y+30, r20	; 0x1e
    3208:	0e 94 a7 1a 	call	0x354e	; 0x354e <W10msReadADC>
    320c:	2c 01       	movw	r4, r24
            total_r =  ReadADC(HighPin);
    320e:	87 2d       	mov	r24, r7
    3210:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    3214:	4e 8d       	ldd	r20, Y+30	; 0x1e
    3216:	f2 e0       	ldi	r31, 0x02	; 2
    3218:	4f 16       	cp	r4, r31
    321a:	51 04       	cpc	r5, r1
    321c:	18 f4       	brcc	.+6      	; 0x3224 <ReadInductance+0x218>
    321e:	82 30       	cpi	r24, 0x02	; 2
    3220:	91 05       	cpc	r25, r1
    3222:	18 f0       	brcs	.+6      	; 0x322a <ReadInductance+0x21e>
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
           ovcnt16++;
        }
        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
        for (ii=0;ii<20;ii++) {
    3224:	4f 5f       	subi	r20, 0xFF	; 255
    3226:	44 31       	cpi	r20, 0x14	; 20
    3228:	69 f7       	brne	.-38     	; 0x3204 <ReadInductance+0x1f8>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
//      cap.cval_uncorrected.dw = CombineII2Long(ovcnt16, tmpint);
        cap.cval_uncorrected.w[1] = ovcnt16;
    322a:	d0 92 63 01 	sts	0x0163, r13
    322e:	c0 92 62 01 	sts	0x0162, r12
        cap.cval_uncorrected.w[0] = tmpint;
    3232:	90 92 61 01 	sts	0x0161, r9
    3236:	80 92 60 01 	sts	0x0160, r8
  #define CNT_ZERO_42 4
  #define CNT_ZERO_720 10
#endif
        // Voltage of comparator in % of umax
        #ifdef AUTO_CAL
        tmpint = (ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset))) ;
    323a:	87 eb       	ldi	r24, 0xB7	; 183
    323c:	91 e0       	ldi	r25, 0x01	; 1
    323e:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <__eerd_word_m168>
    3242:	60 91 3f 01 	lds	r22, 0x013F
    3246:	70 91 40 01 	lds	r23, 0x0140
    324a:	68 0f       	add	r22, r24
    324c:	79 1f       	adc	r23, r25
    324e:	80 91 60 01 	lds	r24, 0x0160
    3252:	90 91 61 01 	lds	r25, 0x0161
    3256:	a0 91 62 01 	lds	r26, 0x0162
    325a:	b0 91 63 01 	lds	r27, 0x0163
        #else
        tmpint = (ref_mv + REF_C_KORR);
        #endif
        if (mess_r < R_L_VAL) {
    325e:	2a e1       	ldi	r18, 0x1A	; 26
    3260:	00 39       	cpi	r16, 0x90	; 144
    3262:	12 07       	cpc	r17, r18
    3264:	90 f4       	brcc	.+36     	; 0x328a <ReadInductance+0x27e>
           // measurement without 680 Ohm
           if (cap.cval_uncorrected.dw > CNT_ZERO_42) cap.cval_uncorrected.dw -= CNT_ZERO_42;
    3266:	87 30       	cpi	r24, 0x07	; 7
    3268:	91 05       	cpc	r25, r1
    326a:	a1 05       	cpc	r26, r1
    326c:	b1 05       	cpc	r27, r1
    326e:	20 f0       	brcs	.+8      	; 0x3278 <ReadInductance+0x26c>
    3270:	06 97       	sbiw	r24, 0x06	; 6
    3272:	a1 09       	sbc	r26, r1
    3274:	b1 09       	sbc	r27, r1
    3276:	3c c0       	rjmp	.+120    	; 0x32f0 <ReadInductance+0x2e4>
           else          cap.cval_uncorrected.dw = 0;
    3278:	10 92 60 01 	sts	0x0160, r1
    327c:	10 92 61 01 	sts	0x0161, r1
    3280:	10 92 62 01 	sts	0x0162, r1
    3284:	10 92 63 01 	sts	0x0163, r1
    3288:	3b c0       	rjmp	.+118    	; 0x3300 <ReadInductance+0x2f4>
        } else {
           // measurement with 680 Ohm resistor
           // if 680 Ohm resistor is used, use REF_L_KORR for correction
           tmpint += REF_L_KORR;
    328a:	6e 5c       	subi	r22, 0xCE	; 206
    328c:	7f 4f       	sbci	r23, 0xFF	; 255
           if (cap.cval_uncorrected.dw > CNT_ZERO_720) cap.cval_uncorrected.dw -= CNT_ZERO_720;
    328e:	88 30       	cpi	r24, 0x08	; 8
    3290:	91 05       	cpc	r25, r1
    3292:	a1 05       	cpc	r26, r1
    3294:	b1 05       	cpc	r27, r1
    3296:	60 f0       	brcs	.+24     	; 0x32b0 <ReadInductance+0x2a4>
    3298:	07 97       	sbiw	r24, 0x07	; 7
    329a:	a1 09       	sbc	r26, r1
    329c:	b1 09       	sbc	r27, r1
    329e:	80 93 60 01 	sts	0x0160, r24
    32a2:	90 93 61 01 	sts	0x0161, r25
    32a6:	a0 93 62 01 	sts	0x0162, r26
    32aa:	b0 93 63 01 	sts	0x0163, r27
    32ae:	08 c0       	rjmp	.+16     	; 0x32c0 <ReadInductance+0x2b4>
           else          cap.cval_uncorrected.dw = 0;
    32b0:	10 92 60 01 	sts	0x0160, r1
    32b4:	10 92 61 01 	sts	0x0161, r1
    32b8:	10 92 62 01 	sts	0x0162, r1
    32bc:	10 92 63 01 	sts	0x0163, r1
           if (cap.cval > 12) cap.cval_uncorrected.dw -= 1;
    32c0:	80 91 58 01 	lds	r24, 0x0158
    32c4:	90 91 59 01 	lds	r25, 0x0159
    32c8:	a0 91 5a 01 	lds	r26, 0x015A
    32cc:	b0 91 5b 01 	lds	r27, 0x015B
    32d0:	8d 30       	cpi	r24, 0x0D	; 13
    32d2:	91 05       	cpc	r25, r1
    32d4:	a1 05       	cpc	r26, r1
    32d6:	b1 05       	cpc	r27, r1
    32d8:	98 f0       	brcs	.+38     	; 0x3300 <ReadInductance+0x2f4>
    32da:	80 91 60 01 	lds	r24, 0x0160
    32de:	90 91 61 01 	lds	r25, 0x0161
    32e2:	a0 91 62 01 	lds	r26, 0x0162
    32e6:	b0 91 63 01 	lds	r27, 0x0163
    32ea:	01 97       	sbiw	r24, 0x01	; 1
    32ec:	a1 09       	sbc	r26, r1
    32ee:	b1 09       	sbc	r27, r1
    32f0:	80 93 60 01 	sts	0x0160, r24
    32f4:	90 93 61 01 	sts	0x0161, r25
    32f8:	a0 93 62 01 	sts	0x0162, r26
    32fc:	b0 93 63 01 	sts	0x0163, r27
        }
        if ((count&0x01) == 1) {
    3300:	8a 89       	ldd	r24, Y+18	; 0x12
    3302:	9b 89       	ldd	r25, Y+19	; 0x13
    3304:	00 97       	sbiw	r24, 0x00	; 0
    3306:	99 f0       	breq	.+38     	; 0x332e <ReadInductance+0x322>
           // second pass with delayed counter start
           cap.cval_uncorrected.dw += (3 * (F_CPU/1000000))+10;
    3308:	80 91 60 01 	lds	r24, 0x0160
    330c:	90 91 61 01 	lds	r25, 0x0161
    3310:	a0 91 62 01 	lds	r26, 0x0162
    3314:	b0 91 63 01 	lds	r27, 0x0163
    3318:	82 96       	adiw	r24, 0x22	; 34
    331a:	a1 1d       	adc	r26, r1
    331c:	b1 1d       	adc	r27, r1
    331e:	80 93 60 01 	sts	0x0160, r24
    3322:	90 93 61 01 	sts	0x0161, r25
    3326:	a0 93 62 01 	sts	0x0162, r26
    332a:	b0 93 63 01 	sts	0x0163, r27
        }
        if (ovcnt16 >= (F_CPU/100000)) cap.cval_uncorrected.dw = 0; // no transition found
    332e:	90 e5       	ldi	r25, 0x50	; 80
    3330:	c9 16       	cp	r12, r25
    3332:	d1 04       	cpc	r13, r1
    3334:	40 f0       	brcs	.+16     	; 0x3346 <ReadInductance+0x33a>
    3336:	10 92 60 01 	sts	0x0160, r1
    333a:	10 92 61 01 	sts	0x0161, r1
    333e:	10 92 62 01 	sts	0x0162, r1
    3342:	10 92 63 01 	sts	0x0163, r1
        total_r = (mess_r + resis[found].rx + RR680PL - R_L_VAL);
    3346:	80 91 08 01 	lds	r24, 0x0108
    334a:	90 91 09 01 	lds	r25, 0x0109
    334e:	80 59       	subi	r24, 0x90	; 144
    3350:	9a 41       	sbci	r25, 0x1A	; 26
    3352:	f5 01       	movw	r30, r10
    3354:	20 81       	ld	r18, Z
    3356:	31 81       	ldd	r19, Z+1	; 0x01
    3358:	82 0f       	add	r24, r18
    335a:	93 1f       	adc	r25, r19
    335c:	80 0f       	add	r24, r16
    335e:	91 1f       	adc	r25, r17
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    3360:	2c 01       	movw	r4, r24
    3362:	66 24       	eor	r6, r6
    3364:	77 24       	eor	r7, r7
        per_ref = ((unsigned long)tmpint * 100) / umax;
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	24 e6       	ldi	r18, 0x64	; 100
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	40 e0       	ldi	r20, 0x00	; 0
    3370:	50 e0       	ldi	r21, 0x00	; 0
    3372:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    3376:	68 8f       	std	Y+24, r22	; 0x18
    3378:	79 8f       	std	Y+25, r23	; 0x19
    337a:	8a 8f       	std	Y+26, r24	; 0x1a
    337c:	9b 8f       	std	Y+27, r25	; 0x1b
           cap.cval_uncorrected.dw += (3 * (F_CPU/1000000))+10;
        }
        if (ovcnt16 >= (F_CPU/100000)) cap.cval_uncorrected.dw = 0; // no transition found
        total_r = (mess_r + resis[found].rx + RR680PL - R_L_VAL);
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    337e:	b8 01       	movw	r22, r16
    3380:	80 e0       	ldi	r24, 0x00	; 0
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	20 91 3d 01 	lds	r18, 0x013D
    3388:	30 91 3e 01 	lds	r19, 0x013E
    338c:	40 e0       	ldi	r20, 0x00	; 0
    338e:	50 e0       	ldi	r21, 0x00	; 0
    3390:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    3394:	a3 01       	movw	r20, r6
    3396:	92 01       	movw	r18, r4
    3398:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
        per_ref = ((unsigned long)tmpint * 100) / umax;
    339c:	40 e0       	ldi	r20, 0x00	; 0
    339e:	50 e0       	ldi	r21, 0x00	; 0
    33a0:	68 8d       	ldd	r22, Y+24	; 0x18
    33a2:	79 8d       	ldd	r23, Y+25	; 0x19
    33a4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    33a6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    33a8:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
        per_ref = (uint8_t)MEM2_read_byte(&LogTab[per_ref]);	// -log(1 - per_ref/100)
    33ac:	e2 2f       	mov	r30, r18
    33ae:	f0 e0       	ldi	r31, 0x00	; 0
    33b0:	e8 59       	subi	r30, 0x98	; 152
    33b2:	ff 4f       	sbci	r31, 0xFF	; 255
    33b4:	04 91       	lpm	r16, Z+
        // lx in 0.01mH units,  L = Tau * R
        inductance[count] = (cap.cval_uncorrected.dw * total_r ) / ((unsigned int)per_ref * (F_CPU/1000000));
    33b6:	20 91 60 01 	lds	r18, 0x0160
    33ba:	30 91 61 01 	lds	r19, 0x0161
    33be:	40 91 62 01 	lds	r20, 0x0162
    33c2:	50 91 63 01 	lds	r21, 0x0163
    33c6:	c3 01       	movw	r24, r6
    33c8:	b2 01       	movw	r22, r4
    33ca:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    33ce:	20 2f       	mov	r18, r16
    33d0:	30 e0       	ldi	r19, 0x00	; 0
    33d2:	40 e0       	ldi	r20, 0x00	; 0
    33d4:	50 e0       	ldi	r21, 0x00	; 0
    33d6:	e3 e0       	ldi	r30, 0x03	; 3
    33d8:	22 0f       	add	r18, r18
    33da:	33 1f       	adc	r19, r19
    33dc:	44 1f       	adc	r20, r20
    33de:	55 1f       	adc	r21, r21
    33e0:	ea 95       	dec	r30
    33e2:	d1 f7       	brne	.-12     	; 0x33d8 <ReadInductance+0x3cc>
    33e4:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
    33e8:	f1 01       	movw	r30, r2
    33ea:	ee 0f       	add	r30, r30
    33ec:	ff 1f       	adc	r31, r31
    33ee:	ee 0f       	add	r30, r30
    33f0:	ff 1f       	adc	r31, r31
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	8c 0f       	add	r24, r28
    33f8:	9d 1f       	adc	r25, r29
    33fa:	e8 0f       	add	r30, r24
    33fc:	f9 1f       	adc	r31, r25
    33fe:	20 83       	st	Z, r18
    3400:	31 83       	std	Z+1, r19	; 0x01
    3402:	42 83       	std	Z+2, r20	; 0x02
    3404:	53 83       	std	Z+3, r21	; 0x03
        if (((count&0x01) == 0) && (inductance[count] > (F_CPU/1000000))) {
    3406:	ea 89       	ldd	r30, Y+18	; 0x12
    3408:	fb 89       	ldd	r31, Y+19	; 0x13
    340a:	30 97       	sbiw	r30, 0x00	; 0
    340c:	91 f4       	brne	.+36     	; 0x3432 <ReadInductance+0x426>
    340e:	29 30       	cpi	r18, 0x09	; 9
    3410:	31 05       	cpc	r19, r1
    3412:	41 05       	cpc	r20, r1
    3414:	51 05       	cpc	r21, r1
    3416:	68 f0       	brcs	.+26     	; 0x3432 <ReadInductance+0x426>
           // transition is found, measurement with delayed counter start is not necessary
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
    3418:	f1 01       	movw	r30, r2
    341a:	31 96       	adiw	r30, 0x01	; 1
    341c:	ee 0f       	add	r30, r30
    341e:	ff 1f       	adc	r31, r31
    3420:	ee 0f       	add	r30, r30
    3422:	ff 1f       	adc	r31, r31
    3424:	e8 0f       	add	r30, r24
    3426:	f9 1f       	adc	r31, r25
    3428:	20 83       	st	Z, r18
    342a:	31 83       	std	Z+1, r19	; 0x01
    342c:	42 83       	std	Z+2, r20	; 0x02
    342e:	53 83       	std	Z+3, r21	; 0x03
           count++;		// skip the delayed measurement
    3430:	f3 94       	inc	r15
        }
        wdt_reset();
    3432:	a8 95       	wdr
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 21000) continue;
     // we can check for Inductance, if resistance is below 2800 Ohm
     for (count=0;count<4;count++) {
    3434:	f3 94       	inc	r15
    3436:	ff 2d       	mov	r31, r15
    3438:	f4 30       	cpi	r31, 0x04	; 4
    343a:	08 f4       	brcc	.+2      	; 0x343e <ReadInductance+0x432>
    343c:	2e ce       	rjmp	.-932    	; 0x309a <ReadInductance+0x8e>
    343e:	2c 8c       	ldd	r2, Y+28	; 0x1c
    3440:	3d 8c       	ldd	r3, Y+29	; 0x1d
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
           count++;		// skip the delayed measurement
        }
        wdt_reset();
     }  //end for count
     ADC_PORT = TXD_VAL;		// switch ADC Port to GND
    3442:	28 e0       	ldi	r18, 0x08	; 8
    3444:	28 b9       	out	0x08, r18	; 8
     wait_about20ms();
    3446:	84 e0       	ldi	r24, 0x04	; 4
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	0e 94 b7 03 	call	0x76e	; 0x76e <sleep_5ms>
     if (inductance[1] > inductance[0]) {
    344e:	2d 81       	ldd	r18, Y+5	; 0x05
    3450:	3e 81       	ldd	r19, Y+6	; 0x06
    3452:	4f 81       	ldd	r20, Y+7	; 0x07
    3454:	58 85       	ldd	r21, Y+8	; 0x08
    3456:	89 81       	ldd	r24, Y+1	; 0x01
    3458:	9a 81       	ldd	r25, Y+2	; 0x02
    345a:	ab 81       	ldd	r26, Y+3	; 0x03
    345c:	bc 81       	ldd	r27, Y+4	; 0x04
    345e:	82 17       	cp	r24, r18
    3460:	93 07       	cpc	r25, r19
    3462:	a4 07       	cpc	r26, r20
    3464:	b5 07       	cpc	r27, r21
    3466:	80 f4       	brcc	.+32     	; 0x3488 <ReadInductance+0x47c>
        resis[found].lx = inductance[1];	// use value found with delayed counter start
    3468:	8b e0       	ldi	r24, 0x0B	; 11
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	28 9e       	mul	r2, r24
    346e:	f0 01       	movw	r30, r0
    3470:	29 9e       	mul	r2, r25
    3472:	f0 0d       	add	r31, r0
    3474:	38 9e       	mul	r3, r24
    3476:	f0 0d       	add	r31, r0
    3478:	11 24       	eor	r1, r1
    347a:	e8 5e       	subi	r30, 0xE8	; 232
    347c:	fe 4f       	sbci	r31, 0xFE	; 254
    347e:	24 83       	std	Z+4, r18	; 0x04
    3480:	35 83       	std	Z+5, r19	; 0x05
    3482:	46 83       	std	Z+6, r20	; 0x06
    3484:	57 83       	std	Z+7, r21	; 0x07
    3486:	0f c0       	rjmp	.+30     	; 0x34a6 <ReadInductance+0x49a>
     } else {
        resis[found].lx = inductance[0];
    3488:	2b e0       	ldi	r18, 0x0B	; 11
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	22 9e       	mul	r2, r18
    348e:	f0 01       	movw	r30, r0
    3490:	23 9e       	mul	r2, r19
    3492:	f0 0d       	add	r31, r0
    3494:	32 9e       	mul	r3, r18
    3496:	f0 0d       	add	r31, r0
    3498:	11 24       	eor	r1, r1
    349a:	e8 5e       	subi	r30, 0xE8	; 232
    349c:	fe 4f       	sbci	r31, 0xFE	; 254
    349e:	84 83       	std	Z+4, r24	; 0x04
    34a0:	95 83       	std	Z+5, r25	; 0x05
    34a2:	a6 83       	std	Z+6, r26	; 0x06
    34a4:	b7 83       	std	Z+7, r27	; 0x07
     }
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];
    34a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    34a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    34aa:	af 85       	ldd	r26, Y+15	; 0x0f
    34ac:	b8 89       	ldd	r27, Y+16	; 0x10
    34ae:	29 85       	ldd	r18, Y+9	; 0x09
    34b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    34b2:	4b 85       	ldd	r20, Y+11	; 0x0b
    34b4:	5c 85       	ldd	r21, Y+12	; 0x0c
    34b6:	28 17       	cp	r18, r24
    34b8:	39 07       	cpc	r19, r25
    34ba:	4a 07       	cpc	r20, r26
    34bc:	5b 07       	cpc	r21, r27
    34be:	20 f4       	brcc	.+8      	; 0x34c8 <ReadInductance+0x4bc>
    34c0:	89 87       	std	Y+9, r24	; 0x09
    34c2:	9a 87       	std	Y+10, r25	; 0x0a
    34c4:	ab 87       	std	Y+11, r26	; 0x0b
    34c6:	bc 87       	std	Y+12, r27	; 0x0c
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
    34c8:	89 85       	ldd	r24, Y+9	; 0x09
    34ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    34cc:	ab 85       	ldd	r26, Y+11	; 0x0b
    34ce:	bc 85       	ldd	r27, Y+12	; 0x0c
    34d0:	2b e0       	ldi	r18, 0x0B	; 11
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	22 9e       	mul	r2, r18
    34d6:	f0 01       	movw	r30, r0
    34d8:	23 9e       	mul	r2, r19
    34da:	f0 0d       	add	r31, r0
    34dc:	32 9e       	mul	r3, r18
    34de:	f0 0d       	add	r31, r0
    34e0:	11 24       	eor	r1, r1
    34e2:	e8 5e       	subi	r30, 0xE8	; 232
    34e4:	fe 4f       	sbci	r31, 0xFE	; 254
    34e6:	24 81       	ldd	r18, Z+4	; 0x04
    34e8:	35 81       	ldd	r19, Z+5	; 0x05
    34ea:	46 81       	ldd	r20, Z+6	; 0x06
    34ec:	57 81       	ldd	r21, Z+7	; 0x07
    34ee:	82 17       	cp	r24, r18
    34f0:	93 07       	cpc	r25, r19
    34f2:	a4 07       	cpc	r26, r20
    34f4:	b5 07       	cpc	r27, r21
    34f6:	20 f4       	brcc	.+8      	; 0x3500 <ReadInductance+0x4f4>
    34f8:	84 83       	std	Z+4, r24	; 0x04
    34fa:	95 83       	std	Z+5, r25	; 0x05
    34fc:	a6 83       	std	Z+6, r26	; 0x06
    34fe:	b7 83       	std	Z+7, r27	; 0x07


  if(PartFound != PART_RESISTOR) {
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
    3500:	39 89       	ldd	r19, Y+17	; 0x11
    3502:	3f 5f       	subi	r19, 0xFF	; 255
    3504:	39 8b       	std	Y+17, r19	; 0x11
    3506:	80 91 55 01 	lds	r24, 0x0155
    350a:	99 89       	ldd	r25, Y+17	; 0x11
    350c:	98 17       	cp	r25, r24
    350e:	08 f4       	brcc	.+2      	; 0x3512 <ReadInductance+0x506>
    3510:	9e cd       	rjmp	.-1220   	; 0x304e <ReadInductance+0x42>
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
  } // end loop for all resistors

  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    3512:	88 e0       	ldi	r24, 0x08	; 8
    3514:	87 b9       	out	0x07, r24	; 7
  R_DDR = 0;			// switch all resistor ports to input
    3516:	14 b8       	out	0x04, r1	; 4
#endif
  return;
 } // end ReadInductance()
    3518:	6e 96       	adiw	r28, 0x1e	; 30
    351a:	0f b6       	in	r0, 0x3f	; 63
    351c:	f8 94       	cli
    351e:	de bf       	out	0x3e, r29	; 62
    3520:	0f be       	out	0x3f, r0	; 63
    3522:	cd bf       	out	0x3d, r28	; 61
    3524:	cf 91       	pop	r28
    3526:	df 91       	pop	r29
    3528:	1f 91       	pop	r17
    352a:	0f 91       	pop	r16
    352c:	ff 90       	pop	r15
    352e:	ef 90       	pop	r14
    3530:	df 90       	pop	r13
    3532:	cf 90       	pop	r12
    3534:	bf 90       	pop	r11
    3536:	af 90       	pop	r10
    3538:	9f 90       	pop	r9
    353a:	8f 90       	pop	r8
    353c:	7f 90       	pop	r7
    353e:	6f 90       	pop	r6
    3540:	5f 90       	pop	r5
    3542:	4f 90       	pop	r4
    3544:	3f 90       	pop	r3
    3546:	2f 90       	pop	r2
    3548:	08 95       	ret

0000354a <W20msReadADC>:
    354a:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <wait10ms>

0000354e <W10msReadADC>:
    354e:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <wait5ms>

00003552 <W5msReadADC>:
    3552:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <wait5ms>

00003556 <ReadADC>:
    3556:	1f 93       	push	r17
    3558:	18 2f       	mov	r17, r24
    355a:	10 64       	ori	r17, 0x40	; 64

0000355c <get_sample>:
    355c:	10 93 7c 00 	sts	0x007C, r17
    3560:	e1 2f       	mov	r30, r17
    3562:	e0 78       	andi	r30, 0x80	; 128
    3564:	80 91 3a 01 	lds	r24, 0x013A
    3568:	e8 17       	cp	r30, r24
    356a:	69 f0       	breq	.+26     	; 0x3586 <r2aa2>
    356c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <wait100us>
    3570:	80 91 7a 00 	lds	r24, 0x007A
    3574:	80 64       	ori	r24, 0x40	; 64
    3576:	80 93 7a 00 	sts	0x007A, r24

0000357a <wadc1>:
    357a:	80 91 7a 00 	lds	r24, 0x007A
    357e:	86 fd       	sbrc	r24, 6
    3580:	fc cf       	rjmp	.-8      	; 0x357a <wadc1>
    3582:	e0 93 3a 01 	sts	0x013A, r30

00003586 <r2aa2>:
    3586:	20 e0       	ldi	r18, 0x00	; 0
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	a9 01       	movw	r20, r18
    358c:	e0 e0       	ldi	r30, 0x00	; 0
    358e:	20 c0       	rjmp	.+64     	; 0x35d0 <r2ae8>

00003590 <Loop>:
    3590:	80 91 7a 00 	lds	r24, 0x007A
    3594:	80 64       	ori	r24, 0x40	; 64
    3596:	80 93 7a 00 	sts	0x007A, r24

0000359a <wadc2>:
    359a:	80 91 7a 00 	lds	r24, 0x007A
    359e:	86 fd       	sbrc	r24, 6
    35a0:	fc cf       	rjmp	.-8      	; 0x359a <wadc2>
    35a2:	60 91 78 00 	lds	r22, 0x0078
    35a6:	70 91 79 00 	lds	r23, 0x0079
    35aa:	26 0f       	add	r18, r22
    35ac:	37 1f       	adc	r19, r23
    35ae:	41 1d       	adc	r20, r1
    35b0:	51 1d       	adc	r21, r1
    35b2:	e4 30       	cpi	r30, 0x04	; 4
    35b4:	61 f4       	brne	.+24     	; 0x35ce <r2ae6>
    35b6:	80 91 3c 01 	lds	r24, 0x013C
    35ba:	80 30       	cpi	r24, 0x00	; 0
    35bc:	41 f0       	breq	.+16     	; 0x35ce <r2ae6>
    35be:	84 e0       	ldi	r24, 0x04	; 4
    35c0:	20 30       	cpi	r18, 0x00	; 0
    35c2:	38 07       	cpc	r19, r24
    35c4:	20 f4       	brcc	.+8      	; 0x35ce <r2ae6>
    35c6:	17 fd       	sbrc	r17, 7
    35c8:	02 c0       	rjmp	.+4      	; 0x35ce <r2ae6>
    35ca:	10 68       	ori	r17, 0x80	; 128
    35cc:	c7 cf       	rjmp	.-114    	; 0x355c <get_sample>

000035ce <r2ae6>:
    35ce:	ef 5f       	subi	r30, 0xFF	; 255

000035d0 <r2ae8>:
    35d0:	80 91 39 01 	lds	r24, 0x0139
    35d4:	e8 17       	cp	r30, r24
    35d6:	e0 f2       	brcs	.-72     	; 0x3590 <Loop>
    35d8:	17 ff       	sbrs	r17, 7
    35da:	05 c0       	rjmp	.+10     	; 0x35e6 <r2afe>
    35dc:	60 91 3b 01 	lds	r22, 0x013B
    35e0:	70 91 3c 01 	lds	r23, 0x013C
    35e4:	04 c0       	rjmp	.+8      	; 0x35ee <r2b02>

000035e6 <r2afe>:
    35e6:	60 91 3d 01 	lds	r22, 0x013D
    35ea:	70 91 3e 01 	lds	r23, 0x013E

000035ee <r2b02>:
    35ee:	80 e0       	ldi	r24, 0x00	; 0
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    35f6:	2f ef       	ldi	r18, 0xFF	; 255
    35f8:	33 e0       	ldi	r19, 0x03	; 3
    35fa:	41 e0       	ldi	r20, 0x01	; 1
    35fc:	62 0f       	add	r22, r18
    35fe:	74 1f       	adc	r23, r20
    3600:	81 1d       	adc	r24, r1
    3602:	91 1d       	adc	r25, r1
    3604:	40 e0       	ldi	r20, 0x00	; 0
    3606:	50 e0       	ldi	r21, 0x00	; 0
    3608:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
    360c:	b9 01       	movw	r22, r18
    360e:	ca 01       	movw	r24, r20
    3610:	20 91 39 01 	lds	r18, 0x0139
    3614:	32 2f       	mov	r19, r18
    3616:	35 95       	asr	r19
    3618:	63 0f       	add	r22, r19
    361a:	71 1d       	adc	r23, r1
    361c:	81 1d       	adc	r24, r1
    361e:	91 1d       	adc	r25, r1
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	40 e0       	ldi	r20, 0x00	; 0
    3624:	50 e0       	ldi	r21, 0x00	; 0
    3626:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
    362a:	c9 01       	movw	r24, r18
    362c:	1f 91       	pop	r17
    362e:	08 95       	ret

00003630 <GetESR>:
#include "Transistortester.h"

#define MAX_CNT 128

//=================================================================
void GetESR() {
    3630:	2f 92       	push	r2
    3632:	3f 92       	push	r3
    3634:	4f 92       	push	r4
    3636:	5f 92       	push	r5
    3638:	6f 92       	push	r6
    363a:	7f 92       	push	r7
    363c:	8f 92       	push	r8
    363e:	9f 92       	push	r9
    3640:	af 92       	push	r10
    3642:	bf 92       	push	r11
    3644:	cf 92       	push	r12
    3646:	df 92       	push	r13
    3648:	ef 92       	push	r14
    364a:	ff 92       	push	r15
    364c:	0f 93       	push	r16
    364e:	1f 93       	push	r17
    3650:	df 93       	push	r29
    3652:	cf 93       	push	r28
    3654:	cd b7       	in	r28, 0x3d	; 61
    3656:	de b7       	in	r29, 0x3e	; 62
    3658:	60 97       	sbiw	r28, 0x10	; 16
    365a:	0f b6       	in	r0, 0x3f	; 63
    365c:	f8 94       	cli
    365e:	de bf       	out	0x3e, r29	; 62
    3660:	0f be       	out	0x3f, r0	; 63
    3662:	cd bf       	out	0x3d, r28	; 61
   esr0 = (int8_t)eeprom_read_byte(&EE_ESR_ZERO);
   sumvolt[0] += (((long)sumvolt[0] * esr0) / ((RR680MI - R_L_VAL) * 10)); // subtract 0.23 Ohm from ESR
   if (sumvolt[1] > sumvolt[0]) {
      sumvolt[1] -= sumvolt[0];		// difference HighPin - LowPin Voltage with current
   } else {
      sumvolt[1] = 0;
    3664:	20 91 5c 01 	lds	r18, 0x015C
    3668:	30 91 5d 01 	lds	r19, 0x015D
    366c:	40 91 5e 01 	lds	r20, 0x015E
    3670:	50 91 5f 01 	lds	r21, 0x015F
    3674:	10 91 69 01 	lds	r17, 0x0169
  uint8_t LoADC;		// used to switch Lowpin directly to GND or VCC
  uint8_t ii,jj;		// tempory values
  int8_t esr0;			// used for ESR zero correction

  while (cap.cpre_max < -9) { // set cval to nF unit
      cap.cval_max /= 10;		// reduce value by factor ten
    3678:	6a e0       	ldi	r22, 0x0A	; 10
    367a:	a6 2e       	mov	r10, r22
    367c:	b1 2c       	mov	r11, r1
    367e:	c1 2c       	mov	r12, r1
    3680:	d1 2c       	mov	r13, r1
  uint8_t LoPinR_L;		// used to switch 680 Ohm to LowPin
  uint8_t LoADC;		// used to switch Lowpin directly to GND or VCC
  uint8_t ii,jj;		// tempory values
  int8_t esr0;			// used for ESR zero correction

  while (cap.cpre_max < -9) { // set cval to nF unit
    3682:	07 c0       	rjmp	.+14     	; 0x3692 <GetESR+0x62>
      cap.cval_max /= 10;		// reduce value by factor ten
    3684:	ca 01       	movw	r24, r20
    3686:	b9 01       	movw	r22, r18
    3688:	a6 01       	movw	r20, r12
    368a:	95 01       	movw	r18, r10
    368c:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
    3690:	1f 5f       	subi	r17, 0xFF	; 255
  uint8_t LoPinR_L;		// used to switch 680 Ohm to LowPin
  uint8_t LoADC;		// used to switch Lowpin directly to GND or VCC
  uint8_t ii,jj;		// tempory values
  int8_t esr0;			// used for ESR zero correction

  while (cap.cpre_max < -9) { // set cval to nF unit
    3692:	17 3f       	cpi	r17, 0xF7	; 247
    3694:	bc f3       	brlt	.-18     	; 0x3684 <GetESR+0x54>
    3696:	20 93 5c 01 	sts	0x015C, r18
    369a:	30 93 5d 01 	sts	0x015D, r19
    369e:	40 93 5e 01 	sts	0x015E, r20
    36a2:	50 93 5f 01 	sts	0x015F, r21
    36a6:	10 93 69 01 	sts	0x0169, r17
      cap.cval_max /= 10;		// reduce value by factor ten
      cap.cpre_max++;		// take next decimal prefix
  }
  if (cap.cval_max < 1800) return;			//capacity lower than 1.8 uF
    36aa:	28 30       	cpi	r18, 0x08	; 8
    36ac:	67 e0       	ldi	r22, 0x07	; 7
    36ae:	36 07       	cpc	r19, r22
    36b0:	60 e0       	ldi	r22, 0x00	; 0
    36b2:	46 07       	cpc	r20, r22
    36b4:	60 e0       	ldi	r22, 0x00	; 0
    36b6:	56 07       	cpc	r21, r22
    36b8:	08 f4       	brcc	.+2      	; 0x36bc <GetESR+0x8c>
    36ba:	21 c2       	rjmp	.+1090   	; 0x3afe <GetESR+0x4ce>
  lcd_fix_string(ESR_str);		// " ESR="
    36bc:	8c e2       	ldi	r24, 0x2C	; 44
    36be:	91 e0       	ldi	r25, 0x01	; 1
    36c0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_fix_string>
  LoADC = MEM_read_byte(&PinADCtab[cap.ca]) | TXD_MSK;
    36c4:	00 91 66 01 	lds	r16, 0x0166
    36c8:	10 e0       	ldi	r17, 0x00	; 0
    36ca:	c8 01       	movw	r24, r16
    36cc:	88 55       	subi	r24, 0x58	; 88
    36ce:	9e 4f       	sbci	r25, 0xFE	; 254
    36d0:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__eerd_byte_m168>
    36d4:	98 e0       	ldi	r25, 0x08	; 8
    36d6:	c9 2e       	mov	r12, r25
    36d8:	c8 2a       	or	r12, r24
  HiADC = MEM_read_byte(&PinADCtab[cap.cb]) | TXD_MSK;
    36da:	80 91 67 01 	lds	r24, 0x0167
    36de:	e8 2e       	mov	r14, r24
    36e0:	ff 24       	eor	r15, r15
    36e2:	c7 01       	movw	r24, r14
    36e4:	88 55       	subi	r24, 0x58	; 88
    36e6:	9e 4f       	sbci	r25, 0xFE	; 254
    36e8:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__eerd_byte_m168>
    36ec:	b8 e0       	ldi	r27, 0x08	; 8
    36ee:	bb 2e       	mov	r11, r27
    36f0:	b8 2a       	or	r11, r24
  LoPinR_L = MEM_read_byte(&PinRLtab[cap.ca]);  //R_L mask for LowPin R_L load
    36f2:	c8 01       	movw	r24, r16
    36f4:	8b 55       	subi	r24, 0x5B	; 91
    36f6:	9e 4f       	sbci	r25, 0xFE	; 254
    36f8:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__eerd_byte_m168>
    36fc:	a8 2e       	mov	r10, r24
  HiPinR_L = MEM_read_byte(&PinRLtab[cap.cb]);	//R_L mask for HighPin R_L load
    36fe:	c7 01       	movw	r24, r14
    3700:	8b 55       	subi	r24, 0x5B	; 91
    3702:	9e 4f       	sbci	r25, 0xFE	; 254
    3704:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__eerd_byte_m168>
    3708:	d8 2e       	mov	r13, r24
// Measurement of ESR of capacitors AC Mode
   sumvolt[0] = 1;		// set sum of LowPin voltage to 1 to prevent divide by zero
   sumvolt[1] = 1;		// clear sum of HighPin voltage with current
                                // offset is about (x*10*200)/34000 in 0.01 Ohm units
   sumvolt[2] = 0;		// clear sum of HighPin voltage without current
   EntladePins();	// discharge capacitor
    370a:	0e 94 c8 01 	call	0x390	; 0x390 <EntladePins>
   ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    370e:	88 e0       	ldi	r24, 0x08	; 8
    3710:	88 b9       	out	0x08, r24	; 8
  LoPinR_L = MEM_read_byte(&PinRLtab[cap.ca]);  //R_L mask for LowPin R_L load
  HiPinR_L = MEM_read_byte(&PinRLtab[cap.cb]);	//R_L mask for HighPin R_L load


// Measurement of ESR of capacitors AC Mode
   sumvolt[0] = 1;		// set sum of LowPin voltage to 1 to prevent divide by zero
    3712:	a1 e0       	ldi	r26, 0x01	; 1
    3714:	ea 2e       	mov	r14, r26
    3716:	f1 2c       	mov	r15, r1
    3718:	01 2d       	mov	r16, r1
    371a:	11 2d       	mov	r17, r1
   sumvolt[1] = 1;		// clear sum of HighPin voltage with current
    371c:	81 e0       	ldi	r24, 0x01	; 1
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	a0 e0       	ldi	r26, 0x00	; 0
    3722:	b0 e0       	ldi	r27, 0x00	; 0
    3724:	89 83       	std	Y+1, r24	; 0x01
    3726:	9a 83       	std	Y+2, r25	; 0x02
    3728:	ab 83       	std	Y+3, r26	; 0x03
    372a:	bc 83       	std	Y+4, r27	; 0x04
                                // offset is about (x*10*200)/34000 in 0.01 Ohm units
   sumvolt[2] = 0;		// clear sum of HighPin voltage without current
    372c:	1d 82       	std	Y+5, r1	; 0x05
    372e:	1e 82       	std	Y+6, r1	; 0x06
    3730:	1f 82       	std	Y+7, r1	; 0x07
    3732:	18 86       	std	Y+8, r1	; 0x08
   EntladePins();	// discharge capacitor
   ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
// measurement frequency is given by sum of ADC-Reads < 680 Hz
   // ADC Sample and Hold (SH) is done 1.5 ADC clock number after starting 
   for(ii=0;ii<MAX_CNT;ii++) {
    3734:	66 24       	eor	r6, r6
      ADC_DDR = LoADC;				// switch Low-Pin to output (GND)
    3736:	c7 b8       	out	0x07, r12	; 7
       ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);	// switch ADC to LowPin, Internal Ref. 
    3738:	80 91 66 01 	lds	r24, 0x0166
    373c:	80 6c       	ori	r24, 0xC0	; 192
    373e:	80 93 7c 00 	sts	0x007C, r24
       ADCSRA |= (1<<ADSC);				// Start Conversion
    3742:	80 91 7a 00 	lds	r24, 0x007A
    3746:	80 64       	ori	r24, 0x40	; 64
    3748:	80 93 7a 00 	sts	0x007A, r24
       while (ADCSRA&(1<<ADSC));	// wait dummy read , sync with ADC-clock
    374c:	80 91 7a 00 	lds	r24, 0x007A
    3750:	86 fd       	sbrc	r24, 6
    3752:	fc cf       	rjmp	.-8      	; 0x374c <GetESR+0x11c>
      while (1) {
         R_PORT = HiPinR_L;			// switch R-Port to VCC
    3754:	d5 b8       	out	0x05, r13	; 5
         R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (VCC)
    3756:	d4 b8       	out	0x04, r13	; 4
          ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);      // switch ADC to LowPin, Internal Ref. 
    3758:	80 91 66 01 	lds	r24, 0x0166
    375c:	80 6c       	ori	r24, 0xC0	; 192
    375e:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    3762:	80 91 7a 00 	lds	r24, 0x007A
    3766:	80 64       	ori	r24, 0x40	; 64
    3768:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    376c:	80 91 7a 00 	lds	r24, 0x007A
    3770:	86 fd       	sbrc	r24, 6
    3772:	fc cf       	rjmp	.-8      	; 0x376c <GetESR+0x13c>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    3774:	80 91 7a 00 	lds	r24, 0x007A
    3778:	80 64       	ori	r24, 0x40	; 64
    377a:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    377e:	80 91 7a 00 	lds	r24, 0x007A
    3782:	86 fd       	sbrc	r24, 6
    3784:	fc cf       	rjmp	.-8      	; 0x377e <GetESR+0x14e>
         adcv[0] = ADCW;			// Voltage LowPin with current
    3786:	20 90 78 00 	lds	r2, 0x0078
    378a:	30 90 79 00 	lds	r3, 0x0079
          ADMUX = cap.cb | (1<<REFS1) | (1<<REFS0);      // switch ADC to HighPin, Internal Ref. 
    378e:	80 91 67 01 	lds	r24, 0x0167
    3792:	80 6c       	ori	r24, 0xC0	; 192
    3794:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    3798:	80 91 7a 00 	lds	r24, 0x007A
    379c:	80 64       	ori	r24, 0x40	; 64
    379e:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    37a2:	80 91 7a 00 	lds	r24, 0x007A
    37a6:	86 fd       	sbrc	r24, 6
    37a8:	fc cf       	rjmp	.-8      	; 0x37a2 <GetESR+0x172>
         ADCSRA |= (1<<ADSC);			// Start Conversion, real start is rising edge of ADC clock
    37aa:	80 91 7a 00 	lds	r24, 0x007A
    37ae:	80 64       	ori	r24, 0x40	; 64
    37b0:	80 93 7a 00 	sts	0x007A, r24
         wait10us();				// 2.5 ADC clocks = 20 us
    37b4:	0e 94 02 15 	call	0x2a04	; 0x2a04 <wait10us>
         wait5us();			
    37b8:	0e 94 03 15 	call	0x2a06	; 0x2a06 <wait5us>
         wait3us();				// with only 17 us delay the voltage goes down before SH
    37bc:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <wait3us>
         wdt_reset();
    37c0:	a8 95       	wdr
         wdt_reset();
    37c2:	a8 95       	wdr
         wdt_reset();
    37c4:	a8 95       	wdr
         wdt_reset();
    37c6:	a8 95       	wdr
         wdt_reset();
    37c8:	a8 95       	wdr
         wdt_reset();
    37ca:	a8 95       	wdr
//         wdt_reset();				// with wdt_reset the timing can be adjusted,
						// when time is too short, voltage is down before SH of ADC
						// when time is too long, capacitor will be overloaded.
						// That will cause too high voltage without current.
         R_DDR = 0;				// switch current off,  SH is 1.5 ADC clock behind start
    37cc:	14 b8       	out	0x04, r1	; 4
         while (ADCSRA&(1<<ADSC));		// wait for conversion finished
    37ce:	80 91 7a 00 	lds	r24, 0x007A
    37d2:	86 fd       	sbrc	r24, 6
    37d4:	fc cf       	rjmp	.-8      	; 0x37ce <GetESR+0x19e>
         adcv[1] = ADCW;			// Voltage HighPin with current
    37d6:	20 91 78 00 	lds	r18, 0x0078
    37da:	30 91 79 00 	lds	r19, 0x0079
         R_PORT = 0;
    37de:	15 b8       	out	0x05, r1	; 5
          ADCSRA |= (1<<ADSC);			// Start Conversion
    37e0:	80 91 7a 00 	lds	r24, 0x007A
    37e4:	80 64       	ori	r24, 0x40	; 64
    37e6:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read
    37ea:	80 91 7a 00 	lds	r24, 0x007A
    37ee:	86 fd       	sbrc	r24, 6
    37f0:	fc cf       	rjmp	.-8      	; 0x37ea <GetESR+0x1ba>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    37f2:	80 91 7a 00 	lds	r24, 0x007A
    37f6:	80 64       	ori	r24, 0x40	; 64
    37f8:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    37fc:	80 91 7a 00 	lds	r24, 0x007A
    3800:	86 fd       	sbrc	r24, 6
    3802:	fc cf       	rjmp	.-8      	; 0x37fc <GetESR+0x1cc>
         adcv[2] = ADCW;			// Voltage HighPin without current
    3804:	80 91 78 00 	lds	r24, 0x0078
    3808:	90 91 79 00 	lds	r25, 0x0079
         if (adcv[2] > 2) break;
    380c:	83 30       	cpi	r24, 0x03	; 3
    380e:	91 05       	cpc	r25, r1
    3810:	10 f4       	brcc	.+4      	; 0x3816 <GetESR+0x1e6>
         wdt_reset();
    3812:	a8 95       	wdr
      }
    3814:	9f cf       	rjmp	.-194    	; 0x3754 <GetESR+0x124>
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
    3816:	44 24       	eor	r4, r4
    3818:	55 24       	eor	r5, r5
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    381a:	a9 01       	movw	r20, r18
    381c:	60 e0       	ldi	r22, 0x00	; 0
    381e:	70 e0       	ldi	r23, 0x00	; 0
    3820:	49 87       	std	Y+9, r20	; 0x09
    3822:	5a 87       	std	Y+10, r21	; 0x0a
    3824:	6b 87       	std	Y+11, r22	; 0x0b
    3826:	7c 87       	std	Y+12, r23	; 0x0c
      sumvolt[2] += adcv[2]; 			// capacitor voltage without current
    3828:	9c 01       	movw	r18, r24
    382a:	40 e0       	ldi	r20, 0x00	; 0
    382c:	50 e0       	ldi	r21, 0x00	; 0
    382e:	2d 87       	std	Y+13, r18	; 0x0d
    3830:	3e 87       	std	Y+14, r19	; 0x0e
    3832:	4f 87       	std	Y+15, r20	; 0x0f
    3834:	58 8b       	std	Y+16, r21	; 0x10
      ADC_DDR = HiADC;				// switch High Pin to GND
    3836:	b7 b8       	out	0x07, r11	; 7
       ADCSRA |= (1<<ADSC);			// Start Conversion
    3838:	80 91 7a 00 	lds	r24, 0x007A
    383c:	80 64       	ori	r24, 0x40	; 64
    383e:	80 93 7a 00 	sts	0x007A, r24
       while (ADCSRA&(1<<ADSC));		// wait dummy read
    3842:	80 91 7a 00 	lds	r24, 0x007A
    3846:	86 fd       	sbrc	r24, 6
    3848:	fc cf       	rjmp	.-8      	; 0x3842 <GetESR+0x212>
      while (1) {
         R_PORT = LoPinR_L;
    384a:	a5 b8       	out	0x05, r10	; 5
         R_DDR = LoPinR_L;			// switch LowPin with 680 Ohm to VCC
    384c:	a4 b8       	out	0x04, r10	; 4
         wdt_reset();
    384e:	a8 95       	wdr
          ADMUX = cap.cb | (1<<REFS1) | (1<<REFS0);      // switch ADC to HighPin, Internal Ref. 
    3850:	80 91 67 01 	lds	r24, 0x0167
    3854:	80 6c       	ori	r24, 0xC0	; 192
    3856:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    385a:	80 91 7a 00 	lds	r24, 0x007A
    385e:	80 64       	ori	r24, 0x40	; 64
    3860:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    3864:	80 91 7a 00 	lds	r24, 0x007A
    3868:	86 fd       	sbrc	r24, 6
    386a:	fc cf       	rjmp	.-8      	; 0x3864 <GetESR+0x234>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    386c:	80 91 7a 00 	lds	r24, 0x007A
    3870:	80 64       	ori	r24, 0x40	; 64
    3872:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    3876:	80 91 7a 00 	lds	r24, 0x007A
    387a:	86 fd       	sbrc	r24, 6
    387c:	fc cf       	rjmp	.-8      	; 0x3876 <GetESR+0x246>
         adcv[0] = ADCW;			// Voltage HighPin with current
    387e:	80 90 78 00 	lds	r8, 0x0078
    3882:	90 90 79 00 	lds	r9, 0x0079
          ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);      // switch ADC to LowPin, Internal Ref. 
    3886:	80 91 66 01 	lds	r24, 0x0166
    388a:	80 6c       	ori	r24, 0xC0	; 192
    388c:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    3890:	80 91 7a 00 	lds	r24, 0x007A
    3894:	80 64       	ori	r24, 0x40	; 64
    3896:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    389a:	80 91 7a 00 	lds	r24, 0x007A
    389e:	86 fd       	sbrc	r24, 6
    38a0:	fc cf       	rjmp	.-8      	; 0x389a <GetESR+0x26a>
         ADCSRA |= (1<<ADSC);			// Start Conversion, real start is rising edge of ADC clock
    38a2:	80 91 7a 00 	lds	r24, 0x007A
    38a6:	80 64       	ori	r24, 0x40	; 64
    38a8:	80 93 7a 00 	sts	0x007A, r24
         wait10us();				// 2.5 ADC clocks = 20 us
    38ac:	0e 94 02 15 	call	0x2a04	; 0x2a04 <wait10us>
         wait5us();			
    38b0:	0e 94 03 15 	call	0x2a06	; 0x2a06 <wait5us>
         wait3us();				// with only 17 us delay the voltage goes down before SH
    38b4:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <wait3us>
         wdt_reset();
    38b8:	a8 95       	wdr
         wdt_reset();
    38ba:	a8 95       	wdr
         wdt_reset();
    38bc:	a8 95       	wdr
         wdt_reset();
    38be:	a8 95       	wdr
         wdt_reset();
    38c0:	a8 95       	wdr
         wdt_reset();
    38c2:	a8 95       	wdr
//         wdt_reset();				// with wdt_reset the timing can be adjusted,
						// when time is too short, voltage is down before SH of ADC
						// when time is too long, capacitor will be overloaded.
						// That will cause too high voltage without current.
         R_DDR = 0;				// switch current off, SH is 1.5 ADC clock ticks behind start
    38c4:	14 b8       	out	0x04, r1	; 4
         while (ADCSRA&(1<<ADSC));		// wait for conversion finished
    38c6:	80 91 7a 00 	lds	r24, 0x007A
    38ca:	86 fd       	sbrc	r24, 6
    38cc:	fc cf       	rjmp	.-8      	; 0x38c6 <GetESR+0x296>
         adcv[1] = ADCW;			//  Voltage LowPin with current
    38ce:	40 91 78 00 	lds	r20, 0x0078
    38d2:	50 91 79 00 	lds	r21, 0x0079
         R_PORT = 0;
    38d6:	15 b8       	out	0x05, r1	; 5
          ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);      // switch ADC to LowPin, Internal Ref. 
    38d8:	80 91 66 01 	lds	r24, 0x0166
    38dc:	80 6c       	ori	r24, 0xC0	; 192
    38de:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);		// Start Conversion
    38e2:	80 91 7a 00 	lds	r24, 0x007A
    38e6:	80 64       	ori	r24, 0x40	; 64
    38e8:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read
    38ec:	80 91 7a 00 	lds	r24, 0x007A
    38f0:	86 fd       	sbrc	r24, 6
    38f2:	fc cf       	rjmp	.-8      	; 0x38ec <GetESR+0x2bc>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    38f4:	80 91 7a 00 	lds	r24, 0x007A
    38f8:	80 64       	ori	r24, 0x40	; 64
    38fa:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    38fe:	80 91 7a 00 	lds	r24, 0x007A
    3902:	86 fd       	sbrc	r24, 6
    3904:	fc cf       	rjmp	.-8      	; 0x38fe <GetESR+0x2ce>
         adcv[2] = ADCW;			// Voltage LowPin without current
    3906:	20 91 78 00 	lds	r18, 0x0078
    390a:	30 91 79 00 	lds	r19, 0x0079
         if (adcv[2] > 2) break;
    390e:	23 30       	cpi	r18, 0x03	; 3
    3910:	31 05       	cpc	r19, r1
    3912:	10 f4       	brcc	.+4      	; 0x3918 <GetESR+0x2e8>
         wdt_reset();
    3914:	a8 95       	wdr
      }
    3916:	99 cf       	rjmp	.-206    	; 0x384a <GetESR+0x21a>
      R_DDR = 0;				// switch current off
    3918:	14 b8       	out	0x04, r1	; 4
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
    391a:	c4 01       	movw	r24, r8
    391c:	a0 e0       	ldi	r26, 0x00	; 0
    391e:	b0 e0       	ldi	r27, 0x00	; 0
         while (ADCSRA&(1<<ADSC));		// wait
         adcv[2] = ADCW;			// Voltage HighPin without current
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
    3920:	82 0d       	add	r24, r2
    3922:	93 1d       	adc	r25, r3
    3924:	a4 1d       	adc	r26, r4
    3926:	b5 1d       	adc	r27, r5
         adcv[2] = ADCW;			// Voltage LowPin without current
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      R_DDR = 0;				// switch current off
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
    3928:	e8 0e       	add	r14, r24
    392a:	f9 1e       	adc	r15, r25
    392c:	0a 1f       	adc	r16, r26
    392e:	1b 1f       	adc	r17, r27
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    3930:	ca 01       	movw	r24, r20
    3932:	a0 e0       	ldi	r26, 0x00	; 0
    3934:	b0 e0       	ldi	r27, 0x00	; 0
         adcv[2] = ADCW;			// Voltage HighPin without current
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    3936:	49 85       	ldd	r20, Y+9	; 0x09
    3938:	5a 85       	ldd	r21, Y+10	; 0x0a
    393a:	6b 85       	ldd	r22, Y+11	; 0x0b
    393c:	7c 85       	ldd	r23, Y+12	; 0x0c
    393e:	84 0f       	add	r24, r20
    3940:	95 1f       	adc	r25, r21
    3942:	a6 1f       	adc	r26, r22
    3944:	b7 1f       	adc	r27, r23
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      R_DDR = 0;				// switch current off
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    3946:	49 81       	ldd	r20, Y+1	; 0x01
    3948:	5a 81       	ldd	r21, Y+2	; 0x02
    394a:	6b 81       	ldd	r22, Y+3	; 0x03
    394c:	7c 81       	ldd	r23, Y+4	; 0x04
    394e:	48 0f       	add	r20, r24
    3950:	59 1f       	adc	r21, r25
    3952:	6a 1f       	adc	r22, r26
    3954:	7b 1f       	adc	r23, r27
    3956:	49 83       	std	Y+1, r20	; 0x01
    3958:	5a 83       	std	Y+2, r21	; 0x02
    395a:	6b 83       	std	Y+3, r22	; 0x03
    395c:	7c 83       	std	Y+4, r23	; 0x04
      sumvolt[2] += adcv[2];			// add  HighPin voltages without current
    395e:	40 e0       	ldi	r20, 0x00	; 0
    3960:	50 e0       	ldi	r21, 0x00	; 0
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
      sumvolt[2] += adcv[2]; 			// capacitor voltage without current
    3962:	6d 85       	ldd	r22, Y+13	; 0x0d
    3964:	7e 85       	ldd	r23, Y+14	; 0x0e
    3966:	8f 85       	ldd	r24, Y+15	; 0x0f
    3968:	98 89       	ldd	r25, Y+16	; 0x10
    396a:	26 0f       	add	r18, r22
    396c:	37 1f       	adc	r19, r23
    396e:	48 1f       	adc	r20, r24
    3970:	59 1f       	adc	r21, r25
         wdt_reset();
      }
      R_DDR = 0;				// switch current off
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
      sumvolt[2] += adcv[2];			// add  HighPin voltages without current
    3972:	8d 81       	ldd	r24, Y+5	; 0x05
    3974:	9e 81       	ldd	r25, Y+6	; 0x06
    3976:	af 81       	ldd	r26, Y+7	; 0x07
    3978:	b8 85       	ldd	r27, Y+8	; 0x08
    397a:	82 0f       	add	r24, r18
    397c:	93 1f       	adc	r25, r19
    397e:	a4 1f       	adc	r26, r20
    3980:	b5 1f       	adc	r27, r21
    3982:	8d 83       	std	Y+5, r24	; 0x05
    3984:	9e 83       	std	Y+6, r25	; 0x06
    3986:	af 83       	std	Y+7, r26	; 0x07
    3988:	b8 87       	std	Y+8, r27	; 0x08
   sumvolt[2] = 0;		// clear sum of HighPin voltage without current
   EntladePins();	// discharge capacitor
   ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
// measurement frequency is given by sum of ADC-Reads < 680 Hz
   // ADC Sample and Hold (SH) is done 1.5 ADC clock number after starting 
   for(ii=0;ii<MAX_CNT;ii++) {
    398a:	63 94       	inc	r6
    398c:	96 2d       	mov	r25, r6
    398e:	90 38       	cpi	r25, 0x80	; 128
    3990:	09 f0       	breq	.+2      	; 0x3994 <GetESR+0x364>
    3992:	d1 ce       	rjmp	.-606    	; 0x3736 <GetESR+0x106>
   } // end for
   // we need to compensate the time delay between reading the LowPin Voltage and the
   // HighPin Voltage, which is usually 2 * 14 * 8 us = 224 us.
   // With the loading of the capacitor the current will sink, so we get a too high voltage at
   // the LowPin. The velocity of degration is inversely proportional to time constant (represented by capacity value).
   sumvolt[0] -= (sumvolt[0] * 150UL)  / cap.cval_max;
    3994:	c8 01       	movw	r24, r16
    3996:	b7 01       	movw	r22, r14
    3998:	26 e9       	ldi	r18, 0x96	; 150
    399a:	30 e0       	ldi	r19, 0x00	; 0
    399c:	40 e0       	ldi	r20, 0x00	; 0
    399e:	50 e0       	ldi	r21, 0x00	; 0
    39a0:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    39a4:	20 91 5c 01 	lds	r18, 0x015C
    39a8:	30 91 5d 01 	lds	r19, 0x015D
    39ac:	40 91 5e 01 	lds	r20, 0x015E
    39b0:	50 91 5f 01 	lds	r21, 0x015F
    39b4:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
    39b8:	57 01       	movw	r10, r14
    39ba:	68 01       	movw	r12, r16
    39bc:	a2 1a       	sub	r10, r18
    39be:	b3 0a       	sbc	r11, r19
    39c0:	c4 0a       	sbc	r12, r20
    39c2:	d5 0a       	sbc	r13, r21
   esr0 = (int8_t)eeprom_read_byte(&EE_ESR_ZERO);
    39c4:	80 ec       	ldi	r24, 0xC0	; 192
    39c6:	91 e0       	ldi	r25, 0x01	; 1
    39c8:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <__eerd_byte_m168>
    39cc:	28 2e       	mov	r2, r24
   sumvolt[0] += (((long)sumvolt[0] * esr0) / ((RR680MI - R_L_VAL) * 10)); // subtract 0.23 Ohm from ESR
    39ce:	40 90 02 01 	lds	r4, 0x0102
    39d2:	50 90 03 01 	lds	r5, 0x0103
    39d6:	68 2f       	mov	r22, r24
    39d8:	77 27       	eor	r23, r23
    39da:	67 fd       	sbrc	r22, 7
    39dc:	70 95       	com	r23
    39de:	87 2f       	mov	r24, r23
    39e0:	97 2f       	mov	r25, r23
    39e2:	a6 01       	movw	r20, r12
    39e4:	95 01       	movw	r18, r10
    39e6:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    39ea:	92 01       	movw	r18, r4
    39ec:	22 0f       	add	r18, r18
    39ee:	33 1f       	adc	r19, r19
    39f0:	a2 01       	movw	r20, r4
    39f2:	e3 e0       	ldi	r30, 0x03	; 3
    39f4:	44 0f       	add	r20, r20
    39f6:	55 1f       	adc	r21, r21
    39f8:	ea 95       	dec	r30
    39fa:	e1 f7       	brne	.-8      	; 0x39f4 <GetESR+0x3c4>
    39fc:	24 0f       	add	r18, r20
    39fe:	35 1f       	adc	r19, r21
    3a00:	20 5a       	subi	r18, 0xA0	; 160
    3a02:	39 40       	sbci	r19, 0x09	; 9
    3a04:	40 e0       	ldi	r20, 0x00	; 0
    3a06:	50 e0       	ldi	r21, 0x00	; 0
    3a08:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__divmodsi4>
    3a0c:	79 01       	movw	r14, r18
    3a0e:	8a 01       	movw	r16, r20
    3a10:	ea 0c       	add	r14, r10
    3a12:	fb 1c       	adc	r15, r11
    3a14:	0c 1d       	adc	r16, r12
    3a16:	1d 1d       	adc	r17, r13
   if (sumvolt[1] > sumvolt[0]) {
    3a18:	29 81       	ldd	r18, Y+1	; 0x01
    3a1a:	3a 81       	ldd	r19, Y+2	; 0x02
    3a1c:	4b 81       	ldd	r20, Y+3	; 0x03
    3a1e:	5c 81       	ldd	r21, Y+4	; 0x04
    3a20:	e2 16       	cp	r14, r18
    3a22:	f3 06       	cpc	r15, r19
    3a24:	04 07       	cpc	r16, r20
    3a26:	15 07       	cpc	r17, r21
    3a28:	38 f4       	brcc	.+14     	; 0x3a38 <GetESR+0x408>
      sumvolt[1] -= sumvolt[0];		// difference HighPin - LowPin Voltage with current
    3a2a:	59 01       	movw	r10, r18
    3a2c:	6a 01       	movw	r12, r20
    3a2e:	ae 18       	sub	r10, r14
    3a30:	bf 08       	sbc	r11, r15
    3a32:	c0 0a       	sbc	r12, r16
    3a34:	d1 0a       	sbc	r13, r17
    3a36:	03 c0       	rjmp	.+6      	; 0x3a3e <GetESR+0x40e>
   } else {
      sumvolt[1] = 0;
    3a38:	aa 24       	eor	r10, r10
    3a3a:	bb 24       	eor	r11, r11
    3a3c:	65 01       	movw	r12, r10
   }
   sumvolt[2] = (sumvolt[2] * 980) / 1000;	// scale down the voltage without current with 98.0%
    3a3e:	6d 81       	ldd	r22, Y+5	; 0x05
    3a40:	7e 81       	ldd	r23, Y+6	; 0x06
    3a42:	8f 81       	ldd	r24, Y+7	; 0x07
    3a44:	98 85       	ldd	r25, Y+8	; 0x08
    3a46:	24 ed       	ldi	r18, 0xD4	; 212
    3a48:	33 e0       	ldi	r19, 0x03	; 3
    3a4a:	40 e0       	ldi	r20, 0x00	; 0
    3a4c:	50 e0       	ldi	r21, 0x00	; 0
    3a4e:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    3a52:	28 ee       	ldi	r18, 0xE8	; 232
    3a54:	33 e0       	ldi	r19, 0x03	; 3
    3a56:	40 e0       	ldi	r20, 0x00	; 0
    3a58:	50 e0       	ldi	r21, 0x00	; 0
    3a5a:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
    3a5e:	39 01       	movw	r6, r18
    3a60:	4a 01       	movw	r8, r20
    3a62:	b2 01       	movw	r22, r4
    3a64:	60 59       	subi	r22, 0x90	; 144
    3a66:	7a 41       	sbci	r23, 0x1A	; 26
   jj = 0;
   if (sumvolt[1] >= sumvolt[2]) {
    3a68:	a2 16       	cp	r10, r18
    3a6a:	b3 06       	cpc	r11, r19
    3a6c:	c4 06       	cpc	r12, r20
    3a6e:	d5 06       	cpc	r13, r21
    3a70:	08 f1       	brcs	.+66     	; 0x3ab4 <GetESR+0x484>
      // mean voltage at the capacitor is higher with current
      // sumvolt[0] is the sum of voltages at LowPin, caused by output resistance of Port
      // (RR680MI - R_L_VAL) is the port output resistance in 0.1 Ohm units.
      // we scale up the difference voltage with 10 to get 0.01 Ohm units of ESR
      cap.esr = ((sumvolt[1] - sumvolt[2]) * 10 * (unsigned long)(RR680MI - R_L_VAL)) / sumvolt[0];
    3a72:	80 e0       	ldi	r24, 0x00	; 0
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	2a e0       	ldi	r18, 0x0A	; 10
    3a78:	30 e0       	ldi	r19, 0x00	; 0
    3a7a:	40 e0       	ldi	r20, 0x00	; 0
    3a7c:	50 e0       	ldi	r21, 0x00	; 0
    3a7e:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    3a82:	a6 01       	movw	r20, r12
    3a84:	95 01       	movw	r18, r10
    3a86:	26 19       	sub	r18, r6
    3a88:	37 09       	sbc	r19, r7
    3a8a:	48 09       	sbc	r20, r8
    3a8c:	59 09       	sbc	r21, r9
    3a8e:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    3a92:	a8 01       	movw	r20, r16
    3a94:	97 01       	movw	r18, r14
    3a96:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
    3a9a:	30 93 65 01 	sts	0x0165, r19
    3a9e:	20 93 64 01 	sts	0x0164, r18
      DisplayValue(cap.esr,-2,LCD_CHAR_OMEGA,2);
    3aa2:	b9 01       	movw	r22, r18
    3aa4:	80 e0       	ldi	r24, 0x00	; 0
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
    3aa8:	4e ef       	ldi	r20, 0xFE	; 254
    3aaa:	24 ef       	ldi	r18, 0xF4	; 244
    3aac:	02 e0       	ldi	r16, 0x02	; 2
    3aae:	0e 94 bb 02 	call	0x576	; 0x576 <DisplayValue>
    3ab2:	25 c0       	rjmp	.+74     	; 0x3afe <GetESR+0x4ce>
   } else {
      jj = ((sumvolt[2] - sumvolt[1]) * 10 * (unsigned long)(RR680MI - R_L_VAL)) / sumvolt[0];
    3ab4:	80 e0       	ldi	r24, 0x00	; 0
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	2a e0       	ldi	r18, 0x0A	; 10
    3aba:	30 e0       	ldi	r19, 0x00	; 0
    3abc:	40 e0       	ldi	r20, 0x00	; 0
    3abe:	50 e0       	ldi	r21, 0x00	; 0
    3ac0:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    3ac4:	a4 01       	movw	r20, r8
    3ac6:	93 01       	movw	r18, r6
    3ac8:	2a 19       	sub	r18, r10
    3aca:	3b 09       	sbc	r19, r11
    3acc:	4c 09       	sbc	r20, r12
    3ace:	5d 09       	sbc	r21, r13
    3ad0:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <__mulsi3>
    3ad4:	a8 01       	movw	r20, r16
    3ad6:	97 01       	movw	r18, r14
    3ad8:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
    3adc:	12 2f       	mov	r17, r18
      lcd_data('0');
    3ade:	80 e3       	ldi	r24, 0x30	; 48
    3ae0:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
      if ((jj < 100) && (jj > 0)) {
    3ae4:	81 2f       	mov	r24, r17
    3ae6:	81 50       	subi	r24, 0x01	; 1
    3ae8:	83 36       	cpi	r24, 0x63	; 99
    3aea:	48 f4       	brcc	.+18     	; 0x3afe <GetESR+0x4ce>
         lcd_data('?');			// mark ESR zero correction
    3aec:	8f e3       	ldi	r24, 0x3F	; 63
    3aee:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_data>
         esr0 -= jj;			// correct ESR_ZERO by negative resistance
    3af2:	62 2d       	mov	r22, r2
    3af4:	61 1b       	sub	r22, r17
         eeprom_write_byte((uint8_t *)(&EE_ESR_ZERO), (int8_t)esr0);       // fix new zero offset 
    3af6:	80 ec       	ldi	r24, 0xC0	; 192
    3af8:	91 e0       	ldi	r25, 0x01	; 1
    3afa:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__eewr_byte_m168>
//   lcd_line3();
//   DisplayValue(jj,0,' ',4);	// correction for ESR_ZERO
//   DisplayValue(1000+esr0,0,' ',4);	// new ESR_ZERO
#endif
  return;
}
    3afe:	60 96       	adiw	r28, 0x10	; 16
    3b00:	0f b6       	in	r0, 0x3f	; 63
    3b02:	f8 94       	cli
    3b04:	de bf       	out	0x3e, r29	; 62
    3b06:	0f be       	out	0x3f, r0	; 63
    3b08:	cd bf       	out	0x3d, r28	; 61
    3b0a:	cf 91       	pop	r28
    3b0c:	df 91       	pop	r29
    3b0e:	1f 91       	pop	r17
    3b10:	0f 91       	pop	r16
    3b12:	ff 90       	pop	r15
    3b14:	ef 90       	pop	r14
    3b16:	df 90       	pop	r13
    3b18:	cf 90       	pop	r12
    3b1a:	bf 90       	pop	r11
    3b1c:	af 90       	pop	r10
    3b1e:	9f 90       	pop	r9
    3b20:	8f 90       	pop	r8
    3b22:	7f 90       	pop	r7
    3b24:	6f 90       	pop	r6
    3b26:	5f 90       	pop	r5
    3b28:	4f 90       	pop	r4
    3b2a:	3f 90       	pop	r3
    3b2c:	2f 90       	pop	r2
    3b2e:	08 95       	ret

00003b30 <__mulsi3>:
    3b30:	62 9f       	mul	r22, r18
    3b32:	d0 01       	movw	r26, r0
    3b34:	73 9f       	mul	r23, r19
    3b36:	f0 01       	movw	r30, r0
    3b38:	82 9f       	mul	r24, r18
    3b3a:	e0 0d       	add	r30, r0
    3b3c:	f1 1d       	adc	r31, r1
    3b3e:	64 9f       	mul	r22, r20
    3b40:	e0 0d       	add	r30, r0
    3b42:	f1 1d       	adc	r31, r1
    3b44:	92 9f       	mul	r25, r18
    3b46:	f0 0d       	add	r31, r0
    3b48:	83 9f       	mul	r24, r19
    3b4a:	f0 0d       	add	r31, r0
    3b4c:	74 9f       	mul	r23, r20
    3b4e:	f0 0d       	add	r31, r0
    3b50:	65 9f       	mul	r22, r21
    3b52:	f0 0d       	add	r31, r0
    3b54:	99 27       	eor	r25, r25
    3b56:	72 9f       	mul	r23, r18
    3b58:	b0 0d       	add	r27, r0
    3b5a:	e1 1d       	adc	r30, r1
    3b5c:	f9 1f       	adc	r31, r25
    3b5e:	63 9f       	mul	r22, r19
    3b60:	b0 0d       	add	r27, r0
    3b62:	e1 1d       	adc	r30, r1
    3b64:	f9 1f       	adc	r31, r25
    3b66:	bd 01       	movw	r22, r26
    3b68:	cf 01       	movw	r24, r30
    3b6a:	11 24       	eor	r1, r1
    3b6c:	08 95       	ret

00003b6e <__udivmodqi4>:
    3b6e:	99 1b       	sub	r25, r25
    3b70:	79 e0       	ldi	r23, 0x09	; 9
    3b72:	04 c0       	rjmp	.+8      	; 0x3b7c <__udivmodqi4_ep>

00003b74 <__udivmodqi4_loop>:
    3b74:	99 1f       	adc	r25, r25
    3b76:	96 17       	cp	r25, r22
    3b78:	08 f0       	brcs	.+2      	; 0x3b7c <__udivmodqi4_ep>
    3b7a:	96 1b       	sub	r25, r22

00003b7c <__udivmodqi4_ep>:
    3b7c:	88 1f       	adc	r24, r24
    3b7e:	7a 95       	dec	r23
    3b80:	c9 f7       	brne	.-14     	; 0x3b74 <__udivmodqi4_loop>
    3b82:	80 95       	com	r24
    3b84:	08 95       	ret

00003b86 <__udivmodhi4>:
    3b86:	aa 1b       	sub	r26, r26
    3b88:	bb 1b       	sub	r27, r27
    3b8a:	51 e1       	ldi	r21, 0x11	; 17
    3b8c:	07 c0       	rjmp	.+14     	; 0x3b9c <__udivmodhi4_ep>

00003b8e <__udivmodhi4_loop>:
    3b8e:	aa 1f       	adc	r26, r26
    3b90:	bb 1f       	adc	r27, r27
    3b92:	a6 17       	cp	r26, r22
    3b94:	b7 07       	cpc	r27, r23
    3b96:	10 f0       	brcs	.+4      	; 0x3b9c <__udivmodhi4_ep>
    3b98:	a6 1b       	sub	r26, r22
    3b9a:	b7 0b       	sbc	r27, r23

00003b9c <__udivmodhi4_ep>:
    3b9c:	88 1f       	adc	r24, r24
    3b9e:	99 1f       	adc	r25, r25
    3ba0:	5a 95       	dec	r21
    3ba2:	a9 f7       	brne	.-22     	; 0x3b8e <__udivmodhi4_loop>
    3ba4:	80 95       	com	r24
    3ba6:	90 95       	com	r25
    3ba8:	bc 01       	movw	r22, r24
    3baa:	cd 01       	movw	r24, r26
    3bac:	08 95       	ret

00003bae <__udivmodsi4>:
    3bae:	a1 e2       	ldi	r26, 0x21	; 33
    3bb0:	1a 2e       	mov	r1, r26
    3bb2:	aa 1b       	sub	r26, r26
    3bb4:	bb 1b       	sub	r27, r27
    3bb6:	fd 01       	movw	r30, r26
    3bb8:	0d c0       	rjmp	.+26     	; 0x3bd4 <__udivmodsi4_ep>

00003bba <__udivmodsi4_loop>:
    3bba:	aa 1f       	adc	r26, r26
    3bbc:	bb 1f       	adc	r27, r27
    3bbe:	ee 1f       	adc	r30, r30
    3bc0:	ff 1f       	adc	r31, r31
    3bc2:	a2 17       	cp	r26, r18
    3bc4:	b3 07       	cpc	r27, r19
    3bc6:	e4 07       	cpc	r30, r20
    3bc8:	f5 07       	cpc	r31, r21
    3bca:	20 f0       	brcs	.+8      	; 0x3bd4 <__udivmodsi4_ep>
    3bcc:	a2 1b       	sub	r26, r18
    3bce:	b3 0b       	sbc	r27, r19
    3bd0:	e4 0b       	sbc	r30, r20
    3bd2:	f5 0b       	sbc	r31, r21

00003bd4 <__udivmodsi4_ep>:
    3bd4:	66 1f       	adc	r22, r22
    3bd6:	77 1f       	adc	r23, r23
    3bd8:	88 1f       	adc	r24, r24
    3bda:	99 1f       	adc	r25, r25
    3bdc:	1a 94       	dec	r1
    3bde:	69 f7       	brne	.-38     	; 0x3bba <__udivmodsi4_loop>
    3be0:	60 95       	com	r22
    3be2:	70 95       	com	r23
    3be4:	80 95       	com	r24
    3be6:	90 95       	com	r25
    3be8:	9b 01       	movw	r18, r22
    3bea:	ac 01       	movw	r20, r24
    3bec:	bd 01       	movw	r22, r26
    3bee:	cf 01       	movw	r24, r30
    3bf0:	08 95       	ret

00003bf2 <__divmodsi4>:
    3bf2:	97 fb       	bst	r25, 7
    3bf4:	09 2e       	mov	r0, r25
    3bf6:	05 26       	eor	r0, r21
    3bf8:	0e d0       	rcall	.+28     	; 0x3c16 <__divmodsi4_neg1>
    3bfa:	57 fd       	sbrc	r21, 7
    3bfc:	04 d0       	rcall	.+8      	; 0x3c06 <__divmodsi4_neg2>
    3bfe:	d7 df       	rcall	.-82     	; 0x3bae <__udivmodsi4>
    3c00:	0a d0       	rcall	.+20     	; 0x3c16 <__divmodsi4_neg1>
    3c02:	00 1c       	adc	r0, r0
    3c04:	38 f4       	brcc	.+14     	; 0x3c14 <__divmodsi4_exit>

00003c06 <__divmodsi4_neg2>:
    3c06:	50 95       	com	r21
    3c08:	40 95       	com	r20
    3c0a:	30 95       	com	r19
    3c0c:	21 95       	neg	r18
    3c0e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c10:	4f 4f       	sbci	r20, 0xFF	; 255
    3c12:	5f 4f       	sbci	r21, 0xFF	; 255

00003c14 <__divmodsi4_exit>:
    3c14:	08 95       	ret

00003c16 <__divmodsi4_neg1>:
    3c16:	f6 f7       	brtc	.-4      	; 0x3c14 <__divmodsi4_exit>
    3c18:	90 95       	com	r25
    3c1a:	80 95       	com	r24
    3c1c:	70 95       	com	r23
    3c1e:	61 95       	neg	r22
    3c20:	7f 4f       	sbci	r23, 0xFF	; 255
    3c22:	8f 4f       	sbci	r24, 0xFF	; 255
    3c24:	9f 4f       	sbci	r25, 0xFF	; 255
    3c26:	08 95       	ret

00003c28 <itoa>:
    3c28:	fb 01       	movw	r30, r22
    3c2a:	9f 01       	movw	r18, r30
    3c2c:	e8 94       	clt
    3c2e:	42 30       	cpi	r20, 0x02	; 2
    3c30:	c4 f0       	brlt	.+48     	; 0x3c62 <itoa+0x3a>
    3c32:	45 32       	cpi	r20, 0x25	; 37
    3c34:	b4 f4       	brge	.+44     	; 0x3c62 <itoa+0x3a>
    3c36:	4a 30       	cpi	r20, 0x0A	; 10
    3c38:	29 f4       	brne	.+10     	; 0x3c44 <itoa+0x1c>
    3c3a:	97 fb       	bst	r25, 7
    3c3c:	1e f4       	brtc	.+6      	; 0x3c44 <itoa+0x1c>
    3c3e:	90 95       	com	r25
    3c40:	81 95       	neg	r24
    3c42:	9f 4f       	sbci	r25, 0xFF	; 255
    3c44:	64 2f       	mov	r22, r20
    3c46:	77 27       	eor	r23, r23
    3c48:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <__udivmodhi4>
    3c4c:	80 5d       	subi	r24, 0xD0	; 208
    3c4e:	8a 33       	cpi	r24, 0x3A	; 58
    3c50:	0c f0       	brlt	.+2      	; 0x3c54 <itoa+0x2c>
    3c52:	89 5d       	subi	r24, 0xD9	; 217
    3c54:	81 93       	st	Z+, r24
    3c56:	cb 01       	movw	r24, r22
    3c58:	00 97       	sbiw	r24, 0x00	; 0
    3c5a:	a1 f7       	brne	.-24     	; 0x3c44 <itoa+0x1c>
    3c5c:	16 f4       	brtc	.+4      	; 0x3c62 <itoa+0x3a>
    3c5e:	5d e2       	ldi	r21, 0x2D	; 45
    3c60:	51 93       	st	Z+, r21
    3c62:	10 82       	st	Z, r1
    3c64:	c9 01       	movw	r24, r18
    3c66:	0c 94 6c 1e 	jmp	0x3cd8	; 0x3cd8 <strrev>

00003c6a <utoa>:
    3c6a:	fb 01       	movw	r30, r22
    3c6c:	9f 01       	movw	r18, r30
    3c6e:	42 30       	cpi	r20, 0x02	; 2
    3c70:	74 f0       	brlt	.+28     	; 0x3c8e <utoa+0x24>
    3c72:	45 32       	cpi	r20, 0x25	; 37
    3c74:	64 f4       	brge	.+24     	; 0x3c8e <utoa+0x24>
    3c76:	64 2f       	mov	r22, r20
    3c78:	77 27       	eor	r23, r23
    3c7a:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <__udivmodhi4>
    3c7e:	80 5d       	subi	r24, 0xD0	; 208
    3c80:	8a 33       	cpi	r24, 0x3A	; 58
    3c82:	0c f0       	brlt	.+2      	; 0x3c86 <utoa+0x1c>
    3c84:	89 5d       	subi	r24, 0xD9	; 217
    3c86:	81 93       	st	Z+, r24
    3c88:	cb 01       	movw	r24, r22
    3c8a:	00 97       	sbiw	r24, 0x00	; 0
    3c8c:	a1 f7       	brne	.-24     	; 0x3c76 <utoa+0xc>
    3c8e:	10 82       	st	Z, r1
    3c90:	c9 01       	movw	r24, r18
    3c92:	0c 94 6c 1e 	jmp	0x3cd8	; 0x3cd8 <strrev>

00003c96 <__eerd_byte_m168>:
    3c96:	f9 99       	sbic	0x1f, 1	; 31
    3c98:	fe cf       	rjmp	.-4      	; 0x3c96 <__eerd_byte_m168>
    3c9a:	92 bd       	out	0x22, r25	; 34
    3c9c:	81 bd       	out	0x21, r24	; 33
    3c9e:	f8 9a       	sbi	0x1f, 0	; 31
    3ca0:	99 27       	eor	r25, r25
    3ca2:	80 b5       	in	r24, 0x20	; 32
    3ca4:	08 95       	ret

00003ca6 <__eerd_word_m168>:
    3ca6:	a8 e1       	ldi	r26, 0x18	; 24
    3ca8:	b0 e0       	ldi	r27, 0x00	; 0
    3caa:	42 e0       	ldi	r20, 0x02	; 2
    3cac:	50 e0       	ldi	r21, 0x00	; 0
    3cae:	0c 94 7e 1e 	jmp	0x3cfc	; 0x3cfc <__eerd_blraw_m168>

00003cb2 <__eewr_byte_m168>:
    3cb2:	26 2f       	mov	r18, r22

00003cb4 <__eewr_r18_m168>:
    3cb4:	f9 99       	sbic	0x1f, 1	; 31
    3cb6:	fe cf       	rjmp	.-4      	; 0x3cb4 <__eewr_r18_m168>
    3cb8:	1f ba       	out	0x1f, r1	; 31
    3cba:	92 bd       	out	0x22, r25	; 34
    3cbc:	81 bd       	out	0x21, r24	; 33
    3cbe:	20 bd       	out	0x20, r18	; 32
    3cc0:	0f b6       	in	r0, 0x3f	; 63
    3cc2:	f8 94       	cli
    3cc4:	fa 9a       	sbi	0x1f, 2	; 31
    3cc6:	f9 9a       	sbi	0x1f, 1	; 31
    3cc8:	0f be       	out	0x3f, r0	; 63
    3cca:	01 96       	adiw	r24, 0x01	; 1
    3ccc:	08 95       	ret

00003cce <__eewr_word_m168>:
    3cce:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__eewr_byte_m168>
    3cd2:	27 2f       	mov	r18, r23
    3cd4:	0c 94 5a 1e 	jmp	0x3cb4	; 0x3cb4 <__eewr_r18_m168>

00003cd8 <strrev>:
    3cd8:	dc 01       	movw	r26, r24
    3cda:	fc 01       	movw	r30, r24
    3cdc:	67 2f       	mov	r22, r23
    3cde:	71 91       	ld	r23, Z+
    3ce0:	77 23       	and	r23, r23
    3ce2:	e1 f7       	brne	.-8      	; 0x3cdc <strrev+0x4>
    3ce4:	32 97       	sbiw	r30, 0x02	; 2
    3ce6:	04 c0       	rjmp	.+8      	; 0x3cf0 <strrev+0x18>
    3ce8:	7c 91       	ld	r23, X
    3cea:	6d 93       	st	X+, r22
    3cec:	70 83       	st	Z, r23
    3cee:	62 91       	ld	r22, -Z
    3cf0:	ae 17       	cp	r26, r30
    3cf2:	bf 07       	cpc	r27, r31
    3cf4:	c8 f3       	brcs	.-14     	; 0x3ce8 <strrev+0x10>
    3cf6:	08 95       	ret

00003cf8 <__eerd_block_m168>:
    3cf8:	dc 01       	movw	r26, r24
    3cfa:	cb 01       	movw	r24, r22

00003cfc <__eerd_blraw_m168>:
    3cfc:	fc 01       	movw	r30, r24
    3cfe:	f9 99       	sbic	0x1f, 1	; 31
    3d00:	fe cf       	rjmp	.-4      	; 0x3cfe <__eerd_blraw_m168+0x2>
    3d02:	06 c0       	rjmp	.+12     	; 0x3d10 <__eerd_blraw_m168+0x14>
    3d04:	f2 bd       	out	0x22, r31	; 34
    3d06:	e1 bd       	out	0x21, r30	; 33
    3d08:	f8 9a       	sbi	0x1f, 0	; 31
    3d0a:	31 96       	adiw	r30, 0x01	; 1
    3d0c:	00 b4       	in	r0, 0x20	; 32
    3d0e:	0d 92       	st	X+, r0
    3d10:	41 50       	subi	r20, 0x01	; 1
    3d12:	50 40       	sbci	r21, 0x00	; 0
    3d14:	b8 f7       	brcc	.-18     	; 0x3d04 <__eerd_blraw_m168+0x8>
    3d16:	08 95       	ret

00003d18 <_exit>:
    3d18:	f8 94       	cli

00003d1a <__stop_program>:
    3d1a:	ff cf       	rjmp	.-2      	; 0x3d1a <__stop_program>
