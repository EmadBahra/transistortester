
TransistorTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00003f86  0000403a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f86  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  00800102  00800102  0000403c  2**0
                  ALLOC
  3 .eeprom       000001d6  00810000  00810000  0000403c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         00000dbc  00000000  00000000  00004214  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001d2  00000000  00000000  00004fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000000c0  00000000  00000000  000051a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000778  00000000  00000000  00005262  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002dd5  00000000  00000000  000059da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000008ad  00000000  00000000  000087af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003404  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000002b0  00000000  00000000  0000c460  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000943  00000000  00000000  0000c710  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000194f  00000000  00000000  0000d053  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 0000021f  00000000  00000000  0000e9a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 88 00 	jmp	0x110	; 0x110 <__ctors_end>
       4:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
       8:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
       c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      10:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      14:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      18:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      1c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__vector_7>
      20:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      24:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      28:	0c 94 17 18 	jmp	0x302e	; 0x302e <__vector_10>
      2c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      30:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      34:	0c 94 00 18 	jmp	0x3000	; 0x3000 <__vector_13>
      38:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      3c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      40:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      44:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      48:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      4c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      50:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      54:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_21>
      58:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      5c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      60:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      64:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>

00000068 <LogTab>:
      68:	00 00 14 00 29 00 3e 00 53 00 69 00 80 00 97 00     ....).>.S.i.....
      78:	ae 00 c6 00 df 00 f8 00 12 01 2d 01 49 01 65 01     ..........-.I.e.
      88:	82 01 a0 01 be 01 de 01 ff 01 21 02 44 02 68 02     ..........!.D.h.
      98:	8e 02 b5 02 de 02 09 03 35 03 64 03 94 03 c8 03     ........5.d.....
      a8:	fe 03 37 04 73 04 b4 04 f9 04 43 05 93 05 ea 05     ..7.s.....C.....
      b8:	49 06 b3 06 29 07 ae 07 48 08 ff 08 de 09           I...)...H.....

000000c6 <RHtab>:
      c6:	ba 03 87 03 58 03 2e 03 07 03 e4 02 c3 02 a4 02     ....X...........
      d6:	88 02                                               ..

000000d8 <VERSION_str>:
      d8:	56 65 72 73 69 6f 6e 20 31 2e 30 37 6b 00           Version 1.07k.

000000e6 <URefT>:
      e6:	52 65 66 3d 00                                      Ref=.

000000eb <RHfakt>:
      eb:	52 48 66 3d 00                                      RHf=.

000000f0 <R0_str>:
      f0:	52 30 3d 00                                         R0=.

000000f4 <MinCap_str>:
      f4:	20 3e 31 30 30 6e 46 00                              >100nF.

000000fc <REF_C_str>:
      fc:	52 45 46 5f 43 3d 00                                REF_C=.

00000103 <REF_R_str>:
     103:	52 45 46 5f 52 3d 00                                REF_R=.

0000010a <PinRLtab>:
     10a:	01 04 10                                            ...

0000010d <PinADCtab>:
     10d:	01 02 04                                            ...

00000110 <__ctors_end>:
     110:	11 24       	eor	r1, r1
     112:	1f be       	out	0x3f, r1	; 63
     114:	cf ef       	ldi	r28, 0xFF	; 255
     116:	d4 e0       	ldi	r29, 0x04	; 4
     118:	de bf       	out	0x3e, r29	; 62
     11a:	cd bf       	out	0x3d, r28	; 61

0000011c <__do_copy_data>:
     11c:	11 e0       	ldi	r17, 0x01	; 1
     11e:	a0 e0       	ldi	r26, 0x00	; 0
     120:	b1 e0       	ldi	r27, 0x01	; 1
     122:	e6 e8       	ldi	r30, 0x86	; 134
     124:	ff e3       	ldi	r31, 0x3F	; 63
     126:	02 c0       	rjmp	.+4      	; 0x12c <__do_copy_data+0x10>
     128:	05 90       	lpm	r0, Z+
     12a:	0d 92       	st	X+, r0
     12c:	a2 30       	cpi	r26, 0x02	; 2
     12e:	b1 07       	cpc	r27, r17
     130:	d9 f7       	brne	.-10     	; 0x128 <__do_copy_data+0xc>

00000132 <__do_clear_bss>:
     132:	11 e0       	ldi	r17, 0x01	; 1
     134:	a2 e0       	ldi	r26, 0x02	; 2
     136:	b1 e0       	ldi	r27, 0x01	; 1
     138:	01 c0       	rjmp	.+2      	; 0x13c <.do_clear_bss_start>

0000013a <.do_clear_bss_loop>:
     13a:	1d 92       	st	X+, r1

0000013c <.do_clear_bss_start>:
     13c:	a0 39       	cpi	r26, 0x90	; 144
     13e:	b1 07       	cpc	r27, r17
     140:	e1 f7       	brne	.-8      	; 0x13a <.do_clear_bss_loop>
     142:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <main>
     146:	0c 94 c1 1f 	jmp	0x3f82	; 0x3f82 <_exit>

0000014a <__bad_interrupt>:
     14a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014e <lcd_data>:
void lcd_space(void) {
   lcd_data(' ');
}

// sends data byte to the LCD 
void lcd_data(unsigned char temp1) {
     14e:	1f 93       	push	r17
     150:	18 2f       	mov	r17, r24
 lcd_write_data(temp1);		// set RS to 1
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	61 2f       	mov	r22, r17
     156:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
     15a:	0e 94 94 14 	call	0x2928	; 0x2928 <wait50us>
#ifdef WITH_UART
 switch(temp1) {
     15e:	18 30       	cpi	r17, 0x08	; 8
     160:	48 f4       	brcc	.+18     	; 0x174 <lcd_data+0x26>
     162:	16 30       	cpi	r17, 0x06	; 6
     164:	c0 f4       	brcc	.+48     	; 0x196 <lcd_data+0x48>
     166:	12 30       	cpi	r17, 0x02	; 2
     168:	61 f0       	breq	.+24     	; 0x182 <lcd_data+0x34>
     16a:	13 30       	cpi	r17, 0x03	; 3
     16c:	79 f0       	breq	.+30     	; 0x18c <lcd_data+0x3e>
     16e:	11 30       	cpi	r17, 0x01	; 1
     170:	f1 f4       	brne	.+60     	; 0x1ae <lcd_data+0x60>
     172:	05 c0       	rjmp	.+10     	; 0x17e <lcd_data+0x30>
     174:	14 3e       	cpi	r17, 0xE4	; 228
     176:	89 f0       	breq	.+34     	; 0x19a <lcd_data+0x4c>
     178:	14 3f       	cpi	r17, 0xF4	; 244
     17a:	c9 f4       	brne	.+50     	; 0x1ae <lcd_data+0x60>
     17c:	10 c0       	rjmp	.+32     	; 0x19e <lcd_data+0x50>
    case LCD_CHAR_DIODE1:
    	uart_putc('>');
     17e:	8e e3       	ldi	r24, 0x3E	; 62
     180:	06 c0       	rjmp	.+12     	; 0x18e <lcd_data+0x40>
    	uart_putc('|');
    	break;
    case LCD_CHAR_DIODE2:
    	uart_putc('|');
     182:	8c e7       	ldi	r24, 0x7C	; 124
     184:	0e 94 65 14 	call	0x28ca	; 0x28ca <uart_putc>
    	uart_putc('<');
     188:	8c e3       	ldi	r24, 0x3C	; 60
     18a:	12 c0       	rjmp	.+36     	; 0x1b0 <lcd_data+0x62>
    	break;
    case LCD_CHAR_CAP:
    	uart_putc('|');
     18c:	8c e7       	ldi	r24, 0x7C	; 124
     18e:	0e 94 65 14 	call	0x28ca	; 0x28ca <uart_putc>
    	uart_putc('|');
     192:	8c e7       	ldi	r24, 0x7C	; 124
     194:	0d c0       	rjmp	.+26     	; 0x1b0 <lcd_data+0x62>
    	break;
    case LCD_CHAR_RESIS1:
    case LCD_CHAR_RESIS2:
    	uart_putc('R');
     196:	82 e5       	ldi	r24, 0x52	; 82
     198:	0b c0       	rjmp	.+22     	; 0x1b0 <lcd_data+0x62>
//    case LCD_CHAR_DEGREE:	// degree sign
//    	uart_putc(0xf8);	// codepage 437 or 850 has degree
//    	break;
    case LCD_CHAR_U:		//µ
//    	uart_putc(0xe6);	// codepage 437 or 850 has my
    	uart_putc('u');		// better use the ASCII u
     19a:	85 e7       	ldi	r24, 0x75	; 117
     19c:	09 c0       	rjmp	.+18     	; 0x1b0 <lcd_data+0x62>
    	break;
    case LCD_CHAR_OMEGA:	//Omega
//	uart_putc(0xea);	// only codepage 437 has Omega
        uart_putc('O');
     19e:	8f e4       	ldi	r24, 0x4F	; 79
     1a0:	0e 94 65 14 	call	0x28ca	; 0x28ca <uart_putc>
        uart_putc('h');
     1a4:	88 e6       	ldi	r24, 0x68	; 104
     1a6:	0e 94 65 14 	call	0x28ca	; 0x28ca <uart_putc>
        uart_putc('m');
     1aa:	8d e6       	ldi	r24, 0x6D	; 109
     1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <lcd_data+0x62>
    	break;
    default:
    	uart_putc(temp1);
     1ae:	81 2f       	mov	r24, r17
     1b0:	0e 94 65 14 	call	0x28ca	; 0x28ca <uart_putc>
 }
#endif
}
     1b4:	1f 91       	pop	r17
     1b6:	08 95       	ret

000001b8 <lcd_space>:
   lcd_data(temp + '1');
}

// send space character to LCD
void lcd_space(void) {
   lcd_data(' ');
     1b8:	80 e2       	ldi	r24, 0x20	; 32
     1ba:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
}
     1be:	08 95       	ret

000001c0 <lcd_testpin>:
 

// sends numeric character (Pin Number) to the LCD 
// from binary 0 we send ASCII 1 ....
void lcd_testpin(unsigned char temp) {
   lcd_data(temp + '1');
     1c0:	8f 5c       	subi	r24, 0xCF	; 207
     1c2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
}
     1c6:	08 95       	ret

000001c8 <uart_newline>:
}


#ifdef WITH_UART
void uart_newline(void) {
   uart_putc('\r');
     1c8:	8d e0       	ldi	r24, 0x0D	; 13
     1ca:	0e 94 65 14 	call	0x28ca	; 0x28ca <uart_putc>
   uart_putc('\n');
     1ce:	8a e0       	ldi	r24, 0x0A	; 10
     1d0:	0e 94 65 14 	call	0x28ca	; 0x28ca <uart_putc>
}
     1d4:	08 95       	ret

000001d6 <lcd_command>:
#endif
}
 
// sends a command to the LCD
 
void lcd_command(unsigned char temp1) {
     1d6:	1f 93       	push	r17
     1d8:	18 2f       	mov	r17, r24
        lcd_write_cmd(temp1);		// set RS to 0
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	61 2f       	mov	r22, r17
     1de:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
     1e2:	0e 94 94 14 	call	0x2928	; 0x2928 <wait50us>
#ifdef WITH_UART
	if((temp1 == 0x80) || (temp1 == 0xC0)) {
     1e6:	10 38       	cpi	r17, 0x80	; 128
     1e8:	11 f0       	breq	.+4      	; 0x1ee <lcd_command+0x18>
     1ea:	10 3c       	cpi	r17, 0xC0	; 192
     1ec:	11 f4       	brne	.+4      	; 0x1f2 <lcd_command+0x1c>
		uart_newline();
     1ee:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <uart_newline>
	}
#endif
}
     1f2:	1f 91       	pop	r17
     1f4:	08 95       	ret

000001f6 <lcd_clear>:
}
 
// send the command to clear the display 
 
void lcd_clear(void) {
   lcd_command(CLEAR_DISPLAY);
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
   wait_about10ms();
     1fc:	82 e0       	ldi	r24, 0x02	; 2
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>
#ifdef WITH_UART
   uart_newline();
     204:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <uart_newline>
#endif
   lcd_line1();			// set cursor to Line1 Column 1, (only for OLED-Display)
     208:	80 e8       	ldi	r24, 0x80	; 128
     20a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
}
     20e:	08 95       	ret

00000210 <lcd_init>:
 
// Initialise: 
// Must be called first .
 
void lcd_init(void) {
   wait_about30ms();
     210:	86 e0       	ldi	r24, 0x06	; 6
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>
   // to initialise, send 3 times to be shure to be in 8 Bit mode
   lcd_write_init(1);
     218:	80 e8       	ldi	r24, 0x80	; 128
     21a:	60 e3       	ldi	r22, 0x30	; 48
     21c:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
   wait_about5ms();
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>
   
   lcd_write_init(1);
     228:	80 e8       	ldi	r24, 0x80	; 128
     22a:	60 e3       	ldi	r22, 0x30	; 48
     22c:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
   wait1ms();
     230:	0e 94 8e 14 	call	0x291c	; 0x291c <wait1ms>

   lcd_write_init(1);
     234:	80 e8       	ldi	r24, 0x80	; 128
     236:	60 e3       	ldi	r22, 0x30	; 48
     238:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
   wait1ms();
     23c:	0e 94 8e 14 	call	0x291c	; 0x291c <wait1ms>

   lcd_write_init(0);		// switch to 4 Bit mode
     240:	80 e8       	ldi	r24, 0x80	; 128
     242:	60 e2       	ldi	r22, 0x20	; 32
     244:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
   wait_about10ms();
     248:	82 e0       	ldi	r24, 0x02	; 2
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>

   // 4Bit / 2 rows / 5x7
   lcd_command(CMD_SetIFOptions | 0x08);
     250:	88 e2       	ldi	r24, 0x28	; 40
     252:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>

   // Display on / Cursor off / no Blinking
   lcd_command(CMD_SetDisplayAndCursor | 0x04);
     256:	8c e0       	ldi	r24, 0x0C	; 12
     258:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>

   // increment / no Scroll    
   lcd_command(CMD_SetEntryMode | 0x02);	
     25c:	86 e0       	ldi	r24, 0x06	; 6
     25e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
   lcd_clear();
     262:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
}
     266:	08 95       	ret

00000268 <lcd_string>:
#endif
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
     268:	ef 92       	push	r14
     26a:	ff 92       	push	r15
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	e8 2e       	mov	r14, r24
     272:	e7 01       	movw	r28, r14
     274:	7e 01       	movw	r14, r28
     276:	f9 2e       	mov	r15, r25
     278:	e7 01       	movw	r28, r14
    while(*data) {
     27a:	02 c0       	rjmp	.+4      	; 0x280 <lcd_string+0x18>
        lcd_data(*data);
     27c:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
    while(*data) {
     280:	89 91       	ld	r24, Y+
     282:	88 23       	and	r24, r24
     284:	d9 f7       	brne	.-10     	; 0x27c <lcd_string+0x14>
        lcd_data(*data);
        data++;
    }
}
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	ff 90       	pop	r15
     28c:	ef 90       	pop	r14
     28e:	08 95       	ret

00000290 <lcd_pgm_string>:

#ifdef use_lcd_pgm
//Load string from PGM  and send to LCD 
void lcd_pgm_string(const unsigned char *data) {
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = pgm_read_byte(data);
     296:	fe 01       	movw	r30, r28
     298:	84 91       	lpm	r24, Z+
      if((cc==0) || (cc==128)) {
     29a:	88 23       	and	r24, r24
     29c:	31 f0       	breq	.+12     	; 0x2aa <lcd_pgm_string+0x1a>
     29e:	80 38       	cpi	r24, 0x80	; 128
     2a0:	21 f0       	breq	.+8      	; 0x2aa <lcd_pgm_string+0x1a>
         return;
      }
      lcd_data(cc);
     2a2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
      data++;
     2a6:	21 96       	adiw	r28, 0x01	; 1
   }
     2a8:	f6 cf       	rjmp	.-20     	; 0x296 <lcd_pgm_string+0x6>
}
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	08 95       	ret

000002b0 <lcd_fix_string>:
#endif

//Load string from PGM or EEprom and send to LCD 
void lcd_fix_string(const unsigned char *data) {
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = MEM_read_byte(data);
     2b6:	ce 01       	movw	r24, r28
     2b8:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__eerd_byte_m168>
      if((cc==0) || (cc==128)) {
     2bc:	88 23       	and	r24, r24
     2be:	31 f0       	breq	.+12     	; 0x2cc <lcd_fix_string+0x1c>
     2c0:	80 38       	cpi	r24, 0x80	; 128
     2c2:	21 f0       	breq	.+8      	; 0x2cc <lcd_fix_string+0x1c>
         return;
      }
      lcd_data(cc);
     2c4:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
      data++;
     2c8:	21 96       	adiw	r28, 0x01	; 1
   }
     2ca:	f5 cf       	rjmp	.-22     	; 0x2b6 <lcd_fix_string+0x6>
}
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	08 95       	ret

000002d2 <lcd_fix_customchar>:

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
     2d2:	0f 93       	push	r16
     2d4:	1f 93       	push	r17
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	8c 01       	movw	r16, r24
     2dc:	c0 e0       	ldi	r28, 0x00	; 0
     2de:	d0 e0       	ldi	r29, 0x00	; 0
    for(uint8_t i=0;i<8;i++) {
        lcd_data(MEM_read_byte(chardata));
     2e0:	c8 01       	movw	r24, r16
     2e2:	8c 0f       	add	r24, r28
     2e4:	9d 1f       	adc	r25, r29
     2e6:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__eerd_byte_m168>
     2ea:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
     2ee:	21 96       	adiw	r28, 0x01	; 1
   }
}

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
    for(uint8_t i=0;i<8;i++) {
     2f0:	c8 30       	cpi	r28, 0x08	; 8
     2f2:	d1 05       	cpc	r29, r1
     2f4:	a9 f7       	brne	.-22     	; 0x2e0 <lcd_fix_customchar+0xe>
        lcd_data(MEM_read_byte(chardata));
        chardata++;
    }
}
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	1f 91       	pop	r17
     2fc:	0f 91       	pop	r16
     2fe:	08 95       	ret

00000300 <_lcd_hw_write>:
     300:	80 fd       	sbrc	r24, 0
     302:	5c 9a       	sbi	0x0b, 4	; 11
     304:	80 ff       	sbrs	r24, 0
     306:	5c 98       	cbi	0x0b, 4	; 11
     308:	54 9a       	sbi	0x0a, 4	; 10
     30a:	00 00       	nop
     30c:	5d 9a       	sbi	0x0b, 5	; 11
     30e:	55 9a       	sbi	0x0a, 5	; 10
     310:	58 98       	cbi	0x0b, 0	; 11
     312:	59 98       	cbi	0x0b, 1	; 11
     314:	5a 98       	cbi	0x0b, 2	; 11
     316:	5b 98       	cbi	0x0b, 3	; 11
     318:	64 fd       	sbrc	r22, 4
     31a:	58 9a       	sbi	0x0b, 0	; 11
     31c:	50 9a       	sbi	0x0a, 0	; 10
     31e:	65 fd       	sbrc	r22, 5
     320:	59 9a       	sbi	0x0b, 1	; 11
     322:	51 9a       	sbi	0x0a, 1	; 10
     324:	66 fd       	sbrc	r22, 6
     326:	5a 9a       	sbi	0x0b, 2	; 11
     328:	52 9a       	sbi	0x0a, 2	; 10
     32a:	67 fd       	sbrc	r22, 7
     32c:	5b 9a       	sbi	0x0b, 3	; 11
     32e:	53 9a       	sbi	0x0a, 3	; 10
     330:	00 00       	nop
     332:	5d 98       	cbi	0x0b, 5	; 11
     334:	0e 94 9d 14 	call	0x293a	; 0x293a <wait1us>
     338:	87 fd       	sbrc	r24, 7
     33a:	11 c0       	rjmp	.+34     	; 0x35e <_lcd_hw_write_exit>
     33c:	5d 9a       	sbi	0x0b, 5	; 11
     33e:	58 98       	cbi	0x0b, 0	; 11
     340:	59 98       	cbi	0x0b, 1	; 11
     342:	5a 98       	cbi	0x0b, 2	; 11
     344:	5b 98       	cbi	0x0b, 3	; 11
     346:	60 fd       	sbrc	r22, 0
     348:	58 9a       	sbi	0x0b, 0	; 11
     34a:	61 fd       	sbrc	r22, 1
     34c:	59 9a       	sbi	0x0b, 1	; 11
     34e:	62 fd       	sbrc	r22, 2
     350:	5a 9a       	sbi	0x0b, 2	; 11
     352:	63 fd       	sbrc	r22, 3
     354:	5b 9a       	sbi	0x0b, 3	; 11
     356:	00 00       	nop
     358:	5d 98       	cbi	0x0b, 5	; 11
     35a:	0e 94 9d 14 	call	0x293a	; 0x293a <wait1us>

0000035e <_lcd_hw_write_exit>:
     35e:	08 95       	ret

00000360 <__vector_7>:
#define MAIN_C
#include "Transistortester.h"

#ifndef INHIBIT_SLEEP_MODE
  // prepare sleep mode
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
     360:	18 95       	reti

00000362 <__vector_21>:
  EMPTY_INTERRUPT(ADC_vect);
     362:	18 95       	reti

00000364 <EntladePins>:
   R_DDR &= ~PinToCharge;	// switch back to input
   R_PORT &= ~PinToCharge;	// no Pull up
}

// first discharge any charge of capacitors
void EntladePins() {
     364:	af 92       	push	r10
     366:	bf 92       	push	r11
     368:	cf 92       	push	r12
     36a:	df 92       	push	r13
     36c:	ef 92       	push	r14
     36e:	ff 92       	push	r15
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	3a e0       	ldi	r19, 0x0A	; 10
     37a:	c3 2e       	mov	r12, r19
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     37c:	28 e0       	ldi	r18, 0x08	; 8
     37e:	d2 2e       	mov	r13, r18
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     R_PORT = 0;			// R-outputs auf 0
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     380:	9a e2       	ldi	r25, 0x2A	; 42
     382:	a9 2e       	mov	r10, r25
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     384:	85 e1       	ldi	r24, 0x15	; 21
     386:	b8 2e       	mov	r11, r24
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     388:	d7 b8       	out	0x07, r13	; 7
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     38a:	d8 b8       	out	0x08, r13	; 8
     R_PORT = 0;			// R-outputs auf 0
     38c:	15 b8       	out	0x05, r1	; 5
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     38e:	a4 b8       	out	0x04, r10	; 4
     adcmv[0] = W5msReadADC(PC0);	// which voltage has Pin 1?
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
     396:	8c 01       	movw	r16, r24
     adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
     39e:	ec 01       	movw	r28, r24
     adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     3a0:	82 e0       	ldi	r24, 0x02	; 2
     3a2:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
     if ((PartFound == PART_CELL) || (adcmv[0] < CAP_EMPTY_LEVEL) & (adcmv[1] < CAP_EMPTY_LEVEL) & (adcmv[2] < CAP_EMPTY_LEVEL)) {
     3a6:	20 91 07 01 	lds	r18, 0x0107
     3aa:	28 30       	cpi	r18, 0x08	; 8
     3ac:	c1 f0       	breq	.+48     	; 0x3de <EntladePins+0x7a>
     3ae:	41 e0       	ldi	r20, 0x01	; 1
     3b0:	c4 30       	cpi	r28, 0x04	; 4
     3b2:	d1 05       	cpc	r29, r1
     3b4:	08 f0       	brcs	.+2      	; 0x3b8 <EntladePins+0x54>
     3b6:	40 e0       	ldi	r20, 0x00	; 0
     3b8:	21 e0       	ldi	r18, 0x01	; 1
     3ba:	04 30       	cpi	r16, 0x04	; 4
     3bc:	11 05       	cpc	r17, r1
     3be:	08 f0       	brcs	.+2      	; 0x3c2 <EntladePins+0x5e>
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	42 23       	and	r20, r18
     3c4:	50 e0       	ldi	r21, 0x00	; 0
     3c6:	21 e0       	ldi	r18, 0x01	; 1
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	84 30       	cpi	r24, 0x04	; 4
     3cc:	91 05       	cpc	r25, r1
     3ce:	10 f0       	brcs	.+4      	; 0x3d4 <EntladePins+0x70>
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	24 23       	and	r18, r20
     3d6:	35 23       	and	r19, r21
     3d8:	21 15       	cp	r18, r1
     3da:	31 05       	cpc	r19, r1
     3dc:	21 f0       	breq	.+8      	; 0x3e6 <EntladePins+0x82>
        ADC_DDR = TXD_MSK;		// switch all ADC-Pins to input
     3de:	88 e0       	ldi	r24, 0x08	; 8
     3e0:	87 b9       	out	0x07, r24	; 7
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
     3e2:	14 b8       	out	0x04, r1	; 4
        return;			// all is discharged
     3e4:	4f c0       	rjmp	.+158    	; 0x484 <EntladePins+0x120>
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
     3e6:	23 e0       	ldi	r18, 0x03	; 3
     3e8:	08 3e       	cpi	r16, 0xE8	; 232
     3ea:	12 07       	cpc	r17, r18
     3ec:	10 f0       	brcs	.+4      	; 0x3f2 <EntladePins+0x8e>
  uint8_t lop_cnt;		// loop counter
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     3ee:	28 e0       	ldi	r18, 0x08	; 8
     3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <EntladePins+0x90>
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
        return;			// all is discharged
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
        adc_gnd |= (1<<PC0);	//Pin 1 directly to GND
     3f2:	29 e0       	ldi	r18, 0x09	; 9
     }
     if (adcmv[1] < 1000) {
     3f4:	33 e0       	ldi	r19, 0x03	; 3
     3f6:	c8 3e       	cpi	r28, 0xE8	; 232
     3f8:	d3 07       	cpc	r29, r19
     3fa:	08 f4       	brcc	.+2      	; 0x3fe <EntladePins+0x9a>
        adc_gnd |= (1<<PC1);	//Pin 2 directly to GND
     3fc:	22 60       	ori	r18, 0x02	; 2
     }
     if (adcmv[2] < 1000) {
     3fe:	33 e0       	ldi	r19, 0x03	; 3
     400:	88 3e       	cpi	r24, 0xE8	; 232
     402:	93 07       	cpc	r25, r19
     404:	08 f4       	brcc	.+2      	; 0x408 <EntladePins+0xa4>
        adc_gnd |= (1<<PC2);	//Pin 3 directly to  GND
     406:	24 60       	ori	r18, 0x04	; 4
     }
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time
     408:	27 b9       	out	0x07, r18	; 7

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     40a:	b4 b8       	out	0x04, r11	; 4
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     40c:	c0 e0       	ldi	r28, 0x00	; 0
     40e:	d0 e0       	ldi	r29, 0x00	; 0
        wdt_reset();
     410:	a8 95       	wdr
        adcmv[0] = W20msReadADC(PC0);	// which voltage has Pin 1?
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	0e 94 cf 1a 	call	0x359e	; 0x359e <W20msReadADC>
     418:	7c 01       	movw	r14, r24
        adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
     420:	8c 01       	movw	r16, r24
        adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     422:	82 e0       	ldi	r24, 0x02	; 2
     424:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
        if (adcmv[0] < 1300) {
     428:	24 e1       	ldi	r18, 0x14	; 20
     42a:	e2 16       	cp	r14, r18
     42c:	25 e0       	ldi	r18, 0x05	; 5
     42e:	f2 06       	cpc	r15, r18
     430:	08 f4       	brcc	.+2      	; 0x434 <EntladePins+0xd0>
           ADC_DDR |= (1<<PC0);	// below 1.3V , switch directly with ADC-Port to GND
     432:	38 9a       	sbi	0x07, 0	; 7
        }
        if (adcmv[1] < 1300) {
     434:	35 e0       	ldi	r19, 0x05	; 5
     436:	04 31       	cpi	r16, 0x14	; 20
     438:	13 07       	cpc	r17, r19
     43a:	08 f4       	brcc	.+2      	; 0x43e <EntladePins+0xda>
           ADC_DDR |= (1<<PC1);	// below 1.3V, switch directly with ADC-Port to GND
     43c:	39 9a       	sbi	0x07, 1	; 7
        }
        if (adcmv[2] < 1300) {
     43e:	25 e0       	ldi	r18, 0x05	; 5
     440:	84 31       	cpi	r24, 0x14	; 20
     442:	92 07       	cpc	r25, r18
     444:	08 f4       	brcc	.+2      	; 0x448 <EntladePins+0xe4>
           ADC_DDR |= (1<<PC2);	// below 1.3V, switch directly with ADC-Port to GND
     446:	3a 9a       	sbi	0x07, 2	; 7
        }
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
     448:	36 e0       	ldi	r19, 0x06	; 6
     44a:	e3 16       	cp	r14, r19
     44c:	f1 04       	cpc	r15, r1
     44e:	30 f4       	brcc	.+12     	; 0x45c <EntladePins+0xf8>
     450:	06 30       	cpi	r16, 0x06	; 6
     452:	11 05       	cpc	r17, r1
     454:	18 f4       	brcc	.+6      	; 0x45c <EntladePins+0xf8>
     456:	86 30       	cpi	r24, 0x06	; 6
     458:	91 05       	cpc	r25, r1
     45a:	38 f0       	brcs	.+14     	; 0x46a <EntladePins+0x106>

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     45c:	21 96       	adiw	r28, 0x01	; 1
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	c4 3f       	cpi	r28, 0xF4	; 244
     462:	d8 07       	cpc	r29, r24
     464:	a9 f6       	brne	.-86     	; 0x410 <EntladePins+0xac>
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
           break;
        }
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
     466:	d0 92 07 01 	sts	0x0107, r13

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     46a:	00 e0       	ldi	r16, 0x00	; 0
     46c:	10 e0       	ldi	r17, 0x00	; 0
     46e:	04 c0       	rjmp	.+8      	; 0x478 <EntladePins+0x114>
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     470:	0e 94 8e 14 	call	0x291c	; 0x291c <wait1ms>
     474:	0f 5f       	subi	r16, 0xFF	; 255
     476:	1f 4f       	sbci	r17, 0xFF	; 255
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
     478:	0c 17       	cp	r16, r28
     47a:	1d 07       	cpc	r17, r29
     47c:	c8 f3       	brcs	.-14     	; 0x470 <EntladePins+0x10c>
     47e:	ca 94       	dec	r12
  unsigned int clr_cnt;		// Clear Counter
  uint8_t lop_cnt;		// loop counter
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     480:	09 f0       	breq	.+2      	; 0x484 <EntladePins+0x120>
     482:	82 cf       	rjmp	.-252    	; 0x388 <EntladePins+0x24>
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     }
  } // end for lop_cnt
 }
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	0f 91       	pop	r16
     48c:	ff 90       	pop	r15
     48e:	ef 90       	pop	r14
     490:	df 90       	pop	r13
     492:	cf 90       	pop	r12
     494:	bf 90       	pop	r11
     496:	af 90       	pop	r10
     498:	08 95       	ret

0000049a <RefVoltage>:
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;

  #ifdef AUTO_CAL
  referenz = ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset));
     49a:	89 ec       	ldi	r24, 0xC9	; 201
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__eerd_word_m168>
     4a2:	20 91 44 01 	lds	r18, 0x0144
     4a6:	30 91 45 01 	lds	r19, 0x0145
     4aa:	28 0f       	add	r18, r24
     4ac:	39 1f       	adc	r19, r25
  #else
  referenz = ref_mv + REF_C_KORR;
  #endif
  if (referenz >= Ref_Tab_Beginn) {
     4ae:	83 e0       	ldi	r24, 0x03	; 3
     4b0:	28 3e       	cpi	r18, 0xE8	; 232
     4b2:	38 07       	cpc	r19, r24
     4b4:	20 f0       	brcs	.+8      	; 0x4be <RefVoltage+0x24>
     referenz -= Ref_Tab_Beginn;
     4b6:	c9 01       	movw	r24, r18
     4b8:	88 5e       	subi	r24, 0xE8	; 232
     4ba:	93 40       	sbci	r25, 0x03	; 3
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <RefVoltage+0x28>
  } else  {
     referenz = 0;		// limit to begin of table
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = referenz / Ref_Tab_Abstand;
     4c2:	62 e3       	ldi	r22, 0x32	; 50
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <__udivmodhi4>
  tabres = Ref_Tab_Abstand-tabres;
  if (tabind > 7) {
     tabind = 7;		// limit to end of table
  }
  // interpolate the table of factors
  y1 = pgm_read_word(&RHtab[tabind]);
     4ca:	68 30       	cpi	r22, 0x08	; 8
     4cc:	08 f0       	brcs	.+2      	; 0x4d0 <RefVoltage+0x36>
     4ce:	67 e0       	ldi	r22, 0x07	; 7
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	fb 01       	movw	r30, r22
     4d4:	ee 0f       	add	r30, r30
     4d6:	ff 1f       	adc	r31, r31
     4d8:	ea 53       	subi	r30, 0x3A	; 58
     4da:	ff 4f       	sbci	r31, 0xFF	; 255
     4dc:	45 91       	lpm	r20, Z+
     4de:	54 91       	lpm	r21, Z+
  y2 = pgm_read_word(&RHtab[tabind+1]);
     4e0:	fb 01       	movw	r30, r22
     4e2:	ee 0f       	add	r30, r30
     4e4:	ff 1f       	adc	r31, r31
     4e6:	e8 53       	subi	r30, 0x38	; 56
     4e8:	ff 4f       	sbci	r31, 0xFF	; 255
     4ea:	25 91       	lpm	r18, Z+
     4ec:	34 91       	lpm	r19, Z+
  } else  {
     referenz = 0;		// limit to begin of table
  }
  tabind = referenz / Ref_Tab_Abstand;
  tabres = referenz % Ref_Tab_Abstand;
  tabres = Ref_Tab_Abstand-tabres;
     4ee:	62 e3       	ldi	r22, 0x32	; 50
     4f0:	68 1b       	sub	r22, r24
  }
  // interpolate the table of factors
  y1 = pgm_read_word(&RHtab[tabind]);
  y2 = pgm_read_word(&RHtab[tabind+1]);
  // RHmultip is the interpolated factor to compute capacity from load time with 470k
  RHmultip = ((y1 - y2) * tabres + (Ref_Tab_Abstand/2)) / Ref_Tab_Abstand + y2;
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	42 1b       	sub	r20, r18
     4f6:	53 0b       	sbc	r21, r19
     4f8:	64 9f       	mul	r22, r20
     4fa:	c0 01       	movw	r24, r0
     4fc:	65 9f       	mul	r22, r21
     4fe:	90 0d       	add	r25, r0
     500:	74 9f       	mul	r23, r20
     502:	90 0d       	add	r25, r0
     504:	11 24       	eor	r1, r1
     506:	49 96       	adiw	r24, 0x19	; 25
     508:	62 e3       	ldi	r22, 0x32	; 50
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <__udivmodhi4>
     510:	62 0f       	add	r22, r18
     512:	73 1f       	adc	r23, r19
     514:	70 93 01 01 	sts	0x0101, r23
     518:	60 93 00 01 	sts	0x0100, r22
 }
     51c:	08 95       	ret

0000051e <lcd_clear_line>:
#endif

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
     51e:	1f 93       	push	r17
     520:	14 e1       	ldi	r17, 0x14	; 20
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    lcd_space();
     522:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
     526:	11 50       	subi	r17, 0x01	; 1

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
     528:	e1 f7       	brne	.-8      	; 0x522 <lcd_clear_line+0x4>
    lcd_space();
 }
}
     52a:	1f 91       	pop	r17
     52c:	08 95       	ret

0000052e <DisplayValue>:
 *    e.g: p = 10^-12 -> -12
 *  - unit character (0 = none)
 *  digits = 2, 3 or 4
 */
void DisplayValue(unsigned long Value, int8_t Exponent, unsigned char Unit, unsigned char digits)
{
     52e:	2f 92       	push	r2
     530:	3f 92       	push	r3
     532:	4f 92       	push	r4
     534:	5f 92       	push	r5
     536:	7f 92       	push	r7
     538:	8f 92       	push	r8
     53a:	9f 92       	push	r9
     53c:	af 92       	push	r10
     53e:	bf 92       	push	r11
     540:	cf 92       	push	r12
     542:	df 92       	push	r13
     544:	ef 92       	push	r14
     546:	ff 92       	push	r15
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
     54c:	df 93       	push	r29
     54e:	cf 93       	push	r28
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
     554:	2f 97       	sbiw	r28, 0x0f	; 15
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	f8 94       	cli
     55a:	de bf       	out	0x3e, r29	; 62
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	cd bf       	out	0x3d, r28	; 61
     560:	6b 01       	movw	r12, r22
     562:	7c 01       	movw	r14, r24
     564:	14 2f       	mov	r17, r20
     566:	72 2e       	mov	r7, r18
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
     568:	03 30       	cpi	r16, 0x03	; 3
     56a:	29 f0       	breq	.+10     	; 0x576 <DisplayValue+0x48>
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
     56c:	04 30       	cpi	r16, 0x04	; 4
     56e:	31 f0       	breq	.+12     	; 0x57c <DisplayValue+0x4e>
  uint8_t           Offset;		/* exponent of offset to next 10^3 step */
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
     570:	84 e6       	ldi	r24, 0x64	; 100
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	14 c0       	rjmp	.+40     	; 0x59e <DisplayValue+0x70>
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
     576:	88 ee       	ldi	r24, 0xE8	; 232
     578:	93 e0       	ldi	r25, 0x03	; 3
     57a:	11 c0       	rjmp	.+34     	; 0x59e <DisplayValue+0x70>
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
     57c:	80 e1       	ldi	r24, 0x10	; 16
     57e:	97 e2       	ldi	r25, 0x27	; 39
     580:	0e c0       	rjmp	.+28     	; 0x59e <DisplayValue+0x70>
  while (Value >= Limit)
  {
    Value += 5;				/* for automatic rounding */
     582:	c7 01       	movw	r24, r14
     584:	b6 01       	movw	r22, r12
     586:	6b 5f       	subi	r22, 0xFB	; 251
     588:	7f 4f       	sbci	r23, 0xFF	; 255
     58a:	8f 4f       	sbci	r24, 0xFF	; 255
     58c:	9f 4f       	sbci	r25, 0xFF	; 255
    Value = Value / 10;			/* scale down by 10^1 */
     58e:	a5 01       	movw	r20, r10
     590:	94 01       	movw	r18, r8
     592:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
     596:	69 01       	movw	r12, r18
     598:	7a 01       	movw	r14, r20
    Exponent++;				/* increase exponent by 1 */
     59a:	1f 5f       	subi	r17, 0xFF	; 255
     59c:	08 c0       	rjmp	.+16     	; 0x5ae <DisplayValue+0x80>


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
  while (Value >= Limit)
     59e:	1c 01       	movw	r2, r24
     5a0:	44 24       	eor	r4, r4
     5a2:	55 24       	eor	r5, r5
  {
    Value += 5;				/* for automatic rounding */
    Value = Value / 10;			/* scale down by 10^1 */
     5a4:	ba e0       	ldi	r27, 0x0A	; 10
     5a6:	8b 2e       	mov	r8, r27
     5a8:	91 2c       	mov	r9, r1
     5aa:	a1 2c       	mov	r10, r1
     5ac:	b1 2c       	mov	r11, r1


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
  while (Value >= Limit)
     5ae:	c2 14       	cp	r12, r2
     5b0:	d3 04       	cpc	r13, r3
     5b2:	e4 04       	cpc	r14, r4
     5b4:	f5 04       	cpc	r15, r5
     5b6:	28 f7       	brcc	.-54     	; 0x582 <DisplayValue+0x54>


  /*
   *  determine prefix
   */
  Length = Exponent + 12;
     5b8:	81 2f       	mov	r24, r17
     5ba:	84 5f       	subi	r24, 0xF4	; 244
     5bc:	83 31       	cpi	r24, 0x13	; 19
     5be:	08 f0       	brcs	.+2      	; 0x5c2 <DisplayValue+0x94>
     5c0:	82 e1       	ldi	r24, 0x12	; 18
  if (Length <  0) Length = 0;		/* Limit to minimum prefix */
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
  Index = Length / 3;
     5c2:	23 e0       	ldi	r18, 0x03	; 3
  Offset = Length % 3;
     5c4:	62 2f       	mov	r22, r18
     5c6:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__udivmodqi4>
     5ca:	19 2f       	mov	r17, r25
  if (Offset > 0)
     5cc:	99 23       	and	r25, r25
     5ce:	19 f0       	breq	.+6      	; 0x5d6 <DisplayValue+0xa8>
    {
      Index++;				/* adjust index for exponent offset, take next prefix */
     5d0:	8f 5f       	subi	r24, 0xFF	; 255
      Offset = 3 - Offset;		/* reverse value (1 or 2) */
     5d2:	29 1b       	sub	r18, r25
     5d4:	12 2f       	mov	r17, r18
    { /* use no nano */
      Index++;				/* use mikro instead of nano */
      Offset += 3;			/* can be 3,4 or 5 */
    }
#endif
  Prefix = MEM_read_byte((uint8_t *)(&PrefixTab[Index]));   /* look up prefix in table */
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	8e 53       	subi	r24, 0x3E	; 62
     5da:	9e 4f       	sbci	r25, 0xFE	; 254
     5dc:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__eerd_byte_m168>
     5e0:	b8 2e       	mov	r11, r24
  /*
   *  display value
   */

  /* convert value into string */
  utoa((unsigned int)Value, OutBuffer, 10);
     5e2:	c6 01       	movw	r24, r12
     5e4:	6e 01       	movw	r12, r28
     5e6:	08 94       	sec
     5e8:	c1 1c       	adc	r12, r1
     5ea:	d1 1c       	adc	r13, r1
     5ec:	b6 01       	movw	r22, r12
     5ee:	4a e0       	ldi	r20, 0x0A	; 10
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <utoa>
  Length = strlen(OutBuffer);
     5f6:	f6 01       	movw	r30, r12
     5f8:	01 90       	ld	r0, Z+
     5fa:	00 20       	and	r0, r0
     5fc:	e9 f7       	brne	.-6      	; 0x5f8 <DisplayValue+0xca>
     5fe:	31 97       	sbiw	r30, 0x01	; 1
     600:	2e 2e       	mov	r2, r30
     602:	2c 18       	sub	r2, r12

  /* position of dot */
  Exponent = Length - Offset;		/* calculate position */
     604:	82 2c       	mov	r8, r2
     606:	81 1a       	sub	r8, r17

  if (Exponent <= 0)			/* we have to prepend "0." */
     608:	18 14       	cp	r1, r8
     60a:	44 f0       	brlt	.+16     	; 0x61c <DisplayValue+0xee>
  {
    /* 0: factor 10 / -1: factor 100 */
//    lcd_data('0');
    lcd_data('.');
     60c:	8e e2       	ldi	r24, 0x2E	; 46
     60e:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
      {
       lcd_data('0');	/* extra 0 for factor 10 */
       Exponent++;
      }
#else
    if (Exponent < 0) lcd_data('0');	/* extra 0 for factor 100 */
     612:	88 20       	and	r8, r8
     614:	19 f0       	breq	.+6      	; 0x61c <DisplayValue+0xee>
     616:	80 e3       	ldi	r24, 0x30	; 48
     618:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
#endif
  }

  if (Offset == 0) Exponent = -1;	/* disable dot if not needed */
     61c:	11 23       	and	r17, r17
     61e:	11 f4       	brne	.+4      	; 0x624 <DisplayValue+0xf6>
     620:	88 24       	eor	r8, r8
     622:	8a 94       	dec	r8
     624:	6e 01       	movw	r12, r28
     626:	08 94       	sec
     628:	c1 1c       	adc	r12, r1
     62a:	d1 1c       	adc	r13, r1
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     62c:	00 e0       	ldi	r16, 0x00	; 0
     62e:	10 e0       	ldi	r17, 0x00	; 0
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    Index++;				/* next one */
    if (Index == Exponent) {
     630:	99 24       	eor	r9, r9
     632:	87 fc       	sbrc	r8, 7
     634:	90 94       	com	r9
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     636:	0d c0       	rjmp	.+26     	; 0x652 <DisplayValue+0x124>
  {
    lcd_data(OutBuffer[Index]);		/* display char */
     638:	0f 5f       	subi	r16, 0xFF	; 255
     63a:	1f 4f       	sbci	r17, 0xFF	; 255
     63c:	f6 01       	movw	r30, r12
     63e:	81 91       	ld	r24, Z+
     640:	6f 01       	movw	r12, r30
     642:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
    Index++;				/* next one */
    if (Index == Exponent) {
     646:	08 15       	cp	r16, r8
     648:	19 05       	cpc	r17, r9
     64a:	19 f4       	brne	.+6      	; 0x652 <DisplayValue+0x124>
      lcd_data('.');			/* display dot */
     64c:	8e e2       	ldi	r24, 0x2E	; 46
     64e:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     652:	02 15       	cp	r16, r2
     654:	88 f3       	brcs	.-30     	; 0x638 <DisplayValue+0x10a>
      lcd_data('.');			/* display dot */
    }
  }

  /* display prefix and unit */
  if (Prefix != 0) lcd_data(Prefix);
     656:	bb 20       	and	r11, r11
     658:	19 f0       	breq	.+6      	; 0x660 <DisplayValue+0x132>
     65a:	8b 2d       	mov	r24, r11
     65c:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
  if (Unit) lcd_data(Unit);
     660:	77 20       	and	r7, r7
     662:	19 f0       	breq	.+6      	; 0x66a <DisplayValue+0x13c>
     664:	87 2d       	mov	r24, r7
     666:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
}
     66a:	2f 96       	adiw	r28, 0x0f	; 15
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	de bf       	out	0x3e, r29	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	cd bf       	out	0x3d, r28	; 61
     676:	cf 91       	pop	r28
     678:	df 91       	pop	r29
     67a:	1f 91       	pop	r17
     67c:	0f 91       	pop	r16
     67e:	ff 90       	pop	r15
     680:	ef 90       	pop	r14
     682:	df 90       	pop	r13
     684:	cf 90       	pop	r12
     686:	bf 90       	pop	r11
     688:	af 90       	pop	r10
     68a:	9f 90       	pop	r9
     68c:	8f 90       	pop	r8
     68e:	7f 90       	pop	r7
     690:	5f 90       	pop	r5
     692:	4f 90       	pop	r4
     694:	3f 90       	pop	r3
     696:	2f 90       	pop	r2
     698:	08 95       	ret

0000069a <RvalOut>:
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
      lcd_space();
   }
}

void RvalOut(uint8_t ii) {	
     69a:	0f 93       	push	r16
   // output of resistor value
#if FLASHEND > 0x1fff
   uint16_t rr;
   if ((resis[ii].rx < 100) && (resis[0].lx == 0)) {
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	fc 01       	movw	r30, r24
     6a0:	ee 0f       	add	r30, r30
     6a2:	ff 1f       	adc	r31, r31
     6a4:	e8 0f       	add	r30, r24
     6a6:	f9 1f       	adc	r31, r25
     6a8:	ee 0f       	add	r30, r30
     6aa:	ff 1f       	adc	r31, r31
     6ac:	ee 0f       	add	r30, r30
     6ae:	ff 1f       	adc	r31, r31
     6b0:	e8 5e       	subi	r30, 0xE8	; 232
     6b2:	fe 4f       	sbci	r31, 0xFE	; 254
     6b4:	60 81       	ld	r22, Z
     6b6:	71 81       	ldd	r23, Z+1	; 0x01
     6b8:	82 81       	ldd	r24, Z+2	; 0x02
     6ba:	93 81       	ldd	r25, Z+3	; 0x03
     6bc:	64 36       	cpi	r22, 0x64	; 100
     6be:	71 05       	cpc	r23, r1
     6c0:	81 05       	cpc	r24, r1
     6c2:	91 05       	cpc	r25, r1
     6c4:	c0 f4       	brcc	.+48     	; 0x6f6 <RvalOut+0x5c>
     6c6:	20 91 1c 01 	lds	r18, 0x011C
     6ca:	30 91 1d 01 	lds	r19, 0x011D
     6ce:	40 91 1e 01 	lds	r20, 0x011E
     6d2:	50 91 1f 01 	lds	r21, 0x011F
     6d6:	21 15       	cp	r18, r1
     6d8:	31 05       	cpc	r19, r1
     6da:	41 05       	cpc	r20, r1
     6dc:	51 05       	cpc	r21, r1
     6de:	59 f4       	brne	.+22     	; 0x6f6 <RvalOut+0x5c>
      rr = GetESR(resis[ii].ra,resis[ii].rb);
     6e0:	81 85       	ldd	r24, Z+9	; 0x09
     6e2:	62 85       	ldd	r22, Z+10	; 0x0a
     6e4:	0e 94 41 1b 	call	0x3682	; 0x3682 <GetESR>
      DisplayValue(rr,-2,LCD_CHAR_OMEGA,3);
     6e8:	bc 01       	movw	r22, r24
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	4e ef       	ldi	r20, 0xFE	; 254
     6f0:	24 ef       	ldi	r18, 0xF4	; 244
     6f2:	03 e0       	ldi	r16, 0x03	; 3
     6f4:	03 c0       	rjmp	.+6      	; 0x6fc <RvalOut+0x62>
   } else {
      DisplayValue(resis[ii].rx,-1,LCD_CHAR_OMEGA,4);
     6f6:	4f ef       	ldi	r20, 0xFF	; 255
     6f8:	24 ef       	ldi	r18, 0xF4	; 244
     6fa:	04 e0       	ldi	r16, 0x04	; 4
     6fc:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
   }
#else
   DisplayValue(resis[ii].rx,-1,LCD_CHAR_OMEGA,4);
#endif
   lcd_space();
     700:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
 }
     704:	0f 91       	pop	r16
     706:	08 95       	ret

00000708 <mVAusgabe>:
   lcd_line2(); 				//2. row
   lcd_fix_string(Uf_str);			//"Uf="
   mVAusgabe(bcdnum >> 4);
   mVAusgabe(bcdnum & 0x0f);
}
void mVAusgabe(uint8_t nn) {
     708:	0f 93       	push	r16
   if (nn < 3) {
     70a:	83 30       	cpi	r24, 0x03	; 3
     70c:	98 f4       	brcc	.+38     	; 0x734 <mVAusgabe+0x2c>
      // Output in mV units
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
     70e:	e8 2f       	mov	r30, r24
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	ee 0f       	add	r30, r30
     714:	ff 1f       	adc	r31, r31
     716:	ee 0f       	add	r30, r30
     718:	ff 1f       	adc	r31, r31
     71a:	e8 58       	subi	r30, 0x88	; 136
     71c:	fe 4f       	sbci	r31, 0xFE	; 254
     71e:	62 81       	ldd	r22, Z+2	; 0x02
     720:	73 81       	ldd	r23, Z+3	; 0x03
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	4d ef       	ldi	r20, 0xFD	; 253
     728:	26 e5       	ldi	r18, 0x56	; 86
     72a:	03 e0       	ldi	r16, 0x03	; 3
     72c:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
      lcd_space();
     730:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
   }
}
     734:	0f 91       	pop	r16
     736:	08 95       	ret

00000738 <UfAusgabe>:
// output of flux voltage for 1-2 diodes in row 2
// bcdnum = Numbers of both Diodes:
// higher 4 Bit  number of first Diode
// lower 4 Bit  number of second Diode (Structure diodes[nn])
// if number >= 3  no output is done
void UfAusgabe(uint8_t bcdnum) {
     738:	1f 93       	push	r17
     73a:	18 2f       	mov	r17, r24

   lcd_line2(); 				//2. row
     73c:	80 ec       	ldi	r24, 0xC0	; 192
     73e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
   lcd_fix_string(Uf_str);			//"Uf="
     742:	86 e1       	ldi	r24, 0x16	; 22
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
   mVAusgabe(bcdnum >> 4);
     74a:	81 2f       	mov	r24, r17
     74c:	82 95       	swap	r24
     74e:	8f 70       	andi	r24, 0x0F	; 15
     750:	0e 94 84 03 	call	0x708	; 0x708 <mVAusgabe>
   mVAusgabe(bcdnum & 0x0f);
     754:	81 2f       	mov	r24, r17
     756:	8f 70       	andi	r24, 0x0F	; 15
     758:	0e 94 84 03 	call	0x708	; 0x708 <mVAusgabe>
}
     75c:	1f 91       	pop	r17
     75e:	08 95       	ret

00000760 <sleep_5ms>:
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
      pause = 0;
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     760:	42 e0       	ldi	r20, 0x02	; 2
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     762:	1c c0       	rjmp	.+56     	; 0x79c <sleep_5ms+0x3c>
  {
 #if 3000 > RESTART_DELAY_US
   if (pause > 1)
     764:	82 30       	cpi	r24, 0x02	; 2
     766:	91 05       	cpc	r25, r1
     768:	18 f0       	brcs	.+6      	; 0x770 <sleep_5ms+0x10>
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
      pause -= 2;
     76a:	02 97       	sbiw	r24, 0x02	; 2
  {
 #if 3000 > RESTART_DELAY_US
   if (pause > 1)
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
     76c:	3e e3       	ldi	r19, 0x3E	; 62
     76e:	03 c0       	rjmp	.+6      	; 0x776 <sleep_5ms+0x16>
      pause -= 2;
     } else {
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
     770:	37 e1       	ldi	r19, 0x17	; 23
      pause = 0;
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e0       	ldi	r25, 0x00	; 0
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
     776:	20 91 b2 00 	lds	r18, 0x00B2
     77a:	23 0f       	add	r18, r19
     77c:	20 93 b3 00 	sts	0x00B3, r18
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     780:	40 93 70 00 	sts	0x0070, r20
   set_sleep_mode(SLEEP_MODE_PWR_SAVE);
     784:	23 b7       	in	r18, 0x33	; 51
     786:	21 7f       	andi	r18, 0xF1	; 241
     788:	26 60       	ori	r18, 0x06	; 6
     78a:	23 bf       	out	0x33, r18	; 51
//   set_sleep_mode(SLEEP_MODE_IDLE);
   sleep_mode();
     78c:	23 b7       	in	r18, 0x33	; 51
     78e:	21 60       	ori	r18, 0x01	; 1
     790:	23 bf       	out	0x33, r18	; 51
     792:	88 95       	sleep
     794:	23 b7       	in	r18, 0x33	; 51
     796:	2e 7f       	andi	r18, 0xFE	; 254
     798:	23 bf       	out	0x33, r18	; 51
// wake up after output compare match interrupt
 #else
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
 #endif
   wdt_reset();
     79a:	a8 95       	wdr
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     79c:	00 97       	sbiw	r24, 0x00	; 0
     79e:	11 f7       	brne	.-60     	; 0x764 <sleep_5ms+0x4>
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
 #endif
   wdt_reset();
  }
TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
     7a0:	10 92 70 00 	sts	0x0070, r1
}
     7a4:	08 95       	ret

000007a6 <ChargePin10ms>:
 }

//******************************************************************
#include "CheckPins.c"

void ChargePin10ms(uint8_t PinToCharge, uint8_t ChargeDirection) {
     7a6:	1f 93       	push	r17
     7a8:	18 2f       	mov	r17, r24
   //Will be used by discharge of MOSFET Gates or to load big capacities.
   //Parameters:
   //PinToCharge: specifies the pin as mask for R-Port
   //ChargeDirection: 0 = switch to GND (N-Kanal-FET), 1= switch to VCC(P-Kanal-FET)

   if(ChargeDirection&1) {
     7aa:	60 ff       	sbrs	r22, 0
     7ac:	03 c0       	rjmp	.+6      	; 0x7b4 <ChargePin10ms+0xe>
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
     7ae:	85 b1       	in	r24, 0x05	; 5
     7b0:	81 2b       	or	r24, r17
     7b2:	03 c0       	rjmp	.+6      	; 0x7ba <ChargePin10ms+0x14>
   } else {
      R_PORT &= ~PinToCharge; // or 0 (GND)
     7b4:	95 b1       	in	r25, 0x05	; 5
     7b6:	80 95       	com	r24
     7b8:	89 23       	and	r24, r25
     7ba:	85 b9       	out	0x05, r24	; 5
   }
   R_DDR |= PinToCharge;		//switch Pin to output, across R to GND or VCC
     7bc:	84 b1       	in	r24, 0x04	; 4
     7be:	81 2b       	or	r24, r17
     7c0:	84 b9       	out	0x04, r24	; 4
   wait_about10ms();			// wait about 10ms
     7c2:	82 e0       	ldi	r24, 0x02	; 2
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>
   // switch back Input, no current
   R_DDR &= ~PinToCharge;	// switch back to input
     7ca:	84 b1       	in	r24, 0x04	; 4
     7cc:	10 95       	com	r17
     7ce:	81 23       	and	r24, r17
     7d0:	84 b9       	out	0x04, r24	; 4
   R_PORT &= ~PinToCharge;	// no Pull up
     7d2:	85 b1       	in	r24, 0x05	; 5
     7d4:	81 23       	and	r24, r17
     7d6:	85 b9       	out	0x05, r24	; 5
}
     7d8:	1f 91       	pop	r17
     7da:	08 95       	ret

000007dc <CheckPins>:
//******************************************************************
void CheckPins(uint8_t HighPin, uint8_t LowPin, uint8_t TristatePin)
  {
     7dc:	2f 92       	push	r2
     7de:	3f 92       	push	r3
     7e0:	4f 92       	push	r4
     7e2:	5f 92       	push	r5
     7e4:	6f 92       	push	r6
     7e6:	7f 92       	push	r7
     7e8:	8f 92       	push	r8
     7ea:	9f 92       	push	r9
     7ec:	af 92       	push	r10
     7ee:	bf 92       	push	r11
     7f0:	cf 92       	push	r12
     7f2:	df 92       	push	r13
     7f4:	ef 92       	push	r14
     7f6:	ff 92       	push	r15
     7f8:	0f 93       	push	r16
     7fa:	1f 93       	push	r17
     7fc:	df 93       	push	r29
     7fe:	cf 93       	push	r28
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
     804:	66 97       	sbiw	r28, 0x16	; 22
     806:	0f b6       	in	r0, 0x3f	; 63
     808:	f8 94       	cli
     80a:	de bf       	out	0x3e, r29	; 62
     80c:	0f be       	out	0x3f, r0	; 63
     80e:	cd bf       	out	0x3d, r28	; 61
     810:	18 2f       	mov	r17, r24
     812:	86 2e       	mov	r8, r22
     814:	49 83       	std	Y+1, r20	; 0x01
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
     816:	a8 95       	wdr
//  #define RR680MI resis680mi
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = pgm_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
     818:	86 2f       	mov	r24, r22
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	fc 01       	movw	r30, r24
     81e:	e6 5f       	subi	r30, 0xF6	; 246
     820:	fe 4f       	sbci	r31, 0xFE	; 254
     822:	24 91       	lpm	r18, Z+
     824:	2d 83       	std	Y+5, r18	; 0x05
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
  TriPinRL = pgm_read_byte(&PinRLtab[TristatePin]);	// intruction for TristatePin R_L
     826:	e4 2f       	mov	r30, r20
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	e6 5f       	subi	r30, 0xF6	; 246
     82c:	fe 4f       	sbci	r31, 0xFE	; 254
     82e:	34 91       	lpm	r19, Z+
     830:	3a 83       	std	Y+2, r19	; 0x02
  TriPinRH = TriPinRL + TriPinRL;			// intruction for TristatePin R_H
     832:	93 2e       	mov	r9, r19
     834:	99 0c       	add	r9, r9
  HiPinRL = pgm_read_byte(&PinRLtab[HighPin]);		// intruction for HighPin R_L
     836:	21 2f       	mov	r18, r17
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	f9 01       	movw	r30, r18
     83c:	e6 5f       	subi	r30, 0xF6	; 246
     83e:	fe 4f       	sbci	r31, 0xFE	; 254
     840:	04 91       	lpm	r16, Z+
  HiPinRH = HiPinRL + HiPinRL;				// intruction for HighPin R_H
     842:	40 2f       	mov	r20, r16
     844:	44 0f       	add	r20, r20
     846:	48 8b       	std	Y+16, r20	; 0x10

  HiADCp = pgm_read_byte(&PinADCtab[HighPin]);		// intruction for ADC High-Pin 
     848:	23 5f       	subi	r18, 0xF3	; 243
     84a:	3e 4f       	sbci	r19, 0xFE	; 254
     84c:	f9 01       	movw	r30, r18
     84e:	f4 91       	lpm	r31, Z+
     850:	fb 83       	std	Y+3, r31	; 0x03
  LoADCp = pgm_read_byte(&PinADCtab[LowPin]);		// intruction for ADC Low-Pin
     852:	83 5f       	subi	r24, 0xF3	; 243
     854:	9e 4f       	sbci	r25, 0xFE	; 254
     856:	fc 01       	movw	r30, r24
     858:	f4 91       	lpm	r31, Z+
  HiADCm = HiADCp | TXD_MSK;
     85a:	2b 81       	ldd	r18, Y+3	; 0x03
     85c:	28 60       	ori	r18, 0x08	; 8
     85e:	2b 83       	std	Y+3, r18	; 0x03
  HiADCp |= TXD_VAL;
  LoADCm = LoADCp | TXD_MSK;
     860:	f8 60       	ori	r31, 0x08	; 8
     862:	fc 83       	std	Y+4, r31	; 0x04
  LoADCp |= TXD_VAL;

  //setting of Pins 
  R_PORT = 0;				//resistor-Port outputs to 0
     864:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//Low-Pin to output and across R_L to GND
     866:	3d 81       	ldd	r19, Y+5	; 0x05
     868:	34 b9       	out	0x04, r19	; 4
  ADC_DDR = HiADCm;		//High-Pin to output
     86a:	27 b9       	out	0x07, r18	; 7
  ADC_PORT = HiADCp;		//High-Pin fix to Vcc
     86c:	28 b9       	out	0x08, r18	; 8
  //for some MOSFET the gate (TristatePin) must be discharged
  ChargePin10ms(TriPinRL,0);		//discharge for N-Kanal
     86e:	8a 81       	ldd	r24, Y+2	; 0x02
     870:	60 e0       	ldi	r22, 0x00	; 0
     872:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <ChargePin10ms>
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin 
     876:	88 2d       	mov	r24, r8
     878:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
     87c:	9b 87       	std	Y+11, r25	; 0x0b
     87e:	8a 87       	std	Y+10, r24	; 0x0a
  if(adc.lp_otr >= 977) {		//no current now? 
     880:	43 e0       	ldi	r20, 0x03	; 3
     882:	81 3d       	cpi	r24, 0xD1	; 209
     884:	94 07       	cpc	r25, r20
     886:	48 f0       	brcs	.+18     	; 0x89a <CheckPins+0xbe>
     ChargePin10ms(TriPinRL,1);	 	//else: discharge for P-channel (Gate to VCC)
     888:	8a 81       	ldd	r24, Y+2	; 0x02
     88a:	61 e0       	ldi	r22, 0x01	; 1
     88c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <ChargePin10ms>
     adc.lp_otr = ReadADC(LowPin);	//read voltage of Low-Pin again
     890:	88 2d       	mov	r24, r8
     892:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
     896:	9b 87       	std	Y+11, r25	; 0x0b
     898:	8a 87       	std	Y+10, r24	; 0x0a
  lcd_line2();
  lcd_clear_line();
  lcd_line2();
#endif

  if(adc.lp_otr > 92) {  //there is some current without TristatePin current 
     89a:	8a 85       	ldd	r24, Y+10	; 0x0a
     89c:	9b 85       	ldd	r25, Y+11	; 0x0b
     89e:	8d 35       	cpi	r24, 0x5D	; 93
     8a0:	91 05       	cpc	r25, r1
     8a2:	08 f4       	brcc	.+2      	; 0x8a6 <CheckPins+0xca>
     8a4:	ac c0       	rjmp	.+344    	; 0x9fe <CheckPins+0x222>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test if N-JFET or if self-conducting N-MOSFET
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
     8a6:	8d 81       	ldd	r24, Y+5	; 0x05
     8a8:	89 29       	or	r24, r9
     8aa:	84 b9       	out	0x04, r24	; 4
     adc.lp1 = W20msReadADC(LowPin);	//measure voltage at the assumed Source 
     8ac:	88 2d       	mov	r24, r8
     8ae:	0e 94 cf 1a 	call	0x359e	; 0x359e <W20msReadADC>
     8b2:	6c 01       	movw	r12, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     8b4:	89 81       	ldd	r24, Y+1	; 0x01
     8b6:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
     8ba:	7c 01       	movw	r14, r24
     R_PORT = TriPinRH;			//switch R_H for Tristate-Pin (probably Gate) to VCC
     8bc:	95 b8       	out	0x05, r9	; 5
     adc.lp2 = W20msReadADC(LowPin);	//measure voltage at the assumed Source again
     8be:	88 2d       	mov	r24, r8
     8c0:	0e 94 cf 1a 	call	0x359e	; 0x359e <W20msReadADC>
     //If it is a self-conducting MOSFET or JFET, then must be: adc.lp2 > adc.lp1 
     if(adc.lp2>(adc.lp1+488)) {
     8c4:	96 01       	movw	r18, r12
     8c6:	28 51       	subi	r18, 0x18	; 24
     8c8:	3e 4f       	sbci	r19, 0xFE	; 254
     8ca:	28 17       	cp	r18, r24
     8cc:	39 07       	cpc	r19, r25
     8ce:	08 f0       	brcs	.+2      	; 0x8d2 <CheckPins+0xf6>
     8d0:	41 c0       	rjmp	.+130    	; 0x954 <CheckPins+0x178>
        //measure voltage at the  Gate, differ between MOSFET and JFET
        ADC_PORT = TXD_VAL;
     8d2:	88 e0       	ldi	r24, 0x08	; 8
     8d4:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = LoADCm;	//Low-Pin fix to GND
     8d6:	9c 81       	ldd	r25, Y+4	; 0x04
     8d8:	97 b9       	out	0x07, r25	; 7
        R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     8da:	89 2d       	mov	r24, r9
     8dc:	80 2b       	or	r24, r16
     8de:	84 b9       	out	0x04, r24	; 4
        R_PORT = TriPinRH | HiPinRL;	//switch R_L for High-Pin to VCC
     8e0:	85 b9       	out	0x05, r24	; 5
        adc.lp2 = W20msReadADC(TristatePin); //read voltage of assumed Gate 
     8e2:	89 81       	ldd	r24, Y+1	; 0x01
     8e4:	0e 94 cf 1a 	call	0x359e	; 0x359e <W20msReadADC>
        if(adc.lp2>3911) {  //MOSFET
     8e8:	af e0       	ldi	r26, 0x0F	; 15
     8ea:	88 34       	cpi	r24, 0x48	; 72
     8ec:	9a 07       	cpc	r25, r26
     8ee:	28 f0       	brcs	.+10     	; 0x8fa <CheckPins+0x11e>
           PartFound = PART_FET;	//N-Kanal-MOSFET
     8f0:	83 e0       	ldi	r24, 0x03	; 3
     8f2:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_N_D_MOS; //Depletion-MOSFET
     8f6:	84 e0       	ldi	r24, 0x04	; 4
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <CheckPins+0x126>
        } else {  //JFET (pn-passage between Gate and Source is conducting )
           PartFound = PART_FET;	//N-Kanal-JFET
     8fa:	83 e0       	ldi	r24, 0x03	; 3
     8fc:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_N_JFET;
     900:	86 e0       	ldi	r24, 0x06	; 6
     902:	80 93 06 01 	sts	0x0106, r24
        }
//      if ((PartReady == 0) || (adc.lp1 > trans.uBE[0])) 
//      there is no way to find out the right Source / Drain
        trans.uBE[0] = adc.lp1;
     906:	d0 92 58 01 	sts	0x0158, r13
     90a:	c0 92 57 01 	sts	0x0157, r12
        gthvoltage = adc.lp1 - adc.tp1;	//voltage GS (Source - Gate)
     90e:	c6 01       	movw	r24, r12
     910:	8e 19       	sub	r24, r14
     912:	9f 09       	sbc	r25, r15
     914:	90 93 60 01 	sts	0x0160, r25
     918:	80 93 5f 01 	sts	0x015F, r24
        trans.uBE[1] = (unsigned int)(((unsigned long)adc.lp1 * 1000) / RR680MI); // Id 0.01mA
     91c:	b6 01       	movw	r22, r12
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	28 ee       	ldi	r18, 0xE8	; 232
     924:	33 e0       	ldi	r19, 0x03	; 3
     926:	40 e0       	ldi	r20, 0x00	; 0
     928:	50 e0       	ldi	r21, 0x00	; 0
     92a:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
     92e:	20 91 02 01 	lds	r18, 0x0102
     932:	30 91 03 01 	lds	r19, 0x0103
     936:	40 e0       	ldi	r20, 0x00	; 0
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
     93e:	30 93 5a 01 	sts	0x015A, r19
     942:	20 93 59 01 	sts	0x0159, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     946:	b9 81       	ldd	r27, Y+1	; 0x01
     948:	b0 93 5b 01 	sts	0x015B, r27
        trans.c = HighPin;
     94c:	10 93 5c 01 	sts	0x015C, r17
        trans.e = LowPin;
     950:	80 92 5d 01 	sts	0x015D, r8
     }

     ADC_PORT = TXD_VAL;		// direct outputs to GND
     954:	88 e0       	ldi	r24, 0x08	; 8
     956:	88 b9       	out	0x08, r24	; 8

     //Test, if P-JFET or if self-conducting P-MOSFET
     ADC_DDR = LoADCm;		//switch Low-Pin (assumed Drain) direct to GND,
     958:	ec 81       	ldd	r30, Y+4	; 0x04
     95a:	e7 b9       	out	0x07, r30	; 7
				//R_H for Tristate-Pin (assumed Gate) is already switched to VCC
     R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     95c:	89 2d       	mov	r24, r9
     95e:	80 2b       	or	r24, r16
     960:	84 b9       	out	0x04, r24	; 4
     R_PORT = TriPinRH | HiPinRL;	//High-Pin across R_L to Vcc
     962:	85 b9       	out	0x05, r24	; 5
     adc.hp1 = W20msReadADC(HighPin);	//measure voltage at assumed Source 
     964:	81 2f       	mov	r24, r17
     966:	0e 94 cf 1a 	call	0x359e	; 0x359e <W20msReadADC>
     96a:	6c 01       	movw	r12, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     96c:	89 81       	ldd	r24, Y+1	; 0x01
     96e:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
     972:	7c 01       	movw	r14, r24
     R_PORT = HiPinRL;			//switch R_H for Tristate-Pin (assumed Gate) to GND
     974:	05 b9       	out	0x05, r16	; 5
     adc.hp2 = W20msReadADC(HighPin);	//read voltage at assumed Source again
     976:	81 2f       	mov	r24, r17
     978:	0e 94 cf 1a 	call	0x359e	; 0x359e <W20msReadADC>
     //if it is a self-conducting P_MOSFET or P-JFET , then must be:  adc.hp1 > adc.hp2 
     if(adc.hp1>(adc.hp2+488)) {
     97c:	88 51       	subi	r24, 0x18	; 24
     97e:	9e 4f       	sbci	r25, 0xFE	; 254
     980:	8c 15       	cp	r24, r12
     982:	9d 05       	cpc	r25, r13
     984:	e0 f5       	brcc	.+120    	; 0x9fe <CheckPins+0x222>
        //read voltage at the Gate , to differ between MOSFET and JFET
        ADC_PORT = HiADCp;	//switch High-Pin directly to VCC
     986:	fb 81       	ldd	r31, Y+3	; 0x03
     988:	f8 b9       	out	0x08, r31	; 8
        ADC_DDR = HiADCm;	//switch High-Pin to output
     98a:	f7 b9       	out	0x07, r31	; 7
        adc.tp2 = W20msReadADC(TristatePin); //read voltage at the assumed Gate 
     98c:	89 81       	ldd	r24, Y+1	; 0x01
     98e:	0e 94 cf 1a 	call	0x359e	; 0x359e <W20msReadADC>
        if(adc.tp2<977) { 		//MOSFET
     992:	23 e0       	ldi	r18, 0x03	; 3
     994:	81 3d       	cpi	r24, 0xD1	; 209
     996:	92 07       	cpc	r25, r18
     998:	28 f4       	brcc	.+10     	; 0x9a4 <CheckPins+0x1c8>
           PartFound = PART_FET;	//P-Kanal-MOSFET
     99a:	83 e0       	ldi	r24, 0x03	; 3
     99c:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_D_MOS; //Depletion-MOSFET
     9a0:	85 e0       	ldi	r24, 0x05	; 5
     9a2:	04 c0       	rjmp	.+8      	; 0x9ac <CheckPins+0x1d0>
        } else { 			//JFET (pn-passage between Gate and Source is conducting)
           PartFound = PART_FET;	//P-Kanal-JFET
     9a4:	83 e0       	ldi	r24, 0x03	; 3
     9a6:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_JFET;
     9aa:	87 e0       	ldi	r24, 0x07	; 7
     9ac:	80 93 06 01 	sts	0x0106, r24
        }
        gthvoltage = adc.tp1 - adc.hp1;		//voltage GS (Gate - Source)
     9b0:	ec 18       	sub	r14, r12
     9b2:	fd 08       	sbc	r15, r13
     9b4:	f0 92 60 01 	sts	0x0160, r15
     9b8:	e0 92 5f 01 	sts	0x015F, r14
        trans.uBE[1] = (unsigned int)(((unsigned long)(ADCconfig.U_AVCC - adc.hp1) * 1000) / RR680PL); // Id 0.01mA
     9bc:	60 91 40 01 	lds	r22, 0x0140
     9c0:	70 91 41 01 	lds	r23, 0x0141
     9c4:	6c 19       	sub	r22, r12
     9c6:	7d 09       	sbc	r23, r13
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	28 ee       	ldi	r18, 0xE8	; 232
     9ce:	33 e0       	ldi	r19, 0x03	; 3
     9d0:	40 e0       	ldi	r20, 0x00	; 0
     9d2:	50 e0       	ldi	r21, 0x00	; 0
     9d4:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
     9d8:	20 91 08 01 	lds	r18, 0x0108
     9dc:	30 91 09 01 	lds	r19, 0x0109
     9e0:	40 e0       	ldi	r20, 0x00	; 0
     9e2:	50 e0       	ldi	r21, 0x00	; 0
     9e4:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
     9e8:	30 93 5a 01 	sts	0x015A, r19
     9ec:	20 93 59 01 	sts	0x0159, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     9f0:	39 81       	ldd	r19, Y+1	; 0x01
     9f2:	30 93 5b 01 	sts	0x015B, r19
        trans.c = LowPin;
     9f6:	80 92 5c 01 	sts	0x015C, r8
        trans.e = HighPin;
     9fa:	10 93 5d 01 	sts	0x015D, r17
  } // end component has current without TristatePin signal


#ifdef COMMON_COLLECTOR
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
     9fe:	88 e0       	ldi	r24, 0x08	; 8
     a00:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;			// Collector direct to GND
     a02:	4c 81       	ldd	r20, Y+4	; 0x04
     a04:	47 b9       	out	0x07, r20	; 7
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
     a06:	05 b9       	out	0x05, r16	; 5
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
     a08:	8a 81       	ldd	r24, Y+2	; 0x02
     a0a:	80 2b       	or	r24, r16
     a0c:	89 8b       	std	Y+17, r24	; 0x11
     a0e:	84 b9       	out	0x04, r24	; 4
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     a10:	c0 90 40 01 	lds	r12, 0x0140
     a14:	d0 90 41 01 	lds	r13, 0x0141
     a18:	81 2f       	mov	r24, r17
     a1a:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
     a1e:	7c 01       	movw	r14, r24
  adc.tp1 = ReadADC(TristatePin);	// voltage at the base resistor
     a20:	89 81       	ldd	r24, Y+1	; 0x01
     a22:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
     a26:	5c 01       	movw	r10, r24

  if (adc.tp1 < 10) {
     a28:	9a e0       	ldi	r25, 0x0A	; 10
     a2a:	a9 16       	cp	r10, r25
     a2c:	b1 04       	cpc	r11, r1
     a2e:	68 f5       	brcc	.+90     	; 0xa8a <CheckPins+0x2ae>
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
     a30:	89 2d       	mov	r24, r9
     a32:	80 2b       	or	r24, r16
     a34:	84 b9       	out	0x04, r24	; 4
     adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);
     a36:	c0 90 40 01 	lds	r12, 0x0140
     a3a:	d0 90 41 01 	lds	r13, 0x0141
     a3e:	81 2f       	mov	r24, r17
     a40:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
     a44:	c8 1a       	sub	r12, r24
     a46:	d9 0a       	sbc	r13, r25
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
     a48:	89 81       	ldd	r24, Y+1	; 0x01
     a4a:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
     a4e:	5c 01       	movw	r10, r24
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     a50:	26 01       	movw	r4, r12
     a52:	66 24       	eor	r6, r6
     a54:	77 24       	eor	r7, r7
     a56:	20 91 08 01 	lds	r18, 0x0108
     a5a:	30 91 09 01 	lds	r19, 0x0109
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e0       	ldi	r21, 0x00	; 0
     a62:	60 e6       	ldi	r22, 0x60	; 96
     a64:	77 eb       	ldi	r23, 0xB7	; 183
     a66:	87 e4       	ldi	r24, 0x47	; 71
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
     a6e:	c3 01       	movw	r24, r6
     a70:	b2 01       	movw	r22, r4
     a72:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
     a76:	95 01       	movw	r18, r10
     a78:	40 e0       	ldi	r20, 0x00	; 0
     a7a:	50 e0       	ldi	r21, 0x00	; 0
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     a7c:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
     a80:	2e 83       	std	Y+6, r18	; 0x06
     a82:	3f 83       	std	Y+7, r19	; 0x07
     a84:	48 87       	std	Y+8, r20	; 0x08
     a86:	59 87       	std	Y+9, r21	; 0x09
     a88:	0f c0       	rjmp	.+30     	; 0xaa8 <CheckPins+0x2cc>
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
  ADC_DDR = LoADCm;			// Collector direct to GND
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     a8a:	ce 18       	sub	r12, r14
     a8c:	df 08       	sbc	r13, r15
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
 #else
     c_hfe = ((adc.hp1 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
  } else {
     c_hfe = (unsigned long)((adc.hp1 - adc.tp1) / adc.tp1);
     a8e:	c6 01       	movw	r24, r12
     a90:	8a 19       	sub	r24, r10
     a92:	9b 09       	sbc	r25, r11
     a94:	b5 01       	movw	r22, r10
     a96:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <__udivmodhi4>
     a9a:	cb 01       	movw	r24, r22
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	8e 83       	std	Y+6, r24	; 0x06
     aa2:	9f 83       	std	Y+7, r25	; 0x07
     aa4:	a8 87       	std	Y+8, r26	; 0x08
     aa6:	b9 87       	std	Y+9, r27	; 0x09
  }
#endif

  //set Pins again for circuit with common Emitter PNP
  R_DDR = LoPinRL;		//switch R_L port for Low-Pin to output (GND)
     aa8:	9d 81       	ldd	r25, Y+5	; 0x05
     aaa:	94 b9       	out	0x04, r25	; 4
  R_PORT = 0;			//switch all resistor ports to GND
     aac:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = HiADCm;		//switch High-Pin to output
     aae:	ab 81       	ldd	r26, Y+3	; 0x03
     ab0:	a7 b9       	out	0x07, r26	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
     ab2:	a8 b9       	out	0x08, r26	; 8
  wait_about5ms();
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>
  
  if(adc.lp_otr < 977) {
     abc:	ea 85       	ldd	r30, Y+10	; 0x0a
     abe:	fb 85       	ldd	r31, Y+11	; 0x0b
     ac0:	23 e0       	ldi	r18, 0x03	; 3
     ac2:	e1 3d       	cpi	r30, 0xD1	; 209
     ac4:	f2 07       	cpc	r31, r18
     ac6:	08 f0       	brcs	.+2      	; 0xaca <CheckPins+0x2ee>
     ac8:	aa c2       	rjmp	.+1364   	; 0x101e <CheckPins+0x842>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test to PNP
     R_DDR = LoPinRL | TriPinRL;	//switch R_L port for Tristate-Pin to output (GND), for Test of PNP
     aca:	3a 81       	ldd	r19, Y+2	; 0x02
     acc:	4d 81       	ldd	r20, Y+5	; 0x05
     ace:	34 2b       	or	r19, r20
     ad0:	3c 87       	std	Y+12, r19	; 0x0c
     ad2:	34 b9       	out	0x04, r19	; 4
     adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin
     ad4:	88 2d       	mov	r24, r8
     ad6:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
     if(adc.lp1 > 3422) {
     ada:	ad e0       	ldi	r26, 0x0D	; 13
     adc:	8f 35       	cpi	r24, 0x5F	; 95
     ade:	9a 07       	cpc	r25, r26
     ae0:	08 f4       	brcc	.+2      	; 0xae4 <CheckPins+0x308>
     ae2:	dc c0       	rjmp	.+440    	; 0xc9c <CheckPins+0x4c0>
        //component has current => PNP-Transistor or equivalent
        //compute current amplification factor in both directions
        R_DDR = LoPinRL | TriPinRH;	//switch R_H port for Tristate-Pin (Base) to output (GND)
     ae4:	bd 81       	ldd	r27, Y+5	; 0x05
     ae6:	b9 29       	or	r27, r9
     ae8:	ba 8b       	std	Y+18, r27	; 0x12
     aea:	b4 b9       	out	0x04, r27	; 4

        adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin (assumed Collector)
     aec:	88 2d       	mov	r24, r8
     aee:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
     af2:	1c 01       	movw	r2, r24
        adc.tp2 = ReadADC(TristatePin);	//measure voltage at TristatePin (Base) 
     af4:	89 81       	ldd	r24, Y+1	; 0x01
     af6:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
     afa:	9d 8b       	std	Y+21, r25	; 0x15
     afc:	8c 8b       	std	Y+20, r24	; 0x14
        //check, if Test is done before 
        if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     afe:	80 91 07 01 	lds	r24, 0x0107
     b02:	82 50       	subi	r24, 0x02	; 2
     b04:	82 30       	cpi	r24, 0x02	; 2
     b06:	18 f4       	brcc	.+6      	; 0xb0e <CheckPins+0x332>
           PartReady = 1;
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 04 01 	sts	0x0104, r24
        }
        trans.uBE[PartReady] = ReadADC(HighPin) - adc.tp2;	// Base Emitter Voltage
     b0e:	e0 90 04 01 	lds	r14, 0x0104
     b12:	ff 24       	eor	r15, r15
     b14:	81 2f       	mov	r24, r17
     b16:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
     b1a:	f7 01       	movw	r30, r14
     b1c:	ee 0f       	add	r30, r30
     b1e:	ff 1f       	adc	r31, r31
     b20:	e9 5a       	subi	r30, 0xA9	; 169
     b22:	fe 4f       	sbci	r31, 0xFE	; 254
     b24:	2c 89       	ldd	r18, Y+20	; 0x14
     b26:	3d 89       	ldd	r19, Y+21	; 0x15
     b28:	82 1b       	sub	r24, r18
     b2a:	93 0b       	sbc	r25, r19
     b2c:	91 83       	std	Z+1, r25	; 0x01
     b2e:	80 83       	st	Z, r24

        //compute current amplification factor for circuit with common Emitter
        //hFE = B = Collector current / Base current
        if(adc.tp2 < 53) {
     b30:	25 33       	cpi	r18, 0x35	; 53
     b32:	31 05       	cpc	r19, r1
     b34:	20 f4       	brcc	.+8      	; 0xb3e <CheckPins+0x362>
#if DebugOut == 5
           lcd_data('<');
           lcd_data('5');
           lcd_data('3');
#endif
           adc.tp2 = 53;
     b36:	85 e3       	ldi	r24, 0x35	; 53
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	9d 8b       	std	Y+21, r25	; 0x15
     b3c:	8c 8b       	std	Y+20, r24	; 0x14
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     b3e:	e0 90 04 01 	lds	r14, 0x0104
     b42:	ff 24       	eor	r15, r15
     b44:	21 01       	movw	r4, r2
     b46:	66 24       	eor	r6, r6
     b48:	77 24       	eor	r7, r7
     b4a:	20 91 02 01 	lds	r18, 0x0102
     b4e:	30 91 03 01 	lds	r19, 0x0103
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	60 e6       	ldi	r22, 0x60	; 96
     b58:	77 eb       	ldi	r23, 0xB7	; 183
     b5a:	87 e4       	ldi	r24, 0x47	; 71
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
     b62:	c3 01       	movw	r24, r6
     b64:	b2 01       	movw	r22, r4
     b66:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
                 (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
     b6a:	ac 89       	ldd	r26, Y+20	; 0x14
     b6c:	bd 89       	ldd	r27, Y+21	; 0x15
     b6e:	9d 01       	movw	r18, r26
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	50 e0       	ldi	r21, 0x00	; 0
     b74:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
#endif
           adc.tp2 = 53;
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     b78:	f7 01       	movw	r30, r14
     b7a:	ee 0f       	add	r30, r30
     b7c:	ff 1f       	adc	r31, r31
     b7e:	ee 0f       	add	r30, r30
     b80:	ff 1f       	adc	r31, r31
     b82:	e1 5b       	subi	r30, 0xB1	; 177
     b84:	fe 4f       	sbci	r31, 0xFE	; 254
     b86:	20 83       	st	Z, r18
     b88:	31 83       	std	Z+1, r19	; 0x01
     b8a:	42 83       	std	Z+2, r20	; 0x02
     b8c:	53 83       	std	Z+3, r21	; 0x03
        trans.hfe[PartReady] = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
#ifdef COMMON_COLLECTOR
        //current amplification factor for common  Collector (Emitter follower)
        // c_hFE = (Emitter current - Base current) / Base current
        if (c_hfe > trans.hfe[PartReady]) {
     b8e:	8e 81       	ldd	r24, Y+6	; 0x06
     b90:	9f 81       	ldd	r25, Y+7	; 0x07
     b92:	a8 85       	ldd	r26, Y+8	; 0x08
     b94:	b9 85       	ldd	r27, Y+9	; 0x09
     b96:	28 17       	cp	r18, r24
     b98:	39 07       	cpc	r19, r25
     b9a:	4a 07       	cpc	r20, r26
     b9c:	5b 07       	cpc	r21, r27
     b9e:	98 f4       	brcc	.+38     	; 0xbc6 <CheckPins+0x3ea>
           trans.hfe[PartReady] = c_hfe;
     ba0:	80 83       	st	Z, r24
     ba2:	91 83       	std	Z+1, r25	; 0x01
     ba4:	a2 83       	std	Z+2, r26	; 0x02
     ba6:	b3 83       	std	Z+3, r27	; 0x03
           trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.hp1 - adc.tp1;	// Base Emitter Voltage common collector
     ba8:	f7 01       	movw	r30, r14
     baa:	ee 0f       	add	r30, r30
     bac:	ff 1f       	adc	r31, r31
     bae:	e9 5a       	subi	r30, 0xA9	; 169
     bb0:	fe 4f       	sbci	r31, 0xFE	; 254
     bb2:	80 91 40 01 	lds	r24, 0x0140
     bb6:	90 91 41 01 	lds	r25, 0x0141
     bba:	8c 19       	sub	r24, r12
     bbc:	9d 09       	sbc	r25, r13
     bbe:	8a 19       	sub	r24, r10
     bc0:	9b 09       	sbc	r25, r11
     bc2:	91 83       	std	Z+1, r25	; 0x01
     bc4:	80 83       	st	Z, r24
        }
#endif

 
        if(PartFound != PART_THYRISTOR) {
     bc6:	80 91 07 01 	lds	r24, 0x0107
     bca:	85 30       	cpi	r24, 0x05	; 5
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <CheckPins+0x3f4>
     bce:	66 c0       	rjmp	.+204    	; 0xc9c <CheckPins+0x4c0>
           if(adc.tp2 > 977) {
     bd0:	ac 89       	ldd	r26, Y+20	; 0x14
     bd2:	bd 89       	ldd	r27, Y+21	; 0x15
     bd4:	e3 e0       	ldi	r30, 0x03	; 3
     bd6:	a2 3d       	cpi	r26, 0xD2	; 210
     bd8:	be 07       	cpc	r27, r30
     bda:	30 f0       	brcs	.+12     	; 0xbe8 <CheckPins+0x40c>
              //PNP-Transistor is found (Base voltage moves to VCC)
              PartFound = PART_TRANSISTOR;
     bdc:	82 e0       	ldi	r24, 0x02	; 2
     bde:	80 93 07 01 	sts	0x0107, r24
              PartMode = PART_MODE_PNP;
     be2:	80 93 06 01 	sts	0x0106, r24
     be6:	53 c0       	rjmp	.+166    	; 0xc8e <CheckPins+0x4b2>
           } else {
              if((adc.lp_otr < 97) && (adc.lp1 > 2000)) {
     be8:	2a 85       	ldd	r18, Y+10	; 0x0a
     bea:	3b 85       	ldd	r19, Y+11	; 0x0b
     bec:	21 36       	cpi	r18, 0x61	; 97
     bee:	31 05       	cpc	r19, r1
     bf0:	08 f0       	brcs	.+2      	; 0xbf4 <CheckPins+0x418>
     bf2:	4d c0       	rjmp	.+154    	; 0xc8e <CheckPins+0x4b2>
     bf4:	31 ed       	ldi	r19, 0xD1	; 209
     bf6:	23 16       	cp	r2, r19
     bf8:	37 e0       	ldi	r19, 0x07	; 7
     bfa:	33 06       	cpc	r3, r19
     bfc:	08 f4       	brcc	.+2      	; 0xc00 <CheckPins+0x424>
     bfe:	47 c0       	rjmp	.+142    	; 0xc8e <CheckPins+0x4b2>
                 //is flow voltage low enough in the closed  state?
                 //(since D-Mode-FET would be by mistake detected as E-Mode )
        	 PartFound = PART_FET;		//P-Kanal-MOSFET is found (Basis/Gate moves not to VCC)
     c00:	83 e0       	ldi	r24, 0x03	; 3
     c02:	80 93 07 01 	sts	0x0107, r24
        	 PartMode = PART_MODE_P_E_MOS;
     c06:	80 93 06 01 	sts	0x0106, r24
        	 //measure the Gate threshold voltage
                 //Switching of Drain is monitored with digital input
                 // Low level is specified up to 0.3 * VCC
                 // High level is specified above 0.6 * VCC
                 PinMSK = LoADCm & 7;
     c0a:	cc 80       	ldd	r12, Y+4	; 0x04
     c0c:	47 e0       	ldi	r20, 0x07	; 7
     c0e:	c4 22       	and	r12, r20
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	80 64       	ori	r24, 0x40	; 64
     c14:	80 93 7c 00 	sts	0x007C, r24
        	 gthvoltage = 1;			// round up ((1*4)/9)
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	90 93 60 01 	sts	0x0160, r25
     c20:	80 93 5f 01 	sts	0x015F, r24
     c24:	5b e0       	ldi	r21, 0x0B	; 11
     c26:	e5 2e       	mov	r14, r21
        	 for(ii=0;ii<11;ii++) {
        	    wdt_reset();
     c28:	a8 95       	wdr
        	    ChargePin10ms(TriPinRL,1);
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	61 e0       	ldi	r22, 0x01	; 1
     c2e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <ChargePin10ms>
                    R_DDR = LoPinRL | TriPinRH;		//switch R_H for Tristate-Pin (Basis) to GND
     c32:	8a 89       	ldd	r24, Y+18	; 0x12
     c34:	84 b9       	out	0x04, r24	; 4
        	    while (!(ADC_PIN&PinMSK));		// Wait, until the MOSFET switches and Drain moves to VCC
     c36:	86 b1       	in	r24, 0x06	; 6
     c38:	8c 21       	and	r24, r12
     c3a:	e9 f3       	breq	.-6      	; 0xc36 <CheckPins+0x45a>
                    			// 1 is detected with more than 2.5V (up to 2.57V) with tests of mega168 and mega328
        	    R_DDR = LoPinRL;
     c3c:	9d 81       	ldd	r25, Y+5	; 0x05
     c3e:	94 b9       	out	0x04, r25	; 4
        	    ADCSRA |= (1<<ADSC);		// Start Conversion
     c40:	80 91 7a 00 	lds	r24, 0x007A
     c44:	80 64       	ori	r24, 0x40	; 64
     c46:	80 93 7a 00 	sts	0x007A, r24
        	    while (ADCSRA&(1<<ADSC));		// wait
     c4a:	80 91 7a 00 	lds	r24, 0x007A
     c4e:	86 fd       	sbrc	r24, 6
     c50:	fc cf       	rjmp	.-8      	; 0xc4a <CheckPins+0x46e>
      		    gthvoltage += (1023 - ADCW);	// Add Tristatepin-Voltage
     c52:	20 91 78 00 	lds	r18, 0x0078
     c56:	30 91 79 00 	lds	r19, 0x0079
     c5a:	80 91 5f 01 	lds	r24, 0x015F
     c5e:	90 91 60 01 	lds	r25, 0x0160
     c62:	81 50       	subi	r24, 0x01	; 1
     c64:	9c 4f       	sbci	r25, 0xFC	; 252
     c66:	82 1b       	sub	r24, r18
     c68:	93 0b       	sbc	r25, r19
     c6a:	90 93 60 01 	sts	0x0160, r25
     c6e:	80 93 5f 01 	sts	0x015F, r24
     c72:	ea 94       	dec	r14
                 // Low level is specified up to 0.3 * VCC
                 // High level is specified above 0.6 * VCC
                 PinMSK = LoADCm & 7;
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
        	 gthvoltage = 1;			// round up ((1*4)/9)
        	 for(ii=0;ii<11;ii++) {
     c74:	c9 f6       	brne	.-78     	; 0xc28 <CheckPins+0x44c>
        	    R_DDR = LoPinRL;
        	    ADCSRA |= (1<<ADSC);		// Start Conversion
        	    while (ADCSRA&(1<<ADSC));		// wait
      		    gthvoltage += (1023 - ADCW);	// Add Tristatepin-Voltage
                 }
                 gthvoltage *= 4;		// is equal to 44*ADCW
     c76:	88 0f       	add	r24, r24
     c78:	99 1f       	adc	r25, r25
     c7a:	88 0f       	add	r24, r24
     c7c:	99 1f       	adc	r25, r25
                 gthvoltage /= 9;		// gives resolution in mV
     c7e:	69 e0       	ldi	r22, 0x09	; 9
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <__udivmodhi4>
     c86:	70 93 60 01 	sts	0x0160, r23
     c8a:	60 93 5f 01 	sts	0x015F, r22
              }
           }
           trans.b = TristatePin;
     c8e:	a9 81       	ldd	r26, Y+1	; 0x01
     c90:	a0 93 5b 01 	sts	0x015B, r26
           trans.c = LowPin;
     c94:	80 92 5c 01 	sts	0x015C, r8
           trans.e = HighPin;
     c98:	10 93 5d 01 	sts	0x015D, r17
        }  // end if PartFound != PART_THYRISTOR
    } // end component has current => PNP

#ifdef COMMON_COLLECTOR
    // Low-Pin=RL- HighPin=VCC
    R_DDR = LoPinRL | TriPinRL;
     c9c:	bc 85       	ldd	r27, Y+12	; 0x0c
     c9e:	b4 b9       	out	0x04, r27	; 4
    R_PORT = TriPinRL;			// TriPin=RL+  NPN with common Collector
     ca0:	ea 81       	ldd	r30, Y+2	; 0x02
     ca2:	e5 b9       	out	0x05, r30	; 5
    adc.lp1 = W5msReadADC(LowPin);	// voltage at Emitter resistor
     ca4:	88 2d       	mov	r24, r8
     ca6:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
     caa:	9f 83       	std	Y+7, r25	; 0x07
     cac:	8e 83       	std	Y+6, r24	; 0x06
    adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     cae:	20 91 40 01 	lds	r18, 0x0140
     cb2:	30 91 41 01 	lds	r19, 0x0141
     cb6:	3d 8b       	std	Y+21, r19	; 0x15
     cb8:	2c 8b       	std	Y+20, r18	; 0x14
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
     cc0:	ac 89       	ldd	r26, Y+20	; 0x14
     cc2:	bd 89       	ldd	r27, Y+21	; 0x15
     cc4:	a8 1b       	sub	r26, r24
     cc6:	b9 0b       	sbc	r27, r25
     cc8:	bd 8b       	std	Y+21, r27	; 0x15
     cca:	ac 8b       	std	Y+20, r26	; 0x14
    if (adc.tp1 < 10) {
     ccc:	aa 30       	cpi	r26, 0x0A	; 10
     cce:	b1 05       	cpc	r27, r1
     cd0:	c8 f5       	brcc	.+114    	; 0xd44 <CheckPins+0x568>
       R_DDR = LoPinRL | TriPinRH;
     cd2:	8d 81       	ldd	r24, Y+5	; 0x05
     cd4:	89 29       	or	r24, r9
     cd6:	84 b9       	out	0x04, r24	; 4
       R_PORT = TriPinRH;		// Tripin=RH+
     cd8:	95 b8       	out	0x05, r9	; 5
       adc.lp1 = W5msReadADC(LowPin);
     cda:	88 2d       	mov	r24, r8
     cdc:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
     ce0:	9f 83       	std	Y+7, r25	; 0x07
     ce2:	8e 83       	std	Y+6, r24	; 0x06
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     ce4:	e0 91 40 01 	lds	r30, 0x0140
     ce8:	f0 91 41 01 	lds	r31, 0x0141
     cec:	fd 8b       	std	Y+21, r31	; 0x15
     cee:	ec 8b       	std	Y+20, r30	; 0x14
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
     cf6:	2c 89       	ldd	r18, Y+20	; 0x14
     cf8:	3d 89       	ldd	r19, Y+21	; 0x15
     cfa:	28 1b       	sub	r18, r24
     cfc:	39 0b       	sbc	r19, r25
     cfe:	3d 8b       	std	Y+21, r19	; 0x15
     d00:	2c 8b       	std	Y+20, r18	; 0x14
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     d02:	8e 81       	ldd	r24, Y+6	; 0x06
     d04:	9f 81       	ldd	r25, Y+7	; 0x07
     d06:	6c 01       	movw	r12, r24
     d08:	ee 24       	eor	r14, r14
     d0a:	ff 24       	eor	r15, r15
     d0c:	20 91 02 01 	lds	r18, 0x0102
     d10:	30 91 03 01 	lds	r19, 0x0103
     d14:	40 e0       	ldi	r20, 0x00	; 0
     d16:	50 e0       	ldi	r21, 0x00	; 0
     d18:	60 e6       	ldi	r22, 0x60	; 96
     d1a:	77 eb       	ldi	r23, 0xB7	; 183
     d1c:	87 e4       	ldi	r24, 0x47	; 71
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
     d24:	c7 01       	movw	r24, r14
     d26:	b6 01       	movw	r22, r12
     d28:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
     d2c:	ac 89       	ldd	r26, Y+20	; 0x14
     d2e:	bd 89       	ldd	r27, Y+21	; 0x15
     d30:	9d 01       	movw	r18, r26
     d32:	40 e0       	ldi	r20, 0x00	; 0
     d34:	50 e0       	ldi	r21, 0x00	; 0
       R_DDR = LoPinRL | TriPinRH;
       R_PORT = TriPinRH;		// Tripin=RH+
       adc.lp1 = W5msReadADC(LowPin);
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     d36:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
     d3a:	2c 87       	std	Y+12, r18	; 0x0c
     d3c:	3d 87       	std	Y+13, r19	; 0x0d
     d3e:	4e 87       	std	Y+14, r20	; 0x0e
     d40:	5f 87       	std	Y+15, r21	; 0x0f
     d42:	10 c0       	rjmp	.+32     	; 0xd64 <CheckPins+0x588>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
 #else
       c_hfe = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
    } else {
       c_hfe = (adc.lp1 - adc.tp1) / adc.tp1;
     d44:	8e 81       	ldd	r24, Y+6	; 0x06
     d46:	9f 81       	ldd	r25, Y+7	; 0x07
     d48:	ec 89       	ldd	r30, Y+20	; 0x14
     d4a:	fd 89       	ldd	r31, Y+21	; 0x15
     d4c:	8e 1b       	sub	r24, r30
     d4e:	9f 0b       	sbc	r25, r31
     d50:	bf 01       	movw	r22, r30
     d52:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <__udivmodhi4>
     d56:	cb 01       	movw	r24, r22
     d58:	a0 e0       	ldi	r26, 0x00	; 0
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	8c 87       	std	Y+12, r24	; 0x0c
     d5e:	9d 87       	std	Y+13, r25	; 0x0d
     d60:	ae 87       	std	Y+14, r26	; 0x0e
     d62:	bf 87       	std	Y+15, r27	; 0x0f
       lcd_string(utoa(adc.tp1,outval,10));
       wait_about1s();
#endif
#endif
    //Tristate (can be Base) to VCC, Test if NPN
    ADC_DDR = LoADCm;		//Low-Pin to output 0V
     d64:	9c 81       	ldd	r25, Y+4	; 0x04
     d66:	97 b9       	out	0x07, r25	; 7
    ADC_PORT = TXD_VAL;			//switch Low-Pin to GND
     d68:	88 e0       	ldi	r24, 0x08	; 8
     d6a:	88 b9       	out	0x08, r24	; 8
    R_DDR = TriPinRL | HiPinRL;		//RL port for High-Pin and Tristate-Pin to output
     d6c:	a9 89       	ldd	r26, Y+17	; 0x11
     d6e:	a4 b9       	out	0x04, r26	; 4
    R_PORT = TriPinRL | HiPinRL;	//RL port for High-Pin and Tristate-Pin to Vcc
     d70:	a5 b9       	out	0x05, r26	; 5
    adc.hp1 = W5msReadADC(HighPin);	//measure voltage at High-Pin  (Collector)
     d72:	81 2f       	mov	r24, r17
     d74:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
    if(adc.hp1 < 1600) {
     d78:	b6 e0       	ldi	r27, 0x06	; 6
     d7a:	80 34       	cpi	r24, 0x40	; 64
     d7c:	9b 07       	cpc	r25, r27
     d7e:	08 f0       	brcs	.+2      	; 0xd82 <CheckPins+0x5a6>
     d80:	4a c1       	rjmp	.+660    	; 0x1016 <CheckPins+0x83a>
       lcd_data('N');
       lcd_testpin(HighPin);
       lcd_space();
       wait_about1s();
#endif
       if(PartReady==1) {
     d82:	80 91 04 01 	lds	r24, 0x0104
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	09 f4       	brne	.+2      	; 0xd8c <CheckPins+0x5b0>
     d8a:	c6 c1       	rjmp	.+908    	; 0x1118 <CheckPins+0x93c>
          goto widmes;
       }

       //Test auf Thyristor:
       //Gate discharge
       ChargePin10ms(TriPinRL,0);	//Tristate-Pin (Gate) across R_L 10ms to GND
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <ChargePin10ms>
       adc.hp3 = W5msReadADC(HighPin);	//read voltage at High-Pin (probably Anode) again
     d94:	81 2f       	mov	r24, r17
     d96:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
     d9a:	7c 01       	movw	r14, r24
					//current should still flow, if not,
					// no Thyristor or holding current to low 
		 	
       R_PORT = 0;			//switch R_L for High-Pin (probably Anode) to GND (turn off)
     d9c:	15 b8       	out	0x05, r1	; 5
       wait_about5ms();
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>
       R_PORT = HiPinRL;		//switch R_L for High-Pin (probably Anode) again to VCC
     da6:	05 b9       	out	0x05, r16	; 5
       adc.hp2 = W5msReadADC(HighPin);	//measure voltage at the High-Pin (probably Anode) again
     da8:	81 2f       	mov	r24, r17
     daa:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
       if((adc.hp3 < 1600) && (adc.hp2 > 4400)) {
     dae:	e0 e4       	ldi	r30, 0x40	; 64
     db0:	ee 16       	cp	r14, r30
     db2:	e6 e0       	ldi	r30, 0x06	; 6
     db4:	fe 06       	cpc	r15, r30
     db6:	08 f0       	brcs	.+2      	; 0xdba <CheckPins+0x5de>
     db8:	47 c0       	rjmp	.+142    	; 0xe48 <CheckPins+0x66c>
     dba:	f1 e1       	ldi	r31, 0x11	; 17
     dbc:	81 33       	cpi	r24, 0x31	; 49
     dbe:	9f 07       	cpc	r25, r31
     dc0:	08 f4       	brcc	.+2      	; 0xdc4 <CheckPins+0x5e8>
     dc2:	42 c0       	rjmp	.+132    	; 0xe48 <CheckPins+0x66c>
          //if the holding current was switched off the thyristor must be switched off too. 
          //if Thyristor was still swiched on, if gate was switched off => Thyristor
          PartFound = PART_THYRISTOR;
     dc4:	85 e0       	ldi	r24, 0x05	; 5
     dc6:	80 93 07 01 	sts	0x0107, r24
          //Test if Triac
          R_DDR = 0;
     dca:	14 b8       	out	0x04, r1	; 4
          R_PORT = 0;
     dcc:	15 b8       	out	0x05, r1	; 5
          ADC_PORT = LoADCp;	//Low-Pin fix to VCC
     dce:	2c 81       	ldd	r18, Y+4	; 0x04
     dd0:	28 b9       	out	0x08, r18	; 8
          wait_about5ms();
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>
          R_DDR = HiPinRL;		//switch R_L port HighPin to output (GND)
     dda:	04 b9       	out	0x04, r16	; 4
          if(W5msReadADC(HighPin) > 244) {
     ddc:	81 2f       	mov	r24, r17
     dde:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
     de2:	85 3f       	cpi	r24, 0xF5	; 245
     de4:	91 05       	cpc	r25, r1
     de6:	08 f0       	brcs	.+2      	; 0xdea <CheckPins+0x60e>
     de8:	0f c1       	rjmp	.+542    	; 0x1008 <CheckPins+0x82c>
             goto savenresult;		//measure voltage at the  High-Pin (probably A2); if too high:
                                	//component has current => kein Triac
          }
          R_DDR = HiPinRL | TriPinRL;	//switch R_L port for TristatePin (Gate) to output (GND) => Triac should be triggered 
     dea:	39 89       	ldd	r19, Y+17	; 0x11
     dec:	34 b9       	out	0x04, r19	; 4
          if(W5msReadADC(TristatePin) < 977) {
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
     df4:	43 e0       	ldi	r20, 0x03	; 3
     df6:	81 3d       	cpi	r24, 0xD1	; 209
     df8:	94 07       	cpc	r25, r20
     dfa:	08 f4       	brcc	.+2      	; 0xdfe <CheckPins+0x622>
     dfc:	05 c1       	rjmp	.+522    	; 0x1008 <CheckPins+0x82c>
             goto savenresult; 		//measure voltage at the Tristate-Pin (probably Gate) ;
                              		// if to low, abort 
          }
          if(ReadADC(HighPin) < 733) {
     dfe:	81 2f       	mov	r24, r17
     e00:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
     e04:	a2 e0       	ldi	r26, 0x02	; 2
     e06:	8d 3d       	cpi	r24, 0xDD	; 221
     e08:	9a 07       	cpc	r25, r26
     e0a:	08 f4       	brcc	.+2      	; 0xe0e <CheckPins+0x632>
     e0c:	fd c0       	rjmp	.+506    	; 0x1008 <CheckPins+0x82c>
             goto savenresult; 		//component has no current => no Triac => abort
          }
          R_DDR = HiPinRL;		//TristatePin (Gate) to input 
     e0e:	04 b9       	out	0x04, r16	; 4
          if(W5msReadADC(HighPin) < 733) {
     e10:	81 2f       	mov	r24, r17
     e12:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
     e16:	b2 e0       	ldi	r27, 0x02	; 2
     e18:	8d 3d       	cpi	r24, 0xDD	; 221
     e1a:	9b 07       	cpc	r25, r27
     e1c:	08 f4       	brcc	.+2      	; 0xe20 <CheckPins+0x644>
     e1e:	f4 c0       	rjmp	.+488    	; 0x1008 <CheckPins+0x82c>
             goto savenresult; 		//component has no current without base current => no Triac => abort
          }
          R_PORT = HiPinRL;		//switch R_L port for HighPin to VCC => switch off holding current 
     e20:	05 b9       	out	0x05, r16	; 5
          wait_about5ms();
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>
          R_PORT = 0;			//switch R_L port for HighPin again to GND; Triac should now switched off
     e2a:	15 b8       	out	0x05, r1	; 5
          if(W5msReadADC(HighPin) > 244) {
     e2c:	81 2f       	mov	r24, r17
     e2e:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
     e32:	85 3f       	cpi	r24, 0xF5	; 245
     e34:	91 05       	cpc	r25, r1
     e36:	08 f0       	brcs	.+2      	; 0xe3a <CheckPins+0x65e>
     e38:	e7 c0       	rjmp	.+462    	; 0x1008 <CheckPins+0x82c>
             goto savenresult;		//measure voltage at the High-Pin (probably A2) ;
                                	//if to high, component is not switched off => no Triac, abort
         }
         PartFound = PART_TRIAC;
     e3a:	84 e0       	ldi	r24, 0x04	; 4
     e3c:	80 93 07 01 	sts	0x0107, r24
         PartReady = 1;
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	80 93 04 01 	sts	0x0104, r24
         goto savenresult;
     e46:	e0 c0       	rjmp	.+448    	; 0x1008 <CheckPins+0x82c>
        }
      //Test if NPN Transistor or MOSFET
      // ADC_DDR = LoADCm;	//Low-Pin to output 0V
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
     e48:	90 2a       	or	r9, r16
     e4a:	94 b8       	out	0x04, r9	; 4
      R_PORT = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to VCC
     e4c:	95 b8       	out	0x05, r9	; 5
      wait_about50ms();
     e4e:	8a e0       	ldi	r24, 0x0A	; 10
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>
      adc.hp2 = ADCconfig.U_AVCC - ReadADC(HighPin);	//measure the voltage at the collector resistor 
     e56:	60 90 40 01 	lds	r6, 0x0140
     e5a:	70 90 41 01 	lds	r7, 0x0141
     e5e:	81 2f       	mov	r24, r17
     e60:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
     e64:	68 1a       	sub	r6, r24
     e66:	79 0a       	sbc	r7, r25
      adc.tp2 = ADCconfig.U_AVCC - ReadADC(TristatePin);	//measure the voltage at the base resistor 
     e68:	c0 90 40 01 	lds	r12, 0x0140
     e6c:	d0 90 41 01 	lds	r13, 0x0141
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
     e76:	c8 1a       	sub	r12, r24
     e78:	d9 0a       	sbc	r13, r25
       lcd_space();
       lcd_data('T');
       lcd_data('P');
       lcd_string(utoa(adc.tp2,outval,10));
#endif
      if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     e7a:	80 91 07 01 	lds	r24, 0x0107
     e7e:	82 50       	subi	r24, 0x02	; 2
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	18 f4       	brcc	.+6      	; 0xe8a <CheckPins+0x6ae>
         PartReady = 1;	//check, if test is already done once
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	80 93 04 01 	sts	0x0104, r24
      }
      trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.tp2 - ReadADC(LowPin);
     e8a:	a0 90 04 01 	lds	r10, 0x0104
     e8e:	bb 24       	eor	r11, r11
     e90:	e0 90 40 01 	lds	r14, 0x0140
     e94:	f0 90 41 01 	lds	r15, 0x0141
     e98:	ec 18       	sub	r14, r12
     e9a:	fd 08       	sbc	r15, r13
     e9c:	88 2d       	mov	r24, r8
     e9e:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
     ea2:	f5 01       	movw	r30, r10
     ea4:	ee 0f       	add	r30, r30
     ea6:	ff 1f       	adc	r31, r31
     ea8:	e9 5a       	subi	r30, 0xA9	; 169
     eaa:	fe 4f       	sbci	r31, 0xFE	; 254
     eac:	e8 1a       	sub	r14, r24
     eae:	f9 0a       	sbc	r15, r25
     eb0:	f1 82       	std	Z+1, r15	; 0x01
     eb2:	e0 82       	st	Z, r14

      //compute current amplification factor for common Emitter
      //hFE = B = Collector current / Base current
      if(adc.tp2 < 53) {
     eb4:	e5 e3       	ldi	r30, 0x35	; 53
     eb6:	ce 16       	cp	r12, r30
     eb8:	d1 04       	cpc	r13, r1
     eba:	18 f4       	brcc	.+6      	; 0xec2 <CheckPins+0x6e6>
#if DebugOut == 5
         lcd_data('<');
         lcd_data('5');
         lcd_data('3');
#endif
         adc.tp2 = 53;
     ebc:	25 e3       	ldi	r18, 0x35	; 53
     ebe:	c2 2e       	mov	r12, r18
     ec0:	d1 2c       	mov	r13, r1
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     ec2:	e0 90 04 01 	lds	r14, 0x0104
     ec6:	ff 24       	eor	r15, r15
     ec8:	13 01       	movw	r2, r6
     eca:	44 24       	eor	r4, r4
     ecc:	55 24       	eor	r5, r5
     ece:	20 91 08 01 	lds	r18, 0x0108
     ed2:	30 91 09 01 	lds	r19, 0x0109
     ed6:	40 e0       	ldi	r20, 0x00	; 0
     ed8:	50 e0       	ldi	r21, 0x00	; 0
     eda:	60 e6       	ldi	r22, 0x60	; 96
     edc:	77 eb       	ldi	r23, 0xB7	; 183
     ede:	87 e4       	ldi	r24, 0x47	; 71
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
     ee6:	c2 01       	movw	r24, r4
     ee8:	b1 01       	movw	r22, r2
     eea:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp2;	
     eee:	96 01       	movw	r18, r12
     ef0:	40 e0       	ldi	r20, 0x00	; 0
     ef2:	50 e0       	ldi	r21, 0x00	; 0
     ef4:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
#endif
         adc.tp2 = 53;
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     ef8:	f7 01       	movw	r30, r14
     efa:	ee 0f       	add	r30, r30
     efc:	ff 1f       	adc	r31, r31
     efe:	ee 0f       	add	r30, r30
     f00:	ff 1f       	adc	r31, r31
     f02:	e1 5b       	subi	r30, 0xB1	; 177
     f04:	fe 4f       	sbci	r31, 0xFE	; 254
     f06:	20 83       	st	Z, r18
     f08:	31 83       	std	Z+1, r19	; 0x01
     f0a:	42 83       	std	Z+2, r20	; 0x02
     f0c:	53 83       	std	Z+3, r21	; 0x03
      trans.hfe[PartReady] = ((adc.hp2 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
#endif
#ifdef COMMON_COLLECTOR
       //compare current amplification factor for common Collector (Emitter follower)
       // hFE = (Emitterstrom - Basisstrom) / Basisstrom
       if (c_hfe >  trans.hfe[PartReady]) {
     f0e:	8c 85       	ldd	r24, Y+12	; 0x0c
     f10:	9d 85       	ldd	r25, Y+13	; 0x0d
     f12:	ae 85       	ldd	r26, Y+14	; 0x0e
     f14:	bf 85       	ldd	r27, Y+15	; 0x0f
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	b8 f4       	brcc	.+46     	; 0xf4e <CheckPins+0x772>
          trans.hfe[PartReady] = c_hfe;
     f20:	80 83       	st	Z, r24
     f22:	91 83       	std	Z+1, r25	; 0x01
     f24:	a2 83       	std	Z+2, r26	; 0x02
     f26:	b3 83       	std	Z+3, r27	; 0x03
          trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.lp1 - adc.tp1;
     f28:	f7 01       	movw	r30, r14
     f2a:	ee 0f       	add	r30, r30
     f2c:	ff 1f       	adc	r31, r31
     f2e:	e9 5a       	subi	r30, 0xA9	; 169
     f30:	fe 4f       	sbci	r31, 0xFE	; 254
     f32:	80 91 40 01 	lds	r24, 0x0140
     f36:	90 91 41 01 	lds	r25, 0x0141
     f3a:	ae 81       	ldd	r26, Y+6	; 0x06
     f3c:	bf 81       	ldd	r27, Y+7	; 0x07
     f3e:	8a 1b       	sub	r24, r26
     f40:	9b 0b       	sbc	r25, r27
     f42:	2c 89       	ldd	r18, Y+20	; 0x14
     f44:	3d 89       	ldd	r19, Y+21	; 0x15
     f46:	82 1b       	sub	r24, r18
     f48:	93 0b       	sbc	r25, r19
     f4a:	91 83       	std	Z+1, r25	; 0x01
     f4c:	80 83       	st	Z, r24
       }
#endif

      if(adc.tp2 > 2557) {		// Basis-voltage R_H is low enough
     f4e:	3e ef       	ldi	r19, 0xFE	; 254
     f50:	c3 16       	cp	r12, r19
     f52:	39 e0       	ldi	r19, 0x09	; 9
     f54:	d3 06       	cpc	r13, r19
     f56:	38 f0       	brcs	.+14     	; 0xf66 <CheckPins+0x78a>
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
     f58:	82 e0       	ldi	r24, 0x02	; 2
     f5a:	80 93 07 01 	sts	0x0107, r24
         PartMode = PART_MODE_NPN;
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	80 93 06 01 	sts	0x0106, r24
     f64:	51 c0       	rjmp	.+162    	; 0x1008 <CheckPins+0x82c>
      } else { // Basis has low current
         if((adc.lp_otr < 97) && (adc.hp2 > 3400)) {
     f66:	8a 85       	ldd	r24, Y+10	; 0x0a
     f68:	9b 85       	ldd	r25, Y+11	; 0x0b
     f6a:	81 36       	cpi	r24, 0x61	; 97
     f6c:	91 05       	cpc	r25, r1
     f6e:	08 f0       	brcs	.+2      	; 0xf72 <CheckPins+0x796>
     f70:	4b c0       	rjmp	.+150    	; 0x1008 <CheckPins+0x82c>
     f72:	99 e4       	ldi	r25, 0x49	; 73
     f74:	69 16       	cp	r6, r25
     f76:	9d e0       	ldi	r25, 0x0D	; 13
     f78:	79 06       	cpc	r7, r25
     f7a:	08 f4       	brcc	.+2      	; 0xf7e <CheckPins+0x7a2>
     f7c:	45 c0       	rjmp	.+138    	; 0x1008 <CheckPins+0x82c>
            //if flow voltage in switched off mode low enough?
            //(since D-Mode-FET will be detected in error as E-Mode )
            PartFound = PART_FET;	//N-Kanal-MOSFET is found (Basis/Gate will Not be pulled down)
     f7e:	83 e0       	ldi	r24, 0x03	; 3
     f80:	80 93 07 01 	sts	0x0107, r24
            PartMode = PART_MODE_N_E_MOS;
     f84:	82 e0       	ldi	r24, 0x02	; 2
     f86:	80 93 06 01 	sts	0x0106, r24
            wait_about1s();
#endif
            //Switching of Drain is monitored with digital input
            // Low level is specified up to 0.3 * VCC
            // High level is specified above 0.6 * VCC
            PinMSK = HiADCm & 7;
     f8a:	eb 80       	ldd	r14, Y+3	; 0x03
     f8c:	a7 e0       	ldi	r26, 0x07	; 7
     f8e:	ea 22       	and	r14, r26
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	80 64       	ori	r24, 0x40	; 64
     f94:	80 93 7c 00 	sts	0x007C, r24
            gthvoltage = 1;			// round up ((1*4)/9)
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	90 93 60 01 	sts	0x0160, r25
     fa0:	80 93 5f 01 	sts	0x015F, r24
     fa4:	bb e0       	ldi	r27, 0x0B	; 11
     fa6:	cb 2e       	mov	r12, r27
            for(ii=0;ii<11;ii++) {
            	wdt_reset();
     fa8:	a8 95       	wdr
            	ChargePin10ms(TriPinRL,0);	// discharge Gate 10ms with RL 
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	60 e0       	ldi	r22, 0x00	; 0
     fae:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <ChargePin10ms>
                R_DDR = HiPinRL | TriPinRH;	// slowly charge Gate 
     fb2:	94 b8       	out	0x04, r9	; 4
                R_PORT = HiPinRL | TriPinRH;
     fb4:	95 b8       	out	0x05, r9	; 5
            	while ((ADC_PIN&PinMSK));	// Wait, until the MOSFET switch and Drain moved to low 
     fb6:	86 b1       	in	r24, 0x06	; 6
     fb8:	8e 21       	and	r24, r14
     fba:	e9 f7       	brne	.-6      	; 0xfb6 <CheckPins+0x7da>
                		// 0 is detected with input voltage of 2.12V to 2.24V (tested with mega168 & mega328)
                R_DDR = HiPinRL;		// switch off current
     fbc:	04 b9       	out	0x04, r16	; 4
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
     fbe:	80 91 7a 00 	lds	r24, 0x007A
     fc2:	80 64       	ori	r24, 0x40	; 64
     fc4:	80 93 7a 00 	sts	0x007A, r24
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
     fc8:	80 91 7a 00 	lds	r24, 0x007A
     fcc:	86 fd       	sbrc	r24, 6
     fce:	fc cf       	rjmp	.-8      	; 0xfc8 <CheckPins+0x7ec>
            	gthvoltage += ADCW;		// add result of ADC
     fd0:	80 91 78 00 	lds	r24, 0x0078
     fd4:	90 91 79 00 	lds	r25, 0x0079
     fd8:	20 91 5f 01 	lds	r18, 0x015F
     fdc:	30 91 60 01 	lds	r19, 0x0160
     fe0:	82 0f       	add	r24, r18
     fe2:	93 1f       	adc	r25, r19
     fe4:	90 93 60 01 	sts	0x0160, r25
     fe8:	80 93 5f 01 	sts	0x015F, r24
     fec:	ca 94       	dec	r12
            // High level is specified above 0.6 * VCC
            PinMSK = HiADCm & 7;
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
            gthvoltage = 1;			// round up ((1*4)/9)
            for(ii=0;ii<11;ii++) {
     fee:	e1 f6       	brne	.-72     	; 0xfa8 <CheckPins+0x7cc>
                R_DDR = HiPinRL;		// switch off current
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
            	gthvoltage += ADCW;		// add result of ADC
            }
            gthvoltage *= 4;	//is equal to 44 * ADCW
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
            gthvoltage /= 9;	//scale to mV
     ff8:	69 e0       	ldi	r22, 0x09	; 9
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <__udivmodhi4>
    1000:	70 93 60 01 	sts	0x0160, r23
    1004:	60 93 5f 01 	sts	0x015F, r22
         }
      }
savenresult:
      trans.b = TristatePin;	// save Pin-constellation
    1008:	b9 81       	ldd	r27, Y+1	; 0x01
    100a:	b0 93 5b 01 	sts	0x015B, r27
      trans.c = HighPin;
    100e:	10 93 5c 01 	sts	0x015C, r17
      trans.e = LowPin;
    1012:	80 92 5d 01 	sts	0x015D, r8
   } // end component conduct => npn
   ADC_DDR = TXD_MSK;		// switch all ADC-Ports to input
    1016:	88 e0       	ldi	r24, 0x08	; 8
    1018:	87 b9       	out	0x07, r24	; 7
   ADC_PORT = TXD_VAL;		// switch all ADC-Ports to 0 (no Pull up)
    101a:	88 b9       	out	0x08, r24	; 8
   //Fertig
   //end das component has no connection between HighPin and LowPin
   goto widmes;
    101c:	7d c0       	rjmp	.+250    	; 0x1118 <CheckPins+0x93c>
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
    101e:	88 e0       	ldi	r24, 0x08	; 8
    1020:	88 b9       	out	0x08, r24	; 8
    1022:	f8 ec       	ldi	r31, 0xC8	; 200
    1024:	ef 2e       	mov	r14, r31
//  do {
  for (ii=0;ii<200;ii++) {
     ADC_DDR = LoADCm | HiADCm; // discharge by short of Low and High side
    1026:	cc 80       	ldd	r12, Y+4	; 0x04
    1028:	eb 81       	ldd	r30, Y+3	; 0x03
    102a:	ce 2a       	or	r12, r30
    102c:	c7 b8       	out	0x07, r12	; 7
     wait_about5ms();		// Low and Highpin to GND for discharge
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>
     ADC_DDR = LoADCm;		// switch only Low-Pin fix to GND
    1036:	fc 81       	ldd	r31, Y+4	; 0x04
    1038:	f7 b9       	out	0x07, r31	; 7
     adc.hp1 = ReadADC(HighPin); // read voltage at High-Pin
    103a:	81 2f       	mov	r24, r17
    103c:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
//  } while (adc.hp1 > ((150/8)-1));
     if (adc.hp1 < (150/8)) break;
    1040:	82 31       	cpi	r24, 0x12	; 18
    1042:	91 05       	cpc	r25, r1
    1044:	10 f0       	brcs	.+4      	; 0x104a <CheckPins+0x86e>
    1046:	ea 94       	dec	r14
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
//  do {
  for (ii=0;ii<200;ii++) {
    1048:	89 f7       	brne	.-30     	; 0x102c <CheckPins+0x850>
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */

  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
    104a:	28 89       	ldd	r18, Y+16	; 0x10
    104c:	24 b9       	out	0x04, r18	; 4
  R_PORT = HiPinRH;
    104e:	25 b9       	out	0x05, r18	; 5
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	61 e0       	ldi	r22, 0x01	; 1
    1054:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <ChargePin10ms>
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
    1058:	81 2f       	mov	r24, r17
    105a:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
    105e:	7c 01       	movw	r14, r24
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	60 e0       	ldi	r22, 0x00	; 0
    1064:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <ChargePin10ms>
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
    1068:	81 2f       	mov	r24, r17
    106a:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
    106e:	98 2e       	mov	r9, r24
    1070:	a9 2e       	mov	r10, r25

  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    1072:	04 b9       	out	0x04, r16	; 4
  R_PORT = HiPinRL;
    1074:	05 b9       	out	0x05, r16	; 5
  adc.hp1 = W5msReadADC(HighPin) - ReadADC(LowPin);
    1076:	81 2f       	mov	r24, r17
    1078:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
    107c:	6c 01       	movw	r12, r24
    107e:	88 2d       	mov	r24, r8
    1080:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
    1084:	c8 1a       	sub	r12, r24
    1086:	d9 0a       	sbc	r13, r25
  ChargePin10ms(TriPinRL,1);	//discharge for N-Kanal-MOSFET gate
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	61 e0       	ldi	r22, 0x01	; 1
    108c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <ChargePin10ms>
  adc.lp_otr = W5msReadADC(HighPin) - ReadADC(LowPin);
    1090:	81 2f       	mov	r24, r17
    1092:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
    1096:	3c 01       	movw	r6, r24
    1098:	88 2d       	mov	r24, r8
    109a:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
    109e:	a3 01       	movw	r20, r6
    10a0:	48 1b       	sub	r20, r24
    10a2:	59 0b       	sbc	r21, r25

  if(adc.lp_otr > adc.hp1) {
    10a4:	c4 16       	cp	r12, r20
    10a6:	d5 06       	cpc	r13, r21
    10a8:	18 f0       	brcs	.+6      	; 0x10b0 <CheckPins+0x8d4>
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
  R_PORT = HiPinRH;
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
    10aa:	e9 2c       	mov	r14, r9
    10ac:	fa 2c       	mov	r15, r10
  R_PORT = HiPinRL;
  adc.hp1 = W5msReadADC(HighPin) - ReadADC(LowPin);
  ChargePin10ms(TriPinRL,1);	//discharge for N-Kanal-MOSFET gate
  adc.lp_otr = W5msReadADC(HighPin) - ReadADC(LowPin);

  if(adc.lp_otr > adc.hp1) {
    10ae:	a6 01       	movw	r20, r12
  lcd_string(utoa(adc.hp3,outval,10));
  lcd_space();
  wait_about1s();
#endif

  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
    10b0:	ca 01       	movw	r24, r20
    10b2:	87 59       	subi	r24, 0x97	; 151
    10b4:	90 40       	sbci	r25, 0x00	; 0
    10b6:	31 e1       	ldi	r19, 0x11	; 17
    10b8:	89 38       	cpi	r24, 0x89	; 137
    10ba:	93 07       	cpc	r25, r19
    10bc:	68 f5       	brcc	.+90     	; 0x1118 <CheckPins+0x93c>
    10be:	c7 01       	movw	r24, r14
    10c0:	e3 e0       	ldi	r30, 0x03	; 3
    10c2:	96 95       	lsr	r25
    10c4:	87 95       	ror	r24
    10c6:	ea 95       	dec	r30
    10c8:	e1 f7       	brne	.-8      	; 0x10c2 <CheckPins+0x8e6>
    10ca:	8e 0d       	add	r24, r14
    10cc:	9f 1d       	adc	r25, r15
    10ce:	84 17       	cp	r24, r20
    10d0:	95 07       	cpc	r25, r21
    10d2:	10 f5       	brcc	.+68     	; 0x1118 <CheckPins+0x93c>
    10d4:	73 e0       	ldi	r23, 0x03	; 3
    10d6:	ee 0c       	add	r14, r14
    10d8:	ff 1c       	adc	r15, r15
    10da:	7a 95       	dec	r23
    10dc:	e1 f7       	brne	.-8      	; 0x10d6 <CheckPins+0x8fa>
    10de:	4e 15       	cp	r20, r14
    10e0:	5f 05       	cpc	r21, r15
    10e2:	d0 f4       	brcc	.+52     	; 0x1118 <CheckPins+0x93c>
     //voltage is above 0,15V and below 4,64V => Ok
     if((PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
    10e4:	80 91 07 01 	lds	r24, 0x0107
    10e8:	88 23       	and	r24, r24
    10ea:	11 f0       	breq	.+4      	; 0x10f0 <CheckPins+0x914>
    10ec:	86 30       	cpi	r24, 0x06	; 6
    10ee:	19 f4       	brne	.+6      	; 0x10f6 <CheckPins+0x91a>
        PartFound = PART_DIODE;	//mark for diode only, if no other component is found
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	80 93 07 01 	sts	0x0107, r24
				//since there is a problem with Transistors with a protection diode
#if DebugOut == 4
        lcd_data('D');
#endif
     }
     diodes[NumOfDiodes].Anode = HighPin;
    10f6:	80 91 05 01 	lds	r24, 0x0105
    10fa:	e8 2f       	mov	r30, r24
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	ee 0f       	add	r30, r30
    1100:	ff 1f       	adc	r31, r31
    1102:	ee 0f       	add	r30, r30
    1104:	ff 1f       	adc	r31, r31
    1106:	e8 58       	subi	r30, 0x88	; 136
    1108:	fe 4f       	sbci	r31, 0xFE	; 254
    110a:	10 83       	st	Z, r17
     diodes[NumOfDiodes].Cathode = LowPin;
    110c:	81 82       	std	Z+1, r8	; 0x01
     diodes[NumOfDiodes].Voltage = adc.hp1;	// voltage in Millivolt 
    110e:	53 83       	std	Z+3, r21	; 0x03
    1110:	42 83       	std	Z+2, r20	; 0x02
     NumOfDiodes++;
    1112:	8f 5f       	subi	r24, 0xFF	; 255
    1114:	80 93 05 01 	sts	0x0105, r24
#if DebugOut == 4
  lcd_data(NumOfDiodes+'0');
#endif

widmes:
  if (NumOfDiodes > 0) goto clean_ports;
    1118:	80 91 05 01 	lds	r24, 0x0105
    111c:	88 23       	and	r24, r24
    111e:	09 f0       	breq	.+2      	; 0x1122 <CheckPins+0x946>
    1120:	16 c2       	rjmp	.+1068   	; 0x154e <CheckPins+0xd72>
  // resistor measurement
  wdt_reset();
    1122:	a8 95       	wdr
// U_SCALE can be set to 4 for better resolution of ReadADC result
#if U_SCALE != 1
  ADCconfig.U_AVCC *= U_SCALE;	// scale to higher resolution, mV scale is not required
    1124:	80 91 40 01 	lds	r24, 0x0140
    1128:	90 91 41 01 	lds	r25, 0x0141
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	90 93 41 01 	sts	0x0141, r25
    1138:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.U_Bandgap *= U_SCALE;
    113c:	80 91 3e 01 	lds	r24, 0x013E
    1140:	90 91 3f 01 	lds	r25, 0x013F
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	90 93 3f 01 	sts	0x013F, r25
    1150:	80 93 3e 01 	sts	0x013E, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = R_ANZ_MESS;	// switch to special number of repetitions
    1154:	8e eb       	ldi	r24, 0xBE	; 190
    1156:	80 93 3c 01 	sts	0x013C, r24
#endif
  #define MAX_REPEAT (700 / (5 + R_ANZ_MESS/8))
  ADC_PORT = TXD_VAL;
    115a:	88 e0       	ldi	r24, 0x08	; 8
    115c:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
    115e:	4c 81       	ldd	r20, Y+4	; 0x04
    1160:	47 b9       	out	0x07, r20	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    1162:	04 b9       	out	0x04, r16	; 4
  R_PORT = HiPinRL;	
    1164:	05 b9       	out	0x05, r16	; 5
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
    1166:	ee 24       	eor	r14, r14
    1168:	ff 24       	eor	r15, r15
  for (ii=1;ii<MAX_REPEAT;ii++) {
    116a:	21 e0       	ldi	r18, 0x01	; 1
    116c:	01 c0       	rjmp	.+2      	; 0x1170 <CheckPins+0x994>
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    116e:	7c 01       	movw	r14, r24
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
    1170:	88 2d       	mov	r24, r8
    1172:	2b 8b       	std	Y+19, r18	; 0x13
    1174:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
    1178:	98 2e       	mov	r9, r24
    117a:	09 2f       	mov	r16, r25
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    117c:	81 2f       	mov	r24, r17
    117e:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
     udiff = adc.hp1 - adc.hp2;
    1182:	ac 01       	movw	r20, r24
    1184:	4e 19       	sub	r20, r14
    1186:	5f 09       	sbc	r21, r15
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    1188:	2b 89       	ldd	r18, Y+19	; 0x13
    118a:	57 ff       	sbrs	r21, 7
    118c:	03 c0       	rjmp	.+6      	; 0x1194 <CheckPins+0x9b8>
    118e:	50 95       	com	r21
    1190:	41 95       	neg	r20
    1192:	5f 4f       	sbci	r21, 0xFF	; 255
    1194:	43 30       	cpi	r20, 0x03	; 3
    1196:	51 05       	cpc	r21, r1
    1198:	84 f4       	brge	.+32     	; 0x11ba <CheckPins+0x9de>
    119a:	ac 01       	movw	r20, r24
  adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
#endif
  if (adc.tp1 > adc.hp1) {
     adc.tp1 = adc.hp1;
  }
  R_PORT = 0;
    119c:	15 b8       	out	0x05, r1	; 5
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (GND)
    119e:	88 89       	ldd	r24, Y+16	; 0x10
    11a0:	84 b9       	out	0x04, r24	; 4
  adc.hp2 = W5msReadADC(HighPin);	// read voltage, should be down
    11a2:	81 2f       	mov	r24, r17
    11a4:	4b 8b       	std	Y+19, r20	; 0x13
    11a6:	5e 8b       	std	Y+22, r21	; 0x16
    11a8:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
  if (adc.hp2 > (20*U_SCALE)) {
    11ac:	4b 89       	ldd	r20, Y+19	; 0x13
    11ae:	5e 89       	ldd	r21, Y+22	; 0x16
    11b0:	81 35       	cpi	r24, 0x51	; 81
    11b2:	91 05       	cpc	r25, r1
    11b4:	08 f0       	brcs	.+2      	; 0x11b8 <CheckPins+0x9dc>
    11b6:	b0 c1       	rjmp	.+864    	; 0x1518 <CheckPins+0xd3c>
    11b8:	05 c0       	rjmp	.+10     	; 0x11c4 <CheckPins+0x9e8>
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     udiff = adc.hp1 - adc.hp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.hp2 = adc.hp1;
     wdt_reset();
    11ba:	a8 95       	wdr
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    11bc:	2f 5f       	subi	r18, 0xFF	; 255
    11be:	29 31       	cpi	r18, 0x19	; 25
    11c0:	b1 f6       	brne	.-84     	; 0x116e <CheckPins+0x992>
    11c2:	aa c1       	rjmp	.+852    	; 0x1518 <CheckPins+0xd3c>
     lcd_string(utoa(adc.hp2, outval, 10));
     lcd_space();
#endif
     goto testend;
  }
  R_PORT = HiPinRH;		//switch R_H for High-Pin to VCC
    11c4:	98 89       	ldd	r25, Y+16	; 0x10
    11c6:	95 b9       	out	0x05, r25	; 5
  adc.hp2 = W5msReadADC(HighPin);	// voltage at resistor Rx with R_H
    11c8:	81 2f       	mov	r24, r17
    11ca:	4b 8b       	std	Y+19, r20	; 0x13
    11cc:	5e 8b       	std	Y+22, r21	; 0x16
    11ce:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
    11d2:	7c 01       	movw	r14, r24

  ADC_DDR = HiADCm;		//switch High-Pin to output
    11d4:	ab 81       	ldd	r26, Y+3	; 0x03
    11d6:	a7 b9       	out	0x07, r26	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
    11d8:	a8 b9       	out	0x08, r26	; 8
  R_PORT = 0;
    11da:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
    11dc:	bd 81       	ldd	r27, Y+5	; 0x05
    11de:	b4 b9       	out	0x04, r27	; 4
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
    11e0:	aa 24       	eor	r10, r10
    11e2:	bb 24       	eor	r11, r11
  for (ii=1;ii<MAX_REPEAT;ii++) {
    11e4:	21 e0       	ldi	r18, 0x01	; 1
    11e6:	4b 89       	ldd	r20, Y+19	; 0x13
    11e8:	5e 89       	ldd	r21, Y+22	; 0x16
    11ea:	3a 01       	movw	r6, r20
    11ec:	01 c0       	rjmp	.+2      	; 0x11f0 <CheckPins+0xa14>
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    11ee:	56 01       	movw	r10, r12
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
    11f0:	81 2f       	mov	r24, r17
    11f2:	2b 8b       	std	Y+19, r18	; 0x13
    11f4:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
    11f8:	28 2e       	mov	r2, r24
    11fa:	49 2e       	mov	r4, r25
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    11fc:	88 2d       	mov	r24, r8
    11fe:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
    1202:	6c 01       	movw	r12, r24
     udiff = adc.lp1 - adc.lp2;
    1204:	8a 19       	sub	r24, r10
    1206:	9b 09       	sbc	r25, r11
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    1208:	2b 89       	ldd	r18, Y+19	; 0x13
    120a:	97 ff       	sbrs	r25, 7
    120c:	03 c0       	rjmp	.+6      	; 0x1214 <CheckPins+0xa38>
    120e:	90 95       	com	r25
    1210:	81 95       	neg	r24
    1212:	9f 4f       	sbci	r25, 0xFF	; 255
    1214:	83 30       	cpi	r24, 0x03	; 3
    1216:	91 05       	cpc	r25, r1
    1218:	8c f4       	brge	.+34     	; 0x123c <CheckPins+0xa60>
    121a:	a3 01       	movw	r20, r6
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = pgm_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
    121c:	8d 81       	ldd	r24, Y+5	; 0x05
    121e:	88 0f       	add	r24, r24
  adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
#endif
  if (adc.tp2 < adc.lp1) {
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
    1220:	84 b9       	out	0x04, r24	; 4
  adc.lp2 = W5msReadADC(LowPin);
    1222:	88 2d       	mov	r24, r8
    1224:	6b 8a       	std	Y+19, r6	; 0x13
    1226:	5e 8b       	std	Y+22, r21	; 0x16
    1228:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
    122c:	3c 01       	movw	r6, r24
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    122e:	4b 89       	ldd	r20, Y+19	; 0x13
    1230:	5e 89       	ldd	r21, Y+22	; 0x16
    1232:	e4 e4       	ldi	r30, 0x44	; 68
    1234:	40 3c       	cpi	r20, 0xC0	; 192
    1236:	5e 07       	cpc	r21, r30
    1238:	30 f0       	brcs	.+12     	; 0x1246 <CheckPins+0xa6a>
    123a:	0c c0       	rjmp	.+24     	; 0x1254 <CheckPins+0xa78>
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     udiff = adc.lp1 - adc.lp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.lp2 = adc.lp1;
     wdt_reset();
    123c:	a8 95       	wdr
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
  R_PORT = 0;
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    123e:	2f 5f       	subi	r18, 0xFF	; 255
    1240:	29 31       	cpi	r18, 0x19	; 25
    1242:	a9 f6       	brne	.-86     	; 0x11ee <CheckPins+0xa12>
    1244:	69 c1       	rjmp	.+722    	; 0x1518 <CheckPins+0xd3c>
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
  adc.lp2 = W5msReadADC(LowPin);
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    1246:	f5 e8       	ldi	r31, 0x85	; 133
    1248:	ef 16       	cp	r14, r31
    124a:	f1 e0       	ldi	r31, 0x01	; 1
    124c:	ff 06       	cpc	r15, r31
    124e:	08 f0       	brcs	.+2      	; 0x1252 <CheckPins+0xa76>
    1250:	63 c1       	rjmp	.+710    	; 0x1518 <CheckPins+0xd3c>
    1252:	06 c0       	rjmp	.+12     	; 0x1260 <CheckPins+0xa84>
     lcd_data('F');
#endif
     goto testend; 
  }
//    if((adc.hp2 + (adc.hp2 / 61)) < adc.hp1)
  if (adc.hp2 < (4972*U_SCALE)) { 
    1254:	20 eb       	ldi	r18, 0xB0	; 176
    1256:	e2 16       	cp	r14, r18
    1258:	2d e4       	ldi	r18, 0x4D	; 77
    125a:	f2 06       	cpc	r15, r18
    125c:	08 f0       	brcs	.+2      	; 0x1260 <CheckPins+0xa84>
    125e:	5c c1       	rjmp	.+696    	; 0x1518 <CheckPins+0xd3c>
     // voltage breaks down with low test current and it is not nearly shorted  => resistor
//     if (adc.lp1 < 120) { // take measurement with R_H 
     if (adc.lp1 < (169*U_SCALE)) { // take measurement with R_H 
    1260:	34 ea       	ldi	r19, 0xA4	; 164
    1262:	c3 16       	cp	r12, r19
    1264:	32 e0       	ldi	r19, 0x02	; 2
    1266:	d3 06       	cpc	r13, r19
    1268:	08 f0       	brcs	.+2      	; 0x126c <CheckPins+0xa90>
    126a:	72 c0       	rjmp	.+228    	; 0x1350 <CheckPins+0xb74>
        ii = 'H';
        if (adc.lp2 < (38*U_SCALE)) {
    126c:	48 e9       	ldi	r20, 0x98	; 152
    126e:	64 16       	cp	r6, r20
    1270:	71 04       	cpc	r7, r1
    1272:	08 f4       	brcc	.+2      	; 0x1276 <CheckPins+0xa9a>
    1274:	51 c1       	rjmp	.+674    	; 0x1518 <CheckPins+0xd3c>
           // measurement > 60MOhm to big resistance
           goto testend;
        }
        // two measurements with R_H resistors (470k) are made:
        // lirx1 (measurement at HighPin)
        lirx1 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)adc.hp2 / (ADCconfig.U_AVCC - adc.hp2);
    1276:	40 90 40 01 	lds	r4, 0x0140
    127a:	50 90 41 01 	lds	r5, 0x0141
    127e:	b7 01       	movw	r22, r14
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	28 e9       	ldi	r18, 0x98	; 152
    1286:	37 eb       	ldi	r19, 0xB7	; 183
    1288:	40 e0       	ldi	r20, 0x00	; 0
    128a:	50 e0       	ldi	r21, 0x00	; 0
    128c:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
    1290:	92 01       	movw	r18, r4
    1292:	2e 19       	sub	r18, r14
    1294:	3f 09       	sbc	r19, r15
    1296:	40 e0       	ldi	r20, 0x00	; 0
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
    129e:	59 01       	movw	r10, r18
    12a0:	6a 01       	movw	r12, r20
        // lirx2 (measurement at LowPin)
        lirx2 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)(ADCconfig.U_AVCC - adc.lp2) / adc.lp2;
    12a2:	46 18       	sub	r4, r6
    12a4:	57 08       	sbc	r5, r7
    12a6:	b2 01       	movw	r22, r4
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	28 e9       	ldi	r18, 0x98	; 152
    12ae:	37 eb       	ldi	r19, 0xB7	; 183
    12b0:	40 e0       	ldi	r20, 0x00	; 0
    12b2:	50 e0       	ldi	r21, 0x00	; 0
    12b4:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
    12b8:	93 01       	movw	r18, r6
    12ba:	40 e0       	ldi	r20, 0x00	; 0
    12bc:	50 e0       	ldi	r21, 0x00	; 0
    12be:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
#define FAKT_LOW 2		//resolution is about twice as good
#else
#define FAKT_LOW 4		//resolution is about four times better
#endif
#ifdef AUTOSCALE_ADC
        if (adc.hp2 < U_INT_LIMIT) {
    12c2:	88 e7       	ldi	r24, 0x78	; 120
    12c4:	e8 16       	cp	r14, r24
    12c6:	8f e0       	ldi	r24, 0x0F	; 15
    12c8:	f8 06       	cpc	r15, r24
    12ca:	70 f4       	brcc	.+28     	; 0x12e8 <CheckPins+0xb0c>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    12cc:	c6 01       	movw	r24, r12
    12ce:	b5 01       	movw	r22, r10
    12d0:	b2 e0       	ldi	r27, 0x02	; 2
    12d2:	66 0f       	add	r22, r22
    12d4:	77 1f       	adc	r23, r23
    12d6:	88 1f       	adc	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	ba 95       	dec	r27
    12dc:	d1 f7       	brne	.-12     	; 0x12d2 <CheckPins+0xaf6>
    12de:	62 0f       	add	r22, r18
    12e0:	73 1f       	adc	r23, r19
    12e2:	84 1f       	adc	r24, r20
    12e4:	95 1f       	adc	r25, r21
    12e6:	12 c0       	rjmp	.+36     	; 0x130c <CheckPins+0xb30>
        } else if (adc.lp2 < U_INT_LIMIT){
    12e8:	98 e7       	ldi	r25, 0x78	; 120
    12ea:	69 16       	cp	r6, r25
    12ec:	9f e0       	ldi	r25, 0x0F	; 15
    12ee:	79 06       	cpc	r7, r25
    12f0:	a0 f4       	brcc	.+40     	; 0x131a <CheckPins+0xb3e>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    12f2:	ca 01       	movw	r24, r20
    12f4:	b9 01       	movw	r22, r18
    12f6:	a2 e0       	ldi	r26, 0x02	; 2
    12f8:	66 0f       	add	r22, r22
    12fa:	77 1f       	adc	r23, r23
    12fc:	88 1f       	adc	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	aa 95       	dec	r26
    1302:	d1 f7       	brne	.-12     	; 0x12f8 <CheckPins+0xb1c>
    1304:	6a 0d       	add	r22, r10
    1306:	7b 1d       	adc	r23, r11
    1308:	8c 1d       	adc	r24, r12
    130a:	9d 1d       	adc	r25, r13
    130c:	25 e0       	ldi	r18, 0x05	; 5
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	40 e0       	ldi	r20, 0x00	; 0
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
    1318:	08 c0       	rjmp	.+16     	; 0x132a <CheckPins+0xb4e>
        } else 
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_H measurements
    131a:	2a 0d       	add	r18, r10
    131c:	3b 1d       	adc	r19, r11
    131e:	4c 1d       	adc	r20, r12
    1320:	5d 1d       	adc	r21, r13
    1322:	56 95       	lsr	r21
    1324:	47 95       	ror	r20
    1326:	37 95       	ror	r19
    1328:	27 95       	ror	r18
        }
        lrx1 *= 100;
    132a:	ca 01       	movw	r24, r20
    132c:	b9 01       	movw	r22, r18
    132e:	24 e6       	ldi	r18, 0x64	; 100
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	40 e0       	ldi	r20, 0x00	; 0
    1334:	50 e0       	ldi	r21, 0x00	; 0
    1336:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
    133a:	6b 01       	movw	r12, r22
    133c:	7c 01       	movw	r14, r24
        lrx1 += RH_OFFSET;			// add constant for correction of systematic error
    133e:	8c ea       	ldi	r24, 0xAC	; 172
    1340:	9d e0       	ldi	r25, 0x0D	; 13
    1342:	a0 e0       	ldi	r26, 0x00	; 0
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	c8 0e       	add	r12, r24
    1348:	d9 1e       	adc	r13, r25
    134a:	ea 1e       	adc	r14, r26
    134c:	fb 1e       	adc	r15, r27
    134e:	79 c0       	rjmp	.+242    	; 0x1442 <CheckPins+0xc66>
    1350:	89 2d       	mov	r24, r9
    1352:	90 2f       	mov	r25, r16
    1354:	48 17       	cp	r20, r24
    1356:	59 07       	cpc	r21, r25
    1358:	08 f4       	brcc	.+2      	; 0x135c <CheckPins+0xb80>
    135a:	ca 01       	movw	r24, r20
    135c:	e2 2c       	mov	r14, r2
    135e:	f4 2c       	mov	r15, r4
    1360:	ec 14       	cp	r14, r12
    1362:	fd 04       	cpc	r15, r13
    1364:	08 f4       	brcc	.+2      	; 0x1368 <CheckPins+0xb8c>
    1366:	76 01       	movw	r14, r12
    1368:	5c 01       	movw	r10, r24
    136a:	84 17       	cp	r24, r20
    136c:	95 07       	cpc	r25, r21
    136e:	08 f4       	brcc	.+2      	; 0x1372 <CheckPins+0xb96>
    1370:	5a 01       	movw	r10, r20
        // two measurements with R_L resistors (680) are made:
        // lirx1 (measurement at HighPin)
        if (adc.tp1 > adc.hp1) {
           adc.hp1 = adc.tp1;		//diff negativ is illegal
        }
        lirx1 =(unsigned long)RR680PL * (unsigned long)(adc.hp1 - adc.tp1) / (ADCconfig.U_AVCC - adc.hp1);
    1372:	b5 01       	movw	r22, r10
    1374:	68 1b       	sub	r22, r24
    1376:	79 0b       	sbc	r23, r25
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	20 91 08 01 	lds	r18, 0x0108
    1380:	30 91 09 01 	lds	r19, 0x0109
    1384:	40 e0       	ldi	r20, 0x00	; 0
    1386:	50 e0       	ldi	r21, 0x00	; 0
    1388:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
    138c:	20 91 40 01 	lds	r18, 0x0140
    1390:	30 91 41 01 	lds	r19, 0x0141
    1394:	2a 19       	sub	r18, r10
    1396:	3b 09       	sbc	r19, r11
    1398:	40 e0       	ldi	r20, 0x00	; 0
    139a:	50 e0       	ldi	r21, 0x00	; 0
    139c:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
    13a0:	29 01       	movw	r4, r18
    13a2:	3a 01       	movw	r6, r20
    13a4:	17 01       	movw	r2, r14
    13a6:	ce 14       	cp	r12, r14
    13a8:	df 04       	cpc	r13, r15
    13aa:	08 f4       	brcc	.+2      	; 0x13ae <CheckPins+0xbd2>
    13ac:	16 01       	movw	r2, r12
        if (adc.tp2 < adc.lp1) {
           adc.lp1 = adc.tp2;		//diff negativ is illegal
        }
        // lirx2 (Measurement at LowPin)
        lirx2 =(unsigned long)RR680MI * (unsigned long)(adc.tp2 -adc.lp1) / adc.lp1;
    13ae:	e2 18       	sub	r14, r2
    13b0:	f3 08       	sbc	r15, r3
    13b2:	b7 01       	movw	r22, r14
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	20 91 02 01 	lds	r18, 0x0102
    13bc:	30 91 03 01 	lds	r19, 0x0103
    13c0:	40 e0       	ldi	r20, 0x00	; 0
    13c2:	50 e0       	ldi	r21, 0x00	; 0
    13c4:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
    13c8:	91 01       	movw	r18, r2
    13ca:	40 e0       	ldi	r20, 0x00	; 0
    13cc:	50 e0       	ldi	r21, 0x00	; 0
    13ce:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
//     lrx1 =(unsigned long)R_L_VAL * (unsigned long)adc.hp1 / (adc.hp3 - adc.hp1);

#ifdef AUTOSCALE_ADC
        if (adc.hp1 < U_INT_LIMIT) {
    13d2:	98 e7       	ldi	r25, 0x78	; 120
    13d4:	a9 16       	cp	r10, r25
    13d6:	9f e0       	ldi	r25, 0x0F	; 15
    13d8:	b9 06       	cpc	r11, r25
    13da:	70 f4       	brcc	.+28     	; 0x13f8 <CheckPins+0xc1c>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    13dc:	c3 01       	movw	r24, r6
    13de:	b2 01       	movw	r22, r4
    13e0:	e2 e0       	ldi	r30, 0x02	; 2
    13e2:	66 0f       	add	r22, r22
    13e4:	77 1f       	adc	r23, r23
    13e6:	88 1f       	adc	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	ea 95       	dec	r30
    13ec:	d1 f7       	brne	.-12     	; 0x13e2 <CheckPins+0xc06>
    13ee:	62 0f       	add	r22, r18
    13f0:	73 1f       	adc	r23, r19
    13f2:	84 1f       	adc	r24, r20
    13f4:	95 1f       	adc	r25, r21
    13f6:	12 c0       	rjmp	.+36     	; 0x141c <CheckPins+0xc40>
        } else if (adc.lp1 < U_INT_LIMIT) {
    13f8:	a8 e7       	ldi	r26, 0x78	; 120
    13fa:	2a 16       	cp	r2, r26
    13fc:	af e0       	ldi	r26, 0x0F	; 15
    13fe:	3a 06       	cpc	r3, r26
    1400:	b0 f4       	brcc	.+44     	; 0x142e <CheckPins+0xc52>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    1402:	ca 01       	movw	r24, r20
    1404:	b9 01       	movw	r22, r18
    1406:	22 e0       	ldi	r18, 0x02	; 2
    1408:	66 0f       	add	r22, r22
    140a:	77 1f       	adc	r23, r23
    140c:	88 1f       	adc	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	2a 95       	dec	r18
    1412:	d1 f7       	brne	.-12     	; 0x1408 <CheckPins+0xc2c>
    1414:	64 0d       	add	r22, r4
    1416:	75 1d       	adc	r23, r5
    1418:	86 1d       	adc	r24, r6
    141a:	97 1d       	adc	r25, r7
    141c:	25 e0       	ldi	r18, 0x05	; 5
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e0       	ldi	r20, 0x00	; 0
    1422:	50 e0       	ldi	r21, 0x00	; 0
    1424:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
    1428:	69 01       	movw	r12, r18
    142a:	7a 01       	movw	r14, r20
    142c:	0a c0       	rjmp	.+20     	; 0x1442 <CheckPins+0xc66>
        } else
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_L measurements
    142e:	69 01       	movw	r12, r18
    1430:	7a 01       	movw	r14, r20
    1432:	c4 0c       	add	r12, r4
    1434:	d5 1c       	adc	r13, r5
    1436:	e6 1c       	adc	r14, r6
    1438:	f7 1c       	adc	r15, r7
    143a:	f6 94       	lsr	r15
    143c:	e7 94       	ror	r14
    143e:	d7 94       	ror	r13
    1440:	c7 94       	ror	r12
  lcd_line4();
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
    1442:	80 91 07 01 	lds	r24, 0x0107
    1446:	82 30       	cpi	r24, 0x02	; 2
    1448:	18 f0       	brcs	.+6      	; 0x1450 <CheckPins+0xc74>
    144a:	86 30       	cpi	r24, 0x06	; 6
    144c:	09 f0       	breq	.+2      	; 0x1450 <CheckPins+0xc74>
    144e:	64 c0       	rjmp	.+200    	; 0x1518 <CheckPins+0xd3c>
        for (ii=0; ii<ResistorsFound; ii++) {
    1450:	30 91 5e 01 	lds	r19, 0x015E
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	41 c0       	rjmp	.+130    	; 0x14da <CheckPins+0xcfe>
           // search measurements with inverse polarity 
           thisR = &resis[ii];
    1458:	82 2f       	mov	r24, r18
    145a:	90 e0       	ldi	r25, 0x00	; 0
           if (thisR->rt != TristatePin) {
    145c:	fc 01       	movw	r30, r24
    145e:	ee 0f       	add	r30, r30
    1460:	ff 1f       	adc	r31, r31
    1462:	e8 0f       	add	r30, r24
    1464:	f9 1f       	adc	r31, r25
    1466:	ee 0f       	add	r30, r30
    1468:	ff 1f       	adc	r31, r31
    146a:	ee 0f       	add	r30, r30
    146c:	ff 1f       	adc	r31, r31
    146e:	e8 5e       	subi	r30, 0xE8	; 232
    1470:	fe 4f       	sbci	r31, 0xFE	; 254
    1472:	83 85       	ldd	r24, Z+11	; 0x0b
    1474:	b9 81       	ldd	r27, Y+1	; 0x01
    1476:	8b 17       	cp	r24, r27
    1478:	11 f0       	breq	.+4      	; 0x147e <CheckPins+0xca2>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    147a:	2f 5f       	subi	r18, 0xFF	; 255
    147c:	2e c0       	rjmp	.+92     	; 0x14da <CheckPins+0xcfe>
           if (thisR->rt != TristatePin) {
              continue;
           }
           // must be measurement with inverse polarity 
           // resolution is 0.1 Ohm, 1 Ohm = 10 !
           lirx1 = (labs((long)lrx1 - (long)thisR->rx) * 10) / (lrx1 + thisR->rx + 100);
    147e:	80 80       	ld	r8, Z
    1480:	91 80       	ldd	r9, Z+1	; 0x01
    1482:	a2 80       	ldd	r10, Z+2	; 0x02
    1484:	b3 80       	ldd	r11, Z+3	; 0x03
    1486:	c7 01       	movw	r24, r14
    1488:	b6 01       	movw	r22, r12
    148a:	68 19       	sub	r22, r8
    148c:	79 09       	sbc	r23, r9
    148e:	8a 09       	sbc	r24, r10
    1490:	9b 09       	sbc	r25, r11
    1492:	97 ff       	sbrs	r25, 7
    1494:	07 c0       	rjmp	.+14     	; 0x14a4 <CheckPins+0xcc8>
    1496:	90 95       	com	r25
    1498:	80 95       	com	r24
    149a:	70 95       	com	r23
    149c:	61 95       	neg	r22
    149e:	7f 4f       	sbci	r23, 0xFF	; 255
    14a0:	8f 4f       	sbci	r24, 0xFF	; 255
    14a2:	9f 4f       	sbci	r25, 0xFF	; 255
    14a4:	2a e0       	ldi	r18, 0x0A	; 10
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	40 e0       	ldi	r20, 0x00	; 0
    14aa:	50 e0       	ldi	r21, 0x00	; 0
    14ac:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
    14b0:	a5 01       	movw	r20, r10
    14b2:	94 01       	movw	r18, r8
    14b4:	2c 59       	subi	r18, 0x9C	; 156
    14b6:	3f 4f       	sbci	r19, 0xFF	; 255
    14b8:	4f 4f       	sbci	r20, 0xFF	; 255
    14ba:	5f 4f       	sbci	r21, 0xFF	; 255
    14bc:	2c 0d       	add	r18, r12
    14be:	3d 1d       	adc	r19, r13
    14c0:	4e 1d       	adc	r20, r14
    14c2:	5f 1d       	adc	r21, r15
    14c4:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
           if (lirx1  > 0) {
    14c8:	21 15       	cp	r18, r1
    14ca:	31 05       	cpc	r19, r1
    14cc:	41 05       	cpc	r20, r1
    14ce:	51 05       	cpc	r21, r1
    14d0:	19 f5       	brne	.+70     	; 0x1518 <CheckPins+0xd3c>
              DisplayValue(lirx1,-1,LCD_CHAR_OMEGA,3)
              lcd_space();
#endif
              goto testend; // <10% mismatch
           }
           PartFound = PART_RESISTOR;
    14d2:	86 e0       	ldi	r24, 0x06	; 6
    14d4:	80 93 07 01 	sts	0x0107, r24
           goto testend;
    14d8:	1f c0       	rjmp	.+62     	; 0x1518 <CheckPins+0xd3c>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    14da:	23 17       	cp	r18, r19
    14dc:	08 f4       	brcc	.+2      	; 0x14e0 <CheckPins+0xd04>
    14de:	bc cf       	rjmp	.-136    	; 0x1458 <CheckPins+0xc7c>
           }
           PartFound = PART_RESISTOR;
           goto testend;
        } // end for
        // no same resistor with the same Tristate-Pin found, new one
        thisR = &resis[ResistorsFound];		// pointer to a free resistor structure
    14e0:	83 2f       	mov	r24, r19
    14e2:	90 e0       	ldi	r25, 0x00	; 0
        thisR->rx = lrx1;		// save resistor value
    14e4:	fc 01       	movw	r30, r24
    14e6:	ee 0f       	add	r30, r30
    14e8:	ff 1f       	adc	r31, r31
    14ea:	e8 0f       	add	r30, r24
    14ec:	f9 1f       	adc	r31, r25
    14ee:	ee 0f       	add	r30, r30
    14f0:	ff 1f       	adc	r31, r31
    14f2:	ee 0f       	add	r30, r30
    14f4:	ff 1f       	adc	r31, r31
    14f6:	e8 5e       	subi	r30, 0xE8	; 232
    14f8:	fe 4f       	sbci	r31, 0xFE	; 254
    14fa:	c0 82       	st	Z, r12
    14fc:	d1 82       	std	Z+1, r13	; 0x01
    14fe:	e2 82       	std	Z+2, r14	; 0x02
    1500:	f3 82       	std	Z+3, r15	; 0x03
#if FLASHEND > 0x1fff
        thisR->lx = 0;			// no inductance
    1502:	14 82       	std	Z+4, r1	; 0x04
    1504:	15 82       	std	Z+5, r1	; 0x05
    1506:	16 82       	std	Z+6, r1	; 0x06
    1508:	17 82       	std	Z+7, r1	; 0x07
#endif
        thisR->ra = LowPin;		// save Pin numbers
    150a:	81 86       	std	Z+9, r8	; 0x09
        thisR->rb = HighPin;
    150c:	12 87       	std	Z+10, r17	; 0x0a
        thisR->rt = TristatePin;	// Tristate is saved for easier search of inverse measurement
    150e:	29 81       	ldd	r18, Y+1	; 0x01
    1510:	23 87       	std	Z+11, r18	; 0x0b
        ResistorsFound++;			// 1 more resistor found
    1512:	3f 5f       	subi	r19, 0xFF	; 255
    1514:	30 93 5e 01 	sts	0x015E, r19
#endif
     }
  }
  testend:
#if U_SCALE != 1
  ADCconfig.U_AVCC /= U_SCALE;		// scale back to mV resolution
    1518:	80 91 40 01 	lds	r24, 0x0140
    151c:	90 91 41 01 	lds	r25, 0x0141
    1520:	96 95       	lsr	r25
    1522:	87 95       	ror	r24
    1524:	96 95       	lsr	r25
    1526:	87 95       	ror	r24
    1528:	90 93 41 01 	sts	0x0141, r25
    152c:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.U_Bandgap /= U_SCALE;
    1530:	80 91 3e 01 	lds	r24, 0x013E
    1534:	90 91 3f 01 	lds	r25, 0x013F
    1538:	96 95       	lsr	r25
    153a:	87 95       	ror	r24
    153c:	96 95       	lsr	r25
    153e:	87 95       	ror	r24
    1540:	90 93 3f 01 	sts	0x013F, r25
    1544:	80 93 3e 01 	sts	0x013E, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = ANZ_MESS;		// switch back to standard number of repetition
    1548:	89 e1       	ldi	r24, 0x19	; 25
    154a:	80 93 3c 01 	sts	0x013C, r24
#if DebugOut < 10
  wait_about2s();
#endif
#endif
 clean_ports:
  ADC_DDR = TXD_MSK;		// all ADC-Pins Input
    154e:	88 e0       	ldi	r24, 0x08	; 8
    1550:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// all ADC outputs to Ground, keine Pull up
    1552:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// all resistor-outputs to Input
    1554:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// all resistor-outputs to Ground, no Pull up
    1556:	15 b8       	out	0x05, r1	; 5
} // end CheckPins()
    1558:	66 96       	adiw	r28, 0x16	; 22
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	ff 90       	pop	r15
    156e:	ef 90       	pop	r14
    1570:	df 90       	pop	r13
    1572:	cf 90       	pop	r12
    1574:	bf 90       	pop	r11
    1576:	af 90       	pop	r10
    1578:	9f 90       	pop	r9
    157a:	8f 90       	pop	r8
    157c:	7f 90       	pop	r7
    157e:	6f 90       	pop	r6
    1580:	5f 90       	pop	r5
    1582:	4f 90       	pop	r4
    1584:	3f 90       	pop	r3
    1586:	2f 90       	pop	r2
    1588:	08 95       	ret

0000158a <PinLayout>:
TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
}
#endif

// show the Pin Layout of the device 
void PinLayout(char pin1, char pin2, char pin3) {
    158a:	ff 92       	push	r15
    158c:	0f 93       	push	r16
    158e:	1f 93       	push	r17
    1590:	18 2f       	mov	r17, r24
    1592:	06 2f       	mov	r16, r22
    1594:	f4 2e       	mov	r15, r20
// pin1-3 is EBC or SGD or CGA
#ifndef EBC_STYLE
   // Layout with 123= style
   lcd_fix_string(N123_str);		//" 123="
    1596:	80 e1       	ldi	r24, 0x10	; 16
    1598:	91 e0       	ldi	r25, 0x01	; 1
    159a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
   for (ii=0;ii<3;ii++) {
    159e:	10 92 4b 01 	sts	0x014B, r1
    15a2:	1e c0       	rjmp	.+60     	; 0x15e0 <PinLayout+0x56>
       if (ii == trans.e)  lcd_data(pin1);	// Output Character in right order
    15a4:	90 91 5d 01 	lds	r25, 0x015D
    15a8:	89 17       	cp	r24, r25
    15aa:	19 f4       	brne	.+6      	; 0x15b2 <PinLayout+0x28>
    15ac:	81 2f       	mov	r24, r17
    15ae:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       if (ii == trans.b)  lcd_data(pin2);
    15b2:	90 91 4b 01 	lds	r25, 0x014B
    15b6:	80 91 5b 01 	lds	r24, 0x015B
    15ba:	98 17       	cp	r25, r24
    15bc:	19 f4       	brne	.+6      	; 0x15c4 <PinLayout+0x3a>
    15be:	80 2f       	mov	r24, r16
    15c0:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       if (ii == trans.c)  lcd_data(pin3);
    15c4:	90 91 4b 01 	lds	r25, 0x014B
    15c8:	80 91 5c 01 	lds	r24, 0x015C
    15cc:	98 17       	cp	r25, r24
    15ce:	19 f4       	brne	.+6      	; 0x15d6 <PinLayout+0x4c>
    15d0:	8f 2d       	mov	r24, r15
    15d2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
void PinLayout(char pin1, char pin2, char pin3) {
// pin1-3 is EBC or SGD or CGA
#ifndef EBC_STYLE
   // Layout with 123= style
   lcd_fix_string(N123_str);		//" 123="
   for (ii=0;ii<3;ii++) {
    15d6:	80 91 4b 01 	lds	r24, 0x014B
    15da:	8f 5f       	subi	r24, 0xFF	; 255
    15dc:	80 93 4b 01 	sts	0x014B, r24
    15e0:	80 91 4b 01 	lds	r24, 0x014B
    15e4:	83 30       	cpi	r24, 0x03	; 3
    15e6:	f0 f2       	brcs	.-68     	; 0x15a4 <PinLayout+0x1a>
   lcd_testpin(trans.e);
   lcd_testpin(trans.b);
   lcd_testpin(trans.c);
 #endif
#endif
}
    15e8:	1f 91       	pop	r17
    15ea:	0f 91       	pop	r16
    15ec:	ff 90       	pop	r15
    15ee:	08 95       	ret

000015f0 <ShortedProbes>:
 *  - 0 if not shorted
 *  - 1 if shorted
 */

uint8_t ShortedProbes(uint8_t Probe1, uint8_t Probe2)
{
    15f0:	0f 93       	push	r16
    15f2:	1f 93       	push	r17
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	0f 92       	push	r0
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
   *  Set up a voltage divider between the two probes:
   *  - Probe1: Rl pull-up
   *  - Probe2: Rl pull-down
   */

  R_PORT = pgm_read_byte(&PinRLtab[Probe1]);
    15fe:	e8 2f       	mov	r30, r24
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	e6 5f       	subi	r30, 0xF6	; 246
    1604:	fe 4f       	sbci	r31, 0xFE	; 254
    1606:	94 91       	lpm	r25, Z+
    1608:	95 b9       	out	0x05, r25	; 5
  R_DDR = pgm_read_byte(&PinRLtab[Probe1]) | pgm_read_byte(&PinRLtab[Probe2]);
    160a:	e6 2f       	mov	r30, r22
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	e6 5f       	subi	r30, 0xF6	; 246
    1610:	fe 4f       	sbci	r31, 0xFE	; 254
    1612:	e4 91       	lpm	r30, Z+
    1614:	e9 2b       	or	r30, r25
    1616:	e4 b9       	out	0x04, r30	; 4

  /* read voltages */
  U1 = ReadADC(Probe1);
    1618:	69 83       	std	Y+1, r22	; 0x01
    161a:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
    161e:	8c 01       	movw	r16, r24
  U2 = ReadADC(Probe2);
    1620:	69 81       	ldd	r22, Y+1	; 0x01
    1622:	86 2f       	mov	r24, r22
    1624:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
    1628:	ac 01       	movw	r20, r24
  /*
   *  We expect both probe voltages to be about the same and
   *  to be half of Vcc (allowed difference +/- 20mV).
   */

  URH = ADCconfig.U_AVCC / 2;
    162a:	20 91 40 01 	lds	r18, 0x0140
    162e:	30 91 41 01 	lds	r19, 0x0141
    1632:	36 95       	lsr	r19
    1634:	27 95       	ror	r18
  if ((U1 > URH - 20) && (U1 < URH + 20))
    1636:	c9 01       	movw	r24, r18
    1638:	44 97       	sbiw	r24, 0x14	; 20
    163a:	80 17       	cp	r24, r16
    163c:	91 07       	cpc	r25, r17
    163e:	60 f4       	brcc	.+24     	; 0x1658 <ShortedProbes+0x68>
    1640:	2c 5e       	subi	r18, 0xEC	; 236
    1642:	3f 4f       	sbci	r19, 0xFF	; 255
    1644:	02 17       	cp	r16, r18
    1646:	13 07       	cpc	r17, r19
    1648:	38 f4       	brcc	.+14     	; 0x1658 <ShortedProbes+0x68>
  {
    if ((U2 > URH - 20) && (U2 < URH + 20))
    164a:	84 17       	cp	r24, r20
    164c:	95 07       	cpc	r25, r21
    164e:	20 f4       	brcc	.+8      	; 0x1658 <ShortedProbes+0x68>
 *  - 1 if shorted
 */

uint8_t ShortedProbes(uint8_t Probe1, uint8_t Probe2)
{
  uint8_t           Flag1 = 0;      /* return value */
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	42 17       	cp	r20, r18
    1654:	53 07       	cpc	r21, r19
    1656:	08 f0       	brcs	.+2      	; 0x165a <ShortedProbes+0x6a>
    1658:	80 e0       	ldi	r24, 0x00	; 0
      Flag1 = 1;
    }
  }

  /* reset port */
  R_DDR = 0;
    165a:	14 b8       	out	0x04, r1	; 4

  return Flag1;
}
    165c:	0f 90       	pop	r0
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	1f 91       	pop	r17
    1664:	0f 91       	pop	r16
    1666:	08 95       	ret

00001668 <AllProbesShorted>:
 *  - 0 if no probes are short-circuited
 *  - number of probe pairs short-circuited (3 = all)
 */

uint8_t AllProbesShorted(void)
{
    1668:	1f 93       	push	r17
  uint8_t           Flag2;      /* return value */

  /* check all possible combinations */
  Flag2 = ShortedProbes(TP1, TP2);
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	61 e0       	ldi	r22, 0x01	; 1
    166e:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <ShortedProbes>
    1672:	18 2f       	mov	r17, r24
  Flag2 += ShortedProbes(TP1, TP3);
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	62 e0       	ldi	r22, 0x02	; 2
    1678:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <ShortedProbes>
    167c:	18 0f       	add	r17, r24
  Flag2 += ShortedProbes(TP2, TP3);
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	62 e0       	ldi	r22, 0x02	; 2
    1682:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <ShortedProbes>

  return Flag2;
}
    1686:	81 0f       	add	r24, r17
    1688:	1f 91       	pop	r17
    168a:	08 95       	ret

0000168c <AutoCheck>:
void AutoCheck(void) {
    168c:	2f 92       	push	r2
    168e:	3f 92       	push	r3
    1690:	4f 92       	push	r4
    1692:	5f 92       	push	r5
    1694:	6f 92       	push	r6
    1696:	7f 92       	push	r7
    1698:	8f 92       	push	r8
    169a:	9f 92       	push	r9
    169c:	af 92       	push	r10
    169e:	bf 92       	push	r11
    16a0:	cf 92       	push	r12
    16a2:	df 92       	push	r13
    16a4:	ef 92       	push	r14
    16a6:	ff 92       	push	r15
    16a8:	0f 93       	push	r16
    16aa:	1f 93       	push	r17
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
    16b4:	2e 97       	sbiw	r28, 0x0e	; 14
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	f8 94       	cli
    16ba:	de bf       	out	0x3e, r29	; 62
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	cd bf       	out	0x3d, r28	; 61
  #ifdef AUTOSCALE_ADC
  int8_t udiff;		// difference between ADC Voltage with VCC or Bandgap reference
  int8_t udiff2;
  #endif
 #endif
  ADC_PORT = TXD_VAL;
    16c0:	88 e0       	ldi	r24, 0x08	; 8
    16c2:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = TXD_MSK;
    16c4:	87 b9       	out	0x07, r24	; 7
  #define RequireShortedProbes
  if (AllProbesShorted() != 3) return;
    16c6:	0e 94 34 0b 	call	0x1668	; 0x1668 <AllProbesShorted>
    16ca:	83 30       	cpi	r24, 0x03	; 3
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <AutoCheck+0x44>
    16ce:	e8 c3       	rjmp	.+2000   	; 0x1ea0 <AutoCheck+0x814>
  lcd_clear();
    16d0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_fix_string(SELFTEST);		// "Selftest mode.."
    16d4:	85 ec       	ldi	r24, 0xC5	; 197
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>

  lcd_line2();
    16dc:	80 ec       	ldi	r24, 0xC0	; 192
    16de:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix2_string(R0_str);		// "R0="
    16e2:	80 ef       	ldi	r24, 0xF0	; 240
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[2]), (int8_t)0);	// clear zero offset
    16ea:	84 ed       	ldi	r24, 0xD4	; 212
    16ec:	91 e0       	ldi	r25, 0x01	; 1
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <__eewr_byte_m168>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (int8_t)0);	// clear zero offset
    16f4:	85 ed       	ldi	r24, 0xD5	; 213
    16f6:	91 e0       	ldi	r25, 0x01	; 1
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <__eewr_byte_m168>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)0);	// clear zero offset
    16fe:	83 ed       	ldi	r24, 0xD3	; 211
    1700:	91 e0       	ldi	r25, 0x01	; 1
    1702:	60 e0       	ldi	r22, 0x00	; 0
    1704:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <__eewr_byte_m168>

  adcmv[0] = GetESR(TP3, TP1);
    1708:	82 e0       	ldi	r24, 0x02	; 2
    170a:	60 e0       	ldi	r22, 0x00	; 0
    170c:	0e 94 41 1b 	call	0x3682	; 0x3682 <GetESR>
    1710:	7c 01       	movw	r14, r24
    1712:	9a 83       	std	Y+2, r25	; 0x02
    1714:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = GetESR(TP3, TP2);
    1716:	82 e0       	ldi	r24, 0x02	; 2
    1718:	61 e0       	ldi	r22, 0x01	; 1
    171a:	0e 94 41 1b 	call	0x3682	; 0x3682 <GetESR>
    171e:	6c 01       	movw	r12, r24
    1720:	9c 83       	std	Y+4, r25	; 0x04
    1722:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = GetESR(TP2, TP1);
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	0e 94 41 1b 	call	0x3682	; 0x3682 <GetESR>
    172c:	5c 01       	movw	r10, r24
    172e:	9e 83       	std	Y+6, r25	; 0x06
    1730:	8d 83       	std	Y+5, r24	; 0x05
  DisplayValue(adcmv[0],-2,' ',3);
    1732:	b7 01       	movw	r22, r14
    1734:	88 27       	eor	r24, r24
    1736:	77 fd       	sbrc	r23, 7
    1738:	80 95       	com	r24
    173a:	98 2f       	mov	r25, r24
    173c:	4e ef       	ldi	r20, 0xFE	; 254
    173e:	20 e2       	ldi	r18, 0x20	; 32
    1740:	03 e0       	ldi	r16, 0x03	; 3
    1742:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
  DisplayValue(adcmv[1],-2,' ',3);
    1746:	b6 01       	movw	r22, r12
    1748:	88 27       	eor	r24, r24
    174a:	77 fd       	sbrc	r23, 7
    174c:	80 95       	com	r24
    174e:	98 2f       	mov	r25, r24
    1750:	4e ef       	ldi	r20, 0xFE	; 254
    1752:	20 e2       	ldi	r18, 0x20	; 32
    1754:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
  DisplayValue(adcmv[2],-2,LCD_CHAR_OMEGA,3);
    1758:	b5 01       	movw	r22, r10
    175a:	88 27       	eor	r24, r24
    175c:	77 fd       	sbrc	r23, 7
    175e:	80 95       	com	r24
    1760:	98 2f       	mov	r25, r24
    1762:	4e ef       	ldi	r20, 0xFE	; 254
    1764:	24 ef       	ldi	r18, 0xF4	; 244
    1766:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
  if (adcmv[0] < 60) {
    176a:	2c e3       	ldi	r18, 0x3C	; 60
    176c:	e2 16       	cp	r14, r18
    176e:	f1 04       	cpc	r15, r1
    1770:	2c f4       	brge	.+10     	; 0x177c <AutoCheck+0xf0>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[2]), (int8_t)adcmv[0]);	// fix zero offset
    1772:	84 ed       	ldi	r24, 0xD4	; 212
    1774:	91 e0       	ldi	r25, 0x01	; 1
    1776:	6e 2d       	mov	r22, r14
    1778:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <__eewr_byte_m168>
  }
  if (adcmv[1] < 60) {
    177c:	8c e3       	ldi	r24, 0x3C	; 60
    177e:	c8 16       	cp	r12, r24
    1780:	d1 04       	cpc	r13, r1
    1782:	2c f4       	brge	.+10     	; 0x178e <AutoCheck+0x102>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (int8_t)adcmv[1]);	// fix zero offset
    1784:	85 ed       	ldi	r24, 0xD5	; 213
    1786:	91 e0       	ldi	r25, 0x01	; 1
    1788:	6c 2d       	mov	r22, r12
    178a:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <__eewr_byte_m168>
  }
  if (adcmv[2] < 60) {
    178e:	ec e3       	ldi	r30, 0x3C	; 60
    1790:	ae 16       	cp	r10, r30
    1792:	b1 04       	cpc	r11, r1
    1794:	2c f4       	brge	.+10     	; 0x17a0 <AutoCheck+0x114>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
    1796:	83 ed       	ldi	r24, 0xD3	; 211
    1798:	91 e0       	ldi	r25, 0x01	; 1
    179a:	6a 2d       	mov	r22, r10
    179c:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <__eewr_byte_m168>
void AutoCheck(void) {
    17a0:	10 e0       	ldi	r17, 0x00	; 0
  }
  if (adcmv[2] < 60) {
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
  }
  for(tt=0;tt<12;tt++) {
     wait_about500ms();
    17a2:	84 e6       	ldi	r24, 0x64	; 100
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    17aa:	4f 9b       	sbis	0x09, 7	; 9
    17ac:	7b c1       	rjmp	.+758    	; 0x1aa4 <AutoCheck+0x418>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (int8_t)adcmv[1]);	// fix zero offset
  }
  if (adcmv[2] < 60) {
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
  }
  for(tt=0;tt<12;tt++) {
    17ae:	1f 5f       	subi	r17, 0xFF	; 255
    17b0:	1c 30       	cpi	r17, 0x0C	; 12
    17b2:	b9 f7       	brne	.-18     	; 0x17a2 <AutoCheck+0x116>
    17b4:	77 c1       	rjmp	.+750    	; 0x1aa4 <AutoCheck+0x418>

 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
        lcd_line2();			//Cursor to column 1, row 2
    17b6:	80 ec       	ldi	r24, 0xC0	; 192
    17b8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_clear_line();		// clear total line
    17bc:	0e 94 8f 02 	call	0x51e	; 0x51e <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    17c0:	80 e8       	ldi	r24, 0x80	; 128
    17c2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_clear_line();		// clear total line
    17c6:	0e 94 8f 02 	call	0x51e	; 0x51e <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    17ca:	80 e8       	ldi	r24, 0x80	; 128
    17cc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_data('T');			//output the Testmode "T"
    17d0:	84 e5       	ldi	r24, 0x54	; 84
    17d2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
        lcd_string(utoa(tt, outval, 10));	//output Test number
    17d6:	8c 2d       	mov	r24, r12
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	6c e0       	ldi	r22, 0x0C	; 12
    17dc:	71 e0       	ldi	r23, 0x01	; 1
    17de:	4a e0       	ldi	r20, 0x0A	; 10
    17e0:	50 e0       	ldi	r21, 0x00	; 0
    17e2:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <utoa>
    17e6:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
        lcd_space();
    17ea:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
                                        //############################################
        if (tt == 1) {   // output of reference voltage and factors for capacity measurement
    17ee:	fc 2d       	mov	r31, r12
    17f0:	f1 30       	cpi	r31, 0x01	; 1
    17f2:	41 f5       	brne	.+80     	; 0x1844 <AutoCheck+0x1b8>
           Calibrate_UR();		// get Reference voltage, Pin resistance
    17f4:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <Calibrate_UR>
           lcd_fix2_string(URefT);	//"URef="
    17f8:	86 ee       	ldi	r24, 0xE6	; 230
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
           DisplayValue(ref_mv,-3,'V',4);
    1800:	60 91 44 01 	lds	r22, 0x0144
    1804:	70 91 45 01 	lds	r23, 0x0145
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	4d ef       	ldi	r20, 0xFD	; 253
    180e:	26 e5       	ldi	r18, 0x56	; 86
    1810:	04 e0       	ldi	r16, 0x04	; 4
    1812:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
           lcd_line2();			//Cursor to column 1, row 2
    1816:	80 ec       	ldi	r24, 0xC0	; 192
    1818:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
           lcd_fix2_string(RHfakt);	//"RHf="
    181c:	8b ee       	ldi	r24, 0xEB	; 235
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
           lcd_string(utoa(RHmultip, outval, 10));
    1824:	80 91 00 01 	lds	r24, 0x0100
    1828:	90 91 01 01 	lds	r25, 0x0101
    182c:	6c e0       	ldi	r22, 0x0C	; 12
    182e:	71 e0       	ldi	r23, 0x01	; 1
    1830:	4a e0       	ldi	r20, 0x0A	; 10
    1832:	50 e0       	ldi	r21, 0x00	; 0
    1834:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <utoa>
    1838:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
           ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    183c:	2e eb       	ldi	r18, 0xBE	; 190
    183e:	20 93 3c 01 	sts	0x013C, r18
    1842:	12 c1       	rjmp	.+548    	; 0x1a68 <AutoCheck+0x3dc>
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
    1844:	8c 2d       	mov	r24, r12
    1846:	82 30       	cpi	r24, 0x02	; 2
    1848:	99 f5       	brne	.+102    	; 0x18b0 <AutoCheck+0x224>
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    184a:	60 91 40 01 	lds	r22, 0x0140
    184e:	70 91 41 01 	lds	r23, 0x0141
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	2e e4       	ldi	r18, 0x4E	; 78
    1858:	3b e1       	ldi	r19, 0x1B	; 27
    185a:	40 e0       	ldi	r20, 0x00	; 0
    185c:	50 e0       	ldi	r21, 0x00	; 0
    185e:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
    1862:	a4 01       	movw	r20, r8
    1864:	93 01       	movw	r18, r6
    1866:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__divmodsi4>
    186a:	89 01       	movw	r16, r18
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	85 b9       	out	0x05, r24	; 5
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
    1870:	e5 e0       	ldi	r30, 0x05	; 5
    1872:	e4 b9       	out	0x04, r30	; 4
           adcmv[0] = W20msReadADC(TP1);
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	0e 94 cf 1a 	call	0x359e	; 0x359e <W20msReadADC>
           adcmv[0] -= u680;
    187a:	80 1b       	sub	r24, r16
    187c:	91 0b       	sbc	r25, r17
    187e:	9a 83       	std	Y+2, r25	; 0x02
    1880:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//RL3 to -
    1882:	f1 e1       	ldi	r31, 0x11	; 17
    1884:	f4 b9       	out	0x04, r31	; 4
           adcmv[1] = W20msReadADC(TP1);
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	0e 94 cf 1a 	call	0x359e	; 0x359e <W20msReadADC>
           adcmv[1] -= u680;
    188c:	80 1b       	sub	r24, r16
    188e:	91 0b       	sbc	r25, r17
    1890:	9c 83       	std	Y+4, r25	; 0x04
    1892:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 1<<(TP2*2);		//RL2 to VCC
    1894:	24 e0       	ldi	r18, 0x04	; 4
    1896:	25 b9       	out	0x05, r18	; 5
           R_DDR = (1<<(TP2*2)) | (1<<(TP3*2));	//RL3 to -
    1898:	84 e1       	ldi	r24, 0x14	; 20
    189a:	84 b9       	out	0x04, r24	; 4
           adcmv[2] = W20msReadADC(TP2);
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	0e 94 cf 1a 	call	0x359e	; 0x359e <W20msReadADC>
           adcmv[2] -= u680;
    18a2:	80 1b       	sub	r24, r16
    18a4:	91 0b       	sbc	r25, r17
    18a6:	9e 83       	std	Y+6, r25	; 0x06
    18a8:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RLRL);	// "RLRL"
    18aa:	8f e5       	ldi	r24, 0x5F	; 95
    18ac:	91 e0       	ldi	r25, 0x01	; 1
    18ae:	b1 c0       	rjmp	.+354    	; 0x1a12 <AutoCheck+0x386>
        }
                                        //############################################
        if (tt == 3) { // how equal are the RH resistors
    18b0:	ec 2d       	mov	r30, r12
    18b2:	e3 30       	cpi	r30, 0x03	; 3
    18b4:	41 f5       	brne	.+80     	; 0x1906 <AutoCheck+0x27a>
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    18b6:	f5 b8       	out	0x05, r15	; 5
           R_DDR = (2<<(TP1*2)) | (2<<(TP2*2));	//RH2 to -
    18b8:	fa e0       	ldi	r31, 0x0A	; 10
    18ba:	f4 b9       	out	0x04, r31	; 4
           adcmv[0] = W20msReadADC(TP1);
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	0e 94 cf 1a 	call	0x359e	; 0x359e <W20msReadADC>
           adcmv[3] = ADCconfig.U_AVCC / 2;
    18c2:	00 91 40 01 	lds	r16, 0x0140
    18c6:	10 91 41 01 	lds	r17, 0x0141
    18ca:	16 95       	lsr	r17
    18cc:	07 95       	ror	r16
    18ce:	18 87       	std	Y+8, r17	; 0x08
    18d0:	0f 83       	std	Y+7, r16	; 0x07
           adcmv[0] -= adcmv[3];
    18d2:	80 1b       	sub	r24, r16
    18d4:	91 0b       	sbc	r25, r17
    18d6:	9a 83       	std	Y+2, r25	; 0x02
    18d8:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (2<<(TP1*2)) | (2<<(TP3*2));	//RH3 to -
    18da:	22 e2       	ldi	r18, 0x22	; 34
    18dc:	24 b9       	out	0x04, r18	; 4
           adcmv[1] = W20msReadADC(TP1);
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	0e 94 cf 1a 	call	0x359e	; 0x359e <W20msReadADC>
           adcmv[1] -= adcmv[3];
    18e4:	80 1b       	sub	r24, r16
    18e6:	91 0b       	sbc	r25, r17
    18e8:	9c 83       	std	Y+4, r25	; 0x04
    18ea:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 2<<(TP2*2);		//RL2 to VCC
    18ec:	e5 b8       	out	0x05, r14	; 5
           R_DDR = (2<<(TP2*2)) | (2<<(TP3*2));	//RH3 to -
    18ee:	88 e2       	ldi	r24, 0x28	; 40
    18f0:	84 b9       	out	0x04, r24	; 4
           adcmv[2] = W20msReadADC(TP2);
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	0e 94 cf 1a 	call	0x359e	; 0x359e <W20msReadADC>
           adcmv[2] -= adcmv[3];
    18f8:	80 1b       	sub	r24, r16
    18fa:	91 0b       	sbc	r25, r17
    18fc:	9e 83       	std	Y+6, r25	; 0x06
    18fe:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RHRH);	// "RHRH"
    1900:	8d e6       	ldi	r24, 0x6D	; 109
    1902:	91 e0       	ldi	r25, 0x01	; 1
    1904:	86 c0       	rjmp	.+268    	; 0x1a12 <AutoCheck+0x386>
        }
                                        //############################################
        if (tt == 4) { // Text release probes
    1906:	ec 2d       	mov	r30, r12
    1908:	e4 30       	cpi	r30, 0x04	; 4
    190a:	51 f4       	brne	.+20     	; 0x1920 <AutoCheck+0x294>
           lcd_fix_string(RELPROBE);	// "Release Probes"
    190c:	85 ed       	ldi	r24, 0xD5	; 213
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           if (AllProbesShorted() != 0) ww = MAX_REP-2;
    1914:	0e 94 34 0b 	call	0x1668	; 0x1668 <AllProbesShorted>
    1918:	88 23       	and	r24, r24
    191a:	09 f0       	breq	.+2      	; 0x191e <AutoCheck+0x292>
    191c:	be c2       	rjmp	.+1404   	; 0x1e9a <AutoCheck+0x80e>
    191e:	7f c0       	rjmp	.+254    	; 0x1a1e <AutoCheck+0x392>
        }
                                        //############################################
        if (tt == 5) { // can we switch the ADC pins to GND across R_H resistor?
    1920:	fc 2d       	mov	r31, r12
    1922:	f5 30       	cpi	r31, 0x05	; 5
    1924:	b1 f4       	brne	.+44     	; 0x1952 <AutoCheck+0x2c6>
           R_PORT = 0;
    1926:	15 b8       	out	0x05, r1	; 5
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to GND
    1928:	f4 b8       	out	0x04, r15	; 4
           adcmv[0] = W20msReadADC(TP1);
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	0e 94 cf 1a 	call	0x359e	; 0x359e <W20msReadADC>
    1930:	9a 83       	std	Y+2, r25	; 0x02
    1932:	89 83       	std	Y+1, r24	; 0x01

           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to GND
    1934:	e4 b8       	out	0x04, r14	; 4
           adcmv[1] = W20msReadADC(TP2);
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	0e 94 cf 1a 	call	0x359e	; 0x359e <W20msReadADC>
    193c:	9c 83       	std	Y+4, r25	; 0x04
    193e:	8b 83       	std	Y+3, r24	; 0x03

           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1940:	b4 b8       	out	0x04, r11	; 4
           adcmv[2] = W20msReadADC(TP3);
    1942:	82 e0       	ldi	r24, 0x02	; 2
    1944:	0e 94 cf 1a 	call	0x359e	; 0x359e <W20msReadADC>
    1948:	9e 83       	std	Y+6, r25	; 0x06
    194a:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RH1L);	// "RH_Lo="
    194c:	87 e5       	ldi	r24, 0x57	; 87
    194e:	91 e0       	ldi	r25, 0x01	; 1
    1950:	60 c0       	rjmp	.+192    	; 0x1a12 <AutoCheck+0x386>
        }
                                        //############################################
        if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
    1952:	2c 2d       	mov	r18, r12
    1954:	26 30       	cpi	r18, 0x06	; 6
    1956:	51 f5       	brne	.+84     	; 0x19ac <AutoCheck+0x320>
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to VCC
    1958:	f4 b8       	out	0x04, r15	; 4
           R_PORT = 2<<(TP1*2);
    195a:	f5 b8       	out	0x05, r15	; 5
           adcmv[0] = W20msReadADC(TP1) - ADCconfig.U_AVCC;
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	0e 94 cf 1a 	call	0x359e	; 0x359e <W20msReadADC>
    1962:	20 91 40 01 	lds	r18, 0x0140
    1966:	30 91 41 01 	lds	r19, 0x0141
    196a:	82 1b       	sub	r24, r18
    196c:	93 0b       	sbc	r25, r19
    196e:	9a 83       	std	Y+2, r25	; 0x02
    1970:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to VCC
    1972:	e4 b8       	out	0x04, r14	; 4
           R_PORT = 2<<(TP2*2);
    1974:	e5 b8       	out	0x05, r14	; 5
           adcmv[1] = W20msReadADC(TP2) - ADCconfig.U_AVCC;
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	0e 94 cf 1a 	call	0x359e	; 0x359e <W20msReadADC>
    197c:	20 91 40 01 	lds	r18, 0x0140
    1980:	30 91 41 01 	lds	r19, 0x0141
    1984:	82 1b       	sub	r24, r18
    1986:	93 0b       	sbc	r25, r19
    1988:	9c 83       	std	Y+4, r25	; 0x04
    198a:	8b 83       	std	Y+3, r24	; 0x03
           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to VCC
    198c:	b4 b8       	out	0x04, r11	; 4
           R_PORT = 2<<(TP3*2);
    198e:	b5 b8       	out	0x05, r11	; 5
           adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
    1990:	82 e0       	ldi	r24, 0x02	; 2
    1992:	0e 94 cf 1a 	call	0x359e	; 0x359e <W20msReadADC>
    1996:	20 91 40 01 	lds	r18, 0x0140
    199a:	30 91 41 01 	lds	r19, 0x0141
    199e:	82 1b       	sub	r24, r18
    19a0:	93 0b       	sbc	r25, r19
    19a2:	9e 83       	std	Y+6, r25	; 0x06
    19a4:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RH1H);	// "RH_Hi="
    19a6:	8b e5       	ldi	r24, 0x5B	; 91
    19a8:	91 e0       	ldi	r25, 0x01	; 1
    19aa:	33 c0       	rjmp	.+102    	; 0x1a12 <AutoCheck+0x386>
        }
        if (tt == 7) { // can we switch the ADC pins to VCC across the R_H resistor?
    19ac:	8c 2d       	mov	r24, r12
    19ae:	87 30       	cpi	r24, 0x07	; 7
    19b0:	99 f5       	brne	.+102    	; 0x1a18 <AutoCheck+0x38c>
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_H_VAL*100));
    19b2:	60 91 40 01 	lds	r22, 0x0140
    19b6:	70 91 41 01 	lds	r23, 0x0141
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	2e e4       	ldi	r18, 0x4E	; 78
    19c0:	3b e1       	ldi	r19, 0x1B	; 27
    19c2:	40 e0       	ldi	r20, 0x00	; 0
    19c4:	50 e0       	ldi	r21, 0x00	; 0
    19c6:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
    19ca:	a2 01       	movw	r20, r4
    19cc:	91 01       	movw	r18, r2
    19ce:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__divmodsi4>
    19d2:	89 01       	movw	r16, r18
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    19d4:	f5 b8       	out	0x05, r15	; 5
           R_DDR = (2<<(TP1*2)) | (1<<(TP1*2));	//RH1 to +, RL1 to -
    19d6:	e3 e0       	ldi	r30, 0x03	; 3
    19d8:	e4 b9       	out	0x04, r30	; 4
           adcmv[0] = W20msReadADC(TP1);
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	0e 94 cf 1a 	call	0x359e	; 0x359e <W20msReadADC>
           adcmv[0] -= u680;
    19e0:	80 1b       	sub	r24, r16
    19e2:	91 0b       	sbc	r25, r17
    19e4:	9a 83       	std	Y+2, r25	; 0x02
    19e6:	89 83       	std	Y+1, r24	; 0x01
           R_PORT = 2<<(TP2*2);		//RH2 to VCC
    19e8:	e5 b8       	out	0x05, r14	; 5
           R_DDR = (2<<(TP2*2)) | (1<<(TP2*2));	//RH2 to +, RL2 to -
    19ea:	fc e0       	ldi	r31, 0x0C	; 12
    19ec:	f4 b9       	out	0x04, r31	; 4
           adcmv[1] = W20msReadADC(TP2);
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	0e 94 cf 1a 	call	0x359e	; 0x359e <W20msReadADC>
           adcmv[1] -= u680;
    19f4:	80 1b       	sub	r24, r16
    19f6:	91 0b       	sbc	r25, r17
    19f8:	9c 83       	std	Y+4, r25	; 0x04
    19fa:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 2<<(TP3*2);		//RH3 to VCC
    19fc:	b5 b8       	out	0x05, r11	; 5
           R_DDR = (2<<(TP3*2)) | (1<<(TP3*2));	//RH3 to +, RL3 to -
    19fe:	d4 b8       	out	0x04, r13	; 4
           adcmv[2] = W20msReadADC(TP3);
    1a00:	82 e0       	ldi	r24, 0x02	; 2
    1a02:	0e 94 cf 1a 	call	0x359e	; 0x359e <W20msReadADC>
           adcmv[2] -= u680;
    1a06:	80 1b       	sub	r24, r16
    1a08:	91 0b       	sbc	r25, r17
    1a0a:	9e 83       	std	Y+6, r25	; 0x06
    1a0c:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RHRL);	// "RH/RL"
    1a0e:	8b e7       	ldi	r24, 0x7B	; 123
    1a10:	91 e0       	ldi	r25, 0x01	; 1
    1a12:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    1a16:	03 c0       	rjmp	.+6      	; 0x1a1e <AutoCheck+0x392>
        }
                                        //############################################
        if (tt > 1) {	// output 3 voltages 
    1a18:	2c 2d       	mov	r18, r12
    1a1a:	21 30       	cpi	r18, 0x01	; 1
    1a1c:	29 f1       	breq	.+74     	; 0x1a68 <AutoCheck+0x3dc>
           lcd_line2();			//Cursor to column 1, row 2
    1a1e:	80 ec       	ldi	r24, 0xC0	; 192
    1a20:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
           lcd_string(itoa(adcmv[0], outval, 10));	//output voltage 1
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	9a 81       	ldd	r25, Y+2	; 0x02
    1a28:	6c e0       	ldi	r22, 0x0C	; 12
    1a2a:	71 e0       	ldi	r23, 0x01	; 1
    1a2c:	4a e0       	ldi	r20, 0x0A	; 10
    1a2e:	50 e0       	ldi	r21, 0x00	; 0
    1a30:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <itoa>
    1a34:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
           lcd_space();
    1a38:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
           lcd_string(itoa(adcmv[1], outval, 10));	//output voltage 2
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a40:	6c e0       	ldi	r22, 0x0C	; 12
    1a42:	71 e0       	ldi	r23, 0x01	; 1
    1a44:	4a e0       	ldi	r20, 0x0A	; 10
    1a46:	50 e0       	ldi	r21, 0x00	; 0
    1a48:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <itoa>
    1a4c:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
           lcd_space();
    1a50:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
           lcd_string(itoa(adcmv[2], outval, 10));	//output voltage 3
    1a54:	8d 81       	ldd	r24, Y+5	; 0x05
    1a56:	9e 81       	ldd	r25, Y+6	; 0x06
    1a58:	6c e0       	ldi	r22, 0x0C	; 12
    1a5a:	71 e0       	ldi	r23, 0x01	; 1
    1a5c:	4a e0       	ldi	r20, 0x0A	; 10
    1a5e:	50 e0       	ldi	r21, 0x00	; 0
    1a60:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <itoa>
    1a64:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
        }
        ADC_DDR =  TXD_MSK;		// all-Pins to Input
    1a68:	e7 b8       	out	0x07, r14	; 7
        ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
    1a6a:	e8 b8       	out	0x08, r14	; 8
        R_DDR = 0;			// all R-Ports to Input
    1a6c:	14 b8       	out	0x04, r1	; 4
        R_PORT = 0;
    1a6e:	15 b8       	out	0x05, r1	; 5
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    1a70:	4f 9b       	sbis	0x09, 7	; 9
    1a72:	0f c0       	rjmp	.+30     	; 0x1a92 <AutoCheck+0x406>
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
    1a74:	84 e6       	ldi	r24, 0x64	; 100
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    1a7c:	4f 9b       	sbis	0x09, 7	; 9
    1a7e:	09 c0       	rjmp	.+18     	; 0x1a92 <AutoCheck+0x406>
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
    1a80:	84 e6       	ldi	r24, 0x64	; 100
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>
  } /* end for tt */

 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
    1a88:	a3 94       	inc	r10
    1a8a:	8a 2d       	mov	r24, r10
    1a8c:	84 30       	cpi	r24, 0x04	; 4
    1a8e:	08 f4       	brcc	.+2      	; 0x1a92 <AutoCheck+0x406>
    1a90:	92 ce       	rjmp	.-732    	; 0x17b6 <AutoCheck+0x12a>
    1a92:	1c 2d       	mov	r17, r12
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
     } //end for ww
     wait_about1s();
    1a94:	88 ec       	ldi	r24, 0xC8	; 200
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>
     }
  } /* end for tt */

 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    1a9c:	1f 5f       	subi	r17, 0xFF	; 255
    1a9e:	18 30       	cpi	r17, 0x08	; 8
    1aa0:	89 f4       	brne	.+34     	; 0x1ac4 <AutoCheck+0x438>
    1aa2:	19 c0       	rjmp	.+50     	; 0x1ad6 <AutoCheck+0x44a>
  if (adcmv[2] < 60) {
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
  }
  for(tt=0;tt<12;tt++) {
     wait_about500ms();
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    1aa4:	11 e0       	ldi	r17, 0x01	; 1
           R_PORT = 2<<(TP3*2);
           adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
           lcd_fix_string(RH1H);	// "RH_Hi="
        }
        if (tt == 7) { // can we switch the ADC pins to VCC across the R_H resistor?
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_H_VAL*100));
    1aa6:	be ea       	ldi	r27, 0xAE	; 174
    1aa8:	2b 2e       	mov	r2, r27
    1aaa:	b2 ed       	ldi	r27, 0xD2	; 210
    1aac:	3b 2e       	mov	r3, r27
    1aae:	b7 e4       	ldi	r27, 0x47	; 71
    1ab0:	4b 2e       	mov	r4, r27
    1ab2:	51 2c       	mov	r5, r1
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    1ab4:	a2 e0       	ldi	r26, 0x02	; 2
    1ab6:	fa 2e       	mov	r15, r26
           R_DDR = (2<<(TP1*2)) | (1<<(TP1*2));	//RH1 to +, RL1 to -
           adcmv[0] = W20msReadADC(TP1);
           adcmv[0] -= u680;
           R_PORT = 2<<(TP2*2);		//RH2 to VCC
    1ab8:	f8 e0       	ldi	r31, 0x08	; 8
    1aba:	ef 2e       	mov	r14, r31
           R_DDR = (2<<(TP2*2)) | (1<<(TP2*2));	//RH2 to +, RL2 to -
           adcmv[1] = W20msReadADC(TP2);
           adcmv[1] -= u680;
           R_PORT = 2<<(TP3*2);		//RH3 to VCC
    1abc:	e0 e2       	ldi	r30, 0x20	; 32
    1abe:	be 2e       	mov	r11, r30
           R_DDR = (2<<(TP3*2)) | (1<<(TP3*2));	//RH3 to +, RL3 to -
    1ac0:	70 e3       	ldi	r23, 0x30	; 48
    1ac2:	d7 2e       	mov	r13, r23
void AutoCheck(void) {
    1ac4:	aa 24       	eor	r10, r10
           lcd_string(utoa(RHmultip, outval, 10));
           ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1ac6:	6a eb       	ldi	r22, 0xBA	; 186
    1ac8:	66 2e       	mov	r6, r22
    1aca:	66 e3       	ldi	r22, 0x36	; 54
    1acc:	76 2e       	mov	r7, r22
    1ace:	81 2c       	mov	r8, r1
    1ad0:	91 2c       	mov	r9, r1
    1ad2:	c1 2e       	mov	r12, r17
    1ad4:	70 ce       	rjmp	.-800    	; 0x17b6 <AutoCheck+0x12a>
        wait_about500ms();
     } //end for ww
     wait_about1s();
  } //end for tt

  lcd_clear();
    1ad6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_fix_string(RIHI);	// "RiHi="
    1ada:	81 e8       	ldi	r24, 0x81	; 129
    1adc:	91 e0       	ldi	r25, 0x01	; 1
    1ade:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  DisplayValue(RRpinPL,-1,LCD_CHAR_OMEGA,3);
    1ae2:	60 91 42 01 	lds	r22, 0x0142
    1ae6:	70 91 43 01 	lds	r23, 0x0143
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	4f ef       	ldi	r20, 0xFF	; 255
    1af0:	24 ef       	ldi	r18, 0xF4	; 244
    1af2:	03 e0       	ldi	r16, 0x03	; 3
    1af4:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
  lcd_line2();
    1af8:	80 ec       	ldi	r24, 0xC0	; 192
    1afa:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(RILO);	// "RiLo="
    1afe:	88 e8       	ldi	r24, 0x88	; 136
    1b00:	91 e0       	ldi	r25, 0x01	; 1
    1b02:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  DisplayValue(RRpinMI,-1,LCD_CHAR_OMEGA,3);
    1b06:	60 91 47 01 	lds	r22, 0x0147
    1b0a:	70 91 48 01 	lds	r23, 0x0148
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	4f ef       	ldi	r20, 0xFF	; 255
    1b14:	24 ef       	ldi	r18, 0xF4	; 244
    1b16:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
  wait_about2s();			//wait 2 seconds
    1b1a:	80 e9       	ldi	r24, 0x90	; 144
    1b1c:	91 e0       	ldi	r25, 0x01	; 1
    1b1e:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>

  //measure Zero offset for Capacity measurement
  adcmv[3] = 0;
    1b22:	18 86       	std	Y+8, r1	; 0x08
    1b24:	1f 82       	std	Y+7, r1	; 0x07
  PartFound = PART_NONE;
    1b26:	10 92 07 01 	sts	0x0107, r1
  ReadCapacity(TP3, TP1);
    1b2a:	82 e0       	ldi	r24, 0x02	; 2
    1b2c:	60 e0       	ldi	r22, 0x00	; 0
    1b2e:	0e 94 31 15 	call	0x2a62	; 0x2a62 <ReadCapacity>
  adcmv[5] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:3
    1b32:	00 91 6a 01 	lds	r16, 0x016A
    1b36:	10 91 6b 01 	lds	r17, 0x016B
    1b3a:	1c 87       	std	Y+12, r17	; 0x0c
    1b3c:	0b 87       	std	Y+11, r16	; 0x0b
  ReadCapacity(TP3, TP2);
    1b3e:	82 e0       	ldi	r24, 0x02	; 2
    1b40:	61 e0       	ldi	r22, 0x01	; 1
    1b42:	0e 94 31 15 	call	0x2a62	; 0x2a62 <ReadCapacity>
  adcmv[6] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:3
    1b46:	e0 90 6a 01 	lds	r14, 0x016A
    1b4a:	f0 90 6b 01 	lds	r15, 0x016B
    1b4e:	fe 86       	std	Y+14, r15	; 0x0e
    1b50:	ed 86       	std	Y+13, r14	; 0x0d
  ReadCapacity(TP2, TP1);
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	0e 94 31 15 	call	0x2a62	; 0x2a62 <ReadCapacity>
  adcmv[2] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:2
    1b5a:	c0 90 6a 01 	lds	r12, 0x016A
    1b5e:	d0 90 6b 01 	lds	r13, 0x016B
    1b62:	de 82       	std	Y+6, r13	; 0x06
    1b64:	cd 82       	std	Y+5, r12	; 0x05
  ReadCapacity(TP1, TP3);
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	62 e0       	ldi	r22, 0x02	; 2
    1b6a:	0e 94 31 15 	call	0x2a62	; 0x2a62 <ReadCapacity>
  adcmv[1] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:1
    1b6e:	80 91 6a 01 	lds	r24, 0x016A
    1b72:	90 91 6b 01 	lds	r25, 0x016B
    1b76:	9c 83       	std	Y+4, r25	; 0x04
    1b78:	8b 83       	std	Y+3, r24	; 0x03
  ReadCapacity(TP2, TP3);
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	62 e0       	ldi	r22, 0x02	; 2
    1b7e:	0e 94 31 15 	call	0x2a62	; 0x2a62 <ReadCapacity>
  adcmv[4] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:2
    1b82:	80 91 6a 01 	lds	r24, 0x016A
    1b86:	90 91 6b 01 	lds	r25, 0x016B
    1b8a:	9a 87       	std	Y+10, r25	; 0x0a
    1b8c:	89 87       	std	Y+9, r24	; 0x09
  ReadCapacity(TP1, TP2);
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	61 e0       	ldi	r22, 0x01	; 1
    1b92:	0e 94 31 15 	call	0x2a62	; 0x2a62 <ReadCapacity>
  adcmv[0] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:1
    1b96:	80 91 6a 01 	lds	r24, 0x016A
    1b9a:	90 91 6b 01 	lds	r25, 0x016B
    1b9e:	9a 83       	std	Y+2, r25	; 0x02
    1ba0:	89 83       	std	Y+1, r24	; 0x01
  lcd_clear();
    1ba2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_fix_string(C0_str);			//output "C0 "
    1ba6:	8f e8       	ldi	r24, 0x8F	; 143
    1ba8:	91 e0       	ldi	r25, 0x01	; 1
    1baa:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
    1bae:	b8 01       	movw	r22, r16
    1bb0:	88 27       	eor	r24, r24
    1bb2:	77 fd       	sbrc	r23, 7
    1bb4:	80 95       	com	r24
    1bb6:	98 2f       	mov	r25, r24
    1bb8:	40 e0       	ldi	r20, 0x00	; 0
    1bba:	20 e2       	ldi	r18, 0x20	; 32
    1bbc:	03 e0       	ldi	r16, 0x03	; 3
    1bbe:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
    1bc2:	b7 01       	movw	r22, r14
    1bc4:	88 27       	eor	r24, r24
    1bc6:	77 fd       	sbrc	r23, 7
    1bc8:	80 95       	com	r24
    1bca:	98 2f       	mov	r25, r24
    1bcc:	40 e0       	ldi	r20, 0x00	; 0
    1bce:	20 e2       	ldi	r18, 0x20	; 32
    1bd0:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
    1bd4:	b6 01       	movw	r22, r12
    1bd6:	88 27       	eor	r24, r24
    1bd8:	77 fd       	sbrc	r23, 7
    1bda:	80 95       	com	r24
    1bdc:	98 2f       	mov	r25, r24
    1bde:	44 ef       	ldi	r20, 0xF4	; 244
    1be0:	26 e4       	ldi	r18, 0x46	; 70
    1be2:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
    1be6:	8e 01       	movw	r16, r28
    1be8:	0f 5f       	subi	r16, 0xFF	; 255
    1bea:	1f 4f       	sbci	r17, 0xFF	; 255
void AutoCheck(void) {
    1bec:	ce 01       	movw	r24, r28
    1bee:	0f 96       	adiw	r24, 0x0f	; 15
    1bf0:	f8 01       	movw	r30, r16
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
    1bf2:	21 91       	ld	r18, Z+
    1bf4:	31 91       	ld	r19, Z+
    1bf6:	27 34       	cpi	r18, 0x47	; 71
    1bf8:	31 05       	cpc	r19, r1
    1bfa:	ec f4       	brge	.+58     	; 0x1c36 <AutoCheck+0x5aa>
  lcd_fix_string(C0_str);			//output "C0 "
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
    1bfc:	e8 17       	cp	r30, r24
    1bfe:	f9 07       	cpc	r31, r25
    1c00:	c1 f7       	brne	.-16     	; 0x1bf2 <AutoCheck+0x566>
    1c02:	ee 24       	eor	r14, r14
    1c04:	ff 24       	eor	r15, r15
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
    1c06:	f8 01       	movw	r30, r16
    1c08:	60 81       	ld	r22, Z
    1c0a:	0e 5f       	subi	r16, 0xFE	; 254
    1c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c0e:	61 5f       	subi	r22, 0xF1	; 241
    1c10:	c7 01       	movw	r24, r14
    1c12:	85 53       	subi	r24, 0x35	; 53
    1c14:	9e 4f       	sbci	r25, 0xFE	; 254
    1c16:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <__eewr_byte_m168>
    1c1a:	08 94       	sec
    1c1c:	e1 1c       	adc	r14, r1
    1c1e:	f1 1c       	adc	r15, r1
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
    1c20:	f7 e0       	ldi	r31, 0x07	; 7
    1c22:	ef 16       	cp	r14, r31
    1c24:	f1 04       	cpc	r15, r1
    1c26:	79 f7       	brne	.-34     	; 0x1c06 <AutoCheck+0x57a>
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
  }
  lcd_line2();
    1c28:	80 ec       	ldi	r24, 0xC0	; 192
    1c2a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(OK_str);		// output "OK"
    1c2e:	83 ef       	ldi	r24, 0xF3	; 243
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
no_c0save:
 #endif
 wait_about2s();		//wait 2 seconds
    1c36:	80 e9       	ldi	r24, 0x90	; 144
    1c38:	91 e0       	ldi	r25, 0x01	; 1
    1c3a:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
    1c3e:	10 e0       	ldi	r17, 0x00	; 0
 for (ww=0;ww<64;ww++) {
    1c40:	cc 24       	eor	r12, r12
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
    1c42:	5a e0       	ldi	r21, 0x0A	; 10
    1c44:	85 2e       	mov	r8, r21
    1c46:	91 2c       	mov	r9, r1
    1c48:	a1 2c       	mov	r10, r1
    1c4a:	b1 2c       	mov	r11, r1
     lcd_data('3');
     lcd_fix2_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1c4c:	42 e6       	ldi	r20, 0x62	; 98
    1c4e:	e4 2e       	mov	r14, r20
    1c50:	41 e0       	ldi	r20, 0x01	; 1
    1c52:	f4 2e       	mov	r15, r20
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
     lcd_clear();
    1c54:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
     lcd_data('1');
    1c58:	81 e3       	ldi	r24, 0x31	; 49
    1c5a:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
     lcd_fix_string(CapZeich);	// "-||-"
    1c5e:	85 e2       	ldi	r24, 0x25	; 37
    1c60:	91 e0       	ldi	r25, 0x01	; 1
    1c62:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_data('3');
    1c66:	83 e3       	ldi	r24, 0x33	; 51
    1c68:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
     lcd_fix2_string(MinCap_str); // " >100nF!"
    1c6c:	84 ef       	ldi	r24, 0xF4	; 244
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
     PartFound = PART_NONE;
    1c74:	10 92 07 01 	sts	0x0107, r1
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
    1c78:	82 e0       	ldi	r24, 0x02	; 2
    1c7a:	60 e0       	ldi	r22, 0x00	; 0
    1c7c:	0e 94 31 15 	call	0x2a62	; 0x2a62 <ReadCapacity>
    1c80:	20 91 62 01 	lds	r18, 0x0162
    1c84:	30 91 63 01 	lds	r19, 0x0163
    1c88:	40 91 64 01 	lds	r20, 0x0164
    1c8c:	50 91 65 01 	lds	r21, 0x0165
    1c90:	00 91 74 01 	lds	r16, 0x0174
     while (cap.cpre < -9) {
    1c94:	07 c0       	rjmp	.+14     	; 0x1ca4 <AutoCheck+0x618>
        cap.cpre++;
        cap.cval /= 10;
    1c96:	ca 01       	movw	r24, r20
    1c98:	b9 01       	movw	r22, r18
    1c9a:	a5 01       	movw	r20, r10
    1c9c:	94 01       	movw	r18, r8
    1c9e:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
    1ca2:	0f 5f       	subi	r16, 0xFF	; 255
     lcd_data('3');
     lcd_fix2_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1ca4:	07 3f       	cpi	r16, 0xF7	; 247
    1ca6:	bc f3       	brlt	.-18     	; 0x1c96 <AutoCheck+0x60a>
    1ca8:	00 93 74 01 	sts	0x0174, r16
    1cac:	20 93 62 01 	sts	0x0162, r18
    1cb0:	f7 01       	movw	r30, r14
    1cb2:	31 83       	std	Z+1, r19	; 0x01
    1cb4:	42 83       	std	Z+2, r20	; 0x02
    1cb6:	53 83       	std	Z+3, r21	; 0x03
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1cb8:	07 3f       	cpi	r16, 0xF7	; 247
    1cba:	09 f0       	breq	.+2      	; 0x1cbe <AutoCheck+0x632>
    1cbc:	b9 c0       	rjmp	.+370    	; 0x1e30 <AutoCheck+0x7a4>
    1cbe:	20 36       	cpi	r18, 0x60	; 96
    1cc0:	31 05       	cpc	r19, r1
    1cc2:	41 05       	cpc	r20, r1
    1cc4:	51 05       	cpc	r21, r1
    1cc6:	08 f4       	brcc	.+2      	; 0x1cca <AutoCheck+0x63e>
    1cc8:	b3 c0       	rjmp	.+358    	; 0x1e30 <AutoCheck+0x7a4>
    1cca:	20 3f       	cpi	r18, 0xF0	; 240
    1ccc:	f5 e5       	ldi	r31, 0x55	; 85
    1cce:	3f 07       	cpc	r19, r31
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	4f 07       	cpc	r20, r31
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	5f 07       	cpc	r21, r31
    1cd8:	08 f0       	brcs	.+2      	; 0x1cdc <AutoCheck+0x650>
    1cda:	aa c0       	rjmp	.+340    	; 0x1e30 <AutoCheck+0x7a4>
        cap_found++;
    1cdc:	1f 5f       	subi	r17, 0xFF	; 255
     } else {
        cap_found = 0;		// wait for stable connection
     }
     if (cap_found > 1) {
    1cde:	12 30       	cpi	r17, 0x02	; 2
    1ce0:	09 f0       	breq	.+2      	; 0x1ce4 <AutoCheck+0x658>
    1ce2:	a7 c0       	rjmp	.+334    	; 0x1e32 <AutoCheck+0x7a6>
        // value of capacitor is correct
        (void) eeprom_write_word((uint16_t *)(&ref_offset), load_diff);	// hold zero offset + slew rate dependend offset
    1ce4:	60 91 76 01 	lds	r22, 0x0176
    1ce8:	70 91 77 01 	lds	r23, 0x0177
    1cec:	89 ec       	ldi	r24, 0xC9	; 201
    1cee:	91 e0       	ldi	r25, 0x01	; 1
    1cf0:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <__eewr_word_m168>
        lcd_clear();
    1cf4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
        lcd_fix2_string(REF_C_str);	// "REF_C="
    1cf8:	8c ef       	ldi	r24, 0xFC	; 252
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
        lcd_string(itoa(load_diff, outval, 10));	//output REF_C_KORR
    1d00:	80 91 76 01 	lds	r24, 0x0176
    1d04:	90 91 77 01 	lds	r25, 0x0177
    1d08:	6c e0       	ldi	r22, 0x0C	; 12
    1d0a:	71 e0       	ldi	r23, 0x01	; 1
    1d0c:	4a e0       	ldi	r20, 0x0A	; 10
    1d0e:	50 e0       	ldi	r21, 0x00	; 0
    1d10:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <itoa>
    1d14:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
        wait_about1s();
        }
//#######################################
#endif
  #ifdef AUTOSCALE_ADC
        ADC_PORT =  TXD_VAL;	//ADC-Port 1 to GND
    1d18:	88 e0       	ldi	r24, 0x08	; 8
    1d1a:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    1d1c:	89 e0       	ldi	r24, 0x09	; 9
    1d1e:	87 b9       	out	0x07, r24	; 7
        R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1d20:	80 e2       	ldi	r24, 0x20	; 32
    1d22:	84 b9       	out	0x04, r24	; 4
        do {
           adcmv[0] = ReadADC(TP3);
    1d24:	82 e0       	ldi	r24, 0x02	; 2
    1d26:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
        } while (adcmv[0] > 980);
    1d2a:	23 e0       	ldi	r18, 0x03	; 3
    1d2c:	85 3d       	cpi	r24, 0xD5	; 213
    1d2e:	92 07       	cpc	r25, r18
    1d30:	cc f7       	brge	.-14     	; 0x1d24 <AutoCheck+0x698>
        R_DDR = 0;		//all Pins to input 
    1d32:	14 b8       	out	0x04, r1	; 4
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1d34:	10 92 3f 01 	sts	0x013F, r1
    1d38:	10 92 3e 01 	sts	0x013E, r1
        adcmv[0] = ReadADC(TP3);  // get cap voltage with VCC reference
    1d3c:	82 e0       	ldi	r24, 0x02	; 2
    1d3e:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
    1d42:	4c 01       	movw	r8, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1d44:	81 ec       	ldi	r24, 0xC1	; 193
    1d46:	91 e0       	ldi	r25, 0x01	; 1
    1d48:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__eerd_byte_m168>
    1d4c:	99 27       	eor	r25, r25
    1d4e:	87 fd       	sbrc	r24, 7
    1d50:	90 95       	com	r25
    1d52:	20 91 44 01 	lds	r18, 0x0144
    1d56:	30 91 45 01 	lds	r19, 0x0145
    1d5a:	82 0f       	add	r24, r18
    1d5c:	93 1f       	adc	r25, r19
    1d5e:	90 93 3f 01 	sts	0x013F, r25
    1d62:	80 93 3e 01 	sts	0x013E, r24
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
    1d66:	82 e0       	ldi	r24, 0x02	; 2
    1d68:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
    1d6c:	8c 01       	movw	r16, r24
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1d6e:	10 92 3f 01 	sts	0x013F, r1
    1d72:	10 92 3e 01 	sts	0x013E, r1
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
    1d76:	82 e0       	ldi	r24, 0x02	; 2
    1d78:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
    1d7c:	5c 01       	movw	r10, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1d7e:	c0 90 44 01 	lds	r12, 0x0144
    1d82:	d0 90 45 01 	lds	r13, 0x0145
    1d86:	81 ec       	ldi	r24, 0xC1	; 193
    1d88:	91 e0       	ldi	r25, 0x01	; 1
    1d8a:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__eerd_byte_m168>
    1d8e:	99 27       	eor	r25, r25
    1d90:	87 fd       	sbrc	r24, 7
    1d92:	90 95       	com	r25
    1d94:	8c 0d       	add	r24, r12
    1d96:	9d 1d       	adc	r25, r13
    1d98:	90 93 3f 01 	sts	0x013F, r25
    1d9c:	80 93 3e 01 	sts	0x013E, r24
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1da0:	81 ec       	ldi	r24, 0xC1	; 193
    1da2:	91 e0       	ldi	r25, 0x01	; 1
    1da4:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__eerd_byte_m168>
    1da8:	e8 2e       	mov	r14, r24
        lcd_line2();
    1daa:	80 ec       	ldi	r24, 0xC0	; 192
    1dac:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_fix2_string(REF_R_str);	// "REF_R="
    1db0:	83 e0       	ldi	r24, 0x03	; 3
    1db2:	91 e0       	ldi	r25, 0x01	; 1
    1db4:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1db8:	81 ec       	ldi	r24, 0xC1	; 193
    1dba:	91 e0       	ldi	r25, 0x01	; 1
    1dbc:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__eerd_byte_m168>
        ADCconfig.U_Bandgap = ADC_internal_reference;
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
        ADCconfig.U_Bandgap = ADC_internal_reference;
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1dc0:	33 e0       	ldi	r19, 0x03	; 3
    1dc2:	f3 2e       	mov	r15, r19
    1dc4:	f8 0e       	add	r15, r24
    1dc6:	a8 0c       	add	r10, r8
    1dc8:	b9 1c       	adc	r11, r9
    1dca:	a0 1a       	sub	r10, r16
    1dcc:	b1 0a       	sbc	r11, r17
    1dce:	a0 1a       	sub	r10, r16
    1dd0:	b1 0a       	sbc	r11, r17
    1dd2:	b5 01       	movw	r22, r10
    1dd4:	88 27       	eor	r24, r24
    1dd6:	77 fd       	sbrc	r23, 7
    1dd8:	80 95       	com	r24
    1dda:	98 2f       	mov	r25, r24
    1ddc:	2e 2d       	mov	r18, r14
    1dde:	33 27       	eor	r19, r19
    1de0:	27 fd       	sbrc	r18, 7
    1de2:	30 95       	com	r19
    1de4:	2c 0d       	add	r18, r12
    1de6:	3d 1d       	adc	r19, r13
    1de8:	40 e0       	ldi	r20, 0x00	; 0
    1dea:	50 e0       	ldi	r21, 0x00	; 0
    1dec:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
    1df0:	00 0f       	add	r16, r16
    1df2:	11 1f       	adc	r17, r17
    1df4:	98 01       	movw	r18, r16
    1df6:	44 27       	eor	r20, r20
    1df8:	37 fd       	sbrc	r19, 7
    1dfa:	40 95       	com	r20
    1dfc:	54 2f       	mov	r21, r20
    1dfe:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <__divmodsi4>
        lcd_line2();
        lcd_fix2_string(REF_R_str);	// "REF_R="
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1e02:	f2 0e       	add	r15, r18
        (void) eeprom_write_byte((uint8_t *)(&RefDiff), (uint8_t)udiff2);	// hold offset for true reference Voltage
    1e04:	81 ec       	ldi	r24, 0xC1	; 193
    1e06:	91 e0       	ldi	r25, 0x01	; 1
    1e08:	6f 2d       	mov	r22, r15
    1e0a:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <__eewr_byte_m168>
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
    1e0e:	8f 2d       	mov	r24, r15
    1e10:	99 27       	eor	r25, r25
    1e12:	87 fd       	sbrc	r24, 7
    1e14:	90 95       	com	r25
    1e16:	6c e0       	ldi	r22, 0x0C	; 12
    1e18:	71 e0       	ldi	r23, 0x01	; 1
    1e1a:	4a e0       	ldi	r20, 0x0A	; 10
    1e1c:	50 e0       	ldi	r21, 0x00	; 0
    1e1e:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <itoa>
    1e22:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
  #endif
        wait_about4s();
    1e26:	80 e2       	ldi	r24, 0x20	; 32
    1e28:	93 e0       	ldi	r25, 0x03	; 3
    1e2a:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>
        break;
    1e2e:	1b c0       	rjmp	.+54     	; 0x1e66 <AutoCheck+0x7da>
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1e30:	10 e0       	ldi	r17, 0x00	; 0
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
  #endif
        wait_about4s();
        break;
     }
     lcd_line2();
    1e32:	80 ec       	ldi	r24, 0xC0	; 192
    1e34:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     DisplayValue(cap.cval,cap.cpre,'F',4);
    1e38:	60 91 62 01 	lds	r22, 0x0162
    1e3c:	70 91 63 01 	lds	r23, 0x0163
    1e40:	80 91 64 01 	lds	r24, 0x0164
    1e44:	90 91 65 01 	lds	r25, 0x0165
    1e48:	40 91 74 01 	lds	r20, 0x0174
    1e4c:	26 e4       	ldi	r18, 0x46	; 70
    1e4e:	04 e0       	ldi	r16, 0x04	; 4
    1e50:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
     wait_about200ms();			// wait additional time
    1e54:	88 e2       	ldi	r24, 0x28	; 40
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>
 wait_about2s();		//wait 2 seconds
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
    1e5c:	c3 94       	inc	r12
    1e5e:	8c 2d       	mov	r24, r12
    1e60:	80 34       	cpi	r24, 0x40	; 64
    1e62:	09 f0       	breq	.+2      	; 0x1e66 <AutoCheck+0x7da>
    1e64:	f7 ce       	rjmp	.-530    	; 0x1c54 <AutoCheck+0x5c8>
     wait_about200ms();			// wait additional time
  } // end for ww
 #endif


  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    1e66:	89 e1       	ldi	r24, 0x19	; 25
    1e68:	80 93 3c 01 	sts	0x013C, r24
  lcd_clear();
    1e6c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_line2();
    1e70:	80 ec       	ldi	r24, 0xC0	; 192
    1e72:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix2_string(VERSION_str);	//"Version ..."
    1e76:	88 ed       	ldi	r24, 0xD8	; 216
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
  lcd_line1();
    1e7e:	80 e8       	ldi	r24, 0x80	; 128
    1e80:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(ATE);		//"Selftest End"
    1e84:	84 ee       	ldi	r24, 0xE4	; 228
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        // if key is pressed, don't repeat
        break;
     }
  }
 #endif
 PartFound = PART_NONE;
    1e8c:	10 92 07 01 	sts	0x0107, r1
 wait_about1s();			//wait 1 seconds
    1e90:	88 ec       	ldi	r24, 0xC8	; 200
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>
    1e98:	03 c0       	rjmp	.+6      	; 0x1ea0 <AutoCheck+0x814>
           lcd_fix_string(RHRH);	// "RHRH"
        }
                                        //############################################
        if (tt == 4) { // Text release probes
           lcd_fix_string(RELPROBE);	// "Release Probes"
           if (AllProbesShorted() != 0) ww = MAX_REP-2;
    1e9a:	12 e0       	ldi	r17, 0x02	; 2
    1e9c:	a1 2e       	mov	r10, r17
    1e9e:	bf cd       	rjmp	.-1154   	; 0x1a1e <AutoCheck+0x392>
  }
 #endif
 PartFound = PART_NONE;
 wait_about1s();			//wait 1 seconds
#endif
 } 
    1ea0:	2e 96       	adiw	r28, 0x0e	; 14
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	cd bf       	out	0x3d, r28	; 61
    1eac:	cf 91       	pop	r28
    1eae:	df 91       	pop	r29
    1eb0:	1f 91       	pop	r17
    1eb2:	0f 91       	pop	r16
    1eb4:	ff 90       	pop	r15
    1eb6:	ef 90       	pop	r14
    1eb8:	df 90       	pop	r13
    1eba:	cf 90       	pop	r12
    1ebc:	bf 90       	pop	r11
    1ebe:	af 90       	pop	r10
    1ec0:	9f 90       	pop	r9
    1ec2:	8f 90       	pop	r8
    1ec4:	7f 90       	pop	r7
    1ec6:	6f 90       	pop	r6
    1ec8:	5f 90       	pop	r5
    1eca:	4f 90       	pop	r4
    1ecc:	3f 90       	pop	r3
    1ece:	2f 90       	pop	r2
    1ed0:	08 95       	ret

00001ed2 <main>:
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
  EMPTY_INTERRUPT(ADC_vect);
#endif

//begin of transistortester program
int main(void) {
    1ed2:	0f 93       	push	r16
    1ed4:	1f 93       	push	r17
  //switch on
  ON_DDR = (1<<ON_PIN);			// switch to output
    1ed6:	80 e4       	ldi	r24, 0x40	; 64
    1ed8:	8a b9       	out	0x0a, r24	; 10
#ifdef PULLUP_DISABLE
  ON_PORT = (1<<ON_PIN); 		// switch power on 
    1eda:	8b b9       	out	0x0b, r24	; 11
#else
  ON_PORT = (1<<ON_PIN)|(1<<RST_PIN); 	// switch power on , enable internal Pullup for Start-Pin
#endif
  uint8_t tmp;
  //ADC-Init
  ADCSRA = (1<<ADEN) | AUTO_CLOCK_DIV;	//prescaler=8 or 64 (if 8Mhz clock)
    1edc:	86 e8       	ldi	r24, 0x86	; 134
    1ede:	80 93 7a 00 	sts	0x007A, r24
// #define WDRF_HOME MCU_STATUS_REG
 #define WDRF_HOME MCUCSR
#else
 #define WDRF_HOME MCUSR
#endif
  tmp = (WDRF_HOME & (1<<WDRF));	// save Watch Dog Flag
    1ee2:	14 b7       	in	r17, 0x34	; 52
  WDRF_HOME &= ~(1<<WDRF);	 	//reset Watch Dog flag
    1ee4:	84 b7       	in	r24, 0x34	; 52
    1ee6:	87 7f       	andi	r24, 0xF7	; 247
    1ee8:	84 bf       	out	0x34, r24	; 52
  wdt_disable();			// disable Watch Dog
    1eea:	88 e1       	ldi	r24, 0x18	; 24
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	80 93 60 00 	sts	0x0060, r24
    1ef4:	10 92 60 00 	sts	0x0060, r1
    1ef8:	0f be       	out	0x3f, r0	; 63
#ifndef INHIBIT_SLEEP_MODE
  // switch off unused Parts
  PRR = (1<<PRTWI) | (1<<PRTIM0) | (1<<PRSPI) | (1<<PRUSART0);
    1efa:	86 ea       	ldi	r24, 0xA6	; 166
    1efc:	80 93 64 00 	sts	0x0064, r24
  DIDR0 = (1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D);	
    1f00:	88 e3       	ldi	r24, 0x38	; 56
    1f02:	80 93 7e 00 	sts	0x007E, r24
  TCCR2A = (0<<WGM21) | (0<<WGM20);		// Counter 2 normal mode
    1f06:	10 92 b0 00 	sts	0x00B0, r1
 #if F_CPU == 4000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (0<<CS20);	//prescaler 256, 64us @ 2MHz
  #define T2_PERIOD 64
 #endif 
 #if F_CPU >= 8000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (1<<CS20);	//prescaler 1024, 128us @ 8MHz, 64us @ 16MHz
    1f0a:	87 e0       	ldi	r24, 0x07	; 7
    1f0c:	80 93 b1 00 	sts	0x00B1, r24
  #define T2_PERIOD (1024 / (F_CPU / 1000000UL));	/* set to 128 or 64 us */
 #endif 
  sei();				// enable interrupts
    1f10:	78 94       	sei
#endif
  lcd_init();				//initialize LCD
    1f12:	0e 94 08 01 	call	0x210	; 0x210 <lcd_init>
	
//  ADC_PORT = TXD_VAL;
//  ADC_DDR = TXD_MSK;
  if(tmp) { 
    1f16:	13 ff       	sbrs	r17, 3
    1f18:	0a c0       	rjmp	.+20     	; 0x1f2e <main+0x5c>
     // check if  Watchdog-Event 
     // this happens, if the Watchdog is not reset for 2s
     // can happen, if any loop in the Program doen't finish.
     lcd_line1();
    1f1a:	80 e8       	ldi	r24, 0x80	; 128
    1f1c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     lcd_fix_string(TestTimedOut);	//Output Timeout
    1f20:	8c eb       	ldi	r24, 0xBC	; 188
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     wait_about3s();				//wait for 3 s
    1f28:	88 e5       	ldi	r24, 0x58	; 88
    1f2a:	92 e0       	ldi	r25, 0x02	; 2
    1f2c:	92 c0       	rjmp	.+292    	; 0x2052 <main+0x180>
     ON_PORT = 0;			//shut off!
//     ON_DDR = (1<<ON_PIN);		//switch to GND
     return 0;
  }
  LCDLoadCustomChar(LCD_CHAR_DIODE1);	//Custom-Character Diode symbol
    1f2e:	88 e4       	ldi	r24, 0x48	; 72
    1f30:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(DiodeIcon1);	//load Character  >|
    1f34:	89 e9       	ldi	r24, 0x99	; 153
    1f36:	91 e0       	ldi	r25, 0x01	; 1
    1f38:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_DIODE2);	//Custom-Character 
    1f3c:	80 e5       	ldi	r24, 0x50	; 80
    1f3e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(DiodeIcon2);	//load Character  |<
    1f42:	81 ea       	ldi	r24, 0xA1	; 161
    1f44:	91 e0       	ldi	r25, 0x01	; 1
    1f46:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_CAP);	//Custom-Character  Capacitor symbol
    1f4a:	88 e5       	ldi	r24, 0x58	; 88
    1f4c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(CapIcon);		//load Character  ||
    1f50:	89 ea       	ldi	r24, 0xA9	; 169
    1f52:	91 e0       	ldi	r25, 0x01	; 1
    1f54:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS1);	//Custom-Character Resistor symbol
    1f58:	88 e7       	ldi	r24, 0x78	; 120
    1f5a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(ResIcon1);		//load Character  [
    1f5e:	81 eb       	ldi	r24, 0xB1	; 177
    1f60:	91 e0       	ldi	r25, 0x01	; 1
    1f62:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS2);	//Custom-Character 
    1f66:	80 e7       	ldi	r24, 0x70	; 112
    1f68:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(ResIcon2);		//load Character  ]
    1f6c:	89 eb       	ldi	r24, 0xB9	; 185
    1f6e:	91 e0       	ldi	r25, 0x01	; 1
    1f70:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_fix_customchar>
#endif
#ifdef PULLUP_DISABLE
 #ifdef __AVR_ATmega8__
  SFIOR = (1<<PUD);		// disable Pull-Up Resistors mega8
 #else
  MCUCR = (1<<PUD);		// disable Pull-Up Resistors mega168 family
    1f74:	80 e1       	ldi	r24, 0x10	; 16
    1f76:	85 bf       	out	0x35, r24	; 53
  }
#else
  #define display_time OFF_WAIT_TIME
#endif

  empty_count = 0;
    1f78:	10 92 4a 01 	sts	0x014A, r1
  mess_count = 0;
    1f7c:	10 92 0b 01 	sts	0x010B, r1

//*****************************************************************
//Entry: if start key is pressed before shut down
start:
  PartFound = PART_NONE;	// no part found
    1f80:	10 92 07 01 	sts	0x0107, r1
  NumOfDiodes = 0;		// Number of diodes = 0
    1f84:	10 92 05 01 	sts	0x0105, r1
  PartReady = 0;
    1f88:	10 92 04 01 	sts	0x0104, r1
  PartMode = 0;
    1f8c:	10 92 06 01 	sts	0x0106, r1
  WithReference = 0;		// no precision reference voltage
    1f90:	10 92 49 01 	sts	0x0149, r1
  lcd_clear();
    1f94:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  ADC_DDR = TXD_MSK;		//activate Software-UART 
    1f98:	88 e0       	ldi	r24, 0x08	; 8
    1f9a:	87 b9       	out	0x07, r24	; 7
  ResistorsFound = 0;		// no resistors found
    1f9c:	10 92 5e 01 	sts	0x015E, r1
  cap.ca = 0;
    1fa0:	10 92 72 01 	sts	0x0172, r1
  cap.cb = 0;
    1fa4:	10 92 73 01 	sts	0x0173, r1
#ifdef WITH_UART
  uart_newline();		// start of new measurement
    1fa8:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <uart_newline>
#endif
  ADCconfig.RefFlag = 0;
    1fac:	10 92 3d 01 	sts	0x013D, r1
  Calibrate_UR();		// get Ref Voltages and Pin resistance
    1fb0:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <Calibrate_UR>
  lcd_line1();	//1. row 
    1fb4:	80 e8       	ldi	r24, 0x80	; 128
    1fb6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  
  ADCconfig.U_Bandgap = ADC_internal_reference;	// set internal reference voltage for ADC
    1fba:	81 ec       	ldi	r24, 0xC1	; 193
    1fbc:	91 e0       	ldi	r25, 0x01	; 1
    1fbe:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__eerd_byte_m168>
    1fc2:	99 27       	eor	r25, r25
    1fc4:	87 fd       	sbrc	r24, 7
    1fc6:	90 95       	com	r25
    1fc8:	20 91 44 01 	lds	r18, 0x0144
    1fcc:	30 91 45 01 	lds	r19, 0x0145
    1fd0:	82 0f       	add	r24, r18
    1fd2:	93 1f       	adc	r25, r19
    1fd4:	90 93 3f 01 	sts	0x013F, r25
    1fd8:	80 93 3e 01 	sts	0x013E, r24

#ifdef BAT_CHECK
  // Battery check is selected
  ReadADC(TPBAT);	//Dummy-Readout
    1fdc:	85 e0       	ldi	r24, 0x05	; 5
    1fde:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
  trans.uBE[0] = W5msReadADC(TPBAT); 	//with 5V reference
    1fe2:	85 e0       	ldi	r24, 0x05	; 5
    1fe4:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
    1fe8:	90 93 58 01 	sts	0x0158, r25
    1fec:	80 93 57 01 	sts	0x0157, r24
  lcd_fix_string(Bat_str);		//output: "Bat. "
    1ff0:	8d ee       	ldi	r24, 0xED	; 237
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  // display Battery voltage
  // The divisor to get the voltage in 0.01V units is ((10*33)/133) witch is about 2.4812
  // A good result can be get with multiply by 4 and divide by 10 (about 0.75%).
//  cap.cval = (trans.uBE[0]*4)/10+((BAT_OUT+5)/10); // usually output only 2 digits
//  DisplayValue(cap.cval,-2,'V',2);		// Display 2 Digits of this 10mV units
  cap.cval = (trans.uBE[0]*4)+BAT_OUT;		// usually output only 2 digits
    1ff8:	60 91 57 01 	lds	r22, 0x0157
    1ffc:	70 91 58 01 	lds	r23, 0x0158
    2000:	66 0f       	add	r22, r22
    2002:	77 1f       	adc	r23, r23
    2004:	66 0f       	add	r22, r22
    2006:	77 1f       	adc	r23, r23
    2008:	6a 56       	subi	r22, 0x6A	; 106
    200a:	7f 4f       	sbci	r23, 0xFF	; 255
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	60 93 62 01 	sts	0x0162, r22
    2014:	70 93 63 01 	sts	0x0163, r23
    2018:	80 93 64 01 	sts	0x0164, r24
    201c:	90 93 65 01 	sts	0x0165, r25
  DisplayValue(cap.cval,-3,'V',2);		// Display 2 Digits of this 10mV units
    2020:	4d ef       	ldi	r20, 0xFD	; 253
    2022:	26 e5       	ldi	r18, 0x56	; 86
    2024:	02 e0       	ldi	r16, 0x02	; 2
    2026:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
  lcd_space();
    202a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
  // less than 1.3 V only .1V difference to Warn-Level
  #define WARN_LEVEL (((unsigned long)(BAT_POOR+100)*(unsigned long)33)/133)
 #endif
 #define POOR_LEVEL (((unsigned long)(BAT_POOR)*(unsigned long)33)/133)
  // check the battery voltage
  if (trans.uBE[0] <  WARN_LEVEL) {
    202e:	80 91 57 01 	lds	r24, 0x0157
    2032:	90 91 58 01 	lds	r25, 0x0158
    2036:	26 e0       	ldi	r18, 0x06	; 6
    2038:	8a 3f       	cpi	r24, 0xFA	; 250
    203a:	92 07       	cpc	r25, r18
    203c:	a8 f4       	brcc	.+42     	; 0x2068 <main+0x196>
     //Vcc < 7,3V; show Warning 
     if(trans.uBE[0] < POOR_LEVEL) {	
    203e:	26 e0       	ldi	r18, 0x06	; 6
    2040:	83 33       	cpi	r24, 0x33	; 51
    2042:	92 07       	cpc	r25, r18
    2044:	70 f4       	brcc	.+28     	; 0x2062 <main+0x190>
        //Vcc <6,3V; no proper operation is possible
        lcd_fix_string(BatEmpty);	//Battery empty!
    2046:	8a e6       	ldi	r24, 0x6A	; 106
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        wait_about2s();
    204e:	80 e9       	ldi	r24, 0x90	; 144
    2050:	91 e0       	ldi	r25, 0x01	; 1
    2052:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>
        PORTD = 0;			//switch power off
    2056:	1b b8       	out	0x0b, r1	; 11
  }
#else
  goto start;	// POWER_OFF not selected, repeat measurement
#endif
  return 0;
}   // end main
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	1f 91       	pop	r17
    205e:	0f 91       	pop	r16
    2060:	08 95       	ret
        lcd_fix_string(BatEmpty);	//Battery empty!
        wait_about2s();
        PORTD = 0;			//switch power off
        return 0;
     }
     lcd_fix_string(BatWeak);		//Battery weak
    2062:	85 e6       	ldi	r24, 0x65	; 101
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	02 c0       	rjmp	.+4      	; 0x206c <main+0x19a>
  } else { // Battery-voltage OK
     lcd_fix_string(OK_str); 		// "OK"
    2068:	83 ef       	ldi	r24, 0xF3	; 243
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  }
#else
  lcd_fix2_string(VERSION_str);		// if no Battery check, Version .. in row 1
#endif
#ifdef WDT_enabled
  wdt_enable(WDTO_2S);		//Watchdog on
    2070:	2f e0       	ldi	r18, 0x0F	; 15
    2072:	88 e1       	ldi	r24, 0x18	; 24
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	0f b6       	in	r0, 0x3f	; 63
    2078:	f8 94       	cli
    207a:	a8 95       	wdr
    207c:	80 93 60 00 	sts	0x0060, r24
    2080:	0f be       	out	0x3f, r0	; 63
    2082:	20 93 60 00 	sts	0x0060, r18
#endif

//  wait_about1s();			// add more time for reading batterie voltage
  // begin tests
#ifdef AUTO_RH
  RefVoltage();			//compute RHmultip = f(reference voltage)
    2086:	0e 94 4d 02 	call	0x49a	; 0x49a <RefVoltage>
#endif
#if FLASHEND > 0x1fff
  if (WithReference) {
    208a:	80 91 49 01 	lds	r24, 0x0149
    208e:	88 23       	and	r24, r24
    2090:	f1 f0       	breq	.+60     	; 0x20ce <main+0x1fc>
     /* 2.5V precision reference is checked OK */
     if ((mess_count == 0) && (empty_count == 0)) {
    2092:	80 91 0b 01 	lds	r24, 0x010B
    2096:	88 23       	and	r24, r24
    2098:	d1 f4       	brne	.+52     	; 0x20ce <main+0x1fc>
    209a:	80 91 4a 01 	lds	r24, 0x014A
    209e:	88 23       	and	r24, r24
    20a0:	b1 f4       	brne	.+44     	; 0x20ce <main+0x1fc>
         /* display VCC= only first time */
         lcd_line2();
    20a2:	80 ec       	ldi	r24, 0xC0	; 192
    20a4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
         lcd_fix_string(VCC_str);		// VCC=
    20a8:	8f e2       	ldi	r24, 0x2F	; 47
    20aa:	91 e0       	ldi	r25, 0x01	; 1
    20ac:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
         DisplayValue(ADCconfig.U_AVCC,-3,'V',3);	// Display 3 Digits of this mV units
    20b0:	60 91 40 01 	lds	r22, 0x0140
    20b4:	70 91 41 01 	lds	r23, 0x0141
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	4d ef       	ldi	r20, 0xFD	; 253
    20be:	26 e5       	ldi	r18, 0x56	; 86
    20c0:	03 e0       	ldi	r16, 0x03	; 3
    20c2:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
//         lcd_space();
//         DisplayValue(RRpinMI,-1,LCD_CHAR_OMEGA,4);
         wait_about1s();
    20c6:	88 ec       	ldi	r24, 0xC8	; 200
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>
     DisplayValue(trans.uBE[1]*10,-3,'V',3);	// Display 3 Digits of this mV units
     wait_about300ms();
  }
#endif

  lcd_line2();			//LCD position row2, column 1
    20ce:	80 ec       	ldi	r24, 0xC0	; 192
    20d0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(TestRunning);		//String: testing...
    20d4:	8a e5       	ldi	r24, 0x5A	; 90
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
#ifndef DebugOut
  lcd_line2();			//LCD position row 2, column 1
    20dc:	80 ec       	ldi	r24, 0xC0	; 192
    20de:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
#endif
  EntladePins();		// discharge all capacitors!
    20e2:	0e 94 b2 01 	call	0x364	; 0x364 <EntladePins>
  if(PartFound == PART_CELL) {
    20e6:	80 91 07 01 	lds	r24, 0x0107
    20ea:	88 30       	cpi	r24, 0x08	; 8
    20ec:	39 f4       	brne	.+14     	; 0x20fc <main+0x22a>
    lcd_clear();
    20ee:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
    lcd_fix_string(Cell_str);	// display "Cell!"
    20f2:	89 e2       	ldi	r24, 0x29	; 41
    20f4:	91 e0       	ldi	r25, 0x01	; 1
    20f6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    goto end2;
    20fa:	b9 c3       	rjmp	.+1906   	; 0x286e <main+0x99c>
  }

#ifdef CHECK_CALL
  AutoCheck();			//check, if selftest should be done
    20fc:	0e 94 46 0b 	call	0x168c	; 0x168c <AutoCheck>
#endif
     
  // check all 6 combinations for the 3 pins 
//         High  Low  Tri
  CheckPins(TP1, TP2, TP3);
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	61 e0       	ldi	r22, 0x01	; 1
    2104:	42 e0       	ldi	r20, 0x02	; 2
    2106:	0e 94 ee 03 	call	0x7dc	; 0x7dc <CheckPins>
  CheckPins(TP2, TP1, TP3);
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	60 e0       	ldi	r22, 0x00	; 0
    210e:	42 e0       	ldi	r20, 0x02	; 2
    2110:	0e 94 ee 03 	call	0x7dc	; 0x7dc <CheckPins>

  CheckPins(TP1, TP3, TP2);
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	62 e0       	ldi	r22, 0x02	; 2
    2118:	41 e0       	ldi	r20, 0x01	; 1
    211a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <CheckPins>
  CheckPins(TP3, TP1, TP2);
    211e:	82 e0       	ldi	r24, 0x02	; 2
    2120:	60 e0       	ldi	r22, 0x00	; 0
    2122:	41 e0       	ldi	r20, 0x01	; 1
    2124:	0e 94 ee 03 	call	0x7dc	; 0x7dc <CheckPins>

  CheckPins(TP2, TP3, TP1);
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	62 e0       	ldi	r22, 0x02	; 2
    212c:	40 e0       	ldi	r20, 0x00	; 0
    212e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <CheckPins>
  CheckPins(TP3, TP2, TP1);
    2132:	82 e0       	ldi	r24, 0x02	; 2
    2134:	61 e0       	ldi	r22, 0x01	; 1
    2136:	40 e0       	ldi	r20, 0x00	; 0
    2138:	0e 94 ee 03 	call	0x7dc	; 0x7dc <CheckPins>
  
  //separate check if is is a capacitor
  if(((PartFound == PART_NONE) || (PartFound == PART_RESISTOR) || (PartFound == PART_DIODE)) ) {
    213c:	80 91 07 01 	lds	r24, 0x0107
    2140:	88 23       	and	r24, r24
    2142:	21 f0       	breq	.+8      	; 0x214c <main+0x27a>
    2144:	86 30       	cpi	r24, 0x06	; 6
    2146:	11 f0       	breq	.+4      	; 0x214c <main+0x27a>
    2148:	81 30       	cpi	r24, 0x01	; 1
    214a:	d9 f4       	brne	.+54     	; 0x2182 <main+0x2b0>
     EntladePins();		// discharge capacities
    214c:	0e 94 b2 01 	call	0x364	; 0x364 <EntladePins>
     //measurement of capacities in all 3 combinations
     cap.cval_max = 0;		// set max to zero
    2150:	10 92 66 01 	sts	0x0166, r1
    2154:	10 92 67 01 	sts	0x0167, r1
    2158:	10 92 68 01 	sts	0x0168, r1
    215c:	10 92 69 01 	sts	0x0169, r1
     cap.cpre_max = -12;	// set max to pF unit
    2160:	84 ef       	ldi	r24, 0xF4	; 244
    2162:	80 93 75 01 	sts	0x0175, r24
     ReadCapacity(TP3, TP1);
    2166:	82 e0       	ldi	r24, 0x02	; 2
    2168:	60 e0       	ldi	r22, 0x00	; 0
    216a:	0e 94 31 15 	call	0x2a62	; 0x2a62 <ReadCapacity>
     ReadCapacity(TP3, TP2);
    216e:	82 e0       	ldi	r24, 0x02	; 2
    2170:	61 e0       	ldi	r22, 0x01	; 1
    2172:	0e 94 31 15 	call	0x2a62	; 0x2a62 <ReadCapacity>
     ReadCapacity(TP2, TP1);
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	60 e0       	ldi	r22, 0x00	; 0
    217a:	0e 94 31 15 	call	0x2a62	; 0x2a62 <ReadCapacity>

#if FLASHEND > 0x1fff
     ReadInductance();			// measure inductance
    217e:	0e 94 4c 18 	call	0x3098	; 0x3098 <ReadInductance>
#endif
  }
  //All checks are done, output result to display
  lcd_clear();
    2182:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  if(PartFound == PART_DIODE) {
    2186:	80 91 07 01 	lds	r24, 0x0107
    218a:	81 30       	cpi	r24, 0x01	; 1
    218c:	09 f0       	breq	.+2      	; 0x2190 <main+0x2be>
    218e:	0e c1       	rjmp	.+540    	; 0x23ac <main+0x4da>
     if(NumOfDiodes == 1) {		//single Diode
    2190:	90 91 05 01 	lds	r25, 0x0105
    2194:	91 30       	cpi	r25, 0x01	; 1
    2196:	c1 f5       	brne	.+112    	; 0x2208 <main+0x336>
        lcd_fix_string(Diode);		//"Diode: "
    2198:	8f e7       	ldi	r24, 0x7F	; 127
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_fix_string(KatAn);	//"-|<-"
           lcd_testpin(diodes[0].Anode);
        }
 #else
        // the higher test pin number is right side
        if (diodes[0].Anode < diodes[0].Cathode) {
    21a0:	90 91 78 01 	lds	r25, 0x0178
    21a4:	80 91 79 01 	lds	r24, 0x0179
    21a8:	98 17       	cp	r25, r24
    21aa:	50 f4       	brcc	.+20     	; 0x21c0 <main+0x2ee>
           lcd_testpin(diodes[0].Anode);
    21ac:	89 2f       	mov	r24, r25
    21ae:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    21b2:	85 e4       	ldi	r24, 0x45	; 69
    21b4:	91 e0       	ldi	r25, 0x01	; 1
    21b6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[0].Cathode);
    21ba:	80 91 79 01 	lds	r24, 0x0179
    21be:	08 c0       	rjmp	.+16     	; 0x21d0 <main+0x2fe>
        } else {
           lcd_testpin(diodes[0].Cathode);
    21c0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    21c4:	89 e4       	ldi	r24, 0x49	; 73
    21c6:	91 e0       	ldi	r25, 0x01	; 1
    21c8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    21cc:	80 91 78 01 	lds	r24, 0x0178
    21d0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
        // too less memory to sort the pins
        lcd_testpin(diodes[0].Anode);
        lcd_fix_string(AnKat);		//"->|-"
        lcd_testpin(diodes[0].Cathode);
#endif
        UfAusgabe(0x70);
    21d4:	80 e7       	ldi	r24, 0x70	; 112
    21d6:	0e 94 9c 03 	call	0x738	; 0x738 <UfAusgabe>
        lcd_fix_string(GateCap_str);	//"C="
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	91 e0       	ldi	r25, 0x01	; 1
    21de:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        ReadCapacity(diodes[0].Cathode,diodes[0].Anode);	// Capacity opposite flow direction
    21e2:	80 91 79 01 	lds	r24, 0x0179
    21e6:	60 91 78 01 	lds	r22, 0x0178
    21ea:	0e 94 31 15 	call	0x2a62	; 0x2a62 <ReadCapacity>
        DisplayValue(cap.cval,cap.cpre,'F',3);
    21ee:	60 91 62 01 	lds	r22, 0x0162
    21f2:	70 91 63 01 	lds	r23, 0x0163
    21f6:	80 91 64 01 	lds	r24, 0x0164
    21fa:	90 91 65 01 	lds	r25, 0x0165
    21fe:	40 91 74 01 	lds	r20, 0x0174
    2202:	26 e4       	ldi	r18, 0x46	; 70
    2204:	03 e0       	ldi	r16, 0x03	; 3
    2206:	51 c1       	rjmp	.+674    	; 0x24aa <main+0x5d8>
        goto end;
     } else if(NumOfDiodes == 2) { // double diode
    2208:	92 30       	cpi	r25, 0x02	; 2
    220a:	09 f0       	breq	.+2      	; 0x220e <main+0x33c>
    220c:	4c c0       	rjmp	.+152    	; 0x22a6 <main+0x3d4>
        lcd_data('2');
    220e:	82 e3       	ldi	r24, 0x32	; 50
    2210:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
        lcd_fix_string(Dioden);		//"diodes "
    2214:	8d e4       	ldi	r24, 0x4D	; 77
    2216:	91 e0       	ldi	r25, 0x01	; 1
    2218:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        if(diodes[0].Anode == diodes[1].Anode) { //Common Anode
    221c:	90 91 78 01 	lds	r25, 0x0178
    2220:	20 91 7c 01 	lds	r18, 0x017C
    2224:	92 17       	cp	r25, r18
    2226:	59 f4       	brne	.+22     	; 0x223e <main+0x36c>
           lcd_testpin(diodes[0].Cathode);
    2228:	80 91 79 01 	lds	r24, 0x0179
    222c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    2230:	89 e4       	ldi	r24, 0x49	; 73
    2232:	91 e0       	ldi	r25, 0x01	; 1
    2234:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    2238:	80 91 78 01 	lds	r24, 0x0178
    223c:	2b c0       	rjmp	.+86     	; 0x2294 <main+0x3c2>
           lcd_fix_string(AnKat);	//"->|-"
           lcd_testpin(diodes[1].Cathode);
           UfAusgabe(0x01);
           goto end;
        } else if(diodes[0].Cathode == diodes[1].Cathode) { //Common Cathode
    223e:	30 91 79 01 	lds	r19, 0x0179
    2242:	80 91 7d 01 	lds	r24, 0x017D
    2246:	38 17       	cp	r19, r24
    2248:	b9 f4       	brne	.+46     	; 0x2278 <main+0x3a6>
           lcd_testpin(diodes[0].Anode);
    224a:	89 2f       	mov	r24, r25
    224c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2250:	85 e4       	ldi	r24, 0x45	; 69
    2252:	91 e0       	ldi	r25, 0x01	; 1
    2254:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
	   lcd_testpin(diodes[0].Cathode);
    2258:	80 91 79 01 	lds	r24, 0x0179
    225c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    2260:	89 e4       	ldi	r24, 0x49	; 73
    2262:	91 e0       	ldi	r25, 0x01	; 1
    2264:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[1].Anode);
    2268:	80 91 7c 01 	lds	r24, 0x017C
    226c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           UfAusgabe(0x01);
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	0e 94 9c 03 	call	0x738	; 0x738 <UfAusgabe>
           goto end;
    2276:	f4 c2       	rjmp	.+1512   	; 0x2860 <main+0x98e>
          }
        else if ((diodes[0].Cathode == diodes[1].Anode) && (diodes[1].Cathode == diodes[0].Anode)) {
    2278:	32 17       	cp	r19, r18
    227a:	09 f0       	breq	.+2      	; 0x227e <main+0x3ac>
    227c:	bf c2       	rjmp	.+1406   	; 0x27fc <main+0x92a>
    227e:	89 17       	cp	r24, r25
    2280:	09 f0       	breq	.+2      	; 0x2284 <main+0x3b2>
    2282:	bc c2       	rjmp	.+1400   	; 0x27fc <main+0x92a>
           //Antiparallel
           lcd_testpin(diodes[0].Anode);
    2284:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2288:	85 e4       	ldi	r24, 0x45	; 69
    228a:	91 e0       	ldi	r25, 0x01	; 1
    228c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[0].Cathode);
    2290:	80 91 79 01 	lds	r24, 0x0179
    2294:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2298:	85 e4       	ldi	r24, 0x45	; 69
    229a:	91 e0       	ldi	r25, 0x01	; 1
    229c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[1].Cathode);
    22a0:	80 91 7d 01 	lds	r24, 0x017D
    22a4:	e3 cf       	rjmp	.-58     	; 0x226c <main+0x39a>
           UfAusgabe(0x01);
           goto end;
        }
     } else if(NumOfDiodes == 3) {
    22a6:	93 30       	cpi	r25, 0x03	; 3
    22a8:	09 f0       	breq	.+2      	; 0x22ac <main+0x3da>
    22aa:	a8 c2       	rjmp	.+1360   	; 0x27fc <main+0x92a>
        //Serial of 2 Diodes; was detected as 3 Diodes 
        trans.b = 3;
    22ac:	90 93 5b 01 	sts	0x015B, r25
        trans.c = 3;
    22b0:	90 93 5c 01 	sts	0x015C, r25
        /* Check for any constallation of 2 serial diodes:
          Only once the pin No of anyone Cathode is identical of another anode.
          two diodes in series is additionally detected as third big diode.
        */
        if(diodes[0].Cathode == diodes[1].Anode)
    22b4:	50 91 79 01 	lds	r21, 0x0179
    22b8:	90 91 7c 01 	lds	r25, 0x017C
    22bc:	59 17       	cp	r21, r25
    22be:	21 f4       	brne	.+8      	; 0x22c8 <main+0x3f6>
          {
           trans.b = 0;
    22c0:	10 92 5b 01 	sts	0x015B, r1
           trans.c = 1;
    22c4:	80 93 5c 01 	sts	0x015C, r24
          }
        if(diodes[0].Anode == diodes[1].Cathode)
    22c8:	40 91 78 01 	lds	r20, 0x0178
    22cc:	30 91 7d 01 	lds	r19, 0x017D
    22d0:	43 17       	cp	r20, r19
    22d2:	29 f4       	brne	.+10     	; 0x22de <main+0x40c>
          {
           trans.b = 1;
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	80 93 5b 01 	sts	0x015B, r24
           trans.c = 0;
    22da:	10 92 5c 01 	sts	0x015C, r1
          }
        if(diodes[0].Cathode == diodes[2].Anode)
    22de:	20 91 80 01 	lds	r18, 0x0180
    22e2:	52 17       	cp	r21, r18
    22e4:	29 f4       	brne	.+10     	; 0x22f0 <main+0x41e>
          {
           trans.b = 0;
    22e6:	10 92 5b 01 	sts	0x015B, r1
           trans.c = 2;
    22ea:	82 e0       	ldi	r24, 0x02	; 2
    22ec:	80 93 5c 01 	sts	0x015C, r24
          }
        if(diodes[0].Anode == diodes[2].Cathode)
    22f0:	80 91 81 01 	lds	r24, 0x0181
    22f4:	48 17       	cp	r20, r24
    22f6:	29 f4       	brne	.+10     	; 0x2302 <main+0x430>
          {
           trans.b = 2;
    22f8:	42 e0       	ldi	r20, 0x02	; 2
    22fa:	40 93 5b 01 	sts	0x015B, r20
           trans.c = 0;
    22fe:	10 92 5c 01 	sts	0x015C, r1
          }
        if(diodes[1].Cathode == diodes[2].Anode)
    2302:	32 17       	cp	r19, r18
    2304:	31 f4       	brne	.+12     	; 0x2312 <main+0x440>
          {
           trans.b = 1;
    2306:	21 e0       	ldi	r18, 0x01	; 1
    2308:	20 93 5b 01 	sts	0x015B, r18
           trans.c = 2;
    230c:	22 e0       	ldi	r18, 0x02	; 2
    230e:	20 93 5c 01 	sts	0x015C, r18
          }
        if(diodes[1].Anode == diodes[2].Cathode)
    2312:	98 17       	cp	r25, r24
    2314:	31 f4       	brne	.+12     	; 0x2322 <main+0x450>
          {
           trans.b = 2;
    2316:	82 e0       	ldi	r24, 0x02	; 2
    2318:	80 93 5b 01 	sts	0x015B, r24
           trans.c = 1;
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	80 93 5c 01 	sts	0x015C, r24
        lcd_testpin(diodes[2].Cathode);
        lcd_space();
        lcd_string(utoa(diodes[2].Voltage, outval, 10));
        lcd_line1();
#endif
        if((trans.b<3) && (trans.c<3)) {
    2322:	80 91 5b 01 	lds	r24, 0x015B
    2326:	83 30       	cpi	r24, 0x03	; 3
    2328:	08 f0       	brcs	.+2      	; 0x232c <main+0x45a>
    232a:	68 c2       	rjmp	.+1232   	; 0x27fc <main+0x92a>
    232c:	80 91 5c 01 	lds	r24, 0x015C
    2330:	83 30       	cpi	r24, 0x03	; 3
    2332:	08 f0       	brcs	.+2      	; 0x2336 <main+0x464>
    2334:	63 c2       	rjmp	.+1222   	; 0x27fc <main+0x92a>
           lcd_data('3');
    2336:	83 e3       	ldi	r24, 0x33	; 51
    2338:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
           lcd_fix_string(Dioden);	//"Diodes "
    233c:	8d e4       	ldi	r24, 0x4D	; 77
    233e:	91 e0       	ldi	r25, 0x01	; 1
    2340:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Anode);
    2344:	e0 91 5b 01 	lds	r30, 0x015B
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	ee 0f       	add	r30, r30
    234c:	ff 1f       	adc	r31, r31
    234e:	ee 0f       	add	r30, r30
    2350:	ff 1f       	adc	r31, r31
    2352:	e8 58       	subi	r30, 0x88	; 136
    2354:	fe 4f       	sbci	r31, 0xFE	; 254
    2356:	80 81       	ld	r24, Z
    2358:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    235c:	85 e4       	ldi	r24, 0x45	; 69
    235e:	91 e0       	ldi	r25, 0x01	; 1
    2360:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Cathode);
    2364:	e0 91 5b 01 	lds	r30, 0x015B
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	ee 0f       	add	r30, r30
    236c:	ff 1f       	adc	r31, r31
    236e:	ee 0f       	add	r30, r30
    2370:	ff 1f       	adc	r31, r31
    2372:	e8 58       	subi	r30, 0x88	; 136
    2374:	fe 4f       	sbci	r31, 0xFE	; 254
    2376:	81 81       	ldd	r24, Z+1	; 0x01
    2378:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    237c:	85 e4       	ldi	r24, 0x45	; 69
    237e:	91 e0       	ldi	r25, 0x01	; 1
    2380:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[trans.c].Cathode);
    2384:	e0 91 5c 01 	lds	r30, 0x015C
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	ee 0f       	add	r30, r30
    238c:	ff 1f       	adc	r31, r31
    238e:	ee 0f       	add	r30, r30
    2390:	ff 1f       	adc	r31, r31
    2392:	e8 58       	subi	r30, 0x88	; 136
    2394:	fe 4f       	sbci	r31, 0xFE	; 254
    2396:	81 81       	ldd	r24, Z+1	; 0x01
    2398:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           UfAusgabe( (trans.b<<4)|trans.c);
    239c:	80 91 5b 01 	lds	r24, 0x015B
    23a0:	82 95       	swap	r24
    23a2:	80 7f       	andi	r24, 0xF0	; 240
    23a4:	90 91 5c 01 	lds	r25, 0x015C
    23a8:	89 2b       	or	r24, r25
    23aa:	63 cf       	rjmp	.-314    	; 0x2272 <main+0x3a0>
           goto end;
        }
     }
     // end (PartFound == PART_DIODE)
  } else if (PartFound == PART_TRANSISTOR) {
    23ac:	82 30       	cpi	r24, 0x02	; 2
    23ae:	09 f0       	breq	.+2      	; 0x23b2 <main+0x4e0>
    23b0:	7f c0       	rjmp	.+254    	; 0x24b0 <main+0x5de>
    if(PartReady != 0) {
    23b2:	80 91 04 01 	lds	r24, 0x0104
    23b6:	88 23       	and	r24, r24
    23b8:	71 f1       	breq	.+92     	; 0x2416 <main+0x544>
       if((trans.hfe[0]>trans.hfe[1])) {
    23ba:	80 91 53 01 	lds	r24, 0x0153
    23be:	90 91 54 01 	lds	r25, 0x0154
    23c2:	a0 91 55 01 	lds	r26, 0x0155
    23c6:	b0 91 56 01 	lds	r27, 0x0156
    23ca:	20 91 4f 01 	lds	r18, 0x014F
    23ce:	30 91 50 01 	lds	r19, 0x0150
    23d2:	40 91 51 01 	lds	r20, 0x0151
    23d6:	50 91 52 01 	lds	r21, 0x0152
    23da:	82 17       	cp	r24, r18
    23dc:	93 07       	cpc	r25, r19
    23de:	a4 07       	cpc	r26, r20
    23e0:	b5 07       	cpc	r27, r21
    23e2:	48 f4       	brcc	.+18     	; 0x23f6 <main+0x524>
          //if the amplification factor was higher at first testr: swap C and E !
          tmp = trans.c;
    23e4:	80 91 5c 01 	lds	r24, 0x015C
          trans.c = trans.e;
    23e8:	90 91 5d 01 	lds	r25, 0x015D
    23ec:	90 93 5c 01 	sts	0x015C, r25
          trans.e = tmp;
    23f0:	80 93 5d 01 	sts	0x015D, r24
    23f4:	10 c0       	rjmp	.+32     	; 0x2416 <main+0x544>
       } else {
          trans.hfe[0] = trans.hfe[1];
    23f6:	80 93 4f 01 	sts	0x014F, r24
    23fa:	90 93 50 01 	sts	0x0150, r25
    23fe:	a0 93 51 01 	sts	0x0151, r26
    2402:	b0 93 52 01 	sts	0x0152, r27
          trans.uBE[0] = trans.uBE[1];
    2406:	80 91 59 01 	lds	r24, 0x0159
    240a:	90 91 5a 01 	lds	r25, 0x015A
    240e:	90 93 58 01 	sts	0x0158, r25
    2412:	80 93 57 01 	sts	0x0157, r24
       }
    }

    if(PartMode == PART_MODE_NPN) {
    2416:	80 91 06 01 	lds	r24, 0x0106
    241a:	81 30       	cpi	r24, 0x01	; 1
    241c:	19 f4       	brne	.+6      	; 0x2424 <main+0x552>
       lcd_fix_string(NPN_str);		//"NPN "
    241e:	86 e0       	ldi	r24, 0x06	; 6
    2420:	91 e0       	ldi	r25, 0x01	; 1
    2422:	02 c0       	rjmp	.+4      	; 0x2428 <main+0x556>
    } else {
       lcd_fix_string(PNP_str);		//"PNP "
    2424:	8b e0       	ldi	r24, 0x0B	; 11
    2426:	91 e0       	ldi	r25, 0x01	; 1
    2428:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    }
    if( NumOfDiodes > 2) {	//Transistor with protection diode
    242c:	80 91 05 01 	lds	r24, 0x0105
    2430:	83 30       	cpi	r24, 0x03	; 3
    2432:	a0 f0       	brcs	.+40     	; 0x245c <main+0x58a>
       // Layout with EBC= style
       if(PartMode == PART_MODE_NPN)
 #endif
#else
       // Layout with 123= style
       if (((PartMode == PART_MODE_NPN) && (trans.c > trans.e)) || ((PartMode != PART_MODE_NPN) && (trans.c < trans.e)))
    2434:	20 91 06 01 	lds	r18, 0x0106
    2438:	90 91 5c 01 	lds	r25, 0x015C
    243c:	80 91 5d 01 	lds	r24, 0x015D
    2440:	21 30       	cpi	r18, 0x01	; 1
    2442:	19 f4       	brne	.+6      	; 0x244a <main+0x578>
    2444:	89 17       	cp	r24, r25
    2446:	18 f0       	brcs	.+6      	; 0x244e <main+0x57c>
    2448:	05 c0       	rjmp	.+10     	; 0x2454 <main+0x582>
    244a:	98 17       	cp	r25, r24
    244c:	18 f4       	brcc	.+6      	; 0x2454 <main+0x582>
#endif
       {
          lcd_fix_string(AnKat);	//"->|-"
    244e:	85 e4       	ldi	r24, 0x45	; 69
    2450:	91 e0       	ldi	r25, 0x01	; 1
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <main+0x586>
       } else {
          lcd_fix_string(KatAn);	//"-|<-"
    2454:	89 e4       	ldi	r24, 0x49	; 73
    2456:	91 e0       	ldi	r25, 0x01	; 1
    2458:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
       }
    }
    PinLayout('E','B','C'); 		//  EBC= or 123=...
    245c:	85 e4       	ldi	r24, 0x45	; 69
    245e:	62 e4       	ldi	r22, 0x42	; 66
    2460:	43 e4       	ldi	r20, 0x43	; 67
    2462:	0e 94 c5 0a 	call	0x158a	; 0x158a <PinLayout>
    lcd_line2(); //2. row 
    2466:	80 ec       	ldi	r24, 0xC0	; 192
    2468:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
    lcd_fix_string(hfe_str);		//"B="  (hFE)
    246c:	83 e0       	ldi	r24, 0x03	; 3
    246e:	91 e0       	ldi	r25, 0x01	; 1
    2470:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    DisplayValue(trans.hfe[0],0,0,3);
    2474:	60 91 4f 01 	lds	r22, 0x014F
    2478:	70 91 50 01 	lds	r23, 0x0150
    247c:	80 91 51 01 	lds	r24, 0x0151
    2480:	90 91 52 01 	lds	r25, 0x0152
    2484:	40 e0       	ldi	r20, 0x00	; 0
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	03 e0       	ldi	r16, 0x03	; 3
    248a:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
    lcd_space();
    248e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>

    lcd_fix_string(Uf_str);		//"Uf="
    2492:	86 e1       	ldi	r24, 0x16	; 22
    2494:	91 e0       	ldi	r25, 0x01	; 1
    2496:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    DisplayValue(trans.uBE[0],-3,'V',3);
    249a:	60 91 57 01 	lds	r22, 0x0157
    249e:	70 91 58 01 	lds	r23, 0x0158
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	4d ef       	ldi	r20, 0xFD	; 253
    24a8:	26 e5       	ldi	r18, 0x56	; 86
    24aa:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
    goto end;
    24ae:	d8 c1       	rjmp	.+944    	; 0x2860 <main+0x98e>
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    24b0:	83 30       	cpi	r24, 0x03	; 3
    24b2:	09 f0       	breq	.+2      	; 0x24b6 <main+0x5e4>
    24b4:	7f c0       	rjmp	.+254    	; 0x25b4 <main+0x6e2>
    if(PartMode&1) {
    24b6:	80 91 06 01 	lds	r24, 0x0106
    24ba:	80 ff       	sbrs	r24, 0
    24bc:	02 c0       	rjmp	.+4      	; 0x24c2 <main+0x5f0>
       lcd_data('P');			//P-channel
    24be:	80 e5       	ldi	r24, 0x50	; 80
    24c0:	01 c0       	rjmp	.+2      	; 0x24c4 <main+0x5f2>
    } else {
       lcd_data('N');			//N-channel
    24c2:	8e e4       	ldi	r24, 0x4E	; 78
    24c4:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
    }
    lcd_data('-');
    24c8:	8d e2       	ldi	r24, 0x2D	; 45
    24ca:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>

    tmp = PartMode/2;
    24ce:	80 91 06 01 	lds	r24, 0x0106
    24d2:	86 95       	lsr	r24
    if (tmp == (PART_MODE_N_D_MOS/2)) {
    24d4:	82 30       	cpi	r24, 0x02	; 2
    24d6:	11 f4       	brne	.+4      	; 0x24dc <main+0x60a>
       lcd_data('D');			// N-D
    24d8:	84 e4       	ldi	r24, 0x44	; 68
    24da:	03 c0       	rjmp	.+6      	; 0x24e2 <main+0x610>
    }
    if (tmp == (PART_MODE_N_E_MOS/2)) {
    24dc:	81 30       	cpi	r24, 0x01	; 1
    24de:	21 f4       	brne	.+8      	; 0x24e8 <main+0x616>
       lcd_data('E');			// N-E
    24e0:	85 e4       	ldi	r24, 0x45	; 69
    24e2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
    24e6:	05 c0       	rjmp	.+10     	; 0x24f2 <main+0x620>
    }
    if (tmp == (PART_MODE_N_JFET/2)) {
    24e8:	83 30       	cpi	r24, 0x03	; 3
    24ea:	19 f4       	brne	.+6      	; 0x24f2 <main+0x620>
       lcd_fix_string(jfet_str);	//"JFET"
    24ec:	8b ef       	ldi	r24, 0xFB	; 251
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	02 c0       	rjmp	.+4      	; 0x24f6 <main+0x624>
    } else {
       lcd_fix_string(mosfet_str);	//"-MOS "
    24f2:	86 ef       	ldi	r24, 0xF6	; 246
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    }
    PinLayout('S','G','D'); 		//  SGD= or 123=...
    24fa:	83 e5       	ldi	r24, 0x53	; 83
    24fc:	67 e4       	ldi	r22, 0x47	; 71
    24fe:	44 e4       	ldi	r20, 0x44	; 68
    2500:	0e 94 c5 0a 	call	0x158a	; 0x158a <PinLayout>
    if((NumOfDiodes > 0) && (PartMode < PART_MODE_N_D_MOS)) {
    2504:	80 91 05 01 	lds	r24, 0x0105
    2508:	88 23       	and	r24, r24
    250a:	a1 f0       	breq	.+40     	; 0x2534 <main+0x662>
    250c:	20 91 06 01 	lds	r18, 0x0106
    2510:	24 30       	cpi	r18, 0x04	; 4
    2512:	80 f4       	brcc	.+32     	; 0x2534 <main+0x662>
    2514:	90 91 5c 01 	lds	r25, 0x015C
    2518:	80 91 5d 01 	lds	r24, 0x015D
       // Layout with SGD= style
       if (PartMode&1) /* N or P MOS */
 #endif
#else
       // layout with 123= style
       if (((PartMode&1) && (trans.c < trans.e)) || ((!(PartMode&1)) && (trans.c > trans.e)))
    251c:	20 ff       	sbrs	r18, 0
    251e:	03 c0       	rjmp	.+6      	; 0x2526 <main+0x654>
    2520:	98 17       	cp	r25, r24
    2522:	18 f0       	brcs	.+6      	; 0x252a <main+0x658>
    2524:	04 c0       	rjmp	.+8      	; 0x252e <main+0x65c>
    2526:	89 17       	cp	r24, r25
    2528:	10 f4       	brcc	.+4      	; 0x252e <main+0x65c>
#endif
       {
          lcd_data(LCD_CHAR_DIODE1);	//show Diode symbol >|
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	01 c0       	rjmp	.+2      	; 0x2530 <main+0x65e>
       } else {
          lcd_data(LCD_CHAR_DIODE2);	//show Diode symbol |<
    252e:	82 e0       	ldi	r24, 0x02	; 2
    2530:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       }
    }
    lcd_line2();			//2. Row
    2534:	80 ec       	ldi	r24, 0xC0	; 192
    2536:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
    if(PartMode < PART_MODE_N_D_MOS) {	//enhancement-MOSFET
    253a:	80 91 06 01 	lds	r24, 0x0106
    253e:	84 30       	cpi	r24, 0x04	; 4
    2540:	d8 f4       	brcc	.+54     	; 0x2578 <main+0x6a6>
	//Gate capacity
       lcd_fix_string(GateCap_str);		//"C="
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	91 e0       	ldi	r25, 0x01	; 1
    2546:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
       ReadCapacity(trans.b,trans.e);	//measure capacity
    254a:	80 91 5b 01 	lds	r24, 0x015B
    254e:	60 91 5d 01 	lds	r22, 0x015D
    2552:	0e 94 31 15 	call	0x2a62	; 0x2a62 <ReadCapacity>
       DisplayValue(cap.cval,cap.cpre,'F',3);
    2556:	60 91 62 01 	lds	r22, 0x0162
    255a:	70 91 63 01 	lds	r23, 0x0163
    255e:	80 91 64 01 	lds	r24, 0x0164
    2562:	90 91 65 01 	lds	r25, 0x0165
    2566:	40 91 74 01 	lds	r20, 0x0174
    256a:	26 e4       	ldi	r18, 0x46	; 70
    256c:	03 e0       	ldi	r16, 0x03	; 3
    256e:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
       lcd_fix_string(vt_str);		// "Vt="
    2572:	8a e1       	ldi	r24, 0x1A	; 26
    2574:	91 e0       	ldi	r25, 0x01	; 1
    2576:	13 c0       	rjmp	.+38     	; 0x259e <main+0x6cc>
    } else {
       lcd_data('I');
    2578:	89 e4       	ldi	r24, 0x49	; 73
    257a:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       lcd_data('=');
    257e:	8d e3       	ldi	r24, 0x3D	; 61
    2580:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       DisplayValue(trans.uBE[1],-5,'A',2);
    2584:	60 91 59 01 	lds	r22, 0x0159
    2588:	70 91 5a 01 	lds	r23, 0x015A
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	4b ef       	ldi	r20, 0xFB	; 251
    2592:	21 e4       	ldi	r18, 0x41	; 65
    2594:	02 e0       	ldi	r16, 0x02	; 2
    2596:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
       lcd_fix_string(Vgs_str);		// " Vgs="
    259a:	8f e1       	ldi	r24, 0x1F	; 31
    259c:	91 e0       	ldi	r25, 0x01	; 1
    259e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    }
    //Gate-threshold voltage
    DisplayValue(gthvoltage,-3,'V',3);
    25a2:	60 91 5f 01 	lds	r22, 0x015F
    25a6:	70 91 60 01 	lds	r23, 0x0160
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	4d ef       	ldi	r20, 0xFD	; 253
    25b0:	26 e5       	ldi	r18, 0x56	; 86
    25b2:	28 ce       	rjmp	.-944    	; 0x2204 <main+0x332>
    goto end;
    // end (PartFound == PART_FET)
  } else if (PartFound == PART_THYRISTOR) {
    25b4:	85 30       	cpi	r24, 0x05	; 5
    25b6:	19 f4       	brne	.+6      	; 0x25be <main+0x6ec>
    lcd_fix_string(Thyristor);		//"Thyristor"
    25b8:	8d e8       	ldi	r24, 0x8D	; 141
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	04 c0       	rjmp	.+8      	; 0x25c6 <main+0x6f4>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    25be:	84 30       	cpi	r24, 0x04	; 4
    25c0:	69 f4       	brne	.+26     	; 0x25dc <main+0x70a>
    lcd_fix_string(Triac);		//"Triac"
    25c2:	87 e8       	ldi	r24, 0x87	; 135
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  mess_count = 0;
  goto end2;


gakAusgabe:
  lcd_line2(); //2. row 
    25ca:	80 ec       	ldi	r24, 0xC0	; 192
    25cc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  PinLayout(Cathode_char,'G','A'); 	// CGA= or 123=...
    25d0:	83 e4       	ldi	r24, 0x43	; 67
    25d2:	67 e4       	ldi	r22, 0x47	; 71
    25d4:	41 e4       	ldi	r20, 0x41	; 65
    25d6:	0e 94 c5 0a 	call	0x158a	; 0x158a <PinLayout>
    25da:	42 c1       	rjmp	.+644    	; 0x2860 <main+0x98e>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    lcd_fix_string(Triac);		//"Triac"
    goto gakAusgabe;
  }
  else if(PartFound == PART_RESISTOR) {
    25dc:	86 30       	cpi	r24, 0x06	; 6
    25de:	09 f0       	breq	.+2      	; 0x25e2 <main+0x710>
    25e0:	b9 c0       	rjmp	.+370    	; 0x2754 <main+0x882>
    if (ResistorsFound == 1) { // single resistor
    25e2:	60 91 5e 01 	lds	r22, 0x015E
    25e6:	61 30       	cpi	r22, 0x01	; 1
    25e8:	69 f4       	brne	.+26     	; 0x2604 <main+0x732>
       lcd_testpin(resis[0].rb);  	//Pin-number 1
    25ea:	80 91 22 01 	lds	r24, 0x0122
    25ee:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
       lcd_fix_string(Resistor_str);
    25f2:	82 e5       	ldi	r24, 0x52	; 82
    25f4:	91 e0       	ldi	r25, 0x01	; 1
    25f6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
       lcd_testpin(resis[0].ra);		//Pin-number 2
    25fa:	80 91 21 01 	lds	r24, 0x0121
    25fe:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
    2602:	61 c0       	rjmp	.+194    	; 0x26c6 <main+0x7f4>
    } else { // R-Max suchen
       ii = 0;
    2604:	10 92 4b 01 	sts	0x014B, r1
       if (resis[1].rx > resis[0].rx)
    2608:	20 91 24 01 	lds	r18, 0x0124
    260c:	30 91 25 01 	lds	r19, 0x0125
    2610:	40 91 26 01 	lds	r20, 0x0126
    2614:	50 91 27 01 	lds	r21, 0x0127
    2618:	80 91 18 01 	lds	r24, 0x0118
    261c:	90 91 19 01 	lds	r25, 0x0119
    2620:	a0 91 1a 01 	lds	r26, 0x011A
    2624:	b0 91 1b 01 	lds	r27, 0x011B
    2628:	82 17       	cp	r24, r18
    262a:	93 07       	cpc	r25, r19
    262c:	a4 07       	cpc	r26, r20
    262e:	b5 07       	cpc	r27, r21
    2630:	18 f4       	brcc	.+6      	; 0x2638 <main+0x766>
          ii = 1;
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	80 93 4b 01 	sts	0x014B, r24
       if (ResistorsFound == 2) {
    2638:	62 30       	cpi	r22, 0x02	; 2
    263a:	19 f4       	brne	.+6      	; 0x2642 <main+0x770>
          ii = 2;
    263c:	60 93 4b 01 	sts	0x014B, r22
    2640:	22 c0       	rjmp	.+68     	; 0x2686 <main+0x7b4>
       } else {
          if (resis[2].rx > resis[ii].rx) {
    2642:	80 91 4b 01 	lds	r24, 0x014B
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	fc 01       	movw	r30, r24
    264a:	ee 0f       	add	r30, r30
    264c:	ff 1f       	adc	r31, r31
    264e:	e8 0f       	add	r30, r24
    2650:	f9 1f       	adc	r31, r25
    2652:	ee 0f       	add	r30, r30
    2654:	ff 1f       	adc	r31, r31
    2656:	ee 0f       	add	r30, r30
    2658:	ff 1f       	adc	r31, r31
    265a:	e8 5e       	subi	r30, 0xE8	; 232
    265c:	fe 4f       	sbci	r31, 0xFE	; 254
    265e:	20 91 30 01 	lds	r18, 0x0130
    2662:	30 91 31 01 	lds	r19, 0x0131
    2666:	40 91 32 01 	lds	r20, 0x0132
    266a:	50 91 33 01 	lds	r21, 0x0133
    266e:	80 81       	ld	r24, Z
    2670:	91 81       	ldd	r25, Z+1	; 0x01
    2672:	a2 81       	ldd	r26, Z+2	; 0x02
    2674:	b3 81       	ldd	r27, Z+3	; 0x03
    2676:	82 17       	cp	r24, r18
    2678:	93 07       	cpc	r25, r19
    267a:	a4 07       	cpc	r26, r20
    267c:	b5 07       	cpc	r27, r21
    267e:	18 f4       	brcc	.+6      	; 0x2686 <main+0x7b4>
             ii = 2;
    2680:	82 e0       	ldi	r24, 0x02	; 2
    2682:	80 93 4b 01 	sts	0x014B, r24
       }
       char x = '1';
       char y = '3';
       char z = '2';
   
       if (ii == 1) {
    2686:	80 91 4b 01 	lds	r24, 0x014B
    268a:	81 30       	cpi	r24, 0x01	; 1
    268c:	29 f0       	breq	.+10     	; 0x2698 <main+0x7c6>
          // x = '1';
          y = '2';
          z = '3';
       }
       if (ii == 2) {
    268e:	82 30       	cpi	r24, 0x02	; 2
    2690:	39 f0       	breq	.+14     	; 0x26a0 <main+0x7ce>
             ii = 2;
          }
       }
       char x = '1';
       char y = '3';
       char z = '2';
    2692:	12 e3       	ldi	r17, 0x32	; 50
          if (resis[2].rx > resis[ii].rx) {
             ii = 2;
          }
       }
       char x = '1';
       char y = '3';
    2694:	03 e3       	ldi	r16, 0x33	; 51
    2696:	02 c0       	rjmp	.+4      	; 0x269c <main+0x7ca>
       char z = '2';
   
       if (ii == 1) {
          // x = '1';
          y = '2';
          z = '3';
    2698:	13 e3       	ldi	r17, 0x33	; 51
       char y = '3';
       char z = '2';
   
       if (ii == 1) {
          // x = '1';
          y = '2';
    269a:	02 e3       	ldi	r16, 0x32	; 50
       } else {
          if (resis[2].rx > resis[ii].rx) {
             ii = 2;
          }
       }
       char x = '1';
    269c:	81 e3       	ldi	r24, 0x31	; 49
    269e:	03 c0       	rjmp	.+6      	; 0x26a6 <main+0x7d4>
          z = '3';
       }
       if (ii == 2) {
          x = '2';
          y = '1';
          z = '3';
    26a0:	13 e3       	ldi	r17, 0x33	; 51
          y = '2';
          z = '3';
       }
       if (ii == 2) {
          x = '2';
          y = '1';
    26a2:	01 e3       	ldi	r16, 0x31	; 49
          // x = '1';
          y = '2';
          z = '3';
       }
       if (ii == 2) {
          x = '2';
    26a4:	82 e3       	ldi	r24, 0x32	; 50
          y = '1';
          z = '3';
       }
       lcd_data(x);
    26a6:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       lcd_fix_string(Resistor_str);    // -[=]-
    26aa:	82 e5       	ldi	r24, 0x52	; 82
    26ac:	91 e0       	ldi	r25, 0x01	; 1
    26ae:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
       lcd_data(y);
    26b2:	80 2f       	mov	r24, r16
    26b4:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       lcd_fix_string(Resistor_str);    // -[=]-
    26b8:	82 e5       	ldi	r24, 0x52	; 82
    26ba:	91 e0       	ldi	r25, 0x01	; 1
    26bc:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
       lcd_data(z);
    26c0:	81 2f       	mov	r24, r17
    26c2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
    }
    lcd_line2(); //2. row 
    26c6:	80 ec       	ldi	r24, 0xC0	; 192
    26c8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
    if (ResistorsFound == 1) {
    26cc:	80 91 5e 01 	lds	r24, 0x015E
    26d0:	81 30       	cpi	r24, 0x01	; 1
    26d2:	01 f5       	brne	.+64     	; 0x2714 <main+0x842>
       RvalOut(0);
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	0e 94 4d 03 	call	0x69a	; 0x69a <RvalOut>
#if FLASHEND > 0x1fff
       if (resis[0].lx != 0) {
    26da:	80 91 1c 01 	lds	r24, 0x011C
    26de:	90 91 1d 01 	lds	r25, 0x011D
    26e2:	a0 91 1e 01 	lds	r26, 0x011E
    26e6:	b0 91 1f 01 	lds	r27, 0x011F
    26ea:	00 97       	sbiw	r24, 0x00	; 0
    26ec:	a1 05       	cpc	r26, r1
    26ee:	b1 05       	cpc	r27, r1
    26f0:	09 f4       	brne	.+2      	; 0x26f4 <main+0x822>
    26f2:	b6 c0       	rjmp	.+364    	; 0x2860 <main+0x98e>
	  // resistor have also Inductance
          lcd_fix_string(Lis_str);	// "L="
    26f4:	82 e4       	ldi	r24, 0x42	; 66
    26f6:	91 e0       	ldi	r25, 0x01	; 1
    26f8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
          DisplayValue(resis[0].lx,resis[0].lpre,'H',3);	// output inductance
    26fc:	60 91 1c 01 	lds	r22, 0x011C
    2700:	70 91 1d 01 	lds	r23, 0x011D
    2704:	80 91 1e 01 	lds	r24, 0x011E
    2708:	90 91 1f 01 	lds	r25, 0x011F
    270c:	40 91 20 01 	lds	r20, 0x0120
    2710:	28 e4       	ldi	r18, 0x48	; 72
    2712:	78 cd       	rjmp	.-1296   	; 0x2204 <main+0x332>
       }
#endif
    } else {
       // output resistor values in right order
       if (ii == 0) {
    2714:	80 91 4b 01 	lds	r24, 0x014B
    2718:	88 23       	and	r24, r24
    271a:	31 f4       	brne	.+12     	; 0x2728 <main+0x856>
          RvalOut(1);
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	0e 94 4d 03 	call	0x69a	; 0x69a <RvalOut>
          RvalOut(2);
    2722:	82 e0       	ldi	r24, 0x02	; 2
    2724:	0e 94 4d 03 	call	0x69a	; 0x69a <RvalOut>
       }
       if (ii == 1) {
    2728:	80 91 4b 01 	lds	r24, 0x014B
    272c:	81 30       	cpi	r24, 0x01	; 1
    272e:	31 f4       	brne	.+12     	; 0x273c <main+0x86a>
          RvalOut(0);
    2730:	80 e0       	ldi	r24, 0x00	; 0
    2732:	0e 94 4d 03 	call	0x69a	; 0x69a <RvalOut>
          RvalOut(2);
    2736:	82 e0       	ldi	r24, 0x02	; 2
    2738:	0e 94 4d 03 	call	0x69a	; 0x69a <RvalOut>
       }
       if (ii == 2) {
    273c:	80 91 4b 01 	lds	r24, 0x014B
    2740:	82 30       	cpi	r24, 0x02	; 2
    2742:	09 f0       	breq	.+2      	; 0x2746 <main+0x874>
    2744:	8d c0       	rjmp	.+282    	; 0x2860 <main+0x98e>
          RvalOut(0);
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	0e 94 4d 03 	call	0x69a	; 0x69a <RvalOut>
          RvalOut(1);
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	0e 94 4d 03 	call	0x69a	; 0x69a <RvalOut>
    2752:	86 c0       	rjmp	.+268    	; 0x2860 <main+0x98e>
    goto end;

  } // end (PartFound == PART_RESISTOR)

//capacity measurement is wanted
  else if(PartFound == PART_CAPACITOR) {
    2754:	87 30       	cpi	r24, 0x07	; 7
    2756:	09 f0       	breq	.+2      	; 0x275a <main+0x888>
    2758:	51 c0       	rjmp	.+162    	; 0x27fc <main+0x92a>
//     lcd_fix_string(Capacitor);
     lcd_testpin(cap.ca);		//Pin number 1
    275a:	80 91 72 01 	lds	r24, 0x0172
    275e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
     lcd_fix_string(CapZeich);		// capacitor sign
    2762:	85 e2       	ldi	r24, 0x25	; 37
    2764:	91 e0       	ldi	r25, 0x01	; 1
    2766:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_testpin(cap.cb);		//Pin number 2
    276a:	80 91 73 01 	lds	r24, 0x0173
    276e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
#if FLASHEND > 0x1fff
     GetVloss();			// get Voltage loss of capacitor
    2772:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <GetVloss>
     if (cap.v_loss != 0) {
    2776:	80 91 70 01 	lds	r24, 0x0170
    277a:	90 91 71 01 	lds	r25, 0x0171
    277e:	00 97       	sbiw	r24, 0x00	; 0
    2780:	79 f0       	breq	.+30     	; 0x27a0 <main+0x8ce>
        lcd_fix_string(VLOSS_str);	// "  Vloss="
    2782:	8a e3       	ldi	r24, 0x3A	; 58
    2784:	91 e0       	ldi	r25, 0x01	; 1
    2786:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        DisplayValue(cap.v_loss,-1,'%',2);
    278a:	60 91 70 01 	lds	r22, 0x0170
    278e:	70 91 71 01 	lds	r23, 0x0171
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	4f ef       	ldi	r20, 0xFF	; 255
    2798:	25 e2       	ldi	r18, 0x25	; 37
    279a:	02 e0       	ldi	r16, 0x02	; 2
    279c:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
     }
#endif
     lcd_line2(); 			//2. row 
    27a0:	80 ec       	ldi	r24, 0xC0	; 192
    27a2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     DisplayValue(cap.cval_max,cap.cpre_max,'F',4);
    27a6:	60 91 66 01 	lds	r22, 0x0166
    27aa:	70 91 67 01 	lds	r23, 0x0167
    27ae:	80 91 68 01 	lds	r24, 0x0168
    27b2:	90 91 69 01 	lds	r25, 0x0169
    27b6:	40 91 75 01 	lds	r20, 0x0175
    27ba:	26 e4       	ldi	r18, 0x46	; 70
    27bc:	04 e0       	ldi	r16, 0x04	; 4
    27be:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
#if FLASHEND > 0x1fff
     cap.esr = GetESR(cap.cb, cap.ca);		// get ESR of capacitor
    27c2:	80 91 73 01 	lds	r24, 0x0173
    27c6:	60 91 72 01 	lds	r22, 0x0172
    27ca:	0e 94 41 1b 	call	0x3682	; 0x3682 <GetESR>
    27ce:	90 93 6f 01 	sts	0x016F, r25
    27d2:	80 93 6e 01 	sts	0x016E, r24
     if ( cap.esr < 65530) {
    27d6:	2f ef       	ldi	r18, 0xFF	; 255
    27d8:	8a 3f       	cpi	r24, 0xFA	; 250
    27da:	92 07       	cpc	r25, r18
    27dc:	08 f0       	brcs	.+2      	; 0x27e0 <main+0x90e>
    27de:	40 c0       	rjmp	.+128    	; 0x2860 <main+0x98e>
        lcd_fix_string(ESR_str);
    27e0:	84 e3       	ldi	r24, 0x34	; 52
    27e2:	91 e0       	ldi	r25, 0x01	; 1
    27e4:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        DisplayValue(cap.esr,-2,LCD_CHAR_OMEGA,2);
    27e8:	60 91 6e 01 	lds	r22, 0x016E
    27ec:	70 91 6f 01 	lds	r23, 0x016F
    27f0:	80 e0       	ldi	r24, 0x00	; 0
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	4e ef       	ldi	r20, 0xFE	; 254
    27f6:	24 ef       	ldi	r18, 0xF4	; 244
    27f8:	02 e0       	ldi	r16, 0x02	; 2
    27fa:	57 ce       	rjmp	.-850    	; 0x24aa <main+0x5d8>
     }
#endif
     goto end;
  }
  if(NumOfDiodes == 0) { //no diodes are found
    27fc:	80 91 05 01 	lds	r24, 0x0105
    2800:	88 23       	and	r24, r24
    2802:	71 f4       	brne	.+28     	; 0x2820 <main+0x94e>
     lcd_fix_string(TestFailed1); 	//"Kein,unbek. oder"
    2804:	80 ea       	ldi	r24, 0xA0	; 160
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_line2(); //2. row 
    280c:	80 ec       	ldi	r24, 0xC0	; 192
    280e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     lcd_fix_string(TestFailed2); 	//"defektes "
    2812:	81 e7       	ldi	r24, 0x71	; 113
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_fix_string(Bauteil);		//"Bauteil"
    281a:	8a e7       	ldi	r24, 0x7A	; 122
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	16 c0       	rjmp	.+44     	; 0x284c <main+0x97a>
  } else {
     lcd_fix_string(Bauteil);		//"Bauteil"
    2820:	8a e7       	ldi	r24, 0x7A	; 122
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_fix_string(Unknown); 		//" unbek."
    2828:	87 e9       	ldi	r24, 0x97	; 151
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_line2(); //2. row 
    2830:	80 ec       	ldi	r24, 0xC0	; 192
    2832:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     lcd_fix_string(OrBroken); 		//"oder defekt "
    2836:	80 eb       	ldi	r24, 0xB0	; 176
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_data(NumOfDiodes + '0');
    283e:	80 91 05 01 	lds	r24, 0x0105
    2842:	80 5d       	subi	r24, 0xD0	; 208
    2844:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
     lcd_fix_string(AnKat);		//"->|-"
    2848:	85 e4       	ldi	r24, 0x45	; 69
    284a:	91 e0       	ldi	r25, 0x01	; 1
    284c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  }
  empty_count++;
    2850:	80 91 4a 01 	lds	r24, 0x014A
    2854:	8f 5f       	subi	r24, 0xFF	; 255
    2856:	80 93 4a 01 	sts	0x014A, r24
  mess_count = 0;
    285a:	10 92 0b 01 	sts	0x010B, r1
  goto end2;
    285e:	07 c0       	rjmp	.+14     	; 0x286e <main+0x99c>
gakAusgabe:
  lcd_line2(); //2. row 
  PinLayout(Cathode_char,'G','A'); 	// CGA= or 123=...
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 end:
  empty_count = 0;		// reset counter, if part is found
    2860:	10 92 4a 01 	sts	0x014A, r1
  mess_count++;			// count measurements
    2864:	80 91 0b 01 	lds	r24, 0x010B
    2868:	8f 5f       	subi	r24, 0xFF	; 255
    286a:	80 93 0b 01 	sts	0x010B, r24

 end2:
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND, release relay
    286e:	88 e1       	ldi	r24, 0x18	; 24
    2870:	87 b9       	out	0x07, r24	; 7
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
    2872:	4f 9b       	sbis	0x09, 7	; 9
    2874:	fe cf       	rjmp	.-4      	; 0x2872 <main+0x9a0>
  wait_about200ms();
    2876:	88 e2       	ldi	r24, 0x28	; 40
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>
// wait 14 seconds or 5 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage+=10) {
    287e:	10 92 60 01 	sts	0x0160, r1
    2882:	10 92 5f 01 	sts	0x015F, r1
    2886:	10 c0       	rjmp	.+32     	; 0x28a8 <main+0x9d6>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    2888:	4f 9b       	sbis	0x09, 7	; 9
    288a:	7a cb       	rjmp	.-2316   	; 0x1f80 <main+0xae>
        // If the key is pressed again... 
        // goto start of measurement 
        goto start;
     }
     wdt_reset();
    288c:	a8 95       	wdr
     wait_about10ms();
    288e:	82 e0       	ldi	r24, 0x02	; 2
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>
 end2:
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND, release relay
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
  wait_about200ms();
// wait 14 seconds or 5 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage+=10) {
    2896:	80 91 5f 01 	lds	r24, 0x015F
    289a:	90 91 60 01 	lds	r25, 0x0160
    289e:	0a 96       	adiw	r24, 0x0a	; 10
    28a0:	90 93 60 01 	sts	0x0160, r25
    28a4:	80 93 5f 01 	sts	0x015F, r24
    28a8:	80 91 5f 01 	lds	r24, 0x015F
    28ac:	90 91 60 01 	lds	r25, 0x0160
    28b0:	2d e6       	ldi	r18, 0x6D	; 109
    28b2:	80 36       	cpi	r24, 0x60	; 96
    28b4:	92 07       	cpc	r25, r18
    28b6:	40 f3       	brcs	.-48     	; 0x2888 <main+0x9b6>
     goto start;			// repeat measurement POWER_OFF times
  }
 #endif
  // only one Measurement requested, shut off
//  MCUSR = 0;
  ON_PORT &= ~(1<<ON_PIN);		//switch off power
    28b8:	5e 98       	cbi	0x0b, 6	; 11
  //never ending loop 
  while(1) {
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    28ba:	4f 9b       	sbis	0x09, 7	; 9
    28bc:	61 cb       	rjmp	.-2366   	; 0x1f80 <main+0xae>
        // The statement is only reached if no auto off equipment is installed
        goto start;
     }
     wdt_reset();
    28be:	a8 95       	wdr
     wait_about10ms();
    28c0:	82 e0       	ldi	r24, 0x02	; 2
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>
  }
    28c8:	f8 cf       	rjmp	.-16     	; 0x28ba <main+0x9e8>

000028ca <uart_putc>:
    28ca:	2f 93       	push	r18
    28cc:	5f b7       	in	r21, 0x3f	; 63
    28ce:	2f 93       	push	r18
    28d0:	2a e0       	ldi	r18, 0x0A	; 10
    28d2:	80 95       	com	r24
    28d4:	08 94       	sec

000028d6 <putchar0>:
    28d6:	10 f4       	brcc	.+4      	; 0x28dc <putchar1>
    28d8:	43 98       	cbi	0x08, 3	; 8
    28da:	02 c0       	rjmp	.+4      	; 0x28e0 <putchar2>

000028dc <putchar1>:
    28dc:	43 9a       	sbi	0x08, 3	; 8
	...

000028e0 <putchar2>:
    28e0:	22 d0       	rcall	.+68     	; 0x2926 <wait100us>
    28e2:	29 d0       	rcall	.+82     	; 0x2936 <wait3us>
    28e4:	86 95       	lsr	r24
    28e6:	2a 95       	dec	r18
    28e8:	b1 f7       	brne	.-20     	; 0x28d6 <putchar0>
    28ea:	2f 91       	pop	r18
    28ec:	5f bf       	out	0x3f, r21	; 63
    28ee:	2f 91       	pop	r18
    28f0:	08 95       	ret

000028f2 <UART_delay1>:
    28f2:	08 95       	ret

000028f4 <wait5s>:
    28f4:	03 d0       	rcall	.+6      	; 0x28fc <wait1000ms>

000028f6 <wait4s>:
    28f6:	02 d0       	rcall	.+4      	; 0x28fc <wait1000ms>

000028f8 <wait3s>:
    28f8:	01 d0       	rcall	.+2      	; 0x28fc <wait1000ms>

000028fa <wait2s>:
    28fa:	00 d0       	rcall	.+0      	; 0x28fc <wait1000ms>

000028fc <wait1000ms>:
    28fc:	00 d0       	rcall	.+0      	; 0x28fe <wait500ms>

000028fe <wait500ms>:
    28fe:	03 d0       	rcall	.+6      	; 0x2906 <wait100ms>

00002900 <wait400ms>:
    2900:	02 d0       	rcall	.+4      	; 0x2906 <wait100ms>

00002902 <wait300ms>:
    2902:	01 d0       	rcall	.+2      	; 0x2906 <wait100ms>

00002904 <wait200ms>:
    2904:	00 d0       	rcall	.+0      	; 0x2906 <wait100ms>

00002906 <wait100ms>:
    2906:	a8 95       	wdr
    2908:	00 d0       	rcall	.+0      	; 0x290a <wait50ms>

0000290a <wait50ms>:
    290a:	03 d0       	rcall	.+6      	; 0x2912 <wait10ms>

0000290c <wait40ms>:
    290c:	02 d0       	rcall	.+4      	; 0x2912 <wait10ms>

0000290e <wait30ms>:
    290e:	01 d0       	rcall	.+2      	; 0x2912 <wait10ms>

00002910 <wait20ms>:
    2910:	00 d0       	rcall	.+0      	; 0x2912 <wait10ms>

00002912 <wait10ms>:
    2912:	00 d0       	rcall	.+0      	; 0x2914 <wait5ms>

00002914 <wait5ms>:
    2914:	03 d0       	rcall	.+6      	; 0x291c <wait1ms>

00002916 <wait4ms>:
    2916:	02 d0       	rcall	.+4      	; 0x291c <wait1ms>

00002918 <wait3ms>:
    2918:	01 d0       	rcall	.+2      	; 0x291c <wait1ms>

0000291a <wait2ms>:
    291a:	00 d0       	rcall	.+0      	; 0x291c <wait1ms>

0000291c <wait1ms>:
    291c:	00 d0       	rcall	.+0      	; 0x291e <wait500us>

0000291e <wait500us>:
    291e:	03 d0       	rcall	.+6      	; 0x2926 <wait100us>

00002920 <wait400us>:
    2920:	02 d0       	rcall	.+4      	; 0x2926 <wait100us>

00002922 <wait300us>:
    2922:	01 d0       	rcall	.+2      	; 0x2926 <wait100us>

00002924 <wait200us>:
    2924:	00 d0       	rcall	.+0      	; 0x2926 <wait100us>

00002926 <wait100us>:
    2926:	00 d0       	rcall	.+0      	; 0x2928 <wait50us>

00002928 <wait50us>:
    2928:	03 d0       	rcall	.+6      	; 0x2930 <wait10us>

0000292a <wait40us>:
    292a:	02 d0       	rcall	.+4      	; 0x2930 <wait10us>

0000292c <wait30us>:
    292c:	01 d0       	rcall	.+2      	; 0x2930 <wait10us>

0000292e <wait20us>:
    292e:	00 d0       	rcall	.+0      	; 0x2930 <wait10us>

00002930 <wait10us>:
    2930:	00 d0       	rcall	.+0      	; 0x2932 <wait5us>

00002932 <wait5us>:
    2932:	03 d0       	rcall	.+6      	; 0x293a <wait1us>

00002934 <wait4us>:
    2934:	02 d0       	rcall	.+4      	; 0x293a <wait1us>

00002936 <wait3us>:
    2936:	01 d0       	rcall	.+2      	; 0x293a <wait1us>

00002938 <wait2us>:
    2938:	00 d0       	rcall	.+0      	; 0x293a <wait1us>

0000293a <wait1us>:
    293a:	00 00       	nop
    293c:	08 95       	ret

0000293e <getRLmultip>:
  R_DDR = 0;			// switch all resistor ports to input
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
  return;
 } // end ReadCapacity()

unsigned int getRLmultip(unsigned int cvolt) {
    293e:	ff 92       	push	r15
    2940:	0f 93       	push	r16
    2942:	1f 93       	push	r17
    2944:	cf 93       	push	r28
    2946:	df 93       	push	r29

  unsigned int uvolt;
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;
  if (cvolt >= RL_Tab_Beginn) {
    2948:	21 e0       	ldi	r18, 0x01	; 1
    294a:	8c 32       	cpi	r24, 0x2C	; 44
    294c:	92 07       	cpc	r25, r18
    294e:	18 f0       	brcs	.+6      	; 0x2956 <getRLmultip+0x18>
     uvolt = cvolt - RL_Tab_Beginn;
    2950:	8c 52       	subi	r24, 0x2C	; 44
    2952:	91 40       	sbci	r25, 0x01	; 1
    2954:	02 c0       	rjmp	.+4      	; 0x295a <getRLmultip+0x1c>
  } else {
     uvolt = 0;			// limit to begin of table
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = uvolt / RL_Tab_Abstand;
    295a:	69 e1       	ldi	r22, 0x19	; 25
    295c:	70 e0       	ldi	r23, 0x00	; 0
    295e:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <__udivmodhi4>
  tabres = uvolt % RL_Tab_Abstand;
    2962:	f8 2e       	mov	r15, r24
  tabres = RL_Tab_Abstand - tabres;
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
    2964:	6d 32       	cpi	r22, 0x2D	; 45
    2966:	08 f0       	brcs	.+2      	; 0x296a <getRLmultip+0x2c>
    2968:	6c e2       	ldi	r22, 0x2C	; 44
    296a:	c6 2f       	mov	r28, r22
    296c:	d0 e0       	ldi	r29, 0x00	; 0
    296e:	ce 01       	movw	r24, r28
    2970:	88 0f       	add	r24, r24
    2972:	99 1f       	adc	r25, r25
    2974:	80 50       	subi	r24, 0x00	; 0
    2976:	90 40       	sbci	r25, 0x00	; 0
    2978:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__eerd_word_m168>
    297c:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RLtab[tabind+1]);
    297e:	ce 01       	movw	r24, r28
    2980:	88 0f       	add	r24, r24
    2982:	99 1f       	adc	r25, r25
    2984:	8e 5f       	subi	r24, 0xFE	; 254
    2986:	9f 4f       	sbci	r25, 0xFF	; 255
    2988:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__eerd_word_m168>
    298c:	9c 01       	movw	r18, r24
  } else {
     uvolt = 0;			// limit to begin of table
  }
  tabind = uvolt / RL_Tab_Abstand;
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
    298e:	49 e1       	ldi	r20, 0x19	; 25
    2990:	4f 19       	sub	r20, r15
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
    2992:	50 e0       	ldi	r21, 0x00	; 0
    2994:	08 1b       	sub	r16, r24
    2996:	19 0b       	sbc	r17, r25
    2998:	40 9f       	mul	r20, r16
    299a:	c0 01       	movw	r24, r0
    299c:	41 9f       	mul	r20, r17
    299e:	90 0d       	add	r25, r0
    29a0:	50 9f       	mul	r21, r16
    29a2:	90 0d       	add	r25, r0
    29a4:	11 24       	eor	r1, r1
    29a6:	0c 96       	adiw	r24, 0x0c	; 12
    29a8:	69 e1       	ldi	r22, 0x19	; 25
    29aa:	70 e0       	ldi	r23, 0x00	; 0
    29ac:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <__udivmodhi4>
    29b0:	62 0f       	add	r22, r18
    29b2:	73 1f       	adc	r23, r19
}
    29b4:	cb 01       	movw	r24, r22
    29b6:	df 91       	pop	r29
    29b8:	cf 91       	pop	r28
    29ba:	1f 91       	pop	r17
    29bc:	0f 91       	pop	r16
    29be:	ff 90       	pop	r15
    29c0:	08 95       	ret

000029c2 <Scale_C_with_vcc>:

void Scale_C_with_vcc(void) {
    29c2:	8f 92       	push	r8
    29c4:	9f 92       	push	r9
    29c6:	af 92       	push	r10
    29c8:	bf 92       	push	r11
    29ca:	df 92       	push	r13
    29cc:	ef 92       	push	r14
    29ce:	ff 92       	push	r15
    29d0:	0f 93       	push	r16
    29d2:	1f 93       	push	r17
    29d4:	e0 90 62 01 	lds	r14, 0x0162
    29d8:	f0 90 63 01 	lds	r15, 0x0163
    29dc:	00 91 64 01 	lds	r16, 0x0164
    29e0:	10 91 65 01 	lds	r17, 0x0165
    29e4:	d0 90 74 01 	lds	r13, 0x0174
   while (cap.cval > 100000) {
      cap.cval /= 10;
    29e8:	4a e0       	ldi	r20, 0x0A	; 10
    29ea:	84 2e       	mov	r8, r20
    29ec:	91 2c       	mov	r9, r1
    29ee:	a1 2c       	mov	r10, r1
    29f0:	b1 2c       	mov	r11, r1
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    29f2:	08 c0       	rjmp	.+16     	; 0x2a04 <Scale_C_with_vcc+0x42>
      cap.cval /= 10;
    29f4:	c8 01       	movw	r24, r16
    29f6:	b7 01       	movw	r22, r14
    29f8:	a5 01       	movw	r20, r10
    29fa:	94 01       	movw	r18, r8
    29fc:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
    2a00:	79 01       	movw	r14, r18
    2a02:	8a 01       	movw	r16, r20
    2a04:	8d 2d       	mov	r24, r13
    2a06:	d3 94       	inc	r13
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    2a08:	91 ea       	ldi	r25, 0xA1	; 161
    2a0a:	e9 16       	cp	r14, r25
    2a0c:	96 e8       	ldi	r25, 0x86	; 134
    2a0e:	f9 06       	cpc	r15, r25
    2a10:	91 e0       	ldi	r25, 0x01	; 1
    2a12:	09 07       	cpc	r16, r25
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	19 07       	cpc	r17, r25
    2a18:	68 f7       	brcc	.-38     	; 0x29f4 <Scale_C_with_vcc+0x32>
    2a1a:	80 93 74 01 	sts	0x0174, r24
      cap.cval /= 10;
      cap.cpre ++;			// prevent overflow
   }
   cap.cval *= ADCconfig.U_AVCC;	// scale with measured voltage
    2a1e:	20 91 40 01 	lds	r18, 0x0140
    2a22:	30 91 41 01 	lds	r19, 0x0141
    2a26:	40 e0       	ldi	r20, 0x00	; 0
    2a28:	50 e0       	ldi	r21, 0x00	; 0
    2a2a:	c8 01       	movw	r24, r16
    2a2c:	b7 01       	movw	r22, r14
    2a2e:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
    2a32:	28 e8       	ldi	r18, 0x88	; 136
    2a34:	33 e1       	ldi	r19, 0x13	; 19
    2a36:	40 e0       	ldi	r20, 0x00	; 0
    2a38:	50 e0       	ldi	r21, 0x00	; 0
    2a3a:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
    2a3e:	20 93 62 01 	sts	0x0162, r18
    2a42:	30 93 63 01 	sts	0x0163, r19
    2a46:	40 93 64 01 	sts	0x0164, r20
    2a4a:	50 93 65 01 	sts	0x0165, r21
}
    2a4e:	1f 91       	pop	r17
    2a50:	0f 91       	pop	r16
    2a52:	ff 90       	pop	r15
    2a54:	ef 90       	pop	r14
    2a56:	df 90       	pop	r13
    2a58:	bf 90       	pop	r11
    2a5a:	af 90       	pop	r10
    2a5c:	9f 90       	pop	r9
    2a5e:	8f 90       	pop	r8
    2a60:	08 95       	ret

00002a62 <ReadCapacity>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    2a62:	8f 92       	push	r8
    2a64:	9f 92       	push	r9
    2a66:	af 92       	push	r10
    2a68:	bf 92       	push	r11
    2a6a:	cf 92       	push	r12
    2a6c:	df 92       	push	r13
    2a6e:	ef 92       	push	r14
    2a70:	ff 92       	push	r15
    2a72:	0f 93       	push	r16
    2a74:	1f 93       	push	r17
    2a76:	cf 93       	push	r28
    2a78:	df 93       	push	r29
    2a7a:	18 2f       	mov	r17, r24
    2a7c:	06 2f       	mov	r16, r22
#if FLASHEND > 0x1fff
  unsigned int vloss;	// lost voltage after load pulse in 0.1% 
#endif

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
    2a7e:	88 0f       	add	r24, r24
    2a80:	81 0f       	add	r24, r17
    2a82:	86 0f       	add	r24, r22
    2a84:	81 50       	subi	r24, 0x01	; 1
    2a86:	80 93 4c 01 	sts	0x014C, r24
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2a8a:	e6 2f       	mov	r30, r22
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	e3 5f       	subi	r30, 0xF3	; 243
    2a90:	fe 4f       	sbci	r31, 0xFE	; 254
    2a92:	24 91       	lpm	r18, Z+
  HiPinR_L = pgm_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
    2a94:	e1 2f       	mov	r30, r17
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	e6 5f       	subi	r30, 0xF6	; 246
    2a9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a9c:	c4 90       	lpm	r12, Z+
  lcd_testpin(LowPin);
  lcd_data('C');
  lcd_testpin(HighPin);
  lcd_space();
#endif
  if(PartFound == PART_RESISTOR) {
    2a9e:	80 91 07 01 	lds	r24, 0x0107
    2aa2:	86 30       	cpi	r24, 0x06	; 6
    2aa4:	09 f4       	brne	.+2      	; 0x2aa8 <ReadCapacity+0x46>
    2aa6:	9f c2       	rjmp	.+1342   	; 0x2fe6 <ReadCapacity+0x584>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    2aa8:	40 91 05 01 	lds	r20, 0x0105
    2aac:	a8 e7       	ldi	r26, 0x78	; 120
    2aae:	b1 e0       	ldi	r27, 0x01	; 1
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	13 c0       	rjmp	.+38     	; 0x2ada <ReadCapacity+0x78>
     if ((diodes[ii].Cathode == LowPin) && (diodes[ii].Anode == HighPin) && (diodes[ii].Voltage < 1500)) {
    2ab4:	11 96       	adiw	r26, 0x01	; 1
    2ab6:	8c 91       	ld	r24, X
    2ab8:	11 97       	sbiw	r26, 0x01	; 1
    2aba:	80 17       	cp	r24, r16
    2abc:	61 f4       	brne	.+24     	; 0x2ad6 <ReadCapacity+0x74>
    2abe:	8c 91       	ld	r24, X
    2ac0:	81 17       	cp	r24, r17
    2ac2:	49 f4       	brne	.+18     	; 0x2ad6 <ReadCapacity+0x74>
    2ac4:	12 96       	adiw	r26, 0x02	; 2
    2ac6:	8d 91       	ld	r24, X+
    2ac8:	9c 91       	ld	r25, X
    2aca:	13 97       	sbiw	r26, 0x03	; 3
    2acc:	55 e0       	ldi	r21, 0x05	; 5
    2ace:	8c 3d       	cpi	r24, 0xDC	; 220
    2ad0:	95 07       	cpc	r25, r21
    2ad2:	08 f4       	brcc	.+2      	; 0x2ad6 <ReadCapacity+0x74>
    2ad4:	88 c2       	rjmp	.+1296   	; 0x2fe6 <ReadCapacity+0x584>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    2ad6:	3f 5f       	subi	r19, 0xFF	; 255
    2ad8:	14 96       	adiw	r26, 0x04	; 4
    2ada:	34 17       	cp	r19, r20
    2adc:	58 f3       	brcs	.-42     	; 0x2ab4 <ReadCapacity+0x52>

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2ade:	58 e0       	ldi	r21, 0x08	; 8
    2ae0:	85 2e       	mov	r8, r21
    2ae2:	82 2a       	or	r8, r18
        return;
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
    2ae4:	10 92 6f 01 	sts	0x016F, r1
    2ae8:	10 92 6e 01 	sts	0x016E, r1
  vloss = 0;				// set lost voltage to zero
#endif
  cap.cval = 0;				// set capacity value to zero
    2aec:	10 92 62 01 	sts	0x0162, r1
    2af0:	10 92 63 01 	sts	0x0163, r1
    2af4:	10 92 64 01 	sts	0x0164, r1
    2af8:	10 92 65 01 	sts	0x0165, r1
  cap.cpre = -12;			//default unit is pF
    2afc:	84 ef       	ldi	r24, 0xF4	; 244
    2afe:	80 93 74 01 	sts	0x0174, r24
  EntladePins();			// discharge capacitor
    2b02:	0e 94 b2 01 	call	0x364	; 0x364 <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    2b06:	88 e0       	ldi	r24, 0x08	; 8
    2b08:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    2b0a:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    2b0c:	87 b8       	out	0x07, r8	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    2b0e:	c4 b8       	out	0x04, r12	; 4
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    2b10:	81 2f       	mov	r24, r17
    2b12:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
    2b16:	7c 01       	movw	r14, r24
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2b18:	10 92 4e 01 	sts	0x014E, r1
    2b1c:	10 92 4d 01 	sts	0x014D, r1
  EntladePins();			// discharge capacitor
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
  R_PORT = 0;				// switch R-Port to GND
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    2b20:	ec 01       	movw	r28, r24
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2b22:	2d c0       	rjmp	.+90     	; 0x2b7e <ReadCapacity+0x11c>
     R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    2b24:	c5 b8       	out	0x05, r12	; 5
     R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    2b26:	c4 b8       	out	0x04, r12	; 4
     wait10ms();			// wait exactly 10ms, do not sleep
    2b28:	0e 94 89 14 	call	0x2912	; 0x2912 <wait10ms>
     R_DDR = 0;				// switch back to input
    2b2c:	14 b8       	out	0x04, r1	; 4
     R_PORT = 0;			// no Pull up
    2b2e:	15 b8       	out	0x05, r1	; 5
     wait500us();			//wait a little time
    2b30:	0e 94 8f 14 	call	0x291e	; 0x291e <wait500us>
     wdt_reset();
    2b34:	a8 95       	wdr
     // read voltage without current, is already charged enough?
     adcv[2] = ReadADC(HighPin);
    2b36:	81 2f       	mov	r24, r17
    2b38:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
     if (adcv[2] > adcv[0]) {
    2b3c:	e8 16       	cp	r14, r24
    2b3e:	f9 06       	cpc	r15, r25
    2b40:	20 f4       	brcc	.+8      	; 0x2b4a <ReadCapacity+0xe8>
        adcv[2] -= adcv[0];		//difference to beginning voltage
    2b42:	ec 01       	movw	r28, r24
    2b44:	ce 19       	sub	r28, r14
    2b46:	df 09       	sbc	r29, r15
    2b48:	02 c0       	rjmp	.+4      	; 0x2b4e <ReadCapacity+0xec>
     } else {
        adcv[2] = 0;			// voltage is lower or same as beginning voltage
    2b4a:	c0 e0       	ldi	r28, 0x00	; 0
    2b4c:	d0 e0       	ldi	r29, 0x00	; 0
     }
     if ((ovcnt16 == 126) && (adcv[2] < 75)) {
    2b4e:	80 91 4d 01 	lds	r24, 0x014D
    2b52:	90 91 4e 01 	lds	r25, 0x014E
    2b56:	8e 37       	cpi	r24, 0x7E	; 126
    2b58:	91 05       	cpc	r25, r1
    2b5a:	21 f4       	brne	.+8      	; 0x2b64 <ReadCapacity+0x102>
    2b5c:	cb 34       	cpi	r28, 0x4B	; 75
    2b5e:	d1 05       	cpc	r29, r1
    2b60:	08 f4       	brcc	.+2      	; 0x2b64 <ReadCapacity+0x102>
    2b62:	3c c2       	rjmp	.+1144   	; 0x2fdc <ReadCapacity+0x57a>
        // 300mV can not be reached well-timed 
        break;		// don't try to load any more
     }
     if (adcv[2] > 300) {
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	cd 32       	cpi	r28, 0x2D	; 45
    2b68:	d8 07       	cpc	r29, r24
    2b6a:	b0 f4       	brcc	.+44     	; 0x2b98 <ReadCapacity+0x136>
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2b6c:	80 91 4d 01 	lds	r24, 0x014D
    2b70:	90 91 4e 01 	lds	r25, 0x014E
    2b74:	01 96       	adiw	r24, 0x01	; 1
    2b76:	90 93 4e 01 	sts	0x014E, r25
    2b7a:	80 93 4d 01 	sts	0x014D, r24
    2b7e:	80 91 4d 01 	lds	r24, 0x014D
    2b82:	90 91 4e 01 	lds	r25, 0x014E
    2b86:	21 e0       	ldi	r18, 0x01	; 1
    2b88:	84 3f       	cpi	r24, 0xF4	; 244
    2b8a:	92 07       	cpc	r25, r18
    2b8c:	58 f2       	brcs	.-106    	; 0x2b24 <ReadCapacity+0xc2>
     }
  }
  // wait 5ms and read voltage again, does the capacitor keep the voltage?
//  adcv[1] = W5msReadADC(HighPin) - adcv[0];
//  wdt_reset();
  if (adcv[2] < 301) {
    2b8e:	51 e0       	ldi	r21, 0x01	; 1
    2b90:	cd 32       	cpi	r28, 0x2D	; 45
    2b92:	d5 07       	cpc	r29, r21
    2b94:	08 f4       	brcc	.+2      	; 0x2b98 <ReadCapacity+0x136>
    2b96:	22 c2       	rjmp	.+1092   	; 0x2fdc <ReadCapacity+0x57a>
#if DebugOut == 10
  DisplayValue(ovcnt16,0,' ',4);
  DisplayValue(adcv[2],-3,'V',4);
#endif
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    2b98:	80 91 4d 01 	lds	r24, 0x014D
    2b9c:	90 91 4e 01 	lds	r25, 0x014E
    2ba0:	00 97       	sbiw	r24, 0x00	; 0
    2ba2:	29 f4       	brne	.+10     	; 0x2bae <ReadCapacity+0x14c>
    2ba4:	85 e0       	ldi	r24, 0x05	; 5
    2ba6:	c5 31       	cpi	r28, 0x15	; 21
    2ba8:	d8 07       	cpc	r29, r24
    2baa:	08 f0       	brcs	.+2      	; 0x2bae <ReadCapacity+0x14c>
    2bac:	8b c0       	rjmp	.+278    	; 0x2cc4 <ReadCapacity+0x262>
     goto messe_mit_rh;		// Voltage of more than 1300mV is reached in one pulse, to fast loaded
  }
  // Capacity is more than about 50µF
  cap.cpre = -9;		// switch units to nF 
    2bae:	87 ef       	ldi	r24, 0xF7	; 247
    2bb0:	80 93 74 01 	sts	0x0174, r24
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2bb4:	ce 01       	movw	r24, r28
    2bb6:	cc 24       	eor	r12, r12
    2bb8:	dd 24       	eor	r13, r13
    2bba:	09 c0       	rjmp	.+18     	; 0x2bce <ReadCapacity+0x16c>
     wait5ms();
    2bbc:	0e 94 8a 14 	call	0x2914	; 0x2914 <wait5ms>
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
    2bc0:	81 2f       	mov	r24, r17
    2bc2:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
     wdt_reset();
    2bc6:	a8 95       	wdr
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2bc8:	08 94       	sec
    2bca:	c1 1c       	adc	r12, r1
    2bcc:	d1 1c       	adc	r13, r1
    2bce:	20 91 4d 01 	lds	r18, 0x014D
    2bd2:	30 91 4e 01 	lds	r19, 0x014E
    2bd6:	2c 15       	cp	r18, r12
    2bd8:	3d 05       	cpc	r19, r13
    2bda:	80 f7       	brcc	.-32     	; 0x2bbc <ReadCapacity+0x15a>
     wait5ms();
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
    2bdc:	e8 16       	cp	r14, r24
    2bde:	f9 06       	cpc	r15, r25
    2be0:	30 f4       	brcc	.+12     	; 0x2bee <ReadCapacity+0x18c>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    2be2:	8e 19       	sub	r24, r14
    2be4:	9f 09       	sbc	r25, r15
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    2be6:	8c 17       	cp	r24, r28
    2be8:	9d 07       	cpc	r25, r29
    2bea:	e0 f4       	brcc	.+56     	; 0x2c24 <ReadCapacity+0x1c2>
    2bec:	02 c0       	rjmp	.+4      	; 0x2bf2 <ReadCapacity+0x190>
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
    2bf2:	7e 01       	movw	r14, r28
    2bf4:	e8 1a       	sub	r14, r24
    2bf6:	f9 0a       	sbc	r15, r25
  } else {
     adcv[3] = 0;			// no lost voltage
  }
#if FLASHEND > 0x1fff
  // compute equivalent parallel resistance from voltage drop
  if (adcv[3] > 0) {
    2bf8:	b9 f0       	breq	.+46     	; 0x2c28 <ReadCapacity+0x1c6>
     // there is any voltage drop (adcv[3]) !
     // adcv[2] is the loaded voltage.
     vloss = (unsigned long)(adcv[3] * 1000UL) / adcv[2];
  }
#endif
  if (adcv[3] > 100) {
    2bfa:	25 e6       	ldi	r18, 0x65	; 101
    2bfc:	e2 16       	cp	r14, r18
    2bfe:	f1 04       	cpc	r15, r1
    2c00:	08 f0       	brcs	.+2      	; 0x2c04 <ReadCapacity+0x1a2>
    2c02:	ec c1       	rjmp	.+984    	; 0x2fdc <ReadCapacity+0x57a>
#if FLASHEND > 0x1fff
  // compute equivalent parallel resistance from voltage drop
  if (adcv[3] > 0) {
     // there is any voltage drop (adcv[3]) !
     // adcv[2] is the loaded voltage.
     vloss = (unsigned long)(adcv[3] * 1000UL) / adcv[2];
    2c04:	b7 01       	movw	r22, r14
    2c06:	80 e0       	ldi	r24, 0x00	; 0
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	28 ee       	ldi	r18, 0xE8	; 232
    2c0c:	33 e0       	ldi	r19, 0x03	; 3
    2c0e:	40 e0       	ldi	r20, 0x00	; 0
    2c10:	50 e0       	ldi	r21, 0x00	; 0
    2c12:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
    2c16:	9e 01       	movw	r18, r28
    2c18:	40 e0       	ldi	r20, 0x00	; 0
    2c1a:	50 e0       	ldi	r21, 0x00	; 0
    2c1c:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
    2c20:	69 01       	movw	r12, r18
    2c22:	04 c0       	rjmp	.+8      	; 0x2c2c <ReadCapacity+0x1ca>
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    2c24:	ee 24       	eor	r14, r14
    2c26:	ff 24       	eor	r15, r15
  } else {
     adcv[3] = 0;			// no lost voltage
  }
#if FLASHEND > 0x1fff
  // compute equivalent parallel resistance from voltage drop
  if (adcv[3] > 0) {
    2c28:	cc 24       	eor	r12, r12
    2c2a:	dd 24       	eor	r13, r13
     lcd_space();
     wait_about1s();
 #endif
     goto keinC;			// capacitor does not keep the voltage about 5ms
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
    2c2c:	80 90 4d 01 	lds	r8, 0x014D
    2c30:	90 90 4e 01 	lds	r9, 0x014E
    2c34:	08 94       	sec
    2c36:	81 1c       	adc	r8, r1
    2c38:	91 1c       	adc	r9, r1
    2c3a:	aa 24       	eor	r10, r10
    2c3c:	bb 24       	eor	r11, r11
    2c3e:	80 92 6a 01 	sts	0x016A, r8
    2c42:	90 92 6b 01 	sts	0x016B, r9
    2c46:	a0 92 6c 01 	sts	0x016C, r10
    2c4a:	b0 92 6d 01 	sts	0x016D, r11
  // compute factor with load voltage + lost voltage during the voltage load time
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]+adcv[3]);	// get factor to convert time to capacity from table
    2c4e:	c7 01       	movw	r24, r14
    2c50:	8c 0f       	add	r24, r28
    2c52:	9d 1f       	adc	r25, r29
    2c54:	0e 94 9f 14 	call	0x293e	; 0x293e <getRLmultip>
    2c58:	bc 01       	movw	r22, r24
    2c5a:	80 e0       	ldi	r24, 0x00	; 0
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	a5 01       	movw	r20, r10
    2c60:	94 01       	movw	r18, r8
    2c62:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
    2c66:	60 93 6a 01 	sts	0x016A, r22
    2c6a:	70 93 6b 01 	sts	0x016B, r23
    2c6e:	80 93 6c 01 	sts	0x016C, r24
    2c72:	90 93 6d 01 	sts	0x016D, r25
#endif
   cap.cval = cap.cval_uncorrected.dw;	// set result to uncorrected
    2c76:	60 93 62 01 	sts	0x0162, r22
    2c7a:	70 93 63 01 	sts	0x0163, r23
    2c7e:	80 93 64 01 	sts	0x0164, r24
    2c82:	90 93 65 01 	sts	0x0165, r25
   Scale_C_with_vcc();
    2c86:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <Scale_C_with_vcc>
   // cap.cval for this type is at least 40000nF, so the last digit will be never shown
   cap.cval *= (1000 - C_H_KORR);	// correct with C_H_KORR with 0.1% resolution, but prevent overflow
    2c8a:	60 91 62 01 	lds	r22, 0x0162
    2c8e:	70 91 63 01 	lds	r23, 0x0163
    2c92:	80 91 64 01 	lds	r24, 0x0164
    2c96:	90 91 65 01 	lds	r25, 0x0165
    2c9a:	28 ee       	ldi	r18, 0xE8	; 232
    2c9c:	33 e0       	ldi	r19, 0x03	; 3
    2c9e:	40 e0       	ldi	r20, 0x00	; 0
    2ca0:	50 e0       	ldi	r21, 0x00	; 0
    2ca2:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
   cap.cval /= 100;
    2ca6:	24 e6       	ldi	r18, 0x64	; 100
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	40 e0       	ldi	r20, 0x00	; 0
    2cac:	50 e0       	ldi	r21, 0x00	; 0
    2cae:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
    2cb2:	20 93 62 01 	sts	0x0162, r18
    2cb6:	30 93 63 01 	sts	0x0163, r19
    2cba:	40 93 64 01 	sts	0x0164, r20
    2cbe:	50 93 65 01 	sts	0x0165, r21
   DisplayValue(cap.cval,cap.cpre,'F',4);
   lcd_space();
   lcd_string(utoa(ovcnt16,outval,10));
   wait_about3s();
#endif
   goto checkDiodes;
    2cc2:	4d c1       	rjmp	.+666    	; 0x2f5e <ReadCapacity+0x4fc>
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
  HiPinR_L = pgm_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load
    2cc4:	ec 2c       	mov	r14, r12
    2cc6:	ee 0c       	add	r14, r14

//==================================================================================
// Measurement of little capacity values
messe_mit_rh:
  //little capacity value, about  < 50 µF
  EntladePins();			// discharge capacitor
    2cc8:	0e 94 b2 01 	call	0x364	; 0x364 <EntladePins>
  //measure with the R_H (470kOhm) resistor 
  R_PORT = 0;		// R_DDR ist HiPinR_L
    2ccc:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = (1<<TP1) | (1<<TP2) | (1<<TP3) | (1<<TxD);	//switch all Pins to output
    2cce:	8f e0       	ldi	r24, 0x0F	; 15
    2cd0:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		//switch all ADC Pins to GND
    2cd2:	88 e0       	ldi	r24, 0x08	; 8
    2cd4:	88 b9       	out	0x08, r24	; 8
  R_DDR = HiPinR_H;   		// switch R_H resistor port for HighPin to output (GND)
    2cd6:	e4 b8       	out	0x04, r14	; 4
// setup Analog Comparator
  ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    2cd8:	80 e4       	ldi	r24, 0x40	; 64
    2cda:	80 93 7b 00 	sts	0x007B, r24
  ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    2cde:	84 e5       	ldi	r24, 0x54	; 84
    2ce0:	80 bf       	out	0x30, r24	; 48
  ADMUX = (1<<REFS0) | HighPin;			// switch Mux to High-Pin
    2ce2:	81 2f       	mov	r24, r17
    2ce4:	80 64       	ori	r24, 0x40	; 64
    2ce6:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    2cea:	86 e1       	ldi	r24, 0x16	; 22
    2cec:	80 93 7a 00 	sts	0x007A, r24
  wait200us();			//wait for bandgap to start up
    2cf0:	0e 94 92 14 	call	0x2924	; 0x2924 <wait200us>

// setup Counter1
  ovcnt16 = 0;
    2cf4:	10 92 4e 01 	sts	0x014E, r1
    2cf8:	10 92 4d 01 	sts	0x014D, r1
  TCCR1A = 0;			// set Counter1 to normal Mode
    2cfc:	10 92 80 00 	sts	0x0080, r1
  TCNT1 = 0;			//set Counter to 0
    2d00:	10 92 85 00 	sts	0x0085, r1
    2d04:	10 92 84 00 	sts	0x0084, r1
  TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// clear interrupt flags
    2d08:	87 e2       	ldi	r24, 0x27	; 39
    2d0a:	86 bb       	out	0x16, r24	; 22
#ifndef INHIBIT_SLEEP_MODE
  TIMSK1 = (1<<TOIE1) | (1<<ICIE1);	// enable Timer overflow interrupt and input capture interrupt
    2d0c:	81 e2       	ldi	r24, 0x21	; 33
    2d0e:	80 93 6f 00 	sts	0x006F, r24
  unfinished = 1;
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	80 93 61 01 	sts	0x0161, r24
#endif
  R_PORT = HiPinR_H;           	// switch R_H resistor port for HighPin to VCC
    2d18:	e5 b8       	out	0x05, r14	; 5
  if(PartFound == PART_FET) {
    2d1a:	90 91 07 01 	lds	r25, 0x0107
    2d1e:	93 30       	cpi	r25, 0x03	; 3
    2d20:	71 f4       	brne	.+28     	; 0x2d3e <ReadCapacity+0x2dc>
     // charge capacitor with R_H resistor
     TCCR1B = (1<<CS10);	//Start counter 1MHz or 8MHz
    2d22:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = (((1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK) & ~(1<<HighPin));	// release only HighPin ADC port
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	01 2e       	mov	r0, r17
    2d2c:	02 c0       	rjmp	.+4      	; 0x2d32 <ReadCapacity+0x2d0>
    2d2e:	88 0f       	add	r24, r24
    2d30:	99 1f       	adc	r25, r25
    2d32:	0a 94       	dec	r0
    2d34:	e2 f7       	brpl	.-8      	; 0x2d2e <ReadCapacity+0x2cc>
    2d36:	80 95       	com	r24
    2d38:	8f 70       	andi	r24, 0x0F	; 15
    2d3a:	87 b9       	out	0x07, r24	; 7
    2d3c:	17 c0       	rjmp	.+46     	; 0x2d6c <ReadCapacity+0x30a>
  } else {
     TCCR1B =  (1<<CS10);	//start counter 1MHz or 8MHz
    2d3e:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
    2d42:	87 b8       	out	0x07, r8	; 7
    2d44:	13 c0       	rjmp	.+38     	; 0x2d6c <ReadCapacity+0x30a>
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
     ovcnt16++;
  }
#else
  while(unfinished) {
    set_sleep_mode(SLEEP_MODE_IDLE);
    2d46:	83 b7       	in	r24, 0x33	; 51
    2d48:	81 7f       	andi	r24, 0xF1	; 241
    2d4a:	83 bf       	out	0x33, r24	; 51
    sleep_mode();       /* wait for interrupt */
    2d4c:	83 b7       	in	r24, 0x33	; 51
    2d4e:	81 60       	ori	r24, 0x01	; 1
    2d50:	83 bf       	out	0x33, r24	; 51
    2d52:	88 95       	sleep
    2d54:	83 b7       	in	r24, 0x33	; 51
    2d56:	8e 7f       	andi	r24, 0xFE	; 254
    2d58:	83 bf       	out	0x33, r24	; 51
    wdt_reset();
    2d5a:	a8 95       	wdr
    if(ovcnt16 == (F_CPU/5000)) {
    2d5c:	80 91 4d 01 	lds	r24, 0x014D
    2d60:	90 91 4e 01 	lds	r25, 0x014E
    2d64:	56 e0       	ldi	r21, 0x06	; 6
    2d66:	80 34       	cpi	r24, 0x40	; 64
    2d68:	95 07       	cpc	r25, r21
    2d6a:	21 f0       	breq	.+8      	; 0x2d74 <ReadCapacity+0x312>
     // this OV was not counted, but was before the Input Capture
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
     ovcnt16++;
  }
#else
  while(unfinished) {
    2d6c:	80 91 61 01 	lds	r24, 0x0161
    2d70:	88 23       	and	r24, r24
    2d72:	49 f7       	brne	.-46     	; 0x2d46 <ReadCapacity+0x2e4>
    wdt_reset();
    if(ovcnt16 == (F_CPU/5000)) {
       break; 		//Timeout for Charging, above 12 s
    }
  }
  TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    2d74:	10 92 81 00 	sts	0x0081, r1
  tmpint = ICR1;		// get previous Input Capture Counter flag
    2d78:	c0 91 86 00 	lds	r28, 0x0086
    2d7c:	d0 91 87 00 	lds	r29, 0x0087
  TIMSK1 = (0<<TOIE1) | (0<<ICIE1);	// disable Timer overflow interrupt and input capture interrupt
    2d80:	10 92 6f 00 	sts	0x006F, r1
  if (TCNT1 < tmpint) {
    2d84:	80 91 84 00 	lds	r24, 0x0084
    2d88:	90 91 85 00 	lds	r25, 0x0085
    2d8c:	8c 17       	cp	r24, r28
    2d8e:	9d 07       	cpc	r25, r29
    2d90:	48 f4       	brcc	.+18     	; 0x2da4 <ReadCapacity+0x342>
     ovcnt16--;			// one ov to much
    2d92:	80 91 4d 01 	lds	r24, 0x014D
    2d96:	90 91 4e 01 	lds	r25, 0x014E
    2d9a:	01 97       	sbiw	r24, 0x01	; 1
    2d9c:	90 93 4e 01 	sts	0x014E, r25
    2da0:	80 93 4d 01 	sts	0x014D, r24
  }

#endif
//############################################################
  ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    2da4:	86 e9       	ldi	r24, 0x96	; 150
    2da6:	80 93 7a 00 	sts	0x007A, r24
  R_DDR = 0;			// switch R_H resistor port for input
    2daa:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// switch R_H resistor port pull up for HighPin off
    2dac:	15 b8       	out	0x05, r1	; 5
  adcv[2] = ReadADC(HighPin);   // get loaded voltage
    2dae:	81 2f       	mov	r24, r17
    2db0:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
  load_diff = adcv[2] + REF_C_KORR - ref_mv;	// build difference of capacitor voltage to Reference Voltage
    2db4:	20 91 44 01 	lds	r18, 0x0144
    2db8:	30 91 45 01 	lds	r19, 0x0145
    2dbc:	82 1b       	sub	r24, r18
    2dbe:	93 0b       	sbc	r25, r19
    2dc0:	0c 96       	adiw	r24, 0x0c	; 12
    2dc2:	90 93 77 01 	sts	0x0177, r25
    2dc6:	80 93 76 01 	sts	0x0176, r24
//############################################################
  if (ovcnt16 >= (F_CPU/10000)) {
    2dca:	80 91 4d 01 	lds	r24, 0x014D
    2dce:	90 91 4e 01 	lds	r25, 0x014E
    2dd2:	23 e0       	ldi	r18, 0x03	; 3
    2dd4:	80 32       	cpi	r24, 0x20	; 32
    2dd6:	92 07       	cpc	r25, r18
    2dd8:	08 f0       	brcs	.+2      	; 0x2ddc <ReadCapacity+0x37a>
    2dda:	00 c1       	rjmp	.+512    	; 0x2fdc <ReadCapacity+0x57a>
     wait_about1s();
#endif
     goto keinC;	// no normal end
  }
//  cap.cval_uncorrected = CombineII2Long(ovcnt16, tmpint);
  cap.cval_uncorrected.w[1] = ovcnt16;
    2ddc:	80 91 4d 01 	lds	r24, 0x014D
    2de0:	90 91 4e 01 	lds	r25, 0x014E
    2de4:	90 93 6d 01 	sts	0x016D, r25
    2de8:	80 93 6c 01 	sts	0x016C, r24
  cap.cval_uncorrected.w[0] = tmpint;
    2dec:	d0 93 6b 01 	sts	0x016B, r29
    2df0:	c0 93 6a 01 	sts	0x016A, r28

  cap.cpre = -12;			// cap.cval unit is pF 
    2df4:	84 ef       	ldi	r24, 0xF4	; 244
    2df6:	80 93 74 01 	sts	0x0174, r24
  if (ovcnt16 > 65) {
    2dfa:	80 91 4d 01 	lds	r24, 0x014D
    2dfe:	90 91 4e 01 	lds	r25, 0x014E
    2e02:	82 34       	cpi	r24, 0x42	; 66
    2e04:	91 05       	cpc	r25, r1
    2e06:	c8 f0       	brcs	.+50     	; 0x2e3a <ReadCapacity+0x3d8>
     cap.cval_uncorrected.dw /= 100;	// switch to next unit
    2e08:	60 91 6a 01 	lds	r22, 0x016A
    2e0c:	70 91 6b 01 	lds	r23, 0x016B
    2e10:	80 91 6c 01 	lds	r24, 0x016C
    2e14:	90 91 6d 01 	lds	r25, 0x016D
    2e18:	24 e6       	ldi	r18, 0x64	; 100
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	40 e0       	ldi	r20, 0x00	; 0
    2e1e:	50 e0       	ldi	r21, 0x00	; 0
    2e20:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
    2e24:	20 93 6a 01 	sts	0x016A, r18
    2e28:	30 93 6b 01 	sts	0x016B, r19
    2e2c:	40 93 6c 01 	sts	0x016C, r20
    2e30:	50 93 6d 01 	sts	0x016D, r21
     cap.cpre += 2;			// set unit, prevent overflow
    2e34:	86 ef       	ldi	r24, 0xF6	; 246
    2e36:	80 93 74 01 	sts	0x0174, r24
  }
  cap.cval_uncorrected.dw *= RHmultip;		// 708
    2e3a:	60 91 00 01 	lds	r22, 0x0100
    2e3e:	70 91 01 01 	lds	r23, 0x0101
    2e42:	80 e0       	ldi	r24, 0x00	; 0
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	20 91 6a 01 	lds	r18, 0x016A
    2e4a:	30 91 6b 01 	lds	r19, 0x016B
    2e4e:	40 91 6c 01 	lds	r20, 0x016C
    2e52:	50 91 6d 01 	lds	r21, 0x016D
    2e56:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
  cap.cval_uncorrected.dw /= (F_CPU / 10000);	// divide by 100 (@ 1MHz clock), 800 (@ 8MHz clock)
    2e5a:	20 e2       	ldi	r18, 0x20	; 32
    2e5c:	33 e0       	ldi	r19, 0x03	; 3
    2e5e:	40 e0       	ldi	r20, 0x00	; 0
    2e60:	50 e0       	ldi	r21, 0x00	; 0
    2e62:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
    2e66:	20 93 6a 01 	sts	0x016A, r18
    2e6a:	30 93 6b 01 	sts	0x016B, r19
    2e6e:	40 93 6c 01 	sts	0x016C, r20
    2e72:	50 93 6d 01 	sts	0x016D, r21
  cap.cval = cap.cval_uncorrected.dw;		// set the corrected cap.cval
    2e76:	e2 e6       	ldi	r30, 0x62	; 98
    2e78:	f1 e0       	ldi	r31, 0x01	; 1
    2e7a:	20 93 62 01 	sts	0x0162, r18
    2e7e:	31 83       	std	Z+1, r19	; 0x01
    2e80:	42 83       	std	Z+2, r20	; 0x02
    2e82:	53 83       	std	Z+3, r21	; 0x03
  Scale_C_with_vcc();
    2e84:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <Scale_C_with_vcc>
  if (cap.cpre == -12) {
    2e88:	80 91 74 01 	lds	r24, 0x0174
    2e8c:	84 3f       	cpi	r24, 0xF4	; 244
    2e8e:	09 f0       	breq	.+2      	; 0x2e92 <ReadCapacity+0x430>
    2e90:	55 c0       	rjmp	.+170    	; 0x2f3c <ReadCapacity+0x4da>
#if COMP_SLEW1 > COMP_SLEW2
     if (cap.cval < COMP_SLEW1) {
    2e92:	80 90 62 01 	lds	r8, 0x0162
    2e96:	90 90 63 01 	lds	r9, 0x0163
    2e9a:	a0 90 64 01 	lds	r10, 0x0164
    2e9e:	b0 90 65 01 	lds	r11, 0x0165
    2ea2:	50 ea       	ldi	r21, 0xA0	; 160
    2ea4:	85 16       	cp	r8, r21
    2ea6:	5f e0       	ldi	r21, 0x0F	; 15
    2ea8:	95 06       	cpc	r9, r21
    2eaa:	50 e0       	ldi	r21, 0x00	; 0
    2eac:	a5 06       	cpc	r10, r21
    2eae:	50 e0       	ldi	r21, 0x00	; 0
    2eb0:	b5 06       	cpc	r11, r21
    2eb2:	c0 f4       	brcc	.+48     	; 0x2ee4 <ReadCapacity+0x482>
        // add slew rate dependent offset
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
    2eb4:	a5 01       	movw	r20, r10
    2eb6:	94 01       	movw	r18, r8
    2eb8:	24 52       	subi	r18, 0x24	; 36
    2eba:	3f 4f       	sbci	r19, 0xFF	; 255
    2ebc:	4f 4f       	sbci	r20, 0xFF	; 255
    2ebe:	5f 4f       	sbci	r21, 0xFF	; 255
    2ec0:	60 ea       	ldi	r22, 0xA0	; 160
    2ec2:	7f e0       	ldi	r23, 0x0F	; 15
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
    2ecc:	28 0d       	add	r18, r8
    2ece:	39 1d       	adc	r19, r9
    2ed0:	4a 1d       	adc	r20, r10
    2ed2:	5b 1d       	adc	r21, r11
    2ed4:	20 93 62 01 	sts	0x0162, r18
    2ed8:	30 93 63 01 	sts	0x0163, r19
    2edc:	40 93 64 01 	sts	0x0164, r20
    2ee0:	50 93 65 01 	sts	0x0165, r21
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2ee4:	80 91 4c 01 	lds	r24, 0x014C
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	85 53       	subi	r24, 0x35	; 53
    2eec:	9e 4f       	sbci	r25, 0xFE	; 254
    2eee:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__eerd_byte_m168>
     if (cap.cval > tmpint) {
    2ef2:	20 91 62 01 	lds	r18, 0x0162
    2ef6:	30 91 63 01 	lds	r19, 0x0163
    2efa:	40 91 64 01 	lds	r20, 0x0164
    2efe:	50 91 65 01 	lds	r21, 0x0165
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2f02:	90 e0       	ldi	r25, 0x00	; 0
     if (cap.cval > tmpint) {
    2f04:	a0 e0       	ldi	r26, 0x00	; 0
    2f06:	b0 e0       	ldi	r27, 0x00	; 0
    2f08:	82 17       	cp	r24, r18
    2f0a:	93 07       	cpc	r25, r19
    2f0c:	a4 07       	cpc	r26, r20
    2f0e:	b5 07       	cpc	r27, r21
    2f10:	68 f4       	brcc	.+26     	; 0x2f2c <ReadCapacity+0x4ca>
         cap.cval -= tmpint;		//subtract zero offset (pF)
    2f12:	28 1b       	sub	r18, r24
    2f14:	39 0b       	sbc	r19, r25
    2f16:	4a 0b       	sbc	r20, r26
    2f18:	5b 0b       	sbc	r21, r27
    2f1a:	20 93 62 01 	sts	0x0162, r18
    2f1e:	30 93 63 01 	sts	0x0163, r19
    2f22:	40 93 64 01 	sts	0x0164, r20
    2f26:	50 93 65 01 	sts	0x0165, r21
    2f2a:	08 c0       	rjmp	.+16     	; 0x2f3c <ReadCapacity+0x4da>
     } else {
         cap.cval = 0;			//unsigned long may not reach negativ value
    2f2c:	10 92 62 01 	sts	0x0162, r1
    2f30:	10 92 63 01 	sts	0x0163, r1
    2f34:	10 92 64 01 	sts	0x0164, r1
    2f38:	10 92 65 01 	sts	0x0165, r1
  lcd_testpin(HighPin);
  lcd_space();
  DisplayValue(cap.cval,cap.cpre,'F',4);
  wait_about3s();
#endif
  R_DDR = HiPinR_L; 		//switch R_L for High-Pin to GND
    2f3c:	c4 b8       	out	0x04, r12	; 4
#if F_CPU < 2000001
   if(cap.cval < 50)
#else 
   if(cap.cval < 25)
    2f3e:	80 91 62 01 	lds	r24, 0x0162
    2f42:	90 91 63 01 	lds	r25, 0x0163
    2f46:	a0 91 64 01 	lds	r26, 0x0164
    2f4a:	b0 91 65 01 	lds	r27, 0x0165
    2f4e:	89 31       	cpi	r24, 0x19	; 25
    2f50:	91 05       	cpc	r25, r1
    2f52:	a1 05       	cpc	r26, r1
    2f54:	b1 05       	cpc	r27, r1
    2f56:	08 f4       	brcc	.+2      	; 0x2f5a <ReadCapacity+0x4f8>
    2f58:	41 c0       	rjmp	.+130    	; 0x2fdc <ReadCapacity+0x57a>
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
  vloss = 0;				// set lost voltage to zero
    2f5a:	cc 24       	eor	r12, r12
    2f5c:	dd 24       	eor	r13, r13
#endif
      goto keinC;	//capacity to low, < 50pF @1MHz (25pF @8MHz)
   }
   // end low capacity 
checkDiodes:
   if((NumOfDiodes > 0)  && (PartFound != PART_FET)) {
    2f5e:	80 91 05 01 	lds	r24, 0x0105
    2f62:	88 23       	and	r24, r24
    2f64:	21 f0       	breq	.+8      	; 0x2f6e <ReadCapacity+0x50c>
    2f66:	80 91 07 01 	lds	r24, 0x0107
    2f6a:	83 30       	cpi	r24, 0x03	; 3
    2f6c:	b9 f5       	brne	.+110    	; 0x2fdc <ReadCapacity+0x57a>
      wait_about1s();
#endif
      // nearly shure, that there is one or more diodes in reverse direction,
      // which would be wrongly detected as capacitor 
   } else {
      PartFound = PART_CAPACITOR;	//capacitor is found
    2f6e:	87 e0       	ldi	r24, 0x07	; 7
    2f70:	80 93 07 01 	sts	0x0107, r24
      if ((cap.cpre > cap.cpre_max) || ((cap.cpre == cap.cpre_max) && (cap.cval > cap.cval_max))) {
    2f74:	60 91 74 01 	lds	r22, 0x0174
    2f78:	80 91 75 01 	lds	r24, 0x0175
    2f7c:	86 17       	cp	r24, r22
    2f7e:	bc f0       	brlt	.+46     	; 0x2fae <ReadCapacity+0x54c>
    2f80:	68 17       	cp	r22, r24
    2f82:	61 f5       	brne	.+88     	; 0x2fdc <ReadCapacity+0x57a>
    2f84:	20 91 62 01 	lds	r18, 0x0162
    2f88:	30 91 63 01 	lds	r19, 0x0163
    2f8c:	40 91 64 01 	lds	r20, 0x0164
    2f90:	50 91 65 01 	lds	r21, 0x0165
    2f94:	80 91 66 01 	lds	r24, 0x0166
    2f98:	90 91 67 01 	lds	r25, 0x0167
    2f9c:	a0 91 68 01 	lds	r26, 0x0168
    2fa0:	b0 91 69 01 	lds	r27, 0x0169
    2fa4:	82 17       	cp	r24, r18
    2fa6:	93 07       	cpc	r25, r19
    2fa8:	a4 07       	cpc	r26, r20
    2faa:	b5 07       	cpc	r27, r21
    2fac:	b8 f4       	brcc	.+46     	; 0x2fdc <ReadCapacity+0x57a>
         // we have found a greater one
         cap.cval_max = cap.cval;
    2fae:	e2 e6       	ldi	r30, 0x62	; 98
    2fb0:	f1 e0       	ldi	r31, 0x01	; 1
    2fb2:	80 91 62 01 	lds	r24, 0x0162
    2fb6:	90 91 63 01 	lds	r25, 0x0163
    2fba:	a0 91 64 01 	lds	r26, 0x0164
    2fbe:	b0 91 65 01 	lds	r27, 0x0165
    2fc2:	80 93 66 01 	sts	0x0166, r24
    2fc6:	90 93 67 01 	sts	0x0167, r25
    2fca:	a0 93 68 01 	sts	0x0168, r26
    2fce:	b0 93 69 01 	sts	0x0169, r27
         cap.cpre_max = cap.cpre;
    2fd2:	63 8b       	std	Z+19, r22	; 0x13
#if FLASHEND > 0x1fff
         cap.v_loss = vloss;		// lost voltage in 0.01%
    2fd4:	d7 86       	std	Z+15, r13	; 0x0f
    2fd6:	c6 86       	std	Z+14, r12	; 0x0e
#endif
         cap.ca = LowPin;		// save LowPin
    2fd8:	00 8b       	std	Z+16, r16	; 0x10
         cap.cb = HighPin;		// save HighPin
    2fda:	11 8b       	std	Z+17, r17	; 0x11
keinC:
  // discharge capacitor again
//  EntladePins();		// discharge capacitors
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    2fdc:	88 e0       	ldi	r24, 0x08	; 8
    2fde:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    2fe0:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    2fe2:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    2fe4:	15 b8       	out	0x05, r1	; 5
  return;
 } // end ReadCapacity()
    2fe6:	df 91       	pop	r29
    2fe8:	cf 91       	pop	r28
    2fea:	1f 91       	pop	r17
    2fec:	0f 91       	pop	r16
    2fee:	ff 90       	pop	r15
    2ff0:	ef 90       	pop	r14
    2ff2:	df 90       	pop	r13
    2ff4:	cf 90       	pop	r12
    2ff6:	bf 90       	pop	r11
    2ff8:	af 90       	pop	r10
    2ffa:	9f 90       	pop	r9
    2ffc:	8f 90       	pop	r8
    2ffe:	08 95       	ret

00003000 <__vector_13>:
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
}
#ifndef INHIBIT_SLEEP_MODE
/* Interrupt Service Routine for timer1 Overflow */
 ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    3000:	1f 92       	push	r1
    3002:	0f 92       	push	r0
    3004:	0f b6       	in	r0, 0x3f	; 63
    3006:	0f 92       	push	r0
    3008:	11 24       	eor	r1, r1
    300a:	8f 93       	push	r24
    300c:	9f 93       	push	r25
 ovcnt16++;				// count overflow
    300e:	80 91 4d 01 	lds	r24, 0x014D
    3012:	90 91 4e 01 	lds	r25, 0x014E
    3016:	01 96       	adiw	r24, 0x01	; 1
    3018:	90 93 4e 01 	sts	0x014E, r25
    301c:	80 93 4d 01 	sts	0x014D, r24
}
    3020:	9f 91       	pop	r25
    3022:	8f 91       	pop	r24
    3024:	0f 90       	pop	r0
    3026:	0f be       	out	0x3f, r0	; 63
    3028:	0f 90       	pop	r0
    302a:	1f 90       	pop	r1
    302c:	18 95       	reti

0000302e <__vector_10>:
/* Interrupt Service Routine for timer1 capture event (Comparator) */
 ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    302e:	1f 92       	push	r1
    3030:	0f 92       	push	r0
    3032:	0f b6       	in	r0, 0x3f	; 63
    3034:	0f 92       	push	r0
    3036:	11 24       	eor	r1, r1
 unfinished = 0;			// clear unfinished flag
    3038:	10 92 61 01 	sts	0x0161, r1
}
    303c:	0f 90       	pop	r0
    303e:	0f be       	out	0x3f, r0	; 63
    3040:	0f 90       	pop	r0
    3042:	1f 90       	pop	r1
    3044:	18 95       	reti

00003046 <get_log>:
 } // end ReadInductance()


#if FLASHEND > 0x1fff
// get_log interpolate a table with the function -log(1 - (permil/1000))
uint16_t get_log(uint16_t permil) {
    3046:	cf 93       	push	r28
    3048:	df 93       	push	r29
  uint16_t y1, y2;			// table values
  uint16_t result;			// result of interpolation
  uint8_t tabind;			// index to table value
  uint8_t tabres;			// distance to lower table value, fraction of Log_Tab_Distance

  tabind = permil / Log_Tab_Distance;	// index to table
    304a:	24 e1       	ldi	r18, 0x14	; 20
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	b9 01       	movw	r22, r18
    3050:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <__udivmodhi4>
    3054:	dc 01       	movw	r26, r24
  tabres = permil % Log_Tab_Distance;	// fraction of table distance
  // interpolate the table of factors
  y1 = pgm_read_word(&LogTab[tabind]);	// get the lower table value
    3056:	70 e0       	ldi	r23, 0x00	; 0
    3058:	fb 01       	movw	r30, r22
    305a:	ee 0f       	add	r30, r30
    305c:	ff 1f       	adc	r31, r31
    305e:	e8 59       	subi	r30, 0x98	; 152
    3060:	ff 4f       	sbci	r31, 0xFF	; 255
    3062:	c5 91       	lpm	r28, Z+
    3064:	d4 91       	lpm	r29, Z+
  y2 = pgm_read_word(&LogTab[tabind+1]); // get the higher table value
    3066:	fb 01       	movw	r30, r22
    3068:	ee 0f       	add	r30, r30
    306a:	ff 1f       	adc	r31, r31
    306c:	e6 59       	subi	r30, 0x96	; 150
    306e:	ff 4f       	sbci	r31, 0xFF	; 255
    3070:	45 91       	lpm	r20, Z+
    3072:	54 91       	lpm	r21, Z+
  result = ((y2 - y1) * tabres ) / Log_Tab_Distance + y1; // interpolate
    3074:	4c 1b       	sub	r20, r28
    3076:	5d 0b       	sbc	r21, r29
    3078:	4a 9f       	mul	r20, r26
    307a:	c0 01       	movw	r24, r0
    307c:	4b 9f       	mul	r20, r27
    307e:	90 0d       	add	r25, r0
    3080:	5a 9f       	mul	r21, r26
    3082:	90 0d       	add	r25, r0
    3084:	11 24       	eor	r1, r1
    3086:	b9 01       	movw	r22, r18
    3088:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <__udivmodhi4>
    308c:	6c 0f       	add	r22, r28
    308e:	7d 1f       	adc	r23, r29
  return(result);
 }
    3090:	cb 01       	movw	r24, r22
    3092:	df 91       	pop	r29
    3094:	cf 91       	pop	r28
    3096:	08 95       	ret

00003098 <ReadInductance>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadInductance(void) {
    3098:	2f 92       	push	r2
    309a:	3f 92       	push	r3
    309c:	4f 92       	push	r4
    309e:	5f 92       	push	r5
    30a0:	6f 92       	push	r6
    30a2:	7f 92       	push	r7
    30a4:	8f 92       	push	r8
    30a6:	9f 92       	push	r9
    30a8:	af 92       	push	r10
    30aa:	bf 92       	push	r11
    30ac:	cf 92       	push	r12
    30ae:	df 92       	push	r13
    30b0:	ef 92       	push	r14
    30b2:	ff 92       	push	r15
    30b4:	0f 93       	push	r16
    30b6:	1f 93       	push	r17
    30b8:	df 93       	push	r29
    30ba:	cf 93       	push	r28
    30bc:	cd b7       	in	r28, 0x3d	; 61
    30be:	de b7       	in	r29, 0x3e	; 62
    30c0:	68 97       	sbiw	r28, 0x18	; 24
    30c2:	0f b6       	in	r0, 0x3f	; 63
    30c4:	f8 94       	cli
    30c6:	de bf       	out	0x3e, r29	; 62
    30c8:	0f be       	out	0x3f, r0	; 63
    30ca:	cd bf       	out	0x3d, r28	; 61
  int8_t ukorr;		// correction of comparator voltage
  uint8_t nr_pol1;	// number of successfull inductance measurement with polarity 1
  uint8_t nr_pol2;	// number of successfull inductance measurement with polarity 2


  if(PartFound != PART_RESISTOR) {
    30cc:	80 91 07 01 	lds	r24, 0x0107
    30d0:	86 30       	cpi	r24, 0x06	; 6
    30d2:	09 f0       	breq	.+2      	; 0x30d6 <ReadInductance+0x3e>
    30d4:	4b c2       	rjmp	.+1174   	; 0x356c <ReadInductance+0x4d4>
     return;	//We have found no resistor  
  }
  if (ResistorsFound != 1) {
    30d6:	80 91 5e 01 	lds	r24, 0x015E
    30da:	81 30       	cpi	r24, 0x01	; 1
    30dc:	09 f0       	breq	.+2      	; 0x30e0 <ReadInductance+0x48>
    30de:	46 c2       	rjmp	.+1164   	; 0x356c <ReadInductance+0x4d4>
     return;	// do not search for inductance, more than 1 resistor
  }
//  for (found=0;found<ResistorsFound;found++) {
//     if (resis[found].rx > 21000) continue;
     if (resis[found].rx > 21000) return;
    30e0:	80 91 18 01 	lds	r24, 0x0118
    30e4:	90 91 19 01 	lds	r25, 0x0119
    30e8:	a0 91 1a 01 	lds	r26, 0x011A
    30ec:	b0 91 1b 01 	lds	r27, 0x011B
    30f0:	89 30       	cpi	r24, 0x09	; 9
    30f2:	22 e5       	ldi	r18, 0x52	; 82
    30f4:	92 07       	cpc	r25, r18
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	a2 07       	cpc	r26, r18
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	b2 07       	cpc	r27, r18
    30fe:	08 f0       	brcs	.+2      	; 0x3102 <ReadInductance+0x6a>
    3100:	35 c2       	rjmp	.+1130   	; 0x356c <ReadInductance+0x4d4>
    3102:	99 24       	eor	r9, r9
    3104:	80 91 21 01 	lds	r24, 0x0121
    3108:	40 90 22 01 	lds	r4, 0x0122

     // we can check for Inductance, if resistance is below 2100 Ohm
     for (count=0;count<4;count++) {
        // Try four times (different direction and with delayed counter start)
        if (count < 2) {
    310c:	99 2d       	mov	r25, r9
    310e:	92 30       	cpi	r25, 0x02	; 2
    3110:	10 f4       	brcc	.+4      	; 0x3116 <ReadInductance+0x7e>
           // first and second pass, direction 1
           LowPin = resis[found].ra;
    3112:	88 2e       	mov	r8, r24
    3114:	02 c0       	rjmp	.+4      	; 0x311a <ReadInductance+0x82>
           HighPin = resis[found].rb;
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    3116:	84 2c       	mov	r8, r4
           HighPin = resis[found].ra;
    3118:	48 2e       	mov	r4, r24
        }
        HiADC = pgm_read_byte(&PinADCtab[HighPin]);
    311a:	e4 2d       	mov	r30, r4
    311c:	f0 e0       	ldi	r31, 0x00	; 0
    311e:	e3 5f       	subi	r30, 0xF3	; 243
    3120:	fe 4f       	sbci	r31, 0xFE	; 254
    3122:	24 91       	lpm	r18, Z+
        LoPinR_L = pgm_read_byte(&PinRLtab[LowPin]);	//R_L mask for HighPin R_L load
    3124:	e8 2d       	mov	r30, r8
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	e6 5f       	subi	r30, 0xF6	; 246
    312a:	fe 4f       	sbci	r31, 0xFE	; 254
    312c:	e4 91       	lpm	r30, Z+
        //==================================================================================
        // Measurement of Inductance values
        R_PORT = 0;		// switch R port to GND
    312e:	15 b8       	out	0x05, r1	; 5
        ADC_PORT =   TXD_VAL;		// switch ADC-Port to GND
    3130:	a8 e0       	ldi	r26, 0x08	; 8
    3132:	a8 b9       	out	0x08, r26	; 8
        if ((resis[found].rx < 240) && ((count & 0x01) == 0)) {
    3134:	80 91 18 01 	lds	r24, 0x0118
    3138:	90 91 19 01 	lds	r25, 0x0119
    313c:	a0 91 1a 01 	lds	r26, 0x011A
    3140:	b0 91 1b 01 	lds	r27, 0x011B
    3144:	80 3f       	cpi	r24, 0xF0	; 240
    3146:	91 05       	cpc	r25, r1
    3148:	a1 05       	cpc	r26, r1
    314a:	b1 05       	cpc	r27, r1
    314c:	b8 f4       	brcc	.+46     	; 0x317c <ReadInductance+0xe4>
    314e:	90 fc       	sbrc	r9, 0
    3150:	15 c0       	rjmp	.+42     	; 0x317c <ReadInductance+0xe4>
           // we can use PinR_L for measurement
           mess_r = RR680MI - R_L_VAL;			// use only pin output resistance
    3152:	a0 90 02 01 	lds	r10, 0x0102
    3156:	b0 90 03 01 	lds	r11, 0x0103
    315a:	80 e7       	ldi	r24, 0x70	; 112
    315c:	95 ee       	ldi	r25, 0xE5	; 229
    315e:	a8 0e       	add	r10, r24
    3160:	b9 1e       	adc	r11, r25
           ADC_DDR = HiADC | (1<<LowPin) | TXD_MSK;	// switch HiADC and Low Pin to GND, 
    3162:	32 2f       	mov	r19, r18
    3164:	38 60       	ori	r19, 0x08	; 8
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	08 2c       	mov	r0, r8
    316c:	02 c0       	rjmp	.+4      	; 0x3172 <ReadInductance+0xda>
    316e:	88 0f       	add	r24, r24
    3170:	99 1f       	adc	r25, r25
    3172:	0a 94       	dec	r0
    3174:	e2 f7       	brpl	.-8      	; 0x316e <ReadInductance+0xd6>
    3176:	38 2b       	or	r19, r24
    3178:	37 b9       	out	0x07, r19	; 7
    317a:	08 c0       	rjmp	.+16     	; 0x318c <ReadInductance+0xf4>
        } else {
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
    317c:	e4 b9       	out	0x04, r30	; 4
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
    317e:	82 2f       	mov	r24, r18
    3180:	88 60       	ori	r24, 0x08	; 8
    3182:	87 b9       	out	0x07, r24	; 7
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
    3184:	a0 90 02 01 	lds	r10, 0x0102
    3188:	b0 90 03 01 	lds	r11, 0x0103
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    318c:	30 e0       	ldi	r19, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    318e:	88 2d       	mov	r24, r8
    3190:	28 8f       	std	Y+24, r18	; 0x18
    3192:	3f 8b       	std	Y+23, r19	; 0x17
    3194:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <W10msReadADC>
    3198:	6c 01       	movw	r12, r24
            total_r =  ReadADC(HighPin);
    319a:	84 2d       	mov	r24, r4
    319c:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
    31a0:	ac 01       	movw	r20, r24
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    31a2:	28 8d       	ldd	r18, Y+24	; 0x18
    31a4:	3f 89       	ldd	r19, Y+23	; 0x17
    31a6:	92 e0       	ldi	r25, 0x02	; 2
    31a8:	c9 16       	cp	r12, r25
    31aa:	d1 04       	cpc	r13, r1
    31ac:	18 f4       	brcc	.+6      	; 0x31b4 <ReadInductance+0x11c>
    31ae:	42 30       	cpi	r20, 0x02	; 2
    31b0:	51 05       	cpc	r21, r1
    31b2:	18 f0       	brcs	.+6      	; 0x31ba <ReadInductance+0x122>
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    31b4:	3f 5f       	subi	r19, 0xFF	; 255
    31b6:	34 31       	cpi	r19, 0x14	; 20
    31b8:	51 f7       	brne	.-44     	; 0x318e <ReadInductance+0xf6>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
        // setup Analog Comparator
        ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    31ba:	a0 e4       	ldi	r26, 0x40	; 64
    31bc:	a0 93 7b 00 	sts	0x007B, r26
        ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    31c0:	b4 e5       	ldi	r27, 0x54	; 84
    31c2:	b0 bf       	out	0x30, r27	; 48
        ADMUX = (1<<REFS0) | LowPin;			// switch Mux to Low-Pin
    31c4:	88 2d       	mov	r24, r8
    31c6:	80 64       	ori	r24, 0x40	; 64
    31c8:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    31cc:	86 e1       	ldi	r24, 0x16	; 22
    31ce:	80 93 7a 00 	sts	0x007A, r24
   
      // setup Counter1
        timeconstant.w[1] = 0;		// set ov counter to 0
    31d2:	00 e0       	ldi	r16, 0x00	; 0
    31d4:	10 e0       	ldi	r17, 0x00	; 0
        TCCR1A = 0;			// set Counter1 to normal Mode
    31d6:	10 92 80 00 	sts	0x0080, r1
        TCNT1 = 0;			//set Counter to 0
    31da:	10 92 85 00 	sts	0x0085, r1
    31de:	10 92 84 00 	sts	0x0084, r1
        TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// reset TIFR or TIFR1
    31e2:	97 e2       	ldi	r25, 0x27	; 39
    31e4:	96 bb       	out	0x16, r25	; 22
        HiADC |= TXD_VAL;
    31e6:	28 60       	ori	r18, 0x08	; 8
        wait200us();			// wait for bandgap to start up
    31e8:	28 8f       	std	Y+24, r18	; 0x18
    31ea:	0e 94 92 14 	call	0x2924	; 0x2924 <wait200us>
        if ((count & 0x01) == 0 ) {
    31ee:	29 2c       	mov	r2, r9
    31f0:	33 24       	eor	r3, r3
    31f2:	d1 01       	movw	r26, r2
    31f4:	a1 70       	andi	r26, 0x01	; 1
    31f6:	b0 70       	andi	r27, 0x00	; 0
    31f8:	ba 8b       	std	Y+18, r27	; 0x12
    31fa:	a9 8b       	std	Y+17, r26	; 0x11
    31fc:	28 8d       	ldd	r18, Y+24	; 0x18
    31fe:	90 fc       	sbrc	r9, 0
    3200:	05 c0       	rjmp	.+10     	; 0x320c <ReadInductance+0x174>
           //first start counter, then start current
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    3202:	b1 e8       	ldi	r27, 0x81	; 129
    3204:	b0 93 81 00 	sts	0x0081, r27
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    3208:	28 b9       	out	0x08, r18	; 8
    320a:	08 c0       	rjmp	.+16     	; 0x321c <ReadInductance+0x184>
        } else {
           //first start current, then start counter with delay
           //parasitic capacity of coil can cause high current at the beginning
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    320c:	28 b9       	out	0x08, r18	; 8
      #if F_CPU >= 8000000UL
           wait3us();		// ignore current peak from capacity
    320e:	0e 94 9b 14 	call	0x2936	; 0x2936 <wait3us>
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
    3212:	20 e2       	ldi	r18, 0x20	; 32
    3214:	26 bb       	out	0x16, r18	; 22
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    3216:	81 e8       	ldi	r24, 0x81	; 129
    3218:	80 93 81 00 	sts	0x0081, r24
    321c:	c8 01       	movw	r24, r16
        }
      
      //******************************
        while(1) {
           // Wait, until  Input Capture is set
           ii = TI1_INT_FLAGS;		//read Timer flags
    321e:	46 b3       	in	r20, 0x16	; 22
           if (ii & (1<<ICF1))  {
    3220:	45 ff       	sbrs	r20, 5
    3222:	02 c0       	rjmp	.+4      	; 0x3228 <ReadInductance+0x190>
    3224:	8c 01       	movw	r16, r24
    3226:	0b c0       	rjmp	.+22     	; 0x323e <ReadInductance+0x1a6>
              break;
           }
           if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    3228:	40 ff       	sbrs	r20, 0
    322a:	f9 cf       	rjmp	.-14     	; 0x321e <ReadInductance+0x186>
              TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    322c:	a1 e0       	ldi	r26, 0x01	; 1
    322e:	a6 bb       	out	0x16, r26	; 22
              wdt_reset();
    3230:	a8 95       	wdr
    3232:	01 96       	adiw	r24, 0x01	; 1
              timeconstant.w[1]++;		// count one OV
              if(timeconstant.w[1] == (F_CPU/100000UL)) {
    3234:	80 35       	cpi	r24, 0x50	; 80
    3236:	91 05       	cpc	r25, r1
    3238:	91 f7       	brne	.-28     	; 0x321e <ReadInductance+0x186>
    323a:	00 e5       	ldi	r16, 0x50	; 80
    323c:	10 e0       	ldi	r17, 0x00	; 0
                 break; 	//Timeout for Charging, above 0.13 s
              }
           }
        }
        TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    323e:	10 92 81 00 	sts	0x0081, r1
        TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    3242:	b0 e2       	ldi	r27, 0x20	; 32
    3244:	b6 bb       	out	0x16, r27	; 22
        timeconstant.w[0] = ICR1;		// get previous Input Capture Counter flag
    3246:	20 91 86 00 	lds	r18, 0x0086
    324a:	30 91 87 00 	lds	r19, 0x0087
    324e:	79 01       	movw	r14, r18
      // check actual counter, if an additional overflow must be added
        if((TCNT1 > timeconstant.w[0]) && (ii & (1<<TOV1))) {
    3250:	80 91 84 00 	lds	r24, 0x0084
    3254:	90 91 85 00 	lds	r25, 0x0085
    3258:	28 17       	cp	r18, r24
    325a:	39 07       	cpc	r19, r25
    325c:	30 f4       	brcc	.+12     	; 0x326a <ReadInductance+0x1d2>
    325e:	40 ff       	sbrs	r20, 0
    3260:	04 c0       	rjmp	.+8      	; 0x326a <ReadInductance+0x1d2>
           // this OV was not counted, but was before the Input Capture
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    3262:	21 e0       	ldi	r18, 0x01	; 1
    3264:	26 bb       	out	0x16, r18	; 22
           timeconstant.w[1]++;			// count one additional OV
    3266:	0f 5f       	subi	r16, 0xFF	; 255
    3268:	1f 4f       	sbci	r17, 0xFF	; 255
        }

        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    326a:	88 e0       	ldi	r24, 0x08	; 8
    326c:	88 b9       	out	0x08, r24	; 8
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    326e:	96 e9       	ldi	r25, 0x96	; 150
    3270:	90 93 7a 00 	sts	0x007A, r25
        for (ii=0;ii<20;ii++) {
    3274:	20 e0       	ldi	r18, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    3276:	88 2d       	mov	r24, r8
    3278:	28 8f       	std	Y+24, r18	; 0x18
    327a:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <W10msReadADC>
    327e:	6c 01       	movw	r12, r24
            total_r =  ReadADC(HighPin);
    3280:	84 2d       	mov	r24, r4
    3282:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    3286:	28 8d       	ldd	r18, Y+24	; 0x18
    3288:	a2 e0       	ldi	r26, 0x02	; 2
    328a:	ca 16       	cp	r12, r26
    328c:	d1 04       	cpc	r13, r1
    328e:	18 f4       	brcc	.+6      	; 0x3296 <ReadInductance+0x1fe>
    3290:	82 30       	cpi	r24, 0x02	; 2
    3292:	91 05       	cpc	r25, r1
    3294:	18 f0       	brcs	.+6      	; 0x329c <ReadInductance+0x204>
           timeconstant.w[1]++;			// count one additional OV
        }

        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
        for (ii=0;ii<20;ii++) {
    3296:	2f 5f       	subi	r18, 0xFF	; 255
    3298:	24 31       	cpi	r18, 0x14	; 20
    329a:	69 f7       	brne	.-38     	; 0x3276 <ReadInductance+0x1de>
//  #undef CNT_ZERO_42
//  #undef CNT_ZERO_720
//  #define CNT_ZERO_42 7
//  #define CNT_ZERO_720 10
//#endif
        total_r = (mess_r + resis[found].rx + RRpinMI);
    329c:	c0 90 18 01 	lds	r12, 0x0118
    32a0:	d0 90 19 01 	lds	r13, 0x0119
    32a4:	80 91 47 01 	lds	r24, 0x0147
    32a8:	90 91 48 01 	lds	r25, 0x0148
    32ac:	c8 0e       	add	r12, r24
    32ae:	d9 1e       	adc	r13, r25
    32b0:	ca 0c       	add	r12, r10
    32b2:	db 1c       	adc	r13, r11
//        if (total_r > 7000) cnt_diff = 1;
//        if (total_r > 14000) cnt_diff = 2;
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
        // Voltage of comparator in % of umax
     #ifdef AUTO_CAL
        tmpint = (ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset))) ;
    32b4:	89 ec       	ldi	r24, 0xC9	; 201
    32b6:	91 e0       	ldi	r25, 0x01	; 1
    32b8:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__eerd_word_m168>
    32bc:	20 91 44 01 	lds	r18, 0x0144
    32c0:	30 91 45 01 	lds	r19, 0x0145
    32c4:	28 0f       	add	r18, r24
    32c6:	39 1f       	adc	r19, r25
     #else
        tmpint = (ref_mv + REF_C_KORR);
     #endif
        if (mess_r < R_L_VAL) {
    32c8:	b0 e9       	ldi	r27, 0x90	; 144
    32ca:	ab 16       	cp	r10, r27
    32cc:	ba e1       	ldi	r27, 0x1A	; 26
    32ce:	bb 06       	cpc	r11, r27
    32d0:	b8 f4       	brcc	.+46     	; 0x3300 <ReadInductance+0x268>
           // measurement without 680 Ohm
           cnt_diff = CNT_ZERO_42;
           if (timeconstant.dw < 225) {
    32d2:	81 ee       	ldi	r24, 0xE1	; 225
    32d4:	e8 16       	cp	r14, r24
    32d6:	f1 04       	cpc	r15, r1
    32d8:	01 05       	cpc	r16, r1
    32da:	11 05       	cpc	r17, r1
    32dc:	38 f4       	brcc	.+14     	; 0x32ec <ReadInductance+0x254>
              ukorr = (timeconstant.w[0] / 5) - 20;
    32de:	c7 01       	movw	r24, r14
    32e0:	65 e0       	ldi	r22, 0x05	; 5
    32e2:	70 e0       	ldi	r23, 0x00	; 0
    32e4:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <__udivmodhi4>
    32e8:	64 51       	subi	r22, 0x14	; 20
    32ea:	01 c0       	rjmp	.+2      	; 0x32ee <ReadInductance+0x256>
           } else {
              ukorr = 25;
    32ec:	69 e1       	ldi	r22, 0x19	; 25
           }
           tmpint -= (((REF_L_KORR * 10) / 10) + ukorr);
    32ee:	28 52       	subi	r18, 0x28	; 40
    32f0:	30 40       	sbci	r19, 0x00	; 0
    32f2:	77 27       	eor	r23, r23
    32f4:	67 fd       	sbrc	r22, 7
    32f6:	70 95       	com	r23
    32f8:	26 1b       	sub	r18, r22
    32fa:	37 0b       	sbc	r19, r23
     #else
        tmpint = (ref_mv + REF_C_KORR);
     #endif
        if (mess_r < R_L_VAL) {
           // measurement without 680 Ohm
           cnt_diff = CNT_ZERO_42;
    32fc:	66 e0       	ldi	r22, 0x06	; 6
    32fe:	08 c0       	rjmp	.+16     	; 0x3310 <ReadInductance+0x278>
//#endif
        total_r = (mess_r + resis[found].rx + RRpinMI);
//        cnt_diff = 0;
//        if (total_r > 7000) cnt_diff = 1;
//        if (total_r > 14000) cnt_diff = 2;
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
    3300:	c6 01       	movw	r24, r12
    3302:	60 eb       	ldi	r22, 0xB0	; 176
    3304:	76 e3       	ldi	r23, 0x36	; 54
    3306:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <__udivmodhi4>
           }
           tmpint -= (((REF_L_KORR * 10) / 10) + ukorr);
        } else {
           // measurement with 680 Ohm resistor
           // if 680 Ohm resistor is used, use REF_L_KORR for correction
           cnt_diff += CNT_ZERO_720;
    330a:	69 5f       	subi	r22, 0xF9	; 249
           tmpint += REF_L_KORR;
    330c:	28 5d       	subi	r18, 0xD8	; 216
    330e:	3f 4f       	sbci	r19, 0xFF	; 255
        }
        if (timeconstant.dw > cnt_diff) timeconstant.dw -= cnt_diff;
    3310:	70 e0       	ldi	r23, 0x00	; 0
    3312:	80 e0       	ldi	r24, 0x00	; 0
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	6e 15       	cp	r22, r14
    3318:	7f 05       	cpc	r23, r15
    331a:	80 07       	cpc	r24, r16
    331c:	91 07       	cpc	r25, r17
    331e:	28 f4       	brcc	.+10     	; 0x332a <ReadInductance+0x292>
    3320:	e6 1a       	sub	r14, r22
    3322:	f7 0a       	sbc	r15, r23
    3324:	08 0b       	sbc	r16, r24
    3326:	19 0b       	sbc	r17, r25
    3328:	03 c0       	rjmp	.+6      	; 0x3330 <ReadInductance+0x298>
        else          timeconstant.dw = 0;
    332a:	ee 24       	eor	r14, r14
    332c:	ff 24       	eor	r15, r15
    332e:	87 01       	movw	r16, r14
       
        if ((count&0x01) == 1) {
    3330:	a9 89       	ldd	r26, Y+17	; 0x11
    3332:	ba 89       	ldd	r27, Y+18	; 0x12
    3334:	10 97       	sbiw	r26, 0x00	; 0
    3336:	41 f0       	breq	.+16     	; 0x3348 <ReadInductance+0x2b0>
           // second pass with delayed counter start
           timeconstant.dw += (3 * (F_CPU/1000000UL))+10;
    3338:	82 e2       	ldi	r24, 0x22	; 34
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	a0 e0       	ldi	r26, 0x00	; 0
    333e:	b0 e0       	ldi	r27, 0x00	; 0
    3340:	e8 0e       	add	r14, r24
    3342:	f9 1e       	adc	r15, r25
    3344:	0a 1f       	adc	r16, r26
    3346:	1b 1f       	adc	r17, r27
        }
        if (timeconstant.w[1] >= (F_CPU/100000UL)) timeconstant.dw = 0; // no transition found
    3348:	00 35       	cpi	r16, 0x50	; 80
    334a:	11 05       	cpc	r17, r1
    334c:	18 f0       	brcs	.+6      	; 0x3354 <ReadInductance+0x2bc>
    334e:	ee 24       	eor	r14, r14
    3350:	ff 24       	eor	r15, r15
    3352:	87 01       	movw	r16, r14
        if (timeconstant.dw > 10) {
    3354:	9b e0       	ldi	r25, 0x0B	; 11
    3356:	e9 16       	cp	r14, r25
    3358:	f1 04       	cpc	r15, r1
    335a:	01 05       	cpc	r16, r1
    335c:	11 05       	cpc	r17, r1
    335e:	28 f0       	brcs	.+10     	; 0x336a <ReadInductance+0x2d2>
           timeconstant.dw -= 1;
    3360:	08 94       	sec
    3362:	e1 08       	sbc	r14, r1
    3364:	f1 08       	sbc	r15, r1
    3366:	01 09       	sbc	r16, r1
    3368:	11 09       	sbc	r17, r1
        }
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    336a:	c6 01       	movw	r24, r12
    336c:	a0 e0       	ldi	r26, 0x00	; 0
    336e:	b0 e0       	ldi	r27, 0x00	; 0
    3370:	8b 8b       	std	Y+19, r24	; 0x13
    3372:	9c 8b       	std	Y+20, r25	; 0x14
    3374:	ad 8b       	std	Y+21, r26	; 0x15
    3376:	be 8b       	std	Y+22, r27	; 0x16
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    3378:	b9 01       	movw	r22, r18
    337a:	80 e0       	ldi	r24, 0x00	; 0
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	28 ee       	ldi	r18, 0xE8	; 232
    3380:	33 e0       	ldi	r19, 0x03	; 3
    3382:	40 e0       	ldi	r20, 0x00	; 0
    3384:	50 e0       	ldi	r21, 0x00	; 0
    3386:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
    338a:	2b 01       	movw	r4, r22
    338c:	3c 01       	movw	r6, r24
        if (timeconstant.w[1] >= (F_CPU/100000UL)) timeconstant.dw = 0; // no transition found
        if (timeconstant.dw > 10) {
           timeconstant.dw -= 1;
        }
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    338e:	b5 01       	movw	r22, r10
    3390:	80 e0       	ldi	r24, 0x00	; 0
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	20 91 40 01 	lds	r18, 0x0140
    3398:	30 91 41 01 	lds	r19, 0x0141
    339c:	40 e0       	ldi	r20, 0x00	; 0
    339e:	50 e0       	ldi	r21, 0x00	; 0
    33a0:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
    33a4:	2b 89       	ldd	r18, Y+19	; 0x13
    33a6:	3c 89       	ldd	r19, Y+20	; 0x14
    33a8:	4d 89       	ldd	r20, Y+21	; 0x15
    33aa:	5e 89       	ldd	r21, Y+22	; 0x16
    33ac:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    33b0:	40 e0       	ldi	r20, 0x00	; 0
    33b2:	50 e0       	ldi	r21, 0x00	; 0
    33b4:	c3 01       	movw	r24, r6
    33b6:	b2 01       	movw	r22, r4
    33b8:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
//        per_ref2 = (uint8_t)MEM2_read_byte(&LogTab[per_ref1]);	// -log(1 - per_ref1/100)
        per_ref2 = get_log(per_ref1);		// -log(1 - per_ref1/1000)
    33bc:	c9 01       	movw	r24, r18
    33be:	0e 94 23 18 	call	0x3046	; 0x3046 <get_log>
    33c2:	6c 01       	movw	r12, r24
          }
#endif
/* ********************************************************* */
        // lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    33c4:	6b 89       	ldd	r22, Y+19	; 0x13
    33c6:	7c 89       	ldd	r23, Y+20	; 0x14
    33c8:	8d 89       	ldd	r24, Y+21	; 0x15
    33ca:	9e 89       	ldd	r25, Y+22	; 0x16
    33cc:	a8 01       	movw	r20, r16
    33ce:	97 01       	movw	r18, r14
    33d0:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
    33d4:	2b 01       	movw	r4, r22
    33d6:	3c 01       	movw	r6, r24
             wait_about2s();
          }
#endif
/* ********************************************************* */
        // lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
    33d8:	b6 01       	movw	r22, r12
    33da:	80 e0       	ldi	r24, 0x00	; 0
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	e3 e0       	ldi	r30, 0x03	; 3
    33e0:	66 0f       	add	r22, r22
    33e2:	77 1f       	adc	r23, r23
    33e4:	88 1f       	adc	r24, r24
    33e6:	99 1f       	adc	r25, r25
    33e8:	ea 95       	dec	r30
    33ea:	d1 f7       	brne	.-12     	; 0x33e0 <ReadInductance+0x348>
    33ec:	6b 5f       	subi	r22, 0xFB	; 251
    33ee:	7f 4f       	sbci	r23, 0xFF	; 255
    33f0:	8f 4f       	sbci	r24, 0xFF	; 255
    33f2:	9f 4f       	sbci	r25, 0xFF	; 255
    33f4:	2a e0       	ldi	r18, 0x0A	; 10
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	40 e0       	ldi	r20, 0x00	; 0
    33fa:	50 e0       	ldi	r21, 0x00	; 0
    33fc:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    3400:	40 e0       	ldi	r20, 0x00	; 0
    3402:	50 e0       	ldi	r21, 0x00	; 0
    3404:	c3 01       	movw	r24, r6
    3406:	b2 01       	movw	r22, r4
    3408:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
    340c:	f1 01       	movw	r30, r2
    340e:	ee 0f       	add	r30, r30
    3410:	ff 1f       	adc	r31, r31
    3412:	ee 0f       	add	r30, r30
    3414:	ff 1f       	adc	r31, r31
    3416:	a1 e0       	ldi	r26, 0x01	; 1
    3418:	b0 e0       	ldi	r27, 0x00	; 0
    341a:	ac 0f       	add	r26, r28
    341c:	bd 1f       	adc	r27, r29
    341e:	ea 0f       	add	r30, r26
    3420:	fb 1f       	adc	r31, r27
    3422:	20 83       	st	Z, r18
    3424:	31 83       	std	Z+1, r19	; 0x01
    3426:	42 83       	std	Z+2, r20	; 0x02
    3428:	53 83       	std	Z+3, r21	; 0x03
        if (((count&0x01) == 0) && (timeconstant.dw > ((F_CPU/1000000UL)+3))) {
    342a:	89 89       	ldd	r24, Y+17	; 0x11
    342c:	9a 89       	ldd	r25, Y+18	; 0x12
    342e:	00 97       	sbiw	r24, 0x00	; 0
    3430:	99 f4       	brne	.+38     	; 0x3458 <ReadInductance+0x3c0>
    3432:	9c e0       	ldi	r25, 0x0C	; 12
    3434:	e9 16       	cp	r14, r25
    3436:	f1 04       	cpc	r15, r1
    3438:	01 05       	cpc	r16, r1
    343a:	11 05       	cpc	r17, r1
    343c:	68 f0       	brcs	.+26     	; 0x3458 <ReadInductance+0x3c0>
           // transition is found, measurement with delayed counter start is not necessary
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
    343e:	f1 01       	movw	r30, r2
    3440:	31 96       	adiw	r30, 0x01	; 1
    3442:	ee 0f       	add	r30, r30
    3444:	ff 1f       	adc	r31, r31
    3446:	ee 0f       	add	r30, r30
    3448:	ff 1f       	adc	r31, r31
    344a:	ea 0f       	add	r30, r26
    344c:	fb 1f       	adc	r31, r27
    344e:	20 83       	st	Z, r18
    3450:	31 83       	std	Z+1, r19	; 0x01
    3452:	42 83       	std	Z+2, r20	; 0x02
    3454:	53 83       	std	Z+3, r21	; 0x03
           count++;		// skip the delayed measurement
    3456:	93 94       	inc	r9
        }
        wdt_reset();
    3458:	a8 95       	wdr
//  for (found=0;found<ResistorsFound;found++) {
//     if (resis[found].rx > 21000) continue;
     if (resis[found].rx > 21000) return;

     // we can check for Inductance, if resistance is below 2100 Ohm
     for (count=0;count<4;count++) {
    345a:	93 94       	inc	r9
    345c:	a9 2d       	mov	r26, r9
    345e:	a4 30       	cpi	r26, 0x04	; 4
    3460:	08 f4       	brcc	.+2      	; 0x3464 <ReadInductance+0x3cc>
    3462:	50 ce       	rjmp	.-864    	; 0x3104 <ReadInductance+0x6c>
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
           count++;		// skip the delayed measurement
        }
        wdt_reset();
     }  //end for count
     ADC_PORT = TXD_VAL;		// switch ADC Port to GND
    3464:	88 e0       	ldi	r24, 0x08	; 8
    3466:	88 b9       	out	0x08, r24	; 8
     wait_about20ms();
    3468:	84 e0       	ldi	r24, 0x04	; 4
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>
        resis[found].lx = inductance[0];
     }
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];		// other polarity, delayed start
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
#else
     nr_pol1 = 0;
    3470:	61 e0       	ldi	r22, 0x01	; 1
    3472:	2d 81       	ldd	r18, Y+5	; 0x05
    3474:	3e 81       	ldd	r19, Y+6	; 0x06
    3476:	4f 81       	ldd	r20, Y+7	; 0x07
    3478:	58 85       	ldd	r21, Y+8	; 0x08
    347a:	89 81       	ldd	r24, Y+1	; 0x01
    347c:	9a 81       	ldd	r25, Y+2	; 0x02
    347e:	ab 81       	ldd	r26, Y+3	; 0x03
    3480:	bc 81       	ldd	r27, Y+4	; 0x04
    3482:	82 17       	cp	r24, r18
    3484:	93 07       	cpc	r25, r19
    3486:	a4 07       	cpc	r26, r20
    3488:	b5 07       	cpc	r27, r21
    348a:	08 f0       	brcs	.+2      	; 0x348e <ReadInductance+0x3f6>
    348c:	60 e0       	ldi	r22, 0x00	; 0
     if (inductance[1] > inductance[0]) { nr_pol1 = 1; } 
     nr_pol2 = 2;
     if (inductance[3] > inductance[2]) { nr_pol2 = 3; } 
    348e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3490:	3e 85       	ldd	r19, Y+14	; 0x0e
    3492:	4f 85       	ldd	r20, Y+15	; 0x0f
    3494:	58 89       	ldd	r21, Y+16	; 0x10
    3496:	89 85       	ldd	r24, Y+9	; 0x09
    3498:	9a 85       	ldd	r25, Y+10	; 0x0a
    349a:	ab 85       	ldd	r26, Y+11	; 0x0b
    349c:	bc 85       	ldd	r27, Y+12	; 0x0c
    349e:	82 17       	cp	r24, r18
    34a0:	93 07       	cpc	r25, r19
    34a2:	a4 07       	cpc	r26, r20
    34a4:	b5 07       	cpc	r27, r21
    34a6:	10 f0       	brcs	.+4      	; 0x34ac <ReadInductance+0x414>
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];		// other polarity, delayed start
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
#else
     nr_pol1 = 0;
     if (inductance[1] > inductance[0]) { nr_pol1 = 1; } 
     nr_pol2 = 2;
    34a8:	72 e0       	ldi	r23, 0x02	; 2
    34aa:	01 c0       	rjmp	.+2      	; 0x34ae <ReadInductance+0x416>
     if (inductance[3] > inductance[2]) { nr_pol2 = 3; } 
    34ac:	73 e0       	ldi	r23, 0x03	; 3
     if (inductance[nr_pol2] < inductance[nr_pol1]) nr_pol1 = nr_pol2;
    34ae:	a7 2f       	mov	r26, r23
    34b0:	b0 e0       	ldi	r27, 0x00	; 0
    34b2:	aa 0f       	add	r26, r26
    34b4:	bb 1f       	adc	r27, r27
    34b6:	aa 0f       	add	r26, r26
    34b8:	bb 1f       	adc	r27, r27
    34ba:	ce 01       	movw	r24, r28
    34bc:	01 96       	adiw	r24, 0x01	; 1
    34be:	a8 0f       	add	r26, r24
    34c0:	b9 1f       	adc	r27, r25
    34c2:	e6 2f       	mov	r30, r22
    34c4:	f0 e0       	ldi	r31, 0x00	; 0
    34c6:	ee 0f       	add	r30, r30
    34c8:	ff 1f       	adc	r31, r31
    34ca:	ee 0f       	add	r30, r30
    34cc:	ff 1f       	adc	r31, r31
    34ce:	e8 0f       	add	r30, r24
    34d0:	f9 1f       	adc	r31, r25
    34d2:	2d 91       	ld	r18, X+
    34d4:	3d 91       	ld	r19, X+
    34d6:	4d 91       	ld	r20, X+
    34d8:	5c 91       	ld	r21, X
    34da:	80 81       	ld	r24, Z
    34dc:	91 81       	ldd	r25, Z+1	; 0x01
    34de:	a2 81       	ldd	r26, Z+2	; 0x02
    34e0:	b3 81       	ldd	r27, Z+3	; 0x03
    34e2:	28 17       	cp	r18, r24
    34e4:	39 07       	cpc	r19, r25
    34e6:	4a 07       	cpc	r20, r26
    34e8:	5b 07       	cpc	r21, r27
    34ea:	08 f4       	brcc	.+2      	; 0x34ee <ReadInductance+0x456>
    34ec:	67 2f       	mov	r22, r23
     resis[found].lx = inductance[nr_pol1];
    34ee:	26 2f       	mov	r18, r22
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	f9 01       	movw	r30, r18
    34f4:	ee 0f       	add	r30, r30
    34f6:	ff 1f       	adc	r31, r31
    34f8:	ee 0f       	add	r30, r30
    34fa:	ff 1f       	adc	r31, r31
    34fc:	ec 0f       	add	r30, r28
    34fe:	fd 1f       	adc	r31, r29
    3500:	61 81       	ldd	r22, Z+1	; 0x01
    3502:	72 81       	ldd	r23, Z+2	; 0x02
    3504:	83 81       	ldd	r24, Z+3	; 0x03
    3506:	94 81       	ldd	r25, Z+4	; 0x04
    3508:	60 93 1c 01 	sts	0x011C, r22
    350c:	70 93 1d 01 	sts	0x011D, r23
    3510:	80 93 1e 01 	sts	0x011E, r24
    3514:	90 93 1f 01 	sts	0x011F, r25
     resis[found].lpre = -5;	// 10 uH units
    3518:	4b ef       	ldi	r20, 0xFB	; 251
    351a:	40 93 20 01 	sts	0x0120, r20
     if (((nr_pol1 & 1) == 1) || (resis[found].rx >= 240)) {
    351e:	20 fd       	sbrc	r18, 0
    3520:	0d c0       	rjmp	.+26     	; 0x353c <ReadInductance+0x4a4>
    3522:	20 91 18 01 	lds	r18, 0x0118
    3526:	30 91 19 01 	lds	r19, 0x0119
    352a:	40 91 1a 01 	lds	r20, 0x011A
    352e:	50 91 1b 01 	lds	r21, 0x011B
    3532:	20 3f       	cpi	r18, 0xF0	; 240
    3534:	31 05       	cpc	r19, r1
    3536:	41 05       	cpc	r20, r1
    3538:	51 05       	cpc	r21, r1
    353a:	a8 f0       	brcs	.+42     	; 0x3566 <ReadInductance+0x4ce>
        // with 680 Ohm resistor total_r is more than 7460
        resis[found].lpre = -4;	// 100 uH units
    353c:	2c ef       	ldi	r18, 0xFC	; 252
    353e:	20 93 20 01 	sts	0x0120, r18
        resis[found].lx = (resis[found].lx + 5) / 10;
    3542:	6b 5f       	subi	r22, 0xFB	; 251
    3544:	7f 4f       	sbci	r23, 0xFF	; 255
    3546:	8f 4f       	sbci	r24, 0xFF	; 255
    3548:	9f 4f       	sbci	r25, 0xFF	; 255
    354a:	2a e0       	ldi	r18, 0x0A	; 10
    354c:	30 e0       	ldi	r19, 0x00	; 0
    354e:	40 e0       	ldi	r20, 0x00	; 0
    3550:	50 e0       	ldi	r21, 0x00	; 0
    3552:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
    3556:	20 93 1c 01 	sts	0x011C, r18
    355a:	30 93 1d 01 	sts	0x011D, r19
    355e:	40 93 1e 01 	sts	0x011E, r20
    3562:	50 93 1f 01 	sts	0x011F, r21
     } 
#endif
//  } // end loop for all resistors

  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    3566:	88 e0       	ldi	r24, 0x08	; 8
    3568:	87 b9       	out	0x07, r24	; 7
  R_DDR = 0;			// switch all resistor ports to input
    356a:	14 b8       	out	0x04, r1	; 4
#endif
  return;
 } // end ReadInductance()
    356c:	68 96       	adiw	r28, 0x18	; 24
    356e:	0f b6       	in	r0, 0x3f	; 63
    3570:	f8 94       	cli
    3572:	de bf       	out	0x3e, r29	; 62
    3574:	0f be       	out	0x3f, r0	; 63
    3576:	cd bf       	out	0x3d, r28	; 61
    3578:	cf 91       	pop	r28
    357a:	df 91       	pop	r29
    357c:	1f 91       	pop	r17
    357e:	0f 91       	pop	r16
    3580:	ff 90       	pop	r15
    3582:	ef 90       	pop	r14
    3584:	df 90       	pop	r13
    3586:	cf 90       	pop	r12
    3588:	bf 90       	pop	r11
    358a:	af 90       	pop	r10
    358c:	9f 90       	pop	r9
    358e:	8f 90       	pop	r8
    3590:	7f 90       	pop	r7
    3592:	6f 90       	pop	r6
    3594:	5f 90       	pop	r5
    3596:	4f 90       	pop	r4
    3598:	3f 90       	pop	r3
    359a:	2f 90       	pop	r2
    359c:	08 95       	ret

0000359e <W20msReadADC>:
    359e:	8f 93       	push	r24
    35a0:	84 e0       	ldi	r24, 0x04	; 4
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>
    35a8:	0b c0       	rjmp	.+22     	; 0x35c0 <to_read>

000035aa <W10msReadADC>:
    35aa:	8f 93       	push	r24
    35ac:	82 e0       	ldi	r24, 0x02	; 2
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>
    35b4:	05 c0       	rjmp	.+10     	; 0x35c0 <to_read>

000035b6 <W5msReadADC>:
    35b6:	8f 93       	push	r24
    35b8:	81 e0       	ldi	r24, 0x01	; 1
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	0e 94 b0 03 	call	0x760	; 0x760 <sleep_5ms>

000035c0 <to_read>:
    35c0:	8f 91       	pop	r24

000035c2 <ReadADC>:
    35c2:	1f 93       	push	r17
    35c4:	18 2f       	mov	r17, r24
    35c6:	10 64       	ori	r17, 0x40	; 64

000035c8 <get_sample>:
    35c8:	10 93 7c 00 	sts	0x007C, r17
    35cc:	e1 2f       	mov	r30, r17
    35ce:	e0 78       	andi	r30, 0x80	; 128
    35d0:	80 91 3d 01 	lds	r24, 0x013D
    35d4:	e8 17       	cp	r30, r24
    35d6:	61 f0       	breq	.+24     	; 0x35f0 <r2aa2>
    35d8:	0e 94 93 14 	call	0x2926	; 0x2926 <wait100us>
    35dc:	8e e9       	ldi	r24, 0x9E	; 158
    35de:	80 93 7a 00 	sts	0x007A, r24
    35e2:	83 e0       	ldi	r24, 0x03	; 3
    35e4:	83 bf       	out	0x33, r24	; 51
    35e6:	88 95       	sleep
    35e8:	82 e0       	ldi	r24, 0x02	; 2
    35ea:	83 bf       	out	0x33, r24	; 51
    35ec:	e0 93 3d 01 	sts	0x013D, r30

000035f0 <r2aa2>:
    35f0:	20 e0       	ldi	r18, 0x00	; 0
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	a9 01       	movw	r20, r18
    35f6:	e0 e0       	ldi	r30, 0x00	; 0
    35f8:	1f c0       	rjmp	.+62     	; 0x3638 <r2ae8>

000035fa <Loop>:
    35fa:	8e e9       	ldi	r24, 0x9E	; 158
    35fc:	80 93 7a 00 	sts	0x007A, r24
    3600:	83 e0       	ldi	r24, 0x03	; 3
    3602:	83 bf       	out	0x33, r24	; 51
    3604:	88 95       	sleep
    3606:	82 e0       	ldi	r24, 0x02	; 2
    3608:	83 bf       	out	0x33, r24	; 51
    360a:	60 91 78 00 	lds	r22, 0x0078
    360e:	70 91 79 00 	lds	r23, 0x0079
    3612:	26 0f       	add	r18, r22
    3614:	37 1f       	adc	r19, r23
    3616:	41 1d       	adc	r20, r1
    3618:	51 1d       	adc	r21, r1
    361a:	e4 30       	cpi	r30, 0x04	; 4
    361c:	61 f4       	brne	.+24     	; 0x3636 <r2ae6>
    361e:	80 91 3f 01 	lds	r24, 0x013F
    3622:	80 30       	cpi	r24, 0x00	; 0
    3624:	41 f0       	breq	.+16     	; 0x3636 <r2ae6>
    3626:	84 e0       	ldi	r24, 0x04	; 4
    3628:	20 30       	cpi	r18, 0x00	; 0
    362a:	38 07       	cpc	r19, r24
    362c:	20 f4       	brcc	.+8      	; 0x3636 <r2ae6>
    362e:	17 fd       	sbrc	r17, 7
    3630:	02 c0       	rjmp	.+4      	; 0x3636 <r2ae6>
    3632:	10 68       	ori	r17, 0x80	; 128
    3634:	c9 cf       	rjmp	.-110    	; 0x35c8 <get_sample>

00003636 <r2ae6>:
    3636:	ef 5f       	subi	r30, 0xFF	; 255

00003638 <r2ae8>:
    3638:	80 91 3c 01 	lds	r24, 0x013C
    363c:	e8 17       	cp	r30, r24
    363e:	e8 f2       	brcs	.-70     	; 0x35fa <Loop>
    3640:	17 ff       	sbrs	r17, 7
    3642:	05 c0       	rjmp	.+10     	; 0x364e <r2afe>
    3644:	60 91 3e 01 	lds	r22, 0x013E
    3648:	70 91 3f 01 	lds	r23, 0x013F
    364c:	04 c0       	rjmp	.+8      	; 0x3656 <r2b02>

0000364e <r2afe>:
    364e:	60 91 40 01 	lds	r22, 0x0140
    3652:	70 91 41 01 	lds	r23, 0x0141

00003656 <r2b02>:
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
    365e:	2f ef       	ldi	r18, 0xFF	; 255
    3660:	33 e0       	ldi	r19, 0x03	; 3
    3662:	40 e0       	ldi	r20, 0x00	; 0
    3664:	50 e0       	ldi	r21, 0x00	; 0
    3666:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
    366a:	b9 01       	movw	r22, r18
    366c:	ca 01       	movw	r24, r20
    366e:	20 91 3c 01 	lds	r18, 0x013C
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	40 e0       	ldi	r20, 0x00	; 0
    3676:	50 e0       	ldi	r21, 0x00	; 0
    3678:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
    367c:	c9 01       	movw	r24, r18
    367e:	1f 91       	pop	r17
    3680:	08 95       	ret

00003682 <GetESR>:
    3682:	2f 92       	push	r2
    3684:	3f 92       	push	r3
    3686:	4f 92       	push	r4
    3688:	5f 92       	push	r5
    368a:	6f 92       	push	r6
    368c:	7f 92       	push	r7
    368e:	8f 92       	push	r8
    3690:	9f 92       	push	r9
    3692:	af 92       	push	r10
    3694:	bf 92       	push	r11
    3696:	cf 92       	push	r12
    3698:	df 92       	push	r13
    369a:	ef 92       	push	r14
    369c:	ff 92       	push	r15
    369e:	0f 93       	push	r16
    36a0:	1f 93       	push	r17
    36a2:	df 93       	push	r29
    36a4:	cf 93       	push	r28
    36a6:	cd b7       	in	r28, 0x3d	; 61
    36a8:	de b7       	in	r29, 0x3e	; 62
    36aa:	6e 97       	sbiw	r28, 0x1e	; 30
    36ac:	0f b6       	in	r0, 0x3f	; 63
    36ae:	f8 94       	cli
    36b0:	de bf       	out	0x3e, r29	; 62
    36b2:	0f be       	out	0x3f, r0	; 63
    36b4:	cd bf       	out	0x3d, r28	; 61
    36b6:	66 2e       	mov	r6, r22
    36b8:	b8 2e       	mov	r11, r24
    36ba:	86 0f       	add	r24, r22
    36bc:	89 83       	std	Y+1, r24	; 0x01
    36be:	20 91 07 01 	lds	r18, 0x0107
    36c2:	27 30       	cpi	r18, 0x07	; 7
    36c4:	19 f5       	brne	.+70     	; 0x370c <ad_35e4>
    36c6:	20 91 66 01 	lds	r18, 0x0166
    36ca:	30 91 67 01 	lds	r19, 0x0167
    36ce:	40 91 68 01 	lds	r20, 0x0168
    36d2:	50 91 69 01 	lds	r21, 0x0169
    36d6:	10 91 75 01 	lds	r17, 0x0175
    36da:	09 c0       	rjmp	.+18     	; 0x36ee <ad_35ba>

000036dc <ad_35ac>:
    36dc:	ca 01       	movw	r24, r20
    36de:	b9 01       	movw	r22, r18
    36e0:	2a e0       	ldi	r18, 0x0A	; 10
    36e2:	31 2d       	mov	r19, r1
    36e4:	41 2d       	mov	r20, r1
    36e6:	51 2d       	mov	r21, r1
    36e8:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
    36ec:	1f 5f       	subi	r17, 0xFF	; 255

000036ee <ad_35ba>:
    36ee:	17 3f       	cpi	r17, 0xF7	; 247
    36f0:	ac f3       	brlt	.-22     	; 0x36dc <ad_35ac>
    36f2:	2c 8b       	std	Y+20, r18	; 0x14
    36f4:	3d 8b       	std	Y+21, r19	; 0x15
    36f6:	4e 8b       	std	Y+22, r20	; 0x16
    36f8:	5f 8b       	std	Y+23, r21	; 0x17
    36fa:	24 3b       	cpi	r18, 0xB4	; 180
    36fc:	60 e0       	ldi	r22, 0x00	; 0
    36fe:	36 07       	cpc	r19, r22
    3700:	41 05       	cpc	r20, r1
    3702:	51 05       	cpc	r21, r1
    3704:	18 f4       	brcc	.+6      	; 0x370c <ad_35e4>
    3706:	8f ef       	ldi	r24, 0xFF	; 255
    3708:	9f ef       	ldi	r25, 0xFF	; 255
    370a:	71 c1       	rjmp	.+738    	; 0x39ee <ad_exit>

0000370c <ad_35e4>:
    370c:	26 ed       	ldi	r18, 0xD6	; 214
    370e:	a2 2e       	mov	r10, r18
    3710:	02 c0       	rjmp	.+4      	; 0x3716 <ad_3604>

00003712 <ad_35fe>:
    3712:	94 ed       	ldi	r25, 0xD4	; 212
    3714:	a9 2e       	mov	r10, r25

00003716 <ad_3604>:
    3716:	ed e0       	ldi	r30, 0x0D	; 13
    3718:	f1 e0       	ldi	r31, 0x01	; 1
    371a:	e6 0d       	add	r30, r6
    371c:	f1 1d       	adc	r31, r1
    371e:	85 91       	lpm	r24, Z+
    3720:	88 60       	ori	r24, 0x08	; 8
    3722:	8e 87       	std	Y+14, r24	; 0x0e
    3724:	ed e0       	ldi	r30, 0x0D	; 13
    3726:	f1 e0       	ldi	r31, 0x01	; 1
    3728:	eb 0d       	add	r30, r11
    372a:	f1 1d       	adc	r31, r1
    372c:	85 91       	lpm	r24, Z+
    372e:	88 60       	ori	r24, 0x08	; 8
    3730:	8f 87       	std	Y+15, r24	; 0x0f
    3732:	ea e0       	ldi	r30, 0x0A	; 10
    3734:	f1 e0       	ldi	r31, 0x01	; 1
    3736:	e6 0d       	add	r30, r6
    3738:	f1 1d       	adc	r31, r1
    373a:	75 90       	lpm	r7, Z+
    373c:	ea e0       	ldi	r30, 0x0A	; 10
    373e:	f1 e0       	ldi	r31, 0x01	; 1
    3740:	eb 0d       	add	r30, r11
    3742:	f1 1d       	adc	r31, r1
    3744:	c5 90       	lpm	r12, Z+
    3746:	90 ec       	ldi	r25, 0xC0	; 192
    3748:	69 2a       	or	r6, r25
    374a:	b9 2a       	or	r11, r25
    374c:	81 e0       	ldi	r24, 0x01	; 1
    374e:	e8 2e       	mov	r14, r24
    3750:	f1 2c       	mov	r15, r1
    3752:	01 2d       	mov	r16, r1
    3754:	11 2d       	mov	r17, r1
    3756:	8e 83       	std	Y+6, r24	; 0x06
    3758:	1f 82       	std	Y+7, r1	; 0x07
    375a:	18 86       	std	Y+8, r1	; 0x08
    375c:	19 86       	std	Y+9, r1	; 0x09
    375e:	1a 86       	std	Y+10, r1	; 0x0a
    3760:	1b 86       	std	Y+11, r1	; 0x0b
    3762:	1c 86       	std	Y+12, r1	; 0x0c
    3764:	1d 86       	std	Y+13, r1	; 0x0d
    3766:	18 8e       	std	Y+24, r1	; 0x18
    3768:	19 8e       	std	Y+25, r1	; 0x19
    376a:	0e 94 b2 01 	call	0x364	; 0x364 <EntladePins>
    376e:	88 e0       	ldi	r24, 0x08	; 8
    3770:	88 b9       	out	0x08, r24	; 8
    3772:	60 92 7c 00 	sts	0x007C, r6
    3776:	0e 94 93 14 	call	0x2926	; 0x2926 <wait100us>
    377a:	3f 85       	ldd	r19, Y+15	; 0x0f
    377c:	37 b9       	out	0x07, r19	; 7
    377e:	75 b8       	out	0x05, r7	; 5
    3780:	74 b8       	out	0x04, r7	; 4
    3782:	0e 94 98 14 	call	0x2930	; 0x2930 <wait10us>
    3786:	0e 94 9c 14 	call	0x2938	; 0x2938 <wait2us>
    378a:	15 b8       	out	0x05, r1	; 5
    378c:	14 b8       	out	0x04, r1	; 4
    378e:	dd 24       	eor	r13, r13
    3790:	b4 ed       	ldi	r27, 0xD4	; 212
    3792:	9b 2e       	mov	r9, r27
    3794:	a6 ed       	ldi	r26, 0xD6	; 214
    3796:	8a 2e       	mov	r8, r26

00003798 <ad_3692>:
    3798:	3e 85       	ldd	r19, Y+14	; 0x0e
    379a:	37 b9       	out	0x07, r19	; 7
    379c:	75 b8       	out	0x05, r7	; 5
    379e:	74 b8       	out	0x04, r7	; 4
    37a0:	60 92 7c 00 	sts	0x007C, r6
    37a4:	a8 95       	wdr
    37a6:	a0 92 7a 00 	sts	0x007A, r10
    37aa:	80 91 7a 00 	lds	r24, 0x007A
    37ae:	86 fd       	sbrc	r24, 6
    37b0:	fc cf       	rjmp	.-8      	; 0x37aa <ad_3692+0x12>
    37b2:	a0 92 7a 00 	sts	0x007A, r10
    37b6:	80 91 7a 00 	lds	r24, 0x007A
    37ba:	86 fd       	sbrc	r24, 6
    37bc:	fc cf       	rjmp	.-8      	; 0x37b6 <ad_3692+0x1e>
    37be:	20 90 78 00 	lds	r2, 0x0078
    37c2:	30 90 79 00 	lds	r3, 0x0079
    37c6:	b0 92 7c 00 	sts	0x007C, r11
    37ca:	a0 92 7a 00 	sts	0x007A, r10
    37ce:	80 91 7a 00 	lds	r24, 0x007A
    37d2:	86 fd       	sbrc	r24, 6
    37d4:	fc cf       	rjmp	.-8      	; 0x37ce <ad_3692+0x36>
    37d6:	80 92 7a 00 	sts	0x007A, r8
    37da:	0e 94 99 14 	call	0x2932	; 0x2932 <wait5us>
    37de:	c5 b8       	out	0x05, r12	; 5
    37e0:	c4 b8       	out	0x04, r12	; 4
    37e2:	0e 94 97 14 	call	0x292e	; 0x292e <wait20us>
    37e6:	0e 94 99 14 	call	0x2932	; 0x2932 <wait5us>
    37ea:	0e 94 9d 14 	call	0x293a	; 0x293a <wait1us>
    37ee:	8f 93       	push	r24
    37f0:	8f 91       	pop	r24
    37f2:	a8 95       	wdr
    37f4:	a8 95       	wdr
    37f6:	14 b8       	out	0x04, r1	; 4
    37f8:	15 b8       	out	0x05, r1	; 5

000037fa <ad_370c>:
    37fa:	80 91 7a 00 	lds	r24, 0x007A
    37fe:	86 fd       	sbrc	r24, 6
    3800:	fc cf       	rjmp	.-8      	; 0x37fa <ad_370c>
    3802:	20 91 78 00 	lds	r18, 0x0078
    3806:	30 91 79 00 	lds	r19, 0x0079
    380a:	28 8b       	std	Y+16, r18	; 0x10
    380c:	39 8b       	std	Y+17, r19	; 0x11
    380e:	3f 85       	ldd	r19, Y+15	; 0x0f
    3810:	37 b9       	out	0x07, r19	; 7
    3812:	c5 b8       	out	0x05, r12	; 5
    3814:	c4 b8       	out	0x04, r12	; 4
    3816:	a8 95       	wdr
    3818:	b0 92 7c 00 	sts	0x007C, r11
    381c:	a0 92 7a 00 	sts	0x007A, r10
    3820:	80 91 7a 00 	lds	r24, 0x007A
    3824:	86 fd       	sbrc	r24, 6
    3826:	fc cf       	rjmp	.-8      	; 0x3820 <ad_370c+0x26>
    3828:	a0 92 7a 00 	sts	0x007A, r10
    382c:	80 91 7a 00 	lds	r24, 0x007A
    3830:	86 fd       	sbrc	r24, 6
    3832:	fc cf       	rjmp	.-8      	; 0x382c <ad_370c+0x32>
    3834:	60 91 78 00 	lds	r22, 0x0078
    3838:	70 91 79 00 	lds	r23, 0x0079
    383c:	60 92 7c 00 	sts	0x007C, r6
    3840:	a0 92 7a 00 	sts	0x007A, r10
    3844:	80 91 7a 00 	lds	r24, 0x007A
    3848:	86 fd       	sbrc	r24, 6
    384a:	fc cf       	rjmp	.-8      	; 0x3844 <ad_370c+0x4a>
    384c:	80 92 7a 00 	sts	0x007A, r8
    3850:	0e 94 99 14 	call	0x2932	; 0x2932 <wait5us>
    3854:	75 b8       	out	0x05, r7	; 5
    3856:	74 b8       	out	0x04, r7	; 4
    3858:	0e 94 97 14 	call	0x292e	; 0x292e <wait20us>
    385c:	0e 94 99 14 	call	0x2932	; 0x2932 <wait5us>
    3860:	0e 94 9d 14 	call	0x293a	; 0x293a <wait1us>
    3864:	8f 93       	push	r24
    3866:	8f 91       	pop	r24
    3868:	a8 95       	wdr
    386a:	a8 95       	wdr
    386c:	14 b8       	out	0x04, r1	; 4
    386e:	15 b8       	out	0x05, r1	; 5

00003870 <ad_37f4>:
    3870:	80 91 7a 00 	lds	r24, 0x007A
    3874:	86 fd       	sbrc	r24, 6
    3876:	fc cf       	rjmp	.-8      	; 0x3870 <ad_37f4>
    3878:	40 91 78 00 	lds	r20, 0x0078
    387c:	50 91 79 00 	lds	r21, 0x0079
    3880:	14 b8       	out	0x04, r1	; 4
    3882:	cb 01       	movw	r24, r22
    3884:	82 0d       	add	r24, r2
    3886:	93 1d       	adc	r25, r3
    3888:	e8 0e       	add	r14, r24
    388a:	f9 1e       	adc	r15, r25
    388c:	01 1d       	adc	r16, r1
    388e:	11 1d       	adc	r17, r1
    3890:	ea 82       	std	Y+2, r14	; 0x02
    3892:	fb 82       	std	Y+3, r15	; 0x03
    3894:	0c 83       	std	Y+4, r16	; 0x04
    3896:	1d 83       	std	Y+5, r17	; 0x05
    3898:	88 89       	ldd	r24, Y+16	; 0x10
    389a:	99 89       	ldd	r25, Y+17	; 0x11
    389c:	84 0f       	add	r24, r20
    389e:	95 1f       	adc	r25, r21
    38a0:	2e 81       	ldd	r18, Y+6	; 0x06
    38a2:	3f 81       	ldd	r19, Y+7	; 0x07
    38a4:	68 85       	ldd	r22, Y+8	; 0x08
    38a6:	79 85       	ldd	r23, Y+9	; 0x09
    38a8:	28 0f       	add	r18, r24
    38aa:	39 1f       	adc	r19, r25
    38ac:	61 1d       	adc	r22, r1
    38ae:	71 1d       	adc	r23, r1
    38b0:	2e 83       	std	Y+6, r18	; 0x06
    38b2:	3f 83       	std	Y+7, r19	; 0x07
    38b4:	68 87       	std	Y+8, r22	; 0x08
    38b6:	79 87       	std	Y+9, r23	; 0x09
    38b8:	24 e6       	ldi	r18, 0x64	; 100
    38ba:	24 17       	cp	r18, r20
    38bc:	15 06       	cpc	r1, r21
    38be:	50 f0       	brcs	.+20     	; 0x38d4 <is_ok1>
    38c0:	75 b8       	out	0x05, r7	; 5
    38c2:	74 b8       	out	0x04, r7	; 4
    38c4:	0e 94 9c 14 	call	0x2938	; 0x2938 <wait2us>
    38c8:	14 b8       	out	0x04, r1	; 4
    38ca:	15 b8       	out	0x05, r1	; 5
    38cc:	88 8d       	ldd	r24, Y+24	; 0x18
    38ce:	83 95       	inc	r24
    38d0:	88 8f       	std	Y+24, r24	; 0x18
    38d2:	07 c0       	rjmp	.+14     	; 0x38e2 <is_ok1b>

000038d4 <is_ok1>:
    38d4:	48 3e       	cpi	r20, 0xE8	; 232
    38d6:	73 e0       	ldi	r23, 0x03	; 3
    38d8:	57 07       	cpc	r21, r23
    38da:	18 f0       	brcs	.+6      	; 0x38e2 <is_ok1b>
    38dc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    38de:	83 95       	inc	r24
    38e0:	8a 8f       	std	Y+26, r24	; 0x1a

000038e2 <is_ok1b>:
    38e2:	88 89       	ldd	r24, Y+16	; 0x10
    38e4:	99 89       	ldd	r25, Y+17	; 0x11
    38e6:	28 17       	cp	r18, r24
    38e8:	19 06       	cpc	r1, r25
    38ea:	b0 f0       	brcs	.+44     	; 0x3918 <is_ok2>
    38ec:	3e 85       	ldd	r19, Y+14	; 0x0e
    38ee:	37 b9       	out	0x07, r19	; 7
    38f0:	c5 b8       	out	0x05, r12	; 5
    38f2:	c4 b8       	out	0x04, r12	; 4
    38f4:	0e 94 9c 14 	call	0x2938	; 0x2938 <wait2us>
    38f8:	0e 94 97 14 	call	0x292e	; 0x292e <wait20us>
    38fc:	0e 94 99 14 	call	0x2932	; 0x2932 <wait5us>
    3900:	0e 94 9d 14 	call	0x293a	; 0x293a <wait1us>
    3904:	8f 93       	push	r24
    3906:	8f 91       	pop	r24
    3908:	a8 95       	wdr
    390a:	a8 95       	wdr
    390c:	14 b8       	out	0x04, r1	; 4
    390e:	15 b8       	out	0x05, r1	; 5
    3910:	89 8d       	ldd	r24, Y+25	; 0x19
    3912:	83 95       	inc	r24
    3914:	89 8f       	std	Y+25, r24	; 0x19
    3916:	07 c0       	rjmp	.+14     	; 0x3926 <is_ok2b>

00003918 <is_ok2>:
    3918:	88 3e       	cpi	r24, 0xE8	; 232
    391a:	73 e0       	ldi	r23, 0x03	; 3
    391c:	97 07       	cpc	r25, r23
    391e:	18 f0       	brcs	.+6      	; 0x3926 <is_ok2b>
    3920:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3922:	83 95       	inc	r24
    3924:	8a 8f       	std	Y+26, r24	; 0x1a

00003926 <is_ok2b>:
    3926:	d3 94       	inc	r13
    3928:	5d 2d       	mov	r21, r13
    392a:	5f 3f       	cpi	r21, 0xFF	; 255
    392c:	09 f0       	breq	.+2      	; 0x3930 <ad_38ac>
    392e:	34 cf       	rjmp	.-408    	; 0x3798 <ad_3692>

00003930 <ad_38ac>:
    3930:	40 90 47 01 	lds	r4, 0x0147
    3934:	50 90 48 01 	lds	r5, 0x0148
    3938:	44 0c       	add	r4, r4
    393a:	55 1c       	adc	r5, r5
    393c:	92 01       	movw	r18, r4
    393e:	e4 e0       	ldi	r30, 0x04	; 4

00003940 <ad_3924>:
    3940:	24 0d       	add	r18, r4
    3942:	35 1d       	adc	r19, r5
    3944:	ea 95       	dec	r30
    3946:	e1 f7       	brne	.-8      	; 0x3940 <ad_3924>
    3948:	29 01       	movw	r4, r18
    394a:	57 01       	movw	r10, r14
    394c:	68 01       	movw	r12, r16
    394e:	6e 80       	ldd	r6, Y+6	; 0x06
    3950:	7f 80       	ldd	r7, Y+7	; 0x07
    3952:	88 84       	ldd	r8, Y+8	; 0x08
    3954:	99 84       	ldd	r9, Y+9	; 0x09
    3956:	20 91 07 01 	lds	r18, 0x0107
    395a:	27 30       	cpi	r18, 0x07	; 7
    395c:	c1 f4       	brne	.+48     	; 0x398e <no_sub>
    395e:	6c 89       	ldd	r22, Y+20	; 0x14
    3960:	7d 89       	ldd	r23, Y+21	; 0x15
    3962:	8e 89       	ldd	r24, Y+22	; 0x16
    3964:	9f 89       	ldd	r25, Y+23	; 0x17
    3966:	9b 01       	movw	r18, r22
    3968:	ac 01       	movw	r20, r24
    396a:	6d 5e       	subi	r22, 0xED	; 237
    396c:	7f 4f       	sbci	r23, 0xFF	; 255
    396e:	8f 4f       	sbci	r24, 0xFF	; 255
    3970:	9f 4f       	sbci	r25, 0xFF	; 255
    3972:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
    3976:	9b 01       	movw	r18, r22
    3978:	ac 01       	movw	r20, r24
    397a:	66 e3       	ldi	r22, 0x36	; 54
    397c:	79 e2       	ldi	r23, 0x29	; 41
    397e:	86 e8       	ldi	r24, 0x86	; 134
    3980:	9a e1       	ldi	r25, 0x1A	; 26
    3982:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
    3986:	62 1a       	sub	r6, r18
    3988:	73 0a       	sbc	r7, r19
    398a:	84 0a       	sbc	r8, r20
    398c:	95 0a       	sbc	r9, r21

0000398e <no_sub>:
    398e:	a6 14       	cp	r10, r6
    3990:	b7 04       	cpc	r11, r7
    3992:	c8 04       	cpc	r12, r8
    3994:	d9 04       	cpc	r13, r9
    3996:	28 f4       	brcc	.+10     	; 0x39a2 <ad_396c>
    3998:	6a 18       	sub	r6, r10
    399a:	7b 08       	sbc	r7, r11
    399c:	8c 08       	sbc	r8, r12
    399e:	9d 08       	sbc	r9, r13
    39a0:	03 c0       	rjmp	.+6      	; 0x39a8 <ad_3972>

000039a2 <ad_396c>:
    39a2:	66 24       	eor	r6, r6
    39a4:	77 24       	eor	r7, r7
    39a6:	43 01       	movw	r8, r6

000039a8 <ad_3972>:
    39a8:	b2 01       	movw	r22, r4
    39aa:	80 e0       	ldi	r24, 0x00	; 0
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	93 01       	movw	r18, r6
    39b0:	a4 01       	movw	r20, r8
    39b2:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
    39b6:	95 01       	movw	r18, r10
    39b8:	a6 01       	movw	r20, r12
    39ba:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
    39be:	82 ed       	ldi	r24, 0xD2	; 210
    39c0:	91 e0       	ldi	r25, 0x01	; 1
    39c2:	79 81       	ldd	r23, Y+1	; 0x01
    39c4:	87 0f       	add	r24, r23
    39c6:	91 1d       	adc	r25, r1
    39c8:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__eerd_byte_m168>
    39cc:	68 2e       	mov	r6, r24
    39ce:	c9 01       	movw	r24, r18
    39d0:	60 e1       	ldi	r22, 0x10	; 16
    39d2:	70 e0       	ldi	r23, 0x00	; 0
    39d4:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <__udivmodhi4>
    39d8:	26 0f       	add	r18, r22
    39da:	37 1f       	adc	r19, r23
    39dc:	c9 01       	movw	r24, r18
    39de:	68 16       	cp	r6, r24
    39e0:	19 06       	cpc	r1, r25
    39e2:	18 f4       	brcc	.+6      	; 0x39ea <esr_too_less>
    39e4:	86 19       	sub	r24, r6
    39e6:	91 09       	sbc	r25, r1
    39e8:	02 c0       	rjmp	.+4      	; 0x39ee <ad_exit>

000039ea <esr_too_less>:
    39ea:	81 2d       	mov	r24, r1
    39ec:	91 2d       	mov	r25, r1

000039ee <ad_exit>:
    39ee:	6e 96       	adiw	r28, 0x1e	; 30
    39f0:	0f b6       	in	r0, 0x3f	; 63
    39f2:	f8 94       	cli
    39f4:	de bf       	out	0x3e, r29	; 62
    39f6:	0f be       	out	0x3f, r0	; 63
    39f8:	cd bf       	out	0x3d, r28	; 61
    39fa:	cf 91       	pop	r28
    39fc:	df 91       	pop	r29
    39fe:	1f 91       	pop	r17
    3a00:	0f 91       	pop	r16
    3a02:	ff 90       	pop	r15
    3a04:	ef 90       	pop	r14
    3a06:	df 90       	pop	r13
    3a08:	cf 90       	pop	r12
    3a0a:	bf 90       	pop	r11
    3a0c:	af 90       	pop	r10
    3a0e:	9f 90       	pop	r9
    3a10:	8f 90       	pop	r8
    3a12:	7f 90       	pop	r7
    3a14:	6f 90       	pop	r6
    3a16:	5f 90       	pop	r5
    3a18:	4f 90       	pop	r4
    3a1a:	3f 90       	pop	r3
    3a1c:	2f 90       	pop	r2
    3a1e:	08 95       	ret

00003a20 <GetVloss>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void GetVloss() {
    3a20:	cf 92       	push	r12
    3a22:	df 92       	push	r13
    3a24:	ef 92       	push	r14
    3a26:	ff 92       	push	r15
    3a28:	0f 93       	push	r16
    3a2a:	1f 93       	push	r17
    3a2c:	cf 93       	push	r28
    3a2e:	df 93       	push	r29
  } lval;
  uint8_t ii;
  uint8_t HiPinR_L;
  uint8_t LoADC;

  if (cap.v_loss > 0) return;		// Voltage loss is already known
    3a30:	80 91 70 01 	lds	r24, 0x0170
    3a34:	90 91 71 01 	lds	r25, 0x0171
    3a38:	00 97       	sbiw	r24, 0x00	; 0
    3a3a:	09 f0       	breq	.+2      	; 0x3a3e <GetVloss+0x1e>
    3a3c:	a2 c0       	rjmp	.+324    	; 0x3b82 <GetVloss+0x162>
  LoADC = pgm_read_byte(&PinADCtab[cap.ca]) | TXD_MSK;
    3a3e:	e0 91 72 01 	lds	r30, 0x0172
    3a42:	f0 e0       	ldi	r31, 0x00	; 0
    3a44:	e3 5f       	subi	r30, 0xF3	; 243
    3a46:	fe 4f       	sbci	r31, 0xFE	; 254
    3a48:	04 91       	lpm	r16, Z+
    3a4a:	08 60       	ori	r16, 0x08	; 8
  HiPinR_L = pgm_read_byte(&PinRLtab[cap.cb]);	//R_L mask for HighPin R_L load
    3a4c:	e0 91 73 01 	lds	r30, 0x0173
    3a50:	f0 e0       	ldi	r31, 0x00	; 0
    3a52:	e6 5f       	subi	r30, 0xF6	; 246
    3a54:	fe 4f       	sbci	r31, 0xFE	; 254
    3a56:	14 91       	lpm	r17, Z+

  EntladePins();			// discharge capacitor
    3a58:	0e 94 b2 01 	call	0x364	; 0x364 <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    3a5c:	88 e0       	ldi	r24, 0x08	; 8
    3a5e:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    3a60:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    3a62:	07 b9       	out	0x07, r16	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    3a64:	14 b9       	out	0x04, r17	; 4
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
    3a66:	80 91 73 01 	lds	r24, 0x0173
    3a6a:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
    3a6e:	ec 01       	movw	r28, r24
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
    3a70:	00 91 75 01 	lds	r16, 0x0175
    3a74:	08 3f       	cpi	r16, 0xF8	; 248
    3a76:	0c f0       	brlt	.+2      	; 0x3a7a <GetVloss+0x5a>
    3a78:	84 c0       	rjmp	.+264    	; 0x3b82 <GetVloss+0x162>
  lval.dw = cap.cval_max;
    3a7a:	20 91 66 01 	lds	r18, 0x0166
    3a7e:	30 91 67 01 	lds	r19, 0x0167
    3a82:	40 91 68 01 	lds	r20, 0x0168
    3a86:	50 91 69 01 	lds	r21, 0x0169
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    3a8a:	04 5f       	subi	r16, 0xF4	; 244
     lval.dw = (lval.dw + 5) / 10;
    3a8c:	8a e0       	ldi	r24, 0x0A	; 10
    3a8e:	c8 2e       	mov	r12, r24
    3a90:	d1 2c       	mov	r13, r1
    3a92:	e1 2c       	mov	r14, r1
    3a94:	f1 2c       	mov	r15, r1
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
  lval.dw = cap.cval_max;
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    3a96:	0b c0       	rjmp	.+22     	; 0x3aae <GetVloss+0x8e>
     lval.dw = (lval.dw + 5) / 10;
    3a98:	ca 01       	movw	r24, r20
    3a9a:	b9 01       	movw	r22, r18
    3a9c:	6b 5f       	subi	r22, 0xFB	; 251
    3a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    3aa0:	8f 4f       	sbci	r24, 0xFF	; 255
    3aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    3aa4:	a7 01       	movw	r20, r14
    3aa6:	96 01       	movw	r18, r12
    3aa8:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
  lval.dw = cap.cval_max;
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    3aac:	0f 5f       	subi	r16, 0xFF	; 255
    3aae:	04 30       	cpi	r16, 0x04	; 4
    3ab0:	98 f3       	brcs	.-26     	; 0x3a98 <GetVloss+0x78>
    3ab2:	79 01       	movw	r14, r18
     lval.dw = (lval.dw + 5) / 10;
  }
//  if ((lval.dw == 0) || (lval.dw > 500)) {
  if ((lval.dw == 0) || (lval.dw > 5000)) {
    3ab4:	21 50       	subi	r18, 0x01	; 1
    3ab6:	30 40       	sbci	r19, 0x00	; 0
    3ab8:	40 40       	sbci	r20, 0x00	; 0
    3aba:	50 40       	sbci	r21, 0x00	; 0
    3abc:	28 38       	cpi	r18, 0x88	; 136
    3abe:	83 e1       	ldi	r24, 0x13	; 19
    3ac0:	38 07       	cpc	r19, r24
    3ac2:	80 e0       	ldi	r24, 0x00	; 0
    3ac4:	48 07       	cpc	r20, r24
    3ac6:	80 e0       	ldi	r24, 0x00	; 0
    3ac8:	58 07       	cpc	r21, r24
    3aca:	08 f0       	brcs	.+2      	; 0x3ace <GetVloss+0xae>
    3acc:	5a c0       	rjmp	.+180    	; 0x3b82 <GetVloss+0x162>
     /* capacity more than 50uF, Voltage loss is already measured  */
     return;
  }
  R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    3ace:	15 b9       	out	0x05, r17	; 5
  R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    3ad0:	14 b9       	out	0x04, r17	; 4
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    3ad2:	00 e0       	ldi	r16, 0x00	; 0
    3ad4:	10 e0       	ldi	r17, 0x00	; 0
    3ad6:	04 c0       	rjmp	.+8      	; 0x3ae0 <GetVloss+0xc0>
//     wait50us();			// wait exactly 50us
     wait5us();			// wait exactly 5us
    3ad8:	0e 94 99 14 	call	0x2932	; 0x2932 <wait5us>
     /* capacity more than 50uF, Voltage loss is already measured  */
     return;
  }
  R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
  R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    3adc:	0e 5f       	subi	r16, 0xFE	; 254
    3ade:	1f 4f       	sbci	r17, 0xFF	; 255
    3ae0:	67 01       	movw	r12, r14
    3ae2:	0e 15       	cp	r16, r14
    3ae4:	1f 05       	cpc	r17, r15
    3ae6:	c0 f3       	brcs	.-16     	; 0x3ad8 <GetVloss+0xb8>
//     wait50us();			// wait exactly 50us
     wait5us();			// wait exactly 5us
  }
  R_DDR = 0;				// switch back to input
    3ae8:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// no Pull up
    3aea:	15 b8       	out	0x05, r1	; 5
 // wait10us();			//wait a little time
  wdt_reset();
    3aec:	a8 95       	wdr
  // read voltage without current
  ADCconfig.Samples = 5;		// set ADC to only 5 samples
    3aee:	85 e0       	ldi	r24, 0x05	; 5
    3af0:	80 93 3c 01 	sts	0x013C, r24
  adcv[2] = ReadADC(cap.cb);
    3af4:	80 91 73 01 	lds	r24, 0x0173
    3af8:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
  if (adcv[2] > adcv[0]) {
    3afc:	c8 17       	cp	r28, r24
    3afe:	d9 07       	cpc	r29, r25
    3b00:	20 f4       	brcc	.+8      	; 0x3b0a <GetVloss+0xea>
     adcv[2] -= adcv[0];		//difference to beginning voltage
    3b02:	8c 01       	movw	r16, r24
    3b04:	0c 1b       	sub	r16, r28
    3b06:	1d 0b       	sbc	r17, r29
    3b08:	02 c0       	rjmp	.+4      	; 0x3b0e <GetVloss+0xee>
  } else {
     adcv[2] = 0;			// voltage is lower or same as beginning voltage
    3b0a:	00 e0       	ldi	r16, 0x00	; 0
    3b0c:	10 e0       	ldi	r17, 0x00	; 0
  }
  // wait 2x the time which was required for loading
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    3b0e:	ee 24       	eor	r14, r14
    3b10:	ff 24       	eor	r15, r15
    3b12:	05 c0       	rjmp	.+10     	; 0x3b1e <GetVloss+0xfe>
//     wait50us();
     wait5us();
    3b14:	0e 94 99 14 	call	0x2932	; 0x2932 <wait5us>
     adcv[2] -= adcv[0];		//difference to beginning voltage
  } else {
     adcv[2] = 0;			// voltage is lower or same as beginning voltage
  }
  // wait 2x the time which was required for loading
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    3b18:	08 94       	sec
    3b1a:	e1 1c       	adc	r14, r1
    3b1c:	f1 1c       	adc	r15, r1
    3b1e:	ec 14       	cp	r14, r12
    3b20:	fd 04       	cpc	r15, r13
    3b22:	c0 f3       	brcs	.-16     	; 0x3b14 <GetVloss+0xf4>
//     wait50us();
     wait5us();
  }
  adcv[3] = ReadADC(cap.cb);	// read voltage again, is discharged only a little bit ?
    3b24:	80 91 73 01 	lds	r24, 0x0173
    3b28:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
  ADCconfig.Samples = ANZ_MESS;		// set ADC back to configured No. of samples
    3b2c:	29 e1       	ldi	r18, 0x19	; 25
    3b2e:	20 93 3c 01 	sts	0x013C, r18
  wdt_reset();
    3b32:	a8 95       	wdr
  if (adcv[3] > adcv[0]) {
    3b34:	c8 17       	cp	r28, r24
    3b36:	d9 07       	cpc	r29, r25
    3b38:	18 f4       	brcc	.+6      	; 0x3b40 <GetVloss+0x120>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    3b3a:	8c 1b       	sub	r24, r28
    3b3c:	9d 0b       	sbc	r25, r29
    3b3e:	02 c0       	rjmp	.+4      	; 0x3b44 <GetVloss+0x124>
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    3b40:	80 e0       	ldi	r24, 0x00	; 0
    3b42:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
    3b44:	80 17       	cp	r24, r16
    3b46:	91 07       	cpc	r25, r17
    3b48:	a8 f4       	brcc	.+42     	; 0x3b74 <GetVloss+0x154>
     // build difference to load voltage
     adcv[1] = adcv[2] - adcv[3];	// lost voltage during load time wait
    3b4a:	b8 01       	movw	r22, r16
    3b4c:	68 1b       	sub	r22, r24
    3b4e:	79 0b       	sbc	r23, r25
  } else {
     adcv[1] = 0;			// no lost voltage
  }
  // compute voltage drop as part from loaded voltage
  if (adcv[1] > 0) {
    3b50:	89 f0       	breq	.+34     	; 0x3b74 <GetVloss+0x154>
     // there is any voltage drop (adcv[1]) !
     // adcv[2] is the loaded voltage.
     cap.v_loss = (unsigned long)(adcv[1] * 500UL) / adcv[2];
    3b52:	80 e0       	ldi	r24, 0x00	; 0
    3b54:	90 e0       	ldi	r25, 0x00	; 0
    3b56:	24 ef       	ldi	r18, 0xF4	; 244
    3b58:	31 e0       	ldi	r19, 0x01	; 1
    3b5a:	40 e0       	ldi	r20, 0x00	; 0
    3b5c:	50 e0       	ldi	r21, 0x00	; 0
    3b5e:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
    3b62:	98 01       	movw	r18, r16
    3b64:	40 e0       	ldi	r20, 0x00	; 0
    3b66:	50 e0       	ldi	r21, 0x00	; 0
    3b68:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
    3b6c:	30 93 71 01 	sts	0x0171, r19
    3b70:	20 93 70 01 	sts	0x0170, r18
  lcd_line4();
  DisplayValue(lval.w[0],0,'x',4);
#endif

  // discharge capacitor again
  EntladePins();		// discharge capacitors
    3b74:	0e 94 b2 01 	call	0x364	; 0x364 <EntladePins>
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    3b78:	88 e0       	ldi	r24, 0x08	; 8
    3b7a:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    3b7c:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    3b7e:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    3b80:	15 b8       	out	0x05, r1	; 5
#endif
  return;
 } // end GetVdrop()
    3b82:	df 91       	pop	r29
    3b84:	cf 91       	pop	r28
    3b86:	1f 91       	pop	r17
    3b88:	0f 91       	pop	r16
    3b8a:	ff 90       	pop	r15
    3b8c:	ef 90       	pop	r14
    3b8e:	df 90       	pop	r13
    3b90:	cf 90       	pop	r12
    3b92:	08 95       	ret

00003b94 <Calibrate_UR>:
#include "Transistortester.h"
void Calibrate_UR(void) {
    3b94:	8f 92       	push	r8
    3b96:	9f 92       	push	r9
    3b98:	af 92       	push	r10
    3b9a:	bf 92       	push	r11
    3b9c:	cf 92       	push	r12
    3b9e:	df 92       	push	r13
    3ba0:	ef 92       	push	r14
    3ba2:	ff 92       	push	r15
    3ba4:	0f 93       	push	r16
    3ba6:	1f 93       	push	r17
    3ba8:	cf 93       	push	r28
    3baa:	df 93       	push	r29
  uint16_t u680;	// 3 * (Voltage at 680 Ohm)
 #endif


                                        //############################################
  ADCconfig.U_AVCC = U_VCC;     // set initial VCC Voltage
    3bac:	88 e8       	ldi	r24, 0x88	; 136
    3bae:	93 e1       	ldi	r25, 0x13	; 19
    3bb0:	90 93 41 01 	sts	0x0141, r25
    3bb4:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    3bb8:	8e eb       	ldi	r24, 0xBE	; 190
    3bba:	80 93 3c 01 	sts	0x013C, r24
#if FLASHEND > 0x1fff
  ADC_PORT = TXD_VAL;                   // switch to 0V
    3bbe:	08 e0       	ldi	r16, 0x08	; 8
    3bc0:	08 b9       	out	0x08, r16	; 8
  ADC_DDR = (1<<TPREF) | TXD_MSK;       // switch pin with 2.5V reference to GND
    3bc2:	88 e1       	ldi	r24, 0x18	; 24
    3bc4:	87 b9       	out	0x07, r24	; 7
  wait1ms();
    3bc6:	0e 94 8e 14 	call	0x291c	; 0x291c <wait1ms>
  ADC_DDR =  TXD_MSK;   // switch pin with reference back to input
    3bca:	07 b9       	out	0x07, r16	; 7
  trans.uBE[1] = W5msReadADC(TPREF); // read voltage of 2.5V precision reference
    3bcc:	84 e0       	ldi	r24, 0x04	; 4
    3bce:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
    3bd2:	ec 01       	movw	r28, r24
    3bd4:	90 93 5a 01 	sts	0x015A, r25
    3bd8:	80 93 59 01 	sts	0x0159, r24
  if ((trans.uBE[1] > 2250) && (trans.uBE[1] < 2750)) {
    3bdc:	8b 5c       	subi	r24, 0xCB	; 203
    3bde:	98 40       	sbci	r25, 0x08	; 8
    3be0:	21 e0       	ldi	r18, 0x01	; 1
    3be2:	83 3f       	cpi	r24, 0xF3	; 243
    3be4:	92 07       	cpc	r25, r18
    3be6:	c0 f4       	brcc	.+48     	; 0x3c18 <Calibrate_UR+0x84>
     // precision voltage reference connected, update U_AVCC
     WithReference = 1;
    3be8:	81 e0       	ldi	r24, 0x01	; 1
    3bea:	80 93 49 01 	sts	0x0149, r24
     ADCconfig.U_AVCC = (unsigned long)((unsigned long)ADCconfig.U_AVCC * 2495) / trans.uBE[1];
    3bee:	60 91 40 01 	lds	r22, 0x0140
    3bf2:	70 91 41 01 	lds	r23, 0x0141
    3bf6:	80 e0       	ldi	r24, 0x00	; 0
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
    3bfa:	2f eb       	ldi	r18, 0xBF	; 191
    3bfc:	39 e0       	ldi	r19, 0x09	; 9
    3bfe:	40 e0       	ldi	r20, 0x00	; 0
    3c00:	50 e0       	ldi	r21, 0x00	; 0
    3c02:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
    3c06:	9e 01       	movw	r18, r28
    3c08:	40 e0       	ldi	r20, 0x00	; 0
    3c0a:	50 e0       	ldi	r21, 0x00	; 0
    3c0c:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
    3c10:	30 93 41 01 	sts	0x0141, r19
    3c14:	20 93 40 01 	sts	0x0140, r18
  }
#endif
 #ifdef WITH_AUTO_REF
  (void) ReadADC(MUX_INT_REF);	// read reference voltage 
    3c18:	8e e0       	ldi	r24, 0x0E	; 14
    3c1a:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <ReadADC>
  ref_mv = W5msReadADC(MUX_INT_REF);	// read reference voltage 
    3c1e:	8e e0       	ldi	r24, 0x0E	; 14
    3c20:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
    3c24:	90 93 45 01 	sts	0x0145, r25
    3c28:	80 93 44 01 	sts	0x0144, r24
  RefVoltage();		//compute RHmultip = f(reference voltage)
    3c2c:	0e 94 4d 02 	call	0x49a	; 0x49a <RefVoltage>
 #else
  ref_mv = DEFAULT_BAND_GAP;    // set to default Reference Voltage
 #endif
  ADCconfig.U_Bandgap = ADC_internal_reference; // set internal reference voltage for ADC
    3c30:	81 ec       	ldi	r24, 0xC1	; 193
    3c32:	91 e0       	ldi	r25, 0x01	; 1
    3c34:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__eerd_byte_m168>
    3c38:	99 27       	eor	r25, r25
    3c3a:	87 fd       	sbrc	r24, 7
    3c3c:	90 95       	com	r25
    3c3e:	20 91 44 01 	lds	r18, 0x0144
    3c42:	30 91 45 01 	lds	r19, 0x0145
    3c46:	82 0f       	add	r24, r18
    3c48:	93 1f       	adc	r25, r19
    3c4a:	90 93 3f 01 	sts	0x013F, r25
    3c4e:	80 93 3e 01 	sts	0x013E, r24
                                        //############################################

 #ifdef AUTO_CAL
  // measurement of internal resistance of the ADC port outputs switched to GND
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    3c52:	79 e0       	ldi	r23, 0x09	; 9
    3c54:	d7 2e       	mov	r13, r23
    3c56:	d7 b8       	out	0x07, r13	; 7
  R_PORT = 1<<(TP1*2);		//R_L-PORT 1 to VCC
    3c58:	aa 24       	eor	r10, r10
    3c5a:	a3 94       	inc	r10
    3c5c:	a5 b8       	out	0x05, r10	; 5
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to VCC
    3c5e:	a4 b8       	out	0x04, r10	; 4
  sum_rm = W5msReadADC(TP1);
    3c60:	80 e0       	ldi	r24, 0x00	; 0
    3c62:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
    3c66:	8c 01       	movw	r16, r24

  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin 2 to output 0V
    3c68:	6a e0       	ldi	r22, 0x0A	; 10
    3c6a:	86 2e       	mov	r8, r22
    3c6c:	87 b8       	out	0x07, r8	; 7
  R_PORT =  1<<(TP2*2);		//R_L-PORT 2 to VCC
    3c6e:	54 e0       	ldi	r21, 0x04	; 4
    3c70:	c5 2e       	mov	r12, r21
    3c72:	c5 b8       	out	0x05, r12	; 5
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to VCC
    3c74:	c4 b8       	out	0x04, r12	; 4
  sum_rm += W5msReadADC(TP2);
    3c76:	81 e0       	ldi	r24, 0x01	; 1
    3c78:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
    3c7c:	08 0f       	add	r16, r24
    3c7e:	19 1f       	adc	r17, r25

  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin 3 to output 0V
    3c80:	4c e0       	ldi	r20, 0x0C	; 12
    3c82:	f4 2e       	mov	r15, r20
    3c84:	f7 b8       	out	0x07, r15	; 7
  R_PORT =  1<<(TP3*2);		//R_L-PORT 3 to VCC
    3c86:	30 e1       	ldi	r19, 0x10	; 16
    3c88:	e3 2e       	mov	r14, r19
    3c8a:	e5 b8       	out	0x05, r14	; 5
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to VCC
    3c8c:	e4 b8       	out	0x04, r14	; 4
  sum_rm += W5msReadADC(TP3);	//add all three values
    3c8e:	82 e0       	ldi	r24, 0x02	; 2
    3c90:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
    3c94:	08 0f       	add	r16, r24
    3c96:	19 1f       	adc	r17, r25

  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
    3c98:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
    3c9a:	d8 b8       	out	0x08, r13	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    3c9c:	d7 b8       	out	0x07, r13	; 7
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
    3c9e:	a4 b8       	out	0x04, r10	; 4
  sum_rp = ADCconfig.U_AVCC - W5msReadADC(TP1);
    3ca0:	c0 91 40 01 	lds	r28, 0x0140
    3ca4:	d0 91 41 01 	lds	r29, 0x0141
    3ca8:	80 e0       	ldi	r24, 0x00	; 0
    3caa:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
    3cae:	5c 01       	movw	r10, r24
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
    3cb0:	88 b8       	out	0x08, r8	; 8
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
    3cb2:	87 b8       	out	0x07, r8	; 7
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
    3cb4:	c4 b8       	out	0x04, r12	; 4
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP2);
    3cb6:	c0 90 40 01 	lds	r12, 0x0140
    3cba:	d0 90 41 01 	lds	r13, 0x0141
    3cbe:	81 e0       	ldi	r24, 0x01	; 1
    3cc0:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
    3cc4:	4c 01       	movw	r8, r24

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
    3cc6:	f8 b8       	out	0x08, r15	; 8
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
    3cc8:	f7 b8       	out	0x07, r15	; 7
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
    3cca:	e4 b8       	out	0x04, r14	; 4
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP3);
    3ccc:	e0 90 40 01 	lds	r14, 0x0140
    3cd0:	f0 90 41 01 	lds	r15, 0x0141
    3cd4:	82 e0       	ldi	r24, 0x02	; 2
    3cd6:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <W5msReadADC>
  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
  sum_rp = ADCconfig.U_AVCC - W5msReadADC(TP1);
    3cda:	cc 0d       	add	r28, r12
    3cdc:	dd 1d       	adc	r29, r13
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP2);
    3cde:	ce 0d       	add	r28, r14
    3ce0:	df 1d       	adc	r29, r15
    3ce2:	c8 1b       	sub	r28, r24
    3ce4:	d9 0b       	sbc	r29, r25

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP3);
    3ce6:	ca 19       	sub	r28, r10
    3ce8:	db 09       	sbc	r29, r11
    3cea:	c8 19       	sub	r28, r8
    3cec:	d9 09       	sbc	r29, r9

  u680 = ((ADCconfig.U_AVCC * 3) - sum_rm - sum_rp);	//three times the voltage at the 680 Ohm
    3cee:	80 91 40 01 	lds	r24, 0x0140
    3cf2:	90 91 41 01 	lds	r25, 0x0141
    3cf6:	6c 01       	movw	r12, r24
    3cf8:	cc 0c       	add	r12, r12
    3cfa:	dd 1c       	adc	r13, r13
    3cfc:	c8 0e       	add	r12, r24
    3cfe:	d9 1e       	adc	r13, r25
    3d00:	c0 1a       	sub	r12, r16
    3d02:	d1 0a       	sbc	r13, r17
    3d04:	cc 1a       	sub	r12, r28
    3d06:	dd 0a       	sbc	r13, r29
  pin_rmi = (unsigned long)((unsigned long)sum_rm * (unsigned long)R_L_VAL) / (unsigned long)u680;
    3d08:	ee 24       	eor	r14, r14
    3d0a:	ff 24       	eor	r15, r15
    3d0c:	b8 01       	movw	r22, r16
    3d0e:	80 e0       	ldi	r24, 0x00	; 0
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	20 e9       	ldi	r18, 0x90	; 144
    3d14:	3a e1       	ldi	r19, 0x1A	; 26
    3d16:	40 e0       	ldi	r20, 0x00	; 0
    3d18:	50 e0       	ldi	r21, 0x00	; 0
    3d1a:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
    3d1e:	a7 01       	movw	r20, r14
    3d20:	96 01       	movw	r18, r12
    3d22:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
    3d26:	89 01       	movw	r16, r18
    3d28:	30 93 48 01 	sts	0x0148, r19
    3d2c:	20 93 47 01 	sts	0x0147, r18
//  adcmv[2] = pin_rm;	// for last output in row 2
  pin_rpl = (unsigned long)((unsigned long)sum_rp * (unsigned long)R_L_VAL) / (unsigned long)u680;
    3d30:	be 01       	movw	r22, r28
    3d32:	80 e0       	ldi	r24, 0x00	; 0
    3d34:	90 e0       	ldi	r25, 0x00	; 0
    3d36:	20 e9       	ldi	r18, 0x90	; 144
    3d38:	3a e1       	ldi	r19, 0x1A	; 26
    3d3a:	40 e0       	ldi	r20, 0x00	; 0
    3d3c:	50 e0       	ldi	r21, 0x00	; 0
    3d3e:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <__mulsi3>
    3d42:	a7 01       	movw	r20, r14
    3d44:	96 01       	movw	r18, r12
    3d46:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__udivmodsi4>
    3d4a:	c9 01       	movw	r24, r18
    3d4c:	30 93 43 01 	sts	0x0143, r19
    3d50:	20 93 42 01 	sts	0x0142, r18
  if ((pin_rpl < 280) && (pin_rmi < 250)) {
    3d54:	21 e0       	ldi	r18, 0x01	; 1
    3d56:	88 31       	cpi	r24, 0x18	; 24
    3d58:	92 07       	cpc	r25, r18
    3d5a:	78 f4       	brcc	.+30     	; 0x3d7a <Calibrate_UR+0x1e6>
    3d5c:	0a 3f       	cpi	r16, 0xFA	; 250
    3d5e:	11 05       	cpc	r17, r1
    3d60:	60 f4       	brcc	.+24     	; 0x3d7a <Calibrate_UR+0x1e6>
     // rp is below 28 Ohm and rm is below 25 Ohm
     resis680pl = pin_rpl + R_L_VAL;
    3d62:	80 57       	subi	r24, 0x70	; 112
    3d64:	95 4e       	sbci	r25, 0xE5	; 229
    3d66:	90 93 09 01 	sts	0x0109, r25
    3d6a:	80 93 08 01 	sts	0x0108, r24
     resis680mi = pin_rmi + R_L_VAL;
    3d6e:	00 57       	subi	r16, 0x70	; 112
    3d70:	15 4e       	sbci	r17, 0xE5	; 229
    3d72:	10 93 03 01 	sts	0x0103, r17
    3d76:	00 93 02 01 	sts	0x0102, r16
  }
#endif

  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    3d7a:	89 e1       	ldi	r24, 0x19	; 25
    3d7c:	80 93 3c 01 	sts	0x013C, r24
 } 
    3d80:	df 91       	pop	r29
    3d82:	cf 91       	pop	r28
    3d84:	1f 91       	pop	r17
    3d86:	0f 91       	pop	r16
    3d88:	ff 90       	pop	r15
    3d8a:	ef 90       	pop	r14
    3d8c:	df 90       	pop	r13
    3d8e:	cf 90       	pop	r12
    3d90:	bf 90       	pop	r11
    3d92:	af 90       	pop	r10
    3d94:	9f 90       	pop	r9
    3d96:	8f 90       	pop	r8
    3d98:	08 95       	ret

00003d9a <__mulsi3>:
    3d9a:	62 9f       	mul	r22, r18
    3d9c:	d0 01       	movw	r26, r0
    3d9e:	73 9f       	mul	r23, r19
    3da0:	f0 01       	movw	r30, r0
    3da2:	82 9f       	mul	r24, r18
    3da4:	e0 0d       	add	r30, r0
    3da6:	f1 1d       	adc	r31, r1
    3da8:	64 9f       	mul	r22, r20
    3daa:	e0 0d       	add	r30, r0
    3dac:	f1 1d       	adc	r31, r1
    3dae:	92 9f       	mul	r25, r18
    3db0:	f0 0d       	add	r31, r0
    3db2:	83 9f       	mul	r24, r19
    3db4:	f0 0d       	add	r31, r0
    3db6:	74 9f       	mul	r23, r20
    3db8:	f0 0d       	add	r31, r0
    3dba:	65 9f       	mul	r22, r21
    3dbc:	f0 0d       	add	r31, r0
    3dbe:	99 27       	eor	r25, r25
    3dc0:	72 9f       	mul	r23, r18
    3dc2:	b0 0d       	add	r27, r0
    3dc4:	e1 1d       	adc	r30, r1
    3dc6:	f9 1f       	adc	r31, r25
    3dc8:	63 9f       	mul	r22, r19
    3dca:	b0 0d       	add	r27, r0
    3dcc:	e1 1d       	adc	r30, r1
    3dce:	f9 1f       	adc	r31, r25
    3dd0:	bd 01       	movw	r22, r26
    3dd2:	cf 01       	movw	r24, r30
    3dd4:	11 24       	eor	r1, r1
    3dd6:	08 95       	ret

00003dd8 <__udivmodqi4>:
    3dd8:	99 1b       	sub	r25, r25
    3dda:	79 e0       	ldi	r23, 0x09	; 9
    3ddc:	04 c0       	rjmp	.+8      	; 0x3de6 <__udivmodqi4_ep>

00003dde <__udivmodqi4_loop>:
    3dde:	99 1f       	adc	r25, r25
    3de0:	96 17       	cp	r25, r22
    3de2:	08 f0       	brcs	.+2      	; 0x3de6 <__udivmodqi4_ep>
    3de4:	96 1b       	sub	r25, r22

00003de6 <__udivmodqi4_ep>:
    3de6:	88 1f       	adc	r24, r24
    3de8:	7a 95       	dec	r23
    3dea:	c9 f7       	brne	.-14     	; 0x3dde <__udivmodqi4_loop>
    3dec:	80 95       	com	r24
    3dee:	08 95       	ret

00003df0 <__udivmodhi4>:
    3df0:	aa 1b       	sub	r26, r26
    3df2:	bb 1b       	sub	r27, r27
    3df4:	51 e1       	ldi	r21, 0x11	; 17
    3df6:	07 c0       	rjmp	.+14     	; 0x3e06 <__udivmodhi4_ep>

00003df8 <__udivmodhi4_loop>:
    3df8:	aa 1f       	adc	r26, r26
    3dfa:	bb 1f       	adc	r27, r27
    3dfc:	a6 17       	cp	r26, r22
    3dfe:	b7 07       	cpc	r27, r23
    3e00:	10 f0       	brcs	.+4      	; 0x3e06 <__udivmodhi4_ep>
    3e02:	a6 1b       	sub	r26, r22
    3e04:	b7 0b       	sbc	r27, r23

00003e06 <__udivmodhi4_ep>:
    3e06:	88 1f       	adc	r24, r24
    3e08:	99 1f       	adc	r25, r25
    3e0a:	5a 95       	dec	r21
    3e0c:	a9 f7       	brne	.-22     	; 0x3df8 <__udivmodhi4_loop>
    3e0e:	80 95       	com	r24
    3e10:	90 95       	com	r25
    3e12:	bc 01       	movw	r22, r24
    3e14:	cd 01       	movw	r24, r26
    3e16:	08 95       	ret

00003e18 <__udivmodsi4>:
    3e18:	a1 e2       	ldi	r26, 0x21	; 33
    3e1a:	1a 2e       	mov	r1, r26
    3e1c:	aa 1b       	sub	r26, r26
    3e1e:	bb 1b       	sub	r27, r27
    3e20:	fd 01       	movw	r30, r26
    3e22:	0d c0       	rjmp	.+26     	; 0x3e3e <__udivmodsi4_ep>

00003e24 <__udivmodsi4_loop>:
    3e24:	aa 1f       	adc	r26, r26
    3e26:	bb 1f       	adc	r27, r27
    3e28:	ee 1f       	adc	r30, r30
    3e2a:	ff 1f       	adc	r31, r31
    3e2c:	a2 17       	cp	r26, r18
    3e2e:	b3 07       	cpc	r27, r19
    3e30:	e4 07       	cpc	r30, r20
    3e32:	f5 07       	cpc	r31, r21
    3e34:	20 f0       	brcs	.+8      	; 0x3e3e <__udivmodsi4_ep>
    3e36:	a2 1b       	sub	r26, r18
    3e38:	b3 0b       	sbc	r27, r19
    3e3a:	e4 0b       	sbc	r30, r20
    3e3c:	f5 0b       	sbc	r31, r21

00003e3e <__udivmodsi4_ep>:
    3e3e:	66 1f       	adc	r22, r22
    3e40:	77 1f       	adc	r23, r23
    3e42:	88 1f       	adc	r24, r24
    3e44:	99 1f       	adc	r25, r25
    3e46:	1a 94       	dec	r1
    3e48:	69 f7       	brne	.-38     	; 0x3e24 <__udivmodsi4_loop>
    3e4a:	60 95       	com	r22
    3e4c:	70 95       	com	r23
    3e4e:	80 95       	com	r24
    3e50:	90 95       	com	r25
    3e52:	9b 01       	movw	r18, r22
    3e54:	ac 01       	movw	r20, r24
    3e56:	bd 01       	movw	r22, r26
    3e58:	cf 01       	movw	r24, r30
    3e5a:	08 95       	ret

00003e5c <__divmodsi4>:
    3e5c:	97 fb       	bst	r25, 7
    3e5e:	09 2e       	mov	r0, r25
    3e60:	05 26       	eor	r0, r21
    3e62:	0e d0       	rcall	.+28     	; 0x3e80 <__divmodsi4_neg1>
    3e64:	57 fd       	sbrc	r21, 7
    3e66:	04 d0       	rcall	.+8      	; 0x3e70 <__divmodsi4_neg2>
    3e68:	d7 df       	rcall	.-82     	; 0x3e18 <__udivmodsi4>
    3e6a:	0a d0       	rcall	.+20     	; 0x3e80 <__divmodsi4_neg1>
    3e6c:	00 1c       	adc	r0, r0
    3e6e:	38 f4       	brcc	.+14     	; 0x3e7e <__divmodsi4_exit>

00003e70 <__divmodsi4_neg2>:
    3e70:	50 95       	com	r21
    3e72:	40 95       	com	r20
    3e74:	30 95       	com	r19
    3e76:	21 95       	neg	r18
    3e78:	3f 4f       	sbci	r19, 0xFF	; 255
    3e7a:	4f 4f       	sbci	r20, 0xFF	; 255
    3e7c:	5f 4f       	sbci	r21, 0xFF	; 255

00003e7e <__divmodsi4_exit>:
    3e7e:	08 95       	ret

00003e80 <__divmodsi4_neg1>:
    3e80:	f6 f7       	brtc	.-4      	; 0x3e7e <__divmodsi4_exit>
    3e82:	90 95       	com	r25
    3e84:	80 95       	com	r24
    3e86:	70 95       	com	r23
    3e88:	61 95       	neg	r22
    3e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e8c:	8f 4f       	sbci	r24, 0xFF	; 255
    3e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e90:	08 95       	ret

00003e92 <itoa>:
    3e92:	fb 01       	movw	r30, r22
    3e94:	9f 01       	movw	r18, r30
    3e96:	e8 94       	clt
    3e98:	42 30       	cpi	r20, 0x02	; 2
    3e9a:	c4 f0       	brlt	.+48     	; 0x3ecc <itoa+0x3a>
    3e9c:	45 32       	cpi	r20, 0x25	; 37
    3e9e:	b4 f4       	brge	.+44     	; 0x3ecc <itoa+0x3a>
    3ea0:	4a 30       	cpi	r20, 0x0A	; 10
    3ea2:	29 f4       	brne	.+10     	; 0x3eae <itoa+0x1c>
    3ea4:	97 fb       	bst	r25, 7
    3ea6:	1e f4       	brtc	.+6      	; 0x3eae <itoa+0x1c>
    3ea8:	90 95       	com	r25
    3eaa:	81 95       	neg	r24
    3eac:	9f 4f       	sbci	r25, 0xFF	; 255
    3eae:	64 2f       	mov	r22, r20
    3eb0:	77 27       	eor	r23, r23
    3eb2:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <__udivmodhi4>
    3eb6:	80 5d       	subi	r24, 0xD0	; 208
    3eb8:	8a 33       	cpi	r24, 0x3A	; 58
    3eba:	0c f0       	brlt	.+2      	; 0x3ebe <itoa+0x2c>
    3ebc:	89 5d       	subi	r24, 0xD9	; 217
    3ebe:	81 93       	st	Z+, r24
    3ec0:	cb 01       	movw	r24, r22
    3ec2:	00 97       	sbiw	r24, 0x00	; 0
    3ec4:	a1 f7       	brne	.-24     	; 0x3eae <itoa+0x1c>
    3ec6:	16 f4       	brtc	.+4      	; 0x3ecc <itoa+0x3a>
    3ec8:	5d e2       	ldi	r21, 0x2D	; 45
    3eca:	51 93       	st	Z+, r21
    3ecc:	10 82       	st	Z, r1
    3ece:	c9 01       	movw	r24, r18
    3ed0:	0c 94 a1 1f 	jmp	0x3f42	; 0x3f42 <strrev>

00003ed4 <utoa>:
    3ed4:	fb 01       	movw	r30, r22
    3ed6:	9f 01       	movw	r18, r30
    3ed8:	42 30       	cpi	r20, 0x02	; 2
    3eda:	74 f0       	brlt	.+28     	; 0x3ef8 <utoa+0x24>
    3edc:	45 32       	cpi	r20, 0x25	; 37
    3ede:	64 f4       	brge	.+24     	; 0x3ef8 <utoa+0x24>
    3ee0:	64 2f       	mov	r22, r20
    3ee2:	77 27       	eor	r23, r23
    3ee4:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <__udivmodhi4>
    3ee8:	80 5d       	subi	r24, 0xD0	; 208
    3eea:	8a 33       	cpi	r24, 0x3A	; 58
    3eec:	0c f0       	brlt	.+2      	; 0x3ef0 <utoa+0x1c>
    3eee:	89 5d       	subi	r24, 0xD9	; 217
    3ef0:	81 93       	st	Z+, r24
    3ef2:	cb 01       	movw	r24, r22
    3ef4:	00 97       	sbiw	r24, 0x00	; 0
    3ef6:	a1 f7       	brne	.-24     	; 0x3ee0 <utoa+0xc>
    3ef8:	10 82       	st	Z, r1
    3efa:	c9 01       	movw	r24, r18
    3efc:	0c 94 a1 1f 	jmp	0x3f42	; 0x3f42 <strrev>

00003f00 <__eerd_byte_m168>:
    3f00:	f9 99       	sbic	0x1f, 1	; 31
    3f02:	fe cf       	rjmp	.-4      	; 0x3f00 <__eerd_byte_m168>
    3f04:	92 bd       	out	0x22, r25	; 34
    3f06:	81 bd       	out	0x21, r24	; 33
    3f08:	f8 9a       	sbi	0x1f, 0	; 31
    3f0a:	99 27       	eor	r25, r25
    3f0c:	80 b5       	in	r24, 0x20	; 32
    3f0e:	08 95       	ret

00003f10 <__eerd_word_m168>:
    3f10:	a8 e1       	ldi	r26, 0x18	; 24
    3f12:	b0 e0       	ldi	r27, 0x00	; 0
    3f14:	42 e0       	ldi	r20, 0x02	; 2
    3f16:	50 e0       	ldi	r21, 0x00	; 0
    3f18:	0c 94 b3 1f 	jmp	0x3f66	; 0x3f66 <__eerd_blraw_m168>

00003f1c <__eewr_byte_m168>:
    3f1c:	26 2f       	mov	r18, r22

00003f1e <__eewr_r18_m168>:
    3f1e:	f9 99       	sbic	0x1f, 1	; 31
    3f20:	fe cf       	rjmp	.-4      	; 0x3f1e <__eewr_r18_m168>
    3f22:	1f ba       	out	0x1f, r1	; 31
    3f24:	92 bd       	out	0x22, r25	; 34
    3f26:	81 bd       	out	0x21, r24	; 33
    3f28:	20 bd       	out	0x20, r18	; 32
    3f2a:	0f b6       	in	r0, 0x3f	; 63
    3f2c:	f8 94       	cli
    3f2e:	fa 9a       	sbi	0x1f, 2	; 31
    3f30:	f9 9a       	sbi	0x1f, 1	; 31
    3f32:	0f be       	out	0x3f, r0	; 63
    3f34:	01 96       	adiw	r24, 0x01	; 1
    3f36:	08 95       	ret

00003f38 <__eewr_word_m168>:
    3f38:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <__eewr_byte_m168>
    3f3c:	27 2f       	mov	r18, r23
    3f3e:	0c 94 8f 1f 	jmp	0x3f1e	; 0x3f1e <__eewr_r18_m168>

00003f42 <strrev>:
    3f42:	dc 01       	movw	r26, r24
    3f44:	fc 01       	movw	r30, r24
    3f46:	67 2f       	mov	r22, r23
    3f48:	71 91       	ld	r23, Z+
    3f4a:	77 23       	and	r23, r23
    3f4c:	e1 f7       	brne	.-8      	; 0x3f46 <strrev+0x4>
    3f4e:	32 97       	sbiw	r30, 0x02	; 2
    3f50:	04 c0       	rjmp	.+8      	; 0x3f5a <strrev+0x18>
    3f52:	7c 91       	ld	r23, X
    3f54:	6d 93       	st	X+, r22
    3f56:	70 83       	st	Z, r23
    3f58:	62 91       	ld	r22, -Z
    3f5a:	ae 17       	cp	r26, r30
    3f5c:	bf 07       	cpc	r27, r31
    3f5e:	c8 f3       	brcs	.-14     	; 0x3f52 <strrev+0x10>
    3f60:	08 95       	ret

00003f62 <__eerd_block_m168>:
    3f62:	dc 01       	movw	r26, r24
    3f64:	cb 01       	movw	r24, r22

00003f66 <__eerd_blraw_m168>:
    3f66:	fc 01       	movw	r30, r24
    3f68:	f9 99       	sbic	0x1f, 1	; 31
    3f6a:	fe cf       	rjmp	.-4      	; 0x3f68 <__eerd_blraw_m168+0x2>
    3f6c:	06 c0       	rjmp	.+12     	; 0x3f7a <__eerd_blraw_m168+0x14>
    3f6e:	f2 bd       	out	0x22, r31	; 34
    3f70:	e1 bd       	out	0x21, r30	; 33
    3f72:	f8 9a       	sbi	0x1f, 0	; 31
    3f74:	31 96       	adiw	r30, 0x01	; 1
    3f76:	00 b4       	in	r0, 0x20	; 32
    3f78:	0d 92       	st	X+, r0
    3f7a:	41 50       	subi	r20, 0x01	; 1
    3f7c:	50 40       	sbci	r21, 0x00	; 0
    3f7e:	b8 f7       	brcc	.-18     	; 0x3f6e <__eerd_blraw_m168+0x8>
    3f80:	08 95       	ret

00003f82 <_exit>:
    3f82:	f8 94       	cli

00003f84 <__stop_program>:
    3f84:	ff cf       	rjmp	.-2      	; 0x3f84 <__stop_program>
