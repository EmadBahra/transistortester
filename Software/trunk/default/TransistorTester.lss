
TransistorTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00003fa8  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003fa8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009a  00800102  00800102  0000405e  2**0
                  ALLOC
  3 .eeprom       000001ac  00810000  00810000  0000405e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         00000f30  00000000  00000000  0000420c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001f2  00000000  00000000  0000513c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000180  00000000  00000000  0000532e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000009cb  00000000  00000000  000054ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00003709  00000000  00000000  00005e79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000cb6  00000000  00000000  00009582  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000037df  00000000  00000000  0000a238  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000300  00000000  00000000  0000da18  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000a82  00000000  00000000  0000dd18  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001998  00000000  00000000  0000e79a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 0000036e  00000000  00000000  00010132  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 83 00 	jmp	0x106	; 0x106 <__ctors_end>
       4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
       8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
       c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      10:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      14:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      18:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      1c:	0c 94 ab 01 	jmp	0x356	; 0x356 <__vector_7>
      20:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      24:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      28:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__vector_10>
      2c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      30:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      34:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__vector_13>
      38:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      3c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      40:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      44:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      48:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      4c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      50:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      54:	0c 94 ac 01 	jmp	0x358	; 0x358 <__vector_21>
      58:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      5c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      60:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      64:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>

00000068 <LogTab>:
      68:	00 00 14 00 29 00 3e 00 53 00 69 00 80 00 97 00     ....).>.S.i.....
      78:	ae 00 c6 00 df 00 f8 00 12 01 2d 01 49 01 65 01     ..........-.I.e.
      88:	82 01 a0 01 be 01 de 01 ff 01 21 02 44 02 68 02     ..........!.D.h.
      98:	8e 02 b5 02 de 02 09 03 35 03 64 03 94 03 c8 03     ........5.d.....
      a8:	fe 03 37 04 73 04 b4 04 f9 04 43 05 93 05 ea 05     ..7.s.....C.....
      b8:	49 06 b3 06 29 07 ae 07 48 08 ff 08 de 09           I...)...H.....

000000c6 <RHtab>:
      c6:	ba 03 87 03 58 03 2e 03 07 03 e4 02 c3 02 a4 02     ....X...........
      d6:	88 02                                               ..

000000d8 <VERSION_str>:
      d8:	56 65 72 73 69 6f 6e 20 31 2e 31 30 6b 00           Version 1.10k.

000000e6 <R0_str>:
      e6:	52 30 3d 00                                         R0=.

000000ea <PinRLtab>:
      ea:	01 04 10                                            ...

000000ed <PinADCtab>:
      ed:	01 02 04                                            ...

000000f0 <MinCap_str>:
      f0:	20 3e 31 30 30 6e 46 00                              >100nF.

000000f8 <REF_C_str>:
      f8:	52 45 46 5f 43 3d 00                                REF_C=.

000000ff <REF_R_str>:
      ff:	52 45 46 5f 52 3d 00                                REF_R=.

00000106 <__ctors_end>:
     106:	11 24       	eor	r1, r1
     108:	1f be       	out	0x3f, r1	; 63
     10a:	cf ef       	ldi	r28, 0xFF	; 255
     10c:	d4 e0       	ldi	r29, 0x04	; 4
     10e:	de bf       	out	0x3e, r29	; 62
     110:	cd bf       	out	0x3d, r28	; 61

00000112 <__do_copy_data>:
     112:	11 e0       	ldi	r17, 0x01	; 1
     114:	a0 e0       	ldi	r26, 0x00	; 0
     116:	b1 e0       	ldi	r27, 0x01	; 1
     118:	e8 ea       	ldi	r30, 0xA8	; 168
     11a:	ff e3       	ldi	r31, 0x3F	; 63
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x10>
     11e:	05 90       	lpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	a2 30       	cpi	r26, 0x02	; 2
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0xc>

00000128 <__do_clear_bss>:
     128:	11 e0       	ldi	r17, 0x01	; 1
     12a:	a2 e0       	ldi	r26, 0x02	; 2
     12c:	b1 e0       	ldi	r27, 0x01	; 1
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	ac 39       	cpi	r26, 0x9C	; 156
     134:	b1 07       	cpc	r27, r17
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	0e 94 24 05 	call	0xa48	; 0xa48 <main>
     13c:	0c 94 d2 1f 	jmp	0x3fa4	; 0x3fa4 <_exit>

00000140 <__bad_interrupt>:
     140:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000144 <lcd_data>:
void lcd_space(void) {
   lcd_data(' ');
}

// sends data byte to the LCD 
void lcd_data(unsigned char temp1) {
     144:	1f 93       	push	r17
     146:	18 2f       	mov	r17, r24
 lcd_write_data(temp1);		// set RS to 1
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	61 2f       	mov	r22, r17
     14c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
     150:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <wait50us>
#ifdef WITH_UART
 switch(temp1) {
     154:	18 30       	cpi	r17, 0x08	; 8
     156:	48 f4       	brcc	.+18     	; 0x16a <lcd_data+0x26>
     158:	16 30       	cpi	r17, 0x06	; 6
     15a:	c0 f4       	brcc	.+48     	; 0x18c <lcd_data+0x48>
     15c:	12 30       	cpi	r17, 0x02	; 2
     15e:	61 f0       	breq	.+24     	; 0x178 <lcd_data+0x34>
     160:	13 30       	cpi	r17, 0x03	; 3
     162:	79 f0       	breq	.+30     	; 0x182 <lcd_data+0x3e>
     164:	11 30       	cpi	r17, 0x01	; 1
     166:	f1 f4       	brne	.+60     	; 0x1a4 <lcd_data+0x60>
     168:	05 c0       	rjmp	.+10     	; 0x174 <lcd_data+0x30>
     16a:	14 3e       	cpi	r17, 0xE4	; 228
     16c:	89 f0       	breq	.+34     	; 0x190 <lcd_data+0x4c>
     16e:	14 3f       	cpi	r17, 0xF4	; 244
     170:	c9 f4       	brne	.+50     	; 0x1a4 <lcd_data+0x60>
     172:	10 c0       	rjmp	.+32     	; 0x194 <lcd_data+0x50>
    case LCD_CHAR_DIODE1:
    	uart_putc('>');
     174:	8e e3       	ldi	r24, 0x3E	; 62
     176:	06 c0       	rjmp	.+12     	; 0x184 <lcd_data+0x40>
    	uart_putc('|');
    	break;
    case LCD_CHAR_DIODE2:
    	uart_putc('|');
     178:	8c e7       	ldi	r24, 0x7C	; 124
     17a:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <uart_putc>
    	uart_putc('<');
     17e:	8c e3       	ldi	r24, 0x3C	; 60
     180:	12 c0       	rjmp	.+36     	; 0x1a6 <lcd_data+0x62>
    	break;
    case LCD_CHAR_CAP:
    	uart_putc('|');
     182:	8c e7       	ldi	r24, 0x7C	; 124
     184:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <uart_putc>
    	uart_putc('|');
     188:	8c e7       	ldi	r24, 0x7C	; 124
     18a:	0d c0       	rjmp	.+26     	; 0x1a6 <lcd_data+0x62>
    	break;
    case LCD_CHAR_RESIS1:
    case LCD_CHAR_RESIS2:
    	uart_putc('R');
     18c:	82 e5       	ldi	r24, 0x52	; 82
     18e:	0b c0       	rjmp	.+22     	; 0x1a6 <lcd_data+0x62>
//    case LCD_CHAR_DEGREE:	// degree sign
//    	uart_putc(0xf8);	// codepage 437 or 850 has degree
//    	break;
    case LCD_CHAR_U:		//µ
//    	uart_putc(0xe6);	// codepage 437 or 850 has my
    	uart_putc('u');		// better use the ASCII u
     190:	85 e7       	ldi	r24, 0x75	; 117
     192:	09 c0       	rjmp	.+18     	; 0x1a6 <lcd_data+0x62>
    	break;
    case LCD_CHAR_OMEGA:	//Omega
//	uart_putc(0xea);	// only codepage 437 has Omega
        uart_putc('O');
     194:	8f e4       	ldi	r24, 0x4F	; 79
     196:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <uart_putc>
        uart_putc('h');
     19a:	88 e6       	ldi	r24, 0x68	; 104
     19c:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <uart_putc>
        uart_putc('m');
     1a0:	8d e6       	ldi	r24, 0x6D	; 109
     1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <lcd_data+0x62>
    	break;
    default:
    	uart_putc(temp1);
     1a4:	81 2f       	mov	r24, r17
     1a6:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <uart_putc>
 }
#endif
}
     1aa:	1f 91       	pop	r17
     1ac:	08 95       	ret

000001ae <lcd_space>:
   lcd_data(temp + '1');
}

// send space character to LCD
void lcd_space(void) {
   lcd_data(' ');
     1ae:	80 e2       	ldi	r24, 0x20	; 32
     1b0:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
}
     1b4:	08 95       	ret

000001b6 <lcd_testpin>:
 

// sends numeric character (Pin Number) to the LCD 
// from binary 0 we send ASCII 1 ....
void lcd_testpin(unsigned char temp) {
   lcd_data(temp + '1');
     1b6:	8f 5c       	subi	r24, 0xCF	; 207
     1b8:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
}
     1bc:	08 95       	ret

000001be <uart_newline>:
}


#ifdef WITH_UART
void uart_newline(void) {
   uart_putc('\r');
     1be:	8d e0       	ldi	r24, 0x0D	; 13
     1c0:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <uart_putc>
   uart_putc('\n');
     1c4:	8a e0       	ldi	r24, 0x0A	; 10
     1c6:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <uart_putc>
}
     1ca:	08 95       	ret

000001cc <lcd_command>:
#endif
}
 
// sends a command to the LCD
 
void lcd_command(unsigned char temp1) {
     1cc:	1f 93       	push	r17
     1ce:	18 2f       	mov	r17, r24
        lcd_write_cmd(temp1);		// set RS to 0
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	61 2f       	mov	r22, r17
     1d4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
     1d8:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <wait50us>
#ifdef WITH_UART
	if((temp1 == 0x80) || (temp1 == 0xC0)) {
     1dc:	10 38       	cpi	r17, 0x80	; 128
     1de:	11 f0       	breq	.+4      	; 0x1e4 <lcd_command+0x18>
     1e0:	10 3c       	cpi	r17, 0xC0	; 192
     1e2:	11 f4       	brne	.+4      	; 0x1e8 <lcd_command+0x1c>
		uart_newline();
     1e4:	0e 94 df 00 	call	0x1be	; 0x1be <uart_newline>
	}
#endif
}
     1e8:	1f 91       	pop	r17
     1ea:	08 95       	ret

000001ec <lcd_clear>:
}
 
// send the command to clear the display 
 
void lcd_clear(void) {
   lcd_command(CLEAR_DISPLAY);
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
   wait_about10ms();
     1f2:	82 e0       	ldi	r24, 0x02	; 2
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
#ifdef WITH_UART
   uart_newline();
     1fa:	0e 94 df 00 	call	0x1be	; 0x1be <uart_newline>
#endif
   lcd_line1();			// set cursor to Line1 Column 1, (only for OLED-Display)
     1fe:	80 e8       	ldi	r24, 0x80	; 128
     200:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
}
     204:	08 95       	ret

00000206 <lcd_init>:
 
// Initialise: 
// Must be called first .
 
void lcd_init(void) {
   wait_about30ms();
     206:	86 e0       	ldi	r24, 0x06	; 6
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
   // to initialise, send 3 times to be shure to be in 8 Bit mode
   lcd_write_init(1);
     20e:	80 e8       	ldi	r24, 0x80	; 128
     210:	60 e3       	ldi	r22, 0x30	; 48
     212:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait_about5ms();
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
   
   lcd_write_init(1);
     21e:	80 e8       	ldi	r24, 0x80	; 128
     220:	60 e3       	ldi	r22, 0x30	; 48
     222:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait1ms();
     226:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <wait1ms>

   lcd_write_init(1);
     22a:	80 e8       	ldi	r24, 0x80	; 128
     22c:	60 e3       	ldi	r22, 0x30	; 48
     22e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait1ms();
     232:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <wait1ms>

   lcd_write_init(0);		// switch to 4 Bit mode
     236:	80 e8       	ldi	r24, 0x80	; 128
     238:	60 e2       	ldi	r22, 0x20	; 32
     23a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait_about10ms();
     23e:	82 e0       	ldi	r24, 0x02	; 2
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
   lcd_command(CMD1_SetBias | 0x0c);		// 1/4 bias     (5V)
   lcd_command(CMD1_PowerControl | 0x02);	// booster off / set contrast C5:C4 = 2
   lcd_command(CMD1_FollowerControl | 0x09);	// Follower on / Rab2:0 = 1
   lcd_command(CMD1_SetContrast | 0x04);	// set contrast C3:0 = 4
#endif
   lcd_command(CMD_SetIFOptions | 0x08);	// 4Bit / 2 rows / 5x7
     246:	88 e2       	ldi	r24, 0x28	; 40
     248:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>

   lcd_command(CMD_SetDisplayAndCursor | 0x04); // Display on / Cursor off / no Blinking
     24c:	8c e0       	ldi	r24, 0x0C	; 12
     24e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>

   lcd_command(CMD_SetEntryMode | 0x02);	// increment / no Scroll    
     252:	86 e0       	ldi	r24, 0x06	; 6
     254:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
   lcd_clear();
     258:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
}
     25c:	08 95       	ret

0000025e <lcd_string>:
#endif
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
     25e:	ef 92       	push	r14
     260:	ff 92       	push	r15
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	e8 2e       	mov	r14, r24
     268:	e7 01       	movw	r28, r14
     26a:	7e 01       	movw	r14, r28
     26c:	f9 2e       	mov	r15, r25
     26e:	e7 01       	movw	r28, r14
    while(*data) {
     270:	02 c0       	rjmp	.+4      	; 0x276 <lcd_string+0x18>
        lcd_data(*data);
     272:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
    while(*data) {
     276:	89 91       	ld	r24, Y+
     278:	88 23       	and	r24, r24
     27a:	d9 f7       	brne	.-10     	; 0x272 <lcd_string+0x14>
        lcd_data(*data);
        data++;
    }
}
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	ff 90       	pop	r15
     282:	ef 90       	pop	r14
     284:	08 95       	ret

00000286 <lcd_pgm_string>:

#ifdef use_lcd_pgm
//Load string from PGM  and send to LCD 
void lcd_pgm_string(const unsigned char *data) {
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = pgm_read_byte(data);
     28c:	fe 01       	movw	r30, r28
     28e:	84 91       	lpm	r24, Z+
      if((cc==0) || (cc==128)) {
     290:	88 23       	and	r24, r24
     292:	31 f0       	breq	.+12     	; 0x2a0 <lcd_pgm_string+0x1a>
     294:	80 38       	cpi	r24, 0x80	; 128
     296:	21 f0       	breq	.+8      	; 0x2a0 <lcd_pgm_string+0x1a>
         return;
      }
      lcd_data(cc);
     298:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
      data++;
     29c:	21 96       	adiw	r28, 0x01	; 1
   }
     29e:	f6 cf       	rjmp	.-20     	; 0x28c <lcd_pgm_string+0x6>
}
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <lcd_fix_string>:
#endif

//Load string from PGM or EEprom and send to LCD 
void lcd_fix_string(const unsigned char *data) {
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = MEM_read_byte(data);
     2ac:	ce 01       	movw	r24, r28
     2ae:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__eerd_byte_m168>
      if((cc==0) || (cc==128)) {
     2b2:	88 23       	and	r24, r24
     2b4:	31 f0       	breq	.+12     	; 0x2c2 <lcd_fix_string+0x1c>
     2b6:	80 38       	cpi	r24, 0x80	; 128
     2b8:	21 f0       	breq	.+8      	; 0x2c2 <lcd_fix_string+0x1c>
         return;
      }
      lcd_data(cc);
     2ba:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
      data++;
     2be:	21 96       	adiw	r28, 0x01	; 1
   }
     2c0:	f5 cf       	rjmp	.-22     	; 0x2ac <lcd_fix_string+0x6>
}
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	08 95       	ret

000002c8 <lcd_fix_customchar>:

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	8c 01       	movw	r16, r24
     2d2:	c0 e0       	ldi	r28, 0x00	; 0
     2d4:	d0 e0       	ldi	r29, 0x00	; 0
    for(uint8_t i=0;i<8;i++) {
        lcd_data(MEM_read_byte(chardata));
     2d6:	c8 01       	movw	r24, r16
     2d8:	8c 0f       	add	r24, r28
     2da:	9d 1f       	adc	r25, r29
     2dc:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__eerd_byte_m168>
     2e0:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
     2e4:	21 96       	adiw	r28, 0x01	; 1
   }
}

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
    for(uint8_t i=0;i<8;i++) {
     2e6:	c8 30       	cpi	r28, 0x08	; 8
     2e8:	d1 05       	cpc	r29, r1
     2ea:	a9 f7       	brne	.-22     	; 0x2d6 <lcd_fix_customchar+0xe>
        lcd_data(MEM_read_byte(chardata));
        chardata++;
    }
}
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	0f 91       	pop	r16
     2f4:	08 95       	ret

000002f6 <_lcd_hw_write>:
     2f6:	80 fd       	sbrc	r24, 0
     2f8:	5c 9a       	sbi	0x0b, 4	; 11
     2fa:	80 ff       	sbrs	r24, 0
     2fc:	5c 98       	cbi	0x0b, 4	; 11
     2fe:	54 9a       	sbi	0x0a, 4	; 10
     300:	00 00       	nop
     302:	5d 9a       	sbi	0x0b, 5	; 11
     304:	55 9a       	sbi	0x0a, 5	; 10
     306:	58 98       	cbi	0x0b, 0	; 11
     308:	59 98       	cbi	0x0b, 1	; 11
     30a:	5a 98       	cbi	0x0b, 2	; 11
     30c:	5b 98       	cbi	0x0b, 3	; 11
     30e:	64 fd       	sbrc	r22, 4
     310:	58 9a       	sbi	0x0b, 0	; 11
     312:	50 9a       	sbi	0x0a, 0	; 10
     314:	65 fd       	sbrc	r22, 5
     316:	59 9a       	sbi	0x0b, 1	; 11
     318:	51 9a       	sbi	0x0a, 1	; 10
     31a:	66 fd       	sbrc	r22, 6
     31c:	5a 9a       	sbi	0x0b, 2	; 11
     31e:	52 9a       	sbi	0x0a, 2	; 10
     320:	67 fd       	sbrc	r22, 7
     322:	5b 9a       	sbi	0x0b, 3	; 11
     324:	53 9a       	sbi	0x0a, 3	; 10
     326:	00 00       	nop
     328:	5d 98       	cbi	0x0b, 5	; 11
     32a:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <wait1us>
     32e:	87 fd       	sbrc	r24, 7
     330:	11 c0       	rjmp	.+34     	; 0x354 <_lcd_hw_write_exit>
     332:	5d 9a       	sbi	0x0b, 5	; 11
     334:	58 98       	cbi	0x0b, 0	; 11
     336:	59 98       	cbi	0x0b, 1	; 11
     338:	5a 98       	cbi	0x0b, 2	; 11
     33a:	5b 98       	cbi	0x0b, 3	; 11
     33c:	60 fd       	sbrc	r22, 0
     33e:	58 9a       	sbi	0x0b, 0	; 11
     340:	61 fd       	sbrc	r22, 1
     342:	59 9a       	sbi	0x0b, 1	; 11
     344:	62 fd       	sbrc	r22, 2
     346:	5a 9a       	sbi	0x0b, 2	; 11
     348:	63 fd       	sbrc	r22, 3
     34a:	5b 9a       	sbi	0x0b, 3	; 11
     34c:	00 00       	nop
     34e:	5d 98       	cbi	0x0b, 5	; 11
     350:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <wait1us>

00000354 <_lcd_hw_write_exit>:
     354:	08 95       	ret

00000356 <__vector_7>:
#define MAIN_C
#include "Transistortester.h"

#ifndef INHIBIT_SLEEP_MODE
  // prepare sleep mode
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
     356:	18 95       	reti

00000358 <__vector_21>:
  EMPTY_INTERRUPT(ADC_vect);
     358:	18 95       	reti

0000035a <lcd_clear_line>:

}   // end main


#ifdef LCD_CLEAR
void lcd_clear_line(void) {
     35a:	1f 93       	push	r17
     35c:	14 e1       	ldi	r17, 0x14	; 20
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    lcd_space();
     35e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>
     362:	11 50       	subi	r17, 0x01	; 1

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
     364:	e1 f7       	brne	.-8      	; 0x35e <lcd_clear_line+0x4>
    lcd_space();
 }
}
     366:	1f 91       	pop	r17
     368:	08 95       	ret

0000036a <sleep_5ms>:
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
      pause = 0;
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     36a:	42 e0       	ldi	r20, 0x02	; 2
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     36c:	1c c0       	rjmp	.+56     	; 0x3a6 <sleep_5ms+0x3c>
  {
 #if 3000 > RESTART_DELAY_US
   if (pause > 1)
     36e:	82 30       	cpi	r24, 0x02	; 2
     370:	91 05       	cpc	r25, r1
     372:	18 f0       	brcs	.+6      	; 0x37a <sleep_5ms+0x10>
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
      pause -= 2;
     374:	02 97       	sbiw	r24, 0x02	; 2
  {
 #if 3000 > RESTART_DELAY_US
   if (pause > 1)
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
     376:	3e e3       	ldi	r19, 0x3E	; 62
     378:	03 c0       	rjmp	.+6      	; 0x380 <sleep_5ms+0x16>
      pause -= 2;
     } else {
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
     37a:	37 e1       	ldi	r19, 0x17	; 23
      pause = 0;
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	90 e0       	ldi	r25, 0x00	; 0
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
     380:	20 91 b2 00 	lds	r18, 0x00B2
     384:	23 0f       	add	r18, r19
     386:	20 93 b3 00 	sts	0x00B3, r18
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     38a:	40 93 70 00 	sts	0x0070, r20
   set_sleep_mode(SLEEP_MODE_PWR_SAVE);
     38e:	23 b7       	in	r18, 0x33	; 51
     390:	21 7f       	andi	r18, 0xF1	; 241
     392:	26 60       	ori	r18, 0x06	; 6
     394:	23 bf       	out	0x33, r18	; 51
//   set_sleep_mode(SLEEP_MODE_IDLE);
   sleep_mode();
     396:	23 b7       	in	r18, 0x33	; 51
     398:	21 60       	ori	r18, 0x01	; 1
     39a:	23 bf       	out	0x33, r18	; 51
     39c:	88 95       	sleep
     39e:	23 b7       	in	r18, 0x33	; 51
     3a0:	2e 7f       	andi	r18, 0xFE	; 254
     3a2:	23 bf       	out	0x33, r18	; 51
// wake up after output compare match interrupt
 #else
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
 #endif
   wdt_reset();
     3a4:	a8 95       	wdr
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     3a6:	00 97       	sbiw	r24, 0x00	; 0
     3a8:	11 f7       	brne	.-60     	; 0x36e <sleep_5ms+0x4>
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
 #endif
   wdt_reset();
  }
TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
     3aa:	10 92 70 00 	sts	0x0070, r1
}
     3ae:	08 95       	ret

000003b0 <ShortedProbes>:
 *  - 0 if not shorted
 *  - 1 if shorted
 */

uint8_t ShortedProbes(uint8_t Probe1, uint8_t Probe2)
{
     3b0:	0f 93       	push	r16
     3b2:	1f 93       	push	r17
     3b4:	df 93       	push	r29
     3b6:	cf 93       	push	r28
     3b8:	0f 92       	push	r0
     3ba:	cd b7       	in	r28, 0x3d	; 61
     3bc:	de b7       	in	r29, 0x3e	; 62
   *  Set up a voltage divider between the two probes:
   *  - Probe1: Rl pull-up
   *  - Probe2: Rl pull-down
   */

  ADC_DDR =  TXD_MSK;		// all-Pins to Input
     3be:	98 e0       	ldi	r25, 0x08	; 8
     3c0:	97 b9       	out	0x07, r25	; 7
  ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
     3c2:	98 b9       	out	0x08, r25	; 8
  R_PORT = pgm_read_byte(&PinRLtab[Probe1]);
     3c4:	e8 2f       	mov	r30, r24
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	e6 51       	subi	r30, 0x16	; 22
     3ca:	ff 4f       	sbci	r31, 0xFF	; 255
     3cc:	94 91       	lpm	r25, Z+
     3ce:	95 b9       	out	0x05, r25	; 5
  R_DDR = pgm_read_byte(&PinRLtab[Probe1]) | pgm_read_byte(&PinRLtab[Probe2]);
     3d0:	e6 2f       	mov	r30, r22
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	e6 51       	subi	r30, 0x16	; 22
     3d6:	ff 4f       	sbci	r31, 0xFF	; 255
     3d8:	e4 91       	lpm	r30, Z+
     3da:	e9 2b       	or	r30, r25
     3dc:	e4 b9       	out	0x04, r30	; 4

  /* read voltages */
  U1 = ReadADC(Probe1);
     3de:	69 83       	std	Y+1, r22	; 0x01
     3e0:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
     3e4:	8c 01       	movw	r16, r24
  U2 = ReadADC(Probe2);
     3e6:	69 81       	ldd	r22, Y+1	; 0x01
     3e8:	86 2f       	mov	r24, r22
     3ea:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
     3ee:	ac 01       	movw	r20, r24
   *  We expect both probe voltages to be about the same and
   *  to be half of Vcc (allowed difference +/- 20mV).
   */
  #define MAX_UH_DIFF 20

  URH = ADCconfig.U_AVCC / 2;
     3f0:	20 91 35 01 	lds	r18, 0x0135
     3f4:	30 91 36 01 	lds	r19, 0x0136
     3f8:	36 95       	lsr	r19
     3fa:	27 95       	ror	r18
  if ((U1 > (URH - MAX_UH_DIFF)) && (U1 < (URH + MAX_UH_DIFF)))
     3fc:	c9 01       	movw	r24, r18
     3fe:	44 97       	sbiw	r24, 0x14	; 20
     400:	80 17       	cp	r24, r16
     402:	91 07       	cpc	r25, r17
     404:	60 f4       	brcc	.+24     	; 0x41e <ShortedProbes+0x6e>
     406:	2c 5e       	subi	r18, 0xEC	; 236
     408:	3f 4f       	sbci	r19, 0xFF	; 255
     40a:	02 17       	cp	r16, r18
     40c:	13 07       	cpc	r17, r19
     40e:	38 f4       	brcc	.+14     	; 0x41e <ShortedProbes+0x6e>
  {
    if ((U2 > (URH - MAX_UH_DIFF)) && (U2 < (URH + MAX_UH_DIFF)))
     410:	84 17       	cp	r24, r20
     412:	95 07       	cpc	r25, r21
     414:	20 f4       	brcc	.+8      	; 0x41e <ShortedProbes+0x6e>
 *  - 1 if shorted
 */

uint8_t ShortedProbes(uint8_t Probe1, uint8_t Probe2)
{
  uint8_t           Flag1 = 0;      /* return value */
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	42 17       	cp	r20, r18
     41a:	53 07       	cpc	r21, r19
     41c:	08 f0       	brcs	.+2      	; 0x420 <ShortedProbes+0x70>
     41e:	80 e0       	ldi	r24, 0x00	; 0
      Flag1 = 1;
    }
  }

  /* reset port */
  R_DDR = 0;
     420:	14 b8       	out	0x04, r1	; 4

  return Flag1;
}
     422:	0f 90       	pop	r0
     424:	cf 91       	pop	r28
     426:	df 91       	pop	r29
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	08 95       	ret

0000042e <AllProbesShorted>:
 *  - 0 if no probes are short-circuited
 *  - number of probe pairs short-circuited (3 = all)
 */

uint8_t AllProbesShorted(void)
{
     42e:	1f 93       	push	r17
  uint8_t           Flag2;      /* return value */

  /* check all possible combinations */
  Flag2 = ShortedProbes(TP1, TP2);
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	61 e0       	ldi	r22, 0x01	; 1
     434:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <ShortedProbes>
     438:	18 2f       	mov	r17, r24
  Flag2 += ShortedProbes(TP1, TP3);
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	62 e0       	ldi	r22, 0x02	; 2
     43e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <ShortedProbes>
     442:	18 0f       	add	r17, r24
  Flag2 += ShortedProbes(TP2, TP3);
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	62 e0       	ldi	r22, 0x02	; 2
     448:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <ShortedProbes>

  return Flag2;
}
     44c:	81 0f       	add	r24, r17
     44e:	1f 91       	pop	r17
     450:	08 95       	ret

00000452 <AutoCheck>:
// Selftest of the device and calibration 
void AutoCheck(void) {
     452:	8f 92       	push	r8
     454:	9f 92       	push	r9
     456:	af 92       	push	r10
     458:	bf 92       	push	r11
     45a:	cf 92       	push	r12
     45c:	df 92       	push	r13
     45e:	ef 92       	push	r14
     460:	ff 92       	push	r15
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
     466:	df 93       	push	r29
     468:	cf 93       	push	r28
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
     46e:	2e 97       	sbiw	r28, 0x0e	; 14
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	f8 94       	cli
     474:	de bf       	out	0x3e, r29	; 62
     476:	0f be       	out	0x3f, r0	; 63
     478:	cd bf       	out	0x3d, r28	; 61
  int8_t udiff;		// difference between ADC Voltage with VCC or Bandgap reference
  int8_t udiff2;
  #endif
 #endif
  #define RequireShortedProbes
  if (AllProbesShorted() != 3) return;
     47a:	0e 94 17 02 	call	0x42e	; 0x42e <AllProbesShorted>
     47e:	83 30       	cpi	r24, 0x03	; 3
     480:	09 f0       	breq	.+2      	; 0x484 <AutoCheck+0x32>
     482:	81 c2       	rjmp	.+1282   	; 0x986 <__stack+0x487>
  lcd_clear();
     484:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  lcd_fix_string(SELFTEST);		// "Selftest mode.."
     488:	8c eb       	ldi	r24, 0xBC	; 188
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  lcd_line2();
     490:	80 ec       	ldi	r24, 0xC0	; 192
     492:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_data('?');			// wait for key pressed
     496:	8f e3       	ldi	r24, 0x3F	; 63
     498:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
  for (tt=0;tt<50;tt++) {
     49c:	10 e0       	ldi	r17, 0x00	; 0
     if ((ON_PIN_REG & (1<<RST_PIN)) != 0) break;	// key is unpressed
     49e:	4f 99       	sbic	0x09, 7	; 9
     4a0:	08 c0       	rjmp	.+16     	; 0x4b2 <AutoCheck+0x60>
     wait_about10ms();			// key is still pressed, wait for release
     4a2:	82 e0       	ldi	r24, 0x02	; 2
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
  if (AllProbesShorted() != 3) return;
  lcd_clear();
  lcd_fix_string(SELFTEST);		// "Selftest mode.."
  lcd_line2();
  lcd_data('?');			// wait for key pressed
  for (tt=0;tt<50;tt++) {
     4aa:	1f 5f       	subi	r17, 0xFF	; 255
     4ac:	12 33       	cpi	r17, 0x32	; 50
     4ae:	b9 f7       	brne	.-18     	; 0x49e <AutoCheck+0x4c>
     4b0:	0a c0       	rjmp	.+20     	; 0x4c6 <AutoCheck+0x74>
     if ((ON_PIN_REG & (1<<RST_PIN)) != 0) break;	// key is unpressed
     4b2:	10 e0       	ldi	r17, 0x00	; 0
     wait_about10ms();			// key is still pressed, wait for release
    }
  if (tt == 50) goto no_selftest;		// key is more than 500ms pressed
  for (tt=0;tt<200;tt++) {
     if(!(ON_PIN_REG & (1<<RST_PIN))) goto begin_selftest;	// key is pressed again
     4b4:	4f 9b       	sbis	0x09, 7	; 9
     4b6:	0e c0       	rjmp	.+28     	; 0x4d4 <AutoCheck+0x82>
     wait_about10ms();
     4b8:	82 e0       	ldi	r24, 0x02	; 2
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
  for (tt=0;tt<50;tt++) {
     if ((ON_PIN_REG & (1<<RST_PIN)) != 0) break;	// key is unpressed
     wait_about10ms();			// key is still pressed, wait for release
    }
  if (tt == 50) goto no_selftest;		// key is more than 500ms pressed
  for (tt=0;tt<200;tt++) {
     4c0:	1f 5f       	subi	r17, 0xFF	; 255
     4c2:	18 3c       	cpi	r17, 0xC8	; 200
     4c4:	b9 f7       	brne	.-18     	; 0x4b4 <AutoCheck+0x62>
     if(!(ON_PIN_REG & (1<<RST_PIN))) goto begin_selftest;	// key is pressed again
     wait_about10ms();
    }
  // no key pressed for 2s
no_selftest:
  lcd_clear();
     4c6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  lcd_fix2_string(VERSION_str);	//"Version ..."
     4ca:	88 ed       	ldi	r24, 0xD8	; 216
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
  return;
     4d2:	59 c2       	rjmp	.+1202   	; 0x986 <__stack+0x487>
begin_selftest:
  lcd_line2();
     4d4:	80 ec       	ldi	r24, 0xC0	; 192
     4d6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix2_string(R0_str);		// "R0="
     4da:	86 ee       	ldi	r24, 0xE6	; 230
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[2]), (int8_t)0);	// clear zero offset
     4e2:	8a ea       	ldi	r24, 0xAA	; 170
     4e4:	91 e0       	ldi	r25, 0x01	; 1
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__eewr_byte_m168>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (int8_t)0);	// clear zero offset
     4ec:	8b ea       	ldi	r24, 0xAB	; 171
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__eewr_byte_m168>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)0);	// clear zero offset
     4f6:	89 ea       	ldi	r24, 0xA9	; 169
     4f8:	91 e0       	ldi	r25, 0x01	; 1
     4fa:	60 e0       	ldi	r22, 0x00	; 0
     4fc:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__eewr_byte_m168>

  adcmv[0] = GetESR(TP3, TP1);
     500:	82 e0       	ldi	r24, 0x02	; 2
     502:	60 e0       	ldi	r22, 0x00	; 0
     504:	0e 94 40 1b 	call	0x3680	; 0x3680 <GetESR>
     508:	7c 01       	movw	r14, r24
     50a:	9a 83       	std	Y+2, r25	; 0x02
     50c:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = GetESR(TP3, TP2);
     50e:	82 e0       	ldi	r24, 0x02	; 2
     510:	61 e0       	ldi	r22, 0x01	; 1
     512:	0e 94 40 1b 	call	0x3680	; 0x3680 <GetESR>
     516:	6c 01       	movw	r12, r24
     518:	9c 83       	std	Y+4, r25	; 0x04
     51a:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = GetESR(TP2, TP1);
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	60 e0       	ldi	r22, 0x00	; 0
     520:	0e 94 40 1b 	call	0x3680	; 0x3680 <GetESR>
     524:	5c 01       	movw	r10, r24
     526:	9e 83       	std	Y+6, r25	; 0x06
     528:	8d 83       	std	Y+5, r24	; 0x05
  DisplayValue(adcmv[0],-2,' ',3);
     52a:	b7 01       	movw	r22, r14
     52c:	88 27       	eor	r24, r24
     52e:	77 fd       	sbrc	r23, 7
     530:	80 95       	com	r24
     532:	98 2f       	mov	r25, r24
     534:	4e ef       	ldi	r20, 0xFE	; 254
     536:	20 e2       	ldi	r18, 0x20	; 32
     538:	03 e0       	ldi	r16, 0x03	; 3
     53a:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DisplayValue>
  DisplayValue(adcmv[1],-2,' ',3);
     53e:	b6 01       	movw	r22, r12
     540:	88 27       	eor	r24, r24
     542:	77 fd       	sbrc	r23, 7
     544:	80 95       	com	r24
     546:	98 2f       	mov	r25, r24
     548:	4e ef       	ldi	r20, 0xFE	; 254
     54a:	20 e2       	ldi	r18, 0x20	; 32
     54c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DisplayValue>
  DisplayValue(adcmv[2],-2,LCD_CHAR_OMEGA,3);
     550:	b5 01       	movw	r22, r10
     552:	88 27       	eor	r24, r24
     554:	77 fd       	sbrc	r23, 7
     556:	80 95       	com	r24
     558:	98 2f       	mov	r25, r24
     55a:	4e ef       	ldi	r20, 0xFE	; 254
     55c:	24 ef       	ldi	r18, 0xF4	; 244
     55e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DisplayValue>
  if (adcmv[0] < 90) {
     562:	2a e5       	ldi	r18, 0x5A	; 90
     564:	e2 16       	cp	r14, r18
     566:	f1 04       	cpc	r15, r1
     568:	2c f4       	brge	.+10     	; 0x574 <__stack+0x75>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[2]), (int8_t)adcmv[0]);	// fix zero offset
     56a:	8a ea       	ldi	r24, 0xAA	; 170
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	6e 2d       	mov	r22, r14
     570:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__eewr_byte_m168>
  }
  if (adcmv[1] < 90) {
     574:	8a e5       	ldi	r24, 0x5A	; 90
     576:	c8 16       	cp	r12, r24
     578:	d1 04       	cpc	r13, r1
     57a:	2c f4       	brge	.+10     	; 0x586 <__stack+0x87>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (int8_t)adcmv[1]);	// fix zero offset
     57c:	8b ea       	ldi	r24, 0xAB	; 171
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	6c 2d       	mov	r22, r12
     582:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__eewr_byte_m168>
  }
  if (adcmv[2] < 90) {
     586:	ea e5       	ldi	r30, 0x5A	; 90
     588:	ae 16       	cp	r10, r30
     58a:	b1 04       	cpc	r11, r1
     58c:	2c f4       	brge	.+10     	; 0x598 <__stack+0x99>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
     58e:	89 ea       	ldi	r24, 0xA9	; 169
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	6a 2d       	mov	r22, r10
     594:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__eewr_byte_m168>
  }
  wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
     598:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <wait_for_key_5s_line2>
     59c:	18 e7       	ldi	r17, 0x78	; 120
  } //end for tt
#else
  // without extended tests
  for (ww=0;ww<120;ww++) {
     // wait 1 minute for releasing the probes
     lcd_line2();		//Cursor to column 1, row 2
     59e:	80 ec       	ldi	r24, 0xC0	; 192
     5a0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     lcd_clear_line();		// clear total line
     5a4:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_clear_line>
     lcd_line2();		//Cursor to column 1, row 2
     5a8:	80 ec       	ldi	r24, 0xC0	; 192
     5aa:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     lcd_fix_string(RELPROBE);	// "Release Probes"
     5ae:	8c ec       	ldi	r24, 0xCC	; 204
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     wait_about500ms();
     5b6:	84 e6       	ldi	r24, 0x64	; 100
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
     if (AllProbesShorted() == 0) break;
     5be:	0e 94 17 02 	call	0x42e	; 0x42e <AllProbesShorted>
     5c2:	88 23       	and	r24, r24
     5c4:	11 f0       	breq	.+4      	; 0x5ca <__stack+0xcb>
     5c6:	11 50       	subi	r17, 0x01	; 1
     } //end for ww
     wait_about1s();
  } //end for tt
#else
  // without extended tests
  for (ww=0;ww<120;ww++) {
     5c8:	51 f7       	brne	.-44     	; 0x59e <__stack+0x9f>
     wait_about500ms();
     if (AllProbesShorted() == 0) break;
  }
#endif

  lcd_clear();
     5ca:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  lcd_fix_string(RIHI);	// "RiHi="
     5ce:	87 e5       	ldi	r24, 0x57	; 87
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  DisplayValue(RRpinPL,-1,LCD_CHAR_OMEGA,3);
     5d6:	60 91 37 01 	lds	r22, 0x0137
     5da:	70 91 38 01 	lds	r23, 0x0138
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	4f ef       	ldi	r20, 0xFF	; 255
     5e4:	24 ef       	ldi	r18, 0xF4	; 244
     5e6:	03 e0       	ldi	r16, 0x03	; 3
     5e8:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DisplayValue>
  lcd_line2();
     5ec:	80 ec       	ldi	r24, 0xC0	; 192
     5ee:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_string(RILO);	// "RiLo="
     5f2:	8e e5       	ldi	r24, 0x5E	; 94
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  DisplayValue(RRpinMI,-1,LCD_CHAR_OMEGA,3);
     5fa:	60 91 3d 01 	lds	r22, 0x013D
     5fe:	70 91 3e 01 	lds	r23, 0x013E
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	4f ef       	ldi	r20, 0xFF	; 255
     608:	24 ef       	ldi	r18, 0xF4	; 244
     60a:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DisplayValue>
  wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
     60e:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <wait_for_key_5s_line2>

  //measure Zero offset for Capacity measurement
  PartFound = PART_NONE;
     612:	10 92 07 01 	sts	0x0107, r1
  lcd_clear();
     616:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  lcd_fix_string(C0_str);			//output "C0 "
     61a:	85 e6       	ldi	r24, 0x65	; 101
     61c:	91 e0       	ldi	r25, 0x01	; 1
     61e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  ReadCapacity(TP3, TP1);
     622:	82 e0       	ldi	r24, 0x02	; 2
     624:	60 e0       	ldi	r22, 0x00	; 0
     626:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <ReadCapacity>
  adcmv[5] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:3
     62a:	00 91 72 01 	lds	r16, 0x0172
     62e:	10 91 73 01 	lds	r17, 0x0173
     632:	1c 87       	std	Y+12, r17	; 0x0c
     634:	0b 87       	std	Y+11, r16	; 0x0b
  ReadCapacity(TP3, TP2);
     636:	82 e0       	ldi	r24, 0x02	; 2
     638:	61 e0       	ldi	r22, 0x01	; 1
     63a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <ReadCapacity>
  adcmv[6] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:3
     63e:	e0 90 72 01 	lds	r14, 0x0172
     642:	f0 90 73 01 	lds	r15, 0x0173
     646:	fe 86       	std	Y+14, r15	; 0x0e
     648:	ed 86       	std	Y+13, r14	; 0x0d
  ReadCapacity(TP2, TP1);
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	60 e0       	ldi	r22, 0x00	; 0
     64e:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <ReadCapacity>
  adcmv[2] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:2
     652:	c0 90 72 01 	lds	r12, 0x0172
     656:	d0 90 73 01 	lds	r13, 0x0173
     65a:	de 82       	std	Y+6, r13	; 0x06
     65c:	cd 82       	std	Y+5, r12	; 0x05
  ReadCapacity(TP1, TP3);
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	62 e0       	ldi	r22, 0x02	; 2
     662:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <ReadCapacity>
  adcmv[1] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:1
     666:	80 91 72 01 	lds	r24, 0x0172
     66a:	90 91 73 01 	lds	r25, 0x0173
     66e:	9c 83       	std	Y+4, r25	; 0x04
     670:	8b 83       	std	Y+3, r24	; 0x03
  ReadCapacity(TP2, TP3);
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	62 e0       	ldi	r22, 0x02	; 2
     676:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <ReadCapacity>
  adcmv[4] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:2
     67a:	80 91 72 01 	lds	r24, 0x0172
     67e:	90 91 73 01 	lds	r25, 0x0173
     682:	9a 87       	std	Y+10, r25	; 0x0a
     684:	89 87       	std	Y+9, r24	; 0x09
  ReadCapacity(TP1, TP2);
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	61 e0       	ldi	r22, 0x01	; 1
     68a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <ReadCapacity>
  adcmv[0] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:1
     68e:	80 91 72 01 	lds	r24, 0x0172
     692:	90 91 73 01 	lds	r25, 0x0173
     696:	9a 83       	std	Y+2, r25	; 0x02
     698:	89 83       	std	Y+1, r24	; 0x01
  adcmv[3] = adcmv[0];			// same as first for the checking loop, mark as calibrated
     69a:	98 87       	std	Y+8, r25	; 0x08
     69c:	8f 83       	std	Y+7, r24	; 0x07
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
     69e:	b8 01       	movw	r22, r16
     6a0:	88 27       	eor	r24, r24
     6a2:	77 fd       	sbrc	r23, 7
     6a4:	80 95       	com	r24
     6a6:	98 2f       	mov	r25, r24
     6a8:	40 e0       	ldi	r20, 0x00	; 0
     6aa:	20 e2       	ldi	r18, 0x20	; 32
     6ac:	03 e0       	ldi	r16, 0x03	; 3
     6ae:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DisplayValue>
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
     6b2:	b7 01       	movw	r22, r14
     6b4:	88 27       	eor	r24, r24
     6b6:	77 fd       	sbrc	r23, 7
     6b8:	80 95       	com	r24
     6ba:	98 2f       	mov	r25, r24
     6bc:	40 e0       	ldi	r20, 0x00	; 0
     6be:	20 e2       	ldi	r18, 0x20	; 32
     6c0:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DisplayValue>
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
     6c4:	b6 01       	movw	r22, r12
     6c6:	88 27       	eor	r24, r24
     6c8:	77 fd       	sbrc	r23, 7
     6ca:	80 95       	com	r24
     6cc:	98 2f       	mov	r25, r24
     6ce:	44 ef       	ldi	r20, 0xF4	; 244
     6d0:	26 e4       	ldi	r18, 0x46	; 70
     6d2:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DisplayValue>
     6d6:	8e 01       	movw	r16, r28
     6d8:	0f 5f       	subi	r16, 0xFF	; 255
     6da:	1f 4f       	sbci	r17, 0xFF	; 255
// Selftest of the device and calibration 
void AutoCheck(void) {
     6dc:	9e 01       	movw	r18, r28
     6de:	21 5f       	subi	r18, 0xF1	; 241
     6e0:	3f 4f       	sbci	r19, 0xFF	; 255
     6e2:	f8 01       	movw	r30, r16
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {			//checking loop
      if ((adcmv[ww] > 190) || (adcmv[ww] < 10)) goto no_c0save;
     6e4:	81 91       	ld	r24, Z+
     6e6:	91 91       	ld	r25, Z+
     6e8:	0a 97       	sbiw	r24, 0x0a	; 10
     6ea:	85 3b       	cpi	r24, 0xB5	; 181
     6ec:	91 05       	cpc	r25, r1
     6ee:	e8 f4       	brcc	.+58     	; 0x72a <__stack+0x22b>
  adcmv[3] = adcmv[0];			// same as first for the checking loop, mark as calibrated
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {			//checking loop
     6f0:	e2 17       	cp	r30, r18
     6f2:	f3 07       	cpc	r31, r19
     6f4:	b9 f7       	brne	.-18     	; 0x6e4 <__stack+0x1e5>
     6f6:	ee 24       	eor	r14, r14
     6f8:	ff 24       	eor	r15, r15
      if ((adcmv[ww] > 190) || (adcmv[ww] < 10)) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
     6fa:	f8 01       	movw	r30, r16
     6fc:	60 81       	ld	r22, Z
     6fe:	0e 5f       	subi	r16, 0xFE	; 254
     700:	1f 4f       	sbci	r17, 0xFF	; 255
     702:	61 5f       	subi	r22, 0xF1	; 241
     704:	c7 01       	movw	r24, r14
     706:	8f 55       	subi	r24, 0x5F	; 95
     708:	9e 4f       	sbci	r25, 0xFE	; 254
     70a:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__eewr_byte_m168>
     70e:	08 94       	sec
     710:	e1 1c       	adc	r14, r1
     712:	f1 1c       	adc	r15, r1
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {			//checking loop
      if ((adcmv[ww] > 190) || (adcmv[ww] < 10)) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
     714:	f7 e0       	ldi	r31, 0x07	; 7
     716:	ef 16       	cp	r14, r31
     718:	f1 04       	cpc	r15, r1
     71a:	79 f7       	brne	.-34     	; 0x6fa <__stack+0x1fb>
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
  }
  lcd_line2();
     71c:	80 ec       	ldi	r24, 0xC0	; 192
     71e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_string(OK_str);		// output "OK"
     722:	8a ee       	ldi	r24, 0xEA	; 234
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
no_c0save:
 #endif
 wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
     72a:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <wait_for_key_5s_line2>
     72e:	50 e4       	ldi	r21, 0x40	; 64
     730:	c5 2e       	mov	r12, r21
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
     732:	10 e0       	ldi	r17, 0x00	; 0
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
     734:	4a e0       	ldi	r20, 0x0A	; 10
     736:	84 2e       	mov	r8, r20
     738:	91 2c       	mov	r9, r1
     73a:	a1 2c       	mov	r10, r1
     73c:	b1 2c       	mov	r11, r1
     lcd_data('3');
     lcd_fix2_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
     73e:	3a e6       	ldi	r19, 0x6A	; 106
     740:	e3 2e       	mov	r14, r19
     742:	31 e0       	ldi	r19, 0x01	; 1
     744:	f3 2e       	mov	r15, r19
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
     lcd_clear();
     746:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
     lcd_data('1');
     74a:	81 e3       	ldi	r24, 0x31	; 49
     74c:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
     lcd_fix_string(CapZeich);	// "-||-"
     750:	8f e1       	ldi	r24, 0x1F	; 31
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_data('3');
     758:	83 e3       	ldi	r24, 0x33	; 51
     75a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
     lcd_fix2_string(MinCap_str); // " >100nF!"
     75e:	80 ef       	ldi	r24, 0xF0	; 240
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
     PartFound = PART_NONE;
     766:	10 92 07 01 	sts	0x0107, r1
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	60 e0       	ldi	r22, 0x00	; 0
     76e:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <ReadCapacity>
     772:	20 91 6a 01 	lds	r18, 0x016A
     776:	30 91 6b 01 	lds	r19, 0x016B
     77a:	40 91 6c 01 	lds	r20, 0x016C
     77e:	50 91 6d 01 	lds	r21, 0x016D
     782:	00 91 7c 01 	lds	r16, 0x017C
     while (cap.cpre < -9) {
     786:	07 c0       	rjmp	.+14     	; 0x796 <__stack+0x297>
        cap.cpre++;
        cap.cval /= 10;
     788:	ca 01       	movw	r24, r20
     78a:	b9 01       	movw	r22, r18
     78c:	a5 01       	movw	r20, r10
     78e:	94 01       	movw	r18, r8
     790:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
     794:	0f 5f       	subi	r16, 0xFF	; 255
     lcd_data('3');
     lcd_fix2_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
     796:	07 3f       	cpi	r16, 0xF7	; 247
     798:	bc f3       	brlt	.-18     	; 0x788 <__stack+0x289>
     79a:	00 93 7c 01 	sts	0x017C, r16
     79e:	20 93 6a 01 	sts	0x016A, r18
     7a2:	f7 01       	movw	r30, r14
     7a4:	31 83       	std	Z+1, r19	; 0x01
     7a6:	42 83       	std	Z+2, r20	; 0x02
     7a8:	53 83       	std	Z+3, r21	; 0x03
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000) &&
     7aa:	07 3f       	cpi	r16, 0xF7	; 247
     7ac:	09 f0       	breq	.+2      	; 0x7b0 <__stack+0x2b1>
     7ae:	be c0       	rjmp	.+380    	; 0x92c <__stack+0x42d>
     7b0:	20 36       	cpi	r18, 0x60	; 96
     7b2:	31 05       	cpc	r19, r1
     7b4:	41 05       	cpc	r20, r1
     7b6:	51 05       	cpc	r21, r1
     7b8:	08 f4       	brcc	.+2      	; 0x7bc <__stack+0x2bd>
     7ba:	b8 c0       	rjmp	.+368    	; 0x92c <__stack+0x42d>
     7bc:	20 3f       	cpi	r18, 0xF0	; 240
     7be:	f5 e5       	ldi	r31, 0x55	; 85
     7c0:	3f 07       	cpc	r19, r31
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	4f 07       	cpc	r20, r31
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	5f 07       	cpc	r21, r31
     7ca:	08 f0       	brcs	.+2      	; 0x7ce <__stack+0x2cf>
     7cc:	af c0       	rjmp	.+350    	; 0x92c <__stack+0x42d>
         (load_diff > -150) && (load_diff < 150)) {
     7ce:	60 91 7e 01 	lds	r22, 0x017E
     7d2:	70 91 7f 01 	lds	r23, 0x017F
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000) &&
     7d6:	2f ef       	ldi	r18, 0xFF	; 255
     7d8:	6b 36       	cpi	r22, 0x6B	; 107
     7da:	72 07       	cpc	r23, r18
     7dc:	0c f4       	brge	.+2      	; 0x7e0 <__stack+0x2e1>
     7de:	a6 c0       	rjmp	.+332    	; 0x92c <__stack+0x42d>
         (load_diff > -150) && (load_diff < 150)) {
     7e0:	66 39       	cpi	r22, 0x96	; 150
     7e2:	71 05       	cpc	r23, r1
     7e4:	0c f0       	brlt	.+2      	; 0x7e8 <__stack+0x2e9>
     7e6:	a2 c0       	rjmp	.+324    	; 0x92c <__stack+0x42d>
        cap_found++;
     7e8:	1f 5f       	subi	r17, 0xFF	; 255
     } else {
        cap_found = 0;		// wait for stable connection
     }
     if (cap_found > 1) {
     7ea:	12 30       	cpi	r17, 0x02	; 2
     7ec:	09 f0       	breq	.+2      	; 0x7f0 <__stack+0x2f1>
     7ee:	9f c0       	rjmp	.+318    	; 0x92e <__stack+0x42f>
        // value of capacitor is correct
        (void) eeprom_write_word((uint16_t *)(&ref_offset), load_diff);	// hold zero offset + slew rate dependend offset
     7f0:	8f e9       	ldi	r24, 0x9F	; 159
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <__eewr_word_m168>
        lcd_clear();
     7f8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
        lcd_fix2_string(REF_C_str);	// "REF_C="
     7fc:	88 ef       	ldi	r24, 0xF8	; 248
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
        lcd_string(itoa(load_diff, outval, 10));	//output REF_C_KORR
     804:	80 91 7e 01 	lds	r24, 0x017E
     808:	90 91 7f 01 	lds	r25, 0x017F
     80c:	6d e0       	ldi	r22, 0x0D	; 13
     80e:	71 e0       	ldi	r23, 0x01	; 1
     810:	4a e0       	ldi	r20, 0x0A	; 10
     812:	50 e0       	ldi	r21, 0x00	; 0
     814:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <itoa>
     818:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_string>
        wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
        }
//#######################################
#endif
  #ifdef AUTOSCALE_ADC
        ADC_PORT =  TXD_VAL;	//ADC-Port 1 to GND
     81c:	88 e0       	ldi	r24, 0x08	; 8
     81e:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
     820:	89 e0       	ldi	r24, 0x09	; 9
     822:	87 b9       	out	0x07, r24	; 7
        R_DDR = 1<<PIN_RH3;		//Pin 3 over R_H to GND
     824:	80 e2       	ldi	r24, 0x20	; 32
     826:	84 b9       	out	0x04, r24	; 4
        do {
           adcmv[0] = ReadADC(TP3);
     828:	82 e0       	ldi	r24, 0x02	; 2
     82a:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
        } while (adcmv[0] > 980);
     82e:	e3 e0       	ldi	r30, 0x03	; 3
     830:	85 3d       	cpi	r24, 0xD5	; 213
     832:	9e 07       	cpc	r25, r30
     834:	cc f7       	brge	.-14     	; 0x828 <__stack+0x329>
        R_DDR = 0;		//all Pins to input 
     836:	14 b8       	out	0x04, r1	; 4
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
     838:	10 92 34 01 	sts	0x0134, r1
     83c:	10 92 33 01 	sts	0x0133, r1
        adcmv[0] = ReadADC(TP3);  // get cap voltage with VCC reference
     840:	82 e0       	ldi	r24, 0x02	; 2
     842:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
     846:	4c 01       	movw	r8, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
     848:	8e e9       	ldi	r24, 0x9E	; 158
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__eerd_byte_m168>
     850:	99 27       	eor	r25, r25
     852:	87 fd       	sbrc	r24, 7
     854:	90 95       	com	r25
     856:	20 91 39 01 	lds	r18, 0x0139
     85a:	30 91 3a 01 	lds	r19, 0x013A
     85e:	82 0f       	add	r24, r18
     860:	93 1f       	adc	r25, r19
     862:	90 93 34 01 	sts	0x0134, r25
     866:	80 93 33 01 	sts	0x0133, r24
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
     86a:	82 e0       	ldi	r24, 0x02	; 2
     86c:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
     870:	5c 01       	movw	r10, r24
        adcmv[1] += adcmv[1];		// double the value
     872:	aa 0c       	add	r10, r10
     874:	bb 1c       	adc	r11, r11
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
     876:	10 92 34 01 	sts	0x0134, r1
     87a:	10 92 33 01 	sts	0x0133, r1
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
     87e:	82 e0       	ldi	r24, 0x02	; 2
     880:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
     884:	6c 01       	movw	r12, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
     886:	00 91 39 01 	lds	r16, 0x0139
     88a:	10 91 3a 01 	lds	r17, 0x013A
     88e:	8e e9       	ldi	r24, 0x9E	; 158
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__eerd_byte_m168>
     896:	99 27       	eor	r25, r25
     898:	87 fd       	sbrc	r24, 7
     89a:	90 95       	com	r25
     89c:	80 0f       	add	r24, r16
     89e:	91 1f       	adc	r25, r17
     8a0:	90 93 34 01 	sts	0x0134, r25
     8a4:	80 93 33 01 	sts	0x0133, r24
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1])) * ADC_internal_reference / adcmv[1])+REF_R_KORR;
     8a8:	8e e9       	ldi	r24, 0x9E	; 158
     8aa:	91 e0       	ldi	r25, 0x01	; 1
     8ac:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__eerd_byte_m168>
     8b0:	f8 2e       	mov	r15, r24
        lcd_line2();
     8b2:	80 ec       	ldi	r24, 0xC0	; 192
     8b4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
        lcd_fix2_string(REF_R_str);	// "REF_R="
     8b8:	8f ef       	ldi	r24, 0xFF	; 255
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
     8c0:	8e e9       	ldi	r24, 0x9E	; 158
     8c2:	91 e0       	ldi	r25, 0x01	; 1
     8c4:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__eerd_byte_m168>
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
        adcmv[1] += adcmv[1];		// double the value
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
        ADCconfig.U_Bandgap = ADC_internal_reference;
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1])) * ADC_internal_reference / adcmv[1])+REF_R_KORR;
     8c8:	93 e0       	ldi	r25, 0x03	; 3
     8ca:	e9 2e       	mov	r14, r25
     8cc:	e8 0e       	add	r14, r24
     8ce:	c8 0c       	add	r12, r8
     8d0:	d9 1c       	adc	r13, r9
     8d2:	ca 18       	sub	r12, r10
     8d4:	db 08       	sbc	r13, r11
     8d6:	b6 01       	movw	r22, r12
     8d8:	88 27       	eor	r24, r24
     8da:	77 fd       	sbrc	r23, 7
     8dc:	80 95       	com	r24
     8de:	98 2f       	mov	r25, r24
     8e0:	2f 2d       	mov	r18, r15
     8e2:	33 27       	eor	r19, r19
     8e4:	27 fd       	sbrc	r18, 7
     8e6:	30 95       	com	r19
     8e8:	20 0f       	add	r18, r16
     8ea:	31 1f       	adc	r19, r17
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	50 e0       	ldi	r21, 0x00	; 0
     8f0:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
     8f4:	95 01       	movw	r18, r10
     8f6:	44 27       	eor	r20, r20
     8f8:	37 fd       	sbrc	r19, 7
     8fa:	40 95       	com	r20
     8fc:	54 2f       	mov	r21, r20
     8fe:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__divmodsi4>
        lcd_line2();
        lcd_fix2_string(REF_R_str);	// "REF_R="
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
     902:	e2 0e       	add	r14, r18
        (void) eeprom_write_byte((uint8_t *)(&RefDiff), (uint8_t)udiff2);	// hold offset for true reference Voltage
     904:	8e e9       	ldi	r24, 0x9E	; 158
     906:	91 e0       	ldi	r25, 0x01	; 1
     908:	6e 2d       	mov	r22, r14
     90a:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__eewr_byte_m168>
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
     90e:	8e 2d       	mov	r24, r14
     910:	99 27       	eor	r25, r25
     912:	87 fd       	sbrc	r24, 7
     914:	90 95       	com	r25
     916:	6d e0       	ldi	r22, 0x0D	; 13
     918:	71 e0       	ldi	r23, 0x01	; 1
     91a:	4a e0       	ldi	r20, 0x0A	; 10
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <itoa>
     922:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_string>
  #endif
        wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
     926:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <wait_for_key_5s_line2>
        break;
     92a:	19 c0       	rjmp	.+50     	; 0x95e <__stack+0x45f>
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000) &&
         (load_diff > -150) && (load_diff < 150)) {
     92c:	10 e0       	ldi	r17, 0x00	; 0
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
  #endif
        wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
        break;
     }
     lcd_line2();
     92e:	80 ec       	ldi	r24, 0xC0	; 192
     930:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     DisplayValue(cap.cval,cap.cpre,'F',4);
     934:	60 91 6a 01 	lds	r22, 0x016A
     938:	70 91 6b 01 	lds	r23, 0x016B
     93c:	80 91 6c 01 	lds	r24, 0x016C
     940:	90 91 6d 01 	lds	r25, 0x016D
     944:	40 91 7c 01 	lds	r20, 0x017C
     948:	26 e4       	ldi	r18, 0x46	; 70
     94a:	04 e0       	ldi	r16, 0x04	; 4
     94c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DisplayValue>
     wait_about200ms();			// wait additional time
     950:	88 e2       	ldi	r24, 0x28	; 40
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
     958:	ca 94       	dec	r12
 wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
     95a:	09 f0       	breq	.+2      	; 0x95e <__stack+0x45f>
     95c:	f4 ce       	rjmp	.-536    	; 0x746 <__stack+0x247>
     wait_about200ms();			// wait additional time
  } // end for ww
 #endif


  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
     95e:	89 e1       	ldi	r24, 0x19	; 25
     960:	80 93 31 01 	sts	0x0131, r24
  lcd_clear();
     964:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  lcd_fix2_string(VERSION_str);	//"Version ..."
     968:	88 ed       	ldi	r24, 0xD8	; 216
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
  lcd_line2();
     970:	80 ec       	ldi	r24, 0xC0	; 192
     972:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_string(ATE);		//"Selftest End"
     976:	8b ed       	ldi	r24, 0xDB	; 219
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        // if key is pressed, don't repeat
        break;
     }
  }
 #endif
 PartFound = PART_NONE;
     97e:	10 92 07 01 	sts	0x0107, r1
 wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
     982:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <wait_for_key_5s_line2>
 } 
     986:	2e 96       	adiw	r28, 0x0e	; 14
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	f8 94       	cli
     98c:	de bf       	out	0x3e, r29	; 62
     98e:	0f be       	out	0x3f, r0	; 63
     990:	cd bf       	out	0x3d, r28	; 61
     992:	cf 91       	pop	r28
     994:	df 91       	pop	r29
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	ff 90       	pop	r15
     99c:	ef 90       	pop	r14
     99e:	df 90       	pop	r13
     9a0:	cf 90       	pop	r12
     9a2:	bf 90       	pop	r11
     9a4:	af 90       	pop	r10
     9a6:	9f 90       	pop	r9
     9a8:	8f 90       	pop	r8
     9aa:	08 95       	ret

000009ac <mark_as_uncalibrated>:
void mark_as_uncalibrated( void) {
 uint8_t ii;
 if (!UnCalibrated) {
     9ac:	80 91 3c 01 	lds	r24, 0x013C
     9b0:	88 23       	and	r24, r24
     9b2:	69 f4       	brne	.+26     	; 0x9ce <mark_as_uncalibrated+0x22>
    // equipment has changed, zero capacity value is too high or zero resistance is too high
    ii = eeprom_read_byte((uint8_t *)&c_zero_tab[0]);	// read first zero offset
     9b4:	81 ea       	ldi	r24, 0xA1	; 161
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__eerd_byte_m168>
    ii++;
     9bc:	68 2f       	mov	r22, r24
     9be:	6f 5f       	subi	r22, 0xFF	; 255
    // make the unused c_zero_tab[3] different to c_zero_tab[0] to mark uncalibrated 
    eeprom_write_byte((uint8_t *)&c_zero_tab[3], ii);	// mark uncalibrated permanent
     9c0:	84 ea       	ldi	r24, 0xA4	; 164
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__eewr_byte_m168>
    UnCalibrated = 1;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	80 93 3c 01 	sts	0x013C, r24
     9ce:	08 95       	ret

000009d0 <GetIr>:
/* Get residual current in reverse direction of a diode */ 



//=================================================================
void GetIr(uint8_t hipin, uint8_t lopin) {
     9d0:	0f 93       	push	r16
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
  unsigned int u_res;	// reverse voltage at 470k
  unsigned int ir_nano;
  uint8_t HiADC;

  HiADC = pgm_read_byte(&PinADCtab[hipin]);
     9d6:	e8 2f       	mov	r30, r24
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	e3 51       	subi	r30, 0x13	; 19
     9dc:	ff 4f       	sbci	r31, 0xFF	; 255
     9de:	e4 91       	lpm	r30, Z+
  ADC_PORT = HiADC | TXD_VAL;		// switch ADC port to high level
     9e0:	e8 60       	ori	r30, 0x08	; 8
     9e2:	e8 b9       	out	0x08, r30	; 8
  ADC_DDR = HiADC | TXD_MSK;		// switch High Pin direct to VCC
     9e4:	e7 b9       	out	0x07, r30	; 7
  R_PORT = 0;				// switch R-Port to GND
     9e6:	15 b8       	out	0x05, r1	; 5
#if FLASHEND > 0x3fff
  R_DDR = pgm_read_byte(&PinRHtab[lopin]);  //R_H mask for LowPin R_H load
#else
  uint8_t LoPinR_L;
  LoPinR_L = pgm_read_byte(&PinRLtab[lopin]);  //R_L mask for LowPin R_L load
     9e8:	e6 2f       	mov	r30, r22
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	e6 51       	subi	r30, 0x16	; 22
     9ee:	ff 4f       	sbci	r31, 0xFF	; 255
     9f0:	e4 91       	lpm	r30, Z+
  // R_H Pin must always be one pin number higher
  R_DDR = LoPinR_L + LoPinR_L;		// switch R_H port for LowPin to output (GND)
     9f2:	ee 0f       	add	r30, r30
     9f4:	e4 b9       	out	0x04, r30	; 4
#endif
  u_res = W5msReadADC(lopin);		// read voltage
     9f6:	86 2f       	mov	r24, r22
     9f8:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
     9fc:	ec 01       	movw	r28, r24
  if (u_res == 0) return;		// no Output, if no current in reverse direction
     9fe:	00 97       	sbiw	r24, 0x00	; 0
     a00:	f9 f0       	breq	.+62     	; 0xa40 <GetIr+0x70>
  lcd_fix_string(Ir_str);		// output text "  Ir="
     a02:	8f e3       	ldi	r24, 0x3F	; 63
     a04:	91 e0       	ldi	r25, 0x01	; 1
     a06:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
#ifdef WITH_IRMICRO
  unsigned int ir_micro;
  if (u_res < 2500) {
#endif
     /* R_H_VAL has units of 10 Ohm, u_res has units of mV, ir_nano has units of nA */
     ir_nano = (unsigned long)(u_res * 100000UL) / R_H_VAL;
     a0a:	be 01       	movw	r22, r28
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	20 ea       	ldi	r18, 0xA0	; 160
     a12:	36 e8       	ldi	r19, 0x86	; 134
     a14:	41 e0       	ldi	r20, 0x01	; 1
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
     a1c:	28 e9       	ldi	r18, 0x98	; 152
     a1e:	37 eb       	ldi	r19, 0xB7	; 183
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
     DisplayValue(ir_nano,-9,'A',2);	// output two digits of current with nA units
     a28:	b9 01       	movw	r22, r18
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	47 ef       	ldi	r20, 0xF7	; 247
     a30:	21 e4       	ldi	r18, 0x41	; 65
     a32:	02 e0       	ldi	r16, 0x02	; 2
     a34:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DisplayValue>
     /* RR680MI has units of 0.1 Ohm, u_res has units of mV, ir_micro has units of uA */
     ir_micro = (unsigned long)(u_res * 10000UL) / RR680MI;
     DisplayValue(ir_micro,-6,'A',2);	// output two digits of current in uA units
  }
#endif
  ADC_DDR = TXD_MSK;			// switch off
     a38:	88 e0       	ldi	r24, 0x08	; 8
     a3a:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;			// switch off
     a3c:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;				// switch off current
     a3e:	14 b8       	out	0x04, r1	; 4

  return ;
}
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	0f 91       	pop	r16
     a46:	08 95       	ret

00000a48 <main>:
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
  EMPTY_INTERRUPT(ADC_vect);
#endif

//begin of transistortester program
int main(void) {
     a48:	8f 92       	push	r8
     a4a:	9f 92       	push	r9
     a4c:	bf 92       	push	r11
     a4e:	cf 92       	push	r12
     a50:	df 92       	push	r13
     a52:	ef 92       	push	r14
     a54:	ff 92       	push	r15
     a56:	0f 93       	push	r16
     a58:	1f 93       	push	r17
     a5a:	df 93       	push	r29
     a5c:	cf 93       	push	r28
     a5e:	0f 92       	push	r0
     a60:	cd b7       	in	r28, 0x3d	; 61
     a62:	de b7       	in	r29, 0x3e	; 62
#ifdef SEARCH_PARASITIC
  unsigned long n_cval;		// capacitor value of NPN B-E diode, for deselecting the parasitic Transistor
  int8_t n_cpre;		// capacitor prefix of NPN B-E diode
#endif
  //switch on
  ON_DDR = (1<<ON_PIN);			// switch to output
     a64:	80 e4       	ldi	r24, 0x40	; 64
     a66:	8a b9       	out	0x0a, r24	; 10
#ifdef PULLUP_DISABLE
  ON_PORT = (1<<ON_PIN); 		// switch power on 
     a68:	8b b9       	out	0x0b, r24	; 11
#else
  ON_PORT = (1<<ON_PIN)|(1<<RST_PIN); 	// switch power on , enable internal Pullup for Start-Pin
#endif
  uint8_t tmp;
  //ADC-Init
  ADCSRA = (1<<ADEN) | AUTO_CLOCK_DIV;	//prescaler=8 or 64 (if 8Mhz clock)
     a6a:	86 e8       	ldi	r24, 0x86	; 134
     a6c:	80 93 7a 00 	sts	0x007A, r24
// #define WDRF_HOME MCU_STATUS_REG
 #define WDRF_HOME MCUCSR
#else
 #define WDRF_HOME MCUSR
#endif
  tmp = (WDRF_HOME & (1<<WDRF));	// save Watch Dog Flag
     a70:	14 b7       	in	r17, 0x34	; 52
  WDRF_HOME &= ~(1<<WDRF);	 	//reset Watch Dog flag
     a72:	84 b7       	in	r24, 0x34	; 52
     a74:	87 7f       	andi	r24, 0xF7	; 247
     a76:	84 bf       	out	0x34, r24	; 52
  wdt_disable();			// disable Watch Dog
     a78:	88 e1       	ldi	r24, 0x18	; 24
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
     a7e:	80 93 60 00 	sts	0x0060, r24
     a82:	10 92 60 00 	sts	0x0060, r1
     a86:	0f be       	out	0x3f, r0	; 63
#ifndef INHIBIT_SLEEP_MODE
  // switch off unused Parts
  PRR = (1<<PRTWI) | (1<<PRTIM0) | (1<<PRSPI) | (1<<PRUSART0);
     a88:	86 ea       	ldi	r24, 0xA6	; 166
     a8a:	80 93 64 00 	sts	0x0064, r24
  DIDR0 = (1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D);	
     a8e:	88 e3       	ldi	r24, 0x38	; 56
     a90:	80 93 7e 00 	sts	0x007E, r24
  TCCR2A = (0<<WGM21) | (0<<WGM20);		// Counter 2 normal mode
     a94:	10 92 b0 00 	sts	0x00B0, r1
 #if F_CPU == 4000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (0<<CS20);	//prescaler 256, 64us @ 2MHz
  #define T2_PERIOD 64
 #endif 
 #if F_CPU >= 8000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (1<<CS20);	//prescaler 1024, 128us @ 8MHz, 64us @ 16MHz
     a98:	87 e0       	ldi	r24, 0x07	; 7
     a9a:	80 93 b1 00 	sts	0x00B1, r24
  #define T2_PERIOD (1024 / (F_CPU / 1000000UL));	/* set to 128 or 64 us */
 #endif 
  sei();				// enable interrupts
     a9e:	78 94       	sei
#endif
  lcd_init();				//initialize LCD
     aa0:	0e 94 03 01 	call	0x206	; 0x206 <lcd_init>
	
//  ADC_PORT = TXD_VAL;
//  ADC_DDR = TXD_MSK;
  if(tmp) { 
     aa4:	13 ff       	sbrs	r17, 3
     aa6:	0a c0       	rjmp	.+20     	; 0xabc <main+0x74>
     // check if  Watchdog-Event 
     // this happens, if the Watchdog is not reset for 2s
     // can happen, if any loop in the Program doen't finish.
     lcd_line1();
     aa8:	80 e8       	ldi	r24, 0x80	; 128
     aaa:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     lcd_fix_string(TestTimedOut);	//Output Timeout
     aae:	83 eb       	ldi	r24, 0xB3	; 179
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     wait_about3s();				//wait for 3 s
     ab6:	88 e5       	ldi	r24, 0x58	; 88
     ab8:	92 e0       	ldi	r25, 0x02	; 2
     aba:	9a c0       	rjmp	.+308    	; 0xbf0 <main+0x1a8>
     ON_PORT = 0;			//shut off!
//     ON_DDR = (1<<ON_PIN);		//switch to GND
     return 0;
  }
  LCDLoadCustomChar(LCD_CHAR_DIODE1);	//Custom-Character Diode symbol
     abc:	88 e4       	ldi	r24, 0x48	; 72
     abe:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_customchar(DiodeIcon1);	//load Character  >|
     ac2:	8f e6       	ldi	r24, 0x6F	; 111
     ac4:	91 e0       	ldi	r25, 0x01	; 1
     ac6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_DIODE2);	//Custom-Character 
     aca:	80 e5       	ldi	r24, 0x50	; 80
     acc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_customchar(DiodeIcon2);	//load Character  |<
     ad0:	87 e7       	ldi	r24, 0x77	; 119
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_CAP);	//Custom-Character  Capacitor symbol
     ad8:	88 e5       	ldi	r24, 0x58	; 88
     ada:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_customchar(CapIcon);		//load Character  ||
     ade:	8f e7       	ldi	r24, 0x7F	; 127
     ae0:	91 e0       	ldi	r25, 0x01	; 1
     ae2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS1);	//Custom-Character Resistor symbol
     ae6:	88 e7       	ldi	r24, 0x78	; 120
     ae8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_customchar(ResIcon1);		//load Character  [
     aec:	87 e8       	ldi	r24, 0x87	; 135
     aee:	91 e0       	ldi	r25, 0x01	; 1
     af0:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS2);	//Custom-Character 
     af4:	80 e7       	ldi	r24, 0x70	; 112
     af6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_customchar(ResIcon2);		//load Character  ]
     afa:	8f e8       	ldi	r24, 0x8F	; 143
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
#endif
#ifdef PULLUP_DISABLE
 #ifdef __AVR_ATmega8__
  SFIOR = (1<<PUD);		// disable Pull-Up Resistors mega8
 #else
  MCUCR = (1<<PUD);		// disable Pull-Up Resistors mega168 family
     b02:	80 e1       	ldi	r24, 0x10	; 16
     b04:	85 bf       	out	0x35, r24	; 53
  lcd_line1();
#else
  lcd_clear();				// clear total display
#endif

  _trans = &ntrans;			// default transistor structure to show
     b06:	a2 e4       	ldi	r26, 0x42	; 66
     b08:	ca 2e       	mov	r12, r26
     b0a:	a1 e0       	ldi	r26, 0x01	; 1
     b0c:	da 2e       	mov	r13, r26
    goto end;
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    if((PartMode&P_CHANNEL) == P_CHANNEL) {
       lcd_data('P');			//P-channel
       _trans = &ptrans;
     b0e:	fa e5       	ldi	r31, 0x5A	; 90
     b10:	8f 2e       	mov	r8, r31
     b12:	f1 e0       	ldi	r31, 0x01	; 1
     b14:	9f 2e       	mov	r9, r31
#endif

//*****************************************************************
//Entry: if start key is pressed before shut down
start:
  PartFound = PART_NONE;	// no part found
     b16:	10 92 07 01 	sts	0x0107, r1
  NumOfDiodes = 0;		// Number of diodes = 0
     b1a:	10 92 05 01 	sts	0x0105, r1
  ptrans.count = 0;		// Number of found P type transistors
     b1e:	10 92 67 01 	sts	0x0167, r1
  ntrans.count = 0;		// Number of found N type transistors
     b22:	10 92 4f 01 	sts	0x014F, r1
  PartMode = PART_MODE_NONE;
     b26:	10 92 06 01 	sts	0x0106, r1
  WithReference = 0;		// no precision reference voltage
     b2a:	10 92 3f 01 	sts	0x013F, r1
  lcd_clear();			// clear the LCD
     b2e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  ADC_DDR = TXD_MSK;		//activate Software-UART 
     b32:	88 e0       	ldi	r24, 0x08	; 8
     b34:	87 b9       	out	0x07, r24	; 7
  ResistorsFound = 0;		// no resistors found
     b36:	10 92 68 01 	sts	0x0168, r1
  cap.ca = 0;
     b3a:	10 92 7a 01 	sts	0x017A, r1
  cap.cb = 0;
     b3e:	10 92 7b 01 	sts	0x017B, r1
#if FLASHEND > 0x1fff
  inductor_lpre = 0;		// mark as zero
     b42:	10 92 0b 01 	sts	0x010B, r1
#endif
#ifdef WITH_UART
  uart_newline();		// start of new measurement
     b46:	0e 94 df 00 	call	0x1be	; 0x1be <uart_newline>
#endif
  ADCconfig.RefFlag = 0;
     b4a:	10 92 32 01 	sts	0x0132, r1
  Calibrate_UR();		// get Ref Voltages and Pin resistance
     b4e:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <Calibrate_UR>
  lcd_line1();			// Cursor to 1. row, column 1
     b52:	80 e8       	ldi	r24, 0x80	; 128
     b54:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  
  ADCconfig.U_Bandgap = ADC_internal_reference;	// set internal reference voltage for ADC
     b58:	8e e9       	ldi	r24, 0x9E	; 158
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__eerd_byte_m168>
     b60:	99 27       	eor	r25, r25
     b62:	87 fd       	sbrc	r24, 7
     b64:	90 95       	com	r25
     b66:	20 91 39 01 	lds	r18, 0x0139
     b6a:	30 91 3a 01 	lds	r19, 0x013A
     b6e:	82 0f       	add	r24, r18
     b70:	93 1f       	adc	r25, r19
     b72:	90 93 34 01 	sts	0x0134, r25
     b76:	80 93 33 01 	sts	0x0133, r24

#ifdef BAT_CHECK
  // Battery check is selected
  ReadADC(TPBAT);	//Dummy-Readout
     b7a:	85 e0       	ldi	r24, 0x05	; 5
     b7c:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
  ptrans.uBE = W5msReadADC(TPBAT); 	//with 5V reference
     b80:	85 e0       	ldi	r24, 0x05	; 5
     b82:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
     b86:	90 93 5f 01 	sts	0x015F, r25
     b8a:	80 93 5e 01 	sts	0x015E, r24
  lcd_fix_string(Bat_str);		//output: "Bat. "
     b8e:	84 ee       	ldi	r24, 0xE4	; 228
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
//  DisplayValue(cap.cval,-2,'V',2);		// Display 2 Digits of this 10mV units
#if BAT_NUMERATOR <= (0xffff/U_VCC)
  cap.cval = (ptrans.uBE*BAT_NUMERATOR)/BAT_DENOMINATOR + BAT_OUT;
#else
 #if (BAT_NUMERATOR == 133) && (BAT_DENOMINATOR == 33)
  cap.cval = (ptrans.uBE*4)+BAT_OUT;		// usually output only 2 digits
     b96:	60 91 5e 01 	lds	r22, 0x015E
     b9a:	70 91 5f 01 	lds	r23, 0x015F
     b9e:	66 0f       	add	r22, r22
     ba0:	77 1f       	adc	r23, r23
     ba2:	66 0f       	add	r22, r22
     ba4:	77 1f       	adc	r23, r23
     ba6:	6a 56       	subi	r22, 0x6A	; 106
     ba8:	7f 4f       	sbci	r23, 0xFF	; 255
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	60 93 6a 01 	sts	0x016A, r22
     bb2:	70 93 6b 01 	sts	0x016B, r23
     bb6:	80 93 6c 01 	sts	0x016C, r24
     bba:	90 93 6d 01 	sts	0x016D, r25
 #else
  cap.cval = ((unsigned long)ptrans.uBE*BAT_NUMERATOR)/BAT_DENOMINATOR + BAT_OUT;
 #endif
#endif
  DisplayValue(cap.cval,-3,'V',2);		// Display 2 Digits of this 10mV units
     bbe:	4d ef       	ldi	r20, 0xFD	; 253
     bc0:	26 e5       	ldi	r18, 0x56	; 86
     bc2:	02 e0       	ldi	r16, 0x02	; 2
     bc4:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DisplayValue>
  lcd_space();
     bc8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>
  // less than 1.3 V only .1V difference to Warn-Level
  #define WARN_LEVEL (((unsigned long)(BAT_POOR+100)*(unsigned long)BAT_DENOMINATOR)/BAT_NUMERATOR)
 #endif
 #define POOR_LEVEL (((unsigned long)(BAT_POOR)*(unsigned long)BAT_DENOMINATOR)/BAT_NUMERATOR)
  // check the battery voltage
  if (ptrans.uBE <  WARN_LEVEL) {
     bcc:	80 91 5e 01 	lds	r24, 0x015E
     bd0:	90 91 5f 01 	lds	r25, 0x015F
     bd4:	26 e0       	ldi	r18, 0x06	; 6
     bd6:	8a 3f       	cpi	r24, 0xFA	; 250
     bd8:	92 07       	cpc	r25, r18
     bda:	88 f4       	brcc	.+34     	; 0xbfe <main+0x1b6>
     //Vcc < 7,3V; show Warning 
     if(ptrans.uBE < POOR_LEVEL) {	
     bdc:	e6 e0       	ldi	r30, 0x06	; 6
     bde:	83 33       	cpi	r24, 0x33	; 51
     be0:	9e 07       	cpc	r25, r30
     be2:	50 f4       	brcc	.+20     	; 0xbf8 <main+0x1b0>
        //Vcc <6,3V; no proper operation is possible
        lcd_fix_string(BatEmpty);	//Battery empty!
     be4:	8a e6       	ldi	r24, 0x6A	; 106
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        wait_about2s();
     bec:	80 e9       	ldi	r24, 0x90	; 144
     bee:	91 e0       	ldi	r25, 0x01	; 1
     bf0:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
        PORTD = 0;			//switch power off
     bf4:	1b b8       	out	0x0b, r1	; 11
        return 0;
     bf6:	5a c4       	rjmp	.+2228   	; 0x14ac <main+0xa64>
     }
     lcd_fix_string(BatWeak);		//Battery weak
     bf8:	85 e6       	ldi	r24, 0x65	; 101
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <main+0x1ba>
  } else { // Battery-voltage OK
     lcd_fix_string(OK_str); 		// "OK"
     bfe:	8a ee       	ldi	r24, 0xEA	; 234
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  }
#else
  lcd_fix2_string(VERSION_str);		// if no Battery check, Version .. in row 1
#endif
#ifdef WDT_enabled
  wdt_enable(WDTO_2S);		//Watchdog on
     c06:	2f e0       	ldi	r18, 0x0F	; 15
     c08:	88 e1       	ldi	r24, 0x18	; 24
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	f8 94       	cli
     c10:	a8 95       	wdr
     c12:	80 93 60 00 	sts	0x0060, r24
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	20 93 60 00 	sts	0x0060, r18
#endif

//  wait_about1s();			// add more time for reading batterie voltage
  // begin tests
#ifdef AUTO_RH
  RefVoltage();			//compute RHmultip = f(reference voltage)
     c1c:	0e 94 90 0c 	call	0x1920	; 0x1920 <RefVoltage>
#endif
#if FLASHEND > 0x1fff
  if (WithReference) {
     c20:	80 91 3f 01 	lds	r24, 0x013F
     c24:	88 23       	and	r24, r24
     c26:	b1 f0       	breq	.+44     	; 0xc54 <main+0x20c>
 #if POWER_OFF+0 > 1
     if ((mess_count == 0) && (empty_count == 0))
 #endif
     {
         /* display VCC= only first time */
         lcd_line2();
     c28:	80 ec       	ldi	r24, 0xC0	; 192
     c2a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
         lcd_fix_string(VCC_str);		// VCC=
     c2e:	89 e2       	ldi	r24, 0x29	; 41
     c30:	91 e0       	ldi	r25, 0x01	; 1
     c32:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
         DisplayValue(ADCconfig.U_AVCC,-3,'V',3);	// Display 3 Digits of this mV units
     c36:	60 91 35 01 	lds	r22, 0x0135
     c3a:	70 91 36 01 	lds	r23, 0x0136
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	4d ef       	ldi	r20, 0xFD	; 253
     c44:	26 e5       	ldi	r18, 0x56	; 86
     c46:	03 e0       	ldi	r16, 0x03	; 3
     c48:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DisplayValue>
         wait_about1s();
     c4c:	88 ec       	ldi	r24, 0xC8	; 200
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
     wait_about300ms();
  }
#endif

#ifndef DebugOut
  lcd_line2();			//LCD position row 2, column 1
     c54:	80 ec       	ldi	r24, 0xC0	; 192
     c56:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
#endif
  EntladePins();		// discharge all capacitors!
     c5a:	0e 94 0c 0b 	call	0x1618	; 0x1618 <EntladePins>
  if(PartFound == PART_CELL) {
     c5e:	80 91 07 01 	lds	r24, 0x0107
     c62:	88 30       	cpi	r24, 0x08	; 8
     c64:	39 f4       	brne	.+14     	; 0xc74 <main+0x22c>
    lcd_clear();
     c66:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
    lcd_fix_string(Cell_str);	// display "Cell!"
     c6a:	83 e2       	ldi	r24, 0x23	; 35
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     c72:	f3 c3       	rjmp	.+2022   	; 0x145a <main+0xa12>
#endif
    goto end;
  }

#ifdef CHECK_CALL
  AutoCheck();			//check, if selftest should be done
     c74:	0e 94 29 02 	call	0x452	; 0x452 <AutoCheck>
  lcd_line2();			//LCD position row2, column 1
     c78:	80 ec       	ldi	r24, 0xC0	; 192
     c7a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  UnCalibrated = 0;
     c7e:	10 92 3c 01 	sts	0x013C, r1
  if (eeprom_read_byte(&c_zero_tab[0]) != eeprom_read_byte(&c_zero_tab[3])) {
     c82:	81 ea       	ldi	r24, 0xA1	; 161
     c84:	91 e0       	ldi	r25, 0x01	; 1
     c86:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__eerd_byte_m168>
     c8a:	18 2f       	mov	r17, r24
     c8c:	84 ea       	ldi	r24, 0xA4	; 164
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__eerd_byte_m168>
     c94:	18 17       	cp	r17, r24
     c96:	31 f0       	breq	.+12     	; 0xca4 <main+0x25c>
     // if calibrated, both c_zero_tab values are identical! c_zero_tab[3] is not used otherwise
     UnCalibrated = 1;
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	80 93 3c 01 	sts	0x013C, r24
     lcd_data('!');
     c9e:	81 e2       	ldi	r24, 0x21	; 33
     ca0:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
  }
#else
  lcd_line2();			//LCD position row2, column 1
#endif
  lcd_fix_string(TestRunning);		//String: testing...
     ca4:	8a e5       	ldi	r24, 0x5A	; 90
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     
  // check all 6 combinations for the 3 pins 
//         High  Low  Tri
  CheckPins(TP1, TP2, TP3);
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	61 e0       	ldi	r22, 0x01	; 1
     cb0:	42 e0       	ldi	r20, 0x02	; 2
     cb2:	0e 94 ed 13 	call	0x27da	; 0x27da <CheckPins>
  CheckPins(TP2, TP1, TP3);
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	42 e0       	ldi	r20, 0x02	; 2
     cbc:	0e 94 ed 13 	call	0x27da	; 0x27da <CheckPins>

  CheckPins(TP1, TP3, TP2);
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	62 e0       	ldi	r22, 0x02	; 2
     cc4:	41 e0       	ldi	r20, 0x01	; 1
     cc6:	0e 94 ed 13 	call	0x27da	; 0x27da <CheckPins>
  CheckPins(TP3, TP1, TP2);
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	41 e0       	ldi	r20, 0x01	; 1
     cd0:	0e 94 ed 13 	call	0x27da	; 0x27da <CheckPins>

  CheckPins(TP2, TP3, TP1);
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	62 e0       	ldi	r22, 0x02	; 2
     cd8:	40 e0       	ldi	r20, 0x00	; 0
     cda:	0e 94 ed 13 	call	0x27da	; 0x27da <CheckPins>
  CheckPins(TP3, TP2, TP1);
     cde:	82 e0       	ldi	r24, 0x02	; 2
     ce0:	61 e0       	ldi	r22, 0x01	; 1
     ce2:	40 e0       	ldi	r20, 0x00	; 0
     ce4:	0e 94 ed 13 	call	0x27da	; 0x27da <CheckPins>

  if (ResistorsFound != 0) {
     ce8:	80 91 68 01 	lds	r24, 0x0168
     cec:	88 23       	and	r24, r24
     cee:	79 f0       	breq	.+30     	; 0xd0e <main+0x2c6>
     if (resis[ResistorsFound-1].checked  == 0) {
     cf0:	e8 2f       	mov	r30, r24
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	73 e0       	ldi	r23, 0x03	; 3
     cf6:	ee 0f       	add	r30, r30
     cf8:	ff 1f       	adc	r31, r31
     cfa:	7a 95       	dec	r23
     cfc:	e1 f7       	brne	.-8      	; 0xcf6 <main+0x2ae>
     cfe:	ef 5e       	subi	r30, 0xEF	; 239
     d00:	fe 4f       	sbci	r31, 0xFE	; 254
     d02:	97 81       	ldd	r25, Z+7	; 0x07
     d04:	99 23       	and	r25, r25
     d06:	19 f4       	brne	.+6      	; 0xd0e <main+0x2c6>
        ResistorsFound--;	// last resistor is not checked in both directions
     d08:	81 50       	subi	r24, 0x01	; 1
     d0a:	80 93 68 01 	sts	0x0168, r24
  }
  
  // Capacity measurement is only possible correctly with two Pins connected.
  // A third connected pin will increase the capacity value!
//  if(((PartFound == PART_NONE) || (PartFound == PART_RESISTOR) || (PartFound == PART_DIODE)) ) {
  if(PartFound == PART_NONE) {
     d0e:	80 91 07 01 	lds	r24, 0x0107
     d12:	88 23       	and	r24, r24
     d14:	e1 f4       	brne	.+56     	; 0xd4e <main+0x306>
     // If no part is found yet, check separate if is is a capacitor
#if FLASHEND > 0x1fff
     lcd_data('C');
     d16:	83 e4       	ldi	r24, 0x43	; 67
     d18:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
#endif
     EntladePins();		// discharge capacities
     d1c:	0e 94 0c 0b 	call	0x1618	; 0x1618 <EntladePins>
     //measurement of capacities in all 3 combinations
     cap.cval_max = 0;		// set max to zero
     d20:	10 92 6e 01 	sts	0x016E, r1
     d24:	10 92 6f 01 	sts	0x016F, r1
     d28:	10 92 70 01 	sts	0x0170, r1
     d2c:	10 92 71 01 	sts	0x0171, r1
     cap.cpre_max = -12;	// set max to pF unit
     d30:	84 ef       	ldi	r24, 0xF4	; 244
     d32:	80 93 7d 01 	sts	0x017D, r24
     ReadCapacity(TP3, TP1);
     d36:	82 e0       	ldi	r24, 0x02	; 2
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <ReadCapacity>
#if DebugOut != 10
     ReadCapacity(TP3, TP2);
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	61 e0       	ldi	r22, 0x01	; 1
     d42:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <ReadCapacity>
     ReadCapacity(TP2, TP1);
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <ReadCapacity>
  lcd_line2();
  lcd_line1();
  lcd_clear_line();
  lcd_line1();
#else
  lcd_clear();				// clear total display
     d4e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
#endif

  _trans = &ntrans;			// default transistor structure to show
     d52:	d0 92 41 01 	sts	0x0141, r13
     d56:	c0 92 40 01 	sts	0x0140, r12
  if (PartFound == PART_THYRISTOR) {
     d5a:	80 91 07 01 	lds	r24, 0x0107
     d5e:	85 30       	cpi	r24, 0x05	; 5
     d60:	19 f4       	brne	.+6      	; 0xd68 <main+0x320>
    lcd_fix_string(Thyristor);		//"Thyristor"
     d62:	85 e8       	ldi	r24, 0x85	; 133
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	04 c0       	rjmp	.+8      	; 0xd70 <main+0x328>
    goto gakAusgabe;
  }

  if (PartFound == PART_TRIAC) {
     d68:	86 30       	cpi	r24, 0x06	; 6
     d6a:	51 f4       	brne	.+20     	; 0xd80 <main+0x338>
    lcd_fix_string(Triac);		//"Triac"
     d6c:	8f e7       	ldi	r24, 0x7F	; 127
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  max_time = SHORT_WAIT_TIME;		// use allways the short wait time
  goto end2;


gakAusgabe:
  PinLayout(Cathode_char,'G','A'); 	// CGA= or 123=...
     d74:	83 e4       	ldi	r24, 0x43	; 67
     d76:	67 e4       	ldi	r22, 0x47	; 71
     d78:	41 e4       	ldi	r20, 0x41	; 65
     d7a:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <PinLayout>
     d7e:	6d c3       	rjmp	.+1754   	; 0x145a <main+0xa12>
  if (PartFound == PART_TRIAC) {
    lcd_fix_string(Triac);		//"Triac"
    goto gakAusgabe;
  }

  if (PartFound == PART_CAPACITOR) {
     d80:	87 30       	cpi	r24, 0x07	; 7
     d82:	09 f0       	breq	.+2      	; 0xd86 <main+0x33e>
     d84:	50 c0       	rjmp	.+160    	; 0xe26 <main+0x3de>
//     lcd_fix_string(Capacitor);
     lcd_testpin(cap.ca);		//Pin number 1
     d86:	80 91 7a 01 	lds	r24, 0x017A
     d8a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
     lcd_fix_string(CapZeich);		// capacitor sign
     d8e:	8f e1       	ldi	r24, 0x1F	; 31
     d90:	91 e0       	ldi	r25, 0x01	; 1
     d92:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_testpin(cap.cb);		//Pin number 2
     d96:	80 91 7b 01 	lds	r24, 0x017B
     d9a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
#if FLASHEND > 0x1fff
     GetVloss();			// get Voltage loss of capacitor
     d9e:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <GetVloss>
     if (cap.v_loss != 0) {
     da2:	80 91 78 01 	lds	r24, 0x0178
     da6:	90 91 79 01 	lds	r25, 0x0179
     daa:	00 97       	sbiw	r24, 0x00	; 0
     dac:	79 f0       	breq	.+30     	; 0xdcc <main+0x384>
        lcd_fix_string(VLOSS_str);	// "  Vloss="
     dae:	84 e3       	ldi	r24, 0x34	; 52
     db0:	91 e0       	ldi	r25, 0x01	; 1
     db2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        DisplayValue(cap.v_loss,-1,'%',2);
     db6:	60 91 78 01 	lds	r22, 0x0178
     dba:	70 91 79 01 	lds	r23, 0x0179
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	4f ef       	ldi	r20, 0xFF	; 255
     dc4:	25 e2       	ldi	r18, 0x25	; 37
     dc6:	02 e0       	ldi	r16, 0x02	; 2
     dc8:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DisplayValue>
     }
#endif
     lcd_line2(); 			//2. row 
     dcc:	80 ec       	ldi	r24, 0xC0	; 192
     dce:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     DisplayValue(cap.cval_max,cap.cpre_max,'F',4);
     dd2:	60 91 6e 01 	lds	r22, 0x016E
     dd6:	70 91 6f 01 	lds	r23, 0x016F
     dda:	80 91 70 01 	lds	r24, 0x0170
     dde:	90 91 71 01 	lds	r25, 0x0171
     de2:	40 91 7d 01 	lds	r20, 0x017D
     de6:	26 e4       	ldi	r18, 0x46	; 70
     de8:	04 e0       	ldi	r16, 0x04	; 4
     dea:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DisplayValue>
#if FLASHEND > 0x1fff
     cap.esr = GetESR(cap.cb, cap.ca);		// get ESR of capacitor
     dee:	80 91 7b 01 	lds	r24, 0x017B
     df2:	60 91 7a 01 	lds	r22, 0x017A
     df6:	0e 94 40 1b 	call	0x3680	; 0x3680 <GetESR>
     dfa:	90 93 77 01 	sts	0x0177, r25
     dfe:	80 93 76 01 	sts	0x0176, r24
     if ( cap.esr < 65530) {
     e02:	ff ef       	ldi	r31, 0xFF	; 255
     e04:	8a 3f       	cpi	r24, 0xFA	; 250
     e06:	9f 07       	cpc	r25, r31
     e08:	08 f0       	brcs	.+2      	; 0xe0c <main+0x3c4>
     e0a:	27 c3       	rjmp	.+1614   	; 0x145a <main+0xa12>
        lcd_fix_string(ESR_str);
     e0c:	8e e2       	ldi	r24, 0x2E	; 46
     e0e:	91 e0       	ldi	r25, 0x01	; 1
     e10:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        DisplayValue(cap.esr,-2,LCD_CHAR_OMEGA,2);
     e14:	60 91 76 01 	lds	r22, 0x0176
     e18:	70 91 77 01 	lds	r23, 0x0177
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	4e ef       	ldi	r20, 0xFE	; 254
     e22:	24 ef       	ldi	r18, 0xF4	; 244
     e24:	6c c2       	rjmp	.+1240   	; 0x12fe <main+0x8b6>
     }
#endif
     goto end;
  }

  if(PartFound == PART_DIODE) {
     e26:	82 30       	cpi	r24, 0x02	; 2
     e28:	09 f0       	breq	.+2      	; 0xe2c <main+0x3e4>
     e2a:	de c0       	rjmp	.+444    	; 0xfe8 <main+0x5a0>
     if(NumOfDiodes == 1) {		//single Diode
     e2c:	80 91 05 01 	lds	r24, 0x0105
     e30:	81 30       	cpi	r24, 0x01	; 1
     e32:	e1 f5       	brne	.+120    	; 0xeac <main+0x464>
           lcd_fix_string(KatAn);	//"-|<-"
           lcd_testpin(diodes.Anode[0]);
        }
 #else
        // the higher test pin number is right side
        if (diodes.Anode[0] < diodes.Cathode[0]) {
     e34:	90 91 80 01 	lds	r25, 0x0180
     e38:	80 91 86 01 	lds	r24, 0x0186
     e3c:	98 17       	cp	r25, r24
     e3e:	50 f4       	brcc	.+20     	; 0xe54 <main+0x40c>
           lcd_testpin(diodes.Anode[0]);
     e40:	89 2f       	mov	r24, r25
     e42:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
     e46:	85 e4       	ldi	r24, 0x45	; 69
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes.Cathode[0]);
     e4e:	80 91 86 01 	lds	r24, 0x0186
     e52:	08 c0       	rjmp	.+16     	; 0xe64 <main+0x41c>
        } else {
           lcd_testpin(diodes.Cathode[0]);
     e54:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
     e58:	89 e4       	ldi	r24, 0x49	; 73
     e5a:	91 e0       	ldi	r25, 0x01	; 1
     e5c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes.Anode[0]);
     e60:	80 91 80 01 	lds	r24, 0x0180
     e64:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
        lcd_testpin(diodes.Anode[0]);
        lcd_fix_string(AnKat);		//"->|-"
        lcd_testpin(diodes.Cathode[0]);
#endif
#if FLASHEND > 0x1fff
	GetIr(diodes.Cathode[0],diodes.Anode[0]);
     e68:	80 91 86 01 	lds	r24, 0x0186
     e6c:	60 91 80 01 	lds	r22, 0x0180
     e70:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <GetIr>
#endif
        UfAusgabe(0x70);
     e74:	80 e7       	ldi	r24, 0x70	; 112
     e76:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <UfAusgabe>
        /* load current of capacity is (5V-1.1V)/(470000 Ohm) = 8298nA */
        lcd_fix_string(GateCap_str);	//"C="
     e7a:	8d ef       	ldi	r24, 0xFD	; 253
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        ReadCapacity(diodes.Cathode[0],diodes.Anode[0]);	// Capacity opposite flow direction
     e82:	80 91 86 01 	lds	r24, 0x0186
     e86:	60 91 80 01 	lds	r22, 0x0180
     e8a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <ReadCapacity>
        DisplayValue(cap.cval,cap.cpre,'F',3);
     e8e:	60 91 6a 01 	lds	r22, 0x016A
     e92:	70 91 6b 01 	lds	r23, 0x016B
     e96:	80 91 6c 01 	lds	r24, 0x016C
     e9a:	90 91 6d 01 	lds	r25, 0x016D
     e9e:	40 91 7c 01 	lds	r20, 0x017C
     ea2:	26 e4       	ldi	r18, 0x46	; 70
     ea4:	03 e0       	ldi	r16, 0x03	; 3
     ea6:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DisplayValue>
        goto end3;
     eaa:	e8 c2       	rjmp	.+1488   	; 0x147c <main+0xa34>
     } else if(NumOfDiodes == 2) { // double diode
     eac:	82 30       	cpi	r24, 0x02	; 2
     eae:	09 f0       	breq	.+2      	; 0xeb2 <main+0x46a>
     eb0:	47 c0       	rjmp	.+142    	; 0xf40 <main+0x4f8>
        lcd_data('2');
     eb2:	82 e3       	ldi	r24, 0x32	; 50
     eb4:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
        lcd_fix_string(Dioden);		//"diodes "
     eb8:	8d e4       	ldi	r24, 0x4D	; 77
     eba:	91 e0       	ldi	r25, 0x01	; 1
     ebc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        if(diodes.Anode[0] == diodes.Anode[1]) { //Common Anode
     ec0:	80 91 80 01 	lds	r24, 0x0180
     ec4:	20 91 81 01 	lds	r18, 0x0181
     ec8:	82 17       	cp	r24, r18
     eca:	99 f4       	brne	.+38     	; 0xef2 <main+0x4aa>
           lcd_testpin(diodes.Cathode[0]);
     ecc:	80 91 86 01 	lds	r24, 0x0186
     ed0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
     ed4:	89 e4       	ldi	r24, 0x49	; 73
     ed6:	91 e0       	ldi	r25, 0x01	; 1
     ed8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes.Anode[0]);
     edc:	80 91 80 01 	lds	r24, 0x0180
     ee0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
     ee4:	85 e4       	ldi	r24, 0x45	; 69
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes.Cathode[1]);
     eec:	80 91 87 01 	lds	r24, 0x0187
     ef0:	16 c0       	rjmp	.+44     	; 0xf1e <main+0x4d6>
           UfAusgabe(0x01);
           goto end3;
        } 
        if(diodes.Cathode[0] == diodes.Cathode[1]) { //Common Cathode
     ef2:	30 91 86 01 	lds	r19, 0x0186
     ef6:	90 91 87 01 	lds	r25, 0x0187
     efa:	39 17       	cp	r19, r25
     efc:	b1 f4       	brne	.+44     	; 0xf2a <main+0x4e2>
           lcd_testpin(diodes.Anode[0]);
     efe:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
     f02:	85 e4       	ldi	r24, 0x45	; 69
     f04:	91 e0       	ldi	r25, 0x01	; 1
     f06:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
	   lcd_testpin(diodes.Cathode[0]);
     f0a:	80 91 86 01 	lds	r24, 0x0186
     f0e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
     f12:	89 e4       	ldi	r24, 0x49	; 73
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes.Anode[1]);
     f1a:	80 91 81 01 	lds	r24, 0x0181
     f1e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           UfAusgabe(0x01);
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <UfAusgabe>
           goto end3;
     f28:	a9 c2       	rjmp	.+1362   	; 0x147c <main+0xa34>
//        else if ((diodes.Cathode[0] == diodes.Anode[1]) && (diodes.Cathode[1] == diodes.Anode[0])) 
        } 
        if (diodes.Cathode[0] == diodes.Anode[1]) {
     f2a:	32 17       	cp	r19, r18
     f2c:	11 f4       	brne	.+4      	; 0xf32 <main+0x4ea>
           // normaly two serial diodes are detected as three diodes, but if the threshold is high
           // for both diodes, the third diode is not detected.
           // can also be Antiparallel
           diode_sequence = 0x01;	// 0 1
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	04 c0       	rjmp	.+8      	; 0xf3a <main+0x4f2>
           SerienDiodenAusgabe();
           goto end3;
        } 
        if (diodes.Cathode[1] == diodes.Anode[0]) {
     f32:	98 17       	cp	r25, r24
     f34:	09 f0       	breq	.+2      	; 0xf38 <main+0x4f0>
     f36:	41 c0       	rjmp	.+130    	; 0xfba <main+0x572>
           diode_sequence = 0x10;	// 1 0
     f38:	80 e1       	ldi	r24, 0x10	; 16
     f3a:	80 93 02 01 	sts	0x0102, r24
     f3e:	3a c0       	rjmp	.+116    	; 0xfb4 <main+0x56c>
           SerienDiodenAusgabe();
           goto end3;
        }
     } else if(NumOfDiodes == 3) {
     f40:	83 30       	cpi	r24, 0x03	; 3
     f42:	d9 f5       	brne	.+118    	; 0xfba <main+0x572>
        //Serial of 2 Diodes; was detected as 3 Diodes 
        diode_sequence = 0x33;	// 3 3
     f44:	83 e3       	ldi	r24, 0x33	; 51
     f46:	80 93 02 01 	sts	0x0102, r24
        /* Check for any constallation of 2 serial diodes:
          Only once the pin No of anyone Cathode is identical of another anode.
          two diodes in series is additionally detected as third big diode.
        */
        if(diodes.Cathode[0] == diodes.Anode[1])
     f4a:	80 91 86 01 	lds	r24, 0x0186
     f4e:	90 91 81 01 	lds	r25, 0x0181
     f52:	89 17       	cp	r24, r25
     f54:	19 f4       	brne	.+6      	; 0xf5c <main+0x514>
          {
           diode_sequence = 0x01;	// 0 1
     f56:	21 e0       	ldi	r18, 0x01	; 1
     f58:	20 93 02 01 	sts	0x0102, r18
          }
        if(diodes.Anode[0] == diodes.Cathode[1])
     f5c:	40 91 80 01 	lds	r20, 0x0180
     f60:	30 91 87 01 	lds	r19, 0x0187
     f64:	43 17       	cp	r20, r19
     f66:	19 f4       	brne	.+6      	; 0xf6e <main+0x526>
          {
           diode_sequence = 0x10;	// 1 0
     f68:	20 e1       	ldi	r18, 0x10	; 16
     f6a:	20 93 02 01 	sts	0x0102, r18
          }
        if(diodes.Cathode[0] == diodes.Anode[2])
     f6e:	20 91 82 01 	lds	r18, 0x0182
     f72:	82 17       	cp	r24, r18
     f74:	19 f4       	brne	.+6      	; 0xf7c <main+0x534>
          {
           diode_sequence = 0x02;	// 0 2
     f76:	82 e0       	ldi	r24, 0x02	; 2
     f78:	80 93 02 01 	sts	0x0102, r24
          }
        if(diodes.Anode[0] == diodes.Cathode[2])
     f7c:	80 91 88 01 	lds	r24, 0x0188
     f80:	48 17       	cp	r20, r24
     f82:	19 f4       	brne	.+6      	; 0xf8a <main+0x542>
          {
           diode_sequence = 0x20;	// 2 0
     f84:	40 e2       	ldi	r20, 0x20	; 32
     f86:	40 93 02 01 	sts	0x0102, r20
          }
        if(diodes.Cathode[1] == diodes.Anode[2])
     f8a:	32 17       	cp	r19, r18
     f8c:	19 f4       	brne	.+6      	; 0xf94 <main+0x54c>
          {
           diode_sequence = 0x12;	// 1 2
     f8e:	22 e1       	ldi	r18, 0x12	; 18
     f90:	20 93 02 01 	sts	0x0102, r18
          }
        if(diodes.Anode[1] == diodes.Cathode[2])
     f94:	98 17       	cp	r25, r24
     f96:	19 f4       	brne	.+6      	; 0xf9e <main+0x556>
          {
           diode_sequence = 0x21;	// 2 1
     f98:	81 e2       	ldi	r24, 0x21	; 33
     f9a:	80 93 02 01 	sts	0x0102, r24
        lcd_space();
        lcd_string(utoa(diodes.Voltage[2], outval, 10));
        lcd_line1();
#endif
//        if((ptrans.b<3) && (ptrans.c<3)) 
        if(diode_sequence < 0x22) {
     f9e:	80 91 02 01 	lds	r24, 0x0102
     fa2:	82 32       	cpi	r24, 0x22	; 34
     fa4:	50 f4       	brcc	.+20     	; 0xfba <main+0x572>
           lcd_data('3');
     fa6:	83 e3       	ldi	r24, 0x33	; 51
     fa8:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
           lcd_fix_string(Dioden);	//"Diodes "
     fac:	8d e4       	ldi	r24, 0x4D	; 77
     fae:	91 e0       	ldi	r25, 0x01	; 1
     fb0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           SerienDiodenAusgabe();
     fb4:	0e 94 96 0a 	call	0x152c	; 0x152c <SerienDiodenAusgabe>
           goto end3;
     fb8:	61 c2       	rjmp	.+1218   	; 0x147c <main+0xa34>
        }
     }  // end (NumOfDiodes == 3)
     lcd_fix_string(Bauteil);		//"Bauteil"
     fba:	8a e7       	ldi	r24, 0x7A	; 122
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_fix_string(Unknown); 		//" unbek."
     fc2:	8e e8       	ldi	r24, 0x8E	; 142
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_line2(); //2. row 
     fca:	80 ec       	ldi	r24, 0xC0	; 192
     fcc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     lcd_fix_string(OrBroken); 		//"oder defekt "
     fd0:	87 ea       	ldi	r24, 0xA7	; 167
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_data(NumOfDiodes + '0');
     fd8:	80 91 05 01 	lds	r24, 0x0105
     fdc:	80 5d       	subi	r24, 0xD0	; 208
     fde:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
     lcd_fix_string(AnKat);		//"->|-"
     fe2:	85 e4       	ldi	r24, 0x45	; 69
     fe4:	91 e0       	ldi	r25, 0x01	; 1
     fe6:	34 c2       	rjmp	.+1128   	; 0x1450 <main+0xa08>
     goto not_known;
     // end (PartFound == PART_DIODE)
  } else if (PartFound == PART_TRANSISTOR) {
     fe8:	83 30       	cpi	r24, 0x03	; 3
     fea:	09 f0       	breq	.+2      	; 0xfee <main+0x5a6>
     fec:	c7 c0       	rjmp	.+398    	; 0x117c <main+0x734>
#ifdef SEARCH_PARASITIC
    if ((ptrans.count != 0) && (ntrans.count !=0)) {
     fee:	80 91 67 01 	lds	r24, 0x0167
     ff2:	88 23       	and	r24, r24
     ff4:	99 f1       	breq	.+102    	; 0x105c <main+0x614>
     ff6:	80 91 4f 01 	lds	r24, 0x014F
     ffa:	88 23       	and	r24, r24
     ffc:	79 f1       	breq	.+94     	; 0x105c <main+0x614>
       // Special Handling of NPNp and PNPn Transistor.
       // If a protection diode is built on the same structur as the NPN-Transistor,
       // a parasitic PNP-Transistor will be detected. 
       ReadCapacity(ntrans.e, ntrans.b);	// read capacity of NPN base-emitter
     ffe:	80 91 4e 01 	lds	r24, 0x014E
    1002:	60 91 4c 01 	lds	r22, 0x014C
    1006:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <ReadCapacity>
       n_cval = cap.cval;			// save the found capacity value
    100a:	e0 90 6a 01 	lds	r14, 0x016A
    100e:	f0 90 6b 01 	lds	r15, 0x016B
    1012:	00 91 6c 01 	lds	r16, 0x016C
    1016:	10 91 6d 01 	lds	r17, 0x016D
       n_cpre  = cap.cpre;			// and dimension
    101a:	b0 90 7c 01 	lds	r11, 0x017C
       ReadCapacity(ptrans.b, ptrans.e);	// read capacity of PNP base-emitter
    101e:	80 91 64 01 	lds	r24, 0x0164
    1022:	60 91 66 01 	lds	r22, 0x0166
    1026:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <ReadCapacity>
       if (((n_cpre == cap.cpre) && (cap.cval > n_cval)) || (cap.cpre > n_cpre)){
    102a:	80 91 7c 01 	lds	r24, 0x017C
    102e:	b8 16       	cp	r11, r24
    1030:	71 f4       	brne	.+28     	; 0x104e <main+0x606>
    1032:	80 91 6a 01 	lds	r24, 0x016A
    1036:	90 91 6b 01 	lds	r25, 0x016B
    103a:	a0 91 6c 01 	lds	r26, 0x016C
    103e:	b0 91 6d 01 	lds	r27, 0x016D
    1042:	e8 16       	cp	r14, r24
    1044:	f9 06       	cpc	r15, r25
    1046:	0a 07       	cpc	r16, r26
    1048:	1b 07       	cpc	r17, r27
    104a:	18 f0       	brcs	.+6      	; 0x1052 <main+0x60a>
    104c:	04 c0       	rjmp	.+8      	; 0x1056 <main+0x60e>
    104e:	b8 16       	cp	r11, r24
    1050:	14 f4       	brge	.+4      	; 0x1056 <main+0x60e>
          // the capacity value or dimension of the PNP B-E is greater than the NPN B-E
          PartMode = PART_MODE_PNP;
    1052:	8d e0       	ldi	r24, 0x0D	; 13
    1054:	01 c0       	rjmp	.+2      	; 0x1058 <main+0x610>
       } else {
          PartMode = PART_MODE_NPN;
    1056:	8c e0       	ldi	r24, 0x0C	; 12
    1058:	80 93 06 01 	sts	0x0106, r24
       }
    }
#endif
#if FLASHEND > 0x1fff
    if ((ptrans.count != 0) && (ntrans.count !=0) && (!(ON_PIN_REG & (1<<RST_PIN)))) {
    105c:	80 91 67 01 	lds	r24, 0x0167
    1060:	88 23       	and	r24, r24
    1062:	79 f0       	breq	.+30     	; 0x1082 <main+0x63a>
    1064:	80 91 4f 01 	lds	r24, 0x014F
    1068:	88 23       	and	r24, r24
    106a:	59 f0       	breq	.+22     	; 0x1082 <main+0x63a>
    106c:	4f 99       	sbic	0x09, 7	; 9
    106e:	09 c0       	rjmp	.+18     	; 0x1082 <main+0x63a>
       // if the Start key is still pressed, use the other Transistor
       if (PartMode == PART_MODE_NPN) {
    1070:	80 91 06 01 	lds	r24, 0x0106
    1074:	8c 30       	cpi	r24, 0x0C	; 12
    1076:	11 f4       	brne	.+4      	; 0x107c <main+0x634>
          PartMode = PART_MODE_PNP;	// switch to parasitic transistor
    1078:	8d e0       	ldi	r24, 0x0D	; 13
    107a:	01 c0       	rjmp	.+2      	; 0x107e <main+0x636>
       } else {
          PartMode = PART_MODE_NPN;	// switch to parasitic transistor
    107c:	8c e0       	ldi	r24, 0x0C	; 12
    107e:	80 93 06 01 	sts	0x0106, r24
       }
    }
#endif

    if(PartMode == PART_MODE_NPN) {
    1082:	80 91 06 01 	lds	r24, 0x0106
    1086:	8c 30       	cpi	r24, 0x0C	; 12
    1088:	61 f4       	brne	.+24     	; 0x10a2 <main+0x65a>
       lcd_fix_string(NPN_str);		//"NPN "
    108a:	83 e0       	ldi	r24, 0x03	; 3
    108c:	91 e0       	ldi	r25, 0x01	; 1
    108e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
#if FLASHEND > 0x1fff
       if (ptrans.count != 0) {
    1092:	80 91 67 01 	lds	r24, 0x0167
    1096:	88 23       	and	r24, r24
    1098:	99 f0       	breq	.+38     	; 0x10c0 <main+0x678>
          lcd_data('p');		// mark for parasitic PNp
    109a:	80 e7       	ldi	r24, 0x70	; 112
    109c:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
    10a0:	0f c0       	rjmp	.+30     	; 0x10c0 <main+0x678>
       }
#endif
//       _trans = &ntrans;  is allready selected a default
    } else {
       lcd_fix_string(PNP_str);		//"PNP "
    10a2:	87 e0       	ldi	r24, 0x07	; 7
    10a4:	91 e0       	ldi	r25, 0x01	; 1
    10a6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
#if FLASHEND > 0x1fff
       if (ntrans.count != 0) {
    10aa:	80 91 4f 01 	lds	r24, 0x014F
    10ae:	88 23       	and	r24, r24
    10b0:	19 f0       	breq	.+6      	; 0x10b8 <main+0x670>
          lcd_data('n');		// mark for parasitic NPn
    10b2:	8e e6       	ldi	r24, 0x6E	; 110
    10b4:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       }
#endif
       _trans = &ptrans;		// change transistor structure
    10b8:	90 92 41 01 	sts	0x0141, r9
    10bc:	80 92 40 01 	sts	0x0140, r8
    }
    lcd_space();
    10c0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>
//    if( NumOfDiodes > 2) 	//Transistor with protection diode
    for (ii=0; ii<NumOfDiodes; ii++) {
    10c4:	10 e0       	ldi	r17, 0x00	; 0
    10c6:	2a c0       	rjmp	.+84     	; 0x111c <main+0x6d4>
       if ((diodes.Anode[ii] == _trans->b) || (diodes.Cathode[ii] == _trans->b)) continue;
    10c8:	e1 2f       	mov	r30, r17
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	a0 91 40 01 	lds	r26, 0x0140
    10d0:	b0 91 41 01 	lds	r27, 0x0141
    10d4:	1a 96       	adiw	r26, 0x0a	; 10
    10d6:	8c 91       	ld	r24, X
    10d8:	1a 97       	sbiw	r26, 0x0a	; 10
    10da:	e0 58       	subi	r30, 0x80	; 128
    10dc:	fe 4f       	sbci	r31, 0xFE	; 254
    10de:	90 81       	ld	r25, Z
    10e0:	98 17       	cp	r25, r24
    10e2:	d9 f0       	breq	.+54     	; 0x111a <main+0x6d2>
    10e4:	96 81       	ldd	r25, Z+6	; 0x06
    10e6:	98 17       	cp	r25, r24
    10e8:	c1 f0       	breq	.+48     	; 0x111a <main+0x6d2>
       // Layout with EBC= style
       if(PartMode == PART_MODE_NPN)
 #endif
#else
       // Layout with 123= style
       if (((PartMode == PART_MODE_NPN) && (ntrans.c > ntrans.e)) || ((PartMode != PART_MODE_NPN) && (ptrans.c < ptrans.e)))
    10ea:	80 91 06 01 	lds	r24, 0x0106
    10ee:	8c 30       	cpi	r24, 0x0C	; 12
    10f0:	39 f4       	brne	.+14     	; 0x1100 <main+0x6b8>
    10f2:	90 91 4d 01 	lds	r25, 0x014D
    10f6:	80 91 4e 01 	lds	r24, 0x014E
    10fa:	89 17       	cp	r24, r25
    10fc:	38 f0       	brcs	.+14     	; 0x110c <main+0x6c4>
    10fe:	09 c0       	rjmp	.+18     	; 0x1112 <main+0x6ca>
    1100:	90 91 65 01 	lds	r25, 0x0165
    1104:	80 91 66 01 	lds	r24, 0x0166
    1108:	98 17       	cp	r25, r24
    110a:	18 f4       	brcc	.+6      	; 0x1112 <main+0x6ca>
#endif
       {
          lcd_fix_string(AnKat);	//"->|-"
    110c:	85 e4       	ldi	r24, 0x45	; 69
    110e:	91 e0       	ldi	r25, 0x01	; 1
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <main+0x6ce>
       } else {
          lcd_fix_string(KatAn);	//"-|<-"
    1112:	89 e4       	ldi	r24, 0x49	; 73
    1114:	91 e0       	ldi	r25, 0x01	; 1
    1116:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
#endif
       _trans = &ptrans;		// change transistor structure
    }
    lcd_space();
//    if( NumOfDiodes > 2) 	//Transistor with protection diode
    for (ii=0; ii<NumOfDiodes; ii++) {
    111a:	1f 5f       	subi	r17, 0xFF	; 255
    111c:	80 91 05 01 	lds	r24, 0x0105
    1120:	18 17       	cp	r17, r24
    1122:	90 f2       	brcs	.-92     	; 0x10c8 <main+0x680>
          lcd_fix_string(AnKat);	//"->|-"
       } else {
          lcd_fix_string(KatAn);	//"-|<-"
       }
    }
    PinLayout('E','B','C'); 		//  EBC= or 123=...
    1124:	85 e4       	ldi	r24, 0x45	; 69
    1126:	62 e4       	ldi	r22, 0x42	; 66
    1128:	43 e4       	ldi	r20, 0x43	; 67
    112a:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <PinLayout>
    lcd_line2(); //2. row 
    112e:	80 ec       	ldi	r24, 0xC0	; 192
    1130:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
       lcd_fix2_string(ICEs_str);		// "ICEs="
       DisplayValue(_trans->ices,-5,'A',3);
       wait_for_key_5s_line2();		// wait 5s and clear line 2
    }
#endif
    lcd_fix_string(hfe_str);		//"B="  (hFE)
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    DisplayValue(_trans->hfe,0,0,3);
    113c:	e0 91 40 01 	lds	r30, 0x0140
    1140:	f0 91 41 01 	lds	r31, 0x0141
    1144:	60 81       	ld	r22, Z
    1146:	71 81       	ldd	r23, Z+1	; 0x01
    1148:	82 81       	ldd	r24, Z+2	; 0x02
    114a:	93 81       	ldd	r25, Z+3	; 0x03
    114c:	40 e0       	ldi	r20, 0x00	; 0
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	03 e0       	ldi	r16, 0x03	; 3
    1152:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DisplayValue>
    lcd_space();
    1156:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>

    lcd_fix_string(Uf_str);		//"Uf="
    115a:	81 e1       	ldi	r24, 0x11	; 17
    115c:	91 e0       	ldi	r25, 0x01	; 1
    115e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    DisplayValue(_trans->uBE,-3,'V',3);
    1162:	e0 91 40 01 	lds	r30, 0x0140
    1166:	f0 91 41 01 	lds	r31, 0x0141
    116a:	64 81       	ldd	r22, Z+4	; 0x04
    116c:	75 81       	ldd	r23, Z+5	; 0x05
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	4d ef       	ldi	r20, 0xFD	; 253
    1174:	26 e5       	ldi	r18, 0x56	; 86
    1176:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DisplayValue>
    117a:	6f c1       	rjmp	.+734    	; 0x145a <main+0xa12>
    goto end;
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    117c:	84 30       	cpi	r24, 0x04	; 4
    117e:	09 f0       	breq	.+2      	; 0x1182 <main+0x73a>
    1180:	c0 c0       	rjmp	.+384    	; 0x1302 <main+0x8ba>
    if((PartMode&P_CHANNEL) == P_CHANNEL) {
    1182:	80 91 06 01 	lds	r24, 0x0106
    1186:	84 ff       	sbrs	r24, 4
    1188:	08 c0       	rjmp	.+16     	; 0x119a <main+0x752>
       lcd_data('P');			//P-channel
    118a:	80 e5       	ldi	r24, 0x50	; 80
    118c:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       _trans = &ptrans;
    1190:	90 92 41 01 	sts	0x0141, r9
    1194:	80 92 40 01 	sts	0x0140, r8
    1198:	03 c0       	rjmp	.+6      	; 0x11a0 <main+0x758>
    } else {
       lcd_data('N');			//N-channel
    119a:	8e e4       	ldi	r24, 0x4E	; 78
    119c:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
//       _trans = &ntrans;	is allready selected as default
    }
    lcd_data('-');
    11a0:	8d e2       	ldi	r24, 0x2D	; 45
    11a2:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>

    tmp = PartMode&0x0f;
    11a6:	80 91 06 01 	lds	r24, 0x0106
    11aa:	18 2f       	mov	r17, r24
    11ac:	1f 70       	andi	r17, 0x0F	; 15
    if (tmp == PART_MODE_JFET) {
    11ae:	14 30       	cpi	r17, 0x04	; 4
    11b0:	19 f4       	brne	.+6      	; 0x11b8 <main+0x770>
       lcd_fix_string(jfet_str);	//"JFET"
    11b2:	82 ef       	ldi	r24, 0xF2	; 242
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	13 c0       	rjmp	.+38     	; 0x11de <main+0x796>
    } else {
       if ((PartMode&D_MODE) == D_MODE) {
    11b8:	85 ff       	sbrs	r24, 5
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <main+0x778>
          lcd_data('D');			// N-D or P-D
    11bc:	84 e4       	ldi	r24, 0x44	; 68
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <main+0x77a>
       } else {
          lcd_data('E');			// N-E or P-E
    11c0:	85 e4       	ldi	r24, 0x45	; 69
    11c2:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       }
       if (tmp == (PART_MODE_IGBT)) {
    11c6:	13 30       	cpi	r17, 0x03	; 3
    11c8:	41 f4       	brne	.+16     	; 0x11da <main+0x792>
          lcd_fix_string(igbt_str);	//"-IGBT"
    11ca:	87 ef       	ldi	r24, 0xF7	; 247
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       } else {
          lcd_fix_string(mosfet_str);	//"-MOS "
       }
    }
    if (tmp == PART_MODE_IGBT) {
       PinLayout('E','G','C'); 		//  SGD= or 123=...
    11d2:	85 e4       	ldi	r24, 0x45	; 69
    11d4:	67 e4       	ldi	r22, 0x47	; 71
    11d6:	43 e4       	ldi	r20, 0x43	; 67
    11d8:	07 c0       	rjmp	.+14     	; 0x11e8 <main+0x7a0>
          lcd_data('E');			// N-E or P-E
       }
       if (tmp == (PART_MODE_IGBT)) {
          lcd_fix_string(igbt_str);	//"-IGBT"
       } else {
          lcd_fix_string(mosfet_str);	//"-MOS "
    11da:	8d ee       	ldi	r24, 0xED	; 237
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       }
    }
    if (tmp == PART_MODE_IGBT) {
       PinLayout('E','G','C'); 		//  SGD= or 123=...
    } else {
       PinLayout('S','G','D'); 		//  SGD= or 123=...
    11e2:	83 e5       	ldi	r24, 0x53	; 83
    11e4:	67 e4       	ldi	r22, 0x47	; 71
    11e6:	44 e4       	ldi	r20, 0x44	; 68
    11e8:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <PinLayout>
    }
//    if((NumOfDiodes == 1) && ((PartMode&D_MODE) != D_MODE)) 
    if(NumOfDiodes == 1) {
    11ec:	80 91 05 01 	lds	r24, 0x0105
    11f0:	81 30       	cpi	r24, 0x01	; 1
    11f2:	09 f0       	breq	.+2      	; 0x11f6 <main+0x7ae>
    11f4:	3f c0       	rjmp	.+126    	; 0x1274 <main+0x82c>
       // Layout with SGD= style
       if (PartMode&P_CHANNEL) /* N or P MOS */
 #endif
#else
       // layout with 123= style
       if (((PartMode&P_CHANNEL) && (ptrans.c < ptrans.e)) || ((!(PartMode&P_CHANNEL)) && (ntrans.c > ntrans.e)))
    11f6:	80 91 06 01 	lds	r24, 0x0106
    11fa:	84 ff       	sbrs	r24, 4
    11fc:	07 c0       	rjmp	.+14     	; 0x120c <main+0x7c4>
    11fe:	90 91 65 01 	lds	r25, 0x0165
    1202:	80 91 66 01 	lds	r24, 0x0166
    1206:	98 17       	cp	r25, r24
    1208:	38 f0       	brcs	.+14     	; 0x1218 <main+0x7d0>
    120a:	17 c0       	rjmp	.+46     	; 0x123a <main+0x7f2>
    120c:	90 91 4d 01 	lds	r25, 0x014D
    1210:	80 91 4e 01 	lds	r24, 0x014E
    1214:	89 17       	cp	r24, r25
    1216:	88 f4       	brcc	.+34     	; 0x123a <main+0x7f2>
#endif
#if FLASHEND > 0x1fff
       // there is enough space for long form of showing protection diode
       {
          lcd_data(LCD_CHAR_DIODE1);	//show Diode symbol >|
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
          lcd_line2();			//2. Row
    121e:	80 ec       	ldi	r24, 0xC0	; 192
    1220:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
          lcd_testpin(diodes.Anode[0]);
    1224:	80 91 80 01 	lds	r24, 0x0180
    1228:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
          lcd_fix_string(AnKat);	//"->|-"
    122c:	85 e4       	ldi	r24, 0x45	; 69
    122e:	91 e0       	ldi	r25, 0x01	; 1
    1230:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
          lcd_testpin(diodes.Cathode[0]);
    1234:	80 91 86 01 	lds	r24, 0x0186
    1238:	10 c0       	rjmp	.+32     	; 0x125a <main+0x812>
       } else {
          lcd_data(LCD_CHAR_DIODE2);	//show Diode symbol |<
    123a:	82 e0       	ldi	r24, 0x02	; 2
    123c:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
          lcd_line2();			//2. Row
    1240:	80 ec       	ldi	r24, 0xC0	; 192
    1242:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
          lcd_testpin(diodes.Cathode[0]);
    1246:	80 91 86 01 	lds	r24, 0x0186
    124a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
          lcd_fix_string(KatAn);	//"-|<-"
    124e:	89 e4       	ldi	r24, 0x49	; 73
    1250:	91 e0       	ldi	r25, 0x01	; 1
    1252:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
          lcd_testpin(diodes.Anode[0]);
    1256:	80 91 80 01 	lds	r24, 0x0180
    125a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
       }
       lcd_space();
    125e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>
       lcd_fix_string(Uf_str);			//"Uf="
    1262:	81 e1       	ldi	r24, 0x11	; 17
    1264:	91 e0       	ldi	r25, 0x01	; 1
    1266:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       mVAusgabe(0);
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	0e 94 65 0a 	call	0x14ca	; 0x14ca <mVAusgabe>
       wait_for_key_5s_line2();		// wait 5s and clear line 2
    1270:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <wait_for_key_5s_line2>
       } else {
          lcd_data(LCD_CHAR_DIODE2);	//show Diode symbol |<
       }
#endif
    }
    lcd_line2();			//2. Row
    1274:	80 ec       	ldi	r24, 0xC0	; 192
    1276:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
    if((PartMode&D_MODE) != D_MODE) {	//enhancement-MOSFET
    127a:	80 91 06 01 	lds	r24, 0x0106
    127e:	85 fd       	sbrc	r24, 5
    1280:	1d c0       	rjmp	.+58     	; 0x12bc <main+0x874>
	//Gate capacity
       lcd_fix_string(GateCap_str);		//"C="
    1282:	8d ef       	ldi	r24, 0xFD	; 253
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       ReadCapacity(_trans->b,_trans->e);	//measure capacity
    128a:	e0 91 40 01 	lds	r30, 0x0140
    128e:	f0 91 41 01 	lds	r31, 0x0141
    1292:	82 85       	ldd	r24, Z+10	; 0x0a
    1294:	64 85       	ldd	r22, Z+12	; 0x0c
    1296:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <ReadCapacity>
       DisplayValue(cap.cval,cap.cpre,'F',3);
    129a:	60 91 6a 01 	lds	r22, 0x016A
    129e:	70 91 6b 01 	lds	r23, 0x016B
    12a2:	80 91 6c 01 	lds	r24, 0x016C
    12a6:	90 91 6d 01 	lds	r25, 0x016D
    12aa:	40 91 7c 01 	lds	r20, 0x017C
    12ae:	26 e4       	ldi	r18, 0x46	; 70
    12b0:	03 e0       	ldi	r16, 0x03	; 3
    12b2:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DisplayValue>
       lcd_fix_string(vt_str);		// "Vt="
    12b6:	85 e1       	ldi	r24, 0x15	; 21
    12b8:	91 e0       	ldi	r25, 0x01	; 1
    12ba:	15 c0       	rjmp	.+42     	; 0x12e6 <main+0x89e>
    } else {
       lcd_data('I');
    12bc:	89 e4       	ldi	r24, 0x49	; 73
    12be:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       lcd_data('=');
    12c2:	8d e3       	ldi	r24, 0x3D	; 61
    12c4:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       DisplayValue(_trans->current,-5,'A',2);
    12c8:	e0 91 40 01 	lds	r30, 0x0140
    12cc:	f0 91 41 01 	lds	r31, 0x0141
    12d0:	66 81       	ldd	r22, Z+6	; 0x06
    12d2:	77 81       	ldd	r23, Z+7	; 0x07
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	4b ef       	ldi	r20, 0xFB	; 251
    12da:	21 e4       	ldi	r18, 0x41	; 65
    12dc:	02 e0       	ldi	r16, 0x02	; 2
    12de:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DisplayValue>
       lcd_fix_string(Vgs_str);		// " Vg="
    12e2:	8a e1       	ldi	r24, 0x1A	; 26
    12e4:	91 e0       	ldi	r25, 0x01	; 1
    12e6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    }
    //Gate-threshold voltage
    DisplayValue(_trans->gthvoltage,-3,'V',2);
    12ea:	e0 91 40 01 	lds	r30, 0x0140
    12ee:	f0 91 41 01 	lds	r31, 0x0141
    12f2:	60 85       	ldd	r22, Z+8	; 0x08
    12f4:	71 85       	ldd	r23, Z+9	; 0x09
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	4d ef       	ldi	r20, 0xFD	; 253
    12fc:	26 e5       	ldi	r18, 0x56	; 86
    12fe:	02 e0       	ldi	r16, 0x02	; 2
    1300:	3a cf       	rjmp	.-396    	; 0x1176 <main+0x72e>
    goto end;
    // end (PartFound == PART_FET)
  }
//   if(PartFound == PART_RESISTOR) 
resistor_out:
   if(ResistorsFound != 0) {
    1302:	60 91 68 01 	lds	r22, 0x0168
    1306:	66 23       	and	r22, r22
    1308:	09 f4       	brne	.+2      	; 0x130c <main+0x8c4>
    130a:	95 c0       	rjmp	.+298    	; 0x1436 <main+0x9ee>
    ii = 0;
    if (ResistorsFound == 1) { // single resistor
    130c:	61 30       	cpi	r22, 0x01	; 1
    130e:	71 f4       	brne	.+28     	; 0x132c <main+0x8e4>
       lcd_testpin(resis[0].rb);  	//Pin-number 1
    1310:	80 91 1e 01 	lds	r24, 0x011E
    1314:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
       lcd_fix_string(Resistor_str);
    1318:	82 e5       	ldi	r24, 0x52	; 82
    131a:	91 e0       	ldi	r25, 0x01	; 1
    131c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       lcd_testpin(resis[0].ra);		//Pin-number 2
    1320:	80 91 1d 01 	lds	r24, 0x011D
    1324:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
    // end (PartFound == PART_FET)
  }
//   if(PartFound == PART_RESISTOR) 
resistor_out:
   if(ResistorsFound != 0) {
    ii = 0;
    1328:	10 e0       	ldi	r17, 0x00	; 0
    132a:	52 c0       	rjmp	.+164    	; 0x13d0 <main+0x988>
    if (ResistorsFound == 1) { // single resistor
       lcd_testpin(resis[0].rb);  	//Pin-number 1
       lcd_fix_string(Resistor_str);
       lcd_testpin(resis[0].ra);		//Pin-number 2
    } else { // R-Max suchen
       if (resis[1].rx > resis[0].rx)
    132c:	20 91 21 01 	lds	r18, 0x0121
    1330:	30 91 22 01 	lds	r19, 0x0122
    1334:	40 91 23 01 	lds	r20, 0x0123
    1338:	50 91 24 01 	lds	r21, 0x0124
    133c:	80 91 19 01 	lds	r24, 0x0119
    1340:	90 91 1a 01 	lds	r25, 0x011A
    1344:	a0 91 1b 01 	lds	r26, 0x011B
    1348:	b0 91 1c 01 	lds	r27, 0x011C
          ii = 1;
       if (ResistorsFound == 2) {
    134c:	62 30       	cpi	r22, 0x02	; 2
    134e:	51 f1       	breq	.+84     	; 0x13a4 <main+0x95c>
    // end (PartFound == PART_FET)
  }
//   if(PartFound == PART_RESISTOR) 
resistor_out:
   if(ResistorsFound != 0) {
    ii = 0;
    1350:	11 e0       	ldi	r17, 0x01	; 1
    1352:	82 17       	cp	r24, r18
    1354:	93 07       	cpc	r25, r19
    1356:	a4 07       	cpc	r26, r20
    1358:	b5 07       	cpc	r27, r21
    135a:	08 f0       	brcs	.+2      	; 0x135e <main+0x916>
    135c:	10 e0       	ldi	r17, 0x00	; 0
       if (resis[1].rx > resis[0].rx)
          ii = 1;
       if (ResistorsFound == 2) {
          ii = 2;
       } else {
          if (resis[2].rx > resis[ii].rx) {
    135e:	e1 2f       	mov	r30, r17
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	63 e0       	ldi	r22, 0x03	; 3
    1364:	ee 0f       	add	r30, r30
    1366:	ff 1f       	adc	r31, r31
    1368:	6a 95       	dec	r22
    136a:	e1 f7       	brne	.-8      	; 0x1364 <main+0x91c>
    136c:	e7 5e       	subi	r30, 0xE7	; 231
    136e:	fe 4f       	sbci	r31, 0xFE	; 254
    1370:	20 91 29 01 	lds	r18, 0x0129
    1374:	30 91 2a 01 	lds	r19, 0x012A
    1378:	40 91 2b 01 	lds	r20, 0x012B
    137c:	50 91 2c 01 	lds	r21, 0x012C
    1380:	80 81       	ld	r24, Z
    1382:	91 81       	ldd	r25, Z+1	; 0x01
    1384:	a2 81       	ldd	r26, Z+2	; 0x02
    1386:	b3 81       	ldd	r27, Z+3	; 0x03
    1388:	82 17       	cp	r24, r18
    138a:	93 07       	cpc	r25, r19
    138c:	a4 07       	cpc	r26, r20
    138e:	b5 07       	cpc	r27, r21
    1390:	48 f0       	brcs	.+18     	; 0x13a4 <main+0x95c>
       }
       char x = '1';
       char y = '3';
       char z = '2';
   
       if (ii == 1) {
    1392:	11 30       	cpi	r17, 0x01	; 1
    1394:	19 f0       	breq	.+6      	; 0x139c <main+0x954>
    1396:	02 e3       	ldi	r16, 0x32	; 50
    1398:	23 e3       	ldi	r18, 0x33	; 51
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <main+0x958>
          // x = '1';
          y = '2';
          z = '3';
    139c:	03 e3       	ldi	r16, 0x33	; 51
       char y = '3';
       char z = '2';
   
       if (ii == 1) {
          // x = '1';
          y = '2';
    139e:	22 e3       	ldi	r18, 0x32	; 50
       } else {
          if (resis[2].rx > resis[ii].rx) {
             ii = 2;
          }
       }
       char x = '1';
    13a0:	81 e3       	ldi	r24, 0x31	; 49
    13a2:	04 c0       	rjmp	.+8      	; 0x13ac <main+0x964>
       if (resis[1].rx > resis[0].rx)
          ii = 1;
       if (ResistorsFound == 2) {
          ii = 2;
       } else {
          if (resis[2].rx > resis[ii].rx) {
    13a4:	12 e0       	ldi	r17, 0x02	; 2
          z = '3';
       }
       if (ii == 2) {
          x = '2';
          y = '1';
          z = '3';
    13a6:	03 e3       	ldi	r16, 0x33	; 51
          y = '2';
          z = '3';
       }
       if (ii == 2) {
          x = '2';
          y = '1';
    13a8:	21 e3       	ldi	r18, 0x31	; 49
          // x = '1';
          y = '2';
          z = '3';
       }
       if (ii == 2) {
          x = '2';
    13aa:	82 e3       	ldi	r24, 0x32	; 50
          y = '1';
          z = '3';
       }
       lcd_data(x);
    13ac:	29 83       	std	Y+1, r18	; 0x01
    13ae:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       lcd_fix_string(Resistor_str);    // -[=]-
    13b2:	82 e5       	ldi	r24, 0x52	; 82
    13b4:	91 e0       	ldi	r25, 0x01	; 1
    13b6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       lcd_data(y);
    13ba:	29 81       	ldd	r18, Y+1	; 0x01
    13bc:	82 2f       	mov	r24, r18
    13be:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       lcd_fix_string(Resistor_str);    // -[=]-
    13c2:	82 e5       	ldi	r24, 0x52	; 82
    13c4:	91 e0       	ldi	r25, 0x01	; 1
    13c6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       lcd_data(z);
    13ca:	80 2f       	mov	r24, r16
    13cc:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
    }
    lcd_line2(); //2. row 
    13d0:	80 ec       	ldi	r24, 0xC0	; 192
    13d2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
    if (ResistorsFound == 1) {
    13d6:	80 91 68 01 	lds	r24, 0x0168
    13da:	81 30       	cpi	r24, 0x01	; 1
    13dc:	d1 f4       	brne	.+52     	; 0x1412 <main+0x9ca>
       RvalOut(0);
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	0e 94 c9 0a 	call	0x1592	; 0x1592 <RvalOut>
#if FLASHEND > 0x1fff
       ReadInductance();		// measure inductance, possible only with single R<2.1k
    13e4:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <ReadInductance>
       if (inductor_lpre != 0) {
    13e8:	80 91 0b 01 	lds	r24, 0x010B
    13ec:	88 23       	and	r24, r24
    13ee:	a9 f1       	breq	.+106    	; 0x145a <main+0xa12>
	  // resistor have also Inductance
          lcd_fix_string(Lis_str);	// "L="
    13f0:	8c e3       	ldi	r24, 0x3C	; 60
    13f2:	91 e0       	ldi	r25, 0x01	; 1
    13f4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
          DisplayValue(inductor_lx,inductor_lpre,'H',3);	// output inductance
    13f8:	60 91 98 01 	lds	r22, 0x0198
    13fc:	70 91 99 01 	lds	r23, 0x0199
    1400:	80 91 9a 01 	lds	r24, 0x019A
    1404:	90 91 9b 01 	lds	r25, 0x019B
    1408:	40 91 0b 01 	lds	r20, 0x010B
    140c:	28 e4       	ldi	r18, 0x48	; 72
    140e:	03 e0       	ldi	r16, 0x03	; 3
    1410:	b2 ce       	rjmp	.-668    	; 0x1176 <main+0x72e>
       }
#endif
    } else {
       // output resistor values in right order
       if (ii == 0) {
    1412:	11 23       	and	r17, r17
    1414:	11 f4       	brne	.+4      	; 0x141a <main+0x9d2>
          RvalOut(1);
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	03 c0       	rjmp	.+6      	; 0x1420 <main+0x9d8>
          RvalOut(2);
       }
       if (ii == 1) {
    141a:	11 30       	cpi	r17, 0x01	; 1
    141c:	29 f4       	brne	.+10     	; 0x1428 <main+0x9e0>
          RvalOut(0);
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	0e 94 c9 0a 	call	0x1592	; 0x1592 <RvalOut>
          RvalOut(2);
    1424:	82 e0       	ldi	r24, 0x02	; 2
    1426:	04 c0       	rjmp	.+8      	; 0x1430 <main+0x9e8>
       }
       if (ii == 2) {
          RvalOut(0);
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	0e 94 c9 0a 	call	0x1592	; 0x1592 <RvalOut>
          RvalOut(1);
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	0e 94 c9 0a 	call	0x1592	; 0x1592 <RvalOut>
    1434:	12 c0       	rjmp	.+36     	; 0x145a <main+0xa12>
    }
    goto end;

  } // end (PartFound == PART_RESISTOR)

  lcd_fix_string(TestFailed1); 	//"Kein,unbek. oder"
    1436:	87 e9       	ldi	r24, 0x97	; 151
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  lcd_line2(); //2. row 
    143e:	80 ec       	ldi	r24, 0xC0	; 192
    1440:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_string(TestFailed2); 	//"defektes "
    1444:	81 e7       	ldi	r24, 0x71	; 113
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  lcd_fix_string(Bauteil);		//"Bauteil"
    144c:	8a e7       	ldi	r24, 0x7A	; 122
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
not_known:
#if POWER_OFF+0 > 1
  empty_count++;
  mess_count = 0;
#endif
  max_time = SHORT_WAIT_TIME;		// use allways the short wait time
    1454:	88 e8       	ldi	r24, 0x88	; 136
    1456:	93 e1       	ldi	r25, 0x13	; 19
    1458:	02 c0       	rjmp	.+4      	; 0x145e <main+0xa16>
 end:
#if POWER_OFF+0 > 1
  empty_count = 0;		// reset counter, if part is found
  mess_count++;			// count measurements
#endif
  max_time = display_time;	// full specified wait time
    145a:	80 e6       	ldi	r24, 0x60	; 96
    145c:	9d e6       	ldi	r25, 0x6D	; 109

 end2:
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND, release relay
    145e:	28 e1       	ldi	r18, 0x18	; 24
    1460:	27 b9       	out	0x07, r18	; 7
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
    1462:	4f 9b       	sbis	0x09, 7	; 9
    1464:	fe cf       	rjmp	.-4      	; 0x1462 <main+0xa1a>
  if ((wait_for_key_ms(max_time)) != 0 ) goto start;
    1466:	0e 94 ca 0c 	call	0x1994	; 0x1994 <wait_for_key_ms>
    146a:	88 23       	and	r24, r24
    146c:	09 f0       	breq	.+2      	; 0x1470 <main+0xa28>
    146e:	53 cb       	rjmp	.-2394   	; 0xb16 <main+0xce>
 #if FLASHEND > 0x3fff
  // look, if the tester is uncalibrated (C-source will be included directly)
  #include "HelpCalibration.c"
 #endif
//  MCUSR = 0;
  ON_PORT &= ~(1<<ON_PIN);		//switch off power
    1470:	5e 98       	cbi	0x0b, 6	; 11
  wait_for_key_ms(0); //never ending loop 
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	0e 94 ca 0c 	call	0x1994	; 0x1994 <wait_for_key_ms>
#else
  goto start;	// POWER_OFF not selected, repeat measurement
#endif
  return 0;
    147a:	18 c0       	rjmp	.+48     	; 0x14ac <main+0xa64>

end3:
  // the diode  is already shown on the LCD
  if (ResistorsFound == 0) goto end;
    147c:	80 91 68 01 	lds	r24, 0x0168
    1480:	88 23       	and	r24, r24
    1482:	59 f3       	breq	.-42     	; 0x145a <main+0xa12>
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND, release relay
    1484:	88 e1       	ldi	r24, 0x18	; 24
    1486:	87 b9       	out	0x07, r24	; 7
  // there is one resistor or more detected
  wait_for_key_ms(display_time);
    1488:	80 e6       	ldi	r24, 0x60	; 96
    148a:	9d e6       	ldi	r25, 0x6D	; 109
    148c:	0e 94 ca 0c 	call	0x1994	; 0x1994 <wait_for_key_ms>
  ADC_DDR =  TXD_MSK; 	// switch pin with reference to input, activate relay
    1490:	88 e0       	ldi	r24, 0x08	; 8
    1492:	87 b9       	out	0x07, r24	; 7
  lcd_clear();
    1494:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
#if FLASHEND > 0x1fff
  lcd_data('0'+NumOfDiodes);
    1498:	80 91 05 01 	lds	r24, 0x0105
    149c:	80 5d       	subi	r24, 0xD0	; 208
    149e:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
  lcd_fix_string(Dioden);	//"Diodes "
    14a2:	8d e4       	ldi	r24, 0x4D	; 77
    14a4:	91 e0       	ldi	r25, 0x01	; 1
    14a6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
#endif
  goto resistor_out;
    14aa:	2b cf       	rjmp	.-426    	; 0x1302 <main+0x8ba>

}   // end main
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	0f 90       	pop	r0
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	1f 91       	pop	r17
    14b8:	0f 91       	pop	r16
    14ba:	ff 90       	pop	r15
    14bc:	ef 90       	pop	r14
    14be:	df 90       	pop	r13
    14c0:	cf 90       	pop	r12
    14c2:	bf 90       	pop	r11
    14c4:	9f 90       	pop	r9
    14c6:	8f 90       	pop	r8
    14c8:	08 95       	ret

000014ca <mVAusgabe>:
    14ca:	0f 93       	push	r16
    14cc:	83 30       	cpi	r24, 0x03	; 3
    14ce:	88 f4       	brcc	.+34     	; 0x14f2 <ad1ca4>
    14d0:	ec e8       	ldi	r30, 0x8C	; 140
    14d2:	f1 e0       	ldi	r31, 0x01	; 1
    14d4:	e8 0f       	add	r30, r24
    14d6:	f1 1d       	adc	r31, r1
    14d8:	e8 0f       	add	r30, r24
    14da:	f1 1d       	adc	r31, r1
    14dc:	60 81       	ld	r22, Z
    14de:	71 81       	ldd	r23, Z+1	; 0x01
    14e0:	81 2d       	mov	r24, r1
    14e2:	91 2d       	mov	r25, r1
    14e4:	4d ef       	ldi	r20, 0xFD	; 253
    14e6:	26 e5       	ldi	r18, 0x56	; 86
    14e8:	03 e0       	ldi	r16, 0x03	; 3
    14ea:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DisplayValue>
    14ee:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>

000014f2 <ad1ca4>:
    14f2:	0f 91       	pop	r16
    14f4:	08 95       	ret

000014f6 <UfAusgabe>:
    14f6:	1f 93       	push	r17
    14f8:	18 2f       	mov	r17, r24
    14fa:	80 91 68 01 	lds	r24, 0x0168
    14fe:	88 23       	and	r24, r24
    1500:	29 f0       	breq	.+10     	; 0x150c <ad1cbe>
    1502:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>
    1506:	82 e5       	ldi	r24, 0x52	; 82
    1508:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>

0000150c <ad1cbe>:
    150c:	80 ec       	ldi	r24, 0xC0	; 192
    150e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
    1512:	81 e1       	ldi	r24, 0x11	; 17
    1514:	91 e0       	ldi	r25, 0x01	; 1
    1516:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    151a:	81 2f       	mov	r24, r17
    151c:	82 95       	swap	r24
    151e:	8f 70       	andi	r24, 0x0F	; 15
    1520:	d4 df       	rcall	.-88     	; 0x14ca <mVAusgabe>
    1522:	81 2f       	mov	r24, r17
    1524:	8f 70       	andi	r24, 0x0F	; 15
    1526:	d1 df       	rcall	.-94     	; 0x14ca <mVAusgabe>
    1528:	1f 91       	pop	r17
    152a:	08 95       	ret

0000152c <SerienDiodenAusgabe>:
    152c:	df 92       	push	r13
    152e:	ef 92       	push	r14
    1530:	ff 92       	push	r15
    1532:	0f 93       	push	r16
    1534:	1f 93       	push	r17
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
    153a:	d0 90 02 01 	lds	r13, 0x0102
    153e:	8d 2d       	mov	r24, r13
    1540:	82 95       	swap	r24
    1542:	8f 70       	andi	r24, 0x0F	; 15
    1544:	c0 e8       	ldi	r28, 0x80	; 128
    1546:	d1 e0       	ldi	r29, 0x01	; 1
    1548:	7e 01       	movw	r14, r28
    154a:	e8 0e       	add	r14, r24
    154c:	f1 1c       	adc	r15, r1
    154e:	f7 01       	movw	r30, r14
    1550:	80 81       	ld	r24, Z
    1552:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
    1556:	05 e4       	ldi	r16, 0x45	; 69
    1558:	11 e0       	ldi	r17, 0x01	; 1
    155a:	c8 01       	movw	r24, r16
    155c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    1560:	f7 01       	movw	r30, r14
    1562:	86 81       	ldd	r24, Z+6	; 0x06
    1564:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
    1568:	c8 01       	movw	r24, r16
    156a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    156e:	8d 2d       	mov	r24, r13
    1570:	83 70       	andi	r24, 0x03	; 3
    1572:	c8 0f       	add	r28, r24
    1574:	d1 1d       	adc	r29, r1
    1576:	8e 81       	ldd	r24, Y+6	; 0x06
    1578:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
    157c:	80 91 02 01 	lds	r24, 0x0102
    1580:	ba df       	rcall	.-140    	; 0x14f6 <UfAusgabe>
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	ff 90       	pop	r15
    158c:	ef 90       	pop	r14
    158e:	df 90       	pop	r13
    1590:	08 95       	ret

00001592 <RvalOut>:
    1592:	0f 93       	push	r16
    1594:	e9 e1       	ldi	r30, 0x19	; 25
    1596:	f9 e1       	ldi	r31, 0x19	; 25
    1598:	88 0f       	add	r24, r24
    159a:	88 0f       	add	r24, r24
    159c:	88 0f       	add	r24, r24
    159e:	e8 0f       	add	r30, r24
    15a0:	f1 1d       	adc	r31, r1
    15a2:	60 81       	ld	r22, Z
    15a4:	71 81       	ldd	r23, Z+1	; 0x01
    15a6:	82 81       	ldd	r24, Z+2	; 0x02
    15a8:	93 81       	ldd	r25, Z+3	; 0x03
    15aa:	64 36       	cpi	r22, 0x64	; 100
    15ac:	71 05       	cpc	r23, r1
    15ae:	81 05       	cpc	r24, r1
    15b0:	91 05       	cpc	r25, r1
    15b2:	70 f4       	brcc	.+28     	; 0x15d0 <ad1d8e>
    15b4:	20 91 0b 01 	lds	r18, 0x010B
    15b8:	22 23       	and	r18, r18
    15ba:	51 f4       	brne	.+20     	; 0x15d0 <ad1d8e>
    15bc:	84 81       	ldd	r24, Z+4	; 0x04
    15be:	65 81       	ldd	r22, Z+5	; 0x05
    15c0:	0e 94 40 1b 	call	0x3680	; 0x3680 <GetESR>
    15c4:	bc 01       	movw	r22, r24
    15c6:	81 2d       	mov	r24, r1
    15c8:	91 2d       	mov	r25, r1
    15ca:	4e ef       	ldi	r20, 0xFE	; 254
    15cc:	03 e0       	ldi	r16, 0x03	; 3
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <ad1d94>

000015d0 <ad1d8e>:
    15d0:	4f ef       	ldi	r20, 0xFF	; 255
    15d2:	04 e0       	ldi	r16, 0x04	; 4

000015d4 <ad1d94>:
    15d4:	24 ef       	ldi	r18, 0xF4	; 244
    15d6:	0e 94 a2 0b 	call	0x1744	; 0x1744 <DisplayValue>
    15da:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>
    15de:	0f 91       	pop	r16
    15e0:	08 95       	ret

000015e2 <ChargePin10ms>:
#include "Transistortester.h"


//******************************************************************

void ChargePin10ms(uint8_t PinToCharge, uint8_t ChargeDirection) {
    15e2:	1f 93       	push	r17
    15e4:	18 2f       	mov	r17, r24
   //Will be used by discharge of MOSFET Gates or to load big capacities.
   //Parameters:
   //PinToCharge: specifies the pin as mask for R-Port
   //ChargeDirection: 0 = switch to GND (N-Kanal-FET), 1= switch to VCC(P-Kanal-FET)

   if(ChargeDirection&1) {
    15e6:	60 ff       	sbrs	r22, 0
    15e8:	03 c0       	rjmp	.+6      	; 0x15f0 <ChargePin10ms+0xe>
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
    15ea:	85 b1       	in	r24, 0x05	; 5
    15ec:	81 2b       	or	r24, r17
    15ee:	03 c0       	rjmp	.+6      	; 0x15f6 <ChargePin10ms+0x14>
   } else {
      R_PORT &= ~PinToCharge; // or 0 (GND)
    15f0:	95 b1       	in	r25, 0x05	; 5
    15f2:	80 95       	com	r24
    15f4:	89 23       	and	r24, r25
    15f6:	85 b9       	out	0x05, r24	; 5
   }
   R_DDR |= PinToCharge;		//switch Pin to output, across R to GND or VCC
    15f8:	84 b1       	in	r24, 0x04	; 4
    15fa:	81 2b       	or	r24, r17
    15fc:	84 b9       	out	0x04, r24	; 4
   wait_about10ms();			// wait about 10ms
    15fe:	82 e0       	ldi	r24, 0x02	; 2
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
   // switch back Input, no current
   R_DDR &= ~PinToCharge;	// switch back to input
    1606:	84 b1       	in	r24, 0x04	; 4
    1608:	10 95       	com	r17
    160a:	81 23       	and	r24, r17
    160c:	84 b9       	out	0x04, r24	; 4
   R_PORT &= ~PinToCharge;	// no Pull up
    160e:	85 b1       	in	r24, 0x05	; 5
    1610:	81 23       	and	r24, r17
    1612:	85 b9       	out	0x05, r24	; 5
}
    1614:	1f 91       	pop	r17
    1616:	08 95       	ret

00001618 <EntladePins>:
#include <avr/pgmspace.h>
#include "Transistortester.h"


// first discharge any charge of capacitors
void EntladePins() {
    1618:	bf 92       	push	r11
    161a:	cf 92       	push	r12
    161c:	df 92       	push	r13
    161e:	ef 92       	push	r14
    1620:	ff 92       	push	r15
    1622:	0f 93       	push	r16
    1624:	1f 93       	push	r17
    1626:	cf 93       	push	r28
    1628:	df 93       	push	r29
    162a:	2a e0       	ldi	r18, 0x0A	; 10
    162c:	c2 2e       	mov	r12, r18
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
    162e:	98 e0       	ldi	r25, 0x08	; 8
    1630:	d9 2e       	mov	r13, r25
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     R_PORT = 0;			// R-outputs auf 0
//     R_DDR = (1<<PIN_RH3) | (1<<PIN_RH2) | (1<<PIN_RH1); // R_H for all Pins to GND
     R_DDR = (1<<PIN_RH3) | (1<<PIN_RL3) | (1<<PIN_RH2) | (1<<PIN_RL2) | (1<<PIN_RH1) | (1<<PIN_RL1); // R_H and R_L for all Pins to GND
    1632:	8f e3       	ldi	r24, 0x3F	; 63
    1634:	b8 2e       	mov	r11, r24
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
    1636:	d7 b8       	out	0x07, r13	; 7
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
    1638:	d8 b8       	out	0x08, r13	; 8
     R_PORT = 0;			// R-outputs auf 0
    163a:	15 b8       	out	0x05, r1	; 5
//     R_DDR = (1<<PIN_RH3) | (1<<PIN_RH2) | (1<<PIN_RH1); // R_H for all Pins to GND
     R_DDR = (1<<PIN_RH3) | (1<<PIN_RL3) | (1<<PIN_RH2) | (1<<PIN_RL2) | (1<<PIN_RH1) | (1<<PIN_RL1); // R_H and R_L for all Pins to GND
    163c:	b4 b8       	out	0x04, r11	; 4
     adcmv[0] = W5msReadADC(PC0);	// which voltage has Pin 1?
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    1644:	8c 01       	movw	r16, r24
     adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
    164c:	ec 01       	movw	r28, r24
     adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
    164e:	82 e0       	ldi	r24, 0x02	; 2
    1650:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
     if ((PartFound == PART_CELL) || (adcmv[0] < CAP_EMPTY_LEVEL) & (adcmv[1] < CAP_EMPTY_LEVEL) & (adcmv[2] < CAP_EMPTY_LEVEL)) {
    1654:	20 91 07 01 	lds	r18, 0x0107
    1658:	28 30       	cpi	r18, 0x08	; 8
    165a:	c1 f0       	breq	.+48     	; 0x168c <EntladePins+0x74>
    165c:	41 e0       	ldi	r20, 0x01	; 1
    165e:	c4 30       	cpi	r28, 0x04	; 4
    1660:	d1 05       	cpc	r29, r1
    1662:	08 f0       	brcs	.+2      	; 0x1666 <EntladePins+0x4e>
    1664:	40 e0       	ldi	r20, 0x00	; 0
    1666:	21 e0       	ldi	r18, 0x01	; 1
    1668:	04 30       	cpi	r16, 0x04	; 4
    166a:	11 05       	cpc	r17, r1
    166c:	08 f0       	brcs	.+2      	; 0x1670 <EntladePins+0x58>
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	42 23       	and	r20, r18
    1672:	50 e0       	ldi	r21, 0x00	; 0
    1674:	21 e0       	ldi	r18, 0x01	; 1
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	84 30       	cpi	r24, 0x04	; 4
    167a:	91 05       	cpc	r25, r1
    167c:	10 f0       	brcs	.+4      	; 0x1682 <EntladePins+0x6a>
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	24 23       	and	r18, r20
    1684:	35 23       	and	r19, r21
    1686:	21 15       	cp	r18, r1
    1688:	31 05       	cpc	r19, r1
    168a:	21 f0       	breq	.+8      	; 0x1694 <EntladePins+0x7c>
        ADC_DDR = TXD_MSK;		// switch all ADC-Pins to input
    168c:	88 e0       	ldi	r24, 0x08	; 8
    168e:	87 b9       	out	0x07, r24	; 7
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
    1690:	14 b8       	out	0x04, r1	; 4
#if FLASHEND > 0x3fff
        cell_mv[0] = adcmv[0];		// save the voltage of pin 1
        cell_mv[1] = adcmv[1];		// save the voltage of pin 2
        cell_mv[2] = adcmv[2];		// save the voltage of pin 3
#endif
        return;			// all is discharged
    1692:	4e c0       	rjmp	.+156    	; 0x1730 <EntladePins+0x118>
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
    1694:	23 e0       	ldi	r18, 0x03	; 3
    1696:	08 3e       	cpi	r16, 0xE8	; 232
    1698:	12 07       	cpc	r17, r18
    169a:	10 f0       	brcs	.+4      	; 0x16a0 <EntladePins+0x88>
  uint8_t lop_cnt;		// loop counter
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
    169c:	28 e0       	ldi	r18, 0x08	; 8
    169e:	01 c0       	rjmp	.+2      	; 0x16a2 <EntladePins+0x8a>
#endif
        return;			// all is discharged
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
        adc_gnd |= (1<<PC0);	//Pin 1 directly to GND
    16a0:	29 e0       	ldi	r18, 0x09	; 9
     }
     if (adcmv[1] < 1000) {
    16a2:	33 e0       	ldi	r19, 0x03	; 3
    16a4:	c8 3e       	cpi	r28, 0xE8	; 232
    16a6:	d3 07       	cpc	r29, r19
    16a8:	08 f4       	brcc	.+2      	; 0x16ac <EntladePins+0x94>
        adc_gnd |= (1<<PC1);	//Pin 2 directly to GND
    16aa:	22 60       	ori	r18, 0x02	; 2
     }
     if (adcmv[2] < 1000) {
    16ac:	33 e0       	ldi	r19, 0x03	; 3
    16ae:	88 3e       	cpi	r24, 0xE8	; 232
    16b0:	93 07       	cpc	r25, r19
    16b2:	08 f4       	brcc	.+2      	; 0x16b6 <EntladePins+0x9e>
        adc_gnd |= (1<<PC2);	//Pin 3 directly to  GND
    16b4:	24 60       	ori	r18, 0x04	; 4
     }
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time
    16b6:	27 b9       	out	0x07, r18	; 7

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
//     R_DDR = (1<<PIN_RL3) | (1<<PIN_RL2) | (1<<PIN_RL1);	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    16b8:	c0 e0       	ldi	r28, 0x00	; 0
    16ba:	d0 e0       	ldi	r29, 0x00	; 0
        wdt_reset();
    16bc:	a8 95       	wdr
        adcmv[0] = W20msReadADC(PC0);	// which voltage has Pin 1?
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <W20msReadADC>
    16c4:	7c 01       	movw	r14, r24
        adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
    16cc:	8c 01       	movw	r16, r24
        adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
    16ce:	82 e0       	ldi	r24, 0x02	; 2
    16d0:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
        if (adcmv[0] < 1300) {
    16d4:	24 e1       	ldi	r18, 0x14	; 20
    16d6:	e2 16       	cp	r14, r18
    16d8:	25 e0       	ldi	r18, 0x05	; 5
    16da:	f2 06       	cpc	r15, r18
    16dc:	08 f4       	brcc	.+2      	; 0x16e0 <EntladePins+0xc8>
           ADC_DDR |= (1<<PC0);	// below 1.3V , switch directly with ADC-Port to GND
    16de:	38 9a       	sbi	0x07, 0	; 7
        }
        if (adcmv[1] < 1300) {
    16e0:	35 e0       	ldi	r19, 0x05	; 5
    16e2:	04 31       	cpi	r16, 0x14	; 20
    16e4:	13 07       	cpc	r17, r19
    16e6:	08 f4       	brcc	.+2      	; 0x16ea <EntladePins+0xd2>
           ADC_DDR |= (1<<PC1);	// below 1.3V, switch directly with ADC-Port to GND
    16e8:	39 9a       	sbi	0x07, 1	; 7
        }
        if (adcmv[2] < 1300) {
    16ea:	25 e0       	ldi	r18, 0x05	; 5
    16ec:	84 31       	cpi	r24, 0x14	; 20
    16ee:	92 07       	cpc	r25, r18
    16f0:	08 f4       	brcc	.+2      	; 0x16f4 <EntladePins+0xdc>
           ADC_DDR |= (1<<PC2);	// below 1.3V, switch directly with ADC-Port to GND
    16f2:	3a 9a       	sbi	0x07, 2	; 7
        }
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
    16f4:	36 e0       	ldi	r19, 0x06	; 6
    16f6:	e3 16       	cp	r14, r19
    16f8:	f1 04       	cpc	r15, r1
    16fa:	30 f4       	brcc	.+12     	; 0x1708 <EntladePins+0xf0>
    16fc:	06 30       	cpi	r16, 0x06	; 6
    16fe:	11 05       	cpc	r17, r1
    1700:	18 f4       	brcc	.+6      	; 0x1708 <EntladePins+0xf0>
    1702:	86 30       	cpi	r24, 0x06	; 6
    1704:	91 05       	cpc	r25, r1
    1706:	38 f0       	brcs	.+14     	; 0x1716 <EntladePins+0xfe>

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
//     R_DDR = (1<<PIN_RL3) | (1<<PIN_RL2) | (1<<PIN_RL1);	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    1708:	21 96       	adiw	r28, 0x01	; 1
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	c4 3f       	cpi	r28, 0xF4	; 244
    170e:	d8 07       	cpc	r29, r24
    1710:	a9 f6       	brne	.-86     	; 0x16bc <EntladePins+0xa4>
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
           break;
        }
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
    1712:	d0 92 07 01 	sts	0x0107, r13

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
//     R_DDR = (1<<PIN_RL3) | (1<<PIN_RL2) | (1<<PIN_RL1);	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    1716:	00 e0       	ldi	r16, 0x00	; 0
    1718:	10 e0       	ldi	r17, 0x00	; 0
    171a:	04 c0       	rjmp	.+8      	; 0x1724 <EntladePins+0x10c>
        lcd_space();
        lcd_string(utoa(adcmv[2], outval, 10));
#endif
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
    171c:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <wait1ms>
    1720:	0f 5f       	subi	r16, 0xFF	; 255
    1722:	1f 4f       	sbci	r17, 0xFF	; 255
        lcd_space();
        lcd_string(utoa(adcmv[1], outval, 10));
        lcd_space();
        lcd_string(utoa(adcmv[2], outval, 10));
#endif
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
    1724:	0c 17       	cp	r16, r28
    1726:	1d 07       	cpc	r17, r29
    1728:	c8 f3       	brcs	.-14     	; 0x171c <EntladePins+0x104>
    172a:	ca 94       	dec	r12
  unsigned int clr_cnt;		// Clear Counter
  uint8_t lop_cnt;		// loop counter
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
    172c:	09 f0       	breq	.+2      	; 0x1730 <EntladePins+0x118>
    172e:	83 cf       	rjmp	.-250    	; 0x1636 <EntladePins+0x1e>
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     }
  } // end for lop_cnt
 }
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	1f 91       	pop	r17
    1736:	0f 91       	pop	r16
    1738:	ff 90       	pop	r15
    173a:	ef 90       	pop	r14
    173c:	df 90       	pop	r13
    173e:	cf 90       	pop	r12
    1740:	bf 90       	pop	r11
    1742:	08 95       	ret

00001744 <DisplayValue>:
 *    e.g: p = 10^-12 -> -12
 *  - unit character (0 = none)
 *  digits = 2, 3 or 4
 */
void DisplayValue(unsigned long Value, int8_t Exponent, unsigned char Unit, unsigned char digits)
{
    1744:	2f 92       	push	r2
    1746:	3f 92       	push	r3
    1748:	4f 92       	push	r4
    174a:	5f 92       	push	r5
    174c:	7f 92       	push	r7
    174e:	8f 92       	push	r8
    1750:	9f 92       	push	r9
    1752:	af 92       	push	r10
    1754:	bf 92       	push	r11
    1756:	cf 92       	push	r12
    1758:	df 92       	push	r13
    175a:	ef 92       	push	r14
    175c:	ff 92       	push	r15
    175e:	0f 93       	push	r16
    1760:	1f 93       	push	r17
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    176a:	2f 97       	sbiw	r28, 0x0f	; 15
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	f8 94       	cli
    1770:	de bf       	out	0x3e, r29	; 62
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	cd bf       	out	0x3d, r28	; 61
    1776:	6b 01       	movw	r12, r22
    1778:	7c 01       	movw	r14, r24
    177a:	14 2f       	mov	r17, r20
    177c:	72 2e       	mov	r7, r18
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
    177e:	03 30       	cpi	r16, 0x03	; 3
    1780:	29 f0       	breq	.+10     	; 0x178c <DisplayValue+0x48>
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
    1782:	04 30       	cpi	r16, 0x04	; 4
    1784:	31 f0       	breq	.+12     	; 0x1792 <DisplayValue+0x4e>
  uint8_t           Offset;		/* exponent of offset to next 10^3 step */
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
    1786:	84 e6       	ldi	r24, 0x64	; 100
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	14 c0       	rjmp	.+40     	; 0x17b4 <DisplayValue+0x70>
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
    178c:	88 ee       	ldi	r24, 0xE8	; 232
    178e:	93 e0       	ldi	r25, 0x03	; 3
    1790:	11 c0       	rjmp	.+34     	; 0x17b4 <DisplayValue+0x70>
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
    1792:	80 e1       	ldi	r24, 0x10	; 16
    1794:	97 e2       	ldi	r25, 0x27	; 39
    1796:	0e c0       	rjmp	.+28     	; 0x17b4 <DisplayValue+0x70>
  while (Value >= Limit)
  {
    Value += 5;				/* for automatic rounding */
    1798:	c7 01       	movw	r24, r14
    179a:	b6 01       	movw	r22, r12
    179c:	6b 5f       	subi	r22, 0xFB	; 251
    179e:	7f 4f       	sbci	r23, 0xFF	; 255
    17a0:	8f 4f       	sbci	r24, 0xFF	; 255
    17a2:	9f 4f       	sbci	r25, 0xFF	; 255
    Value = Value / 10;			/* scale down by 10^1 */
    17a4:	a5 01       	movw	r20, r10
    17a6:	94 01       	movw	r18, r8
    17a8:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    17ac:	69 01       	movw	r12, r18
    17ae:	7a 01       	movw	r14, r20
    Exponent++;				/* increase exponent by 1 */
    17b0:	1f 5f       	subi	r17, 0xFF	; 255
    17b2:	08 c0       	rjmp	.+16     	; 0x17c4 <DisplayValue+0x80>


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
  while (Value >= Limit)
    17b4:	1c 01       	movw	r2, r24
    17b6:	44 24       	eor	r4, r4
    17b8:	55 24       	eor	r5, r5
  {
    Value += 5;				/* for automatic rounding */
    Value = Value / 10;			/* scale down by 10^1 */
    17ba:	8a e0       	ldi	r24, 0x0A	; 10
    17bc:	88 2e       	mov	r8, r24
    17be:	91 2c       	mov	r9, r1
    17c0:	a1 2c       	mov	r10, r1
    17c2:	b1 2c       	mov	r11, r1


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
  while (Value >= Limit)
    17c4:	c2 14       	cp	r12, r2
    17c6:	d3 04       	cpc	r13, r3
    17c8:	e4 04       	cpc	r14, r4
    17ca:	f5 04       	cpc	r15, r5
    17cc:	28 f7       	brcc	.-54     	; 0x1798 <DisplayValue+0x54>


  /*
   *  determine prefix
   */
  Length = Exponent + 12;
    17ce:	81 2f       	mov	r24, r17
    17d0:	84 5f       	subi	r24, 0xF4	; 244
  if ((int8_t)Length <  0) Length = 0;		/* Limit to minimum prefix */
    17d2:	87 fd       	sbrc	r24, 7
    17d4:	03 c0       	rjmp	.+6      	; 0x17dc <DisplayValue+0x98>
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
    17d6:	83 31       	cpi	r24, 0x13	; 19
    17d8:	18 f4       	brcc	.+6      	; 0x17e0 <DisplayValue+0x9c>
    17da:	03 c0       	rjmp	.+6      	; 0x17e2 <DisplayValue+0x9e>

  /*
   *  determine prefix
   */
  Length = Exponent + 12;
  if ((int8_t)Length <  0) Length = 0;		/* Limit to minimum prefix */
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	01 c0       	rjmp	.+2      	; 0x17e2 <DisplayValue+0x9e>
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
    17e0:	82 e1       	ldi	r24, 0x12	; 18
  Index = Length / 3;
    17e2:	23 e0       	ldi	r18, 0x03	; 3
  Offset = Length % 3;
    17e4:	62 2f       	mov	r22, r18
    17e6:	0e 94 e7 1e 	call	0x3dce	; 0x3dce <__udivmodqi4>
    17ea:	19 2f       	mov	r17, r25
  if (Offset > 0)
    17ec:	99 23       	and	r25, r25
    17ee:	19 f0       	breq	.+6      	; 0x17f6 <DisplayValue+0xb2>
    {
      Index++;				/* adjust index for exponent offset, take next prefix */
    17f0:	8f 5f       	subi	r24, 0xFF	; 255
      Offset = 3 - Offset;		/* reverse value (1 or 2) */
    17f2:	29 1b       	sub	r18, r25
    17f4:	12 2f       	mov	r17, r18
    { /* use no nano */
      Index++;				/* use mikro instead of nano */
      Offset += 3;			/* can be 3,4 or 5 */
    }
#endif
  Prefix = MEM_read_byte((uint8_t *)(&PrefixTab[Index]));   /* look up prefix in table */
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	89 56       	subi	r24, 0x69	; 105
    17fa:	9e 4f       	sbci	r25, 0xFE	; 254
    17fc:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__eerd_byte_m168>
    1800:	b8 2e       	mov	r11, r24
  /*
   *  display value
   */

  /* convert value into string */
  utoa((unsigned int)Value, OutBuffer, 10);
    1802:	c6 01       	movw	r24, r12
    1804:	6e 01       	movw	r12, r28
    1806:	08 94       	sec
    1808:	c1 1c       	adc	r12, r1
    180a:	d1 1c       	adc	r13, r1
    180c:	b6 01       	movw	r22, r12
    180e:	4a e0       	ldi	r20, 0x0A	; 10
    1810:	50 e0       	ldi	r21, 0x00	; 0
    1812:	0e 94 65 1f 	call	0x3eca	; 0x3eca <utoa>
  Length = strlen(OutBuffer);
    1816:	f6 01       	movw	r30, r12
    1818:	01 90       	ld	r0, Z+
    181a:	00 20       	and	r0, r0
    181c:	e9 f7       	brne	.-6      	; 0x1818 <DisplayValue+0xd4>
    181e:	31 97       	sbiw	r30, 0x01	; 1
    1820:	2e 2e       	mov	r2, r30
    1822:	2c 18       	sub	r2, r12

  /* position of dot */
  Exponent = Length - Offset;		/* calculate position */
    1824:	82 2c       	mov	r8, r2
    1826:	81 1a       	sub	r8, r17

  if (Exponent <= 0)			/* we have to prepend "0." */
    1828:	18 14       	cp	r1, r8
    182a:	44 f0       	brlt	.+16     	; 0x183c <DisplayValue+0xf8>
  {
    /* 0: factor 10 / -1: factor 100 */
//    lcd_data('0');
    lcd_data('.');
    182c:	8e e2       	ldi	r24, 0x2E	; 46
    182e:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
      {
       lcd_data('0');	/* extra 0 for factor 10 */
       Exponent++;
      }
#else
    if (Exponent < 0) lcd_data('0');	/* extra 0 for factor 100 */
    1832:	88 20       	and	r8, r8
    1834:	19 f0       	breq	.+6      	; 0x183c <DisplayValue+0xf8>
    1836:	80 e3       	ldi	r24, 0x30	; 48
    1838:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
#endif
  }

  if (Offset == 0) Exponent = -1;	/* disable dot if not needed */
    183c:	11 23       	and	r17, r17
    183e:	11 f4       	brne	.+4      	; 0x1844 <DisplayValue+0x100>
    1840:	88 24       	eor	r8, r8
    1842:	8a 94       	dec	r8
    1844:	6e 01       	movw	r12, r28
    1846:	08 94       	sec
    1848:	c1 1c       	adc	r12, r1
    184a:	d1 1c       	adc	r13, r1
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    184c:	00 e0       	ldi	r16, 0x00	; 0
    184e:	10 e0       	ldi	r17, 0x00	; 0
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    Index++;				/* next one */
    if (Index == Exponent) {
    1850:	99 24       	eor	r9, r9
    1852:	87 fc       	sbrc	r8, 7
    1854:	90 94       	com	r9
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    1856:	0d c0       	rjmp	.+26     	; 0x1872 <DisplayValue+0x12e>
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    1858:	0f 5f       	subi	r16, 0xFF	; 255
    185a:	1f 4f       	sbci	r17, 0xFF	; 255
    185c:	f6 01       	movw	r30, r12
    185e:	81 91       	ld	r24, Z+
    1860:	6f 01       	movw	r12, r30
    1862:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
    Index++;				/* next one */
    if (Index == Exponent) {
    1866:	08 15       	cp	r16, r8
    1868:	19 05       	cpc	r17, r9
    186a:	19 f4       	brne	.+6      	; 0x1872 <DisplayValue+0x12e>
      lcd_data('.');			/* display dot */
    186c:	8e e2       	ldi	r24, 0x2E	; 46
    186e:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    1872:	02 15       	cp	r16, r2
    1874:	88 f3       	brcs	.-30     	; 0x1858 <DisplayValue+0x114>
      lcd_data('.');			/* display dot */
    }
  }

  /* display prefix and unit */
  if (Prefix != 0) lcd_data(Prefix);
    1876:	bb 20       	and	r11, r11
    1878:	19 f0       	breq	.+6      	; 0x1880 <DisplayValue+0x13c>
    187a:	8b 2d       	mov	r24, r11
    187c:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
  if (Unit) lcd_data(Unit);
    1880:	77 20       	and	r7, r7
    1882:	19 f0       	breq	.+6      	; 0x188a <DisplayValue+0x146>
    1884:	87 2d       	mov	r24, r7
    1886:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
}
    188a:	2f 96       	adiw	r28, 0x0f	; 15
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	1f 91       	pop	r17
    189c:	0f 91       	pop	r16
    189e:	ff 90       	pop	r15
    18a0:	ef 90       	pop	r14
    18a2:	df 90       	pop	r13
    18a4:	cf 90       	pop	r12
    18a6:	bf 90       	pop	r11
    18a8:	af 90       	pop	r10
    18aa:	9f 90       	pop	r9
    18ac:	8f 90       	pop	r8
    18ae:	7f 90       	pop	r7
    18b0:	5f 90       	pop	r5
    18b2:	4f 90       	pop	r4
    18b4:	3f 90       	pop	r3
    18b6:	2f 90       	pop	r2
    18b8:	08 95       	ret

000018ba <PinLayout>:
#include "Transistortester.h"


// show the Pin Layout of the device 
void PinLayout(char pin1, char pin2, char pin3) {
    18ba:	ef 92       	push	r14
    18bc:	ff 92       	push	r15
    18be:	0f 93       	push	r16
    18c0:	1f 93       	push	r17
    18c2:	18 2f       	mov	r17, r24
    18c4:	06 2f       	mov	r16, r22
    18c6:	f4 2e       	mov	r15, r20
// pin1-3 is EBC or SGD or CGA
#ifndef EBC_STYLE
   // Layout with 123= style
   uint8_t ipp;
   lcd_fix_string(N123_str);		//" 123="
    18c8:	8b e0       	ldi	r24, 0x0B	; 11
    18ca:	91 e0       	ldi	r25, 0x01	; 1
    18cc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
   for (ipp=0;ipp<3;ipp++) {
    18d0:	ee 24       	eor	r14, r14
       if (ipp == _trans->e)  lcd_data(pin1);	// Output Character in right order
    18d2:	e0 91 40 01 	lds	r30, 0x0140
    18d6:	f0 91 41 01 	lds	r31, 0x0141
    18da:	84 85       	ldd	r24, Z+12	; 0x0c
    18dc:	e8 16       	cp	r14, r24
    18de:	19 f4       	brne	.+6      	; 0x18e6 <PinLayout+0x2c>
    18e0:	81 2f       	mov	r24, r17
    18e2:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       if (ipp == _trans->b)  lcd_data(pin2);
    18e6:	e0 91 40 01 	lds	r30, 0x0140
    18ea:	f0 91 41 01 	lds	r31, 0x0141
    18ee:	82 85       	ldd	r24, Z+10	; 0x0a
    18f0:	e8 16       	cp	r14, r24
    18f2:	19 f4       	brne	.+6      	; 0x18fa <PinLayout+0x40>
    18f4:	80 2f       	mov	r24, r16
    18f6:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       if (ipp == _trans->c)  lcd_data(pin3);
    18fa:	e0 91 40 01 	lds	r30, 0x0140
    18fe:	f0 91 41 01 	lds	r31, 0x0141
    1902:	83 85       	ldd	r24, Z+11	; 0x0b
    1904:	e8 16       	cp	r14, r24
    1906:	19 f4       	brne	.+6      	; 0x190e <PinLayout+0x54>
    1908:	8f 2d       	mov	r24, r15
    190a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
// pin1-3 is EBC or SGD or CGA
#ifndef EBC_STYLE
   // Layout with 123= style
   uint8_t ipp;
   lcd_fix_string(N123_str);		//" 123="
   for (ipp=0;ipp<3;ipp++) {
    190e:	e3 94       	inc	r14
    1910:	8e 2d       	mov	r24, r14
    1912:	83 30       	cpi	r24, 0x03	; 3
    1914:	f1 f6       	brne	.-68     	; 0x18d2 <PinLayout+0x18>
   lcd_testpin(_trans->e);
   lcd_testpin(_trans->b);
   lcd_testpin(_trans->c);
 #endif
#endif
}
    1916:	1f 91       	pop	r17
    1918:	0f 91       	pop	r16
    191a:	ff 90       	pop	r15
    191c:	ef 90       	pop	r14
    191e:	08 95       	ret

00001920 <RefVoltage>:
    1920:	8f e9       	ldi	r24, 0x9F	; 159
    1922:	91 e0       	ldi	r25, 0x01	; 1
    1924:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <__eerd_word_m328p>
    1928:	20 91 39 01 	lds	r18, 0x0139
    192c:	30 91 3a 01 	lds	r19, 0x013A
    1930:	28 0f       	add	r18, r24
    1932:	39 1f       	adc	r19, r25
    1934:	83 e0       	ldi	r24, 0x03	; 3
    1936:	28 3e       	cpi	r18, 0xE8	; 232
    1938:	38 07       	cpc	r19, r24
    193a:	20 f0       	brcs	.+8      	; 0x1944 <ad210e>
    193c:	c9 01       	movw	r24, r18
    193e:	88 5e       	subi	r24, 0xE8	; 232
    1940:	93 40       	sbci	r25, 0x03	; 3
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <ad2112>

00001944 <ad210e>:
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	90 e0       	ldi	r25, 0x00	; 0

00001948 <ad2112>:
    1948:	62 e3       	ldi	r22, 0x32	; 50
    194a:	70 e0       	ldi	r23, 0x00	; 0
    194c:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <__udivmodhi4>
    1950:	68 30       	cpi	r22, 0x08	; 8
    1952:	08 f0       	brcs	.+2      	; 0x1956 <ad2120>
    1954:	67 e0       	ldi	r22, 0x07	; 7

00001956 <ad2120>:
    1956:	e6 ec       	ldi	r30, 0xC6	; 198
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	e6 0f       	add	r30, r22
    195c:	f1 1d       	adc	r31, r1
    195e:	e6 0f       	add	r30, r22
    1960:	f1 1d       	adc	r31, r1
    1962:	45 91       	lpm	r20, Z+
    1964:	55 91       	lpm	r21, Z+
    1966:	25 91       	lpm	r18, Z+
    1968:	35 91       	lpm	r19, Z+
    196a:	62 e3       	ldi	r22, 0x32	; 50
    196c:	68 1b       	sub	r22, r24
    196e:	42 1b       	sub	r20, r18
    1970:	53 0b       	sbc	r21, r19
    1972:	64 9f       	mul	r22, r20
    1974:	c0 01       	movw	r24, r0
    1976:	65 9f       	mul	r22, r21
    1978:	90 0d       	add	r25, r0
    197a:	11 24       	eor	r1, r1
    197c:	49 96       	adiw	r24, 0x19	; 25
    197e:	62 e3       	ldi	r22, 0x32	; 50
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <__udivmodhi4>
    1986:	62 0f       	add	r22, r18
    1988:	73 1f       	adc	r23, r19
    198a:	70 93 01 01 	sts	0x0101, r23
    198e:	60 93 00 01 	sts	0x0100, r22
    1992:	08 95       	ret

00001994 <wait_for_key_ms>:
#include "Transistortester.h"


/* wait max_time or previous key press */
/* return value: 1 == key is pressed, 0 == time expired */
uint8_t wait_for_key_ms(int max_time) {
    1994:	cf 93       	push	r28
    1996:	df 93       	push	r29
    1998:	ec 01       	movw	r28, r24
  // if key is pressed, return 1
  // if max_time == 0 , do not count, wait endless
  wait_about200ms();
    199a:	88 e2       	ldi	r24, 0x28	; 40
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
// wait 28 seconds or 5 seconds (if repeat function)
  while (max_time >= 0) {
    19a2:	0d c0       	rjmp	.+26     	; 0x19be <wait_for_key_ms+0x2a>
     wait_about10ms();
    19a4:	82 e0       	ldi	r24, 0x02	; 2
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    19ac:	4f 9b       	sbis	0x09, 7	; 9
    19ae:	0b c0       	rjmp	.+22     	; 0x19c6 <wait_for_key_ms+0x32>
        // If the key is pressed again... 
        // goto start of measurement 
        return(1);    // key is pressed
     }
     wdt_reset();
    19b0:	a8 95       	wdr
     if (max_time > 0) {		// count only, if counter > 0
    19b2:	20 97       	sbiw	r28, 0x00	; 0
    19b4:	21 f0       	breq	.+8      	; 0x19be <wait_for_key_ms+0x2a>
        max_time -= 10;			// 10 ms are done, count down
    19b6:	2a 97       	sbiw	r28, 0x0a	; 10
        if (max_time == 0) max_time = -1;	// never count to zero, zero is endless!
    19b8:	11 f4       	brne	.+4      	; 0x19be <wait_for_key_ms+0x2a>
    19ba:	cf ef       	ldi	r28, 0xFF	; 255
    19bc:	df ef       	ldi	r29, 0xFF	; 255
uint8_t wait_for_key_ms(int max_time) {
  // if key is pressed, return 1
  // if max_time == 0 , do not count, wait endless
  wait_about200ms();
// wait 28 seconds or 5 seconds (if repeat function)
  while (max_time >= 0) {
    19be:	d7 ff       	sbrs	r29, 7
    19c0:	f1 cf       	rjmp	.-30     	; 0x19a4 <wait_for_key_ms+0x10>
     if (max_time > 0) {		// count only, if counter > 0
        max_time -= 10;			// 10 ms are done, count down
        if (max_time == 0) max_time = -1;	// never count to zero, zero is endless!
     }
  }
 return(0);		// no key pressed within the specified time
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	01 c0       	rjmp	.+2      	; 0x19c8 <wait_for_key_ms+0x34>
  while (max_time >= 0) {
     wait_about10ms();
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
        // If the key is pressed again... 
        // goto start of measurement 
        return(1);    // key is pressed
    19c6:	81 e0       	ldi	r24, 0x01	; 1
        max_time -= 10;			// 10 ms are done, count down
        if (max_time == 0) max_time = -1;	// never count to zero, zero is endless!
     }
  }
 return(0);		// no key pressed within the specified time
}
    19c8:	df 91       	pop	r29
    19ca:	cf 91       	pop	r28
    19cc:	08 95       	ret

000019ce <wait_for_key_5s_line2>:

#ifdef WAIT_LINE2_CLEAR
/* wait 5 seconds or previous key press, then clear line 2 of LCD and */
/* set the cursor to the beginning of line 2 */
void wait_for_key_5s_line2(void) {
  wait_for_key_ms(SHORT_WAIT_TIME);
    19ce:	88 e8       	ldi	r24, 0x88	; 136
    19d0:	93 e1       	ldi	r25, 0x13	; 19
    19d2:	0e 94 ca 0c 	call	0x1994	; 0x1994 <wait_for_key_ms>
  lcd_line2(); //2. row 
    19d6:	80 ec       	ldi	r24, 0xC0	; 192
    19d8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_clear_line();		// clear the whole line
    19dc:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_clear_line>
  lcd_line2(); //2. row 
    19e0:	80 ec       	ldi	r24, 0xC0	; 192
    19e2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
}
    19e6:	08 95       	ret

000019e8 <uart_putc>:
    19e8:	2f 93       	push	r18
    19ea:	5f b7       	in	r21, 0x3f	; 63
    19ec:	2f 93       	push	r18
    19ee:	2a e0       	ldi	r18, 0x0A	; 10
    19f0:	80 95       	com	r24
    19f2:	08 94       	sec

000019f4 <putchar0>:
    19f4:	10 f4       	brcc	.+4      	; 0x19fa <putchar1>
    19f6:	43 98       	cbi	0x08, 3	; 8
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <putchar2>

000019fa <putchar1>:
    19fa:	43 9a       	sbi	0x08, 3	; 8
	...

000019fe <putchar2>:
    19fe:	22 d0       	rcall	.+68     	; 0x1a44 <wait100us>
    1a00:	29 d0       	rcall	.+82     	; 0x1a54 <wait3us>
    1a02:	86 95       	lsr	r24
    1a04:	2a 95       	dec	r18
    1a06:	b1 f7       	brne	.-20     	; 0x19f4 <putchar0>
    1a08:	2f 91       	pop	r18
    1a0a:	5f bf       	out	0x3f, r21	; 63
    1a0c:	2f 91       	pop	r18
    1a0e:	08 95       	ret

00001a10 <UART_delay1>:
    1a10:	08 95       	ret

00001a12 <wait5s>:
    1a12:	03 d0       	rcall	.+6      	; 0x1a1a <wait1000ms>

00001a14 <wait4s>:
    1a14:	02 d0       	rcall	.+4      	; 0x1a1a <wait1000ms>

00001a16 <wait3s>:
    1a16:	01 d0       	rcall	.+2      	; 0x1a1a <wait1000ms>

00001a18 <wait2s>:
    1a18:	00 d0       	rcall	.+0      	; 0x1a1a <wait1000ms>

00001a1a <wait1000ms>:
    1a1a:	00 d0       	rcall	.+0      	; 0x1a1c <wait500ms>

00001a1c <wait500ms>:
    1a1c:	03 d0       	rcall	.+6      	; 0x1a24 <wait100ms>

00001a1e <wait400ms>:
    1a1e:	02 d0       	rcall	.+4      	; 0x1a24 <wait100ms>

00001a20 <wait300ms>:
    1a20:	01 d0       	rcall	.+2      	; 0x1a24 <wait100ms>

00001a22 <wait200ms>:
    1a22:	00 d0       	rcall	.+0      	; 0x1a24 <wait100ms>

00001a24 <wait100ms>:
    1a24:	a8 95       	wdr
    1a26:	00 d0       	rcall	.+0      	; 0x1a28 <wait50ms>

00001a28 <wait50ms>:
    1a28:	03 d0       	rcall	.+6      	; 0x1a30 <wait10ms>

00001a2a <wait40ms>:
    1a2a:	02 d0       	rcall	.+4      	; 0x1a30 <wait10ms>

00001a2c <wait30ms>:
    1a2c:	01 d0       	rcall	.+2      	; 0x1a30 <wait10ms>

00001a2e <wait20ms>:
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <wait10ms>

00001a30 <wait10ms>:
    1a30:	00 d0       	rcall	.+0      	; 0x1a32 <wait5ms>

00001a32 <wait5ms>:
    1a32:	03 d0       	rcall	.+6      	; 0x1a3a <wait1ms>

00001a34 <wait4ms>:
    1a34:	02 d0       	rcall	.+4      	; 0x1a3a <wait1ms>

00001a36 <wait3ms>:
    1a36:	01 d0       	rcall	.+2      	; 0x1a3a <wait1ms>

00001a38 <wait2ms>:
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <wait1ms>

00001a3a <wait1ms>:
    1a3a:	00 d0       	rcall	.+0      	; 0x1a3c <wait500us>

00001a3c <wait500us>:
    1a3c:	03 d0       	rcall	.+6      	; 0x1a44 <wait100us>

00001a3e <wait400us>:
    1a3e:	02 d0       	rcall	.+4      	; 0x1a44 <wait100us>

00001a40 <wait300us>:
    1a40:	01 d0       	rcall	.+2      	; 0x1a44 <wait100us>

00001a42 <wait200us>:
    1a42:	00 d0       	rcall	.+0      	; 0x1a44 <wait100us>

00001a44 <wait100us>:
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <wait50us>

00001a46 <wait50us>:
    1a46:	03 d0       	rcall	.+6      	; 0x1a4e <wait10us>

00001a48 <wait40us>:
    1a48:	02 d0       	rcall	.+4      	; 0x1a4e <wait10us>

00001a4a <wait30us>:
    1a4a:	01 d0       	rcall	.+2      	; 0x1a4e <wait10us>

00001a4c <wait20us>:
    1a4c:	00 d0       	rcall	.+0      	; 0x1a4e <wait10us>

00001a4e <wait10us>:
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <wait5us>

00001a50 <wait5us>:
    1a50:	03 d0       	rcall	.+6      	; 0x1a58 <wait1us>

00001a52 <wait4us>:
    1a52:	02 d0       	rcall	.+4      	; 0x1a58 <wait1us>

00001a54 <wait3us>:
    1a54:	01 d0       	rcall	.+2      	; 0x1a58 <wait1us>

00001a56 <wait2us>:
    1a56:	00 d0       	rcall	.+0      	; 0x1a58 <wait1us>

00001a58 <wait1us>:
    1a58:	00 00       	nop
    1a5a:	08 95       	ret

00001a5c <Scale_C_with_vcc>:
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
  return;
 } // end ReadCapacity()


void Scale_C_with_vcc(void) {
    1a5c:	8f 92       	push	r8
    1a5e:	9f 92       	push	r9
    1a60:	af 92       	push	r10
    1a62:	bf 92       	push	r11
    1a64:	df 92       	push	r13
    1a66:	ef 92       	push	r14
    1a68:	ff 92       	push	r15
    1a6a:	0f 93       	push	r16
    1a6c:	1f 93       	push	r17
    1a6e:	e0 90 6a 01 	lds	r14, 0x016A
    1a72:	f0 90 6b 01 	lds	r15, 0x016B
    1a76:	00 91 6c 01 	lds	r16, 0x016C
    1a7a:	10 91 6d 01 	lds	r17, 0x016D
    1a7e:	d0 90 7c 01 	lds	r13, 0x017C
   while (cap.cval > 100000) {
      cap.cval /= 10;
    1a82:	8a e0       	ldi	r24, 0x0A	; 10
    1a84:	88 2e       	mov	r8, r24
    1a86:	91 2c       	mov	r9, r1
    1a88:	a1 2c       	mov	r10, r1
    1a8a:	b1 2c       	mov	r11, r1
  return;
 } // end ReadCapacity()


void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    1a8c:	08 c0       	rjmp	.+16     	; 0x1a9e <Scale_C_with_vcc+0x42>
      cap.cval /= 10;
    1a8e:	c8 01       	movw	r24, r16
    1a90:	b7 01       	movw	r22, r14
    1a92:	a5 01       	movw	r20, r10
    1a94:	94 01       	movw	r18, r8
    1a96:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    1a9a:	79 01       	movw	r14, r18
    1a9c:	8a 01       	movw	r16, r20
    1a9e:	8d 2d       	mov	r24, r13
    1aa0:	d3 94       	inc	r13
  return;
 } // end ReadCapacity()


void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    1aa2:	91 ea       	ldi	r25, 0xA1	; 161
    1aa4:	e9 16       	cp	r14, r25
    1aa6:	96 e8       	ldi	r25, 0x86	; 134
    1aa8:	f9 06       	cpc	r15, r25
    1aaa:	91 e0       	ldi	r25, 0x01	; 1
    1aac:	09 07       	cpc	r16, r25
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	19 07       	cpc	r17, r25
    1ab2:	68 f7       	brcc	.-38     	; 0x1a8e <Scale_C_with_vcc+0x32>
    1ab4:	80 93 7c 01 	sts	0x017C, r24
      cap.cval /= 10;
      cap.cpre ++;			// prevent overflow
   }
   cap.cval *= ADCconfig.U_AVCC;	// scale with measured voltage
    1ab8:	20 91 35 01 	lds	r18, 0x0135
    1abc:	30 91 36 01 	lds	r19, 0x0136
    1ac0:	40 e0       	ldi	r20, 0x00	; 0
    1ac2:	50 e0       	ldi	r21, 0x00	; 0
    1ac4:	c8 01       	movw	r24, r16
    1ac6:	b7 01       	movw	r22, r14
    1ac8:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
    1acc:	28 e8       	ldi	r18, 0x88	; 136
    1ace:	33 e1       	ldi	r19, 0x13	; 19
    1ad0:	40 e0       	ldi	r20, 0x00	; 0
    1ad2:	50 e0       	ldi	r21, 0x00	; 0
    1ad4:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    1ad8:	20 93 6a 01 	sts	0x016A, r18
    1adc:	30 93 6b 01 	sts	0x016B, r19
    1ae0:	40 93 6c 01 	sts	0x016C, r20
    1ae4:	50 93 6d 01 	sts	0x016D, r21
}
    1ae8:	1f 91       	pop	r17
    1aea:	0f 91       	pop	r16
    1aec:	ff 90       	pop	r15
    1aee:	ef 90       	pop	r14
    1af0:	df 90       	pop	r13
    1af2:	bf 90       	pop	r11
    1af4:	af 90       	pop	r10
    1af6:	9f 90       	pop	r9
    1af8:	8f 90       	pop	r8
    1afa:	08 95       	ret

00001afc <ReadCapacity>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    1afc:	7f 92       	push	r7
    1afe:	8f 92       	push	r8
    1b00:	9f 92       	push	r9
    1b02:	af 92       	push	r10
    1b04:	bf 92       	push	r11
    1b06:	cf 92       	push	r12
    1b08:	df 92       	push	r13
    1b0a:	ef 92       	push	r14
    1b0c:	ff 92       	push	r15
    1b0e:	0f 93       	push	r16
    1b10:	1f 93       	push	r17
    1b12:	cf 93       	push	r28
    1b14:	df 93       	push	r29
    1b16:	18 2f       	mov	r17, r24
    1b18:	76 2e       	mov	r7, r22
#if FLASHEND > 0x1fff
  unsigned int vloss;	// lost voltage after load pulse in 0.1% 
#endif

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
    1b1a:	88 0f       	add	r24, r24
    1b1c:	81 0f       	add	r24, r17
    1b1e:	86 0f       	add	r24, r22
    1b20:	81 50       	subi	r24, 0x01	; 1
    1b22:	80 93 51 01 	sts	0x0151, r24
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    1b26:	e6 2f       	mov	r30, r22
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	e3 51       	subi	r30, 0x13	; 19
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	04 91       	lpm	r16, Z+
  HiPinR_L = pgm_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
    1b30:	e1 2f       	mov	r30, r17
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	e6 51       	subi	r30, 0x16	; 22
    1b36:	ff 4f       	sbci	r31, 0xFF	; 255
    1b38:	a4 90       	lpm	r10, Z+
  lcd_testpin(LowPin);
  lcd_data('C');
  lcd_testpin(HighPin);
  lcd_space();
#endif
  if(PartFound == PART_RESISTOR) {
    1b3a:	80 91 07 01 	lds	r24, 0x0107
    1b3e:	81 30       	cpi	r24, 0x01	; 1
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <ReadCapacity+0x48>
    1b42:	98 c2       	rjmp	.+1328   	; 0x2074 <ReadCapacity+0x578>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    1b44:	30 91 05 01 	lds	r19, 0x0105
    1b48:	a6 e8       	ldi	r26, 0x86	; 134
    1b4a:	b1 e0       	ldi	r27, 0x01	; 1
    1b4c:	ed 01       	movw	r28, r26
    1b4e:	26 96       	adiw	r28, 0x06	; 6
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	11 c0       	rjmp	.+34     	; 0x1b76 <ReadCapacity+0x7a>
     if ((diodes.Cathode[ii] == LowPin) && (diodes.Anode[ii] == HighPin) && (diodes.Voltage[ii] < 1500)) {
    1b54:	8d 91       	ld	r24, X+
    1b56:	87 15       	cp	r24, r7
    1b58:	61 f4       	brne	.+24     	; 0x1b72 <ReadCapacity+0x76>
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    1b5a:	fd 01       	movw	r30, r26
    1b5c:	37 97       	sbiw	r30, 0x07	; 7
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
     if ((diodes.Cathode[ii] == LowPin) && (diodes.Anode[ii] == HighPin) && (diodes.Voltage[ii] < 1500)) {
    1b5e:	80 81       	ld	r24, Z
    1b60:	81 17       	cp	r24, r17
    1b62:	39 f4       	brne	.+14     	; 0x1b72 <ReadCapacity+0x76>
    1b64:	88 81       	ld	r24, Y
    1b66:	99 81       	ldd	r25, Y+1	; 0x01
    1b68:	45 e0       	ldi	r20, 0x05	; 5
    1b6a:	8c 3d       	cpi	r24, 0xDC	; 220
    1b6c:	94 07       	cpc	r25, r20
    1b6e:	08 f4       	brcc	.+2      	; 0x1b72 <ReadCapacity+0x76>
    1b70:	81 c2       	rjmp	.+1282   	; 0x2074 <ReadCapacity+0x578>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    1b72:	2f 5f       	subi	r18, 0xFF	; 255
    1b74:	22 96       	adiw	r28, 0x02	; 2
    1b76:	23 17       	cp	r18, r19
    1b78:	68 f3       	brcs	.-38     	; 0x1b54 <ReadCapacity+0x58>

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    1b7a:	08 60       	ori	r16, 0x08	; 8
        return;
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
    1b7c:	10 92 77 01 	sts	0x0177, r1
    1b80:	10 92 76 01 	sts	0x0176, r1
  vloss = 0;				// set lost voltage to zero
#endif
  cap.cval = 0;				// set capacity value to zero
    1b84:	10 92 6a 01 	sts	0x016A, r1
    1b88:	10 92 6b 01 	sts	0x016B, r1
    1b8c:	10 92 6c 01 	sts	0x016C, r1
    1b90:	10 92 6d 01 	sts	0x016D, r1
  cap.cpre = -12;			//default unit is pF
    1b94:	84 ef       	ldi	r24, 0xF4	; 244
    1b96:	80 93 7c 01 	sts	0x017C, r24
  EntladePins();			// discharge capacitor
    1b9a:	0e 94 0c 0b 	call	0x1618	; 0x1618 <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    1b9e:	88 e0       	ldi	r24, 0x08	; 8
    1ba0:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    1ba2:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    1ba4:	07 b9       	out	0x07, r16	; 7
//  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  R_DDR = 0;				// set all R Ports to input (no current)
    1ba6:	14 b8       	out	0x04, r1	; 4
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    1ba8:	81 2f       	mov	r24, r17
    1baa:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
    1bae:	7c 01       	movw	r14, r24
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    1bb0:	10 92 53 01 	sts	0x0153, r1
    1bb4:	10 92 52 01 	sts	0x0152, r1
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
  R_PORT = 0;				// switch R-Port to GND
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
//  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  R_DDR = 0;				// set all R Ports to input (no current)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    1bb8:	ec 01       	movw	r28, r24
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    1bba:	2d c0       	rjmp	.+90     	; 0x1c16 <ReadCapacity+0x11a>
     R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    1bbc:	a5 b8       	out	0x05, r10	; 5
     R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    1bbe:	a4 b8       	out	0x04, r10	; 4
     wait10ms();			// wait exactly 10ms, do not sleep
    1bc0:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <wait10ms>
     R_DDR = 0;				// switch back to input
    1bc4:	14 b8       	out	0x04, r1	; 4
     R_PORT = 0;			// no Pull up
    1bc6:	15 b8       	out	0x05, r1	; 5
     wait500us();			//wait a little time
    1bc8:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <wait500us>
     wdt_reset();
    1bcc:	a8 95       	wdr
     // read voltage without current, is already charged enough?
     adcv[2] = ReadADC(HighPin);
    1bce:	81 2f       	mov	r24, r17
    1bd0:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
     if (adcv[2] > adcv[0]) {
    1bd4:	e8 16       	cp	r14, r24
    1bd6:	f9 06       	cpc	r15, r25
    1bd8:	20 f4       	brcc	.+8      	; 0x1be2 <ReadCapacity+0xe6>
        adcv[2] -= adcv[0];		//difference to beginning voltage
    1bda:	ec 01       	movw	r28, r24
    1bdc:	ce 19       	sub	r28, r14
    1bde:	df 09       	sbc	r29, r15
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <ReadCapacity+0xea>
     } else {
        adcv[2] = 0;			// voltage is lower or same as beginning voltage
    1be2:	c0 e0       	ldi	r28, 0x00	; 0
    1be4:	d0 e0       	ldi	r29, 0x00	; 0
     }
     if ((ovcnt16 == 126) && (adcv[2] < 75)) {
    1be6:	80 91 52 01 	lds	r24, 0x0152
    1bea:	90 91 53 01 	lds	r25, 0x0153
    1bee:	8e 37       	cpi	r24, 0x7E	; 126
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	21 f4       	brne	.+8      	; 0x1bfc <ReadCapacity+0x100>
    1bf4:	cb 34       	cpi	r28, 0x4B	; 75
    1bf6:	d1 05       	cpc	r29, r1
    1bf8:	08 f4       	brcc	.+2      	; 0x1bfc <ReadCapacity+0x100>
    1bfa:	37 c2       	rjmp	.+1134   	; 0x206a <ReadCapacity+0x56e>
        // 300mV can not be reached well-timed 
        break;		// don't try to load any more
     }
     if (adcv[2] > 300) {
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	cd 32       	cpi	r28, 0x2D	; 45
    1c00:	d8 07       	cpc	r29, r24
    1c02:	b0 f4       	brcc	.+44     	; 0x1c30 <ReadCapacity+0x134>
//  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  R_DDR = 0;				// set all R Ports to input (no current)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    1c04:	80 91 52 01 	lds	r24, 0x0152
    1c08:	90 91 53 01 	lds	r25, 0x0153
    1c0c:	01 96       	adiw	r24, 0x01	; 1
    1c0e:	90 93 53 01 	sts	0x0153, r25
    1c12:	80 93 52 01 	sts	0x0152, r24
    1c16:	80 91 52 01 	lds	r24, 0x0152
    1c1a:	90 91 53 01 	lds	r25, 0x0153
    1c1e:	21 e0       	ldi	r18, 0x01	; 1
    1c20:	84 3f       	cpi	r24, 0xF4	; 244
    1c22:	92 07       	cpc	r25, r18
    1c24:	58 f2       	brcs	.-106    	; 0x1bbc <ReadCapacity+0xc0>
//  wdt_reset();
#if DebugOut == 10
  DisplayValue(ovcnt16,0,' ',4);
  DisplayValue(adcv[2],-3,'V',4);
#endif
  if (adcv[2] < 301) {
    1c26:	41 e0       	ldi	r20, 0x01	; 1
    1c28:	cd 32       	cpi	r28, 0x2D	; 45
    1c2a:	d4 07       	cpc	r29, r20
    1c2c:	08 f4       	brcc	.+2      	; 0x1c30 <ReadCapacity+0x134>
    1c2e:	1d c2       	rjmp	.+1082   	; 0x206a <ReadCapacity+0x56e>
#endif
//     if (NumOfDiodes != 0) goto messe_mit_rh; /* ****************************** */
     goto keinC;		// was never charged enough, >100mF or shorted
  }
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    1c30:	80 91 52 01 	lds	r24, 0x0152
    1c34:	90 91 53 01 	lds	r25, 0x0153
    1c38:	00 97       	sbiw	r24, 0x00	; 0
    1c3a:	81 f4       	brne	.+32     	; 0x1c5c <ReadCapacity+0x160>
    1c3c:	85 e0       	ldi	r24, 0x05	; 5
    1c3e:	c5 31       	cpi	r28, 0x15	; 21
    1c40:	d8 07       	cpc	r29, r24
    1c42:	08 f0       	brcs	.+2      	; 0x1c46 <ReadCapacity+0x14a>
    1c44:	92 c0       	rjmp	.+292    	; 0x1d6a <ReadCapacity+0x26e>
    1c46:	0a c0       	rjmp	.+20     	; 0x1c5c <ReadCapacity+0x160>
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
     wait5ms();
    1c48:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <wait5ms>
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
    1c4c:	81 2f       	mov	r24, r17
    1c4e:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
     wdt_reset();
    1c52:	a8 95       	wdr
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    1c54:	08 94       	sec
    1c56:	c1 1c       	adc	r12, r1
    1c58:	d1 1c       	adc	r13, r1
    1c5a:	03 c0       	rjmp	.+6      	; 0x1c62 <ReadCapacity+0x166>
#endif
//     if (NumOfDiodes != 0) goto messe_mit_rh; /* ****************************** */
     goto keinC;		// was never charged enough, >100mF or shorted
  }
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    1c5c:	ce 01       	movw	r24, r28
    1c5e:	cc 24       	eor	r12, r12
    1c60:	dd 24       	eor	r13, r13
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    1c62:	20 91 52 01 	lds	r18, 0x0152
    1c66:	30 91 53 01 	lds	r19, 0x0153
    1c6a:	2c 15       	cp	r18, r12
    1c6c:	3d 05       	cpc	r19, r13
    1c6e:	60 f7       	brcc	.-40     	; 0x1c48 <ReadCapacity+0x14c>
     wait5ms();
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
    1c70:	e8 16       	cp	r14, r24
    1c72:	f9 06       	cpc	r15, r25
    1c74:	30 f4       	brcc	.+12     	; 0x1c82 <ReadCapacity+0x186>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    1c76:	8e 19       	sub	r24, r14
    1c78:	9f 09       	sbc	r25, r15
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    1c7a:	8c 17       	cp	r24, r28
    1c7c:	9d 07       	cpc	r25, r29
    1c7e:	10 f5       	brcc	.+68     	; 0x1cc4 <ReadCapacity+0x1c8>
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <ReadCapacity+0x18a>
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
    1c86:	7e 01       	movw	r14, r28
    1c88:	e8 1a       	sub	r14, r24
    1c8a:	f9 0a       	sbc	r15, r25
  } else {
     adcv[3] = 0;			// no lost voltage
  }
#if FLASHEND > 0x1fff
  // compute equivalent parallel resistance from voltage drop
  if (adcv[3] > 0) {
    1c8c:	e9 f0       	breq	.+58     	; 0x1cc8 <ReadCapacity+0x1cc>
     // there is any voltage drop (adcv[3]) !
     // adcv[2] is the loaded voltage.
     vloss = (unsigned long)(adcv[3] * 1000UL) / adcv[2];
    1c8e:	b7 01       	movw	r22, r14
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	28 ee       	ldi	r18, 0xE8	; 232
    1c96:	33 e0       	ldi	r19, 0x03	; 3
    1c98:	40 e0       	ldi	r20, 0x00	; 0
    1c9a:	50 e0       	ldi	r21, 0x00	; 0
    1c9c:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
    1ca0:	9e 01       	movw	r18, r28
    1ca2:	40 e0       	ldi	r20, 0x00	; 0
    1ca4:	50 e0       	ldi	r21, 0x00	; 0
    1ca6:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    1caa:	49 01       	movw	r8, r18
  }
#endif
  if (adcv[3] > 100) {
    1cac:	25 e6       	ldi	r18, 0x65	; 101
    1cae:	e2 16       	cp	r14, r18
    1cb0:	f1 04       	cpc	r15, r1
    1cb2:	60 f0       	brcs	.+24     	; 0x1ccc <ReadCapacity+0x1d0>
 #if DebugOut == 10
     lcd_data('L');
     lcd_space();
     wait_about1s();
 #endif
     if (ovcnt16 == 0 )  {
    1cb4:	80 91 52 01 	lds	r24, 0x0152
    1cb8:	90 91 53 01 	lds	r25, 0x0153
    1cbc:	00 97       	sbiw	r24, 0x00	; 0
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <ReadCapacity+0x1c6>
    1cc0:	56 c0       	rjmp	.+172    	; 0x1d6e <ReadCapacity+0x272>
    1cc2:	d3 c1       	rjmp	.+934    	; 0x206a <ReadCapacity+0x56e>
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    1cc4:	ee 24       	eor	r14, r14
    1cc6:	ff 24       	eor	r15, r15
  } else {
     adcv[3] = 0;			// no lost voltage
  }
#if FLASHEND > 0x1fff
  // compute equivalent parallel resistance from voltage drop
  if (adcv[3] > 0) {
    1cc8:	88 24       	eor	r8, r8
    1cca:	99 24       	eor	r9, r9
     if (ovcnt16 == 0 )  {
        goto messe_mit_rh;		// Voltage of more than 1300mV is reached in one pulse, but not hold
     }
     goto keinC;			// capacitor does not keep the voltage about 5ms
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
    1ccc:	a0 90 52 01 	lds	r10, 0x0152
    1cd0:	b0 90 53 01 	lds	r11, 0x0153
    1cd4:	08 94       	sec
    1cd6:	a1 1c       	adc	r10, r1
    1cd8:	b1 1c       	adc	r11, r1
    1cda:	cc 24       	eor	r12, r12
    1cdc:	dd 24       	eor	r13, r13
    1cde:	a0 92 72 01 	sts	0x0172, r10
    1ce2:	b0 92 73 01 	sts	0x0173, r11
    1ce6:	c0 92 74 01 	sts	0x0174, r12
    1cea:	d0 92 75 01 	sts	0x0175, r13
  // compute factor with load voltage + lost voltage during the voltage load time
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]+adcv[3]);	// get factor to convert time to capacity from table
    1cee:	c7 01       	movw	r24, r14
    1cf0:	8c 0f       	add	r24, r28
    1cf2:	9d 1f       	adc	r25, r29
    1cf4:	0e 94 90 10 	call	0x2120	; 0x2120 <getRLmultip>
    1cf8:	bc 01       	movw	r22, r24
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	a6 01       	movw	r20, r12
    1d00:	95 01       	movw	r18, r10
    1d02:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
    1d06:	60 93 72 01 	sts	0x0172, r22
    1d0a:	70 93 73 01 	sts	0x0173, r23
    1d0e:	80 93 74 01 	sts	0x0174, r24
    1d12:	90 93 75 01 	sts	0x0175, r25
#endif
   cap.cval = cap.cval_uncorrected.dw;	// set result to uncorrected
    1d16:	60 93 6a 01 	sts	0x016A, r22
    1d1a:	70 93 6b 01 	sts	0x016B, r23
    1d1e:	80 93 6c 01 	sts	0x016C, r24
    1d22:	90 93 6d 01 	sts	0x016D, r25
   cap.cpre = -9;		// switch units to nF 
    1d26:	87 ef       	ldi	r24, 0xF7	; 247
    1d28:	80 93 7c 01 	sts	0x017C, r24
   Scale_C_with_vcc();
    1d2c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <Scale_C_with_vcc>
   // cap.cval for this type is at least 40000nF, so the last digit will be never shown
   cap.cval *= (1000 - C_H_KORR);	// correct with C_H_KORR with 0.1% resolution, but prevent overflow
    1d30:	60 91 6a 01 	lds	r22, 0x016A
    1d34:	70 91 6b 01 	lds	r23, 0x016B
    1d38:	80 91 6c 01 	lds	r24, 0x016C
    1d3c:	90 91 6d 01 	lds	r25, 0x016D
    1d40:	28 ee       	ldi	r18, 0xE8	; 232
    1d42:	33 e0       	ldi	r19, 0x03	; 3
    1d44:	40 e0       	ldi	r20, 0x00	; 0
    1d46:	50 e0       	ldi	r21, 0x00	; 0
    1d48:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
   cap.cval /= 100;
    1d4c:	24 e6       	ldi	r18, 0x64	; 100
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	40 e0       	ldi	r20, 0x00	; 0
    1d52:	50 e0       	ldi	r21, 0x00	; 0
    1d54:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    1d58:	20 93 6a 01 	sts	0x016A, r18
    1d5c:	30 93 6b 01 	sts	0x016B, r19
    1d60:	40 93 6c 01 	sts	0x016C, r20
    1d64:	50 93 6d 01 	sts	0x016D, r21
   DisplayValue(cap.cval,cap.cpre,'F',4);
   lcd_space();
   lcd_string(utoa(ovcnt16,outval,10));
   wait_about3s();
#endif
   goto checkDiodes;
    1d68:	41 c1       	rjmp	.+642    	; 0x1fec <ReadCapacity+0x4f0>
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
  vloss = 0;				// set lost voltage to zero
    1d6a:	88 24       	eor	r8, r8
    1d6c:	99 24       	eor	r9, r9
  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
  HiPinR_L = pgm_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
#if FLASEND > 0x3fff
  HiPinR_H = pgm_read_byte(&PinRHtab[HighPin]);	//R_H mask for HighPin R_H load
#else
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load
    1d6e:	ea 2c       	mov	r14, r10
    1d70:	ee 0c       	add	r14, r14

//==================================================================================
// Measurement of little capacity values
messe_mit_rh:
  //little capacity value, about  < 50 µF
  EntladePins();			// discharge capacitor
    1d72:	0e 94 0c 0b 	call	0x1618	; 0x1618 <EntladePins>
  //measure with the R_H (470kOhm) resistor 
  R_PORT = 0;		// R_DDR ist HiPinR_L
    1d76:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = (1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK;	//switch all Pins to output
    1d78:	8f e0       	ldi	r24, 0x0F	; 15
    1d7a:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		//switch all ADC Pins to GND
    1d7c:	88 e0       	ldi	r24, 0x08	; 8
    1d7e:	88 b9       	out	0x08, r24	; 8
  R_DDR = HiPinR_H;   		// switch R_H resistor port for HighPin to output (GND)
    1d80:	e4 b8       	out	0x04, r14	; 4
// setup Analog Comparator
  ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    1d82:	80 e4       	ldi	r24, 0x40	; 64
    1d84:	80 93 7b 00 	sts	0x007B, r24
  ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    1d88:	84 e5       	ldi	r24, 0x54	; 84
    1d8a:	80 bf       	out	0x30, r24	; 48
  ADMUX = (1<<REFS0) | HighPin;			// switch Mux to High-Pin
    1d8c:	81 2f       	mov	r24, r17
    1d8e:	80 64       	ori	r24, 0x40	; 64
    1d90:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    1d94:	86 e1       	ldi	r24, 0x16	; 22
    1d96:	80 93 7a 00 	sts	0x007A, r24
  wait200us();			//wait for bandgap to start up
    1d9a:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <wait200us>

// setup Counter1
  ovcnt16 = 0;
    1d9e:	10 92 53 01 	sts	0x0153, r1
    1da2:	10 92 52 01 	sts	0x0152, r1
  TCCR1A = 0;			// set Counter1 to normal Mode
    1da6:	10 92 80 00 	sts	0x0080, r1
  TCNT1 = 0;			//set Counter to 0
    1daa:	10 92 85 00 	sts	0x0085, r1
    1dae:	10 92 84 00 	sts	0x0084, r1
  TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// clear interrupt flags
    1db2:	87 e2       	ldi	r24, 0x27	; 39
    1db4:	86 bb       	out	0x16, r24	; 22
#ifndef INHIBIT_SLEEP_MODE
  TIMSK1 = (1<<TOIE1) | (1<<ICIE1);	// enable Timer overflow interrupt and input capture interrupt
    1db6:	81 e2       	ldi	r24, 0x21	; 33
    1db8:	80 93 6f 00 	sts	0x006F, r24
  unfinished = 1;
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	80 93 69 01 	sts	0x0169, r24
#endif
  R_PORT = HiPinR_H;           	// switch R_H resistor port for HighPin to VCC
    1dc2:	e5 b8       	out	0x05, r14	; 5
  if(PartFound == PART_FET) {
    1dc4:	90 91 07 01 	lds	r25, 0x0107
    1dc8:	94 30       	cpi	r25, 0x04	; 4
    1dca:	71 f4       	brne	.+28     	; 0x1de8 <ReadCapacity+0x2ec>
     // charge capacitor with R_H resistor
     TCCR1B = (0<<ICNC1) | (1<<CS10);	//Start counter 1MHz or 8MHz without Noise Canceler
    1dcc:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = (((1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK) & ~(1<<HighPin));	// release only HighPin ADC port
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	01 2e       	mov	r0, r17
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <ReadCapacity+0x2e0>
    1dd8:	88 0f       	add	r24, r24
    1dda:	99 1f       	adc	r25, r25
    1ddc:	0a 94       	dec	r0
    1dde:	e2 f7       	brpl	.-8      	; 0x1dd8 <ReadCapacity+0x2dc>
    1de0:	80 95       	com	r24
    1de2:	8f 70       	andi	r24, 0x0F	; 15
    1de4:	87 b9       	out	0x07, r24	; 7
    1de6:	03 c0       	rjmp	.+6      	; 0x1dee <ReadCapacity+0x2f2>
  } else {
     TCCR1B =  (0<<ICNC1) | (1<<CS10);	//start counter 1MHz or 8MHz without Noise Canceler
    1de8:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
    1dec:	07 b9       	out	0x07, r16	; 7
     // this OV was not counted, but was before the Input Capture
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
     ovcnt16++;
  }
#else
  cli();		// disable interrupts to prevent wakeup Interrupts before sleeping
    1dee:	f8 94       	cli
  set_sleep_mode(SLEEP_MODE_IDLE);
    1df0:	83 b7       	in	r24, 0x33	; 51
    1df2:	81 7f       	andi	r24, 0xF1	; 241
    1df4:	83 bf       	out	0x33, r24	; 51
  while(unfinished) {
    1df6:	12 c0       	rjmp	.+36     	; 0x1e1c <ReadCapacity+0x320>
    sleep_enable();
    1df8:	83 b7       	in	r24, 0x33	; 51
    1dfa:	81 60       	ori	r24, 0x01	; 1
    1dfc:	83 bf       	out	0x33, r24	; 51
    sei();		// enable interrupts after next instruction
    1dfe:	78 94       	sei
    sleep_cpu();	// only enable interrupts during sleeping
    1e00:	88 95       	sleep
    sleep_disable();
    1e02:	83 b7       	in	r24, 0x33	; 51
    1e04:	8e 7f       	andi	r24, 0xFE	; 254
    1e06:	83 bf       	out	0x33, r24	; 51
    cli();		// disable interrupts again
    1e08:	f8 94       	cli
    wdt_reset();	// reset watch dog during waiting
    1e0a:	a8 95       	wdr
    if(ovcnt16 == (F_CPU/5000)) {
    1e0c:	80 91 52 01 	lds	r24, 0x0152
    1e10:	90 91 53 01 	lds	r25, 0x0153
    1e14:	46 e0       	ldi	r20, 0x06	; 6
    1e16:	80 34       	cpi	r24, 0x40	; 64
    1e18:	94 07       	cpc	r25, r20
    1e1a:	21 f0       	breq	.+8      	; 0x1e24 <ReadCapacity+0x328>
     ovcnt16++;
  }
#else
  cli();		// disable interrupts to prevent wakeup Interrupts before sleeping
  set_sleep_mode(SLEEP_MODE_IDLE);
  while(unfinished) {
    1e1c:	80 91 69 01 	lds	r24, 0x0169
    1e20:	88 23       	and	r24, r24
    1e22:	51 f7       	brne	.-44     	; 0x1df8 <ReadCapacity+0x2fc>
    wdt_reset();	// reset watch dog during waiting
    if(ovcnt16 == (F_CPU/5000)) {
       break; 		//Timeout for Charging, above 12 s
    }
  }
  sei();		// enable interrupts again
    1e24:	78 94       	sei
  TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    1e26:	10 92 81 00 	sts	0x0081, r1
  tmpint = ICR1;		// get previous Input Capture Counter flag
    1e2a:	c0 91 86 00 	lds	r28, 0x0086
    1e2e:	d0 91 87 00 	lds	r29, 0x0087
  TIMSK1 = (0<<TOIE1) | (0<<ICIE1);	// disable Timer overflow interrupt and input capture interrupt
    1e32:	10 92 6f 00 	sts	0x006F, r1
    lcd_string(utoa(tmpint,outval,10));
  }
#endif

//############################################################
  ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    1e36:	86 e9       	ldi	r24, 0x96	; 150
    1e38:	80 93 7a 00 	sts	0x007A, r24
  R_DDR = 0;			// switch R_H resistor port for input
    1e3c:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// switch R_H resistor port pull up for HighPin off
    1e3e:	15 b8       	out	0x05, r1	; 5
  adcv[2] = ReadADC(HighPin);   // get loaded voltage
    1e40:	81 2f       	mov	r24, r17
    1e42:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
  load_diff = adcv[2] + REF_C_KORR - ref_mv;	// build difference of capacitor voltage to Reference Voltage
    1e46:	20 91 39 01 	lds	r18, 0x0139
    1e4a:	30 91 3a 01 	lds	r19, 0x013A
    1e4e:	82 1b       	sub	r24, r18
    1e50:	93 0b       	sbc	r25, r19
    1e52:	0c 96       	adiw	r24, 0x0c	; 12
    1e54:	90 93 7f 01 	sts	0x017F, r25
    1e58:	80 93 7e 01 	sts	0x017E, r24
//############################################################
  if (ovcnt16 >= (F_CPU/10000)) {
    1e5c:	80 91 52 01 	lds	r24, 0x0152
    1e60:	90 91 53 01 	lds	r25, 0x0153
    1e64:	23 e0       	ldi	r18, 0x03	; 3
    1e66:	80 32       	cpi	r24, 0x20	; 32
    1e68:	92 07       	cpc	r25, r18
    1e6a:	08 f0       	brcs	.+2      	; 0x1e6e <ReadCapacity+0x372>
    1e6c:	fe c0       	rjmp	.+508    	; 0x206a <ReadCapacity+0x56e>
     wait_about1s();
#endif
     goto keinC;	// no normal end
  }
//  cap.cval_uncorrected = CombineII2Long(ovcnt16, tmpint);
  cap.cval_uncorrected.w[1] = ovcnt16;
    1e6e:	80 91 52 01 	lds	r24, 0x0152
    1e72:	90 91 53 01 	lds	r25, 0x0153
    1e76:	90 93 75 01 	sts	0x0175, r25
    1e7a:	80 93 74 01 	sts	0x0174, r24
  cap.cval_uncorrected.w[0] = tmpint;
    1e7e:	d0 93 73 01 	sts	0x0173, r29
    1e82:	c0 93 72 01 	sts	0x0172, r28

  cap.cpre = -12;			// cap.cval unit is pF 
    1e86:	84 ef       	ldi	r24, 0xF4	; 244
    1e88:	80 93 7c 01 	sts	0x017C, r24
  if (ovcnt16 > 65) {
    1e8c:	80 91 52 01 	lds	r24, 0x0152
    1e90:	90 91 53 01 	lds	r25, 0x0153
    1e94:	82 34       	cpi	r24, 0x42	; 66
    1e96:	91 05       	cpc	r25, r1
    1e98:	c8 f0       	brcs	.+50     	; 0x1ecc <ReadCapacity+0x3d0>
     cap.cval_uncorrected.dw /= 100;	// switch to next unit
    1e9a:	60 91 72 01 	lds	r22, 0x0172
    1e9e:	70 91 73 01 	lds	r23, 0x0173
    1ea2:	80 91 74 01 	lds	r24, 0x0174
    1ea6:	90 91 75 01 	lds	r25, 0x0175
    1eaa:	24 e6       	ldi	r18, 0x64	; 100
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	40 e0       	ldi	r20, 0x00	; 0
    1eb0:	50 e0       	ldi	r21, 0x00	; 0
    1eb2:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    1eb6:	20 93 72 01 	sts	0x0172, r18
    1eba:	30 93 73 01 	sts	0x0173, r19
    1ebe:	40 93 74 01 	sts	0x0174, r20
    1ec2:	50 93 75 01 	sts	0x0175, r21
     cap.cpre += 2;			// set unit, prevent overflow
    1ec6:	86 ef       	ldi	r24, 0xF6	; 246
    1ec8:	80 93 7c 01 	sts	0x017C, r24
  }
  cap.cval_uncorrected.dw *= RHmultip;		// 708
    1ecc:	60 91 00 01 	lds	r22, 0x0100
    1ed0:	70 91 01 01 	lds	r23, 0x0101
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	20 91 72 01 	lds	r18, 0x0172
    1edc:	30 91 73 01 	lds	r19, 0x0173
    1ee0:	40 91 74 01 	lds	r20, 0x0174
    1ee4:	50 91 75 01 	lds	r21, 0x0175
    1ee8:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
  cap.cval_uncorrected.dw /= (F_CPU / 10000);	// divide by 100 (@ 1MHz clock), 800 (@ 8MHz clock)
    1eec:	20 e2       	ldi	r18, 0x20	; 32
    1eee:	33 e0       	ldi	r19, 0x03	; 3
    1ef0:	40 e0       	ldi	r20, 0x00	; 0
    1ef2:	50 e0       	ldi	r21, 0x00	; 0
    1ef4:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    1ef8:	20 93 72 01 	sts	0x0172, r18
    1efc:	30 93 73 01 	sts	0x0173, r19
    1f00:	40 93 74 01 	sts	0x0174, r20
    1f04:	50 93 75 01 	sts	0x0175, r21
  cap.cval = cap.cval_uncorrected.dw;		// set the corrected cap.cval
    1f08:	ea e6       	ldi	r30, 0x6A	; 106
    1f0a:	f1 e0       	ldi	r31, 0x01	; 1
    1f0c:	20 93 6a 01 	sts	0x016A, r18
    1f10:	31 83       	std	Z+1, r19	; 0x01
    1f12:	42 83       	std	Z+2, r20	; 0x02
    1f14:	53 83       	std	Z+3, r21	; 0x03
  Scale_C_with_vcc();
    1f16:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <Scale_C_with_vcc>
  if (cap.cpre == -12) {
    1f1a:	80 91 7c 01 	lds	r24, 0x017C
    1f1e:	84 3f       	cpi	r24, 0xF4	; 244
    1f20:	09 f0       	breq	.+2      	; 0x1f24 <ReadCapacity+0x428>
    1f22:	55 c0       	rjmp	.+170    	; 0x1fce <ReadCapacity+0x4d2>
#if COMP_SLEW1 > COMP_SLEW2
     if (cap.cval < COMP_SLEW1) {
    1f24:	c0 90 6a 01 	lds	r12, 0x016A
    1f28:	d0 90 6b 01 	lds	r13, 0x016B
    1f2c:	e0 90 6c 01 	lds	r14, 0x016C
    1f30:	f0 90 6d 01 	lds	r15, 0x016D
    1f34:	40 ea       	ldi	r20, 0xA0	; 160
    1f36:	c4 16       	cp	r12, r20
    1f38:	4f e0       	ldi	r20, 0x0F	; 15
    1f3a:	d4 06       	cpc	r13, r20
    1f3c:	40 e0       	ldi	r20, 0x00	; 0
    1f3e:	e4 06       	cpc	r14, r20
    1f40:	40 e0       	ldi	r20, 0x00	; 0
    1f42:	f4 06       	cpc	r15, r20
    1f44:	c0 f4       	brcc	.+48     	; 0x1f76 <ReadCapacity+0x47a>
        // add slew rate dependent offset
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
    1f46:	a7 01       	movw	r20, r14
    1f48:	96 01       	movw	r18, r12
    1f4a:	24 52       	subi	r18, 0x24	; 36
    1f4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f4e:	4f 4f       	sbci	r20, 0xFF	; 255
    1f50:	5f 4f       	sbci	r21, 0xFF	; 255
    1f52:	60 ea       	ldi	r22, 0xA0	; 160
    1f54:	7f e0       	ldi	r23, 0x0F	; 15
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    1f5e:	2c 0d       	add	r18, r12
    1f60:	3d 1d       	adc	r19, r13
    1f62:	4e 1d       	adc	r20, r14
    1f64:	5f 1d       	adc	r21, r15
    1f66:	20 93 6a 01 	sts	0x016A, r18
    1f6a:	30 93 6b 01 	sts	0x016B, r19
    1f6e:	40 93 6c 01 	sts	0x016C, r20
    1f72:	50 93 6d 01 	sts	0x016D, r21
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    1f76:	80 91 51 01 	lds	r24, 0x0151
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	8f 55       	subi	r24, 0x5F	; 95
    1f7e:	9e 4f       	sbci	r25, 0xFE	; 254
    1f80:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__eerd_byte_m168>
     if (cap.cval > tmpint) {
    1f84:	20 91 6a 01 	lds	r18, 0x016A
    1f88:	30 91 6b 01 	lds	r19, 0x016B
    1f8c:	40 91 6c 01 	lds	r20, 0x016C
    1f90:	50 91 6d 01 	lds	r21, 0x016D
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    1f94:	90 e0       	ldi	r25, 0x00	; 0
     if (cap.cval > tmpint) {
    1f96:	a0 e0       	ldi	r26, 0x00	; 0
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	82 17       	cp	r24, r18
    1f9c:	93 07       	cpc	r25, r19
    1f9e:	a4 07       	cpc	r26, r20
    1fa0:	b5 07       	cpc	r27, r21
    1fa2:	68 f4       	brcc	.+26     	; 0x1fbe <ReadCapacity+0x4c2>
         cap.cval -= tmpint;		//subtract zero offset (pF)
    1fa4:	28 1b       	sub	r18, r24
    1fa6:	39 0b       	sbc	r19, r25
    1fa8:	4a 0b       	sbc	r20, r26
    1faa:	5b 0b       	sbc	r21, r27
    1fac:	20 93 6a 01 	sts	0x016A, r18
    1fb0:	30 93 6b 01 	sts	0x016B, r19
    1fb4:	40 93 6c 01 	sts	0x016C, r20
    1fb8:	50 93 6d 01 	sts	0x016D, r21
    1fbc:	08 c0       	rjmp	.+16     	; 0x1fce <ReadCapacity+0x4d2>
         lcd_testpin(HighPin);
         lcd_space();
#endif
       }
#endif
         cap.cval = 0;			//unsigned long may not reach negativ value
    1fbe:	10 92 6a 01 	sts	0x016A, r1
    1fc2:	10 92 6b 01 	sts	0x016B, r1
    1fc6:	10 92 6c 01 	sts	0x016C, r1
    1fca:	10 92 6d 01 	sts	0x016D, r1
  lcd_testpin(HighPin);
  lcd_space();
  DisplayValue(cap.cval,cap.cpre,'F',4);
  wait_about3s();
#endif
  R_DDR = HiPinR_L; 		//switch R_L for High-Pin to GND
    1fce:	a4 b8       	out	0x04, r10	; 4
#if F_CPU < 2000001
   if(cap.cval < 50)
#else 
   if(cap.cval < 25)
    1fd0:	80 91 6a 01 	lds	r24, 0x016A
    1fd4:	90 91 6b 01 	lds	r25, 0x016B
    1fd8:	a0 91 6c 01 	lds	r26, 0x016C
    1fdc:	b0 91 6d 01 	lds	r27, 0x016D
    1fe0:	89 31       	cpi	r24, 0x19	; 25
    1fe2:	91 05       	cpc	r25, r1
    1fe4:	a1 05       	cpc	r26, r1
    1fe6:	b1 05       	cpc	r27, r1
    1fe8:	08 f4       	brcc	.+2      	; 0x1fec <ReadCapacity+0x4f0>
    1fea:	3f c0       	rjmp	.+126    	; 0x206a <ReadCapacity+0x56e>
#endif
      goto keinC;	//capacity to low, < 50pF @1MHz (25pF @8MHz)
   }
   // end low capacity 
checkDiodes:
   if((NumOfDiodes > 0)  && (PartFound != PART_FET)) {
    1fec:	80 91 05 01 	lds	r24, 0x0105
    1ff0:	88 23       	and	r24, r24
    1ff2:	21 f0       	breq	.+8      	; 0x1ffc <ReadCapacity+0x500>
    1ff4:	80 91 07 01 	lds	r24, 0x0107
    1ff8:	84 30       	cpi	r24, 0x04	; 4
    1ffa:	b9 f5       	brne	.+110    	; 0x206a <ReadCapacity+0x56e>
      wait_about1s();
#endif
      // nearly shure, that there is one or more diodes in reverse direction,
      // which would be wrongly detected as capacitor 
   } else {
      PartFound = PART_CAPACITOR;	//capacitor is found
    1ffc:	87 e0       	ldi	r24, 0x07	; 7
    1ffe:	80 93 07 01 	sts	0x0107, r24
      if ((cap.cpre > cap.cpre_max) || ((cap.cpre == cap.cpre_max) && (cap.cval > cap.cval_max))) {
    2002:	60 91 7c 01 	lds	r22, 0x017C
    2006:	80 91 7d 01 	lds	r24, 0x017D
    200a:	86 17       	cp	r24, r22
    200c:	bc f0       	brlt	.+46     	; 0x203c <ReadCapacity+0x540>
    200e:	68 17       	cp	r22, r24
    2010:	61 f5       	brne	.+88     	; 0x206a <ReadCapacity+0x56e>
    2012:	20 91 6a 01 	lds	r18, 0x016A
    2016:	30 91 6b 01 	lds	r19, 0x016B
    201a:	40 91 6c 01 	lds	r20, 0x016C
    201e:	50 91 6d 01 	lds	r21, 0x016D
    2022:	80 91 6e 01 	lds	r24, 0x016E
    2026:	90 91 6f 01 	lds	r25, 0x016F
    202a:	a0 91 70 01 	lds	r26, 0x0170
    202e:	b0 91 71 01 	lds	r27, 0x0171
    2032:	82 17       	cp	r24, r18
    2034:	93 07       	cpc	r25, r19
    2036:	a4 07       	cpc	r26, r20
    2038:	b5 07       	cpc	r27, r21
    203a:	b8 f4       	brcc	.+46     	; 0x206a <ReadCapacity+0x56e>
         // we have found a greater one
         cap.cval_max = cap.cval;
    203c:	ea e6       	ldi	r30, 0x6A	; 106
    203e:	f1 e0       	ldi	r31, 0x01	; 1
    2040:	80 91 6a 01 	lds	r24, 0x016A
    2044:	90 91 6b 01 	lds	r25, 0x016B
    2048:	a0 91 6c 01 	lds	r26, 0x016C
    204c:	b0 91 6d 01 	lds	r27, 0x016D
    2050:	80 93 6e 01 	sts	0x016E, r24
    2054:	90 93 6f 01 	sts	0x016F, r25
    2058:	a0 93 70 01 	sts	0x0170, r26
    205c:	b0 93 71 01 	sts	0x0171, r27
         cap.cpre_max = cap.cpre;
    2060:	63 8b       	std	Z+19, r22	; 0x13
#if FLASHEND > 0x1fff
         cap.v_loss = vloss;		// lost voltage in 0.01%
    2062:	97 86       	std	Z+15, r9	; 0x0f
    2064:	86 86       	std	Z+14, r8	; 0x0e
#endif
         cap.ca = LowPin;		// save LowPin
    2066:	70 8a       	std	Z+16, r7	; 0x10
         cap.cb = HighPin;		// save HighPin
    2068:	11 8b       	std	Z+17, r17	; 0x11
keinC:
  // discharge capacitor again
//  EntladePins();		// discharge capacitors
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    206a:	88 e0       	ldi	r24, 0x08	; 8
    206c:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    206e:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    2070:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    2072:	15 b8       	out	0x05, r1	; 5
  return;
 } // end ReadCapacity()
    2074:	df 91       	pop	r29
    2076:	cf 91       	pop	r28
    2078:	1f 91       	pop	r17
    207a:	0f 91       	pop	r16
    207c:	ff 90       	pop	r15
    207e:	ef 90       	pop	r14
    2080:	df 90       	pop	r13
    2082:	cf 90       	pop	r12
    2084:	bf 90       	pop	r11
    2086:	af 90       	pop	r10
    2088:	9f 90       	pop	r9
    208a:	8f 90       	pop	r8
    208c:	7f 90       	pop	r7
    208e:	08 95       	ret

00002090 <__vector_13>:
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
}
#ifndef INHIBIT_SLEEP_MODE
/* Interrupt Service Routine for timer1 Overflow */
 ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    2090:	1f 92       	push	r1
    2092:	0f 92       	push	r0
    2094:	0f b6       	in	r0, 0x3f	; 63
    2096:	0f 92       	push	r0
    2098:	11 24       	eor	r1, r1
    209a:	8f 93       	push	r24
    209c:	9f 93       	push	r25
 if ((!(TI1_INT_FLAGS & (1<<ICF1)) && (unfinished !=0)) || ((TI1_INT_FLAGS & (1<<ICF1)) && (ICR1 < 250))) {
    209e:	b5 99       	sbic	0x16, 5	; 22
    20a0:	04 c0       	rjmp	.+8      	; 0x20aa <__vector_13+0x1a>
    20a2:	80 91 69 01 	lds	r24, 0x0169
    20a6:	88 23       	and	r24, r24
    20a8:	49 f4       	brne	.+18     	; 0x20bc <__vector_13+0x2c>
    20aa:	b5 9b       	sbis	0x16, 5	; 22
    20ac:	10 c0       	rjmp	.+32     	; 0x20ce <__vector_13+0x3e>
    20ae:	80 91 86 00 	lds	r24, 0x0086
    20b2:	90 91 87 00 	lds	r25, 0x0087
    20b6:	8a 3f       	cpi	r24, 0xFA	; 250
    20b8:	91 05       	cpc	r25, r1
    20ba:	48 f4       	brcc	.+18     	; 0x20ce <__vector_13+0x3e>
    // Capture Event not pending or (Capture Event pending and ICR1 < 250
    // the ICR1H is buffered and can not examined alone, we must read the ICR1L first (with ICR1 access) !
   ovcnt16++;				// count Overflow
    20bc:	80 91 52 01 	lds	r24, 0x0152
    20c0:	90 91 53 01 	lds	r25, 0x0153
    20c4:	01 96       	adiw	r24, 0x01	; 1
    20c6:	90 93 53 01 	sts	0x0153, r25
    20ca:	80 93 52 01 	sts	0x0152, r24
 }
}
    20ce:	9f 91       	pop	r25
    20d0:	8f 91       	pop	r24
    20d2:	0f 90       	pop	r0
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	0f 90       	pop	r0
    20d8:	1f 90       	pop	r1
    20da:	18 95       	reti

000020dc <__vector_10>:
/* Interrupt Service Routine for timer1 capture event (Comparator) */
 ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    20dc:	1f 92       	push	r1
    20de:	0f 92       	push	r0
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	0f 92       	push	r0
    20e4:	11 24       	eor	r1, r1
    20e6:	8f 93       	push	r24
    20e8:	9f 93       	push	r25
 unfinished = 0;			// clear unfinished flag
    20ea:	10 92 69 01 	sts	0x0169, r1
 // With unfinished set to 0, we prevent further counting the Overflow.s
 // Is already a Overflow detected?
 if((TI1_INT_FLAGS & (1<<TOV1))) {	// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    20ee:	b0 9b       	sbis	0x16, 0	; 22
    20f0:	10 c0       	rjmp	.+32     	; 0x2112 <__vector_10+0x36>
   //there is already a Overflow detected, before or after the capture event?
   // ICR1H is buffered and can not examined alone, we must read the ICR1L first (with ICR1 access) !
   if (ICR1 < 250) {
    20f2:	80 91 86 00 	lds	r24, 0x0086
    20f6:	90 91 87 00 	lds	r25, 0x0087
    20fa:	8a 3f       	cpi	r24, 0xFA	; 250
    20fc:	91 05       	cpc	r25, r1
    20fe:	48 f4       	brcc	.+18     	; 0x2112 <__vector_10+0x36>
     //  Yes, Input Capture Counter is low, Overflow has occured before the capture event
     ovcnt16++;				// count Overflow
    2100:	80 91 52 01 	lds	r24, 0x0152
    2104:	90 91 53 01 	lds	r25, 0x0153
    2108:	01 96       	adiw	r24, 0x01	; 1
    210a:	90 93 53 01 	sts	0x0153, r25
    210e:	80 93 52 01 	sts	0x0152, r24
   }
 }
}
    2112:	9f 91       	pop	r25
    2114:	8f 91       	pop	r24
    2116:	0f 90       	pop	r0
    2118:	0f be       	out	0x3f, r0	; 63
    211a:	0f 90       	pop	r0
    211c:	1f 90       	pop	r1
    211e:	18 95       	reti

00002120 <getRLmultip>:
    2120:	21 e0       	ldi	r18, 0x01	; 1
    2122:	8c 32       	cpi	r24, 0x2C	; 44
    2124:	92 07       	cpc	r25, r18
    2126:	18 f0       	brcs	.+6      	; 0x212e <ad221c>
    2128:	8c 52       	subi	r24, 0x2C	; 44
    212a:	91 40       	sbci	r25, 0x01	; 1
    212c:	02 c0       	rjmp	.+4      	; 0x2132 <ad2220>

0000212e <ad221c>:
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0

00002132 <ad2220>:
    2132:	69 e1       	ldi	r22, 0x19	; 25
    2134:	70 e0       	ldi	r23, 0x00	; 0
    2136:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <__udivmodhi4>
    213a:	6b 32       	cpi	r22, 0x2B	; 43
    213c:	18 f4       	brcc	.+6      	; 0x2144 <ad2232>
    213e:	99 e1       	ldi	r25, 0x19	; 25
    2140:	98 1b       	sub	r25, r24
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <ad2236>

00002144 <ad2232>:
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	6b e2       	ldi	r22, 0x2B	; 43

00002148 <ad2236>:
    2148:	e0 e0       	ldi	r30, 0x00	; 0
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	e6 0f       	add	r30, r22
    214e:	f1 1d       	adc	r31, r1
    2150:	e6 0f       	add	r30, r22
    2152:	f1 1d       	adc	r31, r1
    2154:	45 91       	lpm	r20, Z+
    2156:	55 91       	lpm	r21, Z+
    2158:	25 91       	lpm	r18, Z+
    215a:	35 91       	lpm	r19, Z+
    215c:	69 2f       	mov	r22, r25
    215e:	42 1b       	sub	r20, r18
    2160:	53 0b       	sbc	r21, r19
    2162:	64 9f       	mul	r22, r20
    2164:	c0 01       	movw	r24, r0
    2166:	65 9f       	mul	r22, r21
    2168:	90 0d       	add	r25, r0
    216a:	11 24       	eor	r1, r1
    216c:	0c 96       	adiw	r24, 0x0c	; 12
    216e:	69 e1       	ldi	r22, 0x19	; 25
    2170:	70 e0       	ldi	r23, 0x00	; 0
    2172:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <__udivmodhi4>
    2176:	62 0f       	add	r22, r18
    2178:	73 1f       	adc	r23, r19
    217a:	cb 01       	movw	r24, r22
    217c:	08 95       	ret

0000217e <get_log>:
 } // end ReadInductance()


#if FLASHEND > 0x1fff
// get_log interpolate a table with the function -log(1 - (permil/1000))
uint16_t get_log(uint16_t permil) {
    217e:	cf 93       	push	r28
    2180:	df 93       	push	r29
  uint16_t y1, y2;			// table values
  uint16_t result;			// result of interpolation
  uint8_t tabind;			// index to table value
  uint8_t tabres;			// distance to lower table value, fraction of Log_Tab_Distance

  tabind = permil / Log_Tab_Distance;	// index to table
    2182:	24 e1       	ldi	r18, 0x14	; 20
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	b9 01       	movw	r22, r18
    2188:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <__udivmodhi4>
    218c:	dc 01       	movw	r26, r24
  tabres = permil % Log_Tab_Distance;	// fraction of table distance
  // interpolate the table of factors
  y1 = pgm_read_word(&LogTab[tabind]);	// get the lower table value
    218e:	70 e0       	ldi	r23, 0x00	; 0
    2190:	fb 01       	movw	r30, r22
    2192:	ee 0f       	add	r30, r30
    2194:	ff 1f       	adc	r31, r31
    2196:	e8 59       	subi	r30, 0x98	; 152
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	c5 91       	lpm	r28, Z+
    219c:	d4 91       	lpm	r29, Z+
  y2 = pgm_read_word(&LogTab[tabind+1]); // get the higher table value
    219e:	fb 01       	movw	r30, r22
    21a0:	ee 0f       	add	r30, r30
    21a2:	ff 1f       	adc	r31, r31
    21a4:	e6 59       	subi	r30, 0x96	; 150
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	45 91       	lpm	r20, Z+
    21aa:	54 91       	lpm	r21, Z+
  result = ((y2 - y1) * tabres ) / Log_Tab_Distance + y1; // interpolate
    21ac:	4c 1b       	sub	r20, r28
    21ae:	5d 0b       	sbc	r21, r29
    21b0:	4a 9f       	mul	r20, r26
    21b2:	c0 01       	movw	r24, r0
    21b4:	4b 9f       	mul	r20, r27
    21b6:	90 0d       	add	r25, r0
    21b8:	5a 9f       	mul	r21, r26
    21ba:	90 0d       	add	r25, r0
    21bc:	11 24       	eor	r1, r1
    21be:	b9 01       	movw	r22, r18
    21c0:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <__udivmodhi4>
    21c4:	6c 0f       	add	r22, r28
    21c6:	7d 1f       	adc	r23, r29
  return(result);
 }
    21c8:	cb 01       	movw	r24, r22
    21ca:	df 91       	pop	r29
    21cc:	cf 91       	pop	r28
    21ce:	08 95       	ret

000021d0 <ReadInductance>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadInductance(void) {
    21d0:	2f 92       	push	r2
    21d2:	3f 92       	push	r3
    21d4:	4f 92       	push	r4
    21d6:	5f 92       	push	r5
    21d8:	6f 92       	push	r6
    21da:	7f 92       	push	r7
    21dc:	8f 92       	push	r8
    21de:	9f 92       	push	r9
    21e0:	af 92       	push	r10
    21e2:	bf 92       	push	r11
    21e4:	cf 92       	push	r12
    21e6:	df 92       	push	r13
    21e8:	ef 92       	push	r14
    21ea:	ff 92       	push	r15
    21ec:	0f 93       	push	r16
    21ee:	1f 93       	push	r17
    21f0:	df 93       	push	r29
    21f2:	cf 93       	push	r28
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	68 97       	sbiw	r28, 0x18	; 24
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	f8 94       	cli
    21fe:	de bf       	out	0x3e, r29	; 62
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	cd bf       	out	0x3d, r28	; 61
  int8_t ukorr;		// correction of comparator voltage
  uint8_t nr_pol1;	// number of successfull inductance measurement with polarity 1
  uint8_t nr_pol2;	// number of successfull inductance measurement with polarity 2


  inductor_lpre = 0;	// H units, mark inductor as 0
    2204:	10 92 0b 01 	sts	0x010B, r1
  if(PartFound != PART_RESISTOR) {
    2208:	80 91 07 01 	lds	r24, 0x0107
    220c:	81 30       	cpi	r24, 0x01	; 1
    220e:	09 f0       	breq	.+2      	; 0x2212 <ReadInductance+0x42>
    2210:	59 c2       	rjmp	.+1202   	; 0x26c4 <ReadInductance+0x4f4>
     return;	//We have found no resistor  
  }
  if (ResistorsFound != 1) {
    2212:	80 91 68 01 	lds	r24, 0x0168
    2216:	81 30       	cpi	r24, 0x01	; 1
    2218:	09 f0       	breq	.+2      	; 0x221c <ReadInductance+0x4c>
    221a:	54 c2       	rjmp	.+1192   	; 0x26c4 <ReadInductance+0x4f4>
     return;	// do not search for inductance, more than 1 resistor
  }
     if (resis[0].rx > 21000) return;
    221c:	80 91 19 01 	lds	r24, 0x0119
    2220:	90 91 1a 01 	lds	r25, 0x011A
    2224:	a0 91 1b 01 	lds	r26, 0x011B
    2228:	b0 91 1c 01 	lds	r27, 0x011C
    222c:	89 30       	cpi	r24, 0x09	; 9
    222e:	22 e5       	ldi	r18, 0x52	; 82
    2230:	92 07       	cpc	r25, r18
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	a2 07       	cpc	r26, r18
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	b2 07       	cpc	r27, r18
    223a:	08 f0       	brcs	.+2      	; 0x223e <ReadInductance+0x6e>
    223c:	43 c2       	rjmp	.+1158   	; 0x26c4 <ReadInductance+0x4f4>
    223e:	99 24       	eor	r9, r9
    2240:	80 91 1d 01 	lds	r24, 0x011D
    2244:	40 90 1e 01 	lds	r4, 0x011E

     // we can check for Inductance, if resistance is below 2100 Ohm
     for (count=0;count<4;count++) {
        // Try four times (different direction and with delayed counter start)
        if (count < 2) {
    2248:	99 2d       	mov	r25, r9
    224a:	92 30       	cpi	r25, 0x02	; 2
    224c:	10 f4       	brcc	.+4      	; 0x2252 <ReadInductance+0x82>
           // first and second pass, direction 1
           LowPin = resis[0].ra;
    224e:	88 2e       	mov	r8, r24
    2250:	02 c0       	rjmp	.+4      	; 0x2256 <ReadInductance+0x86>
           HighPin = resis[0].rb;
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[0].rb;
    2252:	84 2c       	mov	r8, r4
           HighPin = resis[0].ra;
    2254:	48 2e       	mov	r4, r24
        }
        HiADC = pgm_read_byte(&PinADCtab[HighPin]);
    2256:	e4 2d       	mov	r30, r4
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	e3 51       	subi	r30, 0x13	; 19
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	24 91       	lpm	r18, Z+
        LoPinR_L = pgm_read_byte(&PinRLtab[LowPin]);	//R_L mask for HighPin R_L load
    2260:	e8 2d       	mov	r30, r8
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	e6 51       	subi	r30, 0x16	; 22
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	e4 91       	lpm	r30, Z+
        //==================================================================================
        // Measurement of Inductance values
        R_PORT = 0;		// switch R port to GND
    226a:	15 b8       	out	0x05, r1	; 5
        ADC_PORT =   TXD_VAL;		// switch ADC-Port to GND
    226c:	a8 e0       	ldi	r26, 0x08	; 8
    226e:	a8 b9       	out	0x08, r26	; 8
        if ((resis[0].rx < 240) && ((count & 0x01) == 0)) {
    2270:	80 91 19 01 	lds	r24, 0x0119
    2274:	90 91 1a 01 	lds	r25, 0x011A
    2278:	a0 91 1b 01 	lds	r26, 0x011B
    227c:	b0 91 1c 01 	lds	r27, 0x011C
    2280:	80 3f       	cpi	r24, 0xF0	; 240
    2282:	91 05       	cpc	r25, r1
    2284:	a1 05       	cpc	r26, r1
    2286:	b1 05       	cpc	r27, r1
    2288:	b8 f4       	brcc	.+46     	; 0x22b8 <ReadInductance+0xe8>
    228a:	90 fc       	sbrc	r9, 0
    228c:	15 c0       	rjmp	.+42     	; 0x22b8 <ReadInductance+0xe8>
           // we can use PinR_L for measurement
           mess_r = RR680MI - R_L_VAL;			// use only pin output resistance
    228e:	a0 90 03 01 	lds	r10, 0x0103
    2292:	b0 90 04 01 	lds	r11, 0x0104
    2296:	80 e7       	ldi	r24, 0x70	; 112
    2298:	95 ee       	ldi	r25, 0xE5	; 229
    229a:	a8 0e       	add	r10, r24
    229c:	b9 1e       	adc	r11, r25
           ADC_DDR = HiADC | (1<<LowPin) | TXD_MSK;	// switch HiADC and Low Pin to GND, 
    229e:	32 2f       	mov	r19, r18
    22a0:	38 60       	ori	r19, 0x08	; 8
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	08 2c       	mov	r0, r8
    22a8:	02 c0       	rjmp	.+4      	; 0x22ae <ReadInductance+0xde>
    22aa:	88 0f       	add	r24, r24
    22ac:	99 1f       	adc	r25, r25
    22ae:	0a 94       	dec	r0
    22b0:	e2 f7       	brpl	.-8      	; 0x22aa <ReadInductance+0xda>
    22b2:	38 2b       	or	r19, r24
    22b4:	37 b9       	out	0x07, r19	; 7
    22b6:	08 c0       	rjmp	.+16     	; 0x22c8 <ReadInductance+0xf8>
        } else {
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
    22b8:	e4 b9       	out	0x04, r30	; 4
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
    22ba:	82 2f       	mov	r24, r18
    22bc:	88 60       	ori	r24, 0x08	; 8
    22be:	87 b9       	out	0x07, r24	; 7
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
    22c0:	a0 90 03 01 	lds	r10, 0x0103
    22c4:	b0 90 04 01 	lds	r11, 0x0104
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    22c8:	30 e0       	ldi	r19, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    22ca:	88 2d       	mov	r24, r8
    22cc:	28 8f       	std	Y+24, r18	; 0x18
    22ce:	3f 8b       	std	Y+23, r19	; 0x17
    22d0:	0e 94 81 13 	call	0x2702	; 0x2702 <W10msReadADC>
    22d4:	6c 01       	movw	r12, r24
            total_r =  ReadADC(HighPin);
    22d6:	84 2d       	mov	r24, r4
    22d8:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
    22dc:	ac 01       	movw	r20, r24
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    22de:	28 8d       	ldd	r18, Y+24	; 0x18
    22e0:	3f 89       	ldd	r19, Y+23	; 0x17
    22e2:	92 e0       	ldi	r25, 0x02	; 2
    22e4:	c9 16       	cp	r12, r25
    22e6:	d1 04       	cpc	r13, r1
    22e8:	18 f4       	brcc	.+6      	; 0x22f0 <ReadInductance+0x120>
    22ea:	42 30       	cpi	r20, 0x02	; 2
    22ec:	51 05       	cpc	r21, r1
    22ee:	18 f0       	brcs	.+6      	; 0x22f6 <ReadInductance+0x126>
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    22f0:	3f 5f       	subi	r19, 0xFF	; 255
    22f2:	34 31       	cpi	r19, 0x14	; 20
    22f4:	51 f7       	brne	.-44     	; 0x22ca <ReadInductance+0xfa>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
        // setup Analog Comparator
        ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    22f6:	a0 e4       	ldi	r26, 0x40	; 64
    22f8:	a0 93 7b 00 	sts	0x007B, r26
        ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    22fc:	b4 e5       	ldi	r27, 0x54	; 84
    22fe:	b0 bf       	out	0x30, r27	; 48
        ADMUX = (1<<REFS0) | LowPin;			// switch Mux to Low-Pin
    2300:	88 2d       	mov	r24, r8
    2302:	80 64       	ori	r24, 0x40	; 64
    2304:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    2308:	86 e1       	ldi	r24, 0x16	; 22
    230a:	80 93 7a 00 	sts	0x007A, r24
   
      // setup Counter1
        timeconstant.w[1] = 0;		// set ov counter to 0
    230e:	00 e0       	ldi	r16, 0x00	; 0
    2310:	10 e0       	ldi	r17, 0x00	; 0
        TCCR1A = 0;			// set Counter1 to normal Mode
    2312:	10 92 80 00 	sts	0x0080, r1
        TCNT1 = 0;			//set Counter to 0
    2316:	10 92 85 00 	sts	0x0085, r1
    231a:	10 92 84 00 	sts	0x0084, r1
        TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// reset TIFR or TIFR1
    231e:	97 e2       	ldi	r25, 0x27	; 39
    2320:	96 bb       	out	0x16, r25	; 22
        HiADC |= TXD_VAL;
    2322:	28 60       	ori	r18, 0x08	; 8
        wait200us();			// wait for bandgap to start up
    2324:	28 8f       	std	Y+24, r18	; 0x18
    2326:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <wait200us>
        if ((count & 0x01) == 0 ) {
    232a:	29 2c       	mov	r2, r9
    232c:	33 24       	eor	r3, r3
    232e:	d1 01       	movw	r26, r2
    2330:	a1 70       	andi	r26, 0x01	; 1
    2332:	b0 70       	andi	r27, 0x00	; 0
    2334:	ba 8b       	std	Y+18, r27	; 0x12
    2336:	a9 8b       	std	Y+17, r26	; 0x11
    2338:	28 8d       	ldd	r18, Y+24	; 0x18
    233a:	90 fc       	sbrc	r9, 0
    233c:	05 c0       	rjmp	.+10     	; 0x2348 <ReadInductance+0x178>
           //first start counter, then start current
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    233e:	b1 e8       	ldi	r27, 0x81	; 129
    2340:	b0 93 81 00 	sts	0x0081, r27
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    2344:	28 b9       	out	0x08, r18	; 8
    2346:	08 c0       	rjmp	.+16     	; 0x2358 <ReadInductance+0x188>
        } else {
           //first start current, then start counter with delay
           //parasitic capacity of coil can cause high current at the beginning
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    2348:	28 b9       	out	0x08, r18	; 8
      #if F_CPU >= 8000000UL
           wait3us();		// ignore current peak from capacity
    234a:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <wait3us>
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
    234e:	20 e2       	ldi	r18, 0x20	; 32
    2350:	26 bb       	out	0x16, r18	; 22
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    2352:	81 e8       	ldi	r24, 0x81	; 129
    2354:	80 93 81 00 	sts	0x0081, r24
    2358:	c8 01       	movw	r24, r16
        }
      
      //******************************
        while(1) {
           // Wait, until  Input Capture is set
           ii = TI1_INT_FLAGS;		//read Timer flags
    235a:	46 b3       	in	r20, 0x16	; 22
           if (ii & (1<<ICF1))  {
    235c:	45 ff       	sbrs	r20, 5
    235e:	02 c0       	rjmp	.+4      	; 0x2364 <ReadInductance+0x194>
    2360:	8c 01       	movw	r16, r24
    2362:	0b c0       	rjmp	.+22     	; 0x237a <ReadInductance+0x1aa>
              break;
           }
           if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    2364:	40 ff       	sbrs	r20, 0
    2366:	f9 cf       	rjmp	.-14     	; 0x235a <ReadInductance+0x18a>
              TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    2368:	a1 e0       	ldi	r26, 0x01	; 1
    236a:	a6 bb       	out	0x16, r26	; 22
              wdt_reset();
    236c:	a8 95       	wdr
    236e:	01 96       	adiw	r24, 0x01	; 1
              timeconstant.w[1]++;		// count one OV
              if(timeconstant.w[1] == (F_CPU/100000UL)) {
    2370:	80 35       	cpi	r24, 0x50	; 80
    2372:	91 05       	cpc	r25, r1
    2374:	91 f7       	brne	.-28     	; 0x235a <ReadInductance+0x18a>
    2376:	00 e5       	ldi	r16, 0x50	; 80
    2378:	10 e0       	ldi	r17, 0x00	; 0
                 break; 	//Timeout for Charging, above 0.13 s
              }
           }
        }
        TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    237a:	10 92 81 00 	sts	0x0081, r1
        TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    237e:	b0 e2       	ldi	r27, 0x20	; 32
    2380:	b6 bb       	out	0x16, r27	; 22
        timeconstant.w[0] = ICR1;		// get previous Input Capture Counter flag
    2382:	20 91 86 00 	lds	r18, 0x0086
    2386:	30 91 87 00 	lds	r19, 0x0087
    238a:	79 01       	movw	r14, r18
      // check actual counter, if an additional overflow must be added
        if((TCNT1 > timeconstant.w[0]) && (ii & (1<<TOV1))) {
    238c:	80 91 84 00 	lds	r24, 0x0084
    2390:	90 91 85 00 	lds	r25, 0x0085
    2394:	28 17       	cp	r18, r24
    2396:	39 07       	cpc	r19, r25
    2398:	30 f4       	brcc	.+12     	; 0x23a6 <ReadInductance+0x1d6>
    239a:	40 ff       	sbrs	r20, 0
    239c:	04 c0       	rjmp	.+8      	; 0x23a6 <ReadInductance+0x1d6>
           // this OV was not counted, but was before the Input Capture
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    239e:	21 e0       	ldi	r18, 0x01	; 1
    23a0:	26 bb       	out	0x16, r18	; 22
           timeconstant.w[1]++;			// count one additional OV
    23a2:	0f 5f       	subi	r16, 0xFF	; 255
    23a4:	1f 4f       	sbci	r17, 0xFF	; 255
        }

        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    23a6:	88 e0       	ldi	r24, 0x08	; 8
    23a8:	88 b9       	out	0x08, r24	; 8
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    23aa:	96 e9       	ldi	r25, 0x96	; 150
    23ac:	90 93 7a 00 	sts	0x007A, r25
        for (ii=0;ii<20;ii++) {
    23b0:	20 e0       	ldi	r18, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    23b2:	88 2d       	mov	r24, r8
    23b4:	28 8f       	std	Y+24, r18	; 0x18
    23b6:	0e 94 81 13 	call	0x2702	; 0x2702 <W10msReadADC>
    23ba:	6c 01       	movw	r12, r24
            total_r =  ReadADC(HighPin);
    23bc:	84 2d       	mov	r24, r4
    23be:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    23c2:	28 8d       	ldd	r18, Y+24	; 0x18
    23c4:	a2 e0       	ldi	r26, 0x02	; 2
    23c6:	ca 16       	cp	r12, r26
    23c8:	d1 04       	cpc	r13, r1
    23ca:	18 f4       	brcc	.+6      	; 0x23d2 <ReadInductance+0x202>
    23cc:	82 30       	cpi	r24, 0x02	; 2
    23ce:	91 05       	cpc	r25, r1
    23d0:	18 f0       	brcs	.+6      	; 0x23d8 <ReadInductance+0x208>
           timeconstant.w[1]++;			// count one additional OV
        }

        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
        for (ii=0;ii<20;ii++) {
    23d2:	2f 5f       	subi	r18, 0xFF	; 255
    23d4:	24 31       	cpi	r18, 0x14	; 20
    23d6:	69 f7       	brne	.-38     	; 0x23b2 <ReadInductance+0x1e2>
//  #undef CNT_ZERO_42
//  #undef CNT_ZERO_720
//  #define CNT_ZERO_42 7
//  #define CNT_ZERO_720 10
//#endif
        total_r = (mess_r + resis[0].rx + RRpinMI);
    23d8:	c0 90 19 01 	lds	r12, 0x0119
    23dc:	d0 90 1a 01 	lds	r13, 0x011A
    23e0:	80 91 3d 01 	lds	r24, 0x013D
    23e4:	90 91 3e 01 	lds	r25, 0x013E
    23e8:	c8 0e       	add	r12, r24
    23ea:	d9 1e       	adc	r13, r25
    23ec:	ca 0c       	add	r12, r10
    23ee:	db 1c       	adc	r13, r11
//        if (total_r > 7000) cnt_diff = 1;
//        if (total_r > 14000) cnt_diff = 2;
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
        // Voltage of comparator in % of umax
     #ifdef AUTO_CAL
        tmpint = (ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset))) ;
    23f0:	8f e9       	ldi	r24, 0x9F	; 159
    23f2:	91 e0       	ldi	r25, 0x01	; 1
    23f4:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <__eerd_word_m168>
    23f8:	20 91 39 01 	lds	r18, 0x0139
    23fc:	30 91 3a 01 	lds	r19, 0x013A
    2400:	28 0f       	add	r18, r24
    2402:	39 1f       	adc	r19, r25
     #else
        tmpint = (ref_mv + REF_C_KORR);
     #endif
        if (mess_r < R_L_VAL) {
    2404:	b0 e9       	ldi	r27, 0x90	; 144
    2406:	ab 16       	cp	r10, r27
    2408:	ba e1       	ldi	r27, 0x1A	; 26
    240a:	bb 06       	cpc	r11, r27
    240c:	b8 f4       	brcc	.+46     	; 0x243c <ReadInductance+0x26c>
           // measurement without 680 Ohm
           cnt_diff = CNT_ZERO_42;
           if (timeconstant.dw < 225) {
    240e:	81 ee       	ldi	r24, 0xE1	; 225
    2410:	e8 16       	cp	r14, r24
    2412:	f1 04       	cpc	r15, r1
    2414:	01 05       	cpc	r16, r1
    2416:	11 05       	cpc	r17, r1
    2418:	38 f4       	brcc	.+14     	; 0x2428 <ReadInductance+0x258>
              ukorr = (timeconstant.w[0] / 5) - 20;
    241a:	c7 01       	movw	r24, r14
    241c:	65 e0       	ldi	r22, 0x05	; 5
    241e:	70 e0       	ldi	r23, 0x00	; 0
    2420:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <__udivmodhi4>
    2424:	64 51       	subi	r22, 0x14	; 20
    2426:	01 c0       	rjmp	.+2      	; 0x242a <ReadInductance+0x25a>
           } else {
              ukorr = 25;
    2428:	69 e1       	ldi	r22, 0x19	; 25
           }
           tmpint -= (((REF_L_KORR * 10) / 10) + ukorr);
    242a:	28 52       	subi	r18, 0x28	; 40
    242c:	30 40       	sbci	r19, 0x00	; 0
    242e:	77 27       	eor	r23, r23
    2430:	67 fd       	sbrc	r22, 7
    2432:	70 95       	com	r23
    2434:	26 1b       	sub	r18, r22
    2436:	37 0b       	sbc	r19, r23
     #else
        tmpint = (ref_mv + REF_C_KORR);
     #endif
        if (mess_r < R_L_VAL) {
           // measurement without 680 Ohm
           cnt_diff = CNT_ZERO_42;
    2438:	66 e0       	ldi	r22, 0x06	; 6
    243a:	08 c0       	rjmp	.+16     	; 0x244c <ReadInductance+0x27c>
//#endif
        total_r = (mess_r + resis[0].rx + RRpinMI);
//        cnt_diff = 0;
//        if (total_r > 7000) cnt_diff = 1;
//        if (total_r > 14000) cnt_diff = 2;
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
    243c:	c6 01       	movw	r24, r12
    243e:	60 eb       	ldi	r22, 0xB0	; 176
    2440:	76 e3       	ldi	r23, 0x36	; 54
    2442:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <__udivmodhi4>
           }
           tmpint -= (((REF_L_KORR * 10) / 10) + ukorr);
        } else {
           // measurement with 680 Ohm resistor
           // if 680 Ohm resistor is used, use REF_L_KORR for correction
           cnt_diff += CNT_ZERO_720;
    2446:	69 5f       	subi	r22, 0xF9	; 249
           tmpint += REF_L_KORR;
    2448:	28 5d       	subi	r18, 0xD8	; 216
    244a:	3f 4f       	sbci	r19, 0xFF	; 255
        }
        if (timeconstant.dw > cnt_diff) timeconstant.dw -= cnt_diff;
    244c:	70 e0       	ldi	r23, 0x00	; 0
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	6e 15       	cp	r22, r14
    2454:	7f 05       	cpc	r23, r15
    2456:	80 07       	cpc	r24, r16
    2458:	91 07       	cpc	r25, r17
    245a:	28 f4       	brcc	.+10     	; 0x2466 <ReadInductance+0x296>
    245c:	e6 1a       	sub	r14, r22
    245e:	f7 0a       	sbc	r15, r23
    2460:	08 0b       	sbc	r16, r24
    2462:	19 0b       	sbc	r17, r25
    2464:	03 c0       	rjmp	.+6      	; 0x246c <ReadInductance+0x29c>
        else          timeconstant.dw = 0;
    2466:	ee 24       	eor	r14, r14
    2468:	ff 24       	eor	r15, r15
    246a:	87 01       	movw	r16, r14
       
        if ((count&0x01) == 1) {
    246c:	a9 89       	ldd	r26, Y+17	; 0x11
    246e:	ba 89       	ldd	r27, Y+18	; 0x12
    2470:	10 97       	sbiw	r26, 0x00	; 0
    2472:	41 f0       	breq	.+16     	; 0x2484 <ReadInductance+0x2b4>
           // second pass with delayed counter start
           timeconstant.dw += (3 * (F_CPU/1000000UL))+10;
    2474:	82 e2       	ldi	r24, 0x22	; 34
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	a0 e0       	ldi	r26, 0x00	; 0
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	e8 0e       	add	r14, r24
    247e:	f9 1e       	adc	r15, r25
    2480:	0a 1f       	adc	r16, r26
    2482:	1b 1f       	adc	r17, r27
        }
        if (timeconstant.w[1] >= (F_CPU/100000UL)) timeconstant.dw = 0; // no transition found
    2484:	00 35       	cpi	r16, 0x50	; 80
    2486:	11 05       	cpc	r17, r1
    2488:	18 f0       	brcs	.+6      	; 0x2490 <ReadInductance+0x2c0>
    248a:	ee 24       	eor	r14, r14
    248c:	ff 24       	eor	r15, r15
    248e:	87 01       	movw	r16, r14
        if (timeconstant.dw > 10) {
    2490:	9b e0       	ldi	r25, 0x0B	; 11
    2492:	e9 16       	cp	r14, r25
    2494:	f1 04       	cpc	r15, r1
    2496:	01 05       	cpc	r16, r1
    2498:	11 05       	cpc	r17, r1
    249a:	28 f0       	brcs	.+10     	; 0x24a6 <ReadInductance+0x2d6>
           timeconstant.dw -= 1;
    249c:	08 94       	sec
    249e:	e1 08       	sbc	r14, r1
    24a0:	f1 08       	sbc	r15, r1
    24a2:	01 09       	sbc	r16, r1
    24a4:	11 09       	sbc	r17, r1
        }
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    24a6:	c6 01       	movw	r24, r12
    24a8:	a0 e0       	ldi	r26, 0x00	; 0
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	8b 8b       	std	Y+19, r24	; 0x13
    24ae:	9c 8b       	std	Y+20, r25	; 0x14
    24b0:	ad 8b       	std	Y+21, r26	; 0x15
    24b2:	be 8b       	std	Y+22, r27	; 0x16
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    24b4:	b9 01       	movw	r22, r18
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	28 ee       	ldi	r18, 0xE8	; 232
    24bc:	33 e0       	ldi	r19, 0x03	; 3
    24be:	40 e0       	ldi	r20, 0x00	; 0
    24c0:	50 e0       	ldi	r21, 0x00	; 0
    24c2:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
    24c6:	2b 01       	movw	r4, r22
    24c8:	3c 01       	movw	r6, r24
        if (timeconstant.w[1] >= (F_CPU/100000UL)) timeconstant.dw = 0; // no transition found
        if (timeconstant.dw > 10) {
           timeconstant.dw -= 1;
        }
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    24ca:	b5 01       	movw	r22, r10
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	20 91 35 01 	lds	r18, 0x0135
    24d4:	30 91 36 01 	lds	r19, 0x0136
    24d8:	40 e0       	ldi	r20, 0x00	; 0
    24da:	50 e0       	ldi	r21, 0x00	; 0
    24dc:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
    24e0:	2b 89       	ldd	r18, Y+19	; 0x13
    24e2:	3c 89       	ldd	r19, Y+20	; 0x14
    24e4:	4d 89       	ldd	r20, Y+21	; 0x15
    24e6:	5e 89       	ldd	r21, Y+22	; 0x16
    24e8:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    24ec:	40 e0       	ldi	r20, 0x00	; 0
    24ee:	50 e0       	ldi	r21, 0x00	; 0
    24f0:	c3 01       	movw	r24, r6
    24f2:	b2 01       	movw	r22, r4
    24f4:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
//        per_ref2 = (uint8_t)MEM2_read_byte(&LogTab[per_ref1]);	// -log(1 - per_ref1/100)
        per_ref2 = get_log(per_ref1);		// -log(1 - per_ref1/1000)
    24f8:	c9 01       	movw	r24, r18
    24fa:	0e 94 bf 10 	call	0x217e	; 0x217e <get_log>
    24fe:	6c 01       	movw	r12, r24
          }
#endif
/* ********************************************************* */
        // inductor_lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    2500:	6b 89       	ldd	r22, Y+19	; 0x13
    2502:	7c 89       	ldd	r23, Y+20	; 0x14
    2504:	8d 89       	ldd	r24, Y+21	; 0x15
    2506:	9e 89       	ldd	r25, Y+22	; 0x16
    2508:	a8 01       	movw	r20, r16
    250a:	97 01       	movw	r18, r14
    250c:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
    2510:	2b 01       	movw	r4, r22
    2512:	3c 01       	movw	r6, r24
             wait_about2s();
          }
#endif
/* ********************************************************* */
        // inductor_lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
    2514:	b6 01       	movw	r22, r12
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	e3 e0       	ldi	r30, 0x03	; 3
    251c:	66 0f       	add	r22, r22
    251e:	77 1f       	adc	r23, r23
    2520:	88 1f       	adc	r24, r24
    2522:	99 1f       	adc	r25, r25
    2524:	ea 95       	dec	r30
    2526:	d1 f7       	brne	.-12     	; 0x251c <ReadInductance+0x34c>
    2528:	6b 5f       	subi	r22, 0xFB	; 251
    252a:	7f 4f       	sbci	r23, 0xFF	; 255
    252c:	8f 4f       	sbci	r24, 0xFF	; 255
    252e:	9f 4f       	sbci	r25, 0xFF	; 255
    2530:	2a e0       	ldi	r18, 0x0A	; 10
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e0       	ldi	r20, 0x00	; 0
    2536:	50 e0       	ldi	r21, 0x00	; 0
    2538:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    253c:	40 e0       	ldi	r20, 0x00	; 0
    253e:	50 e0       	ldi	r21, 0x00	; 0
    2540:	c3 01       	movw	r24, r6
    2542:	b2 01       	movw	r22, r4
    2544:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    2548:	f1 01       	movw	r30, r2
    254a:	ee 0f       	add	r30, r30
    254c:	ff 1f       	adc	r31, r31
    254e:	ee 0f       	add	r30, r30
    2550:	ff 1f       	adc	r31, r31
    2552:	a1 e0       	ldi	r26, 0x01	; 1
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	ac 0f       	add	r26, r28
    2558:	bd 1f       	adc	r27, r29
    255a:	ea 0f       	add	r30, r26
    255c:	fb 1f       	adc	r31, r27
    255e:	20 83       	st	Z, r18
    2560:	31 83       	std	Z+1, r19	; 0x01
    2562:	42 83       	std	Z+2, r20	; 0x02
    2564:	53 83       	std	Z+3, r21	; 0x03
        if (((count&0x01) == 0) && (timeconstant.dw > ((F_CPU/1000000UL)+3))) {
    2566:	89 89       	ldd	r24, Y+17	; 0x11
    2568:	9a 89       	ldd	r25, Y+18	; 0x12
    256a:	00 97       	sbiw	r24, 0x00	; 0
    256c:	99 f4       	brne	.+38     	; 0x2594 <ReadInductance+0x3c4>
    256e:	9c e0       	ldi	r25, 0x0C	; 12
    2570:	e9 16       	cp	r14, r25
    2572:	f1 04       	cpc	r15, r1
    2574:	01 05       	cpc	r16, r1
    2576:	11 05       	cpc	r17, r1
    2578:	68 f0       	brcs	.+26     	; 0x2594 <ReadInductance+0x3c4>
           // transition is found, measurement with delayed counter start is not necessary
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
    257a:	f1 01       	movw	r30, r2
    257c:	31 96       	adiw	r30, 0x01	; 1
    257e:	ee 0f       	add	r30, r30
    2580:	ff 1f       	adc	r31, r31
    2582:	ee 0f       	add	r30, r30
    2584:	ff 1f       	adc	r31, r31
    2586:	ea 0f       	add	r30, r26
    2588:	fb 1f       	adc	r31, r27
    258a:	20 83       	st	Z, r18
    258c:	31 83       	std	Z+1, r19	; 0x01
    258e:	42 83       	std	Z+2, r20	; 0x02
    2590:	53 83       	std	Z+3, r21	; 0x03
           count++;		// skip the delayed measurement
    2592:	93 94       	inc	r9
        }
        wdt_reset();
    2594:	a8 95       	wdr
     return;	// do not search for inductance, more than 1 resistor
  }
     if (resis[0].rx > 21000) return;

     // we can check for Inductance, if resistance is below 2100 Ohm
     for (count=0;count<4;count++) {
    2596:	93 94       	inc	r9
    2598:	a9 2d       	mov	r26, r9
    259a:	a4 30       	cpi	r26, 0x04	; 4
    259c:	08 f4       	brcc	.+2      	; 0x25a0 <ReadInductance+0x3d0>
    259e:	50 ce       	rjmp	.-864    	; 0x2240 <ReadInductance+0x70>
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
           count++;		// skip the delayed measurement
        }
        wdt_reset();
     }  //end for count
     ADC_PORT = TXD_VAL;		// switch ADC Port to GND
    25a0:	88 e0       	ldi	r24, 0x08	; 8
    25a2:	88 b9       	out	0x08, r24	; 8
     wait_about20ms();
    25a4:	84 e0       	ldi	r24, 0x04	; 4
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
        inductor_.lx = inductance[0];
     }
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];		// other polarity, delayed start
     if (inductance[2] < inductor_lx) inductor_lx = inductance[2];	// use the other polarity
#else
     nr_pol1 = 0;
    25ac:	61 e0       	ldi	r22, 0x01	; 1
    25ae:	2d 81       	ldd	r18, Y+5	; 0x05
    25b0:	3e 81       	ldd	r19, Y+6	; 0x06
    25b2:	4f 81       	ldd	r20, Y+7	; 0x07
    25b4:	58 85       	ldd	r21, Y+8	; 0x08
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
    25b8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ba:	ab 81       	ldd	r26, Y+3	; 0x03
    25bc:	bc 81       	ldd	r27, Y+4	; 0x04
    25be:	82 17       	cp	r24, r18
    25c0:	93 07       	cpc	r25, r19
    25c2:	a4 07       	cpc	r26, r20
    25c4:	b5 07       	cpc	r27, r21
    25c6:	08 f0       	brcs	.+2      	; 0x25ca <ReadInductance+0x3fa>
    25c8:	60 e0       	ldi	r22, 0x00	; 0
     if (inductance[1] > inductance[0]) { nr_pol1 = 1; } 
     nr_pol2 = 2;
     if (inductance[3] > inductance[2]) { nr_pol2 = 3; } 
    25ca:	2d 85       	ldd	r18, Y+13	; 0x0d
    25cc:	3e 85       	ldd	r19, Y+14	; 0x0e
    25ce:	4f 85       	ldd	r20, Y+15	; 0x0f
    25d0:	58 89       	ldd	r21, Y+16	; 0x10
    25d2:	89 85       	ldd	r24, Y+9	; 0x09
    25d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d6:	ab 85       	ldd	r26, Y+11	; 0x0b
    25d8:	bc 85       	ldd	r27, Y+12	; 0x0c
    25da:	82 17       	cp	r24, r18
    25dc:	93 07       	cpc	r25, r19
    25de:	a4 07       	cpc	r26, r20
    25e0:	b5 07       	cpc	r27, r21
    25e2:	10 f0       	brcs	.+4      	; 0x25e8 <ReadInductance+0x418>
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];		// other polarity, delayed start
     if (inductance[2] < inductor_lx) inductor_lx = inductance[2];	// use the other polarity
#else
     nr_pol1 = 0;
     if (inductance[1] > inductance[0]) { nr_pol1 = 1; } 
     nr_pol2 = 2;
    25e4:	72 e0       	ldi	r23, 0x02	; 2
    25e6:	01 c0       	rjmp	.+2      	; 0x25ea <ReadInductance+0x41a>
     if (inductance[3] > inductance[2]) { nr_pol2 = 3; } 
    25e8:	73 e0       	ldi	r23, 0x03	; 3
     if (inductance[nr_pol2] < inductance[nr_pol1]) nr_pol1 = nr_pol2;
    25ea:	a7 2f       	mov	r26, r23
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	aa 0f       	add	r26, r26
    25f0:	bb 1f       	adc	r27, r27
    25f2:	aa 0f       	add	r26, r26
    25f4:	bb 1f       	adc	r27, r27
    25f6:	ce 01       	movw	r24, r28
    25f8:	01 96       	adiw	r24, 0x01	; 1
    25fa:	a8 0f       	add	r26, r24
    25fc:	b9 1f       	adc	r27, r25
    25fe:	e6 2f       	mov	r30, r22
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	ee 0f       	add	r30, r30
    2604:	ff 1f       	adc	r31, r31
    2606:	ee 0f       	add	r30, r30
    2608:	ff 1f       	adc	r31, r31
    260a:	e8 0f       	add	r30, r24
    260c:	f9 1f       	adc	r31, r25
    260e:	2d 91       	ld	r18, X+
    2610:	3d 91       	ld	r19, X+
    2612:	4d 91       	ld	r20, X+
    2614:	5c 91       	ld	r21, X
    2616:	80 81       	ld	r24, Z
    2618:	91 81       	ldd	r25, Z+1	; 0x01
    261a:	a2 81       	ldd	r26, Z+2	; 0x02
    261c:	b3 81       	ldd	r27, Z+3	; 0x03
    261e:	28 17       	cp	r18, r24
    2620:	39 07       	cpc	r19, r25
    2622:	4a 07       	cpc	r20, r26
    2624:	5b 07       	cpc	r21, r27
    2626:	08 f4       	brcc	.+2      	; 0x262a <ReadInductance+0x45a>
    2628:	67 2f       	mov	r22, r23
     inductor_lx = inductance[nr_pol1];
    262a:	26 2f       	mov	r18, r22
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	f9 01       	movw	r30, r18
    2630:	ee 0f       	add	r30, r30
    2632:	ff 1f       	adc	r31, r31
    2634:	ee 0f       	add	r30, r30
    2636:	ff 1f       	adc	r31, r31
    2638:	ec 0f       	add	r30, r28
    263a:	fd 1f       	adc	r31, r29
    263c:	61 81       	ldd	r22, Z+1	; 0x01
    263e:	72 81       	ldd	r23, Z+2	; 0x02
    2640:	83 81       	ldd	r24, Z+3	; 0x03
    2642:	94 81       	ldd	r25, Z+4	; 0x04
    2644:	60 93 98 01 	sts	0x0198, r22
    2648:	70 93 99 01 	sts	0x0199, r23
    264c:	80 93 9a 01 	sts	0x019A, r24
    2650:	90 93 9b 01 	sts	0x019B, r25
     inductor_lpre = -5;	// 10 uH units
    2654:	4b ef       	ldi	r20, 0xFB	; 251
    2656:	40 93 0b 01 	sts	0x010B, r20
     if (((nr_pol1 & 1) == 1) || (resis[0].rx >= 240)) {
    265a:	20 fd       	sbrc	r18, 0
    265c:	0d c0       	rjmp	.+26     	; 0x2678 <ReadInductance+0x4a8>
    265e:	20 91 19 01 	lds	r18, 0x0119
    2662:	30 91 1a 01 	lds	r19, 0x011A
    2666:	40 91 1b 01 	lds	r20, 0x011B
    266a:	50 91 1c 01 	lds	r21, 0x011C
    266e:	20 3f       	cpi	r18, 0xF0	; 240
    2670:	31 05       	cpc	r19, r1
    2672:	41 05       	cpc	r20, r1
    2674:	51 05       	cpc	r21, r1
    2676:	a8 f0       	brcs	.+42     	; 0x26a2 <ReadInductance+0x4d2>
        // with 680 Ohm resistor total_r is more than 7460
        inductor_lpre = -4;	// 100 uH units
    2678:	2c ef       	ldi	r18, 0xFC	; 252
    267a:	20 93 0b 01 	sts	0x010B, r18
        inductor_lx = (inductor_lx + 5) / 10;
    267e:	6b 5f       	subi	r22, 0xFB	; 251
    2680:	7f 4f       	sbci	r23, 0xFF	; 255
    2682:	8f 4f       	sbci	r24, 0xFF	; 255
    2684:	9f 4f       	sbci	r25, 0xFF	; 255
    2686:	2a e0       	ldi	r18, 0x0A	; 10
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	40 e0       	ldi	r20, 0x00	; 0
    268c:	50 e0       	ldi	r21, 0x00	; 0
    268e:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    2692:	20 93 98 01 	sts	0x0198, r18
    2696:	30 93 99 01 	sts	0x0199, r19
    269a:	40 93 9a 01 	sts	0x019A, r20
    269e:	50 93 9b 01 	sts	0x019B, r21
     } 
     if (inductor_lx == 0) inductor_lpre = 0;	//mark as zero
    26a2:	80 91 98 01 	lds	r24, 0x0198
    26a6:	90 91 99 01 	lds	r25, 0x0199
    26aa:	a0 91 9a 01 	lds	r26, 0x019A
    26ae:	b0 91 9b 01 	lds	r27, 0x019B
    26b2:	00 97       	sbiw	r24, 0x00	; 0
    26b4:	a1 05       	cpc	r26, r1
    26b6:	b1 05       	cpc	r27, r1
    26b8:	11 f4       	brne	.+4      	; 0x26be <ReadInductance+0x4ee>
    26ba:	10 92 0b 01 	sts	0x010B, r1
#endif

  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    26be:	88 e0       	ldi	r24, 0x08	; 8
    26c0:	87 b9       	out	0x07, r24	; 7
  R_DDR = 0;			// switch all resistor ports to input
    26c2:	14 b8       	out	0x04, r1	; 4
#endif
  return;
 } // end ReadInductance()
    26c4:	68 96       	adiw	r28, 0x18	; 24
    26c6:	0f b6       	in	r0, 0x3f	; 63
    26c8:	f8 94       	cli
    26ca:	de bf       	out	0x3e, r29	; 62
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	cd bf       	out	0x3d, r28	; 61
    26d0:	cf 91       	pop	r28
    26d2:	df 91       	pop	r29
    26d4:	1f 91       	pop	r17
    26d6:	0f 91       	pop	r16
    26d8:	ff 90       	pop	r15
    26da:	ef 90       	pop	r14
    26dc:	df 90       	pop	r13
    26de:	cf 90       	pop	r12
    26e0:	bf 90       	pop	r11
    26e2:	af 90       	pop	r10
    26e4:	9f 90       	pop	r9
    26e6:	8f 90       	pop	r8
    26e8:	7f 90       	pop	r7
    26ea:	6f 90       	pop	r6
    26ec:	5f 90       	pop	r5
    26ee:	4f 90       	pop	r4
    26f0:	3f 90       	pop	r3
    26f2:	2f 90       	pop	r2
    26f4:	08 95       	ret

000026f6 <W20msReadADC>:
    26f6:	8f 93       	push	r24
    26f8:	84 e0       	ldi	r24, 0x04	; 4
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
    2700:	0b c0       	rjmp	.+22     	; 0x2718 <to_read>

00002702 <W10msReadADC>:
    2702:	8f 93       	push	r24
    2704:	82 e0       	ldi	r24, 0x02	; 2
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
    270c:	05 c0       	rjmp	.+10     	; 0x2718 <to_read>

0000270e <W5msReadADC>:
    270e:	8f 93       	push	r24
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>

00002718 <to_read>:
    2718:	8f 91       	pop	r24

0000271a <ReadADC>:
    271a:	1f 93       	push	r17
    271c:	18 2f       	mov	r17, r24
    271e:	10 64       	ori	r17, 0x40	; 64

00002720 <get_sample>:
    2720:	10 93 7c 00 	sts	0x007C, r17
    2724:	e1 2f       	mov	r30, r17
    2726:	e0 78       	andi	r30, 0x80	; 128
    2728:	80 91 32 01 	lds	r24, 0x0132
    272c:	e8 17       	cp	r30, r24
    272e:	61 f0       	breq	.+24     	; 0x2748 <r2aa2>
    2730:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <wait100us>
    2734:	8e e9       	ldi	r24, 0x9E	; 158
    2736:	80 93 7a 00 	sts	0x007A, r24
    273a:	83 e0       	ldi	r24, 0x03	; 3
    273c:	83 bf       	out	0x33, r24	; 51
    273e:	88 95       	sleep
    2740:	82 e0       	ldi	r24, 0x02	; 2
    2742:	83 bf       	out	0x33, r24	; 51
    2744:	e0 93 32 01 	sts	0x0132, r30

00002748 <r2aa2>:
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	a9 01       	movw	r20, r18
    274e:	e0 e0       	ldi	r30, 0x00	; 0
    2750:	1f c0       	rjmp	.+62     	; 0x2790 <r2ae8>

00002752 <Loop>:
    2752:	8e e9       	ldi	r24, 0x9E	; 158
    2754:	80 93 7a 00 	sts	0x007A, r24
    2758:	83 e0       	ldi	r24, 0x03	; 3
    275a:	83 bf       	out	0x33, r24	; 51
    275c:	88 95       	sleep
    275e:	82 e0       	ldi	r24, 0x02	; 2
    2760:	83 bf       	out	0x33, r24	; 51
    2762:	60 91 78 00 	lds	r22, 0x0078
    2766:	70 91 79 00 	lds	r23, 0x0079
    276a:	26 0f       	add	r18, r22
    276c:	37 1f       	adc	r19, r23
    276e:	41 1d       	adc	r20, r1
    2770:	51 1d       	adc	r21, r1
    2772:	e4 30       	cpi	r30, 0x04	; 4
    2774:	61 f4       	brne	.+24     	; 0x278e <r2ae6>
    2776:	80 91 34 01 	lds	r24, 0x0134
    277a:	80 30       	cpi	r24, 0x00	; 0
    277c:	41 f0       	breq	.+16     	; 0x278e <r2ae6>
    277e:	84 e0       	ldi	r24, 0x04	; 4
    2780:	20 30       	cpi	r18, 0x00	; 0
    2782:	38 07       	cpc	r19, r24
    2784:	20 f4       	brcc	.+8      	; 0x278e <r2ae6>
    2786:	17 fd       	sbrc	r17, 7
    2788:	02 c0       	rjmp	.+4      	; 0x278e <r2ae6>
    278a:	10 68       	ori	r17, 0x80	; 128
    278c:	c9 cf       	rjmp	.-110    	; 0x2720 <get_sample>

0000278e <r2ae6>:
    278e:	ef 5f       	subi	r30, 0xFF	; 255

00002790 <r2ae8>:
    2790:	80 91 31 01 	lds	r24, 0x0131
    2794:	e8 17       	cp	r30, r24
    2796:	e8 f2       	brcs	.-70     	; 0x2752 <Loop>
    2798:	17 ff       	sbrs	r17, 7
    279a:	05 c0       	rjmp	.+10     	; 0x27a6 <r2afe>
    279c:	60 91 33 01 	lds	r22, 0x0133
    27a0:	70 91 34 01 	lds	r23, 0x0134
    27a4:	04 c0       	rjmp	.+8      	; 0x27ae <r2b02>

000027a6 <r2afe>:
    27a6:	60 91 35 01 	lds	r22, 0x0135
    27aa:	70 91 36 01 	lds	r23, 0x0136

000027ae <r2b02>:
    27ae:	80 e0       	ldi	r24, 0x00	; 0
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
    27b6:	2f ef       	ldi	r18, 0xFF	; 255
    27b8:	33 e0       	ldi	r19, 0x03	; 3
    27ba:	40 e0       	ldi	r20, 0x00	; 0
    27bc:	50 e0       	ldi	r21, 0x00	; 0
    27be:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    27c2:	b9 01       	movw	r22, r18
    27c4:	ca 01       	movw	r24, r20
    27c6:	20 91 31 01 	lds	r18, 0x0131
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	40 e0       	ldi	r20, 0x00	; 0
    27ce:	50 e0       	ldi	r21, 0x00	; 0
    27d0:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    27d4:	c9 01       	movw	r24, r18
    27d6:	1f 91       	pop	r17
    27d8:	08 95       	ret

000027da <CheckPins>:
#include <stdlib.h>
#include "Transistortester.h"

//******************************************************************
void CheckPins(uint8_t HighPin, uint8_t LowPin, uint8_t TristatePin)
  {
    27da:	2f 92       	push	r2
    27dc:	3f 92       	push	r3
    27de:	4f 92       	push	r4
    27e0:	5f 92       	push	r5
    27e2:	6f 92       	push	r6
    27e4:	7f 92       	push	r7
    27e6:	8f 92       	push	r8
    27e8:	9f 92       	push	r9
    27ea:	af 92       	push	r10
    27ec:	bf 92       	push	r11
    27ee:	cf 92       	push	r12
    27f0:	df 92       	push	r13
    27f2:	ef 92       	push	r14
    27f4:	ff 92       	push	r15
    27f6:	0f 93       	push	r16
    27f8:	1f 93       	push	r17
    27fa:	df 93       	push	r29
    27fc:	cf 93       	push	r28
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	61 97       	sbiw	r28, 0x11	; 17
    2804:	0f b6       	in	r0, 0x3f	; 63
    2806:	f8 94       	cli
    2808:	de bf       	out	0x3e, r29	; 62
    280a:	0f be       	out	0x3f, r0	; 63
    280c:	cd bf       	out	0x3d, r28	; 61
    280e:	18 2f       	mov	r17, r24
    2810:	06 2f       	mov	r16, r22
    2812:	49 83       	std	Y+1, r20	; 0x01
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
    2814:	a8 95       	wdr
//  #define RR680MI resis680mi
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = pgm_read_byte(&PinRLtab[LowPin]);		// instruction for LowPin R_L
    2816:	86 2f       	mov	r24, r22
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	fc 01       	movw	r30, r24
    281c:	e6 51       	subi	r30, 0x16	; 22
    281e:	ff 4f       	sbci	r31, 0xFF	; 255
    2820:	44 90       	lpm	r4, Z+
#if FLASHEND > 0x3fff
  LoPinRH = pgm_read_byte(&PinRHtab[LowPin]);		// instruction for LowPin R_H
#else
  LoPinRH = LoPinRL + LoPinRL;				// instruction for LowPin R_H
#endif
  TriPinRL = pgm_read_byte(&PinRLtab[TristatePin]);	// instruction for TristatePin R_L
    2822:	e4 2f       	mov	r30, r20
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	e6 51       	subi	r30, 0x16	; 22
    2828:	ff 4f       	sbci	r31, 0xFF	; 255
    282a:	54 90       	lpm	r5, Z+
#if FLASHEND > 0x3fff
  TriPinRH = pgm_read_byte(&PinRHtab[TristatePin]);	// instruction for TristatePin R_H
#else
  TriPinRH = TriPinRL + TriPinRL;			// instruction for TristatePin R_H
#endif
  HiPinRL = pgm_read_byte(&PinRLtab[HighPin]);		// instruction for HighPin R_L
    282c:	21 2f       	mov	r18, r17
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	f9 01       	movw	r30, r18
    2832:	e6 51       	subi	r30, 0x16	; 22
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	f4 90       	lpm	r15, Z+
  HiPinRH = pgm_read_byte(&PinRHtab[HighPin]);		// instruction for HighPin R_H
#else
  HiPinRH = HiPinRL + HiPinRL;				// instruction for HighPin R_H
#endif

  HiADCp = pgm_read_byte(&PinADCtab[HighPin]);		// instruction for ADC High-Pin 
    2838:	23 51       	subi	r18, 0x13	; 19
    283a:	3f 4f       	sbci	r19, 0xFF	; 255
    283c:	f9 01       	movw	r30, r18
    283e:	e4 90       	lpm	r14, Z+
  LoADCp = pgm_read_byte(&PinADCtab[LowPin]);		// instruction for ADC Low-Pin
    2840:	83 51       	subi	r24, 0x13	; 19
    2842:	9f 4f       	sbci	r25, 0xFF	; 255
    2844:	fc 01       	movw	r30, r24
    2846:	84 90       	lpm	r8, Z+
  HiADCm = HiADCp | TXD_MSK;
    2848:	f8 e0       	ldi	r31, 0x08	; 8
    284a:	ef 2a       	or	r14, r31
  HiADCp |= TXD_VAL;
  LoADCm = LoADCp | TXD_MSK;
    284c:	8f 2a       	or	r8, r31
  LoADCp |= TXD_VAL;

  //setting of Pins 
  R_PORT = 0;				//resistor-Port outputs to 0
    284e:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//Low-Pin to output and across R_L to GND
    2850:	44 b8       	out	0x04, r4	; 4
  ADC_DDR = HiADCm;		//High-Pin to output
    2852:	e7 b8       	out	0x07, r14	; 7
  ADC_PORT = HiADCp;		//High-Pin fix to Vcc
    2854:	e8 b8       	out	0x08, r14	; 8
  //for some MOSFET the gate (TristatePin) must be discharged
  R_DDR = LoPinRL | TriPinRL;
    2856:	35 2c       	mov	r3, r5
    2858:	34 28       	or	r3, r4
    285a:	34 b8       	out	0x04, r3	; 4
  adc.vCEs = W5msReadADC(LowPin);	// lp1 is the voltage at 680 Ohm with - Gate
    285c:	86 2f       	mov	r24, r22
    285e:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    2862:	5c 01       	movw	r10, r24
  R_DDR = LoPinRL;	
    2864:	44 b8       	out	0x04, r4	; 4
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin  , without Gate current (-)
    2866:	80 2f       	mov	r24, r16
    2868:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    286c:	3c 01       	movw	r6, r24
  R_DDR = 0;
    286e:	14 b8       	out	0x04, r1	; 4
  wait5ms();				// release all current (clear TRIAC and Thyristor)
    2870:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <wait5ms>
  R_PORT = TriPinRL;
    2874:	55 b8       	out	0x05, r5	; 5
  R_DDR = LoPinRL | TriPinRL;		// start current again
    2876:	34 b8       	out	0x04, r3	; 4
  adc.lp2 = W5msReadADC(LowPin);	// lp2 is the voltage at 680 Ohm with + Gate
    2878:	80 2f       	mov	r24, r16
    287a:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    287e:	6c 01       	movw	r12, r24
  R_DDR = LoPinRL;
    2880:	44 b8       	out	0x04, r4	; 4
  R_PORT = 0;
    2882:	15 b8       	out	0x05, r1	; 5
  if (adc.lp2 < adc.vCEs) {
    2884:	8a 15       	cp	r24, r10
    2886:	9b 05       	cpc	r25, r11
    2888:	68 f4       	brcc	.+26     	; 0x28a4 <CheckPins+0xca>
     adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin again, without Gate current (+)
    288a:	80 2f       	mov	r24, r16
    288c:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    2890:	3c 01       	movw	r6, r24
     if ((adc.lp2+288) > adc.vCEs) goto checkDiode;	// no significant change
    2892:	c6 01       	movw	r24, r12
    2894:	80 5e       	subi	r24, 0xE0	; 224
    2896:	9e 4f       	sbci	r25, 0xFE	; 254
    2898:	a8 16       	cp	r10, r24
    289a:	b9 06       	cpc	r11, r25
    289c:	08 f4       	brcc	.+2      	; 0x28a0 <CheckPins+0xc6>
    289e:	d6 c3       	rjmp	.+1964   	; 0x304c <CheckPins+0x872>
    28a0:	56 01       	movw	r10, r12
    28a2:	07 c0       	rjmp	.+14     	; 0x28b2 <CheckPins+0xd8>
     adc.vCEs = adc.lp2;
  } else {
     if ((adc.vCEs+288) > adc.lp2) goto checkDiode;	// no significant change
    28a4:	c5 01       	movw	r24, r10
    28a6:	80 5e       	subi	r24, 0xE0	; 224
    28a8:	9e 4f       	sbci	r25, 0xFE	; 254
    28aa:	c8 16       	cp	r12, r24
    28ac:	d9 06       	cpc	r13, r25
    28ae:	08 f4       	brcc	.+2      	; 0x28b2 <CheckPins+0xd8>
    28b0:	cd c3       	rjmp	.+1946   	; 0x304c <CheckPins+0x872>
  // a TRIAC is marked as two transistors at least (2 or 3)
  // both of NPN transistors (normal and inverse) are found, if ntrans.count == 2
  // both of PNP transistors (normal and inverse) are found, if ptrans.count == 2
  // If Transistor with protection diode is checked, all results are found,
  // if ntrans.count == 1 and ptrans.count == 1
  if ((ntrans.count + ptrans.count) > 1) {
    28b2:	20 91 67 01 	lds	r18, 0x0167
    28b6:	80 91 4f 01 	lds	r24, 0x014F
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	82 0f       	add	r24, r18
    28be:	91 1d       	adc	r25, r1
    28c0:	82 30       	cpi	r24, 0x02	; 2
    28c2:	91 05       	cpc	r25, r1
    28c4:	0c f0       	brlt	.+2      	; 0x28c8 <CheckPins+0xee>
    28c6:	c2 c3       	rjmp	.+1924   	; 0x304c <CheckPins+0x872>
#endif
  TriPinRL = pgm_read_byte(&PinRLtab[TristatePin]);	// instruction for TristatePin R_L
#if FLASHEND > 0x3fff
  TriPinRH = pgm_read_byte(&PinRHtab[TristatePin]);	// instruction for TristatePin R_H
#else
  TriPinRH = TriPinRL + TriPinRL;			// instruction for TristatePin R_H
    28c8:	95 2c       	mov	r9, r5
    28ca:	99 0c       	add	r9, r9
  // Look for Source/Drain current without gate current.
  // Germanium transistors have also high collector current with higher temperature.
  // But this current is lower, if the base is hold at emitter level (adc.hp1).
  // Additional checking of adc.lp1 will prevent to detect a PNP as P-JFET.
//  if((PartMode <= PART_MODE_P_JFET) && (adc.lp_otr > 455)  && (adc.vCEs > 455))
  if((adc.lp_otr > 455)  && (adc.vCEs > 455))
    28cc:	28 ec       	ldi	r18, 0xC8	; 200
    28ce:	62 16       	cp	r6, r18
    28d0:	21 e0       	ldi	r18, 0x01	; 1
    28d2:	72 06       	cpc	r7, r18
    28d4:	08 f4       	brcc	.+2      	; 0x28d8 <CheckPins+0xfe>
    28d6:	b1 c0       	rjmp	.+354    	; 0x2a3a <CheckPins+0x260>
    28d8:	38 ec       	ldi	r19, 0xC8	; 200
    28da:	a3 16       	cp	r10, r19
    28dc:	31 e0       	ldi	r19, 0x01	; 1
    28de:	b3 06       	cpc	r11, r19
    28e0:	08 f4       	brcc	.+2      	; 0x28e4 <CheckPins+0x10a>
    28e2:	ab c0       	rjmp	.+342    	; 0x2a3a <CheckPins+0x260>
     {  //there is more than 650uA current without TristatePin current 
     // can be JFET or D-FET
     //Test if N-JFET or if self-conducting N-MOSFET
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
    28e4:	89 2d       	mov	r24, r9
    28e6:	84 29       	or	r24, r4
    28e8:	84 b9       	out	0x04, r24	; 4
     adc.lp1 = W10msReadADC(LowPin);	//measure voltage at the assumed Source 
    28ea:	80 2f       	mov	r24, r16
    28ec:	0e 94 81 13 	call	0x2702	; 0x2702 <W10msReadADC>
    28f0:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
    28f2:	89 81       	ldd	r24, Y+1	; 0x01
    28f4:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
    28f8:	6c 01       	movw	r12, r24
     R_PORT = TriPinRH;			//switch R_H for Tristate-Pin (probably Gate) to VCC
    28fa:	95 b8       	out	0x05, r9	; 5
     adc.lp2 = W10msReadADC(LowPin);	//measure voltage at the assumed Source again
    28fc:	80 2f       	mov	r24, r16
    28fe:	0e 94 81 13 	call	0x2702	; 0x2702 <W10msReadADC>
     lcd_space();
     DisplayValue(adc.lp2,-3,' ',3);
     DisplayValue(adc.lp1,-3,' ',3);
#endif
     //If it is a self-conducting MOSFET or JFET, then must be: adc.lp2 > adc.lp1 
     if(adc.lp2>(adc.lp1+599)) {
    2902:	95 01       	movw	r18, r10
    2904:	29 5a       	subi	r18, 0xA9	; 169
    2906:	3d 4f       	sbci	r19, 0xFD	; 253
    2908:	9f 28       	or	r9, r15
    290a:	28 17       	cp	r18, r24
    290c:	39 07       	cpc	r19, r25
    290e:	08 f0       	brcs	.+2      	; 0x2912 <CheckPins+0x138>
    2910:	40 c0       	rjmp	.+128    	; 0x2992 <CheckPins+0x1b8>
        //measure voltage at the  Gate, differ between MOSFET and JFET
        ADC_PORT = TXD_VAL;
    2912:	88 e0       	ldi	r24, 0x08	; 8
    2914:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = LoADCm;	//Low-Pin fix to GND
    2916:	87 b8       	out	0x07, r8	; 7
        R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
    2918:	94 b8       	out	0x04, r9	; 4
        R_PORT = TriPinRH | HiPinRL;	//switch R_L for High-Pin to VCC
    291a:	95 b8       	out	0x05, r9	; 5
        adc.lp2 = W10msReadADC(TristatePin); //read voltage of assumed Gate 
    291c:	89 81       	ldd	r24, Y+1	; 0x01
    291e:	0e 94 81 13 	call	0x2702	; 0x2702 <W10msReadADC>
        if(adc.lp2>3911) {  //MOSFET
    2922:	4f e0       	ldi	r20, 0x0F	; 15
    2924:	88 34       	cpi	r24, 0x48	; 72
    2926:	94 07       	cpc	r25, r20
    2928:	28 f0       	brcs	.+10     	; 0x2934 <CheckPins+0x15a>
           PartFound = PART_FET;	//N-Kanal-MOSFET
    292a:	84 e0       	ldi	r24, 0x04	; 4
    292c:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_MOS|N_CHANNEL|D_MODE; //Depletion-MOSFET
    2930:	82 e2       	ldi	r24, 0x22	; 34
    2932:	04 c0       	rjmp	.+8      	; 0x293c <CheckPins+0x162>
        } else {  //JFET (pn-passage between Gate and Source is conducting )
           PartFound = PART_FET;	//N-Kanal-JFET
    2934:	84 e0       	ldi	r24, 0x04	; 4
    2936:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_JFET|N_CHANNEL|D_MODE;
    293a:	84 e2       	ldi	r24, 0x24	; 36
    293c:	80 93 06 01 	sts	0x0106, r24
        lcd_data('N');
        lcd_data('J');
#endif
//      if ((PartReady == 0) || (adc.lp1 > ntrans.uBE)) 
//      there is no way to find out the right Source / Drain
        ntrans.uBE = adc.lp1;
    2940:	b0 92 47 01 	sts	0x0147, r11
    2944:	a0 92 46 01 	sts	0x0146, r10
        if(adc.lp1 > adc.tp1) {
    2948:	ca 14       	cp	r12, r10
    294a:	db 04       	cpc	r13, r11
    294c:	40 f4       	brcc	.+16     	; 0x295e <CheckPins+0x184>
          ntrans.gthvoltage = adc.lp1 - adc.tp1;	//voltage GS (Source - Gate)
    294e:	c5 01       	movw	r24, r10
    2950:	8c 19       	sub	r24, r12
    2952:	9d 09       	sbc	r25, r13
    2954:	90 93 4b 01 	sts	0x014B, r25
    2958:	80 93 4a 01 	sts	0x014A, r24
    295c:	04 c0       	rjmp	.+8      	; 0x2966 <CheckPins+0x18c>
        } else {
          ntrans.gthvoltage = 0;	//voltage GS (Source - Gate)
    295e:	10 92 4b 01 	sts	0x014B, r1
    2962:	10 92 4a 01 	sts	0x014A, r1
        }
        ntrans.current = (unsigned int)(((unsigned long)adc.lp1 * 1000) / RR680MI); // Id 0.01mA
    2966:	b5 01       	movw	r22, r10
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	28 ee       	ldi	r18, 0xE8	; 232
    296e:	33 e0       	ldi	r19, 0x03	; 3
    2970:	40 e0       	ldi	r20, 0x00	; 0
    2972:	50 e0       	ldi	r21, 0x00	; 0
    2974:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
    2978:	20 91 03 01 	lds	r18, 0x0103
    297c:	30 91 04 01 	lds	r19, 0x0104
    2980:	40 e0       	ldi	r20, 0x00	; 0
    2982:	50 e0       	ldi	r21, 0x00	; 0
    2984:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    2988:	30 93 49 01 	sts	0x0149, r19
    298c:	20 93 48 01 	sts	0x0148, r18
    2990:	54 c3       	rjmp	.+1704   	; 0x303a <CheckPins+0x860>
        ntrans.count++;			// count as two, the inverse is identical
        goto saveNresult;		// save Pin numbers and exit
     }

     ADC_PORT = TXD_VAL;		// direct outputs to GND
    2992:	88 e0       	ldi	r24, 0x08	; 8
    2994:	88 b9       	out	0x08, r24	; 8

     //Test, if P-JFET or if self-conducting P-MOSFET
     ADC_DDR = LoADCm;		//switch Low-Pin (assumed Drain) direct to GND,
    2996:	87 b8       	out	0x07, r8	; 7
				//R_H for Tristate-Pin (assumed Gate) is already switched to VCC
     R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
    2998:	94 b8       	out	0x04, r9	; 4
     R_PORT = TriPinRH | HiPinRL;	//High-Pin across R_L to Vcc
    299a:	95 b8       	out	0x05, r9	; 5
     adc.hp1 = W10msReadADC(HighPin);	//measure voltage at assumed Source 
    299c:	81 2f       	mov	r24, r17
    299e:	0e 94 81 13 	call	0x2702	; 0x2702 <W10msReadADC>
    29a2:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
    29a4:	89 81       	ldd	r24, Y+1	; 0x01
    29a6:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
    29aa:	6c 01       	movw	r12, r24
     R_PORT = HiPinRL;			//switch R_H for Tristate-Pin (assumed Gate) to GND
    29ac:	f5 b8       	out	0x05, r15	; 5
     adc.hp2 = W10msReadADC(HighPin);	//read voltage at assumed Source again
    29ae:	81 2f       	mov	r24, r17
    29b0:	0e 94 81 13 	call	0x2702	; 0x2702 <W10msReadADC>
     //if it is a self-conducting P_MOSFET or P-JFET , then must be:  adc.hp1 > adc.hp2 
     if(adc.hp1>(adc.hp2+599)) {
    29b4:	89 5a       	subi	r24, 0xA9	; 169
    29b6:	9d 4f       	sbci	r25, 0xFD	; 253
    29b8:	8a 15       	cp	r24, r10
    29ba:	9b 05       	cpc	r25, r11
    29bc:	08 f0       	brcs	.+2      	; 0x29c0 <CheckPins+0x1e6>
    29be:	46 c3       	rjmp	.+1676   	; 0x304c <CheckPins+0x872>
        //read voltage at the Gate , to differ between MOSFET and JFET
        ADC_PORT = HiADCp;	//switch High-Pin directly to VCC
    29c0:	e8 b8       	out	0x08, r14	; 8
        ADC_DDR = HiADCm;	//switch High-Pin to output
    29c2:	e7 b8       	out	0x07, r14	; 7
        adc.tp2 = W10msReadADC(TristatePin); //read voltage at the assumed Gate 
    29c4:	89 81       	ldd	r24, Y+1	; 0x01
    29c6:	0e 94 81 13 	call	0x2702	; 0x2702 <W10msReadADC>
        if(adc.tp2<977) { 		//MOSFET
    29ca:	53 e0       	ldi	r21, 0x03	; 3
    29cc:	81 3d       	cpi	r24, 0xD1	; 209
    29ce:	95 07       	cpc	r25, r21
    29d0:	28 f4       	brcc	.+10     	; 0x29dc <CheckPins+0x202>
           PartFound = PART_FET;	//P-Kanal-MOSFET
    29d2:	84 e0       	ldi	r24, 0x04	; 4
    29d4:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_MOS|P_CHANNEL|D_MODE; //Depletion-MOSFET
    29d8:	82 e3       	ldi	r24, 0x32	; 50
    29da:	04 c0       	rjmp	.+8      	; 0x29e4 <CheckPins+0x20a>
        } else { 			//JFET (pn-passage between Gate and Source is conducting)
           PartFound = PART_FET;	//P-Kanal-JFET
    29dc:	84 e0       	ldi	r24, 0x04	; 4
    29de:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_JFET|P_CHANNEL|D_MODE;
    29e2:	84 e3       	ldi	r24, 0x34	; 52
    29e4:	80 93 06 01 	sts	0x0106, r24
        }
#if DebugOut == 5
        lcd_data('P');
        lcd_data('J');
#endif
        if(adc.tp1 > adc.hp1) {
    29e8:	ac 14       	cp	r10, r12
    29ea:	bd 04       	cpc	r11, r13
    29ec:	38 f4       	brcc	.+14     	; 0x29fc <CheckPins+0x222>
          ptrans.gthvoltage = adc.tp1 - adc.hp1;	//voltage GS (Gate - Source)
    29ee:	ca 18       	sub	r12, r10
    29f0:	db 08       	sbc	r13, r11
    29f2:	d0 92 63 01 	sts	0x0163, r13
    29f6:	c0 92 62 01 	sts	0x0162, r12
    29fa:	04 c0       	rjmp	.+8      	; 0x2a04 <CheckPins+0x22a>
        } else {
          ptrans.gthvoltage = 0;
    29fc:	10 92 63 01 	sts	0x0163, r1
    2a00:	10 92 62 01 	sts	0x0162, r1
        }
        ptrans.current = (unsigned int)(((unsigned long)(ADCconfig.U_AVCC - adc.hp1) * 1000) / RR680PL); // Id 0.01mA
    2a04:	60 91 35 01 	lds	r22, 0x0135
    2a08:	70 91 36 01 	lds	r23, 0x0136
    2a0c:	6a 19       	sub	r22, r10
    2a0e:	7b 09       	sbc	r23, r11
    2a10:	80 e0       	ldi	r24, 0x00	; 0
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	28 ee       	ldi	r18, 0xE8	; 232
    2a16:	33 e0       	ldi	r19, 0x03	; 3
    2a18:	40 e0       	ldi	r20, 0x00	; 0
    2a1a:	50 e0       	ldi	r21, 0x00	; 0
    2a1c:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
    2a20:	20 91 08 01 	lds	r18, 0x0108
    2a24:	30 91 09 01 	lds	r19, 0x0109
    2a28:	40 e0       	ldi	r20, 0x00	; 0
    2a2a:	50 e0       	ldi	r21, 0x00	; 0
    2a2c:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    2a30:	30 93 61 01 	sts	0x0161, r19
    2a34:	20 93 60 01 	sts	0x0160, r18
    2a38:	59 c1       	rjmp	.+690    	; 0x2cec <CheckPins+0x512>


  //there is more than 650uA current without TristatePin current 
#ifdef COMMON_COLLECTOR
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
    2a3a:	88 e0       	ldi	r24, 0x08	; 8
    2a3c:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;			// Collector direct to GND
    2a3e:	87 b8       	out	0x07, r8	; 7
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
    2a40:	f5 b8       	out	0x05, r15	; 5
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
    2a42:	2f 2c       	mov	r2, r15
    2a44:	25 28       	or	r2, r5
    2a46:	24 b8       	out	0x04, r2	; 4
  adc.hp1 = W5msReadADC(HighPin);	// voltage at the Emitter resistor
    2a48:	81 2f       	mov	r24, r17
    2a4a:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    2a4e:	9f 83       	std	Y+7, r25	; 0x07
    2a50:	8e 83       	std	Y+6, r24	; 0x06
  adc.rhp = ADCconfig.U_AVCC - adc.hp1;	// voltage at the Emitter resistor
    2a52:	c0 90 35 01 	lds	r12, 0x0135
    2a56:	d0 90 36 01 	lds	r13, 0x0136
  adc.tp1 = ReadADC(TristatePin);	// voltage at the base resistor
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
    2a5c:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
    2a60:	5c 01       	movw	r10, r24

  if (adc.tp1 < 10) {
    2a62:	8a 30       	cpi	r24, 0x0A	; 10
    2a64:	91 05       	cpc	r25, r1
    2a66:	b0 f5       	brcc	.+108    	; 0x2ad4 <CheckPins+0x2fa>
     R_DDR = 0;
    2a68:	14 b8       	out	0x04, r1	; 4
     wait_about5ms();		// clear TRIAC and Thyristor
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
    2a72:	89 2d       	mov	r24, r9
    2a74:	8f 29       	or	r24, r15
    2a76:	84 b9       	out	0x04, r24	; 4
     adc.hp1 = W5msReadADC(HighPin);
    2a78:	81 2f       	mov	r24, r17
    2a7a:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    2a7e:	9f 83       	std	Y+7, r25	; 0x07
    2a80:	8e 83       	std	Y+6, r24	; 0x06
     adc.rhp = ADCconfig.U_AVCC - adc.hp1;	// voltage at the Emitter resistor
    2a82:	c0 90 35 01 	lds	r12, 0x0135
    2a86:	d0 90 36 01 	lds	r13, 0x0136
    2a8a:	c8 1a       	sub	r12, r24
    2a8c:	d9 0a       	sbc	r13, r25
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
    2a8e:	89 81       	ldd	r24, Y+1	; 0x01
    2a90:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
    2a94:	5c 01       	movw	r10, r24
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.rhp * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
    2a96:	c6 01       	movw	r24, r12
    2a98:	a0 e0       	ldi	r26, 0x00	; 0
    2a9a:	b0 e0       	ldi	r27, 0x00	; 0
    2a9c:	8a 83       	std	Y+2, r24	; 0x02
    2a9e:	9b 83       	std	Y+3, r25	; 0x03
    2aa0:	ac 83       	std	Y+4, r26	; 0x04
    2aa2:	bd 83       	std	Y+5, r27	; 0x05
    2aa4:	20 91 08 01 	lds	r18, 0x0108
    2aa8:	30 91 09 01 	lds	r19, 0x0109
    2aac:	40 e0       	ldi	r20, 0x00	; 0
    2aae:	50 e0       	ldi	r21, 0x00	; 0
    2ab0:	60 e6       	ldi	r22, 0x60	; 96
    2ab2:	77 eb       	ldi	r23, 0xB7	; 183
    2ab4:	87 e4       	ldi	r24, 0x47	; 71
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    2abc:	6a 81       	ldd	r22, Y+2	; 0x02
    2abe:	7b 81       	ldd	r23, Y+3	; 0x03
    2ac0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ac2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ac4:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
    2ac8:	95 01       	movw	r18, r10
    2aca:	40 e0       	ldi	r20, 0x00	; 0
    2acc:	50 e0       	ldi	r21, 0x00	; 0
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
     adc.hp1 = W5msReadADC(HighPin);
     adc.rhp = ADCconfig.U_AVCC - adc.hp1;	// voltage at the Emitter resistor
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.rhp * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
    2ace:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    2ad2:	0d c0       	rjmp	.+26     	; 0x2aee <CheckPins+0x314>
  ADC_PORT = TXD_VAL;
  ADC_DDR = LoADCm;			// Collector direct to GND
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
  adc.hp1 = W5msReadADC(HighPin);	// voltage at the Emitter resistor
  adc.rhp = ADCconfig.U_AVCC - adc.hp1;	// voltage at the Emitter resistor
    2ad4:	c6 01       	movw	r24, r12
    2ad6:	ae 81       	ldd	r26, Y+6	; 0x06
    2ad8:	bf 81       	ldd	r27, Y+7	; 0x07
    2ada:	8a 1b       	sub	r24, r26
    2adc:	9b 0b       	sbc	r25, r27
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
 #else
     c_hfe = ((adc.rhp / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp1/500);
 #endif
  } else {
     c_hfe = (unsigned long)((adc.rhp - adc.tp1) / adc.tp1);
    2ade:	8a 19       	sub	r24, r10
    2ae0:	9b 09       	sbc	r25, r11
    2ae2:	b5 01       	movw	r22, r10
    2ae4:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <__udivmodhi4>
    2ae8:	9b 01       	movw	r18, r22
    2aea:	40 e0       	ldi	r20, 0x00	; 0
    2aec:	50 e0       	ldi	r21, 0x00	; 0
    2aee:	2a 83       	std	Y+2, r18	; 0x02
    2af0:	3b 83       	std	Y+3, r19	; 0x03
    2af2:	4c 83       	std	Y+4, r20	; 0x04
    2af4:	5d 83       	std	Y+5, r21	; 0x05
  }
#endif

  //set Pins again for circuit with common Emitter PNP
  R_DDR = 0;			//all Resistor Ports to Input
    2af6:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			//switch all resistor ports to GND
    2af8:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
    2afa:	e8 b8       	out	0x08, r14	; 8
  ADC_DDR = HiADCm;		//switch High-Pin to output
    2afc:	e7 b8       	out	0x07, r14	; 7
//  R_DDR = LoPinRL;		//switch R_L port for Low-Pin to output (GND)
  wait_about5ms();
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
  
  if(adc.lp_otr < 1977) {
    2b06:	39 eb       	ldi	r19, 0xB9	; 185
    2b08:	63 16       	cp	r6, r19
    2b0a:	37 e0       	ldi	r19, 0x07	; 7
    2b0c:	73 06       	cpc	r7, r19
    2b0e:	08 f0       	brcs	.+2      	; 0x2b12 <CheckPins+0x338>
    2b10:	9d c2       	rjmp	.+1338   	; 0x304c <CheckPins+0x872>
     lcd_data('E');
     lcd_testpin(HighPin);
     lcd_space();
#endif
     //Test to PNP
     R_DDR = LoPinRL | TriPinRL;	//switch R_L port for Tristate-Pin to output (GND), for Test of PNP
    2b12:	34 b8       	out	0x04, r3	; 4
     adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin
    2b14:	80 2f       	mov	r24, r16
    2b16:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
     if(adc.lp1 > 3422) {
    2b1a:	4d e0       	ldi	r20, 0x0D	; 13
    2b1c:	8f 35       	cpi	r24, 0x5F	; 95
    2b1e:	94 07       	cpc	r25, r20
    2b20:	08 f4       	brcc	.+2      	; 0x2b24 <CheckPins+0x34a>
    2b22:	ea c0       	rjmp	.+468    	; 0x2cf8 <CheckPins+0x51e>
        //component has current => PNP-Transistor or equivalent
        R_DDR = 0;
    2b24:	14 b8       	out	0x04, r1	; 4
        wait_about5ms();		// clear TRIAC and Thyristor
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
        //compute current amplification factor in both directions
        R_DDR = LoPinRL | TriPinRH;	//switch R_H port for Tristate-Pin (Base) to output (GND)
    2b2e:	c9 2c       	mov	r12, r9
    2b30:	c4 28       	or	r12, r4
    2b32:	c4 b8       	out	0x04, r12	; 4

        adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin (assumed Collector)
    2b34:	80 2f       	mov	r24, r16
    2b36:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    2b3a:	ac 01       	movw	r20, r24
        adc.tp2 = ReadADC(TristatePin);	//measure voltage at TristatePin (Base) 
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	4f 87       	std	Y+15, r20	; 0x0f
    2b40:	58 8b       	std	Y+16, r21	; 0x10
    2b42:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
    2b46:	99 87       	std	Y+9, r25	; 0x09
    2b48:	88 87       	std	Y+8, r24	; 0x08
        adc.hp2 = ReadADC(HighPin);	//measure voltage at HighPin (assumed Emitter)
    2b4a:	81 2f       	mov	r24, r17
    2b4c:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
    2b50:	9d 87       	std	Y+13, r25	; 0x0d
    2b52:	8c 87       	std	Y+12, r24	; 0x0c
//           PartReady = 1;
//        }

 
/*        if(adc.tp2 > 977)  */
        if(adc.tp2 > 2000) {
    2b54:	4f 85       	ldd	r20, Y+15	; 0x0f
    2b56:	58 89       	ldd	r21, Y+16	; 0x10
    2b58:	68 85       	ldd	r22, Y+8	; 0x08
    2b5a:	79 85       	ldd	r23, Y+9	; 0x09
    2b5c:	87 e0       	ldi	r24, 0x07	; 7
    2b5e:	61 3d       	cpi	r22, 0xD1	; 209
    2b60:	78 07       	cpc	r23, r24
    2b62:	08 f4       	brcc	.+2      	; 0x2b66 <CheckPins+0x38c>
    2b64:	6f c0       	rjmp	.+222    	; 0x2c44 <CheckPins+0x46a>
           //PNP-Transistor is found (Base voltage moves with Emitter to VCC)
           PartFound = PART_TRANSISTOR;
    2b66:	83 e0       	ldi	r24, 0x03	; 3
    2b68:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_PNP;
    2b6c:	8d e0       	ldi	r24, 0x0D	; 13
    2b6e:	80 93 06 01 	sts	0x0106, r24
           update_pins = 0;		// only update pins, if hFE is higher or Thyristor 
#ifdef COMMON_EMITTER
           //compute current amplification factor for circuit with common Emitter
           //e_hFE = B = Collector current / Base current
           tmp16 = adc.lp1;
           if (tmp16 > adc.lp_otr) {
    2b72:	64 16       	cp	r6, r20
    2b74:	75 06       	cpc	r7, r21
    2b76:	10 f4       	brcc	.+4      	; 0x2b7c <CheckPins+0x3a2>
              tmp16 -= adc.lp_otr;
    2b78:	46 19       	sub	r20, r6
    2b7a:	57 09       	sbc	r21, r7
           }

 #ifdef LONG_HFE
           e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
    2b7c:	6a 01       	movw	r12, r20
    2b7e:	ee 24       	eor	r14, r14
    2b80:	ff 24       	eor	r15, r15
    2b82:	20 91 03 01 	lds	r18, 0x0103
    2b86:	30 91 04 01 	lds	r19, 0x0104
    2b8a:	40 e0       	ldi	r20, 0x00	; 0
    2b8c:	50 e0       	ldi	r21, 0x00	; 0
    2b8e:	60 e6       	ldi	r22, 0x60	; 96
    2b90:	77 eb       	ldi	r23, 0xB7	; 183
    2b92:	87 e4       	ldi	r24, 0x47	; 71
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    2b9a:	c7 01       	movw	r24, r14
    2b9c:	b6 01       	movw	r22, r12
    2b9e:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
    2ba2:	a8 85       	ldd	r26, Y+8	; 0x08
    2ba4:	b9 85       	ldd	r27, Y+9	; 0x09
    2ba6:	9d 01       	movw	r18, r26
    2ba8:	40 e0       	ldi	r20, 0x00	; 0
    2baa:	50 e0       	ldi	r21, 0x00	; 0
           if (tmp16 > adc.lp_otr) {
              tmp16 -= adc.lp_otr;
           }

 #ifdef LONG_HFE
           e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
    2bac:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
 #else
           e_hfe = ((tmp16 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
           // first hFE or e_hfe is greater than last hfe ?
           if ((ptrans.count == 0) || (e_hfe > ptrans.hfe)){
    2bb0:	80 91 67 01 	lds	r24, 0x0167
    2bb4:	88 23       	and	r24, r24
    2bb6:	69 f0       	breq	.+26     	; 0x2bd2 <CheckPins+0x3f8>
    2bb8:	80 91 5a 01 	lds	r24, 0x015A
    2bbc:	90 91 5b 01 	lds	r25, 0x015B
    2bc0:	a0 91 5c 01 	lds	r26, 0x015C
    2bc4:	b0 91 5d 01 	lds	r27, 0x015D
    2bc8:	82 17       	cp	r24, r18
    2bca:	93 07       	cpc	r25, r19
    2bcc:	a4 07       	cpc	r26, r20
    2bce:	b5 07       	cpc	r27, r21
    2bd0:	a0 f4       	brcc	.+40     	; 0x2bfa <CheckPins+0x420>
              ptrans.hfe = e_hfe;				// hFE with common emitter
    2bd2:	20 93 5a 01 	sts	0x015A, r18
    2bd6:	30 93 5b 01 	sts	0x015B, r19
    2bda:	40 93 5c 01 	sts	0x015C, r20
    2bde:	50 93 5d 01 	sts	0x015D, r21
              ptrans.uBE = adc.hp2 - adc.tp2;	// Base Emitter Voltage
    2be2:	8c 85       	ldd	r24, Y+12	; 0x0c
    2be4:	9d 85       	ldd	r25, Y+13	; 0x0d
    2be6:	e8 85       	ldd	r30, Y+8	; 0x08
    2be8:	f9 85       	ldd	r31, Y+9	; 0x09
    2bea:	8e 1b       	sub	r24, r30
    2bec:	9f 0b       	sbc	r25, r31
    2bee:	90 93 5f 01 	sts	0x015F, r25
    2bf2:	80 93 5e 01 	sts	0x015E, r24
              update_pins = 1;		// trans.ebc must be updated
    2bf6:	21 e0       	ldi	r18, 0x01	; 1
    2bf8:	01 c0       	rjmp	.+2      	; 0x2bfc <CheckPins+0x422>
/*        if(adc.tp2 > 977)  */
        if(adc.tp2 > 2000) {
           //PNP-Transistor is found (Base voltage moves with Emitter to VCC)
           PartFound = PART_TRANSISTOR;
           PartMode = PART_MODE_PNP;
           update_pins = 0;		// only update pins, if hFE is higher or Thyristor 
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
#ifdef COMMON_COLLECTOR
           //current amplification factor for common  Collector (Emitter follower)
           // c_hFE = (Emitter current - Base current) / Base current
 #ifdef COMMON_EMITTER
           // also with COMMON_EMITTER, is c_hfe greater than the last hFE?
           if (c_hfe > ptrans.hfe)  // trans.hfe is allready e_hfe or last c_hFE
    2bfc:	80 91 5a 01 	lds	r24, 0x015A
    2c00:	90 91 5b 01 	lds	r25, 0x015B
    2c04:	a0 91 5c 01 	lds	r26, 0x015C
    2c08:	b0 91 5d 01 	lds	r27, 0x015D
    2c0c:	4a 81       	ldd	r20, Y+2	; 0x02
    2c0e:	5b 81       	ldd	r21, Y+3	; 0x03
    2c10:	6c 81       	ldd	r22, Y+4	; 0x04
    2c12:	7d 81       	ldd	r23, Y+5	; 0x05
    2c14:	84 17       	cp	r24, r20
    2c16:	95 07       	cpc	r25, r21
    2c18:	a6 07       	cpc	r26, r22
    2c1a:	b7 07       	cpc	r27, r23
    2c1c:	08 f0       	brcs	.+2      	; 0x2c20 <CheckPins+0x446>
    2c1e:	11 c5       	rjmp	.+2594   	; 0x3642 <CheckPins+0xe68>
 #else
           // without COMMON_EMITTER , c_hFE is first or greater than the old one?
           if ((ptrans.count == 0) || (c_hfe > ptrans.hfe)) 
 #endif
           {
              ptrans.hfe = c_hfe;		// c_hfe is the best
    2c20:	40 93 5a 01 	sts	0x015A, r20
    2c24:	50 93 5b 01 	sts	0x015B, r21
    2c28:	60 93 5c 01 	sts	0x015C, r22
    2c2c:	70 93 5d 01 	sts	0x015D, r23
              ptrans.uBE = adc.hp1 - adc.tp1;	// Base Emitter Voltage common collector
    2c30:	8e 81       	ldd	r24, Y+6	; 0x06
    2c32:	9f 81       	ldd	r25, Y+7	; 0x07
    2c34:	8a 19       	sub	r24, r10
    2c36:	9b 09       	sbc	r25, r11
    2c38:	90 93 5f 01 	sts	0x015F, r25
    2c3c:	80 93 5e 01 	sts	0x015E, r24
              update_pins = 1;		// trans.ebc must be updated
    2c40:	21 e0       	ldi	r18, 0x01	; 1
    2c42:	ff c4       	rjmp	.+2558   	; 0x3642 <CheckPins+0xe68>
           }
#endif
           goto savePresult;		// marke P type, save Pins and exit
        }
        // is probably a P-E-MOS, check voltage
        if((adc.lp_otr < 97) && (adc.lp1 > 2000)) {
    2c44:	61 e6       	ldi	r22, 0x61	; 97
    2c46:	66 16       	cp	r6, r22
    2c48:	71 04       	cpc	r7, r1
    2c4a:	08 f0       	brcs	.+2      	; 0x2c4e <CheckPins+0x474>
    2c4c:	55 c0       	rjmp	.+170    	; 0x2cf8 <CheckPins+0x51e>
    2c4e:	77 e0       	ldi	r23, 0x07	; 7
    2c50:	41 3d       	cpi	r20, 0xD1	; 209
    2c52:	57 07       	cpc	r21, r23
    2c54:	08 f4       	brcc	.+2      	; 0x2c58 <CheckPins+0x47e>
    2c56:	50 c0       	rjmp	.+160    	; 0x2cf8 <CheckPins+0x51e>
           //is flow voltage low enough in the closed  state?
           //(since D-Mode-FET would be by mistake detected as E-Mode )
           PartFound = PART_FET;		//P-Kanal-MOSFET is found (Basis/Gate moves not to VCC)
    2c58:	84 e0       	ldi	r24, 0x04	; 4
    2c5a:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_MOS|P_CHANNEL|E_MODE;
    2c5e:	82 e1       	ldi	r24, 0x12	; 18
    2c60:	80 93 06 01 	sts	0x0106, r24
           if (adc.hp2 > (adc.lp1+250)) {
    2c64:	46 50       	subi	r20, 0x06	; 6
    2c66:	5f 4f       	sbci	r21, 0xFF	; 255
    2c68:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c6a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c6c:	48 17       	cp	r20, r24
    2c6e:	59 07       	cpc	r21, r25
    2c70:	18 f4       	brcc	.+6      	; 0x2c78 <CheckPins+0x49e>
              //Drain-Source Voltage to high, must be a IGBT
              PartMode = PART_MODE_IGBT|P_CHANNEL|E_MODE;
    2c72:	83 e1       	ldi	r24, 0x13	; 19
    2c74:	80 93 06 01 	sts	0x0106, r24
           }
       	   //measure the Gate threshold voltage
           //Switching of Drain is monitored with digital input
           // Low level is specified up to 0.3 * VCC
           // High level is specified above 0.6 * VCC
           PinMSK = LoADCm & 7;
    2c78:	97 e0       	ldi	r25, 0x07	; 7
    2c7a:	89 22       	and	r8, r25
       	   ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
    2c7e:	80 64       	ori	r24, 0x40	; 64
    2c80:	80 93 7c 00 	sts	0x007C, r24
    2c84:	eb e0       	ldi	r30, 0x0B	; 11
    2c86:	ae 2e       	mov	r10, r30
       	   tmp16 = 1;			// round up ((1*4)/9)
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
       	      while (!(ADC_PIN&PinMSK));		// Wait, until the MOSFET switches and Drain moves to VCC
                  			// 1 is detected with more than 2.5V (up to 2.57V) with tests of mega168 and mega328
       	      R_DDR = LoPinRL;
       	      ADCSRA |= (1<<ADSC);		// Start Conversion
       	      while (ADCSRA&(1<<ADSC));		// wait
      	      tmp16 += (1023 - ADCW);	// Add Tristatepin-Voltage
    2c8c:	7f ef       	ldi	r23, 0xFF	; 255
    2c8e:	e7 2e       	mov	r14, r23
    2c90:	73 e0       	ldi	r23, 0x03	; 3
    2c92:	f7 2e       	mov	r15, r23
    2c94:	3c 01       	movw	r6, r24
           // High level is specified above 0.6 * VCC
           PinMSK = LoADCm & 7;
       	   ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
       	   tmp16 = 1;			// round up ((1*4)/9)
       	   for(ii=0;ii<11;ii++) {
       	      wdt_reset();
    2c96:	a8 95       	wdr
       	      ChargePin10ms(TriPinRL,1);
    2c98:	85 2d       	mov	r24, r5
    2c9a:	61 e0       	ldi	r22, 0x01	; 1
    2c9c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <ChargePin10ms>
                R_DDR = LoPinRL | TriPinRH;		//switch R_H for Tristate-Pin (Basis) to GND
    2ca0:	c4 b8       	out	0x04, r12	; 4
       	      while (!(ADC_PIN&PinMSK));		// Wait, until the MOSFET switches and Drain moves to VCC
    2ca2:	86 b1       	in	r24, 0x06	; 6
    2ca4:	88 21       	and	r24, r8
    2ca6:	e9 f3       	breq	.-6      	; 0x2ca2 <CheckPins+0x4c8>
                  			// 1 is detected with more than 2.5V (up to 2.57V) with tests of mega168 and mega328
       	      R_DDR = LoPinRL;
    2ca8:	44 b8       	out	0x04, r4	; 4
       	      ADCSRA |= (1<<ADSC);		// Start Conversion
    2caa:	80 91 7a 00 	lds	r24, 0x007A
    2cae:	80 64       	ori	r24, 0x40	; 64
    2cb0:	80 93 7a 00 	sts	0x007A, r24
       	      while (ADCSRA&(1<<ADSC));		// wait
    2cb4:	80 91 7a 00 	lds	r24, 0x007A
    2cb8:	86 fd       	sbrc	r24, 6
    2cba:	fc cf       	rjmp	.-8      	; 0x2cb4 <CheckPins+0x4da>
      	      tmp16 += (1023 - ADCW);	// Add Tristatepin-Voltage
    2cbc:	20 91 78 00 	lds	r18, 0x0078
    2cc0:	30 91 79 00 	lds	r19, 0x0079
    2cc4:	d7 01       	movw	r26, r14
    2cc6:	a2 1b       	sub	r26, r18
    2cc8:	b3 0b       	sbc	r27, r19
    2cca:	6a 0e       	add	r6, r26
    2ccc:	7b 1e       	adc	r7, r27
    2cce:	aa 94       	dec	r10
           // Low level is specified up to 0.3 * VCC
           // High level is specified above 0.6 * VCC
           PinMSK = LoADCm & 7;
       	   ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
       	   tmp16 = 1;			// round up ((1*4)/9)
       	   for(ii=0;ii<11;ii++) {
    2cd0:	11 f7       	brne	.-60     	; 0x2c96 <CheckPins+0x4bc>
    2cd2:	c3 01       	movw	r24, r6
       	      R_DDR = LoPinRL;
       	      ADCSRA |= (1<<ADSC);		// Start Conversion
       	      while (ADCSRA&(1<<ADSC));		// wait
      	      tmp16 += (1023 - ADCW);	// Add Tristatepin-Voltage
           }
           tmp16 *= 4;		// is equal to 44*ADCW
    2cd4:	88 0f       	add	r24, r24
    2cd6:	99 1f       	adc	r25, r25
    2cd8:	88 0f       	add	r24, r24
    2cda:	99 1f       	adc	r25, r25
           ptrans.gthvoltage = tmp16 / 9;		// gives resolution in mV
    2cdc:	69 e0       	ldi	r22, 0x09	; 9
    2cde:	70 e0       	ldi	r23, 0x00	; 0
    2ce0:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <__udivmodhi4>
    2ce4:	70 93 63 01 	sts	0x0163, r23
    2ce8:	60 93 62 01 	sts	0x0162, r22
           ptrans.count++;		// count FET as two for accelerate searching
    2cec:	80 91 67 01 	lds	r24, 0x0167
    2cf0:	8f 5f       	subi	r24, 0xFF	; 255
    2cf2:	80 93 67 01 	sts	0x0167, r24
    2cf6:	a4 cf       	rjmp	.-184    	; 0x2c40 <CheckPins+0x466>
        }
    } // end component has current => PNP

#ifdef COMMON_COLLECTOR
    // Low-Pin=RL- HighPin=VCC
    R_DDR = LoPinRL | TriPinRL;
    2cf8:	34 b8       	out	0x04, r3	; 4
    R_PORT = TriPinRL;			// TriPin=RL+  NPN with common Collector
    2cfa:	55 b8       	out	0x05, r5	; 5
    adc.lp1 = W5msReadADC(LowPin);	// voltage at Emitter resistor
    2cfc:	80 2f       	mov	r24, r16
    2cfe:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    2d02:	9f 83       	std	Y+7, r25	; 0x07
    2d04:	8e 83       	std	Y+6, r24	; 0x06
    adc.tp1 = ReadADC(TristatePin);	// voltage at the Base 
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
    2d0c:	9b 83       	std	Y+3, r25	; 0x03
    2d0e:	8a 83       	std	Y+2, r24	; 0x02
    adc.rtp = ADCconfig.U_AVCC - adc.tp1;	// voltage at Base resistor
    2d10:	60 91 35 01 	lds	r22, 0x0135
    2d14:	70 91 36 01 	lds	r23, 0x0136
    2d18:	68 1b       	sub	r22, r24
    2d1a:	79 0b       	sbc	r23, r25
    if (adc.rtp < 10) { 
    2d1c:	6a 30       	cpi	r22, 0x0A	; 10
    2d1e:	71 05       	cpc	r23, r1
    2d20:	c8 f5       	brcc	.+114    	; 0x2d94 <CheckPins+0x5ba>
       R_DDR = 0;
    2d22:	14 b8       	out	0x04, r1	; 4
       wait_about5ms();		// clear TRIAC and Thyristor
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
       R_DDR = LoPinRL | TriPinRH;
    2d2c:	89 2d       	mov	r24, r9
    2d2e:	84 29       	or	r24, r4
    2d30:	84 b9       	out	0x04, r24	; 4
       R_PORT = TriPinRH;		// Tripin=RH+
    2d32:	95 b8       	out	0x05, r9	; 5
       adc.lp1 = W5msReadADC(LowPin);
    2d34:	80 2f       	mov	r24, r16
    2d36:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    2d3a:	9f 83       	std	Y+7, r25	; 0x07
    2d3c:	8e 83       	std	Y+6, r24	; 0x06
       adc.tp1 = ReadADC(TristatePin);	// voltage at the Base 
    2d3e:	89 81       	ldd	r24, Y+1	; 0x01
    2d40:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
    2d44:	9b 83       	std	Y+3, r25	; 0x03
    2d46:	8a 83       	std	Y+2, r24	; 0x02
       adc.rtp = ADCconfig.U_AVCC - adc.tp1;	// voltage at Base resistor
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
    2d48:	ee 81       	ldd	r30, Y+6	; 0x06
    2d4a:	ff 81       	ldd	r31, Y+7	; 0x07
    2d4c:	5f 01       	movw	r10, r30
    2d4e:	cc 24       	eor	r12, r12
    2d50:	dd 24       	eor	r13, r13
    2d52:	20 91 03 01 	lds	r18, 0x0103
    2d56:	30 91 04 01 	lds	r19, 0x0104
    2d5a:	40 e0       	ldi	r20, 0x00	; 0
    2d5c:	50 e0       	ldi	r21, 0x00	; 0
    2d5e:	60 e6       	ldi	r22, 0x60	; 96
    2d60:	77 eb       	ldi	r23, 0xB7	; 183
    2d62:	87 e4       	ldi	r24, 0x47	; 71
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    2d6a:	c6 01       	movw	r24, r12
    2d6c:	b5 01       	movw	r22, r10
    2d6e:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
       wait_about5ms();		// clear TRIAC and Thyristor
       R_DDR = LoPinRL | TriPinRH;
       R_PORT = TriPinRH;		// Tripin=RH+
       adc.lp1 = W5msReadADC(LowPin);
       adc.tp1 = ReadADC(TristatePin);	// voltage at the Base 
       adc.rtp = ADCconfig.U_AVCC - adc.tp1;	// voltage at Base resistor
    2d72:	20 91 35 01 	lds	r18, 0x0135
    2d76:	30 91 36 01 	lds	r19, 0x0136
    2d7a:	4a 81       	ldd	r20, Y+2	; 0x02
    2d7c:	5b 81       	ldd	r21, Y+3	; 0x03
    2d7e:	24 1b       	sub	r18, r20
    2d80:	35 0b       	sbc	r19, r21
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
              (unsigned int)RR680MI)) / (unsigned int)adc.rtp;	
    2d82:	40 e0       	ldi	r20, 0x00	; 0
    2d84:	50 e0       	ldi	r21, 0x00	; 0
       R_PORT = TriPinRH;		// Tripin=RH+
       adc.lp1 = W5msReadADC(LowPin);
       adc.tp1 = ReadADC(TristatePin);	// voltage at the Base 
       adc.rtp = ADCconfig.U_AVCC - adc.tp1;	// voltage at Base resistor
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
    2d86:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    2d8a:	28 87       	std	Y+8, r18	; 0x08
    2d8c:	39 87       	std	Y+9, r19	; 0x09
    2d8e:	4a 87       	std	Y+10, r20	; 0x0a
    2d90:	5b 87       	std	Y+11, r21	; 0x0b
    2d92:	0d c0       	rjmp	.+26     	; 0x2dae <CheckPins+0x5d4>
              (unsigned int)RR680MI)) / (unsigned int)adc.rtp;	
 #else
       c_hfe = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
    } else {
       c_hfe = (adc.lp1 - adc.rtp) / adc.rtp;
    2d94:	8e 81       	ldd	r24, Y+6	; 0x06
    2d96:	9f 81       	ldd	r25, Y+7	; 0x07
    2d98:	86 1b       	sub	r24, r22
    2d9a:	97 0b       	sbc	r25, r23
    2d9c:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <__udivmodhi4>
    2da0:	cb 01       	movw	r24, r22
    2da2:	a0 e0       	ldi	r26, 0x00	; 0
    2da4:	b0 e0       	ldi	r27, 0x00	; 0
    2da6:	88 87       	std	Y+8, r24	; 0x08
    2da8:	99 87       	std	Y+9, r25	; 0x09
    2daa:	aa 87       	std	Y+10, r26	; 0x0a
    2dac:	bb 87       	std	Y+11, r27	; 0x0b
    }
#endif
    //Tristate (can be Base) to VCC, Test if NPN
    ADC_DDR = LoADCm;		//Low-Pin to output 0V
    2dae:	87 b8       	out	0x07, r8	; 7
    ADC_PORT = TXD_VAL;			//switch Low-Pin to GND
    2db0:	88 e0       	ldi	r24, 0x08	; 8
    2db2:	88 b9       	out	0x08, r24	; 8
    R_DDR = TriPinRL | HiPinRL;		//RL port for High-Pin and Tristate-Pin to output
    2db4:	24 b8       	out	0x04, r2	; 4
#ifdef SHOW_ICE
    R_PORT =  HiPinRL;	//RL port for High-Pin and Tristate-Pin to GND
    adc.vCEs = ADCconfig.U_AVCC - W5msReadADC(HighPin); // measure voltage a High-Pin, Base low
#endif
    R_PORT = TriPinRL | HiPinRL;	//RL port for High-Pin and Tristate-Pin to Vcc
    2db6:	25 b8       	out	0x05, r2	; 5
    adc.hp1 = W5msReadADC(HighPin);	//measure voltage at High-Pin  (Collector)
    2db8:	81 2f       	mov	r24, r17
    2dba:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
#ifdef WITH_THYRISTOR_GATE_V
    adc.tp2 = ReadADC(TristatePin);	//voltage of gate
    adc.lp2 = ReadADC(LowPin);		//voltage of Cathode
#endif
    if(adc.hp1 < 1600) {
    2dbe:	a6 e0       	ldi	r26, 0x06	; 6
    2dc0:	80 34       	cpi	r24, 0x40	; 64
    2dc2:	9a 07       	cpc	r25, r26
    2dc4:	08 f0       	brcs	.+2      	; 0x2dc8 <CheckPins+0x5ee>
    2dc6:	3f c1       	rjmp	.+638    	; 0x3046 <CheckPins+0x86c>
       //component has current => NPN-Transistor or somthing else

       //Test auf Thyristor:
       //Gate discharge
       ChargePin10ms(TriPinRL,0);	//Tristate-Pin (Gate) across R_L 10ms to GND
    2dc8:	85 2d       	mov	r24, r5
    2dca:	60 e0       	ldi	r22, 0x00	; 0
    2dcc:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <ChargePin10ms>
       adc.hp3 = W5msReadADC(HighPin);	//read voltage at High-Pin (probably Anode) again
    2dd0:	81 2f       	mov	r24, r17
    2dd2:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    2dd6:	6c 01       	movw	r12, r24
					//current should still flow, if not,
					// no Thyristor or holding current to low 
		 	
       R_PORT = 0;			//switch R_L for High-Pin (probably Anode) to GND (turn off)
    2dd8:	15 b8       	out	0x05, r1	; 5
       wait_about5ms();
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
       R_PORT = HiPinRL;		//switch R_L for High-Pin (probably Anode) again to VCC
    2de2:	f5 b8       	out	0x05, r15	; 5
       adc.hp2 = W5msReadADC(HighPin);	//measure voltage at the High-Pin (probably Anode) again
    2de4:	81 2f       	mov	r24, r17
    2de6:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
       if((adc.hp3 < 1600) && (adc.hp2 > 4400)) {
    2dea:	b0 e4       	ldi	r27, 0x40	; 64
    2dec:	cb 16       	cp	r12, r27
    2dee:	b6 e0       	ldi	r27, 0x06	; 6
    2df0:	db 06       	cpc	r13, r27
    2df2:	08 f0       	brcs	.+2      	; 0x2df6 <CheckPins+0x61c>
    2df4:	41 c0       	rjmp	.+130    	; 0x2e78 <CheckPins+0x69e>
    2df6:	e1 e1       	ldi	r30, 0x11	; 17
    2df8:	81 33       	cpi	r24, 0x31	; 49
    2dfa:	9e 07       	cpc	r25, r30
    2dfc:	e8 f1       	brcs	.+122    	; 0x2e78 <CheckPins+0x69e>
          //if the holding current was switched off the thyristor must be switched off too. 
          //if Thyristor was still swiched on, if gate was switched off => Thyristor
          PartFound = PART_THYRISTOR;
    2dfe:	85 e0       	ldi	r24, 0x05	; 5
    2e00:	80 93 07 01 	sts	0x0107, r24
#ifdef WITH_THYRISTOR_GATE_V
          ntrans.uBE = adc.tp2 - adc.lp2;	// Gate - Cathode Voltage 
          ntrans.gthvoltage = adc.hp1 - adc.lp2;	// Anode-Cathode Voltage
#endif
          //Test if Triac
          R_DDR = 0;
    2e04:	14 b8       	out	0x04, r1	; 4
          R_PORT = 0;
    2e06:	15 b8       	out	0x05, r1	; 5
          ADC_PORT = LoADCp;	//Low-Pin fix to VCC
    2e08:	88 b8       	out	0x08, r8	; 8
          wait_about5ms();
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
          R_DDR = HiPinRL;		//switch R_L port HighPin to output (GND)
    2e12:	f4 b8       	out	0x04, r15	; 4
          if(W5msReadADC(HighPin) > 244) {
    2e14:	81 2f       	mov	r24, r17
    2e16:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    2e1a:	85 3f       	cpi	r24, 0xF5	; 245
    2e1c:	91 05       	cpc	r25, r1
    2e1e:	08 f0       	brcs	.+2      	; 0x2e22 <CheckPins+0x648>
    2e20:	1f c4       	rjmp	.+2110   	; 0x3660 <CheckPins+0xe86>
             goto saveNresult;		//measure voltage at the  High-Pin (probably A2); if too high:
                                	//component has current => kein Triac
          }
          R_DDR = HiPinRL | TriPinRL;	//switch R_L port for TristatePin (Gate) to output (GND) => Triac should be triggered 
    2e22:	24 b8       	out	0x04, r2	; 4
          if(W5msReadADC(TristatePin) < 977) {
    2e24:	89 81       	ldd	r24, Y+1	; 0x01
    2e26:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    2e2a:	f3 e0       	ldi	r31, 0x03	; 3
    2e2c:	81 3d       	cpi	r24, 0xD1	; 209
    2e2e:	9f 07       	cpc	r25, r31
    2e30:	08 f4       	brcc	.+2      	; 0x2e34 <CheckPins+0x65a>
    2e32:	16 c4       	rjmp	.+2092   	; 0x3660 <CheckPins+0xe86>
             goto saveNresult; 		//measure voltage at the Tristate-Pin (probably Gate) ;
                              		// if to low, abort 
          }
          if(ReadADC(HighPin) < 733) {
    2e34:	81 2f       	mov	r24, r17
    2e36:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
    2e3a:	22 e0       	ldi	r18, 0x02	; 2
    2e3c:	8d 3d       	cpi	r24, 0xDD	; 221
    2e3e:	92 07       	cpc	r25, r18
    2e40:	08 f4       	brcc	.+2      	; 0x2e44 <CheckPins+0x66a>
    2e42:	0e c4       	rjmp	.+2076   	; 0x3660 <CheckPins+0xe86>
             goto saveNresult; 		//component has no current => no Triac => abort
          }
          R_DDR = HiPinRL;		//TristatePin (Gate) to input 
    2e44:	f4 b8       	out	0x04, r15	; 4
          if(W5msReadADC(HighPin) < 733) {
    2e46:	81 2f       	mov	r24, r17
    2e48:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    2e4c:	32 e0       	ldi	r19, 0x02	; 2
    2e4e:	8d 3d       	cpi	r24, 0xDD	; 221
    2e50:	93 07       	cpc	r25, r19
    2e52:	08 f4       	brcc	.+2      	; 0x2e56 <CheckPins+0x67c>
    2e54:	05 c4       	rjmp	.+2058   	; 0x3660 <CheckPins+0xe86>
             goto saveNresult; 		//component has no current without base current => no Triac => abort
          }
          R_PORT = HiPinRL;		//switch R_L port for HighPin to VCC => switch off holding current 
    2e56:	f5 b8       	out	0x05, r15	; 5
          wait_about5ms();
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
          R_PORT = 0;			//switch R_L port for HighPin again to GND; Triac should now switched off
    2e60:	15 b8       	out	0x05, r1	; 5
          if(W5msReadADC(HighPin) > 244) {
    2e62:	81 2f       	mov	r24, r17
    2e64:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    2e68:	85 3f       	cpi	r24, 0xF5	; 245
    2e6a:	91 05       	cpc	r25, r1
    2e6c:	08 f0       	brcs	.+2      	; 0x2e70 <CheckPins+0x696>
    2e6e:	f8 c3       	rjmp	.+2032   	; 0x3660 <CheckPins+0xe86>
             goto saveNresult;		//measure voltage at the High-Pin (probably A2) ;
                                	//if to high, component is not switched off => no Triac, abort
         }
         PartFound = PART_TRIAC;
    2e70:	86 e0       	ldi	r24, 0x06	; 6
    2e72:	80 93 07 01 	sts	0x0107, r24
    2e76:	e1 c0       	rjmp	.+450    	; 0x303a <CheckPins+0x860>
         ntrans.count++;		// mark as two N-type transistors
         goto saveNresult;
        }
      //Test if NPN Transistor or MOSFET
      // ADC_DDR = LoADCm;	//Low-Pin to output 0V
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
    2e78:	9f 28       	or	r9, r15
    2e7a:	94 b8       	out	0x04, r9	; 4
      R_PORT = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to VCC
    2e7c:	95 b8       	out	0x05, r9	; 5
      adc.hp2 = W20msReadADC(HighPin);	//measure the voltage at the collector  
    2e7e:	81 2f       	mov	r24, r17
    2e80:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <W20msReadADC>
    2e84:	6c 01       	movw	r12, r24
      adc.rhp = ADCconfig.U_AVCC - adc.hp2;	// voltage at the collector resistor
    2e86:	20 91 35 01 	lds	r18, 0x0135
    2e8a:	30 91 36 01 	lds	r19, 0x0136
    2e8e:	28 1b       	sub	r18, r24
    2e90:	39 0b       	sbc	r19, r25
      adc.tp2 = ReadADC(TristatePin);	//measure the voltage at the base 
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	29 8b       	std	Y+17, r18	; 0x11
    2e96:	3e 87       	std	Y+14, r19	; 0x0e
    2e98:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
    2e9c:	9d 87       	std	Y+13, r25	; 0x0d
    2e9e:	8c 87       	std	Y+12, r24	; 0x0c
      adc.rtp = ADCconfig.U_AVCC - adc.tp2;	// voltage at the base resistor
    2ea0:	a0 90 35 01 	lds	r10, 0x0135
    2ea4:	b0 90 36 01 	lds	r11, 0x0136
    2ea8:	a8 1a       	sub	r10, r24
    2eaa:	b9 0a       	sbc	r11, r25
      adc.lp2 = ReadADC(LowPin);
    2eac:	80 2f       	mov	r24, r16
    2eae:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
    2eb2:	1c 01       	movw	r2, r24

//      if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
//         PartReady = 1;	//check, if test is already done once
//      }

      if(adc.rtp > 2557) {		// Basis-voltage R_H is low enough
    2eb4:	29 89       	ldd	r18, Y+17	; 0x11
    2eb6:	3e 85       	ldd	r19, Y+14	; 0x0e
    2eb8:	4e ef       	ldi	r20, 0xFE	; 254
    2eba:	a4 16       	cp	r10, r20
    2ebc:	49 e0       	ldi	r20, 0x09	; 9
    2ebe:	b4 06       	cpc	r11, r20
    2ec0:	08 f4       	brcc	.+2      	; 0x2ec4 <CheckPins+0x6ea>
    2ec2:	6c c0       	rjmp	.+216    	; 0x2f9c <CheckPins+0x7c2>
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
    2ec4:	83 e0       	ldi	r24, 0x03	; 3
    2ec6:	80 93 07 01 	sts	0x0107, r24
         PartMode = PART_MODE_NPN;
    2eca:	8c e0       	ldi	r24, 0x0C	; 12
    2ecc:	80 93 06 01 	sts	0x0106, r24
 #ifdef COMMON_EMITTER

         //compute current amplification factor for common Emitter
         //hFE = B = Collector current / Base current
         tmp16 = adc.rhp;
         if (tmp16 > adc.lp_otr) {
    2ed0:	62 16       	cp	r6, r18
    2ed2:	73 06       	cpc	r7, r19
    2ed4:	10 f4       	brcc	.+4      	; 0x2eda <CheckPins+0x700>
            tmp16 -= adc.lp_otr;
    2ed6:	26 19       	sub	r18, r6
    2ed8:	37 09       	sbc	r19, r7
         }

  #ifdef LONG_HFE
         e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
    2eda:	69 01       	movw	r12, r18
    2edc:	ee 24       	eor	r14, r14
    2ede:	ff 24       	eor	r15, r15
    2ee0:	20 91 08 01 	lds	r18, 0x0108
    2ee4:	30 91 09 01 	lds	r19, 0x0109
    2ee8:	40 e0       	ldi	r20, 0x00	; 0
    2eea:	50 e0       	ldi	r21, 0x00	; 0
    2eec:	60 e6       	ldi	r22, 0x60	; 96
    2eee:	77 eb       	ldi	r23, 0xB7	; 183
    2ef0:	87 e4       	ldi	r24, 0x47	; 71
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    2ef8:	c7 01       	movw	r24, r14
    2efa:	b6 01       	movw	r22, r12
    2efc:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.rtp;	
    2f00:	95 01       	movw	r18, r10
    2f02:	40 e0       	ldi	r20, 0x00	; 0
    2f04:	50 e0       	ldi	r21, 0x00	; 0
         if (tmp16 > adc.lp_otr) {
            tmp16 -= adc.lp_otr;
         }

  #ifdef LONG_HFE
         e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
    2f06:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
              (unsigned int)RR680PL)) / (unsigned int)adc.rtp;	
  #else
         e_hfe = ((tmp16 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.rtp/500);
  #endif
         if ((ntrans.count == 0) || (e_hfe > ntrans.hfe)){
    2f0a:	80 91 4f 01 	lds	r24, 0x014F
    2f0e:	88 23       	and	r24, r24
    2f10:	69 f0       	breq	.+26     	; 0x2f2c <CheckPins+0x752>
    2f12:	80 91 42 01 	lds	r24, 0x0142
    2f16:	90 91 43 01 	lds	r25, 0x0143
    2f1a:	a0 91 44 01 	lds	r26, 0x0144
    2f1e:	b0 91 45 01 	lds	r27, 0x0145
    2f22:	82 17       	cp	r24, r18
    2f24:	93 07       	cpc	r25, r19
    2f26:	a4 07       	cpc	r26, r20
    2f28:	b5 07       	cpc	r27, r21
    2f2a:	90 f4       	brcc	.+36     	; 0x2f50 <CheckPins+0x776>
            ntrans.hfe = e_hfe;
    2f2c:	20 93 42 01 	sts	0x0142, r18
    2f30:	30 93 43 01 	sts	0x0143, r19
    2f34:	40 93 44 01 	sts	0x0144, r20
    2f38:	50 93 45 01 	sts	0x0145, r21
            ntrans.uBE = adc.tp2 - adc.lp2;
    2f3c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f3e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f40:	82 19       	sub	r24, r2
    2f42:	93 09       	sbc	r25, r3
    2f44:	90 93 47 01 	sts	0x0147, r25
    2f48:	80 93 46 01 	sts	0x0146, r24
            update_pins = 1;
    2f4c:	21 e0       	ldi	r18, 0x01	; 1
    2f4e:	01 c0       	rjmp	.+2      	; 0x2f52 <CheckPins+0x778>
//      }

      if(adc.rtp > 2557) {		// Basis-voltage R_H is low enough
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
         PartMode = PART_MODE_NPN;
         update_pins = 0;		// only update pins, if better hFE
    2f50:	20 e0       	ldi	r18, 0x00	; 0
 #endif
#ifdef COMMON_COLLECTOR
          //compare current amplification factor for common Collector (Emitter follower)
          // hFE = (Emitterstrom - Basisstrom) / Basisstrom
 #ifdef COMMON_EMITTER
          if (c_hfe >  ntrans.hfe)
    2f52:	80 91 42 01 	lds	r24, 0x0142
    2f56:	90 91 43 01 	lds	r25, 0x0143
    2f5a:	a0 91 44 01 	lds	r26, 0x0144
    2f5e:	b0 91 45 01 	lds	r27, 0x0145
    2f62:	48 85       	ldd	r20, Y+8	; 0x08
    2f64:	59 85       	ldd	r21, Y+9	; 0x09
    2f66:	6a 85       	ldd	r22, Y+10	; 0x0a
    2f68:	7b 85       	ldd	r23, Y+11	; 0x0b
    2f6a:	84 17       	cp	r24, r20
    2f6c:	95 07       	cpc	r25, r21
    2f6e:	a6 07       	cpc	r26, r22
    2f70:	b7 07       	cpc	r27, r23
    2f72:	08 f0       	brcs	.+2      	; 0x2f76 <CheckPins+0x79c>
    2f74:	76 c3       	rjmp	.+1772   	; 0x3662 <CheckPins+0xe88>
 #else
          if ((ntrans.count == 0) || (c_hfe >  ntrans.hfe))
 #endif
          {
            ntrans.hfe = c_hfe;
    2f76:	40 93 42 01 	sts	0x0142, r20
    2f7a:	50 93 43 01 	sts	0x0143, r21
    2f7e:	60 93 44 01 	sts	0x0144, r22
    2f82:	70 93 45 01 	sts	0x0145, r23
            ntrans.uBE = adc.tp1 - adc.lp1;
    2f86:	8a 81       	ldd	r24, Y+2	; 0x02
    2f88:	9b 81       	ldd	r25, Y+3	; 0x03
    2f8a:	6e 81       	ldd	r22, Y+6	; 0x06
    2f8c:	7f 81       	ldd	r23, Y+7	; 0x07
    2f8e:	86 1b       	sub	r24, r22
    2f90:	97 0b       	sbc	r25, r23
    2f92:	90 93 47 01 	sts	0x0147, r25
    2f96:	80 93 46 01 	sts	0x0146, r24
    2f9a:	62 c3       	rjmp	.+1732   	; 0x3660 <CheckPins+0xe86>
         }
#endif
         goto saveNresult;		// count the found N-Type and exit
      } 
      // Base has low current
      if((adc.lp_otr < 97) && (adc.rhp > 3400)) {
    2f9c:	71 e6       	ldi	r23, 0x61	; 97
    2f9e:	67 16       	cp	r6, r23
    2fa0:	71 04       	cpc	r7, r1
    2fa2:	08 f0       	brcs	.+2      	; 0x2fa6 <CheckPins+0x7cc>
    2fa4:	50 c0       	rjmp	.+160    	; 0x3046 <CheckPins+0x86c>
    2fa6:	8d e0       	ldi	r24, 0x0D	; 13
    2fa8:	29 34       	cpi	r18, 0x49	; 73
    2faa:	38 07       	cpc	r19, r24
    2fac:	08 f4       	brcc	.+2      	; 0x2fb0 <CheckPins+0x7d6>
    2fae:	4b c0       	rjmp	.+150    	; 0x3046 <CheckPins+0x86c>
         //if flow voltage in switched off mode low enough?
         //(since D-Mode-FET will be detected in error as E-Mode )
         PartFound = PART_FET;	//N-Kanal-MOSFET is found (Basis/Gate will Not be pulled down)
    2fb0:	84 e0       	ldi	r24, 0x04	; 4
    2fb2:	80 93 07 01 	sts	0x0107, r24
         PartMode = PART_MODE_MOS|N_CHANNEL|E_MODE;
    2fb6:	82 e0       	ldi	r24, 0x02	; 2
    2fb8:	80 93 06 01 	sts	0x0106, r24
         if (adc.hp2 > (250+adc.lp2)) {
    2fbc:	c1 01       	movw	r24, r2
    2fbe:	86 50       	subi	r24, 0x06	; 6
    2fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc2:	8c 15       	cp	r24, r12
    2fc4:	9d 05       	cpc	r25, r13
    2fc6:	18 f4       	brcc	.+6      	; 0x2fce <CheckPins+0x7f4>
            // Drain-Source Voltage is too high for N_E_MOS
            PartMode = PART_MODE_IGBT|N_CHANNEL|E_MODE;
    2fc8:	83 e0       	ldi	r24, 0x03	; 3
    2fca:	80 93 06 01 	sts	0x0106, r24
         lcd_data('F');
#endif
         //Switching of Drain is monitored with digital input
         // Low level is specified up to 0.3 * VCC
         // High level is specified above 0.6 * VCC
         PinMSK = HiADCm & 7;
    2fce:	97 e0       	ldi	r25, 0x07	; 7
    2fd0:	e9 22       	and	r14, r25
         // measure Threshold voltage of Gate
         ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
    2fd2:	89 81       	ldd	r24, Y+1	; 0x01
    2fd4:	80 64       	ori	r24, 0x40	; 64
    2fd6:	80 93 7c 00 	sts	0x007C, r24
         tmp16 = 1;			// round up ((1*4)/9)
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
         for(ii=0;ii<11;ii++) {
    2fde:	20 e0       	ldi	r18, 0x00	; 0
    2fe0:	6c 01       	movw	r12, r24
            wdt_reset();
    2fe2:	a8 95       	wdr
            ChargePin10ms(TriPinRL,0);	// discharge Gate 10ms with RL 
    2fe4:	85 2d       	mov	r24, r5
    2fe6:	60 e0       	ldi	r22, 0x00	; 0
    2fe8:	29 8b       	std	Y+17, r18	; 0x11
    2fea:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <ChargePin10ms>
            R_DDR = HiPinRL | TriPinRH;	// slowly charge Gate 
    2fee:	94 b8       	out	0x04, r9	; 4
            R_PORT = HiPinRL | TriPinRH;
    2ff0:	95 b8       	out	0x05, r9	; 5
    2ff2:	29 89       	ldd	r18, Y+17	; 0x11
            while ((ADC_PIN&PinMSK));	// Wait, until the MOSFET switch and Drain moved to low 
    2ff4:	86 b1       	in	r24, 0x06	; 6
    2ff6:	8e 21       	and	r24, r14
    2ff8:	e9 f7       	brne	.-6      	; 0x2ff4 <CheckPins+0x81a>
             		// 0 is detected with input voltage of 2.12V to 2.24V (tested with mega168 & mega328)
            R_DDR = HiPinRL;		// switch off current
    2ffa:	f4 b8       	out	0x04, r15	; 4
            ADCSRA |= (1<<ADSC);		// start ADC conversion
    2ffc:	80 91 7a 00 	lds	r24, 0x007A
    3000:	80 64       	ori	r24, 0x40	; 64
    3002:	80 93 7a 00 	sts	0x007A, r24
            while (ADCSRA&(1<<ADSC));	// wait until ADC finished
    3006:	80 91 7a 00 	lds	r24, 0x007A
    300a:	86 fd       	sbrc	r24, 6
    300c:	fc cf       	rjmp	.-8      	; 0x3006 <CheckPins+0x82c>
            tmp16 += ADCW;		// add result of ADC
    300e:	40 91 78 00 	lds	r20, 0x0078
    3012:	50 91 79 00 	lds	r21, 0x0079
    3016:	c4 0e       	add	r12, r20
    3018:	d5 1e       	adc	r13, r21
         // High level is specified above 0.6 * VCC
         PinMSK = HiADCm & 7;
         // measure Threshold voltage of Gate
         ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
         tmp16 = 1;			// round up ((1*4)/9)
         for(ii=0;ii<11;ii++) {
    301a:	2f 5f       	subi	r18, 0xFF	; 255
    301c:	2b 30       	cpi	r18, 0x0B	; 11
    301e:	09 f7       	brne	.-62     	; 0x2fe2 <CheckPins+0x808>
    3020:	c6 01       	movw	r24, r12
            R_DDR = HiPinRL;		// switch off current
            ADCSRA |= (1<<ADSC);		// start ADC conversion
            while (ADCSRA&(1<<ADSC));	// wait until ADC finished
            tmp16 += ADCW;		// add result of ADC
         }
         tmp16 *= 4;	//is equal to 44 * ADCW
    3022:	88 0f       	add	r24, r24
    3024:	99 1f       	adc	r25, r25
    3026:	88 0f       	add	r24, r24
    3028:	99 1f       	adc	r25, r25
         ntrans.gthvoltage = tmp16/ 9;	//scale to mV
    302a:	69 e0       	ldi	r22, 0x09	; 9
    302c:	70 e0       	ldi	r23, 0x00	; 0
    302e:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <__udivmodhi4>
    3032:	70 93 4b 01 	sts	0x014B, r23
    3036:	60 93 4a 01 	sts	0x014A, r22
         ntrans.count++;		// count FET as two to accelerate  searching
    303a:	80 91 4f 01 	lds	r24, 0x014F
    303e:	8f 5f       	subi	r24, 0xFF	; 255
    3040:	80 93 4f 01 	sts	0x014F, r24
    3044:	0d c3       	rjmp	.+1562   	; 0x3660 <CheckPins+0xe86>
         goto saveNresult;
      }
   } // end component conduct => npn
   ADC_DDR = TXD_MSK;		// switch all ADC-Ports to input
    3046:	88 e0       	ldi	r24, 0x08	; 8
    3048:	87 b9       	out	0x07, r24	; 7
   ADC_PORT = TXD_VAL;		// switch all ADC-Ports to 0 (no Pull up)
    304a:	88 b9       	out	0x08, r24	; 8
//#endif
  LoPinRL = pgm_read_byte(&PinRLtab[LowPin]);		// instruction for LowPin R_L
#if FLASHEND > 0x3fff
  LoPinRH = pgm_read_byte(&PinRHtab[LowPin]);		// instruction for LowPin R_H
#else
  LoPinRH = LoPinRL + LoPinRL;				// instruction for LowPin R_H
    304c:	34 2c       	mov	r3, r4
    304e:	33 0c       	add	r3, r3
#endif
  HiPinRL = pgm_read_byte(&PinRLtab[HighPin]);		// instruction for HighPin R_L
#if FLASHEND > 0x3fff
  HiPinRH = pgm_read_byte(&PinRHtab[HighPin]);		// instruction for HighPin R_H
#else
  HiPinRH = HiPinRL + HiPinRL;				// instruction for HighPin R_H
    3050:	9f 2c       	mov	r9, r15
    3052:	99 0c       	add	r9, r9
  }
//##########################################################################################
// Search for diodes
//##########################################################################################
checkDiode:
  R_DDR = 0;			//switch off resistor current
    3054:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;
    3056:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = TXD_MSK;		// switch ADC ports to input
    3058:	88 e0       	ldi	r24, 0x08	; 8
    305a:	87 b9       	out	0x07, r24	; 7
//  if (adc.lp_otr < 977) 
  if (adc.lp_otr < 455) {
    305c:	a7 ec       	ldi	r26, 0xC7	; 199
    305e:	6a 16       	cp	r6, r26
    3060:	a1 e0       	ldi	r26, 0x01	; 1
    3062:	7a 06       	cpc	r7, r26
    3064:	08 f4       	brcc	.+2      	; 0x3068 <CheckPins+0x88e>
    3066:	af c0       	rjmp	.+350    	; 0x31c6 <CheckPins+0x9ec>
#endif
     goto widmes;
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
    3068:	88 b9       	out	0x08, r24	; 8
    306a:	48 ec       	ldi	r20, 0xC8	; 200
    306c:	c4 2e       	mov	r12, r20
  for (ii=0;ii<200;ii++) {
     ADC_DDR = LoADCm | HiADCm; // discharge by short of Low and High side
    306e:	a8 2c       	mov	r10, r8
    3070:	ae 28       	or	r10, r14
    3072:	a7 b8       	out	0x07, r10	; 7
     wait_about5ms();		// Low and Highpin to GND for discharge
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	0e 94 b5 01 	call	0x36a	; 0x36a <sleep_5ms>
     ADC_DDR = LoADCm;		// switch only Low-Pin fix to GND
    307c:	87 b8       	out	0x07, r8	; 7
     adc.hp1 = ReadADC(HighPin); // read voltage at High-Pin
    307e:	81 2f       	mov	r24, r17
    3080:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
     if (adc.hp1 < (150/8)) break;
    3084:	82 31       	cpi	r24, 0x12	; 18
    3086:	91 05       	cpc	r25, r1
    3088:	10 f0       	brcs	.+4      	; 0x308e <CheckPins+0x8b4>
    308a:	ca 94       	dec	r12
     goto widmes;
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
  for (ii=0;ii<200;ii++) {
    308c:	91 f7       	brne	.-28     	; 0x3072 <CheckPins+0x898>
 #if FLASHEND > 0x1fff
  /* It is difficult to detect the protection diode of D-mode MOSFET . */
  /* We have to generate a negative gate voltage to isolate the diode. */
  /* For P-mode the resistors must reside on the VCC side. */
  /* For N-mode the resistors must be moved to the GND side. */
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
    308e:	94 b8       	out	0x04, r9	; 4
  R_PORT = HiPinRH;
    3090:	95 b8       	out	0x05, r9	; 5
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
    3092:	85 2d       	mov	r24, r5
    3094:	61 e0       	ldi	r22, 0x01	; 1
    3096:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <ChargePin10ms>
  adc.hp2 = W5msReadADC(HighPin); 		// GND--|<--HP--R_H--VCC
    309a:	81 2f       	mov	r24, r17
    309c:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    30a0:	3c 01       	movw	r6, r24
  // now the resistor is moved to the Low side
  R_DDR = LoPinRH;
    30a2:	34 b8       	out	0x04, r3	; 4
  R_PORT = 0;
    30a4:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = HiADCm;		// switch High-Pin fix to VCC
    30a6:	e7 b8       	out	0x07, r14	; 7
  ADC_PORT = HiADCp;
    30a8:	e8 b8       	out	0x08, r14	; 8
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
    30aa:	85 2d       	mov	r24, r5
    30ac:	60 e0       	ldi	r22, 0x00	; 0
    30ae:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <ChargePin10ms>
  adc.hp3 = ADCconfig.U_AVCC - W5msReadADC(LowPin); // GND--R_H--LP--|<--VCC
    30b2:	40 91 35 01 	lds	r20, 0x0135
    30b6:	50 91 36 01 	lds	r21, 0x0136
    30ba:	80 2f       	mov	r24, r16
    30bc:	4f 87       	std	Y+15, r20	; 0x0f
    30be:	58 8b       	std	Y+16, r21	; 0x10
    30c0:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    30c4:	9c 01       	movw	r18, r24
  /* check with higher current (R_L=680) */
  R_DDR = LoPinRL;
    30c6:	44 b8       	out	0x04, r4	; 4
  adc.hp1 = W5msReadADC(HighPin) - ReadADC(LowPin); // GND--R_L--LP--|<--VCC
    30c8:	81 2f       	mov	r24, r17
    30ca:	29 8b       	std	Y+17, r18	; 0x11
    30cc:	3e 87       	std	Y+14, r19	; 0x0e
    30ce:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    30d2:	6c 01       	movw	r12, r24
    30d4:	80 2f       	mov	r24, r16
    30d6:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
    30da:	c8 1a       	sub	r12, r24
    30dc:	d9 0a       	sbc	r13, r25
  //  the resistor is moved back to the High side
  ADC_PORT = TXD_VAL;
    30de:	88 e0       	ldi	r24, 0x08	; 8
    30e0:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;		// switch only Low-Pin fix to GND
    30e2:	87 b8       	out	0x07, r8	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin output (VCC)
    30e4:	f4 b8       	out	0x04, r15	; 4
  R_PORT = HiPinRL;
    30e6:	f5 b8       	out	0x05, r15	; 5
  ChargePin10ms(TriPinRL,1);	//discharge for P-Kanal-MOSFET gate
    30e8:	85 2d       	mov	r24, r5
    30ea:	61 e0       	ldi	r22, 0x01	; 1
    30ec:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <ChargePin10ms>
  adc.lp_otr = W5msReadADC(HighPin) - ReadADC(LowPin); // GND--|<--HP--R_L--VCC
    30f0:	81 2f       	mov	r24, r17
    30f2:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    30f6:	5c 01       	movw	r10, r24
    30f8:	80 2f       	mov	r24, r16
    30fa:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
    30fe:	a8 1a       	sub	r10, r24
    3100:	b9 0a       	sbc	r11, r25
  if(adc.lp_otr > adc.hp1) {
    3102:	29 89       	ldd	r18, Y+17	; 0x11
    3104:	3e 85       	ldd	r19, Y+14	; 0x0e
    3106:	4f 85       	ldd	r20, Y+15	; 0x0f
    3108:	58 89       	ldd	r21, Y+16	; 0x10
    310a:	ca 14       	cp	r12, r10
    310c:	db 04       	cpc	r13, r11
    310e:	38 f4       	brcc	.+14     	; 0x311e <CheckPins+0x944>
      adc.hp1 = adc.lp_otr;	//the higher value wins
      adc.hp3 = adc.hp2;
      R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
    3110:	94 b8       	out	0x04, r9	; 4
      R_PORT = HiPinRH;
    3112:	95 b8       	out	0x05, r9	; 5
      adc.hp2 = W5msReadADC(HighPin); 		// GND--|<--HP--R_H--VCC
    3114:	81 2f       	mov	r24, r17
    3116:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    311a:	65 01       	movw	r12, r10
    311c:	16 c0       	rjmp	.+44     	; 0x314a <CheckPins+0x970>
  R_DDR = LoPinRH;
  R_PORT = 0;
  ADC_DDR = HiADCm;		// switch High-Pin fix to VCC
  ADC_PORT = HiADCp;
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
  adc.hp3 = ADCconfig.U_AVCC - W5msReadADC(LowPin); // GND--R_H--LP--|<--VCC
    311e:	3a 01       	movw	r6, r20
    3120:	62 1a       	sub	r6, r18
    3122:	73 0a       	sbc	r7, r19
      adc.hp3 = adc.hp2;
      R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
      R_PORT = HiPinRH;
      adc.hp2 = W5msReadADC(HighPin); 		// GND--|<--HP--R_H--VCC
  } else {
      R_DDR = LoPinRH;
    3124:	34 b8       	out	0x04, r3	; 4
      R_PORT = 0;
    3126:	15 b8       	out	0x05, r1	; 5
      ADC_DDR = HiADCm;		// switch High-Pin fix to VCC
    3128:	e7 b8       	out	0x07, r14	; 7
      ADC_PORT = HiADCp;
    312a:	e8 b8       	out	0x08, r14	; 8
      ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
    312c:	85 2d       	mov	r24, r5
    312e:	60 e0       	ldi	r22, 0x00	; 0
    3130:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <ChargePin10ms>
      adc.hp2 = ADCconfig.U_AVCC - W5msReadADC(LowPin); // GND--R_H--LP--|<--VCC
    3134:	a0 90 35 01 	lds	r10, 0x0135
    3138:	b0 90 36 01 	lds	r11, 0x0136
    313c:	80 2f       	mov	r24, r16
    313e:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    3142:	f5 01       	movw	r30, r10
    3144:	e8 1b       	sub	r30, r24
    3146:	f9 0b       	sbc	r31, r25
    3148:	cf 01       	movw	r24, r30
#endif
  volt_dif = adc.hp3/8;
  if (volt_dif > 200) volt_dif = 200;

//  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp2 < adc.hp1) && (adc.hp1 > (adc.hp3+volt_dif)) && (adc.hp3 > adc.hp1/16)) {
    314a:	96 01       	movw	r18, r12
    314c:	27 59       	subi	r18, 0x97	; 151
    314e:	30 40       	sbci	r19, 0x00	; 0
    3150:	f1 e1       	ldi	r31, 0x11	; 17
    3152:	29 38       	cpi	r18, 0x89	; 137
    3154:	3f 07       	cpc	r19, r31
    3156:	b8 f5       	brcc	.+110    	; 0x31c6 <CheckPins+0x9ec>
    3158:	8c 15       	cp	r24, r12
    315a:	9d 05       	cpc	r25, r13
    315c:	a0 f5       	brcc	.+104    	; 0x31c6 <CheckPins+0x9ec>
  lcd_data('L');
  DisplayValue(adc.hp1,-3,' ',2);
  lcd_data('H');
  DisplayValue(adc.hp2,-3,' ',2);
#endif
  volt_dif = adc.hp3/8;
    315e:	c3 01       	movw	r24, r6
    3160:	33 e0       	ldi	r19, 0x03	; 3
    3162:	96 95       	lsr	r25
    3164:	87 95       	ror	r24
    3166:	3a 95       	dec	r19
    3168:	e1 f7       	brne	.-8      	; 0x3162 <CheckPins+0x988>
  if (volt_dif > 200) volt_dif = 200;

//  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp2 < adc.hp1) && (adc.hp1 > (adc.hp3+volt_dif)) && (adc.hp3 > adc.hp1/16)) {
    316a:	89 3c       	cpi	r24, 0xC9	; 201
    316c:	91 05       	cpc	r25, r1
    316e:	10 f0       	brcs	.+4      	; 0x3174 <CheckPins+0x99a>
    3170:	88 ec       	ldi	r24, 0xC8	; 200
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	86 0d       	add	r24, r6
    3176:	97 1d       	adc	r25, r7
    3178:	8c 15       	cp	r24, r12
    317a:	9d 05       	cpc	r25, r13
    317c:	20 f5       	brcc	.+72     	; 0x31c6 <CheckPins+0x9ec>
    317e:	c6 01       	movw	r24, r12
    3180:	24 e0       	ldi	r18, 0x04	; 4
    3182:	96 95       	lsr	r25
    3184:	87 95       	ror	r24
    3186:	2a 95       	dec	r18
    3188:	e1 f7       	brne	.-8      	; 0x3182 <CheckPins+0x9a8>
    318a:	86 15       	cp	r24, r6
    318c:	97 05       	cpc	r25, r7
    318e:	d8 f4       	brcc	.+54     	; 0x31c6 <CheckPins+0x9ec>
     //voltage is above 0,15V and below 4,64V => Ok
     // hp2 >= hp1 is only possible with capacitor, not with a diode, hp2 is measured with 470k
//     if((PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
     if(PartFound < PART_DIODE) {
    3190:	80 91 07 01 	lds	r24, 0x0107
    3194:	82 30       	cpi	r24, 0x02	; 2
    3196:	18 f4       	brcc	.+6      	; 0x319e <CheckPins+0x9c4>
        PartFound = PART_DIODE;	//mark for diode only, if no other component is found
    3198:	82 e0       	ldi	r24, 0x02	; 2
    319a:	80 93 07 01 	sts	0x0107, r24
				//since there is a problem with Transistors with a protection diode
#if DebugOut == 4
        lcd_data('D');
#endif
     }
     diodes.Anode[NumOfDiodes] = HighPin;
    319e:	80 91 05 01 	lds	r24, 0x0105
    31a2:	e8 2f       	mov	r30, r24
    31a4:	f0 e0       	ldi	r31, 0x00	; 0
    31a6:	df 01       	movw	r26, r30
    31a8:	a0 58       	subi	r26, 0x80	; 128
    31aa:	be 4f       	sbci	r27, 0xFE	; 254
    31ac:	1c 93       	st	X, r17
     diodes.Cathode[NumOfDiodes] = LowPin;
    31ae:	16 96       	adiw	r26, 0x06	; 6
    31b0:	0c 93       	st	X, r16
    31b2:	16 97       	sbiw	r26, 0x06	; 6
     diodes.Voltage[NumOfDiodes] = adc.hp1;	// voltage in Millivolt 
    31b4:	ee 0f       	add	r30, r30
    31b6:	ff 1f       	adc	r31, r31
    31b8:	e4 57       	subi	r30, 0x74	; 116
    31ba:	fe 4f       	sbci	r31, 0xFE	; 254
    31bc:	d1 82       	std	Z+1, r13	; 0x01
    31be:	c0 82       	st	Z, r12
     NumOfDiodes++;
    31c0:	8f 5f       	subi	r24, 0xFF	; 255
    31c2:	80 93 05 01 	sts	0x0105, r24
// Search for resistors
//##########################################################################################
widmes:
//  if ((NumOfDiodes + ptrans.count  + ntrans.count) > 0) {
//     goto clean_ports;	// no resistors are searched, if diodes are detected
  if ((ptrans.count  + ntrans.count) > 0) {
    31c6:	20 91 4f 01 	lds	r18, 0x014F
    31ca:	80 91 67 01 	lds	r24, 0x0167
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	82 0f       	add	r24, r18
    31d2:	91 1d       	adc	r25, r1
    31d4:	00 97       	sbiw	r24, 0x00	; 0
    31d6:	09 f0       	breq	.+2      	; 0x31da <CheckPins+0xa00>
    31d8:	16 c2       	rjmp	.+1068   	; 0x3606 <CheckPins+0xe2c>
     goto clean_ports;	// no resistors are searched, if transistors are detected
  }
  // resistor measurement
  wdt_reset();
    31da:	a8 95       	wdr
// U_SCALE can be set to 4 for better resolution of ReadADC result
#if U_SCALE != 1
  ADCconfig.U_AVCC *= U_SCALE;	// scale to higher resolution, mV scale is not required
    31dc:	80 91 35 01 	lds	r24, 0x0135
    31e0:	90 91 36 01 	lds	r25, 0x0136
    31e4:	88 0f       	add	r24, r24
    31e6:	99 1f       	adc	r25, r25
    31e8:	88 0f       	add	r24, r24
    31ea:	99 1f       	adc	r25, r25
    31ec:	90 93 36 01 	sts	0x0136, r25
    31f0:	80 93 35 01 	sts	0x0135, r24
  ADCconfig.U_Bandgap *= U_SCALE;
    31f4:	80 91 33 01 	lds	r24, 0x0133
    31f8:	90 91 34 01 	lds	r25, 0x0134
    31fc:	88 0f       	add	r24, r24
    31fe:	99 1f       	adc	r25, r25
    3200:	88 0f       	add	r24, r24
    3202:	99 1f       	adc	r25, r25
    3204:	90 93 34 01 	sts	0x0134, r25
    3208:	80 93 33 01 	sts	0x0133, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = R_ANZ_MESS;	// switch to special number of repetitions
    320c:	8e eb       	ldi	r24, 0xBE	; 190
    320e:	80 93 31 01 	sts	0x0131, r24
#endif
  #define MAX_REPEAT (700 / (5 + R_ANZ_MESS/8))
  ADC_PORT = TXD_VAL;
    3212:	88 e0       	ldi	r24, 0x08	; 8
    3214:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
    3216:	87 b8       	out	0x07, r8	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    3218:	f4 b8       	out	0x04, r15	; 4
  R_PORT = HiPinRL;	
    321a:	f5 b8       	out	0x05, r15	; 5
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
    321c:	cc 24       	eor	r12, r12
    321e:	dd 24       	eor	r13, r13
  for (ii=1;ii<MAX_REPEAT;ii++) {
    3220:	21 e0       	ldi	r18, 0x01	; 1
    3222:	01 c0       	rjmp	.+2      	; 0x3226 <CheckPins+0xa4c>
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    3224:	6c 01       	movw	r12, r24
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
    3226:	80 2f       	mov	r24, r16
    3228:	29 8b       	std	Y+17, r18	; 0x11
    322a:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    322e:	58 2e       	mov	r5, r24
    3230:	29 2e       	mov	r2, r25
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    3232:	81 2f       	mov	r24, r17
    3234:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
     udiff = adc.hp1 - adc.hp2;
    3238:	ac 01       	movw	r20, r24
    323a:	4c 19       	sub	r20, r12
    323c:	5d 09       	sbc	r21, r13
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    323e:	29 89       	ldd	r18, Y+17	; 0x11
    3240:	57 ff       	sbrs	r21, 7
    3242:	03 c0       	rjmp	.+6      	; 0x324a <CheckPins+0xa70>
    3244:	50 95       	com	r21
    3246:	41 95       	neg	r20
    3248:	5f 4f       	sbci	r21, 0xFF	; 255
    324a:	43 30       	cpi	r20, 0x03	; 3
    324c:	51 05       	cpc	r21, r1
    324e:	7c f4       	brge	.+30     	; 0x326e <CheckPins+0xa94>
    3250:	ac 01       	movw	r20, r24
  adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
#endif
  if (adc.tp1 > adc.hp1) {
     adc.tp1 = adc.hp1;
  }
  R_PORT = 0;
    3252:	15 b8       	out	0x05, r1	; 5
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (GND)
    3254:	94 b8       	out	0x04, r9	; 4
  adc.hp2 = W5msReadADC(HighPin);	// read voltage, should be down
    3256:	81 2f       	mov	r24, r17
    3258:	4f 87       	std	Y+15, r20	; 0x0f
    325a:	58 8b       	std	Y+16, r21	; 0x10
    325c:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
  if (adc.hp2 > (20*U_SCALE)) {
    3260:	4f 85       	ldd	r20, Y+15	; 0x0f
    3262:	58 89       	ldd	r21, Y+16	; 0x10
    3264:	81 35       	cpi	r24, 0x51	; 81
    3266:	91 05       	cpc	r25, r1
    3268:	08 f0       	brcs	.+2      	; 0x326c <CheckPins+0xa92>
    326a:	b2 c1       	rjmp	.+868    	; 0x35d0 <CheckPins+0xdf6>
    326c:	05 c0       	rjmp	.+10     	; 0x3278 <CheckPins+0xa9e>
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     udiff = adc.hp1 - adc.hp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.hp2 = adc.hp1;
     wdt_reset();
    326e:	a8 95       	wdr
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    3270:	2f 5f       	subi	r18, 0xFF	; 255
    3272:	29 31       	cpi	r18, 0x19	; 25
    3274:	b9 f6       	brne	.-82     	; 0x3224 <CheckPins+0xa4a>
    3276:	ac c1       	rjmp	.+856    	; 0x35d0 <CheckPins+0xdf6>
     lcd_string(utoa(adc.hp2, outval, 10));
     lcd_space();
#endif
     goto testend;
  }
  R_PORT = HiPinRH;		//switch R_H for High-Pin to VCC
    3278:	95 b8       	out	0x05, r9	; 5
  adc.hp2 = W5msReadADC(HighPin);	// voltage at resistor Rx with R_H
    327a:	81 2f       	mov	r24, r17
    327c:	4f 87       	std	Y+15, r20	; 0x0f
    327e:	58 8b       	std	Y+16, r21	; 0x10
    3280:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    3284:	4c 01       	movw	r8, r24

  ADC_DDR = HiADCm;		//switch High-Pin to output
    3286:	e7 b8       	out	0x07, r14	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
    3288:	e8 b8       	out	0x08, r14	; 8
  R_PORT = 0;
    328a:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
    328c:	44 b8       	out	0x04, r4	; 4
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
    328e:	cc 24       	eor	r12, r12
    3290:	dd 24       	eor	r13, r13
  for (ii=1;ii<MAX_REPEAT;ii++) {
    3292:	21 e0       	ldi	r18, 0x01	; 1
    3294:	4f 85       	ldd	r20, Y+15	; 0x0f
    3296:	58 89       	ldd	r21, Y+16	; 0x10
    3298:	3a 01       	movw	r6, r20
    329a:	01 c0       	rjmp	.+2      	; 0x329e <CheckPins+0xac4>
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    329c:	67 01       	movw	r12, r14
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
    329e:	81 2f       	mov	r24, r17
    32a0:	29 8b       	std	Y+17, r18	; 0x11
    32a2:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    32a6:	5c 01       	movw	r10, r24
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    32a8:	80 2f       	mov	r24, r16
    32aa:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
    32ae:	7c 01       	movw	r14, r24
     udiff = adc.lp1 - adc.lp2;
    32b0:	8c 19       	sub	r24, r12
    32b2:	9d 09       	sbc	r25, r13
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    32b4:	29 89       	ldd	r18, Y+17	; 0x11
    32b6:	97 ff       	sbrs	r25, 7
    32b8:	03 c0       	rjmp	.+6      	; 0x32c0 <CheckPins+0xae6>
    32ba:	90 95       	com	r25
    32bc:	81 95       	neg	r24
    32be:	9f 4f       	sbci	r25, 0xFF	; 255
    32c0:	83 30       	cpi	r24, 0x03	; 3
    32c2:	91 05       	cpc	r25, r1
    32c4:	7c f4       	brge	.+30     	; 0x32e4 <CheckPins+0xb0a>
    32c6:	a3 01       	movw	r20, r6
  adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
#endif
  if (adc.tp2 < adc.lp1) {
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
    32c8:	34 b8       	out	0x04, r3	; 4
  adc.lp2 = W5msReadADC(LowPin);
    32ca:	80 2f       	mov	r24, r16
    32cc:	6f 86       	std	Y+15, r6	; 0x0f
    32ce:	58 8b       	std	Y+16, r21	; 0x10
    32d0:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    32d4:	3c 01       	movw	r6, r24
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    32d6:	4f 85       	ldd	r20, Y+15	; 0x0f
    32d8:	58 89       	ldd	r21, Y+16	; 0x10
    32da:	24 e4       	ldi	r18, 0x44	; 68
    32dc:	40 3c       	cpi	r20, 0xC0	; 192
    32de:	52 07       	cpc	r21, r18
    32e0:	30 f0       	brcs	.+12     	; 0x32ee <CheckPins+0xb14>
    32e2:	0c c0       	rjmp	.+24     	; 0x32fc <CheckPins+0xb22>
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     udiff = adc.lp1 - adc.lp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.lp2 = adc.lp1;
     wdt_reset();
    32e4:	a8 95       	wdr
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
  R_PORT = 0;
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    32e6:	2f 5f       	subi	r18, 0xFF	; 255
    32e8:	29 31       	cpi	r18, 0x19	; 25
    32ea:	c1 f6       	brne	.-80     	; 0x329c <CheckPins+0xac2>
    32ec:	71 c1       	rjmp	.+738    	; 0x35d0 <CheckPins+0xdf6>
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
  adc.lp2 = W5msReadADC(LowPin);
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    32ee:	35 e8       	ldi	r19, 0x85	; 133
    32f0:	83 16       	cp	r8, r19
    32f2:	31 e0       	ldi	r19, 0x01	; 1
    32f4:	93 06       	cpc	r9, r19
    32f6:	08 f0       	brcs	.+2      	; 0x32fa <CheckPins+0xb20>
    32f8:	6b c1       	rjmp	.+726    	; 0x35d0 <CheckPins+0xdf6>
    32fa:	06 c0       	rjmp	.+12     	; 0x3308 <CheckPins+0xb2e>
     lcd_data('F');
#endif
     goto testend; 
  }
//    if((adc.hp2 + (adc.hp2 / 61)) < adc.hp1)
  if (adc.hp2 < (4972*U_SCALE)) { 
    32fc:	60 eb       	ldi	r22, 0xB0	; 176
    32fe:	86 16       	cp	r8, r22
    3300:	6d e4       	ldi	r22, 0x4D	; 77
    3302:	96 06       	cpc	r9, r22
    3304:	08 f0       	brcs	.+2      	; 0x3308 <CheckPins+0xb2e>
    3306:	64 c1       	rjmp	.+712    	; 0x35d0 <CheckPins+0xdf6>
     // voltage breaks down with low test current and it is not nearly shorted  => resistor
//     if (adc.lp1 < 120)  // take measurement with R_H 
     if (adc.lp1 < (169*U_SCALE)) { // take measurement with R_H 
    3308:	74 ea       	ldi	r23, 0xA4	; 164
    330a:	e7 16       	cp	r14, r23
    330c:	72 e0       	ldi	r23, 0x02	; 2
    330e:	f7 06       	cpc	r15, r23
    3310:	08 f0       	brcs	.+2      	; 0x3314 <CheckPins+0xb3a>
    3312:	72 c0       	rjmp	.+228    	; 0x33f8 <CheckPins+0xc1e>
        ii = 'H';
        if (adc.lp2 < (38*U_SCALE)) {
    3314:	88 e9       	ldi	r24, 0x98	; 152
    3316:	68 16       	cp	r6, r24
    3318:	71 04       	cpc	r7, r1
    331a:	08 f4       	brcc	.+2      	; 0x331e <CheckPins+0xb44>
    331c:	59 c1       	rjmp	.+690    	; 0x35d0 <CheckPins+0xdf6>
           // measurement > 60MOhm to big resistance
           goto testend;
        }
        // two measurements with R_H resistors (470k) are made:
        // lirx1 (measurement at HighPin)
        lirx1 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)adc.hp2 / (ADCconfig.U_AVCC - adc.hp2);
    331e:	a0 90 35 01 	lds	r10, 0x0135
    3322:	b0 90 36 01 	lds	r11, 0x0136
    3326:	b4 01       	movw	r22, r8
    3328:	80 e0       	ldi	r24, 0x00	; 0
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	28 e9       	ldi	r18, 0x98	; 152
    332e:	37 eb       	ldi	r19, 0xB7	; 183
    3330:	40 e0       	ldi	r20, 0x00	; 0
    3332:	50 e0       	ldi	r21, 0x00	; 0
    3334:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
    3338:	95 01       	movw	r18, r10
    333a:	28 19       	sub	r18, r8
    333c:	39 09       	sbc	r19, r9
    333e:	40 e0       	ldi	r20, 0x00	; 0
    3340:	50 e0       	ldi	r21, 0x00	; 0
    3342:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    3346:	69 01       	movw	r12, r18
    3348:	7a 01       	movw	r14, r20
        // lirx2 (measurement at LowPin)
        lirx2 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)(ADCconfig.U_AVCC - adc.lp2) / adc.lp2;
    334a:	a6 18       	sub	r10, r6
    334c:	b7 08       	sbc	r11, r7
    334e:	b5 01       	movw	r22, r10
    3350:	80 e0       	ldi	r24, 0x00	; 0
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	28 e9       	ldi	r18, 0x98	; 152
    3356:	37 eb       	ldi	r19, 0xB7	; 183
    3358:	40 e0       	ldi	r20, 0x00	; 0
    335a:	50 e0       	ldi	r21, 0x00	; 0
    335c:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
    3360:	93 01       	movw	r18, r6
    3362:	40 e0       	ldi	r20, 0x00	; 0
    3364:	50 e0       	ldi	r21, 0x00	; 0
    3366:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
#define FAKT_LOW 2		//resolution is about twice as good
#else
#define FAKT_LOW 4		//resolution is about four times better
#endif
#ifdef AUTOSCALE_ADC
        if (adc.hp2 < U_INT_LIMIT) {
    336a:	98 e7       	ldi	r25, 0x78	; 120
    336c:	89 16       	cp	r8, r25
    336e:	9f e0       	ldi	r25, 0x0F	; 15
    3370:	99 06       	cpc	r9, r25
    3372:	70 f4       	brcc	.+28     	; 0x3390 <CheckPins+0xbb6>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    3374:	c7 01       	movw	r24, r14
    3376:	b6 01       	movw	r22, r12
    3378:	e2 e0       	ldi	r30, 0x02	; 2
    337a:	66 0f       	add	r22, r22
    337c:	77 1f       	adc	r23, r23
    337e:	88 1f       	adc	r24, r24
    3380:	99 1f       	adc	r25, r25
    3382:	ea 95       	dec	r30
    3384:	d1 f7       	brne	.-12     	; 0x337a <CheckPins+0xba0>
    3386:	62 0f       	add	r22, r18
    3388:	73 1f       	adc	r23, r19
    338a:	84 1f       	adc	r24, r20
    338c:	95 1f       	adc	r25, r21
    338e:	12 c0       	rjmp	.+36     	; 0x33b4 <CheckPins+0xbda>
        } else if (adc.lp2 < U_INT_LIMIT){
    3390:	a8 e7       	ldi	r26, 0x78	; 120
    3392:	6a 16       	cp	r6, r26
    3394:	af e0       	ldi	r26, 0x0F	; 15
    3396:	7a 06       	cpc	r7, r26
    3398:	a0 f4       	brcc	.+40     	; 0x33c2 <CheckPins+0xbe8>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    339a:	ca 01       	movw	r24, r20
    339c:	b9 01       	movw	r22, r18
    339e:	b2 e0       	ldi	r27, 0x02	; 2
    33a0:	66 0f       	add	r22, r22
    33a2:	77 1f       	adc	r23, r23
    33a4:	88 1f       	adc	r24, r24
    33a6:	99 1f       	adc	r25, r25
    33a8:	ba 95       	dec	r27
    33aa:	d1 f7       	brne	.-12     	; 0x33a0 <CheckPins+0xbc6>
    33ac:	6c 0d       	add	r22, r12
    33ae:	7d 1d       	adc	r23, r13
    33b0:	8e 1d       	adc	r24, r14
    33b2:	9f 1d       	adc	r25, r15
    33b4:	25 e0       	ldi	r18, 0x05	; 5
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	40 e0       	ldi	r20, 0x00	; 0
    33ba:	50 e0       	ldi	r21, 0x00	; 0
    33bc:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    33c0:	08 c0       	rjmp	.+16     	; 0x33d2 <CheckPins+0xbf8>
        } else 
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_H measurements
    33c2:	2c 0d       	add	r18, r12
    33c4:	3d 1d       	adc	r19, r13
    33c6:	4e 1d       	adc	r20, r14
    33c8:	5f 1d       	adc	r21, r15
    33ca:	56 95       	lsr	r21
    33cc:	47 95       	ror	r20
    33ce:	37 95       	ror	r19
    33d0:	27 95       	ror	r18
        }
        lrx1 *= 100;
    33d2:	ca 01       	movw	r24, r20
    33d4:	b9 01       	movw	r22, r18
    33d6:	24 e6       	ldi	r18, 0x64	; 100
    33d8:	30 e0       	ldi	r19, 0x00	; 0
    33da:	40 e0       	ldi	r20, 0x00	; 0
    33dc:	50 e0       	ldi	r21, 0x00	; 0
    33de:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
    33e2:	6b 01       	movw	r12, r22
    33e4:	7c 01       	movw	r14, r24
        lrx1 += RH_OFFSET;			// add constant for correction of systematic error
    33e6:	2c ea       	ldi	r18, 0xAC	; 172
    33e8:	3d e0       	ldi	r19, 0x0D	; 13
    33ea:	40 e0       	ldi	r20, 0x00	; 0
    33ec:	50 e0       	ldi	r21, 0x00	; 0
    33ee:	c2 0e       	add	r12, r18
    33f0:	d3 1e       	adc	r13, r19
    33f2:	e4 1e       	adc	r14, r20
    33f4:	f5 1e       	adc	r15, r21
    33f6:	78 c0       	rjmp	.+240    	; 0x34e8 <CheckPins+0xd0e>
    33f8:	85 2d       	mov	r24, r5
    33fa:	92 2d       	mov	r25, r2
    33fc:	48 17       	cp	r20, r24
    33fe:	59 07       	cpc	r21, r25
    3400:	08 f4       	brcc	.+2      	; 0x3404 <CheckPins+0xc2a>
    3402:	ca 01       	movw	r24, r20
    3404:	67 01       	movw	r12, r14
    3406:	ea 14       	cp	r14, r10
    3408:	fb 04       	cpc	r15, r11
    340a:	08 f4       	brcc	.+2      	; 0x340e <CheckPins+0xc34>
    340c:	65 01       	movw	r12, r10
    340e:	3c 01       	movw	r6, r24
    3410:	84 17       	cp	r24, r20
    3412:	95 07       	cpc	r25, r21
    3414:	08 f4       	brcc	.+2      	; 0x3418 <CheckPins+0xc3e>
    3416:	3a 01       	movw	r6, r20
        // two measurements with R_L resistors (680) are made:
        // lirx1 (measurement at HighPin)
        if (adc.tp1 > adc.hp1) {
           adc.hp1 = adc.tp1;		//diff negativ is illegal
        }
        lirx1 =(unsigned long)RR680PL * (unsigned long)(adc.hp1 - adc.tp1) / (ADCconfig.U_AVCC - adc.hp1);
    3418:	b3 01       	movw	r22, r6
    341a:	68 1b       	sub	r22, r24
    341c:	79 0b       	sbc	r23, r25
    341e:	80 e0       	ldi	r24, 0x00	; 0
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	20 91 08 01 	lds	r18, 0x0108
    3426:	30 91 09 01 	lds	r19, 0x0109
    342a:	40 e0       	ldi	r20, 0x00	; 0
    342c:	50 e0       	ldi	r21, 0x00	; 0
    342e:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
    3432:	20 91 35 01 	lds	r18, 0x0135
    3436:	30 91 36 01 	lds	r19, 0x0136
    343a:	26 19       	sub	r18, r6
    343c:	37 09       	sbc	r19, r7
    343e:	40 e0       	ldi	r20, 0x00	; 0
    3440:	50 e0       	ldi	r21, 0x00	; 0
    3442:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    3446:	49 01       	movw	r8, r18
    3448:	5a 01       	movw	r10, r20
    344a:	26 01       	movw	r4, r12
    344c:	ec 14       	cp	r14, r12
    344e:	fd 04       	cpc	r15, r13
    3450:	08 f4       	brcc	.+2      	; 0x3454 <CheckPins+0xc7a>
    3452:	27 01       	movw	r4, r14
        if (adc.tp2 < adc.lp1) {
           adc.lp1 = adc.tp2;		//diff negativ is illegal
        }
        // lirx2 (Measurement at LowPin)
        lirx2 =(unsigned long)RR680MI * (unsigned long)(adc.tp2 -adc.lp1) / adc.lp1;
    3454:	c4 18       	sub	r12, r4
    3456:	d5 08       	sbc	r13, r5
    3458:	b6 01       	movw	r22, r12
    345a:	80 e0       	ldi	r24, 0x00	; 0
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	20 91 03 01 	lds	r18, 0x0103
    3462:	30 91 04 01 	lds	r19, 0x0104
    3466:	40 e0       	ldi	r20, 0x00	; 0
    3468:	50 e0       	ldi	r21, 0x00	; 0
    346a:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
    346e:	92 01       	movw	r18, r4
    3470:	40 e0       	ldi	r20, 0x00	; 0
    3472:	50 e0       	ldi	r21, 0x00	; 0
    3474:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
//     lrx1 =(unsigned long)R_L_VAL * (unsigned long)adc.hp1 / (adc.hp3 - adc.hp1);

#ifdef AUTOSCALE_ADC
        if (adc.hp1 < U_INT_LIMIT) {
    3478:	68 e7       	ldi	r22, 0x78	; 120
    347a:	66 16       	cp	r6, r22
    347c:	6f e0       	ldi	r22, 0x0F	; 15
    347e:	76 06       	cpc	r7, r22
    3480:	70 f4       	brcc	.+28     	; 0x349e <CheckPins+0xcc4>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    3482:	c5 01       	movw	r24, r10
    3484:	b4 01       	movw	r22, r8
    3486:	f2 e0       	ldi	r31, 0x02	; 2
    3488:	66 0f       	add	r22, r22
    348a:	77 1f       	adc	r23, r23
    348c:	88 1f       	adc	r24, r24
    348e:	99 1f       	adc	r25, r25
    3490:	fa 95       	dec	r31
    3492:	d1 f7       	brne	.-12     	; 0x3488 <CheckPins+0xcae>
    3494:	62 0f       	add	r22, r18
    3496:	73 1f       	adc	r23, r19
    3498:	84 1f       	adc	r24, r20
    349a:	95 1f       	adc	r25, r21
    349c:	12 c0       	rjmp	.+36     	; 0x34c2 <CheckPins+0xce8>
        } else if (adc.lp1 < U_INT_LIMIT) {
    349e:	78 e7       	ldi	r23, 0x78	; 120
    34a0:	47 16       	cp	r4, r23
    34a2:	7f e0       	ldi	r23, 0x0F	; 15
    34a4:	57 06       	cpc	r5, r23
    34a6:	b0 f4       	brcc	.+44     	; 0x34d4 <CheckPins+0xcfa>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    34a8:	ca 01       	movw	r24, r20
    34aa:	b9 01       	movw	r22, r18
    34ac:	e2 e0       	ldi	r30, 0x02	; 2
    34ae:	66 0f       	add	r22, r22
    34b0:	77 1f       	adc	r23, r23
    34b2:	88 1f       	adc	r24, r24
    34b4:	99 1f       	adc	r25, r25
    34b6:	ea 95       	dec	r30
    34b8:	d1 f7       	brne	.-12     	; 0x34ae <CheckPins+0xcd4>
    34ba:	68 0d       	add	r22, r8
    34bc:	79 1d       	adc	r23, r9
    34be:	8a 1d       	adc	r24, r10
    34c0:	9b 1d       	adc	r25, r11
    34c2:	25 e0       	ldi	r18, 0x05	; 5
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	40 e0       	ldi	r20, 0x00	; 0
    34c8:	50 e0       	ldi	r21, 0x00	; 0
    34ca:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    34ce:	69 01       	movw	r12, r18
    34d0:	7a 01       	movw	r14, r20
    34d2:	0a c0       	rjmp	.+20     	; 0x34e8 <CheckPins+0xd0e>
        } else
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_L measurements
    34d4:	69 01       	movw	r12, r18
    34d6:	7a 01       	movw	r14, r20
    34d8:	c8 0c       	add	r12, r8
    34da:	d9 1c       	adc	r13, r9
    34dc:	ea 1c       	adc	r14, r10
    34de:	fb 1c       	adc	r15, r11
    34e0:	f6 94       	lsr	r15
    34e2:	e7 94       	ror	r14
    34e4:	d7 94       	ror	r13
    34e6:	c7 94       	ror	r12
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4);
  lcd_space();
  lcd_line2();
#endif
//     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
     if(PartFound < PART_TRANSISTOR) {
    34e8:	60 90 07 01 	lds	r6, 0x0107
    34ec:	86 2d       	mov	r24, r6
    34ee:	83 30       	cpi	r24, 0x03	; 3
    34f0:	08 f0       	brcs	.+2      	; 0x34f4 <CheckPins+0xd1a>
    34f2:	6e c0       	rjmp	.+220    	; 0x35d0 <CheckPins+0xdf6>
//        for (ii=0; ii<ResistorsFound; ii++) 
        if (ResistorsFound != 0) {
    34f4:	80 91 68 01 	lds	r24, 0x0168
    34f8:	88 23       	and	r24, r24
    34fa:	09 f4       	brne	.+2      	; 0x34fe <CheckPins+0xd24>
    34fc:	52 c0       	rjmp	.+164    	; 0x35a2 <CheckPins+0xdc8>
           // probably measurement with inverse polarity 
           thisR = &resis[ResistorsFound-1];
    34fe:	48 2e       	mov	r4, r24
    3500:	55 24       	eor	r5, r5
    3502:	08 94       	sec
    3504:	41 08       	sbc	r4, r1
    3506:	51 08       	sbc	r5, r1
           if (thisR->rt == TristatePin) { 
    3508:	f2 01       	movw	r30, r4
    350a:	63 e0       	ldi	r22, 0x03	; 3
    350c:	ee 0f       	add	r30, r30
    350e:	ff 1f       	adc	r31, r31
    3510:	6a 95       	dec	r22
    3512:	e1 f7       	brne	.-8      	; 0x350c <CheckPins+0xd32>
    3514:	e7 5e       	subi	r30, 0xE7	; 231
    3516:	fe 4f       	sbci	r31, 0xFE	; 254
    3518:	96 81       	ldd	r25, Z+6	; 0x06
    351a:	a9 81       	ldd	r26, Y+1	; 0x01
    351c:	9a 17       	cp	r25, r26
    351e:	d9 f5       	brne	.+118    	; 0x3596 <CheckPins+0xdbc>
              // must be measurement with inverse polarity 
              // resolution is 0.1 Ohm, 1 Ohm = 10 !
              lirx1 = (labs((long)lrx1 - (long)thisR->rx) * 10) / (lrx1 + thisR->rx + 100);
    3520:	80 80       	ld	r8, Z
    3522:	91 80       	ldd	r9, Z+1	; 0x01
    3524:	a2 80       	ldd	r10, Z+2	; 0x02
    3526:	b3 80       	ldd	r11, Z+3	; 0x03
    3528:	c7 01       	movw	r24, r14
    352a:	b6 01       	movw	r22, r12
    352c:	68 19       	sub	r22, r8
    352e:	79 09       	sbc	r23, r9
    3530:	8a 09       	sbc	r24, r10
    3532:	9b 09       	sbc	r25, r11
    3534:	97 ff       	sbrs	r25, 7
    3536:	07 c0       	rjmp	.+14     	; 0x3546 <CheckPins+0xd6c>
    3538:	90 95       	com	r25
    353a:	80 95       	com	r24
    353c:	70 95       	com	r23
    353e:	61 95       	neg	r22
    3540:	7f 4f       	sbci	r23, 0xFF	; 255
    3542:	8f 4f       	sbci	r24, 0xFF	; 255
    3544:	9f 4f       	sbci	r25, 0xFF	; 255
    3546:	2a e0       	ldi	r18, 0x0A	; 10
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	40 e0       	ldi	r20, 0x00	; 0
    354c:	50 e0       	ldi	r21, 0x00	; 0
    354e:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
    3552:	a5 01       	movw	r20, r10
    3554:	94 01       	movw	r18, r8
    3556:	2c 59       	subi	r18, 0x9C	; 156
    3558:	3f 4f       	sbci	r19, 0xFF	; 255
    355a:	4f 4f       	sbci	r20, 0xFF	; 255
    355c:	5f 4f       	sbci	r21, 0xFF	; 255
    355e:	2c 0d       	add	r18, r12
    3560:	3d 1d       	adc	r19, r13
    3562:	4e 1d       	adc	r20, r14
    3564:	5f 1d       	adc	r21, r15
    3566:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
              if (lirx1  > 0) {
    356a:	21 15       	cp	r18, r1
    356c:	31 05       	cpc	r19, r1
    356e:	41 05       	cpc	r20, r1
    3570:	51 05       	cpc	r21, r1
    3572:	71 f5       	brne	.+92     	; 0x35d0 <CheckPins+0xdf6>
#endif
//                 ResistorsFound--;		// this one isn't a resistor
//                 goto testend; // <10% mismatch
              } else {
                 // resistor has the same value in both directions
                 if (PartFound < PART_DIODE) {
    3574:	b6 2d       	mov	r27, r6
    3576:	b2 30       	cpi	r27, 0x02	; 2
    3578:	19 f0       	breq	.+6      	; 0x3580 <CheckPins+0xda6>
                    PartFound = PART_RESISTOR;	// only mark as resistor, if no other part found
    357a:	81 e0       	ldi	r24, 0x01	; 1
    357c:	80 93 07 01 	sts	0x0107, r24
                 }
                 thisR->checked = 1;		// mark as checked in both direction
    3580:	f2 01       	movw	r30, r4
    3582:	53 e0       	ldi	r21, 0x03	; 3
    3584:	ee 0f       	add	r30, r30
    3586:	ff 1f       	adc	r31, r31
    3588:	5a 95       	dec	r21
    358a:	e1 f7       	brne	.-8      	; 0x3584 <CheckPins+0xdaa>
    358c:	e7 5e       	subi	r30, 0xE7	; 231
    358e:	fe 4f       	sbci	r31, 0xFE	; 254
    3590:	81 e0       	ldi	r24, 0x01	; 1
    3592:	87 83       	std	Z+7, r24	; 0x07
    3594:	1d c0       	rjmp	.+58     	; 0x35d0 <CheckPins+0xdf6>
              }
              goto testend;
           } // end  thisR->rt == TristatePin
           // must be a new one with other pins
           if (thisR->checked == 0) {
    3596:	97 81       	ldd	r25, Z+7	; 0x07
    3598:	99 23       	and	r25, r25
    359a:	19 f4       	brne	.+6      	; 0x35a2 <CheckPins+0xdc8>
              // the last resistor has not the same value in both directions
              ResistorsFound--;	//overwrite with new one
    359c:	81 50       	subi	r24, 0x01	; 1
    359e:	80 93 68 01 	sts	0x0168, r24
           }
        }
        // no same resistor with the same Tristate-Pin found, new one
        thisR = &resis[ResistorsFound];		// pointer to a free resistor structure
    35a2:	80 91 68 01 	lds	r24, 0x0168
    35a6:	e8 2f       	mov	r30, r24
    35a8:	f0 e0       	ldi	r31, 0x00	; 0
        thisR->rx = lrx1;		// save resistor value
    35aa:	43 e0       	ldi	r20, 0x03	; 3
    35ac:	ee 0f       	add	r30, r30
    35ae:	ff 1f       	adc	r31, r31
    35b0:	4a 95       	dec	r20
    35b2:	e1 f7       	brne	.-8      	; 0x35ac <CheckPins+0xdd2>
    35b4:	e7 5e       	subi	r30, 0xE7	; 231
    35b6:	fe 4f       	sbci	r31, 0xFE	; 254
    35b8:	c0 82       	st	Z, r12
    35ba:	d1 82       	std	Z+1, r13	; 0x01
    35bc:	e2 82       	std	Z+2, r14	; 0x02
    35be:	f3 82       	std	Z+3, r15	; 0x03
#if FLASHEND > 0x1fff
//        thisR->lx = 0;			// no inductance
#endif
        thisR->ra = LowPin;		// save Pin numbers
    35c0:	04 83       	std	Z+4, r16	; 0x04
        thisR->rb = HighPin;
    35c2:	15 83       	std	Z+5, r17	; 0x05
        thisR->rt = TristatePin;	// Tristate is saved for easier search of inverse measurement
    35c4:	29 81       	ldd	r18, Y+1	; 0x01
    35c6:	26 83       	std	Z+6, r18	; 0x06
        thisR->checked = 0;		// only one direction 
    35c8:	17 82       	std	Z+7, r1	; 0x07
        ResistorsFound++;			// 1 more resistor found
    35ca:	8f 5f       	subi	r24, 0xFF	; 255
    35cc:	80 93 68 01 	sts	0x0168, r24
#endif
     }
  }
  testend:			// end of resistor measurement
#if U_SCALE != 1
  ADCconfig.U_AVCC /= U_SCALE;		// scale back to mV resolution
    35d0:	80 91 35 01 	lds	r24, 0x0135
    35d4:	90 91 36 01 	lds	r25, 0x0136
    35d8:	96 95       	lsr	r25
    35da:	87 95       	ror	r24
    35dc:	96 95       	lsr	r25
    35de:	87 95       	ror	r24
    35e0:	90 93 36 01 	sts	0x0136, r25
    35e4:	80 93 35 01 	sts	0x0135, r24
  ADCconfig.U_Bandgap /= U_SCALE;
    35e8:	80 91 33 01 	lds	r24, 0x0133
    35ec:	90 91 34 01 	lds	r25, 0x0134
    35f0:	96 95       	lsr	r25
    35f2:	87 95       	ror	r24
    35f4:	96 95       	lsr	r25
    35f6:	87 95       	ror	r24
    35f8:	90 93 34 01 	sts	0x0134, r25
    35fc:	80 93 33 01 	sts	0x0133, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = ANZ_MESS;		// switch back to standard number of repetition
    3600:	89 e1       	ldi	r24, 0x19	; 25
    3602:	80 93 31 01 	sts	0x0131, r24
#ifdef DebugOut
#if DebugOut < 10
  wait_for_key_5s_line2();
#endif
#endif
  ADC_DDR = TXD_MSK;		// all ADC-Pins Input
    3606:	88 e0       	ldi	r24, 0x08	; 8
    3608:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// all ADC outputs to Ground, keine Pull up
    360a:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// all resistor-outputs to Input
    360c:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// all resistor-outputs to Ground, no Pull up
    360e:	15 b8       	out	0x05, r1	; 5
    ntrans.c = HighPin;
    ntrans.e = LowPin;
 }
 goto clean_ports;

} // end CheckPins()
    3610:	61 96       	adiw	r28, 0x11	; 17
    3612:	0f b6       	in	r0, 0x3f	; 63
    3614:	f8 94       	cli
    3616:	de bf       	out	0x3e, r29	; 62
    3618:	0f be       	out	0x3f, r0	; 63
    361a:	cd bf       	out	0x3d, r28	; 61
    361c:	cf 91       	pop	r28
    361e:	df 91       	pop	r29
    3620:	1f 91       	pop	r17
    3622:	0f 91       	pop	r16
    3624:	ff 90       	pop	r15
    3626:	ef 90       	pop	r14
    3628:	df 90       	pop	r13
    362a:	cf 90       	pop	r12
    362c:	bf 90       	pop	r11
    362e:	af 90       	pop	r10
    3630:	9f 90       	pop	r9
    3632:	8f 90       	pop	r8
    3634:	7f 90       	pop	r7
    3636:	6f 90       	pop	r6
    3638:	5f 90       	pop	r5
    363a:	4f 90       	pop	r4
    363c:	3f 90       	pop	r3
    363e:	2f 90       	pop	r2
    3640:	08 95       	ret
//---------------------------------------------------------------------------
savePresult:
#if DebugOut == 5
 lcd_data('P');
#endif
 ptrans.count++;
    3642:	80 91 67 01 	lds	r24, 0x0167
    3646:	8f 5f       	subi	r24, 0xFF	; 255
    3648:	80 93 67 01 	sts	0x0167, r24
 if (update_pins != 0) {
    364c:	22 23       	and	r18, r18
    364e:	d9 f2       	breq	.-74     	; 0x3606 <CheckPins+0xe2c>
    ptrans.b = TristatePin;	// save Pin-constellation
    3650:	39 81       	ldd	r19, Y+1	; 0x01
    3652:	30 93 64 01 	sts	0x0164, r19
    ptrans.c = LowPin;
    3656:	00 93 65 01 	sts	0x0165, r16
    ptrans.e = HighPin;
    365a:	10 93 66 01 	sts	0x0166, r17
    365e:	d3 cf       	rjmp	.-90     	; 0x3606 <CheckPins+0xe2c>
#if DebugOut == 5
  lcd_line2();
  lcd_clear_line();
  lcd_line2();
#endif
  update_pins = 1;			// if a part is found, always update the pins
    3660:	21 e0       	ldi	r18, 0x01	; 1
//---------------------------------------------------------------------------
saveNresult:
#if DebugOut == 5
 lcd_data('N');
#endif
 ntrans.count++;
    3662:	80 91 4f 01 	lds	r24, 0x014F
    3666:	8f 5f       	subi	r24, 0xFF	; 255
    3668:	80 93 4f 01 	sts	0x014F, r24
 if (update_pins != 0) {
    366c:	22 23       	and	r18, r18
    366e:	59 f2       	breq	.-106    	; 0x3606 <CheckPins+0xe2c>
    ntrans.b = TristatePin;	// save Pin-constellation
    3670:	49 81       	ldd	r20, Y+1	; 0x01
    3672:	40 93 4c 01 	sts	0x014C, r20
    ntrans.c = HighPin;
    3676:	10 93 4d 01 	sts	0x014D, r17
    ntrans.e = LowPin;
    367a:	00 93 4e 01 	sts	0x014E, r16
    367e:	c3 cf       	rjmp	.-122    	; 0x3606 <CheckPins+0xe2c>

00003680 <GetESR>:
    3680:	2f 92       	push	r2
    3682:	3f 92       	push	r3
    3684:	4f 92       	push	r4
    3686:	5f 92       	push	r5
    3688:	6f 92       	push	r6
    368a:	7f 92       	push	r7
    368c:	8f 92       	push	r8
    368e:	9f 92       	push	r9
    3690:	af 92       	push	r10
    3692:	bf 92       	push	r11
    3694:	cf 92       	push	r12
    3696:	df 92       	push	r13
    3698:	ef 92       	push	r14
    369a:	ff 92       	push	r15
    369c:	0f 93       	push	r16
    369e:	1f 93       	push	r17
    36a0:	df 93       	push	r29
    36a2:	cf 93       	push	r28
    36a4:	cd b7       	in	r28, 0x3d	; 61
    36a6:	de b7       	in	r29, 0x3e	; 62
    36a8:	6e 97       	sbiw	r28, 0x1e	; 30
    36aa:	0f b6       	in	r0, 0x3f	; 63
    36ac:	f8 94       	cli
    36ae:	de bf       	out	0x3e, r29	; 62
    36b0:	0f be       	out	0x3f, r0	; 63
    36b2:	cd bf       	out	0x3d, r28	; 61
    36b4:	66 2e       	mov	r6, r22
    36b6:	b8 2e       	mov	r11, r24
    36b8:	86 0f       	add	r24, r22
    36ba:	89 83       	std	Y+1, r24	; 0x01
    36bc:	20 91 07 01 	lds	r18, 0x0107
    36c0:	27 30       	cpi	r18, 0x07	; 7
    36c2:	19 f5       	brne	.+70     	; 0x370a <ad_35e4>
    36c4:	20 91 6e 01 	lds	r18, 0x016E
    36c8:	30 91 6f 01 	lds	r19, 0x016F
    36cc:	40 91 70 01 	lds	r20, 0x0170
    36d0:	50 91 71 01 	lds	r21, 0x0171
    36d4:	10 91 7d 01 	lds	r17, 0x017D
    36d8:	09 c0       	rjmp	.+18     	; 0x36ec <ad_35ba>

000036da <ad_35ac>:
    36da:	ca 01       	movw	r24, r20
    36dc:	b9 01       	movw	r22, r18
    36de:	2a e0       	ldi	r18, 0x0A	; 10
    36e0:	31 2d       	mov	r19, r1
    36e2:	41 2d       	mov	r20, r1
    36e4:	51 2d       	mov	r21, r1
    36e6:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    36ea:	1f 5f       	subi	r17, 0xFF	; 255

000036ec <ad_35ba>:
    36ec:	17 3f       	cpi	r17, 0xF7	; 247
    36ee:	ac f3       	brlt	.-22     	; 0x36da <ad_35ac>
    36f0:	2c 8b       	std	Y+20, r18	; 0x14
    36f2:	3d 8b       	std	Y+21, r19	; 0x15
    36f4:	4e 8b       	std	Y+22, r20	; 0x16
    36f6:	5f 8b       	std	Y+23, r21	; 0x17
    36f8:	24 3b       	cpi	r18, 0xB4	; 180
    36fa:	60 e0       	ldi	r22, 0x00	; 0
    36fc:	36 07       	cpc	r19, r22
    36fe:	41 05       	cpc	r20, r1
    3700:	51 05       	cpc	r21, r1
    3702:	18 f4       	brcc	.+6      	; 0x370a <ad_35e4>
    3704:	8f ef       	ldi	r24, 0xFF	; 255
    3706:	9f ef       	ldi	r25, 0xFF	; 255
    3708:	78 c1       	rjmp	.+752    	; 0x39fa <ad_exit>

0000370a <ad_35e4>:
    370a:	26 ed       	ldi	r18, 0xD6	; 214
    370c:	a2 2e       	mov	r10, r18
    370e:	02 c0       	rjmp	.+4      	; 0x3714 <ad_3604>

00003710 <ad_35fe>:
    3710:	94 ed       	ldi	r25, 0xD4	; 212
    3712:	a9 2e       	mov	r10, r25

00003714 <ad_3604>:
    3714:	ed ee       	ldi	r30, 0xED	; 237
    3716:	f0 e0       	ldi	r31, 0x00	; 0
    3718:	e6 0d       	add	r30, r6
    371a:	f1 1d       	adc	r31, r1
    371c:	85 91       	lpm	r24, Z+
    371e:	88 60       	ori	r24, 0x08	; 8
    3720:	8e 87       	std	Y+14, r24	; 0x0e
    3722:	ed ee       	ldi	r30, 0xED	; 237
    3724:	f0 e0       	ldi	r31, 0x00	; 0
    3726:	eb 0d       	add	r30, r11
    3728:	f1 1d       	adc	r31, r1
    372a:	85 91       	lpm	r24, Z+
    372c:	88 60       	ori	r24, 0x08	; 8
    372e:	8f 87       	std	Y+15, r24	; 0x0f
    3730:	ea ee       	ldi	r30, 0xEA	; 234
    3732:	f0 e0       	ldi	r31, 0x00	; 0
    3734:	e6 0d       	add	r30, r6
    3736:	f1 1d       	adc	r31, r1
    3738:	75 90       	lpm	r7, Z+
    373a:	ea ee       	ldi	r30, 0xEA	; 234
    373c:	f0 e0       	ldi	r31, 0x00	; 0
    373e:	eb 0d       	add	r30, r11
    3740:	f1 1d       	adc	r31, r1
    3742:	c5 90       	lpm	r12, Z+
    3744:	90 ec       	ldi	r25, 0xC0	; 192
    3746:	69 2a       	or	r6, r25
    3748:	b9 2a       	or	r11, r25
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	e8 2e       	mov	r14, r24
    374e:	f1 2c       	mov	r15, r1
    3750:	01 2d       	mov	r16, r1
    3752:	11 2d       	mov	r17, r1
    3754:	8e 83       	std	Y+6, r24	; 0x06
    3756:	1f 82       	std	Y+7, r1	; 0x07
    3758:	18 86       	std	Y+8, r1	; 0x08
    375a:	19 86       	std	Y+9, r1	; 0x09
    375c:	1a 86       	std	Y+10, r1	; 0x0a
    375e:	1b 86       	std	Y+11, r1	; 0x0b
    3760:	1c 86       	std	Y+12, r1	; 0x0c
    3762:	1d 86       	std	Y+13, r1	; 0x0d
    3764:	18 8e       	std	Y+24, r1	; 0x18
    3766:	19 8e       	std	Y+25, r1	; 0x19
    3768:	0e 94 0c 0b 	call	0x1618	; 0x1618 <EntladePins>
    376c:	88 e0       	ldi	r24, 0x08	; 8
    376e:	88 b9       	out	0x08, r24	; 8
    3770:	60 92 7c 00 	sts	0x007C, r6
    3774:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <wait100us>
    3778:	3f 85       	ldd	r19, Y+15	; 0x0f
    377a:	37 b9       	out	0x07, r19	; 7
    377c:	75 b8       	out	0x05, r7	; 5
    377e:	74 b8       	out	0x04, r7	; 4
    3780:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <wait10us>
    3784:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <wait2us>
    3788:	15 b8       	out	0x05, r1	; 5
    378a:	14 b8       	out	0x04, r1	; 4
    378c:	dd 24       	eor	r13, r13
    378e:	b4 ed       	ldi	r27, 0xD4	; 212
    3790:	9b 2e       	mov	r9, r27
    3792:	a6 ed       	ldi	r26, 0xD6	; 214
    3794:	8a 2e       	mov	r8, r26

00003796 <ad_3692>:
    3796:	3e 85       	ldd	r19, Y+14	; 0x0e
    3798:	37 b9       	out	0x07, r19	; 7
    379a:	75 b8       	out	0x05, r7	; 5
    379c:	74 b8       	out	0x04, r7	; 4
    379e:	60 92 7c 00 	sts	0x007C, r6
    37a2:	a8 95       	wdr
    37a4:	a0 92 7a 00 	sts	0x007A, r10
    37a8:	80 91 7a 00 	lds	r24, 0x007A
    37ac:	86 fd       	sbrc	r24, 6
    37ae:	fc cf       	rjmp	.-8      	; 0x37a8 <ad_3692+0x12>
    37b0:	a0 92 7a 00 	sts	0x007A, r10
    37b4:	80 91 7a 00 	lds	r24, 0x007A
    37b8:	86 fd       	sbrc	r24, 6
    37ba:	fc cf       	rjmp	.-8      	; 0x37b4 <ad_3692+0x1e>
    37bc:	20 90 78 00 	lds	r2, 0x0078
    37c0:	30 90 79 00 	lds	r3, 0x0079
    37c4:	b0 92 7c 00 	sts	0x007C, r11
    37c8:	a0 92 7a 00 	sts	0x007A, r10
    37cc:	80 91 7a 00 	lds	r24, 0x007A
    37d0:	86 fd       	sbrc	r24, 6
    37d2:	fc cf       	rjmp	.-8      	; 0x37cc <ad_3692+0x36>
    37d4:	80 92 7a 00 	sts	0x007A, r8
    37d8:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <wait5us>
    37dc:	c5 b8       	out	0x05, r12	; 5
    37de:	c4 b8       	out	0x04, r12	; 4
    37e0:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <wait20us>
    37e4:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <wait5us>
    37e8:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <wait1us>
    37ec:	8f 93       	push	r24
    37ee:	8f 91       	pop	r24
    37f0:	a8 95       	wdr
    37f2:	a8 95       	wdr
    37f4:	14 b8       	out	0x04, r1	; 4
    37f6:	15 b8       	out	0x05, r1	; 5

000037f8 <ad_370c>:
    37f8:	80 91 7a 00 	lds	r24, 0x007A
    37fc:	86 fd       	sbrc	r24, 6
    37fe:	fc cf       	rjmp	.-8      	; 0x37f8 <ad_370c>
    3800:	20 91 78 00 	lds	r18, 0x0078
    3804:	30 91 79 00 	lds	r19, 0x0079
    3808:	28 8b       	std	Y+16, r18	; 0x10
    380a:	39 8b       	std	Y+17, r19	; 0x11
    380c:	3f 85       	ldd	r19, Y+15	; 0x0f
    380e:	37 b9       	out	0x07, r19	; 7
    3810:	c5 b8       	out	0x05, r12	; 5
    3812:	c4 b8       	out	0x04, r12	; 4
    3814:	a8 95       	wdr
    3816:	b0 92 7c 00 	sts	0x007C, r11
    381a:	a0 92 7a 00 	sts	0x007A, r10
    381e:	80 91 7a 00 	lds	r24, 0x007A
    3822:	86 fd       	sbrc	r24, 6
    3824:	fc cf       	rjmp	.-8      	; 0x381e <ad_370c+0x26>
    3826:	a0 92 7a 00 	sts	0x007A, r10
    382a:	80 91 7a 00 	lds	r24, 0x007A
    382e:	86 fd       	sbrc	r24, 6
    3830:	fc cf       	rjmp	.-8      	; 0x382a <ad_370c+0x32>
    3832:	60 91 78 00 	lds	r22, 0x0078
    3836:	70 91 79 00 	lds	r23, 0x0079
    383a:	60 92 7c 00 	sts	0x007C, r6
    383e:	a0 92 7a 00 	sts	0x007A, r10
    3842:	80 91 7a 00 	lds	r24, 0x007A
    3846:	86 fd       	sbrc	r24, 6
    3848:	fc cf       	rjmp	.-8      	; 0x3842 <ad_370c+0x4a>
    384a:	80 92 7a 00 	sts	0x007A, r8
    384e:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <wait5us>
    3852:	75 b8       	out	0x05, r7	; 5
    3854:	74 b8       	out	0x04, r7	; 4
    3856:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <wait20us>
    385a:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <wait5us>
    385e:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <wait1us>
    3862:	8f 93       	push	r24
    3864:	8f 91       	pop	r24
    3866:	a8 95       	wdr
    3868:	a8 95       	wdr
    386a:	14 b8       	out	0x04, r1	; 4
    386c:	15 b8       	out	0x05, r1	; 5

0000386e <ad_37f4>:
    386e:	80 91 7a 00 	lds	r24, 0x007A
    3872:	86 fd       	sbrc	r24, 6
    3874:	fc cf       	rjmp	.-8      	; 0x386e <ad_37f4>
    3876:	40 91 78 00 	lds	r20, 0x0078
    387a:	50 91 79 00 	lds	r21, 0x0079
    387e:	14 b8       	out	0x04, r1	; 4
    3880:	cb 01       	movw	r24, r22
    3882:	82 0d       	add	r24, r2
    3884:	93 1d       	adc	r25, r3
    3886:	e8 0e       	add	r14, r24
    3888:	f9 1e       	adc	r15, r25
    388a:	01 1d       	adc	r16, r1
    388c:	11 1d       	adc	r17, r1
    388e:	ea 82       	std	Y+2, r14	; 0x02
    3890:	fb 82       	std	Y+3, r15	; 0x03
    3892:	0c 83       	std	Y+4, r16	; 0x04
    3894:	1d 83       	std	Y+5, r17	; 0x05
    3896:	88 89       	ldd	r24, Y+16	; 0x10
    3898:	99 89       	ldd	r25, Y+17	; 0x11
    389a:	84 0f       	add	r24, r20
    389c:	95 1f       	adc	r25, r21
    389e:	2e 81       	ldd	r18, Y+6	; 0x06
    38a0:	3f 81       	ldd	r19, Y+7	; 0x07
    38a2:	68 85       	ldd	r22, Y+8	; 0x08
    38a4:	79 85       	ldd	r23, Y+9	; 0x09
    38a6:	28 0f       	add	r18, r24
    38a8:	39 1f       	adc	r19, r25
    38aa:	61 1d       	adc	r22, r1
    38ac:	71 1d       	adc	r23, r1
    38ae:	2e 83       	std	Y+6, r18	; 0x06
    38b0:	3f 83       	std	Y+7, r19	; 0x07
    38b2:	68 87       	std	Y+8, r22	; 0x08
    38b4:	79 87       	std	Y+9, r23	; 0x09
    38b6:	24 e6       	ldi	r18, 0x64	; 100
    38b8:	24 17       	cp	r18, r20
    38ba:	15 06       	cpc	r1, r21
    38bc:	50 f0       	brcs	.+20     	; 0x38d2 <is_ok1>
    38be:	75 b8       	out	0x05, r7	; 5
    38c0:	74 b8       	out	0x04, r7	; 4
    38c2:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <wait2us>
    38c6:	14 b8       	out	0x04, r1	; 4
    38c8:	15 b8       	out	0x05, r1	; 5
    38ca:	88 8d       	ldd	r24, Y+24	; 0x18
    38cc:	83 95       	inc	r24
    38ce:	88 8f       	std	Y+24, r24	; 0x18
    38d0:	07 c0       	rjmp	.+14     	; 0x38e0 <is_ok1b>

000038d2 <is_ok1>:
    38d2:	48 3e       	cpi	r20, 0xE8	; 232
    38d4:	73 e0       	ldi	r23, 0x03	; 3
    38d6:	57 07       	cpc	r21, r23
    38d8:	18 f0       	brcs	.+6      	; 0x38e0 <is_ok1b>
    38da:	8a 8d       	ldd	r24, Y+26	; 0x1a
    38dc:	83 95       	inc	r24
    38de:	8a 8f       	std	Y+26, r24	; 0x1a

000038e0 <is_ok1b>:
    38e0:	88 89       	ldd	r24, Y+16	; 0x10
    38e2:	99 89       	ldd	r25, Y+17	; 0x11
    38e4:	28 17       	cp	r18, r24
    38e6:	19 06       	cpc	r1, r25
    38e8:	b0 f0       	brcs	.+44     	; 0x3916 <is_ok2>
    38ea:	3e 85       	ldd	r19, Y+14	; 0x0e
    38ec:	37 b9       	out	0x07, r19	; 7
    38ee:	c5 b8       	out	0x05, r12	; 5
    38f0:	c4 b8       	out	0x04, r12	; 4
    38f2:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <wait2us>
    38f6:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <wait20us>
    38fa:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <wait5us>
    38fe:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <wait1us>
    3902:	8f 93       	push	r24
    3904:	8f 91       	pop	r24
    3906:	a8 95       	wdr
    3908:	a8 95       	wdr
    390a:	14 b8       	out	0x04, r1	; 4
    390c:	15 b8       	out	0x05, r1	; 5
    390e:	89 8d       	ldd	r24, Y+25	; 0x19
    3910:	83 95       	inc	r24
    3912:	89 8f       	std	Y+25, r24	; 0x19
    3914:	07 c0       	rjmp	.+14     	; 0x3924 <is_ok2b>

00003916 <is_ok2>:
    3916:	88 3e       	cpi	r24, 0xE8	; 232
    3918:	73 e0       	ldi	r23, 0x03	; 3
    391a:	97 07       	cpc	r25, r23
    391c:	18 f0       	brcs	.+6      	; 0x3924 <is_ok2b>
    391e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3920:	83 95       	inc	r24
    3922:	8a 8f       	std	Y+26, r24	; 0x1a

00003924 <is_ok2b>:
    3924:	d3 94       	inc	r13
    3926:	5d 2d       	mov	r21, r13
    3928:	5f 3f       	cpi	r21, 0xFF	; 255
    392a:	09 f0       	breq	.+2      	; 0x392e <ad_38ac>
    392c:	34 cf       	rjmp	.-408    	; 0x3796 <ad_3692>

0000392e <ad_38ac>:
    392e:	40 90 3d 01 	lds	r4, 0x013D
    3932:	50 90 3e 01 	lds	r5, 0x013E
    3936:	44 0c       	add	r4, r4
    3938:	55 1c       	adc	r5, r5
    393a:	92 01       	movw	r18, r4
    393c:	e4 e0       	ldi	r30, 0x04	; 4

0000393e <ad_3924>:
    393e:	24 0d       	add	r18, r4
    3940:	35 1d       	adc	r19, r5
    3942:	ea 95       	dec	r30
    3944:	e1 f7       	brne	.-8      	; 0x393e <ad_3924>
    3946:	29 01       	movw	r4, r18
    3948:	57 01       	movw	r10, r14
    394a:	68 01       	movw	r12, r16
    394c:	6e 80       	ldd	r6, Y+6	; 0x06
    394e:	7f 80       	ldd	r7, Y+7	; 0x07
    3950:	88 84       	ldd	r8, Y+8	; 0x08
    3952:	99 84       	ldd	r9, Y+9	; 0x09
    3954:	20 91 07 01 	lds	r18, 0x0107
    3958:	27 30       	cpi	r18, 0x07	; 7
    395a:	c1 f4       	brne	.+48     	; 0x398c <no_sub>
    395c:	6c 89       	ldd	r22, Y+20	; 0x14
    395e:	7d 89       	ldd	r23, Y+21	; 0x15
    3960:	8e 89       	ldd	r24, Y+22	; 0x16
    3962:	9f 89       	ldd	r25, Y+23	; 0x17
    3964:	9b 01       	movw	r18, r22
    3966:	ac 01       	movw	r20, r24
    3968:	6d 5e       	subi	r22, 0xED	; 237
    396a:	7f 4f       	sbci	r23, 0xFF	; 255
    396c:	8f 4f       	sbci	r24, 0xFF	; 255
    396e:	9f 4f       	sbci	r25, 0xFF	; 255
    3970:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
    3974:	9b 01       	movw	r18, r22
    3976:	ac 01       	movw	r20, r24
    3978:	6c e1       	ldi	r22, 0x1C	; 28
    397a:	79 e3       	ldi	r23, 0x39	; 57
    397c:	80 e9       	ldi	r24, 0x90	; 144
    397e:	9a e1       	ldi	r25, 0x1A	; 26
    3980:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    3984:	62 1a       	sub	r6, r18
    3986:	73 0a       	sbc	r7, r19
    3988:	84 0a       	sbc	r8, r20
    398a:	95 0a       	sbc	r9, r21

0000398c <no_sub>:
    398c:	a6 14       	cp	r10, r6
    398e:	b7 04       	cpc	r11, r7
    3990:	c8 04       	cpc	r12, r8
    3992:	d9 04       	cpc	r13, r9
    3994:	28 f4       	brcc	.+10     	; 0x39a0 <ad_396c>
    3996:	6a 18       	sub	r6, r10
    3998:	7b 08       	sbc	r7, r11
    399a:	8c 08       	sbc	r8, r12
    399c:	9d 08       	sbc	r9, r13
    399e:	03 c0       	rjmp	.+6      	; 0x39a6 <ad_3972>

000039a0 <ad_396c>:
    39a0:	66 24       	eor	r6, r6
    39a2:	77 24       	eor	r7, r7
    39a4:	43 01       	movw	r8, r6

000039a6 <ad_3972>:
    39a6:	b2 01       	movw	r22, r4
    39a8:	80 e0       	ldi	r24, 0x00	; 0
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	93 01       	movw	r18, r6
    39ae:	a4 01       	movw	r20, r8
    39b0:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
    39b4:	95 01       	movw	r18, r10
    39b6:	a6 01       	movw	r20, r12
    39b8:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    39bc:	88 ea       	ldi	r24, 0xA8	; 168
    39be:	91 e0       	ldi	r25, 0x01	; 1
    39c0:	79 81       	ldd	r23, Y+1	; 0x01
    39c2:	87 0f       	add	r24, r23
    39c4:	91 1d       	adc	r25, r1
    39c6:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__eerd_byte_m168>
    39ca:	68 2e       	mov	r6, r24
    39cc:	c9 01       	movw	r24, r18
    39ce:	60 e1       	ldi	r22, 0x10	; 16
    39d0:	70 e0       	ldi	r23, 0x00	; 0
    39d2:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <__udivmodhi4>
    39d6:	26 0f       	add	r18, r22
    39d8:	37 1f       	adc	r19, r23
    39da:	c9 01       	movw	r24, r18
    39dc:	68 16       	cp	r6, r24
    39de:	19 06       	cpc	r1, r25
    39e0:	18 f4       	brcc	.+6      	; 0x39e8 <esr_too_less>
    39e2:	86 19       	sub	r24, r6
    39e4:	91 09       	sbc	r25, r1
    39e6:	09 c0       	rjmp	.+18     	; 0x39fa <ad_exit>

000039e8 <esr_too_less>:
    39e8:	8c 5e       	subi	r24, 0xEC	; 236
    39ea:	9f 4f       	sbci	r25, 0xFF	; 255
    39ec:	86 15       	cp	r24, r6
    39ee:	91 05       	cpc	r25, r1
    39f0:	10 f4       	brcc	.+4      	; 0x39f6 <esr_too_less2>
    39f2:	0e 94 d6 04 	call	0x9ac	; 0x9ac <mark_as_uncalibrated>

000039f6 <esr_too_less2>:
    39f6:	81 2d       	mov	r24, r1
    39f8:	91 2d       	mov	r25, r1

000039fa <ad_exit>:
    39fa:	6e 96       	adiw	r28, 0x1e	; 30
    39fc:	0f b6       	in	r0, 0x3f	; 63
    39fe:	f8 94       	cli
    3a00:	de bf       	out	0x3e, r29	; 62
    3a02:	0f be       	out	0x3f, r0	; 63
    3a04:	cd bf       	out	0x3d, r28	; 61
    3a06:	cf 91       	pop	r28
    3a08:	df 91       	pop	r29
    3a0a:	1f 91       	pop	r17
    3a0c:	0f 91       	pop	r16
    3a0e:	ff 90       	pop	r15
    3a10:	ef 90       	pop	r14
    3a12:	df 90       	pop	r13
    3a14:	cf 90       	pop	r12
    3a16:	bf 90       	pop	r11
    3a18:	af 90       	pop	r10
    3a1a:	9f 90       	pop	r9
    3a1c:	8f 90       	pop	r8
    3a1e:	7f 90       	pop	r7
    3a20:	6f 90       	pop	r6
    3a22:	5f 90       	pop	r5
    3a24:	4f 90       	pop	r4
    3a26:	3f 90       	pop	r3
    3a28:	2f 90       	pop	r2
    3a2a:	08 95       	ret

00003a2c <GetVloss>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void GetVloss() {
    3a2c:	cf 92       	push	r12
    3a2e:	df 92       	push	r13
    3a30:	ef 92       	push	r14
    3a32:	ff 92       	push	r15
    3a34:	0f 93       	push	r16
    3a36:	1f 93       	push	r17
    3a38:	cf 93       	push	r28
    3a3a:	df 93       	push	r29
  } lval;
  uint8_t ii;
  uint8_t HiPinR_L;
  uint8_t LoADC;

  if (cap.v_loss > 0) return;		// Voltage loss is already known
    3a3c:	80 91 78 01 	lds	r24, 0x0178
    3a40:	90 91 79 01 	lds	r25, 0x0179
    3a44:	00 97       	sbiw	r24, 0x00	; 0
    3a46:	09 f0       	breq	.+2      	; 0x3a4a <GetVloss+0x1e>
    3a48:	a2 c0       	rjmp	.+324    	; 0x3b8e <GetVloss+0x162>
  LoADC = pgm_read_byte(&PinADCtab[cap.ca]) | TXD_MSK;
    3a4a:	e0 91 7a 01 	lds	r30, 0x017A
    3a4e:	f0 e0       	ldi	r31, 0x00	; 0
    3a50:	e3 51       	subi	r30, 0x13	; 19
    3a52:	ff 4f       	sbci	r31, 0xFF	; 255
    3a54:	04 91       	lpm	r16, Z+
    3a56:	08 60       	ori	r16, 0x08	; 8
  HiPinR_L = pgm_read_byte(&PinRLtab[cap.cb]);	//R_L mask for HighPin R_L load
    3a58:	e0 91 7b 01 	lds	r30, 0x017B
    3a5c:	f0 e0       	ldi	r31, 0x00	; 0
    3a5e:	e6 51       	subi	r30, 0x16	; 22
    3a60:	ff 4f       	sbci	r31, 0xFF	; 255
    3a62:	14 91       	lpm	r17, Z+

  EntladePins();			// discharge capacitor
    3a64:	0e 94 0c 0b 	call	0x1618	; 0x1618 <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    3a68:	88 e0       	ldi	r24, 0x08	; 8
    3a6a:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    3a6c:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    3a6e:	07 b9       	out	0x07, r16	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    3a70:	14 b9       	out	0x04, r17	; 4
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
    3a72:	80 91 7b 01 	lds	r24, 0x017B
    3a76:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
    3a7a:	ec 01       	movw	r28, r24
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
    3a7c:	00 91 7d 01 	lds	r16, 0x017D
    3a80:	08 3f       	cpi	r16, 0xF8	; 248
    3a82:	0c f0       	brlt	.+2      	; 0x3a86 <GetVloss+0x5a>
    3a84:	84 c0       	rjmp	.+264    	; 0x3b8e <GetVloss+0x162>
  lval.dw = cap.cval_max;
    3a86:	20 91 6e 01 	lds	r18, 0x016E
    3a8a:	30 91 6f 01 	lds	r19, 0x016F
    3a8e:	40 91 70 01 	lds	r20, 0x0170
    3a92:	50 91 71 01 	lds	r21, 0x0171
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    3a96:	04 5f       	subi	r16, 0xF4	; 244
     lval.dw = (lval.dw + 5) / 10;
    3a98:	8a e0       	ldi	r24, 0x0A	; 10
    3a9a:	c8 2e       	mov	r12, r24
    3a9c:	d1 2c       	mov	r13, r1
    3a9e:	e1 2c       	mov	r14, r1
    3aa0:	f1 2c       	mov	r15, r1
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
  lval.dw = cap.cval_max;
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    3aa2:	0b c0       	rjmp	.+22     	; 0x3aba <GetVloss+0x8e>
     lval.dw = (lval.dw + 5) / 10;
    3aa4:	ca 01       	movw	r24, r20
    3aa6:	b9 01       	movw	r22, r18
    3aa8:	6b 5f       	subi	r22, 0xFB	; 251
    3aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    3aac:	8f 4f       	sbci	r24, 0xFF	; 255
    3aae:	9f 4f       	sbci	r25, 0xFF	; 255
    3ab0:	a7 01       	movw	r20, r14
    3ab2:	96 01       	movw	r18, r12
    3ab4:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
  lval.dw = cap.cval_max;
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    3ab8:	0f 5f       	subi	r16, 0xFF	; 255
    3aba:	04 30       	cpi	r16, 0x04	; 4
    3abc:	98 f3       	brcs	.-26     	; 0x3aa4 <GetVloss+0x78>
    3abe:	79 01       	movw	r14, r18
     lval.dw = (lval.dw + 5) / 10;
  }
//  if ((lval.dw == 0) || (lval.dw > 500)) {
  if ((lval.dw == 0) || (lval.dw > 5000)) {
    3ac0:	21 50       	subi	r18, 0x01	; 1
    3ac2:	30 40       	sbci	r19, 0x00	; 0
    3ac4:	40 40       	sbci	r20, 0x00	; 0
    3ac6:	50 40       	sbci	r21, 0x00	; 0
    3ac8:	28 38       	cpi	r18, 0x88	; 136
    3aca:	83 e1       	ldi	r24, 0x13	; 19
    3acc:	38 07       	cpc	r19, r24
    3ace:	80 e0       	ldi	r24, 0x00	; 0
    3ad0:	48 07       	cpc	r20, r24
    3ad2:	80 e0       	ldi	r24, 0x00	; 0
    3ad4:	58 07       	cpc	r21, r24
    3ad6:	08 f0       	brcs	.+2      	; 0x3ada <GetVloss+0xae>
    3ad8:	5a c0       	rjmp	.+180    	; 0x3b8e <GetVloss+0x162>
     /* capacity more than 50uF, Voltage loss is already measured  */
     return;
  }
  R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    3ada:	15 b9       	out	0x05, r17	; 5
  R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    3adc:	14 b9       	out	0x04, r17	; 4
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    3ade:	00 e0       	ldi	r16, 0x00	; 0
    3ae0:	10 e0       	ldi	r17, 0x00	; 0
    3ae2:	04 c0       	rjmp	.+8      	; 0x3aec <GetVloss+0xc0>
//     wait50us();			// wait exactly 50us
     wait5us();			// wait exactly 5us
    3ae4:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <wait5us>
     /* capacity more than 50uF, Voltage loss is already measured  */
     return;
  }
  R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
  R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    3ae8:	0e 5f       	subi	r16, 0xFE	; 254
    3aea:	1f 4f       	sbci	r17, 0xFF	; 255
    3aec:	67 01       	movw	r12, r14
    3aee:	0e 15       	cp	r16, r14
    3af0:	1f 05       	cpc	r17, r15
    3af2:	c0 f3       	brcs	.-16     	; 0x3ae4 <GetVloss+0xb8>
//     wait50us();			// wait exactly 50us
     wait5us();			// wait exactly 5us
  }
  R_DDR = 0;				// switch back to input
    3af4:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// no Pull up
    3af6:	15 b8       	out	0x05, r1	; 5
 // wait10us();			//wait a little time
  wdt_reset();
    3af8:	a8 95       	wdr
  // read voltage without current
  ADCconfig.Samples = 5;		// set ADC to only 5 samples
    3afa:	85 e0       	ldi	r24, 0x05	; 5
    3afc:	80 93 31 01 	sts	0x0131, r24
  adcv[2] = ReadADC(cap.cb);
    3b00:	80 91 7b 01 	lds	r24, 0x017B
    3b04:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
  if (adcv[2] > adcv[0]) {
    3b08:	c8 17       	cp	r28, r24
    3b0a:	d9 07       	cpc	r29, r25
    3b0c:	20 f4       	brcc	.+8      	; 0x3b16 <GetVloss+0xea>
     adcv[2] -= adcv[0];		//difference to beginning voltage
    3b0e:	8c 01       	movw	r16, r24
    3b10:	0c 1b       	sub	r16, r28
    3b12:	1d 0b       	sbc	r17, r29
    3b14:	02 c0       	rjmp	.+4      	; 0x3b1a <GetVloss+0xee>
  } else {
     adcv[2] = 0;			// voltage is lower or same as beginning voltage
    3b16:	00 e0       	ldi	r16, 0x00	; 0
    3b18:	10 e0       	ldi	r17, 0x00	; 0
  }
  // wait 2x the time which was required for loading
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    3b1a:	ee 24       	eor	r14, r14
    3b1c:	ff 24       	eor	r15, r15
    3b1e:	05 c0       	rjmp	.+10     	; 0x3b2a <GetVloss+0xfe>
//     wait50us();
     wait5us();
    3b20:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <wait5us>
     adcv[2] -= adcv[0];		//difference to beginning voltage
  } else {
     adcv[2] = 0;			// voltage is lower or same as beginning voltage
  }
  // wait 2x the time which was required for loading
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    3b24:	08 94       	sec
    3b26:	e1 1c       	adc	r14, r1
    3b28:	f1 1c       	adc	r15, r1
    3b2a:	ec 14       	cp	r14, r12
    3b2c:	fd 04       	cpc	r15, r13
    3b2e:	c0 f3       	brcs	.-16     	; 0x3b20 <GetVloss+0xf4>
//     wait50us();
     wait5us();
  }
  adcv[3] = ReadADC(cap.cb);	// read voltage again, is discharged only a little bit ?
    3b30:	80 91 7b 01 	lds	r24, 0x017B
    3b34:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
  ADCconfig.Samples = ANZ_MESS;		// set ADC back to configured No. of samples
    3b38:	29 e1       	ldi	r18, 0x19	; 25
    3b3a:	20 93 31 01 	sts	0x0131, r18
  wdt_reset();
    3b3e:	a8 95       	wdr
  if (adcv[3] > adcv[0]) {
    3b40:	c8 17       	cp	r28, r24
    3b42:	d9 07       	cpc	r29, r25
    3b44:	18 f4       	brcc	.+6      	; 0x3b4c <GetVloss+0x120>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    3b46:	8c 1b       	sub	r24, r28
    3b48:	9d 0b       	sbc	r25, r29
    3b4a:	02 c0       	rjmp	.+4      	; 0x3b50 <GetVloss+0x124>
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    3b4c:	80 e0       	ldi	r24, 0x00	; 0
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
    3b50:	80 17       	cp	r24, r16
    3b52:	91 07       	cpc	r25, r17
    3b54:	a8 f4       	brcc	.+42     	; 0x3b80 <GetVloss+0x154>
     // build difference to load voltage
     adcv[1] = adcv[2] - adcv[3];	// lost voltage during load time wait
    3b56:	b8 01       	movw	r22, r16
    3b58:	68 1b       	sub	r22, r24
    3b5a:	79 0b       	sbc	r23, r25
  } else {
     adcv[1] = 0;			// no lost voltage
  }
  // compute voltage drop as part from loaded voltage
  if (adcv[1] > 0) {
    3b5c:	89 f0       	breq	.+34     	; 0x3b80 <GetVloss+0x154>
     // there is any voltage drop (adcv[1]) !
     // adcv[2] is the loaded voltage.
     cap.v_loss = (unsigned long)(adcv[1] * 500UL) / adcv[2];
    3b5e:	80 e0       	ldi	r24, 0x00	; 0
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	24 ef       	ldi	r18, 0xF4	; 244
    3b64:	31 e0       	ldi	r19, 0x01	; 1
    3b66:	40 e0       	ldi	r20, 0x00	; 0
    3b68:	50 e0       	ldi	r21, 0x00	; 0
    3b6a:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
    3b6e:	98 01       	movw	r18, r16
    3b70:	40 e0       	ldi	r20, 0x00	; 0
    3b72:	50 e0       	ldi	r21, 0x00	; 0
    3b74:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    3b78:	30 93 79 01 	sts	0x0179, r19
    3b7c:	20 93 78 01 	sts	0x0178, r18
  lcd_line4();
  DisplayValue(lval.w[0],0,'x',4);
#endif

  // discharge capacitor again
  EntladePins();		// discharge capacitors
    3b80:	0e 94 0c 0b 	call	0x1618	; 0x1618 <EntladePins>
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    3b84:	88 e0       	ldi	r24, 0x08	; 8
    3b86:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    3b88:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    3b8a:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    3b8c:	15 b8       	out	0x05, r1	; 5
#endif
  return;
 } // end GetVdrop()
    3b8e:	df 91       	pop	r29
    3b90:	cf 91       	pop	r28
    3b92:	1f 91       	pop	r17
    3b94:	0f 91       	pop	r16
    3b96:	ff 90       	pop	r15
    3b98:	ef 90       	pop	r14
    3b9a:	df 90       	pop	r13
    3b9c:	cf 90       	pop	r12
    3b9e:	08 95       	ret

00003ba0 <Calibrate_UR>:
#include "Transistortester.h"
void Calibrate_UR(void) {
    3ba0:	8f 92       	push	r8
    3ba2:	9f 92       	push	r9
    3ba4:	af 92       	push	r10
    3ba6:	bf 92       	push	r11
    3ba8:	cf 92       	push	r12
    3baa:	df 92       	push	r13
    3bac:	ef 92       	push	r14
    3bae:	ff 92       	push	r15
    3bb0:	0f 93       	push	r16
    3bb2:	1f 93       	push	r17
    3bb4:	cf 93       	push	r28
    3bb6:	df 93       	push	r29
  uint16_t sum_rp;	// sum of 3 Pin voltages with 680 Ohm load
  uint16_t u680;	// 3 * (Voltage at 680 Ohm)
#endif


  ADCconfig.U_AVCC = U_VCC;     // set initial VCC Voltage
    3bb8:	88 e8       	ldi	r24, 0x88	; 136
    3bba:	93 e1       	ldi	r25, 0x13	; 19
    3bbc:	90 93 36 01 	sts	0x0136, r25
    3bc0:	80 93 35 01 	sts	0x0135, r24
  ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    3bc4:	8e eb       	ldi	r24, 0xBE	; 190
    3bc6:	80 93 31 01 	sts	0x0131, r24
                                        //############################################
#if FLASHEND > 0x1fff
  uint16_t mv2500;
  ADC_PORT = TXD_VAL;                   // switch to 0V
    3bca:	08 e0       	ldi	r16, 0x08	; 8
    3bcc:	08 b9       	out	0x08, r16	; 8
  ADC_DDR = (1<<TPREF) | TXD_MSK;       // switch pin with 2.5V reference to GND
    3bce:	88 e1       	ldi	r24, 0x18	; 24
    3bd0:	87 b9       	out	0x07, r24	; 7
  wait20us();			// switch only short time, so that the relais do not really switch
    3bd2:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <wait20us>
  ADC_DDR =  TXD_MSK;		// switch pin with reference back to input
    3bd6:	07 b9       	out	0x07, r16	; 7
  mv2500 = W5msReadADC(TPREF); // read voltage of 2.5V precision reference
    3bd8:	84 e0       	ldi	r24, 0x04	; 4
    3bda:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    3bde:	ec 01       	movw	r28, r24
  if ((mv2500 > 2250) && (mv2500 < 2750)) {
    3be0:	8b 5c       	subi	r24, 0xCB	; 203
    3be2:	98 40       	sbci	r25, 0x08	; 8
    3be4:	21 e0       	ldi	r18, 0x01	; 1
    3be6:	83 3f       	cpi	r24, 0xF3	; 243
    3be8:	92 07       	cpc	r25, r18
    3bea:	c0 f4       	brcc	.+48     	; 0x3c1c <Calibrate_UR+0x7c>
     // precision voltage reference connected, update U_AVCC
     WithReference = 1;
    3bec:	81 e0       	ldi	r24, 0x01	; 1
    3bee:	80 93 3f 01 	sts	0x013F, r24
     ADCconfig.U_AVCC = (unsigned long)((unsigned long)ADCconfig.U_AVCC * 2495) / mv2500;
    3bf2:	60 91 35 01 	lds	r22, 0x0135
    3bf6:	70 91 36 01 	lds	r23, 0x0136
    3bfa:	80 e0       	ldi	r24, 0x00	; 0
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	2f eb       	ldi	r18, 0xBF	; 191
    3c00:	39 e0       	ldi	r19, 0x09	; 9
    3c02:	40 e0       	ldi	r20, 0x00	; 0
    3c04:	50 e0       	ldi	r21, 0x00	; 0
    3c06:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
    3c0a:	9e 01       	movw	r18, r28
    3c0c:	40 e0       	ldi	r20, 0x00	; 0
    3c0e:	50 e0       	ldi	r21, 0x00	; 0
    3c10:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    3c14:	30 93 36 01 	sts	0x0136, r19
    3c18:	20 93 35 01 	sts	0x0135, r18
  }
#endif
#ifdef WITH_AUTO_REF
  (void) ReadADC(MUX_INT_REF);	// read reference voltage 
    3c1c:	8e e0       	ldi	r24, 0x0E	; 14
    3c1e:	0e 94 8d 13 	call	0x271a	; 0x271a <ReadADC>
  ref_mv = W5msReadADC(MUX_INT_REF);	// read reference voltage 
    3c22:	8e e0       	ldi	r24, 0x0E	; 14
    3c24:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    3c28:	90 93 3a 01 	sts	0x013A, r25
    3c2c:	80 93 39 01 	sts	0x0139, r24
  RefVoltage();			//compute RHmultip = f(reference voltage)
    3c30:	0e 94 90 0c 	call	0x1920	; 0x1920 <RefVoltage>
#else
  ref_mv = DEFAULT_BAND_GAP;    // set to default Reference Voltage
#endif
  ADCconfig.U_Bandgap = ADC_internal_reference; // set internal reference voltage for ADC
    3c34:	8e e9       	ldi	r24, 0x9E	; 158
    3c36:	91 e0       	ldi	r25, 0x01	; 1
    3c38:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <__eerd_byte_m168>
    3c3c:	99 27       	eor	r25, r25
    3c3e:	87 fd       	sbrc	r24, 7
    3c40:	90 95       	com	r25
    3c42:	20 91 39 01 	lds	r18, 0x0139
    3c46:	30 91 3a 01 	lds	r19, 0x013A
    3c4a:	82 0f       	add	r24, r18
    3c4c:	93 1f       	adc	r25, r19
    3c4e:	90 93 34 01 	sts	0x0134, r25
    3c52:	80 93 33 01 	sts	0x0133, r24
                                        //############################################

#ifdef AUTO_CAL
  // measurement of internal resistance of the ADC port outputs switched to GND
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    3c56:	79 e0       	ldi	r23, 0x09	; 9
    3c58:	d7 2e       	mov	r13, r23
    3c5a:	d7 b8       	out	0x07, r13	; 7
  R_PORT = 1<<PIN_RL1;		//R_L-PORT 1 to VCC
    3c5c:	aa 24       	eor	r10, r10
    3c5e:	a3 94       	inc	r10
    3c60:	a5 b8       	out	0x05, r10	; 5
  R_DDR = 1<<PIN_RL1;		//Pin 1 to output and over R_L to VCC
    3c62:	a4 b8       	out	0x04, r10	; 4
  sum_rm = W5msReadADC(TP1);
    3c64:	80 e0       	ldi	r24, 0x00	; 0
    3c66:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    3c6a:	8c 01       	movw	r16, r24

  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin 2 to output 0V
    3c6c:	6a e0       	ldi	r22, 0x0A	; 10
    3c6e:	86 2e       	mov	r8, r22
    3c70:	87 b8       	out	0x07, r8	; 7
  R_PORT =  1<<PIN_RL2;		//R_L-PORT 2 to VCC
    3c72:	54 e0       	ldi	r21, 0x04	; 4
    3c74:	c5 2e       	mov	r12, r21
    3c76:	c5 b8       	out	0x05, r12	; 5
  R_DDR = 1<<PIN_RL2;		//Pin 2 to output and over R_L to VCC
    3c78:	c4 b8       	out	0x04, r12	; 4
  sum_rm += W5msReadADC(TP2);
    3c7a:	81 e0       	ldi	r24, 0x01	; 1
    3c7c:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    3c80:	08 0f       	add	r16, r24
    3c82:	19 1f       	adc	r17, r25

  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin 3 to output 0V
    3c84:	4c e0       	ldi	r20, 0x0C	; 12
    3c86:	f4 2e       	mov	r15, r20
    3c88:	f7 b8       	out	0x07, r15	; 7
  R_PORT =  1<<PIN_RL3;		//R_L-PORT 3 to VCC
    3c8a:	30 e1       	ldi	r19, 0x10	; 16
    3c8c:	e3 2e       	mov	r14, r19
    3c8e:	e5 b8       	out	0x05, r14	; 5
  R_DDR = 1<<PIN_RL3;		//Pin 3 to output and over R_L to VCC
    3c90:	e4 b8       	out	0x04, r14	; 4
  sum_rm += W5msReadADC(TP3);	//add all three values
    3c92:	82 e0       	ldi	r24, 0x02	; 2
    3c94:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    3c98:	08 0f       	add	r16, r24
    3c9a:	19 1f       	adc	r17, r25

  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
    3c9c:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
    3c9e:	d8 b8       	out	0x08, r13	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    3ca0:	d7 b8       	out	0x07, r13	; 7
  R_DDR = 1<<PIN_RL1;		//Pin 1 to output and over R_L to GND
    3ca2:	a4 b8       	out	0x04, r10	; 4
  sum_rp = ADCconfig.U_AVCC - W5msReadADC(TP1);
    3ca4:	c0 91 35 01 	lds	r28, 0x0135
    3ca8:	d0 91 36 01 	lds	r29, 0x0136
    3cac:	80 e0       	ldi	r24, 0x00	; 0
    3cae:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    3cb2:	5c 01       	movw	r10, r24
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
    3cb4:	88 b8       	out	0x08, r8	; 8
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
    3cb6:	87 b8       	out	0x07, r8	; 7
  R_DDR = 1<<PIN_RL2;		//Pin 2 to output and over R_L to GND
    3cb8:	c4 b8       	out	0x04, r12	; 4
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP2);
    3cba:	c0 90 35 01 	lds	r12, 0x0135
    3cbe:	d0 90 36 01 	lds	r13, 0x0136
    3cc2:	81 e0       	ldi	r24, 0x01	; 1
    3cc4:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
    3cc8:	4c 01       	movw	r8, r24

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
    3cca:	f8 b8       	out	0x08, r15	; 8
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
    3ccc:	f7 b8       	out	0x07, r15	; 7
  R_DDR = 1<<PIN_RL3;		//Pin 3 to output and over R_L to GND
    3cce:	e4 b8       	out	0x04, r14	; 4
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP3);
    3cd0:	e0 90 35 01 	lds	r14, 0x0135
    3cd4:	f0 90 36 01 	lds	r15, 0x0136
    3cd8:	82 e0       	ldi	r24, 0x02	; 2
    3cda:	0e 94 87 13 	call	0x270e	; 0x270e <W5msReadADC>
  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
  R_DDR = 1<<PIN_RL1;		//Pin 1 to output and over R_L to GND
  sum_rp = ADCconfig.U_AVCC - W5msReadADC(TP1);
    3cde:	cc 0d       	add	r28, r12
    3ce0:	dd 1d       	adc	r29, r13
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
  R_DDR = 1<<PIN_RL2;		//Pin 2 to output and over R_L to GND
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP2);
    3ce2:	ce 0d       	add	r28, r14
    3ce4:	df 1d       	adc	r29, r15
    3ce6:	ca 19       	sub	r28, r10
    3ce8:	db 09       	sbc	r29, r11

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
  R_DDR = 1<<PIN_RL3;		//Pin 3 to output and over R_L to GND
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP3);
    3cea:	c8 19       	sub	r28, r8
    3cec:	d9 09       	sbc	r29, r9
    3cee:	c8 1b       	sub	r28, r24
    3cf0:	d9 0b       	sbc	r29, r25

  u680 = ((ADCconfig.U_AVCC * 3) - sum_rm - sum_rp);	//three times the voltage at the 680 Ohm
    3cf2:	80 91 35 01 	lds	r24, 0x0135
    3cf6:	90 91 36 01 	lds	r25, 0x0136
    3cfa:	6c 01       	movw	r12, r24
    3cfc:	cc 0c       	add	r12, r12
    3cfe:	dd 1c       	adc	r13, r13
    3d00:	c8 0e       	add	r12, r24
    3d02:	d9 1e       	adc	r13, r25
    3d04:	c0 1a       	sub	r12, r16
    3d06:	d1 0a       	sbc	r13, r17
    3d08:	cc 1a       	sub	r12, r28
    3d0a:	dd 0a       	sbc	r13, r29
  pin_rmi = (unsigned long)((unsigned long)sum_rm * (unsigned long)R_L_VAL) / (unsigned long)u680;
    3d0c:	ee 24       	eor	r14, r14
    3d0e:	ff 24       	eor	r15, r15
    3d10:	b8 01       	movw	r22, r16
    3d12:	80 e0       	ldi	r24, 0x00	; 0
    3d14:	90 e0       	ldi	r25, 0x00	; 0
    3d16:	20 e9       	ldi	r18, 0x90	; 144
    3d18:	3a e1       	ldi	r19, 0x1A	; 26
    3d1a:	40 e0       	ldi	r20, 0x00	; 0
    3d1c:	50 e0       	ldi	r21, 0x00	; 0
    3d1e:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
    3d22:	a7 01       	movw	r20, r14
    3d24:	96 01       	movw	r18, r12
    3d26:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    3d2a:	89 01       	movw	r16, r18
    3d2c:	30 93 3e 01 	sts	0x013E, r19
    3d30:	20 93 3d 01 	sts	0x013D, r18
//  adcmv[2] = pin_rm;	// for last output in row 2
  pin_rpl = (unsigned long)((unsigned long)sum_rp * (unsigned long)R_L_VAL) / (unsigned long)u680;
    3d34:	be 01       	movw	r22, r28
    3d36:	80 e0       	ldi	r24, 0x00	; 0
    3d38:	90 e0       	ldi	r25, 0x00	; 0
    3d3a:	20 e9       	ldi	r18, 0x90	; 144
    3d3c:	3a e1       	ldi	r19, 0x1A	; 26
    3d3e:	40 e0       	ldi	r20, 0x00	; 0
    3d40:	50 e0       	ldi	r21, 0x00	; 0
    3d42:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__mulsi3>
    3d46:	a7 01       	movw	r20, r14
    3d48:	96 01       	movw	r18, r12
    3d4a:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <__udivmodsi4>
    3d4e:	c9 01       	movw	r24, r18
    3d50:	30 93 38 01 	sts	0x0138, r19
    3d54:	20 93 37 01 	sts	0x0137, r18
  resis680pl = pin_rpl + R_L_VAL;
    3d58:	80 57       	subi	r24, 0x70	; 112
    3d5a:	95 4e       	sbci	r25, 0xE5	; 229
    3d5c:	90 93 09 01 	sts	0x0109, r25
    3d60:	80 93 08 01 	sts	0x0108, r24
  resis680mi = pin_rmi + R_L_VAL;
    3d64:	00 57       	subi	r16, 0x70	; 112
    3d66:	15 4e       	sbci	r17, 0xE5	; 229
    3d68:	10 93 04 01 	sts	0x0104, r17
    3d6c:	00 93 03 01 	sts	0x0103, r16
#endif

  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    3d70:	89 e1       	ldi	r24, 0x19	; 25
    3d72:	80 93 31 01 	sts	0x0131, r24
 } 
    3d76:	df 91       	pop	r29
    3d78:	cf 91       	pop	r28
    3d7a:	1f 91       	pop	r17
    3d7c:	0f 91       	pop	r16
    3d7e:	ff 90       	pop	r15
    3d80:	ef 90       	pop	r14
    3d82:	df 90       	pop	r13
    3d84:	cf 90       	pop	r12
    3d86:	bf 90       	pop	r11
    3d88:	af 90       	pop	r10
    3d8a:	9f 90       	pop	r9
    3d8c:	8f 90       	pop	r8
    3d8e:	08 95       	ret

00003d90 <__mulsi3>:
    3d90:	62 9f       	mul	r22, r18
    3d92:	d0 01       	movw	r26, r0
    3d94:	73 9f       	mul	r23, r19
    3d96:	f0 01       	movw	r30, r0
    3d98:	82 9f       	mul	r24, r18
    3d9a:	e0 0d       	add	r30, r0
    3d9c:	f1 1d       	adc	r31, r1
    3d9e:	64 9f       	mul	r22, r20
    3da0:	e0 0d       	add	r30, r0
    3da2:	f1 1d       	adc	r31, r1
    3da4:	92 9f       	mul	r25, r18
    3da6:	f0 0d       	add	r31, r0
    3da8:	83 9f       	mul	r24, r19
    3daa:	f0 0d       	add	r31, r0
    3dac:	74 9f       	mul	r23, r20
    3dae:	f0 0d       	add	r31, r0
    3db0:	65 9f       	mul	r22, r21
    3db2:	f0 0d       	add	r31, r0
    3db4:	99 27       	eor	r25, r25
    3db6:	72 9f       	mul	r23, r18
    3db8:	b0 0d       	add	r27, r0
    3dba:	e1 1d       	adc	r30, r1
    3dbc:	f9 1f       	adc	r31, r25
    3dbe:	63 9f       	mul	r22, r19
    3dc0:	b0 0d       	add	r27, r0
    3dc2:	e1 1d       	adc	r30, r1
    3dc4:	f9 1f       	adc	r31, r25
    3dc6:	bd 01       	movw	r22, r26
    3dc8:	cf 01       	movw	r24, r30
    3dca:	11 24       	eor	r1, r1
    3dcc:	08 95       	ret

00003dce <__udivmodqi4>:
    3dce:	99 1b       	sub	r25, r25
    3dd0:	79 e0       	ldi	r23, 0x09	; 9
    3dd2:	04 c0       	rjmp	.+8      	; 0x3ddc <__udivmodqi4_ep>

00003dd4 <__udivmodqi4_loop>:
    3dd4:	99 1f       	adc	r25, r25
    3dd6:	96 17       	cp	r25, r22
    3dd8:	08 f0       	brcs	.+2      	; 0x3ddc <__udivmodqi4_ep>
    3dda:	96 1b       	sub	r25, r22

00003ddc <__udivmodqi4_ep>:
    3ddc:	88 1f       	adc	r24, r24
    3dde:	7a 95       	dec	r23
    3de0:	c9 f7       	brne	.-14     	; 0x3dd4 <__udivmodqi4_loop>
    3de2:	80 95       	com	r24
    3de4:	08 95       	ret

00003de6 <__udivmodhi4>:
    3de6:	aa 1b       	sub	r26, r26
    3de8:	bb 1b       	sub	r27, r27
    3dea:	51 e1       	ldi	r21, 0x11	; 17
    3dec:	07 c0       	rjmp	.+14     	; 0x3dfc <__udivmodhi4_ep>

00003dee <__udivmodhi4_loop>:
    3dee:	aa 1f       	adc	r26, r26
    3df0:	bb 1f       	adc	r27, r27
    3df2:	a6 17       	cp	r26, r22
    3df4:	b7 07       	cpc	r27, r23
    3df6:	10 f0       	brcs	.+4      	; 0x3dfc <__udivmodhi4_ep>
    3df8:	a6 1b       	sub	r26, r22
    3dfa:	b7 0b       	sbc	r27, r23

00003dfc <__udivmodhi4_ep>:
    3dfc:	88 1f       	adc	r24, r24
    3dfe:	99 1f       	adc	r25, r25
    3e00:	5a 95       	dec	r21
    3e02:	a9 f7       	brne	.-22     	; 0x3dee <__udivmodhi4_loop>
    3e04:	80 95       	com	r24
    3e06:	90 95       	com	r25
    3e08:	bc 01       	movw	r22, r24
    3e0a:	cd 01       	movw	r24, r26
    3e0c:	08 95       	ret

00003e0e <__udivmodsi4>:
    3e0e:	a1 e2       	ldi	r26, 0x21	; 33
    3e10:	1a 2e       	mov	r1, r26
    3e12:	aa 1b       	sub	r26, r26
    3e14:	bb 1b       	sub	r27, r27
    3e16:	fd 01       	movw	r30, r26
    3e18:	0d c0       	rjmp	.+26     	; 0x3e34 <__udivmodsi4_ep>

00003e1a <__udivmodsi4_loop>:
    3e1a:	aa 1f       	adc	r26, r26
    3e1c:	bb 1f       	adc	r27, r27
    3e1e:	ee 1f       	adc	r30, r30
    3e20:	ff 1f       	adc	r31, r31
    3e22:	a2 17       	cp	r26, r18
    3e24:	b3 07       	cpc	r27, r19
    3e26:	e4 07       	cpc	r30, r20
    3e28:	f5 07       	cpc	r31, r21
    3e2a:	20 f0       	brcs	.+8      	; 0x3e34 <__udivmodsi4_ep>
    3e2c:	a2 1b       	sub	r26, r18
    3e2e:	b3 0b       	sbc	r27, r19
    3e30:	e4 0b       	sbc	r30, r20
    3e32:	f5 0b       	sbc	r31, r21

00003e34 <__udivmodsi4_ep>:
    3e34:	66 1f       	adc	r22, r22
    3e36:	77 1f       	adc	r23, r23
    3e38:	88 1f       	adc	r24, r24
    3e3a:	99 1f       	adc	r25, r25
    3e3c:	1a 94       	dec	r1
    3e3e:	69 f7       	brne	.-38     	; 0x3e1a <__udivmodsi4_loop>
    3e40:	60 95       	com	r22
    3e42:	70 95       	com	r23
    3e44:	80 95       	com	r24
    3e46:	90 95       	com	r25
    3e48:	9b 01       	movw	r18, r22
    3e4a:	ac 01       	movw	r20, r24
    3e4c:	bd 01       	movw	r22, r26
    3e4e:	cf 01       	movw	r24, r30
    3e50:	08 95       	ret

00003e52 <__divmodsi4>:
    3e52:	97 fb       	bst	r25, 7
    3e54:	09 2e       	mov	r0, r25
    3e56:	05 26       	eor	r0, r21
    3e58:	0e d0       	rcall	.+28     	; 0x3e76 <__divmodsi4_neg1>
    3e5a:	57 fd       	sbrc	r21, 7
    3e5c:	04 d0       	rcall	.+8      	; 0x3e66 <__divmodsi4_neg2>
    3e5e:	d7 df       	rcall	.-82     	; 0x3e0e <__udivmodsi4>
    3e60:	0a d0       	rcall	.+20     	; 0x3e76 <__divmodsi4_neg1>
    3e62:	00 1c       	adc	r0, r0
    3e64:	38 f4       	brcc	.+14     	; 0x3e74 <__divmodsi4_exit>

00003e66 <__divmodsi4_neg2>:
    3e66:	50 95       	com	r21
    3e68:	40 95       	com	r20
    3e6a:	30 95       	com	r19
    3e6c:	21 95       	neg	r18
    3e6e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e70:	4f 4f       	sbci	r20, 0xFF	; 255
    3e72:	5f 4f       	sbci	r21, 0xFF	; 255

00003e74 <__divmodsi4_exit>:
    3e74:	08 95       	ret

00003e76 <__divmodsi4_neg1>:
    3e76:	f6 f7       	brtc	.-4      	; 0x3e74 <__divmodsi4_exit>
    3e78:	90 95       	com	r25
    3e7a:	80 95       	com	r24
    3e7c:	70 95       	com	r23
    3e7e:	61 95       	neg	r22
    3e80:	7f 4f       	sbci	r23, 0xFF	; 255
    3e82:	8f 4f       	sbci	r24, 0xFF	; 255
    3e84:	9f 4f       	sbci	r25, 0xFF	; 255
    3e86:	08 95       	ret

00003e88 <itoa>:
    3e88:	fb 01       	movw	r30, r22
    3e8a:	9f 01       	movw	r18, r30
    3e8c:	e8 94       	clt
    3e8e:	42 30       	cpi	r20, 0x02	; 2
    3e90:	c4 f0       	brlt	.+48     	; 0x3ec2 <itoa+0x3a>
    3e92:	45 32       	cpi	r20, 0x25	; 37
    3e94:	b4 f4       	brge	.+44     	; 0x3ec2 <itoa+0x3a>
    3e96:	4a 30       	cpi	r20, 0x0A	; 10
    3e98:	29 f4       	brne	.+10     	; 0x3ea4 <itoa+0x1c>
    3e9a:	97 fb       	bst	r25, 7
    3e9c:	1e f4       	brtc	.+6      	; 0x3ea4 <itoa+0x1c>
    3e9e:	90 95       	com	r25
    3ea0:	81 95       	neg	r24
    3ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ea4:	64 2f       	mov	r22, r20
    3ea6:	77 27       	eor	r23, r23
    3ea8:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <__udivmodhi4>
    3eac:	80 5d       	subi	r24, 0xD0	; 208
    3eae:	8a 33       	cpi	r24, 0x3A	; 58
    3eb0:	0c f0       	brlt	.+2      	; 0x3eb4 <itoa+0x2c>
    3eb2:	89 5d       	subi	r24, 0xD9	; 217
    3eb4:	81 93       	st	Z+, r24
    3eb6:	cb 01       	movw	r24, r22
    3eb8:	00 97       	sbiw	r24, 0x00	; 0
    3eba:	a1 f7       	brne	.-24     	; 0x3ea4 <itoa+0x1c>
    3ebc:	16 f4       	brtc	.+4      	; 0x3ec2 <itoa+0x3a>
    3ebe:	5d e2       	ldi	r21, 0x2D	; 45
    3ec0:	51 93       	st	Z+, r21
    3ec2:	10 82       	st	Z, r1
    3ec4:	c9 01       	movw	r24, r18
    3ec6:	0c 94 a2 1f 	jmp	0x3f44	; 0x3f44 <strrev>

00003eca <utoa>:
    3eca:	fb 01       	movw	r30, r22
    3ecc:	9f 01       	movw	r18, r30
    3ece:	42 30       	cpi	r20, 0x02	; 2
    3ed0:	74 f0       	brlt	.+28     	; 0x3eee <utoa+0x24>
    3ed2:	45 32       	cpi	r20, 0x25	; 37
    3ed4:	64 f4       	brge	.+24     	; 0x3eee <utoa+0x24>
    3ed6:	64 2f       	mov	r22, r20
    3ed8:	77 27       	eor	r23, r23
    3eda:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <__udivmodhi4>
    3ede:	80 5d       	subi	r24, 0xD0	; 208
    3ee0:	8a 33       	cpi	r24, 0x3A	; 58
    3ee2:	0c f0       	brlt	.+2      	; 0x3ee6 <utoa+0x1c>
    3ee4:	89 5d       	subi	r24, 0xD9	; 217
    3ee6:	81 93       	st	Z+, r24
    3ee8:	cb 01       	movw	r24, r22
    3eea:	00 97       	sbiw	r24, 0x00	; 0
    3eec:	a1 f7       	brne	.-24     	; 0x3ed6 <utoa+0xc>
    3eee:	10 82       	st	Z, r1
    3ef0:	c9 01       	movw	r24, r18
    3ef2:	0c 94 a2 1f 	jmp	0x3f44	; 0x3f44 <strrev>

00003ef6 <__eerd_byte_m168>:
    3ef6:	f9 99       	sbic	0x1f, 1	; 31
    3ef8:	fe cf       	rjmp	.-4      	; 0x3ef6 <__eerd_byte_m168>
    3efa:	92 bd       	out	0x22, r25	; 34
    3efc:	81 bd       	out	0x21, r24	; 33
    3efe:	f8 9a       	sbi	0x1f, 0	; 31
    3f00:	99 27       	eor	r25, r25
    3f02:	80 b5       	in	r24, 0x20	; 32
    3f04:	08 95       	ret

00003f06 <__eerd_word_m168>:
    3f06:	a8 e1       	ldi	r26, 0x18	; 24
    3f08:	b0 e0       	ldi	r27, 0x00	; 0
    3f0a:	42 e0       	ldi	r20, 0x02	; 2
    3f0c:	50 e0       	ldi	r21, 0x00	; 0
    3f0e:	0c 94 b4 1f 	jmp	0x3f68	; 0x3f68 <__eerd_blraw_m168>

00003f12 <__eewr_byte_m168>:
    3f12:	26 2f       	mov	r18, r22

00003f14 <__eewr_r18_m168>:
    3f14:	f9 99       	sbic	0x1f, 1	; 31
    3f16:	fe cf       	rjmp	.-4      	; 0x3f14 <__eewr_r18_m168>
    3f18:	1f ba       	out	0x1f, r1	; 31
    3f1a:	92 bd       	out	0x22, r25	; 34
    3f1c:	81 bd       	out	0x21, r24	; 33
    3f1e:	20 bd       	out	0x20, r18	; 32
    3f20:	0f b6       	in	r0, 0x3f	; 63
    3f22:	f8 94       	cli
    3f24:	fa 9a       	sbi	0x1f, 2	; 31
    3f26:	f9 9a       	sbi	0x1f, 1	; 31
    3f28:	0f be       	out	0x3f, r0	; 63
    3f2a:	01 96       	adiw	r24, 0x01	; 1
    3f2c:	08 95       	ret

00003f2e <__eewr_word_m168>:
    3f2e:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__eewr_byte_m168>
    3f32:	27 2f       	mov	r18, r23
    3f34:	0c 94 8a 1f 	jmp	0x3f14	; 0x3f14 <__eewr_r18_m168>

00003f38 <__eerd_word_m328p>:
    3f38:	a8 e1       	ldi	r26, 0x18	; 24
    3f3a:	b0 e0       	ldi	r27, 0x00	; 0
    3f3c:	42 e0       	ldi	r20, 0x02	; 2
    3f3e:	50 e0       	ldi	r21, 0x00	; 0
    3f40:	0c 94 c4 1f 	jmp	0x3f88	; 0x3f88 <__eerd_blraw_m328p>

00003f44 <strrev>:
    3f44:	dc 01       	movw	r26, r24
    3f46:	fc 01       	movw	r30, r24
    3f48:	67 2f       	mov	r22, r23
    3f4a:	71 91       	ld	r23, Z+
    3f4c:	77 23       	and	r23, r23
    3f4e:	e1 f7       	brne	.-8      	; 0x3f48 <strrev+0x4>
    3f50:	32 97       	sbiw	r30, 0x02	; 2
    3f52:	04 c0       	rjmp	.+8      	; 0x3f5c <strrev+0x18>
    3f54:	7c 91       	ld	r23, X
    3f56:	6d 93       	st	X+, r22
    3f58:	70 83       	st	Z, r23
    3f5a:	62 91       	ld	r22, -Z
    3f5c:	ae 17       	cp	r26, r30
    3f5e:	bf 07       	cpc	r27, r31
    3f60:	c8 f3       	brcs	.-14     	; 0x3f54 <strrev+0x10>
    3f62:	08 95       	ret

00003f64 <__eerd_block_m168>:
    3f64:	dc 01       	movw	r26, r24
    3f66:	cb 01       	movw	r24, r22

00003f68 <__eerd_blraw_m168>:
    3f68:	fc 01       	movw	r30, r24
    3f6a:	f9 99       	sbic	0x1f, 1	; 31
    3f6c:	fe cf       	rjmp	.-4      	; 0x3f6a <__eerd_blraw_m168+0x2>
    3f6e:	06 c0       	rjmp	.+12     	; 0x3f7c <__eerd_blraw_m168+0x14>
    3f70:	f2 bd       	out	0x22, r31	; 34
    3f72:	e1 bd       	out	0x21, r30	; 33
    3f74:	f8 9a       	sbi	0x1f, 0	; 31
    3f76:	31 96       	adiw	r30, 0x01	; 1
    3f78:	00 b4       	in	r0, 0x20	; 32
    3f7a:	0d 92       	st	X+, r0
    3f7c:	41 50       	subi	r20, 0x01	; 1
    3f7e:	50 40       	sbci	r21, 0x00	; 0
    3f80:	b8 f7       	brcc	.-18     	; 0x3f70 <__eerd_blraw_m168+0x8>
    3f82:	08 95       	ret

00003f84 <__eerd_block_m328p>:
    3f84:	dc 01       	movw	r26, r24
    3f86:	cb 01       	movw	r24, r22

00003f88 <__eerd_blraw_m328p>:
    3f88:	fc 01       	movw	r30, r24
    3f8a:	f9 99       	sbic	0x1f, 1	; 31
    3f8c:	fe cf       	rjmp	.-4      	; 0x3f8a <__eerd_blraw_m328p+0x2>
    3f8e:	06 c0       	rjmp	.+12     	; 0x3f9c <__eerd_blraw_m328p+0x14>
    3f90:	f2 bd       	out	0x22, r31	; 34
    3f92:	e1 bd       	out	0x21, r30	; 33
    3f94:	f8 9a       	sbi	0x1f, 0	; 31
    3f96:	31 96       	adiw	r30, 0x01	; 1
    3f98:	00 b4       	in	r0, 0x20	; 32
    3f9a:	0d 92       	st	X+, r0
    3f9c:	41 50       	subi	r20, 0x01	; 1
    3f9e:	50 40       	sbci	r21, 0x00	; 0
    3fa0:	b8 f7       	brcc	.-18     	; 0x3f90 <__eerd_blraw_m328p+0x8>
    3fa2:	08 95       	ret

00003fa4 <_exit>:
    3fa4:	f8 94       	cli

00003fa6 <__stop_program>:
    3fa6:	ff cf       	rjmp	.-2      	; 0x3fa6 <__stop_program>
