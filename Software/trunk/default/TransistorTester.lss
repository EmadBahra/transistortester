
TransistorTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00003d8c  00003e40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003d8c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000082  00800102  00800102  00003e42  2**0
                  ALLOC
  3 .eeprom       000001c1  00810000  00810000  00003e42  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         00000dbc  00000000  00000000  00004004  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001d2  00000000  00000000  00004dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000000c0  00000000  00000000  00004f92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000711  00000000  00000000  00005052  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000027e6  00000000  00000000  00005763  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000007c7  00000000  00000000  00007f49  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000035c1  00000000  00000000  00008710  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000280  00000000  00000000  0000bcd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000894  00000000  00000000  0000bf54  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000133b  00000000  00000000  0000c7e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 0000021a  00000000  00000000  0000db23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__ctors_end>
       4:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
       8:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
       c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      10:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      14:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      18:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      1c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__vector_7>
      20:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      24:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      28:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      2c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      30:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      34:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      38:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      3c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      40:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      44:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      48:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      4c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      50:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      54:	0c 94 aa 01 	jmp	0x354	; 0x354 <__vector_21>
      58:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      5c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      60:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>
      64:	0c 94 ac 00 	jmp	0x158	; 0x158 <__bad_interrupt>

00000068 <LogTab>:
      68:	00 01 02 03 04 05 06 07 08 09 0b 0c 0d 0e 0f 10     ................
      78:	11 13 14 15 16 18 19 1a 1b 1d 1e 1f 21 22 24 25     ............!"$%
      88:	27 28 2a 2b 2d 2e 30 31 33 35 36 38 3a 3c 3e 3f     '(*+-.013568:<>?
      98:	41 43 45 47 49 4c 4e 50 52 54 57 59 5c 5e 61 63     ACEGILNPRTWY\^ac
      a8:	66 69 6c 6f 72 75 78 7c 7f 83 87 8b 8f 93 97 9c     filorux|........
      b8:	a1 a6 ab b1 b7 be c5 cc d4 dd e6 f1                 ............

000000c4 <SELFTEST>:
      c4:	53 65 6c 66 74 65 73 74 20 6d 6f 64 65 2e 2e 00     Selftest mode...

000000d4 <RELPROBE>:
      d4:	69 73 6f 6c 61 74 65 20 50 72 6f 62 65 21 00        isolate Probe!.

000000e3 <URefT>:
      e3:	52 65 66 3d 00                                      Ref=.

000000e8 <RHfakt>:
      e8:	52 48 66 3d 00                                      RHf=.

000000ed <RH1L>:
      ed:	52 48 2d 00                                         RH-.

000000f1 <RH1H>:
      f1:	52 48 2b 00                                         RH+.

000000f5 <RLRL>:
      f5:	2b 52 4c 2d 20 31 32 20 31 33 20 32 33 00           +RL- 12 13 23.

00000103 <RHRH>:
     103:	2b 52 48 2d 20 31 32 20 31 33 20 32 33 00           +RH- 12 13 23.

00000111 <RHRL>:
     111:	52 48 2f 52 4c 00                                   RH/RL.

00000117 <T50HZ>:
     117:	20 35 30 48 7a 00 00                                 50Hz..

0000011e <__ctors_end>:
     11e:	11 24       	eor	r1, r1
     120:	1f be       	out	0x3f, r1	; 63
     122:	cf ef       	ldi	r28, 0xFF	; 255
     124:	d4 e0       	ldi	r29, 0x04	; 4
     126:	de bf       	out	0x3e, r29	; 62
     128:	cd bf       	out	0x3d, r28	; 61

0000012a <__do_copy_data>:
     12a:	11 e0       	ldi	r17, 0x01	; 1
     12c:	a0 e0       	ldi	r26, 0x00	; 0
     12e:	b1 e0       	ldi	r27, 0x01	; 1
     130:	ec e8       	ldi	r30, 0x8C	; 140
     132:	fd e3       	ldi	r31, 0x3D	; 61
     134:	02 c0       	rjmp	.+4      	; 0x13a <__do_copy_data+0x10>
     136:	05 90       	lpm	r0, Z+
     138:	0d 92       	st	X+, r0
     13a:	a2 30       	cpi	r26, 0x02	; 2
     13c:	b1 07       	cpc	r27, r17
     13e:	d9 f7       	brne	.-10     	; 0x136 <__do_copy_data+0xc>

00000140 <__do_clear_bss>:
     140:	11 e0       	ldi	r17, 0x01	; 1
     142:	a2 e0       	ldi	r26, 0x02	; 2
     144:	b1 e0       	ldi	r27, 0x01	; 1
     146:	01 c0       	rjmp	.+2      	; 0x14a <.do_clear_bss_start>

00000148 <.do_clear_bss_loop>:
     148:	1d 92       	st	X+, r1

0000014a <.do_clear_bss_start>:
     14a:	a4 38       	cpi	r26, 0x84	; 132
     14c:	b1 07       	cpc	r27, r17
     14e:	e1 f7       	brne	.-8      	; 0x148 <.do_clear_bss_loop>
     150:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <main>
     154:	0c 94 c4 1e 	jmp	0x3d88	; 0x3d88 <_exit>

00000158 <__bad_interrupt>:
     158:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000015c <lcd_data>:
void lcd_space(void) {
   lcd_data(' ');
}

// sends data byte to the LCD 
void lcd_data(unsigned char temp1) {
     15c:	1f 93       	push	r17
     15e:	18 2f       	mov	r17, r24
 lcd_write_data(temp1);		// set RS to 1
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	61 2f       	mov	r22, r17
     164:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
     168:	0e 94 19 15 	call	0x2a32	; 0x2a32 <wait50us>
#ifdef WITH_UART
 switch(temp1) {
     16c:	18 30       	cpi	r17, 0x08	; 8
     16e:	48 f4       	brcc	.+18     	; 0x182 <lcd_data+0x26>
     170:	16 30       	cpi	r17, 0x06	; 6
     172:	d0 f4       	brcc	.+52     	; 0x1a8 <lcd_data+0x4c>
     174:	12 30       	cpi	r17, 0x02	; 2
     176:	71 f0       	breq	.+28     	; 0x194 <lcd_data+0x38>
     178:	13 30       	cpi	r17, 0x03	; 3
     17a:	89 f0       	breq	.+34     	; 0x19e <lcd_data+0x42>
     17c:	11 30       	cpi	r17, 0x01	; 1
     17e:	d1 f4       	brne	.+52     	; 0x1b4 <lcd_data+0x58>
     180:	07 c0       	rjmp	.+14     	; 0x190 <lcd_data+0x34>
     182:	14 3e       	cpi	r17, 0xE4	; 228
     184:	a9 f0       	breq	.+42     	; 0x1b0 <lcd_data+0x54>
     186:	14 3f       	cpi	r17, 0xF4	; 244
     188:	c1 f0       	breq	.+48     	; 0x1ba <lcd_data+0x5e>
     18a:	11 3e       	cpi	r17, 0xE1	; 225
     18c:	99 f4       	brne	.+38     	; 0x1b4 <lcd_data+0x58>
     18e:	0e c0       	rjmp	.+28     	; 0x1ac <lcd_data+0x50>
    case LCD_CHAR_DIODE1:
    	uart_putc('>');
     190:	8e e3       	ldi	r24, 0x3E	; 62
     192:	06 c0       	rjmp	.+12     	; 0x1a0 <lcd_data+0x44>
    	uart_putc('|');
    	break;
    case LCD_CHAR_DIODE2:
    	uart_putc('|');
     194:	8c e7       	ldi	r24, 0x7C	; 124
     196:	0e 94 df 14 	call	0x29be	; 0x29be <uart_putc>
    	uart_putc('<');
     19a:	8c e3       	ldi	r24, 0x3C	; 60
     19c:	0c c0       	rjmp	.+24     	; 0x1b6 <lcd_data+0x5a>
    	break;
    case LCD_CHAR_CAP:
    	uart_putc('|');
     19e:	8c e7       	ldi	r24, 0x7C	; 124
     1a0:	0e 94 df 14 	call	0x29be	; 0x29be <uart_putc>
    	uart_putc('|');
     1a4:	8c e7       	ldi	r24, 0x7C	; 124
     1a6:	07 c0       	rjmp	.+14     	; 0x1b6 <lcd_data+0x5a>
    	break;
    case LCD_CHAR_RESIS1:
    case LCD_CHAR_RESIS2:
    	uart_putc('R');
     1a8:	82 e5       	ldi	r24, 0x52	; 82
     1aa:	05 c0       	rjmp	.+10     	; 0x1b6 <lcd_data+0x5a>
    	break;
    case 225:	//ä
    	uart_putc('ä');
     1ac:	84 ee       	ldi	r24, 0xE4	; 228
     1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <lcd_data+0x5a>
    	break;
    case 228:	//µ
    	uart_putc('µ');
     1b0:	85 eb       	ldi	r24, 0xB5	; 181
     1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <lcd_data+0x5a>
    	break;
    case 244:	//Omega
    	break;
    default:
    	uart_putc(temp1);
     1b4:	81 2f       	mov	r24, r17
     1b6:	0e 94 df 14 	call	0x29be	; 0x29be <uart_putc>
 }
#endif
}
     1ba:	1f 91       	pop	r17
     1bc:	08 95       	ret

000001be <lcd_space>:
   lcd_data(temp + '1');
}

// send space character to LCD
void lcd_space(void) {
   lcd_data(' ');
     1be:	80 e2       	ldi	r24, 0x20	; 32
     1c0:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
}
     1c4:	08 95       	ret

000001c6 <lcd_testpin>:
 

// sends numeric character (Pin Number) to the LCD 
// from binary 0 we send ASCII 1 ....
void lcd_testpin(unsigned char temp) {
   lcd_data(temp + '1');
     1c6:	8f 5c       	subi	r24, 0xCF	; 207
     1c8:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
}
     1cc:	08 95       	ret

000001ce <uart_newline>:
}


#ifdef WITH_UART
void uart_newline(void) {
   uart_putc('\r');
     1ce:	8d e0       	ldi	r24, 0x0D	; 13
     1d0:	0e 94 df 14 	call	0x29be	; 0x29be <uart_putc>
   uart_putc('\n');
     1d4:	8a e0       	ldi	r24, 0x0A	; 10
     1d6:	0e 94 df 14 	call	0x29be	; 0x29be <uart_putc>
}
     1da:	08 95       	ret

000001dc <lcd_command>:
#endif
}
 
// sends a command to the LCD
 
void lcd_command(unsigned char temp1) {
     1dc:	1f 93       	push	r17
     1de:	18 2f       	mov	r17, r24
        lcd_write_cmd(temp1);		// set RS to 0
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	61 2f       	mov	r22, r17
     1e4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
     1e8:	0e 94 19 15 	call	0x2a32	; 0x2a32 <wait50us>
#ifdef WITH_UART
	if((temp1 == 0x80) || (temp1 == 0xC0)) {
     1ec:	10 38       	cpi	r17, 0x80	; 128
     1ee:	11 f0       	breq	.+4      	; 0x1f4 <lcd_command+0x18>
     1f0:	10 3c       	cpi	r17, 0xC0	; 192
     1f2:	11 f4       	brne	.+4      	; 0x1f8 <lcd_command+0x1c>
		uart_newline();
     1f4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <uart_newline>
	}
#endif
}
     1f8:	1f 91       	pop	r17
     1fa:	08 95       	ret

000001fc <lcd_clear>:
}
 
// send the command to clear the display 
 
void lcd_clear(void) {
   lcd_command(CLEAR_DISPLAY);
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
   wait10ms();
     202:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <wait10ms>
#ifdef WITH_UART
   uart_newline();
     206:	0e 94 e7 00 	call	0x1ce	; 0x1ce <uart_newline>
#endif
   lcd_line1();			// set cursor to Line1 Column 1, (only for OLED-Display)
     20a:	80 e8       	ldi	r24, 0x80	; 128
     20c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
}
     210:	08 95       	ret

00000212 <lcd_init>:
 
// Initialise: 
// Must be called first .
 
void lcd_init(void) {
   wait30ms();
     212:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <wait30ms>
   // to initialise, send 3 times to be shure to be in 8 Bit mode
   lcd_write_init(1);
     216:	80 e8       	ldi	r24, 0x80	; 128
     218:	60 e3       	ldi	r22, 0x30	; 48
     21a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait5ms();
     21e:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <wait5ms>
   
   lcd_write_init(1);
     222:	80 e8       	ldi	r24, 0x80	; 128
     224:	60 e3       	ldi	r22, 0x30	; 48
     226:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait1ms();
     22a:	0e 94 13 15 	call	0x2a26	; 0x2a26 <wait1ms>

   lcd_write_init(1);
     22e:	80 e8       	ldi	r24, 0x80	; 128
     230:	60 e3       	ldi	r22, 0x30	; 48
     232:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait1ms();
     236:	0e 94 13 15 	call	0x2a26	; 0x2a26 <wait1ms>

   lcd_write_init(0);		// switch to 4 Bit mode
     23a:	80 e8       	ldi	r24, 0x80	; 128
     23c:	60 e2       	ldi	r22, 0x20	; 32
     23e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait10ms();
     242:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <wait10ms>

   // 4Bit / 2 rows / 5x7
   lcd_command(CMD_SetIFOptions | 0x08);
     246:	88 e2       	ldi	r24, 0x28	; 40
     248:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>

   // Display on / Cursor off / no Blinking
   lcd_command(CMD_SetDisplayAndCursor | 0x04);
     24c:	8c e0       	ldi	r24, 0x0C	; 12
     24e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>

   // increment / no Scroll    
   lcd_command(CMD_SetEntryMode | 0x02);	
     252:	86 e0       	ldi	r24, 0x06	; 6
     254:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
   lcd_clear();
     258:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_clear>
}
     25c:	08 95       	ret

0000025e <lcd_string>:
#endif
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
     25e:	ef 92       	push	r14
     260:	ff 92       	push	r15
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	e8 2e       	mov	r14, r24
     268:	e7 01       	movw	r28, r14
     26a:	7e 01       	movw	r14, r28
     26c:	f9 2e       	mov	r15, r25
     26e:	e7 01       	movw	r28, r14
    while(*data) {
     270:	02 c0       	rjmp	.+4      	; 0x276 <lcd_string+0x18>
        lcd_data(*data);
     272:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
    while(*data) {
     276:	89 91       	ld	r24, Y+
     278:	88 23       	and	r24, r24
     27a:	d9 f7       	brne	.-10     	; 0x272 <lcd_string+0x14>
        lcd_data(*data);
        data++;
    }
}
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	ff 90       	pop	r15
     282:	ef 90       	pop	r14
     284:	08 95       	ret

00000286 <lcd_pgm_string>:

#ifdef use_lcd_pgm
//Load string from PGM  and send to LCD 
void lcd_pgm_string(const unsigned char *data) {
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = pgm_read_byte(data);
     28c:	fe 01       	movw	r30, r28
     28e:	84 91       	lpm	r24, Z+
      if((cc==0) || (cc==128)) {
     290:	88 23       	and	r24, r24
     292:	31 f0       	breq	.+12     	; 0x2a0 <lcd_pgm_string+0x1a>
     294:	80 38       	cpi	r24, 0x80	; 128
     296:	21 f0       	breq	.+8      	; 0x2a0 <lcd_pgm_string+0x1a>
         return;
      }
      lcd_data(cc);
     298:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
      data++;
     29c:	21 96       	adiw	r28, 0x01	; 1
   }
     29e:	f6 cf       	rjmp	.-20     	; 0x28c <lcd_pgm_string+0x6>
}
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <lcd_fix_string>:
#endif

//Load string from PGM or EEprom and send to LCD 
void lcd_fix_string(const unsigned char *data) {
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = MEM_read_byte(data);
     2ac:	ce 01       	movw	r24, r28
     2ae:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__eerd_byte_m168>
      if((cc==0) || (cc==128)) {
     2b2:	88 23       	and	r24, r24
     2b4:	31 f0       	breq	.+12     	; 0x2c2 <lcd_fix_string+0x1c>
     2b6:	80 38       	cpi	r24, 0x80	; 128
     2b8:	21 f0       	breq	.+8      	; 0x2c2 <lcd_fix_string+0x1c>
         return;
      }
      lcd_data(cc);
     2ba:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
      data++;
     2be:	21 96       	adiw	r28, 0x01	; 1
   }
     2c0:	f5 cf       	rjmp	.-22     	; 0x2ac <lcd_fix_string+0x6>
}
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	08 95       	ret

000002c8 <lcd_fix_customchar>:

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	8c 01       	movw	r16, r24
     2d2:	c0 e0       	ldi	r28, 0x00	; 0
     2d4:	d0 e0       	ldi	r29, 0x00	; 0
    for(uint8_t i=0;i<8;i++) {
        lcd_data(MEM_read_byte(chardata));
     2d6:	c8 01       	movw	r24, r16
     2d8:	8c 0f       	add	r24, r28
     2da:	9d 1f       	adc	r25, r29
     2dc:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__eerd_byte_m168>
     2e0:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
     2e4:	21 96       	adiw	r28, 0x01	; 1
   }
}

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
    for(uint8_t i=0;i<8;i++) {
     2e6:	c8 30       	cpi	r28, 0x08	; 8
     2e8:	d1 05       	cpc	r29, r1
     2ea:	a9 f7       	brne	.-22     	; 0x2d6 <lcd_fix_customchar+0xe>
        lcd_data(MEM_read_byte(chardata));
        chardata++;
    }
}
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	0f 91       	pop	r16
     2f4:	08 95       	ret

000002f6 <_lcd_hw_write>:
     2f6:	5d 9a       	sbi	0x0b, 5	; 11
     2f8:	55 9a       	sbi	0x0a, 5	; 10
     2fa:	5c 98       	cbi	0x0b, 4	; 11
     2fc:	54 9a       	sbi	0x0a, 4	; 10
     2fe:	80 fd       	sbrc	r24, 0
     300:	5c 9a       	sbi	0x0b, 4	; 11
     302:	58 98       	cbi	0x0b, 0	; 11
     304:	59 98       	cbi	0x0b, 1	; 11
     306:	5a 98       	cbi	0x0b, 2	; 11
     308:	5b 98       	cbi	0x0b, 3	; 11
     30a:	64 fd       	sbrc	r22, 4
     30c:	58 9a       	sbi	0x0b, 0	; 11
     30e:	50 9a       	sbi	0x0a, 0	; 10
     310:	65 fd       	sbrc	r22, 5
     312:	59 9a       	sbi	0x0b, 1	; 11
     314:	51 9a       	sbi	0x0a, 1	; 10
     316:	66 fd       	sbrc	r22, 6
     318:	5a 9a       	sbi	0x0b, 2	; 11
     31a:	52 9a       	sbi	0x0a, 2	; 10
     31c:	67 fd       	sbrc	r22, 7
     31e:	5b 9a       	sbi	0x0b, 3	; 11
     320:	53 9a       	sbi	0x0a, 3	; 10
     322:	00 00       	nop
     324:	5d 98       	cbi	0x0b, 5	; 11
     326:	0e 94 22 15 	call	0x2a44	; 0x2a44 <wait1us>
     32a:	87 fd       	sbrc	r24, 7
     32c:	11 c0       	rjmp	.+34     	; 0x350 <_lcd_hw_write_exit>
     32e:	5d 9a       	sbi	0x0b, 5	; 11
     330:	58 98       	cbi	0x0b, 0	; 11
     332:	59 98       	cbi	0x0b, 1	; 11
     334:	5a 98       	cbi	0x0b, 2	; 11
     336:	5b 98       	cbi	0x0b, 3	; 11
     338:	60 fd       	sbrc	r22, 0
     33a:	58 9a       	sbi	0x0b, 0	; 11
     33c:	61 fd       	sbrc	r22, 1
     33e:	59 9a       	sbi	0x0b, 1	; 11
     340:	62 fd       	sbrc	r22, 2
     342:	5a 9a       	sbi	0x0b, 2	; 11
     344:	63 fd       	sbrc	r22, 3
     346:	5b 9a       	sbi	0x0b, 3	; 11
     348:	00 00       	nop
     34a:	5d 98       	cbi	0x0b, 5	; 11
     34c:	0e 94 22 15 	call	0x2a44	; 0x2a44 <wait1us>

00000350 <_lcd_hw_write_exit>:
     350:	08 95       	ret

00000352 <__vector_7>:
#define MAIN_C
#include "Transistortester.h"

#ifndef __AVR_ATmega8__
  // prepare sleep mode
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
     352:	18 95       	reti

00000354 <__vector_21>:
  EMPTY_INTERRUPT(ADC_vect);
     354:	18 95       	reti

00000356 <ChargePin10ms>:
 }

//******************************************************************
#include "CheckPins.c"

void ChargePin10ms(uint8_t PinToCharge, uint8_t ChargeDirection) {
     356:	df 93       	push	r29
     358:	cf 93       	push	r28
     35a:	0f 92       	push	r0
     35c:	cd b7       	in	r28, 0x3d	; 61
     35e:	de b7       	in	r29, 0x3e	; 62
   //Will be used by discharge of MOSFET Gates or to load big capacities.
   //Parameters:
   //PinToCharge: specifies the pin as mask for R-Port
   //ChargeDirection: 0 = switch to GND (N-Kanal-FET), 1= switch to VCC(P-Kanal-FET)

   if(ChargeDirection&1) {
     360:	60 ff       	sbrs	r22, 0
     362:	03 c0       	rjmp	.+6      	; 0x36a <ChargePin10ms+0x14>
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
     364:	95 b1       	in	r25, 0x05	; 5
     366:	98 2b       	or	r25, r24
     368:	04 c0       	rjmp	.+8      	; 0x372 <ChargePin10ms+0x1c>
   } else {
      R_PORT &= ~PinToCharge; // or 0 (GND)
     36a:	25 b1       	in	r18, 0x05	; 5
     36c:	98 2f       	mov	r25, r24
     36e:	90 95       	com	r25
     370:	92 23       	and	r25, r18
     372:	95 b9       	out	0x05, r25	; 5
   }
   R_DDR |= PinToCharge;		//switch Pin to output, across R to GND or VCC
     374:	94 b1       	in	r25, 0x04	; 4
     376:	98 2b       	or	r25, r24
     378:	94 b9       	out	0x04, r25	; 4
   wait10ms();
     37a:	89 83       	std	Y+1, r24	; 0x01
     37c:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <wait10ms>
   // switch back Input, no current
   R_DDR &= ~PinToCharge;	// switch back to input
     380:	94 b1       	in	r25, 0x04	; 4
     382:	89 81       	ldd	r24, Y+1	; 0x01
     384:	80 95       	com	r24
     386:	98 23       	and	r25, r24
     388:	94 b9       	out	0x04, r25	; 4
   R_PORT &= ~PinToCharge;	// no Pull up
     38a:	95 b1       	in	r25, 0x05	; 5
     38c:	98 23       	and	r25, r24
     38e:	95 b9       	out	0x05, r25	; 5
}
     390:	0f 90       	pop	r0
     392:	cf 91       	pop	r28
     394:	df 91       	pop	r29
     396:	08 95       	ret

00000398 <EntladePins>:

// first discharge any charge of capacitors
void EntladePins() {
     398:	af 92       	push	r10
     39a:	bf 92       	push	r11
     39c:	cf 92       	push	r12
     39e:	df 92       	push	r13
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	3a e0       	ldi	r19, 0x0A	; 10
     3ae:	c3 2e       	mov	r12, r19
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     3b0:	28 e0       	ldi	r18, 0x08	; 8
     3b2:	d2 2e       	mov	r13, r18
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     R_PORT = 0;			// R-outputs auf 0
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     3b4:	9a e2       	ldi	r25, 0x2A	; 42
     3b6:	a9 2e       	mov	r10, r25
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     3b8:	85 e1       	ldi	r24, 0x15	; 21
     3ba:	b8 2e       	mov	r11, r24
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     3bc:	d7 b8       	out	0x07, r13	; 7
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     3be:	d8 b8       	out	0x08, r13	; 8
     R_PORT = 0;			// R-outputs auf 0
     3c0:	15 b8       	out	0x05, r1	; 5
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     3c2:	a4 b8       	out	0x04, r10	; 4
     adcmv[0] = W5msReadADC(PC0);	// which voltage has Pin 1?
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
     3ca:	8c 01       	movw	r16, r24
     adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
     3d2:	ec 01       	movw	r28, r24
     adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     3d4:	82 e0       	ldi	r24, 0x02	; 2
     3d6:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
     if ((PartFound == PART_CELL) || (adcmv[0] < CAP_EMPTY_LEVEL) & (adcmv[1] < CAP_EMPTY_LEVEL) & (adcmv[2] < CAP_EMPTY_LEVEL)) {
     3da:	20 91 07 01 	lds	r18, 0x0107
     3de:	28 30       	cpi	r18, 0x08	; 8
     3e0:	c1 f0       	breq	.+48     	; 0x412 <EntladePins+0x7a>
     3e2:	41 e0       	ldi	r20, 0x01	; 1
     3e4:	c4 30       	cpi	r28, 0x04	; 4
     3e6:	d1 05       	cpc	r29, r1
     3e8:	08 f0       	brcs	.+2      	; 0x3ec <EntladePins+0x54>
     3ea:	40 e0       	ldi	r20, 0x00	; 0
     3ec:	21 e0       	ldi	r18, 0x01	; 1
     3ee:	04 30       	cpi	r16, 0x04	; 4
     3f0:	11 05       	cpc	r17, r1
     3f2:	08 f0       	brcs	.+2      	; 0x3f6 <EntladePins+0x5e>
     3f4:	20 e0       	ldi	r18, 0x00	; 0
     3f6:	42 23       	and	r20, r18
     3f8:	50 e0       	ldi	r21, 0x00	; 0
     3fa:	21 e0       	ldi	r18, 0x01	; 1
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	84 30       	cpi	r24, 0x04	; 4
     400:	91 05       	cpc	r25, r1
     402:	10 f0       	brcs	.+4      	; 0x408 <EntladePins+0x70>
     404:	20 e0       	ldi	r18, 0x00	; 0
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	24 23       	and	r18, r20
     40a:	35 23       	and	r19, r21
     40c:	21 15       	cp	r18, r1
     40e:	31 05       	cpc	r19, r1
     410:	21 f0       	breq	.+8      	; 0x41a <EntladePins+0x82>
        ADC_DDR = TXD_MSK;		// switch all ADC-Pins to input
     412:	88 e0       	ldi	r24, 0x08	; 8
     414:	87 b9       	out	0x07, r24	; 7
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
     416:	14 b8       	out	0x04, r1	; 4
        return;
     418:	4f c0       	rjmp	.+158    	; 0x4b8 <EntladePins+0x120>
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
     41a:	23 e0       	ldi	r18, 0x03	; 3
     41c:	08 3e       	cpi	r16, 0xE8	; 232
     41e:	12 07       	cpc	r17, r18
     420:	10 f0       	brcs	.+4      	; 0x426 <EntladePins+0x8e>
  uint8_t lop_cnt;		// loop counter
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     422:	28 e0       	ldi	r18, 0x08	; 8
     424:	01 c0       	rjmp	.+2      	; 0x428 <EntladePins+0x90>
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
        return;
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
        adc_gnd |= (1<<PC0);	//Pin 1 directly to GND
     426:	29 e0       	ldi	r18, 0x09	; 9
     }
     if (adcmv[1] < 1000) {
     428:	33 e0       	ldi	r19, 0x03	; 3
     42a:	c8 3e       	cpi	r28, 0xE8	; 232
     42c:	d3 07       	cpc	r29, r19
     42e:	08 f4       	brcc	.+2      	; 0x432 <EntladePins+0x9a>
        adc_gnd |= (1<<PC1);	//Pin 2 directly to GND
     430:	22 60       	ori	r18, 0x02	; 2
     }
     if (adcmv[2] < 1000) {
     432:	33 e0       	ldi	r19, 0x03	; 3
     434:	88 3e       	cpi	r24, 0xE8	; 232
     436:	93 07       	cpc	r25, r19
     438:	08 f4       	brcc	.+2      	; 0x43c <EntladePins+0xa4>
        adc_gnd |= (1<<PC2);	//Pin 3 directly to  GND
     43a:	24 60       	ori	r18, 0x04	; 4
     }
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time
     43c:	27 b9       	out	0x07, r18	; 7

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     43e:	b4 b8       	out	0x04, r11	; 4
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     440:	c0 e0       	ldi	r28, 0x00	; 0
     442:	d0 e0       	ldi	r29, 0x00	; 0
        wdt_reset();
     444:	a8 95       	wdr
        adcmv[0] = W20msReadADC(PC0);	// which voltage has Pin 1?
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	0e 94 45 1b 	call	0x368a	; 0x368a <W20msReadADC>
     44c:	7c 01       	movw	r14, r24
        adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
     454:	8c 01       	movw	r16, r24
        adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     456:	82 e0       	ldi	r24, 0x02	; 2
     458:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
        if (adcmv[0] < 1300) {
     45c:	24 e1       	ldi	r18, 0x14	; 20
     45e:	e2 16       	cp	r14, r18
     460:	25 e0       	ldi	r18, 0x05	; 5
     462:	f2 06       	cpc	r15, r18
     464:	08 f4       	brcc	.+2      	; 0x468 <EntladePins+0xd0>
           ADC_DDR |= (1<<PC0);	// below 1.3V , switch directly with ADC-Port to GND
     466:	38 9a       	sbi	0x07, 0	; 7
        }
        if (adcmv[1] < 1300) {
     468:	35 e0       	ldi	r19, 0x05	; 5
     46a:	04 31       	cpi	r16, 0x14	; 20
     46c:	13 07       	cpc	r17, r19
     46e:	08 f4       	brcc	.+2      	; 0x472 <EntladePins+0xda>
           ADC_DDR |= (1<<PC1);	// below 1.3V, switch directly with ADC-Port to GND
     470:	39 9a       	sbi	0x07, 1	; 7
        }
        if (adcmv[2] < 1300) {
     472:	25 e0       	ldi	r18, 0x05	; 5
     474:	84 31       	cpi	r24, 0x14	; 20
     476:	92 07       	cpc	r25, r18
     478:	08 f4       	brcc	.+2      	; 0x47c <EntladePins+0xe4>
           ADC_DDR |= (1<<PC2);	// below 1.3V, switch directly with ADC-Port to GND
     47a:	3a 9a       	sbi	0x07, 2	; 7
        }
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
     47c:	36 e0       	ldi	r19, 0x06	; 6
     47e:	e3 16       	cp	r14, r19
     480:	f1 04       	cpc	r15, r1
     482:	30 f4       	brcc	.+12     	; 0x490 <EntladePins+0xf8>
     484:	06 30       	cpi	r16, 0x06	; 6
     486:	11 05       	cpc	r17, r1
     488:	18 f4       	brcc	.+6      	; 0x490 <EntladePins+0xf8>
     48a:	86 30       	cpi	r24, 0x06	; 6
     48c:	91 05       	cpc	r25, r1
     48e:	38 f0       	brcs	.+14     	; 0x49e <EntladePins+0x106>

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     490:	21 96       	adiw	r28, 0x01	; 1
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	c4 3f       	cpi	r28, 0xF4	; 244
     496:	d8 07       	cpc	r29, r24
     498:	a9 f6       	brne	.-86     	; 0x444 <EntladePins+0xac>
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
           break;
        }
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
     49a:	d0 92 07 01 	sts	0x0107, r13

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     49e:	00 e0       	ldi	r16, 0x00	; 0
     4a0:	10 e0       	ldi	r17, 0x00	; 0
     4a2:	04 c0       	rjmp	.+8      	; 0x4ac <EntladePins+0x114>
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     4a4:	0e 94 13 15 	call	0x2a26	; 0x2a26 <wait1ms>
     4a8:	0f 5f       	subi	r16, 0xFF	; 255
     4aa:	1f 4f       	sbci	r17, 0xFF	; 255
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
     4ac:	0c 17       	cp	r16, r28
     4ae:	1d 07       	cpc	r17, r29
     4b0:	c8 f3       	brcs	.-14     	; 0x4a4 <EntladePins+0x10c>
     4b2:	ca 94       	dec	r12
  unsigned int clr_cnt;		// Clear Counter
  uint8_t lop_cnt;		// loop counter
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     4b4:	09 f0       	breq	.+2      	; 0x4b8 <EntladePins+0x120>
     4b6:	82 cf       	rjmp	.-252    	; 0x3bc <EntladePins+0x24>
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     }
  } // end while
 }
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	ff 90       	pop	r15
     4c2:	ef 90       	pop	r14
     4c4:	df 90       	pop	r13
     4c6:	cf 90       	pop	r12
     4c8:	bf 90       	pop	r11
     4ca:	af 90       	pop	r10
     4cc:	08 95       	ret

000004ce <RefVoltage>:



#ifdef AUTO_RH
void RefVoltage(void) {
     4ce:	ff 92       	push	r15
     4d0:	0f 93       	push	r16
     4d2:	1f 93       	push	r17
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;

  #ifdef AUTO_CAL
  referenz = ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset));
     4d8:	87 eb       	ldi	r24, 0xB7	; 183
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__eerd_word_m168>
     4e0:	20 91 3f 01 	lds	r18, 0x013F
     4e4:	30 91 40 01 	lds	r19, 0x0140
     4e8:	28 0f       	add	r18, r24
     4ea:	39 1f       	adc	r19, r25
  #else
  referenz = ref_mv + REF_C_KORR;
  #endif
  if (referenz >= Ref_Tab_Beginn) {
     4ec:	83 e0       	ldi	r24, 0x03	; 3
     4ee:	28 3e       	cpi	r18, 0xE8	; 232
     4f0:	38 07       	cpc	r19, r24
     4f2:	20 f0       	brcs	.+8      	; 0x4fc <RefVoltage+0x2e>
     referenz -= Ref_Tab_Beginn;
     4f4:	c9 01       	movw	r24, r18
     4f6:	88 5e       	subi	r24, 0xE8	; 232
     4f8:	93 40       	sbci	r25, 0x03	; 3
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <__stack+0x1>
  } else  {
     referenz = 0;		// limit to begin of table
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = referenz / Ref_Tab_Abstand;
     500:	62 e3       	ldi	r22, 0x32	; 50
     502:	70 e0       	ldi	r23, 0x00	; 0
     504:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <__udivmodhi4>
  tabres = referenz % Ref_Tab_Abstand;
     508:	f8 2e       	mov	r15, r24
  tabres = Ref_Tab_Abstand-tabres;
  if (tabind > 7) {
     tabind = 7;		// limit to end of table
  }
  // interpolate the table of factors
  y1 = MEM_read_word(&RHtab[tabind]);
     50a:	68 30       	cpi	r22, 0x08	; 8
     50c:	08 f0       	brcs	.+2      	; 0x510 <__stack+0x11>
     50e:	67 e0       	ldi	r22, 0x07	; 7
     510:	c6 2f       	mov	r28, r22
     512:	d0 e0       	ldi	r29, 0x00	; 0
     514:	ce 01       	movw	r24, r28
     516:	88 0f       	add	r24, r24
     518:	99 1f       	adc	r25, r25
     51a:	86 5a       	subi	r24, 0xA6	; 166
     51c:	9f 4f       	sbci	r25, 0xFF	; 255
     51e:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__eerd_word_m168>
     522:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RHtab[tabind+1]);
     524:	ce 01       	movw	r24, r28
     526:	88 0f       	add	r24, r24
     528:	99 1f       	adc	r25, r25
     52a:	84 5a       	subi	r24, 0xA4	; 164
     52c:	9f 4f       	sbci	r25, 0xFF	; 255
     52e:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__eerd_word_m168>
     532:	9c 01       	movw	r18, r24
  } else  {
     referenz = 0;		// limit to begin of table
  }
  tabind = referenz / Ref_Tab_Abstand;
  tabres = referenz % Ref_Tab_Abstand;
  tabres = Ref_Tab_Abstand-tabres;
     534:	42 e3       	ldi	r20, 0x32	; 50
     536:	4f 19       	sub	r20, r15
  }
  // interpolate the table of factors
  y1 = MEM_read_word(&RHtab[tabind]);
  y2 = MEM_read_word(&RHtab[tabind+1]);
  // RHmultip is the interpolated factor to compute capacity from load time with 470k
  RHmultip = ((y1 - y2) * tabres + (Ref_Tab_Abstand/2)) / Ref_Tab_Abstand + y2;
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	08 1b       	sub	r16, r24
     53c:	19 0b       	sbc	r17, r25
     53e:	40 9f       	mul	r20, r16
     540:	c0 01       	movw	r24, r0
     542:	41 9f       	mul	r20, r17
     544:	90 0d       	add	r25, r0
     546:	50 9f       	mul	r21, r16
     548:	90 0d       	add	r25, r0
     54a:	11 24       	eor	r1, r1
     54c:	49 96       	adiw	r24, 0x19	; 25
     54e:	62 e3       	ldi	r22, 0x32	; 50
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <__udivmodhi4>
     556:	62 0f       	add	r22, r18
     558:	73 1f       	adc	r23, r19
     55a:	70 93 01 01 	sts	0x0101, r23
     55e:	60 93 00 01 	sts	0x0100, r22
 }
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	ff 90       	pop	r15
     56c:	08 95       	ret

0000056e <lcd_clear_line>:
#endif

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
     56e:	1f 93       	push	r17
     570:	14 e1       	ldi	r17, 0x14	; 20
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    lcd_space();
     572:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_space>
     576:	11 50       	subi	r17, 0x01	; 1

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
     578:	e1 f7       	brne	.-8      	; 0x572 <lcd_clear_line+0x4>
    lcd_space();
 }
}
     57a:	1f 91       	pop	r17
     57c:	08 95       	ret

0000057e <DisplayValue>:
 *    e.g: p = 10^-12 -> -12
 *  - unit character (0 = none)
 *  digits = 2, 3 or 4
 */
void DisplayValue(unsigned long Value, int8_t Exponent, unsigned char Unit, unsigned char digits)
{
     57e:	2f 92       	push	r2
     580:	3f 92       	push	r3
     582:	4f 92       	push	r4
     584:	5f 92       	push	r5
     586:	7f 92       	push	r7
     588:	8f 92       	push	r8
     58a:	9f 92       	push	r9
     58c:	af 92       	push	r10
     58e:	bf 92       	push	r11
     590:	cf 92       	push	r12
     592:	df 92       	push	r13
     594:	ef 92       	push	r14
     596:	ff 92       	push	r15
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	df 93       	push	r29
     59e:	cf 93       	push	r28
     5a0:	cd b7       	in	r28, 0x3d	; 61
     5a2:	de b7       	in	r29, 0x3e	; 62
     5a4:	2f 97       	sbiw	r28, 0x0f	; 15
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	f8 94       	cli
     5aa:	de bf       	out	0x3e, r29	; 62
     5ac:	0f be       	out	0x3f, r0	; 63
     5ae:	cd bf       	out	0x3d, r28	; 61
     5b0:	6b 01       	movw	r12, r22
     5b2:	7c 01       	movw	r14, r24
     5b4:	14 2f       	mov	r17, r20
     5b6:	72 2e       	mov	r7, r18
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
     5b8:	03 30       	cpi	r16, 0x03	; 3
     5ba:	29 f0       	breq	.+10     	; 0x5c6 <DisplayValue+0x48>
  if (digits == 4) Limit = 10000;
     5bc:	04 30       	cpi	r16, 0x04	; 4
     5be:	31 f0       	breq	.+12     	; 0x5cc <DisplayValue+0x4e>
  uint8_t           Offset;		/* exponent of offset to next 10^3 step */
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
     5c0:	84 e6       	ldi	r24, 0x64	; 100
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	14 c0       	rjmp	.+40     	; 0x5ee <DisplayValue+0x70>
  if (digits == 3) Limit = 1000;
     5c6:	88 ee       	ldi	r24, 0xE8	; 232
     5c8:	93 e0       	ldi	r25, 0x03	; 3
     5ca:	11 c0       	rjmp	.+34     	; 0x5ee <DisplayValue+0x70>
  if (digits == 4) Limit = 10000;
     5cc:	80 e1       	ldi	r24, 0x10	; 16
     5ce:	97 e2       	ldi	r25, 0x27	; 39
     5d0:	0e c0       	rjmp	.+28     	; 0x5ee <DisplayValue+0x70>
  while (Value >= Limit)
  {
    Value += 5;				/* for automagic rounding */
     5d2:	c7 01       	movw	r24, r14
     5d4:	b6 01       	movw	r22, r12
     5d6:	6b 5f       	subi	r22, 0xFB	; 251
     5d8:	7f 4f       	sbci	r23, 0xFF	; 255
     5da:	8f 4f       	sbci	r24, 0xFF	; 255
     5dc:	9f 4f       	sbci	r25, 0xFF	; 255
    Value = Value / 10;			/* scale down by 10^1 */
     5de:	a5 01       	movw	r20, r10
     5e0:	94 01       	movw	r18, r8
     5e2:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
     5e6:	69 01       	movw	r12, r18
     5e8:	7a 01       	movw	r14, r20
    Exponent++;				/* increase exponent by 1 */
     5ea:	1f 5f       	subi	r17, 0xFF	; 255
     5ec:	08 c0       	rjmp	.+16     	; 0x5fe <DisplayValue+0x80>


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
  if (digits == 4) Limit = 10000;
  while (Value >= Limit)
     5ee:	1c 01       	movw	r2, r24
     5f0:	44 24       	eor	r4, r4
     5f2:	55 24       	eor	r5, r5
  {
    Value += 5;				/* for automagic rounding */
    Value = Value / 10;			/* scale down by 10^1 */
     5f4:	6a e0       	ldi	r22, 0x0A	; 10
     5f6:	86 2e       	mov	r8, r22
     5f8:	91 2c       	mov	r9, r1
     5fa:	a1 2c       	mov	r10, r1
     5fc:	b1 2c       	mov	r11, r1


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
  if (digits == 4) Limit = 10000;
  while (Value >= Limit)
     5fe:	c2 14       	cp	r12, r2
     600:	d3 04       	cpc	r13, r3
     602:	e4 04       	cpc	r14, r4
     604:	f5 04       	cpc	r15, r5
     606:	28 f7       	brcc	.-54     	; 0x5d2 <DisplayValue+0x54>


  /*
   *  determine prefix
   */
  Length = Exponent + 12;
     608:	81 2f       	mov	r24, r17
     60a:	84 5f       	subi	r24, 0xF4	; 244
     60c:	83 31       	cpi	r24, 0x13	; 19
     60e:	08 f0       	brcs	.+2      	; 0x612 <DisplayValue+0x94>
     610:	82 e1       	ldi	r24, 0x12	; 18
  if (Length <  0) Length = 0;		/* Limit to minimum prefix */
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
  Index = Length / 3;
     612:	23 e0       	ldi	r18, 0x03	; 3
  Offset = Length % 3;
     614:	62 2f       	mov	r22, r18
     616:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <__udivmodqi4>
     61a:	19 2f       	mov	r17, r25
    if (Offset > 0)
     61c:	99 23       	and	r25, r25
     61e:	19 f0       	breq	.+6      	; 0x626 <DisplayValue+0xa8>
    {
      Index++;				/* adjust index for exponent offset, take next prefix */
     620:	8f 5f       	subi	r24, 0xFF	; 255
      Offset = 3 - Offset;		/* reverse value (1 or 2) */
     622:	29 1b       	sub	r18, r25
     624:	12 2f       	mov	r17, r18
    }
  Prefix = MEM_read_byte((uint8_t *)(&PrefixTab[Index]));   /* look up prefix in table */
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	80 55       	subi	r24, 0x50	; 80
     62a:	9e 4f       	sbci	r25, 0xFE	; 254
     62c:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__eerd_byte_m168>
     630:	b8 2e       	mov	r11, r24
  /*
   *  display value
   */

  /* convert value into string */
  utoa((unsigned int)Value, OutBuffer, 10);
     632:	c6 01       	movw	r24, r12
     634:	6e 01       	movw	r12, r28
     636:	08 94       	sec
     638:	c1 1c       	adc	r12, r1
     63a:	d1 1c       	adc	r13, r1
     63c:	b6 01       	movw	r22, r12
     63e:	4a e0       	ldi	r20, 0x0A	; 10
     640:	50 e0       	ldi	r21, 0x00	; 0
     642:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <utoa>
  Length = strlen(OutBuffer);
     646:	f6 01       	movw	r30, r12
     648:	01 90       	ld	r0, Z+
     64a:	00 20       	and	r0, r0
     64c:	e9 f7       	brne	.-6      	; 0x648 <DisplayValue+0xca>
     64e:	31 97       	sbiw	r30, 0x01	; 1
     650:	2e 2e       	mov	r2, r30
     652:	2c 18       	sub	r2, r12

  /* position of dot */
  Exponent = Length - Offset;		/* calculate position */
     654:	82 2c       	mov	r8, r2
     656:	81 1a       	sub	r8, r17

  if (Exponent <= 0)			/* we have to prepend "0." */
     658:	18 14       	cp	r1, r8
     65a:	44 f0       	brlt	.+16     	; 0x66c <DisplayValue+0xee>
  {
    /* 0: factor 10 / -1: factor 100 */
//    lcd_data('0');
    lcd_data('.');
     65c:	8e e2       	ldi	r24, 0x2E	; 46
     65e:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
    if (Exponent < 0) lcd_data('0');	/* extra 0 for factor 100 */
     662:	88 20       	and	r8, r8
     664:	19 f0       	breq	.+6      	; 0x66c <DisplayValue+0xee>
     666:	80 e3       	ldi	r24, 0x30	; 48
     668:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
  }

  if (Offset == 0) Exponent = -1;	/* disable dot if not needed */
     66c:	11 23       	and	r17, r17
     66e:	11 f4       	brne	.+4      	; 0x674 <DisplayValue+0xf6>
     670:	88 24       	eor	r8, r8
     672:	8a 94       	dec	r8
     674:	6e 01       	movw	r12, r28
     676:	08 94       	sec
     678:	c1 1c       	adc	r12, r1
     67a:	d1 1c       	adc	r13, r1
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     67c:	00 e0       	ldi	r16, 0x00	; 0
     67e:	10 e0       	ldi	r17, 0x00	; 0
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    Index++;				/* next one */
    if (Index == Exponent) {
     680:	99 24       	eor	r9, r9
     682:	87 fc       	sbrc	r8, 7
     684:	90 94       	com	r9
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     686:	0d c0       	rjmp	.+26     	; 0x6a2 <DisplayValue+0x124>
  {
    lcd_data(OutBuffer[Index]);		/* display char */
     688:	0f 5f       	subi	r16, 0xFF	; 255
     68a:	1f 4f       	sbci	r17, 0xFF	; 255
     68c:	f6 01       	movw	r30, r12
     68e:	81 91       	ld	r24, Z+
     690:	6f 01       	movw	r12, r30
     692:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
    Index++;				/* next one */
    if (Index == Exponent) {
     696:	08 15       	cp	r16, r8
     698:	19 05       	cpc	r17, r9
     69a:	19 f4       	brne	.+6      	; 0x6a2 <DisplayValue+0x124>
      lcd_data('.');			/* display dot */
     69c:	8e e2       	ldi	r24, 0x2E	; 46
     69e:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     6a2:	02 15       	cp	r16, r2
     6a4:	88 f3       	brcs	.-30     	; 0x688 <DisplayValue+0x10a>
      lcd_data('.');			/* display dot */
    }
  }

  /* display prefix and unit */
  if (Prefix != 0) lcd_data(Prefix);
     6a6:	bb 20       	and	r11, r11
     6a8:	19 f0       	breq	.+6      	; 0x6b0 <DisplayValue+0x132>
     6aa:	8b 2d       	mov	r24, r11
     6ac:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
  if (Unit) lcd_data(Unit);
     6b0:	77 20       	and	r7, r7
     6b2:	19 f0       	breq	.+6      	; 0x6ba <DisplayValue+0x13c>
     6b4:	87 2d       	mov	r24, r7
     6b6:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
}
     6ba:	2f 96       	adiw	r28, 0x0f	; 15
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	de bf       	out	0x3e, r29	; 62
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	cd bf       	out	0x3d, r28	; 61
     6c6:	cf 91       	pop	r28
     6c8:	df 91       	pop	r29
     6ca:	1f 91       	pop	r17
     6cc:	0f 91       	pop	r16
     6ce:	ff 90       	pop	r15
     6d0:	ef 90       	pop	r14
     6d2:	df 90       	pop	r13
     6d4:	cf 90       	pop	r12
     6d6:	bf 90       	pop	r11
     6d8:	af 90       	pop	r10
     6da:	9f 90       	pop	r9
     6dc:	8f 90       	pop	r8
     6de:	7f 90       	pop	r7
     6e0:	5f 90       	pop	r5
     6e2:	4f 90       	pop	r4
     6e4:	3f 90       	pop	r3
     6e6:	2f 90       	pop	r2
     6e8:	08 95       	ret

000006ea <RvalOut>:
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
      lcd_space();
   }
}

void RvalOut(uint8_t ii) {	
     6ea:	0f 93       	push	r16
   // output of resistor value

   DisplayValue(resis[ii].rx,-1,LCD_CHAR_OMEGA,4);
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	2b e0       	ldi	r18, 0x0B	; 11
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	82 9f       	mul	r24, r18
     6f4:	f0 01       	movw	r30, r0
     6f6:	83 9f       	mul	r24, r19
     6f8:	f0 0d       	add	r31, r0
     6fa:	92 9f       	mul	r25, r18
     6fc:	f0 0d       	add	r31, r0
     6fe:	11 24       	eor	r1, r1
     700:	e8 5e       	subi	r30, 0xE8	; 232
     702:	fe 4f       	sbci	r31, 0xFE	; 254
     704:	60 81       	ld	r22, Z
     706:	71 81       	ldd	r23, Z+1	; 0x01
     708:	82 81       	ldd	r24, Z+2	; 0x02
     70a:	93 81       	ldd	r25, Z+3	; 0x03
     70c:	4f ef       	ldi	r20, 0xFF	; 255
     70e:	24 ef       	ldi	r18, 0xF4	; 244
     710:	04 e0       	ldi	r16, 0x04	; 4
     712:	0e 94 bf 02 	call	0x57e	; 0x57e <DisplayValue>
   lcd_space();
     716:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_space>
 }
     71a:	0f 91       	pop	r16
     71c:	08 95       	ret

0000071e <mVAusgabe>:
   lcd_line2(); 				//2. row
   lcd_fix_string(Uf_str);			//"Uf="
   mVAusgabe(bcdnum >> 4);
   mVAusgabe(bcdnum & 0x0f);
}
void mVAusgabe(uint8_t nn) {
     71e:	0f 93       	push	r16
   if (nn < 3) {
     720:	83 30       	cpi	r24, 0x03	; 3
     722:	98 f4       	brcc	.+38     	; 0x74a <mVAusgabe+0x2c>
      // Output in mV units
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
     724:	e8 2f       	mov	r30, r24
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	ee 0f       	add	r30, r30
     72a:	ff 1f       	adc	r31, r31
     72c:	ee 0f       	add	r30, r30
     72e:	ff 1f       	adc	r31, r31
     730:	e4 59       	subi	r30, 0x94	; 148
     732:	fe 4f       	sbci	r31, 0xFE	; 254
     734:	62 81       	ldd	r22, Z+2	; 0x02
     736:	73 81       	ldd	r23, Z+3	; 0x03
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	4d ef       	ldi	r20, 0xFD	; 253
     73e:	26 e5       	ldi	r18, 0x56	; 86
     740:	03 e0       	ldi	r16, 0x03	; 3
     742:	0e 94 bf 02 	call	0x57e	; 0x57e <DisplayValue>
      lcd_space();
     746:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_space>
   }
}
     74a:	0f 91       	pop	r16
     74c:	08 95       	ret

0000074e <UfAusgabe>:
// output of flux voltage for 1-2 diodes in row 2
// bcdnum = Numbers of both Diodes:
// higher 4 Bit  number of first Diode
// lower 4 Bit  number of second Diode (Structure diodes[nn])
// if number >= 3  no output is done
void UfAusgabe(uint8_t bcdnum) {
     74e:	1f 93       	push	r17
     750:	18 2f       	mov	r17, r24

   lcd_line2(); 				//2. row
     752:	80 ec       	ldi	r24, 0xC0	; 192
     754:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
   lcd_fix_string(Uf_str);			//"Uf="
     758:	8e e0       	ldi	r24, 0x0E	; 14
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
   mVAusgabe(bcdnum >> 4);
     760:	81 2f       	mov	r24, r17
     762:	82 95       	swap	r24
     764:	8f 70       	andi	r24, 0x0F	; 15
     766:	0e 94 8f 03 	call	0x71e	; 0x71e <mVAusgabe>
   mVAusgabe(bcdnum & 0x0f);
     76a:	81 2f       	mov	r24, r17
     76c:	8f 70       	andi	r24, 0x0F	; 15
     76e:	0e 94 8f 03 	call	0x71e	; 0x71e <mVAusgabe>
}
     772:	1f 91       	pop	r17
     774:	08 95       	ret

00000776 <sleep_5ms>:
      t2_offset =  (5000 - (16384 / (int)(F_CPU / 1000000UL))) / (1024 / (int)(F_CPU / 1000000UL));	/* set to 5ms above the actual counter */
      pause = 0;
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     776:	42 e0       	ldi	r20, 0x02	; 2
/* wake up will be done with compare match interrupt of counter 2 */
void sleep_5ms(uint16_t pause){
// pause is the delay in 5ms units
uint8_t t2_offset;

while (pause > 0)
     778:	1c c0       	rjmp	.+56     	; 0x7b2 <sleep_5ms+0x3c>
  {
#if F_CPU >= 8000000UL
   if (pause > 1)
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	91 05       	cpc	r25, r1
     77e:	18 f0       	brcs	.+6      	; 0x786 <sleep_5ms+0x10>
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - (16384 / (int)(F_CPU / 1000000UL))) / (1024 / (int)(F_CPU / 1000000UL));	/* set to 10ms above the actual counter */
      pause -= 2;
     780:	02 97       	sbiw	r24, 0x02	; 2
  {
#if F_CPU >= 8000000UL
   if (pause > 1)
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - (16384 / (int)(F_CPU / 1000000UL))) / (1024 / (int)(F_CPU / 1000000UL));	/* set to 10ms above the actual counter */
     782:	3e e3       	ldi	r19, 0x3E	; 62
     784:	03 c0       	rjmp	.+6      	; 0x78c <sleep_5ms+0x16>
      pause -= 2;
     } else {
      t2_offset =  (5000 - (16384 / (int)(F_CPU / 1000000UL))) / (1024 / (int)(F_CPU / 1000000UL));	/* set to 5ms above the actual counter */
     786:	37 e1       	ldi	r19, 0x17	; 23
      pause = 0;
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	90 e0       	ldi	r25, 0x00	; 0
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
     78c:	20 91 b2 00 	lds	r18, 0x00B2
     790:	23 0f       	add	r18, r19
     792:	20 93 b3 00 	sts	0x00B3, r18
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     796:	40 93 70 00 	sts	0x0070, r20
//   set_sleep_mode(SLEEP_MODE_PWR_SAVE);
   set_sleep_mode(SLEEP_MODE_PWR_SAVE);
     79a:	23 b7       	in	r18, 0x33	; 51
     79c:	21 7f       	andi	r18, 0xF1	; 241
     79e:	26 60       	ori	r18, 0x06	; 6
     7a0:	23 bf       	out	0x33, r18	; 51
//   set_sleep_mode(SLEEP_MODE_IDLE);
   sleep_mode();
     7a2:	23 b7       	in	r18, 0x33	; 51
     7a4:	21 60       	ori	r18, 0x01	; 1
     7a6:	23 bf       	out	0x33, r18	; 51
     7a8:	88 95       	sleep
     7aa:	23 b7       	in	r18, 0x33	; 51
     7ac:	2e 7f       	andi	r18, 0xFE	; 254
     7ae:	23 bf       	out	0x33, r18	; 51
// wake up after output compare match interrupt
#else
   wait5ms();
#endif
   wdt_reset();
     7b0:	a8 95       	wdr
/* wake up will be done with compare match interrupt of counter 2 */
void sleep_5ms(uint16_t pause){
// pause is the delay in 5ms units
uint8_t t2_offset;

while (pause > 0)
     7b2:	00 97       	sbiw	r24, 0x00	; 0
     7b4:	11 f7       	brne	.-60     	; 0x77a <sleep_5ms+0x4>
#else
   wait5ms();
#endif
   wdt_reset();
  }
TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
     7b6:	10 92 70 00 	sts	0x0070, r1
}
     7ba:	08 95       	ret

000007bc <CheckPins>:
//******************************************************************
void CheckPins(uint8_t HighPin, uint8_t LowPin, uint8_t TristatePin)
  {
     7bc:	2f 92       	push	r2
     7be:	3f 92       	push	r3
     7c0:	4f 92       	push	r4
     7c2:	5f 92       	push	r5
     7c4:	6f 92       	push	r6
     7c6:	7f 92       	push	r7
     7c8:	8f 92       	push	r8
     7ca:	9f 92       	push	r9
     7cc:	af 92       	push	r10
     7ce:	bf 92       	push	r11
     7d0:	cf 92       	push	r12
     7d2:	df 92       	push	r13
     7d4:	ef 92       	push	r14
     7d6:	ff 92       	push	r15
     7d8:	0f 93       	push	r16
     7da:	1f 93       	push	r17
     7dc:	df 93       	push	r29
     7de:	cf 93       	push	r28
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62
     7e4:	66 97       	sbiw	r28, 0x16	; 22
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	f8 94       	cli
     7ea:	de bf       	out	0x3e, r29	; 62
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	cd bf       	out	0x3d, r28	; 61
     7f0:	18 2f       	mov	r17, r24
     7f2:	36 2e       	mov	r3, r22
     7f4:	24 2e       	mov	r2, r20
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
     7f6:	a8 95       	wdr
//  #define RR680MI resis680mi
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = MEM_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
     7f8:	a6 2e       	mov	r10, r22
     7fa:	bb 24       	eor	r11, r11
     7fc:	c5 01       	movw	r24, r10
     7fe:	8b 55       	subi	r24, 0x5B	; 91
     800:	9e 4f       	sbci	r25, 0xFE	; 254
     802:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__eerd_byte_m168>
     806:	8a 83       	std	Y+2, r24	; 0x02
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
  TriPinRL = MEM_read_byte(&PinRLtab[TristatePin]);	// intruction for TristatePin R_L
     808:	82 2d       	mov	r24, r2
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	8b 55       	subi	r24, 0x5B	; 91
     80e:	9e 4f       	sbci	r25, 0xFE	; 254
     810:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__eerd_byte_m168>
     814:	d8 2e       	mov	r13, r24
  TriPinRH = TriPinRL + TriPinRL;			// intruction for TristatePin R_H
     816:	08 2f       	mov	r16, r24
     818:	00 0f       	add	r16, r16
  HiPinRL = MEM_read_byte(&PinRLtab[HighPin]);		// intruction for HighPin R_L
     81a:	e1 2e       	mov	r14, r17
     81c:	ff 24       	eor	r15, r15
     81e:	c7 01       	movw	r24, r14
     820:	8b 55       	subi	r24, 0x5B	; 91
     822:	9e 4f       	sbci	r25, 0xFE	; 254
     824:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__eerd_byte_m168>
     828:	c8 2e       	mov	r12, r24
  HiPinRH = HiPinRL + HiPinRL;				// intruction for HighPin R_H
     82a:	28 2f       	mov	r18, r24
     82c:	22 0f       	add	r18, r18
     82e:	28 87       	std	Y+8, r18	; 0x08

  HiADCp = MEM_read_byte(&PinADCtab[HighPin]);		// intruction for ADC High-Pin 
     830:	c7 01       	movw	r24, r14
     832:	88 55       	subi	r24, 0x58	; 88
     834:	9e 4f       	sbci	r25, 0xFE	; 254
     836:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__eerd_byte_m168>
     83a:	89 83       	std	Y+1, r24	; 0x01
  LoADCp = MEM_read_byte(&PinADCtab[LowPin]);		// intruction for ADC Low-Pin
     83c:	c5 01       	movw	r24, r10
     83e:	88 55       	subi	r24, 0x58	; 88
     840:	9e 4f       	sbci	r25, 0xFE	; 254
     842:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__eerd_byte_m168>
  HiADCm = HiADCp | TXD_MSK;
     846:	39 81       	ldd	r19, Y+1	; 0x01
     848:	38 60       	ori	r19, 0x08	; 8
     84a:	39 83       	std	Y+1, r19	; 0x01
  HiADCp |= TXD_VAL;
  LoADCm = LoADCp | TXD_MSK;
     84c:	88 60       	ori	r24, 0x08	; 8
     84e:	8b 83       	std	Y+3, r24	; 0x03
  LoADCp |= TXD_VAL;

  //setting of Pins 
  R_PORT = 0;				//resistor-Port outputs to 0
     850:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//Low-Pin to output and across R_L to GND
     852:	8a 81       	ldd	r24, Y+2	; 0x02
     854:	84 b9       	out	0x04, r24	; 4
  ADC_DDR = HiADCm;		//High-Pin to output
     856:	37 b9       	out	0x07, r19	; 7
  ADC_PORT = HiADCp;		//High-Pin fix to Vcc
     858:	38 b9       	out	0x08, r19	; 8
  //for some MOSFET the gate (TristatePin) must be discharged
  ChargePin10ms(TriPinRL,0);		//discharge for N-Kanal
     85a:	8d 2d       	mov	r24, r13
     85c:	60 e0       	ldi	r22, 0x00	; 0
     85e:	0e 94 ab 01 	call	0x356	; 0x356 <ChargePin10ms>
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin 
     862:	83 2d       	mov	r24, r3
     864:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
     868:	9a 87       	std	Y+10, r25	; 0x0a
     86a:	89 87       	std	Y+9, r24	; 0x09
  if(adc.lp_otr >= 977) {		//no current now? 
     86c:	a3 e0       	ldi	r26, 0x03	; 3
     86e:	81 3d       	cpi	r24, 0xD1	; 209
     870:	9a 07       	cpc	r25, r26
     872:	48 f0       	brcs	.+18     	; 0x886 <CheckPins+0xca>
     ChargePin10ms(TriPinRL,1);	 	//else: discharge for P-channel (Gate to VCC)
     874:	8d 2d       	mov	r24, r13
     876:	61 e0       	ldi	r22, 0x01	; 1
     878:	0e 94 ab 01 	call	0x356	; 0x356 <ChargePin10ms>
     adc.lp_otr = ReadADC(LowPin);	//read voltage of Low-Pin again
     87c:	83 2d       	mov	r24, r3
     87e:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
     882:	9a 87       	std	Y+10, r25	; 0x0a
     884:	89 87       	std	Y+9, r24	; 0x09
  lcd_line2();
  lcd_clear_line();
  lcd_line2();
#endif

  if(adc.lp_otr > 92) {  //there is some current without TristatePin current 
     886:	e9 85       	ldd	r30, Y+9	; 0x09
     888:	fa 85       	ldd	r31, Y+10	; 0x0a
     88a:	ed 35       	cpi	r30, 0x5D	; 93
     88c:	f1 05       	cpc	r31, r1
     88e:	08 f4       	brcc	.+2      	; 0x892 <CheckPins+0xd6>
     890:	aa c0       	rjmp	.+340    	; 0x9e6 <CheckPins+0x22a>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test if N-JFET or if self-conducting N-MOSFET
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
     892:	8a 81       	ldd	r24, Y+2	; 0x02
     894:	80 2b       	or	r24, r16
     896:	84 b9       	out	0x04, r24	; 4
     adc.lp1 = W20msReadADC(LowPin);	//measure voltage at the assumed Source 
     898:	83 2d       	mov	r24, r3
     89a:	0e 94 45 1b 	call	0x368a	; 0x368a <W20msReadADC>
     89e:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     8a0:	82 2d       	mov	r24, r2
     8a2:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
     8a6:	7c 01       	movw	r14, r24
     R_PORT = TriPinRH;			//switch R_H for Tristate-Pin (probably Gate) to VCC
     8a8:	05 b9       	out	0x05, r16	; 5
     adc.lp2 = W20msReadADC(LowPin);	//measure voltage at the assumed Source again
     8aa:	83 2d       	mov	r24, r3
     8ac:	0e 94 45 1b 	call	0x368a	; 0x368a <W20msReadADC>
     //If it is a self-conducting MOSFET or JFET, then must be: adc.lp2 > adc.lp1 
     if(adc.lp2>(adc.lp1+488)) {
     8b0:	95 01       	movw	r18, r10
     8b2:	28 51       	subi	r18, 0x18	; 24
     8b4:	3e 4f       	sbci	r19, 0xFE	; 254
     8b6:	28 17       	cp	r18, r24
     8b8:	39 07       	cpc	r19, r25
     8ba:	08 f0       	brcs	.+2      	; 0x8be <CheckPins+0x102>
     8bc:	40 c0       	rjmp	.+128    	; 0x93e <CheckPins+0x182>
        //measure voltage at the  Gate, differ between MOSFET and JFET
        ADC_PORT = TXD_VAL;
     8be:	88 e0       	ldi	r24, 0x08	; 8
     8c0:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = LoADCm;	//Low-Pin fix to GND
     8c2:	fb 81       	ldd	r31, Y+3	; 0x03
     8c4:	f7 b9       	out	0x07, r31	; 7
        R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     8c6:	80 2f       	mov	r24, r16
     8c8:	8c 29       	or	r24, r12
     8ca:	84 b9       	out	0x04, r24	; 4
        R_PORT = TriPinRH | HiPinRL;	//switch R_L for High-Pin to VCC
     8cc:	85 b9       	out	0x05, r24	; 5
        adc.lp2 = W20msReadADC(TristatePin); //read voltage of assumed Gate 
     8ce:	82 2d       	mov	r24, r2
     8d0:	0e 94 45 1b 	call	0x368a	; 0x368a <W20msReadADC>
        if(adc.lp2>3911) {  //MOSFET
     8d4:	2f e0       	ldi	r18, 0x0F	; 15
     8d6:	88 34       	cpi	r24, 0x48	; 72
     8d8:	92 07       	cpc	r25, r18
     8da:	28 f0       	brcs	.+10     	; 0x8e6 <CheckPins+0x12a>
           PartFound = PART_FET;	//N-Kanal-MOSFET
     8dc:	83 e0       	ldi	r24, 0x03	; 3
     8de:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_N_D_MOS; //Depletion-MOSFET
     8e2:	84 e0       	ldi	r24, 0x04	; 4
     8e4:	04 c0       	rjmp	.+8      	; 0x8ee <CheckPins+0x132>
        } else {  //JFET (pn-passage between Gate and Source is conducting )
           PartFound = PART_FET;	//N-Kanal-JFET
     8e6:	83 e0       	ldi	r24, 0x03	; 3
     8e8:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_N_JFET;
     8ec:	86 e0       	ldi	r24, 0x06	; 6
     8ee:	80 93 06 01 	sts	0x0106, r24
        }
//      if ((PartReady == 0) || (adc.lp1 > trans.uBE[0])) 
//      there is no way to find out the right Source / Drain
        trans.uBE[0] = adc.lp1;
     8f2:	b0 92 4f 01 	sts	0x014F, r11
     8f6:	a0 92 4e 01 	sts	0x014E, r10
        gthvoltage = adc.lp1 - adc.tp1;	//voltage GS (Source - Gate)
     8fa:	c5 01       	movw	r24, r10
     8fc:	8e 19       	sub	r24, r14
     8fe:	9f 09       	sbc	r25, r15
     900:	90 93 57 01 	sts	0x0157, r25
     904:	80 93 56 01 	sts	0x0156, r24
        trans.uBE[1] = (unsigned int)(((unsigned long)adc.lp1 * 1000) / RR680MI); // Id 0.01mA
     908:	b5 01       	movw	r22, r10
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	28 ee       	ldi	r18, 0xE8	; 232
     910:	33 e0       	ldi	r19, 0x03	; 3
     912:	40 e0       	ldi	r20, 0x00	; 0
     914:	50 e0       	ldi	r21, 0x00	; 0
     916:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
     91a:	20 91 02 01 	lds	r18, 0x0102
     91e:	30 91 03 01 	lds	r19, 0x0103
     922:	40 e0       	ldi	r20, 0x00	; 0
     924:	50 e0       	ldi	r21, 0x00	; 0
     926:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
     92a:	30 93 51 01 	sts	0x0151, r19
     92e:	20 93 50 01 	sts	0x0150, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     932:	20 92 52 01 	sts	0x0152, r2
        trans.c = HighPin;
     936:	10 93 53 01 	sts	0x0153, r17
        trans.e = LowPin;
     93a:	30 92 54 01 	sts	0x0154, r3
     }

     ADC_PORT = TXD_VAL;		// direct outputs to GND
     93e:	88 e0       	ldi	r24, 0x08	; 8
     940:	88 b9       	out	0x08, r24	; 8

     //Test, if P-JFET or if self-conducting P-MOSFET
     ADC_DDR = LoADCm;		//switch Low-Pin (assumed Drain) direct to GND,
     942:	3b 81       	ldd	r19, Y+3	; 0x03
     944:	37 b9       	out	0x07, r19	; 7
				//R_H for Tristate-Pin (assumed Gate) is already switched to VCC
     R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     946:	80 2f       	mov	r24, r16
     948:	8c 29       	or	r24, r12
     94a:	84 b9       	out	0x04, r24	; 4
     R_PORT = TriPinRH | HiPinRL;	//High-Pin across R_L to Vcc
     94c:	85 b9       	out	0x05, r24	; 5
     adc.hp1 = W20msReadADC(HighPin);	//measure voltage at assumed Source 
     94e:	81 2f       	mov	r24, r17
     950:	0e 94 45 1b 	call	0x368a	; 0x368a <W20msReadADC>
     954:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     956:	82 2d       	mov	r24, r2
     958:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
     95c:	7c 01       	movw	r14, r24
     R_PORT = HiPinRL;			//switch R_H for Tristate-Pin (assumed Gate) to GND
     95e:	c5 b8       	out	0x05, r12	; 5
     adc.hp2 = W20msReadADC(HighPin);	//read voltage at assumed Source again
     960:	81 2f       	mov	r24, r17
     962:	0e 94 45 1b 	call	0x368a	; 0x368a <W20msReadADC>
     //if it is a self-conducting P_MOSFET or P-JFET , then must be:  adc.hp1 > adc.hp2 
     if(adc.hp1>(adc.hp2+488)) {
     966:	88 51       	subi	r24, 0x18	; 24
     968:	9e 4f       	sbci	r25, 0xFE	; 254
     96a:	8a 15       	cp	r24, r10
     96c:	9b 05       	cpc	r25, r11
     96e:	d8 f5       	brcc	.+118    	; 0x9e6 <CheckPins+0x22a>
        //read voltage at the Gate , to differ between MOSFET and JFET
        ADC_PORT = HiADCp;	//switch High-Pin directly to VCC
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = HiADCm;	//switch High-Pin to output
     974:	87 b9       	out	0x07, r24	; 7
        adc.tp2 = W20msReadADC(TristatePin); //read voltage at the assumed Gate 
     976:	82 2d       	mov	r24, r2
     978:	0e 94 45 1b 	call	0x368a	; 0x368a <W20msReadADC>
        if(adc.tp2<977) { 		//MOSFET
     97c:	a3 e0       	ldi	r26, 0x03	; 3
     97e:	81 3d       	cpi	r24, 0xD1	; 209
     980:	9a 07       	cpc	r25, r26
     982:	28 f4       	brcc	.+10     	; 0x98e <CheckPins+0x1d2>
           PartFound = PART_FET;	//P-Kanal-MOSFET
     984:	83 e0       	ldi	r24, 0x03	; 3
     986:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_D_MOS; //Depletion-MOSFET
     98a:	85 e0       	ldi	r24, 0x05	; 5
     98c:	04 c0       	rjmp	.+8      	; 0x996 <CheckPins+0x1da>
        } else { 			//JFET (pn-passage between Gate and Source is conducting)
           PartFound = PART_FET;	//P-Kanal-JFET
     98e:	83 e0       	ldi	r24, 0x03	; 3
     990:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_JFET;
     994:	87 e0       	ldi	r24, 0x07	; 7
     996:	80 93 06 01 	sts	0x0106, r24
        }
        gthvoltage = adc.tp1 - adc.hp1;		//voltage GS (Gate - Source)
     99a:	ea 18       	sub	r14, r10
     99c:	fb 08       	sbc	r15, r11
     99e:	f0 92 57 01 	sts	0x0157, r15
     9a2:	e0 92 56 01 	sts	0x0156, r14
        trans.uBE[1] = (unsigned int)(((unsigned long)(ADCconfig.U_AVCC - adc.hp1) * 1000) / RR680PL); // Id 0.01mA
     9a6:	60 91 3d 01 	lds	r22, 0x013D
     9aa:	70 91 3e 01 	lds	r23, 0x013E
     9ae:	6a 19       	sub	r22, r10
     9b0:	7b 09       	sbc	r23, r11
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	28 ee       	ldi	r18, 0xE8	; 232
     9b8:	33 e0       	ldi	r19, 0x03	; 3
     9ba:	40 e0       	ldi	r20, 0x00	; 0
     9bc:	50 e0       	ldi	r21, 0x00	; 0
     9be:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
     9c2:	20 91 08 01 	lds	r18, 0x0108
     9c6:	30 91 09 01 	lds	r19, 0x0109
     9ca:	40 e0       	ldi	r20, 0x00	; 0
     9cc:	50 e0       	ldi	r21, 0x00	; 0
     9ce:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
     9d2:	30 93 51 01 	sts	0x0151, r19
     9d6:	20 93 50 01 	sts	0x0150, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     9da:	20 92 52 01 	sts	0x0152, r2
        trans.c = LowPin;
     9de:	30 92 53 01 	sts	0x0153, r3
        trans.e = HighPin;
     9e2:	10 93 54 01 	sts	0x0154, r17
  } // end component has current without TristatePin signal


#ifdef COMMON_COLLECTOR
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
     9e6:	88 e0       	ldi	r24, 0x08	; 8
     9e8:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;			// Collector direct to GND
     9ea:	bb 81       	ldd	r27, Y+3	; 0x03
     9ec:	b7 b9       	out	0x07, r27	; 7
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
     9ee:	c5 b8       	out	0x05, r12	; 5
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
     9f0:	ec 2d       	mov	r30, r12
     9f2:	ed 29       	or	r30, r13
     9f4:	eb 87       	std	Y+11, r30	; 0x0b
     9f6:	e4 b9       	out	0x04, r30	; 4
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     9f8:	a0 90 3d 01 	lds	r10, 0x013D
     9fc:	b0 90 3e 01 	lds	r11, 0x013E
     a00:	81 2f       	mov	r24, r17
     a02:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
     a06:	7c 01       	movw	r14, r24
  adc.tp1 = ReadADC(TristatePin);	// voltage at the base resistor
     a08:	82 2d       	mov	r24, r2
     a0a:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
     a0e:	4c 01       	movw	r8, r24

  if (adc.tp1 < 10) {
     a10:	8a 30       	cpi	r24, 0x0A	; 10
     a12:	91 05       	cpc	r25, r1
     a14:	68 f5       	brcc	.+90     	; 0xa70 <CheckPins+0x2b4>
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
     a16:	80 2f       	mov	r24, r16
     a18:	8c 29       	or	r24, r12
     a1a:	84 b9       	out	0x04, r24	; 4
     adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);
     a1c:	a0 90 3d 01 	lds	r10, 0x013D
     a20:	b0 90 3e 01 	lds	r11, 0x013E
     a24:	81 2f       	mov	r24, r17
     a26:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
     a2a:	a8 1a       	sub	r10, r24
     a2c:	b9 0a       	sbc	r11, r25
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
     a2e:	82 2d       	mov	r24, r2
     a30:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
     a34:	4c 01       	movw	r8, r24
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     a36:	25 01       	movw	r4, r10
     a38:	66 24       	eor	r6, r6
     a3a:	77 24       	eor	r7, r7
     a3c:	20 91 08 01 	lds	r18, 0x0108
     a40:	30 91 09 01 	lds	r19, 0x0109
     a44:	40 e0       	ldi	r20, 0x00	; 0
     a46:	50 e0       	ldi	r21, 0x00	; 0
     a48:	60 e6       	ldi	r22, 0x60	; 96
     a4a:	77 eb       	ldi	r23, 0xB7	; 183
     a4c:	87 e4       	ldi	r24, 0x47	; 71
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
     a54:	c3 01       	movw	r24, r6
     a56:	b2 01       	movw	r22, r4
     a58:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
     a5c:	94 01       	movw	r18, r8
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e0       	ldi	r21, 0x00	; 0
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     a62:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
     a66:	2c 83       	std	Y+4, r18	; 0x04
     a68:	3d 83       	std	Y+5, r19	; 0x05
     a6a:	4e 83       	std	Y+6, r20	; 0x06
     a6c:	5f 83       	std	Y+7, r21	; 0x07
     a6e:	0f c0       	rjmp	.+30     	; 0xa8e <CheckPins+0x2d2>
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
  ADC_DDR = LoADCm;			// Collector direct to GND
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     a70:	ae 18       	sub	r10, r14
     a72:	bf 08       	sbc	r11, r15
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
 #else
     c_hfe = ((adc.hp1 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
  } else {
     c_hfe = (unsigned long)((adc.hp1 - adc.tp1) / adc.tp1);
     a74:	c5 01       	movw	r24, r10
     a76:	88 19       	sub	r24, r8
     a78:	99 09       	sbc	r25, r9
     a7a:	b4 01       	movw	r22, r8
     a7c:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <__udivmodhi4>
     a80:	cb 01       	movw	r24, r22
     a82:	a0 e0       	ldi	r26, 0x00	; 0
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	8c 83       	std	Y+4, r24	; 0x04
     a88:	9d 83       	std	Y+5, r25	; 0x05
     a8a:	ae 83       	std	Y+6, r26	; 0x06
     a8c:	bf 83       	std	Y+7, r27	; 0x07
  }
#endif

  //set Pins again for circuit with common Emitter PNP
  R_DDR = LoPinRL;		//switch R_L port for Low-Pin to output (GND)
     a8e:	9a 81       	ldd	r25, Y+2	; 0x02
     a90:	94 b9       	out	0x04, r25	; 4
  R_PORT = 0;			//switch all resistor ports to GND
     a92:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = HiADCm;		//switch High-Pin to output
     a94:	a9 81       	ldd	r26, Y+1	; 0x01
     a96:	a7 b9       	out	0x07, r26	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
     a98:	a8 b9       	out	0x08, r26	; 8
  wait_about5ms();
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 bb 03 	call	0x776	; 0x776 <sleep_5ms>
  
  if(adc.lp_otr < 977) {
     aa2:	e9 85       	ldd	r30, Y+9	; 0x09
     aa4:	fa 85       	ldd	r31, Y+10	; 0x0a
     aa6:	23 e0       	ldi	r18, 0x03	; 3
     aa8:	e1 3d       	cpi	r30, 0xD1	; 209
     aaa:	f2 07       	cpc	r31, r18
     aac:	08 f0       	brcs	.+2      	; 0xab0 <CheckPins+0x2f4>
     aae:	ab c2       	rjmp	.+1366   	; 0x1006 <CheckPins+0x84a>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test to PNP
     R_DDR = LoPinRL | TriPinRL;	//switch R_L port for Tristate-Pin to output (GND), for Test of PNP
     ab0:	3a 81       	ldd	r19, Y+2	; 0x02
     ab2:	3d 29       	or	r19, r13
     ab4:	3f 87       	std	Y+15, r19	; 0x0f
     ab6:	34 b9       	out	0x04, r19	; 4
     adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin
     ab8:	83 2d       	mov	r24, r3
     aba:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
     if(adc.lp1 > 3422) {
     abe:	ad e0       	ldi	r26, 0x0D	; 13
     ac0:	8f 35       	cpi	r24, 0x5F	; 95
     ac2:	9a 07       	cpc	r25, r26
     ac4:	08 f4       	brcc	.+2      	; 0xac8 <CheckPins+0x30c>
     ac6:	e1 c0       	rjmp	.+450    	; 0xc8a <CheckPins+0x4ce>
        //component has current => PNP-Transistor or equivalent
        //compute current amplification factor in both directions
        R_DDR = LoPinRL | TriPinRH;	//switch R_H port for Tristate-Pin (Base) to output (GND)
     ac8:	ba 81       	ldd	r27, Y+2	; 0x02
     aca:	b0 2b       	or	r27, r16
     acc:	b8 8b       	std	Y+16, r27	; 0x10
     ace:	b4 b9       	out	0x04, r27	; 4

        adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin (assumed Collector)
     ad0:	83 2d       	mov	r24, r3
     ad2:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
     ad6:	9a 8b       	std	Y+18, r25	; 0x12
     ad8:	89 8b       	std	Y+17, r24	; 0x11
        adc.tp2 = ReadADC(TristatePin);	//measure voltage at TristatePin (Base) 
     ada:	82 2d       	mov	r24, r2
     adc:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
     ae0:	9d 8b       	std	Y+21, r25	; 0x15
     ae2:	8c 8b       	std	Y+20, r24	; 0x14
        //check, if Test is done before 
        if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     ae4:	80 91 07 01 	lds	r24, 0x0107
     ae8:	82 50       	subi	r24, 0x02	; 2
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	18 f4       	brcc	.+6      	; 0xaf4 <CheckPins+0x338>
           PartReady = 1;
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	80 93 04 01 	sts	0x0104, r24
        }
        trans.uBE[PartReady] = ReadADC(HighPin) - adc.tp2;	// Base Emitter Voltage
     af4:	e0 90 04 01 	lds	r14, 0x0104
     af8:	ff 24       	eor	r15, r15
     afa:	81 2f       	mov	r24, r17
     afc:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
     b00:	f7 01       	movw	r30, r14
     b02:	ee 0f       	add	r30, r30
     b04:	ff 1f       	adc	r31, r31
     b06:	e2 5b       	subi	r30, 0xB2	; 178
     b08:	fe 4f       	sbci	r31, 0xFE	; 254
     b0a:	2c 89       	ldd	r18, Y+20	; 0x14
     b0c:	3d 89       	ldd	r19, Y+21	; 0x15
     b0e:	82 1b       	sub	r24, r18
     b10:	93 0b       	sbc	r25, r19
     b12:	91 83       	std	Z+1, r25	; 0x01
     b14:	80 83       	st	Z, r24

        //compute current amplification factor for circuit with common Emitter
        //hFE = B = Collector current / Base current
        if(adc.tp2 < 53) {
     b16:	25 33       	cpi	r18, 0x35	; 53
     b18:	31 05       	cpc	r19, r1
     b1a:	20 f4       	brcc	.+8      	; 0xb24 <CheckPins+0x368>
#if DebugOut == 5
           lcd_data('<');
           lcd_data('5');
           lcd_data('3');
#endif
           adc.tp2 = 53;
     b1c:	85 e3       	ldi	r24, 0x35	; 53
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	9d 8b       	std	Y+21, r25	; 0x15
     b22:	8c 8b       	std	Y+20, r24	; 0x14
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     b24:	e0 90 04 01 	lds	r14, 0x0104
     b28:	ff 24       	eor	r15, r15
     b2a:	a9 89       	ldd	r26, Y+17	; 0x11
     b2c:	ba 89       	ldd	r27, Y+18	; 0x12
     b2e:	2d 01       	movw	r4, r26
     b30:	66 24       	eor	r6, r6
     b32:	77 24       	eor	r7, r7
     b34:	20 91 02 01 	lds	r18, 0x0102
     b38:	30 91 03 01 	lds	r19, 0x0103
     b3c:	40 e0       	ldi	r20, 0x00	; 0
     b3e:	50 e0       	ldi	r21, 0x00	; 0
     b40:	60 e6       	ldi	r22, 0x60	; 96
     b42:	77 eb       	ldi	r23, 0xB7	; 183
     b44:	87 e4       	ldi	r24, 0x47	; 71
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
     b4c:	c3 01       	movw	r24, r6
     b4e:	b2 01       	movw	r22, r4
     b50:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
                 (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
     b54:	ec 89       	ldd	r30, Y+20	; 0x14
     b56:	fd 89       	ldd	r31, Y+21	; 0x15
     b58:	9f 01       	movw	r18, r30
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	50 e0       	ldi	r21, 0x00	; 0
     b5e:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
#endif
           adc.tp2 = 53;
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     b62:	f7 01       	movw	r30, r14
     b64:	ee 0f       	add	r30, r30
     b66:	ff 1f       	adc	r31, r31
     b68:	ee 0f       	add	r30, r30
     b6a:	ff 1f       	adc	r31, r31
     b6c:	ea 5b       	subi	r30, 0xBA	; 186
     b6e:	fe 4f       	sbci	r31, 0xFE	; 254
     b70:	20 83       	st	Z, r18
     b72:	31 83       	std	Z+1, r19	; 0x01
     b74:	42 83       	std	Z+2, r20	; 0x02
     b76:	53 83       	std	Z+3, r21	; 0x03
        trans.hfe[PartReady] = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
#ifdef COMMON_COLLECTOR
        //current amplification factor for common  Collector (Emitter follower)
        // c_hFE = (Emitter current - Base current) / Base current
        if (c_hfe > trans.hfe[PartReady]) {
     b78:	8c 81       	ldd	r24, Y+4	; 0x04
     b7a:	9d 81       	ldd	r25, Y+5	; 0x05
     b7c:	ae 81       	ldd	r26, Y+6	; 0x06
     b7e:	bf 81       	ldd	r27, Y+7	; 0x07
     b80:	28 17       	cp	r18, r24
     b82:	39 07       	cpc	r19, r25
     b84:	4a 07       	cpc	r20, r26
     b86:	5b 07       	cpc	r21, r27
     b88:	98 f4       	brcc	.+38     	; 0xbb0 <CheckPins+0x3f4>
           trans.hfe[PartReady] = c_hfe;
     b8a:	80 83       	st	Z, r24
     b8c:	91 83       	std	Z+1, r25	; 0x01
     b8e:	a2 83       	std	Z+2, r26	; 0x02
     b90:	b3 83       	std	Z+3, r27	; 0x03
           trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.hp1 - adc.tp1;	// Base Emitter Voltage common collector
     b92:	f7 01       	movw	r30, r14
     b94:	ee 0f       	add	r30, r30
     b96:	ff 1f       	adc	r31, r31
     b98:	e2 5b       	subi	r30, 0xB2	; 178
     b9a:	fe 4f       	sbci	r31, 0xFE	; 254
     b9c:	80 91 3d 01 	lds	r24, 0x013D
     ba0:	90 91 3e 01 	lds	r25, 0x013E
     ba4:	8a 19       	sub	r24, r10
     ba6:	9b 09       	sbc	r25, r11
     ba8:	88 19       	sub	r24, r8
     baa:	99 09       	sbc	r25, r9
     bac:	91 83       	std	Z+1, r25	; 0x01
     bae:	80 83       	st	Z, r24
        }
#endif

 
        if(PartFound != PART_THYRISTOR) {
     bb0:	80 91 07 01 	lds	r24, 0x0107
     bb4:	85 30       	cpi	r24, 0x05	; 5
     bb6:	09 f4       	brne	.+2      	; 0xbba <CheckPins+0x3fe>
     bb8:	68 c0       	rjmp	.+208    	; 0xc8a <CheckPins+0x4ce>
           if(adc.tp2 > 977) {
     bba:	ac 89       	ldd	r26, Y+20	; 0x14
     bbc:	bd 89       	ldd	r27, Y+21	; 0x15
     bbe:	e3 e0       	ldi	r30, 0x03	; 3
     bc0:	a2 3d       	cpi	r26, 0xD2	; 210
     bc2:	be 07       	cpc	r27, r30
     bc4:	30 f0       	brcs	.+12     	; 0xbd2 <CheckPins+0x416>
              //PNP-Transistor is found (Base voltage moves to VCC)
              PartFound = PART_TRANSISTOR;
     bc6:	82 e0       	ldi	r24, 0x02	; 2
     bc8:	80 93 07 01 	sts	0x0107, r24
              PartMode = PART_MODE_PNP;
     bcc:	80 93 06 01 	sts	0x0106, r24
     bd0:	56 c0       	rjmp	.+172    	; 0xc7e <CheckPins+0x4c2>
           } else {
              if((adc.lp_otr < 97) && (adc.lp1 > 2000)) {
     bd2:	29 85       	ldd	r18, Y+9	; 0x09
     bd4:	3a 85       	ldd	r19, Y+10	; 0x0a
     bd6:	21 36       	cpi	r18, 0x61	; 97
     bd8:	31 05       	cpc	r19, r1
     bda:	08 f0       	brcs	.+2      	; 0xbde <CheckPins+0x422>
     bdc:	50 c0       	rjmp	.+160    	; 0xc7e <CheckPins+0x4c2>
     bde:	89 89       	ldd	r24, Y+17	; 0x11
     be0:	9a 89       	ldd	r25, Y+18	; 0x12
     be2:	a7 e0       	ldi	r26, 0x07	; 7
     be4:	81 3d       	cpi	r24, 0xD1	; 209
     be6:	9a 07       	cpc	r25, r26
     be8:	08 f4       	brcc	.+2      	; 0xbec <CheckPins+0x430>
     bea:	49 c0       	rjmp	.+146    	; 0xc7e <CheckPins+0x4c2>
                 //is flow voltage low enough in the closed  state?
                 //(since D-Mode-FET would be by mistake detected as E-Mode )
        	 PartFound = PART_FET;		//P-Kanal-MOSFET is found (Basis/Gate moves not to VCC)
     bec:	83 e0       	ldi	r24, 0x03	; 3
     bee:	80 93 07 01 	sts	0x0107, r24
        	 PartMode = PART_MODE_P_E_MOS;
     bf2:	80 93 06 01 	sts	0x0106, r24
                 }
#else
                 //Switching of Drain is monitored with digital input
                 // Low level is specified up to 0.3 * VCC
                 // High level is specified above 0.6 * VCC
                 PinMSK = LoADCm & 7;
     bf6:	eb 80       	ldd	r14, Y+3	; 0x03
     bf8:	b7 e0       	ldi	r27, 0x07	; 7
     bfa:	eb 22       	and	r14, r27
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
     bfc:	82 2d       	mov	r24, r2
     bfe:	80 64       	ori	r24, 0x40	; 64
     c00:	80 93 7c 00 	sts	0x007C, r24
        	 gthvoltage = 1;			// round up ((1*4)/9)
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	90 93 57 01 	sts	0x0157, r25
     c0c:	80 93 56 01 	sts	0x0156, r24
        	 for(ii=0;ii<11;ii++) {
     c10:	40 e0       	ldi	r20, 0x00	; 0
        	    wdt_reset();
     c12:	a8 95       	wdr
        	    ChargePin10ms(TriPinRL,1);
     c14:	8d 2d       	mov	r24, r13
     c16:	61 e0       	ldi	r22, 0x01	; 1
     c18:	4e 8b       	std	Y+22, r20	; 0x16
     c1a:	0e 94 ab 01 	call	0x356	; 0x356 <ChargePin10ms>
                    R_DDR = LoPinRL | TriPinRH;		//switch R_H for Tristate-Pin (Basis) to GND
     c1e:	e8 89       	ldd	r30, Y+16	; 0x10
     c20:	e4 b9       	out	0x04, r30	; 4
     c22:	4e 89       	ldd	r20, Y+22	; 0x16
        	    while (!(ADC_PIN&PinMSK));		// Wait, until the MOSFET switches and Drain moves to VCC
     c24:	86 b1       	in	r24, 0x06	; 6
     c26:	8e 21       	and	r24, r14
     c28:	e9 f3       	breq	.-6      	; 0xc24 <CheckPins+0x468>
                    			// 1 is detected with more than 2.5V (up to 2.57V) with tests of mega168 and mega328
        	    R_DDR = LoPinRL;
     c2a:	fa 81       	ldd	r31, Y+2	; 0x02
     c2c:	f4 b9       	out	0x04, r31	; 4
        	    ADCSRA |= (1<<ADSC);		// Start Conversion
     c2e:	80 91 7a 00 	lds	r24, 0x007A
     c32:	80 64       	ori	r24, 0x40	; 64
     c34:	80 93 7a 00 	sts	0x007A, r24
        	    while (ADCSRA&(1<<ADSC));		// wait
     c38:	80 91 7a 00 	lds	r24, 0x007A
     c3c:	86 fd       	sbrc	r24, 6
     c3e:	fc cf       	rjmp	.-8      	; 0xc38 <CheckPins+0x47c>
      		    gthvoltage += (1023 - ADCW);	// Add Tristatepin-Voltage
     c40:	20 91 78 00 	lds	r18, 0x0078
     c44:	30 91 79 00 	lds	r19, 0x0079
     c48:	80 91 56 01 	lds	r24, 0x0156
     c4c:	90 91 57 01 	lds	r25, 0x0157
     c50:	81 50       	subi	r24, 0x01	; 1
     c52:	9c 4f       	sbci	r25, 0xFC	; 252
     c54:	82 1b       	sub	r24, r18
     c56:	93 0b       	sbc	r25, r19
     c58:	90 93 57 01 	sts	0x0157, r25
     c5c:	80 93 56 01 	sts	0x0156, r24
                 // Low level is specified up to 0.3 * VCC
                 // High level is specified above 0.6 * VCC
                 PinMSK = LoADCm & 7;
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
        	 gthvoltage = 1;			// round up ((1*4)/9)
        	 for(ii=0;ii<11;ii++) {
     c60:	4f 5f       	subi	r20, 0xFF	; 255
     c62:	4b 30       	cpi	r20, 0x0B	; 11
     c64:	b1 f6       	brne	.-84     	; 0xc12 <CheckPins+0x456>
        	    ADCSRA |= (1<<ADSC);		// Start Conversion
        	    while (ADCSRA&(1<<ADSC));		// wait
      		    gthvoltage += (1023 - ADCW);	// Add Tristatepin-Voltage
                 }
#endif
                 gthvoltage *= 4;		// is equal to 44*ADCW
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
                 gthvoltage /= 9;		// gives resolution in mV
     c6e:	69 e0       	ldi	r22, 0x09	; 9
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <__udivmodhi4>
     c76:	70 93 57 01 	sts	0x0157, r23
     c7a:	60 93 56 01 	sts	0x0156, r22
              }
           }
           trans.b = TristatePin;
     c7e:	20 92 52 01 	sts	0x0152, r2
           trans.c = LowPin;
     c82:	30 92 53 01 	sts	0x0153, r3
           trans.e = HighPin;
     c86:	10 93 54 01 	sts	0x0154, r17
        }  // end if PartFound != PART_THYRISTOR
    } // end component has current => PNP

#ifdef COMMON_COLLECTOR
    // Low-Pin=RL- HighPin=VCC
    R_DDR = LoPinRL | TriPinRL;
     c8a:	2f 85       	ldd	r18, Y+15	; 0x0f
     c8c:	24 b9       	out	0x04, r18	; 4
    R_PORT = TriPinRL;			// TriPin=RL+  NPN with common Collector
     c8e:	d5 b8       	out	0x05, r13	; 5
    adc.lp1 = W5msReadADC(LowPin);	// voltage at Emitter resistor
     c90:	83 2d       	mov	r24, r3
     c92:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
     c96:	2c 01       	movw	r4, r24
    adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     c98:	80 91 3d 01 	lds	r24, 0x013D
     c9c:	90 91 3e 01 	lds	r25, 0x013E
     ca0:	9a 8b       	std	Y+18, r25	; 0x12
     ca2:	89 8b       	std	Y+17, r24	; 0x11
     ca4:	82 2d       	mov	r24, r2
     ca6:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
     caa:	a9 89       	ldd	r26, Y+17	; 0x11
     cac:	ba 89       	ldd	r27, Y+18	; 0x12
     cae:	a8 1b       	sub	r26, r24
     cb0:	b9 0b       	sbc	r27, r25
     cb2:	ba 8b       	std	Y+18, r27	; 0x12
     cb4:	a9 8b       	std	Y+17, r26	; 0x11
    if (adc.tp1 < 10) {
     cb6:	aa 30       	cpi	r26, 0x0A	; 10
     cb8:	b1 05       	cpc	r27, r1
     cba:	b0 f5       	brcc	.+108    	; 0xd28 <CheckPins+0x56c>
       R_DDR = LoPinRL | TriPinRH;
     cbc:	8a 81       	ldd	r24, Y+2	; 0x02
     cbe:	80 2b       	or	r24, r16
     cc0:	84 b9       	out	0x04, r24	; 4
       R_PORT = TriPinRH;		// Tripin=RH+
     cc2:	05 b9       	out	0x05, r16	; 5
       adc.lp1 = W5msReadADC(LowPin);
     cc4:	83 2d       	mov	r24, r3
     cc6:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
     cca:	2c 01       	movw	r4, r24
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     ccc:	e0 91 3d 01 	lds	r30, 0x013D
     cd0:	f0 91 3e 01 	lds	r31, 0x013E
     cd4:	fa 8b       	std	Y+18, r31	; 0x12
     cd6:	e9 8b       	std	Y+17, r30	; 0x11
     cd8:	82 2d       	mov	r24, r2
     cda:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
     cde:	29 89       	ldd	r18, Y+17	; 0x11
     ce0:	3a 89       	ldd	r19, Y+18	; 0x12
     ce2:	28 1b       	sub	r18, r24
     ce4:	39 0b       	sbc	r19, r25
     ce6:	3a 8b       	std	Y+18, r19	; 0x12
     ce8:	29 8b       	std	Y+17, r18	; 0x11
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     cea:	42 01       	movw	r8, r4
     cec:	aa 24       	eor	r10, r10
     cee:	bb 24       	eor	r11, r11
     cf0:	20 91 02 01 	lds	r18, 0x0102
     cf4:	30 91 03 01 	lds	r19, 0x0103
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	60 e6       	ldi	r22, 0x60	; 96
     cfe:	77 eb       	ldi	r23, 0xB7	; 183
     d00:	87 e4       	ldi	r24, 0x47	; 71
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
     d08:	c5 01       	movw	r24, r10
     d0a:	b4 01       	movw	r22, r8
     d0c:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
     d10:	a9 89       	ldd	r26, Y+17	; 0x11
     d12:	ba 89       	ldd	r27, Y+18	; 0x12
     d14:	9d 01       	movw	r18, r26
     d16:	40 e0       	ldi	r20, 0x00	; 0
     d18:	50 e0       	ldi	r21, 0x00	; 0
       R_DDR = LoPinRL | TriPinRH;
       R_PORT = TriPinRH;		// Tripin=RH+
       adc.lp1 = W5msReadADC(LowPin);
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     d1a:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
     d1e:	2c 83       	std	Y+4, r18	; 0x04
     d20:	3d 83       	std	Y+5, r19	; 0x05
     d22:	4e 83       	std	Y+6, r20	; 0x06
     d24:	5f 83       	std	Y+7, r21	; 0x07
     d26:	0f c0       	rjmp	.+30     	; 0xd46 <CheckPins+0x58a>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
 #else
       c_hfe = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
    } else {
       c_hfe = (adc.lp1 - adc.tp1) / adc.tp1;
     d28:	c2 01       	movw	r24, r4
     d2a:	e9 89       	ldd	r30, Y+17	; 0x11
     d2c:	fa 89       	ldd	r31, Y+18	; 0x12
     d2e:	8e 1b       	sub	r24, r30
     d30:	9f 0b       	sbc	r25, r31
     d32:	bf 01       	movw	r22, r30
     d34:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <__udivmodhi4>
     d38:	cb 01       	movw	r24, r22
     d3a:	a0 e0       	ldi	r26, 0x00	; 0
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	8c 83       	std	Y+4, r24	; 0x04
     d40:	9d 83       	std	Y+5, r25	; 0x05
     d42:	ae 83       	std	Y+6, r26	; 0x06
     d44:	bf 83       	std	Y+7, r27	; 0x07
       lcd_string(utoa(adc.tp1,outval,10));
       wait_about1s();
#endif
#endif
    //Tristate (can be Base) to VCC, Test if NPN
    ADC_DDR = LoADCm;		//Low-Pin to output 0V
     d46:	9b 81       	ldd	r25, Y+3	; 0x03
     d48:	97 b9       	out	0x07, r25	; 7
    ADC_PORT = TXD_VAL;			//switch Low-Pin to GND
     d4a:	88 e0       	ldi	r24, 0x08	; 8
     d4c:	88 b9       	out	0x08, r24	; 8
    R_DDR = TriPinRL | HiPinRL;		//RL port for High-Pin and Tristate-Pin to output
     d4e:	ab 85       	ldd	r26, Y+11	; 0x0b
     d50:	a4 b9       	out	0x04, r26	; 4
    R_PORT = TriPinRL | HiPinRL;	//RL port for High-Pin and Tristate-Pin to Vcc
     d52:	a5 b9       	out	0x05, r26	; 5
    adc.hp1 = W5msReadADC(HighPin);	//measure voltage at High-Pin  (Collector)
     d54:	81 2f       	mov	r24, r17
     d56:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
    if(adc.hp1 < 1600) {
     d5a:	b6 e0       	ldi	r27, 0x06	; 6
     d5c:	80 34       	cpi	r24, 0x40	; 64
     d5e:	9b 07       	cpc	r25, r27
     d60:	08 f0       	brcs	.+2      	; 0xd64 <CheckPins+0x5a8>
     d62:	4d c1       	rjmp	.+666    	; 0xffe <CheckPins+0x842>
       lcd_data('N');
       lcd_testpin(HighPin);
       lcd_space();
       wait_about1s();
#endif
       if(PartReady==1) {
     d64:	80 91 04 01 	lds	r24, 0x0104
     d68:	81 30       	cpi	r24, 0x01	; 1
     d6a:	09 f4       	brne	.+2      	; 0xd6e <CheckPins+0x5b2>
     d6c:	b5 c1       	rjmp	.+874    	; 0x10d8 <CheckPins+0x91c>
          goto widmes;
       }

       //Test auf Thyristor:
       //Gate discharge
       ChargePin10ms(TriPinRL,0);	//Tristate-Pin (Gate) across R_L 10ms to GND
     d6e:	8d 2d       	mov	r24, r13
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	0e 94 ab 01 	call	0x356	; 0x356 <ChargePin10ms>
       adc.hp3 = W5msReadADC(HighPin);	//read voltage at High-Pin (probably Anode) again
     d76:	81 2f       	mov	r24, r17
     d78:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
     d7c:	7c 01       	movw	r14, r24
					//current should still flow, if not,
					// no Thyristor or holding current to low 
		 	
       R_PORT = 0;			//switch R_L for High-Pin (probably Anode) to GND (turn off)
     d7e:	15 b8       	out	0x05, r1	; 5
       wait_about5ms();
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	0e 94 bb 03 	call	0x776	; 0x776 <sleep_5ms>
       R_PORT = HiPinRL;		//switch R_L for High-Pin (probably Anode) again to VCC
     d88:	c5 b8       	out	0x05, r12	; 5
       adc.hp2 = W5msReadADC(HighPin);	//measure voltage at the High-Pin (probably Anode) again
     d8a:	81 2f       	mov	r24, r17
     d8c:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
       if((adc.hp3 < 1600) && (adc.hp2 > 4400)) {
     d90:	e0 e4       	ldi	r30, 0x40	; 64
     d92:	ee 16       	cp	r14, r30
     d94:	e6 e0       	ldi	r30, 0x06	; 6
     d96:	fe 06       	cpc	r15, r30
     d98:	08 f0       	brcs	.+2      	; 0xd9c <CheckPins+0x5e0>
     d9a:	47 c0       	rjmp	.+142    	; 0xe2a <CheckPins+0x66e>
     d9c:	f1 e1       	ldi	r31, 0x11	; 17
     d9e:	81 33       	cpi	r24, 0x31	; 49
     da0:	9f 07       	cpc	r25, r31
     da2:	08 f4       	brcc	.+2      	; 0xda6 <CheckPins+0x5ea>
     da4:	42 c0       	rjmp	.+132    	; 0xe2a <CheckPins+0x66e>
          //if the holding current was switched off the thyristor must be switched off too. 
          //if Thyristor was still swiched on, if gate was switched off => Thyristor
          PartFound = PART_THYRISTOR;
     da6:	85 e0       	ldi	r24, 0x05	; 5
     da8:	80 93 07 01 	sts	0x0107, r24
          //Test if Triac
          R_DDR = 0;
     dac:	14 b8       	out	0x04, r1	; 4
          R_PORT = 0;
     dae:	15 b8       	out	0x05, r1	; 5
          ADC_PORT = LoADCp;	//Low-Pin fix to VCC
     db0:	2b 81       	ldd	r18, Y+3	; 0x03
     db2:	28 b9       	out	0x08, r18	; 8
          wait_about5ms();
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 bb 03 	call	0x776	; 0x776 <sleep_5ms>
          R_DDR = HiPinRL;		//switch R_L port HighPin to output (GND)
     dbc:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) > 244) {
     dbe:	81 2f       	mov	r24, r17
     dc0:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
     dc4:	85 3f       	cpi	r24, 0xF5	; 245
     dc6:	91 05       	cpc	r25, r1
     dc8:	08 f0       	brcs	.+2      	; 0xdcc <CheckPins+0x610>
     dca:	13 c1       	rjmp	.+550    	; 0xff2 <CheckPins+0x836>
             goto savenresult;		//measure voltage at the  High-Pin (probably A2); if too high:
                                	//component has current => kein Triac
          }
          R_DDR = HiPinRL | TriPinRL;	//switch R_L port for TristatePin (Gate) to output (GND) => Triac should be triggered 
     dcc:	3b 85       	ldd	r19, Y+11	; 0x0b
     dce:	34 b9       	out	0x04, r19	; 4
          if(W5msReadADC(TristatePin) < 977) {
     dd0:	82 2d       	mov	r24, r2
     dd2:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
     dd6:	a3 e0       	ldi	r26, 0x03	; 3
     dd8:	81 3d       	cpi	r24, 0xD1	; 209
     dda:	9a 07       	cpc	r25, r26
     ddc:	08 f4       	brcc	.+2      	; 0xde0 <CheckPins+0x624>
     dde:	09 c1       	rjmp	.+530    	; 0xff2 <CheckPins+0x836>
             goto savenresult; 		//measure voltage at the Tristate-Pin (probably Gate) ;
                              		// if to low, abort 
          }
          if(ReadADC(HighPin) < 733) {
     de0:	81 2f       	mov	r24, r17
     de2:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
     de6:	b2 e0       	ldi	r27, 0x02	; 2
     de8:	8d 3d       	cpi	r24, 0xDD	; 221
     dea:	9b 07       	cpc	r25, r27
     dec:	08 f4       	brcc	.+2      	; 0xdf0 <CheckPins+0x634>
     dee:	01 c1       	rjmp	.+514    	; 0xff2 <CheckPins+0x836>
             goto savenresult; 		//component has no current => no Triac => abort
          }
          R_DDR = HiPinRL;		//TristatePin (Gate) to input 
     df0:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) < 733) {
     df2:	81 2f       	mov	r24, r17
     df4:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
     df8:	e2 e0       	ldi	r30, 0x02	; 2
     dfa:	8d 3d       	cpi	r24, 0xDD	; 221
     dfc:	9e 07       	cpc	r25, r30
     dfe:	08 f4       	brcc	.+2      	; 0xe02 <CheckPins+0x646>
     e00:	f8 c0       	rjmp	.+496    	; 0xff2 <CheckPins+0x836>
             goto savenresult; 		//component has no current without base current => no Triac => abort
          }
          R_PORT = HiPinRL;		//switch R_L port for HighPin to VCC => switch off holding current 
     e02:	c5 b8       	out	0x05, r12	; 5
          wait_about5ms();
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 bb 03 	call	0x776	; 0x776 <sleep_5ms>
          R_PORT = 0;			//switch R_L port for HighPin again to GND; Triac should now switched off
     e0c:	15 b8       	out	0x05, r1	; 5
          if(W5msReadADC(HighPin) > 244) {
     e0e:	81 2f       	mov	r24, r17
     e10:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
     e14:	85 3f       	cpi	r24, 0xF5	; 245
     e16:	91 05       	cpc	r25, r1
     e18:	08 f0       	brcs	.+2      	; 0xe1c <CheckPins+0x660>
     e1a:	eb c0       	rjmp	.+470    	; 0xff2 <CheckPins+0x836>
             goto savenresult;		//measure voltage at the High-Pin (probably A2) ;
                                	//if to high, component is not switched off => no Triac, abort
         }
         PartFound = PART_TRIAC;
     e1c:	84 e0       	ldi	r24, 0x04	; 4
     e1e:	80 93 07 01 	sts	0x0107, r24
         PartReady = 1;
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	80 93 04 01 	sts	0x0104, r24
         goto savenresult;
     e28:	e4 c0       	rjmp	.+456    	; 0xff2 <CheckPins+0x836>
        }
      //Test if NPN Transistor or MOSFET
      // ADC_DDR = LoADCm;	//Low-Pin to output 0V
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
     e2a:	0c 29       	or	r16, r12
     e2c:	04 b9       	out	0x04, r16	; 4
      R_PORT = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to VCC
     e2e:	05 b9       	out	0x05, r16	; 5
      wait_about50ms();
     e30:	8a e0       	ldi	r24, 0x0A	; 10
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 bb 03 	call	0x776	; 0x776 <sleep_5ms>
      adc.hp2 = ADCconfig.U_AVCC - ReadADC(HighPin);	//measure the voltage at the collector resistor 
     e38:	60 90 3d 01 	lds	r6, 0x013D
     e3c:	70 90 3e 01 	lds	r7, 0x013E
     e40:	81 2f       	mov	r24, r17
     e42:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
     e46:	68 1a       	sub	r6, r24
     e48:	79 0a       	sbc	r7, r25
      adc.tp2 = ADCconfig.U_AVCC - ReadADC(TristatePin);	//measure the voltage at the base resistor 
     e4a:	a0 90 3d 01 	lds	r10, 0x013D
     e4e:	b0 90 3e 01 	lds	r11, 0x013E
     e52:	82 2d       	mov	r24, r2
     e54:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
     e58:	a8 1a       	sub	r10, r24
     e5a:	b9 0a       	sbc	r11, r25
       lcd_space();
       lcd_data('T');
       lcd_data('P');
       lcd_string(utoa(adc.tp2,outval,10));
#endif
      if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     e5c:	80 91 07 01 	lds	r24, 0x0107
     e60:	82 50       	subi	r24, 0x02	; 2
     e62:	82 30       	cpi	r24, 0x02	; 2
     e64:	18 f4       	brcc	.+6      	; 0xe6c <CheckPins+0x6b0>
         PartReady = 1;	//check, if test is already done once
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	80 93 04 01 	sts	0x0104, r24
      }
      trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.tp2 - ReadADC(LowPin);
     e6c:	80 90 04 01 	lds	r8, 0x0104
     e70:	99 24       	eor	r9, r9
     e72:	e0 90 3d 01 	lds	r14, 0x013D
     e76:	f0 90 3e 01 	lds	r15, 0x013E
     e7a:	ea 18       	sub	r14, r10
     e7c:	fb 08       	sbc	r15, r11
     e7e:	83 2d       	mov	r24, r3
     e80:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
     e84:	f4 01       	movw	r30, r8
     e86:	ee 0f       	add	r30, r30
     e88:	ff 1f       	adc	r31, r31
     e8a:	e2 5b       	subi	r30, 0xB2	; 178
     e8c:	fe 4f       	sbci	r31, 0xFE	; 254
     e8e:	e8 1a       	sub	r14, r24
     e90:	f9 0a       	sbc	r15, r25
     e92:	f1 82       	std	Z+1, r15	; 0x01
     e94:	e0 82       	st	Z, r14

      //compute current amplification factor for common Emitter
      //hFE = B = Collector current / Base current
      if(adc.tp2 < 53) {
     e96:	f5 e3       	ldi	r31, 0x35	; 53
     e98:	af 16       	cp	r10, r31
     e9a:	b1 04       	cpc	r11, r1
     e9c:	18 f4       	brcc	.+6      	; 0xea4 <CheckPins+0x6e8>
#if DebugOut == 5
         lcd_data('<');
         lcd_data('5');
         lcd_data('3');
#endif
         adc.tp2 = 53;
     e9e:	75 e3       	ldi	r23, 0x35	; 53
     ea0:	a7 2e       	mov	r10, r23
     ea2:	b1 2c       	mov	r11, r1
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     ea4:	e0 90 04 01 	lds	r14, 0x0104
     ea8:	ff 24       	eor	r15, r15
     eaa:	c3 01       	movw	r24, r6
     eac:	a0 e0       	ldi	r26, 0x00	; 0
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	8b 87       	std	Y+11, r24	; 0x0b
     eb2:	9c 87       	std	Y+12, r25	; 0x0c
     eb4:	ad 87       	std	Y+13, r26	; 0x0d
     eb6:	be 87       	std	Y+14, r27	; 0x0e
     eb8:	20 91 08 01 	lds	r18, 0x0108
     ebc:	30 91 09 01 	lds	r19, 0x0109
     ec0:	40 e0       	ldi	r20, 0x00	; 0
     ec2:	50 e0       	ldi	r21, 0x00	; 0
     ec4:	60 e6       	ldi	r22, 0x60	; 96
     ec6:	77 eb       	ldi	r23, 0xB7	; 183
     ec8:	87 e4       	ldi	r24, 0x47	; 71
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
     ed0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ed2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ed4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed8:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp2;	
     edc:	95 01       	movw	r18, r10
     ede:	40 e0       	ldi	r20, 0x00	; 0
     ee0:	50 e0       	ldi	r21, 0x00	; 0
     ee2:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
#endif
         adc.tp2 = 53;
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     ee6:	f7 01       	movw	r30, r14
     ee8:	ee 0f       	add	r30, r30
     eea:	ff 1f       	adc	r31, r31
     eec:	ee 0f       	add	r30, r30
     eee:	ff 1f       	adc	r31, r31
     ef0:	ea 5b       	subi	r30, 0xBA	; 186
     ef2:	fe 4f       	sbci	r31, 0xFE	; 254
     ef4:	20 83       	st	Z, r18
     ef6:	31 83       	std	Z+1, r19	; 0x01
     ef8:	42 83       	std	Z+2, r20	; 0x02
     efa:	53 83       	std	Z+3, r21	; 0x03
      trans.hfe[PartReady] = ((adc.hp2 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
#endif
#ifdef COMMON_COLLECTOR
       //compare current amplification factor for common Collector (Emitter follower)
       // hFE = (Emitterstrom - Basisstrom) / Basisstrom
       if (c_hfe >  trans.hfe[PartReady]) {
     efc:	8c 81       	ldd	r24, Y+4	; 0x04
     efe:	9d 81       	ldd	r25, Y+5	; 0x05
     f00:	ae 81       	ldd	r26, Y+6	; 0x06
     f02:	bf 81       	ldd	r27, Y+7	; 0x07
     f04:	28 17       	cp	r18, r24
     f06:	39 07       	cpc	r19, r25
     f08:	4a 07       	cpc	r20, r26
     f0a:	5b 07       	cpc	r21, r27
     f0c:	a8 f4       	brcc	.+42     	; 0xf38 <CheckPins+0x77c>
          trans.hfe[PartReady] = c_hfe;
     f0e:	80 83       	st	Z, r24
     f10:	91 83       	std	Z+1, r25	; 0x01
     f12:	a2 83       	std	Z+2, r26	; 0x02
     f14:	b3 83       	std	Z+3, r27	; 0x03
          trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.lp1 - adc.tp1;
     f16:	f7 01       	movw	r30, r14
     f18:	ee 0f       	add	r30, r30
     f1a:	ff 1f       	adc	r31, r31
     f1c:	e2 5b       	subi	r30, 0xB2	; 178
     f1e:	fe 4f       	sbci	r31, 0xFE	; 254
     f20:	80 91 3d 01 	lds	r24, 0x013D
     f24:	90 91 3e 01 	lds	r25, 0x013E
     f28:	84 19       	sub	r24, r4
     f2a:	95 09       	sbc	r25, r5
     f2c:	a9 89       	ldd	r26, Y+17	; 0x11
     f2e:	ba 89       	ldd	r27, Y+18	; 0x12
     f30:	8a 1b       	sub	r24, r26
     f32:	9b 0b       	sbc	r25, r27
     f34:	91 83       	std	Z+1, r25	; 0x01
     f36:	80 83       	st	Z, r24
       }
#endif

      if(adc.tp2 > 2557) {		// Basis-voltage R_H is low enough
     f38:	be ef       	ldi	r27, 0xFE	; 254
     f3a:	ab 16       	cp	r10, r27
     f3c:	b9 e0       	ldi	r27, 0x09	; 9
     f3e:	bb 06       	cpc	r11, r27
     f40:	38 f0       	brcs	.+14     	; 0xf50 <CheckPins+0x794>
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
     f42:	82 e0       	ldi	r24, 0x02	; 2
     f44:	80 93 07 01 	sts	0x0107, r24
         PartMode = PART_MODE_NPN;
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	80 93 06 01 	sts	0x0106, r24
     f4e:	51 c0       	rjmp	.+162    	; 0xff2 <CheckPins+0x836>
      } else { // Basis has low current
         if((adc.lp_otr < 97) && (adc.hp2 > 3400)) {
     f50:	e9 85       	ldd	r30, Y+9	; 0x09
     f52:	fa 85       	ldd	r31, Y+10	; 0x0a
     f54:	e1 36       	cpi	r30, 0x61	; 97
     f56:	f1 05       	cpc	r31, r1
     f58:	08 f0       	brcs	.+2      	; 0xf5c <CheckPins+0x7a0>
     f5a:	4b c0       	rjmp	.+150    	; 0xff2 <CheckPins+0x836>
     f5c:	f9 e4       	ldi	r31, 0x49	; 73
     f5e:	6f 16       	cp	r6, r31
     f60:	fd e0       	ldi	r31, 0x0D	; 13
     f62:	7f 06       	cpc	r7, r31
     f64:	08 f4       	brcc	.+2      	; 0xf68 <CheckPins+0x7ac>
     f66:	45 c0       	rjmp	.+138    	; 0xff2 <CheckPins+0x836>
            //if flow voltage in switched off mode low enough?
            //(since D-Mode-FET will be detected in error as E-Mode )
            PartFound = PART_FET;	//N-Kanal-MOSFET is found (Basis/Gate will Not be pulled down)
     f68:	83 e0       	ldi	r24, 0x03	; 3
     f6a:	80 93 07 01 	sts	0x0107, r24
            PartMode = PART_MODE_N_E_MOS;
     f6e:	82 e0       	ldi	r24, 0x02	; 2
     f70:	80 93 06 01 	sts	0x0106, r24
            }
#else
            //Switching of Drain is monitored with digital input
            // Low level is specified up to 0.3 * VCC
            // High level is specified above 0.6 * VCC
            PinMSK = HiADCm & 7;
     f74:	e9 80       	ldd	r14, Y+1	; 0x01
     f76:	27 e0       	ldi	r18, 0x07	; 7
     f78:	e2 22       	and	r14, r18
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
     f7a:	82 2d       	mov	r24, r2
     f7c:	80 64       	ori	r24, 0x40	; 64
     f7e:	80 93 7c 00 	sts	0x007C, r24
            gthvoltage = 1;			// round up ((1*4)/9)
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	90 93 57 01 	sts	0x0157, r25
     f8a:	80 93 56 01 	sts	0x0156, r24
     f8e:	4b e0       	ldi	r20, 0x0B	; 11
     f90:	a4 2e       	mov	r10, r20
            for(ii=0;ii<11;ii++) {
            	wdt_reset();
     f92:	a8 95       	wdr
            	ChargePin10ms(TriPinRL,0);	// discharge Gate 10ms with RL 
     f94:	8d 2d       	mov	r24, r13
     f96:	60 e0       	ldi	r22, 0x00	; 0
     f98:	0e 94 ab 01 	call	0x356	; 0x356 <ChargePin10ms>
                R_DDR = HiPinRL | TriPinRH;	// slowly charge Gate 
     f9c:	04 b9       	out	0x04, r16	; 4
                R_PORT = HiPinRL | TriPinRH;
     f9e:	05 b9       	out	0x05, r16	; 5
            	while ((ADC_PIN&PinMSK));	// Wait, until the MOSFET switch and Drain moved to low 
     fa0:	86 b1       	in	r24, 0x06	; 6
     fa2:	8e 21       	and	r24, r14
     fa4:	e9 f7       	brne	.-6      	; 0xfa0 <CheckPins+0x7e4>
                		// 0 is detected with input voltage of 2.12V to 2.24V (tested with mega168 & mega328)
                R_DDR = HiPinRL;		// switch off current
     fa6:	c4 b8       	out	0x04, r12	; 4
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
     fa8:	80 91 7a 00 	lds	r24, 0x007A
     fac:	80 64       	ori	r24, 0x40	; 64
     fae:	80 93 7a 00 	sts	0x007A, r24
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
     fb2:	80 91 7a 00 	lds	r24, 0x007A
     fb6:	86 fd       	sbrc	r24, 6
     fb8:	fc cf       	rjmp	.-8      	; 0xfb2 <CheckPins+0x7f6>
            	gthvoltage += ADCW;		// add result of ADC
     fba:	80 91 78 00 	lds	r24, 0x0078
     fbe:	90 91 79 00 	lds	r25, 0x0079
     fc2:	20 91 56 01 	lds	r18, 0x0156
     fc6:	30 91 57 01 	lds	r19, 0x0157
     fca:	82 0f       	add	r24, r18
     fcc:	93 1f       	adc	r25, r19
     fce:	90 93 57 01 	sts	0x0157, r25
     fd2:	80 93 56 01 	sts	0x0156, r24
     fd6:	aa 94       	dec	r10
            // High level is specified above 0.6 * VCC
            PinMSK = HiADCm & 7;
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
            gthvoltage = 1;			// round up ((1*4)/9)
            for(ii=0;ii<11;ii++) {
     fd8:	e1 f6       	brne	.-72     	; 0xf92 <CheckPins+0x7d6>
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
            	gthvoltage += ADCW;		// add result of ADC
            }
#endif
            gthvoltage *= 4;	//is equal to 44 * ADCW
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
            gthvoltage /= 9;	//scale to mV
     fe2:	69 e0       	ldi	r22, 0x09	; 9
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <__udivmodhi4>
     fea:	70 93 57 01 	sts	0x0157, r23
     fee:	60 93 56 01 	sts	0x0156, r22
         }
      }
savenresult:
      trans.b = TristatePin;	// save Pin-constellation
     ff2:	20 92 52 01 	sts	0x0152, r2
      trans.c = HighPin;
     ff6:	10 93 53 01 	sts	0x0153, r17
      trans.e = LowPin;
     ffa:	30 92 54 01 	sts	0x0154, r3
   } // end component conduct => npn
   ADC_DDR = TXD_MSK;		// switch all ADC-Ports to input
     ffe:	88 e0       	ldi	r24, 0x08	; 8
    1000:	87 b9       	out	0x07, r24	; 7
   ADC_PORT = TXD_VAL;		// switch all ADC-Ports to 0 (no Pull up)
    1002:	88 b9       	out	0x08, r24	; 8
   //Fertig
   //end das component has no connection between HighPin and LowPin
   goto widmes;
    1004:	69 c0       	rjmp	.+210    	; 0x10d8 <CheckPins+0x91c>
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
    1006:	88 e0       	ldi	r24, 0x08	; 8
    1008:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;	//Low-Pin fix to GND
    100a:	3b 81       	ldd	r19, Y+3	; 0x03
    100c:	37 b9       	out	0x07, r19	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    100e:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
    1010:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
    1012:	8d 2d       	mov	r24, r13
    1014:	61 e0       	ldi	r22, 0x01	; 1
    1016:	0e 94 ab 01 	call	0x356	; 0x356 <ChargePin10ms>
  adc.lp_otr = W5msReadADC(HighPin) - ReadADC(LowPin);
    101a:	81 2f       	mov	r24, r17
    101c:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
    1020:	4c 01       	movw	r8, r24
    1022:	83 2d       	mov	r24, r3
    1024:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
    1028:	88 1a       	sub	r8, r24
    102a:	99 0a       	sbc	r9, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
    102c:	88 85       	ldd	r24, Y+8	; 0x08
    102e:	84 b9       	out	0x04, r24	; 4
  R_PORT = HiPinRH;
    1030:	85 b9       	out	0x05, r24	; 5
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
    1032:	81 2f       	mov	r24, r17
    1034:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
    1038:	5c 01       	movw	r10, r24

  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    103a:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
    103c:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
    103e:	8d 2d       	mov	r24, r13
    1040:	60 e0       	ldi	r22, 0x00	; 0
    1042:	0e 94 ab 01 	call	0x356	; 0x356 <ChargePin10ms>
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
    1046:	81 2f       	mov	r24, r17
    1048:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
    104c:	7c 01       	movw	r14, r24
    104e:	83 2d       	mov	r24, r3
    1050:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
    1054:	e8 1a       	sub	r14, r24
    1056:	f9 0a       	sbc	r15, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
    1058:	98 85       	ldd	r25, Y+8	; 0x08
    105a:	94 b9       	out	0x04, r25	; 4
  R_PORT = HiPinRH;
    105c:	95 b9       	out	0x05, r25	; 5
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
    105e:	81 2f       	mov	r24, r17
    1060:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
    1064:	e8 14       	cp	r14, r8
    1066:	f9 04       	cpc	r15, r9
    1068:	18 f0       	brcs	.+6      	; 0x1070 <CheckPins+0x8b4>
  R_PORT = HiPinRL;
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
  R_PORT = HiPinRH;
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
    106a:	a8 2e       	mov	r10, r24
    106c:	b9 2e       	mov	r11, r25
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
    106e:	47 01       	movw	r8, r14
  lcd_string(utoa(adc.hp3,outval,10));
  lcd_space();
  wait_about1s();
#endif

  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
    1070:	c4 01       	movw	r24, r8
    1072:	87 59       	subi	r24, 0x97	; 151
    1074:	90 40       	sbci	r25, 0x00	; 0
    1076:	a1 e1       	ldi	r26, 0x11	; 17
    1078:	89 38       	cpi	r24, 0x89	; 137
    107a:	9a 07       	cpc	r25, r26
    107c:	68 f5       	brcc	.+90     	; 0x10d8 <CheckPins+0x91c>
    107e:	c5 01       	movw	r24, r10
    1080:	23 e0       	ldi	r18, 0x03	; 3
    1082:	96 95       	lsr	r25
    1084:	87 95       	ror	r24
    1086:	2a 95       	dec	r18
    1088:	e1 f7       	brne	.-8      	; 0x1082 <CheckPins+0x8c6>
    108a:	8a 0d       	add	r24, r10
    108c:	9b 1d       	adc	r25, r11
    108e:	88 15       	cp	r24, r8
    1090:	99 05       	cpc	r25, r9
    1092:	10 f5       	brcc	.+68     	; 0x10d8 <CheckPins+0x91c>
    1094:	03 e0       	ldi	r16, 0x03	; 3
    1096:	aa 0c       	add	r10, r10
    1098:	bb 1c       	adc	r11, r11
    109a:	0a 95       	dec	r16
    109c:	e1 f7       	brne	.-8      	; 0x1096 <CheckPins+0x8da>
    109e:	8a 14       	cp	r8, r10
    10a0:	9b 04       	cpc	r9, r11
    10a2:	d0 f4       	brcc	.+52     	; 0x10d8 <CheckPins+0x91c>
     //voltage is above 0,15V and below 4,64V => Ok
     if((PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
    10a4:	80 91 07 01 	lds	r24, 0x0107
    10a8:	88 23       	and	r24, r24
    10aa:	11 f0       	breq	.+4      	; 0x10b0 <CheckPins+0x8f4>
    10ac:	86 30       	cpi	r24, 0x06	; 6
    10ae:	19 f4       	brne	.+6      	; 0x10b6 <CheckPins+0x8fa>
        PartFound = PART_DIODE;	//mark for diode only, if no other component is found
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	80 93 07 01 	sts	0x0107, r24
				//since there is a problem with Transistors with a protection diode
#if DebugOut == 4
        lcd_data('D');
#endif
     }
     diodes[NumOfDiodes].Anode = HighPin;
    10b6:	80 91 05 01 	lds	r24, 0x0105
    10ba:	e8 2f       	mov	r30, r24
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	ee 0f       	add	r30, r30
    10c0:	ff 1f       	adc	r31, r31
    10c2:	ee 0f       	add	r30, r30
    10c4:	ff 1f       	adc	r31, r31
    10c6:	e4 59       	subi	r30, 0x94	; 148
    10c8:	fe 4f       	sbci	r31, 0xFE	; 254
    10ca:	10 83       	st	Z, r17
     diodes[NumOfDiodes].Cathode = LowPin;
    10cc:	31 82       	std	Z+1, r3	; 0x01
     diodes[NumOfDiodes].Voltage = adc.hp1;	// voltage in Millivolt 
    10ce:	93 82       	std	Z+3, r9	; 0x03
    10d0:	82 82       	std	Z+2, r8	; 0x02
     NumOfDiodes++;
    10d2:	8f 5f       	subi	r24, 0xFF	; 255
    10d4:	80 93 05 01 	sts	0x0105, r24
#if DebugOut == 4
  lcd_data(NumOfDiodes+'0');
#endif

widmes:
  if (NumOfDiodes > 0) goto clean_ports;
    10d8:	80 91 05 01 	lds	r24, 0x0105
    10dc:	88 23       	and	r24, r24
    10de:	09 f0       	breq	.+2      	; 0x10e2 <CheckPins+0x926>
    10e0:	12 c2       	rjmp	.+1060   	; 0x1506 <CheckPins+0xd4a>
  // resistor measurement
  wdt_reset();
    10e2:	a8 95       	wdr
// U_SCALE can be set to 4 for better resolution of ReadADC result
#if U_SCALE != 1
  ADCconfig.U_AVCC *= U_SCALE;	// scale to higher resolution, mV scale is not required
    10e4:	80 91 3d 01 	lds	r24, 0x013D
    10e8:	90 91 3e 01 	lds	r25, 0x013E
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	90 93 3e 01 	sts	0x013E, r25
    10f8:	80 93 3d 01 	sts	0x013D, r24
  ADCconfig.U_Bandgap *= U_SCALE;
    10fc:	80 91 3b 01 	lds	r24, 0x013B
    1100:	90 91 3c 01 	lds	r25, 0x013C
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	90 93 3c 01 	sts	0x013C, r25
    1110:	80 93 3b 01 	sts	0x013B, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = R_ANZ_MESS;	// switch to special number of repetitions
    1114:	8e eb       	ldi	r24, 0xBE	; 190
    1116:	80 93 39 01 	sts	0x0139, r24
#endif
  #define MAX_REPEAT (700 / (5 + R_ANZ_MESS/8))
  ADC_PORT = TXD_VAL;
    111a:	88 e0       	ldi	r24, 0x08	; 8
    111c:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
    111e:	bb 81       	ldd	r27, Y+3	; 0x03
    1120:	b7 b9       	out	0x07, r27	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    1122:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;	
    1124:	c5 b8       	out	0x05, r12	; 5
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
    1126:	ee 24       	eor	r14, r14
    1128:	ff 24       	eor	r15, r15
  for (ii=1;ii<MAX_REPEAT;ii++) {
    112a:	21 e0       	ldi	r18, 0x01	; 1
    112c:	01 c0       	rjmp	.+2      	; 0x1130 <CheckPins+0x974>
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    112e:	7c 01       	movw	r14, r24
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
    1130:	83 2d       	mov	r24, r3
    1132:	2b 8b       	std	Y+19, r18	; 0x13
    1134:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
    1138:	08 2f       	mov	r16, r24
    113a:	49 2e       	mov	r4, r25
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    113c:	81 2f       	mov	r24, r17
    113e:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
     udiff = adc.hp1 - adc.hp2;
    1142:	ac 01       	movw	r20, r24
    1144:	4e 19       	sub	r20, r14
    1146:	5f 09       	sbc	r21, r15
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    1148:	2b 89       	ldd	r18, Y+19	; 0x13
    114a:	57 ff       	sbrs	r21, 7
    114c:	03 c0       	rjmp	.+6      	; 0x1154 <CheckPins+0x998>
    114e:	50 95       	com	r21
    1150:	41 95       	neg	r20
    1152:	5f 4f       	sbci	r21, 0xFF	; 255
    1154:	43 30       	cpi	r20, 0x03	; 3
    1156:	51 05       	cpc	r21, r1
    1158:	84 f4       	brge	.+32     	; 0x117a <CheckPins+0x9be>
    115a:	ac 01       	movw	r20, r24
  adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
#endif
  if (adc.tp1 > adc.hp1) {
     adc.tp1 = adc.hp1;
  }
  R_PORT = 0;
    115c:	15 b8       	out	0x05, r1	; 5
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (GND)
    115e:	e8 85       	ldd	r30, Y+8	; 0x08
    1160:	e4 b9       	out	0x04, r30	; 4
  adc.hp2 = W5msReadADC(HighPin);	// read voltage, should be down
    1162:	81 2f       	mov	r24, r17
    1164:	4e 8b       	std	Y+22, r20	; 0x16
    1166:	5b 8b       	std	Y+19, r21	; 0x13
    1168:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
  if (adc.hp2 > (20*U_SCALE)) {
    116c:	4e 89       	ldd	r20, Y+22	; 0x16
    116e:	5b 89       	ldd	r21, Y+19	; 0x13
    1170:	81 35       	cpi	r24, 0x51	; 81
    1172:	91 05       	cpc	r25, r1
    1174:	08 f0       	brcs	.+2      	; 0x1178 <CheckPins+0x9bc>
    1176:	ac c1       	rjmp	.+856    	; 0x14d0 <CheckPins+0xd14>
    1178:	05 c0       	rjmp	.+10     	; 0x1184 <CheckPins+0x9c8>
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     udiff = adc.hp1 - adc.hp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.hp2 = adc.hp1;
     wdt_reset();
    117a:	a8 95       	wdr
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    117c:	2f 5f       	subi	r18, 0xFF	; 255
    117e:	29 31       	cpi	r18, 0x19	; 25
    1180:	b1 f6       	brne	.-84     	; 0x112e <CheckPins+0x972>
    1182:	a6 c1       	rjmp	.+844    	; 0x14d0 <CheckPins+0xd14>
     lcd_string(utoa(adc.hp2, outval, 10));
     lcd_space();
#endif
     goto testend;
  }
  R_PORT = HiPinRH;		//switch R_H for High-Pin to VCC
    1184:	f8 85       	ldd	r31, Y+8	; 0x08
    1186:	f5 b9       	out	0x05, r31	; 5
  adc.hp2 = W5msReadADC(HighPin);	// voltage at resistor Rx with R_H
    1188:	81 2f       	mov	r24, r17
    118a:	4e 8b       	std	Y+22, r20	; 0x16
    118c:	5b 8b       	std	Y+19, r21	; 0x13
    118e:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
    1192:	7c 01       	movw	r14, r24

  ADC_DDR = HiADCm;		//switch High-Pin to output
    1194:	29 81       	ldd	r18, Y+1	; 0x01
    1196:	27 b9       	out	0x07, r18	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
    1198:	28 b9       	out	0x08, r18	; 8
  R_PORT = 0;
    119a:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
    119c:	3a 81       	ldd	r19, Y+2	; 0x02
    119e:	34 b9       	out	0x04, r19	; 4
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
    11a0:	aa 24       	eor	r10, r10
    11a2:	bb 24       	eor	r11, r11
  for (ii=1;ii<MAX_REPEAT;ii++) {
    11a4:	21 e0       	ldi	r18, 0x01	; 1
    11a6:	4e 89       	ldd	r20, Y+22	; 0x16
    11a8:	5b 89       	ldd	r21, Y+19	; 0x13
    11aa:	3a 01       	movw	r6, r20
    11ac:	01 c0       	rjmp	.+2      	; 0x11b0 <CheckPins+0x9f4>
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    11ae:	56 01       	movw	r10, r12
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
    11b0:	81 2f       	mov	r24, r17
    11b2:	2b 8b       	std	Y+19, r18	; 0x13
    11b4:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
    11b8:	4c 01       	movw	r8, r24
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    11ba:	83 2d       	mov	r24, r3
    11bc:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
    11c0:	6c 01       	movw	r12, r24
     udiff = adc.lp1 - adc.lp2;
    11c2:	8a 19       	sub	r24, r10
    11c4:	9b 09       	sbc	r25, r11
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    11c6:	2b 89       	ldd	r18, Y+19	; 0x13
    11c8:	97 ff       	sbrs	r25, 7
    11ca:	03 c0       	rjmp	.+6      	; 0x11d2 <CheckPins+0xa16>
    11cc:	90 95       	com	r25
    11ce:	81 95       	neg	r24
    11d0:	9f 4f       	sbci	r25, 0xFF	; 255
    11d2:	83 30       	cpi	r24, 0x03	; 3
    11d4:	91 05       	cpc	r25, r1
    11d6:	8c f4       	brge	.+34     	; 0x11fa <CheckPins+0xa3e>
    11d8:	a3 01       	movw	r20, r6
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = MEM_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	88 0f       	add	r24, r24
  adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
#endif
  if (adc.tp2 < adc.lp1) {
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
    11de:	84 b9       	out	0x04, r24	; 4
  adc.lp2 = W5msReadADC(LowPin);
    11e0:	83 2d       	mov	r24, r3
    11e2:	6e 8a       	std	Y+22, r6	; 0x16
    11e4:	5b 8b       	std	Y+19, r21	; 0x13
    11e6:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
    11ea:	3c 01       	movw	r6, r24
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    11ec:	4e 89       	ldd	r20, Y+22	; 0x16
    11ee:	5b 89       	ldd	r21, Y+19	; 0x13
    11f0:	84 e4       	ldi	r24, 0x44	; 68
    11f2:	40 3c       	cpi	r20, 0xC0	; 192
    11f4:	58 07       	cpc	r21, r24
    11f6:	30 f0       	brcs	.+12     	; 0x1204 <CheckPins+0xa48>
    11f8:	0c c0       	rjmp	.+24     	; 0x1212 <CheckPins+0xa56>
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     udiff = adc.lp1 - adc.lp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.lp2 = adc.lp1;
     wdt_reset();
    11fa:	a8 95       	wdr
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
  R_PORT = 0;
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    11fc:	2f 5f       	subi	r18, 0xFF	; 255
    11fe:	29 31       	cpi	r18, 0x19	; 25
    1200:	b1 f6       	brne	.-84     	; 0x11ae <CheckPins+0x9f2>
    1202:	66 c1       	rjmp	.+716    	; 0x14d0 <CheckPins+0xd14>
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
  adc.lp2 = W5msReadADC(LowPin);
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    1204:	95 e8       	ldi	r25, 0x85	; 133
    1206:	e9 16       	cp	r14, r25
    1208:	91 e0       	ldi	r25, 0x01	; 1
    120a:	f9 06       	cpc	r15, r25
    120c:	08 f0       	brcs	.+2      	; 0x1210 <CheckPins+0xa54>
    120e:	60 c1       	rjmp	.+704    	; 0x14d0 <CheckPins+0xd14>
    1210:	06 c0       	rjmp	.+12     	; 0x121e <CheckPins+0xa62>
     lcd_data('F');
#endif
     goto testend; 
  }
//    if((adc.hp2 + (adc.hp2 / 61)) < adc.hp1)
  if (adc.hp2 < (4972*U_SCALE)) { 
    1212:	a0 eb       	ldi	r26, 0xB0	; 176
    1214:	ea 16       	cp	r14, r26
    1216:	ad e4       	ldi	r26, 0x4D	; 77
    1218:	fa 06       	cpc	r15, r26
    121a:	08 f0       	brcs	.+2      	; 0x121e <CheckPins+0xa62>
    121c:	59 c1       	rjmp	.+690    	; 0x14d0 <CheckPins+0xd14>
     // voltage breaks down with low test current and it is not nearly shorted  => resistor
//     if (adc.lp1 < 120) { // take measurement with R_H 
     if (adc.lp1 < (169*U_SCALE)) { // take measurement with R_H 
    121e:	b4 ea       	ldi	r27, 0xA4	; 164
    1220:	cb 16       	cp	r12, r27
    1222:	b2 e0       	ldi	r27, 0x02	; 2
    1224:	db 06       	cpc	r13, r27
    1226:	08 f0       	brcs	.+2      	; 0x122a <CheckPins+0xa6e>
    1228:	72 c0       	rjmp	.+228    	; 0x130e <CheckPins+0xb52>
        ii = 'H';
        if (adc.lp2 < (38*U_SCALE)) {
    122a:	e8 e9       	ldi	r30, 0x98	; 152
    122c:	6e 16       	cp	r6, r30
    122e:	71 04       	cpc	r7, r1
    1230:	08 f4       	brcc	.+2      	; 0x1234 <CheckPins+0xa78>
    1232:	4e c1       	rjmp	.+668    	; 0x14d0 <CheckPins+0xd14>
           // measurement > 60MOhm to big resistance
           goto testend;
        }
        // two measurements with R_H resistors (470k) are made:
        // lirx1 (measurement at HighPin)
        lirx1 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)adc.hp2 / (ADCconfig.U_AVCC - adc.hp2);
    1234:	80 90 3d 01 	lds	r8, 0x013D
    1238:	90 90 3e 01 	lds	r9, 0x013E
    123c:	b7 01       	movw	r22, r14
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	28 e9       	ldi	r18, 0x98	; 152
    1244:	37 eb       	ldi	r19, 0xB7	; 183
    1246:	40 e0       	ldi	r20, 0x00	; 0
    1248:	50 e0       	ldi	r21, 0x00	; 0
    124a:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    124e:	94 01       	movw	r18, r8
    1250:	2e 19       	sub	r18, r14
    1252:	3f 09       	sbc	r19, r15
    1254:	40 e0       	ldi	r20, 0x00	; 0
    1256:	50 e0       	ldi	r21, 0x00	; 0
    1258:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
    125c:	59 01       	movw	r10, r18
    125e:	6a 01       	movw	r12, r20
        // lirx2 (measurement at LowPin)
        lirx2 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)(ADCconfig.U_AVCC - adc.lp2) / adc.lp2;
    1260:	86 18       	sub	r8, r6
    1262:	97 08       	sbc	r9, r7
    1264:	b4 01       	movw	r22, r8
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	28 e9       	ldi	r18, 0x98	; 152
    126c:	37 eb       	ldi	r19, 0xB7	; 183
    126e:	40 e0       	ldi	r20, 0x00	; 0
    1270:	50 e0       	ldi	r21, 0x00	; 0
    1272:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    1276:	93 01       	movw	r18, r6
    1278:	40 e0       	ldi	r20, 0x00	; 0
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
#define FAKT_LOW 2		//resolution is about twice as good
#else
#define FAKT_LOW 4		//resolution is about four times better
#endif
#ifdef AUTOSCALE_ADC
        if (adc.hp2 < U_INT_LIMIT) {
    1280:	f8 e7       	ldi	r31, 0x78	; 120
    1282:	ef 16       	cp	r14, r31
    1284:	ff e0       	ldi	r31, 0x0F	; 15
    1286:	ff 06       	cpc	r15, r31
    1288:	70 f4       	brcc	.+28     	; 0x12a6 <CheckPins+0xaea>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    128a:	c6 01       	movw	r24, r12
    128c:	b5 01       	movw	r22, r10
    128e:	e2 e0       	ldi	r30, 0x02	; 2
    1290:	66 0f       	add	r22, r22
    1292:	77 1f       	adc	r23, r23
    1294:	88 1f       	adc	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	ea 95       	dec	r30
    129a:	d1 f7       	brne	.-12     	; 0x1290 <CheckPins+0xad4>
    129c:	62 0f       	add	r22, r18
    129e:	73 1f       	adc	r23, r19
    12a0:	84 1f       	adc	r24, r20
    12a2:	95 1f       	adc	r25, r21
    12a4:	12 c0       	rjmp	.+36     	; 0x12ca <CheckPins+0xb0e>
        } else if (adc.lp2 < U_INT_LIMIT){
    12a6:	88 e7       	ldi	r24, 0x78	; 120
    12a8:	68 16       	cp	r6, r24
    12aa:	8f e0       	ldi	r24, 0x0F	; 15
    12ac:	78 06       	cpc	r7, r24
    12ae:	a0 f4       	brcc	.+40     	; 0x12d8 <CheckPins+0xb1c>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    12b0:	ca 01       	movw	r24, r20
    12b2:	b9 01       	movw	r22, r18
    12b4:	22 e0       	ldi	r18, 0x02	; 2
    12b6:	66 0f       	add	r22, r22
    12b8:	77 1f       	adc	r23, r23
    12ba:	88 1f       	adc	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	2a 95       	dec	r18
    12c0:	d1 f7       	brne	.-12     	; 0x12b6 <CheckPins+0xafa>
    12c2:	6a 0d       	add	r22, r10
    12c4:	7b 1d       	adc	r23, r11
    12c6:	8c 1d       	adc	r24, r12
    12c8:	9d 1d       	adc	r25, r13
    12ca:	25 e0       	ldi	r18, 0x05	; 5
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	40 e0       	ldi	r20, 0x00	; 0
    12d0:	50 e0       	ldi	r21, 0x00	; 0
    12d2:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
    12d6:	08 c0       	rjmp	.+16     	; 0x12e8 <CheckPins+0xb2c>
        } else 
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_H measurements
    12d8:	2a 0d       	add	r18, r10
    12da:	3b 1d       	adc	r19, r11
    12dc:	4c 1d       	adc	r20, r12
    12de:	5d 1d       	adc	r21, r13
    12e0:	56 95       	lsr	r21
    12e2:	47 95       	ror	r20
    12e4:	37 95       	ror	r19
    12e6:	27 95       	ror	r18
        }
        lrx1 *= 100;
    12e8:	ca 01       	movw	r24, r20
    12ea:	b9 01       	movw	r22, r18
    12ec:	24 e6       	ldi	r18, 0x64	; 100
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	40 e0       	ldi	r20, 0x00	; 0
    12f2:	50 e0       	ldi	r21, 0x00	; 0
    12f4:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    12f8:	6b 01       	movw	r12, r22
    12fa:	7c 01       	movw	r14, r24
        lrx1 += RH_OFFSET;			// add constant for correction of systematic error
    12fc:	8c ea       	ldi	r24, 0xAC	; 172
    12fe:	9d e0       	ldi	r25, 0x0D	; 13
    1300:	a0 e0       	ldi	r26, 0x00	; 0
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	c8 0e       	add	r12, r24
    1306:	d9 1e       	adc	r13, r25
    1308:	ea 1e       	adc	r14, r26
    130a:	fb 1e       	adc	r15, r27
    130c:	78 c0       	rjmp	.+240    	; 0x13fe <CheckPins+0xc42>
    130e:	80 2f       	mov	r24, r16
    1310:	94 2d       	mov	r25, r4
    1312:	48 17       	cp	r20, r24
    1314:	59 07       	cpc	r21, r25
    1316:	08 f4       	brcc	.+2      	; 0x131a <CheckPins+0xb5e>
    1318:	ca 01       	movw	r24, r20
    131a:	76 01       	movw	r14, r12
    131c:	c8 14       	cp	r12, r8
    131e:	d9 04       	cpc	r13, r9
    1320:	08 f4       	brcc	.+2      	; 0x1324 <CheckPins+0xb68>
    1322:	74 01       	movw	r14, r8
    1324:	3c 01       	movw	r6, r24
    1326:	84 17       	cp	r24, r20
    1328:	95 07       	cpc	r25, r21
    132a:	08 f4       	brcc	.+2      	; 0x132e <CheckPins+0xb72>
    132c:	3a 01       	movw	r6, r20
        // two measurements with R_L resistors (680) are made:
        // lirx1 (measurement at HighPin)
        if (adc.tp1 > adc.hp1) {
           adc.hp1 = adc.tp1;		//diff negativ is illegal
        }
        lirx1 =(unsigned long)RR680PL * (unsigned long)(adc.hp1 - adc.tp1) / (ADCconfig.U_AVCC - adc.hp1);
    132e:	b3 01       	movw	r22, r6
    1330:	68 1b       	sub	r22, r24
    1332:	79 0b       	sbc	r23, r25
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	20 91 08 01 	lds	r18, 0x0108
    133c:	30 91 09 01 	lds	r19, 0x0109
    1340:	40 e0       	ldi	r20, 0x00	; 0
    1342:	50 e0       	ldi	r21, 0x00	; 0
    1344:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    1348:	20 91 3d 01 	lds	r18, 0x013D
    134c:	30 91 3e 01 	lds	r19, 0x013E
    1350:	26 19       	sub	r18, r6
    1352:	37 09       	sbc	r19, r7
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	50 e0       	ldi	r21, 0x00	; 0
    1358:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
    135c:	49 01       	movw	r8, r18
    135e:	5a 01       	movw	r10, r20
    1360:	27 01       	movw	r4, r14
    1362:	ce 14       	cp	r12, r14
    1364:	df 04       	cpc	r13, r15
    1366:	08 f4       	brcc	.+2      	; 0x136a <CheckPins+0xbae>
    1368:	26 01       	movw	r4, r12
        if (adc.tp2 < adc.lp1) {
           adc.lp1 = adc.tp2;		//diff negativ is illegal
        }
        // lirx2 (Measurement at LowPin)
        lirx2 =(unsigned long)RR680MI * (unsigned long)(adc.tp2 -adc.lp1) / adc.lp1;
    136a:	e4 18       	sub	r14, r4
    136c:	f5 08       	sbc	r15, r5
    136e:	b7 01       	movw	r22, r14
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	20 91 02 01 	lds	r18, 0x0102
    1378:	30 91 03 01 	lds	r19, 0x0103
    137c:	40 e0       	ldi	r20, 0x00	; 0
    137e:	50 e0       	ldi	r21, 0x00	; 0
    1380:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    1384:	92 01       	movw	r18, r4
    1386:	40 e0       	ldi	r20, 0x00	; 0
    1388:	50 e0       	ldi	r21, 0x00	; 0
    138a:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
//     lrx1 =(unsigned long)R_L_VAL * (unsigned long)adc.hp1 / (adc.hp3 - adc.hp1);

#ifdef AUTOSCALE_ADC
        if (adc.hp1 < U_INT_LIMIT) {
    138e:	98 e7       	ldi	r25, 0x78	; 120
    1390:	69 16       	cp	r6, r25
    1392:	9f e0       	ldi	r25, 0x0F	; 15
    1394:	79 06       	cpc	r7, r25
    1396:	70 f4       	brcc	.+28     	; 0x13b4 <CheckPins+0xbf8>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    1398:	c5 01       	movw	r24, r10
    139a:	b4 01       	movw	r22, r8
    139c:	02 e0       	ldi	r16, 0x02	; 2
    139e:	66 0f       	add	r22, r22
    13a0:	77 1f       	adc	r23, r23
    13a2:	88 1f       	adc	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	0a 95       	dec	r16
    13a8:	d1 f7       	brne	.-12     	; 0x139e <CheckPins+0xbe2>
    13aa:	62 0f       	add	r22, r18
    13ac:	73 1f       	adc	r23, r19
    13ae:	84 1f       	adc	r24, r20
    13b0:	95 1f       	adc	r25, r21
    13b2:	12 c0       	rjmp	.+36     	; 0x13d8 <CheckPins+0xc1c>
        } else if (adc.lp1 < U_INT_LIMIT) {
    13b4:	a8 e7       	ldi	r26, 0x78	; 120
    13b6:	4a 16       	cp	r4, r26
    13b8:	af e0       	ldi	r26, 0x0F	; 15
    13ba:	5a 06       	cpc	r5, r26
    13bc:	b0 f4       	brcc	.+44     	; 0x13ea <CheckPins+0xc2e>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    13be:	ca 01       	movw	r24, r20
    13c0:	b9 01       	movw	r22, r18
    13c2:	b2 e0       	ldi	r27, 0x02	; 2
    13c4:	66 0f       	add	r22, r22
    13c6:	77 1f       	adc	r23, r23
    13c8:	88 1f       	adc	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	ba 95       	dec	r27
    13ce:	d1 f7       	brne	.-12     	; 0x13c4 <CheckPins+0xc08>
    13d0:	68 0d       	add	r22, r8
    13d2:	79 1d       	adc	r23, r9
    13d4:	8a 1d       	adc	r24, r10
    13d6:	9b 1d       	adc	r25, r11
    13d8:	25 e0       	ldi	r18, 0x05	; 5
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	40 e0       	ldi	r20, 0x00	; 0
    13de:	50 e0       	ldi	r21, 0x00	; 0
    13e0:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
    13e4:	69 01       	movw	r12, r18
    13e6:	7a 01       	movw	r14, r20
    13e8:	0a c0       	rjmp	.+20     	; 0x13fe <CheckPins+0xc42>
        } else
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_L measurements
    13ea:	69 01       	movw	r12, r18
    13ec:	7a 01       	movw	r14, r20
    13ee:	c8 0c       	add	r12, r8
    13f0:	d9 1c       	adc	r13, r9
    13f2:	ea 1c       	adc	r14, r10
    13f4:	fb 1c       	adc	r15, r11
    13f6:	f6 94       	lsr	r15
    13f8:	e7 94       	ror	r14
    13fa:	d7 94       	ror	r13
    13fc:	c7 94       	ror	r12
  lcd_line4();
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
    13fe:	80 91 07 01 	lds	r24, 0x0107
    1402:	82 30       	cpi	r24, 0x02	; 2
    1404:	18 f0       	brcs	.+6      	; 0x140c <CheckPins+0xc50>
    1406:	86 30       	cpi	r24, 0x06	; 6
    1408:	09 f0       	breq	.+2      	; 0x140c <CheckPins+0xc50>
    140a:	62 c0       	rjmp	.+196    	; 0x14d0 <CheckPins+0xd14>
        for (ii=0; ii<ResistorsFound; ii++) {
    140c:	50 91 55 01 	lds	r21, 0x0155
    1410:	40 e0       	ldi	r20, 0x00	; 0
           // search measurements with inverse polarity 
           thisR = &resis[ii];
           if (thisR->rt != TristatePin) {
    1412:	8b e0       	ldi	r24, 0x0B	; 11
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	3e c0       	rjmp	.+124    	; 0x1494 <CheckPins+0xcd8>
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
           // search measurements with inverse polarity 
           thisR = &resis[ii];
    1418:	24 2f       	mov	r18, r20
    141a:	30 e0       	ldi	r19, 0x00	; 0
           if (thisR->rt != TristatePin) {
    141c:	28 9f       	mul	r18, r24
    141e:	f0 01       	movw	r30, r0
    1420:	29 9f       	mul	r18, r25
    1422:	f0 0d       	add	r31, r0
    1424:	38 9f       	mul	r19, r24
    1426:	f0 0d       	add	r31, r0
    1428:	11 24       	eor	r1, r1
    142a:	e8 5e       	subi	r30, 0xE8	; 232
    142c:	fe 4f       	sbci	r31, 0xFE	; 254
    142e:	22 85       	ldd	r18, Z+10	; 0x0a
    1430:	22 15       	cp	r18, r2
    1432:	11 f0       	breq	.+4      	; 0x1438 <CheckPins+0xc7c>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    1434:	4f 5f       	subi	r20, 0xFF	; 255
    1436:	2e c0       	rjmp	.+92     	; 0x1494 <CheckPins+0xcd8>
           if (thisR->rt != TristatePin) {
              continue;
           }
           // must be measurement with inverse polarity 
           // resolution is 0.1 Ohm, 1 Ohm = 10 !
           lirx1 = (labs((long)lrx1 - (long)thisR->rx) * 10) / (lrx1 + thisR->rx + 100);
    1438:	80 80       	ld	r8, Z
    143a:	91 80       	ldd	r9, Z+1	; 0x01
    143c:	a2 80       	ldd	r10, Z+2	; 0x02
    143e:	b3 80       	ldd	r11, Z+3	; 0x03
    1440:	c7 01       	movw	r24, r14
    1442:	b6 01       	movw	r22, r12
    1444:	68 19       	sub	r22, r8
    1446:	79 09       	sbc	r23, r9
    1448:	8a 09       	sbc	r24, r10
    144a:	9b 09       	sbc	r25, r11
    144c:	97 ff       	sbrs	r25, 7
    144e:	07 c0       	rjmp	.+14     	; 0x145e <CheckPins+0xca2>
    1450:	90 95       	com	r25
    1452:	80 95       	com	r24
    1454:	70 95       	com	r23
    1456:	61 95       	neg	r22
    1458:	7f 4f       	sbci	r23, 0xFF	; 255
    145a:	8f 4f       	sbci	r24, 0xFF	; 255
    145c:	9f 4f       	sbci	r25, 0xFF	; 255
    145e:	2a e0       	ldi	r18, 0x0A	; 10
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	40 e0       	ldi	r20, 0x00	; 0
    1464:	50 e0       	ldi	r21, 0x00	; 0
    1466:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    146a:	a5 01       	movw	r20, r10
    146c:	94 01       	movw	r18, r8
    146e:	2c 59       	subi	r18, 0x9C	; 156
    1470:	3f 4f       	sbci	r19, 0xFF	; 255
    1472:	4f 4f       	sbci	r20, 0xFF	; 255
    1474:	5f 4f       	sbci	r21, 0xFF	; 255
    1476:	2c 0d       	add	r18, r12
    1478:	3d 1d       	adc	r19, r13
    147a:	4e 1d       	adc	r20, r14
    147c:	5f 1d       	adc	r21, r15
    147e:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
           if (lirx1  > 0) {
    1482:	21 15       	cp	r18, r1
    1484:	31 05       	cpc	r19, r1
    1486:	41 05       	cpc	r20, r1
    1488:	51 05       	cpc	r21, r1
    148a:	11 f5       	brne	.+68     	; 0x14d0 <CheckPins+0xd14>
              DisplayValue(lirx1,-1,LCD_CHAR_OMEGA,3)
              lcd_space();
#endif
              goto testend; // <10% mismatch
           }
           PartFound = PART_RESISTOR;
    148c:	86 e0       	ldi	r24, 0x06	; 6
    148e:	80 93 07 01 	sts	0x0107, r24
           goto testend;
    1492:	1e c0       	rjmp	.+60     	; 0x14d0 <CheckPins+0xd14>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    1494:	45 17       	cp	r20, r21
    1496:	08 f4       	brcc	.+2      	; 0x149a <CheckPins+0xcde>
    1498:	bf cf       	rjmp	.-130    	; 0x1418 <CheckPins+0xc5c>
           }
           PartFound = PART_RESISTOR;
           goto testend;
        } // end for
        // no same resistor with the same Tristate-Pin found, new one
        thisR = &resis[ResistorsFound];		// pointer to a free resistor structure
    149a:	25 2f       	mov	r18, r21
    149c:	30 e0       	ldi	r19, 0x00	; 0
        thisR->rx = lrx1;		// save resistor value
    149e:	8b e0       	ldi	r24, 0x0B	; 11
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	28 9f       	mul	r18, r24
    14a4:	f0 01       	movw	r30, r0
    14a6:	29 9f       	mul	r18, r25
    14a8:	f0 0d       	add	r31, r0
    14aa:	38 9f       	mul	r19, r24
    14ac:	f0 0d       	add	r31, r0
    14ae:	11 24       	eor	r1, r1
    14b0:	e8 5e       	subi	r30, 0xE8	; 232
    14b2:	fe 4f       	sbci	r31, 0xFE	; 254
    14b4:	c0 82       	st	Z, r12
    14b6:	d1 82       	std	Z+1, r13	; 0x01
    14b8:	e2 82       	std	Z+2, r14	; 0x02
    14ba:	f3 82       	std	Z+3, r15	; 0x03
#if FLASHEND > 0x1fff
        thisR->lx = 0;			// no inductance
    14bc:	14 82       	std	Z+4, r1	; 0x04
    14be:	15 82       	std	Z+5, r1	; 0x05
    14c0:	16 82       	std	Z+6, r1	; 0x06
    14c2:	17 82       	std	Z+7, r1	; 0x07
#endif
        thisR->ra = LowPin;		// save Pin numbers
    14c4:	30 86       	std	Z+8, r3	; 0x08
        thisR->rb = HighPin;
    14c6:	11 87       	std	Z+9, r17	; 0x09
        thisR->rt = TristatePin;	// Tristate is saved for easier search of inverse measurement
    14c8:	22 86       	std	Z+10, r2	; 0x0a
        ResistorsFound++;			// 1 more resistor found
    14ca:	5f 5f       	subi	r21, 0xFF	; 255
    14cc:	50 93 55 01 	sts	0x0155, r21
#endif
     }
  }
  testend:
#if U_SCALE != 1
  ADCconfig.U_AVCC /= U_SCALE;		// scale back to mV resolution
    14d0:	80 91 3d 01 	lds	r24, 0x013D
    14d4:	90 91 3e 01 	lds	r25, 0x013E
    14d8:	96 95       	lsr	r25
    14da:	87 95       	ror	r24
    14dc:	96 95       	lsr	r25
    14de:	87 95       	ror	r24
    14e0:	90 93 3e 01 	sts	0x013E, r25
    14e4:	80 93 3d 01 	sts	0x013D, r24
  ADCconfig.U_Bandgap /= U_SCALE;
    14e8:	80 91 3b 01 	lds	r24, 0x013B
    14ec:	90 91 3c 01 	lds	r25, 0x013C
    14f0:	96 95       	lsr	r25
    14f2:	87 95       	ror	r24
    14f4:	96 95       	lsr	r25
    14f6:	87 95       	ror	r24
    14f8:	90 93 3c 01 	sts	0x013C, r25
    14fc:	80 93 3b 01 	sts	0x013B, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = ANZ_MESS;		// switch back to standard number of repetition
    1500:	89 e1       	ldi	r24, 0x19	; 25
    1502:	80 93 39 01 	sts	0x0139, r24
#if DebugOut < 10
  wait_about2s();
#endif
#endif
 clean_ports:
  ADC_DDR = TXD_MSK;		// all ADC-Pins Input
    1506:	88 e0       	ldi	r24, 0x08	; 8
    1508:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// all ADC outputs to Ground, keine Pull up
    150a:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// all resistor-outputs to Input
    150c:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// all resistor-outputs to Ground, no Pull up
    150e:	15 b8       	out	0x05, r1	; 5
} // end CheckPins()
    1510:	66 96       	adiw	r28, 0x16	; 22
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	f8 94       	cli
    1516:	de bf       	out	0x3e, r29	; 62
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	cd bf       	out	0x3d, r28	; 61
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	1f 91       	pop	r17
    1522:	0f 91       	pop	r16
    1524:	ff 90       	pop	r15
    1526:	ef 90       	pop	r14
    1528:	df 90       	pop	r13
    152a:	cf 90       	pop	r12
    152c:	bf 90       	pop	r11
    152e:	af 90       	pop	r10
    1530:	9f 90       	pop	r9
    1532:	8f 90       	pop	r8
    1534:	7f 90       	pop	r7
    1536:	6f 90       	pop	r6
    1538:	5f 90       	pop	r5
    153a:	4f 90       	pop	r4
    153c:	3f 90       	pop	r3
    153e:	2f 90       	pop	r2
    1540:	08 95       	ret

00001542 <AutoCheck>:
void AutoCheck(void) {
    1542:	2f 92       	push	r2
    1544:	3f 92       	push	r3
    1546:	4f 92       	push	r4
    1548:	5f 92       	push	r5
    154a:	6f 92       	push	r6
    154c:	7f 92       	push	r7
    154e:	8f 92       	push	r8
    1550:	9f 92       	push	r9
    1552:	af 92       	push	r10
    1554:	bf 92       	push	r11
    1556:	cf 92       	push	r12
    1558:	df 92       	push	r13
    155a:	ef 92       	push	r14
    155c:	ff 92       	push	r15
    155e:	0f 93       	push	r16
    1560:	1f 93       	push	r17
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	2e 97       	sbiw	r28, 0x0e	; 14
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	de bf       	out	0x3e, r29	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	cd bf       	out	0x3d, r28	; 61

#ifdef AUTO_CAL
  uint8_t cap_found;	// counter for found capacitor
  int8_t udiff2;
#endif
  ADC_PORT = TXD_VAL;
    1576:	88 e0       	ldi	r24, 0x08	; 8
    1578:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = TXD_MSK;
    157a:	87 b9       	out	0x07, r24	; 7
  R_PORT = (1<<(TP1*2));		//Pin 1 over RL to +
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	85 b9       	out	0x05, r24	; 5
  R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//Pin 2 over RL to -
    1580:	85 e0       	ldi	r24, 0x05	; 5
    1582:	84 b9       	out	0x04, r24	; 4
  adcmv[0] = W5msReadADC(PC0);		// voltage at Pin 1
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
    158a:	8c 01       	movw	r16, r24
    158c:	9a 83       	std	Y+2, r25	; 0x02
    158e:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = ReadADC(PC1);		// voltage at Pin 2
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
    1596:	7c 01       	movw	r14, r24
    1598:	9c 83       	std	Y+4, r25	; 0x04
    159a:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = ReadADC(PC2);		// voltage at Pin 3
    159c:	82 e0       	ldi	r24, 0x02	; 2
    159e:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
    15a2:	9c 01       	movw	r18, r24
    15a4:	9e 83       	std	Y+6, r25	; 0x06
    15a6:	8d 83       	std	Y+5, r24	; 0x05
  if (abs((int)(adcmv[1] - adcmv[0])) > 20) {
    15a8:	e0 1a       	sub	r14, r16
    15aa:	f1 0a       	sbc	r15, r17
    15ac:	f7 fe       	sbrs	r15, 7
    15ae:	04 c0       	rjmp	.+8      	; 0x15b8 <AutoCheck+0x76>
    15b0:	f0 94       	com	r15
    15b2:	e1 94       	neg	r14
    15b4:	f1 08       	sbc	r15, r1
    15b6:	f3 94       	inc	r15
    15b8:	85 e1       	ldi	r24, 0x15	; 21
    15ba:	e8 16       	cp	r14, r24
    15bc:	f1 04       	cpc	r15, r1
    15be:	0c f0       	brlt	.+2      	; 0x15c2 <AutoCheck+0x80>
    15c0:	65 c4       	rjmp	.+2250   	; 0x1e8c <AutoCheck+0x94a>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[2] - adcmv[0])) > 20) {
    15c2:	20 1b       	sub	r18, r16
    15c4:	31 0b       	sbc	r19, r17
    15c6:	37 ff       	sbrs	r19, 7
    15c8:	03 c0       	rjmp	.+6      	; 0x15d0 <AutoCheck+0x8e>
    15ca:	30 95       	com	r19
    15cc:	21 95       	neg	r18
    15ce:	3f 4f       	sbci	r19, 0xFF	; 255
    15d0:	25 31       	cpi	r18, 0x15	; 21
    15d2:	31 05       	cpc	r19, r1
    15d4:	0c f0       	brlt	.+2      	; 0x15d8 <AutoCheck+0x96>
    15d6:	5a c4       	rjmp	.+2228   	; 0x1e8c <AutoCheck+0x94a>
     return;				//difference to big, no selftest
  }
  if (abs((int)((adcmv[0]*2) - ADCconfig.U_AVCC)) > 60) {
    15d8:	00 0f       	add	r16, r16
    15da:	11 1f       	adc	r17, r17
    15dc:	80 91 3d 01 	lds	r24, 0x013D
    15e0:	90 91 3e 01 	lds	r25, 0x013E
    15e4:	08 1b       	sub	r16, r24
    15e6:	19 0b       	sbc	r17, r25
    15e8:	17 ff       	sbrs	r17, 7
    15ea:	03 c0       	rjmp	.+6      	; 0x15f2 <AutoCheck+0xb0>
    15ec:	10 95       	com	r17
    15ee:	01 95       	neg	r16
    15f0:	1f 4f       	sbci	r17, 0xFF	; 255
    15f2:	0d 33       	cpi	r16, 0x3D	; 61
    15f4:	11 05       	cpc	r17, r1
    15f6:	0c f0       	brlt	.+2      	; 0x15fa <AutoCheck+0xb8>
    15f8:	49 c4       	rjmp	.+2194   	; 0x1e8c <AutoCheck+0x94a>
     return;				//difference to big, no selftest
  }
  R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//Pin 3 over RL to - (Pin 1 over RL to +)
    15fa:	81 e1       	ldi	r24, 0x11	; 17
    15fc:	84 b9       	out	0x04, r24	; 4
  adcmv[0] = W5msReadADC(PC0);		// voltage at Pin 1
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
    1604:	8c 01       	movw	r16, r24
    1606:	9a 83       	std	Y+2, r25	; 0x02
    1608:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = ReadADC(PC1);		// voltage at Pin 2
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
    1610:	7c 01       	movw	r14, r24
    1612:	9c 83       	std	Y+4, r25	; 0x04
    1614:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = ReadADC(PC2);		// voltage at Pin 3
    1616:	82 e0       	ldi	r24, 0x02	; 2
    1618:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
    161c:	9c 01       	movw	r18, r24
    161e:	9e 83       	std	Y+6, r25	; 0x06
    1620:	8d 83       	std	Y+5, r24	; 0x05
  if (abs((int)(adcmv[1] - adcmv[0])) > 20) {
    1622:	e0 1a       	sub	r14, r16
    1624:	f1 0a       	sbc	r15, r17
    1626:	f7 fe       	sbrs	r15, 7
    1628:	04 c0       	rjmp	.+8      	; 0x1632 <AutoCheck+0xf0>
    162a:	f0 94       	com	r15
    162c:	e1 94       	neg	r14
    162e:	f1 08       	sbc	r15, r1
    1630:	f3 94       	inc	r15
    1632:	e5 e1       	ldi	r30, 0x15	; 21
    1634:	ee 16       	cp	r14, r30
    1636:	f1 04       	cpc	r15, r1
    1638:	0c f0       	brlt	.+2      	; 0x163c <AutoCheck+0xfa>
    163a:	28 c4       	rjmp	.+2128   	; 0x1e8c <AutoCheck+0x94a>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[2] - adcmv[0])) > 20) {
    163c:	20 1b       	sub	r18, r16
    163e:	31 0b       	sbc	r19, r17
    1640:	37 ff       	sbrs	r19, 7
    1642:	03 c0       	rjmp	.+6      	; 0x164a <AutoCheck+0x108>
    1644:	30 95       	com	r19
    1646:	21 95       	neg	r18
    1648:	3f 4f       	sbci	r19, 0xFF	; 255
    164a:	25 31       	cpi	r18, 0x15	; 21
    164c:	31 05       	cpc	r19, r1
    164e:	0c f0       	brlt	.+2      	; 0x1652 <AutoCheck+0x110>
    1650:	1d c4       	rjmp	.+2106   	; 0x1e8c <AutoCheck+0x94a>
     return;				//difference to big, no selftest
  }
  if (abs((int)((adcmv[0]*2) - ADCconfig.U_AVCC)) > 60) {
    1652:	00 0f       	add	r16, r16
    1654:	11 1f       	adc	r17, r17
    1656:	80 91 3d 01 	lds	r24, 0x013D
    165a:	90 91 3e 01 	lds	r25, 0x013E
    165e:	08 1b       	sub	r16, r24
    1660:	19 0b       	sbc	r17, r25
    1662:	17 ff       	sbrs	r17, 7
    1664:	03 c0       	rjmp	.+6      	; 0x166c <AutoCheck+0x12a>
    1666:	10 95       	com	r17
    1668:	01 95       	neg	r16
    166a:	1f 4f       	sbci	r17, 0xFF	; 255
    166c:	0d 33       	cpi	r16, 0x3D	; 61
    166e:	11 05       	cpc	r17, r1
    1670:	0c f0       	brlt	.+2      	; 0x1674 <AutoCheck+0x132>
    1672:	0c c4       	rjmp	.+2072   	; 0x1e8c <AutoCheck+0x94a>
     return;				//difference to big, no selftest
  }
#ifdef WITH_SELFTEST
  lcd_clear();
    1674:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_clear>
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
    1678:	84 ec       	ldi	r24, 0xC4	; 196
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
  wait_about1s();
    1680:	88 ec       	ldi	r24, 0xC8	; 200
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	0e 94 bb 03 	call	0x776	; 0x776 <sleep_5ms>
    1688:	66 24       	eor	r6, r6
    168a:	77 24       	eor	r7, r7
 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    168c:	11 e0       	ldi	r17, 0x01	; 1
           adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
           lcd_fix2_string(RH1H);	// "RH_Hi="
        }
        if (tt == 7) { // can we switch the ADC pins to VCC across the R_H resistor?
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_H_VAL*100));
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    168e:	e2 e0       	ldi	r30, 0x02	; 2
    1690:	ce 2e       	mov	r12, r30
           R_DDR = (2<<(TP1*2)) | (1<<(TP1*2));	//RH1 to +, RL1 to -
           adcmv[0] = W20msReadADC(TP1);
           adcmv[0] -= u680;
           R_PORT = 2<<(TP2*2);		//RH2 to VCC
    1692:	78 e0       	ldi	r23, 0x08	; 8
    1694:	e7 2e       	mov	r14, r23
           R_DDR = (2<<(TP2*2)) | (1<<(TP2*2));	//RH2 to +, RL2 to -
           adcmv[1] = W20msReadADC(TP2);
           adcmv[1] -= u680;
           R_PORT = 2<<(TP3*2);		//RH3 to VCC
    1696:	60 e2       	ldi	r22, 0x20	; 32
    1698:	f6 2e       	mov	r15, r22
           lcd_fix2_string(RLRL);	// "RLRL"
        }
                                        //############################################
        if (tt == 3) { // how equal are the RH resistors
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
           R_DDR = (2<<(TP1*2)) | (2<<(TP2*2));	//RH2 to -
    169a:	5a e0       	ldi	r21, 0x0A	; 10
    169c:	b5 2e       	mov	r11, r21
    169e:	70 c1       	rjmp	.+736    	; 0x1980 <AutoCheck+0x43e>
  wait_about1s();
 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
        lcd_line2();			//Cursor to column 1, row 2
    16a0:	80 ec       	ldi	r24, 0xC0	; 192
    16a2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
        lcd_clear_line();		// clear total line
    16a6:	0e 94 b7 02 	call	0x56e	; 0x56e <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    16aa:	80 e8       	ldi	r24, 0x80	; 128
    16ac:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
        lcd_clear_line();		// clear total line
    16b0:	0e 94 b7 02 	call	0x56e	; 0x56e <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    16b4:	80 e8       	ldi	r24, 0x80	; 128
    16b6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
        lcd_data('T');			//output the Testmode "T"
    16ba:	84 e5       	ldi	r24, 0x54	; 84
    16bc:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
        lcd_string(utoa(tt, outval, 10));	//output Test number
    16c0:	c3 01       	movw	r24, r6
    16c2:	6c e0       	ldi	r22, 0x0C	; 12
    16c4:	71 e0       	ldi	r23, 0x01	; 1
    16c6:	4a e0       	ldi	r20, 0x0A	; 10
    16c8:	50 e0       	ldi	r21, 0x00	; 0
    16ca:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <utoa>
    16ce:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_string>
        lcd_space();
    16d2:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_space>
                                        //############################################
        if (tt == 1) {   // output of reference voltage and factors for capacity measurement
    16d6:	fd 2d       	mov	r31, r13
    16d8:	f1 30       	cpi	r31, 0x01	; 1
    16da:	81 f5       	brne	.+96     	; 0x173c <AutoCheck+0x1fa>
           ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    16dc:	2e eb       	ldi	r18, 0xBE	; 190
    16de:	20 93 39 01 	sts	0x0139, r18
 #ifdef WITH_AUTO_REF
           (void) ReadADC(0x0e);	// read reference voltage 
    16e2:	8e e0       	ldi	r24, 0x0E	; 14
    16e4:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
           ref_mv = W5msReadADC(0x0e);	// read reference voltage 
    16e8:	8e e0       	ldi	r24, 0x0E	; 14
    16ea:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
    16ee:	90 93 40 01 	sts	0x0140, r25
    16f2:	80 93 3f 01 	sts	0x013F, r24
           RefVoltage();		//compute RHmultip = f(reference voltage)
    16f6:	0e 94 67 02 	call	0x4ce	; 0x4ce <RefVoltage>
 #endif
           lcd_fix2_string(URefT);	//"URef="
    16fa:	83 ee       	ldi	r24, 0xE3	; 227
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
           DisplayValue(ref_mv,-3,'V',4);
    1702:	60 91 3f 01 	lds	r22, 0x013F
    1706:	70 91 40 01 	lds	r23, 0x0140
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	4d ef       	ldi	r20, 0xFD	; 253
    1710:	26 e5       	ldi	r18, 0x56	; 86
    1712:	04 e0       	ldi	r16, 0x04	; 4
    1714:	0e 94 bf 02 	call	0x57e	; 0x57e <DisplayValue>
           lcd_line2();			//Cursor to column 1, row 2
    1718:	80 ec       	ldi	r24, 0xC0	; 192
    171a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
           lcd_fix2_string(RHfakt);	//"RHf="
    171e:	88 ee       	ldi	r24, 0xE8	; 232
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
           lcd_string(utoa(RHmultip, outval, 10));
    1726:	80 91 00 01 	lds	r24, 0x0100
    172a:	90 91 01 01 	lds	r25, 0x0101
    172e:	6c e0       	ldi	r22, 0x0C	; 12
    1730:	71 e0       	ldi	r23, 0x01	; 1
    1732:	4a e0       	ldi	r20, 0x0A	; 10
    1734:	50 e0       	ldi	r21, 0x00	; 0
    1736:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <utoa>
    173a:	05 c1       	rjmp	.+522    	; 0x1946 <AutoCheck+0x404>
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
    173c:	8d 2d       	mov	r24, r13
    173e:	82 30       	cpi	r24, 0x02	; 2
    1740:	99 f5       	brne	.+102    	; 0x17a8 <AutoCheck+0x266>
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1742:	60 91 3d 01 	lds	r22, 0x013D
    1746:	70 91 3e 01 	lds	r23, 0x013E
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	2e e4       	ldi	r18, 0x4E	; 78
    1750:	3b e1       	ldi	r19, 0x1B	; 27
    1752:	40 e0       	ldi	r20, 0x00	; 0
    1754:	50 e0       	ldi	r21, 0x00	; 0
    1756:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    175a:	a2 01       	movw	r20, r4
    175c:	91 01       	movw	r18, r2
    175e:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__divmodsi4>
    1762:	89 01       	movw	r16, r18
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	85 b9       	out	0x05, r24	; 5
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
    1768:	e5 e0       	ldi	r30, 0x05	; 5
    176a:	e4 b9       	out	0x04, r30	; 4
           adcmv[0] = W20msReadADC(TP1);
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	0e 94 45 1b 	call	0x368a	; 0x368a <W20msReadADC>
           adcmv[0] -= u680;
    1772:	80 1b       	sub	r24, r16
    1774:	91 0b       	sbc	r25, r17
    1776:	9a 83       	std	Y+2, r25	; 0x02
    1778:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//RL3 to -
    177a:	f1 e1       	ldi	r31, 0x11	; 17
    177c:	f4 b9       	out	0x04, r31	; 4
           adcmv[1] = W20msReadADC(TP1);
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	0e 94 45 1b 	call	0x368a	; 0x368a <W20msReadADC>
           adcmv[1] -= u680;
    1784:	80 1b       	sub	r24, r16
    1786:	91 0b       	sbc	r25, r17
    1788:	9c 83       	std	Y+4, r25	; 0x04
    178a:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 1<<(TP2*2);		//RL2 to VCC
    178c:	24 e0       	ldi	r18, 0x04	; 4
    178e:	25 b9       	out	0x05, r18	; 5
           R_DDR = (1<<(TP2*2)) | (1<<(TP3*2));	//RL3 to -
    1790:	84 e1       	ldi	r24, 0x14	; 20
    1792:	84 b9       	out	0x04, r24	; 4
           adcmv[2] = W20msReadADC(TP2);
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	0e 94 45 1b 	call	0x368a	; 0x368a <W20msReadADC>
           adcmv[2] -= u680;
    179a:	80 1b       	sub	r24, r16
    179c:	91 0b       	sbc	r25, r17
    179e:	9e 83       	std	Y+6, r25	; 0x06
    17a0:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RLRL);	// "RLRL"
    17a2:	85 ef       	ldi	r24, 0xF5	; 245
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	73 c0       	rjmp	.+230    	; 0x188e <AutoCheck+0x34c>
        }
                                        //############################################
        if (tt == 3) { // how equal are the RH resistors
    17a8:	ed 2d       	mov	r30, r13
    17aa:	e3 30       	cpi	r30, 0x03	; 3
    17ac:	29 f5       	brne	.+74     	; 0x17f8 <AutoCheck+0x2b6>
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    17ae:	c5 b8       	out	0x05, r12	; 5
           R_DDR = (2<<(TP1*2)) | (2<<(TP2*2));	//RH2 to -
    17b0:	b4 b8       	out	0x04, r11	; 4
           adcmv[0] = W20msReadADC(TP1);
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	0e 94 45 1b 	call	0x368a	; 0x368a <W20msReadADC>
           adcmv[3] = ADCconfig.U_AVCC / 2;
    17b8:	00 91 3d 01 	lds	r16, 0x013D
    17bc:	10 91 3e 01 	lds	r17, 0x013E
    17c0:	16 95       	lsr	r17
    17c2:	07 95       	ror	r16
    17c4:	18 87       	std	Y+8, r17	; 0x08
    17c6:	0f 83       	std	Y+7, r16	; 0x07
           adcmv[0] -= adcmv[3];
    17c8:	80 1b       	sub	r24, r16
    17ca:	91 0b       	sbc	r25, r17
    17cc:	9a 83       	std	Y+2, r25	; 0x02
    17ce:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (2<<(TP1*2)) | (2<<(TP3*2));	//RH3 to -
    17d0:	94 b8       	out	0x04, r9	; 4
           adcmv[1] = W20msReadADC(TP1);
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	0e 94 45 1b 	call	0x368a	; 0x368a <W20msReadADC>
           adcmv[1] -= adcmv[3];
    17d8:	80 1b       	sub	r24, r16
    17da:	91 0b       	sbc	r25, r17
    17dc:	9c 83       	std	Y+4, r25	; 0x04
    17de:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 2<<(TP2*2);		//RL2 to VCC
    17e0:	e5 b8       	out	0x05, r14	; 5
           R_DDR = (2<<(TP2*2)) | (2<<(TP3*2));	//RH3 to -
    17e2:	84 b8       	out	0x04, r8	; 4
           adcmv[2] = W20msReadADC(TP2);
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	0e 94 45 1b 	call	0x368a	; 0x368a <W20msReadADC>
           adcmv[2] -= adcmv[3];
    17ea:	80 1b       	sub	r24, r16
    17ec:	91 0b       	sbc	r25, r17
    17ee:	9e 83       	std	Y+6, r25	; 0x06
    17f0:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RHRH);	// "RHRH"
    17f2:	83 e0       	ldi	r24, 0x03	; 3
    17f4:	91 e0       	ldi	r25, 0x01	; 1
    17f6:	4b c0       	rjmp	.+150    	; 0x188e <AutoCheck+0x34c>
        }
                                        //############################################
        if (tt == 4) { // Text release probes
    17f8:	fd 2d       	mov	r31, r13
    17fa:	f4 30       	cpi	r31, 0x04	; 4
    17fc:	19 f4       	brne	.+6      	; 0x1804 <AutoCheck+0x2c2>
           lcd_fix2_string(RELPROBE);	// "Release Probes"
    17fe:	84 ed       	ldi	r24, 0xD4	; 212
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	45 c0       	rjmp	.+138    	; 0x188e <AutoCheck+0x34c>
        }
                                        //############################################
        if (tt == 5) { // can we switch the ADC pins to GND across R_H resistor?
    1804:	2d 2d       	mov	r18, r13
    1806:	25 30       	cpi	r18, 0x05	; 5
    1808:	b1 f4       	brne	.+44     	; 0x1836 <AutoCheck+0x2f4>
           R_PORT = 0;
    180a:	15 b8       	out	0x05, r1	; 5
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to GND
    180c:	c4 b8       	out	0x04, r12	; 4
           adcmv[0] = W20msReadADC(TP1);
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	0e 94 45 1b 	call	0x368a	; 0x368a <W20msReadADC>
    1814:	9a 83       	std	Y+2, r25	; 0x02
    1816:	89 83       	std	Y+1, r24	; 0x01

           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to GND
    1818:	e4 b8       	out	0x04, r14	; 4
           adcmv[1] = W20msReadADC(TP2);
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	0e 94 45 1b 	call	0x368a	; 0x368a <W20msReadADC>
    1820:	9c 83       	std	Y+4, r25	; 0x04
    1822:	8b 83       	std	Y+3, r24	; 0x03

           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1824:	f4 b8       	out	0x04, r15	; 4
           adcmv[2] = W20msReadADC(TP3);
    1826:	82 e0       	ldi	r24, 0x02	; 2
    1828:	0e 94 45 1b 	call	0x368a	; 0x368a <W20msReadADC>
    182c:	9e 83       	std	Y+6, r25	; 0x06
    182e:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RH1L);	// "RH_Lo="
    1830:	8d ee       	ldi	r24, 0xED	; 237
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	2c c0       	rjmp	.+88     	; 0x188e <AutoCheck+0x34c>
        }
                                        //############################################
        if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
    1836:	8d 2d       	mov	r24, r13
    1838:	86 30       	cpi	r24, 0x06	; 6
    183a:	61 f5       	brne	.+88     	; 0x1894 <AutoCheck+0x352>
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to VCC
    183c:	c4 b8       	out	0x04, r12	; 4
           R_PORT = 2<<(TP1*2);
    183e:	c5 b8       	out	0x05, r12	; 5
           adcmv[0] = W20msReadADC(TP1) - ADCconfig.U_AVCC;
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	0e 94 45 1b 	call	0x368a	; 0x368a <W20msReadADC>
    1846:	20 91 3d 01 	lds	r18, 0x013D
    184a:	30 91 3e 01 	lds	r19, 0x013E
    184e:	82 1b       	sub	r24, r18
    1850:	93 0b       	sbc	r25, r19
    1852:	9a 83       	std	Y+2, r25	; 0x02
    1854:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to VCC
    1856:	e4 b8       	out	0x04, r14	; 4
           R_PORT = 2<<(TP2*2);
    1858:	e5 b8       	out	0x05, r14	; 5
           adcmv[1] = W20msReadADC(TP2) - ADCconfig.U_AVCC;
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	0e 94 45 1b 	call	0x368a	; 0x368a <W20msReadADC>
    1860:	20 91 3d 01 	lds	r18, 0x013D
    1864:	30 91 3e 01 	lds	r19, 0x013E
    1868:	82 1b       	sub	r24, r18
    186a:	93 0b       	sbc	r25, r19
    186c:	9c 83       	std	Y+4, r25	; 0x04
    186e:	8b 83       	std	Y+3, r24	; 0x03
           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to VCC
    1870:	f4 b8       	out	0x04, r15	; 4
           R_PORT = 2<<(TP3*2);
    1872:	f5 b8       	out	0x05, r15	; 5
           adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
    1874:	82 e0       	ldi	r24, 0x02	; 2
    1876:	0e 94 45 1b 	call	0x368a	; 0x368a <W20msReadADC>
    187a:	20 91 3d 01 	lds	r18, 0x013D
    187e:	30 91 3e 01 	lds	r19, 0x013E
    1882:	82 1b       	sub	r24, r18
    1884:	93 0b       	sbc	r25, r19
    1886:	9e 83       	std	Y+6, r25	; 0x06
    1888:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RH1H);	// "RH_Hi="
    188a:	81 ef       	ldi	r24, 0xF1	; 241
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
    1892:	36 c0       	rjmp	.+108    	; 0x1900 <AutoCheck+0x3be>
        }
        if (tt == 7) { // can we switch the ADC pins to VCC across the R_H resistor?
    1894:	ed 2d       	mov	r30, r13
    1896:	e7 30       	cpi	r30, 0x07	; 7
    1898:	81 f5       	brne	.+96     	; 0x18fa <AutoCheck+0x3b8>
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_H_VAL*100));
    189a:	60 91 3d 01 	lds	r22, 0x013D
    189e:	70 91 3e 01 	lds	r23, 0x013E
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	2e e4       	ldi	r18, 0x4E	; 78
    18a8:	3b e1       	ldi	r19, 0x1B	; 27
    18aa:	40 e0       	ldi	r20, 0x00	; 0
    18ac:	50 e0       	ldi	r21, 0x00	; 0
    18ae:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    18b2:	2e ea       	ldi	r18, 0xAE	; 174
    18b4:	32 ed       	ldi	r19, 0xD2	; 210
    18b6:	47 e4       	ldi	r20, 0x47	; 71
    18b8:	50 e0       	ldi	r21, 0x00	; 0
    18ba:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__divmodsi4>
    18be:	89 01       	movw	r16, r18
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    18c0:	c5 b8       	out	0x05, r12	; 5
           R_DDR = (2<<(TP1*2)) | (1<<(TP1*2));	//RH1 to +, RL1 to -
    18c2:	f3 e0       	ldi	r31, 0x03	; 3
    18c4:	f4 b9       	out	0x04, r31	; 4
           adcmv[0] = W20msReadADC(TP1);
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	0e 94 45 1b 	call	0x368a	; 0x368a <W20msReadADC>
           adcmv[0] -= u680;
    18cc:	80 1b       	sub	r24, r16
    18ce:	91 0b       	sbc	r25, r17
    18d0:	9a 83       	std	Y+2, r25	; 0x02
    18d2:	89 83       	std	Y+1, r24	; 0x01
           R_PORT = 2<<(TP2*2);		//RH2 to VCC
    18d4:	e5 b8       	out	0x05, r14	; 5
           R_DDR = (2<<(TP2*2)) | (1<<(TP2*2));	//RH2 to +, RL2 to -
    18d6:	2c e0       	ldi	r18, 0x0C	; 12
    18d8:	24 b9       	out	0x04, r18	; 4
           adcmv[1] = W20msReadADC(TP2);
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	0e 94 45 1b 	call	0x368a	; 0x368a <W20msReadADC>
           adcmv[1] -= u680;
    18e0:	80 1b       	sub	r24, r16
    18e2:	91 0b       	sbc	r25, r17
    18e4:	9c 83       	std	Y+4, r25	; 0x04
    18e6:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 2<<(TP3*2);		//RH3 to VCC
    18e8:	f5 b8       	out	0x05, r15	; 5
           R_DDR = (2<<(TP3*2)) | (1<<(TP3*2));	//RH3 to +, RL3 to -
    18ea:	80 e3       	ldi	r24, 0x30	; 48
    18ec:	84 b9       	out	0x04, r24	; 4
           adcmv[2] = W20msReadADC(TP3);
    18ee:	82 e0       	ldi	r24, 0x02	; 2
    18f0:	0e 94 45 1b 	call	0x368a	; 0x368a <W20msReadADC>
           adcmv[2] -= u680;
    18f4:	80 1b       	sub	r24, r16
    18f6:	91 0b       	sbc	r25, r17
    18f8:	c6 cf       	rjmp	.-116    	; 0x1886 <AutoCheck+0x344>
           lcd_fix2_string(RH1H);	// "RH_RL="
        }
                                        //############################################
        if (tt > 1) {	// output 3 voltages 
    18fa:	ed 2d       	mov	r30, r13
    18fc:	e1 30       	cpi	r30, 0x01	; 1
    18fe:	29 f1       	breq	.+74     	; 0x194a <AutoCheck+0x408>
           lcd_line2();			//Cursor to column 1, row 2
    1900:	80 ec       	ldi	r24, 0xC0	; 192
    1902:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
           lcd_string(itoa(adcmv[0], outval, 10));	//output voltage 1
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	9a 81       	ldd	r25, Y+2	; 0x02
    190a:	6c e0       	ldi	r22, 0x0C	; 12
    190c:	71 e0       	ldi	r23, 0x01	; 1
    190e:	4a e0       	ldi	r20, 0x0A	; 10
    1910:	50 e0       	ldi	r21, 0x00	; 0
    1912:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <itoa>
    1916:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_string>
           lcd_space();
    191a:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_space>
           lcd_string(itoa(adcmv[1], outval, 10));	//output voltage 2
    191e:	8b 81       	ldd	r24, Y+3	; 0x03
    1920:	9c 81       	ldd	r25, Y+4	; 0x04
    1922:	6c e0       	ldi	r22, 0x0C	; 12
    1924:	71 e0       	ldi	r23, 0x01	; 1
    1926:	4a e0       	ldi	r20, 0x0A	; 10
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <itoa>
    192e:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_string>
           lcd_space();
    1932:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_space>
           lcd_string(itoa(adcmv[2], outval, 10));	//output voltage 3
    1936:	8d 81       	ldd	r24, Y+5	; 0x05
    1938:	9e 81       	ldd	r25, Y+6	; 0x06
    193a:	6c e0       	ldi	r22, 0x0C	; 12
    193c:	71 e0       	ldi	r23, 0x01	; 1
    193e:	4a e0       	ldi	r20, 0x0A	; 10
    1940:	50 e0       	ldi	r21, 0x00	; 0
    1942:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <itoa>
    1946:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_string>
        }
        ADC_DDR =  TXD_MSK;		// all-Pins to Input
    194a:	e7 b8       	out	0x07, r14	; 7
        ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
    194c:	e8 b8       	out	0x08, r14	; 8
        R_DDR = 0;			// all R-Ports to Input
    194e:	14 b8       	out	0x04, r1	; 4
        R_PORT = 0;
    1950:	15 b8       	out	0x05, r1	; 5
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    1952:	4f 9b       	sbis	0x09, 7	; 9
    1954:	0d c0       	rjmp	.+26     	; 0x1970 <AutoCheck+0x42e>
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
    1956:	84 e6       	ldi	r24, 0x64	; 100
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	0e 94 bb 03 	call	0x776	; 0x776 <sleep_5ms>
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    195e:	4f 9b       	sbis	0x09, 7	; 9
    1960:	07 c0       	rjmp	.+14     	; 0x1970 <AutoCheck+0x42e>
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
    1962:	84 e6       	ldi	r24, 0x64	; 100
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	0e 94 bb 03 	call	0x776	; 0x776 <sleep_5ms>
    196a:	aa 94       	dec	r10
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
  wait_about1s();
 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
    196c:	09 f0       	breq	.+2      	; 0x1970 <AutoCheck+0x42e>
    196e:	98 ce       	rjmp	.-720    	; 0x16a0 <AutoCheck+0x15e>
    1970:	1d 2d       	mov	r17, r13
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
     } //end for ww
     wait_about1s();
    1972:	88 ec       	ldi	r24, 0xC8	; 200
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	0e 94 bb 03 	call	0x776	; 0x776 <sleep_5ms>
  lcd_clear();
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
  wait_about1s();
 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    197a:	1f 5f       	subi	r17, 0xFF	; 255
    197c:	18 30       	cpi	r17, 0x08	; 8
    197e:	91 f0       	breq	.+36     	; 0x19a4 <AutoCheck+0x462>
void AutoCheck(void) {
    1980:	34 e0       	ldi	r19, 0x04	; 4
    1982:	d3 2e       	mov	r13, r19
        lcd_line2();			//Cursor to column 1, row 2
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_data('T');			//output the Testmode "T"
    1984:	08 94       	sec
    1986:	61 1c       	adc	r6, r1
    1988:	71 1c       	adc	r7, r1
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
           R_DDR = (2<<(TP1*2)) | (2<<(TP2*2));	//RH2 to -
           adcmv[0] = W20msReadADC(TP1);
           adcmv[3] = ADCconfig.U_AVCC / 2;
           adcmv[0] -= adcmv[3];
           R_DDR = (2<<(TP1*2)) | (2<<(TP3*2));	//RH3 to -
    198a:	22 e2       	ldi	r18, 0x22	; 34
    198c:	92 2e       	mov	r9, r18
           adcmv[1] = W20msReadADC(TP1);
           adcmv[1] -= adcmv[3];
           R_PORT = 2<<(TP2*2);		//RL2 to VCC
           R_DDR = (2<<(TP2*2)) | (2<<(TP3*2));	//RH3 to -
    198e:	98 e2       	ldi	r25, 0x28	; 40
    1990:	89 2e       	mov	r8, r25
           lcd_fix2_string(RHfakt);	//"RHf="
           lcd_string(utoa(RHmultip, outval, 10));
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1992:	8a eb       	ldi	r24, 0xBA	; 186
    1994:	28 2e       	mov	r2, r24
    1996:	86 e3       	ldi	r24, 0x36	; 54
    1998:	38 2e       	mov	r3, r24
    199a:	41 2c       	mov	r4, r1
    199c:	51 2c       	mov	r5, r1
    199e:	ad 2c       	mov	r10, r13
    19a0:	d1 2e       	mov	r13, r17
    19a2:	7e ce       	rjmp	.-772    	; 0x16a0 <AutoCheck+0x15e>
     wait_about1s();
  } //end for tt
#endif

  // measurement of internal resistance of the ADC port outputs switched to GND
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    19a4:	09 e0       	ldi	r16, 0x09	; 9
    19a6:	c0 2e       	mov	r12, r16
    19a8:	c7 b8       	out	0x07, r12	; 7
  R_PORT = 1<<(TP1*2);		//R_L-PORT 1 to VCC
    19aa:	dd 24       	eor	r13, r13
    19ac:	d3 94       	inc	r13
    19ae:	d5 b8       	out	0x05, r13	; 5
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to VCC
    19b0:	d4 b8       	out	0x04, r13	; 4
  adcmv[0] = W5msReadADC(TP1);
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
    19b8:	7c 01       	movw	r14, r24

  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin 2 to output 0V
    19ba:	1a e0       	ldi	r17, 0x0A	; 10
    19bc:	61 2e       	mov	r6, r17
    19be:	67 b8       	out	0x07, r6	; 7
  R_PORT =  1<<(TP2*2);	//R_L-PORT 2 to VCC
    19c0:	b4 e0       	ldi	r27, 0x04	; 4
    19c2:	8b 2e       	mov	r8, r27
    19c4:	85 b8       	out	0x05, r8	; 5
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to VCC
    19c6:	84 b8       	out	0x04, r8	; 4
  adcmv[1] = W5msReadADC(TP2);
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
    19ce:	8c 01       	movw	r16, r24

  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin 3 to output 0V
    19d0:	ac e0       	ldi	r26, 0x0C	; 12
    19d2:	9a 2e       	mov	r9, r26
    19d4:	97 b8       	out	0x07, r9	; 7
  R_PORT =  1<<(TP3*2);	//R_L-PORT 3 to VCC
    19d6:	f0 e1       	ldi	r31, 0x10	; 16
    19d8:	af 2e       	mov	r10, r31
    19da:	a5 b8       	out	0x05, r10	; 5
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to VCC
    19dc:	a4 b8       	out	0x04, r10	; 4
  adcmv[2] = W5msReadADC(TP3);
    19de:	82 e0       	ldi	r24, 0x02	; 2
    19e0:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
  sum_rm = (adcmv[0] + adcmv[1] + adcmv[2]); //add all three values
    19e4:	0e 0d       	add	r16, r14
    19e6:	1f 1d       	adc	r17, r15
    19e8:	08 0f       	add	r16, r24
    19ea:	19 1f       	adc	r17, r25

  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
    19ec:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
    19ee:	c8 b8       	out	0x08, r12	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    19f0:	c7 b8       	out	0x07, r12	; 7
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
    19f2:	d4 b8       	out	0x04, r13	; 4
  adcmv[0] = ADCconfig.U_AVCC - W5msReadADC(TP1);
    19f4:	c0 90 3d 01 	lds	r12, 0x013D
    19f8:	d0 90 3e 01 	lds	r13, 0x013E
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
    1a02:	c8 1a       	sub	r12, r24
    1a04:	d9 0a       	sbc	r13, r25
    1a06:	da 82       	std	Y+2, r13	; 0x02
    1a08:	c9 82       	std	Y+1, r12	; 0x01
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
    1a0a:	68 b8       	out	0x08, r6	; 8
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
    1a0c:	67 b8       	out	0x07, r6	; 7
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
    1a0e:	84 b8       	out	0x04, r8	; 4
  adcmv[1] = ADCconfig.U_AVCC - W5msReadADC(TP2);
    1a10:	e0 90 3d 01 	lds	r14, 0x013D
    1a14:	f0 90 3e 01 	lds	r15, 0x013E
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
    1a1e:	e8 1a       	sub	r14, r24
    1a20:	f9 0a       	sbc	r15, r25
    1a22:	fc 82       	std	Y+4, r15	; 0x04
    1a24:	eb 82       	std	Y+3, r14	; 0x03

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
    1a26:	98 b8       	out	0x08, r9	; 8
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
    1a28:	97 b8       	out	0x07, r9	; 7
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
    1a2a:	a4 b8       	out	0x04, r10	; 4
  adcmv[2] = ADCconfig.U_AVCC - W5msReadADC(TP3);
    1a2c:	a0 90 3d 01 	lds	r10, 0x013D
    1a30:	b0 90 3e 01 	lds	r11, 0x013E
    1a34:	82 e0       	ldi	r24, 0x02	; 2
    1a36:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>

  sum_c0 = (adcmv[0] + adcmv[1] + adcmv[2]);
    1a3a:	ec 0c       	add	r14, r12
    1a3c:	fd 1c       	adc	r15, r13
  adcmv[1] = ADCconfig.U_AVCC - W5msReadADC(TP2);

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
  adcmv[2] = ADCconfig.U_AVCC - W5msReadADC(TP3);
    1a3e:	a8 1a       	sub	r10, r24
    1a40:	b9 0a       	sbc	r11, r25

  sum_c0 = (adcmv[0] + adcmv[1] + adcmv[2]);
    1a42:	ea 0c       	add	r14, r10
    1a44:	fb 1c       	adc	r15, r11
  u680 = ((ADCconfig.U_AVCC * 3) - sum_rm - sum_c0);	//three times the voltage at the 680 Ohm
    1a46:	80 91 3d 01 	lds	r24, 0x013D
    1a4a:	90 91 3e 01 	lds	r25, 0x013E
    1a4e:	5c 01       	movw	r10, r24
    1a50:	aa 0c       	add	r10, r10
    1a52:	bb 1c       	adc	r11, r11
    1a54:	a8 0e       	add	r10, r24
    1a56:	b9 1e       	adc	r11, r25
    1a58:	a0 1a       	sub	r10, r16
    1a5a:	b1 0a       	sbc	r11, r17
    1a5c:	ae 18       	sub	r10, r14
    1a5e:	bf 08       	sbc	r11, r15
  pin_rm = (unsigned long)((unsigned long)sum_rm * (unsigned long)R_L_VAL) / (unsigned long)u680;
    1a60:	cc 24       	eor	r12, r12
    1a62:	dd 24       	eor	r13, r13
    1a64:	b8 01       	movw	r22, r16
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	20 e9       	ldi	r18, 0x90	; 144
    1a6c:	3a e1       	ldi	r19, 0x1A	; 26
    1a6e:	40 e0       	ldi	r20, 0x00	; 0
    1a70:	50 e0       	ldi	r21, 0x00	; 0
    1a72:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    1a76:	a6 01       	movw	r20, r12
    1a78:	95 01       	movw	r18, r10
    1a7a:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
    1a7e:	49 01       	movw	r8, r18
  adcmv[2] = pin_rm;	// for last output in row 2
    1a80:	3e 83       	std	Y+6, r19	; 0x06
    1a82:	2d 83       	std	Y+5, r18	; 0x05
  pin_rp = (unsigned long)((unsigned long)sum_c0 * (unsigned long)R_L_VAL) / (unsigned long)u680;
    1a84:	b7 01       	movw	r22, r14
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	20 e9       	ldi	r18, 0x90	; 144
    1a8c:	3a e1       	ldi	r19, 0x1A	; 26
    1a8e:	40 e0       	ldi	r20, 0x00	; 0
    1a90:	50 e0       	ldi	r21, 0x00	; 0
    1a92:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    1a96:	a6 01       	movw	r20, r12
    1a98:	95 01       	movw	r18, r10
    1a9a:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
    1a9e:	79 01       	movw	r14, r18
  lcd_clear();
    1aa0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_clear>
  lcd_fix_string(RIHI);	// "RiHi="
    1aa4:	85 e5       	ldi	r24, 0x55	; 85
    1aa6:	91 e0       	ldi	r25, 0x01	; 1
    1aa8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  DisplayValue(pin_rp,-1,LCD_CHAR_OMEGA,3);
    1aac:	b7 01       	movw	r22, r14
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	4f ef       	ldi	r20, 0xFF	; 255
    1ab4:	24 ef       	ldi	r18, 0xF4	; 244
    1ab6:	03 e0       	ldi	r16, 0x03	; 3
    1ab8:	0e 94 bf 02 	call	0x57e	; 0x57e <DisplayValue>
  lcd_line2();
    1abc:	80 ec       	ldi	r24, 0xC0	; 192
    1abe:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
  lcd_fix_string(RILO);	// "RiLo="
    1ac2:	8c e5       	ldi	r24, 0x5C	; 92
    1ac4:	91 e0       	ldi	r25, 0x01	; 1
    1ac6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  DisplayValue(pin_rm,-1,LCD_CHAR_OMEGA,3);
    1aca:	b4 01       	movw	r22, r8
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	4f ef       	ldi	r20, 0xFF	; 255
    1ad2:	24 ef       	ldi	r18, 0xF4	; 244
    1ad4:	0e 94 bf 02 	call	0x57e	; 0x57e <DisplayValue>
  wait_about2s();			//wait 2 seconds
    1ad8:	80 e9       	ldi	r24, 0x90	; 144
    1ada:	91 e0       	ldi	r25, 0x01	; 1
    1adc:	0e 94 bb 03 	call	0x776	; 0x776 <sleep_5ms>
#ifdef AUTO_CAL
  if ((pin_rp < 280) && (pin_rm < 250)) {
    1ae0:	f8 e1       	ldi	r31, 0x18	; 24
    1ae2:	ef 16       	cp	r14, r31
    1ae4:	f1 e0       	ldi	r31, 0x01	; 1
    1ae6:	ff 06       	cpc	r15, r31
    1ae8:	90 f4       	brcc	.+36     	; 0x1b0e <AutoCheck+0x5cc>
    1aea:	2a ef       	ldi	r18, 0xFA	; 250
    1aec:	82 16       	cp	r8, r18
    1aee:	91 04       	cpc	r9, r1
    1af0:	70 f4       	brcc	.+28     	; 0x1b0e <AutoCheck+0x5cc>
     // rp is below 28 Ohm and rm is below 25 Ohm
     (void) eeprom_write_word((uint16_t *)(&R680pl), pin_rp+R_L_VAL);  //hold VCC resistance value in EEprom
    1af2:	b7 01       	movw	r22, r14
    1af4:	60 57       	subi	r22, 0x70	; 112
    1af6:	75 4e       	sbci	r23, 0xE5	; 229
    1af8:	8b ea       	ldi	r24, 0xAB	; 171
    1afa:	91 e0       	ldi	r25, 0x01	; 1
    1afc:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__eewr_word_m168>
     (void) eeprom_write_word((uint16_t *)(&R680mi), pin_rm+R_L_VAL);  //hold GND resistance value in EEprom
    1b00:	b4 01       	movw	r22, r8
    1b02:	60 57       	subi	r22, 0x70	; 112
    1b04:	75 4e       	sbci	r23, 0xE5	; 229
    1b06:	8d ea       	ldi	r24, 0xAD	; 173
    1b08:	91 e0       	ldi	r25, 0x01	; 1
    1b0a:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__eewr_word_m168>
  }
#endif

  //measure Zero offset for Capacity measurement
  adcmv[3] = 0;
    1b0e:	18 86       	std	Y+8, r1	; 0x08
    1b10:	1f 82       	std	Y+7, r1	; 0x07
  PartFound = PART_NONE;
    1b12:	10 92 07 01 	sts	0x0107, r1
  ReadCapacity(TP3, TP1);
    1b16:	82 e0       	ldi	r24, 0x02	; 2
    1b18:	60 e0       	ldi	r22, 0x00	; 0
    1b1a:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <ReadCapacity>
  adcmv[5] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:3
    1b1e:	00 91 60 01 	lds	r16, 0x0160
    1b22:	10 91 61 01 	lds	r17, 0x0161
    1b26:	1c 87       	std	Y+12, r17	; 0x0c
    1b28:	0b 87       	std	Y+11, r16	; 0x0b
  ReadCapacity(TP3, TP2);
    1b2a:	82 e0       	ldi	r24, 0x02	; 2
    1b2c:	61 e0       	ldi	r22, 0x01	; 1
    1b2e:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <ReadCapacity>
  adcmv[6] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:3
    1b32:	e0 90 60 01 	lds	r14, 0x0160
    1b36:	f0 90 61 01 	lds	r15, 0x0161
    1b3a:	fe 86       	std	Y+14, r15	; 0x0e
    1b3c:	ed 86       	std	Y+13, r14	; 0x0d
  ReadCapacity(TP2, TP1);
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	60 e0       	ldi	r22, 0x00	; 0
    1b42:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <ReadCapacity>
  adcmv[2] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:2
    1b46:	c0 90 60 01 	lds	r12, 0x0160
    1b4a:	d0 90 61 01 	lds	r13, 0x0161
    1b4e:	de 82       	std	Y+6, r13	; 0x06
    1b50:	cd 82       	std	Y+5, r12	; 0x05
  ReadCapacity(TP1, TP3);
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	62 e0       	ldi	r22, 0x02	; 2
    1b56:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <ReadCapacity>
  adcmv[1] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:1
    1b5a:	80 91 60 01 	lds	r24, 0x0160
    1b5e:	90 91 61 01 	lds	r25, 0x0161
    1b62:	9c 83       	std	Y+4, r25	; 0x04
    1b64:	8b 83       	std	Y+3, r24	; 0x03
  ReadCapacity(TP2, TP3);
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	62 e0       	ldi	r22, 0x02	; 2
    1b6a:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <ReadCapacity>
  adcmv[4] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:2
    1b6e:	80 91 60 01 	lds	r24, 0x0160
    1b72:	90 91 61 01 	lds	r25, 0x0161
    1b76:	9a 87       	std	Y+10, r25	; 0x0a
    1b78:	89 87       	std	Y+9, r24	; 0x09
  ReadCapacity(TP1, TP2);
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	61 e0       	ldi	r22, 0x01	; 1
    1b7e:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <ReadCapacity>
  adcmv[0] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:1
    1b82:	80 91 60 01 	lds	r24, 0x0160
    1b86:	90 91 61 01 	lds	r25, 0x0161
    1b8a:	9a 83       	std	Y+2, r25	; 0x02
    1b8c:	89 83       	std	Y+1, r24	; 0x01
  lcd_clear();
    1b8e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_clear>
  lcd_fix_string(C0_str);			//output "C0 "
    1b92:	83 e6       	ldi	r24, 0x63	; 99
    1b94:	91 e0       	ldi	r25, 0x01	; 1
    1b96:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
    1b9a:	b8 01       	movw	r22, r16
    1b9c:	88 27       	eor	r24, r24
    1b9e:	77 fd       	sbrc	r23, 7
    1ba0:	80 95       	com	r24
    1ba2:	98 2f       	mov	r25, r24
    1ba4:	40 e0       	ldi	r20, 0x00	; 0
    1ba6:	20 e2       	ldi	r18, 0x20	; 32
    1ba8:	03 e0       	ldi	r16, 0x03	; 3
    1baa:	0e 94 bf 02 	call	0x57e	; 0x57e <DisplayValue>
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
    1bae:	b7 01       	movw	r22, r14
    1bb0:	88 27       	eor	r24, r24
    1bb2:	77 fd       	sbrc	r23, 7
    1bb4:	80 95       	com	r24
    1bb6:	98 2f       	mov	r25, r24
    1bb8:	40 e0       	ldi	r20, 0x00	; 0
    1bba:	20 e2       	ldi	r18, 0x20	; 32
    1bbc:	0e 94 bf 02 	call	0x57e	; 0x57e <DisplayValue>
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
    1bc0:	b6 01       	movw	r22, r12
    1bc2:	88 27       	eor	r24, r24
    1bc4:	77 fd       	sbrc	r23, 7
    1bc6:	80 95       	com	r24
    1bc8:	98 2f       	mov	r25, r24
    1bca:	44 ef       	ldi	r20, 0xF4	; 244
    1bcc:	26 e4       	ldi	r18, 0x46	; 70
    1bce:	0e 94 bf 02 	call	0x57e	; 0x57e <DisplayValue>
    1bd2:	8e 01       	movw	r16, r28
    1bd4:	0f 5f       	subi	r16, 0xFF	; 255
    1bd6:	1f 4f       	sbci	r17, 0xFF	; 255
void AutoCheck(void) {
    1bd8:	ce 01       	movw	r24, r28
    1bda:	0f 96       	adiw	r24, 0x0f	; 15
    1bdc:	f8 01       	movw	r30, r16
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
#ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
    1bde:	21 91       	ld	r18, Z+
    1be0:	31 91       	ld	r19, Z+
    1be2:	27 34       	cpi	r18, 0x47	; 71
    1be4:	31 05       	cpc	r19, r1
    1be6:	ec f4       	brge	.+58     	; 0x1c22 <AutoCheck+0x6e0>
  lcd_fix_string(C0_str);			//output "C0 "
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
#ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
    1be8:	e8 17       	cp	r30, r24
    1bea:	f9 07       	cpc	r31, r25
    1bec:	c1 f7       	brne	.-16     	; 0x1bde <AutoCheck+0x69c>
    1bee:	ee 24       	eor	r14, r14
    1bf0:	ff 24       	eor	r15, r15
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
    1bf2:	f8 01       	movw	r30, r16
    1bf4:	60 81       	ld	r22, Z
    1bf6:	0e 5f       	subi	r16, 0xFE	; 254
    1bf8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bfa:	61 5f       	subi	r22, 0xF1	; 241
    1bfc:	c7 01       	movw	r24, r14
    1bfe:	87 54       	subi	r24, 0x47	; 71
    1c00:	9e 4f       	sbci	r25, 0xFE	; 254
    1c02:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <__eewr_byte_m168>
    1c06:	08 94       	sec
    1c08:	e1 1c       	adc	r14, r1
    1c0a:	f1 1c       	adc	r15, r1
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
#ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
    1c0c:	f7 e0       	ldi	r31, 0x07	; 7
    1c0e:	ef 16       	cp	r14, r31
    1c10:	f1 04       	cpc	r15, r1
    1c12:	79 f7       	brne	.-34     	; 0x1bf2 <AutoCheck+0x6b0>
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
  }
  lcd_line2();
    1c14:	80 ec       	ldi	r24, 0xC0	; 192
    1c16:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
  lcd_fix_string(OK_str);		// output "OK"
    1c1a:	8b ee       	ldi	r24, 0xEB	; 235
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
no_c0save:
#endif
 wait_about2s();		//wait 2 seconds
    1c22:	80 e9       	ldi	r24, 0x90	; 144
    1c24:	91 e0       	ldi	r25, 0x01	; 1
    1c26:	0e 94 bb 03 	call	0x776	; 0x776 <sleep_5ms>
    1c2a:	70 e4       	ldi	r23, 0x40	; 64
    1c2c:	c7 2e       	mov	r12, r23
 
#ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
    1c2e:	10 e0       	ldi	r17, 0x00	; 0
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
    1c30:	6a e0       	ldi	r22, 0x0A	; 10
    1c32:	86 2e       	mov	r8, r22
    1c34:	91 2c       	mov	r9, r1
    1c36:	a1 2c       	mov	r10, r1
    1c38:	b1 2c       	mov	r11, r1
     lcd_data('3');
     lcd_fix_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1c3a:	58 e5       	ldi	r21, 0x58	; 88
    1c3c:	e5 2e       	mov	r14, r21
    1c3e:	51 e0       	ldi	r21, 0x01	; 1
    1c40:	f5 2e       	mov	r15, r21
 
#ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
     lcd_clear();
    1c42:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_clear>
     lcd_data('1');
    1c46:	81 e3       	ldi	r24, 0x31	; 49
    1c48:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
     lcd_fix_string(CapZeich);	// "-||-"
    1c4c:	8d e1       	ldi	r24, 0x1D	; 29
    1c4e:	91 e0       	ldi	r25, 0x01	; 1
    1c50:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_data('3');
    1c54:	83 e3       	ldi	r24, 0x33	; 51
    1c56:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
     lcd_fix_string(MinCap_str); // " >100nF!"
    1c5a:	87 e6       	ldi	r24, 0x67	; 103
    1c5c:	91 e0       	ldi	r25, 0x01	; 1
    1c5e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     PartFound = PART_NONE;
    1c62:	10 92 07 01 	sts	0x0107, r1
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
    1c66:	82 e0       	ldi	r24, 0x02	; 2
    1c68:	60 e0       	ldi	r22, 0x00	; 0
    1c6a:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <ReadCapacity>
    1c6e:	20 91 58 01 	lds	r18, 0x0158
    1c72:	30 91 59 01 	lds	r19, 0x0159
    1c76:	40 91 5a 01 	lds	r20, 0x015A
    1c7a:	50 91 5b 01 	lds	r21, 0x015B
    1c7e:	00 91 68 01 	lds	r16, 0x0168
     while (cap.cpre < -9) {
    1c82:	07 c0       	rjmp	.+14     	; 0x1c92 <AutoCheck+0x750>
        cap.cpre++;
        cap.cval /= 10;
    1c84:	ca 01       	movw	r24, r20
    1c86:	b9 01       	movw	r22, r18
    1c88:	a5 01       	movw	r20, r10
    1c8a:	94 01       	movw	r18, r8
    1c8c:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
    1c90:	0f 5f       	subi	r16, 0xFF	; 255
     lcd_data('3');
     lcd_fix_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1c92:	07 3f       	cpi	r16, 0xF7	; 247
    1c94:	bc f3       	brlt	.-18     	; 0x1c84 <AutoCheck+0x742>
    1c96:	00 93 68 01 	sts	0x0168, r16
    1c9a:	20 93 58 01 	sts	0x0158, r18
    1c9e:	f7 01       	movw	r30, r14
    1ca0:	31 83       	std	Z+1, r19	; 0x01
    1ca2:	42 83       	std	Z+2, r20	; 0x02
    1ca4:	53 83       	std	Z+3, r21	; 0x03
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1ca6:	07 3f       	cpi	r16, 0xF7	; 247
    1ca8:	09 f0       	breq	.+2      	; 0x1cac <AutoCheck+0x76a>
    1caa:	be c0       	rjmp	.+380    	; 0x1e28 <AutoCheck+0x8e6>
    1cac:	20 36       	cpi	r18, 0x60	; 96
    1cae:	31 05       	cpc	r19, r1
    1cb0:	41 05       	cpc	r20, r1
    1cb2:	51 05       	cpc	r21, r1
    1cb4:	08 f4       	brcc	.+2      	; 0x1cb8 <AutoCheck+0x776>
    1cb6:	b8 c0       	rjmp	.+368    	; 0x1e28 <AutoCheck+0x8e6>
    1cb8:	20 3f       	cpi	r18, 0xF0	; 240
    1cba:	f5 e5       	ldi	r31, 0x55	; 85
    1cbc:	3f 07       	cpc	r19, r31
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	4f 07       	cpc	r20, r31
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	5f 07       	cpc	r21, r31
    1cc6:	08 f0       	brcs	.+2      	; 0x1cca <AutoCheck+0x788>
    1cc8:	af c0       	rjmp	.+350    	; 0x1e28 <AutoCheck+0x8e6>
        cap_found++;
    1cca:	1f 5f       	subi	r17, 0xFF	; 255
     } else {
        cap_found = 0;		// wait for stable connection
     }
     if (cap_found > 1) {
    1ccc:	12 30       	cpi	r17, 0x02	; 2
    1cce:	09 f0       	breq	.+2      	; 0x1cd2 <AutoCheck+0x790>
    1cd0:	ac c0       	rjmp	.+344    	; 0x1e2a <AutoCheck+0x8e8>
        // value of capacitor is correct
        (void) eeprom_write_word((uint16_t *)(&ref_offset), load_diff);	// hold zero offset + slew rate dependend offset
    1cd2:	60 91 6a 01 	lds	r22, 0x016A
    1cd6:	70 91 6b 01 	lds	r23, 0x016B
    1cda:	87 eb       	ldi	r24, 0xB7	; 183
    1cdc:	91 e0       	ldi	r25, 0x01	; 1
    1cde:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__eewr_word_m168>
        lcd_clear();
    1ce2:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_clear>
        lcd_fix_string(REF_C_str);	// "REF_C="
    1ce6:	8f e6       	ldi	r24, 0x6F	; 111
    1ce8:	91 e0       	ldi	r25, 0x01	; 1
    1cea:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        lcd_string(itoa(load_diff, outval, 10));	//output REF_C_KORR
    1cee:	80 91 6a 01 	lds	r24, 0x016A
    1cf2:	90 91 6b 01 	lds	r25, 0x016B
    1cf6:	6c e0       	ldi	r22, 0x0C	; 12
    1cf8:	71 e0       	ldi	r23, 0x01	; 1
    1cfa:	4a e0       	ldi	r20, 0x0A	; 10
    1cfc:	50 e0       	ldi	r21, 0x00	; 0
    1cfe:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <itoa>
    1d02:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_string>
        eeprom_write_byte((uint8_t *)(&EE_ESR_ZERO), (uint8_t)ESR_ZERO); // set to initial zero offset
    1d06:	80 ec       	ldi	r24, 0xC0	; 192
    1d08:	91 e0       	ldi	r25, 0x01	; 1
    1d0a:	6d e1       	ldi	r22, 0x1D	; 29
    1d0c:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <__eewr_byte_m168>
        wait_about1s();
        }
//#######################################
#endif
 #ifdef AUTOSCALE_ADC
        ADC_PORT =  TXD_VAL;	//ADC-Port 1 to GND
    1d10:	88 e0       	ldi	r24, 0x08	; 8
    1d12:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    1d14:	89 e0       	ldi	r24, 0x09	; 9
    1d16:	87 b9       	out	0x07, r24	; 7
        R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1d18:	80 e2       	ldi	r24, 0x20	; 32
    1d1a:	84 b9       	out	0x04, r24	; 4
        do {
           adcmv[0] = ReadADC(TP3);
    1d1c:	82 e0       	ldi	r24, 0x02	; 2
    1d1e:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
        } while (adcmv[0] > 980);
    1d22:	23 e0       	ldi	r18, 0x03	; 3
    1d24:	85 3d       	cpi	r24, 0xD5	; 213
    1d26:	92 07       	cpc	r25, r18
    1d28:	cc f7       	brge	.-14     	; 0x1d1c <AutoCheck+0x7da>
        R_DDR = 0;		//all Pins to input 
    1d2a:	14 b8       	out	0x04, r1	; 4
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1d2c:	10 92 3c 01 	sts	0x013C, r1
    1d30:	10 92 3b 01 	sts	0x013B, r1
        adcmv[0] = ReadADC(TP3);  // get cap voltage with VCC reference
    1d34:	82 e0       	ldi	r24, 0x02	; 2
    1d36:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
    1d3a:	4c 01       	movw	r8, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1d3c:	8f ea       	ldi	r24, 0xAF	; 175
    1d3e:	91 e0       	ldi	r25, 0x01	; 1
    1d40:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__eerd_byte_m168>
    1d44:	99 27       	eor	r25, r25
    1d46:	87 fd       	sbrc	r24, 7
    1d48:	90 95       	com	r25
    1d4a:	20 91 3f 01 	lds	r18, 0x013F
    1d4e:	30 91 40 01 	lds	r19, 0x0140
    1d52:	82 0f       	add	r24, r18
    1d54:	93 1f       	adc	r25, r19
    1d56:	90 93 3c 01 	sts	0x013C, r25
    1d5a:	80 93 3b 01 	sts	0x013B, r24
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
    1d5e:	82 e0       	ldi	r24, 0x02	; 2
    1d60:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
    1d64:	8c 01       	movw	r16, r24
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1d66:	10 92 3c 01 	sts	0x013C, r1
    1d6a:	10 92 3b 01 	sts	0x013B, r1
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
    1d6e:	82 e0       	ldi	r24, 0x02	; 2
    1d70:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
    1d74:	5c 01       	movw	r10, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1d76:	c0 90 3f 01 	lds	r12, 0x013F
    1d7a:	d0 90 40 01 	lds	r13, 0x0140
    1d7e:	8f ea       	ldi	r24, 0xAF	; 175
    1d80:	91 e0       	ldi	r25, 0x01	; 1
    1d82:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__eerd_byte_m168>
    1d86:	99 27       	eor	r25, r25
    1d88:	87 fd       	sbrc	r24, 7
    1d8a:	90 95       	com	r25
    1d8c:	8c 0d       	add	r24, r12
    1d8e:	9d 1d       	adc	r25, r13
    1d90:	90 93 3c 01 	sts	0x013C, r25
    1d94:	80 93 3b 01 	sts	0x013B, r24
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1d98:	8f ea       	ldi	r24, 0xAF	; 175
    1d9a:	91 e0       	ldi	r25, 0x01	; 1
    1d9c:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__eerd_byte_m168>
    1da0:	f8 2e       	mov	r15, r24
        lcd_line2();
    1da2:	80 ec       	ldi	r24, 0xC0	; 192
    1da4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
        lcd_fix_string(REF_R_str);	// "REF_R="
    1da8:	86 e7       	ldi	r24, 0x76	; 118
    1daa:	91 e0       	ldi	r25, 0x01	; 1
    1dac:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1db0:	8f ea       	ldi	r24, 0xAF	; 175
    1db2:	91 e0       	ldi	r25, 0x01	; 1
    1db4:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__eerd_byte_m168>
        ADCconfig.U_Bandgap = ADC_internal_reference;
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
        ADCconfig.U_Bandgap = ADC_internal_reference;
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1db8:	43 e0       	ldi	r20, 0x03	; 3
    1dba:	e4 2e       	mov	r14, r20
    1dbc:	e8 0e       	add	r14, r24
    1dbe:	a8 0c       	add	r10, r8
    1dc0:	b9 1c       	adc	r11, r9
    1dc2:	a0 1a       	sub	r10, r16
    1dc4:	b1 0a       	sbc	r11, r17
    1dc6:	a0 1a       	sub	r10, r16
    1dc8:	b1 0a       	sbc	r11, r17
    1dca:	b5 01       	movw	r22, r10
    1dcc:	88 27       	eor	r24, r24
    1dce:	77 fd       	sbrc	r23, 7
    1dd0:	80 95       	com	r24
    1dd2:	98 2f       	mov	r25, r24
    1dd4:	2f 2d       	mov	r18, r15
    1dd6:	33 27       	eor	r19, r19
    1dd8:	27 fd       	sbrc	r18, 7
    1dda:	30 95       	com	r19
    1ddc:	2c 0d       	add	r18, r12
    1dde:	3d 1d       	adc	r19, r13
    1de0:	40 e0       	ldi	r20, 0x00	; 0
    1de2:	50 e0       	ldi	r21, 0x00	; 0
    1de4:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    1de8:	00 0f       	add	r16, r16
    1dea:	11 1f       	adc	r17, r17
    1dec:	98 01       	movw	r18, r16
    1dee:	44 27       	eor	r20, r20
    1df0:	37 fd       	sbrc	r19, 7
    1df2:	40 95       	com	r20
    1df4:	54 2f       	mov	r21, r20
    1df6:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__divmodsi4>
        lcd_line2();
        lcd_fix_string(REF_R_str);	// "REF_R="
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1dfa:	e2 0e       	add	r14, r18
        (void) eeprom_write_byte((uint8_t *)(&RefDiff), (uint8_t)udiff2);	// hold offset for true reference Voltage
    1dfc:	8f ea       	ldi	r24, 0xAF	; 175
    1dfe:	91 e0       	ldi	r25, 0x01	; 1
    1e00:	6e 2d       	mov	r22, r14
    1e02:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <__eewr_byte_m168>
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
    1e06:	8e 2d       	mov	r24, r14
    1e08:	99 27       	eor	r25, r25
    1e0a:	87 fd       	sbrc	r24, 7
    1e0c:	90 95       	com	r25
    1e0e:	6c e0       	ldi	r22, 0x0C	; 12
    1e10:	71 e0       	ldi	r23, 0x01	; 1
    1e12:	4a e0       	ldi	r20, 0x0A	; 10
    1e14:	50 e0       	ldi	r21, 0x00	; 0
    1e16:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <itoa>
    1e1a:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_string>
 #endif
        wait_about4s();
    1e1e:	80 e2       	ldi	r24, 0x20	; 32
    1e20:	93 e0       	ldi	r25, 0x03	; 3
    1e22:	0e 94 bb 03 	call	0x776	; 0x776 <sleep_5ms>
        break;
    1e26:	19 c0       	rjmp	.+50     	; 0x1e5a <AutoCheck+0x918>
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1e28:	10 e0       	ldi	r17, 0x00	; 0
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
 #endif
        wait_about4s();
        break;
     }
     lcd_line2();
    1e2a:	80 ec       	ldi	r24, 0xC0	; 192
    1e2c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
     DisplayValue(cap.cval,cap.cpre,'F',4);
    1e30:	60 91 58 01 	lds	r22, 0x0158
    1e34:	70 91 59 01 	lds	r23, 0x0159
    1e38:	80 91 5a 01 	lds	r24, 0x015A
    1e3c:	90 91 5b 01 	lds	r25, 0x015B
    1e40:	40 91 68 01 	lds	r20, 0x0168
    1e44:	26 e4       	ldi	r18, 0x46	; 70
    1e46:	04 e0       	ldi	r16, 0x04	; 4
    1e48:	0e 94 bf 02 	call	0x57e	; 0x57e <DisplayValue>
     wait_about200ms();			// wait additional time
    1e4c:	88 e2       	ldi	r24, 0x28	; 40
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	0e 94 bb 03 	call	0x776	; 0x776 <sleep_5ms>
    1e54:	ca 94       	dec	r12
 wait_about2s();		//wait 2 seconds
 
#ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
    1e56:	09 f0       	breq	.+2      	; 0x1e5a <AutoCheck+0x918>
    1e58:	f4 ce       	rjmp	.-536    	; 0x1c42 <AutoCheck+0x700>
     wait_about200ms();			// wait additional time
  } // end for ww

#endif

  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    1e5a:	89 e1       	ldi	r24, 0x19	; 25
    1e5c:	80 93 39 01 	sts	0x0139, r24
  lcd_clear();
    1e60:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_clear>
  lcd_line2();
    1e64:	80 ec       	ldi	r24, 0xC0	; 192
    1e66:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
  lcd_fix_string(VERSION_str);	//"Version ..."
    1e6a:	87 e4       	ldi	r24, 0x47	; 71
    1e6c:	91 e0       	ldi	r25, 0x01	; 1
    1e6e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  lcd_line1();
    1e72:	80 e8       	ldi	r24, 0x80	; 128
    1e74:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
  lcd_fix_string(ATE);		//"Selftest End"
    1e78:	8c ed       	ldi	r24, 0xDC	; 220
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        // if key is pressed, don't repeat
        break;
     }
  }
#endif
 PartFound = PART_NONE;
    1e80:	10 92 07 01 	sts	0x0107, r1
 wait_about1s();			//wait 1 seconds
    1e84:	88 ec       	ldi	r24, 0xC8	; 200
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	0e 94 bb 03 	call	0x776	; 0x776 <sleep_5ms>
 } 
    1e8c:	2e 96       	adiw	r28, 0x0e	; 14
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	de bf       	out	0x3e, r29	; 62
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	cd bf       	out	0x3d, r28	; 61
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	1f 91       	pop	r17
    1e9e:	0f 91       	pop	r16
    1ea0:	ff 90       	pop	r15
    1ea2:	ef 90       	pop	r14
    1ea4:	df 90       	pop	r13
    1ea6:	cf 90       	pop	r12
    1ea8:	bf 90       	pop	r11
    1eaa:	af 90       	pop	r10
    1eac:	9f 90       	pop	r9
    1eae:	8f 90       	pop	r8
    1eb0:	7f 90       	pop	r7
    1eb2:	6f 90       	pop	r6
    1eb4:	5f 90       	pop	r5
    1eb6:	4f 90       	pop	r4
    1eb8:	3f 90       	pop	r3
    1eba:	2f 90       	pop	r2
    1ebc:	08 95       	ret

00001ebe <main>:
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
  EMPTY_INTERRUPT(ADC_vect);
#endif

//begin of transistortester program
int main(void) {
    1ebe:	0f 93       	push	r16
    1ec0:	1f 93       	push	r17
    1ec2:	cf 93       	push	r28
    1ec4:	df 93       	push	r29
  //switch on
#ifndef EXTREF2PD6
  // Switch on directly only without the PC4-PD6 connection.
  // With this connection the PD6 (AIN0) is connected to the external 2.5V reference voltage
  // and should never be switched to VCC directly.
  ON_DDR = (1<<ON_PIN);
    1ec6:	10 e4       	ldi	r17, 0x40	; 64
    1ec8:	1a b9       	out	0x0a, r17	; 10
#endif
#ifdef PULLUP_DISABLE
  ON_PORT = (1<<ON_PIN); 		// switch power on 
    1eca:	1b b9       	out	0x0b, r17	; 11
#else
  ON_PORT = (1<<ON_PIN)|(1<<RST_PIN); 	// switch power on , enable internal Pullup for Start-Pin
#endif
  uint8_t tmp;
  //ADC-Init
  ADCSRA = (1<<ADEN) | AUTO_CLOCK_DIV;	//prescaler=8 or 64 (if 8Mhz clock)
    1ecc:	86 e8       	ldi	r24, 0x86	; 134
    1ece:	80 93 7a 00 	sts	0x007A, r24
// #define WDRF_HOME MCU_STATUS_REG
 #define WDRF_HOME MCUCSR
#else
 #define WDRF_HOME MCUSR
#endif
  tmp = (WDRF_HOME & (1<<WDRF));	// save Watch Dog Flag
    1ed2:	04 b7       	in	r16, 0x34	; 52
  WDRF_HOME &= ~(1<<WDRF);	 	//reset Watch Dog flag
    1ed4:	84 b7       	in	r24, 0x34	; 52
    1ed6:	87 7f       	andi	r24, 0xF7	; 247
    1ed8:	84 bf       	out	0x34, r24	; 52
  wdt_disable();			// disable Watch Dog
    1eda:	88 e1       	ldi	r24, 0x18	; 24
    1edc:	0f b6       	in	r0, 0x3f	; 63
    1ede:	f8 94       	cli
    1ee0:	80 93 60 00 	sts	0x0060, r24
    1ee4:	10 92 60 00 	sts	0x0060, r1
    1ee8:	0f be       	out	0x3f, r0	; 63
#ifndef __AVR_ATmega8__
  // switch off unused Parts
  PRR = (1<<PRTWI) | (1<<PRTIM0) | (1<<PRSPI) | (1<<PRUSART0);
    1eea:	86 ea       	ldi	r24, 0xA6	; 166
    1eec:	80 93 64 00 	sts	0x0064, r24
  DIDR0 = (1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D);	
    1ef0:	88 e3       	ldi	r24, 0x38	; 56
    1ef2:	80 93 7e 00 	sts	0x007E, r24
  TCCR2A = (0<<WGM21) | (0<<WGM20);		// Counter 2 normal mode
    1ef6:	10 92 b0 00 	sts	0x00B0, r1
 #endif 
 #if F_CPU == 2000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (0<<CS20);	//prescaler 128, 128us @ 2MHz
 #endif 
 #if F_CPU >= 8000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (1<<CS20);	//prescaler 1024, 128us @ 8MHz, 64us @ 16MHz
    1efa:	87 e0       	ldi	r24, 0x07	; 7
    1efc:	80 93 b1 00 	sts	0x00B1, r24
 #endif 
  sei();				// enable interrupts
    1f00:	78 94       	sei
#endif
  lcd_init();				//initialize LCD
    1f02:	0e 94 09 01 	call	0x212	; 0x212 <lcd_init>
	
//  ADC_PORT = TXD_VAL;
//  ADC_DDR = TXD_MSK;
  if(tmp) { 
    1f06:	03 ff       	sbrs	r16, 3
    1f08:	0c c0       	rjmp	.+24     	; 0x1f22 <main+0x64>
     // check if  Watchdog-Event 
     // this happens, if the Watchdog is not reset for 2s
     // can happen, if any loop in the Program doen't finish.
     lcd_line1();
    1f0a:	80 e8       	ldi	r24, 0x80	; 128
    1f0c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
     lcd_fix_string(TestTimedOut);	//Output Timeout
    1f10:	83 ed       	ldi	r24, 0xD3	; 211
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     wait3s();				//wait for 3 s
    1f18:	0e 94 01 15 	call	0x2a02	; 0x2a02 <wait3s>
     ON_PORT = 0;			//shut off!
    1f1c:	1b b8       	out	0x0b, r1	; 11
     ON_DDR = (1<<ON_PIN);		//switch to GND
    1f1e:	1a b9       	out	0x0a, r17	; 10
     return 0;
    1f20:	47 c5       	rjmp	.+2702   	; 0x29b0 <main+0xaf2>
  }
  LCDLoadCustomChar(LCD_CHAR_DIODE1);	//Custom-Character Diode symbol
    1f22:	88 e4       	ldi	r24, 0x48	; 72
    1f24:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
  lcd_fix_customchar(DiodeIcon1);	//load Character  >|
    1f28:	8d e7       	ldi	r24, 0x7D	; 125
    1f2a:	91 e0       	ldi	r25, 0x01	; 1
    1f2c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_DIODE2);	//Custom-Character 
    1f30:	80 e5       	ldi	r24, 0x50	; 80
    1f32:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
  lcd_fix_customchar(DiodeIcon2);	//load Character  |<
    1f36:	85 e8       	ldi	r24, 0x85	; 133
    1f38:	91 e0       	ldi	r25, 0x01	; 1
    1f3a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_CAP);	//Custom-Character  Capacitor symbol
    1f3e:	88 e5       	ldi	r24, 0x58	; 88
    1f40:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
  lcd_fix_customchar(CapIcon);		//load Character  ||
    1f44:	8d e8       	ldi	r24, 0x8D	; 141
    1f46:	91 e0       	ldi	r25, 0x01	; 1
    1f48:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS1);	//Custom-Character Resistor symbol
    1f4c:	88 e7       	ldi	r24, 0x78	; 120
    1f4e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
  lcd_fix_customchar(ResIcon1);		//load Character  [
    1f52:	85 e9       	ldi	r24, 0x95	; 149
    1f54:	91 e0       	ldi	r25, 0x01	; 1
    1f56:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS2);	//Custom-Character 
    1f5a:	80 e7       	ldi	r24, 0x70	; 112
    1f5c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
  lcd_fix_customchar(ResIcon2);		//load Character  ]
    1f60:	8d e9       	ldi	r24, 0x9D	; 157
    1f62:	91 e0       	ldi	r25, 0x01	; 1
    1f64:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
#endif
#ifdef PULLUP_DISABLE
 #ifdef __AVR_ATmega8__
  SFIOR = (1<<PUD);		// disable Pull-Up Resistors mega8
 #else
  MCUCR = (1<<PUD);		// disable Pull-Up Resistors mega168 family
    1f68:	80 e1       	ldi	r24, 0x10	; 16
    1f6a:	85 bf       	out	0x35, r24	; 53
  }
#else
  #define display_time OFF_WAIT_TIME
#endif

  empty_count = 0;
    1f6c:	10 92 43 01 	sts	0x0143, r1
  mess_count = 0;
    1f70:	10 92 0b 01 	sts	0x010B, r1


//*****************************************************************
//Entry: if start key is pressed before shut down
start:
  PartFound = PART_NONE;
    1f74:	10 92 07 01 	sts	0x0107, r1
  NumOfDiodes = 0;
    1f78:	10 92 05 01 	sts	0x0105, r1
  PartReady = 0;
    1f7c:	10 92 04 01 	sts	0x0104, r1
  PartMode = 0;
    1f80:	10 92 06 01 	sts	0x0106, r1
  WithReference = 0;		// no precision reference voltage
    1f84:	10 92 42 01 	sts	0x0142, r1
  lcd_clear();
    1f88:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_clear>
  ADC_DDR = TXD_MSK;		//activate Software-UART 
    1f8c:	18 e0       	ldi	r17, 0x08	; 8
    1f8e:	17 b9       	out	0x07, r17	; 7
#ifdef AUTO_CAL
  resis680pl = eeprom_read_word(&R680pl);
    1f90:	8b ea       	ldi	r24, 0xAB	; 171
    1f92:	91 e0       	ldi	r25, 0x01	; 1
    1f94:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__eerd_word_m168>
    1f98:	90 93 09 01 	sts	0x0109, r25
    1f9c:	80 93 08 01 	sts	0x0108, r24
  resis680mi = eeprom_read_word(&R680mi);
    1fa0:	8d ea       	ldi	r24, 0xAD	; 173
    1fa2:	91 e0       	ldi	r25, 0x01	; 1
    1fa4:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__eerd_word_m168>
    1fa8:	90 93 03 01 	sts	0x0103, r25
    1fac:	80 93 02 01 	sts	0x0102, r24
#endif

  ResistorsFound = 0;
    1fb0:	10 92 55 01 	sts	0x0155, r1
  cap.ca = 0;
    1fb4:	10 92 66 01 	sts	0x0166, r1
  cap.cb = 0;
    1fb8:	10 92 67 01 	sts	0x0167, r1
#ifdef WITH_UART
  uart_newline();		// start of new measurement
    1fbc:	0e 94 e7 00 	call	0x1ce	; 0x1ce <uart_newline>
#endif
  ADCconfig.RefFlag = 0;
    1fc0:	10 92 3a 01 	sts	0x013A, r1
  ADCconfig.U_AVCC = U_VCC;	// set initial VCC Voltage
    1fc4:	88 e8       	ldi	r24, 0x88	; 136
    1fc6:	93 e1       	ldi	r25, 0x13	; 19
    1fc8:	90 93 3e 01 	sts	0x013E, r25
    1fcc:	80 93 3d 01 	sts	0x013D, r24
  ADCconfig.Samples = 190;		// set number of ADC samples near to max
    1fd0:	8e eb       	ldi	r24, 0xBE	; 190
    1fd2:	80 93 39 01 	sts	0x0139, r24
  ADC_PORT = TXD_VAL;
    1fd6:	18 b9       	out	0x08, r17	; 8
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND
    1fd8:	88 e1       	ldi	r24, 0x18	; 24
    1fda:	87 b9       	out	0x07, r24	; 7
  wait1ms();
    1fdc:	0e 94 13 15 	call	0x2a26	; 0x2a26 <wait1ms>
  ADC_DDR =  TXD_MSK; 	// switch pin with reference back to input
    1fe0:	17 b9       	out	0x07, r17	; 7
#if FLASHEND > 0x1fff
  trans.uBE[1] = W5msReadADC(TPREF); // read voltage of precision reference
    1fe2:	84 e0       	ldi	r24, 0x04	; 4
    1fe4:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
    1fe8:	ec 01       	movw	r28, r24
    1fea:	90 93 51 01 	sts	0x0151, r25
    1fee:	80 93 50 01 	sts	0x0150, r24
  if ((trans.uBE[1] > 2250) && (trans.uBE[1] < 2750)) {
    1ff2:	8b 5c       	subi	r24, 0xCB	; 203
    1ff4:	98 40       	sbci	r25, 0x08	; 8
    1ff6:	21 e0       	ldi	r18, 0x01	; 1
    1ff8:	83 3f       	cpi	r24, 0xF3	; 243
    1ffa:	92 07       	cpc	r25, r18
    1ffc:	c0 f4       	brcc	.+48     	; 0x202e <main+0x170>
     // precision voltage reference connected, update U_AVCC
     WithReference = 1;
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	80 93 42 01 	sts	0x0142, r24
     ADCconfig.U_AVCC = (unsigned long)((unsigned long)ADCconfig.U_AVCC * 2495) / trans.uBE[1];
    2004:	60 91 3d 01 	lds	r22, 0x013D
    2008:	70 91 3e 01 	lds	r23, 0x013E
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	2f eb       	ldi	r18, 0xBF	; 191
    2012:	39 e0       	ldi	r19, 0x09	; 9
    2014:	40 e0       	ldi	r20, 0x00	; 0
    2016:	50 e0       	ldi	r21, 0x00	; 0
    2018:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    201c:	9e 01       	movw	r18, r28
    201e:	40 e0       	ldi	r20, 0x00	; 0
    2020:	50 e0       	ldi	r21, 0x00	; 0
    2022:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
    2026:	30 93 3e 01 	sts	0x013E, r19
    202a:	20 93 3d 01 	sts	0x013D, r18
  }
#endif
  lcd_line1();	//1. row 
    202e:	80 e8       	ldi	r24, 0x80	; 128
    2030:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
  
#ifdef WITH_AUTO_REF
  (void) ReadADC(0x0e);		// read Reference-voltage 
    2034:	8e e0       	ldi	r24, 0x0E	; 14
    2036:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
  ref_mv = W20msReadADC(0x0e);	// read Reference-voltage
    203a:	8e e0       	ldi	r24, 0x0E	; 14
    203c:	0e 94 45 1b 	call	0x368a	; 0x368a <W20msReadADC>
    2040:	ec 01       	movw	r28, r24
    2042:	90 93 40 01 	sts	0x0140, r25
    2046:	80 93 3f 01 	sts	0x013F, r24
#else
  ref_mv = DEFAULT_BAND_GAP;	// set to default Reference Voltage
#endif
  ADCconfig.U_Bandgap = ADC_internal_reference;	// set internal reference voltage for ADC
    204a:	8f ea       	ldi	r24, 0xAF	; 175
    204c:	91 e0       	ldi	r25, 0x01	; 1
    204e:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__eerd_byte_m168>
    2052:	99 27       	eor	r25, r25
    2054:	87 fd       	sbrc	r24, 7
    2056:	90 95       	com	r25
    2058:	8c 0f       	add	r24, r28
    205a:	9d 1f       	adc	r25, r29
    205c:	90 93 3c 01 	sts	0x013C, r25
    2060:	80 93 3b 01 	sts	0x013B, r24
  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    2064:	89 e1       	ldi	r24, 0x19	; 25
    2066:	80 93 39 01 	sts	0x0139, r24

#ifdef BAT_CHECK
  // Battery check is selected
  ReadADC(TPBAT);	//Dummy-Readout
    206a:	85 e0       	ldi	r24, 0x05	; 5
    206c:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
  trans.uBE[0] = W5msReadADC(TPBAT); 	//with 5V reference
    2070:	85 e0       	ldi	r24, 0x05	; 5
    2072:	0e 94 2f 1b 	call	0x365e	; 0x365e <W5msReadADC>
    2076:	90 93 4f 01 	sts	0x014F, r25
    207a:	80 93 4e 01 	sts	0x014E, r24
  lcd_fix_string(Bat_str);		//output: "Bat. "
    207e:	85 ee       	ldi	r24, 0xE5	; 229
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
 #ifdef BAT_OUT
  // display Battery voltage
  // The divisor to get the voltage in 0.01V units is ((10*33)/133) witch is about 2.4812
  // A good result can be get with multiply by 4 and divide by 10 (about 0.75%).
  cap.cval = (trans.uBE[0]*4)/10+((BAT_OUT+5)/10); // usually output only 2 digits
    2086:	80 91 4e 01 	lds	r24, 0x014E
    208a:	90 91 4f 01 	lds	r25, 0x014F
    208e:	88 0f       	add	r24, r24
    2090:	99 1f       	adc	r25, r25
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	6a e0       	ldi	r22, 0x0A	; 10
    2098:	70 e0       	ldi	r23, 0x00	; 0
    209a:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <__udivmodhi4>
    209e:	61 5f       	subi	r22, 0xF1	; 241
    20a0:	7f 4f       	sbci	r23, 0xFF	; 255
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	60 93 58 01 	sts	0x0158, r22
    20aa:	70 93 59 01 	sts	0x0159, r23
    20ae:	80 93 5a 01 	sts	0x015A, r24
    20b2:	90 93 5b 01 	sts	0x015B, r25
  DisplayValue(cap.cval,-2,'V',2);		// Display 2 Digits of this 10mV units
    20b6:	4e ef       	ldi	r20, 0xFE	; 254
    20b8:	26 e5       	ldi	r18, 0x56	; 86
    20ba:	02 e0       	ldi	r16, 0x02	; 2
    20bc:	0e 94 bf 02 	call	0x57e	; 0x57e <DisplayValue>
  lcd_space();
    20c0:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_space>
 #warning "Battery POOR level is set for stepup regulator"
 #define WARN_LEVEL (((unsigned long)(BAT_POOR*100+500)*(unsigned long)33)/133)
 #endif
 #define POOR_LEVEL (((unsigned long)(BAT_POOR*100)*(unsigned long)33)/133)
  // check the battery voltage
  if (trans.uBE[0] <  WARN_LEVEL) {
    20c4:	80 91 4e 01 	lds	r24, 0x014E
    20c8:	90 91 4f 01 	lds	r25, 0x014F
    20cc:	27 e0       	ldi	r18, 0x07	; 7
    20ce:	8c 32       	cpi	r24, 0x2C	; 44
    20d0:	92 07       	cpc	r25, r18
    20d2:	88 f4       	brcc	.+34     	; 0x20f6 <main+0x238>
     //Vcc < 7,3V; show Warning 
     if(trans.uBE[0] < POOR_LEVEL) {	
    20d4:	26 e0       	ldi	r18, 0x06	; 6
    20d6:	83 33       	cpi	r24, 0x33	; 51
    20d8:	92 07       	cpc	r25, r18
    20da:	50 f4       	brcc	.+20     	; 0x20f0 <main+0x232>
        //Vcc <6,3V; no proper operation is possible
        lcd_fix_string(BatEmpty);	//Battery empty!
    20dc:	8c e7       	ldi	r24, 0x7C	; 124
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        wait_about2s();
    20e4:	80 e9       	ldi	r24, 0x90	; 144
    20e6:	91 e0       	ldi	r25, 0x01	; 1
    20e8:	0e 94 bb 03 	call	0x776	; 0x776 <sleep_5ms>
        PORTD = 0;			//switch power off
    20ec:	1b b8       	out	0x0b, r1	; 11
        return 0;
    20ee:	60 c4       	rjmp	.+2240   	; 0x29b0 <main+0xaf2>
     }
     lcd_fix_string(BatWeak);		//Battery weak
    20f0:	87 e7       	ldi	r24, 0x77	; 119
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <main+0x23c>
  } else { // Battery-voltage OK
     lcd_fix_string(OK_str); 		// "OK"
    20f6:	8b ee       	ldi	r24, 0xEB	; 235
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  }
#else
  lcd_fix_string(VERSION_str);		// if no Battery check, Version .. in row 1
#endif
#ifdef WDT_enabled
  wdt_enable(WDTO_2S);		//Watchdog on
    20fe:	2f e0       	ldi	r18, 0x0F	; 15
    2100:	88 e1       	ldi	r24, 0x18	; 24
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	f8 94       	cli
    2108:	a8 95       	wdr
    210a:	80 93 60 00 	sts	0x0060, r24
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	20 93 60 00 	sts	0x0060, r18
#endif

//  wait1s();			// add more time for reading batterie voltage
  // begin tests
#ifdef AUTO_RH
  RefVoltage();			//compute RHmultip = f(reference voltage)
    2114:	0e 94 67 02 	call	0x4ce	; 0x4ce <RefVoltage>
#endif
#if FLASHEND > 0x1fff
  if (WithReference) {
    2118:	80 91 42 01 	lds	r24, 0x0142
    211c:	88 23       	and	r24, r24
    211e:	b1 f0       	breq	.+44     	; 0x214c <main+0x28e>
     lcd_line2();
    2120:	80 ec       	ldi	r24, 0xC0	; 192
    2122:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
     lcd_fix_string(VCC_str);		// VCC=
    2126:	87 e2       	ldi	r24, 0x27	; 39
    2128:	91 e0       	ldi	r25, 0x01	; 1
    212a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     DisplayValue(ADCconfig.U_AVCC,-3,'V',3);	// Display 3 Digits of this mV units
    212e:	60 91 3d 01 	lds	r22, 0x013D
    2132:	70 91 3e 01 	lds	r23, 0x013E
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	4d ef       	ldi	r20, 0xFD	; 253
    213c:	26 e5       	ldi	r18, 0x56	; 86
    213e:	03 e0       	ldi	r16, 0x03	; 3
    2140:	0e 94 bf 02 	call	0x57e	; 0x57e <DisplayValue>
     wait_about1s();
    2144:	88 ec       	ldi	r24, 0xC8	; 200
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	0e 94 bb 03 	call	0x776	; 0x776 <sleep_5ms>
  }
#endif

  lcd_line2();			//LCD position row2, column 1
    214c:	80 ec       	ldi	r24, 0xC0	; 192
    214e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
  lcd_fix_string(TestRunning);		//String: testing...
    2152:	8c e6       	ldi	r24, 0x6C	; 108
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
#ifndef DebugOut
  lcd_line2();			//LCD position row 2, column 1
    215a:	80 ec       	ldi	r24, 0xC0	; 192
    215c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
#endif
  EntladePins();		// discharge all capacitors!
    2160:	0e 94 cc 01 	call	0x398	; 0x398 <EntladePins>
  if(PartFound == PART_CELL) {
    2164:	80 91 07 01 	lds	r24, 0x0107
    2168:	88 30       	cpi	r24, 0x08	; 8
    216a:	39 f4       	brne	.+14     	; 0x217a <main+0x2bc>
    lcd_clear();
    216c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_clear>
    lcd_fix_string(Cell_str);	// display "Cell!"
    2170:	81 e2       	ldi	r24, 0x21	; 33
    2172:	91 e0       	ldi	r25, 0x01	; 1
    2174:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    goto end2;
    2178:	ea c3       	rjmp	.+2004   	; 0x294e <main+0xa90>
  }

#ifdef CHECK_CALL
  AutoCheck();			//check, if selftest should be done
    217a:	0e 94 a1 0a 	call	0x1542	; 0x1542 <AutoCheck>
#endif
     
  // check all 6 combinations for the 3 pins 
//         High  Low  Tri
  CheckPins(TP1, TP2, TP3);
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	61 e0       	ldi	r22, 0x01	; 1
    2182:	42 e0       	ldi	r20, 0x02	; 2
    2184:	0e 94 de 03 	call	0x7bc	; 0x7bc <CheckPins>
  CheckPins(TP2, TP1, TP3);
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	60 e0       	ldi	r22, 0x00	; 0
    218c:	42 e0       	ldi	r20, 0x02	; 2
    218e:	0e 94 de 03 	call	0x7bc	; 0x7bc <CheckPins>

  CheckPins(TP1, TP3, TP2);
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	62 e0       	ldi	r22, 0x02	; 2
    2196:	41 e0       	ldi	r20, 0x01	; 1
    2198:	0e 94 de 03 	call	0x7bc	; 0x7bc <CheckPins>
  CheckPins(TP3, TP1, TP2);
    219c:	82 e0       	ldi	r24, 0x02	; 2
    219e:	60 e0       	ldi	r22, 0x00	; 0
    21a0:	41 e0       	ldi	r20, 0x01	; 1
    21a2:	0e 94 de 03 	call	0x7bc	; 0x7bc <CheckPins>

  CheckPins(TP2, TP3, TP1);
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	62 e0       	ldi	r22, 0x02	; 2
    21aa:	40 e0       	ldi	r20, 0x00	; 0
    21ac:	0e 94 de 03 	call	0x7bc	; 0x7bc <CheckPins>
  CheckPins(TP3, TP2, TP1);
    21b0:	82 e0       	ldi	r24, 0x02	; 2
    21b2:	61 e0       	ldi	r22, 0x01	; 1
    21b4:	40 e0       	ldi	r20, 0x00	; 0
    21b6:	0e 94 de 03 	call	0x7bc	; 0x7bc <CheckPins>
  
  //separate check if is is a capacitor
  if(((PartFound == PART_NONE) || (PartFound == PART_RESISTOR) || (PartFound == PART_DIODE)) ) {
    21ba:	80 91 07 01 	lds	r24, 0x0107
    21be:	88 23       	and	r24, r24
    21c0:	21 f0       	breq	.+8      	; 0x21ca <main+0x30c>
    21c2:	86 30       	cpi	r24, 0x06	; 6
    21c4:	11 f0       	breq	.+4      	; 0x21ca <main+0x30c>
    21c6:	81 30       	cpi	r24, 0x01	; 1
    21c8:	d9 f4       	brne	.+54     	; 0x2200 <main+0x342>
     EntladePins();		// discharge capacities
    21ca:	0e 94 cc 01 	call	0x398	; 0x398 <EntladePins>
     //measurement of capacities in all 3 combinations
     cap.cval_max = 0;		// set max to zero
    21ce:	10 92 5c 01 	sts	0x015C, r1
    21d2:	10 92 5d 01 	sts	0x015D, r1
    21d6:	10 92 5e 01 	sts	0x015E, r1
    21da:	10 92 5f 01 	sts	0x015F, r1
     cap.cpre_max = -12;	// set max to pF unit
    21de:	84 ef       	ldi	r24, 0xF4	; 244
    21e0:	80 93 69 01 	sts	0x0169, r24
     ReadCapacity(TP3, TP1);
    21e4:	82 e0       	ldi	r24, 0x02	; 2
    21e6:	60 e0       	ldi	r22, 0x00	; 0
    21e8:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <ReadCapacity>
     ReadCapacity(TP3, TP2);
    21ec:	82 e0       	ldi	r24, 0x02	; 2
    21ee:	61 e0       	ldi	r22, 0x01	; 1
    21f0:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <ReadCapacity>
     ReadCapacity(TP2, TP1);
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	60 e0       	ldi	r22, 0x00	; 0
    21f8:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <ReadCapacity>

#if FLASHEND > 0x1fff
     ReadInductance();			// measure inductance
    21fc:	0e 94 21 18 	call	0x3042	; 0x3042 <ReadInductance>
#endif
  }
  //All checks are done, output result to display
  lcd_clear();
    2200:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_clear>
  if(PartFound == PART_DIODE) {
    2204:	80 91 07 01 	lds	r24, 0x0107
    2208:	81 30       	cpi	r24, 0x01	; 1
    220a:	09 f0       	breq	.+2      	; 0x220e <main+0x350>
    220c:	ff c0       	rjmp	.+510    	; 0x240c <main+0x54e>
     if(NumOfDiodes == 1) {		//single Diode
    220e:	90 91 05 01 	lds	r25, 0x0105
    2212:	91 30       	cpi	r25, 0x01	; 1
    2214:	49 f5       	brne	.+82     	; 0x2268 <main+0x3aa>
        lcd_fix_string(Diode);		//"Diode: "
    2216:	81 e9       	ldi	r24, 0x91	; 145
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        lcd_testpin(diodes[0].Anode);
    221e:	80 91 6c 01 	lds	r24, 0x016C
    2222:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
        lcd_fix_string(AnKat);		//"->|-"
    2226:	85 e3       	ldi	r24, 0x35	; 53
    2228:	91 e0       	ldi	r25, 0x01	; 1
    222a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        lcd_testpin(diodes[0].Cathode);
    222e:	80 91 6d 01 	lds	r24, 0x016D
    2232:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
        UfAusgabe(0x70);
    2236:	80 e7       	ldi	r24, 0x70	; 112
    2238:	0e 94 a7 03 	call	0x74e	; 0x74e <UfAusgabe>
        lcd_fix_string(GateCap_str);	//"C="
    223c:	88 ef       	ldi	r24, 0xF8	; 248
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        ReadCapacity(diodes[0].Cathode,diodes[0].Anode);	// Capacity opposite flow direction
    2244:	80 91 6d 01 	lds	r24, 0x016D
    2248:	60 91 6c 01 	lds	r22, 0x016C
    224c:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <ReadCapacity>
        DisplayValue(cap.cval,cap.cpre,'F',3);
    2250:	60 91 58 01 	lds	r22, 0x0158
    2254:	70 91 59 01 	lds	r23, 0x0159
    2258:	80 91 5a 01 	lds	r24, 0x015A
    225c:	90 91 5b 01 	lds	r25, 0x015B
    2260:	40 91 68 01 	lds	r20, 0x0168
    2264:	26 e4       	ldi	r18, 0x46	; 70
    2266:	f4 c2       	rjmp	.+1512   	; 0x2850 <main+0x992>
        goto end;
     } else if(NumOfDiodes == 2) { // double diode
    2268:	92 30       	cpi	r25, 0x02	; 2
    226a:	09 f0       	breq	.+2      	; 0x226e <main+0x3b0>
    226c:	4c c0       	rjmp	.+152    	; 0x2306 <main+0x448>
        lcd_data('2');
    226e:	82 e3       	ldi	r24, 0x32	; 50
    2270:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
        lcd_fix_string(Dioden);		//"diodes "
    2274:	8d e3       	ldi	r24, 0x3D	; 61
    2276:	91 e0       	ldi	r25, 0x01	; 1
    2278:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        if(diodes[0].Anode == diodes[1].Anode) { //Common Anode
    227c:	90 91 6c 01 	lds	r25, 0x016C
    2280:	20 91 70 01 	lds	r18, 0x0170
    2284:	92 17       	cp	r25, r18
    2286:	59 f4       	brne	.+22     	; 0x229e <main+0x3e0>
           lcd_testpin(diodes[0].Cathode);
    2288:	80 91 6d 01 	lds	r24, 0x016D
    228c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    2290:	89 e3       	ldi	r24, 0x39	; 57
    2292:	91 e0       	ldi	r25, 0x01	; 1
    2294:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    2298:	80 91 6c 01 	lds	r24, 0x016C
    229c:	2b c0       	rjmp	.+86     	; 0x22f4 <main+0x436>
           lcd_fix_string(AnKat);	//"->|-"
           lcd_testpin(diodes[1].Cathode);
           UfAusgabe(0x01);
           goto end;
        } else if(diodes[0].Cathode == diodes[1].Cathode) { //Common Cathode
    229e:	30 91 6d 01 	lds	r19, 0x016D
    22a2:	80 91 71 01 	lds	r24, 0x0171
    22a6:	38 17       	cp	r19, r24
    22a8:	b9 f4       	brne	.+46     	; 0x22d8 <main+0x41a>
           lcd_testpin(diodes[0].Anode);
    22aa:	89 2f       	mov	r24, r25
    22ac:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    22b0:	85 e3       	ldi	r24, 0x35	; 53
    22b2:	91 e0       	ldi	r25, 0x01	; 1
    22b4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
	   lcd_testpin(diodes[0].Cathode);
    22b8:	80 91 6d 01 	lds	r24, 0x016D
    22bc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    22c0:	89 e3       	ldi	r24, 0x39	; 57
    22c2:	91 e0       	ldi	r25, 0x01	; 1
    22c4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[1].Anode);
    22c8:	80 91 70 01 	lds	r24, 0x0170
    22cc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
           UfAusgabe(0x01);
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	0e 94 a7 03 	call	0x74e	; 0x74e <UfAusgabe>
           goto end;
    22d6:	34 c3       	rjmp	.+1640   	; 0x2940 <main+0xa82>
          }
        else if ((diodes[0].Cathode == diodes[1].Anode) && (diodes[1].Cathode == diodes[0].Anode)) {
    22d8:	32 17       	cp	r19, r18
    22da:	09 f0       	breq	.+2      	; 0x22de <main+0x420>
    22dc:	ff c2       	rjmp	.+1534   	; 0x28dc <main+0xa1e>
    22de:	89 17       	cp	r24, r25
    22e0:	09 f0       	breq	.+2      	; 0x22e4 <main+0x426>
    22e2:	fc c2       	rjmp	.+1528   	; 0x28dc <main+0xa1e>
           //Antiparallel
           lcd_testpin(diodes[0].Anode);
    22e4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    22e8:	85 e3       	ldi	r24, 0x35	; 53
    22ea:	91 e0       	ldi	r25, 0x01	; 1
    22ec:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[0].Cathode);
    22f0:	80 91 6d 01 	lds	r24, 0x016D
    22f4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    22f8:	85 e3       	ldi	r24, 0x35	; 53
    22fa:	91 e0       	ldi	r25, 0x01	; 1
    22fc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[1].Cathode);
    2300:	80 91 71 01 	lds	r24, 0x0171
    2304:	e3 cf       	rjmp	.-58     	; 0x22cc <main+0x40e>
           UfAusgabe(0x01);
           goto end;
        }
     } else if(NumOfDiodes == 3) {
    2306:	93 30       	cpi	r25, 0x03	; 3
    2308:	09 f0       	breq	.+2      	; 0x230c <main+0x44e>
    230a:	e8 c2       	rjmp	.+1488   	; 0x28dc <main+0xa1e>
        //Serial of 2 Diodes; was detected as 3 Diodes 
        trans.b = 3;
    230c:	90 93 52 01 	sts	0x0152, r25
        trans.c = 3;
    2310:	90 93 53 01 	sts	0x0153, r25
        /* Check for any constallation of 2 serial diodes:
          Only once the pin No of anyone Cathode is identical of another anode.
          two diodes in series is additionally detected as third big diode.
        */
        if(diodes[0].Cathode == diodes[1].Anode)
    2314:	50 91 6d 01 	lds	r21, 0x016D
    2318:	90 91 70 01 	lds	r25, 0x0170
    231c:	59 17       	cp	r21, r25
    231e:	21 f4       	brne	.+8      	; 0x2328 <main+0x46a>
          {
           trans.b = 0;
    2320:	10 92 52 01 	sts	0x0152, r1
           trans.c = 1;
    2324:	80 93 53 01 	sts	0x0153, r24
          }
        if(diodes[0].Anode == diodes[1].Cathode)
    2328:	40 91 6c 01 	lds	r20, 0x016C
    232c:	30 91 71 01 	lds	r19, 0x0171
    2330:	43 17       	cp	r20, r19
    2332:	29 f4       	brne	.+10     	; 0x233e <main+0x480>
          {
           trans.b = 1;
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	80 93 52 01 	sts	0x0152, r24
           trans.c = 0;
    233a:	10 92 53 01 	sts	0x0153, r1
          }
        if(diodes[0].Cathode == diodes[2].Anode)
    233e:	20 91 74 01 	lds	r18, 0x0174
    2342:	52 17       	cp	r21, r18
    2344:	29 f4       	brne	.+10     	; 0x2350 <main+0x492>
          {
           trans.b = 0;
    2346:	10 92 52 01 	sts	0x0152, r1
           trans.c = 2;
    234a:	82 e0       	ldi	r24, 0x02	; 2
    234c:	80 93 53 01 	sts	0x0153, r24
          }
        if(diodes[0].Anode == diodes[2].Cathode)
    2350:	80 91 75 01 	lds	r24, 0x0175
    2354:	48 17       	cp	r20, r24
    2356:	29 f4       	brne	.+10     	; 0x2362 <main+0x4a4>
          {
           trans.b = 2;
    2358:	42 e0       	ldi	r20, 0x02	; 2
    235a:	40 93 52 01 	sts	0x0152, r20
           trans.c = 0;
    235e:	10 92 53 01 	sts	0x0153, r1
          }
        if(diodes[1].Cathode == diodes[2].Anode)
    2362:	32 17       	cp	r19, r18
    2364:	31 f4       	brne	.+12     	; 0x2372 <main+0x4b4>
          {
           trans.b = 1;
    2366:	21 e0       	ldi	r18, 0x01	; 1
    2368:	20 93 52 01 	sts	0x0152, r18
           trans.c = 2;
    236c:	22 e0       	ldi	r18, 0x02	; 2
    236e:	20 93 53 01 	sts	0x0153, r18
          }
        if(diodes[1].Anode == diodes[2].Cathode)
    2372:	98 17       	cp	r25, r24
    2374:	31 f4       	brne	.+12     	; 0x2382 <main+0x4c4>
          {
           trans.b = 2;
    2376:	82 e0       	ldi	r24, 0x02	; 2
    2378:	80 93 52 01 	sts	0x0152, r24
           trans.c = 1;
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	80 93 53 01 	sts	0x0153, r24
        lcd_testpin(diodes[2].Cathode);
        lcd_space();
        lcd_string(utoa(diodes[2].Voltage, outval, 10));
        lcd_line1();
#endif
        if((trans.b<3) && (trans.c<3)) {
    2382:	80 91 52 01 	lds	r24, 0x0152
    2386:	83 30       	cpi	r24, 0x03	; 3
    2388:	08 f0       	brcs	.+2      	; 0x238c <main+0x4ce>
    238a:	a8 c2       	rjmp	.+1360   	; 0x28dc <main+0xa1e>
    238c:	80 91 53 01 	lds	r24, 0x0153
    2390:	83 30       	cpi	r24, 0x03	; 3
    2392:	08 f0       	brcs	.+2      	; 0x2396 <main+0x4d8>
    2394:	a3 c2       	rjmp	.+1350   	; 0x28dc <main+0xa1e>
           lcd_data('3');
    2396:	83 e3       	ldi	r24, 0x33	; 51
    2398:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
           lcd_fix_string(Dioden);	//"Diodes "
    239c:	8d e3       	ldi	r24, 0x3D	; 61
    239e:	91 e0       	ldi	r25, 0x01	; 1
    23a0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Anode);
    23a4:	e0 91 52 01 	lds	r30, 0x0152
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	ee 0f       	add	r30, r30
    23ac:	ff 1f       	adc	r31, r31
    23ae:	ee 0f       	add	r30, r30
    23b0:	ff 1f       	adc	r31, r31
    23b2:	e4 59       	subi	r30, 0x94	; 148
    23b4:	fe 4f       	sbci	r31, 0xFE	; 254
    23b6:	80 81       	ld	r24, Z
    23b8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    23bc:	85 e3       	ldi	r24, 0x35	; 53
    23be:	91 e0       	ldi	r25, 0x01	; 1
    23c0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Cathode);
    23c4:	e0 91 52 01 	lds	r30, 0x0152
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	ee 0f       	add	r30, r30
    23cc:	ff 1f       	adc	r31, r31
    23ce:	ee 0f       	add	r30, r30
    23d0:	ff 1f       	adc	r31, r31
    23d2:	e4 59       	subi	r30, 0x94	; 148
    23d4:	fe 4f       	sbci	r31, 0xFE	; 254
    23d6:	81 81       	ldd	r24, Z+1	; 0x01
    23d8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    23dc:	85 e3       	ldi	r24, 0x35	; 53
    23de:	91 e0       	ldi	r25, 0x01	; 1
    23e0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[trans.c].Cathode);
    23e4:	e0 91 53 01 	lds	r30, 0x0153
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	ee 0f       	add	r30, r30
    23ec:	ff 1f       	adc	r31, r31
    23ee:	ee 0f       	add	r30, r30
    23f0:	ff 1f       	adc	r31, r31
    23f2:	e4 59       	subi	r30, 0x94	; 148
    23f4:	fe 4f       	sbci	r31, 0xFE	; 254
    23f6:	81 81       	ldd	r24, Z+1	; 0x01
    23f8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
           UfAusgabe( (trans.b<<4)|trans.c);
    23fc:	80 91 52 01 	lds	r24, 0x0152
    2400:	82 95       	swap	r24
    2402:	80 7f       	andi	r24, 0xF0	; 240
    2404:	90 91 53 01 	lds	r25, 0x0153
    2408:	89 2b       	or	r24, r25
    240a:	63 cf       	rjmp	.-314    	; 0x22d2 <main+0x414>
           goto end;
        }
     }
     // end (PartFound == PART_DIODE)
  } else if (PartFound == PART_TRANSISTOR) {
    240c:	82 30       	cpi	r24, 0x02	; 2
    240e:	09 f0       	breq	.+2      	; 0x2412 <main+0x554>
    2410:	a1 c0       	rjmp	.+322    	; 0x2554 <main+0x696>
    if(PartReady != 0) {
    2412:	80 91 04 01 	lds	r24, 0x0104
    2416:	88 23       	and	r24, r24
    2418:	71 f1       	breq	.+92     	; 0x2476 <main+0x5b8>
       if((trans.hfe[0]>trans.hfe[1])) {
    241a:	80 91 4a 01 	lds	r24, 0x014A
    241e:	90 91 4b 01 	lds	r25, 0x014B
    2422:	a0 91 4c 01 	lds	r26, 0x014C
    2426:	b0 91 4d 01 	lds	r27, 0x014D
    242a:	20 91 46 01 	lds	r18, 0x0146
    242e:	30 91 47 01 	lds	r19, 0x0147
    2432:	40 91 48 01 	lds	r20, 0x0148
    2436:	50 91 49 01 	lds	r21, 0x0149
    243a:	82 17       	cp	r24, r18
    243c:	93 07       	cpc	r25, r19
    243e:	a4 07       	cpc	r26, r20
    2440:	b5 07       	cpc	r27, r21
    2442:	48 f4       	brcc	.+18     	; 0x2456 <main+0x598>
          //if the amplification factor was higher at first testr: swap C and E !
          tmp = trans.c;
    2444:	80 91 53 01 	lds	r24, 0x0153
          trans.c = trans.e;
    2448:	90 91 54 01 	lds	r25, 0x0154
    244c:	90 93 53 01 	sts	0x0153, r25
          trans.e = tmp;
    2450:	80 93 54 01 	sts	0x0154, r24
    2454:	10 c0       	rjmp	.+32     	; 0x2476 <main+0x5b8>
       } else {
          trans.hfe[0] = trans.hfe[1];
    2456:	80 93 46 01 	sts	0x0146, r24
    245a:	90 93 47 01 	sts	0x0147, r25
    245e:	a0 93 48 01 	sts	0x0148, r26
    2462:	b0 93 49 01 	sts	0x0149, r27
          trans.uBE[0] = trans.uBE[1];
    2466:	80 91 50 01 	lds	r24, 0x0150
    246a:	90 91 51 01 	lds	r25, 0x0151
    246e:	90 93 4f 01 	sts	0x014F, r25
    2472:	80 93 4e 01 	sts	0x014E, r24
       }
    }

    if(PartMode == PART_MODE_NPN) {
    2476:	80 91 06 01 	lds	r24, 0x0106
    247a:	81 30       	cpi	r24, 0x01	; 1
    247c:	19 f4       	brne	.+6      	; 0x2484 <main+0x5c6>
       lcd_fix_string(NPN_str);		//"NPN "
    247e:	8e ef       	ldi	r24, 0xFE	; 254
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	02 c0       	rjmp	.+4      	; 0x2488 <main+0x5ca>
    } else {
       lcd_fix_string(PNP_str);		//"PNP "
    2484:	83 e0       	ldi	r24, 0x03	; 3
    2486:	91 e0       	ldi	r25, 0x01	; 1
    2488:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    }
    if( NumOfDiodes > 2) {	//Transistor with protection diode
    248c:	80 91 05 01 	lds	r24, 0x0105
    2490:	83 30       	cpi	r24, 0x03	; 3
    2492:	a0 f0       	brcs	.+40     	; 0x24bc <main+0x5fe>
#ifdef EBC_STYLE
       if(PartMode == PART_MODE_NPN)
#else
       if (((PartMode == PART_MODE_NPN) && (trans.c > trans.e)) || ((PartMode != PART_MODE_NPN) && (trans.c < trans.e)))
    2494:	20 91 06 01 	lds	r18, 0x0106
    2498:	90 91 53 01 	lds	r25, 0x0153
    249c:	80 91 54 01 	lds	r24, 0x0154
    24a0:	21 30       	cpi	r18, 0x01	; 1
    24a2:	19 f4       	brne	.+6      	; 0x24aa <main+0x5ec>
    24a4:	89 17       	cp	r24, r25
    24a6:	18 f0       	brcs	.+6      	; 0x24ae <main+0x5f0>
    24a8:	05 c0       	rjmp	.+10     	; 0x24b4 <main+0x5f6>
    24aa:	98 17       	cp	r25, r24
    24ac:	18 f4       	brcc	.+6      	; 0x24b4 <main+0x5f6>
#endif
       {
          lcd_fix_string(AnKat);	//"->|-"
    24ae:	85 e3       	ldi	r24, 0x35	; 53
    24b0:	91 e0       	ldi	r25, 0x01	; 1
    24b2:	02 c0       	rjmp	.+4      	; 0x24b8 <main+0x5fa>
       } else {
          lcd_fix_string(KatAn);	//"-|<-"
    24b4:	89 e3       	ldi	r24, 0x39	; 57
    24b6:	91 e0       	ldi	r25, 0x01	; 1
    24b8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    lcd_fix_string(EBC_str);		//" EBC="
    lcd_testpin(trans.e);
    lcd_testpin(trans.b);
    lcd_testpin(trans.c);
#else
    lcd_fix_string(N123_str);		//" 123="
    24bc:	88 e0       	ldi	r24, 0x08	; 8
    24be:	91 e0       	ldi	r25, 0x01	; 1
    24c0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    for (ii=0;ii<3;ii++) {
    24c4:	10 92 44 01 	sts	0x0144, r1
    24c8:	1e c0       	rjmp	.+60     	; 0x2506 <main+0x648>
        if (ii == trans.e)  lcd_data('E');	// Output Character in right order
    24ca:	90 91 54 01 	lds	r25, 0x0154
    24ce:	89 17       	cp	r24, r25
    24d0:	19 f4       	brne	.+6      	; 0x24d8 <main+0x61a>
    24d2:	85 e4       	ldi	r24, 0x45	; 69
    24d4:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
        if (ii == trans.b)  lcd_data('B');
    24d8:	90 91 44 01 	lds	r25, 0x0144
    24dc:	80 91 52 01 	lds	r24, 0x0152
    24e0:	98 17       	cp	r25, r24
    24e2:	19 f4       	brne	.+6      	; 0x24ea <main+0x62c>
    24e4:	82 e4       	ldi	r24, 0x42	; 66
    24e6:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
        if (ii == trans.c)  lcd_data('C');
    24ea:	90 91 44 01 	lds	r25, 0x0144
    24ee:	80 91 53 01 	lds	r24, 0x0153
    24f2:	98 17       	cp	r25, r24
    24f4:	19 f4       	brne	.+6      	; 0x24fc <main+0x63e>
    24f6:	83 e4       	ldi	r24, 0x43	; 67
    24f8:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
    lcd_testpin(trans.e);
    lcd_testpin(trans.b);
    lcd_testpin(trans.c);
#else
    lcd_fix_string(N123_str);		//" 123="
    for (ii=0;ii<3;ii++) {
    24fc:	80 91 44 01 	lds	r24, 0x0144
    2500:	8f 5f       	subi	r24, 0xFF	; 255
    2502:	80 93 44 01 	sts	0x0144, r24
    2506:	80 91 44 01 	lds	r24, 0x0144
    250a:	83 30       	cpi	r24, 0x03	; 3
    250c:	f0 f2       	brcs	.-68     	; 0x24ca <main+0x60c>
        if (ii == trans.e)  lcd_data('E');	// Output Character in right order
        if (ii == trans.b)  lcd_data('B');
        if (ii == trans.c)  lcd_data('C');
    }
#endif
    lcd_line2(); //2. row 
    250e:	80 ec       	ldi	r24, 0xC0	; 192
    2510:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
    lcd_fix_string(hfe_str);		//"B="  (hFE)
    2514:	8b ef       	ldi	r24, 0xFB	; 251
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    DisplayValue(trans.hfe[0],0,0,3);
    251c:	60 91 46 01 	lds	r22, 0x0146
    2520:	70 91 47 01 	lds	r23, 0x0147
    2524:	80 91 48 01 	lds	r24, 0x0148
    2528:	90 91 49 01 	lds	r25, 0x0149
    252c:	40 e0       	ldi	r20, 0x00	; 0
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	03 e0       	ldi	r16, 0x03	; 3
    2532:	0e 94 bf 02 	call	0x57e	; 0x57e <DisplayValue>
    lcd_space();
    2536:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_space>

    lcd_fix_string(Uf_str);		//"Uf="
    253a:	8e e0       	ldi	r24, 0x0E	; 14
    253c:	91 e0       	ldi	r25, 0x01	; 1
    253e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    DisplayValue(trans.uBE[0],-3,'V',3);
    2542:	60 91 4e 01 	lds	r22, 0x014E
    2546:	70 91 4f 01 	lds	r23, 0x014F
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	4d ef       	ldi	r20, 0xFD	; 253
    2550:	26 e5       	ldi	r18, 0x56	; 86
    2552:	7f c1       	rjmp	.+766    	; 0x2852 <main+0x994>
    goto end;
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    2554:	83 30       	cpi	r24, 0x03	; 3
    2556:	09 f0       	breq	.+2      	; 0x255a <main+0x69c>
    2558:	a3 c0       	rjmp	.+326    	; 0x26a0 <main+0x7e2>
    if(PartMode&1) {
    255a:	80 91 06 01 	lds	r24, 0x0106
    255e:	80 ff       	sbrs	r24, 0
    2560:	02 c0       	rjmp	.+4      	; 0x2566 <main+0x6a8>
       //N-Kanal
       lcd_data('P');			//P-channel
    2562:	80 e5       	ldi	r24, 0x50	; 80
    2564:	01 c0       	rjmp	.+2      	; 0x2568 <main+0x6aa>
    } else {
       lcd_data('N');			//N-channel
    2566:	8e e4       	ldi	r24, 0x4E	; 78
    2568:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
    }
    lcd_data('-');
    256c:	8d e2       	ldi	r24, 0x2D	; 45
    256e:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>

    tmp = PartMode/2;
    2572:	80 91 06 01 	lds	r24, 0x0106
    2576:	86 95       	lsr	r24
    if (tmp == (PART_MODE_N_D_MOS/2)) {
    2578:	82 30       	cpi	r24, 0x02	; 2
    257a:	11 f4       	brne	.+4      	; 0x2580 <main+0x6c2>
       lcd_data('D');			// N-D
    257c:	84 e4       	ldi	r24, 0x44	; 68
    257e:	03 c0       	rjmp	.+6      	; 0x2586 <main+0x6c8>
    }
    if (tmp == (PART_MODE_N_E_MOS/2)) {
    2580:	81 30       	cpi	r24, 0x01	; 1
    2582:	21 f4       	brne	.+8      	; 0x258c <main+0x6ce>
       lcd_data('E');			// N-E
    2584:	85 e4       	ldi	r24, 0x45	; 69
    2586:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
    258a:	05 c0       	rjmp	.+10     	; 0x2596 <main+0x6d8>
    }
    if (tmp == (PART_MODE_N_JFET/2)) {
    258c:	83 30       	cpi	r24, 0x03	; 3
    258e:	19 f4       	brne	.+6      	; 0x2596 <main+0x6d8>
       lcd_fix_string(jfet_str);	//"JFET"
    2590:	83 ef       	ldi	r24, 0xF3	; 243
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	02 c0       	rjmp	.+4      	; 0x259a <main+0x6dc>
    } else {
       lcd_fix_string(mosfet_str);	//"-MOS "
    2596:	8e ee       	ldi	r24, 0xEE	; 238
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    lcd_fix_string(GDS_str);		//"GDS="
    lcd_testpin(trans.b);
    lcd_testpin(trans.c);
    lcd_testpin(trans.e);
#else
    lcd_fix_string(N123_str);		//" 123="
    259e:	88 e0       	ldi	r24, 0x08	; 8
    25a0:	91 e0       	ldi	r25, 0x01	; 1
    25a2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    for (ii=0;ii<3;ii++) {
    25a6:	10 92 44 01 	sts	0x0144, r1
    25aa:	1e c0       	rjmp	.+60     	; 0x25e8 <main+0x72a>
        if (ii == trans.e)  lcd_data('S');	// Output Character in right order
    25ac:	90 91 54 01 	lds	r25, 0x0154
    25b0:	89 17       	cp	r24, r25
    25b2:	19 f4       	brne	.+6      	; 0x25ba <main+0x6fc>
    25b4:	83 e5       	ldi	r24, 0x53	; 83
    25b6:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
        if (ii == trans.b)  lcd_data('G');
    25ba:	90 91 44 01 	lds	r25, 0x0144
    25be:	80 91 52 01 	lds	r24, 0x0152
    25c2:	98 17       	cp	r25, r24
    25c4:	19 f4       	brne	.+6      	; 0x25cc <main+0x70e>
    25c6:	87 e4       	ldi	r24, 0x47	; 71
    25c8:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
        if (ii == trans.c)  lcd_data('D');
    25cc:	90 91 44 01 	lds	r25, 0x0144
    25d0:	80 91 53 01 	lds	r24, 0x0153
    25d4:	98 17       	cp	r25, r24
    25d6:	19 f4       	brne	.+6      	; 0x25de <main+0x720>
    25d8:	84 e4       	ldi	r24, 0x44	; 68
    25da:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
    lcd_testpin(trans.b);
    lcd_testpin(trans.c);
    lcd_testpin(trans.e);
#else
    lcd_fix_string(N123_str);		//" 123="
    for (ii=0;ii<3;ii++) {
    25de:	80 91 44 01 	lds	r24, 0x0144
    25e2:	8f 5f       	subi	r24, 0xFF	; 255
    25e4:	80 93 44 01 	sts	0x0144, r24
    25e8:	80 91 44 01 	lds	r24, 0x0144
    25ec:	83 30       	cpi	r24, 0x03	; 3
    25ee:	f0 f2       	brcs	.-68     	; 0x25ac <main+0x6ee>
        if (ii == trans.e)  lcd_data('S');	// Output Character in right order
        if (ii == trans.b)  lcd_data('G');
        if (ii == trans.c)  lcd_data('D');
    }
#endif
    if((NumOfDiodes > 0) && (PartMode < PART_MODE_N_D_MOS)) {
    25f0:	80 91 05 01 	lds	r24, 0x0105
    25f4:	88 23       	and	r24, r24
    25f6:	a1 f0       	breq	.+40     	; 0x2620 <main+0x762>
    25f8:	20 91 06 01 	lds	r18, 0x0106
    25fc:	24 30       	cpi	r18, 0x04	; 4
    25fe:	80 f4       	brcc	.+32     	; 0x2620 <main+0x762>
    2600:	90 91 53 01 	lds	r25, 0x0153
    2604:	80 91 54 01 	lds	r24, 0x0154
       //MOSFET with protection diode; only with enhancement-FETs
#ifdef EBC_STYLE
       if (PartMode&1)
#else
       if (((PartMode&1) && (trans.c < trans.e)) || ((!(PartMode&1)) && (trans.c > trans.e)))
    2608:	20 ff       	sbrs	r18, 0
    260a:	03 c0       	rjmp	.+6      	; 0x2612 <main+0x754>
    260c:	98 17       	cp	r25, r24
    260e:	18 f0       	brcs	.+6      	; 0x2616 <main+0x758>
    2610:	04 c0       	rjmp	.+8      	; 0x261a <main+0x75c>
    2612:	89 17       	cp	r24, r25
    2614:	10 f4       	brcc	.+4      	; 0x261a <main+0x75c>
#endif
       {
          lcd_data(LCD_CHAR_DIODE1);	//show Diode symbol >|
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	01 c0       	rjmp	.+2      	; 0x261c <main+0x75e>
       } else {
          lcd_data(LCD_CHAR_DIODE2);	//show Diode symbol |<
    261a:	82 e0       	ldi	r24, 0x02	; 2
    261c:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
       }
    }
    lcd_line2();			//2. Row
    2620:	80 ec       	ldi	r24, 0xC0	; 192
    2622:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
    if(PartMode < PART_MODE_N_D_MOS) {	//enhancement-MOSFET
    2626:	80 91 06 01 	lds	r24, 0x0106
    262a:	84 30       	cpi	r24, 0x04	; 4
    262c:	d8 f4       	brcc	.+54     	; 0x2664 <main+0x7a6>
	//Gate capacity
       lcd_fix_string(GateCap_str);		//"C="
    262e:	88 ef       	ldi	r24, 0xF8	; 248
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       ReadCapacity(trans.b,trans.e);	//measure capacity
    2636:	80 91 52 01 	lds	r24, 0x0152
    263a:	60 91 54 01 	lds	r22, 0x0154
    263e:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <ReadCapacity>
       DisplayValue(cap.cval,cap.cpre,'F',3);
    2642:	60 91 58 01 	lds	r22, 0x0158
    2646:	70 91 59 01 	lds	r23, 0x0159
    264a:	80 91 5a 01 	lds	r24, 0x015A
    264e:	90 91 5b 01 	lds	r25, 0x015B
    2652:	40 91 68 01 	lds	r20, 0x0168
    2656:	26 e4       	ldi	r18, 0x46	; 70
    2658:	03 e0       	ldi	r16, 0x03	; 3
    265a:	0e 94 bf 02 	call	0x57e	; 0x57e <DisplayValue>
       lcd_fix_string(vt_str);		// "Vt="
    265e:	82 e1       	ldi	r24, 0x12	; 18
    2660:	91 e0       	ldi	r25, 0x01	; 1
    2662:	13 c0       	rjmp	.+38     	; 0x268a <main+0x7cc>
    } else {
       lcd_data('I');
    2664:	89 e4       	ldi	r24, 0x49	; 73
    2666:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
       lcd_data('=');
    266a:	8d e3       	ldi	r24, 0x3D	; 61
    266c:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
       DisplayValue(trans.uBE[1],-5,'A',2);
    2670:	60 91 50 01 	lds	r22, 0x0150
    2674:	70 91 51 01 	lds	r23, 0x0151
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	4b ef       	ldi	r20, 0xFB	; 251
    267e:	21 e4       	ldi	r18, 0x41	; 65
    2680:	02 e0       	ldi	r16, 0x02	; 2
    2682:	0e 94 bf 02 	call	0x57e	; 0x57e <DisplayValue>
       lcd_fix_string(Vgs_str);		// " Vgs="
    2686:	87 e1       	ldi	r24, 0x17	; 23
    2688:	91 e0       	ldi	r25, 0x01	; 1
    268a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    }
    //Gate-threshold voltage
    DisplayValue(gthvoltage,-3,'V',3);
    268e:	60 91 56 01 	lds	r22, 0x0156
    2692:	70 91 57 01 	lds	r23, 0x0157
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	4d ef       	ldi	r20, 0xFD	; 253
    269c:	26 e5       	ldi	r18, 0x56	; 86
    269e:	d8 c0       	rjmp	.+432    	; 0x2850 <main+0x992>
    goto end;
    // end (PartFound == PART_FET)
  } else if (PartFound == PART_THYRISTOR) {
    26a0:	85 30       	cpi	r24, 0x05	; 5
    26a2:	19 f4       	brne	.+6      	; 0x26aa <main+0x7ec>
    lcd_fix_string(Thyristor);		//"Thyristor"
    26a4:	84 ea       	ldi	r24, 0xA4	; 164
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	04 c0       	rjmp	.+8      	; 0x26b2 <main+0x7f4>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    26aa:	84 30       	cpi	r24, 0x04	; 4
    26ac:	c1 f4       	brne	.+48     	; 0x26de <main+0x820>
    lcd_fix_string(Triac);		//"Triac"
    26ae:	8e e9       	ldi	r24, 0x9E	; 158
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  mess_count = 0;
  goto end2;


gakAusgabe:
  lcd_line2(); //2. row 
    26b6:	80 ec       	ldi	r24, 0xC0	; 192
    26b8:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
  lcd_fix_string(GAK);		//"GAK="
    26bc:	89 e9       	ldi	r24, 0x99	; 153
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  lcd_testpin(trans.b);
    26c4:	80 91 52 01 	lds	r24, 0x0152
    26c8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
  lcd_testpin(trans.c);
    26cc:	80 91 53 01 	lds	r24, 0x0153
    26d0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
  lcd_testpin(trans.e);
    26d4:	80 91 54 01 	lds	r24, 0x0154
    26d8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
    26dc:	31 c1       	rjmp	.+610    	; 0x2940 <main+0xa82>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    lcd_fix_string(Triac);		//"Triac"
    goto gakAusgabe;
  }
  else if(PartFound == PART_RESISTOR) {
    26de:	86 30       	cpi	r24, 0x06	; 6
    26e0:	09 f0       	breq	.+2      	; 0x26e4 <main+0x826>
    26e2:	da c0       	rjmp	.+436    	; 0x2898 <main+0x9da>
    if (ResistorsFound == 1) { // single resistor
    26e4:	60 91 55 01 	lds	r22, 0x0155
    26e8:	61 30       	cpi	r22, 0x01	; 1
    26ea:	69 f4       	brne	.+26     	; 0x2706 <main+0x848>
       lcd_testpin(resis[0].rb);  	//Pin-number 1
    26ec:	80 91 21 01 	lds	r24, 0x0121
    26f0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
       lcd_fix_string(Resistor_str);
    26f4:	82 e4       	ldi	r24, 0x42	; 66
    26f6:	91 e0       	ldi	r25, 0x01	; 1
    26f8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       lcd_testpin(resis[0].ra);		//Pin-number 2
    26fc:	80 91 20 01 	lds	r24, 0x0120
    2700:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
    2704:	80 c0       	rjmp	.+256    	; 0x2806 <main+0x948>
    } else { // R-Max suchen
       ii = 0;
    2706:	10 92 44 01 	sts	0x0144, r1
       if (resis[1].rx > resis[0].rx)
    270a:	20 91 23 01 	lds	r18, 0x0123
    270e:	30 91 24 01 	lds	r19, 0x0124
    2712:	40 91 25 01 	lds	r20, 0x0125
    2716:	50 91 26 01 	lds	r21, 0x0126
    271a:	80 91 18 01 	lds	r24, 0x0118
    271e:	90 91 19 01 	lds	r25, 0x0119
    2722:	a0 91 1a 01 	lds	r26, 0x011A
    2726:	b0 91 1b 01 	lds	r27, 0x011B
    272a:	82 17       	cp	r24, r18
    272c:	93 07       	cpc	r25, r19
    272e:	a4 07       	cpc	r26, r20
    2730:	b5 07       	cpc	r27, r21
    2732:	18 f4       	brcc	.+6      	; 0x273a <main+0x87c>
          ii = 1;
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	80 93 44 01 	sts	0x0144, r24
       if (ResistorsFound == 2) {
    273a:	62 30       	cpi	r22, 0x02	; 2
    273c:	19 f4       	brne	.+6      	; 0x2744 <main+0x886>
          ii = 2;
    273e:	60 93 44 01 	sts	0x0144, r22
    2742:	22 c0       	rjmp	.+68     	; 0x2788 <main+0x8ca>
       } else {
          if (resis[2].rx > resis[ii].rx) {
    2744:	20 91 44 01 	lds	r18, 0x0144
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	8b e0       	ldi	r24, 0x0B	; 11
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	28 9f       	mul	r18, r24
    2750:	f0 01       	movw	r30, r0
    2752:	29 9f       	mul	r18, r25
    2754:	f0 0d       	add	r31, r0
    2756:	38 9f       	mul	r19, r24
    2758:	f0 0d       	add	r31, r0
    275a:	11 24       	eor	r1, r1
    275c:	e8 5e       	subi	r30, 0xE8	; 232
    275e:	fe 4f       	sbci	r31, 0xFE	; 254
    2760:	20 91 2e 01 	lds	r18, 0x012E
    2764:	30 91 2f 01 	lds	r19, 0x012F
    2768:	40 91 30 01 	lds	r20, 0x0130
    276c:	50 91 31 01 	lds	r21, 0x0131
    2770:	80 81       	ld	r24, Z
    2772:	91 81       	ldd	r25, Z+1	; 0x01
    2774:	a2 81       	ldd	r26, Z+2	; 0x02
    2776:	b3 81       	ldd	r27, Z+3	; 0x03
    2778:	82 17       	cp	r24, r18
    277a:	93 07       	cpc	r25, r19
    277c:	a4 07       	cpc	r26, r20
    277e:	b5 07       	cpc	r27, r21
    2780:	18 f4       	brcc	.+6      	; 0x2788 <main+0x8ca>
             ii = 2;
    2782:	82 e0       	ldi	r24, 0x02	; 2
    2784:	80 93 44 01 	sts	0x0144, r24
          }
       }

       if (ii == 0) {
    2788:	80 91 44 01 	lds	r24, 0x0144
    278c:	88 23       	and	r24, r24
    278e:	89 f4       	brne	.+34     	; 0x27b2 <main+0x8f4>
          lcd_data('1');
    2790:	81 e3       	ldi	r24, 0x31	; 49
    2792:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    2796:	82 e4       	ldi	r24, 0x42	; 66
    2798:	91 e0       	ldi	r25, 0x01	; 1
    279a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
          lcd_data('3');
    279e:	83 e3       	ldi	r24, 0x33	; 51
    27a0:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    27a4:	82 e4       	ldi	r24, 0x42	; 66
    27a6:	91 e0       	ldi	r25, 0x01	; 1
    27a8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
          lcd_data('2');
    27ac:	82 e3       	ldi	r24, 0x32	; 50
    27ae:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
       }
       if (ii == 1) {
    27b2:	80 91 44 01 	lds	r24, 0x0144
    27b6:	81 30       	cpi	r24, 0x01	; 1
    27b8:	89 f4       	brne	.+34     	; 0x27dc <main+0x91e>
          lcd_data('1');
    27ba:	81 e3       	ldi	r24, 0x31	; 49
    27bc:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    27c0:	82 e4       	ldi	r24, 0x42	; 66
    27c2:	91 e0       	ldi	r25, 0x01	; 1
    27c4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
          lcd_data('2');
    27c8:	82 e3       	ldi	r24, 0x32	; 50
    27ca:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    27ce:	82 e4       	ldi	r24, 0x42	; 66
    27d0:	91 e0       	ldi	r25, 0x01	; 1
    27d2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
          lcd_data('3');
    27d6:	83 e3       	ldi	r24, 0x33	; 51
    27d8:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
       }
       if (ii == 2) {
    27dc:	80 91 44 01 	lds	r24, 0x0144
    27e0:	82 30       	cpi	r24, 0x02	; 2
    27e2:	89 f4       	brne	.+34     	; 0x2806 <main+0x948>
          lcd_data('2');
    27e4:	82 e3       	ldi	r24, 0x32	; 50
    27e6:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    27ea:	82 e4       	ldi	r24, 0x42	; 66
    27ec:	91 e0       	ldi	r25, 0x01	; 1
    27ee:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
          lcd_data('1');
    27f2:	81 e3       	ldi	r24, 0x31	; 49
    27f4:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    27f8:	82 e4       	ldi	r24, 0x42	; 66
    27fa:	91 e0       	ldi	r25, 0x01	; 1
    27fc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
          lcd_data('3');
    2800:	83 e3       	ldi	r24, 0x33	; 51
    2802:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
       }
    }
    lcd_line2(); //2. row 
    2806:	80 ec       	ldi	r24, 0xC0	; 192
    2808:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
    if (ResistorsFound == 1) {
    280c:	80 91 55 01 	lds	r24, 0x0155
    2810:	81 30       	cpi	r24, 0x01	; 1
    2812:	11 f5       	brne	.+68     	; 0x2858 <main+0x99a>
       RvalOut(0);
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	0e 94 75 03 	call	0x6ea	; 0x6ea <RvalOut>
#if FLASHEND > 0x1fff
       if (resis[0].lx != 0) {
    281a:	80 91 1c 01 	lds	r24, 0x011C
    281e:	90 91 1d 01 	lds	r25, 0x011D
    2822:	a0 91 1e 01 	lds	r26, 0x011E
    2826:	b0 91 1f 01 	lds	r27, 0x011F
    282a:	00 97       	sbiw	r24, 0x00	; 0
    282c:	a1 05       	cpc	r26, r1
    282e:	b1 05       	cpc	r27, r1
    2830:	09 f4       	brne	.+2      	; 0x2834 <main+0x976>
    2832:	86 c0       	rjmp	.+268    	; 0x2940 <main+0xa82>
	  // resistor have also Inductance
          lcd_fix_string(Lis_str);	// "L="
    2834:	82 e3       	ldi	r24, 0x32	; 50
    2836:	91 e0       	ldi	r25, 0x01	; 1
    2838:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
          DisplayValue(resis[0].lx,-5,'H',3);	// output inductance
    283c:	60 91 1c 01 	lds	r22, 0x011C
    2840:	70 91 1d 01 	lds	r23, 0x011D
    2844:	80 91 1e 01 	lds	r24, 0x011E
    2848:	90 91 1f 01 	lds	r25, 0x011F
    284c:	4b ef       	ldi	r20, 0xFB	; 251
    284e:	28 e4       	ldi	r18, 0x48	; 72
    2850:	03 e0       	ldi	r16, 0x03	; 3
    2852:	0e 94 bf 02 	call	0x57e	; 0x57e <DisplayValue>
    2856:	74 c0       	rjmp	.+232    	; 0x2940 <main+0xa82>
       }
#endif
    } else {
       // output resistor values in right order
       if (ii == 0) {
    2858:	80 91 44 01 	lds	r24, 0x0144
    285c:	88 23       	and	r24, r24
    285e:	31 f4       	brne	.+12     	; 0x286c <main+0x9ae>
          RvalOut(1);
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	0e 94 75 03 	call	0x6ea	; 0x6ea <RvalOut>
          RvalOut(2);
    2866:	82 e0       	ldi	r24, 0x02	; 2
    2868:	0e 94 75 03 	call	0x6ea	; 0x6ea <RvalOut>
       }
       if (ii == 1) {
    286c:	80 91 44 01 	lds	r24, 0x0144
    2870:	81 30       	cpi	r24, 0x01	; 1
    2872:	31 f4       	brne	.+12     	; 0x2880 <main+0x9c2>
          RvalOut(0);
    2874:	80 e0       	ldi	r24, 0x00	; 0
    2876:	0e 94 75 03 	call	0x6ea	; 0x6ea <RvalOut>
          RvalOut(2);
    287a:	82 e0       	ldi	r24, 0x02	; 2
    287c:	0e 94 75 03 	call	0x6ea	; 0x6ea <RvalOut>
       }
       if (ii == 2) {
    2880:	80 91 44 01 	lds	r24, 0x0144
    2884:	82 30       	cpi	r24, 0x02	; 2
    2886:	09 f0       	breq	.+2      	; 0x288a <main+0x9cc>
    2888:	5b c0       	rjmp	.+182    	; 0x2940 <main+0xa82>
          RvalOut(0);
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	0e 94 75 03 	call	0x6ea	; 0x6ea <RvalOut>
          RvalOut(1);
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	0e 94 75 03 	call	0x6ea	; 0x6ea <RvalOut>
    2896:	54 c0       	rjmp	.+168    	; 0x2940 <main+0xa82>
    goto end;

  } // end (PartFound == PART_RESISTOR)

//capacity measurement is wanted
  else if(PartFound == PART_CAPACITOR) {
    2898:	87 30       	cpi	r24, 0x07	; 7
    289a:	01 f5       	brne	.+64     	; 0x28dc <main+0xa1e>
//     lcd_fix_string(Capacitor);
     lcd_testpin(cap.ca);		//Pin number 1
    289c:	80 91 66 01 	lds	r24, 0x0166
    28a0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
     lcd_fix_string(CapZeich);		// capacitor sign
    28a4:	8d e1       	ldi	r24, 0x1D	; 29
    28a6:	91 e0       	ldi	r25, 0x01	; 1
    28a8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
//#if FLASHEND > 0x1fff
//     lcd_fix_string(Resistor_str);	// -[=]-
//#endif
     lcd_testpin(cap.cb);		//Pin number 2
    28ac:	80 91 67 01 	lds	r24, 0x0167
    28b0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_testpin>
     lcd_line2(); 			//2. row 
    28b4:	80 ec       	ldi	r24, 0xC0	; 192
    28b6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
     DisplayValue(cap.cval_max,cap.cpre_max,'F',4);
    28ba:	60 91 5c 01 	lds	r22, 0x015C
    28be:	70 91 5d 01 	lds	r23, 0x015D
    28c2:	80 91 5e 01 	lds	r24, 0x015E
    28c6:	90 91 5f 01 	lds	r25, 0x015F
    28ca:	40 91 69 01 	lds	r20, 0x0169
    28ce:	26 e4       	ldi	r18, 0x46	; 70
    28d0:	04 e0       	ldi	r16, 0x04	; 4
    28d2:	0e 94 bf 02 	call	0x57e	; 0x57e <DisplayValue>
#if FLASHEND > 0x1fff
     GetESR();				// get ESR of capacitor
    28d6:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <GetESR>
#endif
     goto end;
    28da:	32 c0       	rjmp	.+100    	; 0x2940 <main+0xa82>
  }
  if(NumOfDiodes == 0) { //no diodes are found
    28dc:	80 91 05 01 	lds	r24, 0x0105
    28e0:	88 23       	and	r24, r24
    28e2:	71 f4       	brne	.+28     	; 0x2900 <main+0xa42>
     lcd_fix_string(TestFailed1); 	//"Kein,unbek. oder"
    28e4:	87 eb       	ldi	r24, 0xB7	; 183
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_line2(); //2. row 
    28ec:	80 ec       	ldi	r24, 0xC0	; 192
    28ee:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
     lcd_fix_string(TestFailed2); 	//"defektes "
    28f2:	83 e8       	ldi	r24, 0x83	; 131
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_fix_string(Bauteil);		//"Bauteil"
    28fa:	8c e8       	ldi	r24, 0x8C	; 140
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	16 c0       	rjmp	.+44     	; 0x292c <main+0xa6e>
  } else {
     lcd_fix_string(Bauteil);		//"Bauteil"
    2900:	8c e8       	ldi	r24, 0x8C	; 140
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_fix_string(Unknown); 		//" unbek."
    2908:	8e ea       	ldi	r24, 0xAE	; 174
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_line2(); //2. row 
    2910:	80 ec       	ldi	r24, 0xC0	; 192
    2912:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_command>
     lcd_fix_string(OrBroken); 		//"oder defekt "
    2916:	87 ec       	ldi	r24, 0xC7	; 199
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_data(NumOfDiodes + '0');
    291e:	80 91 05 01 	lds	r24, 0x0105
    2922:	80 5d       	subi	r24, 0xD0	; 208
    2924:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
     lcd_fix_string(AnKat);		//"->|-"
    2928:	85 e3       	ldi	r24, 0x35	; 53
    292a:	91 e0       	ldi	r25, 0x01	; 1
    292c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  }
  empty_count++;
    2930:	80 91 43 01 	lds	r24, 0x0143
    2934:	8f 5f       	subi	r24, 0xFF	; 255
    2936:	80 93 43 01 	sts	0x0143, r24
  mess_count = 0;
    293a:	10 92 0b 01 	sts	0x010B, r1
  goto end2;
    293e:	07 c0       	rjmp	.+14     	; 0x294e <main+0xa90>
  lcd_testpin(trans.b);
  lcd_testpin(trans.c);
  lcd_testpin(trans.e);
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 end:
  empty_count = 0;		// reset counter, if part is found
    2940:	10 92 43 01 	sts	0x0143, r1
  mess_count++;			// count measurements
    2944:	80 91 0b 01 	lds	r24, 0x010B
    2948:	8f 5f       	subi	r24, 0xFF	; 255
    294a:	80 93 0b 01 	sts	0x010B, r24

 end2:
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
    294e:	4f 9b       	sbis	0x09, 7	; 9
    2950:	fe cf       	rjmp	.-4      	; 0x294e <main+0xa90>
  wait_about200ms();
    2952:	88 e2       	ldi	r24, 0x28	; 40
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	0e 94 bb 03 	call	0x776	; 0x776 <sleep_5ms>
// wait 14 seconds or 5 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage+=5) {
    295a:	10 92 57 01 	sts	0x0157, r1
    295e:	10 92 56 01 	sts	0x0156, r1
    2962:	10 c0       	rjmp	.+32     	; 0x2984 <main+0xac6>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    2964:	4f 9b       	sbis	0x09, 7	; 9
    2966:	06 cb       	rjmp	.-2548   	; 0x1f74 <main+0xb6>
        // If the key is pressed again... 
        // goto start of measurement 
        goto start;
     }
     wdt_reset();
    2968:	a8 95       	wdr
     wait_about10ms();
    296a:	82 e0       	ldi	r24, 0x02	; 2
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	0e 94 bb 03 	call	0x776	; 0x776 <sleep_5ms>

 end2:
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
  wait_about200ms();
// wait 14 seconds or 5 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage+=5) {
    2972:	80 91 56 01 	lds	r24, 0x0156
    2976:	90 91 57 01 	lds	r25, 0x0157
    297a:	05 96       	adiw	r24, 0x05	; 5
    297c:	90 93 57 01 	sts	0x0157, r25
    2980:	80 93 56 01 	sts	0x0156, r24
    2984:	80 91 56 01 	lds	r24, 0x0156
    2988:	90 91 57 01 	lds	r25, 0x0157
    298c:	26 e3       	ldi	r18, 0x36	; 54
    298e:	80 3b       	cpi	r24, 0xB0	; 176
    2990:	92 07       	cpc	r25, r18
    2992:	40 f3       	brcs	.-48     	; 0x2964 <main+0xaa6>
  if ((empty_count < POWER_OFF) && (mess_count < POWER2_OFF)) {
     goto start;			// repeat measurement POWER_OFF times
  }
 #endif
  // only one Measurement requested, shut off
  wdt_disable();			//Watchdog off
    2994:	88 e1       	ldi	r24, 0x18	; 24
    2996:	0f b6       	in	r0, 0x3f	; 63
    2998:	f8 94       	cli
    299a:	80 93 60 00 	sts	0x0060, r24
    299e:	10 92 60 00 	sts	0x0060, r1
    29a2:	0f be       	out	0x3f, r0	; 63
  ON_PORT &= ~(1<<ON_PIN);		//switch off power
    29a4:	5e 98       	cbi	0x0b, 6	; 11
  ON_DDR = (1<<ON_PIN);			//switch to GND
    29a6:	80 e4       	ldi	r24, 0x40	; 64
    29a8:	8a b9       	out	0x0a, r24	; 10
  //never ending loop 
  while(1) {
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    29aa:	4f 99       	sbic	0x09, 7	; 9
    29ac:	fe cf       	rjmp	.-4      	; 0x29aa <main+0xaec>
    29ae:	e2 ca       	rjmp	.-2620   	; 0x1f74 <main+0xb6>
  }
#else
  goto start;	// POWER_OFF not selected, repeat measurement
#endif
  return 0;
}   // end main
    29b0:	80 e0       	ldi	r24, 0x00	; 0
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	df 91       	pop	r29
    29b6:	cf 91       	pop	r28
    29b8:	1f 91       	pop	r17
    29ba:	0f 91       	pop	r16
    29bc:	08 95       	ret

000029be <uart_putc>:
    29be:	2f 93       	push	r18
    29c0:	5f b7       	in	r21, 0x3f	; 63
    29c2:	2f 93       	push	r18
    29c4:	2a e0       	ldi	r18, 0x0A	; 10
    29c6:	80 95       	com	r24
    29c8:	08 94       	sec

000029ca <putchar0>:
    29ca:	10 f4       	brcc	.+4      	; 0x29d0 <putchar1>
    29cc:	43 98       	cbi	0x08, 3	; 8
    29ce:	02 c0       	rjmp	.+4      	; 0x29d4 <putchar2>

000029d0 <putchar1>:
    29d0:	43 9a       	sbi	0x08, 3	; 8
	...

000029d4 <putchar2>:
    29d4:	08 d0       	rcall	.+16     	; 0x29e6 <UART_delay>
    29d6:	07 d0       	rcall	.+14     	; 0x29e6 <UART_delay>
    29d8:	86 95       	lsr	r24
    29da:	2a 95       	dec	r18
    29dc:	b1 f7       	brne	.-20     	; 0x29ca <putchar0>
    29de:	2f 91       	pop	r18
    29e0:	5f bf       	out	0x3f, r21	; 63
    29e2:	2f 91       	pop	r18
    29e4:	08 95       	ret

000029e6 <UART_delay>:
    29e6:	5f 93       	push	r21
    29e8:	5f b7       	in	r21, 0x3f	; 63
    29ea:	5f 93       	push	r21
    29ec:	00 00       	nop
    29ee:	5e e3       	ldi	r21, 0x3E	; 62

000029f0 <UART_delay1>:
    29f0:	5a 95       	dec	r21
    29f2:	f1 f7       	brne	.-4      	; 0x29f0 <UART_delay1>
    29f4:	00 00       	nop
    29f6:	5f 91       	pop	r21
    29f8:	5f bf       	out	0x3f, r21	; 63
    29fa:	5f 91       	pop	r21
    29fc:	08 95       	ret

000029fe <wait5s>:
    29fe:	03 d0       	rcall	.+6      	; 0x2a06 <wait1000ms>

00002a00 <wait4s>:
    2a00:	02 d0       	rcall	.+4      	; 0x2a06 <wait1000ms>

00002a02 <wait3s>:
    2a02:	01 d0       	rcall	.+2      	; 0x2a06 <wait1000ms>

00002a04 <wait2s>:
    2a04:	00 d0       	rcall	.+0      	; 0x2a06 <wait1000ms>

00002a06 <wait1000ms>:
    2a06:	00 d0       	rcall	.+0      	; 0x2a08 <wait500ms>

00002a08 <wait500ms>:
    2a08:	03 d0       	rcall	.+6      	; 0x2a10 <wait100ms>

00002a0a <wait400ms>:
    2a0a:	02 d0       	rcall	.+4      	; 0x2a10 <wait100ms>

00002a0c <wait300ms>:
    2a0c:	01 d0       	rcall	.+2      	; 0x2a10 <wait100ms>

00002a0e <wait200ms>:
    2a0e:	00 d0       	rcall	.+0      	; 0x2a10 <wait100ms>

00002a10 <wait100ms>:
    2a10:	a8 95       	wdr
    2a12:	00 d0       	rcall	.+0      	; 0x2a14 <wait50ms>

00002a14 <wait50ms>:
    2a14:	03 d0       	rcall	.+6      	; 0x2a1c <wait10ms>

00002a16 <wait40ms>:
    2a16:	02 d0       	rcall	.+4      	; 0x2a1c <wait10ms>

00002a18 <wait30ms>:
    2a18:	01 d0       	rcall	.+2      	; 0x2a1c <wait10ms>

00002a1a <wait20ms>:
    2a1a:	00 d0       	rcall	.+0      	; 0x2a1c <wait10ms>

00002a1c <wait10ms>:
    2a1c:	00 d0       	rcall	.+0      	; 0x2a1e <wait5ms>

00002a1e <wait5ms>:
    2a1e:	03 d0       	rcall	.+6      	; 0x2a26 <wait1ms>

00002a20 <wait4ms>:
    2a20:	02 d0       	rcall	.+4      	; 0x2a26 <wait1ms>

00002a22 <wait3ms>:
    2a22:	01 d0       	rcall	.+2      	; 0x2a26 <wait1ms>

00002a24 <wait2ms>:
    2a24:	00 d0       	rcall	.+0      	; 0x2a26 <wait1ms>

00002a26 <wait1ms>:
    2a26:	00 d0       	rcall	.+0      	; 0x2a28 <wait500us>

00002a28 <wait500us>:
    2a28:	03 d0       	rcall	.+6      	; 0x2a30 <wait100us>

00002a2a <wait400us>:
    2a2a:	02 d0       	rcall	.+4      	; 0x2a30 <wait100us>

00002a2c <wait300us>:
    2a2c:	01 d0       	rcall	.+2      	; 0x2a30 <wait100us>

00002a2e <wait200us>:
    2a2e:	00 d0       	rcall	.+0      	; 0x2a30 <wait100us>

00002a30 <wait100us>:
    2a30:	00 d0       	rcall	.+0      	; 0x2a32 <wait50us>

00002a32 <wait50us>:
    2a32:	03 d0       	rcall	.+6      	; 0x2a3a <wait10us>

00002a34 <wait40us>:
    2a34:	02 d0       	rcall	.+4      	; 0x2a3a <wait10us>

00002a36 <wait30us>:
    2a36:	01 d0       	rcall	.+2      	; 0x2a3a <wait10us>

00002a38 <wait20us>:
    2a38:	00 d0       	rcall	.+0      	; 0x2a3a <wait10us>

00002a3a <wait10us>:
    2a3a:	00 d0       	rcall	.+0      	; 0x2a3c <wait5us>

00002a3c <wait5us>:
    2a3c:	03 d0       	rcall	.+6      	; 0x2a44 <wait1us>

00002a3e <wait4us>:
    2a3e:	02 d0       	rcall	.+4      	; 0x2a44 <wait1us>

00002a40 <wait3us>:
    2a40:	01 d0       	rcall	.+2      	; 0x2a44 <wait1us>

00002a42 <wait2us>:
    2a42:	00 d0       	rcall	.+0      	; 0x2a44 <wait1us>

00002a44 <wait1us>:
    2a44:	00 00       	nop
    2a46:	08 95       	ret

00002a48 <getRLmultip>:
  R_DDR = 0;			// switch all resistor ports to input
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
  return;
 } // end ReadCapacity()

unsigned int getRLmultip(unsigned int cvolt) {
    2a48:	ff 92       	push	r15
    2a4a:	0f 93       	push	r16
    2a4c:	1f 93       	push	r17
    2a4e:	cf 93       	push	r28
    2a50:	df 93       	push	r29

  unsigned int uvolt;
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;
  if (cvolt >= RL_Tab_Beginn) {
    2a52:	21 e0       	ldi	r18, 0x01	; 1
    2a54:	8c 32       	cpi	r24, 0x2C	; 44
    2a56:	92 07       	cpc	r25, r18
    2a58:	18 f0       	brcs	.+6      	; 0x2a60 <getRLmultip+0x18>
     uvolt = cvolt - RL_Tab_Beginn;
    2a5a:	8c 52       	subi	r24, 0x2C	; 44
    2a5c:	91 40       	sbci	r25, 0x01	; 1
    2a5e:	02 c0       	rjmp	.+4      	; 0x2a64 <getRLmultip+0x1c>
  } else {
     uvolt = 0;			// limit to begin of table
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = uvolt / RL_Tab_Abstand;
    2a64:	69 e1       	ldi	r22, 0x19	; 25
    2a66:	70 e0       	ldi	r23, 0x00	; 0
    2a68:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <__udivmodhi4>
  tabres = uvolt % RL_Tab_Abstand;
    2a6c:	f8 2e       	mov	r15, r24
  tabres = RL_Tab_Abstand - tabres;
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
    2a6e:	6d 32       	cpi	r22, 0x2D	; 45
    2a70:	08 f0       	brcs	.+2      	; 0x2a74 <getRLmultip+0x2c>
    2a72:	6c e2       	ldi	r22, 0x2C	; 44
    2a74:	c6 2f       	mov	r28, r22
    2a76:	d0 e0       	ldi	r29, 0x00	; 0
    2a78:	ce 01       	movw	r24, r28
    2a7a:	88 0f       	add	r24, r24
    2a7c:	99 1f       	adc	r25, r25
    2a7e:	80 50       	subi	r24, 0x00	; 0
    2a80:	90 40       	sbci	r25, 0x00	; 0
    2a82:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__eerd_word_m168>
    2a86:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RLtab[tabind+1]);
    2a88:	ce 01       	movw	r24, r28
    2a8a:	88 0f       	add	r24, r24
    2a8c:	99 1f       	adc	r25, r25
    2a8e:	8e 5f       	subi	r24, 0xFE	; 254
    2a90:	9f 4f       	sbci	r25, 0xFF	; 255
    2a92:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__eerd_word_m168>
    2a96:	9c 01       	movw	r18, r24
  } else {
     uvolt = 0;			// limit to begin of table
  }
  tabind = uvolt / RL_Tab_Abstand;
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
    2a98:	49 e1       	ldi	r20, 0x19	; 25
    2a9a:	4f 19       	sub	r20, r15
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
    2a9c:	50 e0       	ldi	r21, 0x00	; 0
    2a9e:	08 1b       	sub	r16, r24
    2aa0:	19 0b       	sbc	r17, r25
    2aa2:	40 9f       	mul	r20, r16
    2aa4:	c0 01       	movw	r24, r0
    2aa6:	41 9f       	mul	r20, r17
    2aa8:	90 0d       	add	r25, r0
    2aaa:	50 9f       	mul	r21, r16
    2aac:	90 0d       	add	r25, r0
    2aae:	11 24       	eor	r1, r1
    2ab0:	0c 96       	adiw	r24, 0x0c	; 12
    2ab2:	69 e1       	ldi	r22, 0x19	; 25
    2ab4:	70 e0       	ldi	r23, 0x00	; 0
    2ab6:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <__udivmodhi4>
    2aba:	62 0f       	add	r22, r18
    2abc:	73 1f       	adc	r23, r19
}
    2abe:	cb 01       	movw	r24, r22
    2ac0:	df 91       	pop	r29
    2ac2:	cf 91       	pop	r28
    2ac4:	1f 91       	pop	r17
    2ac6:	0f 91       	pop	r16
    2ac8:	ff 90       	pop	r15
    2aca:	08 95       	ret

00002acc <Scale_C_with_vcc>:

void Scale_C_with_vcc(void) {
    2acc:	8f 92       	push	r8
    2ace:	9f 92       	push	r9
    2ad0:	af 92       	push	r10
    2ad2:	bf 92       	push	r11
    2ad4:	df 92       	push	r13
    2ad6:	ef 92       	push	r14
    2ad8:	ff 92       	push	r15
    2ada:	0f 93       	push	r16
    2adc:	1f 93       	push	r17
    2ade:	e0 90 58 01 	lds	r14, 0x0158
    2ae2:	f0 90 59 01 	lds	r15, 0x0159
    2ae6:	00 91 5a 01 	lds	r16, 0x015A
    2aea:	10 91 5b 01 	lds	r17, 0x015B
    2aee:	d0 90 68 01 	lds	r13, 0x0168
   while (cap.cval > 100000) {
      cap.cval /= 10;
    2af2:	4a e0       	ldi	r20, 0x0A	; 10
    2af4:	84 2e       	mov	r8, r20
    2af6:	91 2c       	mov	r9, r1
    2af8:	a1 2c       	mov	r10, r1
    2afa:	b1 2c       	mov	r11, r1
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    2afc:	08 c0       	rjmp	.+16     	; 0x2b0e <Scale_C_with_vcc+0x42>
      cap.cval /= 10;
    2afe:	c8 01       	movw	r24, r16
    2b00:	b7 01       	movw	r22, r14
    2b02:	a5 01       	movw	r20, r10
    2b04:	94 01       	movw	r18, r8
    2b06:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
    2b0a:	79 01       	movw	r14, r18
    2b0c:	8a 01       	movw	r16, r20
    2b0e:	8d 2d       	mov	r24, r13
    2b10:	d3 94       	inc	r13
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    2b12:	91 ea       	ldi	r25, 0xA1	; 161
    2b14:	e9 16       	cp	r14, r25
    2b16:	96 e8       	ldi	r25, 0x86	; 134
    2b18:	f9 06       	cpc	r15, r25
    2b1a:	91 e0       	ldi	r25, 0x01	; 1
    2b1c:	09 07       	cpc	r16, r25
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	19 07       	cpc	r17, r25
    2b22:	68 f7       	brcc	.-38     	; 0x2afe <Scale_C_with_vcc+0x32>
    2b24:	80 93 68 01 	sts	0x0168, r24
      cap.cval /= 10;
      cap.cpre ++;			// prevent overflow
   }
   cap.cval *= ADCconfig.U_AVCC;	// scale with measured voltage
    2b28:	20 91 3d 01 	lds	r18, 0x013D
    2b2c:	30 91 3e 01 	lds	r19, 0x013E
    2b30:	40 e0       	ldi	r20, 0x00	; 0
    2b32:	50 e0       	ldi	r21, 0x00	; 0
    2b34:	c8 01       	movw	r24, r16
    2b36:	b7 01       	movw	r22, r14
    2b38:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
    2b3c:	28 e8       	ldi	r18, 0x88	; 136
    2b3e:	33 e1       	ldi	r19, 0x13	; 19
    2b40:	40 e0       	ldi	r20, 0x00	; 0
    2b42:	50 e0       	ldi	r21, 0x00	; 0
    2b44:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
    2b48:	20 93 58 01 	sts	0x0158, r18
    2b4c:	30 93 59 01 	sts	0x0159, r19
    2b50:	40 93 5a 01 	sts	0x015A, r20
    2b54:	50 93 5b 01 	sts	0x015B, r21
}
    2b58:	1f 91       	pop	r17
    2b5a:	0f 91       	pop	r16
    2b5c:	ff 90       	pop	r15
    2b5e:	ef 90       	pop	r14
    2b60:	df 90       	pop	r13
    2b62:	bf 90       	pop	r11
    2b64:	af 90       	pop	r10
    2b66:	9f 90       	pop	r9
    2b68:	8f 90       	pop	r8
    2b6a:	08 95       	ret

00002b6c <ReadCapacity>:
#include "config.h"
#include "Transistortester.h"


//=================================================================
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    2b6c:	af 92       	push	r10
    2b6e:	bf 92       	push	r11
    2b70:	cf 92       	push	r12
    2b72:	df 92       	push	r13
    2b74:	ef 92       	push	r14
    2b76:	ff 92       	push	r15
    2b78:	0f 93       	push	r16
    2b7a:	1f 93       	push	r17
    2b7c:	cf 93       	push	r28
    2b7e:	df 93       	push	r29
    2b80:	18 2f       	mov	r17, r24
    2b82:	06 2f       	mov	r16, r22
  uint8_t HiPinR_L, HiPinR_H;
  uint8_t LoADC;
  uint8_t ii;

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
    2b84:	88 0f       	add	r24, r24
    2b86:	81 0f       	add	r24, r17
    2b88:	86 0f       	add	r24, r22
    2b8a:	81 50       	subi	r24, 0x01	; 1
    2b8c:	80 93 45 01 	sts	0x0145, r24
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2b90:	86 2f       	mov	r24, r22
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	88 55       	subi	r24, 0x58	; 88
    2b96:	9e 4f       	sbci	r25, 0xFE	; 254
    2b98:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__eerd_byte_m168>
    2b9c:	b8 2e       	mov	r11, r24
  HiPinR_L = MEM_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
    2b9e:	21 2f       	mov	r18, r17
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	c9 01       	movw	r24, r18
    2ba4:	8b 55       	subi	r24, 0x5B	; 91
    2ba6:	9e 4f       	sbci	r25, 0xFE	; 254
    2ba8:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__eerd_byte_m168>
    2bac:	a8 2e       	mov	r10, r24
//     DisplayValue(cap.cval,cap.cpre,'F',3);
//     wait_about2s();
//#endif
//     return;	//We have found a capacitor already
//  }
  if(PartFound == PART_RESISTOR) {
    2bae:	80 91 07 01 	lds	r24, 0x0107
    2bb2:	86 30       	cpi	r24, 0x06	; 6
    2bb4:	09 f4       	brne	.+2      	; 0x2bb8 <ReadCapacity+0x4c>
    2bb6:	3a c2       	rjmp	.+1140   	; 0x302c <ReadCapacity+0x4c0>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    2bb8:	90 91 05 01 	lds	r25, 0x0105
    2bbc:	ec e6       	ldi	r30, 0x6C	; 108
    2bbe:	f1 e0       	ldi	r31, 0x01	; 1
    2bc0:	80 e0       	ldi	r24, 0x00	; 0
    2bc2:	0f c0       	rjmp	.+30     	; 0x2be2 <ReadCapacity+0x76>
     if ((diodes[ii].Cathode == LowPin) && (diodes[ii].Anode == HighPin) && (diodes[ii].Voltage < 1500)) {
    2bc4:	21 81       	ldd	r18, Z+1	; 0x01
    2bc6:	20 17       	cp	r18, r16
    2bc8:	51 f4       	brne	.+20     	; 0x2bde <ReadCapacity+0x72>
    2bca:	20 81       	ld	r18, Z
    2bcc:	21 17       	cp	r18, r17
    2bce:	39 f4       	brne	.+14     	; 0x2bde <ReadCapacity+0x72>
    2bd0:	22 81       	ldd	r18, Z+2	; 0x02
    2bd2:	33 81       	ldd	r19, Z+3	; 0x03
    2bd4:	45 e0       	ldi	r20, 0x05	; 5
    2bd6:	2c 3d       	cpi	r18, 0xDC	; 220
    2bd8:	34 07       	cpc	r19, r20
    2bda:	08 f4       	brcc	.+2      	; 0x2bde <ReadCapacity+0x72>
    2bdc:	27 c2       	rjmp	.+1102   	; 0x302c <ReadCapacity+0x4c0>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    2bde:	8f 5f       	subi	r24, 0xFF	; 255
    2be0:	34 96       	adiw	r30, 0x04	; 4
    2be2:	89 17       	cp	r24, r25
    2be4:	78 f3       	brcs	.-34     	; 0x2bc4 <ReadCapacity+0x58>

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2be6:	88 e0       	ldi	r24, 0x08	; 8
    2be8:	b8 2a       	or	r11, r24
        return;
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
    2bea:	10 92 65 01 	sts	0x0165, r1
    2bee:	10 92 64 01 	sts	0x0164, r1
#endif
  cap.cval = 0;				// set capacity value to zero
    2bf2:	10 92 58 01 	sts	0x0158, r1
    2bf6:	10 92 59 01 	sts	0x0159, r1
    2bfa:	10 92 5a 01 	sts	0x015A, r1
    2bfe:	10 92 5b 01 	sts	0x015B, r1
  cap.cpre = -12;			//default unit is pF
    2c02:	84 ef       	ldi	r24, 0xF4	; 244
    2c04:	80 93 68 01 	sts	0x0168, r24
  EntladePins();			// discharge capacitor
    2c08:	0e 94 cc 01 	call	0x398	; 0x398 <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    2c0c:	88 e0       	ldi	r24, 0x08	; 8
    2c0e:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    2c10:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    2c12:	b7 b8       	out	0x07, r11	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    2c14:	a4 b8       	out	0x04, r10	; 4
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    2c16:	81 2f       	mov	r24, r17
    2c18:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
    2c1c:	6c 01       	movw	r12, r24
// ******** should adcv[0] be measured without current???
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2c1e:	c0 e0       	ldi	r28, 0x00	; 0
    2c20:	d0 e0       	ldi	r29, 0x00	; 0
     ChargePin10ms(HiPinR_L,1);		//HighPin with R_L 10ms to VCC ,then currentless
    2c22:	8a 2d       	mov	r24, r10
    2c24:	61 e0       	ldi	r22, 0x01	; 1
    2c26:	0e 94 ab 01 	call	0x356	; 0x356 <ChargePin10ms>
     wait500us();			//wait a little time
    2c2a:	0e 94 14 15 	call	0x2a28	; 0x2a28 <wait500us>
     wdt_reset();
    2c2e:	a8 95       	wdr
     // read voltage without current, is already charged enough?
     adcv[2] = ReadADC(HighPin);
    2c30:	81 2f       	mov	r24, r17
    2c32:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
    2c36:	7c 01       	movw	r14, r24
     if (adcv[2] > adcv[0]) {
    2c38:	c8 16       	cp	r12, r24
    2c3a:	d9 06       	cpc	r13, r25
    2c3c:	18 f4       	brcc	.+6      	; 0x2c44 <ReadCapacity+0xd8>
        adcv[2] -= adcv[0];		//difference to beginning voltage
    2c3e:	ec 18       	sub	r14, r12
    2c40:	fd 08       	sbc	r15, r13
    2c42:	02 c0       	rjmp	.+4      	; 0x2c48 <ReadCapacity+0xdc>
     } else {
        adcv[2] = 0;			// voltage is lower or same as beginning voltage
    2c44:	ee 24       	eor	r14, r14
    2c46:	ff 24       	eor	r15, r15
     }
     if ((ovcnt16 == 126) && (adcv[2] < 75)) {
    2c48:	ce 37       	cpi	r28, 0x7E	; 126
    2c4a:	d1 05       	cpc	r29, r1
    2c4c:	29 f4       	brne	.+10     	; 0x2c58 <ReadCapacity+0xec>
    2c4e:	9b e4       	ldi	r25, 0x4B	; 75
    2c50:	e9 16       	cp	r14, r25
    2c52:	f1 04       	cpc	r15, r1
    2c54:	08 f4       	brcc	.+2      	; 0x2c58 <ReadCapacity+0xec>
    2c56:	e5 c1       	rjmp	.+970    	; 0x3022 <ReadCapacity+0x4b6>
        // 300mV can not be reached well-timed 
        break;		// don't try to load any more
     }
     if (adcv[2] > 300) {
    2c58:	2d e2       	ldi	r18, 0x2D	; 45
    2c5a:	e2 16       	cp	r14, r18
    2c5c:	21 e0       	ldi	r18, 0x01	; 1
    2c5e:	f2 06       	cpc	r15, r18
    2c60:	18 f0       	brcs	.+6      	; 0x2c68 <ReadCapacity+0xfc>
#if DebugOut == 10
  DisplayValue(ovcnt16,0,' ',4);
  DisplayValue(adcv[2],-3,'V',4);
#endif
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    2c62:	20 97       	sbiw	r28, 0x00	; 0
    2c64:	39 f0       	breq	.+14     	; 0x2c74 <ReadCapacity+0x108>
    2c66:	0c c0       	rjmp	.+24     	; 0x2c80 <ReadCapacity+0x114>
  R_PORT = 0;				// switch R-Port to GND
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2c68:	21 96       	adiw	r28, 0x01	; 1
    2c6a:	31 e0       	ldi	r19, 0x01	; 1
    2c6c:	c4 3f       	cpi	r28, 0xF4	; 244
    2c6e:	d3 07       	cpc	r29, r19
    2c70:	c1 f6       	brne	.-80     	; 0x2c22 <ReadCapacity+0xb6>
    2c72:	d7 c1       	rjmp	.+942    	; 0x3022 <ReadCapacity+0x4b6>
#if DebugOut == 10
  DisplayValue(ovcnt16,0,' ',4);
  DisplayValue(adcv[2],-3,'V',4);
#endif
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    2c74:	45 e1       	ldi	r20, 0x15	; 21
    2c76:	e4 16       	cp	r14, r20
    2c78:	45 e0       	ldi	r20, 0x05	; 5
    2c7a:	f4 06       	cpc	r15, r20
    2c7c:	08 f0       	brcs	.+2      	; 0x2c80 <ReadCapacity+0x114>
    2c7e:	6d c0       	rjmp	.+218    	; 0x2d5a <ReadCapacity+0x1ee>
     goto messe_mit_rh;		// Voltage of more than 1300mV is reached in one pulse, to fast loaded
  }
  // Capacity is more than about 50µF
  cap.cpre = -9;		// switch units to nF 
    2c80:	87 ef       	ldi	r24, 0xF7	; 247
    2c82:	80 93 68 01 	sts	0x0168, r24
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the same time which is required for loading
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2c86:	aa 24       	eor	r10, r10
    2c88:	bb 24       	eor	r11, r11
     wait5ms();
    2c8a:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <wait5ms>
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
    2c8e:	81 2f       	mov	r24, r17
    2c90:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
     wdt_reset();
    2c94:	a8 95       	wdr
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the same time which is required for loading
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2c96:	08 94       	sec
    2c98:	a1 1c       	adc	r10, r1
    2c9a:	b1 1c       	adc	r11, r1
    2c9c:	ca 15       	cp	r28, r10
    2c9e:	db 05       	cpc	r29, r11
    2ca0:	a0 f7       	brcc	.-24     	; 0x2c8a <ReadCapacity+0x11e>
     wait5ms();
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
    2ca2:	c8 16       	cp	r12, r24
    2ca4:	d9 06       	cpc	r13, r25
    2ca6:	30 f4       	brcc	.+12     	; 0x2cb4 <ReadCapacity+0x148>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    2ca8:	8c 19       	sub	r24, r12
    2caa:	9d 09       	sbc	r25, r13
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    2cac:	8e 15       	cp	r24, r14
    2cae:	9f 05       	cpc	r25, r15
    2cb0:	60 f4       	brcc	.+24     	; 0x2cca <ReadCapacity+0x15e>
    2cb2:	02 c0       	rjmp	.+4      	; 0x2cb8 <ReadCapacity+0x14c>
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
    2cb8:	97 01       	movw	r18, r14
    2cba:	28 1b       	sub	r18, r24
    2cbc:	39 0b       	sbc	r19, r25
    2cbe:	c9 01       	movw	r24, r18
  } else {
     adcv[3] = 0;			// no lost voltage
  }
  if (adcv[3] > 100) {
    2cc0:	25 36       	cpi	r18, 0x65	; 101
    2cc2:	31 05       	cpc	r19, r1
    2cc4:	08 f0       	brcs	.+2      	; 0x2cc8 <ReadCapacity+0x15c>
    2cc6:	ad c1       	rjmp	.+858    	; 0x3022 <ReadCapacity+0x4b6>
    2cc8:	02 c0       	rjmp	.+4      	; 0x2cce <ReadCapacity+0x162>
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
  } else {
     adcv[3] = 0;			// no lost voltage
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
     lcd_space();
     wait_about1s();
 #endif
     goto keinC;			// capacitor does not keep the voltage about 5ms
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
    2cce:	21 96       	adiw	r28, 0x01	; 1
    2cd0:	5e 01       	movw	r10, r28
    2cd2:	cc 24       	eor	r12, r12
    2cd4:	dd 24       	eor	r13, r13
    2cd6:	a0 92 60 01 	sts	0x0160, r10
    2cda:	b0 92 61 01 	sts	0x0161, r11
    2cde:	c0 92 62 01 	sts	0x0162, r12
    2ce2:	d0 92 63 01 	sts	0x0163, r13
  // compute factor with load voltage + lost voltage during the voltage load time
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]+adcv[3]);	// get factor to convert time to capacity from table
    2ce6:	8e 0d       	add	r24, r14
    2ce8:	9f 1d       	adc	r25, r15
    2cea:	0e 94 24 15 	call	0x2a48	; 0x2a48 <getRLmultip>
    2cee:	bc 01       	movw	r22, r24
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	a6 01       	movw	r20, r12
    2cf6:	95 01       	movw	r18, r10
    2cf8:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    2cfc:	60 93 60 01 	sts	0x0160, r22
    2d00:	70 93 61 01 	sts	0x0161, r23
    2d04:	80 93 62 01 	sts	0x0162, r24
    2d08:	90 93 63 01 	sts	0x0163, r25
#endif
   cap.cval = cap.cval_uncorrected.dw;	// set result to uncorrected
    2d0c:	60 93 58 01 	sts	0x0158, r22
    2d10:	70 93 59 01 	sts	0x0159, r23
    2d14:	80 93 5a 01 	sts	0x015A, r24
    2d18:	90 93 5b 01 	sts	0x015B, r25
   Scale_C_with_vcc();
    2d1c:	0e 94 66 15 	call	0x2acc	; 0x2acc <Scale_C_with_vcc>
   // cap.cval for this type is at least 40000nF, so the last digit will be never shown
   cap.cval *= (1000 - C_H_KORR);	// correct with C_H_KORR with 0.1% resolution, but prevent overflow
    2d20:	60 91 58 01 	lds	r22, 0x0158
    2d24:	70 91 59 01 	lds	r23, 0x0159
    2d28:	80 91 5a 01 	lds	r24, 0x015A
    2d2c:	90 91 5b 01 	lds	r25, 0x015B
    2d30:	28 ee       	ldi	r18, 0xE8	; 232
    2d32:	33 e0       	ldi	r19, 0x03	; 3
    2d34:	40 e0       	ldi	r20, 0x00	; 0
    2d36:	50 e0       	ldi	r21, 0x00	; 0
    2d38:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
   cap.cval /= 100;
    2d3c:	24 e6       	ldi	r18, 0x64	; 100
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	40 e0       	ldi	r20, 0x00	; 0
    2d42:	50 e0       	ldi	r21, 0x00	; 0
    2d44:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
    2d48:	20 93 58 01 	sts	0x0158, r18
    2d4c:	30 93 59 01 	sts	0x0159, r19
    2d50:	40 93 5a 01 	sts	0x015A, r20
    2d54:	50 93 5b 01 	sts	0x015B, r21
   DisplayValue(cap.cval,cap.cpre,'F',4);
   lcd_space();
   lcd_string(utoa(ovcnt16,outval,10));
   wait_about3s();
#endif
   goto checkDiodes;
    2d58:	27 c1       	rjmp	.+590    	; 0x2fa8 <ReadCapacity+0x43c>
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
  HiPinR_L = MEM_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load
    2d5a:	ea 2c       	mov	r14, r10
    2d5c:	ee 0c       	add	r14, r14

//==================================================================================
// Measurement of little capacity values
messe_mit_rh:
  //little capacity value, about  < 50 µF
  EntladePins();			// discharge capacitor
    2d5e:	0e 94 cc 01 	call	0x398	; 0x398 <EntladePins>
  //measure with the R_H (470kOhm) resistor 
  R_PORT = 0;		// R_DDR ist HiPinR_L
    2d62:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = (1<<TP1) | (1<<TP2) | (1<<TP3) | (1<<TxD);	//switch all Pins to output
    2d64:	8f e0       	ldi	r24, 0x0F	; 15
    2d66:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		//switch all ADC Pins to GND
    2d68:	88 e0       	ldi	r24, 0x08	; 8
    2d6a:	88 b9       	out	0x08, r24	; 8
  R_DDR = HiPinR_H;   		// switch R_H resistor port for HighPin to output (GND)
    2d6c:	e4 b8       	out	0x04, r14	; 4
// setup Analog Comparator
  ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    2d6e:	80 e4       	ldi	r24, 0x40	; 64
    2d70:	80 93 7b 00 	sts	0x007B, r24
  ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    2d74:	84 e5       	ldi	r24, 0x54	; 84
    2d76:	80 bf       	out	0x30, r24	; 48
  ADMUX = (1<<REFS0) | HighPin;			// switch Mux to High-Pin
    2d78:	81 2f       	mov	r24, r17
    2d7a:	80 64       	ori	r24, 0x40	; 64
    2d7c:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    2d80:	86 e1       	ldi	r24, 0x16	; 22
    2d82:	80 93 7a 00 	sts	0x007A, r24
  wait200us();			//wait for bandgap to start up
    2d86:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <wait200us>

  ovcnt16 = 0;
// setup Counter1
  TCCR1A = 0;			// set Counter1 to normal Mode
    2d8a:	10 92 80 00 	sts	0x0080, r1
  TCNT1 = 0;			//set Counter to 0
    2d8e:	10 92 85 00 	sts	0x0085, r1
    2d92:	10 92 84 00 	sts	0x0084, r1
  TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// mega88
    2d96:	87 e2       	ldi	r24, 0x27	; 39
    2d98:	86 bb       	out	0x16, r24	; 22
  R_PORT = HiPinR_H;           	// switch R_H resistor port for HighPin to VCC
    2d9a:	e5 b8       	out	0x05, r14	; 5
  if(PartFound == PART_FET) {
    2d9c:	80 91 07 01 	lds	r24, 0x0107
    2da0:	83 30       	cpi	r24, 0x03	; 3
    2da2:	79 f4       	brne	.+30     	; 0x2dc2 <ReadCapacity+0x256>
     // charge capacitor with R_H resistor
     TCCR1B = (1<<CS10);	//Start counter 1MHz or 8MHz
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = (((1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK) & ~(1<<HighPin));	// release only HighPin ADC port
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	01 2e       	mov	r0, r17
    2db0:	02 c0       	rjmp	.+4      	; 0x2db6 <ReadCapacity+0x24a>
    2db2:	88 0f       	add	r24, r24
    2db4:	99 1f       	adc	r25, r25
    2db6:	0a 94       	dec	r0
    2db8:	e2 f7       	brpl	.-8      	; 0x2db2 <ReadCapacity+0x246>
    2dba:	80 95       	com	r24
    2dbc:	8f 70       	andi	r24, 0x0F	; 15
    2dbe:	87 b9       	out	0x07, r24	; 7
    2dc0:	04 c0       	rjmp	.+8      	; 0x2dca <ReadCapacity+0x25e>
  } else {
     TCCR1B =  (1<<CS10);	//start counter 1MHz or 8MHz
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
    2dc8:	b7 b8       	out	0x07, r11	; 7
     ii = TI1_INT_FLAGS;	//read Timer flags
     if (ii & (1<<ICF1))  {
        break;
     }
     if((ii & (1<<TOV1))) {	// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
        TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    2dca:	81 e0       	ldi	r24, 0x01	; 1
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
  }
//******************************
  while(1) {
     // Wait, until  Input Capture is set
     ii = TI1_INT_FLAGS;	//read Timer flags
    2dcc:	26 b3       	in	r18, 0x16	; 22
     if (ii & (1<<ICF1))  {
    2dce:	25 fd       	sbrc	r18, 5
    2dd0:	09 c0       	rjmp	.+18     	; 0x2de4 <ReadCapacity+0x278>
        break;
     }
     if((ii & (1<<TOV1))) {	// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    2dd2:	20 ff       	sbrs	r18, 0
    2dd4:	fb cf       	rjmp	.-10     	; 0x2dcc <ReadCapacity+0x260>
        TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    2dd6:	86 bb       	out	0x16, r24	; 22
        wdt_reset();
    2dd8:	a8 95       	wdr
        ovcnt16++;
    2dda:	21 96       	adiw	r28, 0x01	; 1
        if(ovcnt16 == (F_CPU/5000)) {
    2ddc:	36 e0       	ldi	r19, 0x06	; 6
    2dde:	c0 34       	cpi	r28, 0x40	; 64
    2de0:	d3 07       	cpc	r29, r19
    2de2:	a1 f7       	brne	.-24     	; 0x2dcc <ReadCapacity+0x260>
           break; 		//Timeout for Charging, above 12 s
        }
     }
  }
  TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    2de4:	10 92 81 00 	sts	0x0081, r1
  TI1_INT_FLAGS = (1<<ICF1);		// Reset Input Capture
    2de8:	80 e2       	ldi	r24, 0x20	; 32
    2dea:	86 bb       	out	0x16, r24	; 22
  tmpint = ICR1;		// get previous Input Capture Counter flag
    2dec:	e0 90 86 00 	lds	r14, 0x0086
    2df0:	f0 90 87 00 	lds	r15, 0x0087
// check actual counter, if an additional overflow must be added
  if((TCNT1 > tmpint) && (ii & (1<<TOV1))) {
    2df4:	80 91 84 00 	lds	r24, 0x0084
    2df8:	90 91 85 00 	lds	r25, 0x0085
    2dfc:	e8 16       	cp	r14, r24
    2dfe:	f9 06       	cpc	r15, r25
    2e00:	28 f4       	brcc	.+10     	; 0x2e0c <ReadCapacity+0x2a0>
    2e02:	20 ff       	sbrs	r18, 0
    2e04:	03 c0       	rjmp	.+6      	; 0x2e0c <ReadCapacity+0x2a0>
     // this OV was not counted, but was before the Input Capture
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	86 bb       	out	0x16, r24	; 22
     ovcnt16++;
    2e0a:	21 96       	adiw	r28, 0x01	; 1
  }
//############################################################
  ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    2e0c:	86 e9       	ldi	r24, 0x96	; 150
    2e0e:	80 93 7a 00 	sts	0x007A, r24
  R_DDR = 0;			// switch R_H resistor port for input
    2e12:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// switch R_H resistor port pull up for HighPin off
    2e14:	15 b8       	out	0x05, r1	; 5
  load_diff = ReadADC(HighPin) + REF_C_KORR - ref_mv;	// build difference of capacitor voltage to Reference Voltage
    2e16:	81 2f       	mov	r24, r17
    2e18:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
    2e1c:	20 91 3f 01 	lds	r18, 0x013F
    2e20:	30 91 40 01 	lds	r19, 0x0140
    2e24:	82 1b       	sub	r24, r18
    2e26:	93 0b       	sbc	r25, r19
    2e28:	0c 96       	adiw	r24, 0x0c	; 12
    2e2a:	90 93 6b 01 	sts	0x016B, r25
    2e2e:	80 93 6a 01 	sts	0x016A, r24
//############################################################
  if (ovcnt16 >= (F_CPU/10000)) {
    2e32:	43 e0       	ldi	r20, 0x03	; 3
    2e34:	c0 32       	cpi	r28, 0x20	; 32
    2e36:	d4 07       	cpc	r29, r20
    2e38:	08 f0       	brcs	.+2      	; 0x2e3c <ReadCapacity+0x2d0>
    2e3a:	f3 c0       	rjmp	.+486    	; 0x3022 <ReadCapacity+0x4b6>
     goto keinC;	// no normal end
  }
//  cap.cval_uncorrected = CombineII2Long(ovcnt16, tmpint);
  cap.cval_uncorrected.w[1] = ovcnt16;
    2e3c:	d0 93 63 01 	sts	0x0163, r29
    2e40:	c0 93 62 01 	sts	0x0162, r28
  cap.cval_uncorrected.w[0] = tmpint;
    2e44:	f0 92 61 01 	sts	0x0161, r15
    2e48:	e0 92 60 01 	sts	0x0160, r14

  cap.cpre = -12;			// cap.cval unit is pF 
    2e4c:	84 ef       	ldi	r24, 0xF4	; 244
    2e4e:	80 93 68 01 	sts	0x0168, r24
  if (ovcnt16 > 65) {
    2e52:	c2 34       	cpi	r28, 0x42	; 66
    2e54:	d1 05       	cpc	r29, r1
    2e56:	c8 f0       	brcs	.+50     	; 0x2e8a <ReadCapacity+0x31e>
     cap.cval_uncorrected.dw /= 100;	// switch to next unit
    2e58:	60 91 60 01 	lds	r22, 0x0160
    2e5c:	70 91 61 01 	lds	r23, 0x0161
    2e60:	80 91 62 01 	lds	r24, 0x0162
    2e64:	90 91 63 01 	lds	r25, 0x0163
    2e68:	24 e6       	ldi	r18, 0x64	; 100
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	40 e0       	ldi	r20, 0x00	; 0
    2e6e:	50 e0       	ldi	r21, 0x00	; 0
    2e70:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
    2e74:	20 93 60 01 	sts	0x0160, r18
    2e78:	30 93 61 01 	sts	0x0161, r19
    2e7c:	40 93 62 01 	sts	0x0162, r20
    2e80:	50 93 63 01 	sts	0x0163, r21
     cap.cpre += 2;			// set unit, prevent overflow
    2e84:	86 ef       	ldi	r24, 0xF6	; 246
    2e86:	80 93 68 01 	sts	0x0168, r24
  }
  cap.cval_uncorrected.dw *= RHmultip;		// 708
    2e8a:	60 91 00 01 	lds	r22, 0x0100
    2e8e:	70 91 01 01 	lds	r23, 0x0101
    2e92:	80 e0       	ldi	r24, 0x00	; 0
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	20 91 60 01 	lds	r18, 0x0160
    2e9a:	30 91 61 01 	lds	r19, 0x0161
    2e9e:	40 91 62 01 	lds	r20, 0x0162
    2ea2:	50 91 63 01 	lds	r21, 0x0163
    2ea6:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
  cap.cval_uncorrected.dw /= (F_CPU / 10000);	// divide by 100 (@ 1MHz clock), 800 (@ 8MHz clock)
    2eaa:	20 e2       	ldi	r18, 0x20	; 32
    2eac:	33 e0       	ldi	r19, 0x03	; 3
    2eae:	40 e0       	ldi	r20, 0x00	; 0
    2eb0:	50 e0       	ldi	r21, 0x00	; 0
    2eb2:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
    2eb6:	20 93 60 01 	sts	0x0160, r18
    2eba:	30 93 61 01 	sts	0x0161, r19
    2ebe:	40 93 62 01 	sts	0x0162, r20
    2ec2:	50 93 63 01 	sts	0x0163, r21
  cap.cval = cap.cval_uncorrected.dw;		// set the corrected cap.cval
    2ec6:	e8 e5       	ldi	r30, 0x58	; 88
    2ec8:	f1 e0       	ldi	r31, 0x01	; 1
    2eca:	20 93 58 01 	sts	0x0158, r18
    2ece:	31 83       	std	Z+1, r19	; 0x01
    2ed0:	42 83       	std	Z+2, r20	; 0x02
    2ed2:	53 83       	std	Z+3, r21	; 0x03
  Scale_C_with_vcc();
    2ed4:	0e 94 66 15 	call	0x2acc	; 0x2acc <Scale_C_with_vcc>
  if (cap.cpre == -12) {
    2ed8:	80 91 68 01 	lds	r24, 0x0168
    2edc:	84 3f       	cpi	r24, 0xF4	; 244
    2ede:	09 f0       	breq	.+2      	; 0x2ee2 <ReadCapacity+0x376>
    2ee0:	55 c0       	rjmp	.+170    	; 0x2f8c <ReadCapacity+0x420>
#if COMP_SLEW1 > COMP_SLEW2
     if (cap.cval < COMP_SLEW1) {
    2ee2:	c0 90 58 01 	lds	r12, 0x0158
    2ee6:	d0 90 59 01 	lds	r13, 0x0159
    2eea:	e0 90 5a 01 	lds	r14, 0x015A
    2eee:	f0 90 5b 01 	lds	r15, 0x015B
    2ef2:	80 ea       	ldi	r24, 0xA0	; 160
    2ef4:	c8 16       	cp	r12, r24
    2ef6:	8f e0       	ldi	r24, 0x0F	; 15
    2ef8:	d8 06       	cpc	r13, r24
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	e8 06       	cpc	r14, r24
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	f8 06       	cpc	r15, r24
    2f02:	c0 f4       	brcc	.+48     	; 0x2f34 <ReadCapacity+0x3c8>
        // add slew rate dependent offset
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
    2f04:	a7 01       	movw	r20, r14
    2f06:	96 01       	movw	r18, r12
    2f08:	24 52       	subi	r18, 0x24	; 36
    2f0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f0c:	4f 4f       	sbci	r20, 0xFF	; 255
    2f0e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f10:	60 ea       	ldi	r22, 0xA0	; 160
    2f12:	7f e0       	ldi	r23, 0x0F	; 15
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
    2f1c:	2c 0d       	add	r18, r12
    2f1e:	3d 1d       	adc	r19, r13
    2f20:	4e 1d       	adc	r20, r14
    2f22:	5f 1d       	adc	r21, r15
    2f24:	20 93 58 01 	sts	0x0158, r18
    2f28:	30 93 59 01 	sts	0x0159, r19
    2f2c:	40 93 5a 01 	sts	0x015A, r20
    2f30:	50 93 5b 01 	sts	0x015B, r21
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2f34:	80 91 45 01 	lds	r24, 0x0145
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	87 54       	subi	r24, 0x47	; 71
    2f3c:	9e 4f       	sbci	r25, 0xFE	; 254
    2f3e:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__eerd_byte_m168>
     if (cap.cval > tmpint) {
    2f42:	20 91 58 01 	lds	r18, 0x0158
    2f46:	30 91 59 01 	lds	r19, 0x0159
    2f4a:	40 91 5a 01 	lds	r20, 0x015A
    2f4e:	50 91 5b 01 	lds	r21, 0x015B
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2f52:	90 e0       	ldi	r25, 0x00	; 0
     if (cap.cval > tmpint) {
    2f54:	a0 e0       	ldi	r26, 0x00	; 0
    2f56:	b0 e0       	ldi	r27, 0x00	; 0
    2f58:	82 17       	cp	r24, r18
    2f5a:	93 07       	cpc	r25, r19
    2f5c:	a4 07       	cpc	r26, r20
    2f5e:	b5 07       	cpc	r27, r21
    2f60:	68 f4       	brcc	.+26     	; 0x2f7c <ReadCapacity+0x410>
         cap.cval -= tmpint;		//subtract zero offset (pF)
    2f62:	28 1b       	sub	r18, r24
    2f64:	39 0b       	sbc	r19, r25
    2f66:	4a 0b       	sbc	r20, r26
    2f68:	5b 0b       	sbc	r21, r27
    2f6a:	20 93 58 01 	sts	0x0158, r18
    2f6e:	30 93 59 01 	sts	0x0159, r19
    2f72:	40 93 5a 01 	sts	0x015A, r20
    2f76:	50 93 5b 01 	sts	0x015B, r21
    2f7a:	08 c0       	rjmp	.+16     	; 0x2f8c <ReadCapacity+0x420>
     } else {
         cap.cval = 0;			//unsigned long may not reach negativ value
    2f7c:	10 92 58 01 	sts	0x0158, r1
    2f80:	10 92 59 01 	sts	0x0159, r1
    2f84:	10 92 5a 01 	sts	0x015A, r1
    2f88:	10 92 5b 01 	sts	0x015B, r1
  lcd_testpin(HighPin);
  lcd_space();
  DisplayValue(cap.cval,cap.cpre,'F',4);
  wait_about3s();
#endif
  R_DDR = HiPinR_L; 		//switch R_L for High-Pin to GND
    2f8c:	a4 b8       	out	0x04, r10	; 4
#if F_CPU < 2000001
   if(cap.cval < 50)
#else 
   if(cap.cval < 25)
    2f8e:	80 91 58 01 	lds	r24, 0x0158
    2f92:	90 91 59 01 	lds	r25, 0x0159
    2f96:	a0 91 5a 01 	lds	r26, 0x015A
    2f9a:	b0 91 5b 01 	lds	r27, 0x015B
    2f9e:	89 31       	cpi	r24, 0x19	; 25
    2fa0:	91 05       	cpc	r25, r1
    2fa2:	a1 05       	cpc	r26, r1
    2fa4:	b1 05       	cpc	r27, r1
    2fa6:	e8 f1       	brcs	.+122    	; 0x3022 <ReadCapacity+0x4b6>
//   if (ovcnt16 > (6 * ((unsigned long)F_CPU/1000000))) {	// above 3 uF
//      GetESR(HighPin,LowPin);
//   }
#endif
checkDiodes:
   if((NumOfDiodes > 0)  && (PartFound != PART_FET)) {
    2fa8:	80 91 05 01 	lds	r24, 0x0105
    2fac:	88 23       	and	r24, r24
    2fae:	21 f0       	breq	.+8      	; 0x2fb8 <ReadCapacity+0x44c>
    2fb0:	80 91 07 01 	lds	r24, 0x0107
    2fb4:	83 30       	cpi	r24, 0x03	; 3
    2fb6:	a9 f5       	brne	.+106    	; 0x3022 <ReadCapacity+0x4b6>
      wait_about1s();
#endif
      // nearly shure, that there is one or more diodes in reverse direction,
      // which would be wrongly detected as capacitor 
   } else {
      PartFound = PART_CAPACITOR;	//capacitor is found
    2fb8:	87 e0       	ldi	r24, 0x07	; 7
    2fba:	80 93 07 01 	sts	0x0107, r24
      if ((cap.cpre > cap.cpre_max) || ((cap.cpre == cap.cpre_max) && (cap.cval > cap.cval_max))) {
    2fbe:	60 91 68 01 	lds	r22, 0x0168
    2fc2:	80 91 69 01 	lds	r24, 0x0169
    2fc6:	86 17       	cp	r24, r22
    2fc8:	bc f0       	brlt	.+46     	; 0x2ff8 <ReadCapacity+0x48c>
    2fca:	68 17       	cp	r22, r24
    2fcc:	51 f5       	brne	.+84     	; 0x3022 <ReadCapacity+0x4b6>
    2fce:	20 91 58 01 	lds	r18, 0x0158
    2fd2:	30 91 59 01 	lds	r19, 0x0159
    2fd6:	40 91 5a 01 	lds	r20, 0x015A
    2fda:	50 91 5b 01 	lds	r21, 0x015B
    2fde:	80 91 5c 01 	lds	r24, 0x015C
    2fe2:	90 91 5d 01 	lds	r25, 0x015D
    2fe6:	a0 91 5e 01 	lds	r26, 0x015E
    2fea:	b0 91 5f 01 	lds	r27, 0x015F
    2fee:	82 17       	cp	r24, r18
    2ff0:	93 07       	cpc	r25, r19
    2ff2:	a4 07       	cpc	r26, r20
    2ff4:	b5 07       	cpc	r27, r21
    2ff6:	a8 f4       	brcc	.+42     	; 0x3022 <ReadCapacity+0x4b6>
         // we have found a greater one
         cap.cval_max = cap.cval;
    2ff8:	e8 e5       	ldi	r30, 0x58	; 88
    2ffa:	f1 e0       	ldi	r31, 0x01	; 1
    2ffc:	80 91 58 01 	lds	r24, 0x0158
    3000:	90 91 59 01 	lds	r25, 0x0159
    3004:	a0 91 5a 01 	lds	r26, 0x015A
    3008:	b0 91 5b 01 	lds	r27, 0x015B
    300c:	80 93 5c 01 	sts	0x015C, r24
    3010:	90 93 5d 01 	sts	0x015D, r25
    3014:	a0 93 5e 01 	sts	0x015E, r26
    3018:	b0 93 5f 01 	sts	0x015F, r27
         cap.cpre_max = cap.cpre;
    301c:	61 8b       	std	Z+17, r22	; 0x11
         cap.ca = LowPin;		// save LowPin
    301e:	06 87       	std	Z+14, r16	; 0x0e
         cap.cb = HighPin;		// save HighPin
    3020:	17 87       	std	Z+15, r17	; 0x0f
keinC:
  // discharge capacitor again
//  EntladePins();		// discharge capacitors
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    3022:	88 e0       	ldi	r24, 0x08	; 8
    3024:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    3026:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    3028:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    302a:	15 b8       	out	0x05, r1	; 5
  return;
 } // end ReadCapacity()
    302c:	df 91       	pop	r29
    302e:	cf 91       	pop	r28
    3030:	1f 91       	pop	r17
    3032:	0f 91       	pop	r16
    3034:	ff 90       	pop	r15
    3036:	ef 90       	pop	r14
    3038:	df 90       	pop	r13
    303a:	cf 90       	pop	r12
    303c:	bf 90       	pop	r11
    303e:	af 90       	pop	r10
    3040:	08 95       	ret

00003042 <ReadInductance>:
#include "config.h"
#include "Transistortester.h"


//=================================================================
void ReadInductance(void) {
    3042:	2f 92       	push	r2
    3044:	3f 92       	push	r3
    3046:	4f 92       	push	r4
    3048:	5f 92       	push	r5
    304a:	6f 92       	push	r6
    304c:	7f 92       	push	r7
    304e:	8f 92       	push	r8
    3050:	9f 92       	push	r9
    3052:	af 92       	push	r10
    3054:	bf 92       	push	r11
    3056:	cf 92       	push	r12
    3058:	df 92       	push	r13
    305a:	ef 92       	push	r14
    305c:	ff 92       	push	r15
    305e:	0f 93       	push	r16
    3060:	1f 93       	push	r17
    3062:	df 93       	push	r29
    3064:	cf 93       	push	r28
    3066:	cd b7       	in	r28, 0x3d	; 61
    3068:	de b7       	in	r29, 0x3e	; 62
    306a:	6e 97       	sbiw	r28, 0x1e	; 30
    306c:	0f b6       	in	r0, 0x3f	; 63
    306e:	f8 94       	cli
    3070:	de bf       	out	0x3e, r29	; 62
    3072:	0f be       	out	0x3f, r0	; 63
    3074:	cd bf       	out	0x3d, r28	; 61
  uint8_t found;	// variable used for searching resistors 
  uint8_t LowPin;	// number of pin with low voltage
  uint8_t HighPin;	// number of pin with high voltage 


  if(PartFound != PART_RESISTOR) {
    3076:	80 91 07 01 	lds	r24, 0x0107
    307a:	86 30       	cpi	r24, 0x06	; 6
    307c:	09 f0       	breq	.+2      	; 0x3080 <ReadInductance+0x3e>
    307e:	5f c2       	rjmp	.+1214   	; 0x353e <ReadInductance+0x4fc>
    3080:	19 8a       	std	Y+17, r1	; 0x11
    3082:	54 c2       	rjmp	.+1192   	; 0x352c <ReadInductance+0x4ea>
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 21000) continue;
    3084:	29 89       	ldd	r18, Y+17	; 0x11
    3086:	22 2e       	mov	r2, r18
    3088:	33 24       	eor	r3, r3
    308a:	8b e0       	ldi	r24, 0x0B	; 11
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	28 9e       	mul	r2, r24
    3090:	f0 01       	movw	r30, r0
    3092:	29 9e       	mul	r2, r25
    3094:	f0 0d       	add	r31, r0
    3096:	38 9e       	mul	r3, r24
    3098:	f0 0d       	add	r31, r0
    309a:	11 24       	eor	r1, r1
    309c:	e8 5e       	subi	r30, 0xE8	; 232
    309e:	fe 4f       	sbci	r31, 0xFE	; 254
    30a0:	80 81       	ld	r24, Z
    30a2:	91 81       	ldd	r25, Z+1	; 0x01
    30a4:	a2 81       	ldd	r26, Z+2	; 0x02
    30a6:	b3 81       	ldd	r27, Z+3	; 0x03
    30a8:	89 30       	cpi	r24, 0x09	; 9
    30aa:	22 e5       	ldi	r18, 0x52	; 82
    30ac:	92 07       	cpc	r25, r18
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	a2 07       	cpc	r26, r18
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	b2 07       	cpc	r27, r18
    30b6:	08 f0       	brcs	.+2      	; 0x30ba <ReadInductance+0x78>
    30b8:	36 c2       	rjmp	.+1132   	; 0x3526 <ReadInductance+0x4e4>
    30ba:	ff 24       	eor	r15, r15
           // first and second pass, direction 1
           LowPin = resis[found].ra;
           HighPin = resis[found].rb;
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    30bc:	5f 01       	movw	r10, r30
    30be:	cf 01       	movw	r24, r30
    30c0:	09 96       	adiw	r24, 0x09	; 9
    30c2:	9d 8b       	std	Y+21, r25	; 0x15
    30c4:	8c 8b       	std	Y+20, r24	; 0x14
           HighPin = resis[found].ra;
    30c6:	38 96       	adiw	r30, 0x08	; 8
    30c8:	ff 8b       	std	Y+23, r31	; 0x17
    30ca:	ee 8b       	std	Y+22, r30	; 0x16
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    30cc:	3d 8e       	std	Y+29, r3	; 0x1d
    30ce:	2c 8e       	std	Y+28, r2	; 0x1c
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 21000) continue;
     // we can check for Inductance, if resistance is below 2800 Ohm
     for (count=0;count<4;count++) {
        // Try four times (different direction and with delayed counter start)
        if (count < 2) {
    30d0:	ff 2d       	mov	r31, r15
    30d2:	f2 30       	cpi	r31, 0x02	; 2
    30d4:	30 f4       	brcc	.+12     	; 0x30e2 <ReadInductance+0xa0>
           // first and second pass, direction 1
           LowPin = resis[found].ra;
    30d6:	ee 89       	ldd	r30, Y+22	; 0x16
    30d8:	ff 89       	ldd	r31, Y+23	; 0x17
    30da:	e0 80       	ld	r14, Z
           HighPin = resis[found].rb;
    30dc:	ec 89       	ldd	r30, Y+20	; 0x14
    30de:	fd 89       	ldd	r31, Y+21	; 0x15
    30e0:	05 c0       	rjmp	.+10     	; 0x30ec <ReadInductance+0xaa>
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    30e2:	ec 89       	ldd	r30, Y+20	; 0x14
    30e4:	fd 89       	ldd	r31, Y+21	; 0x15
    30e6:	e0 80       	ld	r14, Z
           HighPin = resis[found].ra;
    30e8:	ee 89       	ldd	r30, Y+22	; 0x16
    30ea:	ff 89       	ldd	r31, Y+23	; 0x17
    30ec:	70 80       	ld	r7, Z
        }
        HiADC = MEM_read_byte(&PinADCtab[HighPin]);
    30ee:	87 2d       	mov	r24, r7
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	88 55       	subi	r24, 0x58	; 88
    30f4:	9e 4f       	sbci	r25, 0xFE	; 254
    30f6:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__eerd_byte_m168>
    30fa:	88 2e       	mov	r8, r24
        LoPinR_L = MEM_read_byte(&PinRLtab[LowPin]);	//R_L mask for HighPin R_L load
    30fc:	8e 2d       	mov	r24, r14
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	8b 55       	subi	r24, 0x5B	; 91
    3102:	9e 4f       	sbci	r25, 0xFE	; 254
    3104:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__eerd_byte_m168>
        //==================================================================================
        // Measurement of Inductance values
        R_PORT = 0;		// switch R port to GND
    3108:	15 b8       	out	0x05, r1	; 5
        ADC_PORT =   TXD_VAL;		// switch ADC-Port to GND
    310a:	f8 e0       	ldi	r31, 0x08	; 8
    310c:	f8 b9       	out	0x08, r31	; 8
        if ((resis[found].rx < 240) && ((count & 0x01) == 0)) {
    310e:	f5 01       	movw	r30, r10
    3110:	20 81       	ld	r18, Z
    3112:	31 81       	ldd	r19, Z+1	; 0x01
    3114:	42 81       	ldd	r20, Z+2	; 0x02
    3116:	53 81       	ldd	r21, Z+3	; 0x03
    3118:	20 3f       	cpi	r18, 0xF0	; 240
    311a:	31 05       	cpc	r19, r1
    311c:	41 05       	cpc	r20, r1
    311e:	51 05       	cpc	r21, r1
    3120:	a8 f4       	brcc	.+42     	; 0x314c <ReadInductance+0x10a>
    3122:	f0 fc       	sbrc	r15, 0
    3124:	13 c0       	rjmp	.+38     	; 0x314c <ReadInductance+0x10a>
           // we can use PinR_L for measurement
           mess_r = RR680MI - R_L_VAL;
    3126:	00 91 02 01 	lds	r16, 0x0102
    312a:	10 91 03 01 	lds	r17, 0x0103
    312e:	00 59       	subi	r16, 0x90	; 144
    3130:	1a 41       	sbci	r17, 0x1A	; 26
           ADC_DDR = HiADC | (1<<LowPin) | TXD_MSK;	// switch HiADC and Low Pin to GND, 
    3132:	28 2d       	mov	r18, r8
    3134:	28 60       	ori	r18, 0x08	; 8
    3136:	81 e0       	ldi	r24, 0x01	; 1
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	0e 2c       	mov	r0, r14
    313c:	02 c0       	rjmp	.+4      	; 0x3142 <ReadInductance+0x100>
    313e:	88 0f       	add	r24, r24
    3140:	99 1f       	adc	r25, r25
    3142:	0a 94       	dec	r0
    3144:	e2 f7       	brpl	.-8      	; 0x313e <ReadInductance+0xfc>
    3146:	28 2b       	or	r18, r24
    3148:	27 b9       	out	0x07, r18	; 7
    314a:	08 c0       	rjmp	.+16     	; 0x315c <ReadInductance+0x11a>
        } else {
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
    314c:	84 b9       	out	0x04, r24	; 4
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
    314e:	88 2d       	mov	r24, r8
    3150:	88 60       	ori	r24, 0x08	; 8
    3152:	87 b9       	out	0x07, r24	; 7
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
    3154:	00 91 02 01 	lds	r16, 0x0102
    3158:	10 91 03 01 	lds	r17, 0x0103
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    315c:	20 e0       	ldi	r18, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    315e:	8e 2d       	mov	r24, r14
    3160:	2e 8f       	std	Y+30, r18	; 0x1e
    3162:	0e 94 3a 1b 	call	0x3674	; 0x3674 <W10msReadADC>
    3166:	6c 01       	movw	r12, r24
            total_r =  ReadADC(HighPin);
    3168:	87 2d       	mov	r24, r7
    316a:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    316e:	2e 8d       	ldd	r18, Y+30	; 0x1e
    3170:	f2 e0       	ldi	r31, 0x02	; 2
    3172:	cf 16       	cp	r12, r31
    3174:	d1 04       	cpc	r13, r1
    3176:	18 f4       	brcc	.+6      	; 0x317e <ReadInductance+0x13c>
    3178:	82 30       	cpi	r24, 0x02	; 2
    317a:	91 05       	cpc	r25, r1
    317c:	18 f0       	brcs	.+6      	; 0x3184 <ReadInductance+0x142>
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    317e:	2f 5f       	subi	r18, 0xFF	; 255
    3180:	24 31       	cpi	r18, 0x14	; 20
    3182:	69 f7       	brne	.-38     	; 0x315e <ReadInductance+0x11c>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
        // setup Analog Comparator
        ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    3184:	20 e4       	ldi	r18, 0x40	; 64
    3186:	20 93 7b 00 	sts	0x007B, r18
        ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    318a:	34 e5       	ldi	r19, 0x54	; 84
    318c:	30 bf       	out	0x30, r19	; 48
        ADMUX = (1<<REFS0) | LowPin;			// switch Mux to Low-Pin
    318e:	8e 2d       	mov	r24, r14
    3190:	80 64       	ori	r24, 0x40	; 64
    3192:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    3196:	86 e1       	ldi	r24, 0x16	; 22
    3198:	80 93 7a 00 	sts	0x007A, r24
   
      // setup Counter1
        ovcnt16 = 0;
        TCCR1A = 0;			// set Counter1 to normal Mode
    319c:	10 92 80 00 	sts	0x0080, r1
        TCNT1 = 0;			//set Counter to 0
    31a0:	10 92 85 00 	sts	0x0085, r1
    31a4:	10 92 84 00 	sts	0x0084, r1
        TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// reset TIFR or TIFR1
    31a8:	97 e2       	ldi	r25, 0x27	; 39
    31aa:	96 bb       	out	0x16, r25	; 22
        HiADC |= TXD_VAL;
    31ac:	e8 e0       	ldi	r30, 0x08	; 8
    31ae:	8e 2a       	or	r8, r30
        wait200us();			// wait for bandgap to start up
    31b0:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <wait200us>
        if ((count & 0x01) == 0 ) {
    31b4:	2f 2c       	mov	r2, r15
    31b6:	33 24       	eor	r3, r3
    31b8:	91 01       	movw	r18, r2
    31ba:	21 70       	andi	r18, 0x01	; 1
    31bc:	30 70       	andi	r19, 0x00	; 0
    31be:	3b 8b       	std	Y+19, r19	; 0x13
    31c0:	2a 8b       	std	Y+18, r18	; 0x12
    31c2:	f0 fc       	sbrc	r15, 0
    31c4:	05 c0       	rjmp	.+10     	; 0x31d0 <ReadInductance+0x18e>
           //first start counter, then start current
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    31c6:	31 e8       	ldi	r19, 0x81	; 129
    31c8:	30 93 81 00 	sts	0x0081, r19
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    31cc:	88 b8       	out	0x08, r8	; 8
    31ce:	08 c0       	rjmp	.+16     	; 0x31e0 <ReadInductance+0x19e>
        } else {
           //first start current, then start counter with delay
           //parasitic capacity of coil can cause high current at the beginning
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    31d0:	88 b8       	out	0x08, r8	; 8
      #if F_CPU >= 8000000UL
           wait3us();		// ignore current peak from capacity
    31d2:	0e 94 20 15 	call	0x2a40	; 0x2a40 <wait3us>
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
    31d6:	80 e2       	ldi	r24, 0x20	; 32
    31d8:	86 bb       	out	0x16, r24	; 22
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    31da:	91 e8       	ldi	r25, 0x81	; 129
    31dc:	90 93 81 00 	sts	0x0081, r25
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    31e0:	cc 24       	eor	r12, r12
    31e2:	dd 24       	eor	r13, r13
        }
      
      //******************************
        while(1) {
           // Wait, until  Input Capture is set
           ii = TI1_INT_FLAGS;		//read Timer flags
    31e4:	26 b3       	in	r18, 0x16	; 22
           if (ii & (1<<ICF1))  {
    31e6:	25 fd       	sbrc	r18, 5
    31e8:	0c c0       	rjmp	.+24     	; 0x3202 <ReadInductance+0x1c0>
              break;
           }
           if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    31ea:	20 ff       	sbrs	r18, 0
    31ec:	fb cf       	rjmp	.-10     	; 0x31e4 <ReadInductance+0x1a2>
              TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    31ee:	e1 e0       	ldi	r30, 0x01	; 1
    31f0:	e6 bb       	out	0x16, r30	; 22
              wdt_reset();
    31f2:	a8 95       	wdr
              ovcnt16++;
    31f4:	08 94       	sec
    31f6:	c1 1c       	adc	r12, r1
    31f8:	d1 1c       	adc	r13, r1
              if(ovcnt16 == (F_CPU/100000)) {
    31fa:	f0 e5       	ldi	r31, 0x50	; 80
    31fc:	cf 16       	cp	r12, r31
    31fe:	d1 04       	cpc	r13, r1
    3200:	89 f7       	brne	.-30     	; 0x31e4 <ReadInductance+0x1a2>
                 break; 	//Timeout for Charging, above 0.13 s
              }
           }
        }
        TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    3202:	10 92 81 00 	sts	0x0081, r1
        TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    3206:	30 e2       	ldi	r19, 0x20	; 32
    3208:	36 bb       	out	0x16, r19	; 22
        tmpint = ICR1;		// get previous Input Capture Counter flag
    320a:	80 90 86 00 	lds	r8, 0x0086
    320e:	90 90 87 00 	lds	r9, 0x0087
      // check actual counter, if an additional overflow must be added
        if((TCNT1 > tmpint) && (ii & (1<<TOV1))) {
    3212:	80 91 84 00 	lds	r24, 0x0084
    3216:	90 91 85 00 	lds	r25, 0x0085
    321a:	88 16       	cp	r8, r24
    321c:	99 06       	cpc	r9, r25
    321e:	38 f4       	brcc	.+14     	; 0x322e <ReadInductance+0x1ec>
    3220:	20 ff       	sbrs	r18, 0
    3222:	05 c0       	rjmp	.+10     	; 0x322e <ReadInductance+0x1ec>
           // this OV was not counted, but was before the Input Capture
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    3224:	81 e0       	ldi	r24, 0x01	; 1
    3226:	86 bb       	out	0x16, r24	; 22
           ovcnt16++;
    3228:	08 94       	sec
    322a:	c1 1c       	adc	r12, r1
    322c:	d1 1c       	adc	r13, r1
        }
        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    322e:	98 e0       	ldi	r25, 0x08	; 8
    3230:	98 b9       	out	0x08, r25	; 8
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    3232:	e6 e9       	ldi	r30, 0x96	; 150
    3234:	e0 93 7a 00 	sts	0x007A, r30
        for (ii=0;ii<20;ii++) {
    3238:	40 e0       	ldi	r20, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    323a:	8e 2d       	mov	r24, r14
    323c:	4e 8f       	std	Y+30, r20	; 0x1e
    323e:	0e 94 3a 1b 	call	0x3674	; 0x3674 <W10msReadADC>
    3242:	2c 01       	movw	r4, r24
            total_r =  ReadADC(HighPin);
    3244:	87 2d       	mov	r24, r7
    3246:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    324a:	4e 8d       	ldd	r20, Y+30	; 0x1e
    324c:	f2 e0       	ldi	r31, 0x02	; 2
    324e:	4f 16       	cp	r4, r31
    3250:	51 04       	cpc	r5, r1
    3252:	18 f4       	brcc	.+6      	; 0x325a <ReadInductance+0x218>
    3254:	82 30       	cpi	r24, 0x02	; 2
    3256:	91 05       	cpc	r25, r1
    3258:	18 f0       	brcs	.+6      	; 0x3260 <ReadInductance+0x21e>
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
           ovcnt16++;
        }
        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
        for (ii=0;ii<20;ii++) {
    325a:	4f 5f       	subi	r20, 0xFF	; 255
    325c:	44 31       	cpi	r20, 0x14	; 20
    325e:	69 f7       	brne	.-38     	; 0x323a <ReadInductance+0x1f8>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
//      cap.cval_uncorrected.dw = CombineII2Long(ovcnt16, tmpint);
        cap.cval_uncorrected.w[1] = ovcnt16;
    3260:	d0 92 63 01 	sts	0x0163, r13
    3264:	c0 92 62 01 	sts	0x0162, r12
        cap.cval_uncorrected.w[0] = tmpint;
    3268:	90 92 61 01 	sts	0x0161, r9
    326c:	80 92 60 01 	sts	0x0160, r8
  #define CNT_ZERO_42 4
  #define CNT_ZERO_720 10
#endif
        // Voltage of comparator in % of umax
        #ifdef AUTO_CAL
        tmpint = (ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset))) ;
    3270:	87 eb       	ldi	r24, 0xB7	; 183
    3272:	91 e0       	ldi	r25, 0x01	; 1
    3274:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__eerd_word_m168>
    3278:	60 91 3f 01 	lds	r22, 0x013F
    327c:	70 91 40 01 	lds	r23, 0x0140
    3280:	68 0f       	add	r22, r24
    3282:	79 1f       	adc	r23, r25
    3284:	80 91 60 01 	lds	r24, 0x0160
    3288:	90 91 61 01 	lds	r25, 0x0161
    328c:	a0 91 62 01 	lds	r26, 0x0162
    3290:	b0 91 63 01 	lds	r27, 0x0163
        #else
        tmpint = (ref_mv + REF_C_KORR);
        #endif
        if (mess_r < R_L_VAL) {
    3294:	2a e1       	ldi	r18, 0x1A	; 26
    3296:	00 39       	cpi	r16, 0x90	; 144
    3298:	12 07       	cpc	r17, r18
    329a:	90 f4       	brcc	.+36     	; 0x32c0 <ReadInductance+0x27e>
           // measurement without 680 Ohm
           if (cap.cval_uncorrected.dw > CNT_ZERO_42) cap.cval_uncorrected.dw -= CNT_ZERO_42;
    329c:	87 30       	cpi	r24, 0x07	; 7
    329e:	91 05       	cpc	r25, r1
    32a0:	a1 05       	cpc	r26, r1
    32a2:	b1 05       	cpc	r27, r1
    32a4:	20 f0       	brcs	.+8      	; 0x32ae <ReadInductance+0x26c>
    32a6:	06 97       	sbiw	r24, 0x06	; 6
    32a8:	a1 09       	sbc	r26, r1
    32aa:	b1 09       	sbc	r27, r1
    32ac:	34 c0       	rjmp	.+104    	; 0x3316 <ReadInductance+0x2d4>
           else          cap.cval_uncorrected.dw = 0;
    32ae:	10 92 60 01 	sts	0x0160, r1
    32b2:	10 92 61 01 	sts	0x0161, r1
    32b6:	10 92 62 01 	sts	0x0162, r1
    32ba:	10 92 63 01 	sts	0x0163, r1
    32be:	33 c0       	rjmp	.+102    	; 0x3326 <ReadInductance+0x2e4>
        } else {
           // measurement with 680 Ohm resistor
           // if 680 Ohm resistor is used, use REF_L_KORR for correction
           tmpint += REF_L_KORR;
    32c0:	6e 5c       	subi	r22, 0xCE	; 206
    32c2:	7f 4f       	sbci	r23, 0xFF	; 255
           if (cap.cval_uncorrected.dw > CNT_ZERO_720) cap.cval_uncorrected.dw -= CNT_ZERO_720;
    32c4:	88 30       	cpi	r24, 0x08	; 8
    32c6:	91 05       	cpc	r25, r1
    32c8:	a1 05       	cpc	r26, r1
    32ca:	b1 05       	cpc	r27, r1
    32cc:	60 f0       	brcs	.+24     	; 0x32e6 <ReadInductance+0x2a4>
    32ce:	07 97       	sbiw	r24, 0x07	; 7
    32d0:	a1 09       	sbc	r26, r1
    32d2:	b1 09       	sbc	r27, r1
    32d4:	80 93 60 01 	sts	0x0160, r24
    32d8:	90 93 61 01 	sts	0x0161, r25
    32dc:	a0 93 62 01 	sts	0x0162, r26
    32e0:	b0 93 63 01 	sts	0x0163, r27
    32e4:	08 c0       	rjmp	.+16     	; 0x32f6 <ReadInductance+0x2b4>
           else          cap.cval_uncorrected.dw = 0;
    32e6:	10 92 60 01 	sts	0x0160, r1
    32ea:	10 92 61 01 	sts	0x0161, r1
    32ee:	10 92 62 01 	sts	0x0162, r1
    32f2:	10 92 63 01 	sts	0x0163, r1
           if (cap.cval_uncorrected.dw > 12) cap.cval_uncorrected.dw -= 1;
    32f6:	80 91 60 01 	lds	r24, 0x0160
    32fa:	90 91 61 01 	lds	r25, 0x0161
    32fe:	a0 91 62 01 	lds	r26, 0x0162
    3302:	b0 91 63 01 	lds	r27, 0x0163
    3306:	8d 30       	cpi	r24, 0x0D	; 13
    3308:	91 05       	cpc	r25, r1
    330a:	a1 05       	cpc	r26, r1
    330c:	b1 05       	cpc	r27, r1
    330e:	58 f0       	brcs	.+22     	; 0x3326 <ReadInductance+0x2e4>
    3310:	01 97       	sbiw	r24, 0x01	; 1
    3312:	a1 09       	sbc	r26, r1
    3314:	b1 09       	sbc	r27, r1
    3316:	80 93 60 01 	sts	0x0160, r24
    331a:	90 93 61 01 	sts	0x0161, r25
    331e:	a0 93 62 01 	sts	0x0162, r26
    3322:	b0 93 63 01 	sts	0x0163, r27
        }
        if ((count&0x01) == 1) {
    3326:	8a 89       	ldd	r24, Y+18	; 0x12
    3328:	9b 89       	ldd	r25, Y+19	; 0x13
    332a:	00 97       	sbiw	r24, 0x00	; 0
    332c:	99 f0       	breq	.+38     	; 0x3354 <ReadInductance+0x312>
           // second pass with delayed counter start
           cap.cval_uncorrected.dw += (3 * (F_CPU/1000000))+10;
    332e:	80 91 60 01 	lds	r24, 0x0160
    3332:	90 91 61 01 	lds	r25, 0x0161
    3336:	a0 91 62 01 	lds	r26, 0x0162
    333a:	b0 91 63 01 	lds	r27, 0x0163
    333e:	82 96       	adiw	r24, 0x22	; 34
    3340:	a1 1d       	adc	r26, r1
    3342:	b1 1d       	adc	r27, r1
    3344:	80 93 60 01 	sts	0x0160, r24
    3348:	90 93 61 01 	sts	0x0161, r25
    334c:	a0 93 62 01 	sts	0x0162, r26
    3350:	b0 93 63 01 	sts	0x0163, r27
        }
        if (ovcnt16 >= (F_CPU/100000)) cap.cval_uncorrected.dw = 0; // no transition found
    3354:	90 e5       	ldi	r25, 0x50	; 80
    3356:	c9 16       	cp	r12, r25
    3358:	d1 04       	cpc	r13, r1
    335a:	40 f0       	brcs	.+16     	; 0x336c <ReadInductance+0x32a>
    335c:	10 92 60 01 	sts	0x0160, r1
    3360:	10 92 61 01 	sts	0x0161, r1
    3364:	10 92 62 01 	sts	0x0162, r1
    3368:	10 92 63 01 	sts	0x0163, r1
        total_r = (mess_r + resis[found].rx + RR680PL - R_L_VAL);
    336c:	80 91 08 01 	lds	r24, 0x0108
    3370:	90 91 09 01 	lds	r25, 0x0109
    3374:	80 59       	subi	r24, 0x90	; 144
    3376:	9a 41       	sbci	r25, 0x1A	; 26
    3378:	f5 01       	movw	r30, r10
    337a:	20 81       	ld	r18, Z
    337c:	31 81       	ldd	r19, Z+1	; 0x01
    337e:	82 0f       	add	r24, r18
    3380:	93 1f       	adc	r25, r19
    3382:	80 0f       	add	r24, r16
    3384:	91 1f       	adc	r25, r17
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    3386:	2c 01       	movw	r4, r24
    3388:	66 24       	eor	r6, r6
    338a:	77 24       	eor	r7, r7
        per_ref = ((unsigned long)tmpint * 100) / umax;
    338c:	80 e0       	ldi	r24, 0x00	; 0
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	24 e6       	ldi	r18, 0x64	; 100
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	40 e0       	ldi	r20, 0x00	; 0
    3396:	50 e0       	ldi	r21, 0x00	; 0
    3398:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    339c:	68 8f       	std	Y+24, r22	; 0x18
    339e:	79 8f       	std	Y+25, r23	; 0x19
    33a0:	8a 8f       	std	Y+26, r24	; 0x1a
    33a2:	9b 8f       	std	Y+27, r25	; 0x1b
           cap.cval_uncorrected.dw += (3 * (F_CPU/1000000))+10;
        }
        if (ovcnt16 >= (F_CPU/100000)) cap.cval_uncorrected.dw = 0; // no transition found
        total_r = (mess_r + resis[found].rx + RR680PL - R_L_VAL);
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    33a4:	b8 01       	movw	r22, r16
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	20 91 3d 01 	lds	r18, 0x013D
    33ae:	30 91 3e 01 	lds	r19, 0x013E
    33b2:	40 e0       	ldi	r20, 0x00	; 0
    33b4:	50 e0       	ldi	r21, 0x00	; 0
    33b6:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    33ba:	a3 01       	movw	r20, r6
    33bc:	92 01       	movw	r18, r4
    33be:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
        per_ref = ((unsigned long)tmpint * 100) / umax;
    33c2:	40 e0       	ldi	r20, 0x00	; 0
    33c4:	50 e0       	ldi	r21, 0x00	; 0
    33c6:	68 8d       	ldd	r22, Y+24	; 0x18
    33c8:	79 8d       	ldd	r23, Y+25	; 0x19
    33ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    33cc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    33ce:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
        per_ref = (uint8_t)MEM2_read_byte(&LogTab[per_ref]);	// -log(1 - per_ref/100)
    33d2:	e2 2f       	mov	r30, r18
    33d4:	f0 e0       	ldi	r31, 0x00	; 0
    33d6:	e8 59       	subi	r30, 0x98	; 152
    33d8:	ff 4f       	sbci	r31, 0xFF	; 255
    33da:	04 91       	lpm	r16, Z+
        // lx in 0.01mH units,  L = Tau * R
        inductance[count] = (cap.cval_uncorrected.dw * total_r ) / ((unsigned int)per_ref * (F_CPU/1000000));
    33dc:	20 91 60 01 	lds	r18, 0x0160
    33e0:	30 91 61 01 	lds	r19, 0x0161
    33e4:	40 91 62 01 	lds	r20, 0x0162
    33e8:	50 91 63 01 	lds	r21, 0x0163
    33ec:	c3 01       	movw	r24, r6
    33ee:	b2 01       	movw	r22, r4
    33f0:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    33f4:	20 2f       	mov	r18, r16
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	40 e0       	ldi	r20, 0x00	; 0
    33fa:	50 e0       	ldi	r21, 0x00	; 0
    33fc:	e3 e0       	ldi	r30, 0x03	; 3
    33fe:	22 0f       	add	r18, r18
    3400:	33 1f       	adc	r19, r19
    3402:	44 1f       	adc	r20, r20
    3404:	55 1f       	adc	r21, r21
    3406:	ea 95       	dec	r30
    3408:	d1 f7       	brne	.-12     	; 0x33fe <ReadInductance+0x3bc>
    340a:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
    340e:	f1 01       	movw	r30, r2
    3410:	ee 0f       	add	r30, r30
    3412:	ff 1f       	adc	r31, r31
    3414:	ee 0f       	add	r30, r30
    3416:	ff 1f       	adc	r31, r31
    3418:	81 e0       	ldi	r24, 0x01	; 1
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	8c 0f       	add	r24, r28
    341e:	9d 1f       	adc	r25, r29
    3420:	e8 0f       	add	r30, r24
    3422:	f9 1f       	adc	r31, r25
    3424:	20 83       	st	Z, r18
    3426:	31 83       	std	Z+1, r19	; 0x01
    3428:	42 83       	std	Z+2, r20	; 0x02
    342a:	53 83       	std	Z+3, r21	; 0x03
        if (((count&0x01) == 0) && (inductance[count] > (F_CPU/1000000))) {
    342c:	ea 89       	ldd	r30, Y+18	; 0x12
    342e:	fb 89       	ldd	r31, Y+19	; 0x13
    3430:	30 97       	sbiw	r30, 0x00	; 0
    3432:	91 f4       	brne	.+36     	; 0x3458 <ReadInductance+0x416>
    3434:	29 30       	cpi	r18, 0x09	; 9
    3436:	31 05       	cpc	r19, r1
    3438:	41 05       	cpc	r20, r1
    343a:	51 05       	cpc	r21, r1
    343c:	68 f0       	brcs	.+26     	; 0x3458 <ReadInductance+0x416>
           // transition is found, measurement with delayed counter start is not necessary
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
    343e:	f1 01       	movw	r30, r2
    3440:	31 96       	adiw	r30, 0x01	; 1
    3442:	ee 0f       	add	r30, r30
    3444:	ff 1f       	adc	r31, r31
    3446:	ee 0f       	add	r30, r30
    3448:	ff 1f       	adc	r31, r31
    344a:	e8 0f       	add	r30, r24
    344c:	f9 1f       	adc	r31, r25
    344e:	20 83       	st	Z, r18
    3450:	31 83       	std	Z+1, r19	; 0x01
    3452:	42 83       	std	Z+2, r20	; 0x02
    3454:	53 83       	std	Z+3, r21	; 0x03
           count++;		// skip the delayed measurement
    3456:	f3 94       	inc	r15
        }
        wdt_reset();
    3458:	a8 95       	wdr
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
     if (resis[found].rx > 21000) continue;
     // we can check for Inductance, if resistance is below 2800 Ohm
     for (count=0;count<4;count++) {
    345a:	f3 94       	inc	r15
    345c:	ff 2d       	mov	r31, r15
    345e:	f4 30       	cpi	r31, 0x04	; 4
    3460:	08 f4       	brcc	.+2      	; 0x3464 <ReadInductance+0x422>
    3462:	36 ce       	rjmp	.-916    	; 0x30d0 <ReadInductance+0x8e>
    3464:	2c 8c       	ldd	r2, Y+28	; 0x1c
    3466:	3d 8c       	ldd	r3, Y+29	; 0x1d
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
           count++;		// skip the delayed measurement
        }
        wdt_reset();
     }  //end for count
     ADC_PORT = TXD_VAL;		// switch ADC Port to GND
    3468:	28 e0       	ldi	r18, 0x08	; 8
    346a:	28 b9       	out	0x08, r18	; 8
     wait_about20ms();
    346c:	84 e0       	ldi	r24, 0x04	; 4
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	0e 94 bb 03 	call	0x776	; 0x776 <sleep_5ms>
     if (inductance[1] > inductance[0]) {
    3474:	2d 81       	ldd	r18, Y+5	; 0x05
    3476:	3e 81       	ldd	r19, Y+6	; 0x06
    3478:	4f 81       	ldd	r20, Y+7	; 0x07
    347a:	58 85       	ldd	r21, Y+8	; 0x08
    347c:	89 81       	ldd	r24, Y+1	; 0x01
    347e:	9a 81       	ldd	r25, Y+2	; 0x02
    3480:	ab 81       	ldd	r26, Y+3	; 0x03
    3482:	bc 81       	ldd	r27, Y+4	; 0x04
    3484:	82 17       	cp	r24, r18
    3486:	93 07       	cpc	r25, r19
    3488:	a4 07       	cpc	r26, r20
    348a:	b5 07       	cpc	r27, r21
    348c:	80 f4       	brcc	.+32     	; 0x34ae <ReadInductance+0x46c>
        resis[found].lx = inductance[1];	// use value found with delayed counter start
    348e:	8b e0       	ldi	r24, 0x0B	; 11
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	28 9e       	mul	r2, r24
    3494:	f0 01       	movw	r30, r0
    3496:	29 9e       	mul	r2, r25
    3498:	f0 0d       	add	r31, r0
    349a:	38 9e       	mul	r3, r24
    349c:	f0 0d       	add	r31, r0
    349e:	11 24       	eor	r1, r1
    34a0:	e8 5e       	subi	r30, 0xE8	; 232
    34a2:	fe 4f       	sbci	r31, 0xFE	; 254
    34a4:	24 83       	std	Z+4, r18	; 0x04
    34a6:	35 83       	std	Z+5, r19	; 0x05
    34a8:	46 83       	std	Z+6, r20	; 0x06
    34aa:	57 83       	std	Z+7, r21	; 0x07
    34ac:	0f c0       	rjmp	.+30     	; 0x34cc <ReadInductance+0x48a>
     } else {
        resis[found].lx = inductance[0];
    34ae:	2b e0       	ldi	r18, 0x0B	; 11
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	22 9e       	mul	r2, r18
    34b4:	f0 01       	movw	r30, r0
    34b6:	23 9e       	mul	r2, r19
    34b8:	f0 0d       	add	r31, r0
    34ba:	32 9e       	mul	r3, r18
    34bc:	f0 0d       	add	r31, r0
    34be:	11 24       	eor	r1, r1
    34c0:	e8 5e       	subi	r30, 0xE8	; 232
    34c2:	fe 4f       	sbci	r31, 0xFE	; 254
    34c4:	84 83       	std	Z+4, r24	; 0x04
    34c6:	95 83       	std	Z+5, r25	; 0x05
    34c8:	a6 83       	std	Z+6, r26	; 0x06
    34ca:	b7 83       	std	Z+7, r27	; 0x07
     }
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];
    34cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    34d0:	af 85       	ldd	r26, Y+15	; 0x0f
    34d2:	b8 89       	ldd	r27, Y+16	; 0x10
    34d4:	29 85       	ldd	r18, Y+9	; 0x09
    34d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    34d8:	4b 85       	ldd	r20, Y+11	; 0x0b
    34da:	5c 85       	ldd	r21, Y+12	; 0x0c
    34dc:	28 17       	cp	r18, r24
    34de:	39 07       	cpc	r19, r25
    34e0:	4a 07       	cpc	r20, r26
    34e2:	5b 07       	cpc	r21, r27
    34e4:	20 f4       	brcc	.+8      	; 0x34ee <ReadInductance+0x4ac>
    34e6:	89 87       	std	Y+9, r24	; 0x09
    34e8:	9a 87       	std	Y+10, r25	; 0x0a
    34ea:	ab 87       	std	Y+11, r26	; 0x0b
    34ec:	bc 87       	std	Y+12, r27	; 0x0c
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
    34ee:	89 85       	ldd	r24, Y+9	; 0x09
    34f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34f2:	ab 85       	ldd	r26, Y+11	; 0x0b
    34f4:	bc 85       	ldd	r27, Y+12	; 0x0c
    34f6:	2b e0       	ldi	r18, 0x0B	; 11
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	22 9e       	mul	r2, r18
    34fc:	f0 01       	movw	r30, r0
    34fe:	23 9e       	mul	r2, r19
    3500:	f0 0d       	add	r31, r0
    3502:	32 9e       	mul	r3, r18
    3504:	f0 0d       	add	r31, r0
    3506:	11 24       	eor	r1, r1
    3508:	e8 5e       	subi	r30, 0xE8	; 232
    350a:	fe 4f       	sbci	r31, 0xFE	; 254
    350c:	24 81       	ldd	r18, Z+4	; 0x04
    350e:	35 81       	ldd	r19, Z+5	; 0x05
    3510:	46 81       	ldd	r20, Z+6	; 0x06
    3512:	57 81       	ldd	r21, Z+7	; 0x07
    3514:	82 17       	cp	r24, r18
    3516:	93 07       	cpc	r25, r19
    3518:	a4 07       	cpc	r26, r20
    351a:	b5 07       	cpc	r27, r21
    351c:	20 f4       	brcc	.+8      	; 0x3526 <ReadInductance+0x4e4>
    351e:	84 83       	std	Z+4, r24	; 0x04
    3520:	95 83       	std	Z+5, r25	; 0x05
    3522:	a6 83       	std	Z+6, r26	; 0x06
    3524:	b7 83       	std	Z+7, r27	; 0x07


  if(PartFound != PART_RESISTOR) {
     return;	//We have found no resistor  
  }
  for (found=0;found<ResistorsFound;found++) {
    3526:	39 89       	ldd	r19, Y+17	; 0x11
    3528:	3f 5f       	subi	r19, 0xFF	; 255
    352a:	39 8b       	std	Y+17, r19	; 0x11
    352c:	80 91 55 01 	lds	r24, 0x0155
    3530:	99 89       	ldd	r25, Y+17	; 0x11
    3532:	98 17       	cp	r25, r24
    3534:	08 f4       	brcc	.+2      	; 0x3538 <ReadInductance+0x4f6>
    3536:	a6 cd       	rjmp	.-1204   	; 0x3084 <ReadInductance+0x42>
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
  } // end loop for all resistors

  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    3538:	88 e0       	ldi	r24, 0x08	; 8
    353a:	87 b9       	out	0x07, r24	; 7
  R_DDR = 0;			// switch all resistor ports to input
    353c:	14 b8       	out	0x04, r1	; 4
#endif
  return;
 } // end ReadInductance()
    353e:	6e 96       	adiw	r28, 0x1e	; 30
    3540:	0f b6       	in	r0, 0x3f	; 63
    3542:	f8 94       	cli
    3544:	de bf       	out	0x3e, r29	; 62
    3546:	0f be       	out	0x3f, r0	; 63
    3548:	cd bf       	out	0x3d, r28	; 61
    354a:	cf 91       	pop	r28
    354c:	df 91       	pop	r29
    354e:	1f 91       	pop	r17
    3550:	0f 91       	pop	r16
    3552:	ff 90       	pop	r15
    3554:	ef 90       	pop	r14
    3556:	df 90       	pop	r13
    3558:	cf 90       	pop	r12
    355a:	bf 90       	pop	r11
    355c:	af 90       	pop	r10
    355e:	9f 90       	pop	r9
    3560:	8f 90       	pop	r8
    3562:	7f 90       	pop	r7
    3564:	6f 90       	pop	r6
    3566:	5f 90       	pop	r5
    3568:	4f 90       	pop	r4
    356a:	3f 90       	pop	r3
    356c:	2f 90       	pop	r2
    356e:	08 95       	ret

00003570 <ReadADC>:
  uint16_t U_AVCC;		// Voltage of AVCC
} ADCconfig;
*/


unsigned int ReadADC (uint8_t Probe) {
    3570:	df 92       	push	r13
    3572:	ef 92       	push	r14
    3574:	ff 92       	push	r15
    3576:	0f 93       	push	r16
    3578:	1f 93       	push	r17
 unsigned int U; /* return value (mV) */
 uint8_t Samples; /* loop counter */
 unsigned long Value; /* ADC value */
 Probe |= (1 << REFS0); /* use internal reference anyway */
    357a:	18 2f       	mov	r17, r24
    357c:	10 64       	ori	r17, 0x40	; 64
#endif
#ifdef __AVR_ATmega8__
    ADCSRA |= (1 << ADSC); /* start conversion */
    while (ADCSRA & (1 << ADSC)); /* wait until conversion is done */
#else
    ADCSRA = (1<<ADEN) | (1<<ADIF) | (1<<ADIE) | AUTO_CLOCK_DIV; //enable ADC and Interrupt
    357e:	8e e9       	ldi	r24, 0x9E	; 158
    3580:	e8 2e       	mov	r14, r24
 unsigned int U; /* return value (mV) */
 uint8_t Samples; /* loop counter */
 unsigned long Value; /* ADC value */
 Probe |= (1 << REFS0); /* use internal reference anyway */
sample:
 ADMUX = Probe; /* set input channel and U reference */
    3582:	10 93 7c 00 	sts	0x007C, r17
#ifdef AUTOSCALE_ADC
 /* if voltage reference changed run a dummy conversion */
 Samples = Probe & (1 << REFS1); /* get REFS1 bit flag */
    3586:	01 2f       	mov	r16, r17
    3588:	00 78       	andi	r16, 0x80	; 128
 if (Samples != ADCconfig.RefFlag) {
    358a:	80 91 3a 01 	lds	r24, 0x013A
    358e:	08 17       	cp	r16, r24
    3590:	89 f0       	breq	.+34     	; 0x35b4 <ReadADC+0x44>
#ifdef NO_AREF_CAP
    wait100us(); /* time for voltage stabilization */
    3592:	0e 94 18 15 	call	0x2a30	; 0x2a30 <wait100us>
#endif
#ifdef __AVR_ATmega8__
    ADCSRA |= (1 << ADSC); /* start conversion */
    while (ADCSRA & (1 << ADSC)); /* wait until conversion is done */
#else
    ADCSRA = (1<<ADEN) | (1<<ADIF) | (1<<ADIE) | AUTO_CLOCK_DIV; //enable ADC and Interrupt
    3596:	e0 92 7a 00 	sts	0x007A, r14
    set_sleep_mode(SLEEP_MODE_ADC);
    359a:	83 b7       	in	r24, 0x33	; 51
    359c:	81 7f       	andi	r24, 0xF1	; 241
    359e:	82 60       	ori	r24, 0x02	; 2
    35a0:	83 bf       	out	0x33, r24	; 51
    sleep_mode();
    35a2:	83 b7       	in	r24, 0x33	; 51
    35a4:	81 60       	ori	r24, 0x01	; 1
    35a6:	83 bf       	out	0x33, r24	; 51
    35a8:	88 95       	sleep
    35aa:	83 b7       	in	r24, 0x33	; 51
    35ac:	8e 7f       	andi	r24, 0xFE	; 254
    35ae:	83 bf       	out	0x33, r24	; 51
#endif
    ADCconfig.RefFlag = Samples; /* update flag */
    35b0:	00 93 3a 01 	sts	0x013A, r16
  uint16_t U_AVCC;		// Voltage of AVCC
} ADCconfig;
*/


unsigned int ReadADC (uint8_t Probe) {
    35b4:	20 e0       	ldi	r18, 0x00	; 0
    35b6:	30 e0       	ldi	r19, 0x00	; 0
    35b8:	a9 01       	movw	r20, r18
    35ba:	e0 e0       	ldi	r30, 0x00	; 0
    35bc:	26 c0       	rjmp	.+76     	; 0x360a <ReadADC+0x9a>
#endif
 /* * sample ADC readings */
 Value = 0UL; /* reset sampling variable */
 Samples = 0; /* number of samples to take */
 while (Samples < ADCconfig.Samples) /* take samples */ {
    ADCSRA |= (1 << ADSC); /* start conversion */
    35be:	80 91 7a 00 	lds	r24, 0x007A
    35c2:	80 64       	ori	r24, 0x40	; 64
    35c4:	80 93 7a 00 	sts	0x007A, r24
    while (ADCSRA & (1 << ADSC)); /* wait until conversion is done */
    35c8:	80 91 7a 00 	lds	r24, 0x007A
    35cc:	86 fd       	sbrc	r24, 6
    35ce:	fc cf       	rjmp	.-8      	; 0x35c8 <ReadADC+0x58>
    Value += ADCW; /* add ADC reading */
    35d0:	60 91 78 00 	lds	r22, 0x0078
    35d4:	70 91 79 00 	lds	r23, 0x0079
    35d8:	80 e0       	ldi	r24, 0x00	; 0
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	26 0f       	add	r18, r22
    35de:	37 1f       	adc	r19, r23
    35e0:	48 1f       	adc	r20, r24
    35e2:	59 1f       	adc	r21, r25
#ifdef AUTOSCALE_ADC
    /* auto-switch voltage reference for low readings */
    if ((Samples == 4) && (ADCconfig.U_Bandgap > 255) && ((uint16_t)Value < 1024) && !(Probe & (1 << REFS1))) {
    35e4:	e4 30       	cpi	r30, 0x04	; 4
    35e6:	81 f4       	brne	.+32     	; 0x3608 <ReadADC+0x98>
    35e8:	60 91 3b 01 	lds	r22, 0x013B
    35ec:	70 91 3c 01 	lds	r23, 0x013C
    35f0:	6f 3f       	cpi	r22, 0xFF	; 255
    35f2:	71 05       	cpc	r23, r1
    35f4:	49 f0       	breq	.+18     	; 0x3608 <ReadADC+0x98>
    35f6:	40 f0       	brcs	.+16     	; 0x3608 <ReadADC+0x98>
    35f8:	84 e0       	ldi	r24, 0x04	; 4
    35fa:	20 30       	cpi	r18, 0x00	; 0
    35fc:	38 07       	cpc	r19, r24
    35fe:	20 f4       	brcc	.+8      	; 0x3608 <ReadADC+0x98>
    3600:	17 fd       	sbrc	r17, 7
    3602:	02 c0       	rjmp	.+4      	; 0x3608 <ReadADC+0x98>
       Probe |= (1 << REFS1); /* select internal bandgap reference */
    3604:	10 68       	ori	r17, 0x80	; 128
       goto sample; /* re-run sampling */
    3606:	bd cf       	rjmp	.-134    	; 0x3582 <ReadADC+0x12>
    }
#endif
    Samples++; /* one more done */
    3608:	ef 5f       	subi	r30, 0xFF	; 255
 }
#endif
 /* * sample ADC readings */
 Value = 0UL; /* reset sampling variable */
 Samples = 0; /* number of samples to take */
 while (Samples < ADCconfig.Samples) /* take samples */ {
    360a:	d0 90 39 01 	lds	r13, 0x0139
    360e:	ed 15       	cp	r30, r13
    3610:	b0 f2       	brcs	.-84     	; 0x35be <ReadADC+0x4e>
    Samples++; /* one more done */
 }
#ifdef AUTOSCALE_ADC
 /* * convert ADC reading to voltage * - single sample: U = ADC reading * U_ref / 1024 */
 /* get voltage of reference used */
 if (Probe & (1 << REFS1)) U = ADCconfig.U_Bandgap; /* bandgap reference */
    3612:	17 ff       	sbrs	r17, 7
    3614:	05 c0       	rjmp	.+10     	; 0x3620 <ReadADC+0xb0>
    3616:	60 91 3b 01 	lds	r22, 0x013B
    361a:	70 91 3c 01 	lds	r23, 0x013C
    361e:	04 c0       	rjmp	.+8      	; 0x3628 <ReadADC+0xb8>
 else U = ADCconfig.U_AVCC; /* Vcc reference */
    3620:	60 91 3d 01 	lds	r22, 0x013D
    3624:	70 91 3e 01 	lds	r23, 0x013E
#else
 U = ADCconfig.U_AVCC; /* Vcc reference */
#endif
 /* convert to voltage; */
 Value *= U; /* ADC readings * U_ref */
    3628:	80 e0       	ldi	r24, 0x00	; 0
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
 Value /= 1023; /* / 1024 for 10bit ADC */
    3630:	2f ef       	ldi	r18, 0xFF	; 255
    3632:	33 e0       	ldi	r19, 0x03	; 3
    3634:	40 e0       	ldi	r20, 0x00	; 0
    3636:	50 e0       	ldi	r21, 0x00	; 0
    3638:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
    363c:	79 01       	movw	r14, r18
    363e:	8a 01       	movw	r16, r20
 /* de-sample to get average voltage */
 Value /= ADCconfig.Samples;
    3640:	2d 2d       	mov	r18, r13
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	40 e0       	ldi	r20, 0x00	; 0
    3646:	50 e0       	ldi	r21, 0x00	; 0
    3648:	c8 01       	movw	r24, r16
    364a:	b7 01       	movw	r22, r14
    364c:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
 U = (unsigned int)Value;
 return U;
//   return ((unsigned int)(Value / (1023 * (unsigned long)ADCconfig.Samples)));
}
    3650:	c9 01       	movw	r24, r18
    3652:	1f 91       	pop	r17
    3654:	0f 91       	pop	r16
    3656:	ff 90       	pop	r15
    3658:	ef 90       	pop	r14
    365a:	df 90       	pop	r13
    365c:	08 95       	ret

0000365e <W5msReadADC>:
unsigned int W5msReadADC (uint8_t Probe) {
    365e:	1f 93       	push	r17
    3660:	18 2f       	mov	r17, r24
  wait_about5ms();
    3662:	81 e0       	ldi	r24, 0x01	; 1
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	0e 94 bb 03 	call	0x776	; 0x776 <sleep_5ms>
  return (ReadADC(Probe));
    366a:	81 2f       	mov	r24, r17
    366c:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
}
    3670:	1f 91       	pop	r17
    3672:	08 95       	ret

00003674 <W10msReadADC>:
unsigned int W10msReadADC (uint8_t Probe) {
    3674:	1f 93       	push	r17
    3676:	18 2f       	mov	r17, r24
  wait_about10ms();
    3678:	82 e0       	ldi	r24, 0x02	; 2
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	0e 94 bb 03 	call	0x776	; 0x776 <sleep_5ms>
  return (ReadADC(Probe));
    3680:	81 2f       	mov	r24, r17
    3682:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
}
    3686:	1f 91       	pop	r17
    3688:	08 95       	ret

0000368a <W20msReadADC>:
unsigned int W20msReadADC (uint8_t Probe) {
    368a:	1f 93       	push	r17
    368c:	18 2f       	mov	r17, r24
  wait_about20ms();
    368e:	84 e0       	ldi	r24, 0x04	; 4
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	0e 94 bb 03 	call	0x776	; 0x776 <sleep_5ms>
  return (ReadADC(Probe));
    3696:	81 2f       	mov	r24, r17
    3698:	0e 94 b8 1a 	call	0x3570	; 0x3570 <ReadADC>
}
    369c:	1f 91       	pop	r17
    369e:	08 95       	ret

000036a0 <GetESR>:
#include "Transistortester.h"

#define MAX_CNT 128

//=================================================================
void GetESR() {
    36a0:	2f 92       	push	r2
    36a2:	3f 92       	push	r3
    36a4:	4f 92       	push	r4
    36a6:	5f 92       	push	r5
    36a8:	6f 92       	push	r6
    36aa:	7f 92       	push	r7
    36ac:	8f 92       	push	r8
    36ae:	9f 92       	push	r9
    36b0:	af 92       	push	r10
    36b2:	bf 92       	push	r11
    36b4:	cf 92       	push	r12
    36b6:	df 92       	push	r13
    36b8:	ef 92       	push	r14
    36ba:	ff 92       	push	r15
    36bc:	0f 93       	push	r16
    36be:	1f 93       	push	r17
    36c0:	df 93       	push	r29
    36c2:	cf 93       	push	r28
    36c4:	cd b7       	in	r28, 0x3d	; 61
    36c6:	de b7       	in	r29, 0x3e	; 62
    36c8:	60 97       	sbiw	r28, 0x10	; 16
    36ca:	0f b6       	in	r0, 0x3f	; 63
    36cc:	f8 94       	cli
    36ce:	de bf       	out	0x3e, r29	; 62
    36d0:	0f be       	out	0x3f, r0	; 63
    36d2:	cd bf       	out	0x3d, r28	; 61
   esr0 = (int8_t)eeprom_read_byte(&EE_ESR_ZERO);
   sumvolt[0] += (((long)sumvolt[0] * esr0) / ((RR680MI - R_L_VAL) * 10)); // subtract 0.23 Ohm from ESR
   if (sumvolt[1] > sumvolt[0]) {
      sumvolt[1] -= sumvolt[0];		// difference HighPin - LowPin Voltage with current
   } else {
      sumvolt[1] = 0;
    36d4:	20 91 5c 01 	lds	r18, 0x015C
    36d8:	30 91 5d 01 	lds	r19, 0x015D
    36dc:	40 91 5e 01 	lds	r20, 0x015E
    36e0:	50 91 5f 01 	lds	r21, 0x015F
    36e4:	10 91 69 01 	lds	r17, 0x0169
  uint8_t LoADC;		// used to switch Lowpin directly to GND or VCC
  uint8_t ii,jj;		// tempory values
  int8_t esr0;			// used for ESR zero correction

  while (cap.cpre_max < -9) { // set cval to nF unit
      cap.cval_max /= 10;		// reduce value by factor ten
    36e8:	6a e0       	ldi	r22, 0x0A	; 10
    36ea:	a6 2e       	mov	r10, r22
    36ec:	b1 2c       	mov	r11, r1
    36ee:	c1 2c       	mov	r12, r1
    36f0:	d1 2c       	mov	r13, r1
  uint8_t LoPinR_L;		// used to switch 680 Ohm to LowPin
  uint8_t LoADC;		// used to switch Lowpin directly to GND or VCC
  uint8_t ii,jj;		// tempory values
  int8_t esr0;			// used for ESR zero correction

  while (cap.cpre_max < -9) { // set cval to nF unit
    36f2:	07 c0       	rjmp	.+14     	; 0x3702 <GetESR+0x62>
      cap.cval_max /= 10;		// reduce value by factor ten
    36f4:	ca 01       	movw	r24, r20
    36f6:	b9 01       	movw	r22, r18
    36f8:	a6 01       	movw	r20, r12
    36fa:	95 01       	movw	r18, r10
    36fc:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
    3700:	1f 5f       	subi	r17, 0xFF	; 255
  uint8_t LoPinR_L;		// used to switch 680 Ohm to LowPin
  uint8_t LoADC;		// used to switch Lowpin directly to GND or VCC
  uint8_t ii,jj;		// tempory values
  int8_t esr0;			// used for ESR zero correction

  while (cap.cpre_max < -9) { // set cval to nF unit
    3702:	17 3f       	cpi	r17, 0xF7	; 247
    3704:	bc f3       	brlt	.-18     	; 0x36f4 <GetESR+0x54>
    3706:	20 93 5c 01 	sts	0x015C, r18
    370a:	30 93 5d 01 	sts	0x015D, r19
    370e:	40 93 5e 01 	sts	0x015E, r20
    3712:	50 93 5f 01 	sts	0x015F, r21
    3716:	10 93 69 01 	sts	0x0169, r17
      cap.cval_max /= 10;		// reduce value by factor ten
      cap.cpre_max++;		// take next decimal prefix
  }
  if (cap.cval_max < 1800) return;			//capacity lower than 1.8 uF
    371a:	28 30       	cpi	r18, 0x08	; 8
    371c:	67 e0       	ldi	r22, 0x07	; 7
    371e:	36 07       	cpc	r19, r22
    3720:	60 e0       	ldi	r22, 0x00	; 0
    3722:	46 07       	cpc	r20, r22
    3724:	60 e0       	ldi	r22, 0x00	; 0
    3726:	56 07       	cpc	r21, r22
    3728:	08 f4       	brcc	.+2      	; 0x372c <GetESR+0x8c>
    372a:	21 c2       	rjmp	.+1090   	; 0x3b6e <GetESR+0x4ce>
  lcd_fix_string(ESR_str);		// " ESR="
    372c:	8c e2       	ldi	r24, 0x2C	; 44
    372e:	91 e0       	ldi	r25, 0x01	; 1
    3730:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  LoADC = MEM_read_byte(&PinADCtab[cap.ca]) | TXD_MSK;
    3734:	00 91 66 01 	lds	r16, 0x0166
    3738:	10 e0       	ldi	r17, 0x00	; 0
    373a:	c8 01       	movw	r24, r16
    373c:	88 55       	subi	r24, 0x58	; 88
    373e:	9e 4f       	sbci	r25, 0xFE	; 254
    3740:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__eerd_byte_m168>
    3744:	98 e0       	ldi	r25, 0x08	; 8
    3746:	c9 2e       	mov	r12, r25
    3748:	c8 2a       	or	r12, r24
  HiADC = MEM_read_byte(&PinADCtab[cap.cb]) | TXD_MSK;
    374a:	80 91 67 01 	lds	r24, 0x0167
    374e:	e8 2e       	mov	r14, r24
    3750:	ff 24       	eor	r15, r15
    3752:	c7 01       	movw	r24, r14
    3754:	88 55       	subi	r24, 0x58	; 88
    3756:	9e 4f       	sbci	r25, 0xFE	; 254
    3758:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__eerd_byte_m168>
    375c:	b8 e0       	ldi	r27, 0x08	; 8
    375e:	bb 2e       	mov	r11, r27
    3760:	b8 2a       	or	r11, r24
  LoPinR_L = MEM_read_byte(&PinRLtab[cap.ca]);  //R_L mask for LowPin R_L load
    3762:	c8 01       	movw	r24, r16
    3764:	8b 55       	subi	r24, 0x5B	; 91
    3766:	9e 4f       	sbci	r25, 0xFE	; 254
    3768:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__eerd_byte_m168>
    376c:	a8 2e       	mov	r10, r24
  HiPinR_L = MEM_read_byte(&PinRLtab[cap.cb]);	//R_L mask for HighPin R_L load
    376e:	c7 01       	movw	r24, r14
    3770:	8b 55       	subi	r24, 0x5B	; 91
    3772:	9e 4f       	sbci	r25, 0xFE	; 254
    3774:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__eerd_byte_m168>
    3778:	d8 2e       	mov	r13, r24
// Measurement of ESR of capacitors AC Mode
   sumvolt[0] = 1;		// set sum of LowPin voltage to 1 to prevent divide by zero
   sumvolt[1] = 1;		// clear sum of HighPin voltage with current
                                // offset is about (x*10*200)/34000 in 0.01 Ohm units
   sumvolt[2] = 0;		// clear sum of HighPin voltage without current
   EntladePins();	// discharge capacitor
    377a:	0e 94 cc 01 	call	0x398	; 0x398 <EntladePins>
   ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    377e:	88 e0       	ldi	r24, 0x08	; 8
    3780:	88 b9       	out	0x08, r24	; 8
  LoPinR_L = MEM_read_byte(&PinRLtab[cap.ca]);  //R_L mask for LowPin R_L load
  HiPinR_L = MEM_read_byte(&PinRLtab[cap.cb]);	//R_L mask for HighPin R_L load


// Measurement of ESR of capacitors AC Mode
   sumvolt[0] = 1;		// set sum of LowPin voltage to 1 to prevent divide by zero
    3782:	a1 e0       	ldi	r26, 0x01	; 1
    3784:	ea 2e       	mov	r14, r26
    3786:	f1 2c       	mov	r15, r1
    3788:	01 2d       	mov	r16, r1
    378a:	11 2d       	mov	r17, r1
   sumvolt[1] = 1;		// clear sum of HighPin voltage with current
    378c:	81 e0       	ldi	r24, 0x01	; 1
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	a0 e0       	ldi	r26, 0x00	; 0
    3792:	b0 e0       	ldi	r27, 0x00	; 0
    3794:	89 83       	std	Y+1, r24	; 0x01
    3796:	9a 83       	std	Y+2, r25	; 0x02
    3798:	ab 83       	std	Y+3, r26	; 0x03
    379a:	bc 83       	std	Y+4, r27	; 0x04
                                // offset is about (x*10*200)/34000 in 0.01 Ohm units
   sumvolt[2] = 0;		// clear sum of HighPin voltage without current
    379c:	1d 82       	std	Y+5, r1	; 0x05
    379e:	1e 82       	std	Y+6, r1	; 0x06
    37a0:	1f 82       	std	Y+7, r1	; 0x07
    37a2:	18 86       	std	Y+8, r1	; 0x08
   EntladePins();	// discharge capacitor
   ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
// measurement frequency is given by sum of ADC-Reads < 680 Hz
   // ADC Sample and Hold (SH) is done 1.5 ADC clock number after starting 
   for(ii=0;ii<MAX_CNT;ii++) {
    37a4:	66 24       	eor	r6, r6
      ADC_DDR = LoADC;				// switch Low-Pin to output (GND)
    37a6:	c7 b8       	out	0x07, r12	; 7
       ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);	// switch ADC to LowPin, Internal Ref. 
    37a8:	80 91 66 01 	lds	r24, 0x0166
    37ac:	80 6c       	ori	r24, 0xC0	; 192
    37ae:	80 93 7c 00 	sts	0x007C, r24
       ADCSRA |= (1<<ADSC);				// Start Conversion
    37b2:	80 91 7a 00 	lds	r24, 0x007A
    37b6:	80 64       	ori	r24, 0x40	; 64
    37b8:	80 93 7a 00 	sts	0x007A, r24
       while (ADCSRA&(1<<ADSC));	// wait dummy read , sync with ADC-clock
    37bc:	80 91 7a 00 	lds	r24, 0x007A
    37c0:	86 fd       	sbrc	r24, 6
    37c2:	fc cf       	rjmp	.-8      	; 0x37bc <GetESR+0x11c>
      while (1) {
         R_PORT = HiPinR_L;			// switch R-Port to VCC
    37c4:	d5 b8       	out	0x05, r13	; 5
         R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (VCC)
    37c6:	d4 b8       	out	0x04, r13	; 4
          ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);      // switch ADC to LowPin, Internal Ref. 
    37c8:	80 91 66 01 	lds	r24, 0x0166
    37cc:	80 6c       	ori	r24, 0xC0	; 192
    37ce:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    37d2:	80 91 7a 00 	lds	r24, 0x007A
    37d6:	80 64       	ori	r24, 0x40	; 64
    37d8:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    37dc:	80 91 7a 00 	lds	r24, 0x007A
    37e0:	86 fd       	sbrc	r24, 6
    37e2:	fc cf       	rjmp	.-8      	; 0x37dc <GetESR+0x13c>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    37e4:	80 91 7a 00 	lds	r24, 0x007A
    37e8:	80 64       	ori	r24, 0x40	; 64
    37ea:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    37ee:	80 91 7a 00 	lds	r24, 0x007A
    37f2:	86 fd       	sbrc	r24, 6
    37f4:	fc cf       	rjmp	.-8      	; 0x37ee <GetESR+0x14e>
         adcv[0] = ADCW;			// Voltage LowPin with current
    37f6:	20 90 78 00 	lds	r2, 0x0078
    37fa:	30 90 79 00 	lds	r3, 0x0079
          ADMUX = cap.cb | (1<<REFS1) | (1<<REFS0);      // switch ADC to HighPin, Internal Ref. 
    37fe:	80 91 67 01 	lds	r24, 0x0167
    3802:	80 6c       	ori	r24, 0xC0	; 192
    3804:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    3808:	80 91 7a 00 	lds	r24, 0x007A
    380c:	80 64       	ori	r24, 0x40	; 64
    380e:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    3812:	80 91 7a 00 	lds	r24, 0x007A
    3816:	86 fd       	sbrc	r24, 6
    3818:	fc cf       	rjmp	.-8      	; 0x3812 <GetESR+0x172>
         ADCSRA |= (1<<ADSC);			// Start Conversion, real start is rising edge of ADC clock
    381a:	80 91 7a 00 	lds	r24, 0x007A
    381e:	80 64       	ori	r24, 0x40	; 64
    3820:	80 93 7a 00 	sts	0x007A, r24
         wait10us();				// 2.5 ADC clocks = 20 us
    3824:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <wait10us>
         wait5us();			
    3828:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <wait5us>
         wait3us();				// with only 17 us delay the voltage goes down before SH
    382c:	0e 94 20 15 	call	0x2a40	; 0x2a40 <wait3us>
         wdt_reset();
    3830:	a8 95       	wdr
         wdt_reset();
    3832:	a8 95       	wdr
         wdt_reset();
    3834:	a8 95       	wdr
         wdt_reset();
    3836:	a8 95       	wdr
         wdt_reset();
    3838:	a8 95       	wdr
         wdt_reset();
    383a:	a8 95       	wdr
//         wdt_reset();				// with wdt_reset the timing can be adjusted,
						// when time is too short, voltage is down before SH of ADC
						// when time is too long, capacitor will be overloaded.
						// That will cause too high voltage without current.
         R_DDR = 0;				// switch current off,  SH is 1.5 ADC clock behind start
    383c:	14 b8       	out	0x04, r1	; 4
         while (ADCSRA&(1<<ADSC));		// wait for conversion finished
    383e:	80 91 7a 00 	lds	r24, 0x007A
    3842:	86 fd       	sbrc	r24, 6
    3844:	fc cf       	rjmp	.-8      	; 0x383e <GetESR+0x19e>
         adcv[1] = ADCW;			// Voltage HighPin with current
    3846:	20 91 78 00 	lds	r18, 0x0078
    384a:	30 91 79 00 	lds	r19, 0x0079
         R_PORT = 0;
    384e:	15 b8       	out	0x05, r1	; 5
          ADCSRA |= (1<<ADSC);			// Start Conversion
    3850:	80 91 7a 00 	lds	r24, 0x007A
    3854:	80 64       	ori	r24, 0x40	; 64
    3856:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read
    385a:	80 91 7a 00 	lds	r24, 0x007A
    385e:	86 fd       	sbrc	r24, 6
    3860:	fc cf       	rjmp	.-8      	; 0x385a <GetESR+0x1ba>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    3862:	80 91 7a 00 	lds	r24, 0x007A
    3866:	80 64       	ori	r24, 0x40	; 64
    3868:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    386c:	80 91 7a 00 	lds	r24, 0x007A
    3870:	86 fd       	sbrc	r24, 6
    3872:	fc cf       	rjmp	.-8      	; 0x386c <GetESR+0x1cc>
         adcv[2] = ADCW;			// Voltage HighPin without current
    3874:	80 91 78 00 	lds	r24, 0x0078
    3878:	90 91 79 00 	lds	r25, 0x0079
         if (adcv[2] > 2) break;
    387c:	83 30       	cpi	r24, 0x03	; 3
    387e:	91 05       	cpc	r25, r1
    3880:	10 f4       	brcc	.+4      	; 0x3886 <GetESR+0x1e6>
         wdt_reset();
    3882:	a8 95       	wdr
      }
    3884:	9f cf       	rjmp	.-194    	; 0x37c4 <GetESR+0x124>
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
    3886:	44 24       	eor	r4, r4
    3888:	55 24       	eor	r5, r5
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    388a:	a9 01       	movw	r20, r18
    388c:	60 e0       	ldi	r22, 0x00	; 0
    388e:	70 e0       	ldi	r23, 0x00	; 0
    3890:	49 87       	std	Y+9, r20	; 0x09
    3892:	5a 87       	std	Y+10, r21	; 0x0a
    3894:	6b 87       	std	Y+11, r22	; 0x0b
    3896:	7c 87       	std	Y+12, r23	; 0x0c
      sumvolt[2] += adcv[2]; 			// capacitor voltage without current
    3898:	9c 01       	movw	r18, r24
    389a:	40 e0       	ldi	r20, 0x00	; 0
    389c:	50 e0       	ldi	r21, 0x00	; 0
    389e:	2d 87       	std	Y+13, r18	; 0x0d
    38a0:	3e 87       	std	Y+14, r19	; 0x0e
    38a2:	4f 87       	std	Y+15, r20	; 0x0f
    38a4:	58 8b       	std	Y+16, r21	; 0x10
      ADC_DDR = HiADC;				// switch High Pin to GND
    38a6:	b7 b8       	out	0x07, r11	; 7
       ADCSRA |= (1<<ADSC);			// Start Conversion
    38a8:	80 91 7a 00 	lds	r24, 0x007A
    38ac:	80 64       	ori	r24, 0x40	; 64
    38ae:	80 93 7a 00 	sts	0x007A, r24
       while (ADCSRA&(1<<ADSC));		// wait dummy read
    38b2:	80 91 7a 00 	lds	r24, 0x007A
    38b6:	86 fd       	sbrc	r24, 6
    38b8:	fc cf       	rjmp	.-8      	; 0x38b2 <GetESR+0x212>
      while (1) {
         R_PORT = LoPinR_L;
    38ba:	a5 b8       	out	0x05, r10	; 5
         R_DDR = LoPinR_L;			// switch LowPin with 680 Ohm to VCC
    38bc:	a4 b8       	out	0x04, r10	; 4
         wdt_reset();
    38be:	a8 95       	wdr
          ADMUX = cap.cb | (1<<REFS1) | (1<<REFS0);      // switch ADC to HighPin, Internal Ref. 
    38c0:	80 91 67 01 	lds	r24, 0x0167
    38c4:	80 6c       	ori	r24, 0xC0	; 192
    38c6:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    38ca:	80 91 7a 00 	lds	r24, 0x007A
    38ce:	80 64       	ori	r24, 0x40	; 64
    38d0:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    38d4:	80 91 7a 00 	lds	r24, 0x007A
    38d8:	86 fd       	sbrc	r24, 6
    38da:	fc cf       	rjmp	.-8      	; 0x38d4 <GetESR+0x234>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    38dc:	80 91 7a 00 	lds	r24, 0x007A
    38e0:	80 64       	ori	r24, 0x40	; 64
    38e2:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    38e6:	80 91 7a 00 	lds	r24, 0x007A
    38ea:	86 fd       	sbrc	r24, 6
    38ec:	fc cf       	rjmp	.-8      	; 0x38e6 <GetESR+0x246>
         adcv[0] = ADCW;			// Voltage HighPin with current
    38ee:	80 90 78 00 	lds	r8, 0x0078
    38f2:	90 90 79 00 	lds	r9, 0x0079
          ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);      // switch ADC to LowPin, Internal Ref. 
    38f6:	80 91 66 01 	lds	r24, 0x0166
    38fa:	80 6c       	ori	r24, 0xC0	; 192
    38fc:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);			// Start Conversion
    3900:	80 91 7a 00 	lds	r24, 0x007A
    3904:	80 64       	ori	r24, 0x40	; 64
    3906:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read after switch
    390a:	80 91 7a 00 	lds	r24, 0x007A
    390e:	86 fd       	sbrc	r24, 6
    3910:	fc cf       	rjmp	.-8      	; 0x390a <GetESR+0x26a>
         ADCSRA |= (1<<ADSC);			// Start Conversion, real start is rising edge of ADC clock
    3912:	80 91 7a 00 	lds	r24, 0x007A
    3916:	80 64       	ori	r24, 0x40	; 64
    3918:	80 93 7a 00 	sts	0x007A, r24
         wait10us();				// 2.5 ADC clocks = 20 us
    391c:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <wait10us>
         wait5us();			
    3920:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <wait5us>
         wait3us();				// with only 17 us delay the voltage goes down before SH
    3924:	0e 94 20 15 	call	0x2a40	; 0x2a40 <wait3us>
         wdt_reset();
    3928:	a8 95       	wdr
         wdt_reset();
    392a:	a8 95       	wdr
         wdt_reset();
    392c:	a8 95       	wdr
         wdt_reset();
    392e:	a8 95       	wdr
         wdt_reset();
    3930:	a8 95       	wdr
         wdt_reset();
    3932:	a8 95       	wdr
//         wdt_reset();				// with wdt_reset the timing can be adjusted,
						// when time is too short, voltage is down before SH of ADC
						// when time is too long, capacitor will be overloaded.
						// That will cause too high voltage without current.
         R_DDR = 0;				// switch current off, SH is 1.5 ADC clock ticks behind start
    3934:	14 b8       	out	0x04, r1	; 4
         while (ADCSRA&(1<<ADSC));		// wait for conversion finished
    3936:	80 91 7a 00 	lds	r24, 0x007A
    393a:	86 fd       	sbrc	r24, 6
    393c:	fc cf       	rjmp	.-8      	; 0x3936 <GetESR+0x296>
         adcv[1] = ADCW;			//  Voltage LowPin with current
    393e:	40 91 78 00 	lds	r20, 0x0078
    3942:	50 91 79 00 	lds	r21, 0x0079
         R_PORT = 0;
    3946:	15 b8       	out	0x05, r1	; 5
          ADMUX = cap.ca | (1<<REFS1) | (1<<REFS0);      // switch ADC to LowPin, Internal Ref. 
    3948:	80 91 66 01 	lds	r24, 0x0166
    394c:	80 6c       	ori	r24, 0xC0	; 192
    394e:	80 93 7c 00 	sts	0x007C, r24
          ADCSRA |= (1<<ADSC);		// Start Conversion
    3952:	80 91 7a 00 	lds	r24, 0x007A
    3956:	80 64       	ori	r24, 0x40	; 64
    3958:	80 93 7a 00 	sts	0x007A, r24
          while (ADCSRA&(1<<ADSC));		// wait dummy read
    395c:	80 91 7a 00 	lds	r24, 0x007A
    3960:	86 fd       	sbrc	r24, 6
    3962:	fc cf       	rjmp	.-8      	; 0x395c <GetESR+0x2bc>
         ADCSRA |= (1<<ADSC);			// Start Conversion
    3964:	80 91 7a 00 	lds	r24, 0x007A
    3968:	80 64       	ori	r24, 0x40	; 64
    396a:	80 93 7a 00 	sts	0x007A, r24
         while (ADCSRA&(1<<ADSC));		// wait
    396e:	80 91 7a 00 	lds	r24, 0x007A
    3972:	86 fd       	sbrc	r24, 6
    3974:	fc cf       	rjmp	.-8      	; 0x396e <GetESR+0x2ce>
         adcv[2] = ADCW;			// Voltage LowPin without current
    3976:	20 91 78 00 	lds	r18, 0x0078
    397a:	30 91 79 00 	lds	r19, 0x0079
         if (adcv[2] > 2) break;
    397e:	23 30       	cpi	r18, 0x03	; 3
    3980:	31 05       	cpc	r19, r1
    3982:	10 f4       	brcc	.+4      	; 0x3988 <GetESR+0x2e8>
         wdt_reset();
    3984:	a8 95       	wdr
      }
    3986:	99 cf       	rjmp	.-206    	; 0x38ba <GetESR+0x21a>
      R_DDR = 0;				// switch current off
    3988:	14 b8       	out	0x04, r1	; 4
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
    398a:	c4 01       	movw	r24, r8
    398c:	a0 e0       	ldi	r26, 0x00	; 0
    398e:	b0 e0       	ldi	r27, 0x00	; 0
         while (ADCSRA&(1<<ADSC));		// wait
         adcv[2] = ADCW;			// Voltage HighPin without current
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
    3990:	82 0d       	add	r24, r2
    3992:	93 1d       	adc	r25, r3
    3994:	a4 1d       	adc	r26, r4
    3996:	b5 1d       	adc	r27, r5
         adcv[2] = ADCW;			// Voltage LowPin without current
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      R_DDR = 0;				// switch current off
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
    3998:	e8 0e       	add	r14, r24
    399a:	f9 1e       	adc	r15, r25
    399c:	0a 1f       	adc	r16, r26
    399e:	1b 1f       	adc	r17, r27
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    39a0:	ca 01       	movw	r24, r20
    39a2:	a0 e0       	ldi	r26, 0x00	; 0
    39a4:	b0 e0       	ldi	r27, 0x00	; 0
         adcv[2] = ADCW;			// Voltage HighPin without current
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    39a6:	49 85       	ldd	r20, Y+9	; 0x09
    39a8:	5a 85       	ldd	r21, Y+10	; 0x0a
    39aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    39ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    39ae:	84 0f       	add	r24, r20
    39b0:	95 1f       	adc	r25, r21
    39b2:	a6 1f       	adc	r26, r22
    39b4:	b7 1f       	adc	r27, r23
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      R_DDR = 0;				// switch current off
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
    39b6:	49 81       	ldd	r20, Y+1	; 0x01
    39b8:	5a 81       	ldd	r21, Y+2	; 0x02
    39ba:	6b 81       	ldd	r22, Y+3	; 0x03
    39bc:	7c 81       	ldd	r23, Y+4	; 0x04
    39be:	48 0f       	add	r20, r24
    39c0:	59 1f       	adc	r21, r25
    39c2:	6a 1f       	adc	r22, r26
    39c4:	7b 1f       	adc	r23, r27
    39c6:	49 83       	std	Y+1, r20	; 0x01
    39c8:	5a 83       	std	Y+2, r21	; 0x02
    39ca:	6b 83       	std	Y+3, r22	; 0x03
    39cc:	7c 83       	std	Y+4, r23	; 0x04
      sumvolt[2] += adcv[2];			// add  HighPin voltages without current
    39ce:	40 e0       	ldi	r20, 0x00	; 0
    39d0:	50 e0       	ldi	r21, 0x00	; 0
         if (adcv[2] > 2) break;
         wdt_reset();
      }
      sumvolt[0] += adcv[0];			// add sum of both LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
      sumvolt[2] += adcv[2]; 			// capacitor voltage without current
    39d2:	6d 85       	ldd	r22, Y+13	; 0x0d
    39d4:	7e 85       	ldd	r23, Y+14	; 0x0e
    39d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    39d8:	98 89       	ldd	r25, Y+16	; 0x10
    39da:	26 0f       	add	r18, r22
    39dc:	37 1f       	adc	r19, r23
    39de:	48 1f       	adc	r20, r24
    39e0:	59 1f       	adc	r21, r25
         wdt_reset();
      }
      R_DDR = 0;				// switch current off
      sumvolt[0] += adcv[0];			// add  LowPin voltages with current
      sumvolt[1] += adcv[1];			// add  HighPin voltages with current
      sumvolt[2] += adcv[2];			// add  HighPin voltages without current
    39e2:	8d 81       	ldd	r24, Y+5	; 0x05
    39e4:	9e 81       	ldd	r25, Y+6	; 0x06
    39e6:	af 81       	ldd	r26, Y+7	; 0x07
    39e8:	b8 85       	ldd	r27, Y+8	; 0x08
    39ea:	82 0f       	add	r24, r18
    39ec:	93 1f       	adc	r25, r19
    39ee:	a4 1f       	adc	r26, r20
    39f0:	b5 1f       	adc	r27, r21
    39f2:	8d 83       	std	Y+5, r24	; 0x05
    39f4:	9e 83       	std	Y+6, r25	; 0x06
    39f6:	af 83       	std	Y+7, r26	; 0x07
    39f8:	b8 87       	std	Y+8, r27	; 0x08
   sumvolt[2] = 0;		// clear sum of HighPin voltage without current
   EntladePins();	// discharge capacitor
   ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
// measurement frequency is given by sum of ADC-Reads < 680 Hz
   // ADC Sample and Hold (SH) is done 1.5 ADC clock number after starting 
   for(ii=0;ii<MAX_CNT;ii++) {
    39fa:	63 94       	inc	r6
    39fc:	96 2d       	mov	r25, r6
    39fe:	90 38       	cpi	r25, 0x80	; 128
    3a00:	09 f0       	breq	.+2      	; 0x3a04 <GetESR+0x364>
    3a02:	d1 ce       	rjmp	.-606    	; 0x37a6 <GetESR+0x106>
   } // end for
   // we need to compensate the time delay between reading the LowPin Voltage and the
   // HighPin Voltage, which is usually 2 * 14 * 8 us = 224 us.
   // With the loading of the capacitor the current will sink, so we get a too high voltage at
   // the LowPin. The velocity of degration is inversely proportional to time constant (represented by capacity value).
   sumvolt[0] -= (sumvolt[0] * 150UL)  / cap.cval_max;
    3a04:	c8 01       	movw	r24, r16
    3a06:	b7 01       	movw	r22, r14
    3a08:	26 e9       	ldi	r18, 0x96	; 150
    3a0a:	30 e0       	ldi	r19, 0x00	; 0
    3a0c:	40 e0       	ldi	r20, 0x00	; 0
    3a0e:	50 e0       	ldi	r21, 0x00	; 0
    3a10:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    3a14:	20 91 5c 01 	lds	r18, 0x015C
    3a18:	30 91 5d 01 	lds	r19, 0x015D
    3a1c:	40 91 5e 01 	lds	r20, 0x015E
    3a20:	50 91 5f 01 	lds	r21, 0x015F
    3a24:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
    3a28:	57 01       	movw	r10, r14
    3a2a:	68 01       	movw	r12, r16
    3a2c:	a2 1a       	sub	r10, r18
    3a2e:	b3 0a       	sbc	r11, r19
    3a30:	c4 0a       	sbc	r12, r20
    3a32:	d5 0a       	sbc	r13, r21
   esr0 = (int8_t)eeprom_read_byte(&EE_ESR_ZERO);
    3a34:	80 ec       	ldi	r24, 0xC0	; 192
    3a36:	91 e0       	ldi	r25, 0x01	; 1
    3a38:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <__eerd_byte_m168>
    3a3c:	28 2e       	mov	r2, r24
   sumvolt[0] += (((long)sumvolt[0] * esr0) / ((RR680MI - R_L_VAL) * 10)); // subtract 0.23 Ohm from ESR
    3a3e:	40 90 02 01 	lds	r4, 0x0102
    3a42:	50 90 03 01 	lds	r5, 0x0103
    3a46:	68 2f       	mov	r22, r24
    3a48:	77 27       	eor	r23, r23
    3a4a:	67 fd       	sbrc	r22, 7
    3a4c:	70 95       	com	r23
    3a4e:	87 2f       	mov	r24, r23
    3a50:	97 2f       	mov	r25, r23
    3a52:	a6 01       	movw	r20, r12
    3a54:	95 01       	movw	r18, r10
    3a56:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    3a5a:	92 01       	movw	r18, r4
    3a5c:	22 0f       	add	r18, r18
    3a5e:	33 1f       	adc	r19, r19
    3a60:	a2 01       	movw	r20, r4
    3a62:	e3 e0       	ldi	r30, 0x03	; 3
    3a64:	44 0f       	add	r20, r20
    3a66:	55 1f       	adc	r21, r21
    3a68:	ea 95       	dec	r30
    3a6a:	e1 f7       	brne	.-8      	; 0x3a64 <GetESR+0x3c4>
    3a6c:	24 0f       	add	r18, r20
    3a6e:	35 1f       	adc	r19, r21
    3a70:	20 5a       	subi	r18, 0xA0	; 160
    3a72:	39 40       	sbci	r19, 0x09	; 9
    3a74:	40 e0       	ldi	r20, 0x00	; 0
    3a76:	50 e0       	ldi	r21, 0x00	; 0
    3a78:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__divmodsi4>
    3a7c:	79 01       	movw	r14, r18
    3a7e:	8a 01       	movw	r16, r20
    3a80:	ea 0c       	add	r14, r10
    3a82:	fb 1c       	adc	r15, r11
    3a84:	0c 1d       	adc	r16, r12
    3a86:	1d 1d       	adc	r17, r13
   if (sumvolt[1] > sumvolt[0]) {
    3a88:	29 81       	ldd	r18, Y+1	; 0x01
    3a8a:	3a 81       	ldd	r19, Y+2	; 0x02
    3a8c:	4b 81       	ldd	r20, Y+3	; 0x03
    3a8e:	5c 81       	ldd	r21, Y+4	; 0x04
    3a90:	e2 16       	cp	r14, r18
    3a92:	f3 06       	cpc	r15, r19
    3a94:	04 07       	cpc	r16, r20
    3a96:	15 07       	cpc	r17, r21
    3a98:	38 f4       	brcc	.+14     	; 0x3aa8 <GetESR+0x408>
      sumvolt[1] -= sumvolt[0];		// difference HighPin - LowPin Voltage with current
    3a9a:	59 01       	movw	r10, r18
    3a9c:	6a 01       	movw	r12, r20
    3a9e:	ae 18       	sub	r10, r14
    3aa0:	bf 08       	sbc	r11, r15
    3aa2:	c0 0a       	sbc	r12, r16
    3aa4:	d1 0a       	sbc	r13, r17
    3aa6:	03 c0       	rjmp	.+6      	; 0x3aae <GetESR+0x40e>
   } else {
      sumvolt[1] = 0;
    3aa8:	aa 24       	eor	r10, r10
    3aaa:	bb 24       	eor	r11, r11
    3aac:	65 01       	movw	r12, r10
   }
   sumvolt[2] = (sumvolt[2] * 980) / 1000;	// scale down the voltage without current with 98.0%
    3aae:	6d 81       	ldd	r22, Y+5	; 0x05
    3ab0:	7e 81       	ldd	r23, Y+6	; 0x06
    3ab2:	8f 81       	ldd	r24, Y+7	; 0x07
    3ab4:	98 85       	ldd	r25, Y+8	; 0x08
    3ab6:	24 ed       	ldi	r18, 0xD4	; 212
    3ab8:	33 e0       	ldi	r19, 0x03	; 3
    3aba:	40 e0       	ldi	r20, 0x00	; 0
    3abc:	50 e0       	ldi	r21, 0x00	; 0
    3abe:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    3ac2:	28 ee       	ldi	r18, 0xE8	; 232
    3ac4:	33 e0       	ldi	r19, 0x03	; 3
    3ac6:	40 e0       	ldi	r20, 0x00	; 0
    3ac8:	50 e0       	ldi	r21, 0x00	; 0
    3aca:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
    3ace:	39 01       	movw	r6, r18
    3ad0:	4a 01       	movw	r8, r20
    3ad2:	b2 01       	movw	r22, r4
    3ad4:	60 59       	subi	r22, 0x90	; 144
    3ad6:	7a 41       	sbci	r23, 0x1A	; 26
   jj = 0;
   if (sumvolt[1] >= sumvolt[2]) {
    3ad8:	a2 16       	cp	r10, r18
    3ada:	b3 06       	cpc	r11, r19
    3adc:	c4 06       	cpc	r12, r20
    3ade:	d5 06       	cpc	r13, r21
    3ae0:	08 f1       	brcs	.+66     	; 0x3b24 <GetESR+0x484>
      // mean voltage at the capacitor is higher with current
      // sumvolt[0] is the sum of voltages at LowPin, caused by output resistance of Port
      // (RR680MI - R_L_VAL) is the port output resistance in 0.1 Ohm units.
      // we scale up the difference voltage with 10 to get 0.01 Ohm units of ESR
      cap.esr = ((sumvolt[1] - sumvolt[2]) * 10 * (unsigned long)(RR680MI - R_L_VAL)) / sumvolt[0];
    3ae2:	80 e0       	ldi	r24, 0x00	; 0
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	2a e0       	ldi	r18, 0x0A	; 10
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	40 e0       	ldi	r20, 0x00	; 0
    3aec:	50 e0       	ldi	r21, 0x00	; 0
    3aee:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    3af2:	a6 01       	movw	r20, r12
    3af4:	95 01       	movw	r18, r10
    3af6:	26 19       	sub	r18, r6
    3af8:	37 09       	sbc	r19, r7
    3afa:	48 09       	sbc	r20, r8
    3afc:	59 09       	sbc	r21, r9
    3afe:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    3b02:	a8 01       	movw	r20, r16
    3b04:	97 01       	movw	r18, r14
    3b06:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
    3b0a:	30 93 65 01 	sts	0x0165, r19
    3b0e:	20 93 64 01 	sts	0x0164, r18
      DisplayValue(cap.esr,-2,LCD_CHAR_OMEGA,2);
    3b12:	b9 01       	movw	r22, r18
    3b14:	80 e0       	ldi	r24, 0x00	; 0
    3b16:	90 e0       	ldi	r25, 0x00	; 0
    3b18:	4e ef       	ldi	r20, 0xFE	; 254
    3b1a:	24 ef       	ldi	r18, 0xF4	; 244
    3b1c:	02 e0       	ldi	r16, 0x02	; 2
    3b1e:	0e 94 bf 02 	call	0x57e	; 0x57e <DisplayValue>
    3b22:	25 c0       	rjmp	.+74     	; 0x3b6e <GetESR+0x4ce>
   } else {
      jj = ((sumvolt[2] - sumvolt[1]) * 10 * (unsigned long)(RR680MI - R_L_VAL)) / sumvolt[0];
    3b24:	80 e0       	ldi	r24, 0x00	; 0
    3b26:	90 e0       	ldi	r25, 0x00	; 0
    3b28:	2a e0       	ldi	r18, 0x0A	; 10
    3b2a:	30 e0       	ldi	r19, 0x00	; 0
    3b2c:	40 e0       	ldi	r20, 0x00	; 0
    3b2e:	50 e0       	ldi	r21, 0x00	; 0
    3b30:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    3b34:	a4 01       	movw	r20, r8
    3b36:	93 01       	movw	r18, r6
    3b38:	2a 19       	sub	r18, r10
    3b3a:	3b 09       	sbc	r19, r11
    3b3c:	4c 09       	sbc	r20, r12
    3b3e:	5d 09       	sbc	r21, r13
    3b40:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    3b44:	a8 01       	movw	r20, r16
    3b46:	97 01       	movw	r18, r14
    3b48:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__udivmodsi4>
    3b4c:	12 2f       	mov	r17, r18
      lcd_data('0');
    3b4e:	80 e3       	ldi	r24, 0x30	; 48
    3b50:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
      if ((jj < 100) && (jj > 0)) {
    3b54:	81 2f       	mov	r24, r17
    3b56:	81 50       	subi	r24, 0x01	; 1
    3b58:	83 36       	cpi	r24, 0x63	; 99
    3b5a:	48 f4       	brcc	.+18     	; 0x3b6e <GetESR+0x4ce>
         lcd_data('?');			// mark ESR zero correction
    3b5c:	8f e3       	ldi	r24, 0x3F	; 63
    3b5e:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_data>
         esr0 -= jj;			// correct ESR_ZERO by negative resistance
    3b62:	62 2d       	mov	r22, r2
    3b64:	61 1b       	sub	r22, r17
         eeprom_write_byte((uint8_t *)(&EE_ESR_ZERO), (int8_t)esr0);       // fix new zero offset 
    3b66:	80 ec       	ldi	r24, 0xC0	; 192
    3b68:	91 e0       	ldi	r25, 0x01	; 1
    3b6a:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <__eewr_byte_m168>
//   lcd_line3();
//   DisplayValue(jj,0,' ',4);	// correction for ESR_ZERO
//   DisplayValue(1000+esr0,0,' ',4);	// new ESR_ZERO
#endif
  return;
}
    3b6e:	60 96       	adiw	r28, 0x10	; 16
    3b70:	0f b6       	in	r0, 0x3f	; 63
    3b72:	f8 94       	cli
    3b74:	de bf       	out	0x3e, r29	; 62
    3b76:	0f be       	out	0x3f, r0	; 63
    3b78:	cd bf       	out	0x3d, r28	; 61
    3b7a:	cf 91       	pop	r28
    3b7c:	df 91       	pop	r29
    3b7e:	1f 91       	pop	r17
    3b80:	0f 91       	pop	r16
    3b82:	ff 90       	pop	r15
    3b84:	ef 90       	pop	r14
    3b86:	df 90       	pop	r13
    3b88:	cf 90       	pop	r12
    3b8a:	bf 90       	pop	r11
    3b8c:	af 90       	pop	r10
    3b8e:	9f 90       	pop	r9
    3b90:	8f 90       	pop	r8
    3b92:	7f 90       	pop	r7
    3b94:	6f 90       	pop	r6
    3b96:	5f 90       	pop	r5
    3b98:	4f 90       	pop	r4
    3b9a:	3f 90       	pop	r3
    3b9c:	2f 90       	pop	r2
    3b9e:	08 95       	ret

00003ba0 <__mulsi3>:
    3ba0:	62 9f       	mul	r22, r18
    3ba2:	d0 01       	movw	r26, r0
    3ba4:	73 9f       	mul	r23, r19
    3ba6:	f0 01       	movw	r30, r0
    3ba8:	82 9f       	mul	r24, r18
    3baa:	e0 0d       	add	r30, r0
    3bac:	f1 1d       	adc	r31, r1
    3bae:	64 9f       	mul	r22, r20
    3bb0:	e0 0d       	add	r30, r0
    3bb2:	f1 1d       	adc	r31, r1
    3bb4:	92 9f       	mul	r25, r18
    3bb6:	f0 0d       	add	r31, r0
    3bb8:	83 9f       	mul	r24, r19
    3bba:	f0 0d       	add	r31, r0
    3bbc:	74 9f       	mul	r23, r20
    3bbe:	f0 0d       	add	r31, r0
    3bc0:	65 9f       	mul	r22, r21
    3bc2:	f0 0d       	add	r31, r0
    3bc4:	99 27       	eor	r25, r25
    3bc6:	72 9f       	mul	r23, r18
    3bc8:	b0 0d       	add	r27, r0
    3bca:	e1 1d       	adc	r30, r1
    3bcc:	f9 1f       	adc	r31, r25
    3bce:	63 9f       	mul	r22, r19
    3bd0:	b0 0d       	add	r27, r0
    3bd2:	e1 1d       	adc	r30, r1
    3bd4:	f9 1f       	adc	r31, r25
    3bd6:	bd 01       	movw	r22, r26
    3bd8:	cf 01       	movw	r24, r30
    3bda:	11 24       	eor	r1, r1
    3bdc:	08 95       	ret

00003bde <__udivmodqi4>:
    3bde:	99 1b       	sub	r25, r25
    3be0:	79 e0       	ldi	r23, 0x09	; 9
    3be2:	04 c0       	rjmp	.+8      	; 0x3bec <__udivmodqi4_ep>

00003be4 <__udivmodqi4_loop>:
    3be4:	99 1f       	adc	r25, r25
    3be6:	96 17       	cp	r25, r22
    3be8:	08 f0       	brcs	.+2      	; 0x3bec <__udivmodqi4_ep>
    3bea:	96 1b       	sub	r25, r22

00003bec <__udivmodqi4_ep>:
    3bec:	88 1f       	adc	r24, r24
    3bee:	7a 95       	dec	r23
    3bf0:	c9 f7       	brne	.-14     	; 0x3be4 <__udivmodqi4_loop>
    3bf2:	80 95       	com	r24
    3bf4:	08 95       	ret

00003bf6 <__udivmodhi4>:
    3bf6:	aa 1b       	sub	r26, r26
    3bf8:	bb 1b       	sub	r27, r27
    3bfa:	51 e1       	ldi	r21, 0x11	; 17
    3bfc:	07 c0       	rjmp	.+14     	; 0x3c0c <__udivmodhi4_ep>

00003bfe <__udivmodhi4_loop>:
    3bfe:	aa 1f       	adc	r26, r26
    3c00:	bb 1f       	adc	r27, r27
    3c02:	a6 17       	cp	r26, r22
    3c04:	b7 07       	cpc	r27, r23
    3c06:	10 f0       	brcs	.+4      	; 0x3c0c <__udivmodhi4_ep>
    3c08:	a6 1b       	sub	r26, r22
    3c0a:	b7 0b       	sbc	r27, r23

00003c0c <__udivmodhi4_ep>:
    3c0c:	88 1f       	adc	r24, r24
    3c0e:	99 1f       	adc	r25, r25
    3c10:	5a 95       	dec	r21
    3c12:	a9 f7       	brne	.-22     	; 0x3bfe <__udivmodhi4_loop>
    3c14:	80 95       	com	r24
    3c16:	90 95       	com	r25
    3c18:	bc 01       	movw	r22, r24
    3c1a:	cd 01       	movw	r24, r26
    3c1c:	08 95       	ret

00003c1e <__udivmodsi4>:
    3c1e:	a1 e2       	ldi	r26, 0x21	; 33
    3c20:	1a 2e       	mov	r1, r26
    3c22:	aa 1b       	sub	r26, r26
    3c24:	bb 1b       	sub	r27, r27
    3c26:	fd 01       	movw	r30, r26
    3c28:	0d c0       	rjmp	.+26     	; 0x3c44 <__udivmodsi4_ep>

00003c2a <__udivmodsi4_loop>:
    3c2a:	aa 1f       	adc	r26, r26
    3c2c:	bb 1f       	adc	r27, r27
    3c2e:	ee 1f       	adc	r30, r30
    3c30:	ff 1f       	adc	r31, r31
    3c32:	a2 17       	cp	r26, r18
    3c34:	b3 07       	cpc	r27, r19
    3c36:	e4 07       	cpc	r30, r20
    3c38:	f5 07       	cpc	r31, r21
    3c3a:	20 f0       	brcs	.+8      	; 0x3c44 <__udivmodsi4_ep>
    3c3c:	a2 1b       	sub	r26, r18
    3c3e:	b3 0b       	sbc	r27, r19
    3c40:	e4 0b       	sbc	r30, r20
    3c42:	f5 0b       	sbc	r31, r21

00003c44 <__udivmodsi4_ep>:
    3c44:	66 1f       	adc	r22, r22
    3c46:	77 1f       	adc	r23, r23
    3c48:	88 1f       	adc	r24, r24
    3c4a:	99 1f       	adc	r25, r25
    3c4c:	1a 94       	dec	r1
    3c4e:	69 f7       	brne	.-38     	; 0x3c2a <__udivmodsi4_loop>
    3c50:	60 95       	com	r22
    3c52:	70 95       	com	r23
    3c54:	80 95       	com	r24
    3c56:	90 95       	com	r25
    3c58:	9b 01       	movw	r18, r22
    3c5a:	ac 01       	movw	r20, r24
    3c5c:	bd 01       	movw	r22, r26
    3c5e:	cf 01       	movw	r24, r30
    3c60:	08 95       	ret

00003c62 <__divmodsi4>:
    3c62:	97 fb       	bst	r25, 7
    3c64:	09 2e       	mov	r0, r25
    3c66:	05 26       	eor	r0, r21
    3c68:	0e d0       	rcall	.+28     	; 0x3c86 <__divmodsi4_neg1>
    3c6a:	57 fd       	sbrc	r21, 7
    3c6c:	04 d0       	rcall	.+8      	; 0x3c76 <__divmodsi4_neg2>
    3c6e:	d7 df       	rcall	.-82     	; 0x3c1e <__udivmodsi4>
    3c70:	0a d0       	rcall	.+20     	; 0x3c86 <__divmodsi4_neg1>
    3c72:	00 1c       	adc	r0, r0
    3c74:	38 f4       	brcc	.+14     	; 0x3c84 <__divmodsi4_exit>

00003c76 <__divmodsi4_neg2>:
    3c76:	50 95       	com	r21
    3c78:	40 95       	com	r20
    3c7a:	30 95       	com	r19
    3c7c:	21 95       	neg	r18
    3c7e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c80:	4f 4f       	sbci	r20, 0xFF	; 255
    3c82:	5f 4f       	sbci	r21, 0xFF	; 255

00003c84 <__divmodsi4_exit>:
    3c84:	08 95       	ret

00003c86 <__divmodsi4_neg1>:
    3c86:	f6 f7       	brtc	.-4      	; 0x3c84 <__divmodsi4_exit>
    3c88:	90 95       	com	r25
    3c8a:	80 95       	com	r24
    3c8c:	70 95       	com	r23
    3c8e:	61 95       	neg	r22
    3c90:	7f 4f       	sbci	r23, 0xFF	; 255
    3c92:	8f 4f       	sbci	r24, 0xFF	; 255
    3c94:	9f 4f       	sbci	r25, 0xFF	; 255
    3c96:	08 95       	ret

00003c98 <itoa>:
    3c98:	fb 01       	movw	r30, r22
    3c9a:	9f 01       	movw	r18, r30
    3c9c:	e8 94       	clt
    3c9e:	42 30       	cpi	r20, 0x02	; 2
    3ca0:	c4 f0       	brlt	.+48     	; 0x3cd2 <itoa+0x3a>
    3ca2:	45 32       	cpi	r20, 0x25	; 37
    3ca4:	b4 f4       	brge	.+44     	; 0x3cd2 <itoa+0x3a>
    3ca6:	4a 30       	cpi	r20, 0x0A	; 10
    3ca8:	29 f4       	brne	.+10     	; 0x3cb4 <itoa+0x1c>
    3caa:	97 fb       	bst	r25, 7
    3cac:	1e f4       	brtc	.+6      	; 0x3cb4 <itoa+0x1c>
    3cae:	90 95       	com	r25
    3cb0:	81 95       	neg	r24
    3cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    3cb4:	64 2f       	mov	r22, r20
    3cb6:	77 27       	eor	r23, r23
    3cb8:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <__udivmodhi4>
    3cbc:	80 5d       	subi	r24, 0xD0	; 208
    3cbe:	8a 33       	cpi	r24, 0x3A	; 58
    3cc0:	0c f0       	brlt	.+2      	; 0x3cc4 <itoa+0x2c>
    3cc2:	89 5d       	subi	r24, 0xD9	; 217
    3cc4:	81 93       	st	Z+, r24
    3cc6:	cb 01       	movw	r24, r22
    3cc8:	00 97       	sbiw	r24, 0x00	; 0
    3cca:	a1 f7       	brne	.-24     	; 0x3cb4 <itoa+0x1c>
    3ccc:	16 f4       	brtc	.+4      	; 0x3cd2 <itoa+0x3a>
    3cce:	5d e2       	ldi	r21, 0x2D	; 45
    3cd0:	51 93       	st	Z+, r21
    3cd2:	10 82       	st	Z, r1
    3cd4:	c9 01       	movw	r24, r18
    3cd6:	0c 94 a4 1e 	jmp	0x3d48	; 0x3d48 <strrev>

00003cda <utoa>:
    3cda:	fb 01       	movw	r30, r22
    3cdc:	9f 01       	movw	r18, r30
    3cde:	42 30       	cpi	r20, 0x02	; 2
    3ce0:	74 f0       	brlt	.+28     	; 0x3cfe <utoa+0x24>
    3ce2:	45 32       	cpi	r20, 0x25	; 37
    3ce4:	64 f4       	brge	.+24     	; 0x3cfe <utoa+0x24>
    3ce6:	64 2f       	mov	r22, r20
    3ce8:	77 27       	eor	r23, r23
    3cea:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <__udivmodhi4>
    3cee:	80 5d       	subi	r24, 0xD0	; 208
    3cf0:	8a 33       	cpi	r24, 0x3A	; 58
    3cf2:	0c f0       	brlt	.+2      	; 0x3cf6 <utoa+0x1c>
    3cf4:	89 5d       	subi	r24, 0xD9	; 217
    3cf6:	81 93       	st	Z+, r24
    3cf8:	cb 01       	movw	r24, r22
    3cfa:	00 97       	sbiw	r24, 0x00	; 0
    3cfc:	a1 f7       	brne	.-24     	; 0x3ce6 <utoa+0xc>
    3cfe:	10 82       	st	Z, r1
    3d00:	c9 01       	movw	r24, r18
    3d02:	0c 94 a4 1e 	jmp	0x3d48	; 0x3d48 <strrev>

00003d06 <__eerd_byte_m168>:
    3d06:	f9 99       	sbic	0x1f, 1	; 31
    3d08:	fe cf       	rjmp	.-4      	; 0x3d06 <__eerd_byte_m168>
    3d0a:	92 bd       	out	0x22, r25	; 34
    3d0c:	81 bd       	out	0x21, r24	; 33
    3d0e:	f8 9a       	sbi	0x1f, 0	; 31
    3d10:	99 27       	eor	r25, r25
    3d12:	80 b5       	in	r24, 0x20	; 32
    3d14:	08 95       	ret

00003d16 <__eerd_word_m168>:
    3d16:	a8 e1       	ldi	r26, 0x18	; 24
    3d18:	b0 e0       	ldi	r27, 0x00	; 0
    3d1a:	42 e0       	ldi	r20, 0x02	; 2
    3d1c:	50 e0       	ldi	r21, 0x00	; 0
    3d1e:	0c 94 b6 1e 	jmp	0x3d6c	; 0x3d6c <__eerd_blraw_m168>

00003d22 <__eewr_byte_m168>:
    3d22:	26 2f       	mov	r18, r22

00003d24 <__eewr_r18_m168>:
    3d24:	f9 99       	sbic	0x1f, 1	; 31
    3d26:	fe cf       	rjmp	.-4      	; 0x3d24 <__eewr_r18_m168>
    3d28:	1f ba       	out	0x1f, r1	; 31
    3d2a:	92 bd       	out	0x22, r25	; 34
    3d2c:	81 bd       	out	0x21, r24	; 33
    3d2e:	20 bd       	out	0x20, r18	; 32
    3d30:	0f b6       	in	r0, 0x3f	; 63
    3d32:	f8 94       	cli
    3d34:	fa 9a       	sbi	0x1f, 2	; 31
    3d36:	f9 9a       	sbi	0x1f, 1	; 31
    3d38:	0f be       	out	0x3f, r0	; 63
    3d3a:	01 96       	adiw	r24, 0x01	; 1
    3d3c:	08 95       	ret

00003d3e <__eewr_word_m168>:
    3d3e:	0e 94 91 1e 	call	0x3d22	; 0x3d22 <__eewr_byte_m168>
    3d42:	27 2f       	mov	r18, r23
    3d44:	0c 94 92 1e 	jmp	0x3d24	; 0x3d24 <__eewr_r18_m168>

00003d48 <strrev>:
    3d48:	dc 01       	movw	r26, r24
    3d4a:	fc 01       	movw	r30, r24
    3d4c:	67 2f       	mov	r22, r23
    3d4e:	71 91       	ld	r23, Z+
    3d50:	77 23       	and	r23, r23
    3d52:	e1 f7       	brne	.-8      	; 0x3d4c <strrev+0x4>
    3d54:	32 97       	sbiw	r30, 0x02	; 2
    3d56:	04 c0       	rjmp	.+8      	; 0x3d60 <strrev+0x18>
    3d58:	7c 91       	ld	r23, X
    3d5a:	6d 93       	st	X+, r22
    3d5c:	70 83       	st	Z, r23
    3d5e:	62 91       	ld	r22, -Z
    3d60:	ae 17       	cp	r26, r30
    3d62:	bf 07       	cpc	r27, r31
    3d64:	c8 f3       	brcs	.-14     	; 0x3d58 <strrev+0x10>
    3d66:	08 95       	ret

00003d68 <__eerd_block_m168>:
    3d68:	dc 01       	movw	r26, r24
    3d6a:	cb 01       	movw	r24, r22

00003d6c <__eerd_blraw_m168>:
    3d6c:	fc 01       	movw	r30, r24
    3d6e:	f9 99       	sbic	0x1f, 1	; 31
    3d70:	fe cf       	rjmp	.-4      	; 0x3d6e <__eerd_blraw_m168+0x2>
    3d72:	06 c0       	rjmp	.+12     	; 0x3d80 <__eerd_blraw_m168+0x14>
    3d74:	f2 bd       	out	0x22, r31	; 34
    3d76:	e1 bd       	out	0x21, r30	; 33
    3d78:	f8 9a       	sbi	0x1f, 0	; 31
    3d7a:	31 96       	adiw	r30, 0x01	; 1
    3d7c:	00 b4       	in	r0, 0x20	; 32
    3d7e:	0d 92       	st	X+, r0
    3d80:	41 50       	subi	r20, 0x01	; 1
    3d82:	50 40       	sbci	r21, 0x00	; 0
    3d84:	b8 f7       	brcc	.-18     	; 0x3d74 <__eerd_blraw_m168+0x8>
    3d86:	08 95       	ret

00003d88 <_exit>:
    3d88:	f8 94       	cli

00003d8a <__stop_program>:
    3d8a:	ff cf       	rjmp	.-2      	; 0x3d8a <__stop_program>
