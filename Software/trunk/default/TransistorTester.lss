
TransistorTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00002d52  00002e06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d52  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006c  00800102  00800102  00002e08  2**0
                  ALLOC
  3 .eeprom       000001be  00810000  00810000  00002e08  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         00000dbc  00000000  00000000  00002fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001d2  00000000  00000000  00003d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000040  00000000  00000000  00003f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000005d6  00000000  00000000  00003f96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001a2e  00000000  00000000  0000456c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000364  00000000  00000000  00005f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000027fc  00000000  00000000  000062fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000001c0  00000000  00000000  00008afc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000006e9  00000000  00000000  00008cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000f07  00000000  00000000  000093a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00000090  00000000  00000000  0000a2ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

00000068 <SELFTEST>:
      68:	53 65 6c 66 74 65 73 74 20 6d 6f 64 65 2e 2e 00     Selftest mode...

00000078 <RELPROBE>:
      78:	69 73 6f 6c 61 74 65 20 70 72 6f 62 65 00           isolate probe.

00000086 <URefT>:
      86:	52 65 66 3d 00                                      Ref=.

0000008b <RHfakt>:
      8b:	52 48 66 3d 00                                      RHf=.

00000090 <RH1L>:
      90:	52 48 2d 00                                         RH-.

00000094 <RH1H>:
      94:	52 48 2b 00                                         RH+.

00000098 <RLRL>:
      98:	2b 52 4c 2d 20 31 32 20 31 33 20 32 33 00           +RL- 12 13 23.

000000a6 <RHRH>:
      a6:	2b 52 48 2d 20 31 32 20 31 33 20 32 33 00           +RH- 12 13 23.

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d4 e0       	ldi	r29, 0x04	; 4
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e2 e5       	ldi	r30, 0x52	; 82
      c8:	fd e2       	ldi	r31, 0x2D	; 45
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	a2 30       	cpi	r26, 0x02	; 2
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	11 e0       	ldi	r17, 0x01	; 1
      d8:	a2 e0       	ldi	r26, 0x02	; 2
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	ae 36       	cpi	r26, 0x6E	; 110
      e2:	b1 07       	cpc	r27, r17
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 47 10 	call	0x208e	; 0x208e <main>
      ea:	0c 94 a7 16 	jmp	0x2d4e	; 0x2d4e <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <lcd_enable>:
  LCD_PORT &= 0xF0;
}

// genertes the Enable-Puls
void lcd_enable(void) {
   LCD_PORT |= (1<<LCD_EN1);
      f2:	5d 9a       	sbi	0x0b, 5	; 11
   wait10us();			// short break 
      f4:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <wait10us>
   // if problems occure, set the wait time to the value of datasheet of your display
   // http://www.mikrocontroller.net/topic/80900
   LCD_PORT &= ~(1<<LCD_EN1);
      f8:	5d 98       	cbi	0x0b, 5	; 11
}
      fa:	08 95       	ret

000000fc <lcd_send>:
	}
#endif
}

//output to  LCD; 4-Bit-Modus
void lcd_send(unsigned char data) {
      fc:	df 93       	push	r29
      fe:	cf 93       	push	r28
     100:	0f 92       	push	r0
     102:	cd b7       	in	r28, 0x3d	; 61
     104:	de b7       	in	r29, 0x3e	; 62
   // set upper Nibble
  LCD_PORT = (LCD_PORT & 0xF0) | ((data >> 4) & 0x0F);
     106:	2b b1       	in	r18, 0x0b	; 11
     108:	98 2f       	mov	r25, r24
     10a:	92 95       	swap	r25
     10c:	9f 70       	andi	r25, 0x0F	; 15
     10e:	20 7f       	andi	r18, 0xF0	; 240
     110:	92 2b       	or	r25, r18
     112:	9b b9       	out	0x0b, r25	; 11
#if F_CPU < 2000000
  _delay_us(5);
#else
  wait5us();
     114:	89 83       	std	Y+1, r24	; 0x01
     116:	0e 94 38 15 	call	0x2a70	; 0x2a70 <wait5us>
#endif
  lcd_enable();
     11a:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_enable>
   // set lower Nibble 
  LCD_PORT = (LCD_PORT & 0xF0) | (data & 0x0F);
     11e:	9b b1       	in	r25, 0x0b	; 11
     120:	89 81       	ldd	r24, Y+1	; 0x01
     122:	8f 70       	andi	r24, 0x0F	; 15
     124:	90 7f       	andi	r25, 0xF0	; 240
     126:	89 2b       	or	r24, r25
     128:	8b b9       	out	0x0b, r24	; 11
#if F_CPU < 2000000
  _delay_us(5);
#else
  wait5us();
     12a:	0e 94 38 15 	call	0x2a70	; 0x2a70 <wait5us>
#endif
  lcd_enable();
     12e:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_enable>
  wait50us();
     132:	0e 94 33 15 	call	0x2a66	; 0x2a66 <wait50us>
  LCD_PORT &= 0xF0;
     136:	8b b1       	in	r24, 0x0b	; 11
     138:	80 7f       	andi	r24, 0xF0	; 240
     13a:	8b b9       	out	0x0b, r24	; 11
}
     13c:	0f 90       	pop	r0
     13e:	cf 91       	pop	r28
     140:	df 91       	pop	r29
     142:	08 95       	ret

00000144 <lcd_data>:
void lcd_space(void) {
   lcd_data(' ');
}

// sends data byte to the LCD 
void lcd_data(unsigned char temp1) {
     144:	1f 93       	push	r17
     146:	18 2f       	mov	r17, r24
 LCD_PORT |= (1<<LCD_RS);        // set RS to 1 
     148:	5c 9a       	sbi	0x0b, 4	; 11
 lcd_send(temp1);
     14a:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_send>
#ifdef WITH_UART
 switch(temp1) {
     14e:	18 30       	cpi	r17, 0x08	; 8
     150:	48 f4       	brcc	.+18     	; 0x164 <lcd_data+0x20>
     152:	16 30       	cpi	r17, 0x06	; 6
     154:	d0 f4       	brcc	.+52     	; 0x18a <lcd_data+0x46>
     156:	12 30       	cpi	r17, 0x02	; 2
     158:	71 f0       	breq	.+28     	; 0x176 <lcd_data+0x32>
     15a:	13 30       	cpi	r17, 0x03	; 3
     15c:	89 f0       	breq	.+34     	; 0x180 <lcd_data+0x3c>
     15e:	11 30       	cpi	r17, 0x01	; 1
     160:	d1 f4       	brne	.+52     	; 0x196 <lcd_data+0x52>
     162:	07 c0       	rjmp	.+14     	; 0x172 <lcd_data+0x2e>
     164:	14 3e       	cpi	r17, 0xE4	; 228
     166:	a9 f0       	breq	.+42     	; 0x192 <lcd_data+0x4e>
     168:	14 3f       	cpi	r17, 0xF4	; 244
     16a:	c1 f0       	breq	.+48     	; 0x19c <lcd_data+0x58>
     16c:	11 3e       	cpi	r17, 0xE1	; 225
     16e:	99 f4       	brne	.+38     	; 0x196 <lcd_data+0x52>
     170:	0e c0       	rjmp	.+28     	; 0x18e <lcd_data+0x4a>
    case LCD_CHAR_DIODE1:
    	uart_putc('>');
     172:	8e e3       	ldi	r24, 0x3E	; 62
     174:	06 c0       	rjmp	.+12     	; 0x182 <lcd_data+0x3e>
    	uart_putc('|');
    	break;
    case LCD_CHAR_DIODE2:
    	uart_putc('|');
     176:	8c e7       	ldi	r24, 0x7C	; 124
     178:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <uart_putc>
    	uart_putc('<');
     17c:	8c e3       	ldi	r24, 0x3C	; 60
     17e:	0c c0       	rjmp	.+24     	; 0x198 <lcd_data+0x54>
    	break;
    case LCD_CHAR_CAP:
    	uart_putc('|');
     180:	8c e7       	ldi	r24, 0x7C	; 124
     182:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <uart_putc>
    	uart_putc('|');
     186:	8c e7       	ldi	r24, 0x7C	; 124
     188:	07 c0       	rjmp	.+14     	; 0x198 <lcd_data+0x54>
    	break;
    case LCD_CHAR_RESIS1:
    case LCD_CHAR_RESIS2:
    	uart_putc('R');
     18a:	82 e5       	ldi	r24, 0x52	; 82
     18c:	05 c0       	rjmp	.+10     	; 0x198 <lcd_data+0x54>
    	break;
    case 225:	//ä
    	uart_putc('ä');
     18e:	84 ee       	ldi	r24, 0xE4	; 228
     190:	03 c0       	rjmp	.+6      	; 0x198 <lcd_data+0x54>
    	break;
    case 228:	//µ
    	uart_putc('µ');
     192:	85 eb       	ldi	r24, 0xB5	; 181
     194:	01 c0       	rjmp	.+2      	; 0x198 <lcd_data+0x54>
    	break;
    case 244:	//Omega
    	break;
    default:
    	uart_putc(temp1);
     196:	81 2f       	mov	r24, r17
     198:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <uart_putc>
 }
#endif
}
     19c:	1f 91       	pop	r17
     19e:	08 95       	ret

000001a0 <lcd_space>:
   lcd_data(temp + '1');
}

// send space character to LCD
void lcd_space(void) {
   lcd_data(' ');
     1a0:	80 e2       	ldi	r24, 0x20	; 32
     1a2:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
}
     1a6:	08 95       	ret

000001a8 <lcd_testpin>:
 

// sends numeric character (Pin Number) to the LCD 
// from binary 0 we send ASCII 1 ....
void lcd_testpin(unsigned char temp) {
   lcd_data(temp + '1');
     1a8:	8f 5c       	subi	r24, 0xCF	; 207
     1aa:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
}
     1ae:	08 95       	ret

000001b0 <uart_newline>:
}


#ifdef WITH_UART
void uart_newline(void) {
   uart_putc('\r');
     1b0:	8d e0       	ldi	r24, 0x0D	; 13
     1b2:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <uart_putc>
   uart_putc('\n');
     1b6:	8a e0       	ldi	r24, 0x0A	; 10
     1b8:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <uart_putc>
}
     1bc:	08 95       	ret

000001be <lcd_command>:
#endif
}
 
// sends a command to the LCD
 
void lcd_command(unsigned char temp1) {
     1be:	1f 93       	push	r17
     1c0:	18 2f       	mov	r17, r24
	LCD_PORT &= ~(1<<LCD_RS);        // set RS to 0 
     1c2:	5c 98       	cbi	0x0b, 4	; 11
	lcd_send(temp1);
     1c4:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_send>
#ifdef WITH_UART
	if((temp1 == 0x80) || (temp1 == 0xC0)) {
     1c8:	10 38       	cpi	r17, 0x80	; 128
     1ca:	11 f0       	breq	.+4      	; 0x1d0 <lcd_command+0x12>
     1cc:	10 3c       	cpi	r17, 0xC0	; 192
     1ce:	11 f4       	brne	.+4      	; 0x1d4 <lcd_command+0x16>
		uart_newline();
     1d0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <uart_newline>
	}
#endif
}
     1d4:	1f 91       	pop	r17
     1d6:	08 95       	ret

000001d8 <lcd_clear>:
}
 
// send the command to clear the display 
 
void lcd_clear(void) {
   lcd_command(CLEAR_DISPLAY);
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
   wait5ms();
     1de:	0e 94 29 15 	call	0x2a52	; 0x2a52 <wait5ms>
#ifdef WITH_UART
   uart_newline();
     1e2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <uart_newline>
#endif
}
     1e6:	08 95       	ret

000001e8 <lcd_init>:
 
// Initialise: 
// Mustt be called first .
 
void lcd_init(void) {
   LCD_DDR = LCD_DDR | 0x0F | (1<<LCD_RS) | (1<<LCD_EN1);   // switch Port to output
     1e8:	8a b1       	in	r24, 0x0a	; 10
     1ea:	8f 63       	ori	r24, 0x3F	; 63
     1ec:	8a b9       	out	0x0a, r24	; 10
   // to initialise, send 3 times
          wait30ms();
     1ee:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <wait30ms>
   LCD_PORT = (LCD_PORT & 0xF0 & ~(1<<LCD_RS)) | 0x03;
     1f2:	8b b1       	in	r24, 0x0b	; 11
     1f4:	80 7e       	andi	r24, 0xE0	; 224
     1f6:	83 60       	ori	r24, 0x03	; 3
     1f8:	8b b9       	out	0x0b, r24	; 11
   lcd_enable();
     1fa:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_enable>

   wait5ms();
     1fe:	0e 94 29 15 	call	0x2a52	; 0x2a52 <wait5ms>
   lcd_enable();
     202:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_enable>

   wait1ms();
     206:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <wait1ms>
   lcd_enable();
     20a:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_enable>
   wait1ms();
     20e:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <wait1ms>
   LCD_PORT = (LCD_PORT & 0xF0 & ~(1<<LCD_RS)) | 0x02;
     212:	8b b1       	in	r24, 0x0b	; 11
     214:	80 7e       	andi	r24, 0xE0	; 224
     216:	82 60       	ori	r24, 0x02	; 2
     218:	8b b9       	out	0x0b, r24	; 11
   wait1ms();
     21a:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <wait1ms>
   lcd_enable();
     21e:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_enable>
   wait1ms();
     222:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <wait1ms>

   // 4Bit / 2 rows / 5x7
   lcd_command(CMD_SetIFOptions | 0x08);
     226:	88 e2       	ldi	r24, 0x28	; 40
     228:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>

   // Display on / Cursor off / no Blinking
   lcd_command(CMD_SetDisplayAndCursor | 0x04);
     22c:	8c e0       	ldi	r24, 0x0C	; 12
     22e:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>

   // increment / no Scroll    
   lcd_command(CMD_SetEntryMode | 0x02);	
     232:	86 e0       	ldi	r24, 0x06	; 6
     234:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
   lcd_clear();
     238:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_clear>
}
     23c:	08 95       	ret

0000023e <lcd_string>:
#endif
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
     23e:	ef 92       	push	r14
     240:	ff 92       	push	r15
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	e8 2e       	mov	r14, r24
     248:	e7 01       	movw	r28, r14
     24a:	7e 01       	movw	r14, r28
     24c:	f9 2e       	mov	r15, r25
     24e:	e7 01       	movw	r28, r14
    while(*data) {
     250:	02 c0       	rjmp	.+4      	; 0x256 <lcd_string+0x18>
        lcd_data(*data);
     252:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
    while(*data) {
     256:	89 91       	ld	r24, Y+
     258:	88 23       	and	r24, r24
     25a:	d9 f7       	brne	.-10     	; 0x252 <lcd_string+0x14>
        lcd_data(*data);
        data++;
    }
}
     25c:	df 91       	pop	r29
     25e:	cf 91       	pop	r28
     260:	ff 90       	pop	r15
     262:	ef 90       	pop	r14
     264:	08 95       	ret

00000266 <lcd_pgm_string>:

#ifdef AUTO_CAL
//Load string from PGM  and send to LCD 
void lcd_pgm_string(const unsigned char *data) {
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = pgm_read_byte(data);
     26c:	fe 01       	movw	r30, r28
     26e:	84 91       	lpm	r24, Z+
      if((cc==0) || (cc==128)) {
     270:	88 23       	and	r24, r24
     272:	31 f0       	breq	.+12     	; 0x280 <lcd_pgm_string+0x1a>
     274:	80 38       	cpi	r24, 0x80	; 128
     276:	21 f0       	breq	.+8      	; 0x280 <lcd_pgm_string+0x1a>
         return;
      }
      lcd_data(cc);
     278:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
      data++;
     27c:	21 96       	adiw	r28, 0x01	; 1
   }
     27e:	f6 cf       	rjmp	.-20     	; 0x26c <lcd_pgm_string+0x6>
}
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	08 95       	ret

00000286 <lcd_fix_string>:
#endif

//Load string from PGM or EEprom and send to LCD 
void lcd_fix_string(const unsigned char *data) {
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = MEM_read_byte(data);
     28c:	ce 01       	movw	r24, r28
     28e:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__eerd_byte_m168>
      if((cc==0) || (cc==128)) {
     292:	88 23       	and	r24, r24
     294:	31 f0       	breq	.+12     	; 0x2a2 <lcd_fix_string+0x1c>
     296:	80 38       	cpi	r24, 0x80	; 128
     298:	21 f0       	breq	.+8      	; 0x2a2 <lcd_fix_string+0x1c>
         return;
      }
      lcd_data(cc);
     29a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
      data++;
     29e:	21 96       	adiw	r28, 0x01	; 1
   }
     2a0:	f5 cf       	rjmp	.-22     	; 0x28c <lcd_fix_string+0x6>
}
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	08 95       	ret

000002a8 <lcd_fix_customchar>:

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	8c 01       	movw	r16, r24
     2b2:	c0 e0       	ldi	r28, 0x00	; 0
     2b4:	d0 e0       	ldi	r29, 0x00	; 0
    for(uint8_t i=0;i<8;i++) {
        lcd_data(MEM_read_byte(chardata));
     2b6:	c8 01       	movw	r24, r16
     2b8:	8c 0f       	add	r24, r28
     2ba:	9d 1f       	adc	r25, r29
     2bc:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__eerd_byte_m168>
     2c0:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
     2c4:	21 96       	adiw	r28, 0x01	; 1
   }
}

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
    for(uint8_t i=0;i<8;i++) {
     2c6:	c8 30       	cpi	r28, 0x08	; 8
     2c8:	d1 05       	cpc	r29, r1
     2ca:	a9 f7       	brne	.-22     	; 0x2b6 <lcd_fix_customchar+0xe>
        lcd_data(MEM_read_byte(chardata));
        chardata++;
    }
}
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	1f 91       	pop	r17
     2d2:	0f 91       	pop	r16
     2d4:	08 95       	ret

000002d6 <ChargePin10ms>:
#endif

//******************************************************************
#include "CheckPins.c"

void ChargePin10ms(uint8_t PinToCharge, uint8_t ChargeDirection) {
     2d6:	df 93       	push	r29
     2d8:	cf 93       	push	r28
     2da:	0f 92       	push	r0
     2dc:	cd b7       	in	r28, 0x3d	; 61
     2de:	de b7       	in	r29, 0x3e	; 62
   //Will be used by discharge of MOSFET Gates or to load big capacities.
   //Parameters:
   //PinToCharge: specifies the pin as mask for R-Port
   //ChargeDirection: 0 = switch to GND (N-Kanal-FET), 1= switch to VCC(P-Kanal-FET)

   if(ChargeDirection&1) {
     2e0:	60 ff       	sbrs	r22, 0
     2e2:	03 c0       	rjmp	.+6      	; 0x2ea <ChargePin10ms+0x14>
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
     2e4:	95 b1       	in	r25, 0x05	; 5
     2e6:	98 2b       	or	r25, r24
     2e8:	04 c0       	rjmp	.+8      	; 0x2f2 <ChargePin10ms+0x1c>
   } else {
      R_PORT &= ~PinToCharge; // or 0 (GND)
     2ea:	25 b1       	in	r18, 0x05	; 5
     2ec:	98 2f       	mov	r25, r24
     2ee:	90 95       	com	r25
     2f0:	92 23       	and	r25, r18
     2f2:	95 b9       	out	0x05, r25	; 5
   }
   R_DDR |= PinToCharge;		//switch Pin to output, across R to GND or VCC
     2f4:	94 b1       	in	r25, 0x04	; 4
     2f6:	98 2b       	or	r25, r24
     2f8:	94 b9       	out	0x04, r25	; 4
   wait10ms();
     2fa:	89 83       	std	Y+1, r24	; 0x01
     2fc:	0e 94 28 15 	call	0x2a50	; 0x2a50 <wait10ms>
   // switch back Input, no current
   R_DDR &= ~PinToCharge;	// switch back to input
     300:	94 b1       	in	r25, 0x04	; 4
     302:	89 81       	ldd	r24, Y+1	; 0x01
     304:	80 95       	com	r24
     306:	98 23       	and	r25, r24
     308:	94 b9       	out	0x04, r25	; 4
   R_PORT &= ~PinToCharge;	// no Pull up
     30a:	95 b1       	in	r25, 0x05	; 5
     30c:	98 23       	and	r25, r24
     30e:	95 b9       	out	0x05, r25	; 5
}
     310:	0f 90       	pop	r0
     312:	cf 91       	pop	r28
     314:	df 91       	pop	r29
     316:	08 95       	ret

00000318 <CheckPins>:
//******************************************************************
void CheckPins(uint8_t HighPin, uint8_t LowPin, uint8_t TristatePin)
  {
     318:	2f 92       	push	r2
     31a:	3f 92       	push	r3
     31c:	4f 92       	push	r4
     31e:	5f 92       	push	r5
     320:	6f 92       	push	r6
     322:	7f 92       	push	r7
     324:	8f 92       	push	r8
     326:	9f 92       	push	r9
     328:	af 92       	push	r10
     32a:	bf 92       	push	r11
     32c:	cf 92       	push	r12
     32e:	df 92       	push	r13
     330:	ef 92       	push	r14
     332:	ff 92       	push	r15
     334:	0f 93       	push	r16
     336:	1f 93       	push	r17
     338:	df 93       	push	r29
     33a:	cf 93       	push	r28
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
     340:	69 97       	sbiw	r28, 0x19	; 25
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	f8 94       	cli
     346:	de bf       	out	0x3e, r29	; 62
     348:	0f be       	out	0x3f, r0	; 63
     34a:	cd bf       	out	0x3d, r28	; 61
     34c:	18 2f       	mov	r17, r24
     34e:	06 2f       	mov	r16, r22
     350:	49 83       	std	Y+1, r20	; 0x01
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
     352:	a8 95       	wdr
#ifdef AUTO_CAL
  uint16_t resis680pl;
  uint16_t resis680mi;
  resis680pl = eeprom_read_word(&R680pl);
     354:	89 ea       	ldi	r24, 0xA9	; 169
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <__eerd_word_m168>
     35c:	9c 8b       	std	Y+20, r25	; 0x14
     35e:	8b 8b       	std	Y+19, r24	; 0x13
  resis680mi = eeprom_read_word(&R680mi);
     360:	8b ea       	ldi	r24, 0xAB	; 171
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <__eerd_word_m168>
     368:	9e 8b       	std	Y+22, r25	; 0x16
     36a:	8d 8b       	std	Y+21, r24	; 0x15
  #define RR680MI resis680mi
#else
  #define RR680PL (R_L_VAL + PIN_RP)
  #define RR680MI (R_L_VAL + PIN_RM)
#endif
  LoPinRL = MEM_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
     36c:	a0 2e       	mov	r10, r16
     36e:	bb 24       	eor	r11, r11
     370:	c5 01       	movw	r24, r10
     372:	8d 55       	subi	r24, 0x5D	; 93
     374:	9e 4f       	sbci	r25, 0xFE	; 254
     376:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__eerd_byte_m168>
     37a:	8c 83       	std	Y+4, r24	; 0x04
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
  TriPinRL = MEM_read_byte(&PinRLtab[TristatePin]);	// intruction for TristatePin R_L
     37c:	29 81       	ldd	r18, Y+1	; 0x01
     37e:	82 2f       	mov	r24, r18
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	8d 55       	subi	r24, 0x5D	; 93
     384:	9e 4f       	sbci	r25, 0xFE	; 254
     386:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__eerd_byte_m168>
     38a:	8a 83       	std	Y+2, r24	; 0x02
  TriPinRH = TriPinRL + TriPinRL;			// intruction for TristatePin R_H
     38c:	d8 2e       	mov	r13, r24
     38e:	dd 0c       	add	r13, r13
  HiPinRL = MEM_read_byte(&PinRLtab[HighPin]);		// intruction for HighPin R_L
     390:	e1 2e       	mov	r14, r17
     392:	ff 24       	eor	r15, r15
     394:	c7 01       	movw	r24, r14
     396:	8d 55       	subi	r24, 0x5D	; 93
     398:	9e 4f       	sbci	r25, 0xFE	; 254
     39a:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__eerd_byte_m168>
     39e:	c8 2e       	mov	r12, r24
  HiPinRH = HiPinRL + HiPinRL;				// intruction for HighPin R_H
     3a0:	38 2f       	mov	r19, r24
     3a2:	33 0f       	add	r19, r19
     3a4:	3c 87       	std	Y+12, r19	; 0x0c

  HiADCp = MEM_read_byte(&PinADCtab[HighPin]);		// intruction for ADC High-Pin 
     3a6:	c7 01       	movw	r24, r14
     3a8:	8a 55       	subi	r24, 0x5A	; 90
     3aa:	9e 4f       	sbci	r25, 0xFE	; 254
     3ac:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__eerd_byte_m168>
     3b0:	8b 83       	std	Y+3, r24	; 0x03
  LoADCp = MEM_read_byte(&PinADCtab[LowPin]);		// intruction for ADC Low-Pin
     3b2:	c5 01       	movw	r24, r10
     3b4:	8a 55       	subi	r24, 0x5A	; 90
     3b6:	9e 4f       	sbci	r25, 0xFE	; 254
     3b8:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__eerd_byte_m168>
  HiADCm = HiADCp | TXD_MSK;
     3bc:	9b 81       	ldd	r25, Y+3	; 0x03
     3be:	98 60       	ori	r25, 0x08	; 8
     3c0:	9b 83       	std	Y+3, r25	; 0x03
  HiADCp |= TXD_VAL;
  LoADCm = LoADCp | TXD_MSK;
     3c2:	88 60       	ori	r24, 0x08	; 8
     3c4:	8d 83       	std	Y+5, r24	; 0x05
  LoADCp |= TXD_VAL;

  //setting of Pins 
  R_PORT = 0;				//resistor-Port outputs to 0
     3c6:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//Low-Pin to output and across R_L to GND
     3c8:	ac 81       	ldd	r26, Y+4	; 0x04
     3ca:	a4 b9       	out	0x04, r26	; 4
  ADC_DDR = HiADCm;		//High-Pin to output
     3cc:	97 b9       	out	0x07, r25	; 7
  ADC_PORT = HiADCp;		//High-Pin fix to Vcc
     3ce:	98 b9       	out	0x08, r25	; 8
  //for some MOSFET the gate (TristatePin) must be discharged
  ChargePin10ms(TriPinRL,0);		//discharge for N-Kanal
     3d0:	8a 81       	ldd	r24, Y+2	; 0x02
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <ChargePin10ms>
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin 
     3d8:	80 2f       	mov	r24, r16
     3da:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
     3de:	9e 87       	std	Y+14, r25	; 0x0e
     3e0:	8d 87       	std	Y+13, r24	; 0x0d
  if(adc.lp_otr >= 977) {		//no current now? 
     3e2:	b3 e0       	ldi	r27, 0x03	; 3
     3e4:	81 3d       	cpi	r24, 0xD1	; 209
     3e6:	9b 07       	cpc	r25, r27
     3e8:	48 f0       	brcs	.+18     	; 0x3fc <CheckPins+0xe4>
     ChargePin10ms(TriPinRL,1);	 	//else: discharge for P-channel (Gate to VCC)
     3ea:	8a 81       	ldd	r24, Y+2	; 0x02
     3ec:	61 e0       	ldi	r22, 0x01	; 1
     3ee:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <ChargePin10ms>
     adc.lp_otr = ReadADC(LowPin);	//read voltage of Low-Pin again
     3f2:	80 2f       	mov	r24, r16
     3f4:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
     3f8:	9e 87       	std	Y+14, r25	; 0x0e
     3fa:	8d 87       	std	Y+13, r24	; 0x0d
  lcd_line2();
  lcd_clear_line();
  lcd_line2();
#endif

  if(adc.lp_otr > 92) {  //there is some current without TristatePin current 
     3fc:	ed 85       	ldd	r30, Y+13	; 0x0d
     3fe:	fe 85       	ldd	r31, Y+14	; 0x0e
     400:	ed 35       	cpi	r30, 0x5D	; 93
     402:	f1 05       	cpc	r31, r1
     404:	08 f4       	brcc	.+2      	; 0x408 <CheckPins+0xf0>
     406:	a8 c0       	rjmp	.+336    	; 0x558 <__stack+0x59>
     lcd_testpin(HighPin);
     lcd_space();
     wait1s();
#endif
     //Test if N-JFET or if self-conducting N-MOSFET
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
     408:	8c 81       	ldd	r24, Y+4	; 0x04
     40a:	8d 29       	or	r24, r13
     40c:	84 b9       	out	0x04, r24	; 4
     adc.lp1 = W20msReadADC(LowPin);	//measure voltage at the assumed Source 
     40e:	80 2f       	mov	r24, r16
     410:	0e 94 40 15 	call	0x2a80	; 0x2a80 <W20msReadADC>
     414:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     416:	89 81       	ldd	r24, Y+1	; 0x01
     418:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
     41c:	7c 01       	movw	r14, r24
     R_PORT = TriPinRH;			//switch R_H for Tristate-Pin (probably Gate) to VCC
     41e:	d5 b8       	out	0x05, r13	; 5
     adc.lp2 = W20msReadADC(LowPin);	//measure voltage at the assumed Source again
     420:	80 2f       	mov	r24, r16
     422:	0e 94 40 15 	call	0x2a80	; 0x2a80 <W20msReadADC>
     //If it is a self-conducting MOSFET or JFET, then must be: adc.lp2 > adc.lp1 
     if(adc.lp2>(adc.lp1+488)) {
     426:	95 01       	movw	r18, r10
     428:	28 51       	subi	r18, 0x18	; 24
     42a:	3e 4f       	sbci	r19, 0xFE	; 254
     42c:	28 17       	cp	r18, r24
     42e:	39 07       	cpc	r19, r25
     430:	08 f0       	brcs	.+2      	; 0x434 <CheckPins+0x11c>
     432:	40 c0       	rjmp	.+128    	; 0x4b4 <CheckPins+0x19c>
        //measure voltage at the  Gate, differ between MOSFET and JFET
        ADC_PORT = TXD_VAL;
     434:	88 e0       	ldi	r24, 0x08	; 8
     436:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = LoADCm;	//Low-Pin fix to GND
     438:	fd 81       	ldd	r31, Y+5	; 0x05
     43a:	f7 b9       	out	0x07, r31	; 7
        R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     43c:	8d 2d       	mov	r24, r13
     43e:	8c 29       	or	r24, r12
     440:	84 b9       	out	0x04, r24	; 4
        R_PORT = TriPinRH | HiPinRL;	//switch R_L for High-Pin to VCC
     442:	85 b9       	out	0x05, r24	; 5
        adc.lp2 = W20msReadADC(TristatePin); //read voltage of assumed Gate 
     444:	89 81       	ldd	r24, Y+1	; 0x01
     446:	0e 94 40 15 	call	0x2a80	; 0x2a80 <W20msReadADC>
        if(adc.lp2>3911) {  //MOSFET
     44a:	2f e0       	ldi	r18, 0x0F	; 15
     44c:	88 34       	cpi	r24, 0x48	; 72
     44e:	92 07       	cpc	r25, r18
     450:	28 f0       	brcs	.+10     	; 0x45c <CheckPins+0x144>
           PartFound = PART_FET;	//N-Kanal-MOSFET
     452:	83 e0       	ldi	r24, 0x03	; 3
     454:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_N_D_MOS; //Depletion-MOSFET
     458:	84 e0       	ldi	r24, 0x04	; 4
     45a:	04 c0       	rjmp	.+8      	; 0x464 <CheckPins+0x14c>
        } else {  //JFET (pn-passage between Gate and Source is conducting )
           PartFound = PART_FET;	//N-Kanal-JFET
     45c:	83 e0       	ldi	r24, 0x03	; 3
     45e:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_N_JFET;
     462:	86 e0       	ldi	r24, 0x06	; 6
     464:	80 93 06 01 	sts	0x0106, r24
        }
//      if ((PartReady == 0) || (adc.lp1 > trans.uBE[0])) 
//      there is no way to find out the right Source / Drain
        trans.uBE[0] = adc.lp1;
     468:	b0 92 3c 01 	sts	0x013C, r11
     46c:	a0 92 3b 01 	sts	0x013B, r10
        gthvoltage = adc.lp1 - adc.tp1;	//voltage GS (Source - Gate)
     470:	c5 01       	movw	r24, r10
     472:	8e 19       	sub	r24, r14
     474:	9f 09       	sbc	r25, r15
     476:	90 93 48 01 	sts	0x0148, r25
     47a:	80 93 47 01 	sts	0x0147, r24
        trans.uBE[1] = (unsigned int)(((unsigned long)adc.lp1 * 1000) / RR680MI); // Id 0.01mA
     47e:	b5 01       	movw	r22, r10
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	28 ee       	ldi	r18, 0xE8	; 232
     486:	33 e0       	ldi	r19, 0x03	; 3
     488:	40 e0       	ldi	r20, 0x00	; 0
     48a:	50 e0       	ldi	r21, 0x00	; 0
     48c:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__mulsi3>
     490:	ad 89       	ldd	r26, Y+21	; 0x15
     492:	be 89       	ldd	r27, Y+22	; 0x16
     494:	9d 01       	movw	r18, r26
     496:	40 e0       	ldi	r20, 0x00	; 0
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__udivmodsi4>
     49e:	30 93 3e 01 	sts	0x013E, r19
     4a2:	20 93 3d 01 	sts	0x013D, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     4a6:	b9 81       	ldd	r27, Y+1	; 0x01
     4a8:	b0 93 3f 01 	sts	0x013F, r27
        trans.c = HighPin;
     4ac:	10 93 40 01 	sts	0x0140, r17
        trans.e = LowPin;
     4b0:	00 93 41 01 	sts	0x0141, r16
     }

     ADC_PORT = TXD_VAL;		// direct outputs to GND
     4b4:	88 e0       	ldi	r24, 0x08	; 8
     4b6:	88 b9       	out	0x08, r24	; 8

     //Test, if P-JFET or if self-conducting P-MOSFET
     ADC_DDR = LoADCm;		//switch Low-Pin (assumed Drain) direct to GND,
     4b8:	ed 81       	ldd	r30, Y+5	; 0x05
     4ba:	e7 b9       	out	0x07, r30	; 7
				//R_H for Tristate-Pin (assumed Gate) is already switched to VCC
     R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     4bc:	8d 2d       	mov	r24, r13
     4be:	8c 29       	or	r24, r12
     4c0:	84 b9       	out	0x04, r24	; 4
     R_PORT = TriPinRH | HiPinRL;	//High-Pin across R_L to Vcc
     4c2:	85 b9       	out	0x05, r24	; 5
     adc.hp1 = W20msReadADC(HighPin);	//measure voltage at assumed Source 
     4c4:	81 2f       	mov	r24, r17
     4c6:	0e 94 40 15 	call	0x2a80	; 0x2a80 <W20msReadADC>
     4ca:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     4cc:	89 81       	ldd	r24, Y+1	; 0x01
     4ce:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
     4d2:	7c 01       	movw	r14, r24
     R_PORT = HiPinRL;			//switch R_H for Tristate-Pin (assumed Gate) to GND
     4d4:	c5 b8       	out	0x05, r12	; 5
     adc.hp2 = W20msReadADC(HighPin);	//read voltage at assumed Source again
     4d6:	81 2f       	mov	r24, r17
     4d8:	0e 94 40 15 	call	0x2a80	; 0x2a80 <W20msReadADC>
     //if it is a self-conducting P_MOSFET or P-JFET , then must be:  adc.hp1 > adc.hp2 
     if(adc.hp1>(adc.hp2+488)) {
     4dc:	88 51       	subi	r24, 0x18	; 24
     4de:	9e 4f       	sbci	r25, 0xFE	; 254
     4e0:	8a 15       	cp	r24, r10
     4e2:	9b 05       	cpc	r25, r11
     4e4:	c8 f5       	brcc	.+114    	; 0x558 <__stack+0x59>
        //read voltage at the Gate , to differ between MOSFET and JFET
        ADC_PORT = HiADCp;	//switch High-Pin directly to VCC
     4e6:	fb 81       	ldd	r31, Y+3	; 0x03
     4e8:	f8 b9       	out	0x08, r31	; 8
        ADC_DDR = HiADCm;	//switch High-Pin to output
     4ea:	f7 b9       	out	0x07, r31	; 7
        adc.tp2 = W20msReadADC(TristatePin); //read voltage at the assumed Gate 
     4ec:	89 81       	ldd	r24, Y+1	; 0x01
     4ee:	0e 94 40 15 	call	0x2a80	; 0x2a80 <W20msReadADC>
        if(adc.tp2<977) { 		//MOSFET
     4f2:	23 e0       	ldi	r18, 0x03	; 3
     4f4:	81 3d       	cpi	r24, 0xD1	; 209
     4f6:	92 07       	cpc	r25, r18
     4f8:	28 f4       	brcc	.+10     	; 0x504 <__stack+0x5>
           PartFound = PART_FET;	//P-Kanal-MOSFET
     4fa:	83 e0       	ldi	r24, 0x03	; 3
     4fc:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_D_MOS; //Depletion-MOSFET
     500:	85 e0       	ldi	r24, 0x05	; 5
     502:	04 c0       	rjmp	.+8      	; 0x50c <__stack+0xd>
        } else { 			//JFET (pn-passage between Gate and Source is conducting)
           PartFound = PART_FET;	//P-Kanal-JFET
     504:	83 e0       	ldi	r24, 0x03	; 3
     506:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_JFET;
     50a:	87 e0       	ldi	r24, 0x07	; 7
     50c:	80 93 06 01 	sts	0x0106, r24
        }
        gthvoltage = adc.tp1 - adc.hp1;		//voltage GS (Gate - Source)
     510:	ea 18       	sub	r14, r10
     512:	fb 08       	sbc	r15, r11
     514:	f0 92 48 01 	sts	0x0148, r15
     518:	e0 92 47 01 	sts	0x0147, r14
        trans.uBE[1] = (unsigned int)(((unsigned long)(U_VCC - adc.hp1) * 1000) / RR680PL); // Id 0.01mA
     51c:	64 e7       	ldi	r22, 0x74	; 116
     51e:	73 e1       	ldi	r23, 0x13	; 19
     520:	6a 19       	sub	r22, r10
     522:	7b 09       	sbc	r23, r11
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	28 ee       	ldi	r18, 0xE8	; 232
     52a:	33 e0       	ldi	r19, 0x03	; 3
     52c:	40 e0       	ldi	r20, 0x00	; 0
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__mulsi3>
     534:	ab 89       	ldd	r26, Y+19	; 0x13
     536:	bc 89       	ldd	r27, Y+20	; 0x14
     538:	9d 01       	movw	r18, r26
     53a:	40 e0       	ldi	r20, 0x00	; 0
     53c:	50 e0       	ldi	r21, 0x00	; 0
     53e:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__udivmodsi4>
     542:	30 93 3e 01 	sts	0x013E, r19
     546:	20 93 3d 01 	sts	0x013D, r18
        trans.b = TristatePin;		//save Pin numbers found for this FET
     54a:	b9 81       	ldd	r27, Y+1	; 0x01
     54c:	b0 93 3f 01 	sts	0x013F, r27
        trans.c = LowPin;
     550:	00 93 40 01 	sts	0x0140, r16
        trans.e = HighPin;
     554:	10 93 41 01 	sts	0x0141, r17
  } // end component has current without TristatePin signal


#ifdef COMMON_COLLECTOR
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
     558:	88 e0       	ldi	r24, 0x08	; 8
     55a:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;			// Collector direct to GND
     55c:	ed 81       	ldd	r30, Y+5	; 0x05
     55e:	e7 b9       	out	0x07, r30	; 7
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
     560:	c5 b8       	out	0x05, r12	; 5
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
     562:	fa 81       	ldd	r31, Y+2	; 0x02
     564:	fc 29       	or	r31, r12
     566:	fa 87       	std	Y+10, r31	; 0x0a
     568:	f4 b9       	out	0x04, r31	; 4
  adc.hp1 = U_VCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     56a:	81 2f       	mov	r24, r17
     56c:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
     570:	7c 01       	movw	r14, r24
  adc.tp1 = ReadADC(TristatePin);	// voltage at the base resistor
     572:	89 81       	ldd	r24, Y+1	; 0x01
     574:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
     578:	4c 01       	movw	r8, r24

  if (adc.tp1 < 10) {
     57a:	8a 30       	cpi	r24, 0x0A	; 10
     57c:	91 05       	cpc	r25, r1
     57e:	70 f5       	brcc	.+92     	; 0x5dc <__stack+0xdd>
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
     580:	8d 2d       	mov	r24, r13
     582:	8c 29       	or	r24, r12
     584:	84 b9       	out	0x04, r24	; 4
     adc.hp1 = U_VCC - W5msReadADC(HighPin);
     586:	81 2f       	mov	r24, r17
     588:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
     58c:	a4 e7       	ldi	r26, 0x74	; 116
     58e:	b3 e1       	ldi	r27, 0x13	; 19
     590:	a8 1b       	sub	r26, r24
     592:	b9 0b       	sbc	r27, r25
     594:	b9 8f       	std	Y+25, r27	; 0x19
     596:	a8 8f       	std	Y+24, r26	; 0x18
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
     598:	89 81       	ldd	r24, Y+1	; 0x01
     59a:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
     59e:	4c 01       	movw	r8, r24
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     5a0:	e8 8d       	ldd	r30, Y+24	; 0x18
     5a2:	f9 8d       	ldd	r31, Y+25	; 0x19
     5a4:	1f 01       	movw	r2, r30
     5a6:	44 24       	eor	r4, r4
     5a8:	55 24       	eor	r5, r5
     5aa:	8b 89       	ldd	r24, Y+19	; 0x13
     5ac:	9c 89       	ldd	r25, Y+20	; 0x14
     5ae:	9c 01       	movw	r18, r24
     5b0:	40 e0       	ldi	r20, 0x00	; 0
     5b2:	50 e0       	ldi	r21, 0x00	; 0
     5b4:	60 e6       	ldi	r22, 0x60	; 96
     5b6:	77 eb       	ldi	r23, 0xB7	; 183
     5b8:	87 e4       	ldi	r24, 0x47	; 71
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__udivmodsi4>
     5c0:	c2 01       	movw	r24, r4
     5c2:	b1 01       	movw	r22, r2
     5c4:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
     5c8:	94 01       	movw	r18, r8
     5ca:	40 e0       	ldi	r20, 0x00	; 0
     5cc:	50 e0       	ldi	r21, 0x00	; 0
       lcd_data('T');
       lcd_string(utoa(adc.tp1,outval,10));
       lcd_space();
#endif
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     5ce:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__udivmodsi4>
     5d2:	2e 83       	std	Y+6, r18	; 0x06
     5d4:	3f 83       	std	Y+7, r19	; 0x07
     5d6:	48 87       	std	Y+8, r20	; 0x08
     5d8:	59 87       	std	Y+9, r21	; 0x09
     5da:	13 c0       	rjmp	.+38     	; 0x602 <__stack+0x103>
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
  ADC_DDR = LoADCm;			// Collector direct to GND
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
  adc.hp1 = U_VCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     5dc:	a4 e7       	ldi	r26, 0x74	; 116
     5de:	b3 e1       	ldi	r27, 0x13	; 19
     5e0:	ae 19       	sub	r26, r14
     5e2:	bf 09       	sbc	r27, r15
     5e4:	b9 8f       	std	Y+25, r27	; 0x19
     5e6:	a8 8f       	std	Y+24, r26	; 0x18
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
 #else
     c_hfe = ((adc.hp1 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
  } else {
     c_hfe = (unsigned long)((adc.hp1 - adc.tp1) / adc.tp1);
     5e8:	cd 01       	movw	r24, r26
     5ea:	88 19       	sub	r24, r8
     5ec:	99 09       	sbc	r25, r9
     5ee:	b4 01       	movw	r22, r8
     5f0:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__udivmodhi4>
     5f4:	cb 01       	movw	r24, r22
     5f6:	a0 e0       	ldi	r26, 0x00	; 0
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	8e 83       	std	Y+6, r24	; 0x06
     5fc:	9f 83       	std	Y+7, r25	; 0x07
     5fe:	a8 87       	std	Y+8, r26	; 0x08
     600:	b9 87       	std	Y+9, r27	; 0x09
  }
#endif

  //set Pins again for circuit with common Emitter PNP
  R_DDR = LoPinRL;		//switch R_L port for Low-Pin to output (GND)
     602:	9c 81       	ldd	r25, Y+4	; 0x04
     604:	94 b9       	out	0x04, r25	; 4
  R_PORT = 0;			//switch all resistor ports to GND
     606:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = HiADCm;		//switch High-Pin to output
     608:	ab 81       	ldd	r26, Y+3	; 0x03
     60a:	a7 b9       	out	0x07, r26	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
     60c:	a8 b9       	out	0x08, r26	; 8
  wait5ms();
     60e:	0e 94 29 15 	call	0x2a52	; 0x2a52 <wait5ms>
  
  if(adc.lp_otr < 977) {
     612:	ed 85       	ldd	r30, Y+13	; 0x0d
     614:	fe 85       	ldd	r31, Y+14	; 0x0e
     616:	23 e0       	ldi	r18, 0x03	; 3
     618:	e1 3d       	cpi	r30, 0xD1	; 209
     61a:	f2 07       	cpc	r31, r18
     61c:	08 f0       	brcs	.+2      	; 0x620 <__stack+0x121>
     61e:	86 c2       	rjmp	.+1292   	; 0xb2c <__stack+0x62d>
     lcd_testpin(HighPin);
     lcd_space();
     wait1s();
#endif
     //Test to PNP
     R_DDR = LoPinRL | TriPinRL;	//switch R_L port for Tristate-Pin to output (GND), for Test of PNP
     620:	3a 81       	ldd	r19, Y+2	; 0x02
     622:	8c 81       	ldd	r24, Y+4	; 0x04
     624:	38 2b       	or	r19, r24
     626:	3f 87       	std	Y+15, r19	; 0x0f
     628:	34 b9       	out	0x04, r19	; 4
     adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin
     62a:	80 2f       	mov	r24, r16
     62c:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
     if(adc.lp1 > 3422) {
     630:	ad e0       	ldi	r26, 0x0D	; 13
     632:	8f 35       	cpi	r24, 0x5F	; 95
     634:	9a 07       	cpc	r25, r26
     636:	08 f4       	brcc	.+2      	; 0x63a <__stack+0x13b>
     638:	d6 c0       	rjmp	.+428    	; 0x7e6 <__stack+0x2e7>
        //component has current => PNP-Transistor or equivalent
        //compute current amplification factor in both directions
        R_DDR = LoPinRL | TriPinRH;	//switch R_H port for Tristate-Pin (Base) to output (GND)
     63a:	bc 81       	ldd	r27, Y+4	; 0x04
     63c:	bd 29       	or	r27, r13
     63e:	bf 8b       	std	Y+23, r27	; 0x17
     640:	b4 b9       	out	0x04, r27	; 4

        adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin (assumed Collector)
     642:	80 2f       	mov	r24, r16
     644:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
     648:	3c 01       	movw	r6, r24
        adc.tp2 = ReadADC(TristatePin);	//measure voltage at TristatePin (Base) 
     64a:	89 81       	ldd	r24, Y+1	; 0x01
     64c:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
     650:	5c 01       	movw	r10, r24
        //check, if Test is done before 
        if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     652:	80 91 07 01 	lds	r24, 0x0107
     656:	82 50       	subi	r24, 0x02	; 2
     658:	82 30       	cpi	r24, 0x02	; 2
     65a:	18 f4       	brcc	.+6      	; 0x662 <__stack+0x163>
           PartReady = 1;
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	80 93 04 01 	sts	0x0104, r24
        }
        trans.uBE[PartReady] = ReadADC(HighPin) - adc.tp2;	// Base Emitter Voltage
     662:	e0 90 04 01 	lds	r14, 0x0104
     666:	ff 24       	eor	r15, r15
     668:	81 2f       	mov	r24, r17
     66a:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
     66e:	f7 01       	movw	r30, r14
     670:	ee 0f       	add	r30, r30
     672:	ff 1f       	adc	r31, r31
     674:	e5 5c       	subi	r30, 0xC5	; 197
     676:	fe 4f       	sbci	r31, 0xFE	; 254
     678:	8a 19       	sub	r24, r10
     67a:	9b 09       	sbc	r25, r11
     67c:	91 83       	std	Z+1, r25	; 0x01
     67e:	80 83       	st	Z, r24

        //compute current amplification factor for circuit with common Emitter
        //hFE = B = Collector current / Base current
        if(adc.tp2 < 53) {
     680:	e5 e3       	ldi	r30, 0x35	; 53
     682:	ae 16       	cp	r10, r30
     684:	b1 04       	cpc	r11, r1
     686:	18 f4       	brcc	.+6      	; 0x68e <__stack+0x18f>
#if DebugOut == 5
           lcd_data('<');
           lcd_data('5');
           lcd_data('3');
#endif
           adc.tp2 = 53;
     688:	75 e3       	ldi	r23, 0x35	; 53
     68a:	a7 2e       	mov	r10, r23
     68c:	b1 2c       	mov	r11, r1
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     68e:	e0 90 04 01 	lds	r14, 0x0104
     692:	ff 24       	eor	r15, r15
     694:	13 01       	movw	r2, r6
     696:	44 24       	eor	r4, r4
     698:	55 24       	eor	r5, r5
     69a:	8d 89       	ldd	r24, Y+21	; 0x15
     69c:	9e 89       	ldd	r25, Y+22	; 0x16
     69e:	9c 01       	movw	r18, r24
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	60 e6       	ldi	r22, 0x60	; 96
     6a6:	77 eb       	ldi	r23, 0xB7	; 183
     6a8:	87 e4       	ldi	r24, 0x47	; 71
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__udivmodsi4>
     6b0:	c2 01       	movw	r24, r4
     6b2:	b1 01       	movw	r22, r2
     6b4:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__mulsi3>
                 (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
     6b8:	95 01       	movw	r18, r10
     6ba:	40 e0       	ldi	r20, 0x00	; 0
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__udivmodsi4>
#endif
           adc.tp2 = 53;
        }

 #ifdef LONG_HFE
        trans.hfe[PartReady] = ((unsigned int)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     6c2:	f7 01       	movw	r30, r14
     6c4:	ee 0f       	add	r30, r30
     6c6:	ff 1f       	adc	r31, r31
     6c8:	ee 0f       	add	r30, r30
     6ca:	ff 1f       	adc	r31, r31
     6cc:	ed 5c       	subi	r30, 0xCD	; 205
     6ce:	fe 4f       	sbci	r31, 0xFE	; 254
     6d0:	20 83       	st	Z, r18
     6d2:	31 83       	std	Z+1, r19	; 0x01
     6d4:	42 83       	std	Z+2, r20	; 0x02
     6d6:	53 83       	std	Z+3, r21	; 0x03
        trans.hfe[PartReady] = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
#ifdef COMMON_COLLECTOR
        //current amplification factor for common  Collector (Emitter follower)
        // c_hFE = (Emitter current - Base current) / Base current
        if (c_hfe > trans.hfe[PartReady]) {
     6d8:	8e 81       	ldd	r24, Y+6	; 0x06
     6da:	9f 81       	ldd	r25, Y+7	; 0x07
     6dc:	a8 85       	ldd	r26, Y+8	; 0x08
     6de:	b9 85       	ldd	r27, Y+9	; 0x09
     6e0:	28 17       	cp	r18, r24
     6e2:	39 07       	cpc	r19, r25
     6e4:	4a 07       	cpc	r20, r26
     6e6:	5b 07       	cpc	r21, r27
     6e8:	a0 f4       	brcc	.+40     	; 0x712 <__stack+0x213>
           trans.hfe[PartReady] = c_hfe;
     6ea:	80 83       	st	Z, r24
     6ec:	91 83       	std	Z+1, r25	; 0x01
     6ee:	a2 83       	std	Z+2, r26	; 0x02
     6f0:	b3 83       	std	Z+3, r27	; 0x03
           trans.uBE[PartReady] = U_VCC - adc.hp1 - adc.tp1;	// Base Emitter Voltage common collector
     6f2:	f7 01       	movw	r30, r14
     6f4:	ee 0f       	add	r30, r30
     6f6:	ff 1f       	adc	r31, r31
     6f8:	e5 5c       	subi	r30, 0xC5	; 197
     6fa:	fe 4f       	sbci	r31, 0xFE	; 254
     6fc:	88 8d       	ldd	r24, Y+24	; 0x18
     6fe:	99 8d       	ldd	r25, Y+25	; 0x19
     700:	90 95       	com	r25
     702:	81 95       	neg	r24
     704:	9f 4f       	sbci	r25, 0xFF	; 255
     706:	88 19       	sub	r24, r8
     708:	99 09       	sbc	r25, r9
     70a:	8c 58       	subi	r24, 0x8C	; 140
     70c:	9c 4e       	sbci	r25, 0xEC	; 236
     70e:	91 83       	std	Z+1, r25	; 0x01
     710:	80 83       	st	Z, r24
        }
#endif

 
        if(PartFound != PART_THYRISTOR) {
     712:	80 91 07 01 	lds	r24, 0x0107
     716:	85 30       	cpi	r24, 0x05	; 5
     718:	09 f4       	brne	.+2      	; 0x71c <__stack+0x21d>
     71a:	65 c0       	rjmp	.+202    	; 0x7e6 <__stack+0x2e7>
           if(adc.tp2 > 977) {
     71c:	92 ed       	ldi	r25, 0xD2	; 210
     71e:	a9 16       	cp	r10, r25
     720:	93 e0       	ldi	r25, 0x03	; 3
     722:	b9 06       	cpc	r11, r25
     724:	30 f0       	brcs	.+12     	; 0x732 <__stack+0x233>
              //PNP-Transistor is found (Base voltage moves to VCC)
              PartFound = PART_TRANSISTOR;
     726:	82 e0       	ldi	r24, 0x02	; 2
     728:	80 93 07 01 	sts	0x0107, r24
              PartMode = PART_MODE_PNP;
     72c:	80 93 06 01 	sts	0x0106, r24
     730:	53 c0       	rjmp	.+166    	; 0x7d8 <__stack+0x2d9>
           } else {
              if((adc.lp_otr < 97) && (adc.lp1 > 2000)) {
     732:	ad 85       	ldd	r26, Y+13	; 0x0d
     734:	be 85       	ldd	r27, Y+14	; 0x0e
     736:	a1 36       	cpi	r26, 0x61	; 97
     738:	b1 05       	cpc	r27, r1
     73a:	08 f0       	brcs	.+2      	; 0x73e <__stack+0x23f>
     73c:	4d c0       	rjmp	.+154    	; 0x7d8 <__stack+0x2d9>
     73e:	b1 ed       	ldi	r27, 0xD1	; 209
     740:	6b 16       	cp	r6, r27
     742:	b7 e0       	ldi	r27, 0x07	; 7
     744:	7b 06       	cpc	r7, r27
     746:	08 f4       	brcc	.+2      	; 0x74a <__stack+0x24b>
     748:	47 c0       	rjmp	.+142    	; 0x7d8 <__stack+0x2d9>
                 //is flow voltage low enough in the closed  state?
                 //(since D-Mode-FET would be by mistake detected as E-Mode )
        	 PartFound = PART_FET;		//P-Kanal-MOSFET if found (Basis/Gate moves not to VCC)
     74a:	83 e0       	ldi	r24, 0x03	; 3
     74c:	80 93 07 01 	sts	0x0107, r24
        	 PartMode = PART_MODE_P_E_MOS;
     750:	80 93 06 01 	sts	0x0106, r24
                 PinMSK = LoADCm & 7;
     754:	ad 80       	ldd	r10, Y+5	; 0x05
     756:	e7 e0       	ldi	r30, 0x07	; 7
     758:	ae 22       	and	r10, r30
        	 //measure the Gate threshold voltage
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
     75a:	89 81       	ldd	r24, Y+1	; 0x01
     75c:	80 64       	ori	r24, 0x40	; 64
     75e:	80 93 7c 00 	sts	0x007C, r24
        	 gthvoltage = 1;		// round up ((1*4)/9)
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	90 93 48 01 	sts	0x0148, r25
     76a:	80 93 47 01 	sts	0x0147, r24
     76e:	4b e0       	ldi	r20, 0x0B	; 11
     770:	e4 2e       	mov	r14, r20
        	 for(ii=0;ii<11;ii++) {
        	    wdt_reset();
     772:	a8 95       	wdr
        	    ChargePin10ms(TriPinRL,1);
     774:	8a 81       	ldd	r24, Y+2	; 0x02
     776:	61 e0       	ldi	r22, 0x01	; 1
     778:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <ChargePin10ms>
                    R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (Basis) to GND
     77c:	ff 89       	ldd	r31, Y+23	; 0x17
     77e:	f4 b9       	out	0x04, r31	; 4
        	    while (!(ADC_PIN&PinMSK));  // Wait, until the MOSFET switches and Drain moves to VCC
     780:	86 b1       	in	r24, 0x06	; 6
     782:	8a 21       	and	r24, r10
     784:	e9 f3       	breq	.-6      	; 0x780 <__stack+0x281>
        	    R_DDR = LoPinRL;
     786:	2c 81       	ldd	r18, Y+4	; 0x04
     788:	24 b9       	out	0x04, r18	; 4
        	    ADCSRA |= (1<<ADSC);	// Start Conversion
     78a:	80 91 7a 00 	lds	r24, 0x007A
     78e:	80 64       	ori	r24, 0x40	; 64
     790:	80 93 7a 00 	sts	0x007A, r24
        	    while (ADCSRA&(1<<ADSC));	// wait
     794:	80 91 7a 00 	lds	r24, 0x007A
     798:	86 fd       	sbrc	r24, 6
     79a:	fc cf       	rjmp	.-8      	; 0x794 <__stack+0x295>
      		    gthvoltage += (1023 - ADCW); // Add Tristatepin-Voltage
     79c:	20 91 78 00 	lds	r18, 0x0078
     7a0:	30 91 79 00 	lds	r19, 0x0079
     7a4:	80 91 47 01 	lds	r24, 0x0147
     7a8:	90 91 48 01 	lds	r25, 0x0148
     7ac:	81 50       	subi	r24, 0x01	; 1
     7ae:	9c 4f       	sbci	r25, 0xFC	; 252
     7b0:	82 1b       	sub	r24, r18
     7b2:	93 0b       	sbc	r25, r19
     7b4:	90 93 48 01 	sts	0x0148, r25
     7b8:	80 93 47 01 	sts	0x0147, r24
     7bc:	ea 94       	dec	r14
        	 PartMode = PART_MODE_P_E_MOS;
                 PinMSK = LoADCm & 7;
        	 //measure the Gate threshold voltage
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
        	 gthvoltage = 1;		// round up ((1*4)/9)
        	 for(ii=0;ii<11;ii++) {
     7be:	c9 f6       	brne	.-78     	; 0x772 <__stack+0x273>
        	    R_DDR = LoPinRL;
        	    ADCSRA |= (1<<ADSC);	// Start Conversion
        	    while (ADCSRA&(1<<ADSC));	// wait
      		    gthvoltage += (1023 - ADCW); // Add Tristatepin-Voltage
                 }
                 gthvoltage *= 4;		// is equal to 44*ADCW
     7c0:	88 0f       	add	r24, r24
     7c2:	99 1f       	adc	r25, r25
     7c4:	88 0f       	add	r24, r24
     7c6:	99 1f       	adc	r25, r25
                 gthvoltage /= 9;		// gives resolution in mV
     7c8:	69 e0       	ldi	r22, 0x09	; 9
     7ca:	70 e0       	ldi	r23, 0x00	; 0
     7cc:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__udivmodhi4>
     7d0:	70 93 48 01 	sts	0x0148, r23
     7d4:	60 93 47 01 	sts	0x0147, r22
              }
           }
           trans.b = TristatePin;
     7d8:	39 81       	ldd	r19, Y+1	; 0x01
     7da:	30 93 3f 01 	sts	0x013F, r19
           trans.c = LowPin;
     7de:	00 93 40 01 	sts	0x0140, r16
           trans.e = HighPin;
     7e2:	10 93 41 01 	sts	0x0141, r17
        }  // end if PartFound != PART_THYRISTOR
    } // end component has current => PNP

#ifdef COMMON_COLLECTOR
    // Low-Pin=RL- HighPin=VCC
    R_DDR = LoPinRL | TriPinRL;
     7e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     7e8:	84 b9       	out	0x04, r24	; 4
    R_PORT = TriPinRL;			// TriPin=RL+  NPN with common Collector
     7ea:	9a 81       	ldd	r25, Y+2	; 0x02
     7ec:	95 b9       	out	0x05, r25	; 5
    adc.lp1 = W5msReadADC(LowPin);	// voltage at Emitter resistor
     7ee:	80 2f       	mov	r24, r16
     7f0:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
     7f4:	9f 83       	std	Y+7, r25	; 0x07
     7f6:	8e 83       	std	Y+6, r24	; 0x06
    adc.tp1 = U_VCC - ReadADC(TristatePin);	// voltage at Base resistor
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
     7fe:	24 e7       	ldi	r18, 0x74	; 116
     800:	e2 2e       	mov	r14, r18
     802:	23 e1       	ldi	r18, 0x13	; 19
     804:	f2 2e       	mov	r15, r18
     806:	57 01       	movw	r10, r14
     808:	a8 1a       	sub	r10, r24
     80a:	b9 0a       	sbc	r11, r25
    if (adc.tp1 < 10) {
     80c:	aa e0       	ldi	r26, 0x0A	; 10
     80e:	aa 16       	cp	r10, r26
     810:	b1 04       	cpc	r11, r1
     812:	68 f5       	brcc	.+90     	; 0x86e <__stack+0x36f>
       R_DDR = LoPinRL | TriPinRH;
     814:	8c 81       	ldd	r24, Y+4	; 0x04
     816:	8d 29       	or	r24, r13
     818:	84 b9       	out	0x04, r24	; 4
       R_PORT = TriPinRH;		// Tripin=RH+
     81a:	d5 b8       	out	0x05, r13	; 5
       adc.lp1 = W5msReadADC(LowPin);
     81c:	80 2f       	mov	r24, r16
     81e:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
     822:	9f 83       	std	Y+7, r25	; 0x07
     824:	8e 83       	std	Y+6, r24	; 0x06
       adc.tp1 = U_VCC - ReadADC(TristatePin);	// voltage at Base resistor
     826:	89 81       	ldd	r24, Y+1	; 0x01
     828:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
     82c:	57 01       	movw	r10, r14
     82e:	a8 1a       	sub	r10, r24
     830:	b9 0a       	sbc	r11, r25
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     832:	ee 81       	ldd	r30, Y+6	; 0x06
     834:	ff 81       	ldd	r31, Y+7	; 0x07
     836:	3f 01       	movw	r6, r30
     838:	88 24       	eor	r8, r8
     83a:	99 24       	eor	r9, r9
     83c:	8d 89       	ldd	r24, Y+21	; 0x15
     83e:	9e 89       	ldd	r25, Y+22	; 0x16
     840:	9c 01       	movw	r18, r24
     842:	40 e0       	ldi	r20, 0x00	; 0
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	60 e6       	ldi	r22, 0x60	; 96
     848:	77 eb       	ldi	r23, 0xB7	; 183
     84a:	87 e4       	ldi	r24, 0x47	; 71
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__udivmodsi4>
     852:	c4 01       	movw	r24, r8
     854:	b3 01       	movw	r22, r6
     856:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__mulsi3>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
     85a:	95 01       	movw	r18, r10
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
       R_DDR = LoPinRL | TriPinRH;
       R_PORT = TriPinRH;		// Tripin=RH+
       adc.lp1 = W5msReadADC(LowPin);
       adc.tp1 = U_VCC - ReadADC(TristatePin);	// voltage at Base resistor
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     860:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__udivmodsi4>
     864:	2f 87       	std	Y+15, r18	; 0x0f
     866:	38 8b       	std	Y+16, r19	; 0x10
     868:	49 8b       	std	Y+17, r20	; 0x11
     86a:	5a 8b       	std	Y+18, r21	; 0x12
     86c:	0e c0       	rjmp	.+28     	; 0x88a <__stack+0x38b>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
 #else
       c_hfe = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
    } else {
       c_hfe = (adc.lp1 - adc.tp1) / adc.tp1;
     86e:	8e 81       	ldd	r24, Y+6	; 0x06
     870:	9f 81       	ldd	r25, Y+7	; 0x07
     872:	8a 19       	sub	r24, r10
     874:	9b 09       	sbc	r25, r11
     876:	b5 01       	movw	r22, r10
     878:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__udivmodhi4>
     87c:	cb 01       	movw	r24, r22
     87e:	a0 e0       	ldi	r26, 0x00	; 0
     880:	b0 e0       	ldi	r27, 0x00	; 0
     882:	8f 87       	std	Y+15, r24	; 0x0f
     884:	98 8b       	std	Y+16, r25	; 0x10
     886:	a9 8b       	std	Y+17, r26	; 0x11
     888:	ba 8b       	std	Y+18, r27	; 0x12
       lcd_string(utoa(adc.tp1,outval,10));
       wait1s();
#endif
#endif
    //Tristate (can be Base) to VCC, Test if NPN
    ADC_DDR = LoADCm;		//Low-Pin to output 0V
     88a:	9d 81       	ldd	r25, Y+5	; 0x05
     88c:	97 b9       	out	0x07, r25	; 7
    ADC_PORT = TXD_VAL;			//switch Low-Pin to GND
     88e:	88 e0       	ldi	r24, 0x08	; 8
     890:	88 b9       	out	0x08, r24	; 8
    R_DDR = TriPinRL | HiPinRL;		//RL port for High-Pin and Tristate-Pin to output
     892:	aa 85       	ldd	r26, Y+10	; 0x0a
     894:	a4 b9       	out	0x04, r26	; 4
    R_PORT = TriPinRL | HiPinRL;	//RL port for High-Pin and Tristate-Pin to Vcc
     896:	a5 b9       	out	0x05, r26	; 5
    adc.hp1 = W5msReadADC(HighPin);	//measure voltage at High-Pin  (Collector)
     898:	81 2f       	mov	r24, r17
     89a:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
    if(adc.hp1 < 1600) {
     89e:	b6 e0       	ldi	r27, 0x06	; 6
     8a0:	80 34       	cpi	r24, 0x40	; 64
     8a2:	9b 07       	cpc	r25, r27
     8a4:	08 f0       	brcs	.+2      	; 0x8a8 <__stack+0x3a9>
     8a6:	3e c1       	rjmp	.+636    	; 0xb24 <__stack+0x625>
       lcd_data('N');
       lcd_testpin(HighPin);
       lcd_space();
       wait1s();
#endif
       if(PartReady==1) {
     8a8:	80 91 04 01 	lds	r24, 0x0104
     8ac:	81 30       	cpi	r24, 0x01	; 1
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <__stack+0x3b3>
     8b0:	a6 c1       	rjmp	.+844    	; 0xbfe <__stack+0x6ff>
          goto widmes;
       }

       //Test auf Thyristor:
       //Gate discharge
       ChargePin10ms(TriPinRL,0);	//Tristate-Pin (Gate) across R_L 10ms to GND
     8b2:	8a 81       	ldd	r24, Y+2	; 0x02
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <ChargePin10ms>
       adc.hp3 = W5msReadADC(HighPin);	//read voltage at High-Pin (probably Anode) again
     8ba:	81 2f       	mov	r24, r17
     8bc:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
     8c0:	7c 01       	movw	r14, r24
					//current should still flow, if not,
					// no Thyristor or holding current to low 
		 	
       R_PORT = 0;			//switch R_L for High-Pin (probably Anode) to GND (turn off)
     8c2:	15 b8       	out	0x05, r1	; 5
       wait5ms();
     8c4:	0e 94 29 15 	call	0x2a52	; 0x2a52 <wait5ms>
       R_PORT = HiPinRL;		//switch R_L for High-Pin (probably Anode) again to VCC
     8c8:	c5 b8       	out	0x05, r12	; 5
       adc.hp2 = W5msReadADC(HighPin);	//measure voltage at the High-Pin (probably Anode) again
     8ca:	81 2f       	mov	r24, r17
     8cc:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
       if((adc.hp3 < 1600) && (adc.hp2 > 4400)) {
     8d0:	e0 e4       	ldi	r30, 0x40	; 64
     8d2:	ee 16       	cp	r14, r30
     8d4:	e6 e0       	ldi	r30, 0x06	; 6
     8d6:	fe 06       	cpc	r15, r30
     8d8:	08 f0       	brcs	.+2      	; 0x8dc <__stack+0x3dd>
     8da:	42 c0       	rjmp	.+132    	; 0x960 <__stack+0x461>
     8dc:	f1 e1       	ldi	r31, 0x11	; 17
     8de:	81 33       	cpi	r24, 0x31	; 49
     8e0:	9f 07       	cpc	r25, r31
     8e2:	f0 f1       	brcs	.+124    	; 0x960 <__stack+0x461>
          //if the holding current was switched off the thyristor must be switched off too. 
          //if Thyristor was still swiched on, if gate was switched off => Thyristor
          PartFound = PART_THYRISTOR;
     8e4:	85 e0       	ldi	r24, 0x05	; 5
     8e6:	80 93 07 01 	sts	0x0107, r24
          //Test if Triac
          R_DDR = 0;
     8ea:	14 b8       	out	0x04, r1	; 4
          R_PORT = 0;
     8ec:	15 b8       	out	0x05, r1	; 5
          ADC_PORT = LoADCp;	//Low-Pin fix to VCC
     8ee:	2d 81       	ldd	r18, Y+5	; 0x05
     8f0:	28 b9       	out	0x08, r18	; 8
          wait5ms();
     8f2:	0e 94 29 15 	call	0x2a52	; 0x2a52 <wait5ms>
          R_DDR = HiPinRL;		//switch R_L port HighPin to output (GND)
     8f6:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) > 244) {
     8f8:	81 2f       	mov	r24, r17
     8fa:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
     8fe:	85 3f       	cpi	r24, 0xF5	; 245
     900:	91 05       	cpc	r25, r1
     902:	08 f0       	brcs	.+2      	; 0x906 <__stack+0x407>
     904:	08 c1       	rjmp	.+528    	; 0xb16 <__stack+0x617>
             goto savenresult;		//measure voltage at the  High-Pin (probably A2); if too high:
                                	//component has current => kein Triac
          }
          R_DDR = HiPinRL | TriPinRL;	//switch R_L port for TristatePin (Gate) to output (GND) => Triac should be triggered 
     906:	3a 85       	ldd	r19, Y+10	; 0x0a
     908:	34 b9       	out	0x04, r19	; 4
          if(W5msReadADC(TristatePin) < 977) {
     90a:	89 81       	ldd	r24, Y+1	; 0x01
     90c:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
     910:	a3 e0       	ldi	r26, 0x03	; 3
     912:	81 3d       	cpi	r24, 0xD1	; 209
     914:	9a 07       	cpc	r25, r26
     916:	08 f4       	brcc	.+2      	; 0x91a <__stack+0x41b>
     918:	fe c0       	rjmp	.+508    	; 0xb16 <__stack+0x617>
             goto savenresult; 		//measure voltage at the Tristate-Pin (probably Gate) ;
                              		// if to low, abort 
          }
          if(ReadADC(HighPin) < 733) {
     91a:	81 2f       	mov	r24, r17
     91c:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
     920:	b2 e0       	ldi	r27, 0x02	; 2
     922:	8d 3d       	cpi	r24, 0xDD	; 221
     924:	9b 07       	cpc	r25, r27
     926:	08 f4       	brcc	.+2      	; 0x92a <__stack+0x42b>
     928:	f6 c0       	rjmp	.+492    	; 0xb16 <__stack+0x617>
             goto savenresult; 		//component has no current => no Triac => abort
          }
          R_DDR = HiPinRL;		//TristatePin (Gate) to input 
     92a:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) < 733) {
     92c:	81 2f       	mov	r24, r17
     92e:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
     932:	e2 e0       	ldi	r30, 0x02	; 2
     934:	8d 3d       	cpi	r24, 0xDD	; 221
     936:	9e 07       	cpc	r25, r30
     938:	08 f4       	brcc	.+2      	; 0x93c <__stack+0x43d>
     93a:	ed c0       	rjmp	.+474    	; 0xb16 <__stack+0x617>
             goto savenresult; 		//component has no current without base current => no Triac => abort
          }
          R_PORT = HiPinRL;		//switch R_L port for HighPin to VCC => switch off holding current 
     93c:	c5 b8       	out	0x05, r12	; 5
          wait5ms();
     93e:	0e 94 29 15 	call	0x2a52	; 0x2a52 <wait5ms>
          R_PORT = 0;			//switch R_L port for HighPin again to GND; Triac should now switched off
     942:	15 b8       	out	0x05, r1	; 5
          if(W5msReadADC(HighPin) > 244) {
     944:	81 2f       	mov	r24, r17
     946:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
     94a:	85 3f       	cpi	r24, 0xF5	; 245
     94c:	91 05       	cpc	r25, r1
     94e:	08 f0       	brcs	.+2      	; 0x952 <__stack+0x453>
     950:	e2 c0       	rjmp	.+452    	; 0xb16 <__stack+0x617>
             goto savenresult;		//measure voltage at the High-Pin (probably A2) ;
                                	//if to high, component is not switched off => no Triac, abort
         }
         PartFound = PART_TRIAC;
     952:	84 e0       	ldi	r24, 0x04	; 4
     954:	80 93 07 01 	sts	0x0107, r24
         PartReady = 1;
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	80 93 04 01 	sts	0x0104, r24
         goto savenresult;
     95e:	db c0       	rjmp	.+438    	; 0xb16 <__stack+0x617>
        }
      //Test if NPN Transistor or MOSFET
      // ADC_DDR = LoADCm;	//Low-Pin to output 0V
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
     960:	6d 2c       	mov	r6, r13
     962:	6c 28       	or	r6, r12
     964:	64 b8       	out	0x04, r6	; 4
      R_PORT = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to VCC
     966:	65 b8       	out	0x05, r6	; 5
      wait50ms();
     968:	0e 94 24 15 	call	0x2a48	; 0x2a48 <wait50ms>
      adc.hp2 = U_VCC - ReadADC(HighPin);	//measure the voltage at the collector resistor 
     96c:	81 2f       	mov	r24, r17
     96e:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
     972:	b4 e7       	ldi	r27, 0x74	; 116
     974:	eb 2e       	mov	r14, r27
     976:	b3 e1       	ldi	r27, 0x13	; 19
     978:	fb 2e       	mov	r15, r27
     97a:	97 01       	movw	r18, r14
     97c:	28 1b       	sub	r18, r24
     97e:	39 0b       	sbc	r19, r25
     980:	3b 87       	std	Y+11, r19	; 0x0b
     982:	2a 87       	std	Y+10, r18	; 0x0a
      adc.tp2 = U_VCC - ReadADC(TristatePin);	//measure the voltage at the base resistor 
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
     98a:	1c 01       	movw	r2, r24
     98c:	47 01       	movw	r8, r14
     98e:	88 1a       	sub	r8, r24
     990:	99 0a       	sbc	r9, r25
       lcd_space();
       lcd_data('T');
       lcd_data('P');
       lcd_string(utoa(adc.tp2,outval,10));
#endif
      if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     992:	80 91 07 01 	lds	r24, 0x0107
     996:	82 50       	subi	r24, 0x02	; 2
     998:	82 30       	cpi	r24, 0x02	; 2
     99a:	18 f4       	brcc	.+6      	; 0x9a2 <__stack+0x4a3>
         PartReady = 1;	//check, if test is already done once
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	80 93 04 01 	sts	0x0104, r24
      }
      trans.uBE[PartReady] = U_VCC - adc.tp2 - ReadADC(LowPin);
     9a2:	e0 90 04 01 	lds	r14, 0x0104
     9a6:	ff 24       	eor	r15, r15
     9a8:	80 2f       	mov	r24, r16
     9aa:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
     9ae:	f7 01       	movw	r30, r14
     9b0:	ee 0f       	add	r30, r30
     9b2:	ff 1f       	adc	r31, r31
     9b4:	e5 5c       	subi	r30, 0xC5	; 197
     9b6:	fe 4f       	sbci	r31, 0xFE	; 254
     9b8:	28 1a       	sub	r2, r24
     9ba:	39 0a       	sbc	r3, r25
     9bc:	31 82       	std	Z+1, r3	; 0x01
     9be:	20 82       	st	Z, r2

      //compute current amplification factor for common Emitter
      //hFE = B = Collector current / Base current
      if(adc.tp2 < 53) {
     9c0:	35 e3       	ldi	r19, 0x35	; 53
     9c2:	83 16       	cp	r8, r19
     9c4:	91 04       	cpc	r9, r1
     9c6:	18 f4       	brcc	.+6      	; 0x9ce <__stack+0x4cf>
#if DebugOut == 5
         lcd_data('<');
         lcd_data('5');
         lcd_data('3');
#endif
         adc.tp2 = 53;
     9c8:	75 e3       	ldi	r23, 0x35	; 53
     9ca:	87 2e       	mov	r8, r23
     9cc:	91 2c       	mov	r9, r1
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     9ce:	80 91 04 01 	lds	r24, 0x0104
     9d2:	e8 2e       	mov	r14, r24
     9d4:	ff 24       	eor	r15, r15
     9d6:	8a 85       	ldd	r24, Y+10	; 0x0a
     9d8:	9b 85       	ldd	r25, Y+11	; 0x0b
     9da:	1c 01       	movw	r2, r24
     9dc:	44 24       	eor	r4, r4
     9de:	55 24       	eor	r5, r5
     9e0:	ab 89       	ldd	r26, Y+19	; 0x13
     9e2:	bc 89       	ldd	r27, Y+20	; 0x14
     9e4:	9d 01       	movw	r18, r26
     9e6:	40 e0       	ldi	r20, 0x00	; 0
     9e8:	50 e0       	ldi	r21, 0x00	; 0
     9ea:	60 e6       	ldi	r22, 0x60	; 96
     9ec:	77 eb       	ldi	r23, 0xB7	; 183
     9ee:	87 e4       	ldi	r24, 0x47	; 71
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__udivmodsi4>
     9f6:	c2 01       	movw	r24, r4
     9f8:	b1 01       	movw	r22, r2
     9fa:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp2;	
     9fe:	94 01       	movw	r18, r8
     a00:	40 e0       	ldi	r20, 0x00	; 0
     a02:	50 e0       	ldi	r21, 0x00	; 0
     a04:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__udivmodsi4>
#endif
         adc.tp2 = 53;
      }

#ifdef LONG_HFE
      trans.hfe[PartReady] = ((unsigned int)adc.hp2 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     a08:	f7 01       	movw	r30, r14
     a0a:	ee 0f       	add	r30, r30
     a0c:	ff 1f       	adc	r31, r31
     a0e:	ee 0f       	add	r30, r30
     a10:	ff 1f       	adc	r31, r31
     a12:	ed 5c       	subi	r30, 0xCD	; 205
     a14:	fe 4f       	sbci	r31, 0xFE	; 254
     a16:	20 83       	st	Z, r18
     a18:	31 83       	std	Z+1, r19	; 0x01
     a1a:	42 83       	std	Z+2, r20	; 0x02
     a1c:	53 83       	std	Z+3, r21	; 0x03
      trans.hfe[PartReady] = ((adc.hp2 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
#endif
#ifdef COMMON_COLLECTOR
       //compare current amplification factor for common Collector (Emitter follower)
       // hFE = (Emitterstrom - Basisstrom) / Basisstrom
       if (c_hfe >  trans.hfe[PartReady]) {
     a1e:	8f 85       	ldd	r24, Y+15	; 0x0f
     a20:	98 89       	ldd	r25, Y+16	; 0x10
     a22:	a9 89       	ldd	r26, Y+17	; 0x11
     a24:	ba 89       	ldd	r27, Y+18	; 0x12
     a26:	28 17       	cp	r18, r24
     a28:	39 07       	cpc	r19, r25
     a2a:	4a 07       	cpc	r20, r26
     a2c:	5b 07       	cpc	r21, r27
     a2e:	a8 f4       	brcc	.+42     	; 0xa5a <__stack+0x55b>
          trans.hfe[PartReady] = c_hfe;
     a30:	80 83       	st	Z, r24
     a32:	91 83       	std	Z+1, r25	; 0x01
     a34:	a2 83       	std	Z+2, r26	; 0x02
     a36:	b3 83       	std	Z+3, r27	; 0x03
          trans.uBE[PartReady] = U_VCC - adc.lp1 - adc.tp1;
     a38:	d7 01       	movw	r26, r14
     a3a:	aa 0f       	add	r26, r26
     a3c:	bb 1f       	adc	r27, r27
     a3e:	a5 5c       	subi	r26, 0xC5	; 197
     a40:	be 4f       	sbci	r27, 0xFE	; 254
     a42:	8e 81       	ldd	r24, Y+6	; 0x06
     a44:	9f 81       	ldd	r25, Y+7	; 0x07
     a46:	90 95       	com	r25
     a48:	81 95       	neg	r24
     a4a:	9f 4f       	sbci	r25, 0xFF	; 255
     a4c:	8a 19       	sub	r24, r10
     a4e:	9b 09       	sbc	r25, r11
     a50:	8c 58       	subi	r24, 0x8C	; 140
     a52:	9c 4e       	sbci	r25, 0xEC	; 236
     a54:	11 96       	adiw	r26, 0x01	; 1
     a56:	9c 93       	st	X, r25
     a58:	8e 93       	st	-X, r24
       }
#endif

      if(adc.tp2 > 2557) {		// Basis-voltage R_H is low enough
     a5a:	9e ef       	ldi	r25, 0xFE	; 254
     a5c:	89 16       	cp	r8, r25
     a5e:	99 e0       	ldi	r25, 0x09	; 9
     a60:	99 06       	cpc	r9, r25
     a62:	38 f0       	brcs	.+14     	; 0xa72 <__stack+0x573>
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
     a64:	82 e0       	ldi	r24, 0x02	; 2
     a66:	80 93 07 01 	sts	0x0107, r24
         PartMode = PART_MODE_NPN;
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	80 93 06 01 	sts	0x0106, r24
     a70:	52 c0       	rjmp	.+164    	; 0xb16 <__stack+0x617>
      } else { // Basis has low current
         if((adc.lp_otr < 97) && (adc.hp2 > 3400)) {
     a72:	ad 85       	ldd	r26, Y+13	; 0x0d
     a74:	be 85       	ldd	r27, Y+14	; 0x0e
     a76:	a1 36       	cpi	r26, 0x61	; 97
     a78:	b1 05       	cpc	r27, r1
     a7a:	08 f0       	brcs	.+2      	; 0xa7e <__stack+0x57f>
     a7c:	4c c0       	rjmp	.+152    	; 0xb16 <__stack+0x617>
     a7e:	ea 85       	ldd	r30, Y+10	; 0x0a
     a80:	fb 85       	ldd	r31, Y+11	; 0x0b
     a82:	2d e0       	ldi	r18, 0x0D	; 13
     a84:	e9 34       	cpi	r30, 0x49	; 73
     a86:	f2 07       	cpc	r31, r18
     a88:	08 f4       	brcc	.+2      	; 0xa8c <__stack+0x58d>
     a8a:	45 c0       	rjmp	.+138    	; 0xb16 <__stack+0x617>
            //if flow voltage in switched off mode low enough?
            //(since D-Mode-FET will be detected in error as E-Mode )
            PartFound = PART_FET;	//N-Kanal-MOSFET is found (Basis/Gate will Not be pulled down)
     a8c:	83 e0       	ldi	r24, 0x03	; 3
     a8e:	80 93 07 01 	sts	0x0107, r24
            PartMode = PART_MODE_N_E_MOS;
     a92:	82 e0       	ldi	r24, 0x02	; 2
     a94:	80 93 06 01 	sts	0x0106, r24
            lcd_line3();
            lcd_data('N');
            lcd_data('F');
            wait1s();
#endif
            PinMSK = HiADCm & 7;
     a98:	db 80       	ldd	r13, Y+3	; 0x03
     a9a:	37 e0       	ldi	r19, 0x07	; 7
     a9c:	d3 22       	and	r13, r19
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
     a9e:	89 81       	ldd	r24, Y+1	; 0x01
     aa0:	80 64       	ori	r24, 0x40	; 64
     aa2:	80 93 7c 00 	sts	0x007C, r24
            gthvoltage = 1;			// round up ((1*4)/9)
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	90 93 48 01 	sts	0x0148, r25
     aae:	80 93 47 01 	sts	0x0147, r24
     ab2:	4b e0       	ldi	r20, 0x0B	; 11
     ab4:	e4 2e       	mov	r14, r20
            for(ii=0;ii<11;ii++) {
            	wdt_reset();
     ab6:	a8 95       	wdr
            	ChargePin10ms(TriPinRL,0);	// discharge Gate 10ms with RL 
     ab8:	8a 81       	ldd	r24, Y+2	; 0x02
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <ChargePin10ms>
                R_DDR = HiPinRL | TriPinRH;	// slowly charge Gate 
     ac0:	64 b8       	out	0x04, r6	; 4
                R_PORT = HiPinRL | TriPinRH;
     ac2:	65 b8       	out	0x05, r6	; 5
            	while ((ADC_PIN&PinMSK));  // Wait, until the MOSFET switch and Drain moved to low 
     ac4:	86 b1       	in	r24, 0x06	; 6
     ac6:	8d 21       	and	r24, r13
     ac8:	e9 f7       	brne	.-6      	; 0xac4 <__stack+0x5c5>
                R_DDR = HiPinRL;
     aca:	c4 b8       	out	0x04, r12	; 4
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
     acc:	80 91 7a 00 	lds	r24, 0x007A
     ad0:	80 64       	ori	r24, 0x40	; 64
     ad2:	80 93 7a 00 	sts	0x007A, r24
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
     ad6:	80 91 7a 00 	lds	r24, 0x007A
     ada:	86 fd       	sbrc	r24, 6
     adc:	fc cf       	rjmp	.-8      	; 0xad6 <__stack+0x5d7>
            	gthvoltage += ADCW;		// add result of ADC
     ade:	80 91 78 00 	lds	r24, 0x0078
     ae2:	90 91 79 00 	lds	r25, 0x0079
     ae6:	20 91 47 01 	lds	r18, 0x0147
     aea:	30 91 48 01 	lds	r19, 0x0148
     aee:	82 0f       	add	r24, r18
     af0:	93 1f       	adc	r25, r19
     af2:	90 93 48 01 	sts	0x0148, r25
     af6:	80 93 47 01 	sts	0x0147, r24
     afa:	ea 94       	dec	r14
#endif
            PinMSK = HiADCm & 7;
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
            gthvoltage = 1;			// round up ((1*4)/9)
            for(ii=0;ii<11;ii++) {
     afc:	e1 f6       	brne	.-72     	; 0xab6 <__stack+0x5b7>
            	gthvoltage += ADCW;		// add result of ADC
#if DebugOut == 5
                lcd_data('.');
#endif
            }
            gthvoltage *= 4;	//is equal to 44 * ADCW
     afe:	88 0f       	add	r24, r24
     b00:	99 1f       	adc	r25, r25
     b02:	88 0f       	add	r24, r24
     b04:	99 1f       	adc	r25, r25
            gthvoltage /= 9;	//scale to mV
     b06:	69 e0       	ldi	r22, 0x09	; 9
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__udivmodhi4>
     b0e:	70 93 48 01 	sts	0x0148, r23
     b12:	60 93 47 01 	sts	0x0147, r22
         }
      }
savenresult:
      trans.b = TristatePin;	// save Pin-constellation
     b16:	89 81       	ldd	r24, Y+1	; 0x01
     b18:	80 93 3f 01 	sts	0x013F, r24
      trans.c = HighPin;
     b1c:	10 93 40 01 	sts	0x0140, r17
      trans.e = LowPin;
     b20:	00 93 41 01 	sts	0x0141, r16
   } // end component conduct => npn
   ADC_DDR = TXD_MSK;		// switch all ADC-Ports to input
     b24:	88 e0       	ldi	r24, 0x08	; 8
     b26:	87 b9       	out	0x07, r24	; 7
   ADC_PORT = TXD_VAL;		// switch all ADC-Ports to 0 (no Pull up)
     b28:	88 b9       	out	0x08, r24	; 8
   //Fertig
   //end das component has no connection between HighPin and LowPin
   goto widmes;
     b2a:	69 c0       	rjmp	.+210    	; 0xbfe <__stack+0x6ff>
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;	//Low-Pin fix to GND
     b30:	9d 81       	ldd	r25, Y+5	; 0x05
     b32:	97 b9       	out	0x07, r25	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     b34:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
     b36:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
     b38:	8a 81       	ldd	r24, Y+2	; 0x02
     b3a:	61 e0       	ldi	r22, 0x01	; 1
     b3c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <ChargePin10ms>
  adc.lp_otr = W5msReadADC(HighPin) - ReadADC(LowPin);
     b40:	81 2f       	mov	r24, r17
     b42:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
     b46:	4c 01       	movw	r8, r24
     b48:	80 2f       	mov	r24, r16
     b4a:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
     b4e:	88 1a       	sub	r8, r24
     b50:	99 0a       	sbc	r9, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
     b52:	ac 85       	ldd	r26, Y+12	; 0x0c
     b54:	a4 b9       	out	0x04, r26	; 4
  R_PORT = HiPinRH;
     b56:	a5 b9       	out	0x05, r26	; 5
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
     b58:	81 2f       	mov	r24, r17
     b5a:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
     b5e:	5c 01       	movw	r10, r24

  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     b60:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
     b62:	c5 b8       	out	0x05, r12	; 5
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
     b64:	8a 81       	ldd	r24, Y+2	; 0x02
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <ChargePin10ms>
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
     b6c:	81 2f       	mov	r24, r17
     b6e:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
     b72:	7c 01       	movw	r14, r24
     b74:	80 2f       	mov	r24, r16
     b76:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
     b7a:	e8 1a       	sub	r14, r24
     b7c:	f9 0a       	sbc	r15, r25
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
     b7e:	bc 85       	ldd	r27, Y+12	; 0x0c
     b80:	b4 b9       	out	0x04, r27	; 4
  R_PORT = HiPinRH;
     b82:	b5 b9       	out	0x05, r27	; 5
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
     b84:	81 2f       	mov	r24, r17
     b86:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
     b8a:	e8 14       	cp	r14, r8
     b8c:	f9 04       	cpc	r15, r9
     b8e:	18 f0       	brcs	.+6      	; 0xb96 <__stack+0x697>
  R_PORT = HiPinRL;
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
  adc.hp1 = W5msReadADC(HighPin) - W5msReadADC(LowPin);
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (VCC)
  R_PORT = HiPinRH;
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
     b90:	a8 2e       	mov	r10, r24
     b92:	b9 2e       	mov	r11, r25
      The additional measurement with the big resistor R_H is made, to differ antiparallel diodes
      from resistors.
      A diode has a voltage, that is nearly independent from the current.
      The voltage of a resistor is proportional to the current.
    */
  if(adc.lp_otr > adc.hp1) {
     b94:	47 01       	movw	r8, r14
  lcd_string(utoa(adc.hp3,outval,10));
  lcd_space();
  wait1s();
#endif

  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
     b96:	c4 01       	movw	r24, r8
     b98:	87 59       	subi	r24, 0x97	; 151
     b9a:	90 40       	sbci	r25, 0x00	; 0
     b9c:	e1 e1       	ldi	r30, 0x11	; 17
     b9e:	89 38       	cpi	r24, 0x89	; 137
     ba0:	9e 07       	cpc	r25, r30
     ba2:	68 f5       	brcc	.+90     	; 0xbfe <__stack+0x6ff>
     ba4:	c5 01       	movw	r24, r10
     ba6:	23 e0       	ldi	r18, 0x03	; 3
     ba8:	96 95       	lsr	r25
     baa:	87 95       	ror	r24
     bac:	2a 95       	dec	r18
     bae:	e1 f7       	brne	.-8      	; 0xba8 <__stack+0x6a9>
     bb0:	8a 0d       	add	r24, r10
     bb2:	9b 1d       	adc	r25, r11
     bb4:	88 15       	cp	r24, r8
     bb6:	99 05       	cpc	r25, r9
     bb8:	10 f5       	brcc	.+68     	; 0xbfe <__stack+0x6ff>
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	aa 0c       	add	r10, r10
     bbe:	bb 1c       	adc	r11, r11
     bc0:	8a 95       	dec	r24
     bc2:	e1 f7       	brne	.-8      	; 0xbbc <__stack+0x6bd>
     bc4:	8a 14       	cp	r8, r10
     bc6:	9b 04       	cpc	r9, r11
     bc8:	d0 f4       	brcc	.+52     	; 0xbfe <__stack+0x6ff>
     //voltage is above 0,15V and below 4,64V => Ok
     if((PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
     bca:	80 91 07 01 	lds	r24, 0x0107
     bce:	88 23       	and	r24, r24
     bd0:	11 f0       	breq	.+4      	; 0xbd6 <__stack+0x6d7>
     bd2:	86 30       	cpi	r24, 0x06	; 6
     bd4:	19 f4       	brne	.+6      	; 0xbdc <__stack+0x6dd>
        PartFound = PART_DIODE;	//mark for diode only, if no other component is found
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	80 93 07 01 	sts	0x0107, r24
				//since there is a problem with Transistors with a protection diode
#if DebugOut == 4
        lcd_data('D');
#endif
     }
     diodes[NumOfDiodes].Anode = HighPin;
     bdc:	80 91 05 01 	lds	r24, 0x0105
     be0:	e8 2f       	mov	r30, r24
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	ee 0f       	add	r30, r30
     be6:	ff 1f       	adc	r31, r31
     be8:	ee 0f       	add	r30, r30
     bea:	ff 1f       	adc	r31, r31
     bec:	e4 5b       	subi	r30, 0xB4	; 180
     bee:	fe 4f       	sbci	r31, 0xFE	; 254
     bf0:	10 83       	st	Z, r17
     diodes[NumOfDiodes].Cathode = LowPin;
     bf2:	01 83       	std	Z+1, r16	; 0x01
     diodes[NumOfDiodes].Voltage = adc.hp1;	// voltage in Millivolt 
     bf4:	93 82       	std	Z+3, r9	; 0x03
     bf6:	82 82       	std	Z+2, r8	; 0x02
     NumOfDiodes++;
     bf8:	8f 5f       	subi	r24, 0xFF	; 255
     bfa:	80 93 05 01 	sts	0x0105, r24
#endif

widmes:
#ifdef R_MESS
  // resistor measurement
  wdt_reset();
     bfe:	a8 95       	wdr
// U_SCALE can be set to 4 for better resolution of ReadADC result
 #if U_SCALE != 1
  Config.U_AVCC = U_VCC*U_SCALE;	// scale to higher resolution, mV scale is not required
     c00:	80 ed       	ldi	r24, 0xD0	; 208
     c02:	9d e4       	ldi	r25, 0x4D	; 77
     c04:	90 93 6d 01 	sts	0x016D, r25
     c08:	80 93 6c 01 	sts	0x016C, r24
  Config.U_Bandgap *= U_SCALE;
     c0c:	80 91 6a 01 	lds	r24, 0x016A
     c10:	90 91 6b 01 	lds	r25, 0x016B
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	90 93 6b 01 	sts	0x016B, r25
     c20:	80 93 6a 01 	sts	0x016A, r24
 #endif
#if R_ANZ_MESS != ANZ_MESS
  Config.Samples = R_ANZ_MESS;	// switch to special number of repetitions
     c24:	8e eb       	ldi	r24, 0xBE	; 190
     c26:	80 93 68 01 	sts	0x0168, r24
#endif
  ADC_PORT = TXD_VAL;
     c2a:	88 e0       	ldi	r24, 0x08	; 8
     c2c:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
     c2e:	fd 81       	ldd	r31, Y+5	; 0x05
     c30:	f7 b9       	out	0x07, r31	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     c32:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;	
     c34:	c5 b8       	out	0x05, r12	; 5
  adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     c36:	80 2f       	mov	r24, r16
     c38:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
     c3c:	5c 01       	movw	r10, r24
  adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     c3e:	81 2f       	mov	r24, r17
     c40:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
     c44:	1c 01       	movw	r2, r24
  if (adc.tp1 > adc.hp1) {
     adc.tp1 = adc.hp1;
  }
  R_PORT = 0;
     c46:	15 b8       	out	0x05, r1	; 5
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (GND)
     c48:	2c 85       	ldd	r18, Y+12	; 0x0c
     c4a:	24 b9       	out	0x04, r18	; 4
  adc.hp2 = W5msReadADC(HighPin);	// read voltage, should be down
     c4c:	81 2f       	mov	r24, r17
     c4e:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
  if (adc.hp2 > (20*U_SCALE)) {
     c52:	81 35       	cpi	r24, 0x51	; 81
     c54:	91 05       	cpc	r25, r1
     c56:	08 f0       	brcs	.+2      	; 0xc5a <__stack+0x75b>
     c58:	7c c1       	rjmp	.+760    	; 0xf52 <__stack+0xa53>
     lcd_string(utoa(adc.hp2, outval, 10));
     lcd_space();
 #endif
     goto testend;
  }
  R_PORT = HiPinRH;		//switch R_H for High-Pin to VCC
     c5a:	3c 85       	ldd	r19, Y+12	; 0x0c
     c5c:	35 b9       	out	0x05, r19	; 5
  adc.hp2 = W5msReadADC(HighPin);	// voltage at resistor Rx with R_H
     c5e:	81 2f       	mov	r24, r17
     c60:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
     c64:	6c 01       	movw	r12, r24

  ADC_DDR = HiADCm;		//switch High-Pin to output
     c66:	8b 81       	ldd	r24, Y+3	; 0x03
     c68:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
     c6a:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;
     c6c:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
     c6e:	9c 81       	ldd	r25, Y+4	; 0x04
     c70:	94 b9       	out	0x04, r25	; 4
  adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     c72:	81 2f       	mov	r24, r17
     c74:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
     c78:	4c 01       	movw	r8, r24
  adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     c7a:	80 2f       	mov	r24, r16
     c7c:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
     c80:	7c 01       	movw	r14, r24
#else
  #define RR680PL (R_L_VAL + PIN_RP)
  #define RR680MI (R_L_VAL + PIN_RM)
#endif
  LoPinRL = MEM_read_byte(&PinRLtab[LowPin]);		// intruction for LowPin R_L
  LoPinRH = LoPinRL + LoPinRL;				// intruction for LowPin R_H
     c82:	8c 81       	ldd	r24, Y+4	; 0x04
     c84:	88 0f       	add	r24, r24
  adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
  adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
  if (adc.tp2 < adc.lp1) {
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
     c86:	84 b9       	out	0x04, r24	; 4
  adc.lp2 = W5msReadADC(LowPin);
     c88:	80 2f       	mov	r24, r16
     c8a:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
     c8e:	3c 01       	movw	r6, r24
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
     c90:	a0 ec       	ldi	r26, 0xC0	; 192
     c92:	2a 16       	cp	r2, r26
     c94:	a4 e4       	ldi	r26, 0x44	; 68
     c96:	3a 06       	cpc	r3, r26
     c98:	30 f4       	brcc	.+12     	; 0xca6 <__stack+0x7a7>
     c9a:	b5 e8       	ldi	r27, 0x85	; 133
     c9c:	cb 16       	cp	r12, r27
     c9e:	b1 e0       	ldi	r27, 0x01	; 1
     ca0:	db 06       	cpc	r13, r27
     ca2:	38 f0       	brcs	.+14     	; 0xcb2 <__stack+0x7b3>
     ca4:	56 c1       	rjmp	.+684    	; 0xf52 <__stack+0xa53>
     lcd_data('F');
 #endif
     goto testend; 
  }
//    if((adc.hp2 + (adc.hp2 / 61)) < adc.hp1)
  if (adc.hp2 < (4972*U_SCALE)) { 
     ca6:	e0 eb       	ldi	r30, 0xB0	; 176
     ca8:	ce 16       	cp	r12, r30
     caa:	ed e4       	ldi	r30, 0x4D	; 77
     cac:	de 06       	cpc	r13, r30
     cae:	08 f0       	brcs	.+2      	; 0xcb2 <__stack+0x7b3>
     cb0:	50 c1       	rjmp	.+672    	; 0xf52 <__stack+0xa53>
     // voltage breaks down with low test current and it is not nearly shorted  => resistor
//     if (adc.lp1 < 120) { // take measurement with R_H 
     if (adc.lp1 < (169*U_SCALE)) { // take measurement with R_H 
     cb2:	f4 ea       	ldi	r31, 0xA4	; 164
     cb4:	ef 16       	cp	r14, r31
     cb6:	f2 e0       	ldi	r31, 0x02	; 2
     cb8:	ff 06       	cpc	r15, r31
     cba:	08 f0       	brcs	.+2      	; 0xcbe <__stack+0x7bf>
     cbc:	72 c0       	rjmp	.+228    	; 0xda2 <__stack+0x8a3>
        ii = 'H';
        if (adc.lp2 < (38*U_SCALE)) {
     cbe:	28 e9       	ldi	r18, 0x98	; 152
     cc0:	62 16       	cp	r6, r18
     cc2:	71 04       	cpc	r7, r1
     cc4:	08 f4       	brcc	.+2      	; 0xcc8 <__stack+0x7c9>
     cc6:	45 c1       	rjmp	.+650    	; 0xf52 <__stack+0xa53>
        }
        // two measurements with R_H resistors (470k) are made:
        // lirx1 (measurement at HighPin)
//        ukorr = (int)((U_VCC * U_SCALE) - adc.hp2) / ((U_VCC*U_SCALE)/(7*U_SCALE)) + (2*U_SCALE);
//        adc.hp2 += ukorr;
        lirx1 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)adc.hp2 / ((U_VCC*U_SCALE) - adc.hp2);
     cc8:	b6 01       	movw	r22, r12
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	28 e9       	ldi	r18, 0x98	; 152
     cd0:	37 eb       	ldi	r19, 0xB7	; 183
     cd2:	40 e0       	ldi	r20, 0x00	; 0
     cd4:	50 e0       	ldi	r21, 0x00	; 0
     cd6:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__mulsi3>
     cda:	f0 ed       	ldi	r31, 0xD0	; 208
     cdc:	ef 2e       	mov	r14, r31
     cde:	fd e4       	ldi	r31, 0x4D	; 77
     ce0:	ff 2e       	mov	r15, r31
     ce2:	97 01       	movw	r18, r14
     ce4:	2c 19       	sub	r18, r12
     ce6:	3d 09       	sbc	r19, r13
     ce8:	40 e0       	ldi	r20, 0x00	; 0
     cea:	50 e0       	ldi	r21, 0x00	; 0
     cec:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__udivmodsi4>
     cf0:	49 01       	movw	r8, r18
     cf2:	5a 01       	movw	r10, r20
        // lirx2 (measurement at LowPin)
//        ukorr = (int)((U_VCC * U_SCALE)/2 - adc.lp2) / ((U_VCC*U_SCALE)/(12*U_SCALE));
//        adc.lp2 += ukorr;
        lirx2 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)((U_VCC*U_SCALE) - adc.lp2) / adc.lp2;
     cf4:	e6 18       	sub	r14, r6
     cf6:	f7 08       	sbc	r15, r7
     cf8:	b7 01       	movw	r22, r14
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	28 e9       	ldi	r18, 0x98	; 152
     d00:	37 eb       	ldi	r19, 0xB7	; 183
     d02:	40 e0       	ldi	r20, 0x00	; 0
     d04:	50 e0       	ldi	r21, 0x00	; 0
     d06:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__mulsi3>
     d0a:	93 01       	movw	r18, r6
     d0c:	40 e0       	ldi	r20, 0x00	; 0
     d0e:	50 e0       	ldi	r21, 0x00	; 0
     d10:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__udivmodsi4>
#define FAKT_LOW 2		//resolution is about twice as good
#else
#define FAKT_LOW 4		//resolution is about four times better
#endif
#ifdef AUTOSCALE_ADC
        if (adc.hp2 < U_INT_LIMIT) {
     d14:	88 e7       	ldi	r24, 0x78	; 120
     d16:	c8 16       	cp	r12, r24
     d18:	8f e0       	ldi	r24, 0x0F	; 15
     d1a:	d8 06       	cpc	r13, r24
     d1c:	70 f4       	brcc	.+28     	; 0xd3a <__stack+0x83b>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_H measurements
     d1e:	c5 01       	movw	r24, r10
     d20:	b4 01       	movw	r22, r8
     d22:	e2 e0       	ldi	r30, 0x02	; 2
     d24:	66 0f       	add	r22, r22
     d26:	77 1f       	adc	r23, r23
     d28:	88 1f       	adc	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	ea 95       	dec	r30
     d2e:	d1 f7       	brne	.-12     	; 0xd24 <__stack+0x825>
     d30:	62 0f       	add	r22, r18
     d32:	73 1f       	adc	r23, r19
     d34:	84 1f       	adc	r24, r20
     d36:	95 1f       	adc	r25, r21
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__stack+0x85f>
        } else if (adc.lp2 < U_INT_LIMIT){
     d3a:	98 e7       	ldi	r25, 0x78	; 120
     d3c:	69 16       	cp	r6, r25
     d3e:	9f e0       	ldi	r25, 0x0F	; 15
     d40:	79 06       	cpc	r7, r25
     d42:	a0 f4       	brcc	.+40     	; 0xd6c <__stack+0x86d>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
     d44:	ca 01       	movw	r24, r20
     d46:	b9 01       	movw	r22, r18
     d48:	b2 e0       	ldi	r27, 0x02	; 2
     d4a:	66 0f       	add	r22, r22
     d4c:	77 1f       	adc	r23, r23
     d4e:	88 1f       	adc	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	ba 95       	dec	r27
     d54:	d1 f7       	brne	.-12     	; 0xd4a <__stack+0x84b>
     d56:	68 0d       	add	r22, r8
     d58:	79 1d       	adc	r23, r9
     d5a:	8a 1d       	adc	r24, r10
     d5c:	9b 1d       	adc	r25, r11
     d5e:	25 e0       	ldi	r18, 0x05	; 5
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	40 e0       	ldi	r20, 0x00	; 0
     d64:	50 e0       	ldi	r21, 0x00	; 0
     d66:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__udivmodsi4>
     d6a:	08 c0       	rjmp	.+16     	; 0xd7c <__stack+0x87d>
        } else 
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_H measurements
     d6c:	28 0d       	add	r18, r8
     d6e:	39 1d       	adc	r19, r9
     d70:	4a 1d       	adc	r20, r10
     d72:	5b 1d       	adc	r21, r11
     d74:	56 95       	lsr	r21
     d76:	47 95       	ror	r20
     d78:	37 95       	ror	r19
     d7a:	27 95       	ror	r18
        }
        lrx1 *= 100;
     d7c:	ca 01       	movw	r24, r20
     d7e:	b9 01       	movw	r22, r18
     d80:	24 e6       	ldi	r18, 0x64	; 100
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 e0       	ldi	r20, 0x00	; 0
     d86:	50 e0       	ldi	r21, 0x00	; 0
     d88:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__mulsi3>
     d8c:	6b 01       	movw	r12, r22
     d8e:	7c 01       	movw	r14, r24
        lrx1 += RH_OFFSET;			// add constant for correction of systematic error
     d90:	8c ea       	ldi	r24, 0xAC	; 172
     d92:	9d e0       	ldi	r25, 0x0D	; 13
     d94:	a0 e0       	ldi	r26, 0x00	; 0
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	c8 0e       	add	r12, r24
     d9a:	d9 1e       	adc	r13, r25
     d9c:	ea 1e       	adc	r14, r26
     d9e:	fb 1e       	adc	r15, r27
     da0:	73 c0       	rjmp	.+230    	; 0xe88 <__stack+0x989>
     da2:	c1 01       	movw	r24, r2
     da4:	a2 14       	cp	r10, r2
     da6:	b3 04       	cpc	r11, r3
     da8:	08 f4       	brcc	.+2      	; 0xdac <__stack+0x8ad>
     daa:	c5 01       	movw	r24, r10
     dac:	67 01       	movw	r12, r14
     dae:	e8 14       	cp	r14, r8
     db0:	f9 04       	cpc	r15, r9
     db2:	08 f4       	brcc	.+2      	; 0xdb6 <__stack+0x8b7>
     db4:	64 01       	movw	r12, r8
     db6:	3c 01       	movw	r6, r24
     db8:	82 15       	cp	r24, r2
     dba:	93 05       	cpc	r25, r3
     dbc:	08 f4       	brcc	.+2      	; 0xdc0 <__stack+0x8c1>
     dbe:	31 01       	movw	r6, r2
        // lirx1 (measurement at HighPin)
#if 1
        if (adc.tp1 > adc.hp1) {
           adc.hp1 = adc.tp1;		//diff negativ is illegal
        }
        lirx1 =(unsigned long)RR680PL * (unsigned long)(adc.hp1 - adc.tp1) / ((U_VCC*U_SCALE) - adc.hp1);
     dc0:	b3 01       	movw	r22, r6
     dc2:	68 1b       	sub	r22, r24
     dc4:	79 0b       	sbc	r23, r25
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	ab 89       	ldd	r26, Y+19	; 0x13
     dcc:	bc 89       	ldd	r27, Y+20	; 0x14
     dce:	9d 01       	movw	r18, r26
     dd0:	40 e0       	ldi	r20, 0x00	; 0
     dd2:	50 e0       	ldi	r21, 0x00	; 0
     dd4:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__mulsi3>
     dd8:	20 ed       	ldi	r18, 0xD0	; 208
     dda:	3d e4       	ldi	r19, 0x4D	; 77
     ddc:	26 19       	sub	r18, r6
     dde:	37 09       	sbc	r19, r7
     de0:	40 e0       	ldi	r20, 0x00	; 0
     de2:	50 e0       	ldi	r21, 0x00	; 0
     de4:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__udivmodsi4>
     de8:	49 01       	movw	r8, r18
     dea:	5a 01       	movw	r10, r20
     dec:	16 01       	movw	r2, r12
     dee:	ec 14       	cp	r14, r12
     df0:	fd 04       	cpc	r15, r13
     df2:	08 f4       	brcc	.+2      	; 0xdf6 <__stack+0x8f7>
     df4:	17 01       	movw	r2, r14
        if (adc.tp2 < adc.lp1) {
           adc.lp1 = adc.tp2;		//diff negativ is illegal
        }
        // lirx2 (Measurement at LowPin)
        lirx2 =(unsigned long)RR680MI * (unsigned long)(adc.tp2 -adc.lp1) / adc.lp1;
     df6:	c2 18       	sub	r12, r2
     df8:	d3 08       	sbc	r13, r3
     dfa:	b6 01       	movw	r22, r12
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	ed 89       	ldd	r30, Y+21	; 0x15
     e02:	fe 89       	ldd	r31, Y+22	; 0x16
     e04:	9f 01       	movw	r18, r30
     e06:	40 e0       	ldi	r20, 0x00	; 0
     e08:	50 e0       	ldi	r21, 0x00	; 0
     e0a:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__mulsi3>
     e0e:	91 01       	movw	r18, r2
     e10:	40 e0       	ldi	r20, 0x00	; 0
     e12:	50 e0       	ldi	r21, 0x00	; 0
     e14:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__udivmodsi4>
        if (lirx2 > (RR680PL - R_L_VAL))  lirx2 -= (RR680PL - R_L_VAL);
        else     lirx2 = 0;
#endif

#ifdef AUTOSCALE_ADC
        if (adc.hp1 < U_INT_LIMIT) {
     e18:	f8 e7       	ldi	r31, 0x78	; 120
     e1a:	6f 16       	cp	r6, r31
     e1c:	ff e0       	ldi	r31, 0x0F	; 15
     e1e:	7f 06       	cpc	r7, r31
     e20:	70 f4       	brcc	.+28     	; 0xe3e <__stack+0x93f>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_L measurements
     e22:	c5 01       	movw	r24, r10
     e24:	b4 01       	movw	r22, r8
     e26:	f2 e0       	ldi	r31, 0x02	; 2
     e28:	66 0f       	add	r22, r22
     e2a:	77 1f       	adc	r23, r23
     e2c:	88 1f       	adc	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	fa 95       	dec	r31
     e32:	d1 f7       	brne	.-12     	; 0xe28 <__stack+0x929>
     e34:	62 0f       	add	r22, r18
     e36:	73 1f       	adc	r23, r19
     e38:	84 1f       	adc	r24, r20
     e3a:	95 1f       	adc	r25, r21
     e3c:	12 c0       	rjmp	.+36     	; 0xe62 <__stack+0x963>
        } else if (adc.lp1 < U_INT_LIMIT) {
     e3e:	88 e7       	ldi	r24, 0x78	; 120
     e40:	28 16       	cp	r2, r24
     e42:	8f e0       	ldi	r24, 0x0F	; 15
     e44:	38 06       	cpc	r3, r24
     e46:	b0 f4       	brcc	.+44     	; 0xe74 <__stack+0x975>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
     e48:	ca 01       	movw	r24, r20
     e4a:	b9 01       	movw	r22, r18
     e4c:	e2 e0       	ldi	r30, 0x02	; 2
     e4e:	66 0f       	add	r22, r22
     e50:	77 1f       	adc	r23, r23
     e52:	88 1f       	adc	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	ea 95       	dec	r30
     e58:	d1 f7       	brne	.-12     	; 0xe4e <__stack+0x94f>
     e5a:	68 0d       	add	r22, r8
     e5c:	79 1d       	adc	r23, r9
     e5e:	8a 1d       	adc	r24, r10
     e60:	9b 1d       	adc	r25, r11
     e62:	25 e0       	ldi	r18, 0x05	; 5
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	40 e0       	ldi	r20, 0x00	; 0
     e68:	50 e0       	ldi	r21, 0x00	; 0
     e6a:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__udivmodsi4>
     e6e:	69 01       	movw	r12, r18
     e70:	7a 01       	movw	r14, r20
     e72:	0a c0       	rjmp	.+20     	; 0xe88 <__stack+0x989>
        } else
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_L measurements
     e74:	69 01       	movw	r12, r18
     e76:	7a 01       	movw	r14, r20
     e78:	c8 0c       	add	r12, r8
     e7a:	d9 1c       	adc	r13, r9
     e7c:	ea 1c       	adc	r14, r10
     e7e:	fb 1c       	adc	r15, r11
     e80:	f6 94       	lsr	r15
     e82:	e7 94       	ror	r14
     e84:	d7 94       	ror	r13
     e86:	c7 94       	ror	r12
//  (void) value_out(lrx1, 2);
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
     e88:	80 91 07 01 	lds	r24, 0x0107
     e8c:	82 30       	cpi	r24, 0x02	; 2
     e8e:	18 f0       	brcs	.+6      	; 0xe96 <__stack+0x997>
     e90:	86 30       	cpi	r24, 0x06	; 6
     e92:	09 f0       	breq	.+2      	; 0xe96 <__stack+0x997>
     e94:	5e c0       	rjmp	.+188    	; 0xf52 <__stack+0xa53>
        for (ii=0; ii<ResistorsFound; ii++) {
     e96:	30 91 42 01 	lds	r19, 0x0142
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	40 c0       	rjmp	.+128    	; 0xf1e <__stack+0xa1f>
           // search measurements with inverse polarity 
           thisR = &resis[ii];
     e9e:	82 2f       	mov	r24, r18
     ea0:	90 e0       	ldi	r25, 0x00	; 0
           if (thisR->rt != TristatePin) {
     ea2:	fc 01       	movw	r30, r24
     ea4:	53 e0       	ldi	r21, 0x03	; 3
     ea6:	ee 0f       	add	r30, r30
     ea8:	ff 1f       	adc	r31, r31
     eaa:	5a 95       	dec	r21
     eac:	e1 f7       	brne	.-8      	; 0xea6 <__stack+0x9a7>
     eae:	e8 1b       	sub	r30, r24
     eb0:	f9 0b       	sbc	r31, r25
     eb2:	e9 5e       	subi	r30, 0xE9	; 233
     eb4:	fe 4f       	sbci	r31, 0xFE	; 254
     eb6:	86 81       	ldd	r24, Z+6	; 0x06
     eb8:	99 81       	ldd	r25, Y+1	; 0x01
     eba:	89 17       	cp	r24, r25
     ebc:	11 f0       	breq	.+4      	; 0xec2 <__stack+0x9c3>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
     ebe:	2f 5f       	subi	r18, 0xFF	; 255
     ec0:	2e c0       	rjmp	.+92     	; 0xf1e <__stack+0xa1f>
           if (thisR->rt != TristatePin) {
              continue;
           }
           // must be measurement with inverse polarity 
           // resolution is 0.1 Ohm, 1 Ohm = 10 !
           lirx1 = (labs((long)lrx1 - (long)thisR->rx) * 10) / (lrx1 + thisR->rx + 100);
     ec2:	80 80       	ld	r8, Z
     ec4:	91 80       	ldd	r9, Z+1	; 0x01
     ec6:	a2 80       	ldd	r10, Z+2	; 0x02
     ec8:	b3 80       	ldd	r11, Z+3	; 0x03
     eca:	c7 01       	movw	r24, r14
     ecc:	b6 01       	movw	r22, r12
     ece:	68 19       	sub	r22, r8
     ed0:	79 09       	sbc	r23, r9
     ed2:	8a 09       	sbc	r24, r10
     ed4:	9b 09       	sbc	r25, r11
     ed6:	97 ff       	sbrs	r25, 7
     ed8:	07 c0       	rjmp	.+14     	; 0xee8 <__stack+0x9e9>
     eda:	90 95       	com	r25
     edc:	80 95       	com	r24
     ede:	70 95       	com	r23
     ee0:	61 95       	neg	r22
     ee2:	7f 4f       	sbci	r23, 0xFF	; 255
     ee4:	8f 4f       	sbci	r24, 0xFF	; 255
     ee6:	9f 4f       	sbci	r25, 0xFF	; 255
     ee8:	2a e0       	ldi	r18, 0x0A	; 10
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	40 e0       	ldi	r20, 0x00	; 0
     eee:	50 e0       	ldi	r21, 0x00	; 0
     ef0:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__mulsi3>
     ef4:	a5 01       	movw	r20, r10
     ef6:	94 01       	movw	r18, r8
     ef8:	2c 59       	subi	r18, 0x9C	; 156
     efa:	3f 4f       	sbci	r19, 0xFF	; 255
     efc:	4f 4f       	sbci	r20, 0xFF	; 255
     efe:	5f 4f       	sbci	r21, 0xFF	; 255
     f00:	2c 0d       	add	r18, r12
     f02:	3d 1d       	adc	r19, r13
     f04:	4e 1d       	adc	r20, r14
     f06:	5f 1d       	adc	r21, r15
     f08:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__udivmodsi4>
           if (lirx1  > 0) {
     f0c:	21 15       	cp	r18, r1
     f0e:	31 05       	cpc	r19, r1
     f10:	41 05       	cpc	r20, r1
     f12:	51 05       	cpc	r21, r1
     f14:	f1 f4       	brne	.+60     	; 0xf52 <__stack+0xa53>
              DisplayValue(lirx1,-1,LCD_CHAR_OMEGA,3)
              lcd_space();
 #endif
              goto testend; // <10% mismatch
           }
           PartFound = PART_RESISTOR;
     f16:	86 e0       	ldi	r24, 0x06	; 6
     f18:	80 93 07 01 	sts	0x0107, r24
           goto testend;
     f1c:	1a c0       	rjmp	.+52     	; 0xf52 <__stack+0xa53>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
     f1e:	23 17       	cp	r18, r19
     f20:	08 f4       	brcc	.+2      	; 0xf24 <__stack+0xa25>
     f22:	bd cf       	rjmp	.-134    	; 0xe9e <__stack+0x99f>
           }
           PartFound = PART_RESISTOR;
           goto testend;
        } // end for
        // no same resistor with the same Tristate-Pin found, new one
        thisR = &resis[ResistorsFound];		// pointer to a free resistor structure
     f24:	83 2f       	mov	r24, r19
     f26:	90 e0       	ldi	r25, 0x00	; 0
        thisR->rx = lrx1;		// save resistor value
     f28:	fc 01       	movw	r30, r24
     f2a:	43 e0       	ldi	r20, 0x03	; 3
     f2c:	ee 0f       	add	r30, r30
     f2e:	ff 1f       	adc	r31, r31
     f30:	4a 95       	dec	r20
     f32:	e1 f7       	brne	.-8      	; 0xf2c <__stack+0xa2d>
     f34:	e8 1b       	sub	r30, r24
     f36:	f9 0b       	sbc	r31, r25
     f38:	e9 5e       	subi	r30, 0xE9	; 233
     f3a:	fe 4f       	sbci	r31, 0xFE	; 254
     f3c:	c0 82       	st	Z, r12
     f3e:	d1 82       	std	Z+1, r13	; 0x01
     f40:	e2 82       	std	Z+2, r14	; 0x02
     f42:	f3 82       	std	Z+3, r15	; 0x03
        thisR->ra = LowPin;		// save Pin numbers
     f44:	04 83       	std	Z+4, r16	; 0x04
        thisR->rb = HighPin;
     f46:	15 83       	std	Z+5, r17	; 0x05
        thisR->rt = TristatePin;	// Tristate is saved for easier search of inverse measurement
     f48:	a9 81       	ldd	r26, Y+1	; 0x01
     f4a:	a6 83       	std	Z+6, r26	; 0x06
        ResistorsFound++;			// 1 more resistor found
     f4c:	3f 5f       	subi	r19, 0xFF	; 255
     f4e:	30 93 42 01 	sts	0x0142, r19
     }
  }
#endif
  testend:
#if U_SCALE != 1
  Config.U_AVCC = U_VCC;		// scale back to mV resolution
     f52:	84 e7       	ldi	r24, 0x74	; 116
     f54:	93 e1       	ldi	r25, 0x13	; 19
     f56:	90 93 6d 01 	sts	0x016D, r25
     f5a:	80 93 6c 01 	sts	0x016C, r24
  Config.U_Bandgap /= U_SCALE;
     f5e:	80 91 6a 01 	lds	r24, 0x016A
     f62:	90 91 6b 01 	lds	r25, 0x016B
     f66:	96 95       	lsr	r25
     f68:	87 95       	ror	r24
     f6a:	96 95       	lsr	r25
     f6c:	87 95       	ror	r24
     f6e:	90 93 6b 01 	sts	0x016B, r25
     f72:	80 93 6a 01 	sts	0x016A, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  Config.Samples = ANZ_MESS;		// switch back to standard number of repetition
     f76:	89 e1       	ldi	r24, 0x19	; 25
     f78:	80 93 68 01 	sts	0x0168, r24
#ifdef DebugOut
#if DebugOut < 10
  wait2s();
#endif
#endif
  ADC_DDR = TXD_MSK;		// all ADC-Pins Input
     f7c:	88 e0       	ldi	r24, 0x08	; 8
     f7e:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// all ADC outputs to Ground, keine Pull up
     f80:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// all resistor-outputs to Input
     f82:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// all resistor-outputs to Ground, no Pull up
     f84:	15 b8       	out	0x05, r1	; 5
} // end CheckPins()
     f86:	69 96       	adiw	r28, 0x19	; 25
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	f8 94       	cli
     f8c:	de bf       	out	0x3e, r29	; 62
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	cd bf       	out	0x3d, r28	; 61
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	1f 91       	pop	r17
     f98:	0f 91       	pop	r16
     f9a:	ff 90       	pop	r15
     f9c:	ef 90       	pop	r14
     f9e:	df 90       	pop	r13
     fa0:	cf 90       	pop	r12
     fa2:	bf 90       	pop	r11
     fa4:	af 90       	pop	r10
     fa6:	9f 90       	pop	r9
     fa8:	8f 90       	pop	r8
     faa:	7f 90       	pop	r7
     fac:	6f 90       	pop	r6
     fae:	5f 90       	pop	r5
     fb0:	4f 90       	pop	r4
     fb2:	3f 90       	pop	r3
     fb4:	2f 90       	pop	r2
     fb6:	08 95       	ret

00000fb8 <EntladePins>:

// first discharge any charge of capacitors
void EntladePins() {
     fb8:	af 92       	push	r10
     fba:	bf 92       	push	r11
     fbc:	cf 92       	push	r12
     fbe:	df 92       	push	r13
     fc0:	ef 92       	push	r14
     fc2:	ff 92       	push	r15
     fc4:	0f 93       	push	r16
     fc6:	1f 93       	push	r17
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	8a e0       	ldi	r24, 0x0A	; 10
     fce:	c8 2e       	mov	r12, r24
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     fd0:	08 e0       	ldi	r16, 0x08	; 8
     fd2:	d0 2e       	mov	r13, r16
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     R_PORT = 0;			// R-outputs auf 0
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     fd4:	1a e2       	ldi	r17, 0x2A	; 42
     fd6:	a1 2e       	mov	r10, r17
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     fd8:	b5 e1       	ldi	r27, 0x15	; 21
     fda:	bb 2e       	mov	r11, r27
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     fdc:	d7 b8       	out	0x07, r13	; 7
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     fde:	d8 b8       	out	0x08, r13	; 8
     R_PORT = 0;			// R-outputs auf 0
     fe0:	15 b8       	out	0x05, r1	; 5
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     fe2:	a4 b8       	out	0x04, r10	; 4
     adcmv[0] = W5msReadADC(PC0);	// which voltage has Pin 1?
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
     fea:	8c 01       	movw	r16, r24
     adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
     ff2:	ec 01       	movw	r28, r24
     adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     ff4:	82 e0       	ldi	r24, 0x02	; 2
     ff6:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
     if ((PartFound == PART_CELL) || (adcmv[0] < CAP_EMPTY_LEVEL) & (adcmv[1] < CAP_EMPTY_LEVEL) & (adcmv[2] < CAP_EMPTY_LEVEL)) {
     ffa:	20 91 07 01 	lds	r18, 0x0107
     ffe:	28 30       	cpi	r18, 0x08	; 8
    1000:	c1 f0       	breq	.+48     	; 0x1032 <EntladePins+0x7a>
    1002:	41 e0       	ldi	r20, 0x01	; 1
    1004:	c4 30       	cpi	r28, 0x04	; 4
    1006:	d1 05       	cpc	r29, r1
    1008:	08 f0       	brcs	.+2      	; 0x100c <EntladePins+0x54>
    100a:	40 e0       	ldi	r20, 0x00	; 0
    100c:	21 e0       	ldi	r18, 0x01	; 1
    100e:	04 30       	cpi	r16, 0x04	; 4
    1010:	11 05       	cpc	r17, r1
    1012:	08 f0       	brcs	.+2      	; 0x1016 <EntladePins+0x5e>
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	42 23       	and	r20, r18
    1018:	50 e0       	ldi	r21, 0x00	; 0
    101a:	21 e0       	ldi	r18, 0x01	; 1
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	84 30       	cpi	r24, 0x04	; 4
    1020:	91 05       	cpc	r25, r1
    1022:	10 f0       	brcs	.+4      	; 0x1028 <EntladePins+0x70>
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	24 23       	and	r18, r20
    102a:	35 23       	and	r19, r21
    102c:	21 15       	cp	r18, r1
    102e:	31 05       	cpc	r19, r1
    1030:	21 f0       	breq	.+8      	; 0x103a <EntladePins+0x82>
        ADC_DDR = TXD_MSK;		// switch all ADC-Pins to input
    1032:	88 e0       	ldi	r24, 0x08	; 8
    1034:	87 b9       	out	0x07, r24	; 7
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
    1036:	14 b8       	out	0x04, r1	; 4
        return;
    1038:	4f c0       	rjmp	.+158    	; 0x10d8 <EntladePins+0x120>
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
    103a:	23 e0       	ldi	r18, 0x03	; 3
    103c:	08 3e       	cpi	r16, 0xE8	; 232
    103e:	12 07       	cpc	r17, r18
    1040:	10 f0       	brcs	.+4      	; 0x1046 <EntladePins+0x8e>
  uint8_t lop_cnt;		// loop counter
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
    1042:	28 e0       	ldi	r18, 0x08	; 8
    1044:	01 c0       	rjmp	.+2      	; 0x1048 <EntladePins+0x90>
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
        return;
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
        adc_gnd |= (1<<PC0);	//Pin 1 directly to GND
    1046:	29 e0       	ldi	r18, 0x09	; 9
     }
     if (adcmv[1] < 1000) {
    1048:	33 e0       	ldi	r19, 0x03	; 3
    104a:	c8 3e       	cpi	r28, 0xE8	; 232
    104c:	d3 07       	cpc	r29, r19
    104e:	08 f4       	brcc	.+2      	; 0x1052 <EntladePins+0x9a>
        adc_gnd |= (1<<PC1);	//Pin 2 directly to GND
    1050:	22 60       	ori	r18, 0x02	; 2
     }
     if (adcmv[2] < 1000) {
    1052:	33 e0       	ldi	r19, 0x03	; 3
    1054:	88 3e       	cpi	r24, 0xE8	; 232
    1056:	93 07       	cpc	r25, r19
    1058:	08 f4       	brcc	.+2      	; 0x105c <EntladePins+0xa4>
        adc_gnd |= (1<<PC2);	//Pin 3 directly to  GND
    105a:	24 60       	ori	r18, 0x04	; 4
     }
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time
    105c:	27 b9       	out	0x07, r18	; 7

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
    105e:	b4 b8       	out	0x04, r11	; 4
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    1060:	c0 e0       	ldi	r28, 0x00	; 0
    1062:	d0 e0       	ldi	r29, 0x00	; 0
        wdt_reset();
    1064:	a8 95       	wdr
        adcmv[0] = W20msReadADC(PC0);	// which voltage has Pin 1?
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	0e 94 40 15 	call	0x2a80	; 0x2a80 <W20msReadADC>
    106c:	7c 01       	movw	r14, r24
        adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
    1074:	8c 01       	movw	r16, r24
        adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
    1076:	82 e0       	ldi	r24, 0x02	; 2
    1078:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
        if (adcmv[0] < 1300) {
    107c:	24 e1       	ldi	r18, 0x14	; 20
    107e:	e2 16       	cp	r14, r18
    1080:	25 e0       	ldi	r18, 0x05	; 5
    1082:	f2 06       	cpc	r15, r18
    1084:	08 f4       	brcc	.+2      	; 0x1088 <EntladePins+0xd0>
           ADC_DDR |= (1<<PC0);	// below 1.3V , switch directly with ADC-Port to GND
    1086:	38 9a       	sbi	0x07, 0	; 7
        }
        if (adcmv[1] < 1300) {
    1088:	35 e0       	ldi	r19, 0x05	; 5
    108a:	04 31       	cpi	r16, 0x14	; 20
    108c:	13 07       	cpc	r17, r19
    108e:	08 f4       	brcc	.+2      	; 0x1092 <EntladePins+0xda>
           ADC_DDR |= (1<<PC1);	// below 1.3V, switch directly with ADC-Port to GND
    1090:	39 9a       	sbi	0x07, 1	; 7
        }
        if (adcmv[2] < 1300) {
    1092:	25 e0       	ldi	r18, 0x05	; 5
    1094:	84 31       	cpi	r24, 0x14	; 20
    1096:	92 07       	cpc	r25, r18
    1098:	08 f4       	brcc	.+2      	; 0x109c <EntladePins+0xe4>
           ADC_DDR |= (1<<PC2);	// below 1.3V, switch directly with ADC-Port to GND
    109a:	3a 9a       	sbi	0x07, 2	; 7
        }
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
    109c:	36 e0       	ldi	r19, 0x06	; 6
    109e:	e3 16       	cp	r14, r19
    10a0:	f1 04       	cpc	r15, r1
    10a2:	30 f4       	brcc	.+12     	; 0x10b0 <EntladePins+0xf8>
    10a4:	06 30       	cpi	r16, 0x06	; 6
    10a6:	11 05       	cpc	r17, r1
    10a8:	18 f4       	brcc	.+6      	; 0x10b0 <EntladePins+0xf8>
    10aa:	86 30       	cpi	r24, 0x06	; 6
    10ac:	91 05       	cpc	r25, r1
    10ae:	38 f0       	brcs	.+14     	; 0x10be <EntladePins+0x106>

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    10b0:	21 96       	adiw	r28, 0x01	; 1
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	c4 3f       	cpi	r28, 0xF4	; 244
    10b6:	d8 07       	cpc	r29, r24
    10b8:	a9 f6       	brne	.-86     	; 0x1064 <EntladePins+0xac>
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
           break;
        }
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
    10ba:	d0 92 07 01 	sts	0x0107, r13

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    10be:	00 e0       	ldi	r16, 0x00	; 0
    10c0:	10 e0       	ldi	r17, 0x00	; 0
    10c2:	04 c0       	rjmp	.+8      	; 0x10cc <EntladePins+0x114>
//        lcd_space();
//        lcd_string(utoa(adcmv[2], outval, 10));
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
    10c4:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <wait1ms>
    10c8:	0f 5f       	subi	r16, 0xFF	; 255
    10ca:	1f 4f       	sbci	r17, 0xFF	; 255
//        lcd_space();
//        lcd_string(utoa(adcmv[1], outval, 10));
//        lcd_space();
//        lcd_string(utoa(adcmv[2], outval, 10));
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
    10cc:	0c 17       	cp	r16, r28
    10ce:	1d 07       	cpc	r17, r29
    10d0:	c8 f3       	brcs	.-14     	; 0x10c4 <EntladePins+0x10c>
    10d2:	ca 94       	dec	r12
  unsigned int clr_cnt;		// Clear Counter
  uint8_t lop_cnt;		// loop counter
// time of discharge in ms  (10000/20)
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <EntladePins+0x120>
    10d6:	82 cf       	rjmp	.-252    	; 0xfdc <EntladePins+0x24>
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     }
  } // end while
 }
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28
    10dc:	1f 91       	pop	r17
    10de:	0f 91       	pop	r16
    10e0:	ff 90       	pop	r15
    10e2:	ef 90       	pop	r14
    10e4:	df 90       	pop	r13
    10e6:	cf 90       	pop	r12
    10e8:	bf 90       	pop	r11
    10ea:	af 90       	pop	r10
    10ec:	08 95       	ret

000010ee <getRLmultip>:


#ifdef C_MESS	//measurement of capacity is wanted
#include "ReadCapacity.c"

unsigned int getRLmultip(unsigned int cvolt) {
    10ee:	ff 92       	push	r15
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29

  unsigned int uvolt;
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;
  if (cvolt >= RL_Tab_Beginn) {
    10f8:	21 e0       	ldi	r18, 0x01	; 1
    10fa:	8c 32       	cpi	r24, 0x2C	; 44
    10fc:	92 07       	cpc	r25, r18
    10fe:	18 f0       	brcs	.+6      	; 0x1106 <getRLmultip+0x18>
     uvolt = cvolt - RL_Tab_Beginn;
    1100:	8c 52       	subi	r24, 0x2C	; 44
    1102:	91 40       	sbci	r25, 0x01	; 1
    1104:	02 c0       	rjmp	.+4      	; 0x110a <getRLmultip+0x1c>
  } else {
     uvolt = 0;		// limit to begin of table
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = uvolt / RL_Tab_Abstand;
    110a:	69 e1       	ldi	r22, 0x19	; 25
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__udivmodhi4>
  tabres = uvolt % RL_Tab_Abstand;
    1112:	f8 2e       	mov	r15, r24
  tabres = RL_Tab_Abstand - tabres;
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
    1114:	6d 32       	cpi	r22, 0x2D	; 45
    1116:	08 f0       	brcs	.+2      	; 0x111a <getRLmultip+0x2c>
    1118:	6c e2       	ldi	r22, 0x2C	; 44
    111a:	c6 2f       	mov	r28, r22
    111c:	d0 e0       	ldi	r29, 0x00	; 0
    111e:	ce 01       	movw	r24, r28
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	80 50       	subi	r24, 0x00	; 0
    1126:	90 40       	sbci	r25, 0x00	; 0
    1128:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <__eerd_word_m168>
    112c:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RLtab[tabind+1]);
    112e:	ce 01       	movw	r24, r28
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	8e 5f       	subi	r24, 0xFE	; 254
    1136:	9f 4f       	sbci	r25, 0xFF	; 255
    1138:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <__eerd_word_m168>
    113c:	9c 01       	movw	r18, r24
  } else {
     uvolt = 0;		// limit to begin of table
  }
  tabind = uvolt / RL_Tab_Abstand;
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
    113e:	49 e1       	ldi	r20, 0x19	; 25
    1140:	4f 19       	sub	r20, r15
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	08 1b       	sub	r16, r24
    1146:	19 0b       	sbc	r17, r25
    1148:	40 9f       	mul	r20, r16
    114a:	c0 01       	movw	r24, r0
    114c:	41 9f       	mul	r20, r17
    114e:	90 0d       	add	r25, r0
    1150:	50 9f       	mul	r21, r16
    1152:	90 0d       	add	r25, r0
    1154:	11 24       	eor	r1, r1
    1156:	0c 96       	adiw	r24, 0x0c	; 12
    1158:	69 e1       	ldi	r22, 0x19	; 25
    115a:	70 e0       	ldi	r23, 0x00	; 0
    115c:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__udivmodhi4>
    1160:	62 0f       	add	r22, r18
    1162:	73 1f       	adc	r23, r19
}
    1164:	cb 01       	movw	r24, r22
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	1f 91       	pop	r17
    116c:	0f 91       	pop	r16
    116e:	ff 90       	pop	r15
    1170:	08 95       	ret

00001172 <ReadCapacity>:

unsigned long CombineII2Long( unsigned int ovcnt16, unsigned int tmpcnt); //tricky function to build unsigned long from two unsigned int values


//=================================================================
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    1172:	9f 92       	push	r9
    1174:	af 92       	push	r10
    1176:	bf 92       	push	r11
    1178:	cf 92       	push	r12
    117a:	df 92       	push	r13
    117c:	ef 92       	push	r14
    117e:	ff 92       	push	r15
    1180:	0f 93       	push	r16
    1182:	1f 93       	push	r17
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
    1188:	18 2f       	mov	r17, r24
    118a:	96 2e       	mov	r9, r22
  uint8_t HiPinR_L, HiPinR_H;
  uint8_t LoADC;
  uint8_t ii;

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
    118c:	88 0f       	add	r24, r24
    118e:	81 0f       	add	r24, r17
    1190:	86 0f       	add	r24, r22
    1192:	81 50       	subi	r24, 0x01	; 1
    1194:	80 93 31 01 	sts	0x0131, r24
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    1198:	86 2f       	mov	r24, r22
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	8a 55       	subi	r24, 0x5A	; 90
    119e:	9e 4f       	sbci	r25, 0xFE	; 254
    11a0:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__eerd_byte_m168>
    11a4:	c8 2e       	mov	r12, r24
  HiPinR_L = MEM_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
    11a6:	21 2f       	mov	r18, r17
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	c9 01       	movw	r24, r18
    11ac:	8d 55       	subi	r24, 0x5D	; 93
    11ae:	9e 4f       	sbci	r25, 0xFE	; 254
    11b0:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__eerd_byte_m168>
    11b4:	08 2f       	mov	r16, r24
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load

  if(PartFound == PART_CAPACITOR) {
    11b6:	80 91 07 01 	lds	r24, 0x0107
    11ba:	87 30       	cpi	r24, 0x07	; 7
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <ReadCapacity+0x4e>
    11be:	da c1       	rjmp	.+948    	; 0x1574 <ReadCapacity+0x402>
     lcd_string(ultoa(cval,outval,10));
     wait2s();
#endif
     return;	//We have found a capacitor already
  }
  if(PartFound == PART_RESISTOR) {
    11c0:	86 30       	cpi	r24, 0x06	; 6
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <ReadCapacity+0x54>
    11c4:	d7 c1       	rjmp	.+942    	; 0x1574 <ReadCapacity+0x402>
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    11c6:	90 91 05 01 	lds	r25, 0x0105
    11ca:	ec e4       	ldi	r30, 0x4C	; 76
    11cc:	f1 e0       	ldi	r31, 0x01	; 1
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	0f c0       	rjmp	.+30     	; 0x11f0 <ReadCapacity+0x7e>
     if ((diodes[ii].Cathode == LowPin) && (diodes[ii].Anode == HighPin) && (diodes[ii].Voltage < 1500)) {
    11d2:	21 81       	ldd	r18, Z+1	; 0x01
    11d4:	29 15       	cp	r18, r9
    11d6:	51 f4       	brne	.+20     	; 0x11ec <ReadCapacity+0x7a>
    11d8:	20 81       	ld	r18, Z
    11da:	21 17       	cp	r18, r17
    11dc:	39 f4       	brne	.+14     	; 0x11ec <ReadCapacity+0x7a>
    11de:	22 81       	ldd	r18, Z+2	; 0x02
    11e0:	33 81       	ldd	r19, Z+3	; 0x03
    11e2:	45 e0       	ldi	r20, 0x05	; 5
    11e4:	2c 3d       	cpi	r18, 0xDC	; 220
    11e6:	34 07       	cpc	r19, r20
    11e8:	08 f4       	brcc	.+2      	; 0x11ec <ReadCapacity+0x7a>
    11ea:	c4 c1       	rjmp	.+904    	; 0x1574 <ReadCapacity+0x402>
     return;	//We have found a capacitor already
  }
  if(PartFound == PART_RESISTOR) {
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    11ec:	8f 5f       	subi	r24, 0xFF	; 255
    11ee:	34 96       	adiw	r30, 0x04	; 4
    11f0:	89 17       	cp	r24, r25
    11f2:	78 f3       	brcs	.-34     	; 0x11d2 <ReadCapacity+0x60>

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    11f4:	88 e0       	ldi	r24, 0x08	; 8
    11f6:	c8 2a       	or	r12, r24
     if ((diodes[ii].Cathode == LowPin) && (diodes[ii].Anode == HighPin) && (diodes[ii].Voltage < 1500)) {
        return;
     }
  }
  
  EntladePins();			// discharge capacitor
    11f8:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    11fc:	88 e0       	ldi	r24, 0x08	; 8
    11fe:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    1200:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    1202:	c7 b8       	out	0x07, r12	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    1204:	04 b9       	out	0x04, r16	; 4
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    1206:	81 2f       	mov	r24, r17
    1208:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
    120c:	5c 01       	movw	r10, r24
// ******** should adcv[0] be measured without current???
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    120e:	c0 e0       	ldi	r28, 0x00	; 0
    1210:	d0 e0       	ldi	r29, 0x00	; 0
     ChargePin10ms(HiPinR_L,1);		//HighPin with R_L 10ms to VCC ,then currentless
    1212:	80 2f       	mov	r24, r16
    1214:	61 e0       	ldi	r22, 0x01	; 1
    1216:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <ChargePin10ms>
     wait500us();			//wait a little time
    121a:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <wait500us>
     wdt_reset();
    121e:	a8 95       	wdr
     // read voltage without current, is already charged enough?
     adcv[2] = ReadADC(HighPin) - adcv[0];
    1220:	81 2f       	mov	r24, r17
    1222:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
    1226:	7c 01       	movw	r14, r24
    1228:	ea 18       	sub	r14, r10
    122a:	fb 08       	sbc	r15, r11
     if ((ovcnt16 == 126) && (adcv[2] < 75)) {
    122c:	ce 37       	cpi	r28, 0x7E	; 126
    122e:	d1 05       	cpc	r29, r1
    1230:	21 f4       	brne	.+8      	; 0x123a <ReadCapacity+0xc8>
    1232:	9b e4       	ldi	r25, 0x4B	; 75
    1234:	e9 16       	cp	r14, r25
    1236:	f1 04       	cpc	r15, r1
    1238:	50 f0       	brcs	.+20     	; 0x124e <ReadCapacity+0xdc>
        // 300mV can not be reached well-timed 
        break;		// don't try to load any more
     }
     if (adcv[2] > 300) {
    123a:	2d e2       	ldi	r18, 0x2D	; 45
    123c:	e2 16       	cp	r14, r18
    123e:	21 e0       	ldi	r18, 0x01	; 1
    1240:	f2 06       	cpc	r15, r18
    1242:	28 f4       	brcc	.+10     	; 0x124e <ReadCapacity+0xdc>
  R_PORT = 0;				// switch R-Port to GND
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    1244:	21 96       	adiw	r28, 0x01	; 1
    1246:	31 e0       	ldi	r19, 0x01	; 1
    1248:	c4 3f       	cpi	r28, 0xF4	; 244
    124a:	d3 07       	cpc	r29, r19
    124c:	11 f7       	brne	.-60     	; 0x1212 <ReadCapacity+0xa0>
     }
  }
  // wait 5ms and read voltage again, does the capacitor keep the voltage?
//  adcv[1] = W5msReadADC(HighPin) - adcv[0];
//  wdt_reset();
  cpre = -12;			//default unit is pF
    124e:	84 ef       	ldi	r24, 0xF4	; 244
    1250:	80 93 32 01 	sts	0x0132, r24
  if (adcv[2] < 301) {
    1254:	4d e2       	ldi	r20, 0x2D	; 45
    1256:	e4 16       	cp	r14, r20
    1258:	41 e0       	ldi	r20, 0x01	; 1
    125a:	f4 06       	cpc	r15, r20
    125c:	08 f4       	brcc	.+2      	; 0x1260 <ReadCapacity+0xee>
    125e:	85 c1       	rjmp	.+778    	; 0x156a <ReadCapacity+0x3f8>
     wait1s();
#endif
     goto keinC;		// was never charged enough, >100mF or shorted
  }
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    1260:	20 97       	sbiw	r28, 0x00	; 0
    1262:	31 f4       	brne	.+12     	; 0x1270 <ReadCapacity+0xfe>
    1264:	85 e1       	ldi	r24, 0x15	; 21
    1266:	e8 16       	cp	r14, r24
    1268:	85 e0       	ldi	r24, 0x05	; 5
    126a:	f8 06       	cpc	r15, r24
    126c:	08 f0       	brcs	.+2      	; 0x1270 <ReadCapacity+0xfe>
    126e:	55 c0       	rjmp	.+170    	; 0x131a <ReadCapacity+0x1a8>
     goto messe_mit_rh;		// Voltage of more than 1300mV is reached in one pulse, to fast loaded
  }
  // Capacity is more than about 50µF
  cpre = -9;		// switch units to nF 
    1270:	87 ef       	ldi	r24, 0xF7	; 247
    1272:	80 93 32 01 	sts	0x0132, r24
  }
  cval_uncorrected = ovcnt16 + 1;
  cval_uncorrected *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the same time which is required for loading
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    1276:	cc 24       	eor	r12, r12
    1278:	dd 24       	eor	r13, r13
     wait10ms();
    127a:	0e 94 28 15 	call	0x2a50	; 0x2a50 <wait10ms>
     adcv[3] = ReadADC(HighPin) - adcv[0]; // read voltage again, is discharged only a little bit ?
    127e:	81 2f       	mov	r24, r17
    1280:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
    1284:	8a 19       	sub	r24, r10
    1286:	9b 09       	sbc	r25, r11
     wdt_reset();
    1288:	a8 95       	wdr
  }
  cval_uncorrected = ovcnt16 + 1;
  cval_uncorrected *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the same time which is required for loading
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    128a:	08 94       	sec
    128c:	c1 1c       	adc	r12, r1
    128e:	d1 1c       	adc	r13, r1
    1290:	cc 15       	cp	r28, r12
    1292:	dd 05       	cpc	r29, r13
    1294:	90 f7       	brcc	.-28     	; 0x127a <ReadCapacity+0x108>
     wait10ms();
     adcv[3] = ReadADC(HighPin) - adcv[0]; // read voltage again, is discharged only a little bit ?
     wdt_reset();
  }
  if (adcv[2] > adcv[3]) {
    1296:	8e 15       	cp	r24, r14
    1298:	9f 05       	cpc	r25, r15
    129a:	48 f4       	brcc	.+18     	; 0x12ae <ReadCapacity+0x13c>
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];
    129c:	97 01       	movw	r18, r14
    129e:	28 1b       	sub	r18, r24
    12a0:	39 0b       	sbc	r19, r25
    12a2:	c9 01       	movw	r24, r18
  } else {
     adcv[3] = 0;
  }
  if (adcv[3] > 100) {
    12a4:	25 36       	cpi	r18, 0x65	; 101
    12a6:	31 05       	cpc	r19, r1
    12a8:	08 f0       	brcs	.+2      	; 0x12ac <ReadCapacity+0x13a>
    12aa:	5f c1       	rjmp	.+702    	; 0x156a <ReadCapacity+0x3f8>
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <ReadCapacity+0x140>
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];
  } else {
     adcv[3] = 0;
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	90 e0       	ldi	r25, 0x00	; 0
     lcd_space();
     wait1s();
 #endif
     goto keinC;		// capacitor does not keep the voltage about 5ms
  }
  cval_uncorrected = ovcnt16 + 1;
    12b2:	21 96       	adiw	r28, 0x01	; 1
    12b4:	5e 01       	movw	r10, r28
    12b6:	cc 24       	eor	r12, r12
    12b8:	dd 24       	eor	r13, r13
    12ba:	a0 92 43 01 	sts	0x0143, r10
    12be:	b0 92 44 01 	sts	0x0144, r11
    12c2:	c0 92 45 01 	sts	0x0145, r12
    12c6:	d0 92 46 01 	sts	0x0146, r13
  // compute factor with load voltage + lost voltage during the voltage load time
  cval_uncorrected *= getRLmultip(adcv[2]+adcv[3]);	// get factor to convert time to capacity from table
    12ca:	8e 0d       	add	r24, r14
    12cc:	9f 1d       	adc	r25, r15
    12ce:	0e 94 77 08 	call	0x10ee	; 0x10ee <getRLmultip>
    12d2:	bc 01       	movw	r22, r24
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	a6 01       	movw	r20, r12
    12da:	95 01       	movw	r18, r10
    12dc:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__mulsi3>
    12e0:	60 93 43 01 	sts	0x0143, r22
    12e4:	70 93 44 01 	sts	0x0144, r23
    12e8:	80 93 45 01 	sts	0x0145, r24
    12ec:	90 93 46 01 	sts	0x0146, r25
#endif
   cval = cval_uncorrected;		// set result to uncorrected
   // cval for this type is at least 40000nF, so the last digit will be never shown
   cval *= (400 - ((C_H_KORR)*2)/5);	// correct with C_H_KORR with 0.1% resolution, but prevent overflow
    12f0:	20 e9       	ldi	r18, 0x90	; 144
    12f2:	31 e0       	ldi	r19, 0x01	; 1
    12f4:	40 e0       	ldi	r20, 0x00	; 0
    12f6:	50 e0       	ldi	r21, 0x00	; 0
    12f8:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__mulsi3>
   cval /= 40;
    12fc:	28 e2       	ldi	r18, 0x28	; 40
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	40 e0       	ldi	r20, 0x00	; 0
    1302:	50 e0       	ldi	r21, 0x00	; 0
    1304:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__udivmodsi4>
    1308:	20 93 64 01 	sts	0x0164, r18
    130c:	30 93 65 01 	sts	0x0165, r19
    1310:	40 93 66 01 	sts	0x0166, r20
    1314:	50 93 67 01 	sts	0x0167, r21
   lcd_string(ultoa(cval,outval,10));
   lcd_data('n');
   lcd_string(utoa(ovcnt16,outval,10));
   wait3s();
#endif
   goto checkDiodes;
    1318:	19 c1       	rjmp	.+562    	; 0x154c <ReadCapacity+0x3da>
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = MEM_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
  HiPinR_L = MEM_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load
    131a:	e0 2e       	mov	r14, r16
    131c:	ee 0c       	add	r14, r14

//==================================================================================
// Measurement of little capacity values
messe_mit_rh:
  //little capacity value, about  < 50 µF
  EntladePins();			// discharge capacitor
    131e:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <EntladePins>
  //measure with the R_H (470kOhm) resistor 
  R_PORT = 0;		// R_DDR ist HiPinR_L
    1322:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = (1<<TP1) | (1<<TP2) | (1<<TP3) | (1<<TxD);	//switch all Pins to output
    1324:	8f e0       	ldi	r24, 0x0F	; 15
    1326:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		//switch all ADC Pins to GND
    1328:	88 e0       	ldi	r24, 0x08	; 8
    132a:	88 b9       	out	0x08, r24	; 8
  R_DDR = HiPinR_H;   		// switch R_H resistor port for HighPin to output (GND)
    132c:	e4 b8       	out	0x04, r14	; 4
// setup Analog Comparator
  ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    132e:	80 e4       	ldi	r24, 0x40	; 64
    1330:	80 93 7b 00 	sts	0x007B, r24
  ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    1334:	84 e5       	ldi	r24, 0x54	; 84
    1336:	80 bf       	out	0x30, r24	; 48
  ADMUX = (1<<REFS0) | HighPin;			// switch Mux to High-Pin
    1338:	81 2f       	mov	r24, r17
    133a:	80 64       	ori	r24, 0x40	; 64
    133c:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    1340:	86 e1       	ldi	r24, 0x16	; 22
    1342:	80 93 7a 00 	sts	0x007A, r24
  wait200us();
    1346:	0e 94 31 15 	call	0x2a62	; 0x2a62 <wait200us>

  ovcnt16 = 0;
// setup Counter1
  TCCR1A = 0;			// set Counter1 to normal Mode
    134a:	10 92 80 00 	sts	0x0080, r1
  TCNT1 = 0;			//set Counter to 0
    134e:	10 92 85 00 	sts	0x0085, r1
    1352:	10 92 84 00 	sts	0x0084, r1
  TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// mega88
    1356:	87 e2       	ldi	r24, 0x27	; 39
    1358:	86 bb       	out	0x16, r24	; 22
  R_PORT = HiPinR_H;           	// switch R_H resistor port for HighPin to VCC
    135a:	e5 b8       	out	0x05, r14	; 5
  if(PartFound == PART_FET) {
    135c:	80 91 07 01 	lds	r24, 0x0107
    1360:	83 30       	cpi	r24, 0x03	; 3
    1362:	79 f4       	brne	.+30     	; 0x1382 <ReadCapacity+0x210>
     // charge capacitor with R_H resistor
     TCCR1B = (1<<CS10);	//Start counter 1MHz or 8MHz
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = (((1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK) & ~(1<<HighPin));	// release only HighPin ADC port
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	01 2e       	mov	r0, r17
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <ReadCapacity+0x204>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	0a 94       	dec	r0
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <ReadCapacity+0x200>
    137a:	80 95       	com	r24
    137c:	8f 70       	andi	r24, 0x0F	; 15
    137e:	87 b9       	out	0x07, r24	; 7
    1380:	04 c0       	rjmp	.+8      	; 0x138a <ReadCapacity+0x218>
  } else {
     TCCR1B =  (1<<CS10);	//start counter 1MHz or 8MHz
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
    1388:	c7 b8       	out	0x07, r12	; 7
     ii = TI1_INT_FLAGS;		//read Timer flags
     if (ii & (1<<ICF1))  {
        break;
     }
     if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
        TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    138a:	81 e0       	ldi	r24, 0x01	; 1
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
  }
//******************************
  while(1) {
     // Wait, until  Input Capture is set
     ii = TI1_INT_FLAGS;		//read Timer flags
    138c:	26 b3       	in	r18, 0x16	; 22
     if (ii & (1<<ICF1))  {
    138e:	25 fd       	sbrc	r18, 5
    1390:	09 c0       	rjmp	.+18     	; 0x13a4 <ReadCapacity+0x232>
        break;
     }
     if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    1392:	20 ff       	sbrs	r18, 0
    1394:	fb cf       	rjmp	.-10     	; 0x138c <ReadCapacity+0x21a>
        TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    1396:	86 bb       	out	0x16, r24	; 22
        wdt_reset();
    1398:	a8 95       	wdr
        ovcnt16++;
    139a:	21 96       	adiw	r28, 0x01	; 1
        if(ovcnt16 == (F_CPU/5000)) {
    139c:	36 e0       	ldi	r19, 0x06	; 6
    139e:	c0 34       	cpi	r28, 0x40	; 64
    13a0:	d3 07       	cpc	r29, r19
    13a2:	a1 f7       	brne	.-24     	; 0x138c <ReadCapacity+0x21a>
           break; 	//Timeout for Charging, above 12 s
        }
     }
  }
  TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    13a4:	10 92 81 00 	sts	0x0081, r1
  TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    13a8:	80 e2       	ldi	r24, 0x20	; 32
    13aa:	86 bb       	out	0x16, r24	; 22
  tmpint = ICR1;		// get previous Input Capture Counter flag
    13ac:	e0 90 86 00 	lds	r14, 0x0086
    13b0:	f0 90 87 00 	lds	r15, 0x0087
// check actual counter, if an additional overflow must be added
  if((TCNT1 > tmpint) && (ii & (1<<TOV1))) {
    13b4:	80 91 84 00 	lds	r24, 0x0084
    13b8:	90 91 85 00 	lds	r25, 0x0085
    13bc:	e8 16       	cp	r14, r24
    13be:	f9 06       	cpc	r15, r25
    13c0:	28 f4       	brcc	.+10     	; 0x13cc <ReadCapacity+0x25a>
    13c2:	20 ff       	sbrs	r18, 0
    13c4:	03 c0       	rjmp	.+6      	; 0x13cc <ReadCapacity+0x25a>
     // this OV was not counted, but was before the Input Capture
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	86 bb       	out	0x16, r24	; 22
     ovcnt16++;
    13ca:	21 96       	adiw	r28, 0x01	; 1
  }
//############################################################
  ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    13cc:	86 e9       	ldi	r24, 0x96	; 150
    13ce:	80 93 7a 00 	sts	0x007A, r24
  R_DDR = 0;			// switch R_H resistor port for input
    13d2:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// switch R_H resistor port pull up for HighPin off
    13d4:	15 b8       	out	0x05, r1	; 5
  load_diff = ReadADC(HighPin) + REF_C_KORR - ref_mv;	// build difference of capacitor voltage to Reference Voltage
    13d6:	81 2f       	mov	r24, r17
    13d8:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
    13dc:	20 91 2c 01 	lds	r18, 0x012C
    13e0:	30 91 2d 01 	lds	r19, 0x012D
    13e4:	82 1b       	sub	r24, r18
    13e6:	93 0b       	sbc	r25, r19
    13e8:	0c 96       	adiw	r24, 0x0c	; 12
    13ea:	90 93 4b 01 	sts	0x014B, r25
    13ee:	80 93 4a 01 	sts	0x014A, r24
//############################################################
  if (ovcnt16 >= (F_CPU/10000)) {
    13f2:	43 e0       	ldi	r20, 0x03	; 3
    13f4:	c0 32       	cpi	r28, 0x20	; 32
    13f6:	d4 07       	cpc	r29, r20
    13f8:	08 f0       	brcs	.+2      	; 0x13fc <ReadCapacity+0x28a>
    13fa:	b7 c0       	rjmp	.+366    	; 0x156a <ReadCapacity+0x3f8>
     goto keinC;	// no normal end
  }
  cval_uncorrected = CombineII2Long(ovcnt16, tmpint);
    13fc:	ce 01       	movw	r24, r28
    13fe:	b7 01       	movw	r22, r14
    1400:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <CombineII2Long>
    1404:	60 93 43 01 	sts	0x0143, r22
    1408:	70 93 44 01 	sts	0x0144, r23
    140c:	80 93 45 01 	sts	0x0145, r24
    1410:	90 93 46 01 	sts	0x0146, r25

  cpre = -12;			// cval unit is pF 
    1414:	24 ef       	ldi	r18, 0xF4	; 244
    1416:	20 93 32 01 	sts	0x0132, r18
  if (ovcnt16 > 65) {
    141a:	c2 34       	cpi	r28, 0x42	; 66
    141c:	d1 05       	cpc	r29, r1
    141e:	88 f0       	brcs	.+34     	; 0x1442 <ReadCapacity+0x2d0>
     cval_uncorrected /= 100;	// switch to next unit
    1420:	24 e6       	ldi	r18, 0x64	; 100
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	40 e0       	ldi	r20, 0x00	; 0
    1426:	50 e0       	ldi	r21, 0x00	; 0
    1428:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__udivmodsi4>
    142c:	20 93 43 01 	sts	0x0143, r18
    1430:	30 93 44 01 	sts	0x0144, r19
    1434:	40 93 45 01 	sts	0x0145, r20
    1438:	50 93 46 01 	sts	0x0146, r21
     cpre += 2;			// set unit, prevent overflow
    143c:	86 ef       	ldi	r24, 0xF6	; 246
    143e:	80 93 32 01 	sts	0x0132, r24
  }
  cval_uncorrected *= RHmultip;		// 708
    1442:	60 91 00 01 	lds	r22, 0x0100
    1446:	70 91 01 01 	lds	r23, 0x0101
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	20 91 43 01 	lds	r18, 0x0143
    1452:	30 91 44 01 	lds	r19, 0x0144
    1456:	40 91 45 01 	lds	r20, 0x0145
    145a:	50 91 46 01 	lds	r21, 0x0146
    145e:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__mulsi3>
  cval_uncorrected /= (F_CPU / 10000);	// divide by 100 (@ 1MHz clock), 800 (@ 8MHz clock)
    1462:	20 e2       	ldi	r18, 0x20	; 32
    1464:	33 e0       	ldi	r19, 0x03	; 3
    1466:	40 e0       	ldi	r20, 0x00	; 0
    1468:	50 e0       	ldi	r21, 0x00	; 0
    146a:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__udivmodsi4>
    146e:	69 01       	movw	r12, r18
    1470:	7a 01       	movw	r14, r20
    1472:	20 93 43 01 	sts	0x0143, r18
    1476:	30 93 44 01 	sts	0x0144, r19
    147a:	40 93 45 01 	sts	0x0145, r20
    147e:	50 93 46 01 	sts	0x0146, r21
  cval = cval_uncorrected;		// set the corrected cval
    1482:	20 93 64 01 	sts	0x0164, r18
    1486:	30 93 65 01 	sts	0x0165, r19
    148a:	40 93 66 01 	sts	0x0166, r20
    148e:	50 93 67 01 	sts	0x0167, r21
  if (cpre == -12) {
    1492:	80 91 32 01 	lds	r24, 0x0132
    1496:	84 3f       	cpi	r24, 0xF4	; 244
    1498:	09 f0       	breq	.+2      	; 0x149c <ReadCapacity+0x32a>
    149a:	4a c0       	rjmp	.+148    	; 0x1530 <ReadCapacity+0x3be>
#if COMP_SLEW1 > COMP_SLEW2
     if (cval < COMP_SLEW1) {
    149c:	20 3a       	cpi	r18, 0xA0	; 160
    149e:	8f e0       	ldi	r24, 0x0F	; 15
    14a0:	38 07       	cpc	r19, r24
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	48 07       	cpc	r20, r24
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	58 07       	cpc	r21, r24
    14aa:	b0 f4       	brcc	.+44     	; 0x14d8 <ReadCapacity+0x366>
        // add slew rate dependent offset
        cval += (COMP_SLEW1 / (cval+COMP_SLEW2 ));
    14ac:	24 52       	subi	r18, 0x24	; 36
    14ae:	3f 4f       	sbci	r19, 0xFF	; 255
    14b0:	4f 4f       	sbci	r20, 0xFF	; 255
    14b2:	5f 4f       	sbci	r21, 0xFF	; 255
    14b4:	60 ea       	ldi	r22, 0xA0	; 160
    14b6:	7f e0       	ldi	r23, 0x0F	; 15
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__udivmodsi4>
    14c0:	2c 0d       	add	r18, r12
    14c2:	3d 1d       	adc	r19, r13
    14c4:	4e 1d       	adc	r20, r14
    14c6:	5f 1d       	adc	r21, r15
    14c8:	20 93 64 01 	sts	0x0164, r18
    14cc:	30 93 65 01 	sts	0x0165, r19
    14d0:	40 93 66 01 	sts	0x0166, r20
    14d4:	50 93 67 01 	sts	0x0167, r21
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    14d8:	80 91 31 01 	lds	r24, 0x0131
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	89 54       	subi	r24, 0x49	; 73
    14e0:	9e 4f       	sbci	r25, 0xFE	; 254
    14e2:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__eerd_byte_m168>
     if (cval > tmpint) {
    14e6:	20 91 64 01 	lds	r18, 0x0164
    14ea:	30 91 65 01 	lds	r19, 0x0165
    14ee:	40 91 66 01 	lds	r20, 0x0166
    14f2:	50 91 67 01 	lds	r21, 0x0167
        cval += (COMP_SLEW1 / (cval+COMP_SLEW2 ));
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    14f6:	90 e0       	ldi	r25, 0x00	; 0
     if (cval > tmpint) {
    14f8:	a0 e0       	ldi	r26, 0x00	; 0
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	82 17       	cp	r24, r18
    14fe:	93 07       	cpc	r25, r19
    1500:	a4 07       	cpc	r26, r20
    1502:	b5 07       	cpc	r27, r21
    1504:	68 f4       	brcc	.+26     	; 0x1520 <ReadCapacity+0x3ae>
         cval -= tmpint;		//subtract zero offset (pF)
    1506:	28 1b       	sub	r18, r24
    1508:	39 0b       	sbc	r19, r25
    150a:	4a 0b       	sbc	r20, r26
    150c:	5b 0b       	sbc	r21, r27
    150e:	20 93 64 01 	sts	0x0164, r18
    1512:	30 93 65 01 	sts	0x0165, r19
    1516:	40 93 66 01 	sts	0x0166, r20
    151a:	50 93 67 01 	sts	0x0167, r21
    151e:	08 c0       	rjmp	.+16     	; 0x1530 <ReadCapacity+0x3be>
     } else {
         cval = 0;			//unsigned long may not reach negativ value
    1520:	10 92 64 01 	sts	0x0164, r1
    1524:	10 92 65 01 	sts	0x0165, r1
    1528:	10 92 66 01 	sts	0x0166, r1
    152c:	10 92 67 01 	sts	0x0167, r1
  lcd_space();
  lcd_string(ultoa(cval,outval,10));
  lcd_data('p');
  wait3s();
#endif
  R_DDR = HiPinR_L; 		//switch R_L for High-Pin to GND
    1530:	04 b9       	out	0x04, r16	; 4
#if F_CPU < 2000001
   if(cval < 50)
#else 
   if(cval < 25)
    1532:	80 91 64 01 	lds	r24, 0x0164
    1536:	90 91 65 01 	lds	r25, 0x0165
    153a:	a0 91 66 01 	lds	r26, 0x0166
    153e:	b0 91 67 01 	lds	r27, 0x0167
    1542:	89 31       	cpi	r24, 0x19	; 25
    1544:	91 05       	cpc	r25, r1
    1546:	a1 05       	cpc	r26, r1
    1548:	b1 05       	cpc	r27, r1
    154a:	78 f0       	brcs	.+30     	; 0x156a <ReadCapacity+0x3f8>
#endif
      goto keinC;	//capacity to low, < 70pF @1MHz (35pF @8MHz)
   }
   // end low capacity 
checkDiodes:
   if((NumOfDiodes > 0)  && (PartFound != PART_FET)) {
    154c:	80 91 05 01 	lds	r24, 0x0105
    1550:	88 23       	and	r24, r24
    1552:	21 f0       	breq	.+8      	; 0x155c <ReadCapacity+0x3ea>
    1554:	80 91 07 01 	lds	r24, 0x0107
    1558:	83 30       	cpi	r24, 0x03	; 3
    155a:	39 f4       	brne	.+14     	; 0x156a <ReadCapacity+0x3f8>
      wait1s();
#endif
      // nearly shure, that there is one or more diodes in reverse direction,
      // which would be wrongly detected as capacitor 
   } else {
      PartFound = PART_CAPACITOR;	//capacitor is found
    155c:	87 e0       	ldi	r24, 0x07	; 7
    155e:	80 93 07 01 	sts	0x0107, r24
      ca = LowPin;			// save LowPin
    1562:	90 92 49 01 	sts	0x0149, r9
      cb = HighPin;		// save HighPin
    1566:	10 93 08 01 	sts	0x0108, r17
keinC:
  // discharge capacitor again
//  EntladePins();		// discharge capacitors
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    156a:	88 e0       	ldi	r24, 0x08	; 8
    156c:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GNG, no pull up
    156e:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    1570:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    1572:	15 b8       	out	0x05, r1	; 5
  return;
 } // end ReadCapacity()
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	1f 91       	pop	r17
    157a:	0f 91       	pop	r16
    157c:	ff 90       	pop	r15
    157e:	ef 90       	pop	r14
    1580:	df 90       	pop	r13
    1582:	cf 90       	pop	r12
    1584:	bf 90       	pop	r11
    1586:	af 90       	pop	r10
    1588:	9f 90       	pop	r9
    158a:	08 95       	ret

0000158c <RefVoltage>:

#endif

#ifdef AUTO_RH
void RefVoltage(void) {
    158c:	ff 92       	push	r15
    158e:	0f 93       	push	r16
    1590:	1f 93       	push	r17
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;

  #ifdef AUTO_CAL
  referenz = ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset));
    1596:	85 eb       	ldi	r24, 0xB5	; 181
    1598:	91 e0       	ldi	r25, 0x01	; 1
    159a:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <__eerd_word_m168>
    159e:	20 91 2c 01 	lds	r18, 0x012C
    15a2:	30 91 2d 01 	lds	r19, 0x012D
    15a6:	28 0f       	add	r18, r24
    15a8:	39 1f       	adc	r19, r25
  #else
  referenz = ref_mv + REF_C_KORR;
  #endif
  if (referenz >= Ref_Tab_Beginn) {
    15aa:	83 e0       	ldi	r24, 0x03	; 3
    15ac:	28 3e       	cpi	r18, 0xE8	; 232
    15ae:	38 07       	cpc	r19, r24
    15b0:	20 f0       	brcs	.+8      	; 0x15ba <RefVoltage+0x2e>
     referenz -= Ref_Tab_Beginn;
    15b2:	c9 01       	movw	r24, r18
    15b4:	88 5e       	subi	r24, 0xE8	; 232
    15b6:	93 40       	sbci	r25, 0x03	; 3
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <RefVoltage+0x32>
  } else  {
     referenz = 0;		// limit to begin of table
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = referenz / Ref_Tab_Abstand;
    15be:	62 e3       	ldi	r22, 0x32	; 50
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__udivmodhi4>
  tabres = referenz % Ref_Tab_Abstand;
    15c6:	f8 2e       	mov	r15, r24
  tabres = Ref_Tab_Abstand-tabres;
  if (tabind > 7) {
     tabind = 7;		// limit to end of table
  }
  // interpolate the table of factors
  y1 = MEM_read_word(&RHtab[tabind]);
    15c8:	68 30       	cpi	r22, 0x08	; 8
    15ca:	08 f0       	brcs	.+2      	; 0x15ce <RefVoltage+0x42>
    15cc:	67 e0       	ldi	r22, 0x07	; 7
    15ce:	c6 2f       	mov	r28, r22
    15d0:	d0 e0       	ldi	r29, 0x00	; 0
    15d2:	ce 01       	movw	r24, r28
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	86 5a       	subi	r24, 0xA6	; 166
    15da:	9f 4f       	sbci	r25, 0xFF	; 255
    15dc:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <__eerd_word_m168>
    15e0:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RHtab[tabind+1]);
    15e2:	ce 01       	movw	r24, r28
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	84 5a       	subi	r24, 0xA4	; 164
    15ea:	9f 4f       	sbci	r25, 0xFF	; 255
    15ec:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <__eerd_word_m168>
    15f0:	9c 01       	movw	r18, r24
  } else  {
     referenz = 0;		// limit to begin of table
  }
  tabind = referenz / Ref_Tab_Abstand;
  tabres = referenz % Ref_Tab_Abstand;
  tabres = Ref_Tab_Abstand-tabres;
    15f2:	42 e3       	ldi	r20, 0x32	; 50
    15f4:	4f 19       	sub	r20, r15
  }
  // interpolate the table of factors
  y1 = MEM_read_word(&RHtab[tabind]);
  y2 = MEM_read_word(&RHtab[tabind+1]);
  // RHmultip is the interpolated factor to compute capacity from load time with 470k
  RHmultip = ((y1 - y2) * tabres + (Ref_Tab_Abstand/2)) / Ref_Tab_Abstand + y2;
    15f6:	50 e0       	ldi	r21, 0x00	; 0
    15f8:	08 1b       	sub	r16, r24
    15fa:	19 0b       	sbc	r17, r25
    15fc:	40 9f       	mul	r20, r16
    15fe:	c0 01       	movw	r24, r0
    1600:	41 9f       	mul	r20, r17
    1602:	90 0d       	add	r25, r0
    1604:	50 9f       	mul	r21, r16
    1606:	90 0d       	add	r25, r0
    1608:	11 24       	eor	r1, r1
    160a:	49 96       	adiw	r24, 0x19	; 25
    160c:	62 e3       	ldi	r22, 0x32	; 50
    160e:	70 e0       	ldi	r23, 0x00	; 0
    1610:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__udivmodhi4>
    1614:	62 0f       	add	r22, r18
    1616:	73 1f       	adc	r23, r19
    1618:	70 93 01 01 	sts	0x0101, r23
    161c:	60 93 00 01 	sts	0x0100, r22
 }
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	ff 90       	pop	r15
    162a:	08 95       	ret

0000162c <lcd_clear_line>:
#endif

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
    162c:	1f 93       	push	r17
    162e:	14 e1       	ldi	r17, 0x14	; 20
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    lcd_space();
    1630:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_space>
    1634:	11 50       	subi	r17, 0x01	; 1

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    1636:	e1 f7       	brne	.-8      	; 0x1630 <lcd_clear_line+0x4>
    lcd_space();
 }
}
    1638:	1f 91       	pop	r17
    163a:	08 95       	ret

0000163c <DisplayValue>:
 *    e.g: p = 10^-12 -> -12
 *  - unit character (0 = none)
 *  digits = 2, 3 or 4
 */
void DisplayValue(unsigned long Value, int8_t Exponent, unsigned char Unit, unsigned char digits)
{
    163c:	2f 92       	push	r2
    163e:	3f 92       	push	r3
    1640:	4f 92       	push	r4
    1642:	5f 92       	push	r5
    1644:	7f 92       	push	r7
    1646:	8f 92       	push	r8
    1648:	9f 92       	push	r9
    164a:	af 92       	push	r10
    164c:	bf 92       	push	r11
    164e:	cf 92       	push	r12
    1650:	df 92       	push	r13
    1652:	ef 92       	push	r14
    1654:	ff 92       	push	r15
    1656:	0f 93       	push	r16
    1658:	1f 93       	push	r17
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
    1662:	2f 97       	sbiw	r28, 0x0f	; 15
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	de bf       	out	0x3e, r29	; 62
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	cd bf       	out	0x3d, r28	; 61
    166e:	6b 01       	movw	r12, r22
    1670:	7c 01       	movw	r14, r24
    1672:	14 2f       	mov	r17, r20
    1674:	72 2e       	mov	r7, r18
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
    1676:	03 30       	cpi	r16, 0x03	; 3
    1678:	29 f0       	breq	.+10     	; 0x1684 <DisplayValue+0x48>
  if (digits == 4) Limit = 10000;
    167a:	04 30       	cpi	r16, 0x04	; 4
    167c:	31 f0       	breq	.+12     	; 0x168a <DisplayValue+0x4e>
  uint8_t           Offset;		/* exponent of offset to next 10^3 step */
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
    167e:	84 e6       	ldi	r24, 0x64	; 100
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	14 c0       	rjmp	.+40     	; 0x16ac <DisplayValue+0x70>
  if (digits == 3) Limit = 1000;
    1684:	88 ee       	ldi	r24, 0xE8	; 232
    1686:	93 e0       	ldi	r25, 0x03	; 3
    1688:	11 c0       	rjmp	.+34     	; 0x16ac <DisplayValue+0x70>
  if (digits == 4) Limit = 10000;
    168a:	80 e1       	ldi	r24, 0x10	; 16
    168c:	97 e2       	ldi	r25, 0x27	; 39
    168e:	0e c0       	rjmp	.+28     	; 0x16ac <DisplayValue+0x70>
  while (Value >= Limit)
  {
    Value += 5;				/* for automagic rounding */
    1690:	c7 01       	movw	r24, r14
    1692:	b6 01       	movw	r22, r12
    1694:	6b 5f       	subi	r22, 0xFB	; 251
    1696:	7f 4f       	sbci	r23, 0xFF	; 255
    1698:	8f 4f       	sbci	r24, 0xFF	; 255
    169a:	9f 4f       	sbci	r25, 0xFF	; 255
    Value = Value / 10;			/* scale down by 10^1 */
    169c:	a5 01       	movw	r20, r10
    169e:	94 01       	movw	r18, r8
    16a0:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__udivmodsi4>
    16a4:	69 01       	movw	r12, r18
    16a6:	7a 01       	movw	r14, r20
    Exponent++;				/* increase exponent by 1 */
    16a8:	1f 5f       	subi	r17, 0xFF	; 255
    16aa:	08 c0       	rjmp	.+16     	; 0x16bc <DisplayValue+0x80>


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
  if (digits == 4) Limit = 10000;
  while (Value >= Limit)
    16ac:	1c 01       	movw	r2, r24
    16ae:	44 24       	eor	r4, r4
    16b0:	55 24       	eor	r5, r5
  {
    Value += 5;				/* for automagic rounding */
    Value = Value / 10;			/* scale down by 10^1 */
    16b2:	6a e0       	ldi	r22, 0x0A	; 10
    16b4:	86 2e       	mov	r8, r22
    16b6:	91 2c       	mov	r9, r1
    16b8:	a1 2c       	mov	r10, r1
    16ba:	b1 2c       	mov	r11, r1


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;
  if (digits == 4) Limit = 10000;
  while (Value >= Limit)
    16bc:	c2 14       	cp	r12, r2
    16be:	d3 04       	cpc	r13, r3
    16c0:	e4 04       	cpc	r14, r4
    16c2:	f5 04       	cpc	r15, r5
    16c4:	28 f7       	brcc	.-54     	; 0x1690 <DisplayValue+0x54>


  /*
   *  determine prefix
   */
  Length = Exponent + 12;
    16c6:	81 2f       	mov	r24, r17
    16c8:	84 5f       	subi	r24, 0xF4	; 244
    16ca:	83 31       	cpi	r24, 0x13	; 19
    16cc:	08 f0       	brcs	.+2      	; 0x16d0 <DisplayValue+0x94>
    16ce:	82 e1       	ldi	r24, 0x12	; 18
  if (Length <  0) Length = 0;		/* Limit to minimum prefix */
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
  Index = Length / 3;
    16d0:	23 e0       	ldi	r18, 0x03	; 3
  Offset = Length % 3;
    16d2:	62 2f       	mov	r22, r18
    16d4:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <__udivmodqi4>
    16d8:	19 2f       	mov	r17, r25
    if (Offset > 0)
    16da:	99 23       	and	r25, r25
    16dc:	19 f0       	breq	.+6      	; 0x16e4 <DisplayValue+0xa8>
    {
      Index++;				/* adjust index for exponent offset, take next prefix */
    16de:	8f 5f       	subi	r24, 0xFF	; 255
      Offset = 3 - Offset;		/* reverse value (1 or 2) */
    16e0:	29 1b       	sub	r18, r25
    16e2:	12 2f       	mov	r17, r18
    }
  Prefix = MEM_read_byte((uint8_t *)(&PrefixTab[Index]));   /* look up prefix in table */
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	82 55       	subi	r24, 0x52	; 82
    16e8:	9e 4f       	sbci	r25, 0xFE	; 254
    16ea:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__eerd_byte_m168>
    16ee:	b8 2e       	mov	r11, r24
  /*
   *  display value
   */

  /* convert value into string */
  utoa((unsigned int)Value, OutBuffer, 10);
    16f0:	c6 01       	movw	r24, r12
    16f2:	6e 01       	movw	r12, r28
    16f4:	08 94       	sec
    16f6:	c1 1c       	adc	r12, r1
    16f8:	d1 1c       	adc	r13, r1
    16fa:	b6 01       	movw	r22, r12
    16fc:	4a e0       	ldi	r20, 0x0A	; 10
    16fe:	50 e0       	ldi	r21, 0x00	; 0
    1700:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <utoa>
  Length = strlen(OutBuffer);
    1704:	f6 01       	movw	r30, r12
    1706:	01 90       	ld	r0, Z+
    1708:	00 20       	and	r0, r0
    170a:	e9 f7       	brne	.-6      	; 0x1706 <DisplayValue+0xca>
    170c:	31 97       	sbiw	r30, 0x01	; 1
    170e:	2e 2e       	mov	r2, r30
    1710:	2c 18       	sub	r2, r12

  /* position of dot */
  Exponent = Length - Offset;		/* calculate position */
    1712:	82 2c       	mov	r8, r2
    1714:	81 1a       	sub	r8, r17

  if (Exponent <= 0)			/* we have to prepend "0." */
    1716:	18 14       	cp	r1, r8
    1718:	44 f0       	brlt	.+16     	; 0x172a <DisplayValue+0xee>
  {
    /* 0: factor 10 / -1: factor 100 */
//    lcd_data('0');
    lcd_data('.');
    171a:	8e e2       	ldi	r24, 0x2E	; 46
    171c:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
    if (Exponent < 0) lcd_data('0');	/* extra 0 for factor 100 */
    1720:	88 20       	and	r8, r8
    1722:	19 f0       	breq	.+6      	; 0x172a <DisplayValue+0xee>
    1724:	80 e3       	ldi	r24, 0x30	; 48
    1726:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
  }

  if (Offset == 0) Exponent = -1;	/* disable dot if not needed */
    172a:	11 23       	and	r17, r17
    172c:	11 f4       	brne	.+4      	; 0x1732 <DisplayValue+0xf6>
    172e:	88 24       	eor	r8, r8
    1730:	8a 94       	dec	r8
    1732:	6e 01       	movw	r12, r28
    1734:	08 94       	sec
    1736:	c1 1c       	adc	r12, r1
    1738:	d1 1c       	adc	r13, r1
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    173a:	00 e0       	ldi	r16, 0x00	; 0
    173c:	10 e0       	ldi	r17, 0x00	; 0
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    Index++;				/* next one */
    if (Index == Exponent) {
    173e:	99 24       	eor	r9, r9
    1740:	87 fc       	sbrc	r8, 7
    1742:	90 94       	com	r9
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    1744:	0d c0       	rjmp	.+26     	; 0x1760 <DisplayValue+0x124>
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    1746:	0f 5f       	subi	r16, 0xFF	; 255
    1748:	1f 4f       	sbci	r17, 0xFF	; 255
    174a:	f6 01       	movw	r30, r12
    174c:	81 91       	ld	r24, Z+
    174e:	6f 01       	movw	r12, r30
    1750:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
    Index++;				/* next one */
    if (Index == Exponent) {
    1754:	08 15       	cp	r16, r8
    1756:	19 05       	cpc	r17, r9
    1758:	19 f4       	brne	.+6      	; 0x1760 <DisplayValue+0x124>
      lcd_data('.');			/* display dot */
    175a:	8e e2       	ldi	r24, 0x2E	; 46
    175c:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
    1760:	02 15       	cp	r16, r2
    1762:	88 f3       	brcs	.-30     	; 0x1746 <DisplayValue+0x10a>
      lcd_data('.');			/* display dot */
    }
  }

  /* display prefix and unit */
  if (Prefix != 0) lcd_data(Prefix);
    1764:	bb 20       	and	r11, r11
    1766:	19 f0       	breq	.+6      	; 0x176e <DisplayValue+0x132>
    1768:	8b 2d       	mov	r24, r11
    176a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
  if (Unit) lcd_data(Unit);
    176e:	77 20       	and	r7, r7
    1770:	19 f0       	breq	.+6      	; 0x1778 <DisplayValue+0x13c>
    1772:	87 2d       	mov	r24, r7
    1774:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
}
    1778:	2f 96       	adiw	r28, 0x0f	; 15
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	1f 91       	pop	r17
    178a:	0f 91       	pop	r16
    178c:	ff 90       	pop	r15
    178e:	ef 90       	pop	r14
    1790:	df 90       	pop	r13
    1792:	cf 90       	pop	r12
    1794:	bf 90       	pop	r11
    1796:	af 90       	pop	r10
    1798:	9f 90       	pop	r9
    179a:	8f 90       	pop	r8
    179c:	7f 90       	pop	r7
    179e:	5f 90       	pop	r5
    17a0:	4f 90       	pop	r4
    17a2:	3f 90       	pop	r3
    17a4:	2f 90       	pop	r2
    17a6:	08 95       	ret

000017a8 <RvalOut>:
   }
}

#ifdef R_MESS
  #define AUSGABE_FUNKTION
void RvalOut(uint8_t ii) {	
    17a8:	0f 93       	push	r16
   // output of resistor value

   DisplayValue(resis[ii].rx,-1,LCD_CHAR_OMEGA,4);
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	fc 01       	movw	r30, r24
    17ae:	73 e0       	ldi	r23, 0x03	; 3
    17b0:	ee 0f       	add	r30, r30
    17b2:	ff 1f       	adc	r31, r31
    17b4:	7a 95       	dec	r23
    17b6:	e1 f7       	brne	.-8      	; 0x17b0 <RvalOut+0x8>
    17b8:	e8 1b       	sub	r30, r24
    17ba:	f9 0b       	sbc	r31, r25
    17bc:	e9 5e       	subi	r30, 0xE9	; 233
    17be:	fe 4f       	sbci	r31, 0xFE	; 254
    17c0:	60 81       	ld	r22, Z
    17c2:	71 81       	ldd	r23, Z+1	; 0x01
    17c4:	82 81       	ldd	r24, Z+2	; 0x02
    17c6:	93 81       	ldd	r25, Z+3	; 0x03
    17c8:	4f ef       	ldi	r20, 0xFF	; 255
    17ca:	24 ef       	ldi	r18, 0xF4	; 244
    17cc:	04 e0       	ldi	r16, 0x04	; 4
    17ce:	0e 94 1e 0b 	call	0x163c	; 0x163c <DisplayValue>
   lcd_space();
    17d2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_space>
 }
    17d6:	0f 91       	pop	r16
    17d8:	08 95       	ret

000017da <mVAusgabe>:
   lcd_line2(); 				//2. row
   lcd_fix_string(Uf);			//"Uf="
   mVAusgabe(bcdnum >> 4);
   mVAusgabe(bcdnum & 0x0f);
}
void mVAusgabe(uint8_t nn) {
    17da:	0f 93       	push	r16
   if (nn < 3) {
    17dc:	83 30       	cpi	r24, 0x03	; 3
    17de:	98 f4       	brcc	.+38     	; 0x1806 <mVAusgabe+0x2c>
      // Output in mV units
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
    17e0:	e8 2f       	mov	r30, r24
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	ee 0f       	add	r30, r30
    17e6:	ff 1f       	adc	r31, r31
    17e8:	ee 0f       	add	r30, r30
    17ea:	ff 1f       	adc	r31, r31
    17ec:	e4 5b       	subi	r30, 0xB4	; 180
    17ee:	fe 4f       	sbci	r31, 0xFE	; 254
    17f0:	62 81       	ldd	r22, Z+2	; 0x02
    17f2:	73 81       	ldd	r23, Z+3	; 0x03
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	4d ef       	ldi	r20, 0xFD	; 253
    17fa:	26 e5       	ldi	r18, 0x56	; 86
    17fc:	03 e0       	ldi	r16, 0x03	; 3
    17fe:	0e 94 1e 0b 	call	0x163c	; 0x163c <DisplayValue>
      lcd_space();
    1802:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_space>
   }
}
    1806:	0f 91       	pop	r16
    1808:	08 95       	ret

0000180a <UfAusgabe>:
// output of flux voltage for 1-2 diodes in row 2
// bcdnum = Numbers of both Diodes:
// higher 4 Bit  number of first Diode
// lower 4 Bit  number of second Diode (Structure diodes[nn])
// if number >= 3  no output is done
void UfAusgabe(uint8_t bcdnum) {
    180a:	1f 93       	push	r17
    180c:	18 2f       	mov	r17, r24

   lcd_line2(); 				//2. row
    180e:	80 ec       	ldi	r24, 0xC0	; 192
    1810:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
   lcd_fix_string(Uf);			//"Uf="
    1814:	88 e1       	ldi	r24, 0x18	; 24
    1816:	91 e0       	ldi	r25, 0x01	; 1
    1818:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
   mVAusgabe(bcdnum >> 4);
    181c:	81 2f       	mov	r24, r17
    181e:	82 95       	swap	r24
    1820:	8f 70       	andi	r24, 0x0F	; 15
    1822:	0e 94 ed 0b 	call	0x17da	; 0x17da <mVAusgabe>
   mVAusgabe(bcdnum & 0x0f);
    1826:	81 2f       	mov	r24, r17
    1828:	8f 70       	andi	r24, 0x0F	; 15
    182a:	0e 94 ed 0b 	call	0x17da	; 0x17da <mVAusgabe>
}
    182e:	1f 91       	pop	r17
    1830:	08 95       	ret

00001832 <AutoCheck>:
void AutoCheck(void) {
    1832:	2f 92       	push	r2
    1834:	3f 92       	push	r3
    1836:	4f 92       	push	r4
    1838:	5f 92       	push	r5
    183a:	6f 92       	push	r6
    183c:	7f 92       	push	r7
    183e:	8f 92       	push	r8
    1840:	9f 92       	push	r9
    1842:	af 92       	push	r10
    1844:	bf 92       	push	r11
    1846:	cf 92       	push	r12
    1848:	df 92       	push	r13
    184a:	ef 92       	push	r14
    184c:	ff 92       	push	r15
    184e:	0f 93       	push	r16
    1850:	1f 93       	push	r17
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	2e 97       	sbiw	r28, 0x0e	; 14
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61

#ifdef AUTO_CAL
  uint8_t cap_found;	// counter for found capacitor
  int8_t udiff2;
#endif
  ADC_PORT = TXD_VAL;
    1866:	88 e0       	ldi	r24, 0x08	; 8
    1868:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = TXD_MSK;
    186a:	87 b9       	out	0x07, r24	; 7
  R_PORT = (1<<(TP1*2));		//Pin 1 over RL to +
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	85 b9       	out	0x05, r24	; 5
  R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//Pin 2 over RL to -
    1870:	85 e0       	ldi	r24, 0x05	; 5
    1872:	84 b9       	out	0x04, r24	; 4
  adcmv[0] = W5msReadADC(PC0);		// voltage at Pin 1
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
    187a:	8c 01       	movw	r16, r24
    187c:	9a 83       	std	Y+2, r25	; 0x02
    187e:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = ReadADC(PC1);		// voltage at Pin 2
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
    1886:	7c 01       	movw	r14, r24
    1888:	9c 83       	std	Y+4, r25	; 0x04
    188a:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = ReadADC(PC2);		// voltage at Pin 3
    188c:	82 e0       	ldi	r24, 0x02	; 2
    188e:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
    1892:	9c 01       	movw	r18, r24
    1894:	9e 83       	std	Y+6, r25	; 0x06
    1896:	8d 83       	std	Y+5, r24	; 0x05
  if (abs((int)(adcmv[1] - adcmv[0])) > 20) {
    1898:	e0 1a       	sub	r14, r16
    189a:	f1 0a       	sbc	r15, r17
    189c:	f7 fe       	sbrs	r15, 7
    189e:	04 c0       	rjmp	.+8      	; 0x18a8 <AutoCheck+0x76>
    18a0:	f0 94       	com	r15
    18a2:	e1 94       	neg	r14
    18a4:	f1 08       	sbc	r15, r1
    18a6:	f3 94       	inc	r15
    18a8:	85 e1       	ldi	r24, 0x15	; 21
    18aa:	e8 16       	cp	r14, r24
    18ac:	f1 04       	cpc	r15, r1
    18ae:	0c f0       	brlt	.+2      	; 0x18b2 <AutoCheck+0x80>
    18b0:	d5 c3       	rjmp	.+1962   	; 0x205c <AutoCheck+0x82a>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[2] - adcmv[0])) > 20) {
    18b2:	20 1b       	sub	r18, r16
    18b4:	31 0b       	sbc	r19, r17
    18b6:	37 ff       	sbrs	r19, 7
    18b8:	03 c0       	rjmp	.+6      	; 0x18c0 <AutoCheck+0x8e>
    18ba:	30 95       	com	r19
    18bc:	21 95       	neg	r18
    18be:	3f 4f       	sbci	r19, 0xFF	; 255
    18c0:	25 31       	cpi	r18, 0x15	; 21
    18c2:	31 05       	cpc	r19, r1
    18c4:	0c f0       	brlt	.+2      	; 0x18c8 <AutoCheck+0x96>
    18c6:	ca c3       	rjmp	.+1940   	; 0x205c <AutoCheck+0x82a>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[0] - (U_VCC/2))) > 30) {
    18c8:	0a 5b       	subi	r16, 0xBA	; 186
    18ca:	19 40       	sbci	r17, 0x09	; 9
    18cc:	17 ff       	sbrs	r17, 7
    18ce:	03 c0       	rjmp	.+6      	; 0x18d6 <AutoCheck+0xa4>
    18d0:	10 95       	com	r17
    18d2:	01 95       	neg	r16
    18d4:	1f 4f       	sbci	r17, 0xFF	; 255
    18d6:	0f 31       	cpi	r16, 0x1F	; 31
    18d8:	11 05       	cpc	r17, r1
    18da:	0c f0       	brlt	.+2      	; 0x18de <AutoCheck+0xac>
    18dc:	bf c3       	rjmp	.+1918   	; 0x205c <AutoCheck+0x82a>
     return;				//difference to big, no selftest
  }
  R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//Pin 3 over RL to - (Pin 1 over RL to +)
    18de:	81 e1       	ldi	r24, 0x11	; 17
    18e0:	84 b9       	out	0x04, r24	; 4
  adcmv[0] = W5msReadADC(PC0);		// voltage at Pin 1
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
    18e8:	8c 01       	movw	r16, r24
    18ea:	9a 83       	std	Y+2, r25	; 0x02
    18ec:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = ReadADC(PC1);		// voltage at Pin 2
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
    18f4:	7c 01       	movw	r14, r24
    18f6:	9c 83       	std	Y+4, r25	; 0x04
    18f8:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = ReadADC(PC2);		// voltage at Pin 3
    18fa:	82 e0       	ldi	r24, 0x02	; 2
    18fc:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
    1900:	9c 01       	movw	r18, r24
    1902:	9e 83       	std	Y+6, r25	; 0x06
    1904:	8d 83       	std	Y+5, r24	; 0x05
  if (abs((int)(adcmv[1] - adcmv[0])) > 20) {
    1906:	e0 1a       	sub	r14, r16
    1908:	f1 0a       	sbc	r15, r17
    190a:	f7 fe       	sbrs	r15, 7
    190c:	04 c0       	rjmp	.+8      	; 0x1916 <AutoCheck+0xe4>
    190e:	f0 94       	com	r15
    1910:	e1 94       	neg	r14
    1912:	f1 08       	sbc	r15, r1
    1914:	f3 94       	inc	r15
    1916:	e5 e1       	ldi	r30, 0x15	; 21
    1918:	ee 16       	cp	r14, r30
    191a:	f1 04       	cpc	r15, r1
    191c:	0c f0       	brlt	.+2      	; 0x1920 <AutoCheck+0xee>
    191e:	9e c3       	rjmp	.+1852   	; 0x205c <AutoCheck+0x82a>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[2] - adcmv[0])) > 20) {
    1920:	20 1b       	sub	r18, r16
    1922:	31 0b       	sbc	r19, r17
    1924:	37 ff       	sbrs	r19, 7
    1926:	03 c0       	rjmp	.+6      	; 0x192e <AutoCheck+0xfc>
    1928:	30 95       	com	r19
    192a:	21 95       	neg	r18
    192c:	3f 4f       	sbci	r19, 0xFF	; 255
    192e:	25 31       	cpi	r18, 0x15	; 21
    1930:	31 05       	cpc	r19, r1
    1932:	0c f0       	brlt	.+2      	; 0x1936 <AutoCheck+0x104>
    1934:	93 c3       	rjmp	.+1830   	; 0x205c <AutoCheck+0x82a>
     return;				//difference to big, no selftest
  }
  if (abs((int)(adcmv[0] - (U_VCC/2))) > 30) {
    1936:	0a 5b       	subi	r16, 0xBA	; 186
    1938:	19 40       	sbci	r17, 0x09	; 9
    193a:	17 ff       	sbrs	r17, 7
    193c:	03 c0       	rjmp	.+6      	; 0x1944 <AutoCheck+0x112>
    193e:	10 95       	com	r17
    1940:	01 95       	neg	r16
    1942:	1f 4f       	sbci	r17, 0xFF	; 255
    1944:	0f 31       	cpi	r16, 0x1F	; 31
    1946:	11 05       	cpc	r17, r1
    1948:	0c f0       	brlt	.+2      	; 0x194c <AutoCheck+0x11a>
    194a:	88 c3       	rjmp	.+1808   	; 0x205c <AutoCheck+0x82a>
     return;				//difference to big, no selftest
  }
#ifdef WITH_SELFTEST
  lcd_clear();
    194c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_clear>
  lcd_line1();
    1950:	80 e8       	ldi	r24, 0x80	; 128
    1952:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
    1956:	88 e6       	ldi	r24, 0x68	; 104
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	0e 94 33 01 	call	0x266	; 0x266 <lcd_pgm_string>
  wait1s();
    195e:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <wait1000ms>
    1962:	88 24       	eor	r8, r8
    1964:	99 24       	eor	r9, r9
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    1966:	11 e0       	ldi	r17, 0x01	; 1
           adcmv[2] = W20msReadADC(TP3);
           lcd_fix2_string(RH1L);	// "RH_Lo="
        }
                                        //############################################
        if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to VCC
    1968:	72 e0       	ldi	r23, 0x02	; 2
    196a:	c7 2e       	mov	r12, r23
           R_PORT = 2<<(TP1*2);
           adcmv[0] = W20msReadADC(TP1) - U_VCC;
           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to VCC
    196c:	68 e0       	ldi	r22, 0x08	; 8
    196e:	e6 2e       	mov	r14, r22
           R_PORT = 2<<(TP2*2);
           adcmv[1] = W20msReadADC(TP2) - U_VCC;
           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to VCC
    1970:	50 e2       	ldi	r21, 0x20	; 32
    1972:	f5 2e       	mov	r15, r21
           lcd_fix2_string(RLRL);	// "RLRL"
        }
                                        //############################################
        if (tt == 3) { // how equal are the RH resistors
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
           R_DDR = (2<<(TP1*2)) | (2<<(TP2*2));	//RH2 to -
    1974:	4a e0       	ldi	r20, 0x0A	; 10
    1976:	64 2e       	mov	r6, r20
           adcmv[0] = W20msReadADC(TP1);
           adcmv[0] -= (U_VCC/2);
           R_DDR = (2<<(TP1*2)) | (2<<(TP3*2));	//RH3 to -
    1978:	32 e2       	ldi	r19, 0x22	; 34
    197a:	53 2e       	mov	r5, r19
           adcmv[1] = W20msReadADC(TP1);
           adcmv[1] -= (U_VCC/2);
           R_PORT = 2<<(TP2*2);		//RL2 to VCC
           R_DDR = (2<<(TP2*2)) | (2<<(TP3*2));	//RH3 to -
    197c:	28 e2       	ldi	r18, 0x28	; 40
    197e:	42 2e       	mov	r4, r18
           lcd_string(utoa(RHmultip, outval, 10));
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
    1980:	95 e0       	ldi	r25, 0x05	; 5
    1982:	39 2e       	mov	r3, r25
           adcmv[0] = W20msReadADC(TP1);
           adcmv[0] -= ((long)U_VCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
           R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//RL3 to -
    1984:	81 e1       	ldi	r24, 0x11	; 17
    1986:	28 2e       	mov	r2, r24
    1988:	fb c0       	rjmp	.+502    	; 0x1b80 <AutoCheck+0x34e>
  wait1s();
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
        lcd_line2();			//Cursor to column 1, row 2
    198a:	80 ec       	ldi	r24, 0xC0	; 192
    198c:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
        lcd_clear_line();		// clear total line
    1990:	0e 94 16 0b 	call	0x162c	; 0x162c <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    1994:	80 e8       	ldi	r24, 0x80	; 128
    1996:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
        lcd_clear_line();		// clear total line
    199a:	0e 94 16 0b 	call	0x162c	; 0x162c <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    199e:	80 e8       	ldi	r24, 0x80	; 128
    19a0:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
        lcd_data('T');			//output the Testmode "T"
    19a4:	84 e5       	ldi	r24, 0x54	; 84
    19a6:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
        lcd_string(utoa(tt, outval, 10));	//output Test number
    19aa:	c4 01       	movw	r24, r8
    19ac:	6b e0       	ldi	r22, 0x0B	; 11
    19ae:	71 e0       	ldi	r23, 0x01	; 1
    19b0:	4a e0       	ldi	r20, 0x0A	; 10
    19b2:	50 e0       	ldi	r21, 0x00	; 0
    19b4:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <utoa>
    19b8:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_string>
        lcd_space();
    19bc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_space>
                                        //############################################
        if (tt == 1) {   // output of reference voltage and factors for capacity measurement
    19c0:	11 30       	cpi	r17, 0x01	; 1
    19c2:	19 f5       	brne	.+70     	; 0x1a0a <AutoCheck+0x1d8>
           Config.Samples = 190;	// set number of ADC reads near to maximum
    19c4:	70 92 68 01 	sts	0x0168, r7
 #ifdef WITH_AUTO_REF
           (void) ReadADC(0x0e);	// read reference voltage 
           ref_mv = W5msReadADC(0x0e);	// read reference voltage 
           RefVoltage();		//compute RHmultip = f(reference voltage)
 #endif
           lcd_fix2_string(URefT);	//"URef="
    19c8:	86 e8       	ldi	r24, 0x86	; 134
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	0e 94 33 01 	call	0x266	; 0x266 <lcd_pgm_string>
           DisplayValue(ref_mv,-3,'V',4);
    19d0:	60 91 2c 01 	lds	r22, 0x012C
    19d4:	70 91 2d 01 	lds	r23, 0x012D
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	4d ef       	ldi	r20, 0xFD	; 253
    19de:	26 e5       	ldi	r18, 0x56	; 86
    19e0:	04 e0       	ldi	r16, 0x04	; 4
    19e2:	0e 94 1e 0b 	call	0x163c	; 0x163c <DisplayValue>
           lcd_line2();			//Cursor to column 1, row 2
    19e6:	80 ec       	ldi	r24, 0xC0	; 192
    19e8:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
           lcd_fix2_string(RHfakt);	//"RHf="
    19ec:	8b e8       	ldi	r24, 0x8B	; 139
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	0e 94 33 01 	call	0x266	; 0x266 <lcd_pgm_string>
           lcd_string(utoa(RHmultip, outval, 10));
    19f4:	80 91 00 01 	lds	r24, 0x0100
    19f8:	90 91 01 01 	lds	r25, 0x0101
    19fc:	6b e0       	ldi	r22, 0x0B	; 11
    19fe:	71 e0       	ldi	r23, 0x01	; 1
    1a00:	4a e0       	ldi	r20, 0x0A	; 10
    1a02:	50 e0       	ldi	r21, 0x00	; 0
    1a04:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <utoa>
    1a08:	a3 c0       	rjmp	.+326    	; 0x1b50 <AutoCheck+0x31e>
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
    1a0a:	12 30       	cpi	r17, 0x02	; 2
    1a0c:	f1 f4       	brne	.+60     	; 0x1a4a <AutoCheck+0x218>
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	85 b9       	out	0x05, r24	; 5
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
    1a12:	34 b8       	out	0x04, r3	; 4
           adcmv[0] = W20msReadADC(TP1);
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	0e 94 40 15 	call	0x2a80	; 0x2a80 <W20msReadADC>
           adcmv[0] -= ((long)U_VCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1a1a:	84 5b       	subi	r24, 0xB4	; 180
    1a1c:	99 40       	sbci	r25, 0x09	; 9
    1a1e:	9a 83       	std	Y+2, r25	; 0x02
    1a20:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//RL3 to -
    1a22:	24 b8       	out	0x04, r2	; 4
           adcmv[1] = W20msReadADC(TP1);
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	0e 94 40 15 	call	0x2a80	; 0x2a80 <W20msReadADC>
           adcmv[1] -= ((long)U_VCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1a2a:	84 5b       	subi	r24, 0xB4	; 180
    1a2c:	99 40       	sbci	r25, 0x09	; 9
    1a2e:	9c 83       	std	Y+4, r25	; 0x04
    1a30:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 1<<(TP2*2);		//RL2 to VCC
    1a32:	d5 b8       	out	0x05, r13	; 5
           R_DDR = (1<<(TP2*2)) | (1<<(TP3*2));	//RL3 to -
    1a34:	b4 b8       	out	0x04, r11	; 4
           adcmv[2] = W20msReadADC(TP2);
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	0e 94 40 15 	call	0x2a80	; 0x2a80 <W20msReadADC>
           adcmv[2] -= ((long)U_VCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    1a3c:	84 5b       	subi	r24, 0xB4	; 180
    1a3e:	99 40       	sbci	r25, 0x09	; 9
    1a40:	9e 83       	std	Y+6, r25	; 0x06
    1a42:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RLRL);	// "RLRL"
    1a44:	88 e9       	ldi	r24, 0x98	; 152
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	3b c0       	rjmp	.+118    	; 0x1ac0 <AutoCheck+0x28e>
        }
                                        //############################################
        if (tt == 3) { // how equal are the RH resistors
    1a4a:	13 30       	cpi	r17, 0x03	; 3
    1a4c:	e9 f4       	brne	.+58     	; 0x1a88 <AutoCheck+0x256>
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    1a4e:	c5 b8       	out	0x05, r12	; 5
           R_DDR = (2<<(TP1*2)) | (2<<(TP2*2));	//RH2 to -
    1a50:	64 b8       	out	0x04, r6	; 4
           adcmv[0] = W20msReadADC(TP1);
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	0e 94 40 15 	call	0x2a80	; 0x2a80 <W20msReadADC>
           adcmv[0] -= (U_VCC/2);
    1a58:	8a 5b       	subi	r24, 0xBA	; 186
    1a5a:	99 40       	sbci	r25, 0x09	; 9
    1a5c:	9a 83       	std	Y+2, r25	; 0x02
    1a5e:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (2<<(TP1*2)) | (2<<(TP3*2));	//RH3 to -
    1a60:	54 b8       	out	0x04, r5	; 4
           adcmv[1] = W20msReadADC(TP1);
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	0e 94 40 15 	call	0x2a80	; 0x2a80 <W20msReadADC>
           adcmv[1] -= (U_VCC/2);
    1a68:	8a 5b       	subi	r24, 0xBA	; 186
    1a6a:	99 40       	sbci	r25, 0x09	; 9
    1a6c:	9c 83       	std	Y+4, r25	; 0x04
    1a6e:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 2<<(TP2*2);		//RL2 to VCC
    1a70:	e5 b8       	out	0x05, r14	; 5
           R_DDR = (2<<(TP2*2)) | (2<<(TP3*2));	//RH3 to -
    1a72:	44 b8       	out	0x04, r4	; 4
           adcmv[2] = W20msReadADC(TP2);
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	0e 94 40 15 	call	0x2a80	; 0x2a80 <W20msReadADC>
           adcmv[2] -= (U_VCC/2);
    1a7a:	8a 5b       	subi	r24, 0xBA	; 186
    1a7c:	99 40       	sbci	r25, 0x09	; 9
    1a7e:	9e 83       	std	Y+6, r25	; 0x06
    1a80:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RHRH);	// "RHRH"
    1a82:	86 ea       	ldi	r24, 0xA6	; 166
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	1c c0       	rjmp	.+56     	; 0x1ac0 <AutoCheck+0x28e>
        }
                                        //############################################
        if (tt == 4) { // Text release probes
    1a88:	14 30       	cpi	r17, 0x04	; 4
    1a8a:	19 f4       	brne	.+6      	; 0x1a92 <AutoCheck+0x260>
           lcd_fix2_string(RELPROBE);	// "Release Probes"
    1a8c:	88 e7       	ldi	r24, 0x78	; 120
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	17 c0       	rjmp	.+46     	; 0x1ac0 <AutoCheck+0x28e>
        }
                                        //############################################
        if (tt == 5) { // can we switch the ADC pins to GND across R_H resistor?
    1a92:	15 30       	cpi	r17, 0x05	; 5
    1a94:	c1 f4       	brne	.+48     	; 0x1ac6 <AutoCheck+0x294>
           R_PORT = 0;
    1a96:	15 b8       	out	0x05, r1	; 5
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to GND
    1a98:	c4 b8       	out	0x04, r12	; 4
           adcmv[0] = W20msReadADC(TP1);
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	0e 94 40 15 	call	0x2a80	; 0x2a80 <W20msReadADC>
    1aa0:	9a 83       	std	Y+2, r25	; 0x02
    1aa2:	89 83       	std	Y+1, r24	; 0x01

           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to GND
    1aa4:	e4 b8       	out	0x04, r14	; 4
           adcmv[1] = W20msReadADC(TP2);
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	0e 94 40 15 	call	0x2a80	; 0x2a80 <W20msReadADC>
    1aac:	9c 83       	std	Y+4, r25	; 0x04
    1aae:	8b 83       	std	Y+3, r24	; 0x03

           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1ab0:	f4 b8       	out	0x04, r15	; 4
           adcmv[2] = W20msReadADC(TP3);
    1ab2:	82 e0       	ldi	r24, 0x02	; 2
    1ab4:	0e 94 40 15 	call	0x2a80	; 0x2a80 <W20msReadADC>
    1ab8:	9e 83       	std	Y+6, r25	; 0x06
    1aba:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RH1L);	// "RH_Lo="
    1abc:	80 e9       	ldi	r24, 0x90	; 144
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	0e 94 33 01 	call	0x266	; 0x266 <lcd_pgm_string>
    1ac4:	22 c0       	rjmp	.+68     	; 0x1b0a <AutoCheck+0x2d8>
        }
                                        //############################################
        if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
    1ac6:	16 30       	cpi	r17, 0x06	; 6
    1ac8:	f1 f4       	brne	.+60     	; 0x1b06 <AutoCheck+0x2d4>
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to VCC
    1aca:	c4 b8       	out	0x04, r12	; 4
           R_PORT = 2<<(TP1*2);
    1acc:	c5 b8       	out	0x05, r12	; 5
           adcmv[0] = W20msReadADC(TP1) - U_VCC;
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	0e 94 40 15 	call	0x2a80	; 0x2a80 <W20msReadADC>
    1ad4:	84 57       	subi	r24, 0x74	; 116
    1ad6:	93 41       	sbci	r25, 0x13	; 19
    1ad8:	9a 83       	std	Y+2, r25	; 0x02
    1ada:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to VCC
    1adc:	e4 b8       	out	0x04, r14	; 4
           R_PORT = 2<<(TP2*2);
    1ade:	e5 b8       	out	0x05, r14	; 5
           adcmv[1] = W20msReadADC(TP2) - U_VCC;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	0e 94 40 15 	call	0x2a80	; 0x2a80 <W20msReadADC>
    1ae6:	84 57       	subi	r24, 0x74	; 116
    1ae8:	93 41       	sbci	r25, 0x13	; 19
    1aea:	9c 83       	std	Y+4, r25	; 0x04
    1aec:	8b 83       	std	Y+3, r24	; 0x03
           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to VCC
    1aee:	f4 b8       	out	0x04, r15	; 4
           R_PORT = 2<<(TP3*2);
    1af0:	f5 b8       	out	0x05, r15	; 5
           adcmv[2] = W20msReadADC(TP3) - U_VCC;
    1af2:	82 e0       	ldi	r24, 0x02	; 2
    1af4:	0e 94 40 15 	call	0x2a80	; 0x2a80 <W20msReadADC>
    1af8:	84 57       	subi	r24, 0x74	; 116
    1afa:	93 41       	sbci	r25, 0x13	; 19
    1afc:	9e 83       	std	Y+6, r25	; 0x06
    1afe:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix2_string(RH1H);	// "RH_Hi="
    1b00:	84 e9       	ldi	r24, 0x94	; 148
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	dd cf       	rjmp	.-70     	; 0x1ac0 <AutoCheck+0x28e>
        }
                                        //############################################
        if (tt > 1) {	// output 3 voltages 
    1b06:	11 30       	cpi	r17, 0x01	; 1
    1b08:	29 f1       	breq	.+74     	; 0x1b54 <AutoCheck+0x322>
           lcd_line2();			//Cursor to column 1, row 2
    1b0a:	80 ec       	ldi	r24, 0xC0	; 192
    1b0c:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
           lcd_string(itoa(adcmv[0], outval, 10));	//output voltage 1
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	9a 81       	ldd	r25, Y+2	; 0x02
    1b14:	6b e0       	ldi	r22, 0x0B	; 11
    1b16:	71 e0       	ldi	r23, 0x01	; 1
    1b18:	4a e0       	ldi	r20, 0x0A	; 10
    1b1a:	50 e0       	ldi	r21, 0x00	; 0
    1b1c:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <itoa>
    1b20:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_string>
           lcd_space();
    1b24:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_space>
           lcd_string(itoa(adcmv[1], outval, 10));	//output voltage 2
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2c:	6b e0       	ldi	r22, 0x0B	; 11
    1b2e:	71 e0       	ldi	r23, 0x01	; 1
    1b30:	4a e0       	ldi	r20, 0x0A	; 10
    1b32:	50 e0       	ldi	r21, 0x00	; 0
    1b34:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <itoa>
    1b38:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_string>
           lcd_space();
    1b3c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_space>
           lcd_string(itoa(adcmv[2], outval, 10));	//output voltage 3
    1b40:	8d 81       	ldd	r24, Y+5	; 0x05
    1b42:	9e 81       	ldd	r25, Y+6	; 0x06
    1b44:	6b e0       	ldi	r22, 0x0B	; 11
    1b46:	71 e0       	ldi	r23, 0x01	; 1
    1b48:	4a e0       	ldi	r20, 0x0A	; 10
    1b4a:	50 e0       	ldi	r21, 0x00	; 0
    1b4c:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <itoa>
    1b50:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_string>
        }
        ADC_DDR =  TXD_MSK;		// all-Pins to Input
    1b54:	e7 b8       	out	0x07, r14	; 7
        ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
    1b56:	e8 b8       	out	0x08, r14	; 8
        R_DDR = 0;			// all R-Ports to Input
    1b58:	14 b8       	out	0x04, r1	; 4
        R_PORT = 0;
    1b5a:	15 b8       	out	0x05, r1	; 5
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    1b5c:	4f 9b       	sbis	0x09, 7	; 9
    1b5e:	0b c0       	rjmp	.+22     	; 0x1b76 <AutoCheck+0x344>
	   // if key is pressed, don't repeat
           break;
        }
        wait500ms();
    1b60:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <wait500ms>
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    1b64:	4f 9b       	sbis	0x09, 7	; 9
    1b66:	07 c0       	rjmp	.+14     	; 0x1b76 <AutoCheck+0x344>
	   // if key is pressed, don't repeat
           break;
        }
        wait500ms();
    1b68:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <wait500ms>
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
  wait1s();
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
    1b6c:	a3 94       	inc	r10
    1b6e:	fa 2d       	mov	r31, r10
    1b70:	f4 30       	cpi	r31, 0x04	; 4
    1b72:	09 f0       	breq	.+2      	; 0x1b76 <AutoCheck+0x344>
    1b74:	0a cf       	rjmp	.-492    	; 0x198a <AutoCheck+0x158>
	   // if key is pressed, don't repeat
           break;
        }
        wait500ms();
     } //end for ww
     wait1s();
    1b76:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <wait1000ms>
  lcd_line1();
  lcd_fix2_string(SELFTEST);		// "Selftest mode.."
  wait1s();
 #define TEST_COUNT 7
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    1b7a:	1f 5f       	subi	r17, 0xFF	; 255
    1b7c:	17 30       	cpi	r17, 0x07	; 7
    1b7e:	59 f0       	breq	.+22     	; 0x1b96 <AutoCheck+0x364>
void AutoCheck(void) {
    1b80:	aa 24       	eor	r10, r10
        lcd_line2();			//Cursor to column 1, row 2
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_clear_line();		// clear total line
        lcd_line1();			//Cursor to column 1, row 1
        lcd_data('T');			//output the Testmode "T"
    1b82:	08 94       	sec
    1b84:	81 1c       	adc	r8, r1
    1b86:	91 1c       	adc	r9, r1
           adcmv[0] = W20msReadADC(TP1);
           adcmv[0] -= ((long)U_VCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
           R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//RL3 to -
           adcmv[1] = W20msReadADC(TP1);
           adcmv[1] -= ((long)U_VCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
           R_PORT = 1<<(TP2*2);		//RL2 to VCC
    1b88:	04 e0       	ldi	r16, 0x04	; 4
    1b8a:	d0 2e       	mov	r13, r16
           R_DDR = (1<<(TP2*2)) | (1<<(TP3*2));	//RL3 to -
    1b8c:	b4 e1       	ldi	r27, 0x14	; 20
    1b8e:	bb 2e       	mov	r11, r27
        lcd_data('T');			//output the Testmode "T"
        lcd_string(utoa(tt, outval, 10));	//output Test number
        lcd_space();
                                        //############################################
        if (tt == 1) {   // output of reference voltage and factors for capacity measurement
           Config.Samples = 190;	// set number of ADC reads near to maximum
    1b90:	ae eb       	ldi	r26, 0xBE	; 190
    1b92:	7a 2e       	mov	r7, r26
    1b94:	fa ce       	rjmp	.-524    	; 0x198a <AutoCheck+0x158>
     wait1s();
  } //end for tt
#endif

  // measurement of internal resistance of the ADC port outputs switched to GND
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    1b96:	f9 e0       	ldi	r31, 0x09	; 9
    1b98:	cf 2e       	mov	r12, r31
    1b9a:	c7 b8       	out	0x07, r12	; 7
  R_PORT = 1<<(TP1*2);		//R_L-PORT 1 to VCC
    1b9c:	dd 24       	eor	r13, r13
    1b9e:	d3 94       	inc	r13
    1ba0:	d5 b8       	out	0x05, r13	; 5
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to VCC
    1ba2:	d4 b8       	out	0x04, r13	; 4
  adcmv[0] = W5msReadADC(TP1);
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
    1baa:	7c 01       	movw	r14, r24

  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin 2 to output 0V
    1bac:	ea e0       	ldi	r30, 0x0A	; 10
    1bae:	5e 2e       	mov	r5, r30
    1bb0:	57 b8       	out	0x07, r5	; 7
  R_PORT =  1<<(TP2*2);	//R_L-PORT 2 to VCC
    1bb2:	74 e0       	ldi	r23, 0x04	; 4
    1bb4:	67 2e       	mov	r6, r23
    1bb6:	65 b8       	out	0x05, r6	; 5
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to VCC
    1bb8:	64 b8       	out	0x04, r6	; 4
  adcmv[1] = W5msReadADC(TP2);
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
    1bc0:	8c 01       	movw	r16, r24

  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin 3 to output 0V
    1bc2:	6c e0       	ldi	r22, 0x0C	; 12
    1bc4:	76 2e       	mov	r7, r22
    1bc6:	77 b8       	out	0x07, r7	; 7
  R_PORT =  1<<(TP3*2);	//R_L-PORT 3 to VCC
    1bc8:	50 e1       	ldi	r21, 0x10	; 16
    1bca:	85 2e       	mov	r8, r21
    1bcc:	85 b8       	out	0x05, r8	; 5
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to VCC
    1bce:	84 b8       	out	0x04, r8	; 4
  adcmv[2] = W5msReadADC(TP3);
    1bd0:	82 e0       	ldi	r24, 0x02	; 2
    1bd2:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
  sum_rm = (adcmv[0] + adcmv[1] + adcmv[2]); //add all three values
    1bd6:	0e 0d       	add	r16, r14
    1bd8:	1f 1d       	adc	r17, r15
    1bda:	08 0f       	add	r16, r24
    1bdc:	19 1f       	adc	r17, r25

  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
    1bde:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
    1be0:	c8 b8       	out	0x08, r12	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    1be2:	c7 b8       	out	0x07, r12	; 7
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
    1be4:	d4 b8       	out	0x04, r13	; 4
  adcmv[0] = U_VCC - W5msReadADC(TP1);
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
    1bec:	44 e7       	ldi	r20, 0x74	; 116
    1bee:	c4 2e       	mov	r12, r20
    1bf0:	43 e1       	ldi	r20, 0x13	; 19
    1bf2:	d4 2e       	mov	r13, r20
    1bf4:	56 01       	movw	r10, r12
    1bf6:	a8 1a       	sub	r10, r24
    1bf8:	b9 0a       	sbc	r11, r25
    1bfa:	ba 82       	std	Y+2, r11	; 0x02
    1bfc:	a9 82       	std	Y+1, r10	; 0x01
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
    1bfe:	58 b8       	out	0x08, r5	; 8
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
    1c00:	57 b8       	out	0x07, r5	; 7
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
    1c02:	64 b8       	out	0x04, r6	; 4
  adcmv[1] = U_VCC - W5msReadADC(TP2);
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
    1c0a:	76 01       	movw	r14, r12
    1c0c:	e8 1a       	sub	r14, r24
    1c0e:	f9 0a       	sbc	r15, r25
    1c10:	fc 82       	std	Y+4, r15	; 0x04
    1c12:	eb 82       	std	Y+3, r14	; 0x03

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
    1c14:	78 b8       	out	0x08, r7	; 8
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
    1c16:	77 b8       	out	0x07, r7	; 7
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
    1c18:	84 b8       	out	0x04, r8	; 4
  adcmv[2] = U_VCC - W5msReadADC(TP3);
    1c1a:	82 e0       	ldi	r24, 0x02	; 2
    1c1c:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>

  sum_c0 = (adcmv[0] + adcmv[1] + adcmv[2]);
    1c20:	ea 0c       	add	r14, r10
    1c22:	fb 1c       	adc	r15, r11
  adcmv[1] = U_VCC - W5msReadADC(TP2);

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
  adcmv[2] = U_VCC - W5msReadADC(TP3);
    1c24:	c8 1a       	sub	r12, r24
    1c26:	d9 0a       	sbc	r13, r25

  sum_c0 = (adcmv[0] + adcmv[1] + adcmv[2]);
    1c28:	ec 0c       	add	r14, r12
    1c2a:	fd 1c       	adc	r15, r13
  u680 = ((U_VCC * 3) - sum_rm - sum_c0);	//three times the voltage at the 680 Ohm
    1c2c:	88 27       	eor	r24, r24
    1c2e:	99 27       	eor	r25, r25
    1c30:	80 1b       	sub	r24, r16
    1c32:	91 0b       	sbc	r25, r17
    1c34:	84 5a       	subi	r24, 0xA4	; 164
    1c36:	95 4c       	sbci	r25, 0xC5	; 197
    1c38:	8e 19       	sub	r24, r14
    1c3a:	9f 09       	sbc	r25, r15
  pin_rm = (unsigned long)((unsigned long)sum_rm * (unsigned long)R_L_VAL) / (unsigned long)u680;
    1c3c:	5c 01       	movw	r10, r24
    1c3e:	cc 24       	eor	r12, r12
    1c40:	dd 24       	eor	r13, r13
    1c42:	b8 01       	movw	r22, r16
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	20 e9       	ldi	r18, 0x90	; 144
    1c4a:	3a e1       	ldi	r19, 0x1A	; 26
    1c4c:	40 e0       	ldi	r20, 0x00	; 0
    1c4e:	50 e0       	ldi	r21, 0x00	; 0
    1c50:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__mulsi3>
    1c54:	a6 01       	movw	r20, r12
    1c56:	95 01       	movw	r18, r10
    1c58:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__udivmodsi4>
    1c5c:	49 01       	movw	r8, r18
  adcmv[2] = pin_rm;	// for last output in row 2
    1c5e:	3e 83       	std	Y+6, r19	; 0x06
    1c60:	2d 83       	std	Y+5, r18	; 0x05
  pin_rp = (unsigned long)((unsigned long)sum_c0 * (unsigned long)R_L_VAL) / (unsigned long)u680;
    1c62:	b7 01       	movw	r22, r14
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	20 e9       	ldi	r18, 0x90	; 144
    1c6a:	3a e1       	ldi	r19, 0x1A	; 26
    1c6c:	40 e0       	ldi	r20, 0x00	; 0
    1c6e:	50 e0       	ldi	r21, 0x00	; 0
    1c70:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__mulsi3>
    1c74:	a6 01       	movw	r20, r12
    1c76:	95 01       	movw	r18, r10
    1c78:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__udivmodsi4>
    1c7c:	79 01       	movw	r14, r18
  lcd_clear();
    1c7e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_clear>
  lcd_fix_string(RIHI);	// "RiHi="
    1c82:	81 e5       	ldi	r24, 0x51	; 81
    1c84:	91 e0       	ldi	r25, 0x01	; 1
    1c86:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
  DisplayValue(pin_rp,-1,LCD_CHAR_OMEGA,3);
    1c8a:	b7 01       	movw	r22, r14
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	4f ef       	ldi	r20, 0xFF	; 255
    1c92:	24 ef       	ldi	r18, 0xF4	; 244
    1c94:	03 e0       	ldi	r16, 0x03	; 3
    1c96:	0e 94 1e 0b 	call	0x163c	; 0x163c <DisplayValue>
  lcd_line2();
    1c9a:	80 ec       	ldi	r24, 0xC0	; 192
    1c9c:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
  lcd_fix_string(RILO);	// "RiLo="
    1ca0:	88 e5       	ldi	r24, 0x58	; 88
    1ca2:	91 e0       	ldi	r25, 0x01	; 1
    1ca4:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
  DisplayValue(pin_rm,-1,LCD_CHAR_OMEGA,3);
    1ca8:	b4 01       	movw	r22, r8
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	4f ef       	ldi	r20, 0xFF	; 255
    1cb0:	24 ef       	ldi	r18, 0xF4	; 244
    1cb2:	0e 94 1e 0b 	call	0x163c	; 0x163c <DisplayValue>
  wait2s();			//wait 2 seconds
    1cb6:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <wait2s>
#ifdef AUTO_CAL
  if ((pin_rp < 280) && (pin_rm < 250)) {
    1cba:	28 e1       	ldi	r18, 0x18	; 24
    1cbc:	e2 16       	cp	r14, r18
    1cbe:	21 e0       	ldi	r18, 0x01	; 1
    1cc0:	f2 06       	cpc	r15, r18
    1cc2:	90 f4       	brcc	.+36     	; 0x1ce8 <AutoCheck+0x4b6>
    1cc4:	8a ef       	ldi	r24, 0xFA	; 250
    1cc6:	88 16       	cp	r8, r24
    1cc8:	91 04       	cpc	r9, r1
    1cca:	70 f4       	brcc	.+28     	; 0x1ce8 <AutoCheck+0x4b6>
     // rp is below 28 Ohm and rm is below 25 Ohm
     (void) eeprom_write_word((uint16_t *)(&R680pl), pin_rp+R_L_VAL);  //hold VCC resistance value in EEprom
    1ccc:	b7 01       	movw	r22, r14
    1cce:	60 57       	subi	r22, 0x70	; 112
    1cd0:	75 4e       	sbci	r23, 0xE5	; 229
    1cd2:	89 ea       	ldi	r24, 0xA9	; 169
    1cd4:	91 e0       	ldi	r25, 0x01	; 1
    1cd6:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__eewr_word_m168>
     (void) eeprom_write_word((uint16_t *)(&R680mi), pin_rm+R_L_VAL);  //hold GND resistance value in EEprom
    1cda:	b4 01       	movw	r22, r8
    1cdc:	60 57       	subi	r22, 0x70	; 112
    1cde:	75 4e       	sbci	r23, 0xE5	; 229
    1ce0:	8b ea       	ldi	r24, 0xAB	; 171
    1ce2:	91 e0       	ldi	r25, 0x01	; 1
    1ce4:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__eewr_word_m168>
  }
#endif

#ifdef C_MESS
  //measure Zero offset for Capacity measurement
  adcmv[3] = 0;
    1ce8:	18 86       	std	Y+8, r1	; 0x08
    1cea:	1f 82       	std	Y+7, r1	; 0x07
  PartFound = PART_NONE;
    1cec:	10 92 07 01 	sts	0x0107, r1
  ReadCapacity(TP3, TP1);
    1cf0:	82 e0       	ldi	r24, 0x02	; 2
    1cf2:	60 e0       	ldi	r22, 0x00	; 0
    1cf4:	0e 94 b9 08 	call	0x1172	; 0x1172 <ReadCapacity>
  adcmv[5] = (unsigned int) cval_uncorrected;	//save capacity value of empty Pin 1:3
    1cf8:	e0 90 43 01 	lds	r14, 0x0143
    1cfc:	f0 90 44 01 	lds	r15, 0x0144
    1d00:	fc 86       	std	Y+12, r15	; 0x0c
    1d02:	eb 86       	std	Y+11, r14	; 0x0b
  ReadCapacity(TP3, TP2);
    1d04:	82 e0       	ldi	r24, 0x02	; 2
    1d06:	61 e0       	ldi	r22, 0x01	; 1
    1d08:	0e 94 b9 08 	call	0x1172	; 0x1172 <ReadCapacity>
  adcmv[6] = (unsigned int) cval_uncorrected;	//save capacity value of empty Pin 2:3
    1d0c:	00 91 43 01 	lds	r16, 0x0143
    1d10:	10 91 44 01 	lds	r17, 0x0144
    1d14:	1e 87       	std	Y+14, r17	; 0x0e
    1d16:	0d 87       	std	Y+13, r16	; 0x0d
  ReadCapacity(TP2, TP1);
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	60 e0       	ldi	r22, 0x00	; 0
    1d1c:	0e 94 b9 08 	call	0x1172	; 0x1172 <ReadCapacity>
  adcmv[2] = (unsigned int) cval_uncorrected;	//save capacity value of empty Pin 1:2
    1d20:	c0 90 43 01 	lds	r12, 0x0143
    1d24:	d0 90 44 01 	lds	r13, 0x0144
    1d28:	de 82       	std	Y+6, r13	; 0x06
    1d2a:	cd 82       	std	Y+5, r12	; 0x05
  ReadCapacity(TP1, TP3);
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	62 e0       	ldi	r22, 0x02	; 2
    1d30:	0e 94 b9 08 	call	0x1172	; 0x1172 <ReadCapacity>
  adcmv[1] = (unsigned int) cval_uncorrected;	//save capacity value of empty Pin 3:1
    1d34:	80 91 43 01 	lds	r24, 0x0143
    1d38:	90 91 44 01 	lds	r25, 0x0144
    1d3c:	9c 83       	std	Y+4, r25	; 0x04
    1d3e:	8b 83       	std	Y+3, r24	; 0x03
  ReadCapacity(TP2, TP3);
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	62 e0       	ldi	r22, 0x02	; 2
    1d44:	0e 94 b9 08 	call	0x1172	; 0x1172 <ReadCapacity>
  adcmv[4] = (unsigned int) cval_uncorrected;	//save capacity value of empty Pin 3:2
    1d48:	80 91 43 01 	lds	r24, 0x0143
    1d4c:	90 91 44 01 	lds	r25, 0x0144
    1d50:	9a 87       	std	Y+10, r25	; 0x0a
    1d52:	89 87       	std	Y+9, r24	; 0x09
  ReadCapacity(TP1, TP2);
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	61 e0       	ldi	r22, 0x01	; 1
    1d58:	0e 94 b9 08 	call	0x1172	; 0x1172 <ReadCapacity>
  adcmv[0] = (unsigned int) cval_uncorrected;	//save capacity value of empty Pin 2:1
    1d5c:	80 91 43 01 	lds	r24, 0x0143
    1d60:	90 91 44 01 	lds	r25, 0x0144
    1d64:	9a 83       	std	Y+2, r25	; 0x02
    1d66:	89 83       	std	Y+1, r24	; 0x01
  lcd_clear();
    1d68:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_clear>
  lcd_data('C');
    1d6c:	83 e4       	ldi	r24, 0x43	; 67
    1d6e:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
  lcd_data('0');
    1d72:	80 e3       	ldi	r24, 0x30	; 48
    1d74:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
  lcd_space();
    1d78:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_space>
  lcd_string(itoa(adcmv[5], outval, 10));	//output cap0 1:3
    1d7c:	c7 01       	movw	r24, r14
    1d7e:	6b e0       	ldi	r22, 0x0B	; 11
    1d80:	71 e0       	ldi	r23, 0x01	; 1
    1d82:	4a e0       	ldi	r20, 0x0A	; 10
    1d84:	50 e0       	ldi	r21, 0x00	; 0
    1d86:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <itoa>
    1d8a:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_string>
  lcd_space();
    1d8e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_space>
  lcd_string(itoa(adcmv[6], outval, 10));	//output cap0 2:3
    1d92:	c8 01       	movw	r24, r16
    1d94:	6b e0       	ldi	r22, 0x0B	; 11
    1d96:	71 e0       	ldi	r23, 0x01	; 1
    1d98:	4a e0       	ldi	r20, 0x0A	; 10
    1d9a:	50 e0       	ldi	r21, 0x00	; 0
    1d9c:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <itoa>
    1da0:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_string>
  lcd_space();
    1da4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_space>
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
    1da8:	b6 01       	movw	r22, r12
    1daa:	88 27       	eor	r24, r24
    1dac:	77 fd       	sbrc	r23, 7
    1dae:	80 95       	com	r24
    1db0:	98 2f       	mov	r25, r24
    1db2:	44 ef       	ldi	r20, 0xF4	; 244
    1db4:	26 e4       	ldi	r18, 0x46	; 70
    1db6:	03 e0       	ldi	r16, 0x03	; 3
    1db8:	0e 94 1e 0b 	call	0x163c	; 0x163c <DisplayValue>
    1dbc:	8e 01       	movw	r16, r28
    1dbe:	0f 5f       	subi	r16, 0xFF	; 255
    1dc0:	1f 4f       	sbci	r17, 0xFF	; 255
void AutoCheck(void) {
    1dc2:	ce 01       	movw	r24, r28
    1dc4:	0f 96       	adiw	r24, 0x0f	; 15
    1dc6:	f8 01       	movw	r30, r16
  lcd_string(itoa(adcmv[6], outval, 10));	//output cap0 2:3
  lcd_space();
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
    1dc8:	21 91       	ld	r18, Z+
    1dca:	31 91       	ld	r19, Z+
    1dcc:	27 34       	cpi	r18, 0x47	; 71
    1dce:	31 05       	cpc	r19, r1
    1dd0:	b4 f4       	brge	.+44     	; 0x1dfe <AutoCheck+0x5cc>
  lcd_space();
  lcd_string(itoa(adcmv[6], outval, 10));	//output cap0 2:3
  lcd_space();
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
    1dd2:	e8 17       	cp	r30, r24
    1dd4:	f9 07       	cpc	r31, r25
    1dd6:	c1 f7       	brne	.-16     	; 0x1dc8 <AutoCheck+0x596>
    1dd8:	ee 24       	eor	r14, r14
    1dda:	ff 24       	eor	r15, r15
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
    1ddc:	f8 01       	movw	r30, r16
    1dde:	60 81       	ld	r22, Z
    1de0:	0e 5f       	subi	r16, 0xFE	; 254
    1de2:	1f 4f       	sbci	r17, 0xFF	; 255
    1de4:	61 5f       	subi	r22, 0xF1	; 241
    1de6:	c7 01       	movw	r24, r14
    1de8:	89 54       	subi	r24, 0x49	; 73
    1dea:	9e 4f       	sbci	r25, 0xFE	; 254
    1dec:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <__eewr_byte_m168>
    1df0:	08 94       	sec
    1df2:	e1 1c       	adc	r14, r1
    1df4:	f1 1c       	adc	r15, r1
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
    1df6:	f7 e0       	ldi	r31, 0x07	; 7
    1df8:	ef 16       	cp	r14, r31
    1dfa:	f1 04       	cpc	r15, r1
    1dfc:	79 f7       	brne	.-34     	; 0x1ddc <AutoCheck+0x5aa>
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
  }
no_c0save:
 #endif
 wait2s();		//wait 2 seconds
    1dfe:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <wait2s>
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
    1e02:	10 e0       	ldi	r17, 0x00	; 0
 for (ww=0;ww<64;ww++) {
    1e04:	00 e0       	ldi	r16, 0x00	; 0
     lcd_clear();
    1e06:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_clear>
     lcd_data('1');
    1e0a:	81 e3       	ldi	r24, 0x31	; 49
    1e0c:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
     lcd_fix_string(CapZeich);	// "-||-"
    1e10:	87 e2       	ldi	r24, 0x27	; 39
    1e12:	91 e0       	ldi	r25, 0x01	; 1
    1e14:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
     lcd_data('3');
    1e18:	83 e3       	ldi	r24, 0x33	; 51
    1e1a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
     lcd_fix_string(MinCap);	// " >100nF!"
    1e1e:	85 e6       	ldi	r24, 0x65	; 101
    1e20:	91 e0       	ldi	r25, 0x01	; 1
    1e22:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
     PartFound = PART_NONE;
    1e26:	10 92 07 01 	sts	0x0107, r1
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
    1e2a:	82 e0       	ldi	r24, 0x02	; 2
    1e2c:	60 e0       	ldi	r22, 0x00	; 0
    1e2e:	0e 94 b9 08 	call	0x1172	; 0x1172 <ReadCapacity>
     if (((cpre == -12) && (cval > 95000)) || ((cpre == -10) && (cval < 300000))) {
    1e32:	80 91 32 01 	lds	r24, 0x0132
    1e36:	84 3f       	cpi	r24, 0xF4	; 244
    1e38:	89 f4       	brne	.+34     	; 0x1e5c <AutoCheck+0x62a>
    1e3a:	80 91 64 01 	lds	r24, 0x0164
    1e3e:	90 91 65 01 	lds	r25, 0x0165
    1e42:	a0 91 66 01 	lds	r26, 0x0166
    1e46:	b0 91 67 01 	lds	r27, 0x0167
    1e4a:	89 31       	cpi	r24, 0x19	; 25
    1e4c:	23 e7       	ldi	r18, 0x73	; 115
    1e4e:	92 07       	cpc	r25, r18
    1e50:	21 e0       	ldi	r18, 0x01	; 1
    1e52:	a2 07       	cpc	r26, r18
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	b2 07       	cpc	r27, r18
    1e58:	a8 f4       	brcc	.+42     	; 0x1e84 <AutoCheck+0x652>
    1e5a:	bc c0       	rjmp	.+376    	; 0x1fd4 <AutoCheck+0x7a2>
    1e5c:	86 3f       	cpi	r24, 0xF6	; 246
    1e5e:	09 f0       	breq	.+2      	; 0x1e62 <AutoCheck+0x630>
    1e60:	b9 c0       	rjmp	.+370    	; 0x1fd4 <AutoCheck+0x7a2>
    1e62:	80 91 64 01 	lds	r24, 0x0164
    1e66:	90 91 65 01 	lds	r25, 0x0165
    1e6a:	a0 91 66 01 	lds	r26, 0x0166
    1e6e:	b0 91 67 01 	lds	r27, 0x0167
    1e72:	80 3e       	cpi	r24, 0xE0	; 224
    1e74:	e3 e9       	ldi	r30, 0x93	; 147
    1e76:	9e 07       	cpc	r25, r30
    1e78:	e4 e0       	ldi	r30, 0x04	; 4
    1e7a:	ae 07       	cpc	r26, r30
    1e7c:	e0 e0       	ldi	r30, 0x00	; 0
    1e7e:	be 07       	cpc	r27, r30
    1e80:	08 f0       	brcs	.+2      	; 0x1e84 <AutoCheck+0x652>
    1e82:	a8 c0       	rjmp	.+336    	; 0x1fd4 <AutoCheck+0x7a2>
        cap_found++;
    1e84:	1f 5f       	subi	r17, 0xFF	; 255
     } else {
        cap_found = 0;		// wait for stable connection
     }
     if (cap_found > 1) {
    1e86:	12 30       	cpi	r17, 0x02	; 2
    1e88:	09 f0       	breq	.+2      	; 0x1e8c <AutoCheck+0x65a>
    1e8a:	a5 c0       	rjmp	.+330    	; 0x1fd6 <AutoCheck+0x7a4>
        // value of capacitor is correct
        (void) eeprom_write_word((uint16_t *)(&ref_offset), load_diff);	// hold zero offset + slew rate dependend offset
    1e8c:	60 91 4a 01 	lds	r22, 0x014A
    1e90:	70 91 4b 01 	lds	r23, 0x014B
    1e94:	85 eb       	ldi	r24, 0xB5	; 181
    1e96:	91 e0       	ldi	r25, 0x01	; 1
    1e98:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__eewr_word_m168>
        lcd_clear();
    1e9c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_clear>
        lcd_fix_string(REF_Cstr);	// "REF_C="
    1ea0:	8d e6       	ldi	r24, 0x6D	; 109
    1ea2:	91 e0       	ldi	r25, 0x01	; 1
    1ea4:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
        lcd_string(itoa(load_diff, outval, 10));	//output REF_C_KORR
    1ea8:	80 91 4a 01 	lds	r24, 0x014A
    1eac:	90 91 4b 01 	lds	r25, 0x014B
    1eb0:	6b e0       	ldi	r22, 0x0B	; 11
    1eb2:	71 e0       	ldi	r23, 0x01	; 1
    1eb4:	4a e0       	ldi	r20, 0x0A	; 10
    1eb6:	50 e0       	ldi	r21, 0x00	; 0
    1eb8:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <itoa>
    1ebc:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_string>
  #ifdef AUTOSCALE_ADC
        ADC_PORT =  TXD_VAL;	//ADC-Port 1 to GND
    1ec0:	88 e0       	ldi	r24, 0x08	; 8
    1ec2:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    1ec4:	89 e0       	ldi	r24, 0x09	; 9
    1ec6:	87 b9       	out	0x07, r24	; 7
        R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1ec8:	80 e2       	ldi	r24, 0x20	; 32
    1eca:	84 b9       	out	0x04, r24	; 4
        do {
           adcmv[0] = ReadADC(TP3);
    1ecc:	82 e0       	ldi	r24, 0x02	; 2
    1ece:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
        } while (adcmv[0] > 980);
    1ed2:	f3 e0       	ldi	r31, 0x03	; 3
    1ed4:	85 3d       	cpi	r24, 0xD5	; 213
    1ed6:	9f 07       	cpc	r25, r31
    1ed8:	cc f7       	brge	.-14     	; 0x1ecc <AutoCheck+0x69a>
        R_DDR = 0;		//all Pins to input 
    1eda:	14 b8       	out	0x04, r1	; 4
        Config.U_Bandgap = 0;	// do not use internal Ref
    1edc:	10 92 6b 01 	sts	0x016B, r1
    1ee0:	10 92 6a 01 	sts	0x016A, r1
        adcmv[0] = ReadADC(TP3);  // get cap voltage with VCC reference
    1ee4:	82 e0       	ldi	r24, 0x02	; 2
    1ee6:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
    1eea:	4c 01       	movw	r8, r24
        Config.U_Bandgap = ADC_internal_reference;
    1eec:	8d ea       	ldi	r24, 0xAD	; 173
    1eee:	91 e0       	ldi	r25, 0x01	; 1
    1ef0:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__eerd_byte_m168>
    1ef4:	99 27       	eor	r25, r25
    1ef6:	87 fd       	sbrc	r24, 7
    1ef8:	90 95       	com	r25
    1efa:	20 91 2c 01 	lds	r18, 0x012C
    1efe:	30 91 2d 01 	lds	r19, 0x012D
    1f02:	82 0f       	add	r24, r18
    1f04:	93 1f       	adc	r25, r19
    1f06:	90 93 6b 01 	sts	0x016B, r25
    1f0a:	80 93 6a 01 	sts	0x016A, r24
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
    1f0e:	82 e0       	ldi	r24, 0x02	; 2
    1f10:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
    1f14:	8c 01       	movw	r16, r24
        Config.U_Bandgap = 0;	// do not use internal Ref
    1f16:	10 92 6b 01 	sts	0x016B, r1
    1f1a:	10 92 6a 01 	sts	0x016A, r1
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
    1f1e:	82 e0       	ldi	r24, 0x02	; 2
    1f20:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
    1f24:	5c 01       	movw	r10, r24
        Config.U_Bandgap = ADC_internal_reference;
    1f26:	c0 90 2c 01 	lds	r12, 0x012C
    1f2a:	d0 90 2d 01 	lds	r13, 0x012D
    1f2e:	8d ea       	ldi	r24, 0xAD	; 173
    1f30:	91 e0       	ldi	r25, 0x01	; 1
    1f32:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__eerd_byte_m168>
    1f36:	99 27       	eor	r25, r25
    1f38:	87 fd       	sbrc	r24, 7
    1f3a:	90 95       	com	r25
    1f3c:	8c 0d       	add	r24, r12
    1f3e:	9d 1d       	adc	r25, r13
    1f40:	90 93 6b 01 	sts	0x016B, r25
    1f44:	80 93 6a 01 	sts	0x016A, r24
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1f48:	8d ea       	ldi	r24, 0xAD	; 173
    1f4a:	91 e0       	ldi	r25, 0x01	; 1
    1f4c:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__eerd_byte_m168>
    1f50:	e8 2e       	mov	r14, r24
        lcd_line2();
    1f52:	80 ec       	ldi	r24, 0xC0	; 192
    1f54:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
        lcd_fix_string(REF_Rstr);	// "REF_R="
    1f58:	84 e7       	ldi	r24, 0x74	; 116
    1f5a:	91 e0       	ldi	r25, 0x01	; 1
    1f5c:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1f60:	8d ea       	ldi	r24, 0xAD	; 173
    1f62:	91 e0       	ldi	r25, 0x01	; 1
    1f64:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__eerd_byte_m168>
        Config.U_Bandgap = ADC_internal_reference;
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
        Config.U_Bandgap = 0;	// do not use internal Ref
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
        Config.U_Bandgap = ADC_internal_reference;
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1f68:	33 e0       	ldi	r19, 0x03	; 3
    1f6a:	f3 2e       	mov	r15, r19
    1f6c:	f8 0e       	add	r15, r24
    1f6e:	a8 0c       	add	r10, r8
    1f70:	b9 1c       	adc	r11, r9
    1f72:	a0 1a       	sub	r10, r16
    1f74:	b1 0a       	sbc	r11, r17
    1f76:	a0 1a       	sub	r10, r16
    1f78:	b1 0a       	sbc	r11, r17
    1f7a:	b5 01       	movw	r22, r10
    1f7c:	88 27       	eor	r24, r24
    1f7e:	77 fd       	sbrc	r23, 7
    1f80:	80 95       	com	r24
    1f82:	98 2f       	mov	r25, r24
    1f84:	2e 2d       	mov	r18, r14
    1f86:	33 27       	eor	r19, r19
    1f88:	27 fd       	sbrc	r18, 7
    1f8a:	30 95       	com	r19
    1f8c:	2c 0d       	add	r18, r12
    1f8e:	3d 1d       	adc	r19, r13
    1f90:	40 e0       	ldi	r20, 0x00	; 0
    1f92:	50 e0       	ldi	r21, 0x00	; 0
    1f94:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__mulsi3>
    1f98:	00 0f       	add	r16, r16
    1f9a:	11 1f       	adc	r17, r17
    1f9c:	98 01       	movw	r18, r16
    1f9e:	44 27       	eor	r20, r20
    1fa0:	37 fd       	sbrc	r19, 7
    1fa2:	40 95       	com	r20
    1fa4:	54 2f       	mov	r21, r20
    1fa6:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__divmodsi4>
        lcd_line2();
        lcd_fix_string(REF_Rstr);	// "REF_R="
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1faa:	f2 0e       	add	r15, r18
        (void) eeprom_write_byte((uint8_t *)(&RefDiff), (uint8_t)udiff2);	// hold offset for true reference Voltage
    1fac:	8d ea       	ldi	r24, 0xAD	; 173
    1fae:	91 e0       	ldi	r25, 0x01	; 1
    1fb0:	6f 2d       	mov	r22, r15
    1fb2:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <__eewr_byte_m168>
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
    1fb6:	8f 2d       	mov	r24, r15
    1fb8:	99 27       	eor	r25, r25
    1fba:	87 fd       	sbrc	r24, 7
    1fbc:	90 95       	com	r25
    1fbe:	6b e0       	ldi	r22, 0x0B	; 11
    1fc0:	71 e0       	ldi	r23, 0x01	; 1
    1fc2:	4a e0       	ldi	r20, 0x0A	; 10
    1fc4:	50 e0       	ldi	r21, 0x00	; 0
    1fc6:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <itoa>
    1fca:	0e 94 1f 01 	call	0x23e	; 0x23e <lcd_string>
  #endif
        wait4s();
    1fce:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <wait4s>
        break;
    1fd2:	07 c0       	rjmp	.+14     	; 0x1fe2 <AutoCheck+0x7b0>
     lcd_data('3');
     lcd_fix_string(MinCap);	// " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     if (((cpre == -12) && (cval > 95000)) || ((cpre == -10) && (cval < 300000))) {
    1fd4:	10 e0       	ldi	r17, 0x00	; 0
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
  #endif
        wait4s();
        break;
     }
     wait200ms();			// wait additional time
    1fd6:	0e 94 21 15 	call	0x2a42	; 0x2a42 <wait200ms>
 wait2s();		//wait 2 seconds
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
    1fda:	0f 5f       	subi	r16, 0xFF	; 255
    1fdc:	00 34       	cpi	r16, 0x40	; 64
    1fde:	09 f0       	breq	.+2      	; 0x1fe2 <AutoCheck+0x7b0>
    1fe0:	12 cf       	rjmp	.-476    	; 0x1e06 <AutoCheck+0x5d4>
  }

 #endif
#endif

  Config.Samples = ANZ_MESS;	// set to configured number of ADC samples
    1fe2:	89 e1       	ldi	r24, 0x19	; 25
    1fe4:	80 93 68 01 	sts	0x0168, r24
  lcd_clear();
    1fe8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_clear>
//  lcd_line1();
  lcd_line2();
    1fec:	80 ec       	ldi	r24, 0xC0	; 192
    1fee:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
  lcd_fix_string(VERSION);	//"Version ..."
    1ff2:	83 e4       	ldi	r24, 0x43	; 67
    1ff4:	91 e0       	ldi	r25, 0x01	; 1
    1ff6:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
  lcd_line1();
    1ffa:	80 e8       	ldi	r24, 0x80	; 128
    1ffc:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
  lcd_fix_string(ATE);		//"Selftest End"
    2000:	8c ed       	ldi	r24, 0xDC	; 220
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
#ifdef FREQUENCY_50HZ
  lcd_fix_string(T50HZ);	//" 50Hz"
    2008:	8f e5       	ldi	r24, 0x5F	; 95
    200a:	91 e0       	ldi	r25, 0x01	; 1
    200c:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
  ADC_PORT = TXD_VAL;
    2010:	88 e0       	ldi	r24, 0x08	; 8
    2012:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	// Pin 1 to GND
    2014:	89 e0       	ldi	r24, 0x09	; 9
    2016:	87 b9       	out	0x07, r24	; 7
  R_DDR = (1<<(TP3*2)) | (1<<(TP2*2));
    2018:	84 e1       	ldi	r24, 0x14	; 20
    201a:	84 b9       	out	0x04, r24	; 4
  for(ww=0;ww<30;ww++) {	// repeat the signal up to 30 times (1 minute)
    201c:	10 e0       	ldi	r17, 0x00	; 0
     for (ii=0;ii<100;ii++) {	// for 2 s generate 50 Hz
         R_PORT = (1<<(TP2*2));	// Pin 2 over R_L to VCC, Pin 3 over R_L to GND
    201e:	b4 e0       	ldi	r27, 0x04	; 4
    2020:	fb 2e       	mov	r15, r27
         wait10ms();
         R_PORT = (1<<(TP3*2));	// Pin 3 over R_L to VCC, Pin 2 over R_L to GND
    2022:	00 e1       	ldi	r16, 0x10	; 16
  lcd_fix_string(T50HZ);	//" 50Hz"
  ADC_PORT = TXD_VAL;
  ADC_DDR = 1<<TP1 | TXD_MSK;	// Pin 1 to GND
  R_DDR = (1<<(TP3*2)) | (1<<(TP2*2));
  for(ww=0;ww<30;ww++) {	// repeat the signal up to 30 times (1 minute)
     for (ii=0;ii<100;ii++) {	// for 2 s generate 50 Hz
    2024:	10 92 30 01 	sts	0x0130, r1
    2028:	0c c0       	rjmp	.+24     	; 0x2042 <AutoCheck+0x810>
         R_PORT = (1<<(TP2*2));	// Pin 2 over R_L to VCC, Pin 3 over R_L to GND
    202a:	f5 b8       	out	0x05, r15	; 5
         wait10ms();
    202c:	0e 94 28 15 	call	0x2a50	; 0x2a50 <wait10ms>
         R_PORT = (1<<(TP3*2));	// Pin 3 over R_L to VCC, Pin 2 over R_L to GND
    2030:	05 b9       	out	0x05, r16	; 5
         wait10ms();
    2032:	0e 94 28 15 	call	0x2a50	; 0x2a50 <wait10ms>
         wdt_reset();
    2036:	a8 95       	wdr
  lcd_fix_string(T50HZ);	//" 50Hz"
  ADC_PORT = TXD_VAL;
  ADC_DDR = 1<<TP1 | TXD_MSK;	// Pin 1 to GND
  R_DDR = (1<<(TP3*2)) | (1<<(TP2*2));
  for(ww=0;ww<30;ww++) {	// repeat the signal up to 30 times (1 minute)
     for (ii=0;ii<100;ii++) {	// for 2 s generate 50 Hz
    2038:	80 91 30 01 	lds	r24, 0x0130
    203c:	8f 5f       	subi	r24, 0xFF	; 255
    203e:	80 93 30 01 	sts	0x0130, r24
    2042:	80 91 30 01 	lds	r24, 0x0130
    2046:	84 36       	cpi	r24, 0x64	; 100
    2048:	80 f3       	brcs	.-32     	; 0x202a <AutoCheck+0x7f8>
         wait10ms();
         R_PORT = (1<<(TP3*2));	// Pin 3 over R_L to VCC, Pin 2 over R_L to GND
         wait10ms();
         wdt_reset();
     }
     if (!(ON_PIN_REG & (1<<RST_PIN))) {
    204a:	4f 9b       	sbis	0x09, 7	; 9
    204c:	03 c0       	rjmp	.+6      	; 0x2054 <AutoCheck+0x822>
#ifdef FREQUENCY_50HZ
  lcd_fix_string(T50HZ);	//" 50Hz"
  ADC_PORT = TXD_VAL;
  ADC_DDR = 1<<TP1 | TXD_MSK;	// Pin 1 to GND
  R_DDR = (1<<(TP3*2)) | (1<<(TP2*2));
  for(ww=0;ww<30;ww++) {	// repeat the signal up to 30 times (1 minute)
    204e:	1f 5f       	subi	r17, 0xFF	; 255
    2050:	1e 31       	cpi	r17, 0x1E	; 30
    2052:	41 f7       	brne	.-48     	; 0x2024 <AutoCheck+0x7f2>
        // if key is pressed, don't repeat
        break;
     }
  }
#endif
 PartFound = PART_NONE;
    2054:	10 92 07 01 	sts	0x0107, r1
 wait1s();			//wait 1 seconds
    2058:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <wait1000ms>
 } 
    205c:	2e 96       	adiw	r28, 0x0e	; 14
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	f8 94       	cli
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	cd bf       	out	0x3d, r28	; 61
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	1f 91       	pop	r17
    206e:	0f 91       	pop	r16
    2070:	ff 90       	pop	r15
    2072:	ef 90       	pop	r14
    2074:	df 90       	pop	r13
    2076:	cf 90       	pop	r12
    2078:	bf 90       	pop	r11
    207a:	af 90       	pop	r10
    207c:	9f 90       	pop	r9
    207e:	8f 90       	pop	r8
    2080:	7f 90       	pop	r7
    2082:	6f 90       	pop	r6
    2084:	5f 90       	pop	r5
    2086:	4f 90       	pop	r4
    2088:	3f 90       	pop	r3
    208a:	2f 90       	pop	r2
    208c:	08 95       	ret

0000208e <main>:
//#define DebugOut 5		// if set, output of Transistor checks in row 2+3
//#define DebugOut 10		// if set, output of capacity measurements (ReadCapacity) in row 3+4 
#include "Transistortester.h"

//begin of transistortester program
int main(void) {
    208e:	0f 93       	push	r16
    2090:	1f 93       	push	r17
  //switch on
  ON_DDR = (1<<ON_PIN);
    2092:	80 e4       	ldi	r24, 0x40	; 64
    2094:	8a b9       	out	0x0a, r24	; 10
  ON_PORT = (1<<ON_PIN) | (1<<RST_PIN);	//power on and Pullup for the Reset-Pin
    2096:	80 ec       	ldi	r24, 0xC0	; 192
    2098:	8b b9       	out	0x0b, r24	; 11
  uint8_t tmp;
  //ADC-Init
  ADCSRA = (1<<ADEN) | AUTO_CLOCK_DIV;	//prescaler=8 or 64 (if 8Mhz clock)
    209a:	86 e8       	ldi	r24, 0x86	; 134
    209c:	80 93 7a 00 	sts	0x007A, r24
// #define WDRF_HOME MCU_STATUS_REG
 #define WDRF_HOME MCUCSR
#else
 #define WDRF_HOME MCUSR
#endif
  tmp = (WDRF_HOME & (1<<WDRF));	// save Watch Dog Flag
    20a0:	14 b7       	in	r17, 0x34	; 52
  WDRF_HOME &= ~(1<<WDRF);	 	//reset Watch Dog flag
    20a2:	84 b7       	in	r24, 0x34	; 52
    20a4:	87 7f       	andi	r24, 0xF7	; 247
    20a6:	84 bf       	out	0x34, r24	; 52
  wdt_disable();			// disable Watch Dog
    20a8:	88 e1       	ldi	r24, 0x18	; 24
    20aa:	0f b6       	in	r0, 0x3f	; 63
    20ac:	f8 94       	cli
    20ae:	80 93 60 00 	sts	0x0060, r24
    20b2:	10 92 60 00 	sts	0x0060, r1
    20b6:	0f be       	out	0x3f, r0	; 63
  lcd_init();				//initialize LCD
    20b8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_init>
	
//  ADC_PORT = TXD_VAL;
//  ADC_DDR = TXD_MSK;
  if(tmp) { 
    20bc:	13 ff       	sbrs	r17, 3
    20be:	0a c0       	rjmp	.+20     	; 0x20d4 <main+0x46>
     // check if  Watchdog-Event 
     // this happens, if the Watchdog is not reset for 2s
     // can happen, if any loop in the Program doen't finish.
     lcd_line1();
    20c0:	80 e8       	ldi	r24, 0x80	; 128
    20c2:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
     lcd_fix_string(TestTimedOut);	//Output Timeout
    20c6:	83 ed       	ldi	r24, 0xD3	; 211
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
     wait3s();				//wait for 3 s
    20ce:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <wait3s>
    20d2:	af c0       	rjmp	.+350    	; 0x2232 <main+0x1a4>
     ON_PORT = 0;			//shut off!
     return 0;
  }
  LCDLoadCustomChar(LCD_CHAR_DIODE1);	//Custom-Character Diode symbol
    20d4:	88 e4       	ldi	r24, 0x48	; 72
    20d6:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
  lcd_fix_customchar(DiodeIcon1);	//load Character  >|
    20da:	8b e7       	ldi	r24, 0x7B	; 123
    20dc:	91 e0       	ldi	r25, 0x01	; 1
    20de:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_DIODE2);	//Custom-Character 
    20e2:	80 e5       	ldi	r24, 0x50	; 80
    20e4:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
  lcd_fix_customchar(DiodeIcon2);	//load Character  |<
    20e8:	83 e8       	ldi	r24, 0x83	; 131
    20ea:	91 e0       	ldi	r25, 0x01	; 1
    20ec:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_fix_customchar>
#ifdef C_MESS
  LCDLoadCustomChar(LCD_CHAR_CAP);	//Custom-Character  Capacitor symbol
    20f0:	88 e5       	ldi	r24, 0x58	; 88
    20f2:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
  lcd_fix_customchar(CapIcon);		//load Character  ||
    20f6:	8b e8       	ldi	r24, 0x8B	; 139
    20f8:	91 e0       	ldi	r25, 0x01	; 1
    20fa:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_fix_customchar>
#endif
#ifdef R_MESS
  LCDLoadCustomChar(LCD_CHAR_RESIS1);	//Custom-Character Resistor symbol
    20fe:	80 e7       	ldi	r24, 0x70	; 112
    2100:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
  lcd_fix_customchar(ResIcon1);		//load Character  [
    2104:	83 e9       	ldi	r24, 0x93	; 147
    2106:	91 e0       	ldi	r25, 0x01	; 1
    2108:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS2);	//Custom-Character 
    210c:	88 e7       	ldi	r24, 0x78	; 120
    210e:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
  lcd_fix_customchar(ResIcon2);		//load Character  ]
    2112:	8b e9       	ldi	r24, 0x9B	; 155
    2114:	91 e0       	ldi	r25, 0x01	; 1
    2116:	0e 94 54 01 	call	0x2a8	; 0x2a8 <lcd_fix_customchar>
#endif
#ifdef PULLUP_DISABLE
 #ifdef __AVR_ATmega8__
  SFIOR = (1<<PUD);		// disable Pull-Up Resistors mega8
 #else
  MCUCR = (1<<PUD);		// disable Pull-Up Resistors mega168 family
    211a:	80 e1       	ldi	r24, 0x10	; 16
    211c:	85 bf       	out	0x35, r24	; 53
 #endif
#endif

#if POWER_OFF+0 > 1
  // tester display time selection
  display_time = OFF_WAIT_TIME;		// LONG_WAIT_TIME for single mode, else SHORT_WAIT_TIME
    211e:	88 eb       	ldi	r24, 0xB8	; 184
    2120:	9b e0       	ldi	r25, 0x0B	; 11
    2122:	90 93 03 01 	sts	0x0103, r25
    2126:	80 93 02 01 	sts	0x0102, r24
  if (!(ON_PIN_REG & (1<<RST_PIN))) {
    212a:	4f 99       	sbic	0x09, 7	; 9
    212c:	0a c0       	rjmp	.+20     	; 0x2142 <main+0xb4>
     // if power button is pressed ...
     wait300ms();			// wait to catch a long key press
    212e:	0e 94 20 15 	call	0x2a40	; 0x2a40 <wait300ms>
     if (!(ON_PIN_REG & (1<<RST_PIN))) {
    2132:	4f 99       	sbic	0x09, 7	; 9
    2134:	06 c0       	rjmp	.+12     	; 0x2142 <main+0xb4>
        // check if power button is still pressed
        display_time = LONG_WAIT_TIME;	// ... set long time display anyway
    2136:	80 e1       	ldi	r24, 0x10	; 16
    2138:	97 e2       	ldi	r25, 0x27	; 39
    213a:	90 93 03 01 	sts	0x0103, r25
    213e:	80 93 02 01 	sts	0x0102, r24
  }
#else
  #define display_time OFF_WAIT_TIME
#endif

  empty_count = 0;
    2142:	10 92 2f 01 	sts	0x012F, r1
  mess_count = 0;
    2146:	10 92 0a 01 	sts	0x010A, r1


//*****************************************************************
//Entry: if start key is pressed before shut down
start:
  PartFound = PART_NONE;
    214a:	10 92 07 01 	sts	0x0107, r1
  NumOfDiodes = 0;
    214e:	10 92 05 01 	sts	0x0105, r1
  PartReady = 0;
    2152:	10 92 04 01 	sts	0x0104, r1
  PartMode = 0;
    2156:	10 92 06 01 	sts	0x0106, r1
  lcd_clear();
    215a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_clear>
  ADC_DDR = TXD_MSK;		//activate Software-UART 
    215e:	88 e0       	ldi	r24, 0x08	; 8
    2160:	87 b9       	out	0x07, r24	; 7
#ifdef R_MESS
  ResistorsFound = 0;
    2162:	10 92 42 01 	sts	0x0142, r1
#endif
#ifdef C_MESS
  ca = 0;
    2166:	10 92 49 01 	sts	0x0149, r1
  cb = 0;
    216a:	10 92 08 01 	sts	0x0108, r1
#endif
#ifdef WITH_UART
  uart_newline();		// start of new measurement
    216e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <uart_newline>
#endif
  Config.RefFlag = 0;
    2172:	10 92 69 01 	sts	0x0169, r1
  Config.U_AVCC = U_VCC;	// set VCC Voltage
    2176:	84 e7       	ldi	r24, 0x74	; 116
    2178:	93 e1       	ldi	r25, 0x13	; 19
    217a:	90 93 6d 01 	sts	0x016D, r25
    217e:	80 93 6c 01 	sts	0x016C, r24
#ifdef WITH_AUTO_REF
  Config.Samples = 190;		// set number of ADC samples near to max
  (void) ReadADC(0x0e);		// read Reference-voltage 
  ref_mv = W20msReadADC(0x0e);	// read Reference-voltage
#else
  ref_mv = DEFAULT_BAND_GAP;	// set to default Reference Voltage
    2182:	8e e2       	ldi	r24, 0x2E	; 46
    2184:	94 e0       	ldi	r25, 0x04	; 4
    2186:	90 93 2d 01 	sts	0x012D, r25
    218a:	80 93 2c 01 	sts	0x012C, r24
#endif
  Config.U_Bandgap = ADC_internal_reference;	// set internal reference voltage for ADC
    218e:	8d ea       	ldi	r24, 0xAD	; 173
    2190:	91 e0       	ldi	r25, 0x01	; 1
    2192:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__eerd_byte_m168>
    2196:	99 27       	eor	r25, r25
    2198:	87 fd       	sbrc	r24, 7
    219a:	90 95       	com	r25
    219c:	82 5d       	subi	r24, 0xD2	; 210
    219e:	9b 4f       	sbci	r25, 0xFB	; 251
    21a0:	90 93 6b 01 	sts	0x016B, r25
    21a4:	80 93 6a 01 	sts	0x016A, r24
  Config.Samples = ANZ_MESS;	// set to configured number of ADC samples
    21a8:	89 e1       	ldi	r24, 0x19	; 25
    21aa:	80 93 68 01 	sts	0x0168, r24

#ifdef BAT_CHECK
  // Battery check is selected
  ReadADC(5);	//Dummy-Readout
    21ae:	85 e0       	ldi	r24, 0x05	; 5
    21b0:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <ReadADC>
  trans.uBE[0] = W5msReadADC(5); 	//with 5V reference
    21b4:	85 e0       	ldi	r24, 0x05	; 5
    21b6:	0e 94 44 15 	call	0x2a88	; 0x2a88 <W5msReadADC>
    21ba:	90 93 3c 01 	sts	0x013C, r25
    21be:	80 93 3b 01 	sts	0x013B, r24
  lcd_line1();	//1. row 
    21c2:	80 e8       	ldi	r24, 0x80	; 128
    21c4:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
  lcd_fix_string(Bat);		//output: "Bat. "
    21c8:	89 ee       	ldi	r24, 0xE9	; 233
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
 #ifdef BAT_OUT
  // display Battery voltage
  // The divisor to get the voltage in 0.01V units is ((10*33)/133) witch is about 2.4812
  // A good result can be get with multiply by 4 and divide by 10 (about 0.75%).
  cval = (trans.uBE[0]*4)/10+((BAT_OUT+5)/10); // usually output only 2 digits
    21d0:	80 91 3b 01 	lds	r24, 0x013B
    21d4:	90 91 3c 01 	lds	r25, 0x013C
    21d8:	88 0f       	add	r24, r24
    21da:	99 1f       	adc	r25, r25
    21dc:	88 0f       	add	r24, r24
    21de:	99 1f       	adc	r25, r25
    21e0:	6a e0       	ldi	r22, 0x0A	; 10
    21e2:	70 e0       	ldi	r23, 0x00	; 0
    21e4:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__udivmodhi4>
    21e8:	61 5f       	subi	r22, 0xF1	; 241
    21ea:	7f 4f       	sbci	r23, 0xFF	; 255
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	60 93 64 01 	sts	0x0164, r22
    21f4:	70 93 65 01 	sts	0x0165, r23
    21f8:	80 93 66 01 	sts	0x0166, r24
    21fc:	90 93 67 01 	sts	0x0167, r25
  DisplayValue(cval,-2,'V',2);		// Display 2 Digits of this 10mV units
    2200:	4e ef       	ldi	r20, 0xFE	; 254
    2202:	26 e5       	ldi	r18, 0x56	; 86
    2204:	02 e0       	ldi	r16, 0x02	; 2
    2206:	0e 94 1e 0b 	call	0x163c	; 0x163c <DisplayValue>
  lcd_space();
    220a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_space>
 #warning "Battery POOR level is set for 7805 regulator"
 #define WARN_LEVEL (((unsigned long)7300*(unsigned long)33)/133)
 #define POOR_LEVEL (((unsigned long)6300*(unsigned long)33)/133)
 #endif
  // check the battery voltage
  if (trans.uBE[0] <  WARN_LEVEL) {
    220e:	80 91 3b 01 	lds	r24, 0x013B
    2212:	90 91 3c 01 	lds	r25, 0x013C
    2216:	27 e0       	ldi	r18, 0x07	; 7
    2218:	8c 32       	cpi	r24, 0x2C	; 44
    221a:	92 07       	cpc	r25, r18
    221c:	98 f4       	brcc	.+38     	; 0x2244 <main+0x1b6>
     //Vcc < 7,3V; show Warning 
     if(trans.uBE[0] < POOR_LEVEL) {	
    221e:	26 e0       	ldi	r18, 0x06	; 6
    2220:	83 33       	cpi	r24, 0x33	; 51
    2222:	92 07       	cpc	r25, r18
    2224:	60 f4       	brcc	.+24     	; 0x223e <main+0x1b0>
        //Vcc <6,3V; no proper operation is possible
        lcd_fix_string(BatEmpty);	//Battery empty!
    2226:	8c e7       	ldi	r24, 0x7C	; 124
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
        wait2s();
    222e:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <wait2s>
        PORTD = 0;			//switch power off
    2232:	1b b8       	out	0x0b, r1	; 11
  }
#else
  goto start;	// POWER_OFF not selected, repeat measurement
#endif
  return 0;
}   // end main
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	1f 91       	pop	r17
    223a:	0f 91       	pop	r16
    223c:	08 95       	ret
        lcd_fix_string(BatEmpty);	//Battery empty!
        wait2s();
        PORTD = 0;			//switch power off
        return 0;
     }
     lcd_fix_string(BatWeak);		//Battery weak
    223e:	87 e7       	ldi	r24, 0x77	; 119
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	02 c0       	rjmp	.+4      	; 0x2248 <main+0x1ba>
  } else { // Battery-voltage OK
     lcd_fix_string(OK); 		// "OK"
    2244:	8f ee       	ldi	r24, 0xEF	; 239
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
  }
#else
  lcd_fix_string(VERSION);		// if no Battery check, Version .. in row 1
#endif
#ifdef WDT_enabled
  wdt_enable(WDTO_2S);		//Watchdog on
    224c:	2f e0       	ldi	r18, 0x0F	; 15
    224e:	88 e1       	ldi	r24, 0x18	; 24
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	a8 95       	wdr
    2258:	80 93 60 00 	sts	0x0060, r24
    225c:	0f be       	out	0x3f, r0	; 63
    225e:	20 93 60 00 	sts	0x0060, r18
#endif

//  wait1s();			// add mor time for reading batterie voltage
  // begin tests
#ifdef AUTO_RH
  RefVoltage();			//compute RHmultip = f(reference voltage)
    2262:	0e 94 c6 0a 	call	0x158c	; 0x158c <RefVoltage>
#endif

  lcd_line2();			//LCD position row2, column 1
    2266:	80 ec       	ldi	r24, 0xC0	; 192
    2268:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
  lcd_fix_string(TestRunning);		//String: testing...
    226c:	8c e6       	ldi	r24, 0x6C	; 108
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
  lcd_string(itoa((int)(trans.uBE[0] - 289), outval, 10));	//output temperature
  lcd_data(LCD_CHAR_DEGREE);
  lcd_data('C');
#endif
#ifndef DebugOut
  lcd_line2();			//LCD position row 2, column 1
    2274:	80 ec       	ldi	r24, 0xC0	; 192
    2276:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
#endif
#ifdef C_MESS
  #define AUSGABE_FUNKTION
  EntladePins();		// discharge all capacitors!
    227a:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <EntladePins>
  if(PartFound == PART_CELL) {
    227e:	80 91 07 01 	lds	r24, 0x0107
    2282:	88 30       	cpi	r24, 0x08	; 8
    2284:	39 f4       	brne	.+14     	; 0x2294 <main+0x206>
    lcd_clear();
    2286:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_clear>
//    lcd_line1();
    lcd_fix_string(Cell_str);	// display "Cell!"
    228a:	8b e2       	ldi	r24, 0x2B	; 43
    228c:	91 e0       	ldi	r25, 0x01	; 1
    228e:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
    goto end2;
    2292:	78 c3       	rjmp	.+1776   	; 0x2984 <main+0x8f6>
  }
#endif

#ifdef CHECK_CALL
  AutoCheck();			//check, if selftest should be done
    2294:	0e 94 19 0c 	call	0x1832	; 0x1832 <AutoCheck>
#endif
     
  // check all 6 combinations for the 3 pins 
  CheckPins(TP1, TP2, TP3);
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	61 e0       	ldi	r22, 0x01	; 1
    229c:	42 e0       	ldi	r20, 0x02	; 2
    229e:	0e 94 8c 01 	call	0x318	; 0x318 <CheckPins>
  CheckPins(TP1, TP3, TP2);
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	62 e0       	ldi	r22, 0x02	; 2
    22a6:	41 e0       	ldi	r20, 0x01	; 1
    22a8:	0e 94 8c 01 	call	0x318	; 0x318 <CheckPins>
  CheckPins(TP2, TP1, TP3);
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	60 e0       	ldi	r22, 0x00	; 0
    22b0:	42 e0       	ldi	r20, 0x02	; 2
    22b2:	0e 94 8c 01 	call	0x318	; 0x318 <CheckPins>
  CheckPins(TP2, TP3, TP1);
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	62 e0       	ldi	r22, 0x02	; 2
    22ba:	40 e0       	ldi	r20, 0x00	; 0
    22bc:	0e 94 8c 01 	call	0x318	; 0x318 <CheckPins>
  CheckPins(TP3, TP2, TP1);
    22c0:	82 e0       	ldi	r24, 0x02	; 2
    22c2:	61 e0       	ldi	r22, 0x01	; 1
    22c4:	40 e0       	ldi	r20, 0x00	; 0
    22c6:	0e 94 8c 01 	call	0x318	; 0x318 <CheckPins>
  CheckPins(TP3, TP1, TP2);
    22ca:	82 e0       	ldi	r24, 0x02	; 2
    22cc:	60 e0       	ldi	r22, 0x00	; 0
    22ce:	41 e0       	ldi	r20, 0x01	; 1
    22d0:	0e 94 8c 01 	call	0x318	; 0x318 <CheckPins>
  
#ifdef C_MESS
  //separate check if is is a capacitor
  if(((PartFound == PART_NONE) || (PartFound == PART_RESISTOR) || (PartFound == PART_DIODE)) ) {
    22d4:	80 91 07 01 	lds	r24, 0x0107
    22d8:	88 23       	and	r24, r24
    22da:	21 f0       	breq	.+8      	; 0x22e4 <main+0x256>
    22dc:	86 30       	cpi	r24, 0x06	; 6
    22de:	11 f0       	breq	.+4      	; 0x22e4 <main+0x256>
    22e0:	81 30       	cpi	r24, 0x01	; 1
    22e2:	71 f4       	brne	.+28     	; 0x2300 <main+0x272>
     EntladePins();		// discharge capacities
    22e4:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <EntladePins>
     //measurement of capacities in all 3 combinations
     ReadCapacity(TP3, TP1);
    22e8:	82 e0       	ldi	r24, 0x02	; 2
    22ea:	60 e0       	ldi	r22, 0x00	; 0
    22ec:	0e 94 b9 08 	call	0x1172	; 0x1172 <ReadCapacity>
     ReadCapacity(TP3, TP2);
    22f0:	82 e0       	ldi	r24, 0x02	; 2
    22f2:	61 e0       	ldi	r22, 0x01	; 1
    22f4:	0e 94 b9 08 	call	0x1172	; 0x1172 <ReadCapacity>
     ReadCapacity(TP2, TP1);
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	60 e0       	ldi	r22, 0x00	; 0
    22fc:	0e 94 b9 08 	call	0x1172	; 0x1172 <ReadCapacity>
  }
#endif
  //All checks are done, output result to display
  lcd_clear();
    2300:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_clear>
//  lcd_line1();
  if(PartFound == PART_DIODE) {
    2304:	80 91 07 01 	lds	r24, 0x0107
    2308:	81 30       	cpi	r24, 0x01	; 1
    230a:	09 f0       	breq	.+2      	; 0x230e <main+0x280>
    230c:	00 c1       	rjmp	.+512    	; 0x250e <main+0x480>
     if(NumOfDiodes == 1) {		//single Diode
    230e:	90 91 05 01 	lds	r25, 0x0105
    2312:	91 30       	cpi	r25, 0x01	; 1
    2314:	51 f5       	brne	.+84     	; 0x236a <main+0x2dc>
        lcd_fix_string(Diode);		//"Diode: "
    2316:	81 e9       	ldi	r24, 0x91	; 145
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
        lcd_testpin(diodes[0].Anode);
    231e:	80 91 4c 01 	lds	r24, 0x014C
    2322:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_testpin>
        lcd_fix_string(AnKat);		//"->|-"
    2326:	81 e3       	ldi	r24, 0x31	; 49
    2328:	91 e0       	ldi	r25, 0x01	; 1
    232a:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
        lcd_testpin(diodes[0].Cathode);
    232e:	80 91 4d 01 	lds	r24, 0x014D
    2332:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_testpin>
        UfAusgabe(0x70);
    2336:	80 e7       	ldi	r24, 0x70	; 112
    2338:	0e 94 05 0c 	call	0x180a	; 0x180a <UfAusgabe>
#ifdef C_MESS
        lcd_fix_string(GateCap);		//"C="
    233c:	8c ef       	ldi	r24, 0xFC	; 252
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
        ReadCapacity(diodes[0].Cathode,diodes[0].Anode);	// Capacity opposite flow direction
    2344:	80 91 4d 01 	lds	r24, 0x014D
    2348:	60 91 4c 01 	lds	r22, 0x014C
    234c:	0e 94 b9 08 	call	0x1172	; 0x1172 <ReadCapacity>
        DisplayValue(cval,cpre,'F',3);
    2350:	60 91 64 01 	lds	r22, 0x0164
    2354:	70 91 65 01 	lds	r23, 0x0165
    2358:	80 91 66 01 	lds	r24, 0x0166
    235c:	90 91 67 01 	lds	r25, 0x0167
    2360:	40 91 32 01 	lds	r20, 0x0132
    2364:	26 e4       	ldi	r18, 0x46	; 70
    2366:	03 e0       	ldi	r16, 0x03	; 3
    2368:	d1 c2       	rjmp	.+1442   	; 0x290c <main+0x87e>
#endif
        goto end;
     } else if(NumOfDiodes == 2) { // double diode
    236a:	92 30       	cpi	r25, 0x02	; 2
    236c:	09 f0       	breq	.+2      	; 0x2370 <main+0x2e2>
    236e:	4c c0       	rjmp	.+152    	; 0x2408 <main+0x37a>
        lcd_data('2');
    2370:	82 e3       	ldi	r24, 0x32	; 50
    2372:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
        lcd_fix_string(Dioden);		//"diodes "
    2376:	89 e3       	ldi	r24, 0x39	; 57
    2378:	91 e0       	ldi	r25, 0x01	; 1
    237a:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
        if(diodes[0].Anode == diodes[1].Anode) { //Common Anode
    237e:	90 91 4c 01 	lds	r25, 0x014C
    2382:	20 91 50 01 	lds	r18, 0x0150
    2386:	92 17       	cp	r25, r18
    2388:	59 f4       	brne	.+22     	; 0x23a0 <main+0x312>
           lcd_testpin(diodes[0].Cathode);
    238a:	80 91 4d 01 	lds	r24, 0x014D
    238e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    2392:	85 e3       	ldi	r24, 0x35	; 53
    2394:	91 e0       	ldi	r25, 0x01	; 1
    2396:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    239a:	80 91 4c 01 	lds	r24, 0x014C
    239e:	2b c0       	rjmp	.+86     	; 0x23f6 <main+0x368>
           lcd_fix_string(AnKat);	//"->|-"
           lcd_testpin(diodes[1].Cathode);
           UfAusgabe(0x01);
           goto end;
        } else if(diodes[0].Cathode == diodes[1].Cathode) { //Common Cathode
    23a0:	30 91 4d 01 	lds	r19, 0x014D
    23a4:	80 91 51 01 	lds	r24, 0x0151
    23a8:	38 17       	cp	r19, r24
    23aa:	b9 f4       	brne	.+46     	; 0x23da <main+0x34c>
           lcd_testpin(diodes[0].Anode);
    23ac:	89 2f       	mov	r24, r25
    23ae:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    23b2:	81 e3       	ldi	r24, 0x31	; 49
    23b4:	91 e0       	ldi	r25, 0x01	; 1
    23b6:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
	   lcd_testpin(diodes[0].Cathode);
    23ba:	80 91 4d 01 	lds	r24, 0x014D
    23be:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    23c2:	85 e3       	ldi	r24, 0x35	; 53
    23c4:	91 e0       	ldi	r25, 0x01	; 1
    23c6:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
           lcd_testpin(diodes[1].Anode);
    23ca:	80 91 50 01 	lds	r24, 0x0150
    23ce:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_testpin>
           UfAusgabe(0x01);
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	0e 94 05 0c 	call	0x180a	; 0x180a <UfAusgabe>
           goto end;
    23d8:	ce c2       	rjmp	.+1436   	; 0x2976 <main+0x8e8>
          }
        else if ((diodes[0].Cathode == diodes[1].Anode) && (diodes[1].Cathode == diodes[0].Anode)) {
    23da:	32 17       	cp	r19, r18
    23dc:	09 f0       	breq	.+2      	; 0x23e0 <main+0x352>
    23de:	99 c2       	rjmp	.+1330   	; 0x2912 <main+0x884>
    23e0:	89 17       	cp	r24, r25
    23e2:	09 f0       	breq	.+2      	; 0x23e6 <main+0x358>
    23e4:	96 c2       	rjmp	.+1324   	; 0x2912 <main+0x884>
           //Antiparallel
           lcd_testpin(diodes[0].Anode);
    23e6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    23ea:	81 e3       	ldi	r24, 0x31	; 49
    23ec:	91 e0       	ldi	r25, 0x01	; 1
    23ee:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
           lcd_testpin(diodes[0].Cathode);
    23f2:	80 91 4d 01 	lds	r24, 0x014D
    23f6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    23fa:	81 e3       	ldi	r24, 0x31	; 49
    23fc:	91 e0       	ldi	r25, 0x01	; 1
    23fe:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
           lcd_testpin(diodes[1].Cathode);
    2402:	80 91 51 01 	lds	r24, 0x0151
    2406:	e3 cf       	rjmp	.-58     	; 0x23ce <main+0x340>
           UfAusgabe(0x01);
           goto end;
        }
     } else if(NumOfDiodes == 3) {
    2408:	93 30       	cpi	r25, 0x03	; 3
    240a:	09 f0       	breq	.+2      	; 0x240e <main+0x380>
    240c:	82 c2       	rjmp	.+1284   	; 0x2912 <main+0x884>
        //Serial of 2 Diodes; was detected as 3 Diodes 
        trans.b = 3;
    240e:	90 93 3f 01 	sts	0x013F, r25
        trans.c = 3;
    2412:	90 93 40 01 	sts	0x0140, r25
        /* Check for any constallation of 2 serial diodes:
          Only once the pin No of anyone Cathode is identical of another anode.
          two diodes in series is additionally detected as third big diode.
        */
        if(diodes[0].Cathode == diodes[1].Anode)
    2416:	50 91 4d 01 	lds	r21, 0x014D
    241a:	90 91 50 01 	lds	r25, 0x0150
    241e:	59 17       	cp	r21, r25
    2420:	21 f4       	brne	.+8      	; 0x242a <main+0x39c>
          {
           trans.b = 0;
    2422:	10 92 3f 01 	sts	0x013F, r1
           trans.c = 1;
    2426:	80 93 40 01 	sts	0x0140, r24
          }
        if(diodes[0].Anode == diodes[1].Cathode)
    242a:	40 91 4c 01 	lds	r20, 0x014C
    242e:	30 91 51 01 	lds	r19, 0x0151
    2432:	43 17       	cp	r20, r19
    2434:	29 f4       	brne	.+10     	; 0x2440 <main+0x3b2>
          {
           trans.b = 1;
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	80 93 3f 01 	sts	0x013F, r24
           trans.c = 0;
    243c:	10 92 40 01 	sts	0x0140, r1
          }
        if(diodes[0].Cathode == diodes[2].Anode)
    2440:	20 91 54 01 	lds	r18, 0x0154
    2444:	52 17       	cp	r21, r18
    2446:	29 f4       	brne	.+10     	; 0x2452 <main+0x3c4>
          {
           trans.b = 0;
    2448:	10 92 3f 01 	sts	0x013F, r1
           trans.c = 2;
    244c:	82 e0       	ldi	r24, 0x02	; 2
    244e:	80 93 40 01 	sts	0x0140, r24
          }
        if(diodes[0].Anode == diodes[2].Cathode)
    2452:	80 91 55 01 	lds	r24, 0x0155
    2456:	48 17       	cp	r20, r24
    2458:	29 f4       	brne	.+10     	; 0x2464 <main+0x3d6>
          {
           trans.b = 2;
    245a:	42 e0       	ldi	r20, 0x02	; 2
    245c:	40 93 3f 01 	sts	0x013F, r20
           trans.c = 0;
    2460:	10 92 40 01 	sts	0x0140, r1
          }
        if(diodes[1].Cathode == diodes[2].Anode)
    2464:	32 17       	cp	r19, r18
    2466:	31 f4       	brne	.+12     	; 0x2474 <main+0x3e6>
          {
           trans.b = 1;
    2468:	21 e0       	ldi	r18, 0x01	; 1
    246a:	20 93 3f 01 	sts	0x013F, r18
           trans.c = 2;
    246e:	22 e0       	ldi	r18, 0x02	; 2
    2470:	20 93 40 01 	sts	0x0140, r18
          }
        if(diodes[1].Anode == diodes[2].Cathode)
    2474:	98 17       	cp	r25, r24
    2476:	31 f4       	brne	.+12     	; 0x2484 <main+0x3f6>
          {
           trans.b = 2;
    2478:	82 e0       	ldi	r24, 0x02	; 2
    247a:	80 93 3f 01 	sts	0x013F, r24
           trans.c = 1;
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	80 93 40 01 	sts	0x0140, r24
        lcd_testpin(diodes[2].Cathode);
        lcd_space();
        lcd_string(utoa(diodes[2].Voltage, outval, 10));
        lcd_line1();
#endif
        if((trans.b<3) && (trans.c<3)) {
    2484:	80 91 3f 01 	lds	r24, 0x013F
    2488:	83 30       	cpi	r24, 0x03	; 3
    248a:	08 f0       	brcs	.+2      	; 0x248e <main+0x400>
    248c:	42 c2       	rjmp	.+1156   	; 0x2912 <main+0x884>
    248e:	80 91 40 01 	lds	r24, 0x0140
    2492:	83 30       	cpi	r24, 0x03	; 3
    2494:	08 f0       	brcs	.+2      	; 0x2498 <main+0x40a>
    2496:	3d c2       	rjmp	.+1146   	; 0x2912 <main+0x884>
           lcd_data('3');
    2498:	83 e3       	ldi	r24, 0x33	; 51
    249a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
           lcd_fix_string(Dioden);	//"Diodes "
    249e:	89 e3       	ldi	r24, 0x39	; 57
    24a0:	91 e0       	ldi	r25, 0x01	; 1
    24a2:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Anode);
    24a6:	e0 91 3f 01 	lds	r30, 0x013F
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	ee 0f       	add	r30, r30
    24ae:	ff 1f       	adc	r31, r31
    24b0:	ee 0f       	add	r30, r30
    24b2:	ff 1f       	adc	r31, r31
    24b4:	e4 5b       	subi	r30, 0xB4	; 180
    24b6:	fe 4f       	sbci	r31, 0xFE	; 254
    24b8:	80 81       	ld	r24, Z
    24ba:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    24be:	81 e3       	ldi	r24, 0x31	; 49
    24c0:	91 e0       	ldi	r25, 0x01	; 1
    24c2:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Cathode);
    24c6:	e0 91 3f 01 	lds	r30, 0x013F
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	ee 0f       	add	r30, r30
    24ce:	ff 1f       	adc	r31, r31
    24d0:	ee 0f       	add	r30, r30
    24d2:	ff 1f       	adc	r31, r31
    24d4:	e4 5b       	subi	r30, 0xB4	; 180
    24d6:	fe 4f       	sbci	r31, 0xFE	; 254
    24d8:	81 81       	ldd	r24, Z+1	; 0x01
    24da:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    24de:	81 e3       	ldi	r24, 0x31	; 49
    24e0:	91 e0       	ldi	r25, 0x01	; 1
    24e2:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
           lcd_testpin(diodes[trans.c].Cathode);
    24e6:	e0 91 40 01 	lds	r30, 0x0140
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	ee 0f       	add	r30, r30
    24ee:	ff 1f       	adc	r31, r31
    24f0:	ee 0f       	add	r30, r30
    24f2:	ff 1f       	adc	r31, r31
    24f4:	e4 5b       	subi	r30, 0xB4	; 180
    24f6:	fe 4f       	sbci	r31, 0xFE	; 254
    24f8:	81 81       	ldd	r24, Z+1	; 0x01
    24fa:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_testpin>
           UfAusgabe( (trans.b<<4)|trans.c);
    24fe:	80 91 3f 01 	lds	r24, 0x013F
    2502:	82 95       	swap	r24
    2504:	80 7f       	andi	r24, 0xF0	; 240
    2506:	90 91 40 01 	lds	r25, 0x0140
    250a:	89 2b       	or	r24, r25
    250c:	63 cf       	rjmp	.-314    	; 0x23d4 <main+0x346>
           goto end;
        }
     }
     // end (PartFound == PART_DIODE)
  } else if (PartFound == PART_TRANSISTOR) {
    250e:	82 30       	cpi	r24, 0x02	; 2
    2510:	09 f0       	breq	.+2      	; 0x2514 <main+0x486>
    2512:	7f c0       	rjmp	.+254    	; 0x2612 <main+0x584>
    if(PartReady != 0) {
    2514:	80 91 04 01 	lds	r24, 0x0104
    2518:	88 23       	and	r24, r24
    251a:	71 f1       	breq	.+92     	; 0x2578 <main+0x4ea>
       if((trans.hfe[0]>trans.hfe[1])) {
    251c:	80 91 37 01 	lds	r24, 0x0137
    2520:	90 91 38 01 	lds	r25, 0x0138
    2524:	a0 91 39 01 	lds	r26, 0x0139
    2528:	b0 91 3a 01 	lds	r27, 0x013A
    252c:	20 91 33 01 	lds	r18, 0x0133
    2530:	30 91 34 01 	lds	r19, 0x0134
    2534:	40 91 35 01 	lds	r20, 0x0135
    2538:	50 91 36 01 	lds	r21, 0x0136
    253c:	82 17       	cp	r24, r18
    253e:	93 07       	cpc	r25, r19
    2540:	a4 07       	cpc	r26, r20
    2542:	b5 07       	cpc	r27, r21
    2544:	48 f4       	brcc	.+18     	; 0x2558 <main+0x4ca>
          //if the amplification factor was higher at first testr: swap C and E !
          tmp = trans.c;
    2546:	80 91 40 01 	lds	r24, 0x0140
          trans.c = trans.e;
    254a:	90 91 41 01 	lds	r25, 0x0141
    254e:	90 93 40 01 	sts	0x0140, r25
          trans.e = tmp;
    2552:	80 93 41 01 	sts	0x0141, r24
    2556:	10 c0       	rjmp	.+32     	; 0x2578 <main+0x4ea>
       } else {
          trans.hfe[0] = trans.hfe[1];
    2558:	80 93 33 01 	sts	0x0133, r24
    255c:	90 93 34 01 	sts	0x0134, r25
    2560:	a0 93 35 01 	sts	0x0135, r26
    2564:	b0 93 36 01 	sts	0x0136, r27
          trans.uBE[0] = trans.uBE[1];
    2568:	80 91 3d 01 	lds	r24, 0x013D
    256c:	90 91 3e 01 	lds	r25, 0x013E
    2570:	90 93 3c 01 	sts	0x013C, r25
    2574:	80 93 3b 01 	sts	0x013B, r24
       }
    }

    if(PartMode == PART_MODE_NPN) {
    2578:	80 91 06 01 	lds	r24, 0x0106
    257c:	81 30       	cpi	r24, 0x01	; 1
    257e:	19 f4       	brne	.+6      	; 0x2586 <main+0x4f8>
       lcd_fix_string(NPN);		//"NPN "
    2580:	82 e0       	ldi	r24, 0x02	; 2
    2582:	91 e0       	ldi	r25, 0x01	; 1
    2584:	02 c0       	rjmp	.+4      	; 0x258a <main+0x4fc>
    } else {
       lcd_fix_string(PNP);		//"PNP "
    2586:	87 e0       	ldi	r24, 0x07	; 7
    2588:	91 e0       	ldi	r25, 0x01	; 1
    258a:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
    }
    if(NumOfDiodes > 2) {	//Transistor with protection diode
    258e:	80 91 05 01 	lds	r24, 0x0105
    2592:	83 30       	cpi	r24, 0x03	; 3
    2594:	58 f0       	brcs	.+22     	; 0x25ac <main+0x51e>
       if(PartMode == PART_MODE_NPN) {
    2596:	80 91 06 01 	lds	r24, 0x0106
    259a:	81 30       	cpi	r24, 0x01	; 1
    259c:	19 f4       	brne	.+6      	; 0x25a4 <main+0x516>
          lcd_fix_string(AnKat);	//"->|-"
    259e:	81 e3       	ldi	r24, 0x31	; 49
    25a0:	91 e0       	ldi	r25, 0x01	; 1
    25a2:	02 c0       	rjmp	.+4      	; 0x25a8 <main+0x51a>
       } else {
          lcd_fix_string(KatAn);	//"-|<-"
    25a4:	85 e3       	ldi	r24, 0x35	; 53
    25a6:	91 e0       	ldi	r25, 0x01	; 1
    25a8:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
       }
    }
    lcd_fix_string(ebcstr);		//" EBC="
    25ac:	8c e0       	ldi	r24, 0x0C	; 12
    25ae:	91 e0       	ldi	r25, 0x01	; 1
    25b0:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
    lcd_testpin(trans.e);
    25b4:	80 91 41 01 	lds	r24, 0x0141
    25b8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_testpin>
    lcd_testpin(trans.b);
    25bc:	80 91 3f 01 	lds	r24, 0x013F
    25c0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_testpin>
    lcd_testpin(trans.c);
    25c4:	80 91 40 01 	lds	r24, 0x0140
    25c8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_testpin>
    lcd_line2(); //2. row 
    25cc:	80 ec       	ldi	r24, 0xC0	; 192
    25ce:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
    lcd_fix_string(hfestr);		//"B="  (hFE)
    25d2:	8f ef       	ldi	r24, 0xFF	; 255
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
    DisplayValue(trans.hfe[0],0,0,3);
    25da:	60 91 33 01 	lds	r22, 0x0133
    25de:	70 91 34 01 	lds	r23, 0x0134
    25e2:	80 91 35 01 	lds	r24, 0x0135
    25e6:	90 91 36 01 	lds	r25, 0x0136
    25ea:	40 e0       	ldi	r20, 0x00	; 0
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	03 e0       	ldi	r16, 0x03	; 3
    25f0:	0e 94 1e 0b 	call	0x163c	; 0x163c <DisplayValue>
    lcd_space();
    25f4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_space>

    lcd_fix_string(Uf);		//"Uf="
    25f8:	88 e1       	ldi	r24, 0x18	; 24
    25fa:	91 e0       	ldi	r25, 0x01	; 1
    25fc:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
    DisplayValue(trans.uBE[0],-3,'V',3);
    2600:	60 91 3b 01 	lds	r22, 0x013B
    2604:	70 91 3c 01 	lds	r23, 0x013C
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	4d ef       	ldi	r20, 0xFD	; 253
    260e:	26 e5       	ldi	r18, 0x56	; 86
    2610:	7d c1       	rjmp	.+762    	; 0x290c <main+0x87e>
    goto end;
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    2612:	83 30       	cpi	r24, 0x03	; 3
    2614:	09 f0       	breq	.+2      	; 0x2618 <main+0x58a>
    2616:	82 c0       	rjmp	.+260    	; 0x271c <main+0x68e>
    if(PartMode&1) {
    2618:	80 91 06 01 	lds	r24, 0x0106
    261c:	80 ff       	sbrs	r24, 0
    261e:	02 c0       	rjmp	.+4      	; 0x2624 <main+0x596>
       //N-Kanal
       lcd_data('P');			//P-channel
    2620:	80 e5       	ldi	r24, 0x50	; 80
    2622:	01 c0       	rjmp	.+2      	; 0x2626 <main+0x598>
    } else {
       lcd_data('N');			//N-channel
    2624:	8e e4       	ldi	r24, 0x4E	; 78
    2626:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
    }
    lcd_data('-');
    262a:	8d e2       	ldi	r24, 0x2D	; 45
    262c:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>

    tmp = PartMode/2;
    2630:	80 91 06 01 	lds	r24, 0x0106
    2634:	86 95       	lsr	r24
    if (tmp == (PART_MODE_N_D_MOS/2)) {
    2636:	82 30       	cpi	r24, 0x02	; 2
    2638:	11 f4       	brne	.+4      	; 0x263e <main+0x5b0>
       lcd_data('D');			// N-D
    263a:	84 e4       	ldi	r24, 0x44	; 68
    263c:	03 c0       	rjmp	.+6      	; 0x2644 <main+0x5b6>
    }
    if (tmp == (PART_MODE_N_E_MOS/2)) {
    263e:	81 30       	cpi	r24, 0x01	; 1
    2640:	21 f4       	brne	.+8      	; 0x264a <main+0x5bc>
       lcd_data('E');			// N-E
    2642:	85 e4       	ldi	r24, 0x45	; 69
    2644:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
    2648:	05 c0       	rjmp	.+10     	; 0x2654 <main+0x5c6>
    }
    if (tmp == (PART_MODE_N_JFET/2)) {
    264a:	83 30       	cpi	r24, 0x03	; 3
    264c:	19 f4       	brne	.+6      	; 0x2654 <main+0x5c6>
       lcd_fix_string(jfet);		//"JFET"
    264e:	87 ef       	ldi	r24, 0xF7	; 247
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	02 c0       	rjmp	.+4      	; 0x2658 <main+0x5ca>
    } else {
       lcd_fix_string(mosfet);		//"-MOS "
    2654:	82 ef       	ldi	r24, 0xF2	; 242
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
    }
    lcd_fix_string(gds);		//"GDS="
    265c:	82 e1       	ldi	r24, 0x12	; 18
    265e:	91 e0       	ldi	r25, 0x01	; 1
    2660:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
    lcd_testpin(trans.b);
    2664:	80 91 3f 01 	lds	r24, 0x013F
    2668:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_testpin>
    lcd_testpin(trans.c);
    266c:	80 91 40 01 	lds	r24, 0x0140
    2670:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_testpin>
    lcd_testpin(trans.e);
    2674:	80 91 41 01 	lds	r24, 0x0141
    2678:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_testpin>
    if((NumOfDiodes > 0) && (PartMode < PART_MODE_N_D_MOS)) {
    267c:	80 91 05 01 	lds	r24, 0x0105
    2680:	88 23       	and	r24, r24
    2682:	59 f0       	breq	.+22     	; 0x269a <main+0x60c>
    2684:	80 91 06 01 	lds	r24, 0x0106
    2688:	84 30       	cpi	r24, 0x04	; 4
    268a:	38 f4       	brcc	.+14     	; 0x269a <main+0x60c>
       //MOSFET with protection diode; only with enhancement-FETs
       if (PartMode&1) {
    268c:	80 ff       	sbrs	r24, 0
    268e:	02 c0       	rjmp	.+4      	; 0x2694 <main+0x606>
          lcd_data(LCD_CHAR_DIODE1);	//show Diode symbol >|
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	01 c0       	rjmp	.+2      	; 0x2696 <main+0x608>
       } else {
          lcd_data(LCD_CHAR_DIODE2);	//show Diode symbol |<
    2694:	82 e0       	ldi	r24, 0x02	; 2
    2696:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       }
    }
    lcd_line2();			//2. Row
    269a:	80 ec       	ldi	r24, 0xC0	; 192
    269c:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
    if(PartMode < PART_MODE_N_D_MOS) {	//enhancement-MOSFET
    26a0:	80 91 06 01 	lds	r24, 0x0106
    26a4:	84 30       	cpi	r24, 0x04	; 4
    26a6:	d8 f4       	brcc	.+54     	; 0x26de <main+0x650>
 #ifdef C_MESS	//Gate capacity
       lcd_fix_string(GateCap);		//"C="
    26a8:	8c ef       	ldi	r24, 0xFC	; 252
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
       ReadCapacity(trans.b,trans.e);	//measure capacity
    26b0:	80 91 3f 01 	lds	r24, 0x013F
    26b4:	60 91 41 01 	lds	r22, 0x0141
    26b8:	0e 94 b9 08 	call	0x1172	; 0x1172 <ReadCapacity>
       DisplayValue(cval,cpre,'F',3);
    26bc:	60 91 64 01 	lds	r22, 0x0164
    26c0:	70 91 65 01 	lds	r23, 0x0165
    26c4:	80 91 66 01 	lds	r24, 0x0166
    26c8:	90 91 67 01 	lds	r25, 0x0167
    26cc:	40 91 32 01 	lds	r20, 0x0132
    26d0:	26 e4       	ldi	r18, 0x46	; 70
    26d2:	03 e0       	ldi	r16, 0x03	; 3
    26d4:	0e 94 1e 0b 	call	0x163c	; 0x163c <DisplayValue>
 #endif
       lcd_fix_string(vt);		// "Vt="
    26d8:	8c e1       	ldi	r24, 0x1C	; 28
    26da:	91 e0       	ldi	r25, 0x01	; 1
    26dc:	13 c0       	rjmp	.+38     	; 0x2704 <main+0x676>
    } else {
       lcd_data('I');
    26de:	89 e4       	ldi	r24, 0x49	; 73
    26e0:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       lcd_data('=');
    26e4:	8d e3       	ldi	r24, 0x3D	; 61
    26e6:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       DisplayValue(trans.uBE[1],-5,'A',2);
    26ea:	60 91 3d 01 	lds	r22, 0x013D
    26ee:	70 91 3e 01 	lds	r23, 0x013E
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	4b ef       	ldi	r20, 0xFB	; 251
    26f8:	21 e4       	ldi	r18, 0x41	; 65
    26fa:	02 e0       	ldi	r16, 0x02	; 2
    26fc:	0e 94 1e 0b 	call	0x163c	; 0x163c <DisplayValue>
       lcd_fix_string(Vgs_str);		// " Vgs="
    2700:	81 e2       	ldi	r24, 0x21	; 33
    2702:	91 e0       	ldi	r25, 0x01	; 1
    2704:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
    }
    //Gate-threshold voltage
    DisplayValue(gthvoltage,-3,'V',2);
    2708:	60 91 47 01 	lds	r22, 0x0147
    270c:	70 91 48 01 	lds	r23, 0x0148
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	4d ef       	ldi	r20, 0xFD	; 253
    2716:	26 e5       	ldi	r18, 0x56	; 86
    2718:	02 e0       	ldi	r16, 0x02	; 2
    271a:	f8 c0       	rjmp	.+496    	; 0x290c <main+0x87e>
    goto end;
    // end (PartFound == PART_FET)
  } else if (PartFound == PART_THYRISTOR) {
    271c:	85 30       	cpi	r24, 0x05	; 5
    271e:	19 f4       	brne	.+6      	; 0x2726 <main+0x698>
    lcd_fix_string(Thyristor);		//"Thyristor"
    2720:	84 ea       	ldi	r24, 0xA4	; 164
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	04 c0       	rjmp	.+8      	; 0x272e <main+0x6a0>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    2726:	84 30       	cpi	r24, 0x04	; 4
    2728:	c1 f4       	brne	.+48     	; 0x275a <main+0x6cc>
    lcd_fix_string(Triac);		//"Triac"
    272a:	8e e9       	ldi	r24, 0x9E	; 158
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
  mess_count = 0;
  goto end2;


gakAusgabe:
  lcd_line2(); //2. row 
    2732:	80 ec       	ldi	r24, 0xC0	; 192
    2734:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
  lcd_fix_string(GAK);		//"GAK="
    2738:	89 e9       	ldi	r24, 0x99	; 153
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
  lcd_testpin(trans.b);
    2740:	80 91 3f 01 	lds	r24, 0x013F
    2744:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_testpin>
  lcd_testpin(trans.c);
    2748:	80 91 40 01 	lds	r24, 0x0140
    274c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_testpin>
  lcd_testpin(trans.e);
    2750:	80 91 41 01 	lds	r24, 0x0141
    2754:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_testpin>
    2758:	0e c1       	rjmp	.+540    	; 0x2976 <main+0x8e8>
  } else if (PartFound == PART_TRIAC) {
    lcd_fix_string(Triac);		//"Triac"
    goto gakAusgabe;
  }
 #ifdef R_MESS	//resistor measurement is wanted
  else if(PartFound == PART_RESISTOR) {
    275a:	86 30       	cpi	r24, 0x06	; 6
    275c:	09 f0       	breq	.+2      	; 0x2760 <main+0x6d2>
    275e:	b9 c0       	rjmp	.+370    	; 0x28d2 <main+0x844>
    if (ResistorsFound == 1) { // single resistor
    2760:	60 91 42 01 	lds	r22, 0x0142
    2764:	61 30       	cpi	r22, 0x01	; 1
    2766:	69 f4       	brne	.+26     	; 0x2782 <main+0x6f4>
       lcd_testpin(resis[0].rb);  	//Pin-number 1
    2768:	80 91 1c 01 	lds	r24, 0x011C
    276c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_testpin>
       lcd_fix_string(Resistor_str);
    2770:	8e e3       	ldi	r24, 0x3E	; 62
    2772:	91 e0       	ldi	r25, 0x01	; 1
    2774:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
       lcd_testpin(resis[0].ra);		//Pin-number 2
    2778:	80 91 1b 01 	lds	r24, 0x011B
    277c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_testpin>
    2780:	7f c0       	rjmp	.+254    	; 0x2880 <main+0x7f2>
    } else { // R-Max suchen
       ii = 0;
    2782:	10 92 30 01 	sts	0x0130, r1
       if (resis[1].rx > resis[0].rx)
    2786:	20 91 1e 01 	lds	r18, 0x011E
    278a:	30 91 1f 01 	lds	r19, 0x011F
    278e:	40 91 20 01 	lds	r20, 0x0120
    2792:	50 91 21 01 	lds	r21, 0x0121
    2796:	80 91 17 01 	lds	r24, 0x0117
    279a:	90 91 18 01 	lds	r25, 0x0118
    279e:	a0 91 19 01 	lds	r26, 0x0119
    27a2:	b0 91 1a 01 	lds	r27, 0x011A
    27a6:	82 17       	cp	r24, r18
    27a8:	93 07       	cpc	r25, r19
    27aa:	a4 07       	cpc	r26, r20
    27ac:	b5 07       	cpc	r27, r21
    27ae:	18 f4       	brcc	.+6      	; 0x27b6 <main+0x728>
          ii = 1;
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	80 93 30 01 	sts	0x0130, r24
       if (ResistorsFound == 2) {
    27b6:	62 30       	cpi	r22, 0x02	; 2
    27b8:	19 f4       	brne	.+6      	; 0x27c0 <main+0x732>
          ii = 2;
    27ba:	60 93 30 01 	sts	0x0130, r22
    27be:	21 c0       	rjmp	.+66     	; 0x2802 <main+0x774>
       } else {
          if (resis[2].rx > resis[ii].rx) {
    27c0:	80 91 30 01 	lds	r24, 0x0130
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	fc 01       	movw	r30, r24
    27c8:	a3 e0       	ldi	r26, 0x03	; 3
    27ca:	ee 0f       	add	r30, r30
    27cc:	ff 1f       	adc	r31, r31
    27ce:	aa 95       	dec	r26
    27d0:	e1 f7       	brne	.-8      	; 0x27ca <main+0x73c>
    27d2:	e8 1b       	sub	r30, r24
    27d4:	f9 0b       	sbc	r31, r25
    27d6:	e9 5e       	subi	r30, 0xE9	; 233
    27d8:	fe 4f       	sbci	r31, 0xFE	; 254
    27da:	20 91 25 01 	lds	r18, 0x0125
    27de:	30 91 26 01 	lds	r19, 0x0126
    27e2:	40 91 27 01 	lds	r20, 0x0127
    27e6:	50 91 28 01 	lds	r21, 0x0128
    27ea:	80 81       	ld	r24, Z
    27ec:	91 81       	ldd	r25, Z+1	; 0x01
    27ee:	a2 81       	ldd	r26, Z+2	; 0x02
    27f0:	b3 81       	ldd	r27, Z+3	; 0x03
    27f2:	82 17       	cp	r24, r18
    27f4:	93 07       	cpc	r25, r19
    27f6:	a4 07       	cpc	r26, r20
    27f8:	b5 07       	cpc	r27, r21
    27fa:	18 f4       	brcc	.+6      	; 0x2802 <main+0x774>
             ii = 2;
    27fc:	82 e0       	ldi	r24, 0x02	; 2
    27fe:	80 93 30 01 	sts	0x0130, r24
          }
       }

       if (ii == 0) {
    2802:	80 91 30 01 	lds	r24, 0x0130
    2806:	88 23       	and	r24, r24
    2808:	89 f4       	brne	.+34     	; 0x282c <main+0x79e>
          lcd_data('1');
    280a:	81 e3       	ldi	r24, 0x31	; 49
    280c:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    2810:	8e e3       	ldi	r24, 0x3E	; 62
    2812:	91 e0       	ldi	r25, 0x01	; 1
    2814:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
          lcd_data('3');
    2818:	83 e3       	ldi	r24, 0x33	; 51
    281a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    281e:	8e e3       	ldi	r24, 0x3E	; 62
    2820:	91 e0       	ldi	r25, 0x01	; 1
    2822:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
          lcd_data('2');
    2826:	82 e3       	ldi	r24, 0x32	; 50
    2828:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       }
       if (ii == 1) {
    282c:	80 91 30 01 	lds	r24, 0x0130
    2830:	81 30       	cpi	r24, 0x01	; 1
    2832:	89 f4       	brne	.+34     	; 0x2856 <main+0x7c8>
          lcd_data('1');
    2834:	81 e3       	ldi	r24, 0x31	; 49
    2836:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    283a:	8e e3       	ldi	r24, 0x3E	; 62
    283c:	91 e0       	ldi	r25, 0x01	; 1
    283e:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
          lcd_data('2');
    2842:	82 e3       	ldi	r24, 0x32	; 50
    2844:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    2848:	8e e3       	ldi	r24, 0x3E	; 62
    284a:	91 e0       	ldi	r25, 0x01	; 1
    284c:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
          lcd_data('3');
    2850:	83 e3       	ldi	r24, 0x33	; 51
    2852:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       }
       if (ii == 2) {
    2856:	80 91 30 01 	lds	r24, 0x0130
    285a:	82 30       	cpi	r24, 0x02	; 2
    285c:	89 f4       	brne	.+34     	; 0x2880 <main+0x7f2>
          lcd_data('2');
    285e:	82 e3       	ldi	r24, 0x32	; 50
    2860:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    2864:	8e e3       	ldi	r24, 0x3E	; 62
    2866:	91 e0       	ldi	r25, 0x01	; 1
    2868:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
          lcd_data('1');
    286c:	81 e3       	ldi	r24, 0x31	; 49
    286e:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
          lcd_fix_string(Resistor_str);	// -[=]-
    2872:	8e e3       	ldi	r24, 0x3E	; 62
    2874:	91 e0       	ldi	r25, 0x01	; 1
    2876:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
          lcd_data('3');
    287a:	83 e3       	ldi	r24, 0x33	; 51
    287c:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       }
    }
    lcd_line2(); //2. row 
    2880:	80 ec       	ldi	r24, 0xC0	; 192
    2882:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
    if (ResistorsFound == 1) {
    2886:	80 91 42 01 	lds	r24, 0x0142
    288a:	81 30       	cpi	r24, 0x01	; 1
    288c:	11 f4       	brne	.+4      	; 0x2892 <main+0x804>
       RvalOut(0);
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	1d c0       	rjmp	.+58     	; 0x28cc <main+0x83e>
    } else {
       // output resistor values in right order
       if (ii == 0) {
    2892:	80 91 30 01 	lds	r24, 0x0130
    2896:	88 23       	and	r24, r24
    2898:	31 f4       	brne	.+12     	; 0x28a6 <main+0x818>
          RvalOut(1);
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <RvalOut>
          RvalOut(2);
    28a0:	82 e0       	ldi	r24, 0x02	; 2
    28a2:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <RvalOut>
       }
       if (ii == 1) {
    28a6:	80 91 30 01 	lds	r24, 0x0130
    28aa:	81 30       	cpi	r24, 0x01	; 1
    28ac:	31 f4       	brne	.+12     	; 0x28ba <main+0x82c>
          RvalOut(0);
    28ae:	80 e0       	ldi	r24, 0x00	; 0
    28b0:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <RvalOut>
          RvalOut(2);
    28b4:	82 e0       	ldi	r24, 0x02	; 2
    28b6:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <RvalOut>
       }
       if (ii == 2) {
    28ba:	80 91 30 01 	lds	r24, 0x0130
    28be:	82 30       	cpi	r24, 0x02	; 2
    28c0:	09 f0       	breq	.+2      	; 0x28c4 <main+0x836>
    28c2:	59 c0       	rjmp	.+178    	; 0x2976 <main+0x8e8>
          RvalOut(0);
    28c4:	80 e0       	ldi	r24, 0x00	; 0
    28c6:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <RvalOut>
          RvalOut(1);
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <RvalOut>
    28d0:	52 c0       	rjmp	.+164    	; 0x2976 <main+0x8e8>
  } // end (PartFound == PART_RESISTOR)
#endif

#ifdef C_MESS
//capacity measurement is wanted
  else if(PartFound == PART_CAPACITOR) {
    28d2:	87 30       	cpi	r24, 0x07	; 7
    28d4:	f1 f4       	brne	.+60     	; 0x2912 <main+0x884>
//     lcd_fix_string(Capacitor);
     lcd_testpin(ca);			//Pin number 1
    28d6:	80 91 49 01 	lds	r24, 0x0149
    28da:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_testpin>
     lcd_fix_string(CapZeich);		// capacitor sign
    28de:	87 e2       	ldi	r24, 0x27	; 39
    28e0:	91 e0       	ldi	r25, 0x01	; 1
    28e2:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
     lcd_testpin(cb);			//Pin number 2
    28e6:	80 91 08 01 	lds	r24, 0x0108
    28ea:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_testpin>
     lcd_line2(); 				//2. row 
    28ee:	80 ec       	ldi	r24, 0xC0	; 192
    28f0:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
     DisplayValue(cval,cpre,'F',4);
    28f4:	60 91 64 01 	lds	r22, 0x0164
    28f8:	70 91 65 01 	lds	r23, 0x0165
    28fc:	80 91 66 01 	lds	r24, 0x0166
    2900:	90 91 67 01 	lds	r25, 0x0167
    2904:	40 91 32 01 	lds	r20, 0x0132
    2908:	26 e4       	ldi	r18, 0x46	; 70
    290a:	04 e0       	ldi	r16, 0x04	; 4
    290c:	0e 94 1e 0b 	call	0x163c	; 0x163c <DisplayValue>
     goto end;
    2910:	32 c0       	rjmp	.+100    	; 0x2976 <main+0x8e8>
  }
#endif
  if(NumOfDiodes == 0) { //no diodes are found
    2912:	80 91 05 01 	lds	r24, 0x0105
    2916:	88 23       	and	r24, r24
    2918:	71 f4       	brne	.+28     	; 0x2936 <main+0x8a8>
     lcd_fix_string(TestFailed1); 	//"Kein,unbek. oder"
    291a:	87 eb       	ldi	r24, 0xB7	; 183
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
     lcd_line2(); //2. row 
    2922:	80 ec       	ldi	r24, 0xC0	; 192
    2924:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
     lcd_fix_string(TestFailed2); 	//"defektes "
    2928:	83 e8       	ldi	r24, 0x83	; 131
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
     lcd_fix_string(Bauteil);		//"Bauteil"
    2930:	8c e8       	ldi	r24, 0x8C	; 140
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	16 c0       	rjmp	.+44     	; 0x2962 <main+0x8d4>
  } else {
     lcd_fix_string(Bauteil);		//"Bauteil"
    2936:	8c e8       	ldi	r24, 0x8C	; 140
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
     lcd_fix_string(Unknown); 		//" unbek."
    293e:	8e ea       	ldi	r24, 0xAE	; 174
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
     lcd_line2(); //2. row 
    2946:	80 ec       	ldi	r24, 0xC0	; 192
    2948:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_command>
     lcd_fix_string(OrBroken); 		//"oder defekt "
    294c:	87 ec       	ldi	r24, 0xC7	; 199
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
     lcd_data(NumOfDiodes + '0');
    2954:	80 91 05 01 	lds	r24, 0x0105
    2958:	80 5d       	subi	r24, 0xD0	; 208
    295a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
     lcd_fix_string(AnKat);		//"->|-"
    295e:	81 e3       	ldi	r24, 0x31	; 49
    2960:	91 e0       	ldi	r25, 0x01	; 1
    2962:	0e 94 43 01 	call	0x286	; 0x286 <lcd_fix_string>
  }
  empty_count++;
    2966:	80 91 2f 01 	lds	r24, 0x012F
    296a:	8f 5f       	subi	r24, 0xFF	; 255
    296c:	80 93 2f 01 	sts	0x012F, r24
  mess_count = 0;
    2970:	10 92 0a 01 	sts	0x010A, r1
  goto end2;
    2974:	07 c0       	rjmp	.+14     	; 0x2984 <main+0x8f6>
  lcd_testpin(trans.b);
  lcd_testpin(trans.c);
  lcd_testpin(trans.e);
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 end:
  empty_count = 0;		// reset counter, if part is found
    2976:	10 92 2f 01 	sts	0x012F, r1
  mess_count++;			// count measurements
    297a:	80 91 0a 01 	lds	r24, 0x010A
    297e:	8f 5f       	subi	r24, 0xFF	; 255
    2980:	80 93 0a 01 	sts	0x010A, r24

 end2:
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
    2984:	4f 9b       	sbis	0x09, 7	; 9
    2986:	fe cf       	rjmp	.-4      	; 0x2984 <main+0x8f6>
  wait200ms();
    2988:	0e 94 21 15 	call	0x2a42	; 0x2a42 <wait200ms>
// wait 10 seconds or 3 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage++) {
    298c:	10 92 48 01 	sts	0x0148, r1
    2990:	10 92 47 01 	sts	0x0147, r1
    2994:	0e c0       	rjmp	.+28     	; 0x29b2 <main+0x924>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    2996:	4f 9b       	sbis	0x09, 7	; 9
    2998:	d8 cb       	rjmp	.-2128   	; 0x214a <main+0xbc>
        // If the key is pressed again... 
        // goto start of measurement 
        goto start;
     }
     wdt_reset();
    299a:	a8 95       	wdr
     wait1ms();
    299c:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <wait1ms>

 end2:
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
  wait200ms();
// wait 10 seconds or 3 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage++) {
    29a0:	80 91 47 01 	lds	r24, 0x0147
    29a4:	90 91 48 01 	lds	r25, 0x0148
    29a8:	01 96       	adiw	r24, 0x01	; 1
    29aa:	90 93 48 01 	sts	0x0148, r25
    29ae:	80 93 47 01 	sts	0x0147, r24
    29b2:	20 91 47 01 	lds	r18, 0x0147
    29b6:	30 91 48 01 	lds	r19, 0x0148
    29ba:	80 91 02 01 	lds	r24, 0x0102
    29be:	90 91 03 01 	lds	r25, 0x0103
    29c2:	28 17       	cp	r18, r24
    29c4:	39 07       	cpc	r19, r25
    29c6:	38 f3       	brcs	.-50     	; 0x2996 <main+0x908>
  #define POWER2_OFF 255
 #else
  #define POWER2_OFF POWER_OFF*2
 #endif
 #if POWER_OFF+0 > 1
  if ((empty_count < POWER_OFF) && (mess_count < POWER2_OFF)) {
    29c8:	80 91 2f 01 	lds	r24, 0x012F
    29cc:	85 30       	cpi	r24, 0x05	; 5
    29ce:	28 f4       	brcc	.+10     	; 0x29da <main+0x94c>
    29d0:	80 91 0a 01 	lds	r24, 0x010A
    29d4:	8a 30       	cpi	r24, 0x0A	; 10
    29d6:	08 f4       	brcc	.+2      	; 0x29da <main+0x94c>
    29d8:	b8 cb       	rjmp	.-2192   	; 0x214a <main+0xbc>
     goto start;			// repeat measurement POWER_OFF times
  }
 #endif
  // only one Measurement requested, shut off
  wdt_disable();			//Watchdog off
    29da:	88 e1       	ldi	r24, 0x18	; 24
    29dc:	0f b6       	in	r0, 0x3f	; 63
    29de:	f8 94       	cli
    29e0:	80 93 60 00 	sts	0x0060, r24
    29e4:	10 92 60 00 	sts	0x0060, r1
    29e8:	0f be       	out	0x3f, r0	; 63
  ON_PORT &= ~(1<<ON_PIN);		//switch off power
    29ea:	5e 98       	cbi	0x0b, 6	; 11
  //never ending loop 
  while(1) {
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    29ec:	4f 99       	sbic	0x09, 7	; 9
    29ee:	fe cf       	rjmp	.-4      	; 0x29ec <main+0x95e>
    29f0:	ac cb       	rjmp	.-2216   	; 0x214a <main+0xbc>

000029f2 <uart_putc>:
    29f2:	2f 93       	push	r18
    29f4:	5f b7       	in	r21, 0x3f	; 63
    29f6:	2f 93       	push	r18
    29f8:	2a e0       	ldi	r18, 0x0A	; 10
    29fa:	80 95       	com	r24
    29fc:	08 94       	sec

000029fe <putchar0>:
    29fe:	10 f4       	brcc	.+4      	; 0x2a04 <putchar1>
    2a00:	43 98       	cbi	0x08, 3	; 8
    2a02:	02 c0       	rjmp	.+4      	; 0x2a08 <putchar2>

00002a04 <putchar1>:
    2a04:	43 9a       	sbi	0x08, 3	; 8
	...

00002a08 <putchar2>:
    2a08:	08 d0       	rcall	.+16     	; 0x2a1a <UART_delay>
    2a0a:	07 d0       	rcall	.+14     	; 0x2a1a <UART_delay>
    2a0c:	86 95       	lsr	r24
    2a0e:	2a 95       	dec	r18
    2a10:	b1 f7       	brne	.-20     	; 0x29fe <putchar0>
    2a12:	2f 91       	pop	r18
    2a14:	5f bf       	out	0x3f, r21	; 63
    2a16:	2f 91       	pop	r18
    2a18:	08 95       	ret

00002a1a <UART_delay>:
    2a1a:	5f 93       	push	r21
    2a1c:	5f b7       	in	r21, 0x3f	; 63
    2a1e:	5f 93       	push	r21
    2a20:	00 00       	nop
    2a22:	5e e3       	ldi	r21, 0x3E	; 62

00002a24 <UART_delay1>:
    2a24:	5a 95       	dec	r21
    2a26:	f1 f7       	brne	.-4      	; 0x2a24 <UART_delay1>
    2a28:	00 00       	nop
    2a2a:	5f 91       	pop	r21
    2a2c:	5f bf       	out	0x3f, r21	; 63
    2a2e:	5f 91       	pop	r21
    2a30:	08 95       	ret

00002a32 <wait5s>:
    2a32:	03 d0       	rcall	.+6      	; 0x2a3a <wait1000ms>

00002a34 <wait4s>:
    2a34:	02 d0       	rcall	.+4      	; 0x2a3a <wait1000ms>

00002a36 <wait3s>:
    2a36:	01 d0       	rcall	.+2      	; 0x2a3a <wait1000ms>

00002a38 <wait2s>:
    2a38:	00 d0       	rcall	.+0      	; 0x2a3a <wait1000ms>

00002a3a <wait1000ms>:
    2a3a:	00 d0       	rcall	.+0      	; 0x2a3c <wait500ms>

00002a3c <wait500ms>:
    2a3c:	03 d0       	rcall	.+6      	; 0x2a44 <wait100ms>

00002a3e <wait400ms>:
    2a3e:	02 d0       	rcall	.+4      	; 0x2a44 <wait100ms>

00002a40 <wait300ms>:
    2a40:	01 d0       	rcall	.+2      	; 0x2a44 <wait100ms>

00002a42 <wait200ms>:
    2a42:	00 d0       	rcall	.+0      	; 0x2a44 <wait100ms>

00002a44 <wait100ms>:
    2a44:	a8 95       	wdr
    2a46:	00 d0       	rcall	.+0      	; 0x2a48 <wait50ms>

00002a48 <wait50ms>:
    2a48:	03 d0       	rcall	.+6      	; 0x2a50 <wait10ms>

00002a4a <wait40ms>:
    2a4a:	02 d0       	rcall	.+4      	; 0x2a50 <wait10ms>

00002a4c <wait30ms>:
    2a4c:	01 d0       	rcall	.+2      	; 0x2a50 <wait10ms>

00002a4e <wait20ms>:
    2a4e:	00 d0       	rcall	.+0      	; 0x2a50 <wait10ms>

00002a50 <wait10ms>:
    2a50:	00 d0       	rcall	.+0      	; 0x2a52 <wait5ms>

00002a52 <wait5ms>:
    2a52:	03 d0       	rcall	.+6      	; 0x2a5a <wait1ms>

00002a54 <wait4ms>:
    2a54:	02 d0       	rcall	.+4      	; 0x2a5a <wait1ms>

00002a56 <wait3ms>:
    2a56:	01 d0       	rcall	.+2      	; 0x2a5a <wait1ms>

00002a58 <wait2ms>:
    2a58:	00 d0       	rcall	.+0      	; 0x2a5a <wait1ms>

00002a5a <wait1ms>:
    2a5a:	00 d0       	rcall	.+0      	; 0x2a5c <wait500us>

00002a5c <wait500us>:
    2a5c:	03 d0       	rcall	.+6      	; 0x2a64 <wait100us>

00002a5e <wait400us>:
    2a5e:	02 d0       	rcall	.+4      	; 0x2a64 <wait100us>

00002a60 <wait300us>:
    2a60:	01 d0       	rcall	.+2      	; 0x2a64 <wait100us>

00002a62 <wait200us>:
    2a62:	00 d0       	rcall	.+0      	; 0x2a64 <wait100us>

00002a64 <wait100us>:
    2a64:	00 d0       	rcall	.+0      	; 0x2a66 <wait50us>

00002a66 <wait50us>:
    2a66:	03 d0       	rcall	.+6      	; 0x2a6e <wait10us>

00002a68 <wait40us>:
    2a68:	02 d0       	rcall	.+4      	; 0x2a6e <wait10us>

00002a6a <wait30us>:
    2a6a:	01 d0       	rcall	.+2      	; 0x2a6e <wait10us>

00002a6c <wait20us>:
    2a6c:	00 d0       	rcall	.+0      	; 0x2a6e <wait10us>

00002a6e <wait10us>:
    2a6e:	00 d0       	rcall	.+0      	; 0x2a70 <wait5us>

00002a70 <wait5us>:
    2a70:	03 d0       	rcall	.+6      	; 0x2a78 <wait1us>

00002a72 <wait4us>:
    2a72:	02 d0       	rcall	.+4      	; 0x2a78 <wait1us>

00002a74 <wait3us>:
    2a74:	01 d0       	rcall	.+2      	; 0x2a78 <wait1us>

00002a76 <wait2us>:
    2a76:	00 d0       	rcall	.+0      	; 0x2a78 <wait1us>

00002a78 <wait1us>:
    2a78:	00 00       	nop
    2a7a:	08 95       	ret

00002a7c <CombineBI2Long>:
    2a7c:	99 27       	eor	r25, r25

00002a7e <CombineII2Long>:
    2a7e:	08 95       	ret

00002a80 <W20msReadADC>:
    2a80:	0e 94 28 15 	call	0x2a50	; 0x2a50 <wait10ms>

00002a84 <W10msReadADC>:
    2a84:	0e 94 29 15 	call	0x2a52	; 0x2a52 <wait5ms>

00002a88 <W5msReadADC>:
    2a88:	0e 94 29 15 	call	0x2a52	; 0x2a52 <wait5ms>

00002a8c <ReadADC>:
    2a8c:	1f 93       	push	r17
    2a8e:	18 2f       	mov	r17, r24
    2a90:	10 64       	ori	r17, 0x40	; 64

00002a92 <get_sample>:
    2a92:	10 93 7c 00 	sts	0x007C, r17
    2a96:	e1 2f       	mov	r30, r17
    2a98:	e0 78       	andi	r30, 0x80	; 128
    2a9a:	80 91 69 01 	lds	r24, 0x0169
    2a9e:	e8 17       	cp	r30, r24
    2aa0:	69 f0       	breq	.+26     	; 0x2abc <r2aa2>
    2aa2:	0e 94 32 15 	call	0x2a64	; 0x2a64 <wait100us>
    2aa6:	80 91 7a 00 	lds	r24, 0x007A
    2aaa:	80 64       	ori	r24, 0x40	; 64
    2aac:	80 93 7a 00 	sts	0x007A, r24

00002ab0 <wadc1>:
    2ab0:	80 91 7a 00 	lds	r24, 0x007A
    2ab4:	86 fd       	sbrc	r24, 6
    2ab6:	fc cf       	rjmp	.-8      	; 0x2ab0 <wadc1>
    2ab8:	e0 93 69 01 	sts	0x0169, r30

00002abc <r2aa2>:
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	a9 01       	movw	r20, r18
    2ac2:	e0 e0       	ldi	r30, 0x00	; 0
    2ac4:	20 c0       	rjmp	.+64     	; 0x2b06 <r2ae8>

00002ac6 <Loop>:
    2ac6:	80 91 7a 00 	lds	r24, 0x007A
    2aca:	80 64       	ori	r24, 0x40	; 64
    2acc:	80 93 7a 00 	sts	0x007A, r24

00002ad0 <wadc2>:
    2ad0:	80 91 7a 00 	lds	r24, 0x007A
    2ad4:	86 fd       	sbrc	r24, 6
    2ad6:	fc cf       	rjmp	.-8      	; 0x2ad0 <wadc2>
    2ad8:	60 91 78 00 	lds	r22, 0x0078
    2adc:	70 91 79 00 	lds	r23, 0x0079
    2ae0:	26 0f       	add	r18, r22
    2ae2:	37 1f       	adc	r19, r23
    2ae4:	41 1d       	adc	r20, r1
    2ae6:	51 1d       	adc	r21, r1
    2ae8:	e4 30       	cpi	r30, 0x04	; 4
    2aea:	61 f4       	brne	.+24     	; 0x2b04 <r2ae6>
    2aec:	80 91 6b 01 	lds	r24, 0x016B
    2af0:	80 30       	cpi	r24, 0x00	; 0
    2af2:	41 f0       	breq	.+16     	; 0x2b04 <r2ae6>
    2af4:	84 e0       	ldi	r24, 0x04	; 4
    2af6:	20 30       	cpi	r18, 0x00	; 0
    2af8:	38 07       	cpc	r19, r24
    2afa:	20 f4       	brcc	.+8      	; 0x2b04 <r2ae6>
    2afc:	17 fd       	sbrc	r17, 7
    2afe:	02 c0       	rjmp	.+4      	; 0x2b04 <r2ae6>
    2b00:	10 68       	ori	r17, 0x80	; 128
    2b02:	c7 cf       	rjmp	.-114    	; 0x2a92 <get_sample>

00002b04 <r2ae6>:
    2b04:	ef 5f       	subi	r30, 0xFF	; 255

00002b06 <r2ae8>:
    2b06:	80 91 68 01 	lds	r24, 0x0168
    2b0a:	e8 17       	cp	r30, r24
    2b0c:	e0 f2       	brcs	.-72     	; 0x2ac6 <Loop>
    2b0e:	17 ff       	sbrs	r17, 7
    2b10:	05 c0       	rjmp	.+10     	; 0x2b1c <r2afe>
    2b12:	60 91 6a 01 	lds	r22, 0x016A
    2b16:	70 91 6b 01 	lds	r23, 0x016B
    2b1a:	04 c0       	rjmp	.+8      	; 0x2b24 <r2b02>

00002b1c <r2afe>:
    2b1c:	60 91 6c 01 	lds	r22, 0x016C
    2b20:	70 91 6d 01 	lds	r23, 0x016D

00002b24 <r2b02>:
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <__mulsi3>
    2b2c:	2f ef       	ldi	r18, 0xFF	; 255
    2b2e:	33 e0       	ldi	r19, 0x03	; 3
    2b30:	41 e0       	ldi	r20, 0x01	; 1
    2b32:	62 0f       	add	r22, r18
    2b34:	74 1f       	adc	r23, r20
    2b36:	81 1d       	adc	r24, r1
    2b38:	91 1d       	adc	r25, r1
    2b3a:	40 e0       	ldi	r20, 0x00	; 0
    2b3c:	50 e0       	ldi	r21, 0x00	; 0
    2b3e:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__udivmodsi4>
    2b42:	b9 01       	movw	r22, r18
    2b44:	ca 01       	movw	r24, r20
    2b46:	20 91 68 01 	lds	r18, 0x0168
    2b4a:	32 2f       	mov	r19, r18
    2b4c:	35 95       	asr	r19
    2b4e:	63 0f       	add	r22, r19
    2b50:	71 1d       	adc	r23, r1
    2b52:	81 1d       	adc	r24, r1
    2b54:	91 1d       	adc	r25, r1
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	40 e0       	ldi	r20, 0x00	; 0
    2b5a:	50 e0       	ldi	r21, 0x00	; 0
    2b5c:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__udivmodsi4>
    2b60:	c9 01       	movw	r24, r18
    2b62:	1f 91       	pop	r17
    2b64:	08 95       	ret

00002b66 <__mulsi3>:
    2b66:	62 9f       	mul	r22, r18
    2b68:	d0 01       	movw	r26, r0
    2b6a:	73 9f       	mul	r23, r19
    2b6c:	f0 01       	movw	r30, r0
    2b6e:	82 9f       	mul	r24, r18
    2b70:	e0 0d       	add	r30, r0
    2b72:	f1 1d       	adc	r31, r1
    2b74:	64 9f       	mul	r22, r20
    2b76:	e0 0d       	add	r30, r0
    2b78:	f1 1d       	adc	r31, r1
    2b7a:	92 9f       	mul	r25, r18
    2b7c:	f0 0d       	add	r31, r0
    2b7e:	83 9f       	mul	r24, r19
    2b80:	f0 0d       	add	r31, r0
    2b82:	74 9f       	mul	r23, r20
    2b84:	f0 0d       	add	r31, r0
    2b86:	65 9f       	mul	r22, r21
    2b88:	f0 0d       	add	r31, r0
    2b8a:	99 27       	eor	r25, r25
    2b8c:	72 9f       	mul	r23, r18
    2b8e:	b0 0d       	add	r27, r0
    2b90:	e1 1d       	adc	r30, r1
    2b92:	f9 1f       	adc	r31, r25
    2b94:	63 9f       	mul	r22, r19
    2b96:	b0 0d       	add	r27, r0
    2b98:	e1 1d       	adc	r30, r1
    2b9a:	f9 1f       	adc	r31, r25
    2b9c:	bd 01       	movw	r22, r26
    2b9e:	cf 01       	movw	r24, r30
    2ba0:	11 24       	eor	r1, r1
    2ba2:	08 95       	ret

00002ba4 <__udivmodqi4>:
    2ba4:	99 1b       	sub	r25, r25
    2ba6:	79 e0       	ldi	r23, 0x09	; 9
    2ba8:	04 c0       	rjmp	.+8      	; 0x2bb2 <__udivmodqi4_ep>

00002baa <__udivmodqi4_loop>:
    2baa:	99 1f       	adc	r25, r25
    2bac:	96 17       	cp	r25, r22
    2bae:	08 f0       	brcs	.+2      	; 0x2bb2 <__udivmodqi4_ep>
    2bb0:	96 1b       	sub	r25, r22

00002bb2 <__udivmodqi4_ep>:
    2bb2:	88 1f       	adc	r24, r24
    2bb4:	7a 95       	dec	r23
    2bb6:	c9 f7       	brne	.-14     	; 0x2baa <__udivmodqi4_loop>
    2bb8:	80 95       	com	r24
    2bba:	08 95       	ret

00002bbc <__udivmodhi4>:
    2bbc:	aa 1b       	sub	r26, r26
    2bbe:	bb 1b       	sub	r27, r27
    2bc0:	51 e1       	ldi	r21, 0x11	; 17
    2bc2:	07 c0       	rjmp	.+14     	; 0x2bd2 <__udivmodhi4_ep>

00002bc4 <__udivmodhi4_loop>:
    2bc4:	aa 1f       	adc	r26, r26
    2bc6:	bb 1f       	adc	r27, r27
    2bc8:	a6 17       	cp	r26, r22
    2bca:	b7 07       	cpc	r27, r23
    2bcc:	10 f0       	brcs	.+4      	; 0x2bd2 <__udivmodhi4_ep>
    2bce:	a6 1b       	sub	r26, r22
    2bd0:	b7 0b       	sbc	r27, r23

00002bd2 <__udivmodhi4_ep>:
    2bd2:	88 1f       	adc	r24, r24
    2bd4:	99 1f       	adc	r25, r25
    2bd6:	5a 95       	dec	r21
    2bd8:	a9 f7       	brne	.-22     	; 0x2bc4 <__udivmodhi4_loop>
    2bda:	80 95       	com	r24
    2bdc:	90 95       	com	r25
    2bde:	bc 01       	movw	r22, r24
    2be0:	cd 01       	movw	r24, r26
    2be2:	08 95       	ret

00002be4 <__udivmodsi4>:
    2be4:	a1 e2       	ldi	r26, 0x21	; 33
    2be6:	1a 2e       	mov	r1, r26
    2be8:	aa 1b       	sub	r26, r26
    2bea:	bb 1b       	sub	r27, r27
    2bec:	fd 01       	movw	r30, r26
    2bee:	0d c0       	rjmp	.+26     	; 0x2c0a <__udivmodsi4_ep>

00002bf0 <__udivmodsi4_loop>:
    2bf0:	aa 1f       	adc	r26, r26
    2bf2:	bb 1f       	adc	r27, r27
    2bf4:	ee 1f       	adc	r30, r30
    2bf6:	ff 1f       	adc	r31, r31
    2bf8:	a2 17       	cp	r26, r18
    2bfa:	b3 07       	cpc	r27, r19
    2bfc:	e4 07       	cpc	r30, r20
    2bfe:	f5 07       	cpc	r31, r21
    2c00:	20 f0       	brcs	.+8      	; 0x2c0a <__udivmodsi4_ep>
    2c02:	a2 1b       	sub	r26, r18
    2c04:	b3 0b       	sbc	r27, r19
    2c06:	e4 0b       	sbc	r30, r20
    2c08:	f5 0b       	sbc	r31, r21

00002c0a <__udivmodsi4_ep>:
    2c0a:	66 1f       	adc	r22, r22
    2c0c:	77 1f       	adc	r23, r23
    2c0e:	88 1f       	adc	r24, r24
    2c10:	99 1f       	adc	r25, r25
    2c12:	1a 94       	dec	r1
    2c14:	69 f7       	brne	.-38     	; 0x2bf0 <__udivmodsi4_loop>
    2c16:	60 95       	com	r22
    2c18:	70 95       	com	r23
    2c1a:	80 95       	com	r24
    2c1c:	90 95       	com	r25
    2c1e:	9b 01       	movw	r18, r22
    2c20:	ac 01       	movw	r20, r24
    2c22:	bd 01       	movw	r22, r26
    2c24:	cf 01       	movw	r24, r30
    2c26:	08 95       	ret

00002c28 <__divmodsi4>:
    2c28:	97 fb       	bst	r25, 7
    2c2a:	09 2e       	mov	r0, r25
    2c2c:	05 26       	eor	r0, r21
    2c2e:	0e d0       	rcall	.+28     	; 0x2c4c <__divmodsi4_neg1>
    2c30:	57 fd       	sbrc	r21, 7
    2c32:	04 d0       	rcall	.+8      	; 0x2c3c <__divmodsi4_neg2>
    2c34:	d7 df       	rcall	.-82     	; 0x2be4 <__udivmodsi4>
    2c36:	0a d0       	rcall	.+20     	; 0x2c4c <__divmodsi4_neg1>
    2c38:	00 1c       	adc	r0, r0
    2c3a:	38 f4       	brcc	.+14     	; 0x2c4a <__divmodsi4_exit>

00002c3c <__divmodsi4_neg2>:
    2c3c:	50 95       	com	r21
    2c3e:	40 95       	com	r20
    2c40:	30 95       	com	r19
    2c42:	21 95       	neg	r18
    2c44:	3f 4f       	sbci	r19, 0xFF	; 255
    2c46:	4f 4f       	sbci	r20, 0xFF	; 255
    2c48:	5f 4f       	sbci	r21, 0xFF	; 255

00002c4a <__divmodsi4_exit>:
    2c4a:	08 95       	ret

00002c4c <__divmodsi4_neg1>:
    2c4c:	f6 f7       	brtc	.-4      	; 0x2c4a <__divmodsi4_exit>
    2c4e:	90 95       	com	r25
    2c50:	80 95       	com	r24
    2c52:	70 95       	com	r23
    2c54:	61 95       	neg	r22
    2c56:	7f 4f       	sbci	r23, 0xFF	; 255
    2c58:	8f 4f       	sbci	r24, 0xFF	; 255
    2c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c5c:	08 95       	ret

00002c5e <itoa>:
    2c5e:	fb 01       	movw	r30, r22
    2c60:	9f 01       	movw	r18, r30
    2c62:	e8 94       	clt
    2c64:	42 30       	cpi	r20, 0x02	; 2
    2c66:	c4 f0       	brlt	.+48     	; 0x2c98 <itoa+0x3a>
    2c68:	45 32       	cpi	r20, 0x25	; 37
    2c6a:	b4 f4       	brge	.+44     	; 0x2c98 <itoa+0x3a>
    2c6c:	4a 30       	cpi	r20, 0x0A	; 10
    2c6e:	29 f4       	brne	.+10     	; 0x2c7a <itoa+0x1c>
    2c70:	97 fb       	bst	r25, 7
    2c72:	1e f4       	brtc	.+6      	; 0x2c7a <itoa+0x1c>
    2c74:	90 95       	com	r25
    2c76:	81 95       	neg	r24
    2c78:	9f 4f       	sbci	r25, 0xFF	; 255
    2c7a:	64 2f       	mov	r22, r20
    2c7c:	77 27       	eor	r23, r23
    2c7e:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__udivmodhi4>
    2c82:	80 5d       	subi	r24, 0xD0	; 208
    2c84:	8a 33       	cpi	r24, 0x3A	; 58
    2c86:	0c f0       	brlt	.+2      	; 0x2c8a <itoa+0x2c>
    2c88:	89 5d       	subi	r24, 0xD9	; 217
    2c8a:	81 93       	st	Z+, r24
    2c8c:	cb 01       	movw	r24, r22
    2c8e:	00 97       	sbiw	r24, 0x00	; 0
    2c90:	a1 f7       	brne	.-24     	; 0x2c7a <itoa+0x1c>
    2c92:	16 f4       	brtc	.+4      	; 0x2c98 <itoa+0x3a>
    2c94:	5d e2       	ldi	r21, 0x2D	; 45
    2c96:	51 93       	st	Z+, r21
    2c98:	10 82       	st	Z, r1
    2c9a:	c9 01       	movw	r24, r18
    2c9c:	0c 94 87 16 	jmp	0x2d0e	; 0x2d0e <strrev>

00002ca0 <utoa>:
    2ca0:	fb 01       	movw	r30, r22
    2ca2:	9f 01       	movw	r18, r30
    2ca4:	42 30       	cpi	r20, 0x02	; 2
    2ca6:	74 f0       	brlt	.+28     	; 0x2cc4 <utoa+0x24>
    2ca8:	45 32       	cpi	r20, 0x25	; 37
    2caa:	64 f4       	brge	.+24     	; 0x2cc4 <utoa+0x24>
    2cac:	64 2f       	mov	r22, r20
    2cae:	77 27       	eor	r23, r23
    2cb0:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <__udivmodhi4>
    2cb4:	80 5d       	subi	r24, 0xD0	; 208
    2cb6:	8a 33       	cpi	r24, 0x3A	; 58
    2cb8:	0c f0       	brlt	.+2      	; 0x2cbc <utoa+0x1c>
    2cba:	89 5d       	subi	r24, 0xD9	; 217
    2cbc:	81 93       	st	Z+, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	00 97       	sbiw	r24, 0x00	; 0
    2cc2:	a1 f7       	brne	.-24     	; 0x2cac <utoa+0xc>
    2cc4:	10 82       	st	Z, r1
    2cc6:	c9 01       	movw	r24, r18
    2cc8:	0c 94 87 16 	jmp	0x2d0e	; 0x2d0e <strrev>

00002ccc <__eerd_byte_m168>:
    2ccc:	f9 99       	sbic	0x1f, 1	; 31
    2cce:	fe cf       	rjmp	.-4      	; 0x2ccc <__eerd_byte_m168>
    2cd0:	92 bd       	out	0x22, r25	; 34
    2cd2:	81 bd       	out	0x21, r24	; 33
    2cd4:	f8 9a       	sbi	0x1f, 0	; 31
    2cd6:	99 27       	eor	r25, r25
    2cd8:	80 b5       	in	r24, 0x20	; 32
    2cda:	08 95       	ret

00002cdc <__eerd_word_m168>:
    2cdc:	a8 e1       	ldi	r26, 0x18	; 24
    2cde:	b0 e0       	ldi	r27, 0x00	; 0
    2ce0:	42 e0       	ldi	r20, 0x02	; 2
    2ce2:	50 e0       	ldi	r21, 0x00	; 0
    2ce4:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <__eerd_blraw_m168>

00002ce8 <__eewr_byte_m168>:
    2ce8:	26 2f       	mov	r18, r22

00002cea <__eewr_r18_m168>:
    2cea:	f9 99       	sbic	0x1f, 1	; 31
    2cec:	fe cf       	rjmp	.-4      	; 0x2cea <__eewr_r18_m168>
    2cee:	1f ba       	out	0x1f, r1	; 31
    2cf0:	92 bd       	out	0x22, r25	; 34
    2cf2:	81 bd       	out	0x21, r24	; 33
    2cf4:	20 bd       	out	0x20, r18	; 32
    2cf6:	0f b6       	in	r0, 0x3f	; 63
    2cf8:	f8 94       	cli
    2cfa:	fa 9a       	sbi	0x1f, 2	; 31
    2cfc:	f9 9a       	sbi	0x1f, 1	; 31
    2cfe:	0f be       	out	0x3f, r0	; 63
    2d00:	01 96       	adiw	r24, 0x01	; 1
    2d02:	08 95       	ret

00002d04 <__eewr_word_m168>:
    2d04:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <__eewr_byte_m168>
    2d08:	27 2f       	mov	r18, r23
    2d0a:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <__eewr_r18_m168>

00002d0e <strrev>:
    2d0e:	dc 01       	movw	r26, r24
    2d10:	fc 01       	movw	r30, r24
    2d12:	67 2f       	mov	r22, r23
    2d14:	71 91       	ld	r23, Z+
    2d16:	77 23       	and	r23, r23
    2d18:	e1 f7       	brne	.-8      	; 0x2d12 <strrev+0x4>
    2d1a:	32 97       	sbiw	r30, 0x02	; 2
    2d1c:	04 c0       	rjmp	.+8      	; 0x2d26 <strrev+0x18>
    2d1e:	7c 91       	ld	r23, X
    2d20:	6d 93       	st	X+, r22
    2d22:	70 83       	st	Z, r23
    2d24:	62 91       	ld	r22, -Z
    2d26:	ae 17       	cp	r26, r30
    2d28:	bf 07       	cpc	r27, r31
    2d2a:	c8 f3       	brcs	.-14     	; 0x2d1e <strrev+0x10>
    2d2c:	08 95       	ret

00002d2e <__eerd_block_m168>:
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22

00002d32 <__eerd_blraw_m168>:
    2d32:	fc 01       	movw	r30, r24
    2d34:	f9 99       	sbic	0x1f, 1	; 31
    2d36:	fe cf       	rjmp	.-4      	; 0x2d34 <__eerd_blraw_m168+0x2>
    2d38:	06 c0       	rjmp	.+12     	; 0x2d46 <__eerd_blraw_m168+0x14>
    2d3a:	f2 bd       	out	0x22, r31	; 34
    2d3c:	e1 bd       	out	0x21, r30	; 33
    2d3e:	f8 9a       	sbi	0x1f, 0	; 31
    2d40:	31 96       	adiw	r30, 0x01	; 1
    2d42:	00 b4       	in	r0, 0x20	; 32
    2d44:	0d 92       	st	X+, r0
    2d46:	41 50       	subi	r20, 0x01	; 1
    2d48:	50 40       	sbci	r21, 0x00	; 0
    2d4a:	b8 f7       	brcc	.-18     	; 0x2d3a <__eerd_blraw_m168+0x8>
    2d4c:	08 95       	ret

00002d4e <_exit>:
    2d4e:	f8 94       	cli

00002d50 <__stop_program>:
    2d50:	ff cf       	rjmp	.-2      	; 0x2d50 <__stop_program>
