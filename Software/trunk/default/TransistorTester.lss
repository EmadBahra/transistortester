
TransistorTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00003e24  00003ed8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003e24  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009a  00800102  00800102  00003eda  2**0
                  ALLOC
  3 .eeprom       000001a7  00810000  00810000  00003eda  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         00000dbc  00000000  00000000  00004084  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001d2  00000000  00000000  00004e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000000c0  00000000  00000000  00005012  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000075f  00000000  00000000  000050d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002df5  00000000  00000000  00005831  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000894  00000000  00000000  00008626  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003356  00000000  00000000  00008eba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000002d0  00000000  00000000  0000c210  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000009e1  00000000  00000000  0000c4e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001d4a  00000000  00000000  0000cec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 0000022b  00000000  00000000  0000ec0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 83 00 	jmp	0x106	; 0x106 <__ctors_end>
       4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
       8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
       c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      10:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      14:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      18:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      1c:	0c 94 ab 01 	jmp	0x356	; 0x356 <__vector_7>
      20:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      24:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      28:	0c 94 5b 17 	jmp	0x2eb6	; 0x2eb6 <__vector_10>
      2c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      30:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      34:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__vector_13>
      38:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      3c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      40:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      44:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      48:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      4c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      50:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      54:	0c 94 ac 01 	jmp	0x358	; 0x358 <__vector_21>
      58:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      5c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      60:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
      64:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>

00000068 <LogTab>:
      68:	00 00 14 00 29 00 3e 00 53 00 69 00 80 00 97 00     ....).>.S.i.....
      78:	ae 00 c6 00 df 00 f8 00 12 01 2d 01 49 01 65 01     ..........-.I.e.
      88:	82 01 a0 01 be 01 de 01 ff 01 21 02 44 02 68 02     ..........!.D.h.
      98:	8e 02 b5 02 de 02 09 03 35 03 64 03 94 03 c8 03     ........5.d.....
      a8:	fe 03 37 04 73 04 b4 04 f9 04 43 05 93 05 ea 05     ..7.s.....C.....
      b8:	49 06 b3 06 29 07 ae 07 48 08 ff 08 de 09           I...)...H.....

000000c6 <RHtab>:
      c6:	ba 03 87 03 58 03 2e 03 07 03 e4 02 c3 02 a4 02     ....X...........
      d6:	88 02                                               ..

000000d8 <VERSION_str>:
      d8:	56 65 72 73 69 6f 6e 20 31 2e 31 30 6b 00           Version 1.10k.

000000e6 <R0_str>:
      e6:	52 30 3d 00                                         R0=.

000000ea <MinCap_str>:
      ea:	20 3e 31 30 30 6e 46 00                              >100nF.

000000f2 <REF_C_str>:
      f2:	52 45 46 5f 43 3d 00                                REF_C=.

000000f9 <REF_R_str>:
      f9:	52 45 46 5f 52 3d 00                                REF_R=.

00000100 <PinRLtab>:
     100:	01 04 10                                            ...

00000103 <PinADCtab>:
     103:	01 02 04                                            ...

00000106 <__ctors_end>:
     106:	11 24       	eor	r1, r1
     108:	1f be       	out	0x3f, r1	; 63
     10a:	cf ef       	ldi	r28, 0xFF	; 255
     10c:	d4 e0       	ldi	r29, 0x04	; 4
     10e:	de bf       	out	0x3e, r29	; 62
     110:	cd bf       	out	0x3d, r28	; 61

00000112 <__do_copy_data>:
     112:	11 e0       	ldi	r17, 0x01	; 1
     114:	a0 e0       	ldi	r26, 0x00	; 0
     116:	b1 e0       	ldi	r27, 0x01	; 1
     118:	e4 e2       	ldi	r30, 0x24	; 36
     11a:	fe e3       	ldi	r31, 0x3E	; 62
     11c:	02 c0       	rjmp	.+4      	; 0x122 <__do_copy_data+0x10>
     11e:	05 90       	lpm	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	a2 30       	cpi	r26, 0x02	; 2
     124:	b1 07       	cpc	r27, r17
     126:	d9 f7       	brne	.-10     	; 0x11e <__do_copy_data+0xc>

00000128 <__do_clear_bss>:
     128:	11 e0       	ldi	r17, 0x01	; 1
     12a:	a2 e0       	ldi	r26, 0x02	; 2
     12c:	b1 e0       	ldi	r27, 0x01	; 1
     12e:	01 c0       	rjmp	.+2      	; 0x132 <.do_clear_bss_start>

00000130 <.do_clear_bss_loop>:
     130:	1d 92       	st	X+, r1

00000132 <.do_clear_bss_start>:
     132:	ac 39       	cpi	r26, 0x9C	; 156
     134:	b1 07       	cpc	r27, r17
     136:	e1 f7       	brne	.-8      	; 0x130 <.do_clear_bss_loop>
     138:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <main>
     13c:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <_exit>

00000140 <__bad_interrupt>:
     140:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000144 <lcd_data>:
void lcd_space(void) {
   lcd_data(' ');
}

// sends data byte to the LCD 
void lcd_data(unsigned char temp1) {
     144:	1f 93       	push	r17
     146:	18 2f       	mov	r17, r24
 lcd_write_data(temp1);		// set RS to 1
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	61 2f       	mov	r22, r17
     14c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
     150:	0e 94 c5 13 	call	0x278a	; 0x278a <wait50us>
#ifdef WITH_UART
 switch(temp1) {
     154:	18 30       	cpi	r17, 0x08	; 8
     156:	48 f4       	brcc	.+18     	; 0x16a <lcd_data+0x26>
     158:	16 30       	cpi	r17, 0x06	; 6
     15a:	c0 f4       	brcc	.+48     	; 0x18c <lcd_data+0x48>
     15c:	12 30       	cpi	r17, 0x02	; 2
     15e:	61 f0       	breq	.+24     	; 0x178 <lcd_data+0x34>
     160:	13 30       	cpi	r17, 0x03	; 3
     162:	79 f0       	breq	.+30     	; 0x182 <lcd_data+0x3e>
     164:	11 30       	cpi	r17, 0x01	; 1
     166:	f1 f4       	brne	.+60     	; 0x1a4 <lcd_data+0x60>
     168:	05 c0       	rjmp	.+10     	; 0x174 <lcd_data+0x30>
     16a:	14 3e       	cpi	r17, 0xE4	; 228
     16c:	89 f0       	breq	.+34     	; 0x190 <lcd_data+0x4c>
     16e:	14 3f       	cpi	r17, 0xF4	; 244
     170:	c9 f4       	brne	.+50     	; 0x1a4 <lcd_data+0x60>
     172:	10 c0       	rjmp	.+32     	; 0x194 <lcd_data+0x50>
    case LCD_CHAR_DIODE1:
    	uart_putc('>');
     174:	8e e3       	ldi	r24, 0x3E	; 62
     176:	06 c0       	rjmp	.+12     	; 0x184 <lcd_data+0x40>
    	uart_putc('|');
    	break;
    case LCD_CHAR_DIODE2:
    	uart_putc('|');
     178:	8c e7       	ldi	r24, 0x7C	; 124
     17a:	0e 94 96 13 	call	0x272c	; 0x272c <uart_putc>
    	uart_putc('<');
     17e:	8c e3       	ldi	r24, 0x3C	; 60
     180:	12 c0       	rjmp	.+36     	; 0x1a6 <lcd_data+0x62>
    	break;
    case LCD_CHAR_CAP:
    	uart_putc('|');
     182:	8c e7       	ldi	r24, 0x7C	; 124
     184:	0e 94 96 13 	call	0x272c	; 0x272c <uart_putc>
    	uart_putc('|');
     188:	8c e7       	ldi	r24, 0x7C	; 124
     18a:	0d c0       	rjmp	.+26     	; 0x1a6 <lcd_data+0x62>
    	break;
    case LCD_CHAR_RESIS1:
    case LCD_CHAR_RESIS2:
    	uart_putc('R');
     18c:	82 e5       	ldi	r24, 0x52	; 82
     18e:	0b c0       	rjmp	.+22     	; 0x1a6 <lcd_data+0x62>
//    case LCD_CHAR_DEGREE:	// degree sign
//    	uart_putc(0xf8);	// codepage 437 or 850 has degree
//    	break;
    case LCD_CHAR_U:		//µ
//    	uart_putc(0xe6);	// codepage 437 or 850 has my
    	uart_putc('u');		// better use the ASCII u
     190:	85 e7       	ldi	r24, 0x75	; 117
     192:	09 c0       	rjmp	.+18     	; 0x1a6 <lcd_data+0x62>
    	break;
    case LCD_CHAR_OMEGA:	//Omega
//	uart_putc(0xea);	// only codepage 437 has Omega
        uart_putc('O');
     194:	8f e4       	ldi	r24, 0x4F	; 79
     196:	0e 94 96 13 	call	0x272c	; 0x272c <uart_putc>
        uart_putc('h');
     19a:	88 e6       	ldi	r24, 0x68	; 104
     19c:	0e 94 96 13 	call	0x272c	; 0x272c <uart_putc>
        uart_putc('m');
     1a0:	8d e6       	ldi	r24, 0x6D	; 109
     1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <lcd_data+0x62>
    	break;
    default:
    	uart_putc(temp1);
     1a4:	81 2f       	mov	r24, r17
     1a6:	0e 94 96 13 	call	0x272c	; 0x272c <uart_putc>
 }
#endif
}
     1aa:	1f 91       	pop	r17
     1ac:	08 95       	ret

000001ae <lcd_space>:
   lcd_data(temp + '1');
}

// send space character to LCD
void lcd_space(void) {
   lcd_data(' ');
     1ae:	80 e2       	ldi	r24, 0x20	; 32
     1b0:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
}
     1b4:	08 95       	ret

000001b6 <lcd_testpin>:
 

// sends numeric character (Pin Number) to the LCD 
// from binary 0 we send ASCII 1 ....
void lcd_testpin(unsigned char temp) {
   lcd_data(temp + '1');
     1b6:	8f 5c       	subi	r24, 0xCF	; 207
     1b8:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
}
     1bc:	08 95       	ret

000001be <uart_newline>:
}


#ifdef WITH_UART
void uart_newline(void) {
   uart_putc('\r');
     1be:	8d e0       	ldi	r24, 0x0D	; 13
     1c0:	0e 94 96 13 	call	0x272c	; 0x272c <uart_putc>
   uart_putc('\n');
     1c4:	8a e0       	ldi	r24, 0x0A	; 10
     1c6:	0e 94 96 13 	call	0x272c	; 0x272c <uart_putc>
}
     1ca:	08 95       	ret

000001cc <lcd_command>:
#endif
}
 
// sends a command to the LCD
 
void lcd_command(unsigned char temp1) {
     1cc:	1f 93       	push	r17
     1ce:	18 2f       	mov	r17, r24
        lcd_write_cmd(temp1);		// set RS to 0
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	61 2f       	mov	r22, r17
     1d4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
     1d8:	0e 94 c5 13 	call	0x278a	; 0x278a <wait50us>
#ifdef WITH_UART
	if((temp1 == 0x80) || (temp1 == 0xC0)) {
     1dc:	10 38       	cpi	r17, 0x80	; 128
     1de:	11 f0       	breq	.+4      	; 0x1e4 <lcd_command+0x18>
     1e0:	10 3c       	cpi	r17, 0xC0	; 192
     1e2:	11 f4       	brne	.+4      	; 0x1e8 <lcd_command+0x1c>
		uart_newline();
     1e4:	0e 94 df 00 	call	0x1be	; 0x1be <uart_newline>
	}
#endif
}
     1e8:	1f 91       	pop	r17
     1ea:	08 95       	ret

000001ec <lcd_clear>:
}
 
// send the command to clear the display 
 
void lcd_clear(void) {
   lcd_command(CLEAR_DISPLAY);
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
   wait_about10ms();
     1f2:	82 e0       	ldi	r24, 0x02	; 2
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>
#ifdef WITH_UART
   uart_newline();
     1fa:	0e 94 df 00 	call	0x1be	; 0x1be <uart_newline>
#endif
   lcd_line1();			// set cursor to Line1 Column 1, (only for OLED-Display)
     1fe:	80 e8       	ldi	r24, 0x80	; 128
     200:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
}
     204:	08 95       	ret

00000206 <lcd_init>:
 
// Initialise: 
// Must be called first .
 
void lcd_init(void) {
   wait_about30ms();
     206:	86 e0       	ldi	r24, 0x06	; 6
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>
   // to initialise, send 3 times to be shure to be in 8 Bit mode
   lcd_write_init(1);
     20e:	80 e8       	ldi	r24, 0x80	; 128
     210:	60 e3       	ldi	r22, 0x30	; 48
     212:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait_about5ms();
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>
   
   lcd_write_init(1);
     21e:	80 e8       	ldi	r24, 0x80	; 128
     220:	60 e3       	ldi	r22, 0x30	; 48
     222:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait1ms();
     226:	0e 94 bf 13 	call	0x277e	; 0x277e <wait1ms>

   lcd_write_init(1);
     22a:	80 e8       	ldi	r24, 0x80	; 128
     22c:	60 e3       	ldi	r22, 0x30	; 48
     22e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait1ms();
     232:	0e 94 bf 13 	call	0x277e	; 0x277e <wait1ms>

   lcd_write_init(0);		// switch to 4 Bit mode
     236:	80 e8       	ldi	r24, 0x80	; 128
     238:	60 e2       	ldi	r22, 0x20	; 32
     23a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_lcd_hw_write>
   wait_about10ms();
     23e:	82 e0       	ldi	r24, 0x02	; 2
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>
   lcd_command(CMD1_SetBias | 0x0c);		// 1/4 bias     (5V)
   lcd_command(CMD1_PowerControl | 0x02);	// booster off / set contrast C5:C4 = 2
   lcd_command(CMD1_FollowerControl | 0x09);	// Follower on / Rab2:0 = 1
   lcd_command(CMD1_SetContrast | 0x04);	// set contrast C3:0 = 4
#endif
   lcd_command(CMD_SetIFOptions | 0x08);	// 4Bit / 2 rows / 5x7
     246:	88 e2       	ldi	r24, 0x28	; 40
     248:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>

   lcd_command(CMD_SetDisplayAndCursor | 0x04); // Display on / Cursor off / no Blinking
     24c:	8c e0       	ldi	r24, 0x0C	; 12
     24e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>

   lcd_command(CMD_SetEntryMode | 0x02);	// increment / no Scroll    
     252:	86 e0       	ldi	r24, 0x06	; 6
     254:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
   lcd_clear();
     258:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
}
     25c:	08 95       	ret

0000025e <lcd_string>:
#endif
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
     25e:	ef 92       	push	r14
     260:	ff 92       	push	r15
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	e8 2e       	mov	r14, r24
     268:	e7 01       	movw	r28, r14
     26a:	7e 01       	movw	r14, r28
     26c:	f9 2e       	mov	r15, r25
     26e:	e7 01       	movw	r28, r14
    while(*data) {
     270:	02 c0       	rjmp	.+4      	; 0x276 <lcd_string+0x18>
        lcd_data(*data);
     272:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
    while(*data) {
     276:	89 91       	ld	r24, Y+
     278:	88 23       	and	r24, r24
     27a:	d9 f7       	brne	.-10     	; 0x272 <lcd_string+0x14>
        lcd_data(*data);
        data++;
    }
}
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	ff 90       	pop	r15
     282:	ef 90       	pop	r14
     284:	08 95       	ret

00000286 <lcd_pgm_string>:

#ifdef use_lcd_pgm
//Load string from PGM  and send to LCD 
void lcd_pgm_string(const unsigned char *data) {
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = pgm_read_byte(data);
     28c:	fe 01       	movw	r30, r28
     28e:	84 91       	lpm	r24, Z+
      if((cc==0) || (cc==128)) {
     290:	88 23       	and	r24, r24
     292:	31 f0       	breq	.+12     	; 0x2a0 <lcd_pgm_string+0x1a>
     294:	80 38       	cpi	r24, 0x80	; 128
     296:	21 f0       	breq	.+8      	; 0x2a0 <lcd_pgm_string+0x1a>
         return;
      }
      lcd_data(cc);
     298:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
      data++;
     29c:	21 96       	adiw	r28, 0x01	; 1
   }
     29e:	f6 cf       	rjmp	.-20     	; 0x28c <lcd_pgm_string+0x6>
}
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <lcd_fix_string>:
#endif

//Load string from PGM or EEprom and send to LCD 
void lcd_fix_string(const unsigned char *data) {
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = MEM_read_byte(data);
     2ac:	ce 01       	movw	r24, r28
     2ae:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__eerd_byte_m168>
      if((cc==0) || (cc==128)) {
     2b2:	88 23       	and	r24, r24
     2b4:	31 f0       	breq	.+12     	; 0x2c2 <lcd_fix_string+0x1c>
     2b6:	80 38       	cpi	r24, 0x80	; 128
     2b8:	21 f0       	breq	.+8      	; 0x2c2 <lcd_fix_string+0x1c>
         return;
      }
      lcd_data(cc);
     2ba:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
      data++;
     2be:	21 96       	adiw	r28, 0x01	; 1
   }
     2c0:	f5 cf       	rjmp	.-22     	; 0x2ac <lcd_fix_string+0x6>
}
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	08 95       	ret

000002c8 <lcd_fix_customchar>:

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	8c 01       	movw	r16, r24
     2d2:	c0 e0       	ldi	r28, 0x00	; 0
     2d4:	d0 e0       	ldi	r29, 0x00	; 0
    for(uint8_t i=0;i<8;i++) {
        lcd_data(MEM_read_byte(chardata));
     2d6:	c8 01       	movw	r24, r16
     2d8:	8c 0f       	add	r24, r28
     2da:	9d 1f       	adc	r25, r29
     2dc:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__eerd_byte_m168>
     2e0:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
     2e4:	21 96       	adiw	r28, 0x01	; 1
   }
}

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
    for(uint8_t i=0;i<8;i++) {
     2e6:	c8 30       	cpi	r28, 0x08	; 8
     2e8:	d1 05       	cpc	r29, r1
     2ea:	a9 f7       	brne	.-22     	; 0x2d6 <lcd_fix_customchar+0xe>
        lcd_data(MEM_read_byte(chardata));
        chardata++;
    }
}
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	0f 91       	pop	r16
     2f4:	08 95       	ret

000002f6 <_lcd_hw_write>:
     2f6:	80 fd       	sbrc	r24, 0
     2f8:	5c 9a       	sbi	0x0b, 4	; 11
     2fa:	80 ff       	sbrs	r24, 0
     2fc:	5c 98       	cbi	0x0b, 4	; 11
     2fe:	54 9a       	sbi	0x0a, 4	; 10
     300:	00 00       	nop
     302:	5d 9a       	sbi	0x0b, 5	; 11
     304:	55 9a       	sbi	0x0a, 5	; 10
     306:	58 98       	cbi	0x0b, 0	; 11
     308:	59 98       	cbi	0x0b, 1	; 11
     30a:	5a 98       	cbi	0x0b, 2	; 11
     30c:	5b 98       	cbi	0x0b, 3	; 11
     30e:	64 fd       	sbrc	r22, 4
     310:	58 9a       	sbi	0x0b, 0	; 11
     312:	50 9a       	sbi	0x0a, 0	; 10
     314:	65 fd       	sbrc	r22, 5
     316:	59 9a       	sbi	0x0b, 1	; 11
     318:	51 9a       	sbi	0x0a, 1	; 10
     31a:	66 fd       	sbrc	r22, 6
     31c:	5a 9a       	sbi	0x0b, 2	; 11
     31e:	52 9a       	sbi	0x0a, 2	; 10
     320:	67 fd       	sbrc	r22, 7
     322:	5b 9a       	sbi	0x0b, 3	; 11
     324:	53 9a       	sbi	0x0a, 3	; 10
     326:	00 00       	nop
     328:	5d 98       	cbi	0x0b, 5	; 11
     32a:	0e 94 ce 13 	call	0x279c	; 0x279c <wait1us>
     32e:	87 fd       	sbrc	r24, 7
     330:	11 c0       	rjmp	.+34     	; 0x354 <_lcd_hw_write_exit>
     332:	5d 9a       	sbi	0x0b, 5	; 11
     334:	58 98       	cbi	0x0b, 0	; 11
     336:	59 98       	cbi	0x0b, 1	; 11
     338:	5a 98       	cbi	0x0b, 2	; 11
     33a:	5b 98       	cbi	0x0b, 3	; 11
     33c:	60 fd       	sbrc	r22, 0
     33e:	58 9a       	sbi	0x0b, 0	; 11
     340:	61 fd       	sbrc	r22, 1
     342:	59 9a       	sbi	0x0b, 1	; 11
     344:	62 fd       	sbrc	r22, 2
     346:	5a 9a       	sbi	0x0b, 2	; 11
     348:	63 fd       	sbrc	r22, 3
     34a:	5b 9a       	sbi	0x0b, 3	; 11
     34c:	00 00       	nop
     34e:	5d 98       	cbi	0x0b, 5	; 11
     350:	0e 94 ce 13 	call	0x279c	; 0x279c <wait1us>

00000354 <_lcd_hw_write_exit>:
     354:	08 95       	ret

00000356 <__vector_7>:
#define MAIN_C
#include "Transistortester.h"

#ifndef INHIBIT_SLEEP_MODE
  // prepare sleep mode
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
     356:	18 95       	reti

00000358 <__vector_21>:
  EMPTY_INTERRUPT(ADC_vect);
     358:	18 95       	reti

0000035a <EntladePins>:
   R_DDR &= ~PinToCharge;	// switch back to input
   R_PORT &= ~PinToCharge;	// no Pull up
}

// first discharge any charge of capacitors
void EntladePins() {
     35a:	af 92       	push	r10
     35c:	bf 92       	push	r11
     35e:	cf 92       	push	r12
     360:	df 92       	push	r13
     362:	ef 92       	push	r14
     364:	ff 92       	push	r15
     366:	0f 93       	push	r16
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	3a e0       	ldi	r19, 0x0A	; 10
     370:	c3 2e       	mov	r12, r19
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     372:	28 e0       	ldi	r18, 0x08	; 8
     374:	d2 2e       	mov	r13, r18
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     R_PORT = 0;			// R-outputs auf 0
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     376:	9a e2       	ldi	r25, 0x2A	; 42
     378:	a9 2e       	mov	r10, r25
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     37a:	85 e1       	ldi	r24, 0x15	; 21
     37c:	b8 2e       	mov	r11, r24
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     37e:	d7 b8       	out	0x07, r13	; 7
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     380:	d8 b8       	out	0x08, r13	; 8
     R_PORT = 0;			// R-outputs auf 0
     382:	15 b8       	out	0x05, r1	; 5
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     384:	a4 b8       	out	0x04, r10	; 4
     adcmv[0] = W5msReadADC(PC0);	// which voltage has Pin 1?
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
     38c:	8c 01       	movw	r16, r24
     adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
     394:	ec 01       	movw	r28, r24
     adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     396:	82 e0       	ldi	r24, 0x02	; 2
     398:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
     if ((PartFound == PART_CELL) || (adcmv[0] < CAP_EMPTY_LEVEL) & (adcmv[1] < CAP_EMPTY_LEVEL) & (adcmv[2] < CAP_EMPTY_LEVEL)) {
     39c:	20 91 07 01 	lds	r18, 0x0107
     3a0:	28 30       	cpi	r18, 0x08	; 8
     3a2:	c1 f0       	breq	.+48     	; 0x3d4 <EntladePins+0x7a>
     3a4:	41 e0       	ldi	r20, 0x01	; 1
     3a6:	c4 30       	cpi	r28, 0x04	; 4
     3a8:	d1 05       	cpc	r29, r1
     3aa:	08 f0       	brcs	.+2      	; 0x3ae <EntladePins+0x54>
     3ac:	40 e0       	ldi	r20, 0x00	; 0
     3ae:	21 e0       	ldi	r18, 0x01	; 1
     3b0:	04 30       	cpi	r16, 0x04	; 4
     3b2:	11 05       	cpc	r17, r1
     3b4:	08 f0       	brcs	.+2      	; 0x3b8 <EntladePins+0x5e>
     3b6:	20 e0       	ldi	r18, 0x00	; 0
     3b8:	42 23       	and	r20, r18
     3ba:	50 e0       	ldi	r21, 0x00	; 0
     3bc:	21 e0       	ldi	r18, 0x01	; 1
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	84 30       	cpi	r24, 0x04	; 4
     3c2:	91 05       	cpc	r25, r1
     3c4:	10 f0       	brcs	.+4      	; 0x3ca <EntladePins+0x70>
     3c6:	20 e0       	ldi	r18, 0x00	; 0
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	24 23       	and	r18, r20
     3cc:	35 23       	and	r19, r21
     3ce:	21 15       	cp	r18, r1
     3d0:	31 05       	cpc	r19, r1
     3d2:	21 f0       	breq	.+8      	; 0x3dc <EntladePins+0x82>
        ADC_DDR = TXD_MSK;		// switch all ADC-Pins to input
     3d4:	88 e0       	ldi	r24, 0x08	; 8
     3d6:	87 b9       	out	0x07, r24	; 7
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
     3d8:	14 b8       	out	0x04, r1	; 4
        return;			// all is discharged
     3da:	4f c0       	rjmp	.+158    	; 0x47a <EntladePins+0x120>
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
     3dc:	23 e0       	ldi	r18, 0x03	; 3
     3de:	08 3e       	cpi	r16, 0xE8	; 232
     3e0:	12 07       	cpc	r17, r18
     3e2:	10 f0       	brcs	.+4      	; 0x3e8 <EntladePins+0x8e>
  uint8_t lop_cnt;		// loop counter
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     3e4:	28 e0       	ldi	r18, 0x08	; 8
     3e6:	01 c0       	rjmp	.+2      	; 0x3ea <EntladePins+0x90>
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
        return;			// all is discharged
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
        adc_gnd |= (1<<PC0);	//Pin 1 directly to GND
     3e8:	29 e0       	ldi	r18, 0x09	; 9
     }
     if (adcmv[1] < 1000) {
     3ea:	33 e0       	ldi	r19, 0x03	; 3
     3ec:	c8 3e       	cpi	r28, 0xE8	; 232
     3ee:	d3 07       	cpc	r29, r19
     3f0:	08 f4       	brcc	.+2      	; 0x3f4 <EntladePins+0x9a>
        adc_gnd |= (1<<PC1);	//Pin 2 directly to GND
     3f2:	22 60       	ori	r18, 0x02	; 2
     }
     if (adcmv[2] < 1000) {
     3f4:	33 e0       	ldi	r19, 0x03	; 3
     3f6:	88 3e       	cpi	r24, 0xE8	; 232
     3f8:	93 07       	cpc	r25, r19
     3fa:	08 f4       	brcc	.+2      	; 0x3fe <EntladePins+0xa4>
        adc_gnd |= (1<<PC2);	//Pin 3 directly to  GND
     3fc:	24 60       	ori	r18, 0x04	; 4
     }
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time
     3fe:	27 b9       	out	0x07, r18	; 7

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     400:	b4 b8       	out	0x04, r11	; 4
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     402:	c0 e0       	ldi	r28, 0x00	; 0
     404:	d0 e0       	ldi	r29, 0x00	; 0
        wdt_reset();
     406:	a8 95       	wdr
        adcmv[0] = W20msReadADC(PC0);	// which voltage has Pin 1?
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	0e 94 29 1a 	call	0x3452	; 0x3452 <W20msReadADC>
     40e:	7c 01       	movw	r14, r24
        adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
     416:	8c 01       	movw	r16, r24
        adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     418:	82 e0       	ldi	r24, 0x02	; 2
     41a:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
        if (adcmv[0] < 1300) {
     41e:	24 e1       	ldi	r18, 0x14	; 20
     420:	e2 16       	cp	r14, r18
     422:	25 e0       	ldi	r18, 0x05	; 5
     424:	f2 06       	cpc	r15, r18
     426:	08 f4       	brcc	.+2      	; 0x42a <EntladePins+0xd0>
           ADC_DDR |= (1<<PC0);	// below 1.3V , switch directly with ADC-Port to GND
     428:	38 9a       	sbi	0x07, 0	; 7
        }
        if (adcmv[1] < 1300) {
     42a:	35 e0       	ldi	r19, 0x05	; 5
     42c:	04 31       	cpi	r16, 0x14	; 20
     42e:	13 07       	cpc	r17, r19
     430:	08 f4       	brcc	.+2      	; 0x434 <EntladePins+0xda>
           ADC_DDR |= (1<<PC1);	// below 1.3V, switch directly with ADC-Port to GND
     432:	39 9a       	sbi	0x07, 1	; 7
        }
        if (adcmv[2] < 1300) {
     434:	25 e0       	ldi	r18, 0x05	; 5
     436:	84 31       	cpi	r24, 0x14	; 20
     438:	92 07       	cpc	r25, r18
     43a:	08 f4       	brcc	.+2      	; 0x43e <EntladePins+0xe4>
           ADC_DDR |= (1<<PC2);	// below 1.3V, switch directly with ADC-Port to GND
     43c:	3a 9a       	sbi	0x07, 2	; 7
        }
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
     43e:	36 e0       	ldi	r19, 0x06	; 6
     440:	e3 16       	cp	r14, r19
     442:	f1 04       	cpc	r15, r1
     444:	30 f4       	brcc	.+12     	; 0x452 <EntladePins+0xf8>
     446:	06 30       	cpi	r16, 0x06	; 6
     448:	11 05       	cpc	r17, r1
     44a:	18 f4       	brcc	.+6      	; 0x452 <EntladePins+0xf8>
     44c:	86 30       	cpi	r24, 0x06	; 6
     44e:	91 05       	cpc	r25, r1
     450:	38 f0       	brcs	.+14     	; 0x460 <EntladePins+0x106>

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     452:	21 96       	adiw	r28, 0x01	; 1
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	c4 3f       	cpi	r28, 0xF4	; 244
     458:	d8 07       	cpc	r29, r24
     45a:	a9 f6       	brne	.-86     	; 0x406 <EntladePins+0xac>
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
           break;
        }
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
     45c:	d0 92 07 01 	sts	0x0107, r13

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     460:	00 e0       	ldi	r16, 0x00	; 0
     462:	10 e0       	ldi	r17, 0x00	; 0
     464:	04 c0       	rjmp	.+8      	; 0x46e <EntladePins+0x114>
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     466:	0e 94 bf 13 	call	0x277e	; 0x277e <wait1ms>
     46a:	0f 5f       	subi	r16, 0xFF	; 255
     46c:	1f 4f       	sbci	r17, 0xFF	; 255
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
     46e:	0c 17       	cp	r16, r28
     470:	1d 07       	cpc	r17, r29
     472:	c8 f3       	brcs	.-14     	; 0x466 <EntladePins+0x10c>
     474:	ca 94       	dec	r12
  unsigned int clr_cnt;		// Clear Counter
  uint8_t lop_cnt;		// loop counter
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     476:	09 f0       	breq	.+2      	; 0x47a <EntladePins+0x120>
     478:	82 cf       	rjmp	.-252    	; 0x37e <EntladePins+0x24>
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     }
  } // end for lop_cnt
 }
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	1f 91       	pop	r17
     480:	0f 91       	pop	r16
     482:	ff 90       	pop	r15
     484:	ef 90       	pop	r14
     486:	df 90       	pop	r13
     488:	cf 90       	pop	r12
     48a:	bf 90       	pop	r11
     48c:	af 90       	pop	r10
     48e:	08 95       	ret

00000490 <RefVoltage>:
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;

  #ifdef AUTO_CAL
  referenz = ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset));
     490:	8a e9       	ldi	r24, 0x9A	; 154
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <__eerd_word_m168>
     498:	20 91 44 01 	lds	r18, 0x0144
     49c:	30 91 45 01 	lds	r19, 0x0145
     4a0:	28 0f       	add	r18, r24
     4a2:	39 1f       	adc	r19, r25
  #else
  referenz = ref_mv + REF_C_KORR;
  #endif
  if (referenz >= Ref_Tab_Beginn) {
     4a4:	83 e0       	ldi	r24, 0x03	; 3
     4a6:	28 3e       	cpi	r18, 0xE8	; 232
     4a8:	38 07       	cpc	r19, r24
     4aa:	20 f0       	brcs	.+8      	; 0x4b4 <RefVoltage+0x24>
     referenz -= Ref_Tab_Beginn;
     4ac:	c9 01       	movw	r24, r18
     4ae:	88 5e       	subi	r24, 0xE8	; 232
     4b0:	93 40       	sbci	r25, 0x03	; 3
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <RefVoltage+0x28>
  } else  {
     referenz = 0;		// limit to begin of table
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = referenz / Ref_Tab_Abstand;
     4b8:	62 e3       	ldi	r22, 0x32	; 50
     4ba:	70 e0       	ldi	r23, 0x00	; 0
     4bc:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <__udivmodhi4>
  tabres = Ref_Tab_Abstand-tabres;
  if (tabind > 7) {
     tabind = 7;		// limit to end of table
  }
  // interpolate the table of factors
  y1 = pgm_read_word(&RHtab[tabind]);
     4c0:	68 30       	cpi	r22, 0x08	; 8
     4c2:	08 f0       	brcs	.+2      	; 0x4c6 <RefVoltage+0x36>
     4c4:	67 e0       	ldi	r22, 0x07	; 7
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	fb 01       	movw	r30, r22
     4ca:	ee 0f       	add	r30, r30
     4cc:	ff 1f       	adc	r31, r31
     4ce:	ea 53       	subi	r30, 0x3A	; 58
     4d0:	ff 4f       	sbci	r31, 0xFF	; 255
     4d2:	45 91       	lpm	r20, Z+
     4d4:	54 91       	lpm	r21, Z+
  y2 = pgm_read_word(&RHtab[tabind+1]);
     4d6:	fb 01       	movw	r30, r22
     4d8:	ee 0f       	add	r30, r30
     4da:	ff 1f       	adc	r31, r31
     4dc:	e8 53       	subi	r30, 0x38	; 56
     4de:	ff 4f       	sbci	r31, 0xFF	; 255
     4e0:	25 91       	lpm	r18, Z+
     4e2:	34 91       	lpm	r19, Z+
  } else  {
     referenz = 0;		// limit to begin of table
  }
  tabind = referenz / Ref_Tab_Abstand;
  tabres = referenz % Ref_Tab_Abstand;
  tabres = Ref_Tab_Abstand-tabres;
     4e4:	62 e3       	ldi	r22, 0x32	; 50
     4e6:	68 1b       	sub	r22, r24
  }
  // interpolate the table of factors
  y1 = pgm_read_word(&RHtab[tabind]);
  y2 = pgm_read_word(&RHtab[tabind+1]);
  // RHmultip is the interpolated factor to compute capacity from load time with 470k
  RHmultip = ((y1 - y2) * tabres + (Ref_Tab_Abstand/2)) / Ref_Tab_Abstand + y2;
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	42 1b       	sub	r20, r18
     4ec:	53 0b       	sbc	r21, r19
     4ee:	64 9f       	mul	r22, r20
     4f0:	c0 01       	movw	r24, r0
     4f2:	65 9f       	mul	r22, r21
     4f4:	90 0d       	add	r25, r0
     4f6:	74 9f       	mul	r23, r20
     4f8:	90 0d       	add	r25, r0
     4fa:	11 24       	eor	r1, r1
     4fc:	49 96       	adiw	r24, 0x19	; 25
     4fe:	62 e3       	ldi	r22, 0x32	; 50
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <__udivmodhi4>
     506:	62 0f       	add	r22, r18
     508:	73 1f       	adc	r23, r19
     50a:	70 93 01 01 	sts	0x0101, r23
     50e:	60 93 00 01 	sts	0x0100, r22
 }
     512:	08 95       	ret

00000514 <lcd_clear_line>:
#endif

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
     514:	1f 93       	push	r17
     516:	14 e1       	ldi	r17, 0x14	; 20
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    lcd_space();
     518:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>
     51c:	11 50       	subi	r17, 0x01	; 1

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
     51e:	e1 f7       	brne	.-8      	; 0x518 <lcd_clear_line+0x4>
    lcd_space();
 }
}
     520:	1f 91       	pop	r17
     522:	08 95       	ret

00000524 <DisplayValue>:
 *    e.g: p = 10^-12 -> -12
 *  - unit character (0 = none)
 *  digits = 2, 3 or 4
 */
void DisplayValue(unsigned long Value, int8_t Exponent, unsigned char Unit, unsigned char digits)
{
     524:	2f 92       	push	r2
     526:	3f 92       	push	r3
     528:	4f 92       	push	r4
     52a:	5f 92       	push	r5
     52c:	7f 92       	push	r7
     52e:	8f 92       	push	r8
     530:	9f 92       	push	r9
     532:	af 92       	push	r10
     534:	bf 92       	push	r11
     536:	cf 92       	push	r12
     538:	df 92       	push	r13
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	df 93       	push	r29
     544:	cf 93       	push	r28
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
     54a:	2f 97       	sbiw	r28, 0x0f	; 15
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	de bf       	out	0x3e, r29	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	cd bf       	out	0x3d, r28	; 61
     556:	6b 01       	movw	r12, r22
     558:	7c 01       	movw	r14, r24
     55a:	14 2f       	mov	r17, r20
     55c:	72 2e       	mov	r7, r18
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
     55e:	03 30       	cpi	r16, 0x03	; 3
     560:	29 f0       	breq	.+10     	; 0x56c <DisplayValue+0x48>
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
     562:	04 30       	cpi	r16, 0x04	; 4
     564:	31 f0       	breq	.+12     	; 0x572 <DisplayValue+0x4e>
  uint8_t           Offset;		/* exponent of offset to next 10^3 step */
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
     566:	84 e6       	ldi	r24, 0x64	; 100
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	14 c0       	rjmp	.+40     	; 0x594 <DisplayValue+0x70>
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
     56c:	88 ee       	ldi	r24, 0xE8	; 232
     56e:	93 e0       	ldi	r25, 0x03	; 3
     570:	11 c0       	rjmp	.+34     	; 0x594 <DisplayValue+0x70>
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
     572:	80 e1       	ldi	r24, 0x10	; 16
     574:	97 e2       	ldi	r25, 0x27	; 39
     576:	0e c0       	rjmp	.+28     	; 0x594 <DisplayValue+0x70>
  while (Value >= Limit)
  {
    Value += 5;				/* for automatic rounding */
     578:	c7 01       	movw	r24, r14
     57a:	b6 01       	movw	r22, r12
     57c:	6b 5f       	subi	r22, 0xFB	; 251
     57e:	7f 4f       	sbci	r23, 0xFF	; 255
     580:	8f 4f       	sbci	r24, 0xFF	; 255
     582:	9f 4f       	sbci	r25, 0xFF	; 255
    Value = Value / 10;			/* scale down by 10^1 */
     584:	a5 01       	movw	r20, r10
     586:	94 01       	movw	r18, r8
     588:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
     58c:	69 01       	movw	r12, r18
     58e:	7a 01       	movw	r14, r20
    Exponent++;				/* increase exponent by 1 */
     590:	1f 5f       	subi	r17, 0xFF	; 255
     592:	08 c0       	rjmp	.+16     	; 0x5a4 <DisplayValue+0x80>


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
  while (Value >= Limit)
     594:	1c 01       	movw	r2, r24
     596:	44 24       	eor	r4, r4
     598:	55 24       	eor	r5, r5
  {
    Value += 5;				/* for automatic rounding */
    Value = Value / 10;			/* scale down by 10^1 */
     59a:	ba e0       	ldi	r27, 0x0A	; 10
     59c:	8b 2e       	mov	r8, r27
     59e:	91 2c       	mov	r9, r1
     5a0:	a1 2c       	mov	r10, r1
     5a2:	b1 2c       	mov	r11, r1


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
  while (Value >= Limit)
     5a4:	c2 14       	cp	r12, r2
     5a6:	d3 04       	cpc	r13, r3
     5a8:	e4 04       	cpc	r14, r4
     5aa:	f5 04       	cpc	r15, r5
     5ac:	28 f7       	brcc	.-54     	; 0x578 <DisplayValue+0x54>


  /*
   *  determine prefix
   */
  Length = Exponent + 12;
     5ae:	81 2f       	mov	r24, r17
     5b0:	84 5f       	subi	r24, 0xF4	; 244
  if ((int8_t)Length <  0) Length = 0;		/* Limit to minimum prefix */
     5b2:	87 fd       	sbrc	r24, 7
     5b4:	03 c0       	rjmp	.+6      	; 0x5bc <DisplayValue+0x98>
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
     5b6:	83 31       	cpi	r24, 0x13	; 19
     5b8:	18 f4       	brcc	.+6      	; 0x5c0 <DisplayValue+0x9c>
     5ba:	03 c0       	rjmp	.+6      	; 0x5c2 <DisplayValue+0x9e>

  /*
   *  determine prefix
   */
  Length = Exponent + 12;
  if ((int8_t)Length <  0) Length = 0;		/* Limit to minimum prefix */
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	01 c0       	rjmp	.+2      	; 0x5c2 <DisplayValue+0x9e>
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
     5c0:	82 e1       	ldi	r24, 0x12	; 18
  Index = Length / 3;
     5c2:	23 e0       	ldi	r18, 0x03	; 3
  Offset = Length % 3;
     5c4:	62 2f       	mov	r22, r18
     5c6:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <__udivmodqi4>
     5ca:	19 2f       	mov	r17, r25
  if (Offset > 0)
     5cc:	99 23       	and	r25, r25
     5ce:	19 f0       	breq	.+6      	; 0x5d6 <DisplayValue+0xb2>
    {
      Index++;				/* adjust index for exponent offset, take next prefix */
     5d0:	8f 5f       	subi	r24, 0xFF	; 255
      Offset = 3 - Offset;		/* reverse value (1 or 2) */
     5d2:	29 1b       	sub	r18, r25
     5d4:	12 2f       	mov	r17, r18
    { /* use no nano */
      Index++;				/* use mikro instead of nano */
      Offset += 3;			/* can be 3,4 or 5 */
    }
#endif
  Prefix = MEM_read_byte((uint8_t *)(&PrefixTab[Index]));   /* look up prefix in table */
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	8d 56       	subi	r24, 0x6D	; 109
     5da:	9e 4f       	sbci	r25, 0xFE	; 254
     5dc:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__eerd_byte_m168>
     5e0:	b8 2e       	mov	r11, r24
  /*
   *  display value
   */

  /* convert value into string */
  utoa((unsigned int)Value, OutBuffer, 10);
     5e2:	c6 01       	movw	r24, r12
     5e4:	6e 01       	movw	r12, r28
     5e6:	08 94       	sec
     5e8:	c1 1c       	adc	r12, r1
     5ea:	d1 1c       	adc	r13, r1
     5ec:	b6 01       	movw	r22, r12
     5ee:	4a e0       	ldi	r20, 0x0A	; 10
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <utoa>
  Length = strlen(OutBuffer);
     5f6:	f6 01       	movw	r30, r12
     5f8:	01 90       	ld	r0, Z+
     5fa:	00 20       	and	r0, r0
     5fc:	e9 f7       	brne	.-6      	; 0x5f8 <DisplayValue+0xd4>
     5fe:	31 97       	sbiw	r30, 0x01	; 1
     600:	2e 2e       	mov	r2, r30
     602:	2c 18       	sub	r2, r12

  /* position of dot */
  Exponent = Length - Offset;		/* calculate position */
     604:	82 2c       	mov	r8, r2
     606:	81 1a       	sub	r8, r17

  if (Exponent <= 0)			/* we have to prepend "0." */
     608:	18 14       	cp	r1, r8
     60a:	44 f0       	brlt	.+16     	; 0x61c <DisplayValue+0xf8>
  {
    /* 0: factor 10 / -1: factor 100 */
//    lcd_data('0');
    lcd_data('.');
     60c:	8e e2       	ldi	r24, 0x2E	; 46
     60e:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
      {
       lcd_data('0');	/* extra 0 for factor 10 */
       Exponent++;
      }
#else
    if (Exponent < 0) lcd_data('0');	/* extra 0 for factor 100 */
     612:	88 20       	and	r8, r8
     614:	19 f0       	breq	.+6      	; 0x61c <DisplayValue+0xf8>
     616:	80 e3       	ldi	r24, 0x30	; 48
     618:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
#endif
  }

  if (Offset == 0) Exponent = -1;	/* disable dot if not needed */
     61c:	11 23       	and	r17, r17
     61e:	11 f4       	brne	.+4      	; 0x624 <DisplayValue+0x100>
     620:	88 24       	eor	r8, r8
     622:	8a 94       	dec	r8
     624:	6e 01       	movw	r12, r28
     626:	08 94       	sec
     628:	c1 1c       	adc	r12, r1
     62a:	d1 1c       	adc	r13, r1
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     62c:	00 e0       	ldi	r16, 0x00	; 0
     62e:	10 e0       	ldi	r17, 0x00	; 0
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    Index++;				/* next one */
    if (Index == Exponent) {
     630:	99 24       	eor	r9, r9
     632:	87 fc       	sbrc	r8, 7
     634:	90 94       	com	r9
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     636:	0d c0       	rjmp	.+26     	; 0x652 <DisplayValue+0x12e>
  {
    lcd_data(OutBuffer[Index]);		/* display char */
     638:	0f 5f       	subi	r16, 0xFF	; 255
     63a:	1f 4f       	sbci	r17, 0xFF	; 255
     63c:	f6 01       	movw	r30, r12
     63e:	81 91       	ld	r24, Z+
     640:	6f 01       	movw	r12, r30
     642:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
    Index++;				/* next one */
    if (Index == Exponent) {
     646:	08 15       	cp	r16, r8
     648:	19 05       	cpc	r17, r9
     64a:	19 f4       	brne	.+6      	; 0x652 <DisplayValue+0x12e>
      lcd_data('.');			/* display dot */
     64c:	8e e2       	ldi	r24, 0x2E	; 46
     64e:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     652:	02 15       	cp	r16, r2
     654:	88 f3       	brcs	.-30     	; 0x638 <DisplayValue+0x114>
      lcd_data('.');			/* display dot */
    }
  }

  /* display prefix and unit */
  if (Prefix != 0) lcd_data(Prefix);
     656:	bb 20       	and	r11, r11
     658:	19 f0       	breq	.+6      	; 0x660 <DisplayValue+0x13c>
     65a:	8b 2d       	mov	r24, r11
     65c:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
  if (Unit) lcd_data(Unit);
     660:	77 20       	and	r7, r7
     662:	19 f0       	breq	.+6      	; 0x66a <DisplayValue+0x146>
     664:	87 2d       	mov	r24, r7
     666:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
}
     66a:	2f 96       	adiw	r28, 0x0f	; 15
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	de bf       	out	0x3e, r29	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	cd bf       	out	0x3d, r28	; 61
     676:	cf 91       	pop	r28
     678:	df 91       	pop	r29
     67a:	1f 91       	pop	r17
     67c:	0f 91       	pop	r16
     67e:	ff 90       	pop	r15
     680:	ef 90       	pop	r14
     682:	df 90       	pop	r13
     684:	cf 90       	pop	r12
     686:	bf 90       	pop	r11
     688:	af 90       	pop	r10
     68a:	9f 90       	pop	r9
     68c:	8f 90       	pop	r8
     68e:	7f 90       	pop	r7
     690:	5f 90       	pop	r5
     692:	4f 90       	pop	r4
     694:	3f 90       	pop	r3
     696:	2f 90       	pop	r2
     698:	08 95       	ret

0000069a <RvalOut>:
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
      lcd_space();
   }
}

void RvalOut(uint8_t nrr) {	
     69a:	0f 93       	push	r16
   // output of resistor value
#if FLASHEND > 0x1fff
   uint16_t rr;
   if ((resis[nrr].rx < 100) && (resis[0].lx == 0)) {
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	fc 01       	movw	r30, r24
     6a0:	ee 0f       	add	r30, r30
     6a2:	ff 1f       	adc	r31, r31
     6a4:	e8 0f       	add	r30, r24
     6a6:	f9 1f       	adc	r31, r25
     6a8:	ee 0f       	add	r30, r30
     6aa:	ff 1f       	adc	r31, r31
     6ac:	ee 0f       	add	r30, r30
     6ae:	ff 1f       	adc	r31, r31
     6b0:	e8 5e       	subi	r30, 0xE8	; 232
     6b2:	fe 4f       	sbci	r31, 0xFE	; 254
     6b4:	60 81       	ld	r22, Z
     6b6:	71 81       	ldd	r23, Z+1	; 0x01
     6b8:	82 81       	ldd	r24, Z+2	; 0x02
     6ba:	93 81       	ldd	r25, Z+3	; 0x03
     6bc:	64 36       	cpi	r22, 0x64	; 100
     6be:	71 05       	cpc	r23, r1
     6c0:	81 05       	cpc	r24, r1
     6c2:	91 05       	cpc	r25, r1
     6c4:	c0 f4       	brcc	.+48     	; 0x6f6 <RvalOut+0x5c>
     6c6:	20 91 1c 01 	lds	r18, 0x011C
     6ca:	30 91 1d 01 	lds	r19, 0x011D
     6ce:	40 91 1e 01 	lds	r20, 0x011E
     6d2:	50 91 1f 01 	lds	r21, 0x011F
     6d6:	21 15       	cp	r18, r1
     6d8:	31 05       	cpc	r19, r1
     6da:	41 05       	cpc	r20, r1
     6dc:	51 05       	cpc	r21, r1
     6de:	59 f4       	brne	.+22     	; 0x6f6 <RvalOut+0x5c>
      rr = GetESR(resis[nrr].ra,resis[nrr].rb);
     6e0:	81 85       	ldd	r24, Z+9	; 0x09
     6e2:	62 85       	ldd	r22, Z+10	; 0x0a
     6e4:	0e 94 9b 1a 	call	0x3536	; 0x3536 <GetESR>
      DisplayValue(rr,-2,LCD_CHAR_OMEGA,3);
     6e8:	bc 01       	movw	r22, r24
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	4e ef       	ldi	r20, 0xFE	; 254
     6f0:	24 ef       	ldi	r18, 0xF4	; 244
     6f2:	03 e0       	ldi	r16, 0x03	; 3
     6f4:	03 c0       	rjmp	.+6      	; 0x6fc <RvalOut+0x62>
   } else {
      DisplayValue(resis[nrr].rx,-1,LCD_CHAR_OMEGA,4);
     6f6:	4f ef       	ldi	r20, 0xFF	; 255
     6f8:	24 ef       	ldi	r18, 0xF4	; 244
     6fa:	04 e0       	ldi	r16, 0x04	; 4
     6fc:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
   }
#else
   DisplayValue(resis[nrr].rx,-1,LCD_CHAR_OMEGA,4);
#endif
   lcd_space();
     700:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>
 }
     704:	0f 91       	pop	r16
     706:	08 95       	ret

00000708 <mVAusgabe>:
   lcd_line2(); 				//2. row
   lcd_fix_string(Uf_str);			//"Uf="
   mVAusgabe(bcdnum >> 4);
   mVAusgabe(bcdnum & 0x0f);
}
void mVAusgabe(uint8_t nn) {
     708:	0f 93       	push	r16
   if (nn < 3) {
     70a:	83 30       	cpi	r24, 0x03	; 3
     70c:	98 f4       	brcc	.+38     	; 0x734 <mVAusgabe+0x2c>
      // Output in mV units
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
     70e:	e8 2f       	mov	r30, r24
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	ee 0f       	add	r30, r30
     714:	ff 1f       	adc	r31, r31
     716:	ee 0f       	add	r30, r30
     718:	ff 1f       	adc	r31, r31
     71a:	ec 57       	subi	r30, 0x7C	; 124
     71c:	fe 4f       	sbci	r31, 0xFE	; 254
     71e:	62 81       	ldd	r22, Z+2	; 0x02
     720:	73 81       	ldd	r23, Z+3	; 0x03
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	4d ef       	ldi	r20, 0xFD	; 253
     728:	26 e5       	ldi	r18, 0x56	; 86
     72a:	03 e0       	ldi	r16, 0x03	; 3
     72c:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
      lcd_space();
     730:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>
   }
}
     734:	0f 91       	pop	r16
     736:	08 95       	ret

00000738 <UfAusgabe>:
// output of flux voltage for 1-2 diodes in row 2
// bcdnum = Numbers of both Diodes:
// higher 4 Bit  number of first Diode
// lower 4 Bit  number of second Diode (Structure diodes[nn])
// if number >= 3  no output is done
void UfAusgabe(uint8_t bcdnum) {
     738:	1f 93       	push	r17
     73a:	18 2f       	mov	r17, r24

   lcd_line2(); 				//2. row
     73c:	80 ec       	ldi	r24, 0xC0	; 192
     73e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
   lcd_fix_string(Uf_str);			//"Uf="
     742:	8b e0       	ldi	r24, 0x0B	; 11
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
   mVAusgabe(bcdnum >> 4);
     74a:	81 2f       	mov	r24, r17
     74c:	82 95       	swap	r24
     74e:	8f 70       	andi	r24, 0x0F	; 15
     750:	0e 94 84 03 	call	0x708	; 0x708 <mVAusgabe>
   mVAusgabe(bcdnum & 0x0f);
     754:	81 2f       	mov	r24, r17
     756:	8f 70       	andi	r24, 0x0F	; 15
     758:	0e 94 84 03 	call	0x708	; 0x708 <mVAusgabe>
}
     75c:	1f 91       	pop	r17
     75e:	08 95       	ret

00000760 <SerienDiodenAusgabe>:
  goto start;	// POWER_OFF not selected, repeat measurement
#endif
  return 0;
}   // end main

void SerienDiodenAusgabe() {
     760:	df 92       	push	r13
     762:	ef 92       	push	r14
     764:	ff 92       	push	r15
     766:	0f 93       	push	r16
     768:	1f 93       	push	r17
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
   uint8_t first;
   uint8_t second;
   first = diode_sequence >> 4;
     76e:	d0 90 02 01 	lds	r13, 0x0102
     772:	8d 2d       	mov	r24, r13
     774:	82 95       	swap	r24
     776:	8f 70       	andi	r24, 0x0F	; 15
   second = diode_sequence & 3;
   lcd_testpin(diodes[first].Anode);
     778:	c8 2f       	mov	r28, r24
     77a:	d0 e0       	ldi	r29, 0x00	; 0
     77c:	04 e8       	ldi	r16, 0x84	; 132
     77e:	11 e0       	ldi	r17, 0x01	; 1
     780:	cc 0f       	add	r28, r28
     782:	dd 1f       	adc	r29, r29
     784:	cc 0f       	add	r28, r28
     786:	dd 1f       	adc	r29, r29
     788:	c0 0f       	add	r28, r16
     78a:	d1 1f       	adc	r29, r17
     78c:	88 81       	ld	r24, Y
     78e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
   lcd_fix_string(AnKat);	//"->|-"
     792:	50 e4       	ldi	r21, 0x40	; 64
     794:	e5 2e       	mov	r14, r21
     796:	51 e0       	ldi	r21, 0x01	; 1
     798:	f5 2e       	mov	r15, r21
     79a:	c7 01       	movw	r24, r14
     79c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
   lcd_testpin(diodes[first].Cathode);
     7a0:	89 81       	ldd	r24, Y+1	; 0x01
     7a2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
   lcd_fix_string(AnKat);	//"->|-"
     7a6:	c7 01       	movw	r24, r14
     7a8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>

void SerienDiodenAusgabe() {
   uint8_t first;
   uint8_t second;
   first = diode_sequence >> 4;
   second = diode_sequence & 3;
     7ac:	ed 2d       	mov	r30, r13
     7ae:	e3 70       	andi	r30, 0x03	; 3
   lcd_testpin(diodes[first].Anode);
   lcd_fix_string(AnKat);	//"->|-"
   lcd_testpin(diodes[first].Cathode);
   lcd_fix_string(AnKat);	//"->|-"
   lcd_testpin(diodes[second].Cathode);
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	ee 0f       	add	r30, r30
     7b4:	ff 1f       	adc	r31, r31
     7b6:	ee 0f       	add	r30, r30
     7b8:	ff 1f       	adc	r31, r31
     7ba:	e0 0f       	add	r30, r16
     7bc:	f1 1f       	adc	r31, r17
     7be:	81 81       	ldd	r24, Z+1	; 0x01
     7c0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
   UfAusgabe(diode_sequence);
     7c4:	80 91 02 01 	lds	r24, 0x0102
     7c8:	0e 94 9c 03 	call	0x738	; 0x738 <UfAusgabe>
}
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	1f 91       	pop	r17
     7d2:	0f 91       	pop	r16
     7d4:	ff 90       	pop	r15
     7d6:	ef 90       	pop	r14
     7d8:	df 90       	pop	r13
     7da:	08 95       	ret

000007dc <sleep_5ms>:
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
      pause = 0;
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     7dc:	42 e0       	ldi	r20, 0x02	; 2
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     7de:	1c c0       	rjmp	.+56     	; 0x818 <sleep_5ms+0x3c>
  {
 #if 3000 > RESTART_DELAY_US
   if (pause > 1)
     7e0:	82 30       	cpi	r24, 0x02	; 2
     7e2:	91 05       	cpc	r25, r1
     7e4:	18 f0       	brcs	.+6      	; 0x7ec <sleep_5ms+0x10>
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
      pause -= 2;
     7e6:	02 97       	sbiw	r24, 0x02	; 2
  {
 #if 3000 > RESTART_DELAY_US
   if (pause > 1)
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
     7e8:	3e e3       	ldi	r19, 0x3E	; 62
     7ea:	03 c0       	rjmp	.+6      	; 0x7f2 <sleep_5ms+0x16>
      pause -= 2;
     } else {
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
     7ec:	37 e1       	ldi	r19, 0x17	; 23
      pause = 0;
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
     7f2:	20 91 b2 00 	lds	r18, 0x00B2
     7f6:	23 0f       	add	r18, r19
     7f8:	20 93 b3 00 	sts	0x00B3, r18
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     7fc:	40 93 70 00 	sts	0x0070, r20
   set_sleep_mode(SLEEP_MODE_PWR_SAVE);
     800:	23 b7       	in	r18, 0x33	; 51
     802:	21 7f       	andi	r18, 0xF1	; 241
     804:	26 60       	ori	r18, 0x06	; 6
     806:	23 bf       	out	0x33, r18	; 51
//   set_sleep_mode(SLEEP_MODE_IDLE);
   sleep_mode();
     808:	23 b7       	in	r18, 0x33	; 51
     80a:	21 60       	ori	r18, 0x01	; 1
     80c:	23 bf       	out	0x33, r18	; 51
     80e:	88 95       	sleep
     810:	23 b7       	in	r18, 0x33	; 51
     812:	2e 7f       	andi	r18, 0xFE	; 254
     814:	23 bf       	out	0x33, r18	; 51
// wake up after output compare match interrupt
 #else
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
 #endif
   wdt_reset();
     816:	a8 95       	wdr
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     818:	00 97       	sbiw	r24, 0x00	; 0
     81a:	11 f7       	brne	.-60     	; 0x7e0 <sleep_5ms+0x4>
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
 #endif
   wdt_reset();
  }
TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
     81c:	10 92 70 00 	sts	0x0070, r1
}
     820:	08 95       	ret

00000822 <ChargePin10ms>:
 }

//******************************************************************
#include "CheckPins.c"

void ChargePin10ms(uint8_t PinToCharge, uint8_t ChargeDirection) {
     822:	1f 93       	push	r17
     824:	18 2f       	mov	r17, r24
   //Will be used by discharge of MOSFET Gates or to load big capacities.
   //Parameters:
   //PinToCharge: specifies the pin as mask for R-Port
   //ChargeDirection: 0 = switch to GND (N-Kanal-FET), 1= switch to VCC(P-Kanal-FET)

   if(ChargeDirection&1) {
     826:	60 ff       	sbrs	r22, 0
     828:	03 c0       	rjmp	.+6      	; 0x830 <ChargePin10ms+0xe>
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
     82a:	85 b1       	in	r24, 0x05	; 5
     82c:	81 2b       	or	r24, r17
     82e:	03 c0       	rjmp	.+6      	; 0x836 <ChargePin10ms+0x14>
   } else {
      R_PORT &= ~PinToCharge; // or 0 (GND)
     830:	95 b1       	in	r25, 0x05	; 5
     832:	80 95       	com	r24
     834:	89 23       	and	r24, r25
     836:	85 b9       	out	0x05, r24	; 5
   }
   R_DDR |= PinToCharge;		//switch Pin to output, across R to GND or VCC
     838:	84 b1       	in	r24, 0x04	; 4
     83a:	81 2b       	or	r24, r17
     83c:	84 b9       	out	0x04, r24	; 4
   wait_about10ms();			// wait about 10ms
     83e:	82 e0       	ldi	r24, 0x02	; 2
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>
   // switch back Input, no current
   R_DDR &= ~PinToCharge;	// switch back to input
     846:	84 b1       	in	r24, 0x04	; 4
     848:	10 95       	com	r17
     84a:	81 23       	and	r24, r17
     84c:	84 b9       	out	0x04, r24	; 4
   R_PORT &= ~PinToCharge;	// no Pull up
     84e:	85 b1       	in	r24, 0x05	; 5
     850:	81 23       	and	r24, r17
     852:	85 b9       	out	0x05, r24	; 5
}
     854:	1f 91       	pop	r17
     856:	08 95       	ret

00000858 <CheckPins>:
//******************************************************************
void CheckPins(uint8_t HighPin, uint8_t LowPin, uint8_t TristatePin)
  {
     858:	2f 92       	push	r2
     85a:	3f 92       	push	r3
     85c:	4f 92       	push	r4
     85e:	5f 92       	push	r5
     860:	6f 92       	push	r6
     862:	7f 92       	push	r7
     864:	8f 92       	push	r8
     866:	9f 92       	push	r9
     868:	af 92       	push	r10
     86a:	bf 92       	push	r11
     86c:	cf 92       	push	r12
     86e:	df 92       	push	r13
     870:	ef 92       	push	r14
     872:	ff 92       	push	r15
     874:	0f 93       	push	r16
     876:	1f 93       	push	r17
     878:	df 93       	push	r29
     87a:	cf 93       	push	r28
     87c:	cd b7       	in	r28, 0x3d	; 61
     87e:	de b7       	in	r29, 0x3e	; 62
     880:	2f 97       	sbiw	r28, 0x0f	; 15
     882:	0f b6       	in	r0, 0x3f	; 63
     884:	f8 94       	cli
     886:	de bf       	out	0x3e, r29	; 62
     888:	0f be       	out	0x3f, r0	; 63
     88a:	cd bf       	out	0x3d, r28	; 61
     88c:	18 2f       	mov	r17, r24
     88e:	69 83       	std	Y+1, r22	; 0x01
     890:	4a 83       	std	Y+2, r20	; 0x02
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
     892:	a8 95       	wdr
//  #define RR680MI resis680mi
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = pgm_read_byte(&PinRLtab[LowPin]);		// instruction for LowPin R_L
     894:	86 2f       	mov	r24, r22
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	fc 01       	movw	r30, r24
     89a:	e0 50       	subi	r30, 0x00	; 0
     89c:	ff 4f       	sbci	r31, 0xFF	; 255
     89e:	24 91       	lpm	r18, Z+
     8a0:	2f 83       	std	Y+7, r18	; 0x07
  LoPinRH = LoPinRL + LoPinRL;				// instruction for LowPin R_H
  TriPinRL = pgm_read_byte(&PinRLtab[TristatePin]);	// instruction for TristatePin R_L
     8a2:	e4 2f       	mov	r30, r20
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	e0 50       	subi	r30, 0x00	; 0
     8a8:	ff 4f       	sbci	r31, 0xFF	; 255
     8aa:	04 91       	lpm	r16, Z+
  TriPinRH = TriPinRL + TriPinRL;			// instruction for TristatePin R_H
  HiPinRL = pgm_read_byte(&PinRLtab[HighPin]);		// instruction for HighPin R_L
     8ac:	21 2f       	mov	r18, r17
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	f9 01       	movw	r30, r18
     8b2:	e0 50       	subi	r30, 0x00	; 0
     8b4:	ff 4f       	sbci	r31, 0xFF	; 255
     8b6:	c4 90       	lpm	r12, Z+
  HiPinRH = HiPinRL + HiPinRL;				// instruction for HighPin R_H

  HiADCp = pgm_read_byte(&PinADCtab[HighPin]);		// instruction for ADC High-Pin 
     8b8:	2d 5f       	subi	r18, 0xFD	; 253
     8ba:	3e 4f       	sbci	r19, 0xFE	; 254
     8bc:	f9 01       	movw	r30, r18
     8be:	94 90       	lpm	r9, Z+
  LoADCp = pgm_read_byte(&PinADCtab[LowPin]);		// instruction for ADC Low-Pin
     8c0:	8d 5f       	subi	r24, 0xFD	; 253
     8c2:	9e 4f       	sbci	r25, 0xFE	; 254
     8c4:	fc 01       	movw	r30, r24
     8c6:	84 90       	lpm	r8, Z+
  HiADCm = HiADCp | TXD_MSK;
     8c8:	f8 e0       	ldi	r31, 0x08	; 8
     8ca:	9f 2a       	or	r9, r31
  HiADCp |= TXD_VAL;
  LoADCm = LoADCp | TXD_MSK;
     8cc:	8f 2a       	or	r8, r31
  LoADCp |= TXD_VAL;

  //setting of Pins 
  R_PORT = 0;				//resistor-Port outputs to 0
     8ce:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//Low-Pin to output and across R_L to GND
     8d0:	2f 81       	ldd	r18, Y+7	; 0x07
     8d2:	24 b9       	out	0x04, r18	; 4
  ADC_DDR = HiADCm;		//High-Pin to output
     8d4:	97 b8       	out	0x07, r9	; 7
  ADC_PORT = HiADCp;		//High-Pin fix to Vcc
     8d6:	98 b8       	out	0x08, r9	; 8
  //for some MOSFET the gate (TristatePin) must be discharged
  ChargePin10ms(TriPinRL,0);		//discharge for N-Kanal
     8d8:	80 2f       	mov	r24, r16
     8da:	60 e0       	ldi	r22, 0x00	; 0
     8dc:	0e 94 11 04 	call	0x822	; 0x822 <ChargePin10ms>
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin 
     8e0:	89 81       	ldd	r24, Y+1	; 0x01
     8e2:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
     8e6:	3c 01       	movw	r6, r24
  if(adc.lp_otr >= 977) {		//no current now? 
     8e8:	33 e0       	ldi	r19, 0x03	; 3
     8ea:	81 3d       	cpi	r24, 0xD1	; 209
     8ec:	93 07       	cpc	r25, r19
     8ee:	40 f0       	brcs	.+16     	; 0x900 <CheckPins+0xa8>
     ChargePin10ms(TriPinRL,1);	 	//else: discharge for P-channel (Gate to VCC)
     8f0:	80 2f       	mov	r24, r16
     8f2:	61 e0       	ldi	r22, 0x01	; 1
     8f4:	0e 94 11 04 	call	0x822	; 0x822 <ChargePin10ms>
     adc.lp_otr = ReadADC(LowPin);	//read voltage of Low-Pin again
     8f8:	89 81       	ldd	r24, Y+1	; 0x01
     8fa:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
     8fe:	3c 01       	movw	r6, r24
  // a TRIAC is marked as two transistors at least (2 or 3)
  // both of NPN transistors (normal and inverse) are found, if ntrans.count == 2
  // both of PNP transistors (normal and inverse) are found, if ptrans.count == 2
  // If Transistor with protection diode is checked, all results are found,
  // if ntrans.count == 1 and ptrans.count == 1
  if ((ntrans.count + ptrans.count) > 1) {
     900:	20 91 6b 01 	lds	r18, 0x016B
     904:	80 91 59 01 	lds	r24, 0x0159
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	82 0f       	add	r24, r18
     90c:	91 1d       	adc	r25, r1
     90e:	82 30       	cpi	r24, 0x02	; 2
     910:	91 05       	cpc	r25, r1
     912:	0c f0       	brlt	.+2      	; 0x916 <CheckPins+0xbe>
     914:	b1 c3       	rjmp	.+1890   	; 0x1078 <CheckPins+0x820>
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = pgm_read_byte(&PinRLtab[LowPin]);		// instruction for LowPin R_L
  LoPinRH = LoPinRL + LoPinRL;				// instruction for LowPin R_H
  TriPinRL = pgm_read_byte(&PinRLtab[TristatePin]);	// instruction for TristatePin R_L
  TriPinRH = TriPinRL + TriPinRL;			// instruction for TristatePin R_H
     916:	40 2e       	mov	r4, r16
     918:	44 0c       	add	r4, r4
  if ((ntrans.count + ptrans.count) > 1) {
     // all transistors found, no more search is needed
     goto checkDiode;
  }
//  if(adc.lp_otr > 92) {  //there is some current without TristatePin current 
  if(adc.lp_otr > 455) {  //there is more than 650uA current without TristatePin current 
     91a:	48 ec       	ldi	r20, 0xC8	; 200
     91c:	64 16       	cp	r6, r20
     91e:	41 e0       	ldi	r20, 0x01	; 1
     920:	74 06       	cpc	r7, r20
     922:	08 f4       	brcc	.+2      	; 0x926 <CheckPins+0xce>
     924:	a4 c0       	rjmp	.+328    	; 0xa6e <CheckPins+0x216>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test if N-JFET or if self-conducting N-MOSFET
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
     926:	8f 81       	ldd	r24, Y+7	; 0x07
     928:	84 29       	or	r24, r4
     92a:	84 b9       	out	0x04, r24	; 4
     adc.lp1 = W20msReadADC(LowPin);	//measure voltage at the assumed Source 
     92c:	89 81       	ldd	r24, Y+1	; 0x01
     92e:	0e 94 29 1a 	call	0x3452	; 0x3452 <W20msReadADC>
     932:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     934:	8a 81       	ldd	r24, Y+2	; 0x02
     936:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
     93a:	7c 01       	movw	r14, r24
     R_PORT = TriPinRH;			//switch R_H for Tristate-Pin (probably Gate) to VCC
     93c:	45 b8       	out	0x05, r4	; 5
     adc.lp2 = W20msReadADC(LowPin);	//measure voltage at the assumed Source again
     93e:	89 81       	ldd	r24, Y+1	; 0x01
     940:	0e 94 29 1a 	call	0x3452	; 0x3452 <W20msReadADC>
     //If it is a self-conducting MOSFET or JFET, then must be: adc.lp2 > adc.lp1 
     if(adc.lp2>(adc.lp1+488)) {
     944:	95 01       	movw	r18, r10
     946:	28 51       	subi	r18, 0x18	; 24
     948:	3e 4f       	sbci	r19, 0xFE	; 254
     94a:	4c 28       	or	r4, r12
     94c:	28 17       	cp	r18, r24
     94e:	39 07       	cpc	r19, r25
     950:	e8 f5       	brcc	.+122    	; 0x9cc <CheckPins+0x174>
        //measure voltage at the  Gate, differ between MOSFET and JFET
        ADC_PORT = TXD_VAL;
     952:	88 e0       	ldi	r24, 0x08	; 8
     954:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = LoADCm;	//Low-Pin fix to GND
     956:	87 b8       	out	0x07, r8	; 7
        R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     958:	44 b8       	out	0x04, r4	; 4
        R_PORT = TriPinRH | HiPinRL;	//switch R_L for High-Pin to VCC
     95a:	45 b8       	out	0x05, r4	; 5
        adc.lp2 = W20msReadADC(TristatePin); //read voltage of assumed Gate 
     95c:	8a 81       	ldd	r24, Y+2	; 0x02
     95e:	0e 94 29 1a 	call	0x3452	; 0x3452 <W20msReadADC>
        if(adc.lp2>3911) {  //MOSFET
     962:	5f e0       	ldi	r21, 0x0F	; 15
     964:	88 34       	cpi	r24, 0x48	; 72
     966:	95 07       	cpc	r25, r21
     968:	28 f0       	brcs	.+10     	; 0x974 <CheckPins+0x11c>
           PartFound = PART_FET;	//N-Kanal-MOSFET
     96a:	83 e0       	ldi	r24, 0x03	; 3
     96c:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_N_D_MOS; //Depletion-MOSFET
     970:	84 e0       	ldi	r24, 0x04	; 4
     972:	04 c0       	rjmp	.+8      	; 0x97c <CheckPins+0x124>
        } else {  //JFET (pn-passage between Gate and Source is conducting )
           PartFound = PART_FET;	//N-Kanal-JFET
     974:	83 e0       	ldi	r24, 0x03	; 3
     976:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_N_JFET;
     97a:	86 e0       	ldi	r24, 0x06	; 6
     97c:	80 93 06 01 	sts	0x0106, r24
        lcd_data('N');
        lcd_data('J');
#endif
//      if ((PartReady == 0) || (adc.lp1 > ntrans.uBE)) 
//      there is no way to find out the right Source / Drain
        ntrans.uBE = adc.lp1;
     980:	b0 92 51 01 	sts	0x0151, r11
     984:	a0 92 50 01 	sts	0x0150, r10
        ntrans.gthvoltage = adc.lp1 - adc.tp1;	//voltage GS (Source - Gate)
     988:	c5 01       	movw	r24, r10
     98a:	8e 19       	sub	r24, r14
     98c:	9f 09       	sbc	r25, r15
     98e:	90 93 55 01 	sts	0x0155, r25
     992:	80 93 54 01 	sts	0x0154, r24
        ntrans.current = (unsigned int)(((unsigned long)adc.lp1 * 1000) / RR680MI); // Id 0.01mA
     996:	b5 01       	movw	r22, r10
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	28 ee       	ldi	r18, 0xE8	; 232
     99e:	33 e0       	ldi	r19, 0x03	; 3
     9a0:	40 e0       	ldi	r20, 0x00	; 0
     9a2:	50 e0       	ldi	r21, 0x00	; 0
     9a4:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
     9a8:	20 91 03 01 	lds	r18, 0x0103
     9ac:	30 91 04 01 	lds	r19, 0x0104
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	50 e0       	ldi	r21, 0x00	; 0
     9b4:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
     9b8:	30 93 53 01 	sts	0x0153, r19
     9bc:	20 93 52 01 	sts	0x0152, r18
        ntrans.count++;			// count as two, the inverse is identical
     9c0:	80 91 59 01 	lds	r24, 0x0159
     9c4:	8f 5f       	subi	r24, 0xFF	; 255
     9c6:	80 93 59 01 	sts	0x0159, r24
     9ca:	1e c6       	rjmp	.+3132   	; 0x1608 <CheckPins+0xdb0>
        goto saveNresult;		// save Pin numbers and exit
     }

     ADC_PORT = TXD_VAL;		// direct outputs to GND
     9cc:	88 e0       	ldi	r24, 0x08	; 8
     9ce:	88 b9       	out	0x08, r24	; 8

     //Test, if P-JFET or if self-conducting P-MOSFET
     ADC_DDR = LoADCm;		//switch Low-Pin (assumed Drain) direct to GND,
     9d0:	87 b8       	out	0x07, r8	; 7
				//R_H for Tristate-Pin (assumed Gate) is already switched to VCC
     R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     9d2:	44 b8       	out	0x04, r4	; 4
     R_PORT = TriPinRH | HiPinRL;	//High-Pin across R_L to Vcc
     9d4:	45 b8       	out	0x05, r4	; 5
     adc.hp1 = W20msReadADC(HighPin);	//measure voltage at assumed Source 
     9d6:	81 2f       	mov	r24, r17
     9d8:	0e 94 29 1a 	call	0x3452	; 0x3452 <W20msReadADC>
     9dc:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     9de:	8a 81       	ldd	r24, Y+2	; 0x02
     9e0:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
     9e4:	7c 01       	movw	r14, r24
     R_PORT = HiPinRL;			//switch R_H for Tristate-Pin (assumed Gate) to GND
     9e6:	c5 b8       	out	0x05, r12	; 5
     adc.hp2 = W20msReadADC(HighPin);	//read voltage at assumed Source again
     9e8:	81 2f       	mov	r24, r17
     9ea:	0e 94 29 1a 	call	0x3452	; 0x3452 <W20msReadADC>
     //if it is a self-conducting P_MOSFET or P-JFET , then must be:  adc.hp1 > adc.hp2 
     if(adc.hp1>(adc.hp2+488)) {
     9ee:	88 51       	subi	r24, 0x18	; 24
     9f0:	9e 4f       	sbci	r25, 0xFE	; 254
     9f2:	8a 15       	cp	r24, r10
     9f4:	9b 05       	cpc	r25, r11
     9f6:	08 f0       	brcs	.+2      	; 0x9fa <CheckPins+0x1a2>
     9f8:	3f c3       	rjmp	.+1662   	; 0x1078 <CheckPins+0x820>
        //read voltage at the Gate , to differ between MOSFET and JFET
        ADC_PORT = HiADCp;	//switch High-Pin directly to VCC
     9fa:	98 b8       	out	0x08, r9	; 8
        ADC_DDR = HiADCm;	//switch High-Pin to output
     9fc:	97 b8       	out	0x07, r9	; 7
        adc.tp2 = W20msReadADC(TristatePin); //read voltage at the assumed Gate 
     9fe:	8a 81       	ldd	r24, Y+2	; 0x02
     a00:	0e 94 29 1a 	call	0x3452	; 0x3452 <W20msReadADC>
        if(adc.tp2<977) { 		//MOSFET
     a04:	63 e0       	ldi	r22, 0x03	; 3
     a06:	81 3d       	cpi	r24, 0xD1	; 209
     a08:	96 07       	cpc	r25, r22
     a0a:	28 f4       	brcc	.+10     	; 0xa16 <CheckPins+0x1be>
           PartFound = PART_FET;	//P-Kanal-MOSFET
     a0c:	83 e0       	ldi	r24, 0x03	; 3
     a0e:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_D_MOS; //Depletion-MOSFET
     a12:	85 e0       	ldi	r24, 0x05	; 5
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <CheckPins+0x1c6>
        } else { 			//JFET (pn-passage between Gate and Source is conducting)
           PartFound = PART_FET;	//P-Kanal-JFET
     a16:	83 e0       	ldi	r24, 0x03	; 3
     a18:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_JFET;
     a1c:	87 e0       	ldi	r24, 0x07	; 7
     a1e:	80 93 06 01 	sts	0x0106, r24
        }
#if DebugOut == 5
        lcd_data('P');
        lcd_data('J');
#endif
        ptrans.gthvoltage = adc.tp1 - adc.hp1;		//voltage GS (Gate - Source)
     a22:	ea 18       	sub	r14, r10
     a24:	fb 08       	sbc	r15, r11
     a26:	f0 92 67 01 	sts	0x0167, r15
     a2a:	e0 92 66 01 	sts	0x0166, r14
        ptrans.current = (unsigned int)(((unsigned long)(ADCconfig.U_AVCC - adc.hp1) * 1000) / RR680PL); // Id 0.01mA
     a2e:	60 91 40 01 	lds	r22, 0x0140
     a32:	70 91 41 01 	lds	r23, 0x0141
     a36:	6a 19       	sub	r22, r10
     a38:	7b 09       	sbc	r23, r11
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	28 ee       	ldi	r18, 0xE8	; 232
     a40:	33 e0       	ldi	r19, 0x03	; 3
     a42:	40 e0       	ldi	r20, 0x00	; 0
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
     a4a:	20 91 08 01 	lds	r18, 0x0108
     a4e:	30 91 09 01 	lds	r19, 0x0109
     a52:	40 e0       	ldi	r20, 0x00	; 0
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
     a5a:	30 93 65 01 	sts	0x0165, r19
     a5e:	20 93 64 01 	sts	0x0164, r18
        ptrans.count++;			// count as two, the inverse is identical
     a62:	80 91 6b 01 	lds	r24, 0x016B
     a66:	8f 5f       	subi	r24, 0xFF	; 255
     a68:	80 93 6b 01 	sts	0x016B, r24
     a6c:	fb c0       	rjmp	.+502    	; 0xc64 <CheckPins+0x40c>


  //there is more than 650uA current without TristatePin current 
#ifdef COMMON_COLLECTOR
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
     a6e:	88 e0       	ldi	r24, 0x08	; 8
     a70:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;			// Collector direct to GND
     a72:	87 b8       	out	0x07, r8	; 7
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
     a74:	c5 b8       	out	0x05, r12	; 5
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
     a76:	5c 2c       	mov	r5, r12
     a78:	50 2a       	or	r5, r16
     a7a:	54 b8       	out	0x04, r5	; 4
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     a7c:	20 90 40 01 	lds	r2, 0x0140
     a80:	30 90 41 01 	lds	r3, 0x0141
     a84:	81 2f       	mov	r24, r17
     a86:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
     a8a:	7c 01       	movw	r14, r24
  adc.tp1 = ReadADC(TristatePin);	// voltage at the base resistor
     a8c:	8a 81       	ldd	r24, Y+2	; 0x02
     a8e:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
     a92:	5c 01       	movw	r10, r24

  if (adc.tp1 < 10) {
     a94:	8a 30       	cpi	r24, 0x0A	; 10
     a96:	91 05       	cpc	r25, r1
     a98:	d8 f5       	brcc	.+118    	; 0xb10 <CheckPins+0x2b8>
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
     a9a:	84 2d       	mov	r24, r4
     a9c:	8c 29       	or	r24, r12
     a9e:	84 b9       	out	0x04, r24	; 4
     adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);
     aa0:	80 91 40 01 	lds	r24, 0x0140
     aa4:	90 91 41 01 	lds	r25, 0x0141
     aa8:	9d 87       	std	Y+13, r25	; 0x0d
     aaa:	8c 87       	std	Y+12, r24	; 0x0c
     aac:	81 2f       	mov	r24, r17
     aae:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
     ab2:	ac 85       	ldd	r26, Y+12	; 0x0c
     ab4:	bd 85       	ldd	r27, Y+13	; 0x0d
     ab6:	a8 1b       	sub	r26, r24
     ab8:	b9 0b       	sbc	r27, r25
     aba:	bd 87       	std	Y+13, r27	; 0x0d
     abc:	ac 87       	std	Y+12, r26	; 0x0c
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
     abe:	8a 81       	ldd	r24, Y+2	; 0x02
     ac0:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
     ac4:	5c 01       	movw	r10, r24
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     ac6:	4c 85       	ldd	r20, Y+12	; 0x0c
     ac8:	5d 85       	ldd	r21, Y+13	; 0x0d
     aca:	9a 01       	movw	r18, r20
     acc:	40 e0       	ldi	r20, 0x00	; 0
     ace:	50 e0       	ldi	r21, 0x00	; 0
     ad0:	2b 83       	std	Y+3, r18	; 0x03
     ad2:	3c 83       	std	Y+4, r19	; 0x04
     ad4:	4d 83       	std	Y+5, r20	; 0x05
     ad6:	5e 83       	std	Y+6, r21	; 0x06
     ad8:	20 91 08 01 	lds	r18, 0x0108
     adc:	30 91 09 01 	lds	r19, 0x0109
     ae0:	40 e0       	ldi	r20, 0x00	; 0
     ae2:	50 e0       	ldi	r21, 0x00	; 0
     ae4:	60 e6       	ldi	r22, 0x60	; 96
     ae6:	77 eb       	ldi	r23, 0xB7	; 183
     ae8:	87 e4       	ldi	r24, 0x47	; 71
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
     af0:	6b 81       	ldd	r22, Y+3	; 0x03
     af2:	7c 81       	ldd	r23, Y+4	; 0x04
     af4:	8d 81       	ldd	r24, Y+5	; 0x05
     af6:	9e 81       	ldd	r25, Y+6	; 0x06
     af8:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
     afc:	95 01       	movw	r18, r10
     afe:	40 e0       	ldi	r20, 0x00	; 0
     b00:	50 e0       	ldi	r21, 0x00	; 0
  if (adc.tp1 < 10) {
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
     adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     b02:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
     b06:	2b 83       	std	Y+3, r18	; 0x03
     b08:	3c 83       	std	Y+4, r19	; 0x04
     b0a:	4d 83       	std	Y+5, r20	; 0x05
     b0c:	5e 83       	std	Y+6, r21	; 0x06
     b0e:	12 c0       	rjmp	.+36     	; 0xb34 <CheckPins+0x2dc>
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
  ADC_DDR = LoADCm;			// Collector direct to GND
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     b10:	b1 01       	movw	r22, r2
     b12:	6e 19       	sub	r22, r14
     b14:	7f 09       	sbc	r23, r15
     b16:	7d 87       	std	Y+13, r23	; 0x0d
     b18:	6c 87       	std	Y+12, r22	; 0x0c
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
 #else
     c_hfe = ((adc.hp1 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp1/500);
 #endif
  } else {
     c_hfe = (unsigned long)((adc.hp1 - adc.tp1) / adc.tp1);
     b1a:	cb 01       	movw	r24, r22
     b1c:	8a 19       	sub	r24, r10
     b1e:	9b 09       	sbc	r25, r11
     b20:	b5 01       	movw	r22, r10
     b22:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <__udivmodhi4>
     b26:	cb 01       	movw	r24, r22
     b28:	a0 e0       	ldi	r26, 0x00	; 0
     b2a:	b0 e0       	ldi	r27, 0x00	; 0
     b2c:	8b 83       	std	Y+3, r24	; 0x03
     b2e:	9c 83       	std	Y+4, r25	; 0x04
     b30:	ad 83       	std	Y+5, r26	; 0x05
     b32:	be 83       	std	Y+6, r27	; 0x06
  }
#endif

  //set Pins again for circuit with common Emitter PNP
  R_DDR = LoPinRL;		//switch R_L port for Low-Pin to output (GND)
     b34:	9f 81       	ldd	r25, Y+7	; 0x07
     b36:	94 b9       	out	0x04, r25	; 4
  R_PORT = 0;			//switch all resistor ports to GND
     b38:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = HiADCm;		//switch High-Pin to output
     b3a:	97 b8       	out	0x07, r9	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
     b3c:	98 b8       	out	0x08, r9	; 8
  wait_about5ms();
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test to PNP
     R_DDR = LoPinRL | TriPinRL;	//switch R_L port for Tristate-Pin to output (GND), for Test of PNP
     b46:	2f 80       	ldd	r2, Y+7	; 0x07
     b48:	20 2a       	or	r2, r16
     b4a:	24 b8       	out	0x04, r2	; 4
     adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin
     b4c:	89 81       	ldd	r24, Y+1	; 0x01
     b4e:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
     if(adc.lp1 > 3422) {
     b52:	ad e0       	ldi	r26, 0x0D	; 13
     b54:	8f 35       	cpi	r24, 0x5F	; 95
     b56:	9a 07       	cpc	r25, r26
     b58:	08 f4       	brcc	.+2      	; 0xb5c <CheckPins+0x304>
     b5a:	d2 c0       	rjmp	.+420    	; 0xd00 <CheckPins+0x4a8>
        //component has current => PNP-Transistor or equivalent
        //compute current amplification factor in both directions
        R_DDR = LoPinRL | TriPinRH;	//switch R_H port for Tristate-Pin (Base) to output (GND)
     b5c:	df 80       	ldd	r13, Y+7	; 0x07
     b5e:	d4 28       	or	r13, r4
     b60:	d4 b8       	out	0x04, r13	; 4

        adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin (assumed Collector)
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
     b68:	7c 01       	movw	r14, r24
        adc.tp2 = ReadADC(TristatePin);	//measure voltage at TristatePin (Base) 
     b6a:	8a 81       	ldd	r24, Y+2	; 0x02
     b6c:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
     b70:	99 87       	std	Y+9, r25	; 0x09
     b72:	88 87       	std	Y+8, r24	; 0x08
//        if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
//           PartReady = 1;
//        }

 
        if(adc.tp2 > 977) {
     b74:	b3 e0       	ldi	r27, 0x03	; 3
     b76:	82 3d       	cpi	r24, 0xD2	; 210
     b78:	9b 07       	cpc	r25, r27
     b7a:	08 f4       	brcc	.+2      	; 0xb7e <CheckPins+0x326>
     b7c:	75 c0       	rjmp	.+234    	; 0xc68 <CheckPins+0x410>
           //PNP-Transistor is found (Base voltage moves to VCC)
           PartFound = PART_TRANSISTOR;
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_PNP;
     b84:	80 93 06 01 	sts	0x0106, r24
           update_pins = 0;		// only update pins, if hFE is higher or Thyristor 
#ifdef COMMON_EMITTER
           //compute current amplification factor for circuit with common Emitter
           //e_hFE = B = Collector current / Base current
           tmp16 = adc.lp1;
           if (tmp16 > adc.lp_otr) {
     b88:	6e 14       	cp	r6, r14
     b8a:	7f 04       	cpc	r7, r15
     b8c:	10 f4       	brcc	.+4      	; 0xb92 <CheckPins+0x33a>
              tmp16 -= adc.lp_otr;
     b8e:	e6 18       	sub	r14, r6
     b90:	f7 08       	sbc	r15, r7
           }

 #ifdef LONG_HFE
           e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     b92:	67 01       	movw	r12, r14
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	20 91 03 01 	lds	r18, 0x0103
     b9c:	30 91 04 01 	lds	r19, 0x0104
     ba0:	40 e0       	ldi	r20, 0x00	; 0
     ba2:	50 e0       	ldi	r21, 0x00	; 0
     ba4:	60 e6       	ldi	r22, 0x60	; 96
     ba6:	77 eb       	ldi	r23, 0xB7	; 183
     ba8:	87 e4       	ldi	r24, 0x47	; 71
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
     bb0:	c7 01       	movw	r24, r14
     bb2:	b6 01       	movw	r22, r12
     bb4:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
     bb8:	e8 85       	ldd	r30, Y+8	; 0x08
     bba:	f9 85       	ldd	r31, Y+9	; 0x09
     bbc:	9f 01       	movw	r18, r30
     bbe:	40 e0       	ldi	r20, 0x00	; 0
     bc0:	50 e0       	ldi	r21, 0x00	; 0
           if (tmp16 > adc.lp_otr) {
              tmp16 -= adc.lp_otr;
           }

 #ifdef LONG_HFE
           e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     bc2:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
 #else
           e_hfe = ((tmp16 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
           // first hFE or e_hfe is greater than last hfe ?
           if ((ptrans.count == 0) || (e_hfe > ptrans.hfe)){
     bc6:	80 91 6b 01 	lds	r24, 0x016B
     bca:	88 23       	and	r24, r24
     bcc:	69 f0       	breq	.+26     	; 0xbe8 <CheckPins+0x390>
     bce:	80 91 5e 01 	lds	r24, 0x015E
     bd2:	90 91 5f 01 	lds	r25, 0x015F
     bd6:	a0 91 60 01 	lds	r26, 0x0160
     bda:	b0 91 61 01 	lds	r27, 0x0161
     bde:	82 17       	cp	r24, r18
     be0:	93 07       	cpc	r25, r19
     be2:	a4 07       	cpc	r26, r20
     be4:	b5 07       	cpc	r27, r21
     be6:	a8 f4       	brcc	.+42     	; 0xc12 <CheckPins+0x3ba>
              ptrans.hfe = e_hfe;				// hFE with common emitter
     be8:	20 93 5e 01 	sts	0x015E, r18
     bec:	30 93 5f 01 	sts	0x015F, r19
     bf0:	40 93 60 01 	sts	0x0160, r20
     bf4:	50 93 61 01 	sts	0x0161, r21
              ptrans.uBE = ReadADC(HighPin) - adc.tp2;	// Base Emitter Voltage
     bf8:	81 2f       	mov	r24, r17
     bfa:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
     bfe:	28 85       	ldd	r18, Y+8	; 0x08
     c00:	39 85       	ldd	r19, Y+9	; 0x09
     c02:	82 1b       	sub	r24, r18
     c04:	93 0b       	sbc	r25, r19
     c06:	90 93 63 01 	sts	0x0163, r25
     c0a:	80 93 62 01 	sts	0x0162, r24
              update_pins = 1;		// trans.ebc must be updated
     c0e:	21 e0       	ldi	r18, 0x01	; 1
     c10:	01 c0       	rjmp	.+2      	; 0xc14 <CheckPins+0x3bc>
 
        if(adc.tp2 > 977) {
           //PNP-Transistor is found (Base voltage moves to VCC)
           PartFound = PART_TRANSISTOR;
           PartMode = PART_MODE_PNP;
           update_pins = 0;		// only update pins, if hFE is higher or Thyristor 
     c12:	20 e0       	ldi	r18, 0x00	; 0
#ifdef COMMON_COLLECTOR
           //current amplification factor for common  Collector (Emitter follower)
           // c_hFE = (Emitter current - Base current) / Base current
 #ifdef COMMON_EMITTER
           // also with COMMON_EMITTER, is c_hfe greater than the last hFE?
           if (c_hfe > ptrans.hfe)  // trans.hfe is allready e_hfe or last c_hFE
     c14:	80 91 5e 01 	lds	r24, 0x015E
     c18:	90 91 5f 01 	lds	r25, 0x015F
     c1c:	a0 91 60 01 	lds	r26, 0x0160
     c20:	b0 91 61 01 	lds	r27, 0x0161
     c24:	4b 81       	ldd	r20, Y+3	; 0x03
     c26:	5c 81       	ldd	r21, Y+4	; 0x04
     c28:	6d 81       	ldd	r22, Y+5	; 0x05
     c2a:	7e 81       	ldd	r23, Y+6	; 0x06
     c2c:	84 17       	cp	r24, r20
     c2e:	95 07       	cpc	r25, r21
     c30:	a6 07       	cpc	r26, r22
     c32:	b7 07       	cpc	r27, r23
     c34:	08 f0       	brcs	.+2      	; 0xc38 <CheckPins+0x3e0>
     c36:	d8 c4       	rjmp	.+2480   	; 0x15e8 <CheckPins+0xd90>
 #else
           // without COMMON_EMITTER , c_hFE is first or greater than the old one?
           if ((ptrans.count == 0) || (c_hfe > ptrans.hfe)) 
 #endif
           {
              ptrans.hfe = c_hfe;		// c_hfe is the best
     c38:	40 93 5e 01 	sts	0x015E, r20
     c3c:	50 93 5f 01 	sts	0x015F, r21
     c40:	60 93 60 01 	sts	0x0160, r22
     c44:	70 93 61 01 	sts	0x0161, r23
              ptrans.uBE = ADCconfig.U_AVCC - adc.hp1 - adc.tp1;	// Base Emitter Voltage common collector
     c48:	80 91 40 01 	lds	r24, 0x0140
     c4c:	90 91 41 01 	lds	r25, 0x0141
     c50:	6c 85       	ldd	r22, Y+12	; 0x0c
     c52:	7d 85       	ldd	r23, Y+13	; 0x0d
     c54:	86 1b       	sub	r24, r22
     c56:	97 0b       	sbc	r25, r23
     c58:	8a 19       	sub	r24, r10
     c5a:	9b 09       	sbc	r25, r11
     c5c:	90 93 63 01 	sts	0x0163, r25
     c60:	80 93 62 01 	sts	0x0162, r24
              update_pins = 1;		// trans.ebc must be updated
     c64:	21 e0       	ldi	r18, 0x01	; 1
     c66:	c0 c4       	rjmp	.+2432   	; 0x15e8 <CheckPins+0xd90>
           }
#endif
           goto savePresult;		// marke P type, save Pins and exit
        }
        // is probably a P-E-MOS, check voltage
        if((adc.lp_otr < 97) && (adc.lp1 > 2000)) {
     c68:	71 e6       	ldi	r23, 0x61	; 97
     c6a:	67 16       	cp	r6, r23
     c6c:	71 04       	cpc	r7, r1
     c6e:	08 f0       	brcs	.+2      	; 0xc72 <CheckPins+0x41a>
     c70:	47 c0       	rjmp	.+142    	; 0xd00 <CheckPins+0x4a8>
     c72:	81 ed       	ldi	r24, 0xD1	; 209
     c74:	e8 16       	cp	r14, r24
     c76:	87 e0       	ldi	r24, 0x07	; 7
     c78:	f8 06       	cpc	r15, r24
     c7a:	08 f4       	brcc	.+2      	; 0xc7e <CheckPins+0x426>
     c7c:	41 c0       	rjmp	.+130    	; 0xd00 <CheckPins+0x4a8>
           //is flow voltage low enough in the closed  state?
           //(since D-Mode-FET would be by mistake detected as E-Mode )
           PartFound = PART_FET;		//P-Kanal-MOSFET is found (Basis/Gate moves not to VCC)
     c7e:	83 e0       	ldi	r24, 0x03	; 3
     c80:	80 93 07 01 	sts	0x0107, r24
           PartMode = PART_MODE_P_E_MOS;
     c84:	80 93 06 01 	sts	0x0106, r24
       	   //measure the Gate threshold voltage
           //Switching of Drain is monitored with digital input
           // Low level is specified up to 0.3 * VCC
           // High level is specified above 0.6 * VCC
           PinMSK = LoADCm & 7;
     c88:	97 e0       	ldi	r25, 0x07	; 7
     c8a:	89 22       	and	r8, r25
       	   ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
     c8c:	8a 81       	ldd	r24, Y+2	; 0x02
     c8e:	80 64       	ori	r24, 0x40	; 64
     c90:	80 93 7c 00 	sts	0x007C, r24
     c94:	8b e0       	ldi	r24, 0x0B	; 11
     c96:	c8 2e       	mov	r12, r24
       	   tmp16 = 1;			// round up ((1*4)/9)
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
       	      while (!(ADC_PIN&PinMSK));		// Wait, until the MOSFET switches and Drain moves to VCC
                  			// 1 is detected with more than 2.5V (up to 2.57V) with tests of mega168 and mega328
       	      R_DDR = LoPinRL;
       	      ADCSRA |= (1<<ADSC);		// Start Conversion
       	      while (ADCSRA&(1<<ADSC));		// wait
      	      tmp16 += (1023 - ADCW);	// Add Tristatepin-Voltage
     c9c:	bf ef       	ldi	r27, 0xFF	; 255
     c9e:	eb 2e       	mov	r14, r27
     ca0:	b3 e0       	ldi	r27, 0x03	; 3
     ca2:	fb 2e       	mov	r15, r27
     ca4:	5c 01       	movw	r10, r24
           // High level is specified above 0.6 * VCC
           PinMSK = LoADCm & 7;
       	   ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
       	   tmp16 = 1;			// round up ((1*4)/9)
       	   for(ii=0;ii<11;ii++) {
       	      wdt_reset();
     ca6:	a8 95       	wdr
       	      ChargePin10ms(TriPinRL,1);
     ca8:	80 2f       	mov	r24, r16
     caa:	61 e0       	ldi	r22, 0x01	; 1
     cac:	0e 94 11 04 	call	0x822	; 0x822 <ChargePin10ms>
                R_DDR = LoPinRL | TriPinRH;		//switch R_H for Tristate-Pin (Basis) to GND
     cb0:	d4 b8       	out	0x04, r13	; 4
       	      while (!(ADC_PIN&PinMSK));		// Wait, until the MOSFET switches and Drain moves to VCC
     cb2:	86 b1       	in	r24, 0x06	; 6
     cb4:	88 21       	and	r24, r8
     cb6:	e9 f3       	breq	.-6      	; 0xcb2 <CheckPins+0x45a>
                  			// 1 is detected with more than 2.5V (up to 2.57V) with tests of mega168 and mega328
       	      R_DDR = LoPinRL;
     cb8:	af 81       	ldd	r26, Y+7	; 0x07
     cba:	a4 b9       	out	0x04, r26	; 4
       	      ADCSRA |= (1<<ADSC);		// Start Conversion
     cbc:	80 91 7a 00 	lds	r24, 0x007A
     cc0:	80 64       	ori	r24, 0x40	; 64
     cc2:	80 93 7a 00 	sts	0x007A, r24
       	      while (ADCSRA&(1<<ADSC));		// wait
     cc6:	80 91 7a 00 	lds	r24, 0x007A
     cca:	86 fd       	sbrc	r24, 6
     ccc:	fc cf       	rjmp	.-8      	; 0xcc6 <CheckPins+0x46e>
      	      tmp16 += (1023 - ADCW);	// Add Tristatepin-Voltage
     cce:	20 91 78 00 	lds	r18, 0x0078
     cd2:	30 91 79 00 	lds	r19, 0x0079
     cd6:	f7 01       	movw	r30, r14
     cd8:	e2 1b       	sub	r30, r18
     cda:	f3 0b       	sbc	r31, r19
     cdc:	ae 0e       	add	r10, r30
     cde:	bf 1e       	adc	r11, r31
     ce0:	ca 94       	dec	r12
           // Low level is specified up to 0.3 * VCC
           // High level is specified above 0.6 * VCC
           PinMSK = LoADCm & 7;
       	   ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
       	   tmp16 = 1;			// round up ((1*4)/9)
       	   for(ii=0;ii<11;ii++) {
     ce2:	09 f7       	brne	.-62     	; 0xca6 <CheckPins+0x44e>
     ce4:	c5 01       	movw	r24, r10
       	      R_DDR = LoPinRL;
       	      ADCSRA |= (1<<ADSC);		// Start Conversion
       	      while (ADCSRA&(1<<ADSC));		// wait
      	      tmp16 += (1023 - ADCW);	// Add Tristatepin-Voltage
           }
           tmp16 *= 4;		// is equal to 44*ADCW
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	88 0f       	add	r24, r24
     cec:	99 1f       	adc	r25, r25
           ptrans.gthvoltage = tmp16 / 9;		// gives resolution in mV
     cee:	69 e0       	ldi	r22, 0x09	; 9
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <__udivmodhi4>
     cf6:	70 93 67 01 	sts	0x0167, r23
     cfa:	60 93 66 01 	sts	0x0166, r22
     cfe:	b1 ce       	rjmp	.-670    	; 0xa62 <CheckPins+0x20a>
        }
    } // end component has current => PNP

#ifdef COMMON_COLLECTOR
    // Low-Pin=RL- HighPin=VCC
    R_DDR = LoPinRL | TriPinRL;
     d00:	24 b8       	out	0x04, r2	; 4
    R_PORT = TriPinRL;			// TriPin=RL+  NPN with common Collector
     d02:	05 b9       	out	0x05, r16	; 5
    adc.lp1 = W5msReadADC(LowPin);	// voltage at Emitter resistor
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
     d0a:	9c 83       	std	Y+4, r25	; 0x04
     d0c:	8b 83       	std	Y+3, r24	; 0x03
    adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     d0e:	a0 90 40 01 	lds	r10, 0x0140
     d12:	b0 90 41 01 	lds	r11, 0x0141
     d16:	8a 81       	ldd	r24, Y+2	; 0x02
     d18:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
     d1c:	a8 1a       	sub	r10, r24
     d1e:	b9 0a       	sbc	r11, r25
    if (adc.tp1 < 10) {
     d20:	fa e0       	ldi	r31, 0x0A	; 10
     d22:	af 16       	cp	r10, r31
     d24:	b1 04       	cpc	r11, r1
     d26:	b8 f5       	brcc	.+110    	; 0xd96 <CheckPins+0x53e>
       R_DDR = LoPinRL | TriPinRH;
     d28:	8f 81       	ldd	r24, Y+7	; 0x07
     d2a:	84 29       	or	r24, r4
     d2c:	84 b9       	out	0x04, r24	; 4
       R_PORT = TriPinRH;		// Tripin=RH+
     d2e:	45 b8       	out	0x05, r4	; 5
       adc.lp1 = W5msReadADC(LowPin);
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
     d36:	9c 83       	std	Y+4, r25	; 0x04
     d38:	8b 83       	std	Y+3, r24	; 0x03
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     d3a:	a0 90 40 01 	lds	r10, 0x0140
     d3e:	b0 90 41 01 	lds	r11, 0x0141
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
     d48:	a8 1a       	sub	r10, r24
     d4a:	b9 0a       	sbc	r11, r25
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     d4c:	4b 81       	ldd	r20, Y+3	; 0x03
     d4e:	5c 81       	ldd	r21, Y+4	; 0x04
     d50:	9a 01       	movw	r18, r20
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	50 e0       	ldi	r21, 0x00	; 0
     d56:	28 87       	std	Y+8, r18	; 0x08
     d58:	39 87       	std	Y+9, r19	; 0x09
     d5a:	4a 87       	std	Y+10, r20	; 0x0a
     d5c:	5b 87       	std	Y+11, r21	; 0x0b
     d5e:	20 91 03 01 	lds	r18, 0x0103
     d62:	30 91 04 01 	lds	r19, 0x0104
     d66:	40 e0       	ldi	r20, 0x00	; 0
     d68:	50 e0       	ldi	r21, 0x00	; 0
     d6a:	60 e6       	ldi	r22, 0x60	; 96
     d6c:	77 eb       	ldi	r23, 0xB7	; 183
     d6e:	87 e4       	ldi	r24, 0x47	; 71
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
     d76:	68 85       	ldd	r22, Y+8	; 0x08
     d78:	79 85       	ldd	r23, Y+9	; 0x09
     d7a:	8a 85       	ldd	r24, Y+10	; 0x0a
     d7c:	9b 85       	ldd	r25, Y+11	; 0x0b
     d7e:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
     d82:	95 01       	movw	r18, r10
     d84:	40 e0       	ldi	r20, 0x00	; 0
     d86:	50 e0       	ldi	r21, 0x00	; 0
       R_DDR = LoPinRL | TriPinRH;
       R_PORT = TriPinRH;		// Tripin=RH+
       adc.lp1 = W5msReadADC(LowPin);
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     d88:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
     d8c:	28 87       	std	Y+8, r18	; 0x08
     d8e:	39 87       	std	Y+9, r19	; 0x09
     d90:	4a 87       	std	Y+10, r20	; 0x0a
     d92:	5b 87       	std	Y+11, r21	; 0x0b
     d94:	0e c0       	rjmp	.+28     	; 0xdb2 <CheckPins+0x55a>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
 #else
       c_hfe = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
    } else {
       c_hfe = (adc.lp1 - adc.tp1) / adc.tp1;
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	9c 81       	ldd	r25, Y+4	; 0x04
     d9a:	8a 19       	sub	r24, r10
     d9c:	9b 09       	sbc	r25, r11
     d9e:	b5 01       	movw	r22, r10
     da0:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <__udivmodhi4>
     da4:	cb 01       	movw	r24, r22
     da6:	a0 e0       	ldi	r26, 0x00	; 0
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	88 87       	std	Y+8, r24	; 0x08
     dac:	99 87       	std	Y+9, r25	; 0x09
     dae:	aa 87       	std	Y+10, r26	; 0x0a
     db0:	bb 87       	std	Y+11, r27	; 0x0b
       lcd_string(utoa(adc.tp1,outval,10));
       wait_about1s();
 #endif
#endif
    //Tristate (can be Base) to VCC, Test if NPN
    ADC_DDR = LoADCm;		//Low-Pin to output 0V
     db2:	87 b8       	out	0x07, r8	; 7
    ADC_PORT = TXD_VAL;			//switch Low-Pin to GND
     db4:	88 e0       	ldi	r24, 0x08	; 8
     db6:	88 b9       	out	0x08, r24	; 8
    R_DDR = TriPinRL | HiPinRL;		//RL port for High-Pin and Tristate-Pin to output
     db8:	54 b8       	out	0x04, r5	; 4
    R_PORT = TriPinRL | HiPinRL;	//RL port for High-Pin and Tristate-Pin to Vcc
     dba:	55 b8       	out	0x05, r5	; 5
    adc.hp1 = W5msReadADC(HighPin);	//measure voltage at High-Pin  (Collector)
     dbc:	81 2f       	mov	r24, r17
     dbe:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
     dc2:	9f 87       	std	Y+15, r25	; 0x0f
     dc4:	8e 87       	std	Y+14, r24	; 0x0e
#ifdef WITH_THYRISTOR_GATE_V
    adc.tp2 = ReadADC(TristatePin);	//voltage of gate
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
     dcc:	9d 87       	std	Y+13, r25	; 0x0d
     dce:	8c 87       	std	Y+12, r24	; 0x0c
    adc.lp2 = ReadADC(LowPin);		//voltage of Cathode
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
     dd6:	7c 01       	movw	r14, r24
#endif
    if(adc.hp1 < 1600) {
     dd8:	ae 85       	ldd	r26, Y+14	; 0x0e
     dda:	bf 85       	ldd	r27, Y+15	; 0x0f
     ddc:	e6 e0       	ldi	r30, 0x06	; 6
     dde:	a0 34       	cpi	r26, 0x40	; 64
     de0:	be 07       	cpc	r27, r30
     de2:	08 f0       	brcs	.+2      	; 0xde6 <CheckPins+0x58e>
     de4:	46 c1       	rjmp	.+652    	; 0x1072 <CheckPins+0x81a>
       //component has current => NPN-Transistor or somthing else

       //Test auf Thyristor:
       //Gate discharge
       ChargePin10ms(TriPinRL,0);	//Tristate-Pin (Gate) across R_L 10ms to GND
     de6:	80 2f       	mov	r24, r16
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	0e 94 11 04 	call	0x822	; 0x822 <ChargePin10ms>
       adc.hp3 = W5msReadADC(HighPin);	//read voltage at High-Pin (probably Anode) again
     dee:	81 2f       	mov	r24, r17
     df0:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
     df4:	1c 01       	movw	r2, r24
					//current should still flow, if not,
					// no Thyristor or holding current to low 
		 	
       R_PORT = 0;			//switch R_L for High-Pin (probably Anode) to GND (turn off)
     df6:	15 b8       	out	0x05, r1	; 5
       wait_about5ms();
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>
       R_PORT = HiPinRL;		//switch R_L for High-Pin (probably Anode) again to VCC
     e00:	c5 b8       	out	0x05, r12	; 5
       adc.hp2 = W5msReadADC(HighPin);	//measure voltage at the High-Pin (probably Anode) again
     e02:	81 2f       	mov	r24, r17
     e04:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
       if((adc.hp3 < 1600) && (adc.hp2 > 4400)) {
     e08:	f0 e4       	ldi	r31, 0x40	; 64
     e0a:	2f 16       	cp	r2, r31
     e0c:	f6 e0       	ldi	r31, 0x06	; 6
     e0e:	3f 06       	cpc	r3, r31
     e10:	08 f0       	brcs	.+2      	; 0xe14 <CheckPins+0x5bc>
     e12:	52 c0       	rjmp	.+164    	; 0xeb8 <CheckPins+0x660>
     e14:	21 e1       	ldi	r18, 0x11	; 17
     e16:	81 33       	cpi	r24, 0x31	; 49
     e18:	92 07       	cpc	r25, r18
     e1a:	08 f4       	brcc	.+2      	; 0xe1e <CheckPins+0x5c6>
     e1c:	4d c0       	rjmp	.+154    	; 0xeb8 <CheckPins+0x660>
          //if the holding current was switched off the thyristor must be switched off too. 
          //if Thyristor was still swiched on, if gate was switched off => Thyristor
          PartFound = PART_THYRISTOR;
     e1e:	85 e0       	ldi	r24, 0x05	; 5
     e20:	80 93 07 01 	sts	0x0107, r24
#ifdef WITH_THYRISTOR_GATE_V
          ntrans.uBE = adc.tp2 - adc.lp2;	// Gate - Cathode Voltage 
     e24:	8c 85       	ldd	r24, Y+12	; 0x0c
     e26:	9d 85       	ldd	r25, Y+13	; 0x0d
     e28:	8e 19       	sub	r24, r14
     e2a:	9f 09       	sbc	r25, r15
     e2c:	90 93 51 01 	sts	0x0151, r25
     e30:	80 93 50 01 	sts	0x0150, r24
          ntrans.gthvoltage = adc.hp1 - adc.lp2;	// Anode-Cathode Voltage
     e34:	8e 85       	ldd	r24, Y+14	; 0x0e
     e36:	9f 85       	ldd	r25, Y+15	; 0x0f
     e38:	8e 19       	sub	r24, r14
     e3a:	9f 09       	sbc	r25, r15
     e3c:	90 93 55 01 	sts	0x0155, r25
     e40:	80 93 54 01 	sts	0x0154, r24
#endif
          //Test if Triac
          R_DDR = 0;
     e44:	14 b8       	out	0x04, r1	; 4
          R_PORT = 0;
     e46:	15 b8       	out	0x05, r1	; 5
          ADC_PORT = LoADCp;	//Low-Pin fix to VCC
     e48:	88 b8       	out	0x08, r8	; 8
          wait_about5ms();
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>
          R_DDR = HiPinRL;		//switch R_L port HighPin to output (GND)
     e52:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) > 244) {
     e54:	81 2f       	mov	r24, r17
     e56:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
     e5a:	85 3f       	cpi	r24, 0xF5	; 245
     e5c:	91 05       	cpc	r25, r1
     e5e:	08 f0       	brcs	.+2      	; 0xe62 <CheckPins+0x60a>
     e60:	d3 c3       	rjmp	.+1958   	; 0x1608 <CheckPins+0xdb0>
             goto saveNresult;		//measure voltage at the  High-Pin (probably A2); if too high:
                                	//component has current => kein Triac
          }
          R_DDR = HiPinRL | TriPinRL;	//switch R_L port for TristatePin (Gate) to output (GND) => Triac should be triggered 
     e62:	54 b8       	out	0x04, r5	; 4
          if(W5msReadADC(TristatePin) < 977) {
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
     e6a:	33 e0       	ldi	r19, 0x03	; 3
     e6c:	81 3d       	cpi	r24, 0xD1	; 209
     e6e:	93 07       	cpc	r25, r19
     e70:	08 f4       	brcc	.+2      	; 0xe74 <CheckPins+0x61c>
     e72:	ca c3       	rjmp	.+1940   	; 0x1608 <CheckPins+0xdb0>
             goto saveNresult; 		//measure voltage at the Tristate-Pin (probably Gate) ;
                              		// if to low, abort 
          }
          if(ReadADC(HighPin) < 733) {
     e74:	81 2f       	mov	r24, r17
     e76:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
     e7a:	42 e0       	ldi	r20, 0x02	; 2
     e7c:	8d 3d       	cpi	r24, 0xDD	; 221
     e7e:	94 07       	cpc	r25, r20
     e80:	08 f4       	brcc	.+2      	; 0xe84 <CheckPins+0x62c>
     e82:	c2 c3       	rjmp	.+1924   	; 0x1608 <CheckPins+0xdb0>
             goto saveNresult; 		//component has no current => no Triac => abort
          }
          R_DDR = HiPinRL;		//TristatePin (Gate) to input 
     e84:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) < 733) {
     e86:	81 2f       	mov	r24, r17
     e88:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
     e8c:	52 e0       	ldi	r21, 0x02	; 2
     e8e:	8d 3d       	cpi	r24, 0xDD	; 221
     e90:	95 07       	cpc	r25, r21
     e92:	08 f4       	brcc	.+2      	; 0xe96 <CheckPins+0x63e>
     e94:	b9 c3       	rjmp	.+1906   	; 0x1608 <CheckPins+0xdb0>
             goto saveNresult; 		//component has no current without base current => no Triac => abort
          }
          R_PORT = HiPinRL;		//switch R_L port for HighPin to VCC => switch off holding current 
     e96:	c5 b8       	out	0x05, r12	; 5
          wait_about5ms();
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>
          R_PORT = 0;			//switch R_L port for HighPin again to GND; Triac should now switched off
     ea0:	15 b8       	out	0x05, r1	; 5
          if(W5msReadADC(HighPin) > 244) {
     ea2:	81 2f       	mov	r24, r17
     ea4:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
     ea8:	85 3f       	cpi	r24, 0xF5	; 245
     eaa:	91 05       	cpc	r25, r1
     eac:	08 f0       	brcs	.+2      	; 0xeb0 <CheckPins+0x658>
     eae:	ac c3       	rjmp	.+1880   	; 0x1608 <CheckPins+0xdb0>
             goto saveNresult;		//measure voltage at the High-Pin (probably A2) ;
                                	//if to high, component is not switched off => no Triac, abort
         }
         PartFound = PART_TRIAC;
     eb0:	84 e0       	ldi	r24, 0x04	; 4
     eb2:	80 93 07 01 	sts	0x0107, r24
     eb6:	84 cd       	rjmp	.-1272   	; 0x9c0 <CheckPins+0x168>
         ntrans.count++;		// mark as two N-type transistors
         goto saveNresult;
        }
      //Test if NPN Transistor or MOSFET
      // ADC_DDR = LoADCm;	//Low-Pin to output 0V
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
     eb8:	d4 2c       	mov	r13, r4
     eba:	dc 28       	or	r13, r12
     ebc:	d4 b8       	out	0x04, r13	; 4
      R_PORT = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to VCC
     ebe:	d5 b8       	out	0x05, r13	; 5
      wait_about50ms();
     ec0:	8a e0       	ldi	r24, 0x0A	; 10
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>
      adc.hp2 = ADCconfig.U_AVCC - ReadADC(HighPin);	//measure the voltage at the collector resistor 
     ec8:	20 90 40 01 	lds	r2, 0x0140
     ecc:	30 90 41 01 	lds	r3, 0x0141
     ed0:	81 2f       	mov	r24, r17
     ed2:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
     ed6:	28 1a       	sub	r2, r24
     ed8:	39 0a       	sbc	r3, r25
      adc.tp2 = ADCconfig.U_AVCC - ReadADC(TristatePin);	//measure the voltage at the base resistor 
     eda:	e0 90 40 01 	lds	r14, 0x0140
     ede:	f0 90 41 01 	lds	r15, 0x0141
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
     ee8:	27 01       	movw	r4, r14
     eea:	48 1a       	sub	r4, r24
     eec:	59 0a       	sbc	r5, r25
#endif
//      if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
//         PartReady = 1;	//check, if test is already done once
//      }

      if(adc.tp2 > 2557) {		// Basis-voltage R_H is low enough
     eee:	6e ef       	ldi	r22, 0xFE	; 254
     ef0:	46 16       	cp	r4, r22
     ef2:	69 e0       	ldi	r22, 0x09	; 9
     ef4:	56 06       	cpc	r5, r22
     ef6:	08 f4       	brcc	.+2      	; 0xefa <CheckPins+0x6a2>
     ef8:	77 c0       	rjmp	.+238    	; 0xfe8 <CheckPins+0x790>
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
     efa:	82 e0       	ldi	r24, 0x02	; 2
     efc:	80 93 07 01 	sts	0x0107, r24
         PartMode = PART_MODE_NPN;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	80 93 06 01 	sts	0x0106, r24
 #ifdef COMMON_EMITTER

         //compute current amplification factor for common Emitter
         //hFE = B = Collector current / Base current
         tmp16 = adc.hp2;
         if (tmp16 > adc.lp_otr) {
     f06:	62 14       	cp	r6, r2
     f08:	73 04       	cpc	r7, r3
     f0a:	10 f4       	brcc	.+4      	; 0xf10 <CheckPins+0x6b8>
            tmp16 -= adc.lp_otr;
     f0c:	26 18       	sub	r2, r6
     f0e:	37 08       	sbc	r3, r7
         }

  #ifdef LONG_HFE
         e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     f10:	61 01       	movw	r12, r2
     f12:	ee 24       	eor	r14, r14
     f14:	ff 24       	eor	r15, r15
     f16:	20 91 08 01 	lds	r18, 0x0108
     f1a:	30 91 09 01 	lds	r19, 0x0109
     f1e:	40 e0       	ldi	r20, 0x00	; 0
     f20:	50 e0       	ldi	r21, 0x00	; 0
     f22:	60 e6       	ldi	r22, 0x60	; 96
     f24:	77 eb       	ldi	r23, 0xB7	; 183
     f26:	87 e4       	ldi	r24, 0x47	; 71
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
     f2e:	c7 01       	movw	r24, r14
     f30:	b6 01       	movw	r22, r12
     f32:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp2;	
     f36:	92 01       	movw	r18, r4
     f38:	40 e0       	ldi	r20, 0x00	; 0
     f3a:	50 e0       	ldi	r21, 0x00	; 0
         if (tmp16 > adc.lp_otr) {
            tmp16 -= adc.lp_otr;
         }

  #ifdef LONG_HFE
         e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     f3c:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp2;	
  #else
         e_hfe = ((tmp16 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
  #endif
         if ((ntrans.count == 0) || (e_hfe > ntrans.hfe)){
     f40:	80 91 59 01 	lds	r24, 0x0159
     f44:	88 23       	and	r24, r24
     f46:	69 f0       	breq	.+26     	; 0xf62 <CheckPins+0x70a>
     f48:	80 91 4c 01 	lds	r24, 0x014C
     f4c:	90 91 4d 01 	lds	r25, 0x014D
     f50:	a0 91 4e 01 	lds	r26, 0x014E
     f54:	b0 91 4f 01 	lds	r27, 0x014F
     f58:	82 17       	cp	r24, r18
     f5a:	93 07       	cpc	r25, r19
     f5c:	a4 07       	cpc	r26, r20
     f5e:	b5 07       	cpc	r27, r21
     f60:	c8 f4       	brcc	.+50     	; 0xf94 <CheckPins+0x73c>
            ntrans.hfe = e_hfe;
     f62:	20 93 4c 01 	sts	0x014C, r18
     f66:	30 93 4d 01 	sts	0x014D, r19
     f6a:	40 93 4e 01 	sts	0x014E, r20
     f6e:	50 93 4f 01 	sts	0x014F, r21
            ntrans.uBE = ADCconfig.U_AVCC - adc.tp2 - ReadADC(LowPin);
     f72:	e0 90 40 01 	lds	r14, 0x0140
     f76:	f0 90 41 01 	lds	r15, 0x0141
     f7a:	e4 18       	sub	r14, r4
     f7c:	f5 08       	sbc	r15, r5
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
     f84:	e8 1a       	sub	r14, r24
     f86:	f9 0a       	sbc	r15, r25
     f88:	f0 92 51 01 	sts	0x0151, r15
     f8c:	e0 92 50 01 	sts	0x0150, r14
            update_pins = 1;
     f90:	21 e0       	ldi	r18, 0x01	; 1
     f92:	01 c0       	rjmp	.+2      	; 0xf96 <CheckPins+0x73e>
//      }

      if(adc.tp2 > 2557) {		// Basis-voltage R_H is low enough
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
         PartMode = PART_MODE_NPN;
         update_pins = 0;		// only update pins, if better hFE
     f94:	20 e0       	ldi	r18, 0x00	; 0
 #endif
#ifdef COMMON_COLLECTOR
          //compare current amplification factor for common Collector (Emitter follower)
          // hFE = (Emitterstrom - Basisstrom) / Basisstrom
 #ifdef COMMON_EMITTER
          if (c_hfe >  ntrans.hfe)
     f96:	80 91 4c 01 	lds	r24, 0x014C
     f9a:	90 91 4d 01 	lds	r25, 0x014D
     f9e:	a0 91 4e 01 	lds	r26, 0x014E
     fa2:	b0 91 4f 01 	lds	r27, 0x014F
     fa6:	48 85       	ldd	r20, Y+8	; 0x08
     fa8:	59 85       	ldd	r21, Y+9	; 0x09
     faa:	6a 85       	ldd	r22, Y+10	; 0x0a
     fac:	7b 85       	ldd	r23, Y+11	; 0x0b
     fae:	84 17       	cp	r24, r20
     fb0:	95 07       	cpc	r25, r21
     fb2:	a6 07       	cpc	r26, r22
     fb4:	b7 07       	cpc	r27, r23
     fb6:	08 f0       	brcs	.+2      	; 0xfba <CheckPins+0x762>
     fb8:	28 c3       	rjmp	.+1616   	; 0x160a <CheckPins+0xdb2>
 #else
          if ((ntrans.count == 0) || (c_hfe >  ntrans.hfe))
 #endif
          {
            ntrans.hfe = c_hfe;
     fba:	40 93 4c 01 	sts	0x014C, r20
     fbe:	50 93 4d 01 	sts	0x014D, r21
     fc2:	60 93 4e 01 	sts	0x014E, r22
     fc6:	70 93 4f 01 	sts	0x014F, r23
            ntrans.uBE = ADCconfig.U_AVCC - adc.lp1 - adc.tp1;
     fca:	80 91 40 01 	lds	r24, 0x0140
     fce:	90 91 41 01 	lds	r25, 0x0141
     fd2:	6b 81       	ldd	r22, Y+3	; 0x03
     fd4:	7c 81       	ldd	r23, Y+4	; 0x04
     fd6:	86 1b       	sub	r24, r22
     fd8:	97 0b       	sbc	r25, r23
     fda:	8a 19       	sub	r24, r10
     fdc:	9b 09       	sbc	r25, r11
     fde:	90 93 51 01 	sts	0x0151, r25
     fe2:	80 93 50 01 	sts	0x0150, r24
     fe6:	10 c3       	rjmp	.+1568   	; 0x1608 <CheckPins+0xdb0>
          }
#endif
         goto saveNresult;		// count the found N-Type and exit
      } 
      // Base has low current
      if((adc.lp_otr < 97) && (adc.hp2 > 3400)) {
     fe8:	71 e6       	ldi	r23, 0x61	; 97
     fea:	67 16       	cp	r6, r23
     fec:	71 04       	cpc	r7, r1
     fee:	08 f0       	brcs	.+2      	; 0xff2 <CheckPins+0x79a>
     ff0:	40 c0       	rjmp	.+128    	; 0x1072 <CheckPins+0x81a>
     ff2:	89 e4       	ldi	r24, 0x49	; 73
     ff4:	28 16       	cp	r2, r24
     ff6:	8d e0       	ldi	r24, 0x0D	; 13
     ff8:	38 06       	cpc	r3, r24
     ffa:	d8 f1       	brcs	.+118    	; 0x1072 <CheckPins+0x81a>
         //if flow voltage in switched off mode low enough?
         //(since D-Mode-FET will be detected in error as E-Mode )
         PartFound = PART_FET;	//N-Kanal-MOSFET is found (Basis/Gate will Not be pulled down)
     ffc:	83 e0       	ldi	r24, 0x03	; 3
     ffe:	80 93 07 01 	sts	0x0107, r24
         PartMode = PART_MODE_N_E_MOS;
    1002:	82 e0       	ldi	r24, 0x02	; 2
    1004:	80 93 06 01 	sts	0x0106, r24
         wait_about1s();
#endif
         //Switching of Drain is monitored with digital input
         // Low level is specified up to 0.3 * VCC
         // High level is specified above 0.6 * VCC
         PinMSK = HiADCm & 7;
    1008:	97 e0       	ldi	r25, 0x07	; 7
    100a:	99 22       	and	r9, r25
         // measure Threshold voltage of Gate
         ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	80 64       	ori	r24, 0x40	; 64
    1010:	80 93 7c 00 	sts	0x007C, r24
    1014:	fb e0       	ldi	r31, 0x0B	; 11
    1016:	ef 2e       	mov	r14, r31
         tmp16 = 1;			// round up ((1*4)/9)
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	5c 01       	movw	r10, r24
         for(ii=0;ii<11;ii++) {
            wdt_reset();
    101e:	a8 95       	wdr
            ChargePin10ms(TriPinRL,0);	// discharge Gate 10ms with RL 
    1020:	80 2f       	mov	r24, r16
    1022:	60 e0       	ldi	r22, 0x00	; 0
    1024:	0e 94 11 04 	call	0x822	; 0x822 <ChargePin10ms>
            R_DDR = HiPinRL | TriPinRH;	// slowly charge Gate 
    1028:	d4 b8       	out	0x04, r13	; 4
            R_PORT = HiPinRL | TriPinRH;
    102a:	d5 b8       	out	0x05, r13	; 5
            while ((ADC_PIN&PinMSK));	// Wait, until the MOSFET switch and Drain moved to low 
    102c:	86 b1       	in	r24, 0x06	; 6
    102e:	89 21       	and	r24, r9
    1030:	e9 f7       	brne	.-6      	; 0x102c <CheckPins+0x7d4>
             		// 0 is detected with input voltage of 2.12V to 2.24V (tested with mega168 & mega328)
            R_DDR = HiPinRL;		// switch off current
    1032:	c4 b8       	out	0x04, r12	; 4
            ADCSRA |= (1<<ADSC);		// start ADC conversion
    1034:	80 91 7a 00 	lds	r24, 0x007A
    1038:	80 64       	ori	r24, 0x40	; 64
    103a:	80 93 7a 00 	sts	0x007A, r24
            while (ADCSRA&(1<<ADSC));	// wait until ADC finished
    103e:	80 91 7a 00 	lds	r24, 0x007A
    1042:	86 fd       	sbrc	r24, 6
    1044:	fc cf       	rjmp	.-8      	; 0x103e <CheckPins+0x7e6>
            tmp16 += ADCW;		// add result of ADC
    1046:	20 91 78 00 	lds	r18, 0x0078
    104a:	30 91 79 00 	lds	r19, 0x0079
    104e:	a2 0e       	add	r10, r18
    1050:	b3 1e       	adc	r11, r19
    1052:	ea 94       	dec	r14
         // High level is specified above 0.6 * VCC
         PinMSK = HiADCm & 7;
         // measure Threshold voltage of Gate
         ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
         tmp16 = 1;			// round up ((1*4)/9)
         for(ii=0;ii<11;ii++) {
    1054:	21 f7       	brne	.-56     	; 0x101e <CheckPins+0x7c6>
    1056:	c5 01       	movw	r24, r10
            R_DDR = HiPinRL;		// switch off current
            ADCSRA |= (1<<ADSC);		// start ADC conversion
            while (ADCSRA&(1<<ADSC));	// wait until ADC finished
            tmp16 += ADCW;		// add result of ADC
         }
         tmp16 *= 4;	//is equal to 44 * ADCW
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
         ntrans.gthvoltage = tmp16/ 9;	//scale to mV
    1060:	69 e0       	ldi	r22, 0x09	; 9
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <__udivmodhi4>
    1068:	70 93 55 01 	sts	0x0155, r23
    106c:	60 93 54 01 	sts	0x0154, r22
    1070:	a7 cc       	rjmp	.-1714   	; 0x9c0 <CheckPins+0x168>
         ntrans.count++;		// count FET as two to accelerate  searching
         goto saveNresult;
      }
   } // end component conduct => npn
   ADC_DDR = TXD_MSK;		// switch all ADC-Ports to input
    1072:	88 e0       	ldi	r24, 0x08	; 8
    1074:	87 b9       	out	0x07, r24	; 7
   ADC_PORT = TXD_VAL;		// switch all ADC-Ports to 0 (no Pull up)
    1076:	88 b9       	out	0x08, r24	; 8
  LoPinRL = pgm_read_byte(&PinRLtab[LowPin]);		// instruction for LowPin R_L
  LoPinRH = LoPinRL + LoPinRL;				// instruction for LowPin R_H
  TriPinRL = pgm_read_byte(&PinRLtab[TristatePin]);	// instruction for TristatePin R_L
  TriPinRH = TriPinRL + TriPinRL;			// instruction for TristatePin R_H
  HiPinRL = pgm_read_byte(&PinRLtab[HighPin]);		// instruction for HighPin R_L
  HiPinRH = HiPinRL + HiPinRL;				// instruction for HighPin R_H
    1078:	dc 2c       	mov	r13, r12
    107a:	dd 0c       	add	r13, r13
  }
//##########################################################################################
// Search for diodes
//##########################################################################################
checkDiode:
  R_DDR = 0;			//switch off resistor current
    107c:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;
    107e:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = TXD_MSK;		// switch ADC ports to input
    1080:	88 e0       	ldi	r24, 0x08	; 8
    1082:	87 b9       	out	0x07, r24	; 7
  if (adc.lp_otr < 977) { goto widmes; }
    1084:	a1 ed       	ldi	r26, 0xD1	; 209
    1086:	6a 16       	cp	r6, r26
    1088:	a3 e0       	ldi	r26, 0x03	; 3
    108a:	7a 06       	cpc	r7, r26
    108c:	08 f4       	brcc	.+2      	; 0x1090 <CheckPins+0x838>
    108e:	8b c0       	rjmp	.+278    	; 0x11a6 <CheckPins+0x94e>
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
    1090:	88 b9       	out	0x08, r24	; 8
    1092:	78 ec       	ldi	r23, 0xC8	; 200
    1094:	e7 2e       	mov	r14, r23
  for (ii=0;ii<200;ii++) {
     ADC_DDR = LoADCm | HiADCm; // discharge by short of Low and High side
    1096:	a8 2c       	mov	r10, r8
    1098:	a9 28       	or	r10, r9
    109a:	a7 b8       	out	0x07, r10	; 7
     wait_about5ms();		// Low and Highpin to GND for discharge
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>
     ADC_DDR = LoADCm;		// switch only Low-Pin fix to GND
    10a4:	87 b8       	out	0x07, r8	; 7
     adc.hp1 = ReadADC(HighPin); // read voltage at High-Pin
    10a6:	81 2f       	mov	r24, r17
    10a8:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
     if (adc.hp1 < (150/8)) break;
    10ac:	82 31       	cpi	r24, 0x12	; 18
    10ae:	91 05       	cpc	r25, r1
    10b0:	10 f0       	brcs	.+4      	; 0x10b6 <CheckPins+0x85e>
    10b2:	ea 94       	dec	r14
  ADC_DDR = TXD_MSK;		// switch ADC ports to input
  if (adc.lp_otr < 977) { goto widmes; }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
  for (ii=0;ii<200;ii++) {
    10b4:	91 f7       	brne	.-28     	; 0x109a <CheckPins+0x842>
  }
#else
  /* check first with low current (R_H=470k) */
  /* With this method the diode can be better differed from a capacitor, */
  /* but a parallel to a capacitor mounted diode can not be found. */
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
    10b6:	d4 b8       	out	0x04, r13	; 4
  R_PORT = HiPinRH;
    10b8:	d5 b8       	out	0x05, r13	; 5
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
    10ba:	80 2f       	mov	r24, r16
    10bc:	61 e0       	ldi	r22, 0x01	; 1
    10be:	0e 94 11 04 	call	0x822	; 0x822 <ChargePin10ms>
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
    10c2:	81 2f       	mov	r24, r17
    10c4:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
    10c8:	5c 01       	movw	r10, r24
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
    10ca:	80 2f       	mov	r24, r16
    10cc:	60 e0       	ldi	r22, 0x00	; 0
    10ce:	0e 94 11 04 	call	0x822	; 0x822 <ChargePin10ms>
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
    10d2:	81 2f       	mov	r24, r17
    10d4:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
    10d8:	48 2e       	mov	r4, r24
    10da:	69 2e       	mov	r6, r25

  /* check with higher current (R_L=680) */
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    10dc:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
    10de:	c5 b8       	out	0x05, r12	; 5
  adc.hp1 = W5msReadADC(HighPin) - ReadADC(LowPin);
    10e0:	81 2f       	mov	r24, r17
    10e2:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
    10e6:	1c 01       	movw	r2, r24
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
    10ee:	28 1a       	sub	r2, r24
    10f0:	39 0a       	sbc	r3, r25
  ChargePin10ms(TriPinRL,1);	//discharge for N-Kanal-MOSFET gate
    10f2:	80 2f       	mov	r24, r16
    10f4:	61 e0       	ldi	r22, 0x01	; 1
    10f6:	0e 94 11 04 	call	0x822	; 0x822 <ChargePin10ms>
  adc.lp_otr = W5msReadADC(HighPin) - ReadADC(LowPin);
    10fa:	81 2f       	mov	r24, r17
    10fc:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
    1100:	7c 01       	movw	r14, r24
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
    1108:	e8 1a       	sub	r14, r24
    110a:	f9 0a       	sbc	r15, r25

  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
    110c:	d4 b8       	out	0x04, r13	; 4
  R_PORT = HiPinRH;
    110e:	d5 b8       	out	0x05, r13	; 5
  if(adc.lp_otr > adc.hp1) {
    1110:	2e 14       	cp	r2, r14
    1112:	3f 04       	cpc	r3, r15
    1114:	38 f0       	brcs	.+14     	; 0x1124 <CheckPins+0x8cc>
      adc.hp1 = adc.lp_otr;	//the higher value wins
      adc.hp3 = adc.hp2;
  } else {
      ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
    1116:	80 2f       	mov	r24, r16
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	0e 94 11 04 	call	0x822	; 0x822 <ChargePin10ms>
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
  R_PORT = HiPinRH;
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
    111e:	a4 2c       	mov	r10, r4
    1120:	b6 2c       	mov	r11, r6
  R_PORT = HiPinRH;
  if(adc.lp_otr > adc.hp1) {
      adc.hp1 = adc.lp_otr;	//the higher value wins
      adc.hp3 = adc.hp2;
  } else {
      ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
    1122:	71 01       	movw	r14, r2
  }
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
    1124:	81 2f       	mov	r24, r17
    1126:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
#endif
  volt_dif = adc.hp3/8;
  if (volt_dif > 200) volt_dif = 200;

//  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp2 < adc.hp1) && (adc.hp1 > (adc.hp3+volt_dif)) && (adc.hp3 > adc.hp1/16)) {
    112a:	97 01       	movw	r18, r14
    112c:	27 59       	subi	r18, 0x97	; 151
    112e:	30 40       	sbci	r19, 0x00	; 0
    1130:	b1 e1       	ldi	r27, 0x11	; 17
    1132:	29 38       	cpi	r18, 0x89	; 137
    1134:	3b 07       	cpc	r19, r27
    1136:	b8 f5       	brcc	.+110    	; 0x11a6 <CheckPins+0x94e>
    1138:	8e 15       	cp	r24, r14
    113a:	9f 05       	cpc	r25, r15
    113c:	a0 f5       	brcc	.+104    	; 0x11a6 <CheckPins+0x94e>
  lcd_data('H');
  lcd_string(utoa(adc.hp2,outval,10));
  lcd_space();
  wait_about1s();
#endif
  volt_dif = adc.hp3/8;
    113e:	c5 01       	movw	r24, r10
    1140:	63 e0       	ldi	r22, 0x03	; 3
    1142:	96 95       	lsr	r25
    1144:	87 95       	ror	r24
    1146:	6a 95       	dec	r22
    1148:	e1 f7       	brne	.-8      	; 0x1142 <CheckPins+0x8ea>
  if (volt_dif > 200) volt_dif = 200;

//  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp2 < adc.hp1) && (adc.hp1 > (adc.hp3+volt_dif)) && (adc.hp3 > adc.hp1/16)) {
    114a:	89 3c       	cpi	r24, 0xC9	; 201
    114c:	91 05       	cpc	r25, r1
    114e:	10 f0       	brcs	.+4      	; 0x1154 <CheckPins+0x8fc>
    1150:	88 ec       	ldi	r24, 0xC8	; 200
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	8a 0d       	add	r24, r10
    1156:	9b 1d       	adc	r25, r11
    1158:	8e 15       	cp	r24, r14
    115a:	9f 05       	cpc	r25, r15
    115c:	20 f5       	brcc	.+72     	; 0x11a6 <CheckPins+0x94e>
    115e:	c7 01       	movw	r24, r14
    1160:	54 e0       	ldi	r21, 0x04	; 4
    1162:	96 95       	lsr	r25
    1164:	87 95       	ror	r24
    1166:	5a 95       	dec	r21
    1168:	e1 f7       	brne	.-8      	; 0x1162 <CheckPins+0x90a>
    116a:	8a 15       	cp	r24, r10
    116c:	9b 05       	cpc	r25, r11
    116e:	d8 f4       	brcc	.+54     	; 0x11a6 <CheckPins+0x94e>
     //voltage is above 0,15V and below 4,64V => Ok
     // hp2 >= hp1 is only possible with capacitor, not with a diode, hp2 is measured with 470k
     if((PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
    1170:	80 91 07 01 	lds	r24, 0x0107
    1174:	88 23       	and	r24, r24
    1176:	11 f0       	breq	.+4      	; 0x117c <CheckPins+0x924>
    1178:	86 30       	cpi	r24, 0x06	; 6
    117a:	19 f4       	brne	.+6      	; 0x1182 <CheckPins+0x92a>
        PartFound = PART_DIODE;	//mark for diode only, if no other component is found
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	80 93 07 01 	sts	0x0107, r24
				//since there is a problem with Transistors with a protection diode
#if DebugOut == 4
        lcd_data('D');
#endif
     }
     diodes[NumOfDiodes].Anode = HighPin;
    1182:	80 91 05 01 	lds	r24, 0x0105
    1186:	e8 2f       	mov	r30, r24
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	ee 0f       	add	r30, r30
    118c:	ff 1f       	adc	r31, r31
    118e:	ee 0f       	add	r30, r30
    1190:	ff 1f       	adc	r31, r31
    1192:	ec 57       	subi	r30, 0x7C	; 124
    1194:	fe 4f       	sbci	r31, 0xFE	; 254
    1196:	10 83       	st	Z, r17
     diodes[NumOfDiodes].Cathode = LowPin;
    1198:	29 81       	ldd	r18, Y+1	; 0x01
    119a:	21 83       	std	Z+1, r18	; 0x01
     diodes[NumOfDiodes].Voltage = adc.hp1;	// voltage in Millivolt 
    119c:	f3 82       	std	Z+3, r15	; 0x03
    119e:	e2 82       	std	Z+2, r14	; 0x02
     NumOfDiodes++;
    11a0:	8f 5f       	subi	r24, 0xFF	; 255
    11a2:	80 93 05 01 	sts	0x0105, r24

//##########################################################################################
// Search for resistors
//##########################################################################################
widmes:
  if (NumOfDiodes > 0) goto clean_ports;	// no resistors are searched, if diodes are detected
    11a6:	80 91 05 01 	lds	r24, 0x0105
    11aa:	88 23       	and	r24, r24
    11ac:	09 f0       	breq	.+2      	; 0x11b0 <CheckPins+0x958>
    11ae:	fe c1       	rjmp	.+1020   	; 0x15ac <CheckPins+0xd54>
  // resistor measurement
  wdt_reset();
    11b0:	a8 95       	wdr
// U_SCALE can be set to 4 for better resolution of ReadADC result
#if U_SCALE != 1
  ADCconfig.U_AVCC *= U_SCALE;	// scale to higher resolution, mV scale is not required
    11b2:	80 91 40 01 	lds	r24, 0x0140
    11b6:	90 91 41 01 	lds	r25, 0x0141
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	90 93 41 01 	sts	0x0141, r25
    11c6:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.U_Bandgap *= U_SCALE;
    11ca:	80 91 3e 01 	lds	r24, 0x013E
    11ce:	90 91 3f 01 	lds	r25, 0x013F
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	90 93 3f 01 	sts	0x013F, r25
    11de:	80 93 3e 01 	sts	0x013E, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = R_ANZ_MESS;	// switch to special number of repetitions
    11e2:	8e eb       	ldi	r24, 0xBE	; 190
    11e4:	80 93 3c 01 	sts	0x013C, r24
#endif
  #define MAX_REPEAT (700 / (5 + R_ANZ_MESS/8))
  ADC_PORT = TXD_VAL;
    11e8:	88 e0       	ldi	r24, 0x08	; 8
    11ea:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
    11ec:	87 b8       	out	0x07, r8	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    11ee:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;	
    11f0:	c5 b8       	out	0x05, r12	; 5
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
    11f2:	ee 24       	eor	r14, r14
    11f4:	ff 24       	eor	r15, r15
  for (ii=1;ii<MAX_REPEAT;ii++) {
    11f6:	01 e0       	ldi	r16, 0x01	; 1
    11f8:	01 c0       	rjmp	.+2      	; 0x11fc <CheckPins+0x9a4>
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    11fa:	7c 01       	movw	r14, r24
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
    1202:	2c 01       	movw	r4, r24
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    1204:	81 2f       	mov	r24, r17
    1206:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
     udiff = adc.hp1 - adc.hp2;
    120a:	9c 01       	movw	r18, r24
    120c:	2e 19       	sub	r18, r14
    120e:	3f 09       	sbc	r19, r15
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    1210:	37 ff       	sbrs	r19, 7
    1212:	03 c0       	rjmp	.+6      	; 0x121a <CheckPins+0x9c2>
    1214:	30 95       	com	r19
    1216:	21 95       	neg	r18
    1218:	3f 4f       	sbci	r19, 0xFF	; 255
    121a:	23 30       	cpi	r18, 0x03	; 3
    121c:	31 05       	cpc	r19, r1
    121e:	5c f4       	brge	.+22     	; 0x1236 <CheckPins+0x9de>
    1220:	1c 01       	movw	r2, r24
  adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
#endif
  if (adc.tp1 > adc.hp1) {
     adc.tp1 = adc.hp1;
  }
  R_PORT = 0;
    1222:	15 b8       	out	0x05, r1	; 5
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (GND)
    1224:	d4 b8       	out	0x04, r13	; 4
  adc.hp2 = W5msReadADC(HighPin);	// read voltage, should be down
    1226:	81 2f       	mov	r24, r17
    1228:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
  if (adc.hp2 > (20*U_SCALE)) {
    122c:	81 35       	cpi	r24, 0x51	; 81
    122e:	91 05       	cpc	r25, r1
    1230:	08 f0       	brcs	.+2      	; 0x1234 <CheckPins+0x9dc>
    1232:	a1 c1       	rjmp	.+834    	; 0x1576 <CheckPins+0xd1e>
    1234:	05 c0       	rjmp	.+10     	; 0x1240 <CheckPins+0x9e8>
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     udiff = adc.hp1 - adc.hp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.hp2 = adc.hp1;
     wdt_reset();
    1236:	a8 95       	wdr
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    1238:	0f 5f       	subi	r16, 0xFF	; 255
    123a:	09 31       	cpi	r16, 0x19	; 25
    123c:	f1 f6       	brne	.-68     	; 0x11fa <CheckPins+0x9a2>
    123e:	9b c1       	rjmp	.+822    	; 0x1576 <CheckPins+0xd1e>
     lcd_string(utoa(adc.hp2, outval, 10));
     lcd_space();
#endif
     goto testend;
  }
  R_PORT = HiPinRH;		//switch R_H for High-Pin to VCC
    1240:	d5 b8       	out	0x05, r13	; 5
  adc.hp2 = W5msReadADC(HighPin);	// voltage at resistor Rx with R_H
    1242:	81 2f       	mov	r24, r17
    1244:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
    1248:	3c 01       	movw	r6, r24

  ADC_DDR = HiADCm;		//switch High-Pin to output
    124a:	97 b8       	out	0x07, r9	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
    124c:	98 b8       	out	0x08, r9	; 8
  R_PORT = 0;
    124e:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
    1250:	3f 81       	ldd	r19, Y+7	; 0x07
    1252:	34 b9       	out	0x04, r19	; 4
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
    1254:	ee 24       	eor	r14, r14
    1256:	ff 24       	eor	r15, r15
  for (ii=1;ii<MAX_REPEAT;ii++) {
    1258:	01 e0       	ldi	r16, 0x01	; 1
    125a:	01 c0       	rjmp	.+2      	; 0x125e <CheckPins+0xa06>
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    125c:	76 01       	movw	r14, r12
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
    125e:	81 2f       	mov	r24, r17
    1260:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
    1264:	5c 01       	movw	r10, r24
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
    126c:	6c 01       	movw	r12, r24
     udiff = adc.lp1 - adc.lp2;
    126e:	8e 19       	sub	r24, r14
    1270:	9f 09       	sbc	r25, r15
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    1272:	97 ff       	sbrs	r25, 7
    1274:	03 c0       	rjmp	.+6      	; 0x127c <CheckPins+0xa24>
    1276:	90 95       	com	r25
    1278:	81 95       	neg	r24
    127a:	9f 4f       	sbci	r25, 0xFF	; 255
    127c:	83 30       	cpi	r24, 0x03	; 3
    127e:	91 05       	cpc	r25, r1
    1280:	6c f4       	brge	.+26     	; 0x129c <CheckPins+0xa44>
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = pgm_read_byte(&PinRLtab[LowPin]);		// instruction for LowPin R_L
  LoPinRH = LoPinRL + LoPinRL;				// instruction for LowPin R_H
    1282:	8f 81       	ldd	r24, Y+7	; 0x07
    1284:	88 0f       	add	r24, r24
  adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
#endif
  if (adc.tp2 < adc.lp1) {
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
    1286:	84 b9       	out	0x04, r24	; 4
  adc.lp2 = W5msReadADC(LowPin);
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
    128e:	4c 01       	movw	r8, r24
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    1290:	40 ec       	ldi	r20, 0xC0	; 192
    1292:	24 16       	cp	r2, r20
    1294:	44 e4       	ldi	r20, 0x44	; 68
    1296:	34 06       	cpc	r3, r20
    1298:	30 f0       	brcs	.+12     	; 0x12a6 <CheckPins+0xa4e>
    129a:	0c c0       	rjmp	.+24     	; 0x12b4 <CheckPins+0xa5c>
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     udiff = adc.lp1 - adc.lp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.lp2 = adc.lp1;
     wdt_reset();
    129c:	a8 95       	wdr
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
  R_PORT = 0;
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    129e:	0f 5f       	subi	r16, 0xFF	; 255
    12a0:	09 31       	cpi	r16, 0x19	; 25
    12a2:	e1 f6       	brne	.-72     	; 0x125c <CheckPins+0xa04>
    12a4:	68 c1       	rjmp	.+720    	; 0x1576 <CheckPins+0xd1e>
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
  adc.lp2 = W5msReadADC(LowPin);
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    12a6:	55 e8       	ldi	r21, 0x85	; 133
    12a8:	65 16       	cp	r6, r21
    12aa:	51 e0       	ldi	r21, 0x01	; 1
    12ac:	75 06       	cpc	r7, r21
    12ae:	08 f0       	brcs	.+2      	; 0x12b2 <CheckPins+0xa5a>
    12b0:	62 c1       	rjmp	.+708    	; 0x1576 <CheckPins+0xd1e>
    12b2:	06 c0       	rjmp	.+12     	; 0x12c0 <CheckPins+0xa68>
     lcd_data('F');
#endif
     goto testend; 
  }
//    if((adc.hp2 + (adc.hp2 / 61)) < adc.hp1)
  if (adc.hp2 < (4972*U_SCALE)) { 
    12b4:	60 eb       	ldi	r22, 0xB0	; 176
    12b6:	66 16       	cp	r6, r22
    12b8:	6d e4       	ldi	r22, 0x4D	; 77
    12ba:	76 06       	cpc	r7, r22
    12bc:	08 f0       	brcs	.+2      	; 0x12c0 <CheckPins+0xa68>
    12be:	5b c1       	rjmp	.+694    	; 0x1576 <CheckPins+0xd1e>
     // voltage breaks down with low test current and it is not nearly shorted  => resistor
//     if (adc.lp1 < 120)  // take measurement with R_H 
     if (adc.lp1 < (169*U_SCALE)) { // take measurement with R_H 
    12c0:	74 ea       	ldi	r23, 0xA4	; 164
    12c2:	c7 16       	cp	r12, r23
    12c4:	72 e0       	ldi	r23, 0x02	; 2
    12c6:	d7 06       	cpc	r13, r23
    12c8:	08 f0       	brcs	.+2      	; 0x12cc <CheckPins+0xa74>
    12ca:	72 c0       	rjmp	.+228    	; 0x13b0 <CheckPins+0xb58>
        ii = 'H';
        if (adc.lp2 < (38*U_SCALE)) {
    12cc:	88 e9       	ldi	r24, 0x98	; 152
    12ce:	88 16       	cp	r8, r24
    12d0:	91 04       	cpc	r9, r1
    12d2:	08 f4       	brcc	.+2      	; 0x12d6 <CheckPins+0xa7e>
    12d4:	50 c1       	rjmp	.+672    	; 0x1576 <CheckPins+0xd1e>
           // measurement > 60MOhm to big resistance
           goto testend;
        }
        // two measurements with R_H resistors (470k) are made:
        // lirx1 (measurement at HighPin)
        lirx1 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)adc.hp2 / (ADCconfig.U_AVCC - adc.hp2);
    12d6:	a0 90 40 01 	lds	r10, 0x0140
    12da:	b0 90 41 01 	lds	r11, 0x0141
    12de:	b3 01       	movw	r22, r6
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	28 e9       	ldi	r18, 0x98	; 152
    12e6:	37 eb       	ldi	r19, 0xB7	; 183
    12e8:	40 e0       	ldi	r20, 0x00	; 0
    12ea:	50 e0       	ldi	r21, 0x00	; 0
    12ec:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
    12f0:	95 01       	movw	r18, r10
    12f2:	26 19       	sub	r18, r6
    12f4:	37 09       	sbc	r19, r7
    12f6:	40 e0       	ldi	r20, 0x00	; 0
    12f8:	50 e0       	ldi	r21, 0x00	; 0
    12fa:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
    12fe:	69 01       	movw	r12, r18
    1300:	7a 01       	movw	r14, r20
        // lirx2 (measurement at LowPin)
        lirx2 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)(ADCconfig.U_AVCC - adc.lp2) / adc.lp2;
    1302:	a8 18       	sub	r10, r8
    1304:	b9 08       	sbc	r11, r9
    1306:	b5 01       	movw	r22, r10
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	28 e9       	ldi	r18, 0x98	; 152
    130e:	37 eb       	ldi	r19, 0xB7	; 183
    1310:	40 e0       	ldi	r20, 0x00	; 0
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
    1318:	94 01       	movw	r18, r8
    131a:	40 e0       	ldi	r20, 0x00	; 0
    131c:	50 e0       	ldi	r21, 0x00	; 0
    131e:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
#define FAKT_LOW 2		//resolution is about twice as good
#else
#define FAKT_LOW 4		//resolution is about four times better
#endif
#ifdef AUTOSCALE_ADC
        if (adc.hp2 < U_INT_LIMIT) {
    1322:	98 e7       	ldi	r25, 0x78	; 120
    1324:	69 16       	cp	r6, r25
    1326:	9f e0       	ldi	r25, 0x0F	; 15
    1328:	79 06       	cpc	r7, r25
    132a:	70 f4       	brcc	.+28     	; 0x1348 <CheckPins+0xaf0>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    132c:	c7 01       	movw	r24, r14
    132e:	b6 01       	movw	r22, r12
    1330:	02 e0       	ldi	r16, 0x02	; 2
    1332:	66 0f       	add	r22, r22
    1334:	77 1f       	adc	r23, r23
    1336:	88 1f       	adc	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	0a 95       	dec	r16
    133c:	d1 f7       	brne	.-12     	; 0x1332 <CheckPins+0xada>
    133e:	62 0f       	add	r22, r18
    1340:	73 1f       	adc	r23, r19
    1342:	84 1f       	adc	r24, r20
    1344:	95 1f       	adc	r25, r21
    1346:	12 c0       	rjmp	.+36     	; 0x136c <CheckPins+0xb14>
        } else if (adc.lp2 < U_INT_LIMIT){
    1348:	a8 e7       	ldi	r26, 0x78	; 120
    134a:	8a 16       	cp	r8, r26
    134c:	af e0       	ldi	r26, 0x0F	; 15
    134e:	9a 06       	cpc	r9, r26
    1350:	a0 f4       	brcc	.+40     	; 0x137a <CheckPins+0xb22>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    1352:	ca 01       	movw	r24, r20
    1354:	b9 01       	movw	r22, r18
    1356:	b2 e0       	ldi	r27, 0x02	; 2
    1358:	66 0f       	add	r22, r22
    135a:	77 1f       	adc	r23, r23
    135c:	88 1f       	adc	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	ba 95       	dec	r27
    1362:	d1 f7       	brne	.-12     	; 0x1358 <CheckPins+0xb00>
    1364:	6c 0d       	add	r22, r12
    1366:	7d 1d       	adc	r23, r13
    1368:	8e 1d       	adc	r24, r14
    136a:	9f 1d       	adc	r25, r15
    136c:	25 e0       	ldi	r18, 0x05	; 5
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	40 e0       	ldi	r20, 0x00	; 0
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
    1378:	08 c0       	rjmp	.+16     	; 0x138a <CheckPins+0xb32>
        } else 
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_H measurements
    137a:	2c 0d       	add	r18, r12
    137c:	3d 1d       	adc	r19, r13
    137e:	4e 1d       	adc	r20, r14
    1380:	5f 1d       	adc	r21, r15
    1382:	56 95       	lsr	r21
    1384:	47 95       	ror	r20
    1386:	37 95       	ror	r19
    1388:	27 95       	ror	r18
        }
        lrx1 *= 100;
    138a:	ca 01       	movw	r24, r20
    138c:	b9 01       	movw	r22, r18
    138e:	24 e6       	ldi	r18, 0x64	; 100
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	50 e0       	ldi	r21, 0x00	; 0
    1396:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
    139a:	6b 01       	movw	r12, r22
    139c:	7c 01       	movw	r14, r24
        lrx1 += RH_OFFSET;			// add constant for correction of systematic error
    139e:	2c ea       	ldi	r18, 0xAC	; 172
    13a0:	3d e0       	ldi	r19, 0x0D	; 13
    13a2:	40 e0       	ldi	r20, 0x00	; 0
    13a4:	50 e0       	ldi	r21, 0x00	; 0
    13a6:	c2 0e       	add	r12, r18
    13a8:	d3 1e       	adc	r13, r19
    13aa:	e4 1e       	adc	r14, r20
    13ac:	f5 1e       	adc	r15, r21
    13ae:	77 c0       	rjmp	.+238    	; 0x149e <CheckPins+0xc46>
    13b0:	c1 01       	movw	r24, r2
    13b2:	42 14       	cp	r4, r2
    13b4:	53 04       	cpc	r5, r3
    13b6:	08 f4       	brcc	.+2      	; 0x13ba <CheckPins+0xb62>
    13b8:	c2 01       	movw	r24, r4
    13ba:	76 01       	movw	r14, r12
    13bc:	ca 14       	cp	r12, r10
    13be:	db 04       	cpc	r13, r11
    13c0:	08 f4       	brcc	.+2      	; 0x13c4 <CheckPins+0xb6c>
    13c2:	75 01       	movw	r14, r10
    13c4:	3c 01       	movw	r6, r24
    13c6:	82 15       	cp	r24, r2
    13c8:	93 05       	cpc	r25, r3
    13ca:	08 f4       	brcc	.+2      	; 0x13ce <CheckPins+0xb76>
    13cc:	31 01       	movw	r6, r2
        // two measurements with R_L resistors (680) are made:
        // lirx1 (measurement at HighPin)
        if (adc.tp1 > adc.hp1) {
           adc.hp1 = adc.tp1;		//diff negativ is illegal
        }
        lirx1 =(unsigned long)RR680PL * (unsigned long)(adc.hp1 - adc.tp1) / (ADCconfig.U_AVCC - adc.hp1);
    13ce:	b3 01       	movw	r22, r6
    13d0:	68 1b       	sub	r22, r24
    13d2:	79 0b       	sbc	r23, r25
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	20 91 08 01 	lds	r18, 0x0108
    13dc:	30 91 09 01 	lds	r19, 0x0109
    13e0:	40 e0       	ldi	r20, 0x00	; 0
    13e2:	50 e0       	ldi	r21, 0x00	; 0
    13e4:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
    13e8:	20 91 40 01 	lds	r18, 0x0140
    13ec:	30 91 41 01 	lds	r19, 0x0141
    13f0:	26 19       	sub	r18, r6
    13f2:	37 09       	sbc	r19, r7
    13f4:	40 e0       	ldi	r20, 0x00	; 0
    13f6:	50 e0       	ldi	r21, 0x00	; 0
    13f8:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
    13fc:	49 01       	movw	r8, r18
    13fe:	5a 01       	movw	r10, r20
    1400:	27 01       	movw	r4, r14
    1402:	ce 14       	cp	r12, r14
    1404:	df 04       	cpc	r13, r15
    1406:	08 f4       	brcc	.+2      	; 0x140a <CheckPins+0xbb2>
    1408:	26 01       	movw	r4, r12
        if (adc.tp2 < adc.lp1) {
           adc.lp1 = adc.tp2;		//diff negativ is illegal
        }
        // lirx2 (Measurement at LowPin)
        lirx2 =(unsigned long)RR680MI * (unsigned long)(adc.tp2 -adc.lp1) / adc.lp1;
    140a:	e4 18       	sub	r14, r4
    140c:	f5 08       	sbc	r15, r5
    140e:	b7 01       	movw	r22, r14
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	20 91 03 01 	lds	r18, 0x0103
    1418:	30 91 04 01 	lds	r19, 0x0104
    141c:	40 e0       	ldi	r20, 0x00	; 0
    141e:	50 e0       	ldi	r21, 0x00	; 0
    1420:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
    1424:	92 01       	movw	r18, r4
    1426:	40 e0       	ldi	r20, 0x00	; 0
    1428:	50 e0       	ldi	r21, 0x00	; 0
    142a:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
//     lrx1 =(unsigned long)R_L_VAL * (unsigned long)adc.hp1 / (adc.hp3 - adc.hp1);

#ifdef AUTOSCALE_ADC
        if (adc.hp1 < U_INT_LIMIT) {
    142e:	68 e7       	ldi	r22, 0x78	; 120
    1430:	66 16       	cp	r6, r22
    1432:	6f e0       	ldi	r22, 0x0F	; 15
    1434:	76 06       	cpc	r7, r22
    1436:	70 f4       	brcc	.+28     	; 0x1454 <CheckPins+0xbfc>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    1438:	c5 01       	movw	r24, r10
    143a:	b4 01       	movw	r22, r8
    143c:	f2 e0       	ldi	r31, 0x02	; 2
    143e:	66 0f       	add	r22, r22
    1440:	77 1f       	adc	r23, r23
    1442:	88 1f       	adc	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	fa 95       	dec	r31
    1448:	d1 f7       	brne	.-12     	; 0x143e <CheckPins+0xbe6>
    144a:	62 0f       	add	r22, r18
    144c:	73 1f       	adc	r23, r19
    144e:	84 1f       	adc	r24, r20
    1450:	95 1f       	adc	r25, r21
    1452:	12 c0       	rjmp	.+36     	; 0x1478 <CheckPins+0xc20>
        } else if (adc.lp1 < U_INT_LIMIT) {
    1454:	78 e7       	ldi	r23, 0x78	; 120
    1456:	47 16       	cp	r4, r23
    1458:	7f e0       	ldi	r23, 0x0F	; 15
    145a:	57 06       	cpc	r5, r23
    145c:	b0 f4       	brcc	.+44     	; 0x148a <CheckPins+0xc32>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    145e:	ca 01       	movw	r24, r20
    1460:	b9 01       	movw	r22, r18
    1462:	e2 e0       	ldi	r30, 0x02	; 2
    1464:	66 0f       	add	r22, r22
    1466:	77 1f       	adc	r23, r23
    1468:	88 1f       	adc	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	ea 95       	dec	r30
    146e:	d1 f7       	brne	.-12     	; 0x1464 <CheckPins+0xc0c>
    1470:	68 0d       	add	r22, r8
    1472:	79 1d       	adc	r23, r9
    1474:	8a 1d       	adc	r24, r10
    1476:	9b 1d       	adc	r25, r11
    1478:	25 e0       	ldi	r18, 0x05	; 5
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	40 e0       	ldi	r20, 0x00	; 0
    147e:	50 e0       	ldi	r21, 0x00	; 0
    1480:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
    1484:	69 01       	movw	r12, r18
    1486:	7a 01       	movw	r14, r20
    1488:	0a c0       	rjmp	.+20     	; 0x149e <CheckPins+0xc46>
        } else
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_L measurements
    148a:	69 01       	movw	r12, r18
    148c:	7a 01       	movw	r14, r20
    148e:	c8 0c       	add	r12, r8
    1490:	d9 1c       	adc	r13, r9
    1492:	ea 1c       	adc	r14, r10
    1494:	fb 1c       	adc	r15, r11
    1496:	f6 94       	lsr	r15
    1498:	e7 94       	ror	r14
    149a:	d7 94       	ror	r13
    149c:	c7 94       	ror	r12
  lcd_line4();
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4);
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
    149e:	80 91 07 01 	lds	r24, 0x0107
    14a2:	82 30       	cpi	r24, 0x02	; 2
    14a4:	18 f0       	brcs	.+6      	; 0x14ac <CheckPins+0xc54>
    14a6:	86 30       	cpi	r24, 0x06	; 6
    14a8:	09 f0       	breq	.+2      	; 0x14ac <CheckPins+0xc54>
    14aa:	65 c0       	rjmp	.+202    	; 0x1576 <CheckPins+0xd1e>
        for (ii=0; ii<ResistorsFound; ii++) {
    14ac:	30 91 6c 01 	lds	r19, 0x016C
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	41 c0       	rjmp	.+130    	; 0x1536 <CheckPins+0xcde>
           // search measurements with inverse polarity 
           thisR = &resis[ii];
    14b4:	82 2f       	mov	r24, r18
    14b6:	90 e0       	ldi	r25, 0x00	; 0
           if (thisR->rt != TristatePin) {
    14b8:	fc 01       	movw	r30, r24
    14ba:	ee 0f       	add	r30, r30
    14bc:	ff 1f       	adc	r31, r31
    14be:	e8 0f       	add	r30, r24
    14c0:	f9 1f       	adc	r31, r25
    14c2:	ee 0f       	add	r30, r30
    14c4:	ff 1f       	adc	r31, r31
    14c6:	ee 0f       	add	r30, r30
    14c8:	ff 1f       	adc	r31, r31
    14ca:	e8 5e       	subi	r30, 0xE8	; 232
    14cc:	fe 4f       	sbci	r31, 0xFE	; 254
    14ce:	83 85       	ldd	r24, Z+11	; 0x0b
    14d0:	9a 81       	ldd	r25, Y+2	; 0x02
    14d2:	89 17       	cp	r24, r25
    14d4:	11 f0       	breq	.+4      	; 0x14da <CheckPins+0xc82>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4);
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    14d6:	2f 5f       	subi	r18, 0xFF	; 255
    14d8:	2e c0       	rjmp	.+92     	; 0x1536 <CheckPins+0xcde>
           if (thisR->rt != TristatePin) {
              continue;
           }
           // must be measurement with inverse polarity 
           // resolution is 0.1 Ohm, 1 Ohm = 10 !
           lirx1 = (labs((long)lrx1 - (long)thisR->rx) * 10) / (lrx1 + thisR->rx + 100);
    14da:	80 80       	ld	r8, Z
    14dc:	91 80       	ldd	r9, Z+1	; 0x01
    14de:	a2 80       	ldd	r10, Z+2	; 0x02
    14e0:	b3 80       	ldd	r11, Z+3	; 0x03
    14e2:	c7 01       	movw	r24, r14
    14e4:	b6 01       	movw	r22, r12
    14e6:	68 19       	sub	r22, r8
    14e8:	79 09       	sbc	r23, r9
    14ea:	8a 09       	sbc	r24, r10
    14ec:	9b 09       	sbc	r25, r11
    14ee:	97 ff       	sbrs	r25, 7
    14f0:	07 c0       	rjmp	.+14     	; 0x1500 <CheckPins+0xca8>
    14f2:	90 95       	com	r25
    14f4:	80 95       	com	r24
    14f6:	70 95       	com	r23
    14f8:	61 95       	neg	r22
    14fa:	7f 4f       	sbci	r23, 0xFF	; 255
    14fc:	8f 4f       	sbci	r24, 0xFF	; 255
    14fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1500:	2a e0       	ldi	r18, 0x0A	; 10
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	40 e0       	ldi	r20, 0x00	; 0
    1506:	50 e0       	ldi	r21, 0x00	; 0
    1508:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
    150c:	a5 01       	movw	r20, r10
    150e:	94 01       	movw	r18, r8
    1510:	2c 59       	subi	r18, 0x9C	; 156
    1512:	3f 4f       	sbci	r19, 0xFF	; 255
    1514:	4f 4f       	sbci	r20, 0xFF	; 255
    1516:	5f 4f       	sbci	r21, 0xFF	; 255
    1518:	2c 0d       	add	r18, r12
    151a:	3d 1d       	adc	r19, r13
    151c:	4e 1d       	adc	r20, r14
    151e:	5f 1d       	adc	r21, r15
    1520:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
           if (lirx1  > 0) {
    1524:	21 15       	cp	r18, r1
    1526:	31 05       	cpc	r19, r1
    1528:	41 05       	cpc	r20, r1
    152a:	51 05       	cpc	r21, r1
    152c:	21 f5       	brne	.+72     	; 0x1576 <CheckPins+0xd1e>
              DisplayValue(lirx1,-1,LCD_CHAR_OMEGA,3);
              lcd_space();
#endif
              goto testend; // <10% mismatch
           }
           PartFound = PART_RESISTOR;
    152e:	86 e0       	ldi	r24, 0x06	; 6
    1530:	80 93 07 01 	sts	0x0107, r24
           goto testend;
    1534:	20 c0       	rjmp	.+64     	; 0x1576 <CheckPins+0xd1e>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4);
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    1536:	23 17       	cp	r18, r19
    1538:	08 f4       	brcc	.+2      	; 0x153c <CheckPins+0xce4>
    153a:	bc cf       	rjmp	.-136    	; 0x14b4 <CheckPins+0xc5c>
           }
           PartFound = PART_RESISTOR;
           goto testend;
        } // end for
        // no same resistor with the same Tristate-Pin found, new one
        thisR = &resis[ResistorsFound];		// pointer to a free resistor structure
    153c:	83 2f       	mov	r24, r19
    153e:	90 e0       	ldi	r25, 0x00	; 0
        thisR->rx = lrx1;		// save resistor value
    1540:	fc 01       	movw	r30, r24
    1542:	ee 0f       	add	r30, r30
    1544:	ff 1f       	adc	r31, r31
    1546:	e8 0f       	add	r30, r24
    1548:	f9 1f       	adc	r31, r25
    154a:	ee 0f       	add	r30, r30
    154c:	ff 1f       	adc	r31, r31
    154e:	ee 0f       	add	r30, r30
    1550:	ff 1f       	adc	r31, r31
    1552:	e8 5e       	subi	r30, 0xE8	; 232
    1554:	fe 4f       	sbci	r31, 0xFE	; 254
    1556:	c0 82       	st	Z, r12
    1558:	d1 82       	std	Z+1, r13	; 0x01
    155a:	e2 82       	std	Z+2, r14	; 0x02
    155c:	f3 82       	std	Z+3, r15	; 0x03
#if FLASHEND > 0x1fff
        thisR->lx = 0;			// no inductance
    155e:	14 82       	std	Z+4, r1	; 0x04
    1560:	15 82       	std	Z+5, r1	; 0x05
    1562:	16 82       	std	Z+6, r1	; 0x06
    1564:	17 82       	std	Z+7, r1	; 0x07
#endif
        thisR->ra = LowPin;		// save Pin numbers
    1566:	a9 81       	ldd	r26, Y+1	; 0x01
    1568:	a1 87       	std	Z+9, r26	; 0x09
        thisR->rb = HighPin;
    156a:	12 87       	std	Z+10, r17	; 0x0a
        thisR->rt = TristatePin;	// Tristate is saved for easier search of inverse measurement
    156c:	ba 81       	ldd	r27, Y+2	; 0x02
    156e:	b3 87       	std	Z+11, r27	; 0x0b
        ResistorsFound++;			// 1 more resistor found
    1570:	3f 5f       	subi	r19, 0xFF	; 255
    1572:	30 93 6c 01 	sts	0x016C, r19
#endif
     }
  }
  testend:			// end of resistor measurement
#if U_SCALE != 1
  ADCconfig.U_AVCC /= U_SCALE;		// scale back to mV resolution
    1576:	80 91 40 01 	lds	r24, 0x0140
    157a:	90 91 41 01 	lds	r25, 0x0141
    157e:	96 95       	lsr	r25
    1580:	87 95       	ror	r24
    1582:	96 95       	lsr	r25
    1584:	87 95       	ror	r24
    1586:	90 93 41 01 	sts	0x0141, r25
    158a:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.U_Bandgap /= U_SCALE;
    158e:	80 91 3e 01 	lds	r24, 0x013E
    1592:	90 91 3f 01 	lds	r25, 0x013F
    1596:	96 95       	lsr	r25
    1598:	87 95       	ror	r24
    159a:	96 95       	lsr	r25
    159c:	87 95       	ror	r24
    159e:	90 93 3f 01 	sts	0x013F, r25
    15a2:	80 93 3e 01 	sts	0x013E, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = ANZ_MESS;		// switch back to standard number of repetition
    15a6:	89 e1       	ldi	r24, 0x19	; 25
    15a8:	80 93 3c 01 	sts	0x013C, r24
#ifdef DebugOut
#if DebugOut < 10
  wait_about2s();
#endif
#endif
  ADC_DDR = TXD_MSK;		// all ADC-Pins Input
    15ac:	88 e0       	ldi	r24, 0x08	; 8
    15ae:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// all ADC outputs to Ground, keine Pull up
    15b0:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// all resistor-outputs to Input
    15b2:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// all resistor-outputs to Ground, no Pull up
    15b4:	15 b8       	out	0x05, r1	; 5
    ntrans.c = HighPin;
    ntrans.e = LowPin;
 }
 goto clean_ports;

} // end CheckPins()
    15b6:	2f 96       	adiw	r28, 0x0f	; 15
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	1f 91       	pop	r17
    15c8:	0f 91       	pop	r16
    15ca:	ff 90       	pop	r15
    15cc:	ef 90       	pop	r14
    15ce:	df 90       	pop	r13
    15d0:	cf 90       	pop	r12
    15d2:	bf 90       	pop	r11
    15d4:	af 90       	pop	r10
    15d6:	9f 90       	pop	r9
    15d8:	8f 90       	pop	r8
    15da:	7f 90       	pop	r7
    15dc:	6f 90       	pop	r6
    15de:	5f 90       	pop	r5
    15e0:	4f 90       	pop	r4
    15e2:	3f 90       	pop	r3
    15e4:	2f 90       	pop	r2
    15e6:	08 95       	ret

//---------------------------------------------------------------------------
// save Pins of P type transistor
//---------------------------------------------------------------------------
savePresult:
 ptrans.count++;
    15e8:	80 91 6b 01 	lds	r24, 0x016B
    15ec:	8f 5f       	subi	r24, 0xFF	; 255
    15ee:	80 93 6b 01 	sts	0x016B, r24
 if (update_pins != 0) {
    15f2:	22 23       	and	r18, r18
    15f4:	d9 f2       	breq	.-74     	; 0x15ac <CheckPins+0xd54>
    ptrans.b = TristatePin;	// save Pin-constellation
    15f6:	ea 81       	ldd	r30, Y+2	; 0x02
    15f8:	e0 93 68 01 	sts	0x0168, r30
    ptrans.c = LowPin;
    15fc:	f9 81       	ldd	r31, Y+1	; 0x01
    15fe:	f0 93 69 01 	sts	0x0169, r31
    ptrans.e = HighPin;
    1602:	10 93 6a 01 	sts	0x016A, r17
    1606:	d2 cf       	rjmp	.-92     	; 0x15ac <CheckPins+0xd54>
#if DebugOut == 5
  lcd_line2();
  lcd_clear_line();
  lcd_line2();
#endif
  update_pins = 1;			// if a part is found, always update the pins
    1608:	21 e0       	ldi	r18, 0x01	; 1

//---------------------------------------------------------------------------
// save Pins of N type transistor
//---------------------------------------------------------------------------
saveNresult:
 ntrans.count++;
    160a:	80 91 59 01 	lds	r24, 0x0159
    160e:	8f 5f       	subi	r24, 0xFF	; 255
    1610:	80 93 59 01 	sts	0x0159, r24
 if (update_pins != 0) {
    1614:	22 23       	and	r18, r18
    1616:	51 f2       	breq	.-108    	; 0x15ac <CheckPins+0xd54>
    ntrans.b = TristatePin;	// save Pin-constellation
    1618:	2a 81       	ldd	r18, Y+2	; 0x02
    161a:	20 93 56 01 	sts	0x0156, r18
    ntrans.c = HighPin;
    161e:	10 93 57 01 	sts	0x0157, r17
    ntrans.e = LowPin;
    1622:	39 81       	ldd	r19, Y+1	; 0x01
    1624:	30 93 58 01 	sts	0x0158, r19
    1628:	c1 cf       	rjmp	.-126    	; 0x15ac <CheckPins+0xd54>

0000162a <PinLayout>:
TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
}
#endif

// show the Pin Layout of the device 
void PinLayout(char pin1, char pin2, char pin3) {
    162a:	ef 92       	push	r14
    162c:	ff 92       	push	r15
    162e:	0f 93       	push	r16
    1630:	1f 93       	push	r17
    1632:	18 2f       	mov	r17, r24
    1634:	06 2f       	mov	r16, r22
    1636:	f4 2e       	mov	r15, r20
// pin1-3 is EBC or SGD or CGA
   uint8_t ipp;
#ifndef EBC_STYLE
   // Layout with 123= style
   lcd_fix_string(N123_str);		//" 123="
    1638:	85 e0       	ldi	r24, 0x05	; 5
    163a:	91 e0       	ldi	r25, 0x01	; 1
    163c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
   for (ipp=0;ipp<3;ipp++) {
    1640:	ee 24       	eor	r14, r14
       if (ipp == _trans->e)  lcd_data(pin1);	// Output Character in right order
    1642:	e0 91 4a 01 	lds	r30, 0x014A
    1646:	f0 91 4b 01 	lds	r31, 0x014B
    164a:	84 85       	ldd	r24, Z+12	; 0x0c
    164c:	e8 16       	cp	r14, r24
    164e:	19 f4       	brne	.+6      	; 0x1656 <PinLayout+0x2c>
    1650:	81 2f       	mov	r24, r17
    1652:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       if (ipp == _trans->b)  lcd_data(pin2);
    1656:	e0 91 4a 01 	lds	r30, 0x014A
    165a:	f0 91 4b 01 	lds	r31, 0x014B
    165e:	82 85       	ldd	r24, Z+10	; 0x0a
    1660:	e8 16       	cp	r14, r24
    1662:	19 f4       	brne	.+6      	; 0x166a <PinLayout+0x40>
    1664:	80 2f       	mov	r24, r16
    1666:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       if (ipp == _trans->c)  lcd_data(pin3);
    166a:	e0 91 4a 01 	lds	r30, 0x014A
    166e:	f0 91 4b 01 	lds	r31, 0x014B
    1672:	83 85       	ldd	r24, Z+11	; 0x0b
    1674:	e8 16       	cp	r14, r24
    1676:	19 f4       	brne	.+6      	; 0x167e <PinLayout+0x54>
    1678:	8f 2d       	mov	r24, r15
    167a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
// pin1-3 is EBC or SGD or CGA
   uint8_t ipp;
#ifndef EBC_STYLE
   // Layout with 123= style
   lcd_fix_string(N123_str);		//" 123="
   for (ipp=0;ipp<3;ipp++) {
    167e:	e3 94       	inc	r14
    1680:	8e 2d       	mov	r24, r14
    1682:	83 30       	cpi	r24, 0x03	; 3
    1684:	f1 f6       	brne	.-68     	; 0x1642 <PinLayout+0x18>
   lcd_testpin(_trans->e);
   lcd_testpin(_trans->b);
   lcd_testpin(_trans->c);
 #endif
#endif
}
    1686:	1f 91       	pop	r17
    1688:	0f 91       	pop	r16
    168a:	ff 90       	pop	r15
    168c:	ef 90       	pop	r14
    168e:	08 95       	ret

00001690 <ShortedProbes>:
 *  - 0 if not shorted
 *  - 1 if shorted
 */

uint8_t ShortedProbes(uint8_t Probe1, uint8_t Probe2)
{
    1690:	0f 93       	push	r16
    1692:	1f 93       	push	r17
    1694:	df 93       	push	r29
    1696:	cf 93       	push	r28
    1698:	0f 92       	push	r0
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
   *  Set up a voltage divider between the two probes:
   *  - Probe1: Rl pull-up
   *  - Probe2: Rl pull-down
   */

  ADC_DDR =  TXD_MSK;		// all-Pins to Input
    169e:	98 e0       	ldi	r25, 0x08	; 8
    16a0:	97 b9       	out	0x07, r25	; 7
  ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
    16a2:	98 b9       	out	0x08, r25	; 8
  R_PORT = pgm_read_byte(&PinRLtab[Probe1]);
    16a4:	e8 2f       	mov	r30, r24
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	e0 50       	subi	r30, 0x00	; 0
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	94 91       	lpm	r25, Z+
    16ae:	95 b9       	out	0x05, r25	; 5
  R_DDR = pgm_read_byte(&PinRLtab[Probe1]) | pgm_read_byte(&PinRLtab[Probe2]);
    16b0:	e6 2f       	mov	r30, r22
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	e0 50       	subi	r30, 0x00	; 0
    16b6:	ff 4f       	sbci	r31, 0xFF	; 255
    16b8:	e4 91       	lpm	r30, Z+
    16ba:	e9 2b       	or	r30, r25
    16bc:	e4 b9       	out	0x04, r30	; 4

  /* read voltages */
  U1 = ReadADC(Probe1);
    16be:	69 83       	std	Y+1, r22	; 0x01
    16c0:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
    16c4:	8c 01       	movw	r16, r24
  U2 = ReadADC(Probe2);
    16c6:	69 81       	ldd	r22, Y+1	; 0x01
    16c8:	86 2f       	mov	r24, r22
    16ca:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
    16ce:	ac 01       	movw	r20, r24
   *  We expect both probe voltages to be about the same and
   *  to be half of Vcc (allowed difference +/- 20mV).
   */
  #define MAX_UH_DIFF 20

  URH = ADCconfig.U_AVCC / 2;
    16d0:	20 91 40 01 	lds	r18, 0x0140
    16d4:	30 91 41 01 	lds	r19, 0x0141
    16d8:	36 95       	lsr	r19
    16da:	27 95       	ror	r18
  if ((U1 > (URH - MAX_UH_DIFF)) && (U1 < (URH + MAX_UH_DIFF)))
    16dc:	c9 01       	movw	r24, r18
    16de:	44 97       	sbiw	r24, 0x14	; 20
    16e0:	80 17       	cp	r24, r16
    16e2:	91 07       	cpc	r25, r17
    16e4:	60 f4       	brcc	.+24     	; 0x16fe <ShortedProbes+0x6e>
    16e6:	2c 5e       	subi	r18, 0xEC	; 236
    16e8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ea:	02 17       	cp	r16, r18
    16ec:	13 07       	cpc	r17, r19
    16ee:	38 f4       	brcc	.+14     	; 0x16fe <ShortedProbes+0x6e>
  {
    if ((U2 > (URH - MAX_UH_DIFF)) && (U2 < (URH + MAX_UH_DIFF)))
    16f0:	84 17       	cp	r24, r20
    16f2:	95 07       	cpc	r25, r21
    16f4:	20 f4       	brcc	.+8      	; 0x16fe <ShortedProbes+0x6e>
 *  - 1 if shorted
 */

uint8_t ShortedProbes(uint8_t Probe1, uint8_t Probe2)
{
  uint8_t           Flag1 = 0;      /* return value */
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	42 17       	cp	r20, r18
    16fa:	53 07       	cpc	r21, r19
    16fc:	08 f0       	brcs	.+2      	; 0x1700 <ShortedProbes+0x70>
    16fe:	80 e0       	ldi	r24, 0x00	; 0
      Flag1 = 1;
    }
  }

  /* reset port */
  R_DDR = 0;
    1700:	14 b8       	out	0x04, r1	; 4

  return Flag1;
}
    1702:	0f 90       	pop	r0
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	1f 91       	pop	r17
    170a:	0f 91       	pop	r16
    170c:	08 95       	ret

0000170e <AllProbesShorted>:
 *  - 0 if no probes are short-circuited
 *  - number of probe pairs short-circuited (3 = all)
 */

uint8_t AllProbesShorted(void)
{
    170e:	1f 93       	push	r17
  uint8_t           Flag2;      /* return value */

  /* check all possible combinations */
  Flag2 = ShortedProbes(TP1, TP2);
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	61 e0       	ldi	r22, 0x01	; 1
    1714:	0e 94 48 0b 	call	0x1690	; 0x1690 <ShortedProbes>
    1718:	18 2f       	mov	r17, r24
  Flag2 += ShortedProbes(TP1, TP3);
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	62 e0       	ldi	r22, 0x02	; 2
    171e:	0e 94 48 0b 	call	0x1690	; 0x1690 <ShortedProbes>
    1722:	18 0f       	add	r17, r24
  Flag2 += ShortedProbes(TP2, TP3);
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	62 e0       	ldi	r22, 0x02	; 2
    1728:	0e 94 48 0b 	call	0x1690	; 0x1690 <ShortedProbes>

  return Flag2;
}
    172c:	81 0f       	add	r24, r17
    172e:	1f 91       	pop	r17
    1730:	08 95       	ret

00001732 <AutoCheck>:
void AutoCheck(void) {
    1732:	8f 92       	push	r8
    1734:	9f 92       	push	r9
    1736:	af 92       	push	r10
    1738:	bf 92       	push	r11
    173a:	cf 92       	push	r12
    173c:	df 92       	push	r13
    173e:	ef 92       	push	r14
    1740:	ff 92       	push	r15
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	2e 97       	sbiw	r28, 0x0e	; 14
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
  int8_t udiff;		// difference between ADC Voltage with VCC or Bandgap reference
  int8_t udiff2;
  #endif
 #endif
  #define RequireShortedProbes
  if (AllProbesShorted() != 3) return;
    175a:	0e 94 87 0b 	call	0x170e	; 0x170e <AllProbesShorted>
    175e:	83 30       	cpi	r24, 0x03	; 3
    1760:	09 f0       	breq	.+2      	; 0x1764 <AutoCheck+0x32>
    1762:	91 c2       	rjmp	.+1314   	; 0x1c86 <AutoCheck+0x554>
  lcd_clear();
    1764:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  lcd_fix_string(SELFTEST);		// "Selftest mode.."
    1768:	8c eb       	ldi	r24, 0xBC	; 188
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  lcd_line2();
    1770:	80 ec       	ldi	r24, 0xC0	; 192
    1772:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_data('?');			// wait for key pressed
    1776:	8f e3       	ldi	r24, 0x3F	; 63
    1778:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
  for (tt=0;tt<50;tt++) {
    177c:	10 e0       	ldi	r17, 0x00	; 0
     if ((ON_PIN_REG & (1<<RST_PIN)) != 0) break;	// key is unpressed
    177e:	4f 99       	sbic	0x09, 7	; 9
    1780:	08 c0       	rjmp	.+16     	; 0x1792 <AutoCheck+0x60>
     wait_about10ms();			// key is still pressed, wait for release
    1782:	82 e0       	ldi	r24, 0x02	; 2
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>
  if (AllProbesShorted() != 3) return;
  lcd_clear();
  lcd_fix_string(SELFTEST);		// "Selftest mode.."
  lcd_line2();
  lcd_data('?');			// wait for key pressed
  for (tt=0;tt<50;tt++) {
    178a:	1f 5f       	subi	r17, 0xFF	; 255
    178c:	12 33       	cpi	r17, 0x32	; 50
    178e:	b9 f7       	brne	.-18     	; 0x177e <AutoCheck+0x4c>
    1790:	0a c0       	rjmp	.+20     	; 0x17a6 <AutoCheck+0x74>
     if ((ON_PIN_REG & (1<<RST_PIN)) != 0) break;	// key is unpressed
    1792:	10 e0       	ldi	r17, 0x00	; 0
     wait_about10ms();			// key is still pressed, wait for release
    }
  if (tt == 50) goto no_selftest;		// key is more than 500ms pressed
  for (tt=0;tt<200;tt++) {
     if(!(ON_PIN_REG & (1<<RST_PIN))) goto begin_selftest;	// key is pressed again
    1794:	4f 9b       	sbis	0x09, 7	; 9
    1796:	0e c0       	rjmp	.+28     	; 0x17b4 <AutoCheck+0x82>
     wait_about10ms();
    1798:	82 e0       	ldi	r24, 0x02	; 2
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>
  for (tt=0;tt<50;tt++) {
     if ((ON_PIN_REG & (1<<RST_PIN)) != 0) break;	// key is unpressed
     wait_about10ms();			// key is still pressed, wait for release
    }
  if (tt == 50) goto no_selftest;		// key is more than 500ms pressed
  for (tt=0;tt<200;tt++) {
    17a0:	1f 5f       	subi	r17, 0xFF	; 255
    17a2:	18 3c       	cpi	r17, 0xC8	; 200
    17a4:	b9 f7       	brne	.-18     	; 0x1794 <AutoCheck+0x62>
     if(!(ON_PIN_REG & (1<<RST_PIN))) goto begin_selftest;	// key is pressed again
     wait_about10ms();
    }
  // no key pressed for 2s
no_selftest:
  lcd_clear();
    17a6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  lcd_fix2_string(VERSION_str);	//"Version ..."
    17aa:	88 ed       	ldi	r24, 0xD8	; 216
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
  return;
    17b2:	69 c2       	rjmp	.+1234   	; 0x1c86 <AutoCheck+0x554>
begin_selftest:
  lcd_line2();
    17b4:	80 ec       	ldi	r24, 0xC0	; 192
    17b6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix2_string(R0_str);		// "R0="
    17ba:	86 ee       	ldi	r24, 0xE6	; 230
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[2]), (int8_t)0);	// clear zero offset
    17c2:	85 ea       	ldi	r24, 0xA5	; 165
    17c4:	91 e0       	ldi	r25, 0x01	; 1
    17c6:	60 e0       	ldi	r22, 0x00	; 0
    17c8:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__eewr_byte_m168>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (int8_t)0);	// clear zero offset
    17cc:	86 ea       	ldi	r24, 0xA6	; 166
    17ce:	91 e0       	ldi	r25, 0x01	; 1
    17d0:	60 e0       	ldi	r22, 0x00	; 0
    17d2:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__eewr_byte_m168>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)0);	// clear zero offset
    17d6:	84 ea       	ldi	r24, 0xA4	; 164
    17d8:	91 e0       	ldi	r25, 0x01	; 1
    17da:	60 e0       	ldi	r22, 0x00	; 0
    17dc:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__eewr_byte_m168>

  adcmv[0] = GetESR(TP3, TP1);
    17e0:	82 e0       	ldi	r24, 0x02	; 2
    17e2:	60 e0       	ldi	r22, 0x00	; 0
    17e4:	0e 94 9b 1a 	call	0x3536	; 0x3536 <GetESR>
    17e8:	7c 01       	movw	r14, r24
    17ea:	9a 83       	std	Y+2, r25	; 0x02
    17ec:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = GetESR(TP3, TP2);
    17ee:	82 e0       	ldi	r24, 0x02	; 2
    17f0:	61 e0       	ldi	r22, 0x01	; 1
    17f2:	0e 94 9b 1a 	call	0x3536	; 0x3536 <GetESR>
    17f6:	6c 01       	movw	r12, r24
    17f8:	9c 83       	std	Y+4, r25	; 0x04
    17fa:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = GetESR(TP2, TP1);
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	0e 94 9b 1a 	call	0x3536	; 0x3536 <GetESR>
    1804:	5c 01       	movw	r10, r24
    1806:	9e 83       	std	Y+6, r25	; 0x06
    1808:	8d 83       	std	Y+5, r24	; 0x05
  DisplayValue(adcmv[0],-2,' ',3);
    180a:	b7 01       	movw	r22, r14
    180c:	88 27       	eor	r24, r24
    180e:	77 fd       	sbrc	r23, 7
    1810:	80 95       	com	r24
    1812:	98 2f       	mov	r25, r24
    1814:	4e ef       	ldi	r20, 0xFE	; 254
    1816:	20 e2       	ldi	r18, 0x20	; 32
    1818:	03 e0       	ldi	r16, 0x03	; 3
    181a:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
  DisplayValue(adcmv[1],-2,' ',3);
    181e:	b6 01       	movw	r22, r12
    1820:	88 27       	eor	r24, r24
    1822:	77 fd       	sbrc	r23, 7
    1824:	80 95       	com	r24
    1826:	98 2f       	mov	r25, r24
    1828:	4e ef       	ldi	r20, 0xFE	; 254
    182a:	20 e2       	ldi	r18, 0x20	; 32
    182c:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
  DisplayValue(adcmv[2],-2,LCD_CHAR_OMEGA,3);
    1830:	b5 01       	movw	r22, r10
    1832:	88 27       	eor	r24, r24
    1834:	77 fd       	sbrc	r23, 7
    1836:	80 95       	com	r24
    1838:	98 2f       	mov	r25, r24
    183a:	4e ef       	ldi	r20, 0xFE	; 254
    183c:	24 ef       	ldi	r18, 0xF4	; 244
    183e:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
  if (adcmv[0] < 60) {
    1842:	2c e3       	ldi	r18, 0x3C	; 60
    1844:	e2 16       	cp	r14, r18
    1846:	f1 04       	cpc	r15, r1
    1848:	2c f4       	brge	.+10     	; 0x1854 <AutoCheck+0x122>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[2]), (int8_t)adcmv[0]);	// fix zero offset
    184a:	85 ea       	ldi	r24, 0xA5	; 165
    184c:	91 e0       	ldi	r25, 0x01	; 1
    184e:	6e 2d       	mov	r22, r14
    1850:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__eewr_byte_m168>
  }
  if (adcmv[1] < 60) {
    1854:	8c e3       	ldi	r24, 0x3C	; 60
    1856:	c8 16       	cp	r12, r24
    1858:	d1 04       	cpc	r13, r1
    185a:	2c f4       	brge	.+10     	; 0x1866 <AutoCheck+0x134>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (int8_t)adcmv[1]);	// fix zero offset
    185c:	86 ea       	ldi	r24, 0xA6	; 166
    185e:	91 e0       	ldi	r25, 0x01	; 1
    1860:	6c 2d       	mov	r22, r12
    1862:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__eewr_byte_m168>
  }
  if (adcmv[2] < 60) {
    1866:	ec e3       	ldi	r30, 0x3C	; 60
    1868:	ae 16       	cp	r10, r30
    186a:	b1 04       	cpc	r11, r1
    186c:	2c f4       	brge	.+10     	; 0x1878 <AutoCheck+0x146>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
    186e:	84 ea       	ldi	r24, 0xA4	; 164
    1870:	91 e0       	ldi	r25, 0x01	; 1
    1872:	6a 2d       	mov	r22, r10
    1874:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__eewr_byte_m168>
  lcd_clear();
  lcd_fix_string(SELFTEST);		// "Selftest mode.."
  lcd_line2();
  lcd_data('?');			// wait for key pressed
  for (tt=0;tt<50;tt++) {
     if ((ON_PIN_REG & (1<<RST_PIN)) != 0) break;	// key is unpressed
    1878:	10 e0       	ldi	r17, 0x00	; 0
  }
  if (adcmv[2] < 60) {
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
  }
  for(tt=0;tt<12;tt++) {
     wait_about500ms();
    187a:	84 e6       	ldi	r24, 0x64	; 100
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    1882:	4f 9b       	sbis	0x09, 7	; 9
    1884:	03 c0       	rjmp	.+6      	; 0x188c <AutoCheck+0x15a>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (int8_t)adcmv[1]);	// fix zero offset
  }
  if (adcmv[2] < 60) {
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
  }
  for(tt=0;tt<12;tt++) {
    1886:	1f 5f       	subi	r17, 0xFF	; 255
    1888:	1c 30       	cpi	r17, 0x0C	; 12
    188a:	b9 f7       	brne	.-18     	; 0x187a <AutoCheck+0x148>
     wait_about500ms();
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    188c:	10 e0       	ldi	r17, 0x00	; 0
     wait_about1s();
  } //end for tt
#else
  for (ww=0;ww<120;ww++) {
     // wait 1 minute for releasing the probes
     lcd_line2();		//Cursor to column 1, row 2
    188e:	80 ec       	ldi	r24, 0xC0	; 192
    1890:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     lcd_clear_line();		// clear total line
    1894:	0e 94 8a 02 	call	0x514	; 0x514 <lcd_clear_line>
     lcd_line2();		//Cursor to column 1, row 2
    1898:	80 ec       	ldi	r24, 0xC0	; 192
    189a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     lcd_fix_string(RELPROBE);	// "Release Probes"
    189e:	8c ec       	ldi	r24, 0xCC	; 204
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     wait_about500ms();
    18a6:	84 e6       	ldi	r24, 0x64	; 100
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>
     if (AllProbesShorted() == 0) break;
    18ae:	0e 94 87 0b 	call	0x170e	; 0x170e <AllProbesShorted>
    18b2:	88 23       	and	r24, r24
    18b4:	19 f0       	breq	.+6      	; 0x18bc <AutoCheck+0x18a>
        wait_about500ms();
     } //end for ww
     wait_about1s();
  } //end for tt
#else
  for (ww=0;ww<120;ww++) {
    18b6:	1f 5f       	subi	r17, 0xFF	; 255
    18b8:	18 37       	cpi	r17, 0x78	; 120
    18ba:	49 f7       	brne	.-46     	; 0x188e <AutoCheck+0x15c>
     wait_about500ms();
     if (AllProbesShorted() == 0) break;
  }
#endif

  lcd_clear();
    18bc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  lcd_fix_string(RIHI);	// "RiHi="
    18c0:	82 e5       	ldi	r24, 0x52	; 82
    18c2:	91 e0       	ldi	r25, 0x01	; 1
    18c4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  DisplayValue(RRpinPL,-1,LCD_CHAR_OMEGA,3);
    18c8:	60 91 42 01 	lds	r22, 0x0142
    18cc:	70 91 43 01 	lds	r23, 0x0143
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	4f ef       	ldi	r20, 0xFF	; 255
    18d6:	24 ef       	ldi	r18, 0xF4	; 244
    18d8:	03 e0       	ldi	r16, 0x03	; 3
    18da:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
  lcd_line2();
    18de:	80 ec       	ldi	r24, 0xC0	; 192
    18e0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_string(RILO);	// "RiLo="
    18e4:	89 e5       	ldi	r24, 0x59	; 89
    18e6:	91 e0       	ldi	r25, 0x01	; 1
    18e8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  DisplayValue(RRpinMI,-1,LCD_CHAR_OMEGA,3);
    18ec:	60 91 47 01 	lds	r22, 0x0147
    18f0:	70 91 48 01 	lds	r23, 0x0148
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	4f ef       	ldi	r20, 0xFF	; 255
    18fa:	24 ef       	ldi	r18, 0xF4	; 244
    18fc:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
  wait_about2s();			//wait 2 seconds
    1900:	80 e9       	ldi	r24, 0x90	; 144
    1902:	91 e0       	ldi	r25, 0x01	; 1
    1904:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>

  //measure Zero offset for Capacity measurement
  PartFound = PART_NONE;
    1908:	10 92 07 01 	sts	0x0107, r1
  ReadCapacity(TP3, TP1);
    190c:	82 e0       	ldi	r24, 0x02	; 2
    190e:	60 e0       	ldi	r22, 0x00	; 0
    1910:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <ReadCapacity>
  adcmv[5] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:3
    1914:	00 91 76 01 	lds	r16, 0x0176
    1918:	10 91 77 01 	lds	r17, 0x0177
    191c:	1c 87       	std	Y+12, r17	; 0x0c
    191e:	0b 87       	std	Y+11, r16	; 0x0b
  ReadCapacity(TP3, TP2);
    1920:	82 e0       	ldi	r24, 0x02	; 2
    1922:	61 e0       	ldi	r22, 0x01	; 1
    1924:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <ReadCapacity>
  adcmv[6] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:3
    1928:	e0 90 76 01 	lds	r14, 0x0176
    192c:	f0 90 77 01 	lds	r15, 0x0177
    1930:	fe 86       	std	Y+14, r15	; 0x0e
    1932:	ed 86       	std	Y+13, r14	; 0x0d
  ReadCapacity(TP2, TP1);
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	60 e0       	ldi	r22, 0x00	; 0
    1938:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <ReadCapacity>
  adcmv[2] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:2
    193c:	c0 90 76 01 	lds	r12, 0x0176
    1940:	d0 90 77 01 	lds	r13, 0x0177
    1944:	de 82       	std	Y+6, r13	; 0x06
    1946:	cd 82       	std	Y+5, r12	; 0x05
  ReadCapacity(TP1, TP3);
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	62 e0       	ldi	r22, 0x02	; 2
    194c:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <ReadCapacity>
  adcmv[1] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:1
    1950:	80 91 76 01 	lds	r24, 0x0176
    1954:	90 91 77 01 	lds	r25, 0x0177
    1958:	9c 83       	std	Y+4, r25	; 0x04
    195a:	8b 83       	std	Y+3, r24	; 0x03
  ReadCapacity(TP2, TP3);
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	62 e0       	ldi	r22, 0x02	; 2
    1960:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <ReadCapacity>
  adcmv[4] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:2
    1964:	80 91 76 01 	lds	r24, 0x0176
    1968:	90 91 77 01 	lds	r25, 0x0177
    196c:	9a 87       	std	Y+10, r25	; 0x0a
    196e:	89 87       	std	Y+9, r24	; 0x09
  ReadCapacity(TP1, TP2);
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	61 e0       	ldi	r22, 0x01	; 1
    1974:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <ReadCapacity>
  adcmv[0] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:1
    1978:	80 91 76 01 	lds	r24, 0x0176
    197c:	90 91 77 01 	lds	r25, 0x0177
    1980:	9a 83       	std	Y+2, r25	; 0x02
    1982:	89 83       	std	Y+1, r24	; 0x01
  adcmv[3] = adcmv[0];				// same as first for the checking loop
    1984:	98 87       	std	Y+8, r25	; 0x08
    1986:	8f 83       	std	Y+7, r24	; 0x07
  lcd_clear();
    1988:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  lcd_fix_string(C0_str);			//output "C0 "
    198c:	80 e6       	ldi	r24, 0x60	; 96
    198e:	91 e0       	ldi	r25, 0x01	; 1
    1990:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
    1994:	b8 01       	movw	r22, r16
    1996:	88 27       	eor	r24, r24
    1998:	77 fd       	sbrc	r23, 7
    199a:	80 95       	com	r24
    199c:	98 2f       	mov	r25, r24
    199e:	40 e0       	ldi	r20, 0x00	; 0
    19a0:	20 e2       	ldi	r18, 0x20	; 32
    19a2:	03 e0       	ldi	r16, 0x03	; 3
    19a4:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
    19a8:	b7 01       	movw	r22, r14
    19aa:	88 27       	eor	r24, r24
    19ac:	77 fd       	sbrc	r23, 7
    19ae:	80 95       	com	r24
    19b0:	98 2f       	mov	r25, r24
    19b2:	40 e0       	ldi	r20, 0x00	; 0
    19b4:	20 e2       	ldi	r18, 0x20	; 32
    19b6:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
    19ba:	b6 01       	movw	r22, r12
    19bc:	88 27       	eor	r24, r24
    19be:	77 fd       	sbrc	r23, 7
    19c0:	80 95       	com	r24
    19c2:	98 2f       	mov	r25, r24
    19c4:	44 ef       	ldi	r20, 0xF4	; 244
    19c6:	26 e4       	ldi	r18, 0x46	; 70
    19c8:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
    19cc:	8e 01       	movw	r16, r28
    19ce:	0f 5f       	subi	r16, 0xFF	; 255
    19d0:	1f 4f       	sbci	r17, 0xFF	; 255
void AutoCheck(void) {
    19d2:	9e 01       	movw	r18, r28
    19d4:	21 5f       	subi	r18, 0xF1	; 241
    19d6:	3f 4f       	sbci	r19, 0xFF	; 255
    19d8:	f8 01       	movw	r30, r16
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {			//checking loop
      if ((adcmv[ww] > 90) || (adcmv[ww] <10)) goto no_c0save;
    19da:	81 91       	ld	r24, Z+
    19dc:	91 91       	ld	r25, Z+
    19de:	0a 97       	sbiw	r24, 0x0a	; 10
    19e0:	81 35       	cpi	r24, 0x51	; 81
    19e2:	91 05       	cpc	r25, r1
    19e4:	e8 f4       	brcc	.+58     	; 0x1a20 <AutoCheck+0x2ee>
  lcd_fix_string(C0_str);			//output "C0 "
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {			//checking loop
    19e6:	e2 17       	cp	r30, r18
    19e8:	f3 07       	cpc	r31, r19
    19ea:	b9 f7       	brne	.-18     	; 0x19da <AutoCheck+0x2a8>
    19ec:	ee 24       	eor	r14, r14
    19ee:	ff 24       	eor	r15, r15
      if ((adcmv[ww] > 90) || (adcmv[ww] <10)) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
    19f0:	f8 01       	movw	r30, r16
    19f2:	60 81       	ld	r22, Z
    19f4:	0e 5f       	subi	r16, 0xFE	; 254
    19f6:	1f 4f       	sbci	r17, 0xFF	; 255
    19f8:	61 5f       	subi	r22, 0xF1	; 241
    19fa:	c7 01       	movw	r24, r14
    19fc:	84 56       	subi	r24, 0x64	; 100
    19fe:	9e 4f       	sbci	r25, 0xFE	; 254
    1a00:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__eewr_byte_m168>
    1a04:	08 94       	sec
    1a06:	e1 1c       	adc	r14, r1
    1a08:	f1 1c       	adc	r15, r1
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {			//checking loop
      if ((adcmv[ww] > 90) || (adcmv[ww] <10)) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
    1a0a:	f7 e0       	ldi	r31, 0x07	; 7
    1a0c:	ef 16       	cp	r14, r31
    1a0e:	f1 04       	cpc	r15, r1
    1a10:	79 f7       	brne	.-34     	; 0x19f0 <AutoCheck+0x2be>
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
  }
  lcd_line2();
    1a12:	80 ec       	ldi	r24, 0xC0	; 192
    1a14:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_string(OK_str);		// output "OK"
    1a18:	8a ee       	ldi	r24, 0xEA	; 234
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
no_c0save:
 #endif
 wait_about2s();		//wait 2 seconds
    1a20:	80 e9       	ldi	r24, 0x90	; 144
    1a22:	91 e0       	ldi	r25, 0x01	; 1
    1a24:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
    1a28:	10 e0       	ldi	r17, 0x00	; 0
 for (ww=0;ww<64;ww++) {
    1a2a:	cc 24       	eor	r12, r12
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
    1a2c:	5a e0       	ldi	r21, 0x0A	; 10
    1a2e:	85 2e       	mov	r8, r21
    1a30:	91 2c       	mov	r9, r1
    1a32:	a1 2c       	mov	r10, r1
    1a34:	b1 2c       	mov	r11, r1
     lcd_data('3');
     lcd_fix2_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1a36:	4e e6       	ldi	r20, 0x6E	; 110
    1a38:	e4 2e       	mov	r14, r20
    1a3a:	41 e0       	ldi	r20, 0x01	; 1
    1a3c:	f4 2e       	mov	r15, r20
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
     lcd_clear();
    1a3e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
     lcd_data('1');
    1a42:	81 e3       	ldi	r24, 0x31	; 49
    1a44:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
     lcd_fix_string(CapZeich);	// "-||-"
    1a48:	8a e1       	ldi	r24, 0x1A	; 26
    1a4a:	91 e0       	ldi	r25, 0x01	; 1
    1a4c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_data('3');
    1a50:	83 e3       	ldi	r24, 0x33	; 51
    1a52:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
     lcd_fix2_string(MinCap_str); // " >100nF!"
    1a56:	8a ee       	ldi	r24, 0xEA	; 234
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
     PartFound = PART_NONE;
    1a5e:	10 92 07 01 	sts	0x0107, r1
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
    1a62:	82 e0       	ldi	r24, 0x02	; 2
    1a64:	60 e0       	ldi	r22, 0x00	; 0
    1a66:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <ReadCapacity>
    1a6a:	20 91 6e 01 	lds	r18, 0x016E
    1a6e:	30 91 6f 01 	lds	r19, 0x016F
    1a72:	40 91 70 01 	lds	r20, 0x0170
    1a76:	50 91 71 01 	lds	r21, 0x0171
    1a7a:	00 91 80 01 	lds	r16, 0x0180
     while (cap.cpre < -9) {
    1a7e:	07 c0       	rjmp	.+14     	; 0x1a8e <AutoCheck+0x35c>
        cap.cpre++;
        cap.cval /= 10;
    1a80:	ca 01       	movw	r24, r20
    1a82:	b9 01       	movw	r22, r18
    1a84:	a5 01       	movw	r20, r10
    1a86:	94 01       	movw	r18, r8
    1a88:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
    1a8c:	0f 5f       	subi	r16, 0xFF	; 255
     lcd_data('3');
     lcd_fix2_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1a8e:	07 3f       	cpi	r16, 0xF7	; 247
    1a90:	bc f3       	brlt	.-18     	; 0x1a80 <AutoCheck+0x34e>
    1a92:	00 93 80 01 	sts	0x0180, r16
    1a96:	20 93 6e 01 	sts	0x016E, r18
    1a9a:	f7 01       	movw	r30, r14
    1a9c:	31 83       	std	Z+1, r19	; 0x01
    1a9e:	42 83       	std	Z+2, r20	; 0x02
    1aa0:	53 83       	std	Z+3, r21	; 0x03
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1aa2:	07 3f       	cpi	r16, 0xF7	; 247
    1aa4:	09 f0       	breq	.+2      	; 0x1aa8 <AutoCheck+0x376>
    1aa6:	b9 c0       	rjmp	.+370    	; 0x1c1a <AutoCheck+0x4e8>
    1aa8:	20 36       	cpi	r18, 0x60	; 96
    1aaa:	31 05       	cpc	r19, r1
    1aac:	41 05       	cpc	r20, r1
    1aae:	51 05       	cpc	r21, r1
    1ab0:	08 f4       	brcc	.+2      	; 0x1ab4 <AutoCheck+0x382>
    1ab2:	b3 c0       	rjmp	.+358    	; 0x1c1a <AutoCheck+0x4e8>
    1ab4:	20 3f       	cpi	r18, 0xF0	; 240
    1ab6:	f5 e5       	ldi	r31, 0x55	; 85
    1ab8:	3f 07       	cpc	r19, r31
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	4f 07       	cpc	r20, r31
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	5f 07       	cpc	r21, r31
    1ac2:	08 f0       	brcs	.+2      	; 0x1ac6 <AutoCheck+0x394>
    1ac4:	aa c0       	rjmp	.+340    	; 0x1c1a <AutoCheck+0x4e8>
        cap_found++;
    1ac6:	1f 5f       	subi	r17, 0xFF	; 255
     } else {
        cap_found = 0;		// wait for stable connection
     }
     if (cap_found > 1) {
    1ac8:	12 30       	cpi	r17, 0x02	; 2
    1aca:	09 f0       	breq	.+2      	; 0x1ace <AutoCheck+0x39c>
    1acc:	a7 c0       	rjmp	.+334    	; 0x1c1c <AutoCheck+0x4ea>
        // value of capacitor is correct
        (void) eeprom_write_word((uint16_t *)(&ref_offset), load_diff);	// hold zero offset + slew rate dependend offset
    1ace:	60 91 82 01 	lds	r22, 0x0182
    1ad2:	70 91 83 01 	lds	r23, 0x0183
    1ad6:	8a e9       	ldi	r24, 0x9A	; 154
    1ad8:	91 e0       	ldi	r25, 0x01	; 1
    1ada:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <__eewr_word_m168>
        lcd_clear();
    1ade:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
        lcd_fix2_string(REF_C_str);	// "REF_C="
    1ae2:	82 ef       	ldi	r24, 0xF2	; 242
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
        lcd_string(itoa(load_diff, outval, 10));	//output REF_C_KORR
    1aea:	80 91 82 01 	lds	r24, 0x0182
    1aee:	90 91 83 01 	lds	r25, 0x0183
    1af2:	6c e0       	ldi	r22, 0x0C	; 12
    1af4:	71 e0       	ldi	r23, 0x01	; 1
    1af6:	4a e0       	ldi	r20, 0x0A	; 10
    1af8:	50 e0       	ldi	r21, 0x00	; 0
    1afa:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <itoa>
    1afe:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_string>
        wait_about1s();
        }
//#######################################
#endif
  #ifdef AUTOSCALE_ADC
        ADC_PORT =  TXD_VAL;	//ADC-Port 1 to GND
    1b02:	88 e0       	ldi	r24, 0x08	; 8
    1b04:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    1b06:	89 e0       	ldi	r24, 0x09	; 9
    1b08:	87 b9       	out	0x07, r24	; 7
        R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1b0a:	80 e2       	ldi	r24, 0x20	; 32
    1b0c:	84 b9       	out	0x04, r24	; 4
        do {
           adcmv[0] = ReadADC(TP3);
    1b0e:	82 e0       	ldi	r24, 0x02	; 2
    1b10:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
        } while (adcmv[0] > 980);
    1b14:	23 e0       	ldi	r18, 0x03	; 3
    1b16:	85 3d       	cpi	r24, 0xD5	; 213
    1b18:	92 07       	cpc	r25, r18
    1b1a:	cc f7       	brge	.-14     	; 0x1b0e <AutoCheck+0x3dc>
        R_DDR = 0;		//all Pins to input 
    1b1c:	14 b8       	out	0x04, r1	; 4
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1b1e:	10 92 3f 01 	sts	0x013F, r1
    1b22:	10 92 3e 01 	sts	0x013E, r1
        adcmv[0] = ReadADC(TP3);  // get cap voltage with VCC reference
    1b26:	82 e0       	ldi	r24, 0x02	; 2
    1b28:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
    1b2c:	4c 01       	movw	r8, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1b2e:	82 e9       	ldi	r24, 0x92	; 146
    1b30:	91 e0       	ldi	r25, 0x01	; 1
    1b32:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__eerd_byte_m168>
    1b36:	99 27       	eor	r25, r25
    1b38:	87 fd       	sbrc	r24, 7
    1b3a:	90 95       	com	r25
    1b3c:	20 91 44 01 	lds	r18, 0x0144
    1b40:	30 91 45 01 	lds	r19, 0x0145
    1b44:	82 0f       	add	r24, r18
    1b46:	93 1f       	adc	r25, r19
    1b48:	90 93 3f 01 	sts	0x013F, r25
    1b4c:	80 93 3e 01 	sts	0x013E, r24
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
    1b50:	82 e0       	ldi	r24, 0x02	; 2
    1b52:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
    1b56:	8c 01       	movw	r16, r24
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1b58:	10 92 3f 01 	sts	0x013F, r1
    1b5c:	10 92 3e 01 	sts	0x013E, r1
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
    1b60:	82 e0       	ldi	r24, 0x02	; 2
    1b62:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
    1b66:	5c 01       	movw	r10, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1b68:	c0 90 44 01 	lds	r12, 0x0144
    1b6c:	d0 90 45 01 	lds	r13, 0x0145
    1b70:	82 e9       	ldi	r24, 0x92	; 146
    1b72:	91 e0       	ldi	r25, 0x01	; 1
    1b74:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__eerd_byte_m168>
    1b78:	99 27       	eor	r25, r25
    1b7a:	87 fd       	sbrc	r24, 7
    1b7c:	90 95       	com	r25
    1b7e:	8c 0d       	add	r24, r12
    1b80:	9d 1d       	adc	r25, r13
    1b82:	90 93 3f 01 	sts	0x013F, r25
    1b86:	80 93 3e 01 	sts	0x013E, r24
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1b8a:	82 e9       	ldi	r24, 0x92	; 146
    1b8c:	91 e0       	ldi	r25, 0x01	; 1
    1b8e:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__eerd_byte_m168>
    1b92:	f8 2e       	mov	r15, r24
        lcd_line2();
    1b94:	80 ec       	ldi	r24, 0xC0	; 192
    1b96:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
        lcd_fix2_string(REF_R_str);	// "REF_R="
    1b9a:	89 ef       	ldi	r24, 0xF9	; 249
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1ba2:	82 e9       	ldi	r24, 0x92	; 146
    1ba4:	91 e0       	ldi	r25, 0x01	; 1
    1ba6:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__eerd_byte_m168>
        ADCconfig.U_Bandgap = ADC_internal_reference;
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
        ADCconfig.U_Bandgap = ADC_internal_reference;
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1baa:	33 e0       	ldi	r19, 0x03	; 3
    1bac:	e3 2e       	mov	r14, r19
    1bae:	e8 0e       	add	r14, r24
    1bb0:	a8 0c       	add	r10, r8
    1bb2:	b9 1c       	adc	r11, r9
    1bb4:	a0 1a       	sub	r10, r16
    1bb6:	b1 0a       	sbc	r11, r17
    1bb8:	a0 1a       	sub	r10, r16
    1bba:	b1 0a       	sbc	r11, r17
    1bbc:	b5 01       	movw	r22, r10
    1bbe:	88 27       	eor	r24, r24
    1bc0:	77 fd       	sbrc	r23, 7
    1bc2:	80 95       	com	r24
    1bc4:	98 2f       	mov	r25, r24
    1bc6:	2f 2d       	mov	r18, r15
    1bc8:	33 27       	eor	r19, r19
    1bca:	27 fd       	sbrc	r18, 7
    1bcc:	30 95       	com	r19
    1bce:	2c 0d       	add	r18, r12
    1bd0:	3d 1d       	adc	r19, r13
    1bd2:	40 e0       	ldi	r20, 0x00	; 0
    1bd4:	50 e0       	ldi	r21, 0x00	; 0
    1bd6:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
    1bda:	00 0f       	add	r16, r16
    1bdc:	11 1f       	adc	r17, r17
    1bde:	98 01       	movw	r18, r16
    1be0:	44 27       	eor	r20, r20
    1be2:	37 fd       	sbrc	r19, 7
    1be4:	40 95       	com	r20
    1be6:	54 2f       	mov	r21, r20
    1be8:	0e 94 7d 1e 	call	0x3cfa	; 0x3cfa <__divmodsi4>
        lcd_line2();
        lcd_fix2_string(REF_R_str);	// "REF_R="
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1bec:	e2 0e       	add	r14, r18
        (void) eeprom_write_byte((uint8_t *)(&RefDiff), (uint8_t)udiff2);	// hold offset for true reference Voltage
    1bee:	82 e9       	ldi	r24, 0x92	; 146
    1bf0:	91 e0       	ldi	r25, 0x01	; 1
    1bf2:	6e 2d       	mov	r22, r14
    1bf4:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__eewr_byte_m168>
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
    1bf8:	8e 2d       	mov	r24, r14
    1bfa:	99 27       	eor	r25, r25
    1bfc:	87 fd       	sbrc	r24, 7
    1bfe:	90 95       	com	r25
    1c00:	6c e0       	ldi	r22, 0x0C	; 12
    1c02:	71 e0       	ldi	r23, 0x01	; 1
    1c04:	4a e0       	ldi	r20, 0x0A	; 10
    1c06:	50 e0       	ldi	r21, 0x00	; 0
    1c08:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <itoa>
    1c0c:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_string>
  #endif
        wait_about4s();
    1c10:	80 e2       	ldi	r24, 0x20	; 32
    1c12:	93 e0       	ldi	r25, 0x03	; 3
    1c14:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>
        break;
    1c18:	1b c0       	rjmp	.+54     	; 0x1c50 <AutoCheck+0x51e>
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1c1a:	10 e0       	ldi	r17, 0x00	; 0
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
  #endif
        wait_about4s();
        break;
     }
     lcd_line2();
    1c1c:	80 ec       	ldi	r24, 0xC0	; 192
    1c1e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     DisplayValue(cap.cval,cap.cpre,'F',4);
    1c22:	60 91 6e 01 	lds	r22, 0x016E
    1c26:	70 91 6f 01 	lds	r23, 0x016F
    1c2a:	80 91 70 01 	lds	r24, 0x0170
    1c2e:	90 91 71 01 	lds	r25, 0x0171
    1c32:	40 91 80 01 	lds	r20, 0x0180
    1c36:	26 e4       	ldi	r18, 0x46	; 70
    1c38:	04 e0       	ldi	r16, 0x04	; 4
    1c3a:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
     wait_about200ms();			// wait additional time
    1c3e:	88 e2       	ldi	r24, 0x28	; 40
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>
 wait_about2s();		//wait 2 seconds
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
    1c46:	c3 94       	inc	r12
    1c48:	8c 2d       	mov	r24, r12
    1c4a:	80 34       	cpi	r24, 0x40	; 64
    1c4c:	09 f0       	breq	.+2      	; 0x1c50 <AutoCheck+0x51e>
    1c4e:	f7 ce       	rjmp	.-530    	; 0x1a3e <AutoCheck+0x30c>
     wait_about200ms();			// wait additional time
  } // end for ww
 #endif


  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    1c50:	89 e1       	ldi	r24, 0x19	; 25
    1c52:	80 93 3c 01 	sts	0x013C, r24
  lcd_clear();
    1c56:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  lcd_fix2_string(VERSION_str);	//"Version ..."
    1c5a:	88 ed       	ldi	r24, 0xD8	; 216
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	0e 94 43 01 	call	0x286	; 0x286 <lcd_pgm_string>
  lcd_line2();
    1c62:	80 ec       	ldi	r24, 0xC0	; 192
    1c64:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_string(ATE);		//"Selftest End"
    1c68:	8b ed       	ldi	r24, 0xDB	; 219
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        // if key is pressed, don't repeat
        break;
     }
  }
 #endif
 PartFound = PART_NONE;
    1c70:	10 92 07 01 	sts	0x0107, r1
 wait_about1s();			//wait 1 seconds
    1c74:	88 ec       	ldi	r24, 0xC8	; 200
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>
 lcd_line2();
    1c7c:	80 ec       	ldi	r24, 0xC0	; 192
    1c7e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
 lcd_clear_line();			// clear total line
    1c82:	0e 94 8a 02 	call	0x514	; 0x514 <lcd_clear_line>
#endif
 } 
    1c86:	2e 96       	adiw	r28, 0x0e	; 14
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	cf 91       	pop	r28
    1c94:	df 91       	pop	r29
    1c96:	1f 91       	pop	r17
    1c98:	0f 91       	pop	r16
    1c9a:	ff 90       	pop	r15
    1c9c:	ef 90       	pop	r14
    1c9e:	df 90       	pop	r13
    1ca0:	cf 90       	pop	r12
    1ca2:	bf 90       	pop	r11
    1ca4:	af 90       	pop	r10
    1ca6:	9f 90       	pop	r9
    1ca8:	8f 90       	pop	r8
    1caa:	08 95       	ret

00001cac <GetIr>:
/* Get residual current in reverse direction of a diode */ 



//=================================================================
void GetIr(uint8_t hipin, uint8_t lopin) {
    1cac:	0f 93       	push	r16
    1cae:	cf 93       	push	r28
    1cb0:	df 93       	push	r29
  unsigned int ir_nano;
//  unsigned int ir_micro;
  uint8_t LoPinR_L;
  uint8_t HiADC;

  HiADC = pgm_read_byte(&PinADCtab[hipin]);
    1cb2:	e8 2f       	mov	r30, r24
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	ed 5f       	subi	r30, 0xFD	; 253
    1cb8:	fe 4f       	sbci	r31, 0xFE	; 254
    1cba:	e4 91       	lpm	r30, Z+
  ADC_PORT = HiADC | TXD_VAL;		// switch ADC port to high level
    1cbc:	e8 60       	ori	r30, 0x08	; 8
    1cbe:	e8 b9       	out	0x08, r30	; 8
  ADC_DDR = HiADC | TXD_MSK;		// switch High Pin direct to VCC
    1cc0:	e7 b9       	out	0x07, r30	; 7
  LoPinR_L = pgm_read_byte(&PinRLtab[lopin]);  //R_L mask for LowPin R_L load
    1cc2:	e6 2f       	mov	r30, r22
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	e0 50       	subi	r30, 0x00	; 0
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	e4 91       	lpm	r30, Z+
  R_PORT = 0;				// switch R-Port to GND
    1ccc:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinR_L + LoPinR_L;		// switch R_H port for LowPin to output (GND)
    1cce:	ee 0f       	add	r30, r30
    1cd0:	e4 b9       	out	0x04, r30	; 4
  u_res = W5msReadADC(lopin);		// read voltage
    1cd2:	86 2f       	mov	r24, r22
    1cd4:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
    1cd8:	ec 01       	movw	r28, r24
  if (u_res == 0) return;		// no Output, if no current in reverse direction
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	f9 f0       	breq	.+62     	; 0x1d1c <GetIr+0x70>
  lcd_fix_string(Ir_str);		// output text "  Ir="
    1cde:	8a e3       	ldi	r24, 0x3A	; 58
    1ce0:	91 e0       	ldi	r25, 0x01	; 1
    1ce2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
#ifdef WITH_IRMICRO
  if (u_res < 2500) {
#endif
     /* R_H_VAL has units of 10 Ohm, u_res has units of mV, ir_nano has units of nA */
     ir_nano = (unsigned long)(u_res * 100000UL) / R_H_VAL;
    1ce6:	be 01       	movw	r22, r28
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	20 ea       	ldi	r18, 0xA0	; 160
    1cee:	36 e8       	ldi	r19, 0x86	; 134
    1cf0:	41 e0       	ldi	r20, 0x01	; 1
    1cf2:	50 e0       	ldi	r21, 0x00	; 0
    1cf4:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
    1cf8:	28 e9       	ldi	r18, 0x98	; 152
    1cfa:	37 eb       	ldi	r19, 0xB7	; 183
    1cfc:	40 e0       	ldi	r20, 0x00	; 0
    1cfe:	50 e0       	ldi	r21, 0x00	; 0
    1d00:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
     DisplayValue(ir_nano,-9,'A',2);	// output two digits of current with nA units
    1d04:	b9 01       	movw	r22, r18
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	47 ef       	ldi	r20, 0xF7	; 247
    1d0c:	21 e4       	ldi	r18, 0x41	; 65
    1d0e:	02 e0       	ldi	r16, 0x02	; 2
    1d10:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
     /* RR680MI has units of 0.1 Ohm, u_res has units of mV, ir_micro has units of uA */
     ir_micro = (unsigned long)(u_res * 10000UL) / RR680MI;
     DisplayValue(ir_micro,-6,'A',2);	// output two digits of current in uA units
  }
#endif
  ADC_DDR = TXD_MSK;			// switch off
    1d14:	88 e0       	ldi	r24, 0x08	; 8
    1d16:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;			// switch off
    1d18:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;				// switch off current
    1d1a:	14 b8       	out	0x04, r1	; 4

  return ;
}
    1d1c:	df 91       	pop	r29
    1d1e:	cf 91       	pop	r28
    1d20:	0f 91       	pop	r16
    1d22:	08 95       	ret

00001d24 <main>:
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
  EMPTY_INTERRUPT(ADC_vect);
#endif

//begin of transistortester program
int main(void) {
    1d24:	8f 92       	push	r8
    1d26:	9f 92       	push	r9
    1d28:	bf 92       	push	r11
    1d2a:	cf 92       	push	r12
    1d2c:	df 92       	push	r13
    1d2e:	ef 92       	push	r14
    1d30:	ff 92       	push	r15
    1d32:	0f 93       	push	r16
    1d34:	1f 93       	push	r17
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	0f 92       	push	r0
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
#ifdef SEARCH_PARASITIC
  unsigned long n_cval;		// capacitor value of NPN B-E diode, for deselecting the parasitic Transistor
  int8_t n_cpre;		// capacitor prefix of NPN B-E diode
#endif
  //switch on
  ON_DDR = (1<<ON_PIN);			// switch to output
    1d40:	80 e4       	ldi	r24, 0x40	; 64
    1d42:	8a b9       	out	0x0a, r24	; 10
#ifdef PULLUP_DISABLE
  ON_PORT = (1<<ON_PIN); 		// switch power on 
    1d44:	8b b9       	out	0x0b, r24	; 11
#else
  ON_PORT = (1<<ON_PIN)|(1<<RST_PIN); 	// switch power on , enable internal Pullup for Start-Pin
#endif
  uint8_t tmp;
  //ADC-Init
  ADCSRA = (1<<ADEN) | AUTO_CLOCK_DIV;	//prescaler=8 or 64 (if 8Mhz clock)
    1d46:	86 e8       	ldi	r24, 0x86	; 134
    1d48:	80 93 7a 00 	sts	0x007A, r24
// #define WDRF_HOME MCU_STATUS_REG
 #define WDRF_HOME MCUCSR
#else
 #define WDRF_HOME MCUSR
#endif
  tmp = (WDRF_HOME & (1<<WDRF));	// save Watch Dog Flag
    1d4c:	14 b7       	in	r17, 0x34	; 52
  WDRF_HOME &= ~(1<<WDRF);	 	//reset Watch Dog flag
    1d4e:	84 b7       	in	r24, 0x34	; 52
    1d50:	87 7f       	andi	r24, 0xF7	; 247
    1d52:	84 bf       	out	0x34, r24	; 52
  wdt_disable();			// disable Watch Dog
    1d54:	88 e1       	ldi	r24, 0x18	; 24
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	f8 94       	cli
    1d5a:	80 93 60 00 	sts	0x0060, r24
    1d5e:	10 92 60 00 	sts	0x0060, r1
    1d62:	0f be       	out	0x3f, r0	; 63
#ifndef INHIBIT_SLEEP_MODE
  // switch off unused Parts
  PRR = (1<<PRTWI) | (1<<PRTIM0) | (1<<PRSPI) | (1<<PRUSART0);
    1d64:	86 ea       	ldi	r24, 0xA6	; 166
    1d66:	80 93 64 00 	sts	0x0064, r24
  DIDR0 = (1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D);	
    1d6a:	88 e3       	ldi	r24, 0x38	; 56
    1d6c:	80 93 7e 00 	sts	0x007E, r24
  TCCR2A = (0<<WGM21) | (0<<WGM20);		// Counter 2 normal mode
    1d70:	10 92 b0 00 	sts	0x00B0, r1
 #if F_CPU == 4000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (0<<CS20);	//prescaler 256, 64us @ 2MHz
  #define T2_PERIOD 64
 #endif 
 #if F_CPU >= 8000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (1<<CS20);	//prescaler 1024, 128us @ 8MHz, 64us @ 16MHz
    1d74:	87 e0       	ldi	r24, 0x07	; 7
    1d76:	80 93 b1 00 	sts	0x00B1, r24
  #define T2_PERIOD (1024 / (F_CPU / 1000000UL));	/* set to 128 or 64 us */
 #endif 
  sei();				// enable interrupts
    1d7a:	78 94       	sei
#endif
  lcd_init();				//initialize LCD
    1d7c:	0e 94 03 01 	call	0x206	; 0x206 <lcd_init>
	
//  ADC_PORT = TXD_VAL;
//  ADC_DDR = TXD_MSK;
  if(tmp) { 
    1d80:	13 ff       	sbrs	r17, 3
    1d82:	0a c0       	rjmp	.+20     	; 0x1d98 <main+0x74>
     // check if  Watchdog-Event 
     // this happens, if the Watchdog is not reset for 2s
     // can happen, if any loop in the Program doen't finish.
     lcd_line1();
    1d84:	80 e8       	ldi	r24, 0x80	; 128
    1d86:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     lcd_fix_string(TestTimedOut);	//Output Timeout
    1d8a:	83 eb       	ldi	r24, 0xB3	; 179
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     wait_about3s();				//wait for 3 s
    1d92:	88 e5       	ldi	r24, 0x58	; 88
    1d94:	92 e0       	ldi	r25, 0x02	; 2
    1d96:	9c c0       	rjmp	.+312    	; 0x1ed0 <main+0x1ac>
     ON_PORT = 0;			//shut off!
//     ON_DDR = (1<<ON_PIN);		//switch to GND
     return 0;
  }
  LCDLoadCustomChar(LCD_CHAR_DIODE1);	//Custom-Character Diode symbol
    1d98:	88 e4       	ldi	r24, 0x48	; 72
    1d9a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_customchar(DiodeIcon1);	//load Character  >|
    1d9e:	8a e6       	ldi	r24, 0x6A	; 106
    1da0:	91 e0       	ldi	r25, 0x01	; 1
    1da2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_DIODE2);	//Custom-Character 
    1da6:	80 e5       	ldi	r24, 0x50	; 80
    1da8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_customchar(DiodeIcon2);	//load Character  |<
    1dac:	82 e7       	ldi	r24, 0x72	; 114
    1dae:	91 e0       	ldi	r25, 0x01	; 1
    1db0:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_CAP);	//Custom-Character  Capacitor symbol
    1db4:	88 e5       	ldi	r24, 0x58	; 88
    1db6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_customchar(CapIcon);		//load Character  ||
    1dba:	8a e7       	ldi	r24, 0x7A	; 122
    1dbc:	91 e0       	ldi	r25, 0x01	; 1
    1dbe:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS1);	//Custom-Character Resistor symbol
    1dc2:	88 e7       	ldi	r24, 0x78	; 120
    1dc4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_customchar(ResIcon1);		//load Character  [
    1dc8:	82 e8       	ldi	r24, 0x82	; 130
    1dca:	91 e0       	ldi	r25, 0x01	; 1
    1dcc:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS2);	//Custom-Character 
    1dd0:	80 e7       	ldi	r24, 0x70	; 112
    1dd2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_customchar(ResIcon2);		//load Character  ]
    1dd6:	8a e8       	ldi	r24, 0x8A	; 138
    1dd8:	91 e0       	ldi	r25, 0x01	; 1
    1dda:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_fix_customchar>
#endif
#ifdef PULLUP_DISABLE
 #ifdef __AVR_ATmega8__
  SFIOR = (1<<PUD);		// disable Pull-Up Resistors mega8
 #else
  MCUCR = (1<<PUD);		// disable Pull-Up Resistors mega168 family
    1dde:	80 e1       	ldi	r24, 0x10	; 16
    1de0:	85 bf       	out	0x35, r24	; 53
  }
#else
  #define display_time OFF_WAIT_TIME
#endif

  empty_count = 0;
    1de2:	10 92 5a 01 	sts	0x015A, r1
  mess_count = 0;
    1de6:	10 92 0b 01 	sts	0x010B, r1
  lcd_line1();
#else
  lcd_clear();				// clear total display
#endif

  _trans = &ntrans;			// default transistor structure to show
    1dea:	ac e4       	ldi	r26, 0x4C	; 76
    1dec:	ca 2e       	mov	r12, r26
    1dee:	a1 e0       	ldi	r26, 0x01	; 1
    1df0:	da 2e       	mov	r13, r26
    goto end;
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    if(PartMode&1) {
       lcd_data('P');			//P-channel
       _trans = &ptrans;
    1df2:	fe e5       	ldi	r31, 0x5E	; 94
    1df4:	8f 2e       	mov	r8, r31
    1df6:	f1 e0       	ldi	r31, 0x01	; 1
    1df8:	9f 2e       	mov	r9, r31
  mess_count = 0;

//*****************************************************************
//Entry: if start key is pressed before shut down
start:
  PartFound = PART_NONE;	// no part found
    1dfa:	10 92 07 01 	sts	0x0107, r1
  NumOfDiodes = 0;		// Number of diodes = 0
    1dfe:	10 92 05 01 	sts	0x0105, r1
  ptrans.count = 0;		// Number of found P type transistors
    1e02:	10 92 6b 01 	sts	0x016B, r1
  ntrans.count = 0;		// Number of found N type transistors
    1e06:	10 92 59 01 	sts	0x0159, r1
  PartMode = 0;
    1e0a:	10 92 06 01 	sts	0x0106, r1
  WithReference = 0;		// no precision reference voltage
    1e0e:	10 92 49 01 	sts	0x0149, r1
  lcd_clear();			// clear the LCD
    1e12:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
  ADC_DDR = TXD_MSK;		//activate Software-UART 
    1e16:	88 e0       	ldi	r24, 0x08	; 8
    1e18:	87 b9       	out	0x07, r24	; 7
  ResistorsFound = 0;		// no resistors found
    1e1a:	10 92 6c 01 	sts	0x016C, r1
  cap.ca = 0;
    1e1e:	10 92 7e 01 	sts	0x017E, r1
  cap.cb = 0;
    1e22:	10 92 7f 01 	sts	0x017F, r1
#ifdef WITH_UART
  uart_newline();		// start of new measurement
    1e26:	0e 94 df 00 	call	0x1be	; 0x1be <uart_newline>
#endif
  ADCconfig.RefFlag = 0;
    1e2a:	10 92 3d 01 	sts	0x013D, r1
  Calibrate_UR();		// get Ref Voltages and Pin resistance
    1e2e:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <Calibrate_UR>
  lcd_line1();			// Cursor to 1. row, column 1
    1e32:	80 e8       	ldi	r24, 0x80	; 128
    1e34:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  
  ADCconfig.U_Bandgap = ADC_internal_reference;	// set internal reference voltage for ADC
    1e38:	82 e9       	ldi	r24, 0x92	; 146
    1e3a:	91 e0       	ldi	r25, 0x01	; 1
    1e3c:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__eerd_byte_m168>
    1e40:	99 27       	eor	r25, r25
    1e42:	87 fd       	sbrc	r24, 7
    1e44:	90 95       	com	r25
    1e46:	20 91 44 01 	lds	r18, 0x0144
    1e4a:	30 91 45 01 	lds	r19, 0x0145
    1e4e:	82 0f       	add	r24, r18
    1e50:	93 1f       	adc	r25, r19
    1e52:	90 93 3f 01 	sts	0x013F, r25
    1e56:	80 93 3e 01 	sts	0x013E, r24

#ifdef BAT_CHECK
  // Battery check is selected
  ReadADC(TPBAT);	//Dummy-Readout
    1e5a:	85 e0       	ldi	r24, 0x05	; 5
    1e5c:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
  ptrans.uBE = W5msReadADC(TPBAT); 	//with 5V reference
    1e60:	85 e0       	ldi	r24, 0x05	; 5
    1e62:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
    1e66:	90 93 63 01 	sts	0x0163, r25
    1e6a:	80 93 62 01 	sts	0x0162, r24
  lcd_fix_string(Bat_str);		//output: "Bat. "
    1e6e:	84 ee       	ldi	r24, 0xE4	; 228
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
//  DisplayValue(cap.cval,-2,'V',2);		// Display 2 Digits of this 10mV units
#if BAT_NUMERATOR <= (0xffff/U_VCC)
  cap.cval = (ptrans.uBE*BAT_NUMERATOR)/BAT_DENOMINATOR + BAT_OUT;
#else
 #if (BAT_NUMERATOR == 133) && (BAT_DENOMINATOR == 33)
  cap.cval = (ptrans.uBE*4)+BAT_OUT;		// usually output only 2 digits
    1e76:	60 91 62 01 	lds	r22, 0x0162
    1e7a:	70 91 63 01 	lds	r23, 0x0163
    1e7e:	66 0f       	add	r22, r22
    1e80:	77 1f       	adc	r23, r23
    1e82:	66 0f       	add	r22, r22
    1e84:	77 1f       	adc	r23, r23
    1e86:	6a 56       	subi	r22, 0x6A	; 106
    1e88:	7f 4f       	sbci	r23, 0xFF	; 255
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	60 93 6e 01 	sts	0x016E, r22
    1e92:	70 93 6f 01 	sts	0x016F, r23
    1e96:	80 93 70 01 	sts	0x0170, r24
    1e9a:	90 93 71 01 	sts	0x0171, r25
 #else
  cap.cval = ((unsigned long)ptrans.uBE*BAT_NUMERATOR)/BAT_DENOMINATOR + BAT_OUT;
 #endif
#endif
  DisplayValue(cap.cval,-3,'V',2);		// Display 2 Digits of this 10mV units
    1e9e:	4d ef       	ldi	r20, 0xFD	; 253
    1ea0:	26 e5       	ldi	r18, 0x56	; 86
    1ea2:	02 e0       	ldi	r16, 0x02	; 2
    1ea4:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
  lcd_space();
    1ea8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>
  // less than 1.3 V only .1V difference to Warn-Level
  #define WARN_LEVEL (((unsigned long)(BAT_POOR+100)*(unsigned long)BAT_DENOMINATOR)/BAT_NUMERATOR)
 #endif
 #define POOR_LEVEL (((unsigned long)(BAT_POOR)*(unsigned long)BAT_DENOMINATOR)/BAT_NUMERATOR)
  // check the battery voltage
  if (ptrans.uBE <  WARN_LEVEL) {
    1eac:	80 91 62 01 	lds	r24, 0x0162
    1eb0:	90 91 63 01 	lds	r25, 0x0163
    1eb4:	26 e0       	ldi	r18, 0x06	; 6
    1eb6:	8a 3f       	cpi	r24, 0xFA	; 250
    1eb8:	92 07       	cpc	r25, r18
    1eba:	f8 f4       	brcc	.+62     	; 0x1efa <main+0x1d6>
     //Vcc < 7,3V; show Warning 
     if(ptrans.uBE < POOR_LEVEL) {	
    1ebc:	e6 e0       	ldi	r30, 0x06	; 6
    1ebe:	83 33       	cpi	r24, 0x33	; 51
    1ec0:	9e 07       	cpc	r25, r30
    1ec2:	c0 f4       	brcc	.+48     	; 0x1ef4 <main+0x1d0>
        //Vcc <6,3V; no proper operation is possible
        lcd_fix_string(BatEmpty);	//Battery empty!
    1ec4:	8a e6       	ldi	r24, 0x6A	; 106
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        wait_about2s();
    1ecc:	80 e9       	ldi	r24, 0x90	; 144
    1ece:	91 e0       	ldi	r25, 0x01	; 1
    1ed0:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>
        PORTD = 0;			//switch power off
    1ed4:	1b b8       	out	0x0b, r1	; 11
  }
#else
  goto start;	// POWER_OFF not selected, repeat measurement
#endif
  return 0;
}   // end main
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	0f 90       	pop	r0
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	1f 91       	pop	r17
    1ee2:	0f 91       	pop	r16
    1ee4:	ff 90       	pop	r15
    1ee6:	ef 90       	pop	r14
    1ee8:	df 90       	pop	r13
    1eea:	cf 90       	pop	r12
    1eec:	bf 90       	pop	r11
    1eee:	9f 90       	pop	r9
    1ef0:	8f 90       	pop	r8
    1ef2:	08 95       	ret
        lcd_fix_string(BatEmpty);	//Battery empty!
        wait_about2s();
        PORTD = 0;			//switch power off
        return 0;
     }
     lcd_fix_string(BatWeak);		//Battery weak
    1ef4:	85 e6       	ldi	r24, 0x65	; 101
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <main+0x1da>
  } else { // Battery-voltage OK
     lcd_fix_string(OK_str); 		// "OK"
    1efa:	8a ee       	ldi	r24, 0xEA	; 234
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  }
#else
  lcd_fix2_string(VERSION_str);		// if no Battery check, Version .. in row 1
#endif
#ifdef WDT_enabled
  wdt_enable(WDTO_2S);		//Watchdog on
    1f02:	2f e0       	ldi	r18, 0x0F	; 15
    1f04:	88 e1       	ldi	r24, 0x18	; 24
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	0f b6       	in	r0, 0x3f	; 63
    1f0a:	f8 94       	cli
    1f0c:	a8 95       	wdr
    1f0e:	80 93 60 00 	sts	0x0060, r24
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	20 93 60 00 	sts	0x0060, r18
#endif

//  wait_about1s();			// add more time for reading batterie voltage
  // begin tests
#ifdef AUTO_RH
  RefVoltage();			//compute RHmultip = f(reference voltage)
    1f18:	0e 94 48 02 	call	0x490	; 0x490 <RefVoltage>
#endif
#if FLASHEND > 0x1fff
  if (WithReference) {
    1f1c:	80 91 49 01 	lds	r24, 0x0149
    1f20:	88 23       	and	r24, r24
    1f22:	f1 f0       	breq	.+60     	; 0x1f60 <main+0x23c>
     /* 2.5V precision reference is checked OK */
     if ((mess_count == 0) && (empty_count == 0)) {
    1f24:	80 91 0b 01 	lds	r24, 0x010B
    1f28:	88 23       	and	r24, r24
    1f2a:	d1 f4       	brne	.+52     	; 0x1f60 <main+0x23c>
    1f2c:	80 91 5a 01 	lds	r24, 0x015A
    1f30:	88 23       	and	r24, r24
    1f32:	b1 f4       	brne	.+44     	; 0x1f60 <main+0x23c>
         /* display VCC= only first time */
         lcd_line2();
    1f34:	80 ec       	ldi	r24, 0xC0	; 192
    1f36:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
         lcd_fix_string(VCC_str);		// VCC=
    1f3a:	84 e2       	ldi	r24, 0x24	; 36
    1f3c:	91 e0       	ldi	r25, 0x01	; 1
    1f3e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
         DisplayValue(ADCconfig.U_AVCC,-3,'V',3);	// Display 3 Digits of this mV units
    1f42:	60 91 40 01 	lds	r22, 0x0140
    1f46:	70 91 41 01 	lds	r23, 0x0141
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	4d ef       	ldi	r20, 0xFD	; 253
    1f50:	26 e5       	ldi	r18, 0x56	; 86
    1f52:	03 e0       	ldi	r16, 0x03	; 3
    1f54:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
         wait_about1s();
    1f58:	88 ec       	ldi	r24, 0xC8	; 200
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>
     wait_about300ms();
  }
#endif

#ifndef DebugOut
  lcd_line2();			//LCD position row 2, column 1
    1f60:	80 ec       	ldi	r24, 0xC0	; 192
    1f62:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
#endif
  EntladePins();		// discharge all capacitors!
    1f66:	0e 94 ad 01 	call	0x35a	; 0x35a <EntladePins>
  if(PartFound == PART_CELL) {
    1f6a:	80 91 07 01 	lds	r24, 0x0107
    1f6e:	88 30       	cpi	r24, 0x08	; 8
    1f70:	39 f4       	brne	.+14     	; 0x1f80 <main+0x25c>
    lcd_clear();
    1f72:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
    lcd_fix_string(Cell_str);	// display "Cell!"
    1f76:	8e e1       	ldi	r24, 0x1E	; 30
    1f78:	91 e0       	ldi	r25, 0x01	; 1
    1f7a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    goto end2;
    1f7e:	a8 c3       	rjmp	.+1872   	; 0x26d0 <main+0x9ac>
  }

#ifdef CHECK_CALL
  AutoCheck();			//check, if selftest should be done
    1f80:	0e 94 99 0b 	call	0x1732	; 0x1732 <AutoCheck>
#endif
  lcd_line2();			//LCD position row2, column 1
    1f84:	80 ec       	ldi	r24, 0xC0	; 192
    1f86:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_string(TestRunning);		//String: testing...
    1f8a:	8a e5       	ldi	r24, 0x5A	; 90
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     
  // check all 6 combinations for the 3 pins 
//         High  Low  Tri
  CheckPins(TP1, TP2, TP3);
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	61 e0       	ldi	r22, 0x01	; 1
    1f96:	42 e0       	ldi	r20, 0x02	; 2
    1f98:	0e 94 2c 04 	call	0x858	; 0x858 <CheckPins>
  CheckPins(TP2, TP1, TP3);
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	60 e0       	ldi	r22, 0x00	; 0
    1fa0:	42 e0       	ldi	r20, 0x02	; 2
    1fa2:	0e 94 2c 04 	call	0x858	; 0x858 <CheckPins>

  CheckPins(TP1, TP3, TP2);
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	62 e0       	ldi	r22, 0x02	; 2
    1faa:	41 e0       	ldi	r20, 0x01	; 1
    1fac:	0e 94 2c 04 	call	0x858	; 0x858 <CheckPins>
  CheckPins(TP3, TP1, TP2);
    1fb0:	82 e0       	ldi	r24, 0x02	; 2
    1fb2:	60 e0       	ldi	r22, 0x00	; 0
    1fb4:	41 e0       	ldi	r20, 0x01	; 1
    1fb6:	0e 94 2c 04 	call	0x858	; 0x858 <CheckPins>

  CheckPins(TP2, TP3, TP1);
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	62 e0       	ldi	r22, 0x02	; 2
    1fbe:	40 e0       	ldi	r20, 0x00	; 0
    1fc0:	0e 94 2c 04 	call	0x858	; 0x858 <CheckPins>
  CheckPins(TP3, TP2, TP1);
    1fc4:	82 e0       	ldi	r24, 0x02	; 2
    1fc6:	61 e0       	ldi	r22, 0x01	; 1
    1fc8:	40 e0       	ldi	r20, 0x00	; 0
    1fca:	0e 94 2c 04 	call	0x858	; 0x858 <CheckPins>
  
  // Capacity measurement is only possible correctly with two Pins connected.
  // A third connected pin will increase the capacity value!
//  if(((PartFound == PART_NONE) || (PartFound == PART_RESISTOR) || (PartFound == PART_DIODE)) ) {
  if(PartFound == PART_NONE) {
    1fce:	80 91 07 01 	lds	r24, 0x0107
    1fd2:	88 23       	and	r24, r24
    1fd4:	e1 f4       	brne	.+56     	; 0x200e <main+0x2ea>
     // If no part is found yet, check separate if is is a capacitor
     lcd_data('C');
    1fd6:	83 e4       	ldi	r24, 0x43	; 67
    1fd8:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
     EntladePins();		// discharge capacities
    1fdc:	0e 94 ad 01 	call	0x35a	; 0x35a <EntladePins>
     //measurement of capacities in all 3 combinations
     cap.cval_max = 0;		// set max to zero
    1fe0:	10 92 72 01 	sts	0x0172, r1
    1fe4:	10 92 73 01 	sts	0x0173, r1
    1fe8:	10 92 74 01 	sts	0x0174, r1
    1fec:	10 92 75 01 	sts	0x0175, r1
     cap.cpre_max = -12;	// set max to pF unit
    1ff0:	84 ef       	ldi	r24, 0xF4	; 244
    1ff2:	80 93 81 01 	sts	0x0181, r24
     ReadCapacity(TP3, TP1);
    1ff6:	82 e0       	ldi	r24, 0x02	; 2
    1ff8:	60 e0       	ldi	r22, 0x00	; 0
    1ffa:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <ReadCapacity>
#if DebugOut != 10
     ReadCapacity(TP3, TP2);
    1ffe:	82 e0       	ldi	r24, 0x02	; 2
    2000:	61 e0       	ldi	r22, 0x01	; 1
    2002:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <ReadCapacity>
     ReadCapacity(TP2, TP1);
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	60 e0       	ldi	r22, 0x00	; 0
    200a:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <ReadCapacity>
  lcd_line2();
  lcd_line1();
  lcd_clear_line();
  lcd_line1();
#else
  lcd_clear();				// clear total display
    200e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
#endif

  _trans = &ntrans;			// default transistor structure to show
    2012:	d0 92 4b 01 	sts	0x014B, r13
    2016:	c0 92 4a 01 	sts	0x014A, r12
  if(PartFound == PART_DIODE) {
    201a:	10 91 07 01 	lds	r17, 0x0107
    201e:	11 30       	cpi	r17, 0x01	; 1
    2020:	09 f0       	breq	.+2      	; 0x2024 <main+0x300>
    2022:	c7 c0       	rjmp	.+398    	; 0x21b2 <main+0x48e>
     if(NumOfDiodes == 1) {		//single Diode
    2024:	80 91 05 01 	lds	r24, 0x0105
    2028:	81 30       	cpi	r24, 0x01	; 1
    202a:	d1 f5       	brne	.+116    	; 0x20a0 <main+0x37c>
           lcd_fix_string(KatAn);	//"-|<-"
           lcd_testpin(diodes[0].Anode);
        }
 #else
        // the higher test pin number is right side
        if (diodes[0].Anode < diodes[0].Cathode) {
    202c:	90 91 84 01 	lds	r25, 0x0184
    2030:	80 91 85 01 	lds	r24, 0x0185
    2034:	98 17       	cp	r25, r24
    2036:	50 f4       	brcc	.+20     	; 0x204c <main+0x328>
           lcd_testpin(diodes[0].Anode);
    2038:	89 2f       	mov	r24, r25
    203a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    203e:	80 e4       	ldi	r24, 0x40	; 64
    2040:	91 e0       	ldi	r25, 0x01	; 1
    2042:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[0].Cathode);
    2046:	80 91 85 01 	lds	r24, 0x0185
    204a:	08 c0       	rjmp	.+16     	; 0x205c <main+0x338>
        } else {
           lcd_testpin(diodes[0].Cathode);
    204c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    2050:	84 e4       	ldi	r24, 0x44	; 68
    2052:	91 e0       	ldi	r25, 0x01	; 1
    2054:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    2058:	80 91 84 01 	lds	r24, 0x0184
    205c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
        lcd_testpin(diodes[0].Anode);
        lcd_fix_string(AnKat);		//"->|-"
        lcd_testpin(diodes[0].Cathode);
#endif
#if FLASHEND > 0x1fff
	GetIr(diodes[0].Cathode,diodes[0].Anode);
    2060:	80 91 85 01 	lds	r24, 0x0185
    2064:	60 91 84 01 	lds	r22, 0x0184
    2068:	0e 94 56 0e 	call	0x1cac	; 0x1cac <GetIr>
#endif
        UfAusgabe(0x70);
    206c:	80 e7       	ldi	r24, 0x70	; 112
    206e:	0e 94 9c 03 	call	0x738	; 0x738 <UfAusgabe>
        /* load current of capacity is (5V-1.1V)/(470000 Ohm) = 8298nA */
        lcd_fix_string(GateCap_str);	//"C="
    2072:	87 ef       	ldi	r24, 0xF7	; 247
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        ReadCapacity(diodes[0].Cathode,diodes[0].Anode);	// Capacity opposite flow direction
    207a:	80 91 85 01 	lds	r24, 0x0185
    207e:	60 91 84 01 	lds	r22, 0x0184
    2082:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <ReadCapacity>
        DisplayValue(cap.cval,cap.cpre,'F',3);
    2086:	60 91 6e 01 	lds	r22, 0x016E
    208a:	70 91 6f 01 	lds	r23, 0x016F
    208e:	80 91 70 01 	lds	r24, 0x0170
    2092:	90 91 71 01 	lds	r25, 0x0171
    2096:	40 91 80 01 	lds	r20, 0x0180
    209a:	26 e4       	ldi	r18, 0x46	; 70
    209c:	03 e0       	ldi	r16, 0x03	; 3
    209e:	0f c3       	rjmp	.+1566   	; 0x26be <main+0x99a>
        goto end;
     } else if(NumOfDiodes == 2) { // double diode
    20a0:	82 30       	cpi	r24, 0x02	; 2
    20a2:	09 f0       	breq	.+2      	; 0x20a6 <main+0x382>
    20a4:	4a c0       	rjmp	.+148    	; 0x213a <main+0x416>
        lcd_data('2');
    20a6:	82 e3       	ldi	r24, 0x32	; 50
    20a8:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
        lcd_fix_string(Dioden);		//"diodes "
    20ac:	88 e4       	ldi	r24, 0x48	; 72
    20ae:	91 e0       	ldi	r25, 0x01	; 1
    20b0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        if(diodes[0].Anode == diodes[1].Anode) { //Common Anode
    20b4:	80 91 84 01 	lds	r24, 0x0184
    20b8:	20 91 88 01 	lds	r18, 0x0188
    20bc:	82 17       	cp	r24, r18
    20be:	99 f4       	brne	.+38     	; 0x20e6 <main+0x3c2>
           lcd_testpin(diodes[0].Cathode);
    20c0:	80 91 85 01 	lds	r24, 0x0185
    20c4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    20c8:	84 e4       	ldi	r24, 0x44	; 68
    20ca:	91 e0       	ldi	r25, 0x01	; 1
    20cc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    20d0:	80 91 84 01 	lds	r24, 0x0184
    20d4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    20d8:	80 e4       	ldi	r24, 0x40	; 64
    20da:	91 e0       	ldi	r25, 0x01	; 1
    20dc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[1].Cathode);
    20e0:	80 91 89 01 	lds	r24, 0x0189
    20e4:	16 c0       	rjmp	.+44     	; 0x2112 <main+0x3ee>
           UfAusgabe(0x01);
           goto end;
        } else if(diodes[0].Cathode == diodes[1].Cathode) { //Common Cathode
    20e6:	30 91 85 01 	lds	r19, 0x0185
    20ea:	90 91 89 01 	lds	r25, 0x0189
    20ee:	39 17       	cp	r19, r25
    20f0:	b1 f4       	brne	.+44     	; 0x211e <main+0x3fa>
           lcd_testpin(diodes[0].Anode);
    20f2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    20f6:	80 e4       	ldi	r24, 0x40	; 64
    20f8:	91 e0       	ldi	r25, 0x01	; 1
    20fa:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
	   lcd_testpin(diodes[0].Cathode);
    20fe:	80 91 85 01 	lds	r24, 0x0185
    2102:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    2106:	84 e4       	ldi	r24, 0x44	; 68
    2108:	91 e0       	ldi	r25, 0x01	; 1
    210a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
           lcd_testpin(diodes[1].Anode);
    210e:	80 91 88 01 	lds	r24, 0x0188
    2112:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
           UfAusgabe(0x01);
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	0e 94 9c 03 	call	0x738	; 0x738 <UfAusgabe>
           goto end;
    211c:	d2 c2       	rjmp	.+1444   	; 0x26c2 <main+0x99e>
          }
//        else if ((diodes[0].Cathode == diodes[1].Anode) && (diodes[1].Cathode == diodes[0].Anode)) {
        else if (diodes[0].Cathode == diodes[1].Anode) {
    211e:	32 17       	cp	r19, r18
    2120:	19 f4       	brne	.+6      	; 0x2128 <main+0x404>
           // normaly two serial diodes are detected as three diodes, but if the threshold is high
           // for both diodes, the third diode is not detected.
           // can also be Antiparallel
           diode_sequence = 0x01;	// 0 1
    2122:	10 93 02 01 	sts	0x0102, r17
    2126:	06 c0       	rjmp	.+12     	; 0x2134 <main+0x410>
           SerienDiodenAusgabe();
           goto end;
        }
        else if (diodes[1].Cathode == diodes[0].Anode) {
    2128:	98 17       	cp	r25, r24
    212a:	09 f0       	breq	.+2      	; 0x212e <main+0x40a>
    212c:	91 c2       	rjmp	.+1314   	; 0x2650 <main+0x92c>
           diode_sequence = 0x10;	// 1 0
    212e:	80 e1       	ldi	r24, 0x10	; 16
    2130:	80 93 02 01 	sts	0x0102, r24
           SerienDiodenAusgabe();
    2134:	0e 94 b0 03 	call	0x760	; 0x760 <SerienDiodenAusgabe>
           goto end;
    2138:	c4 c2       	rjmp	.+1416   	; 0x26c2 <main+0x99e>
        }
     } else if(NumOfDiodes == 3) {
    213a:	83 30       	cpi	r24, 0x03	; 3
    213c:	09 f0       	breq	.+2      	; 0x2140 <main+0x41c>
    213e:	88 c2       	rjmp	.+1296   	; 0x2650 <main+0x92c>
        //Serial of 2 Diodes; was detected as 3 Diodes 
        diode_sequence = 0x33;	// 3 3
    2140:	83 e3       	ldi	r24, 0x33	; 51
    2142:	80 93 02 01 	sts	0x0102, r24
        /* Check for any constallation of 2 serial diodes:
          Only once the pin No of anyone Cathode is identical of another anode.
          two diodes in series is additionally detected as third big diode.
        */
        if(diodes[0].Cathode == diodes[1].Anode)
    2146:	80 91 85 01 	lds	r24, 0x0185
    214a:	90 91 88 01 	lds	r25, 0x0188
    214e:	89 17       	cp	r24, r25
    2150:	11 f4       	brne	.+4      	; 0x2156 <main+0x432>
          {
           diode_sequence = 0x01;	// 0 1
    2152:	10 93 02 01 	sts	0x0102, r17
          }
        if(diodes[0].Anode == diodes[1].Cathode)
    2156:	40 91 84 01 	lds	r20, 0x0184
    215a:	30 91 89 01 	lds	r19, 0x0189
    215e:	43 17       	cp	r20, r19
    2160:	19 f4       	brne	.+6      	; 0x2168 <main+0x444>
          {
           diode_sequence = 0x10;	// 1 0
    2162:	20 e1       	ldi	r18, 0x10	; 16
    2164:	20 93 02 01 	sts	0x0102, r18
          }
        if(diodes[0].Cathode == diodes[2].Anode)
    2168:	20 91 8c 01 	lds	r18, 0x018C
    216c:	82 17       	cp	r24, r18
    216e:	19 f4       	brne	.+6      	; 0x2176 <main+0x452>
          {
           diode_sequence = 0x02;	// 0 2
    2170:	82 e0       	ldi	r24, 0x02	; 2
    2172:	80 93 02 01 	sts	0x0102, r24
          }
        if(diodes[0].Anode == diodes[2].Cathode)
    2176:	80 91 8d 01 	lds	r24, 0x018D
    217a:	48 17       	cp	r20, r24
    217c:	19 f4       	brne	.+6      	; 0x2184 <main+0x460>
          {
           diode_sequence = 0x20;	// 2 0
    217e:	40 e2       	ldi	r20, 0x20	; 32
    2180:	40 93 02 01 	sts	0x0102, r20
          }
        if(diodes[1].Cathode == diodes[2].Anode)
    2184:	32 17       	cp	r19, r18
    2186:	19 f4       	brne	.+6      	; 0x218e <main+0x46a>
          {
           diode_sequence = 0x12;	// 1 2
    2188:	22 e1       	ldi	r18, 0x12	; 18
    218a:	20 93 02 01 	sts	0x0102, r18
          }
        if(diodes[1].Anode == diodes[2].Cathode)
    218e:	98 17       	cp	r25, r24
    2190:	19 f4       	brne	.+6      	; 0x2198 <main+0x474>
          {
           diode_sequence = 0x21;	// 2 1
    2192:	81 e2       	ldi	r24, 0x21	; 33
    2194:	80 93 02 01 	sts	0x0102, r24
        lcd_space();
        lcd_string(utoa(diodes[2].Voltage, outval, 10));
        lcd_line1();
#endif
//        if((ptrans.b<3) && (ptrans.c<3)) 
        if(diode_sequence < 0x22) {
    2198:	80 91 02 01 	lds	r24, 0x0102
    219c:	82 32       	cpi	r24, 0x22	; 34
    219e:	08 f0       	brcs	.+2      	; 0x21a2 <main+0x47e>
    21a0:	57 c2       	rjmp	.+1198   	; 0x2650 <main+0x92c>
           lcd_data('3');
    21a2:	83 e3       	ldi	r24, 0x33	; 51
    21a4:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
           lcd_fix_string(Dioden);	//"Diodes "
    21a8:	88 e4       	ldi	r24, 0x48	; 72
    21aa:	91 e0       	ldi	r25, 0x01	; 1
    21ac:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    21b0:	c1 cf       	rjmp	.-126    	; 0x2134 <main+0x410>
//           UfAusgabe( (diode_sequence);
           goto end;
        }
     }
     // end (PartFound == PART_DIODE)
  } else if (PartFound == PART_TRANSISTOR) {
    21b2:	12 30       	cpi	r17, 0x02	; 2
    21b4:	09 f0       	breq	.+2      	; 0x21b8 <main+0x494>
    21b6:	a9 c0       	rjmp	.+338    	; 0x230a <main+0x5e6>
#ifdef SEARCH_PARASITIC
    if ((ptrans.count != 0) && (ntrans.count !=0)) {
    21b8:	80 91 6b 01 	lds	r24, 0x016B
    21bc:	88 23       	and	r24, r24
    21be:	99 f1       	breq	.+102    	; 0x2226 <main+0x502>
    21c0:	80 91 59 01 	lds	r24, 0x0159
    21c4:	88 23       	and	r24, r24
    21c6:	79 f1       	breq	.+94     	; 0x2226 <main+0x502>
       // Special Handling of NPNp and PNPn Transistor.
       // If a protection diode is built on the same structur as the NPN-Transistor,
       // a parasitic PNP-Transistor will be detected. 
       ReadCapacity(ntrans.e, ntrans.b);	// read capacity of NPN base-emitter
    21c8:	80 91 58 01 	lds	r24, 0x0158
    21cc:	60 91 56 01 	lds	r22, 0x0156
    21d0:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <ReadCapacity>
       n_cval = cap.cval;			// save the found capacity value
    21d4:	e0 90 6e 01 	lds	r14, 0x016E
    21d8:	f0 90 6f 01 	lds	r15, 0x016F
    21dc:	00 91 70 01 	lds	r16, 0x0170
    21e0:	10 91 71 01 	lds	r17, 0x0171
       n_cpre  = cap.cpre;			// and dimension
    21e4:	b0 90 80 01 	lds	r11, 0x0180
       ReadCapacity(ptrans.b, ptrans.e);	// read capacity of PNP base-emitter
    21e8:	80 91 68 01 	lds	r24, 0x0168
    21ec:	60 91 6a 01 	lds	r22, 0x016A
    21f0:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <ReadCapacity>
       if (((n_cpre == cap.cpre) && (cap.cval > n_cval)) || (cap.cpre > n_cpre)){
    21f4:	80 91 80 01 	lds	r24, 0x0180
    21f8:	b8 16       	cp	r11, r24
    21fa:	71 f4       	brne	.+28     	; 0x2218 <main+0x4f4>
    21fc:	80 91 6e 01 	lds	r24, 0x016E
    2200:	90 91 6f 01 	lds	r25, 0x016F
    2204:	a0 91 70 01 	lds	r26, 0x0170
    2208:	b0 91 71 01 	lds	r27, 0x0171
    220c:	e8 16       	cp	r14, r24
    220e:	f9 06       	cpc	r15, r25
    2210:	0a 07       	cpc	r16, r26
    2212:	1b 07       	cpc	r17, r27
    2214:	18 f0       	brcs	.+6      	; 0x221c <main+0x4f8>
    2216:	04 c0       	rjmp	.+8      	; 0x2220 <main+0x4fc>
    2218:	b8 16       	cp	r11, r24
    221a:	14 f4       	brge	.+4      	; 0x2220 <main+0x4fc>
          // the capacity value or dimension of the PNP B-E is greater than the NPN B-E
          PartMode = PART_MODE_PNP;
    221c:	82 e0       	ldi	r24, 0x02	; 2
    221e:	01 c0       	rjmp	.+2      	; 0x2222 <main+0x4fe>
       } else {
          PartMode = PART_MODE_NPN;
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	80 93 06 01 	sts	0x0106, r24
       }
    }
#endif
    if(!(ON_PIN_REG & (1<<RST_PIN))) {
    2226:	4f 99       	sbic	0x09, 7	; 9
    2228:	09 c0       	rjmp	.+18     	; 0x223c <main+0x518>
       // if the Start key is still pressed, use the other Transistor
       if (PartMode == PART_MODE_NPN) {
    222a:	80 91 06 01 	lds	r24, 0x0106
    222e:	81 30       	cpi	r24, 0x01	; 1
    2230:	11 f4       	brne	.+4      	; 0x2236 <main+0x512>
          PartMode = PART_MODE_PNP;	// switch to parasitic transistor
    2232:	82 e0       	ldi	r24, 0x02	; 2
    2234:	01 c0       	rjmp	.+2      	; 0x2238 <main+0x514>
       } else {
          PartMode = PART_MODE_NPN;	// switch to parasitic transistor
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	80 93 06 01 	sts	0x0106, r24
       }
    }

    if(PartMode == PART_MODE_NPN) {
    223c:	80 91 06 01 	lds	r24, 0x0106
    2240:	81 30       	cpi	r24, 0x01	; 1
    2242:	61 f4       	brne	.+24     	; 0x225c <main+0x538>
       lcd_fix_string(NPN_str);		//"NPN "
    2244:	8d ef       	ldi	r24, 0xFD	; 253
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       if (ptrans.count != 0) {
    224c:	80 91 6b 01 	lds	r24, 0x016B
    2250:	88 23       	and	r24, r24
    2252:	99 f0       	breq	.+38     	; 0x227a <main+0x556>
          lcd_data('p');		// mark for parasitic PNp
    2254:	80 e7       	ldi	r24, 0x70	; 112
    2256:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
    225a:	0f c0       	rjmp	.+30     	; 0x227a <main+0x556>
       }
//       _trans = &ntrans;  is allready selected a default
    } else {
       lcd_fix_string(PNP_str);		//"PNP "
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	91 e0       	ldi	r25, 0x01	; 1
    2260:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       if (ntrans.count != 0) {
    2264:	80 91 59 01 	lds	r24, 0x0159
    2268:	88 23       	and	r24, r24
    226a:	19 f0       	breq	.+6      	; 0x2272 <main+0x54e>
          lcd_data('n');		// mark for parasitic NPn
    226c:	8e e6       	ldi	r24, 0x6E	; 110
    226e:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       }
       _trans = &ptrans;		// change transistor structure
    2272:	90 92 4b 01 	sts	0x014B, r9
    2276:	80 92 4a 01 	sts	0x014A, r8
    }
    lcd_space();
    227a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>
    if( NumOfDiodes > 2) {	//Transistor with protection diode
    227e:	80 91 05 01 	lds	r24, 0x0105
    2282:	83 30       	cpi	r24, 0x03	; 3
    2284:	c0 f0       	brcs	.+48     	; 0x22b6 <main+0x592>
       // Layout with EBC= style
       if(PartMode == PART_MODE_NPN)
 #endif
#else
       // Layout with 123= style
       if (((PartMode == PART_MODE_NPN) && (ntrans.c > ntrans.e)) || ((PartMode != PART_MODE_NPN) && (ptrans.c < ptrans.e)))
    2286:	80 91 06 01 	lds	r24, 0x0106
    228a:	81 30       	cpi	r24, 0x01	; 1
    228c:	39 f4       	brne	.+14     	; 0x229c <main+0x578>
    228e:	90 91 57 01 	lds	r25, 0x0157
    2292:	80 91 58 01 	lds	r24, 0x0158
    2296:	89 17       	cp	r24, r25
    2298:	38 f0       	brcs	.+14     	; 0x22a8 <main+0x584>
    229a:	09 c0       	rjmp	.+18     	; 0x22ae <main+0x58a>
    229c:	90 91 69 01 	lds	r25, 0x0169
    22a0:	80 91 6a 01 	lds	r24, 0x016A
    22a4:	98 17       	cp	r25, r24
    22a6:	18 f4       	brcc	.+6      	; 0x22ae <main+0x58a>
#endif
       {
          lcd_fix_string(AnKat);	//"->|-"
    22a8:	80 e4       	ldi	r24, 0x40	; 64
    22aa:	91 e0       	ldi	r25, 0x01	; 1
    22ac:	02 c0       	rjmp	.+4      	; 0x22b2 <main+0x58e>
       } else {
          lcd_fix_string(KatAn);	//"-|<-"
    22ae:	84 e4       	ldi	r24, 0x44	; 68
    22b0:	91 e0       	ldi	r25, 0x01	; 1
    22b2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       }
    }
    PinLayout('E','B','C'); 		//  EBC= or 123=...
    22b6:	85 e4       	ldi	r24, 0x45	; 69
    22b8:	62 e4       	ldi	r22, 0x42	; 66
    22ba:	43 e4       	ldi	r20, 0x43	; 67
    22bc:	0e 94 15 0b 	call	0x162a	; 0x162a <PinLayout>
    lcd_line2(); //2. row 
    22c0:	80 ec       	ldi	r24, 0xC0	; 192
    22c2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
    lcd_fix_string(hfe_str);		//"B="  (hFE)
    22c6:	8a ef       	ldi	r24, 0xFA	; 250
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    DisplayValue(_trans->hfe,0,0,3);
    22ce:	e0 91 4a 01 	lds	r30, 0x014A
    22d2:	f0 91 4b 01 	lds	r31, 0x014B
    22d6:	60 81       	ld	r22, Z
    22d8:	71 81       	ldd	r23, Z+1	; 0x01
    22da:	82 81       	ldd	r24, Z+2	; 0x02
    22dc:	93 81       	ldd	r25, Z+3	; 0x03
    22de:	40 e0       	ldi	r20, 0x00	; 0
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	03 e0       	ldi	r16, 0x03	; 3
    22e4:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
    lcd_space();
    22e8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_space>

    lcd_fix_string(Uf_str);		//"Uf="
    22ec:	8b e0       	ldi	r24, 0x0B	; 11
    22ee:	91 e0       	ldi	r25, 0x01	; 1
    22f0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    DisplayValue(_trans->uBE,-3,'V',3);
    22f4:	e0 91 4a 01 	lds	r30, 0x014A
    22f8:	f0 91 4b 01 	lds	r31, 0x014B
    22fc:	64 81       	ldd	r22, Z+4	; 0x04
    22fe:	75 81       	ldd	r23, Z+5	; 0x05
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	4d ef       	ldi	r20, 0xFD	; 253
    2306:	26 e5       	ldi	r18, 0x56	; 86
    2308:	da c1       	rjmp	.+948    	; 0x26be <main+0x99a>
    goto end;
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    230a:	13 30       	cpi	r17, 0x03	; 3
    230c:	09 f0       	breq	.+2      	; 0x2310 <main+0x5ec>
    230e:	8b c0       	rjmp	.+278    	; 0x2426 <main+0x702>
    if(PartMode&1) {
    2310:	80 91 06 01 	lds	r24, 0x0106
    2314:	80 ff       	sbrs	r24, 0
    2316:	08 c0       	rjmp	.+16     	; 0x2328 <main+0x604>
       lcd_data('P');			//P-channel
    2318:	80 e5       	ldi	r24, 0x50	; 80
    231a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       _trans = &ptrans;
    231e:	90 92 4b 01 	sts	0x014B, r9
    2322:	80 92 4a 01 	sts	0x014A, r8
    2326:	03 c0       	rjmp	.+6      	; 0x232e <main+0x60a>
    } else {
       lcd_data('N');			//N-channel
    2328:	8e e4       	ldi	r24, 0x4E	; 78
    232a:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
//       _trans = &ntrans;	is allready selected as default
    }
    lcd_data('-');
    232e:	8d e2       	ldi	r24, 0x2D	; 45
    2330:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>

    tmp = PartMode/2;
    2334:	80 91 06 01 	lds	r24, 0x0106
    2338:	86 95       	lsr	r24
    if (tmp == (PART_MODE_N_D_MOS/2)) {
    233a:	82 30       	cpi	r24, 0x02	; 2
    233c:	11 f4       	brne	.+4      	; 0x2342 <main+0x61e>
       lcd_data('D');			// N-D
    233e:	84 e4       	ldi	r24, 0x44	; 68
    2340:	03 c0       	rjmp	.+6      	; 0x2348 <main+0x624>
    }
    if (tmp == (PART_MODE_N_E_MOS/2)) {
    2342:	81 30       	cpi	r24, 0x01	; 1
    2344:	21 f4       	brne	.+8      	; 0x234e <main+0x62a>
       lcd_data('E');			// N-E
    2346:	85 e4       	ldi	r24, 0x45	; 69
    2348:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
    234c:	05 c0       	rjmp	.+10     	; 0x2358 <main+0x634>
    }
    if (tmp == (PART_MODE_N_JFET/2)) {
    234e:	83 30       	cpi	r24, 0x03	; 3
    2350:	19 f4       	brne	.+6      	; 0x2358 <main+0x634>
       lcd_fix_string(jfet_str);	//"JFET"
    2352:	82 ef       	ldi	r24, 0xF2	; 242
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	02 c0       	rjmp	.+4      	; 0x235c <main+0x638>
    } else {
       lcd_fix_string(mosfet_str);	//"-MOS "
    2358:	8d ee       	ldi	r24, 0xED	; 237
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    }
    PinLayout('S','G','D'); 		//  SGD= or 123=...
    2360:	83 e5       	ldi	r24, 0x53	; 83
    2362:	67 e4       	ldi	r22, 0x47	; 71
    2364:	44 e4       	ldi	r20, 0x44	; 68
    2366:	0e 94 15 0b 	call	0x162a	; 0x162a <PinLayout>
    if((NumOfDiodes > 0) && (PartMode < PART_MODE_N_D_MOS)) {
    236a:	80 91 05 01 	lds	r24, 0x0105
    236e:	88 23       	and	r24, r24
    2370:	c1 f0       	breq	.+48     	; 0x23a2 <main+0x67e>
    2372:	80 91 06 01 	lds	r24, 0x0106
    2376:	84 30       	cpi	r24, 0x04	; 4
    2378:	a0 f4       	brcc	.+40     	; 0x23a2 <main+0x67e>
       // Layout with SGD= style
       if (PartMode&1) /* N or P MOS */
 #endif
#else
       // layout with 123= style
       if (((PartMode&1) && (ptrans.c < ptrans.e)) || ((!(PartMode&1)) && (ntrans.c > ntrans.e)))
    237a:	80 ff       	sbrs	r24, 0
    237c:	07 c0       	rjmp	.+14     	; 0x238c <main+0x668>
    237e:	90 91 69 01 	lds	r25, 0x0169
    2382:	80 91 6a 01 	lds	r24, 0x016A
    2386:	98 17       	cp	r25, r24
    2388:	38 f0       	brcs	.+14     	; 0x2398 <main+0x674>
    238a:	08 c0       	rjmp	.+16     	; 0x239c <main+0x678>
    238c:	90 91 57 01 	lds	r25, 0x0157
    2390:	80 91 58 01 	lds	r24, 0x0158
    2394:	89 17       	cp	r24, r25
    2396:	10 f4       	brcc	.+4      	; 0x239c <main+0x678>
#endif
       {
          lcd_data(LCD_CHAR_DIODE1);	//show Diode symbol >|
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	01 c0       	rjmp	.+2      	; 0x239e <main+0x67a>
       } else {
          lcd_data(LCD_CHAR_DIODE2);	//show Diode symbol |<
    239c:	82 e0       	ldi	r24, 0x02	; 2
    239e:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       }
    }
    lcd_line2();			//2. Row
    23a2:	80 ec       	ldi	r24, 0xC0	; 192
    23a4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
    if(PartMode < PART_MODE_N_D_MOS) {	//enhancement-MOSFET
    23a8:	80 91 06 01 	lds	r24, 0x0106
    23ac:	84 30       	cpi	r24, 0x04	; 4
    23ae:	e8 f4       	brcc	.+58     	; 0x23ea <main+0x6c6>
	//Gate capacity
       lcd_fix_string(GateCap_str);		//"C="
    23b0:	87 ef       	ldi	r24, 0xF7	; 247
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       ReadCapacity(_trans->b,_trans->e);	//measure capacity
    23b8:	e0 91 4a 01 	lds	r30, 0x014A
    23bc:	f0 91 4b 01 	lds	r31, 0x014B
    23c0:	82 85       	ldd	r24, Z+10	; 0x0a
    23c2:	64 85       	ldd	r22, Z+12	; 0x0c
    23c4:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <ReadCapacity>
       DisplayValue(cap.cval,cap.cpre,'F',3);
    23c8:	60 91 6e 01 	lds	r22, 0x016E
    23cc:	70 91 6f 01 	lds	r23, 0x016F
    23d0:	80 91 70 01 	lds	r24, 0x0170
    23d4:	90 91 71 01 	lds	r25, 0x0171
    23d8:	40 91 80 01 	lds	r20, 0x0180
    23dc:	26 e4       	ldi	r18, 0x46	; 70
    23de:	03 e0       	ldi	r16, 0x03	; 3
    23e0:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
       lcd_fix_string(vt_str);		// "Vt="
    23e4:	8f e0       	ldi	r24, 0x0F	; 15
    23e6:	91 e0       	ldi	r25, 0x01	; 1
    23e8:	15 c0       	rjmp	.+42     	; 0x2414 <main+0x6f0>
    } else {
       lcd_data('I');
    23ea:	89 e4       	ldi	r24, 0x49	; 73
    23ec:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       lcd_data('=');
    23f0:	8d e3       	ldi	r24, 0x3D	; 61
    23f2:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       DisplayValue(_trans->current,-5,'A',2);
    23f6:	e0 91 4a 01 	lds	r30, 0x014A
    23fa:	f0 91 4b 01 	lds	r31, 0x014B
    23fe:	66 81       	ldd	r22, Z+6	; 0x06
    2400:	77 81       	ldd	r23, Z+7	; 0x07
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	4b ef       	ldi	r20, 0xFB	; 251
    2408:	21 e4       	ldi	r18, 0x41	; 65
    240a:	02 e0       	ldi	r16, 0x02	; 2
    240c:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
       lcd_fix_string(Vgs_str);		// " Vgs="
    2410:	84 e1       	ldi	r24, 0x14	; 20
    2412:	91 e0       	ldi	r25, 0x01	; 1
    2414:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
    }
    //Gate-threshold voltage
    DisplayValue(_trans->gthvoltage,-3,'V',2);
    2418:	e0 91 4a 01 	lds	r30, 0x014A
    241c:	f0 91 4b 01 	lds	r31, 0x014B
    2420:	60 85       	ldd	r22, Z+8	; 0x08
    2422:	71 85       	ldd	r23, Z+9	; 0x09
    2424:	47 c1       	rjmp	.+654    	; 0x26b4 <main+0x990>
    goto end;
    // end (PartFound == PART_FET)
  } else if (PartFound == PART_THYRISTOR) {
    2426:	15 30       	cpi	r17, 0x05	; 5
    2428:	19 f4       	brne	.+6      	; 0x2430 <main+0x70c>
    lcd_fix_string(Thyristor);		//"Thyristor"
    242a:	85 e8       	ldi	r24, 0x85	; 133
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	04 c0       	rjmp	.+8      	; 0x2438 <main+0x714>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    2430:	14 30       	cpi	r17, 0x04	; 4
    2432:	a9 f4       	brne	.+42     	; 0x245e <main+0x73a>
    lcd_fix_string(Triac);		//"Triac"
    2434:	8f e7       	ldi	r24, 0x7F	; 127
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  mess_count = 0;
  goto end2;


gakAusgabe:
  PinLayout(Cathode_char,'G','A'); 	// CGA= or 123=...
    243c:	83 e4       	ldi	r24, 0x43	; 67
    243e:	67 e4       	ldi	r22, 0x47	; 71
    2440:	41 e4       	ldi	r20, 0x41	; 65
    2442:	0e 94 15 0b 	call	0x162a	; 0x162a <PinLayout>
#ifdef WITH_THYRISTOR_GATE_V
  lcd_line2(); //2. row 
    2446:	80 ec       	ldi	r24, 0xC0	; 192
    2448:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
  lcd_fix_string(Uf_str);		// "Uf="
    244c:	8b e0       	ldi	r24, 0x0B	; 11
    244e:	91 e0       	ldi	r25, 0x01	; 1
    2450:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  DisplayValue(ntrans.uBE,-3,'V',2);
    2454:	60 91 50 01 	lds	r22, 0x0150
    2458:	70 91 51 01 	lds	r23, 0x0151
    245c:	2b c1       	rjmp	.+598    	; 0x26b4 <main+0x990>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    lcd_fix_string(Triac);		//"Triac"
    goto gakAusgabe;
  }
  else if(PartFound == PART_RESISTOR) {
    245e:	16 30       	cpi	r17, 0x06	; 6
    2460:	09 f0       	breq	.+2      	; 0x2464 <main+0x740>
    2462:	a3 c0       	rjmp	.+326    	; 0x25aa <main+0x886>
    ii = 0;
    if (ResistorsFound == 1) { // single resistor
    2464:	60 91 6c 01 	lds	r22, 0x016C
    2468:	61 30       	cpi	r22, 0x01	; 1
    246a:	71 f4       	brne	.+28     	; 0x2488 <main+0x764>
       lcd_testpin(resis[0].rb);  	//Pin-number 1
    246c:	80 91 22 01 	lds	r24, 0x0122
    2470:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
       lcd_fix_string(Resistor_str);
    2474:	8d e4       	ldi	r24, 0x4D	; 77
    2476:	91 e0       	ldi	r25, 0x01	; 1
    2478:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       lcd_testpin(resis[0].ra);		//Pin-number 2
    247c:	80 91 21 01 	lds	r24, 0x0121
    2480:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
  } else if (PartFound == PART_TRIAC) {
    lcd_fix_string(Triac);		//"Triac"
    goto gakAusgabe;
  }
  else if(PartFound == PART_RESISTOR) {
    ii = 0;
    2484:	10 e0       	ldi	r17, 0x00	; 0
    2486:	56 c0       	rjmp	.+172    	; 0x2534 <main+0x810>
    if (ResistorsFound == 1) { // single resistor
       lcd_testpin(resis[0].rb);  	//Pin-number 1
       lcd_fix_string(Resistor_str);
       lcd_testpin(resis[0].ra);		//Pin-number 2
    } else { // R-Max suchen
       if (resis[1].rx > resis[0].rx)
    2488:	20 91 24 01 	lds	r18, 0x0124
    248c:	30 91 25 01 	lds	r19, 0x0125
    2490:	40 91 26 01 	lds	r20, 0x0126
    2494:	50 91 27 01 	lds	r21, 0x0127
    2498:	80 91 18 01 	lds	r24, 0x0118
    249c:	90 91 19 01 	lds	r25, 0x0119
    24a0:	a0 91 1a 01 	lds	r26, 0x011A
    24a4:	b0 91 1b 01 	lds	r27, 0x011B
          ii = 1;
       if (ResistorsFound == 2) {
    24a8:	62 30       	cpi	r22, 0x02	; 2
    24aa:	71 f1       	breq	.+92     	; 0x2508 <main+0x7e4>
  } else if (PartFound == PART_TRIAC) {
    lcd_fix_string(Triac);		//"Triac"
    goto gakAusgabe;
  }
  else if(PartFound == PART_RESISTOR) {
    ii = 0;
    24ac:	11 e0       	ldi	r17, 0x01	; 1
    24ae:	82 17       	cp	r24, r18
    24b0:	93 07       	cpc	r25, r19
    24b2:	a4 07       	cpc	r26, r20
    24b4:	b5 07       	cpc	r27, r21
    24b6:	08 f0       	brcs	.+2      	; 0x24ba <main+0x796>
    24b8:	10 e0       	ldi	r17, 0x00	; 0
       if (resis[1].rx > resis[0].rx)
          ii = 1;
       if (ResistorsFound == 2) {
          ii = 2;
       } else {
          if (resis[2].rx > resis[ii].rx) {
    24ba:	81 2f       	mov	r24, r17
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	fc 01       	movw	r30, r24
    24c0:	ee 0f       	add	r30, r30
    24c2:	ff 1f       	adc	r31, r31
    24c4:	e8 0f       	add	r30, r24
    24c6:	f9 1f       	adc	r31, r25
    24c8:	ee 0f       	add	r30, r30
    24ca:	ff 1f       	adc	r31, r31
    24cc:	ee 0f       	add	r30, r30
    24ce:	ff 1f       	adc	r31, r31
    24d0:	e8 5e       	subi	r30, 0xE8	; 232
    24d2:	fe 4f       	sbci	r31, 0xFE	; 254
    24d4:	20 91 30 01 	lds	r18, 0x0130
    24d8:	30 91 31 01 	lds	r19, 0x0131
    24dc:	40 91 32 01 	lds	r20, 0x0132
    24e0:	50 91 33 01 	lds	r21, 0x0133
    24e4:	80 81       	ld	r24, Z
    24e6:	91 81       	ldd	r25, Z+1	; 0x01
    24e8:	a2 81       	ldd	r26, Z+2	; 0x02
    24ea:	b3 81       	ldd	r27, Z+3	; 0x03
    24ec:	82 17       	cp	r24, r18
    24ee:	93 07       	cpc	r25, r19
    24f0:	a4 07       	cpc	r26, r20
    24f2:	b5 07       	cpc	r27, r21
    24f4:	48 f0       	brcs	.+18     	; 0x2508 <main+0x7e4>
       }
       char x = '1';
       char y = '3';
       char z = '2';
   
       if (ii == 1) {
    24f6:	11 30       	cpi	r17, 0x01	; 1
    24f8:	19 f0       	breq	.+6      	; 0x2500 <main+0x7dc>
    24fa:	02 e3       	ldi	r16, 0x32	; 50
    24fc:	23 e3       	ldi	r18, 0x33	; 51
    24fe:	02 c0       	rjmp	.+4      	; 0x2504 <main+0x7e0>
          // x = '1';
          y = '2';
          z = '3';
    2500:	03 e3       	ldi	r16, 0x33	; 51
       char y = '3';
       char z = '2';
   
       if (ii == 1) {
          // x = '1';
          y = '2';
    2502:	22 e3       	ldi	r18, 0x32	; 50
       } else {
          if (resis[2].rx > resis[ii].rx) {
             ii = 2;
          }
       }
       char x = '1';
    2504:	81 e3       	ldi	r24, 0x31	; 49
    2506:	04 c0       	rjmp	.+8      	; 0x2510 <main+0x7ec>
       if (resis[1].rx > resis[0].rx)
          ii = 1;
       if (ResistorsFound == 2) {
          ii = 2;
       } else {
          if (resis[2].rx > resis[ii].rx) {
    2508:	12 e0       	ldi	r17, 0x02	; 2
          z = '3';
       }
       if (ii == 2) {
          x = '2';
          y = '1';
          z = '3';
    250a:	03 e3       	ldi	r16, 0x33	; 51
          y = '2';
          z = '3';
       }
       if (ii == 2) {
          x = '2';
          y = '1';
    250c:	21 e3       	ldi	r18, 0x31	; 49
          // x = '1';
          y = '2';
          z = '3';
       }
       if (ii == 2) {
          x = '2';
    250e:	82 e3       	ldi	r24, 0x32	; 50
          y = '1';
          z = '3';
       }
       lcd_data(x);
    2510:	29 83       	std	Y+1, r18	; 0x01
    2512:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       lcd_fix_string(Resistor_str);    // -[=]-
    2516:	8d e4       	ldi	r24, 0x4D	; 77
    2518:	91 e0       	ldi	r25, 0x01	; 1
    251a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       lcd_data(y);
    251e:	29 81       	ldd	r18, Y+1	; 0x01
    2520:	82 2f       	mov	r24, r18
    2522:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
       lcd_fix_string(Resistor_str);    // -[=]-
    2526:	8d e4       	ldi	r24, 0x4D	; 77
    2528:	91 e0       	ldi	r25, 0x01	; 1
    252a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
       lcd_data(z);
    252e:	80 2f       	mov	r24, r16
    2530:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
    }
    lcd_line2(); //2. row 
    2534:	80 ec       	ldi	r24, 0xC0	; 192
    2536:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
    if (ResistorsFound == 1) {
    253a:	80 91 6c 01 	lds	r24, 0x016C
    253e:	81 30       	cpi	r24, 0x01	; 1
    2540:	11 f5       	brne	.+68     	; 0x2586 <main+0x862>
       RvalOut(0);
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	0e 94 4d 03 	call	0x69a	; 0x69a <RvalOut>
#if FLASHEND > 0x1fff
       ReadInductance();		// measure inductance, possible only with single R<2.1k
    2548:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <ReadInductance>
       if (resis[0].lx != 0) {
    254c:	80 91 1c 01 	lds	r24, 0x011C
    2550:	90 91 1d 01 	lds	r25, 0x011D
    2554:	a0 91 1e 01 	lds	r26, 0x011E
    2558:	b0 91 1f 01 	lds	r27, 0x011F
    255c:	00 97       	sbiw	r24, 0x00	; 0
    255e:	a1 05       	cpc	r26, r1
    2560:	b1 05       	cpc	r27, r1
    2562:	09 f4       	brne	.+2      	; 0x2566 <main+0x842>
    2564:	ae c0       	rjmp	.+348    	; 0x26c2 <main+0x99e>
	  // resistor have also Inductance
          lcd_fix_string(Lis_str);	// "L="
    2566:	87 e3       	ldi	r24, 0x37	; 55
    2568:	91 e0       	ldi	r25, 0x01	; 1
    256a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
          DisplayValue(resis[0].lx,resis[0].lpre,'H',3);	// output inductance
    256e:	60 91 1c 01 	lds	r22, 0x011C
    2572:	70 91 1d 01 	lds	r23, 0x011D
    2576:	80 91 1e 01 	lds	r24, 0x011E
    257a:	90 91 1f 01 	lds	r25, 0x011F
    257e:	40 91 20 01 	lds	r20, 0x0120
    2582:	28 e4       	ldi	r18, 0x48	; 72
    2584:	8b cd       	rjmp	.-1258   	; 0x209c <main+0x378>
       }
#endif
    } else {
       // output resistor values in right order
       if (ii == 0) {
    2586:	11 23       	and	r17, r17
    2588:	11 f4       	brne	.+4      	; 0x258e <main+0x86a>
          RvalOut(1);
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	03 c0       	rjmp	.+6      	; 0x2594 <main+0x870>
          RvalOut(2);
       }
       if (ii == 1) {
    258e:	11 30       	cpi	r17, 0x01	; 1
    2590:	29 f4       	brne	.+10     	; 0x259c <main+0x878>
          RvalOut(0);
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	0e 94 4d 03 	call	0x69a	; 0x69a <RvalOut>
          RvalOut(2);
    2598:	82 e0       	ldi	r24, 0x02	; 2
    259a:	04 c0       	rjmp	.+8      	; 0x25a4 <main+0x880>
       }
       if (ii == 2) {
          RvalOut(0);
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	0e 94 4d 03 	call	0x69a	; 0x69a <RvalOut>
          RvalOut(1);
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	0e 94 4d 03 	call	0x69a	; 0x69a <RvalOut>
    25a8:	8c c0       	rjmp	.+280    	; 0x26c2 <main+0x99e>
    goto end;

  } // end (PartFound == PART_RESISTOR)

//capacity measurement is wanted
  else if(PartFound == PART_CAPACITOR) {
    25aa:	17 30       	cpi	r17, 0x07	; 7
    25ac:	09 f0       	breq	.+2      	; 0x25b0 <main+0x88c>
    25ae:	50 c0       	rjmp	.+160    	; 0x2650 <main+0x92c>
//     lcd_fix_string(Capacitor);
     lcd_testpin(cap.ca);		//Pin number 1
    25b0:	80 91 7e 01 	lds	r24, 0x017E
    25b4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
     lcd_fix_string(CapZeich);		// capacitor sign
    25b8:	8a e1       	ldi	r24, 0x1A	; 26
    25ba:	91 e0       	ldi	r25, 0x01	; 1
    25bc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_testpin(cap.cb);		//Pin number 2
    25c0:	80 91 7f 01 	lds	r24, 0x017F
    25c4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_testpin>
#if FLASHEND > 0x1fff
     GetVloss();			// get Voltage loss of capacitor
    25c8:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <GetVloss>
     if (cap.v_loss != 0) {
    25cc:	80 91 7c 01 	lds	r24, 0x017C
    25d0:	90 91 7d 01 	lds	r25, 0x017D
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	79 f0       	breq	.+30     	; 0x25f6 <main+0x8d2>
        lcd_fix_string(VLOSS_str);	// "  Vloss="
    25d8:	8f e2       	ldi	r24, 0x2F	; 47
    25da:	91 e0       	ldi	r25, 0x01	; 1
    25dc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        DisplayValue(cap.v_loss,-1,'%',2);
    25e0:	60 91 7c 01 	lds	r22, 0x017C
    25e4:	70 91 7d 01 	lds	r23, 0x017D
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	4f ef       	ldi	r20, 0xFF	; 255
    25ee:	25 e2       	ldi	r18, 0x25	; 37
    25f0:	02 e0       	ldi	r16, 0x02	; 2
    25f2:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
     }
#endif
     lcd_line2(); 			//2. row 
    25f6:	80 ec       	ldi	r24, 0xC0	; 192
    25f8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     DisplayValue(cap.cval_max,cap.cpre_max,'F',4);
    25fc:	60 91 72 01 	lds	r22, 0x0172
    2600:	70 91 73 01 	lds	r23, 0x0173
    2604:	80 91 74 01 	lds	r24, 0x0174
    2608:	90 91 75 01 	lds	r25, 0x0175
    260c:	40 91 81 01 	lds	r20, 0x0181
    2610:	26 e4       	ldi	r18, 0x46	; 70
    2612:	04 e0       	ldi	r16, 0x04	; 4
    2614:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
#if FLASHEND > 0x1fff
     cap.esr = GetESR(cap.cb, cap.ca);		// get ESR of capacitor
    2618:	80 91 7f 01 	lds	r24, 0x017F
    261c:	60 91 7e 01 	lds	r22, 0x017E
    2620:	0e 94 9b 1a 	call	0x3536	; 0x3536 <GetESR>
    2624:	90 93 7b 01 	sts	0x017B, r25
    2628:	80 93 7a 01 	sts	0x017A, r24
     if ( cap.esr < 65530) {
    262c:	ff ef       	ldi	r31, 0xFF	; 255
    262e:	8a 3f       	cpi	r24, 0xFA	; 250
    2630:	9f 07       	cpc	r25, r31
    2632:	08 f0       	brcs	.+2      	; 0x2636 <main+0x912>
    2634:	46 c0       	rjmp	.+140    	; 0x26c2 <main+0x99e>
        lcd_fix_string(ESR_str);
    2636:	89 e2       	ldi	r24, 0x29	; 41
    2638:	91 e0       	ldi	r25, 0x01	; 1
    263a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
        DisplayValue(cap.esr,-2,LCD_CHAR_OMEGA,2);
    263e:	60 91 7a 01 	lds	r22, 0x017A
    2642:	70 91 7b 01 	lds	r23, 0x017B
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	4e ef       	ldi	r20, 0xFE	; 254
    264c:	24 ef       	ldi	r18, 0xF4	; 244
    264e:	36 c0       	rjmp	.+108    	; 0x26bc <main+0x998>
     }
#endif
     goto end;
  }
  if(NumOfDiodes == 0) { //no diodes are found
    2650:	80 91 05 01 	lds	r24, 0x0105
    2654:	88 23       	and	r24, r24
    2656:	71 f4       	brne	.+28     	; 0x2674 <main+0x950>
     lcd_fix_string(TestFailed1); 	//"Kein,unbek. oder"
    2658:	87 e9       	ldi	r24, 0x97	; 151
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_line2(); //2. row 
    2660:	80 ec       	ldi	r24, 0xC0	; 192
    2662:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     lcd_fix_string(TestFailed2); 	//"defektes "
    2666:	81 e7       	ldi	r24, 0x71	; 113
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_fix_string(Bauteil);		//"Bauteil"
    266e:	8a e7       	ldi	r24, 0x7A	; 122
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	16 c0       	rjmp	.+44     	; 0x26a0 <main+0x97c>
  } else {
     lcd_fix_string(Bauteil);		//"Bauteil"
    2674:	8a e7       	ldi	r24, 0x7A	; 122
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_fix_string(Unknown); 		//" unbek."
    267c:	8e e8       	ldi	r24, 0x8E	; 142
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_line2(); //2. row 
    2684:	80 ec       	ldi	r24, 0xC0	; 192
    2686:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_command>
     lcd_fix_string(OrBroken); 		//"oder defekt "
    268a:	87 ea       	ldi	r24, 0xA7	; 167
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
     lcd_data(NumOfDiodes + '0');
    2692:	80 91 05 01 	lds	r24, 0x0105
    2696:	80 5d       	subi	r24, 0xD0	; 208
    2698:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_data>
     lcd_fix_string(AnKat);		//"->|-"
    269c:	80 e4       	ldi	r24, 0x40	; 64
    269e:	91 e0       	ldi	r25, 0x01	; 1
    26a0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lcd_fix_string>
  }
  empty_count++;
    26a4:	80 91 5a 01 	lds	r24, 0x015A
    26a8:	8f 5f       	subi	r24, 0xFF	; 255
    26aa:	80 93 5a 01 	sts	0x015A, r24
  mess_count = 0;
    26ae:	10 92 0b 01 	sts	0x010B, r1
  goto end2;
    26b2:	0e c0       	rjmp	.+28     	; 0x26d0 <main+0x9ac>
gakAusgabe:
  PinLayout(Cathode_char,'G','A'); 	// CGA= or 123=...
#ifdef WITH_THYRISTOR_GATE_V
  lcd_line2(); //2. row 
  lcd_fix_string(Uf_str);		// "Uf="
  DisplayValue(ntrans.uBE,-3,'V',2);
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	4d ef       	ldi	r20, 0xFD	; 253
    26ba:	26 e5       	ldi	r18, 0x56	; 86
    26bc:	02 e0       	ldi	r16, 0x02	; 2
    26be:	0e 94 92 02 	call	0x524	; 0x524 <DisplayValue>
#endif
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 end:
  empty_count = 0;		// reset counter, if part is found
    26c2:	10 92 5a 01 	sts	0x015A, r1
  mess_count++;			// count measurements
    26c6:	80 91 0b 01 	lds	r24, 0x010B
    26ca:	8f 5f       	subi	r24, 0xFF	; 255
    26cc:	80 93 0b 01 	sts	0x010B, r24

 end2:
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND, release relay
    26d0:	88 e1       	ldi	r24, 0x18	; 24
    26d2:	87 b9       	out	0x07, r24	; 7
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
    26d4:	4f 9b       	sbis	0x09, 7	; 9
    26d6:	fe cf       	rjmp	.-4      	; 0x26d4 <main+0x9b0>
  wait_about200ms();
    26d8:	88 e2       	ldi	r24, 0x28	; 40
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>
// wait 28 seconds or 5 seconds (if repeat function)
  for(ptrans.gthvoltage = 0;ptrans.gthvoltage<display_time;ptrans.gthvoltage+=10) {
    26e0:	10 92 67 01 	sts	0x0167, r1
    26e4:	10 92 66 01 	sts	0x0166, r1
    26e8:	10 c0       	rjmp	.+32     	; 0x270a <main+0x9e6>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    26ea:	4f 9b       	sbis	0x09, 7	; 9
    26ec:	86 cb       	rjmp	.-2292   	; 0x1dfa <main+0xd6>
        // If the key is pressed again... 
        // goto start of measurement 
        goto start;
     }
     wdt_reset();
    26ee:	a8 95       	wdr
     wait_about10ms();
    26f0:	82 e0       	ldi	r24, 0x02	; 2
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>
 end2:
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND, release relay
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
  wait_about200ms();
// wait 28 seconds or 5 seconds (if repeat function)
  for(ptrans.gthvoltage = 0;ptrans.gthvoltage<display_time;ptrans.gthvoltage+=10) {
    26f8:	80 91 66 01 	lds	r24, 0x0166
    26fc:	90 91 67 01 	lds	r25, 0x0167
    2700:	0a 96       	adiw	r24, 0x0a	; 10
    2702:	90 93 67 01 	sts	0x0167, r25
    2706:	80 93 66 01 	sts	0x0166, r24
    270a:	80 91 66 01 	lds	r24, 0x0166
    270e:	90 91 67 01 	lds	r25, 0x0167
    2712:	2d e6       	ldi	r18, 0x6D	; 109
    2714:	80 36       	cpi	r24, 0x60	; 96
    2716:	92 07       	cpc	r25, r18
    2718:	40 f3       	brcs	.-48     	; 0x26ea <main+0x9c6>
     goto start;			// repeat measurement POWER_OFF times
  }
 #endif
  // only one Measurement requested, shut off
//  MCUSR = 0;
  ON_PORT &= ~(1<<ON_PIN);		//switch off power
    271a:	5e 98       	cbi	0x0b, 6	; 11
  //never ending loop 
  while(1) {
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    271c:	4f 9b       	sbis	0x09, 7	; 9
    271e:	6d cb       	rjmp	.-2342   	; 0x1dfa <main+0xd6>
        // The statement is only reached if no auto off equipment is installed
        goto start;
     }
     wdt_reset();
    2720:	a8 95       	wdr
     wait_about10ms();
    2722:	82 e0       	ldi	r24, 0x02	; 2
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>
  }
    272a:	f8 cf       	rjmp	.-16     	; 0x271c <main+0x9f8>

0000272c <uart_putc>:
    272c:	2f 93       	push	r18
    272e:	5f b7       	in	r21, 0x3f	; 63
    2730:	2f 93       	push	r18
    2732:	2a e0       	ldi	r18, 0x0A	; 10
    2734:	80 95       	com	r24
    2736:	08 94       	sec

00002738 <putchar0>:
    2738:	10 f4       	brcc	.+4      	; 0x273e <putchar1>
    273a:	43 98       	cbi	0x08, 3	; 8
    273c:	02 c0       	rjmp	.+4      	; 0x2742 <putchar2>

0000273e <putchar1>:
    273e:	43 9a       	sbi	0x08, 3	; 8
	...

00002742 <putchar2>:
    2742:	22 d0       	rcall	.+68     	; 0x2788 <wait100us>
    2744:	29 d0       	rcall	.+82     	; 0x2798 <wait3us>
    2746:	86 95       	lsr	r24
    2748:	2a 95       	dec	r18
    274a:	b1 f7       	brne	.-20     	; 0x2738 <putchar0>
    274c:	2f 91       	pop	r18
    274e:	5f bf       	out	0x3f, r21	; 63
    2750:	2f 91       	pop	r18
    2752:	08 95       	ret

00002754 <UART_delay1>:
    2754:	08 95       	ret

00002756 <wait5s>:
    2756:	03 d0       	rcall	.+6      	; 0x275e <wait1000ms>

00002758 <wait4s>:
    2758:	02 d0       	rcall	.+4      	; 0x275e <wait1000ms>

0000275a <wait3s>:
    275a:	01 d0       	rcall	.+2      	; 0x275e <wait1000ms>

0000275c <wait2s>:
    275c:	00 d0       	rcall	.+0      	; 0x275e <wait1000ms>

0000275e <wait1000ms>:
    275e:	00 d0       	rcall	.+0      	; 0x2760 <wait500ms>

00002760 <wait500ms>:
    2760:	03 d0       	rcall	.+6      	; 0x2768 <wait100ms>

00002762 <wait400ms>:
    2762:	02 d0       	rcall	.+4      	; 0x2768 <wait100ms>

00002764 <wait300ms>:
    2764:	01 d0       	rcall	.+2      	; 0x2768 <wait100ms>

00002766 <wait200ms>:
    2766:	00 d0       	rcall	.+0      	; 0x2768 <wait100ms>

00002768 <wait100ms>:
    2768:	a8 95       	wdr
    276a:	00 d0       	rcall	.+0      	; 0x276c <wait50ms>

0000276c <wait50ms>:
    276c:	03 d0       	rcall	.+6      	; 0x2774 <wait10ms>

0000276e <wait40ms>:
    276e:	02 d0       	rcall	.+4      	; 0x2774 <wait10ms>

00002770 <wait30ms>:
    2770:	01 d0       	rcall	.+2      	; 0x2774 <wait10ms>

00002772 <wait20ms>:
    2772:	00 d0       	rcall	.+0      	; 0x2774 <wait10ms>

00002774 <wait10ms>:
    2774:	00 d0       	rcall	.+0      	; 0x2776 <wait5ms>

00002776 <wait5ms>:
    2776:	03 d0       	rcall	.+6      	; 0x277e <wait1ms>

00002778 <wait4ms>:
    2778:	02 d0       	rcall	.+4      	; 0x277e <wait1ms>

0000277a <wait3ms>:
    277a:	01 d0       	rcall	.+2      	; 0x277e <wait1ms>

0000277c <wait2ms>:
    277c:	00 d0       	rcall	.+0      	; 0x277e <wait1ms>

0000277e <wait1ms>:
    277e:	00 d0       	rcall	.+0      	; 0x2780 <wait500us>

00002780 <wait500us>:
    2780:	03 d0       	rcall	.+6      	; 0x2788 <wait100us>

00002782 <wait400us>:
    2782:	02 d0       	rcall	.+4      	; 0x2788 <wait100us>

00002784 <wait300us>:
    2784:	01 d0       	rcall	.+2      	; 0x2788 <wait100us>

00002786 <wait200us>:
    2786:	00 d0       	rcall	.+0      	; 0x2788 <wait100us>

00002788 <wait100us>:
    2788:	00 d0       	rcall	.+0      	; 0x278a <wait50us>

0000278a <wait50us>:
    278a:	03 d0       	rcall	.+6      	; 0x2792 <wait10us>

0000278c <wait40us>:
    278c:	02 d0       	rcall	.+4      	; 0x2792 <wait10us>

0000278e <wait30us>:
    278e:	01 d0       	rcall	.+2      	; 0x2792 <wait10us>

00002790 <wait20us>:
    2790:	00 d0       	rcall	.+0      	; 0x2792 <wait10us>

00002792 <wait10us>:
    2792:	00 d0       	rcall	.+0      	; 0x2794 <wait5us>

00002794 <wait5us>:
    2794:	03 d0       	rcall	.+6      	; 0x279c <wait1us>

00002796 <wait4us>:
    2796:	02 d0       	rcall	.+4      	; 0x279c <wait1us>

00002798 <wait3us>:
    2798:	01 d0       	rcall	.+2      	; 0x279c <wait1us>

0000279a <wait2us>:
    279a:	00 d0       	rcall	.+0      	; 0x279c <wait1us>

0000279c <wait1us>:
    279c:	00 00       	nop
    279e:	08 95       	ret

000027a0 <getRLmultip>:
  R_DDR = 0;			// switch all resistor ports to input
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
  return;
 } // end ReadCapacity()

unsigned int getRLmultip(unsigned int cvolt) {
    27a0:	ef 92       	push	r14
    27a2:	ff 92       	push	r15
    27a4:	0f 93       	push	r16
    27a6:	1f 93       	push	r17
    27a8:	df 93       	push	r29
    27aa:	cf 93       	push	r28
    27ac:	0f 92       	push	r0
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62

  unsigned int uvolt;
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;
  if (cvolt >= RL_Tab_Beginn) {
    27b2:	21 e0       	ldi	r18, 0x01	; 1
    27b4:	8c 32       	cpi	r24, 0x2C	; 44
    27b6:	92 07       	cpc	r25, r18
    27b8:	18 f0       	brcs	.+6      	; 0x27c0 <getRLmultip+0x20>
     uvolt = cvolt - RL_Tab_Beginn;
    27ba:	8c 52       	subi	r24, 0x2C	; 44
    27bc:	91 40       	sbci	r25, 0x01	; 1
    27be:	02 c0       	rjmp	.+4      	; 0x27c4 <getRLmultip+0x24>
  } else {
     uvolt = 0;			// limit to begin of table
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = uvolt / RL_Tab_Abstand;
    27c4:	69 e1       	ldi	r22, 0x19	; 25
    27c6:	70 e0       	ldi	r23, 0x00	; 0
    27c8:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <__udivmodhi4>
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
  if (tabind > ((RL_Tab_Length/RL_Tab_Abstand)-1)) {
    27cc:	6c 32       	cpi	r22, 0x2C	; 44
    27ce:	18 f4       	brcc	.+6      	; 0x27d6 <getRLmultip+0x36>
  } else {
     uvolt = 0;			// limit to begin of table
  }
  tabind = uvolt / RL_Tab_Abstand;
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
    27d0:	49 e1       	ldi	r20, 0x19	; 25
    27d2:	48 1b       	sub	r20, r24
    27d4:	02 c0       	rjmp	.+4      	; 0x27da <getRLmultip+0x3a>
  if (tabind > ((RL_Tab_Length/RL_Tab_Abstand)-1)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand)-1;	// limit to end of table
     tabres = 0;
    27d6:	40 e0       	ldi	r20, 0x00	; 0
  }
  tabind = uvolt / RL_Tab_Abstand;
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
  if (tabind > ((RL_Tab_Length/RL_Tab_Abstand)-1)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand)-1;	// limit to end of table
    27d8:	6b e2       	ldi	r22, 0x2B	; 43
     tabres = 0;
  }
  y1 = MEM_read_word(&RLtab[tabind]);
    27da:	e6 2e       	mov	r14, r22
    27dc:	ff 24       	eor	r15, r15
    27de:	c7 01       	movw	r24, r14
    27e0:	88 0f       	add	r24, r24
    27e2:	99 1f       	adc	r25, r25
    27e4:	80 50       	subi	r24, 0x00	; 0
    27e6:	90 40       	sbci	r25, 0x00	; 0
    27e8:	49 83       	std	Y+1, r20	; 0x01
    27ea:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <__eerd_word_m168>
    27ee:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RLtab[tabind+1]);
    27f0:	c7 01       	movw	r24, r14
    27f2:	88 0f       	add	r24, r24
    27f4:	99 1f       	adc	r25, r25
    27f6:	8e 5f       	subi	r24, 0xFE	; 254
    27f8:	9f 4f       	sbci	r25, 0xFF	; 255
    27fa:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <__eerd_word_m168>
    27fe:	9c 01       	movw	r18, r24
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
    2800:	49 81       	ldd	r20, Y+1	; 0x01
    2802:	50 e0       	ldi	r21, 0x00	; 0
    2804:	08 1b       	sub	r16, r24
    2806:	19 0b       	sbc	r17, r25
    2808:	40 9f       	mul	r20, r16
    280a:	c0 01       	movw	r24, r0
    280c:	41 9f       	mul	r20, r17
    280e:	90 0d       	add	r25, r0
    2810:	50 9f       	mul	r21, r16
    2812:	90 0d       	add	r25, r0
    2814:	11 24       	eor	r1, r1
    2816:	0c 96       	adiw	r24, 0x0c	; 12
    2818:	69 e1       	ldi	r22, 0x19	; 25
    281a:	70 e0       	ldi	r23, 0x00	; 0
    281c:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <__udivmodhi4>
    2820:	62 0f       	add	r22, r18
    2822:	73 1f       	adc	r23, r19
}
    2824:	cb 01       	movw	r24, r22
    2826:	0f 90       	pop	r0
    2828:	cf 91       	pop	r28
    282a:	df 91       	pop	r29
    282c:	1f 91       	pop	r17
    282e:	0f 91       	pop	r16
    2830:	ff 90       	pop	r15
    2832:	ef 90       	pop	r14
    2834:	08 95       	ret

00002836 <Scale_C_with_vcc>:

void Scale_C_with_vcc(void) {
    2836:	8f 92       	push	r8
    2838:	9f 92       	push	r9
    283a:	af 92       	push	r10
    283c:	bf 92       	push	r11
    283e:	df 92       	push	r13
    2840:	ef 92       	push	r14
    2842:	ff 92       	push	r15
    2844:	0f 93       	push	r16
    2846:	1f 93       	push	r17
    2848:	e0 90 6e 01 	lds	r14, 0x016E
    284c:	f0 90 6f 01 	lds	r15, 0x016F
    2850:	00 91 70 01 	lds	r16, 0x0170
    2854:	10 91 71 01 	lds	r17, 0x0171
    2858:	d0 90 80 01 	lds	r13, 0x0180
   while (cap.cval > 100000) {
      cap.cval /= 10;
    285c:	4a e0       	ldi	r20, 0x0A	; 10
    285e:	84 2e       	mov	r8, r20
    2860:	91 2c       	mov	r9, r1
    2862:	a1 2c       	mov	r10, r1
    2864:	b1 2c       	mov	r11, r1
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    2866:	08 c0       	rjmp	.+16     	; 0x2878 <Scale_C_with_vcc+0x42>
      cap.cval /= 10;
    2868:	c8 01       	movw	r24, r16
    286a:	b7 01       	movw	r22, r14
    286c:	a5 01       	movw	r20, r10
    286e:	94 01       	movw	r18, r8
    2870:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
    2874:	79 01       	movw	r14, r18
    2876:	8a 01       	movw	r16, r20
    2878:	8d 2d       	mov	r24, r13
    287a:	d3 94       	inc	r13
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    287c:	91 ea       	ldi	r25, 0xA1	; 161
    287e:	e9 16       	cp	r14, r25
    2880:	96 e8       	ldi	r25, 0x86	; 134
    2882:	f9 06       	cpc	r15, r25
    2884:	91 e0       	ldi	r25, 0x01	; 1
    2886:	09 07       	cpc	r16, r25
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	19 07       	cpc	r17, r25
    288c:	68 f7       	brcc	.-38     	; 0x2868 <Scale_C_with_vcc+0x32>
    288e:	80 93 80 01 	sts	0x0180, r24
      cap.cval /= 10;
      cap.cpre ++;			// prevent overflow
   }
   cap.cval *= ADCconfig.U_AVCC;	// scale with measured voltage
    2892:	20 91 40 01 	lds	r18, 0x0140
    2896:	30 91 41 01 	lds	r19, 0x0141
    289a:	40 e0       	ldi	r20, 0x00	; 0
    289c:	50 e0       	ldi	r21, 0x00	; 0
    289e:	c8 01       	movw	r24, r16
    28a0:	b7 01       	movw	r22, r14
    28a2:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
    28a6:	28 e8       	ldi	r18, 0x88	; 136
    28a8:	33 e1       	ldi	r19, 0x13	; 19
    28aa:	40 e0       	ldi	r20, 0x00	; 0
    28ac:	50 e0       	ldi	r21, 0x00	; 0
    28ae:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
    28b2:	20 93 6e 01 	sts	0x016E, r18
    28b6:	30 93 6f 01 	sts	0x016F, r19
    28ba:	40 93 70 01 	sts	0x0170, r20
    28be:	50 93 71 01 	sts	0x0171, r21
}
    28c2:	1f 91       	pop	r17
    28c4:	0f 91       	pop	r16
    28c6:	ff 90       	pop	r15
    28c8:	ef 90       	pop	r14
    28ca:	df 90       	pop	r13
    28cc:	bf 90       	pop	r11
    28ce:	af 90       	pop	r10
    28d0:	9f 90       	pop	r9
    28d2:	8f 90       	pop	r8
    28d4:	08 95       	ret

000028d6 <ReadCapacity>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    28d6:	7f 92       	push	r7
    28d8:	8f 92       	push	r8
    28da:	9f 92       	push	r9
    28dc:	af 92       	push	r10
    28de:	bf 92       	push	r11
    28e0:	cf 92       	push	r12
    28e2:	df 92       	push	r13
    28e4:	ef 92       	push	r14
    28e6:	ff 92       	push	r15
    28e8:	0f 93       	push	r16
    28ea:	1f 93       	push	r17
    28ec:	cf 93       	push	r28
    28ee:	df 93       	push	r29
    28f0:	18 2f       	mov	r17, r24
    28f2:	76 2e       	mov	r7, r22
#if FLASHEND > 0x1fff
  unsigned int vloss;	// lost voltage after load pulse in 0.1% 
#endif

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
    28f4:	88 0f       	add	r24, r24
    28f6:	81 0f       	add	r24, r17
    28f8:	86 0f       	add	r24, r22
    28fa:	81 50       	subi	r24, 0x01	; 1
    28fc:	80 93 5b 01 	sts	0x015B, r24
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2900:	e6 2f       	mov	r30, r22
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	ed 5f       	subi	r30, 0xFD	; 253
    2906:	fe 4f       	sbci	r31, 0xFE	; 254
    2908:	04 91       	lpm	r16, Z+
  HiPinR_L = pgm_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
    290a:	e1 2f       	mov	r30, r17
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	e0 50       	subi	r30, 0x00	; 0
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	a4 90       	lpm	r10, Z+
  lcd_testpin(LowPin);
  lcd_data('C');
  lcd_testpin(HighPin);
  lcd_space();
#endif
  if(PartFound == PART_RESISTOR) {
    2914:	80 91 07 01 	lds	r24, 0x0107
    2918:	86 30       	cpi	r24, 0x06	; 6
    291a:	09 f4       	brne	.+2      	; 0x291e <ReadCapacity+0x48>
    291c:	98 c2       	rjmp	.+1328   	; 0x2e4e <ReadCapacity+0x578>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    291e:	30 91 05 01 	lds	r19, 0x0105
    2922:	a4 e8       	ldi	r26, 0x84	; 132
    2924:	b1 e0       	ldi	r27, 0x01	; 1
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	13 c0       	rjmp	.+38     	; 0x2950 <ReadCapacity+0x7a>
     if ((diodes[ii].Cathode == LowPin) && (diodes[ii].Anode == HighPin) && (diodes[ii].Voltage < 1500)) {
    292a:	11 96       	adiw	r26, 0x01	; 1
    292c:	8c 91       	ld	r24, X
    292e:	11 97       	sbiw	r26, 0x01	; 1
    2930:	87 15       	cp	r24, r7
    2932:	61 f4       	brne	.+24     	; 0x294c <ReadCapacity+0x76>
    2934:	8c 91       	ld	r24, X
    2936:	81 17       	cp	r24, r17
    2938:	49 f4       	brne	.+18     	; 0x294c <ReadCapacity+0x76>
    293a:	12 96       	adiw	r26, 0x02	; 2
    293c:	8d 91       	ld	r24, X+
    293e:	9c 91       	ld	r25, X
    2940:	13 97       	sbiw	r26, 0x03	; 3
    2942:	45 e0       	ldi	r20, 0x05	; 5
    2944:	8c 3d       	cpi	r24, 0xDC	; 220
    2946:	94 07       	cpc	r25, r20
    2948:	08 f4       	brcc	.+2      	; 0x294c <ReadCapacity+0x76>
    294a:	81 c2       	rjmp	.+1282   	; 0x2e4e <ReadCapacity+0x578>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    294c:	2f 5f       	subi	r18, 0xFF	; 255
    294e:	14 96       	adiw	r26, 0x04	; 4
    2950:	23 17       	cp	r18, r19
    2952:	58 f3       	brcs	.-42     	; 0x292a <ReadCapacity+0x54>

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2954:	08 60       	ori	r16, 0x08	; 8
        return;
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
    2956:	10 92 7b 01 	sts	0x017B, r1
    295a:	10 92 7a 01 	sts	0x017A, r1
  vloss = 0;				// set lost voltage to zero
#endif
  cap.cval = 0;				// set capacity value to zero
    295e:	10 92 6e 01 	sts	0x016E, r1
    2962:	10 92 6f 01 	sts	0x016F, r1
    2966:	10 92 70 01 	sts	0x0170, r1
    296a:	10 92 71 01 	sts	0x0171, r1
  cap.cpre = -12;			//default unit is pF
    296e:	84 ef       	ldi	r24, 0xF4	; 244
    2970:	80 93 80 01 	sts	0x0180, r24
  EntladePins();			// discharge capacitor
    2974:	0e 94 ad 01 	call	0x35a	; 0x35a <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    2978:	88 e0       	ldi	r24, 0x08	; 8
    297a:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    297c:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    297e:	07 b9       	out	0x07, r16	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    2980:	a4 b8       	out	0x04, r10	; 4
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    2982:	81 2f       	mov	r24, r17
    2984:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
    2988:	7c 01       	movw	r14, r24
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    298a:	10 92 5d 01 	sts	0x015D, r1
    298e:	10 92 5c 01 	sts	0x015C, r1
  EntladePins();			// discharge capacitor
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
  R_PORT = 0;				// switch R-Port to GND
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    2992:	ec 01       	movw	r28, r24
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2994:	2d c0       	rjmp	.+90     	; 0x29f0 <ReadCapacity+0x11a>
     R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    2996:	a5 b8       	out	0x05, r10	; 5
     R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    2998:	a4 b8       	out	0x04, r10	; 4
     wait10ms();			// wait exactly 10ms, do not sleep
    299a:	0e 94 ba 13 	call	0x2774	; 0x2774 <wait10ms>
     R_DDR = 0;				// switch back to input
    299e:	14 b8       	out	0x04, r1	; 4
     R_PORT = 0;			// no Pull up
    29a0:	15 b8       	out	0x05, r1	; 5
     wait500us();			//wait a little time
    29a2:	0e 94 c0 13 	call	0x2780	; 0x2780 <wait500us>
     wdt_reset();
    29a6:	a8 95       	wdr
     // read voltage without current, is already charged enough?
     adcv[2] = ReadADC(HighPin);
    29a8:	81 2f       	mov	r24, r17
    29aa:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
     if (adcv[2] > adcv[0]) {
    29ae:	e8 16       	cp	r14, r24
    29b0:	f9 06       	cpc	r15, r25
    29b2:	20 f4       	brcc	.+8      	; 0x29bc <ReadCapacity+0xe6>
        adcv[2] -= adcv[0];		//difference to beginning voltage
    29b4:	ec 01       	movw	r28, r24
    29b6:	ce 19       	sub	r28, r14
    29b8:	df 09       	sbc	r29, r15
    29ba:	02 c0       	rjmp	.+4      	; 0x29c0 <ReadCapacity+0xea>
     } else {
        adcv[2] = 0;			// voltage is lower or same as beginning voltage
    29bc:	c0 e0       	ldi	r28, 0x00	; 0
    29be:	d0 e0       	ldi	r29, 0x00	; 0
     }
     if ((ovcnt16 == 126) && (adcv[2] < 75)) {
    29c0:	80 91 5c 01 	lds	r24, 0x015C
    29c4:	90 91 5d 01 	lds	r25, 0x015D
    29c8:	8e 37       	cpi	r24, 0x7E	; 126
    29ca:	91 05       	cpc	r25, r1
    29cc:	21 f4       	brne	.+8      	; 0x29d6 <ReadCapacity+0x100>
    29ce:	cb 34       	cpi	r28, 0x4B	; 75
    29d0:	d1 05       	cpc	r29, r1
    29d2:	08 f4       	brcc	.+2      	; 0x29d6 <ReadCapacity+0x100>
    29d4:	37 c2       	rjmp	.+1134   	; 0x2e44 <ReadCapacity+0x56e>
        // 300mV can not be reached well-timed 
        break;		// don't try to load any more
     }
     if (adcv[2] > 300) {
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	cd 32       	cpi	r28, 0x2D	; 45
    29da:	d8 07       	cpc	r29, r24
    29dc:	b0 f4       	brcc	.+44     	; 0x2a0a <ReadCapacity+0x134>
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    29de:	80 91 5c 01 	lds	r24, 0x015C
    29e2:	90 91 5d 01 	lds	r25, 0x015D
    29e6:	01 96       	adiw	r24, 0x01	; 1
    29e8:	90 93 5d 01 	sts	0x015D, r25
    29ec:	80 93 5c 01 	sts	0x015C, r24
    29f0:	80 91 5c 01 	lds	r24, 0x015C
    29f4:	90 91 5d 01 	lds	r25, 0x015D
    29f8:	21 e0       	ldi	r18, 0x01	; 1
    29fa:	84 3f       	cpi	r24, 0xF4	; 244
    29fc:	92 07       	cpc	r25, r18
    29fe:	58 f2       	brcs	.-106    	; 0x2996 <ReadCapacity+0xc0>
//  wdt_reset();
#if DebugOut == 10
  DisplayValue(ovcnt16,0,' ',4);
  DisplayValue(adcv[2],-3,'V',4);
#endif
  if (adcv[2] < 301) {
    2a00:	41 e0       	ldi	r20, 0x01	; 1
    2a02:	cd 32       	cpi	r28, 0x2D	; 45
    2a04:	d4 07       	cpc	r29, r20
    2a06:	08 f4       	brcc	.+2      	; 0x2a0a <ReadCapacity+0x134>
    2a08:	1d c2       	rjmp	.+1082   	; 0x2e44 <ReadCapacity+0x56e>
#endif
//     if (NumOfDiodes != 0) goto messe_mit_rh; /* ****************************** */
     goto keinC;		// was never charged enough, >100mF or shorted
  }
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    2a0a:	80 91 5c 01 	lds	r24, 0x015C
    2a0e:	90 91 5d 01 	lds	r25, 0x015D
    2a12:	00 97       	sbiw	r24, 0x00	; 0
    2a14:	81 f4       	brne	.+32     	; 0x2a36 <ReadCapacity+0x160>
    2a16:	85 e0       	ldi	r24, 0x05	; 5
    2a18:	c5 31       	cpi	r28, 0x15	; 21
    2a1a:	d8 07       	cpc	r29, r24
    2a1c:	08 f0       	brcs	.+2      	; 0x2a20 <ReadCapacity+0x14a>
    2a1e:	92 c0       	rjmp	.+292    	; 0x2b44 <ReadCapacity+0x26e>
    2a20:	0a c0       	rjmp	.+20     	; 0x2a36 <ReadCapacity+0x160>
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
     wait5ms();
    2a22:	0e 94 bb 13 	call	0x2776	; 0x2776 <wait5ms>
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
    2a26:	81 2f       	mov	r24, r17
    2a28:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
     wdt_reset();
    2a2c:	a8 95       	wdr
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2a2e:	08 94       	sec
    2a30:	c1 1c       	adc	r12, r1
    2a32:	d1 1c       	adc	r13, r1
    2a34:	03 c0       	rjmp	.+6      	; 0x2a3c <ReadCapacity+0x166>
#endif
//     if (NumOfDiodes != 0) goto messe_mit_rh; /* ****************************** */
     goto keinC;		// was never charged enough, >100mF or shorted
  }
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    2a36:	ce 01       	movw	r24, r28
    2a38:	cc 24       	eor	r12, r12
    2a3a:	dd 24       	eor	r13, r13
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2a3c:	20 91 5c 01 	lds	r18, 0x015C
    2a40:	30 91 5d 01 	lds	r19, 0x015D
    2a44:	2c 15       	cp	r18, r12
    2a46:	3d 05       	cpc	r19, r13
    2a48:	60 f7       	brcc	.-40     	; 0x2a22 <ReadCapacity+0x14c>
     wait5ms();
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
    2a4a:	e8 16       	cp	r14, r24
    2a4c:	f9 06       	cpc	r15, r25
    2a4e:	30 f4       	brcc	.+12     	; 0x2a5c <ReadCapacity+0x186>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    2a50:	8e 19       	sub	r24, r14
    2a52:	9f 09       	sbc	r25, r15
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    2a54:	8c 17       	cp	r24, r28
    2a56:	9d 07       	cpc	r25, r29
    2a58:	10 f5       	brcc	.+68     	; 0x2a9e <ReadCapacity+0x1c8>
    2a5a:	02 c0       	rjmp	.+4      	; 0x2a60 <ReadCapacity+0x18a>
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
    2a60:	7e 01       	movw	r14, r28
    2a62:	e8 1a       	sub	r14, r24
    2a64:	f9 0a       	sbc	r15, r25
  } else {
     adcv[3] = 0;			// no lost voltage
  }
#if FLASHEND > 0x1fff
  // compute equivalent parallel resistance from voltage drop
  if (adcv[3] > 0) {
    2a66:	e9 f0       	breq	.+58     	; 0x2aa2 <ReadCapacity+0x1cc>
     // there is any voltage drop (adcv[3]) !
     // adcv[2] is the loaded voltage.
     vloss = (unsigned long)(adcv[3] * 1000UL) / adcv[2];
    2a68:	b7 01       	movw	r22, r14
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	28 ee       	ldi	r18, 0xE8	; 232
    2a70:	33 e0       	ldi	r19, 0x03	; 3
    2a72:	40 e0       	ldi	r20, 0x00	; 0
    2a74:	50 e0       	ldi	r21, 0x00	; 0
    2a76:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
    2a7a:	9e 01       	movw	r18, r28
    2a7c:	40 e0       	ldi	r20, 0x00	; 0
    2a7e:	50 e0       	ldi	r21, 0x00	; 0
    2a80:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
    2a84:	49 01       	movw	r8, r18
  }
#endif
  if (adcv[3] > 100) {
    2a86:	25 e6       	ldi	r18, 0x65	; 101
    2a88:	e2 16       	cp	r14, r18
    2a8a:	f1 04       	cpc	r15, r1
    2a8c:	60 f0       	brcs	.+24     	; 0x2aa6 <ReadCapacity+0x1d0>
 #if DebugOut == 10
     lcd_data('L');
     lcd_space();
     wait_about1s();
 #endif
     if (ovcnt16 == 0 )  {
    2a8e:	80 91 5c 01 	lds	r24, 0x015C
    2a92:	90 91 5d 01 	lds	r25, 0x015D
    2a96:	00 97       	sbiw	r24, 0x00	; 0
    2a98:	09 f4       	brne	.+2      	; 0x2a9c <ReadCapacity+0x1c6>
    2a9a:	56 c0       	rjmp	.+172    	; 0x2b48 <ReadCapacity+0x272>
    2a9c:	d3 c1       	rjmp	.+934    	; 0x2e44 <ReadCapacity+0x56e>
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    2a9e:	ee 24       	eor	r14, r14
    2aa0:	ff 24       	eor	r15, r15
  } else {
     adcv[3] = 0;			// no lost voltage
  }
#if FLASHEND > 0x1fff
  // compute equivalent parallel resistance from voltage drop
  if (adcv[3] > 0) {
    2aa2:	88 24       	eor	r8, r8
    2aa4:	99 24       	eor	r9, r9
     if (ovcnt16 == 0 )  {
        goto messe_mit_rh;		// Voltage of more than 1300mV is reached in one pulse, but not hold
     }
     goto keinC;			// capacitor does not keep the voltage about 5ms
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
    2aa6:	a0 90 5c 01 	lds	r10, 0x015C
    2aaa:	b0 90 5d 01 	lds	r11, 0x015D
    2aae:	08 94       	sec
    2ab0:	a1 1c       	adc	r10, r1
    2ab2:	b1 1c       	adc	r11, r1
    2ab4:	cc 24       	eor	r12, r12
    2ab6:	dd 24       	eor	r13, r13
    2ab8:	a0 92 76 01 	sts	0x0176, r10
    2abc:	b0 92 77 01 	sts	0x0177, r11
    2ac0:	c0 92 78 01 	sts	0x0178, r12
    2ac4:	d0 92 79 01 	sts	0x0179, r13
  // compute factor with load voltage + lost voltage during the voltage load time
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]+adcv[3]);	// get factor to convert time to capacity from table
    2ac8:	c7 01       	movw	r24, r14
    2aca:	8c 0f       	add	r24, r28
    2acc:	9d 1f       	adc	r25, r29
    2ace:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <getRLmultip>
    2ad2:	bc 01       	movw	r22, r24
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	a6 01       	movw	r20, r12
    2ada:	95 01       	movw	r18, r10
    2adc:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
    2ae0:	60 93 76 01 	sts	0x0176, r22
    2ae4:	70 93 77 01 	sts	0x0177, r23
    2ae8:	80 93 78 01 	sts	0x0178, r24
    2aec:	90 93 79 01 	sts	0x0179, r25
#endif
   cap.cval = cap.cval_uncorrected.dw;	// set result to uncorrected
    2af0:	60 93 6e 01 	sts	0x016E, r22
    2af4:	70 93 6f 01 	sts	0x016F, r23
    2af8:	80 93 70 01 	sts	0x0170, r24
    2afc:	90 93 71 01 	sts	0x0171, r25
   cap.cpre = -9;		// switch units to nF 
    2b00:	87 ef       	ldi	r24, 0xF7	; 247
    2b02:	80 93 80 01 	sts	0x0180, r24
   Scale_C_with_vcc();
    2b06:	0e 94 1b 14 	call	0x2836	; 0x2836 <Scale_C_with_vcc>
   // cap.cval for this type is at least 40000nF, so the last digit will be never shown
   cap.cval *= (1000 - C_H_KORR);	// correct with C_H_KORR with 0.1% resolution, but prevent overflow
    2b0a:	60 91 6e 01 	lds	r22, 0x016E
    2b0e:	70 91 6f 01 	lds	r23, 0x016F
    2b12:	80 91 70 01 	lds	r24, 0x0170
    2b16:	90 91 71 01 	lds	r25, 0x0171
    2b1a:	28 ee       	ldi	r18, 0xE8	; 232
    2b1c:	33 e0       	ldi	r19, 0x03	; 3
    2b1e:	40 e0       	ldi	r20, 0x00	; 0
    2b20:	50 e0       	ldi	r21, 0x00	; 0
    2b22:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
   cap.cval /= 100;
    2b26:	24 e6       	ldi	r18, 0x64	; 100
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	40 e0       	ldi	r20, 0x00	; 0
    2b2c:	50 e0       	ldi	r21, 0x00	; 0
    2b2e:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
    2b32:	20 93 6e 01 	sts	0x016E, r18
    2b36:	30 93 6f 01 	sts	0x016F, r19
    2b3a:	40 93 70 01 	sts	0x0170, r20
    2b3e:	50 93 71 01 	sts	0x0171, r21
   DisplayValue(cap.cval,cap.cpre,'F',4);
   lcd_space();
   lcd_string(utoa(ovcnt16,outval,10));
   wait_about3s();
#endif
   goto checkDiodes;
    2b42:	41 c1       	rjmp	.+642    	; 0x2dc6 <ReadCapacity+0x4f0>
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
  vloss = 0;				// set lost voltage to zero
    2b44:	88 24       	eor	r8, r8
    2b46:	99 24       	eor	r9, r9
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
  HiPinR_L = pgm_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load
    2b48:	ea 2c       	mov	r14, r10
    2b4a:	ee 0c       	add	r14, r14

//==================================================================================
// Measurement of little capacity values
messe_mit_rh:
  //little capacity value, about  < 50 µF
  EntladePins();			// discharge capacitor
    2b4c:	0e 94 ad 01 	call	0x35a	; 0x35a <EntladePins>
  //measure with the R_H (470kOhm) resistor 
  R_PORT = 0;		// R_DDR ist HiPinR_L
    2b50:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = (1<<TP1) | (1<<TP2) | (1<<TP3) | (1<<TxD);	//switch all Pins to output
    2b52:	8f e0       	ldi	r24, 0x0F	; 15
    2b54:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		//switch all ADC Pins to GND
    2b56:	88 e0       	ldi	r24, 0x08	; 8
    2b58:	88 b9       	out	0x08, r24	; 8
  R_DDR = HiPinR_H;   		// switch R_H resistor port for HighPin to output (GND)
    2b5a:	e4 b8       	out	0x04, r14	; 4
// setup Analog Comparator
  ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    2b5c:	80 e4       	ldi	r24, 0x40	; 64
    2b5e:	80 93 7b 00 	sts	0x007B, r24
  ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    2b62:	84 e5       	ldi	r24, 0x54	; 84
    2b64:	80 bf       	out	0x30, r24	; 48
  ADMUX = (1<<REFS0) | HighPin;			// switch Mux to High-Pin
    2b66:	81 2f       	mov	r24, r17
    2b68:	80 64       	ori	r24, 0x40	; 64
    2b6a:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    2b6e:	86 e1       	ldi	r24, 0x16	; 22
    2b70:	80 93 7a 00 	sts	0x007A, r24
  wait200us();			//wait for bandgap to start up
    2b74:	0e 94 c3 13 	call	0x2786	; 0x2786 <wait200us>

// setup Counter1
  ovcnt16 = 0;
    2b78:	10 92 5d 01 	sts	0x015D, r1
    2b7c:	10 92 5c 01 	sts	0x015C, r1
  TCCR1A = 0;			// set Counter1 to normal Mode
    2b80:	10 92 80 00 	sts	0x0080, r1
  TCNT1 = 0;			//set Counter to 0
    2b84:	10 92 85 00 	sts	0x0085, r1
    2b88:	10 92 84 00 	sts	0x0084, r1
  TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// clear interrupt flags
    2b8c:	87 e2       	ldi	r24, 0x27	; 39
    2b8e:	86 bb       	out	0x16, r24	; 22
#ifndef INHIBIT_SLEEP_MODE
  TIMSK1 = (1<<TOIE1) | (1<<ICIE1);	// enable Timer overflow interrupt and input capture interrupt
    2b90:	81 e2       	ldi	r24, 0x21	; 33
    2b92:	80 93 6f 00 	sts	0x006F, r24
  unfinished = 1;
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	80 93 6d 01 	sts	0x016D, r24
#endif
  R_PORT = HiPinR_H;           	// switch R_H resistor port for HighPin to VCC
    2b9c:	e5 b8       	out	0x05, r14	; 5
  if(PartFound == PART_FET) {
    2b9e:	90 91 07 01 	lds	r25, 0x0107
    2ba2:	93 30       	cpi	r25, 0x03	; 3
    2ba4:	71 f4       	brne	.+28     	; 0x2bc2 <ReadCapacity+0x2ec>
     // charge capacitor with R_H resistor
     TCCR1B = (0<<ICNC1) | (1<<CS10);	//Start counter 1MHz or 8MHz without Noise Canceler
    2ba6:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = (((1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK) & ~(1<<HighPin));	// release only HighPin ADC port
    2baa:	81 e0       	ldi	r24, 0x01	; 1
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	01 2e       	mov	r0, r17
    2bb0:	02 c0       	rjmp	.+4      	; 0x2bb6 <ReadCapacity+0x2e0>
    2bb2:	88 0f       	add	r24, r24
    2bb4:	99 1f       	adc	r25, r25
    2bb6:	0a 94       	dec	r0
    2bb8:	e2 f7       	brpl	.-8      	; 0x2bb2 <ReadCapacity+0x2dc>
    2bba:	80 95       	com	r24
    2bbc:	8f 70       	andi	r24, 0x0F	; 15
    2bbe:	87 b9       	out	0x07, r24	; 7
    2bc0:	03 c0       	rjmp	.+6      	; 0x2bc8 <ReadCapacity+0x2f2>
  } else {
     TCCR1B =  (0<<ICNC1) | (1<<CS10);	//start counter 1MHz or 8MHz without Noise Canceler
    2bc2:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
    2bc6:	07 b9       	out	0x07, r16	; 7
     // this OV was not counted, but was before the Input Capture
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
     ovcnt16++;
  }
#else
  cli();		// disable interrupts to prevent wakeup Interrupts before sleeping
    2bc8:	f8 94       	cli
  set_sleep_mode(SLEEP_MODE_IDLE);
    2bca:	83 b7       	in	r24, 0x33	; 51
    2bcc:	81 7f       	andi	r24, 0xF1	; 241
    2bce:	83 bf       	out	0x33, r24	; 51
  while(unfinished) {
    2bd0:	12 c0       	rjmp	.+36     	; 0x2bf6 <ReadCapacity+0x320>
    sleep_enable();
    2bd2:	83 b7       	in	r24, 0x33	; 51
    2bd4:	81 60       	ori	r24, 0x01	; 1
    2bd6:	83 bf       	out	0x33, r24	; 51
    sei();		// enable interrupts after next instruction
    2bd8:	78 94       	sei
    sleep_cpu();	// only enable interrupts during sleeping
    2bda:	88 95       	sleep
    sleep_disable();
    2bdc:	83 b7       	in	r24, 0x33	; 51
    2bde:	8e 7f       	andi	r24, 0xFE	; 254
    2be0:	83 bf       	out	0x33, r24	; 51
    cli();		// disable interrupts again
    2be2:	f8 94       	cli
    wdt_reset();	// reset watch dog during waiting
    2be4:	a8 95       	wdr
    if(ovcnt16 == (F_CPU/5000)) {
    2be6:	80 91 5c 01 	lds	r24, 0x015C
    2bea:	90 91 5d 01 	lds	r25, 0x015D
    2bee:	46 e0       	ldi	r20, 0x06	; 6
    2bf0:	80 34       	cpi	r24, 0x40	; 64
    2bf2:	94 07       	cpc	r25, r20
    2bf4:	21 f0       	breq	.+8      	; 0x2bfe <ReadCapacity+0x328>
     ovcnt16++;
  }
#else
  cli();		// disable interrupts to prevent wakeup Interrupts before sleeping
  set_sleep_mode(SLEEP_MODE_IDLE);
  while(unfinished) {
    2bf6:	80 91 6d 01 	lds	r24, 0x016D
    2bfa:	88 23       	and	r24, r24
    2bfc:	51 f7       	brne	.-44     	; 0x2bd2 <ReadCapacity+0x2fc>
    wdt_reset();	// reset watch dog during waiting
    if(ovcnt16 == (F_CPU/5000)) {
       break; 		//Timeout for Charging, above 12 s
    }
  }
  sei();		// enable interrupts again
    2bfe:	78 94       	sei
  TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    2c00:	10 92 81 00 	sts	0x0081, r1
  tmpint = ICR1;		// get previous Input Capture Counter flag
    2c04:	c0 91 86 00 	lds	r28, 0x0086
    2c08:	d0 91 87 00 	lds	r29, 0x0087
  TIMSK1 = (0<<TOIE1) | (0<<ICIE1);	// disable Timer overflow interrupt and input capture interrupt
    2c0c:	10 92 6f 00 	sts	0x006F, r1
    lcd_string(utoa(tmpint,outval,10));
  }
#endif

//############################################################
  ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    2c10:	86 e9       	ldi	r24, 0x96	; 150
    2c12:	80 93 7a 00 	sts	0x007A, r24
  R_DDR = 0;			// switch R_H resistor port for input
    2c16:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// switch R_H resistor port pull up for HighPin off
    2c18:	15 b8       	out	0x05, r1	; 5
  adcv[2] = ReadADC(HighPin);   // get loaded voltage
    2c1a:	81 2f       	mov	r24, r17
    2c1c:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
  load_diff = adcv[2] + REF_C_KORR - ref_mv;	// build difference of capacitor voltage to Reference Voltage
    2c20:	20 91 44 01 	lds	r18, 0x0144
    2c24:	30 91 45 01 	lds	r19, 0x0145
    2c28:	82 1b       	sub	r24, r18
    2c2a:	93 0b       	sbc	r25, r19
    2c2c:	0c 96       	adiw	r24, 0x0c	; 12
    2c2e:	90 93 83 01 	sts	0x0183, r25
    2c32:	80 93 82 01 	sts	0x0182, r24
//############################################################
  if (ovcnt16 >= (F_CPU/10000)) {
    2c36:	80 91 5c 01 	lds	r24, 0x015C
    2c3a:	90 91 5d 01 	lds	r25, 0x015D
    2c3e:	23 e0       	ldi	r18, 0x03	; 3
    2c40:	80 32       	cpi	r24, 0x20	; 32
    2c42:	92 07       	cpc	r25, r18
    2c44:	08 f0       	brcs	.+2      	; 0x2c48 <ReadCapacity+0x372>
    2c46:	fe c0       	rjmp	.+508    	; 0x2e44 <ReadCapacity+0x56e>
     wait_about1s();
#endif
     goto keinC;	// no normal end
  }
//  cap.cval_uncorrected = CombineII2Long(ovcnt16, tmpint);
  cap.cval_uncorrected.w[1] = ovcnt16;
    2c48:	80 91 5c 01 	lds	r24, 0x015C
    2c4c:	90 91 5d 01 	lds	r25, 0x015D
    2c50:	90 93 79 01 	sts	0x0179, r25
    2c54:	80 93 78 01 	sts	0x0178, r24
  cap.cval_uncorrected.w[0] = tmpint;
    2c58:	d0 93 77 01 	sts	0x0177, r29
    2c5c:	c0 93 76 01 	sts	0x0176, r28

  cap.cpre = -12;			// cap.cval unit is pF 
    2c60:	84 ef       	ldi	r24, 0xF4	; 244
    2c62:	80 93 80 01 	sts	0x0180, r24
  if (ovcnt16 > 65) {
    2c66:	80 91 5c 01 	lds	r24, 0x015C
    2c6a:	90 91 5d 01 	lds	r25, 0x015D
    2c6e:	82 34       	cpi	r24, 0x42	; 66
    2c70:	91 05       	cpc	r25, r1
    2c72:	c8 f0       	brcs	.+50     	; 0x2ca6 <ReadCapacity+0x3d0>
     cap.cval_uncorrected.dw /= 100;	// switch to next unit
    2c74:	60 91 76 01 	lds	r22, 0x0176
    2c78:	70 91 77 01 	lds	r23, 0x0177
    2c7c:	80 91 78 01 	lds	r24, 0x0178
    2c80:	90 91 79 01 	lds	r25, 0x0179
    2c84:	24 e6       	ldi	r18, 0x64	; 100
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	40 e0       	ldi	r20, 0x00	; 0
    2c8a:	50 e0       	ldi	r21, 0x00	; 0
    2c8c:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
    2c90:	20 93 76 01 	sts	0x0176, r18
    2c94:	30 93 77 01 	sts	0x0177, r19
    2c98:	40 93 78 01 	sts	0x0178, r20
    2c9c:	50 93 79 01 	sts	0x0179, r21
     cap.cpre += 2;			// set unit, prevent overflow
    2ca0:	86 ef       	ldi	r24, 0xF6	; 246
    2ca2:	80 93 80 01 	sts	0x0180, r24
  }
  cap.cval_uncorrected.dw *= RHmultip;		// 708
    2ca6:	60 91 00 01 	lds	r22, 0x0100
    2caa:	70 91 01 01 	lds	r23, 0x0101
    2cae:	80 e0       	ldi	r24, 0x00	; 0
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	20 91 76 01 	lds	r18, 0x0176
    2cb6:	30 91 77 01 	lds	r19, 0x0177
    2cba:	40 91 78 01 	lds	r20, 0x0178
    2cbe:	50 91 79 01 	lds	r21, 0x0179
    2cc2:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
  cap.cval_uncorrected.dw /= (F_CPU / 10000);	// divide by 100 (@ 1MHz clock), 800 (@ 8MHz clock)
    2cc6:	20 e2       	ldi	r18, 0x20	; 32
    2cc8:	33 e0       	ldi	r19, 0x03	; 3
    2cca:	40 e0       	ldi	r20, 0x00	; 0
    2ccc:	50 e0       	ldi	r21, 0x00	; 0
    2cce:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
    2cd2:	20 93 76 01 	sts	0x0176, r18
    2cd6:	30 93 77 01 	sts	0x0177, r19
    2cda:	40 93 78 01 	sts	0x0178, r20
    2cde:	50 93 79 01 	sts	0x0179, r21
  cap.cval = cap.cval_uncorrected.dw;		// set the corrected cap.cval
    2ce2:	ee e6       	ldi	r30, 0x6E	; 110
    2ce4:	f1 e0       	ldi	r31, 0x01	; 1
    2ce6:	20 93 6e 01 	sts	0x016E, r18
    2cea:	31 83       	std	Z+1, r19	; 0x01
    2cec:	42 83       	std	Z+2, r20	; 0x02
    2cee:	53 83       	std	Z+3, r21	; 0x03
  Scale_C_with_vcc();
    2cf0:	0e 94 1b 14 	call	0x2836	; 0x2836 <Scale_C_with_vcc>
  if (cap.cpre == -12) {
    2cf4:	80 91 80 01 	lds	r24, 0x0180
    2cf8:	84 3f       	cpi	r24, 0xF4	; 244
    2cfa:	09 f0       	breq	.+2      	; 0x2cfe <ReadCapacity+0x428>
    2cfc:	55 c0       	rjmp	.+170    	; 0x2da8 <ReadCapacity+0x4d2>
#if COMP_SLEW1 > COMP_SLEW2
     if (cap.cval < COMP_SLEW1) {
    2cfe:	c0 90 6e 01 	lds	r12, 0x016E
    2d02:	d0 90 6f 01 	lds	r13, 0x016F
    2d06:	e0 90 70 01 	lds	r14, 0x0170
    2d0a:	f0 90 71 01 	lds	r15, 0x0171
    2d0e:	40 ea       	ldi	r20, 0xA0	; 160
    2d10:	c4 16       	cp	r12, r20
    2d12:	4f e0       	ldi	r20, 0x0F	; 15
    2d14:	d4 06       	cpc	r13, r20
    2d16:	40 e0       	ldi	r20, 0x00	; 0
    2d18:	e4 06       	cpc	r14, r20
    2d1a:	40 e0       	ldi	r20, 0x00	; 0
    2d1c:	f4 06       	cpc	r15, r20
    2d1e:	c0 f4       	brcc	.+48     	; 0x2d50 <ReadCapacity+0x47a>
        // add slew rate dependent offset
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
    2d20:	a7 01       	movw	r20, r14
    2d22:	96 01       	movw	r18, r12
    2d24:	24 52       	subi	r18, 0x24	; 36
    2d26:	3f 4f       	sbci	r19, 0xFF	; 255
    2d28:	4f 4f       	sbci	r20, 0xFF	; 255
    2d2a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d2c:	60 ea       	ldi	r22, 0xA0	; 160
    2d2e:	7f e0       	ldi	r23, 0x0F	; 15
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
    2d38:	2c 0d       	add	r18, r12
    2d3a:	3d 1d       	adc	r19, r13
    2d3c:	4e 1d       	adc	r20, r14
    2d3e:	5f 1d       	adc	r21, r15
    2d40:	20 93 6e 01 	sts	0x016E, r18
    2d44:	30 93 6f 01 	sts	0x016F, r19
    2d48:	40 93 70 01 	sts	0x0170, r20
    2d4c:	50 93 71 01 	sts	0x0171, r21
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2d50:	80 91 5b 01 	lds	r24, 0x015B
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	84 56       	subi	r24, 0x64	; 100
    2d58:	9e 4f       	sbci	r25, 0xFE	; 254
    2d5a:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__eerd_byte_m168>
     if (cap.cval > tmpint) {
    2d5e:	20 91 6e 01 	lds	r18, 0x016E
    2d62:	30 91 6f 01 	lds	r19, 0x016F
    2d66:	40 91 70 01 	lds	r20, 0x0170
    2d6a:	50 91 71 01 	lds	r21, 0x0171
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
     if (cap.cval > tmpint) {
    2d70:	a0 e0       	ldi	r26, 0x00	; 0
    2d72:	b0 e0       	ldi	r27, 0x00	; 0
    2d74:	82 17       	cp	r24, r18
    2d76:	93 07       	cpc	r25, r19
    2d78:	a4 07       	cpc	r26, r20
    2d7a:	b5 07       	cpc	r27, r21
    2d7c:	68 f4       	brcc	.+26     	; 0x2d98 <ReadCapacity+0x4c2>
         cap.cval -= tmpint;		//subtract zero offset (pF)
    2d7e:	28 1b       	sub	r18, r24
    2d80:	39 0b       	sbc	r19, r25
    2d82:	4a 0b       	sbc	r20, r26
    2d84:	5b 0b       	sbc	r21, r27
    2d86:	20 93 6e 01 	sts	0x016E, r18
    2d8a:	30 93 6f 01 	sts	0x016F, r19
    2d8e:	40 93 70 01 	sts	0x0170, r20
    2d92:	50 93 71 01 	sts	0x0171, r21
    2d96:	08 c0       	rjmp	.+16     	; 0x2da8 <ReadCapacity+0x4d2>
     } else {
         cap.cval = 0;			//unsigned long may not reach negativ value
    2d98:	10 92 6e 01 	sts	0x016E, r1
    2d9c:	10 92 6f 01 	sts	0x016F, r1
    2da0:	10 92 70 01 	sts	0x0170, r1
    2da4:	10 92 71 01 	sts	0x0171, r1
  lcd_testpin(HighPin);
  lcd_space();
  DisplayValue(cap.cval,cap.cpre,'F',4);
  wait_about3s();
#endif
  R_DDR = HiPinR_L; 		//switch R_L for High-Pin to GND
    2da8:	a4 b8       	out	0x04, r10	; 4
#if F_CPU < 2000001
   if(cap.cval < 50)
#else 
   if(cap.cval < 25)
    2daa:	80 91 6e 01 	lds	r24, 0x016E
    2dae:	90 91 6f 01 	lds	r25, 0x016F
    2db2:	a0 91 70 01 	lds	r26, 0x0170
    2db6:	b0 91 71 01 	lds	r27, 0x0171
    2dba:	89 31       	cpi	r24, 0x19	; 25
    2dbc:	91 05       	cpc	r25, r1
    2dbe:	a1 05       	cpc	r26, r1
    2dc0:	b1 05       	cpc	r27, r1
    2dc2:	08 f4       	brcc	.+2      	; 0x2dc6 <ReadCapacity+0x4f0>
    2dc4:	3f c0       	rjmp	.+126    	; 0x2e44 <ReadCapacity+0x56e>
#endif
      goto keinC;	//capacity to low, < 50pF @1MHz (25pF @8MHz)
   }
   // end low capacity 
checkDiodes:
   if((NumOfDiodes > 0)  && (PartFound != PART_FET)) {
    2dc6:	80 91 05 01 	lds	r24, 0x0105
    2dca:	88 23       	and	r24, r24
    2dcc:	21 f0       	breq	.+8      	; 0x2dd6 <ReadCapacity+0x500>
    2dce:	80 91 07 01 	lds	r24, 0x0107
    2dd2:	83 30       	cpi	r24, 0x03	; 3
    2dd4:	b9 f5       	brne	.+110    	; 0x2e44 <ReadCapacity+0x56e>
      wait_about1s();
#endif
      // nearly shure, that there is one or more diodes in reverse direction,
      // which would be wrongly detected as capacitor 
   } else {
      PartFound = PART_CAPACITOR;	//capacitor is found
    2dd6:	87 e0       	ldi	r24, 0x07	; 7
    2dd8:	80 93 07 01 	sts	0x0107, r24
      if ((cap.cpre > cap.cpre_max) || ((cap.cpre == cap.cpre_max) && (cap.cval > cap.cval_max))) {
    2ddc:	60 91 80 01 	lds	r22, 0x0180
    2de0:	80 91 81 01 	lds	r24, 0x0181
    2de4:	86 17       	cp	r24, r22
    2de6:	bc f0       	brlt	.+46     	; 0x2e16 <ReadCapacity+0x540>
    2de8:	68 17       	cp	r22, r24
    2dea:	61 f5       	brne	.+88     	; 0x2e44 <ReadCapacity+0x56e>
    2dec:	20 91 6e 01 	lds	r18, 0x016E
    2df0:	30 91 6f 01 	lds	r19, 0x016F
    2df4:	40 91 70 01 	lds	r20, 0x0170
    2df8:	50 91 71 01 	lds	r21, 0x0171
    2dfc:	80 91 72 01 	lds	r24, 0x0172
    2e00:	90 91 73 01 	lds	r25, 0x0173
    2e04:	a0 91 74 01 	lds	r26, 0x0174
    2e08:	b0 91 75 01 	lds	r27, 0x0175
    2e0c:	82 17       	cp	r24, r18
    2e0e:	93 07       	cpc	r25, r19
    2e10:	a4 07       	cpc	r26, r20
    2e12:	b5 07       	cpc	r27, r21
    2e14:	b8 f4       	brcc	.+46     	; 0x2e44 <ReadCapacity+0x56e>
         // we have found a greater one
         cap.cval_max = cap.cval;
    2e16:	ee e6       	ldi	r30, 0x6E	; 110
    2e18:	f1 e0       	ldi	r31, 0x01	; 1
    2e1a:	80 91 6e 01 	lds	r24, 0x016E
    2e1e:	90 91 6f 01 	lds	r25, 0x016F
    2e22:	a0 91 70 01 	lds	r26, 0x0170
    2e26:	b0 91 71 01 	lds	r27, 0x0171
    2e2a:	80 93 72 01 	sts	0x0172, r24
    2e2e:	90 93 73 01 	sts	0x0173, r25
    2e32:	a0 93 74 01 	sts	0x0174, r26
    2e36:	b0 93 75 01 	sts	0x0175, r27
         cap.cpre_max = cap.cpre;
    2e3a:	63 8b       	std	Z+19, r22	; 0x13
#if FLASHEND > 0x1fff
         cap.v_loss = vloss;		// lost voltage in 0.01%
    2e3c:	97 86       	std	Z+15, r9	; 0x0f
    2e3e:	86 86       	std	Z+14, r8	; 0x0e
#endif
         cap.ca = LowPin;		// save LowPin
    2e40:	70 8a       	std	Z+16, r7	; 0x10
         cap.cb = HighPin;		// save HighPin
    2e42:	11 8b       	std	Z+17, r17	; 0x11
keinC:
  // discharge capacitor again
//  EntladePins();		// discharge capacitors
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    2e44:	88 e0       	ldi	r24, 0x08	; 8
    2e46:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    2e48:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    2e4a:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    2e4c:	15 b8       	out	0x05, r1	; 5
  return;
 } // end ReadCapacity()
    2e4e:	df 91       	pop	r29
    2e50:	cf 91       	pop	r28
    2e52:	1f 91       	pop	r17
    2e54:	0f 91       	pop	r16
    2e56:	ff 90       	pop	r15
    2e58:	ef 90       	pop	r14
    2e5a:	df 90       	pop	r13
    2e5c:	cf 90       	pop	r12
    2e5e:	bf 90       	pop	r11
    2e60:	af 90       	pop	r10
    2e62:	9f 90       	pop	r9
    2e64:	8f 90       	pop	r8
    2e66:	7f 90       	pop	r7
    2e68:	08 95       	ret

00002e6a <__vector_13>:
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
}
#ifndef INHIBIT_SLEEP_MODE
/* Interrupt Service Routine for timer1 Overflow */
 ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    2e6a:	1f 92       	push	r1
    2e6c:	0f 92       	push	r0
    2e6e:	0f b6       	in	r0, 0x3f	; 63
    2e70:	0f 92       	push	r0
    2e72:	11 24       	eor	r1, r1
    2e74:	8f 93       	push	r24
    2e76:	9f 93       	push	r25
 if ((!(TI1_INT_FLAGS & (1<<ICF1)) && (unfinished !=0)) || ((TI1_INT_FLAGS & (1<<ICF1)) && (ICR1 < 250))) {
    2e78:	b5 99       	sbic	0x16, 5	; 22
    2e7a:	04 c0       	rjmp	.+8      	; 0x2e84 <__vector_13+0x1a>
    2e7c:	80 91 6d 01 	lds	r24, 0x016D
    2e80:	88 23       	and	r24, r24
    2e82:	49 f4       	brne	.+18     	; 0x2e96 <__vector_13+0x2c>
    2e84:	b5 9b       	sbis	0x16, 5	; 22
    2e86:	10 c0       	rjmp	.+32     	; 0x2ea8 <__vector_13+0x3e>
    2e88:	80 91 86 00 	lds	r24, 0x0086
    2e8c:	90 91 87 00 	lds	r25, 0x0087
    2e90:	8a 3f       	cpi	r24, 0xFA	; 250
    2e92:	91 05       	cpc	r25, r1
    2e94:	48 f4       	brcc	.+18     	; 0x2ea8 <__vector_13+0x3e>
    // Capture Event not pending or (Capture Event pending and ICR1 < 250
    // the ICR1H is buffered and can not examined alone, we must read the ICR1L first (with ICR1 access) !
   ovcnt16++;				// count Overflow
    2e96:	80 91 5c 01 	lds	r24, 0x015C
    2e9a:	90 91 5d 01 	lds	r25, 0x015D
    2e9e:	01 96       	adiw	r24, 0x01	; 1
    2ea0:	90 93 5d 01 	sts	0x015D, r25
    2ea4:	80 93 5c 01 	sts	0x015C, r24
 }
}
    2ea8:	9f 91       	pop	r25
    2eaa:	8f 91       	pop	r24
    2eac:	0f 90       	pop	r0
    2eae:	0f be       	out	0x3f, r0	; 63
    2eb0:	0f 90       	pop	r0
    2eb2:	1f 90       	pop	r1
    2eb4:	18 95       	reti

00002eb6 <__vector_10>:
/* Interrupt Service Routine for timer1 capture event (Comparator) */
 ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    2eb6:	1f 92       	push	r1
    2eb8:	0f 92       	push	r0
    2eba:	0f b6       	in	r0, 0x3f	; 63
    2ebc:	0f 92       	push	r0
    2ebe:	11 24       	eor	r1, r1
    2ec0:	8f 93       	push	r24
    2ec2:	9f 93       	push	r25
 unfinished = 0;			// clear unfinished flag
    2ec4:	10 92 6d 01 	sts	0x016D, r1
 // With unfinished set to 0, we prevent further counting the Overflow.s
 // Is already a Overflow detected?
 if((TI1_INT_FLAGS & (1<<TOV1))) {	// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    2ec8:	b0 9b       	sbis	0x16, 0	; 22
    2eca:	10 c0       	rjmp	.+32     	; 0x2eec <__vector_10+0x36>
   //there is already a Overflow detected, before or after the capture event?
   // ICR1H is buffered and can not examined alone, we must read the ICR1L first (with ICR1 access) !
   if (ICR1 < 250) {
    2ecc:	80 91 86 00 	lds	r24, 0x0086
    2ed0:	90 91 87 00 	lds	r25, 0x0087
    2ed4:	8a 3f       	cpi	r24, 0xFA	; 250
    2ed6:	91 05       	cpc	r25, r1
    2ed8:	48 f4       	brcc	.+18     	; 0x2eec <__vector_10+0x36>
     //  Yes, Input Capture Counter is low, Overflow has occured before the capture event
     ovcnt16++;				// count Overflow
    2eda:	80 91 5c 01 	lds	r24, 0x015C
    2ede:	90 91 5d 01 	lds	r25, 0x015D
    2ee2:	01 96       	adiw	r24, 0x01	; 1
    2ee4:	90 93 5d 01 	sts	0x015D, r25
    2ee8:	80 93 5c 01 	sts	0x015C, r24
   }
 }
}
    2eec:	9f 91       	pop	r25
    2eee:	8f 91       	pop	r24
    2ef0:	0f 90       	pop	r0
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	0f 90       	pop	r0
    2ef6:	1f 90       	pop	r1
    2ef8:	18 95       	reti

00002efa <get_log>:
 } // end ReadInductance()


#if FLASHEND > 0x1fff
// get_log interpolate a table with the function -log(1 - (permil/1000))
uint16_t get_log(uint16_t permil) {
    2efa:	cf 93       	push	r28
    2efc:	df 93       	push	r29
  uint16_t y1, y2;			// table values
  uint16_t result;			// result of interpolation
  uint8_t tabind;			// index to table value
  uint8_t tabres;			// distance to lower table value, fraction of Log_Tab_Distance

  tabind = permil / Log_Tab_Distance;	// index to table
    2efe:	24 e1       	ldi	r18, 0x14	; 20
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	b9 01       	movw	r22, r18
    2f04:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <__udivmodhi4>
    2f08:	dc 01       	movw	r26, r24
  tabres = permil % Log_Tab_Distance;	// fraction of table distance
  // interpolate the table of factors
  y1 = pgm_read_word(&LogTab[tabind]);	// get the lower table value
    2f0a:	70 e0       	ldi	r23, 0x00	; 0
    2f0c:	fb 01       	movw	r30, r22
    2f0e:	ee 0f       	add	r30, r30
    2f10:	ff 1f       	adc	r31, r31
    2f12:	e8 59       	subi	r30, 0x98	; 152
    2f14:	ff 4f       	sbci	r31, 0xFF	; 255
    2f16:	c5 91       	lpm	r28, Z+
    2f18:	d4 91       	lpm	r29, Z+
  y2 = pgm_read_word(&LogTab[tabind+1]); // get the higher table value
    2f1a:	fb 01       	movw	r30, r22
    2f1c:	ee 0f       	add	r30, r30
    2f1e:	ff 1f       	adc	r31, r31
    2f20:	e6 59       	subi	r30, 0x96	; 150
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	45 91       	lpm	r20, Z+
    2f26:	54 91       	lpm	r21, Z+
  result = ((y2 - y1) * tabres ) / Log_Tab_Distance + y1; // interpolate
    2f28:	4c 1b       	sub	r20, r28
    2f2a:	5d 0b       	sbc	r21, r29
    2f2c:	4a 9f       	mul	r20, r26
    2f2e:	c0 01       	movw	r24, r0
    2f30:	4b 9f       	mul	r20, r27
    2f32:	90 0d       	add	r25, r0
    2f34:	5a 9f       	mul	r21, r26
    2f36:	90 0d       	add	r25, r0
    2f38:	11 24       	eor	r1, r1
    2f3a:	b9 01       	movw	r22, r18
    2f3c:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <__udivmodhi4>
    2f40:	6c 0f       	add	r22, r28
    2f42:	7d 1f       	adc	r23, r29
  return(result);
 }
    2f44:	cb 01       	movw	r24, r22
    2f46:	df 91       	pop	r29
    2f48:	cf 91       	pop	r28
    2f4a:	08 95       	ret

00002f4c <ReadInductance>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadInductance(void) {
    2f4c:	2f 92       	push	r2
    2f4e:	3f 92       	push	r3
    2f50:	4f 92       	push	r4
    2f52:	5f 92       	push	r5
    2f54:	6f 92       	push	r6
    2f56:	7f 92       	push	r7
    2f58:	8f 92       	push	r8
    2f5a:	9f 92       	push	r9
    2f5c:	af 92       	push	r10
    2f5e:	bf 92       	push	r11
    2f60:	cf 92       	push	r12
    2f62:	df 92       	push	r13
    2f64:	ef 92       	push	r14
    2f66:	ff 92       	push	r15
    2f68:	0f 93       	push	r16
    2f6a:	1f 93       	push	r17
    2f6c:	df 93       	push	r29
    2f6e:	cf 93       	push	r28
    2f70:	cd b7       	in	r28, 0x3d	; 61
    2f72:	de b7       	in	r29, 0x3e	; 62
    2f74:	68 97       	sbiw	r28, 0x18	; 24
    2f76:	0f b6       	in	r0, 0x3f	; 63
    2f78:	f8 94       	cli
    2f7a:	de bf       	out	0x3e, r29	; 62
    2f7c:	0f be       	out	0x3f, r0	; 63
    2f7e:	cd bf       	out	0x3d, r28	; 61
  int8_t ukorr;		// correction of comparator voltage
  uint8_t nr_pol1;	// number of successfull inductance measurement with polarity 1
  uint8_t nr_pol2;	// number of successfull inductance measurement with polarity 2


  if(PartFound != PART_RESISTOR) {
    2f80:	80 91 07 01 	lds	r24, 0x0107
    2f84:	86 30       	cpi	r24, 0x06	; 6
    2f86:	09 f0       	breq	.+2      	; 0x2f8a <ReadInductance+0x3e>
    2f88:	4b c2       	rjmp	.+1174   	; 0x3420 <ReadInductance+0x4d4>
     return;	//We have found no resistor  
  }
  if (ResistorsFound != 1) {
    2f8a:	80 91 6c 01 	lds	r24, 0x016C
    2f8e:	81 30       	cpi	r24, 0x01	; 1
    2f90:	09 f0       	breq	.+2      	; 0x2f94 <ReadInductance+0x48>
    2f92:	46 c2       	rjmp	.+1164   	; 0x3420 <ReadInductance+0x4d4>
     return;	// do not search for inductance, more than 1 resistor
  }
//  for (found=0;found<ResistorsFound;found++) {
//     if (resis[found].rx > 21000) continue;
     if (resis[found].rx > 21000) return;
    2f94:	80 91 18 01 	lds	r24, 0x0118
    2f98:	90 91 19 01 	lds	r25, 0x0119
    2f9c:	a0 91 1a 01 	lds	r26, 0x011A
    2fa0:	b0 91 1b 01 	lds	r27, 0x011B
    2fa4:	89 30       	cpi	r24, 0x09	; 9
    2fa6:	22 e5       	ldi	r18, 0x52	; 82
    2fa8:	92 07       	cpc	r25, r18
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	a2 07       	cpc	r26, r18
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	b2 07       	cpc	r27, r18
    2fb2:	08 f0       	brcs	.+2      	; 0x2fb6 <ReadInductance+0x6a>
    2fb4:	35 c2       	rjmp	.+1130   	; 0x3420 <ReadInductance+0x4d4>
    2fb6:	99 24       	eor	r9, r9
    2fb8:	80 91 21 01 	lds	r24, 0x0121
    2fbc:	40 90 22 01 	lds	r4, 0x0122

     // we can check for Inductance, if resistance is below 2100 Ohm
     for (count=0;count<4;count++) {
        // Try four times (different direction and with delayed counter start)
        if (count < 2) {
    2fc0:	99 2d       	mov	r25, r9
    2fc2:	92 30       	cpi	r25, 0x02	; 2
    2fc4:	10 f4       	brcc	.+4      	; 0x2fca <ReadInductance+0x7e>
           // first and second pass, direction 1
           LowPin = resis[found].ra;
    2fc6:	88 2e       	mov	r8, r24
    2fc8:	02 c0       	rjmp	.+4      	; 0x2fce <ReadInductance+0x82>
           HighPin = resis[found].rb;
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    2fca:	84 2c       	mov	r8, r4
           HighPin = resis[found].ra;
    2fcc:	48 2e       	mov	r4, r24
        }
        HiADC = pgm_read_byte(&PinADCtab[HighPin]);
    2fce:	e4 2d       	mov	r30, r4
    2fd0:	f0 e0       	ldi	r31, 0x00	; 0
    2fd2:	ed 5f       	subi	r30, 0xFD	; 253
    2fd4:	fe 4f       	sbci	r31, 0xFE	; 254
    2fd6:	24 91       	lpm	r18, Z+
        LoPinR_L = pgm_read_byte(&PinRLtab[LowPin]);	//R_L mask for HighPin R_L load
    2fd8:	e8 2d       	mov	r30, r8
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	e0 50       	subi	r30, 0x00	; 0
    2fde:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe0:	e4 91       	lpm	r30, Z+
        //==================================================================================
        // Measurement of Inductance values
        R_PORT = 0;		// switch R port to GND
    2fe2:	15 b8       	out	0x05, r1	; 5
        ADC_PORT =   TXD_VAL;		// switch ADC-Port to GND
    2fe4:	a8 e0       	ldi	r26, 0x08	; 8
    2fe6:	a8 b9       	out	0x08, r26	; 8
        if ((resis[found].rx < 240) && ((count & 0x01) == 0)) {
    2fe8:	80 91 18 01 	lds	r24, 0x0118
    2fec:	90 91 19 01 	lds	r25, 0x0119
    2ff0:	a0 91 1a 01 	lds	r26, 0x011A
    2ff4:	b0 91 1b 01 	lds	r27, 0x011B
    2ff8:	80 3f       	cpi	r24, 0xF0	; 240
    2ffa:	91 05       	cpc	r25, r1
    2ffc:	a1 05       	cpc	r26, r1
    2ffe:	b1 05       	cpc	r27, r1
    3000:	b8 f4       	brcc	.+46     	; 0x3030 <ReadInductance+0xe4>
    3002:	90 fc       	sbrc	r9, 0
    3004:	15 c0       	rjmp	.+42     	; 0x3030 <ReadInductance+0xe4>
           // we can use PinR_L for measurement
           mess_r = RR680MI - R_L_VAL;			// use only pin output resistance
    3006:	a0 90 03 01 	lds	r10, 0x0103
    300a:	b0 90 04 01 	lds	r11, 0x0104
    300e:	80 e7       	ldi	r24, 0x70	; 112
    3010:	95 ee       	ldi	r25, 0xE5	; 229
    3012:	a8 0e       	add	r10, r24
    3014:	b9 1e       	adc	r11, r25
           ADC_DDR = HiADC | (1<<LowPin) | TXD_MSK;	// switch HiADC and Low Pin to GND, 
    3016:	32 2f       	mov	r19, r18
    3018:	38 60       	ori	r19, 0x08	; 8
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	08 2c       	mov	r0, r8
    3020:	02 c0       	rjmp	.+4      	; 0x3026 <ReadInductance+0xda>
    3022:	88 0f       	add	r24, r24
    3024:	99 1f       	adc	r25, r25
    3026:	0a 94       	dec	r0
    3028:	e2 f7       	brpl	.-8      	; 0x3022 <ReadInductance+0xd6>
    302a:	38 2b       	or	r19, r24
    302c:	37 b9       	out	0x07, r19	; 7
    302e:	08 c0       	rjmp	.+16     	; 0x3040 <ReadInductance+0xf4>
        } else {
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
    3030:	e4 b9       	out	0x04, r30	; 4
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
    3032:	82 2f       	mov	r24, r18
    3034:	88 60       	ori	r24, 0x08	; 8
    3036:	87 b9       	out	0x07, r24	; 7
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
    3038:	a0 90 03 01 	lds	r10, 0x0103
    303c:	b0 90 04 01 	lds	r11, 0x0104
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    3040:	30 e0       	ldi	r19, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    3042:	88 2d       	mov	r24, r8
    3044:	28 8f       	std	Y+24, r18	; 0x18
    3046:	3f 8b       	std	Y+23, r19	; 0x17
    3048:	0e 94 2f 1a 	call	0x345e	; 0x345e <W10msReadADC>
    304c:	6c 01       	movw	r12, r24
            total_r =  ReadADC(HighPin);
    304e:	84 2d       	mov	r24, r4
    3050:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
    3054:	ac 01       	movw	r20, r24
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    3056:	28 8d       	ldd	r18, Y+24	; 0x18
    3058:	3f 89       	ldd	r19, Y+23	; 0x17
    305a:	92 e0       	ldi	r25, 0x02	; 2
    305c:	c9 16       	cp	r12, r25
    305e:	d1 04       	cpc	r13, r1
    3060:	18 f4       	brcc	.+6      	; 0x3068 <ReadInductance+0x11c>
    3062:	42 30       	cpi	r20, 0x02	; 2
    3064:	51 05       	cpc	r21, r1
    3066:	18 f0       	brcs	.+6      	; 0x306e <ReadInductance+0x122>
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    3068:	3f 5f       	subi	r19, 0xFF	; 255
    306a:	34 31       	cpi	r19, 0x14	; 20
    306c:	51 f7       	brne	.-44     	; 0x3042 <ReadInductance+0xf6>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
        // setup Analog Comparator
        ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    306e:	a0 e4       	ldi	r26, 0x40	; 64
    3070:	a0 93 7b 00 	sts	0x007B, r26
        ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    3074:	b4 e5       	ldi	r27, 0x54	; 84
    3076:	b0 bf       	out	0x30, r27	; 48
        ADMUX = (1<<REFS0) | LowPin;			// switch Mux to Low-Pin
    3078:	88 2d       	mov	r24, r8
    307a:	80 64       	ori	r24, 0x40	; 64
    307c:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    3080:	86 e1       	ldi	r24, 0x16	; 22
    3082:	80 93 7a 00 	sts	0x007A, r24
   
      // setup Counter1
        timeconstant.w[1] = 0;		// set ov counter to 0
    3086:	00 e0       	ldi	r16, 0x00	; 0
    3088:	10 e0       	ldi	r17, 0x00	; 0
        TCCR1A = 0;			// set Counter1 to normal Mode
    308a:	10 92 80 00 	sts	0x0080, r1
        TCNT1 = 0;			//set Counter to 0
    308e:	10 92 85 00 	sts	0x0085, r1
    3092:	10 92 84 00 	sts	0x0084, r1
        TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// reset TIFR or TIFR1
    3096:	97 e2       	ldi	r25, 0x27	; 39
    3098:	96 bb       	out	0x16, r25	; 22
        HiADC |= TXD_VAL;
    309a:	28 60       	ori	r18, 0x08	; 8
        wait200us();			// wait for bandgap to start up
    309c:	28 8f       	std	Y+24, r18	; 0x18
    309e:	0e 94 c3 13 	call	0x2786	; 0x2786 <wait200us>
        if ((count & 0x01) == 0 ) {
    30a2:	29 2c       	mov	r2, r9
    30a4:	33 24       	eor	r3, r3
    30a6:	d1 01       	movw	r26, r2
    30a8:	a1 70       	andi	r26, 0x01	; 1
    30aa:	b0 70       	andi	r27, 0x00	; 0
    30ac:	ba 8b       	std	Y+18, r27	; 0x12
    30ae:	a9 8b       	std	Y+17, r26	; 0x11
    30b0:	28 8d       	ldd	r18, Y+24	; 0x18
    30b2:	90 fc       	sbrc	r9, 0
    30b4:	05 c0       	rjmp	.+10     	; 0x30c0 <ReadInductance+0x174>
           //first start counter, then start current
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    30b6:	b1 e8       	ldi	r27, 0x81	; 129
    30b8:	b0 93 81 00 	sts	0x0081, r27
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    30bc:	28 b9       	out	0x08, r18	; 8
    30be:	08 c0       	rjmp	.+16     	; 0x30d0 <ReadInductance+0x184>
        } else {
           //first start current, then start counter with delay
           //parasitic capacity of coil can cause high current at the beginning
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    30c0:	28 b9       	out	0x08, r18	; 8
      #if F_CPU >= 8000000UL
           wait3us();		// ignore current peak from capacity
    30c2:	0e 94 cc 13 	call	0x2798	; 0x2798 <wait3us>
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
    30c6:	20 e2       	ldi	r18, 0x20	; 32
    30c8:	26 bb       	out	0x16, r18	; 22
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    30ca:	81 e8       	ldi	r24, 0x81	; 129
    30cc:	80 93 81 00 	sts	0x0081, r24
    30d0:	c8 01       	movw	r24, r16
        }
      
      //******************************
        while(1) {
           // Wait, until  Input Capture is set
           ii = TI1_INT_FLAGS;		//read Timer flags
    30d2:	46 b3       	in	r20, 0x16	; 22
           if (ii & (1<<ICF1))  {
    30d4:	45 ff       	sbrs	r20, 5
    30d6:	02 c0       	rjmp	.+4      	; 0x30dc <ReadInductance+0x190>
    30d8:	8c 01       	movw	r16, r24
    30da:	0b c0       	rjmp	.+22     	; 0x30f2 <ReadInductance+0x1a6>
              break;
           }
           if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    30dc:	40 ff       	sbrs	r20, 0
    30de:	f9 cf       	rjmp	.-14     	; 0x30d2 <ReadInductance+0x186>
              TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    30e0:	a1 e0       	ldi	r26, 0x01	; 1
    30e2:	a6 bb       	out	0x16, r26	; 22
              wdt_reset();
    30e4:	a8 95       	wdr
    30e6:	01 96       	adiw	r24, 0x01	; 1
              timeconstant.w[1]++;		// count one OV
              if(timeconstant.w[1] == (F_CPU/100000UL)) {
    30e8:	80 35       	cpi	r24, 0x50	; 80
    30ea:	91 05       	cpc	r25, r1
    30ec:	91 f7       	brne	.-28     	; 0x30d2 <ReadInductance+0x186>
    30ee:	00 e5       	ldi	r16, 0x50	; 80
    30f0:	10 e0       	ldi	r17, 0x00	; 0
                 break; 	//Timeout for Charging, above 0.13 s
              }
           }
        }
        TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    30f2:	10 92 81 00 	sts	0x0081, r1
        TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    30f6:	b0 e2       	ldi	r27, 0x20	; 32
    30f8:	b6 bb       	out	0x16, r27	; 22
        timeconstant.w[0] = ICR1;		// get previous Input Capture Counter flag
    30fa:	20 91 86 00 	lds	r18, 0x0086
    30fe:	30 91 87 00 	lds	r19, 0x0087
    3102:	79 01       	movw	r14, r18
      // check actual counter, if an additional overflow must be added
        if((TCNT1 > timeconstant.w[0]) && (ii & (1<<TOV1))) {
    3104:	80 91 84 00 	lds	r24, 0x0084
    3108:	90 91 85 00 	lds	r25, 0x0085
    310c:	28 17       	cp	r18, r24
    310e:	39 07       	cpc	r19, r25
    3110:	30 f4       	brcc	.+12     	; 0x311e <ReadInductance+0x1d2>
    3112:	40 ff       	sbrs	r20, 0
    3114:	04 c0       	rjmp	.+8      	; 0x311e <ReadInductance+0x1d2>
           // this OV was not counted, but was before the Input Capture
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    3116:	21 e0       	ldi	r18, 0x01	; 1
    3118:	26 bb       	out	0x16, r18	; 22
           timeconstant.w[1]++;			// count one additional OV
    311a:	0f 5f       	subi	r16, 0xFF	; 255
    311c:	1f 4f       	sbci	r17, 0xFF	; 255
        }

        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    311e:	88 e0       	ldi	r24, 0x08	; 8
    3120:	88 b9       	out	0x08, r24	; 8
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    3122:	96 e9       	ldi	r25, 0x96	; 150
    3124:	90 93 7a 00 	sts	0x007A, r25
        for (ii=0;ii<20;ii++) {
    3128:	20 e0       	ldi	r18, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    312a:	88 2d       	mov	r24, r8
    312c:	28 8f       	std	Y+24, r18	; 0x18
    312e:	0e 94 2f 1a 	call	0x345e	; 0x345e <W10msReadADC>
    3132:	6c 01       	movw	r12, r24
            total_r =  ReadADC(HighPin);
    3134:	84 2d       	mov	r24, r4
    3136:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    313a:	28 8d       	ldd	r18, Y+24	; 0x18
    313c:	a2 e0       	ldi	r26, 0x02	; 2
    313e:	ca 16       	cp	r12, r26
    3140:	d1 04       	cpc	r13, r1
    3142:	18 f4       	brcc	.+6      	; 0x314a <ReadInductance+0x1fe>
    3144:	82 30       	cpi	r24, 0x02	; 2
    3146:	91 05       	cpc	r25, r1
    3148:	18 f0       	brcs	.+6      	; 0x3150 <ReadInductance+0x204>
           timeconstant.w[1]++;			// count one additional OV
        }

        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
        for (ii=0;ii<20;ii++) {
    314a:	2f 5f       	subi	r18, 0xFF	; 255
    314c:	24 31       	cpi	r18, 0x14	; 20
    314e:	69 f7       	brne	.-38     	; 0x312a <ReadInductance+0x1de>
//  #undef CNT_ZERO_42
//  #undef CNT_ZERO_720
//  #define CNT_ZERO_42 7
//  #define CNT_ZERO_720 10
//#endif
        total_r = (mess_r + resis[found].rx + RRpinMI);
    3150:	c0 90 18 01 	lds	r12, 0x0118
    3154:	d0 90 19 01 	lds	r13, 0x0119
    3158:	80 91 47 01 	lds	r24, 0x0147
    315c:	90 91 48 01 	lds	r25, 0x0148
    3160:	c8 0e       	add	r12, r24
    3162:	d9 1e       	adc	r13, r25
    3164:	ca 0c       	add	r12, r10
    3166:	db 1c       	adc	r13, r11
//        if (total_r > 7000) cnt_diff = 1;
//        if (total_r > 14000) cnt_diff = 2;
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
        // Voltage of comparator in % of umax
     #ifdef AUTO_CAL
        tmpint = (ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset))) ;
    3168:	8a e9       	ldi	r24, 0x9A	; 154
    316a:	91 e0       	ldi	r25, 0x01	; 1
    316c:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <__eerd_word_m168>
    3170:	20 91 44 01 	lds	r18, 0x0144
    3174:	30 91 45 01 	lds	r19, 0x0145
    3178:	28 0f       	add	r18, r24
    317a:	39 1f       	adc	r19, r25
     #else
        tmpint = (ref_mv + REF_C_KORR);
     #endif
        if (mess_r < R_L_VAL) {
    317c:	b0 e9       	ldi	r27, 0x90	; 144
    317e:	ab 16       	cp	r10, r27
    3180:	ba e1       	ldi	r27, 0x1A	; 26
    3182:	bb 06       	cpc	r11, r27
    3184:	b8 f4       	brcc	.+46     	; 0x31b4 <ReadInductance+0x268>
           // measurement without 680 Ohm
           cnt_diff = CNT_ZERO_42;
           if (timeconstant.dw < 225) {
    3186:	81 ee       	ldi	r24, 0xE1	; 225
    3188:	e8 16       	cp	r14, r24
    318a:	f1 04       	cpc	r15, r1
    318c:	01 05       	cpc	r16, r1
    318e:	11 05       	cpc	r17, r1
    3190:	38 f4       	brcc	.+14     	; 0x31a0 <ReadInductance+0x254>
              ukorr = (timeconstant.w[0] / 5) - 20;
    3192:	c7 01       	movw	r24, r14
    3194:	65 e0       	ldi	r22, 0x05	; 5
    3196:	70 e0       	ldi	r23, 0x00	; 0
    3198:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <__udivmodhi4>
    319c:	64 51       	subi	r22, 0x14	; 20
    319e:	01 c0       	rjmp	.+2      	; 0x31a2 <ReadInductance+0x256>
           } else {
              ukorr = 25;
    31a0:	69 e1       	ldi	r22, 0x19	; 25
           }
           tmpint -= (((REF_L_KORR * 10) / 10) + ukorr);
    31a2:	28 52       	subi	r18, 0x28	; 40
    31a4:	30 40       	sbci	r19, 0x00	; 0
    31a6:	77 27       	eor	r23, r23
    31a8:	67 fd       	sbrc	r22, 7
    31aa:	70 95       	com	r23
    31ac:	26 1b       	sub	r18, r22
    31ae:	37 0b       	sbc	r19, r23
     #else
        tmpint = (ref_mv + REF_C_KORR);
     #endif
        if (mess_r < R_L_VAL) {
           // measurement without 680 Ohm
           cnt_diff = CNT_ZERO_42;
    31b0:	66 e0       	ldi	r22, 0x06	; 6
    31b2:	08 c0       	rjmp	.+16     	; 0x31c4 <ReadInductance+0x278>
//#endif
        total_r = (mess_r + resis[found].rx + RRpinMI);
//        cnt_diff = 0;
//        if (total_r > 7000) cnt_diff = 1;
//        if (total_r > 14000) cnt_diff = 2;
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
    31b4:	c6 01       	movw	r24, r12
    31b6:	60 eb       	ldi	r22, 0xB0	; 176
    31b8:	76 e3       	ldi	r23, 0x36	; 54
    31ba:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <__udivmodhi4>
           }
           tmpint -= (((REF_L_KORR * 10) / 10) + ukorr);
        } else {
           // measurement with 680 Ohm resistor
           // if 680 Ohm resistor is used, use REF_L_KORR for correction
           cnt_diff += CNT_ZERO_720;
    31be:	69 5f       	subi	r22, 0xF9	; 249
           tmpint += REF_L_KORR;
    31c0:	28 5d       	subi	r18, 0xD8	; 216
    31c2:	3f 4f       	sbci	r19, 0xFF	; 255
        }
        if (timeconstant.dw > cnt_diff) timeconstant.dw -= cnt_diff;
    31c4:	70 e0       	ldi	r23, 0x00	; 0
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	6e 15       	cp	r22, r14
    31cc:	7f 05       	cpc	r23, r15
    31ce:	80 07       	cpc	r24, r16
    31d0:	91 07       	cpc	r25, r17
    31d2:	28 f4       	brcc	.+10     	; 0x31de <ReadInductance+0x292>
    31d4:	e6 1a       	sub	r14, r22
    31d6:	f7 0a       	sbc	r15, r23
    31d8:	08 0b       	sbc	r16, r24
    31da:	19 0b       	sbc	r17, r25
    31dc:	03 c0       	rjmp	.+6      	; 0x31e4 <ReadInductance+0x298>
        else          timeconstant.dw = 0;
    31de:	ee 24       	eor	r14, r14
    31e0:	ff 24       	eor	r15, r15
    31e2:	87 01       	movw	r16, r14
       
        if ((count&0x01) == 1) {
    31e4:	a9 89       	ldd	r26, Y+17	; 0x11
    31e6:	ba 89       	ldd	r27, Y+18	; 0x12
    31e8:	10 97       	sbiw	r26, 0x00	; 0
    31ea:	41 f0       	breq	.+16     	; 0x31fc <ReadInductance+0x2b0>
           // second pass with delayed counter start
           timeconstant.dw += (3 * (F_CPU/1000000UL))+10;
    31ec:	82 e2       	ldi	r24, 0x22	; 34
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	a0 e0       	ldi	r26, 0x00	; 0
    31f2:	b0 e0       	ldi	r27, 0x00	; 0
    31f4:	e8 0e       	add	r14, r24
    31f6:	f9 1e       	adc	r15, r25
    31f8:	0a 1f       	adc	r16, r26
    31fa:	1b 1f       	adc	r17, r27
        }
        if (timeconstant.w[1] >= (F_CPU/100000UL)) timeconstant.dw = 0; // no transition found
    31fc:	00 35       	cpi	r16, 0x50	; 80
    31fe:	11 05       	cpc	r17, r1
    3200:	18 f0       	brcs	.+6      	; 0x3208 <ReadInductance+0x2bc>
    3202:	ee 24       	eor	r14, r14
    3204:	ff 24       	eor	r15, r15
    3206:	87 01       	movw	r16, r14
        if (timeconstant.dw > 10) {
    3208:	9b e0       	ldi	r25, 0x0B	; 11
    320a:	e9 16       	cp	r14, r25
    320c:	f1 04       	cpc	r15, r1
    320e:	01 05       	cpc	r16, r1
    3210:	11 05       	cpc	r17, r1
    3212:	28 f0       	brcs	.+10     	; 0x321e <ReadInductance+0x2d2>
           timeconstant.dw -= 1;
    3214:	08 94       	sec
    3216:	e1 08       	sbc	r14, r1
    3218:	f1 08       	sbc	r15, r1
    321a:	01 09       	sbc	r16, r1
    321c:	11 09       	sbc	r17, r1
        }
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    321e:	c6 01       	movw	r24, r12
    3220:	a0 e0       	ldi	r26, 0x00	; 0
    3222:	b0 e0       	ldi	r27, 0x00	; 0
    3224:	8b 8b       	std	Y+19, r24	; 0x13
    3226:	9c 8b       	std	Y+20, r25	; 0x14
    3228:	ad 8b       	std	Y+21, r26	; 0x15
    322a:	be 8b       	std	Y+22, r27	; 0x16
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    322c:	b9 01       	movw	r22, r18
    322e:	80 e0       	ldi	r24, 0x00	; 0
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	28 ee       	ldi	r18, 0xE8	; 232
    3234:	33 e0       	ldi	r19, 0x03	; 3
    3236:	40 e0       	ldi	r20, 0x00	; 0
    3238:	50 e0       	ldi	r21, 0x00	; 0
    323a:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
    323e:	2b 01       	movw	r4, r22
    3240:	3c 01       	movw	r6, r24
        if (timeconstant.w[1] >= (F_CPU/100000UL)) timeconstant.dw = 0; // no transition found
        if (timeconstant.dw > 10) {
           timeconstant.dw -= 1;
        }
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    3242:	b5 01       	movw	r22, r10
    3244:	80 e0       	ldi	r24, 0x00	; 0
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	20 91 40 01 	lds	r18, 0x0140
    324c:	30 91 41 01 	lds	r19, 0x0141
    3250:	40 e0       	ldi	r20, 0x00	; 0
    3252:	50 e0       	ldi	r21, 0x00	; 0
    3254:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
    3258:	2b 89       	ldd	r18, Y+19	; 0x13
    325a:	3c 89       	ldd	r19, Y+20	; 0x14
    325c:	4d 89       	ldd	r20, Y+21	; 0x15
    325e:	5e 89       	ldd	r21, Y+22	; 0x16
    3260:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    3264:	40 e0       	ldi	r20, 0x00	; 0
    3266:	50 e0       	ldi	r21, 0x00	; 0
    3268:	c3 01       	movw	r24, r6
    326a:	b2 01       	movw	r22, r4
    326c:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
//        per_ref2 = (uint8_t)MEM2_read_byte(&LogTab[per_ref1]);	// -log(1 - per_ref1/100)
        per_ref2 = get_log(per_ref1);		// -log(1 - per_ref1/1000)
    3270:	c9 01       	movw	r24, r18
    3272:	0e 94 7d 17 	call	0x2efa	; 0x2efa <get_log>
    3276:	6c 01       	movw	r12, r24
          }
#endif
/* ********************************************************* */
        // lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    3278:	6b 89       	ldd	r22, Y+19	; 0x13
    327a:	7c 89       	ldd	r23, Y+20	; 0x14
    327c:	8d 89       	ldd	r24, Y+21	; 0x15
    327e:	9e 89       	ldd	r25, Y+22	; 0x16
    3280:	a8 01       	movw	r20, r16
    3282:	97 01       	movw	r18, r14
    3284:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
    3288:	2b 01       	movw	r4, r22
    328a:	3c 01       	movw	r6, r24
             wait_about2s();
          }
#endif
/* ********************************************************* */
        // lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
    328c:	b6 01       	movw	r22, r12
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	e3 e0       	ldi	r30, 0x03	; 3
    3294:	66 0f       	add	r22, r22
    3296:	77 1f       	adc	r23, r23
    3298:	88 1f       	adc	r24, r24
    329a:	99 1f       	adc	r25, r25
    329c:	ea 95       	dec	r30
    329e:	d1 f7       	brne	.-12     	; 0x3294 <ReadInductance+0x348>
    32a0:	6b 5f       	subi	r22, 0xFB	; 251
    32a2:	7f 4f       	sbci	r23, 0xFF	; 255
    32a4:	8f 4f       	sbci	r24, 0xFF	; 255
    32a6:	9f 4f       	sbci	r25, 0xFF	; 255
    32a8:	2a e0       	ldi	r18, 0x0A	; 10
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	40 e0       	ldi	r20, 0x00	; 0
    32ae:	50 e0       	ldi	r21, 0x00	; 0
    32b0:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    32b4:	40 e0       	ldi	r20, 0x00	; 0
    32b6:	50 e0       	ldi	r21, 0x00	; 0
    32b8:	c3 01       	movw	r24, r6
    32ba:	b2 01       	movw	r22, r4
    32bc:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
    32c0:	f1 01       	movw	r30, r2
    32c2:	ee 0f       	add	r30, r30
    32c4:	ff 1f       	adc	r31, r31
    32c6:	ee 0f       	add	r30, r30
    32c8:	ff 1f       	adc	r31, r31
    32ca:	a1 e0       	ldi	r26, 0x01	; 1
    32cc:	b0 e0       	ldi	r27, 0x00	; 0
    32ce:	ac 0f       	add	r26, r28
    32d0:	bd 1f       	adc	r27, r29
    32d2:	ea 0f       	add	r30, r26
    32d4:	fb 1f       	adc	r31, r27
    32d6:	20 83       	st	Z, r18
    32d8:	31 83       	std	Z+1, r19	; 0x01
    32da:	42 83       	std	Z+2, r20	; 0x02
    32dc:	53 83       	std	Z+3, r21	; 0x03
        if (((count&0x01) == 0) && (timeconstant.dw > ((F_CPU/1000000UL)+3))) {
    32de:	89 89       	ldd	r24, Y+17	; 0x11
    32e0:	9a 89       	ldd	r25, Y+18	; 0x12
    32e2:	00 97       	sbiw	r24, 0x00	; 0
    32e4:	99 f4       	brne	.+38     	; 0x330c <ReadInductance+0x3c0>
    32e6:	9c e0       	ldi	r25, 0x0C	; 12
    32e8:	e9 16       	cp	r14, r25
    32ea:	f1 04       	cpc	r15, r1
    32ec:	01 05       	cpc	r16, r1
    32ee:	11 05       	cpc	r17, r1
    32f0:	68 f0       	brcs	.+26     	; 0x330c <ReadInductance+0x3c0>
           // transition is found, measurement with delayed counter start is not necessary
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
    32f2:	f1 01       	movw	r30, r2
    32f4:	31 96       	adiw	r30, 0x01	; 1
    32f6:	ee 0f       	add	r30, r30
    32f8:	ff 1f       	adc	r31, r31
    32fa:	ee 0f       	add	r30, r30
    32fc:	ff 1f       	adc	r31, r31
    32fe:	ea 0f       	add	r30, r26
    3300:	fb 1f       	adc	r31, r27
    3302:	20 83       	st	Z, r18
    3304:	31 83       	std	Z+1, r19	; 0x01
    3306:	42 83       	std	Z+2, r20	; 0x02
    3308:	53 83       	std	Z+3, r21	; 0x03
           count++;		// skip the delayed measurement
    330a:	93 94       	inc	r9
        }
        wdt_reset();
    330c:	a8 95       	wdr
//  for (found=0;found<ResistorsFound;found++) {
//     if (resis[found].rx > 21000) continue;
     if (resis[found].rx > 21000) return;

     // we can check for Inductance, if resistance is below 2100 Ohm
     for (count=0;count<4;count++) {
    330e:	93 94       	inc	r9
    3310:	a9 2d       	mov	r26, r9
    3312:	a4 30       	cpi	r26, 0x04	; 4
    3314:	08 f4       	brcc	.+2      	; 0x3318 <ReadInductance+0x3cc>
    3316:	50 ce       	rjmp	.-864    	; 0x2fb8 <ReadInductance+0x6c>
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
           count++;		// skip the delayed measurement
        }
        wdt_reset();
     }  //end for count
     ADC_PORT = TXD_VAL;		// switch ADC Port to GND
    3318:	88 e0       	ldi	r24, 0x08	; 8
    331a:	88 b9       	out	0x08, r24	; 8
     wait_about20ms();
    331c:	84 e0       	ldi	r24, 0x04	; 4
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>
        resis[found].lx = inductance[0];
     }
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];		// other polarity, delayed start
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
#else
     nr_pol1 = 0;
    3324:	61 e0       	ldi	r22, 0x01	; 1
    3326:	2d 81       	ldd	r18, Y+5	; 0x05
    3328:	3e 81       	ldd	r19, Y+6	; 0x06
    332a:	4f 81       	ldd	r20, Y+7	; 0x07
    332c:	58 85       	ldd	r21, Y+8	; 0x08
    332e:	89 81       	ldd	r24, Y+1	; 0x01
    3330:	9a 81       	ldd	r25, Y+2	; 0x02
    3332:	ab 81       	ldd	r26, Y+3	; 0x03
    3334:	bc 81       	ldd	r27, Y+4	; 0x04
    3336:	82 17       	cp	r24, r18
    3338:	93 07       	cpc	r25, r19
    333a:	a4 07       	cpc	r26, r20
    333c:	b5 07       	cpc	r27, r21
    333e:	08 f0       	brcs	.+2      	; 0x3342 <ReadInductance+0x3f6>
    3340:	60 e0       	ldi	r22, 0x00	; 0
     if (inductance[1] > inductance[0]) { nr_pol1 = 1; } 
     nr_pol2 = 2;
     if (inductance[3] > inductance[2]) { nr_pol2 = 3; } 
    3342:	2d 85       	ldd	r18, Y+13	; 0x0d
    3344:	3e 85       	ldd	r19, Y+14	; 0x0e
    3346:	4f 85       	ldd	r20, Y+15	; 0x0f
    3348:	58 89       	ldd	r21, Y+16	; 0x10
    334a:	89 85       	ldd	r24, Y+9	; 0x09
    334c:	9a 85       	ldd	r25, Y+10	; 0x0a
    334e:	ab 85       	ldd	r26, Y+11	; 0x0b
    3350:	bc 85       	ldd	r27, Y+12	; 0x0c
    3352:	82 17       	cp	r24, r18
    3354:	93 07       	cpc	r25, r19
    3356:	a4 07       	cpc	r26, r20
    3358:	b5 07       	cpc	r27, r21
    335a:	10 f0       	brcs	.+4      	; 0x3360 <ReadInductance+0x414>
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];		// other polarity, delayed start
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
#else
     nr_pol1 = 0;
     if (inductance[1] > inductance[0]) { nr_pol1 = 1; } 
     nr_pol2 = 2;
    335c:	72 e0       	ldi	r23, 0x02	; 2
    335e:	01 c0       	rjmp	.+2      	; 0x3362 <ReadInductance+0x416>
     if (inductance[3] > inductance[2]) { nr_pol2 = 3; } 
    3360:	73 e0       	ldi	r23, 0x03	; 3
     if (inductance[nr_pol2] < inductance[nr_pol1]) nr_pol1 = nr_pol2;
    3362:	a7 2f       	mov	r26, r23
    3364:	b0 e0       	ldi	r27, 0x00	; 0
    3366:	aa 0f       	add	r26, r26
    3368:	bb 1f       	adc	r27, r27
    336a:	aa 0f       	add	r26, r26
    336c:	bb 1f       	adc	r27, r27
    336e:	ce 01       	movw	r24, r28
    3370:	01 96       	adiw	r24, 0x01	; 1
    3372:	a8 0f       	add	r26, r24
    3374:	b9 1f       	adc	r27, r25
    3376:	e6 2f       	mov	r30, r22
    3378:	f0 e0       	ldi	r31, 0x00	; 0
    337a:	ee 0f       	add	r30, r30
    337c:	ff 1f       	adc	r31, r31
    337e:	ee 0f       	add	r30, r30
    3380:	ff 1f       	adc	r31, r31
    3382:	e8 0f       	add	r30, r24
    3384:	f9 1f       	adc	r31, r25
    3386:	2d 91       	ld	r18, X+
    3388:	3d 91       	ld	r19, X+
    338a:	4d 91       	ld	r20, X+
    338c:	5c 91       	ld	r21, X
    338e:	80 81       	ld	r24, Z
    3390:	91 81       	ldd	r25, Z+1	; 0x01
    3392:	a2 81       	ldd	r26, Z+2	; 0x02
    3394:	b3 81       	ldd	r27, Z+3	; 0x03
    3396:	28 17       	cp	r18, r24
    3398:	39 07       	cpc	r19, r25
    339a:	4a 07       	cpc	r20, r26
    339c:	5b 07       	cpc	r21, r27
    339e:	08 f4       	brcc	.+2      	; 0x33a2 <ReadInductance+0x456>
    33a0:	67 2f       	mov	r22, r23
     resis[found].lx = inductance[nr_pol1];
    33a2:	26 2f       	mov	r18, r22
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	f9 01       	movw	r30, r18
    33a8:	ee 0f       	add	r30, r30
    33aa:	ff 1f       	adc	r31, r31
    33ac:	ee 0f       	add	r30, r30
    33ae:	ff 1f       	adc	r31, r31
    33b0:	ec 0f       	add	r30, r28
    33b2:	fd 1f       	adc	r31, r29
    33b4:	61 81       	ldd	r22, Z+1	; 0x01
    33b6:	72 81       	ldd	r23, Z+2	; 0x02
    33b8:	83 81       	ldd	r24, Z+3	; 0x03
    33ba:	94 81       	ldd	r25, Z+4	; 0x04
    33bc:	60 93 1c 01 	sts	0x011C, r22
    33c0:	70 93 1d 01 	sts	0x011D, r23
    33c4:	80 93 1e 01 	sts	0x011E, r24
    33c8:	90 93 1f 01 	sts	0x011F, r25
     resis[found].lpre = -5;	// 10 uH units
    33cc:	4b ef       	ldi	r20, 0xFB	; 251
    33ce:	40 93 20 01 	sts	0x0120, r20
     if (((nr_pol1 & 1) == 1) || (resis[found].rx >= 240)) {
    33d2:	20 fd       	sbrc	r18, 0
    33d4:	0d c0       	rjmp	.+26     	; 0x33f0 <ReadInductance+0x4a4>
    33d6:	20 91 18 01 	lds	r18, 0x0118
    33da:	30 91 19 01 	lds	r19, 0x0119
    33de:	40 91 1a 01 	lds	r20, 0x011A
    33e2:	50 91 1b 01 	lds	r21, 0x011B
    33e6:	20 3f       	cpi	r18, 0xF0	; 240
    33e8:	31 05       	cpc	r19, r1
    33ea:	41 05       	cpc	r20, r1
    33ec:	51 05       	cpc	r21, r1
    33ee:	a8 f0       	brcs	.+42     	; 0x341a <ReadInductance+0x4ce>
        // with 680 Ohm resistor total_r is more than 7460
        resis[found].lpre = -4;	// 100 uH units
    33f0:	2c ef       	ldi	r18, 0xFC	; 252
    33f2:	20 93 20 01 	sts	0x0120, r18
        resis[found].lx = (resis[found].lx + 5) / 10;
    33f6:	6b 5f       	subi	r22, 0xFB	; 251
    33f8:	7f 4f       	sbci	r23, 0xFF	; 255
    33fa:	8f 4f       	sbci	r24, 0xFF	; 255
    33fc:	9f 4f       	sbci	r25, 0xFF	; 255
    33fe:	2a e0       	ldi	r18, 0x0A	; 10
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	40 e0       	ldi	r20, 0x00	; 0
    3404:	50 e0       	ldi	r21, 0x00	; 0
    3406:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
    340a:	20 93 1c 01 	sts	0x011C, r18
    340e:	30 93 1d 01 	sts	0x011D, r19
    3412:	40 93 1e 01 	sts	0x011E, r20
    3416:	50 93 1f 01 	sts	0x011F, r21
     } 
#endif
//  } // end loop for all resistors

  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    341a:	88 e0       	ldi	r24, 0x08	; 8
    341c:	87 b9       	out	0x07, r24	; 7
  R_DDR = 0;			// switch all resistor ports to input
    341e:	14 b8       	out	0x04, r1	; 4
#endif
  return;
 } // end ReadInductance()
    3420:	68 96       	adiw	r28, 0x18	; 24
    3422:	0f b6       	in	r0, 0x3f	; 63
    3424:	f8 94       	cli
    3426:	de bf       	out	0x3e, r29	; 62
    3428:	0f be       	out	0x3f, r0	; 63
    342a:	cd bf       	out	0x3d, r28	; 61
    342c:	cf 91       	pop	r28
    342e:	df 91       	pop	r29
    3430:	1f 91       	pop	r17
    3432:	0f 91       	pop	r16
    3434:	ff 90       	pop	r15
    3436:	ef 90       	pop	r14
    3438:	df 90       	pop	r13
    343a:	cf 90       	pop	r12
    343c:	bf 90       	pop	r11
    343e:	af 90       	pop	r10
    3440:	9f 90       	pop	r9
    3442:	8f 90       	pop	r8
    3444:	7f 90       	pop	r7
    3446:	6f 90       	pop	r6
    3448:	5f 90       	pop	r5
    344a:	4f 90       	pop	r4
    344c:	3f 90       	pop	r3
    344e:	2f 90       	pop	r2
    3450:	08 95       	ret

00003452 <W20msReadADC>:
    3452:	8f 93       	push	r24
    3454:	84 e0       	ldi	r24, 0x04	; 4
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>
    345c:	0b c0       	rjmp	.+22     	; 0x3474 <to_read>

0000345e <W10msReadADC>:
    345e:	8f 93       	push	r24
    3460:	82 e0       	ldi	r24, 0x02	; 2
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>
    3468:	05 c0       	rjmp	.+10     	; 0x3474 <to_read>

0000346a <W5msReadADC>:
    346a:	8f 93       	push	r24
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	0e 94 ee 03 	call	0x7dc	; 0x7dc <sleep_5ms>

00003474 <to_read>:
    3474:	8f 91       	pop	r24

00003476 <ReadADC>:
    3476:	1f 93       	push	r17
    3478:	18 2f       	mov	r17, r24
    347a:	10 64       	ori	r17, 0x40	; 64

0000347c <get_sample>:
    347c:	10 93 7c 00 	sts	0x007C, r17
    3480:	e1 2f       	mov	r30, r17
    3482:	e0 78       	andi	r30, 0x80	; 128
    3484:	80 91 3d 01 	lds	r24, 0x013D
    3488:	e8 17       	cp	r30, r24
    348a:	61 f0       	breq	.+24     	; 0x34a4 <r2aa2>
    348c:	0e 94 c4 13 	call	0x2788	; 0x2788 <wait100us>
    3490:	8e e9       	ldi	r24, 0x9E	; 158
    3492:	80 93 7a 00 	sts	0x007A, r24
    3496:	83 e0       	ldi	r24, 0x03	; 3
    3498:	83 bf       	out	0x33, r24	; 51
    349a:	88 95       	sleep
    349c:	82 e0       	ldi	r24, 0x02	; 2
    349e:	83 bf       	out	0x33, r24	; 51
    34a0:	e0 93 3d 01 	sts	0x013D, r30

000034a4 <r2aa2>:
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	a9 01       	movw	r20, r18
    34aa:	e0 e0       	ldi	r30, 0x00	; 0
    34ac:	1f c0       	rjmp	.+62     	; 0x34ec <r2ae8>

000034ae <Loop>:
    34ae:	8e e9       	ldi	r24, 0x9E	; 158
    34b0:	80 93 7a 00 	sts	0x007A, r24
    34b4:	83 e0       	ldi	r24, 0x03	; 3
    34b6:	83 bf       	out	0x33, r24	; 51
    34b8:	88 95       	sleep
    34ba:	82 e0       	ldi	r24, 0x02	; 2
    34bc:	83 bf       	out	0x33, r24	; 51
    34be:	60 91 78 00 	lds	r22, 0x0078
    34c2:	70 91 79 00 	lds	r23, 0x0079
    34c6:	26 0f       	add	r18, r22
    34c8:	37 1f       	adc	r19, r23
    34ca:	41 1d       	adc	r20, r1
    34cc:	51 1d       	adc	r21, r1
    34ce:	e4 30       	cpi	r30, 0x04	; 4
    34d0:	61 f4       	brne	.+24     	; 0x34ea <r2ae6>
    34d2:	80 91 3f 01 	lds	r24, 0x013F
    34d6:	80 30       	cpi	r24, 0x00	; 0
    34d8:	41 f0       	breq	.+16     	; 0x34ea <r2ae6>
    34da:	84 e0       	ldi	r24, 0x04	; 4
    34dc:	20 30       	cpi	r18, 0x00	; 0
    34de:	38 07       	cpc	r19, r24
    34e0:	20 f4       	brcc	.+8      	; 0x34ea <r2ae6>
    34e2:	17 fd       	sbrc	r17, 7
    34e4:	02 c0       	rjmp	.+4      	; 0x34ea <r2ae6>
    34e6:	10 68       	ori	r17, 0x80	; 128
    34e8:	c9 cf       	rjmp	.-110    	; 0x347c <get_sample>

000034ea <r2ae6>:
    34ea:	ef 5f       	subi	r30, 0xFF	; 255

000034ec <r2ae8>:
    34ec:	80 91 3c 01 	lds	r24, 0x013C
    34f0:	e8 17       	cp	r30, r24
    34f2:	e8 f2       	brcs	.-70     	; 0x34ae <Loop>
    34f4:	17 ff       	sbrs	r17, 7
    34f6:	05 c0       	rjmp	.+10     	; 0x3502 <r2afe>
    34f8:	60 91 3e 01 	lds	r22, 0x013E
    34fc:	70 91 3f 01 	lds	r23, 0x013F
    3500:	04 c0       	rjmp	.+8      	; 0x350a <r2b02>

00003502 <r2afe>:
    3502:	60 91 40 01 	lds	r22, 0x0140
    3506:	70 91 41 01 	lds	r23, 0x0141

0000350a <r2b02>:
    350a:	80 e0       	ldi	r24, 0x00	; 0
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
    3512:	2f ef       	ldi	r18, 0xFF	; 255
    3514:	33 e0       	ldi	r19, 0x03	; 3
    3516:	40 e0       	ldi	r20, 0x00	; 0
    3518:	50 e0       	ldi	r21, 0x00	; 0
    351a:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
    351e:	b9 01       	movw	r22, r18
    3520:	ca 01       	movw	r24, r20
    3522:	20 91 3c 01 	lds	r18, 0x013C
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	40 e0       	ldi	r20, 0x00	; 0
    352a:	50 e0       	ldi	r21, 0x00	; 0
    352c:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
    3530:	c9 01       	movw	r24, r18
    3532:	1f 91       	pop	r17
    3534:	08 95       	ret

00003536 <GetESR>:
    3536:	2f 92       	push	r2
    3538:	3f 92       	push	r3
    353a:	4f 92       	push	r4
    353c:	5f 92       	push	r5
    353e:	6f 92       	push	r6
    3540:	7f 92       	push	r7
    3542:	8f 92       	push	r8
    3544:	9f 92       	push	r9
    3546:	af 92       	push	r10
    3548:	bf 92       	push	r11
    354a:	cf 92       	push	r12
    354c:	df 92       	push	r13
    354e:	ef 92       	push	r14
    3550:	ff 92       	push	r15
    3552:	0f 93       	push	r16
    3554:	1f 93       	push	r17
    3556:	df 93       	push	r29
    3558:	cf 93       	push	r28
    355a:	cd b7       	in	r28, 0x3d	; 61
    355c:	de b7       	in	r29, 0x3e	; 62
    355e:	6e 97       	sbiw	r28, 0x1e	; 30
    3560:	0f b6       	in	r0, 0x3f	; 63
    3562:	f8 94       	cli
    3564:	de bf       	out	0x3e, r29	; 62
    3566:	0f be       	out	0x3f, r0	; 63
    3568:	cd bf       	out	0x3d, r28	; 61
    356a:	66 2e       	mov	r6, r22
    356c:	b8 2e       	mov	r11, r24
    356e:	86 0f       	add	r24, r22
    3570:	89 83       	std	Y+1, r24	; 0x01
    3572:	20 91 07 01 	lds	r18, 0x0107
    3576:	27 30       	cpi	r18, 0x07	; 7
    3578:	19 f5       	brne	.+70     	; 0x35c0 <ad_35e4>
    357a:	20 91 72 01 	lds	r18, 0x0172
    357e:	30 91 73 01 	lds	r19, 0x0173
    3582:	40 91 74 01 	lds	r20, 0x0174
    3586:	50 91 75 01 	lds	r21, 0x0175
    358a:	10 91 81 01 	lds	r17, 0x0181
    358e:	09 c0       	rjmp	.+18     	; 0x35a2 <ad_35ba>

00003590 <ad_35ac>:
    3590:	ca 01       	movw	r24, r20
    3592:	b9 01       	movw	r22, r18
    3594:	2a e0       	ldi	r18, 0x0A	; 10
    3596:	31 2d       	mov	r19, r1
    3598:	41 2d       	mov	r20, r1
    359a:	51 2d       	mov	r21, r1
    359c:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
    35a0:	1f 5f       	subi	r17, 0xFF	; 255

000035a2 <ad_35ba>:
    35a2:	17 3f       	cpi	r17, 0xF7	; 247
    35a4:	ac f3       	brlt	.-22     	; 0x3590 <ad_35ac>
    35a6:	2c 8b       	std	Y+20, r18	; 0x14
    35a8:	3d 8b       	std	Y+21, r19	; 0x15
    35aa:	4e 8b       	std	Y+22, r20	; 0x16
    35ac:	5f 8b       	std	Y+23, r21	; 0x17
    35ae:	24 3b       	cpi	r18, 0xB4	; 180
    35b0:	60 e0       	ldi	r22, 0x00	; 0
    35b2:	36 07       	cpc	r19, r22
    35b4:	41 05       	cpc	r20, r1
    35b6:	51 05       	cpc	r21, r1
    35b8:	18 f4       	brcc	.+6      	; 0x35c0 <ad_35e4>
    35ba:	8f ef       	ldi	r24, 0xFF	; 255
    35bc:	9f ef       	ldi	r25, 0xFF	; 255
    35be:	71 c1       	rjmp	.+738    	; 0x38a2 <ad_exit>

000035c0 <ad_35e4>:
    35c0:	26 ed       	ldi	r18, 0xD6	; 214
    35c2:	a2 2e       	mov	r10, r18
    35c4:	02 c0       	rjmp	.+4      	; 0x35ca <ad_3604>

000035c6 <ad_35fe>:
    35c6:	94 ed       	ldi	r25, 0xD4	; 212
    35c8:	a9 2e       	mov	r10, r25

000035ca <ad_3604>:
    35ca:	e3 e0       	ldi	r30, 0x03	; 3
    35cc:	f1 e0       	ldi	r31, 0x01	; 1
    35ce:	e6 0d       	add	r30, r6
    35d0:	f1 1d       	adc	r31, r1
    35d2:	85 91       	lpm	r24, Z+
    35d4:	88 60       	ori	r24, 0x08	; 8
    35d6:	8e 87       	std	Y+14, r24	; 0x0e
    35d8:	e3 e0       	ldi	r30, 0x03	; 3
    35da:	f1 e0       	ldi	r31, 0x01	; 1
    35dc:	eb 0d       	add	r30, r11
    35de:	f1 1d       	adc	r31, r1
    35e0:	85 91       	lpm	r24, Z+
    35e2:	88 60       	ori	r24, 0x08	; 8
    35e4:	8f 87       	std	Y+15, r24	; 0x0f
    35e6:	e0 e0       	ldi	r30, 0x00	; 0
    35e8:	f1 e0       	ldi	r31, 0x01	; 1
    35ea:	e6 0d       	add	r30, r6
    35ec:	f1 1d       	adc	r31, r1
    35ee:	75 90       	lpm	r7, Z+
    35f0:	e0 e0       	ldi	r30, 0x00	; 0
    35f2:	f1 e0       	ldi	r31, 0x01	; 1
    35f4:	eb 0d       	add	r30, r11
    35f6:	f1 1d       	adc	r31, r1
    35f8:	c5 90       	lpm	r12, Z+
    35fa:	90 ec       	ldi	r25, 0xC0	; 192
    35fc:	69 2a       	or	r6, r25
    35fe:	b9 2a       	or	r11, r25
    3600:	81 e0       	ldi	r24, 0x01	; 1
    3602:	e8 2e       	mov	r14, r24
    3604:	f1 2c       	mov	r15, r1
    3606:	01 2d       	mov	r16, r1
    3608:	11 2d       	mov	r17, r1
    360a:	8e 83       	std	Y+6, r24	; 0x06
    360c:	1f 82       	std	Y+7, r1	; 0x07
    360e:	18 86       	std	Y+8, r1	; 0x08
    3610:	19 86       	std	Y+9, r1	; 0x09
    3612:	1a 86       	std	Y+10, r1	; 0x0a
    3614:	1b 86       	std	Y+11, r1	; 0x0b
    3616:	1c 86       	std	Y+12, r1	; 0x0c
    3618:	1d 86       	std	Y+13, r1	; 0x0d
    361a:	18 8e       	std	Y+24, r1	; 0x18
    361c:	19 8e       	std	Y+25, r1	; 0x19
    361e:	0e 94 ad 01 	call	0x35a	; 0x35a <EntladePins>
    3622:	88 e0       	ldi	r24, 0x08	; 8
    3624:	88 b9       	out	0x08, r24	; 8
    3626:	60 92 7c 00 	sts	0x007C, r6
    362a:	0e 94 c4 13 	call	0x2788	; 0x2788 <wait100us>
    362e:	3f 85       	ldd	r19, Y+15	; 0x0f
    3630:	37 b9       	out	0x07, r19	; 7
    3632:	75 b8       	out	0x05, r7	; 5
    3634:	74 b8       	out	0x04, r7	; 4
    3636:	0e 94 c9 13 	call	0x2792	; 0x2792 <wait10us>
    363a:	0e 94 cd 13 	call	0x279a	; 0x279a <wait2us>
    363e:	15 b8       	out	0x05, r1	; 5
    3640:	14 b8       	out	0x04, r1	; 4
    3642:	dd 24       	eor	r13, r13
    3644:	b4 ed       	ldi	r27, 0xD4	; 212
    3646:	9b 2e       	mov	r9, r27
    3648:	a6 ed       	ldi	r26, 0xD6	; 214
    364a:	8a 2e       	mov	r8, r26

0000364c <ad_3692>:
    364c:	3e 85       	ldd	r19, Y+14	; 0x0e
    364e:	37 b9       	out	0x07, r19	; 7
    3650:	75 b8       	out	0x05, r7	; 5
    3652:	74 b8       	out	0x04, r7	; 4
    3654:	60 92 7c 00 	sts	0x007C, r6
    3658:	a8 95       	wdr
    365a:	a0 92 7a 00 	sts	0x007A, r10
    365e:	80 91 7a 00 	lds	r24, 0x007A
    3662:	86 fd       	sbrc	r24, 6
    3664:	fc cf       	rjmp	.-8      	; 0x365e <ad_3692+0x12>
    3666:	a0 92 7a 00 	sts	0x007A, r10
    366a:	80 91 7a 00 	lds	r24, 0x007A
    366e:	86 fd       	sbrc	r24, 6
    3670:	fc cf       	rjmp	.-8      	; 0x366a <ad_3692+0x1e>
    3672:	20 90 78 00 	lds	r2, 0x0078
    3676:	30 90 79 00 	lds	r3, 0x0079
    367a:	b0 92 7c 00 	sts	0x007C, r11
    367e:	a0 92 7a 00 	sts	0x007A, r10
    3682:	80 91 7a 00 	lds	r24, 0x007A
    3686:	86 fd       	sbrc	r24, 6
    3688:	fc cf       	rjmp	.-8      	; 0x3682 <ad_3692+0x36>
    368a:	80 92 7a 00 	sts	0x007A, r8
    368e:	0e 94 ca 13 	call	0x2794	; 0x2794 <wait5us>
    3692:	c5 b8       	out	0x05, r12	; 5
    3694:	c4 b8       	out	0x04, r12	; 4
    3696:	0e 94 c8 13 	call	0x2790	; 0x2790 <wait20us>
    369a:	0e 94 ca 13 	call	0x2794	; 0x2794 <wait5us>
    369e:	0e 94 ce 13 	call	0x279c	; 0x279c <wait1us>
    36a2:	8f 93       	push	r24
    36a4:	8f 91       	pop	r24
    36a6:	a8 95       	wdr
    36a8:	a8 95       	wdr
    36aa:	14 b8       	out	0x04, r1	; 4
    36ac:	15 b8       	out	0x05, r1	; 5

000036ae <ad_370c>:
    36ae:	80 91 7a 00 	lds	r24, 0x007A
    36b2:	86 fd       	sbrc	r24, 6
    36b4:	fc cf       	rjmp	.-8      	; 0x36ae <ad_370c>
    36b6:	20 91 78 00 	lds	r18, 0x0078
    36ba:	30 91 79 00 	lds	r19, 0x0079
    36be:	28 8b       	std	Y+16, r18	; 0x10
    36c0:	39 8b       	std	Y+17, r19	; 0x11
    36c2:	3f 85       	ldd	r19, Y+15	; 0x0f
    36c4:	37 b9       	out	0x07, r19	; 7
    36c6:	c5 b8       	out	0x05, r12	; 5
    36c8:	c4 b8       	out	0x04, r12	; 4
    36ca:	a8 95       	wdr
    36cc:	b0 92 7c 00 	sts	0x007C, r11
    36d0:	a0 92 7a 00 	sts	0x007A, r10
    36d4:	80 91 7a 00 	lds	r24, 0x007A
    36d8:	86 fd       	sbrc	r24, 6
    36da:	fc cf       	rjmp	.-8      	; 0x36d4 <ad_370c+0x26>
    36dc:	a0 92 7a 00 	sts	0x007A, r10
    36e0:	80 91 7a 00 	lds	r24, 0x007A
    36e4:	86 fd       	sbrc	r24, 6
    36e6:	fc cf       	rjmp	.-8      	; 0x36e0 <ad_370c+0x32>
    36e8:	60 91 78 00 	lds	r22, 0x0078
    36ec:	70 91 79 00 	lds	r23, 0x0079
    36f0:	60 92 7c 00 	sts	0x007C, r6
    36f4:	a0 92 7a 00 	sts	0x007A, r10
    36f8:	80 91 7a 00 	lds	r24, 0x007A
    36fc:	86 fd       	sbrc	r24, 6
    36fe:	fc cf       	rjmp	.-8      	; 0x36f8 <ad_370c+0x4a>
    3700:	80 92 7a 00 	sts	0x007A, r8
    3704:	0e 94 ca 13 	call	0x2794	; 0x2794 <wait5us>
    3708:	75 b8       	out	0x05, r7	; 5
    370a:	74 b8       	out	0x04, r7	; 4
    370c:	0e 94 c8 13 	call	0x2790	; 0x2790 <wait20us>
    3710:	0e 94 ca 13 	call	0x2794	; 0x2794 <wait5us>
    3714:	0e 94 ce 13 	call	0x279c	; 0x279c <wait1us>
    3718:	8f 93       	push	r24
    371a:	8f 91       	pop	r24
    371c:	a8 95       	wdr
    371e:	a8 95       	wdr
    3720:	14 b8       	out	0x04, r1	; 4
    3722:	15 b8       	out	0x05, r1	; 5

00003724 <ad_37f4>:
    3724:	80 91 7a 00 	lds	r24, 0x007A
    3728:	86 fd       	sbrc	r24, 6
    372a:	fc cf       	rjmp	.-8      	; 0x3724 <ad_37f4>
    372c:	40 91 78 00 	lds	r20, 0x0078
    3730:	50 91 79 00 	lds	r21, 0x0079
    3734:	14 b8       	out	0x04, r1	; 4
    3736:	cb 01       	movw	r24, r22
    3738:	82 0d       	add	r24, r2
    373a:	93 1d       	adc	r25, r3
    373c:	e8 0e       	add	r14, r24
    373e:	f9 1e       	adc	r15, r25
    3740:	01 1d       	adc	r16, r1
    3742:	11 1d       	adc	r17, r1
    3744:	ea 82       	std	Y+2, r14	; 0x02
    3746:	fb 82       	std	Y+3, r15	; 0x03
    3748:	0c 83       	std	Y+4, r16	; 0x04
    374a:	1d 83       	std	Y+5, r17	; 0x05
    374c:	88 89       	ldd	r24, Y+16	; 0x10
    374e:	99 89       	ldd	r25, Y+17	; 0x11
    3750:	84 0f       	add	r24, r20
    3752:	95 1f       	adc	r25, r21
    3754:	2e 81       	ldd	r18, Y+6	; 0x06
    3756:	3f 81       	ldd	r19, Y+7	; 0x07
    3758:	68 85       	ldd	r22, Y+8	; 0x08
    375a:	79 85       	ldd	r23, Y+9	; 0x09
    375c:	28 0f       	add	r18, r24
    375e:	39 1f       	adc	r19, r25
    3760:	61 1d       	adc	r22, r1
    3762:	71 1d       	adc	r23, r1
    3764:	2e 83       	std	Y+6, r18	; 0x06
    3766:	3f 83       	std	Y+7, r19	; 0x07
    3768:	68 87       	std	Y+8, r22	; 0x08
    376a:	79 87       	std	Y+9, r23	; 0x09
    376c:	24 e6       	ldi	r18, 0x64	; 100
    376e:	24 17       	cp	r18, r20
    3770:	15 06       	cpc	r1, r21
    3772:	50 f0       	brcs	.+20     	; 0x3788 <is_ok1>
    3774:	75 b8       	out	0x05, r7	; 5
    3776:	74 b8       	out	0x04, r7	; 4
    3778:	0e 94 cd 13 	call	0x279a	; 0x279a <wait2us>
    377c:	14 b8       	out	0x04, r1	; 4
    377e:	15 b8       	out	0x05, r1	; 5
    3780:	88 8d       	ldd	r24, Y+24	; 0x18
    3782:	83 95       	inc	r24
    3784:	88 8f       	std	Y+24, r24	; 0x18
    3786:	07 c0       	rjmp	.+14     	; 0x3796 <is_ok1b>

00003788 <is_ok1>:
    3788:	48 3e       	cpi	r20, 0xE8	; 232
    378a:	73 e0       	ldi	r23, 0x03	; 3
    378c:	57 07       	cpc	r21, r23
    378e:	18 f0       	brcs	.+6      	; 0x3796 <is_ok1b>
    3790:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3792:	83 95       	inc	r24
    3794:	8a 8f       	std	Y+26, r24	; 0x1a

00003796 <is_ok1b>:
    3796:	88 89       	ldd	r24, Y+16	; 0x10
    3798:	99 89       	ldd	r25, Y+17	; 0x11
    379a:	28 17       	cp	r18, r24
    379c:	19 06       	cpc	r1, r25
    379e:	b0 f0       	brcs	.+44     	; 0x37cc <is_ok2>
    37a0:	3e 85       	ldd	r19, Y+14	; 0x0e
    37a2:	37 b9       	out	0x07, r19	; 7
    37a4:	c5 b8       	out	0x05, r12	; 5
    37a6:	c4 b8       	out	0x04, r12	; 4
    37a8:	0e 94 cd 13 	call	0x279a	; 0x279a <wait2us>
    37ac:	0e 94 c8 13 	call	0x2790	; 0x2790 <wait20us>
    37b0:	0e 94 ca 13 	call	0x2794	; 0x2794 <wait5us>
    37b4:	0e 94 ce 13 	call	0x279c	; 0x279c <wait1us>
    37b8:	8f 93       	push	r24
    37ba:	8f 91       	pop	r24
    37bc:	a8 95       	wdr
    37be:	a8 95       	wdr
    37c0:	14 b8       	out	0x04, r1	; 4
    37c2:	15 b8       	out	0x05, r1	; 5
    37c4:	89 8d       	ldd	r24, Y+25	; 0x19
    37c6:	83 95       	inc	r24
    37c8:	89 8f       	std	Y+25, r24	; 0x19
    37ca:	07 c0       	rjmp	.+14     	; 0x37da <is_ok2b>

000037cc <is_ok2>:
    37cc:	88 3e       	cpi	r24, 0xE8	; 232
    37ce:	73 e0       	ldi	r23, 0x03	; 3
    37d0:	97 07       	cpc	r25, r23
    37d2:	18 f0       	brcs	.+6      	; 0x37da <is_ok2b>
    37d4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    37d6:	83 95       	inc	r24
    37d8:	8a 8f       	std	Y+26, r24	; 0x1a

000037da <is_ok2b>:
    37da:	d3 94       	inc	r13
    37dc:	5d 2d       	mov	r21, r13
    37de:	5f 3f       	cpi	r21, 0xFF	; 255
    37e0:	09 f0       	breq	.+2      	; 0x37e4 <ad_38ac>
    37e2:	34 cf       	rjmp	.-408    	; 0x364c <ad_3692>

000037e4 <ad_38ac>:
    37e4:	40 90 47 01 	lds	r4, 0x0147
    37e8:	50 90 48 01 	lds	r5, 0x0148
    37ec:	44 0c       	add	r4, r4
    37ee:	55 1c       	adc	r5, r5
    37f0:	92 01       	movw	r18, r4
    37f2:	e4 e0       	ldi	r30, 0x04	; 4

000037f4 <ad_3924>:
    37f4:	24 0d       	add	r18, r4
    37f6:	35 1d       	adc	r19, r5
    37f8:	ea 95       	dec	r30
    37fa:	e1 f7       	brne	.-8      	; 0x37f4 <ad_3924>
    37fc:	29 01       	movw	r4, r18
    37fe:	57 01       	movw	r10, r14
    3800:	68 01       	movw	r12, r16
    3802:	6e 80       	ldd	r6, Y+6	; 0x06
    3804:	7f 80       	ldd	r7, Y+7	; 0x07
    3806:	88 84       	ldd	r8, Y+8	; 0x08
    3808:	99 84       	ldd	r9, Y+9	; 0x09
    380a:	20 91 07 01 	lds	r18, 0x0107
    380e:	27 30       	cpi	r18, 0x07	; 7
    3810:	c1 f4       	brne	.+48     	; 0x3842 <no_sub>
    3812:	6c 89       	ldd	r22, Y+20	; 0x14
    3814:	7d 89       	ldd	r23, Y+21	; 0x15
    3816:	8e 89       	ldd	r24, Y+22	; 0x16
    3818:	9f 89       	ldd	r25, Y+23	; 0x17
    381a:	9b 01       	movw	r18, r22
    381c:	ac 01       	movw	r20, r24
    381e:	6d 5e       	subi	r22, 0xED	; 237
    3820:	7f 4f       	sbci	r23, 0xFF	; 255
    3822:	8f 4f       	sbci	r24, 0xFF	; 255
    3824:	9f 4f       	sbci	r25, 0xFF	; 255
    3826:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
    382a:	9b 01       	movw	r18, r22
    382c:	ac 01       	movw	r20, r24
    382e:	6c e1       	ldi	r22, 0x1C	; 28
    3830:	79 e3       	ldi	r23, 0x39	; 57
    3832:	80 e9       	ldi	r24, 0x90	; 144
    3834:	9a e1       	ldi	r25, 0x1A	; 26
    3836:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
    383a:	62 1a       	sub	r6, r18
    383c:	73 0a       	sbc	r7, r19
    383e:	84 0a       	sbc	r8, r20
    3840:	95 0a       	sbc	r9, r21

00003842 <no_sub>:
    3842:	a6 14       	cp	r10, r6
    3844:	b7 04       	cpc	r11, r7
    3846:	c8 04       	cpc	r12, r8
    3848:	d9 04       	cpc	r13, r9
    384a:	28 f4       	brcc	.+10     	; 0x3856 <ad_396c>
    384c:	6a 18       	sub	r6, r10
    384e:	7b 08       	sbc	r7, r11
    3850:	8c 08       	sbc	r8, r12
    3852:	9d 08       	sbc	r9, r13
    3854:	03 c0       	rjmp	.+6      	; 0x385c <ad_3972>

00003856 <ad_396c>:
    3856:	66 24       	eor	r6, r6
    3858:	77 24       	eor	r7, r7
    385a:	43 01       	movw	r8, r6

0000385c <ad_3972>:
    385c:	b2 01       	movw	r22, r4
    385e:	80 e0       	ldi	r24, 0x00	; 0
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	93 01       	movw	r18, r6
    3864:	a4 01       	movw	r20, r8
    3866:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
    386a:	95 01       	movw	r18, r10
    386c:	a6 01       	movw	r20, r12
    386e:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
    3872:	83 ea       	ldi	r24, 0xA3	; 163
    3874:	91 e0       	ldi	r25, 0x01	; 1
    3876:	79 81       	ldd	r23, Y+1	; 0x01
    3878:	87 0f       	add	r24, r23
    387a:	91 1d       	adc	r25, r1
    387c:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__eerd_byte_m168>
    3880:	68 2e       	mov	r6, r24
    3882:	c9 01       	movw	r24, r18
    3884:	60 e1       	ldi	r22, 0x10	; 16
    3886:	70 e0       	ldi	r23, 0x00	; 0
    3888:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <__udivmodhi4>
    388c:	26 0f       	add	r18, r22
    388e:	37 1f       	adc	r19, r23
    3890:	c9 01       	movw	r24, r18
    3892:	68 16       	cp	r6, r24
    3894:	19 06       	cpc	r1, r25
    3896:	18 f4       	brcc	.+6      	; 0x389e <esr_too_less>
    3898:	86 19       	sub	r24, r6
    389a:	91 09       	sbc	r25, r1
    389c:	02 c0       	rjmp	.+4      	; 0x38a2 <ad_exit>

0000389e <esr_too_less>:
    389e:	81 2d       	mov	r24, r1
    38a0:	91 2d       	mov	r25, r1

000038a2 <ad_exit>:
    38a2:	6e 96       	adiw	r28, 0x1e	; 30
    38a4:	0f b6       	in	r0, 0x3f	; 63
    38a6:	f8 94       	cli
    38a8:	de bf       	out	0x3e, r29	; 62
    38aa:	0f be       	out	0x3f, r0	; 63
    38ac:	cd bf       	out	0x3d, r28	; 61
    38ae:	cf 91       	pop	r28
    38b0:	df 91       	pop	r29
    38b2:	1f 91       	pop	r17
    38b4:	0f 91       	pop	r16
    38b6:	ff 90       	pop	r15
    38b8:	ef 90       	pop	r14
    38ba:	df 90       	pop	r13
    38bc:	cf 90       	pop	r12
    38be:	bf 90       	pop	r11
    38c0:	af 90       	pop	r10
    38c2:	9f 90       	pop	r9
    38c4:	8f 90       	pop	r8
    38c6:	7f 90       	pop	r7
    38c8:	6f 90       	pop	r6
    38ca:	5f 90       	pop	r5
    38cc:	4f 90       	pop	r4
    38ce:	3f 90       	pop	r3
    38d0:	2f 90       	pop	r2
    38d2:	08 95       	ret

000038d4 <GetVloss>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void GetVloss() {
    38d4:	cf 92       	push	r12
    38d6:	df 92       	push	r13
    38d8:	ef 92       	push	r14
    38da:	ff 92       	push	r15
    38dc:	0f 93       	push	r16
    38de:	1f 93       	push	r17
    38e0:	cf 93       	push	r28
    38e2:	df 93       	push	r29
  } lval;
  uint8_t ii;
  uint8_t HiPinR_L;
  uint8_t LoADC;

  if (cap.v_loss > 0) return;		// Voltage loss is already known
    38e4:	80 91 7c 01 	lds	r24, 0x017C
    38e8:	90 91 7d 01 	lds	r25, 0x017D
    38ec:	00 97       	sbiw	r24, 0x00	; 0
    38ee:	09 f0       	breq	.+2      	; 0x38f2 <GetVloss+0x1e>
    38f0:	a2 c0       	rjmp	.+324    	; 0x3a36 <GetVloss+0x162>
  LoADC = pgm_read_byte(&PinADCtab[cap.ca]) | TXD_MSK;
    38f2:	e0 91 7e 01 	lds	r30, 0x017E
    38f6:	f0 e0       	ldi	r31, 0x00	; 0
    38f8:	ed 5f       	subi	r30, 0xFD	; 253
    38fa:	fe 4f       	sbci	r31, 0xFE	; 254
    38fc:	04 91       	lpm	r16, Z+
    38fe:	08 60       	ori	r16, 0x08	; 8
  HiPinR_L = pgm_read_byte(&PinRLtab[cap.cb]);	//R_L mask for HighPin R_L load
    3900:	e0 91 7f 01 	lds	r30, 0x017F
    3904:	f0 e0       	ldi	r31, 0x00	; 0
    3906:	e0 50       	subi	r30, 0x00	; 0
    3908:	ff 4f       	sbci	r31, 0xFF	; 255
    390a:	14 91       	lpm	r17, Z+

  EntladePins();			// discharge capacitor
    390c:	0e 94 ad 01 	call	0x35a	; 0x35a <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    3910:	88 e0       	ldi	r24, 0x08	; 8
    3912:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    3914:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    3916:	07 b9       	out	0x07, r16	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    3918:	14 b9       	out	0x04, r17	; 4
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
    391a:	80 91 7f 01 	lds	r24, 0x017F
    391e:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
    3922:	ec 01       	movw	r28, r24
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
    3924:	00 91 81 01 	lds	r16, 0x0181
    3928:	08 3f       	cpi	r16, 0xF8	; 248
    392a:	0c f0       	brlt	.+2      	; 0x392e <GetVloss+0x5a>
    392c:	84 c0       	rjmp	.+264    	; 0x3a36 <GetVloss+0x162>
  lval.dw = cap.cval_max;
    392e:	20 91 72 01 	lds	r18, 0x0172
    3932:	30 91 73 01 	lds	r19, 0x0173
    3936:	40 91 74 01 	lds	r20, 0x0174
    393a:	50 91 75 01 	lds	r21, 0x0175
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    393e:	04 5f       	subi	r16, 0xF4	; 244
     lval.dw = (lval.dw + 5) / 10;
    3940:	8a e0       	ldi	r24, 0x0A	; 10
    3942:	c8 2e       	mov	r12, r24
    3944:	d1 2c       	mov	r13, r1
    3946:	e1 2c       	mov	r14, r1
    3948:	f1 2c       	mov	r15, r1
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
  lval.dw = cap.cval_max;
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    394a:	0b c0       	rjmp	.+22     	; 0x3962 <GetVloss+0x8e>
     lval.dw = (lval.dw + 5) / 10;
    394c:	ca 01       	movw	r24, r20
    394e:	b9 01       	movw	r22, r18
    3950:	6b 5f       	subi	r22, 0xFB	; 251
    3952:	7f 4f       	sbci	r23, 0xFF	; 255
    3954:	8f 4f       	sbci	r24, 0xFF	; 255
    3956:	9f 4f       	sbci	r25, 0xFF	; 255
    3958:	a7 01       	movw	r20, r14
    395a:	96 01       	movw	r18, r12
    395c:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
  lval.dw = cap.cval_max;
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    3960:	0f 5f       	subi	r16, 0xFF	; 255
    3962:	04 30       	cpi	r16, 0x04	; 4
    3964:	98 f3       	brcs	.-26     	; 0x394c <GetVloss+0x78>
    3966:	79 01       	movw	r14, r18
     lval.dw = (lval.dw + 5) / 10;
  }
//  if ((lval.dw == 0) || (lval.dw > 500)) {
  if ((lval.dw == 0) || (lval.dw > 5000)) {
    3968:	21 50       	subi	r18, 0x01	; 1
    396a:	30 40       	sbci	r19, 0x00	; 0
    396c:	40 40       	sbci	r20, 0x00	; 0
    396e:	50 40       	sbci	r21, 0x00	; 0
    3970:	28 38       	cpi	r18, 0x88	; 136
    3972:	83 e1       	ldi	r24, 0x13	; 19
    3974:	38 07       	cpc	r19, r24
    3976:	80 e0       	ldi	r24, 0x00	; 0
    3978:	48 07       	cpc	r20, r24
    397a:	80 e0       	ldi	r24, 0x00	; 0
    397c:	58 07       	cpc	r21, r24
    397e:	08 f0       	brcs	.+2      	; 0x3982 <GetVloss+0xae>
    3980:	5a c0       	rjmp	.+180    	; 0x3a36 <GetVloss+0x162>
     /* capacity more than 50uF, Voltage loss is already measured  */
     return;
  }
  R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    3982:	15 b9       	out	0x05, r17	; 5
  R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    3984:	14 b9       	out	0x04, r17	; 4
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    3986:	00 e0       	ldi	r16, 0x00	; 0
    3988:	10 e0       	ldi	r17, 0x00	; 0
    398a:	04 c0       	rjmp	.+8      	; 0x3994 <GetVloss+0xc0>
//     wait50us();			// wait exactly 50us
     wait5us();			// wait exactly 5us
    398c:	0e 94 ca 13 	call	0x2794	; 0x2794 <wait5us>
     /* capacity more than 50uF, Voltage loss is already measured  */
     return;
  }
  R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
  R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    3990:	0e 5f       	subi	r16, 0xFE	; 254
    3992:	1f 4f       	sbci	r17, 0xFF	; 255
    3994:	67 01       	movw	r12, r14
    3996:	0e 15       	cp	r16, r14
    3998:	1f 05       	cpc	r17, r15
    399a:	c0 f3       	brcs	.-16     	; 0x398c <GetVloss+0xb8>
//     wait50us();			// wait exactly 50us
     wait5us();			// wait exactly 5us
  }
  R_DDR = 0;				// switch back to input
    399c:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// no Pull up
    399e:	15 b8       	out	0x05, r1	; 5
 // wait10us();			//wait a little time
  wdt_reset();
    39a0:	a8 95       	wdr
  // read voltage without current
  ADCconfig.Samples = 5;		// set ADC to only 5 samples
    39a2:	85 e0       	ldi	r24, 0x05	; 5
    39a4:	80 93 3c 01 	sts	0x013C, r24
  adcv[2] = ReadADC(cap.cb);
    39a8:	80 91 7f 01 	lds	r24, 0x017F
    39ac:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
  if (adcv[2] > adcv[0]) {
    39b0:	c8 17       	cp	r28, r24
    39b2:	d9 07       	cpc	r29, r25
    39b4:	20 f4       	brcc	.+8      	; 0x39be <GetVloss+0xea>
     adcv[2] -= adcv[0];		//difference to beginning voltage
    39b6:	8c 01       	movw	r16, r24
    39b8:	0c 1b       	sub	r16, r28
    39ba:	1d 0b       	sbc	r17, r29
    39bc:	02 c0       	rjmp	.+4      	; 0x39c2 <GetVloss+0xee>
  } else {
     adcv[2] = 0;			// voltage is lower or same as beginning voltage
    39be:	00 e0       	ldi	r16, 0x00	; 0
    39c0:	10 e0       	ldi	r17, 0x00	; 0
  }
  // wait 2x the time which was required for loading
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    39c2:	ee 24       	eor	r14, r14
    39c4:	ff 24       	eor	r15, r15
    39c6:	05 c0       	rjmp	.+10     	; 0x39d2 <GetVloss+0xfe>
//     wait50us();
     wait5us();
    39c8:	0e 94 ca 13 	call	0x2794	; 0x2794 <wait5us>
     adcv[2] -= adcv[0];		//difference to beginning voltage
  } else {
     adcv[2] = 0;			// voltage is lower or same as beginning voltage
  }
  // wait 2x the time which was required for loading
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    39cc:	08 94       	sec
    39ce:	e1 1c       	adc	r14, r1
    39d0:	f1 1c       	adc	r15, r1
    39d2:	ec 14       	cp	r14, r12
    39d4:	fd 04       	cpc	r15, r13
    39d6:	c0 f3       	brcs	.-16     	; 0x39c8 <GetVloss+0xf4>
//     wait50us();
     wait5us();
  }
  adcv[3] = ReadADC(cap.cb);	// read voltage again, is discharged only a little bit ?
    39d8:	80 91 7f 01 	lds	r24, 0x017F
    39dc:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
  ADCconfig.Samples = ANZ_MESS;		// set ADC back to configured No. of samples
    39e0:	29 e1       	ldi	r18, 0x19	; 25
    39e2:	20 93 3c 01 	sts	0x013C, r18
  wdt_reset();
    39e6:	a8 95       	wdr
  if (adcv[3] > adcv[0]) {
    39e8:	c8 17       	cp	r28, r24
    39ea:	d9 07       	cpc	r29, r25
    39ec:	18 f4       	brcc	.+6      	; 0x39f4 <GetVloss+0x120>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    39ee:	8c 1b       	sub	r24, r28
    39f0:	9d 0b       	sbc	r25, r29
    39f2:	02 c0       	rjmp	.+4      	; 0x39f8 <GetVloss+0x124>
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    39f4:	80 e0       	ldi	r24, 0x00	; 0
    39f6:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
    39f8:	80 17       	cp	r24, r16
    39fa:	91 07       	cpc	r25, r17
    39fc:	a8 f4       	brcc	.+42     	; 0x3a28 <GetVloss+0x154>
     // build difference to load voltage
     adcv[1] = adcv[2] - adcv[3];	// lost voltage during load time wait
    39fe:	b8 01       	movw	r22, r16
    3a00:	68 1b       	sub	r22, r24
    3a02:	79 0b       	sbc	r23, r25
  } else {
     adcv[1] = 0;			// no lost voltage
  }
  // compute voltage drop as part from loaded voltage
  if (adcv[1] > 0) {
    3a04:	89 f0       	breq	.+34     	; 0x3a28 <GetVloss+0x154>
     // there is any voltage drop (adcv[1]) !
     // adcv[2] is the loaded voltage.
     cap.v_loss = (unsigned long)(adcv[1] * 500UL) / adcv[2];
    3a06:	80 e0       	ldi	r24, 0x00	; 0
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	24 ef       	ldi	r18, 0xF4	; 244
    3a0c:	31 e0       	ldi	r19, 0x01	; 1
    3a0e:	40 e0       	ldi	r20, 0x00	; 0
    3a10:	50 e0       	ldi	r21, 0x00	; 0
    3a12:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
    3a16:	98 01       	movw	r18, r16
    3a18:	40 e0       	ldi	r20, 0x00	; 0
    3a1a:	50 e0       	ldi	r21, 0x00	; 0
    3a1c:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
    3a20:	30 93 7d 01 	sts	0x017D, r19
    3a24:	20 93 7c 01 	sts	0x017C, r18
  lcd_line4();
  DisplayValue(lval.w[0],0,'x',4);
#endif

  // discharge capacitor again
  EntladePins();		// discharge capacitors
    3a28:	0e 94 ad 01 	call	0x35a	; 0x35a <EntladePins>
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    3a2c:	88 e0       	ldi	r24, 0x08	; 8
    3a2e:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    3a30:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    3a32:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    3a34:	15 b8       	out	0x05, r1	; 5
#endif
  return;
 } // end GetVdrop()
    3a36:	df 91       	pop	r29
    3a38:	cf 91       	pop	r28
    3a3a:	1f 91       	pop	r17
    3a3c:	0f 91       	pop	r16
    3a3e:	ff 90       	pop	r15
    3a40:	ef 90       	pop	r14
    3a42:	df 90       	pop	r13
    3a44:	cf 90       	pop	r12
    3a46:	08 95       	ret

00003a48 <Calibrate_UR>:
#include "Transistortester.h"
void Calibrate_UR(void) {
    3a48:	8f 92       	push	r8
    3a4a:	9f 92       	push	r9
    3a4c:	af 92       	push	r10
    3a4e:	bf 92       	push	r11
    3a50:	cf 92       	push	r12
    3a52:	df 92       	push	r13
    3a54:	ef 92       	push	r14
    3a56:	ff 92       	push	r15
    3a58:	0f 93       	push	r16
    3a5a:	1f 93       	push	r17
    3a5c:	cf 93       	push	r28
    3a5e:	df 93       	push	r29
  uint16_t sum_rp;	// sum of 3 Pin voltages with 680 Ohm load
  uint16_t u680;	// 3 * (Voltage at 680 Ohm)
#endif


  ADCconfig.U_AVCC = U_VCC;     // set initial VCC Voltage
    3a60:	88 e8       	ldi	r24, 0x88	; 136
    3a62:	93 e1       	ldi	r25, 0x13	; 19
    3a64:	90 93 41 01 	sts	0x0141, r25
    3a68:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    3a6c:	8e eb       	ldi	r24, 0xBE	; 190
    3a6e:	80 93 3c 01 	sts	0x013C, r24
                                        //############################################
#if FLASHEND > 0x1fff
  uint16_t mv2500;
  ADC_PORT = TXD_VAL;                   // switch to 0V
    3a72:	08 e0       	ldi	r16, 0x08	; 8
    3a74:	08 b9       	out	0x08, r16	; 8
  ADC_DDR = (1<<TPREF) | TXD_MSK;       // switch pin with 2.5V reference to GND
    3a76:	88 e1       	ldi	r24, 0x18	; 24
    3a78:	87 b9       	out	0x07, r24	; 7
  wait20us();			// switch only short time, so that the relais do not really switch
    3a7a:	0e 94 c8 13 	call	0x2790	; 0x2790 <wait20us>
  ADC_DDR =  TXD_MSK;		// switch pin with reference back to input
    3a7e:	07 b9       	out	0x07, r16	; 7
  mv2500 = W5msReadADC(TPREF); // read voltage of 2.5V precision reference
    3a80:	84 e0       	ldi	r24, 0x04	; 4
    3a82:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
    3a86:	ec 01       	movw	r28, r24
  if ((mv2500 > 2250) && (mv2500 < 2750)) {
    3a88:	8b 5c       	subi	r24, 0xCB	; 203
    3a8a:	98 40       	sbci	r25, 0x08	; 8
    3a8c:	21 e0       	ldi	r18, 0x01	; 1
    3a8e:	83 3f       	cpi	r24, 0xF3	; 243
    3a90:	92 07       	cpc	r25, r18
    3a92:	c0 f4       	brcc	.+48     	; 0x3ac4 <Calibrate_UR+0x7c>
     // precision voltage reference connected, update U_AVCC
     WithReference = 1;
    3a94:	81 e0       	ldi	r24, 0x01	; 1
    3a96:	80 93 49 01 	sts	0x0149, r24
     ADCconfig.U_AVCC = (unsigned long)((unsigned long)ADCconfig.U_AVCC * 2495) / mv2500;
    3a9a:	60 91 40 01 	lds	r22, 0x0140
    3a9e:	70 91 41 01 	lds	r23, 0x0141
    3aa2:	80 e0       	ldi	r24, 0x00	; 0
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	2f eb       	ldi	r18, 0xBF	; 191
    3aa8:	39 e0       	ldi	r19, 0x09	; 9
    3aaa:	40 e0       	ldi	r20, 0x00	; 0
    3aac:	50 e0       	ldi	r21, 0x00	; 0
    3aae:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
    3ab2:	9e 01       	movw	r18, r28
    3ab4:	40 e0       	ldi	r20, 0x00	; 0
    3ab6:	50 e0       	ldi	r21, 0x00	; 0
    3ab8:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
    3abc:	30 93 41 01 	sts	0x0141, r19
    3ac0:	20 93 40 01 	sts	0x0140, r18
  }
#endif
#ifdef WITH_AUTO_REF
  (void) ReadADC(MUX_INT_REF);	// read reference voltage 
    3ac4:	8e e0       	ldi	r24, 0x0E	; 14
    3ac6:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ReadADC>
  ref_mv = W5msReadADC(MUX_INT_REF);	// read reference voltage 
    3aca:	8e e0       	ldi	r24, 0x0E	; 14
    3acc:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
    3ad0:	90 93 45 01 	sts	0x0145, r25
    3ad4:	80 93 44 01 	sts	0x0144, r24
  RefVoltage();			//compute RHmultip = f(reference voltage)
    3ad8:	0e 94 48 02 	call	0x490	; 0x490 <RefVoltage>
#else
  ref_mv = DEFAULT_BAND_GAP;    // set to default Reference Voltage
#endif
  ADCconfig.U_Bandgap = ADC_internal_reference; // set internal reference voltage for ADC
    3adc:	82 e9       	ldi	r24, 0x92	; 146
    3ade:	91 e0       	ldi	r25, 0x01	; 1
    3ae0:	0e 94 cf 1e 	call	0x3d9e	; 0x3d9e <__eerd_byte_m168>
    3ae4:	99 27       	eor	r25, r25
    3ae6:	87 fd       	sbrc	r24, 7
    3ae8:	90 95       	com	r25
    3aea:	20 91 44 01 	lds	r18, 0x0144
    3aee:	30 91 45 01 	lds	r19, 0x0145
    3af2:	82 0f       	add	r24, r18
    3af4:	93 1f       	adc	r25, r19
    3af6:	90 93 3f 01 	sts	0x013F, r25
    3afa:	80 93 3e 01 	sts	0x013E, r24
                                        //############################################

#ifdef AUTO_CAL
  // measurement of internal resistance of the ADC port outputs switched to GND
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    3afe:	79 e0       	ldi	r23, 0x09	; 9
    3b00:	d7 2e       	mov	r13, r23
    3b02:	d7 b8       	out	0x07, r13	; 7
  R_PORT = 1<<(TP1*2);		//R_L-PORT 1 to VCC
    3b04:	aa 24       	eor	r10, r10
    3b06:	a3 94       	inc	r10
    3b08:	a5 b8       	out	0x05, r10	; 5
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to VCC
    3b0a:	a4 b8       	out	0x04, r10	; 4
  sum_rm = W5msReadADC(TP1);
    3b0c:	80 e0       	ldi	r24, 0x00	; 0
    3b0e:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
    3b12:	8c 01       	movw	r16, r24

  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin 2 to output 0V
    3b14:	6a e0       	ldi	r22, 0x0A	; 10
    3b16:	86 2e       	mov	r8, r22
    3b18:	87 b8       	out	0x07, r8	; 7
  R_PORT =  1<<(TP2*2);		//R_L-PORT 2 to VCC
    3b1a:	54 e0       	ldi	r21, 0x04	; 4
    3b1c:	c5 2e       	mov	r12, r21
    3b1e:	c5 b8       	out	0x05, r12	; 5
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to VCC
    3b20:	c4 b8       	out	0x04, r12	; 4
  sum_rm += W5msReadADC(TP2);
    3b22:	81 e0       	ldi	r24, 0x01	; 1
    3b24:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
    3b28:	08 0f       	add	r16, r24
    3b2a:	19 1f       	adc	r17, r25

  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin 3 to output 0V
    3b2c:	4c e0       	ldi	r20, 0x0C	; 12
    3b2e:	f4 2e       	mov	r15, r20
    3b30:	f7 b8       	out	0x07, r15	; 7
  R_PORT =  1<<(TP3*2);		//R_L-PORT 3 to VCC
    3b32:	30 e1       	ldi	r19, 0x10	; 16
    3b34:	e3 2e       	mov	r14, r19
    3b36:	e5 b8       	out	0x05, r14	; 5
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to VCC
    3b38:	e4 b8       	out	0x04, r14	; 4
  sum_rm += W5msReadADC(TP3);	//add all three values
    3b3a:	82 e0       	ldi	r24, 0x02	; 2
    3b3c:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
    3b40:	08 0f       	add	r16, r24
    3b42:	19 1f       	adc	r17, r25

  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
    3b44:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
    3b46:	d8 b8       	out	0x08, r13	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    3b48:	d7 b8       	out	0x07, r13	; 7
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
    3b4a:	a4 b8       	out	0x04, r10	; 4
  sum_rp = ADCconfig.U_AVCC - W5msReadADC(TP1);
    3b4c:	c0 91 40 01 	lds	r28, 0x0140
    3b50:	d0 91 41 01 	lds	r29, 0x0141
    3b54:	80 e0       	ldi	r24, 0x00	; 0
    3b56:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
    3b5a:	5c 01       	movw	r10, r24
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
    3b5c:	88 b8       	out	0x08, r8	; 8
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
    3b5e:	87 b8       	out	0x07, r8	; 7
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
    3b60:	c4 b8       	out	0x04, r12	; 4
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP2);
    3b62:	c0 90 40 01 	lds	r12, 0x0140
    3b66:	d0 90 41 01 	lds	r13, 0x0141
    3b6a:	81 e0       	ldi	r24, 0x01	; 1
    3b6c:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
    3b70:	4c 01       	movw	r8, r24

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
    3b72:	f8 b8       	out	0x08, r15	; 8
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
    3b74:	f7 b8       	out	0x07, r15	; 7
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
    3b76:	e4 b8       	out	0x04, r14	; 4
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP3);
    3b78:	e0 90 40 01 	lds	r14, 0x0140
    3b7c:	f0 90 41 01 	lds	r15, 0x0141
    3b80:	82 e0       	ldi	r24, 0x02	; 2
    3b82:	0e 94 35 1a 	call	0x346a	; 0x346a <W5msReadADC>
  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
  sum_rp = ADCconfig.U_AVCC - W5msReadADC(TP1);
    3b86:	cc 0d       	add	r28, r12
    3b88:	dd 1d       	adc	r29, r13
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP2);
    3b8a:	ce 0d       	add	r28, r14
    3b8c:	df 1d       	adc	r29, r15
    3b8e:	ca 19       	sub	r28, r10
    3b90:	db 09       	sbc	r29, r11

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP3);
    3b92:	c8 19       	sub	r28, r8
    3b94:	d9 09       	sbc	r29, r9
    3b96:	c8 1b       	sub	r28, r24
    3b98:	d9 0b       	sbc	r29, r25

  u680 = ((ADCconfig.U_AVCC * 3) - sum_rm - sum_rp);	//three times the voltage at the 680 Ohm
    3b9a:	80 91 40 01 	lds	r24, 0x0140
    3b9e:	90 91 41 01 	lds	r25, 0x0141
    3ba2:	6c 01       	movw	r12, r24
    3ba4:	cc 0c       	add	r12, r12
    3ba6:	dd 1c       	adc	r13, r13
    3ba8:	c8 0e       	add	r12, r24
    3baa:	d9 1e       	adc	r13, r25
    3bac:	c0 1a       	sub	r12, r16
    3bae:	d1 0a       	sbc	r13, r17
    3bb0:	cc 1a       	sub	r12, r28
    3bb2:	dd 0a       	sbc	r13, r29
  pin_rmi = (unsigned long)((unsigned long)sum_rm * (unsigned long)R_L_VAL) / (unsigned long)u680;
    3bb4:	ee 24       	eor	r14, r14
    3bb6:	ff 24       	eor	r15, r15
    3bb8:	b8 01       	movw	r22, r16
    3bba:	80 e0       	ldi	r24, 0x00	; 0
    3bbc:	90 e0       	ldi	r25, 0x00	; 0
    3bbe:	20 e9       	ldi	r18, 0x90	; 144
    3bc0:	3a e1       	ldi	r19, 0x1A	; 26
    3bc2:	40 e0       	ldi	r20, 0x00	; 0
    3bc4:	50 e0       	ldi	r21, 0x00	; 0
    3bc6:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
    3bca:	a7 01       	movw	r20, r14
    3bcc:	96 01       	movw	r18, r12
    3bce:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
    3bd2:	89 01       	movw	r16, r18
    3bd4:	30 93 48 01 	sts	0x0148, r19
    3bd8:	20 93 47 01 	sts	0x0147, r18
//  adcmv[2] = pin_rm;	// for last output in row 2
  pin_rpl = (unsigned long)((unsigned long)sum_rp * (unsigned long)R_L_VAL) / (unsigned long)u680;
    3bdc:	be 01       	movw	r22, r28
    3bde:	80 e0       	ldi	r24, 0x00	; 0
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	20 e9       	ldi	r18, 0x90	; 144
    3be4:	3a e1       	ldi	r19, 0x1A	; 26
    3be6:	40 e0       	ldi	r20, 0x00	; 0
    3be8:	50 e0       	ldi	r21, 0x00	; 0
    3bea:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <__mulsi3>
    3bee:	a7 01       	movw	r20, r14
    3bf0:	96 01       	movw	r18, r12
    3bf2:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <__udivmodsi4>
    3bf6:	c9 01       	movw	r24, r18
    3bf8:	30 93 43 01 	sts	0x0143, r19
    3bfc:	20 93 42 01 	sts	0x0142, r18
  resis680pl = pin_rpl + R_L_VAL;
    3c00:	80 57       	subi	r24, 0x70	; 112
    3c02:	95 4e       	sbci	r25, 0xE5	; 229
    3c04:	90 93 09 01 	sts	0x0109, r25
    3c08:	80 93 08 01 	sts	0x0108, r24
  resis680mi = pin_rmi + R_L_VAL;
    3c0c:	00 57       	subi	r16, 0x70	; 112
    3c0e:	15 4e       	sbci	r17, 0xE5	; 229
    3c10:	10 93 04 01 	sts	0x0104, r17
    3c14:	00 93 03 01 	sts	0x0103, r16
#endif

  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    3c18:	89 e1       	ldi	r24, 0x19	; 25
    3c1a:	80 93 3c 01 	sts	0x013C, r24
 } 
    3c1e:	df 91       	pop	r29
    3c20:	cf 91       	pop	r28
    3c22:	1f 91       	pop	r17
    3c24:	0f 91       	pop	r16
    3c26:	ff 90       	pop	r15
    3c28:	ef 90       	pop	r14
    3c2a:	df 90       	pop	r13
    3c2c:	cf 90       	pop	r12
    3c2e:	bf 90       	pop	r11
    3c30:	af 90       	pop	r10
    3c32:	9f 90       	pop	r9
    3c34:	8f 90       	pop	r8
    3c36:	08 95       	ret

00003c38 <__mulsi3>:
    3c38:	62 9f       	mul	r22, r18
    3c3a:	d0 01       	movw	r26, r0
    3c3c:	73 9f       	mul	r23, r19
    3c3e:	f0 01       	movw	r30, r0
    3c40:	82 9f       	mul	r24, r18
    3c42:	e0 0d       	add	r30, r0
    3c44:	f1 1d       	adc	r31, r1
    3c46:	64 9f       	mul	r22, r20
    3c48:	e0 0d       	add	r30, r0
    3c4a:	f1 1d       	adc	r31, r1
    3c4c:	92 9f       	mul	r25, r18
    3c4e:	f0 0d       	add	r31, r0
    3c50:	83 9f       	mul	r24, r19
    3c52:	f0 0d       	add	r31, r0
    3c54:	74 9f       	mul	r23, r20
    3c56:	f0 0d       	add	r31, r0
    3c58:	65 9f       	mul	r22, r21
    3c5a:	f0 0d       	add	r31, r0
    3c5c:	99 27       	eor	r25, r25
    3c5e:	72 9f       	mul	r23, r18
    3c60:	b0 0d       	add	r27, r0
    3c62:	e1 1d       	adc	r30, r1
    3c64:	f9 1f       	adc	r31, r25
    3c66:	63 9f       	mul	r22, r19
    3c68:	b0 0d       	add	r27, r0
    3c6a:	e1 1d       	adc	r30, r1
    3c6c:	f9 1f       	adc	r31, r25
    3c6e:	bd 01       	movw	r22, r26
    3c70:	cf 01       	movw	r24, r30
    3c72:	11 24       	eor	r1, r1
    3c74:	08 95       	ret

00003c76 <__udivmodqi4>:
    3c76:	99 1b       	sub	r25, r25
    3c78:	79 e0       	ldi	r23, 0x09	; 9
    3c7a:	04 c0       	rjmp	.+8      	; 0x3c84 <__udivmodqi4_ep>

00003c7c <__udivmodqi4_loop>:
    3c7c:	99 1f       	adc	r25, r25
    3c7e:	96 17       	cp	r25, r22
    3c80:	08 f0       	brcs	.+2      	; 0x3c84 <__udivmodqi4_ep>
    3c82:	96 1b       	sub	r25, r22

00003c84 <__udivmodqi4_ep>:
    3c84:	88 1f       	adc	r24, r24
    3c86:	7a 95       	dec	r23
    3c88:	c9 f7       	brne	.-14     	; 0x3c7c <__udivmodqi4_loop>
    3c8a:	80 95       	com	r24
    3c8c:	08 95       	ret

00003c8e <__udivmodhi4>:
    3c8e:	aa 1b       	sub	r26, r26
    3c90:	bb 1b       	sub	r27, r27
    3c92:	51 e1       	ldi	r21, 0x11	; 17
    3c94:	07 c0       	rjmp	.+14     	; 0x3ca4 <__udivmodhi4_ep>

00003c96 <__udivmodhi4_loop>:
    3c96:	aa 1f       	adc	r26, r26
    3c98:	bb 1f       	adc	r27, r27
    3c9a:	a6 17       	cp	r26, r22
    3c9c:	b7 07       	cpc	r27, r23
    3c9e:	10 f0       	brcs	.+4      	; 0x3ca4 <__udivmodhi4_ep>
    3ca0:	a6 1b       	sub	r26, r22
    3ca2:	b7 0b       	sbc	r27, r23

00003ca4 <__udivmodhi4_ep>:
    3ca4:	88 1f       	adc	r24, r24
    3ca6:	99 1f       	adc	r25, r25
    3ca8:	5a 95       	dec	r21
    3caa:	a9 f7       	brne	.-22     	; 0x3c96 <__udivmodhi4_loop>
    3cac:	80 95       	com	r24
    3cae:	90 95       	com	r25
    3cb0:	bc 01       	movw	r22, r24
    3cb2:	cd 01       	movw	r24, r26
    3cb4:	08 95       	ret

00003cb6 <__udivmodsi4>:
    3cb6:	a1 e2       	ldi	r26, 0x21	; 33
    3cb8:	1a 2e       	mov	r1, r26
    3cba:	aa 1b       	sub	r26, r26
    3cbc:	bb 1b       	sub	r27, r27
    3cbe:	fd 01       	movw	r30, r26
    3cc0:	0d c0       	rjmp	.+26     	; 0x3cdc <__udivmodsi4_ep>

00003cc2 <__udivmodsi4_loop>:
    3cc2:	aa 1f       	adc	r26, r26
    3cc4:	bb 1f       	adc	r27, r27
    3cc6:	ee 1f       	adc	r30, r30
    3cc8:	ff 1f       	adc	r31, r31
    3cca:	a2 17       	cp	r26, r18
    3ccc:	b3 07       	cpc	r27, r19
    3cce:	e4 07       	cpc	r30, r20
    3cd0:	f5 07       	cpc	r31, r21
    3cd2:	20 f0       	brcs	.+8      	; 0x3cdc <__udivmodsi4_ep>
    3cd4:	a2 1b       	sub	r26, r18
    3cd6:	b3 0b       	sbc	r27, r19
    3cd8:	e4 0b       	sbc	r30, r20
    3cda:	f5 0b       	sbc	r31, r21

00003cdc <__udivmodsi4_ep>:
    3cdc:	66 1f       	adc	r22, r22
    3cde:	77 1f       	adc	r23, r23
    3ce0:	88 1f       	adc	r24, r24
    3ce2:	99 1f       	adc	r25, r25
    3ce4:	1a 94       	dec	r1
    3ce6:	69 f7       	brne	.-38     	; 0x3cc2 <__udivmodsi4_loop>
    3ce8:	60 95       	com	r22
    3cea:	70 95       	com	r23
    3cec:	80 95       	com	r24
    3cee:	90 95       	com	r25
    3cf0:	9b 01       	movw	r18, r22
    3cf2:	ac 01       	movw	r20, r24
    3cf4:	bd 01       	movw	r22, r26
    3cf6:	cf 01       	movw	r24, r30
    3cf8:	08 95       	ret

00003cfa <__divmodsi4>:
    3cfa:	97 fb       	bst	r25, 7
    3cfc:	09 2e       	mov	r0, r25
    3cfe:	05 26       	eor	r0, r21
    3d00:	0e d0       	rcall	.+28     	; 0x3d1e <__divmodsi4_neg1>
    3d02:	57 fd       	sbrc	r21, 7
    3d04:	04 d0       	rcall	.+8      	; 0x3d0e <__divmodsi4_neg2>
    3d06:	d7 df       	rcall	.-82     	; 0x3cb6 <__udivmodsi4>
    3d08:	0a d0       	rcall	.+20     	; 0x3d1e <__divmodsi4_neg1>
    3d0a:	00 1c       	adc	r0, r0
    3d0c:	38 f4       	brcc	.+14     	; 0x3d1c <__divmodsi4_exit>

00003d0e <__divmodsi4_neg2>:
    3d0e:	50 95       	com	r21
    3d10:	40 95       	com	r20
    3d12:	30 95       	com	r19
    3d14:	21 95       	neg	r18
    3d16:	3f 4f       	sbci	r19, 0xFF	; 255
    3d18:	4f 4f       	sbci	r20, 0xFF	; 255
    3d1a:	5f 4f       	sbci	r21, 0xFF	; 255

00003d1c <__divmodsi4_exit>:
    3d1c:	08 95       	ret

00003d1e <__divmodsi4_neg1>:
    3d1e:	f6 f7       	brtc	.-4      	; 0x3d1c <__divmodsi4_exit>
    3d20:	90 95       	com	r25
    3d22:	80 95       	com	r24
    3d24:	70 95       	com	r23
    3d26:	61 95       	neg	r22
    3d28:	7f 4f       	sbci	r23, 0xFF	; 255
    3d2a:	8f 4f       	sbci	r24, 0xFF	; 255
    3d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d2e:	08 95       	ret

00003d30 <itoa>:
    3d30:	fb 01       	movw	r30, r22
    3d32:	9f 01       	movw	r18, r30
    3d34:	e8 94       	clt
    3d36:	42 30       	cpi	r20, 0x02	; 2
    3d38:	c4 f0       	brlt	.+48     	; 0x3d6a <itoa+0x3a>
    3d3a:	45 32       	cpi	r20, 0x25	; 37
    3d3c:	b4 f4       	brge	.+44     	; 0x3d6a <itoa+0x3a>
    3d3e:	4a 30       	cpi	r20, 0x0A	; 10
    3d40:	29 f4       	brne	.+10     	; 0x3d4c <itoa+0x1c>
    3d42:	97 fb       	bst	r25, 7
    3d44:	1e f4       	brtc	.+6      	; 0x3d4c <itoa+0x1c>
    3d46:	90 95       	com	r25
    3d48:	81 95       	neg	r24
    3d4a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d4c:	64 2f       	mov	r22, r20
    3d4e:	77 27       	eor	r23, r23
    3d50:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <__udivmodhi4>
    3d54:	80 5d       	subi	r24, 0xD0	; 208
    3d56:	8a 33       	cpi	r24, 0x3A	; 58
    3d58:	0c f0       	brlt	.+2      	; 0x3d5c <itoa+0x2c>
    3d5a:	89 5d       	subi	r24, 0xD9	; 217
    3d5c:	81 93       	st	Z+, r24
    3d5e:	cb 01       	movw	r24, r22
    3d60:	00 97       	sbiw	r24, 0x00	; 0
    3d62:	a1 f7       	brne	.-24     	; 0x3d4c <itoa+0x1c>
    3d64:	16 f4       	brtc	.+4      	; 0x3d6a <itoa+0x3a>
    3d66:	5d e2       	ldi	r21, 0x2D	; 45
    3d68:	51 93       	st	Z+, r21
    3d6a:	10 82       	st	Z, r1
    3d6c:	c9 01       	movw	r24, r18
    3d6e:	0c 94 f0 1e 	jmp	0x3de0	; 0x3de0 <strrev>

00003d72 <utoa>:
    3d72:	fb 01       	movw	r30, r22
    3d74:	9f 01       	movw	r18, r30
    3d76:	42 30       	cpi	r20, 0x02	; 2
    3d78:	74 f0       	brlt	.+28     	; 0x3d96 <utoa+0x24>
    3d7a:	45 32       	cpi	r20, 0x25	; 37
    3d7c:	64 f4       	brge	.+24     	; 0x3d96 <utoa+0x24>
    3d7e:	64 2f       	mov	r22, r20
    3d80:	77 27       	eor	r23, r23
    3d82:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <__udivmodhi4>
    3d86:	80 5d       	subi	r24, 0xD0	; 208
    3d88:	8a 33       	cpi	r24, 0x3A	; 58
    3d8a:	0c f0       	brlt	.+2      	; 0x3d8e <utoa+0x1c>
    3d8c:	89 5d       	subi	r24, 0xD9	; 217
    3d8e:	81 93       	st	Z+, r24
    3d90:	cb 01       	movw	r24, r22
    3d92:	00 97       	sbiw	r24, 0x00	; 0
    3d94:	a1 f7       	brne	.-24     	; 0x3d7e <utoa+0xc>
    3d96:	10 82       	st	Z, r1
    3d98:	c9 01       	movw	r24, r18
    3d9a:	0c 94 f0 1e 	jmp	0x3de0	; 0x3de0 <strrev>

00003d9e <__eerd_byte_m168>:
    3d9e:	f9 99       	sbic	0x1f, 1	; 31
    3da0:	fe cf       	rjmp	.-4      	; 0x3d9e <__eerd_byte_m168>
    3da2:	92 bd       	out	0x22, r25	; 34
    3da4:	81 bd       	out	0x21, r24	; 33
    3da6:	f8 9a       	sbi	0x1f, 0	; 31
    3da8:	99 27       	eor	r25, r25
    3daa:	80 b5       	in	r24, 0x20	; 32
    3dac:	08 95       	ret

00003dae <__eerd_word_m168>:
    3dae:	a8 e1       	ldi	r26, 0x18	; 24
    3db0:	b0 e0       	ldi	r27, 0x00	; 0
    3db2:	42 e0       	ldi	r20, 0x02	; 2
    3db4:	50 e0       	ldi	r21, 0x00	; 0
    3db6:	0c 94 02 1f 	jmp	0x3e04	; 0x3e04 <__eerd_blraw_m168>

00003dba <__eewr_byte_m168>:
    3dba:	26 2f       	mov	r18, r22

00003dbc <__eewr_r18_m168>:
    3dbc:	f9 99       	sbic	0x1f, 1	; 31
    3dbe:	fe cf       	rjmp	.-4      	; 0x3dbc <__eewr_r18_m168>
    3dc0:	1f ba       	out	0x1f, r1	; 31
    3dc2:	92 bd       	out	0x22, r25	; 34
    3dc4:	81 bd       	out	0x21, r24	; 33
    3dc6:	20 bd       	out	0x20, r18	; 32
    3dc8:	0f b6       	in	r0, 0x3f	; 63
    3dca:	f8 94       	cli
    3dcc:	fa 9a       	sbi	0x1f, 2	; 31
    3dce:	f9 9a       	sbi	0x1f, 1	; 31
    3dd0:	0f be       	out	0x3f, r0	; 63
    3dd2:	01 96       	adiw	r24, 0x01	; 1
    3dd4:	08 95       	ret

00003dd6 <__eewr_word_m168>:
    3dd6:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__eewr_byte_m168>
    3dda:	27 2f       	mov	r18, r23
    3ddc:	0c 94 de 1e 	jmp	0x3dbc	; 0x3dbc <__eewr_r18_m168>

00003de0 <strrev>:
    3de0:	dc 01       	movw	r26, r24
    3de2:	fc 01       	movw	r30, r24
    3de4:	67 2f       	mov	r22, r23
    3de6:	71 91       	ld	r23, Z+
    3de8:	77 23       	and	r23, r23
    3dea:	e1 f7       	brne	.-8      	; 0x3de4 <strrev+0x4>
    3dec:	32 97       	sbiw	r30, 0x02	; 2
    3dee:	04 c0       	rjmp	.+8      	; 0x3df8 <strrev+0x18>
    3df0:	7c 91       	ld	r23, X
    3df2:	6d 93       	st	X+, r22
    3df4:	70 83       	st	Z, r23
    3df6:	62 91       	ld	r22, -Z
    3df8:	ae 17       	cp	r26, r30
    3dfa:	bf 07       	cpc	r27, r31
    3dfc:	c8 f3       	brcs	.-14     	; 0x3df0 <strrev+0x10>
    3dfe:	08 95       	ret

00003e00 <__eerd_block_m168>:
    3e00:	dc 01       	movw	r26, r24
    3e02:	cb 01       	movw	r24, r22

00003e04 <__eerd_blraw_m168>:
    3e04:	fc 01       	movw	r30, r24
    3e06:	f9 99       	sbic	0x1f, 1	; 31
    3e08:	fe cf       	rjmp	.-4      	; 0x3e06 <__eerd_blraw_m168+0x2>
    3e0a:	06 c0       	rjmp	.+12     	; 0x3e18 <__eerd_blraw_m168+0x14>
    3e0c:	f2 bd       	out	0x22, r31	; 34
    3e0e:	e1 bd       	out	0x21, r30	; 33
    3e10:	f8 9a       	sbi	0x1f, 0	; 31
    3e12:	31 96       	adiw	r30, 0x01	; 1
    3e14:	00 b4       	in	r0, 0x20	; 32
    3e16:	0d 92       	st	X+, r0
    3e18:	41 50       	subi	r20, 0x01	; 1
    3e1a:	50 40       	sbci	r21, 0x00	; 0
    3e1c:	b8 f7       	brcc	.-18     	; 0x3e0c <__eerd_blraw_m168+0x8>
    3e1e:	08 95       	ret

00003e20 <_exit>:
    3e20:	f8 94       	cli

00003e22 <__stop_program>:
    3e22:	ff cf       	rjmp	.-2      	; 0x3e22 <__stop_program>
